From stephen at bitpay.com  Sat Dec  1 18:55:24 2012
From: stephen at bitpay.com (Stephen Pair)
Date: Sat, 1 Dec 2012 13:55:24 -0500
Subject: [Bitcoin-development] test (ignore)
Message-ID: <CADb9v0KzT3YGBmr+r5YcO8+_Grm+AMFfUeb2SckiuT4b6hZPfQ@mail.gmail.com>

Test post.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20121201/786bea4f/attachment.html>

From gavinandresen at gmail.com  Sat Dec  1 19:25:17 2012
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Sat, 1 Dec 2012 14:25:17 -0500
Subject: [Bitcoin-development] Payment Protocol Proposal:
	Invoices/Payments/Receipts
In-Reply-To: <20121129185330.GE6368@giles.gnomon.org.uk>
References: <CABsx9T0PsGLEAWRCjEDDFWQrb+DnJWQZ7mFLaZewAEX6vD1eHw@mail.gmail.com>
	<20121128233619.GA6368@giles.gnomon.org.uk>
	<CABsx9T09FYf2RTaMpmujt3qwTFc2JgnREH_7Hyk2mnCgb3CvAw@mail.gmail.com>
	<20121129170713.GD6368@giles.gnomon.org.uk>
	<CANEZrP233CytLs3PWBQ1TyuBTMv4sLGJkEMeGWYq5xRi+iLKew@mail.gmail.com>
	<20121129185330.GE6368@giles.gnomon.org.uk>
Message-ID: <CABsx9T35qD_xJEVw002eAhJ1kr6x5aMU7RpD+U84XEOZXmXcYw@mail.gmail.com>

Spec updated: https://gist.github.com/4120476

Changes are:

Version numbers:  a couple of people asked privately about adding
version numbers to the messages. In general, Protocol Buffers don't
need version numbers if later versions add only optional fields.

And best-practice is to know what version of something you're
expecting BEFORE you start parsing that something.

So, if a bitcoin client is getting Invoice messages via email or from
a web server, the version will be specified as part of the MIME type;
for example:
   Content-Type: application/x-bitcoin-invoice; version=1
The version= syntax is part of the MIME standard.

Following that best-practice of knowing what you're parsing before you
parse it, I added an invoice_version field to the SignedInvoice
message. It is now:

message SignedInvoice {
    required bytes pki_data = 1;
    required string pki_type = 2 [default = "x509"];
    required bytes serialized_invoice = 3;
    required uint32 invoice_version = 4 [default = 1];
    required bytes signature = 5;
}


Handling of receiptURI errors:

Following discussion here, I changed the spec to say:

"Clients may handle errors communicating with the receiptURI server
however they like, but should assume that if they cannot communicate
at all with the server then the Payment should either be retried later
or immediately rejected."

and under Receipt added:

"The Bitcoin client must be prepared to handle the case of an evil
merchant that returns accepted=false but broadcasts the transactions
anyway."


I also added a TODO "Test Vectors" section with base64-encoded
examples of everything.

-- 
--
Gavin Andresen



From gronager at ceptacle.com  Mon Dec  3 11:19:37 2012
From: gronager at ceptacle.com (Michael Gronager)
Date: Mon, 3 Dec 2012 12:19:37 +0100
Subject: [Bitcoin-development] Chain dust mitigation: Demurrage based Chain
	Vacuuming
Message-ID: <80648682-E34A-455E-B34A-6BC24652C3EA@ceptacle.com>

(Also posted on the forum: https://bitcointalk.org/index.php?topic=128900.0)

The amount of "dust" in the block chain is getting large and it is growing all the time. Currently 11% of unspent tx outputs (UTXO) are of 1Satoshi (0.00000001BTC), 32% is less than 0.0001BTC and 60% is less than 0.001BTC. (Thanks to Jan for digging out these numbers!)

This means that a huge part of the block chain is used for essentially nothing - e.g. the sum of the 11% is worth roughly 2 US cents !

The main source for these 1 Satoshi payouts is Sahtoshi Dice. And nothing wrong with that, however, we should work on ensuring that too many too small payments will not kill the size of the blockchain in the end - further, they are essentially too small to be included in other transaction as the added fee will often make it more expensive to remove them. Hence, there is no incentive to get rid of them.

I have an idea for a possible mitigation of this problem - introduction of demurrage - not as in it normal meaning as a percentage over time (see:http://en.wikipedia.org/wiki/Demurrage_(currency) btw, this has also been tried in freicoin), but as a mean to recycle pennies over time. The proposal is simple - UTXOs age out if not re-transacted - the smaller the coin the faster the aging:
1-99 Satoshi: lives for 210 blocks
100-9999 Satoshi: lives for 2100 blocks
10000-999999 Satoshi: lives for 21000 blocks
1000000-99999999 Satoshi: lives for 210000 blocks

Only amounts above 1BTC lives forever - (or we could even impose aging on those too..)

The aged coins are simply included in the block mining reward, creating another incentive for miners. Further, if we include all coins in this recycle scheme coins will never be lost forever. 

This scheme will impose some lifetimes also on e.g. colored coins (hence you need to use a certain amount to borrow space on the blockchain for the time needed, or simply transact them).

If you like this I would be happy to write it into a BIP.

Thoughts ?


From pieter.wuille at gmail.com  Mon Dec  3 12:05:41 2012
From: pieter.wuille at gmail.com (Pieter Wuille)
Date: Mon, 3 Dec 2012 13:05:41 +0100
Subject: [Bitcoin-development] Chain dust mitigation: Demurrage based
 Chain Vacuuming
In-Reply-To: <80648682-E34A-455E-B34A-6BC24652C3EA@ceptacle.com>
References: <80648682-E34A-455E-B34A-6BC24652C3EA@ceptacle.com>
Message-ID: <CAPg+sBi25xP8R03y1VR=q4ZJaeT6FAuV=hXsq_7niSHycpnPuA@mail.gmail.com>

On Mon, Dec 3, 2012 at 12:19 PM, Michael Gronager <gronager at ceptacle.com>wrote:

> (Also posted on the forum:
> https://bitcointalk.org/index.php?topic=128900.0)
>
> The amount of "dust" in the block chain is getting large and it is growing
> all the time. Currently 11% of unspent tx outputs (UTXO) are of 1Satoshi
> (0.00000001BTC), 32% is less than 0.0001BTC and 60% is less than 0.001BTC.
> (Thanks to Jan for digging out these numbers!)
>

I've noticed this too, and it is a concern indeed.


> I have an idea for a possible mitigation of this problem - introduction of
> demurrage - not as in it normal meaning as a percentage over time (see:
> http://en.wikipedia.org/wiki/Demurrage_(currency) btw, this has also been
> tried in freicoin), but as a mean to recycle pennies over time. The
> proposal is simple - UTXOs age out if not re-transacted - the smaller the
> coin the faster the aging:
> 1-99 Satoshi: lives for 210 blocks
> 100-9999 Satoshi: lives for 2100 blocks
> 10000-999999 Satoshi: lives for 21000 blocks
> 1000000-99999999 Satoshi: lives for 210000 blocks
>

If this were a proposal at the time Bitcoin was created, I would definitely
be in favor, but I feel we can't just change such a policy right now - it's
not what people signed up for when they started using the system. I also
see no way to implement this without a hard fork, which would require
planning at least 1-2 years in advance (imho). By that time, the economic
landscape of Bitcoin may be vastly different, and either dust spam will
have killed it, or we will have found another solution already.

Personally, I think the best solution is to change the mining policy to
prioritize (and perhaps favor for free relay/inclusion) transactions that
reduce the number of UTXO's.

-- 
Pieter
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20121203/2ea2d932/attachment.html>

From gronager at ceptacle.com  Mon Dec  3 12:24:56 2012
From: gronager at ceptacle.com (Michael Gronager)
Date: Mon, 3 Dec 2012 13:24:56 +0100
Subject: [Bitcoin-development] Chain dust mitigation: Demurrage based
	Chain Vacuuming
In-Reply-To: <CAPg+sBi25xP8R03y1VR=q4ZJaeT6FAuV=hXsq_7niSHycpnPuA@mail.gmail.com>
References: <80648682-E34A-455E-B34A-6BC24652C3EA@ceptacle.com>
	<CAPg+sBi25xP8R03y1VR=q4ZJaeT6FAuV=hXsq_7niSHycpnPuA@mail.gmail.com>
Message-ID: <9CEDE4D4-3685-4F70-953E-15CC50A8AA3F@ceptacle.com>

> If this were a proposal at the time Bitcoin was created, I would definitely be in favor, but I feel we can't just change such a policy right now - it's not what people signed up for when they started using the system. I also see no way to implement this without a hard fork, which would require planning at least 1-2 years in advance (imho). By that time, the economic landscape of Bitcoin may be vastly different, and either dust spam will have killed it, or we will have found another solution already.

Bitcoin aka the blockchain is defined by the majority of the miners. This is what people have signed up to imo. A scheme that a) is of benefit for us all and b) is also of economical benefit for the miners, will likely be accepted quite fast - especially now when the bounty was just halved... I also fear that there is a lot of BTCs that is effectively un-owned and it could even drive Satoshi to use some of his BTCs ;)

> Personally, I think the best solution is to change the mining policy to prioritize (and perhaps favor for free relay/inclusion) transactions that reduce the number of UTXO's.

Agree - initially (and possibly in parallel) this would be a nice path to follow - it could be done solely by adjusting the relay fee: Transactions that increases the # UTXOs pay extra, those that reduce it pay less (symmetrical around a minimum fee). So in other words we 'tax' increasing the size of the UTXOs.

No matter how it is done - as long as a client is not punished for getting rid of dust, and clients are rewritten to do this automatically we could re-evaluate after a some time - but currently the number of UTXOs is growing rapidly. 

/M




> 
> -- 
> Pieter
>  
> ------------------------------------------------------------------------------
> Keep yourself connected to Go Parallel: 
> BUILD Helping you discover the best ways to construct your parallel projects.
> http://goparallel.sourceforge.net_______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development




From pieter.wuille at gmail.com  Mon Dec  3 12:33:09 2012
From: pieter.wuille at gmail.com (Pieter Wuille)
Date: Mon, 3 Dec 2012 13:33:09 +0100
Subject: [Bitcoin-development] Chain dust mitigation: Demurrage based
 Chain Vacuuming
In-Reply-To: <9CEDE4D4-3685-4F70-953E-15CC50A8AA3F@ceptacle.com>
References: <80648682-E34A-455E-B34A-6BC24652C3EA@ceptacle.com>
	<CAPg+sBi25xP8R03y1VR=q4ZJaeT6FAuV=hXsq_7niSHycpnPuA@mail.gmail.com>
	<9CEDE4D4-3685-4F70-953E-15CC50A8AA3F@ceptacle.com>
Message-ID: <CAPg+sBhwUz4ddEXRT0p7mQUwHkqtTes1i88a-uqsa+QQs2n=CA@mail.gmail.com>

On Mon, Dec 3, 2012 at 1:24 PM, Michael Gronager <gronager at ceptacle.com>wrote:

> > If this were a proposal at the time Bitcoin was created, I would
> definitely be in favor, but I feel we can't just change such a policy right
> now - it's not what people signed up for when they started using the
> system. I also see no way to implement this without a hard fork, which
> would require planning at least 1-2 years in advance (imho). By that time,
> the economic landscape of Bitcoin may be vastly different, and either dust
> spam will have killed it, or we will have found another solution already.
>
> Bitcoin aka the blockchain is defined by the majority of the miners. This
> is what people have signed up to imo. A scheme that a) is of benefit for us
> all and b) is also of economical benefit for the miners, will likely be
> accepted quite fast - especially now when the bounty was just halved... I
> also fear that there is a lot of BTCs that is effectively un-owned and it
> could even drive Satoshi to use some of his BTCs ;)


I disagree completely. The only power granted to miners is to decide the
order of otherwise valid transactions (up to postponing some indefinitely)
- they have no ability to control the rules for validity them self  In
particular, the rules that prevent double spending and (monetary) inflation
of the currency are deliberately NOT left to miners. If this were the case,
they could just as well vote to keep the 50 BTC block payout, and that
would certainly not be what people signed up for.

-- 
Pieter
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20121203/c9898492/attachment.html>

From laanwj at gmail.com  Mon Dec  3 12:40:52 2012
From: laanwj at gmail.com (Wladimir)
Date: Mon, 3 Dec 2012 13:40:52 +0100
Subject: [Bitcoin-development] Chain dust mitigation: Demurrage based
 Chain Vacuuming
In-Reply-To: <80648682-E34A-455E-B34A-6BC24652C3EA@ceptacle.com>
References: <80648682-E34A-455E-B34A-6BC24652C3EA@ceptacle.com>
Message-ID: <CA+s+GJAxGxrtqHSx4ssowg=C=Q+ajELHsEfAgjNh9W2+ExpgVQ@mail.gmail.com>

I do think it would be nice to sweep up dust transactions, however I'm not
that happy with your solution

1) Wouldn't the need to re-transact your coins to keep them safe from
"vultures", result in people frantically sending coins to themselves, and
thus expand the block chain, instead of reduce growth?

2) putting those hard limits in passes a value judgement that IMO should
not be present in the protocol. <1BTC may be worth a lot some day, or it
could go the other way around, with dust spam of 10+ BTC. Either way the
limits will have to be changed again, with yet another fork.

3) The (normal) user does not have a view of his balance consisting of
inputs and outputs of various sizes. He just sees his balance as one
number. And somehow, inexplicably (except through a very difficult
explanation), it's going down... what if he has 10000 BTC in 0.9999999 BTC
units? Annnnnd it's gone after 210000 blocks.

I wonder if there is a way for the whole process to be transparent to the
user. The wallet is 'defragmented' but without losing the swept up coins to
the miner.

Wladimir



On Mon, Dec 3, 2012 at 12:19 PM, Michael Gronager <gronager at ceptacle.com>wrote:

> (Also posted on the forum:
> https://bitcointalk.org/index.php?topic=128900.0)
>
> The amount of "dust" in the block chain is getting large and it is growing
> all the time. Currently 11% of unspent tx outputs (UTXO) are of 1Satoshi
> (0.00000001BTC), 32% is less than 0.0001BTC and 60% is less than 0.001BTC.
> (Thanks to Jan for digging out these numbers!)
>
> This means that a huge part of the block chain is used for essentially
> nothing - e.g. the sum of the 11% is worth roughly 2 US cents !
>
> The main source for these 1 Satoshi payouts is Sahtoshi Dice. And nothing
> wrong with that, however, we should work on ensuring that too many too
> small payments will not kill the size of the blockchain in the end -
> further, they are essentially too small to be included in other transaction
> as the added fee will often make it more expensive to remove them. Hence,
> there is no incentive to get rid of them.
>
> I have an idea for a possible mitigation of this problem - introduction of
> demurrage - not as in it normal meaning as a percentage over time (see:
> http://en.wikipedia.org/wiki/Demurrage_(currency) btw, this has also been
> tried in freicoin), but as a mean to recycle pennies over time. The
> proposal is simple - UTXOs age out if not re-transacted - the smaller the
> coin the faster the aging:
> 1-99 Satoshi: lives for 210 blocks
> 100-9999 Satoshi: lives for 2100 blocks
> 10000-999999 Satoshi: lives for 21000 blocks
> 1000000-99999999 Satoshi: lives for 210000 blocks
>
> Only amounts above 1BTC lives forever - (or we could even impose aging on
> those too..)
>
> The aged coins are simply included in the block mining reward, creating
> another incentive for miners. Further, if we include all coins in this
> recycle scheme coins will never be lost forever.
>
> This scheme will impose some lifetimes also on e.g. colored coins (hence
> you need to use a certain amount to borrow space on the blockchain for the
> time needed, or simply transact them).
>
> If you like this I would be happy to write it into a BIP.
>
> Thoughts ?
>
> ------------------------------------------------------------------------------
> Keep yourself connected to Go Parallel:
> BUILD Helping you discover the best ways to construct your parallel
> projects.
> http://goparallel.sourceforge.net
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20121203/37667201/attachment.html>

From gronager at ceptacle.com  Mon Dec  3 13:04:22 2012
From: gronager at ceptacle.com (Michael Gronager)
Date: Mon, 3 Dec 2012 14:04:22 +0100
Subject: [Bitcoin-development] Chain dust mitigation: Demurrage based
	Chain Vacuuming
In-Reply-To: <CA+s+GJAxGxrtqHSx4ssowg=C=Q+ajELHsEfAgjNh9W2+ExpgVQ@mail.gmail.com>
References: <80648682-E34A-455E-B34A-6BC24652C3EA@ceptacle.com>
	<CA+s+GJAxGxrtqHSx4ssowg=C=Q+ajELHsEfAgjNh9W2+ExpgVQ@mail.gmail.com>
Message-ID: <9B78C2C9-2B06-47F1-A99D-D36668D97B2D@ceptacle.com>

> 1) Wouldn't the need to re-transact your coins to keep them safe from "vultures", result in people frantically sending coins to themselves, and thus expand the block chain, instead of reduce growth?

Not at the rate suggested

> 2) putting those hard limits in passes a value judgement that IMO should not be present in the protocol. <1BTC may be worth a lot some day, or it could go the other way around, with dust spam of 10+ BTC. Either way the limits will have to be changed again, with yet another fork.

Well, retransmitting 1BTC ones every 4 years isn't that bad. So I don't see a need for another fork for this reason.

> 3) The (normal) user does not have a view of his balance consisting of inputs and outputs of various sizes. He just sees his balance as one number. And somehow, inexplicably (except through a very difficult explanation), it's going down... what if he has 10000 BTC in 0.9999999 BTC units? Annnnnd it's gone after 210000 blocks.

Agree to this - and also to the fact that it will be hard to introduce - it would be changing the protocol quite a lot (perhaps too much).

A better set of relay fee rules rewarding a decrease in # UTXOs is probably the (easiest) way forward.

/M
> 




From zgenjix at yahoo.com  Mon Dec  3 13:49:32 2012
From: zgenjix at yahoo.com (Amir Taaki)
Date: Mon, 3 Dec 2012 05:49:32 -0800 (PST)
Subject: [Bitcoin-development] BIP 32 HD wallets,
	accounts should be labels not numbers
Message-ID: <1354542572.51243.YahooMailNeo@web121001.mail.ne1.yahoo.com>

Can this be amended? I think it makes much more sense to allow people to input labels not numbers at this level.

General category names for different accounts is much more human than numbers, and you can still use incrementing numbers if you prefer.




From pieter.wuille at gmail.com  Mon Dec  3 13:54:12 2012
From: pieter.wuille at gmail.com (Pieter Wuille)
Date: Mon, 3 Dec 2012 14:54:12 +0100
Subject: [Bitcoin-development] BIP 32 HD wallets,
 accounts should be labels not numbers
In-Reply-To: <1354542572.51243.YahooMailNeo@web121001.mail.ne1.yahoo.com>
References: <1354542572.51243.YahooMailNeo@web121001.mail.ne1.yahoo.com>
Message-ID: <CAPg+sBgU=1Z1KaGXk0xY1mzEZKVRPd7T06X_zcTUd_d4JUsWtw@mail.gmail.com>

On Mon, Dec 3, 2012 at 2:49 PM, Amir Taaki <zgenjix at yahoo.com> wrote:

> Can this be amended? I think it makes much more sense to allow people to
> input labels not numbers at this level.
>
> General category names for different accounts is much more human than
> numbers, and you can still use incrementing numbers if you prefer.
>

There is no way to iterate over all strings. The intention is that a wallet
application can detect a new account that becomes in use (e.g. during
disaster recovery), so the accounts get assigned incrementing numbers.

I wouldn't mind adding the ability to do "non-standard derivations" using
arbitrary strings, if this recoverability property is not desired.

-- 
Pieter
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20121203/e07ff9d8/attachment.html>

From zgenjix at yahoo.com  Mon Dec  3 14:48:34 2012
From: zgenjix at yahoo.com (Amir Taaki)
Date: Mon, 3 Dec 2012 06:48:34 -0800 (PST)
Subject: [Bitcoin-development] BIP 32 HD wallets,
	accounts should be labels not numbers
In-Reply-To: <CAPg+sBgU=1Z1KaGXk0xY1mzEZKVRPd7T06X_zcTUd_d4JUsWtw@mail.gmail.com>
References: <1354542572.51243.YahooMailNeo@web121001.mail.ne1.yahoo.com>
	<CAPg+sBgU=1Z1KaGXk0xY1mzEZKVRPd7T06X_zcTUd_d4JUsWtw@mail.gmail.com>
Message-ID: <1354546114.71509.YahooMailNeo@web121006.mail.ne1.yahoo.com>

ok, also what is the reasoning behind serialising points using a compressed format before going into the hash function? I'm looking at the sec1-v2.pdf and the compression format is a little confusing.

I think the octet string for X is 32 bytes (using q = curve.order) and secp256k1 is a prime field so we follow step 2.2.1


________________________________
From: Pieter Wuille <pieter.wuille at gmail.com>
To: Amir Taaki <zgenjix at yahoo.com> 
Cc: "bitcoin-development at lists.sourceforge.net" <bitcoin-development at lists.sourceforge.net> 
Sent: Monday, December 3, 2012 2:54 PM
Subject: Re: [Bitcoin-development] BIP 32 HD wallets, accounts should be labels not numbers




On Mon, Dec 3, 2012 at 2:49 PM, Amir Taaki <zgenjix at yahoo.com> wrote:

Can this be amended? I think it makes much more sense to allow people to input labels not numbers at this level.
>
>General category names for different accounts is much more human than numbers, and you can still use incrementing numbers if you prefer.
>

There is no way to iterate over all strings. The intention is that a wallet application can detect a new account that becomes in use (e.g. during disaster recovery), so the accounts get assigned incrementing numbers.

I wouldn't mind adding the ability to do "non-standard derivations" using arbitrary strings, if this recoverability property is not desired.

--?
Pieter



From mike at plan99.net  Mon Dec  3 15:00:18 2012
From: mike at plan99.net (Mike Hearn)
Date: Mon, 3 Dec 2012 16:00:18 +0100
Subject: [Bitcoin-development] Chain dust mitigation: Demurrage based
 Chain Vacuuming
In-Reply-To: <80648682-E34A-455E-B34A-6BC24652C3EA@ceptacle.com>
References: <80648682-E34A-455E-B34A-6BC24652C3EA@ceptacle.com>
Message-ID: <CANEZrP1TCXh61oED=ytY2Es2coZZv0ZjBuQ5mTQjHL7t6r3E4Q@mail.gmail.com>

> The main source for these 1 Satoshi payouts is Sahtoshi Dice.

Because people are making 1 satoshi bets, or is this part of their
messaging system?

Pieter is right, getting consensus behind your proposal is too hard
and it's not likely to ever happen (I wouldn't support it, for one).

Outputs that never get spent are simply using disk space, the working
set is really defined by the coins that are moving. Disk space is
cheap. So this problem doesn't feel that urgent to me. Now if people
were routinely spending those 1 satoshi outputs, it'd be less great as
it'd increase the working set size.

I suspect some of these coins can be cleared over time by adjusting
wallets to consolidate outputs into the change outputs when a
transaction that has spare space before reaching the next size/fee
level takes place.



From gmaxwell at gmail.com  Mon Dec  3 15:02:07 2012
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Mon, 3 Dec 2012 10:02:07 -0500
Subject: [Bitcoin-development] Chain dust mitigation: Demurrage based
 Chain Vacuuming
In-Reply-To: <9CEDE4D4-3685-4F70-953E-15CC50A8AA3F@ceptacle.com>
References: <80648682-E34A-455E-B34A-6BC24652C3EA@ceptacle.com>
	<CAPg+sBi25xP8R03y1VR=q4ZJaeT6FAuV=hXsq_7niSHycpnPuA@mail.gmail.com>
	<9CEDE4D4-3685-4F70-953E-15CC50A8AA3F@ceptacle.com>
Message-ID: <CAAS2fgTL=s-vvGsubUu9ZBMidd0wzZdVPb6rEUg+eTMaiipRbA@mail.gmail.com>

On Mon, Dec 3, 2012 at 7:24 AM, Michael Gronager <gronager at ceptacle.com> wrote:
> Bitcoin aka the blockchain is defined by the majority of the miners. This is what people have signed up to imo. A scheme that a) is of benefit for us all and b) is also of economical benefit for the miners, will likely be accepted quite fast - especially now when the bounty was just halved... I also fear that there is a lot of BTCs that is effectively un-owned and it could even drive Satoshi to use some of his BTCs ;)

Pieter already commented on this, but it's so important it must be
said twice because everyone developing software for Bitcoin must
understand and internalize it:

Bitcoin is not a democracy, it's certainly not a democracy of miners.
Every full node independently and autonomously validates the rules of
the system without the influence of other participants.
Unfortunately, there is no universally consistent way to evaluate the
temporal ordering of transactions independently known? and none likely
to ever exist? and a digital currency requires ordering to resolve
double spends. Because of this Bitcoin must compromise the autonomy of
its validation slightly: It uses a computational majority to determine
transaction ordering. But only ordering!

This is essential because if all the rules were subject to the whim of
a computing majority the system would be far less trustworthy.  The
economic incentives which keep the mining participants honest depend
on the value of defection being as limited as possible.

So, no? you can't achieve by what you want with miners. Any miner
which applied your rules would instantly stop mining from the
perspective of Bitcoin users. As a miner myself, I welcome my
competition adopting your proposal :P.  You're looking for a hard fork
of the system.  Such a change must be supported by ~all users, and so
it must be something which has near universal consensus that it is
essential.  I think it's not essential? though I agree that better
UTXO set  size management would have been a useful component if it had
been in the origin economic promise of the system?  and I already know
that some participants take a principled position that views changes
to the mere spendability of outputs as _theft_.

Your proposal is also more economically hazardous than necessary: By
paying unmoved coins to miners you create a substantial incentive for
miners to delay processing transactions in the hopes that they expire
first.  There is also some risk that the return of large coins from
the past after the currency has substantially deflated would be
extremely economically disruptive.

As far as your concern? as opposed to the mechanism? I share it.  But
it's important to note that the source of most of the problem
transactions is a single source, and a rather unusual one that defies
the normal anti-spamming economic incentives by attracting mentally
ill people to subsidize pay for the bloating transactions, which are
already penalized.  I believe this specific issue can be adequately
addressed primarily through a three fold process:

(1) Make client software aggressive about sweeping up dust inputs:
"Any time a transaction is created that has change keep adding in
extra inputs? smallest to largest? until an additional one would
increase the cost of the transaction by 0.0001 BTC or more"  ? the
only major complication is doing this without concurrently harming
privacy which is why it's not done yet in the reference client.

(2) Change the default relay and mining rules to further penalize
transactions with very small outputs.  Making sure that its
practically possible to create inexpensive transactions right now is
very important for the long term success of the system while the small
size of the system makes it unattractive to use, but I don't believe
that applies for dust outputs.

(3) Change the default relay and mining rules to further incentive
reductions in the UTXO set size.  This would make the actions of (1)
save the participants funds instead of just being an altruistic
behavior that most do because its a default.

It might also be useful for client software to incorporate a "destroy
wallet" button for people with wallets that only have dust remaining
to send the private keys off to something of community benefit (e.g.
bitcoin foundation, the faucet, or the developers of that that client)
for recovery so that they don't perpetually bloat the UTXO set.

I expect that these actions would substantially address your concerns,
and even if they do not I believe that they would be the most basic
prerequisites for any kind of argument that something more drastic
(especially something that some would could consider theft!) is
essential.



From gmaxwell at gmail.com  Mon Dec  3 15:07:09 2012
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Mon, 3 Dec 2012 10:07:09 -0500
Subject: [Bitcoin-development] Chain dust mitigation: Demurrage based
 Chain Vacuuming
In-Reply-To: <CANEZrP1TCXh61oED=ytY2Es2coZZv0ZjBuQ5mTQjHL7t6r3E4Q@mail.gmail.com>
References: <80648682-E34A-455E-B34A-6BC24652C3EA@ceptacle.com>
	<CANEZrP1TCXh61oED=ytY2Es2coZZv0ZjBuQ5mTQjHL7t6r3E4Q@mail.gmail.com>
Message-ID: <CAAS2fgRQhEKnVqOFVohQtNswzrwopmPaz_2UaGjvMdOEQH5PRA@mail.gmail.com>

On Mon, Dec 3, 2012 at 10:00 AM, Mike Hearn <mike at plan99.net> wrote:
>> The main source for these 1 Satoshi payouts is Sahtoshi Dice.
>
> Because people are making 1 satoshi bets, or is this part of their
> messaging system?

It's part of their messaging system. Every losing play results in a
new 1e-8 output being created.



From mike at plan99.net  Mon Dec  3 15:09:46 2012
From: mike at plan99.net (Mike Hearn)
Date: Mon, 3 Dec 2012 16:09:46 +0100
Subject: [Bitcoin-development] Chain dust mitigation: Demurrage based
 Chain Vacuuming
In-Reply-To: <CAAS2fgRQhEKnVqOFVohQtNswzrwopmPaz_2UaGjvMdOEQH5PRA@mail.gmail.com>
References: <80648682-E34A-455E-B34A-6BC24652C3EA@ceptacle.com>
	<CANEZrP1TCXh61oED=ytY2Es2coZZv0ZjBuQ5mTQjHL7t6r3E4Q@mail.gmail.com>
	<CAAS2fgRQhEKnVqOFVohQtNswzrwopmPaz_2UaGjvMdOEQH5PRA@mail.gmail.com>
Message-ID: <CANEZrP31F7mUDrJs8sCPTyOiaeoOrvQ3qtzG5pkMQef_8H22tw@mail.gmail.com>

> It's part of their messaging system. Every losing play results in a
> new 1e-8 output being created.

Every losing play? That's ... not excellent.

Well, this why the payment protocol spec has a way for merchants to
reply to customers with text instead of outputs.



From etotheipi at gmail.com  Mon Dec  3 15:17:30 2012
From: etotheipi at gmail.com (Alan Reiner)
Date: Mon, 03 Dec 2012 10:17:30 -0500
Subject: [Bitcoin-development] Chain dust mitigation: Demurrage based
 Chain Vacuuming
In-Reply-To: <CAAS2fgTL=s-vvGsubUu9ZBMidd0wzZdVPb6rEUg+eTMaiipRbA@mail.gmail.com>
References: <80648682-E34A-455E-B34A-6BC24652C3EA@ceptacle.com>
	<CAPg+sBi25xP8R03y1VR=q4ZJaeT6FAuV=hXsq_7niSHycpnPuA@mail.gmail.com>
	<9CEDE4D4-3685-4F70-953E-15CC50A8AA3F@ceptacle.com>
	<CAAS2fgTL=s-vvGsubUu9ZBMidd0wzZdVPb6rEUg+eTMaiipRbA@mail.gmail.com>
Message-ID: <50BCC28A.4060503@gmail.com>

On 12/03/2012 10:02 AM, Gregory Maxwell wrote:
> (1) Make client software aggressive about sweeping up dust inputs:
> "Any time a transaction is created that has change keep adding in
> extra inputs? smallest to largest? until an additional one would
> increase the cost of the transaction by 0.0001 BTC or more" ? the only
> major complication is doing this without concurrently harming privacy
> which is why it's not done yet in the reference client.


FYI, Armory uses exactly this logic to try to clean up dust outputs in
the user's transactions.  However, there's enough conditions on it, that
I don't know how often it triggers.  Recommendations are welcome for how
to improve it.

Right now, if the transaction has less than 5 inputs, there exists dust
UTXOs from addresses already included in the transaction, and those
UTXOs are sufficiently small in priority, then the Armory will add them
to the input side and increase the change accordingly.  Looking it just
made me realize I lost the last condition of making sure the tx already
has a change output -- don't want to turn a free tx into a fee-needed tx
just to do this.  (reorganized the code
<https://github.com/etotheipi/BitcoinArmory/blob/master/armoryengine.py#L5279>
recently, and must have fell through the cracks).

Perhaps it could be improved by cleaning up dust from *any* address by
default (not just ones already included in the tx), with the option for
the user to disable that behavior.  After all, anonymity was never a
core feature of the network -- I think it makes sense that the logic
would reduce anonymity by default in exchange for a cleaner network,
with a clear option to "opt-out" of that logic if user cares.  I think
most users don't actually care...

-Alan
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20121203/d0a9abab/attachment.html>

From mike at plan99.net  Mon Dec  3 15:30:01 2012
From: mike at plan99.net (Mike Hearn)
Date: Mon, 3 Dec 2012 16:30:01 +0100
Subject: [Bitcoin-development] Chain dust mitigation: Demurrage based
 Chain Vacuuming
In-Reply-To: <50BCC28A.4060503@gmail.com>
References: <80648682-E34A-455E-B34A-6BC24652C3EA@ceptacle.com>
	<CAPg+sBi25xP8R03y1VR=q4ZJaeT6FAuV=hXsq_7niSHycpnPuA@mail.gmail.com>
	<9CEDE4D4-3685-4F70-953E-15CC50A8AA3F@ceptacle.com>
	<CAAS2fgTL=s-vvGsubUu9ZBMidd0wzZdVPb6rEUg+eTMaiipRbA@mail.gmail.com>
	<50BCC28A.4060503@gmail.com>
Message-ID: <CANEZrP1SfJ1oybLB7rUGERS7_MxQA4UtB1d0SOQ2mUi8-XwU=Q@mail.gmail.com>

> Perhaps it could be improved by cleaning up dust from any address by default
> (not just ones already included in the tx), with the option for the user to
> disable that behavior.  After all, anonymity was never a core feature of the
> network

It's cool that Armory already does this. I never had time to implement
good coin selection for bitcoinj :(

Just a couple of points: as this is primarily a side effect of
SatoshiDice, and a successful payment protocol will stop them doing
it, code put in place to do temporary cleanup now probably won't
seriously affect peoples privacy over the long term. Most people
aren't going to end up with lots of tiny outputs.

Second thing, it's best to carefully separate "anonymity" from
"privacy". Privacy is supposed to be a feature of the system (it says
so in Satoshis paper) because people demand it. If I loan a tenner to
my friend and he is able to find out what I earned last month, then
that trade was neither anonymous nor private. In this case I want
privacy but anonymity isn't useful. Mixing up anonymity with privacy
is not only a public relations problem, but can lead to confusion from
users when they, eg, try and buy Bitcoins from an exchange and are
asked to provide ID proofs.



From gmaxwell at gmail.com  Mon Dec  3 15:51:41 2012
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Mon, 3 Dec 2012 10:51:41 -0500
Subject: [Bitcoin-development] Chain dust mitigation: Demurrage based
 Chain Vacuuming
In-Reply-To: <50BCC28A.4060503@gmail.com>
References: <80648682-E34A-455E-B34A-6BC24652C3EA@ceptacle.com>
	<CAPg+sBi25xP8R03y1VR=q4ZJaeT6FAuV=hXsq_7niSHycpnPuA@mail.gmail.com>
	<9CEDE4D4-3685-4F70-953E-15CC50A8AA3F@ceptacle.com>
	<CAAS2fgTL=s-vvGsubUu9ZBMidd0wzZdVPb6rEUg+eTMaiipRbA@mail.gmail.com>
	<50BCC28A.4060503@gmail.com>
Message-ID: <CAAS2fgRTHwTUADF+909zztv6_mXsmsT+obZ0X=qjNZ2=yWsD5Q@mail.gmail.com>

On Mon, Dec 3, 2012 at 10:17 AM, Alan Reiner <etotheipi at gmail.com> wrote:
> Perhaps it could be improved by cleaning up dust from any address by default
> (not just ones already included in the tx), with the option for the user to
> disable that behavior.  After all, anonymity was never a core feature of the
> network -- I think it makes sense that the logic would reduce anonymity by
> default in exchange for a cleaner network, with a clear option to "opt-out"
> of that logic if user cares.  I think most users don't actually care...

Yea, the obvious case would look for exact matches?  but because sane
software pays change to fresh addresses I expect this to trigger an
unfortunately infrequent amount of time.

Why do you bother with the 5 input limit?  The way I'd handle this in
the reference client is as a pure post-processing step. E.g. take any
w/ change transaction formed and try adding small inputs in a greedy
fashion until the next would change the fees. Do you see a reason not
to do this?

A next step up in infrequency is to use input taint tracking
information to gather up coins from all inputs which are already
crosslinked.  In the reference client, which doesn't avoid
crosslinking, this would likely be quite effective but I worry about
having an O(N^2)-ish algorithm as part of coin selection. And so I
think it would require maintaining in the wallet the cross link
history for each address rather than building it on the fly. This
seems like a lot of changes for a relatively modest optimization.

Another possibility would be to not apply the privacy rule to very
small inputs or to addresses which have only ever received a very
small sum total. But I don't know how to define very small in a robust
way, and I think that the privacy behavior of the software being
"inconsistent" from the users perspective would be somewhat
unfortunate.  Perhaps a setting for the value considered very small
for this purpose which defaults to the relay MINFEE?   (And also
include larger outputs when they're address matches).

The the problem with this is this:  Say I have an address 1GMaxwellFOO
 that everyone knows belongs to me. Someone who wants to identify all
my transactions sends me a constant spray of 1e-8 inputs to
1GMaxwellFOO.  If the address association is ignored (even for only
very small inputs) then all my transactions become rapidly
identifiable.    Privacy, of at least a basic form, is an important
element of the system, if it's not preserved than bitcoin is inferior
to traditional value transfer systems in an additional way.

(And FWIW, I've seen self-appointed sluths on IRC trying to catch
trouble makers by paying tiny amounts to their extortion addresses;
with the incorrect expectation that it would taint their other
transactions. So even when it doesn't usually work people have tried
using this to attack people)



From stephen at bitpay.com  Mon Dec  3 16:18:27 2012
From: stephen at bitpay.com (Stephen Pair)
Date: Mon, 3 Dec 2012 11:18:27 -0500
Subject: [Bitcoin-development] Chain dust mitigation: Demurrage based
 Chain Vacuuming
In-Reply-To: <CANEZrP1SfJ1oybLB7rUGERS7_MxQA4UtB1d0SOQ2mUi8-XwU=Q@mail.gmail.com>
References: <80648682-E34A-455E-B34A-6BC24652C3EA@ceptacle.com>
	<CAPg+sBi25xP8R03y1VR=q4ZJaeT6FAuV=hXsq_7niSHycpnPuA@mail.gmail.com>
	<9CEDE4D4-3685-4F70-953E-15CC50A8AA3F@ceptacle.com>
	<CAAS2fgTL=s-vvGsubUu9ZBMidd0wzZdVPb6rEUg+eTMaiipRbA@mail.gmail.com>
	<50BCC28A.4060503@gmail.com>
	<CANEZrP1SfJ1oybLB7rUGERS7_MxQA4UtB1d0SOQ2mUi8-XwU=Q@mail.gmail.com>
Message-ID: <CADb9v0+WiNiZcnLN-BUOKK6wwSYaV-y0zrVvrPcXMJAd89o3PQ@mail.gmail.com>

On Mon, Dec 3, 2012 at 10:30 AM, Mike Hearn <mike at plan99.net> wrote:

> Second thing, it's best to carefully separate "anonymity" from
> "privacy". Privacy is supposed to be a feature of the system (it says
> so in Satoshis paper) because people demand it. If I loan a tenner to
> my friend and he is able to find out what I earned last month, then
> that trade was neither anonymous nor private. In this case I want
> privacy but anonymity isn't useful. Mixing up anonymity with privacy
> is not only a public relations problem, but can lead to confusion from
> users when they, eg, try and buy Bitcoins from an exchange and are
> asked to provide ID proofs.


I would like to second this point...privacy is essential because the market
demands it.  If Bitcoin doesn't do it well (and I would argue that it
doesn't today), then eventually a competitor to Bitcoin will do it better
and that would be the beginning of the end for Bitcoin.  Debates about
whether it was or wasn't a core feature are pointless.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20121203/848f1e36/attachment.html>

From etotheipi at gmail.com  Mon Dec  3 16:29:49 2012
From: etotheipi at gmail.com (Alan Reiner)
Date: Mon, 3 Dec 2012 11:29:49 -0500
Subject: [Bitcoin-development] Chain dust mitigation: Demurrage based
 Chain Vacuuming
In-Reply-To: <CADb9v0+WiNiZcnLN-BUOKK6wwSYaV-y0zrVvrPcXMJAd89o3PQ@mail.gmail.com>
References: <80648682-E34A-455E-B34A-6BC24652C3EA@ceptacle.com>
	<CAPg+sBi25xP8R03y1VR=q4ZJaeT6FAuV=hXsq_7niSHycpnPuA@mail.gmail.com>
	<9CEDE4D4-3685-4F70-953E-15CC50A8AA3F@ceptacle.com>
	<CAAS2fgTL=s-vvGsubUu9ZBMidd0wzZdVPb6rEUg+eTMaiipRbA@mail.gmail.com>
	<50BCC28A.4060503@gmail.com>
	<CANEZrP1SfJ1oybLB7rUGERS7_MxQA4UtB1d0SOQ2mUi8-XwU=Q@mail.gmail.com>
	<CADb9v0+WiNiZcnLN-BUOKK6wwSYaV-y0zrVvrPcXMJAd89o3PQ@mail.gmail.com>
Message-ID: <CALf2ePx95F68q4-5UPatRxMcKL7yAR1dtZY3UVcGuH1_hrWBnw@mail.gmail.com>

These are all valid points.  I hadn't really thought much about this point
until you all just brought it up.  The reason I so quickly spout off that
phrase, is that I endlessly get requests from Armory users to implement
more anonymity-based features.  When I say there are bigger priorities,
they suggest that "anonymity" is a core benefit of Bitcoin and I should be
supporting it.  I'm not against anonymity, and I most certainly favor
privacy, but my goal was to produce a versatile client, not one focused on
any one aspect -- there are plenty of people who use it for other reasons
than anonymity.

However, I do like Greg's comment about "attacks" against a
blind-dust-inclusion algorithm, and suggestion to maintain a clustering of
already-linked addresses.  That's not terribly difficult to do with the
transaction history in hand, and it could increase how often the logic
triggers.  I suppose these hardcore SD players probably have a lot of
one-satoshi outputs that could use vacuuming...




On Mon, Dec 3, 2012 at 11:18 AM, Stephen Pair <stephen at bitpay.com> wrote:

> On Mon, Dec 3, 2012 at 10:30 AM, Mike Hearn <mike at plan99.net> wrote:
>
>> Second thing, it's best to carefully separate "anonymity" from
>> "privacy". Privacy is supposed to be a feature of the system (it says
>> so in Satoshis paper) because people demand it. If I loan a tenner to
>> my friend and he is able to find out what I earned last month, then
>> that trade was neither anonymous nor private. In this case I want
>> privacy but anonymity isn't useful. Mixing up anonymity with privacy
>> is not only a public relations problem, but can lead to confusion from
>> users when they, eg, try and buy Bitcoins from an exchange and are
>> asked to provide ID proofs.
>
>
> I would like to second this point...privacy is essential because the
> market demands it.  If Bitcoin doesn't do it well (and I would argue that
> it doesn't today), then eventually a competitor to Bitcoin will do it
> better and that would be the beginning of the end for Bitcoin.  Debates
> about whether it was or wasn't a core feature are pointless.
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20121203/cc823863/attachment.html>

From mark at monetize.io  Mon Dec  3 17:02:13 2012
From: mark at monetize.io (Mark Friedenbach)
Date: Mon, 3 Dec 2012 09:02:13 -0800
Subject: [Bitcoin-development] Chain dust mitigation: Demurrage based
 Chain Vacuuming
In-Reply-To: <80648682-E34A-455E-B34A-6BC24652C3EA@ceptacle.com>
References: <80648682-E34A-455E-B34A-6BC24652C3EA@ceptacle.com>
Message-ID: <CACh7GpHxvWndf=8WfwGaNzLgpZLVEdaPoCvzc1F-Gat6zk-N=g@mail.gmail.com>

My only comment is that it should be called escheatment, not demurrage ;)

It's relation to demurrage is only that it might be desirable to garbage
collect decayed bit-dust. We looked at it early-on in the Freicoin
development, but rejected it as a possibility due to reasons others have
mentioned, even though we were starting from a hard-fork position.


On Mon, Dec 3, 2012 at 3:19 AM, Michael Gronager <gronager at ceptacle.com>wrote:

> (Also posted on the forum:
> https://bitcointalk.org/index.php?topic=128900.0)
>
> The amount of "dust" in the block chain is getting large and it is growing
> all the time. Currently 11% of unspent tx outputs (UTXO) are of 1Satoshi
> (0.00000001BTC), 32% is less than 0.0001BTC and 60% is less than 0.001BTC.
> (Thanks to Jan for digging out these numbers!)
>
> This means that a huge part of the block chain is used for essentially
> nothing - e.g. the sum of the 11% is worth roughly 2 US cents !
>
> The main source for these 1 Satoshi payouts is Sahtoshi Dice. And nothing
> wrong with that, however, we should work on ensuring that too many too
> small payments will not kill the size of the blockchain in the end -
> further, they are essentially too small to be included in other transaction
> as the added fee will often make it more expensive to remove them. Hence,
> there is no incentive to get rid of them.
>
> I have an idea for a possible mitigation of this problem - introduction of
> demurrage - not as in it normal meaning as a percentage over time (see:
> http://en.wikipedia.org/wiki/Demurrage_(currency) btw, this has also been
> tried in freicoin), but as a mean to recycle pennies over time. The
> proposal is simple - UTXOs age out if not re-transacted - the smaller the
> coin the faster the aging:
> 1-99 Satoshi: lives for 210 blocks
> 100-9999 Satoshi: lives for 2100 blocks
> 10000-999999 Satoshi: lives for 21000 blocks
> 1000000-99999999 Satoshi: lives for 210000 blocks
>
> Only amounts above 1BTC lives forever - (or we could even impose aging on
> those too..)
>
> The aged coins are simply included in the block mining reward, creating
> another incentive for miners. Further, if we include all coins in this
> recycle scheme coins will never be lost forever.
>
> This scheme will impose some lifetimes also on e.g. colored coins (hence
> you need to use a certain amount to borrow space on the blockchain for the
> time needed, or simply transact them).
>
> If you like this I would be happy to write it into a BIP.
>
> Thoughts ?
>
> ------------------------------------------------------------------------------
> Keep yourself connected to Go Parallel:
> BUILD Helping you discover the best ways to construct your parallel
> projects.
> http://goparallel.sourceforge.net
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20121203/5efe068d/attachment.html>

From mike at coinlab.com  Mon Dec  3 19:35:13 2012
From: mike at coinlab.com (Mike Koss)
Date: Mon, 3 Dec 2012 11:35:13 -0800
Subject: [Bitcoin-development] Payment Protocol Proposal:
	Invoices/Payments/Receipts
In-Reply-To: <CABsx9T35qD_xJEVw002eAhJ1kr6x5aMU7RpD+U84XEOZXmXcYw@mail.gmail.com>
References: <CABsx9T0PsGLEAWRCjEDDFWQrb+DnJWQZ7mFLaZewAEX6vD1eHw@mail.gmail.com>
	<20121128233619.GA6368@giles.gnomon.org.uk>
	<CABsx9T09FYf2RTaMpmujt3qwTFc2JgnREH_7Hyk2mnCgb3CvAw@mail.gmail.com>
	<20121129170713.GD6368@giles.gnomon.org.uk>
	<CANEZrP233CytLs3PWBQ1TyuBTMv4sLGJkEMeGWYq5xRi+iLKew@mail.gmail.com>
	<20121129185330.GE6368@giles.gnomon.org.uk>
	<CABsx9T35qD_xJEVw002eAhJ1kr6x5aMU7RpD+U84XEOZXmXcYw@mail.gmail.com>
Message-ID: <CAErK2ChjAm-Zf11YXuBQeTQvahOEJNGiPSZaD-CQ=OU9K6HtZA@mail.gmail.com>

The thing that bugged me most about the original spec was the sole reliance
on X.509 - glad to see you've made that optional.  I think many people will
balk at deferring our identity trust to the existing CA's.  I think it's a
fine bootstrap method, but I'd really like to see another option that
allows for out-of-band trust (based on ECDSA, probably).

It would also be really nice to migrate to textual representations of data
structures as opposed to binary ones.  The most successful internet
standards are based on text, making them that much more accessible for
developers to deal with them.   JSON would be my preferred candidate.

Why don't we sign the text representation of a (utf8) JSON, rather than
some complex encoding standard of JSON?  That way the signatures are simple
- and you need only retain the original textual representation of a message
to validate the signature (as well as the decoded version, if you don't
want to alway re-parse the message when writing programs that use it).

On Sat, Dec 1, 2012 at 11:25 AM, Gavin Andresen <gavinandresen at gmail.com>wrote:

> Spec updated: https://gist.github.com/4120476
>
> Changes are:
>
> Version numbers:  a couple of people asked privately about adding
> version numbers to the messages. In general, Protocol Buffers don't
> need version numbers if later versions add only optional fields.
>
> And best-practice is to know what version of something you're
> expecting BEFORE you start parsing that something.
>
> So, if a bitcoin client is getting Invoice messages via email or from
> a web server, the version will be specified as part of the MIME type;
> for example:
>    Content-Type: application/x-bitcoin-invoice; version=1
> The version= syntax is part of the MIME standard.
>
> Following that best-practice of knowing what you're parsing before you
> parse it, I added an invoice_version field to the SignedInvoice
> message. It is now:
>
> message SignedInvoice {
>     required bytes pki_data = 1;
>     required string pki_type = 2 [default = "x509"];
>     required bytes serialized_invoice = 3;
>     required uint32 invoice_version = 4 [default = 1];
>     required bytes signature = 5;
> }
>
>
> Handling of receiptURI errors:
>
> Following discussion here, I changed the spec to say:
>
> "Clients may handle errors communicating with the receiptURI server
> however they like, but should assume that if they cannot communicate
> at all with the server then the Payment should either be retried later
> or immediately rejected."
>
> and under Receipt added:
>
> "The Bitcoin client must be prepared to handle the case of an evil
> merchant that returns accepted=false but broadcasts the transactions
> anyway."
>
>
> I also added a TODO "Test Vectors" section with base64-encoded
> examples of everything.
>
> --
> --
> Gavin Andresen
>
>
> ------------------------------------------------------------------------------
> Keep yourself connected to Go Parallel:
> INSIGHTS What's next for parallel hardware, programming and related areas?
> Interviews and blogs by thought leaders keep you ahead of the curve.
> http://goparallel.sourceforge.net
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>



-- 
Mike Koss
CTO, CoinLab
(425) 246-7701 (m)

A Bitcoin Primer <http://coinlab.com/a-bitcoin-primer.pdf> - What you need
to know about Bitcoins.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20121203/62146299/attachment.html>

From andreas at petersson.at  Mon Dec  3 19:50:39 2012
From: andreas at petersson.at (Andreas Petersson)
Date: Mon, 03 Dec 2012 20:50:39 +0100
Subject: [Bitcoin-development] Chain dust mitigation: Demurrage based
 Chain Vacuuming
In-Reply-To: <CALf2ePx95F68q4-5UPatRxMcKL7yAR1dtZY3UVcGuH1_hrWBnw@mail.gmail.com>
References: <80648682-E34A-455E-B34A-6BC24652C3EA@ceptacle.com>
	<CAPg+sBi25xP8R03y1VR=q4ZJaeT6FAuV=hXsq_7niSHycpnPuA@mail.gmail.com>
	<9CEDE4D4-3685-4F70-953E-15CC50A8AA3F@ceptacle.com>
	<CAAS2fgTL=s-vvGsubUu9ZBMidd0wzZdVPb6rEUg+eTMaiipRbA@mail.gmail.com>
	<50BCC28A.4060503@gmail.com>
	<CANEZrP1SfJ1oybLB7rUGERS7_MxQA4UtB1d0SOQ2mUi8-XwU=Q@mail.gmail.com>
	<CADb9v0+WiNiZcnLN-BUOKK6wwSYaV-y0zrVvrPcXMJAd89o3PQ@mail.gmail.com>
	<CALf2ePx95F68q4-5UPatRxMcKL7yAR1dtZY3UVcGuH1_hrWBnw@mail.gmail.com>
Message-ID: <50BD028F.3090206@petersson.at>

These discussed features are all useful but quite contradicting.

I imagine that a user will be able to switch between different coin 
selection policies "minimize fees","max privacy","defragmentation","i 
don't care" and even switch between them for individual sends.



From gmaxwell at gmail.com  Mon Dec  3 20:14:57 2012
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Mon, 3 Dec 2012 15:14:57 -0500
Subject: [Bitcoin-development] Chain dust mitigation: Demurrage based
 Chain Vacuuming
In-Reply-To: <50BD028F.3090206@petersson.at>
References: <80648682-E34A-455E-B34A-6BC24652C3EA@ceptacle.com>
	<CAPg+sBi25xP8R03y1VR=q4ZJaeT6FAuV=hXsq_7niSHycpnPuA@mail.gmail.com>
	<9CEDE4D4-3685-4F70-953E-15CC50A8AA3F@ceptacle.com>
	<CAAS2fgTL=s-vvGsubUu9ZBMidd0wzZdVPb6rEUg+eTMaiipRbA@mail.gmail.com>
	<50BCC28A.4060503@gmail.com>
	<CANEZrP1SfJ1oybLB7rUGERS7_MxQA4UtB1d0SOQ2mUi8-XwU=Q@mail.gmail.com>
	<CADb9v0+WiNiZcnLN-BUOKK6wwSYaV-y0zrVvrPcXMJAd89o3PQ@mail.gmail.com>
	<CALf2ePx95F68q4-5UPatRxMcKL7yAR1dtZY3UVcGuH1_hrWBnw@mail.gmail.com>
	<50BD028F.3090206@petersson.at>
Message-ID: <CAAS2fgSUUZY1MaHdezOpXs=zvWQGMWBnyO8uvC5Q5ntMDA9uGA@mail.gmail.com>

On Mon, Dec 3, 2012 at 2:50 PM, Andreas Petersson <andreas at petersson.at> wrote:
> These discussed features are all useful but quite contradicting.
>
> I imagine that a user will be able to switch between different coin
> selection policies "minimize fees","max privacy","defragmentation","i
> don't care" and even switch between them for individual sends.

While thats a fine thing? and a feature that I'd personally use? its
not one that I expect to have a real measurable impact on the overall
network behavior.

For this kind of minutia especially, defaults are all powerful and
must be the best they can be. :)



From pieter.wuille at gmail.com  Mon Dec  3 20:44:40 2012
From: pieter.wuille at gmail.com (Pieter Wuille)
Date: Mon, 3 Dec 2012 21:44:40 +0100
Subject: [Bitcoin-development] BIP 32 HD wallets,
 accounts should be labels not numbers
In-Reply-To: <1354546114.71509.YahooMailNeo@web121006.mail.ne1.yahoo.com>
References: <1354542572.51243.YahooMailNeo@web121001.mail.ne1.yahoo.com>
	<CAPg+sBgU=1Z1KaGXk0xY1mzEZKVRPd7T06X_zcTUd_d4JUsWtw@mail.gmail.com>
	<1354546114.71509.YahooMailNeo@web121006.mail.ne1.yahoo.com>
Message-ID: <20121203204438.GA30654@vps7135.xlshosting.net>

On Mon, Dec 03, 2012 at 06:48:34AM -0800, Amir Taaki wrote:
> ok, also what is the reasoning behind serialising points using a compressed
> format before going into the hash function? I'm looking at the sec1-v2.pdf
> and the compression format is a little confusing.

I don't think there is a compelling reason to encourage uncompressed public
keys anymore on the network. They take more space in the block chain for no
additional value whatsoever. Software may of course continue supporting
uncompressed keys if they wish to provide compatibility, but for a new
standard, I think it makes sense to standardize on just compressed keys.
And since that software thus needs to support the compressed encoding,
there is no reason to use a different encoding inside the derivation scheme
itself.

Regarding the encoding itself, it is not hard: just 0x02 or 0x03 (depending
on whether Y is even or odd) followed by the 32-byte encoding of X. Decoding
is harder, but is never needed in the derivation. Software internally can use
any representation (and it will), which in almost all circumstances stores
both X and Y (and even more). Decoding compressed public keys is somewhat
harder, as Y must be reconstructed (but the algorithm isn't hard) - this is
only necessary when someone wants to import an extended public key though for
watch-only wallets.

-- 
Pieter



From gavinandresen at gmail.com  Mon Dec  3 20:59:16 2012
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Mon, 3 Dec 2012 15:59:16 -0500
Subject: [Bitcoin-development] Payment Protocol Proposal:
	Invoices/Payments/Receipts
In-Reply-To: <CAErK2ChjAm-Zf11YXuBQeTQvahOEJNGiPSZaD-CQ=OU9K6HtZA@mail.gmail.com>
References: <CABsx9T0PsGLEAWRCjEDDFWQrb+DnJWQZ7mFLaZewAEX6vD1eHw@mail.gmail.com>
	<20121128233619.GA6368@giles.gnomon.org.uk>
	<CABsx9T09FYf2RTaMpmujt3qwTFc2JgnREH_7Hyk2mnCgb3CvAw@mail.gmail.com>
	<20121129170713.GD6368@giles.gnomon.org.uk>
	<CANEZrP233CytLs3PWBQ1TyuBTMv4sLGJkEMeGWYq5xRi+iLKew@mail.gmail.com>
	<20121129185330.GE6368@giles.gnomon.org.uk>
	<CABsx9T35qD_xJEVw002eAhJ1kr6x5aMU7RpD+U84XEOZXmXcYw@mail.gmail.com>
	<CAErK2ChjAm-Zf11YXuBQeTQvahOEJNGiPSZaD-CQ=OU9K6HtZA@mail.gmail.com>
Message-ID: <CABsx9T0HgWr50=XOLGdz52=SLy35zn3eKL83BN_f0DAmBwEb_Q@mail.gmail.com>

On Mon, Dec 3, 2012 at 2:35 PM, Mike Koss <mike at coinlab.com> wrote:
> Why don't we sign the text representation of a (utf8) JSON, rather than some
> complex encoding standard of JSON?

Because the results from standard JSON parsers are undefined if I give
you an "envelope" JSON that has repeated keys.

For example:

{
  "pki_data" : "...hex-or-base64-encoded certificate chain...",
  "signature" : "....hex-or-base64-encoded-signature-bytes",
  "message" : "....string-encoded-utf8-JSON",
  "message" : "....another string-encoded-utf8-JSON",
  "signature" : "....more hex-or-base64-encoded-signature-bytes",
  "pki_data" : "...another certificate chain...",
}

The JSON spec doesn't say what you'll get when you decode that mess.
Maybe the first instance of each field, maybe the last, maybe one
picked at random...

The JOSE (Javascript Signing and Encryption) spec says "Thou Shalt Use
A JSON Parser That Treats Multi-defined-keys As An Error."

I expect that most developers will be lazy and will just use whatever
JSON parser is convenient, no matter how much the spec/documentation
warns them not to. And that makes me nervous, because I can imagine
attackers taking advantage of mismatches between (say) the JSON
parsing software used by some back-end server process and a front-end
JavaScript web wallet UI.

-- 
--
Gavin Andresen



From mike at plan99.net  Mon Dec  3 21:28:13 2012
From: mike at plan99.net (Mike Hearn)
Date: Mon, 3 Dec 2012 22:28:13 +0100
Subject: [Bitcoin-development] Payment Protocol Proposal:
	Invoices/Payments/Receipts
In-Reply-To: <CAErK2ChjAm-Zf11YXuBQeTQvahOEJNGiPSZaD-CQ=OU9K6HtZA@mail.gmail.com>
References: <CABsx9T0PsGLEAWRCjEDDFWQrb+DnJWQZ7mFLaZewAEX6vD1eHw@mail.gmail.com>
	<20121128233619.GA6368@giles.gnomon.org.uk>
	<CABsx9T09FYf2RTaMpmujt3qwTFc2JgnREH_7Hyk2mnCgb3CvAw@mail.gmail.com>
	<20121129170713.GD6368@giles.gnomon.org.uk>
	<CANEZrP233CytLs3PWBQ1TyuBTMv4sLGJkEMeGWYq5xRi+iLKew@mail.gmail.com>
	<20121129185330.GE6368@giles.gnomon.org.uk>
	<CABsx9T35qD_xJEVw002eAhJ1kr6x5aMU7RpD+U84XEOZXmXcYw@mail.gmail.com>
	<CAErK2ChjAm-Zf11YXuBQeTQvahOEJNGiPSZaD-CQ=OU9K6HtZA@mail.gmail.com>
Message-ID: <CANEZrP3sU9-J0O9UcP7z0tDRDOwajiH+OWMnPaNL3WKnYa9F9w@mail.gmail.com>

> It would also be really nice to migrate to textual representations of data
> structures as opposed to binary ones.  The most successful internet
> standards are based on text.

There are lots of successful binary protocols: TCP, IP, PNG, JPEG,
MP3, DNS, SSH, SSL, the Bitcoin protocol itself. What's more some
other protocols that are text based have suffered serious problems due
to that choice. Witness the absurd design of SMTP that means you can't
start a paragraph with the word From because that's a new-message
marker! Or the fact that file attachments grow by 33% when you send
them. Or the various exploits that can exist in web servers thanks to
header splitting attacks.

Trying to represent something binary as text doesn't make any sense.
If you look at these data structures they consist of keys, signatures,
hashes, certificates and other fundamentally binary things. You'd just
end up base64 encoding everything anyway, at which point all you've
done is design an inefficient binary protocol that masquerades as
text. The disadvantages of both with the advantages of neither.

Protocol buffers have a text form that you can print to and parse
from, if you so wish, though I only normally see people use that
support for debug prints and sometimes because they want to load
hand-written config files directly into protobuf generated objects.



From gmaxwell at gmail.com  Mon Dec  3 21:42:09 2012
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Mon, 3 Dec 2012 16:42:09 -0500
Subject: [Bitcoin-development] Payment Protocol Proposal:
	Invoices/Payments/Receipts
In-Reply-To: <CANEZrP233CytLs3PWBQ1TyuBTMv4sLGJkEMeGWYq5xRi+iLKew@mail.gmail.com>
References: <CABsx9T0PsGLEAWRCjEDDFWQrb+DnJWQZ7mFLaZewAEX6vD1eHw@mail.gmail.com>
	<20121128233619.GA6368@giles.gnomon.org.uk>
	<CABsx9T09FYf2RTaMpmujt3qwTFc2JgnREH_7Hyk2mnCgb3CvAw@mail.gmail.com>
	<20121129170713.GD6368@giles.gnomon.org.uk>
	<CANEZrP233CytLs3PWBQ1TyuBTMv4sLGJkEMeGWYq5xRi+iLKew@mail.gmail.com>
Message-ID: <CAAS2fgRbUXjALORHqWo1zTOfripmRQmjPiY1wJsFB8769wrW=A@mail.gmail.com>

On Thu, Nov 29, 2012 at 12:31 PM, Mike Hearn <mike at plan99.net> wrote:
> 4) A longer term reason - in time, people may choose to not broadcast
> transactions at all in some cases. I think how network speed will be
> funded post-inflation is still an open question. Assuming the simplest
> arrangement where users pay fees, getting transactions into the chain
> has a cost. In cases where you trust the sender to not double spend on
> you, you may keep a fee-less transaction around "in your pocket". Then
> when it's your turn to pay, you use some unconfirmed transactions to
> do so.

This brings up an additional point.  If we're mutually trusting
parties (or secured by some kind of external mechanism), and you've
given me a payment which I haven't broadcast for confirmation? and
later we make another transactions I should be able to offer you the
original unconfirmed txn and ask if you'd instead be willing to write
a replacement that combines both payments.



From roy at gnomon.org.uk  Mon Dec  3 22:26:29 2012
From: roy at gnomon.org.uk (Roy Badami)
Date: Mon, 3 Dec 2012 17:26:29 -0500
Subject: [Bitcoin-development] Payment Protocol Proposal:
 Invoices/Payments/Receipts
In-Reply-To: <CANEZrP3sU9-J0O9UcP7z0tDRDOwajiH+OWMnPaNL3WKnYa9F9w@mail.gmail.com>
References: <CABsx9T0PsGLEAWRCjEDDFWQrb+DnJWQZ7mFLaZewAEX6vD1eHw@mail.gmail.com>
	<20121128233619.GA6368@giles.gnomon.org.uk>
	<CABsx9T09FYf2RTaMpmujt3qwTFc2JgnREH_7Hyk2mnCgb3CvAw@mail.gmail.com>
	<20121129170713.GD6368@giles.gnomon.org.uk>
	<CANEZrP233CytLs3PWBQ1TyuBTMv4sLGJkEMeGWYq5xRi+iLKew@mail.gmail.com>
	<20121129185330.GE6368@giles.gnomon.org.uk>
	<CABsx9T35qD_xJEVw002eAhJ1kr6x5aMU7RpD+U84XEOZXmXcYw@mail.gmail.com>
	<CAErK2ChjAm-Zf11YXuBQeTQvahOEJNGiPSZaD-CQ=OU9K6HtZA@mail.gmail.com>
	<CANEZrP3sU9-J0O9UcP7z0tDRDOwajiH+OWMnPaNL3WKnYa9F9w@mail.gmail.com>
Message-ID: <20121203222629.GK6368@giles.gnomon.org.uk>

On Mon, Dec 03, 2012 at 10:28:13PM +0100, Mike Hearn wrote:
> Witness the absurd design of SMTP that means you can't
> start a paragraph with the word From because that's a new-message
> marker!

Actually that has absolutely nothing to do with SMTP.  It's down to
the file format of the standard BSD UNIX mailbox (which uses lines
beginning with 'From ' to delimit messages).

roy



From roy at gnomon.org.uk  Mon Dec  3 22:48:26 2012
From: roy at gnomon.org.uk (Roy Badami)
Date: Mon, 3 Dec 2012 17:48:26 -0500
Subject: [Bitcoin-development] Payment Protocol Proposal:
 Invoices/Payments/Receipts
In-Reply-To: <CA+8xBpdc2jcNVJk6+CChfGObDb0Mj9dhZjzQ4G1goCVx1Yy-8A@mail.gmail.com>
References: <20121128233619.GA6368@giles.gnomon.org.uk>
	<CABsx9T09FYf2RTaMpmujt3qwTFc2JgnREH_7Hyk2mnCgb3CvAw@mail.gmail.com>
	<20121129170713.GD6368@giles.gnomon.org.uk>
	<CANEZrP233CytLs3PWBQ1TyuBTMv4sLGJkEMeGWYq5xRi+iLKew@mail.gmail.com>
	<20121129185330.GE6368@giles.gnomon.org.uk>
	<CABsx9T35qD_xJEVw002eAhJ1kr6x5aMU7RpD+U84XEOZXmXcYw@mail.gmail.com>
	<CAErK2ChjAm-Zf11YXuBQeTQvahOEJNGiPSZaD-CQ=OU9K6HtZA@mail.gmail.com>
	<CANEZrP3sU9-J0O9UcP7z0tDRDOwajiH+OWMnPaNL3WKnYa9F9w@mail.gmail.com>
	<20121203222629.GK6368@giles.gnomon.org.uk>
	<CA+8xBpdc2jcNVJk6+CChfGObDb0Mj9dhZjzQ4G1goCVx1Yy-8A@mail.gmail.com>
Message-ID: <20121203224825.GL6368@giles.gnomon.org.uk>

On Mon, Dec 03, 2012 at 05:34:12PM -0500, Jeff Garzik wrote:
> You shouldn't need to escape and unescape data that is not being
> interpreted in any way.

Funilly enough pretty much all low-level links that make up the
Internet use either bit-stuffing or byte-stuffing to escape a
particular bit sequence or byte that terminates an HDLC frame.

I'm not particularly agreeing or disagreeing with you on the
suitability for the case at hand, but as an absolute your statement
doesn't hold water.  The use of a terminator for a variable-length
data structure rather than a length prefix is a design desicion that
has little-to-nothing to do with the debate of text-versus-binary.

Anyone remember Holerith constants?

roy



From jgarzik at exmulti.com  Mon Dec  3 22:34:12 2012
From: jgarzik at exmulti.com (Jeff Garzik)
Date: Mon, 3 Dec 2012 17:34:12 -0500
Subject: [Bitcoin-development] Payment Protocol Proposal:
	Invoices/Payments/Receipts
In-Reply-To: <20121203222629.GK6368@giles.gnomon.org.uk>
References: <CABsx9T0PsGLEAWRCjEDDFWQrb+DnJWQZ7mFLaZewAEX6vD1eHw@mail.gmail.com>
	<20121128233619.GA6368@giles.gnomon.org.uk>
	<CABsx9T09FYf2RTaMpmujt3qwTFc2JgnREH_7Hyk2mnCgb3CvAw@mail.gmail.com>
	<20121129170713.GD6368@giles.gnomon.org.uk>
	<CANEZrP233CytLs3PWBQ1TyuBTMv4sLGJkEMeGWYq5xRi+iLKew@mail.gmail.com>
	<20121129185330.GE6368@giles.gnomon.org.uk>
	<CABsx9T35qD_xJEVw002eAhJ1kr6x5aMU7RpD+U84XEOZXmXcYw@mail.gmail.com>
	<CAErK2ChjAm-Zf11YXuBQeTQvahOEJNGiPSZaD-CQ=OU9K6HtZA@mail.gmail.com>
	<CANEZrP3sU9-J0O9UcP7z0tDRDOwajiH+OWMnPaNL3WKnYa9F9w@mail.gmail.com>
	<20121203222629.GK6368@giles.gnomon.org.uk>
Message-ID: <CA+8xBpdc2jcNVJk6+CChfGObDb0Mj9dhZjzQ4G1goCVx1Yy-8A@mail.gmail.com>

On Mon, Dec 3, 2012 at 5:26 PM, Roy Badami <roy at gnomon.org.uk> wrote:
> On Mon, Dec 03, 2012 at 10:28:13PM +0100, Mike Hearn wrote:
>> Witness the absurd design of SMTP that means you can't
>> start a paragraph with the word From because that's a new-message
>> marker!
>
> Actually that has absolutely nothing to do with SMTP.  It's down to
> the file format of the standard BSD UNIX mailbox (which uses lines
> beginning with 'From ' to delimit messages).

His point (pun intended) stands.  SMTP uses "." terminator, which also
causes annoying confusion.

You shouldn't need to escape and unescape data that is not being
interpreted in any way.

-- 
Jeff Garzik
exMULTI, Inc.
jgarzik at exmulti.com



From andyparkins at gmail.com  Tue Dec  4 09:54:38 2012
From: andyparkins at gmail.com (Andy Parkins)
Date: Tue, 4 Dec 2012 09:54:38 +0000
Subject: [Bitcoin-development] Chain dust mitigation: Demurrage based
	Chain Vacuuming
In-Reply-To: <80648682-E34A-455E-B34A-6BC24652C3EA@ceptacle.com>
References: <80648682-E34A-455E-B34A-6BC24652C3EA@ceptacle.com>
Message-ID: <201212040954.38926.andyparkins@gmail.com>

On Monday 03 December 2012 11:19:37 Michael Gronager wrote:

> The aged coins are simply included in the block mining reward, creating
> another incentive for miners. Further, if we include all coins in this
> recycle scheme coins will never be lost forever.

Ignoring the cost of storing these never-spent outputs; there is absolutely no 
reason we need to ensure that coins aren't lost.  Nor worry about those that 
are.

The total bitcoins produced is an entirely arbitrary number -- a function of 
the 210,000 halving rate and the initial block reward.  Satoshi could have 
picked anything for them and bitcoin would work exactly the same.

Lost coins never enter the economy ever again, and so supply is slightly lower 
than it would have been, making all the non-lost coins worth ever so slightly 
more.  Effectively: price adjustments will take care of lost coins.


Andy

-- 
Dr Andy Parkins
andyparkins at gmail.com



From mike at plan99.net  Tue Dec  4 17:06:05 2012
From: mike at plan99.net (Mike Hearn)
Date: Tue, 4 Dec 2012 18:06:05 +0100
Subject: [Bitcoin-development] Payment Protocol Proposal:
	Invoices/Payments/Receipts
In-Reply-To: <CABsx9T35qD_xJEVw002eAhJ1kr6x5aMU7RpD+U84XEOZXmXcYw@mail.gmail.com>
References: <CABsx9T0PsGLEAWRCjEDDFWQrb+DnJWQZ7mFLaZewAEX6vD1eHw@mail.gmail.com>
	<20121128233619.GA6368@giles.gnomon.org.uk>
	<CABsx9T09FYf2RTaMpmujt3qwTFc2JgnREH_7Hyk2mnCgb3CvAw@mail.gmail.com>
	<20121129170713.GD6368@giles.gnomon.org.uk>
	<CANEZrP233CytLs3PWBQ1TyuBTMv4sLGJkEMeGWYq5xRi+iLKew@mail.gmail.com>
	<20121129185330.GE6368@giles.gnomon.org.uk>
	<CABsx9T35qD_xJEVw002eAhJ1kr6x5aMU7RpD+U84XEOZXmXcYw@mail.gmail.com>
Message-ID: <CANEZrP2riPBViBqAOWfY9uSQwoEm=gN108JU988XvouMbai1Ug@mail.gmail.com>

> So, if a bitcoin client is getting Invoice messages via email or from
> a web server, the version will be specified as part of the MIME type;
> for example:
>    Content-Type: application/x-bitcoin-invoice; version=1
> The version= syntax is part of the MIME standard.

I think that's OK. However, you should only be getting the version you
expect because when you request an invoice, your client should be
telling the merchant what protocol version you implement.

Does it make sense to have this spec not include the details of
bootstrapping? It's not complicated - we extend the URI spec in a
backwards compatible way:

   bitcoin:1AbCdEfG?value=10.0&label=Pay%20for%20Foo&invoice=https://merchant.com/inv/aB425az

When a compatible client sees the invoice param, it ignores the rest
of the URI and downloads the URL
https://merchant.com/inv/aB425az?ver=1.0

A server on merchant.com sees that the client expects a version 1.0
invoice and vends it. If ver=2.0 or whatever, it knows it can use 2.0
features. If extensions are supported, add new query params.

We should define a simple mechanism for extending the protocol now, so
people who want to make proprietary extensions don't conflict. The
simplest is to just say, if you want to add new fields to an Invoice
message, please update a wiki page with the tag numbers you're going
to use, and start from number X. Protobufs have a simple way to
formalize this in the language:

   https://developers.google.com/protocol-buffers/docs/proto#extensions

message Invoice {
  extensions 1000 to max;
}

The point of this is to allow you to define new parts of the messages
in separate .proto files. It's only a minor convenience but it means
if you want to use, say, two extensions that weren't yet folded into
the main spec, you can more easily do so without having to do a manual
merge of the message definitions together.

For instance, if you wanted to extend the protocol to support
specification of recurring billing, you could make a file called
recurring-invoices.proto containing:

message Recurrences {
  required uint32 every_seconds = 1;
  optional uint32 start_time = 2;
}

extend Invoice {
  optional Recurrences recurrences = 1005;
}

then you update the wiki page to claim tag number 1005 and apps can
easily use your new features. If/when the feature gets standardized
via a BIP, the core .proto definition can be extended to include these
messages and the extensions can go away.



From mike at plan99.net  Tue Dec  4 17:46:29 2012
From: mike at plan99.net (Mike Hearn)
Date: Tue, 4 Dec 2012 18:46:29 +0100
Subject: [Bitcoin-development] Roadmap to getting users onto SPV clients
Message-ID: <CANEZrP3=GdyTe+2=cp-ROOJ8_t=yCqO-7GQ4hA-3aksg46p+ww@mail.gmail.com>

At the moment if you visit bitcoin.org then you're recommended to
download the full client. I think we all agree that at some point we
need to start presenting users with something more like this:


To get started, download wallet apps A or B.

If you'd like to contribute your computing resources to the Bitcoin
network and have a fast computer with an unfiltered internet
connection, download:

   - for desktop machines, Bitcoin-Qt
   - for servers, bitcoind



Obviously not that exact wording.

I personally feel it's a bit early for this, but it's true that users
are being turned away by the fact that they're pointed to Bitcoin-Qt
by default, so having some kind of roadmap or plan for changing that
would be good.

I think MultiBit is maturing into a client that I'd feel comfortable
recommending to end users who take the fast-start path, though it
still has a few serious lacks (encrypted wallets aren't released yet,
bloom filters will help performance a lot, needs to catch up with some
newer features). But there doesn't have to be a one true client.

The alternative, I guess, is to make Bitcoin-Qt have an SPV mode. I'm
not convinced this is the best use of time, but if somebody steps up
to do it, that could also work. MultiBit has some unique features that
are quite useful like integrating charting and exchange rate feeds.

What does everyone think on this?



From etotheipi at gmail.com  Tue Dec  4 18:03:11 2012
From: etotheipi at gmail.com (Alan Reiner)
Date: Tue, 4 Dec 2012 13:03:11 -0500
Subject: [Bitcoin-development] Roadmap to getting users onto SPV clients
In-Reply-To: <CANEZrP3=GdyTe+2=cp-ROOJ8_t=yCqO-7GQ4hA-3aksg46p+ww@mail.gmail.com>
References: <CANEZrP3=GdyTe+2=cp-ROOJ8_t=yCqO-7GQ4hA-3aksg46p+ww@mail.gmail.com>
Message-ID: <CALf2ePzFZLmQ2+0hmOO0m_=EFy5mOtJ22jy2CYMxmU5U5e3s1w@mail.gmail.com>

My personal opinion is that the ideal first client has three features:

(1) Starts up and is usable within a couple minutes (even 10 min the first
time would be okay, to sync block headers)
(2) Supports Windows, Linux and OSX
(3) Uses deterministic wallets that can produce a permanent backup
(preferably paper)

Encryption is a major upside, too, but people new enough to Bitcoin that
they need such a simple client, can survive without encryption (thye're not
going to be holding a ton of coins) -- as long as they are made aware that
they do not currently have encryption, and the associated risks (and other
options).

I think it's extremely important that users have a clear way to backup
their coins to offline media or paper, in such a way that they don't ever
need to worry about it again.  Not only does it give users protection
against hard-drive loss, it means that they may find it again in the far
future when they haven't used Bitcoin in 2 years, and it reminds them that
they still have coins (and they don't have to type in 1000 private keys to
get their coins)

For that reason, I think Multibit is an excellent choice.  I haven't spent
much time with it, but I do understand it to  satisfy (1) and (2) clearly,
and (3) may be happening in the near future (along with encryption).  But I
do wonder if it has enough staffing behind it to be the center of attention
(no offense to jim618, but if this becomes the "de-facto" client for new
users, we should make sure there's a lot of people available to support it
-- what if a major security bug is found?  how long would it take the
current team to identify, fix and test that bug?)

-Alan


On Tue, Dec 4, 2012 at 12:46 PM, Mike Hearn <mike at plan99.net> wrote:

> At the moment if you visit bitcoin.org then you're recommended to
> download the full client. I think we all agree that at some point we
> need to start presenting users with something more like this:
>
>
> To get started, download wallet apps A or B.
>
> If you'd like to contribute your computing resources to the Bitcoin
> network and have a fast computer with an unfiltered internet
> connection, download:
>
>    - for desktop machines, Bitcoin-Qt
>    - for servers, bitcoind
>
>
>
> Obviously not that exact wording.
>
> I personally feel it's a bit early for this, but it's true that users
> are being turned away by the fact that they're pointed to Bitcoin-Qt
> by default, so having some kind of roadmap or plan for changing that
> would be good.
>
> I think MultiBit is maturing into a client that I'd feel comfortable
> recommending to end users who take the fast-start path, though it
> still has a few serious lacks (encrypted wallets aren't released yet,
> bloom filters will help performance a lot, needs to catch up with some
> newer features). But there doesn't have to be a one true client.
>
> The alternative, I guess, is to make Bitcoin-Qt have an SPV mode. I'm
> not convinced this is the best use of time, but if somebody steps up
> to do it, that could also work. MultiBit has some unique features that
> are quite useful like integrating charting and exchange rate feeds.
>
> What does everyone think on this?
>
>
> ------------------------------------------------------------------------------
> LogMeIn Rescue: Anywhere, Anytime Remote support for IT. Free Trial
> Remotely access PCs and mobile devices and provide instant support
> Improve your efficiency, and focus on delivering more value-add services
> Discover what IT Professionals Know. Rescue delivers
> http://p.sf.net/sfu/logmein_12329d2d
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20121204/f76a7294/attachment.html>

From gmaxwell at gmail.com  Tue Dec  4 18:17:42 2012
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Tue, 4 Dec 2012 13:17:42 -0500
Subject: [Bitcoin-development] Roadmap to getting users onto SPV clients
In-Reply-To: <CANEZrP3=GdyTe+2=cp-ROOJ8_t=yCqO-7GQ4hA-3aksg46p+ww@mail.gmail.com>
References: <CANEZrP3=GdyTe+2=cp-ROOJ8_t=yCqO-7GQ4hA-3aksg46p+ww@mail.gmail.com>
Message-ID: <CAAS2fgQYV7aR86QOwvqMLpFZ+MAwSOSZvV6XuZdXvqjeYziRng@mail.gmail.com>

On Tue, Dec 4, 2012 at 12:46 PM, Mike Hearn <mike at plan99.net> wrote:
> The alternative, I guess, is to make Bitcoin-Qt have an SPV mode. I'm
> not convinced this is the best use of time, but if somebody steps up
> to do it, that could also work.

I strongly believe that if community leads with client software which
is not a full _capable_ node (e.g. which can begin life as a SPV node
but at least eventually become full if the system resources permit)
then Bitcoin will fail, or at least fail to be anything but the
world's most inefficient centralized payment system.  Obviously SPV
nodes are excellent tools for getting bitcoin into less capable
systems, but they aren't a general replacement for the software the
participants in Bitcoin run.

? Because the properties promised by the system can not be upheld if
there is only a fairly small number of self selecting nodes enforcing
the rules. If we wanted a system where its security against theft,
denial of service, and non-inflation were governed by the consensus of
{mtgox,blockchain.info, deepbit, bitpay, slush, btcguild, bitminter}
we could have something infinitely more scalable by just using
something OT like with a simple O(N) consensus between these parties.
No disrespect intended to any of these services? but a system whos
rules were only enforced at the good graces of a small number of
interested parties is not what the users of bitcoin signed up for.

People obviously care about supporting the goals and security of a the
system they use but actions speak louder than words.  If a
non-validating node is promoted then we're telling people that it's
not important that many people run them.  If running a full node
requires using different software (with a different interface) or a
much more painful initialization than another promoted option then it
will be correctly perceived as costly. If people perceive it to be
both costly and not important then rational participants will not run
it. The result will be fragile to non-existent security, where
dishonest or exploitative parties benefit from running all the full
nodes until they start ripping people off and shift the equilibrium
just a little towards running costly nodes.

It sounds to me that you're insisting that you're asking people who
oppose degrading our recommendations to commit to a costly rushed
development timeline. I think this is a false choice.

There is no set timeline for the adoption of Bitcoin? man has survived
eons without Bitcoin just fine? and there are many practical reasons
why slow adoption is beneficial, including reducing the harm users
experience from growing pains.  By allowing things to mature at their
own pace we can preserve the principles that make the system valuable.

If the new user experience is sufficiently bad (and I agree it's bad,
esp with the current release versions of Bitcoin-Qt) then that should
justify more support of work that improves it without compromising the
system. If it's not bad enough to apply those resources, then it's not
bad enough to justify compromising it: as this sort of change is hard
to reverse.



From mark at monetize.io  Tue Dec  4 18:57:40 2012
From: mark at monetize.io (Mark Friedenbach)
Date: Tue, 4 Dec 2012 10:57:40 -0800
Subject: [Bitcoin-development] Roadmap to getting users onto SPV clients
In-Reply-To: <CANEZrP3=GdyTe+2=cp-ROOJ8_t=yCqO-7GQ4hA-3aksg46p+ww@mail.gmail.com>
References: <CANEZrP3=GdyTe+2=cp-ROOJ8_t=yCqO-7GQ4hA-3aksg46p+ww@mail.gmail.com>
Message-ID: <CACh7GpHUE2CYAMfRdAVPv1WAk102z94KYCWPV87fzzQEaP_hfw@mail.gmail.com>

Alan's UTxO meta-chain proposal becomes vastly easier to do now that
ultraprune is merged. That would allow the Satoshi client to know it's
wallet balance and operate with a >=SPV level of security during the
initial block download, and keep them on the path of becoming a full node.
If users can see their balances, send and receive transactions, and
otherwise go about their business (except for mining) during the initial
block download, would that not address your concerns?

IMHO the only time bitcoin.org should recommend a SPV-only client is when
it is dynamically when it is being accessed from a mobile device, but
that's a separate issue.

Mark


On Tue, Dec 4, 2012 at 9:46 AM, Mike Hearn <mike at plan99.net> wrote:

> At the moment if you visit bitcoin.org then you're recommended to
> download the full client. I think we all agree that at some point we
> need to start presenting users with something more like this:
>
>
> To get started, download wallet apps A or B.
>
> If you'd like to contribute your computing resources to the Bitcoin
> network and have a fast computer with an unfiltered internet
> connection, download:
>
>    - for desktop machines, Bitcoin-Qt
>    - for servers, bitcoind
>
>
>
> Obviously not that exact wording.
>
> I personally feel it's a bit early for this, but it's true that users
> are being turned away by the fact that they're pointed to Bitcoin-Qt
> by default, so having some kind of roadmap or plan for changing that
> would be good.
>
> I think MultiBit is maturing into a client that I'd feel comfortable
> recommending to end users who take the fast-start path, though it
> still has a few serious lacks (encrypted wallets aren't released yet,
> bloom filters will help performance a lot, needs to catch up with some
> newer features). But there doesn't have to be a one true client.
>
> The alternative, I guess, is to make Bitcoin-Qt have an SPV mode. I'm
> not convinced this is the best use of time, but if somebody steps up
> to do it, that could also work. MultiBit has some unique features that
> are quite useful like integrating charting and exchange rate feeds.
>
> What does everyone think on this?
>
>
> ------------------------------------------------------------------------------
> LogMeIn Rescue: Anywhere, Anytime Remote support for IT. Free Trial
> Remotely access PCs and mobile devices and provide instant support
> Improve your efficiency, and focus on delivering more value-add services
> Discover what IT Professionals Know. Rescue delivers
> http://p.sf.net/sfu/logmein_12329d2d
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20121204/f061420b/attachment.html>

From will at phase.net  Tue Dec  4 18:08:01 2012
From: will at phase.net (Will)
Date: Tue, 4 Dec 2012 18:08:01 +0000
Subject: [Bitcoin-development] Roadmap to getting users onto SPV clients
In-Reply-To: <CANEZrP3=GdyTe+2=cp-ROOJ8_t=yCqO-7GQ4hA-3aksg46p+ww@mail.gmail.com>
References: <CANEZrP3=GdyTe+2=cp-ROOJ8_t=yCqO-7GQ4hA-3aksg46p+ww@mail.gmail.com>
Message-ID: <CAHQs=o72Q3_DXmg80KtJzJgRMVcG+S3HJnseR_yxmWOFVEqnLg@mail.gmail.com>

...or should we be directing people to a (vetted) list of cloud services -
I think this has a significantly lower entry cost than any client. I know
the mybitcoin debacle has clouded (pun intended) people's views of these
providers, but blockchain.info (for example) really does seem quite well
engineered, and satisfies many of the features in particular a very low
cost of entry, cross platform support and what appears to be very good
security (e.g. two factor)

Will

On 4 December 2012 17:46, Mike Hearn <mike at plan99.net> wrote:

> At the moment if you visit bitcoin.org then you're recommended to
> download the full client. I think we all agree that at some point we
> need to start presenting users with something more like this:
>
>
> To get started, download wallet apps A or B.
>
> If you'd like to contribute your computing resources to the Bitcoin
> network and have a fast computer with an unfiltered internet
> connection, download:
>
>    - for desktop machines, Bitcoin-Qt
>    - for servers, bitcoind
>
>
>
> Obviously not that exact wording.
>
> I personally feel it's a bit early for this, but it's true that users
> are being turned away by the fact that they're pointed to Bitcoin-Qt
> by default, so having some kind of roadmap or plan for changing that
> would be good.
>
> I think MultiBit is maturing into a client that I'd feel comfortable
> recommending to end users who take the fast-start path, though it
> still has a few serious lacks (encrypted wallets aren't released yet,
> bloom filters will help performance a lot, needs to catch up with some
> newer features). But there doesn't have to be a one true client.
>
> The alternative, I guess, is to make Bitcoin-Qt have an SPV mode. I'm
> not convinced this is the best use of time, but if somebody steps up
> to do it, that could also work. MultiBit has some unique features that
> are quite useful like integrating charting and exchange rate feeds.
>
> What does everyone think on this?
>
>
> ------------------------------------------------------------------------------
> LogMeIn Rescue: Anywhere, Anytime Remote support for IT. Free Trial
> Remotely access PCs and mobile devices and provide instant support
> Improve your efficiency, and focus on delivering more value-add services
> Discover what IT Professionals Know. Rescue delivers
> http://p.sf.net/sfu/logmein_12329d2d
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20121204/cca423f4/attachment.html>

From gmaxwell at gmail.com  Tue Dec  4 19:36:39 2012
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Tue, 4 Dec 2012 14:36:39 -0500
Subject: [Bitcoin-development] Roadmap to getting users onto SPV clients
In-Reply-To: <CACh7GpHUE2CYAMfRdAVPv1WAk102z94KYCWPV87fzzQEaP_hfw@mail.gmail.com>
References: <CANEZrP3=GdyTe+2=cp-ROOJ8_t=yCqO-7GQ4hA-3aksg46p+ww@mail.gmail.com>
	<CACh7GpHUE2CYAMfRdAVPv1WAk102z94KYCWPV87fzzQEaP_hfw@mail.gmail.com>
Message-ID: <CAAS2fgSGa3HJcZVi1QS8qpsypvtxhLLZmAseVyx9UkbRPh36CA@mail.gmail.com>

On Tue, Dec 4, 2012 at 1:57 PM, Mark Friedenbach <mark at monetize.io> wrote:
> Alan's
  :(

> UTxO meta-chain proposal becomes vastly easier to do now that
> ultraprune is merged.

No, not really. Somewhat easier due to some structural changes, but it
still needs to invent and get consensus on a normative data structure
and people need to write implementations of the required operations on
it (implementations probably required to prove performance for
consensus).  We still have to sort through the tradeoff of making a
_single_ data structure the normative merkle tree representation for
the UTxO set to the preclusion of other implementations? including
ones which are  asymptotically faster, such as a straight hash table.

There are also issues that need to be sorted out like key structure?
the most useful index for validation is txid:vout keyed, but Alan
wanted 'address' prefixed, which is not friendly for validation but
enables robust query by address? a query that the referce normal
bitcoin software doesn't even optionally support right now.  Any
disagreements on this point must be hammed out because the structure
would be normative.

> That would allow the Satoshi client to know it's
> wallet balance and operate with a >=SPV level of security during the initial
> block download, and keep them on the path of becoming a full node. If users
> can see their balances, send and receive transactions, and otherwise go
> about their business (except for mining) during the initial block download,
> would that not address your concerns?

The above said, that is all good stuff too. And I do thing starting
fast with reduced security (be it to SPV+ or SPV) is a good idea.



From jim618 at fastmail.co.uk  Tue Dec  4 19:56:38 2012
From: jim618 at fastmail.co.uk (Jim)
Date: Tue, 04 Dec 2012 19:56:38 +0000
Subject: [Bitcoin-development] Roadmap to getting users onto SPV clients
In-Reply-To: <mailman.70419.1354648162.2176.bitcoin-development@lists.sourceforge.net>
References: <mailman.70419.1354648162.2176.bitcoin-development@lists.sourceforge.net>
Message-ID: <1354650998.21742.140661161849669.1371855A@webmail.messagingengine.com>

I think Alan's list of 'what should an ideal first client look like' is
right here.

>From the first time user's perspective if they can get up and running
relatively quickly but still have the safety of a deterministic wallet
then they should have a good first user experience. MultiBit is not
there yet, but BIP32 support is on the roadmap.

If we have a 'shopping list' of what we want in a first client then that
gives me (and others) a list of what to focus on implementing.

Also, as BIP32 support is added to clients and codebases then the actual
variant of software to use to access your wallet will become relatively
less important. Combined with a standardised seed -> passphrase
algorithm the user can just type in their long passphrase into any BIP32
compliant software and click/ buzz/ whirr : there is their wallet. We
should have a little logo for HD wallet compliance ! :-)

As Bitcoin's users become more varied there will be a spectrum of how
'involved' they want to be computationally so we should have offerings
to reflect this.



On Tue, Dec 4, 2012, at 07:09 PM,
bitcoin-development-request at lists.sourceforge.net wrote:
> Send Bitcoin-development mailing list submissions to
> 	bitcoin-development at lists.sourceforge.net
> 
> To subscribe or unsubscribe via the World Wide Web, visit
> 	https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> or, via email, send a message with subject or body 'help' to
> 	bitcoin-development-request at lists.sourceforge.net
> 
> You can reach the person managing the list at
> 	bitcoin-development-owner at lists.sourceforge.net
> 
> When replying, please edit your Subject line so it is more specific
> than "Re: Contents of Bitcoin-development digest..."
> 
> 
> Today's Topics:
> 
>    1. Re: Roadmap to getting users onto SPV clients (Alan Reiner)
>    2. Re: Roadmap to getting users onto SPV clients (Gregory Maxwell)
>    3. Re: Roadmap to getting users onto SPV clients (Mark Friedenbach)
>    4. Re: Roadmap to getting users onto SPV clients (Will)
> 
> 
> ----------------------------------------------------------------------
> 
> Message: 1
> Date: Tue, 4 Dec 2012 13:03:11 -0500
> From: Alan Reiner <etotheipi at gmail.com>
> Subject: Re: [Bitcoin-development] Roadmap to getting users onto SPV
> 	clients
> To: Mike Hearn <mike at plan99.net>
> Cc: Bitcoin Dev <bitcoin-development at lists.sourceforge.net>
> Message-ID:
> 	<CALf2ePzFZLmQ2+0hmOO0m_=EFy5mOtJ22jy2CYMxmU5U5e3s1w at mail.gmail.com>
> Content-Type: text/plain; charset="iso-8859-1"
> 
> My personal opinion is that the ideal first client has three features:
> 
> (1) Starts up and is usable within a couple minutes (even 10 min the
> first
> time would be okay, to sync block headers)
> (2) Supports Windows, Linux and OSX
> (3) Uses deterministic wallets that can produce a permanent backup
> (preferably paper)
> 
> Encryption is a major upside, too, but people new enough to Bitcoin that
> they need such a simple client, can survive without encryption (thye're
> not
> going to be holding a ton of coins) -- as long as they are made aware
> that
> they do not currently have encryption, and the associated risks (and
> other
> options).
> 
> I think it's extremely important that users have a clear way to backup
> their coins to offline media or paper, in such a way that they don't ever
> need to worry about it again.  Not only does it give users protection
> against hard-drive loss, it means that they may find it again in the far
> future when they haven't used Bitcoin in 2 years, and it reminds them
> that
> they still have coins (and they don't have to type in 1000 private keys
> to
> get their coins)
> 
> For that reason, I think Multibit is an excellent choice.  I haven't
> spent
> much time with it, but I do understand it to  satisfy (1) and (2)
> clearly,
> and (3) may be happening in the near future (along with encryption).  But
> I
> do wonder if it has enough staffing behind it to be the center of
> attention
> (no offense to jim618, but if this becomes the "de-facto" client for new
> users, we should make sure there's a lot of people available to support
> it
> -- what if a major security bug is found?  how long would it take the
> current team to identify, fix and test that bug?)
> 
> -Alan
> 
> 
> On Tue, Dec 4, 2012 at 12:46 PM, Mike Hearn <mike at plan99.net> wrote:
> 
> > At the moment if you visit bitcoin.org then you're recommended to
> > download the full client. I think we all agree that at some point we
> > need to start presenting users with something more like this:
> >
> >
> > To get started, download wallet apps A or B.
> >
> > If you'd like to contribute your computing resources to the Bitcoin
> > network and have a fast computer with an unfiltered internet
> > connection, download:
> >
> >    - for desktop machines, Bitcoin-Qt
> >    - for servers, bitcoind
> >
> >
> >
> > Obviously not that exact wording.
> >
> > I personally feel it's a bit early for this, but it's true that users
> > are being turned away by the fact that they're pointed to Bitcoin-Qt
> > by default, so having some kind of roadmap or plan for changing that
> > would be good.
> >
> > I think MultiBit is maturing into a client that I'd feel comfortable
> > recommending to end users who take the fast-start path, though it
> > still has a few serious lacks (encrypted wallets aren't released yet,
> > bloom filters will help performance a lot, needs to catch up with some
> > newer features). But there doesn't have to be a one true client.
> >
> > The alternative, I guess, is to make Bitcoin-Qt have an SPV mode. I'm
> > not convinced this is the best use of time, but if somebody steps up
> > to do it, that could also work. MultiBit has some unique features that
> > are quite useful like integrating charting and exchange rate feeds.
> >
> > What does everyone think on this?
> >
> >
> > ------------------------------------------------------------------------------
> > LogMeIn Rescue: Anywhere, Anytime Remote support for IT. Free Trial
> > Remotely access PCs and mobile devices and provide instant support
> > Improve your efficiency, and focus on delivering more value-add services
> > Discover what IT Professionals Know. Rescue delivers
> > http://p.sf.net/sfu/logmein_12329d2d
> > _______________________________________________
> > Bitcoin-development mailing list
> > Bitcoin-development at lists.sourceforge.net
> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> >
> -------------- next part --------------
> An HTML attachment was scrubbed...
> 
> ------------------------------
> 
> Message: 2
> Date: Tue, 4 Dec 2012 13:17:42 -0500
> From: Gregory Maxwell <gmaxwell at gmail.com>
> Subject: Re: [Bitcoin-development] Roadmap to getting users onto SPV
> 	clients
> To: Mike Hearn <mike at plan99.net>
> Cc: Bitcoin Dev <bitcoin-development at lists.sourceforge.net>
> Message-ID:
> 	<CAAS2fgQYV7aR86QOwvqMLpFZ+MAwSOSZvV6XuZdXvqjeYziRng at mail.gmail.com>
> Content-Type: text/plain; charset=UTF-8
> 
> On Tue, Dec 4, 2012 at 12:46 PM, Mike Hearn <mike at plan99.net> wrote:
> > The alternative, I guess, is to make Bitcoin-Qt have an SPV mode. I'm
> > not convinced this is the best use of time, but if somebody steps up
> > to do it, that could also work.
> 
> I strongly believe that if community leads with client software which
> is not a full _capable_ node (e.g. which can begin life as a SPV node
> but at least eventually become full if the system resources permit)
> then Bitcoin will fail, or at least fail to be anything but the
> world's most inefficient centralized payment system.  Obviously SPV
> nodes are excellent tools for getting bitcoin into less capable
> systems, but they aren't a general replacement for the software the
> participants in Bitcoin run.
> 
> ? Because the properties promised by the system can not be upheld if
> there is only a fairly small number of self selecting nodes enforcing
> the rules. If we wanted a system where its security against theft,
> denial of service, and non-inflation were governed by the consensus of
> {mtgox,blockchain.info, deepbit, bitpay, slush, btcguild, bitminter}
> we could have something infinitely more scalable by just using
> something OT like with a simple O(N) consensus between these parties.
> No disrespect intended to any of these services? but a system whos
> rules were only enforced at the good graces of a small number of
> interested parties is not what the users of bitcoin signed up for.
> 
> People obviously care about supporting the goals and security of a the
> system they use but actions speak louder than words.  If a
> non-validating node is promoted then we're telling people that it's
> not important that many people run them.  If running a full node
> requires using different software (with a different interface) or a
> much more painful initialization than another promoted option then it
> will be correctly perceived as costly. If people perceive it to be
> both costly and not important then rational participants will not run
> it. The result will be fragile to non-existent security, where
> dishonest or exploitative parties benefit from running all the full
> nodes until they start ripping people off and shift the equilibrium
> just a little towards running costly nodes.
> 
> It sounds to me that you're insisting that you're asking people who
> oppose degrading our recommendations to commit to a costly rushed
> development timeline. I think this is a false choice.
> 
> There is no set timeline for the adoption of Bitcoin? man has survived
> eons without Bitcoin just fine? and there are many practical reasons
> why slow adoption is beneficial, including reducing the harm users
> experience from growing pains.  By allowing things to mature at their
> own pace we can preserve the principles that make the system valuable.
> 
> If the new user experience is sufficiently bad (and I agree it's bad,
> esp with the current release versions of Bitcoin-Qt) then that should
> justify more support of work that improves it without compromising the
> system. If it's not bad enough to apply those resources, then it's not
> bad enough to justify compromising it: as this sort of change is hard
> to reverse.
> 
> 
> 
> ------------------------------
> 
> Message: 3
> Date: Tue, 4 Dec 2012 10:57:40 -0800
> From: Mark Friedenbach <mark at monetize.io>
> Subject: Re: [Bitcoin-development] Roadmap to getting users onto SPV
> 	clients
> To: Mike Hearn <mike at plan99.net>
> Cc: Bitcoin Dev <bitcoin-development at lists.sourceforge.net>
> Message-ID:
> 	<CACh7GpHUE2CYAMfRdAVPv1WAk102z94KYCWPV87fzzQEaP_hfw at mail.gmail.com>
> Content-Type: text/plain; charset="utf-8"
> 
> Alan's UTxO meta-chain proposal becomes vastly easier to do now that
> ultraprune is merged. That would allow the Satoshi client to know it's
> wallet balance and operate with a >=SPV level of security during the
> initial block download, and keep them on the path of becoming a full
> node.
> If users can see their balances, send and receive transactions, and
> otherwise go about their business (except for mining) during the initial
> block download, would that not address your concerns?
> 
> IMHO the only time bitcoin.org should recommend a SPV-only client is when
> it is dynamically when it is being accessed from a mobile device, but
> that's a separate issue.
> 
> Mark
> 
> 
> On Tue, Dec 4, 2012 at 9:46 AM, Mike Hearn <mike at plan99.net> wrote:
> 
> > At the moment if you visit bitcoin.org then you're recommended to
> > download the full client. I think we all agree that at some point we
> > need to start presenting users with something more like this:
> >
> >
> > To get started, download wallet apps A or B.
> >
> > If you'd like to contribute your computing resources to the Bitcoin
> > network and have a fast computer with an unfiltered internet
> > connection, download:
> >
> >    - for desktop machines, Bitcoin-Qt
> >    - for servers, bitcoind
> >
> >
> >
> > Obviously not that exact wording.
> >
> > I personally feel it's a bit early for this, but it's true that users
> > are being turned away by the fact that they're pointed to Bitcoin-Qt
> > by default, so having some kind of roadmap or plan for changing that
> > would be good.
> >
> > I think MultiBit is maturing into a client that I'd feel comfortable
> > recommending to end users who take the fast-start path, though it
> > still has a few serious lacks (encrypted wallets aren't released yet,
> > bloom filters will help performance a lot, needs to catch up with some
> > newer features). But there doesn't have to be a one true client.
> >
> > The alternative, I guess, is to make Bitcoin-Qt have an SPV mode. I'm
> > not convinced this is the best use of time, but if somebody steps up
> > to do it, that could also work. MultiBit has some unique features that
> > are quite useful like integrating charting and exchange rate feeds.
> >
> > What does everyone think on this?
> >
> >
> > ------------------------------------------------------------------------------
> > LogMeIn Rescue: Anywhere, Anytime Remote support for IT. Free Trial
> > Remotely access PCs and mobile devices and provide instant support
> > Improve your efficiency, and focus on delivering more value-add services
> > Discover what IT Professionals Know. Rescue delivers
> > http://p.sf.net/sfu/logmein_12329d2d
> > _______________________________________________
> > Bitcoin-development mailing list
> > Bitcoin-development at lists.sourceforge.net
> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> >
> -------------- next part --------------
> An HTML attachment was scrubbed...
> 
> ------------------------------
> 
> Message: 4
> Date: Tue, 4 Dec 2012 18:08:01 +0000
> From: Will <will at phase.net>
> Subject: Re: [Bitcoin-development] Roadmap to getting users onto SPV
> 	clients
> To: Bitcoin Dev <bitcoin-development at lists.sourceforge.net>
> Message-ID:
> 	<CAHQs=o72Q3_DXmg80KtJzJgRMVcG+S3HJnseR_yxmWOFVEqnLg at mail.gmail.com>
> Content-Type: text/plain; charset="iso-8859-1"
> 
> ...or should we be directing people to a (vetted) list of cloud services
> -
> I think this has a significantly lower entry cost than any client. I know
> the mybitcoin debacle has clouded (pun intended) people's views of these
> providers, but blockchain.info (for example) really does seem quite well
> engineered, and satisfies many of the features in particular a very low
> cost of entry, cross platform support and what appears to be very good
> security (e.g. two factor)
> 
> Will
> 
> On 4 December 2012 17:46, Mike Hearn <mike at plan99.net> wrote:
> 
> > At the moment if you visit bitcoin.org then you're recommended to
> > download the full client. I think we all agree that at some point we
> > need to start presenting users with something more like this:
> >
> >
> > To get started, download wallet apps A or B.
> >
> > If you'd like to contribute your computing resources to the Bitcoin
> > network and have a fast computer with an unfiltered internet
> > connection, download:
> >
> >    - for desktop machines, Bitcoin-Qt
> >    - for servers, bitcoind
> >
> >
> >
> > Obviously not that exact wording.
> >
> > I personally feel it's a bit early for this, but it's true that users
> > are being turned away by the fact that they're pointed to Bitcoin-Qt
> > by default, so having some kind of roadmap or plan for changing that
> > would be good.
> >
> > I think MultiBit is maturing into a client that I'd feel comfortable
> > recommending to end users who take the fast-start path, though it
> > still has a few serious lacks (encrypted wallets aren't released yet,
> > bloom filters will help performance a lot, needs to catch up with some
> > newer features). But there doesn't have to be a one true client.
> >
> > The alternative, I guess, is to make Bitcoin-Qt have an SPV mode. I'm
> > not convinced this is the best use of time, but if somebody steps up
> > to do it, that could also work. MultiBit has some unique features that
> > are quite useful like integrating charting and exchange rate feeds.
> >
> > What does everyone think on this?
> >
> >
> > ------------------------------------------------------------------------------
> > LogMeIn Rescue: Anywhere, Anytime Remote support for IT. Free Trial
> > Remotely access PCs and mobile devices and provide instant support
> > Improve your efficiency, and focus on delivering more value-add services
> > Discover what IT Professionals Know. Rescue delivers
> > http://p.sf.net/sfu/logmein_12329d2d
> > _______________________________________________
> > Bitcoin-development mailing list
> > Bitcoin-development at lists.sourceforge.net
> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> >
> -------------- next part --------------
> An HTML attachment was scrubbed...
> 
> ------------------------------
> 
> ------------------------------------------------------------------------------
> LogMeIn Rescue: Anywhere, Anytime Remote support for IT. Free Trial
> Remotely access PCs and mobile devices and provide instant support
> Improve your efficiency, and focus on delivering more value-add services
> Discover what IT Professionals Know. Rescue delivers
> http://p.sf.net/sfu/logmein_12329d2d
> 
> ------------------------------
> 
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 
> 
> End of Bitcoin-development Digest, Vol 19, Issue 7
> **************************************************


-- 
http://multibit.org    Money, reinvented



From mike at plan99.net  Tue Dec  4 20:58:54 2012
From: mike at plan99.net (Mike Hearn)
Date: Tue, 4 Dec 2012 21:58:54 +0100
Subject: [Bitcoin-development] Roadmap to getting users onto SPV clients
In-Reply-To: <CAAS2fgQYV7aR86QOwvqMLpFZ+MAwSOSZvV6XuZdXvqjeYziRng@mail.gmail.com>
References: <CANEZrP3=GdyTe+2=cp-ROOJ8_t=yCqO-7GQ4hA-3aksg46p+ww@mail.gmail.com>
	<CAAS2fgQYV7aR86QOwvqMLpFZ+MAwSOSZvV6XuZdXvqjeYziRng@mail.gmail.com>
Message-ID: <CANEZrP3ZhNYrgQZT4qOohejs3yhgt0c_kT5zwAUVtPP1Q9f1Zg@mail.gmail.com>

> It sounds to me that you're insisting that you're asking people who
> oppose degrading our recommendations to commit to a costly rushed
> development timeline. I think this is a false choice.

Hardly. I don't have any particular timeline in mind. But I disagree
we have "forever". New ideas have a certain time window to take off
and become credible. If they never overcome their problems in that
time window, eventually people just give up and move on. Does anyone
take desktop Linux seriously anymore? No. "The year of desktop Linux"
is a joke. People took it seriously in 2001 but despite great progress
since, the excitement and attention has gone. There were steady
improvements over the last 10 years but nobody is creating desktop
Linux startups anymore - Bitcoin shouldn't go the same way.

It's unclear we need to have every man and his dog run a full node.
Tor is a successful P2P network where the number of users vastly
outstrips the number of nodes, and exit nodes in particular are a
scarce resource run by people who know what they're doing and commit
to it.

The Tor guys could have said "every node should be an exit if
possible", but that would have been a short term optimization at the
cost of long term stability, and anyway doesn't seem to have been
necessary so far. Even with no incentives, they were able to obtain
the resources they need.

So why should Bitcoin be different? If there are a million users
supported by 50,000 full nodes, that wouldn't sound unhealthy to me.
We can easily send a clear and consistent "this is important, please
help" message without complicated auto-upgrade/downgrade schemes that
risk annoying users.



From gmaxwell at gmail.com  Tue Dec  4 21:41:58 2012
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Tue, 4 Dec 2012 16:41:58 -0500
Subject: [Bitcoin-development] Roadmap to getting users onto SPV clients
In-Reply-To: <CANEZrP3ZhNYrgQZT4qOohejs3yhgt0c_kT5zwAUVtPP1Q9f1Zg@mail.gmail.com>
References: <CANEZrP3=GdyTe+2=cp-ROOJ8_t=yCqO-7GQ4hA-3aksg46p+ww@mail.gmail.com>
	<CAAS2fgQYV7aR86QOwvqMLpFZ+MAwSOSZvV6XuZdXvqjeYziRng@mail.gmail.com>
	<CANEZrP3ZhNYrgQZT4qOohejs3yhgt0c_kT5zwAUVtPP1Q9f1Zg@mail.gmail.com>
Message-ID: <CAAS2fgSJhX4974BdWGdyJA13kHg7mTgHadC6UdhdUPu0bDDXFg@mail.gmail.com>

On Tue, Dec 4, 2012 at 3:58 PM, Mike Hearn <mike at plan99.net> wrote:
>> It sounds to me that you're insisting that you're asking people who
>> oppose degrading our recommendations to commit to a costly rushed
>> development timeline. I think this is a false choice.
>
> Hardly. I don't have any particular timeline in mind. But I disagree
> we have "forever". New ideas have a certain time window to take off
> and become credible.

Marketing initiatives have limited windows.  This matters, perhaps,
when you're some VC pumping cash into a startup with the hopes of
being the next stockmarket pump and dump darling.  Outside of that
people use whatever they use because it works for them.

And by the numbers Linux desktops are more common than they've ever
been? and certainly Linux kernel _systems_ half the people I know have
one in their pocket and its hard to go more than a few hours without
touching one.  To some extent the "Year of the Linux desktop" is a bit
like the "Year of being able to turn lead into gold" ... we can turn
lead into gold now, but the particle accelerators, atomic power, and
atomic weapons enabled by the same technology are far more interesting
due to the particle realities of this. So we didn't get the ubiquitous
Linux desktop: We got the ubiquitious Linux server, the ubiquitous
Linux-kernel smart phone, the ubiquitous Linux television, media
player, HVAC controller, etc. instead.

Desktops? well, that didn't meet people's hopes though I think not for
the lack of marketing on the part of Linux, but because Apple stepped
up and produced middle ground products that attracted a larger
audience. Especially as MSFT dropped the ball. They did some things
better, had a running start, and had a non open source software
business model which made reaping rewards easier.

But I don't see how any of this has anything to do with Bitcoin...
Except for the point that if Bitcoin doesn't become the money system
everyone uses and instead becomes the money system infrastructure all
the systems people use depend on? just as Linux has with the desktop,
where it might not be on the desktop but its in router firmware, cloud
servers, and just about everything else? I wouldn't consider that much
of a loss.

> time window, eventually people just give up and move on. Does anyone
> take desktop Linux seriously anymore? No. "The year of desktop Linux"
> is a joke. People took it seriously in 2001 but despite great progress
> since, the excitement and attention has gone. There were steady
> improvements over the last 10 years but nobody is creating desktop
> Linux startups anymore

Bitcoin already missed its first? and perhaps only? fad window in any
case. Today people say "Bitcoin? Thats still around? I thought it got
hacked". ... thanks to compromised centralized services.

> It's unclear we need to have every man and his dog run a full node.

Every man and his dog? Perhaps not.  But as many as can? probably so.

If we depend on the organic need for full nodes to overcome cost and
effort to run one there will always be major incentives to let someone
else do that, and the system would have its equilibrium right on the
brink of insecurity. Perhaps worse, since insecurity is most obvious
retrospectively. Security doesn't make for a good market force.

> Tor is a successful P2P network where the number of users vastly
> outstrips the number of nodes, and exit nodes in particular are a
> scarce resource run by people who know what they're doing and commit
> to it.

Tor is a distributed but controlled, by a small number of directory
authority operators, system.

It is a good system. But it has a trust model which is categorically
weaker than the one in Bitcoin.  If you want something where a
majority of a dozen signing keys? hopefully in the hands of trusted
parties? can decide the state of the system you can produce someting
far superior to Bitcoin? something that gives near instant
non-reversable transactions, something that gives good client security
without the complexity of a SPV node, etc.

But that isn't Bitcoin.

> Even with no incentives, they were able to obtain
> the resources they need.

And yet every tor user? if the have the bandwidth available can be a
full internal relay and the software nags them to do it (and also nags
them to act as invisible bridges for blocking avoidance), and every
user is technically able to run an exit (though they don't bludgeon
users to do that, because of the legal/political/technical issues
involved).  To do any of this doesn't require a user to switch to
different software, and the tor project has previously opposed client
only software.

> So why should Bitcoin be different?

It's less different than you make it out to be? but it _is_ different.
  Bitcoin is a distributed currency. The value of bitcoin comes from
the soundness of its properties and from the persistence of its
security. If the integrity of the distributed ledger is disrupted the
damage produced, both in funds stolen and in undermining the
confidence of the system, can be irreversible. Because Bitcoin's value
comes from confidence in Bitcoin and not from the specific
functionality of Bitcoins (they're random numbers that sit on your
disk) even if the ledger isn't actually compromised but people
reasonably believe it could be compromised that undermines the value.
 Tor, on the other hand, is a functioning system whos value depends on
its current usefulness, and not the past or future security.

Compare in your mind? Say everyone just found out that at block
420,000 Bitcoin would stop enforcing signature correctness or block
subsidy values (and this wasn't going to be fixed), and you also found
out that one year from now Tor would hand over their sites, source
code repositories, and directory authority keys to Iran (and you have
no suspicion that they already had done so).   How fast would you stop
using Tor vs how fast would to sell whatever coins you could?

> We can easily send a clear and consistent "this is important, please
> help" message without complicated auto-upgrade/downgrade schemes that
> risk annoying users.

I don't think we really can send such a message.  Thanks just the same
as asking for donations, not completely unsuccessful but not easy to
make successful either.  You're arguing for people running distinct
software which has no capability to be a full node, and changing what
they're doing in order to support the network. This maximizes the
cost, because in addition to the real cost the user must take a
switching cost too, and deemphasizes investing in keeping the full
node software as usable because 'oh just run a lite node if the full
is too slow'.



From slush at centrum.cz  Tue Dec  4 22:23:59 2012
From: slush at centrum.cz (slush)
Date: Tue, 4 Dec 2012 22:23:59 +0000
Subject: [Bitcoin-development] Roadmap to getting users onto SPV clients
In-Reply-To: <1354650998.21742.140661161849669.1371855A@webmail.messagingengine.com>
References: <mailman.70419.1354648162.2176.bitcoin-development@lists.sourceforge.net>
	<1354650998.21742.140661161849669.1371855A@webmail.messagingengine.com>
Message-ID: <CAJna-HjuHMDr4sO7FRGGfhncvQsUXygRp6v1D_BVbbZ+3zmcSQ@mail.gmail.com>

Jim, perfect idea with some logo indicating wallet compatibility! This
should cover BIP32 + some mnemonic algorithm for easy transferring of
wallets across various clients.

Btw I asked ThomasV for making BIP from his mnemonic algorithm and he
agreed, so I believe some proposal will be here pretty soon.

slush

On Tue, Dec 4, 2012 at 7:56 PM, Jim <jim618 at fastmail.co.uk> wrote:
>
> Also, as BIP32 support is added to clients and codebases then the actual
> variant of software to use to access your wallet will become relatively
> less important. Combined with a standardised seed -> passphrase
> algorithm the user can just type in their long passphrase into any BIP32
> compliant software and click/ buzz/ whirr : there is their wallet. We
> should have a little logo for HD wallet compliance ! :-)
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20121204/833e9f8b/attachment.html>

From etotheipi at gmail.com  Tue Dec  4 22:44:01 2012
From: etotheipi at gmail.com (Alan Reiner)
Date: Tue, 4 Dec 2012 17:44:01 -0500
Subject: [Bitcoin-development] Roadmap to getting users onto SPV clients
In-Reply-To: <CAAS2fgSJhX4974BdWGdyJA13kHg7mTgHadC6UdhdUPu0bDDXFg@mail.gmail.com>
References: <CANEZrP3=GdyTe+2=cp-ROOJ8_t=yCqO-7GQ4hA-3aksg46p+ww@mail.gmail.com>
	<CAAS2fgQYV7aR86QOwvqMLpFZ+MAwSOSZvV6XuZdXvqjeYziRng@mail.gmail.com>
	<CANEZrP3ZhNYrgQZT4qOohejs3yhgt0c_kT5zwAUVtPP1Q9f1Zg@mail.gmail.com>
	<CAAS2fgSJhX4974BdWGdyJA13kHg7mTgHadC6UdhdUPu0bDDXFg@mail.gmail.com>
Message-ID: <CALf2ePw82wt08_G2RtUYEBxorjY1ryZ4r+W7atSzDLYMU+rGGQ@mail.gmail.com>

This discussion sounds to be veering slightly off track.  I think we should
be focusing on how we will ease the transition for new users to get on the
network and use it.  Talking about the necessity and costs of running full
nodes in the future is important, but irrelevant here:  unless we don't
want users who aren't willing to run full nodes, we need to accommodate
users who want to simply "use" the network, not necessarily "support" it.  *I'm
making an assumption here that we want new users whether they use a full
node or not*.  Greg's point looks like it's veering towards "we don't want
to grow the network unless we're going to get more full nodes out of it."
  I'm of the opinion, like Mike Hearn, that the number of full nodes needed
for a healthy network is *not* O(N) in the number of users of the network.
 I expect it to be something more like O(sqrt(N))... or perhaps there's
even an upper limit above which the network gets no benefit, even if all 7
billion humans were using it.  (the bottleneck would be size of blocks and
CPU processing power at that point, not a shortage of full nodes).  Would
we rather have a system that is "full-node-or-nothing" and drive away users
that won't support the network, or accommodate those users with various
gradations of participation?

I believe my proposal for an address-based meta-chain (or something like
it) is *exactly* what is needed in the long run.  It could almost obsolete
this entire discussion.  However, as Greg pointed out there is a long,
treacherous path between the theory I presented, and a working&robust
implementation that can serve as the backbone for future SPV nodes.  I have
every intention to help pioneer that when Armory has other major features
completed (such as multi-sig), but it's not something that we can even
consider in the near- or medium-term as a solution to rely on.  I'd be
surprised if any such solution existed in the next 6-12 months.

I think it is very much in everyone's interest here to encourage new users
to start "using" Bitcoin, even if they don't "support" it.  As long as
there is a convenient channel for interested users to get more information
about the system, the benefits of spending the effort to run a full node,
and the features available in more-advanced clients that they might benefit
from, then I'm not personally concerned about a shortage of full nodes, and
we should carry forward with the idea of promoting SPV nodes for the
really-new users.

-Alan




On Tue, Dec 4, 2012 at 4:41 PM, Gregory Maxwell <gmaxwell at gmail.com> wrote:

> On Tue, Dec 4, 2012 at 3:58 PM, Mike Hearn <mike at plan99.net> wrote:
> >> It sounds to me that you're insisting that you're asking people who
> >> oppose degrading our recommendations to commit to a costly rushed
> >> development timeline. I think this is a false choice.
> >
> > Hardly. I don't have any particular timeline in mind. But I disagree
> > we have "forever". New ideas have a certain time window to take off
> > and become credible.
>
> Marketing initiatives have limited windows.  This matters, perhaps,
> when you're some VC pumping cash into a startup with the hopes of
> being the next stockmarket pump and dump darling.  Outside of that
> people use whatever they use because it works for them.
>
> And by the numbers Linux desktops are more common than they've ever
> been? and certainly Linux kernel _systems_ half the people I know have
> one in their pocket and its hard to go more than a few hours without
> touching one.  To some extent the "Year of the Linux desktop" is a bit
> like the "Year of being able to turn lead into gold" ... we can turn
> lead into gold now, but the particle accelerators, atomic power, and
> atomic weapons enabled by the same technology are far more interesting
> due to the particle realities of this. So we didn't get the ubiquitous
> Linux desktop: We got the ubiquitious Linux server, the ubiquitous
> Linux-kernel smart phone, the ubiquitous Linux television, media
> player, HVAC controller, etc. instead.
>
> Desktops? well, that didn't meet people's hopes though I think not for
> the lack of marketing on the part of Linux, but because Apple stepped
> up and produced middle ground products that attracted a larger
> audience. Especially as MSFT dropped the ball. They did some things
> better, had a running start, and had a non open source software
> business model which made reaping rewards easier.
>
> But I don't see how any of this has anything to do with Bitcoin...
> Except for the point that if Bitcoin doesn't become the money system
> everyone uses and instead becomes the money system infrastructure all
> the systems people use depend on? just as Linux has with the desktop,
> where it might not be on the desktop but its in router firmware, cloud
> servers, and just about everything else? I wouldn't consider that much
> of a loss.
>
> > time window, eventually people just give up and move on. Does anyone
> > take desktop Linux seriously anymore? No. "The year of desktop Linux"
> > is a joke. People took it seriously in 2001 but despite great progress
> > since, the excitement and attention has gone. There were steady
> > improvements over the last 10 years but nobody is creating desktop
> > Linux startups anymore
>
> Bitcoin already missed its first? and perhaps only? fad window in any
> case. Today people say "Bitcoin? Thats still around? I thought it got
> hacked". ... thanks to compromised centralized services.
>
> > It's unclear we need to have every man and his dog run a full node.
>
> Every man and his dog? Perhaps not.  But as many as can? probably so.
>
> If we depend on the organic need for full nodes to overcome cost and
> effort to run one there will always be major incentives to let someone
> else do that, and the system would have its equilibrium right on the
> brink of insecurity. Perhaps worse, since insecurity is most obvious
> retrospectively. Security doesn't make for a good market force.
>
> > Tor is a successful P2P network where the number of users vastly
> > outstrips the number of nodes, and exit nodes in particular are a
> > scarce resource run by people who know what they're doing and commit
> > to it.
>
> Tor is a distributed but controlled, by a small number of directory
> authority operators, system.
>
> It is a good system. But it has a trust model which is categorically
> weaker than the one in Bitcoin.  If you want something where a
> majority of a dozen signing keys? hopefully in the hands of trusted
> parties? can decide the state of the system you can produce someting
> far superior to Bitcoin? something that gives near instant
> non-reversable transactions, something that gives good client security
> without the complexity of a SPV node, etc.
>
> But that isn't Bitcoin.
>
> > Even with no incentives, they were able to obtain
> > the resources they need.
>
> And yet every tor user? if the have the bandwidth available can be a
> full internal relay and the software nags them to do it (and also nags
> them to act as invisible bridges for blocking avoidance), and every
> user is technically able to run an exit (though they don't bludgeon
> users to do that, because of the legal/political/technical issues
> involved).  To do any of this doesn't require a user to switch to
> different software, and the tor project has previously opposed client
> only software.
>
> > So why should Bitcoin be different?
>
> It's less different than you make it out to be? but it _is_ different.
>   Bitcoin is a distributed currency. The value of bitcoin comes from
> the soundness of its properties and from the persistence of its
> security. If the integrity of the distributed ledger is disrupted the
> damage produced, both in funds stolen and in undermining the
> confidence of the system, can be irreversible. Because Bitcoin's value
> comes from confidence in Bitcoin and not from the specific
> functionality of Bitcoins (they're random numbers that sit on your
> disk) even if the ledger isn't actually compromised but people
> reasonably believe it could be compromised that undermines the value.
>  Tor, on the other hand, is a functioning system whos value depends on
> its current usefulness, and not the past or future security.
>
> Compare in your mind? Say everyone just found out that at block
> 420,000 Bitcoin would stop enforcing signature correctness or block
> subsidy values (and this wasn't going to be fixed), and you also found
> out that one year from now Tor would hand over their sites, source
> code repositories, and directory authority keys to Iran (and you have
> no suspicion that they already had done so).   How fast would you stop
> using Tor vs how fast would to sell whatever coins you could?
>
> > We can easily send a clear and consistent "this is important, please
> > help" message without complicated auto-upgrade/downgrade schemes that
> > risk annoying users.
>
> I don't think we really can send such a message.  Thanks just the same
> as asking for donations, not completely unsuccessful but not easy to
> make successful either.  You're arguing for people running distinct
> software which has no capability to be a full node, and changing what
> they're doing in order to support the network. This maximizes the
> cost, because in addition to the real cost the user must take a
> switching cost too, and deemphasizes investing in keeping the full
> node software as usable because 'oh just run a lite node if the full
> is too slow'.
>
>
> ------------------------------------------------------------------------------
> LogMeIn Rescue: Anywhere, Anytime Remote support for IT. Free Trial
> Remotely access PCs and mobile devices and provide instant support
> Improve your efficiency, and focus on delivering more value-add services
> Discover what IT Professionals Know. Rescue delivers
> http://p.sf.net/sfu/logmein_12329d2d
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20121204/93f291de/attachment.html>

From gmaxwell at gmail.com  Wed Dec  5 00:27:50 2012
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Tue, 4 Dec 2012 19:27:50 -0500
Subject: [Bitcoin-development] Roadmap to getting users onto SPV clients
In-Reply-To: <CALf2ePw82wt08_G2RtUYEBxorjY1ryZ4r+W7atSzDLYMU+rGGQ@mail.gmail.com>
References: <CANEZrP3=GdyTe+2=cp-ROOJ8_t=yCqO-7GQ4hA-3aksg46p+ww@mail.gmail.com>
	<CAAS2fgQYV7aR86QOwvqMLpFZ+MAwSOSZvV6XuZdXvqjeYziRng@mail.gmail.com>
	<CANEZrP3ZhNYrgQZT4qOohejs3yhgt0c_kT5zwAUVtPP1Q9f1Zg@mail.gmail.com>
	<CAAS2fgSJhX4974BdWGdyJA13kHg7mTgHadC6UdhdUPu0bDDXFg@mail.gmail.com>
	<CALf2ePw82wt08_G2RtUYEBxorjY1ryZ4r+W7atSzDLYMU+rGGQ@mail.gmail.com>
Message-ID: <CAAS2fgQewysOG7eOHQxmLup4oLJK=jY=q-_4qTL6yKQ855g3ew@mail.gmail.com>

On Tue, Dec 4, 2012 at 5:44 PM, Alan Reiner <etotheipi at gmail.com> wrote:
> Greg's point looks like it's veering towards "we don't want to grow
> the network unless we're going to get more full nodes out of it."

No?

There is no fundamental completion between taking what actions we can
to maximize the decentralization of the network and making the
software maximally friendly and painless to get started with and use.
It's possible? not even deep rocket science? to create software that
accommodates both.

And because of this, I don't think it's acceptable to promote
solutions which may endanger the decentralization that makes the
system worthwhile in the first place.  If the current experience is so
poor that you'd even consider talking about promoting directions which
reduce its robustness then thats evidence that it would be worth
finding more resources to make the experience better without doing
anything the that reduces the model, even if you've got an argument
that maybe we can get away with it.  If there isn't interest in
putting in more resources to make these improvements then maybe the
issue isn't as bad as we think it is?

> I think it is very much in everyone's interest here to encourage new users to start "using" Bitcoin, even if they don't "support" it.

Absolutely? and yet that has nothing to do with promoting software to
users which only consumes without directly contributing and which
doesn't even have the capability to do so even if the user wants to
(or much less, is indifferent).



From etotheipi at gmail.com  Wed Dec  5 02:08:43 2012
From: etotheipi at gmail.com (Alan Reiner)
Date: Tue, 04 Dec 2012 21:08:43 -0500
Subject: [Bitcoin-development] Roadmap to getting users onto SPV clients
In-Reply-To: <CAAS2fgQewysOG7eOHQxmLup4oLJK=jY=q-_4qTL6yKQ855g3ew@mail.gmail.com>
References: <CANEZrP3=GdyTe+2=cp-ROOJ8_t=yCqO-7GQ4hA-3aksg46p+ww@mail.gmail.com>
	<CAAS2fgQYV7aR86QOwvqMLpFZ+MAwSOSZvV6XuZdXvqjeYziRng@mail.gmail.com>
	<CANEZrP3ZhNYrgQZT4qOohejs3yhgt0c_kT5zwAUVtPP1Q9f1Zg@mail.gmail.com>
	<CAAS2fgSJhX4974BdWGdyJA13kHg7mTgHadC6UdhdUPu0bDDXFg@mail.gmail.com>
	<CALf2ePw82wt08_G2RtUYEBxorjY1ryZ4r+W7atSzDLYMU+rGGQ@mail.gmail.com>
	<CAAS2fgQewysOG7eOHQxmLup4oLJK=jY=q-_4qTL6yKQ855g3ew@mail.gmail.com>
Message-ID: <50BEACAB.3070304@gmail.com>

Our divergence is on two points (personal opinions):

(1) I don't think there is any real risk to the centralization of the
network by promoting a SPV (purely-consuming) node to brand-new users. 
In my opinion (but I'm not as familiar with the networking as you), as
long as all full nodes are full-validation, the bottleneck will be
computation and bandwidth, long before a constant 10k nodes would be
insufficient to support propagating data through the network.  In fact,
I was under the impression that "connectedness" was the real metric of
concern (and resilience of that connectedness to large percentage of
users disappearing suddenly).  If that's true, above a certain number of
nodes, the connectedness isn't really going to get any better (I know
it's not really that simple, but I feel like it is up to 10x the current
network size).

(2) I think the current experience *is* really poor.  You seem to
suggest that the question for these new users is whether they will use
full-node-or-lite-node, but I believe it will be a decision between
lite-node-or-nothing-at-all (losing interest altogether).  Waiting a day
for the full node to synchronize, and then run into issues like
blkindex.dat corruption when their system crashes for some unrelated
reason and they have to resync for another day... they'll be gone in a
heartbeat.

Users need to experience, as quickly and easily as possible, that they
can move money across the world, without signing up for anything or
paying any fees.  After they understand the value of the system and want
to use it, they are much more likely to become educated and willing to
support the network with full node. 

-Alan




On 12/04/2012 07:27 PM, Gregory Maxwell wrote:
> On Tue, Dec 4, 2012 at 5:44 PM, Alan Reiner <etotheipi at gmail.com> wrote:
>> Greg's point looks like it's veering towards "we don't want to grow
>> the network unless we're going to get more full nodes out of it."
> No?
>
> There is no fundamental completion between taking what actions we can
> to maximize the decentralization of the network and making the
> software maximally friendly and painless to get started with and use.
> It's possible? not even deep rocket science? to create software that
> accommodates both.
>
> And because of this, I don't think it's acceptable to promote
> solutions which may endanger the decentralization that makes the
> system worthwhile in the first place.  If the current experience is so
> poor that you'd even consider talking about promoting directions which
> reduce its robustness then thats evidence that it would be worth
> finding more resources to make the experience better without doing
> anything the that reduces the model, even if you've got an argument
> that maybe we can get away with it.  If there isn't interest in
> putting in more resources to make these improvements then maybe the
> issue isn't as bad as we think it is?
>
>> I think it is very much in everyone's interest here to encourage new users to start "using" Bitcoin, even if they don't "support" it.
> Absolutely? and yet that has nothing to do with promoting software to
> users which only consumes without directly contributing and which
> doesn't even have the capability to do so even if the user wants to
> (or much less, is indifferent).




From gmaxwell at gmail.com  Wed Dec  5 02:54:52 2012
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Tue, 4 Dec 2012 21:54:52 -0500
Subject: [Bitcoin-development] Roadmap to getting users onto SPV clients
In-Reply-To: <50BEACAB.3070304@gmail.com>
References: <CANEZrP3=GdyTe+2=cp-ROOJ8_t=yCqO-7GQ4hA-3aksg46p+ww@mail.gmail.com>
	<CAAS2fgQYV7aR86QOwvqMLpFZ+MAwSOSZvV6XuZdXvqjeYziRng@mail.gmail.com>
	<CANEZrP3ZhNYrgQZT4qOohejs3yhgt0c_kT5zwAUVtPP1Q9f1Zg@mail.gmail.com>
	<CAAS2fgSJhX4974BdWGdyJA13kHg7mTgHadC6UdhdUPu0bDDXFg@mail.gmail.com>
	<CALf2ePw82wt08_G2RtUYEBxorjY1ryZ4r+W7atSzDLYMU+rGGQ@mail.gmail.com>
	<CAAS2fgQewysOG7eOHQxmLup4oLJK=jY=q-_4qTL6yKQ855g3ew@mail.gmail.com>
	<50BEACAB.3070304@gmail.com>
Message-ID: <CAAS2fgRfUMYwOE51+eY5QE8nDNV==G1OBRzM1AuHjYmYwTFiow@mail.gmail.com>

On Tue, Dec 4, 2012 at 9:08 PM, Alan Reiner <etotheipi at gmail.com> wrote:
> Our divergence is on two points (personal opinions):
>
> (1) I don't think there is any real risk to the centralization of the
> network by promoting a SPV (purely-consuming) node to brand-new users.
> In my opinion (but I'm not as familiar with the networking as you), as
> long as all full nodes are full-validation, the bottleneck will be
> computation and bandwidth, long before a constant 10k nodes would be
> insufficient to support propagating data through the network.

Not so? a moderately fast multicore desktop machine can keep up with
the maximum possible validation rate of the Bitcoin network and the
bandwidth has a long term maximum rate of about 14kbit/sec? though
you'll want at least ten times that for convergence stability and the
ability feed multiple peers.

Here are the worst blocks testnet3 (which has some intentionally
constructed maximum sized blocks),E31230 :
(with the new parallel validation code)
- Verify 2166 txins: 250.29ms (0.116ms/txin)
- Verify 3386 txins: 1454.25ms (0.429ms/txin)
- Verify 5801 txins: 575.46ms (0.099ms/txin)
- Verify 6314 txins: 625.05ms (0.099ms/txin)
Even the slowest one _validates_ at 400x realtime. (these measurements
are probably a bit noisy? but the point is that its fast).
(the connecting is fast too, but thats obvious with such a small database)

Although I haven't tested leveldb+ultraprune with a really enormous
txout set or generally with sustained maximum load? so there may be
other gaffs in the software that get exposed with sustained load, but
they'd all be correctable. Sounds like some interesting stuff to test
with on testnet fork that has the POW test disabled.

While syncing up a behind node can take a while? keep in mind that
you're expecting to sync up weeks of network work in hours. Even
'slow' is quite fast.

> In fact,
> I was under the impression that "connectedness" was the real metric of
> concern (and resilience of that connectedness to large percentage of
> users disappearing suddenly).  If that's true, above a certain number of
> nodes, the connectedness isn't really going to get any better (I know
> it's not really that simple, but I feel like it is up to 10x the current
> network size).

Thats not generally concern for me. There are a number of DOS attack
risks... But attacker linear DOS attacks aren't generally avoidable
and they don't persist.

Of the class of connectedness concerns I have is that a sybil attacker
could spin up enormous numbers of nodes and then use them to partition
large miners.  So, e.g. find BitTaco's node(s) and the nodes for
miners covering 25% hashpower and get them into a separate partition
from the rest of the network. Then they give double spends to that
partition and use them to purchase an unlimited supply of digitally
delivered tacos? allowing their captured miners to build an ill fated
fork? and drop the partition once the goods are delivered.

But there is no amount of full nodes that removes this concern,
especially if you allow for attackers which have compromised ISPs.
It can be adequately addressed by a healthy darknet of private
authenticated peerings between miners and other likely targets. I've
also thrown out some ideas on using merged mined node IDs to make some
kinds of sybil attacks harder ... but it'll be interesting to see how
the deployment of ASICs influences the concentration of hashpower? it
seems like there has already been a substantial move away from the
largest pools. Less hashpower consolidation makes attacks like this
less worrisome.

> (2) I think the current experience *is* really poor.

Yes, I said so specifically.  But the fact that people are flapping
their lips here instead of testing the bitcoin-qt git master which is
an 1-2 order of magnitude improvement suggests that perhaps I'm wrong
about that.  Certainly the dearth of people testing and making bug
reports suggests people don't actually care that much.

> You seem to
> suggest that the question for these new users is whether they will use
> full-node-or-lite-node, but I believe it will be a decision between
> lite-node-or-nothing-at-all (losing interest altogether).

No. The "question" that I'm concerned with is do we promote lite nodes
as equally good option? even for high end systems? remove the
incentive for people to create, improve, and adopt more useful full
node software and forever degrade the security of the system.

> Waiting a day
> for the full node to synchronize, and then run into issues like
> blkindex.dat corruption when their system crashes for some unrelated
> reason and they have to resync for another day... they'll be gone in a
> heartbeat.

The current software patches plus parallelism can sync on a fast
system with luck network access (or a local copy of the data) in under
an hour.

This is no replacement for start as SPV, but nor are handicapped
client programs a replacement for making fully capable ones acceptably
performing.

> Users need to experience, as quickly and easily as possible, that they
> can move money across the world, without signing up for anything or
> paying any fees.

Making the all the software painless for users is a great goal? and
one I share.  I still maintain that it has nothing to do with
promoting less capable and secure software to users.



From mike at coinlab.com  Wed Dec  5 03:06:00 2012
From: mike at coinlab.com (Mike Koss)
Date: Tue, 4 Dec 2012 19:06:00 -0800
Subject: [Bitcoin-development] String-based Hierarchical Deterministic Keys
	- Alternative to BIP 32
Message-ID: <CAErK2CgWFarfs1WhGHs2L0b6ZuqCMhu72+dLNj0EZ1vN8=Au=g@mail.gmail.com>

I've implemented an alternative to the BIP 32 proposal.  I wanted a system
based on a hierarchical string representation (rather than hierarchy of
integers as BIP 32 proposes).  For example I name keys like this:

[hd1.75491111].store.1. 1D7GM5dkUtxvGeWgn7SYtanBuyj1MD1EZy
[hd1.75491111].store.2. 1QAqDbzpNKViGSjVe1XmnGbmZtvz5hM7t1
[hd1.75491111].store.3. 14XkSN92QLGeorYPpoVbG87DQhowEx3mFn
[hd1.75491111].store.4. 1JLcGdod6Wm33rMZuZZUmAEE6osLhM4QMn

First draft of proposal:

https://gist.github.com/4211704


I envision using this in services, so I've not done any work to recommend
how the keys would be represented directly in the client (I just map from a
seed value and
a hierarchy string in order to deterministic ally derive ECDSA public and
private keys).

I'm happy to release my source code for this (Python).  But I'd first like
to get feedback about any security concerns with my scheme (I note that I
don't introduce the enlarged
key space that BIP 32 does with its "chain code" - I'm wondering if that
represents a weakness of my scheme vs. BIP 32).

On Mon, Dec 3, 2012 at 12:44 PM, Pieter Wuille <pieter.wuille at gmail.com>wrote:

> On Mon, Dec 03, 2012 at 06:48:34AM -0800, Amir Taaki wrote:
> > ok, also what is the reasoning behind serialising points using a
> compressed
> > format before going into the hash function? I'm looking at the
> sec1-v2.pdf
> > and the compression format is a little confusing.
>
> I don't think there is a compelling reason to encourage uncompressed public
> keys anymore on the network. They take more space in the block chain for no
> additional value whatsoever. Software may of course continue supporting
> uncompressed keys if they wish to provide compatibility, but for a new
> standard, I think it makes sense to standardize on just compressed keys.
> And since that software thus needs to support the compressed encoding,
> there is no reason to use a different encoding inside the derivation scheme
> itself.
>
> Regarding the encoding itself, it is not hard: just 0x02 or 0x03 (depending
> on whether Y is even or odd) followed by the 32-byte encoding of X.
> Decoding
> is harder, but is never needed in the derivation. Software internally can
> use
> any representation (and it will), which in almost all circumstances stores
> both X and Y (and even more). Decoding compressed public keys is somewhat
> harder, as Y must be reconstructed (but the algorithm isn't hard) - this is
> only necessary when someone wants to import an extended public key though
> for
> watch-only wallets.
>
> --
> Pieter
>
>
> ------------------------------------------------------------------------------
> Keep yourself connected to Go Parallel:
> BUILD Helping you discover the best ways to construct your parallel
> projects.
> http://goparallel.sourceforge.net
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>



-- 
Mike Koss
CTO, CoinLab
(425) 246-7701 (m)

A Bitcoin Primer <http://coinlab.com/a-bitcoin-primer.pdf> - What you need
to know about Bitcoins.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20121204/9a5e0265/attachment.html>

From gmaxwell at gmail.com  Wed Dec  5 03:23:37 2012
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Tue, 4 Dec 2012 22:23:37 -0500
Subject: [Bitcoin-development] String-based Hierarchical Deterministic
 Keys - Alternative to BIP 32
In-Reply-To: <CAErK2CgWFarfs1WhGHs2L0b6ZuqCMhu72+dLNj0EZ1vN8=Au=g@mail.gmail.com>
References: <CAErK2CgWFarfs1WhGHs2L0b6ZuqCMhu72+dLNj0EZ1vN8=Au=g@mail.gmail.com>
Message-ID: <CAAS2fgQxQEAtspRQixU7KAqhcXYnev=20-hbDpMCO9nTEKT+RQ@mail.gmail.com>

On Tue, Dec 4, 2012 at 10:06 PM, Mike Koss <mike at coinlab.com> wrote:
> I've implemented an alternative to the BIP 32 proposal.  I wanted a system
> based on a hierarchical string representation (rather than hierarchy of
> integers as BIP 32 proposes).  For example I name keys like this:
>
> [hd1.75491111].store.1. 1D7GM5dkUtxvGeWgn7SYtanBuyj1MD1EZy
> [hd1.75491111].store.2. 1QAqDbzpNKViGSjVe1XmnGbmZtvz5hM7t1
> [hd1.75491111].store.3. 14XkSN92QLGeorYPpoVbG87DQhowEx3mFn
> [hd1.75491111].store.4. 1JLcGdod6Wm33rMZuZZUmAEE6osLhM4QMn
>
> First draft of proposal:
>
> https://gist.github.com/4211704

As Pieter pointed out recently? it's not (realistically) possible to
blindly iterate through strings.  This means your proposal loses the
backup recoverablity property which is part the point of a
deterministic wallet:  If you have a backup prior to a new string name
being established you must also have a reliable backup of the string
as well.

Of course, if you're backing up the strings then you can also backup a
map equating the hdwallet indexes to your strings, and in the event of
a catastrophic loss where you are only left with the original ultimate
root you lose no coins (only metadata) with the BIP32 scheme. If,
instead, we have your scheme and the backup of strings is incomplete
then some or all assigned coin may be lost forever.

Your extended hierarchy of multiplers also makes me uncomfortable.
BIP32 uses a HMAC in its construction to obtain strongly unstructured
points.



From wbl at uchicago.edu  Wed Dec  5 03:36:29 2012
From: wbl at uchicago.edu (Watson Ladd)
Date: Tue, 4 Dec 2012 21:36:29 -0600
Subject: [Bitcoin-development] String-based Hierarchical Deterministic
 Keys - Alternative to BIP 32
In-Reply-To: <CAAS2fgQxQEAtspRQixU7KAqhcXYnev=20-hbDpMCO9nTEKT+RQ@mail.gmail.com>
References: <CAErK2CgWFarfs1WhGHs2L0b6ZuqCMhu72+dLNj0EZ1vN8=Au=g@mail.gmail.com>
	<CAAS2fgQxQEAtspRQixU7KAqhcXYnev=20-hbDpMCO9nTEKT+RQ@mail.gmail.com>
Message-ID: <CACsn0cnwyWL2NL9eEboxqgTS-h5MS+LHajKOYpFiCXCBs6pLug@mail.gmail.com>

On Tue, Dec 4, 2012 at 9:23 PM, Gregory Maxwell <gmaxwell at gmail.com> wrote:
> On Tue, Dec 4, 2012 at 10:06 PM, Mike Koss <mike at coinlab.com> wrote:
>> I've implemented an alternative to the BIP 32 proposal.  I wanted a system
>> based on a hierarchical string representation (rather than hierarchy of
>> integers as BIP 32 proposes).  For example I name keys like this:
>>
>> [hd1.75491111].store.1. 1D7GM5dkUtxvGeWgn7SYtanBuyj1MD1EZy
>> [hd1.75491111].store.2. 1QAqDbzpNKViGSjVe1XmnGbmZtvz5hM7t1
>> [hd1.75491111].store.3. 14XkSN92QLGeorYPpoVbG87DQhowEx3mFn
>> [hd1.75491111].store.4. 1JLcGdod6Wm33rMZuZZUmAEE6osLhM4QMn
>>
>> First draft of proposal:
>>
>> https://gist.github.com/4211704
>
> As Pieter pointed out recently? it's not (realistically) possible to
> blindly iterate through strings.  This means your proposal loses the
> backup recoverablity property which is part the point of a
> deterministic wallet:  If you have a backup prior to a new string name
> being established you must also have a reliable backup of the string
> as well.

I would like to note that BIP32 and this new proposal have a missing
feature: being able to spend
a coin sent to an address generated by this scheme implies being able
to spend any coin generated
by this scheme.

The easiest deterministic wallet construction is simply to use a
stream cipher to generate random
bytes used as the private keys in a wallet. Hierarchical constructions
do not seem to me to add more,
other then distinguishing transactions by sending to unique addresses,
which could be done by other means.

>
> Of course, if you're backing up the strings then you can also backup a
> map equating the hdwallet indexes to your strings, and in the event of
> a catastrophic loss where you are only left with the original ultimate
> root you lose no coins (only metadata) with the BIP32 scheme. If,
> instead, we have your scheme and the backup of strings is incomplete
> then some or all assigned coin may be lost forever.
>
> Your extended hierarchy of multiplers also makes me uncomfortable.
> BIP32 uses a HMAC in its construction to obtain strongly unstructured
> points.

I read BIP32. And while the multipliers at each level are
unstructured, the ones in the next level are products
of the ones before i.e. we have a multiplication tree with random
looking branches.
Note that the order of the basepoint is prime or a small cofactor
times a prime, so this isn't an issue (usually:
the cofactor could be annoying).

--
"Those who would give up Essential Liberty to purchase a little
Temporary Safety deserve neither  Liberty nor Safety."
-- Benjamin Franklin



From gmaxwell at gmail.com  Wed Dec  5 03:50:17 2012
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Tue, 4 Dec 2012 22:50:17 -0500
Subject: [Bitcoin-development] String-based Hierarchical Deterministic Keys
 - Alternative to BIP 32
In-Reply-To: <CAAS2fgSvEy9qgyEgWui1Z_qD+qbRH3=CqY+ZJu6ki1T=kxB6-Q@mail.gmail.com>
References: <CAErK2CgWFarfs1WhGHs2L0b6ZuqCMhu72+dLNj0EZ1vN8=Au=g@mail.gmail.com>
	<CAAS2fgQxQEAtspRQixU7KAqhcXYnev=20-hbDpMCO9nTEKT+RQ@mail.gmail.com>
	<CACsn0cnwyWL2NL9eEboxqgTS-h5MS+LHajKOYpFiCXCBs6pLug@mail.gmail.com>
	<CAAS2fgSvEy9qgyEgWui1Z_qD+qbRH3=CqY+ZJu6ki1T=kxB6-Q@mail.gmail.com>
Message-ID: <CAAS2fgRfAJhqhgxRzZ6fyBdOBCGtTb5OXJO0gEbTry8KxvXvCg@mail.gmail.com>

On Tue, Dec 4, 2012 at 10:36 PM, Watson Ladd <wbl at uchicago.edu> wrote:
> being able to spend
> a coin sent to an address generated by this scheme implies being able
> to spend any coin generated
> by this scheme.

If you have the the full extended secret there then you can spend
along the chain? but just the plain ecdsa secret by itself is not
enough to spend anything but that address itself.

Or have I misunderstood you here?

> The easiest deterministic wallet construction is simply to use a
> stream cipher to generate random
> bytes used as the private keys in a wallet. Hierarchical constructions
> do not seem to me to add more,
> other then distinguishing transactions by sending to unique addresses,
> which could be done by other means.

Sadly that construction has no ability to separate address generation
from spending? an important element for merchant applications.  Not
just for their own own distinguishing of transactions but because the
use of fresh addresses is essential to the limited privacy properties
of the Bitcoin system.

I called that a type-1 deterministic wallet in some old forum post
where I wrote about the different derivation schemes as opposed to the
point combining type-2 construction. The hope in BIP32 was that we
could get away just using a single one.



From jimmy.winn at gmail.com  Wed Dec  5 05:38:00 2012
From: jimmy.winn at gmail.com (Jim Nguyen)
Date: Tue, 4 Dec 2012 21:38:00 -0800
Subject: [Bitcoin-development] Roadmap to getting users onto SPV clients
In-Reply-To: <CAAS2fgRfUMYwOE51+eY5QE8nDNV==G1OBRzM1AuHjYmYwTFiow@mail.gmail.com>
References: <CANEZrP3=GdyTe+2=cp-ROOJ8_t=yCqO-7GQ4hA-3aksg46p+ww@mail.gmail.com>
	<CAAS2fgQYV7aR86QOwvqMLpFZ+MAwSOSZvV6XuZdXvqjeYziRng@mail.gmail.com>
	<CANEZrP3ZhNYrgQZT4qOohejs3yhgt0c_kT5zwAUVtPP1Q9f1Zg@mail.gmail.com>
	<CAAS2fgSJhX4974BdWGdyJA13kHg7mTgHadC6UdhdUPu0bDDXFg@mail.gmail.com>
	<CALf2ePw82wt08_G2RtUYEBxorjY1ryZ4r+W7atSzDLYMU+rGGQ@mail.gmail.com>
	<CAAS2fgQewysOG7eOHQxmLup4oLJK=jY=q-_4qTL6yKQ855g3ew@mail.gmail.com>
	<50BEACAB.3070304@gmail.com>
	<CAAS2fgRfUMYwOE51+eY5QE8nDNV==G1OBRzM1AuHjYmYwTFiow@mail.gmail.com>
Message-ID: <CAGjxm7vFkunziwECv1Twq4M9eC0nbgcqdCK6t6i7R84R_kPUTA@mail.gmail.com>

Gavin's grandma needs to be able to use bitcoin.  Here is a real world
sampling of the types of people wanting to use bitcoin but are having some
difficulty which I have collected from Facebook.  Should we listen to the
end user? :-P

*"what is the intention of Bitcoin? Is it supposed to be - eventually - for
dummies like myself or is it just for those individuals who are code and
algorithm writers? I downloaded a wallet but how do I know if I need more
software or a massive computer system to solve "the problem" for the next
block? With all the talk of mathematical problem solving on a world wide
network of computers I can't see a small laptop figuring out anything thus
not gaining any bitcoins. Why should I be interested in this if it appears
it's just for computer scientists?"*

*"hi, instaled bitcoin qt, but after it dowladed all the stuff, now i get
DEP protecction from windows, and it tells me bitcoinQT need to run with
DEP on, dont let me make an exception for it, nor work it i turn DEP only
for sys, so hwat i should do?"*

*"hi, i'm new to bitcoin, i got a bunch of free bitcoins from a bunch of
the free sites. how come when i tried to send my bitcoins to myself, it
says the fee exceeds the balance? I thought there was no fees?"*

*"Is there a way to speed up the process of synchronisation with the
network? It has been taken ages on my MAC.*
*Any help would be nice"*
*
*
*and more...*

Sorry if this doesn't belong to the bitcoin-development email list.  I just
see this as end-user/customer data gathering to refine the requirements,
since this is software engineering...isn't it?

Jim

On Tue, Dec 4, 2012 at 6:54 PM, Gregory Maxwell <gmaxwell at gmail.com> wrote:

> On Tue, Dec 4, 2012 at 9:08 PM, Alan Reiner <etotheipi at gmail.com> wrote:
> > Our divergence is on two points (personal opinions):
> >
> > (1) I don't think there is any real risk to the centralization of the
> > network by promoting a SPV (purely-consuming) node to brand-new users.
> > In my opinion (but I'm not as familiar with the networking as you), as
> > long as all full nodes are full-validation, the bottleneck will be
> > computation and bandwidth, long before a constant 10k nodes would be
> > insufficient to support propagating data through the network.
>
> Not so? a moderately fast multicore desktop machine can keep up with
> the maximum possible validation rate of the Bitcoin network and the
> bandwidth has a long term maximum rate of about 14kbit/sec? though
> you'll want at least ten times that for convergence stability and the
> ability feed multiple peers.
>
> Here are the worst blocks testnet3 (which has some intentionally
> constructed maximum sized blocks),E31230 :
> (with the new parallel validation code)
> - Verify 2166 txins: 250.29ms (0.116ms/txin)
> - Verify 3386 txins: 1454.25ms (0.429ms/txin)
> - Verify 5801 txins: 575.46ms (0.099ms/txin)
> - Verify 6314 txins: 625.05ms (0.099ms/txin)
> Even the slowest one _validates_ at 400x realtime. (these measurements
> are probably a bit noisy? but the point is that its fast).
> (the connecting is fast too, but thats obvious with such a small database)
>
> Although I haven't tested leveldb+ultraprune with a really enormous
> txout set or generally with sustained maximum load? so there may be
> other gaffs in the software that get exposed with sustained load, but
> they'd all be correctable. Sounds like some interesting stuff to test
> with on testnet fork that has the POW test disabled.
>
> While syncing up a behind node can take a while? keep in mind that
> you're expecting to sync up weeks of network work in hours. Even
> 'slow' is quite fast.
>
> > In fact,
> > I was under the impression that "connectedness" was the real metric of
> > concern (and resilience of that connectedness to large percentage of
> > users disappearing suddenly).  If that's true, above a certain number of
> > nodes, the connectedness isn't really going to get any better (I know
> > it's not really that simple, but I feel like it is up to 10x the current
> > network size).
>
> Thats not generally concern for me. There are a number of DOS attack
> risks... But attacker linear DOS attacks aren't generally avoidable
> and they don't persist.
>
> Of the class of connectedness concerns I have is that a sybil attacker
> could spin up enormous numbers of nodes and then use them to partition
> large miners.  So, e.g. find BitTaco's node(s) and the nodes for
> miners covering 25% hashpower and get them into a separate partition
> from the rest of the network. Then they give double spends to that
> partition and use them to purchase an unlimited supply of digitally
> delivered tacos? allowing their captured miners to build an ill fated
> fork? and drop the partition once the goods are delivered.
>
> But there is no amount of full nodes that removes this concern,
> especially if you allow for attackers which have compromised ISPs.
> It can be adequately addressed by a healthy darknet of private
> authenticated peerings between miners and other likely targets. I've
> also thrown out some ideas on using merged mined node IDs to make some
> kinds of sybil attacks harder ... but it'll be interesting to see how
> the deployment of ASICs influences the concentration of hashpower? it
> seems like there has already been a substantial move away from the
> largest pools. Less hashpower consolidation makes attacks like this
> less worrisome.
>
> > (2) I think the current experience *is* really poor.
>
> Yes, I said so specifically.  But the fact that people are flapping
> their lips here instead of testing the bitcoin-qt git master which is
> an 1-2 order of magnitude improvement suggests that perhaps I'm wrong
> about that.  Certainly the dearth of people testing and making bug
> reports suggests people don't actually care that much.
>
> > You seem to
> > suggest that the question for these new users is whether they will use
> > full-node-or-lite-node, but I believe it will be a decision between
> > lite-node-or-nothing-at-all (losing interest altogether).
>
> No. The "question" that I'm concerned with is do we promote lite nodes
> as equally good option? even for high end systems? remove the
> incentive for people to create, improve, and adopt more useful full
> node software and forever degrade the security of the system.
>
> > Waiting a day
> > for the full node to synchronize, and then run into issues like
> > blkindex.dat corruption when their system crashes for some unrelated
> > reason and they have to resync for another day... they'll be gone in a
> > heartbeat.
>
> The current software patches plus parallelism can sync on a fast
> system with luck network access (or a local copy of the data) in under
> an hour.
>
> This is no replacement for start as SPV, but nor are handicapped
> client programs a replacement for making fully capable ones acceptably
> performing.
>
> > Users need to experience, as quickly and easily as possible, that they
> > can move money across the world, without signing up for anything or
> > paying any fees.
>
> Making the all the software painless for users is a great goal? and
> one I share.  I still maintain that it has nothing to do with
> promoting less capable and secure software to users.
>
>
> ------------------------------------------------------------------------------
> LogMeIn Rescue: Anywhere, Anytime Remote support for IT. Free Trial
> Remotely access PCs and mobile devices and provide instant support
> Improve your efficiency, and focus on delivering more value-add services
> Discover what IT Professionals Know. Rescue delivers
> http://p.sf.net/sfu/logmein_12329d2d
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20121204/52b496b5/attachment.html>

From laanwj at gmail.com  Wed Dec  5 07:50:28 2012
From: laanwj at gmail.com (Wladimir)
Date: Wed, 5 Dec 2012 08:50:28 +0100
Subject: [Bitcoin-development] Roadmap to getting users onto SPV clients
In-Reply-To: <CAGjxm7vFkunziwECv1Twq4M9eC0nbgcqdCK6t6i7R84R_kPUTA@mail.gmail.com>
References: <CANEZrP3=GdyTe+2=cp-ROOJ8_t=yCqO-7GQ4hA-3aksg46p+ww@mail.gmail.com>
	<CAAS2fgQYV7aR86QOwvqMLpFZ+MAwSOSZvV6XuZdXvqjeYziRng@mail.gmail.com>
	<CANEZrP3ZhNYrgQZT4qOohejs3yhgt0c_kT5zwAUVtPP1Q9f1Zg@mail.gmail.com>
	<CAAS2fgSJhX4974BdWGdyJA13kHg7mTgHadC6UdhdUPu0bDDXFg@mail.gmail.com>
	<CALf2ePw82wt08_G2RtUYEBxorjY1ryZ4r+W7atSzDLYMU+rGGQ@mail.gmail.com>
	<CAAS2fgQewysOG7eOHQxmLup4oLJK=jY=q-_4qTL6yKQ855g3ew@mail.gmail.com>
	<50BEACAB.3070304@gmail.com>
	<CAAS2fgRfUMYwOE51+eY5QE8nDNV==G1OBRzM1AuHjYmYwTFiow@mail.gmail.com>
	<CAGjxm7vFkunziwECv1Twq4M9eC0nbgcqdCK6t6i7R84R_kPUTA@mail.gmail.com>
Message-ID: <CA+s+GJByVMpHLdOnnAiaBYNUACRi7CFr6=NX+Ocg7R6zktQUSA@mail.gmail.com>

Jim,

Most of those issues don't have to do with the SPV versus non-SPV problem.

First person doesn't understand what Bitcoin is supposed to do (he's
confusing mining and running a node). An information problem that could be
solved by explaining what is going on.

Another one seems to have a problem with DEP. That's probably an issue with
his OS configuration.

The third one is confused about the fees. Again, an information problem.

Only the fourth one is concerned with synchronization. The other ones could
happen with any client, as they're either based on misconceptions about
bitcoin as a whole or computer problems.

This doesn't in any way make switching to another, reduced security model
client preferable. Let's first try to improve the Bitcoin experience with
full security model, and if that somehow turns out to be impossible it's
always possible to recommend some other client based on the 'user type'.

I don't agree that this point is now. Anyway, security and stability of the
network is of utmost importance to do anything in the future, better to
grow organically than explode.

Many initiatives are underway to improve the Satoshi client (for example to
have Bitcoin-Qt behave as SPV client during initial block download, and as
full node after that), but as usual in open source development, many of us
are doing this basically for fun in our free time it does not always go as
fast as users would like.

I wish there was a straightforward solution for that, yeah pooling together
our development on one or two clients instead of a zillion different ones
could help, but everyone has more fun working on their own client that's
just how things go :)

Wladimir

On Wed, Dec 5, 2012 at 6:38 AM, Jim Nguyen <jimmy.winn at gmail.com> wrote:

> Gavin's grandma needs to be able to use bitcoin.  Here is a real world
> sampling of the types of people wanting to use bitcoin but are having some
> difficulty which I have collected from Facebook.  Should we listen to the
> end user? :-P
>
> *"what is the intention of Bitcoin? Is it supposed to be - eventually -
> for dummies like myself or is it just for those individuals who are code
> and algorithm writers? I downloaded a wallet but how do I know if I need
> more software or a massive computer system to solve "the problem" for the
> next block? With all the talk of mathematical problem solving on a world
> wide network of computers I can't see a small laptop figuring out anything
> thus not gaining any bitcoins. Why should I be interested in this if it
> appears it's just for computer scientists?"*
>
> *"hi, instaled bitcoin qt, but after it dowladed all the stuff, now i get
> DEP protecction from windows, and it tells me bitcoinQT need to run with
> DEP on, dont let me make an exception for it, nor work it i turn DEP only
> for sys, so hwat i should do?"*
>
> *"hi, i'm new to bitcoin, i got a bunch of free bitcoins from a bunch of
> the free sites. how come when i tried to send my bitcoins to myself, it
> says the fee exceeds the balance? I thought there was no fees?"*
>
> *"Is there a way to speed up the process of synchronisation with the
> network? It has been taken ages on my MAC.*
> *Any help would be nice"*
> *
> *
> *and more...*
>
> Sorry if this doesn't belong to the bitcoin-development email list.  I
> just see this as end-user/customer data gathering to refine the
> requirements, since this is software engineering...isn't it?
>
> Jim
>
> On Tue, Dec 4, 2012 at 6:54 PM, Gregory Maxwell <gmaxwell at gmail.com>wrote:
>
>> On Tue, Dec 4, 2012 at 9:08 PM, Alan Reiner <etotheipi at gmail.com> wrote:
>> > Our divergence is on two points (personal opinions):
>> >
>> > (1) I don't think there is any real risk to the centralization of the
>> > network by promoting a SPV (purely-consuming) node to brand-new users.
>> > In my opinion (but I'm not as familiar with the networking as you), as
>> > long as all full nodes are full-validation, the bottleneck will be
>> > computation and bandwidth, long before a constant 10k nodes would be
>> > insufficient to support propagating data through the network.
>>
>> Not so? a moderately fast multicore desktop machine can keep up with
>> the maximum possible validation rate of the Bitcoin network and the
>> bandwidth has a long term maximum rate of about 14kbit/sec? though
>> you'll want at least ten times that for convergence stability and the
>> ability feed multiple peers.
>>
>> Here are the worst blocks testnet3 (which has some intentionally
>> constructed maximum sized blocks),E31230 :
>> (with the new parallel validation code)
>> - Verify 2166 txins: 250.29ms (0.116ms/txin)
>> - Verify 3386 txins: 1454.25ms (0.429ms/txin)
>> - Verify 5801 txins: 575.46ms (0.099ms/txin)
>> - Verify 6314 txins: 625.05ms (0.099ms/txin)
>> Even the slowest one _validates_ at 400x realtime. (these measurements
>> are probably a bit noisy? but the point is that its fast).
>> (the connecting is fast too, but thats obvious with such a small database)
>>
>> Although I haven't tested leveldb+ultraprune with a really enormous
>> txout set or generally with sustained maximum load? so there may be
>> other gaffs in the software that get exposed with sustained load, but
>> they'd all be correctable. Sounds like some interesting stuff to test
>> with on testnet fork that has the POW test disabled.
>>
>> While syncing up a behind node can take a while? keep in mind that
>> you're expecting to sync up weeks of network work in hours. Even
>> 'slow' is quite fast.
>>
>> > In fact,
>> > I was under the impression that "connectedness" was the real metric of
>> > concern (and resilience of that connectedness to large percentage of
>> > users disappearing suddenly).  If that's true, above a certain number of
>> > nodes, the connectedness isn't really going to get any better (I know
>> > it's not really that simple, but I feel like it is up to 10x the current
>> > network size).
>>
>> Thats not generally concern for me. There are a number of DOS attack
>> risks... But attacker linear DOS attacks aren't generally avoidable
>> and they don't persist.
>>
>> Of the class of connectedness concerns I have is that a sybil attacker
>> could spin up enormous numbers of nodes and then use them to partition
>> large miners.  So, e.g. find BitTaco's node(s) and the nodes for
>> miners covering 25% hashpower and get them into a separate partition
>> from the rest of the network. Then they give double spends to that
>> partition and use them to purchase an unlimited supply of digitally
>> delivered tacos? allowing their captured miners to build an ill fated
>> fork? and drop the partition once the goods are delivered.
>>
>> But there is no amount of full nodes that removes this concern,
>> especially if you allow for attackers which have compromised ISPs.
>> It can be adequately addressed by a healthy darknet of private
>> authenticated peerings between miners and other likely targets. I've
>> also thrown out some ideas on using merged mined node IDs to make some
>> kinds of sybil attacks harder ... but it'll be interesting to see how
>> the deployment of ASICs influences the concentration of hashpower? it
>> seems like there has already been a substantial move away from the
>> largest pools. Less hashpower consolidation makes attacks like this
>> less worrisome.
>>
>> > (2) I think the current experience *is* really poor.
>>
>> Yes, I said so specifically.  But the fact that people are flapping
>> their lips here instead of testing the bitcoin-qt git master which is
>> an 1-2 order of magnitude improvement suggests that perhaps I'm wrong
>> about that.  Certainly the dearth of people testing and making bug
>> reports suggests people don't actually care that much.
>>
>> > You seem to
>> > suggest that the question for these new users is whether they will use
>> > full-node-or-lite-node, but I believe it will be a decision between
>> > lite-node-or-nothing-at-all (losing interest altogether).
>>
>> No. The "question" that I'm concerned with is do we promote lite nodes
>> as equally good option? even for high end systems? remove the
>> incentive for people to create, improve, and adopt more useful full
>> node software and forever degrade the security of the system.
>>
>> > Waiting a day
>> > for the full node to synchronize, and then run into issues like
>> > blkindex.dat corruption when their system crashes for some unrelated
>> > reason and they have to resync for another day... they'll be gone in a
>> > heartbeat.
>>
>> The current software patches plus parallelism can sync on a fast
>> system with luck network access (or a local copy of the data) in under
>> an hour.
>>
>> This is no replacement for start as SPV, but nor are handicapped
>> client programs a replacement for making fully capable ones acceptably
>> performing.
>>
>> > Users need to experience, as quickly and easily as possible, that they
>> > can move money across the world, without signing up for anything or
>> > paying any fees.
>>
>> Making the all the software painless for users is a great goal? and
>> one I share.  I still maintain that it has nothing to do with
>> promoting less capable and secure software to users.
>>
>>
>> ------------------------------------------------------------------------------
>> LogMeIn Rescue: Anywhere, Anytime Remote support for IT. Free Trial
>> Remotely access PCs and mobile devices and provide instant support
>> Improve your efficiency, and focus on delivering more value-add services
>> Discover what IT Professionals Know. Rescue delivers
>> http://p.sf.net/sfu/logmein_12329d2d
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>
>
>
>
> ------------------------------------------------------------------------------
> LogMeIn Rescue: Anywhere, Anytime Remote support for IT. Free Trial
> Remotely access PCs and mobile devices and provide instant support
> Improve your efficiency, and focus on delivering more value-add services
> Discover what IT Professionals Know. Rescue delivers
> http://p.sf.net/sfu/logmein_12329d2d
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20121205/0467fa08/attachment.html>

From g.rowe at froot.co.uk  Wed Dec  5 09:43:58 2012
From: g.rowe at froot.co.uk (Gary Rowe)
Date: Wed, 5 Dec 2012 09:43:58 +0000
Subject: [Bitcoin-development] Roadmap to getting users onto SPV clients
In-Reply-To: <CA+s+GJByVMpHLdOnnAiaBYNUACRi7CFr6=NX+Ocg7R6zktQUSA@mail.gmail.com>
References: <CANEZrP3=GdyTe+2=cp-ROOJ8_t=yCqO-7GQ4hA-3aksg46p+ww@mail.gmail.com>
	<CAAS2fgQYV7aR86QOwvqMLpFZ+MAwSOSZvV6XuZdXvqjeYziRng@mail.gmail.com>
	<CANEZrP3ZhNYrgQZT4qOohejs3yhgt0c_kT5zwAUVtPP1Q9f1Zg@mail.gmail.com>
	<CAAS2fgSJhX4974BdWGdyJA13kHg7mTgHadC6UdhdUPu0bDDXFg@mail.gmail.com>
	<CALf2ePw82wt08_G2RtUYEBxorjY1ryZ4r+W7atSzDLYMU+rGGQ@mail.gmail.com>
	<CAAS2fgQewysOG7eOHQxmLup4oLJK=jY=q-_4qTL6yKQ855g3ew@mail.gmail.com>
	<50BEACAB.3070304@gmail.com>
	<CAAS2fgRfUMYwOE51+eY5QE8nDNV==G1OBRzM1AuHjYmYwTFiow@mail.gmail.com>
	<CAGjxm7vFkunziwECv1Twq4M9eC0nbgcqdCK6t6i7R84R_kPUTA@mail.gmail.com>
	<CA+s+GJByVMpHLdOnnAiaBYNUACRi7CFr6=NX+Ocg7R6zktQUSA@mail.gmail.com>
Message-ID: <CAKm8k+2nWgKbEL+iWp7-rmMXYJNsxWz6E9SFy8AMtWiRoead7g@mail.gmail.com>

I would like to chime on on the user experience of the SPV client (in
particular MultiBit).

Without exception, everyone that I have introduced Bitcoin (which is a lot
of people) have expected an "instant-on" experience. It has to clobber
PayPal and credit cards or people won't give it a second look, let alone a
second chance. SPV clients deliver on that expectation.

Once the user has the great initial "wow!" moment then their interest in
Bitcoin is reinforced and they tend to explore further, particularly into
the economic theory behind it. Many decide to install the full node out of
a sense of community contribution to the security of the network.

Having a hybrid mode of SPV first then full node second should be something
that a user has control over - it is their computing resources we are using
after all and Bitcoin should not be perceived as a drain.


On 5 December 2012 07:50, Wladimir <laanwj at gmail.com> wrote:

> Jim,
>
> Most of those issues don't have to do with the SPV versus non-SPV problem.
>
> First person doesn't understand what Bitcoin is supposed to do (he's
> confusing mining and running a node). An information problem that could be
> solved by explaining what is going on.
>
> Another one seems to have a problem with DEP. That's probably an issue
> with his OS configuration.
>
> The third one is confused about the fees. Again, an information problem.
>
> Only the fourth one is concerned with synchronization. The other ones
> could happen with any client, as they're either based on misconceptions
> about bitcoin as a whole or computer problems.
>
> This doesn't in any way make switching to another, reduced security model
> client preferable. Let's first try to improve the Bitcoin experience with
> full security model, and if that somehow turns out to be impossible it's
> always possible to recommend some other client based on the 'user type'.
>
> I don't agree that this point is now. Anyway, security and stability of
> the network is of utmost importance to do anything in the future, better to
> grow organically than explode.
>
> Many initiatives are underway to improve the Satoshi client (for
> example to have Bitcoin-Qt behave as SPV client during initial block
> download, and as full node after that), but as usual in open source
> development, many of us are doing this basically for fun in our free time
> it does not always go as fast as users would like.
>
> I wish there was a straightforward solution for that, yeah pooling
> together our development on one or two clients instead of a zillion
> different ones could help, but everyone has more fun working on their own
> client that's just how things go :)
>
> Wladimir
>
> On Wed, Dec 5, 2012 at 6:38 AM, Jim Nguyen <jimmy.winn at gmail.com> wrote:
>
>> Gavin's grandma needs to be able to use bitcoin.  Here is a real world
>> sampling of the types of people wanting to use bitcoin but are having some
>> difficulty which I have collected from Facebook.  Should we listen to the
>> end user? :-P
>>
>> *"what is the intention of Bitcoin? Is it supposed to be - eventually -
>> for dummies like myself or is it just for those individuals who are code
>> and algorithm writers? I downloaded a wallet but how do I know if I need
>> more software or a massive computer system to solve "the problem" for the
>> next block? With all the talk of mathematical problem solving on a world
>> wide network of computers I can't see a small laptop figuring out anything
>> thus not gaining any bitcoins. Why should I be interested in this if it
>> appears it's just for computer scientists?"*
>>
>> *"hi, instaled bitcoin qt, but after it dowladed all the stuff, now i
>> get DEP protecction from windows, and it tells me bitcoinQT need to run
>> with DEP on, dont let me make an exception for it, nor work it i turn DEP
>> only for sys, so hwat i should do?"*
>>
>> *"hi, i'm new to bitcoin, i got a bunch of free bitcoins from a bunch of
>> the free sites. how come when i tried to send my bitcoins to myself, it
>> says the fee exceeds the balance? I thought there was no fees?"*
>>
>> *"Is there a way to speed up the process of synchronisation with the
>> network? It has been taken ages on my MAC.*
>> *Any help would be nice"*
>> *
>> *
>> *and more...*
>>
>> Sorry if this doesn't belong to the bitcoin-development email list.  I
>> just see this as end-user/customer data gathering to refine the
>> requirements, since this is software engineering...isn't it?
>>
>> Jim
>>
>> On Tue, Dec 4, 2012 at 6:54 PM, Gregory Maxwell <gmaxwell at gmail.com>wrote:
>>
>>> On Tue, Dec 4, 2012 at 9:08 PM, Alan Reiner <etotheipi at gmail.com> wrote:
>>> > Our divergence is on two points (personal opinions):
>>> >
>>> > (1) I don't think there is any real risk to the centralization of the
>>> > network by promoting a SPV (purely-consuming) node to brand-new users.
>>> > In my opinion (but I'm not as familiar with the networking as you), as
>>> > long as all full nodes are full-validation, the bottleneck will be
>>> > computation and bandwidth, long before a constant 10k nodes would be
>>> > insufficient to support propagating data through the network.
>>>
>>> Not so? a moderately fast multicore desktop machine can keep up with
>>> the maximum possible validation rate of the Bitcoin network and the
>>> bandwidth has a long term maximum rate of about 14kbit/sec? though
>>> you'll want at least ten times that for convergence stability and the
>>> ability feed multiple peers.
>>>
>>> Here are the worst blocks testnet3 (which has some intentionally
>>> constructed maximum sized blocks),E31230 :
>>> (with the new parallel validation code)
>>> - Verify 2166 txins: 250.29ms (0.116ms/txin)
>>> - Verify 3386 txins: 1454.25ms (0.429ms/txin)
>>> - Verify 5801 txins: 575.46ms (0.099ms/txin)
>>> - Verify 6314 txins: 625.05ms (0.099ms/txin)
>>> Even the slowest one _validates_ at 400x realtime. (these measurements
>>> are probably a bit noisy? but the point is that its fast).
>>> (the connecting is fast too, but thats obvious with such a small
>>> database)
>>>
>>> Although I haven't tested leveldb+ultraprune with a really enormous
>>> txout set or generally with sustained maximum load? so there may be
>>> other gaffs in the software that get exposed with sustained load, but
>>> they'd all be correctable. Sounds like some interesting stuff to test
>>> with on testnet fork that has the POW test disabled.
>>>
>>> While syncing up a behind node can take a while? keep in mind that
>>> you're expecting to sync up weeks of network work in hours. Even
>>> 'slow' is quite fast.
>>>
>>> > In fact,
>>> > I was under the impression that "connectedness" was the real metric of
>>> > concern (and resilience of that connectedness to large percentage of
>>> > users disappearing suddenly).  If that's true, above a certain number
>>> of
>>> > nodes, the connectedness isn't really going to get any better (I know
>>> > it's not really that simple, but I feel like it is up to 10x the
>>> current
>>> > network size).
>>>
>>> Thats not generally concern for me. There are a number of DOS attack
>>> risks... But attacker linear DOS attacks aren't generally avoidable
>>> and they don't persist.
>>>
>>> Of the class of connectedness concerns I have is that a sybil attacker
>>> could spin up enormous numbers of nodes and then use them to partition
>>> large miners.  So, e.g. find BitTaco's node(s) and the nodes for
>>> miners covering 25% hashpower and get them into a separate partition
>>> from the rest of the network. Then they give double spends to that
>>> partition and use them to purchase an unlimited supply of digitally
>>> delivered tacos? allowing their captured miners to build an ill fated
>>> fork? and drop the partition once the goods are delivered.
>>>
>>> But there is no amount of full nodes that removes this concern,
>>> especially if you allow for attackers which have compromised ISPs.
>>> It can be adequately addressed by a healthy darknet of private
>>> authenticated peerings between miners and other likely targets. I've
>>> also thrown out some ideas on using merged mined node IDs to make some
>>> kinds of sybil attacks harder ... but it'll be interesting to see how
>>> the deployment of ASICs influences the concentration of hashpower? it
>>> seems like there has already been a substantial move away from the
>>> largest pools. Less hashpower consolidation makes attacks like this
>>> less worrisome.
>>>
>>> > (2) I think the current experience *is* really poor.
>>>
>>> Yes, I said so specifically.  But the fact that people are flapping
>>> their lips here instead of testing the bitcoin-qt git master which is
>>> an 1-2 order of magnitude improvement suggests that perhaps I'm wrong
>>> about that.  Certainly the dearth of people testing and making bug
>>> reports suggests people don't actually care that much.
>>>
>>> > You seem to
>>> > suggest that the question for these new users is whether they will use
>>> > full-node-or-lite-node, but I believe it will be a decision between
>>> > lite-node-or-nothing-at-all (losing interest altogether).
>>>
>>> No. The "question" that I'm concerned with is do we promote lite nodes
>>> as equally good option? even for high end systems? remove the
>>> incentive for people to create, improve, and adopt more useful full
>>> node software and forever degrade the security of the system.
>>>
>>> > Waiting a day
>>> > for the full node to synchronize, and then run into issues like
>>> > blkindex.dat corruption when their system crashes for some unrelated
>>> > reason and they have to resync for another day... they'll be gone in a
>>> > heartbeat.
>>>
>>> The current software patches plus parallelism can sync on a fast
>>> system with luck network access (or a local copy of the data) in under
>>> an hour.
>>>
>>> This is no replacement for start as SPV, but nor are handicapped
>>> client programs a replacement for making fully capable ones acceptably
>>> performing.
>>>
>>> > Users need to experience, as quickly and easily as possible, that they
>>> > can move money across the world, without signing up for anything or
>>> > paying any fees.
>>>
>>> Making the all the software painless for users is a great goal? and
>>> one I share.  I still maintain that it has nothing to do with
>>> promoting less capable and secure software to users.
>>>
>>>
>>> ------------------------------------------------------------------------------
>>> LogMeIn Rescue: Anywhere, Anytime Remote support for IT. Free Trial
>>> Remotely access PCs and mobile devices and provide instant support
>>> Improve your efficiency, and focus on delivering more value-add services
>>> Discover what IT Professionals Know. Rescue delivers
>>> http://p.sf.net/sfu/logmein_12329d2d
>>> _______________________________________________
>>> Bitcoin-development mailing list
>>> Bitcoin-development at lists.sourceforge.net
>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>>
>>
>>
>>
>> ------------------------------------------------------------------------------
>> LogMeIn Rescue: Anywhere, Anytime Remote support for IT. Free Trial
>> Remotely access PCs and mobile devices and provide instant support
>> Improve your efficiency, and focus on delivering more value-add services
>> Discover what IT Professionals Know. Rescue delivers
>> http://p.sf.net/sfu/logmein_12329d2d
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>
>>
>
>
> ------------------------------------------------------------------------------
> LogMeIn Rescue: Anywhere, Anytime Remote support for IT. Free Trial
> Remotely access PCs and mobile devices and provide instant support
> Improve your efficiency, and focus on delivering more value-add services
> Discover what IT Professionals Know. Rescue delivers
> http://p.sf.net/sfu/logmein_12329d2d
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20121205/5e194147/attachment.html>

From mike at plan99.net  Wed Dec  5 10:43:24 2012
From: mike at plan99.net (Mike Hearn)
Date: Wed, 5 Dec 2012 11:43:24 +0100
Subject: [Bitcoin-development] Roadmap to getting users onto SPV clients
In-Reply-To: <CAAS2fgRfUMYwOE51+eY5QE8nDNV==G1OBRzM1AuHjYmYwTFiow@mail.gmail.com>
References: <CANEZrP3=GdyTe+2=cp-ROOJ8_t=yCqO-7GQ4hA-3aksg46p+ww@mail.gmail.com>
	<CAAS2fgQYV7aR86QOwvqMLpFZ+MAwSOSZvV6XuZdXvqjeYziRng@mail.gmail.com>
	<CANEZrP3ZhNYrgQZT4qOohejs3yhgt0c_kT5zwAUVtPP1Q9f1Zg@mail.gmail.com>
	<CAAS2fgSJhX4974BdWGdyJA13kHg7mTgHadC6UdhdUPu0bDDXFg@mail.gmail.com>
	<CALf2ePw82wt08_G2RtUYEBxorjY1ryZ4r+W7atSzDLYMU+rGGQ@mail.gmail.com>
	<CAAS2fgQewysOG7eOHQxmLup4oLJK=jY=q-_4qTL6yKQ855g3ew@mail.gmail.com>
	<50BEACAB.3070304@gmail.com>
	<CAAS2fgRfUMYwOE51+eY5QE8nDNV==G1OBRzM1AuHjYmYwTFiow@mail.gmail.com>
Message-ID: <CANEZrP2W8BnDOBHJY08Pv9x1sOZ_BS7HHQk60Ysk_yFNH+RM5A@mail.gmail.com>

>> I was under the impression that "connectedness" was the real metric of
>> concern

I think the real thing we need full nodes for is "sockets" where by
socket I mean "resources needed to serve another node".

Last year we actually ran out of sockets and it took forever for new
nodes to connect because so many existing nodes were full. We don't
want to be in that situation again. So we need full nodes, nobody
disputes that.

The question is, if you have a node on your average desktop machine
that gets switched off at night, has a stupid virus scanner that
insists on checking every database write, has users who go from a bit
of light word processing to watching HD video and expect no stutters
or slowdowns - how valuable is such a node, really? Also has to be
weighed against the risk of eventual user frustration when they
discover Bitcoin is slowing their computer down and go around telling
their friends how much it sucks.

Ultraprune+LevelDB+other optimizations are great. They aren't game
changers for two reasons:

1) Eventually network traffic should increase to use up the additional
performance unlocked by optimizations

2) Users demand instant on not just at first start, but any time they
open their wallet. I don't think it ever makes sense for a regular end
user to have their wallet integrated with a full node because it means
if you get an email saying "oh hey I sent you the money" and you start
your wallet so you can see it/spend it, you still have to wait a while
until it catches up from whenever it was last quit. I've done this a
bunch of times and it really sucks to wait.

The only time it makes sense to have a wallet integrated with a full
node is if that node never shuts down, ie, it's a merchant node.

If a casual user has to be using an SPV wallet all the time no matter
what, then it's not a big leap to simply have both an SPV client and a
full node running in parallel for users who want to support the
network. And how do we recruit such users? Well I've got nothing
against light wallets noticing that the system seems to have high
uptime, external connectivity etc and putting a notice on the screen
asking users to take part. For Windows users you could have a
one-click install that sets up a background service (I think .NET
OneClick makes this possible), so getting a full node is totally easy
and transparent.

Going back to the Tor analogy, whilst I agree with Gregorys arguments
that they aren't quite the same, the Tor guys have wanted to
automatically opt users in to being relays for a while. But the
technical complexity of doing it well is really high. It's still on
their wishlist even though Tor is quite old. A good first base to
reach is simply having accurate recommendations. If users start
complaining that they were asked to run a full node but when they did,
performance suffered unacceptably, then we know we need better
heuristics before automatically opting users in.



From robbak at robbak.com  Wed Dec  5 10:19:16 2012
From: robbak at robbak.com (Robert Backhaus)
Date: Wed, 5 Dec 2012 20:19:16 +1000
Subject: [Bitcoin-development] Roadmap to getting users onto SPV clients
In-Reply-To: <CAKm8k+2nWgKbEL+iWp7-rmMXYJNsxWz6E9SFy8AMtWiRoead7g@mail.gmail.com>
References: <CANEZrP3=GdyTe+2=cp-ROOJ8_t=yCqO-7GQ4hA-3aksg46p+ww@mail.gmail.com>
	<CAAS2fgQYV7aR86QOwvqMLpFZ+MAwSOSZvV6XuZdXvqjeYziRng@mail.gmail.com>
	<CANEZrP3ZhNYrgQZT4qOohejs3yhgt0c_kT5zwAUVtPP1Q9f1Zg@mail.gmail.com>
	<CAAS2fgSJhX4974BdWGdyJA13kHg7mTgHadC6UdhdUPu0bDDXFg@mail.gmail.com>
	<CALf2ePw82wt08_G2RtUYEBxorjY1ryZ4r+W7atSzDLYMU+rGGQ@mail.gmail.com>
	<CAAS2fgQewysOG7eOHQxmLup4oLJK=jY=q-_4qTL6yKQ855g3ew@mail.gmail.com>
	<50BEACAB.3070304@gmail.com>
	<CAAS2fgRfUMYwOE51+eY5QE8nDNV==G1OBRzM1AuHjYmYwTFiow@mail.gmail.com>
	<CAGjxm7vFkunziwECv1Twq4M9eC0nbgcqdCK6t6i7R84R_kPUTA@mail.gmail.com>
	<CA+s+GJByVMpHLdOnnAiaBYNUACRi7CFr6=NX+Ocg7R6zktQUSA@mail.gmail.com>
	<CAKm8k+2nWgKbEL+iWp7-rmMXYJNsxWz6E9SFy8AMtWiRoead7g@mail.gmail.com>
Message-ID: <CA+i0-i8JqW-wX6gMhJTjmbNfW9me1BifS635dnFrHT1A8KRpig@mail.gmail.com>

On 5 December 2012 19:43, Gary Rowe <g.rowe at froot.co.uk> wrote:

> I would like to chime on on the user experience of the SPV client (in
> particular MultiBit).
>
> Without exception, everyone that I have introduced Bitcoin (which is a lot
> of people) have expected an "instant-on" experience. It has to clobber
> PayPal and credit cards or people won't give it a second look, let alone a
> second chance. SPV clients deliver on that expectation.
>
> Once the user has the great initial "wow!" moment then their interest in
> Bitcoin is reinforced and they tend to explore further, particularly into
> the economic theory behind it. Many decide to install the full node out of
> a sense of community contribution to the security of the network.
>
> Having a hybrid mode of SPV first then full node second should be
> something that a user has control over - it is their computing resources we
> are using after all and Bitcoin should not be perceived as a drain.


Hybrid SPV sounds like a good idea to me. Allows it to work out-of-the-box,
then slowly gets up-to-speed with the full network - working low priority,
or even not at all, if it detects a slow system or network link.
Another idea is always distributing the client with a checkpoint that is
only days old, then starting by pulling in more recent blocks, so it can
transact. Following that, it will pull in progressively older blocks as
time permits.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20121205/c358248c/attachment.html>

From gavinandresen at gmail.com  Wed Dec  5 19:34:49 2012
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Wed, 5 Dec 2012 14:34:49 -0500
Subject: [Bitcoin-development] Payment Protocol Proposal:
	Invoices/Payments/Receipts
In-Reply-To: <CANEZrP2riPBViBqAOWfY9uSQwoEm=gN108JU988XvouMbai1Ug@mail.gmail.com>
References: <CABsx9T0PsGLEAWRCjEDDFWQrb+DnJWQZ7mFLaZewAEX6vD1eHw@mail.gmail.com>
	<20121128233619.GA6368@giles.gnomon.org.uk>
	<CABsx9T09FYf2RTaMpmujt3qwTFc2JgnREH_7Hyk2mnCgb3CvAw@mail.gmail.com>
	<20121129170713.GD6368@giles.gnomon.org.uk>
	<CANEZrP233CytLs3PWBQ1TyuBTMv4sLGJkEMeGWYq5xRi+iLKew@mail.gmail.com>
	<20121129185330.GE6368@giles.gnomon.org.uk>
	<CABsx9T35qD_xJEVw002eAhJ1kr6x5aMU7RpD+U84XEOZXmXcYw@mail.gmail.com>
	<CANEZrP2riPBViBqAOWfY9uSQwoEm=gN108JU988XvouMbai1Ug@mail.gmail.com>
Message-ID: <CABsx9T023aw11cq6iiZhT3cgfNYJXr=qG40Fzc7rYZOimJ=62w@mail.gmail.com>

I've had some push-back on the names of the proposed messages-- e.g.
"Invoice" in the accounting world means "I've already given you a
product or service, here is what you owe, payment terms, what forms of
payment are accepted, etc."

I think there might also be confusion about why we're defining our own
Invoice when there are at least three or four other existing standard
for electronic invoices.

So unless there is strong objection I'm going to change the names of
the messages:

Invoice -->  PaymentRequest
Payment : ok as-is
Receipt --> PaymentACK  (payment acknowledgement)

On Tue, Dec 4, 2012 at 12:06 PM, Mike Hearn <mike at plan99.net> wrote:
> Does it make sense to have this spec not include the details of
> bootstrapping? It's not complicated ....

BIP 0001 says:  "If in doubt, split your BIP into several well-focussed ones."

I think it makes sense to keep the URI extension separate from the
binary message format.

> We should define a simple mechanism for extending the protocol now...
>
> message Invoice {
>   extensions 1000 to max;
> }

Ok.

-- 
--
Gavin Andresen



From andreas at petersson.at  Thu Dec  6 06:31:54 2012
From: andreas at petersson.at (Andreas Petersson)
Date: Thu, 06 Dec 2012 07:31:54 +0100
Subject: [Bitcoin-development] Payment Protocol Proposal:
	Invoices/Payments/Receipts
In-Reply-To: <CABsx9T023aw11cq6iiZhT3cgfNYJXr=qG40Fzc7rYZOimJ=62w@mail.gmail.com>
References: <CABsx9T0PsGLEAWRCjEDDFWQrb+DnJWQZ7mFLaZewAEX6vD1eHw@mail.gmail.com>
	<20121128233619.GA6368@giles.gnomon.org.uk>
	<CABsx9T09FYf2RTaMpmujt3qwTFc2JgnREH_7Hyk2mnCgb3CvAw@mail.gmail.com>
	<20121129170713.GD6368@giles.gnomon.org.uk>
	<CANEZrP233CytLs3PWBQ1TyuBTMv4sLGJkEMeGWYq5xRi+iLKew@mail.gmail.com>
	<20121129185330.GE6368@giles.gnomon.org.uk>
	<CABsx9T35qD_xJEVw002eAhJ1kr6x5aMU7RpD+U84XEOZXmXcYw@mail.gmail.com>
	<CANEZrP2riPBViBqAOWfY9uSQwoEm=gN108JU988XvouMbai1Ug@mail.gmail.com>
	<CABsx9T023aw11cq6iiZhT3cgfNYJXr=qG40Fzc7rYZOimJ=62w@mail.gmail.com>
Message-ID: <50C03BDA.6010600@petersson.at>

During/before the Payment Request there should be a method to exchange 
the public keys to be able to generate a common multisig address.
Should this be handled in a different protocol, or be included in this 
spec?
Or is there a method for the customer to verify that the specified BIP16 
Output contains his address and the one from an escrow service?

--
Andreas



From mike at plan99.net  Thu Dec  6 08:53:51 2012
From: mike at plan99.net (Mike Hearn)
Date: Thu, 6 Dec 2012 09:53:51 +0100
Subject: [Bitcoin-development] Payment Protocol Proposal:
	Invoices/Payments/Receipts
In-Reply-To: <50C03BDA.6010600@petersson.at>
References: <CABsx9T0PsGLEAWRCjEDDFWQrb+DnJWQZ7mFLaZewAEX6vD1eHw@mail.gmail.com>
	<20121128233619.GA6368@giles.gnomon.org.uk>
	<CABsx9T09FYf2RTaMpmujt3qwTFc2JgnREH_7Hyk2mnCgb3CvAw@mail.gmail.com>
	<20121129170713.GD6368@giles.gnomon.org.uk>
	<CANEZrP233CytLs3PWBQ1TyuBTMv4sLGJkEMeGWYq5xRi+iLKew@mail.gmail.com>
	<20121129185330.GE6368@giles.gnomon.org.uk>
	<CABsx9T35qD_xJEVw002eAhJ1kr6x5aMU7RpD+U84XEOZXmXcYw@mail.gmail.com>
	<CANEZrP2riPBViBqAOWfY9uSQwoEm=gN108JU988XvouMbai1Ug@mail.gmail.com>
	<CABsx9T023aw11cq6iiZhT3cgfNYJXr=qG40Fzc7rYZOimJ=62w@mail.gmail.com>
	<50C03BDA.6010600@petersson.at>
Message-ID: <CANEZrP1iS4_MFi2=3Qa4_rSGXe5EK8B0wWy43hXJOeKp-SfpPg@mail.gmail.com>

Escrow/multisig is complicated enough to wait for another day. But
certainly having a payment protocol is an important step towards it
On 6 Dec 2012 07:32, "Andreas Petersson" <andreas at petersson.at> wrote:

> During/before the Payment Request there should be a method to exchange
> the public keys to be able to generate a common multisig address.
> Should this be handled in a different protocol, or be included in this
> spec?
> Or is there a method for the customer to verify that the specified BIP16
> Output contains his address and the one from an escrow service?
>
> --
> Andreas
>
>
> ------------------------------------------------------------------------------
> LogMeIn Rescue: Anywhere, Anytime Remote support for IT. Free Trial
> Remotely access PCs and mobile devices and provide instant support
> Improve your efficiency, and focus on delivering more value-add services
> Discover what IT Professionals Know. Rescue delivers
> http://p.sf.net/sfu/logmein_12329d2d
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20121206/b9f464f6/attachment.html>

From gavinandresen at gmail.com  Thu Dec  6 16:56:49 2012
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Thu, 6 Dec 2012 11:56:49 -0500
Subject: [Bitcoin-development] Payment Protocol Proposal:
	Invoices/Payments/Receipts
In-Reply-To: <CANEZrP1iS4_MFi2=3Qa4_rSGXe5EK8B0wWy43hXJOeKp-SfpPg@mail.gmail.com>
References: <CABsx9T0PsGLEAWRCjEDDFWQrb+DnJWQZ7mFLaZewAEX6vD1eHw@mail.gmail.com>
	<20121128233619.GA6368@giles.gnomon.org.uk>
	<CABsx9T09FYf2RTaMpmujt3qwTFc2JgnREH_7Hyk2mnCgb3CvAw@mail.gmail.com>
	<20121129170713.GD6368@giles.gnomon.org.uk>
	<CANEZrP233CytLs3PWBQ1TyuBTMv4sLGJkEMeGWYq5xRi+iLKew@mail.gmail.com>
	<20121129185330.GE6368@giles.gnomon.org.uk>
	<CABsx9T35qD_xJEVw002eAhJ1kr6x5aMU7RpD+U84XEOZXmXcYw@mail.gmail.com>
	<CANEZrP2riPBViBqAOWfY9uSQwoEm=gN108JU988XvouMbai1Ug@mail.gmail.com>
	<CABsx9T023aw11cq6iiZhT3cgfNYJXr=qG40Fzc7rYZOimJ=62w@mail.gmail.com>
	<50C03BDA.6010600@petersson.at>
	<CANEZrP1iS4_MFi2=3Qa4_rSGXe5EK8B0wWy43hXJOeKp-SfpPg@mail.gmail.com>
Message-ID: <CABsx9T2UBQXzDPj0zHio+9i0uKNqiPYwL=kYgWKSirXRvckQ4g@mail.gmail.com>

Spec updated yet again:
  https://gist.github.com/4120476

Renamed to PaymentRequest/PaymentACK.

Added a 'network' field ("main" or "test") to PaymentRequest so testnet and
main network (and alterna-chain) payment requests don't get confused.

Updated description of PaymentRequest.outputs:

outputs: one or more outputs where Bitcoins are to be sent. If the sum of
outputs.amount is zero, the customer will be asked how much to pay, and the
bitcoin client may choose any or all of the Outputs (if there are more than
one) for payment. If the sum of outputs.amount is non-zero, then the
customer will be asked to pay the sum, and the payment shall be split among
the Outputs with non-zero amounts (if there are more than one; Outputs with
zero amounts shall be ignored).
-------------

RE: escrow/multisig:

Setting up a multi-person escrow will, I think, need it's own set of
messages. I think we should leave that for a future spec.

Thumbnail sketch:  escrow service or participant sends around an
EscrowProposal, gets EscrowProposalACK's with public keys to use, then
sends all participants an EscrowEstablished message with the final multisig
script or address.  Escrow gets funded by any/all of the participants, and
then gets spent using the SignedPaymentRequest/Payment/PaymentACK
protocol-- participants will pass around a SignedPaymentRequest and a
partially-signed Payment message for all to approve.

When I say "pass around" I'm not thinking of users copying and pasting,
that would be a terrible user experience; all of that communication needs
to happen automatically behind the scenes. Lets tackle that after we've got
the simpler customer-pays-merchant flow working nicely
(funded-escrow-pays-merchant is a subset of that, anyway).

-- 
--
Gavin Andresen
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20121206/3313a024/attachment.html>

From mike at plan99.net  Thu Dec  6 17:55:46 2012
From: mike at plan99.net (Mike Hearn)
Date: Thu, 6 Dec 2012 18:55:46 +0100
Subject: [Bitcoin-development] Payment Protocol Proposal:
	Invoices/Payments/Receipts
In-Reply-To: <CABsx9T2UBQXzDPj0zHio+9i0uKNqiPYwL=kYgWKSirXRvckQ4g@mail.gmail.com>
References: <CABsx9T0PsGLEAWRCjEDDFWQrb+DnJWQZ7mFLaZewAEX6vD1eHw@mail.gmail.com>
	<20121128233619.GA6368@giles.gnomon.org.uk>
	<CABsx9T09FYf2RTaMpmujt3qwTFc2JgnREH_7Hyk2mnCgb3CvAw@mail.gmail.com>
	<20121129170713.GD6368@giles.gnomon.org.uk>
	<CANEZrP233CytLs3PWBQ1TyuBTMv4sLGJkEMeGWYq5xRi+iLKew@mail.gmail.com>
	<20121129185330.GE6368@giles.gnomon.org.uk>
	<CABsx9T35qD_xJEVw002eAhJ1kr6x5aMU7RpD+U84XEOZXmXcYw@mail.gmail.com>
	<CANEZrP2riPBViBqAOWfY9uSQwoEm=gN108JU988XvouMbai1Ug@mail.gmail.com>
	<CABsx9T023aw11cq6iiZhT3cgfNYJXr=qG40Fzc7rYZOimJ=62w@mail.gmail.com>
	<50C03BDA.6010600@petersson.at>
	<CANEZrP1iS4_MFi2=3Qa4_rSGXe5EK8B0wWy43hXJOeKp-SfpPg@mail.gmail.com>
	<CABsx9T2UBQXzDPj0zHio+9i0uKNqiPYwL=kYgWKSirXRvckQ4g@mail.gmail.com>
Message-ID: <CANEZrP2VLsh0mi=saQ0ZOnjVijUHoqEMxTG3LHcaCb2Ua-f-gQ@mail.gmail.com>

Re: the newest spec. Rather than make the signature over the
"concatenation of", why not just make it a signature over the
serialized protobuf minus the signature field (as I did in my demo
code). Otherwise it seems like we'd need more code than really
necessary. We can state explicitly tags must be ordered if you want,
even though all implementations should do that already.

> Thumbnail sketch:  escrow service or participant sends around an
> EscrowProposal, gets EscrowProposalACK's with public keys to use, then sends
> all participants an EscrowEstablished message with the final multisig script
> or address.

Yeah, that sounds reasonable. Not that we should really design it now,
but let's use the term "mediation" rather than "escrow", which has
connotations of depositing funds with the escrow service.

I think it's best to see the existing payment messages as structures
that'll get filled out with more features over time. So rather than
have a separate EscrowProposal message, you would integrate it with
payment requests. Older clients that don't understand mediation would
just ignore the extra data they don't recognize.

message PaymentRequest {
   ....

  // One per mediator acceptable to the seller.
  repeated MediationProposal mediation_data = 10;
}

message MediationProposal {
  required SignedMediatorIdentity identity = 2;

  // Opaque bytes that the mediator can be asked to turn into a human
readable description
  // of how disputes will be mediated. The merchant sets this to
describe whatever policy it
  // is willing to go along with, so policies may be arbitrarily complicated.
  required bytes policy = 3;
}

message SignedMediatorIdentity {
  required MediatorIdentity identity = 1;
  // If the identity data is signed ...
  optional string pki_type = 2;
  optional bytes pki_data = 3;
  optional bytes pki_signature = 4;
}

message MediatorIdentity {
  // Name of the mediator to be displayed to the user.
  required string friendly_name = 1;
  // PNG image that can be used to represent the mediator to the user.
  optional bytes logo = 2;
  // Some text shown to the user under the name explaining the
mediators policies, why they should be chosen, etc.
  optional string blurb = 3;

  // An HTTP URL where a mediator can be reached to do things like
prove ownership of pubkeys, initiate the protocols, etc.
  required string contact_url = 4;
}

... etc ....

So the user experience would be that when a payment request is received:

- older clients ignore the mediation_data field and do a direct
payment as normal
- newer clients ask the user to pick a mediator (if they want to) and
if mediation is requested, the PaymentRequest is then discarded and
the next step of the mediation protocol begins.

The old request has to be discarded because the outputs would have
been written on the assumption of no mediation being in use (for
backwards compatibility).

Anyway, though I'm awfully guilty, let's not get off track. Just that
this is how I imagined new payment features being done - as new
extensions to the payment protocol, which would be a living document
amended by BIPs.



From etotheipi at gmail.com  Thu Dec  6 18:13:00 2012
From: etotheipi at gmail.com (Alan Reiner)
Date: Thu, 6 Dec 2012 13:13:00 -0500
Subject: [Bitcoin-development] Payment Protocol Proposal:
	Invoices/Payments/Receipts
In-Reply-To: <CABsx9T2UBQXzDPj0zHio+9i0uKNqiPYwL=kYgWKSirXRvckQ4g@mail.gmail.com>
References: <CABsx9T0PsGLEAWRCjEDDFWQrb+DnJWQZ7mFLaZewAEX6vD1eHw@mail.gmail.com>
	<20121128233619.GA6368@giles.gnomon.org.uk>
	<CABsx9T09FYf2RTaMpmujt3qwTFc2JgnREH_7Hyk2mnCgb3CvAw@mail.gmail.com>
	<20121129170713.GD6368@giles.gnomon.org.uk>
	<CANEZrP233CytLs3PWBQ1TyuBTMv4sLGJkEMeGWYq5xRi+iLKew@mail.gmail.com>
	<20121129185330.GE6368@giles.gnomon.org.uk>
	<CABsx9T35qD_xJEVw002eAhJ1kr6x5aMU7RpD+U84XEOZXmXcYw@mail.gmail.com>
	<CANEZrP2riPBViBqAOWfY9uSQwoEm=gN108JU988XvouMbai1Ug@mail.gmail.com>
	<CABsx9T023aw11cq6iiZhT3cgfNYJXr=qG40Fzc7rYZOimJ=62w@mail.gmail.com>
	<50C03BDA.6010600@petersson.at>
	<CANEZrP1iS4_MFi2=3Qa4_rSGXe5EK8B0wWy43hXJOeKp-SfpPg@mail.gmail.com>
	<CABsx9T2UBQXzDPj0zHio+9i0uKNqiPYwL=kYgWKSirXRvckQ4g@mail.gmail.com>
Message-ID: <CALf2ePx5jS__L_2bTtU7duAbDfeinEapzARuGEJ-XCbkK=TxNA@mail.gmail.com>

On Thu, Dec 6, 2012 at 11:56 AM, Gavin Andresen <gavinandresen at gmail.com>wrote:

> When I say "pass around" I'm not thinking of users copying and pasting,
> that would be a terrible user experience; all of that communication needs
> to happen automatically behind the scenes. Lets tackle that after we've got
> the simpler customer-pays-merchant flow working nicely
> (funded-escrow-pays-merchant is a subset of that, anyway).



I think that the "pass around" method needs to happen in addition to the
methods of transparent protocols that occur behind the scenes.  For one,
there's a lot of CONOPs that need to be worked out by getting knowledgeable
people using it, and providing feedback about how it could/should/will be
used and how it could be improved.  The pass-around method is simpler to
implement and still usable by the types of users that will be using it in
the beginning -- experts.  Also, I see that for very large, important
multi-sig tx/contracts/escrow, the "manual" method might be preferred --
much the same way many people prefer manual-transmission cars even though
automatics are "easier" -- some people/organizations will want the control.


I'm all for protocols that enable higher-level access to this
functionality, I'm just saying there should be lower-level access, too.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20121206/4dbf0af1/attachment.html>

From gavinandresen at gmail.com  Thu Dec  6 19:13:06 2012
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Thu, 6 Dec 2012 14:13:06 -0500
Subject: [Bitcoin-development] Payment Protocol Proposal:
	Invoices/Payments/Receipts
In-Reply-To: <CANEZrP2VLsh0mi=saQ0ZOnjVijUHoqEMxTG3LHcaCb2Ua-f-gQ@mail.gmail.com>
References: <CABsx9T0PsGLEAWRCjEDDFWQrb+DnJWQZ7mFLaZewAEX6vD1eHw@mail.gmail.com>
	<20121128233619.GA6368@giles.gnomon.org.uk>
	<CABsx9T09FYf2RTaMpmujt3qwTFc2JgnREH_7Hyk2mnCgb3CvAw@mail.gmail.com>
	<20121129170713.GD6368@giles.gnomon.org.uk>
	<CANEZrP233CytLs3PWBQ1TyuBTMv4sLGJkEMeGWYq5xRi+iLKew@mail.gmail.com>
	<20121129185330.GE6368@giles.gnomon.org.uk>
	<CABsx9T35qD_xJEVw002eAhJ1kr6x5aMU7RpD+U84XEOZXmXcYw@mail.gmail.com>
	<CANEZrP2riPBViBqAOWfY9uSQwoEm=gN108JU988XvouMbai1Ug@mail.gmail.com>
	<CABsx9T023aw11cq6iiZhT3cgfNYJXr=qG40Fzc7rYZOimJ=62w@mail.gmail.com>
	<50C03BDA.6010600@petersson.at>
	<CANEZrP1iS4_MFi2=3Qa4_rSGXe5EK8B0wWy43hXJOeKp-SfpPg@mail.gmail.com>
	<CABsx9T2UBQXzDPj0zHio+9i0uKNqiPYwL=kYgWKSirXRvckQ4g@mail.gmail.com>
	<CANEZrP2VLsh0mi=saQ0ZOnjVijUHoqEMxTG3LHcaCb2Ua-f-gQ@mail.gmail.com>
Message-ID: <CABsx9T23Lpju6Pz87G1uuQ=gjdKhNh=rMCmmv9=vj2ikONwONQ@mail.gmail.com>

On Thu, Dec 6, 2012 at 12:55 PM, Mike Hearn <mike at plan99.net> wrote:

> Re: the newest spec. Rather than make the signature over the
> "concatenation of", why not just make it a signature over the
> serialized protobuf minus the signature field (as I did in my demo
> code). Otherwise it seems like we'd need more code than really
> necessary. We can state explicitly tags must be ordered if you want,
> even though all implementations should do that already.


OK. I want to keep the signature field required, though, so how about:

signature: digital signature over a protocol buffer serialized variation of
the SignedPaymentRequest message where signature is a zero-byte array and
fields are serialized in numerical order (all current protocol buffer
implementations serialize fields in numerical order), using the public key
in pki_data.

-- 
--
Gavin Andresen
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20121206/bc7ff765/attachment.html>

From mike at plan99.net  Fri Dec  7 10:45:02 2012
From: mike at plan99.net (Mike Hearn)
Date: Fri, 7 Dec 2012 11:45:02 +0100
Subject: [Bitcoin-development] Payment Protocol Proposal:
	Invoices/Payments/Receipts
In-Reply-To: <CABsx9T23Lpju6Pz87G1uuQ=gjdKhNh=rMCmmv9=vj2ikONwONQ@mail.gmail.com>
References: <CABsx9T0PsGLEAWRCjEDDFWQrb+DnJWQZ7mFLaZewAEX6vD1eHw@mail.gmail.com>
	<20121128233619.GA6368@giles.gnomon.org.uk>
	<CABsx9T09FYf2RTaMpmujt3qwTFc2JgnREH_7Hyk2mnCgb3CvAw@mail.gmail.com>
	<20121129170713.GD6368@giles.gnomon.org.uk>
	<CANEZrP233CytLs3PWBQ1TyuBTMv4sLGJkEMeGWYq5xRi+iLKew@mail.gmail.com>
	<20121129185330.GE6368@giles.gnomon.org.uk>
	<CABsx9T35qD_xJEVw002eAhJ1kr6x5aMU7RpD+U84XEOZXmXcYw@mail.gmail.com>
	<CANEZrP2riPBViBqAOWfY9uSQwoEm=gN108JU988XvouMbai1Ug@mail.gmail.com>
	<CABsx9T023aw11cq6iiZhT3cgfNYJXr=qG40Fzc7rYZOimJ=62w@mail.gmail.com>
	<50C03BDA.6010600@petersson.at>
	<CANEZrP1iS4_MFi2=3Qa4_rSGXe5EK8B0wWy43hXJOeKp-SfpPg@mail.gmail.com>
	<CABsx9T2UBQXzDPj0zHio+9i0uKNqiPYwL=kYgWKSirXRvckQ4g@mail.gmail.com>
	<CANEZrP2VLsh0mi=saQ0ZOnjVijUHoqEMxTG3LHcaCb2Ua-f-gQ@mail.gmail.com>
	<CABsx9T23Lpju6Pz87G1uuQ=gjdKhNh=rMCmmv9=vj2ikONwONQ@mail.gmail.com>
Message-ID: <CANEZrP1P-SW-SatU8hFbAM6rw1Gbvau9_8HB=yvS7V1j36VVxA@mail.gmail.com>

> OK. I want to keep the signature field required, though, so how about:
>
> signature: digital signature over a protocol buffer serialized variation of
> the SignedPaymentRequest message where signature is a zero-byte array and
> fields are serialized in numerical order (all current protocol buffer
> implementations serialize fields in numerical order), using the public key
> in pki_data.

Looks good to me.



From mike at plan99.net  Fri Dec  7 11:01:36 2012
From: mike at plan99.net (Mike Hearn)
Date: Fri, 7 Dec 2012 12:01:36 +0100
Subject: [Bitcoin-development] Payment Protocol Proposal:
	Invoices/Payments/Receipts
In-Reply-To: <CANEZrP1P-SW-SatU8hFbAM6rw1Gbvau9_8HB=yvS7V1j36VVxA@mail.gmail.com>
References: <CABsx9T0PsGLEAWRCjEDDFWQrb+DnJWQZ7mFLaZewAEX6vD1eHw@mail.gmail.com>
	<20121128233619.GA6368@giles.gnomon.org.uk>
	<CABsx9T09FYf2RTaMpmujt3qwTFc2JgnREH_7Hyk2mnCgb3CvAw@mail.gmail.com>
	<20121129170713.GD6368@giles.gnomon.org.uk>
	<CANEZrP233CytLs3PWBQ1TyuBTMv4sLGJkEMeGWYq5xRi+iLKew@mail.gmail.com>
	<20121129185330.GE6368@giles.gnomon.org.uk>
	<CABsx9T35qD_xJEVw002eAhJ1kr6x5aMU7RpD+U84XEOZXmXcYw@mail.gmail.com>
	<CANEZrP2riPBViBqAOWfY9uSQwoEm=gN108JU988XvouMbai1Ug@mail.gmail.com>
	<CABsx9T023aw11cq6iiZhT3cgfNYJXr=qG40Fzc7rYZOimJ=62w@mail.gmail.com>
	<50C03BDA.6010600@petersson.at>
	<CANEZrP1iS4_MFi2=3Qa4_rSGXe5EK8B0wWy43hXJOeKp-SfpPg@mail.gmail.com>
	<CABsx9T2UBQXzDPj0zHio+9i0uKNqiPYwL=kYgWKSirXRvckQ4g@mail.gmail.com>
	<CANEZrP2VLsh0mi=saQ0ZOnjVijUHoqEMxTG3LHcaCb2Ua-f-gQ@mail.gmail.com>
	<CABsx9T23Lpju6Pz87G1uuQ=gjdKhNh=rMCmmv9=vj2ikONwONQ@mail.gmail.com>
	<CANEZrP1P-SW-SatU8hFbAM6rw1Gbvau9_8HB=yvS7V1j36VVxA@mail.gmail.com>
Message-ID: <CANEZrP1WRT21KZwFGAkhbAUNbNKX+xs-d3ZfEM52wYBa=4hWXw@mail.gmail.com>

Yet more comments (I guess at some point we need to stick a fork in it
- or at least move on to implementing a prototype version).

Maybe don't require the payment URI to be HTTPS. If you want to pay a
Tor hidden service then HTTPS just adds unnecessary complexity. Just
recommend to merchants that they use an encrypted connection and leave
it at that.

Though it's not strictly necessary, it'd be nice to have defined
behavior for if you want to pay more than the requested amount, for a
tip. Perhaps rather than "zero value outputs will be ignored" say, "if
some outputs have value and others don't, the user will be given the
option of overpaying and the extra money will be split evenly between
the zero valued outputs". That way a waitress can have the phone add a
zero-valued output to her own wallet and that would prompt the wallet
software to display some convenient UI for adding on 10% or whatever.

receiptURI -> receipt_url ? technically it has to be resolvable so
"uri" isn't quite right.

"Display the proposed Outputs in as human-friendly a form as possible"
.... ??? Surely you'd just display the total amount requested? I don't
think it ever makes sense to try and display outputs to the user
directly.

Re: the UI TODO - agreed but let's take it out of the BIP and maybe
make it an alternative document. Or just replace it with a
recommendation that "the user interface should be designed to ensure
users understand the difference between an unsigned and signed payment
request, for best practices see <here>"

serialized_paymentrequest -> serialized_payment_request? Otherwise
languages that use CamelCase will look odd ....
setSerializedPaymentrequest()

The question of root CAs still needs resolution. I stick with my
recommendation to support all CAs that browsers support. Obviously,
it's better for a merchant to obtain an EV cert than a domain
verification cert - the UI can reflect the higher level of
verification.

I doubt there's a need to specify a max number of certs in a chain.
But if you want to, go for something high, like 256. There's no point
in trying to put DoS mitigations into something like this, for the
same reason HTML doesn't impose a maximum page size. It's in the
message builders interest to ensure it gets read by all users.
Crashing their clients doesn't achieve anything as long as the crash
isn't exploitable.




On Fri, Dec 7, 2012 at 11:45 AM, Mike Hearn <mike at plan99.net> wrote:
>> OK. I want to keep the signature field required, though, so how about:
>>
>> signature: digital signature over a protocol buffer serialized variation of
>> the SignedPaymentRequest message where signature is a zero-byte array and
>> fields are serialized in numerical order (all current protocol buffer
>> implementations serialize fields in numerical order), using the public key
>> in pki_data.
>
> Looks good to me.



From gavinandresen at gmail.com  Fri Dec  7 16:19:12 2012
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Fri, 7 Dec 2012 11:19:12 -0500
Subject: [Bitcoin-development] Payment Protocol Proposal:
	Invoices/Payments/Receipts
In-Reply-To: <CANEZrP1WRT21KZwFGAkhbAUNbNKX+xs-d3ZfEM52wYBa=4hWXw@mail.gmail.com>
References: <CABsx9T0PsGLEAWRCjEDDFWQrb+DnJWQZ7mFLaZewAEX6vD1eHw@mail.gmail.com>
	<20121128233619.GA6368@giles.gnomon.org.uk>
	<CABsx9T09FYf2RTaMpmujt3qwTFc2JgnREH_7Hyk2mnCgb3CvAw@mail.gmail.com>
	<20121129170713.GD6368@giles.gnomon.org.uk>
	<CANEZrP233CytLs3PWBQ1TyuBTMv4sLGJkEMeGWYq5xRi+iLKew@mail.gmail.com>
	<20121129185330.GE6368@giles.gnomon.org.uk>
	<CABsx9T35qD_xJEVw002eAhJ1kr6x5aMU7RpD+U84XEOZXmXcYw@mail.gmail.com>
	<CANEZrP2riPBViBqAOWfY9uSQwoEm=gN108JU988XvouMbai1Ug@mail.gmail.com>
	<CABsx9T023aw11cq6iiZhT3cgfNYJXr=qG40Fzc7rYZOimJ=62w@mail.gmail.com>
	<50C03BDA.6010600@petersson.at>
	<CANEZrP1iS4_MFi2=3Qa4_rSGXe5EK8B0wWy43hXJOeKp-SfpPg@mail.gmail.com>
	<CABsx9T2UBQXzDPj0zHio+9i0uKNqiPYwL=kYgWKSirXRvckQ4g@mail.gmail.com>
	<CANEZrP2VLsh0mi=saQ0ZOnjVijUHoqEMxTG3LHcaCb2Ua-f-gQ@mail.gmail.com>
	<CABsx9T23Lpju6Pz87G1uuQ=gjdKhNh=rMCmmv9=vj2ikONwONQ@mail.gmail.com>
	<CANEZrP1P-SW-SatU8hFbAM6rw1Gbvau9_8HB=yvS7V1j36VVxA@mail.gmail.com>
	<CANEZrP1WRT21KZwFGAkhbAUNbNKX+xs-d3ZfEM52wYBa=4hWXw@mail.gmail.com>
Message-ID: <CABsx9T3MkK-aWKv34G4GwR-HafYiz1t5sK4xsvX4jP6_xq8QPA@mail.gmail.com>

On Fri, Dec 7, 2012 at 6:01 AM, Mike Hearn <mike at plan99.net> wrote:

> Yet more comments (I guess at some point we need to stick a fork in it
> - or at least move on to implementing a prototype version).
>

Yes, my next step is prototyping.

Note that this is not a BIP yet:  I want to have a working implementation
before making this an Official BIP.


> Maybe don't require the payment URI to be HTTPS.


Changed:
   receipt_url: Secure (usually https) location where...

Though it's not strictly necessary, it'd be nice to have defined
> behavior for if you want to pay more than the requested amount, for a
> tip.


yeah... I had similar thoughts on what to do if some Outputs specify an
amount and others don't. I'm still waffling on whether or not I like
allowing repeated Outputs; a single Output would make the spec a fair bit
simpler, and if a merchant wants to split up a payment for some reason they
could just generate another transaction.

I want to move on to actually implementing this before creating complicated
rules. Maybe the best way to tip a waitress is to get two separate
PaymentRequests, one for the restaurant and one that goes directly to the
waitress (depends on whether or not the restaurant needs or wants to know
how much their employees are getting tipped, I suppose).  Maybe it would be
best to have a separate "gratuity" Output in the PaymentRequest. That's the
kind of detail I think doesn't need to be worked out right now, I'd rather
restaurants tell us what they need/want.


> "Display the proposed Outputs in as human-friendly a form as possible"
> .... ??? Surely you'd just display the total amount requested? I don't
> think it ever makes sense to try and display outputs to the user
> directly.
>

This is the case of getting an UNSIGNED payment request; I've changed the
wording a little to make that more clear.

If a bitcoin client accepts unsigned payment requests (a couple of people
have asked if that would be possible so I think that is desired), then it
doesn't have the payer's identity-- all it has is the Outputs that will be
paid.



> Re: the UI TODO - agreed but let's take it out of the BIP...


Not a BIP yet....

serialized_paymentrequest -> serialized_payment_request?


Done.


> The question of root CAs still needs resolution.  I stick with
> my recommendation to support all CAs that browsers support.


I still like the idea of only including the root CAs who have jumped
through the hoops needed to get the "allowed to issue EV certs" blessing.
 I'm not suggesting that all bitcoin merchants must get EV certs, but I am
suggesting that they must get a certificate from one of the most reputable
certificate authorities, and the ability to issue EV certificates is, I
think, a good proxy for that.

But, again:  Not a BIP yet.  Lets get something implemented and then hammer
out details (implementing always turns up edge cases you forgot when
spec'ing).


-- 
--
Gavin Andresen
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20121207/f5ce65e5/attachment.html>

From mike at plan99.net  Fri Dec  7 16:27:36 2012
From: mike at plan99.net (Mike Hearn)
Date: Fri, 7 Dec 2012 17:27:36 +0100
Subject: [Bitcoin-development] Payment Protocol Proposal:
	Invoices/Payments/Receipts
In-Reply-To: <CABsx9T3MkK-aWKv34G4GwR-HafYiz1t5sK4xsvX4jP6_xq8QPA@mail.gmail.com>
References: <CABsx9T0PsGLEAWRCjEDDFWQrb+DnJWQZ7mFLaZewAEX6vD1eHw@mail.gmail.com>
	<20121128233619.GA6368@giles.gnomon.org.uk>
	<CABsx9T09FYf2RTaMpmujt3qwTFc2JgnREH_7Hyk2mnCgb3CvAw@mail.gmail.com>
	<20121129170713.GD6368@giles.gnomon.org.uk>
	<CANEZrP233CytLs3PWBQ1TyuBTMv4sLGJkEMeGWYq5xRi+iLKew@mail.gmail.com>
	<20121129185330.GE6368@giles.gnomon.org.uk>
	<CABsx9T35qD_xJEVw002eAhJ1kr6x5aMU7RpD+U84XEOZXmXcYw@mail.gmail.com>
	<CANEZrP2riPBViBqAOWfY9uSQwoEm=gN108JU988XvouMbai1Ug@mail.gmail.com>
	<CABsx9T023aw11cq6iiZhT3cgfNYJXr=qG40Fzc7rYZOimJ=62w@mail.gmail.com>
	<50C03BDA.6010600@petersson.at>
	<CANEZrP1iS4_MFi2=3Qa4_rSGXe5EK8B0wWy43hXJOeKp-SfpPg@mail.gmail.com>
	<CABsx9T2UBQXzDPj0zHio+9i0uKNqiPYwL=kYgWKSirXRvckQ4g@mail.gmail.com>
	<CANEZrP2VLsh0mi=saQ0ZOnjVijUHoqEMxTG3LHcaCb2Ua-f-gQ@mail.gmail.com>
	<CABsx9T23Lpju6Pz87G1uuQ=gjdKhNh=rMCmmv9=vj2ikONwONQ@mail.gmail.com>
	<CANEZrP1P-SW-SatU8hFbAM6rw1Gbvau9_8HB=yvS7V1j36VVxA@mail.gmail.com>
	<CANEZrP1WRT21KZwFGAkhbAUNbNKX+xs-d3ZfEM52wYBa=4hWXw@mail.gmail.com>
	<CABsx9T3MkK-aWKv34G4GwR-HafYiz1t5sK4xsvX4jP6_xq8QPA@mail.gmail.com>
Message-ID: <CANEZrP3j=YpHtuOMQvhnJ5dgrKRp4rYyRGnQTkfUUJNdLhM1+g@mail.gmail.com>

> yeah... I had similar thoughts on what to do if some Outputs specify an
> amount and others don't. I'm still waffling on whether or not I like
> allowing repeated Outputs; a single Output would make the spec a fair bit
> simpler

Yes, but at the cost of privacy. Generators of payment requests always
have the option of just adding a single output and being done with it.
But in future they'll probably want to keep their income in unlinkable
chunks of a size that's up to them, and multi-outputs are needed for
this (the idea being, the users wallet tries to keep a
close-as-possible match between the requested outputs and their own).

OK, let's punt on tipping for now.

> If a bitcoin client accepts unsigned payment requests (a couple of people
> have asked if that would be possible so I think that is desired), then it
> doesn't have the payer's identity-- all it has is the Outputs that will be
> paid.

I see. If I were to implement a wallet I'd just display nothing
(except the size of the request). Showing an address doesn't really
help the user in any way.

> I still like the idea of only including the root CAs who have jumped through
> the hoops needed to get the "allowed to issue EV certs" blessing.

The hoops only actually apply for EV certs though, they aren't
required to do that verification for DV certs.

The main reason to use the browser root CAs is that merchants are
guaranteed to be able to re-use their existing certs. Otherwise they
might have to buy new ones, which would be annoying.



From jgarzik at exmulti.com  Wed Dec 12 21:37:28 2012
From: jgarzik at exmulti.com (Jeff Garzik)
Date: Wed, 12 Dec 2012 16:37:28 -0500
Subject: [Bitcoin-development] RFC: Updating dust output definition,
	and default fees
Message-ID: <CA+8xBpdDmxgW=fAN5QxrpVJS8xUxw_5-Zv4z+4qNcLpLQ8d9=w@mail.gmail.com>

URL: https://github.com/bitcoin/bitcoin/pull/2100

1) Create COIN_DUST constant, to represent the dust spam limit used.

2) Decrease COIN_DUST to 0.001 BTC

Rationale: With the increase in bitcoin value (US$13.67 as of this
writing), it seems reasonable to reduce the value level of which we
consider "dust spam."

3) Update TX miner and relay fee defaults to 0.001 / 0.0005 BTC respectively

Rationale: Reflects growth of dust spam in unspent transaction output dataset.

Review of impact:
a) Definition of COIN_DUST reduced from 0.01 to 0.001.
b) Miners who mine with this code will require a fee >= 0.001 to
include TX's with outputs <= COIN_DUST
c) Normal clients will require a fee >= 0.0005 to relay TX's with
outputs <= COIN_DUST

-- 
Jeff Garzik
exMULTI, Inc.
jgarzik at exmulti.com



From elombrozo at gmail.com  Wed Dec 12 22:09:38 2012
From: elombrozo at gmail.com (Eric Lombrozo)
Date: Wed, 12 Dec 2012 14:09:38 -0800
Subject: [Bitcoin-development]  Zero-length scripts
Message-ID: <A08D9088-82EE-4F67-B260-8AF5CB1D15A6@gmail.com>

I've noticed a few transactions that have zero-length input and/or output scripts. There's a couple examples in block 0000000000000159a27442ee8b7f9ffad0cd799b003eafe007de9fbb47bd6ce7:

Txs: cdb553214a51ef8d4393b96a185ebbbc2c84b7014e9497fea8aec1ff990dae35, af32bb06f12f2ae5fdb7face7cd272be67c923e86b7a66a76ded02d954c2f94d


Is there ever a legitimate reason to create a transaction with a zero-length script? Should the protocol even allow it?

-Eric Lombrozo

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20121212/405452ae/attachment.html>

From gronager at mac.com  Thu Dec 13 09:00:55 2012
From: gronager at mac.com (gronager at mac.com)
Date: Thu, 13 Dec 2012 10:00:55 +0100
Subject: [Bitcoin-development] Zero-length scripts
In-Reply-To: <A08D9088-82EE-4F67-B260-8AF5CB1D15A6@gmail.com>
References: <A08D9088-82EE-4F67-B260-8AF5CB1D15A6@gmail.com>
Message-ID: <833554E8-0732-46D2-88BE-D8BA98325C4C@mac.com>

Normally I would consider it an error of the parsing script of blockchain (seen that before), however, this seems genuine enough.

the second transaction is the most amusing - it has an output script which is:
OP_HASH256 000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f OP_EQUAL

The hash is the most famous bitcoin hash... - so if you can come up with something that, when hashed with sha256 yields the genesisblock hash you can claim one BTC ;)

It is actually very easy to do (!), however, it is a game only for miners, as non_standard transactions are not relayed between standard clients. So now a miner can have a go creating a transaction redeeming this 1BTC.

Perhaps, Eligius creating that block, might be playing a little christmas game :)

Cheers,

Michael

On 12/12/2012, at 23:09, Eric Lombrozo <elombrozo at gmail.com> wrote:

> I've noticed a few transactions that have zero-length input and/or output scripts. There's a couple examples in block 0000000000000159a27442ee8b7f9ffad0cd799b003eafe007de9fbb47bd6ce7:
> 
> Txs: cdb553214a51ef8d4393b96a185ebbbc2c84b7014e9497fea8aec1ff990dae35, af32bb06f12f2ae5fdb7face7cd272be67c923e86b7a66a76ded02d954c2f94d
> 
> 
> Is there ever a legitimate reason to create a transaction with a zero-length script? Should the protocol even allow it?
> 
> -Eric Lombrozo
> 
> ------------------------------------------------------------------------------
> LogMeIn Rescue: Anywhere, Anytime Remote support for IT. Free Trial
> Remotely access PCs and mobile devices and provide instant support
> Improve your efficiency, and focus on delivering more value-add services
> Discover what IT Professionals Know. Rescue delivers
> http://p.sf.net/sfu/logmein_12329d2d_______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development

Michael Gr?nager
Jens Juels Gade 33
2100 Copenhagen E
DENMARK
Mobile: +45 31 45 14 01
E-mail: gronager at mac.com






From melvincarvalho at gmail.com  Sun Dec 16 21:15:40 2012
From: melvincarvalho at gmail.com (Melvin Carvalho)
Date: Sun, 16 Dec 2012 22:15:40 +0100
Subject: [Bitcoin-development] Payment Protocol Proposal:
	Invoices/Payments/Receipts
In-Reply-To: <CAErK2ChjAm-Zf11YXuBQeTQvahOEJNGiPSZaD-CQ=OU9K6HtZA@mail.gmail.com>
References: <CABsx9T0PsGLEAWRCjEDDFWQrb+DnJWQZ7mFLaZewAEX6vD1eHw@mail.gmail.com>
	<20121128233619.GA6368@giles.gnomon.org.uk>
	<CABsx9T09FYf2RTaMpmujt3qwTFc2JgnREH_7Hyk2mnCgb3CvAw@mail.gmail.com>
	<20121129170713.GD6368@giles.gnomon.org.uk>
	<CANEZrP233CytLs3PWBQ1TyuBTMv4sLGJkEMeGWYq5xRi+iLKew@mail.gmail.com>
	<20121129185330.GE6368@giles.gnomon.org.uk>
	<CABsx9T35qD_xJEVw002eAhJ1kr6x5aMU7RpD+U84XEOZXmXcYw@mail.gmail.com>
	<CAErK2ChjAm-Zf11YXuBQeTQvahOEJNGiPSZaD-CQ=OU9K6HtZA@mail.gmail.com>
Message-ID: <CAKaEYh+OUD4kfxwSNQBCJXmj6Kwb8jy9Au=Mfrqr2sKv7SuHpg@mail.gmail.com>

On 3 December 2012 20:35, Mike Koss <mike at coinlab.com> wrote:

> The thing that bugged me most about the original spec was the sole
> reliance on X.509 - glad to see you've made that optional.  I think many
> people will balk at deferring our identity trust to the existing CA's.  I
> think it's a fine bootstrap method, but I'd really like to see another
> option that allows for out-of-band trust (based on ECDSA, probably).
>
> It would also be really nice to migrate to textual representations of data
> structures as opposed to binary ones.  The most successful internet
> standards are based on text, making them that much more accessible for
> developers to deal with them.   JSON would be my preferred candidate.
>
> Why don't we sign the text representation of a (utf8) JSON, rather than
> some complex encoding standard of JSON?  That way the signatures are simple
> - and you need only retain the original textual representation of a message
> to validate the signature (as well as the decoded version, if you don't
> want to alway re-parse the message when writing programs that use it).
>

Binary formats can be challenging to deal with and convert to other
formats.  The experiences in the PKI world of ASN.1 have not been great, in
terms of interop.  It tends to create islands and silos.  This is probably
one of the reasons why X.509 and GPG are fragmented and why we dont really
have a widely deployed web of trust on the net.  Another reason is simply
lack of developer resources to make tools.  In that respect I think JSON
offers significant advantages, though I am interested in the security
issues raised.


>
> On Sat, Dec 1, 2012 at 11:25 AM, Gavin Andresen <gavinandresen at gmail.com>wrote:
>
>> Spec updated: https://gist.github.com/4120476
>>
>> Changes are:
>>
>> Version numbers:  a couple of people asked privately about adding
>> version numbers to the messages. In general, Protocol Buffers don't
>> need version numbers if later versions add only optional fields.
>>
>> And best-practice is to know what version of something you're
>> expecting BEFORE you start parsing that something.
>>
>> So, if a bitcoin client is getting Invoice messages via email or from
>> a web server, the version will be specified as part of the MIME type;
>> for example:
>>    Content-Type: application/x-bitcoin-invoice; version=1
>> The version= syntax is part of the MIME standard.
>>
>> Following that best-practice of knowing what you're parsing before you
>> parse it, I added an invoice_version field to the SignedInvoice
>> message. It is now:
>>
>> message SignedInvoice {
>>     required bytes pki_data = 1;
>>     required string pki_type = 2 [default = "x509"];
>>     required bytes serialized_invoice = 3;
>>     required uint32 invoice_version = 4 [default = 1];
>>     required bytes signature = 5;
>> }
>>
>>
>> Handling of receiptURI errors:
>>
>> Following discussion here, I changed the spec to say:
>>
>> "Clients may handle errors communicating with the receiptURI server
>> however they like, but should assume that if they cannot communicate
>> at all with the server then the Payment should either be retried later
>> or immediately rejected."
>>
>> and under Receipt added:
>>
>> "The Bitcoin client must be prepared to handle the case of an evil
>> merchant that returns accepted=false but broadcasts the transactions
>> anyway."
>>
>>
>> I also added a TODO "Test Vectors" section with base64-encoded
>> examples of everything.
>>
>> --
>> --
>> Gavin Andresen
>>
>>
>> ------------------------------------------------------------------------------
>> Keep yourself connected to Go Parallel:
>> INSIGHTS What's next for parallel hardware, programming and related areas?
>> Interviews and blogs by thought leaders keep you ahead of the curve.
>> http://goparallel.sourceforge.net
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>
>
>
>
> --
> Mike Koss
> CTO, CoinLab
> (425) 246-7701 (m)
>
> A Bitcoin Primer <http://coinlab.com/a-bitcoin-primer.pdf> - What you
> need to know about Bitcoins.
>
>
>
> ------------------------------------------------------------------------------
> Keep yourself connected to Go Parallel:
> BUILD Helping you discover the best ways to construct your parallel
> projects.
> http://goparallel.sourceforge.net
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20121216/5f8092c5/attachment.html>

From jgarzik at exmulti.com  Mon Dec 17 02:18:54 2012
From: jgarzik at exmulti.com (Jeff Garzik)
Date: Sun, 16 Dec 2012 21:18:54 -0500
Subject: [Bitcoin-development] Payment Protocol Proposal:
	Invoices/Payments/Receipts
In-Reply-To: <CAKaEYh+OUD4kfxwSNQBCJXmj6Kwb8jy9Au=Mfrqr2sKv7SuHpg@mail.gmail.com>
References: <CABsx9T0PsGLEAWRCjEDDFWQrb+DnJWQZ7mFLaZewAEX6vD1eHw@mail.gmail.com>
	<20121128233619.GA6368@giles.gnomon.org.uk>
	<CABsx9T09FYf2RTaMpmujt3qwTFc2JgnREH_7Hyk2mnCgb3CvAw@mail.gmail.com>
	<20121129170713.GD6368@giles.gnomon.org.uk>
	<CANEZrP233CytLs3PWBQ1TyuBTMv4sLGJkEMeGWYq5xRi+iLKew@mail.gmail.com>
	<20121129185330.GE6368@giles.gnomon.org.uk>
	<CABsx9T35qD_xJEVw002eAhJ1kr6x5aMU7RpD+U84XEOZXmXcYw@mail.gmail.com>
	<CAErK2ChjAm-Zf11YXuBQeTQvahOEJNGiPSZaD-CQ=OU9K6HtZA@mail.gmail.com>
	<CAKaEYh+OUD4kfxwSNQBCJXmj6Kwb8jy9Au=Mfrqr2sKv7SuHpg@mail.gmail.com>
Message-ID: <CA+8xBpeya92UR60_ba+xYycjONOOvYUcW4Fe+SNdWwpg7aWEHw@mail.gmail.com>

On Sun, Dec 16, 2012 at 4:15 PM, Melvin Carvalho
<melvincarvalho at gmail.com> wrote:
> On 3 December 2012 20:35, Mike Koss <mike at coinlab.com> wrote:
>> It would also be really nice to migrate to textual representations of data
>> structures as opposed to binary ones.  The most successful internet
>> standards are based on text, making them that much more accessible for
>> developers to deal with them.   JSON would be my preferred candidate.
>>
>> Why don't we sign the text representation of a (utf8) JSON, rather than
>> some complex encoding standard of JSON?  That way the signatures are simple
>> - and you need only retain the original textual representation of a message
>> to validate the signature (as well as the decoded version, if you don't want
>> to alway re-parse the message when writing programs that use it).

> Binary formats can be challenging to deal with and convert to other formats.
> The experiences in the PKI world of ASN.1 have not been great, in terms of
> interop.  It tends to create islands and silos.  This is probably one of the
> reasons why X.509 and GPG are fragmented and why we dont really have a
> widely deployed web of trust on the net.  Another reason is simply lack of
> developer resources to make tools.  In that respect I think JSON offers
> significant advantages, though I am interested in the security issues
> raised.

I thought this had already been covered up-thread?

When creating something that must be hashed and/or compared, the data
structure must be created and reproduced precisely, byte-for-byte.
JSON offers significant -disadvantages- in this regard.  With JSON,
you would therefore require an additional middle layer, between JSON
and application, ensuring that all fields are output in the same
order, all whitespace is not only perfectly preserved -- but reliably
generates identical whitespace output for identical inputs, given two
separate JSON implementations.

-- 
Jeff Garzik
exMULTI, Inc.
jgarzik at exmulti.com



From melvincarvalho at gmail.com  Mon Dec 17 08:24:19 2012
From: melvincarvalho at gmail.com (Melvin Carvalho)
Date: Mon, 17 Dec 2012 09:24:19 +0100
Subject: [Bitcoin-development] Payment Protocol Proposal:
	Invoices/Payments/Receipts
In-Reply-To: <CA+8xBpeya92UR60_ba+xYycjONOOvYUcW4Fe+SNdWwpg7aWEHw@mail.gmail.com>
References: <CABsx9T0PsGLEAWRCjEDDFWQrb+DnJWQZ7mFLaZewAEX6vD1eHw@mail.gmail.com>
	<20121128233619.GA6368@giles.gnomon.org.uk>
	<CABsx9T09FYf2RTaMpmujt3qwTFc2JgnREH_7Hyk2mnCgb3CvAw@mail.gmail.com>
	<20121129170713.GD6368@giles.gnomon.org.uk>
	<CANEZrP233CytLs3PWBQ1TyuBTMv4sLGJkEMeGWYq5xRi+iLKew@mail.gmail.com>
	<20121129185330.GE6368@giles.gnomon.org.uk>
	<CABsx9T35qD_xJEVw002eAhJ1kr6x5aMU7RpD+U84XEOZXmXcYw@mail.gmail.com>
	<CAErK2ChjAm-Zf11YXuBQeTQvahOEJNGiPSZaD-CQ=OU9K6HtZA@mail.gmail.com>
	<CAKaEYh+OUD4kfxwSNQBCJXmj6Kwb8jy9Au=Mfrqr2sKv7SuHpg@mail.gmail.com>
	<CA+8xBpeya92UR60_ba+xYycjONOOvYUcW4Fe+SNdWwpg7aWEHw@mail.gmail.com>
Message-ID: <CAKaEYh+jJn0dPsGn_RnOy3NmWMc0F12Dffx2jYBUA=z+W45fWA@mail.gmail.com>

On 17 December 2012 03:18, Jeff Garzik <jgarzik at exmulti.com> wrote:

> On Sun, Dec 16, 2012 at 4:15 PM, Melvin Carvalho
> <melvincarvalho at gmail.com> wrote:
> > On 3 December 2012 20:35, Mike Koss <mike at coinlab.com> wrote:
> >> It would also be really nice to migrate to textual representations of
> data
> >> structures as opposed to binary ones.  The most successful internet
> >> standards are based on text, making them that much more accessible for
> >> developers to deal with them.   JSON would be my preferred candidate.
> >>
> >> Why don't we sign the text representation of a (utf8) JSON, rather than
> >> some complex encoding standard of JSON?  That way the signatures are
> simple
> >> - and you need only retain the original textual representation of a
> message
> >> to validate the signature (as well as the decoded version, if you don't
> want
> >> to alway re-parse the message when writing programs that use it).
>
> > Binary formats can be challenging to deal with and convert to other
> formats.
> > The experiences in the PKI world of ASN.1 have not been great, in terms
> of
> > interop.  It tends to create islands and silos.  This is probably one of
> the
> > reasons why X.509 and GPG are fragmented and why we dont really have a
> > widely deployed web of trust on the net.  Another reason is simply lack
> of
> > developer resources to make tools.  In that respect I think JSON offers
> > significant advantages, though I am interested in the security issues
> > raised.
>
> I thought this had already been covered up-thread?
>
> When creating something that must be hashed and/or compared, the data
> structure must be created and reproduced precisely, byte-for-byte.
> JSON offers significant -disadvantages- in this regard.  With JSON,
> you would therefore require an additional middle layer, between JSON
> and application, ensuring that all fields are output in the same
> order, all whitespace is not only perfectly preserved -- but reliably
> generates identical whitespace output for identical inputs, given two
> separate JSON implementations.
>

Apologies if I am a bit late to the thread.  I bumped into someone that
suggested I take a look at it.  Will try and catch up!

You raise a good point.

Is there no good canonicalization algorithm / library for JSON?

I think that provided that each JSON object has an identifier,
canonicalization of JSON is not that hard.

Then when you hash or sign the canonical form they can be compared reliably.


>
> --
> Jeff Garzik
> exMULTI, Inc.
> jgarzik at exmulti.com
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20121217/7cc6ab2d/attachment.html>

From mike at plan99.net  Mon Dec 17 09:19:19 2012
From: mike at plan99.net (Mike Hearn)
Date: Mon, 17 Dec 2012 10:19:19 +0100
Subject: [Bitcoin-development] Payment Protocol Proposal:
	Invoices/Payments/Receipts
In-Reply-To: <CAKaEYh+jJn0dPsGn_RnOy3NmWMc0F12Dffx2jYBUA=z+W45fWA@mail.gmail.com>
References: <CABsx9T0PsGLEAWRCjEDDFWQrb+DnJWQZ7mFLaZewAEX6vD1eHw@mail.gmail.com>
	<20121128233619.GA6368@giles.gnomon.org.uk>
	<CABsx9T09FYf2RTaMpmujt3qwTFc2JgnREH_7Hyk2mnCgb3CvAw@mail.gmail.com>
	<20121129170713.GD6368@giles.gnomon.org.uk>
	<CANEZrP233CytLs3PWBQ1TyuBTMv4sLGJkEMeGWYq5xRi+iLKew@mail.gmail.com>
	<20121129185330.GE6368@giles.gnomon.org.uk>
	<CABsx9T35qD_xJEVw002eAhJ1kr6x5aMU7RpD+U84XEOZXmXcYw@mail.gmail.com>
	<CAErK2ChjAm-Zf11YXuBQeTQvahOEJNGiPSZaD-CQ=OU9K6HtZA@mail.gmail.com>
	<CAKaEYh+OUD4kfxwSNQBCJXmj6Kwb8jy9Au=Mfrqr2sKv7SuHpg@mail.gmail.com>
	<CA+8xBpeya92UR60_ba+xYycjONOOvYUcW4Fe+SNdWwpg7aWEHw@mail.gmail.com>
	<CAKaEYh+jJn0dPsGn_RnOy3NmWMc0F12Dffx2jYBUA=z+W45fWA@mail.gmail.com>
Message-ID: <CANEZrP1v9E1S1VA2p-pCzrobp8ueWZTf0r0stZ3JyJ==u_Zgxg@mail.gmail.com>

Can we please drop the binary vs text issue? We have been around it
millions of times already. There are no compelling arguments to use
text here and several obvious problems with it. If you think you've
found a good argument to use JSON, please research protocol buffers
more thoroughly and see if it changes your mind.



From g.rowe at froot.co.uk  Mon Dec 17 09:31:38 2012
From: g.rowe at froot.co.uk (Gary Rowe)
Date: Mon, 17 Dec 2012 09:31:38 +0000
Subject: [Bitcoin-development] Payment Protocol Proposal:
	Invoices/Payments/Receipts
In-Reply-To: <CANEZrP1v9E1S1VA2p-pCzrobp8ueWZTf0r0stZ3JyJ==u_Zgxg@mail.gmail.com>
References: <CABsx9T0PsGLEAWRCjEDDFWQrb+DnJWQZ7mFLaZewAEX6vD1eHw@mail.gmail.com>
	<20121128233619.GA6368@giles.gnomon.org.uk>
	<CABsx9T09FYf2RTaMpmujt3qwTFc2JgnREH_7Hyk2mnCgb3CvAw@mail.gmail.com>
	<20121129170713.GD6368@giles.gnomon.org.uk>
	<CANEZrP233CytLs3PWBQ1TyuBTMv4sLGJkEMeGWYq5xRi+iLKew@mail.gmail.com>
	<20121129185330.GE6368@giles.gnomon.org.uk>
	<CABsx9T35qD_xJEVw002eAhJ1kr6x5aMU7RpD+U84XEOZXmXcYw@mail.gmail.com>
	<CAErK2ChjAm-Zf11YXuBQeTQvahOEJNGiPSZaD-CQ=OU9K6HtZA@mail.gmail.com>
	<CAKaEYh+OUD4kfxwSNQBCJXmj6Kwb8jy9Au=Mfrqr2sKv7SuHpg@mail.gmail.com>
	<CA+8xBpeya92UR60_ba+xYycjONOOvYUcW4Fe+SNdWwpg7aWEHw@mail.gmail.com>
	<CAKaEYh+jJn0dPsGn_RnOy3NmWMc0F12Dffx2jYBUA=z+W45fWA@mail.gmail.com>
	<CANEZrP1v9E1S1VA2p-pCzrobp8ueWZTf0r0stZ3JyJ==u_Zgxg@mail.gmail.com>
Message-ID: <CAKm8k+3drQkEz9Ek7of-nWa9LZwRDvBY-BATQBuSD2AetOb6Zw@mail.gmail.com>

I've been following this thread closely, and Mike is correct here -
protocol buffers is definitely the way to go.


On 17 December 2012 09:19, Mike Hearn <mike at plan99.net> wrote:

> Can we please drop the binary vs text issue? We have been around it
> millions of times already. There are no compelling arguments to use
> text here and several obvious problems with it. If you think you've
> found a good argument to use JSON, please research protocol buffers
> more thoroughly and see if it changes your mind.
>
>
> ------------------------------------------------------------------------------
> LogMeIn Rescue: Anywhere, Anytime Remote support for IT. Free Trial
> Remotely access PCs and mobile devices and provide instant support
> Improve your efficiency, and focus on delivering more value-add services
> Discover what IT Professionals Know. Rescue delivers
> http://p.sf.net/sfu/logmein_12329d2d
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20121217/ac1042fa/attachment.html>

From melvincarvalho at gmail.com  Mon Dec 17 11:23:37 2012
From: melvincarvalho at gmail.com (Melvin Carvalho)
Date: Mon, 17 Dec 2012 12:23:37 +0100
Subject: [Bitcoin-development] Payment Protocol Proposal:
	Invoices/Payments/Receipts
In-Reply-To: <CANEZrP1v9E1S1VA2p-pCzrobp8ueWZTf0r0stZ3JyJ==u_Zgxg@mail.gmail.com>
References: <CABsx9T0PsGLEAWRCjEDDFWQrb+DnJWQZ7mFLaZewAEX6vD1eHw@mail.gmail.com>
	<20121128233619.GA6368@giles.gnomon.org.uk>
	<CABsx9T09FYf2RTaMpmujt3qwTFc2JgnREH_7Hyk2mnCgb3CvAw@mail.gmail.com>
	<20121129170713.GD6368@giles.gnomon.org.uk>
	<CANEZrP233CytLs3PWBQ1TyuBTMv4sLGJkEMeGWYq5xRi+iLKew@mail.gmail.com>
	<20121129185330.GE6368@giles.gnomon.org.uk>
	<CABsx9T35qD_xJEVw002eAhJ1kr6x5aMU7RpD+U84XEOZXmXcYw@mail.gmail.com>
	<CAErK2ChjAm-Zf11YXuBQeTQvahOEJNGiPSZaD-CQ=OU9K6HtZA@mail.gmail.com>
	<CAKaEYh+OUD4kfxwSNQBCJXmj6Kwb8jy9Au=Mfrqr2sKv7SuHpg@mail.gmail.com>
	<CA+8xBpeya92UR60_ba+xYycjONOOvYUcW4Fe+SNdWwpg7aWEHw@mail.gmail.com>
	<CAKaEYh+jJn0dPsGn_RnOy3NmWMc0F12Dffx2jYBUA=z+W45fWA@mail.gmail.com>
	<CANEZrP1v9E1S1VA2p-pCzrobp8ueWZTf0r0stZ3JyJ==u_Zgxg@mail.gmail.com>
Message-ID: <CAKaEYhLbeBfJeLtBJTkX6S-MbqdWuQrcpNKpY2Czhhk3T6frmA@mail.gmail.com>

On 17 December 2012 10:19, Mike Hearn <mike at plan99.net> wrote:

> Can we please drop the binary vs text issue? We have been around it
> millions of times already. There are no compelling arguments to use
> text here and several obvious problems with it. If you think you've
> found a good argument to use JSON, please research protocol buffers
> more thoroughly and see if it changes your mind.
>

Hi Mike, thanks you for the pointer.  I have read up on Protocol Buffers.

If the decision has already been made, then let's go with that, but if not
perhaps I can offer some comments.

Looking at:

http://en.wikipedia.org/wiki/Comparison_of_data_serialization_formats

And -- "Canonically, Protocol Buffers are serialized into a binary wire
format which is compact, forwards-compatible, backwards-compatible, but not
self-describing"

I can see there are advantages in this approach in that you can send
messages quickly and with low bandwidth.  However the non self describing
data means that it's significantly harder to convert from one format to
another.  Also references are important, and can be achieved in JSON.

Yet in my opinion there is great advantage to growing the bitcoin ecosystem
to interoperate with the whole net, kind of creating a complete web
economy.  The way to do this is to foster interoperability.  Having looked
at and worked with standards for the past 5-10 years that is the great
challenge.  Every system works in an island, and few talk to any others.
However, a market based economy grows exponentially more valuable with
extra liquidity.

Inventing yet another format may lead to balkanization.  If history is a
judge, the chances are high.  A self describing JSON format, however is
much more likely to interop.

I can understand the hesitation with JOSE.  However, if you get a moment,
please look at :

http://payswarm.com/specs/source/web-keys/

This should provide some of the tools that you need.

As I said above, if the matter is closed, that's fine and thanks for taking
the time to read.

Can I at least propose to make it mandatory for the binary format to have a
translation script to a self describing JSON format and back again.  I
would love to see the bitcoin ecosystem become a major part of the
infrastructure of the web itself (leading to even nice things like a proper
web of trust), as well as an awesome P2P system in its own right.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20121217/8d6b697e/attachment.html>

From gavinandresen at gmail.com  Mon Dec 17 17:57:53 2012
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Mon, 17 Dec 2012 12:57:53 -0500
Subject: [Bitcoin-development] Payment Protocol Proposal:
	Invoices/Payments/Receipts
In-Reply-To: <CAKaEYhLbeBfJeLtBJTkX6S-MbqdWuQrcpNKpY2Czhhk3T6frmA@mail.gmail.com>
References: <CABsx9T0PsGLEAWRCjEDDFWQrb+DnJWQZ7mFLaZewAEX6vD1eHw@mail.gmail.com>
	<20121128233619.GA6368@giles.gnomon.org.uk>
	<CABsx9T09FYf2RTaMpmujt3qwTFc2JgnREH_7Hyk2mnCgb3CvAw@mail.gmail.com>
	<20121129170713.GD6368@giles.gnomon.org.uk>
	<CANEZrP233CytLs3PWBQ1TyuBTMv4sLGJkEMeGWYq5xRi+iLKew@mail.gmail.com>
	<20121129185330.GE6368@giles.gnomon.org.uk>
	<CABsx9T35qD_xJEVw002eAhJ1kr6x5aMU7RpD+U84XEOZXmXcYw@mail.gmail.com>
	<CAErK2ChjAm-Zf11YXuBQeTQvahOEJNGiPSZaD-CQ=OU9K6HtZA@mail.gmail.com>
	<CAKaEYh+OUD4kfxwSNQBCJXmj6Kwb8jy9Au=Mfrqr2sKv7SuHpg@mail.gmail.com>
	<CA+8xBpeya92UR60_ba+xYycjONOOvYUcW4Fe+SNdWwpg7aWEHw@mail.gmail.com>
	<CAKaEYh+jJn0dPsGn_RnOy3NmWMc0F12Dffx2jYBUA=z+W45fWA@mail.gmail.com>
	<CANEZrP1v9E1S1VA2p-pCzrobp8ueWZTf0r0stZ3JyJ==u_Zgxg@mail.gmail.com>
	<CAKaEYhLbeBfJeLtBJTkX6S-MbqdWuQrcpNKpY2Czhhk3T6frmA@mail.gmail.com>
Message-ID: <CABsx9T1QjDfg-hKorJCk8Sdhf0fw9qQjV8R8EPNvU0m0nQF3tw@mail.gmail.com>

On Mon, Dec 17, 2012 at 6:23 AM, Melvin Carvalho
<melvincarvalho at gmail.com>wrote:

> If the decision has already been made, then let's go with that
>
>
The decision has already been made.

-- 
--
Gavin Andresen
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20121217/d624c7e7/attachment.html>

From stephen at bitpay.com  Thu Dec 20 16:53:22 2012
From: stephen at bitpay.com (Stephen Pair)
Date: Thu, 20 Dec 2012 11:53:22 -0500
Subject: [Bitcoin-development] Payment Protocol Proposal:
	Invoices/Payments/Receipts
In-Reply-To: <CABsx9T1QjDfg-hKorJCk8Sdhf0fw9qQjV8R8EPNvU0m0nQF3tw@mail.gmail.com>
References: <CABsx9T0PsGLEAWRCjEDDFWQrb+DnJWQZ7mFLaZewAEX6vD1eHw@mail.gmail.com>
	<20121128233619.GA6368@giles.gnomon.org.uk>
	<CABsx9T09FYf2RTaMpmujt3qwTFc2JgnREH_7Hyk2mnCgb3CvAw@mail.gmail.com>
	<20121129170713.GD6368@giles.gnomon.org.uk>
	<CANEZrP233CytLs3PWBQ1TyuBTMv4sLGJkEMeGWYq5xRi+iLKew@mail.gmail.com>
	<20121129185330.GE6368@giles.gnomon.org.uk>
	<CABsx9T35qD_xJEVw002eAhJ1kr6x5aMU7RpD+U84XEOZXmXcYw@mail.gmail.com>
	<CAErK2ChjAm-Zf11YXuBQeTQvahOEJNGiPSZaD-CQ=OU9K6HtZA@mail.gmail.com>
	<CAKaEYh+OUD4kfxwSNQBCJXmj6Kwb8jy9Au=Mfrqr2sKv7SuHpg@mail.gmail.com>
	<CA+8xBpeya92UR60_ba+xYycjONOOvYUcW4Fe+SNdWwpg7aWEHw@mail.gmail.com>
	<CAKaEYh+jJn0dPsGn_RnOy3NmWMc0F12Dffx2jYBUA=z+W45fWA@mail.gmail.com>
	<CANEZrP1v9E1S1VA2p-pCzrobp8ueWZTf0r0stZ3JyJ==u_Zgxg@mail.gmail.com>
	<CAKaEYhLbeBfJeLtBJTkX6S-MbqdWuQrcpNKpY2Czhhk3T6frmA@mail.gmail.com>
	<CABsx9T1QjDfg-hKorJCk8Sdhf0fw9qQjV8R8EPNvU0m0nQF3tw@mail.gmail.com>
Message-ID: <CADb9v0K9xD+ndB-dJDkmPOuo1omrtMk3WTo238OjVcWoQ-CmXA@mail.gmail.com>

Here are my (mostly half baked) thoughts on the payments protocol proposal.

My first observation is that the proposal is too heavily oriented around a
merchant/customer interaction.  I think it's equally important to consider
the person to person scenarios.  It would be very cool if people could
send/receive payments by copying and pasting stuff on facebook or email
(you can kind of do it now, but it's not safe unless you go to
extraordinary lengths using PGP signatures and the like).

Protobufs vs JSON: Protobufs are fine, although I will mention that the
serialization/JOSE arguments are irrelevant...you only need that if you
need a reliable way of signing an in memory object structure...in this case
you would be signing a serialized form of the object...the recipient
doesn't have to be able to reproduce the serialized form, they only need to
verify the signature on the already serialized bytes...I see protobufs as a
good serialization format for storage, while JSON being more practical for
communications in a web oriented environment...with protobufs & a web
wallet, you may find yourself in a situation needing to parse a protobuf
message in a web browser...the protobuf parsing and serializing code is
just going to add bloat to the web page...personally, I probably would have
gone with JSON, but hey, I'm not writing the code.

X.509 - nasty, but maybe ok ...as long as you can add root CAs to your
Bitcoin client or explicitly trust a certificate, I don't see that it poses
any privacy issues...but there are some other things to think about here
...like what about the casual user that wants to create a payment request
to send to their friend over email (wrapped in a clear text block similar
to PGP...it could also be sent as a file attachment)?  Are you now
requiring them to go and setup a certificate?  Btw, I really like the use
of a payment request in this manner because you have a signed payment
request that can be verified against an address book of known identities.
 This could be much safer than simply emailing an unsigned bitcoin address
around.

Refund addresses...this is not going to be as useful as people might
think...most refunds that bitpay needs to process happen days or even
months after the initial purchase...in that span of time, people can change
wallets, rendering such a refund address useless...so, as I think about the
situation, we would still need to contact the buyer to confirm a refund
address anyway.  What we really need is to verify the identity of the
person we're potentially sending the refund to...we need a way of
determining that the person we're sending the refund to is the same person
that paid the original invoice.  Bitcoin addresses are identities, but they
are too low level.  HD wallets come to mind...the top level or intermediate
levels of a deterministic hierarchy could be used for identity
purposes...but it also seems like it might be conflating payments and
identity (which for many reasons you might want to keep separate).  What if
bitcoin clients could manage one or more identities used for the purpose of
communications?  You could have a bitcoin identity file that could be used
by multiple wallets.  These identities would be used for signing messages
and verifying the authenticity of communications...when sending a payment,
instead of a refund address, you would include one of these identities
which could later be used to confirm a refund address.  In fact, the refund
would be processed by the buyer generating another payment request message
signed by the identity used in the original payment.

People would understand that their identities are important for
communications and they would keep those even when changing to new wallets
and such (identities could be stored in ~/.bitcoin/id or something
(encrypted of course)).

There are some other interesting possibilities if messaging and identities
are done right...for example, I could add "check" feature (analogous to
paper checks).  It would work like this...you create a transaction that
spends to a newly generated address...you put that transaction, along with
the private key into an encrypted container (sent to the identity of the
person you want to pay).  The recipient can open it and their wallet would
go ahead and generate and broadcast a transaction moving the funds into
their wallet (optionally including a fee).  But, if the recipient never
cashes the check, the sender could pull those funds back after a certain
period of time.  This also eliminates the possibility of accidentally
sending the funds to the wrong address (or an old address) and the bitcoins
being forever lost...the recipient can sweep the transaction into any
wallet of their choice.

As I'm writing this, I'm beginning to wonder if the identity management
problem is unavoidable.  Maybe that needs to be dealt with first.  It would
enable so many other interesting possibilities.

I like the use of merchant_data...this means that you no longer will need a
unique bitcoin address for every invoice.

In the signed invoice structure, why embed the serialized invoice?  Why not
make that a reference using a hash?  Generally speaking, I'm not a fan of
embedding things like that.  You could have an over-arching structure
called Message which is just "repeated bytes objects" (in protobuf lingo)
...references between objects would use a hash and the first object would
be treated as the message.  In a payment request message, the
SignedPaymentRequest would be the first object, the PaymentRequest the
second.

I think the Payment structure should refer to the SignedPaymentRequest (by
its hash) instead of the merchant_data...you can of course access the
merchant_data through the SignedPaymentRequest.  I suppose you could always
index payment requests based on the merchant_data, but it just seems
cleaner to refer back the the signed payment request when sending a payment.

You might want to include an optional memo for each output...I could
imagine including one output that says "Don't forget to tip your
waiter"...any amount sent to that address could go directly to the waiter's
wallet.

What about payments from multiple wallets?  We see this a lot.  I think
this scheme would handle it ok, but just want to mention it.  I can imagine
someone paying first from one wallet, then the invoice webpage updates with
a clickable link to a new PaymentRequest for the remaining amount.

The Receipt should be signed...it could be used as proof of payment by
wallets.

Finally, I've seen seen suggestions to tack on a payment request URI to the
current bitcoin: URI for backward compatibility...I say no.  A bitcoin URI
already has a lot of data (especially if it includes a memo)...this makes
QR codes more dense and hence more difficult to scan...I say we stake a
claim on the "pay" URI .... pay:https://somewhere.com/payment/94kd83  ...or
for a clickable link, you could embed it right on the web page, eliminating
the need for a second https request... pay:data:<PaymentRequestMessage>
 ...and finally, to further shorten the URI, https could be assumed if the
protocol is omitted ... pay:somewhere.com/payment/94kd83

We can deal with backward compatibility by including a link on invoices to
display an old style bitcoin payment address.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20121220/0cc1e450/attachment.html>

From mike at plan99.net  Thu Dec 20 17:43:34 2012
From: mike at plan99.net (Mike Hearn)
Date: Thu, 20 Dec 2012 18:43:34 +0100
Subject: [Bitcoin-development] Payment Protocol Proposal:
	Invoices/Payments/Receipts
In-Reply-To: <CADb9v0K9xD+ndB-dJDkmPOuo1omrtMk3WTo238OjVcWoQ-CmXA@mail.gmail.com>
References: <CABsx9T0PsGLEAWRCjEDDFWQrb+DnJWQZ7mFLaZewAEX6vD1eHw@mail.gmail.com>
	<20121128233619.GA6368@giles.gnomon.org.uk>
	<CABsx9T09FYf2RTaMpmujt3qwTFc2JgnREH_7Hyk2mnCgb3CvAw@mail.gmail.com>
	<20121129170713.GD6368@giles.gnomon.org.uk>
	<CANEZrP233CytLs3PWBQ1TyuBTMv4sLGJkEMeGWYq5xRi+iLKew@mail.gmail.com>
	<20121129185330.GE6368@giles.gnomon.org.uk>
	<CABsx9T35qD_xJEVw002eAhJ1kr6x5aMU7RpD+U84XEOZXmXcYw@mail.gmail.com>
	<CAErK2ChjAm-Zf11YXuBQeTQvahOEJNGiPSZaD-CQ=OU9K6HtZA@mail.gmail.com>
	<CAKaEYh+OUD4kfxwSNQBCJXmj6Kwb8jy9Au=Mfrqr2sKv7SuHpg@mail.gmail.com>
	<CA+8xBpeya92UR60_ba+xYycjONOOvYUcW4Fe+SNdWwpg7aWEHw@mail.gmail.com>
	<CAKaEYh+jJn0dPsGn_RnOy3NmWMc0F12Dffx2jYBUA=z+W45fWA@mail.gmail.com>
	<CANEZrP1v9E1S1VA2p-pCzrobp8ueWZTf0r0stZ3JyJ==u_Zgxg@mail.gmail.com>
	<CAKaEYhLbeBfJeLtBJTkX6S-MbqdWuQrcpNKpY2Czhhk3T6frmA@mail.gmail.com>
	<CABsx9T1QjDfg-hKorJCk8Sdhf0fw9qQjV8R8EPNvU0m0nQF3tw@mail.gmail.com>
	<CADb9v0K9xD+ndB-dJDkmPOuo1omrtMk3WTo238OjVcWoQ-CmXA@mail.gmail.com>
Message-ID: <CANEZrP162Q=hoqBQvLPm6rT=xNHMOtau42gDzRS4ddEtMFk5Uw@mail.gmail.com>

Thanks for the thoughts. For those who don't know, Stephen works for BitPay.

> My first observation is that the proposal is too heavily oriented around a
> merchant/customer interaction.

The term "merchant" is just being used to mean the entity requesting
the payment. I'm hopeful that in future mobile wallets will be
creating these messages where today they'd make URLs and QRcodes. So
it's definitely intended for person to person payments too.

> you may find yourself in a situation needing to parse a protobuf
> message in a web browser

Nothing stops you converting them into whatever form you want on the
server side. If you don't care about the signature checking then it's
no problem to use a server. If you do then you'd need to ship all the
code for verifying signatures that to the client anyway, at which
point a small protobuf parser is hardly a deal killer.

> ...like what about the casual user that wants to create a payment request to
> send to their friend over email

They can send an unsigned payment request. Note that if you mail it as
an attachment from a competent, up to date email provider then the
attachment isn't really unsigned. The whole thing is covered by the
emails DKIM signature which is applied transparently by the ESP. If
the signature fails to verify then the mail client can show that or
treat the mail differently (as Gmail does). This is easy to use for
the end user - they don't have to think about cryptography or PKI. As
long as their email account is secure then they can send signed mails
asserting to their identity.

> Refund addresses...this is not going to be as useful as people might
> think...most refunds that bitpay needs to process happen days or even months
> after the initial purchase

Useful feedback, thanks. Still, there may be other types of merchants
for whom it's useful, and many users won't change their wallet. It
certainly simplifies things if you can present the refund address and
give a one-click option to use it. If the user wants to use a
different address, then they can go onto the slow/complicated path.

This current spec deliberately punts on the topic of identifying end
users. It's a difficult problem. Whereas many merchants have SSL
certs, most end users don't have published keys in any useful form. By
far the easiest way for 99% of people to generate a signed message is
to send email that's signed by DKIM (from gmail, hotmail, yahoo, other
providers etc). Then it's all transparent and behind the scenes. Their
identity is their email address.

So for BitPays scenario, you could require an email to be sent by the
end user containing new instructions. Your MTA can show you whether
the mail is correctly DKIM signed or not when deciding whether to
follow the instructions.

> But, if the recipient never cashes the check, the sender could pull those
> funds back after a certain period of time.

Yeah, I like the term "check"/"cheque" for that concept of a reversible payment.

> I like the use of merchant_data...this means that you no longer will need a
> unique bitcoin address for every invoice.

It's still a good idea to use one for privacy reasons. The merchant
data is there so you can stuff whatever state you want into it. So
it's like cookies. You don't have to keep state on the server side.
Just encrypt/sign it, put it in the invoice, and when you get a
payment message back there's no need to do database lookups or
anything, you can just do some crypto and know who is submitting it.

> Generally speaking, I'm not a fan of embedding things like that

What's wrong with it? Isn't your proposal more complex? I don't see
why it's better than just embedding it.

> The Receipt should be signed...it could be used as proof of payment by
> wallets.

There's no Receipt message, a SignedPaymentRequest + transactions that
pay to the requested outputs are together the proof of payment.

Re a new URI scheme. Interesting idea, thanks for the suggestion. It
seemed like it'd be easier for merchants to integrate if a single
linked worked for all wallet implementations/versions. But I guess we
could do both schemes, even.



From stephen at bitpay.com  Thu Dec 20 19:32:46 2012
From: stephen at bitpay.com (Stephen Pair)
Date: Thu, 20 Dec 2012 14:32:46 -0500
Subject: [Bitcoin-development] Payment Protocol Proposal:
	Invoices/Payments/Receipts
In-Reply-To: <CANEZrP162Q=hoqBQvLPm6rT=xNHMOtau42gDzRS4ddEtMFk5Uw@mail.gmail.com>
References: <CABsx9T0PsGLEAWRCjEDDFWQrb+DnJWQZ7mFLaZewAEX6vD1eHw@mail.gmail.com>
	<20121128233619.GA6368@giles.gnomon.org.uk>
	<CABsx9T09FYf2RTaMpmujt3qwTFc2JgnREH_7Hyk2mnCgb3CvAw@mail.gmail.com>
	<20121129170713.GD6368@giles.gnomon.org.uk>
	<CANEZrP233CytLs3PWBQ1TyuBTMv4sLGJkEMeGWYq5xRi+iLKew@mail.gmail.com>
	<20121129185330.GE6368@giles.gnomon.org.uk>
	<CABsx9T35qD_xJEVw002eAhJ1kr6x5aMU7RpD+U84XEOZXmXcYw@mail.gmail.com>
	<CAErK2ChjAm-Zf11YXuBQeTQvahOEJNGiPSZaD-CQ=OU9K6HtZA@mail.gmail.com>
	<CAKaEYh+OUD4kfxwSNQBCJXmj6Kwb8jy9Au=Mfrqr2sKv7SuHpg@mail.gmail.com>
	<CA+8xBpeya92UR60_ba+xYycjONOOvYUcW4Fe+SNdWwpg7aWEHw@mail.gmail.com>
	<CAKaEYh+jJn0dPsGn_RnOy3NmWMc0F12Dffx2jYBUA=z+W45fWA@mail.gmail.com>
	<CANEZrP1v9E1S1VA2p-pCzrobp8ueWZTf0r0stZ3JyJ==u_Zgxg@mail.gmail.com>
	<CAKaEYhLbeBfJeLtBJTkX6S-MbqdWuQrcpNKpY2Czhhk3T6frmA@mail.gmail.com>
	<CABsx9T1QjDfg-hKorJCk8Sdhf0fw9qQjV8R8EPNvU0m0nQF3tw@mail.gmail.com>
	<CADb9v0K9xD+ndB-dJDkmPOuo1omrtMk3WTo238OjVcWoQ-CmXA@mail.gmail.com>
	<CANEZrP162Q=hoqBQvLPm6rT=xNHMOtau42gDzRS4ddEtMFk5Uw@mail.gmail.com>
Message-ID: <CADb9v0Lc3HDpLO_ZdibPcxyrggACVfG+482oj72=986pfSc4mA@mail.gmail.com>

On Thu, Dec 20, 2012 at 12:43 PM, Mike Hearn <mike at plan99.net> wrote:

> > you may find yourself in a situation needing to parse a protobuf
> > message in a web browser
> Nothing stops you converting them into whatever form you want on the
> server side. If you don't care about the signature checking then it's
> no problem to use a server. If you do then you'd need to ship all the
> code for verifying signatures that to the client anyway, at which
> point a small protobuf parser is hardly a deal killer.


No, it's not a killer...just a hassle.  JSON is convenient and ubiquitous
and there is something to be said for that (and I wanted to point out that
the JOSE objection was invalid).  Protobufs are nice and efficient, but who
cares.  You're talking about direct communications rather than something
that will be bounced around every node in the mesh network.  I don't really
care much either way, it's not worth debating.  I'm just thankful no one is
arguing for XML or IIOP.  :)

> ...like what about the casual user that wants to create a payment request
> to
> > send to their friend over email
>
> They can send an unsigned payment request. Note that if you mail it as
> an attachment from a competent, up to date email provider then the
> attachment isn't really unsigned. The whole thing is covered by the
> emails DKIM signature which is applied transparently by the ESP. If
> the signature fails to verify then the mail client can show that or
> treat the mail differently (as Gmail does). This is easy to use for
> the end user - they don't have to think about cryptography or PKI. As
> long as their email account is secure then they can send signed mails
> asserting to their identity.
>

This leaves too much to chance for my taste.  Forget email, what about
jabber, ICQ, skype, IRC?  Email is just one communications medium, there
are many others for which there would be no assurance that the payment
request hasn't been tampered with.  You could at a minimum allow a person
to create a normal ECC key, but have it used as an identity in
communications rather than a payment address.  You store it in a separate
file in ~/.bitcoin/id  ...you don't have to solve the whole set of PKI
problems, people could exchange identities using any secure channel they
are comfortable with (email + phone verification of a short hash id would
be sufficient).  In another scenario, an id could be made available over
https, using the normal SSL certificate and CA infrastructure to verify
authenticity.  This way all messages could be signed and/or encrypted
without the user having to go out of their way to use external tools or
infrastructure that is often not very user friendly.  You also need
encryption for the "cheque" feature...asking people to use GPG would be too
much of a burden (and email DKIM doesn't offer encryption).

>>> wandering off topic >>>
Indeed, "cheques" could become the dominant method of person to person
payments...first, you would obtain someone's id, which you might already
have on file (rather than obtaining a bitcoin address), then you would
generate a "cheque" for the amount desired and send it to them...the
recipient then has full control over what address they want to sweep the
funds to as well as whether they'd like to include a miner fee to speed the
confirmation along. Despite the fact that you may send many payments to the
same identity, the only thing showing up on the p2p network and the block
chain is the one time use address for the cheque and the recipient's wallet
address.  This means the recipient has much more control over the address
policy used (compared with simply giving out a bitcoin address that may be
reused).
<<<

> Refund addresses...this is not going to be as useful as people might
> > think...most refunds that bitpay needs to process happen days or even
> months
> > after the initial purchase
>
> Useful feedback, thanks. Still, there may be other types of merchants
> for whom it's useful, and many users won't change their wallet. It
> certainly simplifies things if you can present the refund address and
> give a one-click option to use it. If the user wants to use a
> different address, then they can go onto the slow/complicated path.
>
> This current spec deliberately punts on the topic of identifying end
> users. It's a difficult problem.
>

I know, but as I was responding, I began to realize this is a mistake.
 It's worthwhile to tackle that problem first...if done right, it would pay
huge dividends.  Also, identity is one thing, an elaborate trust based
identity verification system (like CA's) is a whole other thing.  I think
the former is pretty simple actually...and it's all that's really needed
for the time being (as I alluded, a bitcoin identity could be communicated
or verified using the existing X.509/CA infrastructure if desired...you
could also use the PGP infrastructure).


> > I like the use of merchant_data...this means that you no longer will
> need a
> > unique bitcoin address for every invoice.
>
> It's still a good idea to use one for privacy reasons.


Actually, I was speaking more in terms of relying on the address to match
up a transaction to an invoice.  The merchant_data field frees you from
having to do that.


> The merchant
> data is there so you can stuff whatever state you want into it. So
> it's like cookies. You don't have to keep state on the server side.
> Just encrypt/sign it, put it in the invoice, and when you get a
> payment message back there's no need to do database lookups or
> anything, you can just do some crypto and know who is submitting it.
>

Yeah, that's neat...I hadn't thought of that possibility.


>  > Generally speaking, I'm not a fan of embedding things like that
>
> What's wrong with it? Isn't your proposal more complex? I don't see
> why it's better than just embedding it.
>

It's not a big deal, I just think a referential model is more general than
embedding objects within each other.


>  > The Receipt should be signed...it could be used as proof of payment by
> > wallets.
>
> There's no Receipt message, a SignedPaymentRequest + transactions that
> pay to the requested outputs are together the proof of payment.
>

Ah, I see it was renamed PaymentACK...the point of signing a PaymentACK is
that while you could prove that you paid according to a PaymentRequest, a
signed PaymentACK is proof that the recipient acknowledged you have made
that payment.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20121220/4ba9c584/attachment.html>

From elombrozo at gmail.com  Fri Dec 21 08:53:16 2012
From: elombrozo at gmail.com (Eric Lombrozo)
Date: Fri, 21 Dec 2012 00:53:16 -0800
Subject: [Bitcoin-development]  Multiwallet support
Message-ID: <B03D534F-BAB6-4068-A8B4-AE28764F3D88@gmail.com>

I started working on a new feature to allow for watch-only addresses in wallets. https://github.com/bitcoin/bitcoin/pull/2121

In order to integrate this feature nicely into bitcoin / bitcoin, it will be necessary to disable signing and privkey export operations for watch-only addresses. Since disabling these things for only some of the keys in a wallet but not others is an API nightmare and complicates CreateTransaction logic, I propose adding multiple wallet capabilities and specifying upon creation whether a wallet is a:

1)  full signing wallet
	- importaddress is disabled.

2) watch-only wallet
	- signing and privkey export operations are disabled.
	- importprivkey only saves the associated address but not the private key. (behaves like importaddress <address for privkey>)

In order to do the above, it will be necessary to add multiple wallet support. Anyhow, that was my initial motivation for multiple wallets - but obviously, there are a number of other reasons why people might want multiple wallet support.

----------------------

Adding the ability to specify multiple wallets with associated names and passphrases in the config file should be fairly straightforward. However, exposing multiple wallets via RPC will be tricky as the existing RPC is not designed to support multiple wallets.

As to not break compatibility with the existing RPC calls, we can have a main wallet which is always used as the default wallet. If the user wants to use a different wallet, the name of the wallet would have to be specified in the call. Unfortunately, it doesn't look like we can use many of the existing RPC calls (sendfrom, sendmany,sendtoaddress, etc...) since they all have optional parameters already and it would be awkward to just tack on the wallet name parameter at the end. Also, walletpassphrase is problematic as it is not stateless. So it looks like we need a whole separate set of calls which require a wallet name and passphrase (if the wallet is encrypted).

For instance,
	walletsendtoaddress <walletname> <passphrase> <bitcoinaddress> <amount> [comment] [comment-to]

I welcome any proposals or suggestions as to how this should be done.


-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20121221/47dc8176/attachment.html>

From gmaxwell at gmail.com  Fri Dec 21 13:20:29 2012
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Fri, 21 Dec 2012 08:20:29 -0500
Subject: [Bitcoin-development] Multiwallet support
In-Reply-To: <B03D534F-BAB6-4068-A8B4-AE28764F3D88@gmail.com>
References: <B03D534F-BAB6-4068-A8B4-AE28764F3D88@gmail.com>
Message-ID: <CAAS2fgRG6kY8ke4hTdUjVBB1dmCppmzwo7qmOM-ytKS1299Z1w@mail.gmail.com>

On Fri, Dec 21, 2012 at 3:53 AM, Eric Lombrozo <elombrozo at gmail.com> wrote:
> I started working on a new feature to allow for watch-only addresses in
> wallets. https://github.com/bitcoin/bitcoin/pull/2121
>
> In order to integrate this feature nicely into bitcoin / bitcoin, it will be
> necessary to disable signing and privkey export operations for watch-only
> addresses. Since disabling these things for only some of the keys in a
> wallet but not others is an API nightmare and complicates CreateTransaction
> logic, I propose adding multiple wallet capabilities and specifying upon
> creation whether a wallet is a:
>
> 1)  full signing wallet
> - importaddress is disabled.
>
> 2) watch-only wallet
> - signing and privkey export operations are disabled.
> - importprivkey only saves the associated address but not the private key.
> (behaves like importaddress <address for privkey>)
>
> In order to do the above, it will be necessary to add multiple wallet
> support. Anyhow, that was my initial motivation for multiple wallets - but
> obviously, there are a number of other reasons why people might want
> multiple wallet support.
>
> ----------------------
>
> Adding the ability to specify multiple wallets with associated names and
> passphrases in the config file should be fairly straightforward. However,
> exposing multiple wallets via RPC will be tricky as the existing RPC is not
> designed to support multiple wallets.
>
> As to not break compatibility with the existing RPC calls, we can have a
> main wallet which is always used as the default wallet. If the user wants to
> use a different wallet, the name of the wallet would have to be specified in
> the call. Unfortunately, it doesn't look like we can use many of the
> existing RPC calls (sendfrom, sendmany,sendtoaddress, etc...) since they all
> have optional parameters already and it would be awkward to just tack on the
> wallet name parameter at the end. Also, walletpassphrase is problematic as
> it is not stateless. So it looks like we need a whole separate set of calls
> which require a wallet name and passphrase (if the wallet is encrypted).
>
> For instance,
> walletsendtoaddress <walletname> <passphrase> <bitcoinaddress> <amount>
> [comment] [comment-to]
>
> I welcome any proposals or suggestions as to how this should be done.
>

How about a rpc like "usewallet <foo> <normal RPC>"  that simply
generalizes all the rpcs?

And instead of explicitly deactivating rpcs that don't make sense,
simply have them return an error.  Or, for example,  sendtoaddress on
a watching wallet should actually return an unsigned raw transaction
and a wallet specific message that tells you where to find the private
key.

I think it's desirable to not break compatibility but for this kind of
feature compatibility should not get in the way of doing it right.



From stephen at bitpay.com  Fri Dec 21 17:05:21 2012
From: stephen at bitpay.com (Stephen Pair)
Date: Fri, 21 Dec 2012 12:05:21 -0500
Subject: [Bitcoin-development] Payment Protocol Proposal:
	Invoices/Payments/Receipts
In-Reply-To: <CADb9v0Lc3HDpLO_ZdibPcxyrggACVfG+482oj72=986pfSc4mA@mail.gmail.com>
References: <CABsx9T0PsGLEAWRCjEDDFWQrb+DnJWQZ7mFLaZewAEX6vD1eHw@mail.gmail.com>
	<20121128233619.GA6368@giles.gnomon.org.uk>
	<CABsx9T09FYf2RTaMpmujt3qwTFc2JgnREH_7Hyk2mnCgb3CvAw@mail.gmail.com>
	<20121129170713.GD6368@giles.gnomon.org.uk>
	<CANEZrP233CytLs3PWBQ1TyuBTMv4sLGJkEMeGWYq5xRi+iLKew@mail.gmail.com>
	<20121129185330.GE6368@giles.gnomon.org.uk>
	<CABsx9T35qD_xJEVw002eAhJ1kr6x5aMU7RpD+U84XEOZXmXcYw@mail.gmail.com>
	<CAErK2ChjAm-Zf11YXuBQeTQvahOEJNGiPSZaD-CQ=OU9K6HtZA@mail.gmail.com>
	<CAKaEYh+OUD4kfxwSNQBCJXmj6Kwb8jy9Au=Mfrqr2sKv7SuHpg@mail.gmail.com>
	<CA+8xBpeya92UR60_ba+xYycjONOOvYUcW4Fe+SNdWwpg7aWEHw@mail.gmail.com>
	<CAKaEYh+jJn0dPsGn_RnOy3NmWMc0F12Dffx2jYBUA=z+W45fWA@mail.gmail.com>
	<CANEZrP1v9E1S1VA2p-pCzrobp8ueWZTf0r0stZ3JyJ==u_Zgxg@mail.gmail.com>
	<CAKaEYhLbeBfJeLtBJTkX6S-MbqdWuQrcpNKpY2Czhhk3T6frmA@mail.gmail.com>
	<CABsx9T1QjDfg-hKorJCk8Sdhf0fw9qQjV8R8EPNvU0m0nQF3tw@mail.gmail.com>
	<CADb9v0K9xD+ndB-dJDkmPOuo1omrtMk3WTo238OjVcWoQ-CmXA@mail.gmail.com>
	<CANEZrP162Q=hoqBQvLPm6rT=xNHMOtau42gDzRS4ddEtMFk5Uw@mail.gmail.com>
	<CADb9v0Lc3HDpLO_ZdibPcxyrggACVfG+482oj72=986pfSc4mA@mail.gmail.com>
Message-ID: <CADb9v0JaKFuDCY=NHRYQEjUAt4VKVm5pO2XZHgVttKYv-iQisg@mail.gmail.com>

The more I think about this topic, the more I think the first task at hand
is to implement secure, private messaging...the nature of any messages
(payment requests or otherwise) sent between wallets is such that it needs
to be secured.  And the great thing is that it's easy to do and you don't
need to solve the PKI problem.  Have the wallet maintain one or more ECC
key pairs for the purposes of signing and encrypting messages.  Allow these
to be shared between wallets, or exported/imported, etc.  You can punt on
the whole topic of verifying the others' public keys using PKI (I mean,
people use bitcoin addresses today without the use of any formal or
explicit PKI to verify them...people will make do without it for
communications keys just fine...and they can always use PGP or other PKI if
they feel the need...most people would just pick up the phone to verify a
friend's public key)...this also doesn't preclude the use of X.509 for the
merchant/customer scenario...

For a payment protocol, you could do something like this: use https & ssl
certificates/CAs as one method of obtaining an ECC public key...pki_type
could be "https" and pki_bytes could be a url for the https location to
download the ECC public key.  The software would reject (or warn) if the
SSL certificate isn't considered valid by the normal CA validation process.
 The wallet would not necessarily need to permanently store ECC public keys
obtained in this manner.  This approach doesn't require people to obtain
new certificates just for bitcoin.

In fact, there would be very little difference to the proposed payments
protocol if this approach were taken...instead of using X.509 directly for
signing and encrypting messages, you are using it for signing and
encrypting the ECC public key exchange.  And this allows people that don't
have web servers or SSL certificates to exchange their ECC public keys by
other means and be able to use this payment protocol as well as any others
that one could imagine.  So, I actually think this is a better way of
keeping PKI out of the scope of the proposal.

Payment requests are just one kind of messaging between wallets.  I've also
mentioned the "cheques" feature.  I'm sure there are many more
possibilities.  Having a uniform method of securing messages sent between
wallets (that doesn't depend on external tools) would be a great step
forward IMO.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20121221/3e689ad1/attachment.html>

From elombrozo at gmail.com  Fri Dec 21 18:11:21 2012
From: elombrozo at gmail.com (Eric Lombrozo)
Date: Fri, 21 Dec 2012 10:11:21 -0800
Subject: [Bitcoin-development] Multiwallet support
In-Reply-To: <CAAS2fgRG6kY8ke4hTdUjVBB1dmCppmzwo7qmOM-ytKS1299Z1w@mail.gmail.com>
References: <B03D534F-BAB6-4068-A8B4-AE28764F3D88@gmail.com>
	<CAAS2fgRG6kY8ke4hTdUjVBB1dmCppmzwo7qmOM-ytKS1299Z1w@mail.gmail.com>
Message-ID: <2F31D463-26FA-4EC1-8571-4BAF1C4EE941@gmail.com>

I like that idea. I'm close to having something working along those lines. Hopefully I'll be able to push something by tonight.

> 
> How about a rpc like "usewallet <foo> <normal RPC>"  that simply
> generalizes all the rpcs?
> 
> And instead of explicitly deactivating rpcs that don't make sense,
> simply have them return an error.  Or, for example,  sendtoaddress on
> a watching wallet should actually return an unsigned raw transaction
> and a wallet specific message that tells you where to find the private
> key.
> 
> I think it's desirable to not break compatibility but for this kind of
> feature compatibility should not get in the way of doing it right.




From andreas at schildbach.de  Sat Dec 22 18:39:59 2012
From: andreas at schildbach.de (Andreas Schildbach)
Date: Sat, 22 Dec 2012 19:39:59 +0100
Subject: [Bitcoin-development] Testnet3 difficulty transition problem?
Message-ID: <kb4upt$9vo$1@ger.gmane.org>

Both blocks

38304 00000000015bb4069249fa1f41ae61d8a7447aaacc33c50dacd3c3654377fa43

and

40320 000000008011f56b8c92ff27fb502df5723171c5374673670ef0eee3696aee6d

are difficulty transition blocks. However, block 40320 has a difficulty
of 1. I know there is this special testnet rule that allows mining a
block at difficulty 1, but I always thought you can't use this exception
on difficulty transition blocks.

As a result, bitcoinj based clients do not advance their blockchain past
block 40319.




From gmaxwell at gmail.com  Sat Dec 22 18:45:52 2012
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Sat, 22 Dec 2012 13:45:52 -0500
Subject: [Bitcoin-development] Testnet3 difficulty transition problem?
In-Reply-To: <CAAS2fgQKidxKmJ47oDi80YZrTW_MrVYf_u_tcZtO+xv2o+8S+w@mail.gmail.com>
References: <kb4upt$9vo$1@ger.gmane.org>
	<CAAS2fgQKidxKmJ47oDi80YZrTW_MrVYf_u_tcZtO+xv2o+8S+w@mail.gmail.com>
Message-ID: <CAAS2fgTM6n17x+3Oen78LHeAVuyOaXLCy285NKqqCLN74VB_=Q@mail.gmail.com>

On Sat, Dec 22, 2012 at 1:39 PM, Andreas Schildbach
<andreas at schildbach.de> wrote:
> Both blocks
>
> 38304 00000000015bb4069249fa1f41ae61d8a7447aaacc33c50dacd3c3654377fa43
>
> and
>
> 40320 000000008011f56b8c92ff27fb502df5723171c5374673670ef0eee3696aee6d
>
> are difficulty transition blocks. However, block 40320 has a difficulty
> of 1. I know there is this special testnet rule that allows mining a
> block at difficulty 1,

Yes.

> but I always thought you can't use this exception
> on difficulty transition blocks.

Not so? but what you're actually seeing is that difficult change is
relative to the prior block's difficulty. E.g. if the penultimate
block in the difficulty cycle is under the special rule the difficulty
change will be relative to 1.

(I had intentionally avoided triggering that test case when adding the
timewarp attack to the testnet chain in case we had wanted to fix it
prior to testnet3's release? I guess I should have added it sooner in
order to catch the bitcoinj misbehavior!)



From mark at monetize.io  Sun Dec 23 02:33:22 2012
From: mark at monetize.io (Mark Friedenbach)
Date: Sat, 22 Dec 2012 18:33:22 -0800
Subject: [Bitcoin-development] Payment Protocol Proposal:
	Invoices/Payments/Receipts
In-Reply-To: <CABsx9T0PsGLEAWRCjEDDFWQrb+DnJWQZ7mFLaZewAEX6vD1eHw@mail.gmail.com>
References: <CABsx9T0PsGLEAWRCjEDDFWQrb+DnJWQZ7mFLaZewAEX6vD1eHw@mail.gmail.com>
Message-ID: <CACh7GpH107B9XVVCTU0Mm0fCDz9yn7NzkdzNcUnKry=D=GuMdg@mail.gmail.com>

I hope that this input does not come too late; I haven't had time to review
the proposal until now.

For alt-chains that have time-varying value (Freicoin[1], currently), it is
necessary in some applications to include a "reference height" in the
invoice. Since the bitcoin protocol does not assume a universally
agreed-upon time source, Freicoin (and presumably other
yet-to-be-implemented time-varying chains) uses blocktime as the clock for
time-value calculations: outputs lose 2**-20 of their value with each
passing block. The reference height for an invoice is the blocktime at
which amount values are specified and the reference point for time-varying
calculations. As a concrete example, an invoice for payment of 50 frc today
could be satisfied by 49.99313402 frc tomorrow.

To implement this, we would require an optional "uint64 refheight" field in
the invoice structure. "refheight" or "nRefHeight" is what we call this
value internally, but "blocktime" or "blockheight" would work as well.

Github is currently down, so I apologize if a suitable field has already
been added.

Cheers,
Mark Friedenbach

[1] http://freico.in/ "Freicoin: a P2P digital currency delivering freedom
from usury."


On Mon, Nov 26, 2012 at 2:37 PM, Gavin Andresen <gavinandresen at gmail.com>wrote:

> This is the next big "lets all agree to do things the same way" thing
> I think we should tackle. I'm particularly looking for feedback from
> other bitcoin client developers, even if it is just a quick "looks
> reasonable, if everybody else is going to do it then I will
> (eventually) too..."
>
> Thanks to Pieter Wuille and Mike Hearn for lots of feedback and
> suggestions and brainstorming.
>
> This document is online at https://gist.github.com/4120476
>
> If you respond to this message, please be considerate of people who
> subscribe to the digest version of this mailing list and trim your
> response.
>
>
> Invoices, Payments and Receipts for Bitcoin Transactions
> ========================================================
>
> This document proposes protocol buffer-based formats for signed,
> authenticated "invoices" and "receipts" -- requests for payment, and
> proof-of-payment.
>
> Separate documents propose an extension to the Bitcoin URI syntax and
> new MIME types to support them.
>
> Motivation
> ==========
>
> The idea of a "payment protocol" to improve on Bitcoin addresses has
> been around for over a year. Users have been asking for some features
> in this proposal (like the ability to provide a refund address so
> overpayments or refunds can be returned to customers without the need
> to ask them for their address) for two or three years, and have
> started to work around shortcomings in the Bitcoin payment process
> with creative (but inefficient) uses of transactions.
>
> The key features of this proposal are:
>
> + Requests for payment (Invoices) are tied to authenticated identities
> using the only widely-deployed identity authentication system we have
> right now (X.509 certificates signed by root certificate authorities)
> + Invoices include a user-friendly description of what the payment is for
> + Payments include where refunds should be sent
> + At the end of the payment process, the customer holds a
> cryptographically signed Receipt that can be used as proof-of-payment
> if there is any dispute with the merchant.
>
>
> Specification
> =============
>
> Invoice/SignedInvoice
> ---------------------
>
> An Invoice is a request for payment from a merchant to a customer:
>
> ::
>
>     message Output {
>         optional uint64 amount = 1;
>         required bytes script = 2;
>     }
>
> amount: Number of satoshis (0.00000001 BTC) to be paid. If not given
> or zero, then the customer will be asked how much to pay.
>
> script: a "TxOut" script to which the customer should direct payment.
> This will normally be one of the standard Bitcoin transaction script
> (e.g. pubkey OP_CHECKSIG).
>
> ::
>
>     message Invoice {
>         repeated bytes x509chain = 1;
>         repeated Output outputs = 2;
>         required uint64 time = 3;
>         optional uint64 expires = 4;
>         optional bool single_use = 5 [default = true];
>         optional string memo = 6;
>         optional string receiptURI = 7;
>         optional bytes merchant_data = 8;
>     }
>
> outputs: one or more outputs where Bitcoins are to be sent.
>
> x509chain: one or more DER-encoded X.509 certificates that identifies
> the merchant. See the "Certificates" section below for details.
>
> time: Unix timestamp (seconds since 1-Jan-1970) when the Invoice was
> created.
>
> expires: Unix timestamp after which the Invoice should be considered
> invalid. If not given, the Invoice may be re-used until the earliest
> certificate expiration date in the X509chain.
>
> single_use: If true, this Invoice should be used for only one payment.
> If false, it may be added to the user's address book and used
> repeatedly until it expires (e.g. for donations or a recurring
> payment).
>
> memo: UTF-8 encoded, plain-text (no formatting) note that should be
> displayed to the customer, explaining what this Invoice is for.
>
> receiptURI: Secure (https) URI where a Payment message (see below) may
> be sent to obtain a SignedReceipt as proof-of-payment.
>
> merchant_data : Arbitrary data ignored by the client that may be used
> by the merchant to identify the Invoice.
>
> ::
>
>     message SignedInvoice {
>         required Invoice invoice = 1;
>         required bytes signature = 2;
>     }
>
> A SignedInvoice is an Invoice signed using the private key
> corresponding to the public key in the first certificate in the
> x509chain and the HMAC SHA-256 algorithm.
>
> When a Bitcoin client receives a SignedInvoice, it must authorize
> payment by doing the following:
>
> 1. Validate the x509chain certificate chain up to it's list of root
> certificate authorities
> 2. Validate that the time on the customer's system is before
> Invoice.expires
> 3. Display the "Common Name" (CN) string from the first x509chain
> certificate and ask the customer if they would like to submit payment
>
> Payment
> -------
>
> ::
>
>     message Payment {
>         required Invoice invoice = 1;
>         repeated bytes transactions = 2;
>         repeated Output refund_to = 3;
>         optional string memo = 4;
>     }
>
> invoice : the invoice received from the merchant. A merchant must
> validate the Invoice and may reject the Payment if the Invoice was
> altered by the customer.
>
> transactions : One or more valid, signed Bitcoin transactions that
> fully pay the Invoice
>
> refund_to : One or more outputs where the merchant may return funds,
> if necessary.
>
> memo : UTF-8 encoded, plain-text note from the customer to the merchant.
>
> If the customer authorizes payment, then the Bitcoin client:
>
> 1. Creates and signs a transaction with one output sending the
> Invoice.script
> 2. If there is no Invoice.receiptURI, then the transaction is
> broadcast on the Bitcoin p2p network.
> 3. Else POST a Payment message to Invoice.receiptURI and expect a
> SignedReceipt in response.
>
> Invoice.receiptURI must be secure against man-in-the-middle attacks
> that might alter Payment.refund_to.
>
> *Note: an alternative would be a SignedPayment message that ties the
> signatures in Payment.transactions to a signature for the entire
> Payment message. Spending multisig inputs that may be controlled by
> more than one person or spending arbitrary non-standard transactions
> makes that non-trivial.*
>
> Receipt/SignedReceipt
> ---------------------
>
> ::
>
>     message Receipt {
>         required Payment payment = 1;
>         required bool accepted = 2;
>         optional string memo = 3;
>     }
>
> accepted : true if the Payment is accepted and will be broadcast on
> the Bitcoin p2p network.
>
> memo : UTF-8 encoded note that should be displayed to the customer
> indicating that the transaction is complete.
>
> ::
>
>     message SignedReceipt {
>         required Receipt receipt = 1;
>         required bytes signature = 3;
>     }
>
> A SignedReceipt is a Receipt signed using the private key
> corresponding to the public key in the first certificate in the
> Receipt->Payment->Invoice.x509chain and the HMAC SHA-256 algorithm.
>
> Upon receiving a SignedReceipt, a Bitcoin client should validate the
> signature and, if valid, display the Receipt.memo and store the
> SignedReceipt as proof-of-payment.
>
> If a SignedReceipt is not received for any reason (timeout, error) and
> Payment.transactions has not been broadcast by the merchant on the
> Bitcoin p2p network, then the Bitcoin client should assume that the
> payment failed, inform the customer that the payment failed, and
> return coins involved in the transaction to the customer's wallet.
>
>
> Certificates
> ============
>
> The Invoice.x509chain (X.509 Certificate Chain) field contains the
> X.509 public key certificate or certificate chain [RFC5280]
> corresponding to the key used to digitally sign the Invoice and
> Receipt. The certificate or certificate chain is represented as an
> array of DER [ITU.X690.1994] PKIX certificate value. The certificate
> containing the public key of the entity that digitally signed the
> Invoice MUST be the first certificate. This MAY be followed by
> additional certificates, with each subsequent certificate being the
> one used to certify the previous one. The recipient MUST verify the
> certificate chain according to [RFC5280] and reject the payment
> request if any validation failure occurs.
>
> *What should we say about root certificates and certificate management
> in general? Any requirements, or leave it up to each Bitcoin client to
> determine which root CA's are trustworthy, as happens with web
> browsers? Gavin suggests trusting only (say) ten of the Extended
> Validation authorities:
>
> http://en.wikipedia.org/wiki/Extended_Validation_Certificate#Extended_Validation_certificate_identification
> *
>
> *X.509 is widely criticised for doing too much. However, it is the
> Public Key Infrastructure (PKI) system we're stuck with. Do web
> browsers / certificate authorities support the full X.509 spec, or
> only a subset? Should Bitcoin clients only support some well-defined
> subset of X.509 ? More research needed here... *
>
> Use Cases
> =========
>
> Merchant Payment Service
> ------------------------
>
> A merchant payment service (like Paysius or bit-pay.com) would use
> Invoices and Receipts as follows:
>
> 1. Merchant pays for a certificate from a certificate authority, and
> then gives the payment service the certificate and their private key.
> This could be the same certificate and private key as is used for the
> merchant's web site, but best security practice would be to purchase a
> separate certificate for authenticating Invoices. Very successful
> merchant payment services might act as intermediate certificate
> authorities, issuing certificates for their merchants.
> 2. Customer goes through the checkout process on either the merchant's
> or payment service's web site.
> 3. At the end of the checkout process, a SignedInvoice is generated
> and sent to the customer's Bitcoin client.
> 4. Customer's Bitcoin client displays the Invoice, showing that the
> payment is for the merchant.
> 5. On customer approval, a Payment is sent to the payment service's
> paymentURI. The merchant is notified of the payment, and the customer
> receives a SignedReceipt as proof-of-payment.
>
> SatoshiDice
> -----------
>
> SatoshiDice (www.satoshidice.com) is an extremely popular game that
> uses tiny transactions for some customer/service communications. In
> particular, customers can add an extra output to their transactions to
> indicate where winnings should be sent. And SatoshiDice creates tiny
> transactions to let their customers know that a bet was received, but
> lost.
>
> Assuming Bitcoin clients upgrade to support this proposal, a bet on
> SatoshiDice would proceed as follows:
>
> 1. Customer clicks on a link on SatoshiDice.com and their Bitcoin
> client receives a SignedInvoice.
> 2. Customer authorizes payment, and their Bitcoin client creates a
> Payment message and submits it directly to
> https://satoshidice.com/something
> 3. The SatoshiDice web server checks to make sure the transaction is
> valid, broadcasts it, and determines whether the customer wins or
> loses. It returns a SignedReceipt with either a "You win" or "You
> lost" memo.
> 4. If the customer won, it broadcasts a transaction to pay them using
> Payment.refund_to
> 5. Customer's Bitcoin client displays the win/lose memo, and if they
> won the winnings appear in their wallet when received over the p2p
> network.
>
> Multiperson Wallet
> ------------------
>
> This use case starts with a multi-signature Bitcoin address or wallet,
> with keys held by two different people (Alice and Bob). Payments from
> that address/wallet must be authorized by both Alice and Bob, and both
> are running multi-signature-capable Bitcoin clients.
>
> Alice begins the payment process by getting a SignedInvoice from a
> merchant that needs to be paid. She authorizes payment and her Bitcoin
> client creates a Payment message with a partially-signed transaction,
> which is then sent to Bob any way that is convenient (email
> attachment, smoke signals...).
>
> Bob's Bitcoin client validates the SignedInvoice and asks Bob to
> authorize the transaction. He says OK, his Bitcoin client completes
> the transaction by providing his signature, submits the payment to the
> merchant, and then sends a message to Alice with the SignedReceipt he
> received from the merchant, completing the payment process.
>
>
> Design Notes
> ============
>
> Why X.509 Certificates?
> -----------------------
>
> This proposal uses X.509 certificates as the identity system for
> merchants because most of them will have already purchased a
> certificate to secure their website and will be familiar with the
> process of proving their identity to a certificate issuing authority.
>
> Implementing a better global PKI is outside the scope of this
> proposal. If a better PKI is adopted, the only change to this proposal
> would be to replace the Invoice.x509chain with whatever that better
> infrastructure uses to identify entities.
>
>
> Why not JSON?
> -------------
>
> Invoice, Payment and Receipt messages could all be JSON-encoded. And
> the Javascript Object Signing and Encryption (JOSE) working group at
> the IETF has a draft specification for signing JSON data.
>
> But the spec is non-trivial. Signing JSON data is troublesome because
> JSON can encode the same data in multiple ways (whitespace is
> insignificant, characters in strings can be represented escaped or
> un-escaped, etc.), and the standards committee identified at least one
> security-related issue that will require special JSON parsers for
> handling JSON-Web-Signed (JWS) data (duplicate keys must be rejected
> by the parser, which is more strict than the JSON spec requires).
>
> A binary message format has none of those complicating issues. Which
> encoding format to pick is largely a matter of taste, but Protocol
> Buffers is a simple, robust, multi-programming-language,
> well-documented, easy-to-work-with, extensible format.
>
> What about a merchant-pays-fee feature?
> ---------------------------------------
>
> It is desireable to allow a merchant to pay the cost of any Bitcoin
> network transaction processing fees, so if a customer is paying for a
> 1 BTC item they pay exactly 1 BTC.
>
> One way of accomplishing that is to add a 'maxfee' field to the
> Invoice, and have the Bitcoin client construct a transaction that pays
> the merchant (amount-maxfee).
>
> Another way of accomplishing that is to change the transaction
> selection code used by Bitcoin miners, so that dependent transactions
> are considered as a group. Then a merchant with several unconfirmed
> zero-fee transaction from customers can create a pay-to-self
> transaction with a large enough fee to pay for the set of transactions
> to be confirmed.
>
> A third way of accomplishing that is for the Bitcoin client to sign
> Payment.transactions[0] using the SIGHASH_ANYONECANPAY flag, and for
> the merchant to add an additional, small-BTC-value input to the
> transaction before broadcasting it. That additional input would go
> directly to miners as a fee. *Note: Gavin is not sure if he loves or
> hates this idea.*
>
> Checking for revoked certificates
> ---------------------------------
>
> The Online Certificate Checking Protocol (OCSP) is supposed to be a
> quick and easy way for applications to check for revoked certificates.
>
> In practice, it doesn't work very well. Certificate Authorities have
> no financial incentive to support a robust infrastructure that can
> handle millions of OCSP validation requests quickly.
>
> Ideally, Bitcoin clients would use OCSP to check certificate statuses
> every time they received or re-used an Invoice. But if that results in
> long pauses or lots of false-positive rejections (because an OCSP
> endpoint is offline or overwhelmed, perhaps) then merchants and
> customers might revert to just using "never fails" Bitcoin addresses.
>
>
>
> References
> ==========
>
> Public-Key Infrastructure (X.509) working group :
> http://datatracker.ietf.org/wg/pkix/charter/
>
> RFC 2560, X.509 Internet Public Key Infrastructure Online Certificate
> Status Protocol - OCSP : http://tools.ietf.org/html/rfc2560
>
> Protocol Buffers : https://developers.google.com/protocol-buffers/
>
> See Also
> ========
>
> Javascript Object Signing and Encryption working group :
> http://datatracker.ietf.org/wg/jose/
>
> sipa's payment protocol proposal: https://gist.github.com/1237788
>
> ThomasV's "Signed Aliases" proposal : http://ecdsa.org/bitcoin_URIs.html
>
>
> ------------------------------------------------------------------------------
> Monitor your physical, virtual and cloud infrastructure from a single
> web console. Get in-depth insight into apps, servers, databases, vmware,
> SAP, cloud infrastructure, etc. Download 30-day Free Trial.
> Pricing starts from $795 for 25 servers or applications!
> http://p.sf.net/sfu/zoho_dev2dev_nov
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20121222/693f9192/attachment.html>

From tyrell.elden at gmail.com  Mon Dec 24 00:38:09 2012
From: tyrell.elden at gmail.com (Elden Tyrell)
Date: Sun, 23 Dec 2012 16:38:09 -0800
Subject: [Bitcoin-development] Payment Protocol Proposal:
	Invoices/Payments/Receipts
References: <CABsx9T0PsGLEAWRCjEDDFWQrb+DnJWQZ7mFLaZewAEX6vD1eHw@mail.gmail.com>
	<20121129185330.GE6368@giles.gnomon.org.uk>
	<CABsx9T35qD_xJEVw002eAhJ1kr6x5aMU7RpD+U84XEOZXmXcYw@mail.gmail.com>
	<CAErK2ChjAm-Zf11YXuBQeTQvahOEJNGiPSZaD-CQ=OU9K6HtZA@mail.gmail.com>
	<CAKaEYh+OUD4kfxwSNQBCJXmj6Kwb8jy9Au=Mfrqr2sKv7SuHpg@mail.gmail.com>
	<CA+8xBpeya92UR60_ba+xYycjONOOvYUcW4Fe+SNdWwpg7aWEHw@mail.gmail.com>
	<CAKaEYh+jJn0dPsGn_RnOy3NmWMc0F12Dffx2jYBUA=z+W45fWA@mail.gmail.com>
	<CANEZrP1v9E1S1VA2p-pCzrobp8ueWZTf0r0stZ3JyJ==u_Zgxg@mail.gmail.com>
	<CAKaEYhLbeBfJeLtBJTkX6S-MbqdWuQrcpNKpY2Czhhk3T6frmA@mail.gmail.com>
	<CABsx9T1QjDfg-hKorJCk8Sdhf0fw9qQjV8R8EPNvU0m0nQF3tw@mail.gmail.com>
	<CADb9v0K9xD+ndB-dJDkmPOuo1omrtMk3WTo238OjVcWoQ-CmXA@mail.gmail.com>
	<CANEZrP162Q=hoqBQvLPm6rT=xNHMOtau42gDzRS4ddEtMFk5Uw@mail.gmail.com>
	<CADb9v0Lc3HDpLO_ZdibPcxyrggACVfG+482oj72=986pfSc4mA@mail.gmail.com>
	<CADb9v0JaKFuDCY=NHRYQEjUAt4VKVm5pO2XZHgVttKYv-iQisg@mail.gmail.com>
Message-ID: <kb885e$odv$1@ger.gmane.org>

On 2012-12-21 17:05:21 +0000, Stephen Pair said:
> Also, identity is one thing, an elaborate trust based identity 
> verification system (like CA's) is a whole other thing.

Your distinction between "identity" and "trust-based identity" is one 
of the most important insights to emerge from this thread.  Thank you 
for pointing this out.

> the first task at hand is to implement secure, private messaging... 
> it's easy to do and you don't need to solve the PKI problem.





From mike at plan99.net  Mon Dec 24 16:21:26 2012
From: mike at plan99.net (Mike Hearn)
Date: Mon, 24 Dec 2012 17:21:26 +0100
Subject: [Bitcoin-development] Testnet3 difficulty transition problem?
In-Reply-To: <CAAS2fgTM6n17x+3Oen78LHeAVuyOaXLCy285NKqqCLN74VB_=Q@mail.gmail.com>
References: <kb4upt$9vo$1@ger.gmane.org>
	<CAAS2fgQKidxKmJ47oDi80YZrTW_MrVYf_u_tcZtO+xv2o+8S+w@mail.gmail.com>
	<CAAS2fgTM6n17x+3Oen78LHeAVuyOaXLCy285NKqqCLN74VB_=Q@mail.gmail.com>
Message-ID: <CANEZrP2-5ktJM2m5pnf5cxTTbpFgTnhnrbh5uHo0JtbJqkDXrw@mail.gmail.com>

I pushed a fix for this.



From mike at plan99.net  Thu Dec 27 16:28:59 2012
From: mike at plan99.net (Mike Hearn)
Date: Thu, 27 Dec 2012 16:28:59 +0000
Subject: [Bitcoin-development] Has anyone compiled under MacOS 10.8?
In-Reply-To: <CANEZrP2YFM9-Lqp97xksfp7pW-8rPQYkdViShJ=-E2JCNt4B9w@mail.gmail.com>
References: <CANEZrP2ior3tHm9feem9JKqg-WBOzfGqOpLVKvQ3Up_6xbk4yQ@mail.gmail.com>
	<CANEZrP2YFM9-Lqp97xksfp7pW-8rPQYkdViShJ=-E2JCNt4B9w@mail.gmail.com>
Message-ID: <CANEZrP1bJZLbAUOi8A0ne_6L+ugksVUy9X+PuwjuFKxWC6xtAA@mail.gmail.com>

The problem mysteriously resurfaced. The magic incantation this time is to add:

unix:*-g++*: QMAKE_CXXFLAGS += -fpermissive

to the top. I suspect this may be related to how I am using qmake. To
make it spit out a real makefile instead of an xcode project, I have
to run it like "gmake -spec macx-g++", which perhaps ends up making
gcc stricter than it's supposed to be.

On Thu, Nov 29, 2012 at 8:34 PM, Mike Hearn <mike at plan99.net> wrote:
> I found that the problem is the version of the Qt SDK I used didn't
> like the new MacOS version. Re-installing Qt fixed it.
>
> On Mon, Nov 26, 2012 at 4:05 PM, Mike Hearn <mike at plan99.net> wrote:
>> It appears that something about Boost doesn't play nicely with the default
>> build instructions (possibly the switch to clang++?).
>>
>> I will dig in eventually but for now, if anyone has a recipe that fixes
>> things, let me know.



