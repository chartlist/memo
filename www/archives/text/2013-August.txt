From kip at thevertigo.com  Fri Aug  2 19:08:52 2013
From: kip at thevertigo.com (Kip Warner)
Date: Fri, 02 Aug 2013 12:08:52 -0700
Subject: [Bitcoin-development] More appropriate XDG menu category for
	bitcoin-qt
Message-ID: <1375470532.3066.19.camel@rommel>

Hey list,

Currently the bitcoin-qt application's XDG desktop integration on some
desktop environments requests that it be placed under the "Office" menu
category.[1] This is a rather broad category and I would like to suggest
that this be refined further into "Finance", given that XDG's menu
specification allows for this.[2]

I believe the line in question in bitcoin-qt.desktop should be as
follows:

        Categories=Office;Finance;

I would have provided this trivial patch myself, but my knowledge of Git
is rather weak and I apologize.

Respectfully,

[1] <https://github.com/bitcoin/bitcoin/blob/master/contrib/debian/bitcoin-qt.desktop>
[2] <http://standards.freedesktop.org/menu-spec/latest/apas02.html>

-- 
Kip Warner -- Software Engineer
OpenPGP encrypted/signed mail preferred
http://www.thevertigo.com
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 198 bytes
Desc: This is a digitally signed message part
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130802/481f9527/attachment.sig>

From aaxiomfinity at gmail.com  Fri Aug  2 20:40:27 2013
From: aaxiomfinity at gmail.com (Chris Evans)
Date: Fri, 2 Aug 2013 13:40:27 -0700
Subject: [Bitcoin-development] btc name server
Message-ID: <CAE0e52VWbpeE+BYRhgOX0d9JppMhaXh5VdZVOT45wdybpwU0rg@mail.gmail.com>

wonder if it would be good idea to have a alias to wallet id nameserver in
the client software where a person can use a english name to describe a
wallet public key address?  and the software can use it to look up the
wallet id.

wallet ids are hard to remember/recall.

-chris
http://tawhakisoft.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130802/ec899bd8/attachment.html>

From luke at dashjr.org  Fri Aug  2 20:55:26 2013
From: luke at dashjr.org (Luke-Jr)
Date: Fri, 2 Aug 2013 20:55:26 +0000
Subject: [Bitcoin-development] btc name server
In-Reply-To: <CAE0e52VWbpeE+BYRhgOX0d9JppMhaXh5VdZVOT45wdybpwU0rg@mail.gmail.com>
References: <CAE0e52VWbpeE+BYRhgOX0d9JppMhaXh5VdZVOT45wdybpwU0rg@mail.gmail.com>
Message-ID: <201308022055.34056.luke@dashjr.org>

Chris,

First, an important point: addresses are not wallet ids. They are single-use 
destinations for a single transaction. It isn't intended that anyone should 
remember them, just that they should send them electronically (or with eg, QR-
Codes). Bitcoin does not (yet?) have a person/wallet identity system, but 
there are other mechanisms for this already (eg, PGP).

With regard to your idea, I believe it is satisfied by the new Payment 
Protocol that Gavin has been working on. You will be able to publish a URI for 
a website which people can reuse to pay you more than once.

Luke


On Friday, August 02, 2013 8:40:27 PM Chris Evans wrote:
> wonder if it would be good idea to have a alias to wallet id nameserver in
> the client software where a person can use a english name to describe a
> wallet public key address?  and the software can use it to look up the
> wallet id.
> 
> wallet ids are hard to remember/recall.
> 
> -chris
> http://tawhakisoft.com/



From rick at support-intelligence.com  Fri Aug  2 21:16:09 2013
From: rick at support-intelligence.com (Rick Wesson)
Date: Fri, 2 Aug 2013 14:16:09 -0700
Subject: [Bitcoin-development] btc name server
In-Reply-To: <CAE0e52VWbpeE+BYRhgOX0d9JppMhaXh5VdZVOT45wdybpwU0rg@mail.gmail.com>
References: <CAE0e52VWbpeE+BYRhgOX0d9JppMhaXh5VdZVOT45wdybpwU0rg@mail.gmail.com>
Message-ID: <CAJ1JLts7QKa3Et3xhnDFJpC0YV=X7LWjLeVjXgooLHw7WGiNqw@mail.gmail.com>

I'd raised this topic before suggesting to leverage DNS as its kinda useful
for mapping names to numbers.

Expect no support.

-rick

On Fri, Aug 2, 2013 at 1:40 PM, Chris Evans <aaxiomfinity at gmail.com> wrote:

> wonder if it would be good idea to have a alias to wallet id nameserver in
> the client software where a person can use a english name to describe a
> wallet public key address?  and the software can use it to look up the
> wallet id.
>
> wallet ids are hard to remember/recall.
>
> -chris
> http://tawhakisoft.com/
>
>
>
> ------------------------------------------------------------------------------
> Get your SQL database under version control now!
> Version control is standard for application code, but databases havent
> caught up. So what steps can you take to put your SQL databases under
> version control? Why should you start doing it? Read more to find out.
> http://pubads.g.doubleclick.net/gampad/clk?id=49501711&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130802/9bdd2349/attachment.html>

From jayf at outlook.com  Sat Aug  3 03:18:31 2013
From: jayf at outlook.com (Jay F)
Date: Fri, 2 Aug 2013 20:18:31 -0700
Subject: [Bitcoin-development] btc name server
In-Reply-To: <CAJ1JLts7QKa3Et3xhnDFJpC0YV=X7LWjLeVjXgooLHw7WGiNqw@mail.gmail.com>
References: <CAE0e52VWbpeE+BYRhgOX0d9JppMhaXh5VdZVOT45wdybpwU0rg@mail.gmail.com>
	<CAJ1JLts7QKa3Et3xhnDFJpC0YV=X7LWjLeVjXgooLHw7WGiNqw@mail.gmail.com>
Message-ID: <BLU0-SMTP22706C79EE7FF3C1DCEC577C8520@phx.gbl>

Namecoin already has an id/ and a/ (alias) namespace for such use:

{ "name" : "id/pichler", "value" : 
"\"BM-GtK6TiTtVo9toGVdk2zy3t4jGXZyZeMH\"", "expires_in" : 29397 },
{ "name" : "id/pigeons", "value" : "{ bitcoin: 
1BekNv7ezkx8eAjdkrUta2BTp9bbxU9LGG, bitmessage: 
BM-opfhTsUKdTezPiWFHxRQtM1ZMDvjKMkHf, ripple: rnziParaNb8nsU4aruQ
dwYE3j5jUcqjzFm}", "expires_in" : 10089 },
{ "name" : "id/pisces", "value" : 
"\"BM-GtK6TiTtVo9toGVdk2zy3t4jGXZyZeMH\"", "expires_in" : 32034 },
{ "name" : "id/plattler", "value" : 
"\"BM-GtK6TiTtVo9toGVdk2zy3t4jGXZyZeMH\"", "expires_in" : 30999 },
{ "name" : "id/pope", "value" : "{\n   \"bitmessage\"    : 
\"BM-2D7L1Suh1choaKt321Le3bS6PT6nxfWqpR\"\n}", "expires_in" : 29765 },

It's popular enough that it's been squat spammed by a few actors 
recently, and several bitmessage IDs are there along with Bitcoin 
addresses, etc.

On 8/2/2013 2:16 PM, Rick Wesson wrote:
> I'd raised this topic before suggesting to leverage DNS as its kinda
> useful for mapping names to numbers.
>
> Expect no support.
>
> -rick
>
> On Fri, Aug 2, 2013 at 1:40 PM, Chris Evans <aaxiomfinity at gmail.com
> <mailto:aaxiomfinity at gmail.com>> wrote:
>
>     wonder if it would be good idea to have a alias to wallet id
>     nameserver in the client software where a person can use a english
>     name to describe a wallet public key address?  and the software can
>     use it to look up the wallet id.
>
>     wallet ids are hard to remember/recall.
>
>     -chris
>     http://tawhakisoft.com/
>
>
>     ------------------------------------------------------------------------------
>     Get your SQL database under version control now!
>     Version control is standard for application code, but databases havent
>     caught up. So what steps can you take to put your SQL databases under
>     version control? Why should you start doing it? Read more to find out.
>     http://pubads.g.doubleclick.net/gampad/clk?id=49501711&iu=/4140/ostg.clktrk
>     _______________________________________________
>     Bitcoin-development mailing list
>     Bitcoin-development at lists.sourceforge.net
>     <mailto:Bitcoin-development at lists.sourceforge.net>
>     https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
>
>
> ------------------------------------------------------------------------------
> Get your SQL database under version control now!
> Version control is standard for application code, but databases havent
> caught up. So what steps can you take to put your SQL databases under
> version control? Why should you start doing it? Read more to find out.
> http://pubads.g.doubleclick.net/gampad/clk?id=49501711&iu=/4140/ostg.clktrk
>
>
>
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>




From melvincarvalho at gmail.com  Sun Aug  4 17:13:46 2013
From: melvincarvalho at gmail.com (Melvin Carvalho)
Date: Sun, 4 Aug 2013 19:13:46 +0200
Subject: [Bitcoin-development] Preparing for the Cryptopocalypse
Message-ID: <CAKaEYh+G-cEif43UG1NhZ-zwJwos1-tsW-ZTMtWrHm+t3GCtzQ@mail.gmail.com>

A great presentation on advances in crypto

http://www.slideshare.net/astamos/bh-slides
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130804/6ab0d8c5/attachment.html>

From etotheipi at gmail.com  Sun Aug  4 18:06:44 2013
From: etotheipi at gmail.com (Alan Reiner)
Date: Sun, 04 Aug 2013 14:06:44 -0400
Subject: [Bitcoin-development] Preparing for the Cryptopocalypse
In-Reply-To: <CAKaEYh+G-cEif43UG1NhZ-zwJwos1-tsW-ZTMtWrHm+t3GCtzQ@mail.gmail.com>
References: <CAKaEYh+G-cEif43UG1NhZ-zwJwos1-tsW-ZTMtWrHm+t3GCtzQ@mail.gmail.com>
Message-ID: <51FE9834.7090007@gmail.com>

That is a great presentation, thanks for sharing that!

Though I question the validity of the claim that ECC is so much more
secure than RSA (with appropriate keysizes).  My experience from
studying quantum computing is that Factoring and DLP are intimately
related, such that a break of one is likely to break the other.  In
fact, I seem to remember that QCs use an efficient DLP-solving circuit
to "shortcut" the factoring problem.  But it's been a long time since I
looked at it, so I don't remember for sure.   Also, it's not clear
whether that relationship exists outside the scope of QCs.

It's still a good presentation, but they're pushing ECC pretty hard as
the answer to the cryptopocalypse, and I'm not convinced that's a real
answer.

-Alan



On 08/04/2013 01:13 PM, Melvin Carvalho wrote:
> A great presentation on advances in crypto
>
> http://www.slideshare.net/astamos/bh-slides
>
>
> ------------------------------------------------------------------------------
> Get your SQL database under version control now!
> Version control is standard for application code, but databases havent 
> caught up. So what steps can you take to put your SQL databases under 
> version control? Why should you start doing it? Read more to find out.
> http://pubads.g.doubleclick.net/gampad/clk?id=49501711&iu=/4140/ostg.clktrk
>
>
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130804/269d2aa8/attachment.html>

From peter at coinlab.com  Mon Aug  5 03:30:25 2013
From: peter at coinlab.com (Peter Vessenes)
Date: Sun, 4 Aug 2013 20:30:25 -0700
Subject: [Bitcoin-development] Preparing for the Cryptopocalypse
In-Reply-To: <51FE9834.7090007@gmail.com>
References: <CAKaEYh+G-cEif43UG1NhZ-zwJwos1-tsW-ZTMtWrHm+t3GCtzQ@mail.gmail.com>
	<51FE9834.7090007@gmail.com>
Message-ID: <CAMGNxUuhpOF+fOpHxQ7ZrV2=tGTEhfF3LiA=g87HZW=0QkNzYA@mail.gmail.com>

I studied with Jeffrey Hoffstein at Brown, one of the creators of NTRU. He
told me recently NTRU, which is lattice based, is one of the few (only?)
NIST-recommended QC-resistant algorithms.

We talked over layering on NTRU to Bitcoin last year when I was out that
way; I think such a thing could be done relatively easily from a crypto
standpoint. Of course, there are many, many more questions beyond just the
crypto.

Peter
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130804/fd39b084/attachment.html>

From john.dillon892 at googlemail.com  Mon Aug  5 05:29:00 2013
From: john.dillon892 at googlemail.com (John Dillon)
Date: Mon, 5 Aug 2013 05:29:00 +0000
Subject: [Bitcoin-development] Preparing for the Cryptopocalypse
In-Reply-To: <CAMGNxUuhpOF+fOpHxQ7ZrV2=tGTEhfF3LiA=g87HZW=0QkNzYA@mail.gmail.com>
References: <CAKaEYh+G-cEif43UG1NhZ-zwJwos1-tsW-ZTMtWrHm+t3GCtzQ@mail.gmail.com>
	<51FE9834.7090007@gmail.com>
	<CAMGNxUuhpOF+fOpHxQ7ZrV2=tGTEhfF3LiA=g87HZW=0QkNzYA@mail.gmail.com>
Message-ID: <CAPaL=UXqxS_p-cLt_Jvh2dzq-dr5nt1RQu1ojEnBxmSN+EuD7A@mail.gmail.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256

On Mon, Aug 5, 2013 at 3:30 AM, Peter Vessenes <peter at coinlab.com> wrote:
> I studied with Jeffrey Hoffstein at Brown, one of the creators of NTRU. He
> told me recently NTRU, which is lattice based, is one of the few (only?)
> NIST-recommended QC-resistant algorithms.
>
> We talked over layering on NTRU to Bitcoin last year when I was out that
> way; I think such a thing could be done relatively easily from a crypto
> standpoint. Of course, there are many, many more questions beyond just the
> crypto.

Is NTRU still an option? My understanding is that NTRUsign, the algorithm to
produce signatures as opposed to encryption, was broken last year:
http://www.di.ens.fr/~ducas/NTRUSign_Cryptanalysis/DucasNguyen_Learning.pdf

Having said that my understanding is also that the break requires a few
thousand signatures, so perhaps for Bitcoin it would still be acceptable given
that we can, and should, never create more than one signature for any given key
anyway. You would be betting that improving the attack from a few thousand
signatures to one is not possible however.

In any case, worst comes to worst there are always lamport signatures. If they
are broken hash functions are broken and Bitcoin is fundementally broken
anyway, though it would be nice to have alternatives that are similar is pubkey
and signature size to ECC.

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.11 (GNU/Linux)

iQEcBAEBCAAGBQJR/zffAAoJEEWCsU4mNhiPypEH/1AoIR5eWewNbGO9/AZNykwf
Rs3P1iOJYt4oR0oTOHwlsXKX1qU9QAvWQUjDH60XyChCqb+E+xMz4LZgV6H71A03
XcEUZ6r4TRtEdH5kWwtoaxz2oxIIfwfRHIisUCCX2VvXzlBDjcuZvPQXSB0KE8Sx
z8pBZuRKbLeU19COK4BZs1/83/DTsYrV0Ln3LYT3UT5oiJBzA9pmX0cVxQePx2rc
hoNaxR4wR/oCUCvv73xhbzvB91RrAEgrJsd1ve4qR14LxWeOnTHqWQ2/E5JechZz
is/ryBW1Yit5GmsQlfNtKhS3zAaiCjha5e03CaSSlT0LjuVabe2A43LfEb0n4Mw=
=c5f5
-----END PGP SIGNATURE-----



From etotheipi at gmail.com  Mon Aug  5 05:37:53 2013
From: etotheipi at gmail.com (Alan Reiner)
Date: Mon, 05 Aug 2013 01:37:53 -0400
Subject: [Bitcoin-development] Preparing for the Cryptopocalypse
In-Reply-To: <CAPaL=UXqxS_p-cLt_Jvh2dzq-dr5nt1RQu1ojEnBxmSN+EuD7A@mail.gmail.com>
References: <CAKaEYh+G-cEif43UG1NhZ-zwJwos1-tsW-ZTMtWrHm+t3GCtzQ@mail.gmail.com>
	<51FE9834.7090007@gmail.com>
	<CAMGNxUuhpOF+fOpHxQ7ZrV2=tGTEhfF3LiA=g87HZW=0QkNzYA@mail.gmail.com>
	<CAPaL=UXqxS_p-cLt_Jvh2dzq-dr5nt1RQu1ojEnBxmSN+EuD7A@mail.gmail.com>
Message-ID: <51FF3A31.5050209@gmail.com>

Whoops, I didn't mean to run us down the Quantum Computing debate path. 
I was simply using my experience with QCs as a basis for questioning the
conclusion that ECDLP is so much more robust than RSA/factoring
problems.  It's possible we would simply be jumping from one burning
bridge to another burning bridge by rushing to convert everything to ECC
in the event of a factoring breakthrough.

>From the perspective of quantum computers, it seems those two problems
are essentially the same.  As I said, I remember that one of the
problems is solved by using the solution/circuit for the other.  But I
don't know if this relationship holds outside the realm of QCs.   The
guy who did this presentation said he's not a mathematician and/or
cryptographer, yet he still strongly asserts the superiority of ECDLP. 
I'm not convinced.


On 08/05/2013 01:29 AM, John Dillon wrote:
> On Mon, Aug 5, 2013 at 3:30 AM, Peter Vessenes <peter at coinlab.com> wrote:
> > I studied with Jeffrey Hoffstein at Brown, one of the creators of
NTRU. He
> > told me recently NTRU, which is lattice based, is one of the few (only?)
> > NIST-recommended QC-resistant algorithms.
>
> > We talked over layering on NTRU to Bitcoin last year when I was out that
> > way; I think such a thing could be done relatively easily from a crypto
> > standpoint. Of course, there are many, many more questions beyond
just the
> > crypto.
>
> Is NTRU still an option? My understanding is that NTRUsign, the
algorithm to
> produce signatures as opposed to encryption, was broken last year:
>
http://www.di.ens.fr/~ducas/NTRUSign_Cryptanalysis/DucasNguyen_Learning.pdf
>
> Having said that my understanding is also that the break requires a few
> thousand signatures, so perhaps for Bitcoin it would still be
acceptable given
> that we can, and should, never create more than one signature for any
given key
> anyway. You would be betting that improving the attack from a few thousand
> signatures to one is not possible however.
>
> In any case, worst comes to worst there are always lamport signatures.
If they
> are broken hash functions are broken and Bitcoin is fundementally broken
> anyway, though it would be nice to have alternatives that are similar
is pubkey
> and signature size to ECC.
>

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130805/37d7063b/attachment.html>

From gmaxwell at gmail.com  Mon Aug  5 06:41:57 2013
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Sun, 4 Aug 2013 23:41:57 -0700
Subject: [Bitcoin-development] Preparing for the Cryptopocalypse
In-Reply-To: <CAMGNxUuhpOF+fOpHxQ7ZrV2=tGTEhfF3LiA=g87HZW=0QkNzYA@mail.gmail.com>
References: <CAKaEYh+G-cEif43UG1NhZ-zwJwos1-tsW-ZTMtWrHm+t3GCtzQ@mail.gmail.com>
	<51FE9834.7090007@gmail.com>
	<CAMGNxUuhpOF+fOpHxQ7ZrV2=tGTEhfF3LiA=g87HZW=0QkNzYA@mail.gmail.com>
Message-ID: <CAAS2fgTPFHGQVs8qUj+8NyRQ3Ym=ws=_+FuWWvyYra5r-PZsdQ@mail.gmail.com>

On Sun, Aug 4, 2013 at 8:30 PM, Peter Vessenes <peter at coinlab.com> wrote:
> I studied with Jeffrey Hoffstein at Brown, one of the creators of NTRU. He
> told me recently NTRU, which is lattice based, is one of the few (only?)
> NIST-recommended QC-resistant algorithms.

Lamport signatures (and merkle tree variants that allow reuse) are
simpler, faster, trivially implemented, and intuitively secure under
both classical and quantum computation (plus unlikely some proposed QC
strong techniques they're patent clear).  They happen to be the only
digital signature scheme that you really can successfully explain to
grandma (even for values of grandma which are not cryptographers).

They have poor space/bandwidth usage properties, which is one reason
why Bitcoin doesn't use them today, but as far as I know the same is
so for all post-QC schemes.

> Though I question the validity of the claim that ECC is so much more secure than RSA (with appropriate keysizes).

The problems are intimately related, but under the best understanding
ECC (with suitable parameters) ends up being the maximally hard case
of that problem class.   I do sometimes worry about breakthroughs that
give index-calculus level performance for general elliptic curves,
this still wouldn't leave it any weaker than RSA but ECC is typically
used with smaller keys.



From w at grabhive.com  Mon Aug  5 14:39:49 2013
From: w at grabhive.com (Wendell)
Date: Mon, 5 Aug 2013 16:39:49 +0200
Subject: [Bitcoin-development] Safe auto-updating
Message-ID: <EE3869FD-6D83-469A-BF4F-31B79CA9950F@grabhive.com>

For usability purposes, we at Hive would like to have an auto-updater in our wallet app.

What is a safe way to do this? I understand that Bitcoin-QT lacks such an updater for security reasons... Has been thought out in more detail since that decision was made?

We have been toying around with the idea of placing one server behind a Tor hidden service, whose only function is to output a checksum of the update package. The theory is that if it is well-secured, it will at least be immune to tampering at the physical hosting level.

Any thoughts or advice about any of this?

-wendell

grabhive.com | twitter.com/grabhive | gpg: 6C0C9411

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 841 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130805/bc30fd43/attachment.sig>

From peter at coinlab.com  Mon Aug  5 15:37:44 2013
From: peter at coinlab.com (Peter Vessenes)
Date: Mon, 5 Aug 2013 08:37:44 -0700
Subject: [Bitcoin-development] Preparing for the Cryptopocalypse
In-Reply-To: <CAAS2fgTPFHGQVs8qUj+8NyRQ3Ym=ws=_+FuWWvyYra5r-PZsdQ@mail.gmail.com>
References: <CAKaEYh+G-cEif43UG1NhZ-zwJwos1-tsW-ZTMtWrHm+t3GCtzQ@mail.gmail.com>
	<51FE9834.7090007@gmail.com>
	<CAMGNxUuhpOF+fOpHxQ7ZrV2=tGTEhfF3LiA=g87HZW=0QkNzYA@mail.gmail.com>
	<CAAS2fgTPFHGQVs8qUj+8NyRQ3Ym=ws=_+FuWWvyYra5r-PZsdQ@mail.gmail.com>
Message-ID: <CAMGNxUvX53CY2dJjWqej-M4=25veZRwKyAqnT_KdP-jY44Y9NA@mail.gmail.com>

Interesting! I will refrain from digging into QC right now, per Alan's
suggestion. :)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130805/278b1525/attachment.html>

From nanotube at gmail.com  Mon Aug  5 15:54:02 2013
From: nanotube at gmail.com (Daniel F)
Date: Mon, 05 Aug 2013 11:54:02 -0400
Subject: [Bitcoin-development] Safe auto-updating
In-Reply-To: <EE3869FD-6D83-469A-BF4F-31B79CA9950F@grabhive.com>
References: <EE3869FD-6D83-469A-BF4F-31B79CA9950F@grabhive.com>
Message-ID: <51FFCA9A.6010208@gmail.com>

If you want package authentication, you should at least throw in some
digital signing, not just a checksum. With a compromised host, both the
checksum and binaries can be changed undetectably, but if there's a
signature made by a key that is not kept on the host, there's no way to
fake a valid binary.

There may be other issues people would want to bring up, but surely just
a checksum is not sufficient.

on 08/05/2013 10:39 AM Wendell said the following:
> For usability purposes, we at Hive would like to have an
> auto-updater
in our wallet app.
> 
> What is a safe way to do this? I understand that Bitcoin-QT lacks
> such
an updater for security reasons... Has been thought out in more detail
since that decision was made?
> 
> We have been toying around with the idea of placing one server
> behind
a Tor hidden service, whose only function is to output a checksum of the
update package. The theory is that if it is well-secured, it will at
least be immune to tampering at the physical hosting level.
> 
> Any thoughts or advice about any of this?
> -wendell
> 
> grabhive.com | twitter.com/grabhive | gpg: 6C0C9411
> 
> 
> 
> ------------------------------------------------------------------------------
> Get your SQL database under version control now!
> Version control is standard for application code, but databases havent 
> caught up. So what steps can you take to put your SQL databases under 
> version control? Why should you start doing it? Read more to find out.
> http://pubads.g.doubleclick.net/gampad/clk?id=49501711&iu=/4140/ostg.clktrk
> 
> 
> 
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 




From etotheipi at gmail.com  Mon Aug  5 16:47:30 2013
From: etotheipi at gmail.com (Alan Reiner)
Date: Mon, 05 Aug 2013 12:47:30 -0400
Subject: [Bitcoin-development] Safe auto-updating
In-Reply-To: <51FFCA9A.6010208@gmail.com>
References: <EE3869FD-6D83-469A-BF4F-31B79CA9950F@grabhive.com>
	<51FFCA9A.6010208@gmail.com>
Message-ID: <51FFD722.5090403@gmail.com>

Indeed.  You can hardcode a "distributor" public key in the software,
and client software will only trust signed data from that key.  Of
course, the private key for that data is not kept on the server
distributing the signed checksums.  Ideally it would be kept offline,
and the couple-times-per-year that you actually execute an upgrade, you
sign the new checksums offline and upload the signed checksum to the
distribution server.  Then even if the server is compromised, the
client-side software will not accept a bogus checksum because it won't
bear the right signature.

If you do this, it would be good to also have some kind of revocation
process that can be used in the event of the offline key being
compromised.  You won't be able to "switch" keys, as that would defeat
the purpose (the attacker who compromises the offline key could just
issue a replacement with his own).  Instead, it would be an irreversible
broadcast that would force clients to start rejecting updates from that
key.  If the key is compromised (and find out), you broadcast the
revocation and the users will stop auto-updating, and be given a warning
that they should manually upgrade the software through trusted
channels.  It's not failproof, but it's a decent way to minimize damage
if you discover compromise early enough.

-Alan






On 08/05/2013 11:54 AM, Daniel F wrote:
> If you want package authentication, you should at least throw in some
> digital signing, not just a checksum. With a compromised host, both the
> checksum and binaries can be changed undetectably, but if there's a
> signature made by a key that is not kept on the host, there's no way to
> fake a valid binary.
>
> There may be other issues people would want to bring up, but surely just
> a checksum is not sufficient.
>
> on 08/05/2013 10:39 AM Wendell said the following:
>> For usability purposes, we at Hive would like to have an
>> auto-updater
> in our wallet app.
>> What is a safe way to do this? I understand that Bitcoin-QT lacks
>> such
> an updater for security reasons... Has been thought out in more detail
> since that decision was made?
>> We have been toying around with the idea of placing one server
>> behind
> a Tor hidden service, whose only function is to output a checksum of the
> update package. The theory is that if it is well-secured, it will at
> least be immune to tampering at the physical hosting level.
>> Any thoughts or advice about any of this?
>> -wendell
>>
>> grabhive.com | twitter.com/grabhive | gpg: 6C0C9411
>>
>>
>>
>> ------------------------------------------------------------------------------
>> Get your SQL database under version control now!
>> Version control is standard for application code, but databases havent 
>> caught up. So what steps can you take to put your SQL databases under 
>> version control? Why should you start doing it? Read more to find out.
>> http://pubads.g.doubleclick.net/gampad/clk?id=49501711&iu=/4140/ostg.clktrk
>>
>>
>>
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>
>
> ------------------------------------------------------------------------------
> Get your SQL database under version control now!
> Version control is standard for application code, but databases havent 
> caught up. So what steps can you take to put your SQL databases under 
> version control? Why should you start doing it? Read more to find out.
> http://pubads.g.doubleclick.net/gampad/clk?id=49501711&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development




From jim618 at fastmail.co.uk  Mon Aug  5 17:14:00 2013
From: jim618 at fastmail.co.uk (Jim)
Date: Mon, 05 Aug 2013 18:14:00 +0100
Subject: [Bitcoin-development] Safe auto-updating
In-Reply-To: <51FFD722.5090403@gmail.com>
References: <EE3869FD-6D83-469A-BF4F-31B79CA9950F@grabhive.com>
	<51FFCA9A.6010208@gmail.com> <51FFD722.5090403@gmail.com>
Message-ID: <1375722840.32601.6177639.39D38240@webmail.messagingengine.com>

One approach you could use would be to use bitcoin signing on 
a list of the build artifacts together with their SHA256 hashes.

If you have a look at the MultiBit release notes you get the 
overall idea:
https://multibit.org/releases/multibit-0.5.13/release.txt

Currently these aren't machine readable but you can imagine
having a machine readable statement with:
+ a list of the files in the build
+ their SHA256 hashes
+ the above bitcoin signed by multiple signatures e.g. 2 of 3

The client can then download the file, check the signature,
check the hashes and knows which files to download.
The acceptable Bitcoin addresses for signatures would
be a whitelist in the client code.





On Mon, Aug 5, 2013, at 05:47 PM, Alan Reiner wrote:
> Indeed.  You can hardcode a "distributor" public key in the software,
> and client software will only trust signed data from that key.  Of
> course, the private key for that data is not kept on the server
> distributing the signed checksums.  Ideally it would be kept offline,
> and the couple-times-per-year that you actually execute an upgrade, you
> sign the new checksums offline and upload the signed checksum to the
> distribution server.  Then even if the server is compromised, the
> client-side software will not accept a bogus checksum because it won't
> bear the right signature.
> 
> If you do this, it would be good to also have some kind of revocation
> process that can be used in the event of the offline key being
> compromised.  You won't be able to "switch" keys, as that would defeat
> the purpose (the attacker who compromises the offline key could just
> issue a replacement with his own).  Instead, it would be an irreversible
> broadcast that would force clients to start rejecting updates from that
> key.  If the key is compromised (and find out), you broadcast the
> revocation and the users will stop auto-updating, and be given a warning
> that they should manually upgrade the software through trusted
> channels.  It's not failproof, but it's a decent way to minimize damage
> if you discover compromise early enough.
> 
> -Alan
> 
> 
> 
> 
> 
> 
> On 08/05/2013 11:54 AM, Daniel F wrote:
> > If you want package authentication, you should at least throw in some
> > digital signing, not just a checksum. With a compromised host, both the
> > checksum and binaries can be changed undetectably, but if there's a
> > signature made by a key that is not kept on the host, there's no way to
> > fake a valid binary.
> >
> > There may be other issues people would want to bring up, but surely just
> > a checksum is not sufficient.
> >
> > on 08/05/2013 10:39 AM Wendell said the following:
> >> For usability purposes, we at Hive would like to have an
> >> auto-updater
> > in our wallet app.
> >> What is a safe way to do this? I understand that Bitcoin-QT lacks
> >> such
> > an updater for security reasons... Has been thought out in more detail
> > since that decision was made?
> >> We have been toying around with the idea of placing one server
> >> behind
> > a Tor hidden service, whose only function is to output a checksum of the
> > update package. The theory is that if it is well-secured, it will at
> > least be immune to tampering at the physical hosting level.
> >> Any thoughts or advice about any of this?
> >> -wendell
> >>
> >> grabhive.com | twitter.com/grabhive | gpg: 6C0C9411
> >>
> >>
> >>
> >> ------------------------------------------------------------------------------
> >> Get your SQL database under version control now!
> >> Version control is standard for application code, but databases havent 
> >> caught up. So what steps can you take to put your SQL databases under 
> >> version control? Why should you start doing it? Read more to find out.
> >> http://pubads.g.doubleclick.net/gampad/clk?id=49501711&iu=/4140/ostg.clktrk
> >>
> >>
> >>
> >> _______________________________________________
> >> Bitcoin-development mailing list
> >> Bitcoin-development at lists.sourceforge.net
> >> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> >>
> >
> > ------------------------------------------------------------------------------
> > Get your SQL database under version control now!
> > Version control is standard for application code, but databases havent 
> > caught up. So what steps can you take to put your SQL databases under 
> > version control? Why should you start doing it? Read more to find out.
> > http://pubads.g.doubleclick.net/gampad/clk?id=49501711&iu=/4140/ostg.clktrk
> > _______________________________________________
> > Bitcoin-development mailing list
> > Bitcoin-development at lists.sourceforge.net
> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 
> 
> ------------------------------------------------------------------------------
> Get your SQL database under version control now!
> Version control is standard for application code, but databases havent 
> caught up. So what steps can you take to put your SQL databases under 
> version control? Why should you start doing it? Read more to find out.
> http://pubads.g.doubleclick.net/gampad/clk?id=49501711&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development


-- 
https://multibit.org    Money, reinvented



From pete at petertodd.org  Mon Aug  5 17:49:36 2013
From: pete at petertodd.org (Peter Todd)
Date: Mon, 05 Aug 2013 13:49:36 -0400
Subject: [Bitcoin-development] Safe auto-updating
In-Reply-To: <51FFD722.5090403@gmail.com>
References: <EE3869FD-6D83-469A-BF4F-31B79CA9950F@grabhive.com>
	<51FFCA9A.6010208@gmail.com> <51FFD722.5090403@gmail.com>
Message-ID: <09169cb2-cc59-4261-84e9-0769ec72af6b@email.android.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256

Gregory Maxwell had some good ideas along these lines at the san jose conference. Extending gitian with these kinds of features would be a good approach.

But I think its worth thinking about attack models. A huge danger with auto-updating is that it is easy to target individuals; if I leave auto-updates on I am essentially trusting the developers capable of signing an update not to specifically try to attack me in the future, a much more risky thing to do than simply  trusting them not to release a malicious release.

Sure you can try to implement anonymous downloads and similar mechanisms, but they all tend to be fragile with regard to deanonymization attacks.

A better way is to ensure that the act of making a release available for download must be public, even if you can control what binaries are made available to a particular target. You can do this by putting a commitment in the blockchain itself. Each person on the signing list creates a transaction with a special form from a specific pubkey that commits to the digest of the binaries, and the auto-update code refuses to update unless it sees that special transaction with a sufficient number of confirmations. The developers now can't make a special release for a specific target without letting the world know they did so, even under coercion.

They developers could of course still make a release with code inside targeting a specific individual, but in theory at least the public can check if their builds are reproducible, and start asking questions why not?

Alan Reiner <etotheipi at gmail.com> wrote:
>Indeed.  You can hardcode a "distributor" public key in the software,
>and client software will only trust signed data from that key.  Of
>course, the private key for that data is not kept on the server
>distributing the signed checksums.  Ideally it would be kept offline,
>and the couple-times-per-year that you actually execute an upgrade, you
>sign the new checksums offline and upload the signed checksum to the
>distribution server.  Then even if the server is compromised, the
>client-side software will not accept a bogus checksum because it won't
>bear the right signature.
>
>If you do this, it would be good to also have some kind of revocation
>process that can be used in the event of the offline key being
>compromised.  You won't be able to "switch" keys, as that would defeat
>the purpose (the attacker who compromises the offline key could just
>issue a replacement with his own).  Instead, it would be an
>irreversible
>broadcast that would force clients to start rejecting updates from that
>key.  If the key is compromised (and find out), you broadcast the
>revocation and the users will stop auto-updating, and be given a
>warning
>that they should manually upgrade the software through trusted
>channels.  It's not failproof, but it's a decent way to minimize damage
>if you discover compromise early enough.
>
>-Alan
>
>
>
>
>
>
>On 08/05/2013 11:54 AM, Daniel F wrote:
>> If you want package authentication, you should at least throw in some
>> digital signing, not just a checksum. With a compromised host, both
>the
>> checksum and binaries can be changed undetectably, but if there's a
>> signature made by a key that is not kept on the host, there's no way
>to
>> fake a valid binary.
>>
>> There may be other issues people would want to bring up, but surely
>just
>> a checksum is not sufficient.
>>
>> on 08/05/2013 10:39 AM Wendell said the following:
>>> For usability purposes, we at Hive would like to have an
>>> auto-updater
>> in our wallet app.
>>> What is a safe way to do this? I understand that Bitcoin-QT lacks
>>> such
>> an updater for security reasons... Has been thought out in more
>detail
>> since that decision was made?
>>> We have been toying around with the idea of placing one server
>>> behind
>> a Tor hidden service, whose only function is to output a checksum of
>the
>> update package. The theory is that if it is well-secured, it will at
>> least be immune to tampering at the physical hosting level.
>>> Any thoughts or advice about any of this?
>>> -wendell
>>>
>>> grabhive.com | twitter.com/grabhive | gpg: 6C0C9411
>>>
>>>
>>>
>>>
>------------------------------------------------------------------------------
>>> Get your SQL database under version control now!
>>> Version control is standard for application code, but databases
>havent
>>> caught up. So what steps can you take to put your SQL databases
>under
>>> version control? Why should you start doing it? Read more to find
>out.
>>>
>http://pubads.g.doubleclick.net/gampad/clk?id=49501711&iu=/4140/ostg.clktrk
>>>
>>>
>>>
>>> _______________________________________________
>>> Bitcoin-development mailing list
>>> Bitcoin-development at lists.sourceforge.net
>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>>
>>
>>
>------------------------------------------------------------------------------
>> Get your SQL database under version control now!
>> Version control is standard for application code, but databases
>havent
>> caught up. So what steps can you take to put your SQL databases under
>
>> version control? Why should you start doing it? Read more to find
>out.
>>
>http://pubads.g.doubleclick.net/gampad/clk?id=49501711&iu=/4140/ostg.clktrk
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
>------------------------------------------------------------------------------
>Get your SQL database under version control now!
>Version control is standard for application code, but databases havent
>caught up. So what steps can you take to put your SQL databases under
>version control? Why should you start doing it? Read more to find out.
>http://pubads.g.doubleclick.net/gampad/clk?id=49501711&iu=/4140/ostg.clktrk
>_______________________________________________
>Bitcoin-development mailing list
>Bitcoin-development at lists.sourceforge.net
>https://lists.sourceforge.net/lists/listinfo/bitcoin-development
-----BEGIN PGP SIGNATURE-----
Version: APG v1.0.8

iHkEAREIADkFAlH/5a8yHFBldGVyIFRvZGQgKGxvdyBzZWN1cml0eSBrZXkpIDxw
ZXRlQHBldGVydG9kZC5jYT4ACgkQpEFN739thozkAACeIu7GINlJqPObyZ+87vA+
2hMphHYAoI3CyuGuSr7xYm0pus0DVgnQc/vD
=nVJA
-----END PGP SIGNATURE-----




From mike at plan99.net  Tue Aug  6 11:09:38 2013
From: mike at plan99.net (Mike Hearn)
Date: Tue, 6 Aug 2013 13:09:38 +0200
Subject: [Bitcoin-development] Preparing for the Cryptopocalypse
In-Reply-To: <CAAS2fgTPFHGQVs8qUj+8NyRQ3Ym=ws=_+FuWWvyYra5r-PZsdQ@mail.gmail.com>
References: <CAKaEYh+G-cEif43UG1NhZ-zwJwos1-tsW-ZTMtWrHm+t3GCtzQ@mail.gmail.com>
	<51FE9834.7090007@gmail.com>
	<CAMGNxUuhpOF+fOpHxQ7ZrV2=tGTEhfF3LiA=g87HZW=0QkNzYA@mail.gmail.com>
	<CAAS2fgTPFHGQVs8qUj+8NyRQ3Ym=ws=_+FuWWvyYra5r-PZsdQ@mail.gmail.com>
Message-ID: <CANEZrP3XQC+R49+PV9TdYsz+XgWQaTShm2gB4zRqk1sgCgt5UA@mail.gmail.com>

> They have poor space/bandwidth usage properties, which is one reason
> why Bitcoin doesn't use them today, but as far as I know the same is
> so for all post-QC schemes.
>

I believe post-QC schemes based on Regev's LWE assumption are getting
competitive with more traditional schemes. A paper from 2010 says they were
able to get to around the same as large RSA key sizes (2048 bits), which is
much worse than ECC but not entirely infeasible. Especially given that
barring some breakthrough, by the time QC is a real problem we'll have
gigabit wifi and 32 core devices with a terabyte of storage embedded in our
hands :)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130806/697536b7/attachment.html>

From w at grabhive.com  Wed Aug  7 04:32:08 2013
From: w at grabhive.com (Wendell)
Date: Wed, 7 Aug 2013 06:32:08 +0200
Subject: [Bitcoin-development] Safe auto-updating
In-Reply-To: <09169cb2-cc59-4261-84e9-0769ec72af6b@email.android.com>
References: <EE3869FD-6D83-469A-BF4F-31B79CA9950F@grabhive.com>
	<51FFCA9A.6010208@gmail.com> <51FFD722.5090403@gmail.com>
	<09169cb2-cc59-4261-84e9-0769ec72af6b@email.android.com>
Message-ID: <4E4E5921-E8BF-4274-A062-EF1FBC331C95@grabhive.com>

That multisignature/blockchain commitment idea seems really solid, Peter.

Thanks very much indeed everyone, this is all very helpful. Much to research and think about.

Interestingly, a thread is presently raging on liberationtech about Tor Browser Bundle, and the subject of automatic updates has come up. Gregory Maxwell responded thusly (cross-posting for completeness):

> _please_ don't deploy automatic updates in a sensitive environment
> like this without at least quorum signatures (like gitian downloader)
> and timed quarantine with negative signatures (harder to make strong
> absent a jamming proof network).

-wendell

grabhive.com | twitter.com/grabhive | gpg: 6C0C9411

On Aug 5, 2013, at 7:49 PM, Peter Todd wrote:

> Gregory Maxwell had some good ideas along these lines at the san jose conference. Extending gitian with these kinds of features would be a good approach.
> 
> But I think its worth thinking about attack models. A huge danger with auto-updating is that it is easy to target individuals; if I leave auto-updates on I am essentially trusting the developers capable of signing an update not to specifically try to attack me in the future, a much more risky thing to do than simply  trusting them not to release a malicious release.
> 
> Sure you can try to implement anonymous downloads and similar mechanisms, but they all tend to be fragile with regard to deanonymization attacks.
> 
> A better way is to ensure that the act of making a release available for download must be public, even if you can control what binaries are made available to a particular target. You can do this by putting a commitment in the blockchain itself. Each person on the signing list creates a transaction with a special form from a specific pubkey that commits to the digest of the binaries, and the auto-update code refuses to update unless it sees that special transaction with a sufficient number of confirmations. The developers now can't make a special release for a specific target without letting the world know they did so, even under coercion.
> 
> They developers could of course still make a release with code inside targeting a specific individual, but in theory at least the public can check if their builds are reproducible, and start asking questions why not?

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 841 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130807/8f8c15c5/attachment.sig>

From mike at plan99.net  Wed Aug  7 08:41:54 2013
From: mike at plan99.net (Mike Hearn)
Date: Wed, 7 Aug 2013 10:41:54 +0200
Subject: [Bitcoin-development] Safe auto-updating
In-Reply-To: <4E4E5921-E8BF-4274-A062-EF1FBC331C95@grabhive.com>
References: <EE3869FD-6D83-469A-BF4F-31B79CA9950F@grabhive.com>
	<51FFCA9A.6010208@gmail.com> <51FFD722.5090403@gmail.com>
	<09169cb2-cc59-4261-84e9-0769ec72af6b@email.android.com>
	<4E4E5921-E8BF-4274-A062-EF1FBC331C95@grabhive.com>
Message-ID: <CANEZrP3bbAUhEYP3jKeBNYCZ3LU2C1DedVBQU2rYYby_Cd3QZQ@mail.gmail.com>

As you're Mac specific you could just use a modified Sparkle or something
like that. Even if you want to use a stock Sparkle, I have some code that
does threshold RSA. My intention was to use it for the Android wallet but I
never found the time. I can send you a copy if you want. But it's easier
and more robust to modify the update framework. Threshold RSA would only be
interesting if you wanted to use the Mac app store, for example.



On Wed, Aug 7, 2013 at 6:32 AM, Wendell <w at grabhive.com> wrote:

> That multisignature/blockchain commitment idea seems really solid, Peter.
>
> Thanks very much indeed everyone, this is all very helpful. Much to
> research and think about.
>
> Interestingly, a thread is presently raging on liberationtech about Tor
> Browser Bundle, and the subject of automatic updates has come up. Gregory
> Maxwell responded thusly (cross-posting for completeness):
>
> > _please_ don't deploy automatic updates in a sensitive environment
> > like this without at least quorum signatures (like gitian downloader)
> > and timed quarantine with negative signatures (harder to make strong
> > absent a jamming proof network).
>
> -wendell
>
> grabhive.com | twitter.com/grabhive | gpg: 6C0C9411
>
> On Aug 5, 2013, at 7:49 PM, Peter Todd wrote:
>
> > Gregory Maxwell had some good ideas along these lines at the san jose
> conference. Extending gitian with these kinds of features would be a good
> approach.
> >
> > But I think its worth thinking about attack models. A huge danger with
> auto-updating is that it is easy to target individuals; if I leave
> auto-updates on I am essentially trusting the developers capable of signing
> an update not to specifically try to attack me in the future, a much more
> risky thing to do than simply  trusting them not to release a malicious
> release.
> >
> > Sure you can try to implement anonymous downloads and similar
> mechanisms, but they all tend to be fragile with regard to deanonymization
> attacks.
> >
> > A better way is to ensure that the act of making a release available for
> download must be public, even if you can control what binaries are made
> available to a particular target. You can do this by putting a commitment
> in the blockchain itself. Each person on the signing list creates a
> transaction with a special form from a specific pubkey that commits to the
> digest of the binaries, and the auto-update code refuses to update unless
> it sees that special transaction with a sufficient number of confirmations.
> The developers now can't make a special release for a specific target
> without letting the world know they did so, even under coercion.
> >
> > They developers could of course still make a release with code inside
> targeting a specific individual, but in theory at least the public can
> check if their builds are reproducible, and start asking questions why not?
>
>
>
> ------------------------------------------------------------------------------
> Get 100% visibility into Java/.NET code with AppDynamics Lite!
> It's a free troubleshooting tool designed for production.
> Get down to code-level detail for bottlenecks, with <2% overhead.
> Download for free and get started troubleshooting in minutes.
> http://pubads.g.doubleclick.net/gampad/clk?id=48897031&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130807/5a276531/attachment.html>

From roy at gnomon.org.uk  Wed Aug  7 20:12:32 2013
From: roy at gnomon.org.uk (Roy Badami)
Date: Wed, 7 Aug 2013 21:12:32 +0100
Subject: [Bitcoin-development] Payment Protocol: BIP 70, 71, 72
In-Reply-To: <CAGRKETunznLbBZO1gnS7WZH5sn=TnmKPS4Gz_Nrtocoe5devbw@mail.gmail.com>
References: <CABsx9T0Ly67ZNJhoRQk0L9Q0-ucq3e=24b5Tg6GRKspRKKtP-g@mail.gmail.com>
	<20130731084538.GL16713@giles.gnomon.org.uk>
	<CABsx9T3Xvnw2H6awgnT7mr-HzJOqCp_nOVM57BD-B9mY4R43aQ@mail.gmail.com>
	<CABsx9T14Dfh8SEe6wsCJjE=S8hTcfDrAUNMBCjtkvM+UH-bAYQ@mail.gmail.com>
	<CAGRKETunznLbBZO1gnS7WZH5sn=TnmKPS4Gz_Nrtocoe5devbw@mail.gmail.com>
Message-ID: <20130807201231.GM16713@giles.gnomon.org.uk>

On Wed, Jul 31, 2013 at 05:30:46PM -0600, E willbefull wrote:
> I think it's important to expect PaymentRequest-only bitcoin URIs in the
> future. Some types of payments (exotic transactions) may not make sense to
> have a single fallback address. Or, a page with a bitcoin URI link may be
> relying on a separate service provider to assemble the transaction.

Also:

* There may be a desire to minimize the URL length when used in a QR code

* Some applications might specifically require some of the features of
the payment protocol - e.g. it may be a requirement that a print-media
QR code cannot be used after a cut-off date, or a vendor may have a
specific requirement not to accept payments without a refund address

There are pros and cons, but it's not clear to me that the benefits of
enforced backward compatibility outweigh the benefits of allowing
application designers to innovate as they see fit.

roy





From pieter.wuille at gmail.com  Wed Aug  7 20:31:45 2013
From: pieter.wuille at gmail.com (Pieter Wuille)
Date: Wed, 7 Aug 2013 22:31:45 +0200
Subject: [Bitcoin-development] Payment Protocol: BIP 70, 71, 72
In-Reply-To: <CABsx9T0Ly67ZNJhoRQk0L9Q0-ucq3e=24b5Tg6GRKspRKKtP-g@mail.gmail.com>
References: <CABsx9T0Ly67ZNJhoRQk0L9Q0-ucq3e=24b5Tg6GRKspRKKtP-g@mail.gmail.com>
Message-ID: <CAPg+sBhb3WOYnWRc020QbGwE0W4XeWWmXXTqYyAqrtB7h0+b8A@mail.gmail.com>

On Wed, Jul 31, 2013 at 8:28 AM, Gavin Andresen <gavinandresen at gmail.com> wrote:
> I've turned the preliminary payment protocol spec into three BIPs:
>
> https://en.bitcoin.it/wiki/BIP_0070 : Network protocol / messages

I don't like the wording for payment_uri "where the payment _may_ be
sent to obtain a paymentACK", or the fact that in the diagram it is
the client wallet broadcasting the transaction to the network.

In my opinion, it should ultimately become the responsibility of the
receiver to get the transaction confirmed. Of course, the sender may
help, and if the transaction does not confirm, no payment took place.
But one of the advantages direct negotiation offers, is that the
sender wallet does not need to remain online anymore to get the
transaction broadcast. I don't think it should be even required that
the sender wallet is connected to the P2P network at all. All they
need to do is construct a satisfactory transaction, and send it to the
merchant who cares about it.

I would suggest the wording, "if a payment_uri is specified, the
wallet application should try - and if necessary, retry - to submit
the transaction there, resulting in a paymentACK from the merchant.
Broadcasting the transaction on the P2P network is optional.". Perhaps
we should even discourage broadcasting before the paymentACK is
obtained, to make sure the merchant received it, together with the
metadata, to decrease the chances of money arriving at a merchant
without metadata (to minimize the cases where manual intervention is
needed).

-- 
Pieter



From gavinandresen at gmail.com  Wed Aug  7 21:10:05 2013
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Thu, 8 Aug 2013 07:10:05 +1000
Subject: [Bitcoin-development] Payment Protocol: BIP 70, 71, 72
In-Reply-To: <CAPg+sBhb3WOYnWRc020QbGwE0W4XeWWmXXTqYyAqrtB7h0+b8A@mail.gmail.com>
References: <CABsx9T0Ly67ZNJhoRQk0L9Q0-ucq3e=24b5Tg6GRKspRKKtP-g@mail.gmail.com>
	<CAPg+sBhb3WOYnWRc020QbGwE0W4XeWWmXXTqYyAqrtB7h0+b8A@mail.gmail.com>
Message-ID: <CABsx9T0o2BN+UyZt-TYcEXX_U0ztP3Rq3+arr_2C1MPEtU_dUg@mail.gmail.com>

RE: making the bitcoin address in the bitcoin: URI optional:

Ok, I'm convinced, sometimes merchants won't want or need backwards
compatibility and sometimes it won't make sense for them to put an
arbitrary bitcoin: address there.

RE: should the customer's machine not broadcast the transaction:

I'd like to hear from other wallet implementors. Do you have a notion
of 'locked inputs' ?  The tricky bit in constructing a transaction but
not broadcasting it right away is the inputs must be locked, so
they're not accidentally double-spent.

I'd also like to hear from merchants: any issue with your payment
processing server having "broadcast transaction" functionality?

My biggest worry is that the payment protocol will not get wide
support if it is too hard to implement.

-- 
--
Gavin Andresen



From mike at plan99.net  Wed Aug  7 21:17:41 2013
From: mike at plan99.net (Mike Hearn)
Date: Wed, 7 Aug 2013 23:17:41 +0200
Subject: [Bitcoin-development] Payment Protocol: BIP 70, 71, 72
In-Reply-To: <CABsx9T0o2BN+UyZt-TYcEXX_U0ztP3Rq3+arr_2C1MPEtU_dUg@mail.gmail.com>
References: <CABsx9T0Ly67ZNJhoRQk0L9Q0-ucq3e=24b5Tg6GRKspRKKtP-g@mail.gmail.com>
	<CAPg+sBhb3WOYnWRc020QbGwE0W4XeWWmXXTqYyAqrtB7h0+b8A@mail.gmail.com>
	<CABsx9T0o2BN+UyZt-TYcEXX_U0ztP3Rq3+arr_2C1MPEtU_dUg@mail.gmail.com>
Message-ID: <CANEZrP2+D4xu0t2efRPfg0t5gD8RRBk=KQEJH+0FF5J=vBmwiA@mail.gmail.com>

> I'd like to hear from other wallet implementors. Do you have a notion
> of 'locked inputs' ?  The tricky bit in constructing a transaction but
> not broadcasting it right away is the inputs must be locked, so
> they're not accidentally double-spent.
>

bitcoinj separates the concept of committing a tx to the wallet from
broadcasting it. However by default transactions that weren't seen in the
chain yet will be announced when a new peer is connected to. It'd take
extra code to suppress that, and it's unclear to me why that's useful. I
agree with Pieter that it should be the merchants responsibility to get the
tx out there, but having the client do the broadcast as well can't really
hurt (except perhaps some privacy impact).
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130807/1951a1d0/attachment.html>

From roy at gnomon.org.uk  Wed Aug  7 21:28:58 2013
From: roy at gnomon.org.uk (Roy Badami)
Date: Wed, 7 Aug 2013 22:28:58 +0100
Subject: [Bitcoin-development] Payment Protocol: BIP 70, 71, 72
In-Reply-To: <CABsx9T0o2BN+UyZt-TYcEXX_U0ztP3Rq3+arr_2C1MPEtU_dUg@mail.gmail.com>
References: <CABsx9T0Ly67ZNJhoRQk0L9Q0-ucq3e=24b5Tg6GRKspRKKtP-g@mail.gmail.com>
	<CAPg+sBhb3WOYnWRc020QbGwE0W4XeWWmXXTqYyAqrtB7h0+b8A@mail.gmail.com>
	<CABsx9T0o2BN+UyZt-TYcEXX_U0ztP3Rq3+arr_2C1MPEtU_dUg@mail.gmail.com>
Message-ID: <20130807212858.GN16713@giles.gnomon.org.uk>

On Thu, Aug 08, 2013 at 07:10:05AM +1000, Gavin Andresen wrote:
> RE: should the customer's machine not broadcast the transaction:

If we're going to allow payments to fail without being broadcast (but
where the wallet can't in general prove that the receiver hasn't seen
the transaction) then I would argue that it becomes highly desirable
that the wallet invalidates the transaction at the earliest
opportunity by spending the outputs in a pay-to-self transaction.

Otherwise malicious receivers, or temporary failures, could result in
the user being told that the transfer didn't happen, but then the
coins actually leaving the wallet anyway a short time later.

roy



From pieter.wuille at gmail.com  Wed Aug  7 21:36:48 2013
From: pieter.wuille at gmail.com (Pieter Wuille)
Date: Wed, 7 Aug 2013 23:36:48 +0200
Subject: [Bitcoin-development] Payment Protocol: BIP 70, 71, 72
In-Reply-To: <CANEZrP2+D4xu0t2efRPfg0t5gD8RRBk=KQEJH+0FF5J=vBmwiA@mail.gmail.com>
References: <CABsx9T0Ly67ZNJhoRQk0L9Q0-ucq3e=24b5Tg6GRKspRKKtP-g@mail.gmail.com>
	<CAPg+sBhb3WOYnWRc020QbGwE0W4XeWWmXXTqYyAqrtB7h0+b8A@mail.gmail.com>
	<CABsx9T0o2BN+UyZt-TYcEXX_U0ztP3Rq3+arr_2C1MPEtU_dUg@mail.gmail.com>
	<CANEZrP2+D4xu0t2efRPfg0t5gD8RRBk=KQEJH+0FF5J=vBmwiA@mail.gmail.com>
Message-ID: <CAPg+sBheF45bsx5it-0v1QjDW--t5UkZZjNjf9wt3d7XgUXLgw@mail.gmail.com>

On Wed, Aug 7, 2013 at 11:17 PM, Mike Hearn <mike at plan99.net> wrote:
>
>> I'd like to hear from other wallet implementors. Do you have a notion
>> of 'locked inputs' ?  The tricky bit in constructing a transaction but
>> not broadcasting it right away is the inputs must be locked, so
>> they're not accidentally double-spent.
>
>> bitcoinj separates the concept of committing a tx to the wallet from
> broadcasting it. However by default transactions that weren't seen in the
> chain yet will be announced when a new peer is connected to. It'd take extra
> code to suppress that, and it's unclear to me why that's useful. I agree
> with Pieter that it should be the merchants responsibility to get the tx out
> there, but having the client do the broadcast as well can't really hurt
> (except perhaps some privacy impact).

My concerns here are:
* Making sure wallet applications can function without supporting the
P2P protocol (which drops a huge implementation overhead for simple -
perhaps hardware-based - wallets).
* Making sure the responsibility of confirming transactions is with
the receiver (while the responsibility of creating a confirmable
transaction is with the sender), which again simplifies wallet
implementation.
* Making receiving of metadata reliable, by minimizing cases where a
transaction is accidentally broadcast without the receiver being told
about it. This is perhaps not possible entirely, but it should be
possible to reduce it to a point where the remaining cases can be
dealt with manually. This also means indeed being able to give a
bitcoin URI (or why not just a URL to a payment descriptor?) that does
not contain a static Bitcoin address. I understand the compatibility
concern here, but IMHO we should do all effort to get rid of static
addresses were possible - the public key should be negotiated be
sender and receiver.

I worry about the scenario where some evil hotspot owner observes a
payment request, and later sees a bitcoin P2P transaction crediting
that key, but without payment being sent to the payment_uri (because
he blocked it), thus allowing him to construct a payment message
himself with the request + transaction, and adding his own refund
address or delivery location, or ... To fix problems related to this
completely, we'd need transactions that commit to the payment message,
instead of the other way around. I believe the pay-to-contract scheme
presented by Timo Hanke at the San Jose conference solved this.

-- 
Pieter



From mike at plan99.net  Wed Aug  7 21:44:29 2013
From: mike at plan99.net (Mike Hearn)
Date: Wed, 7 Aug 2013 23:44:29 +0200
Subject: [Bitcoin-development] Payment Protocol: BIP 70, 71, 72
In-Reply-To: <CAPg+sBheF45bsx5it-0v1QjDW--t5UkZZjNjf9wt3d7XgUXLgw@mail.gmail.com>
References: <CABsx9T0Ly67ZNJhoRQk0L9Q0-ucq3e=24b5Tg6GRKspRKKtP-g@mail.gmail.com>
	<CAPg+sBhb3WOYnWRc020QbGwE0W4XeWWmXXTqYyAqrtB7h0+b8A@mail.gmail.com>
	<CABsx9T0o2BN+UyZt-TYcEXX_U0ztP3Rq3+arr_2C1MPEtU_dUg@mail.gmail.com>
	<CANEZrP2+D4xu0t2efRPfg0t5gD8RRBk=KQEJH+0FF5J=vBmwiA@mail.gmail.com>
	<CAPg+sBheF45bsx5it-0v1QjDW--t5UkZZjNjf9wt3d7XgUXLgw@mail.gmail.com>
Message-ID: <CANEZrP17xEKcPOvQEBuDs-JXaMtEuOcRp8UvH4dvVDc=PyyqsA@mail.gmail.com>

> My concerns here are:
> * Making sure wallet applications can function without supporting the
> P2P protocol (which drops a huge implementation overhead for simple -
> perhaps hardware-based - wallets)


How would such wallets get transactions into their wallet in the first
place?

The P2P protocol is really the simplest part of implementing a wallet, IMO.

I don't really have a strong opinion either way, but doing more work to
prevent transactions being announced to the network feels weird.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130807/1b39e196/attachment.html>

From etotheipi at gmail.com  Wed Aug  7 21:47:07 2013
From: etotheipi at gmail.com (Alan Reiner)
Date: Wed, 07 Aug 2013 17:47:07 -0400
Subject: [Bitcoin-development] Payment Protocol: BIP 70, 71, 72
In-Reply-To: <CABsx9T0o2BN+UyZt-TYcEXX_U0ztP3Rq3+arr_2C1MPEtU_dUg@mail.gmail.com>
References: <CABsx9T0Ly67ZNJhoRQk0L9Q0-ucq3e=24b5Tg6GRKspRKKtP-g@mail.gmail.com>
	<CAPg+sBhb3WOYnWRc020QbGwE0W4XeWWmXXTqYyAqrtB7h0+b8A@mail.gmail.com>
	<CABsx9T0o2BN+UyZt-TYcEXX_U0ztP3Rq3+arr_2C1MPEtU_dUg@mail.gmail.com>
Message-ID: <5202C05B.8090509@gmail.com>

On 08/07/2013 05:10 PM, Gavin Andresen wrote:
> I'd like to hear from other wallet implementors. Do you have a notion
> of 'locked inputs' ?  The tricky bit in constructing a transaction but
> not broadcasting it right away is the inputs must be locked, so
> they're not accidentally double-spent.
>
I have avoided any notion of locking inputs in Armory for offline
wallets.  The underlying concept of why a seemingly-random amount of
funds are inaccessible at a given time is so non-intuitive and difficult
to explain to a non-expert, that I haven't even tried to deal with it.
   Luckily, most users do one operation at a time, so it's not a real a
problem.  But as more businesses have started to use Armory, it /will/
become a problem that will need to be addressed /somehow/.

I have considered at least "marking" inputs to indicate to the user that
the transaction they are creating may not be valid unless all previous
transactions have been broadcast.  The user will not necessarily
understand why, but they might easily comprehend the solution (and
perhaps a button that says "Forget all previously created transactions
that haven't been broadcast.  Press this button if there are no
transactions waiting to be broadcast"). 

Even if the user somewhat understands the concepts behind locking, you
easily end up with a mess of some coins being locked and rejecting
transaction creation somewhat randomly, especially when they create
transactions that they later decide not to execute.  And you have to
give the user a way to manually unlock the outputs which they wouldn't
know to use because it's so non-intuitive.  I'd much rather say "either
do one transaction at a time, or bundle payments into a single
multi-output transaction.  Or risk invalid transactions that have to be
re-created and signed."

-Alan


-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130807/56158e53/attachment.html>

From roy at gnomon.org.uk  Wed Aug  7 21:47:57 2013
From: roy at gnomon.org.uk (Roy Badami)
Date: Wed, 7 Aug 2013 22:47:57 +0100
Subject: [Bitcoin-development] Payment Protocol: BIP 70, 71, 72
In-Reply-To: <CABsx9T0Ly67ZNJhoRQk0L9Q0-ucq3e=24b5Tg6GRKspRKKtP-g@mail.gmail.com>
References: <CABsx9T0Ly67ZNJhoRQk0L9Q0-ucq3e=24b5Tg6GRKspRKKtP-g@mail.gmail.com>
Message-ID: <20130807214757.GA45156@giles.gnomon.org.uk>

Very brief comment on BIP 72:

I wonder if there should be some discussion included in the
specification as to how the BIP 21 amount, message and label
parameters should be processed when the payment protocol is used.

Presumably amount should be completely ignored?  But is the total
amount requestd by the PaymentRequest required to match the amount
parameter (when present)?  Is the client permitted to complain if they
don't?

And what about message?  Presumably the memo from PaymentDetails
should take precedence, but if it's not present, and message is?

I think this is an area perhaps more suited to SHOULDs and MAYs rather
than MUSTs, but it is probably worthy of mention...

roy



From pieter.wuille at gmail.com  Wed Aug  7 21:49:00 2013
From: pieter.wuille at gmail.com (Pieter Wuille)
Date: Wed, 7 Aug 2013 23:49:00 +0200
Subject: [Bitcoin-development] Payment Protocol: BIP 70, 71, 72
In-Reply-To: <CANEZrP17xEKcPOvQEBuDs-JXaMtEuOcRp8UvH4dvVDc=PyyqsA@mail.gmail.com>
References: <CABsx9T0Ly67ZNJhoRQk0L9Q0-ucq3e=24b5Tg6GRKspRKKtP-g@mail.gmail.com>
	<CAPg+sBhb3WOYnWRc020QbGwE0W4XeWWmXXTqYyAqrtB7h0+b8A@mail.gmail.com>
	<CABsx9T0o2BN+UyZt-TYcEXX_U0ztP3Rq3+arr_2C1MPEtU_dUg@mail.gmail.com>
	<CANEZrP2+D4xu0t2efRPfg0t5gD8RRBk=KQEJH+0FF5J=vBmwiA@mail.gmail.com>
	<CAPg+sBheF45bsx5it-0v1QjDW--t5UkZZjNjf9wt3d7XgUXLgw@mail.gmail.com>
	<CANEZrP17xEKcPOvQEBuDs-JXaMtEuOcRp8UvH4dvVDc=PyyqsA@mail.gmail.com>
Message-ID: <CAPg+sBirjUdXu+kWnxpX9Shahf9dxBnGbMF+r75oduej7QFrmQ@mail.gmail.com>

On Wed, Aug 7, 2013 at 11:44 PM, Mike Hearn <mike at plan99.net> wrote:
>
>> My concerns here are:
>> * Making sure wallet applications can function without supporting the
>> P2P protocol (which drops a huge implementation overhead for simple -
>> perhaps hardware-based - wallets)
>
>
> How would such wallets get transactions into their wallet in the first
> place?

By connecting to some other client, presumably. Have a small hardware
client that is able to do payments via NFC/QR/... directly with a
merchant, and can get 'recharged' by connecting with your desktop
client, for example. Maybe too futuristic to be a concern, but it
nicely illustrates how doing direct sender-to-receiver negotiation can
help decoupling tasks.

> I don't really have a strong opinion either way, but doing more work to
> prevent transactions being announced to the network feels weird.

Ok.

-- 
Pieter



From pieter.wuille at gmail.com  Wed Aug  7 21:54:44 2013
From: pieter.wuille at gmail.com (Pieter Wuille)
Date: Wed, 7 Aug 2013 23:54:44 +0200
Subject: [Bitcoin-development] Payment Protocol: BIP 70, 71, 72
In-Reply-To: <20130807214757.GA45156@giles.gnomon.org.uk>
References: <CABsx9T0Ly67ZNJhoRQk0L9Q0-ucq3e=24b5Tg6GRKspRKKtP-g@mail.gmail.com>
	<20130807214757.GA45156@giles.gnomon.org.uk>
Message-ID: <CAPg+sBhTYTiW-7btDuNJKqv8nMiZTUzMU2c+N+YcUVf1EejNJA@mail.gmail.com>

I see payment URIs rather as a replacement for bitcoin: URI rather
than an extension. It solves everything they did in a much cleaner
way, Given that bitcoin: have gotten some traction, we probably want
to reuse the moniker, but replace the rest entirely. In other words,
if a request is specified, nothing else should be.

There is just no useful way to combine them either - payments
generalize destinations to arbitrary scripts, messages are handled
inline, amounts are defined inline. And if you want to rely on the
payment infrastructure to work, you cannot risk people using the
old-style static address in the URI.



On Wed, Aug 7, 2013 at 11:47 PM, Roy Badami <roy at gnomon.org.uk> wrote:
> Very brief comment on BIP 72:
>
> I wonder if there should be some discussion included in the
> specification as to how the BIP 21 amount, message and label
> parameters should be processed when the payment protocol is used.
>
> Presumably amount should be completely ignored?  But is the total
> amount requestd by the PaymentRequest required to match the amount
> parameter (when present)?  Is the client permitted to complain if they
> don't?
>
> And what about message?  Presumably the memo from PaymentDetails
> should take precedence, but if it's not present, and message is?
>
> I think this is an area perhaps more suited to SHOULDs and MAYs rather
> than MUSTs, but it is probably worthy of mention...
>
> roy
>
> ------------------------------------------------------------------------------
> Get 100% visibility into Java/.NET code with AppDynamics Lite!
> It's a free troubleshooting tool designed for production.
> Get down to code-level detail for bottlenecks, with <2% overhead.
> Download for free and get started troubleshooting in minutes.
> http://pubads.g.doubleclick.net/gampad/clk?id=48897031&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development



From roy at gnomon.org.uk  Wed Aug  7 22:03:58 2013
From: roy at gnomon.org.uk (Roy Badami)
Date: Wed, 7 Aug 2013 23:03:58 +0100
Subject: [Bitcoin-development] Payment Protocol: BIP 70, 71, 72
In-Reply-To: <CAPg+sBhTYTiW-7btDuNJKqv8nMiZTUzMU2c+N+YcUVf1EejNJA@mail.gmail.com>
References: <CABsx9T0Ly67ZNJhoRQk0L9Q0-ucq3e=24b5Tg6GRKspRKKtP-g@mail.gmail.com>
	<20130807214757.GA45156@giles.gnomon.org.uk>
	<CAPg+sBhTYTiW-7btDuNJKqv8nMiZTUzMU2c+N+YcUVf1EejNJA@mail.gmail.com>
Message-ID: <20130807220358.GB45156@giles.gnomon.org.uk>

But the reality is that in many applications you need to provide a
single URL.

Consider existing point-of-sale systems that display QR codes for the
user to scan.  They live within the limitations of existing bitcoin
URLs, but would no doubt benefit from the payments protocol.

It's not realistic for the terminal operator in a retail establishment
to have to select which protocol will be used before generating the QR
code - so the effect of your proposal is to require lowest common
denominator and effectively prevent such systems from using the
payments protocol (at least until it is sufficiently ubiquitous that
they feel happy to simply require its use).

roy

On Wed, Aug 07, 2013 at 11:54:44PM +0200, Pieter Wuille wrote:
> I see payment URIs rather as a replacement for bitcoin: URI rather
> than an extension. It solves everything they did in a much cleaner
> way, Given that bitcoin: have gotten some traction, we probably want
> to reuse the moniker, but replace the rest entirely. In other words,
> if a request is specified, nothing else should be.
> 
> There is just no useful way to combine them either - payments
> generalize destinations to arbitrary scripts, messages are handled
> inline, amounts are defined inline. And if you want to rely on the
> payment infrastructure to work, you cannot risk people using the
> old-style static address in the URI.
> 
> 
> 
> On Wed, Aug 7, 2013 at 11:47 PM, Roy Badami <roy at gnomon.org.uk> wrote:
> > Very brief comment on BIP 72:
> >
> > I wonder if there should be some discussion included in the
> > specification as to how the BIP 21 amount, message and label
> > parameters should be processed when the payment protocol is used.
> >
> > Presumably amount should be completely ignored?  But is the total
> > amount requestd by the PaymentRequest required to match the amount
> > parameter (when present)?  Is the client permitted to complain if they
> > don't?
> >
> > And what about message?  Presumably the memo from PaymentDetails
> > should take precedence, but if it's not present, and message is?
> >
> > I think this is an area perhaps more suited to SHOULDs and MAYs rather
> > than MUSTs, but it is probably worthy of mention...
> >
> > roy
> >
> > ------------------------------------------------------------------------------
> > Get 100% visibility into Java/.NET code with AppDynamics Lite!
> > It's a free troubleshooting tool designed for production.
> > Get down to code-level detail for bottlenecks, with <2% overhead.
> > Download for free and get started troubleshooting in minutes.
> > http://pubads.g.doubleclick.net/gampad/clk?id=48897031&iu=/4140/ostg.clktrk
> > _______________________________________________
> > Bitcoin-development mailing list
> > Bitcoin-development at lists.sourceforge.net
> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 



From gavinandresen at gmail.com  Thu Aug  8 00:48:07 2013
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Thu, 8 Aug 2013 10:48:07 +1000
Subject: [Bitcoin-development] Payment Protocol: BIP 70, 71, 72
In-Reply-To: <20130807220358.GB45156@giles.gnomon.org.uk>
References: <CABsx9T0Ly67ZNJhoRQk0L9Q0-ucq3e=24b5Tg6GRKspRKKtP-g@mail.gmail.com>
	<20130807214757.GA45156@giles.gnomon.org.uk>
	<CAPg+sBhTYTiW-7btDuNJKqv8nMiZTUzMU2c+N+YcUVf1EejNJA@mail.gmail.com>
	<20130807220358.GB45156@giles.gnomon.org.uk>
Message-ID: <CABsx9T3BgjYnsi_UgRM7r0auUgA6BMFjEbSy8kNs_uLBiak8ow@mail.gmail.com>

I've updated the BIP 72 spec at https://en.bitcoin.it/wiki/BIP_0072 so
the bitcoin address is optional:

"If the "request" parameter is provided and backwards compatibility is
not required, then the bitcoin address portion of the URI may be
omitted (the URI will be of the form: bitcoin:?request=... )."

The spec already said what should happen if both request and
address/amount/etc were given:

"it should ignore the bitcoin address/amount/label/message in the URI
and instead fetch a PaymentRequest message and then follow the payment
protocol"

I think this gives us a smooth, clear upgrade path.

-- 
--
Gavin Andresen



From mike at plan99.net  Thu Aug  8 09:13:11 2013
From: mike at plan99.net (Mike Hearn)
Date: Thu, 8 Aug 2013 11:13:11 +0200
Subject: [Bitcoin-development] Payment Protocol: BIP 70, 71, 72
In-Reply-To: <CABsx9T3BgjYnsi_UgRM7r0auUgA6BMFjEbSy8kNs_uLBiak8ow@mail.gmail.com>
References: <CABsx9T0Ly67ZNJhoRQk0L9Q0-ucq3e=24b5Tg6GRKspRKKtP-g@mail.gmail.com>
	<20130807214757.GA45156@giles.gnomon.org.uk>
	<CAPg+sBhTYTiW-7btDuNJKqv8nMiZTUzMU2c+N+YcUVf1EejNJA@mail.gmail.com>
	<20130807220358.GB45156@giles.gnomon.org.uk>
	<CABsx9T3BgjYnsi_UgRM7r0auUgA6BMFjEbSy8kNs_uLBiak8ow@mail.gmail.com>
Message-ID: <CANEZrP0e8M_LP6dieZrnttbWcxysV+XL9Lp5D8spV4yHtsBHbA@mail.gmail.com>

Agreed, this looks good to me.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130808/ba8e44ed/attachment.html>

From pieter.wuille at gmail.com  Thu Aug  8 14:13:17 2013
From: pieter.wuille at gmail.com (Pieter Wuille)
Date: Thu, 8 Aug 2013 16:13:17 +0200
Subject: [Bitcoin-development] Payment Protocol: BIP 70, 71, 72
In-Reply-To: <CABsx9T3BgjYnsi_UgRM7r0auUgA6BMFjEbSy8kNs_uLBiak8ow@mail.gmail.com>
References: <CABsx9T0Ly67ZNJhoRQk0L9Q0-ucq3e=24b5Tg6GRKspRKKtP-g@mail.gmail.com>
	<20130807214757.GA45156@giles.gnomon.org.uk>
	<CAPg+sBhTYTiW-7btDuNJKqv8nMiZTUzMU2c+N+YcUVf1EejNJA@mail.gmail.com>
	<20130807220358.GB45156@giles.gnomon.org.uk>
	<CABsx9T3BgjYnsi_UgRM7r0auUgA6BMFjEbSy8kNs_uLBiak8ow@mail.gmail.com>
Message-ID: <CAPg+sBhjZCAZvaj5VjWaiQskv1fYb7iokWbJ+hdbLi893qVP=g@mail.gmail.com>

On Thu, Aug 8, 2013 at 2:48 AM, Gavin Andresen <gavinandresen at gmail.com> wrote:
> I've updated the BIP 72 spec at https://en.bitcoin.it/wiki/BIP_0072 so
> the bitcoin address is optional:
>
> "If the "request" parameter is provided and backwards compatibility is
> not required, then the bitcoin address portion of the URI may be
> omitted (the URI will be of the form: bitcoin:?request=... )."

Sounds good.

I'd still like to see some effort to avoid losing metadata and
reducing the responsibilities of the sender.

I see there's an implementation difficulty in avoiding to broadcast a
transaction, but for example, if a payment_uri is specified, and it
cannot be contacted (at all), the transaction should fail. As soon as
you manage to connect, and have at least attempted to submit the
transaction, the merchant may have received it, and you want to mark
the coins spent, so store it after that point. But without such
protection we'll likely see a unnecessary payments happening without
metadata, when the payment server cannot be contacted for some reason.

Also, the receiver most certainly needs a P2P implementation (and
probably a strongly validating one) to verify incoming transactions,
so having him broadcast it shouldn't be hard. I don't think the client
should be required to stay online to broadcast at all, after a
paymentACK is received. The transaction arrived safely at that point.

-- 
Pieter



From pete at petertodd.org  Thu Aug  8 18:20:14 2013
From: pete at petertodd.org (Peter Todd)
Date: Thu, 8 Aug 2013 14:20:14 -0400
Subject: [Bitcoin-development] Two factor wallet with one-time-passwords
In-Reply-To: <20130727234918.GA11635@savin>
References: <20130727234918.GA11635@savin>
Message-ID: <20130808182014.GA8964@petertodd.org>

On Sat, Jul 27, 2013 at 07:49:18PM -0400, Peter Todd wrote:
> Funding the wallet
> ==================
> 
> As with any multi-party wallet receiving funds must also be handled
> carefully to ensure an attacker can't fool the user into giving the
> sender the wrong address. This requires the involvement of all parties
> required to authorize an outgoing payment. In addition here the
> protection only works if funds sent to the wallet are split up into the
> discrete authorization amounts the user wishes. (possibly with more than
> one amount level)

Quick note for patent prior-art/my own memory - did a talk yesterday
about multifactor wallets, one time passwords and hash digest based
oracles. Someone getting involved in the business of selling bitcoins
pointed out that legally it can actually be desirable to give the
bitcoins to the customer by giving them a physical private key, perhaps
on a sheet of paper in a mailed envelope. Obviously the customer would
be wise to sweep the funds. Of course, the advantage of doing it with
paper is the legal system has a long history of dealing with the concept
of a secret on a piece of paper. (your customers won't have handy PKI to
use after all)

With multi-factor wallets you can have the customer provide one or more
keys, and you give them one final key on a sheet of paper, with
instructions to scan it on their phone via QR-code or something. Now the
transfer is absolute on your end - you can't get the funds back. If it's
a large amount you may want to split it up among multiple addresses, and
deliver the keys to the customer in a way that makes it obvious when
they are revealed. (scratch off for instance)

Finally, one-time-passwords do much the same thing, but they don't
require the second device, and the sheet of paper the customer is
dealing with can be much shorter. Similarly the final approval could
just be done over the phone by telling the customer the ~6-8 magic words
that unlock their funds - legally it could be useful to record that
phone call. Similarly for a large transfer, make it clear how much each
scratched off text field is unlocking to defend yourself in court.

Of course, in both there is still the risk of the funds ending up locked
due to a mistake, but at least there isn't financial incentive to make
that event happen. (usually)

I'll admit I hadn't thought of any of this stuff until I talked to an
actual business with real problems, worth doing.


Finally it's too bad we didn't get OP_EVAL; the customer could have
provided a P2SH script with, well, anything in it, and the unlock could
could have easily been a "bolt-on":

HASH160 <digest> EQUALVERIFY
DUP HASH160 <p2sh-code-digest> EQUALVERIFY EVAL

Oh well, MAST support can do the same thing one day.

-- 
'peter'[:-1]@petertodd.org
000000000000002f3613b5394e39a254ba4afa9f76af72cd6b4273736d7987fb
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 198 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130808/86c362fb/attachment.sig>

From w at grabhive.com  Fri Aug  9 11:32:31 2013
From: w at grabhive.com (Wendell)
Date: Fri, 9 Aug 2013 13:32:31 +0200
Subject: [Bitcoin-development] SPV client in pure JavaScript?
Message-ID: <B4D8D241-E758-4806-8B12-C9A78BF1470B@grabhive.com>

To those of you in the know about modern browser tech:

Does it seem at all conceivable that an SPV wallet could be built entirely in JavaScript? And if indeed it is within the realm of the possible, how would such a thing be safely distributed for use? Would a signed Chrome Plugin be an ideal vehicle?

-wendell

grabhive.com | twitter.com/grabhive | gpg: 6C0C9411

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 841 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130809/14986f4d/attachment.sig>

From mike at plan99.net  Fri Aug  9 11:43:33 2013
From: mike at plan99.net (Mike Hearn)
Date: Fri, 9 Aug 2013 13:43:33 +0200
Subject: [Bitcoin-development] Idea for new payment protocol PKI
Message-ID: <CANEZrP3w+pGVJijxLr1N6wQiqg4U=RUP3Mrph2=fwF+Ga_U9sQ@mail.gmail.com>

This is just me making notes for myself, I'm not seriously suggesting this
be implemented any time soon.

Mozilla Persona is an infrastructure for web based single sign on. It works
by having email providers sign temporary certificates for their users,
whose browsers then sign server-provided challenges to prove their email
address.

Because an SSO system is a classic chicken/egg setup, they run various
fallback services that allow anyone with an email address to take part.
They also integrate with the Google/Yahoo SSO systems as well. The
intention being that they do this until Persona becomes big enough to
matter, and then they can remove the centralised struts and the system
becomes transparently decentralised.

In other words, they seem to do a lot of things right.

Of course you can already sign payments using an X.509 cert issued to an
email address with v1 of the payment protocol, so technically no new PKI is
needed. But the benefit of leveraging Persona would be convenience - you
can get yourself a Persona cert and use it to sign in to websites with a
single click, and the user experience is smart and professional. CAs in
contrast are designed for web site admins really so the experience of
getting a cert for an email address is rather variable and more heavyweight.

Unfortunately Persona does not use X.509. It uses a custom thing based on
JSON. However, under the hood it's just assertions signed by RSA keys, so
an implementation is likely to be quite easy. From the users perspective,
their wallet app would embed a browser and drive it as if it were signing
into a website, but stop after the user is signed into Persona and a user
cert has been provisioned. It can then sign payment requests automatically.
For many users, it'd be just one click, which is pretty neat.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130809/93d2a4b9/attachment.html>

From mike at plan99.net  Fri Aug  9 11:48:20 2013
From: mike at plan99.net (Mike Hearn)
Date: Fri, 9 Aug 2013 13:48:20 +0200
Subject: [Bitcoin-development] SPV client in pure JavaScript?
In-Reply-To: <B4D8D241-E758-4806-8B12-C9A78BF1470B@grabhive.com>
References: <B4D8D241-E758-4806-8B12-C9A78BF1470B@grabhive.com>
Message-ID: <CANEZrP2c6nsf2z5_hKDfHdO1HEJ+Y+aoiSdfYPMxK_jzrvLEow@mail.gmail.com>

JavaScript is turing complete so of course it can be done. The real
question you're asking is, can it be done in a web app? I think the answer
is I think "no" because web apps aren't allowed to make raw TCP socket
connections.

Now there may be a way around that by using browser-specific things like
extensions or "installable apps" which give your code greater access
permissions. This approach means you essentially use Chrome as your app
platform instead of a JVM, the assumption presumably being that more users
have Chrome than a JVM. The flip side is that users who don't would
probably balk at the idea of installing an entire browser in order to run a
wallet app, whereas a JVM can be bundled and the resulting app acts like
any other. I don't know of a convenient way to "statically link" Chrome
into a regular-looking application.

I personally wouldn't find such a design compelling. Whilst Java isn't
exactly a great language, JavaScript is significantly worse in virtually
all aspects. I don't understand why anyone would want to use JavaScript
outside the browser - you get less safety, less performance, fewer
features, less mature tools and so on. If the end result is an installable
app like any other, all you did is cripple yourself vs the competition
that's using languages/platforms designed for it.



On Fri, Aug 9, 2013 at 1:32 PM, Wendell <w at grabhive.com> wrote:

> To those of you in the know about modern browser tech:
>
> Does it seem at all conceivable that an SPV wallet could be built entirely
> in JavaScript? And if indeed it is within the realm of the possible, how
> would such a thing be safely distributed for use? Would a signed Chrome
> Plugin be an ideal vehicle?
>
> -wendell
>
> grabhive.com | twitter.com/grabhive | gpg: 6C0C9411
>
>
>
> ------------------------------------------------------------------------------
> Get 100% visibility into Java/.NET code with AppDynamics Lite!
> It's a free troubleshooting tool designed for production.
> Get down to code-level detail for bottlenecks, with <2% overhead.
> Download for free and get started troubleshooting in minutes.
> http://pubads.g.doubleclick.net/gampad/clk?id=48897031&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130809/77a6f87b/attachment.html>

From melvincarvalho at gmail.com  Fri Aug  9 11:57:49 2013
From: melvincarvalho at gmail.com (Melvin Carvalho)
Date: Fri, 9 Aug 2013 13:57:49 +0200
Subject: [Bitcoin-development] Idea for new payment protocol PKI
In-Reply-To: <CANEZrP3w+pGVJijxLr1N6wQiqg4U=RUP3Mrph2=fwF+Ga_U9sQ@mail.gmail.com>
References: <CANEZrP3w+pGVJijxLr1N6wQiqg4U=RUP3Mrph2=fwF+Ga_U9sQ@mail.gmail.com>
Message-ID: <CAKaEYhLftC67Lrinc2yF0coqhJi_DpM4XvoXfBwJBGv=hFi3yQ@mail.gmail.com>

On 9 August 2013 13:43, Mike Hearn <mike at plan99.net> wrote:

> This is just me making notes for myself, I'm not seriously suggesting this
> be implemented any time soon.
>
> Mozilla Persona is an infrastructure for web based single sign on. It
> works by having email providers sign temporary certificates for their
> users, whose browsers then sign server-provided challenges to prove their
> email address.
>
> Because an SSO system is a classic chicken/egg setup, they run various
> fallback services that allow anyone with an email address to take part.
> They also integrate with the Google/Yahoo SSO systems as well. The
> intention being that they do this until Persona becomes big enough to
> matter, and then they can remove the centralised struts and the system
> becomes transparently decentralised.
>
> In other words, they seem to do a lot of things right.
>
> Of course you can already sign payments using an X.509 cert issued to an
> email address with v1 of the payment protocol, so technically no new PKI is
> needed. But the benefit of leveraging Persona would be convenience - you
> can get yourself a Persona cert and use it to sign in to websites with a
> single click, and the user experience is smart and professional. CAs in
> contrast are designed for web site admins really so the experience of
> getting a cert for an email address is rather variable and more heavyweight.
>
> Unfortunately Persona does not use X.509. It uses a custom thing based on
> JSON. However, under the hood it's just assertions signed by RSA keys, so
> an implementation is likely to be quite easy. From the users perspective,
> their wallet app would embed a browser and drive it as if it were signing
> into a website, but stop after the user is signed into Persona and a user
> cert has been provisioned. It can then sign payment requests automatically.
> For many users, it'd be just one click, which is pretty neat.
>

Persona, in it's current state, is the exact opposite of the principle
behind of bitcoin.

Bitcoin sought to reduce dependence on trusted third parties, where as,
persona is increasing the reach of trusted third parties.  The keys and
passwords are stored on mozilla's servers, sometimes on your email
providers.  Persona, is however, a progression and will hopefully improve
its security and decentralization as it goes along.

A (client or server side) X.509 cert can be issued to any address, be it
email, telephone, webpage, *or* to a bitcoin address, it allows any URI in
he subjectAlternativeName field.  This is much more of bitcoin like model
where the private key sits on your client and the public key is in
discoverable by the other end.

Most enterprises (including Mozilla) take the stance that key management on
the client is beyond the average user.  The notable exception is twitter
who are rolling out 2 factor auth based on PKI.

If you're interested in signing stuff with RSA (or other) keys, the web
payments and payswarm guys have done a ton of work on this, including
implementations, which you may be able to reuse ...


>
>
>
>
> ------------------------------------------------------------------------------
> Get 100% visibility into Java/.NET code with AppDynamics Lite!
> It's a free troubleshooting tool designed for production.
> Get down to code-level detail for bottlenecks, with <2% overhead.
> Download for free and get started troubleshooting in minutes.
> http://pubads.g.doubleclick.net/gampad/clk?id=48897031&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130809/7a706842/attachment.html>

From w at grabhive.com  Fri Aug  9 11:59:09 2013
From: w at grabhive.com (Wendell)
Date: Fri, 9 Aug 2013 13:59:09 +0200
Subject: [Bitcoin-development] Idea for new payment protocol PKI
In-Reply-To: <CANEZrP3w+pGVJijxLr1N6wQiqg4U=RUP3Mrph2=fwF+Ga_U9sQ@mail.gmail.com>
References: <CANEZrP3w+pGVJijxLr1N6wQiqg4U=RUP3Mrph2=fwF+Ga_U9sQ@mail.gmail.com>
Message-ID: <4A46BA74-F2C2-4139-AABE-67CFE4BC4FA4@grabhive.com>

We have been discussing something like this over here too, as well as exploring more esoteric blockchain+signature-based "SSO" implementations as discussed by John Light and others.

One of our long-term ambitions with Hive is to provide a (mostly) user-transparent, decentralized authentication service. It sounds like our infrastructure could already handle a Persona implementation, and we very much want to get behind some forward-thinking standard. So as long as the plan _IS_ to remove said 'centralized struts' at the appropriate time, I'd say we're interested in exploring this further.

-wendell

grabhive.com | twitter.com/grabhive | gpg: 6C0C9411

On Aug 9, 2013, at 1:43 PM, Mike Hearn wrote:

> This is just me making notes for myself, I'm not seriously suggesting this be implemented any time soon.
> 
> Mozilla Persona is an infrastructure for web based single sign on. It works by having email providers sign temporary certificates for their users, whose browsers then sign server-provided challenges to prove their email address.
> 
> Because an SSO system is a classic chicken/egg setup, they run various fallback services that allow anyone with an email address to take part. They also integrate with the Google/Yahoo SSO systems as well. The intention being that they do this until Persona becomes big enough to matter, and then they can remove the centralised struts and the system becomes transparently decentralised.
> 
> In other words, they seem to do a lot of things right.
> 
> Of course you can already sign payments using an X.509 cert issued to an email address with v1 of the payment protocol, so technically no new PKI is needed. But the benefit of leveraging Persona would be convenience - you can get yourself a Persona cert and use it to sign in to websites with a single click, and the user experience is smart and professional. CAs in contrast are designed for web site admins really so the experience of getting a cert for an email address is rather variable and more heavyweight.
> 
> Unfortunately Persona does not use X.509. It uses a custom thing based on JSON. However, under the hood it's just assertions signed by RSA keys, so an implementation is likely to be quite easy. From the users perspective, their wallet app would embed a browser and drive it as if it were signing into a website, but stop after the user is signed into Persona and a user cert has been provisioned. It can then sign payment requests automatically. For many users, it'd be just one click, which is pretty neat.



From w at grabhive.com  Fri Aug  9 12:05:46 2013
From: w at grabhive.com (Wendell)
Date: Fri, 9 Aug 2013 14:05:46 +0200
Subject: [Bitcoin-development] SPV client in pure JavaScript?
In-Reply-To: <CANEZrP2c6nsf2z5_hKDfHdO1HEJ+Y+aoiSdfYPMxK_jzrvLEow@mail.gmail.com>
References: <B4D8D241-E758-4806-8B12-C9A78BF1470B@grabhive.com>
	<CANEZrP2c6nsf2z5_hKDfHdO1HEJ+Y+aoiSdfYPMxK_jzrvLEow@mail.gmail.com>
Message-ID: <54F09675-D6A7-4415-82F1-920248E8188D@grabhive.com>

Right, I'm not suggesting that we have this wallet in a web app, but rather precisely what you are talking about: using special browser features, and bundling it. I am fundamentally monoculture-opposed, but given Chrome's present installed base, that initial target makes sense to me, provided that we could have a one-click installation (as per normal, via the Chrome Store).

Chrome also has this "Native Client" plug-in: I know next to nothing about it, and this goes off the rails of the Subject, but perhaps an SPV implementation there could be a solution to the concerns you expressed?

-wendell

grabhive.com | twitter.com/grabhive | gpg: 6C0C9411

On Aug 9, 2013, at 1:48 PM, Mike Hearn wrote:

> JavaScript is turing complete so of course it can be done. The real question you're asking is, can it be done in a web app? I think the answer is I think "no" because web apps aren't allowed to make raw TCP socket connections.
> 
> Now there may be a way around that by using browser-specific things like extensions or "installable apps" which give your code greater access permissions. This approach means you essentially use Chrome as your app platform instead of a JVM, the assumption presumably being that more users have Chrome than a JVM. The flip side is that users who don't would probably balk at the idea of installing an entire browser in order to run a wallet app, whereas a JVM can be bundled and the resulting app acts like any other. I don't know of a convenient way to "statically link" Chrome into a regular-looking application.
> 
> I personally wouldn't find such a design compelling. Whilst Java isn't exactly a great language, JavaScript is significantly worse in virtually all aspects. I don't understand why anyone would want to use JavaScript outside the browser - you get less safety, less performance, fewer features, less mature tools and so on. If the end result is an installable app like any other, all you did is cripple yourself vs the competition that's using languages/platforms designed for it.



From mike at plan99.net  Fri Aug  9 12:08:52 2013
From: mike at plan99.net (Mike Hearn)
Date: Fri, 9 Aug 2013 14:08:52 +0200
Subject: [Bitcoin-development] Idea for new payment protocol PKI
In-Reply-To: <CAKaEYhLftC67Lrinc2yF0coqhJi_DpM4XvoXfBwJBGv=hFi3yQ@mail.gmail.com>
References: <CANEZrP3w+pGVJijxLr1N6wQiqg4U=RUP3Mrph2=fwF+Ga_U9sQ@mail.gmail.com>
	<CAKaEYhLftC67Lrinc2yF0coqhJi_DpM4XvoXfBwJBGv=hFi3yQ@mail.gmail.com>
Message-ID: <CANEZrP3fWbGAO3MSvAzicjPmPzUGVfSgxk_MnZNUhHzE7_9drg@mail.gmail.com>

>
> Bitcoin sought to reduce dependence on trusted third parties, where as,
> persona is increasing the reach of trusted third parties.  The keys and
> passwords are stored on mozilla's servers, sometimes on your email
> providers.  Persona, is however, a progression and will hopefully improve
> its security and decentralization as it goes along.
>

When Persona is supported by all the key players in a transaction Mozilla
doesn't get anything, do they? You can easily run your own IDP on a
personal server if you're the kind of person who likes to do that, then run
Firefox so you have a native implementation and the Mozilla servers aren't
involved. The keys never leave your computers.

Whilst X.509 certs can indeed be issued for any arbitrary string, you still
need a CA that will do it for you, and that's typically not so trivial. CAs
aren't meant for widespread end user adoption, really, whereas Persona is.

I don't think Persona is any more or less centralised than other PKIs,
really, just easier to use. Ultimately the string you're verifying is a
user at host pair, so the host is centralised via DNS and to verify the
assertions it vends, you must use SSL to connect to it, so under the hood
the regular SSL PKI is still there.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130809/f9d1ac67/attachment.html>

From mike at plan99.net  Fri Aug  9 12:10:52 2013
From: mike at plan99.net (Mike Hearn)
Date: Fri, 9 Aug 2013 14:10:52 +0200
Subject: [Bitcoin-development] SPV client in pure JavaScript?
In-Reply-To: <54F09675-D6A7-4415-82F1-920248E8188D@grabhive.com>
References: <B4D8D241-E758-4806-8B12-C9A78BF1470B@grabhive.com>
	<CANEZrP2c6nsf2z5_hKDfHdO1HEJ+Y+aoiSdfYPMxK_jzrvLEow@mail.gmail.com>
	<54F09675-D6A7-4415-82F1-920248E8188D@grabhive.com>
Message-ID: <CANEZrP24P_m_eWbcs3PJNomG4kFDPUyGE2uQjod9qPmpBS+1mg@mail.gmail.com>

Code that runs inside NativeClient has the same access level as JavaScript
does. It's just a way to do things faster.

Distribution as a Chrome app via the Chrome store is a fine approach, as
long as people understand it's just an app platform like any other. It has
pros and cons that must be weighed up. For instance, Chrome for mobile
doesn't really do apps, at least not at the moment. Also, you're still
limited by what APIs Chrome exposes, which are a strict subset of what a
real OS provides.


On Fri, Aug 9, 2013 at 2:05 PM, Wendell <w at grabhive.com> wrote:

> Right, I'm not suggesting that we have this wallet in a web app, but
> rather precisely what you are talking about: using special browser
> features, and bundling it. I am fundamentally monoculture-opposed, but
> given Chrome's present installed base, that initial target makes sense to
> me, provided that we could have a one-click installation (as per normal,
> via the Chrome Store).
>
> Chrome also has this "Native Client" plug-in: I know next to nothing about
> it, and this goes off the rails of the Subject, but perhaps an SPV
> implementation there could be a solution to the concerns you expressed?
>
> -wendell
>
> grabhive.com | twitter.com/grabhive | gpg: 6C0C9411
>
> On Aug 9, 2013, at 1:48 PM, Mike Hearn wrote:
>
> > JavaScript is turing complete so of course it can be done. The real
> question you're asking is, can it be done in a web app? I think the answer
> is I think "no" because web apps aren't allowed to make raw TCP socket
> connections.
> >
> > Now there may be a way around that by using browser-specific things like
> extensions or "installable apps" which give your code greater access
> permissions. This approach means you essentially use Chrome as your app
> platform instead of a JVM, the assumption presumably being that more users
> have Chrome than a JVM. The flip side is that users who don't would
> probably balk at the idea of installing an entire browser in order to run a
> wallet app, whereas a JVM can be bundled and the resulting app acts like
> any other. I don't know of a convenient way to "statically link" Chrome
> into a regular-looking application.
> >
> > I personally wouldn't find such a design compelling. Whilst Java isn't
> exactly a great language, JavaScript is significantly worse in virtually
> all aspects. I don't understand why anyone would want to use JavaScript
> outside the browser - you get less safety, less performance, fewer
> features, less mature tools and so on. If the end result is an installable
> app like any other, all you did is cripple yourself vs the competition
> that's using languages/platforms designed for it.
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130809/9dbafdf3/attachment.html>

From mike at plan99.net  Fri Aug  9 12:14:36 2013
From: mike at plan99.net (Mike Hearn)
Date: Fri, 9 Aug 2013 14:14:36 +0200
Subject: [Bitcoin-development] SPV client in pure JavaScript?
In-Reply-To: <CANEZrP24P_m_eWbcs3PJNomG4kFDPUyGE2uQjod9qPmpBS+1mg@mail.gmail.com>
References: <B4D8D241-E758-4806-8B12-C9A78BF1470B@grabhive.com>
	<CANEZrP2c6nsf2z5_hKDfHdO1HEJ+Y+aoiSdfYPMxK_jzrvLEow@mail.gmail.com>
	<54F09675-D6A7-4415-82F1-920248E8188D@grabhive.com>
	<CANEZrP24P_m_eWbcs3PJNomG4kFDPUyGE2uQjod9qPmpBS+1mg@mail.gmail.com>
Message-ID: <CANEZrP1XYyO0aspJ-A-0+_pRDKrtaHZrNTjfOnxBGX8Beiw2Xw@mail.gmail.com>

Oh, I forgot to make it clear - Chrome apps/extensions can make raw TCP
socket connections:

   http://blog.chromium.org/2012/11/introducing-tcp-listen-new-api-for.html

You would do it as a packaged app:
http://developer.chrome.com/apps/about_apps.html  because then they're a
lot more similar to native apps (they get their own windows, run offline,
etc).

But these aren't standard APIs. They're all Chrome extensions. I doubt
HTML5 will support USB access anytime soon, for instance, but packaged apps
do.



On Fri, Aug 9, 2013 at 2:10 PM, Mike Hearn <mike at plan99.net> wrote:

> Code that runs inside NativeClient has the same access level as JavaScript
> does. It's just a way to do things faster.
>
> Distribution as a Chrome app via the Chrome store is a fine approach, as
> long as people understand it's just an app platform like any other. It has
> pros and cons that must be weighed up. For instance, Chrome for mobile
> doesn't really do apps, at least not at the moment. Also, you're still
> limited by what APIs Chrome exposes, which are a strict subset of what a
> real OS provides.
>
>
> On Fri, Aug 9, 2013 at 2:05 PM, Wendell <w at grabhive.com> wrote:
>
>> Right, I'm not suggesting that we have this wallet in a web app, but
>> rather precisely what you are talking about: using special browser
>> features, and bundling it. I am fundamentally monoculture-opposed, but
>> given Chrome's present installed base, that initial target makes sense to
>> me, provided that we could have a one-click installation (as per normal,
>> via the Chrome Store).
>>
>> Chrome also has this "Native Client" plug-in: I know next to nothing
>> about it, and this goes off the rails of the Subject, but perhaps an SPV
>> implementation there could be a solution to the concerns you expressed?
>>
>> -wendell
>>
>> grabhive.com | twitter.com/grabhive | gpg: 6C0C9411
>>
>> On Aug 9, 2013, at 1:48 PM, Mike Hearn wrote:
>>
>> > JavaScript is turing complete so of course it can be done. The real
>> question you're asking is, can it be done in a web app? I think the answer
>> is I think "no" because web apps aren't allowed to make raw TCP socket
>> connections.
>> >
>> > Now there may be a way around that by using browser-specific things
>> like extensions or "installable apps" which give your code greater access
>> permissions. This approach means you essentially use Chrome as your app
>> platform instead of a JVM, the assumption presumably being that more users
>> have Chrome than a JVM. The flip side is that users who don't would
>> probably balk at the idea of installing an entire browser in order to run a
>> wallet app, whereas a JVM can be bundled and the resulting app acts like
>> any other. I don't know of a convenient way to "statically link" Chrome
>> into a regular-looking application.
>> >
>> > I personally wouldn't find such a design compelling. Whilst Java isn't
>> exactly a great language, JavaScript is significantly worse in virtually
>> all aspects. I don't understand why anyone would want to use JavaScript
>> outside the browser - you get less safety, less performance, fewer
>> features, less mature tools and so on. If the end result is an installable
>> app like any other, all you did is cripple yourself vs the competition
>> that's using languages/platforms designed for it.
>>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130809/84ddd571/attachment.html>

From melvincarvalho at gmail.com  Fri Aug  9 12:17:10 2013
From: melvincarvalho at gmail.com (Melvin Carvalho)
Date: Fri, 9 Aug 2013 14:17:10 +0200
Subject: [Bitcoin-development] Idea for new payment protocol PKI
In-Reply-To: <CANEZrP3fWbGAO3MSvAzicjPmPzUGVfSgxk_MnZNUhHzE7_9drg@mail.gmail.com>
References: <CANEZrP3w+pGVJijxLr1N6wQiqg4U=RUP3Mrph2=fwF+Ga_U9sQ@mail.gmail.com>
	<CAKaEYhLftC67Lrinc2yF0coqhJi_DpM4XvoXfBwJBGv=hFi3yQ@mail.gmail.com>
	<CANEZrP3fWbGAO3MSvAzicjPmPzUGVfSgxk_MnZNUhHzE7_9drg@mail.gmail.com>
Message-ID: <CAKaEYhJSf7vt8WzBBY=qZhTNhdWeWu5kjyhcyidVfFUV1vxp-g@mail.gmail.com>

On 9 August 2013 14:08, Mike Hearn <mike at plan99.net> wrote:

> Bitcoin sought to reduce dependence on trusted third parties, where as,
>> persona is increasing the reach of trusted third parties.  The keys and
>> passwords are stored on mozilla's servers, sometimes on your email
>> providers.  Persona, is however, a progression and will hopefully improve
>> its security and decentralization as it goes along.
>>
>
> When Persona is supported by all the key players in a transaction Mozilla
> doesn't get anything, do they? You can easily run your own IDP on a
> personal server if you're the kind of person who likes to do that, then run
> Firefox so you have a native implementation and the Mozilla servers aren't
> involved. The keys never leave your computers.
>

You'd need to run your own email server and/or change email address, which
is not in the reach of the average user, and maybe not even of some
businesses.


>
> Whilst X.509 certs can indeed be issued for any arbitrary string, you
> still need a CA that will do it for you, and that's typically not so
> trivial. CAs aren't meant for widespread end user adoption, really, whereas
> Persona is.
>

You can self sign X.509 certificates quite easily (e.g. one click via
<KEYGEN>), then rely on a decentralized web of trust to remove browser
warnings.  A few people are working on this.


>
> I don't think Persona is any more or less centralised than other PKIs,
> really, just easier to use. Ultimately the string you're verifying is a
> user at host pair, so the host is centralised via DNS and to verify the
> assertions it vends, you must use SSL to connect to it, so under the hood
> the regular SSL PKI is still there.
>
>
>
It is easier to use, that's a great plus.  But convenience is often a trade
off with security.

I dont user user at host, I use my home page because it's easy to dereference
and get a public key.  Email is hard to dereference.

Yes, there is a reliance on DNS, which Tim calls the 'Achilles heel' of the
web, but it's held up quite well so far (fortunately for us).

Mozilla also have a master key to most email accounts, so if anyone got
access to that they could impersonate the vast majority of users that have
not opted in.  I would not use persona for financial stuff, but if I made a
casual app with non sensitive information it would be one of the top
choices, imho
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130809/45364f00/attachment.html>

From melvincarvalho at gmail.com  Fri Aug  9 12:18:37 2013
From: melvincarvalho at gmail.com (Melvin Carvalho)
Date: Fri, 9 Aug 2013 14:18:37 +0200
Subject: [Bitcoin-development] Idea for new payment protocol PKI
In-Reply-To: <4A46BA74-F2C2-4139-AABE-67CFE4BC4FA4@grabhive.com>
References: <CANEZrP3w+pGVJijxLr1N6wQiqg4U=RUP3Mrph2=fwF+Ga_U9sQ@mail.gmail.com>
	<4A46BA74-F2C2-4139-AABE-67CFE4BC4FA4@grabhive.com>
Message-ID: <CAKaEYh+7fH9DSDc-nFn_Fp4tEPpnkLcNHx1ank05Jk4S-mp2Eg@mail.gmail.com>

On 9 August 2013 13:59, Wendell <w at grabhive.com> wrote:

> We have been discussing something like this over here too, as well as
> exploring more esoteric blockchain+signature-based "SSO" implementations as
> discussed by John Light and others.
>

I've been using SSO for years using an X.509 private key in my browser, and
my public key referenced in my home page.

The unfortunate thing is that X.509 tends to use RSA, and bitcoin tends to
use ECC for space reasons.  Since, in its simplest form, bitcoin is a
distributed ledger of public key / balance values you could imagine an
enormous eco system where every key pair become a wallet with 10s of
millions of users.

I was thinking about an alt coin along these lines.  The problem is that
there's no OP_CODE for RSA and the block chain would become massive.


>
> One of our long-term ambitions with Hive is to provide a (mostly)
> user-transparent, decentralized authentication service. It sounds like our
> infrastructure could already handle a Persona implementation, and we very
> much want to get behind some forward-thinking standard. So as long as the
> plan _IS_ to remove said 'centralized struts' at the appropriate time, I'd
> say we're interested in exploring this further.
>

Sounds great, would love to hear more about what you come up with!


>
> -wendell
>
> grabhive.com | twitter.com/grabhive | gpg: 6C0C9411
>
> On Aug 9, 2013, at 1:43 PM, Mike Hearn wrote:
>
> > This is just me making notes for myself, I'm not seriously suggesting
> this be implemented any time soon.
> >
> > Mozilla Persona is an infrastructure for web based single sign on. It
> works by having email providers sign temporary certificates for their
> users, whose browsers then sign server-provided challenges to prove their
> email address.
> >
> > Because an SSO system is a classic chicken/egg setup, they run various
> fallback services that allow anyone with an email address to take part.
> They also integrate with the Google/Yahoo SSO systems as well. The
> intention being that they do this until Persona becomes big enough to
> matter, and then they can remove the centralised struts and the system
> becomes transparently decentralised.
> >
> > In other words, they seem to do a lot of things right.
> >
> > Of course you can already sign payments using an X.509 cert issued to an
> email address with v1 of the payment protocol, so technically no new PKI is
> needed. But the benefit of leveraging Persona would be convenience - you
> can get yourself a Persona cert and use it to sign in to websites with a
> single click, and the user experience is smart and professional. CAs in
> contrast are designed for web site admins really so the experience of
> getting a cert for an email address is rather variable and more heavyweight.
> >
> > Unfortunately Persona does not use X.509. It uses a custom thing based
> on JSON. However, under the hood it's just assertions signed by RSA keys,
> so an implementation is likely to be quite easy. From the users
> perspective, their wallet app would embed a browser and drive it as if it
> were signing into a website, but stop after the user is signed into Persona
> and a user cert has been provisioned. It can then sign payment requests
> automatically. For many users, it'd be just one click, which is pretty neat.
>
>
> ------------------------------------------------------------------------------
> Get 100% visibility into Java/.NET code with AppDynamics Lite!
> It's a free troubleshooting tool designed for production.
> Get down to code-level detail for bottlenecks, with <2% overhead.
> Download for free and get started troubleshooting in minutes.
> http://pubads.g.doubleclick.net/gampad/clk?id=48897031&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130809/f309fcc6/attachment.html>

From jgarzik at bitpay.com  Fri Aug  9 13:08:39 2013
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Fri, 9 Aug 2013 09:08:39 -0400
Subject: [Bitcoin-development] SPV client in pure JavaScript?
In-Reply-To: <B4D8D241-E758-4806-8B12-C9A78BF1470B@grabhive.com>
References: <B4D8D241-E758-4806-8B12-C9A78BF1470B@grabhive.com>
Message-ID: <CAJHLa0NxcRHP+hoa1Drie6gfLqCJpnB17+0QsYVO6KQ7gZzYqA@mail.gmail.com>

On Fri, Aug 9, 2013 at 7:32 AM, Wendell <w at grabhive.com> wrote:
> To those of you in the know about modern browser tech:
>
> Does it seem at all conceivable that an SPV wallet could be built entirely in JavaScript? And if indeed it is within the realm of the possible, how would such a thing be safely distributed for use? Would a signed Chrome Plugin be an ideal vehicle?

Certainly.  BitPay is working on such a wallet:
https://github.com/jgarzik/wally

wally uses node.js JavaScript, and not browser JavaScript, so not
exactly what you're talking about...

-- 
Jeff Garzik
Senior Software Engineer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From w at grabhive.com  Fri Aug  9 13:05:04 2013
From: w at grabhive.com (Wendell)
Date: Fri, 9 Aug 2013 15:05:04 +0200
Subject: [Bitcoin-development] SPV client in pure JavaScript?
In-Reply-To: <CANEZrP1XYyO0aspJ-A-0+_pRDKrtaHZrNTjfOnxBGX8Beiw2Xw@mail.gmail.com>
References: <B4D8D241-E758-4806-8B12-C9A78BF1470B@grabhive.com>
	<CANEZrP2c6nsf2z5_hKDfHdO1HEJ+Y+aoiSdfYPMxK_jzrvLEow@mail.gmail.com>
	<54F09675-D6A7-4415-82F1-920248E8188D@grabhive.com>
	<CANEZrP24P_m_eWbcs3PJNomG4kFDPUyGE2uQjod9qPmpBS+1mg@mail.gmail.com>
	<CANEZrP1XYyO0aspJ-A-0+_pRDKrtaHZrNTjfOnxBGX8Beiw2Xw@mail.gmail.com>
Message-ID: <E211ED41-69BF-4AC9-A6B1-F4E89D16E5C8@grabhive.com>

"Packaged app pages always load locally. This allows apps to be less dependent on the network. Once a user installs an app, they have full control over the app's lifecycle. Apps open and close quickly, and the system can shut apps down at any time to improve performance. Users can fully uninstall apps."

Does this mean that upon install, a nice, icon-emblazoned package will drop into my /Applications folder on a Mac, or in my Windows Start menu, etc... Or are packaged apps always launched and maintained from within Chrome itself?

Provided that the technical stuff could be made to work within the context of the more limited API, this certainly seems like an interesting, user-friendly way to distribute a Bitcoin wallet!

-wendell

grabhive.com | twitter.com/grabhive | gpg: 6C0C9411

On Aug 9, 2013, at 2:14 PM, Mike Hearn wrote:

> Oh, I forgot to make it clear - Chrome apps/extensions can make raw TCP socket connections:
> 
>   http://blog.chromium.org/2012/11/introducing-tcp-listen-new-api-for.html
> 
> You would do it as a packaged app: http://developer.chrome.com/apps/about_apps.html  because then they're a lot more similar to native apps (they get their own windows, run offline, etc). 
> 
> But these aren't standard APIs. They're all Chrome extensions. I doubt HTML5 will support USB access anytime soon, for instance, but packaged apps do.



From etotheipi at gmail.com  Fri Aug  9 17:57:35 2013
From: etotheipi at gmail.com (Alan Reiner)
Date: Fri, 09 Aug 2013 13:57:35 -0400
Subject: [Bitcoin-development] Optional "wallet-linkable" address format
	(Re-request)
In-Reply-To: <51CB08EE.1050403@gmail.com>
References: <5AC3FA1D9B1F4FA0A2FE9A67333642B5@LAPTOPAIR>
	<51C21035.9080407@gmail.com>
	<53E406CF0D93498DAECAAE061555B7C9@LAPTOPAIR>
	<51C234FA.5030909@gmail.com>
	<9600E3D1DDC24D1391C1E4433F71684D@LAPTOPAIR>
	<CANEZrP3ZcQEPOPrO_O2-tdLZUSezj1nbhtVFt1e77KEwzhfZ-A@mail.gmail.com>
	<51CB08EE.1050403@gmail.com>
Message-ID: <52052D8F.90706@gmail.com>

Guys,

I'd like to reiterate my previous request to support this alternate
address serialization in the payment protocol.  We got caught up in the
specifics of one use case, but didn't acknowledge that it's still a
valid address representation that will provide value to those who wish
to use it and can be safely ignored by others.

Current address format:   binary_to_base58( idbyte + hash160(pubkey) +
checksum)
Alternate format:         binary_to_base58( idbyte + parentpubkey +
multiplier + checksum)

The receiving party will multiply the pubkey by the multiplier, and then
hash it to get the 20-byte address to send to.  The idea is that you use
your BIP 32 parent public key, and then you generate whatever child you
want, and only send them the multiplier used (not the chaincode).  This
preserves privacy, but if the recipient has your parent public key
already, they can identify that address being linked to you, but cannot
determine any other addresses in your wallet.

This form has no drawbacks to the existing address format except for
being longer and requiring an extra EC multiplication by the person
sending to that address.  But the advantage is that it optionally allows
the sender to provide more information than currently contained in the
25-byte hash160 form.  The discussion about this got side-tracked with
the use case I presented, but I believe there are plenty of other uses
for this.

The particular use case I had in mind was that certain services could be
setup (pre-arranged), say between wallet software and a
business/exchange.  The exchange would like to be able to reliably send
addresses to the user for deposit, without risk of MITM, or even if
their own public server is compromised.  The author of wallet software
pre-verifies the public key portion of the service, and either hardcodes
it into the software, or hardcodes their own public key into the
software and makes the service's signed public key available through
query server (allowing the software author to offline-sign replacement
keys, or add keys for new service providers, as needed). 

When the user's software receives a payment address, the software can
verify it belongs to that service.  You can't use dedicated chain
technique, because it would either have to be exchanged with the user on
first transaction which half defeats the purpose, or they give them the
full public key and chaincode which allows the user to see /all
/addresses ever used by the service.  Neither one is a reasonable solution.

This use case doesn't necessarily scale, but it doesn't have to.  It
simply allows service providers to skip the SSL and go right to public
key exchange/verification for a few of the important services they
provide access to, and will provide better security than relying on
SSL/PKI.  This would simply be one, coexisting option for providing
payment details in the absence (or in addition to) SSL/PKI infrastructure.

I'm sure there's other use cases, but it seems simple enough and
non-disruptive enough that it could be supported easily for no other
reason than to support that use case (which I intend to implement in
Armory to help verify high-volume services).

-Alan





On 06/26/2013 11:29 AM, Alan Reiner wrote:
> Although I'd still prefer my original request, I get much of what I
> want from your guys' recommendation.  It complicates the wallet
> design, because it requires tracking and associating a matrix of
> addresses for each wallet, instead of a single linear list.  But if
> this is what it's going to take then I will go along. 
>
> Right now BIP 32 defines, m/i'/j/k, where j=0 is the "external" chain
> used for distributing addresses, and j=1 is the "internal" chain for
> sending change.  The CONOPs (concept of operations) for the extended
> wallet would be like Jeremy described:
>
> - Chains with j>=2 would be independent address chains carved out for
> individuals relationships
> - Add wallet code to individually associate each j-value with a
> particular identity
> - Update the wallet code to pool all the addresses in all j-chains
> when calculating the balance of the wallet and/or creating transactions
> - When choosing to generically "Receive Bitcoins", will pick the next
> address from the j=0 chain
> - Will have to add extra function to "Receive Bitcoins" button to
> allow creation of new contacts/identities.
> - Change will always go to the next address in j=1, no matter which
> chains are used to provide inputs.
> - Add code to figure out lookaheads for each alternate chain.  Not
> just each chain, but looking ahead a couple chains, too.  Luckily, the
> lookahead doesn't have to be very big for chains j>=1 
> - Add an interface to display and choose the different chains in your
> wallet, and export the pubkey&chaincode in some
> soon-to-be-standardized format. 
> - Add code and interface to receive and track alternate j-chains from
> other clients/users, and maintain those.  Should we try associating
> incoming and outgoing chains?  What happens if they do it wrong?  Meh...
>
> Just as one final swipe at this idea, you can see that I gotta do
> quite a bit of work to support the multi-chain idea, and adds a little
> extra burden on the user to maintain the organization of the wallet. 
> This would all be totally unnecessary with a simple alternate
> encoding.  Granted, I think the multi-chain idea is good, and one that
> I will probably implement anyway, but it seems like overkill in terms
> of developer complexity, and interface complexity to achieve something
> much simpler.  Developers of much simpler/lightweight clients would
> probably find this prohibitive.
>
> On another note:  I thought we weren't encouraging automatic payments
> without requesting from the other party...?  It makes me uneasy, but
> it sounds like group thought has converged on that being acceptable. 
> I bring it up, because there are situations where it makes sense, but
> it sounds unsafe for general users.   Alice will give Bob his own
> chain for sending Alice money, then a year later Bob will send money
> automatically to Alice not realizing that the wallet was lost, retired
> or compromised.  It's not that Bob can't ask for a new address, it's
> that if the interface says "Send Money to Alice", that looks legit
> enough that Bob may not feel it necessary to check with Alice first.  
> That's more of an interface issue though.  We can add a warning to
> "check with the recipient that they still have access to wallet
> 3cQ398x", etc.   But I just know someone is going to lose money anyway...
>
> -Alan
>
>
>
>
>
> On 06/20/2013 03:32 AM, Mike Hearn wrote:
>> Agree with Jeremy and once the payment protocol work is further along
>> I'd like to see us define an extension that lets you send payment
>> requests containing public keys+chain codes, so further payments can
>> be made push-style with no recipient interaction (e.g. for repeated
>> billing). How apps choose to arrange their chains internally seems
>> like an area for experimentation. I definitely want to implement HD
>> wallets in bitcoinj to allow this and if that means not using the
>> same tree structure as in the BIP then so be it.
>>
>>
>> On Thu, Jun 20, 2013 at 5:54 AM, Jeremy Spilman <jeremy at taplink.co
>> <mailto:jeremy at taplink.co>> wrote:
>>
>>     > BIP 32 already specifies how to use the first three tree
>>     levels:  M/i/j/k,
>>     > i~wallet, j~Internal/External, k~address.  The first level is
>>     actually
>>     > type-1 derived, and thus we cannot create an arbitrary number
>>     of them
>>     > without pre-computing them from the offline wallet.  So it's
>>     not "free" to
>>     > create new wallets unless we redefine how the levels work.
>>
>>     Initially I was thinking that you would share the public key and
>>     chain code
>>     from [m/i'/0] so that you can receive payments at [m/i'/0/k], for
>>     a unique
>>     value of 'i' for each receive chain.
>>
>>     For the case of generating new receive chains from a *watch-only*
>>     wallet, as
>>     you say, the options are to either keep a cache of
>>     PubKey/ChainCode for
>>     unused [m/i'] or simply increment 'j' past 1 for an existing
>>     [m/i'/j] -- the
>>     concept of 'internal/'external' and change addresses at Depth=2
>>     don't make
>>     sense for handing out receive chains to lots of people anyway,
>>     and certainly
>>     BIP32 doesn't *require* 0 <= j <= 1.  So I think incrementing 'j'
>>     is the way
>>     to go here...
>>
>>     The "default" layout of BIP32 does NOT mean that implementations
>>     should not
>>     check for transactions with j > 1. That would be a useless
>>     constraint and
>>     obviously self-limiting. It might be helpful to add to the
>>     'Compatibility'
>>     section some minimum expectations about how a wallet should be
>>     'probed' when
>>     imported. If you don't feel completely free to monotonically
>>     increment 'j'
>>     to your hearts content to achieve major usability benefits, then
>>     I say BIP32
>>     could use some clarifying.
>>
>>     BTW - the spec calls for addition not multiplication now, so we
>>     should call
>>     it the 'Addend' not the 'Multiplier' :-)
>>
>>     > Do these extra wallet chains behave as different wallets, or
>>     sub-wallets?
>>
>>     They could, but they certainly don't need to!  A single-wallet
>>     implementation treats this merely as an address-generation
>>     algorithm, and
>>     does not expose any hierarchy to the user interface.  The user just
>>     "magically" gets the ability to send multiple payments to their
>>     contacts
>>     without immediately sacrificing their privacy
>>     (http://www.wired.com/wiredenterprise/2013/06/bitcoin_retai/).
>>     Everything
>>     goes into the same ledger, balance, coin pool, etc. Most of the
>>     code base is
>>     unaware BIP32 is even in use.
>>
>>     While it is *possible* to support separate ledgers, balances,
>>     etc. it is
>>     certainly not required, and you get all the benefits either way.
>>
>>     I think, since your proposal generates and receives payments into
>>     BIP32-style addresses, we both need similar underlying wallet
>>     code. The only
>>     difference is that you are passing the Kpar for [m/i'/0/k] and
>>     the *result*
>>     of CKD'((Kpar, cpar), k), and instead I proposed passing Kpar and
>>     cpar, and
>>     leaving 'k' out of it, letting the receive choose 'k'.
>>
>>     > For instance, maybe there's a benefit to using the same parent
>>     pubkey
>>     > across multiple services, as a form of identity.   If I don't
>>     want that, I
>>     > use your method.  If I do want that, I use my method.
>>
>>     I think it's a interesting idea using static public keys as a
>>     means for
>>     persistent identity and hence security from MitM. If you want a
>>     shared
>>     public key across multiple services we could just combine both
>>     ideas and get
>>     all the benefits, by making the data structure { ParentPubKey,
>>     Addend,
>>     ChainCode }:
>>
>>        ParentPubKey: Public key of m/i' -- 33 bytes
>>        Addend: I[L]*G from CDK'(m/i', j) -- 33 bytes
>>        ChainCode: I[R] from CDK'(m/i', j) -- 32 bytes
>>
>>     All that remains secret is the ChainCode from [m/i'] -- and of
>>     course the
>>     private keys.  The ParentPubKey is a common value across multiple
>>     services,
>>     corresponding to user's identity rooted in [m/i'].  Each service
>>     gets their
>>     own 'j'.  ParentPubKey + Addend gives you the PubKey of [m/i'/j].
>>      With the
>>     ChainCode, the receiver then can generate [m/i'/j/k] for
>>     monotonically
>>     increasing 'k'. Again, from the user perspective all transactions
>>     under
>>     [m/i'] can be presented in a single ledger, or not.
>>
>>     Anyway, fundamentally my feedback is if you are designing for
>>     persistent
>>     long-term relationships, you could build in a mechanism for
>>     generating
>>     address chains so you don't need any further communication after
>>     the initial
>>     exchange, and it need not complicate the wallet.
>>
>>     Thanks,
>>     --Jeremy
>>
>>
>>
>>     ------------------------------------------------------------------------------
>>     This SF.net email is sponsored by Windows:
>>
>>     Build for Windows Store.
>>
>>     http://p.sf.net/sfu/windows-dev2dev
>>     _______________________________________________
>>     Bitcoin-development mailing list
>>     Bitcoin-development at lists.sourceforge.net
>>     <mailto:Bitcoin-development at lists.sourceforge.net>
>>     https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>
>>
>>
>>
>> ------------------------------------------------------------------------------
>> This SF.net email is sponsored by Windows:
>>
>> Build for Windows Store.
>>
>> http://p.sf.net/sfu/windows-dev2dev
>>
>>
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130809/6a4536d2/attachment.html>

From w at grabhive.com  Fri Aug  9 17:58:23 2013
From: w at grabhive.com (Wendell)
Date: Fri, 9 Aug 2013 19:58:23 +0200
Subject: [Bitcoin-development] SPV client in pure JavaScript?
In-Reply-To: <CAJHLa0NxcRHP+hoa1Drie6gfLqCJpnB17+0QsYVO6KQ7gZzYqA@mail.gmail.com>
References: <B4D8D241-E758-4806-8B12-C9A78BF1470B@grabhive.com>
	<CAJHLa0NxcRHP+hoa1Drie6gfLqCJpnB17+0QsYVO6KQ7gZzYqA@mail.gmail.com>
Message-ID: <703284F8-88EE-4CF1-A78C-CE0DBC88A16F@grabhive.com>

No, it's not -- but that's certainly very cool to see Jeff.

How is BitPay going to put this to use?

-wendell

grabhive.com | twitter.com/grabhive | gpg: 6C0C9411

On Aug 9, 2013, at 3:08 PM, Jeff Garzik wrote:

> Certainly.  BitPay is working on such a wallet:
> https://github.com/jgarzik/wally
> 
> wally uses node.js JavaScript, and not browser JavaScript, so not
> exactly what you're talking about...




From jgarzik at bitpay.com  Fri Aug  9 18:09:23 2013
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Fri, 9 Aug 2013 14:09:23 -0400
Subject: [Bitcoin-development] SPV client in pure JavaScript?
In-Reply-To: <703284F8-88EE-4CF1-A78C-CE0DBC88A16F@grabhive.com>
References: <B4D8D241-E758-4806-8B12-C9A78BF1470B@grabhive.com>
	<CAJHLa0NxcRHP+hoa1Drie6gfLqCJpnB17+0QsYVO6KQ7gZzYqA@mail.gmail.com>
	<703284F8-88EE-4CF1-A78C-CE0DBC88A16F@grabhive.com>
Message-ID: <CAJHLa0NGEUkVh=OyrbmvvGgaT8KkQjzPp54Nof0D74N2Epuw5g@mail.gmail.com>

On Fri, Aug 9, 2013 at 1:58 PM, Wendell <w at grabhive.com> wrote:
> No, it's not -- but that's certainly very cool to see Jeff.
>
> How is BitPay going to put this to use?

Well, "wally" is just a demo application, a command line client to
prove a technology.

The main development is in places like "node-libcoin", where a wallet
platform is being developed.  While maintaining a strong commitment to
the blockchain engine side of bitcoind, BitPay has enterprise wallet
needs that do not necessarily mesh well with the standard bitcoind
wallet.  Multi-sig, P2SH and other advanced features are key to the
future use of bitcoin in large enterprises.  Managers, CEOs and other
functionaries at a corporation may each have their own wallets /
keyrings, and cooperate to sign large value, high security bitcoin
multi-sig transactions, for example.

-- 
Jeff Garzik
Senior Software Engineer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From rdohm321 at gmail.com  Fri Aug  9 19:01:42 2013
From: rdohm321 at gmail.com (Randolph D.)
Date: Fri, 9 Aug 2013 21:01:42 +0200
Subject: [Bitcoin-development] BitMail.sf.net - encrypted p2p email
Message-ID: <CAEvNM8=zeunvnGBNgjAgs-e9oiTONy1mYOLgA=5DEHK8VUizxw@mail.gmail.com>

anyone tested the secure encrypted p2p email: http://bitmail.sf.net

SVN here:

svn checkout svn://svn.code.sf.net/p/spot-on/code/ spot-on-code

http://sourceforge.net/p/spot-on/code/commit_browser
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130809/91a1cdbb/attachment.html>

From mike at plan99.net  Fri Aug  9 19:58:39 2013
From: mike at plan99.net (Mike Hearn)
Date: Fri, 9 Aug 2013 21:58:39 +0200
Subject: [Bitcoin-development] Optional "wallet-linkable" address format
	(Re-request)
In-Reply-To: <52052D8F.90706@gmail.com>
References: <5AC3FA1D9B1F4FA0A2FE9A67333642B5@LAPTOPAIR>
	<51C21035.9080407@gmail.com>
	<53E406CF0D93498DAECAAE061555B7C9@LAPTOPAIR>
	<51C234FA.5030909@gmail.com>
	<9600E3D1DDC24D1391C1E4433F71684D@LAPTOPAIR>
	<CANEZrP3ZcQEPOPrO_O2-tdLZUSezj1nbhtVFt1e77KEwzhfZ-A@mail.gmail.com>
	<51CB08EE.1050403@gmail.com> <52052D8F.90706@gmail.com>
Message-ID: <CANEZrP1r3XCLpfjZdO5AymdrYi2CndxHH9HcB+NDas1TpOfUhQ@mail.gmail.com>

Payment protocol is locked down for v1 already. But did you read it? It
doesn't use addresses anywhere. Payments are specified in terms of a list
of outputs which can contain any script. Of course it could be a
pay-to-address script, but pay-to-address uses more bytes in the chain and
there isn't any typeability benefit.

The multiplication trick for deterministic keys is a nice one and worth
doing, but it has to be a v2 feature by this point. It's more important to
get v1 widely implemented and deployed first.


On Fri, Aug 9, 2013 at 7:57 PM, Alan Reiner <etotheipi at gmail.com> wrote:

>  Guys,
>
> I'd like to reiterate my previous request to support this alternate
> address serialization in the payment protocol.  We got caught up in the
> specifics of one use case, but didn't acknowledge that it's still a valid
> address representation that will provide value to those who wish to use it
> and can be safely ignored by others.
>
> Current address format:   binary_to_base58( idbyte + hash160(pubkey) +
> checksum)
> Alternate format:         binary_to_base58( idbyte + parentpubkey +
> multiplier + checksum)
>
> The receiving party will multiply the pubkey by the multiplier, and then
> hash it to get the 20-byte address to send to.  The idea is that you use
> your BIP 32 parent public key, and then you generate whatever child you
> want, and only send them the multiplier used (not the chaincode).  This
> preserves privacy, but if the recipient has your parent public key already,
> they can identify that address being linked to you, but cannot determine
> any other addresses in your wallet.
>
> This form has no drawbacks to the existing address format except for being
> longer and requiring an extra EC multiplication by the person sending to
> that address.  But the advantage is that it optionally allows the sender to
> provide more information than currently contained in the 25-byte hash160
> form.  The discussion about this got side-tracked with the use case I
> presented, but I believe there are plenty of other uses for this.
>
> The particular use case I had in mind was that certain services could be
> setup (pre-arranged), say between wallet software and a business/exchange.
> The exchange would like to be able to reliably send addresses to the user
> for deposit, without risk of MITM, or even if their own public server is
> compromised.  The author of wallet software pre-verifies the public key
> portion of the service, and either hardcodes it into the software, or
> hardcodes their own public key into the software and makes the service's
> signed public key available through query server (allowing the software
> author to offline-sign replacement keys, or add keys for new service
> providers, as needed).
>
> When the user's software receives a payment address, the software can
> verify it belongs to that service.  You can't use dedicated chain
> technique, because it would either have to be exchanged with the user on
> first transaction which half defeats the purpose, or they give them the
> full public key and chaincode which allows the user to see *all *addresses
> ever used by the service.  Neither one is a reasonable solution.
>
> This use case doesn't necessarily scale, but it doesn't have to.  It
> simply allows service providers to skip the SSL and go right to public key
> exchange/verification for a few of the important services they provide
> access to, and will provide better security than relying on SSL/PKI.  This
> would simply be one, coexisting option for providing payment details in the
> absence (or in addition to) SSL/PKI infrastructure.
>
> I'm sure there's other use cases, but it seems simple enough and
> non-disruptive enough that it could be supported easily for no other reason
> than to support that use case (which I intend to implement in Armory to
> help verify high-volume services).
>
> -Alan
>
>
>
>
>
> On 06/26/2013 11:29 AM, Alan Reiner wrote:
>
> Although I'd still prefer my original request, I get much of what I want
> from your guys' recommendation.  It complicates the wallet design, because
> it requires tracking and associating a matrix of addresses for each wallet,
> instead of a single linear list.  But if this is what it's going to take
> then I will go along.
>
> Right now BIP 32 defines, m/i'/j/k, where j=0 is the "external" chain used
> for distributing addresses, and j=1 is the "internal" chain for sending
> change.  The CONOPs (concept of operations) for the extended wallet would
> be like Jeremy described:
>
> - Chains with j>=2 would be independent address chains carved out for
> individuals relationships
> - Add wallet code to individually associate each j-value with a particular
> identity
> - Update the wallet code to pool all the addresses in all j-chains when
> calculating the balance of the wallet and/or creating transactions
> - When choosing to generically "Receive Bitcoins", will pick the next
> address from the j=0 chain
> - Will have to add extra function to "Receive Bitcoins" button to allow
> creation of new contacts/identities.
> - Change will always go to the next address in j=1, no matter which chains
> are used to provide inputs.
> - Add code to figure out lookaheads for each alternate chain.  Not just
> each chain, but looking ahead a couple chains, too.  Luckily, the lookahead
> doesn't have to be very big for chains j>=1
> - Add an interface to display and choose the different chains in your
> wallet, and export the pubkey&chaincode in some soon-to-be-standardized
> format.
> - Add code and interface to receive and track alternate j-chains from
> other clients/users, and maintain those.  Should we try associating
> incoming and outgoing chains?  What happens if they do it wrong?  Meh...
>
> Just as one final swipe at this idea, you can see that I gotta do quite a
> bit of work to support the multi-chain idea, and adds a little extra burden
> on the user to maintain the organization of the wallet.  This would all be
> totally unnecessary with a simple alternate encoding.  Granted, I think the
> multi-chain idea is good, and one that I will probably implement anyway,
> but it seems like overkill in terms of developer complexity, and interface
> complexity to achieve something much simpler.  Developers of much
> simpler/lightweight clients would probably find this prohibitive.
>
> On another note:  I thought we weren't encouraging automatic payments
> without requesting from the other party...?  It makes me uneasy, but it
> sounds like group thought has converged on that being acceptable.  I bring
> it up, because there are situations where it makes sense, but it sounds
> unsafe for general users.   Alice will give Bob his own chain for sending
> Alice money, then a year later Bob will send money automatically to Alice
> not realizing that the wallet was lost, retired or compromised.  It's not
> that Bob can't ask for a new address, it's that if the interface says "Send
> Money to Alice", that looks legit enough that Bob may not feel it necessary
> to check with Alice first.   That's more of an interface issue though.  We
> can add a warning to "check with the recipient that they still have access
> to wallet 3cQ398x", etc.   But I just know someone is going to lose money
> anyway...
>
> -Alan
>
>
>
>
>
> On 06/20/2013 03:32 AM, Mike Hearn wrote:
>
> Agree with Jeremy and once the payment protocol work is further along I'd
> like to see us define an extension that lets you send payment requests
> containing public keys+chain codes, so further payments can be made
> push-style with no recipient interaction (e.g. for repeated billing). How
> apps choose to arrange their chains internally seems like an area for
> experimentation. I definitely want to implement HD wallets in bitcoinj to
> allow this and if that means not using the same tree structure as in the
> BIP then so be it.
>
>
> On Thu, Jun 20, 2013 at 5:54 AM, Jeremy Spilman <jeremy at taplink.co> wrote:
>
>> > BIP 32 already specifies how to use the first three tree levels:
>>  M/i/j/k,
>> > i~wallet, j~Internal/External, k~address.  The first level is actually
>> > type-1 derived, and thus we cannot create an arbitrary number of them
>> > without pre-computing them from the offline wallet.  So it's not "free"
>> to
>> > create new wallets unless we redefine how the levels work.
>>
>>  Initially I was thinking that you would share the public key and chain
>> code
>> from [m/i'/0] so that you can receive payments at [m/i'/0/k], for a unique
>> value of 'i' for each receive chain.
>>
>> For the case of generating new receive chains from a *watch-only* wallet,
>> as
>> you say, the options are to either keep a cache of PubKey/ChainCode for
>> unused [m/i'] or simply increment 'j' past 1 for an existing [m/i'/j] --
>> the
>> concept of 'internal/'external' and change addresses at Depth=2 don't make
>> sense for handing out receive chains to lots of people anyway, and
>> certainly
>> BIP32 doesn't *require* 0 <= j <= 1.  So I think incrementing 'j' is the
>> way
>> to go here...
>>
>> The "default" layout of BIP32 does NOT mean that implementations should
>> not
>> check for transactions with j > 1. That would be a useless constraint and
>> obviously self-limiting. It might be helpful to add to the 'Compatibility'
>> section some minimum expectations about how a wallet should be 'probed'
>> when
>> imported. If you don't feel completely free to monotonically increment 'j'
>> to your hearts content to achieve major usability benefits, then I say
>> BIP32
>> could use some clarifying.
>>
>> BTW - the spec calls for addition not multiplication now, so we should
>> call
>> it the 'Addend' not the 'Multiplier' :-)
>>
>> > Do these extra wallet chains behave as different wallets, or
>> sub-wallets?
>>
>>  They could, but they certainly don't need to!  A single-wallet
>> implementation treats this merely as an address-generation algorithm, and
>> does not expose any hierarchy to the user interface.  The user just
>> ?magically? gets the ability to send multiple payments to their contacts
>> without immediately sacrificing their privacy
>> (http://www.wired.com/wiredenterprise/2013/06/bitcoin_retai/). Everything
>> goes into the same ledger, balance, coin pool, etc. Most of the code base
>> is
>> unaware BIP32 is even in use.
>>
>> While it is *possible* to support separate ledgers, balances, etc. it is
>> certainly not required, and you get all the benefits either way.
>>
>> I think, since your proposal generates and receives payments into
>> BIP32-style addresses, we both need similar underlying wallet code. The
>> only
>> difference is that you are passing the Kpar for [m/i'/0/k] and the
>> *result*
>> of CKD'((Kpar, cpar), k), and instead I proposed passing Kpar and cpar,
>> and
>> leaving 'k' out of it, letting the receive choose 'k'.
>>
>> > For instance, maybe there's a benefit to using the same parent pubkey
>>  > across multiple services, as a form of identity.   If I don't want
>> that, I
>> > use your method.  If I do want that, I use my method.
>>
>>  I think it's a interesting idea using static public keys as a means for
>> persistent identity and hence security from MitM. If you want a shared
>> public key across multiple services we could just combine both ideas and
>> get
>> all the benefits, by making the data structure { ParentPubKey, Addend,
>> ChainCode }:
>>
>>    ParentPubKey: Public key of m/i' -- 33 bytes
>>    Addend: I[L]*G from CDK'(m/i', j) -- 33 bytes
>>    ChainCode: I[R] from CDK'(m/i', j) -- 32 bytes
>>
>> All that remains secret is the ChainCode from [m/i'] -- and of course the
>> private keys.  The ParentPubKey is a common value across multiple
>> services,
>> corresponding to user's identity rooted in [m/i'].  Each service gets
>> their
>> own 'j'.  ParentPubKey + Addend gives you the PubKey of [m/i'/j].  With
>> the
>> ChainCode, the receiver then can generate [m/i'/j/k] for monotonically
>> increasing 'k'. Again, from the user perspective all transactions under
>> [m/i'] can be presented in a single ledger, or not.
>>
>> Anyway, fundamentally my feedback is if you are designing for persistent
>> long-term relationships, you could build in a mechanism for generating
>> address chains so you don't need any further communication after the
>> initial
>> exchange, and it need not complicate the wallet.
>>
>> Thanks,
>> --Jeremy
>>
>>
>>
>>
>> ------------------------------------------------------------------------------
>> This SF.net email is sponsored by Windows:
>>
>> Build for Windows Store.
>>
>> http://p.sf.net/sfu/windows-dev2dev
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>
>
>
>
> ------------------------------------------------------------------------------
> This SF.net email is sponsored by Windows:
>
> Build for Windows Store.
> http://p.sf.net/sfu/windows-dev2dev
>
>
>
> _______________________________________________
> Bitcoin-development mailing listBitcoin-development at lists.sourceforge.nethttps://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
>
>
>
> ------------------------------------------------------------------------------
> Get 100% visibility into Java/.NET code with AppDynamics Lite!
> It's a free troubleshooting tool designed for production.
> Get down to code-level detail for bottlenecks, with <2% overhead.
> Download for free and get started troubleshooting in minutes.
> http://pubads.g.doubleclick.net/gampad/clk?id=48897031&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130809/072e001a/attachment.html>

From mike at plan99.net  Fri Aug  9 20:35:07 2013
From: mike at plan99.net (Mike Hearn)
Date: Fri, 9 Aug 2013 22:35:07 +0200
Subject: [Bitcoin-development] Optional "wallet-linkable" address format
	(Re-request)
In-Reply-To: <52054D44.5050006@gmail.com>
References: <5AC3FA1D9B1F4FA0A2FE9A67333642B5@LAPTOPAIR>
	<51C21035.9080407@gmail.com>
	<53E406CF0D93498DAECAAE061555B7C9@LAPTOPAIR>
	<51C234FA.5030909@gmail.com>
	<9600E3D1DDC24D1391C1E4433F71684D@LAPTOPAIR>
	<CANEZrP3ZcQEPOPrO_O2-tdLZUSezj1nbhtVFt1e77KEwzhfZ-A@mail.gmail.com>
	<51CB08EE.1050403@gmail.com> <52052D8F.90706@gmail.com>
	<CANEZrP1r3XCLpfjZdO5AymdrYi2CndxHH9HcB+NDas1TpOfUhQ@mail.gmail.com>
	<52054D44.5050006@gmail.com>
Message-ID: <CANEZrP2Bx6onxWPnW19b+VM=t0UFOBTer8QRU-9rOWPHUe4FaQ@mail.gmail.com>

It's BIP specified and implemented in Bitcoin-Qt so now is the time to
start :) I'm hoping that most wallets can announce support near
simultaneously ....


On Fri, Aug 9, 2013 at 10:12 PM, Alan Reiner <etotheipi at gmail.com> wrote:

>  That's fine.  I just want to make sure it's considered for inclusion at
> some point, because I really hope to leverage the "identity" mechanism I
> just described, and it's much easier if it's part of a standard instead of
> convincing others to go around the standard with us.
>
> I have not spent much time looking at the payment protocol itself.  I
> didn't feel like I'd have much to contribute (besides requesting a feature
> I know isn't there).  I was planning to wait until it was complete before
> fully grokking and implementing it in Armory.
>
>
>
> On 08/09/2013 03:58 PM, Mike Hearn wrote:
>
> Payment protocol is locked down for v1 already. But did you read it? It
> doesn't use addresses anywhere. Payments are specified in terms of a list
> of outputs which can contain any script. Of course it could be a
> pay-to-address script, but pay-to-address uses more bytes in the chain and
> there isn't any typeability benefit.
>
>  The multiplication trick for deterministic keys is a nice one and worth
> doing, but it has to be a v2 feature by this point. It's more important to
> get v1 widely implemented and deployed first.
>
>
> On Fri, Aug 9, 2013 at 7:57 PM, Alan Reiner <etotheipi at gmail.com> wrote:
>
>>  Guys,
>>
>> I'd like to reiterate my previous request to support this alternate
>> address serialization in the payment protocol.  We got caught up in the
>> specifics of one use case, but didn't acknowledge that it's still a valid
>> address representation that will provide value to those who wish to use it
>> and can be safely ignored by others.
>>
>> Current address format:   binary_to_base58( idbyte + hash160(pubkey) +
>> checksum)
>> Alternate format:         binary_to_base58( idbyte + parentpubkey +
>> multiplier + checksum)
>>
>> The receiving party will multiply the pubkey by the multiplier, and then
>> hash it to get the 20-byte address to send to.  The idea is that you use
>> your BIP 32 parent public key, and then you generate whatever child you
>> want, and only send them the multiplier used (not the chaincode).  This
>> preserves privacy, but if the recipient has your parent public key already,
>> they can identify that address being linked to you, but cannot determine
>> any other addresses in your wallet.
>>
>> This form has no drawbacks to the existing address format except for
>> being longer and requiring an extra EC multiplication by the person sending
>> to that address.  But the advantage is that it optionally allows the sender
>> to provide more information than currently contained in the 25-byte hash160
>> form.  The discussion about this got side-tracked with the use case I
>> presented, but I believe there are plenty of other uses for this.
>>
>> The particular use case I had in mind was that certain services could be
>> setup (pre-arranged), say between wallet software and a business/exchange.
>> The exchange would like to be able to reliably send addresses to the user
>> for deposit, without risk of MITM, or even if their own public server is
>> compromised.  The author of wallet software pre-verifies the public key
>> portion of the service, and either hardcodes it into the software, or
>> hardcodes their own public key into the software and makes the service's
>> signed public key available through query server (allowing the software
>> author to offline-sign replacement keys, or add keys for new service
>> providers, as needed).
>>
>> When the user's software receives a payment address, the software can
>> verify it belongs to that service.  You can't use dedicated chain
>> technique, because it would either have to be exchanged with the user on
>> first transaction which half defeats the purpose, or they give them the
>> full public key and chaincode which allows the user to see *all *addresses
>> ever used by the service.  Neither one is a reasonable solution.
>>
>> This use case doesn't necessarily scale, but it doesn't have to.  It
>> simply allows service providers to skip the SSL and go right to public key
>> exchange/verification for a few of the important services they provide
>> access to, and will provide better security than relying on SSL/PKI.  This
>> would simply be one, coexisting option for providing payment details in the
>> absence (or in addition to) SSL/PKI infrastructure.
>>
>> I'm sure there's other use cases, but it seems simple enough and
>> non-disruptive enough that it could be supported easily for no other reason
>> than to support that use case (which I intend to implement in Armory to
>> help verify high-volume services).
>>
>> -Alan
>>
>>
>>
>>
>>
>> On 06/26/2013 11:29 AM, Alan Reiner wrote:
>>
>> Although I'd still prefer my original request, I get much of what I want
>> from your guys' recommendation.  It complicates the wallet design, because
>> it requires tracking and associating a matrix of addresses for each wallet,
>> instead of a single linear list.  But if this is what it's going to take
>> then I will go along.
>>
>> Right now BIP 32 defines, m/i'/j/k, where j=0 is the "external" chain
>> used for distributing addresses, and j=1 is the "internal" chain for
>> sending change.  The CONOPs (concept of operations) for the extended wallet
>> would be like Jeremy described:
>>
>> - Chains with j>=2 would be independent address chains carved out for
>> individuals relationships
>> - Add wallet code to individually associate each j-value with a
>> particular identity
>> - Update the wallet code to pool all the addresses in all j-chains when
>> calculating the balance of the wallet and/or creating transactions
>> - When choosing to generically "Receive Bitcoins", will pick the next
>> address from the j=0 chain
>> - Will have to add extra function to "Receive Bitcoins" button to allow
>> creation of new contacts/identities.
>> - Change will always go to the next address in j=1, no matter which
>> chains are used to provide inputs.
>> - Add code to figure out lookaheads for each alternate chain.  Not just
>> each chain, but looking ahead a couple chains, too.  Luckily, the lookahead
>> doesn't have to be very big for chains j>=1
>> - Add an interface to display and choose the different chains in your
>> wallet, and export the pubkey&chaincode in some soon-to-be-standardized
>> format.
>> - Add code and interface to receive and track alternate j-chains from
>> other clients/users, and maintain those.  Should we try associating
>> incoming and outgoing chains?  What happens if they do it wrong?  Meh...
>>
>> Just as one final swipe at this idea, you can see that I gotta do quite a
>> bit of work to support the multi-chain idea, and adds a little extra burden
>> on the user to maintain the organization of the wallet.  This would all be
>> totally unnecessary with a simple alternate encoding.  Granted, I think the
>> multi-chain idea is good, and one that I will probably implement anyway,
>> but it seems like overkill in terms of developer complexity, and interface
>> complexity to achieve something much simpler.  Developers of much
>> simpler/lightweight clients would probably find this prohibitive.
>>
>> On another note:  I thought we weren't encouraging automatic payments
>> without requesting from the other party...?  It makes me uneasy, but it
>> sounds like group thought has converged on that being acceptable.  I bring
>> it up, because there are situations where it makes sense, but it sounds
>> unsafe for general users.   Alice will give Bob his own chain for sending
>> Alice money, then a year later Bob will send money automatically to Alice
>> not realizing that the wallet was lost, retired or compromised.  It's not
>> that Bob can't ask for a new address, it's that if the interface says "Send
>> Money to Alice", that looks legit enough that Bob may not feel it necessary
>> to check with Alice first.   That's more of an interface issue though.  We
>> can add a warning to "check with the recipient that they still have access
>> to wallet 3cQ398x", etc.   But I just know someone is going to lose money
>> anyway...
>>
>> -Alan
>>
>>
>>
>>
>>
>> On 06/20/2013 03:32 AM, Mike Hearn wrote:
>>
>> Agree with Jeremy and once the payment protocol work is further along I'd
>> like to see us define an extension that lets you send payment requests
>> containing public keys+chain codes, so further payments can be made
>> push-style with no recipient interaction (e.g. for repeated billing). How
>> apps choose to arrange their chains internally seems like an area for
>> experimentation. I definitely want to implement HD wallets in bitcoinj to
>> allow this and if that means not using the same tree structure as in the
>> BIP then so be it.
>>
>>
>> On Thu, Jun 20, 2013 at 5:54 AM, Jeremy Spilman <jeremy at taplink.co>wrote:
>>
>>> > BIP 32 already specifies how to use the first three tree levels:
>>>  M/i/j/k,
>>> > i~wallet, j~Internal/External, k~address.  The first level is actually
>>> > type-1 derived, and thus we cannot create an arbitrary number of them
>>> > without pre-computing them from the offline wallet.  So it's not
>>> "free" to
>>> > create new wallets unless we redefine how the levels work.
>>>
>>>  Initially I was thinking that you would share the public key and chain
>>> code
>>> from [m/i'/0] so that you can receive payments at [m/i'/0/k], for a
>>> unique
>>> value of 'i' for each receive chain.
>>>
>>> For the case of generating new receive chains from a *watch-only*
>>> wallet, as
>>> you say, the options are to either keep a cache of PubKey/ChainCode for
>>> unused [m/i'] or simply increment 'j' past 1 for an existing [m/i'/j] --
>>> the
>>> concept of 'internal/'external' and change addresses at Depth=2 don't
>>> make
>>> sense for handing out receive chains to lots of people anyway, and
>>> certainly
>>> BIP32 doesn't *require* 0 <= j <= 1.  So I think incrementing 'j' is the
>>> way
>>> to go here...
>>>
>>> The "default" layout of BIP32 does NOT mean that implementations should
>>> not
>>> check for transactions with j > 1. That would be a useless constraint and
>>> obviously self-limiting. It might be helpful to add to the
>>> 'Compatibility'
>>> section some minimum expectations about how a wallet should be 'probed'
>>> when
>>> imported. If you don't feel completely free to monotonically increment
>>> 'j'
>>> to your hearts content to achieve major usability benefits, then I say
>>> BIP32
>>> could use some clarifying.
>>>
>>> BTW - the spec calls for addition not multiplication now, so we should
>>> call
>>> it the 'Addend' not the 'Multiplier' :-)
>>>
>>> > Do these extra wallet chains behave as different wallets, or
>>> sub-wallets?
>>>
>>>  They could, but they certainly don't need to!  A single-wallet
>>> implementation treats this merely as an address-generation algorithm, and
>>> does not expose any hierarchy to the user interface.  The user just
>>> ?magically? gets the ability to send multiple payments to their contacts
>>> without immediately sacrificing their privacy
>>> (http://www.wired.com/wiredenterprise/2013/06/bitcoin_retai/).
>>> Everything
>>> goes into the same ledger, balance, coin pool, etc. Most of the code
>>> base is
>>> unaware BIP32 is even in use.
>>>
>>> While it is *possible* to support separate ledgers, balances, etc. it is
>>> certainly not required, and you get all the benefits either way.
>>>
>>> I think, since your proposal generates and receives payments into
>>> BIP32-style addresses, we both need similar underlying wallet code. The
>>> only
>>> difference is that you are passing the Kpar for [m/i'/0/k] and the
>>> *result*
>>> of CKD'((Kpar, cpar), k), and instead I proposed passing Kpar and cpar,
>>> and
>>> leaving 'k' out of it, letting the receive choose 'k'.
>>>
>>> > For instance, maybe there's a benefit to using the same parent pubkey
>>>  > across multiple services, as a form of identity.   If I don't want
>>> that, I
>>> > use your method.  If I do want that, I use my method.
>>>
>>>  I think it's a interesting idea using static public keys as a means for
>>> persistent identity and hence security from MitM. If you want a shared
>>> public key across multiple services we could just combine both ideas and
>>> get
>>> all the benefits, by making the data structure { ParentPubKey, Addend,
>>> ChainCode }:
>>>
>>>    ParentPubKey: Public key of m/i' -- 33 bytes
>>>    Addend: I[L]*G from CDK'(m/i', j) -- 33 bytes
>>>    ChainCode: I[R] from CDK'(m/i', j) -- 32 bytes
>>>
>>> All that remains secret is the ChainCode from [m/i'] -- and of course the
>>> private keys.  The ParentPubKey is a common value across multiple
>>> services,
>>> corresponding to user's identity rooted in [m/i'].  Each service gets
>>> their
>>> own 'j'.  ParentPubKey + Addend gives you the PubKey of [m/i'/j].  With
>>> the
>>> ChainCode, the receiver then can generate [m/i'/j/k] for monotonically
>>> increasing 'k'. Again, from the user perspective all transactions under
>>> [m/i'] can be presented in a single ledger, or not.
>>>
>>> Anyway, fundamentally my feedback is if you are designing for persistent
>>> long-term relationships, you could build in a mechanism for generating
>>> address chains so you don't need any further communication after the
>>> initial
>>> exchange, and it need not complicate the wallet.
>>>
>>> Thanks,
>>> --Jeremy
>>>
>>>
>>>
>>>
>>> ------------------------------------------------------------------------------
>>> This SF.net email is sponsored by Windows:
>>>
>>> Build for Windows Store.
>>>
>>> http://p.sf.net/sfu/windows-dev2dev
>>> _______________________________________________
>>> Bitcoin-development mailing list
>>> Bitcoin-development at lists.sourceforge.net
>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>>
>>
>>
>>
>> ------------------------------------------------------------------------------
>> This SF.net email is sponsored by Windows:
>>
>> Build for Windows Store.
>> http://p.sf.net/sfu/windows-dev2dev
>>
>>
>>
>> _______________________________________________
>> Bitcoin-development mailing listBitcoin-development at lists.sourceforge.nethttps://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>
>>
>>
>>
>>
>> ------------------------------------------------------------------------------
>> Get 100% visibility into Java/.NET code with AppDynamics Lite!
>> It's a free troubleshooting tool designed for production.
>> Get down to code-level detail for bottlenecks, with <2% overhead.
>> Download for free and get started troubleshooting in minutes.
>>
>> http://pubads.g.doubleclick.net/gampad/clk?id=48897031&iu=/4140/ostg.clktrk
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>
>>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130809/7674fec9/attachment.html>

From w at grabhive.com  Fri Aug  9 21:23:40 2013
From: w at grabhive.com (Wendell)
Date: Fri, 9 Aug 2013 23:23:40 +0200
Subject: [Bitcoin-development] BitMail.sf.net - encrypted p2p email
In-Reply-To: <CAEvNM8=zeunvnGBNgjAgs-e9oiTONy1mYOLgA=5DEHK8VUizxw@mail.gmail.com>
References: <CAEvNM8=zeunvnGBNgjAgs-e9oiTONy1mYOLgA=5DEHK8VUizxw@mail.gmail.com>
Message-ID: <F669F465-3474-490E-9B2F-995C24F88404@grabhive.com>

Jesus, please stop this. :(

-wendell

grabhive.com | twitter.com/grabhive | gpg: 6C0C9411

On Aug 9, 2013, at 9:01 PM, Randolph D. wrote:

> anyone tested the secure encrypted p2p email: http://bitmail.sf.net
>  
> SVN here:
> 
> svn checkout svn://svn.code.sf.net/p/spot-on/code/ spot-on-code
> 
> http://sourceforge.net/p/spot-on/code/commit_browser



From gavinandresen at gmail.com  Fri Aug  9 21:51:00 2013
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Sat, 10 Aug 2013 07:51:00 +1000
Subject: [Bitcoin-development] Optional "wallet-linkable" address format
	(Re-request)
In-Reply-To: <52052D8F.90706@gmail.com>
References: <5AC3FA1D9B1F4FA0A2FE9A67333642B5@LAPTOPAIR>
	<51C21035.9080407@gmail.com>
	<53E406CF0D93498DAECAAE061555B7C9@LAPTOPAIR>
	<51C234FA.5030909@gmail.com>
	<9600E3D1DDC24D1391C1E4433F71684D@LAPTOPAIR>
	<CANEZrP3ZcQEPOPrO_O2-tdLZUSezj1nbhtVFt1e77KEwzhfZ-A@mail.gmail.com>
	<51CB08EE.1050403@gmail.com> <52052D8F.90706@gmail.com>
Message-ID: <CABsx9T2unkmFczDen0mq+L1J5TOTzSuvsvuQ0-e4uRBM1bp+Ew@mail.gmail.com>

As Mike said: the payment protocol doesn't use bitcoin addresses under
the covers.

It is also designed to be easily extensible, so if you want the server
to send the wallet software a public key and multiplier, then add
"publickey" and "multiplier" optional fields to the PaymentDetails (or
maybe Output) message.

-- 
--
Gavin Andresen



From etotheipi at gmail.com  Fri Aug  9 20:12:52 2013
From: etotheipi at gmail.com (Alan Reiner)
Date: Fri, 09 Aug 2013 16:12:52 -0400
Subject: [Bitcoin-development] Optional "wallet-linkable" address format
 (Re-request)
In-Reply-To: <CANEZrP1r3XCLpfjZdO5AymdrYi2CndxHH9HcB+NDas1TpOfUhQ@mail.gmail.com>
References: <5AC3FA1D9B1F4FA0A2FE9A67333642B5@LAPTOPAIR>
	<51C21035.9080407@gmail.com>
	<53E406CF0D93498DAECAAE061555B7C9@LAPTOPAIR>
	<51C234FA.5030909@gmail.com>
	<9600E3D1DDC24D1391C1E4433F71684D@LAPTOPAIR>
	<CANEZrP3ZcQEPOPrO_O2-tdLZUSezj1nbhtVFt1e77KEwzhfZ-A@mail.gmail.com>
	<51CB08EE.1050403@gmail.com> <52052D8F.90706@gmail.com>
	<CANEZrP1r3XCLpfjZdO5AymdrYi2CndxHH9HcB+NDas1TpOfUhQ@mail.gmail.com>
Message-ID: <52054D44.5050006@gmail.com>

That's fine.  I just want to make sure it's considered for inclusion at
some point, because I really hope to leverage the "identity" mechanism I
just described, and it's much easier if it's part of a standard instead
of convincing others to go around the standard with us.

I have not spent much time looking at the payment protocol itself.  I
didn't feel like I'd have much to contribute (besides requesting a
feature I know isn't there).  I was planning to wait until it was
complete before fully grokking and implementing it in Armory.


On 08/09/2013 03:58 PM, Mike Hearn wrote:
> Payment protocol is locked down for v1 already. But did you read it?
> It doesn't use addresses anywhere. Payments are specified in terms of
> a list of outputs which can contain any script. Of course it could be
> a pay-to-address script, but pay-to-address uses more bytes in the
> chain and there isn't any typeability benefit.
>
> The multiplication trick for deterministic keys is a nice one and
> worth doing, but it has to be a v2 feature by this point. It's more
> important to get v1 widely implemented and deployed first.
>
>
> On Fri, Aug 9, 2013 at 7:57 PM, Alan Reiner <etotheipi at gmail.com
> <mailto:etotheipi at gmail.com>> wrote:
>
>     Guys,
>
>     I'd like to reiterate my previous request to support this
>     alternate address serialization in the payment protocol.  We got
>     caught up in the specifics of one use case, but didn't acknowledge
>     that it's still a valid address representation that will provide
>     value to those who wish to use it and can be safely ignored by others.
>
>     Current address format:   binary_to_base58( idbyte +
>     hash160(pubkey) + checksum)
>     Alternate format:         binary_to_base58( idbyte + parentpubkey
>     + multiplier + checksum)
>
>     The receiving party will multiply the pubkey by the multiplier,
>     and then hash it to get the 20-byte address to send to.  The idea
>     is that you use your BIP 32 parent public key, and then you
>     generate whatever child you want, and only send them the
>     multiplier used (not the chaincode).  This preserves privacy, but
>     if the recipient has your parent public key already, they can
>     identify that address being linked to you, but cannot determine
>     any other addresses in your wallet.
>
>     This form has no drawbacks to the existing address format except
>     for being longer and requiring an extra EC multiplication by the
>     person sending to that address.  But the advantage is that it
>     optionally allows the sender to provide more information than
>     currently contained in the 25-byte hash160 form.  The discussion
>     about this got side-tracked with the use case I presented, but I
>     believe there are plenty of other uses for this.
>
>     The particular use case I had in mind was that certain services
>     could be setup (pre-arranged), say between wallet software and a
>     business/exchange.  The exchange would like to be able to reliably
>     send addresses to the user for deposit, without risk of MITM, or
>     even if their own public server is compromised.  The author of
>     wallet software pre-verifies the public key portion of the
>     service, and either hardcodes it into the software, or hardcodes
>     their own public key into the software and makes the service's
>     signed public key available through query server (allowing the
>     software author to offline-sign replacement keys, or add keys for
>     new service providers, as needed). 
>
>     When the user's software receives a payment address, the software
>     can verify it belongs to that service.  You can't use dedicated
>     chain technique, because it would either have to be exchanged with
>     the user on first transaction which half defeats the purpose, or
>     they give them the full public key and chaincode which allows the
>     user to see /all /addresses ever used by the service.  Neither one
>     is a reasonable solution.
>
>     This use case doesn't necessarily scale, but it doesn't have to. 
>     It simply allows service providers to skip the SSL and go right to
>     public key exchange/verification for a few of the important
>     services they provide access to, and will provide better security
>     than relying on SSL/PKI.  This would simply be one, coexisting
>     option for providing payment details in the absence (or in
>     addition to) SSL/PKI infrastructure.
>
>     I'm sure there's other use cases, but it seems simple enough and
>     non-disruptive enough that it could be supported easily for no
>     other reason than to support that use case (which I intend to
>     implement in Armory to help verify high-volume services).
>
>     -Alan
>
>
>
>
>
>     On 06/26/2013 11:29 AM, Alan Reiner wrote:
>>     Although I'd still prefer my original request, I get much of what
>>     I want from your guys' recommendation.  It complicates the wallet
>>     design, because it requires tracking and associating a matrix of
>>     addresses for each wallet, instead of a single linear list.  But
>>     if this is what it's going to take then I will go along. 
>>
>>     Right now BIP 32 defines, m/i'/j/k, where j=0 is the "external"
>>     chain used for distributing addresses, and j=1 is the "internal"
>>     chain for sending change.  The CONOPs (concept of operations) for
>>     the extended wallet would be like Jeremy described:
>>
>>     - Chains with j>=2 would be independent address chains carved out
>>     for individuals relationships
>>     - Add wallet code to individually associate each j-value with a
>>     particular identity
>>     - Update the wallet code to pool all the addresses in all
>>     j-chains when calculating the balance of the wallet and/or
>>     creating transactions
>>     - When choosing to generically "Receive Bitcoins", will pick the
>>     next address from the j=0 chain
>>     - Will have to add extra function to "Receive Bitcoins" button to
>>     allow creation of new contacts/identities.
>>     - Change will always go to the next address in j=1, no matter
>>     which chains are used to provide inputs.
>>     - Add code to figure out lookaheads for each alternate chain. 
>>     Not just each chain, but looking ahead a couple chains, too. 
>>     Luckily, the lookahead doesn't have to be very big for chains j>=1 
>>     - Add an interface to display and choose the different chains in
>>     your wallet, and export the pubkey&chaincode in some
>>     soon-to-be-standardized format. 
>>     - Add code and interface to receive and track alternate j-chains
>>     from other clients/users, and maintain those.  Should we try
>>     associating incoming and outgoing chains?  What happens if they
>>     do it wrong?  Meh...
>>
>>     Just as one final swipe at this idea, you can see that I gotta do
>>     quite a bit of work to support the multi-chain idea, and adds a
>>     little extra burden on the user to maintain the organization of
>>     the wallet.  This would all be totally unnecessary with a simple
>>     alternate encoding.  Granted, I think the multi-chain idea is
>>     good, and one that I will probably implement anyway, but it seems
>>     like overkill in terms of developer complexity, and interface
>>     complexity to achieve something much simpler.  Developers of much
>>     simpler/lightweight clients would probably find this prohibitive.
>>
>>     On another note:  I thought we weren't encouraging automatic
>>     payments without requesting from the other party...?  It makes me
>>     uneasy, but it sounds like group thought has converged on that
>>     being acceptable.  I bring it up, because there are situations
>>     where it makes sense, but it sounds unsafe for general users.  
>>     Alice will give Bob his own chain for sending Alice money, then a
>>     year later Bob will send money automatically to Alice not
>>     realizing that the wallet was lost, retired or compromised.  It's
>>     not that Bob can't ask for a new address, it's that if the
>>     interface says "Send Money to Alice", that looks legit enough
>>     that Bob may not feel it necessary to check with Alice first.  
>>     That's more of an interface issue though.  We can add a warning
>>     to "check with the recipient that they still have access to
>>     wallet 3cQ398x", etc.   But I just know someone is going to lose
>>     money anyway...
>>
>>     -Alan
>>
>>
>>
>>
>>
>>     On 06/20/2013 03:32 AM, Mike Hearn wrote:
>>>     Agree with Jeremy and once the payment protocol work is further
>>>     along I'd like to see us define an extension that lets you send
>>>     payment requests containing public keys+chain codes, so further
>>>     payments can be made push-style with no recipient interaction
>>>     (e.g. for repeated billing). How apps choose to arrange their
>>>     chains internally seems like an area for experimentation. I
>>>     definitely want to implement HD wallets in bitcoinj to allow
>>>     this and if that means not using the same tree structure as in
>>>     the BIP then so be it.
>>>
>>>
>>>     On Thu, Jun 20, 2013 at 5:54 AM, Jeremy Spilman
>>>     <jeremy at taplink.co <mailto:jeremy at taplink.co>> wrote:
>>>
>>>         > BIP 32 already specifies how to use the first three tree
>>>         levels:  M/i/j/k,
>>>         > i~wallet, j~Internal/External, k~address.  The first level
>>>         is actually
>>>         > type-1 derived, and thus we cannot create an arbitrary
>>>         number of them
>>>         > without pre-computing them from the offline wallet.  So
>>>         it's not "free" to
>>>         > create new wallets unless we redefine how the levels work.
>>>
>>>         Initially I was thinking that you would share the public key
>>>         and chain code
>>>         from [m/i'/0] so that you can receive payments at
>>>         [m/i'/0/k], for a unique
>>>         value of 'i' for each receive chain.
>>>
>>>         For the case of generating new receive chains from a
>>>         *watch-only* wallet, as
>>>         you say, the options are to either keep a cache of
>>>         PubKey/ChainCode for
>>>         unused [m/i'] or simply increment 'j' past 1 for an existing
>>>         [m/i'/j] -- the
>>>         concept of 'internal/'external' and change addresses at
>>>         Depth=2 don't make
>>>         sense for handing out receive chains to lots of people
>>>         anyway, and certainly
>>>         BIP32 doesn't *require* 0 <= j <= 1.  So I think
>>>         incrementing 'j' is the way
>>>         to go here...
>>>
>>>         The "default" layout of BIP32 does NOT mean that
>>>         implementations should not
>>>         check for transactions with j > 1. That would be a useless
>>>         constraint and
>>>         obviously self-limiting. It might be helpful to add to the
>>>         'Compatibility'
>>>         section some minimum expectations about how a wallet should
>>>         be 'probed' when
>>>         imported. If you don't feel completely free to monotonically
>>>         increment 'j'
>>>         to your hearts content to achieve major usability benefits,
>>>         then I say BIP32
>>>         could use some clarifying.
>>>
>>>         BTW - the spec calls for addition not multiplication now, so
>>>         we should call
>>>         it the 'Addend' not the 'Multiplier' :-)
>>>
>>>         > Do these extra wallet chains behave as different wallets,
>>>         or sub-wallets?
>>>
>>>         They could, but they certainly don't need to!  A single-wallet
>>>         implementation treats this merely as an address-generation
>>>         algorithm, and
>>>         does not expose any hierarchy to the user interface.  The
>>>         user just
>>>         ?magically? gets the ability to send multiple payments to
>>>         their contacts
>>>         without immediately sacrificing their privacy
>>>         (http://www.wired.com/wiredenterprise/2013/06/bitcoin_retai/).
>>>         Everything
>>>         goes into the same ledger, balance, coin pool, etc. Most of
>>>         the code base is
>>>         unaware BIP32 is even in use.
>>>
>>>         While it is *possible* to support separate ledgers,
>>>         balances, etc. it is
>>>         certainly not required, and you get all the benefits either way.
>>>
>>>         I think, since your proposal generates and receives payments
>>>         into
>>>         BIP32-style addresses, we both need similar underlying
>>>         wallet code. The only
>>>         difference is that you are passing the Kpar for [m/i'/0/k]
>>>         and the *result*
>>>         of CKD'((Kpar, cpar), k), and instead I proposed passing
>>>         Kpar and cpar, and
>>>         leaving 'k' out of it, letting the receive choose 'k'.
>>>
>>>         > For instance, maybe there's a benefit to using the same
>>>         parent pubkey
>>>         > across multiple services, as a form of identity.   If I
>>>         don't want that, I
>>>         > use your method.  If I do want that, I use my method.
>>>
>>>         I think it's a interesting idea using static public keys as
>>>         a means for
>>>         persistent identity and hence security from MitM. If you
>>>         want a shared
>>>         public key across multiple services we could just combine
>>>         both ideas and get
>>>         all the benefits, by making the data structure {
>>>         ParentPubKey, Addend,
>>>         ChainCode }:
>>>
>>>            ParentPubKey: Public key of m/i' -- 33 bytes
>>>            Addend: I[L]*G from CDK'(m/i', j) -- 33 bytes
>>>            ChainCode: I[R] from CDK'(m/i', j) -- 32 bytes
>>>
>>>         All that remains secret is the ChainCode from [m/i'] -- and
>>>         of course the
>>>         private keys.  The ParentPubKey is a common value across
>>>         multiple services,
>>>         corresponding to user's identity rooted in [m/i'].  Each
>>>         service gets their
>>>         own 'j'.  ParentPubKey + Addend gives you the PubKey of
>>>         [m/i'/j].  With the
>>>         ChainCode, the receiver then can generate [m/i'/j/k] for
>>>         monotonically
>>>         increasing 'k'. Again, from the user perspective all
>>>         transactions under
>>>         [m/i'] can be presented in a single ledger, or not.
>>>
>>>         Anyway, fundamentally my feedback is if you are designing
>>>         for persistent
>>>         long-term relationships, you could build in a mechanism for
>>>         generating
>>>         address chains so you don't need any further communication
>>>         after the initial
>>>         exchange, and it need not complicate the wallet.
>>>
>>>         Thanks,
>>>         --Jeremy
>>>
>>>
>>>
>>>         ------------------------------------------------------------------------------
>>>         This SF.net email is sponsored by Windows:
>>>
>>>         Build for Windows Store.
>>>
>>>         http://p.sf.net/sfu/windows-dev2dev
>>>         _______________________________________________
>>>         Bitcoin-development mailing list
>>>         Bitcoin-development at lists.sourceforge.net
>>>         <mailto:Bitcoin-development at lists.sourceforge.net>
>>>         https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>>
>>>
>>>
>>>
>>>     ------------------------------------------------------------------------------
>>>     This SF.net email is sponsored by Windows:
>>>
>>>     Build for Windows Store.
>>>
>>>     http://p.sf.net/sfu/windows-dev2dev
>>>
>>>
>>>     _______________________________________________
>>>     Bitcoin-development mailing list
>>>     Bitcoin-development at lists.sourceforge.net <mailto:Bitcoin-development at lists.sourceforge.net>
>>>     https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>
>
>
>     ------------------------------------------------------------------------------
>     Get 100% visibility into Java/.NET code with AppDynamics Lite!
>     It's a free troubleshooting tool designed for production.
>     Get down to code-level detail for bottlenecks, with <2% overhead.
>     Download for free and get started troubleshooting in minutes.
>     http://pubads.g.doubleclick.net/gampad/clk?id=48897031&iu=/4140/ostg.clktrk
>     _______________________________________________
>     Bitcoin-development mailing list
>     Bitcoin-development at lists.sourceforge.net
>     <mailto:Bitcoin-development at lists.sourceforge.net>
>     https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130809/4f37a4b7/attachment.html>

From runesvend at gmail.com  Sat Aug 10 20:30:46 2013
From: runesvend at gmail.com (=?ISO-8859-1?Q?Rune_Kj=E6r_Svendsen?=)
Date: Sat, 10 Aug 2013 22:30:46 +0200
Subject: [Bitcoin-development] HTTP REST API for bitcoind
In-Reply-To: <51EEDB57.4070108@monetize.io>
References: <CAJHLa0Ou1xF=LeLVu_wH1-XgJ1PavDV7_NHoDevo3R9+4z-ZfQ@mail.gmail.com>
	<201307231030.14139.andyparkins@gmail.com>
	<20130723094703.GA25900@savin>
	<ksllu7$9i$1@ger.gmane.org> <51EEDB57.4070108@monetize.io>
Message-ID: <CAH2=CKz2epe2rJFPDN5FdqNK8X58CCMaHLVHPgK23tNmq6cRwg@mail.gmail.com>

I think this is a useful feature, but I din't see why it should be a part
of bitcoind. I've created a simple HTTP REST wrapper around bitcoind's RPC
interface in Python:
https://github.com/runeksvendsen/btchttp/blob/master/btchttp.py

It simply runs a HTTP server that translates HTTP GET requests into the
relevant RPC request, and responds to the GET request with the relevant
data.

/Rune

On Tue, Jul 23, 2013 at 9:36 PM, Mark Friedenbach <mark at monetize.io> wrote:

>
> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA1
>
>
> On 7/23/13 3:29 AM, Andreas Schildbach wrote:
> >
> > Yes, I understand that. For this reason, I would vote for adding the
> > usual HTTP authentication/SSL stuff to the REST API. That way, SPV users
> > can decide to run their own instance of the API (providing the needed
> > resources themselves).
> >
> > Or, a trusted party can set up a server. For example, I would be willing
> > to set it up for users of Bitcoin Wallet. I don't expect shitloads of
> > paper wallets sweeps for the forseeable future.
> >
> >
> Anyone who wants HTTP authentication or TLS can wrap it with nginx, or
> something similar. In the process they could put appropriate
> restrictions in place on incoming requests, and the onus would be on
> them, not us to keep it secure.
>
> Mark
> -----BEGIN PGP SIGNATURE-----
> Version: GnuPG/MacGPG2 v2.0.19 (Darwin)
> Comment: GPGTools - http://gpgtools.org
> Comment: Using GnuPG with Thunderbird - http://www.enigmail.net/
>
> iQIcBAEBAgAGBQJR7ttWAAoJEAdzVfsmodw4UmIP/36lK2TDc7mLTT8rbflJhl3v
> TL4CFKhXj6OuzG7tyino3Djs4EQnyk+CbpfOmJ8kYr29GPaZttuDJhYXtJqQBQCi
> DPq79ktudHnVMLPirEs7dUrLo+TAqhYX+8Sj+eTlW+p6YZg3JbkOAIPJG7597OK4
> zzU8Oxr0XKJFfGscKfkPThxJboNqzJYGl3otHUMXM4HsbIRYmrx4QSr8y7dsVgTd
> YZnD4bJO+eY4ZPzCcFdkPD/8bXQyKC5nPOH8/79lARNLESwB4OW79uf9q86EuH2O
> jZQ1qwpRNHblrNWS1/U2E4+7hEidvgZBwQhj+HbWgKiPWh4Df1lEXq6bLQQwdn6/
> b+jfiwg7xpb7eB2M4gPZ0uF/1TIcGJN3+LWEULFNTT/vsjyD/UU63ahZ1kVv7X0m
> W1NrbKjXxDbip+x3N7HLIu3zqAAaa0ele7OysyFCL6ZlwwafwJiEZZgHn2Iw7I1L
> S7lYBbFoLfXlOMVXNaKHPEV5gQEveMROJVBtnWkqShPQM0N/+Z+TXZes37up0GVo
> d7ptPfNbUNDTFc8Jj3+5rIyy3dUvSyMJlHZhsLmtCUnbQ867ZOgeUS52a8XQ+nJY
> 8IsShLfLk6fRWmHrwo9lzZQ/TbbUNyoUje0Ns6iL7G3IZwDqJH3kAGb/bkj/piDu
> tPNcN8bkYeNobTFIH+o4
> =jV80
> -----END PGP SIGNATURE-----
>
>
>
> ------------------------------------------------------------------------------
> See everything from the browser to the database with AppDynamics
> Get end-to-end visibility with application monitoring from AppDynamics
> Isolate bottlenecks and diagnose root cause in seconds.
> Start your free trial of AppDynamics Pro today!
> http://pubads.g.doubleclick.net/gampad/clk?id=48808831&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130810/38b4ec87/attachment.html>

From mike at plan99.net  Sun Aug 11 16:28:13 2013
From: mike at plan99.net (Mike Hearn)
Date: Sun, 11 Aug 2013 18:28:13 +0200
Subject: [Bitcoin-development] Android key rotation
Message-ID: <5207BB9D.3090701@plan99.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512

Hello,

I hope you are having a pleasant weekend. A few days ago we learned
that the Android implementation of the Java SecureRandom class
contains multiple severe vulnerabilities. As a result all private keys
generated on Android phones/tablets are weak and some signatures have
been observed to have colliding R values, allowing the private key to
be solved and money to be stolen.

The public security alert is here:

http://bitcoin.org/en/alert/2013-08-11-android

I will shortly post in the bitcointalk forums as well.

An update for the Bitcoin Wallet app has been prepared that bypasses
the system SecureRandom implementation and reads directly from
/dev/urandom instead, which is believed to be functioning correctly.
All unspent outputs in the wallet are then respent to this new key.

The process is automatic and does not involve user intervention.
Andreas can control the process via a percentage throttle, which we
will use to slow things down if the memory pool load gets too high.

A fixed APK is available here:

https://code.google.com/p/bitcoin-wallet/downloads/detail?name=bitcoin-wallet-3.15-beta.apk&can=2&q=

Andreas plans to release this to beta either today or tomorrow. Once
some reasonable population of users has completed testing the
automated re-keying process, it will be released via the Play Store.
All users will get a notification informing them of the new version
and some will be upgraded automatically.

Other wallet maintainers have also been notified and are working on
similar updates.

thanks
- -mike
-----BEGIN PGP SIGNATURE-----
Version: GnuPG/MacGPG2 v2.0.20 (Darwin)
Comment: GPGTools - http://gpgtools.org
Comment: Using GnuPG with Thunderbird - http://www.enigmail.net/

iQEcBAEBCgAGBQJSB7udAAoJEPLkhhyZiIFvv7QIAJQf5AqpNdo0hWSubvcXu6H9
QoYJllZRb3KhjDEaFU5xinvrN3co6mqRqctbhP2JplrwebEczd8GN4jJZyn90oES
7oydQsnYGyO1+W64dnMjOXSCsvIerAv1TuYDIeRmVFlWzXEAbEK3QTB7G/qciF5x
YNh5M94HYFTCTzDwc3oCHJQUzbl/X/BwPS8TITmEZ3gfYDi+hoyUmHlZukjtFZf+
/ukDqzWPswscUseuXlUqfu7EMbV0cFO2niCwuTsmkvxkjsz35bPD1LxMYmm1qEjw
FeKINcws74okK7pnAqsHYIiP0d64zOwfQFJqfFyek18f0LSqYf32h3h1F8GbmJU=
=bZtl
-----END PGP SIGNATURE-----



From andreas at rooteleven.com  Sun Aug 11 18:21:28 2013
From: andreas at rooteleven.com (Andreas M. Antonopoulos)
Date: Sun, 11 Aug 2013 11:21:28 -0700
Subject: [Bitcoin-development] Android key rotation
In-Reply-To: <5207BB9D.3090701@plan99.net>
References: <5207BB9D.3090701@plan99.net>
Message-ID: <CAFmyj8yTCFQVBisW3sfCF_yGYhLBccXV8GX8hxseB5KAxAo71w@mail.gmail.com>

Who would be the best person to interview who could explain this issue and
workaround/resolution?

I'd like to get an audio segment for the Let's Talk Bitcoin show ASAP, as
this will be a big concern for many users who will not know what to do or
be able to understand the problem.

Any volunteers for a 15 min audio interview in the next 2 days?


On Sun, Aug 11, 2013 at 9:28 AM, Mike Hearn <mike at plan99.net> wrote:

> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA512
>
> Hello,
>
> I hope you are having a pleasant weekend. A few days ago we learned
> that the Android implementation of the Java SecureRandom class
> contains multiple severe vulnerabilities. As a result all private keys
> generated on Android phones/tablets are weak and some signatures have
> been observed to have colliding R values, allowing the private key to
> be solved and money to be stolen.
>
> The public security alert is here:
>
> http://bitcoin.org/en/alert/2013-08-11-android
>
> I will shortly post in the bitcointalk forums as well.
>
> An update for the Bitcoin Wallet app has been prepared that bypasses
> the system SecureRandom implementation and reads directly from
> /dev/urandom instead, which is believed to be functioning correctly.
> All unspent outputs in the wallet are then respent to this new key.
>
> The process is automatic and does not involve user intervention.
> Andreas can control the process via a percentage throttle, which we
> will use to slow things down if the memory pool load gets too high.
>
> A fixed APK is available here:
>
>
> https://code.google.com/p/bitcoin-wallet/downloads/detail?name=bitcoin-wallet-3.15-beta.apk&can=2&q=
>
> Andreas plans to release this to beta either today or tomorrow. Once
> some reasonable population of users has completed testing the
> automated re-keying process, it will be released via the Play Store.
> All users will get a notification informing them of the new version
> and some will be upgraded automatically.
>
> Other wallet maintainers have also been notified and are working on
> similar updates.
>
> thanks
> - -mike
> -----BEGIN PGP SIGNATURE-----
> Version: GnuPG/MacGPG2 v2.0.20 (Darwin)
> Comment: GPGTools - http://gpgtools.org
> Comment: Using GnuPG with Thunderbird - http://www.enigmail.net/
>
> iQEcBAEBCgAGBQJSB7udAAoJEPLkhhyZiIFvv7QIAJQf5AqpNdo0hWSubvcXu6H9
> QoYJllZRb3KhjDEaFU5xinvrN3co6mqRqctbhP2JplrwebEczd8GN4jJZyn90oES
> 7oydQsnYGyO1+W64dnMjOXSCsvIerAv1TuYDIeRmVFlWzXEAbEK3QTB7G/qciF5x
> YNh5M94HYFTCTzDwc3oCHJQUzbl/X/BwPS8TITmEZ3gfYDi+hoyUmHlZukjtFZf+
> /ukDqzWPswscUseuXlUqfu7EMbV0cFO2niCwuTsmkvxkjsz35bPD1LxMYmm1qEjw
> FeKINcws74okK7pnAqsHYIiP0d64zOwfQFJqfFyek18f0LSqYf32h3h1F8GbmJU=
> =bZtl
> -----END PGP SIGNATURE-----
>
>
> ------------------------------------------------------------------------------
> Get 100% visibility into Java/.NET code with AppDynamics Lite!
> It's a free troubleshooting tool designed for production.
> Get down to code-level detail for bottlenecks, with <2% overhead.
> Download for free and get started troubleshooting in minutes.
> http://pubads.g.doubleclick.net/gampad/clk?id=48897031&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130811/8166d4c1/attachment.html>

From chris.double at double.co.nz  Tue Aug 13 05:26:50 2013
From: chris.double at double.co.nz (Chris Double)
Date: Tue, 13 Aug 2013 17:26:50 +1200
Subject: [Bitcoin-development] SPV client in pure JavaScript?
In-Reply-To: <CANEZrP1XYyO0aspJ-A-0+_pRDKrtaHZrNTjfOnxBGX8Beiw2Xw@mail.gmail.com>
References: <B4D8D241-E758-4806-8B12-C9A78BF1470B@grabhive.com>
	<CANEZrP2c6nsf2z5_hKDfHdO1HEJ+Y+aoiSdfYPMxK_jzrvLEow@mail.gmail.com>
	<54F09675-D6A7-4415-82F1-920248E8188D@grabhive.com>
	<CANEZrP24P_m_eWbcs3PJNomG4kFDPUyGE2uQjod9qPmpBS+1mg@mail.gmail.com>
	<CANEZrP1XYyO0aspJ-A-0+_pRDKrtaHZrNTjfOnxBGX8Beiw2Xw@mail.gmail.com>
Message-ID: <CALn1vHF60qN53ZMk6GZd91xFtcYWBSBY_vNP=qNrqLDj3YvomA@mail.gmail.com>

On Sat, Aug 10, 2013 at 12:14 AM, Mike Hearn <mike at plan99.net> wrote:
> Oh, I forgot to make it clear - Chrome apps/extensions can make raw TCP
> socket connections:
>
>    http://blog.chromium.org/2012/11/introducing-tcp-listen-new-api-for.html

There's a Raw Sockets proposal at the W3C that provides TCP sockets:

<http://www.w3.org/2012/sysapps/raw-sockets/>

Firefox OS has an API that is being discussed as part of that:

<https://developer.mozilla.org/en-US/docs/WebAPI/TCP_Socket>

So there's a possibility of a standardized approach in the future.

Chris.
-- 
http://www.bluishcoder.co.nz



From drwho at virtadpt.net  Tue Aug 13 20:15:26 2013
From: drwho at virtadpt.net (The Doctor)
Date: Tue, 13 Aug 2013 16:15:26 -0400
Subject: [Bitcoin-development] BitMail.sf.net - encrypted p2p email
In-Reply-To: <CAEvNM8=zeunvnGBNgjAgs-e9oiTONy1mYOLgA=5DEHK8VUizxw@mail.gmail.com>
References: <CAEvNM8=zeunvnGBNgjAgs-e9oiTONy1mYOLgA=5DEHK8VUizxw@mail.gmail.com>
Message-ID: <520A93DE.8080409@virtadpt.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On 08/09/2013 03:01 PM, Randolph D. wrote:
> anyone tested the secure encrypted p2p email:
> http://bitmail.sf.net

Not lately.  It's pretty CPU and network intensive, which may or may
not be detrimental to your use case.

I keep meaning to read through these security analyses of Bitmessage
but I'm a little short on compute cycles at the moment:

https://bitmessage.org/forum/index.php?topic=1666.0

http://www.reddit.com/r/bitmessage/comments/1fwyx7/a_security_analysis_of_bitmessage/

- -- 
The Doctor [412/724/301/703] [ZS]
Developer, Project Byzantium: http://project-byzantium.org/

PGP: 0x807B17C1 / 7960 1CDC 85C9 0B63 8D9F  DD89 3BD8 FF2B 807B 17C1
WWW: https://drwho.virtadpt.net/

If at first you don't succeed, call for an airstrike.

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2.0.20 (GNU/Linux)
Comment: Using GnuPG with Thunderbird - http://www.enigmail.net/

iEYEARECAAYFAlIKk94ACgkQO9j/K4B7F8FMsgCgkuM56fI4hVT9H1ueZSFwl9Kk
qRoAoJkKZf4afKgVQKtDO6zRd/Auc/RV
=zwmX
-----END PGP SIGNATURE-----



From rdohm321 at gmail.com  Tue Aug 13 20:46:38 2013
From: rdohm321 at gmail.com (Randolph D.)
Date: Tue, 13 Aug 2013 22:46:38 +0200
Subject: [Bitcoin-development] BitMail.sf.net - encrypted p2p email
In-Reply-To: <520A93DE.8080409@virtadpt.net>
References: <CAEvNM8=zeunvnGBNgjAgs-e9oiTONy1mYOLgA=5DEHK8VUizxw@mail.gmail.com>
	<520A93DE.8080409@virtadpt.net>
Message-ID: <CAEvNM8mY=0+rgC0psoNkVVC0ktwCnwARA9GNe8D7FibCBUHt1g@mail.gmail.com>

you mixed up BitMail with BitMessage, this is different:
http://bitmail.sf.net

2013/8/13 The Doctor <drwho at virtadpt.net>

> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA1
>
> On 08/09/2013 03:01 PM, Randolph D. wrote:
> > anyone tested the secure encrypted p2p email:
> > http://bitmail.sf.net
>
> Not lately.  It's pretty CPU and network intensive, which may or may
> not be detrimental to your use case.
>
> I keep meaning to read through these security analyses of Bitmessage
> but I'm a little short on compute cycles at the moment:
>
> https://bitmessage.org/forum/index.php?topic=1666.0
>
>
> http://www.reddit.com/r/bitmessage/comments/1fwyx7/a_security_analysis_of_bitmessage/
>
> - --
> The Doctor [412/724/301/703] [ZS]
> Developer, Project Byzantium: http://project-byzantium.org/
>
> PGP: 0x807B17C1 / 7960 1CDC 85C9 0B63 8D9F  DD89 3BD8 FF2B 807B 17C1
> WWW: https://drwho.virtadpt.net/
>
> If at first you don't succeed, call for an airstrike.
>
> -----BEGIN PGP SIGNATURE-----
> Version: GnuPG v2.0.20 (GNU/Linux)
> Comment: Using GnuPG with Thunderbird - http://www.enigmail.net/
>
> iEYEARECAAYFAlIKk94ACgkQO9j/K4B7F8FMsgCgkuM56fI4hVT9H1ueZSFwl9Kk
> qRoAoJkKZf4afKgVQKtDO6zRd/Auc/RV
> =zwmX
> -----END PGP SIGNATURE-----
>
>
> ------------------------------------------------------------------------------
> Get 100% visibility into Java/.NET code with AppDynamics Lite!
> It's a free troubleshooting tool designed for production.
> Get down to code-level detail for bottlenecks, with <2% overhead.
> Download for free and get started troubleshooting in minutes.
> http://pubads.g.doubleclick.net/gampad/clk?id=48897031&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130813/f0ef3f38/attachment.html>

From jouke at bitonic.nl  Wed Aug 14 10:56:56 2013
From: jouke at bitonic.nl (Jouke Hofman)
Date: Wed, 14 Aug 2013 12:56:56 +0200
Subject: [Bitcoin-development] Payment Protocol: BIP 70, 71, 72
In-Reply-To: <CABsx9T0o2BN+UyZt-TYcEXX_U0ztP3Rq3+arr_2C1MPEtU_dUg@mail.gmail.com>
References: <CABsx9T0Ly67ZNJhoRQk0L9Q0-ucq3e=24b5Tg6GRKspRKKtP-g@mail.gmail.com>
	<CAPg+sBhb3WOYnWRc020QbGwE0W4XeWWmXXTqYyAqrtB7h0+b8A@mail.gmail.com>
	<CABsx9T0o2BN+UyZt-TYcEXX_U0ztP3Rq3+arr_2C1MPEtU_dUg@mail.gmail.com>
Message-ID: <520B6278.9050909@bitonic.nl>

On 08/07/2013 11:10 PM, Gavin Andresen wrote:
> I'd also like to hear from merchants: any issue with your payment
> processing server having "broadcast transaction" functionality?
> 

On the contrary, we would prefer to broadcast the transaction ourselves.




From mike at plan99.net  Wed Aug 14 12:26:27 2013
From: mike at plan99.net (Mike Hearn)
Date: Wed, 14 Aug 2013 14:26:27 +0200
Subject: [Bitcoin-development] bitcoinj 0.10
Message-ID: <CANEZrP25861JnOX-5zzZhRJJWAgUKoJsskGyUfw6XTKqE8qfdg@mail.gmail.com>

Hello,

I'm pleased to announce version 0.10 of bitcoinj, a Java library for
writing Bitcoin applications. BitcoinJ has been used to create everything
from end-user wallet apps to network crawlers to SatoshiDice.

To learn how to obtain bitcoinj 0.10, please see the following page:

   https://code.google.com/p/bitcoinj/wiki/UsingMaven

The v0.10 release is signed by Andreas Schildbach's GPG key. The git hash
of the release is 777e6781d789. This paragraph is signed by the same
Bitcoin key as with previous releases (check their release announcements to
establish continuity).

Signature: H9Nl7FPnmrUOmjhUZ0+xB4YW3q5F5gIkGdvllsDWmWYvOkNQHAE9jZE0I/qE1VfLPeMV+Rzo7geTB43uDSFSMek=

*New in this release*

   - An implementation of *micropayment channels* was added. There have
   been many bugfixes and improvements since the first announcement. This
   feature allows you to set up a 1:1 payment relationship with a remote
   server and after a short setup process send very tiny payments, very
   rapidly. It's suitable for metered billing applications. An article,
   "Working with micropayments" explains how to use it. This work was a joint
   effort between Matt and myself.
   - A simple sublibrary has been added that provides async IO based
   client/server classes that transmit length prefixed protocol buffers.
   - Thanks to Matija Mazi, some classes have been added that implement *the
   BIP 32 deterministic wallet algorithm*. Note that these classes are not
   yet used elsewhere in the system and full deterministic wallet support is
   therefore not available, however, a low level API is available for
   experimentation. That API is very likely to change in future releases so
   don't get too attached to it.
   - Thanks to Gary Rowe, we have integrated *a new Maven plugin* that
   checks the SHA1 hashes of downloaded dependencies against a hard-coded
   list. This means that even if an upstream Maven repository or developer
   were to be compromised, library dependencies could not be switched out for
   corrupted versions without someone noticing. For 0.10 the dependency hashes
   were just initialised based on what was already downloaded. In future,
   reproducible builds of upstream dependencies and auditing of changes would
   provide better security. You can and should use Gary's
plugin<https://github.com/gary-rowe/BitcoinjEnforcerRules> in
   your own projects to defend against a possible compromise of the bitcoinj
   repository.
   - *Callback handling* has been much improved. Each event listener can
   have an Executor specified which takes responsibility for running the
   callback. If you don't specify one they run by default on a single
   background thread, the "user thread", instead of the origin framework
   threads. This means your callbacks no longer need to be thread safe as
   they're always run serially. You can also change the default executor if
   you would like to control the thread on which callbacks run, for example to
   marshal them into your GUI toolkit thread automatically. This fixes some of
   the most painful parts of the pre-0.10 API, for instance that transaction
   confidence listeners were not allowed to re-enter the library.
   - *Exception handling* has also improved. You can assign a global
   Thread.UncaughtExceptionHandler which receives any exceptions thrown on
   the user thread (i.e. by your own event listeners), as well as any internal
   exceptions thrown by network threads (like inability to parse a message
   sent by a remote peer). Because your listeners now run on a separate thread
   by default, you can no longer accidentally cause internal data corruption
   or prevent other callbacks from running by leaking exceptions out of your
   callbacks; a subtle knife-edge in the previous API.
   - Support for *automatic wallet key rotation* has been added.
   - We now require Bloom-capable (0.8+) peers by default and will
   disconnect from older nodes. This avoids accidental bandwidth saturation on
   mobile devices.
   - The wallet now accepts timelocked transactions if it created them
   itself.
   - The wallet can be told to empty itself out, in which case the fee will
   be subtracted from the total amount instead of added. This simplifies the
   common case of wanting to send your entire balance whilst still including a
   fee.
   - Some JNI peers for event listeners were added. Auto-generated JNI
   bindings are experimental and not yet merged in to the mainline codebase:
   for now they are available as part of a separate project on github. This
   work allows you to access the bitcoinj API using relatively natural looking
   C++ code and an embedded JVM.
   - You can now register custom PeerFilterProvider implementors to add
   things to Bloom filters that aren't necessarily in wallets.
   - We have begun adding nullity annotations to the API. Combined with a
   strong static analysis engine like FindBugs or the IntelliJ Inspector, you
   can find cases where you aren't handling possible null pointers. Note that
   you should configure your static analysis system to understand the Guava
   Preconditions assertions, as otherwise you will get false positives.
   - You can now control how much information Wallet toString() dumps
   contain more precisely. Extensions can contribute to a wallets debug dump
   as well, and transaction data is now optional.
   - Documentation: The getting started tutorial and PingService example
   were rewritten. New articles were added that cover optimising chain sync
   and using the library from non-Java languages. Existing articles were also
   extended and refreshed.
   - Many bug fixes and new methods. You should upgrade as soon as possible
   to get the bug fixes, in particular, one that could cause transactions
   inside the same block to be incorrectly re-ordered when using Bloom
   filtering (which can affect the wallet). The library code now has more
   internal annotations to help static analysis engines, and several bugs were
   fixed as a result of that.

*API Changes*

   - The ScriptBuilder class now takes TransactionSignature objects, these
   wrap a raw ECDSA signature and the SIGHASH flags together, with utility
   methods to work with them.
   - The Locks class has been renamed to Threading. The thread on which
   callbacks run has been changed, see above.
   - The WalletEventListener.onKeyAdded method became onKeysAdded and now
   takes a list, to make processing of bulk adds more efficient.
   - BitcoinURIParseException is now checked so you can't forget to handle
   bogus URIs.
   - The Wallet.toString(..) method has additional parameters now so you
   can control what is included in the dump.

*Known issues*
*
*
Please see the limitations and missing
features<https://code.google.com/p/bitcoinj/wiki/Limitations> page.
This page has been fleshed out since the last release with common issues
and missing features. A few issues were also fixed and removed.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130814/a60a2551/attachment.html>

From drwho at virtadpt.net  Wed Aug 14 17:02:47 2013
From: drwho at virtadpt.net (The Doctor)
Date: Wed, 14 Aug 2013 13:02:47 -0400
Subject: [Bitcoin-development] BitMail.sf.net - encrypted p2p email
In-Reply-To: <CAEvNM8mY=0+rgC0psoNkVVC0ktwCnwARA9GNe8D7FibCBUHt1g@mail.gmail.com>
References: <CAEvNM8=zeunvnGBNgjAgs-e9oiTONy1mYOLgA=5DEHK8VUizxw@mail.gmail.com>
	<520A93DE.8080409@virtadpt.net>
	<CAEvNM8mY=0+rgC0psoNkVVC0ktwCnwARA9GNe8D7FibCBUHt1g@mail.gmail.com>
Message-ID: <520BB837.9000303@virtadpt.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On 08/13/2013 04:46 PM, Randolph D. wrote:
> you mixed up BitMail with BitMessage, this is different: 
> http://bitmail.sf.net

Oops!  My bad.

- -- 
The Doctor [412/724/301/703] [ZS]
Developer, Project Byzantium: http://project-byzantium.org/

PGP: 0x807B17C1 / 7960 1CDC 85C9 0B63 8D9F  DD89 3BD8 FF2B 807B 17C1
WWW: https://drwho.virtadpt.net/

"This time we're using four times the Kevlar."

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2.0.20 (GNU/Linux)
Comment: Using GnuPG with Thunderbird - http://www.enigmail.net/

iEYEARECAAYFAlILuDcACgkQO9j/K4B7F8HDBQCfR0F9SmCBCuFN1cAg/FExzicj
wfMAn0Fob9raimlp0/JQLi9y9hOyIwpG
=0vIZ
-----END PGP SIGNATURE-----



From gavinandresen at gmail.com  Thu Aug 15 00:29:40 2013
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Thu, 15 Aug 2013 10:29:40 +1000
Subject: [Bitcoin-development] Version 0.9 goals
Message-ID: <CABsx9T3DM72+8HgNWWZ2HaAgZMQGAPn87L9VVKdkbVkS7sd8Tg@mail.gmail.com>

It feels to me like we're close to a 0.9 "feature freeze" / start of
release cycle; I'd like to talk a little bit about what we'd like to see in
the final 0.9 release.

My list:

Bug:  I'd really like to see the leveldb corruption issue (mostly on OSX,
it seems) fixed. This is hard because it can't be reliably reproduced, and,
at least on my machine, takes weeks to occur. Help needed to reproduce/fix,
see https://github.com/bitcoin/bitcoin/issues/2770 for what we know about
the problem.

Payment Protocol support is ready to be pulled (
https://github.com/bitcoin/bitcoin/pull/2539) . Unless there are major
objections, I will pull it tomorrow (it has already gone through two rounds
of bounty-driven QA testing, so I'm convinced it is ready).

I'd love for 0.9 to contain sipa's "headers first" initial block download
optimization; I think it is a big enough improvement to justify making the
0.9 test/release cycle longer.

Coin control (https://github.com/bitcoin/bitcoin/pull/2343).

The autotools work (https://github.com/bitcoin/bitcoin/pull/2805).

Gitian-build with the latest openssl and Qt5. Perhaps update the version of
Debian VMs that we gitian-build with.

I plan on spending about half my time on code review and helping get pull
requests tested, and the other half of my time working on code that
probably won't make it into the 0.9 release.

-- 
--
Gavin Andresen
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130815/52144447/attachment.html>

From mike at plan99.net  Thu Aug 15 08:09:48 2013
From: mike at plan99.net (Mike Hearn)
Date: Thu, 15 Aug 2013 10:09:48 +0200
Subject: [Bitcoin-development] Version 0.9 goals
In-Reply-To: <CABsx9T3DM72+8HgNWWZ2HaAgZMQGAPn87L9VVKdkbVkS7sd8Tg@mail.gmail.com>
References: <CABsx9T3DM72+8HgNWWZ2HaAgZMQGAPn87L9VVKdkbVkS7sd8Tg@mail.gmail.com>
Message-ID: <CANEZrP3bt40ThBcqWLfzuS5508mpbo4Z5qxh9AJs-FRrk0QJsA@mail.gmail.com>

Sounds awesome!

Pieter told me at lunch that headers first cut sync time to 45 minutes for
him, which is another amazing improvement from the master of optimisations.

Pieter, Matt and I also agreed that for maximum impact we should really try
to ship payment protocol support in at least two clients simultaneously and
ideally with a big merchant signed up too - to send a powerful message that
we really mean it. Someone volunteered last week to do it for bitcoinj and
if he doesn't pull through, I have some old code from EOY 2012 that I could
update to the latest spec and ship at least some basic support. I'd hope
that we can get Bitcoin Wallet or MultiBit updates out once bcj has support
pretty fast.

Also, Jeff said that BitPay want to be a leader in support for the
protocol. So let's try and co-ordinate release dates so we can make a bit
of a splash and grab the ecosystems attention.

On Thu, Aug 15, 2013 at 2:29 AM, Gavin Andresen <gavinandresen at gmail.com>wrote:

> I plan on spending about half my time on code review and helping get pull
> requests tested, and the other half of my time working on code that
> probably won't make it into the 0.9 release.
>

Sounds brilliant. It'll be nice to see the pull request queue drain. Any
ideas what the non-0.9 code will be? Fee rework? DoS work?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130815/d11d8931/attachment.html>

From pieter.wuille at gmail.com  Thu Aug 15 08:37:42 2013
From: pieter.wuille at gmail.com (Pieter Wuille)
Date: Thu, 15 Aug 2013 10:37:42 +0200
Subject: [Bitcoin-development] Version 0.9 goals
In-Reply-To: <CANEZrP3bt40ThBcqWLfzuS5508mpbo4Z5qxh9AJs-FRrk0QJsA@mail.gmail.com>
References: <CABsx9T3DM72+8HgNWWZ2HaAgZMQGAPn87L9VVKdkbVkS7sd8Tg@mail.gmail.com>
	<CANEZrP3bt40ThBcqWLfzuS5508mpbo4Z5qxh9AJs-FRrk0QJsA@mail.gmail.com>
Message-ID: <20130815083741.GA12713@vps7135.xlshosting.net>

On Thu, Aug 15, 2013 at 10:09:48AM +0200, Mike Hearn wrote:
> Sounds awesome!
> 
> Pieter told me at lunch that headers first cut sync time to 45 minutes for
> him, which is another amazing improvement from the master of optimisations.

Just to make sure nobody expects a magic bullet: this was on a hexacore Xeon
CPU, with several GB of -dbcache, libsecp256k1 for verification, and a very good
network connection. It is repeatable and from random network peers, though. The
code is here:

  https://github.com/sipa/bitcoin/commits/headersfirst

It's usable and seems to be stable (including reindexing, which needs support for
block files with out-of-order blocks now), but I still want to clean some
things up before pullreq'in. There are probably some heuristic tweaks
possible as well - Gregory found that performance is reduced for the first
part of the chain on high-latency networks.

> Pieter, Matt and I also agreed that for maximum impact we should really try
> to ship payment protocol support in at least two clients simultaneously and
> ideally with a big merchant signed up too - to send a powerful message that
> we really mean it. Someone volunteered last week to do it for bitcoinj and
> if he doesn't pull through, I have some old code from EOY 2012 that I could
> update to the latest spec and ship at least some basic support. I'd hope
> that we can get Bitcoin Wallet or MultiBit updates out once bcj has support
> pretty fast.
> 
> Also, Jeff said that BitPay want to be a leader in support for the
> protocol. So let's try and co-ordinate release dates so we can make a bit
> of a splash and grab the ecosystems attention.

I believe we do need some wider support than just Bitcoin-Qt, indeed, as
the number of people actually using the reference client as a wallet is
quite low now. Ideally, several clients and merchants start support for it
in a short timeframe...

-- 
Pieter



From mike at plan99.net  Thu Aug 15 09:02:02 2013
From: mike at plan99.net (Mike Hearn)
Date: Thu, 15 Aug 2013 11:02:02 +0200
Subject: [Bitcoin-development] Version 0.9 goals
In-Reply-To: <CAJna-HhS=iNcTcTzEm_GDtjzxbSTDJ0KvEjLvpnR_HngRYjHeA@mail.gmail.com>
References: <CABsx9T3DM72+8HgNWWZ2HaAgZMQGAPn87L9VVKdkbVkS7sd8Tg@mail.gmail.com>
	<CANEZrP3bt40ThBcqWLfzuS5508mpbo4Z5qxh9AJs-FRrk0QJsA@mail.gmail.com>
	<CAJna-HhS=iNcTcTzEm_GDtjzxbSTDJ0KvEjLvpnR_HngRYjHeA@mail.gmail.com>
Message-ID: <CANEZrP3-SV0=PB5rkXbAEKv1CFqfS4hjuBTY3YbU-yNGKde8tg@mail.gmail.com>

On Thu, Aug 15, 2013 at 10:22 AM, slush <slush at centrum.cz> wrote:

> We're planning to support payment protocol in Trezor as well, if it
> counts. I think it's a missing piece in absolute security of hardware
> wallets.
>

Yup, that's always been the plan :-)

Any idea how much work it is, and would it be a v1 feature of the Trezor or
added later via firmware update?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130815/ae7ab1b7/attachment.html>

From slush at centrum.cz  Thu Aug 15 08:22:19 2013
From: slush at centrum.cz (slush)
Date: Thu, 15 Aug 2013 10:22:19 +0200
Subject: [Bitcoin-development] Version 0.9 goals
In-Reply-To: <CANEZrP3bt40ThBcqWLfzuS5508mpbo4Z5qxh9AJs-FRrk0QJsA@mail.gmail.com>
References: <CABsx9T3DM72+8HgNWWZ2HaAgZMQGAPn87L9VVKdkbVkS7sd8Tg@mail.gmail.com>
	<CANEZrP3bt40ThBcqWLfzuS5508mpbo4Z5qxh9AJs-FRrk0QJsA@mail.gmail.com>
Message-ID: <CAJna-HhS=iNcTcTzEm_GDtjzxbSTDJ0KvEjLvpnR_HngRYjHeA@mail.gmail.com>

> Pieter, Matt and I also agreed that for maximum impact we should really
> try to ship payment protocol support in at least two clients simultaneously
> and ideally with a big merchant signed up too - to send a powerful message
> that we really mean it. Someone volunteered last week to do it for bitcoinj
> and if he doesn't pull through, I have some old code from EOY 2012 that I
> could update to the latest spec and ship at least some basic support. I'd
> hope that we can get Bitcoin Wallet or MultiBit updates out once bcj has
> support pretty fast.
>

We're planning to support payment protocol in Trezor as well, if it counts.
I think it's a missing piece in absolute security of hardware wallets.

slush
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130815/d6d18f98/attachment.html>

From melvincarvalho at gmail.com  Thu Aug 15 10:12:17 2013
From: melvincarvalho at gmail.com (Melvin Carvalho)
Date: Thu, 15 Aug 2013 12:12:17 +0200
Subject: [Bitcoin-development] Version 0.9 goals
In-Reply-To: <CABsx9T3DM72+8HgNWWZ2HaAgZMQGAPn87L9VVKdkbVkS7sd8Tg@mail.gmail.com>
References: <CABsx9T3DM72+8HgNWWZ2HaAgZMQGAPn87L9VVKdkbVkS7sd8Tg@mail.gmail.com>
Message-ID: <CAKaEYhJy9_xij0GcTqUjVQ8gwdvnoRk4DGmGKC0ybDV_acFvug@mail.gmail.com>

On 15 August 2013 02:29, Gavin Andresen <gavinandresen at gmail.com> wrote:

> It feels to me like we're close to a 0.9 "feature freeze" / start of
> release cycle; I'd like to talk a little bit about what we'd like to see in
> the final 0.9 release.
>
> My list:
>
> Bug:  I'd really like to see the leveldb corruption issue (mostly on OSX,
> it seems) fixed. This is hard because it can't be reliably reproduced, and,
> at least on my machine, takes weeks to occur. Help needed to reproduce/fix,
> see https://github.com/bitcoin/bitcoin/issues/2770 for what we know about
> the problem.
>
> Payment Protocol support is ready to be pulled (
> https://github.com/bitcoin/bitcoin/pull/2539) . Unless there are major
> objections, I will pull it tomorrow (it has already gone through two rounds
> of bounty-driven QA testing, so I'm convinced it is ready).
>
> I'd love for 0.9 to contain sipa's "headers first" initial block download
> optimization; I think it is a big enough improvement to justify making the
> 0.9 test/release cycle longer.
>
> Coin control (https://github.com/bitcoin/bitcoin/pull/2343).
>
> The autotools work (https://github.com/bitcoin/bitcoin/pull/2805).
>
> Gitian-build with the latest openssl and Qt5. Perhaps update the version
> of Debian VMs that we gitian-build with.
>
> I plan on spending about half my time on code review and helping get pull
> requests tested, and the other half of my time working on code that
> probably won't make it into the 0.9 release.
>

+1

Sounds great!


>
> --
> --
> Gavin Andresen
>
>
> ------------------------------------------------------------------------------
> Get 100% visibility into Java/.NET code with AppDynamics Lite!
> It's a free troubleshooting tool designed for production.
> Get down to code-level detail for bottlenecks, with <2% overhead.
> Download for free and get started troubleshooting in minutes.
> http://pubads.g.doubleclick.net/gampad/clk?id=48897031&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130815/930f652a/attachment.html>

From laanwj at gmail.com  Thu Aug 15 10:49:13 2013
From: laanwj at gmail.com (Wladimir)
Date: Thu, 15 Aug 2013 12:49:13 +0200
Subject: [Bitcoin-development] Version 0.9 goals
In-Reply-To: <CABsx9T3DM72+8HgNWWZ2HaAgZMQGAPn87L9VVKdkbVkS7sd8Tg@mail.gmail.com>
References: <CABsx9T3DM72+8HgNWWZ2HaAgZMQGAPn87L9VVKdkbVkS7sd8Tg@mail.gmail.com>
Message-ID: <CA+s+GJDr-KhPdnNEuFAE325OUEa42ukJ_9yXcS8sJ+Y_w9LWyw@mail.gmail.com>

On Thu, Aug 15, 2013 at 2:29 AM, Gavin Andresen <gavinandresen at gmail.com>wrote:

> It feels to me like we're close to a 0.9 "feature freeze" / start of
> release cycle; I'd like to talk a little bit about what we'd like to see in
> the final 0.9 release.
>
> Payment Protocol support is ready to be pulled (
> https://github.com/bitcoin/bitcoin/pull/2539) . Unless there are major
> objections, I will pull it tomorrow (it has already gone through two rounds
> of bounty-driven QA testing, so I'm convinced it is ready).
>

No objections from me, I've already looked at the code a few times and did
some testing here and there, looks good for merging.


> I'd love for 0.9 to contain sipa's "headers first" initial block download
> optimization; I think it is a big enough improvement to justify making the
> 0.9 test/release cycle longer.
>

Yep, that'd be great.


> Coin control (https://github.com/bitcoin/bitcoin/pull/2343).
>
> The autotools work (https://github.com/bitcoin/bitcoin/pull/2805).
>
> Gitian-build with the latest openssl and Qt5. Perhaps update the version
> of Debian VMs that we gitian-build with.
>

Fully agreed about payment protocol, autotools and Qt5 build.

I'm still not very excited about coin control (and last time I looked at
the code, it has an issue that it introduced statefulness into the wallet
model - a bane for concurrency. But that may be resolved?) . Anyway, many
people seem to want that so it's fine with me, given that the issues are
fixed.

Wladimir
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130815/d6265043/attachment.html>

From pieter.wuille at gmail.com  Thu Aug 15 10:56:25 2013
From: pieter.wuille at gmail.com (Pieter Wuille)
Date: Thu, 15 Aug 2013 12:56:25 +0200
Subject: [Bitcoin-development] Version 0.9 goals
In-Reply-To: <CA+s+GJDr-KhPdnNEuFAE325OUEa42ukJ_9yXcS8sJ+Y_w9LWyw@mail.gmail.com>
References: <CABsx9T3DM72+8HgNWWZ2HaAgZMQGAPn87L9VVKdkbVkS7sd8Tg@mail.gmail.com>
	<CA+s+GJDr-KhPdnNEuFAE325OUEa42ukJ_9yXcS8sJ+Y_w9LWyw@mail.gmail.com>
Message-ID: <CAPg+sBjTP5++MTAKZCqsuF_pnKz1QOo__dzZRtJ0_aBr9xuT6g@mail.gmail.com>

On Thu, Aug 15, 2013 at 12:49 PM, Wladimir <laanwj at gmail.com> wrote:
> Fully agreed about payment protocol, autotools and Qt5 build.
>
> I'm still not very excited about coin control (and last time I looked at the
> code, it has an issue that it introduced statefulness into the wallet model
> - a bane for concurrency. But that may be resolved?) . Anyway, many people
> seem to want that so it's fine with me, given that the issues are fixed.

As far as I can see, that state is gone, and is now passed in a
separate object to the transaction-creation methods.

I'd like to see it go in, as I believe it can be helpful in
understanding the difference between the high-level abstraction
(wallet) and the underlying implementation (individual coins) -
something that many people are confused about. I think that's even a
more important advantage than the ability for micro-management it
offers. Multiwallet would be more appropriate for avoiding linkage
between identities, but it seems there's little progress on that front
now.

-- 
Pieter



From mike at plan99.net  Thu Aug 15 15:22:23 2013
From: mike at plan99.net (Mike Hearn)
Date: Thu, 15 Aug 2013 17:22:23 +0200
Subject: [Bitcoin-development] Version 0.9 goals
In-Reply-To: <CAJna-HiSUHSAREzGLxi0nUctmt4OoaAKC7txEruQG_AgwGa_Qw@mail.gmail.com>
References: <CABsx9T3DM72+8HgNWWZ2HaAgZMQGAPn87L9VVKdkbVkS7sd8Tg@mail.gmail.com>
	<CANEZrP3bt40ThBcqWLfzuS5508mpbo4Z5qxh9AJs-FRrk0QJsA@mail.gmail.com>
	<CAJna-HhS=iNcTcTzEm_GDtjzxbSTDJ0KvEjLvpnR_HngRYjHeA@mail.gmail.com>
	<CANEZrP3-SV0=PB5rkXbAEKv1CFqfS4hjuBTY3YbU-yNGKde8tg@mail.gmail.com>
	<CAJna-HiSUHSAREzGLxi0nUctmt4OoaAKC7txEruQG_AgwGa_Qw@mail.gmail.com>
Message-ID: <CANEZrP2+8a4-tp39Cfoi2TvbfGAka3BgAWMdprfmG8rDc6deiw@mail.gmail.com>

> Our plan is to add support for that into v1 firmware, but it also depends
> on readiness of surrounding infrastructure; mainly if there'll be support
> for payment protocol in multibit in the time of v1 release (I suppose that
> the Multibit will be the first wallet  compatible with Trezor AND
> supporting payment protocol).
>

Yeah, OK. Let's see how much progress Gary makes. Supporting HD wallets is
the trickiest part and I don't know how much time I will have - the Android
RNG issue and getting bcj 0.10 released have sucked up a lot of my time
lately and I need to refocus on other things for a bit. But between the guy
who volunteered to do payment protocol, and Gary doing TrezorJ, and Matija
already having done the core algorithms, I'm hoping the only parts I'll
have to do are integrating the HD code with the core wallet code. Possibly
if we're running out of time I can do a real basic HD wallet implementation
that only iterates a key once and doesn't generate new keys for each
transaction, as that's really the trickiest part (because of the need for
lookahead/behind and memory bloat on phones).
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130815/bb37e853/attachment.html>

From slush at centrum.cz  Thu Aug 15 14:32:22 2013
From: slush at centrum.cz (slush)
Date: Thu, 15 Aug 2013 16:32:22 +0200
Subject: [Bitcoin-development] Version 0.9 goals
In-Reply-To: <CANEZrP3-SV0=PB5rkXbAEKv1CFqfS4hjuBTY3YbU-yNGKde8tg@mail.gmail.com>
References: <CABsx9T3DM72+8HgNWWZ2HaAgZMQGAPn87L9VVKdkbVkS7sd8Tg@mail.gmail.com>
	<CANEZrP3bt40ThBcqWLfzuS5508mpbo4Z5qxh9AJs-FRrk0QJsA@mail.gmail.com>
	<CAJna-HhS=iNcTcTzEm_GDtjzxbSTDJ0KvEjLvpnR_HngRYjHeA@mail.gmail.com>
	<CANEZrP3-SV0=PB5rkXbAEKv1CFqfS4hjuBTY3YbU-yNGKde8tg@mail.gmail.com>
Message-ID: <CAJna-HiSUHSAREzGLxi0nUctmt4OoaAKC7txEruQG_AgwGa_Qw@mail.gmail.com>

On Thu, Aug 15, 2013 at 11:02 AM, Mike Hearn <mike at plan99.net> wrote:

> On Thu, Aug 15, 2013 at 10:22 AM, slush <slush at centrum.cz> wrote:
>
>> We're planning to support payment protocol in Trezor as well, if it
>> counts. I think it's a missing piece in absolute security of hardware
>> wallets.
>>
>
> Yup, that's always been the plan :-)
>
> Any idea how much work it is, and would it be a v1 feature of the Trezor
> or added later via firmware update?
>

Our plan is to add support for that into v1 firmware, but it also depends
on readiness of surrounding infrastructure; mainly if there'll be support
for payment protocol in multibit in the time of v1 release (I suppose that
the Multibit will be the first wallet  compatible with Trezor AND
supporting payment protocol).

slush
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130815/3faadd9b/attachment.html>

From w at grabhive.com  Thu Aug 15 21:12:59 2013
From: w at grabhive.com (Wendell)
Date: Thu, 15 Aug 2013 23:12:59 +0200
Subject: [Bitcoin-development] Version 0.9 goals
In-Reply-To: <CANEZrP3bt40ThBcqWLfzuS5508mpbo4Z5qxh9AJs-FRrk0QJsA@mail.gmail.com>
References: <CABsx9T3DM72+8HgNWWZ2HaAgZMQGAPn87L9VVKdkbVkS7sd8Tg@mail.gmail.com>
	<CANEZrP3bt40ThBcqWLfzuS5508mpbo4Z5qxh9AJs-FRrk0QJsA@mail.gmail.com>
Message-ID: <71E73F38-0D1D-4446-878C-51229EEA4C59@grabhive.com>

Mike,

If bitcoinj will be ready and you will help us, we are willing to implement it right away in Hive as well. We will also keep BitcoinKit.framework updated with the new bitcoind and bitcoinj implementations.

BitPay taking the lead here would be tremendous. Hopefully cool sites like Bitcoin Store will also be game to hit the ground running. I'll ask them.

-wendell

grabhive.com | twitter.com/grabhive | gpg: 6C0C9411

On Aug 15, 2013, at 10:09 AM, Mike Hearn wrote:

> Pieter, Matt and I also agreed that for maximum impact we should really try to ship payment protocol support in at least two clients simultaneously and ideally with a big merchant signed up too - to send a powerful message that we really mean it. Someone volunteered last week to do it for bitcoinj and if he doesn't pull through, I have some old code from EOY 2012 that I could update to the latest spec and ship at least some basic support. I'd hope that we can get Bitcoin Wallet or MultiBit updates out once bcj has support pretty fast.
> 
> Also, Jeff said that BitPay want to be a leader in support for the protocol. So let's try and co-ordinate release dates so we can make a bit of a splash and grab the ecosystems attention.




From gavinandresen at gmail.com  Fri Aug 16 01:00:38 2013
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Fri, 16 Aug 2013 11:00:38 +1000
Subject: [Bitcoin-development] Gavin's post-0.9 TODO list...
Message-ID: <CABsx9T32q8mKgtmsaZgh7nuhHY5cExeW=FiadzXq3jXVP=NBTw@mail.gmail.com>

Mike asked what non-0.9 code I'm working on; the three things on the top of
my list are:

1) Smarter fee handling on the client side, instead of hard-coded fees. I
was busy today generating scatter-plots and histograms of transaction fees
versus priorities to get some insight into what miner policies look like
right now.

2) "First double-spend" relaying and alerting, to better support low-value
in-person transactions.  Related:
*Have *a *Snack*, Pay with
*Bitcoins*<http://www.tik.ee.ethz.ch/file/848064fa2e80f88a57aef43d7d5956c6/P2P2013_093.pdf>


3) Work on 2-3 whitepapers on why we need to increase or remove the 1MB
block size limit, how we can do it safely, and go through all of the
arguments that have been made against it and explain why they're wrong.

-- 
--
Gavin Andresen
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130816/0e0d57a9/attachment.html>

From gmaxwell at gmail.com  Fri Aug 16 02:26:29 2013
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Thu, 15 Aug 2013 19:26:29 -0700
Subject: [Bitcoin-development] BIP 32.5
Message-ID: <CAAS2fgQFOei6we8nfSr9DuQuHEjXT+G8_XGMk9um14DBgRuPyA@mail.gmail.com>

I am wondering if we shouldn't have a BIP32 addendum which makes the
following signing related recommendations:

(1) Recommend a specific deterministic DSA derandomization procedure
(a deterministic way to generate the DSA nonce), presumably one based
on HMAC-SHA512 (since BIP32 uses that construct) or SHA256 in the
style of RFC 6979.

DSA systems being compromised due to poor randomness at runtime is not
new. It effected other systems before it effected Bitcoin systems,
it's not a new problem and it's not going away.  It's difficult to
tell if an implementation is correct or not.

Use of a fully deterministic signature  would allow for complete test
vectors in signing and complete confidence that there is no random
number related weakness in a signing implementation.

In particular, with relevance to our ecosystem a maliciously modified
difficult to audit hardware wallet could be leaking its keys material
via its signatures. Even without producing insecure K values it could
use the choice of K to leak a couple bits of an encrypted root key
with every signature, and allow the malicious party to recover the
keys by simply observing the network. Making the signatures
deterministic would make this kind of misbehavior practically
discoverable.

We wouldn't be alone in making this change, in general industry is
moving in this direction because it has become clear that DSA is a
hazard otherwise.

The primary arguments in most spaces against derandomizing DSA are
FIPS conformance (irrelevant for us) and reasonable concerns about the
risks of using a (less) reviewed cryptographic construct. With
widespread motion towards derandomized DSA this latter concern is less
of an issue.

Libcrypt has also implemented derandomized DSA in git. The ed25519
signature system of DJB, et. al. also uses a similar derandomization.

An alternative is implementing a still random construct where K is
some H(message||key||random) which should remain secure even where the
randomness is poor, but this loses the advantage of being able to
externally verify that an implementation is not leaking information.
OpenSSL development has implemented a form of this recently.

See also: http://tools.ietf.org/rfc/rfc6979.txt

(2) Recommends a procedure for using only even S values in signatures,
eliminating this source of mutability in transactions.

This can be accomplished via post-processing of existing signatures,
but since it requires bignum math it is usually preferable to
implement it along with signing.  I believe someday this will become a
network requirement for Bitcoin, but regardless it makes sense to
implement it as a best practice sooner rather than later.

Thoughts?



From melvincarvalho at gmail.com  Fri Aug 16 04:06:27 2013
From: melvincarvalho at gmail.com (Melvin Carvalho)
Date: Fri, 16 Aug 2013 06:06:27 +0200
Subject: [Bitcoin-development] Gavin's post-0.9 TODO list...
In-Reply-To: <CABsx9T32q8mKgtmsaZgh7nuhHY5cExeW=FiadzXq3jXVP=NBTw@mail.gmail.com>
References: <CABsx9T32q8mKgtmsaZgh7nuhHY5cExeW=FiadzXq3jXVP=NBTw@mail.gmail.com>
Message-ID: <CAKaEYhKuuZcM0YWXgqAOpEkdgzWmrFqpxaO+GYanz75F+UAREw@mail.gmail.com>

On 16 August 2013 03:00, Gavin Andresen <gavinandresen at gmail.com> wrote:

> Mike asked what non-0.9 code I'm working on; the three things on the top
> of my list are:
>
> 1) Smarter fee handling on the client side, instead of hard-coded fees. I
> was busy today generating scatter-plots and histograms of transaction fees
> versus priorities to get some insight into what miner policies look like
> right now.
>

+1


>
> 2) "First double-spend" relaying and alerting, to better support low-value
> in-person transactions.  Related:
> *Have *a *Snack*, Pay with *Bitcoins*<http://www.tik.ee.ethz.ch/file/848064fa2e80f88a57aef43d7d5956c6/P2P2013_093.pdf>
>
>

+1


>
> 3) Work on 2-3 whitepapers on why we need to increase or remove the 1MB
> block size limit, how we can do it safely, and go through all of the
> arguments that have been made against it and explain why they're wrong.
>

What block size do you think is ideal?


>
> --
> --
> Gavin Andresen
>
>
>
> ------------------------------------------------------------------------------
> Get 100% visibility into Java/.NET code with AppDynamics Lite!
> It's a free troubleshooting tool designed for production.
> Get down to code-level detail for bottlenecks, with <2% overhead.
> Download for free and get started troubleshooting in minutes.
> http://pubads.g.doubleclick.net/gampad/clk?id=48897031&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130816/2b19dc93/attachment.html>

From luke at dashjr.org  Fri Aug 16 09:39:16 2013
From: luke at dashjr.org (Luke-Jr)
Date: Fri, 16 Aug 2013 09:39:16 +0000
Subject: [Bitcoin-development] LevelDB in master
Message-ID: <201308160939.29864.luke@dashjr.org>

Now-merged pull request #2702 appears to have put the master branch on an 
unofficial Ripple fork of LevelDB, rather than merely updating us to LevelDB 
1.12.0. While Vinnie did somewhat disclose this, I don't see any evidence the 
nature of this was fully understood by others. As I understood the pull 
request, the "Ripple and Bitcoin fork" was just LevelDB with the changes we 
had already made. Mike's comments on the pull request (his audit) suggest that 
this may have been the case in an earlier revision of it. But in fact, there 
appear to be a number of other changes included in what was finally merged a 
few weeks ago. Furthermore, Ripple's fork did not do a proper git merge of 
upstream, thus there is a break in git history, and, more importantly, a 
number of upstream fixes (including some we have had reported to the Bitcoin 
issue tracker) were not included in this merge.

I've pushed three branches to https://github.com/luke-jr/leveldb :
  bitcoin-1.5   Our old/unreleased LevelDB 1.5 fork, for reference
  bitcoin       Our LevelDB 1.7 fork, included in 0.8.x
  bitcoin-up    Our LevelDB 1.7 fork, merged with upstream LevelDB 1.12

A diff from current master (Ripple LevelDB 1.12 fork) to bitcoin-up:
  https://gist.github.com/luke-jr/6248543

Thoughts?

Luke
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 1530 bytes
Desc: This is a digitally signed message part.
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130816/e18f1703/attachment.sig>

From pete at petertodd.org  Fri Aug 16 09:52:43 2013
From: pete at petertodd.org (Peter Todd)
Date: Fri, 16 Aug 2013 05:52:43 -0400
Subject: [Bitcoin-development] LevelDB in master
In-Reply-To: <201308160939.29864.luke@dashjr.org>
References: <201308160939.29864.luke@dashjr.org>
Message-ID: <20130816095243.GA11181@savin>

On Fri, Aug 16, 2013 at 09:39:16AM +0000, Luke-Jr wrote:
> Now-merged pull request #2702 appears to have put the master branch on an 
> unofficial Ripple fork of LevelDB, rather than merely updating us to LevelDB 
> 1.12.0. While Vinnie did somewhat disclose this, I don't see any evidence the 
> nature of this was fully understood by others. As I understood the pull 
> request, the "Ripple and Bitcoin fork" was just LevelDB with the changes we 
> had already made. Mike's comments on the pull request (his audit) suggest that 
> this may have been the case in an earlier revision of it. But in fact, there 
> appear to be a number of other changes included in what was finally merged a 
> few weeks ago. Furthermore, Ripple's fork did not do a proper git merge of 
> upstream, thus there is a break in git history, and, more importantly, a 
> number of upstream fixes (including some we have had reported to the Bitcoin 
> issue tracker) were not included in this merge.
> 
> I've pushed three branches to https://github.com/luke-jr/leveldb :
>   bitcoin-1.5   Our old/unreleased LevelDB 1.5 fork, for reference
>   bitcoin       Our LevelDB 1.7 fork, included in 0.8.x
>   bitcoin-up    Our LevelDB 1.7 fork, merged with upstream LevelDB 1.12
> 
> A diff from current master (Ripple LevelDB 1.12 fork) to bitcoin-up:
>   https://gist.github.com/luke-jr/6248543
> 
> Thoughts?

I ran into this problem while auditing Litecoin actually: the tools to
audit that a set of git patches/merges actually match upstream (or
downstream for litecoin) don't really exist yet. In this case manually
checking that individual files matched would have probably worked, but
it'd be good to automate the process.

I can't say I've looked into any of this in detail, but you're right to
bring up the issue.

-- 
'peter'[:-1]@petertodd.org
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 490 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130816/346cbd2d/attachment.sig>

From mike at plan99.net  Fri Aug 16 11:32:39 2013
From: mike at plan99.net (Mike Hearn)
Date: Fri, 16 Aug 2013 13:32:39 +0200
Subject: [Bitcoin-development] BIP 32.5
In-Reply-To: <CAAS2fgQFOei6we8nfSr9DuQuHEjXT+G8_XGMk9um14DBgRuPyA@mail.gmail.com>
References: <CAAS2fgQFOei6we8nfSr9DuQuHEjXT+G8_XGMk9um14DBgRuPyA@mail.gmail.com>
Message-ID: <CANEZrP0Kr+jJA5r1uPELPR_7a5CmwewFuLb0Xr-sno4KxVK1cA@mail.gmail.com>

I filed a bug in the bitcoinj tracker for this a few days ago referencing
rfc 6967, but that RFC is very complicated and I'm not sure it's really
necessary to go that far. H(sighash||key) is easy to implement and I feel I
understand it better.

In our case it wouldn't have helped anyway - if anything it would just
delayed discovery of the underlying weakness. The same RNG is typically
used to generate both keys and signatures today. However in future it may
be the case that people put more effort into generating a really random key
because they only have to do it once, and then the signing RNG would be
different.

Your concern about hardware devices leaking private key bits via a side
channel is also well made, although I think you have to find some way to
establish trust in these devices anyway as sniffing all their IO traffic
and analysing it is really hard (plus it inverts the threat model - if you
trust your computer and not your hardware wallet, why do you have a
hardware wallet?)

The other advantage is that deterministic keys and signatures together mean
two instances of the same wallet generate identical transactions given an
identical sequence of commands. This could help keep wallets in sync. For
example we had a few users who got confused because they had cloned their
Android wallets across devices (NOT SUPPORTED!) and then one device updated
first, did key rotation, and then the other device showed a transaction
that sent all their money to a new address it knew nothing about. If they
didn't realise the other device had updated this looked identical to theft!

I don't think fractional BIP numbers are the way to go :) but a new BIP
that standardised a way to select K would, if reviewed, be something I'd
implement.


On Fri, Aug 16, 2013 at 4:26 AM, Gregory Maxwell <gmaxwell at gmail.com> wrote:

> I am wondering if we shouldn't have a BIP32 addendum which makes the
> following signing related recommendations:
>
> (1) Recommend a specific deterministic DSA derandomization procedure
> (a deterministic way to generate the DSA nonce), presumably one based
> on HMAC-SHA512 (since BIP32 uses that construct) or SHA256 in the
> style of RFC 6979.
>
> DSA systems being compromised due to poor randomness at runtime is not
> new. It effected other systems before it effected Bitcoin systems,
> it's not a new problem and it's not going away.  It's difficult to
> tell if an implementation is correct or not.
>
> Use of a fully deterministic signature  would allow for complete test
> vectors in signing and complete confidence that there is no random
> number related weakness in a signing implementation.
>
> In particular, with relevance to our ecosystem a maliciously modified
> difficult to audit hardware wallet could be leaking its keys material
> via its signatures. Even without producing insecure K values it could
> use the choice of K to leak a couple bits of an encrypted root key
> with every signature, and allow the malicious party to recover the
> keys by simply observing the network. Making the signatures
> deterministic would make this kind of misbehavior practically
> discoverable.
>
> We wouldn't be alone in making this change, in general industry is
> moving in this direction because it has become clear that DSA is a
> hazard otherwise.
>
> The primary arguments in most spaces against derandomizing DSA are
> FIPS conformance (irrelevant for us) and reasonable concerns about the
> risks of using a (less) reviewed cryptographic construct. With
> widespread motion towards derandomized DSA this latter concern is less
> of an issue.
>
> Libcrypt has also implemented derandomized DSA in git. The ed25519
> signature system of DJB, et. al. also uses a similar derandomization.
>
> An alternative is implementing a still random construct where K is
> some H(message||key||random) which should remain secure even where the
> randomness is poor, but this loses the advantage of being able to
> externally verify that an implementation is not leaking information.
> OpenSSL development has implemented a form of this recently.
>
> See also: http://tools.ietf.org/rfc/rfc6979.txt
>
> (2) Recommends a procedure for using only even S values in signatures,
> eliminating this source of mutability in transactions.
>
> This can be accomplished via post-processing of existing signatures,
> but since it requires bignum math it is usually preferable to
> implement it along with signing.  I believe someday this will become a
> network requirement for Bitcoin, but regardless it makes sense to
> implement it as a best practice sooner rather than later.
>
> Thoughts?
>
>
> ------------------------------------------------------------------------------
> Get 100% visibility into Java/.NET code with AppDynamics Lite!
> It's a free troubleshooting tool designed for production.
> Get down to code-level detail for bottlenecks, with <2% overhead.
> Download for free and get started troubleshooting in minutes.
> http://pubads.g.doubleclick.net/gampad/clk?id=48897031&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130816/2fc1bc5d/attachment.html>

From mike at plan99.net  Fri Aug 16 12:11:31 2013
From: mike at plan99.net (Mike Hearn)
Date: Fri, 16 Aug 2013 14:11:31 +0200
Subject: [Bitcoin-development] Gavin's post-0.9 TODO list...
In-Reply-To: <CABsx9T32q8mKgtmsaZgh7nuhHY5cExeW=FiadzXq3jXVP=NBTw@mail.gmail.com>
References: <CABsx9T32q8mKgtmsaZgh7nuhHY5cExeW=FiadzXq3jXVP=NBTw@mail.gmail.com>
Message-ID: <CANEZrP0PEcP339MKRyrHXHCCsP3BxRHT-ZfKRQ7G2Ou+15CD7A@mail.gmail.com>

Cool. Maybe it's time for another development update on the foundation blog?


On Fri, Aug 16, 2013 at 3:00 AM, Gavin Andresen <gavinandresen at gmail.com>wrote:

> Mike asked what non-0.9 code I'm working on; the three things on the top
> of my list are:
>
> 1) Smarter fee handling on the client side, instead of hard-coded fees. I
> was busy today generating scatter-plots and histograms of transaction fees
> versus priorities to get some insight into what miner policies look like
> right now.
>
> 2) "First double-spend" relaying and alerting, to better support low-value
> in-person transactions.  Related:
> *Have *a *Snack*, Pay with *Bitcoins*<http://www.tik.ee.ethz.ch/file/848064fa2e80f88a57aef43d7d5956c6/P2P2013_093.pdf>
>
>
> 3) Work on 2-3 whitepapers on why we need to increase or remove the 1MB
> block size limit, how we can do it safely, and go through all of the
> arguments that have been made against it and explain why they're wrong.
>
> --
> --
> Gavin Andresen
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130816/54c13a4f/attachment.html>

From mike at plan99.net  Fri Aug 16 12:24:04 2013
From: mike at plan99.net (Mike Hearn)
Date: Fri, 16 Aug 2013 14:24:04 +0200
Subject: [Bitcoin-development] Gavin's post-0.9 TODO list...
In-Reply-To: <CANEZrP0PEcP339MKRyrHXHCCsP3BxRHT-ZfKRQ7G2Ou+15CD7A@mail.gmail.com>
References: <CABsx9T32q8mKgtmsaZgh7nuhHY5cExeW=FiadzXq3jXVP=NBTw@mail.gmail.com>
	<CANEZrP0PEcP339MKRyrHXHCCsP3BxRHT-ZfKRQ7G2Ou+15CD7A@mail.gmail.com>
Message-ID: <CANEZrP3LAR0erjgmTHruLwPNDdx-OVyb9KK52E6UnmE4ZuBrvQ@mail.gmail.com>

The only other thing I'd like to see there is the start of a new anti-DoS
framework. I think once the outline is in place other people will be able
to fill it in appropriately. But the current framework has to be left
behind.

If I had to choose one thing to evict to make time for that, it'd be the
whitepapers. At the moment we still have plenty of headroom in block sizes,
even post April. It can probably be safely delayed for a while.


On Fri, Aug 16, 2013 at 2:11 PM, Mike Hearn <mike at plan99.net> wrote:

> Cool. Maybe it's time for another development update on the foundation
> blog?
>
>
> On Fri, Aug 16, 2013 at 3:00 AM, Gavin Andresen <gavinandresen at gmail.com>wrote:
>
>> Mike asked what non-0.9 code I'm working on; the three things on the top
>> of my list are:
>>
>> 1) Smarter fee handling on the client side, instead of hard-coded fees. I
>> was busy today generating scatter-plots and histograms of transaction fees
>> versus priorities to get some insight into what miner policies look like
>> right now.
>>
>> 2) "First double-spend" relaying and alerting, to better support
>> low-value in-person transactions.  Related:
>> *Have *a *Snack*, Pay with *Bitcoins*<http://www.tik.ee.ethz.ch/file/848064fa2e80f88a57aef43d7d5956c6/P2P2013_093.pdf>
>>
>>
>> 3) Work on 2-3 whitepapers on why we need to increase or remove the 1MB
>> block size limit, how we can do it safely, and go through all of the
>> arguments that have been made against it and explain why they're wrong.
>>
>> --
>> --
>> Gavin Andresen
>>
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130816/7799bb62/attachment.html>

From pete at petertodd.org  Fri Aug 16 13:29:11 2013
From: pete at petertodd.org (Peter Todd)
Date: Fri, 16 Aug 2013 09:29:11 -0400
Subject: [Bitcoin-development] BIP 32.5
In-Reply-To: <CANEZrP0Kr+jJA5r1uPELPR_7a5CmwewFuLb0Xr-sno4KxVK1cA@mail.gmail.com>
References: <CAAS2fgQFOei6we8nfSr9DuQuHEjXT+G8_XGMk9um14DBgRuPyA@mail.gmail.com>
	<CANEZrP0Kr+jJA5r1uPELPR_7a5CmwewFuLb0Xr-sno4KxVK1cA@mail.gmail.com>
Message-ID: <20130816132911.GA16201@petertodd.org>

On Fri, Aug 16, 2013 at 01:32:39PM +0200, Mike Hearn wrote:
> and analysing it is really hard (plus it inverts the threat model - if you
> trust your computer and not your hardware wallet, why do you have a
> hardware wallet?)

Myself I would trust neither the hardware wallet nor my computer...

So looks like the first version of the TREZOR won't support multisig -
how far away are we from support? What about other manufacturers?

P2SH support is probably going to be a major sticking point. The payment
protocol is all well and good, but it doesn't (yet) help getting money
to the individual. bitcoinj P2SH support for sending would be a major
help here - lots of person-to-person trades happen via Android wallets.

-- 
'peter'[:-1]@petertodd.org
000000000000000b9656276a0fdab028ca759c3fd7f951fb20196c264b5cd1ce
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 198 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130816/4545a0a4/attachment.sig>

From wtogami at gmail.com  Fri Aug 16 13:41:54 2013
From: wtogami at gmail.com (Warren Togami Jr.)
Date: Fri, 16 Aug 2013 03:41:54 -1000
Subject: [Bitcoin-development] Gavin's post-0.9 TODO list...
In-Reply-To: <CANEZrP3LAR0erjgmTHruLwPNDdx-OVyb9KK52E6UnmE4ZuBrvQ@mail.gmail.com>
References: <CABsx9T32q8mKgtmsaZgh7nuhHY5cExeW=FiadzXq3jXVP=NBTw@mail.gmail.com>
	<CANEZrP0PEcP339MKRyrHXHCCsP3BxRHT-ZfKRQ7G2Ou+15CD7A@mail.gmail.com>
	<CANEZrP3LAR0erjgmTHruLwPNDdx-OVyb9KK52E6UnmE4ZuBrvQ@mail.gmail.com>
Message-ID: <CAEz79PqpQ0NG3WHHo7gqoZJVWqAQ4GwUaqSD_7LzWSvSQCHHig@mail.gmail.com>

https://togami.com/~warren/archive/2013/example-bitcoind-dos-mitigation-via-iptables.txt
*Anti-DoS Low Hanging Fruit: source IP or subnet connection limits*
If you disallow the same IP and/or subnet from establishing too many TCP
connections with your node, it becomes more expensive for attackers to use
a single host exhaust a target node's resources.  This iptables firewall
based example has almost zero drawbacks, but it is too complicated for most
people to deploy.  Yes, there is a small chance that you will block
legitimate connections, but there are plenty of other nodes for random
connections to choose from.  Configurable per source IP and source subnet
limits with sane defaults enforced by bitcoind itself would be a big
improvement over the current situation where one host address can consume
limited resources of many target nodes.

This doesn't remove the risk of a network-wide connection exhaustion attack
by a determined attacker, but it at least makes multiple types of attacks a
lot more expensive.  This also doesn't do much against the io
vulnerability, which would require major redesigns to prevent in Bitcoin.

https://github.com/litecoin-project/litecoin/commit/db4d8e21d99551bef4c807aa1534a074e4b7964d
*Want to safely delay the block size limit increase for another year or two?
*  This patch alone enables that.



On Fri, Aug 16, 2013 at 2:24 AM, Mike Hearn <mike at plan99.net> wrote:

> The only other thing I'd like to see there is the start of a new anti-DoS
> framework. I think once the outline is in place other people will be able
> to fill it in appropriately. But the current framework has to be left
> behind.
>
> If I had to choose one thing to evict to make time for that, it'd be the
> whitepapers. At the moment we still have plenty of headroom in block sizes,
> even post April. It can probably be safely delayed for a while.
>
>
> On Fri, Aug 16, 2013 at 2:11 PM, Mike Hearn <mike at plan99.net> wrote:
>
>> Cool. Maybe it's time for another development update on the foundation
>> blog?
>>
>>
>> On Fri, Aug 16, 2013 at 3:00 AM, Gavin Andresen <gavinandresen at gmail.com>wrote:
>>
>>> Mike asked what non-0.9 code I'm working on; the three things on the top
>>> of my list are:
>>>
>>> 1) Smarter fee handling on the client side, instead of hard-coded fees.
>>> I was busy today generating scatter-plots and histograms of transaction
>>> fees versus priorities to get some insight into what miner policies look
>>> like right now.
>>>
>>> 2) "First double-spend" relaying and alerting, to better support
>>> low-value in-person transactions.  Related:
>>> *Have *a *Snack*, Pay with *Bitcoins*<http://www.tik.ee.ethz.ch/file/848064fa2e80f88a57aef43d7d5956c6/P2P2013_093.pdf>
>>>
>>>
>>> 3) Work on 2-3 whitepapers on why we need to increase or remove the 1MB
>>> block size limit, how we can do it safely, and go through all of the
>>> arguments that have been made against it and explain why they're wrong.
>>>
>>> --
>>> --
>>> Gavin Andresen
>>>
>>>
>>
>
>
> ------------------------------------------------------------------------------
> Get 100% visibility into Java/.NET code with AppDynamics Lite!
> It's a free troubleshooting tool designed for production.
> Get down to code-level detail for bottlenecks, with <2% overhead.
> Download for free and get started troubleshooting in minutes.
> http://pubads.g.doubleclick.net/gampad/clk?id=48897031&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130816/c9fbdf46/attachment.html>

From mike at plan99.net  Fri Aug 16 13:46:12 2013
From: mike at plan99.net (Mike Hearn)
Date: Fri, 16 Aug 2013 15:46:12 +0200
Subject: [Bitcoin-development] Gavin's post-0.9 TODO list...
In-Reply-To: <CAEz79PqpQ0NG3WHHo7gqoZJVWqAQ4GwUaqSD_7LzWSvSQCHHig@mail.gmail.com>
References: <CABsx9T32q8mKgtmsaZgh7nuhHY5cExeW=FiadzXq3jXVP=NBTw@mail.gmail.com>
	<CANEZrP0PEcP339MKRyrHXHCCsP3BxRHT-ZfKRQ7G2Ou+15CD7A@mail.gmail.com>
	<CANEZrP3LAR0erjgmTHruLwPNDdx-OVyb9KK52E6UnmE4ZuBrvQ@mail.gmail.com>
	<CAEz79PqpQ0NG3WHHo7gqoZJVWqAQ4GwUaqSD_7LzWSvSQCHHig@mail.gmail.com>
Message-ID: <CANEZrP2cdQ4vyO5N42FO=Y6c_bt6yTes9p5UTs+cD66YiNC08Q@mail.gmail.com>

A ban-subnet RPC would be a reasonable addition, but obviously DoS
attackers that are IP or bandwidth constrained are really just script
kiddies. Also anything that involves every node operator doing manual
intervention rather works against decentralisation and having a big
network. That's why I keep pushing for automated heuristic driven
prioritisation.


On Fri, Aug 16, 2013 at 3:41 PM, Warren Togami Jr. <wtogami at gmail.com>wrote:

>
> https://togami.com/~warren/archive/2013/example-bitcoind-dos-mitigation-via-iptables.txt
> *Anti-DoS Low Hanging Fruit: source IP or subnet connection limits*
> If you disallow the same IP and/or subnet from establishing too many TCP
> connections with your node, it becomes more expensive for attackers to use
> a single host exhaust a target node's resources.  This iptables firewall
> based example has almost zero drawbacks, but it is too complicated for most
> people to deploy.  Yes, there is a small chance that you will block
> legitimate connections, but there are plenty of other nodes for random
> connections to choose from.  Configurable per source IP and source subnet
> limits with sane defaults enforced by bitcoind itself would be a big
> improvement over the current situation where one host address can consume
> limited resources of many target nodes.
>
> This doesn't remove the risk of a network-wide connection exhaustion
> attack by a determined attacker, but it at least makes multiple types of
> attacks a lot more expensive.  This also doesn't do much against the io
> vulnerability, which would require major redesigns to prevent in Bitcoin.
>
>
> https://github.com/litecoin-project/litecoin/commit/db4d8e21d99551bef4c807aa1534a074e4b7964d
> *Want to safely delay the block size limit increase for another year or
> two?*  This patch alone enables that.
>
>
>
> On Fri, Aug 16, 2013 at 2:24 AM, Mike Hearn <mike at plan99.net> wrote:
>
>> The only other thing I'd like to see there is the start of a new anti-DoS
>> framework. I think once the outline is in place other people will be able
>> to fill it in appropriately. But the current framework has to be left
>> behind.
>>
>> If I had to choose one thing to evict to make time for that, it'd be the
>> whitepapers. At the moment we still have plenty of headroom in block sizes,
>> even post April. It can probably be safely delayed for a while.
>>
>>
>> On Fri, Aug 16, 2013 at 2:11 PM, Mike Hearn <mike at plan99.net> wrote:
>>
>>> Cool. Maybe it's time for another development update on the foundation
>>> blog?
>>>
>>>
>>> On Fri, Aug 16, 2013 at 3:00 AM, Gavin Andresen <gavinandresen at gmail.com
>>> > wrote:
>>>
>>>> Mike asked what non-0.9 code I'm working on; the three things on the
>>>> top of my list are:
>>>>
>>>> 1) Smarter fee handling on the client side, instead of hard-coded fees.
>>>> I was busy today generating scatter-plots and histograms of transaction
>>>> fees versus priorities to get some insight into what miner policies look
>>>> like right now.
>>>>
>>>> 2) "First double-spend" relaying and alerting, to better support
>>>> low-value in-person transactions.  Related:
>>>> *Have *a *Snack*, Pay with *Bitcoins*<http://www.tik.ee.ethz.ch/file/848064fa2e80f88a57aef43d7d5956c6/P2P2013_093.pdf>
>>>>
>>>>
>>>> 3) Work on 2-3 whitepapers on why we need to increase or remove the 1MB
>>>> block size limit, how we can do it safely, and go through all of the
>>>> arguments that have been made against it and explain why they're wrong.
>>>>
>>>> --
>>>> --
>>>> Gavin Andresen
>>>>
>>>>
>>>
>>
>>
>> ------------------------------------------------------------------------------
>> Get 100% visibility into Java/.NET code with AppDynamics Lite!
>> It's a free troubleshooting tool designed for production.
>> Get down to code-level detail for bottlenecks, with <2% overhead.
>> Download for free and get started troubleshooting in minutes.
>>
>> http://pubads.g.doubleclick.net/gampad/clk?id=48897031&iu=/4140/ostg.clktrk
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>
>>
>
>
> ------------------------------------------------------------------------------
> Get 100% visibility into Java/.NET code with AppDynamics Lite!
> It's a free troubleshooting tool designed for production.
> Get down to code-level detail for bottlenecks, with <2% overhead.
> Download for free and get started troubleshooting in minutes.
> http://pubads.g.doubleclick.net/gampad/clk?id=48897031&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130816/b74e58c2/attachment.html>

From wtogami at gmail.com  Fri Aug 16 13:53:28 2013
From: wtogami at gmail.com (Warren Togami Jr.)
Date: Fri, 16 Aug 2013 03:53:28 -1000
Subject: [Bitcoin-development] Gavin's post-0.9 TODO list...
In-Reply-To: <CANEZrP2cdQ4vyO5N42FO=Y6c_bt6yTes9p5UTs+cD66YiNC08Q@mail.gmail.com>
References: <CABsx9T32q8mKgtmsaZgh7nuhHY5cExeW=FiadzXq3jXVP=NBTw@mail.gmail.com>
	<CANEZrP0PEcP339MKRyrHXHCCsP3BxRHT-ZfKRQ7G2Ou+15CD7A@mail.gmail.com>
	<CANEZrP3LAR0erjgmTHruLwPNDdx-OVyb9KK52E6UnmE4ZuBrvQ@mail.gmail.com>
	<CAEz79PqpQ0NG3WHHo7gqoZJVWqAQ4GwUaqSD_7LzWSvSQCHHig@mail.gmail.com>
	<CANEZrP2cdQ4vyO5N42FO=Y6c_bt6yTes9p5UTs+cD66YiNC08Q@mail.gmail.com>
Message-ID: <CAEz79Ppx-qt630+jurFBkJ6NwsEAb8gZgziL_zJK0v39jcnbZg@mail.gmail.com>

Automatic heuristic driven prioritization, with sane defaults and some
configurable knobs, is exactly what I suggest.

In the short-term though, any connection limits added to the client by
default would be the simplest and easiest protection measure to audit.  It
would improve things a lot over the current situation where there are no
limits, and it requires no manual intervention from node operators.

Warren







On Fri, Aug 16, 2013 at 3:46 AM, Mike Hearn <mike at plan99.net> wrote:

> A ban-subnet RPC would be a reasonable addition, but obviously DoS
> attackers that are IP or bandwidth constrained are really just script
> kiddies. Also anything that involves every node operator doing manual
> intervention rather works against decentralisation and having a big
> network. That's why I keep pushing for automated heuristic driven
> prioritisation.
>
>
> On Fri, Aug 16, 2013 at 3:41 PM, Warren Togami Jr. <wtogami at gmail.com>wrote:
>
>>
>> https://togami.com/~warren/archive/2013/example-bitcoind-dos-mitigation-via-iptables.txt
>> *Anti-DoS Low Hanging Fruit: source IP or subnet connection limits*
>> If you disallow the same IP and/or subnet from establishing too many TCP
>> connections with your node, it becomes more expensive for attackers to use
>> a single host exhaust a target node's resources.  This iptables firewall
>> based example has almost zero drawbacks, but it is too complicated for most
>> people to deploy.  Yes, there is a small chance that you will block
>> legitimate connections, but there are plenty of other nodes for random
>> connections to choose from.  Configurable per source IP and source subnet
>> limits with sane defaults enforced by bitcoind itself would be a big
>> improvement over the current situation where one host address can consume
>> limited resources of many target nodes.
>>
>> This doesn't remove the risk of a network-wide connection exhaustion
>> attack by a determined attacker, but it at least makes multiple types of
>> attacks a lot more expensive.  This also doesn't do much against the io
>> vulnerability, which would require major redesigns to prevent in Bitcoin.
>>
>>
>> https://github.com/litecoin-project/litecoin/commit/db4d8e21d99551bef4c807aa1534a074e4b7964d
>> *Want to safely delay the block size limit increase for another year or
>> two?*  This patch alone enables that.
>>
>>
>>
>> On Fri, Aug 16, 2013 at 2:24 AM, Mike Hearn <mike at plan99.net> wrote:
>>
>>> The only other thing I'd like to see there is the start of a new
>>> anti-DoS framework. I think once the outline is in place other people will
>>> be able to fill it in appropriately. But the current framework has to be
>>> left behind.
>>>
>>> If I had to choose one thing to evict to make time for that, it'd be the
>>> whitepapers. At the moment we still have plenty of headroom in block sizes,
>>> even post April. It can probably be safely delayed for a while.
>>>
>>>
>>> On Fri, Aug 16, 2013 at 2:11 PM, Mike Hearn <mike at plan99.net> wrote:
>>>
>>>> Cool. Maybe it's time for another development update on the foundation
>>>> blog?
>>>>
>>>>
>>>> On Fri, Aug 16, 2013 at 3:00 AM, Gavin Andresen <
>>>> gavinandresen at gmail.com> wrote:
>>>>
>>>>> Mike asked what non-0.9 code I'm working on; the three things on the
>>>>> top of my list are:
>>>>>
>>>>> 1) Smarter fee handling on the client side, instead of hard-coded
>>>>> fees. I was busy today generating scatter-plots and histograms of
>>>>> transaction fees versus priorities to get some insight into what miner
>>>>> policies look like right now.
>>>>>
>>>>> 2) "First double-spend" relaying and alerting, to better support
>>>>> low-value in-person transactions.  Related:
>>>>> *Have *a *Snack*, Pay with *Bitcoins*<http://www.tik.ee.ethz.ch/file/848064fa2e80f88a57aef43d7d5956c6/P2P2013_093.pdf>
>>>>>
>>>>>
>>>>> 3) Work on 2-3 whitepapers on why we need to increase or remove the
>>>>> 1MB block size limit, how we can do it safely, and go through all of the
>>>>> arguments that have been made against it and explain why they're wrong.
>>>>>
>>>>> --
>>>>> --
>>>>> Gavin Andresen
>>>>>
>>>>>
>>>>
>>>
>>>
>>> ------------------------------------------------------------------------------
>>> Get 100% visibility into Java/.NET code with AppDynamics Lite!
>>> It's a free troubleshooting tool designed for production.
>>> Get down to code-level detail for bottlenecks, with <2% overhead.
>>> Download for free and get started troubleshooting in minutes.
>>>
>>> http://pubads.g.doubleclick.net/gampad/clk?id=48897031&iu=/4140/ostg.clktrk
>>> _______________________________________________
>>> Bitcoin-development mailing list
>>> Bitcoin-development at lists.sourceforge.net
>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>>
>>>
>>
>>
>> ------------------------------------------------------------------------------
>> Get 100% visibility into Java/.NET code with AppDynamics Lite!
>> It's a free troubleshooting tool designed for production.
>> Get down to code-level detail for bottlenecks, with <2% overhead.
>> Download for free and get started troubleshooting in minutes.
>>
>> http://pubads.g.doubleclick.net/gampad/clk?id=48897031&iu=/4140/ostg.clktrk
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130816/7abd0e31/attachment.html>

From pete at petertodd.org  Fri Aug 16 14:01:16 2013
From: pete at petertodd.org (Peter Todd)
Date: Fri, 16 Aug 2013 10:01:16 -0400
Subject: [Bitcoin-development] Gavin's post-0.9 TODO list...
In-Reply-To: <CANEZrP3LAR0erjgmTHruLwPNDdx-OVyb9KK52E6UnmE4ZuBrvQ@mail.gmail.com>
References: <CABsx9T32q8mKgtmsaZgh7nuhHY5cExeW=FiadzXq3jXVP=NBTw@mail.gmail.com>
	<CANEZrP0PEcP339MKRyrHXHCCsP3BxRHT-ZfKRQ7G2Ou+15CD7A@mail.gmail.com>
	<CANEZrP3LAR0erjgmTHruLwPNDdx-OVyb9KK52E6UnmE4ZuBrvQ@mail.gmail.com>
Message-ID: <20130816140116.GB16201@petertodd.org>

On Fri, Aug 16, 2013 at 02:24:04PM +0200, Mike Hearn wrote:
> The only other thing I'd like to see there is the start of a new anti-DoS
> framework. I think once the outline is in place other people will be able
> to fill it in appropriately. But the current framework has to be left
> behind.

Part of anti-DoS should include making it easier for people to
contribute back to the network. Lowest hanging fruit:

1) SPV nodes with spare bandwidth should relay whole blocks to reduce
the load on full-nodes. The SPV security model is based on hashing power
anyway, so there is no major harm in doing so - if you have the
resources to fake blocks, you probably have the resources to sybil the
network anyway.

2) It's probably reasonable for SPV peers with bandwidth to be willing
to do bloom filtering on the behalf of peers that don't have spare
bandwidth. Hence they would set NODE_BLOOM, but not NODE_NETWORK. (or
more likely some more nuanced flags) Again this has to apply to full
blocks only unless we come up with some PoW scheme or similar to
discourage DoS attacks via invalid transactions. (maintaining partial
UTXO sets is another possibility, although a complex one)

Both examples work best with payment protocols where the recipient is
responsible for getting the transaction broadcast. Similarly you can by
default not connect to full-node peers, and then connect to them on
demand when you have a transaction to send.

Doing this also makes it more difficult to sybil the network - for
instance right now you can create "SPV honeypots" that allow incoming
connections only from SPV nodes, thus attracting a disproportionate % of
the total SPV population given a relatively small number of nodes. You
can then use that to harm SPV nodes by, for instance, making a % of
transactions be dropped deterministicly, either by the bloom matching
code, or when sent. Users unlucky enough to be surrounded by sybil nodes
will have their transactions mysteriously fail to arrive in their
wallets, or have their transactions mysteriously never confirm. Given
how few full nodes there are, it probably won't take very many honeypots
to pull off this attack, especially if you combine it with a
simultaneous max connections or bloom io attack to degrade the capacity
of honest nodes.

Deanonymization is another attack that can be done at the same time of
course.

In any case, the more peers on the network that can relay data the
better.

3) Make it easier to run a full node. IMO partial mode is the way to go
here. Note that from a legal perspective we really want to make sure
that running full nodes (and mining p2pool or solo) continue to be
something ordinary users do. We do not want to give the impression to
regulators that running a full node is in any way unusual or rare, and
thus something that might be practical or desirable to regulate. Users
should be given clear options about how much disk space and bandwidth to
donate to the health of the network, and within those limits nodes
should always try to make progress towards being full nodes, and in the
meantime being increasingly productive partial nodes.

Even with pure SPV nodes if they are relaying block data and ideally
transactions they make it much more difficult for regulations to be made
that, say, require full node operators to apply blacklists to
transactions in the mempool or in blocks.


4) This is really a side effect, and not directly DoS-related, but
unfortunately we're going to have to create some kind of
proof-of-UTXO-possession that miners include in the blocks they mine.
With partial mode it's just too easy and tempting for people to mine
blocks with fee paying transactions in them without actually having the
full UTXO set; such nodes can't tell if a block is invalid due to a fake
txin, and thus will happily extend a invalid chain. This possession
proof can probably be make part of a UTXO commitment.

> If I had to choose one thing to evict to make time for that, it'd be the
> whitepapers. At the moment we still have plenty of headroom in block sizes,
> even post April. It can probably be safely delayed for a while.

Lots of off-chain tx solutions are popping up which will help push back
the issue's relevance as well. Also your micropayment channels possibly.

-- 
'peter'[:-1]@petertodd.org
000000000000000b9656276a0fdab028ca759c3fd7f951fb20196c264b5cd1ce
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 198 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130816/5afa0810/attachment.sig>

From pete at petertodd.org  Fri Aug 16 14:06:35 2013
From: pete at petertodd.org (Peter Todd)
Date: Fri, 16 Aug 2013 10:06:35 -0400
Subject: [Bitcoin-development] Gavin's post-0.9 TODO list...
In-Reply-To: <CAEz79PqpQ0NG3WHHo7gqoZJVWqAQ4GwUaqSD_7LzWSvSQCHHig@mail.gmail.com>
References: <CABsx9T32q8mKgtmsaZgh7nuhHY5cExeW=FiadzXq3jXVP=NBTw@mail.gmail.com>
	<CANEZrP0PEcP339MKRyrHXHCCsP3BxRHT-ZfKRQ7G2Ou+15CD7A@mail.gmail.com>
	<CANEZrP3LAR0erjgmTHruLwPNDdx-OVyb9KK52E6UnmE4ZuBrvQ@mail.gmail.com>
	<CAEz79PqpQ0NG3WHHo7gqoZJVWqAQ4GwUaqSD_7LzWSvSQCHHig@mail.gmail.com>
Message-ID: <20130816140635.GC16201@petertodd.org>

On Fri, Aug 16, 2013 at 03:41:54AM -1000, Warren Togami Jr. wrote:
> https://togami.com/~warren/archive/2013/example-bitcoind-dos-mitigation-via-iptables.txt
> *Anti-DoS Low Hanging Fruit: source IP or subnet connection limits*
> If you disallow the same IP and/or subnet from establishing too many TCP
> connections with your node, it becomes more expensive for attackers to use
> a single host exhaust a target node's resources.  This iptables firewall
> based example has almost zero drawbacks, but it is too complicated for most
> people to deploy.  Yes, there is a small chance that you will block
> legitimate connections, but there are plenty of other nodes for random
> connections to choose from.  Configurable per source IP and source subnet
> limits with sane defaults enforced by bitcoind itself would be a big
> improvement over the current situation where one host address can consume
> limited resources of many target nodes.

Have you looked into what it would take to just apply the IP diversity
tests for outgoing connections to incoming connections? The code's
already there...

-- 
'peter'[:-1]@petertodd.org
0000000000000018dcf5bcc3f018a05517ba1c479b432ba422015d4506496e55
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 198 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130816/677730d8/attachment.sig>

From pete at petertodd.org  Fri Aug 16 14:15:36 2013
From: pete at petertodd.org (Peter Todd)
Date: Fri, 16 Aug 2013 10:15:36 -0400
Subject: [Bitcoin-development] Gavin's post-0.9 TODO list...
In-Reply-To: <20130816140116.GB16201@petertodd.org>
References: <CABsx9T32q8mKgtmsaZgh7nuhHY5cExeW=FiadzXq3jXVP=NBTw@mail.gmail.com>
	<CANEZrP0PEcP339MKRyrHXHCCsP3BxRHT-ZfKRQ7G2Ou+15CD7A@mail.gmail.com>
	<CANEZrP3LAR0erjgmTHruLwPNDdx-OVyb9KK52E6UnmE4ZuBrvQ@mail.gmail.com>
	<20130816140116.GB16201@petertodd.org>
Message-ID: <20130816141536.GD16201@petertodd.org>

On Fri, Aug 16, 2013 at 10:01:16AM -0400, Peter Todd wrote:
> Doing this also makes it more difficult to sybil the network - for
> instance right now you can create "SPV honeypots" that allow incoming
> connections only from SPV nodes, thus attracting a disproportionate % of
> the total SPV population given a relatively small number of nodes. You
> can then use that to harm SPV nodes by, for instance, making a % of
> transactions be dropped deterministicly, either by the bloom matching
> code, or when sent. Users unlucky enough to be surrounded by sybil nodes
> will have their transactions mysteriously fail to arrive in their
> wallets, or have their transactions mysteriously never confirm. Given
> how few full nodes there are, it probably won't take very many honeypots
> to pull off this attack, especially if you combine it with a
> simultaneous max connections or bloom io attack to degrade the capacity
> of honest nodes.

Oh, here's an even better way to do the "tx drop" attack: when you drop
a transaction, make a fake one that pays the same scriptPubKeys with the
same amount, and send it to the SPV peer instead. They'll see the
transaction go through and show up in their wallet, but it'll look like
it got stuck and never confirmed. They'll soon wind up with a wallet
full of useless transactions, effectively locking them out of their
money.

Here's another question for you Mike: So does bitcoinj have any
protections against peers flooding you with useless garbage? It'd be
easy to rack up a user's data bill for instance by just creating junk
unconfirmed transactions matching the bloom filter.

-- 
'peter'[:-1]@petertodd.org
0000000000000018dcf5bcc3f018a05517ba1c479b432ba422015d4506496e55
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 198 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130816/42690034/attachment.sig>

From wtogami at gmail.com  Fri Aug 16 14:27:35 2013
From: wtogami at gmail.com (Warren Togami Jr.)
Date: Fri, 16 Aug 2013 04:27:35 -1000
Subject: [Bitcoin-development] Gavin's post-0.9 TODO list...
In-Reply-To: <20130816141536.GD16201@petertodd.org>
References: <CABsx9T32q8mKgtmsaZgh7nuhHY5cExeW=FiadzXq3jXVP=NBTw@mail.gmail.com>
	<CANEZrP0PEcP339MKRyrHXHCCsP3BxRHT-ZfKRQ7G2Ou+15CD7A@mail.gmail.com>
	<CANEZrP3LAR0erjgmTHruLwPNDdx-OVyb9KK52E6UnmE4ZuBrvQ@mail.gmail.com>
	<20130816140116.GB16201@petertodd.org>
	<20130816141536.GD16201@petertodd.org>
Message-ID: <CAEz79PoK9u9ffJ5jR8yXk8eCFP0Ytk_bno0mpcpM24mt-GGg5w@mail.gmail.com>

bitcoinj-0.10 release notes:

   - We now require Bloom-capable (0.8+) peers by default and will
   disconnect from older nodes. This avoids accidental bandwidth saturation on
   mobile devices.

Given the user-security concern that Peter brings up, reconsideration of
this new default behavior in SPV clients may be warranted.



On Fri, Aug 16, 2013 at 4:15 AM, Peter Todd <pete at petertodd.org> wrote:

> On Fri, Aug 16, 2013 at 10:01:16AM -0400, Peter Todd wrote:
> > Doing this also makes it more difficult to sybil the network - for
> > instance right now you can create "SPV honeypots" that allow incoming
> > connections only from SPV nodes, thus attracting a disproportionate % of
> > the total SPV population given a relatively small number of nodes. You
> > can then use that to harm SPV nodes by, for instance, making a % of
> > transactions be dropped deterministicly, either by the bloom matching
> > code, or when sent. Users unlucky enough to be surrounded by sybil nodes
> > will have their transactions mysteriously fail to arrive in their
> > wallets, or have their transactions mysteriously never confirm. Given
> > how few full nodes there are, it probably won't take very many honeypots
> > to pull off this attack, especially if you combine it with a
> > simultaneous max connections or bloom io attack to degrade the capacity
> > of honest nodes.
>
> Oh, here's an even better way to do the "tx drop" attack: when you drop
> a transaction, make a fake one that pays the same scriptPubKeys with the
> same amount, and send it to the SPV peer instead. They'll see the
> transaction go through and show up in their wallet, but it'll look like
> it got stuck and never confirmed. They'll soon wind up with a wallet
> full of useless transactions, effectively locking them out of their
> money.
>
> Here's another question for you Mike: So does bitcoinj have any
> protections against peers flooding you with useless garbage? It'd be
> easy to rack up a user's data bill for instance by just creating junk
> unconfirmed transactions matching the bloom filter.
>
> --
> 'peter'[:-1]@petertodd.org
> 0000000000000018dcf5bcc3f018a05517ba1c479b432ba422015d4506496e55
>
>
> ------------------------------------------------------------------------------
> Get 100% visibility into Java/.NET code with AppDynamics Lite!
> It's a free troubleshooting tool designed for production.
> Get down to code-level detail for bottlenecks, with <2% overhead.
> Download for free and get started troubleshooting in minutes.
> http://pubads.g.doubleclick.net/gampad/clk?id=48897031&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130816/6948a457/attachment.html>

From mike at plan99.net  Fri Aug 16 14:36:20 2013
From: mike at plan99.net (Mike Hearn)
Date: Fri, 16 Aug 2013 16:36:20 +0200
Subject: [Bitcoin-development] Gavin's post-0.9 TODO list...
In-Reply-To: <CAEz79PoK9u9ffJ5jR8yXk8eCFP0Ytk_bno0mpcpM24mt-GGg5w@mail.gmail.com>
References: <CABsx9T32q8mKgtmsaZgh7nuhHY5cExeW=FiadzXq3jXVP=NBTw@mail.gmail.com>
	<CANEZrP0PEcP339MKRyrHXHCCsP3BxRHT-ZfKRQ7G2Ou+15CD7A@mail.gmail.com>
	<CANEZrP3LAR0erjgmTHruLwPNDdx-OVyb9KK52E6UnmE4ZuBrvQ@mail.gmail.com>
	<20130816140116.GB16201@petertodd.org>
	<20130816141536.GD16201@petertodd.org>
	<CAEz79PoK9u9ffJ5jR8yXk8eCFP0Ytk_bno0mpcpM24mt-GGg5w@mail.gmail.com>
Message-ID: <CANEZrP3hHh3k5+ePGbqVeyo3oV=RTy36FA+8MbOZXg3yMqRxAw@mail.gmail.com>

That change was made in response to user complaints. Heck we get complaints
about battery life and bandwidth impact even with Bloom filtering. We can't
just randomly start using peoples bandwidth for relaying blocks, especially
as I guess most SPV nodes are behind NAT.

If Gavin is right and the future is dominated by mobiles and tablets, then
it will require a change of thinking in how P2P networks work. I think
there are plenty of people with private servers who would be willing to run
nodes though. I'm not too worried about this.


On Fri, Aug 16, 2013 at 4:27 PM, Warren Togami Jr. <wtogami at gmail.com>wrote:

> bitcoinj-0.10 release notes:
>
>    - We now require Bloom-capable (0.8+) peers by default and will
>    disconnect from older nodes. This avoids accidental bandwidth saturation on
>    mobile devices.
>
> Given the user-security concern that Peter brings up, reconsideration of
> this new default behavior in SPV clients may be warranted.
>
>
>
> On Fri, Aug 16, 2013 at 4:15 AM, Peter Todd <pete at petertodd.org> wrote:
>
>> On Fri, Aug 16, 2013 at 10:01:16AM -0400, Peter Todd wrote:
>> > Doing this also makes it more difficult to sybil the network - for
>> > instance right now you can create "SPV honeypots" that allow incoming
>> > connections only from SPV nodes, thus attracting a disproportionate % of
>> > the total SPV population given a relatively small number of nodes. You
>> > can then use that to harm SPV nodes by, for instance, making a % of
>> > transactions be dropped deterministicly, either by the bloom matching
>> > code, or when sent. Users unlucky enough to be surrounded by sybil nodes
>> > will have their transactions mysteriously fail to arrive in their
>> > wallets, or have their transactions mysteriously never confirm. Given
>> > how few full nodes there are, it probably won't take very many honeypots
>> > to pull off this attack, especially if you combine it with a
>> > simultaneous max connections or bloom io attack to degrade the capacity
>> > of honest nodes.
>>
>> Oh, here's an even better way to do the "tx drop" attack: when you drop
>> a transaction, make a fake one that pays the same scriptPubKeys with the
>> same amount, and send it to the SPV peer instead. They'll see the
>> transaction go through and show up in their wallet, but it'll look like
>> it got stuck and never confirmed. They'll soon wind up with a wallet
>> full of useless transactions, effectively locking them out of their
>> money.
>>
>> Here's another question for you Mike: So does bitcoinj have any
>> protections against peers flooding you with useless garbage? It'd be
>> easy to rack up a user's data bill for instance by just creating junk
>> unconfirmed transactions matching the bloom filter.
>>
>> --
>> 'peter'[:-1]@petertodd.org
>> 0000000000000018dcf5bcc3f018a05517ba1c479b432ba422015d4506496e55
>>
>>
>> ------------------------------------------------------------------------------
>> Get 100% visibility into Java/.NET code with AppDynamics Lite!
>> It's a free troubleshooting tool designed for production.
>> Get down to code-level detail for bottlenecks, with <2% overhead.
>> Download for free and get started troubleshooting in minutes.
>>
>> http://pubads.g.doubleclick.net/gampad/clk?id=48897031&iu=/4140/ostg.clktrk
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>
>>
>
>
> ------------------------------------------------------------------------------
> Get 100% visibility into Java/.NET code with AppDynamics Lite!
> It's a free troubleshooting tool designed for production.
> Get down to code-level detail for bottlenecks, with <2% overhead.
> Download for free and get started troubleshooting in minutes.
> http://pubads.g.doubleclick.net/gampad/clk?id=48897031&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130816/5faf9356/attachment.html>

From gmaxwell at gmail.com  Fri Aug 16 14:56:12 2013
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Fri, 16 Aug 2013 07:56:12 -0700
Subject: [Bitcoin-development] Gavin's post-0.9 TODO list...
In-Reply-To: <CAEz79PqpQ0NG3WHHo7gqoZJVWqAQ4GwUaqSD_7LzWSvSQCHHig@mail.gmail.com>
References: <CABsx9T32q8mKgtmsaZgh7nuhHY5cExeW=FiadzXq3jXVP=NBTw@mail.gmail.com>
	<CANEZrP0PEcP339MKRyrHXHCCsP3BxRHT-ZfKRQ7G2Ou+15CD7A@mail.gmail.com>
	<CANEZrP3LAR0erjgmTHruLwPNDdx-OVyb9KK52E6UnmE4ZuBrvQ@mail.gmail.com>
	<CAEz79PqpQ0NG3WHHo7gqoZJVWqAQ4GwUaqSD_7LzWSvSQCHHig@mail.gmail.com>
Message-ID: <CAAS2fgQTbrYUz2XWtu2SApPT8tAaKxquuDgp9RjaNent+rnjdA@mail.gmail.com>

On Fri, Aug 16, 2013 at 6:41 AM, Warren Togami Jr. <wtogami at gmail.com> wrote:
> If you disallow the same IP and/or subnet from establishing too many TCP
> connections with your node,
[...]
> has almost zero drawbacks,

There are whole countries who access the internet from single IP
addresses. There are major institution with hundreds or even thousands
of hosts that could be running Bitcoin who are visible to the public
internet as a single IP address (/single subnet).  Most tor traffic
exits to the internet from a dozen of the largest exits, common
local-network configurations have people addnode-ing local hosts from
many systems on a subnet, etc.

Prioritizing the availability of inbound slots based on source IP is
reasonable and prudent, but it does not have almost zero drawbacks.
Outright limiting is even worse.

As a protective measure its also neigh useless for IPv6 connected
hosts and hidden service hosts.  It's also ineffective at attacks
which exhaust your memory, cpu, IO, or bandwidth without trying to
exhaust your sockets.

So I am not opposed to prioritizing based on it (e.g. when full pick
an inbound connection to drop based on criteria which includes network
mask commonality), but I would not want to block completely based on
this.



From pete at petertodd.org  Fri Aug 16 14:59:12 2013
From: pete at petertodd.org (Peter Todd)
Date: Fri, 16 Aug 2013 10:59:12 -0400
Subject: [Bitcoin-development] Gavin's post-0.9 TODO list...
In-Reply-To: <CANEZrP3hHh3k5+ePGbqVeyo3oV=RTy36FA+8MbOZXg3yMqRxAw@mail.gmail.com>
References: <CABsx9T32q8mKgtmsaZgh7nuhHY5cExeW=FiadzXq3jXVP=NBTw@mail.gmail.com>
	<CANEZrP0PEcP339MKRyrHXHCCsP3BxRHT-ZfKRQ7G2Ou+15CD7A@mail.gmail.com>
	<CANEZrP3LAR0erjgmTHruLwPNDdx-OVyb9KK52E6UnmE4ZuBrvQ@mail.gmail.com>
	<20130816140116.GB16201@petertodd.org>
	<20130816141536.GD16201@petertodd.org>
	<CAEz79PoK9u9ffJ5jR8yXk8eCFP0Ytk_bno0mpcpM24mt-GGg5w@mail.gmail.com>
	<CANEZrP3hHh3k5+ePGbqVeyo3oV=RTy36FA+8MbOZXg3yMqRxAw@mail.gmail.com>
Message-ID: <20130816145912.GA16533@petertodd.org>

On Fri, Aug 16, 2013 at 04:36:20PM +0200, Mike Hearn wrote:
> That change was made in response to user complaints. Heck we get complaints
> about battery life and bandwidth impact even with Bloom filtering. We can't
> just randomly start using peoples bandwidth for relaying blocks, especially
> as I guess most SPV nodes are behind NAT.

UPNP seems to work well for the reference client. What's the situation
there on Android?

I leave my phone plugged in and connected via wifi for most of the day;
lots of people do that.

The user interface for this stuff is very simple: "How much bandwidth
will you contribute back? If you contribute more bandwidth back, other
peers will prioritize you and your wallet will be more reliable."

-- 
'peter'[:-1]@petertodd.org
000000000000003cfc051263917373a1cab2655994b97c54a625021f52c84658
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 198 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130816/2c2584ac/attachment.sig>

From wtogami at gmail.com  Fri Aug 16 15:06:22 2013
From: wtogami at gmail.com (Warren Togami Jr.)
Date: Fri, 16 Aug 2013 05:06:22 -1000
Subject: [Bitcoin-development] Gavin's post-0.9 TODO list...
In-Reply-To: <20130816145912.GA16533@petertodd.org>
References: <CABsx9T32q8mKgtmsaZgh7nuhHY5cExeW=FiadzXq3jXVP=NBTw@mail.gmail.com>
	<CANEZrP0PEcP339MKRyrHXHCCsP3BxRHT-ZfKRQ7G2Ou+15CD7A@mail.gmail.com>
	<CANEZrP3LAR0erjgmTHruLwPNDdx-OVyb9KK52E6UnmE4ZuBrvQ@mail.gmail.com>
	<20130816140116.GB16201@petertodd.org>
	<20130816141536.GD16201@petertodd.org>
	<CAEz79PoK9u9ffJ5jR8yXk8eCFP0Ytk_bno0mpcpM24mt-GGg5w@mail.gmail.com>
	<CANEZrP3hHh3k5+ePGbqVeyo3oV=RTy36FA+8MbOZXg3yMqRxAw@mail.gmail.com>
	<20130816145912.GA16533@petertodd.org>
Message-ID: <CAEz79Pq105f-cFLijb6gEkgjdjW5JtbhFzd1W5umSmk8mAY+TQ@mail.gmail.com>

I might agree this would be helpful for the many phones plugged into power
and on wifi for large portions of the day.  However that doesn't really
help much when phone IP addresses change often as you move onto different
networks, and currently IP address is the only thing that peers can keep
track of for the goodness of a peer as there is no roaming pseudo-identity
cookie due to separate goal of anonymity?  I haven't studied the issue if
would be even possible to have both privacy protection and unique node
identifiers for anti-DoS authentication at the same time.

On Fri, Aug 16, 2013 at 4:59 AM, Peter Todd <pete at petertodd.org> wrote:

> The user interface for this stuff is very simple: "How much bandwidth
> will you contribute back? If you contribute more bandwidth back, other
> peers will prioritize you and your wallet will be more reliable."
>
> --
> 'peter'[:-1]@petertodd.org
> 000000000000003cfc051263917373a1cab2655994b97c54a625021f52c84658
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130816/1ad7034c/attachment.html>

From mike at plan99.net  Fri Aug 16 15:11:35 2013
From: mike at plan99.net (Mike Hearn)
Date: Fri, 16 Aug 2013 17:11:35 +0200
Subject: [Bitcoin-development] Gavin's post-0.9 TODO list...
In-Reply-To: <20130816145912.GA16533@petertodd.org>
References: <CABsx9T32q8mKgtmsaZgh7nuhHY5cExeW=FiadzXq3jXVP=NBTw@mail.gmail.com>
	<CANEZrP0PEcP339MKRyrHXHCCsP3BxRHT-ZfKRQ7G2Ou+15CD7A@mail.gmail.com>
	<CANEZrP3LAR0erjgmTHruLwPNDdx-OVyb9KK52E6UnmE4ZuBrvQ@mail.gmail.com>
	<20130816140116.GB16201@petertodd.org>
	<20130816141536.GD16201@petertodd.org>
	<CAEz79PoK9u9ffJ5jR8yXk8eCFP0Ytk_bno0mpcpM24mt-GGg5w@mail.gmail.com>
	<CANEZrP3hHh3k5+ePGbqVeyo3oV=RTy36FA+8MbOZXg3yMqRxAw@mail.gmail.com>
	<20130816145912.GA16533@petertodd.org>
Message-ID: <CANEZrP3wzMi3oWcwCt-GEs1cXdNa0mzvso_d3htJxaahiewaYw@mail.gmail.com>

On Fri, Aug 16, 2013 at 4:59 PM, Peter Todd <pete at petertodd.org> wrote:

> UPNP seems to work well for the reference client. What's the situation
> there on Android?
>

Not sure - it could be investigated. I think UPNP is an entirely
userspace-implementable protocol, so in theory it could be done by a
userspace library (even libminiupnp - java is not a requirement on android)


> I leave my phone plugged in and connected via wifi for most of the day;
> lots of people do that.
>

I suspect you mean "I think lots of people do that". I'm not so sure. We
could potentially run an experiment in the Android app to measure how many
users are in a position to contribute back, but just because you have wifi
doesn't mean you can reconfigure it using UPnP. That helps a lot in home
networks, but at the office it doesn't help.

I'm wary of a ton of work being put in to achieve not very much here.
Satoshi's original vision was always that millions of users were supported
by 100,000 or so nodes. I don't think that's unreasonable over the long
term.

Besides, prioritisation isn't very hard. Nodes can just hand clients a
signed timestamp which they remember. When re-connecting, the signed
timestamp is handed back to the node and it gives priority to those with
old timestamps. No state is required on the node side. Signing and checking
can be passed onto the general ECDSA thread pool that works its way through
pending signature operations, they'd be prioritised lower than checking
blocks/broadcasts.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130816/6ab447c9/attachment.html>

From mike at plan99.net  Fri Aug 16 15:13:28 2013
From: mike at plan99.net (Mike Hearn)
Date: Fri, 16 Aug 2013 17:13:28 +0200
Subject: [Bitcoin-development] Gavin's post-0.9 TODO list...
In-Reply-To: <CANEZrP3wzMi3oWcwCt-GEs1cXdNa0mzvso_d3htJxaahiewaYw@mail.gmail.com>
References: <CABsx9T32q8mKgtmsaZgh7nuhHY5cExeW=FiadzXq3jXVP=NBTw@mail.gmail.com>
	<CANEZrP0PEcP339MKRyrHXHCCsP3BxRHT-ZfKRQ7G2Ou+15CD7A@mail.gmail.com>
	<CANEZrP3LAR0erjgmTHruLwPNDdx-OVyb9KK52E6UnmE4ZuBrvQ@mail.gmail.com>
	<20130816140116.GB16201@petertodd.org>
	<20130816141536.GD16201@petertodd.org>
	<CAEz79PoK9u9ffJ5jR8yXk8eCFP0Ytk_bno0mpcpM24mt-GGg5w@mail.gmail.com>
	<CANEZrP3hHh3k5+ePGbqVeyo3oV=RTy36FA+8MbOZXg3yMqRxAw@mail.gmail.com>
	<20130816145912.GA16533@petertodd.org>
	<CANEZrP3wzMi3oWcwCt-GEs1cXdNa0mzvso_d3htJxaahiewaYw@mail.gmail.com>
Message-ID: <CANEZrP0FOTuaHKeobN-RvWYsUrZQb52FtQWrqjFovWTCfQOrng@mail.gmail.com>

Oops, hit send too early.

Besides, prioritisation isn't very hard. Nodes can just hand clients a
> signed timestamp which they remember. When re-connecting, the signed
> timestamp is handed back to the node and it gives priority to those with
> old timestamps. No state is required on the node side. Signing and checking
> can be passed onto the general ECDSA thread pool that works its way through
> pending signature operations, they'd be prioritised lower than checking
> blocks/broadcasts.
>

The other nice thing about this approach, besides being stateless on the
server side, is that it's up to the client whether or not they present the
cookie. So the node can say "if you don't present your cookie I'm going to
disconnect you" but when the node has sufficient resources, it'd just not
request this and the client remains anonymous. If the client thinks the
server is calling its bluff, it can just wait and see if it really does get
disconnected and if so, present the cookie up front next time.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130816/4fa6ae3d/attachment.html>

From pete at petertodd.org  Fri Aug 16 15:59:51 2013
From: pete at petertodd.org (Peter Todd)
Date: Fri, 16 Aug 2013 11:59:51 -0400
Subject: [Bitcoin-development] Gavin's post-0.9 TODO list...
In-Reply-To: <CANEZrP3wzMi3oWcwCt-GEs1cXdNa0mzvso_d3htJxaahiewaYw@mail.gmail.com>
References: <CABsx9T32q8mKgtmsaZgh7nuhHY5cExeW=FiadzXq3jXVP=NBTw@mail.gmail.com>
	<CANEZrP0PEcP339MKRyrHXHCCsP3BxRHT-ZfKRQ7G2Ou+15CD7A@mail.gmail.com>
	<CANEZrP3LAR0erjgmTHruLwPNDdx-OVyb9KK52E6UnmE4ZuBrvQ@mail.gmail.com>
	<20130816140116.GB16201@petertodd.org>
	<20130816141536.GD16201@petertodd.org>
	<CAEz79PoK9u9ffJ5jR8yXk8eCFP0Ytk_bno0mpcpM24mt-GGg5w@mail.gmail.com>
	<CANEZrP3hHh3k5+ePGbqVeyo3oV=RTy36FA+8MbOZXg3yMqRxAw@mail.gmail.com>
	<20130816145912.GA16533@petertodd.org>
	<CANEZrP3wzMi3oWcwCt-GEs1cXdNa0mzvso_d3htJxaahiewaYw@mail.gmail.com>
Message-ID: <20130816155951.GA16813@petertodd.org>

On Fri, Aug 16, 2013 at 05:11:35PM +0200, Mike Hearn wrote:
> On Fri, Aug 16, 2013 at 4:59 PM, Peter Todd <pete at petertodd.org> wrote:
> 
> > UPNP seems to work well for the reference client. What's the situation
> > there on Android?
> >
> 
> Not sure - it could be investigated. I think UPNP is an entirely
> userspace-implementable protocol, so in theory it could be done by a
> userspace library (even libminiupnp - java is not a requirement on android)

Do find out.

> > I leave my phone plugged in and connected via wifi for most of the day;
> > lots of people do that.
> >
> 
> I suspect you mean "I think lots of people do that". I'm not so sure. We
> could potentially run an experiment in the Android app to measure how many
> users are in a position to contribute back, but just because you have wifi
> doesn't mean you can reconfigure it using UPnP. That helps a lot in home
> networks, but at the office it doesn't help.

Also worth finding out.

> I'm wary of a ton of work being put in to achieve not very much here.
> Satoshi's original vision was always that millions of users were supported
> by 100,000 or so nodes. I don't think that's unreasonable over the long
> term.

Appeal to authority.

Stop bringing up Satoshi's "vision" - our understanding of
crypto-currencies has improved in the 4.5 years since Bitcoin was
released. Satoshi didn't even forsee pool mining, which says a lot about
his economic judgement.

> Besides, prioritisation isn't very hard. Nodes can just hand clients a
> signed timestamp which they remember. When re-connecting, the signed
> timestamp is handed back to the node and it gives priority to those with
> old timestamps. No state is required on the node side. Signing and checking
> can be passed onto the general ECDSA thread pool that works its way through
> pending signature operations, they'd be prioritised lower than checking
> blocks/broadcasts.

Right, so you're giving priority to peers that have been around for
awhile. You've succeeded in forcing attackers to wait a bit.

A) What's the definition of a peer? What stops me from pretending to be
100 peers?

B) Given an attacker willing to wait, what's your plan?

-- 
'peter'[:-1]@petertodd.org
000000000000004a52a297d9ae8ecde2ba62b681cc5a4cfbf7636032fc78e7d0
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 198 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130816/e4b89d0d/attachment.sig>

From jeremy at taplink.co  Fri Aug 16 19:37:50 2013
From: jeremy at taplink.co (Jeremy Spilman)
Date: Fri, 16 Aug 2013 12:37:50 -0700
Subject: [Bitcoin-development] BIP 32.5
In-Reply-To: <CAAS2fgQFOei6we8nfSr9DuQuHEjXT+G8_XGMk9um14DBgRuPyA@mail.gmail.com>
References: <CAAS2fgQFOei6we8nfSr9DuQuHEjXT+G8_XGMk9um14DBgRuPyA@mail.gmail.com>
Message-ID: <op.w1xctcddyldrnw@laptop-air>

I personally like the full-measure of eliminating the "CS-PRNG" entirely  
 from signing. If the "random" component is assumed to be untrusted,  
keeping it in there adds no value, while eschewing the main benefit of  
deterministic signing (ease of testing, auditing)

This just leaves the CS-PRNG at the heart of the security system -- when  
generating the root master key of an HD wallet. Adding to what Mike said,  
a single invocation of a CS-PRNG driving all subsequent keys increases the  
attack value if that one invocation turns out to be weak. By comparison,  
at least compromised DSA signatures were one-off events which didn't allow  
theft of funds beyond the one compromised address.

Cumulative / rolling entropy collection over time through multiple CS-PRNG  
invocations, or multiple entropy sources, could serve to recover from an  
"occasionally weak" CS-PRNG. I've read claims that this is bad practice  
because a single low entropy source can take entropy out of the result,  
but this seems like FUD. If you're using SHA512-HMAC to hash chain a few  
entropy sources, even "return 4; // chosen by random dice roll" is not  
going to help, but it's not going to hurt.

The DSA 'repeated-k' basically advertises itself on the block-chain and  
people were actively scanning for this weakness, whereas a weak key in the  
BIP32 root might not be as apparent, so exploitation may be more  
difficult, but also more insidious. Of course this depends on the exact  
failure mode of the CS-PRNG being used -- I wonder if anyone is searching  
for BIP32 keys based off of one of the 32k Debian random numbers being  
used as a master key?

Smartphones in particular have lots of sensors which could provide  
entropy. For example, if you pulled 64 bytes from "secure random", you  
could at least HMAC that with the SHA512 of a picture or a short video  
sample taken by the user. I'm guessing some people would cringe at this,  
but it seems to me like it provides some measure of protection to justify  
the increased code complexity.

TL;DR - Really like the idea of minimizing CS-PRNG use whenever possible  
(deterministic signing) and also would love to learn more best practices  
for placing less trust in the so called "CS-PRNG" when we do have to use  
them.

Thanks,
Jeremy




From wtogami at gmail.com  Sat Aug 17 00:08:22 2013
From: wtogami at gmail.com (Warren Togami Jr.)
Date: Fri, 16 Aug 2013 14:08:22 -1000
Subject: [Bitcoin-development] Gavin's post-0.9 TODO list...
In-Reply-To: <CANEZrP3hHh3k5+ePGbqVeyo3oV=RTy36FA+8MbOZXg3yMqRxAw@mail.gmail.com>
References: <CABsx9T32q8mKgtmsaZgh7nuhHY5cExeW=FiadzXq3jXVP=NBTw@mail.gmail.com>
	<CANEZrP0PEcP339MKRyrHXHCCsP3BxRHT-ZfKRQ7G2Ou+15CD7A@mail.gmail.com>
	<CANEZrP3LAR0erjgmTHruLwPNDdx-OVyb9KK52E6UnmE4ZuBrvQ@mail.gmail.com>
	<20130816140116.GB16201@petertodd.org>
	<20130816141536.GD16201@petertodd.org>
	<CAEz79PoK9u9ffJ5jR8yXk8eCFP0Ytk_bno0mpcpM24mt-GGg5w@mail.gmail.com>
	<CANEZrP3hHh3k5+ePGbqVeyo3oV=RTy36FA+8MbOZXg3yMqRxAw@mail.gmail.com>
Message-ID: <CAEz79Pq87Bp-SZsadHaRPk9HuzoeYrCK7noHm+-0iqNP0DFKuA@mail.gmail.com>

A sane default that better protects users could be...

If (plugged into power) && (wifi) then non-bloom peers are OK.  It would
protect those users more than reliance upon on the smaller subset of bloom
nodes.  Scale back to the less secure behavior when battery and bandwidth
matters.

Warren


On Fri, Aug 16, 2013 at 4:36 AM, Mike Hearn <mike at plan99.net> wrote:

> That change was made in response to user complaints. Heck we get
> complaints about battery life and bandwidth impact even with Bloom
> filtering. We can't just randomly start using peoples bandwidth for
> relaying blocks, especially as I guess most SPV nodes are behind NAT.
>
> If Gavin is right and the future is dominated by mobiles and tablets, then
> it will require a change of thinking in how P2P networks work. I think
> there are plenty of people with private servers who would be willing to run
> nodes though. I'm not too worried about this.
>
>
> On Fri, Aug 16, 2013 at 4:27 PM, Warren Togami Jr. <wtogami at gmail.com>wrote:
>
>> bitcoinj-0.10 release notes:
>>
>>    - We now require Bloom-capable (0.8+) peers by default and will
>>    disconnect from older nodes. This avoids accidental bandwidth saturation on
>>    mobile devices.
>>
>> Given the user-security concern that Peter brings up, reconsideration of
>> this new default behavior in SPV clients may be warranted.
>>
>>
>>
>> On Fri, Aug 16, 2013 at 4:15 AM, Peter Todd <pete at petertodd.org> wrote:
>>
>>> On Fri, Aug 16, 2013 at 10:01:16AM -0400, Peter Todd wrote:
>>> > Doing this also makes it more difficult to sybil the network - for
>>> > instance right now you can create "SPV honeypots" that allow incoming
>>> > connections only from SPV nodes, thus attracting a disproportionate %
>>> of
>>> > the total SPV population given a relatively small number of nodes. You
>>> > can then use that to harm SPV nodes by, for instance, making a % of
>>> > transactions be dropped deterministicly, either by the bloom matching
>>> > code, or when sent. Users unlucky enough to be surrounded by sybil
>>> nodes
>>> > will have their transactions mysteriously fail to arrive in their
>>> > wallets, or have their transactions mysteriously never confirm. Given
>>> > how few full nodes there are, it probably won't take very many
>>> honeypots
>>> > to pull off this attack, especially if you combine it with a
>>> > simultaneous max connections or bloom io attack to degrade the capacity
>>> > of honest nodes.
>>>
>>> Oh, here's an even better way to do the "tx drop" attack: when you drop
>>> a transaction, make a fake one that pays the same scriptPubKeys with the
>>> same amount, and send it to the SPV peer instead. They'll see the
>>> transaction go through and show up in their wallet, but it'll look like
>>> it got stuck and never confirmed. They'll soon wind up with a wallet
>>> full of useless transactions, effectively locking them out of their
>>> money.
>>>
>>> Here's another question for you Mike: So does bitcoinj have any
>>> protections against peers flooding you with useless garbage? It'd be
>>> easy to rack up a user's data bill for instance by just creating junk
>>> unconfirmed transactions matching the bloom filter.
>>>
>>> --
>>> 'peter'[:-1]@petertodd.org
>>> 0000000000000018dcf5bcc3f018a05517ba1c479b432ba422015d4506496e55
>>>
>>>
>>> ------------------------------------------------------------------------------
>>> Get 100% visibility into Java/.NET code with AppDynamics Lite!
>>> It's a free troubleshooting tool designed for production.
>>> Get down to code-level detail for bottlenecks, with <2% overhead.
>>> Download for free and get started troubleshooting in minutes.
>>>
>>> http://pubads.g.doubleclick.net/gampad/clk?id=48897031&iu=/4140/ostg.clktrk
>>> _______________________________________________
>>> Bitcoin-development mailing list
>>> Bitcoin-development at lists.sourceforge.net
>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>>
>>>
>>
>>
>> ------------------------------------------------------------------------------
>> Get 100% visibility into Java/.NET code with AppDynamics Lite!
>> It's a free troubleshooting tool designed for production.
>> Get down to code-level detail for bottlenecks, with <2% overhead.
>> Download for free and get started troubleshooting in minutes.
>>
>> http://pubads.g.doubleclick.net/gampad/clk?id=48897031&iu=/4140/ostg.clktrk
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130816/11c9bb99/attachment.html>

From mike at plan99.net  Sat Aug 17 12:35:41 2013
From: mike at plan99.net (Mike Hearn)
Date: Sat, 17 Aug 2013 14:35:41 +0200
Subject: [Bitcoin-development] Gavin's post-0.9 TODO list...
In-Reply-To: <CAEz79Pq87Bp-SZsadHaRPk9HuzoeYrCK7noHm+-0iqNP0DFKuA@mail.gmail.com>
References: <CABsx9T32q8mKgtmsaZgh7nuhHY5cExeW=FiadzXq3jXVP=NBTw@mail.gmail.com>
	<CANEZrP0PEcP339MKRyrHXHCCsP3BxRHT-ZfKRQ7G2Ou+15CD7A@mail.gmail.com>
	<CANEZrP3LAR0erjgmTHruLwPNDdx-OVyb9KK52E6UnmE4ZuBrvQ@mail.gmail.com>
	<20130816140116.GB16201@petertodd.org>
	<20130816141536.GD16201@petertodd.org>
	<CAEz79PoK9u9ffJ5jR8yXk8eCFP0Ytk_bno0mpcpM24mt-GGg5w@mail.gmail.com>
	<CANEZrP3hHh3k5+ePGbqVeyo3oV=RTy36FA+8MbOZXg3yMqRxAw@mail.gmail.com>
	<CAEz79Pq87Bp-SZsadHaRPk9HuzoeYrCK7noHm+-0iqNP0DFKuA@mail.gmail.com>
Message-ID: <CANEZrP21mwzAhNEOsT+wpw-OQd_r9BVbDFeQdgh0FZ6VGArFTw@mail.gmail.com>

There shouldn't be a "smaller subset of Bloom filtering nodes" because the
idea of making it optional is a stupid one.

If you're worried about DoS, come up with real fixes instead of trying to
break features that work.


On Sat, Aug 17, 2013 at 2:08 AM, Warren Togami Jr. <wtogami at gmail.com>wrote:

> A sane default that better protects users could be...
>
> If (plugged into power) && (wifi) then non-bloom peers are OK.  It would
> protect those users more than reliance upon on the smaller subset of bloom
> nodes.  Scale back to the less secure behavior when battery and bandwidth
> matters.
>
> Warren
>
>
> On Fri, Aug 16, 2013 at 4:36 AM, Mike Hearn <mike at plan99.net> wrote:
>
>> That change was made in response to user complaints. Heck we get
>> complaints about battery life and bandwidth impact even with Bloom
>> filtering. We can't just randomly start using peoples bandwidth for
>> relaying blocks, especially as I guess most SPV nodes are behind NAT.
>>
>> If Gavin is right and the future is dominated by mobiles and tablets,
>> then it will require a change of thinking in how P2P networks work. I think
>> there are plenty of people with private servers who would be willing to run
>> nodes though. I'm not too worried about this.
>>
>>
>> On Fri, Aug 16, 2013 at 4:27 PM, Warren Togami Jr. <wtogami at gmail.com>wrote:
>>
>>> bitcoinj-0.10 release notes:
>>>
>>>    - We now require Bloom-capable (0.8+) peers by default and will
>>>    disconnect from older nodes. This avoids accidental bandwidth saturation on
>>>    mobile devices.
>>>
>>> Given the user-security concern that Peter brings up, reconsideration of
>>> this new default behavior in SPV clients may be warranted.
>>>
>>>
>>>
>>> On Fri, Aug 16, 2013 at 4:15 AM, Peter Todd <pete at petertodd.org> wrote:
>>>
>>>> On Fri, Aug 16, 2013 at 10:01:16AM -0400, Peter Todd wrote:
>>>> > Doing this also makes it more difficult to sybil the network - for
>>>> > instance right now you can create "SPV honeypots" that allow incoming
>>>> > connections only from SPV nodes, thus attracting a disproportionate %
>>>> of
>>>> > the total SPV population given a relatively small number of nodes. You
>>>> > can then use that to harm SPV nodes by, for instance, making a % of
>>>> > transactions be dropped deterministicly, either by the bloom matching
>>>> > code, or when sent. Users unlucky enough to be surrounded by sybil
>>>> nodes
>>>> > will have their transactions mysteriously fail to arrive in their
>>>> > wallets, or have their transactions mysteriously never confirm. Given
>>>> > how few full nodes there are, it probably won't take very many
>>>> honeypots
>>>> > to pull off this attack, especially if you combine it with a
>>>> > simultaneous max connections or bloom io attack to degrade the
>>>> capacity
>>>> > of honest nodes.
>>>>
>>>> Oh, here's an even better way to do the "tx drop" attack: when you drop
>>>> a transaction, make a fake one that pays the same scriptPubKeys with the
>>>> same amount, and send it to the SPV peer instead. They'll see the
>>>> transaction go through and show up in their wallet, but it'll look like
>>>> it got stuck and never confirmed. They'll soon wind up with a wallet
>>>> full of useless transactions, effectively locking them out of their
>>>> money.
>>>>
>>>> Here's another question for you Mike: So does bitcoinj have any
>>>> protections against peers flooding you with useless garbage? It'd be
>>>> easy to rack up a user's data bill for instance by just creating junk
>>>> unconfirmed transactions matching the bloom filter.
>>>>
>>>> --
>>>> 'peter'[:-1]@petertodd.org
>>>> 0000000000000018dcf5bcc3f018a05517ba1c479b432ba422015d4506496e55
>>>>
>>>>
>>>> ------------------------------------------------------------------------------
>>>> Get 100% visibility into Java/.NET code with AppDynamics Lite!
>>>> It's a free troubleshooting tool designed for production.
>>>> Get down to code-level detail for bottlenecks, with <2% overhead.
>>>> Download for free and get started troubleshooting in minutes.
>>>>
>>>> http://pubads.g.doubleclick.net/gampad/clk?id=48897031&iu=/4140/ostg.clktrk
>>>> _______________________________________________
>>>> Bitcoin-development mailing list
>>>> Bitcoin-development at lists.sourceforge.net
>>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>>>
>>>>
>>>
>>>
>>> ------------------------------------------------------------------------------
>>> Get 100% visibility into Java/.NET code with AppDynamics Lite!
>>> It's a free troubleshooting tool designed for production.
>>> Get down to code-level detail for bottlenecks, with <2% overhead.
>>> Download for free and get started troubleshooting in minutes.
>>>
>>> http://pubads.g.doubleclick.net/gampad/clk?id=48897031&iu=/4140/ostg.clktrk
>>> _______________________________________________
>>> Bitcoin-development mailing list
>>> Bitcoin-development at lists.sourceforge.net
>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>>
>>>
>>
>
>
> ------------------------------------------------------------------------------
> Get 100% visibility into Java/.NET code with AppDynamics Lite!
> It's a free troubleshooting tool designed for production.
> Get down to code-level detail for bottlenecks, with <2% overhead.
> Download for free and get started troubleshooting in minutes.
> http://pubads.g.doubleclick.net/gampad/clk?id=48897031&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130817/a011825b/attachment.html>

From jgarzik at bitpay.com  Sat Aug 17 14:00:32 2013
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Sat, 17 Aug 2013 10:00:32 -0400
Subject: [Bitcoin-development] Combining bloom filters?
Message-ID: <CAJHLa0PfHa9Xinv0rdGUK8PRxR5NMC6h2an2ZGgCaTi_DpFrfQ@mail.gmail.com>

Consider wallet A builds bloom filter A' and wallet B builds bloom
filter B'.  Can A' and B' be or'd together to form a single bloom
filter C' ?

-- 
Jeff Garzik
Senior Software Engineer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From jgarzik at bitpay.com  Sat Aug 17 13:41:43 2013
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Sat, 17 Aug 2013 09:41:43 -0400
Subject: [Bitcoin-development] Gavin's post-0.9 TODO list...
In-Reply-To: <CANEZrP21mwzAhNEOsT+wpw-OQd_r9BVbDFeQdgh0FZ6VGArFTw@mail.gmail.com>
References: <CABsx9T32q8mKgtmsaZgh7nuhHY5cExeW=FiadzXq3jXVP=NBTw@mail.gmail.com>
	<CANEZrP0PEcP339MKRyrHXHCCsP3BxRHT-ZfKRQ7G2Ou+15CD7A@mail.gmail.com>
	<CANEZrP3LAR0erjgmTHruLwPNDdx-OVyb9KK52E6UnmE4ZuBrvQ@mail.gmail.com>
	<20130816140116.GB16201@petertodd.org>
	<20130816141536.GD16201@petertodd.org>
	<CAEz79PoK9u9ffJ5jR8yXk8eCFP0Ytk_bno0mpcpM24mt-GGg5w@mail.gmail.com>
	<CANEZrP3hHh3k5+ePGbqVeyo3oV=RTy36FA+8MbOZXg3yMqRxAw@mail.gmail.com>
	<CAEz79Pq87Bp-SZsadHaRPk9HuzoeYrCK7noHm+-0iqNP0DFKuA@mail.gmail.com>
	<CANEZrP21mwzAhNEOsT+wpw-OQd_r9BVbDFeQdgh0FZ6VGArFTw@mail.gmail.com>
Message-ID: <CAJHLa0NiWsHp9GG6DtENdQB5c4Mfr61Cq0tQVmQ_E-4fWRgtCQ@mail.gmail.com>

On Sat, Aug 17, 2013 at 8:35 AM, Mike Hearn <mike at plan99.net> wrote:
> There shouldn't be a "smaller subset of Bloom filtering nodes" because the
> idea of making it optional is a stupid one.
>
> If you're worried about DoS, come up with real fixes instead of trying to
> break features that work.

It is not just abstract worry.

-- 
Jeff Garzik
Senior Software Engineer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From pieter.wuille at gmail.com  Sat Aug 17 14:15:31 2013
From: pieter.wuille at gmail.com (Pieter Wuille)
Date: Sat, 17 Aug 2013 16:15:31 +0200
Subject: [Bitcoin-development] Combining bloom filters?
In-Reply-To: <CAJHLa0PfHa9Xinv0rdGUK8PRxR5NMC6h2an2ZGgCaTi_DpFrfQ@mail.gmail.com>
References: <CAJHLa0PfHa9Xinv0rdGUK8PRxR5NMC6h2an2ZGgCaTi_DpFrfQ@mail.gmail.com>
Message-ID: <CAPg+sBhHmXx_qV7i-9rSBHsV7U7AET7b+FXecRuROMF=R2UJhA@mail.gmail.com>

If both constructed bloom filters use the same seed and the same number of
hash functions, yes. Assuming the input filters were optimal for a given FP
rate, the resulting filter will be worse.

-- 
Pieter
 On 17 Aug 2013 16:01, "Jeff Garzik" <jgarzik at bitpay.com> wrote:

> Consider wallet A builds bloom filter A' and wallet B builds bloom
> filter B'.  Can A' and B' be or'd together to form a single bloom
> filter C' ?
>
> --
> Jeff Garzik
> Senior Software Engineer and open source evangelist
> BitPay, Inc.      https://bitpay.com/
>
>
> ------------------------------------------------------------------------------
> Get 100% visibility into Java/.NET code with AppDynamics Lite!
> It's a free troubleshooting tool designed for production.
> Get down to code-level detail for bottlenecks, with <2% overhead.
> Download for free and get started troubleshooting in minutes.
> http://pubads.g.doubleclick.net/gampad/clk?id=48897031&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130817/410af489/attachment.html>

From bitcoin-list at bluematt.me  Sat Aug 17 14:03:41 2013
From: bitcoin-list at bluematt.me (bitcoin-list at bluematt.me)
Date: Sat, 17 Aug 2013 10:03:41 -0400
Subject: [Bitcoin-development] Combining bloom filters?
In-Reply-To: <CAJHLa0PfHa9Xinv0rdGUK8PRxR5NMC6h2an2ZGgCaTi_DpFrfQ@mail.gmail.com>
References: <CAJHLa0PfHa9Xinv0rdGUK8PRxR5NMC6h2an2ZGgCaTi_DpFrfQ@mail.gmail.com>
Message-ID: <19192d40-656d-4901-b9e0-165b43420b7d@email.android.com>

Under some conditions, yes. The filters must have the same parameters (tweak, size, hash count). Bitcoinj implements this in its BloomFilter class.

Matt

Jeff Garzik <jgarzik at bitpay.com> wrote:
>Consider wallet A builds bloom filter A' and wallet B builds bloom
>filter B'.  Can A' and B' be or'd together to form a single bloom
>filter C' ?
>
>-- 
>Jeff Garzik
>Senior Software Engineer and open source evangelist
>BitPay, Inc.      https://bitpay.com/
>
>------------------------------------------------------------------------------
>Get 100% visibility into Java/.NET code with AppDynamics Lite!
>It's a free troubleshooting tool designed for production.
>Get down to code-level detail for bottlenecks, with <2% overhead. 
>Download for free and get started troubleshooting in minutes. 
>http://pubads.g.doubleclick.net/gampad/clk?id=48897031&iu=/4140/ostg.clktrk
>_______________________________________________
>Bitcoin-development mailing list
>Bitcoin-development at lists.sourceforge.net
>https://lists.sourceforge.net/lists/listinfo/bitcoin-development
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130817/0bed300e/attachment.html>

From pieter.wuille at gmail.com  Sat Aug 17 20:53:36 2013
From: pieter.wuille at gmail.com (Pieter Wuille)
Date: Sat, 17 Aug 2013 22:53:36 +0200
Subject: [Bitcoin-development] LevelDB in master
In-Reply-To: <20130816095243.GA11181@savin>
References: <201308160939.29864.luke@dashjr.org> <20130816095243.GA11181@savin>
Message-ID: <CAPg+sBiGotwQRb28XeAqX=5wOLa_EjAoWAzTzjPmWMMxz_Hykg@mail.gmail.com>

On Fri, Aug 16, 2013 at 11:52 AM, Peter Todd <pete at petertodd.org> wrote:
> On Fri, Aug 16, 2013 at 09:39:16AM +0000, Luke-Jr wrote:
>> Now-merged pull request #2702 appears to have put the master branch on an
>> unofficial Ripple fork of LevelDB, rather than merely updating us to LevelDB
>> 1.12.0. While Vinnie did somewhat disclose this, I don't see any evidence the
>> nature of this was fully understood by others. As I understood the pull
>> request, the "Ripple and Bitcoin fork" was just LevelDB with the changes we
>> had already made. Mike's comments on the pull request (his audit) suggest that
>> this may have been the case in an earlier revision of it. But in fact, there
>> appear to be a number of other changes included in what was finally merged a
>> few weeks ago. Furthermore, Ripple's fork did not do a proper git merge of
>> upstream, thus there is a break in git history, and, more importantly, a
>> number of upstream fixes (including some we have had reported to the Bitcoin
>> issue tracker) were not included in this merge.
>>
>> I've pushed three branches to https://github.com/luke-jr/leveldb :
>>   bitcoin-1.5   Our old/unreleased LevelDB 1.5 fork, for reference
>>   bitcoin       Our LevelDB 1.7 fork, included in 0.8.x
>>   bitcoin-up    Our LevelDB 1.7 fork, merged with upstream LevelDB 1.12
>>
>> A diff from current master (Ripple LevelDB 1.12 fork) to bitcoin-up:
>>   https://gist.github.com/luke-jr/6248543

Thanks for investigating this. I guess it's my fault for not checking
the diff before the final merge. I guess the simultaneous switch to a
git-subtree'd leveldb made it harder to review.

In any case, the changes seem harmless, but I think we should revert
to a codebase as close as possible to upstream LevelDB 1.12. The diff
you have between bitcoin head and bitcoin-up shows a few reverted
patches that we included during 0.9's merge window, a patch by ripple
to add a compaction delay (which they seem to have reverted now too)
and one weird ripple-specific commit (which just seems to remove
issue178_test.cc).

I've put a cleaned-up history of the LevelDB subtree in the
http://github.com/bitcoin/leveldb repository (branch bitcoin-fork),
and then used git-subtree to create a pull request (#2907) which
switches our src/leveldb directory to this tree. It correctly lists
the reverted (and sometimes re-applied) changes in the squashed commit
(please review!). The actual diff corresponds to the diff you
produced, with the reverted changes in our repository re-applied.

-- 
Pieter



From pete at petertodd.org  Sun Aug 18 02:59:32 2013
From: pete at petertodd.org (Peter Todd)
Date: Sat, 17 Aug 2013 22:59:32 -0400
Subject: [Bitcoin-development] NODE_BLOOM BIP
Message-ID: <20130818025932.GA372@savin>

My draft is as follows.

Gregory Maxwell: Can you assign a BIP # for this? The next number, 38,
is on the wiki as "Passphrase-protected private key" by Mike Caldwell,
although it isn't in the list so I don't know if that is official or
not.



BIP: ?
Title: NODE_BLOOM service bit
Author: Peter Todd <pete at petertodd.org>
Type: Standards Track (draft)
Created: 17-08-2013

Abstract
========

This BIP extends BIP 37, Connection Bloom filtering, by defining a service bit
to allow peers to advertise that they support bloom filters explicitly.


Motivation
==========

BIP 37 did not specify a service bit for the bloom filter service, thus
implicitly assuming that all nodes that serve peers data support it. There are
however cases where a node may want to provide data, such as mempool
transactions and blocks, but do not want to or have not implemented bloom
filtering. Additionally it is good practice for nodes to be given options as to
the granularity of the services they are providing the public - a full-node
operator may be able to donate only a small amount of bandwidth and may want
those efforts to be used by other full-node operators.


Specification
=============

The following protocol bit is added:

    NODE_BLOOM = (1 << 1)

In addition the protocol version is increased from 70001 to 70002 in the
reference implementation. Nodes that support bloom filters should set that
protocol bit. Otherwise it should remain unset.

NODE_BLOOM is distinct from NODE_NETWORK, and it is legal to advertise
NODE_BLOOM but not NODE_NETWORK.

If a node does not support bloom filters but receives a "filterload",
"filteradd", or "filterclear" message from a peer the node should disconnect
that peer immediately.

While outside the scope of this BIP it is suggested that DNS seeds and other
peer discovery mechanisms support the ability to specify the services required;
current implementations simply check only that NODE_NETWORK is set.


Design rational
===============

A service bit was chosen as applying a bloom filter is a service.

The increase in protocol version is for backwards compatibility. Nodes that
require the bloom filter service can set NODE_BLOOM for peers advertising a
protocol version < 70002, allowing the rest of the implementation to be
unchanged. Nodes with implementations that do not know of the NODE_BLOOM bit
will be disconnected immediately as though the connection failed for some
reason, and thus will not have incoming bandwidth wasted by that peer and can
easily connect to another peer.

Supporting NODE_BLOOM but not NODE_NETWORK allows for situations where a node
may have data that its peers may be interested in, but is not a full node and
thus does not have block data in general. For instance an SPV node that
receives a full, unfiltered, block from a peer may want to let its SPV peers
know about the existence of that block and provide them that data if requested.
Those peers in turn may only be interested in knowing about the block if it
matches a specific bloom filter. Note how in this example DoS attacks are made
prohibitively expensive by the work required to create a valid block header.


Reference Implementation
========================

https://github.com/bitcoin/bitcoin/pull/2900


Copyright
=========

This document is placed in the public domain.

-- 
'peter'[:-1]@petertodd.org
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 490 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130817/86359a7c/attachment.sig>

From mike at plan99.net  Sun Aug 18 22:00:23 2013
From: mike at plan99.net (Mike Hearn)
Date: Mon, 19 Aug 2013 00:00:23 +0200
Subject: [Bitcoin-development] NODE_BLOOM BIP
In-Reply-To: <20130818025932.GA372@savin>
References: <20130818025932.GA372@savin>
Message-ID: <CANEZrP2jONtRJ6oF1YqKJB9nm1HcMkfz_yzeNshEWqD-5fdNiA@mail.gmail.com>

The original Bloom filtering spec did not make this feature optional for
the same reason gzip isn't an optional part of the PNG specification. I see
no reason to revisit that. It's definitely not the case that making every
possible feature optional is smart design, often it's the opposite.

If in future there are nodes that for some reason can't technically support
this feature, then there'd be a stronger rationale for something like this.
However no such nodes exist, nor are they likely to in future given that
it's a simple feature to implement.

For these reason I oppose this BIP.


On Sun, Aug 18, 2013 at 4:59 AM, Peter Todd <pete at petertodd.org> wrote:

> My draft is as follows.
>
> Gregory Maxwell: Can you assign a BIP # for this? The next number, 38,
> is on the wiki as "Passphrase-protected private key" by Mike Caldwell,
> although it isn't in the list so I don't know if that is official or
> not.
>
>
>
> BIP: ?
> Title: NODE_BLOOM service bit
> Author: Peter Todd <pete at petertodd.org>
> Type: Standards Track (draft)
> Created: 17-08-2013
>
> Abstract
> ========
>
> This BIP extends BIP 37, Connection Bloom filtering, by defining a service
> bit
> to allow peers to advertise that they support bloom filters explicitly.
>
>
> Motivation
> ==========
>
> BIP 37 did not specify a service bit for the bloom filter service, thus
> implicitly assuming that all nodes that serve peers data support it. There
> are
> however cases where a node may want to provide data, such as mempool
> transactions and blocks, but do not want to or have not implemented bloom
> filtering. Additionally it is good practice for nodes to be given options
> as to
> the granularity of the services they are providing the public - a full-node
> operator may be able to donate only a small amount of bandwidth and may
> want
> those efforts to be used by other full-node operators.
>
>
> Specification
> =============
>
> The following protocol bit is added:
>
>     NODE_BLOOM = (1 << 1)
>
> In addition the protocol version is increased from 70001 to 70002 in the
> reference implementation. Nodes that support bloom filters should set that
> protocol bit. Otherwise it should remain unset.
>
> NODE_BLOOM is distinct from NODE_NETWORK, and it is legal to advertise
> NODE_BLOOM but not NODE_NETWORK.
>
> If a node does not support bloom filters but receives a "filterload",
> "filteradd", or "filterclear" message from a peer the node should
> disconnect
> that peer immediately.
>
> While outside the scope of this BIP it is suggested that DNS seeds and
> other
> peer discovery mechanisms support the ability to specify the services
> required;
> current implementations simply check only that NODE_NETWORK is set.
>
>
> Design rational
> ===============
>
> A service bit was chosen as applying a bloom filter is a service.
>
> The increase in protocol version is for backwards compatibility. Nodes that
> require the bloom filter service can set NODE_BLOOM for peers advertising a
> protocol version < 70002, allowing the rest of the implementation to be
> unchanged. Nodes with implementations that do not know of the NODE_BLOOM
> bit
> will be disconnected immediately as though the connection failed for some
> reason, and thus will not have incoming bandwidth wasted by that peer and
> can
> easily connect to another peer.
>
> Supporting NODE_BLOOM but not NODE_NETWORK allows for situations where a
> node
> may have data that its peers may be interested in, but is not a full node
> and
> thus does not have block data in general. For instance an SPV node that
> receives a full, unfiltered, block from a peer may want to let its SPV
> peers
> know about the existence of that block and provide them that data if
> requested.
> Those peers in turn may only be interested in knowing about the block if it
> matches a specific bloom filter. Note how in this example DoS attacks are
> made
> prohibitively expensive by the work required to create a valid block
> header.
>
>
> Reference Implementation
> ========================
>
> https://github.com/bitcoin/bitcoin/pull/2900
>
>
> Copyright
> =========
>
> This document is placed in the public domain.
>
> --
> 'peter'[:-1]@petertodd.org
>
>
> ------------------------------------------------------------------------------
> Get 100% visibility into Java/.NET code with AppDynamics Lite!
> It's a free troubleshooting tool designed for production.
> Get down to code-level detail for bottlenecks, with <2% overhead.
> Download for free and get started troubleshooting in minutes.
> http://pubads.g.doubleclick.net/gampad/clk?id=48897031&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130819/15e4c80b/attachment.html>

From gavinandresen at gmail.com  Sun Aug 18 22:22:10 2013
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Mon, 19 Aug 2013 08:22:10 +1000
Subject: [Bitcoin-development] NODE_BLOOM BIP
In-Reply-To: <CANEZrP2jONtRJ6oF1YqKJB9nm1HcMkfz_yzeNshEWqD-5fdNiA@mail.gmail.com>
References: <20130818025932.GA372@savin>
	<CANEZrP2jONtRJ6oF1YqKJB9nm1HcMkfz_yzeNshEWqD-5fdNiA@mail.gmail.com>
Message-ID: <CABsx9T2Jz1LUvKP38pMRGt6Vp5USzCUQL_F-pqsMsVygVzhiiQ@mail.gmail.com>

Mike pointed out exactly the reason I oppose a NODE_BLOOM service bit: I
also think it is a bad idea to start making various bits and pieces of the
protocol optional.

It is bad for privacy (easier to fingerprint nodes) and bad for
decentralization (fewer nodes support your required feature set). And every
bit you add can give you an exponential number of combinations your QA team
should test.

I'd say the same thing about NODE_TRANSACTION ("I don't know about blocks,
have and NODE_BLOCK bits.

-- 
--
Gavin Andresen
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130819/73aa73f7/attachment.html>

From pete at petertodd.org  Sun Aug 18 22:59:30 2013
From: pete at petertodd.org (Peter Todd)
Date: Sun, 18 Aug 2013 18:59:30 -0400
Subject: [Bitcoin-development] NODE_BLOOM BIP
In-Reply-To: <CANEZrP2jONtRJ6oF1YqKJB9nm1HcMkfz_yzeNshEWqD-5fdNiA@mail.gmail.com>
References: <20130818025932.GA372@savin>
	<CANEZrP2jONtRJ6oF1YqKJB9nm1HcMkfz_yzeNshEWqD-5fdNiA@mail.gmail.com>
Message-ID: <20130818225930.GA23974@savin>

On Mon, Aug 19, 2013 at 12:00:23AM +0200, Mike Hearn wrote:
> The original Bloom filtering spec did not make this feature optional for
> the same reason gzip isn't an optional part of the PNG specification. I see
> no reason to revisit that. It's definitely not the case that making every
> possible feature optional is smart design, often it's the opposite.

Bloom filtering isn't lossless so to speak.

A better analogy would be making re-sharing an optinal part of the
BitTorrent specification, and then expecting that the majority of users
would never upload data to peers that needed it.

-- 
'peter'[:-1]@petertodd.org
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 490 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130818/353f5e36/attachment.sig>

From pete at petertodd.org  Sun Aug 18 23:11:09 2013
From: pete at petertodd.org (Peter Todd)
Date: Sun, 18 Aug 2013 19:11:09 -0400
Subject: [Bitcoin-development] NODE_BLOOM BIP
In-Reply-To: <CABsx9T2Jz1LUvKP38pMRGt6Vp5USzCUQL_F-pqsMsVygVzhiiQ@mail.gmail.com>
References: <20130818025932.GA372@savin>
	<CANEZrP2jONtRJ6oF1YqKJB9nm1HcMkfz_yzeNshEWqD-5fdNiA@mail.gmail.com>
	<CABsx9T2Jz1LUvKP38pMRGt6Vp5USzCUQL_F-pqsMsVygVzhiiQ@mail.gmail.com>
Message-ID: <20130818231109.GB23974@savin>

On Mon, Aug 19, 2013 at 08:22:10AM +1000, Gavin Andresen wrote:
> Mike pointed out exactly the reason I oppose a NODE_BLOOM service bit: I
> also think it is a bad idea to start making various bits and pieces of the
> protocol optional.

> It is bad for privacy (easier to fingerprint nodes) and bad for
> decentralization (fewer nodes support your required feature set). And every
> bit you add can give you an exponential number of combinations your QA team
> should test.

Mike's and others have been talking about persistent node-specific
identifiers, and after all at this level there are IP addresses;
fingerprinting nodes is trivial.

> I'd say the same thing about NODE_TRANSACTION ("I don't know about blocks,
> have and NODE_BLOCK bits.

We need options so peopl can contribute to relaying and the health of
the network - these edge cases are going to be tested anyway by people
like me deciding to disable bloom filtering.

-- 
'peter'[:-1]@petertodd.org
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 490 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130818/2b2e526f/attachment.sig>

From pete at petertodd.org  Mon Aug 19 00:13:57 2013
From: pete at petertodd.org (Peter Todd)
Date: Sun, 18 Aug 2013 20:13:57 -0400
Subject: [Bitcoin-development] Bloom io attack effectiveness
Message-ID: <20130819001357.GA4281@savin>

Did some tests with a varient of attack... In short it's fairly easy to
saturate a node's disk IO bandwidth and when that happens the node
quickly falls behind in consensus, not to mention becomes useless to
it's peers. Note that the particular varient I tried is different, and
less efficient in bandwidth, than others discussed privately.

Bandwidth required to, for example, take out a Amazon EC2 m1.small is
about 1KiB/second, and results in it getting multiple blocks behind in
consensus, or a delay on the order of minutes to tens of minutes. I had
similar results attacking a p2pool node I own that has a harddrive and
4GiB of ram - of course my orphan rate went to 100%

It'd be interesting to repeat the attack by distributing it from
multiple peers rather than from a single source. At that point the
attack could be made indistinguishable from a bunch of SPV wallets
rescanning the chain for old transactions.

In any case given that SPV peers don't contribute back to the network
they should obviously be heavily deprioritized and served only with
whatever resources a node has spare. The more interesting question is
how do you make it possible for SPV nodes to gain priority over an
attacker? It has to be some kind of limited resource - schemes that rely
on things like prioritizing long-lived identities fail against patient
attackers - time doesn't make an identity expensive if the identity is
free in the first place. Similarly summing up the fees paid by
transactions relayed from that peer also fail, because an attacker can
easily broadcast the same transaction to multiple peers at once - it's
not a limited resource. Bandwidth is limited, but orders of magnitude
cheaper for the attacker than a Android wallet on a dataplan.

-- 
'peter'[:-1]@petertodd.org
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 490 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130818/82c987fe/attachment.sig>

From gavinandresen at gmail.com  Mon Aug 19 00:59:18 2013
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Mon, 19 Aug 2013 10:59:18 +1000
Subject: [Bitcoin-development] Bloom io attack effectiveness
In-Reply-To: <20130819001357.GA4281@savin>
References: <20130819001357.GA4281@savin>
Message-ID: <CABsx9T3MFqmLchc1Uu20BhiVKsYWFtt0eneVSey846y2hdQ7Rg@mail.gmail.com>

Peter said:
"In any case given that SPV peers don't contribute back to the network
they should obviously be heavily deprioritized and served only with
whatever resources a node has spare."

This seems very much like a "cut off your nose to spite your face" solution.

SPV peers are INCREDIBLY IMPORTANT to the growth of Bitcoin; much more
important than nodes that have the bandwidth and disk I/O capability of
being a full node.  Bitcoin will be just fine if there are never more than
10,000 big, beefy, full nodes forming the backbone of the network, but will
be NOTHING if we don't support tens of millions of lightweight SPV devices.

Ok, that's an exaggeration, Bitcoin would be just fine in an Electrum model
where tens of millions of lightweight devices rely 100% on a full node to
operate. But I would prefer the more decentralized, less-trust-required SPV
model.

-- 
--
Gavin Andresen
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130819/eb22a43d/attachment.html>

From pete at petertodd.org  Mon Aug 19 01:34:37 2013
From: pete at petertodd.org (Peter Todd)
Date: Sun, 18 Aug 2013 21:34:37 -0400
Subject: [Bitcoin-development] Bloom io attack effectiveness
In-Reply-To: <CABsx9T3MFqmLchc1Uu20BhiVKsYWFtt0eneVSey846y2hdQ7Rg@mail.gmail.com>
References: <20130819001357.GA4281@savin>
	<CABsx9T3MFqmLchc1Uu20BhiVKsYWFtt0eneVSey846y2hdQ7Rg@mail.gmail.com>
Message-ID: <20130819013437.GA21524@savin>

On Mon, Aug 19, 2013 at 10:59:18AM +1000, Gavin Andresen wrote:
> Peter said:
> "In any case given that SPV peers don't contribute back to the network
> they should obviously be heavily deprioritized and served only with
> whatever resources a node has spare."
> 
> This seems very much like a "cut off your nose to spite your face" solution.
> 
> SPV peers are INCREDIBLY IMPORTANT to the growth of Bitcoin; much more
> important than nodes that have the bandwidth and disk I/O capability of
> being a full node.  Bitcoin will be just fine if there are never more than
> 10,000 big, beefy, full nodes forming the backbone of the network, but will
> be NOTHING if we don't support tens of millions of lightweight SPV devices.
> 
> Ok, that's an exaggeration, Bitcoin would be just fine in an Electrum model
> where tens of millions of lightweight devices rely 100% on a full node to
> operate. But I would prefer the more decentralized, less-trust-required SPV
> model.

Don't read too much into what I said; under normal circumstances when a
Bitcoin node isn't being attacked, there will be plenty of spare
capacity for SPV nodes. All I'm suggesting is that we make sure serving
those nodes doesn't come at the expense of maintaining consensus -
mainly distributing new blocks around the network so the blockchain
keeps moving forward. (something many SPV peers can help with anyway)

I'd much rather my Android wallet take a long time to sync up, than
blocks get re-organized because miners found themselves separated from
one another, let along someone clever using that to do double-spend
attacks during those re-orgs. After all, I can always find a private
node to connect to that won't be overloaded because it doesn't accept
connections from anonymous users. It's also easy to just use really
basic measures to limit abuse, like "sign up with your bitcointalk"
account, or "pay 10 cents for an account to discourage spammers"

Anyway all things less likely to be needed if attackers know all they
are going to manage to do is inconvenience people temporarily because
the network itself will keep running.

-- 
'peter'[:-1]@petertodd.org
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 490 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130818/c6a81275/attachment.sig>

From john.dillon892 at googlemail.com  Mon Aug 19 02:53:32 2013
From: john.dillon892 at googlemail.com (John Dillon)
Date: Mon, 19 Aug 2013 02:53:32 +0000
Subject: [Bitcoin-development] Bloom io attack effectiveness
In-Reply-To: <CABsx9T3MFqmLchc1Uu20BhiVKsYWFtt0eneVSey846y2hdQ7Rg@mail.gmail.com>
References: <20130819001357.GA4281@savin>
	<CABsx9T3MFqmLchc1Uu20BhiVKsYWFtt0eneVSey846y2hdQ7Rg@mail.gmail.com>
Message-ID: <CAPaL=UWH=3qj7AW-azrO9rJqRj3BKBff8-eETfF03po9kPJO4g@mail.gmail.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256

On Mon, Aug 19, 2013 at 12:59 AM, Gavin Andresen
<gavinandresen at gmail.com> wrote:
> Peter said:
> "In any case given that SPV peers don't contribute back to the network
> they should obviously be heavily deprioritized and served only with
> whatever resources a node has spare."
>
> This seems very much like a "cut off your nose to spite your face" solution.
>
> SPV peers are INCREDIBLY IMPORTANT to the growth of Bitcoin; much more
> important than nodes that have the bandwidth and disk I/O capability of
> being a full node.  Bitcoin will be just fine if there are never more than
> 10,000 big, beefy, full nodes forming the backbone of the network, but will
> be NOTHING if we don't support tens of millions of lightweight SPV devices.
>
> Ok, that's an exaggeration, Bitcoin would be just fine in an Electrum model
> where tens of millions of lightweight devices rely 100% on a full node to
> operate. But I would prefer the more decentralized, less-trust-required SPV
> model.

So tell us how is your "vision" of 10,000 big beefy full nodes with SPV peers
any different from the Electrum model? These days Electrum clients have block
headers and verify that transactions have merkle paths to the block headers.
The only difference I see is that SPV uses bloom filtering and Electrum can
query by transaction. But Mike wants to add querying by transaction to full
nodes anyway, and one of the purported advantages of this UTXO proof stuff is
that you can query servers for UTXO's by address, so I see no difference at
all. A patch to do bloom filtering on Electrum would be amusing to me.

Here you have Peter talking about clever ways to actually get decentralization
by having SPV peers donate back to the network with spare bandwidth, like
relaying blocks, not to mention his partial UTXO set ideas, and you completely
ignore that. But I guess that would raise ugly questions when people realize
they can't now contribute back to Bitcoin, because the blocksize is a gigabyte
of microtransactions... It may also raise ugly questions with regulators that
may find the idea of "full node == data chokepoint == regulatory chokepoint" an
attractive notion. Why are there not any competent people other than Peter who
really have the guts to bring up these proposals? I've little luck getting
proof-of-concepts built for money anyway. Maybe we just have a darth of smart
competent people in this space.

You do a good job of signaling your priorities Gavin. The payment protocol
includes no notion that you may want to pay anyone but a SSL certified
merchant. Yes I know the crypto can be upgraded, but it says volumes that you
pushed for that first, without even the slightest token effort to allow
individuals to participate in any way. Sad given you have made things *less*
secure because there is no safe way to get money *into* my wallet with the
payment protocol, but could have been.

Tell me, when my decentralization pull-req is voted on, which way are you
planning on voting?

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.11 (GNU/Linux)

iQEcBAEBCAAGBQJSEYg/AAoJEEWCsU4mNhiPQBIH/A2cef0NDzu72CY0+N1HdPO+
fdixwncAg1ok6YdJj5WALjHbkhJ+QRVEZoRr6rHPxxxTywI+HiPN1oaopIrq3StP
bNpvouaWXLyw6xHMrMYefVOluHNZg3lu1akLdGuYA7rDHLwP/RhlF1FFzXSxKFsp
ANcw4WW7U5r5nfBHYc/a9xo8S6THI7Nv2NDW6WaRQO4X9sbSKSdwanoe75CLsRzE
E2cPNvwG4WA/MUgkl3Ao6dMsEPPa8dJK98LaS4BE/m9iFWQiV8t35/FQ0GAFQoJo
PQUs8aAWiI0caAxI0vddxKQ+YlwPw2m1QH6h19wUO7+KLKOtxMFmWoDu/OLdTRM=
=IfkA
-----END PGP SIGNATURE-----



From john.dillon892 at googlemail.com  Mon Aug 19 03:09:07 2013
From: john.dillon892 at googlemail.com (John Dillon)
Date: Mon, 19 Aug 2013 03:09:07 +0000
Subject: [Bitcoin-development] Gavin's post-0.9 TODO list...
In-Reply-To: <20130816141536.GD16201@petertodd.org>
References: <CABsx9T32q8mKgtmsaZgh7nuhHY5cExeW=FiadzXq3jXVP=NBTw@mail.gmail.com>
	<CANEZrP0PEcP339MKRyrHXHCCsP3BxRHT-ZfKRQ7G2Ou+15CD7A@mail.gmail.com>
	<CANEZrP3LAR0erjgmTHruLwPNDdx-OVyb9KK52E6UnmE4ZuBrvQ@mail.gmail.com>
	<20130816140116.GB16201@petertodd.org>
	<20130816141536.GD16201@petertodd.org>
Message-ID: <CAPaL=UXpitBWJOzY-TRGh4kaD2Mt6G92KTt307MfRnzygk6D3A@mail.gmail.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256

On Fri, Aug 16, 2013 at 2:15 PM, Peter Todd <pete at petertodd.org> wrote:
> On Fri, Aug 16, 2013 at 10:01:16AM -0400, Peter Todd wrote:
>> Doing this also makes it more difficult to sybil the network - for
>> instance right now you can create "SPV honeypots" that allow incoming
>> connections only from SPV nodes, thus attracting a disproportionate % of
>> the total SPV population given a relatively small number of nodes. You
>> can then use that to harm SPV nodes by, for instance, making a % of
>> transactions be dropped deterministicly, either by the bloom matching
>> code, or when sent. Users unlucky enough to be surrounded by sybil nodes
>> will have their transactions mysteriously fail to arrive in their
>> wallets, or have their transactions mysteriously never confirm. Given
>> how few full nodes there are, it probably won't take very many honeypots
>> to pull off this attack, especially if you combine it with a
>> simultaneous max connections or bloom io attack to degrade the capacity
>> of honest nodes.
>
> Oh, here's an even better way to do the "tx drop" attack: when you drop
> a transaction, make a fake one that pays the same scriptPubKeys with the
> same amount, and send it to the SPV peer instead. They'll see the
> transaction go through and show up in their wallet, but it'll look like
> it got stuck and never confirmed. They'll soon wind up with a wallet
> full of useless transactions, effectively locking them out of their
> money.

Excellent, and makes a mockery of zero-confirmation transactions to boot.

Can be prevented by passing along txin proofs, but they require the full
transaction, so the effective UTXO set size would go up greatly post-pruning. I
am sure Mike would love to demand that full nodes do this for their peers
though, at least until UTXO commitments are greated, at great cost to full
nodes.

On the other hand, a tx with some txin proofs can be safely relayed by SPV
nodes, an interesting concept. Do the UTXO commitment people have keeping proof
size small in mind?

> Here's another question for you Mike: So does bitcoinj have any
> protections against peers flooding you with useless garbage? It'd be
> easy to rack up a user's data bill for instance by just creating junk
> unconfirmed transactions matching the bloom filter.

That is good too.

I'll bounty 2.5BTC to implement the first attack, and 0.5BTC for the second.
Should be easy to do as a patch to satoshi bitcoin I think. The implementation
must include a RFC3514 compliant service bit to let peers know of the operators
intentions. Along those lines I'll donate 3BTC to adding service bit selection
to DNS seeds.

We should clearly show people the limitations of SPV before they depend too
much on it. Nothing wakes users up like a 21 million BTC transaction in their
wallet.

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.11 (GNU/Linux)

iQEcBAEBCAAGBQJSEYvxAAoJEEWCsU4mNhiPxI8IAJaWJ9s0YG3Ex5h8Dr6oPJ9M
uXTXa/Rt0DqS6mmyD9O80sXfgPbPbQa2rDL6imlqONaWfpXFZl2W9vxRGaZJ9wrr
3KBHzK8lasDOKqlEX92h8ZmQBjw4w5bK/heRLo1PnSZ8ojKn8+My1JvZWOPzF0Ct
tDXXuCE94csKuGRdmdDdVoXqy4XZaMQhHrGbrWVotQs1HzX3iK146GoGaZC0YyBx
cdWg/xDPtAxgb5zf2RSeNHfXeY0wZawe8vBxaS56gCRl54PG7fJvqL+YPcarNb1p
zEmahJjoyQHskjFeDpgEiXnWu3K3JGTSA5GvekWvBbJCcV4o1E6EI6LG0f1SfIs=
=12DC
-----END PGP SIGNATURE-----



From pete at petertodd.org  Mon Aug 19 03:17:12 2013
From: pete at petertodd.org (Peter Todd)
Date: Sun, 18 Aug 2013 23:17:12 -0400
Subject: [Bitcoin-development] Gavin's post-0.9 TODO list...
In-Reply-To: <CAPaL=UXpitBWJOzY-TRGh4kaD2Mt6G92KTt307MfRnzygk6D3A@mail.gmail.com>
References: <CABsx9T32q8mKgtmsaZgh7nuhHY5cExeW=FiadzXq3jXVP=NBTw@mail.gmail.com>
	<CANEZrP0PEcP339MKRyrHXHCCsP3BxRHT-ZfKRQ7G2Ou+15CD7A@mail.gmail.com>
	<CANEZrP3LAR0erjgmTHruLwPNDdx-OVyb9KK52E6UnmE4ZuBrvQ@mail.gmail.com>
	<20130816140116.GB16201@petertodd.org>
	<20130816141536.GD16201@petertodd.org>
	<CAPaL=UXpitBWJOzY-TRGh4kaD2Mt6G92KTt307MfRnzygk6D3A@mail.gmail.com>
Message-ID: <20130819031712.GB443@savin>

On Mon, Aug 19, 2013 at 03:09:07AM +0000, John Dillon wrote:
> That is good too.
> 
> I'll bounty 2.5BTC to implement the first attack, and 0.5BTC for the second.
> Should be easy to do as a patch to satoshi bitcoin I think. The implementation
> must include a RFC3514 compliant service bit to let peers know of the operators
> intentions. Along those lines I'll donate 3BTC to adding service bit selection
> to DNS seeds.

Would you please delay these bounties for a few weeks while things
settle down. The service bit selection is fine, but for the other two a
month would be appreciated.

Thanks

-- 
'peter'[:-1]@petertodd.org
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 490 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130818/eed71233/attachment.sig>

From john.dillon892 at googlemail.com  Mon Aug 19 05:00:18 2013
From: john.dillon892 at googlemail.com (John Dillon)
Date: Mon, 19 Aug 2013 05:00:18 +0000
Subject: [Bitcoin-development] Gavin's post-0.9 TODO list...
In-Reply-To: <20130819031712.GB443@savin>
References: <CABsx9T32q8mKgtmsaZgh7nuhHY5cExeW=FiadzXq3jXVP=NBTw@mail.gmail.com>
	<CANEZrP0PEcP339MKRyrHXHCCsP3BxRHT-ZfKRQ7G2Ou+15CD7A@mail.gmail.com>
	<CANEZrP3LAR0erjgmTHruLwPNDdx-OVyb9KK52E6UnmE4ZuBrvQ@mail.gmail.com>
	<20130816140116.GB16201@petertodd.org>
	<20130816141536.GD16201@petertodd.org>
	<CAPaL=UXpitBWJOzY-TRGh4kaD2Mt6G92KTt307MfRnzygk6D3A@mail.gmail.com>
	<20130819031712.GB443@savin>
Message-ID: <CAPaL=UV=zY9axnq8_i2-A_3VfLueQN_DmFRfKo5H7TCUuHvmPw@mail.gmail.com>

-----BEGIN PGP MESSAGE-----
Version: GnuPG v1.4.11 (GNU/Linux)

hQEMA8xUMVQPvvGFAQf9HL/SN/TZNQuVAjz5ggDzVzpYEzLRkFlgTR2lPURaR28F
G0SgcvJmt1cvucxZRxzSUDCx58Ub16dzx9IBKQ+GDDUXbHGqExfbeIFx96okNsSm
GmRRyORm+L7rdpQ3G8HcfKr1R9YufgaAjsa05eXlXl+fgpYrSBgitY6T3IZ9c0Z7
eF6yjogj5iaDUP2m7xLmRyaQvT/0GdRYk+c2JOH0HGGQ2WWylPMiczJmKmV4jrDd
6asoesEk5kH0IWM2xiY2re+/WkRVeNUlVT7R4+uIzQm/iMzKpIWNiF5a87x3+E9+
+KgJg1a4elKZ6UO4Bvov+Gw65u7q3eunVUYHUKfaLIUBDAO4Pc5vOCVNqAEIAJyT
qFTqTbV9XE+REN/1KVmRLgidcRcxnSFFnkUVUozdMev8oGqoW3iAs8rVr5DuSO/a
FW0UOdI9vBLC51+pdbBNoR9c1saheRbnTks67kLziQmuBFkly6cbLYUyh859pA3K
yjRaRLa1Q6IX76NZTdEc3F7XnfmMBwEFS2t9vSAqhFptAXlhnmKov+g7iJ8oaAWQ
361OcXvxPk6wmWKFroZIo1is0a3izoAcLFB9NWv7BU9I06XB3Gw5gVnzXQexTlV+
KHd8zeJYfc1IaPLdxefhp8tfrJIjAOXq9FmKjgB5Qki8cgCWM1pJIJK0t4XTVxI6
8LU1aldq5Qlond0aIBfS6QFErTFtVYmFLjl8YETcphBZAOSb6Rgudrz9mAL1brOu
fjg9aVTSTjWjFHflRFSpNKVjj+5zS93NMEEaNQmWjeexScw175DVKJoU6lnVFgfk
I7d+Lf5axVwlawZ+euN9YURE1azWUR4OECfDvd6Na8MGs+OwedbWP5/OfDGg2rzN
OG/SK5AxlrshrOmrY7emlMOhYIhd8A+KQ0ghLocTv8JVDvaIEnWkWEq4idhzOv4m
9xFmde45SOxy/PuReDEgGAS3S1IOMMzdkEH8yuzYf2cFzQ0d4PmHNn6NGDo9bEIV
Bjw9pqg5rg+8un14T3+c9ZbfkEvLB+sEQ9uVidg9jE1ZSH/l9XG0stbSnnDmAkYy
DbbA7WDsJ0fxQD1zvnDUlq84I2Fr5RwecOWuCUUUHGXdfe0AnxGL1k96Jd0t3BXj
JbY5fBUbN1QTuwqUSUBhE8uE7gGVZyWHel+DtKxwpIkpQ/CPLxFWJQL8oswN4Re+
CgS1Fs/P2MJdb0ht8cTTdFUEIKYW41eG84Vgpyn7gwd/IE1gPdpsDtoAV8uwIXsJ
WBHtYgO/cH3ofyITOcsm7gfkI3V4T87I3Sjrnk0ipa6fWh8dwhZnG1s5b7lKVgAp
QOqgWdjoP+4/FWCCpo9EVWqRfRU7js/TfuKOBiLDpKEkdmmuCOiMlxe5vt5FUHbq
wT0V5Iian5GcqZvJ/CZWzAxMY+qXu/OziI9Emvz5AA/yWymcHJl2M8RY+L+fVB67
/JSsHl0xQLHehKIFZKuTacy87pRHCoq7vA72lm+XCqC7+RojzPwODia7ShCfrZe2
YctdU/VWVMMgkpLcGxRMRFc2Rxbbge3kEQCt+b7lL7HVq0vsBoF4g3X4kzLxxyeD
JiR8PHknlWOjy5KgseKzTCt3sygvyJZrEPQ5SiBtoAkLgmEzkOxiy1DHrj59soM9
QY7L3XTLLOya4daL5+iZjZXm28JNXAYycAu3fyXx7rnbL6m/gcGjJZiuwwajMvmF
WvjbJBm9f5qOxK87ShnPj2ZwQ1w1nnz7i5oOdtELwUb96uMFegNDRSfMNpN4pmTh
2Qpffp9QZMEOxE+a7SnNjq5xG4S3qTnhdhTzQL5sIC+yJZ7L2gdbbrjdud2gcKRc
yQIkst51OIV6/xJ65AD6qzIcifpLm+u5/t6eVGLvw0G8u3gFHgelM1kPfX8iYDOR
CTDnJxx30/GXEvqD4/nCm5JytgolzH/PilBME1w2dPf845HebA0XCAhSoqdoLCvF
7jrllVCh/PDlK40XbO/cDYgXF7deDbgXVF2OBGc6qqAho3VE83ebR1wQWlUOyPIo
ScQyePNu500Yy/GUnwBK7029N4r6R1RBDn/rTsD/2w==
=6OvE
-----END PGP MESSAGE-----



From john.dillon892 at googlemail.com  Mon Aug 19 05:34:07 2013
From: john.dillon892 at googlemail.com (John Dillon)
Date: Mon, 19 Aug 2013 05:34:07 +0000
Subject: [Bitcoin-development] Gavin's post-0.9 TODO list...
In-Reply-To: <CAPaL=UV=zY9axnq8_i2-A_3VfLueQN_DmFRfKo5H7TCUuHvmPw@mail.gmail.com>
References: <CABsx9T32q8mKgtmsaZgh7nuhHY5cExeW=FiadzXq3jXVP=NBTw@mail.gmail.com>
	<CANEZrP0PEcP339MKRyrHXHCCsP3BxRHT-ZfKRQ7G2Ou+15CD7A@mail.gmail.com>
	<CANEZrP3LAR0erjgmTHruLwPNDdx-OVyb9KK52E6UnmE4ZuBrvQ@mail.gmail.com>
	<20130816140116.GB16201@petertodd.org>
	<20130816141536.GD16201@petertodd.org>
	<CAPaL=UXpitBWJOzY-TRGh4kaD2Mt6G92KTt307MfRnzygk6D3A@mail.gmail.com>
	<20130819031712.GB443@savin>
	<CAPaL=UV=zY9axnq8_i2-A_3VfLueQN_DmFRfKo5H7TCUuHvmPw@mail.gmail.com>
Message-ID: <CAPaL=UXYzEVSr9kU1uVoy=KgORzBsWoKkobR6o10jO96wxxHMQ@mail.gmail.com>

My apologies, that was for Peter

On Mon, Aug 19, 2013 at 5:00 AM, John Dillon
<john.dillon892 at googlemail.com> wrote:
> -----BEGIN PGP MESSAGE-----
> Version: GnuPG v1.4.11 (GNU/Linux)
>
> hQEMA8xUMVQPvvGFAQf9HL/SN/TZNQuVAjz5ggDzVzpYEzLRkFlgTR2lPURaR28F
> G0SgcvJmt1cvucxZRxzSUDCx58Ub16dzx9IBKQ+GDDUXbHGqExfbeIFx96okNsSm
> GmRRyORm+L7rdpQ3G8HcfKr1R9YufgaAjsa05eXlXl+fgpYrSBgitY6T3IZ9c0Z7
> eF6yjogj5iaDUP2m7xLmRyaQvT/0GdRYk+c2JOH0HGGQ2WWylPMiczJmKmV4jrDd
> 6asoesEk5kH0IWM2xiY2re+/WkRVeNUlVT7R4+uIzQm/iMzKpIWNiF5a87x3+E9+
> +KgJg1a4elKZ6UO4Bvov+Gw65u7q3eunVUYHUKfaLIUBDAO4Pc5vOCVNqAEIAJyT
> qFTqTbV9XE+REN/1KVmRLgidcRcxnSFFnkUVUozdMev8oGqoW3iAs8rVr5DuSO/a
> FW0UOdI9vBLC51+pdbBNoR9c1saheRbnTks67kLziQmuBFkly6cbLYUyh859pA3K
> yjRaRLa1Q6IX76NZTdEc3F7XnfmMBwEFS2t9vSAqhFptAXlhnmKov+g7iJ8oaAWQ
> 361OcXvxPk6wmWKFroZIo1is0a3izoAcLFB9NWv7BU9I06XB3Gw5gVnzXQexTlV+
> KHd8zeJYfc1IaPLdxefhp8tfrJIjAOXq9FmKjgB5Qki8cgCWM1pJIJK0t4XTVxI6
> 8LU1aldq5Qlond0aIBfS6QFErTFtVYmFLjl8YETcphBZAOSb6Rgudrz9mAL1brOu
> fjg9aVTSTjWjFHflRFSpNKVjj+5zS93NMEEaNQmWjeexScw175DVKJoU6lnVFgfk
> I7d+Lf5axVwlawZ+euN9YURE1azWUR4OECfDvd6Na8MGs+OwedbWP5/OfDGg2rzN
> OG/SK5AxlrshrOmrY7emlMOhYIhd8A+KQ0ghLocTv8JVDvaIEnWkWEq4idhzOv4m
> 9xFmde45SOxy/PuReDEgGAS3S1IOMMzdkEH8yuzYf2cFzQ0d4PmHNn6NGDo9bEIV
> Bjw9pqg5rg+8un14T3+c9ZbfkEvLB+sEQ9uVidg9jE1ZSH/l9XG0stbSnnDmAkYy
> DbbA7WDsJ0fxQD1zvnDUlq84I2Fr5RwecOWuCUUUHGXdfe0AnxGL1k96Jd0t3BXj
> JbY5fBUbN1QTuwqUSUBhE8uE7gGVZyWHel+DtKxwpIkpQ/CPLxFWJQL8oswN4Re+
> CgS1Fs/P2MJdb0ht8cTTdFUEIKYW41eG84Vgpyn7gwd/IE1gPdpsDtoAV8uwIXsJ
> WBHtYgO/cH3ofyITOcsm7gfkI3V4T87I3Sjrnk0ipa6fWh8dwhZnG1s5b7lKVgAp
> QOqgWdjoP+4/FWCCpo9EVWqRfRU7js/TfuKOBiLDpKEkdmmuCOiMlxe5vt5FUHbq
> wT0V5Iian5GcqZvJ/CZWzAxMY+qXu/OziI9Emvz5AA/yWymcHJl2M8RY+L+fVB67
> /JSsHl0xQLHehKIFZKuTacy87pRHCoq7vA72lm+XCqC7+RojzPwODia7ShCfrZe2
> YctdU/VWVMMgkpLcGxRMRFc2Rxbbge3kEQCt+b7lL7HVq0vsBoF4g3X4kzLxxyeD
> JiR8PHknlWOjy5KgseKzTCt3sygvyJZrEPQ5SiBtoAkLgmEzkOxiy1DHrj59soM9
> QY7L3XTLLOya4daL5+iZjZXm28JNXAYycAu3fyXx7rnbL6m/gcGjJZiuwwajMvmF
> WvjbJBm9f5qOxK87ShnPj2ZwQ1w1nnz7i5oOdtELwUb96uMFegNDRSfMNpN4pmTh
> 2Qpffp9QZMEOxE+a7SnNjq5xG4S3qTnhdhTzQL5sIC+yJZ7L2gdbbrjdud2gcKRc
> yQIkst51OIV6/xJ65AD6qzIcifpLm+u5/t6eVGLvw0G8u3gFHgelM1kPfX8iYDOR
> CTDnJxx30/GXEvqD4/nCm5JytgolzH/PilBME1w2dPf845HebA0XCAhSoqdoLCvF
> 7jrllVCh/PDlK40XbO/cDYgXF7deDbgXVF2OBGc6qqAho3VE83ebR1wQWlUOyPIo
> ScQyePNu500Yy/GUnwBK7029N4r6R1RBDn/rTsD/2w==
> =6OvE
> -----END PGP MESSAGE-----



From mark at monetize.io  Mon Aug 19 05:11:40 2013
From: mark at monetize.io (Mark Friedenbach)
Date: Sun, 18 Aug 2013 22:11:40 -0700
Subject: [Bitcoin-development] Gavin's post-0.9 TODO list...
In-Reply-To: <CAPaL=UXpitBWJOzY-TRGh4kaD2Mt6G92KTt307MfRnzygk6D3A@mail.gmail.com>
References: <CABsx9T32q8mKgtmsaZgh7nuhHY5cExeW=FiadzXq3jXVP=NBTw@mail.gmail.com>
	<CANEZrP0PEcP339MKRyrHXHCCsP3BxRHT-ZfKRQ7G2Ou+15CD7A@mail.gmail.com>
	<CANEZrP3LAR0erjgmTHruLwPNDdx-OVyb9KK52E6UnmE4ZuBrvQ@mail.gmail.com>
	<20130816140116.GB16201@petertodd.org>
	<20130816141536.GD16201@petertodd.org>
	<CAPaL=UXpitBWJOzY-TRGh4kaD2Mt6G92KTt307MfRnzygk6D3A@mail.gmail.com>
Message-ID: <5211A90C.6070509@monetize.io>


-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1


On 8/18/13 8:09 PM, John Dillon wrote:
> On the other hand, a tx with some txin proofs can be safely relayed by SPV
> nodes, an interesting concept. Do the UTXO commitment people have
keeping proof
> size small in mind?
More than a kilobyte, probably less than a few tens of kilobytes. It
depends on parameters (branching factor, script vs hash(script)) that
are tweakable with time/space and long-term/short-term tradeoffs.
-----BEGIN PGP SIGNATURE-----
Version: GnuPG/MacGPG2 v2.0.19 (Darwin)
Comment: GPGTools - http://gpgtools.org
Comment: Using GnuPG with Thunderbird - http://www.enigmail.net/

iQIcBAEBAgAGBQJSEakMAAoJEAdzVfsmodw4B9wQAIu82nxMAyMiTpFcWW6v0fQ9
26bzOznyIhzAlFUeCXvgwtqoxjRcheLOnsFsAr0TLdLYrx00o4+MS0GepV40gEpd
Ds/itvAnW8aWdCls0qy1hljWrsp8R3IfXWchXy13kjOhTIx8JaALeHEzOCsJVxCf
nWrV7UNLRO1eXhLUnFLnZ3/HdljMZnLqLexSGXorn4I2zwg5HGNMJxIenU3vDj8s
68k4rSk/eUptG97ZmJxCysn7nt5F1cxRutsVOPxsC/4+FptMYf9YJRJDNpvttYyl
ztI2xV+ARfEvSZs0lqGAcpvKwVV4IvZDGXhUCiS6LQ99tvMid4kjIGYPwlyK6SJW
LoYVbvjbauEIPn4URW8XilMB5EEJisr5/7ZV/aDLEFcBA/is5ePuQioo/81yOWUw
k5PghJ/TBMBQhxOGCz86onCI1YwrWfhu2sz6xNIHm9lbyZQcw3N/ai77FQqxxkxp
iBbIAvhk4sQ7lPt4QHmiL4isPzaiScKVTjvzfc5hAHSmu6xQysf8VA/SwUSgAJZB
iUPYRz5URaw8a/WDlo7YA6BRV/l7RloEcWGs6br3jVYxtJSaxqDwwrUV3SdDtzBR
uiE1OVPp8ihY3OJbnZkbvy3lXXlLjwrLVwMUgprhUo793QtktZH+O0V+StcGKLGD
4rdK6Z3C8Wx9FY2fvkBy
=HZdx
-----END PGP SIGNATURE-----




From gmaxwell at gmail.com  Mon Aug 19 06:38:46 2013
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Sun, 18 Aug 2013 23:38:46 -0700
Subject: [Bitcoin-development] CoinWitness: Really Really ultimate
	blockchain compression
Message-ID: <CAAS2fgRwY1aFySYbdEr8Rh0pGWb0G1FNOqh7TzhG8dZw9-CVuA@mail.gmail.com>

I've posted a somewhat blue-skies idea on troll^wBitcointalk that some
here might find interesting:

https://bitcointalk.org/index.php?topic=277389.0



From mike at plan99.net  Mon Aug 19 09:16:12 2013
From: mike at plan99.net (Mike Hearn)
Date: Mon, 19 Aug 2013 11:16:12 +0200
Subject: [Bitcoin-development] Gavin's post-0.9 TODO list...
In-Reply-To: <CAPaL=UXpitBWJOzY-TRGh4kaD2Mt6G92KTt307MfRnzygk6D3A@mail.gmail.com>
References: <CABsx9T32q8mKgtmsaZgh7nuhHY5cExeW=FiadzXq3jXVP=NBTw@mail.gmail.com>
	<CANEZrP0PEcP339MKRyrHXHCCsP3BxRHT-ZfKRQ7G2Ou+15CD7A@mail.gmail.com>
	<CANEZrP3LAR0erjgmTHruLwPNDdx-OVyb9KK52E6UnmE4ZuBrvQ@mail.gmail.com>
	<20130816140116.GB16201@petertodd.org>
	<20130816141536.GD16201@petertodd.org>
	<CAPaL=UXpitBWJOzY-TRGh4kaD2Mt6G92KTt307MfRnzygk6D3A@mail.gmail.com>
Message-ID: <CANEZrP297GJYJDVc939RxSeiKu1bWeCy3RZiN+=LPpaqyvqjFQ@mail.gmail.com>

On Mon, Aug 19, 2013 at 5:09 AM, John Dillon
<john.dillon892 at googlemail.com>wrote:

> > Here's another question for you Mike: So does bitcoinj have any
> > protections against peers flooding you with useless garbage? It'd be
> > easy to rack up a user's data bill for instance by just creating junk
> > unconfirmed transactions matching the bloom filter.
>

Unconfirmed transactions that are received show up as unspendable and in
most wallets they have a little graphic that changes as more peers announce
the tx. So if a peer sent non-existent transactions then they'd allow show
up as seen by only one peer, which would look different to how normal
broadcast transactions show up.

Whether users really notice this graphic or understand what it means is
debatable, of course, but all Bitcoin wallets have that problem. I've yet
to see any that would successfully communicate the notion of confidence to
new, untrained users. That's why the default is to not let you spend
unconfirmed transactions, unless they were created by yourself (you're
allowed to spend change).

bitcoinj does not attempt to handle DoS attacks by malicious remote peers
today, because such an attack has never been observed, has no obvious
profit motive and as you don't get to choose which nodes the wallets
connect to it'd be difficult to pull off. Unless you control the users
internet connection of course, but that's a well known caveat which is
documented on the website.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130819/8da38df9/attachment.html>

From mike at plan99.net  Mon Aug 19 09:29:55 2013
From: mike at plan99.net (Mike Hearn)
Date: Mon, 19 Aug 2013 11:29:55 +0200
Subject: [Bitcoin-development] Bloom io attack effectiveness
In-Reply-To: <20130819001357.GA4281@savin>
References: <20130819001357.GA4281@savin>
Message-ID: <CANEZrP1hdnEE9HsKoSctbQeDxpXce71Y96C-6Jf+xZN6ZMhASg@mail.gmail.com>

On Mon, Aug 19, 2013 at 2:13 AM, Peter Todd <pete at petertodd.org> wrote:

> In any case given that SPV peers don't contribute back to the network
> they should obviously be heavily deprioritized and served only with
> whatever resources a node has spare.


Well, I'm glad we're making progress towards this kind of model :)

If I had to write a scoring function for node importance, I'd start by
making nodes I connected to more important than nodes that connected to me.
That should prevent the kind of attacks you're talking about. You can then
score within those subsets with greater subtlety, like using how long the
connection has been active (or extending that with signed timestamps).

This doesn't have any in-built bias against SPV nodes, which is probably
very hard to technically implement anyway. But it encodes the intuitive
notion that nodes I selected myself are less likely to be DoS attackers
than nodes which connected to me.

But the trick is to implement the prioritisation code. The usual way to do
this is to have a thread pool that pops requests off a queue. You can
either have multiple queues for different priority bands, or code that
locks the queue and re-orders it when something new is added. I tend to
find the multiple queues approach simpler, especially, it's simpler to
export statistics about that via RPC that make it easy to understand what's
going on underneath the hood.

So IMHO a patch to address I/O exhaustion should look something like this:

   1. Add a thread pool of 2-3 threads (to give the kernel room to overlap
   IO) which take in CBlock load requests and then do the load/parse/filter in
   the background.

   2. Each thread starts by blocking on a counting semaphore which
   represents the total number of requests.

   3. The network thread message loop is adjusted so it can receive some
   kind of futures/callbacks/closure object (I guess Boost provides this,
   alternatively we could switch to using C++11). The closures should also
   have the score of the node they were created for (note: score not a CNode*
   as that complicates memory management).

   4. At the start of the network loop a thread-local (or global) variable
   is set that contains the nodes current score, which is just an n-of-m score
   where M is the total number of connected nodes and N is the ranked
   importance. At that point any code that needs to prioritise nodes off
   against each other can just check that variable whilst doing work. The
   network loop looks at which file descriptors are select()able and their
   scores, which closures are pending execution and their scores, then decides
   whether to handle new network data or run a closure. If there is a draw
   between the scores, closures take priority to reduce memory pressure and
   lower latency.

   5. Handling of "getdata" then ends up calling a function that requests a
   load of a block from disk, and runs a closure when it's finished. The
   closure inherits the nodes current score, of course, so when the block load
   is completed execution of the rest of the getdata handling takes priority
   over handling new traffic from network nodes. When the closure executes, it
   writes the loaded/filtered data out over the network socket and deletes

The function that takes a CBlockIndex and yields a future<CBlock> or
closure or whatever would internally lock the job queue(s), add the new
task and then do a stable sort of the queue using the scoring function,
which in this case would simply use the node score as the job score.

It's a fair amount of work, but should ensure that "good" nodes outcompete
"bad" nodes for disk IO. Any other disk IO operations can be done in the
same way. Note that the bulk of LevelDB write work is already handled on a
background thread. The foreground thread only writes a log entry to disk
and updates some in-memory data structures.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130819/c38baf67/attachment.html>

From jgarzik at bitpay.com  Mon Aug 19 16:27:01 2013
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Mon, 19 Aug 2013 12:27:01 -0400
Subject: [Bitcoin-development] Proposal: remove "getwork" RPC from bitcoind
Message-ID: <CAJHLa0MnnWw=qiYC0nJcY=BdTDcAjGtraJ+kazoG7_bHW-HBtw@mail.gmail.com>

Pull request https://github.com/bitcoin/bitcoin/pull/2905 proposes to
remove "getwork" RPC from bitcoind: https://en.bitcoin.it/wiki/Getwork

On mainnet, almost everybody uses a pool (and therefore, not "getwork"
directly to bitcoind).  Those few who solo mine use a pool server to
talk to bitcoind via "getblocktemplate" or other means.  Tests show
that attempts to solo mine on mainnet via "getwork" lead to delays and
problems.

On testnet, getwork has a better chance of continuing to work.
Nevertheless, the same tools (open source pool servers or p2pool) are
available for testnet, obviating the continued need to support
getwork.

However, at one time, getwork to bitcoind was widely used.  I wanted
to poke the audience, to gauge response to removing "getwork."  If a
driving use case remains of which we're unaware, speak up, please.  We
don't want to break anybody needlessly.

-- 
Jeff Garzik
Senior Software Engineer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From frankf44 at gmail.com  Mon Aug 19 20:09:41 2013
From: frankf44 at gmail.com (Frank F)
Date: Mon, 19 Aug 2013 15:09:41 -0500
Subject: [Bitcoin-development] Proposal: remove "getwork" RPC from
	bitcoind
In-Reply-To: <CAJHLa0MnnWw=qiYC0nJcY=BdTDcAjGtraJ+kazoG7_bHW-HBtw@mail.gmail.com>
References: <CAJHLa0MnnWw=qiYC0nJcY=BdTDcAjGtraJ+kazoG7_bHW-HBtw@mail.gmail.com>
Message-ID: <CALxyHsXoCqL8dNXeayibfbR7-JU6Ke19gJJ1fToboULdUa155Q@mail.gmail.com>

I strongly object to removing the only mechanism that allows anyone to say
that bitcoin is p2p, in the truest sense of the word. Moves like this that
favor only the pool operators and private mining interests are signs that
bitcoin is headed towards a monopoly/cartel model, and that would be a
tragic outcome for something that holds a great promise. Nobody knows what
mining will look like in the future, and denying the individual novice the
ability to mine at a small scale, even if we may think it is inefficient
now, is not a good path to start down.

If there are technical problems with getwork, maybe they should be
addressed and fixed instead of outright abandoned.


On Mon, Aug 19, 2013 at 11:27 AM, Jeff Garzik <jgarzik at bitpay.com> wrote:

> Pull request https://github.com/bitcoin/bitcoin/pull/2905 proposes to
> remove "getwork" RPC from bitcoind: https://en.bitcoin.it/wiki/Getwork
>
> On mainnet, almost everybody uses a pool (and therefore, not "getwork"
> directly to bitcoind).  Those few who solo mine use a pool server to
> talk to bitcoind via "getblocktemplate" or other means.  Tests show
> that attempts to solo mine on mainnet via "getwork" lead to delays and
> problems.
>
> On testnet, getwork has a better chance of continuing to work.
> Nevertheless, the same tools (open source pool servers or p2pool) are
> available for testnet, obviating the continued need to support
> getwork.
>
> However, at one time, getwork to bitcoind was widely used.  I wanted
> to poke the audience, to gauge response to removing "getwork."  If a
> driving use case remains of which we're unaware, speak up, please.  We
> don't want to break anybody needlessly.
>
> --
> Jeff Garzik
> Senior Software Engineer and open source evangelist
> BitPay, Inc.      https://bitpay.com/
>
>
> ------------------------------------------------------------------------------
> Introducing Performance Central, a new site from SourceForge and
> AppDynamics. Performance Central is your source for news, insights,
> analysis and resources for efficient Application Performance Management.
> Visit us today!
> http://pubads.g.doubleclick.net/gampad/clk?id=48897511&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>



-- 
*MONEY IS OVER!*
                                IF YOU WANT IT<http://www.zeitgeistmovie.com/>
=====================================================
The causes of my servitude can be traced to the tyranny of money.
-Serj Tankian
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130819/8e457133/attachment.html>

From luke at dashjr.org  Mon Aug 19 20:13:00 2013
From: luke at dashjr.org (Luke-Jr)
Date: Mon, 19 Aug 2013 20:13:00 +0000
Subject: [Bitcoin-development] Proposal: remove "getwork" RPC from
	bitcoind
In-Reply-To: <CALxyHsXoCqL8dNXeayibfbR7-JU6Ke19gJJ1fToboULdUa155Q@mail.gmail.com>
References: <CAJHLa0MnnWw=qiYC0nJcY=BdTDcAjGtraJ+kazoG7_bHW-HBtw@mail.gmail.com>
	<CALxyHsXoCqL8dNXeayibfbR7-JU6Ke19gJJ1fToboULdUa155Q@mail.gmail.com>
Message-ID: <201308192013.02806.luke@dashjr.org>

On Monday, August 19, 2013 8:09:41 PM Frank F wrote:
> I strongly object to removing the only mechanism that allows anyone to say
> that bitcoin is p2p, in the truest sense of the word. Moves like this that
> favor only the pool operators and private mining interests are signs that
> bitcoin is headed towards a monopoly/cartel model, and that would be a
> tragic outcome for something that holds a great promise. Nobody knows what
> mining will look like in the future, and denying the individual novice the
> ability to mine at a small scale, even if we may think it is inefficient
> now, is not a good path to start down.
> 
> If there are technical problems with getwork, maybe they should be
> addressed and fixed instead of outright abandoned.

You missed getblocktemplate. It does everything getwork did and more.

Individual solo miners aren't being locked out at all. This is just removal of 
a protocol that has been obsolete for well over a year now.

Luke



From pieter.wuille at gmail.com  Mon Aug 19 20:14:36 2013
From: pieter.wuille at gmail.com (Pieter Wuille)
Date: Mon, 19 Aug 2013 22:14:36 +0200
Subject: [Bitcoin-development] Proposal: remove "getwork" RPC from
	bitcoind
In-Reply-To: <CALxyHsXoCqL8dNXeayibfbR7-JU6Ke19gJJ1fToboULdUa155Q@mail.gmail.com>
References: <CAJHLa0MnnWw=qiYC0nJcY=BdTDcAjGtraJ+kazoG7_bHW-HBtw@mail.gmail.com>
	<CALxyHsXoCqL8dNXeayibfbR7-JU6Ke19gJJ1fToboULdUa155Q@mail.gmail.com>
Message-ID: <CAPg+sBjMdZfHpZrvHwMx6oQsS0yJaXVjTnyRwf6VCdnWTHQZaw@mail.gmail.com>

On Mon, Aug 19, 2013 at 10:09 PM, Frank F <frankf44 at gmail.com> wrote:
> I strongly object to removing the only mechanism that allows anyone to say
> that bitcoin is p2p, in the truest sense of the word. Moves like this that
> favor only the pool operators and private mining interests are signs that
> bitcoin is headed towards a monopoly/cartel model, and that would be a
> tragic outcome for something that holds a great promise. Nobody knows what
> mining will look like in the future, and denying the individual novice the
> ability to mine at a small scale, even if we may think it is inefficient
> now, is not a good path to start down.
>
> If there are technical problems with getwork, maybe they should be addressed
> and fixed instead of outright abandoned.

They were addressed and fixed in a successor API, getblocktemplate.
It's even more decentralization-friendly, as it allows the caller to
see what transactions the daemon is trying to put into a block, and
even modify it.

The suggestion here is not to remove functionality - only to remove an
obsolete API for doing so.

-- 
Pieter



From bitcoin-list at bluematt.me  Mon Aug 19 20:15:08 2013
From: bitcoin-list at bluematt.me (Matt Corallo)
Date: Mon, 19 Aug 2013 16:15:08 -0400
Subject: [Bitcoin-development] Proposal: remove "getwork" RPC from
 bitcoind
In-Reply-To: <CAJHLa0MnnWw=qiYC0nJcY=BdTDcAjGtraJ+kazoG7_bHW-HBtw@mail.gmail.com>
References: <CAJHLa0MnnWw=qiYC0nJcY=BdTDcAjGtraJ+kazoG7_bHW-HBtw@mail.gmail.com>
Message-ID: <1376943308.27037.7.camel@localhost.localdomain>

ACK, I see no reason to leave broken things in that a) arent necessary
and b) no one has the developer resources to fix.

Matt

On Mon, 2013-08-19 at 12:27 -0400, Jeff Garzik wrote:
> Pull request https://github.com/bitcoin/bitcoin/pull/2905 proposes to
> remove "getwork" RPC from bitcoind: https://en.bitcoin.it/wiki/Getwork
> 
> On mainnet, almost everybody uses a pool (and therefore, not "getwork"
> directly to bitcoind).  Those few who solo mine use a pool server to
> talk to bitcoind via "getblocktemplate" or other means.  Tests show
> that attempts to solo mine on mainnet via "getwork" lead to delays and
> problems.
> 
> On testnet, getwork has a better chance of continuing to work.
> Nevertheless, the same tools (open source pool servers or p2pool) are
> available for testnet, obviating the continued need to support
> getwork.
> 
> However, at one time, getwork to bitcoind was widely used.  I wanted
> to poke the audience, to gauge response to removing "getwork."  If a
> driving use case remains of which we're unaware, speak up, please.  We
> don't want to break anybody needlessly.
> 





From frankf44 at gmail.com  Mon Aug 19 20:16:17 2013
From: frankf44 at gmail.com (Frank F)
Date: Mon, 19 Aug 2013 15:16:17 -0500
Subject: [Bitcoin-development] Proposal: remove "getwork" RPC from
	bitcoind
In-Reply-To: <CAPg+sBjMdZfHpZrvHwMx6oQsS0yJaXVjTnyRwf6VCdnWTHQZaw@mail.gmail.com>
References: <CAJHLa0MnnWw=qiYC0nJcY=BdTDcAjGtraJ+kazoG7_bHW-HBtw@mail.gmail.com>
	<CALxyHsXoCqL8dNXeayibfbR7-JU6Ke19gJJ1fToboULdUa155Q@mail.gmail.com>
	<CAPg+sBjMdZfHpZrvHwMx6oQsS0yJaXVjTnyRwf6VCdnWTHQZaw@mail.gmail.com>
Message-ID: <CALxyHsV=LWY+TzZG-XBQ6HNhxFEezjFhW++aJ7oVbVGEJWW0nw@mail.gmail.com>

Thank you for setting me straight. Please forgive my ignorance.


On Mon, Aug 19, 2013 at 3:14 PM, Pieter Wuille <pieter.wuille at gmail.com>wrote:

> On Mon, Aug 19, 2013 at 10:09 PM, Frank F <frankf44 at gmail.com> wrote:
> > I strongly object to removing the only mechanism that allows anyone to
> say
> > that bitcoin is p2p, in the truest sense of the word. Moves like this
> that
> > favor only the pool operators and private mining interests are signs that
> > bitcoin is headed towards a monopoly/cartel model, and that would be a
> > tragic outcome for something that holds a great promise. Nobody knows
> what
> > mining will look like in the future, and denying the individual novice
> the
> > ability to mine at a small scale, even if we may think it is inefficient
> > now, is not a good path to start down.
> >
> > If there are technical problems with getwork, maybe they should be
> addressed
> > and fixed instead of outright abandoned.
>
> They were addressed and fixed in a successor API, getblocktemplate.
> It's even more decentralization-friendly, as it allows the caller to
> see what transactions the daemon is trying to put into a block, and
> even modify it.
>
> The suggestion here is not to remove functionality - only to remove an
> obsolete API for doing so.
>
> --
> Pieter
>



-- 
*MONEY IS OVER!*
                                IF YOU WANT IT<http://www.zeitgeistmovie.com/>
=====================================================
The causes of my servitude can be traced to the tyranny of money.
-Serj Tankian
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130819/0bf724a7/attachment.html>

From gmaxwell at gmail.com  Mon Aug 19 20:16:23 2013
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Mon, 19 Aug 2013 13:16:23 -0700
Subject: [Bitcoin-development] Proposal: remove "getwork" RPC from
	bitcoind
In-Reply-To: <CALxyHsXoCqL8dNXeayibfbR7-JU6Ke19gJJ1fToboULdUa155Q@mail.gmail.com>
References: <CAJHLa0MnnWw=qiYC0nJcY=BdTDcAjGtraJ+kazoG7_bHW-HBtw@mail.gmail.com>
	<CALxyHsXoCqL8dNXeayibfbR7-JU6Ke19gJJ1fToboULdUa155Q@mail.gmail.com>
Message-ID: <CAAS2fgQRcfbe+3A6_t4s8BJRaWwmLdKkGG1ePmG+Epm5W6CxdQ@mail.gmail.com>

On Mon, Aug 19, 2013 at 1:09 PM, Frank F <frankf44 at gmail.com> wrote:
> If there are technical problems with getwork, maybe they should be addressed
> and fixed instead of outright abandoned.

They have been, resulting in a replacement called "getblocktemplate"
which (presumably) almost everyone talking to bitcoin(d|-qt) has been
using for a long time.

I think removing the ability to mine in the stock package would be
regrettable, but to be honest we already don't have it for the
mainnet. I think we should do as Jeff suggests and remove getwork. But
I think we should also package along a proper getblocktemplate miner
to remove any doubt that we're providing a full network node here.  (I
note that the choice of miner is also easy:  Regardless of people's
preferences which way or another, AFAIK only luke's bfgminer stuff can
mine directly against bitcoin getblocktemplate with no pool in the
middle.  It also supports a huge variety of hardware, and a superset
of our target platforms)



From frankf44 at gmail.com  Mon Aug 19 20:18:06 2013
From: frankf44 at gmail.com (Frank F)
Date: Mon, 19 Aug 2013 15:18:06 -0500
Subject: [Bitcoin-development] Proposal: remove "getwork" RPC from
	bitcoind
In-Reply-To: <CAAS2fgQRcfbe+3A6_t4s8BJRaWwmLdKkGG1ePmG+Epm5W6CxdQ@mail.gmail.com>
References: <CAJHLa0MnnWw=qiYC0nJcY=BdTDcAjGtraJ+kazoG7_bHW-HBtw@mail.gmail.com>
	<CALxyHsXoCqL8dNXeayibfbR7-JU6Ke19gJJ1fToboULdUa155Q@mail.gmail.com>
	<CAAS2fgQRcfbe+3A6_t4s8BJRaWwmLdKkGG1ePmG+Epm5W6CxdQ@mail.gmail.com>
Message-ID: <CALxyHsVtAqWtS6supU9L0Y7RgD0AKychQFQMTcf2fvDteJ4B3A@mail.gmail.com>

This sounds like an ideal compromise.


On Mon, Aug 19, 2013 at 3:16 PM, Gregory Maxwell <gmaxwell at gmail.com> wrote:

> On Mon, Aug 19, 2013 at 1:09 PM, Frank F <frankf44 at gmail.com> wrote:
> > If there are technical problems with getwork, maybe they should be
> addressed
> > and fixed instead of outright abandoned.
>
> They have been, resulting in a replacement called "getblocktemplate"
> which (presumably) almost everyone talking to bitcoin(d|-qt) has been
> using for a long time.
>
> I think removing the ability to mine in the stock package would be
> regrettable, but to be honest we already don't have it for the
> mainnet. I think we should do as Jeff suggests and remove getwork. But
> I think we should also package along a proper getblocktemplate miner
> to remove any doubt that we're providing a full network node here.  (I
> note that the choice of miner is also easy:  Regardless of people's
> preferences which way or another, AFAIK only luke's bfgminer stuff can
> mine directly against bitcoin getblocktemplate with no pool in the
> middle.  It also supports a huge variety of hardware, and a superset
> of our target platforms)
>



-- 
*MONEY IS OVER!*
                                IF YOU WANT IT<http://www.zeitgeistmovie.com/>
=====================================================
The causes of my servitude can be traced to the tyranny of money.
-Serj Tankian
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130819/dbbada07/attachment.html>

From gmaxwell at gmail.com  Mon Aug 19 20:23:16 2013
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Mon, 19 Aug 2013 13:23:16 -0700
Subject: [Bitcoin-development] Proposal: remove "getwork" RPC from
	bitcoind
In-Reply-To: <CAAS2fgQRcfbe+3A6_t4s8BJRaWwmLdKkGG1ePmG+Epm5W6CxdQ@mail.gmail.com>
References: <CAJHLa0MnnWw=qiYC0nJcY=BdTDcAjGtraJ+kazoG7_bHW-HBtw@mail.gmail.com>
	<CALxyHsXoCqL8dNXeayibfbR7-JU6Ke19gJJ1fToboULdUa155Q@mail.gmail.com>
	<CAAS2fgQRcfbe+3A6_t4s8BJRaWwmLdKkGG1ePmG+Epm5W6CxdQ@mail.gmail.com>
Message-ID: <CAAS2fgT_9KX4tEOqehwBf=TCV1c92b3W2ADKLqwkzqvcyWseUw@mail.gmail.com>

On Mon, Aug 19, 2013 at 1:16 PM, Gregory Maxwell <gmaxwell at gmail.com> wrote:
> I think removing the ability to mine in the stock package would be
> regrettable,

I am naughty and should clarify.  I had ass.u.me.d that Jeff's patch
also removed the internal CPU miner, because doing so is necessary for
actually getting rid of most of the getwork code. It doesn't actually.

Though this doesn't change the fact that the internal miner is mostly
a pretext for integrated mining.  Since it only really works on
testnet it also means our testnet testing using it is not a good test
of the actual production software.  I'd rather remove the internal
miner too, getting rid of the extra code and complexity, and package
up a GBT miner which would actually be usable on the mainnet.



From wtogami at gmail.com  Mon Aug 19 20:33:20 2013
From: wtogami at gmail.com (Warren Togami Jr.)
Date: Mon, 19 Aug 2013 10:33:20 -1000
Subject: [Bitcoin-development] Proposal: remove "getwork" RPC from
	bitcoind
In-Reply-To: <CAAS2fgT_9KX4tEOqehwBf=TCV1c92b3W2ADKLqwkzqvcyWseUw@mail.gmail.com>
References: <CAJHLa0MnnWw=qiYC0nJcY=BdTDcAjGtraJ+kazoG7_bHW-HBtw@mail.gmail.com>
	<CALxyHsXoCqL8dNXeayibfbR7-JU6Ke19gJJ1fToboULdUa155Q@mail.gmail.com>
	<CAAS2fgQRcfbe+3A6_t4s8BJRaWwmLdKkGG1ePmG+Epm5W6CxdQ@mail.gmail.com>
	<CAAS2fgT_9KX4tEOqehwBf=TCV1c92b3W2ADKLqwkzqvcyWseUw@mail.gmail.com>
Message-ID: <CAEz79PpZ8a1vByinFz03efHCS71AtnFCjkXtK7My6z=QG=F92A@mail.gmail.com>

FWIW, Litecoin 0.8.x entirely removed the internal miner and we warned
people that getwork will be removed in the next major version.  Pooler's
CPU minerd which supports both sha256d and scrypt recently grew stratum
support.  Perhaps he could be convinced to add GBT support too, which would
help this goal of completely removing the internal miner and getwork.

Warren


On Mon, Aug 19, 2013 at 10:23 AM, Gregory Maxwell <gmaxwell at gmail.com>wrote:

> On Mon, Aug 19, 2013 at 1:16 PM, Gregory Maxwell <gmaxwell at gmail.com>
> wrote:
> > I think removing the ability to mine in the stock package would be
> > regrettable,
>
> I am naughty and should clarify.  I had ass.u.me.d that Jeff's patch
> also removed the internal CPU miner, because doing so is necessary for
> actually getting rid of most of the getwork code. It doesn't actually.
>
> Though this doesn't change the fact that the internal miner is mostly
> a pretext for integrated mining.  Since it only really works on
> testnet it also means our testnet testing using it is not a good test
> of the actual production software.  I'd rather remove the internal
> miner too, getting rid of the extra code and complexity, and package
> up a GBT miner which would actually be usable on the mainnet.
>
>
> ------------------------------------------------------------------------------
> Introducing Performance Central, a new site from SourceForge and
> AppDynamics. Performance Central is your source for news, insights,
> analysis and resources for efficient Application Performance Management.
> Visit us today!
> http://pubads.g.doubleclick.net/gampad/clk?id=48897511&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130819/950706c2/attachment.html>

From jgarzik at bitpay.com  Mon Aug 19 20:34:36 2013
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Mon, 19 Aug 2013 16:34:36 -0400
Subject: [Bitcoin-development] Proposal: remove "getwork" RPC from
	bitcoind
In-Reply-To: <CAEz79PpZ8a1vByinFz03efHCS71AtnFCjkXtK7My6z=QG=F92A@mail.gmail.com>
References: <CAJHLa0MnnWw=qiYC0nJcY=BdTDcAjGtraJ+kazoG7_bHW-HBtw@mail.gmail.com>
	<CALxyHsXoCqL8dNXeayibfbR7-JU6Ke19gJJ1fToboULdUa155Q@mail.gmail.com>
	<CAAS2fgQRcfbe+3A6_t4s8BJRaWwmLdKkGG1ePmG+Epm5W6CxdQ@mail.gmail.com>
	<CAAS2fgT_9KX4tEOqehwBf=TCV1c92b3W2ADKLqwkzqvcyWseUw@mail.gmail.com>
	<CAEz79PpZ8a1vByinFz03efHCS71AtnFCjkXtK7My6z=QG=F92A@mail.gmail.com>
Message-ID: <CAJHLa0MuF4r1cz1sQc=Qrf5CoHtei8CPvyAL8PBCo=Oug=hMRQ@mail.gmail.com>

On Mon, Aug 19, 2013 at 4:33 PM, Warren Togami Jr. <wtogami at gmail.com> wrote:
> FWIW, Litecoin 0.8.x entirely removed the internal miner and we warned
> people that getwork will be removed in the next major version.  Pooler's CPU
> minerd which supports both sha256d and scrypt recently grew stratum support.
> Perhaps he could be convinced to add GBT support too, which would help this
> goal of completely removing the internal miner and getwork.

The internal miner is still actively used for testnet, here.

-- 
Jeff Garzik
Senior Software Engineer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From Goss.Brian at mayo.edu  Mon Aug 19 20:22:27 2013
From: Goss.Brian at mayo.edu (Goss, Brian C., M.D.)
Date: Mon, 19 Aug 2013 20:22:27 +0000
Subject: [Bitcoin-development] Proposal: remove "getwork" RPC from
	bitcoind
Message-ID: <FFE335820B1BFF4F8E8619F446F2D87F4C1A2E7B@MSGPEXCEI26B.mfad.mfroot.org>

What if we have a massive (like many orders of magnitude) drop in network harsh rate?  Might such a function be useful to salvage the (non-functioning) network? Same for IRC bootstrapping.  How do we pick ourselves up off the ground in case of the equivalent of a great depression in network hash rate (or some jerk spending $100M just to drive the difficulty up and then turning his hardware off?).

-----Original Message-----
From: bitcoin-development-bounces at lists.sourceforge.net [mailto:bitcoin-development-bounces at lists.sourceforge.net] On Behalf Of bitcoin-development-request at lists.sourceforge.net
Sent: Monday, August 19, 2013 3:16 PM
To: bitcoin-development at lists.sourceforge.net
Subject: Bitcoin-development Digest, Vol 27, Issue 28

Send Bitcoin-development mailing list submissions to
	bitcoin-development at lists.sourceforge.net

To subscribe or unsubscribe via the World Wide Web, visit
	https://lists.sourceforge.net/lists/listinfo/bitcoin-development
or, via email, send a message with subject or body 'help' to
	bitcoin-development-request at lists.sourceforge.net

You can reach the person managing the list at
	bitcoin-development-owner at lists.sourceforge.net

When replying, please edit your Subject line so it is more specific than "Re: Contents of Bitcoin-development digest..."


Today's Topics:

   1. Proposal: remove "getwork" RPC from bitcoind (Jeff Garzik)
   2. Re: Proposal: remove "getwork" RPC from	bitcoind (Frank F)
   3. Re: Proposal: remove "getwork" RPC from	bitcoind (Luke-Jr)
   4. Re: Proposal: remove "getwork" RPC from	bitcoind (Pieter Wuille)
   5. Re: Proposal: remove "getwork" RPC from bitcoind (Matt Corallo)
   6. Re: Proposal: remove "getwork" RPC from	bitcoind (Frank F)


----------------------------------------------------------------------

Message: 1
Date: Mon, 19 Aug 2013 12:27:01 -0400
From: Jeff Garzik <jgarzik at bitpay.com>
Subject: [Bitcoin-development] Proposal: remove "getwork" RPC from
	bitcoind
To: Bitcoin Dev <bitcoin-development at lists.sourceforge.net>
Message-ID:
	<CAJHLa0MnnWw=qiYC0nJcY=BdTDcAjGtraJ+kazoG7_bHW-HBtw at mail.gmail.com>
Content-Type: text/plain; charset=ISO-8859-1

Pull request https://github.com/bitcoin/bitcoin/pull/2905 proposes to remove "getwork" RPC from bitcoind: https://en.bitcoin.it/wiki/Getwork

On mainnet, almost everybody uses a pool (and therefore, not "getwork"
directly to bitcoind).  Those few who solo mine use a pool server to talk to bitcoind via "getblocktemplate" or other means.  Tests show that attempts to solo mine on mainnet via "getwork" lead to delays and problems.

On testnet, getwork has a better chance of continuing to work.
Nevertheless, the same tools (open source pool servers or p2pool) are available for testnet, obviating the continued need to support getwork.

However, at one time, getwork to bitcoind was widely used.  I wanted to poke the audience, to gauge response to removing "getwork."  If a driving use case remains of which we're unaware, speak up, please.  We don't want to break anybody needlessly.

--
Jeff Garzik
Senior Software Engineer and open source evangelist
BitPay, Inc.      https://bitpay.com/



------------------------------

Message: 2
Date: Mon, 19 Aug 2013 15:09:41 -0500
From: Frank F <frankf44 at gmail.com>
Subject: Re: [Bitcoin-development] Proposal: remove "getwork" RPC from
	bitcoind
Cc: Bitcoin Dev <bitcoin-development at lists.sourceforge.net>
Message-ID:
	<CALxyHsXoCqL8dNXeayibfbR7-JU6Ke19gJJ1fToboULdUa155Q at mail.gmail.com>
Content-Type: text/plain; charset="iso-8859-1"

I strongly object to removing the only mechanism that allows anyone to say
that bitcoin is p2p, in the truest sense of the word. Moves like this that
favor only the pool operators and private mining interests are signs that
bitcoin is headed towards a monopoly/cartel model, and that would be a
tragic outcome for something that holds a great promise. Nobody knows what
mining will look like in the future, and denying the individual novice the
ability to mine at a small scale, even if we may think it is inefficient
now, is not a good path to start down.

If there are technical problems with getwork, maybe they should be
addressed and fixed instead of outright abandoned.


On Mon, Aug 19, 2013 at 11:27 AM, Jeff Garzik <jgarzik at bitpay.com> wrote:

> Pull request https://github.com/bitcoin/bitcoin/pull/2905 proposes to
> remove "getwork" RPC from bitcoind: https://en.bitcoin.it/wiki/Getwork
>
> On mainnet, almost everybody uses a pool (and therefore, not "getwork"
> directly to bitcoind).  Those few who solo mine use a pool server to
> talk to bitcoind via "getblocktemplate" or other means.  Tests show
> that attempts to solo mine on mainnet via "getwork" lead to delays and
> problems.
>
> On testnet, getwork has a better chance of continuing to work.
> Nevertheless, the same tools (open source pool servers or p2pool) are
> available for testnet, obviating the continued need to support
> getwork.
>
> However, at one time, getwork to bitcoind was widely used.  I wanted
> to poke the audience, to gauge response to removing "getwork."  If a
> driving use case remains of which we're unaware, speak up, please.  We
> don't want to break anybody needlessly.
>
> --
> Jeff Garzik
> Senior Software Engineer and open source evangelist
> BitPay, Inc.      https://bitpay.com/
>
>
> ------------------------------------------------------------------------------
> Introducing Performance Central, a new site from SourceForge and
> AppDynamics. Performance Central is your source for news, insights,
> analysis and resources for efficient Application Performance Management.
> Visit us today!
> http://pubads.g.doubleclick.net/gampad/clk?id=48897511&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>



-- 
*MONEY IS OVER!*
                                IF YOU WANT IT<http://www.zeitgeistmovie.com/>
=====================================================
The causes of my servitude can be traced to the tyranny of money.
-Serj Tankian
-------------- next part --------------
An HTML attachment was scrubbed...

------------------------------

Message: 3
Date: Mon, 19 Aug 2013 20:13:00 +0000
From: "Luke-Jr" <luke at dashjr.org>
Subject: Re: [Bitcoin-development] Proposal: remove "getwork" RPC from
	bitcoind
To: bitcoin-development at lists.sourceforge.net
Message-ID: <201308192013.02806.luke at dashjr.org>
Content-Type: Text/Plain;  charset="iso-8859-15"

On Monday, August 19, 2013 8:09:41 PM Frank F wrote:
> I strongly object to removing the only mechanism that allows anyone to say
> that bitcoin is p2p, in the truest sense of the word. Moves like this that
> favor only the pool operators and private mining interests are signs that
> bitcoin is headed towards a monopoly/cartel model, and that would be a
> tragic outcome for something that holds a great promise. Nobody knows what
> mining will look like in the future, and denying the individual novice the
> ability to mine at a small scale, even if we may think it is inefficient
> now, is not a good path to start down.
> 
> If there are technical problems with getwork, maybe they should be
> addressed and fixed instead of outright abandoned.

You missed getblocktemplate. It does everything getwork did and more.

Individual solo miners aren't being locked out at all. This is just removal of 
a protocol that has been obsolete for well over a year now.

Luke



------------------------------

Message: 4
Date: Mon, 19 Aug 2013 22:14:36 +0200
From: Pieter Wuille <pieter.wuille at gmail.com>
Subject: Re: [Bitcoin-development] Proposal: remove "getwork" RPC from
	bitcoind
To: Frank F <frankf44 at gmail.com>
Cc: Bitcoin Dev <bitcoin-development at lists.sourceforge.net>
Message-ID:
	<CAPg+sBjMdZfHpZrvHwMx6oQsS0yJaXVjTnyRwf6VCdnWTHQZaw at mail.gmail.com>
Content-Type: text/plain; charset=ISO-8859-1

On Mon, Aug 19, 2013 at 10:09 PM, Frank F <frankf44 at gmail.com> wrote:
> I strongly object to removing the only mechanism that allows anyone to say
> that bitcoin is p2p, in the truest sense of the word. Moves like this that
> favor only the pool operators and private mining interests are signs that
> bitcoin is headed towards a monopoly/cartel model, and that would be a
> tragic outcome for something that holds a great promise. Nobody knows what
> mining will look like in the future, and denying the individual novice the
> ability to mine at a small scale, even if we may think it is inefficient
> now, is not a good path to start down.
>
> If there are technical problems with getwork, maybe they should be addressed
> and fixed instead of outright abandoned.

They were addressed and fixed in a successor API, getblocktemplate.
It's even more decentralization-friendly, as it allows the caller to
see what transactions the daemon is trying to put into a block, and
even modify it.

The suggestion here is not to remove functionality - only to remove an
obsolete API for doing so.

-- 
Pieter



------------------------------

Message: 5
Date: Mon, 19 Aug 2013 16:15:08 -0400
From: Matt Corallo <bitcoin-list at bluematt.me>
Subject: Re: [Bitcoin-development] Proposal: remove "getwork" RPC from
	bitcoind
To: Jeff Garzik <jgarzik at bitpay.com>
Cc: Bitcoin Dev <bitcoin-development at lists.sourceforge.net>
Message-ID: <1376943308.27037.7.camel at localhost.localdomain>
Content-Type: text/plain; charset="UTF-8"

ACK, I see no reason to leave broken things in that a) arent necessary
and b) no one has the developer resources to fix.

Matt

On Mon, 2013-08-19 at 12:27 -0400, Jeff Garzik wrote:
> Pull request https://github.com/bitcoin/bitcoin/pull/2905 proposes to
> remove "getwork" RPC from bitcoind: https://en.bitcoin.it/wiki/Getwork
> 
> On mainnet, almost everybody uses a pool (and therefore, not "getwork"
> directly to bitcoind).  Those few who solo mine use a pool server to
> talk to bitcoind via "getblocktemplate" or other means.  Tests show
> that attempts to solo mine on mainnet via "getwork" lead to delays and
> problems.
> 
> On testnet, getwork has a better chance of continuing to work.
> Nevertheless, the same tools (open source pool servers or p2pool) are
> available for testnet, obviating the continued need to support
> getwork.
> 
> However, at one time, getwork to bitcoind was widely used.  I wanted
> to poke the audience, to gauge response to removing "getwork."  If a
> driving use case remains of which we're unaware, speak up, please.  We
> don't want to break anybody needlessly.
> 





------------------------------

Message: 6
Date: Mon, 19 Aug 2013 15:16:17 -0500
From: Frank F <frankf44 at gmail.com>
Subject: Re: [Bitcoin-development] Proposal: remove "getwork" RPC from
	bitcoind
Cc: Bitcoin Dev <bitcoin-development at lists.sourceforge.net>
Message-ID:
	<CALxyHsV=LWY+TzZG-XBQ6HNhxFEezjFhW++aJ7oVbVGEJWW0nw at mail.gmail.com>
Content-Type: text/plain; charset="iso-8859-1"

Thank you for setting me straight. Please forgive my ignorance.


On Mon, Aug 19, 2013 at 3:14 PM, Pieter Wuille <pieter.wuille at gmail.com>wrote:

> On Mon, Aug 19, 2013 at 10:09 PM, Frank F <frankf44 at gmail.com> wrote:
> > I strongly object to removing the only mechanism that allows anyone to
> say
> > that bitcoin is p2p, in the truest sense of the word. Moves like this
> that
> > favor only the pool operators and private mining interests are signs that
> > bitcoin is headed towards a monopoly/cartel model, and that would be a
> > tragic outcome for something that holds a great promise. Nobody knows
> what
> > mining will look like in the future, and denying the individual novice
> the
> > ability to mine at a small scale, even if we may think it is inefficient
> > now, is not a good path to start down.
> >
> > If there are technical problems with getwork, maybe they should be
> addressed
> > and fixed instead of outright abandoned.
>
> They were addressed and fixed in a successor API, getblocktemplate.
> It's even more decentralization-friendly, as it allows the caller to
> see what transactions the daemon is trying to put into a block, and
> even modify it.
>
> The suggestion here is not to remove functionality - only to remove an
> obsolete API for doing so.
>
> --
> Pieter
>



-- 
*MONEY IS OVER!*
                                IF YOU WANT IT<http://www.zeitgeistmovie.com/>
=====================================================
The causes of my servitude can be traced to the tyranny of money.
-Serj Tankian
-------------- next part --------------
An HTML attachment was scrubbed...

------------------------------

------------------------------------------------------------------------------
Introducing Performance Central, a new site from SourceForge and 
AppDynamics. Performance Central is your source for news, insights, 
analysis and resources for efficient Application Performance Management. 
Visit us today!
http://pubads.g.doubleclick.net/gampad/clk?id=48897511&iu=/4140/ostg.clktrk

------------------------------

_______________________________________________
Bitcoin-development mailing list
Bitcoin-development at lists.sourceforge.net
https://lists.sourceforge.net/lists/listinfo/bitcoin-development


End of Bitcoin-development Digest, Vol 27, Issue 28
***************************************************



From gmaxwell at gmail.com  Mon Aug 19 21:07:46 2013
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Mon, 19 Aug 2013 14:07:46 -0700
Subject: [Bitcoin-development] Proposal: remove "getwork" RPC from
	bitcoind
In-Reply-To: <FFE335820B1BFF4F8E8619F446F2D87F4C1A2E7B@MSGPEXCEI26B.mfad.mfroot.org>
References: <FFE335820B1BFF4F8E8619F446F2D87F4C1A2E7B@MSGPEXCEI26B.mfad.mfroot.org>
Message-ID: <CAAS2fgQtGg+SxRc7Byw0_L3NpEudPTtBpmnKYt-+7VEVSnKZaQ@mail.gmail.com>

On Mon, Aug 19, 2013 at 1:22 PM, Goss, Brian C., M.D.
<Goss.Brian at mayo.edu> wrote:
> What if we have a massive (like many orders of magnitude) drop in network harsh rate?  Might such a function be useful to salvage the (non-functioning) network? Same for IRC bootstrapping.  How do we pick ourselves up off the ground in case of the equivalent of a great depression in network hash rate (or some jerk spending $100M just to drive the difficulty up and then turning his hardware off?).

[Aside: When replying to the digest, please try to trim it]

It appears that we will soon be at a hashrate where all the desktop
CPUs in the world couldn't really make a dent in it... certainly not
desktop cpus using the slow integrated cpu miner, which is much slower
than external optimized cpu miners.

But this is why I suggest packaging up a modern mining tool that
supports CPU/GPU/FPGA/ASIC mining against a current bitcoind. Doing so
would reduce the difference between testnet and mainnet, and provide
an actually useful tool for contributing directly.

Though again, I note, that Jeff's patch doesn't actually remove the
integrated miner (I think it should?).  Just the getwork support for
external miners which don't use getblocktemplate... and if you're
going to download one of those you could go download bfgminer instead.



From andreas at petersson.at  Mon Aug 19 22:15:12 2013
From: andreas at petersson.at (Andreas Petersson)
Date: Tue, 20 Aug 2013 00:15:12 +0200
Subject: [Bitcoin-development] Payment Protocol: BIP 70, 71, 72
In-Reply-To: <CABsx9T0Ly67ZNJhoRQk0L9Q0-ucq3e=24b5Tg6GRKspRKKtP-g@mail.gmail.com>
References: <CABsx9T0Ly67ZNJhoRQk0L9Q0-ucq3e=24b5Tg6GRKspRKKtP-g@mail.gmail.com>
Message-ID: <521298F0.20108@petersson.at>

I was just reviewing the integration work to integrate the Payment
Protocol into our products. Is there any notion of a standardized
invoice serialisation? If i pay for two Burgers and one Club Mate, how
would my Bitcoin Wallet be able to know that? Right now, i would simply
put that into "memo" and come up with my own serialisation mechanism.

Second, is there a way to communicate acceptance levels of TX
(unconfirmed, 1 conf, 6 conf) maybe using several PaymentACK?

-Andreas





From w at grabhive.com  Mon Aug 19 21:57:06 2013
From: w at grabhive.com (Wendell)
Date: Mon, 19 Aug 2013 23:57:06 +0200
Subject: [Bitcoin-development] Bloom io attack effectiveness
In-Reply-To: <CAPaL=UWH=3qj7AW-azrO9rJqRj3BKBff8-eETfF03po9kPJO4g@mail.gmail.com>
References: <20130819001357.GA4281@savin>
	<CABsx9T3MFqmLchc1Uu20BhiVKsYWFtt0eneVSey846y2hdQ7Rg@mail.gmail.com>
	<CAPaL=UWH=3qj7AW-azrO9rJqRj3BKBff8-eETfF03po9kPJO4g@mail.gmail.com>
Message-ID: <D31E9305-773C-4760-BD15-AB5C2E63D723@grabhive.com>

John,

I for one support your rallying cry of decentralization.

If you are implying that even 10,000 full nodes seems far, far too few for a distributed system that may ultimately face a very well-connected and well-funded threat model, I agree with you completely. However, I took Gavin's statement to mean something like a factual statement about the load-bearing nature of that many nodes, rather than an actual target number for some future iteration of the network.

Partial UTXO sets sound like a great idea -- are they really being ignored? I am pretty new to the development process here, but I assumed (as with many open source projects) that ideation, debate and implementation take a while to churn. Has a prototype of that been developed already, are you implying that you funded something like that and it never got built? If there are some GitHub links that I missed, please send them over.

Maybe you should open that topic back up in its own thread, so we can bring it back into view?

-wendell

grabhive.com | twitter.com/grabhive | gpg: 6C0C9411

On Aug 19, 2013, at 4:53 AM, John Dillon wrote:

> So tell us how is your "vision" of 10,000 big beefy full nodes with SPV peers
> any different from the Electrum model? These days Electrum clients have block
> headers and verify that transactions have merkle paths to the block headers.
> The only difference I see is that SPV uses bloom filtering and Electrum can
> query by transaction. But Mike wants to add querying by transaction to full
> nodes anyway, and one of the purported advantages of this UTXO proof stuff is
> that you can query servers for UTXO's by address, so I see no difference at
> all. A patch to do bloom filtering on Electrum would be amusing to me.
> 
> Here you have Peter talking about clever ways to actually get decentralization
> by having SPV peers donate back to the network with spare bandwidth, like
> relaying blocks, not to mention his partial UTXO set ideas, and you completely
> ignore that. But I guess that would raise ugly questions when people realize
> they can't now contribute back to Bitcoin, because the blocksize is a gigabyte
> of microtransactions... It may also raise ugly questions with regulators that
> may find the idea of "full node == data chokepoint == regulatory chokepoint" an
> attractive notion. Why are there not any competent people other than Peter who
> really have the guts to bring up these proposals? I've little luck getting
> proof-of-concepts built for money anyway. Maybe we just have a darth of smart
> competent people in this space.
> 
> You do a good job of signaling your priorities Gavin. The payment protocol
> includes no notion that you may want to pay anyone but a SSL certified
> merchant. Yes I know the crypto can be upgraded, but it says volumes that you
> pushed for that first, without even the slightest token effort to allow
> individuals to participate in any way. Sad given you have made things *less*
> secure because there is no safe way to get money *into* my wallet with the
> payment protocol, but could have been.
> 
> Tell me, when my decentralization pull-req is voted on, which way are you
> planning on voting?

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 841 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130819/36d261e4/attachment.sig>

From jtimon at monetize.io  Mon Aug 19 22:49:46 2013
From: jtimon at monetize.io (=?ISO-8859-1?Q?Jorge_Tim=F3n?=)
Date: Tue, 20 Aug 2013 00:49:46 +0200
Subject: [Bitcoin-development] Proposal: remove "getwork" RPC from
	bitcoind
In-Reply-To: <CAAS2fgQtGg+SxRc7Byw0_L3NpEudPTtBpmnKYt-+7VEVSnKZaQ@mail.gmail.com>
References: <FFE335820B1BFF4F8E8619F446F2D87F4C1A2E7B@MSGPEXCEI26B.mfad.mfroot.org>
	<CAAS2fgQtGg+SxRc7Byw0_L3NpEudPTtBpmnKYt-+7VEVSnKZaQ@mail.gmail.com>
Message-ID: <CAC1+kJNFKVrk=RQeX+NVn7Sh8RbiCeDOKNAigye9jneqO85rYA@mail.gmail.com>

Removing getwork and the old miner and packaging a better miner seems
the best solution for the reasons already mentioned.

Not directly related, but this remembered me that we planned to
remove the accounting features on freicoin. We don't want to adapt
them for demurrage and we think business shouldn't use it and should
code their own accounting system instead. One that keeps a full log
of the accounting, etc.
Unfortunately the first exchange to support freicoin (cryptonit) used
this feature for accounting user balances on the exchange.

So the question is, is there any good reason to maintain this?
Is any serious business really using this or anyone at all?

I'm talking about removing the following rpc calls:

getaccount
getaddressesbyaccount
getbalance
getreceivedbyaccount
listaccounts
listreceivedbyaccount
move
sendfrom
setaccount

...and modifying these:

getnewaddress
listreceivedbyaddress
listtransactions
sendmany

I think this would also leave a cleaner API, but I'm just interested
on what the objections would be to this removal.

How crazy does this sound?
Should we reconsider their removal for freicoin, proceed or create a
pull request for bitcoin?

-- 
Jorge Tim?n

http://freico.in/



From andreas at schildbach.de  Mon Aug 19 23:02:41 2013
From: andreas at schildbach.de (Andreas Schildbach)
Date: Tue, 20 Aug 2013 01:02:41 +0200
Subject: [Bitcoin-development] Proposal: remove "getwork" RPC from
	bitcoind
In-Reply-To: <CAJHLa0MuF4r1cz1sQc=Qrf5CoHtei8CPvyAL8PBCo=Oug=hMRQ@mail.gmail.com>
References: <CAJHLa0MnnWw=qiYC0nJcY=BdTDcAjGtraJ+kazoG7_bHW-HBtw@mail.gmail.com>
	<CALxyHsXoCqL8dNXeayibfbR7-JU6Ke19gJJ1fToboULdUa155Q@mail.gmail.com>
	<CAAS2fgQRcfbe+3A6_t4s8BJRaWwmLdKkGG1ePmG+Epm5W6CxdQ@mail.gmail.com>
	<CAAS2fgT_9KX4tEOqehwBf=TCV1c92b3W2ADKLqwkzqvcyWseUw@mail.gmail.com>
	<CAEz79PpZ8a1vByinFz03efHCS71AtnFCjkXtK7My6z=QG=F92A@mail.gmail.com>
	<CAJHLa0MuF4r1cz1sQc=Qrf5CoHtei8CPvyAL8PBCo=Oug=hMRQ@mail.gmail.com>
Message-ID: <kuu86a$ii5$1@ger.gmane.org>

On 08/19/2013 10:34 PM, Jeff Garzik wrote:

>> FWIW, Litecoin 0.8.x entirely removed the internal miner and we warned
>> people that getwork will be removed in the next major version.  Pooler's CPU
>> minerd which supports both sha256d and scrypt recently grew stratum support.
>> Perhaps he could be convinced to add GBT support too, which would help this
>> goal of completely removing the internal miner and getwork.
> 
> The internal miner is still actively used for testnet, here.

Here, too. If I'm too impatient to wait for the next block that is.

I think it'd be a pity if the easy way to mine blocks would be removed.





From gavinandresen at gmail.com  Mon Aug 19 23:19:38 2013
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Tue, 20 Aug 2013 09:19:38 +1000
Subject: [Bitcoin-development] Payment Protocol: BIP 70, 71, 72
In-Reply-To: <521298F0.20108@petersson.at>
References: <CABsx9T0Ly67ZNJhoRQk0L9Q0-ucq3e=24b5Tg6GRKspRKKtP-g@mail.gmail.com>
	<521298F0.20108@petersson.at>
Message-ID: <CABsx9T3b--tfUmaxJxsXyM2f3Cw4M1oX1nX8o9WkW_haBmLctA@mail.gmail.com>

On Tue, Aug 20, 2013 at 8:15 AM, Andreas Petersson <andreas at petersson.at>wrote:

> I was just reviewing the integration work to integrate the Payment
> Protocol into our products. Is there any notion of a standardized
> invoice serialisation? If i pay for two Burgers and one Club Mate, how
> would my Bitcoin Wallet be able to know that?


No. There are XML-based (shudder) standards for electronic invoicing that
include all sorts of bells and whistles; the PaymentDetails message could
easily encapsulate one of them in an 'invoice' field extension. Or we could
reinvent the wheel and come up with our own, but I'd rather use an existing
standard (or maybe a subset of an existing standard).

I didn't want to wade into that swamp for the 1.0 version of the payment
protocol.


> Right now, i would simply
> put that into "memo" and come up with my own serialisation mechanism.
>

"Two Burgers, one Club Mate" seems pretty user-friendly.

Second, is there a way to communicate acceptance levels of TX
> (unconfirmed, 1 conf, 6 conf) maybe using several PaymentACK?
>

No, because the Payment->PaymentACK communication round-trip is done in
one, non-persistent http request-response round-trip.

I don't think we want to allow merchants to push messages to the wallet
(wouldn't take long for merchants to use the opportunity to push annoying
advertising at me, I think), and I don't think we want wallets to poll the
merchant. Although maybe a payment protocol version 2.0 feature could be a
PaymentACK extension that says "ask me how the transaction is going at THIS
URL in THIS many minutes."

-- 
--
Gavin Andresen
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130820/6b675872/attachment.html>

From wtogami at gmail.com  Mon Aug 19 23:30:21 2013
From: wtogami at gmail.com (Warren Togami Jr.)
Date: Mon, 19 Aug 2013 13:30:21 -1000
Subject: [Bitcoin-development] Proposal: remove "getwork" RPC from
	bitcoind
In-Reply-To: <kuu86a$ii5$1@ger.gmane.org>
References: <CAJHLa0MnnWw=qiYC0nJcY=BdTDcAjGtraJ+kazoG7_bHW-HBtw@mail.gmail.com>
	<CALxyHsXoCqL8dNXeayibfbR7-JU6Ke19gJJ1fToboULdUa155Q@mail.gmail.com>
	<CAAS2fgQRcfbe+3A6_t4s8BJRaWwmLdKkGG1ePmG+Epm5W6CxdQ@mail.gmail.com>
	<CAAS2fgT_9KX4tEOqehwBf=TCV1c92b3W2ADKLqwkzqvcyWseUw@mail.gmail.com>
	<CAEz79PpZ8a1vByinFz03efHCS71AtnFCjkXtK7My6z=QG=F92A@mail.gmail.com>
	<CAJHLa0MuF4r1cz1sQc=Qrf5CoHtei8CPvyAL8PBCo=Oug=hMRQ@mail.gmail.com>
	<kuu86a$ii5$1@ger.gmane.org>
Message-ID: <CAEz79PoZx6f9U6LQdWGPtb=tRxiDqONriV8pCobtnqGB_nCcQw@mail.gmail.com>

Hence ship a miner that automatically reads the bitcoin.conf to find the
RPC authentication info.  It would be faster and more efficient than the
unoptimized miner while simplifying the bitcoind code.  Win for everyone.

Warren


On Mon, Aug 19, 2013 at 1:02 PM, Andreas Schildbach
<andreas at schildbach.de>wrote:

> On 08/19/2013 10:34 PM, Jeff Garzik wrote:
>
> >> FWIW, Litecoin 0.8.x entirely removed the internal miner and we warned
> >> people that getwork will be removed in the next major version.
>  Pooler's CPU
> >> minerd which supports both sha256d and scrypt recently grew stratum
> support.
> >> Perhaps he could be convinced to add GBT support too, which would help
> this
> >> goal of completely removing the internal miner and getwork.
> >
> > The internal miner is still actively used for testnet, here.
>
> Here, too. If I'm too impatient to wait for the next block that is.
>
> I think it'd be a pity if the easy way to mine blocks would be removed.
>
>
>
>
> ------------------------------------------------------------------------------
> Introducing Performance Central, a new site from SourceForge and
> AppDynamics. Performance Central is your source for news, insights,
> analysis and resources for efficient Application Performance Management.
> Visit us today!
> http://pubads.g.doubleclick.net/gampad/clk?id=48897511&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130819/01b58448/attachment.html>

From gmaxwell at gmail.com  Tue Aug 20 08:35:29 2013
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Tue, 20 Aug 2013 01:35:29 -0700
Subject: [Bitcoin-development] BIP 32.5
In-Reply-To: <CAAS2fgQFOei6we8nfSr9DuQuHEjXT+G8_XGMk9um14DBgRuPyA@mail.gmail.com>
References: <CAAS2fgQFOei6we8nfSr9DuQuHEjXT+G8_XGMk9um14DBgRuPyA@mail.gmail.com>
Message-ID: <CAAS2fgRkEFK5csXhCdArLaA_ZsFutkBBVLdHuwTn5xE-39zw3g@mail.gmail.com>

On Thu, Aug 15, 2013 at 7:26 PM, Gregory Maxwell <gmaxwell at gmail.com> wrote:
> I am wondering if we shouldn't have a BIP32 addendum which makes the
> following signing related recommendations:

Looks like we're in the midst of another DSA duplicated K disaster.
(Now, blockchain.info mywallet)

I talked to Pieter about this some earlier today and he sounded pretty
positive. I'll go ahead and start on an actual BIP document for it.



From mike at plan99.net  Tue Aug 20 10:05:54 2013
From: mike at plan99.net (Mike Hearn)
Date: Tue, 20 Aug 2013 12:05:54 +0200
Subject: [Bitcoin-development] Payment Protocol: BIP 70, 71, 72
In-Reply-To: <CABsx9T3b--tfUmaxJxsXyM2f3Cw4M1oX1nX8o9WkW_haBmLctA@mail.gmail.com>
References: <CABsx9T0Ly67ZNJhoRQk0L9Q0-ucq3e=24b5Tg6GRKspRKKtP-g@mail.gmail.com>
	<521298F0.20108@petersson.at>
	<CABsx9T3b--tfUmaxJxsXyM2f3Cw4M1oX1nX8o9WkW_haBmLctA@mail.gmail.com>
Message-ID: <CANEZrP2BOWk4FOUx4eVHvXmdSgx3zo_o18J8YBi2Uc_WkBAXKA@mail.gmail.com>

I think the confidence of the tx is not really the users concern anyway.
They wrote it so they know it's valid. If the merchant disagrees for some
reason then the user can find out, out of band when the goods/services are
not delivered.


On Tue, Aug 20, 2013 at 1:19 AM, Gavin Andresen <gavinandresen at gmail.com>wrote:

> On Tue, Aug 20, 2013 at 8:15 AM, Andreas Petersson <andreas at petersson.at>wrote:
>
>> I was just reviewing the integration work to integrate the Payment
>> Protocol into our products. Is there any notion of a standardized
>> invoice serialisation? If i pay for two Burgers and one Club Mate, how
>> would my Bitcoin Wallet be able to know that?
>
>
> No. There are XML-based (shudder) standards for electronic invoicing that
> include all sorts of bells and whistles; the PaymentDetails message could
> easily encapsulate one of them in an 'invoice' field extension. Or we could
> reinvent the wheel and come up with our own, but I'd rather use an existing
> standard (or maybe a subset of an existing standard).
>
> I didn't want to wade into that swamp for the 1.0 version of the payment
> protocol.
>
>
>> Right now, i would simply
>> put that into "memo" and come up with my own serialisation mechanism.
>>
>
> "Two Burgers, one Club Mate" seems pretty user-friendly.
>
> Second, is there a way to communicate acceptance levels of TX
>> (unconfirmed, 1 conf, 6 conf) maybe using several PaymentACK?
>>
>
> No, because the Payment->PaymentACK communication round-trip is done in
> one, non-persistent http request-response round-trip.
>
> I don't think we want to allow merchants to push messages to the wallet
> (wouldn't take long for merchants to use the opportunity to push annoying
> advertising at me, I think), and I don't think we want wallets to poll the
> merchant. Although maybe a payment protocol version 2.0 feature could be a
> PaymentACK extension that says "ask me how the transaction is going at THIS
> URL in THIS many minutes."
>
> --
> --
> Gavin Andresen
>
>
> ------------------------------------------------------------------------------
> Introducing Performance Central, a new site from SourceForge and
> AppDynamics. Performance Central is your source for news, insights,
> analysis and resources for efficient Application Performance Management.
> Visit us today!
> http://pubads.g.doubleclick.net/gampad/clk?id=48897511&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130820/00daef31/attachment.html>

From gavinandresen at gmail.com  Tue Aug 20 21:28:06 2013
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Wed, 21 Aug 2013 07:28:06 +1000
Subject: [Bitcoin-development] There will be a 0.8.4 release
Message-ID: <CABsx9T0dXH43TWdCuOURQkENYHxp4tKg58c8avqjxeWTWbRFJQ@mail.gmail.com>

There have been a few not-quite-serious-enough-to-justify-a-release
security fixes that, along with a couple of serious bugs, we think together
DO justify a new 0.8.* release.

So I just created a 0.8.4 branch, based on the 0.8.3 branch, and will be
cherry-picking from the master branch.

Planned changes from the 0.8.3 release:

Security-related:
42656ea  Make RPC password resistant to timing attacks
159bc48  Simplify storage of orphan transactions, fix CVE-2013-4627
37c6389  Performance optimization for bloom filters (help mitigate
potential DoS attack discussed last week)

Bug fixes:
9bf2a4ab  Fix multi-block reorg transaction resurrection
bf81a3ef  Fix Gnome bitcoin: URI handler
f0784ac4  Fix non-standard disconnected transactions causing mempool orphans
2461aba1  Mempool consistency check
pull 2916  Import OSX fsync change from LevelDB subtree  (will hopefully
fix the random-OSX leveldb corruption issues)

There are lots of little fixes that could be included, but those will wait
for the 0.9 release.

-- 
--
Gavin Andresen
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130821/68ea6609/attachment.html>

From fahree at gmail.com  Wed Aug 21 03:39:12 2013
From: fahree at gmail.com (=?ISO-8859-1?Q?Far=E9?=)
Date: Tue, 20 Aug 2013 23:39:12 -0400
Subject: [Bitcoin-development] Making bitcoin traceability harder
Message-ID: <CAN7nBXdW3H3fWHji0Hcem-eFnAxBYzmtrLBkYekVM=9DZBJVVw@mail.gmail.com>

Dear bitcoin developers,

trading arbitrary amounts of bitcoins makes it easier to trace who
does what just by observing the amounts being traded, and where the
residual money ends up: e.g. you can identify that obviously, the
recurrent user of address A sent 2.5 bitcoins to the recurrent user of
address B, keeping the rest of his money in A. If instead bitcoin
users practice the discipline, enforced by the client software by
default, of only keeping a power-of-two amount of satoshis in use-once
wallets except where public donation addresses are meant, then tracing
suddenly becomes much harder.

Whether this particular discipline is the best to implement or not,
shouldn't bitcoin clients enforce SOME discipline that makes tracing
harder? After all we know that uniformed goons are eager to watch
who's trading with whom and to crack down on users. We shouldn't be
making it easy for them, though this will mean slightly higher
transaction cost. Merchants would then generate not one but a series
of new addresses at each transaction, and the customer would send
appropriately sized buckets of satoshis to each of the addresses.
There should just be a standard way to specify an amount and a list of
addresses as a target for payment, that merchants can communicate to
customers (though that might require e.g. higher resolution QR codes).

Has this idea already been considered before? Accepted or rejected?

??? ? Fran?ois-Ren? ?VB Rideau ?Reflection&Cybernethics? http://fare.tunes.org
Of course, Third World leaders love you. By ascribing third world ills to
First World sins, you absolve them of blame for their countries' failure to
advance. ? John McCarthy



From luke at dashjr.org  Wed Aug 21 12:00:48 2013
From: luke at dashjr.org (Luke-Jr)
Date: Wed, 21 Aug 2013 12:00:48 +0000
Subject: [Bitcoin-development] Making bitcoin traceability harder
In-Reply-To: <CAN7nBXdW3H3fWHji0Hcem-eFnAxBYzmtrLBkYekVM=9DZBJVVw@mail.gmail.com>
References: <CAN7nBXdW3H3fWHji0Hcem-eFnAxBYzmtrLBkYekVM=9DZBJVVw@mail.gmail.com>
Message-ID: <201308211200.50200.luke@dashjr.org>

Far?,

Let me start out by noting that there are plenty of good ideas which could be 
implemented, but haven't been yet, and might take a long time to get to. There 
are only a couple handfuls of Bitcoin developers, and even fewer of us who are 
able to work full-time on Bitcoin development. Perhaps surprisingly, even this 
often isn't the bottleneck to new functionality: we have a terrible shortage 
of testers, needed to make sure improvements don't break things in subtle 
ways. So, while your ideas are appreciated, please keep in mind that it may 
take time to add them, and you can help Bitcoin development much more by 
aiding in testing currently-written-but-untested features.

With regard to your points made specifically, please note that addresses are 
intended to be single-use only. Thus, the "recurrent user of address A/B" are 
not using Bitcoin correctly already, which is why they are so easy to trace. 
As far as keeping change amounts as powers of two, while I would personally 
love to find a justification for power-of-two amounts, I don't see how this 
would help privacy. I think it would actually hurt privacy, as change would 
now be clearly identifiable. Furthermore, it would necessarily have to throw 
away excess as a transaction fee - some users would be very upset with this.

As you suggest, it is of course already best practice for merchants (and 
individuals!) to use a unique payment address for every transaction. Gavin's 
payment protocol work has been making some great progress toward improving 
usability for this. There is also a general consensus that Bitcoin-Qt's 
"Receive coins" tab could be significantly improved to discourage address 
reuse further. I don't believe it has been discussed to have merchants use 
multiple addresses/coins for a single payment; that might be worth some 
further discussion here as a privacy extension, but I don't think many would 
consider it an urgent issue (it may help, but probably not enough to make it 
worthwhile).

Luke


On Wednesday, August 21, 2013 3:39:12 AM Far? wrote:
> Dear bitcoin developers,
> 
> trading arbitrary amounts of bitcoins makes it easier to trace who
> does what just by observing the amounts being traded, and where the
> residual money ends up: e.g. you can identify that obviously, the
> recurrent user of address A sent 2.5 bitcoins to the recurrent user of
> address B, keeping the rest of his money in A. If instead bitcoin
> users practice the discipline, enforced by the client software by
> default, of only keeping a power-of-two amount of satoshis in use-once
> wallets except where public donation addresses are meant, then tracing
> suddenly becomes much harder.
> 
> Whether this particular discipline is the best to implement or not,
> shouldn't bitcoin clients enforce SOME discipline that makes tracing
> harder? After all we know that uniformed goons are eager to watch
> who's trading with whom and to crack down on users. We shouldn't be
> making it easy for them, though this will mean slightly higher
> transaction cost. Merchants would then generate not one but a series
> of new addresses at each transaction, and the customer would send
> appropriately sized buckets of satoshis to each of the addresses.
> There should just be a standard way to specify an amount and a list of
> addresses as a target for payment, that merchants can communicate to
> customers (though that might require e.g. higher resolution QR codes).
> 
> Has this idea already been considered before? Accepted or rejected?
> 
> ??? ? Fran?ois-Ren? ?VB Rideau ?Reflection&Cybernethics?
> http://fare.tunes.org Of course, Third World leaders love you. By
> ascribing third world ills to First World sins, you absolve them of blame
> for their countries' failure to advance. ? John McCarthy
> 
> ---------------------------------------------------------------------------
> --- Introducing Performance Central, a new site from SourceForge and
> AppDynamics. Performance Central is your source for news, insights,
> analysis and resources for efficient Application Performance Management.
> Visit us today!
> http://pubads.g.doubleclick.net/gampad/clk?id=48897511&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development



From fahree at gmail.com  Wed Aug 21 15:10:55 2013
From: fahree at gmail.com (=?ISO-8859-1?Q?Far=E9?=)
Date: Wed, 21 Aug 2013 11:10:55 -0400
Subject: [Bitcoin-development] Making bitcoin traceability harder
In-Reply-To: <201308211200.50200.luke@dashjr.org>
References: <CAN7nBXdW3H3fWHji0Hcem-eFnAxBYzmtrLBkYekVM=9DZBJVVw@mail.gmail.com>
	<201308211200.50200.luke@dashjr.org>
Message-ID: <CAN7nBXcah3ffygZ=AKZmFadk6_RGQk1pVoYgN2M1Gmr5FUFUaw@mail.gmail.com>

Dear Luke,

thanks for your prompt response.

On Wed, Aug 21, 2013 at 8:00 AM, Luke-Jr <luke at dashjr.org> wrote:
> Let me start out by noting that there are plenty of good ideas which could be
> implemented, but haven't been yet, and might take a long time to get to. There
> are only a couple handfuls of Bitcoin developers, and even fewer of us who are
> able to work full-time on Bitcoin development. Perhaps surprisingly, even this
> often isn't the bottleneck to new functionality: we have a terrible shortage
> of testers, needed to make sure improvements don't break things in subtle
> ways. So, while your ideas are appreciated, please keep in mind that it may
> take time to add them, and you can help Bitcoin development much more by
> aiding in testing currently-written-but-untested features.
>
That's a useful reminder.

> With regard to your points made specifically, please note that addresses are
> intended to be single-use only. Thus, the "recurrent user of address A/B" are
> not using Bitcoin correctly already, which is why they are so easy to trace.
> As far as keeping change amounts as powers of two, while I would personally
> love to find a justification for power-of-two amounts, I don't see how this
> would help privacy. I think it would actually hurt privacy, as change would
> now be clearly identifiable. Furthermore, it would necessarily have to throw
> away excess as a transaction fee - some users would be very upset with this.
>
Even when you don't reuse your address, by considering the amounts in
a transaction, it is often easy to identify what is the main amount
and what is the residual. e.g. "oh, he spent $1.99 worth of bitcoin
out of his big bitcoin address, so the $1.99 is being paid, and the
rest is still the same person", and so trace identities. By using
power-of-two buckets (based on the binary expansion of the amount), it
becomes harder to do amount analysis. Sometimes, buckets are joined or
split, but that still doesn't help much identify how several buckets
combine into one transaction. As for transaction fees ? indeed, they
should probably be paid in separate small-bucket transactions. I don't
see any particular difficulty about it.

> As you suggest, it is of course already best practice for merchants (and
> individuals!) to use a unique payment address for every transaction. Gavin's
> payment protocol work has been making some great progress toward improving
> usability for this. There is also a general consensus that Bitcoin-Qt's
> "Receive coins" tab could be significantly improved to discourage address
> reuse further. I don't believe it has been discussed to have merchants use
> multiple addresses/coins for a single payment; that might be worth some
> further discussion here as a privacy extension, but I don't think many would
> consider it an urgent issue (it may help, but probably not enough to make it
> worthwhile).
>
There is nothing urgent indeed. Nevertheless, I fear that the current
usage pattern is too easily traceable, and that tweaks such as the one
I'm proposing could make amount-based tracing much harder.

Thanks for your hard work!

??? ? Fran?ois-Ren? ?VB Rideau ?Reflection&Cybernethics? http://fare.tunes.org
He wa'n't no common dog, he wa'n't no mongrel; he was a composite.
A composite dog is a dog that is made up of all the valuable qualities
that's in the dog breed ? kind of a syndicate; and a mongrel is made up
of all riffraff that's left over.  ? Mark Twain



From rdwnj at yahoo.com  Wed Aug 21 21:24:38 2013
From: rdwnj at yahoo.com (Ron)
Date: Wed, 21 Aug 2013 14:24:38 -0700 (PDT)
Subject: [Bitcoin-development] Proposal: remove "getwork" RPC from
	bitcoind
In-Reply-To: <mailman.167053.1376954386.4583.bitcoin-development@lists.sourceforge.net>
References: <mailman.167053.1376954386.4583.bitcoin-development@lists.sourceforge.net>
Message-ID: <1377120278.34996.YahooMailNeo@web124501.mail.ne1.yahoo.com>

Message: 1

Date: Mon, 19 Aug 2013 14:07:46 -0700
From: Gregory Maxwell <gmaxwell at gmail.com>
Subject: Re: [Bitcoin-development] Proposal: remove "getwork" RPC from
??? bitcoind
To: "Goss, Brian C., M.D." <Goss.Brian at mayo.edu>
Cc: "bitcoin-development at lists.sourceforge.net"
??? <bitcoin-development at lists.sourceforge.net>
Message-ID:
??? <CAAS2fgQtGg+SxRc7Byw0_L3NpEudPTtBpmnKYt-+7VEVSnKZaQ at mail.gmail.com>
Content-Type: text/plain; charset=UTF-8

On Mon, Aug 19, 2013 at 1:22 PM, Goss, Brian C., M.D.
<Goss.Brian at mayo.edu> wrote:
> What if we have a massive (like many orders of magnitude) drop in network harsh rate?? Might such a function be useful to salvage the (non-functioning) network? Same for IRC bootstrapping.? How do we pick ourselves up off the ground in case of the equivalent of a great depression in network hash rate (or some jerk spending $100M just to drive the difficulty up and then turning his hardware off?).

[Aside: When replying to the digest, please try to trim it]

It appears that we will soon be at a hashrate where all the desktop
CPUs in the world couldn't really make a dent in it... certainly not
desktop cpus using the slow integrated cpu miner, which is much slower
than external optimized cpu miners.

But this is why I suggest packaging up a modern mining tool that
supports CPU/GPU/FPGA/ASIC mining against a current bitcoind. Doing so
would reduce the difference between testnet and mainnet, and provide
an actually useful tool for contributing directly.

Though again, I note, that Jeff's patch doesn't actually remove the
integrated miner (I think it should?).? Just the getwork support for
external miners which don't use getblocktemplate... and if you're
going to download one of those you could go download bfgminer instead.

Message: 5
Date: Tue, 20 Aug 2013 01:02:41 +0200
From: Andreas Schildbach <andreas at schildbach.de>
Subject: Re: [Bitcoin-development] Proposal: remove "getwork" RPC from
??? bitcoind
To: bitcoin-development at lists.sourceforge.net
Message-ID: <kuu86a$ii5$1 at ger.gmane.org>
Content-Type: text/plain; charset=ISO-8859-1

On 08/19/2013 10:34 PM, Jeff Garzik wrote:

>> FWIW, Litecoin 0.8.x entirely removed the internal miner and we warned
>> people that getwork will be removed in the next major version.? Pooler's CPU
>> minerd which supports both sha256d and scrypt recently grew stratum support.
>> Perhaps he could be convinced to add GBT support too, which would help this
>> goal of completely removing the internal miner and getwork.
> 
> The internal miner is still actively used for testnet, here.

Here, too. If I'm too impatient to wait for the next block that is.

I think it'd be a pity if the easy way to mine blocks would be removed.
__________________________________________________________________
My comments start here.

I agree with Andreas. The mining code in bitcoind & qt is not so hard to improve 
and even use, such as it is. I am sorry to say that using bfgminer is one big, complicated install, 
on Windows at least, AFAICT from looking at the github code bfgminer-2.10.11.zip. 
Seems much more work than I had bringing up bitcoind/qt from the "ground up" on my 
Windows machine. And the mining code is only a small part of the end of main.cpp .
I don't see it harming the rest of the code when I run it in the daemon or Qt.

Can't one mine "from a distance" using the RPC interface now anyway, even with the 
code still there?

I assume that you all would like to have a "seething horde" of new Windows users 
running and using bitcoin? I know that I sure am trying to make that happen. I think 
an integrated, wallet, miner, full node on the net (which I presume bitcoind/bitcoin-qt 
are) is the first step, and maybe should always exist? Though other variations could 
exist too. Could even be a compile Define, like USE_PNP for example, to strip off 
this or that?

So for me, if I want to mine, just because my solar powered laptop has some free cpu 
cycles, I don't mind having a "snow ball's chance in hell" of solving the "next" block. At 
~0.5 MHPS on my CPU it takes me ~2.5 hours to go through all (2^32)-1 nonces for a 
tentative new block, with a particular set of transactions. I only can get "deep" into 
the nonces when one of those +30 minute blocks comes by! And they do from time to time.

I think forcing users to have two computers to mine, or run two programs,? is "pushing it" 
so to speak? And do I also see some wallet removal code being conjured up on git hub?

I think the beauty that is Satoshi's original bitcoin idea should be kept, together in one 
package. If the code was properly commented, formatted, organized , etc.etc., which I 
understand is "postponed" when one is "in the zone" writing code, then I think 
separating the wallet code or mining code, ought to be much easier. 

I feel that the dirty task of at least "calling things by their right names" (as said in the 
Chinese proverb) should be done first. As an example calling the main Berkeley 
database environment class instance of the wallet an abbreviated 5 lower case 
letter cryptic "bitdb" reminds me of the time when ram and disc storage were 
"dear" and compilers couldn't handle "long" names! I would call it something 
much grander! Only 46 places to change ! Also the member DbEnv dbenv 
is equally underplayed as it is the main actor in the play! Let's not even mention pdb 
being used both for a BerkeleyDB? CDB.Db* and as an albeit private leveldb DB*.!

Pointers that aren't called pSomething, un-commented/un-documented magic numbers 
where commented constants should be, and on and on it goes.

So I just sit back doing the clean up on 0.8.1, then .0.8.2, now 0.8.3 while you 
architects march ahead oblivious to the cryptic minefield of code that exists underneath :) 
My aim is to first clean up the code enough so that I can understand it. Then eventually, 
take it over to a real Windows project/solution where it can be made into an executable 
that is palatable for the masses.

Getting off soapbox now and retreating to the back...(bitcointalk.org that is)

Ron
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130821/78e10999/attachment.html>

From gavinandresen at gmail.com  Wed Aug 21 22:19:39 2013
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Thu, 22 Aug 2013 08:19:39 +1000
Subject: [Bitcoin-development] 0.8.4 release candidate 2 : please help test
Message-ID: <CABsx9T0xz+fhb1UmG=T-5PMMRWGN84RK40FsTR=1XuWcuXO6=Q@mail.gmail.com>

0.8.4 release candidate 2 is available at:
  https://sourceforge.net/projects/bitcoin/files/Bitcoin/bitcoin-0.8.4/test/

This is a maintenance release to fix a critical bug and fix three minor
security issues; it contains very few changes from the 0.8.3 release.

The two changes that need testing:

1) OSX FD_FULLSYNC leveldb corruption fix. If you have had trouble with
database corruption on OSX, please try this release and let us know if it
seems to help. Also let us know if you experience any performance problems
with this release.

2) Bloom filter optimization. If you have code that uses the bloom-filtered
block (merkleblock) protocol, please try it against this release and let us
know if you run into any issues.


PS: a critical last-minute bug was found in release candidate 1; it was
never released.

-- 
--
Gavin Andresen
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130822/9ea249a0/attachment.html>

From rob.golding at astutium.com  Wed Aug 21 21:39:13 2013
From: rob.golding at astutium.com (rob.golding at astutium.com)
Date: Wed, 21 Aug 2013 22:39:13 +0100
Subject: [Bitcoin-development] Proposal: remove "getwork" RPC from
 bitcoind
In-Reply-To: <1377120278.34996.YahooMailNeo@web124501.mail.ne1.yahoo.com>
References: <mailman.167053.1376954386.4583.bitcoin-development@lists.sourceforge.net>
	<1377120278.34996.YahooMailNeo@web124501.mail.ne1.yahoo.com>
Message-ID: <6e1e64615be421f47a74bcc427a13485@astutium.com>

> It appears that we will soon be at a hashrate where all the desktop
> CPUs in the world couldn't really make a dent in it... certainly not
> desktop cpus using the slow integrated cpu miner,

I thought the integrated miner was retired a version or so ago - I 
dontrecall seeing it for some time in bitcoin-qt

Now you can buy a USB stick for $20 which can be pushed to around 
500MH/s, and  there's no reason the manufacturers couldn't ship those 
with a miner-program onboard !

Rob



From maciej at bitalo.com  Thu Aug 22 09:36:51 2013
From: maciej at bitalo.com (Maciej Trebacz)
Date: Thu, 22 Aug 2013 11:36:51 +0200
Subject: [Bitcoin-development] Proposal: remove "getwork" RPC from
	bitcoind
In-Reply-To: <6e1e64615be421f47a74bcc427a13485@astutium.com>
References: <mailman.167053.1376954386.4583.bitcoin-development@lists.sourceforge.net>
	<1377120278.34996.YahooMailNeo@web124501.mail.ne1.yahoo.com>
	<6e1e64615be421f47a74bcc427a13485@astutium.com>
Message-ID: <CAD=_8RRU8UAqOUZeawe=XVfT91YtWmVGwDzW+KfkWYj649aZbw@mail.gmail.com>

Will removing "getwork" from the client impact the "setgenerate" RPC call?
I.e. would you still be able to generate coins on testnet-in-a-box this
way, or would you need a dedicated miner for that? testnet-in-a-box is very
useful for testing and easy to setup, it would be great if it stays that
way :).


On Wed, Aug 21, 2013 at 11:39 PM, <rob.golding at astutium.com> wrote:

> > It appears that we will soon be at a hashrate where all the desktop
> > CPUs in the world couldn't really make a dent in it... certainly not
> > desktop cpus using the slow integrated cpu miner,
>
> I thought the integrated miner was retired a version or so ago - I
> dontrecall seeing it for some time in bitcoin-qt
>
> Now you can buy a USB stick for $20 which can be pushed to around
> 500MH/s, and  there's no reason the manufacturers couldn't ship those
> with a miner-program onboard !
>
> Rob
>
>
> ------------------------------------------------------------------------------
> Introducing Performance Central, a new site from SourceForge and
> AppDynamics. Performance Central is your source for news, insights,
> analysis and resources for efficient Application Performance Management.
> Visit us today!
> http://pubads.g.doubleclick.net/gampad/clk?id=48897511&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130822/988a3ab0/attachment.html>

From jgarzik at bitpay.com  Thu Aug 22 13:18:19 2013
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Thu, 22 Aug 2013 09:18:19 -0400
Subject: [Bitcoin-development] Proposal: remove "getwork" RPC from
	bitcoind
In-Reply-To: <CAD=_8RRU8UAqOUZeawe=XVfT91YtWmVGwDzW+KfkWYj649aZbw@mail.gmail.com>
References: <mailman.167053.1376954386.4583.bitcoin-development@lists.sourceforge.net>
	<1377120278.34996.YahooMailNeo@web124501.mail.ne1.yahoo.com>
	<6e1e64615be421f47a74bcc427a13485@astutium.com>
	<CAD=_8RRU8UAqOUZeawe=XVfT91YtWmVGwDzW+KfkWYj649aZbw@mail.gmail.com>
Message-ID: <CAJHLa0OF8bnrBhETbfMcL8gYTqHqP5zbVT8vZN1gbkGbymOQFQ@mail.gmail.com>

On Thu, Aug 22, 2013 at 5:36 AM, Maciej Trebacz <maciej at bitalo.com> wrote:
> Will removing "getwork" from the client impact the "setgenerate" RPC call?
> I.e. would you still be able to generate coins on testnet-in-a-box this way,
> or would you need a dedicated miner for that? testnet-in-a-box is very
> useful for testing and easy to setup, it would be great if it stays that way

Yes, that is currently being discussed in a separate pull request.  My
pull request does not impact setgenerate, but an added proposal does
remove the internal miner completely.

-- 
Jeff Garzik
Senior Software Engineer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From mike at plan99.net  Thu Aug 22 13:33:16 2013
From: mike at plan99.net (Mike Hearn)
Date: Thu, 22 Aug 2013 15:33:16 +0200
Subject: [Bitcoin-development] Proposal: remove "getwork" RPC from
	bitcoind
In-Reply-To: <CAJHLa0OF8bnrBhETbfMcL8gYTqHqP5zbVT8vZN1gbkGbymOQFQ@mail.gmail.com>
References: <mailman.167053.1376954386.4583.bitcoin-development@lists.sourceforge.net>
	<1377120278.34996.YahooMailNeo@web124501.mail.ne1.yahoo.com>
	<6e1e64615be421f47a74bcc427a13485@astutium.com>
	<CAD=_8RRU8UAqOUZeawe=XVfT91YtWmVGwDzW+KfkWYj649aZbw@mail.gmail.com>
	<CAJHLa0OF8bnrBhETbfMcL8gYTqHqP5zbVT8vZN1gbkGbymOQFQ@mail.gmail.com>
Message-ID: <CANEZrP22PaduRgfNv6Cj=wV_3eCt42VTLhLmMWU9PQv_d4g0nA@mail.gmail.com>

That would be annoying for testing. Regtest mode allows you to create a new
block by just running "setgenerate true" (it switches itself off after
creating a block). If you had to set up a complicated set of separate
programs just to do regtest mode that'd be a step backwards, IMO.


On Thu, Aug 22, 2013 at 3:18 PM, Jeff Garzik <jgarzik at bitpay.com> wrote:

> On Thu, Aug 22, 2013 at 5:36 AM, Maciej Trebacz <maciej at bitalo.com> wrote:
> > Will removing "getwork" from the client impact the "setgenerate" RPC
> call?
> > I.e. would you still be able to generate coins on testnet-in-a-box this
> way,
> > or would you need a dedicated miner for that? testnet-in-a-box is very
> > useful for testing and easy to setup, it would be great if it stays that
> way
>
> Yes, that is currently being discussed in a separate pull request.  My
> pull request does not impact setgenerate, but an added proposal does
> remove the internal miner completely.
>
> --
> Jeff Garzik
> Senior Software Engineer and open source evangelist
> BitPay, Inc.      https://bitpay.com/
>
>
> ------------------------------------------------------------------------------
> Introducing Performance Central, a new site from SourceForge and
> AppDynamics. Performance Central is your source for news, insights,
> analysis and resources for efficient Application Performance Management.
> Visit us today!
> http://pubads.g.doubleclick.net/gampad/clk?id=48897511&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130822/c1169168/attachment.html>

From laanwj at gmail.com  Thu Aug 22 15:30:13 2013
From: laanwj at gmail.com (Wladimir)
Date: Thu, 22 Aug 2013 17:30:13 +0200
Subject: [Bitcoin-development] Proposal: remove "getwork" RPC from
	bitcoind
In-Reply-To: <CANEZrP22PaduRgfNv6Cj=wV_3eCt42VTLhLmMWU9PQv_d4g0nA@mail.gmail.com>
References: <mailman.167053.1376954386.4583.bitcoin-development@lists.sourceforge.net>
	<1377120278.34996.YahooMailNeo@web124501.mail.ne1.yahoo.com>
	<6e1e64615be421f47a74bcc427a13485@astutium.com>
	<CAD=_8RRU8UAqOUZeawe=XVfT91YtWmVGwDzW+KfkWYj649aZbw@mail.gmail.com>
	<CAJHLa0OF8bnrBhETbfMcL8gYTqHqP5zbVT8vZN1gbkGbymOQFQ@mail.gmail.com>
	<CANEZrP22PaduRgfNv6Cj=wV_3eCt42VTLhLmMWU9PQv_d4g0nA@mail.gmail.com>
Message-ID: <CA+s+GJC4o5V5p+FY+bgWVUt5umebn4_37bTihfX2q1GF05S=VA@mail.gmail.com>

On Thu, Aug 22, 2013 at 3:33 PM, Mike Hearn <mike at plan99.net> wrote:

> That would be annoying for testing. Regtest mode allows you to create a
> new block by just running "setgenerate true" (it switches itself off after
> creating a block). If you had to set up a complicated set of separate
> programs just to do regtest mode that'd be a step backwards, IMO.
>

There is some consensus that when the internal miner is to be removed, a
simple miner should be packaged with the main repository as separate
program (the "reference miner"?). The only change is that it does no longer
need to burden the core code
(see also the discussion here: https://github.com/bitcoin/bitcoin/pull/2917).


Wladimir
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130822/f37e9189/attachment.html>

From maciej at bitalo.com  Fri Aug 23 06:26:51 2013
From: maciej at bitalo.com (Maciej Trebacz)
Date: Fri, 23 Aug 2013 08:26:51 +0200
Subject: [Bitcoin-development] Way to tell that transaction was issued by a
	specific person/company
Message-ID: <CAD=_8RR=vm0ivpdNg7=bnX_bQ7CC8oZnVi5iWXvbgeBD8W4Ctg@mail.gmail.com>

As far as I know current Bitcoin protocol doesn't let you to include any
arbitrary data with the transactions (as it would become non-standard and
clients would not relay it). So if you have multiple addresses you can't
sign them with a single private key and include that signature in the
transaction so other party can verify it against your public key. This
could become very handy though - a reputable wallet service could issue
transactions that require zero confirmations from the other party,
because with the added signature they know that the transaction is from
this reputable service and they trust that this service won't try to double
spend. I'm thinking of something like Mt.Gox's "green address", but baked
into protocol (Mt.Gox does this by sending your funds to some known by the
others Bitcoin address and then relaying them to the final destination).

Do you think it's possible/feasible to add a feature like this to the
current protocol without forking the chain? This could be as simple as
adding support for following scripts:

<data block> OP_DROP OP_DUP OP_HASH160 <pubKeyHash> OP_EQUALVERIFY OP_CHECK
<data block> OP_DROP OP_HASH160 <pubKeyHash> OP_EQUAL

The <data block> should not be longer than 34 bytes (or more, depending if
we want to have some room for future use cases). This is all that needs to
be changed in the Bitcoin client. Now for actually using the feature a
further definition of <data block> is required:

22 AC 20 <32 byte signature>

22 is data block length and "AC 20" is just a sub-opcode that can be either
defined by the protocol (in this case I'm reusing OP_CHECKSIG's opcode but
that's not required since this is all part of data block) or just agreed
upon between people that want to use this feature.

It's possible that the above could be achieved in some simpler way using
other opcodes or mechanisms present in Bitcoin protocol that I'm not aware
of. Either way, I'd like to hear your opinions whether a feature like this
should be considered and added.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130823/28949a48/attachment.html>

From gmaxwell at gmail.com  Fri Aug 23 06:55:32 2013
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Thu, 22 Aug 2013 23:55:32 -0700
Subject: [Bitcoin-development] Way to tell that transaction was issued
 by a specific person/company
In-Reply-To: <CAD=_8RR=vm0ivpdNg7=bnX_bQ7CC8oZnVi5iWXvbgeBD8W4Ctg@mail.gmail.com>
References: <CAD=_8RR=vm0ivpdNg7=bnX_bQ7CC8oZnVi5iWXvbgeBD8W4Ctg@mail.gmail.com>
Message-ID: <CAAS2fgT4fJ1ED=yqp+0Ym=Z7n+TjqZ759dSOCSO_3MZEvtLhRw@mail.gmail.com>

On Thu, Aug 22, 2013 at 11:26 PM, Maciej Trebacz <maciej at bitalo.com> wrote:
> So if you have multiple addresses you can't
> sign them with a single private key and include that signature in the
> transaction so other party can verify it against your public key. This could
> become very handy though - a reputable wallet service could issue
> transactions that require zero confirmations from the other party, because
> with the added signature they know that the transaction is from this
> reputable service and they trust that this service won't try to double
> spend. I'm thinking of something like Mt.Gox's "green address", but baked
> into protocol (Mt.Gox does this by sending your funds to some known by the
> others Bitcoin address and then relaying them to the final destination).
>
> Do you think it's possible/feasible to add a feature like this to the

It's feasible to do such things but I believe highly undesirable.
You're taking data which is inherently only of short term interest to
a single party in the whole world (the receiver) and enlarging the
transaction and increasing the effective transaction fees while
forcing (say) a hundred thousand other parties to spend effort
transmitting it, processing it, and storing it for all time.

While doing so you also leak to the whole world? who would have
previously had no way or reason to know? who the identity of one of
the parties in the transaction is in a strong cryptographically
non-reputable way... which then lowers the privacy of everyone in the
transaction graph region of that transaction since some coercive force
could send some ninjas out to bust some kneecaps of the identified
party until they tell them where those coins came from and where they
went. If you observe section 10 of Bitcoin.pdf you can see that
privacy in Bitcoin is based _exclusively_ on using pseudonymous
identities on every transaction. If you break that, you remove privacy
from Bitcoin, leaving it at a competitive disadvantage to centeralized
payment systems, which all provide pretty good basic privacy (against
most criminals and nosy neighbors) as a core feature.

Instead: You can simply perform this transaction using the payment
protocol, which could provide along all sorts of additional metadata
including signatures from the relevant parties.  By doing this, only
the parties that need to learn something learn something: privacy is
preserved and bloat is avoided.

If the payment protocol is too heavy handed for you, simply giving the
user a signmessaged txid can show a promise to pay for a transaction
without highly public communication.



From rdwnj at yahoo.com  Fri Aug 23 13:28:58 2013
From: rdwnj at yahoo.com (Ron)
Date: Fri, 23 Aug 2013 06:28:58 -0700 (PDT)
Subject: [Bitcoin-development] Bitcoin-development Digest, Vol 27,
	Issue 33
In-Reply-To: <mailman.173353.1377185424.12996.bitcoin-development@lists.sourceforge.net>
References: <mailman.173353.1377185424.12996.bitcoin-development@lists.sourceforge.net>
Message-ID: <1377264538.81477.YahooMailNeo@web124501.mail.ne1.yahoo.com>





________________________________
Message: 6
Date: Thu, 22 Aug 2013 17:30:13 +0200
From: Wladimir <laanwj at gmail.com>
Subject: Re: [Bitcoin-development] Proposal: remove "getwork" RPC from
??? bitcoind

Message-ID:
??? <CA+s+GJC4o5V5p+FY+bgWVUt5umebn4_37bTihfX2q1GF05S=VA at mail.gmail.com>
Content-Type: text/plain; charset="utf-8"

On Thu, Aug 22, 2013 at 3:33 PM, Mike Hearn <mike at plan99.net> wrote:

> That would be annoying for testing. Regtest mode allows you to create a
> new block by just running "setgenerate true" (it switches itself off after
> creating a block). If you had to set up a complicated set of separate
> programs just to do regtest mode that'd be a step backwards, IMO.
>

There is some consensus that when the internal miner is to be removed, a
simple miner should be packaged with the main repository as separate
program (the "reference miner"?). The only change is that it does no longer
need to burden the core code
(see also the discussion here: https://github.com/bitcoin/bitcoin/pull/2917).


Wladimir
__________________________________________________________
I see no burden to the code when it is not mining, if that is what you mean by
burden. The miner code's hashes/sec are a function of how much CPU time it 
gets. When I am gcc compiling, I see the hashes/sec drop, but bitcoind keeps 
up easily side by side with http://blockchain.info/ latest transactions and 
new blocks. And I only have a single core AMD Athlon 1.8GHz cpu.

I would hate to admit how many browser windows and tabs I have open too,
and an IDE (LOL)!I will admit that I have modified the miner code a little, 
?to use (potentially) every allowable nonce and to check for a new block 
in a timed fashion and be less aggressive, 8 bytes of 0 instead of 4, in checking 
for a potential solution. 

Ron
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130823/9f649a6f/attachment.html>

From mark at monetize.io  Sat Aug 24 00:14:02 2013
From: mark at monetize.io (Mark Friedenbach)
Date: Fri, 23 Aug 2013 17:14:02 -0700
Subject: [Bitcoin-development] Freimarkets: a proposal for user assets,
 distributed exchange, and off-chain txns
Message-ID: <5217FACA.2000102@monetize.io>


-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Off-and-on for the past couple years, Jorge Tim?n and I have been
developing an extension of the Bitcoin and (pre-OpenCoin) Ripple
distributed protocols which enable user-specified bearer instruments,
distributed peer-to-peer exchange, off-chain accounting, auctions,
derivatives and transitive transactions, and the multitude of financial
contracts having such primitives would make possible. The specification
is now reasonably complete enough that we would like to receive input
from the community. The PDF is available for viewing here:

http://freico.in/docs/freimarkets-v0.0.1.pdf

We're looking for public comments about this or related approaches. In
particular we've spent a fair chunk of time working out how to handle
coordination of private accounting servers with the public chain and
derivatives contracts, both of which are basically cryptographic
protocols expressed as bitcoin scripts. Input from any of the resident
cryptographers would be very appreciated.

Happy hacking,
Mark Friedenbach
-----BEGIN PGP SIGNATURE-----
Version: GnuPG/MacGPG2 v2.0.19 (Darwin)
Comment: GPGTools - http://gpgtools.org
Comment: Using GnuPG with Thunderbird - http://www.enigmail.net/

iQIcBAEBAgAGBQJSF/rKAAoJEAdzVfsmodw4xVYP/jLoB6eDlgREawfbcW6kXe4s
25YnP19Hvk0NBk0Fv9G6zhAaOdHlR4dkcq2TueAqGHA+Drtp06eVkWDfqQOioGjx
LrQF6ct9AbBZNN8glo7+JY70hecbEgWeW77cSrDTFxQAWwNnq0hVwVFb6++9rY9+
6Q4jwJtqawWlMYRlFOiK1VW/MvI2WV4bypAjuOYsTnXZ8eFjyO+obZYUuMs6JUWd
XojkDeL60NB6JHVoeyx270bvbP1Of5ErLZRuhC26MA9K4S6jlgfvLCqYBHnjRMHI
KI/K7wqcpbbyldCSIcIsVtSrwBZRUgYfUFEFXvFjwzC0EwgGFwQC3pCqTWzskpo4
KS8ZMpgr7BjI+M0GSpRyh5x0aqZkptaaogCssHzoykmEwm6dyK8cdtdhtFAsGAMs
dYpftZ/NJ17tOkUd22TXpIxWPckFBOmuV/hlr0wFpj50glttMH/8NwqKtGcjO21e
ecuiJzXbjCGlFpKIG+JI5BOXvEeD5VoegsfLTwA9Egkuhh8FXyiqIPUEEV0W1DAC
0CIsX8XmWnKeRBWWa/2AHVuSQlBlut9gX1zRElaU5YSW58zsE3UeVPvSOJOh6ZKZ
eLkRjzuyDrpuJiRKXFdTS857grUhYs+E5xeVkkZWy+q3XqQ7LofcZjp3Xt8tmx4j
LSaZTewUL15MjQR0Ow8a
=xyHR
-----END PGP SIGNATURE-----




From gavinandresen at gmail.com  Wed Aug 28 01:40:28 2013
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Wed, 28 Aug 2013 11:40:28 +1000
Subject: [Bitcoin-development] BIP 72 updated: require Accept HTTP header
Message-ID: <CABsx9T1WD5de-pWH2AsdWYi2RnZ-+upbeFEn4es8H3M3wo_bzw@mail.gmail.com>

I just added a requirement to the BIP 72 (bitcoin: URI payment protocol)
spec:

Wallets must include an Accept HTTP header in HTTP requests:

Accept: application/bitcoin-paymentrequest

... and submitted a pull request so the reference implementation follows
the spec.

Thanks to Stephen/Jeff at BitPay for the suggestion. I'll make a similar
change to BIP 70 and require wallets set Accept:
application/bitcoin-paymentrequestack when sending the Payment and
expecting a PaymentACK message in return.

-- 
--
Gavin Andresen
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130828/5d43f582/attachment.html>

