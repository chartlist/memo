From andyparkins at gmail.com  Wed Feb  1 09:46:31 2012
From: andyparkins at gmail.com (Andy Parkins)
Date: Wed, 1 Feb 2012 09:46:31 +0000
Subject: [Bitcoin-development] BIP16/17 replacement
In-Reply-To: <CAAS2fgTvvDT+acJQfwAGpVNeA2PAQ7wip9xXc-__V2oz-=Kk6Q@mail.gmail.com>
References: <201201311651.02726.andyparkins@gmail.com>
	<CAAS2fgTvvDT+acJQfwAGpVNeA2PAQ7wip9xXc-__V2oz-=Kk6Q@mail.gmail.com>
Message-ID: <201202010946.37807.andyparkins@gmail.com>

On 2012 January 31 Tuesday, Gregory Maxwell wrote:

> I think you've been deceived by people who have some interest in
> promoting this as some sort of big controversy, or perhaps just
> confused by the general level of noise.

Well that's good that there is no real problem.

> It does not, in fact? Yes, it requires a client update to make use of
> the new functionality, but old nodes will happily continue to validate
> things.  It's hard to express how critical this is distinctly.
> Bitcoin is, predominantly, a zero-trust system. Nodes don't trust that
> things were done right, the validate them for themselves.
> 
> A breaking change of the kind you suggest is not something that would
> be considered lightly, and this is certainly not justified for this.

To be brutally honest; I don't see how the BIP16/17 changes are any less 
"breaking" than what I proposed (I'm not trying to push mine; forget it, the 
last thing bitcoin needs is another proposal if there is no real argument).  
I will agree the changes are smaller for BIP16, since the transactions are 
left as they are.

If BIP16/BIP17 were being honest they would too increase the version number 
of the transaction structure.  The new transaction type is not supported by 
the old client... that's a break.  My argument would be that once you're 
going to break the old clients anyway, go the whole hog and fix some other 
stuff as well.

> If we ever were to scrap the system, I think we very much would do
> something like what you describe here... and as much has been
> documented:
> 
> https://en.bitcoin.it/wiki/Hardfork_Wishlist
> (see "Elimination of output scripts")

I'm glad I wasn't talking rubbish then.
 
> But, to be clear, this stuff is pretty much fantasy. I'm doubtful that
> it will ever happen, doubtful that we can get the kind of development

Me too.  Which is a shame; as it means we're locked into quite a fair number 
of earlier decisions that will now never be changed.

> resources required to pull off a true breaking change in a way that
> people would actually trust upgrading to? at least not before a time
> that the system is simply too big to make that kind of change.

Again: I don't see how BIP16/17 aren't "breaking" as well; but perhaps I'm 
just not familiar enough with the conventions.  As far as I understand; no 
pre-BIP16 miner is going to allow BIP16 into the blockchain because it's not 
going to pass the IsStandard() test.

I'd repeat: the reasonable thing to do is to increase the version number of 
the transaction structure to indicate that they are being processed 
differently from old transactions.



Andy
-- 
Dr Andy Parkins
andyparkins at gmail.com
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 198 bytes
Desc: This is a digitally signed message part.
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120201/1fd55c20/attachment.sig>

From andyparkins at gmail.com  Wed Feb  1 09:48:13 2012
From: andyparkins at gmail.com (Andy Parkins)
Date: Wed, 1 Feb 2012 09:48:13 +0000
Subject: [Bitcoin-development] BIP16/17 replacement
In-Reply-To: <201201311158.50801.luke@dashjr.org>
References: <201201311651.02726.andyparkins@gmail.com>
	<201201311158.50801.luke@dashjr.org>
Message-ID: <201202010948.13169.andyparkins@gmail.com>

On 2012 January 31 Tuesday, Luke-Jr wrote:

> Both BIP 16 and 17 are backward compatible enough that people can continue
> to use the old clients with each other. An upgrade is only required to
> send to (or create/receive on) the new 3...-form addresses. That being

Is that true?  (I'm happy to be called wrong)

It doesn't seem like it to me.  The new transaction types will be rejected by 
old clients won't they?  They don't pass IsStandard().


Andy

-- 
Dr Andy Parkins
andyparkins at gmail.com
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 198 bytes
Desc: This is a digitally signed message part.
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120201/bde45eae/attachment.sig>

From pieter.wuille at gmail.com  Wed Feb  1 10:02:08 2012
From: pieter.wuille at gmail.com (Pieter Wuille)
Date: Wed, 1 Feb 2012 11:02:08 +0100
Subject: [Bitcoin-development] BIP16/17 replacement
In-Reply-To: <201202010948.13169.andyparkins@gmail.com>
References: <201201311651.02726.andyparkins@gmail.com>
	<201201311158.50801.luke@dashjr.org>
	<201202010948.13169.andyparkins@gmail.com>
Message-ID: <CAPg+sBgkEd71CUGHooymeVwGkz5axZMOck5o-nic8TM706T8OQ@mail.gmail.com>

Op 1 feb. 2012 10:48 schreef "Andy Parkins" <andyparkins at gmail.com> het
volgende:
>
> On 2012 January 31 Tuesday, Luke-Jr wrote:
>
> > Both BIP 16 and 17 are backward compatible enough that people can
continue
> > to use the old clients with each other. An upgrade is only required to
> > send to (or create/receive on) the new 3...-form addresses. That being
>
> Is that true?  (I'm happy to be called wrong)
>
> It doesn't seem like it to me.  The new transaction types will be
rejected by
> old clients won't they?  They don't pass IsStandard().

IsStandard() is for accepting transactions into the memory pool.
Non-standard transactions are verified just fine when they are in the block
chain.

BIP16/17 both create transactions that, when interpreted as old scripts,
are valid. The only change to the protocol is that previously-valid
transactions become invalid. As long as a supermajority of miners enforce
the new rules, everyone can happily keep using their old bitcoin client.
They won't create the new transaction type, and don't accept them as
payment, but they will accept the new block chain.

If we do a breaking change to the protocol - such as adding a new
transaction type - ALL users must upgrade. Those who don't will see a fork
of the chain from before the first new-style transaction. That is not the
case now.

-- 
Pieter
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120201/a20b0ba6/attachment.html>

From andyparkins at gmail.com  Wed Feb  1 10:25:19 2012
From: andyparkins at gmail.com (Andy Parkins)
Date: Wed, 1 Feb 2012 10:25:19 +0000
Subject: [Bitcoin-development] BIP16/17 replacement
In-Reply-To: <CAPg+sBgkEd71CUGHooymeVwGkz5axZMOck5o-nic8TM706T8OQ@mail.gmail.com>
References: <201201311651.02726.andyparkins@gmail.com>
	<201202010948.13169.andyparkins@gmail.com>
	<CAPg+sBgkEd71CUGHooymeVwGkz5axZMOck5o-nic8TM706T8OQ@mail.gmail.com>
Message-ID: <201202011025.19771.andyparkins@gmail.com>

On 2012 February 01 Wednesday, Pieter Wuille wrote:

> > old clients won't they?  They don't pass IsStandard().
> 
> IsStandard() is for accepting transactions into the memory pool.
> Non-standard transactions are verified just fine when they are in the block
> chain.

Ah.  My misunderstanding then.
 
> If we do a breaking change to the protocol - such as adding a new
> transaction type - ALL users must upgrade. Those who don't will see a fork
> of the chain from before the first new-style transaction. That is not the
> case now.

That makes a big difference.  Thanks for the correction.


Andy


-- 
Dr Andy Parkins
andyparkins at gmail.com
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 198 bytes
Desc: This is a digitally signed message part.
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120201/a82fe52c/attachment.sig>

From andyparkins at gmail.com  Wed Feb  1 14:14:08 2012
From: andyparkins at gmail.com (Andy Parkins)
Date: Wed, 1 Feb 2012 14:14:08 +0000
Subject: [Bitcoin-development] BIP16/17 replacement
In-Reply-To: <201201311651.02726.andyparkins@gmail.com>
References: <201201311651.02726.andyparkins@gmail.com>
Message-ID: <201202011414.12221.andyparkins@gmail.com>

On 2012 January 31 Tuesday, Andy Parkins wrote:

>  - Increase the version number in transactions to make a new transaction
>    structure
>  - Dump the "scriptPubKey" field completely.  Everything will be pay-to-
>    script-hash in version2 transactions
>  - Replace it with "hashOfClaimingScript"
>  - Add an "unsignedParameters" array.

Having thought about it; I've realised that the above is simply BIP16 without 
the backward compatibility work in it.  If BIP16 renamed the scriptPubKey 
field to "hashOfClaimingScript" and no longer ran it as a script, it woudl be 
close to identical.  We'd simply define the field as

 0xa9 0x14 <hashOfClaimingScript> 0x87

Detection of this format of scriptPubKey activates "version2" processing of 
the transaction.  And similarly, a new definition of scriptSig to be two 
fields:

   unsignedInitialStackBlock
   scriptClaim

I'm sure nobody cares about my opinion; but that's actually been the moment 
of epiphany for me (and I raise it here, in case it is for someone else).  
Having previously been against BIP16, I'm now happy with BIP16 -- it's a 
progression towards the ideal... having a literal claimScriptHash field 
instead of scriptPubKey; and never running scriptPubKey.

Potentially OP_CHECKSIG could be simplified as well because the rules could 
be "anything that's not the serialized script" in scriptSig is not signed.

I can imagine one day, when the network is all BIP16 compliant, that 
scriptPubKey will no longer be allowed to run as script at all.



Andy

-- 
Dr Andy Parkins
andyparkins at gmail.com
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 198 bytes
Desc: This is a digitally signed message part.
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120201/c2cd486b/attachment.sig>

From gronager at ceptacle.com  Wed Feb  1 14:18:32 2012
From: gronager at ceptacle.com (=?iso-8859-1?Q?Michael_Gr=F8nager?=)
Date: Wed, 1 Feb 2012 15:18:32 +0100
Subject: [Bitcoin-development] Announcement: libcoin
Message-ID: <D55C3D18-8286-44E9-B877-6FCE7C05E980@ceptacle.com>

Dear Bitcoiners,

libcoin is now in a state ready for its first release, which I would like to share with you!

=== libcoin is a crypto currency library based on the bitcoin/bitcoin "Satoshi" client. ===

Copenhagen, Denmark - 1st February 2012 Ceptacle announces the release of the first version of the crypto currency library "libcoin" based on the bitcoin/bitcoin "Satoshi" client.

libcoin also maintains a version of bitcoind that is a 100% compatible drop-in replacement of the bitcoin/bitcoind client: You can use it on the same computer on the same files and you can call it with the same scripts. And you can easily extend it without touching the basic bitcoin source files.

The libcoin/bitcoind client downloads the entire block chain 3.5 times faster than the bitcoin/bitcoind client. This is less than 90 minutes on a modern laptop!

In libcoin, the Satoshi client code has been completely refactored, properly encapsulating classes, removing all globals, moving from threads and mutexes to a pure asynchronous approach. Functionalities have been divided into logical units and libraries, minimizing dependencies for e.g. thin clients.

libcoin is chain agnostic, all chain (bitcoin, testnet, namecoin, litecoin, ...) specific settings are maintained from a single class (Chain) and hence experiments with chain settings, mining, security and digital currencies for research and educational purposes are easily accessible. See the ponzicoin example for how you define your own chain.

The build system of libcoin is based on CMake and supports builds of static and dynamic libraries on Linux, Mac OS X, and Windows.

The libcoin license is LGPL v. 3. This mean that you can use it in open source as well as in commercial projects, but improvements should go back into the libcoin library.

======

Read more on libcoin on: http://github.com/ceptacle/libcoin/wiki

Join libcoin on twitter: http://twitter.com/libcoin

Download "libcoin Satoshi release": http://github.com/ceptacle/libcoin/zipball/v0.4.0.1

Best regards,

Michael Gronager, PhD
Director, Ceptacle
Jens Juels Gade 33
2100 Copenhagen E
Mobile: +45 31 45 14 01
E-mail: gronager at ceptacle.com
Web: http://www.ceptacle.com/




From gmaxwell at gmail.com  Wed Feb  1 14:59:38 2012
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Wed, 1 Feb 2012 09:59:38 -0500
Subject: [Bitcoin-development] Announcement: libcoin
In-Reply-To: <D55C3D18-8286-44E9-B877-6FCE7C05E980@ceptacle.com>
References: <D55C3D18-8286-44E9-B877-6FCE7C05E980@ceptacle.com>
Message-ID: <CAAS2fgQ+zc_ji+8hzA8kvfBPTSpYVEsDSB6=6k8cC6R9vdfcdg@mail.gmail.com>

On Wed, Feb 1, 2012 at 9:18 AM, Michael Gr?nager <gronager at ceptacle.com> wrote:
> The libcoin/bitcoind client downloads the entire block chain 3.5 times faster than the bitcoin/bitcoind client. This is less than 90 minutes on a modern laptop!

Very interesting. Do you know where this speedup came from?  It's not
typical for straight refactors that don't change datastructures and
the like to see such big speedups.

I see you have commented out code that disables fsync, which was my
first guess since I get big speedups from doing similar things.



From laanwj at gmail.com  Wed Feb  1 15:02:41 2012
From: laanwj at gmail.com (Wladimir)
Date: Wed, 1 Feb 2012 16:02:41 +0100
Subject: [Bitcoin-development] Announcement: libcoin
In-Reply-To: <D55C3D18-8286-44E9-B877-6FCE7C05E980@ceptacle.com>
References: <D55C3D18-8286-44E9-B877-6FCE7C05E980@ceptacle.com>
Message-ID: <CA+s+GJAw+o6dm-gwZPYV=eLfLz+P5O6r70DpmSYnSUERHQz=RQ@mail.gmail.com>

Sounds very nice. Congratulations with the release!

Any plans for porting over bitcoin-qt?

Wladimir
Op 1 feb. 2012 15:19 schreef "Michael Gr?nager" <gronager at ceptacle.com> het
volgende:

> Dear Bitcoiners,
>
> libcoin is now in a state ready for its first release, which I would like
> to share with you!
>
> === libcoin is a crypto currency library based on the bitcoin/bitcoin
> "Satoshi" client. ===
>
> Copenhagen, Denmark - 1st February 2012 Ceptacle announces the release of
> the first version of the crypto currency library "libcoin" based on the
> bitcoin/bitcoin "Satoshi" client.
>
> libcoin also maintains a version of bitcoind that is a 100% compatible
> drop-in replacement of the bitcoin/bitcoind client: You can use it on the
> same computer on the same files and you can call it with the same scripts.
> And you can easily extend it without touching the basic bitcoin source
> files.
>
> The libcoin/bitcoind client downloads the entire block chain 3.5 times
> faster than the bitcoin/bitcoind client. This is less than 90 minutes on a
> modern laptop!
>
> In libcoin, the Satoshi client code has been completely refactored,
> properly encapsulating classes, removing all globals, moving from threads
> and mutexes to a pure asynchronous approach. Functionalities have been
> divided into logical units and libraries, minimizing dependencies for e.g.
> thin clients.
>
> libcoin is chain agnostic, all chain (bitcoin, testnet, namecoin,
> litecoin, ...) specific settings are maintained from a single class (Chain)
> and hence experiments with chain settings, mining, security and digital
> currencies for research and educational purposes are easily accessible. See
> the ponzicoin example for how you define your own chain.
>
> The build system of libcoin is based on CMake and supports builds of
> static and dynamic libraries on Linux, Mac OS X, and Windows.
>
> The libcoin license is LGPL v. 3. This mean that you can use it in open
> source as well as in commercial projects, but improvements should go back
> into the libcoin library.
>
> ======
>
> Read more on libcoin on: http://github.com/ceptacle/libcoin/wiki
>
> Join libcoin on twitter: http://twitter.com/libcoin
>
> Download "libcoin Satoshi release":
> http://github.com/ceptacle/libcoin/zipball/v0.4.0.1
>
> Best regards,
>
> Michael Gronager, PhD
> Director, Ceptacle
> Jens Juels Gade 33
> 2100 Copenhagen E
> Mobile: +45 31 45 14 01
> E-mail: gronager at ceptacle.com
> Web: http://www.ceptacle.com/
>
>
>
> ------------------------------------------------------------------------------
> Keep Your Developer Skills Current with LearnDevNow!
> The most comprehensive online learning library for Microsoft developers
> is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3, MVC3,
> Metro Style Apps, more. Free future releases when you subscribe now!
> http://p.sf.net/sfu/learndevnow-d2d
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120201/50680bfc/attachment.html>

From slush at centrum.cz  Wed Feb  1 15:09:58 2012
From: slush at centrum.cz (slush)
Date: Wed, 1 Feb 2012 16:09:58 +0100
Subject: [Bitcoin-development] Announcement: libcoin
In-Reply-To: <D55C3D18-8286-44E9-B877-6FCE7C05E980@ceptacle.com>
References: <D55C3D18-8286-44E9-B877-6FCE7C05E980@ceptacle.com>
Message-ID: <CAJna-HiS34V5rNrRfFOMRJ6JhRmS1aeEE3oA=o07Hgf4S6qNfw@mail.gmail.com>

Very interesting. Do you have any plans to push your refactored code into
Bitcoin upstream for future releases someday?

slush

On Wed, Feb 1, 2012 at 3:18 PM, Michael Gr?nager <gronager at ceptacle.com>wrote:

> Dear Bitcoiners,
>
> libcoin is now in a state ready for its first release, which I would like
> to share with you!
>
> === libcoin is a crypto currency library based on the bitcoin/bitcoin
> "Satoshi" client. ===
>
> Copenhagen, Denmark - 1st February 2012 Ceptacle announces the release of
> the first version of the crypto currency library "libcoin" based on the
> bitcoin/bitcoin "Satoshi" client.
>
> libcoin also maintains a version of bitcoind that is a 100% compatible
> drop-in replacement of the bitcoin/bitcoind client: You can use it on the
> same computer on the same files and you can call it with the same scripts.
> And you can easily extend it without touching the basic bitcoin source
> files.
>
> The libcoin/bitcoind client downloads the entire block chain 3.5 times
> faster than the bitcoin/bitcoind client. This is less than 90 minutes on a
> modern laptop!
>
> In libcoin, the Satoshi client code has been completely refactored,
> properly encapsulating classes, removing all globals, moving from threads
> and mutexes to a pure asynchronous approach. Functionalities have been
> divided into logical units and libraries, minimizing dependencies for e.g.
> thin clients.
>
> libcoin is chain agnostic, all chain (bitcoin, testnet, namecoin,
> litecoin, ...) specific settings are maintained from a single class (Chain)
> and hence experiments with chain settings, mining, security and digital
> currencies for research and educational purposes are easily accessible. See
> the ponzicoin example for how you define your own chain.
>
> The build system of libcoin is based on CMake and supports builds of
> static and dynamic libraries on Linux, Mac OS X, and Windows.
>
> The libcoin license is LGPL v. 3. This mean that you can use it in open
> source as well as in commercial projects, but improvements should go back
> into the libcoin library.
>
> ======
>
> Read more on libcoin on: http://github.com/ceptacle/libcoin/wiki
>
> Join libcoin on twitter: http://twitter.com/libcoin
>
> Download "libcoin Satoshi release":
> http://github.com/ceptacle/libcoin/zipball/v0.4.0.1
>
> Best regards,
>
> Michael Gronager, PhD
> Director, Ceptacle
> Jens Juels Gade 33
> 2100 Copenhagen E
> Mobile: +45 31 45 14 01
> E-mail: gronager at ceptacle.com
> Web: http://www.ceptacle.com/
>
>
>
> ------------------------------------------------------------------------------
> Keep Your Developer Skills Current with LearnDevNow!
> The most comprehensive online learning library for Microsoft developers
> is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3, MVC3,
> Metro Style Apps, more. Free future releases when you subscribe now!
> http://p.sf.net/sfu/learndevnow-d2d
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120201/da513105/attachment.html>

From luke at dashjr.org  Wed Feb  1 15:26:45 2012
From: luke at dashjr.org (Luke-Jr)
Date: Wed, 1 Feb 2012 10:26:45 -0500
Subject: [Bitcoin-development] Announcement: libcoin
In-Reply-To: <D55C3D18-8286-44E9-B877-6FCE7C05E980@ceptacle.com>
References: <D55C3D18-8286-44E9-B877-6FCE7C05E980@ceptacle.com>
Message-ID: <201202011026.47038.luke@dashjr.org>

On Wednesday, February 01, 2012 9:18:32 AM Michael Gr?nager wrote:
> libcoin is now in a state ready for its first release, which I would like
> to share with you!

Looks interesting. However, it doesn't configure for me:
    http://paste.pocoo.org/show/544135/

I noticed it's forked from bitcoind 0.4.x. Do you plan to merge up to 0.5.x?

Luke



From gronager at ceptacle.com  Wed Feb  1 15:50:46 2012
From: gronager at ceptacle.com (=?iso-8859-1?Q?Michael_Gr=F8nager?=)
Date: Wed, 1 Feb 2012 16:50:46 +0100
Subject: [Bitcoin-development] Announcement: libcoin
In-Reply-To: <CAAS2fgQ+zc_ji+8hzA8kvfBPTSpYVEsDSB6=6k8cC6R9vdfcdg@mail.gmail.com>
References: <D55C3D18-8286-44E9-B877-6FCE7C05E980@ceptacle.com>
	<CAAS2fgQ+zc_ji+8hzA8kvfBPTSpYVEsDSB6=6k8cC6R9vdfcdg@mail.gmail.com>
Message-ID: <A9838AA4-C010-470C-9F91-9C1DC43F6BEA@ceptacle.com>

Hi Gregory,

I played with the database sync as well to get further speedups, but in the latest version I could only get about 1% extra from this. 

In the Satoshi client there is a bunch of sleeps and mutexes (put in there with great generosity)  for making threads run smoother and to avoid deadlock I guess.

The big change in speed came from moving from the threading based setup to the async based setup, so I think these are the culprit. Further, as I also write somewhere in the wiki. I can measure that 50% of the time is consumed in verify, so there is not much left to optimize now. Actually, Berkeley DB does a quite decent job in caching reads so not even a cache should help.

Cheers,

M

On 01/02/2012, at 15:59, Gregory Maxwell wrote:

> On Wed, Feb 1, 2012 at 9:18 AM, Michael Gr?nager <gronager at ceptacle.com> wrote:
>> The libcoin/bitcoind client downloads the entire block chain 3.5 times faster than the bitcoin/bitcoind client. This is less than 90 minutes on a modern laptop!
> 
> Very interesting. Do you know where this speedup came from?  It's not
> typical for straight refactors that don't change datastructures and
> the like to see such big speedups.
> 
> I see you have commented out code that disables fsync, which was my
> first guess since I get big speedups from doing similar things.

Michael Gronager, PhD
Director, Ceptacle
Jens Juels Gade 33
2100 Copenhagen E
Mobile: +45 31 45 14 01
E-mail: gronager at ceptacle.com
Web: http://www.ceptacle.com/




From gronager at ceptacle.com  Wed Feb  1 15:52:15 2012
From: gronager at ceptacle.com (=?iso-8859-1?Q?Michael_Gr=F8nager?=)
Date: Wed, 1 Feb 2012 16:52:15 +0100
Subject: [Bitcoin-development] Announcement: libcoin
In-Reply-To: <CA+s+GJAw+o6dm-gwZPYV=eLfLz+P5O6r70DpmSYnSUERHQz=RQ@mail.gmail.com>
References: <D55C3D18-8286-44E9-B877-6FCE7C05E980@ceptacle.com>
	<CA+s+GJAw+o6dm-gwZPYV=eLfLz+P5O6r70DpmSYnSUERHQz=RQ@mail.gmail.com>
Message-ID: <7ABD75E9-96F4-4DFF-BAB1-35300BA799EF@ceptacle.com>

Well, it should be simple. libcoin separates all the stuff you would like to do from a gui from the actual code, so I think it could be done cleanly. I havn't looked much at qt though... But help would be appreciated ;)

/M

On 01/02/2012, at 16:02, Wladimir wrote:

> Sounds very nice. Congratulations with the release!
> 
> Any plans for porting over bitcoin-qt?
> 
> Wladimir
> 
> Op 1 feb. 2012 15:19 schreef "Michael Gr?nager" <gronager at ceptacle.com> het volgende:
> Dear Bitcoiners,
> 
> libcoin is now in a state ready for its first release, which I would like to share with you!
> 
> === libcoin is a crypto currency library based on the bitcoin/bitcoin "Satoshi" client. ===
> 
> Copenhagen, Denmark - 1st February 2012 Ceptacle announces the release of the first version of the crypto currency library "libcoin" based on the bitcoin/bitcoin "Satoshi" client.
> 
> libcoin also maintains a version of bitcoind that is a 100% compatible drop-in replacement of the bitcoin/bitcoind client: You can use it on the same computer on the same files and you can call it with the same scripts. And you can easily extend it without touching the basic bitcoin source files.
> 
> The libcoin/bitcoind client downloads the entire block chain 3.5 times faster than the bitcoin/bitcoind client. This is less than 90 minutes on a modern laptop!
> 
> In libcoin, the Satoshi client code has been completely refactored, properly encapsulating classes, removing all globals, moving from threads and mutexes to a pure asynchronous approach. Functionalities have been divided into logical units and libraries, minimizing dependencies for e.g. thin clients.
> 
> libcoin is chain agnostic, all chain (bitcoin, testnet, namecoin, litecoin, ...) specific settings are maintained from a single class (Chain) and hence experiments with chain settings, mining, security and digital currencies for research and educational purposes are easily accessible. See the ponzicoin example for how you define your own chain.
> 
> The build system of libcoin is based on CMake and supports builds of static and dynamic libraries on Linux, Mac OS X, and Windows.
> 
> The libcoin license is LGPL v. 3. This mean that you can use it in open source as well as in commercial projects, but improvements should go back into the libcoin library.
> 
> ======
> 
> Read more on libcoin on: http://github.com/ceptacle/libcoin/wiki
> 
> Join libcoin on twitter: http://twitter.com/libcoin
> 
> Download "libcoin Satoshi release": http://github.com/ceptacle/libcoin/zipball/v0.4.0.1
> 
> Best regards,
> 
> Michael Gronager, PhD
> Director, Ceptacle
> Jens Juels Gade 33
> 2100 Copenhagen E
> Mobile: +45 31 45 14 01
> E-mail: gronager at ceptacle.com
> Web: http://www.ceptacle.com/
> 
> 
> ------------------------------------------------------------------------------
> Keep Your Developer Skills Current with LearnDevNow!
> The most comprehensive online learning library for Microsoft developers
> is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3, MVC3,
> Metro Style Apps, more. Free future releases when you subscribe now!
> http://p.sf.net/sfu/learndevnow-d2d
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development

Michael Gronager, PhD
Director, Ceptacle
Jens Juels Gade 33
2100 Copenhagen E
Mobile: +45 31 45 14 01
E-mail: gronager at ceptacle.com
Web: http://www.ceptacle.com/




From gronager at ceptacle.com  Wed Feb  1 15:57:32 2012
From: gronager at ceptacle.com (=?iso-8859-1?Q?Michael_Gr=F8nager?=)
Date: Wed, 1 Feb 2012 16:57:32 +0100
Subject: [Bitcoin-development] Announcement: libcoin
In-Reply-To: <CAJna-HiS34V5rNrRfFOMRJ6JhRmS1aeEE3oA=o07Hgf4S6qNfw@mail.gmail.com>
References: <D55C3D18-8286-44E9-B877-6FCE7C05E980@ceptacle.com>
	<CAJna-HiS34V5rNrRfFOMRJ6JhRmS1aeEE3oA=o07Hgf4S6qNfw@mail.gmail.com>
Message-ID: <54950761-EBFB-402E-8D7B-0B54A08260D2@ceptacle.com>

Would be fine for me, depends on the community, and it is one of those chunks that make many stall...

The reason for building on bitcoin/bitcoin directly is that this created a history of all changes, and this way I had a working version running each day while doing the refactoring - with my wallet at stake!

However, I think perhaps the bitcoin project should be split into a library, with a prototype client and the actual clients. This library facilitates this.

Cheers,

M

On 01/02/2012, at 16:09, slush wrote:

> Very interesting. Do you have any plans to push your refactored code into Bitcoin upstream for future releases someday?
> 
> slush
> 
> On Wed, Feb 1, 2012 at 3:18 PM, Michael Gr?nager <gronager at ceptacle.com> wrote:
> Dear Bitcoiners,
> 
> libcoin is now in a state ready for its first release, which I would like to share with you!
> 
> === libcoin is a crypto currency library based on the bitcoin/bitcoin "Satoshi" client. ===
> 
> Copenhagen, Denmark - 1st February 2012 Ceptacle announces the release of the first version of the crypto currency library "libcoin" based on the bitcoin/bitcoin "Satoshi" client.
> 
> libcoin also maintains a version of bitcoind that is a 100% compatible drop-in replacement of the bitcoin/bitcoind client: You can use it on the same computer on the same files and you can call it with the same scripts. And you can easily extend it without touching the basic bitcoin source files.
> 
> The libcoin/bitcoind client downloads the entire block chain 3.5 times faster than the bitcoin/bitcoind client. This is less than 90 minutes on a modern laptop!
> 
> In libcoin, the Satoshi client code has been completely refactored, properly encapsulating classes, removing all globals, moving from threads and mutexes to a pure asynchronous approach. Functionalities have been divided into logical units and libraries, minimizing dependencies for e.g. thin clients.
> 
> libcoin is chain agnostic, all chain (bitcoin, testnet, namecoin, litecoin, ...) specific settings are maintained from a single class (Chain) and hence experiments with chain settings, mining, security and digital currencies for research and educational purposes are easily accessible. See the ponzicoin example for how you define your own chain.
> 
> The build system of libcoin is based on CMake and supports builds of static and dynamic libraries on Linux, Mac OS X, and Windows.
> 
> The libcoin license is LGPL v. 3. This mean that you can use it in open source as well as in commercial projects, but improvements should go back into the libcoin library.
> 
> ======
> 
> Read more on libcoin on: http://github.com/ceptacle/libcoin/wiki
> 
> Join libcoin on twitter: http://twitter.com/libcoin
> 
> Download "libcoin Satoshi release": http://github.com/ceptacle/libcoin/zipball/v0.4.0.1
> 
> Best regards,
> 
> Michael Gronager, PhD
> Director, Ceptacle
> Jens Juels Gade 33
> 2100 Copenhagen E
> Mobile: +45 31 45 14 01
> E-mail: gronager at ceptacle.com
> Web: http://www.ceptacle.com/
> 
> 
> ------------------------------------------------------------------------------
> Keep Your Developer Skills Current with LearnDevNow!
> The most comprehensive online learning library for Microsoft developers
> is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3, MVC3,
> Metro Style Apps, more. Free future releases when you subscribe now!
> http://p.sf.net/sfu/learndevnow-d2d
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 

Michael Gronager, PhD
Director, Ceptacle
Jens Juels Gade 33
2100 Copenhagen E
Mobile: +45 31 45 14 01
E-mail: gronager at ceptacle.com
Web: http://www.ceptacle.com/




From gronager at ceptacle.com  Wed Feb  1 15:58:28 2012
From: gronager at ceptacle.com (=?iso-8859-1?Q?Michael_Gr=F8nager?=)
Date: Wed, 1 Feb 2012 16:58:28 +0100
Subject: [Bitcoin-development] Announcement: libcoin
In-Reply-To: <201202011026.47038.luke@dashjr.org>
References: <D55C3D18-8286-44E9-B877-6FCE7C05E980@ceptacle.com>
	<201202011026.47038.luke@dashjr.org>
Message-ID: <0D93CE85-1FCA-49E3-88F0-A08DF1B69B6F@ceptacle.com>

Hi Luke,

Your CMake cannot find boost - use ccmake or cmake-gui to help it with the location. Btw what platform are you using ?

/M

On 01/02/2012, at 16:26, Luke-Jr wrote:

> On Wednesday, February 01, 2012 9:18:32 AM Michael Gr?nager wrote:
>> libcoin is now in a state ready for its first release, which I would like
>> to share with you!
> 
> Looks interesting. However, it doesn't configure for me:
>    http://paste.pocoo.org/show/544135/
> 
> I noticed it's forked from bitcoind 0.4.x. Do you plan to merge up to 0.5.x?
> 
> Luke

Michael Gronager, PhD
Director, Ceptacle
Jens Juels Gade 33
2100 Copenhagen E
Mobile: +45 31 45 14 01
E-mail: gronager at ceptacle.com
Web: http://www.ceptacle.com/




From timon.elviejo at gmail.com  Wed Feb  1 16:06:13 2012
From: timon.elviejo at gmail.com (=?ISO-8859-1?Q?Jorge_Tim=F3n?=)
Date: Wed, 1 Feb 2012 17:06:13 +0100
Subject: [Bitcoin-development] Announcement: libcoin
In-Reply-To: <A9838AA4-C010-470C-9F91-9C1DC43F6BEA@ceptacle.com>
References: <D55C3D18-8286-44E9-B877-6FCE7C05E980@ceptacle.com>
	<CAAS2fgQ+zc_ji+8hzA8kvfBPTSpYVEsDSB6=6k8cC6R9vdfcdg@mail.gmail.com>
	<A9838AA4-C010-470C-9F91-9C1DC43F6BEA@ceptacle.com>
Message-ID: <CAGQP0AGwU+s3mVReneH0qL98frBbvmitMcdyeQMbEgHiQNADQg@mail.gmail.com>

Sounds great.
Does it support merged mining?
Also, I'm a bit skeptic about it being chain agnostic. I want to
implement a chain with demurrage and I think I'll need to also change
coinWallet and not only create an implementation of the interface
Chain.
Anyway, this will make the task much easier. Thank you.
Until I have the time to code it, there's a little bounty (7.3 btc)
for this in case you're interested.



From luke at dashjr.org  Wed Feb  1 16:15:14 2012
From: luke at dashjr.org (Luke-Jr)
Date: Wed, 1 Feb 2012 11:15:14 -0500
Subject: [Bitcoin-development] Announcement: libcoin
In-Reply-To: <0D93CE85-1FCA-49E3-88F0-A08DF1B69B6F@ceptacle.com>
References: <D55C3D18-8286-44E9-B877-6FCE7C05E980@ceptacle.com>
	<201202011026.47038.luke@dashjr.org>
	<0D93CE85-1FCA-49E3-88F0-A08DF1B69B6F@ceptacle.com>
Message-ID: <201202011115.15559.luke@dashjr.org>

On Wednesday, February 01, 2012 10:58:28 AM Michael Gr?nager wrote:
> Your CMake cannot find boost - use ccmake or cmake-gui to help it with the
> location.

I didn't see anything useful in ccmake. Boost is in the standard locations 
(/usr/include/boost/ and /usr/lib/libboost*

> Btw what platform are you using ?

Gentoo



From gronager at ceptacle.com  Wed Feb  1 16:20:22 2012
From: gronager at ceptacle.com (=?iso-8859-1?Q?Michael_Gr=F8nager?=)
Date: Wed, 1 Feb 2012 17:20:22 +0100
Subject: [Bitcoin-development] Announcement: libcoin
In-Reply-To: <201202011026.47038.luke@dashjr.org>
References: <D55C3D18-8286-44E9-B877-6FCE7C05E980@ceptacle.com>
	<201202011026.47038.luke@dashjr.org>
Message-ID: <99D998E7-B06B-4148-B2C3-B996E4D532C4@ceptacle.com>

OK - from your path it looks like linux. What version of Boost do you use. I require 1.47 or 1.48. - I will change that, but it is quite handy for signal_sets - will make an alternative scheme though.

And, as for 0.4 vs 0.5 - I have tried to follow the changes, which were mostly (?) related to the integration of the qt client, which would have to be re-done anyway. Then there were some deadlock fixes, that I don't need ;). A fix for a special attack, that I have included. But I will go over everything again.

Cheers,

M



On 01/02/2012, at 16:26, Luke-Jr wrote:

> On Wednesday, February 01, 2012 9:18:32 AM Michael Gr?nager wrote:
>> libcoin is now in a state ready for its first release, which I would like
>> to share with you!
> 
> Looks interesting. However, it doesn't configure for me:
>    http://paste.pocoo.org/show/544135/
> 
> I noticed it's forked from bitcoind 0.4.x. Do you plan to merge up to 0.5.x?
> 
> Luke

Michael Gronager, PhD
Director, Ceptacle
Jens Juels Gade 33
2100 Copenhagen E
Mobile: +45 31 45 14 01
E-mail: gronager at ceptacle.com
Web: http://www.ceptacle.com/




From gronager at ceptacle.com  Wed Feb  1 16:21:09 2012
From: gronager at ceptacle.com (=?iso-8859-1?Q?Michael_Gr=F8nager?=)
Date: Wed, 1 Feb 2012 17:21:09 +0100
Subject: [Bitcoin-development] Announcement: libcoin
In-Reply-To: <201202011115.15559.luke@dashjr.org>
References: <D55C3D18-8286-44E9-B877-6FCE7C05E980@ceptacle.com>
	<201202011026.47038.luke@dashjr.org>
	<0D93CE85-1FCA-49E3-88F0-A08DF1B69B6F@ceptacle.com>
	<201202011115.15559.luke@dashjr.org>
Message-ID: <1C34117F-7F0F-486C-82D3-9254BDA1AAC1@ceptacle.com>

Just wrote it in another mail, but I am quite certain it is the boost version - you need 1.48 (or 1.47).

/M

On 01/02/2012, at 17:15, Luke-Jr wrote:

> On Wednesday, February 01, 2012 10:58:28 AM Michael Gr?nager wrote:
>> Your CMake cannot find boost - use ccmake or cmake-gui to help it with the
>> location.
> 
> I didn't see anything useful in ccmake. Boost is in the standard locations 
> (/usr/include/boost/ and /usr/lib/libboost*
> 
>> Btw what platform are you using ?
> 
> Gentoo

Michael Gronager, PhD
Director, Ceptacle
Jens Juels Gade 33
2100 Copenhagen E
Mobile: +45 31 45 14 01
E-mail: gronager at ceptacle.com
Web: http://www.ceptacle.com/




From luke at dashjr.org  Wed Feb  1 16:23:21 2012
From: luke at dashjr.org (Luke-Jr)
Date: Wed, 1 Feb 2012 11:23:21 -0500
Subject: [Bitcoin-development] Announcement: libcoin
In-Reply-To: <99D998E7-B06B-4148-B2C3-B996E4D532C4@ceptacle.com>
References: <D55C3D18-8286-44E9-B877-6FCE7C05E980@ceptacle.com>
	<201202011026.47038.luke@dashjr.org>
	<99D998E7-B06B-4148-B2C3-B996E4D532C4@ceptacle.com>
Message-ID: <201202011123.22554.luke@dashjr.org>

On Wednesday, February 01, 2012 11:20:22 AM Michael Gr?nager wrote:
> OK - from your path it looks like linux. What version of Boost do you use.
> I require 1.47 or 1.48. - I will change that, but it is quite handy for
> signal_sets - will make an alternative scheme though.

Boost 1.46.1 is the latest stable on Gentoo.

> And, as for 0.4 vs 0.5 - I have tried to follow the changes, which were
> mostly (?) related to the integration of the qt client, which would have
> to be re-done anyway. Then there were some deadlock fixes, that I don't
> need ;). A fix for a special attack, that I have included. But I will go
> over everything again.

Perhaps it would be easier to merge with the latest 0.4.x branch:
    git://gitorious.org/+bitcoin-stable-developers/bitcoin/bitcoind-stable.git



From makosoft at gmail.com  Wed Feb  1 16:23:49 2012
From: makosoft at gmail.com (Aidan Thornton)
Date: Wed, 1 Feb 2012 16:23:49 +0000
Subject: [Bitcoin-development] Announcement: libcoin
In-Reply-To: <201202011115.15559.luke@dashjr.org>
References: <D55C3D18-8286-44E9-B877-6FCE7C05E980@ceptacle.com>
	<201202011026.47038.luke@dashjr.org>
	<0D93CE85-1FCA-49E3-88F0-A08DF1B69B6F@ceptacle.com>
	<201202011115.15559.luke@dashjr.org>
Message-ID: <CAB=c7Tpr+CkAVQvf7n_Tn_5cRA2e57xZowDDrt1x1qDMkuknYQ@mail.gmail.com>

On Wed, Feb 1, 2012 at 4:15 PM, Luke-Jr <luke at dashjr.org> wrote:
> On Wednesday, February 01, 2012 10:58:28 AM Michael Gr?nager wrote:
>> Your CMake cannot find boost - use ccmake or cmake-gui to help it with the
>> location.
>
> I didn't see anything useful in ccmake. Boost is in the standard locations
> (/usr/include/boost/ and /usr/lib/libboost*

The error about not finding boost is a red herring and as far as I can
tell bogus. The problem is that it finds Qt and tries to configure
some Qt code that doesn't seem to have actually been released. Try
http://pastebin.ca/2108766

>> Btw what platform are you using ?
>
> Gentoo

Also, you'll probably need to set BDB_INCLUDE_PATH manually or it
won't find db.h

Hope this helps,
Aidan



From luke at dashjr.org  Wed Feb  1 17:37:39 2012
From: luke at dashjr.org (Luke-Jr)
Date: Wed, 1 Feb 2012 12:37:39 -0500
Subject: [Bitcoin-development] Announcement: libcoin
In-Reply-To: <99D998E7-B06B-4148-B2C3-B996E4D532C4@ceptacle.com>
References: <D55C3D18-8286-44E9-B877-6FCE7C05E980@ceptacle.com>
	<201202011026.47038.luke@dashjr.org>
	<99D998E7-B06B-4148-B2C3-B996E4D532C4@ceptacle.com>
Message-ID: <201202011237.40546.luke@dashjr.org>

On Wednesday, February 01, 2012 11:20:22 AM Michael Gr?nager wrote:
> OK - from your path it looks like linux. What version of Boost do you use.
> I require 1.47 or 1.48. - I will change that, but it is quite handy for
> signal_sets - will make an alternative scheme though.

Upgrading to 1.47 did not change the error at all... :/



From gronager at ceptacle.com  Wed Feb  1 17:51:14 2012
From: gronager at ceptacle.com (=?iso-8859-1?Q?Michael_Gr=F8nager?=)
Date: Wed, 1 Feb 2012 18:51:14 +0100
Subject: [Bitcoin-development] Announcement: libcoin
In-Reply-To: <201202011237.40546.luke@dashjr.org>
References: <D55C3D18-8286-44E9-B877-6FCE7C05E980@ceptacle.com>
	<201202011026.47038.luke@dashjr.org>
	<99D998E7-B06B-4148-B2C3-B996E4D532C4@ceptacle.com>
	<201202011237.40546.luke@dashjr.org>
Message-ID: <C7EEA789-C5BD-43E6-B2E7-158995534D58@ceptacle.com>

In the CMakeLists.txt file in the libcoin root find the lines regarding Boost - it says 

... 1.48  ...

Change that to 1.47 and try again. I suggest you first remove your CMakeCache.txt though...

(the Qt stuff is most likely not the culprit)

/M



On 01/02/2012, at 18:37, Luke-Jr wrote:

> On Wednesday, February 01, 2012 11:20:22 AM Michael Gr?nager wrote:
>> OK - from your path it looks like linux. What version of Boost do you use.
>> I require 1.47 or 1.48. - I will change that, but it is quite handy for
>> signal_sets - will make an alternative scheme though.
> 
> Upgrading to 1.47 did not change the error at all... :/

Michael Gronager, PhD
Director, Ceptacle
Jens Juels Gade 33
2100 Copenhagen E
Mobile: +45 31 45 14 01
E-mail: gronager at ceptacle.com
Web: http://www.ceptacle.com/




From grarpamp at gmail.com  Wed Feb  1 23:50:57 2012
From: grarpamp at gmail.com (grarpamp)
Date: Wed, 1 Feb 2012 18:50:57 -0500
Subject: [Bitcoin-development] Announcement: libcoin
In-Reply-To: <54950761-EBFB-402E-8D7B-0B54A08260D2@ceptacle.com>
References: <D55C3D18-8286-44E9-B877-6FCE7C05E980@ceptacle.com>
	<CAJna-HiS34V5rNrRfFOMRJ6JhRmS1aeEE3oA=o07Hgf4S6qNfw@mail.gmail.com>
	<54950761-EBFB-402E-8D7B-0B54A08260D2@ceptacle.com>
Message-ID: <CAD2Ti29cto8wS1jO5yOkORbE48c+t6Of2vysXcA0xM9LKCOCgg@mail.gmail.com>

> However, I think perhaps the bitcoin project should be split into a library, with a prototype client and the actual clients. This library facilitates this.

I'll be trying your implementation soon. And libbitcoin/subvertx too.
Partly because they're also non-interpreted, and partly to what seems
better architected...

To the minimal extent of my understanding... I'd like to see wallet
ops completely separated from background chain ops. ie: have
a chain daemon doing it's thing, updating, verifying, etc. The
generator doing it's thing. And a wallet app that can independently
manage separate wallets in parallel, referencing the live chain files
as needed. It seems a library would allow quality focus on the separate
functions and let apps/ui's use the fn's as desired on top. Right now, it
seems I have to run bitcoind and can only deal with one wallet at a time,
having to stop it, deal with state issues, swap in a new wallet, start
it, and repeat till illness ensues :( And when the chain is being processed
hard by the daemon cpuwise, bitcoin RPC takes minutes to respond, if ever
or errors out. If wallet ops or statistical queries on the chain need it for
integrity or reading, a db checkpoint/lock/logroll could be implemented into
the chain demon processes with a client lib api to trigger it as needed.
Don't know, just saying.

fyi... boost 1.48 and db 4.8.30 work fine with 0.5.2, 0.5.x, and master,
you just need to compile and include it by hand if you want it and
your package manager doesn't have it.



From gronager at ceptacle.com  Thu Feb  2 08:32:24 2012
From: gronager at ceptacle.com (=?iso-8859-1?Q?Michael_Gr=F8nager?=)
Date: Thu, 2 Feb 2012 09:32:24 +0100
Subject: [Bitcoin-development] Announcement: libcoin
In-Reply-To: <CAD2Ti29cto8wS1jO5yOkORbE48c+t6Of2vysXcA0xM9LKCOCgg@mail.gmail.com>
References: <D55C3D18-8286-44E9-B877-6FCE7C05E980@ceptacle.com>
	<CAJna-HiS34V5rNrRfFOMRJ6JhRmS1aeEE3oA=o07Hgf4S6qNfw@mail.gmail.com>
	<54950761-EBFB-402E-8D7B-0B54A08260D2@ceptacle.com>
	<CAD2Ti29cto8wS1jO5yOkORbE48c+t6Of2vysXcA0xM9LKCOCgg@mail.gmail.com>
Message-ID: <4CE9708D-0627-480C-B928-3F812544CD90@ceptacle.com>

I agree on your architectural considerations - and with libcoin you can have several wallets in the same application ( and several RPC servers for that matter). And ... they all use the same Node / blockchain.

You will also find the RPC server in libcoin blistering fast compared to the Satoshi client. (It was actually what got me to write libcoin in the first place...). The Satoshi client HTTP server executes all rpc commands in its own thread, but to do so, it needs to stop the thread of the Node, even though the command executed is just a query (i.e. not a SendTo), you hence have two threads blocking each other and when they wait, you wait... In libcoin all the query methods access the blockChain as a const object and they can hence safely query it without intervening the work of the Node thread. The exception are the SendTo methods that first query if a transaction can take place, then pushes it to the work-queue of the Node thread and again exits immediately. The actual execution then follows once the Node has finished its current tasks (e.g. validating a block).

I have attached the code for a very simple one node, two wallet, libcoin client below (~30 lines), and I have added it to the libcoin source as an example (example name: extrawallets).

Once running, you can access your extra wallet using the RPC interface:
./extrawallet extragetbalance
And youy normal wallet by:
./extrawallet getbalance

I'll leave the generalization to an n-wallet gui application to the reader ;)

Cheers,

Michael

....

// The derived classes below are only to get other class names (using the auto rpc name feature)
// I will put adding a "setName" method to the Method class on the todo. 
class ExtraGetBalance : public GetBalance {
public:
   ExtraGetBalance(Wallet& wallet) : GetBalance(wallet) {}
};
class ExtraSendToAddress : public GetBalance {
public:
   ExtraSendToAddress(Wallet& wallet) : GetBalance(wallet) {}
};

int main(int argc, char* argv[])
{    
   logfile = CDB::dataDir(bitcoin.dataDirSuffix()) + "/debug.log";

   Node node; // deafult chain is bitcoin

   Wallet wallet(node, "wallet.dat"); // add the wallet
   Wallet extra_wallet(node, "extra_wallet.dat"); // add the extra wallet

   thread nodeThread(&Node::run, &node); // run this as a background thread

   Server server;

   // Register Server methods.
   server.registerMethod(method_ptr(new Stop(server)));

   // Register Node methods.
   server.registerMethod(method_ptr(new GetBlockCount(node)));
   server.registerMethod(method_ptr(new GetConnectionCount(node)));
   server.registerMethod(method_ptr(new GetDifficulty(node)));
   server.registerMethod(method_ptr(new GetInfo(node)));

   // Register Wallet methods. - note that we don't have any auth, so anyone (on localhost) can read your balance!
   server.registerMethod(method_ptr(new GetBalance(wallet)));
   server.registerMethod(method_ptr(new SendToAddress(wallet)), Auth("username","password"));
   server.registerMethod(method_ptr(new ExtraGetBalance(wallet)));
   server.registerMethod(method_ptr(new ExtraSendToAddress(wallet)), Auth("username","password"));
   server.run();

   node.shutdown();
   nodeThread.join();
}


On 02/02/2012, at 00:50, grarpamp wrote:

>> However, I think perhaps the bitcoin project should be split into a library, with a prototype client and the actual clients. This library facilitates this.
> 
> I'll be trying your implementation soon. And libbitcoin/subvertx too.
> Partly because they're also non-interpreted, and partly to what seems
> better architected...
> 
> To the minimal extent of my understanding... I'd like to see wallet
> ops completely separated from background chain ops. ie: have
> a chain daemon doing it's thing, updating, verifying, etc. The
> generator doing it's thing. And a wallet app that can independently
> manage separate wallets in parallel, referencing the live chain files
> as needed. It seems a library would allow quality focus on the separate
> functions and let apps/ui's use the fn's as desired on top. Right now, it
> seems I have to run bitcoind and can only deal with one wallet at a time,
> having to stop it, deal with state issues, swap in a new wallet, start
> it, and repeat till illness ensues :( And when the chain is being processed
> hard by the daemon cpuwise, bitcoin RPC takes minutes to respond, if ever
> or errors out. If wallet ops or statistical queries on the chain need it for
> integrity or reading, a db checkpoint/lock/logroll could be implemented into
> the chain demon processes with a client lib api to trigger it as needed.
> Don't know, just saying.
> 
> fyi... boost 1.48 and db 4.8.30 work fine with 0.5.2, 0.5.x, and master,
> you just need to compile and include it by hand if you want it and
> your package manager doesn't have it.

Michael Gronager, PhD
Director, Ceptacle
Jens Juels Gade 33
2100 Copenhagen E
Mobile: +45 31 45 14 01
E-mail: gronager at ceptacle.com
Web: http://www.ceptacle.com/




From craig at theagricolas.org  Thu Feb  2 11:34:24 2012
From: craig at theagricolas.org (Craig B Agricola)
Date: Thu, 2 Feb 2012 06:34:24 -0500
Subject: [Bitcoin-development] Announcement: libcoin
In-Reply-To: <4CE9708D-0627-480C-B928-3F812544CD90@ceptacle.com>
References: <D55C3D18-8286-44E9-B877-6FCE7C05E980@ceptacle.com>
	<CAJna-HiS34V5rNrRfFOMRJ6JhRmS1aeEE3oA=o07Hgf4S6qNfw@mail.gmail.com>
	<54950761-EBFB-402E-8D7B-0B54A08260D2@ceptacle.com>
	<CAD2Ti29cto8wS1jO5yOkORbE48c+t6Of2vysXcA0xM9LKCOCgg@mail.gmail.com>
	<4CE9708D-0627-480C-B928-3F812544CD90@ceptacle.com>
Message-ID: <20120202113423.GB1622@theagricolas.org>

On Thu, Feb 02, 2012 at 09:32:24AM +0100, Michael Gr?nager wrote:
> 
>    // Register Wallet methods. - note that we don't have any auth, so anyone (on localhost) can read your balance!
>    server.registerMethod(method_ptr(new GetBalance(wallet)));
>    server.registerMethod(method_ptr(new SendToAddress(wallet)), Auth("username","password"));
>    server.registerMethod(method_ptr(new ExtraGetBalance(wallet)));
>    server.registerMethod(method_ptr(new ExtraSendToAddress(wallet)), Auth("username","password"));
>    server.run();

This should probably be

*    server.registerMethod(method_ptr(new ExtraGetBalance(extrawallet)));
*    server.registerMethod(method_ptr(new ExtraSendToAddress(extrawallet)), Auth("username","password"));

right?  Easy to miss if both wallets were empty in your quick test...  Awesome job with libcoin, BTW!

 -Craig



From gronager at ceptacle.com  Thu Feb  2 13:46:05 2012
From: gronager at ceptacle.com (=?iso-8859-1?Q?Michael_Gr=F8nager?=)
Date: Thu, 2 Feb 2012 14:46:05 +0100
Subject: [Bitcoin-development] libcoin (HEAD) now supports boost < 1.47 -
	please test
Message-ID: <31B4BA03-FE8A-4730-9EFD-9850BC894C3B@ceptacle.com>

I have added a simplified fall back class to the boost::asio::signal_set. This should enable compilation on platforms with less than bleeding edge versions of Boost. Most notably most of the currently deployed Linux'es that use Boost 1.42.

I also updated the root CMakeLists.txt to only require 1.42. It works for me, but I also recognize the fact that committers machines has some intrinsic magic that just makes things work, hiding actual errors for the them ;)

Please test and feed back.

Cheers,

Michael


Michael Gronager, PhD
Director, Ceptacle
Jens Juels Gade 33
2100 Copenhagen E
Mobile: +45 31 45 14 01
E-mail: gronager at ceptacle.com
Web: http://www.ceptacle.com/




From luke at dashjr.org  Thu Feb  2 16:30:11 2012
From: luke at dashjr.org (Luke-Jr)
Date: Thu, 2 Feb 2012 11:30:11 -0500
Subject: [Bitcoin-development] libcoin (HEAD) now supports boost < 1.47
	- please test
In-Reply-To: <31B4BA03-FE8A-4730-9EFD-9850BC894C3B@ceptacle.com>
References: <31B4BA03-FE8A-4730-9EFD-9850BC894C3B@ceptacle.com>
Message-ID: <201202021130.12213.luke@dashjr.org>

On Thursday, February 02, 2012 8:46:05 AM Michael Gr?nager wrote:
> Please test and feed back.

I found the problem: you are trying to use static libraries. Best practices 
are to use shared libraries (except for specific scenarios like universal 
"Linux" binaries) and most distros do not have static libraries installed by 
default.

The coinQt stuff was also creating a problem.

I am able to build with this patch:
diff --git a/CMakeLists.txt b/CMakeLists.txt
index dea37c4..b876881 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -352,7 +352,7 @@ ENDIF(BDB_FOUND)
 #Note: We need as a minimum Boost 1.47 to support the signal_set used in 
Server. A backup signal_set has been created, though.
 SET(Boost_NO_BOOST_CMAKE ON)
 SET(Boost_ADDITIONAL_VERSIONS "1.47" "1.47.0" "1.48" "1.48.0")
-SET(Boost_USE_STATIC_LIBS        ON)
+#SET(Boost_USE_STATIC_LIBS        ON)
 SET(Boost_USE_MULTITHREADED      ON)
 SET(Boost_USE_STATIC_RUNTIME    OFF)
 
@@ -804,9 +804,9 @@ SET(PKGCONFIG_FILES
 #  libcoin-coinMine
 )
 
-IF(QT4_FOUND)
-  SET(PKGCONFIG_FILES ${PKGCONFIG_FILES} libcoin-coinQt)
-ENDIF(QT4_FOUND)
+#IF(QT4_FOUND)
+#  SET(PKGCONFIG_FILES ${PKGCONFIG_FILES} libcoin-coinQt)
+#ENDIF(QT4_FOUND)
 
 FOREACH(PKGCONFIG_FILE ${PKGCONFIG_FILES})
   CONFIGURE_FILE(${PROJECT_SOURCE_DIR}/packaging/pkgconfig/${PKGCONFIG_FILE}.pc.in
diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index 0011392..67044d1 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -19,9 +19,9 @@ FOREACH( mylibfolder
 
 ENDFOREACH()
 
-IF (QT4_FOUND AND NOT ANDROID)
-    ADD_SUBDIRECTORY(coinQt)
-ENDIF()
+#IF (QT4_FOUND AND NOT ANDROID)
+#    ADD_SUBDIRECTORY(coinQt)
+#ENDIF()
 
 IF(ANDROID)
     configure_file("${LIBCOIN_ANDROID_TEMPLATES}/Android.mk.src.in" 
"${CMAKE_CURRENT_BINARY_DIR}/Android.mk")



From g.rowe at froot.co.uk  Thu Feb  2 17:07:12 2012
From: g.rowe at froot.co.uk (Gary Rowe)
Date: Thu, 2 Feb 2012 17:07:12 +0000
Subject: [Bitcoin-development] BIP 20 Rejected, process for BIP 21N
Message-ID: <CAKm8k+3V-sv4FdE1zFsB0xjDS1hfhdhGtUB=gYprOfvRO8Cuvg@mail.gmail.com>

BlueMatt, did the BIP0021 Wiki entry for "req:" to "req-" get updated? I'm
looking there now and it seems to be still at "req:"
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120202/754589f8/attachment.html>

From gmaxwell at gmail.com  Thu Feb  2 17:12:04 2012
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Thu, 2 Feb 2012 12:12:04 -0500
Subject: [Bitcoin-development]  Announcement: libcoin
In-Reply-To: <CAAS2fgSQZ1wv=OXnBnGbKnLTZXbn909umpPBaZDF2g6vy8katA@mail.gmail.com>
References: <D55C3D18-8286-44E9-B877-6FCE7C05E980@ceptacle.com>
	<CAAS2fgSQZ1wv=OXnBnGbKnLTZXbn909umpPBaZDF2g6vy8katA@mail.gmail.com>
Message-ID: <CAAS2fgR_r=NpFJJEQ=canx5noUeQDyJPYRJ4D5rzCGC_qLOgEg@mail.gmail.com>

On Wed, Feb 1, 2012 at 9:18 AM, Michael Gr?nager
<gronager at ceptacle.com> > The libcoin/bitcoind client downloads the
entire block chain 3.5 times faster than the bitcoin/bitcoind client.
This is less than 90 minutes on a modern laptop!

I'm guessing that you benchmarked this against the version you forked
from rather than the current reference client?

If so? I suspect your speedup was almost entirely because you removed
the secure allocator and as a result fixed the mlock performance bug
[https://bitcointalk.org/index.php?topic=56491.0] as a side effect. On
some systems the mlock issue makes a very big difference (on other
systems not so much).

In any case, I finally got libbitcoin built and I'm disappointed to
report that in the same time it takes the reference client to fully
sync, libbitcoin only made it to height 138k (of course, because the
time is mostly spent late in the chain 138k is not very far along? I'm
guessing it's going to take libbitcoin 3x-4x longer all said)

I assume the reason it's actually slower is because it's CPU bound on
ECDSA checks, which are skipped in bitcoin in blocks up to the highest
hardcoded checkpoint. ?Without that difference I suspect libbitcoin
would be about the same speed? maybe a little faster because of the
other changes you mentioned (though, e.g. lock profiling shows hardly
any contention during sync).

I don't doubt your rpc performance is a lot better. There is a
longstanding pull request for async rpc for the reference client that
hasn't been merged.



From gmaxwell at gmail.com  Thu Feb  2 17:36:07 2012
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Thu, 2 Feb 2012 12:36:07 -0500
Subject: [Bitcoin-development] Announcement: libcoin
In-Reply-To: <CAAS2fgR_r=NpFJJEQ=canx5noUeQDyJPYRJ4D5rzCGC_qLOgEg@mail.gmail.com>
References: <D55C3D18-8286-44E9-B877-6FCE7C05E980@ceptacle.com>
	<CAAS2fgSQZ1wv=OXnBnGbKnLTZXbn909umpPBaZDF2g6vy8katA@mail.gmail.com>
	<CAAS2fgR_r=NpFJJEQ=canx5noUeQDyJPYRJ4D5rzCGC_qLOgEg@mail.gmail.com>
Message-ID: <CAAS2fgQsJjKy7XakOaQ7vqf2ewD0JJ-1MEbNvj_r2K0E8kWkww@mail.gmail.com>

On Thu, Feb 2, 2012 at 12:12 PM, Gregory Maxwell <gmaxwell at gmail.com> wrote:
> sync, libbitcoin only made it to height 138k (of course, because the
> time is mostly spent late in the chain 138k is not very far along? I'm
> guessing it's going to take libbitcoin 3x-4x longer all said)

It ended up taking almost exactly twice as long, FWIW.



From bitcoin-list at bluematt.me  Thu Feb  2 17:39:07 2012
From: bitcoin-list at bluematt.me (Matt Corallo)
Date: Thu, 02 Feb 2012 12:39:07 -0500
Subject: [Bitcoin-development] BIP 20 Rejected, process for BIP 21N
In-Reply-To: <CAKm8k+3V-sv4FdE1zFsB0xjDS1hfhdhGtUB=gYprOfvRO8Cuvg@mail.gmail.com>
References: <CAKm8k+3V-sv4FdE1zFsB0xjDS1hfhdhGtUB=gYprOfvRO8Cuvg@mail.gmail.com>
Message-ID: <1328204347.3023.0.camel@BMThinkPad.lan.bluematt.me>

Not yet, its up to genjix (Amir) to do that.  See
https://github.com/genjix/bips/pull/2

Matt

On Thu, 2012-02-02 at 17:07 +0000, Gary Rowe wrote:
> BlueMatt, did the BIP0021 Wiki entry for "req:" to "req-" get updated?
> I'm looking there now and it seems to be still at "req:"
> ------------------------------------------------------------------------------
> Keep Your Developer Skills Current with LearnDevNow!
> The most comprehensive online learning library for Microsoft developers
> is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3, MVC3,
> Metro Style Apps, more. Free future releases when you subscribe now!
> http://p.sf.net/sfu/learndevnow-d2d
> _______________________________________________ Bitcoin-development mailing list Bitcoin-development at lists.sourceforge.net https://lists.sourceforge.net/lists/listinfo/bitcoin-development





From g.rowe at froot.co.uk  Thu Feb  2 17:46:11 2012
From: g.rowe at froot.co.uk (Gary Rowe)
Date: Thu, 2 Feb 2012 17:46:11 +0000
Subject: [Bitcoin-development] BIP 20 Rejected, process for BIP 21N
In-Reply-To: <1328204347.3023.0.camel@BMThinkPad.lan.bluematt.me>
References: <CAKm8k+3V-sv4FdE1zFsB0xjDS1hfhdhGtUB=gYprOfvRO8Cuvg@mail.gmail.com>
	<1328204347.3023.0.camel@BMThinkPad.lan.bluematt.me>
Message-ID: <CAKm8k+1CnDbSi-qfOZBCcS=H2zh5bP4RX6jgRv5H4005e5kveA@mail.gmail.com>

OK - I've added a comment to the pull request.

On 2 February 2012 17:39, Matt Corallo <bitcoin-list at bluematt.me> wrote:

> Not yet, its up to genjix (Amir) to do that.  See
> https://github.com/genjix/bips/pull/2
>
> Matt
>
> On Thu, 2012-02-02 at 17:07 +0000, Gary Rowe wrote:
> > BlueMatt, did the BIP0021 Wiki entry for "req:" to "req-" get updated?
> > I'm looking there now and it seems to be still at "req:"
> >
> ------------------------------------------------------------------------------
> > Keep Your Developer Skills Current with LearnDevNow!
> > The most comprehensive online learning library for Microsoft developers
> > is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3, MVC3,
> > Metro Style Apps, more. Free future releases when you subscribe now!
> > http://p.sf.net/sfu/learndevnow-d2d
> > _______________________________________________ Bitcoin-development
> mailing list Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
>
>
> ------------------------------------------------------------------------------
> Keep Your Developer Skills Current with LearnDevNow!
> The most comprehensive online learning library for Microsoft developers
> is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3, MVC3,
> Metro Style Apps, more. Free future releases when you subscribe now!
> http://p.sf.net/sfu/learndevnow-d2d
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120202/4db373e4/attachment.html>

From gmaxwell at gmail.com  Thu Feb  2 17:46:36 2012
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Thu, 2 Feb 2012 12:46:36 -0500
Subject: [Bitcoin-development] Announcement: libcoin
In-Reply-To: <CAAS2fgQsJjKy7XakOaQ7vqf2ewD0JJ-1MEbNvj_r2K0E8kWkww@mail.gmail.com>
References: <D55C3D18-8286-44E9-B877-6FCE7C05E980@ceptacle.com>
	<CAAS2fgSQZ1wv=OXnBnGbKnLTZXbn909umpPBaZDF2g6vy8katA@mail.gmail.com>
	<CAAS2fgR_r=NpFJJEQ=canx5noUeQDyJPYRJ4D5rzCGC_qLOgEg@mail.gmail.com>
	<CAAS2fgQsJjKy7XakOaQ7vqf2ewD0JJ-1MEbNvj_r2K0E8kWkww@mail.gmail.com>
Message-ID: <CAAS2fgRe9-vaT0+xR_V1d68h=zPb59TZuGniqW1RNQRFUFbbYw@mail.gmail.com>

On Thu, Feb 2, 2012 at 12:36 PM, Gregory Maxwell <gmaxwell at gmail.com> wrote:
> On Thu, Feb 2, 2012 at 12:12 PM, Gregory Maxwell <gmaxwell at gmail.com> wrote:
>> sync, libbitcoin only made it to height 138k (of course, because the
>> time is mostly spent late in the chain 138k is not very far along? I'm
>> guessing it's going to take libbitcoin 3x-4x longer all said)
>
> It ended up taking almost exactly twice as long, FWIW.

(and Gah: forgive the  autocompletion  of my fingers: I'm apparently
unable to type the word coin without prefacing it with bit)  *libcoin*
not libbitcoin.



From gronager at ceptacle.com  Thu Feb  2 22:43:07 2012
From: gronager at ceptacle.com (=?iso-8859-1?Q?Michael_Gr=F8nager?=)
Date: Thu, 2 Feb 2012 23:43:07 +0100
Subject: [Bitcoin-development] libcoin (HEAD) now supports boost < 1.47
	- please test
In-Reply-To: <201202021130.12213.luke@dashjr.org>
References: <31B4BA03-FE8A-4730-9EFD-9850BC894C3B@ceptacle.com>
	<201202021130.12213.luke@dashjr.org>
Message-ID: <50342F76-062C-4A88-A5DA-A77C799AEC80@ceptacle.com>

Thanks for the patch and the detective work!

Enabling dynamic libs was on my TODO, but on the Redmond_OS_not_to_be_mentioned you need to :
* prepend class definitions with __declspec(dllexport) when you compile the dll
* prepend class definitions with __declspec(dllimport) when you use the dll
I just love the way they spoil their developers...

I have the framework to automate this with CMake from a former project, but I havn't tested it for libcoin yet, hence the static build. And well, iOS also has this fetich for static libs.

I also recall another issue with dll's: If you define a global variable it is shared between all executables using this dll. I have still a handful of globals to clean out, namely those related to logging - I will do so, but it has not yet been a top priority. 

So, feel free to use dynamic libs on unix'es, but on windows it is .libs for a little while longer.

Will fix the Qt stuff in CMake - thanks!

Cheers,

Michael


On 02/02/2012, at 17:30, Luke-Jr wrote:

> On Thursday, February 02, 2012 8:46:05 AM Michael Gr?nager wrote:
>> Please test and feed back.
> 
> I found the problem: you are trying to use static libraries. Best practices 
> are to use shared libraries (except for specific scenarios like universal 
> "Linux" binaries) and most distros do not have static libraries installed by 
> default.
> 
> The coinQt stuff was also creating a problem.
> 
> I am able to build with this patch:
> diff --git a/CMakeLists.txt b/CMakeLists.txt
> index dea37c4..b876881 100644
> --- a/CMakeLists.txt
> +++ b/CMakeLists.txt
> @@ -352,7 +352,7 @@ ENDIF(BDB_FOUND)
> #Note: We need as a minimum Boost 1.47 to support the signal_set used in 
> Server. A backup signal_set has been created, though.
> SET(Boost_NO_BOOST_CMAKE ON)
> SET(Boost_ADDITIONAL_VERSIONS "1.47" "1.47.0" "1.48" "1.48.0")
> -SET(Boost_USE_STATIC_LIBS        ON)
> +#SET(Boost_USE_STATIC_LIBS        ON)
> SET(Boost_USE_MULTITHREADED      ON)
> SET(Boost_USE_STATIC_RUNTIME    OFF)
> 
> @@ -804,9 +804,9 @@ SET(PKGCONFIG_FILES
> #  libcoin-coinMine
> )
> 
> -IF(QT4_FOUND)
> -  SET(PKGCONFIG_FILES ${PKGCONFIG_FILES} libcoin-coinQt)
> -ENDIF(QT4_FOUND)
> +#IF(QT4_FOUND)
> +#  SET(PKGCONFIG_FILES ${PKGCONFIG_FILES} libcoin-coinQt)
> +#ENDIF(QT4_FOUND)
> 
> FOREACH(PKGCONFIG_FILE ${PKGCONFIG_FILES})
>   CONFIGURE_FILE(${PROJECT_SOURCE_DIR}/packaging/pkgconfig/${PKGCONFIG_FILE}.pc.in
> diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
> index 0011392..67044d1 100644
> --- a/src/CMakeLists.txt
> +++ b/src/CMakeLists.txt
> @@ -19,9 +19,9 @@ FOREACH( mylibfolder
> 
> ENDFOREACH()
> 
> -IF (QT4_FOUND AND NOT ANDROID)
> -    ADD_SUBDIRECTORY(coinQt)
> -ENDIF()
> +#IF (QT4_FOUND AND NOT ANDROID)
> +#    ADD_SUBDIRECTORY(coinQt)
> +#ENDIF()
> 
> IF(ANDROID)
>     configure_file("${LIBCOIN_ANDROID_TEMPLATES}/Android.mk.src.in" 
> "${CMAKE_CURRENT_BINARY_DIR}/Android.mk")

Michael Gronager, PhD
Director, Ceptacle
Jens Juels Gade 33
2100 Copenhagen E
Mobile: +45 31 45 14 01
E-mail: gronager at ceptacle.com
Web: http://www.ceptacle.com/




From luke at dashjr.org  Thu Feb  2 23:27:31 2012
From: luke at dashjr.org (Luke-Jr)
Date: Thu, 2 Feb 2012 18:27:31 -0500
Subject: [Bitcoin-development] libcoin (HEAD) now supports boost < 1.47
	- please test
In-Reply-To: <50342F76-062C-4A88-A5DA-A77C799AEC80@ceptacle.com>
References: <31B4BA03-FE8A-4730-9EFD-9850BC894C3B@ceptacle.com>
	<201202021130.12213.luke@dashjr.org>
	<50342F76-062C-4A88-A5DA-A77C799AEC80@ceptacle.com>
Message-ID: <201202021827.34097.luke@dashjr.org>

On Thursday, February 02, 2012 5:43:07 PM Michael Gr?nager wrote:
> Enabling dynamic libs was on my TODO, but on the
> Redmond_OS_not_to_be_mentioned you need to : * prepend class definitions
> with __declspec(dllexport) when you compile the dll * prepend class
> definitions with __declspec(dllimport) when you use the dll I just love
> the way they spoil their developers...

I hadn't even thought of this. Sounds like a pain :/

The problem I had was related to *using* static libraries; ie, boost.
I have libboost*.so, but libboost*.a



From pieter.wuille at gmail.com  Fri Feb  3 00:19:02 2012
From: pieter.wuille at gmail.com (Pieter Wuille)
Date: Fri, 3 Feb 2012 01:19:02 +0100
Subject: [Bitcoin-development] Announcement: libcoin
In-Reply-To: <4CE9708D-0627-480C-B928-3F812544CD90@ceptacle.com>
References: <D55C3D18-8286-44E9-B877-6FCE7C05E980@ceptacle.com>
	<CAJna-HiS34V5rNrRfFOMRJ6JhRmS1aeEE3oA=o07Hgf4S6qNfw@mail.gmail.com>
	<54950761-EBFB-402E-8D7B-0B54A08260D2@ceptacle.com>
	<CAD2Ti29cto8wS1jO5yOkORbE48c+t6Of2vysXcA0xM9LKCOCgg@mail.gmail.com>
	<4CE9708D-0627-480C-B928-3F812544CD90@ceptacle.com>
Message-ID: <CAPg+sBg16OPdyi3MQ+sfBR+z_ArP6c8KpU36pDA0MEdXpk9fxQ@mail.gmail.com>

> You will also find the RPC server in libcoin blistering fast compared to
the Satoshi client. (It was actually what got me to write libcoin in the
first place...). The Satoshi client HTTP server executes all rpc commands
in its own thread, but to do so, it needs to stop the thread of the Node,
even though the command executed is just a query (i.e. not a SendTo), you
hence have two threads blocking each other and when they wait, you wait...
In libcoin all the query methods access the blockChain as a const object
and they can hence safely query it without intervening the work of the Node
thread. The exception are the SendTo methods that first query if a
transaction can take place, then pushes it to the work-queue of the Node
thread and again exits immediately. The actual execution then follows once
the Node has finished its current tasks (e.g. validating a block).

Hello Michael,

I'm impressed by your refactorings, and hope some of them can make it into
the Satoshi codebase. I am however not sure what you've said above is safe.
In particular, how do you guarantee that no other thread modifies the
blockchain structure while you are performing your query on it? Does the
query code operate on a const copy of the structure, or is there guaranteed
only one thread accessing it?

I've been thinking about moving to read-write locks that allow multiple
threads reading the datastructure simultaneously, but removing the locking
all together sounds wrong to me.

-- 
Pieter
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120203/270a6572/attachment.html>

From gronager at ceptacle.com  Fri Feb  3 09:22:23 2012
From: gronager at ceptacle.com (=?iso-8859-1?Q?Michael_Gr=F8nager?=)
Date: Fri, 3 Feb 2012 10:22:23 +0100
Subject: [Bitcoin-development] 0.5.2 tag in github ??
Message-ID: <83F45CA3-D54A-499A-8A20-922CDEE52993@ceptacle.com>

Hi Gavin, others?

I am trying to redo the performance test of the libcoin client against the 0.5.2 Satoshi client, that I have learned also have received quite some improvements in speed since 0.4.0 (e.g. from not verifying signatures on early blocks).

However, I cannot find any tag with v0.5.2 in github:
https://github.com/bitcoin/bitcoin/tags

Am I missing something, or wasn't that release tagged ?

What I am looking for in particular is the number "140700", the last block not to be verified - I can see this in:

https://github.com/bitcoin/bitcoin/blob/master/src/checkpoints.cpp

But I would like to be sure that this is also the number used in 0.5.2.

Thanks,

Michael


From makosoft at gmail.com  Fri Feb  3 09:52:19 2012
From: makosoft at gmail.com (Aidan Thornton)
Date: Fri, 3 Feb 2012 09:52:19 +0000
Subject: [Bitcoin-development] 0.5.2 tag in github ??
In-Reply-To: <83F45CA3-D54A-499A-8A20-922CDEE52993@ceptacle.com>
References: <83F45CA3-D54A-499A-8A20-922CDEE52993@ceptacle.com>
Message-ID: <CAB=c7Tp9Mu_-kux8gazysKVFHZaWZdEgsmoOVE+wz-AGYdN-XQ@mail.gmail.com>

On Fri, Feb 3, 2012 at 9:22 AM, Michael Gr?nager <gronager at ceptacle.com> wrote:
> Hi Gavin, others?
>
> I am trying to redo the performance test of the libcoin client against the 0.5.2 Satoshi client, that I have learned also have received quite some improvements in speed since 0.4.0 (e.g. from not verifying signatures on early blocks).
>
> However, I cannot find any tag with v0.5.2 in github:
> https://github.com/bitcoin/bitcoin/tags

I think that tag's in
https://gitorious.org/+bitcoin-stable-developers/bitcoin/bitcoind-stable
- a certain amount of developer politics seems to be involved, and
v0.5.2 may not have been pushed to the official github repository.



From gronager at ceptacle.com  Fri Feb  3 09:52:22 2012
From: gronager at ceptacle.com (=?iso-8859-1?Q?Michael_Gr=F8nager?=)
Date: Fri, 3 Feb 2012 10:52:22 +0100
Subject: [Bitcoin-development] Announcement: libcoin
In-Reply-To: <CAPg+sBg16OPdyi3MQ+sfBR+z_ArP6c8KpU36pDA0MEdXpk9fxQ@mail.gmail.com>
References: <D55C3D18-8286-44E9-B877-6FCE7C05E980@ceptacle.com>
	<CAJna-HiS34V5rNrRfFOMRJ6JhRmS1aeEE3oA=o07Hgf4S6qNfw@mail.gmail.com>
	<54950761-EBFB-402E-8D7B-0B54A08260D2@ceptacle.com>
	<CAD2Ti29cto8wS1jO5yOkORbE48c+t6Of2vysXcA0xM9LKCOCgg@mail.gmail.com>
	<4CE9708D-0627-480C-B928-3F812544CD90@ceptacle.com>
	<CAPg+sBg16OPdyi3MQ+sfBR+z_ArP6c8KpU36pDA0MEdXpk9fxQ@mail.gmail.com>
Message-ID: <8CC24D9C-4207-4493-8C95-C5738B65C8B6@ceptacle.com>

> Hello Michael,
> 
> I'm impressed by your refactorings, and hope some of them can make it into the Satoshi codebase.

Thanks:)

>  I am however not sure what you've said above is safe. In particular, how do you guarantee that no other thread modifies the blockchain structure while you are performing your query on it? Does the query code operate on a const copy of the structure, or is there guaranteed only one thread accessing it?

The BlockChain class encapsulates all access to the blockchain and only give you access to certain restricted queries on the chain. Actually that was the case already in the satoshi client, I have only tried to formalize and encapsulate these queries in the code instead of having all the code poking around directly in the database and the blockfile.

I should note that the database still keeps a mutex to protect reads from writes.

I agree that constness alone does not guarantee thread safety, it is one of the things to use to get there. Great care should be taken not to read a value that is being changed at the same time, at least if that will render the result unusable.

The list of allowed queries are the const public methods of BlockChain. Some examples :
1.    bool isSpent(Coin coin) const;
2.    int getNumSpent(uint256 hash) const ;
3.    uint256 spentIn(Coin coin) const;

    /// Check if the hash of a block belongs to a block in the main chain:
4.    bool isInMainChain(const uint256 hash) const;
    
    /// Get the best height
5.    int getBestHeight() const { return _bestIndex->nHeight; }

Or e.g.:
6.    void getBlock(const uint256 hash, Block& block) const;

1-3. can be used to check if a COutPoint (now Coin) has been spent etc... This will only generate sane results, even if the two threads are both active on the same data structures.
Same goes for 4. and 6. copies a block from the block file to the Block& provided so no issues here either. 

I do, however, admit, that an extra review of all the public const methods would be wise, to ensure that I have not overlooked something. I'll open an issue on this and use a cold winter night on looking them over again.

Cheers,

Michael


> 
> I've been thinking about moving to read-write locks that allow multiple threads reading the datastructure simultaneously, but removing the locking all together sounds wrong to me.
> 
> -- 
> Pieter

Michael Gronager, PhD
Director, Ceptacle
Jens Juels Gade 33
2100 Copenhagen E
Mobile: +45 31 45 14 01
E-mail: gronager at ceptacle.com
Web: http://www.ceptacle.com/




From gronager at ceptacle.com  Fri Feb  3 09:59:01 2012
From: gronager at ceptacle.com (=?iso-8859-1?Q?Michael_Gr=F8nager?=)
Date: Fri, 3 Feb 2012 10:59:01 +0100
Subject: [Bitcoin-development] 0.5.2 tag in github ??
In-Reply-To: <CAB=c7Tp9Mu_-kux8gazysKVFHZaWZdEgsmoOVE+wz-AGYdN-XQ@mail.gmail.com>
References: <83F45CA3-D54A-499A-8A20-922CDEE52993@ceptacle.com>
	<CAB=c7Tp9Mu_-kux8gazysKVFHZaWZdEgsmoOVE+wz-AGYdN-XQ@mail.gmail.com>
Message-ID: <9B2FB922-A86B-4189-926C-C6DB51A1C17F@ceptacle.com>

Hi Aidan,

Thanks, and the number is still 140700 - do we have a policy / logic on adding new checkpoints ? It seems to me that the number could easily be bumped to 160000 by now ?

Cheers,

Michael
 
On 03/02/2012, at 10:52, Aidan Thornton wrote:

> On Fri, Feb 3, 2012 at 9:22 AM, Michael Gr?nager <gronager at ceptacle.com> wrote:
>> Hi Gavin, others?
>> 
>> I am trying to redo the performance test of the libcoin client against the 0.5.2 Satoshi client, that I have learned also have received quite some improvements in speed since 0.4.0 (e.g. from not verifying signatures on early blocks).
>> 
>> However, I cannot find any tag with v0.5.2 in github:
>> https://github.com/bitcoin/bitcoin/tags
> 
> I think that tag's in
> https://gitorious.org/+bitcoin-stable-developers/bitcoin/bitcoind-stable
> - a certain amount of developer politics seems to be involved, and
> v0.5.2 may not have been pushed to the official github repository.

Michael Gronager, PhD
Director, Ceptacle
Jens Juels Gade 33
2100 Copenhagen E
Mobile: +45 31 45 14 01
E-mail: gronager at ceptacle.com
Web: http://www.ceptacle.com/




From gmaxwell at gmail.com  Fri Feb  3 13:45:30 2012
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Fri, 3 Feb 2012 08:45:30 -0500
Subject: [Bitcoin-development] 0.5.2 tag in github ??
In-Reply-To: <CAB=c7Tp9Mu_-kux8gazysKVFHZaWZdEgsmoOVE+wz-AGYdN-XQ@mail.gmail.com>
References: <83F45CA3-D54A-499A-8A20-922CDEE52993@ceptacle.com>
	<CAB=c7Tp9Mu_-kux8gazysKVFHZaWZdEgsmoOVE+wz-AGYdN-XQ@mail.gmail.com>
Message-ID: <CAAS2fgQsqnUxtvfE_4f5pWBhn_ifWM2fdNvncb6_AM2YDaO=Sw@mail.gmail.com>

On Fri, Feb 3, 2012 at 4:52 AM, Aidan Thornton <makosoft at gmail.com> wrote:
> I think that tag's in
> https://gitorious.org/+bitcoin-stable-developers/bitcoin/bitcoind-stable
> - a certain amount of developer politics seems to be involved, and
> v0.5.2 may not have been pushed to the official github repository.

No developer politics are involved? the cuts to the stable versions
have always been done from Luke's repository simply because he
maintains it.



From thomasV1 at gmx.de  Sat Feb  4 14:03:25 2012
From: thomasV1 at gmx.de (thomasV1 at gmx.de)
Date: Sat, 04 Feb 2012 15:03:25 +0100
Subject: [Bitcoin-development] BIP 20 Rejected, process for BIP 21N
In-Reply-To: <1328034145.2832.11.camel@BMThinkPad.lan.bluematt.me>
References: <1328020046.70720.YahooMailNeo@web121002.mail.ne1.yahoo.com>
	<1328025899.2832.5.camel@BMThinkPad.lan.bluematt.me>
	<1328034145.2832.11.camel@BMThinkPad.lan.bluematt.me>
Message-ID: <20120204140325.16110@gmx.net>

Just another question concerning BIP21:

On the wiki, the description of the "message" parameter reads:
"message that shown to the user after scanning the QR code"

I believe that the purpose of this parameter is to contain a description of the  transaction. This has use cases that go beyond QR codes.

If I am right, then I would say that naming it "message" is misleading. In fact, "message" suggests that a message will be sent to someone (the recipient of the funds? a third party?), which is not the case here. That parameter should probably be called "description". 

-- 
Empfehlen Sie GMX DSL Ihren Freunden und Bekannten und wir
belohnen Sie mit bis zu 50,- Euro! https://freundschaftswerbung.gmx.de



From g.rowe at froot.co.uk  Sat Feb  4 16:03:17 2012
From: g.rowe at froot.co.uk (Gary Rowe)
Date: Sat, 4 Feb 2012 16:03:17 +0000
Subject: [Bitcoin-development] BIP 20 Rejected, process for BIP 21N
In-Reply-To: <20120204140325.16110@gmx.net>
References: <1328020046.70720.YahooMailNeo@web121002.mail.ne1.yahoo.com>
	<1328025899.2832.5.camel@BMThinkPad.lan.bluematt.me>
	<1328034145.2832.11.camel@BMThinkPad.lan.bluematt.me>
	<20120204140325.16110@gmx.net>
Message-ID: <CAKm8k+0V+LEBESkp18uhQR6CniLogobpxY_34YBqDM0VYcmzzw@mail.gmail.com>

Seems reasonable to me.
On 4 Feb 2012 14:03, <thomasV1 at gmx.de> wrote:

> Just another question concerning BIP21:
>
> On the wiki, the description of the "message" parameter reads:
> "message that shown to the user after scanning the QR code"
>
> I believe that the purpose of this parameter is to contain a description
> of the  transaction. This has use cases that go beyond QR codes.
>
> If I am right, then I would say that naming it "message" is misleading. In
> fact, "message" suggests that a message will be sent to someone (the
> recipient of the funds? a third party?), which is not the case here. That
> parameter should probably be called "description".
>
> --
> Empfehlen Sie GMX DSL Ihren Freunden und Bekannten und wir
> belohnen Sie mit bis zu 50,- Euro! https://freundschaftswerbung.gmx.de
>
>
> ------------------------------------------------------------------------------
> Try before you buy = See our experts in action!
> The most comprehensive online learning library for Microsoft developers
> is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3, MVC3,
> Metro Style Apps, more. Free future releases when you subscribe now!
> http://p.sf.net/sfu/learndevnow-dev2
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120204/018b4fbb/attachment.html>

From bitcoin-list at bluematt.me  Sat Feb  4 17:15:02 2012
From: bitcoin-list at bluematt.me (Matt Corallo)
Date: Sat, 04 Feb 2012 12:15:02 -0500
Subject: [Bitcoin-development] BIP 20 Rejected, process for BIP 21N
In-Reply-To: <CAKm8k+0V+LEBESkp18uhQR6CniLogobpxY_34YBqDM0VYcmzzw@mail.gmail.com>
References: <1328020046.70720.YahooMailNeo@web121002.mail.ne1.yahoo.com>
	<1328025899.2832.5.camel@BMThinkPad.lan.bluematt.me>
	<1328034145.2832.11.camel@BMThinkPad.lan.bluematt.me>
	<20120204140325.16110@gmx.net>
	<CAKm8k+0V+LEBESkp18uhQR6CniLogobpxY_34YBqDM0VYcmzzw@mail.gmail.com>
Message-ID: <1328375702.27827.3.camel@BMThinkPad.lan.bluematt.me>

I changed the description of the message parameter to be a bit more
descriptive, however, I dont want to change the name of the parameter
because some clients have already implemented that and I really prefer
to make as minor of changes as possible to this BIP even if it is
officially only a Draft.  

Matt

On Sat, 2012-02-04 at 16:03 +0000, Gary Rowe wrote:
> Seems reasonable to me.
> 
> On 4 Feb 2012 14:03, <thomasV1 at gmx.de> wrote:
>         Just another question concerning BIP21:
>         
>         On the wiki, the description of the "message" parameter reads:
>         "message that shown to the user after scanning the QR code"
>         
>         I believe that the purpose of this parameter is to contain a
>         description of the  transaction. This has use cases that go
>         beyond QR codes.
>         
>         If I am right, then I would say that naming it "message" is
>         misleading. In fact, "message" suggests that a message will be
>         sent to someone (the recipient of the funds? a third party?),
>         which is not the case here. That parameter should probably be
>         called "description".





From zgenjix at yahoo.com  Sun Feb  5 12:41:52 2012
From: zgenjix at yahoo.com (Amir Taaki)
Date: Sun, 5 Feb 2012 04:41:52 -0800 (PST)
Subject: [Bitcoin-development] BIP 21 accepted, new BIP 19
Message-ID: <1328445712.12150.YahooMailNeo@web121003.mail.ne1.yahoo.com>

BIP 21 had broad consensus among the major implementations:
https://en.bitcoin.it/wiki/BIP_0021


BIP 19 is a document to propose adding a new payment type to the scripting system's template list.
https://en.bitcoin.it/wiki/BIP_0019

I haven't fully evaluated it completely but it seems solid. My only thoughts is that it uses a bunch of arithmetic operators which can behave in strange ways.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120205/b5de775a/attachment.html>

From gavinandresen at gmail.com  Mon Feb  6 15:44:09 2012
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Mon, 6 Feb 2012 10:44:09 -0500
Subject: [Bitcoin-development] Version 0.6 release candidate 1 plan
Message-ID: <CABsx9T0-eMkfJiOL_2VN5TUuvs_fYANa3XXoM5OX4AMP1W2iSA@mail.gmail.com>

There are several major changes in git HEAD that are ready for wider
testing. The best way of getting lots of testing is to release
binaries, so I'm going to be pulling together a release candidate in
the next day or two.

The goal will be to get at least a full month of release candidate
review/testing before releasing a 0.6 final, with zero High Priority
bugs ( https://github.com/bitcoin/bitcoin/issues?labels=Priority+High&state=open
)

Here's the proposed TODO list for a rc1:

Pull:
800 : bug fix, multiple output display fix in GUI
799 : Have bitcoind recomend a secure RPC password
769 : Make transactions with extra data in scriptSig non-standard

Rebase/pull:
795 : Fix minimize to tray

Pull a modified version of:
755 : Don't vote for /P2SH/ unless -p2sh specified

I'd like to pull 787 (CAddrMan: stochastic address manager) but it
didn't pass my sanity tests.

I'm going to start a separate discussion thread with some thoughts on
rolling out higher-level multisignature support.

-- 
--
Gavin Andresen



From luke at dashjr.org  Mon Feb  6 15:54:25 2012
From: luke at dashjr.org (Luke-Jr)
Date: Mon, 6 Feb 2012 10:54:25 -0500
Subject: [Bitcoin-development] Version 0.6 release candidate 1 plan
In-Reply-To: <CABsx9T0-eMkfJiOL_2VN5TUuvs_fYANa3XXoM5OX4AMP1W2iSA@mail.gmail.com>
References: <CABsx9T0-eMkfJiOL_2VN5TUuvs_fYANa3XXoM5OX4AMP1W2iSA@mail.gmail.com>
Message-ID: <201202061054.26448.luke@dashjr.org>

On Monday, February 06, 2012 10:44:09 AM Gavin Andresen wrote:
> There are several major changes in git HEAD that are ready for wider
> testing. The best way of getting lots of testing is to release
> binaries, so I'm going to be pulling together a release candidate in
> the next day or two.

There are still many other pull requests that seem to be ready, but perhaps 
those can just as well wait for 0.7 if the 0.6 changes are deemed too much to 
add onto. Here are some that seem to be well-tested, and have been part of 
next-test for a while:
	719 coinbaser (already verbally accepted by Gavin for 0.6 a while ago!)
	568 rpc_keepalive
	565 optimize_FastGetWork
	715 bugfix_client_name
	562 optimize_ToHex

> 769 : Make transactions with extra data in scriptSig non-standard

If this affects relaying, it will significantly harm the ability to replace 
the current spammy "green address" scheme with a sensible extra signature 
system. On the miner end, it could significantly harm adoption of such a 
system.

> Pull a modified version of:
> 755 : Don't vote for /P2SH/ unless -p2sh specified

What else do I need to change for this?

> I'd like to pull 787 (CAddrMan: stochastic address manager) but it
> didn't pass my sanity tests.

I can also confirm I have seen at least one addr.db corruption with this.

Luke



From gavinandresen at gmail.com  Mon Feb  6 16:07:00 2012
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Mon, 6 Feb 2012 11:07:00 -0500
Subject: [Bitcoin-development] Multisignature transaction support in the GUI
Message-ID: <CABsx9T09h4EQ=3BFyu-7k9D_t1ryWoC5go4yu4xwsaob9ciK6Q@mail.gmail.com>

I've been testing how the Bitcoin-Qt GUI deals with multisignature transactions.

The good news is it seems to display them just fine; even my
insanely-messy test wallets look reasonable.

It does not support sending multisig/BIP16 transactions, which is
definitely a feature for the main network (we don't want users sending
them until they will get relayed, get mined, AND will be fully
verified by a large super-majority of miners).

But... to encourage more testing it might make sense to enable sending
multisig transactions in the GUI if (fTestNet).

So I see two possible paths:

1) Leave the GUI as-is; require multisig testing to use the RPC interface.
 Note: the RPC call that make multisig sends possible
(addmultisigaddress) is disabled for the main network for the 0.6
release.
 Don't start rolling out GUI support until the next (0.7?) release cycle.

2) Start implementing multisig support in the GUI during the 0.6
release process, enabled only for test network. This could be as
simple as allowing the 35-character BIP16 multisig addresses in the
'send' dialog, to as complicated as adding/extending dialogs that let
you create multisig addresses to add to your address book.

Advantage of (1) is it should mean 0.6 gets to final release faster.

Advantage of (2) is it should mean more testing of multisig, and fewer
bug reports of "I added a multisig address via RPC but I can't send to
it using the GUI"

My opinion: I think it is worth allowing send-to-multisig-address via
the GUI (should be a very simple change to the address validation
logic).  But creating multisig addresses via the GUI should wait until
the next release.

-- 
--
Gavin Andresen



From laanwj at gmail.com  Mon Feb  6 17:27:20 2012
From: laanwj at gmail.com (Wladimir)
Date: Mon, 6 Feb 2012 18:27:20 +0100
Subject: [Bitcoin-development] Multisignature transaction support in the
	GUI
In-Reply-To: <CABsx9T09h4EQ=3BFyu-7k9D_t1ryWoC5go4yu4xwsaob9ciK6Q@mail.gmail.com>
References: <CABsx9T09h4EQ=3BFyu-7k9D_t1ryWoC5go4yu4xwsaob9ciK6Q@mail.gmail.com>
Message-ID: <CA+s+GJC7N3k8n335mHa7hU-Lq4uO6mu1QBLX30G+68cBtDSg3w@mail.gmail.com>

On Mon, Feb 6, 2012 at 5:07 PM, Gavin Andresen <gavinandresen at gmail.com>wrote:

>
> Advantage of (2) is it should mean more testing of multisig, and fewer
> bug reports of "I added a multisig address via RPC but I can't send to
> it using the GUI"
>
> My opinion: I think it is worth allowing send-to-multisig-address via
> the GUI (should be a very simple change to the address validation
> logic).  But creating multisig addresses via the GUI should wait until
> the next release.
>

I think we should go with (2), changing the maximum address length and
validation is very easy. We'd need to

   - Change BitcoinAddressValidator::MaxAddressLength to 35
   - The addresses are validated with walletmodel->validateAddress which in
   turn calls CBitcoinAddress addressParsed(addr) and then isValid(). Does
   this work for the new addresses?

The set of allowed characters is still the same, so BitcoinAddressValidator
doesn't have to be changed.

Advanced dialogs for constructing the addresses / adding them to the
address book could wait for 0.7.0.

Wladimir
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120206/834f01fc/attachment.html>

From laanwj at gmail.com  Mon Feb  6 18:03:35 2012
From: laanwj at gmail.com (Wladimir)
Date: Mon, 6 Feb 2012 19:03:35 +0100
Subject: [Bitcoin-development] Multisignature transaction support in the
	GUI
In-Reply-To: <CA+s+GJC7N3k8n335mHa7hU-Lq4uO6mu1QBLX30G+68cBtDSg3w@mail.gmail.com>
References: <CABsx9T09h4EQ=3BFyu-7k9D_t1ryWoC5go4yu4xwsaob9ciK6Q@mail.gmail.com>
	<CA+s+GJC7N3k8n335mHa7hU-Lq4uO6mu1QBLX30G+68cBtDSg3w@mail.gmail.com>
Message-ID: <CA+s+GJDvo9FbX9L2_zf3NC=aYjV6RiC=ssbZg5gDJXWxX6UqPg@mail.gmail.com>

On Mon, Feb 6, 2012 at 6:27 PM, Wladimir <laanwj at gmail.com> wrote:

> On Mon, Feb 6, 2012 at 5:07 PM, Gavin Andresen <gavinandresen at gmail.com>wrote:
>
>>
>> Advantage of (2) is it should mean more testing of multisig, and fewer
>> bug reports of "I added a multisig address via RPC but I can't send to
>> it using the GUI"
>>
>> My opinion: I think it is worth allowing send-to-multisig-address via
>> the GUI (should be a very simple change to the address validation
>> logic).  But creating multisig addresses via the GUI should wait until
>> the next release.
>>
>
> I think we should go with (2), changing the maximum address length and
> validation is very easy. We'd need to
>

And maybe WalletModel::sendCoins has to be changed.
Does CScript.SetBitcoinAddress work for the new address type?

Wladimir
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120206/71a12fad/attachment.html>

From makosoft at gmail.com  Tue Feb  7 11:52:19 2012
From: makosoft at gmail.com (Aidan Thornton)
Date: Tue, 7 Feb 2012 11:52:19 +0000
Subject: [Bitcoin-development] Multisignature transaction support in the
	GUI
In-Reply-To: <CA+s+GJC7N3k8n335mHa7hU-Lq4uO6mu1QBLX30G+68cBtDSg3w@mail.gmail.com>
References: <CABsx9T09h4EQ=3BFyu-7k9D_t1ryWoC5go4yu4xwsaob9ciK6Q@mail.gmail.com>
	<CA+s+GJC7N3k8n335mHa7hU-Lq4uO6mu1QBLX30G+68cBtDSg3w@mail.gmail.com>
Message-ID: <CAB=c7Tr6GJcyp4zGG=RJ1yEYkNYqB3J1CCYQ8mSthe=TWYNGAw@mail.gmail.com>

On Mon, Feb 6, 2012 at 5:27 PM, Wladimir <laanwj at gmail.com> wrote:
> Change BitcoinAddressValidator::MaxAddressLength to 35
> The addresses are validated with walletmodel->validateAddress which in turn
> calls?CBitcoinAddress addressParsed(addr) and then isValid(). Does this work
> for the new addresses?

Should do (unless BIP 16 broke something). In fact both the GUI and
RPC commands use CBitcoinAddress and IsValid to validate addresses in
that way.

> And maybe WalletModel::sendCoins has to be changed.
> Does?CScript.SetBitcoinAddress work for the new address type?

Again, should do, and it's used by the RPC commands for sending
Bitcoins as well. Really there's not a lot that needs to be changed.
I'm pretty sure even the change in MaxAddressLength is only necessary
to send coins to multisig addresses on testnet, sending them on
mainnet should just work.



From luke at dashjr.org  Tue Feb  7 15:04:36 2012
From: luke at dashjr.org (Luke-Jr)
Date: Tue, 7 Feb 2012 10:04:36 -0500
Subject: [Bitcoin-development] Version 0.6 release candidate 1 plan
In-Reply-To: <201202061054.26448.luke@dashjr.org>
References: <CABsx9T0-eMkfJiOL_2VN5TUuvs_fYANa3XXoM5OX4AMP1W2iSA@mail.gmail.com>
	<201202061054.26448.luke@dashjr.org>
Message-ID: <201202071004.37615.luke@dashjr.org>

On Monday, February 06, 2012 10:54:25 AM Luke-Jr wrote:
> > 769 : Make transactions with extra data in scriptSig non-standard
> 
> If this affects relaying, it will significantly harm the ability to replace
> the current spammy "green address" scheme with a sensible extra signature
> system. On the miner end, it could significantly harm adoption of such a
> system.

FWIW, at least MtGox was OK with the plan to move to non-blockchain-spam
0-confirmation via an extra signature. Why do you ignore this possibility, and 
merge stuff that will break it? Do you have an alternative solution to the 
problem of green addresses spamming the blockchain? As I noted in the pull 
request, stripping extra data has no negative impact on normal transactions, 
and clients creating these can be written to expect the txnid to change (or 
simply not care what the txnid is).



From luke at dashjr.org  Tue Feb  7 16:14:00 2012
From: luke at dashjr.org (Luke-Jr)
Date: Tue, 7 Feb 2012 11:14:00 -0500
Subject: [Bitcoin-development] Version 0.6 release candidate 1 plan
In-Reply-To: <201202071004.37615.luke@dashjr.org>
References: <CABsx9T0-eMkfJiOL_2VN5TUuvs_fYANa3XXoM5OX4AMP1W2iSA@mail.gmail.com>
	<201202061054.26448.luke@dashjr.org>
	<201202071004.37615.luke@dashjr.org>
Message-ID: <201202071114.01444.luke@dashjr.org>

On Tuesday, February 07, 2012 10:04:36 AM Luke-Jr wrote:
> On Monday, February 06, 2012 10:54:25 AM Luke-Jr wrote:
> > > 769 : Make transactions with extra data in scriptSig non-standard
> > 
> > If this affects relaying, it will significantly harm the ability to
> > replace the current spammy "green address" scheme with a sensible extra
> > signature system. On the miner end, it could significantly harm adoption
> > of such a system.

gmaxwell explained to me why this is no longer needed on IRC.
I withdraw my objection.



From gavinandresen at gmail.com  Tue Feb  7 16:14:14 2012
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Tue, 7 Feb 2012 11:14:14 -0500
Subject: [Bitcoin-development] Version 0.6 release candidate 1 plan
In-Reply-To: <201202071004.37615.luke@dashjr.org>
References: <CABsx9T0-eMkfJiOL_2VN5TUuvs_fYANa3XXoM5OX4AMP1W2iSA@mail.gmail.com>
	<201202061054.26448.luke@dashjr.org>
	<201202071004.37615.luke@dashjr.org>
Message-ID: <CABsx9T0jXxwc8N2i4kVOqNP5B8AgiPUJuxMcgB7=WU2cCeq-iQ@mail.gmail.com>

> Do you have an alternative solution to the
> problem of green addresses spamming the blockchain?

Sure, here's one:

Green address provider give a REST-ful API, that provides the
following functionality:

+ Give transaction ID and credentials, request that the transaction be
declared "green"
  (sender's wallet site/software would do this)

+ Give transaction ID, return boolean "has this transaction been
deeclared green?"



As I said, I think any design that relies on clients recognizing two
variations of a transaction is a very bad idea.

-- 
--
Gavin Andresen



From grarpamp at gmail.com  Wed Feb  8 05:18:44 2012
From: grarpamp at gmail.com (grarpamp)
Date: Wed, 8 Feb 2012 00:18:44 -0500
Subject: [Bitcoin-development] Scaling at the end user level
Message-ID: <CAD2Ti2_vGc+SJX_+uTz4ZVk1r5DhCOm6n3yKW16o9QaPKTQkHQ@mail.gmail.com>

A freshly deployed client on an old p4 has been idly crunching away
at building and verifying the initial chain for about a week now. It
should be done in a day or two. This seems rather untenable for
new users. Have any groups published proposals for distributing
a weekly precomputed bootstrap chain?
rsync? db_dump > git > db_load?
There is also 50% or more compression available in the index
and chain.
Of some known future issues... raw transaction rate, the eventual pay
(or extort?, depending on how megapools pan out) to process mining
environment, and scaling the client count itself... this one appears to
be already present.



From grarpamp at gmail.com  Wed Feb  8 07:21:51 2012
From: grarpamp at gmail.com (grarpamp)
Date: Wed, 8 Feb 2012 02:21:51 -0500
Subject: [Bitcoin-development] Scaling at the end user level
In-Reply-To: <CAD2Ti2_vGc+SJX_+uTz4ZVk1r5DhCOm6n3yKW16o9QaPKTQkHQ@mail.gmail.com>
References: <CAD2Ti2_vGc+SJX_+uTz4ZVk1r5DhCOm6n3yKW16o9QaPKTQkHQ@mail.gmail.com>
Message-ID: <CAD2Ti29UvdVevKvccbA6PbUMcmrgM4LDnL+cxVSaU4Zt3P-mJw@mail.gmail.com>

> I never did track down this exact issue but it's an artificial
> slowdown.. meaning compression and whatever else wouldn't help much.

I meant for anyone who wanted to distribute the dataset as a project.

> It has something to do with the database file locking and flushing..
> on some systems I've seen the block chain get fully done in 10-20
> mins and on others it slows down to the point where it will never
> catch up.. but not in a way that's related to the age of the computer
> or anything. You might want to experiment if you want to track this
> down.. try building your own libs

Rather than use dated/modified packages, I compiled current versions
of all component sources manually.

> and compare different operating
> systems, on the same hardware to get a more 'true' comparison maybe.

True. Used them all before, happy with BSD for now. Just knowing
what the general setup is on those zippy systems should suffice.
ie: blindly fishing for such a zippy system to compare through various
install tests doesn't sound too appealing. It's different than benchmarking.

Datapoint: The system below is not zippy.

> I think everyone is vaguely aware of the problem but it has not
> been tracked down and eliminated. I don't think the problem is
> within bitcoin itself but in how truthfully the database file is
> actually written to disk.

Am I correct in guessing that, given a certain height, the data
in blkindex and blk0001 should be the same across instances?

# file blk*
blk0001.dat:             data
blkindex.dat:            Berkeley DB (Btree, version 9, native byte-order)

Pursuant to comparison, what is the format of blk0001.dat?

> If it really gets flushed to disk every
> block like bitcoin wants it to be, then there is no way that you
> could get more than 50-60 blocks per second through it (due to
> rotational latency), but on some operating systems and versions/options
> it seems to end up caching the writes and flies through it at
> thousands of blocks per second. The problem is similar to what's
> mentioned here: http://www.sqlite.org/faq.html#q19

I'm not running Linux with asynchronous data and metadata
turned on by default if that's what you mean :) ZFS, disk crypto,
standard drive write cache. Looking at it, I'm largely buried in
that crypto at 8MB/sec or so.

> Perhaps it's as simple as some default in the db lib.. and it seems
> to default to different things on different version/operating
> systems/filesystems.

Hmm, I compiled everything with the defaults. Will go back and
look at bdb options. I don't think there was anything interesting
there. I'd bet a lot is tied to the fs and cpu.
Single core p4 at 1.8 512k/2g isn't much up against ZFS+disk crypto.

It seems to take its time and roll up all but the last database file (of
a hundred or more) on receiving sigterm. Is it supposed to roll
and delete the last log too? Can I safely delete everything but
the blk* files? (wallet excepted of course :)

Currently, in KiB...

running:
853716  database
747881  blk0001.dat
290601  blkindex.dat
4361    addr.dat
137     __db.005
137     __db.004
137     __db.003
137     __db.002
41      __db.006
25      __db.001

sigterm:
750569  blk0001.dat
291497  blkindex.dat
8465    database/log.0000000nnn
4361    addr.dat

database/log.0000000133: Berkeley DB (Log, version 16, native byte-order)



From laanwj at gmail.com  Wed Feb  8 08:34:38 2012
From: laanwj at gmail.com (Wladimir)
Date: Wed, 8 Feb 2012 09:34:38 +0100
Subject: [Bitcoin-development] Scaling at the end user level
In-Reply-To: <CAD2Ti2_vGc+SJX_+uTz4ZVk1r5DhCOm6n3yKW16o9QaPKTQkHQ@mail.gmail.com>
References: <CAD2Ti2_vGc+SJX_+uTz4ZVk1r5DhCOm6n3yKW16o9QaPKTQkHQ@mail.gmail.com>
Message-ID: <CA+s+GJCh4n2BAj=sFfUnUBgcJuJ9EPe=5qYftZ8SogDX_EQATg@mail.gmail.com>

On Wed, Feb 8, 2012 at 6:18 AM, grarpamp <grarpamp at gmail.com> wrote:

> A freshly deployed client on an old p4 has been idly crunching away
> at building and verifying the initial chain for about a week now. It
> should be done in a day or two. This seems rather untenable for
> new users. Have any groups published proposals for distributing
> a weekly precomputed bootstrap chain?
> rsync? db_dump > git > db_load?
> There is also 50% or more compression available in the index
> and chain.
>

I have proposed packaging part of the block chain (doesn't even have to be
weekly, just until the last checkpoint), but people fear it runs contrary
to the distributed approach of Bitcoin.

Which is kind of true:

- If it is imported un-validated, you have to rely on the packager to lie
to you (insert false transactions etc)
- If it has to be validated, you win nothing, your computer has to crunch
for days anyway

BTW: On such an old computer you should probably use one of the thin
clients.

Wladimir
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120208/14a9214b/attachment.html>

From gavinandresen at gmail.com  Wed Feb  8 16:27:03 2012
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Wed, 8 Feb 2012 11:27:03 -0500
Subject: [Bitcoin-development] 0.6 Release Candidate 1
Message-ID: <CABsx9T3Wst0e1-ya2tjAnXe=RkZZAz06NKjuZbv3zpS5OLmjyw@mail.gmail.com>

I'd like version 0.6 to get lots of review, "soak time" and testing, so
please download and run release candidate 1 from:
?http://sourceforge.net/projects/bitcoin/files/Bitcoin/bitcoin-0.6.0/test/

You can review the code changes using github's compare feature:
 https://github.com/bitcoin/bitcoin/compare/v0.5.2...v0.6.0rc1

Please report bugs using the github issue tracker.


Release notes:

NEW FEATURES SINCE BITCOIN VERSION 0.5
--------------------------------------
Bitcoin-Qt can display and save QR codes for sending
and receiving addresses.

New context menu on addresses to copy/edit/delete them.

New Sign Message dialog that allows you to prove that you
own a bitcoin address by creating a digital
signature.

Wallets created with this version of bitcoin will
use 33-byte 'compressed' public keys instead of
65-byte public keys, resulting in smaller
transactions and less traffic on the bitcoin
network. The shorter keys are completely
compatible with older versions.

New command-line argument -blocknotify=<command>
that will spawn a shell process to run <command>
when a new block is accepted.

validateaddress JSON-RPC api command output includes
two new fields for addresses in the wallet:
?pubkey : hexadecimal public key
?iscompressed : true if pubkey is a short 33-byte key

New JSON-RPC api commands for dumping/importing
private keys from the wallet (dumprivkey, importprivkey).

New JSON-RPC api command for getting information about
blocks (getblock, getblockhash).

New JSON-RPC api command for getting extra information
related to mining (getmininginfo).


NOTABLE CHANGES
---------------

The -nolisten, -noupnp and -nodnsseed command-line
options were renamed to -listen, -upnp and -dnsseed,
with a default value of 1. The old names are still
supported for compatibility (so specifying -nolisten
is automatically interpreted as -listen=0; every
boolean argument can now be specified as either
-foo or -nofoo).

The -noirc command-line options was renamed to
-irc, with a default value of 0. Run -irc=1 to
get the old behavior.


PRELIMINARY SUPPORT FOR MULTISIGNATURE TRANSACTIONS
---------------------------------------------------

This release has preliminary support for multisignature
transactions-- transactions that require authorization
from more than one person or device before they
will be accepted by the bitcoin network.

Prior to this release, multisignature transactions
were considered 'non-standard' and were ignored;
with this release multisignature transactions are
considered standard and will start to be relayed
and accepted into blocks.

It is expected that future releases of Bitcoin-Qt
will support the creation of multisignature transactions,
once enough of the network has upgraded so relaying
and validating them is robust.

For this release, creation and testing of multisignature
transactions is limited to the bitcoin test network using
the "addmultisigaddress" JSON-RPC api call.

Short multisignature address support is included in this
release, as specified in BIP 16. Run with -bip16=0 to
turn off support for BIP 16.


-- 
--
Gavin Andresen



From grarpamp at gmail.com  Wed Feb  8 19:32:33 2012
From: grarpamp at gmail.com (grarpamp)
Date: Wed, 8 Feb 2012 14:32:33 -0500
Subject: [Bitcoin-development] Scaling at the end user level
In-Reply-To: <CA+s+GJCh4n2BAj=sFfUnUBgcJuJ9EPe=5qYftZ8SogDX_EQATg@mail.gmail.com>
References: <CAD2Ti2_vGc+SJX_+uTz4ZVk1r5DhCOm6n3yKW16o9QaPKTQkHQ@mail.gmail.com>
	<CA+s+GJCh4n2BAj=sFfUnUBgcJuJ9EPe=5qYftZ8SogDX_EQATg@mail.gmail.com>
Message-ID: <CAD2Ti2-JtfF09e_4b3HKn4a+GYKj72tgR2aQ-WpiKXZAwA9uvg@mail.gmail.com>

>> Have any groups published proposals for distributing
>> a weekly precomputed bootstrap chain?
>> rsync? db_dump > git > db_load?
>> There is also 50% or more compression available in the index
>> and chain.

> I have proposed packaging part of the block chain (doesn't even have to be
> weekly, just until the last checkpoint), but people fear it runs contrary to
> the distributed approach of Bitcoin.

Git repos are backed by strong hashes. Each commit could be a single
block dump, perhaps into a file hierarchy. Trusted entities, pools, etc
could sign at a checkpoint/height. Blockchain tools
would need made that can take the blk* and export single blocks and
process/export up to a certain block and quit. Everyone would do a
comparison and sign a commit hash. Everyone else git pulls. Having
the block toolset is a key prequisite to any sort of distribution. They don't
exist now :( Maybe the two bitcoin compatible library projects out there
will implement them :) Torrents are also strongly hashed and could be
signed as well.

Making the blockchain tools would be the most important thing to start.

> BTW: On such an old computer you should probably use one of the thin
> clients.

If that means not validating the chain, then it's as above. I'm not sure if it's
right to not care about the history if only making new transactions with a new
key post install time and then only validating new transactions as they come
in. Will have a look.



From grarpamp at gmail.com  Fri Feb 10 02:33:38 2012
From: grarpamp at gmail.com (grarpamp)
Date: Thu, 9 Feb 2012 21:33:38 -0500
Subject: [Bitcoin-development] Some state/data file info
Message-ID: <CAD2Ti2-ggDgRZYA=xGL7qVNHA4BhtkNNVD5yY0ZUcoLwVX_H5g@mail.gmail.com>

I've been playing with the tools in db 4.8.30, and bitcoin stable...
My blockchain is up to date. Bitcoin is not running.

#  strings database/*
This will at times yield the addresses in your wallet.
So it's not exactly in compliance with 'only your wallet file matters'.

Bitcoin always leaves behind at least one "database/log.nnn" file.
Shouldn't it roll and delete it on exit like it does the other state files?
Particularly after a simple "we're able to do nothing but local
operations" invocation
like: bitcoind -proxy=127.0.0.1:9050 -keypool=0 -connect=127.0.0.1
-nodnsseed -noirc

Similarly, the ".lock" file is never deleted.
Shouldn't it be upon exit?

Vacuuming addr, blkindex, and wallet with "db_dump | db_load" will save
significant space. I do not yet know how to view or validate blk0001.dat.

When left with junk, I've been removing everything except:
addr.dat - node addresses
bitcoin.conf - config
blk0001.dat - blocks
blkindex.dat - index to blocks
wallet.dat - wallet



From gronager at ceptacle.com  Fri Feb 10 11:53:14 2012
From: gronager at ceptacle.com (=?iso-8859-1?Q?Michael_Gr=F8nager?=)
Date: Fri, 10 Feb 2012 12:53:14 +0100
Subject: [Bitcoin-development] coinexplorer - a local "blockexplorer"
Message-ID: <6C2EA952-C10F-41D4-8A91-B67E49F544D5@ceptacle.com>

I have just uploaded a new application to libcoin: "coinexplorer"

It enables queries similar to that of blockexplorer.com, but locally on your own chain.

coinexplorer builds on a new library addition: coinStat, that is a collection of classes for gathering and querying the block chain for other information than the ones used directly by the Node.

coinexplorer uses the HTTP GET feature of the coinHTTP/Server class to enable a simple search webpage, so you can do block searches by either commandline:
	bitcoind search <Address>

or simply by pointing you browser at http://localhost:8332 

I apologize for the rudimentary interface, but I am not really a javascript/html5 savvy... So a more modern interface is left as an exercise for those who are.

You will find coinexplorer in the latest git:
	https://github.com/ceptacle/libcoin

Cheers,

Michael

Michael Gronager, PhD
Director, Ceptacle
Jens Juels Gade 33
2100 Copenhagen E
Mobile: +45 31 45 14 01
E-mail: gronager at ceptacle.com
Web: http://www.ceptacle.com/




From gavinandresen at gmail.com  Tue Feb 14 02:49:03 2012
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Mon, 13 Feb 2012 21:49:03 -0500
Subject: [Bitcoin-development] IRC meeting Tuesday, Feb 14, 21:00 UTC
Message-ID: <CABsx9T3qct8zZJZtbF7p-qLhatif4ioBqWKNctHHf5=o7mSiRQ@mail.gmail.com>

Tomorrow, Feb 14'th at 21:00 UTC on #bitcoin-dev on Freenode IRC I'd
like to chat about:

Status of BIP 16 support (progress towards 50% hashing power).

Protocol change coming up Feb. 20 (checksums in version messages).

Duplicate coinbase issue (and requiring block height in the coinbase
as a solution).

Then when we're done talking tech we can all send each other bitcoins
with addresses that are cute Valentine's day messages...

-- 
--
Gavin Andresen



From slush at centrum.cz  Tue Feb 14 06:09:30 2012
From: slush at centrum.cz (slush)
Date: Tue, 14 Feb 2012 07:09:30 +0100
Subject: [Bitcoin-development] IRC meeting Tuesday, Feb 14, 21:00 UTC
In-Reply-To: <CABsx9T3qct8zZJZtbF7p-qLhatif4ioBqWKNctHHf5=o7mSiRQ@mail.gmail.com>
References: <CABsx9T3qct8zZJZtbF7p-qLhatif4ioBqWKNctHHf5=o7mSiRQ@mail.gmail.com>
Message-ID: <CAJna-Hh207HLchGj=kOVgeGarXdbSmi91LGtPgJ9NT5iiLhLAg@mail.gmail.com>

Hello Gavin,

excuse me, but do you think it's good idea to have IRC meeting on
Valentine's evening? Some of us have girlfriends :-).

slush

On Tue, Feb 14, 2012 at 3:49 AM, Gavin Andresen <gavinandresen at gmail.com>wrote:

> Tomorrow, Feb 14'th at 21:00 UTC on #bitcoin-dev on Freenode IRC I'd
> like to chat about:
>
> Status of BIP 16 support (progress towards 50% hashing power).
>
> Protocol change coming up Feb. 20 (checksums in version messages).
>
> Duplicate coinbase issue (and requiring block height in the coinbase
> as a solution).
>
> Then when we're done talking tech we can all send each other bitcoins
> with addresses that are cute Valentine's day messages...
>
> --
> --
> Gavin Andresen
>
>
> ------------------------------------------------------------------------------
> Keep Your Developer Skills Current with LearnDevNow!
> The most comprehensive online learning library for Microsoft developers
> is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3, MVC3,
> Metro Style Apps, more. Free future releases when you subscribe now!
> http://p.sf.net/sfu/learndevnow-d2d
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120214/9dcf5699/attachment.html>

From laanwj at gmail.com  Tue Feb 14 07:23:23 2012
From: laanwj at gmail.com (Wladimir)
Date: Tue, 14 Feb 2012 08:23:23 +0100
Subject: [Bitcoin-development] IRC meeting Tuesday, Feb 14, 21:00 UTC
In-Reply-To: <CAJna-Hh207HLchGj=kOVgeGarXdbSmi91LGtPgJ9NT5iiLhLAg@mail.gmail.com>
References: <CABsx9T3qct8zZJZtbF7p-qLhatif4ioBqWKNctHHf5=o7mSiRQ@mail.gmail.com>
	<CAJna-Hh207HLchGj=kOVgeGarXdbSmi91LGtPgJ9NT5iiLhLAg@mail.gmail.com>
Message-ID: <CA+s+GJA8B8TJ6KPA71z7zHAvtXpH0m0fUcbqxi=x06+zxcvnYA@mail.gmail.com>

On Tue, Feb 14, 2012 at 7:09 AM, slush <slush at centrum.cz> wrote:

> Hello Gavin,
>
> excuse me, but do you think it's good idea to have IRC meeting on
> Valentine's evening? Some of us have girlfriends :-).
>

I have a girlfriend but she hates valentines day so it is ok with me:-)

Wladimir


>
> slush
>
>
> On Tue, Feb 14, 2012 at 3:49 AM, Gavin Andresen <gavinandresen at gmail.com>wrote:
>
>> Tomorrow, Feb 14'th at 21:00 UTC on #bitcoin-dev on Freenode IRC I'd
>> like to chat about:
>>
>> Status of BIP 16 support (progress towards 50% hashing power).
>>
>> Protocol change coming up Feb. 20 (checksums in version messages).
>>
>> Duplicate coinbase issue (and requiring block height in the coinbase
>> as a solution).
>>
>> Then when we're done talking tech we can all send each other bitcoins
>> with addresses that are cute Valentine's day messages...
>>
>> --
>> --
>> Gavin Andresen
>>
>>
>> ------------------------------------------------------------------------------
>> Keep Your Developer Skills Current with LearnDevNow!
>> The most comprehensive online learning library for Microsoft developers
>> is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3, MVC3,
>> Metro Style Apps, more. Free future releases when you subscribe now!
>> http://p.sf.net/sfu/learndevnow-d2d
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>
>
>
>
> ------------------------------------------------------------------------------
> Keep Your Developer Skills Current with LearnDevNow!
> The most comprehensive online learning library for Microsoft developers
> is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3, MVC3,
> Metro Style Apps, more. Free future releases when you subscribe now!
> http://p.sf.net/sfu/learndevnow-d2d
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120214/326965ef/attachment.html>

From gavinandresen at gmail.com  Wed Feb 15 19:20:10 2012
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Wed, 15 Feb 2012 14:20:10 -0500
Subject: [Bitcoin-development] 14 Feb IRC meeting summary
Message-ID: <CABsx9T1bgQCT64ywo9t6ti6b2S1yZ9AAkXNRQdHFUpZ+m-UHrw@mail.gmail.com>

Full conversation starts here:
  http://bitcoinstats.com/irc/bitcoin-dev/logs/2012/02/14/5#l2892558

Summary of what was discussed/decided; please correct anything I get wrong:

1. BIP 16 support is at about 34% of hashing power, so we'll continue
to ask big pools and miners to upgrade and will re-evaluate support on
March 1'st, with a potential switchover date if there is enough
support of March 15'th.

2. On February 20'th the protocol changes to include checksums on the
initial version messages. version includes an 'addrFrom' field with
your IP address, and there are (unconfirmed) reports of NAT routers
changing the contents of packets to modify the inside-the-NAT IP
address to the outside-the-NAT address. If you've got a router that
does that, then the version message checksum will be wrong and you'll
be unable to connect.

Two things are being done to address this:

+ A patch that puts the outside-the-NAT IP address in addrFrom. That's
a good idea in any case, exposing interior IP addresses was a mistake.
There will be either a 0.5.3 or 0.5.2.1 release available for anybody
affected.

+ An alert will be sent next Friday on the main network directing
people to a to-be-created bitcoin.org/feb20 web page explaining the
issue.

3. The third issue was how to deal with potential chain-splitting
attacks involving duplicate coinbase transactions. The general
consensus is that in the long-term requiring that the first four bytes
of every coinbase be the block height is the best solution, but
looking for and 'discouraging' just blocks that have duplicate
coinbases is a reasonable short-term solution.

There's still some research and thinking to be done on this issue (see
the IRC discussion for details), but I expect that the final version
of bitcoin-qt/bitcoind version 0.6 will be putting the block height
into coinbases that it creates.


-- 
--
Gavin Andresen



From luke at dashjr.org  Fri Feb 17 16:33:41 2012
From: luke at dashjr.org (Luke-Jr)
Date: Fri, 17 Feb 2012 11:33:41 -0500
Subject: [Bitcoin-development] 2012-02-17 next[-test]
Message-ID: <201202171133.42264.luke@dashjr.org>

	849 gavin/testnetmining
	852 Fix #846. Allow negative options in bitcoin.conf
	719 coinbaser
^^ next ^^
	834 sje/BackupWallet
	570 force_send
	806 sipa/threadid
	816 sipa/lameversion
^^ 037497c ^^
	854 laanwj/2012_02_qtipc
	841 sipa/getalltransactions
	787 sipa/addrman
	823 sipa/nodupcon
	829 sipa/multilocal
	568 rpc_keepalive
	565 optimize_FastGetWork
	837 sje/ShowImmatureBalance
	838 laanwj/201202_guiaddsuffix
	853 laanwj/2012_02_altminimizetray
	855 sje/ToggleHide
^^ 4b7e5f5 ^^
	780 checkhashverify
	715 bugfix_client_name
	559 accept_nonstdtxn
	552 base58_liberal_parsing
	553 bugfix_qt_uri_amount_parser
	562 optimize_ToHex
^^ next-test ^^



From gronager at ceptacle.com  Sun Feb 19 16:38:05 2012
From: gronager at ceptacle.com (Michael Gronager)
Date: Sun, 19 Feb 2012 17:38:05 +0100
Subject: [Bitcoin-development] off-topic: bitcoin-forum...
Message-ID: <15A9E3BE-3288-4CDC-8243-05669298CDB0@ceptacle.com>

I am trying to post on the bitcoin forums (bitcointalk.org), but I am only able to reply and post on some of the regional forums?!?!? On the bitcoin dev and alternative client forums I have no post / reply button...

I don't consider myself an IT illiterate, and I have even tried to create a new user to see if that would help, but no luck....

Can any of you please share with me the secret on how to post there ???

In the expectation of a embarrassingly simple answer...

Michael





From harald at schil.ly  Sun Feb 19 16:42:36 2012
From: harald at schil.ly (Harald Schilly)
Date: Sun, 19 Feb 2012 17:42:36 +0100
Subject: [Bitcoin-development] off-topic: bitcoin-forum...
In-Reply-To: <15A9E3BE-3288-4CDC-8243-05669298CDB0@ceptacle.com>
References: <15A9E3BE-3288-4CDC-8243-05669298CDB0@ceptacle.com>
Message-ID: <CAGG4CB7HY4z0uvRXxc2S-Bmg9JdVFPDhJhLdWff2BE8eje3JTg@mail.gmail.com>

On Sun, Feb 19, 2012 at 17:38, Michael Gronager <gronager at ceptacle.com> wrote:
> In the expectation of a embarrassingly simple answer...

you probably need to be whitelisted, but i'm not sure.
https://bitcointalk.org/index.php?topic=15911.0

h



From gronager at ceptacle.com  Sun Feb 19 16:45:42 2012
From: gronager at ceptacle.com (=?iso-8859-1?Q?Michael_Gr=F8nager?=)
Date: Sun, 19 Feb 2012 17:45:42 +0100
Subject: [Bitcoin-development] off-topic: bitcoin-forum...
In-Reply-To: <CAGG4CB7HY4z0uvRXxc2S-Bmg9JdVFPDhJhLdWff2BE8eje3JTg@mail.gmail.com>
References: <15A9E3BE-3288-4CDC-8243-05669298CDB0@ceptacle.com>
	<CAGG4CB7HY4z0uvRXxc2S-Bmg9JdVFPDhJhLdWff2BE8eje3JTg@mail.gmail.com>
Message-ID: <99923487-B2AA-4313-94F3-E88BA4631366@ceptacle.com>

Thanks!

"required 5 posts and 4 hours"

Well, that is not so easy if you cannot post ;) I will apply for whitelisting - strange policy though...

/M

On 19/02/2012, at 17:42, Harald Schilly wrote:

> On Sun, Feb 19, 2012 at 17:38, Michael Gronager <gronager at ceptacle.com> wrote:
>> In the expectation of a embarrassingly simple answer...
> 
> you probably need to be whitelisted, but i'm not sure.
> https://bitcointalk.org/index.php?topic=15911.0
> 
> h

Michael Gronager, PhD
Director, Ceptacle
Jens Juels Gade 33
2100 Copenhagen E
Mobile: +45 31 45 14 01
E-mail: gronager at ceptacle.com
Web: http://www.ceptacle.com/




From harald at schil.ly  Sun Feb 19 16:46:49 2012
From: harald at schil.ly (Harald Schilly)
Date: Sun, 19 Feb 2012 17:46:49 +0100
Subject: [Bitcoin-development] off-topic: bitcoin-forum...
In-Reply-To: <99923487-B2AA-4313-94F3-E88BA4631366@ceptacle.com>
References: <15A9E3BE-3288-4CDC-8243-05669298CDB0@ceptacle.com>
	<CAGG4CB7HY4z0uvRXxc2S-Bmg9JdVFPDhJhLdWff2BE8eje3JTg@mail.gmail.com>
	<99923487-B2AA-4313-94F3-E88BA4631366@ceptacle.com>
Message-ID: <CAGG4CB45oHkjwOdns-spFf4D8XVT_sMHRhELUDb4CHy=6W2bHQ@mail.gmail.com>

On Sun, Feb 19, 2012 at 17:45, Michael Gr?nager <gronager at ceptacle.com> wrote:
> strange policy though...

well, spammers are everywhere :)

h



From laanwj at gmail.com  Sun Feb 19 16:51:56 2012
From: laanwj at gmail.com (Wladimir)
Date: Sun, 19 Feb 2012 17:51:56 +0100
Subject: [Bitcoin-development] off-topic: bitcoin-forum...
In-Reply-To: <99923487-B2AA-4313-94F3-E88BA4631366@ceptacle.com>
References: <15A9E3BE-3288-4CDC-8243-05669298CDB0@ceptacle.com>
	<CAGG4CB7HY4z0uvRXxc2S-Bmg9JdVFPDhJhLdWff2BE8eje3JTg@mail.gmail.com>
	<99923487-B2AA-4313-94F3-E88BA4631366@ceptacle.com>
Message-ID: <CA+s+GJB6i6rUSO1gztJNb-d6MU0nD35n0VLB9VeAm=ZaNzjrag@mail.gmail.com>

On Sun, Feb 19, 2012 at 5:45 PM, Michael Gr?nager <gronager at ceptacle.com>wrote:

> Thanks!
>
> "required 5 posts and 4 hours"
>
> Well, that is not so easy if you cannot post ;) I will apply for
> whitelisting - strange policy though...
>

It was instated in times that the forums were much more busy. There were a
lot of new people that trolled the forum with questions immediately, which
were answered throughout the forum already. This policy forces people to
hang around the newbie forums a bit before being able to post to the "full"
forum. I'm not sure it's really needed anymore -- anyway, it used to be
much more strict and you'll have no problems getting whitelisted.

Wladimir
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120219/90d7c624/attachment.html>

From grarpamp at gmail.com  Sun Feb 19 21:32:58 2012
From: grarpamp at gmail.com (grarpamp)
Date: Sun, 19 Feb 2012 16:32:58 -0500
Subject: [Bitcoin-development] off-topic: bitcoin-forum...
In-Reply-To: <15A9E3BE-3288-4CDC-8243-05669298CDB0@ceptacle.com>
References: <15A9E3BE-3288-4CDC-8243-05669298CDB0@ceptacle.com>
Message-ID: <CAD2Ti2_QDX-tFZFsweLU=5AptzxhAs-d2euJ+kWHnL3Kh6rzvA@mail.gmail.com>

> I am trying to post on the bitcoin forums (bitcointalk.org)

I wish there were a bitcoin-user mailing list??? But the one on
sourceforge is dead. Forums are too full of avatars, smilies,
sigblocks and dead mass to be of much use. Not to mention
when they vanish, any content dies with it instead of living
on in various archives.



From grarpamp at gmail.com  Sun Feb 19 22:00:22 2012
From: grarpamp at gmail.com (grarpamp)
Date: Sun, 19 Feb 2012 17:00:22 -0500
Subject: [Bitcoin-development] Git repo choices
Message-ID: <CAD2Ti2-0nMARZ-vyDk0-ToKF-SvHMrG65Pe9Bwv6TLkfwmEqew@mail.gmail.com>

I'm a little unclear on which repo is which and
for what intended uses. And other than #1,
their descriptions on the hubs are minimal.
I'm not the best with git, but getting there.
Are these the right way to think of them?
And that #1 and #3 are what most builders
and hacks should be tracking?

#1
https://github.com/bitcoin/bitcoin.git

The current development tree. As such, HEAD/master/origin
may at times not be exactly reliable/usable.

#2
https://git.gitorious.org/bitcoin/bitcoind.git

A copy of some chunk of #1 that then died
off around v0.4.0. Purposed similar to #3?

#3
https://git.gitorious.org/bitcoin/bitcoind-stable.git

Another copy of #1. For development along stable
branches and making release cuts from same?
Releases get pulled back to #1 for keeping?
The HEAD/master/origin should be reliable.

Why is this functoin not a part of #1?

Thanks.



From nanotube at gmail.com  Sun Feb 19 22:57:58 2012
From: nanotube at gmail.com (Daniel F)
Date: Sun, 19 Feb 2012 17:57:58 -0500
Subject: [Bitcoin-development] off-topic: bitcoin-forum...
In-Reply-To: <CAD2Ti2_QDX-tFZFsweLU=5AptzxhAs-d2euJ+kWHnL3Kh6rzvA@mail.gmail.com>
References: <15A9E3BE-3288-4CDC-8243-05669298CDB0@ceptacle.com>
	<CAD2Ti2_QDX-tFZFsweLU=5AptzxhAs-d2euJ+kWHnL3Kh6rzvA@mail.gmail.com>
Message-ID: <4F417E76.30001@gmail.com>

on 02/19/2012 04:32 PM grarpamp said the following:
>> I am trying to post on the bitcoin forums (bitcointalk.org)
> I wish there were a bitcoin-user mailing list??? But the one on
> sourceforge is dead. Forums are too full of avatars, smilies,
> sigblocks and dead mass to be of much use. Not to mention
> when they vanish, any content dies with it instead of living
> on in various archives.
Some time ago i started a googlegroup mailing list, bitcoin-discussion.
It's been pretty low-volume... but it's something. :)

http://groups.google.com/group/bitcoin-discussion

or we could try to revive the bitcoin-list ml on sf.



From grarpamp at gmail.com  Mon Feb 20 00:13:13 2012
From: grarpamp at gmail.com (grarpamp)
Date: Sun, 19 Feb 2012 19:13:13 -0500
Subject: [Bitcoin-development] off-topic: bitcoin-forum...
In-Reply-To: <4F417E76.30001@gmail.com>
References: <15A9E3BE-3288-4CDC-8243-05669298CDB0@ceptacle.com>
	<CAD2Ti2_QDX-tFZFsweLU=5AptzxhAs-d2euJ+kWHnL3Kh6rzvA@mail.gmail.com>
	<4F417E76.30001@gmail.com>
Message-ID: <CAD2Ti2-KxefhJHJXozfS7wCnMmmsbscA9ne05aTqdwW-ZcJmUg@mail.gmail.com>

> Some time ago i started a googlegroup mailing list, bitcoin-discussion.
> It's been pretty low-volume... but it's something. :)
> http://groups.google.com/group/bitcoin-discussion

Unfortunately it appears to be just as dead as the one
on sourceforge.

> or we could try to revive the bitcoin-list ml on sf.

Well there's a couple things I see...

1) Yes, IMO, a real mailing list for users needs to exist.
Among the prior reasons... lists tend to house a more
technical crowd than forums which are magnets for
initiates.
2) There was originally one client. Now there are many,
all adherant to the same bitcoin spec. So while:
 bitcoin-development at lists.sourceforge.net
represents the dev community for the original client,
it may not, or won't be, for any other client.
And as:
 bitcoin-list at lists.sourceforge.net
was for, and is administratively tied to, the original client...
it may not be the place, or a welcome one, to hold talk of all
the adherant clients.
3) The sourceforge list browsing interface is ridiculously
lame and overweight, and it doesn't appear to be setting
a '^Reply-to: ' header which is bad. Googlegroups would
be an ok site I suppose. And a pure MailMan interface would
be even better and more customarily accepted.

So for the user list, I'd suggest:
1) Search a bit to make sure there's not already a busy list
out there somewhere. Check the list aggregator sites
like markmail, gmane, etc too.
2) Charter it as bitcoin protocol, client agnostic.
3) Find an impartial administrative and robust home for the list
with browsable, searchable and hopefully downloadable archives.
4) Make the announcement to other known client lists/forums.
5) Close any relevant old lists.
6) Promote via similar announcement from time to time.


http://groups.google.com/group/bitcoin-discussion/about
Description: A place for discussion related to bitcoin.

Is this sufficient charter to go with? Is the creator/maintainer
known impartial? What happens to ongoing list operations when
said people vanish? It is presumed googlegroups itself is robust.



From nanotube at gmail.com  Mon Feb 20 02:32:34 2012
From: nanotube at gmail.com (Daniel F)
Date: Sun, 19 Feb 2012 21:32:34 -0500
Subject: [Bitcoin-development] off-topic: bitcoin-forum...
In-Reply-To: <CAD2Ti2-KxefhJHJXozfS7wCnMmmsbscA9ne05aTqdwW-ZcJmUg@mail.gmail.com>
References: <15A9E3BE-3288-4CDC-8243-05669298CDB0@ceptacle.com>
	<CAD2Ti2_QDX-tFZFsweLU=5AptzxhAs-d2euJ+kWHnL3Kh6rzvA@mail.gmail.com>
	<4F417E76.30001@gmail.com>
	<CAD2Ti2-KxefhJHJXozfS7wCnMmmsbscA9ne05aTqdwW-ZcJmUg@mail.gmail.com>
Message-ID: <4F41B0C2.5000209@gmail.com>

on 02/19/2012 07:13 PM grarpamp said the following:
>> Some time ago i started a googlegroup mailing list, bitcoin-discussion.
>> It's been pretty low-volume... but it's something. :)
>> http://groups.google.com/group/bitcoin-discussion
> 
> Unfortunately it appears to be just as dead as the one
> on sourceforge.

That's exactly what i said above, in a more euphemistic fashion :D

> Well there's a couple things I see...
> 
> 1) Yes, IMO, a real mailing list for users needs to exist.
> Among the prior reasons... lists tend to house a more
> technical crowd than forums which are magnets for
> initiates.

indeed.

> 2) There was originally one client. Now there are many,
> all adherant to the same bitcoin spec. So while:
>  bitcoin-development at lists.sourceforge.net
> represents the dev community for the original client,
> it may not, or won't be, for any other client.
> And as:
>  bitcoin-list at lists.sourceforge.net
> was for, and is administratively tied to, the original client...
> it may not be the place, or a welcome one, to hold talk of all
> the adherant clients.

i'm sure that with the list being unused, we could change the charter
and do whatever with it, and the people who matter probably won't object.

> 3) The sourceforge list browsing interface is ridiculously
> lame and overweight, and it doesn't appear to be setting
> a '^Reply-to: ' header which is bad. Googlegroups would
> be an ok site I suppose. And a pure MailMan interface would
> be even better and more customarily accepted.

Indeed, good points on all counts.

> So for the user list, I'd suggest:
> 1) Search a bit to make sure there's not already a busy list
> out there somewhere. Check the list aggregator sites
> like markmail, gmane, etc too.
> 2) Charter it as bitcoin protocol, client agnostic.
> 3) Find an impartial administrative and robust home for the list
> with browsable, searchable and hopefully downloadable archives.
> 4) Make the announcement to other known client lists/forums.
> 5) Close any relevant old lists.
> 6) Promote via similar announcement from time to time.

good points. re 1), i'm pretty sure that -dev is the most active
bitcoin-related public mailing list. things may have changed in the past
half-year, but it seems unlikely.

> http://groups.google.com/group/bitcoin-discussion/about
> Description: A place for discussion related to bitcoin.
> 
> Is this sufficient charter to go with? Is the creator/maintainer
> known impartial? What happens to ongoing list operations when
> said people vanish? It is presumed googlegroups itself is robust.

charter can be changed if needed. creator/maintainer, that being me, is
generally known to be a pretty decent guy :). i'm not attached to this
particular list though, but whatever happens, i'd hope that there will
be more people willing to share administrative duties. not sure if
googlegroups is the best interface, if we can find some good free host
with mailman, downloadable archives, the works, that may be preferable.
i started that group on gg simply because it was free and easily
available and easy to set up.



From gronager at ceptacle.com  Mon Feb 20 11:17:01 2012
From: gronager at ceptacle.com (=?iso-8859-1?Q?Michael_Gr=F8nager?=)
Date: Mon, 20 Feb 2012 12:17:01 +0100
Subject: [Bitcoin-development] BIP-13
Message-ID: <3DA9C79B-D91D-48B2-9469-37BAA037FC50@ceptacle.com>

Just posted this on the wiki BIP-13 discussion - should I make it into a BIP of its own ?

---
The "version" portion of the address has so far been labeled "network id", and indicates from which network and which chain the address can be used for. I think that this change from network id to version is much more fundamental and should not just be squeezed in along with bip16/17. The right way to do this is to structure the bitcoin address into:

base58-encode: [one-byte network ID][20-byte hash][one-byte address class][3-byte checksum]

This will move the possibility of using a faulty address from 1 to 4bill to 1 to 24mio. Recall that for most other payment systems this checksum is 1 to 9! So it should be sufficient. An old client will then render the new addresses as useless and they will still maintain their old familiar 1xxx look - the whole point in multisig is that it should not be a matter of the paying party to worry about securing wallet of the receiver, hence he should not be bothered with a new "3" kind of address now... --Michael Gronager/libcoin 10:49, 20 February 2012 (GMT)





From luke at dashjr.org  Mon Feb 20 14:18:37 2012
From: luke at dashjr.org (Luke-Jr)
Date: Mon, 20 Feb 2012 09:18:37 -0500
Subject: [Bitcoin-development] BIP-13
In-Reply-To: <3DA9C79B-D91D-48B2-9469-37BAA037FC50@ceptacle.com>
References: <3DA9C79B-D91D-48B2-9469-37BAA037FC50@ceptacle.com>
Message-ID: <201202200918.38484.luke@dashjr.org>

On Monday, February 20, 2012 6:17:01 AM Michael Gr?nager wrote:
> Just posted this on the wiki BIP-13 discussion - should I make it into a
> BIP of its own ?

If you must. However, BIP 13 has been pretty much undisputed, and only held 
back by BIP 16/17 so far...

> The "version" portion of the address has so far been labeled "network id",
> and indicates from which network and which chain the address can be used
> for.

Where do you see this? It has always been "version" as far as I am aware, and 
we discussed formalizing the details of the bits in it a few months back.
In any case, it was certainly originally intended as "version" as can be 
observed in Satoshi's reference implementation.



From gronager at ceptacle.com  Mon Feb 20 15:47:53 2012
From: gronager at ceptacle.com (=?iso-8859-1?Q?Michael_Gr=F8nager?=)
Date: Mon, 20 Feb 2012 16:47:53 +0100
Subject: [Bitcoin-development] BIP-13
In-Reply-To: <201202200918.38484.luke@dashjr.org>
References: <3DA9C79B-D91D-48B2-9469-37BAA037FC50@ceptacle.com>
	<201202200918.38484.luke@dashjr.org>
Message-ID: <9BF2FBEB-5F85-45A8-8343-0F160A28483B@ceptacle.com>

> 
>> The "version" portion of the address has so far been labeled "network id",
>> and indicates from which network and which chain the address can be used
>> for.
> 
> Where do you see this? It has always been "version" as far as I am aware, and 
> we discussed formalizing the details of the bits in it a few months back.
> In any case, it was certainly originally intended as "version" as can be 
> observed in Satoshi's reference implementation.

See: https://en.bitcoin.it/wiki/Technical_background_of_Bitcoin_addresses

And the attached graphics - here it is defined as network byte and network id.

Anyway - can probably live with some bit level subdivision into network id and address class.

/M


From gavinandresen at gmail.com  Mon Feb 20 17:17:07 2012
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Mon, 20 Feb 2012 12:17:07 -0500
Subject: [Bitcoin-development] BIP-13
In-Reply-To: <3DA9C79B-D91D-48B2-9469-37BAA037FC50@ceptacle.com>
References: <3DA9C79B-D91D-48B2-9469-37BAA037FC50@ceptacle.com>
Message-ID: <CABsx9T0hCAtJnA9YnmVAMjjSPB5W30e=cp8BX2mO--cWEzuSNQ@mail.gmail.com>

RE:
> base58-encode: [one-byte network ID][20-byte hash][one-byte address
class][3-byte checksum]

How will the code distinguish between the old scheme:
[one-byte-version][20-byte-hash][4-byte-checksum]
and the new?

1 in 256 old addresses will have a first-byte-of-checksum that matches the
new address class; I guess the code would do something like:

a) If the 4-byte checksum matches, then assume it is a singlesig address (1
in 2^32 multisig addresses will incorrectly match)
b) If the one-byte-address-class and 3-byte checksum match, then it is a
valid p2sh
c) Otherwise, invalid address

The 1 in 2^32 multisig addresses also being valid singlesig addresses makes
me think this scheme won't work-- an attacker willing to generate 8 billion
or so ECDSA keys could generate a single/multisig collision.  I'm not sure
how that could be leveraged to their advantage, but I bet they'd find a way.

RE: should it be a BIP:  The BIP process is described in BIP
0001<https://en.bitcoin.it/wiki/BIP_0001#BIP_Work_Flow>,
and you're following it perfectly so far:

1) Post a rough draft of the idea here to see if there's any chance it'll
be adopted
2) Assuming a positive response and no major flaws: write up a draft BIP
3) Post the draft BIP here, where it can be picked apart.
4) Assuming no major flaws, ask the BIP editor (Amir) for a BIP number

I'd also encourage you to actually implement your idea between steps 3 and
4. But in this particular case, I think an attacker being able to create
singlesig/p2sh address collisions counts as a major flaw.

-- 
--
Gavin Andresen
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120220/6f1b9f1d/attachment.html>

From gronager at ceptacle.com  Mon Feb 20 21:29:57 2012
From: gronager at ceptacle.com (=?iso-8859-1?Q?Michael_Gr=F8nager?=)
Date: Mon, 20 Feb 2012 22:29:57 +0100
Subject: [Bitcoin-development] BIP-13
In-Reply-To: <CABsx9T0hCAtJnA9YnmVAMjjSPB5W30e=cp8BX2mO--cWEzuSNQ@mail.gmail.com>
References: <3DA9C79B-D91D-48B2-9469-37BAA037FC50@ceptacle.com>
	<CABsx9T0hCAtJnA9YnmVAMjjSPB5W30e=cp8BX2mO--cWEzuSNQ@mail.gmail.com>
Message-ID: <C0B1418A-11D9-4F4C-8C75-0261AEAD1F4A@ceptacle.com>

> How will the code distinguish between the old scheme:
> [one-byte-version][20-byte-hash][4-byte-checksum]
> and the new?
> 
> 1 in 256 old addresses will have a first-byte-of-checksum that matches the new address class; I guess the code would do something like:
> 
> a) If the 4-byte checksum matches, then assume it is a singlesig address (1 in 2^32 multisig addresses will incorrectly match)
> b) If the one-byte-address-class and 3-byte checksum match, then it is a valid p2sh
> c) Otherwise, invalid address

Exactly!

> 
> The 1 in 2^32 multisig addresses also being valid singlesig addresses makes me think this scheme won't work-- an attacker willing to generate 8 billion or so ECDSA keys could generate a single/multisig collision.  I'm not sure how that could be leveraged to their advantage, but I bet they'd find a way.

Nope - its almost like calling the version:0+5 possible collision with new evil, say "ponzicoin" with version=5 a possible flaw that could be exploited... And you can already create non-existing addresses with a matching checksum...

> I'd also encourage you to actually implement your idea between steps 3 and 4. But in this particular case, I think an attacker being able to create singlesig/p2sh address collisions counts as a major flaw.

I will rest my case, not due to the "flaw", but I got some info on the bitfields of the "version" (thanks Luke!) - this makes the +5 less arbitrary, however, I don't think the bitfield interpretation is that well known, so there might already be "version"-collisions...:

Network class:
00xxxxxx - main network
01xxxxxx - reserved
10xxxxxx - reserved
11xxxxxx - test network

Network:
xx00xxxx - bitcoin
xx01xxxx - reserved
xx10xxxx - OTHER (next octet)
xx11xxxx - Namecoin

Network specific:
xxxx000y - PubKeyHash
xxxx001y - reserved
xxxx010y - p2sh
xxxx011y - public key (raw)
xxxx100y - signature
xxxx101y - reserved
xxxx110y - private key (raw)
xxxx111y - OTHER (next octet)

y = 0/1 depending on aesthetics (I guess to force the address to be either 1 or 3). 

This also opens up for extensions - (if xx10xxxx or xxxx111x) the next byte will be part of the version.

/M

> 
> -- 
> --
> Gavin Andresen





From gronager at ceptacle.com  Tue Feb 21 20:33:14 2012
From: gronager at ceptacle.com (=?iso-8859-1?Q?Michael_Gr=F8nager?=)
Date: Tue, 21 Feb 2012 21:33:14 +0100
Subject: [Bitcoin-development] BitcoinQt eating 100% CPU
Message-ID: <81E27E9B-BD4B-4429-BF91-FED3505CE6D0@ceptacle.com>

Hi Wladimir / others,

I just downloaded the latest (0.6 rc1) source of bitcoin-qt and built it using qt-creator on MacOSX 10.7.3. Nice and easy experience, even though I had to change BDB version to 5.1 ;)

However, when running it, it is using 100% CPU (after initial block chain download that is...)
* All activity in debug.log seems normal (blocks/txes/addresses are processes and accepted etc) so it is not stuck (at least not in the MessageThread)
* Sampling the process shows that the majority of time in each thread is used for:
** __semwait_signal
** kevent
** __select
** mach_msg_trap
** boost::date_time::micro_sec_clock

None of this would usually alert me - sleeping and waiting for conditions should not consume CPU, the only issue seems to be the last line which is called from qtipcserver.cpp line 31:

       if(mq->timed_receive(&strBuf, sizeof(strBuf), nSize, nPriority, d))

As I see it this should not consume cpu either, but, it is the only thing that seems a bit strange..

Have you seen this before?

/M


From gronager at ceptacle.com  Wed Feb 22 16:29:59 2012
From: gronager at ceptacle.com (=?iso-8859-1?Q?Michael_Gr=F8nager?=)
Date: Wed, 22 Feb 2012 17:29:59 +0100
Subject: [Bitcoin-development] BIP-13
In-Reply-To: <CABsx9T0hCAtJnA9YnmVAMjjSPB5W30e=cp8BX2mO--cWEzuSNQ@mail.gmail.com>
References: <3DA9C79B-D91D-48B2-9469-37BAA037FC50@ceptacle.com>
	<CABsx9T0hCAtJnA9YnmVAMjjSPB5W30e=cp8BX2mO--cWEzuSNQ@mail.gmail.com>
Message-ID: <F78AEBDF-F314-4245-B453-8D23C709D226@ceptacle.com>

Hi Gavin / Luke,

BIP-13 again... I started to implement a bitfield based parsing of the version byte using the description I got from Luke, but I then discovered that it does not hold:
Network class:
00xxxxxx - main network
01xxxxxx - reserved
10xxxxxx - reserved
11xxxxxx - test network

Network:
xx00xxxx - bitcoin
xx01xxxx - reserved
xx10xxxx - OTHER (next octet)
xx11xxxx - Namecoin

Network specific:
xxxx000y - PubKeyHash
xxxx001y - reserved
xxxx010y - p2sh
xxxx011y - public key (raw)
xxxx100y - signature
xxxx101y - reserved
xxxx110y - private key (raw)
xxxx111y - OTHER (next octet)

However, the definitions en base58.h are:

        PUBKEY_ADDRESS = 0, (00000000)
        SCRIPT_ADDRESS = 5, (00000101)
        PUBKEY_ADDRESS_TEST = 111, (01101111) !!!
        SCRIPT_ADDRESS_TEST = 196, (11000100) !!!

[as a side note litecoin is 48 (00110000) and namecoin is 52 (00110100)]

So there is no logic ?? I have searched the mailing list and the forum for discussions on this but found it hard to find any. If I overlooked something please direct me.

Cheers,

M

PS: I have said so before, but it would *really* be nice if discussions / conclusions / irc-summaries were taking place at one place - e.g. at the bitcoin-dev mailing list, not at 5-10 different threads in bitcointalk or in bip notes or solely on IRC...


On 20/02/2012, at 18:17, Gavin Andresen wrote:

> RE:
> > base58-encode: [one-byte network ID][20-byte hash][one-byte address class][3-byte checksum]
> 
> How will the code distinguish between the old scheme:
> [one-byte-version][20-byte-hash][4-byte-checksum]
> and the new?
> 
> 1 in 256 old addresses will have a first-byte-of-checksum that matches the new address class; I guess the code would do something like:
> 
> a) If the 4-byte checksum matches, then assume it is a singlesig address (1 in 2^32 multisig addresses will incorrectly match)
> b) If the one-byte-address-class and 3-byte checksum match, then it is a valid p2sh
> c) Otherwise, invalid address
> 
> The 1 in 2^32 multisig addresses also being valid singlesig addresses makes me think this scheme won't work-- an attacker willing to generate 8 billion or so ECDSA keys could generate a single/multisig collision.  I'm not sure how that could be leveraged to their advantage, but I bet they'd find a way.
> 
> RE: should it be a BIP:  The BIP process is described in BIP 0001, and you're following it perfectly so far:
> 
> 1) Post a rough draft of the idea here to see if there's any chance it'll be adopted
> 2) Assuming a positive response and no major flaws: write up a draft BIP
> 3) Post the draft BIP here, where it can be picked apart.
> 4) Assuming no major flaws, ask the BIP editor (Amir) for a BIP number
> 
> I'd also encourage you to actually implement your idea between steps 3 and 4. But in this particular case, I think an attacker being able to create singlesig/p2sh address collisions counts as a major flaw.
> 
> -- 
> --
> Gavin Andresen

Michael Gronager, PhD
Director, Ceptacle
Jens Juels Gade 33
2100 Copenhagen E
Mobile: +45 31 45 14 01
E-mail: gronager at ceptacle.com
Web: http://www.ceptacle.com/




From gavinandresen at gmail.com  Wed Feb 22 16:40:19 2012
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Wed, 22 Feb 2012 11:40:19 -0500
Subject: [Bitcoin-development] BIP-13
In-Reply-To: <F78AEBDF-F314-4245-B453-8D23C709D226@ceptacle.com>
References: <3DA9C79B-D91D-48B2-9469-37BAA037FC50@ceptacle.com>
	<CABsx9T0hCAtJnA9YnmVAMjjSPB5W30e=cp8BX2mO--cWEzuSNQ@mail.gmail.com>
	<F78AEBDF-F314-4245-B453-8D23C709D226@ceptacle.com>
Message-ID: <CABsx9T2tSK7mZ8+wQwCG08+1pudiOxsEqeA=uVYtYNYu0nhFLA@mail.gmail.com>

>
> However, the definitions en base58.h are:
>
>        PUBKEY_ADDRESS = 0, (00000000)
>        SCRIPT_ADDRESS = 5, (00000101)
>        PUBKEY_ADDRESS_TEST = 111, (01101111) !!!
>        SCRIPT_ADDRESS_TEST = 196, (11000100) !!!
>
> [as a side note litecoin is 48 (00110000) and namecoin is 52 (00110100)]
>
> So there is no logic ?? I have searched the mailing list and the forum for
> discussions on this but found it hard to find any. If I overlooked
> something please direct me.
>

PUBKEY_ADDRESS_TEST is/was supposed to change (the logic for it being 111
was "eleven is Gavin's favorite number"), but I have higher priority things
to do than make all the necessary code changes to upgrade testnet wallets
(unfortunately the address:account mappings in the wallet store the address
base58-encoded) and the testnet faucet and get theymos to change the
blockexplorer.com/testnet site to change the version number and publicize
the change so anybody else who has created testnet infrastructure changes.

If you'd like to spearhead that effort, be my guest, but it is not as
trivial as just changing the definition.

Luke can explain why SCRIPT_ADDRESS_TEST is 196, my memory is fuzzy about
that (it always decodes to the same digit in base58 maye?)

-- 
--
Gavin Andresen
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120222/4e0f3f10/attachment.html>

From luke at dashjr.org  Wed Feb 22 16:43:53 2012
From: luke at dashjr.org (Luke-Jr)
Date: Wed, 22 Feb 2012 11:43:53 -0500
Subject: [Bitcoin-development] BIP-13
In-Reply-To: <F78AEBDF-F314-4245-B453-8D23C709D226@ceptacle.com>
References: <3DA9C79B-D91D-48B2-9469-37BAA037FC50@ceptacle.com>
	<CABsx9T0hCAtJnA9YnmVAMjjSPB5W30e=cp8BX2mO--cWEzuSNQ@mail.gmail.com>
	<F78AEBDF-F314-4245-B453-8D23C709D226@ceptacle.com>
Message-ID: <201202221143.54918.luke@dashjr.org>

On Wednesday, February 22, 2012 11:29:59 AM Michael Gr?nager wrote:
>         SCRIPT_ADDRESS_TEST = 196, (11000100) !!!
> 11xxxxxx - test network
> xx00xxxx - bitcoin
> xxxx010y - p2sh

This fits...

>         PUBKEY_ADDRESS_TEST = 111, (01101111) !!!

What Gavin said.



From gavinandresen at gmail.com  Wed Feb 22 16:44:06 2012
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Wed, 22 Feb 2012 11:44:06 -0500
Subject: [Bitcoin-development] Where to have discussions...
Message-ID: <CABsx9T1X4Na==_dYC0Zb0=WcLQQTQ6cnaKf92UTEw4iGxOO_TA@mail.gmail.com>

On Wed, Feb 22, 2012 at 11:29 AM, Michael Gr?nager <gronager at ceptacle.com>wrote:

> PS: I have said so before, but it would *really* be nice if discussions /
> conclusions / irc-summaries were taking place at one place - e.g. at the
> bitcoin-dev mailing list, not at 5-10 different threads in bitcointalk or
> in bip notes or solely on IRC...


I've been trying to move discussions to this mailing list, by starting
conversations here and posting links to the mailing list archives in the
discussion forums just so people know there is a conversation going on.

IRC conversations are great for rapid back-and-forth brainstorming, so I
expect a lot of work to continue getting done via IRC, but once there's
general consensus there I expect issues to migrate here.

-- 
--
Gavin Andresen
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120222/8b0aeadb/attachment.html>

From thiagocmartinsc at gmail.com  Thu Feb 23 17:31:53 2012
From: thiagocmartinsc at gmail.com (=?ISO-2022-JP?B?TWFydGlueCAtIBskQiU4JSchPCVgJTobKEI=?=)
Date: Thu, 23 Feb 2012 15:31:53 -0200
Subject: [Bitcoin-development] Announcement: libcoin
In-Reply-To: <D55C3D18-8286-44E9-B877-6FCE7C05E980@ceptacle.com>
References: <D55C3D18-8286-44E9-B877-6FCE7C05E980@ceptacle.com>
Message-ID: <CAJSM8J0zqF2=Poknzc8R7TrTJ0DWCMBw2-K9gGhUP_Qf+J6eFg@mail.gmail.com>

Hi Michael!

 Thank you for libcoin! It is a awesome evolution for Bitcoin and for the
CryptoCurrencies as a hole... Thanks!!!

 Anyway, I am unable to compile libcoin under my Ubuntu 11.04. At this
machine, I have compiled and running Bitcoin (from sources), Namecoin,
Devcoin, Litecoin, IXcoin and I0coin, all from sources but, when I try to
compile libcoin, I got:

----
user at desk:~/libcoin$ ./configure
-- The C compiler identification is GNU
-- The CXX compiler identification is GNU
-- Check for working C compiler: /usr/bin/gcc
-- Check for working C compiler: /usr/bin/gcc -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Check for working CXX compiler: /usr/bin/c++
-- Check for working CXX compiler: /usr/bin/c++ -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Looking for include files CMAKE_HAVE_PTHREAD_H
-- Looking for include files CMAKE_HAVE_PTHREAD_H - found
-- Looking for pthread_create in pthreads
-- Looking for pthread_create in pthreads - not found
-- Looking for pthread_create in pthread
-- Looking for pthread_create in pthread - found
-- Found Threads: TRUE
-- Looking for XOpenDisplay in
/usr/lib/i386-linux-gnu/libX11.so;/usr/lib/i386-linux-gnu/libXext.so
-- Looking for XOpenDisplay in
/usr/lib/i386-linux-gnu/libX11.so;/usr/lib/i386-linux-gnu/libXext.so - found
-- Looking for gethostbyname
-- Looking for gethostbyname - found
-- Looking for connect
-- Looking for connect - found
-- Looking for remove
-- Looking for remove - found
-- Looking for shmat
-- Looking for shmat - found
-- Looking for IceConnectionNumber in ICE
-- Looking for IceConnectionNumber in ICE - found
-- Found X11: /usr/lib/i386-linux-gnu/libX11.so
-- Boost version: 1.42.0
-- Found the following Boost libraries:
--   date_time
--   regex
--   filesystem
--   system
--   program_options
--   thread
-- Found OpenSSL: /usr/lib/libssl.so;/usr/lib/libcrypto.so
-- Looking for Q_WS_X11
-- Looking for Q_WS_X11 - found
-- Looking for Q_WS_WIN
-- Looking for Q_WS_WIN - not found.
-- Looking for Q_WS_QWS
-- Looking for Q_WS_QWS - not found.
-- Looking for Q_WS_MAC
-- Looking for Q_WS_MAC - not found.
-- Found Qt-Version 4.7.2 (using /usr/bin/qmake)
-- Found wxWidgets: TRUE

The build system is configured to install libraries to /usr/local/lib
Your applications may not be able to find your installed libraries unless
you:
    set your LD_LIBRARY_PATH (user specific) or
    update your ld.so configuration (system wide)
You have an ld.so.conf.d directory on your system, so if you wish to ensure
that
applications find the installed libcoin libraries, system wide, you could
install an
libcoin specific ld.so configuration with:
    sudo make install_ld_conf

-- Configuring done
-- Generating done
-- Build files have been written to: /home/user/libcoin
----

 Now I tried make, without success:

----
.....
Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0xf): undefined
reference to `BN_init'
Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x1e):
undefined reference to `BN_copy'
Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x38):
undefined reference to `BN_set_negative'
Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x4f):
undefined reference to `BN_clear_free'
Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0xd3):
undefined reference to `BN_clear_free'
../../lib/libcoin.a(Script.o): In function `operator<<(CBigNum const&,
unsigned int)':
Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&, unsigned
int)]+0x16): undefined reference to `BN_init'
Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&, unsigned
int)]+0x2c): undefined reference to `BN_lshift'
Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&, unsigned
int)]+0xad): undefined reference to `BN_clear_free'
../../lib/libcoin.a(Script.o): In function `operator>>(CBigNum const&,
unsigned int)':
Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned
int)]+0xf): undefined reference to `BN_init'
Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned
int)]+0x1e): undefined reference to `BN_copy'
Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned
int)]+0x47): undefined reference to `BN_clear_free'
Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned
int)]+0xcb): undefined reference to `BN_clear_free'
../../lib/libcoin.a(Script.o): In function `operator!=(CBigNum const&,
CBigNum const&)':
Script.cpp:(.text._ZneRK7CBigNumS1_[operator!=(CBigNum const&, CBigNum
const&)]+0x14): undefined reference to `BN_cmp'
../../lib/libcoin.a(Script.o): In function `operator>(CBigNum const&,
CBigNum const&)':
Script.cpp:(.text._ZgtRK7CBigNumS1_[operator>(CBigNum const&, CBigNum
const&)]+0x14): undefined reference to `BN_cmp'
../../lib/libcoin.a(Script.o): In function `uint256
Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned
char, std::allocator<unsigned char> > >
>(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char,
std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned
char*, std::vector<unsigned char, std::allocator<unsigned char> > >)':
Script.cpp:(.text._Z4HashIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEE7uint256T_S8_[uint256
Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned
char, std::allocator<unsigned char> > >
>(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char,
std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned
char*, std::vector<unsigned char, std::allocator<unsigned char> >
>)]+0x6d): undefined reference to `SHA256'
Script.cpp:(.text._Z4HashIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEE7uint256T_S8_[uint256
Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned
char, std::allocator<unsigned char> > >
>(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char,
std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned
char*, std::vector<unsigned char, std::allocator<unsigned char> >
>)]+0xb8): undefined reference to `SHA256'
collect2: ld returned 1 exit status
make[2]: *** [bin/bitcoind] Error 1
make[1]: *** [applications/bitcoind/CMakeFiles/app_bitcoind.dir/all] Error 2
make: *** [all] Error 2
-----

 What can I do?!

Best,
Thiago


On 1 February 2012 12:18, Michael Gr?nager <gronager at ceptacle.com> wrote:

> Dear Bitcoiners,
>
> libcoin is now in a state ready for its first release, which I would like
> to share with you!
>
> === libcoin is a crypto currency library based on the bitcoin/bitcoin
> "Satoshi" client. ===
>
> Copenhagen, Denmark - 1st February 2012 Ceptacle announces the release of
> the first version of the crypto currency library "libcoin" based on the
> bitcoin/bitcoin "Satoshi" client.
>
> libcoin also maintains a version of bitcoind that is a 100% compatible
> drop-in replacement of the bitcoin/bitcoind client: You can use it on the
> same computer on the same files and you can call it with the same scripts.
> And you can easily extend it without touching the basic bitcoin source
> files.
>
> The libcoin/bitcoind client downloads the entire block chain 3.5 times
> faster than the bitcoin/bitcoind client. This is less than 90 minutes on a
> modern laptop!
>
> In libcoin, the Satoshi client code has been completely refactored,
> properly encapsulating classes, removing all globals, moving from threads
> and mutexes to a pure asynchronous approach. Functionalities have been
> divided into logical units and libraries, minimizing dependencies for e.g.
> thin clients.
>
> libcoin is chain agnostic, all chain (bitcoin, testnet, namecoin,
> litecoin, ...) specific settings are maintained from a single class (Chain)
> and hence experiments with chain settings, mining, security and digital
> currencies for research and educational purposes are easily accessible. See
> the ponzicoin example for how you define your own chain.
>
> The build system of libcoin is based on CMake and supports builds of
> static and dynamic libraries on Linux, Mac OS X, and Windows.
>
> The libcoin license is LGPL v. 3. This mean that you can use it in open
> source as well as in commercial projects, but improvements should go back
> into the libcoin library.
>
> ======
>
> Read more on libcoin on: http://github.com/ceptacle/libcoin/wiki
>
> Join libcoin on twitter: http://twitter.com/libcoin
>
> Download "libcoin Satoshi release":
> http://github.com/ceptacle/libcoin/zipball/v0.4.0.1
>
> Best regards,
>
> Michael Gronager, PhD
> Director, Ceptacle
> Jens Juels Gade 33
> 2100 Copenhagen E
> Mobile: +45 31 45 14 01
> E-mail: gronager at ceptacle.com
> Web: http://www.ceptacle.com/
>
>
>
> ------------------------------------------------------------------------------
> Keep Your Developer Skills Current with LearnDevNow!
> The most comprehensive online learning library for Microsoft developers
> is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3, MVC3,
> Metro Style Apps, more. Free future releases when you subscribe now!
> http://p.sf.net/sfu/learndevnow-d2d
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120223/676ab00f/attachment.html>

From gronager at ceptacle.com  Thu Feb 23 19:48:23 2012
From: gronager at ceptacle.com (=?iso-8859-1?Q?Michael_Gr=F8nager?=)
Date: Thu, 23 Feb 2012 20:48:23 +0100
Subject: [Bitcoin-development] Announcement: libcoin
In-Reply-To: <CAJSM8J0zqF2=Poknzc8R7TrTJ0DWCMBw2-K9gGhUP_Qf+J6eFg@mail.gmail.com>
References: <D55C3D18-8286-44E9-B877-6FCE7C05E980@ceptacle.com>
	<CAJSM8J0zqF2=Poknzc8R7TrTJ0DWCMBw2-K9gGhUP_Qf+J6eFg@mail.gmail.com>
Message-ID: <E3C0BC56-CCC2-451F-B67B-66A355280926@ceptacle.com>

Hi Martinx,

I am looking into it now - I just tried on my Ubuntu 11.10 - I got by Script.cpp with no problems.

I have Boost 1.48.1, but I can't see that causing the issue - I will retry with a cleaner machine...

/M

On 23/02/2012, at 18:31, Martinx - ????? wrote:

> Hi Michael!
> 
> Thank you for libcoin! It is a awesome evolution for Bitcoin and for the CryptoCurrencies as a hole... Thanks!!!
> 
> Anyway, I am unable to compile libcoin under my Ubuntu 11.04. At this machine, I have compiled and running Bitcoin (from sources), Namecoin, Devcoin, Litecoin, IXcoin and I0coin, all from sources but, when I try to compile libcoin, I got:
> 
> ----
> user at desk:~/libcoin$ ./configure 
> -- The C compiler identification is GNU
> -- The CXX compiler identification is GNU
> -- Check for working C compiler: /usr/bin/gcc
> -- Check for working C compiler: /usr/bin/gcc -- works
> -- Detecting C compiler ABI info
> -- Detecting C compiler ABI info - done
> -- Check for working CXX compiler: /usr/bin/c++
> -- Check for working CXX compiler: /usr/bin/c++ -- works
> -- Detecting CXX compiler ABI info
> -- Detecting CXX compiler ABI info - done
> -- Looking for include files CMAKE_HAVE_PTHREAD_H
> -- Looking for include files CMAKE_HAVE_PTHREAD_H - found
> -- Looking for pthread_create in pthreads
> -- Looking for pthread_create in pthreads - not found
> -- Looking for pthread_create in pthread
> -- Looking for pthread_create in pthread - found
> -- Found Threads: TRUE 
> -- Looking for XOpenDisplay in /usr/lib/i386-linux-gnu/libX11.so;/usr/lib/i386-linux-gnu/libXext.so
> -- Looking for XOpenDisplay in /usr/lib/i386-linux-gnu/libX11.so;/usr/lib/i386-linux-gnu/libXext.so - found
> -- Looking for gethostbyname
> -- Looking for gethostbyname - found
> -- Looking for connect
> -- Looking for connect - found
> -- Looking for remove
> -- Looking for remove - found
> -- Looking for shmat
> -- Looking for shmat - found
> -- Looking for IceConnectionNumber in ICE
> -- Looking for IceConnectionNumber in ICE - found
> -- Found X11: /usr/lib/i386-linux-gnu/libX11.so
> -- Boost version: 1.42.0
> -- Found the following Boost libraries:
> --   date_time
> --   regex
> --   filesystem
> --   system
> --   program_options
> --   thread
> -- Found OpenSSL: /usr/lib/libssl.so;/usr/lib/libcrypto.so 
> -- Looking for Q_WS_X11
> -- Looking for Q_WS_X11 - found
> -- Looking for Q_WS_WIN
> -- Looking for Q_WS_WIN - not found.
> -- Looking for Q_WS_QWS
> -- Looking for Q_WS_QWS - not found.
> -- Looking for Q_WS_MAC
> -- Looking for Q_WS_MAC - not found.
> -- Found Qt-Version 4.7.2 (using /usr/bin/qmake)
> -- Found wxWidgets: TRUE 
> 
> The build system is configured to install libraries to /usr/local/lib
> Your applications may not be able to find your installed libraries unless you:
>    set your LD_LIBRARY_PATH (user specific) or
>    update your ld.so configuration (system wide)
> You have an ld.so.conf.d directory on your system, so if you wish to ensure that
> applications find the installed libcoin libraries, system wide, you could install an
> libcoin specific ld.so configuration with:
>    sudo make install_ld_conf
> 
> -- Configuring done
> -- Generating done
> -- Build files have been written to: /home/user/libcoin
> ----
> 
> Now I tried make, without success:
> 
> ----
> .....
> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0xf): undefined reference to `BN_init'
> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x1e): undefined reference to `BN_copy'
> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x38): undefined reference to `BN_set_negative'
> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x4f): undefined reference to `BN_clear_free'
> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0xd3): undefined reference to `BN_clear_free'
> ../../lib/libcoin.a(Script.o): In function `operator<<(CBigNum const&, unsigned int)':
> Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&, unsigned int)]+0x16): undefined reference to `BN_init'
> Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&, unsigned int)]+0x2c): undefined reference to `BN_lshift'
> Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&, unsigned int)]+0xad): undefined reference to `BN_clear_free'
> ../../lib/libcoin.a(Script.o): In function `operator>>(CBigNum const&, unsigned int)':
> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned int)]+0xf): undefined reference to `BN_init'
> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned int)]+0x1e): undefined reference to `BN_copy'
> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned int)]+0x47): undefined reference to `BN_clear_free'
> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned int)]+0xcb): undefined reference to `BN_clear_free'
> ../../lib/libcoin.a(Script.o): In function `operator!=(CBigNum const&, CBigNum const&)':
> Script.cpp:(.text._ZneRK7CBigNumS1_[operator!=(CBigNum const&, CBigNum const&)]+0x14): undefined reference to `BN_cmp'
> ../../lib/libcoin.a(Script.o): In function `operator>(CBigNum const&, CBigNum const&)':
> Script.cpp:(.text._ZgtRK7CBigNumS1_[operator>(CBigNum const&, CBigNum const&)]+0x14): undefined reference to `BN_cmp'
> ../../lib/libcoin.a(Script.o): In function `uint256 Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > > >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >)':
> Script.cpp:(.text._Z4HashIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEE7uint256T_S8_[uint256 Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > > >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >)]+0x6d): undefined reference to `SHA256'
> Script.cpp:(.text._Z4HashIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEE7uint256T_S8_[uint256 Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > > >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >)]+0xb8): undefined reference to `SHA256'
> collect2: ld returned 1 exit status
> make[2]: *** [bin/bitcoind] Error 1
> make[1]: *** [applications/bitcoind/CMakeFiles/app_bitcoind.dir/all] Error 2
> make: *** [all] Error 2
> -----
> 
> What can I do?!
> 
> Best,
> Thiago
> 
> 
> On 1 February 2012 12:18, Michael Gr?nager <gronager at ceptacle.com> wrote:
> Dear Bitcoiners,
> 
> libcoin is now in a state ready for its first release, which I would like to share with you!
> 
> === libcoin is a crypto currency library based on the bitcoin/bitcoin "Satoshi" client. ===
> 
> Copenhagen, Denmark - 1st February 2012 Ceptacle announces the release of the first version of the crypto currency library "libcoin" based on the bitcoin/bitcoin "Satoshi" client.
> 
> libcoin also maintains a version of bitcoind that is a 100% compatible drop-in replacement of the bitcoin/bitcoind client: You can use it on the same computer on the same files and you can call it with the same scripts. And you can easily extend it without touching the basic bitcoin source files.
> 
> The libcoin/bitcoind client downloads the entire block chain 3.5 times faster than the bitcoin/bitcoind client. This is less than 90 minutes on a modern laptop!
> 
> In libcoin, the Satoshi client code has been completely refactored, properly encapsulating classes, removing all globals, moving from threads and mutexes to a pure asynchronous approach. Functionalities have been divided into logical units and libraries, minimizing dependencies for e.g. thin clients.
> 
> libcoin is chain agnostic, all chain (bitcoin, testnet, namecoin, litecoin, ...) specific settings are maintained from a single class (Chain) and hence experiments with chain settings, mining, security and digital currencies for research and educational purposes are easily accessible. See the ponzicoin example for how you define your own chain.
> 
> The build system of libcoin is based on CMake and supports builds of static and dynamic libraries on Linux, Mac OS X, and Windows.
> 
> The libcoin license is LGPL v. 3. This mean that you can use it in open source as well as in commercial projects, but improvements should go back into the libcoin library.
> 
> ======
> 
> Read more on libcoin on: http://github.com/ceptacle/libcoin/wiki
> 
> Join libcoin on twitter: http://twitter.com/libcoin
> 
> Download "libcoin Satoshi release": http://github.com/ceptacle/libcoin/zipball/v0.4.0.1
> 
> Best regards,
> 
> Michael Gronager, PhD
> Director, Ceptacle
> Jens Juels Gade 33
> 2100 Copenhagen E
> Mobile: +45 31 45 14 01
> E-mail: gronager at ceptacle.com
> Web: http://www.ceptacle.com/
> 
> 
> ------------------------------------------------------------------------------
> Keep Your Developer Skills Current with LearnDevNow!
> The most comprehensive online learning library for Microsoft developers
> is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3, MVC3,
> Metro Style Apps, more. Free future releases when you subscribe now!
> http://p.sf.net/sfu/learndevnow-d2d
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 

Michael Gronager, PhD
Director, Ceptacle
Jens Juels Gade 33
2100 Copenhagen E
Mobile: +45 31 45 14 01
E-mail: gronager at ceptacle.com
Web: http://www.ceptacle.com/




From gronager at ceptacle.com  Thu Feb 23 20:01:15 2012
From: gronager at ceptacle.com (=?iso-8859-1?Q?Michael_Gr=F8nager?=)
Date: Thu, 23 Feb 2012 21:01:15 +0100
Subject: [Bitcoin-development] Announcement: libcoin
In-Reply-To: <CAJSM8J0zqF2=Poknzc8R7TrTJ0DWCMBw2-K9gGhUP_Qf+J6eFg@mail.gmail.com>
References: <D55C3D18-8286-44E9-B877-6FCE7C05E980@ceptacle.com>
	<CAJSM8J0zqF2=Poknzc8R7TrTJ0DWCMBw2-K9gGhUP_Qf+J6eFg@mail.gmail.com>
Message-ID: <87923CA3-3606-497B-891E-18E7788CED06@ceptacle.com>

I tried on another 11.10 machine with the normal boost 1.42 and things also worked as they should.

However, I noticed a difference between your cmake output and mine:

> -- Found OpenSSL: /usr/lib/libssl.so;/usr/lib/libcrypto.so 

-- Found OpenSSL: /usr/lib/i386-linux-gnu/libssl.so;/usr/lib/i386-linux-gnu/libcrypto.so (found version "1..")

Are you sure that the openssl libraries/includes found are the correct ones ? cmake finds your openssl libraries at /usr/lib/ which most likely will make it think that the includes are at /usr/include. I can see that at least X11 stuff is in /usr/lib/x386-linux-gnu like my openssl.

Could there be an issue there ?

SHA256 would normally be found in openssl/sha.h but if that is somehow corrupt ?

Cheers,

M

PS: to get more debug output, please try a "make VERBOSE=1" That will show what g++ flags that are used, and might help us.

On 23/02/2012, at 18:31, Martinx - ????? wrote:

> Hi Michael!
> 
>  Thank you for libcoin! It is a awesome evolution for Bitcoin and for the CryptoCurrencies as a hole... Thanks!!!
> 
>  Anyway, I am unable to compile libcoin under my Ubuntu 11.04. At this machine, I have compiled and running Bitcoin (from sources), Namecoin, Devcoin, Litecoin, IXcoin and I0coin, all from sources but, when I try to compile libcoin, I got:
> 
> ----
> user at desk:~/libcoin$ ./configure 
> -- The C compiler identification is GNU
> -- The CXX compiler identification is GNU
> -- Check for working C compiler: /usr/bin/gcc
> -- Check for working C compiler: /usr/bin/gcc -- works
> -- Detecting C compiler ABI info
> -- Detecting C compiler ABI info - done
> -- Check for working CXX compiler: /usr/bin/c++
> -- Check for working CXX compiler: /usr/bin/c++ -- works
> -- Detecting CXX compiler ABI info
> -- Detecting CXX compiler ABI info - done
> -- Looking for include files CMAKE_HAVE_PTHREAD_H
> -- Looking for include files CMAKE_HAVE_PTHREAD_H - found
> -- Looking for pthread_create in pthreads
> -- Looking for pthread_create in pthreads - not found
> -- Looking for pthread_create in pthread
> -- Looking for pthread_create in pthread - found
> -- Found Threads: TRUE 
> -- Looking for XOpenDisplay in /usr/lib/i386-linux-gnu/libX11.so;/usr/lib/i386-linux-gnu/libXext.so
> -- Looking for XOpenDisplay in /usr/lib/i386-linux-gnu/libX11.so;/usr/lib/i386-linux-gnu/libXext.so - found
> -- Looking for gethostbyname
> -- Looking for gethostbyname - found
> -- Looking for connect
> -- Looking for connect - found
> -- Looking for remove
> -- Looking for remove - found
> -- Looking for shmat
> -- Looking for shmat - found
> -- Looking for IceConnectionNumber in ICE
> -- Looking for IceConnectionNumber in ICE - found
> -- Found X11: /usr/lib/i386-linux-gnu/libX11.so
> -- Boost version: 1.42.0
> -- Found the following Boost libraries:
> --   date_time
> --   regex
> --   filesystem
> --   system
> --   program_options
> --   thread
> -- Found OpenSSL: /usr/lib/libssl.so;/usr/lib/libcrypto.so 
> -- Looking for Q_WS_X11
> -- Looking for Q_WS_X11 - found
> -- Looking for Q_WS_WIN
> -- Looking for Q_WS_WIN - not found.
> -- Looking for Q_WS_QWS
> -- Looking for Q_WS_QWS - not found.
> -- Looking for Q_WS_MAC
> -- Looking for Q_WS_MAC - not found.
> -- Found Qt-Version 4.7.2 (using /usr/bin/qmake)
> -- Found wxWidgets: TRUE 
> 
> The build system is configured to install libraries to /usr/local/lib
> Your applications may not be able to find your installed libraries unless you:
>     set your LD_LIBRARY_PATH (user specific) or
>     update your ld.so configuration (system wide)
> You have an ld.so.conf.d directory on your system, so if you wish to ensure that
> applications find the installed libcoin libraries, system wide, you could install an
> libcoin specific ld.so configuration with:
>     sudo make install_ld_conf
> 
> -- Configuring done
> -- Generating done
> -- Build files have been written to: /home/user/libcoin
> ----
> 
>  Now I tried make, without success:
> 
> ----
> .....
> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0xf): undefined reference to `BN_init'
> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x1e): undefined reference to `BN_copy'
> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x38): undefined reference to `BN_set_negative'
> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x4f): undefined reference to `BN_clear_free'
> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0xd3): undefined reference to `BN_clear_free'
> ../../lib/libcoin.a(Script.o): In function `operator<<(CBigNum const&, unsigned int)':
> Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&, unsigned int)]+0x16): undefined reference to `BN_init'
> Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&, unsigned int)]+0x2c): undefined reference to `BN_lshift'
> Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&, unsigned int)]+0xad): undefined reference to `BN_clear_free'
> ../../lib/libcoin.a(Script.o): In function `operator>>(CBigNum const&, unsigned int)':
> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned int)]+0xf): undefined reference to `BN_init'
> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned int)]+0x1e): undefined reference to `BN_copy'
> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned int)]+0x47): undefined reference to `BN_clear_free'
> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned int)]+0xcb): undefined reference to `BN_clear_free'
> ../../lib/libcoin.a(Script.o): In function `operator!=(CBigNum const&, CBigNum const&)':
> Script.cpp:(.text._ZneRK7CBigNumS1_[operator!=(CBigNum const&, CBigNum const&)]+0x14): undefined reference to `BN_cmp'
> ../../lib/libcoin.a(Script.o): In function `operator>(CBigNum const&, CBigNum const&)':
> Script.cpp:(.text._ZgtRK7CBigNumS1_[operator>(CBigNum const&, CBigNum const&)]+0x14): undefined reference to `BN_cmp'
> ../../lib/libcoin.a(Script.o): In function `uint256 Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > > >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >)':
> Script.cpp:(.text._Z4HashIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEE7uint256T_S8_[uint256 Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > > >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >)]+0x6d): undefined reference to `SHA256'
> Script.cpp:(.text._Z4HashIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEE7uint256T_S8_[uint256 Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > > >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >)]+0xb8): undefined reference to `SHA256'
> collect2: ld returned 1 exit status
> make[2]: *** [bin/bitcoind] Error 1
> make[1]: *** [applications/bitcoind/CMakeFiles/app_bitcoind.dir/all] Error 2
> make: *** [all] Error 2
> -----
> 
>  What can I do?!
> 
> Best,
> Thiago
> 
> 
> On 1 February 2012 12:18, Michael Gr?nager <gronager at ceptacle.com> wrote:
> Dear Bitcoiners,
> 
> libcoin is now in a state ready for its first release, which I would like to share with you!
> 
> === libcoin is a crypto currency library based on the bitcoin/bitcoin "Satoshi" client. ===
> 
> Copenhagen, Denmark - 1st February 2012 Ceptacle announces the release of the first version of the crypto currency library "libcoin" based on the bitcoin/bitcoin "Satoshi" client.
> 
> libcoin also maintains a version of bitcoind that is a 100% compatible drop-in replacement of the bitcoin/bitcoind client: You can use it on the same computer on the same files and you can call it with the same scripts. And you can easily extend it without touching the basic bitcoin source files.
> 
> The libcoin/bitcoind client downloads the entire block chain 3.5 times faster than the bitcoin/bitcoind client. This is less than 90 minutes on a modern laptop!
> 
> In libcoin, the Satoshi client code has been completely refactored, properly encapsulating classes, removing all globals, moving from threads and mutexes to a pure asynchronous approach. Functionalities have been divided into logical units and libraries, minimizing dependencies for e.g. thin clients.
> 
> libcoin is chain agnostic, all chain (bitcoin, testnet, namecoin, litecoin, ...) specific settings are maintained from a single class (Chain) and hence experiments with chain settings, mining, security and digital currencies for research and educational purposes are easily accessible. See the ponzicoin example for how you define your own chain.
> 
> The build system of libcoin is based on CMake and supports builds of static and dynamic libraries on Linux, Mac OS X, and Windows.
> 
> The libcoin license is LGPL v. 3. This mean that you can use it in open source as well as in commercial projects, but improvements should go back into the libcoin library.
> 
> ======
> 
> Read more on libcoin on: http://github.com/ceptacle/libcoin/wiki
> 
> Join libcoin on twitter: http://twitter.com/libcoin
> 
> Download "libcoin Satoshi release": http://github.com/ceptacle/libcoin/zipball/v0.4.0.1
> 
> Best regards,
> 
> Michael Gronager, PhD
> Director, Ceptacle
> Jens Juels Gade 33
> 2100 Copenhagen E
> Mobile: +45 31 45 14 01
> E-mail: gronager at ceptacle.com
> Web: http://www.ceptacle.com/
> 
> 
> ------------------------------------------------------------------------------
> Keep Your Developer Skills Current with LearnDevNow!
> The most comprehensive online learning library for Microsoft developers
> is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3, MVC3,
> Metro Style Apps, more. Free future releases when you subscribe now!
> http://p.sf.net/sfu/learndevnow-d2d
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 

Michael Gronager, PhD
Director, Ceptacle
Jens Juels Gade 33
2100 Copenhagen E
Mobile: +45 31 45 14 01
E-mail: gronager at ceptacle.com
Web: http://www.ceptacle.com/




From gronager at ceptacle.com  Thu Feb 23 20:02:46 2012
From: gronager at ceptacle.com (Michael Gronager)
Date: Thu, 23 Feb 2012 21:02:46 +0100
Subject: [Bitcoin-development] BitcoinQt eating 100% CPU
In-Reply-To: <81E27E9B-BD4B-4429-BF91-FED3505CE6D0@ceptacle.com>
References: <81E27E9B-BD4B-4429-BF91-FED3505CE6D0@ceptacle.com>
Message-ID: <3428A99D-3E68-4E06-9DD1-83741C9CDD42@ceptacle.com>

A follow up on my mail from the other day (got it send from the wrong email address...)

I now exit the ipc thread at startup by inserting:

void ipcThread(void* parg)
{
   ipcShutdown();
   return;

Bitcoin-Qt is now running nicely using around 0.9% CPU. So it seems like the culprit was indeed line 31:

if(mq->timed_receive(&strBuf, sizeof(strBuf), nSize, nPriority, d))

Others, who have seen similar issues ?

Cheers,

M 

On 21/02/2012, at 21:33, Michael Gr?nager wrote:

> Hi Wladimir / others,
> 
> I just downloaded the latest (0.6 rc1) source of bitcoin-qt and built it using qt-creator on MacOSX 10.7.3. Nice and easy experience, even though I had to change BDB version to 5.1 ;)
> 
> However, when running it, it is using 100% CPU (after initial block chain download that is...)
> * All activity in debug.log seems normal (blocks/txes/addresses are processes and accepted etc) so it is not stuck (at least not in the MessageThread)
> * Sampling the process shows that the majority of time in each thread is used for:
> ** __semwait_signal
> ** kevent
> ** __select
> ** mach_msg_trap
> ** boost::date_time::micro_sec_clock
> 
> None of this would usually alert me - sleeping and waiting for conditions should not consume CPU, the only issue seems to be the last line which is called from qtipcserver.cpp line 31:
> 
>      if(mq->timed_receive(&strBuf, sizeof(strBuf), nSize, nPriority, d))
> 
> As I see it this should not consume cpu either, but, it is the only thing that seems a bit strange..
> 
> Have you seen this before?
> 
> /M




From gavinandresen at gmail.com  Thu Feb 23 20:26:40 2012
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Thu, 23 Feb 2012 15:26:40 -0500
Subject: [Bitcoin-development] BitcoinQt eating 100% CPU
In-Reply-To: <3428A99D-3E68-4E06-9DD1-83741C9CDD42@ceptacle.com>
References: <81E27E9B-BD4B-4429-BF91-FED3505CE6D0@ceptacle.com>
	<3428A99D-3E68-4E06-9DD1-83741C9CDD42@ceptacle.com>
Message-ID: <CABsx9T03coJ6DdAUqgJGngu1GU1qm=J-qGLKR1VTipkSOPWEaA@mail.gmail.com>

Bitcoin-Qt is now running nicely using around 0.9% CPU. So it seems like
> the culprit was indeed line 31:
>
> if(mq->timed_receive(&strBuf, sizeof(strBuf), nSize, nPriority, d))
>
> Others, who have seen similar issues ?
>
>
I can definitely reproduce the issue on my mac.

If I recall correctly, the Mac Bitcoin-Qt does not register itself as a
bitcoin: URL handler, so the easiest fix for the 0.6 release would be to
just never launch the ipcThread #ifdef Q_WS_MAC


-- 
--
Gavin Andresen
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120223/f36c1cef/attachment.html>

From luke at dashjr.org  Thu Feb 23 20:33:41 2012
From: luke at dashjr.org (Luke-Jr)
Date: Thu, 23 Feb 2012 15:33:41 -0500
Subject: [Bitcoin-development] BitcoinQt eating 100% CPU
In-Reply-To: <CABsx9T03coJ6DdAUqgJGngu1GU1qm=J-qGLKR1VTipkSOPWEaA@mail.gmail.com>
References: <81E27E9B-BD4B-4429-BF91-FED3505CE6D0@ceptacle.com>
	<3428A99D-3E68-4E06-9DD1-83741C9CDD42@ceptacle.com>
	<CABsx9T03coJ6DdAUqgJGngu1GU1qm=J-qGLKR1VTipkSOPWEaA@mail.gmail.com>
Message-ID: <201202231533.42827.luke@dashjr.org>

On Thursday, February 23, 2012 3:26:40 PM Gavin Andresen wrote:
> If I recall correctly, the Mac Bitcoin-Qt does not register itself as a
> bitcoin: URL handler, so the easiest fix for the 0.6 release would be to
> just never launch the ipcThread #ifdef Q_WS_MAC

Wouldn't that prevent the user from registering it?



From gronager at ceptacle.com  Thu Feb 23 20:35:47 2012
From: gronager at ceptacle.com (=?iso-8859-1?Q?Michael_Gr=F8nager?=)
Date: Thu, 23 Feb 2012 21:35:47 +0100
Subject: [Bitcoin-development] Announcement: libcoin
In-Reply-To: <CAJSM8J0zqF2=Poknzc8R7TrTJ0DWCMBw2-K9gGhUP_Qf+J6eFg@mail.gmail.com>
References: <D55C3D18-8286-44E9-B877-6FCE7C05E980@ceptacle.com>
	<CAJSM8J0zqF2=Poknzc8R7TrTJ0DWCMBw2-K9gGhUP_Qf+J6eFg@mail.gmail.com>
Message-ID: <4FF4A408-F8C9-4A50-8B13-13D3686BEB09@ceptacle.com>

Hi Martinx,

Another note:

boost 1.42 and openssl 1.0 has a conflict (you will see it when you try to compile coinHTTP with that specific combination: sslv2 has been removed from openssl, but boost still references it.)

You should do a :

sudo apt-get upgrade libboost-dev-all

to get the 1.46.1 library

/M


On 23/02/2012, at 18:31, Martinx - ????? wrote:

> Hi Michael!
> 
>  Thank you for libcoin! It is a awesome evolution for Bitcoin and for the CryptoCurrencies as a hole... Thanks!!!
> 
>  Anyway, I am unable to compile libcoin under my Ubuntu 11.04. At this machine, I have compiled and running Bitcoin (from sources), Namecoin, Devcoin, Litecoin, IXcoin and I0coin, all from sources but, when I try to compile libcoin, I got:
> 
> ----
> user at desk:~/libcoin$ ./configure 
> -- The C compiler identification is GNU
> -- The CXX compiler identification is GNU
> -- Check for working C compiler: /usr/bin/gcc
> -- Check for working C compiler: /usr/bin/gcc -- works
> -- Detecting C compiler ABI info
> -- Detecting C compiler ABI info - done
> -- Check for working CXX compiler: /usr/bin/c++
> -- Check for working CXX compiler: /usr/bin/c++ -- works
> -- Detecting CXX compiler ABI info
> -- Detecting CXX compiler ABI info - done
> -- Looking for include files CMAKE_HAVE_PTHREAD_H
> -- Looking for include files CMAKE_HAVE_PTHREAD_H - found
> -- Looking for pthread_create in pthreads
> -- Looking for pthread_create in pthreads - not found
> -- Looking for pthread_create in pthread
> -- Looking for pthread_create in pthread - found
> -- Found Threads: TRUE 
> -- Looking for XOpenDisplay in /usr/lib/i386-linux-gnu/libX11.so;/usr/lib/i386-linux-gnu/libXext.so
> -- Looking for XOpenDisplay in /usr/lib/i386-linux-gnu/libX11.so;/usr/lib/i386-linux-gnu/libXext.so - found
> -- Looking for gethostbyname
> -- Looking for gethostbyname - found
> -- Looking for connect
> -- Looking for connect - found
> -- Looking for remove
> -- Looking for remove - found
> -- Looking for shmat
> -- Looking for shmat - found
> -- Looking for IceConnectionNumber in ICE
> -- Looking for IceConnectionNumber in ICE - found
> -- Found X11: /usr/lib/i386-linux-gnu/libX11.so
> -- Boost version: 1.42.0
> -- Found the following Boost libraries:
> --   date_time
> --   regex
> --   filesystem
> --   system
> --   program_options
> --   thread
> -- Found OpenSSL: /usr/lib/libssl.so;/usr/lib/libcrypto.so 
> -- Looking for Q_WS_X11
> -- Looking for Q_WS_X11 - found
> -- Looking for Q_WS_WIN
> -- Looking for Q_WS_WIN - not found.
> -- Looking for Q_WS_QWS
> -- Looking for Q_WS_QWS - not found.
> -- Looking for Q_WS_MAC
> -- Looking for Q_WS_MAC - not found.
> -- Found Qt-Version 4.7.2 (using /usr/bin/qmake)
> -- Found wxWidgets: TRUE 
> 
> The build system is configured to install libraries to /usr/local/lib
> Your applications may not be able to find your installed libraries unless you:
>     set your LD_LIBRARY_PATH (user specific) or
>     update your ld.so configuration (system wide)
> You have an ld.so.conf.d directory on your system, so if you wish to ensure that
> applications find the installed libcoin libraries, system wide, you could install an
> libcoin specific ld.so configuration with:
>     sudo make install_ld_conf
> 
> -- Configuring done
> -- Generating done
> -- Build files have been written to: /home/user/libcoin
> ----
> 
>  Now I tried make, without success:
> 
> ----
> .....
> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0xf): undefined reference to `BN_init'
> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x1e): undefined reference to `BN_copy'
> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x38): undefined reference to `BN_set_negative'
> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x4f): undefined reference to `BN_clear_free'
> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0xd3): undefined reference to `BN_clear_free'
> ../../lib/libcoin.a(Script.o): In function `operator<<(CBigNum const&, unsigned int)':
> Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&, unsigned int)]+0x16): undefined reference to `BN_init'
> Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&, unsigned int)]+0x2c): undefined reference to `BN_lshift'
> Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&, unsigned int)]+0xad): undefined reference to `BN_clear_free'
> ../../lib/libcoin.a(Script.o): In function `operator>>(CBigNum const&, unsigned int)':
> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned int)]+0xf): undefined reference to `BN_init'
> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned int)]+0x1e): undefined reference to `BN_copy'
> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned int)]+0x47): undefined reference to `BN_clear_free'
> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned int)]+0xcb): undefined reference to `BN_clear_free'
> ../../lib/libcoin.a(Script.o): In function `operator!=(CBigNum const&, CBigNum const&)':
> Script.cpp:(.text._ZneRK7CBigNumS1_[operator!=(CBigNum const&, CBigNum const&)]+0x14): undefined reference to `BN_cmp'
> ../../lib/libcoin.a(Script.o): In function `operator>(CBigNum const&, CBigNum const&)':
> Script.cpp:(.text._ZgtRK7CBigNumS1_[operator>(CBigNum const&, CBigNum const&)]+0x14): undefined reference to `BN_cmp'
> ../../lib/libcoin.a(Script.o): In function `uint256 Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > > >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >)':
> Script.cpp:(.text._Z4HashIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEE7uint256T_S8_[uint256 Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > > >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >)]+0x6d): undefined reference to `SHA256'
> Script.cpp:(.text._Z4HashIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEE7uint256T_S8_[uint256 Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > > >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >)]+0xb8): undefined reference to `SHA256'
> collect2: ld returned 1 exit status
> make[2]: *** [bin/bitcoind] Error 1
> make[1]: *** [applications/bitcoind/CMakeFiles/app_bitcoind.dir/all] Error 2
> make: *** [all] Error 2
> -----
> 
>  What can I do?!
> 
> Best,
> Thiago
> 
> 
> On 1 February 2012 12:18, Michael Gr?nager <gronager at ceptacle.com> wrote:
> Dear Bitcoiners,
> 
> libcoin is now in a state ready for its first release, which I would like to share with you!
> 
> === libcoin is a crypto currency library based on the bitcoin/bitcoin "Satoshi" client. ===
> 
> Copenhagen, Denmark - 1st February 2012 Ceptacle announces the release of the first version of the crypto currency library "libcoin" based on the bitcoin/bitcoin "Satoshi" client.
> 
> libcoin also maintains a version of bitcoind that is a 100% compatible drop-in replacement of the bitcoin/bitcoind client: You can use it on the same computer on the same files and you can call it with the same scripts. And you can easily extend it without touching the basic bitcoin source files.
> 
> The libcoin/bitcoind client downloads the entire block chain 3.5 times faster than the bitcoin/bitcoind client. This is less than 90 minutes on a modern laptop!
> 
> In libcoin, the Satoshi client code has been completely refactored, properly encapsulating classes, removing all globals, moving from threads and mutexes to a pure asynchronous approach. Functionalities have been divided into logical units and libraries, minimizing dependencies for e.g. thin clients.
> 
> libcoin is chain agnostic, all chain (bitcoin, testnet, namecoin, litecoin, ...) specific settings are maintained from a single class (Chain) and hence experiments with chain settings, mining, security and digital currencies for research and educational purposes are easily accessible. See the ponzicoin example for how you define your own chain.
> 
> The build system of libcoin is based on CMake and supports builds of static and dynamic libraries on Linux, Mac OS X, and Windows.
> 
> The libcoin license is LGPL v. 3. This mean that you can use it in open source as well as in commercial projects, but improvements should go back into the libcoin library.
> 
> ======
> 
> Read more on libcoin on: http://github.com/ceptacle/libcoin/wiki
> 
> Join libcoin on twitter: http://twitter.com/libcoin
> 
> Download "libcoin Satoshi release": http://github.com/ceptacle/libcoin/zipball/v0.4.0.1
> 
> Best regards,
> 
> Michael Gronager, PhD
> Director, Ceptacle
> Jens Juels Gade 33
> 2100 Copenhagen E
> Mobile: +45 31 45 14 01
> E-mail: gronager at ceptacle.com
> Web: http://www.ceptacle.com/
> 
> 
> ------------------------------------------------------------------------------
> Keep Your Developer Skills Current with LearnDevNow!
> The most comprehensive online learning library for Microsoft developers
> is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3, MVC3,
> Metro Style Apps, more. Free future releases when you subscribe now!
> http://p.sf.net/sfu/learndevnow-d2d
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 

Michael Gronager, PhD
Director, Ceptacle
Jens Juels Gade 33
2100 Copenhagen E
Mobile: +45 31 45 14 01
E-mail: gronager at ceptacle.com
Web: http://www.ceptacle.com/




From thiagocmartinsc at gmail.com  Thu Feb 23 23:29:58 2012
From: thiagocmartinsc at gmail.com (=?ISO-2022-JP?B?TWFydGlueCAtIBskQiU4JSchPCVgJTobKEI=?=)
Date: Thu, 23 Feb 2012 21:29:58 -0200
Subject: [Bitcoin-development] Announcement: libcoin
In-Reply-To: <4FF4A408-F8C9-4A50-8B13-13D3686BEB09@ceptacle.com>
References: <D55C3D18-8286-44E9-B877-6FCE7C05E980@ceptacle.com>
	<CAJSM8J0zqF2=Poknzc8R7TrTJ0DWCMBw2-K9gGhUP_Qf+J6eFg@mail.gmail.com>
	<4FF4A408-F8C9-4A50-8B13-13D3686BEB09@ceptacle.com>
Message-ID: <CAJSM8J3bZYfpE9EATcYe=79s_RxvGG9BrdRQR9ivwtZnuPsL0w@mail.gmail.com>

AWESOME!!!

I can compile libcoin at my Ubuntu 11.10... I just need to install:

sudo aptitude install libboost1.46-all-dev

...alongside with another already installed dependencies, and now it works!!

Thank you!
Thiago

2012/2/23 Michael Gr?nager <gronager at ceptacle.com>

> Hi Martinx,
>
> Another note:
>
> boost 1.42 and openssl 1.0 has a conflict (you will see it when you try to
> compile coinHTTP with that specific combination: sslv2 has been removed
> from openssl, but boost still references it.)
>
> You should do a :
>
> sudo apt-get upgrade libboost-dev-all
>
> to get the 1.46.1 library
>
> /M
>
>
> On 23/02/2012, at 18:31, Martinx - ????? wrote:
>
> > Hi Michael!
> >
> >  Thank you for libcoin! It is a awesome evolution for Bitcoin and for
> the CryptoCurrencies as a hole... Thanks!!!
> >
> >  Anyway, I am unable to compile libcoin under my Ubuntu 11.04. At this
> machine, I have compiled and running Bitcoin (from sources), Namecoin,
> Devcoin, Litecoin, IXcoin and I0coin, all from sources but, when I try to
> compile libcoin, I got:
> >
> > ----
> > user at desk:~/libcoin$ ./configure
> > -- The C compiler identification is GNU
> > -- The CXX compiler identification is GNU
> > -- Check for working C compiler: /usr/bin/gcc
> > -- Check for working C compiler: /usr/bin/gcc -- works
> > -- Detecting C compiler ABI info
> > -- Detecting C compiler ABI info - done
> > -- Check for working CXX compiler: /usr/bin/c++
> > -- Check for working CXX compiler: /usr/bin/c++ -- works
> > -- Detecting CXX compiler ABI info
> > -- Detecting CXX compiler ABI info - done
> > -- Looking for include files CMAKE_HAVE_PTHREAD_H
> > -- Looking for include files CMAKE_HAVE_PTHREAD_H - found
> > -- Looking for pthread_create in pthreads
> > -- Looking for pthread_create in pthreads - not found
> > -- Looking for pthread_create in pthread
> > -- Looking for pthread_create in pthread - found
> > -- Found Threads: TRUE
> > -- Looking for XOpenDisplay in
> /usr/lib/i386-linux-gnu/libX11.so;/usr/lib/i386-linux-gnu/libXext.so
> > -- Looking for XOpenDisplay in
> /usr/lib/i386-linux-gnu/libX11.so;/usr/lib/i386-linux-gnu/libXext.so - found
> > -- Looking for gethostbyname
> > -- Looking for gethostbyname - found
> > -- Looking for connect
> > -- Looking for connect - found
> > -- Looking for remove
> > -- Looking for remove - found
> > -- Looking for shmat
> > -- Looking for shmat - found
> > -- Looking for IceConnectionNumber in ICE
> > -- Looking for IceConnectionNumber in ICE - found
> > -- Found X11: /usr/lib/i386-linux-gnu/libX11.so
> > -- Boost version: 1.42.0
> > -- Found the following Boost libraries:
> > --   date_time
> > --   regex
> > --   filesystem
> > --   system
> > --   program_options
> > --   thread
> > -- Found OpenSSL: /usr/lib/libssl.so;/usr/lib/libcrypto.so
> > -- Looking for Q_WS_X11
> > -- Looking for Q_WS_X11 - found
> > -- Looking for Q_WS_WIN
> > -- Looking for Q_WS_WIN - not found.
> > -- Looking for Q_WS_QWS
> > -- Looking for Q_WS_QWS - not found.
> > -- Looking for Q_WS_MAC
> > -- Looking for Q_WS_MAC - not found.
> > -- Found Qt-Version 4.7.2 (using /usr/bin/qmake)
> > -- Found wxWidgets: TRUE
> >
> > The build system is configured to install libraries to /usr/local/lib
> > Your applications may not be able to find your installed libraries
> unless you:
> >     set your LD_LIBRARY_PATH (user specific) or
> >     update your ld.so configuration (system wide)
> > You have an ld.so.conf.d directory on your system, so if you wish to
> ensure that
> > applications find the installed libcoin libraries, system wide, you
> could install an
> > libcoin specific ld.so configuration with:
> >     sudo make install_ld_conf
> >
> > -- Configuring done
> > -- Generating done
> > -- Build files have been written to: /home/user/libcoin
> > ----
> >
> >  Now I tried make, without success:
> >
> > ----
> > .....
> > Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0xf):
> undefined reference to `BN_init'
> > Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x1e):
> undefined reference to `BN_copy'
> > Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x38):
> undefined reference to `BN_set_negative'
> > Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x4f):
> undefined reference to `BN_clear_free'
> > Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0xd3):
> undefined reference to `BN_clear_free'
> > ../../lib/libcoin.a(Script.o): In function `operator<<(CBigNum const&,
> unsigned int)':
> > Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&, unsigned
> int)]+0x16): undefined reference to `BN_init'
> > Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&, unsigned
> int)]+0x2c): undefined reference to `BN_lshift'
> > Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&, unsigned
> int)]+0xad): undefined reference to `BN_clear_free'
> > ../../lib/libcoin.a(Script.o): In function `operator>>(CBigNum const&,
> unsigned int)':
> > Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned
> int)]+0xf): undefined reference to `BN_init'
> > Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned
> int)]+0x1e): undefined reference to `BN_copy'
> > Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned
> int)]+0x47): undefined reference to `BN_clear_free'
> > Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned
> int)]+0xcb): undefined reference to `BN_clear_free'
> > ../../lib/libcoin.a(Script.o): In function `operator!=(CBigNum const&,
> CBigNum const&)':
> > Script.cpp:(.text._ZneRK7CBigNumS1_[operator!=(CBigNum const&, CBigNum
> const&)]+0x14): undefined reference to `BN_cmp'
> > ../../lib/libcoin.a(Script.o): In function `operator>(CBigNum const&,
> CBigNum const&)':
> > Script.cpp:(.text._ZgtRK7CBigNumS1_[operator>(CBigNum const&, CBigNum
> const&)]+0x14): undefined reference to `BN_cmp'
> > ../../lib/libcoin.a(Script.o): In function `uint256
> Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned
> char, std::allocator<unsigned char> > >
> >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char,
> std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned
> char*, std::vector<unsigned char, std::allocator<unsigned char> > >)':
> >
> Script.cpp:(.text._Z4HashIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEE7uint256T_S8_[uint256
> Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned
> char, std::allocator<unsigned char> > >
> >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char,
> std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned
> char*, std::vector<unsigned char, std::allocator<unsigned char> >
> >)]+0x6d): undefined reference to `SHA256'
> >
> Script.cpp:(.text._Z4HashIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEE7uint256T_S8_[uint256
> Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned
> char, std::allocator<unsigned char> > >
> >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char,
> std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned
> char*, std::vector<unsigned char, std::allocator<unsigned char> >
> >)]+0xb8): undefined reference to `SHA256'
> > collect2: ld returned 1 exit status
> > make[2]: *** [bin/bitcoind] Error 1
> > make[1]: *** [applications/bitcoind/CMakeFiles/app_bitcoind.dir/all]
> Error 2
> > make: *** [all] Error 2
> > -----
> >
> >  What can I do?!
> >
> > Best,
> > Thiago
> >
> >
> > On 1 February 2012 12:18, Michael Gr?nager <gronager at ceptacle.com>
> wrote:
> > Dear Bitcoiners,
> >
> > libcoin is now in a state ready for its first release, which I would
> like to share with you!
> >
> > === libcoin is a crypto currency library based on the bitcoin/bitcoin
> "Satoshi" client. ===
> >
> > Copenhagen, Denmark - 1st February 2012 Ceptacle announces the release
> of the first version of the crypto currency library "libcoin" based on the
> bitcoin/bitcoin "Satoshi" client.
> >
> > libcoin also maintains a version of bitcoind that is a 100% compatible
> drop-in replacement of the bitcoin/bitcoind client: You can use it on the
> same computer on the same files and you can call it with the same scripts.
> And you can easily extend it without touching the basic bitcoin source
> files.
> >
> > The libcoin/bitcoind client downloads the entire block chain 3.5 times
> faster than the bitcoin/bitcoind client. This is less than 90 minutes on a
> modern laptop!
> >
> > In libcoin, the Satoshi client code has been completely refactored,
> properly encapsulating classes, removing all globals, moving from threads
> and mutexes to a pure asynchronous approach. Functionalities have been
> divided into logical units and libraries, minimizing dependencies for e.g.
> thin clients.
> >
> > libcoin is chain agnostic, all chain (bitcoin, testnet, namecoin,
> litecoin, ...) specific settings are maintained from a single class (Chain)
> and hence experiments with chain settings, mining, security and digital
> currencies for research and educational purposes are easily accessible. See
> the ponzicoin example for how you define your own chain.
> >
> > The build system of libcoin is based on CMake and supports builds of
> static and dynamic libraries on Linux, Mac OS X, and Windows.
> >
> > The libcoin license is LGPL v. 3. This mean that you can use it in open
> source as well as in commercial projects, but improvements should go back
> into the libcoin library.
> >
> > ======
> >
> > Read more on libcoin on: http://github.com/ceptacle/libcoin/wiki
> >
> > Join libcoin on twitter: http://twitter.com/libcoin
> >
> > Download "libcoin Satoshi release":
> http://github.com/ceptacle/libcoin/zipball/v0.4.0.1
> >
> > Best regards,
> >
> > Michael Gronager, PhD
> > Director, Ceptacle
> > Jens Juels Gade 33
> > 2100 Copenhagen E
> > Mobile: +45 31 45 14 01
> > E-mail: gronager at ceptacle.com
> > Web: http://www.ceptacle.com/
> >
> >
> >
> ------------------------------------------------------------------------------
> > Keep Your Developer Skills Current with LearnDevNow!
> > The most comprehensive online learning library for Microsoft developers
> > is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3, MVC3,
> > Metro Style Apps, more. Free future releases when you subscribe now!
> > http://p.sf.net/sfu/learndevnow-d2d
> > _______________________________________________
> > Bitcoin-development mailing list
> > Bitcoin-development at lists.sourceforge.net
> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> >
>
> Michael Gronager, PhD
> Director, Ceptacle
> Jens Juels Gade 33
> 2100 Copenhagen E
> Mobile: +45 31 45 14 01
> E-mail: gronager at ceptacle.com
> Web: http://www.ceptacle.com/
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120223/ca0085c4/attachment.html>

From thiagocmartinsc at gmail.com  Fri Feb 24 02:17:57 2012
From: thiagocmartinsc at gmail.com (=?ISO-2022-JP?B?TWFydGlueCAtIBskQiU4JSchPCVgJTobKEI=?=)
Date: Fri, 24 Feb 2012 00:17:57 -0200
Subject: [Bitcoin-development] Announcement: libcoin
In-Reply-To: <CAJSM8J3bZYfpE9EATcYe=79s_RxvGG9BrdRQR9ivwtZnuPsL0w@mail.gmail.com>
References: <D55C3D18-8286-44E9-B877-6FCE7C05E980@ceptacle.com>
	<CAJSM8J0zqF2=Poknzc8R7TrTJ0DWCMBw2-K9gGhUP_Qf+J6eFg@mail.gmail.com>
	<4FF4A408-F8C9-4A50-8B13-13D3686BEB09@ceptacle.com>
	<CAJSM8J3bZYfpE9EATcYe=79s_RxvGG9BrdRQR9ivwtZnuPsL0w@mail.gmail.com>
Message-ID: <CAJSM8J2nhoKsOnAeF8qBW3zOfp=sJ25sd8gnw2dMJ3GgkohDjQ@mail.gmail.com>

Hi Michael!

 I just run "bitcoind", from libcoin ("sudo make install") sources, with
empty ~/.bitcoin directory and:

Terminal 1: bitcoind # apparently okay

Terminal 2:

$ bitcoind getinfo # okay
{
    "version" : 40001,
    "blocks" : 57733,
    "connections" : 8,
    "difficulty" : 11.84622815,
    "testnet" : false
}

# sleep a couple minutes

$ bitcoind getinfo # ok
{
    "version" : 40001,
    "blocks" : 67527,
    "connections" : 8,
    "difficulty" : 45.38582234,
    "testnet" : false
}


But...


$ bitcoind help
HTTP error code: 404
JSON RPC Error code: -36001
Method not found.

$ bitcoind getaccountaddress ""
HTTP error code: 401
Error: couldn't parse reply from server

$ bitcoind listaccounts
HTTP error code: 401
Error: couldn't parse reply from server


 Any tips?! lol

Thanks!
Thiago

2012/2/23 Martinx - ????? <thiagocmartinsc at gmail.com>

> AWESOME!!!
>
> I can compile libcoin at my Ubuntu 11.10... I just need to install:
>
> sudo aptitude install libboost1.46-all-dev
>
> ...alongside with another already installed dependencies, and now it
> works!!
>
> Thank you!
> Thiago
>
> 2012/2/23 Michael Gr?nager <gronager at ceptacle.com>
>
>> Hi Martinx,
>>
>> Another note:
>>
>> boost 1.42 and openssl 1.0 has a conflict (you will see it when you try
>> to compile coinHTTP with that specific combination: sslv2 has been removed
>> from openssl, but boost still references it.)
>>
>> You should do a :
>>
>> sudo apt-get upgrade libboost-dev-all
>>
>> to get the 1.46.1 library
>>
>> /M
>>
>>
>> On 23/02/2012, at 18:31, Martinx - ????? wrote:
>>
>> > Hi Michael!
>> >
>> >  Thank you for libcoin! It is a awesome evolution for Bitcoin and for
>> the CryptoCurrencies as a hole... Thanks!!!
>> >
>> >  Anyway, I am unable to compile libcoin under my Ubuntu 11.04. At this
>> machine, I have compiled and running Bitcoin (from sources), Namecoin,
>> Devcoin, Litecoin, IXcoin and I0coin, all from sources but, when I try to
>> compile libcoin, I got:
>> >
>> > ----
>> > user at desk:~/libcoin$ ./configure
>> > -- The C compiler identification is GNU
>> > -- The CXX compiler identification is GNU
>> > -- Check for working C compiler: /usr/bin/gcc
>> > -- Check for working C compiler: /usr/bin/gcc -- works
>> > -- Detecting C compiler ABI info
>> > -- Detecting C compiler ABI info - done
>> > -- Check for working CXX compiler: /usr/bin/c++
>> > -- Check for working CXX compiler: /usr/bin/c++ -- works
>> > -- Detecting CXX compiler ABI info
>> > -- Detecting CXX compiler ABI info - done
>> > -- Looking for include files CMAKE_HAVE_PTHREAD_H
>> > -- Looking for include files CMAKE_HAVE_PTHREAD_H - found
>> > -- Looking for pthread_create in pthreads
>> > -- Looking for pthread_create in pthreads - not found
>> > -- Looking for pthread_create in pthread
>> > -- Looking for pthread_create in pthread - found
>> > -- Found Threads: TRUE
>> > -- Looking for XOpenDisplay in
>> /usr/lib/i386-linux-gnu/libX11.so;/usr/lib/i386-linux-gnu/libXext.so
>> > -- Looking for XOpenDisplay in
>> /usr/lib/i386-linux-gnu/libX11.so;/usr/lib/i386-linux-gnu/libXext.so - found
>> > -- Looking for gethostbyname
>> > -- Looking for gethostbyname - found
>> > -- Looking for connect
>> > -- Looking for connect - found
>> > -- Looking for remove
>> > -- Looking for remove - found
>> > -- Looking for shmat
>> > -- Looking for shmat - found
>> > -- Looking for IceConnectionNumber in ICE
>> > -- Looking for IceConnectionNumber in ICE - found
>> > -- Found X11: /usr/lib/i386-linux-gnu/libX11.so
>> > -- Boost version: 1.42.0
>> > -- Found the following Boost libraries:
>> > --   date_time
>> > --   regex
>> > --   filesystem
>> > --   system
>> > --   program_options
>> > --   thread
>> > -- Found OpenSSL: /usr/lib/libssl.so;/usr/lib/libcrypto.so
>> > -- Looking for Q_WS_X11
>> > -- Looking for Q_WS_X11 - found
>> > -- Looking for Q_WS_WIN
>> > -- Looking for Q_WS_WIN - not found.
>> > -- Looking for Q_WS_QWS
>> > -- Looking for Q_WS_QWS - not found.
>> > -- Looking for Q_WS_MAC
>> > -- Looking for Q_WS_MAC - not found.
>> > -- Found Qt-Version 4.7.2 (using /usr/bin/qmake)
>> > -- Found wxWidgets: TRUE
>> >
>> > The build system is configured to install libraries to /usr/local/lib
>> > Your applications may not be able to find your installed libraries
>> unless you:
>> >     set your LD_LIBRARY_PATH (user specific) or
>> >     update your ld.so configuration (system wide)
>> > You have an ld.so.conf.d directory on your system, so if you wish to
>> ensure that
>> > applications find the installed libcoin libraries, system wide, you
>> could install an
>> > libcoin specific ld.so configuration with:
>> >     sudo make install_ld_conf
>> >
>> > -- Configuring done
>> > -- Generating done
>> > -- Build files have been written to: /home/user/libcoin
>> > ----
>> >
>> >  Now I tried make, without success:
>> >
>> > ----
>> > .....
>> > Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0xf):
>> undefined reference to `BN_init'
>> > Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x1e):
>> undefined reference to `BN_copy'
>> > Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x38):
>> undefined reference to `BN_set_negative'
>> > Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x4f):
>> undefined reference to `BN_clear_free'
>> > Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0xd3):
>> undefined reference to `BN_clear_free'
>> > ../../lib/libcoin.a(Script.o): In function `operator<<(CBigNum const&,
>> unsigned int)':
>> > Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&, unsigned
>> int)]+0x16): undefined reference to `BN_init'
>> > Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&, unsigned
>> int)]+0x2c): undefined reference to `BN_lshift'
>> > Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&, unsigned
>> int)]+0xad): undefined reference to `BN_clear_free'
>> > ../../lib/libcoin.a(Script.o): In function `operator>>(CBigNum const&,
>> unsigned int)':
>> > Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned
>> int)]+0xf): undefined reference to `BN_init'
>> > Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned
>> int)]+0x1e): undefined reference to `BN_copy'
>> > Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned
>> int)]+0x47): undefined reference to `BN_clear_free'
>> > Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned
>> int)]+0xcb): undefined reference to `BN_clear_free'
>> > ../../lib/libcoin.a(Script.o): In function `operator!=(CBigNum const&,
>> CBigNum const&)':
>> > Script.cpp:(.text._ZneRK7CBigNumS1_[operator!=(CBigNum const&, CBigNum
>> const&)]+0x14): undefined reference to `BN_cmp'
>> > ../../lib/libcoin.a(Script.o): In function `operator>(CBigNum const&,
>> CBigNum const&)':
>> > Script.cpp:(.text._ZgtRK7CBigNumS1_[operator>(CBigNum const&, CBigNum
>> const&)]+0x14): undefined reference to `BN_cmp'
>> > ../../lib/libcoin.a(Script.o): In function `uint256
>> Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned
>> char, std::allocator<unsigned char> > >
>> >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char,
>> std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned
>> char*, std::vector<unsigned char, std::allocator<unsigned char> > >)':
>> >
>> Script.cpp:(.text._Z4HashIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEE7uint256T_S8_[uint256
>> Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned
>> char, std::allocator<unsigned char> > >
>> >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char,
>> std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned
>> char*, std::vector<unsigned char, std::allocator<unsigned char> >
>> >)]+0x6d): undefined reference to `SHA256'
>> >
>> Script.cpp:(.text._Z4HashIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEE7uint256T_S8_[uint256
>> Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned
>> char, std::allocator<unsigned char> > >
>> >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char,
>> std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned
>> char*, std::vector<unsigned char, std::allocator<unsigned char> >
>> >)]+0xb8): undefined reference to `SHA256'
>> > collect2: ld returned 1 exit status
>> > make[2]: *** [bin/bitcoind] Error 1
>> > make[1]: *** [applications/bitcoind/CMakeFiles/app_bitcoind.dir/all]
>> Error 2
>> > make: *** [all] Error 2
>> > -----
>> >
>> >  What can I do?!
>> >
>> > Best,
>> > Thiago
>> >
>> >
>> > On 1 February 2012 12:18, Michael Gr?nager <gronager at ceptacle.com>
>> wrote:
>> > Dear Bitcoiners,
>> >
>> > libcoin is now in a state ready for its first release, which I would
>> like to share with you!
>> >
>> > === libcoin is a crypto currency library based on the bitcoin/bitcoin
>> "Satoshi" client. ===
>> >
>> > Copenhagen, Denmark - 1st February 2012 Ceptacle announces the release
>> of the first version of the crypto currency library "libcoin" based on the
>> bitcoin/bitcoin "Satoshi" client.
>> >
>> > libcoin also maintains a version of bitcoind that is a 100% compatible
>> drop-in replacement of the bitcoin/bitcoind client: You can use it on the
>> same computer on the same files and you can call it with the same scripts.
>> And you can easily extend it without touching the basic bitcoin source
>> files.
>> >
>> > The libcoin/bitcoind client downloads the entire block chain 3.5 times
>> faster than the bitcoin/bitcoind client. This is less than 90 minutes on a
>> modern laptop!
>> >
>> > In libcoin, the Satoshi client code has been completely refactored,
>> properly encapsulating classes, removing all globals, moving from threads
>> and mutexes to a pure asynchronous approach. Functionalities have been
>> divided into logical units and libraries, minimizing dependencies for e.g.
>> thin clients.
>> >
>> > libcoin is chain agnostic, all chain (bitcoin, testnet, namecoin,
>> litecoin, ...) specific settings are maintained from a single class (Chain)
>> and hence experiments with chain settings, mining, security and digital
>> currencies for research and educational purposes are easily accessible. See
>> the ponzicoin example for how you define your own chain.
>> >
>> > The build system of libcoin is based on CMake and supports builds of
>> static and dynamic libraries on Linux, Mac OS X, and Windows.
>> >
>> > The libcoin license is LGPL v. 3. This mean that you can use it in open
>> source as well as in commercial projects, but improvements should go back
>> into the libcoin library.
>> >
>> > ======
>> >
>> > Read more on libcoin on: http://github.com/ceptacle/libcoin/wiki
>> >
>> > Join libcoin on twitter: http://twitter.com/libcoin
>> >
>> > Download "libcoin Satoshi release":
>> http://github.com/ceptacle/libcoin/zipball/v0.4.0.1
>> >
>> > Best regards,
>> >
>> > Michael Gronager, PhD
>> > Director, Ceptacle
>> > Jens Juels Gade 33
>> > 2100 Copenhagen E
>> > Mobile: +45 31 45 14 01
>> > E-mail: gronager at ceptacle.com
>> > Web: http://www.ceptacle.com/
>> >
>> >
>> >
>> ------------------------------------------------------------------------------
>> > Keep Your Developer Skills Current with LearnDevNow!
>> > The most comprehensive online learning library for Microsoft developers
>> > is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3, MVC3,
>> > Metro Style Apps, more. Free future releases when you subscribe now!
>> > http://p.sf.net/sfu/learndevnow-d2d
>> > _______________________________________________
>> > Bitcoin-development mailing list
>> > Bitcoin-development at lists.sourceforge.net
>> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>> >
>>
>> Michael Gronager, PhD
>> Director, Ceptacle
>> Jens Juels Gade 33
>> 2100 Copenhagen E
>> Mobile: +45 31 45 14 01
>> E-mail: gronager at ceptacle.com
>> Web: http://www.ceptacle.com/
>>
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120224/cde27daa/attachment.html>

From gronager at ceptacle.com  Fri Feb 24 07:44:38 2012
From: gronager at ceptacle.com (=?iso-8859-1?Q?Michael_Gr=F8nager?=)
Date: Fri, 24 Feb 2012 08:44:38 +0100
Subject: [Bitcoin-development] Announcement: libcoin
In-Reply-To: <CAJSM8J2nhoKsOnAeF8qBW3zOfp=sJ25sd8gnw2dMJ3GgkohDjQ@mail.gmail.com>
References: <D55C3D18-8286-44E9-B877-6FCE7C05E980@ceptacle.com>
	<CAJSM8J0zqF2=Poknzc8R7TrTJ0DWCMBw2-K9gGhUP_Qf+J6eFg@mail.gmail.com>
	<4FF4A408-F8C9-4A50-8B13-13D3686BEB09@ceptacle.com>
	<CAJSM8J3bZYfpE9EATcYe=79s_RxvGG9BrdRQR9ivwtZnuPsL0w@mail.gmail.com>
	<CAJSM8J2nhoKsOnAeF8qBW3zOfp=sJ25sd8gnw2dMJ3GgkohDjQ@mail.gmail.com>
Message-ID: <3049717A-960B-4D21-8608-8C82DCB4A5B2@ceptacle.com>

Hi Thiago

I had in mind using the JSON RPC 2.0 system.description standard command instead of help, but I got sidetracked implementing it. Will look into it asap. Thanks for noting!

/M

On 24/02/2012, at 03:17, Martinx - ????? wrote:

> Hi Michael!
> 
> I just run "bitcoind", from libcoin ("sudo make install") sources, with empty ~/.bitcoin directory and:
> 
> Terminal 1: bitcoind # apparently okay
> 
> Terminal 2:
> 
> $ bitcoind getinfo # okay
> {
>    "version" : 40001,
>    "blocks" : 57733,
>    "connections" : 8,
>    "difficulty" : 11.84622815,
>    "testnet" : false
> }
> 
> # sleep a couple minutes
> 
> $ bitcoind getinfo # ok
> {
>    "version" : 40001,
>    "blocks" : 67527,
>    "connections" : 8,
>    "difficulty" : 45.38582234,
>    "testnet" : false
> }
> 
> 
> But...
> 
> 
> $ bitcoind help
> HTTP error code: 404
> JSON RPC Error code: -36001
> Method not found.
> 
> $ bitcoind getaccountaddress ""
> HTTP error code: 401
> Error: couldn't parse reply from server
> 
> $ bitcoind listaccounts
> HTTP error code: 401
> Error: couldn't parse reply from server
> 
> 
> Any tips?! lol
> 
> Thanks!
> Thiago
> 
> 2012/2/23 Martinx - ????? <thiagocmartinsc at gmail.com>
> AWESOME!!!
> 
> I can compile libcoin at my Ubuntu 11.10... I just need to install:
> 
> sudo aptitude install libboost1.46-all-dev
> 
> ...alongside with another already installed dependencies, and now it works!!
> 
> Thank you!
> Thiago
> 
> 2012/2/23 Michael Gr?nager <gronager at ceptacle.com>
> Hi Martinx,
> 
> Another note:
> 
> boost 1.42 and openssl 1.0 has a conflict (you will see it when you try to compile coinHTTP with that specific combination: sslv2 has been removed from openssl, but boost still references it.)
> 
> You should do a :
> 
> sudo apt-get upgrade libboost-dev-all
> 
> to get the 1.46.1 library
> 
> /M
> 
> 
> On 23/02/2012, at 18:31, Martinx - ????? wrote:
> 
>> Hi Michael!
>> 
>> Thank you for libcoin! It is a awesome evolution for Bitcoin and for the CryptoCurrencies as a hole... Thanks!!!
>> 
>> Anyway, I am unable to compile libcoin under my Ubuntu 11.04. At this machine, I have compiled and running Bitcoin (from sources), Namecoin, Devcoin, Litecoin, IXcoin and I0coin, all from sources but, when I try to compile libcoin, I got:
>> 
>> ----
>> user at desk:~/libcoin$ ./configure
>> -- The C compiler identification is GNU
>> -- The CXX compiler identification is GNU
>> -- Check for working C compiler: /usr/bin/gcc
>> -- Check for working C compiler: /usr/bin/gcc -- works
>> -- Detecting C compiler ABI info
>> -- Detecting C compiler ABI info - done
>> -- Check for working CXX compiler: /usr/bin/c++
>> -- Check for working CXX compiler: /usr/bin/c++ -- works
>> -- Detecting CXX compiler ABI info
>> -- Detecting CXX compiler ABI info - done
>> -- Looking for include files CMAKE_HAVE_PTHREAD_H
>> -- Looking for include files CMAKE_HAVE_PTHREAD_H - found
>> -- Looking for pthread_create in pthreads
>> -- Looking for pthread_create in pthreads - not found
>> -- Looking for pthread_create in pthread
>> -- Looking for pthread_create in pthread - found
>> -- Found Threads: TRUE
>> -- Looking for XOpenDisplay in /usr/lib/i386-linux-gnu/libX11.so;/usr/lib/i386-linux-gnu/libXext.so
>> -- Looking for XOpenDisplay in /usr/lib/i386-linux-gnu/libX11.so;/usr/lib/i386-linux-gnu/libXext.so - found
>> -- Looking for gethostbyname
>> -- Looking for gethostbyname - found
>> -- Looking for connect
>> -- Looking for connect - found
>> -- Looking for remove
>> -- Looking for remove - found
>> -- Looking for shmat
>> -- Looking for shmat - found
>> -- Looking for IceConnectionNumber in ICE
>> -- Looking for IceConnectionNumber in ICE - found
>> -- Found X11: /usr/lib/i386-linux-gnu/libX11.so
>> -- Boost version: 1.42.0
>> -- Found the following Boost libraries:
>> --   date_time
>> --   regex
>> --   filesystem
>> --   system
>> --   program_options
>> --   thread
>> -- Found OpenSSL: /usr/lib/libssl.so;/usr/lib/libcrypto.so
>> -- Looking for Q_WS_X11
>> -- Looking for Q_WS_X11 - found
>> -- Looking for Q_WS_WIN
>> -- Looking for Q_WS_WIN - not found.
>> -- Looking for Q_WS_QWS
>> -- Looking for Q_WS_QWS - not found.
>> -- Looking for Q_WS_MAC
>> -- Looking for Q_WS_MAC - not found.
>> -- Found Qt-Version 4.7.2 (using /usr/bin/qmake)
>> -- Found wxWidgets: TRUE
>> 
>> The build system is configured to install libraries to /usr/local/lib
>> Your applications may not be able to find your installed libraries unless you:
>>    set your LD_LIBRARY_PATH (user specific) or
>>    update your ld.so configuration (system wide)
>> You have an ld.so.conf.d directory on your system, so if you wish to ensure that
>> applications find the installed libcoin libraries, system wide, you could install an
>> libcoin specific ld.so configuration with:
>>    sudo make install_ld_conf
>> 
>> -- Configuring done
>> -- Generating done
>> -- Build files have been written to: /home/user/libcoin
>> ----
>> 
>> Now I tried make, without success:
>> 
>> ----
>> .....
>> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0xf): undefined reference to `BN_init'
>> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x1e): undefined reference to `BN_copy'
>> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x38): undefined reference to `BN_set_negative'
>> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x4f): undefined reference to `BN_clear_free'
>> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0xd3): undefined reference to `BN_clear_free'
>> ../../lib/libcoin.a(Script.o): In function `operator<<(CBigNum const&, unsigned int)':
>> Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&, unsigned int)]+0x16): undefined reference to `BN_init'
>> Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&, unsigned int)]+0x2c): undefined reference to `BN_lshift'
>> Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&, unsigned int)]+0xad): undefined reference to `BN_clear_free'
>> ../../lib/libcoin.a(Script.o): In function `operator>>(CBigNum const&, unsigned int)':
>> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned int)]+0xf): undefined reference to `BN_init'
>> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned int)]+0x1e): undefined reference to `BN_copy'
>> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned int)]+0x47): undefined reference to `BN_clear_free'
>> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned int)]+0xcb): undefined reference to `BN_clear_free'
>> ../../lib/libcoin.a(Script.o): In function `operator!=(CBigNum const&, CBigNum const&)':
>> Script.cpp:(.text._ZneRK7CBigNumS1_[operator!=(CBigNum const&, CBigNum const&)]+0x14): undefined reference to `BN_cmp'
>> ../../lib/libcoin.a(Script.o): In function `operator>(CBigNum const&, CBigNum const&)':
>> Script.cpp:(.text._ZgtRK7CBigNumS1_[operator>(CBigNum const&, CBigNum const&)]+0x14): undefined reference to `BN_cmp'
>> ../../lib/libcoin.a(Script.o): In function `uint256 Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > > >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >)':
>> Script.cpp:(.text._Z4HashIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEE7uint256T_S8_[uint256 Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > > >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >)]+0x6d): undefined reference to `SHA256'
>> Script.cpp:(.text._Z4HashIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEE7uint256T_S8_[uint256 Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > > >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >)]+0xb8): undefined reference to `SHA256'
>> collect2: ld returned 1 exit status
>> make[2]: *** [bin/bitcoind] Error 1
>> make[1]: *** [applications/bitcoind/CMakeFiles/app_bitcoind.dir/all] Error 2
>> make: *** [all] Error 2
>> -----
>> 
>> What can I do?!
>> 
>> Best,
>> Thiago
>> 
>> 
>> On 1 February 2012 12:18, Michael Gr?nager <gronager at ceptacle.com> wrote:
>> Dear Bitcoiners,
>> 
>> libcoin is now in a state ready for its first release, which I would like to share with you!
>> 
>> === libcoin is a crypto currency library based on the bitcoin/bitcoin "Satoshi" client. ===
>> 
>> Copenhagen, Denmark - 1st February 2012 Ceptacle announces the release of the first version of the crypto currency library "libcoin" based on the bitcoin/bitcoin "Satoshi" client.
>> 
>> libcoin also maintains a version of bitcoind that is a 100% compatible drop-in replacement of the bitcoin/bitcoind client: You can use it on the same computer on the same files and you can call it with the same scripts. And you can easily extend it without touching the basic bitcoin source files.
>> 
>> The libcoin/bitcoind client downloads the entire block chain 3.5 times faster than the bitcoin/bitcoind client. This is less than 90 minutes on a modern laptop!
>> 
>> In libcoin, the Satoshi client code has been completely refactored, properly encapsulating classes, removing all globals, moving from threads and mutexes to a pure asynchronous approach. Functionalities have been divided into logical units and libraries, minimizing dependencies for e.g. thin clients.
>> 
>> libcoin is chain agnostic, all chain (bitcoin, testnet, namecoin, litecoin, ...) specific settings are maintained from a single class (Chain) and hence experiments with chain settings, mining, security and digital currencies for research and educational purposes are easily accessible. See the ponzicoin example for how you define your own chain.
>> 
>> The build system of libcoin is based on CMake and supports builds of static and dynamic libraries on Linux, Mac OS X, and Windows.
>> 
>> The libcoin license is LGPL v. 3. This mean that you can use it in open source as well as in commercial projects, but improvements should go back into the libcoin library.
>> 
>> ======
>> 
>> Read more on libcoin on: http://github.com/ceptacle/libcoin/wiki
>> 
>> Join libcoin on twitter: http://twitter.com/libcoin
>> 
>> Download "libcoin Satoshi release": http://github.com/ceptacle/libcoin/zipball/v0.4.0.1
>> 
>> Best regards,
>> 
>> Michael Gronager, PhD
>> Director, Ceptacle
>> Jens Juels Gade 33
>> 2100 Copenhagen E
>> Mobile: +45 31 45 14 01
>> E-mail: gronager at ceptacle.com
>> Web: http://www.ceptacle.com/
>> 
>> 
>> ------------------------------------------------------------------------------
>> Keep Your Developer Skills Current with LearnDevNow!
>> The most comprehensive online learning library for Microsoft developers
>> is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3, MVC3,
>> Metro Style Apps, more. Free future releases when you subscribe now!
>> http://p.sf.net/sfu/learndevnow-d2d
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>> 
> 
> Michael Gronager, PhD
> Director, Ceptacle
> Jens Juels Gade 33
> 2100 Copenhagen E
> Mobile: +45 31 45 14 01
> E-mail: gronager at ceptacle.com
> Web: http://www.ceptacle.com/
> 
> 
> 

Michael Gronager, PhD
Director, Ceptacle
Jens Juels Gade 33
2100 Copenhagen E
Mobile: +45 31 45 14 01
E-mail: gronager at ceptacle.com
Web: http://www.ceptacle.com/




From gronager at ceptacle.com  Fri Feb 24 11:57:06 2012
From: gronager at ceptacle.com (Michael Gronager)
Date: Fri, 24 Feb 2012 12:57:06 +0100
Subject: [Bitcoin-development] libcoin - fixed post Feb 20 version 0.2 bug.
Message-ID: <7AAF416E-57BC-4C79-949C-CD93AA3E26C8@ceptacle.com>

The bitcoin 0.2 protocol (the one with no checksums on version/verack) ended its life Feb 20th.

I had forgot to add the date check in libcoin, so after Feb 20th you might have seen some errors in the log file (and having trouble getting blocks) - the code is fixed now...

Also, there are a lot of updates for 0.6:
* New internal address classes: PubKeyHash and ScriptHash to support P2SH
* Adapted a lot of other code from the 0.6 branch
* Support for BitcoinQt: I am porting BitcoinQt to use libcoin - this required a couple of interface enhancements. More on this later...

(detail:
https://github.com/ceptacle/libcoin/commit/98531e971152d4fff41c30b14d58b9fd548b21db
)

Cheers,

Michael


From gronager at ceptacle.com  Fri Feb 24 14:09:11 2012
From: gronager at ceptacle.com (Michael Gronager)
Date: Fri, 24 Feb 2012 15:09:11 +0100
Subject: [Bitcoin-development] Announcement: libcoin/BitcoinQt aka libcoinqt
Message-ID: <CC97C1E6-57C3-4EDA-A6E8-1389F03DD503@ceptacle.com>

I have just finalized porting BitcoinQt to build using libcoin as its basic crypto library.

You can find the project at:

https://github.com/ceptacle/libcoinqt

It is based on the latest 0.6 branch of BitcoinQt.

There are a few things not yet ported:
* update the splash text while loading
* some of the globals have not found a replacement (see optionmodel for details on this)
* UPnP - this awaits the similar functionality in libcoin
* Proxy support - same...

To build libcoinqt you need to first build libcoin, then build libcoinqt using qmake or Qt Creator.

Note: I have only tested on MacOSX - more tests and features next week.

Have a nice weekend!

Michael


From gronager at ceptacle.com  Fri Feb 24 16:17:45 2012
From: gronager at ceptacle.com (=?iso-8859-1?Q?Michael_Gr=F8nager?=)
Date: Fri, 24 Feb 2012 17:17:45 +0100
Subject: [Bitcoin-development] Announcement: libcoin
In-Reply-To: <CAJSM8J2nhoKsOnAeF8qBW3zOfp=sJ25sd8gnw2dMJ3GgkohDjQ@mail.gmail.com>
References: <D55C3D18-8286-44E9-B877-6FCE7C05E980@ceptacle.com>
	<CAJSM8J0zqF2=Poknzc8R7TrTJ0DWCMBw2-K9gGhUP_Qf+J6eFg@mail.gmail.com>
	<4FF4A408-F8C9-4A50-8B13-13D3686BEB09@ceptacle.com>
	<CAJSM8J3bZYfpE9EATcYe=79s_RxvGG9BrdRQR9ivwtZnuPsL0w@mail.gmail.com>
	<CAJSM8J2nhoKsOnAeF8qBW3zOfp=sJ25sd8gnw2dMJ3GgkohDjQ@mail.gmail.com>
Message-ID: <C3C58158-0DED-41A1-B4D2-BF746AFE717A@ceptacle.com>

Hi Thiago,

Forgot to comment on the two latter:

> $ bitcoind getaccountaddress ""
> HTTP error code: 401
> Error: couldn't parse reply from server
> 
> $ bitcoind listaccounts
> HTTP error code: 401
> Error: couldn't parse reply from server
> 

401 = permission denied - you need to setup username / password either on the commandline or in the bicoin.conf file to access those commands...

See in the bitcoind.cpp file for commands that you can use with and without auth...

Those that contains an "auth" requires auth:

       server.registerMethod(method_ptr(new GetBalance(wallet)), auth);

As opposed to:

       server.registerMethod(method_ptr(new GetInfo(node))); 

auth is defined by:

       Auth auth(rpc_user, rpc_pass); // if rpc_user and rpc_pass are not set, all authenticated methods becomes disallowed.

so you just experience the case explained in the comment ;) I admit that the output could be more readable, though!

/M


> 
> Any tips?! lol
> 
> Thanks!
> Thiago
> 
> 2012/2/23 Martinx - ????? <thiagocmartinsc at gmail.com>
> AWESOME!!!
> 
> I can compile libcoin at my Ubuntu 11.10... I just need to install:
> 
> sudo aptitude install libboost1.46-all-dev
> 
> ...alongside with another already installed dependencies, and now it works!!
> 
> Thank you!
> Thiago
> 
> 2012/2/23 Michael Gr?nager <gronager at ceptacle.com>
> Hi Martinx,
> 
> Another note:
> 
> boost 1.42 and openssl 1.0 has a conflict (you will see it when you try to compile coinHTTP with that specific combination: sslv2 has been removed from openssl, but boost still references it.)
> 
> You should do a :
> 
> sudo apt-get upgrade libboost-dev-all
> 
> to get the 1.46.1 library
> 
> /M
> 
> 
> On 23/02/2012, at 18:31, Martinx - ????? wrote:
> 
>> Hi Michael!
>> 
>> Thank you for libcoin! It is a awesome evolution for Bitcoin and for the CryptoCurrencies as a hole... Thanks!!!
>> 
>> Anyway, I am unable to compile libcoin under my Ubuntu 11.04. At this machine, I have compiled and running Bitcoin (from sources), Namecoin, Devcoin, Litecoin, IXcoin and I0coin, all from sources but, when I try to compile libcoin, I got:
>> 
>> ----
>> user at desk:~/libcoin$ ./configure
>> -- The C compiler identification is GNU
>> -- The CXX compiler identification is GNU
>> -- Check for working C compiler: /usr/bin/gcc
>> -- Check for working C compiler: /usr/bin/gcc -- works
>> -- Detecting C compiler ABI info
>> -- Detecting C compiler ABI info - done
>> -- Check for working CXX compiler: /usr/bin/c++
>> -- Check for working CXX compiler: /usr/bin/c++ -- works
>> -- Detecting CXX compiler ABI info
>> -- Detecting CXX compiler ABI info - done
>> -- Looking for include files CMAKE_HAVE_PTHREAD_H
>> -- Looking for include files CMAKE_HAVE_PTHREAD_H - found
>> -- Looking for pthread_create in pthreads
>> -- Looking for pthread_create in pthreads - not found
>> -- Looking for pthread_create in pthread
>> -- Looking for pthread_create in pthread - found
>> -- Found Threads: TRUE
>> -- Looking for XOpenDisplay in /usr/lib/i386-linux-gnu/libX11.so;/usr/lib/i386-linux-gnu/libXext.so
>> -- Looking for XOpenDisplay in /usr/lib/i386-linux-gnu/libX11.so;/usr/lib/i386-linux-gnu/libXext.so - found
>> -- Looking for gethostbyname
>> -- Looking for gethostbyname - found
>> -- Looking for connect
>> -- Looking for connect - found
>> -- Looking for remove
>> -- Looking for remove - found
>> -- Looking for shmat
>> -- Looking for shmat - found
>> -- Looking for IceConnectionNumber in ICE
>> -- Looking for IceConnectionNumber in ICE - found
>> -- Found X11: /usr/lib/i386-linux-gnu/libX11.so
>> -- Boost version: 1.42.0
>> -- Found the following Boost libraries:
>> --   date_time
>> --   regex
>> --   filesystem
>> --   system
>> --   program_options
>> --   thread
>> -- Found OpenSSL: /usr/lib/libssl.so;/usr/lib/libcrypto.so
>> -- Looking for Q_WS_X11
>> -- Looking for Q_WS_X11 - found
>> -- Looking for Q_WS_WIN
>> -- Looking for Q_WS_WIN - not found.
>> -- Looking for Q_WS_QWS
>> -- Looking for Q_WS_QWS - not found.
>> -- Looking for Q_WS_MAC
>> -- Looking for Q_WS_MAC - not found.
>> -- Found Qt-Version 4.7.2 (using /usr/bin/qmake)
>> -- Found wxWidgets: TRUE
>> 
>> The build system is configured to install libraries to /usr/local/lib
>> Your applications may not be able to find your installed libraries unless you:
>>    set your LD_LIBRARY_PATH (user specific) or
>>    update your ld.so configuration (system wide)
>> You have an ld.so.conf.d directory on your system, so if you wish to ensure that
>> applications find the installed libcoin libraries, system wide, you could install an
>> libcoin specific ld.so configuration with:
>>    sudo make install_ld_conf
>> 
>> -- Configuring done
>> -- Generating done
>> -- Build files have been written to: /home/user/libcoin
>> ----
>> 
>> Now I tried make, without success:
>> 
>> ----
>> .....
>> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0xf): undefined reference to `BN_init'
>> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x1e): undefined reference to `BN_copy'
>> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x38): undefined reference to `BN_set_negative'
>> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x4f): undefined reference to `BN_clear_free'
>> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0xd3): undefined reference to `BN_clear_free'
>> ../../lib/libcoin.a(Script.o): In function `operator<<(CBigNum const&, unsigned int)':
>> Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&, unsigned int)]+0x16): undefined reference to `BN_init'
>> Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&, unsigned int)]+0x2c): undefined reference to `BN_lshift'
>> Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&, unsigned int)]+0xad): undefined reference to `BN_clear_free'
>> ../../lib/libcoin.a(Script.o): In function `operator>>(CBigNum const&, unsigned int)':
>> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned int)]+0xf): undefined reference to `BN_init'
>> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned int)]+0x1e): undefined reference to `BN_copy'
>> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned int)]+0x47): undefined reference to `BN_clear_free'
>> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned int)]+0xcb): undefined reference to `BN_clear_free'
>> ../../lib/libcoin.a(Script.o): In function `operator!=(CBigNum const&, CBigNum const&)':
>> Script.cpp:(.text._ZneRK7CBigNumS1_[operator!=(CBigNum const&, CBigNum const&)]+0x14): undefined reference to `BN_cmp'
>> ../../lib/libcoin.a(Script.o): In function `operator>(CBigNum const&, CBigNum const&)':
>> Script.cpp:(.text._ZgtRK7CBigNumS1_[operator>(CBigNum const&, CBigNum const&)]+0x14): undefined reference to `BN_cmp'
>> ../../lib/libcoin.a(Script.o): In function `uint256 Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > > >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >)':
>> Script.cpp:(.text._Z4HashIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEE7uint256T_S8_[uint256 Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > > >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >)]+0x6d): undefined reference to `SHA256'
>> Script.cpp:(.text._Z4HashIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEE7uint256T_S8_[uint256 Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > > >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >)]+0xb8): undefined reference to `SHA256'
>> collect2: ld returned 1 exit status
>> make[2]: *** [bin/bitcoind] Error 1
>> make[1]: *** [applications/bitcoind/CMakeFiles/app_bitcoind.dir/all] Error 2
>> make: *** [all] Error 2
>> -----
>> 
>> What can I do?!
>> 
>> Best,
>> Thiago
>> 
>> 
>> On 1 February 2012 12:18, Michael Gr?nager <gronager at ceptacle.com> wrote:
>> Dear Bitcoiners,
>> 
>> libcoin is now in a state ready for its first release, which I would like to share with you!
>> 
>> === libcoin is a crypto currency library based on the bitcoin/bitcoin "Satoshi" client. ===
>> 
>> Copenhagen, Denmark - 1st February 2012 Ceptacle announces the release of the first version of the crypto currency library "libcoin" based on the bitcoin/bitcoin "Satoshi" client.
>> 
>> libcoin also maintains a version of bitcoind that is a 100% compatible drop-in replacement of the bitcoin/bitcoind client: You can use it on the same computer on the same files and you can call it with the same scripts. And you can easily extend it without touching the basic bitcoin source files.
>> 
>> The libcoin/bitcoind client downloads the entire block chain 3.5 times faster than the bitcoin/bitcoind client. This is less than 90 minutes on a modern laptop!
>> 
>> In libcoin, the Satoshi client code has been completely refactored, properly encapsulating classes, removing all globals, moving from threads and mutexes to a pure asynchronous approach. Functionalities have been divided into logical units and libraries, minimizing dependencies for e.g. thin clients.
>> 
>> libcoin is chain agnostic, all chain (bitcoin, testnet, namecoin, litecoin, ...) specific settings are maintained from a single class (Chain) and hence experiments with chain settings, mining, security and digital currencies for research and educational purposes are easily accessible. See the ponzicoin example for how you define your own chain.
>> 
>> The build system of libcoin is based on CMake and supports builds of static and dynamic libraries on Linux, Mac OS X, and Windows.
>> 
>> The libcoin license is LGPL v. 3. This mean that you can use it in open source as well as in commercial projects, but improvements should go back into the libcoin library.
>> 
>> ======
>> 
>> Read more on libcoin on: http://github.com/ceptacle/libcoin/wiki
>> 
>> Join libcoin on twitter: http://twitter.com/libcoin
>> 
>> Download "libcoin Satoshi release": http://github.com/ceptacle/libcoin/zipball/v0.4.0.1
>> 
>> Best regards,
>> 
>> Michael Gronager, PhD
>> Director, Ceptacle
>> Jens Juels Gade 33
>> 2100 Copenhagen E
>> Mobile: +45 31 45 14 01
>> E-mail: gronager at ceptacle.com
>> Web: http://www.ceptacle.com/
>> 
>> 
>> ------------------------------------------------------------------------------
>> Keep Your Developer Skills Current with LearnDevNow!
>> The most comprehensive online learning library for Microsoft developers
>> is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3, MVC3,
>> Metro Style Apps, more. Free future releases when you subscribe now!
>> http://p.sf.net/sfu/learndevnow-d2d
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>> 
> 
> Michael Gronager, PhD
> Director, Ceptacle
> Jens Juels Gade 33
> 2100 Copenhagen E
> Mobile: +45 31 45 14 01
> E-mail: gronager at ceptacle.com
> Web: http://www.ceptacle.com/
> 
> 
> 




From thiagocmartinsc at gmail.com  Fri Feb 24 18:49:40 2012
From: thiagocmartinsc at gmail.com (=?ISO-2022-JP?B?TWFydGlueCAtIBskQiU4JSchPCVgJTobKEI=?=)
Date: Fri, 24 Feb 2012 16:49:40 -0200
Subject: [Bitcoin-development] Announcement: libcoin
In-Reply-To: <C3C58158-0DED-41A1-B4D2-BF746AFE717A@ceptacle.com>
References: <D55C3D18-8286-44E9-B877-6FCE7C05E980@ceptacle.com>
	<CAJSM8J0zqF2=Poknzc8R7TrTJ0DWCMBw2-K9gGhUP_Qf+J6eFg@mail.gmail.com>
	<4FF4A408-F8C9-4A50-8B13-13D3686BEB09@ceptacle.com>
	<CAJSM8J3bZYfpE9EATcYe=79s_RxvGG9BrdRQR9ivwtZnuPsL0w@mail.gmail.com>
	<CAJSM8J2nhoKsOnAeF8qBW3zOfp=sJ25sd8gnw2dMJ3GgkohDjQ@mail.gmail.com>
	<C3C58158-0DED-41A1-B4D2-BF746AFE717A@ceptacle.com>
Message-ID: <CAJSM8J3255LpXbHRF+zEi0QRoM0mwuRP3FSNbSwSyz-_ge=Few@mail.gmail.com>

Hi Michael,

 Thank you for your attention!

 Now, I'm trying to start libcoin's bitcoind using high ports but, it
always try to listen at 8332, no matter what I "say"...

 Look:

$ cat .bitcoin/bitcoin.conf
server=1
daemon=1
rpcuser=libcoin
rpcpassword=LibCoin13
rpcport=10332
port=10333

 But:

/usr/local/bin/bitcoind
Error: Address already in use

terminate called after throwing an instance of 'DbException'
  what():  DbEnv::close: Invalid argument
Aborted

 When I "strace it", I can see:

...
bind(12, {sa_family=AF_INET, sin_port=htons(8333),
sin_addr=inet_addr("0.0.0.0")}, 16) = -1 EADDRINUSE (Address already in use)
...

 I already tried:

/usr/local/bin/bitcoind --rpcport 10332
/usr/local/bin/bitcoind --rpcport=10332

 Without success...

Thanks again!
Thiago

2012/2/24 Michael Gr?nager <gronager at ceptacle.com>

> Hi Thiago,
>
> Forgot to comment on the two latter:
>
> > $ bitcoind getaccountaddress ""
> > HTTP error code: 401
> > Error: couldn't parse reply from server
> >
> > $ bitcoind listaccounts
> > HTTP error code: 401
> > Error: couldn't parse reply from server
> >
>
> 401 = permission denied - you need to setup username / password either on
> the commandline or in the bicoin.conf file to access those commands...
>
> See in the bitcoind.cpp file for commands that you can use with and
> without auth...
>
> Those that contains an "auth" requires auth:
>
>       server.registerMethod(method_ptr(new GetBalance(wallet)), auth);
>
> As opposed to:
>
>       server.registerMethod(method_ptr(new GetInfo(node)));
>
> auth is defined by:
>
>       Auth auth(rpc_user, rpc_pass); // if rpc_user and rpc_pass are not
> set, all authenticated methods becomes disallowed.
>
> so you just experience the case explained in the comment ;) I admit that
> the output could be more readable, though!
>
> /M
>
>
> >
> > Any tips?! lol
> >
> > Thanks!
> > Thiago
> >
> > 2012/2/23 Martinx - ????? <thiagocmartinsc at gmail.com>
> > AWESOME!!!
> >
> > I can compile libcoin at my Ubuntu 11.10... I just need to install:
> >
> > sudo aptitude install libboost1.46-all-dev
> >
> > ...alongside with another already installed dependencies, and now it
> works!!
> >
> > Thank you!
> > Thiago
> >
> > 2012/2/23 Michael Gr?nager <gronager at ceptacle.com>
> > Hi Martinx,
> >
> > Another note:
> >
> > boost 1.42 and openssl 1.0 has a conflict (you will see it when you try
> to compile coinHTTP with that specific combination: sslv2 has been removed
> from openssl, but boost still references it.)
> >
> > You should do a :
> >
> > sudo apt-get upgrade libboost-dev-all
> >
> > to get the 1.46.1 library
> >
> > /M
> >
> >
> > On 23/02/2012, at 18:31, Martinx - ????? wrote:
> >
> >> Hi Michael!
> >>
> >> Thank you for libcoin! It is a awesome evolution for Bitcoin and for
> the CryptoCurrencies as a hole... Thanks!!!
> >>
> >> Anyway, I am unable to compile libcoin under my Ubuntu 11.04. At this
> machine, I have compiled and running Bitcoin (from sources), Namecoin,
> Devcoin, Litecoin, IXcoin and I0coin, all from sources but, when I try to
> compile libcoin, I got:
> >>
> >> ----
> >> user at desk:~/libcoin$ ./configure
> >> -- The C compiler identification is GNU
> >> -- The CXX compiler identification is GNU
> >> -- Check for working C compiler: /usr/bin/gcc
> >> -- Check for working C compiler: /usr/bin/gcc -- works
> >> -- Detecting C compiler ABI info
> >> -- Detecting C compiler ABI info - done
> >> -- Check for working CXX compiler: /usr/bin/c++
> >> -- Check for working CXX compiler: /usr/bin/c++ -- works
> >> -- Detecting CXX compiler ABI info
> >> -- Detecting CXX compiler ABI info - done
> >> -- Looking for include files CMAKE_HAVE_PTHREAD_H
> >> -- Looking for include files CMAKE_HAVE_PTHREAD_H - found
> >> -- Looking for pthread_create in pthreads
> >> -- Looking for pthread_create in pthreads - not found
> >> -- Looking for pthread_create in pthread
> >> -- Looking for pthread_create in pthread - found
> >> -- Found Threads: TRUE
> >> -- Looking for XOpenDisplay in
> /usr/lib/i386-linux-gnu/libX11.so;/usr/lib/i386-linux-gnu/libXext.so
> >> -- Looking for XOpenDisplay in
> /usr/lib/i386-linux-gnu/libX11.so;/usr/lib/i386-linux-gnu/libXext.so - found
> >> -- Looking for gethostbyname
> >> -- Looking for gethostbyname - found
> >> -- Looking for connect
> >> -- Looking for connect - found
> >> -- Looking for remove
> >> -- Looking for remove - found
> >> -- Looking for shmat
> >> -- Looking for shmat - found
> >> -- Looking for IceConnectionNumber in ICE
> >> -- Looking for IceConnectionNumber in ICE - found
> >> -- Found X11: /usr/lib/i386-linux-gnu/libX11.so
> >> -- Boost version: 1.42.0
> >> -- Found the following Boost libraries:
> >> --   date_time
> >> --   regex
> >> --   filesystem
> >> --   system
> >> --   program_options
> >> --   thread
> >> -- Found OpenSSL: /usr/lib/libssl.so;/usr/lib/libcrypto.so
> >> -- Looking for Q_WS_X11
> >> -- Looking for Q_WS_X11 - found
> >> -- Looking for Q_WS_WIN
> >> -- Looking for Q_WS_WIN - not found.
> >> -- Looking for Q_WS_QWS
> >> -- Looking for Q_WS_QWS - not found.
> >> -- Looking for Q_WS_MAC
> >> -- Looking for Q_WS_MAC - not found.
> >> -- Found Qt-Version 4.7.2 (using /usr/bin/qmake)
> >> -- Found wxWidgets: TRUE
> >>
> >> The build system is configured to install libraries to /usr/local/lib
> >> Your applications may not be able to find your installed libraries
> unless you:
> >>    set your LD_LIBRARY_PATH (user specific) or
> >>    update your ld.so configuration (system wide)
> >> You have an ld.so.conf.d directory on your system, so if you wish to
> ensure that
> >> applications find the installed libcoin libraries, system wide, you
> could install an
> >> libcoin specific ld.so configuration with:
> >>    sudo make install_ld_conf
> >>
> >> -- Configuring done
> >> -- Generating done
> >> -- Build files have been written to: /home/user/libcoin
> >> ----
> >>
> >> Now I tried make, without success:
> >>
> >> ----
> >> .....
> >> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0xf):
> undefined reference to `BN_init'
> >> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x1e):
> undefined reference to `BN_copy'
> >> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x38):
> undefined reference to `BN_set_negative'
> >> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x4f):
> undefined reference to `BN_clear_free'
> >> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0xd3):
> undefined reference to `BN_clear_free'
> >> ../../lib/libcoin.a(Script.o): In function `operator<<(CBigNum const&,
> unsigned int)':
> >> Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&, unsigned
> int)]+0x16): undefined reference to `BN_init'
> >> Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&, unsigned
> int)]+0x2c): undefined reference to `BN_lshift'
> >> Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&, unsigned
> int)]+0xad): undefined reference to `BN_clear_free'
> >> ../../lib/libcoin.a(Script.o): In function `operator>>(CBigNum const&,
> unsigned int)':
> >> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned
> int)]+0xf): undefined reference to `BN_init'
> >> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned
> int)]+0x1e): undefined reference to `BN_copy'
> >> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned
> int)]+0x47): undefined reference to `BN_clear_free'
> >> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned
> int)]+0xcb): undefined reference to `BN_clear_free'
> >> ../../lib/libcoin.a(Script.o): In function `operator!=(CBigNum const&,
> CBigNum const&)':
> >> Script.cpp:(.text._ZneRK7CBigNumS1_[operator!=(CBigNum const&, CBigNum
> const&)]+0x14): undefined reference to `BN_cmp'
> >> ../../lib/libcoin.a(Script.o): In function `operator>(CBigNum const&,
> CBigNum const&)':
> >> Script.cpp:(.text._ZgtRK7CBigNumS1_[operator>(CBigNum const&, CBigNum
> const&)]+0x14): undefined reference to `BN_cmp'
> >> ../../lib/libcoin.a(Script.o): In function `uint256
> Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned
> char, std::allocator<unsigned char> > >
> >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char,
> std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned
> char*, std::vector<unsigned char, std::allocator<unsigned char> > >)':
> >>
> Script.cpp:(.text._Z4HashIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEE7uint256T_S8_[uint256
> Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned
> char, std::allocator<unsigned char> > >
> >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char,
> std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned
> char*, std::vector<unsigned char, std::allocator<unsigned char> >
> >)]+0x6d): undefined reference to `SHA256'
> >>
> Script.cpp:(.text._Z4HashIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEE7uint256T_S8_[uint256
> Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned
> char, std::allocator<unsigned char> > >
> >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char,
> std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned
> char*, std::vector<unsigned char, std::allocator<unsigned char> >
> >)]+0xb8): undefined reference to `SHA256'
> >> collect2: ld returned 1 exit status
> >> make[2]: *** [bin/bitcoind] Error 1
> >> make[1]: *** [applications/bitcoind/CMakeFiles/app_bitcoind.dir/all]
> Error 2
> >> make: *** [all] Error 2
> >> -----
> >>
> >> What can I do?!
> >>
> >> Best,
> >> Thiago
> >>
> >>
> >> On 1 February 2012 12:18, Michael Gr?nager <gronager at ceptacle.com>
> wrote:
> >> Dear Bitcoiners,
> >>
> >> libcoin is now in a state ready for its first release, which I would
> like to share with you!
> >>
> >> === libcoin is a crypto currency library based on the bitcoin/bitcoin
> "Satoshi" client. ===
> >>
> >> Copenhagen, Denmark - 1st February 2012 Ceptacle announces the release
> of the first version of the crypto currency library "libcoin" based on the
> bitcoin/bitcoin "Satoshi" client.
> >>
> >> libcoin also maintains a version of bitcoind that is a 100% compatible
> drop-in replacement of the bitcoin/bitcoind client: You can use it on the
> same computer on the same files and you can call it with the same scripts.
> And you can easily extend it without touching the basic bitcoin source
> files.
> >>
> >> The libcoin/bitcoind client downloads the entire block chain 3.5 times
> faster than the bitcoin/bitcoind client. This is less than 90 minutes on a
> modern laptop!
> >>
> >> In libcoin, the Satoshi client code has been completely refactored,
> properly encapsulating classes, removing all globals, moving from threads
> and mutexes to a pure asynchronous approach. Functionalities have been
> divided into logical units and libraries, minimizing dependencies for e.g.
> thin clients.
> >>
> >> libcoin is chain agnostic, all chain (bitcoin, testnet, namecoin,
> litecoin, ...) specific settings are maintained from a single class (Chain)
> and hence experiments with chain settings, mining, security and digital
> currencies for research and educational purposes are easily accessible. See
> the ponzicoin example for how you define your own chain.
> >>
> >> The build system of libcoin is based on CMake and supports builds of
> static and dynamic libraries on Linux, Mac OS X, and Windows.
> >>
> >> The libcoin license is LGPL v. 3. This mean that you can use it in open
> source as well as in commercial projects, but improvements should go back
> into the libcoin library.
> >>
> >> ======
> >>
> >> Read more on libcoin on: http://github.com/ceptacle/libcoin/wiki
> >>
> >> Join libcoin on twitter: http://twitter.com/libcoin
> >>
> >> Download "libcoin Satoshi release":
> http://github.com/ceptacle/libcoin/zipball/v0.4.0.1
> >>
> >> Best regards,
> >>
> >> Michael Gronager, PhD
> >> Director, Ceptacle
> >> Jens Juels Gade 33
> >> 2100 Copenhagen E
> >> Mobile: +45 31 45 14 01
> >> E-mail: gronager at ceptacle.com
> >> Web: http://www.ceptacle.com/
> >>
> >>
> >>
> ------------------------------------------------------------------------------
> >> Keep Your Developer Skills Current with LearnDevNow!
> >> The most comprehensive online learning library for Microsoft developers
> >> is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3, MVC3,
> >> Metro Style Apps, more. Free future releases when you subscribe now!
> >> http://p.sf.net/sfu/learndevnow-d2d
> >> _______________________________________________
> >> Bitcoin-development mailing list
> >> Bitcoin-development at lists.sourceforge.net
> >> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> >>
> >
> > Michael Gronager, PhD
> > Director, Ceptacle
> > Jens Juels Gade 33
> > 2100 Copenhagen E
> > Mobile: +45 31 45 14 01
> > E-mail: gronager at ceptacle.com
> > Web: http://www.ceptacle.com/
> >
> >
> >
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120224/19e15bb1/attachment.html>

From gronager at ceptacle.com  Fri Feb 24 19:40:00 2012
From: gronager at ceptacle.com (=?iso-8859-1?Q?Michael_Gr=F8nager?=)
Date: Fri, 24 Feb 2012 20:40:00 +0100
Subject: [Bitcoin-development] Announcement: libcoin
In-Reply-To: <CAJSM8J3255LpXbHRF+zEi0QRoM0mwuRP3FSNbSwSyz-_ge=Few@mail.gmail.com>
References: <D55C3D18-8286-44E9-B877-6FCE7C05E980@ceptacle.com>
	<CAJSM8J0zqF2=Poknzc8R7TrTJ0DWCMBw2-K9gGhUP_Qf+J6eFg@mail.gmail.com>
	<4FF4A408-F8C9-4A50-8B13-13D3686BEB09@ceptacle.com>
	<CAJSM8J3bZYfpE9EATcYe=79s_RxvGG9BrdRQR9ivwtZnuPsL0w@mail.gmail.com>
	<CAJSM8J2nhoKsOnAeF8qBW3zOfp=sJ25sd8gnw2dMJ3GgkohDjQ@mail.gmail.com>
	<C3C58158-0DED-41A1-B4D2-BF746AFE717A@ceptacle.com>
	<CAJSM8J3255LpXbHRF+zEi0QRoM0mwuRP3FSNbSwSyz-_ge=Few@mail.gmail.com>
Message-ID: <B1E06C88-4BE4-48BD-98A6-C273069B6BA1@ceptacle.com>

Just copied your bitcoin.conf file to my system and the server connects just fine to RPC on 10332
and I get using curl:

MacGronager:bin gronager$ curl --data-binary '{"jsonrpc": "2.0", "id":"curltest", "method": "getblockcount", "params": [] }' -H 'Content-Type: application/json' http://127.0.0.1:10332
{"jsonrpc":"2.0","result":168299,"error":null,"id":"curltest"}

Didn't do a retest on linux, but I am quite certain that it works there well as I had it running for weeks on port 9332 on amazon.

However, the "port" parameter will not work

> ...
> bind(12, {sa_family=AF_INET, sin_port=htons(8333), sin_addr=inet_addr("0.0.0.0")}, 16) = -1 EADDRINUSE (Address already in use)
> ...

and as you can see it connects to 8333 - that for the bitcoin protocol.

I havn't implemented "port" (have a look at the possible options in bitcoind.cpp). It was not on the official help list in bitcoind 0.4.0 (see init.cpp or do a bitcoin/bitcoind -help). But, I can implement it over the weekend if your need it.

I also tested the bitcoind --rpcport=10332 and it worked too using the commandline - both running as server and client.

/M


>  I already tried:
> 
> /usr/local/bin/bitcoind --rpcport 10332
> /usr/local/bin/bitcoind --rpcport=10332
> 
>  Without success...
> 
> Thanks again!
> Thiago
> 
> 2012/2/24 Michael Gr?nager <gronager at ceptacle.com>
> Hi Thiago,
> 
> Forgot to comment on the two latter:
> 
> > $ bitcoind getaccountaddress ""
> > HTTP error code: 401
> > Error: couldn't parse reply from server
> >
> > $ bitcoind listaccounts
> > HTTP error code: 401
> > Error: couldn't parse reply from server
> >
> 
> 401 = permission denied - you need to setup username / password either on the commandline or in the bicoin.conf file to access those commands...
> 
> See in the bitcoind.cpp file for commands that you can use with and without auth...
> 
> Those that contains an "auth" requires auth:
> 
>       server.registerMethod(method_ptr(new GetBalance(wallet)), auth);
> 
> As opposed to:
> 
>       server.registerMethod(method_ptr(new GetInfo(node)));
> 
> auth is defined by:
> 
>       Auth auth(rpc_user, rpc_pass); // if rpc_user and rpc_pass are not set, all authenticated methods becomes disallowed.
> 
> so you just experience the case explained in the comment ;) I admit that the output could be more readable, though!
> 
> /M
> 
> 
> >
> > Any tips?! lol
> >
> > Thanks!
> > Thiago
> >
> > 2012/2/23 Martinx - ????? <thiagocmartinsc at gmail.com>
> > AWESOME!!!
> >
> > I can compile libcoin at my Ubuntu 11.10... I just need to install:
> >
> > sudo aptitude install libboost1.46-all-dev
> >
> > ...alongside with another already installed dependencies, and now it works!!
> >
> > Thank you!
> > Thiago
> >
> > 2012/2/23 Michael Gr?nager <gronager at ceptacle.com>
> > Hi Martinx,
> >
> > Another note:
> >
> > boost 1.42 and openssl 1.0 has a conflict (you will see it when you try to compile coinHTTP with that specific combination: sslv2 has been removed from openssl, but boost still references it.)
> >
> > You should do a :
> >
> > sudo apt-get upgrade libboost-dev-all
> >
> > to get the 1.46.1 library
> >
> > /M
> >
> >
> > On 23/02/2012, at 18:31, Martinx - ????? wrote:
> >
> >> Hi Michael!
> >>
> >> Thank you for libcoin! It is a awesome evolution for Bitcoin and for the CryptoCurrencies as a hole... Thanks!!!
> >>
> >> Anyway, I am unable to compile libcoin under my Ubuntu 11.04. At this machine, I have compiled and running Bitcoin (from sources), Namecoin, Devcoin, Litecoin, IXcoin and I0coin, all from sources but, when I try to compile libcoin, I got:
> >>
> >> ----
> >> user at desk:~/libcoin$ ./configure
> >> -- The C compiler identification is GNU
> >> -- The CXX compiler identification is GNU
> >> -- Check for working C compiler: /usr/bin/gcc
> >> -- Check for working C compiler: /usr/bin/gcc -- works
> >> -- Detecting C compiler ABI info
> >> -- Detecting C compiler ABI info - done
> >> -- Check for working CXX compiler: /usr/bin/c++
> >> -- Check for working CXX compiler: /usr/bin/c++ -- works
> >> -- Detecting CXX compiler ABI info
> >> -- Detecting CXX compiler ABI info - done
> >> -- Looking for include files CMAKE_HAVE_PTHREAD_H
> >> -- Looking for include files CMAKE_HAVE_PTHREAD_H - found
> >> -- Looking for pthread_create in pthreads
> >> -- Looking for pthread_create in pthreads - not found
> >> -- Looking for pthread_create in pthread
> >> -- Looking for pthread_create in pthread - found
> >> -- Found Threads: TRUE
> >> -- Looking for XOpenDisplay in /usr/lib/i386-linux-gnu/libX11.so;/usr/lib/i386-linux-gnu/libXext.so
> >> -- Looking for XOpenDisplay in /usr/lib/i386-linux-gnu/libX11.so;/usr/lib/i386-linux-gnu/libXext.so - found
> >> -- Looking for gethostbyname
> >> -- Looking for gethostbyname - found
> >> -- Looking for connect
> >> -- Looking for connect - found
> >> -- Looking for remove
> >> -- Looking for remove - found
> >> -- Looking for shmat
> >> -- Looking for shmat - found
> >> -- Looking for IceConnectionNumber in ICE
> >> -- Looking for IceConnectionNumber in ICE - found
> >> -- Found X11: /usr/lib/i386-linux-gnu/libX11.so
> >> -- Boost version: 1.42.0
> >> -- Found the following Boost libraries:
> >> --   date_time
> >> --   regex
> >> --   filesystem
> >> --   system
> >> --   program_options
> >> --   thread
> >> -- Found OpenSSL: /usr/lib/libssl.so;/usr/lib/libcrypto.so
> >> -- Looking for Q_WS_X11
> >> -- Looking for Q_WS_X11 - found
> >> -- Looking for Q_WS_WIN
> >> -- Looking for Q_WS_WIN - not found.
> >> -- Looking for Q_WS_QWS
> >> -- Looking for Q_WS_QWS - not found.
> >> -- Looking for Q_WS_MAC
> >> -- Looking for Q_WS_MAC - not found.
> >> -- Found Qt-Version 4.7.2 (using /usr/bin/qmake)
> >> -- Found wxWidgets: TRUE
> >>
> >> The build system is configured to install libraries to /usr/local/lib
> >> Your applications may not be able to find your installed libraries unless you:
> >>    set your LD_LIBRARY_PATH (user specific) or
> >>    update your ld.so configuration (system wide)
> >> You have an ld.so.conf.d directory on your system, so if you wish to ensure that
> >> applications find the installed libcoin libraries, system wide, you could install an
> >> libcoin specific ld.so configuration with:
> >>    sudo make install_ld_conf
> >>
> >> -- Configuring done
> >> -- Generating done
> >> -- Build files have been written to: /home/user/libcoin
> >> ----
> >>
> >> Now I tried make, without success:
> >>
> >> ----
> >> .....
> >> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0xf): undefined reference to `BN_init'
> >> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x1e): undefined reference to `BN_copy'
> >> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x38): undefined reference to `BN_set_negative'
> >> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x4f): undefined reference to `BN_clear_free'
> >> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0xd3): undefined reference to `BN_clear_free'
> >> ../../lib/libcoin.a(Script.o): In function `operator<<(CBigNum const&, unsigned int)':
> >> Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&, unsigned int)]+0x16): undefined reference to `BN_init'
> >> Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&, unsigned int)]+0x2c): undefined reference to `BN_lshift'
> >> Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&, unsigned int)]+0xad): undefined reference to `BN_clear_free'
> >> ../../lib/libcoin.a(Script.o): In function `operator>>(CBigNum const&, unsigned int)':
> >> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned int)]+0xf): undefined reference to `BN_init'
> >> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned int)]+0x1e): undefined reference to `BN_copy'
> >> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned int)]+0x47): undefined reference to `BN_clear_free'
> >> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned int)]+0xcb): undefined reference to `BN_clear_free'
> >> ../../lib/libcoin.a(Script.o): In function `operator!=(CBigNum const&, CBigNum const&)':
> >> Script.cpp:(.text._ZneRK7CBigNumS1_[operator!=(CBigNum const&, CBigNum const&)]+0x14): undefined reference to `BN_cmp'
> >> ../../lib/libcoin.a(Script.o): In function `operator>(CBigNum const&, CBigNum const&)':
> >> Script.cpp:(.text._ZgtRK7CBigNumS1_[operator>(CBigNum const&, CBigNum const&)]+0x14): undefined reference to `BN_cmp'
> >> ../../lib/libcoin.a(Script.o): In function `uint256 Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > > >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >)':
> >> Script.cpp:(.text._Z4HashIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEE7uint256T_S8_[uint256 Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > > >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >)]+0x6d): undefined reference to `SHA256'
> >> Script.cpp:(.text._Z4HashIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEE7uint256T_S8_[uint256 Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > > >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >)]+0xb8): undefined reference to `SHA256'
> >> collect2: ld returned 1 exit status
> >> make[2]: *** [bin/bitcoind] Error 1
> >> make[1]: *** [applications/bitcoind/CMakeFiles/app_bitcoind.dir/all] Error 2
> >> make: *** [all] Error 2
> >> -----
> >>
> >> What can I do?!
> >>
> >> Best,
> >> Thiago
> >>
> >>
> >> On 1 February 2012 12:18, Michael Gr?nager <gronager at ceptacle.com> wrote:
> >> Dear Bitcoiners,
> >>
> >> libcoin is now in a state ready for its first release, which I would like to share with you!
> >>
> >> === libcoin is a crypto currency library based on the bitcoin/bitcoin "Satoshi" client. ===
> >>
> >> Copenhagen, Denmark - 1st February 2012 Ceptacle announces the release of the first version of the crypto currency library "libcoin" based on the bitcoin/bitcoin "Satoshi" client.
> >>
> >> libcoin also maintains a version of bitcoind that is a 100% compatible drop-in replacement of the bitcoin/bitcoind client: You can use it on the same computer on the same files and you can call it with the same scripts. And you can easily extend it without touching the basic bitcoin source files.
> >>
> >> The libcoin/bitcoind client downloads the entire block chain 3.5 times faster than the bitcoin/bitcoind client. This is less than 90 minutes on a modern laptop!
> >>
> >> In libcoin, the Satoshi client code has been completely refactored, properly encapsulating classes, removing all globals, moving from threads and mutexes to a pure asynchronous approach. Functionalities have been divided into logical units and libraries, minimizing dependencies for e.g. thin clients.
> >>
> >> libcoin is chain agnostic, all chain (bitcoin, testnet, namecoin, litecoin, ...) specific settings are maintained from a single class (Chain) and hence experiments with chain settings, mining, security and digital currencies for research and educational purposes are easily accessible. See the ponzicoin example for how you define your own chain.
> >>
> >> The build system of libcoin is based on CMake and supports builds of static and dynamic libraries on Linux, Mac OS X, and Windows.
> >>
> >> The libcoin license is LGPL v. 3. This mean that you can use it in open source as well as in commercial projects, but improvements should go back into the libcoin library.
> >>
> >> ======
> >>
> >> Read more on libcoin on: http://github.com/ceptacle/libcoin/wiki
> >>
> >> Join libcoin on twitter: http://twitter.com/libcoin
> >>
> >> Download "libcoin Satoshi release": http://github.com/ceptacle/libcoin/zipball/v0.4.0.1
> >>
> >> Best regards,
> >>
> >> Michael Gronager, PhD
> >> Director, Ceptacle
> >> Jens Juels Gade 33
> >> 2100 Copenhagen E
> >> Mobile: +45 31 45 14 01
> >> E-mail: gronager at ceptacle.com
> >> Web: http://www.ceptacle.com/
> >>
> >>
> >> ------------------------------------------------------------------------------
> >> Keep Your Developer Skills Current with LearnDevNow!
> >> The most comprehensive online learning library for Microsoft developers
> >> is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3, MVC3,
> >> Metro Style Apps, more. Free future releases when you subscribe now!
> >> http://p.sf.net/sfu/learndevnow-d2d
> >> _______________________________________________
> >> Bitcoin-development mailing list
> >> Bitcoin-development at lists.sourceforge.net
> >> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> >>
> >
> > Michael Gronager, PhD
> > Director, Ceptacle
> > Jens Juels Gade 33
> > 2100 Copenhagen E
> > Mobile: +45 31 45 14 01
> > E-mail: gronager at ceptacle.com
> > Web: http://www.ceptacle.com/
> >
> >
> >
> 
> 

Michael Gronager, PhD
Director, Ceptacle
Jens Juels Gade 33
2100 Copenhagen E
Mobile: +45 31 45 14 01
E-mail: gronager at ceptacle.com
Web: http://www.ceptacle.com/




From gronager at ceptacle.com  Fri Feb 24 19:57:40 2012
From: gronager at ceptacle.com (=?iso-8859-1?Q?Michael_Gr=F8nager?=)
Date: Fri, 24 Feb 2012 20:57:40 +0100
Subject: [Bitcoin-development] Announcement: libcoin
In-Reply-To: <CAJSM8J3255LpXbHRF+zEi0QRoM0mwuRP3FSNbSwSyz-_ge=Few@mail.gmail.com>
References: <D55C3D18-8286-44E9-B877-6FCE7C05E980@ceptacle.com>
	<CAJSM8J0zqF2=Poknzc8R7TrTJ0DWCMBw2-K9gGhUP_Qf+J6eFg@mail.gmail.com>
	<4FF4A408-F8C9-4A50-8B13-13D3686BEB09@ceptacle.com>
	<CAJSM8J3bZYfpE9EATcYe=79s_RxvGG9BrdRQR9ivwtZnuPsL0w@mail.gmail.com>
	<CAJSM8J2nhoKsOnAeF8qBW3zOfp=sJ25sd8gnw2dMJ3GgkohDjQ@mail.gmail.com>
	<C3C58158-0DED-41A1-B4D2-BF746AFE717A@ceptacle.com>
	<CAJSM8J3255LpXbHRF+zEi0QRoM0mwuRP3FSNbSwSyz-_ge=Few@mail.gmail.com>
Message-ID: <3C518667-C2A6-4D1F-988D-888964925489@ceptacle.com>

OK - didn't took the weekend:

support for "port" is on github now :)

Only took two lines:

            ("port", value<unsigned short>(&port)->default_value(8333), "Listen on specified port for the p2p protocol")

and using the port option in the Node constructor (was there already):

        Node node(chain, data_dir, args.count("nolisten") ? "" : "0.0.0.0", lexical_cast<string>(port)); // it is also here we specify the use of a proxy!

/M



On 24/02/2012, at 19:49, Martinx - ????? wrote:

> Hi Michael,
> 
>  Thank you for your attention!
> 
>  Now, I'm trying to start libcoin's bitcoind using high ports but, it always try to listen at 8332, no matter what I "say"...
> 
>  Look:
> 
> $ cat .bitcoin/bitcoin.conf 
> server=1
> daemon=1
> rpcuser=libcoin
> rpcpassword=LibCoin13
> rpcport=10332
> port=10333
> 
>  But:
> 
> /usr/local/bin/bitcoind
> Error: Address already in use
> 
> terminate called after throwing an instance of 'DbException'
>   what():  DbEnv::close: Invalid argument
> Aborted
> 
>  When I "strace it", I can see:
> 
> ...
> bind(12, {sa_family=AF_INET, sin_port=htons(8333), sin_addr=inet_addr("0.0.0.0")}, 16) = -1 EADDRINUSE (Address already in use)
> ...
> 
>  I already tried:
> 
> /usr/local/bin/bitcoind --rpcport 10332
> /usr/local/bin/bitcoind --rpcport=10332
> 
>  Without success...
> 
> Thanks again!
> Thiago
> 
> 2012/2/24 Michael Gr?nager <gronager at ceptacle.com>
> Hi Thiago,
> 
> Forgot to comment on the two latter:
> 
> > $ bitcoind getaccountaddress ""
> > HTTP error code: 401
> > Error: couldn't parse reply from server
> >
> > $ bitcoind listaccounts
> > HTTP error code: 401
> > Error: couldn't parse reply from server
> >
> 
> 401 = permission denied - you need to setup username / password either on the commandline or in the bicoin.conf file to access those commands...
> 
> See in the bitcoind.cpp file for commands that you can use with and without auth...
> 
> Those that contains an "auth" requires auth:
> 
>       server.registerMethod(method_ptr(new GetBalance(wallet)), auth);
> 
> As opposed to:
> 
>       server.registerMethod(method_ptr(new GetInfo(node)));
> 
> auth is defined by:
> 
>       Auth auth(rpc_user, rpc_pass); // if rpc_user and rpc_pass are not set, all authenticated methods becomes disallowed.
> 
> so you just experience the case explained in the comment ;) I admit that the output could be more readable, though!
> 
> /M
> 
> 
> >
> > Any tips?! lol
> >
> > Thanks!
> > Thiago
> >
> > 2012/2/23 Martinx - ????? <thiagocmartinsc at gmail.com>
> > AWESOME!!!
> >
> > I can compile libcoin at my Ubuntu 11.10... I just need to install:
> >
> > sudo aptitude install libboost1.46-all-dev
> >
> > ...alongside with another already installed dependencies, and now it works!!
> >
> > Thank you!
> > Thiago
> >
> > 2012/2/23 Michael Gr?nager <gronager at ceptacle.com>
> > Hi Martinx,
> >
> > Another note:
> >
> > boost 1.42 and openssl 1.0 has a conflict (you will see it when you try to compile coinHTTP with that specific combination: sslv2 has been removed from openssl, but boost still references it.)
> >
> > You should do a :
> >
> > sudo apt-get upgrade libboost-dev-all
> >
> > to get the 1.46.1 library
> >
> > /M
> >
> >
> > On 23/02/2012, at 18:31, Martinx - ????? wrote:
> >
> >> Hi Michael!
> >>
> >> Thank you for libcoin! It is a awesome evolution for Bitcoin and for the CryptoCurrencies as a hole... Thanks!!!
> >>
> >> Anyway, I am unable to compile libcoin under my Ubuntu 11.04. At this machine, I have compiled and running Bitcoin (from sources), Namecoin, Devcoin, Litecoin, IXcoin and I0coin, all from sources but, when I try to compile libcoin, I got:
> >>
> >> ----
> >> user at desk:~/libcoin$ ./configure
> >> -- The C compiler identification is GNU
> >> -- The CXX compiler identification is GNU
> >> -- Check for working C compiler: /usr/bin/gcc
> >> -- Check for working C compiler: /usr/bin/gcc -- works
> >> -- Detecting C compiler ABI info
> >> -- Detecting C compiler ABI info - done
> >> -- Check for working CXX compiler: /usr/bin/c++
> >> -- Check for working CXX compiler: /usr/bin/c++ -- works
> >> -- Detecting CXX compiler ABI info
> >> -- Detecting CXX compiler ABI info - done
> >> -- Looking for include files CMAKE_HAVE_PTHREAD_H
> >> -- Looking for include files CMAKE_HAVE_PTHREAD_H - found
> >> -- Looking for pthread_create in pthreads
> >> -- Looking for pthread_create in pthreads - not found
> >> -- Looking for pthread_create in pthread
> >> -- Looking for pthread_create in pthread - found
> >> -- Found Threads: TRUE
> >> -- Looking for XOpenDisplay in /usr/lib/i386-linux-gnu/libX11.so;/usr/lib/i386-linux-gnu/libXext.so
> >> -- Looking for XOpenDisplay in /usr/lib/i386-linux-gnu/libX11.so;/usr/lib/i386-linux-gnu/libXext.so - found
> >> -- Looking for gethostbyname
> >> -- Looking for gethostbyname - found
> >> -- Looking for connect
> >> -- Looking for connect - found
> >> -- Looking for remove
> >> -- Looking for remove - found
> >> -- Looking for shmat
> >> -- Looking for shmat - found
> >> -- Looking for IceConnectionNumber in ICE
> >> -- Looking for IceConnectionNumber in ICE - found
> >> -- Found X11: /usr/lib/i386-linux-gnu/libX11.so
> >> -- Boost version: 1.42.0
> >> -- Found the following Boost libraries:
> >> --   date_time
> >> --   regex
> >> --   filesystem
> >> --   system
> >> --   program_options
> >> --   thread
> >> -- Found OpenSSL: /usr/lib/libssl.so;/usr/lib/libcrypto.so
> >> -- Looking for Q_WS_X11
> >> -- Looking for Q_WS_X11 - found
> >> -- Looking for Q_WS_WIN
> >> -- Looking for Q_WS_WIN - not found.
> >> -- Looking for Q_WS_QWS
> >> -- Looking for Q_WS_QWS - not found.
> >> -- Looking for Q_WS_MAC
> >> -- Looking for Q_WS_MAC - not found.
> >> -- Found Qt-Version 4.7.2 (using /usr/bin/qmake)
> >> -- Found wxWidgets: TRUE
> >>
> >> The build system is configured to install libraries to /usr/local/lib
> >> Your applications may not be able to find your installed libraries unless you:
> >>    set your LD_LIBRARY_PATH (user specific) or
> >>    update your ld.so configuration (system wide)
> >> You have an ld.so.conf.d directory on your system, so if you wish to ensure that
> >> applications find the installed libcoin libraries, system wide, you could install an
> >> libcoin specific ld.so configuration with:
> >>    sudo make install_ld_conf
> >>
> >> -- Configuring done
> >> -- Generating done
> >> -- Build files have been written to: /home/user/libcoin
> >> ----
> >>
> >> Now I tried make, without success:
> >>
> >> ----
> >> .....
> >> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0xf): undefined reference to `BN_init'
> >> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x1e): undefined reference to `BN_copy'
> >> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x38): undefined reference to `BN_set_negative'
> >> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x4f): undefined reference to `BN_clear_free'
> >> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0xd3): undefined reference to `BN_clear_free'
> >> ../../lib/libcoin.a(Script.o): In function `operator<<(CBigNum const&, unsigned int)':
> >> Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&, unsigned int)]+0x16): undefined reference to `BN_init'
> >> Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&, unsigned int)]+0x2c): undefined reference to `BN_lshift'
> >> Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&, unsigned int)]+0xad): undefined reference to `BN_clear_free'
> >> ../../lib/libcoin.a(Script.o): In function `operator>>(CBigNum const&, unsigned int)':
> >> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned int)]+0xf): undefined reference to `BN_init'
> >> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned int)]+0x1e): undefined reference to `BN_copy'
> >> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned int)]+0x47): undefined reference to `BN_clear_free'
> >> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned int)]+0xcb): undefined reference to `BN_clear_free'
> >> ../../lib/libcoin.a(Script.o): In function `operator!=(CBigNum const&, CBigNum const&)':
> >> Script.cpp:(.text._ZneRK7CBigNumS1_[operator!=(CBigNum const&, CBigNum const&)]+0x14): undefined reference to `BN_cmp'
> >> ../../lib/libcoin.a(Script.o): In function `operator>(CBigNum const&, CBigNum const&)':
> >> Script.cpp:(.text._ZgtRK7CBigNumS1_[operator>(CBigNum const&, CBigNum const&)]+0x14): undefined reference to `BN_cmp'
> >> ../../lib/libcoin.a(Script.o): In function `uint256 Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > > >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >)':
> >> Script.cpp:(.text._Z4HashIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEE7uint256T_S8_[uint256 Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > > >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >)]+0x6d): undefined reference to `SHA256'
> >> Script.cpp:(.text._Z4HashIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEE7uint256T_S8_[uint256 Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > > >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >)]+0xb8): undefined reference to `SHA256'
> >> collect2: ld returned 1 exit status
> >> make[2]: *** [bin/bitcoind] Error 1
> >> make[1]: *** [applications/bitcoind/CMakeFiles/app_bitcoind.dir/all] Error 2
> >> make: *** [all] Error 2
> >> -----
> >>
> >> What can I do?!
> >>
> >> Best,
> >> Thiago
> >>
> >>
> >> On 1 February 2012 12:18, Michael Gr?nager <gronager at ceptacle.com> wrote:
> >> Dear Bitcoiners,
> >>
> >> libcoin is now in a state ready for its first release, which I would like to share with you!
> >>
> >> === libcoin is a crypto currency library based on the bitcoin/bitcoin "Satoshi" client. ===
> >>
> >> Copenhagen, Denmark - 1st February 2012 Ceptacle announces the release of the first version of the crypto currency library "libcoin" based on the bitcoin/bitcoin "Satoshi" client.
> >>
> >> libcoin also maintains a version of bitcoind that is a 100% compatible drop-in replacement of the bitcoin/bitcoind client: You can use it on the same computer on the same files and you can call it with the same scripts. And you can easily extend it without touching the basic bitcoin source files.
> >>
> >> The libcoin/bitcoind client downloads the entire block chain 3.5 times faster than the bitcoin/bitcoind client. This is less than 90 minutes on a modern laptop!
> >>
> >> In libcoin, the Satoshi client code has been completely refactored, properly encapsulating classes, removing all globals, moving from threads and mutexes to a pure asynchronous approach. Functionalities have been divided into logical units and libraries, minimizing dependencies for e.g. thin clients.
> >>
> >> libcoin is chain agnostic, all chain (bitcoin, testnet, namecoin, litecoin, ...) specific settings are maintained from a single class (Chain) and hence experiments with chain settings, mining, security and digital currencies for research and educational purposes are easily accessible. See the ponzicoin example for how you define your own chain.
> >>
> >> The build system of libcoin is based on CMake and supports builds of static and dynamic libraries on Linux, Mac OS X, and Windows.
> >>
> >> The libcoin license is LGPL v. 3. This mean that you can use it in open source as well as in commercial projects, but improvements should go back into the libcoin library.
> >>
> >> ======
> >>
> >> Read more on libcoin on: http://github.com/ceptacle/libcoin/wiki
> >>
> >> Join libcoin on twitter: http://twitter.com/libcoin
> >>
> >> Download "libcoin Satoshi release": http://github.com/ceptacle/libcoin/zipball/v0.4.0.1
> >>
> >> Best regards,
> >>
> >> Michael Gronager, PhD
> >> Director, Ceptacle
> >> Jens Juels Gade 33
> >> 2100 Copenhagen E
> >> Mobile: +45 31 45 14 01
> >> E-mail: gronager at ceptacle.com
> >> Web: http://www.ceptacle.com/
> >>
> >>
> >> ------------------------------------------------------------------------------
> >> Keep Your Developer Skills Current with LearnDevNow!
> >> The most comprehensive online learning library for Microsoft developers
> >> is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3, MVC3,
> >> Metro Style Apps, more. Free future releases when you subscribe now!
> >> http://p.sf.net/sfu/learndevnow-d2d
> >> _______________________________________________
> >> Bitcoin-development mailing list
> >> Bitcoin-development at lists.sourceforge.net
> >> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> >>
> >
> > Michael Gronager, PhD
> > Director, Ceptacle
> > Jens Juels Gade 33
> > 2100 Copenhagen E
> > Mobile: +45 31 45 14 01
> > E-mail: gronager at ceptacle.com
> > Web: http://www.ceptacle.com/
> >
> >
> >
> 
> 

Michael Gronager, PhD
Director, Ceptacle
Jens Juels Gade 33
2100 Copenhagen E
Mobile: +45 31 45 14 01
E-mail: gronager at ceptacle.com
Web: http://www.ceptacle.com/




From zgenjix at yahoo.com  Fri Feb 24 22:15:37 2012
From: zgenjix at yahoo.com (Amir Taaki)
Date: Fri, 24 Feb 2012 14:15:37 -0800 (PST)
Subject: [Bitcoin-development] Building BDB on MingW
Message-ID: <1330121737.13951.YahooMailNeo@web121006.mail.ne1.yahoo.com>

I followed the instructions from build-msw.txt and am getting the same issue from here:

https://bitcointalk.org/index.php?topic=45507.0


MSYS shell:

cd /c/db-4.8.30.NC-mgw/build_unix
sh ../dist/configure --enable-mingw --enable-cxx
make

$ make

./libtool --mode=compile gcc -c -I. -I../dist/.. ?-O3 ?../dist/../mutex/mut_win32.c
libtool: compile: ?gcc -c -I. -I../dist/.. -O3 ../dist/../mutex/mut_win32.c ?-DDLL_EXPORT -DPIC -o .libs/mut_win32.o
In file included from ./db_int.h:886:0,
? ? ? ? ? ? ? ? ?from ../dist/../mutex/mut_win32.c:12:
../dist/../dbinc/repmgr.h:502:13: error: two or more data types in declaration specifiers
../dist/../dbinc/repmgr.h:502:1: warning: useless type name in empty declaration
make: *** [mut_win32.lo] Error 1[/quote]

Any ideas? Sadly the proposed fix in that thread didn't work.



From thiagocmartinsc at gmail.com  Sat Feb 25 02:11:29 2012
From: thiagocmartinsc at gmail.com (=?ISO-2022-JP?B?TWFydGlueCAtIBskQiU4JSchPCVgJTobKEI=?=)
Date: Sat, 25 Feb 2012 00:11:29 -0200
Subject: [Bitcoin-development] Announcement: libcoin
In-Reply-To: <3C518667-C2A6-4D1F-988D-888964925489@ceptacle.com>
References: <D55C3D18-8286-44E9-B877-6FCE7C05E980@ceptacle.com>
	<CAJSM8J0zqF2=Poknzc8R7TrTJ0DWCMBw2-K9gGhUP_Qf+J6eFg@mail.gmail.com>
	<4FF4A408-F8C9-4A50-8B13-13D3686BEB09@ceptacle.com>
	<CAJSM8J3bZYfpE9EATcYe=79s_RxvGG9BrdRQR9ivwtZnuPsL0w@mail.gmail.com>
	<CAJSM8J2nhoKsOnAeF8qBW3zOfp=sJ25sd8gnw2dMJ3GgkohDjQ@mail.gmail.com>
	<C3C58158-0DED-41A1-B4D2-BF746AFE717A@ceptacle.com>
	<CAJSM8J3255LpXbHRF+zEi0QRoM0mwuRP3FSNbSwSyz-_ge=Few@mail.gmail.com>
	<3C518667-C2A6-4D1F-988D-888964925489@ceptacle.com>
Message-ID: <CAJSM8J2-+uHKJg9xjqtz785HBNY8wXtJLnw70jP0_HgNspx4Tg@mail.gmail.com>

Thank you!!!

It is all working now! Except "help"...

Nice work Michael!!

Best,
Thiago

2012/2/24 Michael Gr?nager <gronager at ceptacle.com>

> OK - didn't took the weekend:
>
> support for "port" is on github now :)
>
> Only took two lines:
>
>            ("port", value<unsigned short>(&port)->default_value(8333),
> "Listen on specified port for the p2p protocol")
>
> and using the port option in the Node constructor (was there already):
>
>        Node node(chain, data_dir, args.count("nolisten") ? "" : "0.0.0.0",
> lexical_cast<string>(port)); // it is also here we specify the use of a
> proxy!
>
> /M
>
>
>
> On 24/02/2012, at 19:49, Martinx - ????? wrote:
>
> > Hi Michael,
> >
> >  Thank you for your attention!
> >
> >  Now, I'm trying to start libcoin's bitcoind using high ports but, it
> always try to listen at 8332, no matter what I "say"...
> >
> >  Look:
> >
> > $ cat .bitcoin/bitcoin.conf
> > server=1
> > daemon=1
> > rpcuser=libcoin
> > rpcpassword=LibCoin13
> > rpcport=10332
> > port=10333
> >
> >  But:
> >
> > /usr/local/bin/bitcoind
> > Error: Address already in use
> >
> > terminate called after throwing an instance of 'DbException'
> >   what():  DbEnv::close: Invalid argument
> > Aborted
> >
> >  When I "strace it", I can see:
> >
> > ...
> > bind(12, {sa_family=AF_INET, sin_port=htons(8333),
> sin_addr=inet_addr("0.0.0.0")}, 16) = -1 EADDRINUSE (Address already in use)
> > ...
> >
> >  I already tried:
> >
> > /usr/local/bin/bitcoind --rpcport 10332
> > /usr/local/bin/bitcoind --rpcport=10332
> >
> >  Without success...
> >
> > Thanks again!
> > Thiago
> >
> > 2012/2/24 Michael Gr?nager <gronager at ceptacle.com>
> > Hi Thiago,
> >
> > Forgot to comment on the two latter:
> >
> > > $ bitcoind getaccountaddress ""
> > > HTTP error code: 401
> > > Error: couldn't parse reply from server
> > >
> > > $ bitcoind listaccounts
> > > HTTP error code: 401
> > > Error: couldn't parse reply from server
> > >
> >
> > 401 = permission denied - you need to setup username / password either
> on the commandline or in the bicoin.conf file to access those commands...
> >
> > See in the bitcoind.cpp file for commands that you can use with and
> without auth...
> >
> > Those that contains an "auth" requires auth:
> >
> >       server.registerMethod(method_ptr(new GetBalance(wallet)), auth);
> >
> > As opposed to:
> >
> >       server.registerMethod(method_ptr(new GetInfo(node)));
> >
> > auth is defined by:
> >
> >       Auth auth(rpc_user, rpc_pass); // if rpc_user and rpc_pass are not
> set, all authenticated methods becomes disallowed.
> >
> > so you just experience the case explained in the comment ;) I admit that
> the output could be more readable, though!
> >
> > /M
> >
> >
> > >
> > > Any tips?! lol
> > >
> > > Thanks!
> > > Thiago
> > >
> > > 2012/2/23 Martinx - ????? <thiagocmartinsc at gmail.com>
> > > AWESOME!!!
> > >
> > > I can compile libcoin at my Ubuntu 11.10... I just need to install:
> > >
> > > sudo aptitude install libboost1.46-all-dev
> > >
> > > ...alongside with another already installed dependencies, and now it
> works!!
> > >
> > > Thank you!
> > > Thiago
> > >
> > > 2012/2/23 Michael Gr?nager <gronager at ceptacle.com>
> > > Hi Martinx,
> > >
> > > Another note:
> > >
> > > boost 1.42 and openssl 1.0 has a conflict (you will see it when you
> try to compile coinHTTP with that specific combination: sslv2 has been
> removed from openssl, but boost still references it.)
> > >
> > > You should do a :
> > >
> > > sudo apt-get upgrade libboost-dev-all
> > >
> > > to get the 1.46.1 library
> > >
> > > /M
> > >
> > >
> > > On 23/02/2012, at 18:31, Martinx - ????? wrote:
> > >
> > >> Hi Michael!
> > >>
> > >> Thank you for libcoin! It is a awesome evolution for Bitcoin and for
> the CryptoCurrencies as a hole... Thanks!!!
> > >>
> > >> Anyway, I am unable to compile libcoin under my Ubuntu 11.04. At this
> machine, I have compiled and running Bitcoin (from sources), Namecoin,
> Devcoin, Litecoin, IXcoin and I0coin, all from sources but, when I try to
> compile libcoin, I got:
> > >>
> > >> ----
> > >> user at desk:~/libcoin$ ./configure
> > >> -- The C compiler identification is GNU
> > >> -- The CXX compiler identification is GNU
> > >> -- Check for working C compiler: /usr/bin/gcc
> > >> -- Check for working C compiler: /usr/bin/gcc -- works
> > >> -- Detecting C compiler ABI info
> > >> -- Detecting C compiler ABI info - done
> > >> -- Check for working CXX compiler: /usr/bin/c++
> > >> -- Check for working CXX compiler: /usr/bin/c++ -- works
> > >> -- Detecting CXX compiler ABI info
> > >> -- Detecting CXX compiler ABI info - done
> > >> -- Looking for include files CMAKE_HAVE_PTHREAD_H
> > >> -- Looking for include files CMAKE_HAVE_PTHREAD_H - found
> > >> -- Looking for pthread_create in pthreads
> > >> -- Looking for pthread_create in pthreads - not found
> > >> -- Looking for pthread_create in pthread
> > >> -- Looking for pthread_create in pthread - found
> > >> -- Found Threads: TRUE
> > >> -- Looking for XOpenDisplay in
> /usr/lib/i386-linux-gnu/libX11.so;/usr/lib/i386-linux-gnu/libXext.so
> > >> -- Looking for XOpenDisplay in
> /usr/lib/i386-linux-gnu/libX11.so;/usr/lib/i386-linux-gnu/libXext.so - found
> > >> -- Looking for gethostbyname
> > >> -- Looking for gethostbyname - found
> > >> -- Looking for connect
> > >> -- Looking for connect - found
> > >> -- Looking for remove
> > >> -- Looking for remove - found
> > >> -- Looking for shmat
> > >> -- Looking for shmat - found
> > >> -- Looking for IceConnectionNumber in ICE
> > >> -- Looking for IceConnectionNumber in ICE - found
> > >> -- Found X11: /usr/lib/i386-linux-gnu/libX11.so
> > >> -- Boost version: 1.42.0
> > >> -- Found the following Boost libraries:
> > >> --   date_time
> > >> --   regex
> > >> --   filesystem
> > >> --   system
> > >> --   program_options
> > >> --   thread
> > >> -- Found OpenSSL: /usr/lib/libssl.so;/usr/lib/libcrypto.so
> > >> -- Looking for Q_WS_X11
> > >> -- Looking for Q_WS_X11 - found
> > >> -- Looking for Q_WS_WIN
> > >> -- Looking for Q_WS_WIN - not found.
> > >> -- Looking for Q_WS_QWS
> > >> -- Looking for Q_WS_QWS - not found.
> > >> -- Looking for Q_WS_MAC
> > >> -- Looking for Q_WS_MAC - not found.
> > >> -- Found Qt-Version 4.7.2 (using /usr/bin/qmake)
> > >> -- Found wxWidgets: TRUE
> > >>
> > >> The build system is configured to install libraries to /usr/local/lib
> > >> Your applications may not be able to find your installed libraries
> unless you:
> > >>    set your LD_LIBRARY_PATH (user specific) or
> > >>    update your ld.so configuration (system wide)
> > >> You have an ld.so.conf.d directory on your system, so if you wish to
> ensure that
> > >> applications find the installed libcoin libraries, system wide, you
> could install an
> > >> libcoin specific ld.so configuration with:
> > >>    sudo make install_ld_conf
> > >>
> > >> -- Configuring done
> > >> -- Generating done
> > >> -- Build files have been written to: /home/user/libcoin
> > >> ----
> > >>
> > >> Now I tried make, without success:
> > >>
> > >> ----
> > >> .....
> > >> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0xf):
> undefined reference to `BN_init'
> > >> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x1e):
> undefined reference to `BN_copy'
> > >> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x38):
> undefined reference to `BN_set_negative'
> > >> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x4f):
> undefined reference to `BN_clear_free'
> > >> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0xd3):
> undefined reference to `BN_clear_free'
> > >> ../../lib/libcoin.a(Script.o): In function `operator<<(CBigNum
> const&, unsigned int)':
> > >> Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&, unsigned
> int)]+0x16): undefined reference to `BN_init'
> > >> Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&, unsigned
> int)]+0x2c): undefined reference to `BN_lshift'
> > >> Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&, unsigned
> int)]+0xad): undefined reference to `BN_clear_free'
> > >> ../../lib/libcoin.a(Script.o): In function `operator>>(CBigNum
> const&, unsigned int)':
> > >> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned
> int)]+0xf): undefined reference to `BN_init'
> > >> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned
> int)]+0x1e): undefined reference to `BN_copy'
> > >> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned
> int)]+0x47): undefined reference to `BN_clear_free'
> > >> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned
> int)]+0xcb): undefined reference to `BN_clear_free'
> > >> ../../lib/libcoin.a(Script.o): In function `operator!=(CBigNum
> const&, CBigNum const&)':
> > >> Script.cpp:(.text._ZneRK7CBigNumS1_[operator!=(CBigNum const&,
> CBigNum const&)]+0x14): undefined reference to `BN_cmp'
> > >> ../../lib/libcoin.a(Script.o): In function `operator>(CBigNum const&,
> CBigNum const&)':
> > >> Script.cpp:(.text._ZgtRK7CBigNumS1_[operator>(CBigNum const&, CBigNum
> const&)]+0x14): undefined reference to `BN_cmp'
> > >> ../../lib/libcoin.a(Script.o): In function `uint256
> Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned
> char, std::allocator<unsigned char> > >
> >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char,
> std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned
> char*, std::vector<unsigned char, std::allocator<unsigned char> > >)':
> > >>
> Script.cpp:(.text._Z4HashIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEE7uint256T_S8_[uint256
> Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned
> char, std::allocator<unsigned char> > >
> >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char,
> std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned
> char*, std::vector<unsigned char, std::allocator<unsigned char> >
> >)]+0x6d): undefined reference to `SHA256'
> > >>
> Script.cpp:(.text._Z4HashIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEE7uint256T_S8_[uint256
> Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned
> char, std::allocator<unsigned char> > >
> >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char,
> std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned
> char*, std::vector<unsigned char, std::allocator<unsigned char> >
> >)]+0xb8): undefined reference to `SHA256'
> > >> collect2: ld returned 1 exit status
> > >> make[2]: *** [bin/bitcoind] Error 1
> > >> make[1]: *** [applications/bitcoind/CMakeFiles/app_bitcoind.dir/all]
> Error 2
> > >> make: *** [all] Error 2
> > >> -----
> > >>
> > >> What can I do?!
> > >>
> > >> Best,
> > >> Thiago
> > >>
> > >>
> > >> On 1 February 2012 12:18, Michael Gr?nager <gronager at ceptacle.com>
> wrote:
> > >> Dear Bitcoiners,
> > >>
> > >> libcoin is now in a state ready for its first release, which I would
> like to share with you!
> > >>
> > >> === libcoin is a crypto currency library based on the bitcoin/bitcoin
> "Satoshi" client. ===
> > >>
> > >> Copenhagen, Denmark - 1st February 2012 Ceptacle announces the
> release of the first version of the crypto currency library "libcoin" based
> on the bitcoin/bitcoin "Satoshi" client.
> > >>
> > >> libcoin also maintains a version of bitcoind that is a 100%
> compatible drop-in replacement of the bitcoin/bitcoind client: You can use
> it on the same computer on the same files and you can call it with the same
> scripts. And you can easily extend it without touching the basic bitcoin
> source files.
> > >>
> > >> The libcoin/bitcoind client downloads the entire block chain 3.5
> times faster than the bitcoin/bitcoind client. This is less than 90 minutes
> on a modern laptop!
> > >>
> > >> In libcoin, the Satoshi client code has been completely refactored,
> properly encapsulating classes, removing all globals, moving from threads
> and mutexes to a pure asynchronous approach. Functionalities have been
> divided into logical units and libraries, minimizing dependencies for e.g.
> thin clients.
> > >>
> > >> libcoin is chain agnostic, all chain (bitcoin, testnet, namecoin,
> litecoin, ...) specific settings are maintained from a single class (Chain)
> and hence experiments with chain settings, mining, security and digital
> currencies for research and educational purposes are easily accessible. See
> the ponzicoin example for how you define your own chain.
> > >>
> > >> The build system of libcoin is based on CMake and supports builds of
> static and dynamic libraries on Linux, Mac OS X, and Windows.
> > >>
> > >> The libcoin license is LGPL v. 3. This mean that you can use it in
> open source as well as in commercial projects, but improvements should go
> back into the libcoin library.
> > >>
> > >> ======
> > >>
> > >> Read more on libcoin on: http://github.com/ceptacle/libcoin/wiki
> > >>
> > >> Join libcoin on twitter: http://twitter.com/libcoin
> > >>
> > >> Download "libcoin Satoshi release":
> http://github.com/ceptacle/libcoin/zipball/v0.4.0.1
> > >>
> > >> Best regards,
> > >>
> > >> Michael Gronager, PhD
> > >> Director, Ceptacle
> > >> Jens Juels Gade 33
> > >> 2100 Copenhagen E
> > >> Mobile: +45 31 45 14 01
> > >> E-mail: gronager at ceptacle.com
> > >> Web: http://www.ceptacle.com/
> > >>
> > >>
> > >>
> ------------------------------------------------------------------------------
> > >> Keep Your Developer Skills Current with LearnDevNow!
> > >> The most comprehensive online learning library for Microsoft
> developers
> > >> is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3,
> MVC3,
> > >> Metro Style Apps, more. Free future releases when you subscribe now!
> > >> http://p.sf.net/sfu/learndevnow-d2d
> > >> _______________________________________________
> > >> Bitcoin-development mailing list
> > >> Bitcoin-development at lists.sourceforge.net
> > >> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> > >>
> > >
> > > Michael Gronager, PhD
> > > Director, Ceptacle
> > > Jens Juels Gade 33
> > > 2100 Copenhagen E
> > > Mobile: +45 31 45 14 01
> > > E-mail: gronager at ceptacle.com
> > > Web: http://www.ceptacle.com/
> > >
> > >
> > >
> >
> >
>
> Michael Gronager, PhD
> Director, Ceptacle
> Jens Juels Gade 33
> 2100 Copenhagen E
> Mobile: +45 31 45 14 01
> E-mail: gronager at ceptacle.com
> Web: http://www.ceptacle.com/
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120225/f28e38b5/attachment.html>

From laanwj at gmail.com  Sat Feb 25 07:18:39 2012
From: laanwj at gmail.com (Wladimir)
Date: Sat, 25 Feb 2012 08:18:39 +0100
Subject: [Bitcoin-development] Building BDB on MingW
In-Reply-To: <1330121737.13951.YahooMailNeo@web121006.mail.ne1.yahoo.com>
References: <1330121737.13951.YahooMailNeo@web121006.mail.ne1.yahoo.com>
Message-ID: <CA+s+GJB83kGEgue0G0XKn5RpqrwNBXLeygaYc4nhDoAQnBWgBg@mail.gmail.com>

On Fri, Feb 24, 2012 at 11:15 PM, Amir Taaki <zgenjix at yahoo.com> wrote:

> I followed the instructions from build-msw.txt and am getting the same
> issue from here:
>
> https://bitcointalk.org/index.php?topic=45507.0
>
>
> Any ideas? Sadly the proposed fix in that thread didn't work.
>

https://forums.oracle.com/forums/thread.jspa?messageID=4018239

Wladimir
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120225/7e6d4505/attachment.html>

From zgenjix at yahoo.com  Sun Feb 26 13:51:32 2012
From: zgenjix at yahoo.com (Amir Taaki)
Date: Sun, 26 Feb 2012 05:51:32 -0800 (PST)
Subject: [Bitcoin-development] Building BDB on MingW
In-Reply-To: <CA+s+GJB83kGEgue0G0XKn5RpqrwNBXLeygaYc4nhDoAQnBWgBg@mail.gmail.com>
References: <1330121737.13951.YahooMailNeo@web121006.mail.ne1.yahoo.com>
	<CA+s+GJB83kGEgue0G0XKn5RpqrwNBXLeygaYc4nhDoAQnBWgBg@mail.gmail.com>
Message-ID: <1330264292.59132.YahooMailNeo@web121002.mail.ne1.yahoo.com>

Thanks. Using --disable-thread_api --disable-replication got it to compile, but now when actually running bitcoind it throws DbRunRecoveryException over the DB_RUNRECOVERY flag.

It seems people aren't actually using MingW to compile bitcoind on Windows? The lack of pthreads seems crippling and there's lots of missing functions like strncasecmp, _strlwr, _fileno and swprintf.


________________________________
 From: Wladimir <laanwj at gmail.com>
To: Amir Taaki <zgenjix at yahoo.com> 
Cc: "bitcoin-development at lists.sourceforge.net" <bitcoin-development at lists.sourceforge.net> 
Sent: Saturday, February 25, 2012 7:18 AM
Subject: Re: [Bitcoin-development] Building BDB on MingW
 




On Fri, Feb 24, 2012 at 11:15 PM, Amir Taaki <zgenjix at yahoo.com> wrote:

I followed the instructions from build-msw.txt and am getting the same issue from here:
>
>https://bitcointalk.org/index.php?topic=45507.0
>
>
>Any ideas? Sadly the proposed fix in that thread didn't work.
>

https://forums.oracle.com/forums/thread.jspa?messageID=4018239

Wladimir
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120226/49b57a3c/attachment.html>

From gronager at ceptacle.com  Sun Feb 26 17:57:35 2012
From: gronager at ceptacle.com (=?iso-8859-1?Q?Michael_Gr=F8nager?=)
Date: Sun, 26 Feb 2012 18:57:35 +0100
Subject: [Bitcoin-development] Announcement: libcoin
In-Reply-To: <CAJSM8J2-+uHKJg9xjqtz785HBNY8wXtJLnw70jP0_HgNspx4Tg@mail.gmail.com>
References: <D55C3D18-8286-44E9-B877-6FCE7C05E980@ceptacle.com>
	<CAJSM8J0zqF2=Poknzc8R7TrTJ0DWCMBw2-K9gGhUP_Qf+J6eFg@mail.gmail.com>
	<4FF4A408-F8C9-4A50-8B13-13D3686BEB09@ceptacle.com>
	<CAJSM8J3bZYfpE9EATcYe=79s_RxvGG9BrdRQR9ivwtZnuPsL0w@mail.gmail.com>
	<CAJSM8J2nhoKsOnAeF8qBW3zOfp=sJ25sd8gnw2dMJ3GgkohDjQ@mail.gmail.com>
	<C3C58158-0DED-41A1-B4D2-BF746AFE717A@ceptacle.com>
	<CAJSM8J3255LpXbHRF+zEi0QRoM0mwuRP3FSNbSwSyz-_ge=Few@mail.gmail.com>
	<3C518667-C2A6-4D1F-988D-888964925489@ceptacle.com>
	<CAJSM8J2-+uHKJg9xjqtz785HBNY8wXtJLnw70jP0_HgNspx4Tg@mail.gmail.com>
Message-ID: <AB5AEA73-93BD-440E-89F0-F0951047D71A@ceptacle.com>

And if you do an update now "help" is there too ;)

/M

On 25/02/2012, at 03:11, Martinx - ????? wrote:

> Thank you!!!
> 
> It is all working now! Except "help"...
> 
> Nice work Michael!!
> 
> Best,
> Thiago
> 
> 2012/2/24 Michael Gr?nager <gronager at ceptacle.com>
> OK - didn't took the weekend:
> 
> support for "port" is on github now :)
> 
> Only took two lines:
> 
>           ("port", value<unsigned short>(&port)->default_value(8333), "Listen on specified port for the p2p protocol")
> 
> and using the port option in the Node constructor (was there already):
> 
>       Node node(chain, data_dir, args.count("nolisten") ? "" : "0.0.0.0", lexical_cast<string>(port)); // it is also here we specify the use of a proxy!
> 
> /M
> 
> 
> 
> On 24/02/2012, at 19:49, Martinx - ????? wrote:
> 
>> Hi Michael,
>> 
>> Thank you for your attention!
>> 
>> Now, I'm trying to start libcoin's bitcoind using high ports but, it always try to listen at 8332, no matter what I "say"...
>> 
>> Look:
>> 
>> $ cat .bitcoin/bitcoin.conf
>> server=1
>> daemon=1
>> rpcuser=libcoin
>> rpcpassword=LibCoin13
>> rpcport=10332
>> port=10333
>> 
>> But:
>> 
>> /usr/local/bin/bitcoind
>> Error: Address already in use
>> 
>> terminate called after throwing an instance of 'DbException'
>>  what():  DbEnv::close: Invalid argument
>> Aborted
>> 
>> When I "strace it", I can see:
>> 
>> ...
>> bind(12, {sa_family=AF_INET, sin_port=htons(8333), sin_addr=inet_addr("0.0.0.0")}, 16) = -1 EADDRINUSE (Address already in use)
>> ...
>> 
>> I already tried:
>> 
>> /usr/local/bin/bitcoind --rpcport 10332
>> /usr/local/bin/bitcoind --rpcport=10332
>> 
>> Without success...
>> 
>> Thanks again!
>> Thiago
>> 
>> 2012/2/24 Michael Gr?nager <gronager at ceptacle.com>
>> Hi Thiago,
>> 
>> Forgot to comment on the two latter:
>> 
>>> $ bitcoind getaccountaddress ""
>>> HTTP error code: 401
>>> Error: couldn't parse reply from server
>>> 
>>> $ bitcoind listaccounts
>>> HTTP error code: 401
>>> Error: couldn't parse reply from server
>>> 
>> 
>> 401 = permission denied - you need to setup username / password either on the commandline or in the bicoin.conf file to access those commands...
>> 
>> See in the bitcoind.cpp file for commands that you can use with and without auth...
>> 
>> Those that contains an "auth" requires auth:
>> 
>>      server.registerMethod(method_ptr(new GetBalance(wallet)), auth);
>> 
>> As opposed to:
>> 
>>      server.registerMethod(method_ptr(new GetInfo(node)));
>> 
>> auth is defined by:
>> 
>>      Auth auth(rpc_user, rpc_pass); // if rpc_user and rpc_pass are not set, all authenticated methods becomes disallowed.
>> 
>> so you just experience the case explained in the comment ;) I admit that the output could be more readable, though!
>> 
>> /M
>> 
>> 
>>> 
>>> Any tips?! lol
>>> 
>>> Thanks!
>>> Thiago
>>> 
>>> 2012/2/23 Martinx - ????? <thiagocmartinsc at gmail.com>
>>> AWESOME!!!
>>> 
>>> I can compile libcoin at my Ubuntu 11.10... I just need to install:
>>> 
>>> sudo aptitude install libboost1.46-all-dev
>>> 
>>> ...alongside with another already installed dependencies, and now it works!!
>>> 
>>> Thank you!
>>> Thiago
>>> 
>>> 2012/2/23 Michael Gr?nager <gronager at ceptacle.com>
>>> Hi Martinx,
>>> 
>>> Another note:
>>> 
>>> boost 1.42 and openssl 1.0 has a conflict (you will see it when you try to compile coinHTTP with that specific combination: sslv2 has been removed from openssl, but boost still references it.)
>>> 
>>> You should do a :
>>> 
>>> sudo apt-get upgrade libboost-dev-all
>>> 
>>> to get the 1.46.1 library
>>> 
>>> /M
>>> 
>>> 
>>> On 23/02/2012, at 18:31, Martinx - ????? wrote:
>>> 
>>>> Hi Michael!
>>>> 
>>>> Thank you for libcoin! It is a awesome evolution for Bitcoin and for the CryptoCurrencies as a hole... Thanks!!!
>>>> 
>>>> Anyway, I am unable to compile libcoin under my Ubuntu 11.04. At this machine, I have compiled and running Bitcoin (from sources), Namecoin, Devcoin, Litecoin, IXcoin and I0coin, all from sources but, when I try to compile libcoin, I got:
>>>> 
>>>> ----
>>>> user at desk:~/libcoin$ ./configure
>>>> -- The C compiler identification is GNU
>>>> -- The CXX compiler identification is GNU
>>>> -- Check for working C compiler: /usr/bin/gcc
>>>> -- Check for working C compiler: /usr/bin/gcc -- works
>>>> -- Detecting C compiler ABI info
>>>> -- Detecting C compiler ABI info - done
>>>> -- Check for working CXX compiler: /usr/bin/c++
>>>> -- Check for working CXX compiler: /usr/bin/c++ -- works
>>>> -- Detecting CXX compiler ABI info
>>>> -- Detecting CXX compiler ABI info - done
>>>> -- Looking for include files CMAKE_HAVE_PTHREAD_H
>>>> -- Looking for include files CMAKE_HAVE_PTHREAD_H - found
>>>> -- Looking for pthread_create in pthreads
>>>> -- Looking for pthread_create in pthreads - not found
>>>> -- Looking for pthread_create in pthread
>>>> -- Looking for pthread_create in pthread - found
>>>> -- Found Threads: TRUE
>>>> -- Looking for XOpenDisplay in /usr/lib/i386-linux-gnu/libX11.so;/usr/lib/i386-linux-gnu/libXext.so
>>>> -- Looking for XOpenDisplay in /usr/lib/i386-linux-gnu/libX11.so;/usr/lib/i386-linux-gnu/libXext.so - found
>>>> -- Looking for gethostbyname
>>>> -- Looking for gethostbyname - found
>>>> -- Looking for connect
>>>> -- Looking for connect - found
>>>> -- Looking for remove
>>>> -- Looking for remove - found
>>>> -- Looking for shmat
>>>> -- Looking for shmat - found
>>>> -- Looking for IceConnectionNumber in ICE
>>>> -- Looking for IceConnectionNumber in ICE - found
>>>> -- Found X11: /usr/lib/i386-linux-gnu/libX11.so
>>>> -- Boost version: 1.42.0
>>>> -- Found the following Boost libraries:
>>>> --   date_time
>>>> --   regex
>>>> --   filesystem
>>>> --   system
>>>> --   program_options
>>>> --   thread
>>>> -- Found OpenSSL: /usr/lib/libssl.so;/usr/lib/libcrypto.so
>>>> -- Looking for Q_WS_X11
>>>> -- Looking for Q_WS_X11 - found
>>>> -- Looking for Q_WS_WIN
>>>> -- Looking for Q_WS_WIN - not found.
>>>> -- Looking for Q_WS_QWS
>>>> -- Looking for Q_WS_QWS - not found.
>>>> -- Looking for Q_WS_MAC
>>>> -- Looking for Q_WS_MAC - not found.
>>>> -- Found Qt-Version 4.7.2 (using /usr/bin/qmake)
>>>> -- Found wxWidgets: TRUE
>>>> 
>>>> The build system is configured to install libraries to /usr/local/lib
>>>> Your applications may not be able to find your installed libraries unless you:
>>>>   set your LD_LIBRARY_PATH (user specific) or
>>>>   update your ld.so configuration (system wide)
>>>> You have an ld.so.conf.d directory on your system, so if you wish to ensure that
>>>> applications find the installed libcoin libraries, system wide, you could install an
>>>> libcoin specific ld.so configuration with:
>>>>   sudo make install_ld_conf
>>>> 
>>>> -- Configuring done
>>>> -- Generating done
>>>> -- Build files have been written to: /home/user/libcoin
>>>> ----
>>>> 
>>>> Now I tried make, without success:
>>>> 
>>>> ----
>>>> .....
>>>> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0xf): undefined reference to `BN_init'
>>>> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x1e): undefined reference to `BN_copy'
>>>> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x38): undefined reference to `BN_set_negative'
>>>> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x4f): undefined reference to `BN_clear_free'
>>>> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0xd3): undefined reference to `BN_clear_free'
>>>> ../../lib/libcoin.a(Script.o): In function `operator<<(CBigNum const&, unsigned int)':
>>>> Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&, unsigned int)]+0x16): undefined reference to `BN_init'
>>>> Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&, unsigned int)]+0x2c): undefined reference to `BN_lshift'
>>>> Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&, unsigned int)]+0xad): undefined reference to `BN_clear_free'
>>>> ../../lib/libcoin.a(Script.o): In function `operator>>(CBigNum const&, unsigned int)':
>>>> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned int)]+0xf): undefined reference to `BN_init'
>>>> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned int)]+0x1e): undefined reference to `BN_copy'
>>>> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned int)]+0x47): undefined reference to `BN_clear_free'
>>>> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned int)]+0xcb): undefined reference to `BN_clear_free'
>>>> ../../lib/libcoin.a(Script.o): In function `operator!=(CBigNum const&, CBigNum const&)':
>>>> Script.cpp:(.text._ZneRK7CBigNumS1_[operator!=(CBigNum const&, CBigNum const&)]+0x14): undefined reference to `BN_cmp'
>>>> ../../lib/libcoin.a(Script.o): In function `operator>(CBigNum const&, CBigNum const&)':
>>>> Script.cpp:(.text._ZgtRK7CBigNumS1_[operator>(CBigNum const&, CBigNum const&)]+0x14): undefined reference to `BN_cmp'
>>>> ../../lib/libcoin.a(Script.o): In function `uint256 Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > > >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >)':
>>>> Script.cpp:(.text._Z4HashIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEE7uint256T_S8_[uint256 Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > > >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >)]+0x6d): undefined reference to `SHA256'
>>>> Script.cpp:(.text._Z4HashIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEE7uint256T_S8_[uint256 Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > > >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >)]+0xb8): undefined reference to `SHA256'
>>>> collect2: ld returned 1 exit status
>>>> make[2]: *** [bin/bitcoind] Error 1
>>>> make[1]: *** [applications/bitcoind/CMakeFiles/app_bitcoind.dir/all] Error 2
>>>> make: *** [all] Error 2
>>>> -----
>>>> 
>>>> What can I do?!
>>>> 
>>>> Best,
>>>> Thiago
>>>> 
>>>> 
>>>> On 1 February 2012 12:18, Michael Gr?nager <gronager at ceptacle.com> wrote:
>>>> Dear Bitcoiners,
>>>> 
>>>> libcoin is now in a state ready for its first release, which I would like to share with you!
>>>> 
>>>> === libcoin is a crypto currency library based on the bitcoin/bitcoin "Satoshi" client. ===
>>>> 
>>>> Copenhagen, Denmark - 1st February 2012 Ceptacle announces the release of the first version of the crypto currency library "libcoin" based on the bitcoin/bitcoin "Satoshi" client.
>>>> 
>>>> libcoin also maintains a version of bitcoind that is a 100% compatible drop-in replacement of the bitcoin/bitcoind client: You can use it on the same computer on the same files and you can call it with the same scripts. And you can easily extend it without touching the basic bitcoin source files.
>>>> 
>>>> The libcoin/bitcoind client downloads the entire block chain 3.5 times faster than the bitcoin/bitcoind client. This is less than 90 minutes on a modern laptop!
>>>> 
>>>> In libcoin, the Satoshi client code has been completely refactored, properly encapsulating classes, removing all globals, moving from threads and mutexes to a pure asynchronous approach. Functionalities have been divided into logical units and libraries, minimizing dependencies for e.g. thin clients.
>>>> 
>>>> libcoin is chain agnostic, all chain (bitcoin, testnet, namecoin, litecoin, ...) specific settings are maintained from a single class (Chain) and hence experiments with chain settings, mining, security and digital currencies for research and educational purposes are easily accessible. See the ponzicoin example for how you define your own chain.
>>>> 
>>>> The build system of libcoin is based on CMake and supports builds of static and dynamic libraries on Linux, Mac OS X, and Windows.
>>>> 
>>>> The libcoin license is LGPL v. 3. This mean that you can use it in open source as well as in commercial projects, but improvements should go back into the libcoin library.
>>>> 
>>>> ======
>>>> 
>>>> Read more on libcoin on: http://github.com/ceptacle/libcoin/wiki
>>>> 
>>>> Join libcoin on twitter: http://twitter.com/libcoin
>>>> 
>>>> Download "libcoin Satoshi release": http://github.com/ceptacle/libcoin/zipball/v0.4.0.1
>>>> 
>>>> Best regards,
>>>> 
>>>> Michael Gronager, PhD
>>>> Director, Ceptacle
>>>> Jens Juels Gade 33
>>>> 2100 Copenhagen E
>>>> Mobile: +45 31 45 14 01
>>>> E-mail: gronager at ceptacle.com
>>>> Web: http://www.ceptacle.com/
>>>> 
>>>> 
>>>> ------------------------------------------------------------------------------
>>>> Keep Your Developer Skills Current with LearnDevNow!
>>>> The most comprehensive online learning library for Microsoft developers
>>>> is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3, MVC3,
>>>> Metro Style Apps, more. Free future releases when you subscribe now!
>>>> http://p.sf.net/sfu/learndevnow-d2d
>>>> _______________________________________________
>>>> Bitcoin-development mailing list
>>>> Bitcoin-development at lists.sourceforge.net
>>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>>> 
>>> 
>>> Michael Gronager, PhD
>>> Director, Ceptacle
>>> Jens Juels Gade 33
>>> 2100 Copenhagen E
>>> Mobile: +45 31 45 14 01
>>> E-mail: gronager at ceptacle.com
>>> Web: http://www.ceptacle.com/
>>> 
>>> 
>>> 
>> 
>> 
> 
> Michael Gronager, PhD
> Director, Ceptacle
> Jens Juels Gade 33
> 2100 Copenhagen E
> Mobile: +45 31 45 14 01
> E-mail: gronager at ceptacle.com
> Web: http://www.ceptacle.com/
> 
> 

Michael Gronager, PhD
Director, Ceptacle
Jens Juels Gade 33
2100 Copenhagen E
Mobile: +45 31 45 14 01
E-mail: gronager at ceptacle.com
Web: http://www.ceptacle.com/




From gavinandresen at gmail.com  Mon Feb 27 16:10:17 2012
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Mon, 27 Feb 2012 11:10:17 -0500
Subject: [Bitcoin-development] BIP 16 status update
Message-ID: <CABsx9T3748C0LiZETf=dRN5z0-izN=wh6vhuUSB+crXCXcuyAQ@mail.gmail.com>

Mining support for BIP 16 is still under 50%, and won't possibly be over
50% by March 1.  Which means we need a new evaluation/switchover date:

Re-evaluate support: March 15'th
Target switchover: April 1

If you're already supporting BIP16, restart bitcoind with the argument:
  -paytoscripthashtime=1333238400

... to delay switchover until April 1.

Hopefully this will be the last delay; Tycho has told me that deepbit will
support BIP16 as soon as he's able to merge and test the changes, which
will put support at well over 55%.

-- 
--
Gavin Andresen
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120227/f73a84df/attachment.html>

From thiagocmartinsc at gmail.com  Mon Feb 27 19:03:39 2012
From: thiagocmartinsc at gmail.com (=?ISO-2022-JP?B?TWFydGlueCAtIBskQiU4JSchPCVgJTobKEI=?=)
Date: Mon, 27 Feb 2012 16:03:39 -0300
Subject: [Bitcoin-development] Announcement: libcoin
In-Reply-To: <AB5AEA73-93BD-440E-89F0-F0951047D71A@ceptacle.com>
References: <D55C3D18-8286-44E9-B877-6FCE7C05E980@ceptacle.com>
	<CAJSM8J0zqF2=Poknzc8R7TrTJ0DWCMBw2-K9gGhUP_Qf+J6eFg@mail.gmail.com>
	<4FF4A408-F8C9-4A50-8B13-13D3686BEB09@ceptacle.com>
	<CAJSM8J3bZYfpE9EATcYe=79s_RxvGG9BrdRQR9ivwtZnuPsL0w@mail.gmail.com>
	<CAJSM8J2nhoKsOnAeF8qBW3zOfp=sJ25sd8gnw2dMJ3GgkohDjQ@mail.gmail.com>
	<C3C58158-0DED-41A1-B4D2-BF746AFE717A@ceptacle.com>
	<CAJSM8J3255LpXbHRF+zEi0QRoM0mwuRP3FSNbSwSyz-_ge=Few@mail.gmail.com>
	<3C518667-C2A6-4D1F-988D-888964925489@ceptacle.com>
	<CAJSM8J2-+uHKJg9xjqtz785HBNY8wXtJLnw70jP0_HgNspx4Tg@mail.gmail.com>
	<AB5AEA73-93BD-440E-89F0-F0951047D71A@ceptacle.com>
Message-ID: <CAJSM8J2ytXR0RSL=3+Se6mggH+pDmnkSx+CUp-bcod4qmJ3ObA@mail.gmail.com>

AWESOME!! Thank you!!

Anyway, I found a new problem... lol

/usr/local/bin/bitcoind getinfo #okay
{
    "version" : 40001,
    "blocks" : 168753,
    "connections" : 8,
    "difficulty" : 1376302.26788638,
    "testnet" : false
}

/usr/local/bin/bitcoind getaccountaddress ""  # okay...
1J4vNcvEdeCuLH4yvyoC2gxFEF4zquoJ87

/usr/local/bin/bitcoind listaccounts # NOT okay...
{
}

/usr/local/bin/bitcoind getaccountaddress "teste" # okay
1E6pGh6AAtuJdFXheZMp1zdYmvdqAQn9QT

/usr/local/bin/bitcoind listaccounts # NOT okay...
{
    "teste" : 0.00000000
}

Where is my default account listed at "listaccounts" output?!

Best,
Thiago

2012/2/26 Michael Gr?nager <gronager at ceptacle.com>

> And if you do an update now "help" is there too ;)
>
> /M
>
> On 25/02/2012, at 03:11, Martinx - ????? wrote:
>
> > Thank you!!!
> >
> > It is all working now! Except "help"...
> >
> > Nice work Michael!!
> >
> > Best,
> > Thiago
> >
> > 2012/2/24 Michael Gr?nager <gronager at ceptacle.com>
> > OK - didn't took the weekend:
> >
> > support for "port" is on github now :)
> >
> > Only took two lines:
> >
> >           ("port", value<unsigned short>(&port)->default_value(8333),
> "Listen on specified port for the p2p protocol")
> >
> > and using the port option in the Node constructor (was there already):
> >
> >       Node node(chain, data_dir, args.count("nolisten") ? "" :
> "0.0.0.0", lexical_cast<string>(port)); // it is also here we specify the
> use of a proxy!
> >
> > /M
> >
> >
> >
> > On 24/02/2012, at 19:49, Martinx - ????? wrote:
> >
> >> Hi Michael,
> >>
> >> Thank you for your attention!
> >>
> >> Now, I'm trying to start libcoin's bitcoind using high ports but, it
> always try to listen at 8332, no matter what I "say"...
> >>
> >> Look:
> >>
> >> $ cat .bitcoin/bitcoin.conf
> >> server=1
> >> daemon=1
> >> rpcuser=libcoin
> >> rpcpassword=LibCoin13
> >> rpcport=10332
> >> port=10333
> >>
> >> But:
> >>
> >> /usr/local/bin/bitcoind
> >> Error: Address already in use
> >>
> >> terminate called after throwing an instance of 'DbException'
> >>  what():  DbEnv::close: Invalid argument
> >> Aborted
> >>
> >> When I "strace it", I can see:
> >>
> >> ...
> >> bind(12, {sa_family=AF_INET, sin_port=htons(8333),
> sin_addr=inet_addr("0.0.0.0")}, 16) = -1 EADDRINUSE (Address already in use)
> >> ...
> >>
> >> I already tried:
> >>
> >> /usr/local/bin/bitcoind --rpcport 10332
> >> /usr/local/bin/bitcoind --rpcport=10332
> >>
> >> Without success...
> >>
> >> Thanks again!
> >> Thiago
> >>
> >> 2012/2/24 Michael Gr?nager <gronager at ceptacle.com>
> >> Hi Thiago,
> >>
> >> Forgot to comment on the two latter:
> >>
> >>> $ bitcoind getaccountaddress ""
> >>> HTTP error code: 401
> >>> Error: couldn't parse reply from server
> >>>
> >>> $ bitcoind listaccounts
> >>> HTTP error code: 401
> >>> Error: couldn't parse reply from server
> >>>
> >>
> >> 401 = permission denied - you need to setup username / password either
> on the commandline or in the bicoin.conf file to access those commands...
> >>
> >> See in the bitcoind.cpp file for commands that you can use with and
> without auth...
> >>
> >> Those that contains an "auth" requires auth:
> >>
> >>      server.registerMethod(method_ptr(new GetBalance(wallet)), auth);
> >>
> >> As opposed to:
> >>
> >>      server.registerMethod(method_ptr(new GetInfo(node)));
> >>
> >> auth is defined by:
> >>
> >>      Auth auth(rpc_user, rpc_pass); // if rpc_user and rpc_pass are not
> set, all authenticated methods becomes disallowed.
> >>
> >> so you just experience the case explained in the comment ;) I admit
> that the output could be more readable, though!
> >>
> >> /M
> >>
> >>
> >>>
> >>> Any tips?! lol
> >>>
> >>> Thanks!
> >>> Thiago
> >>>
> >>> 2012/2/23 Martinx - ????? <thiagocmartinsc at gmail.com>
> >>> AWESOME!!!
> >>>
> >>> I can compile libcoin at my Ubuntu 11.10... I just need to install:
> >>>
> >>> sudo aptitude install libboost1.46-all-dev
> >>>
> >>> ...alongside with another already installed dependencies, and now it
> works!!
> >>>
> >>> Thank you!
> >>> Thiago
> >>>
> >>> 2012/2/23 Michael Gr?nager <gronager at ceptacle.com>
> >>> Hi Martinx,
> >>>
> >>> Another note:
> >>>
> >>> boost 1.42 and openssl 1.0 has a conflict (you will see it when you
> try to compile coinHTTP with that specific combination: sslv2 has been
> removed from openssl, but boost still references it.)
> >>>
> >>> You should do a :
> >>>
> >>> sudo apt-get upgrade libboost-dev-all
> >>>
> >>> to get the 1.46.1 library
> >>>
> >>> /M
> >>>
> >>>
> >>> On 23/02/2012, at 18:31, Martinx - ????? wrote:
> >>>
> >>>> Hi Michael!
> >>>>
> >>>> Thank you for libcoin! It is a awesome evolution for Bitcoin and for
> the CryptoCurrencies as a hole... Thanks!!!
> >>>>
> >>>> Anyway, I am unable to compile libcoin under my Ubuntu 11.04. At this
> machine, I have compiled and running Bitcoin (from sources), Namecoin,
> Devcoin, Litecoin, IXcoin and I0coin, all from sources but, when I try to
> compile libcoin, I got:
> >>>>
> >>>> ----
> >>>> user at desk:~/libcoin$ ./configure
> >>>> -- The C compiler identification is GNU
> >>>> -- The CXX compiler identification is GNU
> >>>> -- Check for working C compiler: /usr/bin/gcc
> >>>> -- Check for working C compiler: /usr/bin/gcc -- works
> >>>> -- Detecting C compiler ABI info
> >>>> -- Detecting C compiler ABI info - done
> >>>> -- Check for working CXX compiler: /usr/bin/c++
> >>>> -- Check for working CXX compiler: /usr/bin/c++ -- works
> >>>> -- Detecting CXX compiler ABI info
> >>>> -- Detecting CXX compiler ABI info - done
> >>>> -- Looking for include files CMAKE_HAVE_PTHREAD_H
> >>>> -- Looking for include files CMAKE_HAVE_PTHREAD_H - found
> >>>> -- Looking for pthread_create in pthreads
> >>>> -- Looking for pthread_create in pthreads - not found
> >>>> -- Looking for pthread_create in pthread
> >>>> -- Looking for pthread_create in pthread - found
> >>>> -- Found Threads: TRUE
> >>>> -- Looking for XOpenDisplay in
> /usr/lib/i386-linux-gnu/libX11.so;/usr/lib/i386-linux-gnu/libXext.so
> >>>> -- Looking for XOpenDisplay in
> /usr/lib/i386-linux-gnu/libX11.so;/usr/lib/i386-linux-gnu/libXext.so - found
> >>>> -- Looking for gethostbyname
> >>>> -- Looking for gethostbyname - found
> >>>> -- Looking for connect
> >>>> -- Looking for connect - found
> >>>> -- Looking for remove
> >>>> -- Looking for remove - found
> >>>> -- Looking for shmat
> >>>> -- Looking for shmat - found
> >>>> -- Looking for IceConnectionNumber in ICE
> >>>> -- Looking for IceConnectionNumber in ICE - found
> >>>> -- Found X11: /usr/lib/i386-linux-gnu/libX11.so
> >>>> -- Boost version: 1.42.0
> >>>> -- Found the following Boost libraries:
> >>>> --   date_time
> >>>> --   regex
> >>>> --   filesystem
> >>>> --   system
> >>>> --   program_options
> >>>> --   thread
> >>>> -- Found OpenSSL: /usr/lib/libssl.so;/usr/lib/libcrypto.so
> >>>> -- Looking for Q_WS_X11
> >>>> -- Looking for Q_WS_X11 - found
> >>>> -- Looking for Q_WS_WIN
> >>>> -- Looking for Q_WS_WIN - not found.
> >>>> -- Looking for Q_WS_QWS
> >>>> -- Looking for Q_WS_QWS - not found.
> >>>> -- Looking for Q_WS_MAC
> >>>> -- Looking for Q_WS_MAC - not found.
> >>>> -- Found Qt-Version 4.7.2 (using /usr/bin/qmake)
> >>>> -- Found wxWidgets: TRUE
> >>>>
> >>>> The build system is configured to install libraries to /usr/local/lib
> >>>> Your applications may not be able to find your installed libraries
> unless you:
> >>>>   set your LD_LIBRARY_PATH (user specific) or
> >>>>   update your ld.so configuration (system wide)
> >>>> You have an ld.so.conf.d directory on your system, so if you wish to
> ensure that
> >>>> applications find the installed libcoin libraries, system wide, you
> could install an
> >>>> libcoin specific ld.so configuration with:
> >>>>   sudo make install_ld_conf
> >>>>
> >>>> -- Configuring done
> >>>> -- Generating done
> >>>> -- Build files have been written to: /home/user/libcoin
> >>>> ----
> >>>>
> >>>> Now I tried make, without success:
> >>>>
> >>>> ----
> >>>> .....
> >>>> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0xf):
> undefined reference to `BN_init'
> >>>> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x1e):
> undefined reference to `BN_copy'
> >>>> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x38):
> undefined reference to `BN_set_negative'
> >>>> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x4f):
> undefined reference to `BN_clear_free'
> >>>> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0xd3):
> undefined reference to `BN_clear_free'
> >>>> ../../lib/libcoin.a(Script.o): In function `operator<<(CBigNum
> const&, unsigned int)':
> >>>> Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&, unsigned
> int)]+0x16): undefined reference to `BN_init'
> >>>> Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&, unsigned
> int)]+0x2c): undefined reference to `BN_lshift'
> >>>> Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&, unsigned
> int)]+0xad): undefined reference to `BN_clear_free'
> >>>> ../../lib/libcoin.a(Script.o): In function `operator>>(CBigNum
> const&, unsigned int)':
> >>>> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned
> int)]+0xf): undefined reference to `BN_init'
> >>>> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned
> int)]+0x1e): undefined reference to `BN_copy'
> >>>> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned
> int)]+0x47): undefined reference to `BN_clear_free'
> >>>> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned
> int)]+0xcb): undefined reference to `BN_clear_free'
> >>>> ../../lib/libcoin.a(Script.o): In function `operator!=(CBigNum
> const&, CBigNum const&)':
> >>>> Script.cpp:(.text._ZneRK7CBigNumS1_[operator!=(CBigNum const&,
> CBigNum const&)]+0x14): undefined reference to `BN_cmp'
> >>>> ../../lib/libcoin.a(Script.o): In function `operator>(CBigNum const&,
> CBigNum const&)':
> >>>> Script.cpp:(.text._ZgtRK7CBigNumS1_[operator>(CBigNum const&, CBigNum
> const&)]+0x14): undefined reference to `BN_cmp'
> >>>> ../../lib/libcoin.a(Script.o): In function `uint256
> Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned
> char, std::allocator<unsigned char> > >
> >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char,
> std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned
> char*, std::vector<unsigned char, std::allocator<unsigned char> > >)':
> >>>>
> Script.cpp:(.text._Z4HashIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEE7uint256T_S8_[uint256
> Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned
> char, std::allocator<unsigned char> > >
> >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char,
> std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned
> char*, std::vector<unsigned char, std::allocator<unsigned char> >
> >)]+0x6d): undefined reference to `SHA256'
> >>>>
> Script.cpp:(.text._Z4HashIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEE7uint256T_S8_[uint256
> Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned
> char, std::allocator<unsigned char> > >
> >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char,
> std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned
> char*, std::vector<unsigned char, std::allocator<unsigned char> >
> >)]+0xb8): undefined reference to `SHA256'
> >>>> collect2: ld returned 1 exit status
> >>>> make[2]: *** [bin/bitcoind] Error 1
> >>>> make[1]: *** [applications/bitcoind/CMakeFiles/app_bitcoind.dir/all]
> Error 2
> >>>> make: *** [all] Error 2
> >>>> -----
> >>>>
> >>>> What can I do?!
> >>>>
> >>>> Best,
> >>>> Thiago
> >>>>
> >>>>
> >>>> On 1 February 2012 12:18, Michael Gr?nager <gronager at ceptacle.com>
> wrote:
> >>>> Dear Bitcoiners,
> >>>>
> >>>> libcoin is now in a state ready for its first release, which I would
> like to share with you!
> >>>>
> >>>> === libcoin is a crypto currency library based on the bitcoin/bitcoin
> "Satoshi" client. ===
> >>>>
> >>>> Copenhagen, Denmark - 1st February 2012 Ceptacle announces the
> release of the first version of the crypto currency library "libcoin" based
> on the bitcoin/bitcoin "Satoshi" client.
> >>>>
> >>>> libcoin also maintains a version of bitcoind that is a 100%
> compatible drop-in replacement of the bitcoin/bitcoind client: You can use
> it on the same computer on the same files and you can call it with the same
> scripts. And you can easily extend it without touching the basic bitcoin
> source files.
> >>>>
> >>>> The libcoin/bitcoind client downloads the entire block chain 3.5
> times faster than the bitcoin/bitcoind client. This is less than 90 minutes
> on a modern laptop!
> >>>>
> >>>> In libcoin, the Satoshi client code has been completely refactored,
> properly encapsulating classes, removing all globals, moving from threads
> and mutexes to a pure asynchronous approach. Functionalities have been
> divided into logical units and libraries, minimizing dependencies for e.g.
> thin clients.
> >>>>
> >>>> libcoin is chain agnostic, all chain (bitcoin, testnet, namecoin,
> litecoin, ...) specific settings are maintained from a single class (Chain)
> and hence experiments with chain settings, mining, security and digital
> currencies for research and educational purposes are easily accessible. See
> the ponzicoin example for how you define your own chain.
> >>>>
> >>>> The build system of libcoin is based on CMake and supports builds of
> static and dynamic libraries on Linux, Mac OS X, and Windows.
> >>>>
> >>>> The libcoin license is LGPL v. 3. This mean that you can use it in
> open source as well as in commercial projects, but improvements should go
> back into the libcoin library.
> >>>>
> >>>> ======
> >>>>
> >>>> Read more on libcoin on: http://github.com/ceptacle/libcoin/wiki
> >>>>
> >>>> Join libcoin on twitter: http://twitter.com/libcoin
> >>>>
> >>>> Download "libcoin Satoshi release":
> http://github.com/ceptacle/libcoin/zipball/v0.4.0.1
> >>>>
> >>>> Best regards,
> >>>>
> >>>> Michael Gronager, PhD
> >>>> Director, Ceptacle
> >>>> Jens Juels Gade 33
> >>>> 2100 Copenhagen E
> >>>> Mobile: +45 31 45 14 01
> >>>> E-mail: gronager at ceptacle.com
> >>>> Web: http://www.ceptacle.com/
> >>>>
> >>>>
> >>>>
> ------------------------------------------------------------------------------
> >>>> Keep Your Developer Skills Current with LearnDevNow!
> >>>> The most comprehensive online learning library for Microsoft
> developers
> >>>> is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3,
> MVC3,
> >>>> Metro Style Apps, more. Free future releases when you subscribe now!
> >>>> http://p.sf.net/sfu/learndevnow-d2d
> >>>> _______________________________________________
> >>>> Bitcoin-development mailing list
> >>>> Bitcoin-development at lists.sourceforge.net
> >>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> >>>>
> >>>
> >>> Michael Gronager, PhD
> >>> Director, Ceptacle
> >>> Jens Juels Gade 33
> >>> 2100 Copenhagen E
> >>> Mobile: +45 31 45 14 01
> >>> E-mail: gronager at ceptacle.com
> >>> Web: http://www.ceptacle.com/
> >>>
> >>>
> >>>
> >>
> >>
> >
> > Michael Gronager, PhD
> > Director, Ceptacle
> > Jens Juels Gade 33
> > 2100 Copenhagen E
> > Mobile: +45 31 45 14 01
> > E-mail: gronager at ceptacle.com
> > Web: http://www.ceptacle.com/
> >
> >
>
> Michael Gronager, PhD
> Director, Ceptacle
> Jens Juels Gade 33
> 2100 Copenhagen E
> Mobile: +45 31 45 14 01
> E-mail: gronager at ceptacle.com
> Web: http://www.ceptacle.com/
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120227/f256a79d/attachment.html>

From gronager at ceptacle.com  Mon Feb 27 21:03:27 2012
From: gronager at ceptacle.com (=?iso-8859-1?Q?Michael_Gr=F8nager?=)
Date: Mon, 27 Feb 2012 22:03:27 +0100
Subject: [Bitcoin-development] Announcement: libcoin
In-Reply-To: <CAJSM8J2ytXR0RSL=3+Se6mggH+pDmnkSx+CUp-bcod4qmJ3ObA@mail.gmail.com>
References: <D55C3D18-8286-44E9-B877-6FCE7C05E980@ceptacle.com>
	<CAJSM8J0zqF2=Poknzc8R7TrTJ0DWCMBw2-K9gGhUP_Qf+J6eFg@mail.gmail.com>
	<4FF4A408-F8C9-4A50-8B13-13D3686BEB09@ceptacle.com>
	<CAJSM8J3bZYfpE9EATcYe=79s_RxvGG9BrdRQR9ivwtZnuPsL0w@mail.gmail.com>
	<CAJSM8J2nhoKsOnAeF8qBW3zOfp=sJ25sd8gnw2dMJ3GgkohDjQ@mail.gmail.com>
	<C3C58158-0DED-41A1-B4D2-BF746AFE717A@ceptacle.com>
	<CAJSM8J3255LpXbHRF+zEi0QRoM0mwuRP3FSNbSwSyz-_ge=Few@mail.gmail.com>
	<3C518667-C2A6-4D1F-988D-888964925489@ceptacle.com>
	<CAJSM8J2-+uHKJg9xjqtz785HBNY8wXtJLnw70jP0_HgNspx4Tg@mail.gmail.com>
	<AB5AEA73-93BD-440E-89F0-F0951047D71A@ceptacle.com>
	<CAJSM8J2ytXR0RSL=3+Se6mggH+pDmnkSx+CUp-bcod4qmJ3ObA@mail.gmail.com>
Message-ID: <5C3105C1-0D96-4B6C-BC82-B63FB4944307@ceptacle.com>

I tried this and got:

./bitcoind listaccount:
{
}

bitcoind getnewaddress
1DumTDw6quNqnUegJsXL2AJjDA9fmxRY7o

./bitcoind setaccount 1DumTDw6quNqnUegJsXL2AJjDA9fmxRY7o test

./bitcoind listaccounts{
   "" : 0.00000000,
   "test" : 0.00000000
}

Seem like the default account ( "" ) need to be initialized ?? Will test the same with the old client and see if it behaves similarly..

/M


On 27/02/2012, at 20:03, Martinx - ????? wrote:

> AWESOME!! Thank you!!
> 
> Anyway, I found a new problem... lol
> 
> /usr/local/bin/bitcoind getinfo #okay
> {
>    "version" : 40001,
>    "blocks" : 168753,
>    "connections" : 8,
>    "difficulty" : 1376302.26788638,
>    "testnet" : false
> }
> 
> /usr/local/bin/bitcoind getaccountaddress ""  # okay...
> 1J4vNcvEdeCuLH4yvyoC2gxFEF4zquoJ87
> 
> /usr/local/bin/bitcoind listaccounts # NOT okay...
> {
> }
> 
> /usr/local/bin/bitcoind getaccountaddress "teste" # okay
> 1E6pGh6AAtuJdFXheZMp1zdYmvdqAQn9QT
> 
> /usr/local/bin/bitcoind listaccounts # NOT okay...
> {
>    "teste" : 0.00000000
> }
> 
> Where is my default account listed at "listaccounts" output?!
> 
> Best,
> Thiago
> 
> 2012/2/26 Michael Gr?nager <gronager at ceptacle.com>
> And if you do an update now "help" is there too ;)
> 
> /M
> 
> On 25/02/2012, at 03:11, Martinx - ????? wrote:
> 
>> Thank you!!!
>> 
>> It is all working now! Except "help"...
>> 
>> Nice work Michael!!
>> 
>> Best,
>> Thiago
>> 
>> 2012/2/24 Michael Gr?nager <gronager at ceptacle.com>
>> OK - didn't took the weekend:
>> 
>> support for "port" is on github now :)
>> 
>> Only took two lines:
>> 
>>          ("port", value<unsigned short>(&port)->default_value(8333), "Listen on specified port for the p2p protocol")
>> 
>> and using the port option in the Node constructor (was there already):
>> 
>>      Node node(chain, data_dir, args.count("nolisten") ? "" : "0.0.0.0", lexical_cast<string>(port)); // it is also here we specify the use of a proxy!
>> 
>> /M
>> 
>> 
>> 
>> On 24/02/2012, at 19:49, Martinx - ????? wrote:
>> 
>>> Hi Michael,
>>> 
>>> Thank you for your attention!
>>> 
>>> Now, I'm trying to start libcoin's bitcoind using high ports but, it always try to listen at 8332, no matter what I "say"...
>>> 
>>> Look:
>>> 
>>> $ cat .bitcoin/bitcoin.conf
>>> server=1
>>> daemon=1
>>> rpcuser=libcoin
>>> rpcpassword=LibCoin13
>>> rpcport=10332
>>> port=10333
>>> 
>>> But:
>>> 
>>> /usr/local/bin/bitcoind
>>> Error: Address already in use
>>> 
>>> terminate called after throwing an instance of 'DbException'
>>> what():  DbEnv::close: Invalid argument
>>> Aborted
>>> 
>>> When I "strace it", I can see:
>>> 
>>> ...
>>> bind(12, {sa_family=AF_INET, sin_port=htons(8333), sin_addr=inet_addr("0.0.0.0")}, 16) = -1 EADDRINUSE (Address already in use)
>>> ...
>>> 
>>> I already tried:
>>> 
>>> /usr/local/bin/bitcoind --rpcport 10332
>>> /usr/local/bin/bitcoind --rpcport=10332
>>> 
>>> Without success...
>>> 
>>> Thanks again!
>>> Thiago
>>> 
>>> 2012/2/24 Michael Gr?nager <gronager at ceptacle.com>
>>> Hi Thiago,
>>> 
>>> Forgot to comment on the two latter:
>>> 
>>>> $ bitcoind getaccountaddress ""
>>>> HTTP error code: 401
>>>> Error: couldn't parse reply from server
>>>> 
>>>> $ bitcoind listaccounts
>>>> HTTP error code: 401
>>>> Error: couldn't parse reply from server
>>>> 
>>> 
>>> 401 = permission denied - you need to setup username / password either on the commandline or in the bicoin.conf file to access those commands...
>>> 
>>> See in the bitcoind.cpp file for commands that you can use with and without auth...
>>> 
>>> Those that contains an "auth" requires auth:
>>> 
>>>     server.registerMethod(method_ptr(new GetBalance(wallet)), auth);
>>> 
>>> As opposed to:
>>> 
>>>     server.registerMethod(method_ptr(new GetInfo(node)));
>>> 
>>> auth is defined by:
>>> 
>>>     Auth auth(rpc_user, rpc_pass); // if rpc_user and rpc_pass are not set, all authenticated methods becomes disallowed.
>>> 
>>> so you just experience the case explained in the comment ;) I admit that the output could be more readable, though!
>>> 
>>> /M
>>> 
>>> 
>>>> 
>>>> Any tips?! lol
>>>> 
>>>> Thanks!
>>>> Thiago
>>>> 
>>>> 2012/2/23 Martinx - ????? <thiagocmartinsc at gmail.com>
>>>> AWESOME!!!
>>>> 
>>>> I can compile libcoin at my Ubuntu 11.10... I just need to install:
>>>> 
>>>> sudo aptitude install libboost1.46-all-dev
>>>> 
>>>> ...alongside with another already installed dependencies, and now it works!!
>>>> 
>>>> Thank you!
>>>> Thiago
>>>> 
>>>> 2012/2/23 Michael Gr?nager <gronager at ceptacle.com>
>>>> Hi Martinx,
>>>> 
>>>> Another note:
>>>> 
>>>> boost 1.42 and openssl 1.0 has a conflict (you will see it when you try to compile coinHTTP with that specific combination: sslv2 has been removed from openssl, but boost still references it.)
>>>> 
>>>> You should do a :
>>>> 
>>>> sudo apt-get upgrade libboost-dev-all
>>>> 
>>>> to get the 1.46.1 library
>>>> 
>>>> /M
>>>> 
>>>> 
>>>> On 23/02/2012, at 18:31, Martinx - ????? wrote:
>>>> 
>>>>> Hi Michael!
>>>>> 
>>>>> Thank you for libcoin! It is a awesome evolution for Bitcoin and for the CryptoCurrencies as a hole... Thanks!!!
>>>>> 
>>>>> Anyway, I am unable to compile libcoin under my Ubuntu 11.04. At this machine, I have compiled and running Bitcoin (from sources), Namecoin, Devcoin, Litecoin, IXcoin and I0coin, all from sources but, when I try to compile libcoin, I got:
>>>>> 
>>>>> ----
>>>>> user at desk:~/libcoin$ ./configure
>>>>> -- The C compiler identification is GNU
>>>>> -- The CXX compiler identification is GNU
>>>>> -- Check for working C compiler: /usr/bin/gcc
>>>>> -- Check for working C compiler: /usr/bin/gcc -- works
>>>>> -- Detecting C compiler ABI info
>>>>> -- Detecting C compiler ABI info - done
>>>>> -- Check for working CXX compiler: /usr/bin/c++
>>>>> -- Check for working CXX compiler: /usr/bin/c++ -- works
>>>>> -- Detecting CXX compiler ABI info
>>>>> -- Detecting CXX compiler ABI info - done
>>>>> -- Looking for include files CMAKE_HAVE_PTHREAD_H
>>>>> -- Looking for include files CMAKE_HAVE_PTHREAD_H - found
>>>>> -- Looking for pthread_create in pthreads
>>>>> -- Looking for pthread_create in pthreads - not found
>>>>> -- Looking for pthread_create in pthread
>>>>> -- Looking for pthread_create in pthread - found
>>>>> -- Found Threads: TRUE
>>>>> -- Looking for XOpenDisplay in /usr/lib/i386-linux-gnu/libX11.so;/usr/lib/i386-linux-gnu/libXext.so
>>>>> -- Looking for XOpenDisplay in /usr/lib/i386-linux-gnu/libX11.so;/usr/lib/i386-linux-gnu/libXext.so - found
>>>>> -- Looking for gethostbyname
>>>>> -- Looking for gethostbyname - found
>>>>> -- Looking for connect
>>>>> -- Looking for connect - found
>>>>> -- Looking for remove
>>>>> -- Looking for remove - found
>>>>> -- Looking for shmat
>>>>> -- Looking for shmat - found
>>>>> -- Looking for IceConnectionNumber in ICE
>>>>> -- Looking for IceConnectionNumber in ICE - found
>>>>> -- Found X11: /usr/lib/i386-linux-gnu/libX11.so
>>>>> -- Boost version: 1.42.0
>>>>> -- Found the following Boost libraries:
>>>>> --   date_time
>>>>> --   regex
>>>>> --   filesystem
>>>>> --   system
>>>>> --   program_options
>>>>> --   thread
>>>>> -- Found OpenSSL: /usr/lib/libssl.so;/usr/lib/libcrypto.so
>>>>> -- Looking for Q_WS_X11
>>>>> -- Looking for Q_WS_X11 - found
>>>>> -- Looking for Q_WS_WIN
>>>>> -- Looking for Q_WS_WIN - not found.
>>>>> -- Looking for Q_WS_QWS
>>>>> -- Looking for Q_WS_QWS - not found.
>>>>> -- Looking for Q_WS_MAC
>>>>> -- Looking for Q_WS_MAC - not found.
>>>>> -- Found Qt-Version 4.7.2 (using /usr/bin/qmake)
>>>>> -- Found wxWidgets: TRUE
>>>>> 
>>>>> The build system is configured to install libraries to /usr/local/lib
>>>>> Your applications may not be able to find your installed libraries unless you:
>>>>>  set your LD_LIBRARY_PATH (user specific) or
>>>>>  update your ld.so configuration (system wide)
>>>>> You have an ld.so.conf.d directory on your system, so if you wish to ensure that
>>>>> applications find the installed libcoin libraries, system wide, you could install an
>>>>> libcoin specific ld.so configuration with:
>>>>>  sudo make install_ld_conf
>>>>> 
>>>>> -- Configuring done
>>>>> -- Generating done
>>>>> -- Build files have been written to: /home/user/libcoin
>>>>> ----
>>>>> 
>>>>> Now I tried make, without success:
>>>>> 
>>>>> ----
>>>>> .....
>>>>> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0xf): undefined reference to `BN_init'
>>>>> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x1e): undefined reference to `BN_copy'
>>>>> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x38): undefined reference to `BN_set_negative'
>>>>> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x4f): undefined reference to `BN_clear_free'
>>>>> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0xd3): undefined reference to `BN_clear_free'
>>>>> ../../lib/libcoin.a(Script.o): In function `operator<<(CBigNum const&, unsigned int)':
>>>>> Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&, unsigned int)]+0x16): undefined reference to `BN_init'
>>>>> Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&, unsigned int)]+0x2c): undefined reference to `BN_lshift'
>>>>> Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&, unsigned int)]+0xad): undefined reference to `BN_clear_free'
>>>>> ../../lib/libcoin.a(Script.o): In function `operator>>(CBigNum const&, unsigned int)':
>>>>> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned int)]+0xf): undefined reference to `BN_init'
>>>>> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned int)]+0x1e): undefined reference to `BN_copy'
>>>>> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned int)]+0x47): undefined reference to `BN_clear_free'
>>>>> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned int)]+0xcb): undefined reference to `BN_clear_free'
>>>>> ../../lib/libcoin.a(Script.o): In function `operator!=(CBigNum const&, CBigNum const&)':
>>>>> Script.cpp:(.text._ZneRK7CBigNumS1_[operator!=(CBigNum const&, CBigNum const&)]+0x14): undefined reference to `BN_cmp'
>>>>> ../../lib/libcoin.a(Script.o): In function `operator>(CBigNum const&, CBigNum const&)':
>>>>> Script.cpp:(.text._ZgtRK7CBigNumS1_[operator>(CBigNum const&, CBigNum const&)]+0x14): undefined reference to `BN_cmp'
>>>>> ../../lib/libcoin.a(Script.o): In function `uint256 Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > > >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >)':
>>>>> Script.cpp:(.text._Z4HashIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEE7uint256T_S8_[uint256 Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > > >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >)]+0x6d): undefined reference to `SHA256'
>>>>> Script.cpp:(.text._Z4HashIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEE7uint256T_S8_[uint256 Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > > >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >)]+0xb8): undefined reference to `SHA256'
>>>>> collect2: ld returned 1 exit status
>>>>> make[2]: *** [bin/bitcoind] Error 1
>>>>> make[1]: *** [applications/bitcoind/CMakeFiles/app_bitcoind.dir/all] Error 2
>>>>> make: *** [all] Error 2
>>>>> -----
>>>>> 
>>>>> What can I do?!
>>>>> 
>>>>> Best,
>>>>> Thiago
>>>>> 
>>>>> 
>>>>> On 1 February 2012 12:18, Michael Gr?nager <gronager at ceptacle.com> wrote:
>>>>> Dear Bitcoiners,
>>>>> 
>>>>> libcoin is now in a state ready for its first release, which I would like to share with you!
>>>>> 
>>>>> === libcoin is a crypto currency library based on the bitcoin/bitcoin "Satoshi" client. ===
>>>>> 
>>>>> Copenhagen, Denmark - 1st February 2012 Ceptacle announces the release of the first version of the crypto currency library "libcoin" based on the bitcoin/bitcoin "Satoshi" client.
>>>>> 
>>>>> libcoin also maintains a version of bitcoind that is a 100% compatible drop-in replacement of the bitcoin/bitcoind client: You can use it on the same computer on the same files and you can call it with the same scripts. And you can easily extend it without touching the basic bitcoin source files.
>>>>> 
>>>>> The libcoin/bitcoind client downloads the entire block chain 3.5 times faster than the bitcoin/bitcoind client. This is less than 90 minutes on a modern laptop!
>>>>> 
>>>>> In libcoin, the Satoshi client code has been completely refactored, properly encapsulating classes, removing all globals, moving from threads and mutexes to a pure asynchronous approach. Functionalities have been divided into logical units and libraries, minimizing dependencies for e.g. thin clients.
>>>>> 
>>>>> libcoin is chain agnostic, all chain (bitcoin, testnet, namecoin, litecoin, ...) specific settings are maintained from a single class (Chain) and hence experiments with chain settings, mining, security and digital currencies for research and educational purposes are easily accessible. See the ponzicoin example for how you define your own chain.
>>>>> 
>>>>> The build system of libcoin is based on CMake and supports builds of static and dynamic libraries on Linux, Mac OS X, and Windows.
>>>>> 
>>>>> The libcoin license is LGPL v. 3. This mean that you can use it in open source as well as in commercial projects, but improvements should go back into the libcoin library.
>>>>> 
>>>>> ======
>>>>> 
>>>>> Read more on libcoin on: http://github.com/ceptacle/libcoin/wiki
>>>>> 
>>>>> Join libcoin on twitter: http://twitter.com/libcoin
>>>>> 
>>>>> Download "libcoin Satoshi release": http://github.com/ceptacle/libcoin/zipball/v0.4.0.1
>>>>> 
>>>>> Best regards,
>>>>> 
>>>>> Michael Gronager, PhD
>>>>> Director, Ceptacle
>>>>> Jens Juels Gade 33
>>>>> 2100 Copenhagen E
>>>>> Mobile: +45 31 45 14 01
>>>>> E-mail: gronager at ceptacle.com
>>>>> Web: http://www.ceptacle.com/
>>>>> 
>>>>> 
>>>>> ------------------------------------------------------------------------------
>>>>> Keep Your Developer Skills Current with LearnDevNow!
>>>>> The most comprehensive online learning library for Microsoft developers
>>>>> is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3, MVC3,
>>>>> Metro Style Apps, more. Free future releases when you subscribe now!
>>>>> http://p.sf.net/sfu/learndevnow-d2d
>>>>> _______________________________________________
>>>>> Bitcoin-development mailing list
>>>>> Bitcoin-development at lists.sourceforge.net
>>>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>>>> 
>>>> 
>>>> Michael Gronager, PhD
>>>> Director, Ceptacle
>>>> Jens Juels Gade 33
>>>> 2100 Copenhagen E
>>>> Mobile: +45 31 45 14 01
>>>> E-mail: gronager at ceptacle.com
>>>> Web: http://www.ceptacle.com/
>>>> 
>>>> 
>>>> 
>>> 
>>> 
>> 
>> Michael Gronager, PhD
>> Director, Ceptacle
>> Jens Juels Gade 33
>> 2100 Copenhagen E
>> Mobile: +45 31 45 14 01
>> E-mail: gronager at ceptacle.com
>> Web: http://www.ceptacle.com/
>> 
>> 
> 
> Michael Gronager, PhD
> Director, Ceptacle
> Jens Juels Gade 33
> 2100 Copenhagen E
> Mobile: +45 31 45 14 01
> E-mail: gronager at ceptacle.com
> Web: http://www.ceptacle.com/
> 
> 

Michael Gronager, PhD
Director, Ceptacle
Jens Juels Gade 33
2100 Copenhagen E
Mobile: +45 31 45 14 01
E-mail: gronager at ceptacle.com
Web: http://www.ceptacle.com/




From gronager at ceptacle.com  Tue Feb 28 09:03:40 2012
From: gronager at ceptacle.com (=?iso-8859-1?Q?Michael_Gr=F8nager?=)
Date: Tue, 28 Feb 2012 10:03:40 +0100
Subject: [Bitcoin-development] Announcement: libcoin
In-Reply-To: <CAJSM8J2ytXR0RSL=3+Se6mggH+pDmnkSx+CUp-bcod4qmJ3ObA@mail.gmail.com>
References: <D55C3D18-8286-44E9-B877-6FCE7C05E980@ceptacle.com>
	<CAJSM8J0zqF2=Poknzc8R7TrTJ0DWCMBw2-K9gGhUP_Qf+J6eFg@mail.gmail.com>
	<4FF4A408-F8C9-4A50-8B13-13D3686BEB09@ceptacle.com>
	<CAJSM8J3bZYfpE9EATcYe=79s_RxvGG9BrdRQR9ivwtZnuPsL0w@mail.gmail.com>
	<CAJSM8J2nhoKsOnAeF8qBW3zOfp=sJ25sd8gnw2dMJ3GgkohDjQ@mail.gmail.com>
	<C3C58158-0DED-41A1-B4D2-BF746AFE717A@ceptacle.com>
	<CAJSM8J3255LpXbHRF+zEi0QRoM0mwuRP3FSNbSwSyz-_ge=Few@mail.gmail.com>
	<3C518667-C2A6-4D1F-988D-888964925489@ceptacle.com>
	<CAJSM8J2-+uHKJg9xjqtz785HBNY8wXtJLnw70jP0_HgNspx4Tg@mail.gmail.com>
	<AB5AEA73-93BD-440E-89F0-F0951047D71A@ceptacle.com>
	<CAJSM8J2ytXR0RSL=3+Se6mggH+pDmnkSx+CUp-bcod4qmJ3ObA@mail.gmail.com>
Message-ID: <07A82C1E-AE1D-44DC-AF02-38A3D755FA35@ceptacle.com>

Hi again - and thanks for testing and finding this!

I have fixed the bug you reported:

The culprit was an implicit string constructor for the ChainAddress that caused creation of a not fully initialized ChainAddress. The right way to do it is using chain::getAddress(string) as the ChainAddress is chain specific. 

A git pull will fix it ;)

Cheers,

Michael


On 27/02/2012, at 20:03, Martinx - ????? wrote:

> AWESOME!! Thank you!!
> 
> Anyway, I found a new problem... lol
> 
> /usr/local/bin/bitcoind getinfo #okay
> {
>    "version" : 40001,
>    "blocks" : 168753,
>    "connections" : 8,
>    "difficulty" : 1376302.26788638,
>    "testnet" : false
> }
> 
> /usr/local/bin/bitcoind getaccountaddress ""  # okay...
> 1J4vNcvEdeCuLH4yvyoC2gxFEF4zquoJ87
> 
> /usr/local/bin/bitcoind listaccounts # NOT okay...
> {
> }
> 
> /usr/local/bin/bitcoind getaccountaddress "teste" # okay
> 1E6pGh6AAtuJdFXheZMp1zdYmvdqAQn9QT
> 
> /usr/local/bin/bitcoind listaccounts # NOT okay...
> {
>    "teste" : 0.00000000
> }
> 
> Where is my default account listed at "listaccounts" output?!
> 
> Best,
> Thiago
> 
> 2012/2/26 Michael Gr?nager <gronager at ceptacle.com>
> And if you do an update now "help" is there too ;)
> 
> /M
> 
> On 25/02/2012, at 03:11, Martinx - ????? wrote:
> 
>> Thank you!!!
>> 
>> It is all working now! Except "help"...
>> 
>> Nice work Michael!!
>> 
>> Best,
>> Thiago
>> 
>> 2012/2/24 Michael Gr?nager <gronager at ceptacle.com>
>> OK - didn't took the weekend:
>> 
>> support for "port" is on github now :)
>> 
>> Only took two lines:
>> 
>>          ("port", value<unsigned short>(&port)->default_value(8333), "Listen on specified port for the p2p protocol")
>> 
>> and using the port option in the Node constructor (was there already):
>> 
>>      Node node(chain, data_dir, args.count("nolisten") ? "" : "0.0.0.0", lexical_cast<string>(port)); // it is also here we specify the use of a proxy!
>> 
>> /M
>> 
>> 
>> 
>> On 24/02/2012, at 19:49, Martinx - ????? wrote:
>> 
>>> Hi Michael,
>>> 
>>> Thank you for your attention!
>>> 
>>> Now, I'm trying to start libcoin's bitcoind using high ports but, it always try to listen at 8332, no matter what I "say"...
>>> 
>>> Look:
>>> 
>>> $ cat .bitcoin/bitcoin.conf
>>> server=1
>>> daemon=1
>>> rpcuser=libcoin
>>> rpcpassword=LibCoin13
>>> rpcport=10332
>>> port=10333
>>> 
>>> But:
>>> 
>>> /usr/local/bin/bitcoind
>>> Error: Address already in use
>>> 
>>> terminate called after throwing an instance of 'DbException'
>>> what():  DbEnv::close: Invalid argument
>>> Aborted
>>> 
>>> When I "strace it", I can see:
>>> 
>>> ...
>>> bind(12, {sa_family=AF_INET, sin_port=htons(8333), sin_addr=inet_addr("0.0.0.0")}, 16) = -1 EADDRINUSE (Address already in use)
>>> ...
>>> 
>>> I already tried:
>>> 
>>> /usr/local/bin/bitcoind --rpcport 10332
>>> /usr/local/bin/bitcoind --rpcport=10332
>>> 
>>> Without success...
>>> 
>>> Thanks again!
>>> Thiago
>>> 
>>> 2012/2/24 Michael Gr?nager <gronager at ceptacle.com>
>>> Hi Thiago,
>>> 
>>> Forgot to comment on the two latter:
>>> 
>>>> $ bitcoind getaccountaddress ""
>>>> HTTP error code: 401
>>>> Error: couldn't parse reply from server
>>>> 
>>>> $ bitcoind listaccounts
>>>> HTTP error code: 401
>>>> Error: couldn't parse reply from server
>>>> 
>>> 
>>> 401 = permission denied - you need to setup username / password either on the commandline or in the bicoin.conf file to access those commands...
>>> 
>>> See in the bitcoind.cpp file for commands that you can use with and without auth...
>>> 
>>> Those that contains an "auth" requires auth:
>>> 
>>>     server.registerMethod(method_ptr(new GetBalance(wallet)), auth);
>>> 
>>> As opposed to:
>>> 
>>>     server.registerMethod(method_ptr(new GetInfo(node)));
>>> 
>>> auth is defined by:
>>> 
>>>     Auth auth(rpc_user, rpc_pass); // if rpc_user and rpc_pass are not set, all authenticated methods becomes disallowed.
>>> 
>>> so you just experience the case explained in the comment ;) I admit that the output could be more readable, though!
>>> 
>>> /M
>>> 
>>> 
>>>> 
>>>> Any tips?! lol
>>>> 
>>>> Thanks!
>>>> Thiago
>>>> 
>>>> 2012/2/23 Martinx - ????? <thiagocmartinsc at gmail.com>
>>>> AWESOME!!!
>>>> 
>>>> I can compile libcoin at my Ubuntu 11.10... I just need to install:
>>>> 
>>>> sudo aptitude install libboost1.46-all-dev
>>>> 
>>>> ...alongside with another already installed dependencies, and now it works!!
>>>> 
>>>> Thank you!
>>>> Thiago
>>>> 
>>>> 2012/2/23 Michael Gr?nager <gronager at ceptacle.com>
>>>> Hi Martinx,
>>>> 
>>>> Another note:
>>>> 
>>>> boost 1.42 and openssl 1.0 has a conflict (you will see it when you try to compile coinHTTP with that specific combination: sslv2 has been removed from openssl, but boost still references it.)
>>>> 
>>>> You should do a :
>>>> 
>>>> sudo apt-get upgrade libboost-dev-all
>>>> 
>>>> to get the 1.46.1 library
>>>> 
>>>> /M
>>>> 
>>>> 
>>>> On 23/02/2012, at 18:31, Martinx - ????? wrote:
>>>> 
>>>>> Hi Michael!
>>>>> 
>>>>> Thank you for libcoin! It is a awesome evolution for Bitcoin and for the CryptoCurrencies as a hole... Thanks!!!
>>>>> 
>>>>> Anyway, I am unable to compile libcoin under my Ubuntu 11.04. At this machine, I have compiled and running Bitcoin (from sources), Namecoin, Devcoin, Litecoin, IXcoin and I0coin, all from sources but, when I try to compile libcoin, I got:
>>>>> 
>>>>> ----
>>>>> user at desk:~/libcoin$ ./configure
>>>>> -- The C compiler identification is GNU
>>>>> -- The CXX compiler identification is GNU
>>>>> -- Check for working C compiler: /usr/bin/gcc
>>>>> -- Check for working C compiler: /usr/bin/gcc -- works
>>>>> -- Detecting C compiler ABI info
>>>>> -- Detecting C compiler ABI info - done
>>>>> -- Check for working CXX compiler: /usr/bin/c++
>>>>> -- Check for working CXX compiler: /usr/bin/c++ -- works
>>>>> -- Detecting CXX compiler ABI info
>>>>> -- Detecting CXX compiler ABI info - done
>>>>> -- Looking for include files CMAKE_HAVE_PTHREAD_H
>>>>> -- Looking for include files CMAKE_HAVE_PTHREAD_H - found
>>>>> -- Looking for pthread_create in pthreads
>>>>> -- Looking for pthread_create in pthreads - not found
>>>>> -- Looking for pthread_create in pthread
>>>>> -- Looking for pthread_create in pthread - found
>>>>> -- Found Threads: TRUE
>>>>> -- Looking for XOpenDisplay in /usr/lib/i386-linux-gnu/libX11.so;/usr/lib/i386-linux-gnu/libXext.so
>>>>> -- Looking for XOpenDisplay in /usr/lib/i386-linux-gnu/libX11.so;/usr/lib/i386-linux-gnu/libXext.so - found
>>>>> -- Looking for gethostbyname
>>>>> -- Looking for gethostbyname - found
>>>>> -- Looking for connect
>>>>> -- Looking for connect - found
>>>>> -- Looking for remove
>>>>> -- Looking for remove - found
>>>>> -- Looking for shmat
>>>>> -- Looking for shmat - found
>>>>> -- Looking for IceConnectionNumber in ICE
>>>>> -- Looking for IceConnectionNumber in ICE - found
>>>>> -- Found X11: /usr/lib/i386-linux-gnu/libX11.so
>>>>> -- Boost version: 1.42.0
>>>>> -- Found the following Boost libraries:
>>>>> --   date_time
>>>>> --   regex
>>>>> --   filesystem
>>>>> --   system
>>>>> --   program_options
>>>>> --   thread
>>>>> -- Found OpenSSL: /usr/lib/libssl.so;/usr/lib/libcrypto.so
>>>>> -- Looking for Q_WS_X11
>>>>> -- Looking for Q_WS_X11 - found
>>>>> -- Looking for Q_WS_WIN
>>>>> -- Looking for Q_WS_WIN - not found.
>>>>> -- Looking for Q_WS_QWS
>>>>> -- Looking for Q_WS_QWS - not found.
>>>>> -- Looking for Q_WS_MAC
>>>>> -- Looking for Q_WS_MAC - not found.
>>>>> -- Found Qt-Version 4.7.2 (using /usr/bin/qmake)
>>>>> -- Found wxWidgets: TRUE
>>>>> 
>>>>> The build system is configured to install libraries to /usr/local/lib
>>>>> Your applications may not be able to find your installed libraries unless you:
>>>>>  set your LD_LIBRARY_PATH (user specific) or
>>>>>  update your ld.so configuration (system wide)
>>>>> You have an ld.so.conf.d directory on your system, so if you wish to ensure that
>>>>> applications find the installed libcoin libraries, system wide, you could install an
>>>>> libcoin specific ld.so configuration with:
>>>>>  sudo make install_ld_conf
>>>>> 
>>>>> -- Configuring done
>>>>> -- Generating done
>>>>> -- Build files have been written to: /home/user/libcoin
>>>>> ----
>>>>> 
>>>>> Now I tried make, without success:
>>>>> 
>>>>> ----
>>>>> .....
>>>>> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0xf): undefined reference to `BN_init'
>>>>> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x1e): undefined reference to `BN_copy'
>>>>> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x38): undefined reference to `BN_set_negative'
>>>>> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x4f): undefined reference to `BN_clear_free'
>>>>> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0xd3): undefined reference to `BN_clear_free'
>>>>> ../../lib/libcoin.a(Script.o): In function `operator<<(CBigNum const&, unsigned int)':
>>>>> Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&, unsigned int)]+0x16): undefined reference to `BN_init'
>>>>> Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&, unsigned int)]+0x2c): undefined reference to `BN_lshift'
>>>>> Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&, unsigned int)]+0xad): undefined reference to `BN_clear_free'
>>>>> ../../lib/libcoin.a(Script.o): In function `operator>>(CBigNum const&, unsigned int)':
>>>>> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned int)]+0xf): undefined reference to `BN_init'
>>>>> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned int)]+0x1e): undefined reference to `BN_copy'
>>>>> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned int)]+0x47): undefined reference to `BN_clear_free'
>>>>> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned int)]+0xcb): undefined reference to `BN_clear_free'
>>>>> ../../lib/libcoin.a(Script.o): In function `operator!=(CBigNum const&, CBigNum const&)':
>>>>> Script.cpp:(.text._ZneRK7CBigNumS1_[operator!=(CBigNum const&, CBigNum const&)]+0x14): undefined reference to `BN_cmp'
>>>>> ../../lib/libcoin.a(Script.o): In function `operator>(CBigNum const&, CBigNum const&)':
>>>>> Script.cpp:(.text._ZgtRK7CBigNumS1_[operator>(CBigNum const&, CBigNum const&)]+0x14): undefined reference to `BN_cmp'
>>>>> ../../lib/libcoin.a(Script.o): In function `uint256 Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > > >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >)':
>>>>> Script.cpp:(.text._Z4HashIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEE7uint256T_S8_[uint256 Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > > >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >)]+0x6d): undefined reference to `SHA256'
>>>>> Script.cpp:(.text._Z4HashIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEE7uint256T_S8_[uint256 Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > > >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >)]+0xb8): undefined reference to `SHA256'
>>>>> collect2: ld returned 1 exit status
>>>>> make[2]: *** [bin/bitcoind] Error 1
>>>>> make[1]: *** [applications/bitcoind/CMakeFiles/app_bitcoind.dir/all] Error 2
>>>>> make: *** [all] Error 2
>>>>> -----
>>>>> 
>>>>> What can I do?!
>>>>> 
>>>>> Best,
>>>>> Thiago
>>>>> 
>>>>> 
>>>>> On 1 February 2012 12:18, Michael Gr?nager <gronager at ceptacle.com> wrote:
>>>>> Dear Bitcoiners,
>>>>> 
>>>>> libcoin is now in a state ready for its first release, which I would like to share with you!
>>>>> 
>>>>> === libcoin is a crypto currency library based on the bitcoin/bitcoin "Satoshi" client. ===
>>>>> 
>>>>> Copenhagen, Denmark - 1st February 2012 Ceptacle announces the release of the first version of the crypto currency library "libcoin" based on the bitcoin/bitcoin "Satoshi" client.
>>>>> 
>>>>> libcoin also maintains a version of bitcoind that is a 100% compatible drop-in replacement of the bitcoin/bitcoind client: You can use it on the same computer on the same files and you can call it with the same scripts. And you can easily extend it without touching the basic bitcoin source files.
>>>>> 
>>>>> The libcoin/bitcoind client downloads the entire block chain 3.5 times faster than the bitcoin/bitcoind client. This is less than 90 minutes on a modern laptop!
>>>>> 
>>>>> In libcoin, the Satoshi client code has been completely refactored, properly encapsulating classes, removing all globals, moving from threads and mutexes to a pure asynchronous approach. Functionalities have been divided into logical units and libraries, minimizing dependencies for e.g. thin clients.
>>>>> 
>>>>> libcoin is chain agnostic, all chain (bitcoin, testnet, namecoin, litecoin, ...) specific settings are maintained from a single class (Chain) and hence experiments with chain settings, mining, security and digital currencies for research and educational purposes are easily accessible. See the ponzicoin example for how you define your own chain.
>>>>> 
>>>>> The build system of libcoin is based on CMake and supports builds of static and dynamic libraries on Linux, Mac OS X, and Windows.
>>>>> 
>>>>> The libcoin license is LGPL v. 3. This mean that you can use it in open source as well as in commercial projects, but improvements should go back into the libcoin library.
>>>>> 
>>>>> ======
>>>>> 
>>>>> Read more on libcoin on: http://github.com/ceptacle/libcoin/wiki
>>>>> 
>>>>> Join libcoin on twitter: http://twitter.com/libcoin
>>>>> 
>>>>> Download "libcoin Satoshi release": http://github.com/ceptacle/libcoin/zipball/v0.4.0.1
>>>>> 
>>>>> Best regards,
>>>>> 
>>>>> Michael Gronager, PhD
>>>>> Director, Ceptacle
>>>>> Jens Juels Gade 33
>>>>> 2100 Copenhagen E
>>>>> Mobile: +45 31 45 14 01
>>>>> E-mail: gronager at ceptacle.com
>>>>> Web: http://www.ceptacle.com/
>>>>> 
>>>>> 
>>>>> ------------------------------------------------------------------------------
>>>>> Keep Your Developer Skills Current with LearnDevNow!
>>>>> The most comprehensive online learning library for Microsoft developers
>>>>> is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3, MVC3,
>>>>> Metro Style Apps, more. Free future releases when you subscribe now!
>>>>> http://p.sf.net/sfu/learndevnow-d2d
>>>>> _______________________________________________
>>>>> Bitcoin-development mailing list
>>>>> Bitcoin-development at lists.sourceforge.net
>>>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>>>> 
>>>> 
>>>> Michael Gronager, PhD
>>>> Director, Ceptacle
>>>> Jens Juels Gade 33
>>>> 2100 Copenhagen E
>>>> Mobile: +45 31 45 14 01
>>>> E-mail: gronager at ceptacle.com
>>>> Web: http://www.ceptacle.com/
>>>> 
>>>> 
>>>> 
>>> 
>>> 
>> 
>> Michael Gronager, PhD
>> Director, Ceptacle
>> Jens Juels Gade 33
>> 2100 Copenhagen E
>> Mobile: +45 31 45 14 01
>> E-mail: gronager at ceptacle.com
>> Web: http://www.ceptacle.com/
>> 
>> 
> 
> Michael Gronager, PhD
> Director, Ceptacle
> Jens Juels Gade 33
> 2100 Copenhagen E
> Mobile: +45 31 45 14 01
> E-mail: gronager at ceptacle.com
> Web: http://www.ceptacle.com/
> 
> 

Michael Gronager, PhD
Director, Ceptacle
Jens Juels Gade 33
2100 Copenhagen E
Mobile: +45 31 45 14 01
E-mail: gronager at ceptacle.com
Web: http://www.ceptacle.com/




From pieter.wuille at gmail.com  Tue Feb 28 16:48:39 2012
From: pieter.wuille at gmail.com (Pieter Wuille)
Date: Tue, 28 Feb 2012 17:48:39 +0100
Subject: [Bitcoin-development] Duplicate transactions vulnerability
Message-ID: <CAPg+sBhb+gYMwp1OJuCHYt5=BU63=YBWOFaLLthHBkN_U-scaA@mail.gmail.com>

Hello all,

as some of you may know, a vulnerability has been found in how the
Bitcoin reference client deals with duplicate transactions. Exploiting
it is rather complex, requires some hash power, and has no financial
benefit for the attacker. Still, it's a security hole, and we'd like
to fix this as soon as possible.

A simple way to fix this, is adding an extra protocol rule[1]:

  Do not allow blocks to contain a transaction whose hash is equal to
that of a former transaction which has not yet been completely spent.

I've written about it in BIP30[2]. There is a patch for the reference
client, which has been tested and verified to make the attack
impossible. The change is backward compatible in the same way BIP16
is: if a supermajority of mining power implements it, old clients can
continue to function without risk.

The purpose of this mail is asking for support for adding this rule to
the protocol rules. If there is consensus this rule is the solution, I
hope pools and miners can agree to update their nodes without lengthy
coinbase-flagging procedure that would only delay a solution. So, who
is in favor?

  [1] https://en.bitcoin.it/wiki/Protocol_rules
  [2] https://en.bitcoin.it/wiki/BIP_0030

-- 
Pieter



From robert.brautigam at netmind.hu  Tue Feb 28 17:12:12 2012
From: robert.brautigam at netmind.hu (=?ISO-8859-1?Q?Brautigam_R=F3bert?=)
Date: Tue, 28 Feb 2012 18:12:12 +0100
Subject: [Bitcoin-development] Duplicate transactions vulnerability
In-Reply-To: <CAPg+sBhb+gYMwp1OJuCHYt5=BU63=YBWOFaLLthHBkN_U-scaA@mail.gmail.com>
References: <CAPg+sBhb+gYMwp1OJuCHYt5=BU63=YBWOFaLLthHBkN_U-scaA@mail.gmail.com>
Message-ID: <4F4D0AEC.8060400@netmind.hu>

On 02/28/2012 05:48 PM, Pieter Wuille wrote:
> Hello all,

Hi,

> as some of you may know, a vulnerability has been found in how the
> Bitcoin reference client deals with duplicate transactions. Exploiting
> it is rather complex, requires some hash power, and has no financial
> benefit for the attacker. Still, it's a security hole, and we'd like
> to fix this as soon as possible.
>
> A simple way to fix this, is adding an extra protocol rule[1]:
>
>    Do not allow blocks to contain a transaction whose hash is equal to
> that of a former transaction which has not yet been completely spent.

I don't know whether I understand this correctly, but there should be no 
duplicate transaction hashes at all. So the rule should be: Do not allow 
blocks to contain transaction hashes which are already present in that 
branch.

If by a freak accident a transaction has the same hash as another 
transaction in the chain, shouldn't the transaction be "tweaked" in some 
way to avoid collision (generate a new target address for it or 
something)? In any case this seams very-very unlikely to happen, or am I 
missing something?

Robert.



From pieter.wuille at gmail.com  Tue Feb 28 17:18:12 2012
From: pieter.wuille at gmail.com (Pieter Wuille)
Date: Tue, 28 Feb 2012 18:18:12 +0100
Subject: [Bitcoin-development] Duplicate transactions vulnerability
In-Reply-To: <4F4D0AEC.8060400@netmind.hu>
References: <CAPg+sBhb+gYMwp1OJuCHYt5=BU63=YBWOFaLLthHBkN_U-scaA@mail.gmail.com>
	<4F4D0AEC.8060400@netmind.hu>
Message-ID: <CAPg+sBj==4kaeoQJ8YDHSCSr9H4Frbu6zDz8qDAwwLAF4mefJg@mail.gmail.com>

On Tue, Feb 28, 2012 at 18:12, Brautigam R?bert
<robert.brautigam at netmind.hu> wrote:
>> A simple way to fix this, is adding an extra protocol rule[1]:
>>
>> ? ?Do not allow blocks to contain a transaction whose hash is equal to
>> that of a former transaction which has not yet been completely spent.
>
> I don't know whether I understand this correctly, but there should be no
> duplicate transaction hashes at all. So the rule should be: Do not allow
> blocks to contain transaction hashes which are already present in that
> branch.

As explained in the BIP, that would prevent pruning, as it would
require each full node to keep a database with all transaction hashes
ever.

> If by a freak accident a transaction has the same hash as another
> transaction in the chain, shouldn't the transaction be "tweaked" in some
> way to avoid collision (generate a new target address for it or
> something)? In any case this seams very-very unlikely to happen, or am I
> missing something?

It won't happen by accident. Duplicate coinbase transactions are
possible however (by badly written software, or malicious intent).
Transactions that spend duplcate coinbases can be made to have the
same hash as well.

-- 
Pieter



From gavinandresen at gmail.com  Tue Feb 28 18:10:41 2012
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Tue, 28 Feb 2012 13:10:41 -0500
Subject: [Bitcoin-development] Duplicate transactions vulnerability
In-Reply-To: <CAPg+sBhb+gYMwp1OJuCHYt5=BU63=YBWOFaLLthHBkN_U-scaA@mail.gmail.com>
References: <CAPg+sBhb+gYMwp1OJuCHYt5=BU63=YBWOFaLLthHBkN_U-scaA@mail.gmail.com>
Message-ID: <CABsx9T3-H9uSNjQ2mXTZ9rA62Gn7vWe8Z+GK2rQTzrvcN_PRQg@mail.gmail.com>

>
> The purpose of this mail is asking for support for adding this rule to
> the protocol rules. If there is consensus this rule is the solution, I
> hope pools and miners can agree to update their nodes without lengthy
> coinbase-flagging procedure that would only delay a solution. So, who
> is in favor?

Pieter
>

Most of you might already know this, but I'm strongly in favor of doing
this as soon as possible.

-- 
--
Gavin Andresen
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120228/926bf896/attachment.html>

From luke at dashjr.org  Tue Feb 28 18:23:01 2012
From: luke at dashjr.org (Luke-Jr)
Date: Tue, 28 Feb 2012 13:23:01 -0500
Subject: [Bitcoin-development] Duplicate transactions vulnerability
In-Reply-To: <CAPg+sBhb+gYMwp1OJuCHYt5=BU63=YBWOFaLLthHBkN_U-scaA@mail.gmail.com>
References: <CAPg+sBhb+gYMwp1OJuCHYt5=BU63=YBWOFaLLthHBkN_U-scaA@mail.gmail.com>
Message-ID: <201202281323.02976.luke@dashjr.org>

On Tuesday, February 28, 2012 11:48:39 AM Pieter Wuille wrote:
> A simple way to fix this, is adding an extra protocol rule[1]:
> 
>   Do not allow blocks to contain a transaction whose hash is equal to
> that of a former transaction which has not yet been completely spent.
> 
> I've written about it in BIP30[2]. There is a patch for the reference
> client, which has been tested and verified to make the attack
> impossible.

Has it been verified to make even rocconor's complicated transaction-based 
version impossible?

> The purpose of this mail is asking for support for adding this rule to
> the protocol rules. If there is consensus this rule is the solution, I
> hope pools and miners can agree to update their nodes without lengthy
> coinbase-flagging procedure that would only delay a solution. So, who
> is in favor?

Can we do this in two steps? First, prefer blocks which don't break the rule; 
once 55%+ are confirmed to have upgraded, then it is safe to treat it as a 
hard rule.



From gavinandresen at gmail.com  Tue Feb 28 18:56:26 2012
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Tue, 28 Feb 2012 13:56:26 -0500
Subject: [Bitcoin-development] Anything to chat about today at 21:00 UTC ?
Message-ID: <CABsx9T3t_=BWJ0PvTLTS=oGxVYA1vRTD3t3Wo5D1=jfO6HG-7g@mail.gmail.com>

I'll be in the #bitcoin-development IRC channel in two hours, for the
semi-regular Tuesday IRC meeting. Things that might be worth some
discussion:

+ The duplicate coinbase attack/fix, and strategy for rolling out sipa's
fix.

+ 0.6 release schedule

+ Is there anything we can do to attract a great Windows developer?  (we've
got issues piling up...)

+ Multisignature next-steps: who is working on what?

Am I forgetting anything?

-- 
--
Gavin Andresen
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120228/7d93b246/attachment.html>

From david at bitcoin.se  Tue Feb 28 19:33:16 2012
From: david at bitcoin.se (D.H.)
Date: Tue, 28 Feb 2012 20:33:16 +0100
Subject: [Bitcoin-development] Anything to chat about today at 21:00 UTC
	?
In-Reply-To: <CABsx9T3t_=BWJ0PvTLTS=oGxVYA1vRTD3t3Wo5D1=jfO6HG-7g@mail.gmail.com>
References: <CABsx9T3t_=BWJ0PvTLTS=oGxVYA1vRTD3t3Wo5D1=jfO6HG-7g@mail.gmail.com>
Message-ID: <CANf5GBh1khJUBkz4aTVecVUr=T2H_CGg3w+sSbFLqvE4hcsegg@mail.gmail.com>

I probably won't be on IRC but...

> Is there anything we can do to attract a great Windows developer?

A couple of months ago I mentioned the possibility to get free advertising
for open source projects on StackOverflow. Perhaps this is the time to do
it, we could make an ad specifically for windows developers. See this:

http://meta.stackoverflow.com/questions/114442/open-source-advertising-sidebar-1h-2012

Shouldn't be a problem for us to get 30 votes with some help from the forum.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120228/e70ce284/attachment.html>

From pieter.wuille at gmail.com  Tue Feb 28 20:24:15 2012
From: pieter.wuille at gmail.com (Pieter Wuille)
Date: Tue, 28 Feb 2012 21:24:15 +0100
Subject: [Bitcoin-development] Duplicate transactions vulnerability
In-Reply-To: <201202281323.02976.luke@dashjr.org>
References: <CAPg+sBhb+gYMwp1OJuCHYt5=BU63=YBWOFaLLthHBkN_U-scaA@mail.gmail.com>
	<201202281323.02976.luke@dashjr.org>
Message-ID: <20120228202414.GA16255@vps7135.xlshosting.net>

On Tue, Feb 28, 2012 at 01:23:01PM -0500, Luke-Jr wrote:
> Has it been verified to make even rocconor's complicated transaction-based 
> version impossible?

Yes, he tried it on testnet against a patched node.

> > The purpose of this mail is asking for support for adding this rule to
> > the protocol rules. If there is consensus this rule is the solution, I
> > hope pools and miners can agree to update their nodes without lengthy
> > coinbase-flagging procedure that would only delay a solution. So, who
> > is in favor?
> 
> Can we do this in two steps? First, prefer blocks which don't break the rule; 
> once 55%+ are confirmed to have upgraded, then it is safe to treat it as a 
> hard rule.

I prefer to avoid this if possible, as it increases the size of the patch
significantly. In particular, it would require the discouragement-system to
be backported to whatever versions pools are running. The current proposal
only requires adding 6 lines of code.

-- 
Pieter




From support at pi.uk.com  Tue Feb 28 20:35:05 2012
From: support at pi.uk.com (Ben Reeves)
Date: Tue, 28 Feb 2012 20:35:05 +0000
Subject: [Bitcoin-development] Duplicate transactions vulnerability
In-Reply-To: <201202281323.02976.luke@dashjr.org>
References: <CAPg+sBhb+gYMwp1OJuCHYt5=BU63=YBWOFaLLthHBkN_U-scaA@mail.gmail.com>
	<201202281323.02976.luke@dashjr.org>
Message-ID: <736F8531-28F8-4219-9DE9-3F201FC7DCF4@pi.uk.com>


I might be wrong but I think perhaps it would help to get this fix out before the p2sh protocol change. Otherwise a miner could combine a duplicate coinbase and an invalid P2SH transaction to create a block which can have excellent network propagation and still be guaranteed to be orphaned. This makes the attack significantly easier to perform.

If someone were to do this on the day of the P2SH switchover they could corrupt the database of all clients < 0.6 with only a single block. If it was done on an early block and was widespread enough it would make it difficult for new clients to find a genuine non-corrupted copy of the blockchain to download.

Thank You,
Ben Reeves
www.blockchain.info


On 28 Feb 2012, at 18:23, Luke-Jr wrote:

> On Tuesday, February 28, 2012 11:48:39 AM Pieter Wuille wrote:
>> A simple way to fix this, is adding an extra protocol rule[1]:
>> 
>>  Do not allow blocks to contain a transaction whose hash is equal to
>> that of a former transaction which has not yet been completely spent.
>> 
>> I've written about it in BIP30[2]. There is a patch for the reference
>> client, which has been tested and verified to make the attack
>> impossible.
> 
> Has it been verified to make even rocconor's complicated transaction-based 
> version impossible?
> 
>> The purpose of this mail is asking for support for adding this rule to
>> the protocol rules. If there is consensus this rule is the solution, I
>> hope pools and miners can agree to update their nodes without lengthy
>> coinbase-flagging procedure that would only delay a solution. So, who
>> is in favor?
> 
> Can we do this in two steps? First, prefer blocks which don't break the rule; 
> once 55%+ are confirmed to have upgraded, then it is safe to treat it as a 
> hard rule.
> 
> ------------------------------------------------------------------------------
> Keep Your Developer Skills Current with LearnDevNow!
> The most comprehensive online learning library for Microsoft developers
> is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3, MVC3,
> Metro Style Apps, more. Free future releases when you subscribe now!
> http://p.sf.net/sfu/learndevnow-d2d
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120228/6ef43bce/attachment.html>

From luke at dashjr.org  Tue Feb 28 22:06:20 2012
From: luke at dashjr.org (Luke-Jr)
Date: Tue, 28 Feb 2012 17:06:20 -0500
Subject: [Bitcoin-development] getmemorypool BIP process
Message-ID: <201202281706.22650.luke@dashjr.org>

Please review and comment/critique:
    https://en.bitcoin.it/wiki/BIP_DRAFT:_getmemorypool



From zooko at zooko.com  Wed Feb 29 01:41:31 2012
From: zooko at zooko.com (Zooko Wilcox-O'Hearn)
Date: Tue, 28 Feb 2012 18:41:31 -0700
Subject: [Bitcoin-development] Duplicate transactions vulnerability
In-Reply-To: <CAPg+sBhb+gYMwp1OJuCHYt5=BU63=YBWOFaLLthHBkN_U-scaA@mail.gmail.com>
References: <CAPg+sBhb+gYMwp1OJuCHYt5=BU63=YBWOFaLLthHBkN_U-scaA@mail.gmail.com>
Message-ID: <CANdZDc7c5D7YmAn7GUO+--9U2Z3Lz-CR9E-QsKriVeMoudeipA@mail.gmail.com>

Could you spell out the attack explicitly? Presumably there aren't a
lot of people with the "malice energy" to perform the attack but not
to figure it out for themselves. I, however, have the "niceness
energy" to think about it for a few minutes but not to figure it out
for myself. If in your opinion it is realistically dangerous to post
it publicly, would you be so kind as to include me in the private
sharing of the explanation?

By the way, I found a couple of cases of slightly bad handling of
merkle trees when I inspected the code (v0.4) that was, I'm 99% sure,
not exploitable. I never got around to reporting it yet. I'm sorry
about that. My discoveries might interact with the one you're talking
about here. I should definitely explain mine to y'all soon. (Possibly
in private for the first pass, in case it is more exploitable than I
thought, or has become exploitable since v0.4.)

I showed it to a couple of other people at the time who helped me make
sure that it wasn't exploitable.

I'll make time to explain what I found within a week.

Regards,

Zooko



From gronager at ceptacle.com  Wed Feb 29 13:09:26 2012
From: gronager at ceptacle.com (Michael Gronager)
Date: Wed, 29 Feb 2012 14:09:26 +0100
Subject: [Bitcoin-development] NATPMP and proxy support in libcoin
Message-ID: <A0ED94EF-D9BE-4015-A8CB-30527CAA72EA@ceptacle.com>

I just finished adding NATPMP, together with IDG UPnP, to libcoin. This enables libcoin/bitcoind to setup port mapping also on Apple routers (AirPort Extreme/Express/TimeMachine) and a few other that supports this protocol.

libcoin/bitcoind first tried to setup mapping using UPnP, if that fails it resorts to using PMP. 

It chooses a lease time of (default) 20 minutes and renews this every 10 minutes. This also means that if you are running libcoin on your laptop it will, when e.g. moved to your work, just setup the mapping there and the mapping back home will silently expire.

To include portmapping in libcoin/bitcoind the only thing needed is to add the PortMapper class and start it:

        PortMapper mapper(node.get_io_service(), port);
        if(portmap) mapper.start();

where "portmap" is the former "upnp" command line option.

Also note that I choose to include the relevant portions of miniupnpc and libnatpmp in the coinNAT library to make it easier to build.

I choose to make a rather aggressive setting for quitting searching for an IGD device (3 seconds). If I waited too long here the PMP port mapping would only kick in after the other clients had tried to connect to the new node and timed out.

If it is too small please notify me - I only have access to a UPnP router sporadicly. 

And btw: Also added proxy capability to libcoin (have a look in coinChain/Proxy.h for implementation details).

Cheers,

Michael


From pieter.wuille at gmail.com  Wed Feb 29 16:47:48 2012
From: pieter.wuille at gmail.com (Pieter Wuille)
Date: Wed, 29 Feb 2012 17:47:48 +0100
Subject: [Bitcoin-development] Duplicate transactions vulnerability
In-Reply-To: <CANdZDc7c5D7YmAn7GUO+--9U2Z3Lz-CR9E-QsKriVeMoudeipA@mail.gmail.com>
References: <CAPg+sBhb+gYMwp1OJuCHYt5=BU63=YBWOFaLLthHBkN_U-scaA@mail.gmail.com>
	<CANdZDc7c5D7YmAn7GUO+--9U2Z3Lz-CR9E-QsKriVeMoudeipA@mail.gmail.com>
Message-ID: <20120229164747.GA581@vps7135.xlshosting.net>

On Tue, Feb 28, 2012 at 06:41:31PM -0700, Zooko Wilcox-O'Hearn wrote:
> Could you spell out the attack explicitly? Presumably there aren't a
> lot of people with the "malice energy" to perform the attack but not
> to figure it out for themselves. I, however, have the "niceness
> energy" to think about it for a few minutes but not to figure it out
> for myself. If in your opinion it is realistically dangerous to post
> it publicly, would you be so kind as to include me in the private
> sharing of the explanation?

It's not exactly a secret anymore, as the patch also references it.
Russell O'Connor described the attack on his blog:
http://r6.ca/blog/20120206T005236Z.html

-- 
Pieter



From zgenjix at yahoo.com  Wed Feb 29 17:02:29 2012
From: zgenjix at yahoo.com (Amir Taaki)
Date: Wed, 29 Feb 2012 09:02:29 -0800 (PST)
Subject: [Bitcoin-development] Duplicate transactions vulnerability
In-Reply-To: <20120229164747.GA581@vps7135.xlshosting.net>
References: <CAPg+sBhb+gYMwp1OJuCHYt5=BU63=YBWOFaLLthHBkN_U-scaA@mail.gmail.com>
	<CANdZDc7c5D7YmAn7GUO+--9U2Z3Lz-CR9E-QsKriVeMoudeipA@mail.gmail.com>
	<20120229164747.GA581@vps7135.xlshosting.net>
Message-ID: <1330534949.81609.YahooMailNeo@web121004.mail.ne1.yahoo.com>

I support BIP 30.

I gave it a thought. The other ways of resolving this issue, all have various niggles. This is the best way.


________________________________
 From: Pieter Wuille <pieter.wuille at gmail.com>
To: Zooko Wilcox-O'Hearn <zooko at zooko.com> 
Cc: Bitcoin Dev <bitcoin-development at lists.sourceforge.net> 
Sent: Wednesday, February 29, 2012 4:47 PM
Subject: Re: [Bitcoin-development] Duplicate transactions vulnerability
 
On Tue, Feb 28, 2012 at 06:41:31PM -0700, Zooko Wilcox-O'Hearn wrote:
> Could you spell out the attack explicitly? Presumably there aren't a
> lot of people with the "malice energy" to perform the attack but not
> to figure it out for themselves. I, however, have the "niceness
> energy" to think about it for a few minutes but not to figure it out
> for myself. If in your opinion it is realistically dangerous to post
> it publicly, would you be so kind as to include me in the private
> sharing of the explanation?

It's not exactly a secret anymore, as the patch also references it.
Russell O'Connor described the attack on his blog:
http://r6.ca/blog/20120206T005236Z.html

-- 
Pieter

------------------------------------------------------------------------------
Virtualization & Cloud Management Using Capacity Planning
Cloud computing makes use of virtualization - but cloud computing 
also focuses on allowing computing to be delivered as a service.
http://www.accelacomm.com/jaw/sfnl/114/51521223/
_______________________________________________
Bitcoin-development mailing list
Bitcoin-development at lists.sourceforge.net
https://lists.sourceforge.net/lists/listinfo/bitcoin-development
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120229/87a7dc28/attachment.html>

From moon at justmoon.de  Wed Feb 29 21:00:44 2012
From: moon at justmoon.de (Stefan Thomas)
Date: Wed, 29 Feb 2012 22:00:44 +0100
Subject: [Bitcoin-development] Duplicate transactions vulnerability
In-Reply-To: <CAPg+sBhb+gYMwp1OJuCHYt5=BU63=YBWOFaLLthHBkN_U-scaA@mail.gmail.com>
References: <CAPg+sBhb+gYMwp1OJuCHYt5=BU63=YBWOFaLLthHBkN_U-scaA@mail.gmail.com>
Message-ID: <4F4E91FC.6030003@justmoon.de>

> The purpose of this mail is asking for support for adding this rule to
> the protocol rules. If there is consensus this rule is the solution, I
> hope pools and miners can agree to update their nodes without lengthy
> coinbase-flagging procedure that would only delay a solution. So, who
> is in favor?

Looks good to me. I also second the notion that we should deploy this 
quickly, given that it's a bug fix.


On 2/28/2012 5:48 PM, Pieter Wuille wrote:
> Hello all,
>
> as some of you may know, a vulnerability has been found in how the
> Bitcoin reference client deals with duplicate transactions. Exploiting
> it is rather complex, requires some hash power, and has no financial
> benefit for the attacker. Still, it's a security hole, and we'd like
> to fix this as soon as possible.
>
> A simple way to fix this, is adding an extra protocol rule[1]:
>
>    Do not allow blocks to contain a transaction whose hash is equal to
> that of a former transaction which has not yet been completely spent.
>
> I've written about it in BIP30[2]. There is a patch for the reference
> client, which has been tested and verified to make the attack
> impossible. The change is backward compatible in the same way BIP16
> is: if a supermajority of mining power implements it, old clients can
> continue to function without risk.
>
> The purpose of this mail is asking for support for adding this rule to
> the protocol rules. If there is consensus this rule is the solution, I
> hope pools and miners can agree to update their nodes without lengthy
> coinbase-flagging procedure that would only delay a solution. So, who
> is in favor?
>
>    [1] https://en.bitcoin.it/wiki/Protocol_rules
>    [2] https://en.bitcoin.it/wiki/BIP_0030
>




From support at pi.uk.com  Wed Feb 29 22:05:55 2012
From: support at pi.uk.com (Ben Reeves)
Date: Wed, 29 Feb 2012 22:05:55 +0000
Subject: [Bitcoin-development] Duplicate transactions vulnerability
In-Reply-To: <CAPg+sBhb+gYMwp1OJuCHYt5=BU63=YBWOFaLLthHBkN_U-scaA@mail.gmail.com>
References: <CAPg+sBhb+gYMwp1OJuCHYt5=BU63=YBWOFaLLthHBkN_U-scaA@mail.gmail.com>
Message-ID: <CAPBPUnqgV_hHYwFoB_1qXMvEaE1pM0vm8=V=AKe2n-rPFzz+mQ@mail.gmail.com>

Assuming 50% of hashing power adopts BIP30 but the actual client
install base is relatively low the patch will likely result in a
"hard" blockchain split if someone takes advantage.

A malicious miner can produce a duplicate coinbase which the majority
of clients will accept but the majority of hashing power won't.
Spending the coinbase output after disconnection will cause the
blockchain to fork. All none BIP30 clients on the short blockchain
will be vulnerable to transaction reversal of 6 confirmations or more.

It is a relatively inexpensive attack to perform (costing the attacker
only one valid block ~$240) and could be quite disruptive. I think
this should be patched in DisconnectBlock() (if it hasn't already?)
before any protocol change - maybe a new mapByCoinbase multimap is
needed.

Thank You,
Ben Reeves
www.blockchain.info

On Tue, Feb 28, 2012 at 4:48 PM, Pieter Wuille <pieter.wuille at gmail.com> wrote:
> Hello all,
>
> as some of you may know, a vulnerability has been found in how the
> Bitcoin reference client deals with duplicate transactions. Exploiting
> it is rather complex, requires some hash power, and has no financial
> benefit for the attacker. Still, it's a security hole, and we'd like
> to fix this as soon as possible.
>
> A simple way to fix this, is adding an extra protocol rule[1]:
>
> ?Do not allow blocks to contain a transaction whose hash is equal to
> that of a former transaction which has not yet been completely spent.
>
> I've written about it in BIP30[2]. There is a patch for the reference
> client, which has been tested and verified to make the attack
> impossible. The change is backward compatible in the same way BIP16
> is: if a supermajority of mining power implements it, old clients can
> continue to function without risk.
>
> The purpose of this mail is asking for support for adding this rule to
> the protocol rules. If there is consensus this rule is the solution, I
> hope pools and miners can agree to update their nodes without lengthy
> coinbase-flagging procedure that would only delay a solution. So, who
> is in favor?
>
> ?[1] https://en.bitcoin.it/wiki/Protocol_rules
> ?[2] https://en.bitcoin.it/wiki/BIP_0030
>
> --
> Pieter
>
> ------------------------------------------------------------------------------
> Keep Your Developer Skills Current with LearnDevNow!
> The most comprehensive online learning library for Microsoft developers
> is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3, MVC3,
> Metro Style Apps, more. Free future releases when you subscribe now!
> http://p.sf.net/sfu/learndevnow-d2d
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development



From bitcoin-list at bluematt.me  Wed Feb 29 22:38:13 2012
From: bitcoin-list at bluematt.me (Matt Corallo)
Date: Wed, 29 Feb 2012 17:38:13 -0500
Subject: [Bitcoin-development] Duplicate transactions vulnerability
In-Reply-To: <CAPBPUnqgV_hHYwFoB_1qXMvEaE1pM0vm8=V=AKe2n-rPFzz+mQ@mail.gmail.com>
References: <CAPg+sBhb+gYMwp1OJuCHYt5=BU63=YBWOFaLLthHBkN_U-scaA@mail.gmail.com>
	<CAPBPUnqgV_hHYwFoB_1qXMvEaE1pM0vm8=V=AKe2n-rPFzz+mQ@mail.gmail.com>
Message-ID: <1330555093.3202.2.camel@BMThinkPad.lan.bluematt.me>

In other words when we roll out the update, we have to make sure we have
>>50% not just 50%.  Something like 60%-75% should do fine (IMHO).  In
other words we just have to be very, very vocal about the change when it
happens and make sure miners are all on board.

Matt

On Wed, 2012-02-29 at 22:05 +0000, Ben Reeves wrote:
> Assuming 50% of hashing power adopts BIP30 but the actual client
> install base is relatively low the patch will likely result in a
> "hard" blockchain split if someone takes advantage.
> 
> A malicious miner can produce a duplicate coinbase which the majority
> of clients will accept but the majority of hashing power won't.
> Spending the coinbase output after disconnection will cause the
> blockchain to fork. All none BIP30 clients on the short blockchain
> will be vulnerable to transaction reversal of 6 confirmations or more.
> 
> It is a relatively inexpensive attack to perform (costing the attacker
> only one valid block ~$240) and could be quite disruptive. I think
> this should be patched in DisconnectBlock() (if it hasn't already?)
> before any protocol change - maybe a new mapByCoinbase multimap is
> needed.
> 
> Thank You,
> Ben Reeves
> www.blockchain.info
> 
> On Tue, Feb 28, 2012 at 4:48 PM, Pieter Wuille <pieter.wuille at gmail.com> wrote:
> > Hello all,
> >
> > as some of you may know, a vulnerability has been found in how the
> > Bitcoin reference client deals with duplicate transactions. Exploiting
> > it is rather complex, requires some hash power, and has no financial
> > benefit for the attacker. Still, it's a security hole, and we'd like
> > to fix this as soon as possible.
> >
> > A simple way to fix this, is adding an extra protocol rule[1]:
> >
> >  Do not allow blocks to contain a transaction whose hash is equal to
> > that of a former transaction which has not yet been completely spent.
> >
> > I've written about it in BIP30[2]. There is a patch for the reference
> > client, which has been tested and verified to make the attack
> > impossible. The change is backward compatible in the same way BIP16
> > is: if a supermajority of mining power implements it, old clients can
> > continue to function without risk.
> >
> > The purpose of this mail is asking for support for adding this rule to
> > the protocol rules. If there is consensus this rule is the solution, I
> > hope pools and miners can agree to update their nodes without lengthy
> > coinbase-flagging procedure that would only delay a solution. So, who
> > is in favor?
> >
> >  [1] https://en.bitcoin.it/wiki/Protocol_rules
> >  [2] https://en.bitcoin.it/wiki/BIP_0030
> >
> > --
> > Pieter






From gavinandresen at gmail.com  Wed Feb 29 22:46:55 2012
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Wed, 29 Feb 2012 17:46:55 -0500
Subject: [Bitcoin-development] Duplicate transactions vulnerability
In-Reply-To: <CAPBPUnqgV_hHYwFoB_1qXMvEaE1pM0vm8=V=AKe2n-rPFzz+mQ@mail.gmail.com>
References: <CAPg+sBhb+gYMwp1OJuCHYt5=BU63=YBWOFaLLthHBkN_U-scaA@mail.gmail.com>
	<CAPBPUnqgV_hHYwFoB_1qXMvEaE1pM0vm8=V=AKe2n-rPFzz+mQ@mail.gmail.com>
Message-ID: <CABsx9T1YbFLcuCLbZZvSJGPy9k0PRgWttOp-KPUW+99XSYTkQQ@mail.gmail.com>

On Wed, Feb 29, 2012 at 5:05 PM, Ben Reeves <support at pi.uk.com> wrote:
> A malicious miner can produce a duplicate coinbase which the majority
> of clients will accept but the majority of hashing power won't.
> Spending the coinbase output after....

That can't happen until the coinbase matures, which takes 100 blocks.
And it won't mature because a majority of hashing power is rejecting
it, right?

-- 
--
Gavin Andresen



From support at pi.uk.com  Wed Feb 29 23:00:42 2012
From: support at pi.uk.com (Ben Reeves)
Date: Wed, 29 Feb 2012 23:00:42 +0000
Subject: [Bitcoin-development] Duplicate transactions vulnerability
In-Reply-To: <CABsx9T1YbFLcuCLbZZvSJGPy9k0PRgWttOp-KPUW+99XSYTkQQ@mail.gmail.com>
References: <CAPg+sBhb+gYMwp1OJuCHYt5=BU63=YBWOFaLLthHBkN_U-scaA@mail.gmail.com>
	<CAPBPUnqgV_hHYwFoB_1qXMvEaE1pM0vm8=V=AKe2n-rPFzz+mQ@mail.gmail.com>
	<CABsx9T1YbFLcuCLbZZvSJGPy9k0PRgWttOp-KPUW+99XSYTkQQ@mail.gmail.com>
Message-ID: <CAPBPUnp61tCr5yVa36OGoqmO83hOJitnWJDyW3SihXyxy_FbYg@mail.gmail.com>

I'm not sure. What if they use a coinbase of a block that has already matured?

On Wed, Feb 29, 2012 at 10:46 PM, Gavin Andresen
<gavinandresen at gmail.com> wrote:
> On Wed, Feb 29, 2012 at 5:05 PM, Ben Reeves <support at pi.uk.com> wrote:
>> A malicious miner can produce a duplicate coinbase which the majority
>> of clients will accept but the majority of hashing power won't.
>> Spending the coinbase output after....
>
> That can't happen until the coinbase matures, which takes 100 blocks.
> And it won't mature because a majority of hashing power is rejecting
> it, right?
>
> --
> --
> Gavin Andresen



From pieter.wuille at gmail.com  Wed Feb 29 23:45:59 2012
From: pieter.wuille at gmail.com (Pieter Wuille)
Date: Thu, 1 Mar 2012 00:45:59 +0100
Subject: [Bitcoin-development] Duplicate transactions vulnerability
In-Reply-To: <20120229232029.GA6073@vps7135.xlshosting.net>
References: <CAPg+sBhb+gYMwp1OJuCHYt5=BU63=YBWOFaLLthHBkN_U-scaA@mail.gmail.com>
	<CAPBPUnqgV_hHYwFoB_1qXMvEaE1pM0vm8=V=AKe2n-rPFzz+mQ@mail.gmail.com>
	<CABsx9T1YbFLcuCLbZZvSJGPy9k0PRgWttOp-KPUW+99XSYTkQQ@mail.gmail.com>
	<CAPBPUnp61tCr5yVa36OGoqmO83hOJitnWJDyW3SihXyxy_FbYg@mail.gmail.com>
	<20120229232029.GA6073@vps7135.xlshosting.net>
Message-ID: <20120229234558.GA6573@vps7135.xlshosting.net>

On Wed, Feb 29, 2012 at 11:00:42PM +0000, Ben Reeves wrote:
> I'm not sure. What if they use a coinbase of a block that has already matured?

Indeed; duplicate an old coinbase, fork chain without dupe, and spend the old coinbase.
The 100-blocks maturity will not help against is.

I'm not sure how you intend to fix DisconnectBlock() to prevent this in a backward-
compatible way, though.

-- 
Pieter



