From boydb at midnightdesign.ws  Fri Nov  1 20:14:44 2013
From: boydb at midnightdesign.ws (Brooks Boyd)
Date: Fri, 1 Nov 2013 15:14:44 -0500
Subject: [Bitcoin-development] BIP39 word list
Message-ID: <CANg-TZC2NHfGR3mfm4VuuZMbwxkJzP69OmWhLvOD2Zq8GWejnw@mail.gmail.com>

I was inspired to join the mailing list to comment on some of these
discussions about BIP39, which I think will have great use in the Bitcoin
community and outside it as a way to transcribe binary data.

The one thought I had as the discussions about similar characters are
resulting in culling words from the list, is that it only helps to validate
input, not help the user if it is incorrect.

For example, if both "cat" and "eat" were in the word list, and someone
wrote down "eat", but later mis-translated it and put "cat" back into
translator, the result would be a checksum error; "cat" is a different
number, so the checksum would fail.

As it currently stands, "cat" would not be a valid word ("eat" is the real
word, and no other number is "cat"), so the translator can throw a
different error which is more helpful (i.e. "'cat' isn't a valid word
choice), but still doesn't get the user to the proper translation.

What about if the wordlist included those "words that are so similar to
each other that we only kept one of them" and had them all refer to the
same number? I propose the wordlist have the possibility of multiple words
on a single line, with the first word on the line being the "primary" or
"real" word to be used, with the other similar words be included so that a
translation program if it wanted to assist the user could fix their input
for them (verbosely or not), along the lines of "'cat' isn't a valid word
choice; assuming you meant 'eat', which is valid". You might still hit a
checksum error if that similar word is still the wrong word, but as it
stands now, I know you culled a bunch of words from the wordlist as "too
similar", but if I want to try and help the user fix a bad input, I need to
write a translation program with a full english dictionary alongside the
BIP39 dictionary.

I'd be willing to create a pull request for such an update, but before I
delve into that, does this sound like a good idea? I could see it devolving
into a slippery slope if every number in the 2048 set had a dozen word
variations (misspellings, similar words, slang terms for the real word,
etc.) which could get confusing of how similar is similar enough to be
added as an alternate, and the standard would need to be clear that when
translating binary to words, you only use the "main" word for that row, not
any of the variations.

MidnightLightning


> I've just pushed updated wordlist which is filtered to similar characters
taken from this matrix.
> BIP39 now consider following character pairs as similar:
>         similar = (
>             ('a', 'c'), ('a', 'e'), ('a', 'o'),
>             ('b', 'd'), ('b', 'h'), ('b', 'p'), ('b', 'q'), ('b', 'r'),
>             ('c', 'e'), ('c', 'g'), ('c', 'n'), ('c', 'o'), ('c', 'q'),
('c', 'u'),
>             ('d', 'g'), ('d', 'h'), ('d', 'o'), ('d', 'p'), ('d', 'q'),
>             ('e', 'f'), ('e', 'o'),
>             ('f', 'i'), ('f', 'j'), ('f', 'l'), ('f', 'p'), ('f', 't'),
>             ('g', 'j'), ('g', 'o'), ('g', 'p'), ('g', 'q'), ('g', 'y'),
>             ('h', 'k'), ('h', 'l'), ('h', 'm'), ('h', 'n'), ('h', 'r'),
>             ('i', 'j'), ('i', 'l'), ('i', 't'), ('i', 'y'),
>             ('j', 'l'), ('j', 'p'), ('j', 'q'), ('j', 'y'),
>             ('k', 'x'),
>             ('l', 't'),
>             ('m', 'n'), ('m', 'w'),
>             ('n', 'u'), ('n', 'z'),
>             ('o', 'p'), ('o', 'q'), ('o', 'u'), ('o', 'v'),
>             ('p', 'q'), ('p', 'r'),
>             ('q', 'y'),
>             ('s', 'z'),
>             ('u', 'v'), ('u', 'w'), ('u', 'y'),
>             ('v', 'w'), ('v', 'y')
>         )
> Feel free to review and comment current wordlist, but I think we're
slowly moving forward final list.
> slush
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131101/94fd83a9/attachment.html>

From allen.piscitello at gmail.com  Fri Nov  1 23:41:53 2013
From: allen.piscitello at gmail.com (Allen Piscitello)
Date: Fri, 1 Nov 2013 18:41:53 -0500
Subject: [Bitcoin-development] BIP39 word list
In-Reply-To: <CANg-TZC2NHfGR3mfm4VuuZMbwxkJzP69OmWhLvOD2Zq8GWejnw@mail.gmail.com>
References: <CANg-TZC2NHfGR3mfm4VuuZMbwxkJzP69OmWhLvOD2Zq8GWejnw@mail.gmail.com>
Message-ID: <CAJfRnm6mjm5Oy5YFM9vqC487AjtVG2NNzNg+GXaB1p2j7JtcGA@mail.gmail.com>

The problem with this is that you might have word A which is similar to B,
but B is also similar to C.  So we scrub B from the list, someone enters B,
and we have no way to know if it means A or C.  It leads to a much more
complicated scheme to ensure that all errors are correctable.

Scrubbing A, B, and C is preferable, since it leads to no ambiguity and
there is no need to try to correct an error.


On Fri, Nov 1, 2013 at 3:14 PM, Brooks Boyd <boydb at midnightdesign.ws> wrote:

> I was inspired to join the mailing list to comment on some of these
> discussions about BIP39, which I think will have great use in the Bitcoin
> community and outside it as a way to transcribe binary data.
>
> The one thought I had as the discussions about similar characters are
> resulting in culling words from the list, is that it only helps to validate
> input, not help the user if it is incorrect.
>
> For example, if both "cat" and "eat" were in the word list, and someone
> wrote down "eat", but later mis-translated it and put "cat" back into
> translator, the result would be a checksum error; "cat" is a different
> number, so the checksum would fail.
>
> As it currently stands, "cat" would not be a valid word ("eat" is the real
> word, and no other number is "cat"), so the translator can throw a
> different error which is more helpful (i.e. "'cat' isn't a valid word
> choice), but still doesn't get the user to the proper translation.
>
> What about if the wordlist included those "words that are so similar to
> each other that we only kept one of them" and had them all refer to the
> same number? I propose the wordlist have the possibility of multiple words
> on a single line, with the first word on the line being the "primary" or
> "real" word to be used, with the other similar words be included so that a
> translation program if it wanted to assist the user could fix their input
> for them (verbosely or not), along the lines of "'cat' isn't a valid word
> choice; assuming you meant 'eat', which is valid". You might still hit a
> checksum error if that similar word is still the wrong word, but as it
> stands now, I know you culled a bunch of words from the wordlist as "too
> similar", but if I want to try and help the user fix a bad input, I need to
> write a translation program with a full english dictionary alongside the
> BIP39 dictionary.
>
> I'd be willing to create a pull request for such an update, but before I
> delve into that, does this sound like a good idea? I could see it devolving
> into a slippery slope if every number in the 2048 set had a dozen word
> variations (misspellings, similar words, slang terms for the real word,
> etc.) which could get confusing of how similar is similar enough to be
> added as an alternate, and the standard would need to be clear that when
> translating binary to words, you only use the "main" word for that row, not
> any of the variations.
>
> MidnightLightning
>
>
> > I've just pushed updated wordlist which is filtered to similar
> characters taken from this matrix.
> > BIP39 now consider following character pairs as similar:
> >         similar = (
> >             ('a', 'c'), ('a', 'e'), ('a', 'o'),
> >             ('b', 'd'), ('b', 'h'), ('b', 'p'), ('b', 'q'), ('b', 'r'),
> >             ('c', 'e'), ('c', 'g'), ('c', 'n'), ('c', 'o'), ('c', 'q'),
> ('c', 'u'),
> >             ('d', 'g'), ('d', 'h'), ('d', 'o'), ('d', 'p'), ('d', 'q'),
> >             ('e', 'f'), ('e', 'o'),
> >             ('f', 'i'), ('f', 'j'), ('f', 'l'), ('f', 'p'), ('f', 't'),
> >             ('g', 'j'), ('g', 'o'), ('g', 'p'), ('g', 'q'), ('g', 'y'),
> >             ('h', 'k'), ('h', 'l'), ('h', 'm'), ('h', 'n'), ('h', 'r'),
> >             ('i', 'j'), ('i', 'l'), ('i', 't'), ('i', 'y'),
> >             ('j', 'l'), ('j', 'p'), ('j', 'q'), ('j', 'y'),
> >             ('k', 'x'),
> >             ('l', 't'),
> >             ('m', 'n'), ('m', 'w'),
> >             ('n', 'u'), ('n', 'z'),
> >             ('o', 'p'), ('o', 'q'), ('o', 'u'), ('o', 'v'),
> >             ('p', 'q'), ('p', 'r'),
> >             ('q', 'y'),
> >             ('s', 'z'),
> >             ('u', 'v'), ('u', 'w'), ('u', 'y'),
> >             ('v', 'w'), ('v', 'y')
> >         )
> > Feel free to review and comment current wordlist, but I think we're
> slowly moving forward final list.
> > slush
>
>
> ------------------------------------------------------------------------------
> Android is increasing in popularity, but the open development platform that
> developers love is also attractive to malware creators. Download this white
> paper to learn more about secure code signing practices that can help keep
> Android apps secure.
> http://pubads.g.doubleclick.net/gampad/clk?id=65839951&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131101/2a99b12c/attachment.html>

From slush at centrum.cz  Sat Nov  2 00:04:11 2013
From: slush at centrum.cz (slush)
Date: Sat, 2 Nov 2013 01:04:11 +0100
Subject: [Bitcoin-development] BIP39 word list
In-Reply-To: <CANg-TZC2NHfGR3mfm4VuuZMbwxkJzP69OmWhLvOD2Zq8GWejnw@mail.gmail.com>
References: <CANg-TZC2NHfGR3mfm4VuuZMbwxkJzP69OmWhLvOD2Zq8GWejnw@mail.gmail.com>
Message-ID: <CAJna-HhyR4fLotqW2kci8rCuoMMVUtz9s1dpNbZYyrc5epC5sw@mail.gmail.com>

Hi Brooks,

I've been already thinking about eat -> cat typing mistake. Actually there
may be simplier solution than having wordlist with duplicated words.
Because there's already a mapping of similar characters in the source code
(currently only in unit test, but it can be moved), when user type a word
which isn't in wordlist, application may try to use such mapping to find a
combination which actually is in the mapping. This may be disambiguous in
some cases, but giving a choice between few words may be better than hard
fail. And it is actually quite easy to implement. Although I think
application can do such smart suggestions and help user to recover badly
written mnemonic, I don't think it is necessary to standardize such method
directly into BIP. It may or may not be implemented by developers and it is
just nice to have feature.

Example:

user type ear, but it isn't in wordlist.

Regards the mapping,
E is similar to A, C, F, O
A is similar to E, C, O
R is similar to B, P, H

So application can calculate combinations of possible characters:

a) when app consider than the the user mistyped only one character
AAR, CAR, FAR, OAR
EER, ECR, EOR
EAB, EAP, EAH

b) when app consider than user maybe mistyped more characters, it may do
full combination matrix
AEB,  ACB, AOB,  ... OEH, OCH, OOH

and then ask user to select only these combinations which are actually
presented in the wordlist. In this particular case it may be only CAR or
FAR (both cannot be in the wordlist because of rules in similarity).

Marek


On Fri, Nov 1, 2013 at 9:14 PM, Brooks Boyd <boydb at midnightdesign.ws> wrote:

> I was inspired to join the mailing list to comment on some of these
> discussions about BIP39, which I think will have great use in the Bitcoin
> community and outside it as a way to transcribe binary data.
>
> The one thought I had as the discussions about similar characters are
> resulting in culling words from the list, is that it only helps to validate
> input, not help the user if it is incorrect.
>
> For example, if both "cat" and "eat" were in the word list, and someone
> wrote down "eat", but later mis-translated it and put "cat" back into
> translator, the result would be a checksum error; "cat" is a different
> number, so the checksum would fail.
>
> As it currently stands, "cat" would not be a valid word ("eat" is the real
> word, and no other number is "cat"), so the translator can throw a
> different error which is more helpful (i.e. "'cat' isn't a valid word
> choice), but still doesn't get the user to the proper translation.
>
> What about if the wordlist included those "words that are so similar to
> each other that we only kept one of them" and had them all refer to the
> same number? I propose the wordlist have the possibility of multiple words
> on a single line, with the first word on the line being the "primary" or
> "real" word to be used, with the other similar words be included so that a
> translation program if it wanted to assist the user could fix their input
> for them (verbosely or not), along the lines of "'cat' isn't a valid word
> choice; assuming you meant 'eat', which is valid". You might still hit a
> checksum error if that similar word is still the wrong word, but as it
> stands now, I know you culled a bunch of words from the wordlist as "too
> similar", but if I want to try and help the user fix a bad input, I need to
> write a translation program with a full english dictionary alongside the
> BIP39 dictionary.
>
> I'd be willing to create a pull request for such an update, but before I
> delve into that, does this sound like a good idea? I could see it devolving
> into a slippery slope if every number in the 2048 set had a dozen word
> variations (misspellings, similar words, slang terms for the real word,
> etc.) which could get confusing of how similar is similar enough to be
> added as an alternate, and the standard would need to be clear that when
> translating binary to words, you only use the "main" word for that row, not
> any of the variations.
>
> MidnightLightning
>
>
> > I've just pushed updated wordlist which is filtered to similar
> characters taken from this matrix.
> > BIP39 now consider following character pairs as similar:
> >         similar = (
> >             ('a', 'c'), ('a', 'e'), ('a', 'o'),
> >             ('b', 'd'), ('b', 'h'), ('b', 'p'), ('b', 'q'), ('b', 'r'),
> >             ('c', 'e'), ('c', 'g'), ('c', 'n'), ('c', 'o'), ('c', 'q'),
> ('c', 'u'),
> >             ('d', 'g'), ('d', 'h'), ('d', 'o'), ('d', 'p'), ('d', 'q'),
> >             ('e', 'f'), ('e', 'o'),
> >             ('f', 'i'), ('f', 'j'), ('f', 'l'), ('f', 'p'), ('f', 't'),
> >             ('g', 'j'), ('g', 'o'), ('g', 'p'), ('g', 'q'), ('g', 'y'),
> >             ('h', 'k'), ('h', 'l'), ('h', 'm'), ('h', 'n'), ('h', 'r'),
> >             ('i', 'j'), ('i', 'l'), ('i', 't'), ('i', 'y'),
> >             ('j', 'l'), ('j', 'p'), ('j', 'q'), ('j', 'y'),
> >             ('k', 'x'),
> >             ('l', 't'),
> >             ('m', 'n'), ('m', 'w'),
> >             ('n', 'u'), ('n', 'z'),
> >             ('o', 'p'), ('o', 'q'), ('o', 'u'), ('o', 'v'),
> >             ('p', 'q'), ('p', 'r'),
> >             ('q', 'y'),
> >             ('s', 'z'),
> >             ('u', 'v'), ('u', 'w'), ('u', 'y'),
> >             ('v', 'w'), ('v', 'y')
> >         )
> > Feel free to review and comment current wordlist, but I think we're
> slowly moving forward final list.
> > slush
>
>
> ------------------------------------------------------------------------------
> Android is increasing in popularity, but the open development platform that
> developers love is also attractive to malware creators. Download this white
> paper to learn more about secure code signing practices that can help keep
> Android apps secure.
> http://pubads.g.doubleclick.net/gampad/clk?id=65839951&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131102/26d9c9a1/attachment.html>

From boydb at midnightdesign.ws  Sat Nov  2 04:31:33 2013
From: boydb at midnightdesign.ws (Brooks Boyd)
Date: Fri, 1 Nov 2013 23:31:33 -0500
Subject: [Bitcoin-development] BIP39 word list
In-Reply-To: <CAJna-HhyR4fLotqW2kci8rCuoMMVUtz9s1dpNbZYyrc5epC5sw@mail.gmail.com>
References: <CANg-TZC2NHfGR3mfm4VuuZMbwxkJzP69OmWhLvOD2Zq8GWejnw@mail.gmail.com>
	<CAJna-HhyR4fLotqW2kci8rCuoMMVUtz9s1dpNbZYyrc5epC5sw@mail.gmail.com>
Message-ID: <CANg-TZAEcM1USrit+iX7reQWFZn_O4BJWCyfzRSmedXbKwRMgQ@mail.gmail.com>

That would be a way to go, though iterating through all possibilities of a
similar letter misspell would take significantly more processing (4x3x3
= 36 total possibilities, only to cull it back to 2, in your example), than
iterating through a list of pre-calculated possibilities. It's definitely
not a hard computation on any modern device, though, and depending on how
"helpful" the program wants to try to be, it could even try help with
misspellings due to hitting a keyboard key next to the correct one or
hitting a letter twice, depending on how big a comparison matrix it wants
to create.

I do agree it should not be required for clients implementing the BIP to
help fix mis-translations, though keeping the similar letter unit test in
there I like, since it helps convey the thought that went into culling some
words from the dictionary. Though to Allen's point, what did happen with
the words that were found to be similar; was one of the similar words left
in the list or were all the similar words removed?

Brooks
MidnightLightning


On Fri, Nov 1, 2013 at 7:04 PM, slush <slush at centrum.cz> wrote:

> Hi Brooks,
>
> I've been already thinking about eat -> cat typing mistake. Actually there
> may be simplier solution than having wordlist with duplicated words.
> Because there's already a mapping of similar characters in the source code
> (currently only in unit test, but it can be moved), when user type a word
> which isn't in wordlist, application may try to use such mapping to find a
> combination which actually is in the mapping. This may be disambiguous in
> some cases, but giving a choice between few words may be better than hard
> fail. And it is actually quite easy to implement. Although I think
> application can do such smart suggestions and help user to recover badly
> written mnemonic, I don't think it is necessary to standardize such method
> directly into BIP. It may or may not be implemented by developers and it is
> just nice to have feature.
>
> Example:
>
> user type ear, but it isn't in wordlist.
>
> Regards the mapping,
> E is similar to A, C, F, O
> A is similar to E, C, O
> R is similar to B, P, H
>
> So application can calculate combinations of possible characters:
>
> a) when app consider than the the user mistyped only one character
> AAR, CAR, FAR, OAR
> EER, ECR, EOR
> EAB, EAP, EAH
>
> b) when app consider than user maybe mistyped more characters, it may do
> full combination matrix
> AEB,  ACB, AOB,  ... OEH, OCH, OOH
>
> and then ask user to select only these combinations which are actually
> presented in the wordlist. In this particular case it may be only CAR or
> FAR (both cannot be in the wordlist because of rules in similarity).
>
> Marek
>
>
> On Fri, Nov 1, 2013 at 9:14 PM, Brooks Boyd <boydb at midnightdesign.ws>wrote:
>
>> I was inspired to join the mailing list to comment on some of these
>> discussions about BIP39, which I think will have great use in the Bitcoin
>> community and outside it as a way to transcribe binary data.
>>
>> The one thought I had as the discussions about similar characters are
>> resulting in culling words from the list, is that it only helps to validate
>> input, not help the user if it is incorrect.
>>
>> For example, if both "cat" and "eat" were in the word list, and someone
>> wrote down "eat", but later mis-translated it and put "cat" back into
>> translator, the result would be a checksum error; "cat" is a different
>> number, so the checksum would fail.
>>
>> As it currently stands, "cat" would not be a valid word ("eat" is the
>> real word, and no other number is "cat"), so the translator can throw a
>> different error which is more helpful (i.e. "'cat' isn't a valid word
>> choice), but still doesn't get the user to the proper translation.
>>
>> What about if the wordlist included those "words that are so similar to
>> each other that we only kept one of them" and had them all refer to the
>> same number? I propose the wordlist have the possibility of multiple words
>> on a single line, with the first word on the line being the "primary" or
>> "real" word to be used, with the other similar words be included so that a
>> translation program if it wanted to assist the user could fix their input
>> for them (verbosely or not), along the lines of "'cat' isn't a valid word
>> choice; assuming you meant 'eat', which is valid". You might still hit a
>> checksum error if that similar word is still the wrong word, but as it
>> stands now, I know you culled a bunch of words from the wordlist as "too
>> similar", but if I want to try and help the user fix a bad input, I need to
>> write a translation program with a full english dictionary alongside the
>> BIP39 dictionary.
>>
>> I'd be willing to create a pull request for such an update, but before I
>> delve into that, does this sound like a good idea? I could see it devolving
>> into a slippery slope if every number in the 2048 set had a dozen word
>> variations (misspellings, similar words, slang terms for the real word,
>> etc.) which could get confusing of how similar is similar enough to be
>> added as an alternate, and the standard would need to be clear that when
>> translating binary to words, you only use the "main" word for that row, not
>> any of the variations.
>>
>> MidnightLightning
>>
>>
>> > I've just pushed updated wordlist which is filtered to similar
>> characters taken from this matrix.
>> > BIP39 now consider following character pairs as similar:
>> >         similar = (
>> >             ('a', 'c'), ('a', 'e'), ('a', 'o'),
>> >             ('b', 'd'), ('b', 'h'), ('b', 'p'), ('b', 'q'), ('b', 'r'),
>> >             ('c', 'e'), ('c', 'g'), ('c', 'n'), ('c', 'o'), ('c', 'q'),
>> ('c', 'u'),
>> >             ('d', 'g'), ('d', 'h'), ('d', 'o'), ('d', 'p'), ('d', 'q'),
>> >             ('e', 'f'), ('e', 'o'),
>> >             ('f', 'i'), ('f', 'j'), ('f', 'l'), ('f', 'p'), ('f', 't'),
>> >             ('g', 'j'), ('g', 'o'), ('g', 'p'), ('g', 'q'), ('g', 'y'),
>> >             ('h', 'k'), ('h', 'l'), ('h', 'm'), ('h', 'n'), ('h', 'r'),
>> >             ('i', 'j'), ('i', 'l'), ('i', 't'), ('i', 'y'),
>> >             ('j', 'l'), ('j', 'p'), ('j', 'q'), ('j', 'y'),
>> >             ('k', 'x'),
>> >             ('l', 't'),
>> >             ('m', 'n'), ('m', 'w'),
>> >             ('n', 'u'), ('n', 'z'),
>> >             ('o', 'p'), ('o', 'q'), ('o', 'u'), ('o', 'v'),
>> >             ('p', 'q'), ('p', 'r'),
>> >             ('q', 'y'),
>> >             ('s', 'z'),
>> >             ('u', 'v'), ('u', 'w'), ('u', 'y'),
>> >             ('v', 'w'), ('v', 'y')
>> >         )
>> > Feel free to review and comment current wordlist, but I think we're
>> slowly moving forward final list.
>> > slush
>>
>>
>> ------------------------------------------------------------------------------
>> Android is increasing in popularity, but the open development platform
>> that
>> developers love is also attractive to malware creators. Download this
>> white
>> paper to learn more about secure code signing practices that can help keep
>> Android apps secure.
>>
>> http://pubads.g.doubleclick.net/gampad/clk?id=65839951&iu=/4140/ostg.clktrk
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131101/3609f0da/attachment.html>

From bitcoingrant at gmx.com  Sat Nov  2 05:01:43 2013
From: bitcoingrant at gmx.com (bitcoingrant at gmx.com)
Date: Sat, 02 Nov 2013 01:01:43 -0400
Subject: [Bitcoin-development] Message Signing based authentication
Message-ID: <20131102050144.5850@gmx.com>

Passwords are inefficient by design: frequently we hear news from Sony, Square Enix, Adobe, and various others about passwords being compromised, databases being copied and stolen. This story remains true in the Bitcoin space. In light of the recent Bitcointalk forum breach echoes an increasing need for passwords to become a thing of the past.
In celebration of the 5 year anniversary of the Bitcoin whitepaper, we are delighted to introduce the Message Signing based authentication method.
In brief, the authentication work as follows:
Server provides a token for the client to sign.
client passes the signed message and the bitcoin address back to the server.
server validates the message and honors the alias (optional) and bitcoin address as identification.
http://forums.bitcoingrant.org/
Above is a proof of concept forum that utilize this authentication method. Following Kerckhoffs's principle, this forum only stores the signed message and bitcoin address the users provide the first time they use the site, both are public information. In addition, there is no database, everything is simply an RSS feed. For the sake of usability we have included a redis for the sessions, at the cost of additional exposure to potential risks: users no longer need to sign a token every time they wish to post.
All source code will be available on github in the next few days. 
We welcome any feedback or suggestions.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131102/460bbdcc/attachment.html>

From luke at dashjr.org  Sat Nov  2 05:54:28 2013
From: luke at dashjr.org (Luke-Jr)
Date: Sat, 2 Nov 2013 05:54:28 +0000
Subject: [Bitcoin-development] Message Signing based authentication
In-Reply-To: <20131102050144.5850@gmx.com>
References: <20131102050144.5850@gmx.com>
Message-ID: <201311020554.31403.luke@dashjr.org>

On Saturday, November 02, 2013 5:01:43 AM bitcoingrant at gmx.com wrote:
> In celebration of the 5 year anniversary of the Bitcoin whitepaper, we are
> delighted to introduce the Message Signing based authentication method. In
> brief, the authentication work as follows:
> Server provides a token for the client to sign.
> client passes the signed message and the bitcoin address back to the
> server. server validates the message and honors the alias (optional) and
> bitcoin address as identification. http://forums.bitcoingrant.org/
> Above is a proof of concept forum that utilize this authentication method.

Congratulations! You've reinvented what Eligius and Bitcoin-OTC have been 
doing for years! :)

There's no reason to ask the user to provide the address every time, though...

Luke



From thomasv1 at gmx.de  Sat Nov  2 09:44:58 2013
From: thomasv1 at gmx.de (Thomas Voegtlin)
Date: Sat, 02 Nov 2013 10:44:58 +0100
Subject: [Bitcoin-development] Proposal to replace BIP0039
In-Reply-To: <CAJna-Hj+q7oyTj8SWiVESPt5Web-mLuDhv7yA8zF5wRD81aBXA@mail.gmail.com>
References: <trinity-ba3941a0-f758-4372-b431-c64e9b44328a-1382635758149@3capp-gmx-bs09>
	<CAJna-HjgpRhLdVGh+prx54VezHaH1vXGpPotW1Xkz2tiAiWrbg@mail.gmail.com>
	<526BDEC2.2090709@gmx.de>
	<CAJna-HgH1g8iiSvxXrJuga808SQJ6DKo4AYw4fxpwTRCsL+EyQ@mail.gmail.com>
	<CAPg+sBiuLJJV3pB-EF3O9sgB_Z3tuLhEg9k=A9mcxJvgy3UQSw@mail.gmail.com>
	<52721F47.30206@gmx.de>
	<CAJna-Hj+q7oyTj8SWiVESPt5Web-mLuDhv7yA8zF5wRD81aBXA@mail.gmail.com>
Message-ID: <5274C99A.8060304@gmx.de>


> To be specific, we (in cooperation with / inspired by Timo Hanke) 
> developed method how to prove that the seed generated by Trezor has 
> been created using combination of computer-provided entropy and 
> device-provided entropy, without leaking full private information to 
> other computer, just because we want Trezor to be blackbox-testable 
> and fully deterministic (seed generation is currently the only 
> operation which uses any source of RNG).
>

Thanks for the explanation. Here is how I understand how it works, 
please correct me if I'm wrong:

The user's computer picks a random number a, the Trezor picks a random 
number b.
Trezor adds a and b in the secp256k1 group, and this creates a master 
private key k.
Trezor sends the corresponding master public key K to the computer.
Thus, the computer can check that K was derived from a, without knowing b.
This also allows the computer to check that any bitcoin address derived 
from K is derived from a, without leaking b. (and reciprocally)

However, it seems to me that this property will work only with bip32 
public derivations; if a private derivation is used, don't you need to 
know k?




From thomasv1 at gmx.de  Sat Nov  2 10:10:13 2013
From: thomasv1 at gmx.de (Thomas Voegtlin)
Date: Sat, 02 Nov 2013 11:10:13 +0100
Subject: [Bitcoin-development] Proposal to replace BIP0039
In-Reply-To: <CAJna-Hj-jjcVB6jSXyy2Epy=ojKsZCo0Dor+5-=RTG4RtC4LSw@mail.gmail.com>
References: <trinity-ba3941a0-f758-4372-b431-c64e9b44328a-1382635758149@3capp-gmx-bs09>
	<CAJna-HjgpRhLdVGh+prx54VezHaH1vXGpPotW1Xkz2tiAiWrbg@mail.gmail.com>
	<526BDEC2.2090709@gmx.de>
	<CAJna-HgH1g8iiSvxXrJuga808SQJ6DKo4AYw4fxpwTRCsL+EyQ@mail.gmail.com>
	<CAPg+sBiuLJJV3pB-EF3O9sgB_Z3tuLhEg9k=A9mcxJvgy3UQSw@mail.gmail.com>
	<52721F47.30206@gmx.de>
	<CAJna-HgD-Vgd_n8x=cD4dAoARMy0LoZJ29_y=tBoX4XYG03XqA@mail.gmail.com>
	<CAJna-Hj-jjcVB6jSXyy2Epy=ojKsZCo0Dor+5-=RTG4RtC4LSw@mail.gmail.com>
Message-ID: <5274CF85.2020106@gmx.de>


Le 31/10/2013 12:18, slush a ?crit :
> Oh, I forgot to one practical aspect; the way how the mnemonic is 
> "mined" in Thomas proposal prevents usage in embedded devices, because 
> difficulty of generating proper mnemonic is simply too high for 
> embedded microcontrollers. Maybe this can be solved somehow by 
> modifying the proposal, but right now it is a showstopper for us.
>
>

even if metadata is only 8 bits ? (that's about 256 hashes)




From mike at plan99.net  Sat Nov  2 13:02:58 2013
From: mike at plan99.net (Mike Hearn)
Date: Sat, 2 Nov 2013 14:02:58 +0100
Subject: [Bitcoin-development] Message Signing based authentication
In-Reply-To: <20131102050144.5850@gmx.com>
References: <20131102050144.5850@gmx.com>
Message-ID: <CANEZrP2UwEX+u0XCxmaMaRWqVMr+3E63UYnVz9oMubbsiJU+6A@mail.gmail.com>

On Sat, Nov 2, 2013 at 6:01 AM, <bitcoingrant at gmx.com> wrote:

> In brief, the authentication work as follows:
>
>
>
> Server provides a token for the client to sign.
>
> client passes the signed message and the bitcoin address back to the
> server.
>
> server validates the message and honors the alias (optional) and bitcoin
> address as identification.
>

http://pilif.github.io/2008/05/why-is-nobody-using-ssl-client-certificates/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131102/6892fd9d/attachment.html>

From melvincarvalho at gmail.com  Sat Nov  2 13:16:12 2013
From: melvincarvalho at gmail.com (Melvin Carvalho)
Date: Sat, 2 Nov 2013 14:16:12 +0100
Subject: [Bitcoin-development] Message Signing based authentication
In-Reply-To: <CANEZrP2UwEX+u0XCxmaMaRWqVMr+3E63UYnVz9oMubbsiJU+6A@mail.gmail.com>
References: <20131102050144.5850@gmx.com>
	<CANEZrP2UwEX+u0XCxmaMaRWqVMr+3E63UYnVz9oMubbsiJU+6A@mail.gmail.com>
Message-ID: <CAKaEYhKt=wq_SwnrndpfQjnM9KWEoZ60dEO_wYmux5YsRK0=dQ@mail.gmail.com>

On 2 November 2013 14:02, Mike Hearn <mike at plan99.net> wrote:

> On Sat, Nov 2, 2013 at 6:01 AM, <bitcoingrant at gmx.com> wrote:
>
>> In brief, the authentication work as follows:
>>
>>
>>
>> Server provides a token for the client to sign.
>>
>> client passes the signed message and the bitcoin address back to the
>> server.
>>
>> server validates the message and honors the alias (optional) and bitcoin
>> address as identification.
>>
>
> http://pilif.github.io/2008/05/why-is-nobody-using-ssl-client-certificates/
>

I actually use client certificates for almost all of my authentication.

It's true that the browser manufacturers have created an UX which is not
ideal, and very little effort is made to improve it.  But it is possible.
See this project from Mozilla labs.

http://www.azarask.in/blog/post/identity-in-the-browser-firefox/

Unfortunately this got killed :(

More popular is the trusted third party model like OAuth or Persona.
There's a conflict of interest as well, because browser manufacturers are
often identity providers too, so there is an incentive to push TTP
technology.

There's two elements here.  One is paswordless login (which I love).  The
other is who controls your identity.  I like to control my own identity (in
my browser) using PKI.  But facebook and the big webmail providers have a
lions share of the market.

The way to shift the balance is to offer the right incentives.


>
>
> ------------------------------------------------------------------------------
> Android is increasing in popularity, but the open development platform that
> developers love is also attractive to malware creators. Download this white
> paper to learn more about secure code signing practices that can help keep
> Android apps secure.
> http://pubads.g.doubleclick.net/gampad/clk?id=65839951&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131102/1aaf3dcc/attachment.html>

From hannu.kotipalo at iki.fi  Sat Nov  2 13:19:51 2013
From: hannu.kotipalo at iki.fi (Hannu Kotipalo)
Date: Sat, 02 Nov 2013 15:19:51 +0200
Subject: [Bitcoin-development] Message Signing based authentication
In-Reply-To: <CANEZrP2UwEX+u0XCxmaMaRWqVMr+3E63UYnVz9oMubbsiJU+6A@mail.gmail.com>
References: <20131102050144.5850@gmx.com>
	<CANEZrP2UwEX+u0XCxmaMaRWqVMr+3E63UYnVz9oMubbsiJU+6A@mail.gmail.com>
Message-ID: <5274FBF7.90301@iki.fi>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On 02.11.2013 15:02, Mike Hearn wrote:
> 
> http://pilif.github.io/2008/05/why-is-nobody-using-ssl-client-certificates/
>
> 
Maybe this is a bit off-topic, but the *real* answer to the question
"why-is-nobody-using-ssl-client-certificates" is that it would force
www pages to be encrypted and would make it a lot more difficult for
NSA to log www-trafic. So they have been made not-user-friendly by
default.

But what you think about this:
"White paper on passwordless secure login (based on bitcoin/bitmessage
technology)"
https://bitcointalk.org/index.php?topic=323360.0

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.11 (GNU/Linux)
Comment: Using GnuPG with Thunderbird - http://www.enigmail.net/

iEYEARECAAYFAlJ0+/cACgkQvafo1Ths1Sw5FwCgxdJB/lazDzxRos1ogSfJQo0V
El4AnjyHxWjOXG6qjcTcWvccty+03xRa
=BikE
-----END PGP SIGNATURE-----



From mike at plan99.net  Sat Nov  2 16:26:05 2013
From: mike at plan99.net (Mike Hearn)
Date: Sat, 2 Nov 2013 17:26:05 +0100
Subject: [Bitcoin-development] Message Signing based authentication
In-Reply-To: <5274FBF7.90301@iki.fi>
References: <20131102050144.5850@gmx.com>
	<CANEZrP2UwEX+u0XCxmaMaRWqVMr+3E63UYnVz9oMubbsiJU+6A@mail.gmail.com>
	<5274FBF7.90301@iki.fi>
Message-ID: <CANEZrP2N1DRBcN4JuXKJAodKwk=qNk5hiSnLyx1vbQ1gAd=EhQ@mail.gmail.com>

Guys, identity systems for the web are off-topic for this list. Other than
the anonymous passports/SINs/fidelity bond ideas, Bitcoin doesn't have any
relevance to it.

On Sat, Nov 2, 2013 at 2:19 PM, Hannu Kotipalo <hannu.kotipalo at iki.fi>wrote:

> Maybe this is a bit off-topic, but the *real* answer to the question
> "why-is-nobody-using-ssl-client-certificates" is that it would force
> www pages to be encrypted and would make it a lot more difficult for
> NSA to log www-trafic.
>

No, it wouldn't. You can log a user in using SSL and then redirect the user
back to an encrypted page, using cookies for the rest of the session.
Please don't clutter up this list with conspiracy theories. The brutal
reality is that identity is a hard problem.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131102/c202bc05/attachment.html>

From mike at plan99.net  Sat Nov  2 16:26:32 2013
From: mike at plan99.net (Mike Hearn)
Date: Sat, 2 Nov 2013 17:26:32 +0100
Subject: [Bitcoin-development] Message Signing based authentication
In-Reply-To: <CANEZrP2N1DRBcN4JuXKJAodKwk=qNk5hiSnLyx1vbQ1gAd=EhQ@mail.gmail.com>
References: <20131102050144.5850@gmx.com>
	<CANEZrP2UwEX+u0XCxmaMaRWqVMr+3E63UYnVz9oMubbsiJU+6A@mail.gmail.com>
	<5274FBF7.90301@iki.fi>
	<CANEZrP2N1DRBcN4JuXKJAodKwk=qNk5hiSnLyx1vbQ1gAd=EhQ@mail.gmail.com>
Message-ID: <CANEZrP2=JBEA72KeK0-5qHm855P8sB1=-NrJugXw6OEA9VxCkQ@mail.gmail.com>

> No, it wouldn't. You can log a user in using SSL and then redirect the
user back to an encrypted page

sorry, I meant unencrypted page of course
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131102/15fd1508/attachment.html>

From melvincarvalho at gmail.com  Sat Nov  2 16:52:20 2013
From: melvincarvalho at gmail.com (Melvin Carvalho)
Date: Sat, 2 Nov 2013 17:52:20 +0100
Subject: [Bitcoin-development] Message Signing based authentication
In-Reply-To: <CANEZrP2N1DRBcN4JuXKJAodKwk=qNk5hiSnLyx1vbQ1gAd=EhQ@mail.gmail.com>
References: <20131102050144.5850@gmx.com>
	<CANEZrP2UwEX+u0XCxmaMaRWqVMr+3E63UYnVz9oMubbsiJU+6A@mail.gmail.com>
	<5274FBF7.90301@iki.fi>
	<CANEZrP2N1DRBcN4JuXKJAodKwk=qNk5hiSnLyx1vbQ1gAd=EhQ@mail.gmail.com>
Message-ID: <CAKaEYhKkWGYOGrbmTtziBsDjz3wMPoPWKtfQs6bEK8-a-sfpyw@mail.gmail.com>

On 2 November 2013 17:26, Mike Hearn <mike at plan99.net> wrote:

> Guys, identity systems for the web are off-topic for this list. Other than
> the anonymous passports/SINs/fidelity bond ideas, Bitcoin doesn't have any
> relevance to it.
>
> On Sat, Nov 2, 2013 at 2:19 PM, Hannu Kotipalo <hannu.kotipalo at iki.fi>wrote:
>
>> Maybe this is a bit off-topic, but the *real* answer to the question
>> "why-is-nobody-using-ssl-client-certificates" is that it would force
>> www pages to be encrypted and would make it a lot more difficult for
>> NSA to log www-trafic.
>>
>
> No, it wouldn't. You can log a user in using SSL and then redirect the
> user back to an encrypted page, using cookies for the rest of the session.
> Please don't clutter up this list with conspiracy theories. The brutal
> reality is that identity is a hard problem.
>

Identity need not be a hard problem.  In my view it is a solved problem.

You have a real world entity translated to a digital format.  Yes that can
be slightly ambiguous at time, naming is hard, and people do get this wrong
frequently.

The most common problem is to name something in a way that does not scale.
The solution to this problem is rather easy, and that is to use a URI to
name something, which makes it global and scalable.

In the case of bitcoin you could have use the bitcion URI scheme

bitcion:1fhdjkfhjksf...


>
>
> ------------------------------------------------------------------------------
> Android is increasing in popularity, but the open development platform that
> developers love is also attractive to malware creators. Download this white
> paper to learn more about secure code signing practices that can help keep
> Android apps secure.
> http://pubads.g.doubleclick.net/gampad/clk?id=65839951&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131102/502938fc/attachment.html>

From jgarzik at bitpay.com  Sat Nov  2 17:08:04 2013
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Sat, 2 Nov 2013 13:08:04 -0400
Subject: [Bitcoin-development] Message Signing based authentication
In-Reply-To: <CAKaEYhKkWGYOGrbmTtziBsDjz3wMPoPWKtfQs6bEK8-a-sfpyw@mail.gmail.com>
References: <20131102050144.5850@gmx.com>
	<CANEZrP2UwEX+u0XCxmaMaRWqVMr+3E63UYnVz9oMubbsiJU+6A@mail.gmail.com>
	<5274FBF7.90301@iki.fi>
	<CANEZrP2N1DRBcN4JuXKJAodKwk=qNk5hiSnLyx1vbQ1gAd=EhQ@mail.gmail.com>
	<CAKaEYhKkWGYOGrbmTtziBsDjz3wMPoPWKtfQs6bEK8-a-sfpyw@mail.gmail.com>
Message-ID: <CAJHLa0N5V44zC-QgYKMNNLgeNy96xLJSp2RTFjQwAhX9AweOXg@mail.gmail.com>

On Sat, Nov 2, 2013 at 12:52 PM, Melvin Carvalho
<melvincarvalho at gmail.com> wrote:
> Identity need not be a hard problem.  In my view it is a solved problem.


Yes:  https://en.bitcoin.it/wiki/Identity_protocol_v1



From hannu.kotipalo at iki.fi  Sat Nov  2 17:16:46 2013
From: hannu.kotipalo at iki.fi (Hannu Kotipalo)
Date: Sat, 02 Nov 2013 19:16:46 +0200
Subject: [Bitcoin-development] Message Signing based authentication
In-Reply-To: <CAJHLa0N5V44zC-QgYKMNNLgeNy96xLJSp2RTFjQwAhX9AweOXg@mail.gmail.com>
References: <20131102050144.5850@gmx.com>	<CANEZrP2UwEX+u0XCxmaMaRWqVMr+3E63UYnVz9oMubbsiJU+6A@mail.gmail.com>	<5274FBF7.90301@iki.fi>	<CANEZrP2N1DRBcN4JuXKJAodKwk=qNk5hiSnLyx1vbQ1gAd=EhQ@mail.gmail.com>	<CAKaEYhKkWGYOGrbmTtziBsDjz3wMPoPWKtfQs6bEK8-a-sfpyw@mail.gmail.com>
	<CAJHLa0N5V44zC-QgYKMNNLgeNy96xLJSp2RTFjQwAhX9AweOXg@mail.gmail.com>
Message-ID: <5275337E.9090808@iki.fi>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On 02.11.2013 19:08, Jeff Garzik wrote:
> On Sat, Nov 2, 2013 at 12:52 PM, Melvin Carvalho 
> <melvincarvalho at gmail.com> wrote:
>> Identity need not be a hard problem.  In my view it is a solved
>> problem.
> 
> 
> Yes:  https://en.bitcoin.it/wiki/Identity_protocol_v1
> 

Well in the view of an average internet browser, it is not a solved
problem neither does this identity protocol solve it.

But Mike is correct, this is a wrong place to discuss about it.

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.11 (GNU/Linux)
Comment: Using GnuPG with Thunderbird - http://www.enigmail.net/

iEYEARECAAYFAlJ1M30ACgkQvafo1Ths1SxypQCgor9LQTyKnlr0gByMPPJRQF6U
LpIAnRMj/udBSDJOK+2JP0hhiG1Bk81d
=tcpx
-----END PGP SIGNATURE-----



From johnathan at corganlabs.com  Sat Nov  2 21:14:22 2013
From: johnathan at corganlabs.com (Johnathan Corgan)
Date: Sat, 02 Nov 2013 14:14:22 -0700
Subject: [Bitcoin-development] Message Signing based authentication
In-Reply-To: <20131102050144.5850@gmx.com>
References: <20131102050144.5850@gmx.com>
Message-ID: <52756B2E.7030505@corganlabs.com>

On 11/01/2013 10:01 PM, bitcoingrant at gmx.com wrote:

> Server provides a token for the client to sign.

Anyone else concerned about signing an arbitrary string?  Could be a
hash of $EVIL_DOCUMENT, no?  I'd want to XOR the string with my own
randomly generated nonce, sign that, then pass the nonce and the
signature back to the server for verification.

-- 
Johnathan Corgan, Corgan Labs
SDR Training and Development Services
http://corganlabs.com
-------------- next part --------------
A non-text attachment was scrubbed...
Name: johnathan.vcf
Type: text/x-vcard
Size: 334 bytes
Desc: not available
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131102/09685fb5/attachment.vcf>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 230 bytes
Desc: OpenPGP digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131102/09685fb5/attachment.sig>

From slush at centrum.cz  Sat Nov  2 21:57:50 2013
From: slush at centrum.cz (slush)
Date: Sat, 2 Nov 2013 22:57:50 +0100
Subject: [Bitcoin-development] Message Signing based authentication
In-Reply-To: <20131102050144.5850@gmx.com>
References: <20131102050144.5850@gmx.com>
Message-ID: <CAJna-HgUT2u+nhdz3e8mT99R+TR6o1FFQ4c8KBz_vpc_oSOzSQ@mail.gmail.com>

Glad to see that there are more and more people wanting to replace
passwords with digital signatures.

Although such method has been already used on other websites like Eligius
or bitcoin-otc, I dont think theres any standard way to doing so yet.

Two comments to your proposal:

A) message-to-be-signed need to be carefully composed to be both structured
and human readable. It should contain at least:
Desired username/identity handler
Server identifier (url)
Timestamp to prevent replay attack
Server challenge

Then the user can see what he's signing, instead of signing some binary
blob which can contain some evil data.

B)
Same structured data should be a part of html page in some header tag,
ideally signed by server certificate to confirm that the request is valid.
Then the login request can be processed by machine automatically, without a
need of copy&paste by a user.

Slush


On Sat, Nov 2, 2013 at 6:01 AM, <bitcoingrant at gmx.com> wrote:

> Passwords are inefficient by design: frequently we hear news from Sony,
> Square Enix, Adobe, and various others about passwords being compromised,
> databases being copied and stolen. This story remains true in the Bitcoin
> space. In light of the recent Bitcointalk forum breach echoes an increasing
> need for passwords to become a thing of the past.
>
>
>
> In celebration of the 5 year anniversary of the Bitcoin whitepaper, we are
> delighted to introduce the Message Signing based authentication method.
>
>
>
> In brief, the authentication work as follows:
>
>
>
> Server provides a token for the client to sign.
>
> client passes the signed message and the bitcoin address back to the
> server.
>
> server validates the message and honors the alias (optional) and bitcoin
> address as identification.
>
>
>
> http://forums.bitcoingrant.org/
>
>
>
> Above is a proof of concept forum that utilize this authentication method.
> Following Kerckhoffs's principle, this forum only stores the signed message
> and bitcoin address the users provide the first time they use the site,
> both are public information. In addition, there is no database, everything
> is simply an RSS feed. For the sake of usability we have included a redis
> for the sessions, at the cost of additional exposure to potential risks:
> users no longer need to sign a token every time they wish to post.
>
>
>
> All source code will be available on github in the next few days.
>
>
>
> We welcome any feedback or suggestions.
>
>
>
>
>
> ------------------------------------------------------------------------------
> Android is increasing in popularity, but the open development platform that
> developers love is also attractive to malware creators. Download this white
> paper to learn more about secure code signing practices that can help keep
> Android apps secure.
> http://pubads.g.doubleclick.net/gampad/clk?id=65839951&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131102/31897bcb/attachment.html>

From mark at monetize.io  Sat Nov  2 21:51:22 2013
From: mark at monetize.io (Mark Friedenbach)
Date: Sat, 02 Nov 2013 14:51:22 -0700
Subject: [Bitcoin-development] Message Signing based authentication
In-Reply-To: <52756B2E.7030505@corganlabs.com>
References: <20131102050144.5850@gmx.com> <52756B2E.7030505@corganlabs.com>
Message-ID: <527573DA.7010203@monetize.io>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Or SIGHASH of a transaction spending those coins or updating the SIN...

On 11/2/13 2:14 PM, Johnathan Corgan wrote:> On 11/01/2013 10:01 PM,
bitcoingrant at gmx.com wrote:
> 
>> Server provides a token for the client to sign.
> 
> Anyone else concerned about signing an arbitrary string?  Could be
> a hash of $EVIL_DOCUMENT, no?  I'd want to XOR the string with my
> own randomly generated nonce, sign that, then pass the nonce and
> the signature back to the server for verification.
> 
-----BEGIN PGP SIGNATURE-----
Version: GnuPG/MacGPG2 v2.0.19 (Darwin)
Comment: GPGTools - http://gpgtools.org
Comment: Using GnuPG with Thunderbird - http://www.enigmail.net/

iQIcBAEBAgAGBQJSdXPaAAoJEAdzVfsmodw4+m8P/1Ce/PwZOYfiFuFJ8pmT2tb2
ro7tw7zSr12RSTvs+qRl7lDzJzQ6BDXOdXZCkcU0Vj3TDm8fdrrXN/iw3iQYU/5Y
3K7hj2mGqQUMovCLw0CbrMWrMvor7FhO6MZsRwe0+VxDV/dDrX5f5vSEhnkR26be
NrzOFU4hqGM3R4eLq8Bmw5rVD/VCrRzKoXXAvJb1EwM1+fQPjKi+bNMJu3reyfXU
5eMbbiM6tUMmPXy9M6vZrN+6ad53x3KUVP6+/hXxsrnfPp57WQzRZlvwTo/qdJ1C
Oxl71m6o2zkXbLTFmg1xmK/A4V1BPTLD6nLDIsw+wTBBfdn22pfDv6Q8d3VRctrd
6x+PMkwysoMjhemmkXCY/7G9GD6AGsrYSqIShSULd9QO5WxAFzRO01ewiRUCUFHi
Dn0LEjy8/R/CWK3jvj9uL3vQh9DLdOtqf/X7cEtjF3LThVP+stFTsmXObhTh/8Ai
YYjpnwOFG5ZtDzRZfP3OCwyhqlsaMlNgN4xnyR4GPaoJRP3a0zllblIbTWzg6nhY
jbON5Ec9N9txGhagYOoAvcQYqGyJdffkBzW82CRUsFYuYYmW2oLUQXPhAGDBIzzj
g/7RjMlM1OEp3qctxMZQlrTj7VJmhD768PRLh2XvEDmEC5Qb8Tcq28Nq5t85/O/6
i3+pzT5rMuiIZWLx7Msv
=tAUY
-----END PGP SIGNATURE-----



From allen.piscitello at gmail.com  Sun Nov  3 00:29:28 2013
From: allen.piscitello at gmail.com (Allen Piscitello)
Date: Sat, 2 Nov 2013 19:29:28 -0500
Subject: [Bitcoin-development] Message Signing based authentication
In-Reply-To: <527573DA.7010203@monetize.io>
References: <20131102050144.5850@gmx.com> <52756B2E.7030505@corganlabs.com>
	<527573DA.7010203@monetize.io>
Message-ID: <CAJfRnm6Jbm+6__zgvodAroDWRugyX_4atHH1k4+U9_1-GLThjw@mail.gmail.com>

This was one of my concerns when implementing a scheme where you sign a
refund transaction before the original transaction is broadcast.  I
originally tried to pass a hash and have the server sign it.  However, I
had no way to know that what I was signing wasn't a transaction that was
spending my coins!  So I changed the code to require sending the full
transaction, not just the hash.  The other way to mitigate this is through
not having any unspent outputs from this key.

For authentication, you could have both a user-generated and
server-generated portion, so that you signed something that clearly had
data from you, so even if the server-data was a hash of $EVIL_DOCUMENT, you
have clear plausible deniability in that your data that is also signed is
"ATTEMPTING LOGIN TO XYZ.COM Hash($EVIL_DOCUMENT)".


On Sat, Nov 2, 2013 at 4:51 PM, Mark Friedenbach <mark at monetize.io> wrote:

> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA1
>
> Or SIGHASH of a transaction spending those coins or updating the SIN...
>
> On 11/2/13 2:14 PM, Johnathan Corgan wrote:> On 11/01/2013 10:01 PM,
> bitcoingrant at gmx.com wrote:
> >
> >> Server provides a token for the client to sign.
> >
> > Anyone else concerned about signing an arbitrary string?  Could be
> > a hash of $EVIL_DOCUMENT, no?  I'd want to XOR the string with my
> > own randomly generated nonce, sign that, then pass the nonce and
> > the signature back to the server for verification.
> >
> -----BEGIN PGP SIGNATURE-----
> Version: GnuPG/MacGPG2 v2.0.19 (Darwin)
> Comment: GPGTools - http://gpgtools.org
> Comment: Using GnuPG with Thunderbird - http://www.enigmail.net/
>
> iQIcBAEBAgAGBQJSdXPaAAoJEAdzVfsmodw4+m8P/1Ce/PwZOYfiFuFJ8pmT2tb2
> ro7tw7zSr12RSTvs+qRl7lDzJzQ6BDXOdXZCkcU0Vj3TDm8fdrrXN/iw3iQYU/5Y
> 3K7hj2mGqQUMovCLw0CbrMWrMvor7FhO6MZsRwe0+VxDV/dDrX5f5vSEhnkR26be
> NrzOFU4hqGM3R4eLq8Bmw5rVD/VCrRzKoXXAvJb1EwM1+fQPjKi+bNMJu3reyfXU
> 5eMbbiM6tUMmPXy9M6vZrN+6ad53x3KUVP6+/hXxsrnfPp57WQzRZlvwTo/qdJ1C
> Oxl71m6o2zkXbLTFmg1xmK/A4V1BPTLD6nLDIsw+wTBBfdn22pfDv6Q8d3VRctrd
> 6x+PMkwysoMjhemmkXCY/7G9GD6AGsrYSqIShSULd9QO5WxAFzRO01ewiRUCUFHi
> Dn0LEjy8/R/CWK3jvj9uL3vQh9DLdOtqf/X7cEtjF3LThVP+stFTsmXObhTh/8Ai
> YYjpnwOFG5ZtDzRZfP3OCwyhqlsaMlNgN4xnyR4GPaoJRP3a0zllblIbTWzg6nhY
> jbON5Ec9N9txGhagYOoAvcQYqGyJdffkBzW82CRUsFYuYYmW2oLUQXPhAGDBIzzj
> g/7RjMlM1OEp3qctxMZQlrTj7VJmhD768PRLh2XvEDmEC5Qb8Tcq28Nq5t85/O/6
> i3+pzT5rMuiIZWLx7Msv
> =tAUY
> -----END PGP SIGNATURE-----
>
>
> ------------------------------------------------------------------------------
> Android is increasing in popularity, but the open development platform that
> developers love is also attractive to malware creators. Download this white
> paper to learn more about secure code signing practices that can help keep
> Android apps secure.
> http://pubads.g.doubleclick.net/gampad/clk?id=65839951&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131102/4ee1c42f/attachment.html>

From luke at dashjr.org  Sun Nov  3 00:33:55 2013
From: luke at dashjr.org (Luke-Jr)
Date: Sun, 3 Nov 2013 00:33:55 +0000
Subject: [Bitcoin-development] Message Signing based authentication
In-Reply-To: <CAJfRnm6Jbm+6__zgvodAroDWRugyX_4atHH1k4+U9_1-GLThjw@mail.gmail.com>
References: <20131102050144.5850@gmx.com> <527573DA.7010203@monetize.io>
	<CAJfRnm6Jbm+6__zgvodAroDWRugyX_4atHH1k4+U9_1-GLThjw@mail.gmail.com>
Message-ID: <201311030033.56983.luke@dashjr.org>

On Sunday, November 03, 2013 12:29:28 AM Allen Piscitello wrote:
> This was one of my concerns when implementing a scheme where you sign a
> refund transaction before the original transaction is broadcast.  I
> originally tried to pass a hash and have the server sign it.  However, I
> had no way to know that what I was signing wasn't a transaction that was
> spending my coins!  So I changed the code to require sending the full
> transaction, not just the hash.  The other way to mitigate this is through
> not having any unspent outputs from this key.

Well, there's no use case to sign with an address that has already been sent 
coins. The main problem with enforcing this is that you can't exactly stop 
someone from sending to an "identity" address.

Luke



From allen.piscitello at gmail.com  Sun Nov  3 01:19:51 2013
From: allen.piscitello at gmail.com (Allen Piscitello)
Date: Sat, 2 Nov 2013 20:19:51 -0500
Subject: [Bitcoin-development] Message Signing based authentication
In-Reply-To: <201311030033.56983.luke@dashjr.org>
References: <20131102050144.5850@gmx.com> <527573DA.7010203@monetize.io>
	<CAJfRnm6Jbm+6__zgvodAroDWRugyX_4atHH1k4+U9_1-GLThjw@mail.gmail.com>
	<201311030033.56983.luke@dashjr.org>
Message-ID: <CAJfRnm6eRRF1ZxRJ89enPNkaG3-BNyboP9DujmuBgQxNhdhU8g@mail.gmail.com>

I actually had a use case in my case where it was possible, and that was
the check I used to get around it, just configured it so that I always
generated a new key when I needed to set up a 2 of 2 Multisig Refund Tx.
 It was either that or making sure I had no unspent outputs.  The use case
of doing it was laziness in just creating a single key.


On Sat, Nov 2, 2013 at 7:33 PM, Luke-Jr <luke at dashjr.org> wrote:

> On Sunday, November 03, 2013 12:29:28 AM Allen Piscitello wrote:
> > This was one of my concerns when implementing a scheme where you sign a
> > refund transaction before the original transaction is broadcast.  I
> > originally tried to pass a hash and have the server sign it.  However, I
> > had no way to know that what I was signing wasn't a transaction that was
> > spending my coins!  So I changed the code to require sending the full
> > transaction, not just the hash.  The other way to mitigate this is
> through
> > not having any unspent outputs from this key.
>
> Well, there's no use case to sign with an address that has already been
> sent
> coins. The main problem with enforcing this is that you can't exactly stop
> someone from sending to an "identity" address.
>
> Luke
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131102/8c7dc481/attachment.html>

From luke at dashjr.org  Sun Nov  3 01:27:41 2013
From: luke at dashjr.org (Luke-Jr)
Date: Sun, 3 Nov 2013 01:27:41 +0000
Subject: [Bitcoin-development] Message Signing based authentication
In-Reply-To: <CAJfRnm6eRRF1ZxRJ89enPNkaG3-BNyboP9DujmuBgQxNhdhU8g@mail.gmail.com>
References: <20131102050144.5850@gmx.com> <201311030033.56983.luke@dashjr.org>
	<CAJfRnm6eRRF1ZxRJ89enPNkaG3-BNyboP9DujmuBgQxNhdhU8g@mail.gmail.com>
Message-ID: <201311030127.43010.luke@dashjr.org>

On Sunday, November 03, 2013 1:19:51 AM Allen Piscitello wrote:
> I actually had a use case in my case where it was possible, and that was
> the check I used to get around it, just configured it so that I always
> generated a new key when I needed to set up a 2 of 2 Multisig Refund Tx.
>  It was either that or making sure I had no unspent outputs.  The use case
> of doing it was laziness in just creating a single key.

Use cases mean an actual use, not mere laziness. Bitcoin as a system has 
always required a unique EC key (and address) for each transaction.

Luke



From allen.piscitello at gmail.com  Sun Nov  3 01:36:59 2013
From: allen.piscitello at gmail.com (Allen Piscitello)
Date: Sat, 2 Nov 2013 20:36:59 -0500
Subject: [Bitcoin-development] Message Signing based authentication
In-Reply-To: <201311030127.43010.luke@dashjr.org>
References: <20131102050144.5850@gmx.com> <201311030033.56983.luke@dashjr.org>
	<CAJfRnm6eRRF1ZxRJ89enPNkaG3-BNyboP9DujmuBgQxNhdhU8g@mail.gmail.com>
	<201311030127.43010.luke@dashjr.org>
Message-ID: <CAJfRnm6_Q2Meoc1wu7Ppa1BpaZQuhdHP5uxZO3UtKppkDXVdWA@mail.gmail.com>

Required vs. strongly recommended is an important distinction.  Satoshi
Dice reuses EC Keys for every single transaction.  Exchanges will have the
same address you deposit in over and over, which gets reused.  This is a
best practice argument rather than a protocol requirement.


On Sat, Nov 2, 2013 at 8:27 PM, Luke-Jr <luke at dashjr.org> wrote:

> On Sunday, November 03, 2013 1:19:51 AM Allen Piscitello wrote:
> > I actually had a use case in my case where it was possible, and that was
> > the check I used to get around it, just configured it so that I always
> > generated a new key when I needed to set up a 2 of 2 Multisig Refund Tx.
> >  It was either that or making sure I had no unspent outputs.  The use
> case
> > of doing it was laziness in just creating a single key.
>
> Use cases mean an actual use, not mere laziness. Bitcoin as a system has
> always required a unique EC key (and address) for each transaction.
>
> Luke
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131102/7cd74af0/attachment.html>

From timo.hanke at web.de  Sun Nov  3 06:23:09 2013
From: timo.hanke at web.de (Timo Hanke)
Date: Sun, 3 Nov 2013 01:23:09 -0500
Subject: [Bitcoin-development] Message Signing based authentication
In-Reply-To: <52756B2E.7030505@corganlabs.com>
References: <20131102050144.5850@gmx.com>
 <52756B2E.7030505@corganlabs.com>
Message-ID: <20131103062309.GH16611@crunch>

On Sat, Nov 02, 2013 at 02:14:22PM -0700, Johnathan Corgan wrote:
> On 11/01/2013 10:01 PM, bitcoingrant at gmx.com wrote:
> 
> > Server provides a token for the client to sign.
> 
> Anyone else concerned about signing an arbitrary string?  Could be a
> hash of $EVIL_DOCUMENT, no?  I'd want to XOR the string with my own
> randomly generated nonce, sign that, then pass the nonce and the
> signature back to the server for verification.

There were several replies like this, suggesting the client should
modify or add something to the token, or should give the token some
structure. But signing a token is not what the client should do in the
first place. At least not if the client's key is (EC)DSA. The standard
way is a challenge-response protocol in the form of the Diffie-Hellman
key exchange, which avoids producing any unintentional signatures.

Say the clients wants to prove he owns private key p, belonging to
public key P. P=p*G and G is the "base" of the (EC)DSA signature system.
The server generates a new keypair (a,A), a is private, A is public, and
sends A to the client as a challenge. The client computes and sends p*A
back. The server verifies whether p*A = a*P.

Only "public keys" are exchanged here, there's nothing that can be
mistaken for a (EC)DSA signature.

Timo

> -- 
> Johnathan Corgan, Corgan Labs
> SDR Training and Development Services
> http://corganlabs.com

> begin:vcard
> fn:Johnathan Corgan
> n:Corgan;Johnathan
> org:Corgan Enterprises LLC dba Corgan Labs
> adr:;;6081 Meridian Ave. Suite 70-111;San Jose;CA;95120;United States
> email;internet:johnathan at corganlabs.com
> title:Managing Partner
> tel;work:+1 408 463 6614
> x-mozilla-html:FALSE
> url:http://corganlabs.com
> version:2.1
> end:vcard
> 




-- 
Timo Hanke
PGP 1EFF 69BC 6FB7 8744 14DB  631D 1BB5 D6E3 AB96 7DA8



From timo.hanke at web.de  Sun Nov  3 06:41:11 2013
From: timo.hanke at web.de (Timo Hanke)
Date: Sun, 3 Nov 2013 01:41:11 -0500
Subject: [Bitcoin-development] Proposal to replace BIP0039
In-Reply-To: <5274C99A.8060304@gmx.de>
References: <trinity-ba3941a0-f758-4372-b431-c64e9b44328a-1382635758149@3capp-gmx-bs09>
	<CAJna-HjgpRhLdVGh+prx54VezHaH1vXGpPotW1Xkz2tiAiWrbg@mail.gmail.com>
	<526BDEC2.2090709@gmx.de>
	<CAJna-HgH1g8iiSvxXrJuga808SQJ6DKo4AYw4fxpwTRCsL+EyQ@mail.gmail.com>
	<CAPg+sBiuLJJV3pB-EF3O9sgB_Z3tuLhEg9k=A9mcxJvgy3UQSw@mail.gmail.com>
	<52721F47.30206@gmx.de>
	<CAJna-Hj+q7oyTj8SWiVESPt5Web-mLuDhv7yA8zF5wRD81aBXA@mail.gmail.com>
	<5274C99A.8060304@gmx.de>
Message-ID: <20131103064111.GI16611@crunch>

On Sat, Nov 02, 2013 at 10:44:58AM +0100, Thomas Voegtlin wrote:
> 
> >To be specific, we (in cooperation with / inspired by Timo Hanke)
> >developed method how to prove that the seed generated by Trezor
> >has been created using combination of computer-provided entropy
> >and device-provided entropy, without leaking full private
> >information to other computer, just because we want Trezor to be
> >blackbox-testable and fully deterministic (seed generation is
> >currently the only operation which uses any source of RNG).
> >
> 
> Thanks for the explanation. Here is how I understand how it works,
> please correct me if I'm wrong:
> 
> The user's computer picks a random number a, the Trezor picks a
> random number b.
> Trezor adds a and b in the secp256k1 group, and this creates a
> master private key k.
> Trezor sends the corresponding master public key K to the computer.
> Thus, the computer can check that K was derived from a, without knowing b.

No. You mean the computer would use B for this check? 
(k,K) could be rigged by Trezor, who computes b as k-a.

Timo

> This also allows the computer to check that any bitcoin address
> derived from K is derived from a, without leaking b. (and
> reciprocally)
> 
> However, it seems to me that this property will work only with bip32
> public derivations; if a private derivation is used, don't you need
> to know k?
> 
> 
> 

-- 
Timo Hanke
PGP 1EFF 69BC 6FB7 8744 14DB  631D 1BB5 D6E3 AB96 7DA8



From thomasv1 at gmx.de  Sun Nov  3 07:03:54 2013
From: thomasv1 at gmx.de (Thomas Voegtlin)
Date: Sun, 03 Nov 2013 08:03:54 +0100
Subject: [Bitcoin-development] Proposal to replace BIP0039
In-Reply-To: <20131103064111.GI16611@crunch>
References: <trinity-ba3941a0-f758-4372-b431-c64e9b44328a-1382635758149@3capp-gmx-bs09>
	<CAJna-HjgpRhLdVGh+prx54VezHaH1vXGpPotW1Xkz2tiAiWrbg@mail.gmail.com>
	<526BDEC2.2090709@gmx.de>
	<CAJna-HgH1g8iiSvxXrJuga808SQJ6DKo4AYw4fxpwTRCsL+EyQ@mail.gmail.com>
	<CAPg+sBiuLJJV3pB-EF3O9sgB_Z3tuLhEg9k=A9mcxJvgy3UQSw@mail.gmail.com>
	<52721F47.30206@gmx.de>
	<CAJna-Hj+q7oyTj8SWiVESPt5Web-mLuDhv7yA8zF5wRD81aBXA@mail.gmail.com>
	<5274C99A.8060304@gmx.de> <20131103064111.GI16611@crunch>
Message-ID: <5275F55A.1030805@gmx.de>


Le 03/11/2013 07:41, Timo Hanke a ?crit :
> No. You mean the computer would use B for this check? (k,K) could be 
> rigged by Trezor, who computes b as k-a. Timo

I was just asking a question, in order to understand how this device 
works, and what are its requirements.
if you think you can help, please explain.



From timo.hanke at web.de  Sun Nov  3 07:40:52 2013
From: timo.hanke at web.de (Timo Hanke)
Date: Sun, 3 Nov 2013 01:40:52 -0600
Subject: [Bitcoin-development] Proposal to replace BIP0039
In-Reply-To: <5275F55A.1030805@gmx.de>
References: <trinity-ba3941a0-f758-4372-b431-c64e9b44328a-1382635758149@3capp-gmx-bs09>
	<CAJna-HjgpRhLdVGh+prx54VezHaH1vXGpPotW1Xkz2tiAiWrbg@mail.gmail.com>
	<526BDEC2.2090709@gmx.de>
	<CAJna-HgH1g8iiSvxXrJuga808SQJ6DKo4AYw4fxpwTRCsL+EyQ@mail.gmail.com>
	<CAPg+sBiuLJJV3pB-EF3O9sgB_Z3tuLhEg9k=A9mcxJvgy3UQSw@mail.gmail.com>
	<52721F47.30206@gmx.de>
	<CAJna-Hj+q7oyTj8SWiVESPt5Web-mLuDhv7yA8zF5wRD81aBXA@mail.gmail.com>
	<5274C99A.8060304@gmx.de> <20131103064111.GI16611@crunch>
	<5275F55A.1030805@gmx.de>
Message-ID: <20131103074052.GJ16611@crunch>

I think the communication would have to go the other way around. Trezor
has to commit to a value First. Like this:

Trezor picks random s and sends S=s*G to computer, keeping s secret.
Computer picks random t and sends t to Trezor.  Trezor makes r := s+t
its internal master private key with corresponding master public key 
R := (s+t)*G. Since R = S+t*G, the computer can verify the master
public key. As you say, the computer can then store R and can later
verify for each derived pubkey that it was indeed derived from R, hence
from his own entropy t.

However, Trezor could not use straight bip32 out of the box. The
chaincode would have to be something like SHA(R). And the seed (that
gets translated to mnemonic) would be r itself, making it 256 bit
instead of only 128 bit.

If the longer seed is bearable then this is a good way to do it.

One question remains: if you only write down the mnemonic how can you be
sure that it is correct and corresponds to the secret in Trezor? You
cannot verify that on paper. You would have to restore it on some
device, eg another empty Trezor, and see if it brings up the same master
pubkey. Right? 

Timo

On Sun, Nov 03, 2013 at 08:03:54AM +0100, Thomas Voegtlin wrote:
> 
> Le 03/11/2013 07:41, Timo Hanke a ?crit :
> >No. You mean the computer would use B for this check? (k,K) could
> >be rigged by Trezor, who computes b as k-a. Timo
> 
> I was just asking a question, in order to understand how this device
> works, and what are its requirements.
> if you think you can help, please explain.
> 
> 

-- 
Timo Hanke
PGP 1EFF 69BC 6FB7 8744 14DB  631D 1BB5 D6E3 AB96 7DA8



From thomasv1 at gmx.de  Sun Nov  3 08:39:42 2013
From: thomasv1 at gmx.de (Thomas Voegtlin)
Date: Sun, 03 Nov 2013 09:39:42 +0100
Subject: [Bitcoin-development] Proposal to replace BIP0039
In-Reply-To: <20131103074052.GJ16611@crunch>
References: <trinity-ba3941a0-f758-4372-b431-c64e9b44328a-1382635758149@3capp-gmx-bs09>
	<CAJna-HjgpRhLdVGh+prx54VezHaH1vXGpPotW1Xkz2tiAiWrbg@mail.gmail.com>
	<526BDEC2.2090709@gmx.de>
	<CAJna-HgH1g8iiSvxXrJuga808SQJ6DKo4AYw4fxpwTRCsL+EyQ@mail.gmail.com>
	<CAPg+sBiuLJJV3pB-EF3O9sgB_Z3tuLhEg9k=A9mcxJvgy3UQSw@mail.gmail.com>
	<52721F47.30206@gmx.de>
	<CAJna-Hj+q7oyTj8SWiVESPt5Web-mLuDhv7yA8zF5wRD81aBXA@mail.gmail.com>
	<5274C99A.8060304@gmx.de> <20131103064111.GI16611@crunch>
	<5275F55A.1030805@gmx.de> <20131103074052.GJ16611@crunch>
Message-ID: <52760BCE.6080501@gmx.de>


Le 03/11/2013 08:40, Timo Hanke a ?crit :
> I think the communication would have to go the other way around. Trezor
> has to commit to a value First. Like this:
>
> Trezor picks random s and sends S=s*G to computer, keeping s secret.
> Computer picks random t and sends t to Trezor.  Trezor makes r := s+t
> its internal master private key with corresponding master public key
> R := (s+t)*G. Since R = S+t*G, the computer can verify the master
> public key. As you say, the computer can then store R and can later
> verify for each derived pubkey that it was indeed derived from R, hence
> from his own entropy t.

I'm not sure how this differs from what I wrote...

However, if this is how it works, then my question remains:
The computer has no proof to know that pubkeys derived through bip32's 
private derivations are derived from its own entropy...
This verification would only work for public (aka type2) derivations.

.. but maybe Trezor works in a different way? I think an explanation 
from slush would be needed.


> However, Trezor could not use straight bip32 out of the box. The
> chaincode would have to be something like SHA(R). And the seed (that
> gets translated to mnemonic) would be r itself, making it 256 bit
> instead of only 128 bit.
>
> If the longer seed is bearable then this is a good way to do it.
>
> One question remains: if you only write down the mnemonic how can you be
> sure that it is correct and corresponds to the secret in Trezor? You
> cannot verify that on paper. You would have to restore it on some
> device, eg another empty Trezor, and see if it brings up the same master
> pubkey. Right?
>
I guess you have to trust Trezor that it derives R from r





From pete at petertodd.org  Mon Nov  4 10:52:43 2013
From: pete at petertodd.org (Peter Todd)
Date: Mon, 4 Nov 2013 05:52:43 -0500
Subject: [Bitcoin-development] Zeroconf-safe tx replacement (replace-for-fee)
In-Reply-To: <CAPaL=UVnfVkU_mbQKE2gg7RXBv+B13A1eHU4VpiHkBdmfea80g@mail.gmail.com>
References: <20131024143043.GA12658@savin>
	<CANEZrP100Lg_1LcFMKx1yWrGTSFb5GZmLmXNbZjPGaiEgOeuwA@mail.gmail.com>
	<20131024144358.GA17142@savin>
	<CANEZrP1TfM+wYbGjUk3+8JJZs6cKZXdb57xGMc=hDr9dQjMMZA@mail.gmail.com>
	<20131024145447.GA19949@savin>
	<CABsx9T0T0v=HnRRr6BLKNQOFMBJWrhF4G4SOCJ9DidGJBB8Eow@mail.gmail.com>
	<op.w5h2rwhcyldrnw@laptop-air>
	<CABsx9T0nc-TO1_=n47UnYHiWKSNvci9Xyhni9PQa=DRo1B7FDg@mail.gmail.com>
	<CAPaL=UVnfVkU_mbQKE2gg7RXBv+B13A1eHU4VpiHkBdmfea80g@mail.gmail.com>
Message-ID: <20131104105243.GA28805@savin>

On Mon, Oct 28, 2013 at 07:17:50AM +0000, John Dillon wrote:
> This discussion seems to be a lot of hot air over a simple observation that
> estimates are imperfect and always will be. I do not understand you vehement
> opposition the notion that a backup is a good thing except in the context that
> replacement to change fees is halfway to profit-seeking replacement by fee.
> 
> 
> Peter Todd:
> 
> You did a fair bit of leg work for replace-by-fee. Seems to me that
> replace-for-fee will help prep infrastructure to eventual replace-by-fee usage,
> while avoiding some of the politics around zero-conf transactions.

Here's the easy part done:

https://github.com/petertodd/bitcoin/tree/replace-for-fee

The rules are pretty simple: a replacement can only happen if every
output in the old transaction has a corresponding output in the new with
the same scriptPubKey, and of equal or greater value. All old tx outputs
must also be unspent. For implementation reasons, the order of the
outputs must also be the same, and the code will never replace two
transactions with one.

If someone wanted to mine with the above code, I'd say go right ahead.
(modulo general testing concerns)

Client-side though it shows a flaw with the Bitcoin wallet code that I
should have realized months ago: essentially a transaction in your
wallet with double-spent inputs forever blocks those inputs from being
spent. This doesn't happen too often because you're wallet will
currently never create double-spends, and will never respend unconfirmed
coins from someone else, but any CoinJoin implementation violates that
assumption and an attacker could easily cause a lot of havok.

I'll have to think about the issue further, but essentially the wallet
needs to recognize when a transaction's inputs no longer exist, and mark
the remaining inputs as unspent. Actually deleting those transactions
from your wallet is secondary to that more important concern.

-- 
'peter'[:-1]@petertodd.org
000000002fdfe6bbcffea72c934475cd4fcfe78d8d06910016d707c9b4a9e827
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 685 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131104/99189ff5/attachment.sig>

From adam at cypherspace.org  Mon Nov  4 11:10:38 2013
From: adam at cypherspace.org (Adam Back)
Date: Mon, 4 Nov 2013 12:10:38 +0100
Subject: [Bitcoin-development] Zeroconf-safe tx replacement
 (replace-for-fee)
In-Reply-To: <20131104105243.GA28805@savin>
References: <20131024143043.GA12658@savin>
	<CANEZrP100Lg_1LcFMKx1yWrGTSFb5GZmLmXNbZjPGaiEgOeuwA@mail.gmail.com>
	<20131024144358.GA17142@savin>
	<CANEZrP1TfM+wYbGjUk3+8JJZs6cKZXdb57xGMc=hDr9dQjMMZA@mail.gmail.com>
	<20131024145447.GA19949@savin>
	<CABsx9T0T0v=HnRRr6BLKNQOFMBJWrhF4G4SOCJ9DidGJBB8Eow@mail.gmail.com>
	<op.w5h2rwhcyldrnw@laptop-air>
	<CABsx9T0nc-TO1_=n47UnYHiWKSNvci9Xyhni9PQa=DRo1B7FDg@mail.gmail.com>
	<CAPaL=UVnfVkU_mbQKE2gg7RXBv+B13A1eHU4VpiHkBdmfea80g@mail.gmail.com>
	<20131104105243.GA28805@savin>
Message-ID: <20131104111038.GA24552@netbook.cypherspace.org>

Might leak less wiggle room and be simpler/more robut to validate that
*everything* has to be the same except for the amount going to one (presumed
change) address.  A privacy leak I know, but dont do that - ie send enough
change the first time.  And network analysis has shown change addresses
arent adding hardly any privacy.

We need more robust privacy fixes independently.  I do not support damaging
the 0-conf feature, so I think this later approach is a better track for
revising fees.

Adam

On Mon, Nov 04, 2013 at 05:52:43AM -0500, Peter Todd wrote:
>On Mon, Oct 28, 2013 at 07:17:50AM +0000, John Dillon wrote:
>> This discussion seems to be a lot of hot air over a simple observation that
>> estimates are imperfect and always will be. I do not understand you vehement
>> opposition the notion that a backup is a good thing except in the context that
>> replacement to change fees is halfway to profit-seeking replacement by fee.
>>
>>
>> Peter Todd:
>>
>> You did a fair bit of leg work for replace-by-fee. Seems to me that
>> replace-for-fee will help prep infrastructure to eventual replace-by-fee usage,
>> while avoiding some of the politics around zero-conf transactions.



From mike at plan99.net  Mon Nov  4 11:26:30 2013
From: mike at plan99.net (Mike Hearn)
Date: Mon, 4 Nov 2013 12:26:30 +0100
Subject: [Bitcoin-development] Auto-generated miner backbone
Message-ID: <CANEZrP3iYBdg3p7Ru4O-UENY_yyQDA8=9PGn=KDKGGTrZ-xkRw@mail.gmail.com>

W.R.T. this paper and the oft-discussed miner backbone,

  http://arxiv.org/pdf/1311.0243v1.pdf

I'm wondering about an alternative protocol change that perhaps has less
subtle implications than their suggested change. Rather than address the
problem by assuming the network is full of sybil nodes and changing the
rules for selecting the chain to build on, how about if we wrote code to
automatically build a miner backbone by having IP addresses of nodes
embedded into coinbases, then having any bitcoind that is creating work
automatically connect to IPs that appeared in enough recent blocks?

This would have the effect of automatically linking all the major pools
together, with no administration overhead.

For bonus points, the IPs could be IPv6 and then the trick we use to pack
hidden services into IPv6 address space would allow nodes to be reached via
Tor. This might be useful in the case of pools that don't to reveal the
location of their bitcoin node[s], like for anti-DoS reasons.

It feels like this should be achievable with a few days of solid coding and
a couple of new command line flags, and the impact is much easier to reason
about than a fundamental rule change like the one proposed by the paper.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131104/55c09065/attachment.html>

From thomasv1 at gmx.de  Mon Nov  4 11:40:00 2013
From: thomasv1 at gmx.de (Thomas Voegtlin)
Date: Mon, 04 Nov 2013 12:40:00 +0100
Subject: [Bitcoin-development] Electrum version 1.9
Message-ID: <52778790.1030704@gmx.de>

Electrum version 1.9 is now released.

This version connects to multiple servers, and it also checks the SSL 
certificates of servers it knows.
Please note that the BIP32 features are postponed (to version 2.0), due 
to the discussions about mnemonic seed format.


Here is the changelog:

# Release 1.9
* The client connects to multiple servers in order to retrieve block 
headers and find the longest chain
* SSL certificate validation (to prevent MITM)
* Deterministic signatures (RFC 6979)
* Menu to create/restore/open wallets
* Create transactions with multiple outputs from CSV (comma separated 
values)
* New user interface for text mode, named "stdio" (does not use curses)
* Plugins are no longer tied to the qt GUI, they can reach all GUIs
* Proxy bugs have been fixed




From pete at petertodd.org  Mon Nov  4 11:53:14 2013
From: pete at petertodd.org (Peter Todd)
Date: Mon, 4 Nov 2013 06:53:14 -0500
Subject: [Bitcoin-development] Auto-generated miner backbone
In-Reply-To: <CANEZrP3iYBdg3p7Ru4O-UENY_yyQDA8=9PGn=KDKGGTrZ-xkRw@mail.gmail.com>
References: <CANEZrP3iYBdg3p7Ru4O-UENY_yyQDA8=9PGn=KDKGGTrZ-xkRw@mail.gmail.com>
Message-ID: <20131104115314.GA1013@savin>

On Mon, Nov 04, 2013 at 12:26:30PM +0100, Mike Hearn wrote:
> W.R.T. this paper and the oft-discussed miner backbone,
> 
>   http://arxiv.org/pdf/1311.0243v1.pdf
> 
> I'm wondering about an alternative protocol change that perhaps has less
> subtle implications than their suggested change. Rather than address the
> problem by assuming the network is full of sybil nodes and changing the
> rules for selecting the chain to build on, how about if we wrote code to
> automatically build a miner backbone by having IP addresses of nodes
> embedded into coinbases, then having any bitcoind that is creating work
> automatically connect to IPs that appeared in enough recent blocks?

I proposed this as a means of giving a mechanism for wallets to get
non-sybilled peers as well.

> This would have the effect of automatically linking all the major pools
> together, with no administration overhead.
> 
> For bonus points, the IPs could be IPv6 and then the trick we use to pack
> hidden services into IPv6 address space would allow nodes to be reached via
> Tor. This might be useful in the case of pools that don't to reveal the
> location of their bitcoin node[s], like for anti-DoS reasons.
> 
> It feels like this should be achievable with a few days of solid coding and
> a couple of new command line flags, and the impact is much easier to reason
> about than a fundamental rule change like the one proposed by the paper.

Doing so encourages pools to only bother connecting to other pools,
which is a strong centralizing force. But given the nasty incentives
present anyway - it's in your advantage to distribute your blocks to no
more than a majority of hashing power if you can do so consistently -
I'm unconvinced that this won't happen anyway.

The maximal benefit would be if two sets of addresses were published:
public and private. The issue with publishing addresses is DoS attacks,
but publishing Tor addresses doesn't stop attacks. What would discourage
attacks however would be to encrypt that data such that only the
creators of specific prior blocks could decrypt it. This limits the
audience to those with incentives not to commit a DoS attack. (DoS
attack the IP, and you'll no longer get preferential peering)

Say what you want about centralization, but for the pools involved it's
a good idea.


On a technical level, the coinbase is limited in size, and people use it
for other purposes, so lets define a standard where this data is stored
in an OP_RETURN txout of the form:

OP_RETURN <key> <value> <key> <value> ...

Multiple values with the same key should be allowed. This data should be
placed in the last txout so that SPV nodes can eventually be given it
with a SHA256 midstate.

-- 
'peter'[:-1]@petertodd.org
00000000000000080e395c361bdf9db583d5f4c0e144f476c229285b15eae59c
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 685 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131104/e4f7f86e/attachment.sig>

From gronager at ceptacle.com  Mon Nov  4 11:58:06 2013
From: gronager at ceptacle.com (Michael Gronager)
Date: Mon, 04 Nov 2013 12:58:06 +0100
Subject: [Bitcoin-development] Auto-generated miner backbone
In-Reply-To: <CANEZrP3iYBdg3p7Ru4O-UENY_yyQDA8=9PGn=KDKGGTrZ-xkRw@mail.gmail.com>
References: <CANEZrP3iYBdg3p7Ru4O-UENY_yyQDA8=9PGn=KDKGGTrZ-xkRw@mail.gmail.com>
Message-ID: <52778BCE.8030904@ceptacle.com>

On 4/11/13, 12:26 , Mike Hearn wrote:
> W.R.T. this paper and the oft-discussed miner backbone,
> 
>   http://arxiv.org/pdf/1311.0243v1.pdf
> 
> I'm wondering about an alternative protocol change that perhaps has less
> subtle implications than their suggested change. 

The suggested change is actually very simple (minutes of coding) and
elegant and addresses precisely the identified problem. It is actually a
mental shortcut in the assumption of how probability works when mining a
chain. The paper simply corrects this error - nice work!

> Rather than address the
> problem by assuming the network is full of sybil nodes and changing the
> rules for selecting the chain to build on, how about if we wrote code to
> automatically build a miner backbone by having IP addresses of nodes
> embedded into coinbases, then having any bitcoind that is creating work
> automatically connect to IPs that appeared in enough recent blocks? 

You suggestion could perhaps be fun for other purposes, but does not
rule out pools of "selfish miners". Further, it binds physical state
(ip) to the blockchain, which has so far held no assumptions on the
technology of the system on which it is running.

> 
> This would have the effect of automatically linking all the major pools
> together, with no administration overhead.
> 
> For bonus points, the IPs could be IPv6 and then the trick we use to
> pack hidden services into IPv6 address space would allow nodes to be
> reached via Tor. This might be useful in the case of pools that don't to
> reveal the location of their bitcoin node[s], like for anti-DoS reasons.
> 
> It feels like this should be achievable with a few days of solid coding
> and a couple of new command line flags, and the impact is much easier to
> reason about than a fundamental rule change like the one proposed by the
> paper.
> 
> 
> ------------------------------------------------------------------------------
> Android is increasing in popularity, but the open development platform that
> developers love is also attractive to malware creators. Download this white
> paper to learn more about secure code signing practices that can help keep
> Android apps secure.
> http://pubads.g.doubleclick.net/gampad/clk?id=65839951&iu=/4140/ostg.clktrk
> 
> 
> 
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 




From pete at petertodd.org  Mon Nov  4 11:59:25 2013
From: pete at petertodd.org (Peter Todd)
Date: Mon, 4 Nov 2013 06:59:25 -0500
Subject: [Bitcoin-development] Zeroconf-safe tx replacement
 (replace-for-fee)
In-Reply-To: <20131104111038.GA24552@netbook.cypherspace.org>
References: <CANEZrP100Lg_1LcFMKx1yWrGTSFb5GZmLmXNbZjPGaiEgOeuwA@mail.gmail.com>
	<20131024144358.GA17142@savin>
	<CANEZrP1TfM+wYbGjUk3+8JJZs6cKZXdb57xGMc=hDr9dQjMMZA@mail.gmail.com>
	<20131024145447.GA19949@savin>
	<CABsx9T0T0v=HnRRr6BLKNQOFMBJWrhF4G4SOCJ9DidGJBB8Eow@mail.gmail.com>
	<op.w5h2rwhcyldrnw@laptop-air>
	<CABsx9T0nc-TO1_=n47UnYHiWKSNvci9Xyhni9PQa=DRo1B7FDg@mail.gmail.com>
	<CAPaL=UVnfVkU_mbQKE2gg7RXBv+B13A1eHU4VpiHkBdmfea80g@mail.gmail.com>
	<20131104105243.GA28805@savin>
	<20131104111038.GA24552@netbook.cypherspace.org>
Message-ID: <20131104115925.GB1013@savin>

On Mon, Nov 04, 2013 at 12:10:38PM +0100, Adam Back wrote:
> Might leak less wiggle room and be simpler/more robut to validate that
> *everything* has to be the same except for the amount going to one (presumed
> change) address.  A privacy leak I know, but dont do that - ie send enough
> change the first time.  And network analysis has shown change addresses
> arent adding hardly any privacy.
> 
> We need more robust privacy fixes independently.  I do not support damaging
> the 0-conf feature, so I think this later approach is a better track for
> revising fees.

There's been a number of uses found for tx-replacement beyond simply
modifying fees. In additition, allowing for the value of a specificly
designated change address to be changed after the fact is not compatible
with current zero-conf-using implementations; they don't know to treat a
txout as special so allowing its value to be reduced would allow for a
zeroconf attack.

Anyway, if you look at the code that actually implements the
replacement, it's extremely simple already. I see no reason to make it
less general; transaction relaying rules are not part of consensus.

-- 
'peter'[:-1]@petertodd.org
000000000000000a6dd96c551eca7299463e4e523462798a006535f412b519c7
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 685 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131104/04bb20b1/attachment.sig>

From mike at plan99.net  Mon Nov  4 12:00:16 2013
From: mike at plan99.net (Mike Hearn)
Date: Mon, 4 Nov 2013 13:00:16 +0100
Subject: [Bitcoin-development] Auto-generated miner backbone
In-Reply-To: <20131104115314.GA1013@savin>
References: <CANEZrP3iYBdg3p7Ru4O-UENY_yyQDA8=9PGn=KDKGGTrZ-xkRw@mail.gmail.com>
	<20131104115314.GA1013@savin>
Message-ID: <CANEZrP1uqee1UO=zb+50t9BNtv2voTHoCKQCTQExNyoL=Y0=PA@mail.gmail.com>

On Mon, Nov 4, 2013 at 12:53 PM, Peter Todd <pete at petertodd.org> wrote:

> I proposed this as a means of giving a mechanism for wallets to get
> non-sybilled peers as well.
>

Ah yes, good point.


> Doing so encourages pools to only bother connecting to other pools,
> which is a strong centralizing force.
>

They could already create such a setup, but we don't observe it in practice.


> On a technical level, the coinbase is limited in size, and people use it
> for other purposes, so lets define a standard ....


Given that IP address data is inherently transient, perhaps a better
solution is to define a short hash in the coinbase that commits to extra
data that is relayed along with block data (e.g. appended to the block
message). It can then be stored temporarily in the block db and erased
after some time, like a few months. It would therefore not really be a part
of the chain, but could be extended as we see fit with any other
semi-transient data required. A new "getextra" message would let nodes
query for it.

The hash can be short because it doesn't have to survive brute forcing
attacks longer than the expected validity period of the transient data
anyway. 80 bits would probably be overkill.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131104/2a432175/attachment.html>

From mike at plan99.net  Mon Nov  4 12:03:50 2013
From: mike at plan99.net (Mike Hearn)
Date: Mon, 4 Nov 2013 13:03:50 +0100
Subject: [Bitcoin-development] Auto-generated miner backbone
In-Reply-To: <52778BCE.8030904@ceptacle.com>
References: <CANEZrP3iYBdg3p7Ru4O-UENY_yyQDA8=9PGn=KDKGGTrZ-xkRw@mail.gmail.com>
	<52778BCE.8030904@ceptacle.com>
Message-ID: <CANEZrP3cfZ_SvyPmfinkGqERKrOJ8NR5ZvC4VfjRv=GsiabbdQ@mail.gmail.com>

>
> The suggested change is actually very simple (minutes of coding) and
> elegant and addresses precisely the identified problem.
>

Disagree. Unless I'm misunderstanding what they propose, their suggested
change would mean anyone could broadcast a newly discovered block at any
point and have a 50% chance of being the winner. That is a fundamental
change to the dynamics of how Bitcoin works that would require careful
thought and study.

Also, their solution doesn't really address the problem they bring up, it
just changes the size of the threshold required.

Fundamentally, their attack is a sybil attack. It doesn't work if they
can't delay or block a pools competitors because mostly their block will
come in second place and they'll lose the race. Thus the solution should be
a solution to sybil attacks.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131104/edb33ec8/attachment.html>

From pete at petertodd.org  Mon Nov  4 12:20:39 2013
From: pete at petertodd.org (Peter Todd)
Date: Mon, 4 Nov 2013 07:20:39 -0500
Subject: [Bitcoin-development] Auto-generated miner backbone
In-Reply-To: <CANEZrP3cfZ_SvyPmfinkGqERKrOJ8NR5ZvC4VfjRv=GsiabbdQ@mail.gmail.com>
References: <CANEZrP3iYBdg3p7Ru4O-UENY_yyQDA8=9PGn=KDKGGTrZ-xkRw@mail.gmail.com>
	<52778BCE.8030904@ceptacle.com>
	<CANEZrP3cfZ_SvyPmfinkGqERKrOJ8NR5ZvC4VfjRv=GsiabbdQ@mail.gmail.com>
Message-ID: <20131104122039.GC1013@savin>

On Mon, Nov 04, 2013 at 01:03:50PM +0100, Mike Hearn wrote:
> >
> > The suggested change is actually very simple (minutes of coding) and
> > elegant and addresses precisely the identified problem.
> >
> 
> Disagree. Unless I'm misunderstanding what they propose, their suggested
> change would mean anyone could broadcast a newly discovered block at any
> point and have a 50% chance of being the winner. That is a fundamental
> change to the dynamics of how Bitcoin works that would require careful
> thought and study.

It's worth pointing out that my previous post on this list for
"near-block broadcasts" - where blocks that almost but not quite met the
proof-of-work threshold are also broadcast so that propagation of
transactions can be proven - also naturally leads to their proposed
solution. Any miner who sees a near-block-broadcast extending a chain
fork that they aren't mining on would naturally see that as evidence
that the other side has more hashing power, and thus it's in their
interest to mine it rather than the side they are mining.


You know, the whole paper follows the same logic as the point I made
months ago in how if there is no explicit blocksize limit miners have
incentives to make their blocks large enough that they only propagate to
just over 50% of the hashing power, thus causing their competitors to
waste effort.  They analyze the situation in terms of a sybil attack,
where I proposed a more fundemental mechanism to achieve the same goal
based on simple physics.

-- 
'peter'[:-1]@petertodd.org
000000000000000719f061e0fa83343ddbe80d2b6a1fefc84691ffe8652385e0
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 685 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131104/349cb7b5/attachment.sig>

From gronager at ceptacle.com  Mon Nov  4 12:40:00 2013
From: gronager at ceptacle.com (Michael Gronager)
Date: Mon, 04 Nov 2013 13:40:00 +0100
Subject: [Bitcoin-development] Auto-generated miner backbone
In-Reply-To: <CANEZrP3cfZ_SvyPmfinkGqERKrOJ8NR5ZvC4VfjRv=GsiabbdQ@mail.gmail.com>
References: <CANEZrP3iYBdg3p7Ru4O-UENY_yyQDA8=9PGn=KDKGGTrZ-xkRw@mail.gmail.com>
	<52778BCE.8030904@ceptacle.com>
	<CANEZrP3cfZ_SvyPmfinkGqERKrOJ8NR5ZvC4VfjRv=GsiabbdQ@mail.gmail.com>
Message-ID: <527795A0.3080400@ceptacle.com>

"We propose a simple, backwards-compatible change to the Bitcoin
protocol to address this problem and raise the threshold. Specifically,
when a miner learns of competing branches of the same length, it should
propagate all of them, and choose which one to mine on uniformly at random."

So only in the case of two competing chains... The "Selfish Miner" today
has an advantage knowing which chain the other will work on, and by
simply choosing the other they get their advantage making it likely that
it is the other that will waste their effort. By using the random scheme
this advantage is gone.

Note again that it is only in the case of two competing chains, which
will happen on average every 60 blocks. So it is only roughly once every
60 block that you change from choosing one chain to doing a 50% random.

A rough calculation on earnings will be that you loose roughly 1/(2*60)
~ 1% of your blocks using this scheme. But at the same time you make it
harder for such an attack to happen. (This number might be slightly
higher, as working in parallel on both chains will make the two chains
last longer, so agree that we need a bit more analysis...)

I also agree that it is a kind of a Sybil attack, but I think we should
accept the risk of a Sybil attack but of course minimize it, rather than
introducing various social network (ip addresses) solutions, which in
one way or the other always have some central auth / oracle assumption.



On 4/11/13, 13:03 , Mike Hearn wrote:
>     The suggested change is actually very simple (minutes of coding) and
>     elegant and addresses precisely the identified problem.
> 
> 
> Disagree. Unless I'm misunderstanding what they propose, their suggested
> change would mean anyone could broadcast a newly discovered block at any
> point and have a 50% chance of being the winner. That is a fundamental
> change to the dynamics of how Bitcoin works that would require careful
> thought and study.
> 
> Also, their solution doesn't really address the problem they bring up,
> it just changes the size of the threshold required. 
> 
> Fundamentally, their attack is a sybil attack. It doesn't work if they
> can't delay or block a pools competitors because mostly their block will
> come in second place and they'll lose the race. Thus the solution should
> be a solution to sybil attacks.




From pete at petertodd.org  Mon Nov  4 14:26:21 2013
From: pete at petertodd.org (Peter Todd)
Date: Mon, 4 Nov 2013 09:26:21 -0500
Subject: [Bitcoin-development] Auto-generated miner backbone
In-Reply-To: <CANEZrP3iYBdg3p7Ru4O-UENY_yyQDA8=9PGn=KDKGGTrZ-xkRw@mail.gmail.com>
References: <CANEZrP3iYBdg3p7Ru4O-UENY_yyQDA8=9PGn=KDKGGTrZ-xkRw@mail.gmail.com>
Message-ID: <20131104142621.GA2190@petertodd.org>

On Mon, Nov 04, 2013 at 12:26:30PM +0100, Mike Hearn wrote:
> W.R.T. this paper and the oft-discussed miner backbone,
> 
>   http://arxiv.org/pdf/1311.0243v1.pdf
> 
> I'm wondering about an alternative protocol change that perhaps has less
> subtle implications than their suggested change. Rather than address the
> problem by assuming the network is full of sybil nodes and changing the
> rules for selecting the chain to build on, how about if we wrote code to
> automatically build a miner backbone by having IP addresses of nodes
> embedded into coinbases, then having any bitcoind that is creating work
> automatically connect to IPs that appeared in enough recent blocks?
> 
> It feels like this should be achievable with a few days of solid coding and
> a couple of new command line flags, and the impact is much easier to reason
> about than a fundamental rule change like the one proposed by the paper.

Actually on further reflection this idea will make the attack described
in the paper easier to carry out, rather than harder.

I think where you're misunderstanding originates is the description of
this attack as requiring a sybil attack on the network - you see this
underlying sybil as one of numerical advantage, when it's actually one
of *informational* advantage.

Remember that the selfish miner strategy outlined in the paper is
essentially a way to use knowledge of what blocks miners will be mining
on, from the "first seen" rule, and the ability to broadcast blocks you
have mined more widely than other miners. That knowledge and ability is
then used in conjunction with a small lead (obtainable by chance) to
outpace the rest of the network.

By making all miners easily identifiable you make gaining that
informational and broadcast capability easier to obtain rather than
harder. The attacker now only needs to connect to every identified miner
with especially fast nodes. With judicious use of DoS attacks and low
latency they can still gain the informational and broadcast "upper hand"
over other miners and carry out the attack.

Where the paper goes wrong is they don't recognize the fundemental
nature of the strategy being based on an informational advantage. Their
"pick a random side of the fork" strategy may work to some extent, but
it's incomplete and isn't necessarily rational for the miners
individually.

The correct, and rational, approach for a miner is to always mine to
extend the block that the majority of hashing power is trying to extend.
The current relay rules don't give you that information at all, but they
can if we do two things:

1) Relay all blocks that meet the PoW target. (as suggested in the
   paper)

2) Relay block headers that nearly meet the PoW target.

Mining strategy is now to mine to extend the first block you see, on the
assumption that the earlier one probably propagated to a large portion
of the total hashing power. But as you receive "near-blocks" that are
under the PoW target, use them to estimate the hashing power on each
fork, and if it looks like you are not on the majority side, switch.

This very effectively defeats the paper's selfish-miner strategy, as all
miners will very quickly be mining on the block that truly has the
majority of hashing power trying to extend it. This is also a better
overall outcome, because it puts the 51% attack threshhold back at 51%

-- 
'peter'[:-1]@petertodd.org
0000000000000004ee9bb13b022c412d75692b5e85454013c53f89e5d6fa8c69
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 490 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131104/cc436362/attachment.sig>

From pieter.wuille at gmail.com  Mon Nov  4 14:34:35 2013
From: pieter.wuille at gmail.com (Pieter Wuille)
Date: Mon, 4 Nov 2013 15:34:35 +0100
Subject: [Bitcoin-development] Auto-generated miner backbone
In-Reply-To: <20131104142621.GA2190@petertodd.org>
References: <CANEZrP3iYBdg3p7Ru4O-UENY_yyQDA8=9PGn=KDKGGTrZ-xkRw@mail.gmail.com>
	<20131104142621.GA2190@petertodd.org>
Message-ID: <CAPg+sBiOP_cgDXb5vkM-BYEd_Sf7DKeWrwf-67p4dx_a3n8r0g@mail.gmail.com>

On Mon, Nov 4, 2013 at 3:26 PM, Peter Todd <pete at petertodd.org> wrote:
> The correct, and rational, approach for a miner is to always mine to
> extend the block that the majority of hashing power is trying to extend.
> The current relay rules don't give you that information at all, but they
> can if we do two things:
>
> 1) Relay all blocks that meet the PoW target. (as suggested in the
>    paper)
>
> 2) Relay block headers that nearly meet the PoW target.
>
> Mining strategy is now to mine to extend the first block you see, on the
> assumption that the earlier one probably propagated to a large portion
> of the total hashing power. But as you receive "near-blocks" that are
> under the PoW target, use them to estimate the hashing power on each
> fork, and if it looks like you are not on the majority side, switch.

Doesn't that mean that by selective blocking these near-PoW headers,
you can bias peers into preferring to mine on those with near-PoW
headers, turning the attack around? Of course, because of their size,
headers are likely much harder to slow down (in propagation speed)
than full blocks...

-- 
Pieter



From pete at petertodd.org  Mon Nov  4 14:46:31 2013
From: pete at petertodd.org (Peter Todd)
Date: Mon, 4 Nov 2013 09:46:31 -0500
Subject: [Bitcoin-development] Auto-generated miner backbone
In-Reply-To: <CAPg+sBiOP_cgDXb5vkM-BYEd_Sf7DKeWrwf-67p4dx_a3n8r0g@mail.gmail.com>
References: <CANEZrP3iYBdg3p7Ru4O-UENY_yyQDA8=9PGn=KDKGGTrZ-xkRw@mail.gmail.com>
	<20131104142621.GA2190@petertodd.org>
	<CAPg+sBiOP_cgDXb5vkM-BYEd_Sf7DKeWrwf-67p4dx_a3n8r0g@mail.gmail.com>
Message-ID: <20131104144631.GA2395@petertodd.org>

On Mon, Nov 04, 2013 at 03:34:35PM +0100, Pieter Wuille wrote:
> > Mining strategy is now to mine to extend the first block you see, on the
> > assumption that the earlier one probably propagated to a large portion
> > of the total hashing power. But as you receive "near-blocks" that are
> > under the PoW target, use them to estimate the hashing power on each
> > fork, and if it looks like you are not on the majority side, switch.
> 
> Doesn't that mean that by selective blocking these near-PoW headers,
> you can bias peers into preferring to mine on those with near-PoW
> headers, turning the attack around? Of course, because of their size,
> headers are likely much harder to slow down (in propagation speed)
> than full blocks...

Remember that the attack described in the paper *doesn't* depend on the
ability to selectively block or even just slow down anything - it works
even on a unlimited bandwidth jam-free network so long as latency is
non-zero.

As for other possible attacks, if you can selectively block or slow down
certain near-target headers you haven't achieved anything novel. Why not
use that ability to block or slow down blocks themselves? Even if you
did block some PoW headers for whatever reason the original purpose of
broadcasting them - getting all hashing power to work to extend the same
block - is still achieved.

-- 
'peter'[:-1]@petertodd.org
0000000000000001d7eb7fceb2e27f3dd1eb5f516464a6b6874fdf6debbd0227
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 490 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131104/fc7ff294/attachment.sig>

From pete at petertodd.org  Mon Nov  4 15:04:06 2013
From: pete at petertodd.org (Peter Todd)
Date: Mon, 4 Nov 2013 10:04:06 -0500
Subject: [Bitcoin-development] Auto-generated miner backbone
In-Reply-To: <CABT1wWm1NzKSS9H=Qh3Z6pFmNHbOFKC12WaE=b3kE0mNsRgfmw@mail.gmail.com>
References: <CANEZrP3iYBdg3p7Ru4O-UENY_yyQDA8=9PGn=KDKGGTrZ-xkRw@mail.gmail.com>
	<20131104142621.GA2190@petertodd.org>
	<CABT1wWm1NzKSS9H=Qh3Z6pFmNHbOFKC12WaE=b3kE0mNsRgfmw@mail.gmail.com>
Message-ID: <20131104150406.GA2566@petertodd.org>

On Mon, Nov 04, 2013 at 09:49:09AM -0500, Ittay wrote:
> 1. Something important that is being overlooked is that the attack is
> relevant even without the sybil attack. Even if you assume the selfish
> miners loose every time on a 1:1 competition, they can still benefit in
> pools larger than 33%. And pools often reach this size.
> 
> 2. The selfish pool can essentially hide its behavior behind multiple IP
> addresses. I fear employing an anti-sybil mechanism of this sort may expose
> new vulnerabilities. The current approach is great - the attacker cannot
> partition the network, only gain a slight timing advantage. Our approach
> just takes away the network-induced arbitrariness and replaces it with
> explicit randomness, which cannot introduce new vulnerabilities. It
> protects us from 25% attacks, which is excellent (though unfortunately not
> as good as the 51% security we believed before).

The problem is picking which side of the fork you mine on randomly isn't
rational for an individual miner. The time that you heard about a block
is important information: the block you heard about first is more likely
to have propagated to the majority of the hashing power than the one you
learn about second. You're rational incentive is to always mine on the
majority side as that side has the highest probability of no competing
blocks being found when the next block is found. (with the one exception
of the previous block being yours) In addition the next block found will
propagate to the majority of hashing power faster, as that majority
already has the previous block. By suggesting that miners pick randomly
half the time they will be going against their best interests. (if not
the interests of the network as a whole)

On the other hand my near-target broadcast solution gives miners honest
proof of what the majority actually is. Making use of that information
is the economically rational choice even at an individual level. Yet it
still defeats the attack, and it does better in returning the threshold
to the originally assumed 51% level.

-- 
'peter'[:-1]@petertodd.org
0000000000000005fa5454135b2638d1b2240d565737a24586f31490025e2de0
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 490 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131104/255b5a05/attachment.sig>

From timo.hanke at web.de  Mon Nov  4 15:10:36 2013
From: timo.hanke at web.de (Timo Hanke)
Date: Mon, 4 Nov 2013 09:10:36 -0600
Subject: [Bitcoin-development] Proposal to replace BIP0039
In-Reply-To: <52760BCE.6080501@gmx.de>
References: <526BDEC2.2090709@gmx.de>
	<CAJna-HgH1g8iiSvxXrJuga808SQJ6DKo4AYw4fxpwTRCsL+EyQ@mail.gmail.com>
	<CAPg+sBiuLJJV3pB-EF3O9sgB_Z3tuLhEg9k=A9mcxJvgy3UQSw@mail.gmail.com>
	<52721F47.30206@gmx.de>
	<CAJna-Hj+q7oyTj8SWiVESPt5Web-mLuDhv7yA8zF5wRD81aBXA@mail.gmail.com>
	<5274C99A.8060304@gmx.de> <20131103064111.GI16611@crunch>
	<5275F55A.1030805@gmx.de> <20131103074052.GJ16611@crunch>
	<52760BCE.6080501@gmx.de>
Message-ID: <20131104151036.GN16611@crunch>

On Sun, Nov 03, 2013 at 09:39:42AM +0100, Thomas Voegtlin wrote:
> 
> Le 03/11/2013 08:40, Timo Hanke a ?crit :
> >I think the communication would have to go the other way around. Trezor
> >has to commit to a value First. Like this:
> >
> >Trezor picks random s and sends S=s*G to computer, keeping s secret.
> >Computer picks random t and sends t to Trezor.  Trezor makes r := s+t
> >its internal master private key with corresponding master public key
> >R := (s+t)*G. Since R = S+t*G, the computer can verify the master
> >public key. As you say, the computer can then store R and can later
> >verify for each derived pubkey that it was indeed derived from R, hence
> >from his own entropy t.
> 
> I'm not sure how this differs from what I wrote...

Sorry, yes, of course it's the same..
Your very first proposal was fine, provided that Trezor commits to its
random value first.

> However, if this is how it works, then my question remains:
> The computer has no proof to know that pubkeys derived through
> bip32's private derivations are derived from its own entropy...
> This verification would only work for public (aka type2) derivations.
> 
> .. but maybe Trezor works in a different way? I think an explanation
> from slush would be needed.

Does Trezor even use private derivation?

Regardless of whether the derivation is private or public, and
regardless of what kind of proof you use to show that the master public
key was derived from user supplied entropy, my question also remains:
How do you verify your backup? The backup is a seed or private key. It's
too long to do any meaningful computation by hand. So you would need a
second offline device, eg a second Trezor in "restore mode", just to
verify your backup.

Timo

> >However, Trezor could not use straight bip32 out of the box. The
> >chaincode would have to be something like SHA(R). And the seed (that
> >gets translated to mnemonic) would be r itself, making it 256 bit
> >instead of only 128 bit.
> >
> >If the longer seed is bearable then this is a good way to do it.
> >
> >One question remains: if you only write down the mnemonic how can you be
> >sure that it is correct and corresponds to the secret in Trezor? You
> >cannot verify that on paper. You would have to restore it on some
> >device, eg another empty Trezor, and see if it brings up the same master
> >pubkey. Right?
> >
> I guess you have to trust Trezor that it derives R from r
> 
> 
> 
> 

-- 
Timo Hanke
PGP 1EFF 69BC 6FB7 8744 14DB  631D 1BB5 D6E3 AB96 7DA8



From mike at plan99.net  Mon Nov  4 15:27:58 2013
From: mike at plan99.net (Mike Hearn)
Date: Mon, 4 Nov 2013 16:27:58 +0100
Subject: [Bitcoin-development] Auto-generated miner backbone
In-Reply-To: <20131104142621.GA2190@petertodd.org>
References: <CANEZrP3iYBdg3p7Ru4O-UENY_yyQDA8=9PGn=KDKGGTrZ-xkRw@mail.gmail.com>
	<20131104142621.GA2190@petertodd.org>
Message-ID: <CANEZrP0pUvyP62NKu2hdzFYxaMdD7iPPmkL699-gZksZa=HHzg@mail.gmail.com>

On Mon, Nov 4, 2013 at 3:26 PM, Peter Todd <pete at petertodd.org> wrote:

> The attacker now only needs to connect to every identified miner
> with especially fast nodes. With judicious use of DoS attacks and low
> latency .....
>

So you're back to a complicated sybil attack. I don't follow your thought
process here - I didn't say anything about numerical advantage. The attack
outlined in the paper *requires* you to be able to race the rest of the
network and win some non-trivial fraction of the time. If you can't do that
then all it means is that when you try to release a private block to
compete with the other found block, you're quite likely to lose and you
sacrifice the block rewards by doing so.


> The correct, and rational, approach for a miner is to always mine to
> extend the block that the majority of hashing power is trying to extend.
>

There's no stable way to know that. The whole purpose of the block chain to
establish the majority. I think your near-miss headers solution is
circular/unstable for that reason, it's essentially a recursive solution.


> Mining strategy is now to mine to extend the first block you see, on the
> assumption that the earlier one probably propagated to a large portion
> of the total hashing power. But as you receive "near-blocks" that are
> under the PoW target, use them to estimate the hashing power on each
> fork, and if it looks like you are not on the majority side, switch.
>

But you can't reliably estimate that. You can't even reliably estimate the
speed of the overall network especially not on a short term basis like a
block interval.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131104/688d1f48/attachment.html>

From pete at petertodd.org  Mon Nov  4 15:46:39 2013
From: pete at petertodd.org (Peter Todd)
Date: Mon, 4 Nov 2013 10:46:39 -0500
Subject: [Bitcoin-development] Auto-generated miner backbone
In-Reply-To: <CABT1wWmONUeOWRg-=FKr88bgBQf0un4bvjYW2h8d-10ys-VKtA@mail.gmail.com>
References: <CANEZrP3iYBdg3p7Ru4O-UENY_yyQDA8=9PGn=KDKGGTrZ-xkRw@mail.gmail.com>
	<20131104142621.GA2190@petertodd.org>
	<CABT1wWm1NzKSS9H=Qh3Z6pFmNHbOFKC12WaE=b3kE0mNsRgfmw@mail.gmail.com>
	<20131104150406.GA2566@petertodd.org>
	<CABT1wWmONUeOWRg-=FKr88bgBQf0un4bvjYW2h8d-10ys-VKtA@mail.gmail.com>
Message-ID: <20131104154639.GB2759@petertodd.org>

On Mon, Nov 04, 2013 at 10:25:19AM -0500, Ittay wrote:
> Peter - how can you guarantee that the majority mines on the non-selfish
> block?

Feedback basically. So suppose the hashing power is split exactly 50:50,
with half the hashing power hearing about one block first, and half the
other. Also suppose the near-target threshold is 1/64th, that is a block
header that means a target with difficulty 1/64th of the actual
difficulty will be broadcast around the network by nodes. With a 10
minute block interval, near-target block headers will be found on
average every 9.4 seconds.

Eventually one of the two halves will find a near-target PoW solution,
and the corresponding block-header will be broadcast on the network. Now
if you are a miner, and you receive such a PoW solution, that's evidence
that whatever block that block header built on has more hashing power
than other competing blocks. Thus you would be rational to switch, and
start mining to extend that block if you aren't already. Once miners
start doing that, very soon another near-block solution will be
generated, giving even more certainty about what block the majority are
mining on.

Of course, it may be the case that competing near-block headers are
found, but no matter: as long as miners switch to the block with the
most hashing power, this forms a feedback effect that quickly brings
everyone to consensus. With everyone mining to extend the same block,
there's nothing the selfish miner can do; there's no disagreement to
exploit.

-- 
'peter'[:-1]@petertodd.org
000000000000000771e068338fef7e2285b8a6db582e37473f42b76573677adf
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 490 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131104/b29004b3/attachment.sig>

From gmaxwell at gmail.com  Mon Nov  4 15:51:07 2013
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Mon, 4 Nov 2013 07:51:07 -0800
Subject: [Bitcoin-development] Auto-generated miner backbone
In-Reply-To: <CANEZrP3iYBdg3p7Ru4O-UENY_yyQDA8=9PGn=KDKGGTrZ-xkRw@mail.gmail.com>
References: <CANEZrP3iYBdg3p7Ru4O-UENY_yyQDA8=9PGn=KDKGGTrZ-xkRw@mail.gmail.com>
Message-ID: <CAAS2fgQsq0XWb7FZRFrJUmorQfeS=xXa-R4LWneq2LS48tFmng@mail.gmail.com>

On Mon, Nov 4, 2013 at 3:26 AM, Mike Hearn <mike at plan99.net> wrote:
> I'm wondering about an alternative protocol change that perhaps has less
> subtle implications than their suggested change. Rather than address the
> problem by assuming the network is full of sybil nodes and changing the
> rules for selecting the chain to build on, how about if we wrote code to
> automatically build a miner backbone by having IP addresses of nodes
> embedded into coinbases, then having any bitcoind that is creating work
> automatically connect to IPs that appeared in enough recent blocks?

Yea, I've proposed this too (both in the past and in the context of
this). I don't think, however, that the announcements need to be the
miners themselves? but instead just need to be nodes that the miners
think are good (and, for their own sake? ones they're well connected
to).

Miner's could keep a list of address messages nodes they
like/are-connected to, perhaps prioritizing their own nodes, than
exclude ones which are already in the most recent blocks, and include
the best remaining. Of course, if it's using address messages (or
perhaps a new address message syntax) it would automatically support
hidden services.

They should probably be included as OP_RETURN outputs in coinbase
transactions, maybe only limited (by what other clients pay attention
to) to one or two per block.

This should make it harder to get partitioned from the majority
hashrate (or partition the majority hashrate from itself), though
these hosts would be DOS targets, so it isn't a silver bullet.

Making the majority hashrate self-unpartitionabilty stronger is
possible? have miners add an encryption key to their coinbase
transactions, then have subsequent miners mine encrypted addr messages
to single other block sources to automatically weave a miner darknet
with access controlled by successful block creation. But I doubt it's
worth the complexity of bandwidth.



From gmaxwell at gmail.com  Mon Nov  4 15:58:15 2013
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Mon, 4 Nov 2013 07:58:15 -0800
Subject: [Bitcoin-development] Auto-generated miner backbone
In-Reply-To: <52778BCE.8030904@ceptacle.com>
References: <CANEZrP3iYBdg3p7Ru4O-UENY_yyQDA8=9PGn=KDKGGTrZ-xkRw@mail.gmail.com>
	<52778BCE.8030904@ceptacle.com>
Message-ID: <CAAS2fgQHFjrSN2HvU0KavGnmkEEYe7w3g2fZeK+K3LX25VeL1w@mail.gmail.com>

On Mon, Nov 4, 2013 at 3:58 AM, Michael Gronager <gronager at ceptacle.com> wrote:
> The suggested change is actually very simple (minutes of coding) and
> elegant and addresses precisely the identified problem. It is actually a
> mental shortcut in the assumption of how probability works when mining a
> chain. The paper simply corrects this error - nice work!

This isn't so.  Their solution creates a weaker form of the
vulnerability at all times, not just when the attacker has a
informational/positional advantage.

Normally delaying your blocks is negative expectation because you will
get orphaned by blocks that are announced before you most of the time
because miners extend the first seen. However, if you can position
yourself all over the network you can condition your announcements on
other blocks being announced and still win the race even if you
delayed.

Eliminating the first seen rule means that a miner with enough
hashpower (including the largest pools existing today) could execute
this attack without positioning themselves all over the network, the
improvement is that a low hashrate attacker couldn't do as well, even
with positioning themselves all over the network.  I don't think this
can be described as "simply corrects the error".  The largest pool
would gain an advantage in delaying their blocks and would receive a
superliner share of mining income from doing so, something they can't
simply do today without attacking the network.

At the moment I believe we can improve the situation with propagation
advantage without the other changes, so we should do that first while
thinking carefully about this.

Simply relaying late blocks might be fine, if anything it would at
least make it easier to keep reliable orphan stats... though I'm
concerned with the bandwidth overhead and risk of flooding if its not
implemented carefully.



From pete at petertodd.org  Mon Nov  4 16:07:16 2013
From: pete at petertodd.org (Peter Todd)
Date: Mon, 4 Nov 2013 11:07:16 -0500
Subject: [Bitcoin-development] Auto-generated miner backbone
In-Reply-To: <CABT1wWmM466jWWdWAo5GmzP58xJFT70Vcr74ta+2QF2fWT+1SA@mail.gmail.com>
References: <CANEZrP3iYBdg3p7Ru4O-UENY_yyQDA8=9PGn=KDKGGTrZ-xkRw@mail.gmail.com>
	<20131104142621.GA2190@petertodd.org>
	<CABT1wWm1NzKSS9H=Qh3Z6pFmNHbOFKC12WaE=b3kE0mNsRgfmw@mail.gmail.com>
	<20131104150406.GA2566@petertodd.org>
	<CABT1wWmONUeOWRg-=FKr88bgBQf0un4bvjYW2h8d-10ys-VKtA@mail.gmail.com>
	<20131104154639.GB2759@petertodd.org>
	<CABT1wWmM466jWWdWAo5GmzP58xJFT70Vcr74ta+2QF2fWT+1SA@mail.gmail.com>
Message-ID: <20131104160716.GA3052@petertodd.org>

(not sure if you meant this to go to the list, my apologies if not)

On Mon, Nov 04, 2013 at 10:50:25AM -0500, Ittay wrote:
> On Mon, Nov 4, 2013 at 10:46 AM, Peter Todd <pete at petertodd.org> wrote:
> 
> > On Mon, Nov 04, 2013 at 10:25:19AM -0500, Ittay wrote:
> > > Peter - how can you guarantee that the majority mines on the non-selfish
> > > block?
> >
> > Of course, it may be the case that competing near-block headers are
> > found, but no matter: as long as miners switch to the block with the
> > most hashing power, this forms a feedback effect that quickly brings
> > everyone to consensus. With everyone mining to extend the same block,
> > there's nothing the selfish miner can do; there's no disagreement to
> > exploit.
> >
> 
> This is not the exploit! The majority you create might just as well follow
> the previously-private block, so we're back in square one.

Right, but the thing is, if all miners quickly come to consensus and are
all mining on the same block, there's nothing the attacker can exploit
in the first place.

Suppose Alice the attacker is 100 blocks ahead of the main network
somehow. We'll say the other miners are working to extend block n, and
she's in posession of 100 blocks extending that. She also has just under
50% of the hashing power.

Now when the main network finds a block n+1, Alice can do one of two
things: she can publish her own n+1 block, or she can do nothing. If she
does nothing, the main network will find block n+2 faster than she finds
n+101, so eventually she loses. Thus she has to publish.

In your attack she publishes to a subset of nodes strategicly, splitting
the hashing power between nodes working to extend her n+1, and the other
n+1 found. However, with near-target headers, very quickly all hashing
power will come to consensus and all work to extend the same block,
either theirs or Alice's. Given that they have the majority, they will
find another block faster on average than Alice can extend her lead, and
thus eventually Alice will lose.

Now there is still a slight advantage for Alice in that it takes some
time for the whole network to come to consensus, but this is a much
slimmer margin, maybe a few percentage points, so at best Alice might
need, say, 45% of the total hashing power.

-- 
'peter'[:-1]@petertodd.org
0000000000000004b8381fe97338c8b710cb662160f08e391820f30a375bb9b9
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 490 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131104/647ddf7c/attachment.sig>

From pete at petertodd.org  Mon Nov  4 16:51:52 2013
From: pete at petertodd.org (Peter Todd)
Date: Mon, 4 Nov 2013 11:51:52 -0500
Subject: [Bitcoin-development] Auto-generated miner backbone
In-Reply-To: <CABT1wWm5BDZf7U40pOqZvTqdOKeTWUTekjUNckq5McMV=LDu_g@mail.gmail.com>
References: <CANEZrP3iYBdg3p7Ru4O-UENY_yyQDA8=9PGn=KDKGGTrZ-xkRw@mail.gmail.com>
	<20131104142621.GA2190@petertodd.org>
	<CABT1wWm1NzKSS9H=Qh3Z6pFmNHbOFKC12WaE=b3kE0mNsRgfmw@mail.gmail.com>
	<20131104150406.GA2566@petertodd.org>
	<CABT1wWmONUeOWRg-=FKr88bgBQf0un4bvjYW2h8d-10ys-VKtA@mail.gmail.com>
	<20131104154639.GB2759@petertodd.org>
	<CABT1wWmM466jWWdWAo5GmzP58xJFT70Vcr74ta+2QF2fWT+1SA@mail.gmail.com>
	<20131104160716.GA3052@petertodd.org>
	<CABT1wWm5BDZf7U40pOqZvTqdOKeTWUTekjUNckq5McMV=LDu_g@mail.gmail.com>
Message-ID: <20131104165152.GA3240@petertodd.org>

On Mon, Nov 04, 2013 at 11:24:33AM -0500, Ittay wrote:
> Yes - this is for the mailing list.
> 
> Regarding the algorithm - as we explain in the paper, as long as the
> attacker is way ahead - the others can mine on whatever they like. Doesn't
> really matter. Once they almost close the gap (and they will, because
> they're the majority), leaving only 1 block lead, the selfish miners
> publish their secret blocks, loose their lead, but win the entire secret
> chain. The honest miners thus loose all the work they did so far. It
> doesn't really matter how the honest miners waste their time.

Yes, they lose their work, but that's irrelevant: what's important is
eventually Alice runs out of secret blocks and then has no advantage
over the other miners.

In your paper Alice created her lead by exploiting the fact that not all
of the hashing power was working to extend the same block due to the
"first-wins" rule. With my solution that situation doesn't happen in the
first place: forks are resolved quickly because both sides have both
forks, and consensus on which one is the winner is achieved very quickly
by proving which side has the majority of hashing power through
near-target PoW solutions. With the majority of hashing power in
consensus and working to extend the same block there's nothing Alice can
do to get ahead, defeating the attack.

-- 
'peter'[:-1]@petertodd.org
0000000000000008adb581077dcfa0bf067a4ee010fbabb92d136292625b2299
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 490 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131104/731ccaa1/attachment.sig>

From pete at petertodd.org  Mon Nov  4 17:36:44 2013
From: pete at petertodd.org (Peter Todd)
Date: Mon, 4 Nov 2013 12:36:44 -0500
Subject: [Bitcoin-development] Auto-generated miner backbone
In-Reply-To: <CANEZrP0pUvyP62NKu2hdzFYxaMdD7iPPmkL699-gZksZa=HHzg@mail.gmail.com>
References: <CANEZrP3iYBdg3p7Ru4O-UENY_yyQDA8=9PGn=KDKGGTrZ-xkRw@mail.gmail.com>
	<20131104142621.GA2190@petertodd.org>
	<CANEZrP0pUvyP62NKu2hdzFYxaMdD7iPPmkL699-gZksZa=HHzg@mail.gmail.com>
Message-ID: <20131104173644.GA3447@petertodd.org>

On Mon, Nov 04, 2013 at 04:27:58PM +0100, Mike Hearn wrote:
> > The correct, and rational, approach for a miner is to always mine to
> > extend the block that the majority of hashing power is trying to extend.
> >
> 
> There's no stable way to know that. The whole purpose of the block chain to
> establish the majority. I think your near-miss headers solution is
> circular/unstable for that reason, it's essentially a recursive solution.
> 
> 
> > Mining strategy is now to mine to extend the first block you see, on the
> > assumption that the earlier one probably propagated to a large portion
> > of the total hashing power. But as you receive "near-blocks" that are
> > under the PoW target, use them to estimate the hashing power on each
> > fork, and if it looks like you are not on the majority side, switch.
> >
> 
> But you can't reliably estimate that. You can't even reliably estimate the
> speed of the overall network especially not on a short term basis like a
> block interval.

Re-read my proposal - the whole point of it is to give a way to quickly
come to consensus about which side of the fork has the majority of
hashing power. It doesn't, and doesn't need to, reliable determine what
the hashing power actually is on either side. Rather it's a feedback
mechanism that creates a clear majority consensus in a short amount of
time with the use of only a small amount of bandwidth. (~5KB/10minutes)

-- 
'peter'[:-1]@petertodd.org
00000000000000079c8a642234cb452cbe261fcdb5885af604471c458c257956
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 490 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131104/0402f7f4/attachment.sig>

From pete at petertodd.org  Mon Nov  4 18:16:49 2013
From: pete at petertodd.org (Peter Todd)
Date: Mon, 4 Nov 2013 13:16:49 -0500
Subject: [Bitcoin-development] Committing to extra block data/a better
 merge-mine standard
In-Reply-To: <CANEZrP1uqee1UO=zb+50t9BNtv2voTHoCKQCTQExNyoL=Y0=PA@mail.gmail.com>
References: <CANEZrP3iYBdg3p7Ru4O-UENY_yyQDA8=9PGn=KDKGGTrZ-xkRw@mail.gmail.com>
	<20131104115314.GA1013@savin>
	<CANEZrP1uqee1UO=zb+50t9BNtv2voTHoCKQCTQExNyoL=Y0=PA@mail.gmail.com>
Message-ID: <20131104181649.GA3847@petertodd.org>

On Mon, Nov 04, 2013 at 01:00:16PM +0100, Mike Hearn wrote:
> Given that IP address data is inherently transient, perhaps a better
> solution is to define a short hash in the coinbase that commits to extra
> data that is relayed along with block data (e.g. appended to the block
> message). It can then be stored temporarily in the block db and erased
> after some time, like a few months. It would therefore not really be a part
> of the chain, but could be extended as we see fit with any other
> semi-transient data required. A new "getextra" message would let nodes
> query for it.
> 
> The hash can be short because it doesn't have to survive brute forcing
> attacks longer than the expected validity period of the transient data
> anyway. 80 bits would probably be overkill.

No sense in compromising - you need a whole merkle path to prove the
extra data is valid so you might as well make this a full 256 bits;
another 22 bytes is insignificant compared to the size of the path.

Again, the right way to do this is define the standard to use the last
txout so that midstate compression can be applied in the future. We can
re-use this for merge-mining and other commitments easily by defining a
simple standard based on defined path directions. Essentially for each
thing you might want to commit, perhaps a merge-mined coin, a p2pool
share, a UTXO commitment, whatever, generate a random 128-bit UUID.

Now interpret the bits of that UUID as an allowed path: 0 = left, 1 =
right, from the top of the tree. When you build the tree, make sure
everything that is going to be committed to uses it's allowed path; the
tree will look a bit jagged. If everyone picks their per-purpose UUIDs
randomly the paths won't collide for very many levels on average, and
path lengths will remain short. Validating that some given data was
committed properly is simple and easy: just check the path, and check
that the directions from the top of the tree followed the spec.

For timestamping, just pick any empty spot in the tree.

You'll want to put some "reasonable" limit on actual path lengths, just
pick something like 32 levels; if applications pick their UUIDs honestly
a collision will be very unlikely. You can also make the allowed paths
block specific by defining them as H(uuid | nonce), with nonce as an
optional PUSHDATA just prior to the commitment pushdata, allowing overly
long paths to be eliminated entirely by simply incrmenting the nonce.

Unlike the original, broken, merge-mining standard alt-coins have used
this actually works, extends indefinitely, and is simple and easy to
validate given a single merkle-path for each purpose. Generating the
trees of commitments is a bit convoluted, but at least that code only
needs to be written once.

-- 
'peter'[:-1]@petertodd.org
0000000000000002c43b3c05c0ed0842317747f0d1e3982489d0a51e7c8a05a3
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 490 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131104/91107aba/attachment.sig>

From pete at petertodd.org  Mon Nov  4 18:32:12 2013
From: pete at petertodd.org (Peter Todd)
Date: Mon, 4 Nov 2013 13:32:12 -0500
Subject: [Bitcoin-development] Committing to extra block data/a better
 merge-mine standard
In-Reply-To: <20131104181649.GA3847@petertodd.org>
References: <CANEZrP3iYBdg3p7Ru4O-UENY_yyQDA8=9PGn=KDKGGTrZ-xkRw@mail.gmail.com>
	<20131104115314.GA1013@savin>
	<CANEZrP1uqee1UO=zb+50t9BNtv2voTHoCKQCTQExNyoL=Y0=PA@mail.gmail.com>
	<20131104181649.GA3847@petertodd.org>
Message-ID: <20131104183212.GB3994@petertodd.org>

On Mon, Nov 04, 2013 at 01:16:49PM -0500, Peter Todd wrote:
> You'll want to put some "reasonable" limit on actual path lengths, just
> pick something like 32 levels; if applications pick their UUIDs honestly
> a collision will be very unlikely. You can also make the allowed paths
> block specific by defining them as H(uuid | nonce), with nonce as an

This could be H(uuid | nLockTime) Coinbase transactions still have a
nLockTime, and while it's generally left at zero it can be any value
valid for a transaction in the block.

-- 
'peter'[:-1]@petertodd.org
00000000000000086d6d5b17d979d44a24a68bcf92eb9aea18351e4f6bc485b6
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 490 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131104/12cb149d/attachment.sig>

From mark at monetize.io  Mon Nov  4 19:11:34 2013
From: mark at monetize.io (Mark Friedenbach)
Date: Mon, 04 Nov 2013 11:11:34 -0800
Subject: [Bitcoin-development] Committing to extra block data/a better
 merge-mine standard
In-Reply-To: <20131104181649.GA3847@petertodd.org>
References: <CANEZrP3iYBdg3p7Ru4O-UENY_yyQDA8=9PGn=KDKGGTrZ-xkRw@mail.gmail.com>	<20131104115314.GA1013@savin>	<CANEZrP1uqee1UO=zb+50t9BNtv2voTHoCKQCTQExNyoL=Y0=PA@mail.gmail.com>
	<20131104181649.GA3847@petertodd.org>
Message-ID: <5277F166.9090606@monetize.io>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On 11/4/13 10:16 AM, Peter Todd wrote:
> Again, the right way to do this is define the standard to use the
> last txout so that midstate compression can be applied in the
> future. We can re-use this for merge-mining and other commitments
> easily by defining a simple standard based on defined path
> directions. Essentially for each thing you might want to commit,
> perhaps a merge-mined coin, a p2pool share, a UTXO commitment,
> whatever, generate a random 128-bit UUID.
> 
> Now interpret the bits of that UUID as an allowed path: 0 = left, 1
> = right, from the top of the tree. When you build the tree, make
> sure everything that is going to be committed to uses it's allowed
> path; the tree will look a bit jagged. If everyone picks their
> per-purpose UUIDs randomly the paths won't collide for very many
> levels on average, and path lengths will remain short. Validating
> that some given data was committed properly is simple and easy:
> just check the path, and check that the directions from the top of
> the tree followed the spec.

You mean... an authenticated prefix tree? Composable/commutative
properties are not needed as far as I can see, so you could make the
path validation, traversal, and proof size smaller by using level
compression.

I had previously proposed to this list a hash256-to-UUID mechanism
explicitly for this purpose. Recap: use 122 of the low 128 bits of the
aux-chain's genesis block to form a version=4 (random) or version=6
(previously unused) UUID. However since making that proposal I am now
leaning towards simply using the hash of the genesis block directly to
identify aux chains since level compression will allow longer keys
with the same path length.

I'm in the middle of writing BIPs to this end, among my many other
tasks. But basically it's the same as you describe ("OP_RETURN
<32-byte auth tree root>" for the last output), except keys don't
necessarily have to be UUIDs.

If there is general interest, I can make finishing this a higher priority.

Mark
-----BEGIN PGP SIGNATURE-----
Version: GnuPG/MacGPG2 v2.0.19 (Darwin)
Comment: GPGTools - http://gpgtools.org
Comment: Using GnuPG with Thunderbird - http://www.enigmail.net/

iQIcBAEBAgAGBQJSd/FmAAoJEAdzVfsmodw4pA0QALtgKLKsMNFocUanKGNp5T1F
918IjFt/HASRMs4GXiPpIeTB+o5Id6aCsg1ikKRuL9xD+WKoSyo83JP5UmcxGjFA
WTPi/0/ArYRh8L7ECvWoBSanNrun3z72p3KMI1Aa8qcJCgWbPx88AYeJv0Ki4JOo
1Pxc883772bOJnazrh4f/C4gcrqrlgs29PwI1rc3yCD9dmJhVmkz+O0/yfq+U8Gg
FXrpqR14mUM36wGX2HjqEual7Ry/7TEz5Ne4o8uncaVHtGgaYVw45a5Hk6rdo1rH
F3EV9nIpsLhGyqbKPqSxSju2h3eYQxQXKUP14mJS+ja/mKFXVc3PXDV+IHtXAplk
4gW8vtTWtVIDJAGTTh5RkJu5yAr57vq9lUMTNGGk6v1C3xOPP2C097sHRLaD4kD+
olsw5M9NW/Qpn1X3SCN3K85f7dvV3+fucmWL8mPM9KMLfc38fgs7I5SQgurMngsS
2D5jSwcZVjI/4n6ocgK3Y66yKC5xuzOOi2ZV+pPM38TjUeCF8fbjRnoIWyaBPDWy
mKA0bJiw5NMzi+IsNK5YDS5Gqb3qxS6tYLCp1+hesW3pBj35Zv/LdSh5DyecRETW
J0ye56lw/DfRAfNf+YERvrznqC2WVDZcQaElACq8R/nPJ2HD53p+SfxMSbljVO+I
SDsDOSvAzfQjQBLGdkx7
=5fPS
-----END PGP SIGNATURE-----



From mike at plan99.net  Mon Nov  4 19:38:09 2013
From: mike at plan99.net (Mike Hearn)
Date: Mon, 4 Nov 2013 20:38:09 +0100
Subject: [Bitcoin-development] Committing to extra block data/a better
 merge-mine standard
In-Reply-To: <20131104181649.GA3847@petertodd.org>
References: <CANEZrP3iYBdg3p7Ru4O-UENY_yyQDA8=9PGn=KDKGGTrZ-xkRw@mail.gmail.com>
	<20131104115314.GA1013@savin>
	<CANEZrP1uqee1UO=zb+50t9BNtv2voTHoCKQCTQExNyoL=Y0=PA@mail.gmail.com>
	<20131104181649.GA3847@petertodd.org>
Message-ID: <CANEZrP18Tz6OwOE7jeS3-Z2m=HuQiue+ZwRzS01mpqbCoPteZQ@mail.gmail.com>

I like the UUID-as-path idea. That resolves the problem of how to share the
alt-chain merkle tree quite nicely.

On Mon, Nov 4, 2013 at 7:16 PM, Peter Todd <pete at petertodd.org> wrote:

> No sense in compromising - you need a whole merkle path to prove the
> extra data is valid so you might as well make this a full 256 bits;
>

The Merkle branch doesn't get stored indefinitely though, whereas the
coinbase hash does. The data stored in the coinbase [output] can always
just be the 256-bit root hash truncated to less.

I doubt the additional bytes make much difference really, so the additional
complexity may not be worth it. But it wouldn't be an issue to do.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131104/3bbee2b8/attachment.html>

From mark at monetize.io  Mon Nov  4 19:53:05 2013
From: mark at monetize.io (Mark Friedenbach)
Date: Mon, 04 Nov 2013 11:53:05 -0800
Subject: [Bitcoin-development] Committing to extra block data/a better
 merge-mine standard
In-Reply-To: <CANEZrP18Tz6OwOE7jeS3-Z2m=HuQiue+ZwRzS01mpqbCoPteZQ@mail.gmail.com>
References: <CANEZrP3iYBdg3p7Ru4O-UENY_yyQDA8=9PGn=KDKGGTrZ-xkRw@mail.gmail.com>	<20131104115314.GA1013@savin>	<CANEZrP1uqee1UO=zb+50t9BNtv2voTHoCKQCTQExNyoL=Y0=PA@mail.gmail.com>	<20131104181649.GA3847@petertodd.org>
	<CANEZrP18Tz6OwOE7jeS3-Z2m=HuQiue+ZwRzS01mpqbCoPteZQ@mail.gmail.com>
Message-ID: <5277FB21.3050306@monetize.io>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On 11/4/13 11:38 AM, Mike Hearn wrote:
> The Merkle branch doesn't get stored indefinitely though, whereas
> the coinbase hash does. The data stored in the coinbase [output]
> can always just be the 256-bit root hash truncated to less.
> 
> I doubt the additional bytes make much difference really, so the 
> additional complexity may not be worth it. But it wouldn't be an
> issue to do.

The bits make a difference if you are merged mining. You can use the
birthday attack to construct two data trees whose hash match the
(truncated) value, each containing separate aux block headers. This
allows you to double-count the bitcoin PoW for more than one aux block
on the same chain, potentially facilitating aux chain attacks.

If you want 128 bits of security for merged mined aux chains, you need
256 bits of hash in the coinbase.
-----BEGIN PGP SIGNATURE-----
Version: GnuPG/MacGPG2 v2.0.19 (Darwin)
Comment: GPGTools - http://gpgtools.org
Comment: Using GnuPG with Thunderbird - http://www.enigmail.net/

iQIcBAEBAgAGBQJSd/shAAoJEAdzVfsmodw48a0P/RaCOctBDvhU0THnsUw6nRBm
A8oH3Kpio4ZltU4oIT0tznZbUOG2j2xVrmATqXDYOZQ6FuGihjmkKJ9jHgl57pb5
0qDdCBiEuWtLIh2+Awrb3Y0s8czyCQP9/1CJyzdEFmI8rSwCaqJMa6B2Ny6Xz6+8
eiK45YdXCPgdTAb56FKOi9WzOe0g1aOO5KiUOci22xRkXvh4qPYrt2F0LIgjZTdC
koyXU6dcKON9H8Cecu+ag7jJ5A9ZDj7oIq5rflEyolh2V4ie0tGQ50rFGg/ii6iQ
Tz9AWwigsHEkuinBTuN5041Xb8nAgHLvA60RQ41lWUHJxfAvDE+wN6NqgHmMVaRo
NHqlZcCuEl1jn7HW81XQTpgarrXHk1G7b2vK10pB/lUxUNIstZvCSjcp8QdtmC9v
tIhC2czSnsQaE6kIBuHxDNZxOlZ8DxBYCAgXSkycwznwzGhFPP0xB1lV9HfaP5+i
aikmx5SQmqBXQQKsxmIacoykrfu5x+O2TB/bq8JhJ1ak2jG9LVFyQqjorABVAgA7
pLEN6EomWht5qstaLVfHYpNsLMf6WA7UzRG08HKItUeDPtG7bDx8vBx5TvIUjT44
A0i09bOt8ZIgp+lJ8lFLWiPLChViAoy7fqKy2vrdsZerOF3l4LUQeQO/xnfZc+dG
AEG+7iCBOMxJSVoJ5bP6
=nydG
-----END PGP SIGNATURE-----



From mike at plan99.net  Mon Nov  4 20:10:04 2013
From: mike at plan99.net (Mike Hearn)
Date: Mon, 4 Nov 2013 21:10:04 +0100
Subject: [Bitcoin-development] Committing to extra block data/a better
 merge-mine standard
In-Reply-To: <5277FB21.3050306@monetize.io>
References: <CANEZrP3iYBdg3p7Ru4O-UENY_yyQDA8=9PGn=KDKGGTrZ-xkRw@mail.gmail.com>
	<20131104115314.GA1013@savin>
	<CANEZrP1uqee1UO=zb+50t9BNtv2voTHoCKQCTQExNyoL=Y0=PA@mail.gmail.com>
	<20131104181649.GA3847@petertodd.org>
	<CANEZrP18Tz6OwOE7jeS3-Z2m=HuQiue+ZwRzS01mpqbCoPteZQ@mail.gmail.com>
	<5277FB21.3050306@monetize.io>
Message-ID: <CANEZrP17hEuFmWiN1scq42mJzcXOBEHHAK8aLd_idCQ6ZqvpYw@mail.gmail.com>

Yes, sure. I was talking about the case of transiently relayed data, like
IP addresses.


On Mon, Nov 4, 2013 at 8:53 PM, Mark Friedenbach <mark at monetize.io> wrote:

> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA1
>
> On 11/4/13 11:38 AM, Mike Hearn wrote:
> > The Merkle branch doesn't get stored indefinitely though, whereas
> > the coinbase hash does. The data stored in the coinbase [output]
> > can always just be the 256-bit root hash truncated to less.
> >
> > I doubt the additional bytes make much difference really, so the
> > additional complexity may not be worth it. But it wouldn't be an
> > issue to do.
>
> The bits make a difference if you are merged mining. You can use the
> birthday attack to construct two data trees whose hash match the
> (truncated) value, each containing separate aux block headers. This
> allows you to double-count the bitcoin PoW for more than one aux block
> on the same chain, potentially facilitating aux chain attacks.
>
> If you want 128 bits of security for merged mined aux chains, you need
> 256 bits of hash in the coinbase.
> -----BEGIN PGP SIGNATURE-----
> Version: GnuPG/MacGPG2 v2.0.19 (Darwin)
> Comment: GPGTools - http://gpgtools.org
> Comment: Using GnuPG with Thunderbird - http://www.enigmail.net/
>
> iQIcBAEBAgAGBQJSd/shAAoJEAdzVfsmodw48a0P/RaCOctBDvhU0THnsUw6nRBm
> A8oH3Kpio4ZltU4oIT0tznZbUOG2j2xVrmATqXDYOZQ6FuGihjmkKJ9jHgl57pb5
> 0qDdCBiEuWtLIh2+Awrb3Y0s8czyCQP9/1CJyzdEFmI8rSwCaqJMa6B2Ny6Xz6+8
> eiK45YdXCPgdTAb56FKOi9WzOe0g1aOO5KiUOci22xRkXvh4qPYrt2F0LIgjZTdC
> koyXU6dcKON9H8Cecu+ag7jJ5A9ZDj7oIq5rflEyolh2V4ie0tGQ50rFGg/ii6iQ
> Tz9AWwigsHEkuinBTuN5041Xb8nAgHLvA60RQ41lWUHJxfAvDE+wN6NqgHmMVaRo
> NHqlZcCuEl1jn7HW81XQTpgarrXHk1G7b2vK10pB/lUxUNIstZvCSjcp8QdtmC9v
> tIhC2czSnsQaE6kIBuHxDNZxOlZ8DxBYCAgXSkycwznwzGhFPP0xB1lV9HfaP5+i
> aikmx5SQmqBXQQKsxmIacoykrfu5x+O2TB/bq8JhJ1ak2jG9LVFyQqjorABVAgA7
> pLEN6EomWht5qstaLVfHYpNsLMf6WA7UzRG08HKItUeDPtG7bDx8vBx5TvIUjT44
> A0i09bOt8ZIgp+lJ8lFLWiPLChViAoy7fqKy2vrdsZerOF3l4LUQeQO/xnfZc+dG
> AEG+7iCBOMxJSVoJ5bP6
> =nydG
> -----END PGP SIGNATURE-----
>
>
> ------------------------------------------------------------------------------
> Android is increasing in popularity, but the open development platform that
> developers love is also attractive to malware creators. Download this white
> paper to learn more about secure code signing practices that can help keep
> Android apps secure.
> http://pubads.g.doubleclick.net/gampad/clk?id=65839951&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131104/3c6d8bed/attachment.html>

From pete at petertodd.org  Mon Nov  4 21:04:51 2013
From: pete at petertodd.org (Peter Todd)
Date: Mon, 4 Nov 2013 16:04:51 -0500
Subject: [Bitcoin-development] Auto-generated miner backbone
In-Reply-To: <CABT1wWmwb17b4ACHMmDKqd94tUSKsvwAPx344mZ0VS+47myeWg@mail.gmail.com>
References: <CANEZrP3iYBdg3p7Ru4O-UENY_yyQDA8=9PGn=KDKGGTrZ-xkRw@mail.gmail.com>
	<20131104142621.GA2190@petertodd.org>
	<CABT1wWm1NzKSS9H=Qh3Z6pFmNHbOFKC12WaE=b3kE0mNsRgfmw@mail.gmail.com>
	<20131104150406.GA2566@petertodd.org>
	<CABT1wWmONUeOWRg-=FKr88bgBQf0un4bvjYW2h8d-10ys-VKtA@mail.gmail.com>
	<CABT1wWmwb17b4ACHMmDKqd94tUSKsvwAPx344mZ0VS+47myeWg@mail.gmail.com>
Message-ID: <20131104210451.GA4443@petertodd.org>

On Mon, Nov 04, 2013 at 02:12:44PM -0500, Ittay wrote:
> On Mon, Nov 4, 2013 at 10:25 AM, Ittay <ittay.eyal at cornell.edu> wrote:
> 
> > As for the rational motivation of the individual miners - that's a good
> > point!
> > Here is a solution we did not put in the paper due to space constraints
> > that should alleviate your concern:
> > Instead of locally choosing a block at random, have a deterministic
> > pseudo-random mechanism for choosing between competing chains. E.g., take
> > the one whose last block hash is smaller. This way all miners choose the
> > same chain, and the guarantees of our solution hold.
> >
> 
> I take that back.

Speaking of, I'm going to take back my solution as well; I misunderstood
your paper.

So here's your argument in a ELI5 nutshell:

Alice is a miner with some amount of hashing power. She has the ability
to detect new blocks on the network extremely effectively for whatever
reason; in short she has unusually good knowledge of the state of the
network. She is also very good at publishing her blocks and getting them
to the majority of hashing power in very little time; she has unusually
good connectivity to all miners. (low-latency and high bandwidth)

She's so good at this that when she finds a new block, she keeps it a
secret! She can get away with this because she knows that the moment Bob
finds a block, she can immediately broadcast it to the rest of the
network before the other block propagates. Instead of building on Bob's
blocks, almost everyone builds on Alice's block, depriving Bob of the
revenue. Gradually Alice gets more and more miners because Bob, and
other pools, don't pay out as much.

You propose a rule where essentially miners extend Bob's block 50% of
the time, and show in your paper how that leads to a scenario where
Alice needs to have at leastr 1/4 of the total hashing power to
succesfully pull this attack off anyway.


What I did succesfully show is that for a short-term rational miner
they're still better off mining to extend the block they hear about
first rather than using your pick-one-at-random rule, because when you
hear about a block is important information about whether or not the
majority is mining on it. This is true even if others are using the
pick-one-at-random rule. (they're better defecting than doing what's
right for the whole network) Even worse is that miners have a rational
incentive to broadcast such near-target headers to try to encourage
other miners to work on the same fork that they are working on. The
near-target idea came about for a totally different reason, so it's
something that might wind up being implemented anyway.

Mike Hearn's idea of making it easy to identify nodes associated with
hashing power is still wrong. Although again, it's something that miners
themselves have rational incentives to do. (you always want to encourage
others to send you their blocks, and you also want to be able to send
your blocks to the majority of hashing power as quickly as possible)

Where the idea goes wrong is it makes it easier for Alice to identify
hashing power, specifically where she needs to send her blocks to
distribute them to the majority as quickly as possible. The second
problem occurs if those nodes also distribute blocks to connecting
peers: this makes it easy for Alice to be sure she'll hear about a new
block as soon as possible by connecting to every one of those peers with
a high-speed, low-latency connection. Bizzarely the idea does work if
the advertised nodes only accept blocks, and never send blocks - instead
miners would *only* send their blocks to other miners who have proven
their hashing power, and do so essentially largest miner to smallest.
Now unless Alice already is a large miner, her strategy can't work.  Of
course this will strongly encourage further centralization of pools. But
it is in the interests of rational miners sadly.

That blocks take a finite amount of time to propagate makes the problem
worse: for Alice to learn that another block has been mined only
requires her to receive the small 80 byte header from a peer; she
doesn't need the whole block. She thus can know the block exists well
before it has a chance to propagate fully. Even if every miner were
directly peered to every other as some suggest, Alice could simply make
smaller blocks, faster propagating than everyone else and use especially
low-latency connections to win the race.

On the other hand, the Bitcoin protocol is currently designed such that
a miner can mine a block without knowing the previous block in full.
Given the large block reward and/or a supply of transactions they knew
no other miner had a rational miner would start trying to extend the
longest chain they know about prior to actually receiving and validating
the full block. Again, when miners start doing this - perhaps out of
desperation due to low revenue - as long as Alice has the lowest latency
network she'll win. (she doesn't even need to have the highest bandwidth
in this case) We can change the protocol to force miners to fully
validate blocks prior to mining extensions, but that only forces Alice
to get more bandwidth - she still wins.

Speaking of low-latency, latency not only centralizes control in a
single pool, it centralizes pools and even mining hardware itself in a
single physical location. Anyone at the edges of the propagation network
will get comparatively less revenue than those in the center, gradually
tightening the network, even without selfish mining. Alice's strategy of
course should be to position her nodes in the geographical center. It's
worth noting how if Alice is the one with the lowest average latency,
she will win against any other miner trying to persue the same selfish
miner strategy that she is using.


Finally nLockTime makes the selfish miner strategy even more profitable.
You may not be aware, but it's possible to make a transaction that can't
be mined until some time in the future, measured by either block height
or block timestamp. I've proposed to use this mechanism in
announce/commit sacrifices: you create a transaction that can't be mined
until some point in the future that sacrifices a large amount to mining
fees, and then prior to that point you include it in the blockchain as
data, proving the whole world knew about your transaction. The idea was
that which miner managed to include the transaction, and collect the
reward, would be random. However whenever Alice is able to maintain a
lead over other miners she's able to reliably mine significantly more of
those valuable transactions, further increasing her revenue over other
miners.


I must say, you've really opened a can of worms...

-- 
'peter'[:-1]@petertodd.org
000000000000000379e2a349ccee65efc29d43e2c742f8e4a9247d68025ace84
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 490 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131104/d4c62965/attachment.sig>

From etotheipi at gmail.com  Mon Nov  4 21:45:24 2013
From: etotheipi at gmail.com (Alan Reiner)
Date: Mon, 04 Nov 2013 16:45:24 -0500
Subject: [Bitcoin-development] Auto-generated miner backbone
In-Reply-To: <20131104210451.GA4443@petertodd.org>
References: <CANEZrP3iYBdg3p7Ru4O-UENY_yyQDA8=9PGn=KDKGGTrZ-xkRw@mail.gmail.com>	<20131104142621.GA2190@petertodd.org>	<CABT1wWm1NzKSS9H=Qh3Z6pFmNHbOFKC12WaE=b3kE0mNsRgfmw@mail.gmail.com>	<20131104150406.GA2566@petertodd.org>	<CABT1wWmONUeOWRg-=FKr88bgBQf0un4bvjYW2h8d-10ys-VKtA@mail.gmail.com>	<CABT1wWmwb17b4ACHMmDKqd94tUSKsvwAPx344mZ0VS+47myeWg@mail.gmail.com>
	<20131104210451.GA4443@petertodd.org>
Message-ID: <52781574.1000904@gmail.com>

Sorry guys, I'm a little late to the party here.  I skimmed over the
paper, and appreciated Peter Todd's recap of it.  My first thought was
that this seems profit-neutral at best, when you take into account all
the races you lose by trying to beat the propagation of other miners'
blocks.

So given the assumption that Alice is "well-connected" as Peter
mentioned, it seems like this is a concern.  But is this a realistic
assumption?  All miners have an incentive to be thoroughly connected to
one another, to make sure they minimize the amount of time they spend
mining on forks and that their blocks win with minimal chance of being
orphaned.  Is it realistic that one miner can somehow monopolize the
good connections when the big miners are already trying to do the same
thing for honest reasons?  If you have a network full of honest miners
and this one selfish-miner, it seems that all the honest miners need to
do is try to establish those connections to each other as well as Alice
does, and Alice will end up orphaning all her profit away.

Furthermore, you can de-incentivize it by simply randomizing the order
of broadcasts.  Although you are maintaining multiple concurrent
connections, the data still exits your network card as a serial stream
of packets, and it seems that if you randomize who gets your new-block
broadcasts first, then it further reduces the Alice's advantage if she's
not guaranteed to "be first."   Sure, she can do it sometimes, but it
would seem that even a couple failures to beat the rest of the network
is going to erase most/all of what she gained on the blocks/chains that
she wins.

I liked the statement by Chris WIllmer on the reddit thread:  "practice
> theory".  The more we can theorize our way to believing the
conclusions that this is a problem, the more incentive there is for
someone intelligent to actually try it.  It's very possible that the
conditions needed to execute this "attack" just cannot be attained in
practice. 

-Alan




On 11/04/2013 04:04 PM, Peter Todd wrote:
> On Mon, Nov 04, 2013 at 02:12:44PM -0500, Ittay wrote:
>> On Mon, Nov 4, 2013 at 10:25 AM, Ittay <ittay.eyal at cornell.edu> wrote:
>>
>>> As for the rational motivation of the individual miners - that's a good
>>> point!
>>> Here is a solution we did not put in the paper due to space constraints
>>> that should alleviate your concern:
>>> Instead of locally choosing a block at random, have a deterministic
>>> pseudo-random mechanism for choosing between competing chains. E.g., take
>>> the one whose last block hash is smaller. This way all miners choose the
>>> same chain, and the guarantees of our solution hold.
>>>
>> I take that back.
> Speaking of, I'm going to take back my solution as well; I misunderstood
> your paper.
>
> So here's your argument in a ELI5 nutshell:
>
> Alice is a miner with some amount of hashing power. She has the ability
> to detect new blocks on the network extremely effectively for whatever
> reason; in short she has unusually good knowledge of the state of the
> network. She is also very good at publishing her blocks and getting them
> to the majority of hashing power in very little time; she has unusually
> good connectivity to all miners. (low-latency and high bandwidth)
>
> She's so good at this that when she finds a new block, she keeps it a
> secret! She can get away with this because she knows that the moment Bob
> finds a block, she can immediately broadcast it to the rest of the
> network before the other block propagates. Instead of building on Bob's
> blocks, almost everyone builds on Alice's block, depriving Bob of the
> revenue. Gradually Alice gets more and more miners because Bob, and
> other pools, don't pay out as much.
>
> You propose a rule where essentially miners extend Bob's block 50% of
> the time, and show in your paper how that leads to a scenario where
> Alice needs to have at leastr 1/4 of the total hashing power to
> succesfully pull this attack off anyway.
>
>
> What I did succesfully show is that for a short-term rational miner
> they're still better off mining to extend the block they hear about
> first rather than using your pick-one-at-random rule, because when you
> hear about a block is important information about whether or not the
> majority is mining on it. This is true even if others are using the
> pick-one-at-random rule. (they're better defecting than doing what's
> right for the whole network) Even worse is that miners have a rational
> incentive to broadcast such near-target headers to try to encourage
> other miners to work on the same fork that they are working on. The
> near-target idea came about for a totally different reason, so it's
> something that might wind up being implemented anyway.
>
> Mike Hearn's idea of making it easy to identify nodes associated with
> hashing power is still wrong. Although again, it's something that miners
> themselves have rational incentives to do. (you always want to encourage
> others to send you their blocks, and you also want to be able to send
> your blocks to the majority of hashing power as quickly as possible)
>
> Where the idea goes wrong is it makes it easier for Alice to identify
> hashing power, specifically where she needs to send her blocks to
> distribute them to the majority as quickly as possible. The second
> problem occurs if those nodes also distribute blocks to connecting
> peers: this makes it easy for Alice to be sure she'll hear about a new
> block as soon as possible by connecting to every one of those peers with
> a high-speed, low-latency connection. Bizzarely the idea does work if
> the advertised nodes only accept blocks, and never send blocks - instead
> miners would *only* send their blocks to other miners who have proven
> their hashing power, and do so essentially largest miner to smallest.
> Now unless Alice already is a large miner, her strategy can't work.  Of
> course this will strongly encourage further centralization of pools. But
> it is in the interests of rational miners sadly.
>
> That blocks take a finite amount of time to propagate makes the problem
> worse: for Alice to learn that another block has been mined only
> requires her to receive the small 80 byte header from a peer; she
> doesn't need the whole block. She thus can know the block exists well
> before it has a chance to propagate fully. Even if every miner were
> directly peered to every other as some suggest, Alice could simply make
> smaller blocks, faster propagating than everyone else and use especially
> low-latency connections to win the race.
>
> On the other hand, the Bitcoin protocol is currently designed such that
> a miner can mine a block without knowing the previous block in full.
> Given the large block reward and/or a supply of transactions they knew
> no other miner had a rational miner would start trying to extend the
> longest chain they know about prior to actually receiving and validating
> the full block. Again, when miners start doing this - perhaps out of
> desperation due to low revenue - as long as Alice has the lowest latency
> network she'll win. (she doesn't even need to have the highest bandwidth
> in this case) We can change the protocol to force miners to fully
> validate blocks prior to mining extensions, but that only forces Alice
> to get more bandwidth - she still wins.
>
> Speaking of low-latency, latency not only centralizes control in a
> single pool, it centralizes pools and even mining hardware itself in a
> single physical location. Anyone at the edges of the propagation network
> will get comparatively less revenue than those in the center, gradually
> tightening the network, even without selfish mining. Alice's strategy of
> course should be to position her nodes in the geographical center. It's
> worth noting how if Alice is the one with the lowest average latency,
> she will win against any other miner trying to persue the same selfish
> miner strategy that she is using.
>
>
> Finally nLockTime makes the selfish miner strategy even more profitable.
> You may not be aware, but it's possible to make a transaction that can't
> be mined until some time in the future, measured by either block height
> or block timestamp. I've proposed to use this mechanism in
> announce/commit sacrifices: you create a transaction that can't be mined
> until some point in the future that sacrifices a large amount to mining
> fees, and then prior to that point you include it in the blockchain as
> data, proving the whole world knew about your transaction. The idea was
> that which miner managed to include the transaction, and collect the
> reward, would be random. However whenever Alice is able to maintain a
> lead over other miners she's able to reliably mine significantly more of
> those valuable transactions, further increasing her revenue over other
> miners.
>
>
> I must say, you've really opened a can of worms...
>
>
>
> ------------------------------------------------------------------------------
> Android is increasing in popularity, but the open development platform that
> developers love is also attractive to malware creators. Download this white
> paper to learn more about secure code signing practices that can help keep
> Android apps secure.
> http://pubads.g.doubleclick.net/gampad/clk?id=65839951&iu=/4140/ostg.clktrk
>
>
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131104/0837e02c/attachment.html>

From pete at petertodd.org  Mon Nov  4 22:03:17 2013
From: pete at petertodd.org (Peter Todd)
Date: Mon, 4 Nov 2013 17:03:17 -0500
Subject: [Bitcoin-development] Auto-generated miner backbone
In-Reply-To: <52781574.1000904@gmail.com>
References: <CANEZrP3iYBdg3p7Ru4O-UENY_yyQDA8=9PGn=KDKGGTrZ-xkRw@mail.gmail.com>
	<20131104142621.GA2190@petertodd.org>
	<CABT1wWm1NzKSS9H=Qh3Z6pFmNHbOFKC12WaE=b3kE0mNsRgfmw@mail.gmail.com>
	<20131104150406.GA2566@petertodd.org>
	<CABT1wWmONUeOWRg-=FKr88bgBQf0un4bvjYW2h8d-10ys-VKtA@mail.gmail.com>
	<CABT1wWmwb17b4ACHMmDKqd94tUSKsvwAPx344mZ0VS+47myeWg@mail.gmail.com>
	<20131104210451.GA4443@petertodd.org> <52781574.1000904@gmail.com>
Message-ID: <20131104220317.GC4443@petertodd.org>

On Mon, Nov 04, 2013 at 04:45:24PM -0500, Alan Reiner wrote:
> So given the assumption that Alice is "well-connected" as Peter
> mentioned, it seems like this is a concern.  But is this a realistic
> assumption?  All miners have an incentive to be thoroughly connected to
> one another, to make sure they minimize the amount of time they spend
> mining on forks and that their blocks win with minimal chance of being
> orphaned.  Is it realistic that one miner can somehow monopolize the
> good connections when the big miners are already trying to do the same
> thing for honest reasons?  If you have a network full of honest miners
> and this one selfish-miner, it seems that all the honest miners need to
> do is try to establish those connections to each other as well as Alice
> does, and Alice will end up orphaning all her profit away.

Right, but as I said, I think this is likely to become a contest of who
can create the lowest latency mining operation, or to be more precise,
who can get the best ratio of latency per dollar.

Unfortunately even with totally "honest" mining winning orphan rates is
a function of latency; what this paper has done is mainly show a
remarkably effective way of leveraging low-latency and very good
visibility to the network.

Regardless, globe-spanning low-latency networks cost a lot of money, so
if they are something that makes mining more profitable, for whatever
reason, that's an effect that will incentivise pools to grow larger and
more centralized.

> Furthermore, you can de-incentivize it by simply randomizing the order
> of broadcasts.  Although you are maintaining multiple concurrent
> connections, the data still exits your network card as a serial stream
> of packets, and it seems that if you randomize who gets your new-block
> broadcasts first, then it further reduces the Alice's advantage if she's
> not guaranteed to "be first."   Sure, she can do it sometimes, but it
> would seem that even a couple failures to beat the rest of the network
> is going to erase most/all of what she gained on the blocks/chains that
> she wins.

Yeah, there's a lot of possible solutions, but what I'm seeing looking
at them is they all tend to be not economically rational, in the short
term, or even worse, they actually incentivize mining pools to get
larger. For instance anything that tries to prevent Alice from sybiling
the network by forcing nodes to prove they have mining capacity just
means that larger miners will have an advantage over smaller ones in
getting their blocks propagated as fast as possible. Once Alice does
have a reasonable amount of mining capacity, she can still use the
selfish miner attack to grow larger and more profitable.

-- 
'peter'[:-1]@petertodd.org
000000000000000aae6d13639c5b4555eeda301ebcbc53f12e8a633e267c8331
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 490 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131104/58801b29/attachment.sig>

From gustaw.wieczorek at yahoo.com  Tue Nov  5 04:14:37 2013
From: gustaw.wieczorek at yahoo.com (Gustaw Wieczorek)
Date: Mon, 4 Nov 2013 20:14:37 -0800 (PST)
Subject: [Bitcoin-development] Auto-generated miner backbone
Message-ID: <1383624877.65922.YahooMailNeo@web120504.mail.ne1.yahoo.com>

Mike Hearn wrote:

> how about if we wrote code to automatically build a miner backbone

Yeah, let's build a backbone, or a cloud, and then we could have Google run it!

Come on, Mike, your conflict-of-interest as an employee is hanging out in the open, flapping in the breeze here...? Don't you think it's a bit obvious for somebody in your position to advocate centralization of infrastructure, especially when it comes to bitcoin?


On the other hand, I guess your blind trust in IP addresses as a solid foundation for security is why you were so shocked when the NSA hacked your "backbone".
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131104/7b947cb5/attachment.html>

From pete at petertodd.org  Tue Nov  5 04:39:05 2013
From: pete at petertodd.org (Peter Todd)
Date: Mon, 4 Nov 2013 23:39:05 -0500
Subject: [Bitcoin-development] Auto-generated miner backbone
In-Reply-To: <1383624877.65922.YahooMailNeo@web120504.mail.ne1.yahoo.com>
References: <1383624877.65922.YahooMailNeo@web120504.mail.ne1.yahoo.com>
Message-ID: <20131105043905.GA7552@petertodd.org>

On Mon, Nov 04, 2013 at 08:14:37PM -0800, Gustaw Wieczorek wrote:
> Mike Hearn wrote:
> 
> > how about if we wrote code to automatically build a miner backbone
> 
> Yeah, let's build a backbone, or a cloud, and then we could have Google run it!
> 
> Come on, Mike, your conflict-of-interest as an employee is hanging out in the open, flapping in the breeze here...? Don't you think it's a bit obvious for somebody in your position to advocate centralization of infrastructure, especially when it comes to bitcoin?
> 
> 
> On the other hand, I guess your blind trust in IP addresses as a solid foundation for security is why you were so shocked when the NSA hacked your "backbone".

Go away.

Mike specifically mentioned the idea of using Tor addresses, which are
authenticated. In addition this mechanism to create a backbone
*automatically* is exactly as decentralized as Bitcoin mining itself is.
It has nothing to do with Google.

I suggested the mechanism myself for slightly different reasons, and if
you know me, you'd know I'm the first to jump on anyone pushing
centralization.

-- 
'peter'[:-1]@petertodd.org
000000000000000517064a43348fa39325bdc244ffb1d0da11ab85676d494a85
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 490 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131104/05df1b7c/attachment.sig>

From gmaxwell at gmail.com  Tue Nov  5 06:37:43 2013
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Mon, 4 Nov 2013 22:37:43 -0800
Subject: [Bitcoin-development] Auto-generated miner backbone
In-Reply-To: <20131105043905.GA7552@petertodd.org>
References: <1383624877.65922.YahooMailNeo@web120504.mail.ne1.yahoo.com>
	<20131105043905.GA7552@petertodd.org>
Message-ID: <CAAS2fgSGpxtMVd-xU9xf8gcq8RVh67a+N6dF-Kaeg8XdGsiJtQ@mail.gmail.com>

On Mon, Nov 4, 2013 at 8:39 PM, Peter Todd <pete at petertodd.org> wrote:
> I suggested the mechanism myself for slightly different reasons, and if
> you know me, you'd know I'm the first to jump on anyone pushing
> centralization.

Likewise, I did too and am also not very tolerant with "trusted" or
"centeralized" things in general.

An authenticated miner announced set of nodes is _far_ from a cure
all, as any attack they stop can be recovered by adding "and dos
attacks the public miner announced nodes" to the attack's
requirements... but we build security with layers.

Bitcoin's security is only improved when we can weave the network
tighter and make partitioning it more difficult.



From ittay.eyal at cornell.edu  Tue Nov  5 16:56:53 2013
From: ittay.eyal at cornell.edu (Ittay)
Date: Tue, 5 Nov 2013 11:56:53 -0500
Subject: [Bitcoin-development] BIP proposal - patch to raise selfish mining
	threshold.
Message-ID: <CABT1wWkOukEzxK5fLbnA4ZgJGN1hb_DMteCJOfA13FE_QZCi=Q@mail.gmail.com>

Hello,

Please see below our BIP for raising the selfish mining threshold.
Looking forward to your comments.

Best,
Ittay

---

Bitcoin Improvement Proposal

Owners: Ittay Eyal and Emin Gun Sirer

We suggest a change in the propagation and mining algorithm for chains of
the same difficulty, to raise the threshold on Selfish Mining attacks.

* Current situation:
When a miner is notified of a new chain of the same difficulty as the one
it is mining on, it will ignore it.

* Background:
The selfish mining attack and its implications were described in detail in
the following research paper:
http://arxiv.org/abs/1311.0243v1

* Proposal:
To thwart selfish mining attacks launched by less than 25% of the mining
power, we propose the following change to the protocol:
When a miner learns of more than one chain of the same difficulty, it
should propagate all of them, and choose one of them to mine on uniformly
at random among all chains of the same difficulty.

When hearing of a chain of maximal difficulty that it did not know of
before:
1. Add it to a local list of maximal difficulty chains.
2. Propagate it to its neighbors.
3. Choose a branch uniformly at random from the local list, and mine on it.

* Example:
t0: learn of chain A of difficulty x.
    propagate A to neighbors.
    start mining on A.
t1: learn of chain B of difficulty x.
    propagate B to neighbors.
    toss a coin between A and B; if B wins, switch to mining on B.
t2: learn of chain C of difficulty x.
    propagate C to neighbors.
    toss a 3 faced coin among A, B, and C; switch to mining on the winning
chain.

* Concerns and answers:
1. No harm to miners when all are honest.
Mining blocks is a random Poisson process, which is memoryless. Having
mined on the block in the past does not provide an advantage in locating a
solution in the future. Therefore, a miner is not harmed by switching the
chain on which it mines.

2. No new vulnerabilities introduced:
Currently the choice among equal-length chains is done arbitrarily,
depending on network topology. This arbitrariness is a source of
vulnerability. We replace it with explicit randomness, which is at the
control of the protocol. The change does not introduce executions that were
not possible with the old protocol.

3. Complete backward compatibility:
Any subset of the miners can switch to the proposed protocol.

4. Progressive improvement:
Each miner that adopts the change raises the threshold a little bit. The
threshold will reach 25% with universal adoption.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131105/6602a128/attachment.html>

From pete at petertodd.org  Tue Nov  5 17:05:41 2013
From: pete at petertodd.org (Peter Todd)
Date: Tue, 5 Nov 2013 12:05:41 -0500
Subject: [Bitcoin-development] BIP proposal - patch to raise selfish
 mining threshold.
In-Reply-To: <CABT1wWkOukEzxK5fLbnA4ZgJGN1hb_DMteCJOfA13FE_QZCi=Q@mail.gmail.com>
References: <CABT1wWkOukEzxK5fLbnA4ZgJGN1hb_DMteCJOfA13FE_QZCi=Q@mail.gmail.com>
Message-ID: <20131105170541.GA13660@petertodd.org>

On Tue, Nov 05, 2013 at 11:56:53AM -0500, Ittay wrote:
> Hello,
> 
> Please see below our BIP for raising the selfish mining threshold.
> Looking forward to your comments.

<snip>

> 2. No new vulnerabilities introduced:
> Currently the choice among equal-length chains is done arbitrarily,
> depending on network topology. This arbitrariness is a source of
> vulnerability. We replace it with explicit randomness, which is at the
> control of the protocol. The change does not introduce executions that were
> not possible with the old protocol.

Credit goes to Gregory Maxwell for pointing this out, but the random
choice solution does in fact introduce a vulnerability in that it
creates incentives for pools over a certain size to withhold blocks
rather than immediately broadcasting all blocks found.

The problem is that when the pool eventually choses to reveal the block
they mined, 50% of the hashing power switches, thus splitting the
network. Like the original attack this can be to their benefit. For
pools over a certain size this strategy is profitable even without
investing in a low-latency network; Maxwell or someone else can chime in
with the details for deriving that threshold.

I won't get a chance to for a few hours, but someone should do the
analysis on a deterministic switching scheme.

-- 
'peter'[:-1]@petertodd.org
0000000000000005e25ca9b9fe62bdd6e8a2b4527ad61753dd2113c268bec707
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 490 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131105/78930d87/attachment.sig>

From pete at petertodd.org  Tue Nov  5 17:14:45 2013
From: pete at petertodd.org (Peter Todd)
Date: Tue, 5 Nov 2013 12:14:45 -0500
Subject: [Bitcoin-development] BIP proposal - patch to raise selfish
 mining threshold.
In-Reply-To: <20131105170541.GA13660@petertodd.org>
References: <CABT1wWkOukEzxK5fLbnA4ZgJGN1hb_DMteCJOfA13FE_QZCi=Q@mail.gmail.com>
	<20131105170541.GA13660@petertodd.org>
Message-ID: <20131105171445.GA13710@petertodd.org>

On Tue, Nov 05, 2013 at 12:05:41PM -0500, Peter Todd wrote:
> On Tue, Nov 05, 2013 at 11:56:53AM -0500, Ittay wrote:
> > Hello,
> > 
> > Please see below our BIP for raising the selfish mining threshold.
> > Looking forward to your comments.
> 
> <snip>
> 
> > 2. No new vulnerabilities introduced:
> > Currently the choice among equal-length chains is done arbitrarily,
> > depending on network topology. This arbitrariness is a source of
> > vulnerability. We replace it with explicit randomness, which is at the
> > control of the protocol. The change does not introduce executions that were
> > not possible with the old protocol.
> 
> Credit goes to Gregory Maxwell for pointing this out, but the random
> choice solution does in fact introduce a vulnerability in that it
> creates incentives for pools over a certain size to withhold blocks
> rather than immediately broadcasting all blocks found.
> 
> The problem is that when the pool eventually choses to reveal the block
> they mined, 50% of the hashing power switches, thus splitting the
> network. Like the original attack this can be to their benefit. For
> pools over a certain size this strategy is profitable even without
> investing in a low-latency network; Maxwell or someone else can chime in
> with the details for deriving that threshold.
> 
> I won't get a chance to for a few hours, but someone should do the
> analysis on a deterministic switching scheme.

Oh, and I don't want to give the wrong impression: there's no need to
rush to get this problem fixed. Even if someone wanted to launch an
attack right now, with a fair amount of resources, there's a lot of
counter-measures based on human intervention that can definitely stop
the attack in the short-term; what's needed is at worst moderate-term,
and much more likely a long-term approach. In addition, keep in mind
that this attack is very easy to detect, so if one is actually launched
we will know immediately and can start taking direct counter-measures at
that time.

That Gregory Maxwell so quickly identified a flaw in this proposed
solution suggests we should proceed carefully.

It'd be good to do a test of this attack, as well as possible solutions,
on testnet to better explore it and possible counter-measures.

-- 
'peter'[:-1]@petertodd.org
000000000000000a03ea8c90161a275ee63d077ec35c1b582c77934c0be12a02
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 490 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131105/d8f114b2/attachment.sig>

From ittay.eyal at cornell.edu  Tue Nov  5 17:26:46 2013
From: ittay.eyal at cornell.edu (Ittay)
Date: Tue, 5 Nov 2013 12:26:46 -0500
Subject: [Bitcoin-development] BIP proposal - patch to raise selfish
 mining threshold.
In-Reply-To: <20131105170541.GA13660@petertodd.org>
References: <CABT1wWkOukEzxK5fLbnA4ZgJGN1hb_DMteCJOfA13FE_QZCi=Q@mail.gmail.com>
	<20131105170541.GA13660@petertodd.org>
Message-ID: <CABT1wWnPJOKKT5v2hGePkUT8jNau=TEK5s-n2so2kQKnv-HfqQ@mail.gmail.com>

That sounds like selfish mining, and the magic number is 25%. That's the
minimal pool size.
Today the threshold is 0% with good connectivity.

If I misunderstood your point, please elaborate.

Ittay



On Tue, Nov 5, 2013 at 12:05 PM, Peter Todd <pete at petertodd.org> wrote:

> On Tue, Nov 05, 2013 at 11:56:53AM -0500, Ittay wrote:
> > Hello,
> >
> > Please see below our BIP for raising the selfish mining threshold.
> > Looking forward to your comments.
>
> <snip>
>
> > 2. No new vulnerabilities introduced:
> > Currently the choice among equal-length chains is done arbitrarily,
> > depending on network topology. This arbitrariness is a source of
> > vulnerability. We replace it with explicit randomness, which is at the
> > control of the protocol. The change does not introduce executions that
> were
> > not possible with the old protocol.
>
> Credit goes to Gregory Maxwell for pointing this out, but the random
> choice solution does in fact introduce a vulnerability in that it
> creates incentives for pools over a certain size to withhold blocks
> rather than immediately broadcasting all blocks found.
>
> The problem is that when the pool eventually choses to reveal the block
> they mined, 50% of the hashing power switches, thus splitting the
> network. Like the original attack this can be to their benefit. For
> pools over a certain size this strategy is profitable even without
> investing in a low-latency network; Maxwell or someone else can chime in
> with the details for deriving that threshold.
>
> I won't get a chance to for a few hours, but someone should do the
> analysis on a deterministic switching scheme.
>
> --
> 'peter'[:-1]@petertodd.org
> 0000000000000005e25ca9b9fe62bdd6e8a2b4527ad61753dd2113c268bec707
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131105/b28e776d/attachment.html>

From ittay.eyal at cornell.edu  Tue Nov  5 17:43:15 2013
From: ittay.eyal at cornell.edu (Ittay)
Date: Tue, 5 Nov 2013 12:43:15 -0500
Subject: [Bitcoin-development] BIP proposal - patch to raise selfish
 mining threshold.
In-Reply-To: <20131105171445.GA13710@petertodd.org>
References: <CABT1wWkOukEzxK5fLbnA4ZgJGN1hb_DMteCJOfA13FE_QZCi=Q@mail.gmail.com>
	<20131105170541.GA13660@petertodd.org>
	<20131105171445.GA13710@petertodd.org>
Message-ID: <CABT1wW=XgDfxfxMxyjcNhtNTzXkGLtgSLz3JJcUAq9ywgpymyg@mail.gmail.com>

On Tue, Nov 5, 2013 at 12:14 PM, Peter Todd <pete at petertodd.org> wrote:

> On Tue, Nov 05, 2013 at 12:05:41PM -0500, Peter Todd wrote:
> > On Tue, Nov 05, 2013 at 11:56:53AM -0500, Ittay wrote:
>
> Oh, and I don't want to give the wrong impression: there's no need to
> rush to get this problem fixed. Even if someone wanted to launch an
> attack right now, with a fair amount of resources, there's a lot of
> counter-measures based on human intervention that can definitely stop
> the attack in the short-term


The attack can be easily hidden. And be sure that before today, today,
and after today, very smart people are at their computer planning attacks
on Bitcoin. Exploits must be published and fixed FAST.

Nevertheless, I agree  that, as you say, we must not rush it. Look at the
BIP, find if we missed anything, and let's discuss it.


> In addition, keep in mind
> that this attack is very easy to detect, so if one is actually launched
> we will know immediately and can start taking direct counter-measures at
> that time.
>

Not really. Please see the discussion section in our paper.


> That Gregory Maxwell so quickly identified a flaw in this proposed
> solution suggests we should proceed carefully.
>

There is no flaw. You were just reiterating that the solution does not give
us the 51% percent security you thought you had before. We showed that
we're not getting this back, I'm afraid.

Best,
Ittay
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131105/8c0bd106/attachment.html>

From mike at plan99.net  Tue Nov  5 17:54:14 2013
From: mike at plan99.net (Mike Hearn)
Date: Tue, 5 Nov 2013 18:54:14 +0100
Subject: [Bitcoin-development] BIP proposal - patch to raise selfish
 mining threshold.
In-Reply-To: <CABT1wW=XgDfxfxMxyjcNhtNTzXkGLtgSLz3JJcUAq9ywgpymyg@mail.gmail.com>
References: <CABT1wWkOukEzxK5fLbnA4ZgJGN1hb_DMteCJOfA13FE_QZCi=Q@mail.gmail.com>
	<20131105170541.GA13660@petertodd.org>
	<20131105171445.GA13710@petertodd.org>
	<CABT1wW=XgDfxfxMxyjcNhtNTzXkGLtgSLz3JJcUAq9ywgpymyg@mail.gmail.com>
Message-ID: <CANEZrP0itd3xW7yyg9FBJVuJNttcmMhnqWGOaWxjz37ATrR8qA@mail.gmail.com>

On Tue, Nov 5, 2013 at 6:43 PM, Ittay <ittay.eyal at cornell.edu> wrote:

> The attack can be easily hidden. And be sure that before today, today,
> and after today, very smart people are at their computer planning attacks
> on Bitcoin. Exploits must be published and fixed FAST.
>

I think it would be helpful if you actually implemented and pulled off this
attack, by becoming the dominant miner capable of reversing spends at will.
Then we'd know how quickly it can be done.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131105/58285c95/attachment.html>

From patrick at intersango.com  Tue Nov  5 17:37:54 2013
From: patrick at intersango.com (Patrick)
Date: Tue, 05 Nov 2013 09:37:54 -0800
Subject: [Bitcoin-development] BIP proposal - patch to raise selfish
 mining threshold.
In-Reply-To: <CABT1wWnPJOKKT5v2hGePkUT8jNau=TEK5s-n2so2kQKnv-HfqQ@mail.gmail.com>
References: <CABT1wWkOukEzxK5fLbnA4ZgJGN1hb_DMteCJOfA13FE_QZCi=Q@mail.gmail.com>
	<20131105170541.GA13660@petertodd.org>
	<CABT1wWnPJOKKT5v2hGePkUT8jNau=TEK5s-n2so2kQKnv-HfqQ@mail.gmail.com>
Message-ID: <52792CF2.10709@intersango.com>

The ratio of honest miners that mine the first block they see is > 0.5

Your proposed solution would reduce that ratio to 0.5

In other words your proposed change would make the attack you describe
easier not harder.

On 11/05/2013 09:26 AM, Ittay wrote:
> That sounds like selfish mining, and the magic number is 25%. That's
> the minimal pool size. 
> Today the threshold is 0% with good connectivity. 
>
> If I misunderstood your point, please elaborate. 
>
> Ittay 
>
>
>
> On Tue, Nov 5, 2013 at 12:05 PM, Peter Todd <pete at petertodd.org
> <mailto:pete at petertodd.org>> wrote:
>
>     On Tue, Nov 05, 2013 at 11:56:53AM -0500, Ittay wrote:
>     > Hello,
>     >
>     > Please see below our BIP for raising the selfish mining threshold.
>     > Looking forward to your comments.
>
>     <snip>
>
>     > 2. No new vulnerabilities introduced:
>     > Currently the choice among equal-length chains is done arbitrarily,
>     > depending on network topology. This arbitrariness is a source of
>     > vulnerability. We replace it with explicit randomness, which is
>     at the
>     > control of the protocol. The change does not introduce
>     executions that were
>     > not possible with the old protocol.
>
>     Credit goes to Gregory Maxwell for pointing this out, but the random
>     choice solution does in fact introduce a vulnerability in that it
>     creates incentives for pools over a certain size to withhold blocks
>     rather than immediately broadcasting all blocks found.
>
>     The problem is that when the pool eventually choses to reveal the
>     block
>     they mined, 50% of the hashing power switches, thus splitting the
>     network. Like the original attack this can be to their benefit. For
>     pools over a certain size this strategy is profitable even without
>     investing in a low-latency network; Maxwell or someone else can
>     chime in
>     with the details for deriving that threshold.
>
>     I won't get a chance to for a few hours, but someone should do the
>     analysis on a deterministic switching scheme.
>
>     --
>     'peter'[:-1]@petertodd.org <http://petertodd.org>
>     0000000000000005e25ca9b9fe62bdd6e8a2b4527ad61753dd2113c268bec707
>
>
>
>
> ------------------------------------------------------------------------------
> November Webinars for C, C++, Fortran Developers
> Accelerate application performance with scalable programming models. Explore
> techniques for threading, error checking, porting, and tuning. Get the most 
> from the latest Intel processors and coprocessors. See abstracts and register
> http://pubads.g.doubleclick.net/gampad/clk?id=60136231&iu=/4140/ostg.clktrk
>
>
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131105/3ac68674/attachment.html>

From startithub at gmail.com  Tue Nov  5 18:07:55 2013
From: startithub at gmail.com (Alessandro Parisi)
Date: Tue, 5 Nov 2013 19:07:55 +0100
Subject: [Bitcoin-development] BIP proposal - patch to raise selfish
 mining threshold.
In-Reply-To: <CANEZrP0itd3xW7yyg9FBJVuJNttcmMhnqWGOaWxjz37ATrR8qA@mail.gmail.com>
References: <CABT1wWkOukEzxK5fLbnA4ZgJGN1hb_DMteCJOfA13FE_QZCi=Q@mail.gmail.com>
	<20131105170541.GA13660@petertodd.org>
	<20131105171445.GA13710@petertodd.org>
	<CABT1wW=XgDfxfxMxyjcNhtNTzXkGLtgSLz3JJcUAq9ywgpymyg@mail.gmail.com>
	<CANEZrP0itd3xW7yyg9FBJVuJNttcmMhnqWGOaWxjz37ATrR8qA@mail.gmail.com>
Message-ID: <CADre0dm0PGARSXXdwoa1ZOnpbEw_bx0aKP17q4PSFLTayyoRJw@mail.gmail.com>

I agree with Ittay: when bugs are found, they must be fixed ASAP,
expecially when they affect a sensitive sw such as Bitcon; in IT security,
every flaw that is exploitable in abstract, is going to be exploited in
real, sooner or later, also taking into account the increasing parallel
computing power; beware of false sense of security

WebSite: http://www.startithub.com
Per rimanere aggiornato in merito a Startup, Innovazione e Normativa di
settore, sottoscrivi la nostra newsletter:
http://www.startithub.com/blog/sottoscrivi-newsletter/


2013/11/5 Mike Hearn <mike at plan99.net>

> On Tue, Nov 5, 2013 at 6:43 PM, Ittay <ittay.eyal at cornell.edu> wrote:
>
>> The attack can be easily hidden. And be sure that before today, today,
>> and after today, very smart people are at their computer planning attacks
>> on Bitcoin. Exploits must be published and fixed FAST.
>>
>
> I think it would be helpful if you actually implemented and pulled off
> this attack, by becoming the dominant miner capable of reversing spends at
> will. Then we'd know how quickly it can be done.
>
>
>
>
>
> ------------------------------------------------------------------------------
> November Webinars for C, C++, Fortran Developers
> Accelerate application performance with scalable programming models.
> Explore
> techniques for threading, error checking, porting, and tuning. Get the most
> from the latest Intel processors and coprocessors. See abstracts and
> register
> http://pubads.g.doubleclick.net/gampad/clk?id=60136231&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131105/e141a5e9/attachment.html>

From startithub at gmail.com  Tue Nov  5 18:18:22 2013
From: startithub at gmail.com (Alessandro Parisi)
Date: Tue, 5 Nov 2013 19:18:22 +0100
Subject: [Bitcoin-development] BIP proposal - patch to raise selfish
 mining threshold.
In-Reply-To: <52792CF2.10709@intersango.com>
References: <CABT1wWkOukEzxK5fLbnA4ZgJGN1hb_DMteCJOfA13FE_QZCi=Q@mail.gmail.com>
	<20131105170541.GA13660@petertodd.org>
	<CABT1wWnPJOKKT5v2hGePkUT8jNau=TEK5s-n2so2kQKnv-HfqQ@mail.gmail.com>
	<52792CF2.10709@intersango.com>
Message-ID: <CADre0dkw+Lhh9HodgPz0u4MgxkpO+KJhCoGfDbOQZM3TExab+w@mail.gmail.com>

Patrick, could you please explain us why the solution proposed by Ittay
would drop the actual honest miners ratio, becoming so backfire? Thanks a
lot


2013/11/5 Patrick <patrick at intersango.com>

>  The ratio of honest miners that mine the first block they see is > 0.5
>
> Your proposed solution would reduce that ratio to 0.5
>
> In other words your proposed change would make the attack you describe
> easier not harder.
>
>
> On 11/05/2013 09:26 AM, Ittay wrote:
>
> That sounds like selfish mining, and the magic number is 25%. That's the
> minimal pool size.
> Today the threshold is 0% with good connectivity.
>
>  If I misunderstood your point, please elaborate.
>
>  Ittay
>
>
>
> On Tue, Nov 5, 2013 at 12:05 PM, Peter Todd <pete at petertodd.org> wrote:
>
>> On Tue, Nov 05, 2013 at 11:56:53AM -0500, Ittay wrote:
>> > Hello,
>> >
>> > Please see below our BIP for raising the selfish mining threshold.
>> > Looking forward to your comments.
>>
>>  <snip>
>>
>> > 2. No new vulnerabilities introduced:
>> > Currently the choice among equal-length chains is done arbitrarily,
>> > depending on network topology. This arbitrariness is a source of
>> > vulnerability. We replace it with explicit randomness, which is at the
>> > control of the protocol. The change does not introduce executions that
>> were
>> > not possible with the old protocol.
>>
>>  Credit goes to Gregory Maxwell for pointing this out, but the random
>> choice solution does in fact introduce a vulnerability in that it
>> creates incentives for pools over a certain size to withhold blocks
>> rather than immediately broadcasting all blocks found.
>>
>> The problem is that when the pool eventually choses to reveal the block
>> they mined, 50% of the hashing power switches, thus splitting the
>> network. Like the original attack this can be to their benefit. For
>> pools over a certain size this strategy is profitable even without
>> investing in a low-latency network; Maxwell or someone else can chime in
>> with the details for deriving that threshold.
>>
>> I won't get a chance to for a few hours, but someone should do the
>> analysis on a deterministic switching scheme.
>>
>> --
>> 'peter'[:-1]@petertodd.org
>> 0000000000000005e25ca9b9fe62bdd6e8a2b4527ad61753dd2113c268bec707
>>
>
>
>
> ------------------------------------------------------------------------------
> November Webinars for C, C++, Fortran Developers
> Accelerate application performance with scalable programming models. Explore
> techniques for threading, error checking, porting, and tuning. Get the most
> from the latest Intel processors and coprocessors. See abstracts and registerhttp://pubads.g.doubleclick.net/gampad/clk?id=60136231&iu=/4140/ostg.clktrk
>
>
>
> _______________________________________________
> Bitcoin-development mailing listBitcoin-development at lists.sourceforge.nethttps://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
>
>
> ------------------------------------------------------------------------------
> November Webinars for C, C++, Fortran Developers
> Accelerate application performance with scalable programming models.
> Explore
> techniques for threading, error checking, porting, and tuning. Get the most
> from the latest Intel processors and coprocessors. See abstracts and
> register
> http://pubads.g.doubleclick.net/gampad/clk?id=60136231&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131105/ccaea6cc/attachment.html>

From jgarzik at bitpay.com  Tue Nov  5 18:37:04 2013
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Tue, 5 Nov 2013 13:37:04 -0500
Subject: [Bitcoin-development] BIP proposal - patch to raise selfish
 mining threshold.
In-Reply-To: <CADre0dm0PGARSXXdwoa1ZOnpbEw_bx0aKP17q4PSFLTayyoRJw@mail.gmail.com>
References: <CABT1wWkOukEzxK5fLbnA4ZgJGN1hb_DMteCJOfA13FE_QZCi=Q@mail.gmail.com>
	<20131105170541.GA13660@petertodd.org>
	<20131105171445.GA13710@petertodd.org>
	<CABT1wW=XgDfxfxMxyjcNhtNTzXkGLtgSLz3JJcUAq9ywgpymyg@mail.gmail.com>
	<CANEZrP0itd3xW7yyg9FBJVuJNttcmMhnqWGOaWxjz37ATrR8qA@mail.gmail.com>
	<CADre0dm0PGARSXXdwoa1ZOnpbEw_bx0aKP17q4PSFLTayyoRJw@mail.gmail.com>
Message-ID: <CAJHLa0MO9Q7D_9xmXPYKrebC7sMLoZtJ4epFSk36e8mMNMSKGg@mail.gmail.com>

On Tue, Nov 5, 2013 at 1:07 PM, Alessandro Parisi <startithub at gmail.com> wrote:
> I agree with Ittay: when bugs are found, they must be fixed ASAP, expecially
> when they affect a sensitive sw such as Bitcon; in IT security, every flaw
> that is exploitable in abstract, is going to be exploited in real, sooner or
> later, also taking into account the increasing parallel computing power;
> beware of false sense of security

That is quite ignorant.  Bitcoin is far more complex than standard IT
security "fix ASAP" mantra.  Distributed consensus is a new field of
computer science, and blindly applying standard logic to bitcoin will
quickly result in large problems.

Every fix has the chance of changing the game theory or economics of
bitcoin.  A change to the core consensus protocol within bitcoin --
mining -- is even more game-theory- and economically-critical to the
core system.  Changes thus have more impact, where any change
potentially reduces bitcoin's value to zero in the worst case.

Bitcoin is akin to medical device or avionics software.  We cannot
just change at will, without significant research, analysis and
testing.   "It is a bug, it must be fixed ASAP" is ignorant and
dangerous.

Further, this is at present a THEORETICAL problem, and the solution
presented has some obvious flaws, that would make our current, WORKING
SYSTEM more fragile, and less secure.

-- 
Jeff Garzik
Senior Software Engineer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From startithub at gmail.com  Tue Nov  5 18:55:45 2013
From: startithub at gmail.com (Alessandro Parisi)
Date: Tue, 5 Nov 2013 19:55:45 +0100
Subject: [Bitcoin-development] BIP proposal - patch to raise selfish
 mining threshold.
In-Reply-To: <CAJHLa0MO9Q7D_9xmXPYKrebC7sMLoZtJ4epFSk36e8mMNMSKGg@mail.gmail.com>
References: <CABT1wWkOukEzxK5fLbnA4ZgJGN1hb_DMteCJOfA13FE_QZCi=Q@mail.gmail.com>
	<20131105170541.GA13660@petertodd.org>
	<20131105171445.GA13710@petertodd.org>
	<CABT1wW=XgDfxfxMxyjcNhtNTzXkGLtgSLz3JJcUAq9ywgpymyg@mail.gmail.com>
	<CANEZrP0itd3xW7yyg9FBJVuJNttcmMhnqWGOaWxjz37ATrR8qA@mail.gmail.com>
	<CADre0dm0PGARSXXdwoa1ZOnpbEw_bx0aKP17q4PSFLTayyoRJw@mail.gmail.com>
	<CAJHLa0MO9Q7D_9xmXPYKrebC7sMLoZtJ4epFSk36e8mMNMSKGg@mail.gmail.com>
Message-ID: <CADre0dm_j68pN9Ov45kd47Y2DLnnfNiyocMvaUtgE=CJPUTUiA@mail.gmail.com>

Thank you very much for your fair response, Sir;
this means that anytime a bug is found in Bitcoin protocol, chances are
that it would take a lot more time to get fixed


2013/11/5 Jeff Garzik <jgarzik at bitpay.com>

> On Tue, Nov 5, 2013 at 1:07 PM, Alessandro Parisi <startithub at gmail.com>
> wrote:
> > I agree with Ittay: when bugs are found, they must be fixed ASAP,
> expecially
> > when they affect a sensitive sw such as Bitcon; in IT security, every
> flaw
> > that is exploitable in abstract, is going to be exploited in real,
> sooner or
> > later, also taking into account the increasing parallel computing power;
> > beware of false sense of security
>
> That is quite ignorant.  Bitcoin is far more complex than standard IT
> security "fix ASAP" mantra.  Distributed consensus is a new field of
> computer science, and blindly applying standard logic to bitcoin will
> quickly result in large problems.
>
> Every fix has the chance of changing the game theory or economics of
> bitcoin.  A change to the core consensus protocol within bitcoin --
> mining -- is even more game-theory- and economically-critical to the
> core system.  Changes thus have more impact, where any change
> potentially reduces bitcoin's value to zero in the worst case.
>
> Bitcoin is akin to medical device or avionics software.  We cannot
> just change at will, without significant research, analysis and
> testing.   "It is a bug, it must be fixed ASAP" is ignorant and
> dangerous.
>
> Further, this is at present a THEORETICAL problem, and the solution
> presented has some obvious flaws, that would make our current, WORKING
> SYSTEM more fragile, and less secure.
>
> --
> Jeff Garzik
> Senior Software Engineer and open source evangelist
> BitPay, Inc.      https://bitpay.com/
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131105/9b6cf3a4/attachment.html>

From jeremy at taplink.co  Tue Nov  5 18:57:34 2013
From: jeremy at taplink.co (Jeremy Spilman)
Date: Tue, 05 Nov 2013 10:57:34 -0800
Subject: [Bitcoin-development] BIP proposal - patch to raise selfish
 mining threshold.
In-Reply-To: <CABT1wWnPJOKKT5v2hGePkUT8jNau=TEK5s-n2so2kQKnv-HfqQ@mail.gmail.com>
References: <CABT1wWkOukEzxK5fLbnA4ZgJGN1hb_DMteCJOfA13FE_QZCi=Q@mail.gmail.com>
	<20131105170541.GA13660@petertodd.org>
	<CABT1wWnPJOKKT5v2hGePkUT8jNau=TEK5s-n2so2kQKnv-HfqQ@mail.gmail.com>
Message-ID: <op.w53ax8dtyldrnw@laptop-air>

Great paper Ittay, thanks for all your work on this.

> Today the threshold is 0% with good connectivity.

Fig. 2 captures this well, the threshold is only zero if 'y' is 1. In  
Section 6 and 6.1 you argue y -> 1 but the sybil attack you describe,  
isn't that more like how *all* sophisticated miners would want to ensure  
their blocks are widely propagated? I think you can't assume only the  
selfish miner is doing it.

Based on the current  'first seen' algorithm, as you say, competing  
longest chains happen about every 60 blocks.  The rest of the time, a  
single block propagates through the vast majority of the network  
'uncontested'.  If there are multiple valid longest blocks being  
simultaneously propagated, then  propagation pattern of the competing  
blocks will determine hash rate on each.

Selfish mining requires exploiting the race condition between learning  
about a competing block, and publishing your own. Usually we talk about  
minimizing publishing latency so that your block ends up uncontested 59/60  
times, and in the 1/60 times, even then your block has the best chance of  
winning.

Selfish mining forgoes the 59/60 chance of your block being uncontested,  
and instead chooses to 'race the network' every time. You start 'one step  
behind' the competing block (since of course you only learn about it after  
it starts propagating), so you must rely on being able to outrace  
propagation of the competing block through a private low-latency  
side-network which can inject your block at multiple points throughout the  
bitcoin p2p network to outrace the competitor.

I think it's a stretch to say 'y' is 0 with good connectivity. Even the  
best connected mining pools today are concerned with this 'y' factor.

Here's a probably very dumb idea... to throw out one possible "solution"...

You want a way to fake-out the 'selfish miner' into disclosing their  
blocks -- how can your force their hand to prevent them from accumulating  
longer private chains?

What if you propagate (and relay) an encrypted block header which honest  
miners will timestamp when they receive it, then 10 seconds later  
propagate the decryption key to unblind it. But here's the catch - maybe  
the decryption results in junk, maybe it results a new longer block. If  
it's a real block then it gets priority based on when the ciphertext was  
received instead of when the decryption key was received. Now 'selfish  
miner' can't race the network anymore, because they are always in state 0'  
and can't tell if they are up against a ghost, or a real competing block.  
If they wait for the decryption key to check, it's too late, and they are  
guaranteed to lose unless they can out-race the network, e.g. back at  
t=50%. Of course there would need to be some way to anti-DDoS this which  
allows for some amount of these fake-outs without letting them get out of  
hand.

Thanks,
Jeremy
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131105/15da1196/attachment.html>

From jgarzik at bitpay.com  Tue Nov  5 18:58:18 2013
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Tue, 5 Nov 2013 13:58:18 -0500
Subject: [Bitcoin-development] BIP proposal - patch to raise selfish
 mining threshold.
In-Reply-To: <CADre0dm_j68pN9Ov45kd47Y2DLnnfNiyocMvaUtgE=CJPUTUiA@mail.gmail.com>
References: <CABT1wWkOukEzxK5fLbnA4ZgJGN1hb_DMteCJOfA13FE_QZCi=Q@mail.gmail.com>
	<20131105170541.GA13660@petertodd.org>
	<20131105171445.GA13710@petertodd.org>
	<CABT1wW=XgDfxfxMxyjcNhtNTzXkGLtgSLz3JJcUAq9ywgpymyg@mail.gmail.com>
	<CANEZrP0itd3xW7yyg9FBJVuJNttcmMhnqWGOaWxjz37ATrR8qA@mail.gmail.com>
	<CADre0dm0PGARSXXdwoa1ZOnpbEw_bx0aKP17q4PSFLTayyoRJw@mail.gmail.com>
	<CAJHLa0MO9Q7D_9xmXPYKrebC7sMLoZtJ4epFSk36e8mMNMSKGg@mail.gmail.com>
	<CADre0dm_j68pN9Ov45kd47Y2DLnnfNiyocMvaUtgE=CJPUTUiA@mail.gmail.com>
Message-ID: <CAJHLa0PYKACnh27TRC4Yp6uSA0iKEAp+pYt6K_xWJfn2CxzGAw@mail.gmail.com>

On Tue, Nov 5, 2013 at 1:55 PM, Alessandro Parisi <startithub at gmail.com> wrote:
> this means that anytime a bug is found in Bitcoin protocol, chances are that
> it would take a lot more time to get fixed

Correct.  There is significant potential that a fix can create other
problems...   and any major mistake could instantly destroy > $2
billion worth of value.

-- 
Jeff Garzik
Senior Software Engineer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From jameson.lopp at gmail.com  Tue Nov  5 19:33:14 2013
From: jameson.lopp at gmail.com (Jameson Lopp)
Date: Tue, 05 Nov 2013 14:33:14 -0500
Subject: [Bitcoin-development] BIP proposal - patch to raise selfish
 mining threshold.
In-Reply-To: <CAJHLa0PYKACnh27TRC4Yp6uSA0iKEAp+pYt6K_xWJfn2CxzGAw@mail.gmail.com>
References: <CABT1wWkOukEzxK5fLbnA4ZgJGN1hb_DMteCJOfA13FE_QZCi=Q@mail.gmail.com>	<20131105170541.GA13660@petertodd.org>	<20131105171445.GA13710@petertodd.org>	<CABT1wW=XgDfxfxMxyjcNhtNTzXkGLtgSLz3JJcUAq9ywgpymyg@mail.gmail.com>	<CANEZrP0itd3xW7yyg9FBJVuJNttcmMhnqWGOaWxjz37ATrR8qA@mail.gmail.com>	<CADre0dm0PGARSXXdwoa1ZOnpbEw_bx0aKP17q4PSFLTayyoRJw@mail.gmail.com>	<CAJHLa0MO9Q7D_9xmXPYKrebC7sMLoZtJ4epFSk36e8mMNMSKGg@mail.gmail.com>	<CADre0dm_j68pN9Ov45kd47Y2DLnnfNiyocMvaUtgE=CJPUTUiA@mail.gmail.com>
	<CAJHLa0PYKACnh27TRC4Yp6uSA0iKEAp+pYt6K_xWJfn2CxzGAw@mail.gmail.com>
Message-ID: <527947FA.8070508@gmail.com>

The conversations that spawned from this paper have been fascinating to 
read, but I have a problem with the conclusions. To quote the paper:

"The Bitcoin ecosystem is open to manipulation, and potential takeover, 
by miners seeking to maximize their rewards. This paper presented 
Selfish-Mine, a mining strategy that enables pools of colluding miners
that adopt it to earn revenues in excess of their mining power. Higher 
revenues can lead new rational miners to join selsh miner pools, 
leading to a collapse of the decentralized currency."

Please explain to me why any rational miner would collude to earn 
slightly higher short term profits at the expense of then wiping out the 
value of all their bitcoins in the long term.

Also, if you felt that this vulnerability is an immediate danger to the 
Bitcoin network, why publish the vulnerability publicly rather than 
first disclosing it privately to the core developers? Apologies if you 
did disclose it privately in the past; I've seen no mention of it.
--
Jameson Lopp
Software Engineer
Bronto Software

On 11/05/2013 01:58 PM, Jeff Garzik wrote:
> On Tue, Nov 5, 2013 at 1:55 PM, Alessandro Parisi <startithub at gmail.com> wrote:
>> this means that anytime a bug is found in Bitcoin protocol, chances are that
>> it would take a lot more time to get fixed
>
> Correct.  There is significant potential that a fix can create other
> problems...   and any major mistake could instantly destroy > $2
> billion worth of value.
>



From pete at petertodd.org  Tue Nov  5 19:56:16 2013
From: pete at petertodd.org (Peter Todd)
Date: Tue, 5 Nov 2013 14:56:16 -0500
Subject: [Bitcoin-development] BIP proposal - patch to raise selfish
 mining threshold.
In-Reply-To: <CABT1wW=XgDfxfxMxyjcNhtNTzXkGLtgSLz3JJcUAq9ywgpymyg@mail.gmail.com>
References: <CABT1wWkOukEzxK5fLbnA4ZgJGN1hb_DMteCJOfA13FE_QZCi=Q@mail.gmail.com>
	<20131105170541.GA13660@petertodd.org>
	<20131105171445.GA13710@petertodd.org>
	<CABT1wW=XgDfxfxMxyjcNhtNTzXkGLtgSLz3JJcUAq9ywgpymyg@mail.gmail.com>
Message-ID: <20131105195616.GA14382@petertodd.org>

On Tue, Nov 05, 2013 at 12:43:15PM -0500, Ittay wrote:
> On Tue, Nov 5, 2013 at 12:14 PM, Peter Todd <pete at petertodd.org> wrote:
> 
> > On Tue, Nov 05, 2013 at 12:05:41PM -0500, Peter Todd wrote:
> > > On Tue, Nov 05, 2013 at 11:56:53AM -0500, Ittay wrote:
> >
> > Oh, and I don't want to give the wrong impression: there's no need to
> > rush to get this problem fixed. Even if someone wanted to launch an
> > attack right now, with a fair amount of resources, there's a lot of
> > counter-measures based on human intervention that can definitely stop
> > the attack in the short-term
> 
> 
> The attack can be easily hidden. And be sure that before today, today,
> and after today, very smart people are at their computer planning attacks
> on Bitcoin. Exploits must be published and fixed FAST.

Not this exploit.

Here's a perfectly plausible worst-case scenario, that could be
happening right now: RAND High Frequency Trading Corp (a subsidiary of
General Evil) has a globe-spanning low-latency network of fiber,
line-of-sight microwave, and some experimental line-of-site neutrino
links criss-crossing the globe. They can get data to and from any point
on this planet faster than anyone else. Of course, in addition to their
spectacular network they have an immense amount of computing power, as
well as exotic overclocked liquid nitrogen bathed CPU's that run at
clockspeeds double what commercial hardware can do; in short, they have
access to scalar performance no-one else has. Of course, they like to
keep a healthy reserve so, 99% of all this fancy gear is constantly
idle. Whatever, they can afford it.

RAND just hired a bunch of fresh MIT graduates, the best of the best.
Problem is the best of the best tends to make not so best mistakes, so
RAND figures a Training Exercise is in order. Fortunately for them the NSA (a
subsidiary of General Evil) slipped a rootkit into my keyboard a week or
so ago - probably that time when I woke up in that farmers field with a
*splitting* headache - and are reading what I'm typing right now.

I go on to explain how an excellent training exercise for these fresh
MIT graduates would be to implement this nifty attack some Cornell
researchers came up with. It's really simple, elegant even, but to do it
best what you really want is the kind of low-latency network a
high-frequency-trading corporation would have. I then point out how a
good training exercise ideally is done in a scenario where there is
genuine risk and reward, but where the worst-case consequences are
manageable - new hires to tend to screw up. (I then go on to explain my
analog electronics background, and squeeze in some forced anecdote about
how I blew up something worth a lot of money owned by my employers at
some point in the distant past)

Unfortunately for the operators of BTC Guild, one of these new MIT grads
happens to have a: passed General Evil's psych screening with flying
colors, and b: have spent too much time around the MIT Kidnappng Club.
He decides it'd be easier to just kidnap the guy running BTC Guild than
fill out the paperwork to borrow RAND's FPGA cluster, so he does.

As expected the attack runs smoothly: with 30% of the hashing power,
neutrino burst generator/encoders's rigged around the globe to fire the
moment another pool gets a block, and the odd DoS attack for fun, they
quickly make a mockery of the Bitcoin network, reducing every other
miners profitability to zero in minutes. The other miners don't have a
hope: they're blocks have to travel the long way, along the surface of
the earth, while RAND's blocks shave off important milliseconds by
taking the direct route.


Of course, this doesn't go unnoticed, er, eventualy: 12 hours later the
operators of GHash.IO, Eligius, slush, Bitminter, Eclipse and ASICMiner
open their groggy eyes and mutter something about how that simulcast
Tuesday party really shouldn't have had an open bar... or so much coke.

They don't even notice that the team from BTC Guild has vanished, but
they do notice a YouTube video of Gavin right on bitcoin.org doing his
best Spock impression, er, I mean appealing for calm and promising that
Top Men are working on the issue of empty blocks as we speak. Meanwhile
CNN's top headline reads "IS THIS THE END OF BITCOIN?!?!"

It takes another hour for the Aspirin's to finally kick in, but
eventually get all get on IRC and start trying to resolve the issue -
seems that whenever any of them produce a block, somehow by incredible
coincidence someone else finds another block first. After a few rounds
of this they're getting suspicious. (if they weren't all so hung-over
they might have also found suspicious the fact that whenever they found
a block they saw a sudden blue flash - Cherenkov radiation emitted when
those neutrino's interacted with the vitreous humour in their eyeballs)

It's quickly realized that "somehow" BTC Guild isn't affected...
GHash.IO and Eligius, 22% and 13% of the hashing power respectively,
decide to try a little experiment: they peer to each other and only each
other through an encrypted tunnel and... hey, no more lucky blocks!
slush, 7% of the hashing power is invited to the peering group next,
followed by Bitminter, 6%, and Eclipse, 2%, and finally ASICMiner, 1%,
for a grand total of... 51% of the hashing power!

Of course, just creating blocks isn't useful for users, they need to be
distributed too, so someone quickly writes up a "one-way firewall" patch
that allows the group's blocks to propagate to the rest of the network.
Blocks created by anyone else are ignored.

It takes a few more hours, but eventually the attacker seems to run out
of blocks, and transaction processing returns to normal, albeit a little
slow. (20 min block average) Of course, soon there's a 3,000 post thread
on bitcointalk complaining about the "centralized pool cartel", but
somehow life goes on.

The next day Gavin goes on CNN, and gives a lovely interview about how
the past two days events show how the strength of the Bitcoin network is
in the community. For balance they interview this annoying "Peter Todd"
guy from "Keep Bitcoin Free!" who blathers on about how relying on
altruism or something will doom the Bitcoin network in the long run.
After the interview Gavin respectfully points out that maybe next time
they find a so called "developer" with a ratio of bitcointalk posts to
actual lines of code in the Bitcoin git repository better than one
hundred to one. The producer just wishes that "Mike Hearn" guy was
available; at least he's got a sense of fashion, sheesh!


Anyway, I'm out of space for my little story, but yeah, the ending
involves a group of now-rich pool operators who decide to start a large
financial services and data networking company, oh, and time-travel...


> Nevertheless, I agree  that, as you say, we must not rush it. Look at the
> BIP, find if we missed anything, and let's discuss it.

Indeed.

Quite seriously, your attack is a serious long-term risk, but in the
short term the social dynamics of Bitcoin are such that it's just not a
show-stopping risk. At worst some miners will lose a bunch of money -
that's something that's happened before with the March chain fork, and
sure enough Bitcoin survived just fine.

> > In addition, keep in mind
> > that this attack is very easy to detect, so if one is actually launched
> > we will know immediately and can start taking direct counter-measures at
> > that time.
> >
> 
> Not really. Please see the discussion section in our paper.

You can hide *who* is the attacker - you can't hide the fact that an
attack is happening if done on a meaningful scale.

> > That Gregory Maxwell so quickly identified a flaw in this proposed
> > solution suggests we should proceed carefully.
> >
> 
> There is no flaw. You were just reiterating that the solution does not give
> us the 51% percent security you thought you had before. We showed that
> we're not getting this back, I'm afraid.

That's not what we're concerned about - what we're concerned about is
that your BIP doesn't discuss the issue, and you didn't seem to be aware
of it. That suggests that the analysis is incomplete. There's no
pressing need to rush changes, as explained above by example, so we're
best off understanding the issue thoroughly first.

There's a whole spectrum of potential solutions that haven't been
discussed - I myself have two approaches I'm working on that may solve
this problem in ways you haven't (publicly) considered. I'm sure there
are many others out there.

-- 
'peter'[:-1]@petertodd.org
00000000000000005144f6a7109b9f8543880a0a5f85a054ec53966bc2daa24c
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 490 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131105/2ca9c7a6/attachment.sig>

From colj at Safe-mail.net  Tue Nov  5 20:51:24 2013
From: colj at Safe-mail.net (colj at Safe-mail.net)
Date: Tue, 5 Nov 2013 15:51:24 -0500
Subject: [Bitcoin-development] Possible Solution To SM Attack
Message-ID: <N1-9eAtMHauq2@Safe-mail.net>

Preliminary:
Alice has the ability to hear of a block before all other miners do.

The Problem:
Say Alice built a block, A1, from previous block 0. She doesn't let other miners know about it. She then works on A2 with previous block A1. Bob on the other hand is still working on B1 with previous block 0. Bob now finds a block and he broadcasts it. The assumption here is Alice will be the first miner to hear of this block and she will send her previously mined block, A1, to all other miners. By the time Bobs block arrives to other miners majority of them will already have received Block A1 and Bobs block will most likely be orphaned. Alice revealed her block, A1, only when Bob broadcast his block. This means she has been mining on block A2 with previous block A1 for longer than any other miner thus gaining an advantage without increasing her hash rate.

What We Know:
Alice has gained an advantage with time. She mines longer on the valid block.
In order for this attack to work Alice must reveal her previously mined block as late as possible, gaining her the most time spent working on the valid block. Since she has such good view of the Bitcoin network she can wait until a miner finds a block to release her previously mined block.

The most obvious sign of this attack taking place is the timing. A miner will receive a block and very quickly hear of another block both built from the same previous block. 

The block that a miner hears first is the one which will be mined on.

Possible Solution:
If N amount of blocks built of the same previous block are received within a time frame of T mine on the block with the lowest hash.

Logic:
In order for Alice to pull of this attack she not only has to propagate her blocks first she must also ensure her blocks are of the smallest hash.

Alice would now have to decrease her target to pull of this attack. Since she has a lower target it will take her longer to find a valid block negating her time advantage.


colj



From btcdev at quinnharris.me  Tue Nov  5 22:07:16 2013
From: btcdev at quinnharris.me (Quinn Harris)
Date: Tue, 05 Nov 2013 19:07:16 -0300
Subject: [Bitcoin-development] Possible Solution To SM Attack
In-Reply-To: <N1-9eAtMHauq2@Safe-mail.net>
References: <N1-9eAtMHauq2@Safe-mail.net>
Message-ID: <52796C14.5070300@quinnharris.me>

I don't think choosing the block with the lowest hash is the best 
option.  The good and bad miners have an equal probability of finding a 
lower hash.  But after Alice finds a block she can easily determine the 
probability that someone else will find a lower hash value that meets 
the difficulty requirement.  This can be used to judge if its best to 
start working on the next block or work on finding a lower value hash to 
increase the chance her block is used.

Its better if the block is chosen in a way that doesn't let Alice know 
the probability her block will be chosen.  One simple possibility is to 
start at the least significant bit of the hash and whichever has a 1 is 
chosen and if both bits are the same the next bit is used.

This should be pseudo random and not give Alice any knowledge ahead of 
time if her block will be chosen.  This would prevent the network hash 
power from being split between two branches unlike each node choosing a 
random block.

Quinn

On 11/05/2013 05:51 PM, colj at Safe-mail.net wrote:
> Preliminary:
> Alice has the ability to hear of a block before all other miners do.
>
> The Problem:
> Say Alice built a block, A1, from previous block 0. She doesn't let other miners know about it. She then works on A2 with previous block A1. Bob on the other hand is still working on B1 with previous block 0. Bob now finds a block and he broadcasts it. The assumption here is Alice will be the first miner to hear of this block and she will send her previously mined block, A1, to all other miners. By the time Bobs block arrives to other miners majority of them will already have received Block A1 and Bobs block will most likely be orphaned. Alice revealed her block, A1, only when Bob broadcast his block. This means she has been mining on block A2 with previous block A1 for longer than any other miner thus gaining an advantage without increasing her hash rate.
>
> What We Know:
> Alice has gained an advantage with time. She mines longer on the valid block.
> In order for this attack to work Alice must reveal her previously mined block as late as possible, gaining her the most time spent working on the valid block. Since she has such good view of the Bitcoin network she can wait until a miner finds a block to release her previously mined block.
>
> The most obvious sign of this attack taking place is the timing. A miner will receive a block and very quickly hear of another block both built from the same previous block.
>
> The block that a miner hears first is the one which will be mined on.
>
> Possible Solution:
> If N amount of blocks built of the same previous block are received within a time frame of T mine on the block with the lowest hash.
>
> Logic:
> In order for Alice to pull of this attack she not only has to propagate her blocks first she must also ensure her blocks are of the smallest hash.
>
> Alice would now have to decrease her target to pull of this attack. Since she has a lower target it will take her longer to find a valid block negating her time advantage.
>
>
> colj
>
> ------------------------------------------------------------------------------
> November Webinars for C, C++, Fortran Developers
> Accelerate application performance with scalable programming models. Explore
> techniques for threading, error checking, porting, and tuning. Get the most
> from the latest Intel processors and coprocessors. See abstracts and register
> http://pubads.g.doubleclick.net/gampad/clk?id=60136231&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development




From drak at zikula.org  Tue Nov  5 22:15:27 2013
From: drak at zikula.org (Drak)
Date: Tue, 5 Nov 2013 22:15:27 +0000
Subject: [Bitcoin-development] Possible Solution To SM Attack
In-Reply-To: <N1-9eAtMHauq2@Safe-mail.net>
References: <N1-9eAtMHauq2@Safe-mail.net>
Message-ID: <CANAnSg2sUfRH0mYEir_XKUz-iOYRpdzNgM-AJ7t-H=SOa4wBig@mail.gmail.com>

On 5 November 2013 20:51, <colj at safe-mail.net> wrote:

> Possible Solution:
> If N amount of blocks built of the same previous block are received within
> a time frame of T mine on the block with the lowest hash.
>
> Logic:
> In order for Alice to pull of this attack she not only has to propagate
> her blocks first she must also ensure her blocks are of the smallest hash.
>
> Alice would now have to decrease her target to pull of this attack. Since
> she has a lower target it will take her longer to find a valid block
> negating her time advantage.


If I understand the issue properly, this seems like a pretty elegant
solution: if two blocks are broadcast within a certain period of eachother,
chose the lower target. That's a provable fair way of randomly choosing the
winning block and would seem like a pretty simply patch.

Drak
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131105/378a96dc/attachment.html>

From ittay.eyal at cornell.edu  Tue Nov  5 22:49:26 2013
From: ittay.eyal at cornell.edu (Ittay)
Date: Tue, 5 Nov 2013 17:49:26 -0500
Subject: [Bitcoin-development] BIP proposal - patch to raise selfish
 mining threshold.
In-Reply-To: <op.w53ax8dtyldrnw@laptop-air>
References: <CABT1wWkOukEzxK5fLbnA4ZgJGN1hb_DMteCJOfA13FE_QZCi=Q@mail.gmail.com>
	<20131105170541.GA13660@petertodd.org>
	<CABT1wWnPJOKKT5v2hGePkUT8jNau=TEK5s-n2so2kQKnv-HfqQ@mail.gmail.com>
	<op.w53ax8dtyldrnw@laptop-air>
Message-ID: <CABT1wW=cKEA+TU5+n1n0cqvqwx8oWgpUXRmGJQCNLfQehxs6bQ@mail.gmail.com>

On Tue, Nov 5, 2013 at 1:57 PM, Jeremy Spilman <jeremy at taplink.co> wrote:


> I think it's a stretch to say 'y' is 0 with good connectivity. Even the
> best connected mining pools today are concerned with this 'y' factor.
>

Check out the following paper for the effect a single node can have on
propagation, and on the relation between block size and propagation speed.
This strongly supports our assumption.
http://www.tik.ee.ethz.ch/file/49318d3f56c1d525aabf7fda78b23fc0/P2P2013_041.pdf


>
> Here's a probably very dumb idea... to throw out one possible "solution"...
>
> You want a way to fake-out the 'selfish miner' into disclosing their
> blocks -- how can your force their hand to prevent them from accumulating
> longer private chains?
>
> What if you propagate (and relay) an encrypted block header which honest
> miners will timestamp when they receive it, then 10 seconds later propagate
> the decryption key to unblind it. But here's the catch - maybe the
> decryption results in junk, maybe it results a new longer block. If it's a
> real block then it gets priority based on when the ciphertext was received
> instead of when the decryption key was received. Now 'selfish miner' can't
> race the network anymore, because they are always in state 0' and can't
> tell if they are up against a ghost, or a real competing block. If they
> wait for the decryption key to check, it's too late, and they are
> guaranteed to lose unless they can out-race the network, e.g. back at
> t=50%. Of course there would need to be some way to anti-DDoS this which
> allows for some amount of these fake-outs without letting them get out of
> hand.
>

That's a dangerous way to go, opening the door to DoS attacks, as you
mention. Besides, it makes a simple algorithm complicated, and doing such
changes may lead to different vulnerabilities that are difficult to cover.

Best,
Ittay
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131105/96e0df01/attachment.html>

From drak at zikula.org  Tue Nov  5 23:03:13 2013
From: drak at zikula.org (Drak)
Date: Tue, 5 Nov 2013 23:03:13 +0000
Subject: [Bitcoin-development] Possible Solution To SM Attack
In-Reply-To: <52796C14.5070300@quinnharris.me>
References: <N1-9eAtMHauq2@Safe-mail.net> <52796C14.5070300@quinnharris.me>
Message-ID: <CANAnSg19N6Ri9vVkKqP2VB14KgLN6=whAbtzV9EBcLUfDs_dJQ@mail.gmail.com>

On 5 November 2013 22:07, Quinn Harris <btcdev at quinnharris.me> wrote:

> I don't think choosing the block with the lowest hash is the best
> option.  The good and bad miners have an equal probability of finding a
> lower hash.  But after Alice finds a block she can easily determine the
> probability that someone else will find a lower hash value that meets
> the difficulty requirement.  This can be used to judge if its best to
> start working on the next block or work on finding a lower value hash to
> increase the chance her block is used.


Well in that case, you could make it unpredictable by choosing based on a
hash of the blockhash and chose the lowest from two. There is no way for
Alice to know if Bob's resulting hash will be higher or lower than hers
since she does not know Bob's blockhash in advance and therefore she would
be better broadcasting her block immediately.

You could even add another unpredictable factor: deciding the rules of
whether higher or lower wins by hashing both competing blockhashes. If the
leading two hex digits are below 128 lower wins, and if above, higher wins.

Drak
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131105/f54e78ea/attachment.html>

From gmaxwell at gmail.com  Tue Nov  5 23:06:52 2013
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Tue, 5 Nov 2013 15:06:52 -0800
Subject: [Bitcoin-development] Possible Solution To SM Attack
In-Reply-To: <CANAnSg2sUfRH0mYEir_XKUz-iOYRpdzNgM-AJ7t-H=SOa4wBig@mail.gmail.com>
References: <N1-9eAtMHauq2@Safe-mail.net>
	<CANAnSg2sUfRH0mYEir_XKUz-iOYRpdzNgM-AJ7t-H=SOa4wBig@mail.gmail.com>
Message-ID: <CAAS2fgTofL7ura17KjUR5pL_fOOM=a0gdZTZ7seVMRPOPi66xw@mail.gmail.com>

On Tue, Nov 5, 2013 at 2:15 PM, Drak <drak at zikula.org> wrote:
> If I understand the issue properly, this seems like a pretty elegant
> solution: if two blocks are broadcast within a certain period of eachother,
> chose the lower target. That's a provable fair way of randomly choosing the
> winning block and would seem like a pretty simply patch.

uh. and so when my solution is, by chance, unusually low... I am
incentivized to hurry up and release my block because?

I've simulated non-first-block-heard strategies in the past (in the
two nearly tied miner with network latency model) and they result in
significant increase in large (e.g. >>6 block) reorgs). It's easy to
make convergence worse or to create additional perverse incentives.



From drak at zikula.org  Tue Nov  5 23:44:15 2013
From: drak at zikula.org (Drak)
Date: Tue, 5 Nov 2013 23:44:15 +0000
Subject: [Bitcoin-development] Possible Solution To SM Attack
In-Reply-To: <CAAS2fgTofL7ura17KjUR5pL_fOOM=a0gdZTZ7seVMRPOPi66xw@mail.gmail.com>
References: <N1-9eAtMHauq2@Safe-mail.net>
	<CANAnSg2sUfRH0mYEir_XKUz-iOYRpdzNgM-AJ7t-H=SOa4wBig@mail.gmail.com>
	<CAAS2fgTofL7ura17KjUR5pL_fOOM=a0gdZTZ7seVMRPOPi66xw@mail.gmail.com>
Message-ID: <CANAnSg1vrUZPuioZ7LQcSK4MeiWWWQ2nggnDYp5VP4WdhtErhQ@mail.gmail.com>

On 5 November 2013 23:06, Gregory Maxwell <gmaxwell at gmail.com> wrote:

> On Tue, Nov 5, 2013 at 2:15 PM, Drak <drak at zikula.org> wrote:
> > If I understand the issue properly, this seems like a pretty elegant
> > solution: if two blocks are broadcast within a certain period of
> eachother,
> > chose the lower target. That's a provable fair way of randomly choosing
> the
> > winning block and would seem like a pretty simply patch.
>
> uh. and so when my solution is, by chance, unusually low... I am
> incentivized to hurry up and release my block because?


Yes, I saw the flaw as pointed out by Quinn so I then suggested two step
solution:

1. Decide high or low by taking a the leading bytes from
hash(alice)+hash(bob): above certain number we the rule is "higher wins",
below a certain number the "lower hash wins"
2. Chose winner based on the higher or lower of hash(alice) or hash(bob)
based on the rule coming from 1

Now you have a situation where you don't know the rules of the game in
advance (whether high or low wins) until the hands are already dealt nor
have any idea about how high or low Bob's hash will be since it's not based
on target anymore, but on a hash of the blockhash so it makes it a guessing
game.

You might have an unusually high or low hash, but then you have no idea
whether higher or lower is going to win. So it is better for Alice to just
broadcast the block.

What do you think?

Drak
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131105/8fa2d7da/attachment.html>

From gavinandresen at gmail.com  Wed Nov  6 00:00:04 2013
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Wed, 6 Nov 2013 10:00:04 +1000
Subject: [Bitcoin-development] Possible Solution To SM Attack
In-Reply-To: <CANAnSg1vrUZPuioZ7LQcSK4MeiWWWQ2nggnDYp5VP4WdhtErhQ@mail.gmail.com>
References: <N1-9eAtMHauq2@Safe-mail.net>
	<CANAnSg2sUfRH0mYEir_XKUz-iOYRpdzNgM-AJ7t-H=SOa4wBig@mail.gmail.com>
	<CAAS2fgTofL7ura17KjUR5pL_fOOM=a0gdZTZ7seVMRPOPi66xw@mail.gmail.com>
	<CANAnSg1vrUZPuioZ7LQcSK4MeiWWWQ2nggnDYp5VP4WdhtErhQ@mail.gmail.com>
Message-ID: <CABsx9T3LxHy=mqoZQyK+G33ikpbnLyRemBGYn3T22H4dERm4yQ@mail.gmail.com>

> What do you think?
>

I would like to be convinced that there is, actually, a real-world problem
before thinking about potential solutions.

I'd like to see more analysis of the proposed selfish-mining algorithm at a
particular share-of-network and gamma=0 (assume second-broadcast blocks
always lose, to make the math easier). I can't reproduce the finding in the
paper if I take into account the "opportunity cost" of working on more
blocks in the private chain that might be orphaned instead of always simply
extending the public chain, but it is very possible my little brain is
missing something obvious.

-- 
--
Gavin Andresen
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131106/61f2057c/attachment.html>

From btcdev at quinnharris.me  Wed Nov  6 00:26:59 2013
From: btcdev at quinnharris.me (Quinn Harris)
Date: Tue, 05 Nov 2013 21:26:59 -0300
Subject: [Bitcoin-development] Possible Solution To SM Attack
In-Reply-To: <CANAnSg19N6Ri9vVkKqP2VB14KgLN6=whAbtzV9EBcLUfDs_dJQ@mail.gmail.com>
References: <N1-9eAtMHauq2@Safe-mail.net> <52796C14.5070300@quinnharris.me>
	<CANAnSg19N6Ri9vVkKqP2VB14KgLN6=whAbtzV9EBcLUfDs_dJQ@mail.gmail.com>
Message-ID: <52798CD3.3060806@quinnharris.me>

On 11/05/2013 08:03 PM, Drak wrote:
> On 5 November 2013 22:07, Quinn Harris <btcdev at quinnharris.me 
> <mailto:btcdev at quinnharris.me>> wrote:
>
>     I don't think choosing the block with the lowest hash is the best
>     option.  The good and bad miners have an equal probability of
>     finding a
>     lower hash.  But after Alice finds a block she can easily
>     determine the
>     probability that someone else will find a lower hash value that meets
>     the difficulty requirement.  This can be used to judge if its best to
>     start working on the next block or work on finding a lower value
>     hash to
>     increase the chance her block is used.
>
>
> Well in that case, you could make it unpredictable by choosing based 
> on a hash of the blockhash and chose the lowest from two. There is no 
> way for Alice to know if Bob's resulting hash will be higher or lower 
> than hers since she does not know Bob's blockhash in advance and 
> therefore she would be better broadcasting her block immediately.
>
I don't think that will work but the bit test I suggested won't work either.

Alice can calculate the hash of her blockhash and if the block to mine 
is chosen based on the lowest result she will know the probability Bobs 
block will be used.  This complexity doesn't change anything.  If hers 
is more than 50% likely to be used she should mine the next block 
otherwise its best to work to find a better current block.

But if the block determination takes into account the current difficulty 
we can prevent Alice from knowing if Bobs or any block she mines is more 
likely to win.

Assuming
a = hash of block A
b = hash of block B
difficulty = current difficulty such that A < difficulty and b < difficulty

The following code could be used to determine if the higher or lower 
block should be chosen

uint256 choose_block(uint256 a, uint256 b, uint256 difficulty)
{
   bool choice = false; // false for lower hash, true for greater hash
   uint256 am = (a + d/4) % difficulty;
   uint256 bm = (b + d/4) % difficulty
   if (a + d/4 >= d)
     choice = b > a || b < am || bm > a || bm < am;
   else
     choice = (b > a && b < am) || (bm > a && bm < am);
   return choice ? (a > b ? a : b) : (a > b ? b : a);
}

The basic idea is to find a range over 0 to difficulty starting at A and 
B that is 1/4 of the range of the difficulty.  If the two ranges overlap 
which should be 1/2 of the time pick the greater hash is used otherwise 
the lower hash.

There is likely a cleaner solution but this demonstrates the basic idea.

You could use the hash of the blockhash and just set the difficulty to 
the maximum hash value which would really just end up removing all the 
modulus stuff and make the code simpler.  But that code requires much 
less computation that any cryptographic hash.

I think this is preferable to each node randomly picking a block to mine 
on as the paper suggests.  This should be completely unpredictable but 
deterministic so all the miners should end up working on the same block.

> You could even add another unpredictable factor: deciding the rules of 
> whether higher or lower wins by hashing both competing blockhashes. If 
> the leading two hex digits are below 128 lower wins, and if above, 
> higher wins.
>
> Drak
>
>
> ------------------------------------------------------------------------------
> November Webinars for C, C++, Fortran Developers
> Accelerate application performance with scalable programming models. Explore
> techniques for threading, error checking, porting, and tuning. Get the most
> from the latest Intel processors and coprocessors. See abstracts and register
> http://pubads.g.doubleclick.net/gampad/clk?id=60136231&iu=/4140/ostg.clktrk
>
>
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131105/2c797822/attachment.html>

From rob.golding at astutium.com  Wed Nov  6 00:37:49 2013
From: rob.golding at astutium.com (rob.golding at astutium.com)
Date: Wed, 06 Nov 2013 00:37:49 +0000
Subject: [Bitcoin-development] Possible Solution To SM Attack
In-Reply-To: <N1-9eAtMHauq2@Safe-mail.net>
References: <N1-9eAtMHauq2@Safe-mail.net>
Message-ID: <d6579e23aae6c3d56d108e24242dad09@astutium.com>

> The Problem:
> Say Alice built a block, A1, from previous block 0. She doesn't let
> other miners know about it. She then works on A2 with previous block
> A1. Bob on the other hand is still working on B1 with previous block
> 0. Bob now finds a block and he broadcasts it. The assumption here is
> Alice will be the first miner to hear of this block and she will send
> her previously mined block, A1, to all other miners. By the time Bobs
> block arrives to other miners majority of them will already have
> received Block A1 and Bobs block will most likely be orphaned. Alice
> revealed her block, A1, only when Bob broadcast his block. This means
> she has been mining on block A2 with previous block A1 for longer than
> any other miner thus gaining an advantage without increasing her hash
> rate.

Unless A1 gets orphaned and B1 gets accepted, in which case all the work 
done on A2 is 'wasted'.

The question is whether there is any 'real' advantage over time for A 
over B.

> What We Know:
> Alice has gained an advantage with time. She mines longer on the valid 
> block.

She mines longer on *a* block which *may* become the valid block, yes.

> In order for this attack to work Alice must reveal her previously
> mined block as late as possible, gaining her the most time spent
> working on the valid block. Since she has such good view of the
> Bitcoin network she can wait until a miner finds a block to release
> her previously mined block.

Then the simple 'fix' would be for the block-acceptance to take into 
account either the total transactions or the total fees, and for the the 
'accepted' block for mining the next block to be the one with the lowest 
hash of one of those values if 2 are released to the network at the same 
time

That is of of course assuming there is really a problem to fix, 
currently I'm not convinced.

Rob



From melvincarvalho at gmail.com  Wed Nov  6 03:01:48 2013
From: melvincarvalho at gmail.com (Melvin Carvalho)
Date: Wed, 6 Nov 2013 04:01:48 +0100
Subject: [Bitcoin-development] Message Signing based authentication
In-Reply-To: <CAJna-HgUT2u+nhdz3e8mT99R+TR6o1FFQ4c8KBz_vpc_oSOzSQ@mail.gmail.com>
References: <20131102050144.5850@gmx.com>
	<CAJna-HgUT2u+nhdz3e8mT99R+TR6o1FFQ4c8KBz_vpc_oSOzSQ@mail.gmail.com>
Message-ID: <CAKaEYh+bAVcK0tUrE75HvSf0PJ5Ps1j_yUheBeOM5Q1EHADdCw@mail.gmail.com>

On 2 November 2013 22:57, slush <slush at centrum.cz> wrote:

> Glad to see that there are more and more people wanting to replace
> passwords with digital signatures.
>
> Although such method has been already used on other websites like Eligius
> or bitcoin-otc, I dont think theres any standard way to doing so yet.
>
> Two comments to your proposal:
>
> A) message-to-be-signed need to be carefully composed to be both
> structured and human readable. It should contain at least:
> Desired username/identity handler
> Server identifier (url)
> Timestamp to prevent replay attack
> Server challenge
>
> Then the user can see what he's signing, instead of signing some binary
> blob which can contain some evil data.
>
> B)
> Same structured data should be a part of html page in some header tag,
> ideally signed by server certificate to confirm that the request is valid.
> Then the login request can be processed by machine automatically, without a
> need of copy&paste by a user.
>
But where are the private keys stored?  Crypto in the browser with help,
but although they will expose ECC via the NSS, I dont think bitcoin's
particular curve will be supported, because it's not NIST approved.  If the
use case was presented though, they may add it.

This can actually be done today using client side certificates.  Two
methods.

Method 1:

In your client side certificate, put in your bitcoin address in the
subjectAlternativeName field.  This is a field that lets you tell the
server "I have another identity"

>From the bitcoin address look up via a ".well-known" key server some items
previously uploaded.  This would normally be a signed value of the key
used, or a signed value of the the certificate.  The server checks this and
logs you in.

Method 2:

In your client side certificate, put in an HTTP address.  That HTTP address
contains your bitcoin address and a signed copy of your cert public key or
the cert itself.

The advantage here is that you dont need a key server.


Both methods work, I've been doing this kind of thing for 5 years+, and I'd
never go back to passwords on anything I build.

I'm all for recreating this UI in javascript too, but I just wonder how to
protect the private keys ...


> Slush
>
>
> On Sat, Nov 2, 2013 at 6:01 AM, <bitcoingrant at gmx.com> wrote:
>
>> Passwords are inefficient by design: frequently we hear news from Sony,
>> Square Enix, Adobe, and various others about passwords being compromised,
>> databases being copied and stolen. This story remains true in the Bitcoin
>> space. In light of the recent Bitcointalk forum breach echoes an increasing
>> need for passwords to become a thing of the past.
>>
>>
>>
>> In celebration of the 5 year anniversary of the Bitcoin whitepaper, we
>> are delighted to introduce the Message Signing based authentication method.
>>
>>
>>
>> In brief, the authentication work as follows:
>>
>>
>>
>> Server provides a token for the client to sign.
>>
>> client passes the signed message and the bitcoin address back to the
>> server.
>>
>> server validates the message and honors the alias (optional) and bitcoin
>> address as identification.
>>
>>
>>
>> http://forums.bitcoingrant.org/
>>
>>
>>
>> Above is a proof of concept forum that utilize this authentication
>> method. Following Kerckhoffs's principle, this forum only stores the signed
>> message and bitcoin address the users provide the first time they use the
>> site, both are public information. In addition, there is no database,
>> everything is simply an RSS feed. For the sake of usability we have
>> included a redis for the sessions, at the cost of additional exposure to
>> potential risks: users no longer need to sign a token every time they wish
>> to post.
>>
>>
>>
>> All source code will be available on github in the next few days.
>>
>>
>>
>> We welcome any feedback or suggestions.
>>
>>
>>
>>
>>
>> ------------------------------------------------------------------------------
>> Android is increasing in popularity, but the open development platform
>> that
>> developers love is also attractive to malware creators. Download this
>> white
>> paper to learn more about secure code signing practices that can help keep
>> Android apps secure.
>>
>> http://pubads.g.doubleclick.net/gampad/clk?id=65839951&iu=/4140/ostg.clktrk
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>
>>
>
>
> ------------------------------------------------------------------------------
> Android is increasing in popularity, but the open development platform that
> developers love is also attractive to malware creators. Download this white
> paper to learn more about secure code signing practices that can help keep
> Android apps secure.
> http://pubads.g.doubleclick.net/gampad/clk?id=65839951&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131106/ad6ee9ff/attachment.html>

From melvincarvalho at gmail.com  Wed Nov  6 03:38:59 2013
From: melvincarvalho at gmail.com (Melvin Carvalho)
Date: Wed, 6 Nov 2013 04:38:59 +0100
Subject: [Bitcoin-development] Message Signing based authentication
In-Reply-To: <52756B2E.7030505@corganlabs.com>
References: <20131102050144.5850@gmx.com>
	<52756B2E.7030505@corganlabs.com>
Message-ID: <CAKaEYhLn3+CwJ-vvuDQ9+A8H2g6cnn4HpRp++_fmsrcnj5EkzQ@mail.gmail.com>

On 2 November 2013 22:14, Johnathan Corgan <johnathan at corganlabs.com> wrote:

> On 11/01/2013 10:01 PM, bitcoingrant at gmx.com wrote:
>
> > Server provides a token for the client to sign.
>
> Anyone else concerned about signing an arbitrary string?  Could be a
> hash of $EVIL_DOCUMENT, no?  I'd want to XOR the string with my own
> randomly generated nonce, sign that, then pass the nonce and the
> signature back to the server for verification.
>

Good point.

There are actually times you may want to sign a transaction.

There's a little know HTTP code, 402, "Payment Required".  We should really
start using this at some point ...

http://en.wikipedia.org/wiki/List_of_HTTP_status_codes

Reserved for future use.[2] The original intention was that this code might
be used as part of some form of digital cash or micropayment scheme, but
that has not happened, and this code is not usually used. As an example of
its use, however, Apple's defunct MobileMe service generated a 402 error if
the MobileMe account was delinquent.[citation needed] In addition, YouTube
uses this status if a particular IP address has made excessive requests,
and requires the person to enter a CAPTCHA.


>
> --
> Johnathan Corgan, Corgan Labs
> SDR Training and Development Services
> http://corganlabs.com
>
>
> ------------------------------------------------------------------------------
> Android is increasing in popularity, but the open development platform that
> developers love is also attractive to malware creators. Download this white
> paper to learn more about secure code signing practices that can help keep
> Android apps secure.
> http://pubads.g.doubleclick.net/gampad/clk?id=65839951&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131106/0a43b210/attachment.html>

From bitcoin-devel at jerviss.org  Wed Nov  6 05:33:17 2013
From: bitcoin-devel at jerviss.org (kjj)
Date: Tue, 05 Nov 2013 23:33:17 -0600
Subject: [Bitcoin-development] we can all relax now
Message-ID: <5279D49D.5050807@jerviss.org>

One of the things that really gets me going is when someone devises a 
model, tests it against itself, and then pretends that they've learned 
something about the real world.

Naturally, the Selfish Mining paper is exactly this sort of nonsense.  
Their model is one with no latency, and one where the attacker has total 
visibility across the network.  An iterated FSM is not a suitable 
simulation of the bitcoin system.  The bitcoin network does not have 
states, and to the extent that you can pretend that we do, you can't 
simulate transitions between them with static probabilities.

The authors understand this deep down inside, even though they didn't 
work out the implications.  They handwave the issue by assuming a total 
sybil attack, and in true academic spirit, they don't realize that the 
condition necessary for the attack is far, far worse than the attack itself.

Greg said he'd like to run some simulations, and I'm thinking about it 
too.  Unfortunately, he is busy all week, and I'm lazy (and also busy 
for most of tomorrow).

If neither of us get to it first, I'm willing to pitch in 1 BTC as a 
bounty for building a general bitcoin network simulator framework. The 
simulator should be able to account for latency between nodes, and 
ideally within a node.  It needs to be able to simulate an attacker that 
owns varying fractions of the network, and make decisions based only on 
what the attacker actually knows.  It needs to be able to simulate this 
"attack" and should be generic enough to be easily modified for other 
crazy schemes.

(Bounty offer is serious, but expires in one year [based on the earliest 
timestamp that my mail server puts on this email], and /may/ be subject 
to change if the price on any reputable exchange breaks 1000 USD per BTC 
in that period.)

Basically, the lack of a decent network simulator is what allowed this 
paper to get press.  If the author had been able to see the importance 
of the stuff he was ignoring, we wouldn't be wasting so much time 
correcting him (and sadly the reporters that have no way to check his 
claims).

https://bitcointalk.org/index.php?topic=324413.msg3495663#msg3495663





From bitcoin-list at bluematt.me  Wed Nov  6 05:50:21 2013
From: bitcoin-list at bluematt.me (Matt Corallo)
Date: Wed, 06 Nov 2013 00:50:21 -0500
Subject: [Bitcoin-development] [ANN] High-speed Bitcoin Relay Network
Message-ID: <5279D89D.5000609@bluematt.me>

Recently, there has been a reasonable amount of discussion about the
continued fragility of the public Bitcoin network on IRC and elsewhere
(1). To this extent, I'm organizing a system of peering between nodes in
the network by creating a system of high-speed relay nodes for miners
and merchants/exchanges. This system will a) act as a fallback in the
case that the public Bitcoin network encounters issues and b) decrease
block propagation times between miners.
It is NOT designed to in any way replace or decrease the need for the
public Bitcoin P2P network. It is NOT any kind of attempt at
centralization, and I still encourage interested parties to establish
their own private peering agreements with large miners as needed.

Currently the network consists of one specially-designed relay node, but
I hope to bring more online in the coming days.

This network is open to everyone via a few public relay nodes, but also
will have nodes which are made available only to large miners and
merchants/exchanges to mitigate the ability of malicious parties to DoS
the network.

To peer with the public relay nodes, simply select the closest region
out of us-west (West Coast US), us-east (East Coast US), eu (Western
Europe), au (Australia), or jpy (Japan) and add
public.REGION.relay.mattcorallo.com to your addnode list. Note that
since all of the relay nodes will relay between each other, you gain no
latency advantage by peering with more than the closest node to you (and
currently all the regions map to one node, so there they're redundant
anyway).

For each relay node, you can connect to either port 8334 or 8335.
Connecting on port 8334 will relay only blocks, and port 8335 will relay
both blocks and transactions. The relay nodes will request any
transactions which appear in your invs no matter which port you connect to.

Relay node details:
 * The relay nodes do some data verification to prevent DoS, but in
order to keep relay fast, they do not fully verify the data they are
relaying, thus YOU SHOULD NEVER mine a block building on top of a
relayed block without fully checking it with your own bitcoin validator
(as you would any other block relayed from the P2P network).
 * The relay nodes do not follow the standard inv-getdata-tx/block flow,
but instead relay transactions/blocks immediately after they have done
their cursory verification. They do keep some track of whether or not
your nodes claim to have seen the transactions/blocks before relaying,
but you may see transactions/blocks being sent which you already have
and have not requested, if this is a problem for you due to bandwith
issues, you should reconsider your bandwith constraints and/or are
peering with too many nodes.
 * The relay nodes will all relay among themselves very quickly, so
there is no advantage to peering with as many relay nodes as you can
find, in fact, the increased incoming bandwidth during block relay
spikes may result in higher latency for your nodes.
 * The relay nodes are NOT designed to ensure that you never miss data,
and may fail to relay some transactions. Additionally, because the relay
nodes do not respond to standard getdata requests, if you miss a relay
and then reconnect, that data will not be sent again by the relay nodes.
The relay nodes are NOT a replacement for having peers on the standard
P2P network, they are only there to augment the existing P2P network.

If you are a merchant/exchange/large miner/other important node operator
and wish to gain access to additional domain names which map to relay
nodes with fewer peers, please fill out the form at
https://docs.google.com/forms/d/1UL82QdcXXEhZwSHJAK04Sk_cWg4zLOu8a216nO7Mt8c/viewform

You can find the source for the relay nodes at
https://github.com/TheBlueMatt/RelayNode

If you have any comments/concerns/suggestions, please do not hesitate to
email bitcoin-peering at mattcorallo.com

Thanks,
Matt


(1) There has been extended discussion on #bitcoin-wizards as well as
#bitcoin-dev of the very small number of active, listening nodes.
Additionally, because many of those nodes are versions prior to 0.8.4,
it seems very likely that maliciously creating network splits or at
least drastically reducing the number of peers for most nodes would not
be particularly challenging in the current network. Also,
http://www.tik.ee.ethz.ch/file/49318d3f56c1d525aabf7fda78b23fc0/P2P2013_041.pdf
noted that they were able to single-handledly decrease the network-wide
orphan rate by around 50% by improving network peering. Finally, you've
all seen the recent discussion on malicious mining algorithms. Though
those are not entirely prevented by reducing block propagation times,
they can be significantly limited compared to the current, rather
disjoint, network.



From slush at centrum.cz  Wed Nov  6 06:41:57 2013
From: slush at centrum.cz (slush)
Date: Wed, 6 Nov 2013 07:41:57 +0100
Subject: [Bitcoin-development] Message Signing based authentication
In-Reply-To: <CAKaEYh+bAVcK0tUrE75HvSf0PJ5Ps1j_yUheBeOM5Q1EHADdCw@mail.gmail.com>
References: <20131102050144.5850@gmx.com>
	<CAJna-HgUT2u+nhdz3e8mT99R+TR6o1FFQ4c8KBz_vpc_oSOzSQ@mail.gmail.com>
	<CAKaEYh+bAVcK0tUrE75HvSf0PJ5Ps1j_yUheBeOM5Q1EHADdCw@mail.gmail.com>
Message-ID: <CAJna-HhuQZHb49-UGjpg3-T+wK7PPRa34=0xk4=Dw=6FeFBEpg@mail.gmail.com>

> But where are the private keys stored? Crypto in the browser with help,
but although they will expose ECC via the NSS, I dont think bitcoin's
particular curve will be supported, because it's not NIST approved. If the
use case was presented though, they may add it.

Trezor, my friend.

Slush

Sent from mobile phone.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131106/34efeea8/attachment.html>

From mike at plan99.net  Wed Nov  6 09:23:15 2013
From: mike at plan99.net (Mike Hearn)
Date: Wed, 6 Nov 2013 10:23:15 +0100
Subject: [Bitcoin-development] [ANN] High-speed Bitcoin Relay Network
In-Reply-To: <5279D89D.5000609@bluematt.me>
References: <5279D89D.5000609@bluematt.me>
Message-ID: <CANEZrP1fMnUUVC__xubey-smtYvbsNx_mLb_Yj+7vczspOnkAg@mail.gmail.com>

Very cool, thanks Matt.

I was actually thinking this morning, maybe we should require all nodes to
go through the inv/getdata dance. Otherwise it's possible to improve your
chances at racing a block by mining a block, waiting to see a block inv
from another node, then blasting out your block while other nodes are still
waiting on their getdatas.


On Wed, Nov 6, 2013 at 6:50 AM, Matt Corallo <bitcoin-list at bluematt.me>wrote:

> Recently, there has been a reasonable amount of discussion about the
> continued fragility of the public Bitcoin network on IRC and elsewhere
> (1). To this extent, I'm organizing a system of peering between nodes in
> the network by creating a system of high-speed relay nodes for miners
> and merchants/exchanges. This system will a) act as a fallback in the
> case that the public Bitcoin network encounters issues and b) decrease
> block propagation times between miners.
> It is NOT designed to in any way replace or decrease the need for the
> public Bitcoin P2P network. It is NOT any kind of attempt at
> centralization, and I still encourage interested parties to establish
> their own private peering agreements with large miners as needed.
>
> Currently the network consists of one specially-designed relay node, but
> I hope to bring more online in the coming days.
>
> This network is open to everyone via a few public relay nodes, but also
> will have nodes which are made available only to large miners and
> merchants/exchanges to mitigate the ability of malicious parties to DoS
> the network.
>
> To peer with the public relay nodes, simply select the closest region
> out of us-west (West Coast US), us-east (East Coast US), eu (Western
> Europe), au (Australia), or jpy (Japan) and add
> public.REGION.relay.mattcorallo.com to your addnode list. Note that
> since all of the relay nodes will relay between each other, you gain no
> latency advantage by peering with more than the closest node to you (and
> currently all the regions map to one node, so there they're redundant
> anyway).
>
> For each relay node, you can connect to either port 8334 or 8335.
> Connecting on port 8334 will relay only blocks, and port 8335 will relay
> both blocks and transactions. The relay nodes will request any
> transactions which appear in your invs no matter which port you connect to.
>
> Relay node details:
>  * The relay nodes do some data verification to prevent DoS, but in
> order to keep relay fast, they do not fully verify the data they are
> relaying, thus YOU SHOULD NEVER mine a block building on top of a
> relayed block without fully checking it with your own bitcoin validator
> (as you would any other block relayed from the P2P network).
>  * The relay nodes do not follow the standard inv-getdata-tx/block flow,
> but instead relay transactions/blocks immediately after they have done
> their cursory verification. They do keep some track of whether or not
> your nodes claim to have seen the transactions/blocks before relaying,
> but you may see transactions/blocks being sent which you already have
> and have not requested, if this is a problem for you due to bandwith
> issues, you should reconsider your bandwith constraints and/or are
> peering with too many nodes.
>  * The relay nodes will all relay among themselves very quickly, so
> there is no advantage to peering with as many relay nodes as you can
> find, in fact, the increased incoming bandwidth during block relay
> spikes may result in higher latency for your nodes.
>  * The relay nodes are NOT designed to ensure that you never miss data,
> and may fail to relay some transactions. Additionally, because the relay
> nodes do not respond to standard getdata requests, if you miss a relay
> and then reconnect, that data will not be sent again by the relay nodes.
> The relay nodes are NOT a replacement for having peers on the standard
> P2P network, they are only there to augment the existing P2P network.
>
> If you are a merchant/exchange/large miner/other important node operator
> and wish to gain access to additional domain names which map to relay
> nodes with fewer peers, please fill out the form at
>
> https://docs.google.com/forms/d/1UL82QdcXXEhZwSHJAK04Sk_cWg4zLOu8a216nO7Mt8c/viewform
>
> You can find the source for the relay nodes at
> https://github.com/TheBlueMatt/RelayNode
>
> If you have any comments/concerns/suggestions, please do not hesitate to
> email bitcoin-peering at mattcorallo.com
>
> Thanks,
> Matt
>
>
> (1) There has been extended discussion on #bitcoin-wizards as well as
> #bitcoin-dev of the very small number of active, listening nodes.
> Additionally, because many of those nodes are versions prior to 0.8.4,
> it seems very likely that maliciously creating network splits or at
> least drastically reducing the number of peers for most nodes would not
> be particularly challenging in the current network. Also,
>
> http://www.tik.ee.ethz.ch/file/49318d3f56c1d525aabf7fda78b23fc0/P2P2013_041.pdf
> noted that they were able to single-handledly decrease the network-wide
> orphan rate by around 50% by improving network peering. Finally, you've
> all seen the recent discussion on malicious mining algorithms. Though
> those are not entirely prevented by reducing block propagation times,
> they can be significantly limited compared to the current, rather
> disjoint, network.
>
>
> ------------------------------------------------------------------------------
> November Webinars for C, C++, Fortran Developers
> Accelerate application performance with scalable programming models.
> Explore
> techniques for threading, error checking, porting, and tuning. Get the most
> from the latest Intel processors and coprocessors. See abstracts and
> register
> http://pubads.g.doubleclick.net/gampad/clk?id=60136231&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131106/13c94d62/attachment.html>

From frankf44 at gmail.com  Wed Nov  6 09:26:27 2013
From: frankf44 at gmail.com (Frank F)
Date: Wed, 6 Nov 2013 03:26:27 -0600
Subject: [Bitcoin-development] we can all relax now
In-Reply-To: <5279D49D.5050807@jerviss.org>
References: <5279D49D.5050807@jerviss.org>
Message-ID: <CALxyHsX=DHq+V5N0pGBuFPNCRbrLGkMY95fsh6L0VF+iLywjgw@mail.gmail.com>

The problem with academics is that they don't have to worry about the real
world. They get paid to publish things, not to be helpful to society.


On Tue, Nov 5, 2013 at 11:33 PM, kjj <bitcoin-devel at jerviss.org> wrote:

> One of the things that really gets me going is when someone devises a
> model, tests it against itself, and then pretends that they've learned
> something about the real world.
>
> Naturally, the Selfish Mining paper is exactly this sort of nonsense.
> Their model is one with no latency, and one where the attacker has total
> visibility across the network.  An iterated FSM is not a suitable
> simulation of the bitcoin system.  The bitcoin network does not have
> states, and to the extent that you can pretend that we do, you can't
> simulate transitions between them with static probabilities.
>
> The authors understand this deep down inside, even though they didn't
> work out the implications.  They handwave the issue by assuming a total
> sybil attack, and in true academic spirit, they don't realize that the
> condition necessary for the attack is far, far worse than the attack
> itself.
>
> Greg said he'd like to run some simulations, and I'm thinking about it
> too.  Unfortunately, he is busy all week, and I'm lazy (and also busy
> for most of tomorrow).
>
> If neither of us get to it first, I'm willing to pitch in 1 BTC as a
> bounty for building a general bitcoin network simulator framework. The
> simulator should be able to account for latency between nodes, and
> ideally within a node.  It needs to be able to simulate an attacker that
> owns varying fractions of the network, and make decisions based only on
> what the attacker actually knows.  It needs to be able to simulate this
> "attack" and should be generic enough to be easily modified for other
> crazy schemes.
>
> (Bounty offer is serious, but expires in one year [based on the earliest
> timestamp that my mail server puts on this email], and /may/ be subject
> to change if the price on any reputable exchange breaks 1000 USD per BTC
> in that period.)
>
> Basically, the lack of a decent network simulator is what allowed this
> paper to get press.  If the author had been able to see the importance
> of the stuff he was ignoring, we wouldn't be wasting so much time
> correcting him (and sadly the reporters that have no way to check his
> claims).
>
> https://bitcointalk.org/index.php?topic=324413.msg3495663#msg3495663
>
>
>
>
> ------------------------------------------------------------------------------
> November Webinars for C, C++, Fortran Developers
> Accelerate application performance with scalable programming models.
> Explore
> techniques for threading, error checking, porting, and tuning. Get the most
> from the latest Intel processors and coprocessors. See abstracts and
> register
> http://pubads.g.doubleclick.net/gampad/clk?id=60136231&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>



-- 
*MONEY IS OVER!*
                                IF YOU WANT IT<http://www.zeitgeistmovie.com/>
=====================================================
The causes of my servitude can be traced to the tyranny of money.
-Serj Tankian
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131106/a4337e71/attachment.html>

From jgarzik at bitpay.com  Wed Nov  6 11:35:51 2013
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Wed, 6 Nov 2013 06:35:51 -0500
Subject: [Bitcoin-development] we can all relax now
In-Reply-To: <5279D49D.5050807@jerviss.org>
References: <5279D49D.5050807@jerviss.org>
Message-ID: <CAJHLa0N1-8LfFuWq=vS0r-t2Bt-qZ6yKuGjrnicUOj+K6Gpx5A@mail.gmail.com>

I will contribute 1 BTC to this bounty, under same terms and expiration.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131106/b3d74829/attachment.html>

From jgarzik at bitpay.com  Wed Nov  6 11:42:01 2013
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Wed, 6 Nov 2013 06:42:01 -0500
Subject: [Bitcoin-development] [ANN] High-speed Bitcoin Relay Network
In-Reply-To: <5279D89D.5000609@bluematt.me>
References: <5279D89D.5000609@bluematt.me>
Message-ID: <CAJHLa0NkjvBB3-J39O0O=yf+xaFQm7C6qnDKdLMzDE3TO4STDQ@mail.gmail.com>

Good stuff.  I have been pushing for private peering agreeents and a
"backbone" for years. Even had a paltry effort going with exmulti.net + a
few manually connected parties.

I hope parties in the bitcoin space take it upon themselves to network with
major sites - miners, payment processors, exchanges, popular sites, etc.
 On Nov 6, 2013 12:50 AM, "Matt Corallo" <bitcoin-list at bluematt.me> wrote:

> Recently, there has been a reasonable amount of discussion about the
> continued fragility of the public Bitcoin network on IRC and elsewhere
> (1). To this extent, I'm organizing a system of peering between nodes in
> the network by creating a system of high-speed relay nodes for miners
> and merchants/exchanges. This system will a) act as a fallback in the
> case that the public Bitcoin network encounters issues and b) decrease
> block propagation times between miners.
> It is NOT designed to in any way replace or decrease the need for the
> public Bitcoin P2P network. It is NOT any kind of attempt at
> centralization, and I still encourage interested parties to establish
> their own private peering agreements with large miners as needed.
>
> Currently the network consists of one specially-designed relay node, but
> I hope to bring more online in the coming days.
>
> This network is open to everyone via a few public relay nodes, but also
> will have nodes which are made available only to large miners and
> merchants/exchanges to mitigate the ability of malicious parties to DoS
> the network.
>
> To peer with the public relay nodes, simply select the closest region
> out of us-west (West Coast US), us-east (East Coast US), eu (Western
> Europe), au (Australia), or jpy (Japan) and add
> public.REGION.relay.mattcorallo.com to your addnode list. Note that
> since all of the relay nodes will relay between each other, you gain no
> latency advantage by peering with more than the closest node to you (and
> currently all the regions map to one node, so there they're redundant
> anyway).
>
> For each relay node, you can connect to either port 8334 or 8335.
> Connecting on port 8334 will relay only blocks, and port 8335 will relay
> both blocks and transactions. The relay nodes will request any
> transactions which appear in your invs no matter which port you connect to.
>
> Relay node details:
>  * The relay nodes do some data verification to prevent DoS, but in
> order to keep relay fast, they do not fully verify the data they are
> relaying, thus YOU SHOULD NEVER mine a block building on top of a
> relayed block without fully checking it with your own bitcoin validator
> (as you would any other block relayed from the P2P network).
>  * The relay nodes do not follow the standard inv-getdata-tx/block flow,
> but instead relay transactions/blocks immediately after they have done
> their cursory verification. They do keep some track of whether or not
> your nodes claim to have seen the transactions/blocks before relaying,
> but you may see transactions/blocks being sent which you already have
> and have not requested, if this is a problem for you due to bandwith
> issues, you should reconsider your bandwith constraints and/or are
> peering with too many nodes.
>  * The relay nodes will all relay among themselves very quickly, so
> there is no advantage to peering with as many relay nodes as you can
> find, in fact, the increased incoming bandwidth during block relay
> spikes may result in higher latency for your nodes.
>  * The relay nodes are NOT designed to ensure that you never miss data,
> and may fail to relay some transactions. Additionally, because the relay
> nodes do not respond to standard getdata requests, if you miss a relay
> and then reconnect, that data will not be sent again by the relay nodes.
> The relay nodes are NOT a replacement for having peers on the standard
> P2P network, they are only there to augment the existing P2P network.
>
> If you are a merchant/exchange/large miner/other important node operator
> and wish to gain access to additional domain names which map to relay
> nodes with fewer peers, please fill out the form at
>
> https://docs.google.com/forms/d/1UL82QdcXXEhZwSHJAK04Sk_cWg4zLOu8a216nO7Mt8c/viewform
>
> You can find the source for the relay nodes at
> https://github.com/TheBlueMatt/RelayNode
>
> If you have any comments/concerns/suggestions, please do not hesitate to
> email bitcoin-peering at mattcorallo.com
>
> Thanks,
> Matt
>
>
> (1) There has been extended discussion on #bitcoin-wizards as well as
> #bitcoin-dev of the very small number of active, listening nodes.
> Additionally, because many of those nodes are versions prior to 0.8.4,
> it seems very likely that maliciously creating network splits or at
> least drastically reducing the number of peers for most nodes would not
> be particularly challenging in the current network. Also,
>
> http://www.tik.ee.ethz.ch/file/49318d3f56c1d525aabf7fda78b23fc0/P2P2013_041.pdf
> noted that they were able to single-handledly decrease the network-wide
> orphan rate by around 50% by improving network peering. Finally, you've
> all seen the recent discussion on malicious mining algorithms. Though
> those are not entirely prevented by reducing block propagation times,
> they can be significantly limited compared to the current, rather
> disjoint, network.
>
>
> ------------------------------------------------------------------------------
> November Webinars for C, C++, Fortran Developers
> Accelerate application performance with scalable programming models.
> Explore
> techniques for threading, error checking, porting, and tuning. Get the most
> from the latest Intel processors and coprocessors. See abstracts and
> register
> http://pubads.g.doubleclick.net/gampad/clk?id=60136231&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131106/215aa818/attachment.html>

From tier.nolan at gmail.com  Wed Nov  6 12:25:31 2013
From: tier.nolan at gmail.com (Tier Nolan)
Date: Wed, 6 Nov 2013 12:25:31 +0000
Subject: [Bitcoin-development] [ANN] High-speed Bitcoin Relay Network
In-Reply-To: <5279D89D.5000609@bluematt.me>
References: <5279D89D.5000609@bluematt.me>
Message-ID: <CAE-z3OXQiT-6OXddb9_jpY2Qqbfs+BKAVv3M-rQ4eedwBS2MAg@mail.gmail.com>

On Wed, Nov 6, 2013 at 5:50 AM, Matt Corallo <bitcoin-list at bluematt.me>wrote:

> Relay node details:
>  * The relay nodes do some data verification to prevent DoS, but in
> order to keep relay fast, they do not fully verify the data they are
> relaying, thus YOU SHOULD NEVER mine a block building on top of a
> relayed block without fully checking it with your own bitcoin validator
> (as you would any other block relayed from the P2P network).
>

Wouldn't this cause disconnects due to misbehavior?

A standard node connecting to a relay node would receive
blocks/transactions that are not valid in some way and then disconnect.

Have you looked though the official client to find what things are
considered signs that a peer is hostile?  I assume things like double
spending checks count as misbehavior and can't be quickly checked by a
relay node.

Maybe another bit could be assigned in the services field as "relay".  This
means that the node doesn't do any checking.

Connects to relay nodes could be command line/config file only.  Peers
wouldn't connect to them.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131106/2ac17bfa/attachment.html>

From christophe.biocca at gmail.com  Wed Nov  6 18:06:47 2013
From: christophe.biocca at gmail.com (Christophe Biocca)
Date: Wed, 6 Nov 2013 13:06:47 -0500
Subject: [Bitcoin-development] we can all relax now
In-Reply-To: <CAJHLa0N1-8LfFuWq=vS0r-t2Bt-qZ6yKuGjrnicUOj+K6Gpx5A@mail.gmail.com>
References: <5279D49D.5050807@jerviss.org>
	<CAJHLa0N1-8LfFuWq=vS0r-t2Bt-qZ6yKuGjrnicUOj+K6Gpx5A@mail.gmail.com>
Message-ID: <CANOOu=-MsPPgACKcHvsvtFAOAiULL+BOQvJz1tC3L=nT8wN01Q@mail.gmail.com>

I might try building this sometime soon. I think it may also serve an
educational purpose when trying to understand the whole network's behaviour.

What level of accuracy are we looking for though? Obviously we need to
fully emulate the steps of the network protocol, and we need to be able to
specify time taken for transmission/processing for each node. Do we care
about the actual contents of the messages (to be able to simulate double
spend attempts, invalid transactions and blocks, SPV node communication),
and their validation (actual signatures and proof of work)?

I imagine the latter is pretty useless, beyond specifying that the
signature/proof of work is valid/invalid.

If we could build up a set of experiments we'd like to run on it, it would
help clarify what's needed.

Off the top of my head:

- Peter Todd's miner strategy of sending blocks to only 51% of the
hashpower.
- Various network split conditions, and how aware of the split nodes would
be (and the effect of client variability).
- Testing the feasability of network race double spends, or Finney attacks.
- Various network partition scenarios.
- Tricking SPV nodes.
On Nov 6, 2013 6:37 AM, "Jeff Garzik" <jgarzik at bitpay.com> wrote:

> I will contribute 1 BTC to this bounty, under same terms and expiration.
>
>
> ------------------------------------------------------------------------------
> November Webinars for C, C++, Fortran Developers
> Accelerate application performance with scalable programming models.
> Explore
> techniques for threading, error checking, porting, and tuning. Get the most
> from the latest Intel processors and coprocessors. See abstracts and
> register
> http://pubads.g.doubleclick.net/gampad/clk?id=60136231&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131106/5f944e9e/attachment.html>

From melvincarvalho at gmail.com  Wed Nov  6 18:17:46 2013
From: melvincarvalho at gmail.com (Melvin Carvalho)
Date: Wed, 6 Nov 2013 19:17:46 +0100
Subject: [Bitcoin-development] we can all relax now
In-Reply-To: <5279D49D.5050807@jerviss.org>
References: <5279D49D.5050807@jerviss.org>
Message-ID: <CAKaEYhLpr24+7B0w410S7XdGgyOU4vsv07uv2e6yvYNKV8ZQJQ@mail.gmail.com>

On 6 November 2013 06:33, kjj <bitcoin-devel at jerviss.org> wrote:

> One of the things that really gets me going is when someone devises a
> model, tests it against itself, and then pretends that they've learned
> something about the real world.
>
> Naturally, the Selfish Mining paper is exactly this sort of nonsense.
> Their model is one with no latency, and one where the attacker has total
> visibility across the network.  An iterated FSM is not a suitable
> simulation of the bitcoin system.  The bitcoin network does not have
> states, and to the extent that you can pretend that we do, you can't
> simulate transitions between them with static probabilities.
>
> The authors understand this deep down inside, even though they didn't
> work out the implications.  They handwave the issue by assuming a total
> sybil attack, and in true academic spirit, they don't realize that the
> condition necessary for the attack is far, far worse than the attack
> itself.
>
> Greg said he'd like to run some simulations, and I'm thinking about it
> too.  Unfortunately, he is busy all week, and I'm lazy (and also busy
> for most of tomorrow).
>
> If neither of us get to it first, I'm willing to pitch in 1 BTC as a
> bounty for building a general bitcoin network simulator framework. The
> simulator should be able to account for latency between nodes, and
> ideally within a node.  It needs to be able to simulate an attacker that
> owns varying fractions of the network, and make decisions based only on
> what the attacker actually knows.  It needs to be able to simulate this
> "attack" and should be generic enough to be easily modified for other
> crazy schemes.
>
> (Bounty offer is serious, but expires in one year [based on the earliest
> timestamp that my mail server puts on this email], and /may/ be subject
> to change if the price on any reputable exchange breaks 1000 USD per BTC
> in that period.)
>
> Basically, the lack of a decent network simulator is what allowed this
> paper to get press.  If the author had been able to see the importance
> of the stuff he was ignoring, we wouldn't be wasting so much time
> correcting him (and sadly the reporters that have no way to check his
> claims).
>
> https://bitcointalk.org/index.php?topic=324413.msg3495663#msg3495663
>

Thanks for posting this bounty.  I'm interested in working on it, and will
give it a try.  I also have some other commitments, so I suspect you guys
will finish it first tho... but if not, I'll post details of the simulator.


>
>
>
>
> ------------------------------------------------------------------------------
> November Webinars for C, C++, Fortran Developers
> Accelerate application performance with scalable programming models.
> Explore
> techniques for threading, error checking, porting, and tuning. Get the most
> from the latest Intel processors and coprocessors. See abstracts and
> register
> http://pubads.g.doubleclick.net/gampad/clk?id=60136231&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131106/c5b726ae/attachment.html>

From jouke at bitonic.nl  Wed Nov  6 22:19:42 2013
From: jouke at bitonic.nl (Jouke Hofman)
Date: Wed, 06 Nov 2013 23:19:42 +0100
Subject: [Bitcoin-development] we can all relax now
In-Reply-To: <5279D49D.5050807@jerviss.org>
References: <5279D49D.5050807@jerviss.org>
Message-ID: <527AC07E.5030401@bitonic.nl>

bounty++

On 06-11-13 06:33, kjj wrote:
> One of the things that really gets me going is when someone devises a 
> model, tests it against itself, and then pretends that they've learned 
> something about the real world.
> 
> Naturally, the Selfish Mining paper is exactly this sort of nonsense.  
> Their model is one with no latency, and one where the attacker has total 
> visibility across the network.  An iterated FSM is not a suitable 
> simulation of the bitcoin system.  The bitcoin network does not have 
> states, and to the extent that you can pretend that we do, you can't 
> simulate transitions between them with static probabilities.
> 
> The authors understand this deep down inside, even though they didn't 
> work out the implications.  They handwave the issue by assuming a total 
> sybil attack, and in true academic spirit, they don't realize that the 
> condition necessary for the attack is far, far worse than the attack itself.
> 
> Greg said he'd like to run some simulations, and I'm thinking about it 
> too.  Unfortunately, he is busy all week, and I'm lazy (and also busy 
> for most of tomorrow).
> 
> If neither of us get to it first, I'm willing to pitch in 1 BTC as a 
> bounty for building a general bitcoin network simulator framework. The 
> simulator should be able to account for latency between nodes, and 
> ideally within a node.  It needs to be able to simulate an attacker that 
> owns varying fractions of the network, and make decisions based only on 
> what the attacker actually knows.  It needs to be able to simulate this 
> "attack" and should be generic enough to be easily modified for other 
> crazy schemes.
> 
> (Bounty offer is serious, but expires in one year [based on the earliest 
> timestamp that my mail server puts on this email], and /may/ be subject 
> to change if the price on any reputable exchange breaks 1000 USD per BTC 
> in that period.)
> 
> Basically, the lack of a decent network simulator is what allowed this 
> paper to get press.  If the author had been able to see the importance 
> of the stuff he was ignoring, we wouldn't be wasting so much time 
> correcting him (and sadly the reporters that have no way to check his 
> claims).
> 
> https://bitcointalk.org/index.php?topic=324413.msg3495663#msg3495663
> 
> 
> 
> ------------------------------------------------------------------------------
> November Webinars for C, C++, Fortran Developers
> Accelerate application performance with scalable programming models. Explore
> techniques for threading, error checking, porting, and tuning. Get the most 
> from the latest Intel processors and coprocessors. See abstracts and register
> http://pubads.g.doubleclick.net/gampad/clk?id=60136231&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 




From bitcoin-list at bluematt.me  Wed Nov  6 23:35:34 2013
From: bitcoin-list at bluematt.me (Matt Corallo)
Date: Wed, 06 Nov 2013 18:35:34 -0500
Subject: [Bitcoin-development] [ANN] High-speed Bitcoin Relay Network
In-Reply-To: <CAE-z3OXQiT-6OXddb9_jpY2Qqbfs+BKAVv3M-rQ4eedwBS2MAg@mail.gmail.com>
References: <5279D89D.5000609@bluematt.me>
	<CAE-z3OXQiT-6OXddb9_jpY2Qqbfs+BKAVv3M-rQ4eedwBS2MAg@mail.gmail.com>
Message-ID: <527AD246.9050906@bluematt.me>

No, the transactions relayed are piped through a bitcoind first (ie
fully verified by a bitcoind). For blocks, for which the timing needs to
be tighter, bitcoinj does SPV-validation. Though it is possible to
create a block which passes SPV validation but causes a DoS score, doing
so would cost a miner a full block's worth of profits, which they are
fairly unlikely to do. In any case, if it every becomes a problem, its
not hard to adapt addnode to allow higher DoS scores for individual nodes.

Matt

On 11/06/13 07:25, Tier Nolan wrote:
> 
> 
> 
> On Wed, Nov 6, 2013 at 5:50 AM, Matt Corallo <bitcoin-list at bluematt.me
> <mailto:bitcoin-list at bluematt.me>> wrote:
> 
>     Relay node details:
>      * The relay nodes do some data verification to prevent DoS, but in
>     order to keep relay fast, they do not fully verify the data they are
>     relaying, thus YOU SHOULD NEVER mine a block building on top of a
>     relayed block without fully checking it with your own bitcoin validator
>     (as you would any other block relayed from the P2P network).
> 
> 
> Wouldn't this cause disconnects due to misbehavior? 
> 
> A standard node connecting to a relay node would receive
> blocks/transactions that are not valid in some way and then disconnect.
> 
> Have you looked though the official client to find what things are
> considered signs that a peer is hostile?  I assume things like double
> spending checks count as misbehavior and can't be quickly checked by a
> relay node.
> 
> Maybe another bit could be assigned in the services field as "relay". 
> This means that the node doesn't do any checking. 
> 
> Connects to relay nodes could be command line/config file only.  Peers
> wouldn't connect to them.



From pete at petertodd.org  Thu Nov  7 03:44:04 2013
From: pete at petertodd.org (Peter Todd)
Date: Wed, 6 Nov 2013 22:44:04 -0500
Subject: [Bitcoin-development] we can all relax now
In-Reply-To: <CANOOu=-MsPPgACKcHvsvtFAOAiULL+BOQvJz1tC3L=nT8wN01Q@mail.gmail.com>
References: <5279D49D.5050807@jerviss.org>
	<CAJHLa0N1-8LfFuWq=vS0r-t2Bt-qZ6yKuGjrnicUOj+K6Gpx5A@mail.gmail.com>
	<CANOOu=-MsPPgACKcHvsvtFAOAiULL+BOQvJz1tC3L=nT8wN01Q@mail.gmail.com>
Message-ID: <20131107034404.GA5140@savin>

On Wed, Nov 06, 2013 at 01:06:47PM -0500, Christophe Biocca wrote:
> I might try building this sometime soon. I think it may also serve an
> educational purpose when trying to understand the whole network's behaviour.
> 
> What level of accuracy are we looking for though? Obviously we need to
> fully emulate the steps of the network protocol, and we need to be able to
> specify time taken for transmission/processing for each node. Do we care
> about the actual contents of the messages (to be able to simulate double
> spend attempts, invalid transactions and blocks, SPV node communication),
> and their validation (actual signatures and proof of work)?
> 
> I imagine the latter is pretty useless, beyond specifying that the
> signature/proof of work is valid/invalid.
> 
> If we could build up a set of experiments we'd like to run on it, it would
> help clarify what's needed.
> 
> Off the top of my head:
> 
> - Peter Todd's miner strategy of sending blocks to only 51% of the
> hashpower.

Speaking of, I hadn't gotten around to doing up the math behind that
strategy properly; turns out 51% I was overly optimistic and the actual
threshold is 29.3%

Suppose I find a block. I have Q hashing power, and the rest of the
network 1-Q. Should I tell the rest of the network, or withhold that
block and hope I find a second one?

Now in a purely inflation subsidy environment, where I don't care about
the other miners success, of course I should publish. However, if my
goals are to find *more* blocks than the other miners for whatever
reason, maybe because transaction fees matter or I'm trying to get
nLockTime'd announce/commit fee sacrifices, it gets more complicated.


There are three possible outcomes:

1) I find the next block, probability Q
2) They find the next block, probability 1-Q
2.1) I find the next block, probability Q, or (1-Q)*Q in total.
2.2) They find the next block, probability (1-Q)^2 in total.

Note how only in the last option do I lose. So how much hashing power do
I need before it is just as likely that the other miners will find two
blocks before I find either one block, or two blocks? Easy enough:

Q + (1-Q)*Q = (1-Q)^2 -> Q^2 - Q + 1/2 -> Q = (1 - \sqrt(2))/2

Q ~= 29.2%

So basically, if I'm trying to beat other miners, once I have >29.3% of
the hashing power I have no incentive to publish the blocks I mine!

But hang on, does it matter if I'm the one who actually has that hashing
power? What if I just make sure that only >29.3% of the hashing power
has that block? If my goal is to make sure that someone does useless
work, and/or they are working on a lower height block than me, then no,
I don't care, which means my original "send blocks to >51% of the
hashing power" analysis was actually wrong, and the strategy is even
more crazy: "send blocks to >29.3% of the hashing power" (!)


Lets suppose I know that I'm two blocks ahead:

1) I find the next block: Q                    (3:0)
2) They find the next block: (1-Q)             (2:1)
2.1) I find the next block: (1-Q)*Q            (3:1)
2.2) They find the next block: (1-Q)^2         (2:2)
2.2.1) I find the next block: (1-Q)^2 * Q      (3:2)
2.2.2) They find the next block: (1-Q)^3       (2:3)

At what hashing power should I release my blocks? So remember, I win
this round on outcomes 1, 2.1, 2.2.1 and they only win on 2.2.2:

Q + (1-Q)*Q + (1-Q)^2*Q = (1-Q)^3 -> Q = 1 - 2^-3

Q ~= 20.6%

Interesting... so as I get further ahead, or to be exact the group of
miners who have a given block gets further ahead, I need less hashing
power for my incentives to be to *not* publish the block I just found.
Conversely this means I should try to make my blocks propagate to less
of the hashing power, by whatever means necessary.

Now remember, none of the above strategy requires me to have a special
low-latency network or anything fancy. I don't even have to have a lot
of hashing power - the strategy still works if I'm, say, a 5% pool. It
just means I don't have the incentives people thought I did to propagate
my blocks widely.

The other nasty thing about this, is suppose I'm a miner and recently
got a block from another miner: should I forward that block, or not
bother? Well, it depends: if I have no idea how much of the hashing
power has that block, I should forward the block. But again, if my goal
is to be most likely to get the next block, I should only forward in
such a way that >30% of the hashing power has the block.

This means that if I have some information about what % already has that
block, I have less incentive to forward! For instance, suppose that
every major miner has been publishing their node addresses in their
blocks - I'll have a pretty good idea of who probably has that most
recent block, so I can easily make a well-optimized decision not to
forward. Similarly because the 30% hashing power figure is the
*integral* of time * hashes/second, if miners are forwarding
near-target-headers, I might as well wait a few seconds and see if I see
any near-target-headers; if I do for this block then I have evidence
that hashing power does have it, and I shouldn't forward.


So yeah, we're fucked and have got to fix this awful incentive structure
somehow before the inflation subsidy gets any smaller. Also, raising the
blocksize, especially by just removing the limit, is utter madness given
it can be used to slow down block propagation selectively, so the
hashing power that gets a given block is limited repeatably to the same
group.


P.S: If any large pools want to try this stuff out, give me a shout. You
have my PGP key - confidentiality assured.

P.P.S: If you're mining on a pool with more than, like, 1% hashing
power, do the math on varience... Seriously, stop it and go mine on a
smaller pool, or better yet, p2pool.

-- 
'peter'[:-1]@petertodd.org
00000000000000078b970f5134bae96da021744f80e04aa9dc2e2d2c2bcb07c2
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 685 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131106/ed5fbe66/attachment.sig>

From kjj at jerviss.org  Thu Nov  7 04:15:40 2013
From: kjj at jerviss.org (Kyle Jerviss)
Date: Wed, 06 Nov 2013 22:15:40 -0600
Subject: [Bitcoin-development] we can all relax now
In-Reply-To: <20131107034404.GA5140@savin>
References: <5279D49D.5050807@jerviss.org>	<CAJHLa0N1-8LfFuWq=vS0r-t2Bt-qZ6yKuGjrnicUOj+K6Gpx5A@mail.gmail.com>	<CANOOu=-MsPPgACKcHvsvtFAOAiULL+BOQvJz1tC3L=nT8wN01Q@mail.gmail.com>
	<20131107034404.GA5140@savin>
Message-ID: <527B13EC.7020708@jerviss.org>

You are ignoring the gambler's ruin. We do not operate on an infinite 
timeline.  If you find a big pool willing to try this, please give me 
enough advance warning to get my popcorn ready.

Peter Todd wrote:
> On Wed, Nov 06, 2013 at 01:06:47PM -0500, Christophe Biocca wrote:
>> I might try building this sometime soon. I think it may also serve an
>> educational purpose when trying to understand the whole network's behaviour.
>>
>> What level of accuracy are we looking for though? Obviously we need to
>> fully emulate the steps of the network protocol, and we need to be able to
>> specify time taken for transmission/processing for each node. Do we care
>> about the actual contents of the messages (to be able to simulate double
>> spend attempts, invalid transactions and blocks, SPV node communication),
>> and their validation (actual signatures and proof of work)?
>>
>> I imagine the latter is pretty useless, beyond specifying that the
>> signature/proof of work is valid/invalid.
>>
>> If we could build up a set of experiments we'd like to run on it, it would
>> help clarify what's needed.
>>
>> Off the top of my head:
>>
>> - Peter Todd's miner strategy of sending blocks to only 51% of the
>> hashpower.
> Speaking of, I hadn't gotten around to doing up the math behind that
> strategy properly; turns out 51% I was overly optimistic and the actual
> threshold is 29.3%
>
> Suppose I find a block. I have Q hashing power, and the rest of the
> network 1-Q. Should I tell the rest of the network, or withhold that
> block and hope I find a second one?
>
> Now in a purely inflation subsidy environment, where I don't care about
> the other miners success, of course I should publish. However, if my
> goals are to find *more* blocks than the other miners for whatever
> reason, maybe because transaction fees matter or I'm trying to get
> nLockTime'd announce/commit fee sacrifices, it gets more complicated.
>
>
> There are three possible outcomes:
>
> 1) I find the next block, probability Q
> 2) They find the next block, probability 1-Q
> 2.1) I find the next block, probability Q, or (1-Q)*Q in total.
> 2.2) They find the next block, probability (1-Q)^2 in total.
>
> Note how only in the last option do I lose. So how much hashing power do
> I need before it is just as likely that the other miners will find two
> blocks before I find either one block, or two blocks? Easy enough:
>
> Q + (1-Q)*Q = (1-Q)^2 -> Q^2 - Q + 1/2 -> Q = (1 - \sqrt(2))/2
>
> Q ~= 29.2%
>
> So basically, if I'm trying to beat other miners, once I have >29.3% of
> the hashing power I have no incentive to publish the blocks I mine!
>
> But hang on, does it matter if I'm the one who actually has that hashing
> power? What if I just make sure that only >29.3% of the hashing power
> has that block? If my goal is to make sure that someone does useless
> work, and/or they are working on a lower height block than me, then no,
> I don't care, which means my original "send blocks to >51% of the
> hashing power" analysis was actually wrong, and the strategy is even
> more crazy: "send blocks to >29.3% of the hashing power" (!)
>
>
> Lets suppose I know that I'm two blocks ahead:
>
> 1) I find the next block: Q                    (3:0)
> 2) They find the next block: (1-Q)             (2:1)
> 2.1) I find the next block: (1-Q)*Q            (3:1)
> 2.2) They find the next block: (1-Q)^2         (2:2)
> 2.2.1) I find the next block: (1-Q)^2 * Q      (3:2)
> 2.2.2) They find the next block: (1-Q)^3       (2:3)
>
> At what hashing power should I release my blocks? So remember, I win
> this round on outcomes 1, 2.1, 2.2.1 and they only win on 2.2.2:
>
> Q + (1-Q)*Q + (1-Q)^2*Q = (1-Q)^3 -> Q = 1 - 2^-3
>
> Q ~= 20.6%
>
> Interesting... so as I get further ahead, or to be exact the group of
> miners who have a given block gets further ahead, I need less hashing
> power for my incentives to be to *not* publish the block I just found.
> Conversely this means I should try to make my blocks propagate to less
> of the hashing power, by whatever means necessary.
>
> Now remember, none of the above strategy requires me to have a special
> low-latency network or anything fancy. I don't even have to have a lot
> of hashing power - the strategy still works if I'm, say, a 5% pool. It
> just means I don't have the incentives people thought I did to propagate
> my blocks widely.
>
> The other nasty thing about this, is suppose I'm a miner and recently
> got a block from another miner: should I forward that block, or not
> bother? Well, it depends: if I have no idea how much of the hashing
> power has that block, I should forward the block. But again, if my goal
> is to be most likely to get the next block, I should only forward in
> such a way that >30% of the hashing power has the block.
>
> This means that if I have some information about what % already has that
> block, I have less incentive to forward! For instance, suppose that
> every major miner has been publishing their node addresses in their
> blocks - I'll have a pretty good idea of who probably has that most
> recent block, so I can easily make a well-optimized decision not to
> forward. Similarly because the 30% hashing power figure is the
> *integral* of time * hashes/second, if miners are forwarding
> near-target-headers, I might as well wait a few seconds and see if I see
> any near-target-headers; if I do for this block then I have evidence
> that hashing power does have it, and I shouldn't forward.
>
>
> So yeah, we're fucked and have got to fix this awful incentive structure
> somehow before the inflation subsidy gets any smaller. Also, raising the
> blocksize, especially by just removing the limit, is utter madness given
> it can be used to slow down block propagation selectively, so the
> hashing power that gets a given block is limited repeatably to the same
> group.
>
>
> P.S: If any large pools want to try this stuff out, give me a shout. You
> have my PGP key - confidentiality assured.
>
> P.P.S: If you're mining on a pool with more than, like, 1% hashing
> power, do the math on varience... Seriously, stop it and go mine on a
> smaller pool, or better yet, p2pool.
>
>
>
> ------------------------------------------------------------------------------
> November Webinars for C, C++, Fortran Developers
> Accelerate application performance with scalable programming models. Explore
> techniques for threading, error checking, porting, and tuning. Get the most
> from the latest Intel processors and coprocessors. See abstracts and register
> http://pubads.g.doubleclick.net/gampad/clk?id=60136231&iu=/4140/ostg.clktrk
>
>
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131106/a05c5a7f/attachment.html>

From pete at petertodd.org  Thu Nov  7 04:33:10 2013
From: pete at petertodd.org (Peter Todd)
Date: Wed, 6 Nov 2013 23:33:10 -0500
Subject: [Bitcoin-development] we can all relax now
In-Reply-To: <527B13EC.7020708@jerviss.org>
References: <5279D49D.5050807@jerviss.org>
	<CAJHLa0N1-8LfFuWq=vS0r-t2Bt-qZ6yKuGjrnicUOj+K6Gpx5A@mail.gmail.com>
	<CANOOu=-MsPPgACKcHvsvtFAOAiULL+BOQvJz1tC3L=nT8wN01Q@mail.gmail.com>
	<20131107034404.GA5140@savin> <527B13EC.7020708@jerviss.org>
Message-ID: <20131107043310.GA30788@savin>

On Wed, Nov 06, 2013 at 10:15:40PM -0600, Kyle Jerviss wrote:
> You are ignoring the gambler's ruin. We do not operate on an
> infinite timeline.  If you find a big pool willing to try this,
> please give me enough advance warning to get my popcorn ready.

Gamblers ruin has nothing to do with it.

At every point you want to evaluate the chance the other side will get
ahead, vs. cashing in by just publishing the blocks you have. (or some
of them) I didn't mention it in the analysis, but obviously you want to
keep track of how much the blocks you haven't published are worth to
you, and consider publishing some or all of your lead to the rest of the
network if you stand to lose more than you gain.

Right now it's a mostly theoretical attack because the inflation subsidy
is enormous and fees don't matter, but once fees do start to matter
things get a lot more complex. An extreme example is announce/commit
sacrifices to mining fees: if I'm at block n+1, the rest of the network
is at block n, and there's a 100BTC sacrifice at block n+2, I could
easily be in a situation where I have zero incentive to publish my block
to keep everyone else behind me, and just hope I find block n+2. If I
do, great! I'll immediately publish to lock-in my winnings and start
working on block n+3


Anyway, my covert suggestion that pools contact me was more to hopefully
strike fear into the people mining at a large pool and get them to
switch to a small one. :) If everyone mined solo or on p2pool none of
this stuff would matter much... but we can't force them too yet.

-- 
'peter'[:-1]@petertodd.org
0000000000000005713cac303bd2d529ebeffa82fff60be5307010a83933698d
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 685 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131106/553e167c/attachment.sig>

From gavinandresen at gmail.com  Thu Nov  7 04:56:56 2013
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Thu, 7 Nov 2013 14:56:56 +1000
Subject: [Bitcoin-development] we can all relax now
In-Reply-To: <20131107034404.GA5140@savin>
References: <5279D49D.5050807@jerviss.org>
	<CAJHLa0N1-8LfFuWq=vS0r-t2Bt-qZ6yKuGjrnicUOj+K6Gpx5A@mail.gmail.com>
	<CANOOu=-MsPPgACKcHvsvtFAOAiULL+BOQvJz1tC3L=nT8wN01Q@mail.gmail.com>
	<20131107034404.GA5140@savin>
Message-ID: <CABsx9T35Po7pUb2sr15zD5WODYqR4-xNvJD0Jz5+Of3d-NjPdg@mail.gmail.com>

> P.S: If any large pools want to try this stuff out, give me a shout. You
> have my PGP key - confidentiality assured.
>

If I find out one of the large pools decides to run this 'experiment' on
the main network, I will make it my mission to tell people to switch to a
more responsible pool.

And if you think you can get away with driving up EVERYBODY's orphan rate
without anybody noticing, you should think again.


> P.P.S: If you're mining on a pool with more than, like, 1% hashing
> power, do the math on varience... Seriously, stop it and go mine on a
> smaller pool, or better yet, p2pool.
>

That I agree with.

-- 
--
Gavin Andresen
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131107/ba14a6dd/attachment.html>

From kjj at jerviss.org  Thu Nov  7 04:59:28 2013
From: kjj at jerviss.org (Kyle Jerviss)
Date: Wed, 06 Nov 2013 22:59:28 -0600
Subject: [Bitcoin-development] we can all relax now
In-Reply-To: <20131107043310.GA30788@savin>
References: <5279D49D.5050807@jerviss.org>	<CAJHLa0N1-8LfFuWq=vS0r-t2Bt-qZ6yKuGjrnicUOj+K6Gpx5A@mail.gmail.com>	<CANOOu=-MsPPgACKcHvsvtFAOAiULL+BOQvJz1tC3L=nT8wN01Q@mail.gmail.com>	<20131107034404.GA5140@savin>
	<527B13EC.7020708@jerviss.org> <20131107043310.GA30788@savin>
Message-ID: <527B1E30.9090800@jerviss.org>

Each block that you solve has a reward.  In practice, some blocks will 
be orphaned, so the expected reward is slightly less than the nominal 
reward.  Each second that you delay publishing a block, the expected 
reward drops somewhat.

On an infinite timeline, the total reward approaches the expected 
reward.  But reality is discrete, and zero tends to be a brick wall.  If 
you delay publishing a block, you will get either the nominal reward, or 
zero, not some fraction in between.  And if your personal random walk 
involves an excursion through negative land, you may not stick around 
long enough for it to come back.

Thus, a positive expected value is not sufficient for some strategy to 
be a good one.

Peter Todd wrote:
> On Wed, Nov 06, 2013 at 10:15:40PM -0600, Kyle Jerviss wrote:
>> You are ignoring the gambler's ruin. We do not operate on an
>> infinite timeline.  If you find a big pool willing to try this,
>> please give me enough advance warning to get my popcorn ready.
> Gamblers ruin has nothing to do with it.
>
> At every point you want to evaluate the chance the other side will get
> ahead, vs. cashing in by just publishing the blocks you have. (or some
> of them) I didn't mention it in the analysis, but obviously you want to
> keep track of how much the blocks you haven't published are worth to
> you, and consider publishing some or all of your lead to the rest of the
> network if you stand to lose more than you gain.
>
> Right now it's a mostly theoretical attack because the inflation subsidy
> is enormous and fees don't matter, but once fees do start to matter
> things get a lot more complex. An extreme example is announce/commit
> sacrifices to mining fees: if I'm at block n+1, the rest of the network
> is at block n, and there's a 100BTC sacrifice at block n+2, I could
> easily be in a situation where I have zero incentive to publish my block
> to keep everyone else behind me, and just hope I find block n+2. If I
> do, great! I'll immediately publish to lock-in my winnings and start
> working on block n+3
>
>
> Anyway, my covert suggestion that pools contact me was more to hopefully
> strike fear into the people mining at a large pool and get them to
> switch to a small one. :) If everyone mined solo or on p2pool none of
> this stuff would matter much... but we can't force them too yet.
>
>
>
> ------------------------------------------------------------------------------
> November Webinars for C, C++, Fortran Developers
> Accelerate application performance with scalable programming models. Explore
> techniques for threading, error checking, porting, and tuning. Get the most
> from the latest Intel processors and coprocessors. See abstracts and register
> http://pubads.g.doubleclick.net/gampad/clk?id=60136231&iu=/4140/ostg.clktrk
>
>
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131106/31419fb3/attachment.html>

From kjj at jerviss.org  Thu Nov  7 05:24:48 2013
From: kjj at jerviss.org (Kyle Jerviss)
Date: Wed, 06 Nov 2013 23:24:48 -0600
Subject: [Bitcoin-development] we can all relax now
In-Reply-To: <CANOOu=-MsPPgACKcHvsvtFAOAiULL+BOQvJz1tC3L=nT8wN01Q@mail.gmail.com>
References: <5279D49D.5050807@jerviss.org>	<CAJHLa0N1-8LfFuWq=vS0r-t2Bt-qZ6yKuGjrnicUOj+K6Gpx5A@mail.gmail.com>
	<CANOOu=-MsPPgACKcHvsvtFAOAiULL+BOQvJz1tC3L=nT8wN01Q@mail.gmail.com>
Message-ID: <527B2420.6030603@jerviss.org>

What I want is configurable 1/10/100 millisecond ticks, and accurate 
flow of information.

It doesn't seem necessary to really emulate the whole protocol, nor to 
be overly concerned with the content of messages, nor to simulate every 
little housekeeping step or network message.

I'm not looking for a bitcoin-network-in-a-bottle, I just want to see 
flows.  In the current situation, how often does a miner win if they 
hold their block until they see another one?  How does that change with 
various numbers of remote sensors?

Other applications in the future could very well involve transaction 
spread, double spends, network partitions, transaction replacement, etc.

If the simulation run in question involves blocks, I'd like realistic 
latencies for blocks.  If it is about transactions, the latencies should 
be realistic for transactions.

What is realistic for those?  That brings me to...

I'll kick in another 1 BTC for an instrumentation package for the 
reference client.  Same conditions as before.  A runtime option, 
disabled by default, that collects data for the simulator.  If this 
creates an uproar, I'll also accept a compile-time option. Support 
dumping to a file that can be uploaded to a parser as the bare minimum, 
and if you are feeling clever, add automatic uploads to a server 
specified in the conf file, or whatever.  All data should be anonymous, 
of course.  Local file should be in a format that humans can read (JSON, 
XML, CSV, etc) so that people can verify that the data is indeed anonymous.

I want stats on peers (number, turnover, latency, in/out, etc), stats on 
local operations (I/O stats, sigs per second when verifying a block, 
fraction of sig cache hits when validating, etc) and whatever else might 
be useful to a simulator.  Each parameter should collect min, max, mean, 
std. deviation, etc so that the simulator can provide realistic virtual 
nodes.

Also, I don't want anyone to think that they need to satisfy me 
personally to collect on either of these two bounties.  I will pay mine 
for a product that is generally along the lines I have laid out, if a 
couple of the core devs (Gavin, Greg, Jeff, sipa, Luke, etc) agree that 
your work is useful.


Christophe Biocca wrote:
>
> I might try building this sometime soon. I think it may also serve an 
> educational purpose when trying to understand the whole network's 
> behaviour.
>
> What level of accuracy are we looking for though? Obviously we need to 
> fully emulate the steps of the network protocol, and we need to be 
> able to specify time taken for transmission/processing for each node. 
> Do we care about the actual contents of the messages (to be able to 
> simulate double spend attempts, invalid transactions and blocks, SPV 
> node communication), and their validation (actual signatures and proof 
> of work)?
>
> I imagine the latter is pretty useless, beyond specifying that the 
> signature/proof of work is valid/invalid.
>
> If we could build up a set of experiments we'd like to run on it, it 
> would help clarify what's needed.
>
> Off the top of my head:
>
> - Peter Todd's miner strategy of sending blocks to only 51% of the 
> hashpower.
> - Various network split conditions, and how aware of the split nodes 
> would be (and the effect of client variability).
> - Testing the feasability of network race double spends, or Finney 
> attacks.
> - Various network partition scenarios.
> - Tricking SPV nodes.
>
> On Nov 6, 2013 6:37 AM, "Jeff Garzik" <jgarzik at bitpay.com 
> <mailto:jgarzik at bitpay.com>> wrote:
>
>     I will contribute 1 BTC to this bounty, under same terms and
>     expiration.
>
>
>     ------------------------------------------------------------------------------
>     November Webinars for C, C++, Fortran Developers
>     Accelerate application performance with scalable programming
>     models. Explore
>     techniques for threading, error checking, porting, and tuning. Get
>     the most
>     from the latest Intel processors and coprocessors. See abstracts
>     and register
>     http://pubads.g.doubleclick.net/gampad/clk?id=60136231&iu=/4140/ostg.clktrk
>     _______________________________________________
>     Bitcoin-development mailing list
>     Bitcoin-development at lists.sourceforge.net
>     <mailto:Bitcoin-development at lists.sourceforge.net>
>     https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
>
> ------------------------------------------------------------------------------
> November Webinars for C, C++, Fortran Developers
> Accelerate application performance with scalable programming models. Explore
> techniques for threading, error checking, porting, and tuning. Get the most
> from the latest Intel processors and coprocessors. See abstracts and register
> http://pubads.g.doubleclick.net/gampad/clk?id=60136231&iu=/4140/ostg.clktrk
>
>
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131106/ba3e152f/attachment.html>

From j.faber at elevate.nl  Thu Nov  7 08:07:56 2013
From: j.faber at elevate.nl (Jannes Faber)
Date: Thu, 7 Nov 2013 09:07:56 +0100
Subject: [Bitcoin-development] we can all relax now
In-Reply-To: <20131107034404.GA5140@savin>
References: <5279D49D.5050807@jerviss.org>
	<CAJHLa0N1-8LfFuWq=vS0r-t2Bt-qZ6yKuGjrnicUOj+K6Gpx5A@mail.gmail.com>
	<CANOOu=-MsPPgACKcHvsvtFAOAiULL+BOQvJz1tC3L=nT8wN01Q@mail.gmail.com>
	<20131107034404.GA5140@savin>
Message-ID: <CABeL=0g-_sDb_Ke+e9g+4xp4j1Qkkg6nUqcFAFGVf-QMgpsYsQ@mail.gmail.com>

I wonder if you need to take into consideration the fact that there might
be another "bad" pool (in the 1-Q part of the network) running the same
strategy and also holding on to two blocks of their own? Once they find
their third block before you do, then your 2 blocks lead is gone instantly.


--
Jannes Faber
Elevate BV

t: +31 20 636 9977
m: +31 6 5342 9669
j.faber at elevate.nl


On 7 November 2013 04:44, Peter Todd <pete at petertodd.org> wrote:

> On Wed, Nov 06, 2013 at 01:06:47PM -0500, Christophe Biocca wrote:
> > I might try building this sometime soon. I think it may also serve an
> > educational purpose when trying to understand the whole network's
> behaviour.
> >
> > What level of accuracy are we looking for though? Obviously we need to
> > fully emulate the steps of the network protocol, and we need to be able
> to
> > specify time taken for transmission/processing for each node. Do we care
> > about the actual contents of the messages (to be able to simulate double
> > spend attempts, invalid transactions and blocks, SPV node communication),
> > and their validation (actual signatures and proof of work)?
> >
> > I imagine the latter is pretty useless, beyond specifying that the
> > signature/proof of work is valid/invalid.
> >
> > If we could build up a set of experiments we'd like to run on it, it
> would
> > help clarify what's needed.
> >
> > Off the top of my head:
> >
> > - Peter Todd's miner strategy of sending blocks to only 51% of the
> > hashpower.
>
> Speaking of, I hadn't gotten around to doing up the math behind that
> strategy properly; turns out 51% I was overly optimistic and the actual
> threshold is 29.3%
>
> Suppose I find a block. I have Q hashing power, and the rest of the
> network 1-Q. Should I tell the rest of the network, or withhold that
> block and hope I find a second one?
>
> Now in a purely inflation subsidy environment, where I don't care about
> the other miners success, of course I should publish. However, if my
> goals are to find *more* blocks than the other miners for whatever
> reason, maybe because transaction fees matter or I'm trying to get
> nLockTime'd announce/commit fee sacrifices, it gets more complicated.
>
>
> There are three possible outcomes:
>
> 1) I find the next block, probability Q
> 2) They find the next block, probability 1-Q
> 2.1) I find the next block, probability Q, or (1-Q)*Q in total.
> 2.2) They find the next block, probability (1-Q)^2 in total.
>
> Note how only in the last option do I lose. So how much hashing power do
> I need before it is just as likely that the other miners will find two
> blocks before I find either one block, or two blocks? Easy enough:
>
> Q + (1-Q)*Q = (1-Q)^2 -> Q^2 - Q + 1/2 -> Q = (1 - \sqrt(2))/2
>
> Q ~= 29.2%
>
> So basically, if I'm trying to beat other miners, once I have >29.3% of
> the hashing power I have no incentive to publish the blocks I mine!
>
> But hang on, does it matter if I'm the one who actually has that hashing
> power? What if I just make sure that only >29.3% of the hashing power
> has that block? If my goal is to make sure that someone does useless
> work, and/or they are working on a lower height block than me, then no,
> I don't care, which means my original "send blocks to >51% of the
> hashing power" analysis was actually wrong, and the strategy is even
> more crazy: "send blocks to >29.3% of the hashing power" (!)
>
>
> Lets suppose I know that I'm two blocks ahead:
>
> 1) I find the next block: Q                    (3:0)
> 2) They find the next block: (1-Q)             (2:1)
> 2.1) I find the next block: (1-Q)*Q            (3:1)
> 2.2) They find the next block: (1-Q)^2         (2:2)
> 2.2.1) I find the next block: (1-Q)^2 * Q      (3:2)
> 2.2.2) They find the next block: (1-Q)^3       (2:3)
>
> At what hashing power should I release my blocks? So remember, I win
> this round on outcomes 1, 2.1, 2.2.1 and they only win on 2.2.2:
>
> Q + (1-Q)*Q + (1-Q)^2*Q = (1-Q)^3 -> Q = 1 - 2^-3
>
> Q ~= 20.6%
>
> Interesting... so as I get further ahead, or to be exact the group of
> miners who have a given block gets further ahead, I need less hashing
> power for my incentives to be to *not* publish the block I just found.
> Conversely this means I should try to make my blocks propagate to less
> of the hashing power, by whatever means necessary.
>
> Now remember, none of the above strategy requires me to have a special
> low-latency network or anything fancy. I don't even have to have a lot
> of hashing power - the strategy still works if I'm, say, a 5% pool. It
> just means I don't have the incentives people thought I did to propagate
> my blocks widely.
>
> The other nasty thing about this, is suppose I'm a miner and recently
> got a block from another miner: should I forward that block, or not
> bother? Well, it depends: if I have no idea how much of the hashing
> power has that block, I should forward the block. But again, if my goal
> is to be most likely to get the next block, I should only forward in
> such a way that >30% of the hashing power has the block.
>
> This means that if I have some information about what % already has that
> block, I have less incentive to forward! For instance, suppose that
> every major miner has been publishing their node addresses in their
> blocks - I'll have a pretty good idea of who probably has that most
> recent block, so I can easily make a well-optimized decision not to
> forward. Similarly because the 30% hashing power figure is the
> *integral* of time * hashes/second, if miners are forwarding
> near-target-headers, I might as well wait a few seconds and see if I see
> any near-target-headers; if I do for this block then I have evidence
> that hashing power does have it, and I shouldn't forward.
>
>
> So yeah, we're fucked and have got to fix this awful incentive structure
> somehow before the inflation subsidy gets any smaller. Also, raising the
> blocksize, especially by just removing the limit, is utter madness given
> it can be used to slow down block propagation selectively, so the
> hashing power that gets a given block is limited repeatably to the same
> group.
>
>
> P.S: If any large pools want to try this stuff out, give me a shout. You
> have my PGP key - confidentiality assured.
>
> P.P.S: If you're mining on a pool with more than, like, 1% hashing
> power, do the math on varience... Seriously, stop it and go mine on a
> smaller pool, or better yet, p2pool.
>
> --
> 'peter'[:-1]@petertodd.org
> 00000000000000078b970f5134bae96da021744f80e04aa9dc2e2d2c2bcb07c2
>
>
> ------------------------------------------------------------------------------
> November Webinars for C, C++, Fortran Developers
> Accelerate application performance with scalable programming models.
> Explore
> techniques for threading, error checking, porting, and tuning. Get the most
> from the latest Intel processors and coprocessors. See abstracts and
> register
> http://pubads.g.doubleclick.net/gampad/clk?id=60136231&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131107/8ba3db34/attachment.html>

From pete at petertodd.org  Thu Nov  7 13:09:20 2013
From: pete at petertodd.org (Peter Todd)
Date: Thu, 7 Nov 2013 08:09:20 -0500
Subject: [Bitcoin-development] we can all relax now
In-Reply-To: <527B1E30.9090800@jerviss.org>
References: <5279D49D.5050807@jerviss.org>
	<CAJHLa0N1-8LfFuWq=vS0r-t2Bt-qZ6yKuGjrnicUOj+K6Gpx5A@mail.gmail.com>
	<CANOOu=-MsPPgACKcHvsvtFAOAiULL+BOQvJz1tC3L=nT8wN01Q@mail.gmail.com>
	<20131107034404.GA5140@savin> <527B13EC.7020708@jerviss.org>
	<20131107043310.GA30788@savin> <527B1E30.9090800@jerviss.org>
Message-ID: <20131107130920.GA22476@savin>

On Wed, Nov 06, 2013 at 10:59:28PM -0600, Kyle Jerviss wrote:
> Each block that you solve has a reward.  In practice, some blocks
> will be orphaned, so the expected reward is slightly less than the
> nominal reward.  Each second that you delay publishing a block, the
> expected reward drops somewhat.

You don't understand how to read papers.

A good author will state his assumptions. For instance my third
paragraph read:

    Now in a purely inflation subsidy environment, where I don't care about
    the other miners success, of course I should publish. However, if my
    goals are to find *more* blocks than the other miners for whatever
    reason, maybe because transaction fees matter or I'm trying to get
    nLockTime'd announce/commit fee sacrifices, it gets more complicated.

Now that you understand the assumptions made, you can attack the paper
in one of two ways:

1) Show it's wrong.

2) Show its assumptions make it irrelevant.

You've done neither.

-- 
'peter'[:-1]@petertodd.org
0000000000000006d61eb32f3643aa30c2f9647e4e758af84b03abc43f09959f
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 685 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131107/bf755f03/attachment.sig>

From pete at petertodd.org  Thu Nov  7 13:24:42 2013
From: pete at petertodd.org (Peter Todd)
Date: Thu, 7 Nov 2013 08:24:42 -0500
Subject: [Bitcoin-development] we can all relax now
In-Reply-To: <CABsx9T35Po7pUb2sr15zD5WODYqR4-xNvJD0Jz5+Of3d-NjPdg@mail.gmail.com>
References: <5279D49D.5050807@jerviss.org>
	<CAJHLa0N1-8LfFuWq=vS0r-t2Bt-qZ6yKuGjrnicUOj+K6Gpx5A@mail.gmail.com>
	<CANOOu=-MsPPgACKcHvsvtFAOAiULL+BOQvJz1tC3L=nT8wN01Q@mail.gmail.com>
	<20131107034404.GA5140@savin>
	<CABsx9T35Po7pUb2sr15zD5WODYqR4-xNvJD0Jz5+Of3d-NjPdg@mail.gmail.com>
Message-ID: <20131107132442.GB22476@savin>

On Thu, Nov 07, 2013 at 02:56:56PM +1000, Gavin Andresen wrote:
> > P.S: If any large pools want to try this stuff out, give me a shout. You
> > have my PGP key - confidentiality assured.
> >
> 
> If I find out one of the large pools decides to run this 'experiment' on
> the main network, I will make it my mission to tell people to switch to a
> more responsible pool.

I hope they listen.

A few months ago ASICMiner could have made use of that attack if my
memories of their peak hashing power were correct. They certainely could
have used the selfish miner version, (we need better name for that)
although development costs would eat into profits.

GHash.IO, 22%, says they're a "private Bitfury ASIC mining pool" - dunno
what they mean by that, but they're involved with CEX.IO who has
physical control of a bunch of hashing power so I guess that means their
model is like ASICMiners. They're a bit short of 30%, but maybe some
behind-the-scenes deals would fix that, and/or lowering the barrier with
reactive block publishing. (a better name)

> And if you think you can get away with driving up EVERYBODY's orphan rate
> without anybody noticing, you should think again.

...and remember, if you only do the attack a little bit, you still can
earn more profit, and only drive up the orphan rate a little bit. So who
knows, maybe the orphans are real, or maybe they're an attack? ASICMiner
was involved with a bunch of orphans a while back...

You know what this calls for? A witchhunt!

BURN THE LARGE POOLS!

> > P.P.S: If you're mining on a pool with more than, like, 1% hashing
> > power, do the math on varience... Seriously, stop it and go mine on a
> > smaller pool, or better yet, p2pool.
> >
> 
> That I agree with.

Glad to hear.

-- 
'peter'[:-1]@petertodd.org
0000000000000007bd936f19e33bc8b8f9bb1f4c013b863ef60a7f5a6a5d2112
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 685 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131107/9ee39a7b/attachment.sig>

From gronager at ceptacle.com  Thu Nov  7 14:11:39 2013
From: gronager at ceptacle.com (Michael Gronager)
Date: Thu, 07 Nov 2013 15:11:39 +0100
Subject: [Bitcoin-development] On the optimal block size and why transaction
 fees are 8 times too low (or transactions 8 times too big)
Message-ID: <527B9F9B.4060808@ceptacle.com>

Following the discussion on the recent mining sybil trick, I reread the
article on block propagation by Decker et al.* and decided to use it for
doing a proper estimate of transaction fee size and optimal block size.

The propagation of a block depends on and is roughly proportional to its
size. Further, the slower a block propagates the higher the risk of a
fork, so as a miner you are basically juggling the risk of a fork
(meaning you loose your bounty) vs the opportunity for including more
transactions and hence also get those fees.

This alone will dictate the minimal transaction fee as well as the
optimal block size!

Lets try to put it into equations. For the purpose of this initial study
lets simplify the work by Decker et al. Roughly, we can say that the
average propagation time for a block is t_propagate, and the average
time between blocks is t_blocks. Those are roughly 10sec and 600sec
respectively. The risk of someone else mining a block before your block
propagates is roughly**:

P_fork = t_propagate/t_blocks (~1/60)

Also note that propagation time is a function of block size, S:

t_propagate = t_0 + alpha*S

where Decker et al have determined alpha to 80ms/kb. We also define the
fee size pr kilobyte, f, so

E_fee = f*S

Given these equations the expected average earning is:

E = P_hashrate*(1 - P_fork)*(E_bounty + E_fees)

And inserting:

E  = P_hashrate*[1 - (t_0 + alpha*S)/t_block]*(E_bounty + f*S)

We would like to choose the fee so the more transactions we include the
more we earn. I.e. dE/dS > 0:

dE/dS = P_hashrate*{[(t_block - t_0)*f - alpha*E_bounty]/t_block -
2*alpha*f/t_block*S}

Which gives:

 f > alpha*E_bounty/(t_block-t_0) ~ alpha*E_bounty/t_block

or f > 80*25/600000 = 0.0033 or assuming a standard transaction size of
0.227kb:

f_tx > 0.00076.

Note that this number is 8 times higher than the current transaction
fee! So the current optimal block size is an empty block i.e. without
other transactions than the coinbase! (miners don't listen now...)

Lets see what you loose by e.g. including 1000 transactions:

E(1000) = P_hashrate*24.34XBT

Which is a loss of 2.6% compared to not including transactions at all!

So there are two ways forward from here. 1) raise the minimum fee, and
2) make transactions smaller. We cannot make transactions much smaller,
but we can utilize that most of them have already been broadcasted
verified and validated and then just include their hash in the block***.
This changes the relevant size for a transaction from 0.227kb to
0.032kb. Which makes f_tx = 0.00011. We are almost there!

Now assume that we implement this change and raise the minimum fee to
0.00015, what is then the optimal block size (dE/dS = 0) ?

 S = 1/2 * (t_block/alpha - E_bounty/f)

Which gives 1083kb for a bounty of 25 and 2417kb for a bounty of 12.5.
Optimal size in case of no bounty or an infinite fee is 3750MB.

Final conclusions is that the fee currently is too small and that there
is no need to keep a maximum block size, the fork probability will
automatically provide an incentive to not let block grows into infinity.

*)
http://www.tik.ee.ethz.ch/file/49318d3f56c1d525aabf7fda78b23fc0/P2P2013_041.pdf
**) The calculations should be done using the proper integrals and
simulations, but I will leave that for academia ;)
***) A nice side effect from switching to broadcasting transactions in
blocks as only their hash is that it decouples fee size from transaction
size!



From pieter.wuille at gmail.com  Thu Nov  7 15:00:01 2013
From: pieter.wuille at gmail.com (Pieter Wuille)
Date: Thu, 7 Nov 2013 16:00:01 +0100
Subject: [Bitcoin-development] On the optimal block size and why
 transaction fees are 8 times too low (or transactions 8 times too big)
In-Reply-To: <527B9F9B.4060808@ceptacle.com>
References: <527B9F9B.4060808@ceptacle.com>
Message-ID: <CAPg+sBimHp-dSPLvyq_P0aspu_Mr3wFTox0-yKWs+USRwV3Wnw@mail.gmail.com>

Hi,

(I didn't have time to read your e-mail entirely yet, I'll do so later)

I believe that C. Decker's paper used measurements for propagation
delays for blocks 180000-190000, which happened between may and juli
2012. The latest bitcoind/bitcoin-qt release at the time was 0.6.3.

I'm sure the general patterns are valid, but if you're relying on
actual speed numbers, I believe they may be very different now. I
don't have numbers of course, but at least the changes 0.8 should
impact propagation significantly. Some changes merged in git head (to
become 0.9) could improve things further. If we're talking about
long-term scalability, we should base decisions on the best technology
available, at least.

-- 
Pieter


On Thu, Nov 7, 2013 at 3:11 PM, Michael Gronager <gronager at ceptacle.com> wrote:
> Following the discussion on the recent mining sybil trick, I reread the
> article on block propagation by Decker et al.* and decided to use it for
> doing a proper estimate of transaction fee size and optimal block size.
>
> The propagation of a block depends on and is roughly proportional to its
> size. Further, the slower a block propagates the higher the risk of a
> fork, so as a miner you are basically juggling the risk of a fork
> (meaning you loose your bounty) vs the opportunity for including more
> transactions and hence also get those fees.
>
> This alone will dictate the minimal transaction fee as well as the
> optimal block size!
>
> Lets try to put it into equations. For the purpose of this initial study
> lets simplify the work by Decker et al. Roughly, we can say that the
> average propagation time for a block is t_propagate, and the average
> time between blocks is t_blocks. Those are roughly 10sec and 600sec
> respectively. The risk of someone else mining a block before your block
> propagates is roughly**:
>
> P_fork = t_propagate/t_blocks (~1/60)
>
> Also note that propagation time is a function of block size, S:
>
> t_propagate = t_0 + alpha*S
>
> where Decker et al have determined alpha to 80ms/kb. We also define the
> fee size pr kilobyte, f, so
>
> E_fee = f*S
>
> Given these equations the expected average earning is:
>
> E = P_hashrate*(1 - P_fork)*(E_bounty + E_fees)
>
> And inserting:
>
> E  = P_hashrate*[1 - (t_0 + alpha*S)/t_block]*(E_bounty + f*S)
>
> We would like to choose the fee so the more transactions we include the
> more we earn. I.e. dE/dS > 0:
>
> dE/dS = P_hashrate*{[(t_block - t_0)*f - alpha*E_bounty]/t_block -
> 2*alpha*f/t_block*S}
>
> Which gives:
>
>  f > alpha*E_bounty/(t_block-t_0) ~ alpha*E_bounty/t_block
>
> or f > 80*25/600000 = 0.0033 or assuming a standard transaction size of
> 0.227kb:
>
> f_tx > 0.00076.
>
> Note that this number is 8 times higher than the current transaction
> fee! So the current optimal block size is an empty block i.e. without
> other transactions than the coinbase! (miners don't listen now...)
>
> Lets see what you loose by e.g. including 1000 transactions:
>
> E(1000) = P_hashrate*24.34XBT
>
> Which is a loss of 2.6% compared to not including transactions at all!
>
> So there are two ways forward from here. 1) raise the minimum fee, and
> 2) make transactions smaller. We cannot make transactions much smaller,
> but we can utilize that most of them have already been broadcasted
> verified and validated and then just include their hash in the block***.
> This changes the relevant size for a transaction from 0.227kb to
> 0.032kb. Which makes f_tx = 0.00011. We are almost there!
>
> Now assume that we implement this change and raise the minimum fee to
> 0.00015, what is then the optimal block size (dE/dS = 0) ?
>
>  S = 1/2 * (t_block/alpha - E_bounty/f)
>
> Which gives 1083kb for a bounty of 25 and 2417kb for a bounty of 12.5.
> Optimal size in case of no bounty or an infinite fee is 3750MB.
>
> Final conclusions is that the fee currently is too small and that there
> is no need to keep a maximum block size, the fork probability will
> automatically provide an incentive to not let block grows into infinity.
>
> *)
> http://www.tik.ee.ethz.ch/file/49318d3f56c1d525aabf7fda78b23fc0/P2P2013_041.pdf
> **) The calculations should be done using the proper integrals and
> simulations, but I will leave that for academia ;)
> ***) A nice side effect from switching to broadcasting transactions in
> blocks as only their hash is that it decouples fee size from transaction
> size!
>
> ------------------------------------------------------------------------------
> November Webinars for C, C++, Fortran Developers
> Accelerate application performance with scalable programming models. Explore
> techniques for threading, error checking, porting, and tuning. Get the most
> from the latest Intel processors and coprocessors. See abstracts and register
> http://pubads.g.doubleclick.net/gampad/clk?id=60136231&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development



From pieter.wuille at gmail.com  Thu Nov  7 15:19:24 2013
From: pieter.wuille at gmail.com (Pieter Wuille)
Date: Thu, 7 Nov 2013 16:19:24 +0100
Subject: [Bitcoin-development] On the optimal block size and why
 transaction fees are 8 times too low (or transactions 8 times too big)
In-Reply-To: <CAPg+sBimHp-dSPLvyq_P0aspu_Mr3wFTox0-yKWs+USRwV3Wnw@mail.gmail.com>
References: <527B9F9B.4060808@ceptacle.com>
	<CAPg+sBimHp-dSPLvyq_P0aspu_Mr3wFTox0-yKWs+USRwV3Wnw@mail.gmail.com>
Message-ID: <CAPg+sBhJqavKYW5TkW4N49FDiR-iRFrTaAEeeXL8rRtAOKjupQ@mail.gmail.com>

Correcting myself:

On Thu, Nov 7, 2013 at 4:00 PM, Pieter Wuille <pieter.wuille at gmail.com> wrote:
> I believe that C. Decker's paper used measurements for propagation
> delays for blocks 180000-190000, which happened between may and juli
> 2012. The latest bitcoind/bitcoin-qt release at the time was 0.6.3.

They did use data from blocks 20000-210000, september-november 2012.
That was still before the 0.8 release, however.

-- 
Pieter



From mike at plan99.net  Thu Nov  7 15:22:16 2013
From: mike at plan99.net (Mike Hearn)
Date: Thu, 7 Nov 2013 16:22:16 +0100
Subject: [Bitcoin-development] On the optimal block size and why
 transaction fees are 8 times too low (or transactions 8 times too big)
In-Reply-To: <CAPg+sBhJqavKYW5TkW4N49FDiR-iRFrTaAEeeXL8rRtAOKjupQ@mail.gmail.com>
References: <527B9F9B.4060808@ceptacle.com>
	<CAPg+sBimHp-dSPLvyq_P0aspu_Mr3wFTox0-yKWs+USRwV3Wnw@mail.gmail.com>
	<CAPg+sBhJqavKYW5TkW4N49FDiR-iRFrTaAEeeXL8rRtAOKjupQ@mail.gmail.com>
Message-ID: <CANEZrP0wUkjHP8LyUnNDSkYRy-tbSo8A7NmdL4nPFwMZ6oHV-Q@mail.gmail.com>

I think trying to help miners figure out the propagation/fees tradeoff at
the moment is a non-starter until we understand it better ourselves. A
server that tracks and records block propagation times, how many fees per
passed up per block, orphan stats per size bucket etc would be tremendously
helpful.


On Thu, Nov 7, 2013 at 4:19 PM, Pieter Wuille <pieter.wuille at gmail.com>wrote:

> Correcting myself:
>
> On Thu, Nov 7, 2013 at 4:00 PM, Pieter Wuille <pieter.wuille at gmail.com>
> wrote:
> > I believe that C. Decker's paper used measurements for propagation
> > delays for blocks 180000-190000, which happened between may and juli
> > 2012. The latest bitcoind/bitcoin-qt release at the time was 0.6.3.
>
> They did use data from blocks 20000-210000, september-november 2012.
> That was still before the 0.8 release, however.
>
> --
> Pieter
>
>
> ------------------------------------------------------------------------------
> November Webinars for C, C++, Fortran Developers
> Accelerate application performance with scalable programming models.
> Explore
> techniques for threading, error checking, porting, and tuning. Get the most
> from the latest Intel processors and coprocessors. See abstracts and
> register
> http://pubads.g.doubleclick.net/gampad/clk?id=60136231&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131107/65ec5f61/attachment.html>

From gronager at ceptacle.com  Thu Nov  7 15:53:12 2013
From: gronager at ceptacle.com (Michael Gronager)
Date: Thu, 07 Nov 2013 16:53:12 +0100
Subject: [Bitcoin-development] On the optimal block size and why
 transaction fees are 8 times too low (or transactions 8 times too big)
In-Reply-To: <CANEZrP0wUkjHP8LyUnNDSkYRy-tbSo8A7NmdL4nPFwMZ6oHV-Q@mail.gmail.com>
References: <527B9F9B.4060808@ceptacle.com>
	<CAPg+sBimHp-dSPLvyq_P0aspu_Mr3wFTox0-yKWs+USRwV3Wnw@mail.gmail.com>
	<CAPg+sBhJqavKYW5TkW4N49FDiR-iRFrTaAEeeXL8rRtAOKjupQ@mail.gmail.com>
	<CANEZrP0wUkjHP8LyUnNDSkYRy-tbSo8A7NmdL4nPFwMZ6oHV-Q@mail.gmail.com>
Message-ID: <527BB768.8010202@ceptacle.com>

Mike, Pieter,

My writeup outlines a framework for good approximation to a minimal fee
as well as the optimal block size. The model has basically just one
parameter, the propagation time - if that goes down, so can the fee.
(Well there is another parameter too, the time btw blocks, which
currently with the current hash acceleration is more like 400 than 600).

Also seconding Mike, that, yes, it would be tremendously useful to track
propagation times and other things on the network to help us all decide
the proper settings.

Finally, it would be great if someone from academia would grab the ball
and do the full probabilistic analysis based on my outline.

Michael

On 7/11/13, 16:22 , Mike Hearn wrote:
> I think trying to help miners figure out the propagation/fees tradeoff
> at the moment is a non-starter until we understand it better ourselves.
> A server that tracks and records block propagation times, how many fees
> per passed up per block, orphan stats per size bucket etc would be
> tremendously helpful.
> 
> 
> On Thu, Nov 7, 2013 at 4:19 PM, Pieter Wuille <pieter.wuille at gmail.com
> <mailto:pieter.wuille at gmail.com>> wrote:
> 
>     Correcting myself:
> 
>     On Thu, Nov 7, 2013 at 4:00 PM, Pieter Wuille
>     <pieter.wuille at gmail.com <mailto:pieter.wuille at gmail.com>> wrote:
>     > I believe that C. Decker's paper used measurements for propagation
>     > delays for blocks 180000-190000, which happened between may and juli
>     > 2012. The latest bitcoind/bitcoin-qt release at the time was 0.6.3.
> 
>     They did use data from blocks 20000-210000, september-november 2012.
>     That was still before the 0.8 release, however.
> 
>     --
>     Pieter
> 
>     ------------------------------------------------------------------------------
>     November Webinars for C, C++, Fortran Developers
>     Accelerate application performance with scalable programming models.
>     Explore
>     techniques for threading, error checking, porting, and tuning. Get
>     the most
>     from the latest Intel processors and coprocessors. See abstracts and
>     register
>     http://pubads.g.doubleclick.net/gampad/clk?id=60136231&iu=/4140/ostg.clktrk
>     _______________________________________________
>     Bitcoin-development mailing list
>     Bitcoin-development at lists.sourceforge.net
>     <mailto:Bitcoin-development at lists.sourceforge.net>
>     https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 
> 
> 
> 
> ------------------------------------------------------------------------------
> November Webinars for C, C++, Fortran Developers
> Accelerate application performance with scalable programming models. Explore
> techniques for threading, error checking, porting, and tuning. Get the most 
> from the latest Intel processors and coprocessors. See abstracts and register
> http://pubads.g.doubleclick.net/gampad/clk?id=60136231&iu=/4140/ostg.clktrk
> 
> 
> 
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 




From mike at plan99.net  Thu Nov  7 16:14:47 2013
From: mike at plan99.net (Mike Hearn)
Date: Thu, 7 Nov 2013 17:14:47 +0100
Subject: [Bitcoin-development] we can all relax now
In-Reply-To: <20131107132442.GB22476@savin>
References: <5279D49D.5050807@jerviss.org>
	<CAJHLa0N1-8LfFuWq=vS0r-t2Bt-qZ6yKuGjrnicUOj+K6Gpx5A@mail.gmail.com>
	<CANOOu=-MsPPgACKcHvsvtFAOAiULL+BOQvJz1tC3L=nT8wN01Q@mail.gmail.com>
	<20131107034404.GA5140@savin>
	<CABsx9T35Po7pUb2sr15zD5WODYqR4-xNvJD0Jz5+Of3d-NjPdg@mail.gmail.com>
	<20131107132442.GB22476@savin>
Message-ID: <CANEZrP3T4qsz8qqPxqtP5oXNYA_WT5OQPrC2uAKuQyDqJ0N9Rw@mail.gmail.com>

Once the ASIC race calms down because everyone has one, has more or less
optimal power supplies, process improvements aren't easily reachable
anymore etc then I'd expect people to dissipate from the large pools
because eliminating their fees will become the next lowest hanging fruit to
squeeze out extra profit. There's no particular reason we need only a
handful of pools that control a major fraction of the hashpower.

If we end up with a few hundred pools or lots of miners on p2pool, then a
lot of these theoretical attacks become not very relevant (I don't think ID
sacrifices will be so common or large as to justify a pile of custom mining
code+strategies at any point ...)


On Thu, Nov 7, 2013 at 2:24 PM, Peter Todd <pete at petertodd.org> wrote:

> On Thu, Nov 07, 2013 at 02:56:56PM +1000, Gavin Andresen wrote:
> > > P.S: If any large pools want to try this stuff out, give me a shout.
> You
> > > have my PGP key - confidentiality assured.
> > >
> >
> > If I find out one of the large pools decides to run this 'experiment' on
> > the main network, I will make it my mission to tell people to switch to a
> > more responsible pool.
>
> I hope they listen.
>
> A few months ago ASICMiner could have made use of that attack if my
> memories of their peak hashing power were correct. They certainely could
> have used the selfish miner version, (we need better name for that)
> although development costs would eat into profits.
>
> GHash.IO, 22%, says they're a "private Bitfury ASIC mining pool" - dunno
> what they mean by that, but they're involved with CEX.IO who has
> physical control of a bunch of hashing power so I guess that means their
> model is like ASICMiners. They're a bit short of 30%, but maybe some
> behind-the-scenes deals would fix that, and/or lowering the barrier with
> reactive block publishing. (a better name)
>
> > And if you think you can get away with driving up EVERYBODY's orphan rate
> > without anybody noticing, you should think again.
>
> ...and remember, if you only do the attack a little bit, you still can
> earn more profit, and only drive up the orphan rate a little bit. So who
> knows, maybe the orphans are real, or maybe they're an attack? ASICMiner
> was involved with a bunch of orphans a while back...
>
> You know what this calls for? A witchhunt!
>
> BURN THE LARGE POOLS!
>
> > > P.P.S: If you're mining on a pool with more than, like, 1% hashing
> > > power, do the math on varience... Seriously, stop it and go mine on a
> > > smaller pool, or better yet, p2pool.
> > >
> >
> > That I agree with.
>
> Glad to hear.
>
> --
> 'peter'[:-1]@petertodd.org
> 0000000000000007bd936f19e33bc8b8f9bb1f4c013b863ef60a7f5a6a5d2112
>
>
> ------------------------------------------------------------------------------
> November Webinars for C, C++, Fortran Developers
> Accelerate application performance with scalable programming models.
> Explore
> techniques for threading, error checking, porting, and tuning. Get the most
> from the latest Intel processors and coprocessors. See abstracts and
> register
> http://pubads.g.doubleclick.net/gampad/clk?id=60136231&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131107/4f561b99/attachment.html>

From lidstrom83 at gmail.com  Thu Nov  7 18:28:52 2013
From: lidstrom83 at gmail.com (Daniel Lidstrom)
Date: Thu, 7 Nov 2013 11:28:52 -0700
Subject: [Bitcoin-development] we can all relax now
In-Reply-To: <CANEZrP3T4qsz8qqPxqtP5oXNYA_WT5OQPrC2uAKuQyDqJ0N9Rw@mail.gmail.com>
References: <5279D49D.5050807@jerviss.org>
	<CAJHLa0N1-8LfFuWq=vS0r-t2Bt-qZ6yKuGjrnicUOj+K6Gpx5A@mail.gmail.com>
	<CANOOu=-MsPPgACKcHvsvtFAOAiULL+BOQvJz1tC3L=nT8wN01Q@mail.gmail.com>
	<20131107034404.GA5140@savin>
	<CABsx9T35Po7pUb2sr15zD5WODYqR4-xNvJD0Jz5+Of3d-NjPdg@mail.gmail.com>
	<20131107132442.GB22476@savin>
	<CANEZrP3T4qsz8qqPxqtP5oXNYA_WT5OQPrC2uAKuQyDqJ0N9Rw@mail.gmail.com>
Message-ID: <CADjHg8GNuoPQ7Ama0A=iGmboeE_T5LrLRHPKyvQqWwKAjT3K3w@mail.gmail.com>

Hey Peter, something seems wrong with your above analysis: I think a miner
would withhold his block not because it leads to a greater probability of
winning the next one, but because it increases his expected revenue.

Suppose a cabal with fraction q of the total hashing power is n blocks
ahead on a secret branch of that has mined r_tot coins, and let r_next be
its next block's reward.  If the cabal chooses not to broadcast its secret
chain until at least the next block, its expected revenue after the next
block is found is

(1 - (1-q)^(n+1))*(r_tot + r_next)

If it does broadcast, its expected revenue after the next block is found is

r_tot + q * r_next

If the cabal seeks only to maximize immediate revenue, then after a bit of
algebra we find that it will withhold its chain if

q > 1 - ( 1 + r_tot / r_next )^(-1/n)

So if the cabal has just mined his first block off of the public chain,
i.e. n = 1, and if the block reward is relatively stable, i.e. r_next =
r_tot, then it needs q > 50% to profitably withhold, not the 29.2% you
calculated.

>From this formula we can also see that if the miner wins the race and
withholds again, then he must grow q to compensate for the increase in
r_tot, and any decrease in n.  So generally publication becomes
increasingly in the cabal's interest, and secret chains will tend not to
grow too large (intuition tells me that simulations using the above formula
should bear this out).

This seem correct to you?


On Thu, Nov 7, 2013 at 9:14 AM, Mike Hearn <mike at plan99.net> wrote:

> Once the ASIC race calms down because everyone has one, has more or less
> optimal power supplies, process improvements aren't easily reachable
> anymore etc then I'd expect people to dissipate from the large pools
> because eliminating their fees will become the next lowest hanging fruit to
> squeeze out extra profit. There's no particular reason we need only a
> handful of pools that control a major fraction of the hashpower.
>
> If we end up with a few hundred pools or lots of miners on p2pool, then a
> lot of these theoretical attacks become not very relevant (I don't think ID
> sacrifices will be so common or large as to justify a pile of custom mining
> code+strategies at any point ...)
>
>
> On Thu, Nov 7, 2013 at 2:24 PM, Peter Todd <pete at petertodd.org> wrote:
>
>> On Thu, Nov 07, 2013 at 02:56:56PM +1000, Gavin Andresen wrote:
>> > > P.S: If any large pools want to try this stuff out, give me a shout.
>> You
>> > > have my PGP key - confidentiality assured.
>> > >
>> >
>> > If I find out one of the large pools decides to run this 'experiment' on
>> > the main network, I will make it my mission to tell people to switch to
>> a
>> > more responsible pool.
>>
>> I hope they listen.
>>
>> A few months ago ASICMiner could have made use of that attack if my
>> memories of their peak hashing power were correct. They certainely could
>> have used the selfish miner version, (we need better name for that)
>> although development costs would eat into profits.
>>
>> GHash.IO, 22%, says they're a "private Bitfury ASIC mining pool" - dunno
>> what they mean by that, but they're involved with CEX.IO who has
>> physical control of a bunch of hashing power so I guess that means their
>> model is like ASICMiners. They're a bit short of 30%, but maybe some
>> behind-the-scenes deals would fix that, and/or lowering the barrier with
>> reactive block publishing. (a better name)
>>
>> > And if you think you can get away with driving up EVERYBODY's orphan
>> rate
>> > without anybody noticing, you should think again.
>>
>> ...and remember, if you only do the attack a little bit, you still can
>> earn more profit, and only drive up the orphan rate a little bit. So who
>> knows, maybe the orphans are real, or maybe they're an attack? ASICMiner
>> was involved with a bunch of orphans a while back...
>>
>> You know what this calls for? A witchhunt!
>>
>> BURN THE LARGE POOLS!
>>
>> > > P.P.S: If you're mining on a pool with more than, like, 1% hashing
>> > > power, do the math on varience... Seriously, stop it and go mine on a
>> > > smaller pool, or better yet, p2pool.
>> > >
>> >
>> > That I agree with.
>>
>> Glad to hear.
>>
>> --
>> 'peter'[:-1]@petertodd.org
>> 0000000000000007bd936f19e33bc8b8f9bb1f4c013b863ef60a7f5a6a5d2112
>>
>>
>> ------------------------------------------------------------------------------
>> November Webinars for C, C++, Fortran Developers
>> Accelerate application performance with scalable programming models.
>> Explore
>> techniques for threading, error checking, porting, and tuning. Get the
>> most
>> from the latest Intel processors and coprocessors. See abstracts and
>> register
>>
>> http://pubads.g.doubleclick.net/gampad/clk?id=60136231&iu=/4140/ostg.clktrk
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>
>>
>
>
> ------------------------------------------------------------------------------
> November Webinars for C, C++, Fortran Developers
> Accelerate application performance with scalable programming models.
> Explore
> techniques for threading, error checking, porting, and tuning. Get the most
> from the latest Intel processors and coprocessors. See abstracts and
> register
> http://pubads.g.doubleclick.net/gampad/clk?id=60136231&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131107/a324be8f/attachment.html>

From adam at cypherspace.org  Thu Nov  7 20:05:34 2013
From: adam at cypherspace.org (Adam Back)
Date: Thu, 7 Nov 2013 21:05:34 +0100
Subject: [Bitcoin-development] comments on selfish-mining model (Re: BIP
 proposal - patch to raise selfish mining threshold.)
In-Reply-To: <CABT1wWkOukEzxK5fLbnA4ZgJGN1hb_DMteCJOfA13FE_QZCi=Q@mail.gmail.com>
References: <CABT1wWkOukEzxK5fLbnA4ZgJGN1hb_DMteCJOfA13FE_QZCi=Q@mail.gmail.com>
Message-ID: <20131107200534.GA27068@netbook.cypherspace.org>

(Talking about the paper, not the BIP).  With regard to racing the other
winner which catches up when private pool length=1:

i) the model does not appear to take into account that when another pool
goes on to mine a block, and the attacker publishes their selfishly-withheld
block, the selfish pool will not be able to change the existing winners
mind.  This is not insignificant as the pools have 30%, 20%, 15%, 7% etc. 

ii) The miners already have an incentive, as other big bitcoin processors,
to maintain fast, secure and redundant links to other significant miners. 

The attacker is giving up a large proportion of their winnings from the
times that they win at all.  Say the attacker IS the 30% pool, when he wins
and waits for someone else to win, > 80% of the network is pool mined, so
there is a good chance that the other winner individually represents a
non-negligible proportion of the network or a sufficiently well connected
portion of the network that the attacker will be unable to race them to
publication with a useful proportion of the network.

iii) Also broadcast is not instantaneous, lets say network propagation takes
10 seconds; a big proportion of the time, the actual mining times will be
more than 5 seconds apart so that by the time the selfish miner learns of
the block, much of the network will already have accepted it block as first.

iv) Even within the 10 seconds ambiguity period, the more powerful miner
will tend statistically to come first, and so reach a bigger portion of the
network, as well as having a stronger incentive to maintain links as in ii).

These four factors erode the achievable \gamma parameter.  I suspect it
unlikely \gamma>0.5 would be achievable, putting the profitable threshold
\alpha in 25% - 33%.  (And assuming whatever techniques to reduce latency
are used by the selfish pools can be used by other pools.)


Your main result that even with \gamma=0 (if you dont win any races) that
you still win once the selfish pool reaches 33% is an important new
indication, which needs further consideration.  (And you could expect to win
some percentage \gamma>0 even with the factors I mention, and full
implementation of the same latency reduction techniques in all moderate
sized miners, selfish and normal).

It is also not clear what will happen if multiple selfish miners compete
with each other.  A selfish miner cooperating as a peer to increase
percentage runs risk of mutual sabotage - he has to announce his private
block to his co-conspirator, and the co-conspirator may publish, or collude
with another non-selfish miner.  

Your supposition is there is a profit motive to collude.  However there are
other profit motives in bitcoin that are not exercised - for example there
were for sometime 2 pools that had excess of 50% power, and yet this was not
abused for double spending.  Of course increasing profit by a new mining
strategy is not theft as double spending which has a clear loser.  Miners
even exercised restraint and volutarily avoided growing over 50%.


As others have I think said by now analysis is welcome.  It seems that Peter
Todd may have observed the same or something similar wrt miner incentives
some months ago, though it wasnt as widely read nor formally verified.  

It might be useful to release the source for your simulator if that is open
to you.


In my opinion a constructive direction for reducing centralization risks is
to try to reduce the use of and motivation for pools.  Even at <51% per pool
there is (probabilistic) miner risk in double-spends.  And there is risk
that the large miners evolve to become a defacto policy enforcement point
for policies not aligned with user interests, or with fungibility of bitcoin
which itself presents another kind of risk (defacto reduced fungibility
should this arise would also be bad for bitcoin).

Also without even having mining power, there is scope to network hacking (eg
of routers in front of miners) to influence the mining profit, and even
double spend.  As I mentioned large miners have an incentive to maintain
secure redudant links (probably some links using Tor for blocks) as a
counter-measure. 

Adam

On Tue, Nov 05, 2013 at 11:56:53AM -0500, Ittay wrote:
>   Hello,
>   Please see below our BIP for raising the selfish mining threshold.
>   Looking forward to your comments.



From pete at petertodd.org  Thu Nov  7 20:31:23 2013
From: pete at petertodd.org (Peter Todd)
Date: Thu, 7 Nov 2013 15:31:23 -0500
Subject: [Bitcoin-development] On the optimal block size and why
 transaction fees are 8 times too low (or transactions 8 times too big)
In-Reply-To: <527B9F9B.4060808@ceptacle.com>
References: <527B9F9B.4060808@ceptacle.com>
Message-ID: <20131107203123.GB3805@petertodd.org>

> Final conclusions is that the fee currently is too small and that there
> is no need to keep a maximum block size, the fork probability will
> automatically provide an incentive to not let block grows into infinity.

Your definition of P_fork is inaccurate for a miner with non-negligable
hashing power - a miner will never fork themselves. Taking that into
account we have three outcomes:

1) The block propagates without any other miner finding a block.
2) During propagation another miner finds a block. (tie)
2.1) You win the tie by finding another block.
2.2) You lose the tie because someone else finds a block.

We will define t_prop as the time it takes for a block to propagate from
you to 100% of the hashing power, and as a simplifying assumption we
will assume that until t_prop has elapsed, 0% of the hashing power has
the block, and immedately after, 100% has the block. We will also define
t_int, the average interval between blocks. (600 seconds for Bitcoin)
Finally, we will define Q as the probability that you will find the next
block.

The probabilities of the various outcomes:

1) 1 - (t_prop/t_int * (1-Q))
2) t_prop/t_int * (1-Q)
2.1) Q
2.2) 1-Q

Note that to simplify the equations we have not taking into account
propagation in our calculations for outcomes 2.1 or 2.2

Thus we can define P_fork taking into account Q:

P_fork(Q) = (t_prop/t_int * (1-Q))(1-Q) = t_pop/t_int * (1-Q)^2

Over the range 0 < Q < 0.5 the probability of a fork decreases
approximately linearly as your hashing power increases:

d/dq P_fork(Q) = 2(Q-1)

Q=0   -> d/dq P_fork(Q) = -2
Q=1/2 -> d/dq P_fork(Q) = -1

With our new, more accurate, P_fork(Q) function lets re-calculate the
break-even fee/KB using your original approach:

t_prop = t_0 + \alpha*S
E_fee = f*S

E(Q) = Q*(1 - P_fork(Q))*(E_bounty + E_fee)
E(Q) = Q*[1 - (t_0 + k*S)/t_int * (1-Q)^2]*(E_B + f*S)

d/dS E(Q) = Q*[ -2fSk/t_int*(1-Q)^2 - f*t_0/t_int*(1-Q)^2 + f - E_b*k/t_int*(1-Q)^2 ]

Again, we want to choose the fee so that the more transactions we
include the more we earn, dE/dS > 0 We find the minimum fee to include a
transaction at all by setting S=0, thus we get:

d/dS E(Q, S=0) = Q*[ f - f*t_0/t_int*(1-Q)^2 - E_b*k/t_int*(1-Q)^2 ] > 0

f(1 - t_0/t_int*(1-Q)^2) > E_b*k/t_int*(1-Q)^2

f > [E_b*k/t_int(1-Q)^2] / [1 - t_0/t_int*(1-Q)^2]

f > [E_b*k*(1-Q)^2] / [t_int - t_0*(1-Q)^2]

With Q=0:

f > E_b*k / (t_int - t_0) ~ E_b*k/t_int

This is the same result you derived. However lets look at Q != 0:

df/dQ = 2*E_b*k * [t_int*(q-1)] / [t_int - t_0(q-1)^2]^2

With negligible latency we get:

df/dQ, t_0=0 = 2*E_b*k*(q-1)/t_int

So what does that mean? Well in the region 0 < q < 1/2, df/dQ is always
negative. In other words, as you get more hashing power, the fee/KB you
can charge and still break even decreases linearly because you will
never orphan yourself. Lets trythe same assumptions as your first
analysis, based on the work by Decker et al

Based on the work by Decker et al, lets try to calculate break-even
fee/KB for negligible, 10%, 25% and 40% hashing power:

t_0 = 10s
t_int = 600s
k = 80ms/kB
E_b = 25BTC

Q=0    -> f = 0.0033 BTC/kB
Q=0.1  -> f = 0.0027 BTC/kB
Q=0.25 -> f = 0.0018 BTC/kB
Q=0.40 -> f = 0.0012 BTC/kB

Let's assume every miner is directly peered with every other miner, each
of those connections is 1MB/s, and somehow there's no latency at all:

k = 1mS/kB

Q=0    -> f = 0.000042 BTC/kB
Q=0.1  -> f = 0.000034 BTC/kB
Q=0.25 -> f = 0.000023 BTC/kB
Q=0.40 -> f = 0.000015 BTC/kB

Regardless of how you play around with the parameters, being a larger
miner has a significant advantage because you can charge lower fees for
your transactions and therefor earn more money. But it gets even more
ugly when you take into account that maybe a guy with 0.1% hashing power
can't afford the high bandwidth, low-latency, internet connection that
the larger pool has:

k = 10mS/kB, t_0=5s, Q=0.01 -> 0.000411 BTC/KB
k =  1mS/kB, t_0=1s, Q=0.15 -> 0.000030 BTC/KB

So the 1% pool has an internet connection capable of 100kB/s to each
peer, taking 5s to reach all the hashing power. The 15% pool can do
1MB/s to each peer, taking 1s to reach all the hashing power. This small
different means that the 1% pool needs to charge 13.7x more per KB for
their transactions to break even! It's a disaster for decentralization.
Businesses live and die on percentage points, let alone orders of
magnitude differences in cost, and I haven't even taken into account
second-order effects like the perverse incentives to publish your blocks
to only a minority of hashing power.(1)

This problem is inherent to the fundemental design of Bitcoin:
regardless of what the blocksize is, or how fast the network is, the
current Bitcoin consensus protocol rewards larger mining pools with
lower costs per KB to include transactions. It's a fundemental issue. An
unlimited blocksize will make the problem even worse by increasing fixed
costs, but keeping the blocksize at 1MB forever doesn't solve the
underlying problem either as the inflation subsidy becomes less
important and fees more important.

1) http://www.mail-archive.com/bitcoin-development at lists.sourceforge.net/msg03200.html

-- 
'peter'[:-1]@petertodd.org
00000000000000054eeccf3ac454892457bf4919d78efb275efd2ddd1a920c99
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 490 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131107/ff509779/attachment.sig>

From gronager at ceptacle.com  Thu Nov  7 21:58:42 2013
From: gronager at ceptacle.com (Michael Gronager)
Date: Thu, 07 Nov 2013 22:58:42 +0100
Subject: [Bitcoin-development] On the optimal block size and why
 transaction fees are 8 times too low (or transactions 8 times too big)
In-Reply-To: <20131107203123.GB3805@petertodd.org>
References: <527B9F9B.4060808@ceptacle.com>
	<20131107203123.GB3805@petertodd.org>
Message-ID: <527C0D12.8030905@ceptacle.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On 7/11/13, 21:31 , Peter Todd wrote:
>> Final conclusions is that the fee currently is too small and that
>> there is no need to keep a maximum block size, the fork
>> probability will automatically provide an incentive to not let
>> block grows into infinity.
> 

Great additions! - I was about to do a second iteration of the
calculations including the pool size, but you beat me to it - thanks!

Still the picture remains the same - you can half the fee if you are a
large pool

> Q=0    -> f = 0.0033 BTC/kB Q=0.1  -> f = 0.0027 BTC/kB Q=0.25 -> f
> = 0.0018 BTC/kB Q=0.40 -> f = 0.0012 BTC/kB

You second list of numbers is an unlikely extreme:

> k = 1mS/kB

The propagation latency in the network is more due to the block
verification than due to its network (fiber) propagation time,
bringing down the number of hops helps tremendously, so I agree that
we can probably bring down k by a factor of ~10 (k=8-12) if we
consider only pools directly connected. This should bring us close to
break even with the current fee size, but we should really get some
empirical data for interconnected large pools. However - important
note - if you are a 1% miner - don't include transactions!

> 
> Q=0    -> f = 0.000042 BTC/kB Q=0.1  -> f = 0.000034 BTC/kB Q=0.25
> -> f = 0.000023 BTC/kB Q=0.40 -> f = 0.000015 BTC/kB
> 

> 
> This problem is inherent to the fundemental design of Bitcoin: 
> regardless of what the blocksize is, or how fast the network is,
> the current Bitcoin consensus protocol rewards larger mining pools
> with lower costs per KB to include transactions.

I don't see a problem of rewarding economy of scale, as long as the
effect is not too grave (raising the min fee would actually make it
more profitable for smaller miners).

Michael

> 1)
> http://www.mail-archive.com/bitcoin-development at lists.sourceforge.net/msg03200.html
>
> 
> 
> 
> ------------------------------------------------------------------------------
>
> 
November Webinars for C, C++, Fortran Developers
> Accelerate application performance with scalable programming
> models. Explore techniques for threading, error checking, porting,
> and tuning. Get the most from the latest Intel processors and
> coprocessors. See abstracts and register 
> http://pubads.g.doubleclick.net/gampad/clk?id=60136231&iu=/4140/ostg.clktrk
>
> 
> 
> 
> _______________________________________________ Bitcoin-development
> mailing list Bitcoin-development at lists.sourceforge.net 
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 

-----BEGIN PGP SIGNATURE-----
Version: GnuPG/MacGPG2 v2.0.22 (Darwin)
Comment: GPGTools - http://gpgtools.org
Comment: Using GnuPG with Thunderbird - http://www.enigmail.net/

iQEcBAEBAgAGBQJSfA0SAAoJEKpww0VFxdGRSEUIALFws8/nNDGPDFWKX2N19jWA
YecC7ZdMgN+1xmf+z2TNjaREvUqI1BLbYO3qQj9AsvTgkMZDwo8c5hMfJL7//V+z
vLiygTbEcorEbyM54w8yTuDVBqdNEg22Cn2T35DIEmqxGP5OSqw+vEBp2B4Y7asv
GG+JgYTVNJf6kZ1GV8cXYnXVBgfccZfXllBYOIPjyk2tdz7HMJN10WKUePbSJtg+
zcvly05JY70d1quERj/fXxVsHpPP6BrH5sH+h4WPxM27+i6R3N90JLAWbB9D4h2s
oYK9MMlH3UC3HR4AR7po4xxuOpxOK3Exa6d9ACQGPGtLRNVWmHiBFT2SViKViK4=
=gALT
-----END PGP SIGNATURE-----



From mike at plan99.net  Fri Nov  8 11:46:02 2013
From: mike at plan99.net (Mike Hearn)
Date: Fri, 8 Nov 2013 12:46:02 +0100
Subject: [Bitcoin-development] [ANN] High-speed Bitcoin Relay Network
In-Reply-To: <527AD246.9050906@bluematt.me>
References: <5279D89D.5000609@bluematt.me>
	<CAE-z3OXQiT-6OXddb9_jpY2Qqbfs+BKAVv3M-rQ4eedwBS2MAg@mail.gmail.com>
	<527AD246.9050906@bluematt.me>
Message-ID: <CANEZrP2Jr-tOEXan_bq_g1Zi2mpyN96oD-aCh-m51HyAfN7pXw@mail.gmail.com>

I took a brief look at the code - it's looking very reasonable. You can
replace any construct like

try {
  Thread.sleep(1000);
} catch (InterruptedException e) {
  throw new RuntimeException(e);
}

which is quite verbose, just with
Uninterruptibles.sleepUninterruptably(1000, TimeUnit.MILLISECONDS); (and of
course static imports help too)

I think for this concept to take off, you'd need a website and to recruit
someone to help you market it. Pool operators won't reach out to you.

I still find it perhaps more elegant to just boost the connectivity of the
existing network with bitcoind changes, but this can help for now.



On Thu, Nov 7, 2013 at 12:35 AM, Matt Corallo <bitcoin-list at bluematt.me>wrote:

> No, the transactions relayed are piped through a bitcoind first (ie
> fully verified by a bitcoind). For blocks, for which the timing needs to
> be tighter, bitcoinj does SPV-validation. Though it is possible to
> create a block which passes SPV validation but causes a DoS score, doing
> so would cost a miner a full block's worth of profits, which they are
> fairly unlikely to do. In any case, if it every becomes a problem, its
> not hard to adapt addnode to allow higher DoS scores for individual nodes.
>
> Matt
>
> On 11/06/13 07:25, Tier Nolan wrote:
> >
> >
> >
> > On Wed, Nov 6, 2013 at 5:50 AM, Matt Corallo <bitcoin-list at bluematt.me
> > <mailto:bitcoin-list at bluematt.me>> wrote:
> >
> >     Relay node details:
> >      * The relay nodes do some data verification to prevent DoS, but in
> >     order to keep relay fast, they do not fully verify the data they are
> >     relaying, thus YOU SHOULD NEVER mine a block building on top of a
> >     relayed block without fully checking it with your own bitcoin
> validator
> >     (as you would any other block relayed from the P2P network).
> >
> >
> > Wouldn't this cause disconnects due to misbehavior?
> >
> > A standard node connecting to a relay node would receive
> > blocks/transactions that are not valid in some way and then disconnect.
> >
> > Have you looked though the official client to find what things are
> > considered signs that a peer is hostile?  I assume things like double
> > spending checks count as misbehavior and can't be quickly checked by a
> > relay node.
> >
> > Maybe another bit could be assigned in the services field as "relay".
> > This means that the node doesn't do any checking.
> >
> > Connects to relay nodes could be command line/config file only.  Peers
> > wouldn't connect to them.
>
>
> ------------------------------------------------------------------------------
> November Webinars for C, C++, Fortran Developers
> Accelerate application performance with scalable programming models.
> Explore
> techniques for threading, error checking, porting, and tuning. Get the most
> from the latest Intel processors and coprocessors. See abstracts and
> register
> http://pubads.g.doubleclick.net/gampad/clk?id=60136231&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131108/0da600b9/attachment.html>

From laanwj at gmail.com  Fri Nov  8 15:41:00 2013
From: laanwj at gmail.com (Wladimir)
Date: Fri, 8 Nov 2013 16:41:00 +0100
Subject: [Bitcoin-development] BIP 38
In-Reply-To: <B09A5DE3EF411243BB3328232CD25A5D99898977D9@MAILR023.mail.lan>
References: <B09A5DE3EF411243BB3328232CD25A5D998989775B@MAILR023.mail.lan>
	<CAAS2fgR0zH6JZWm-qLR3HcTC_m5o4N7V4wnGMM01q4yiS4CDwQ@mail.gmail.com>
	<B09A5DE3EF411243BB3328232CD25A5D99898977D9@MAILR023.mail.lan>
Message-ID: <CA+s+GJBvVOYcu8_1XfO_B155qn5+3nVfzx0oCU_+KXWm=Yj3Vw@mail.gmail.com>

Hello Mike,

I tried (and eventually succeded) to implement BIP 0038 today in Python and
have a few comments on your BIP,

- The BIP does not describe how flag 0x04 (lotsequence_present) should
exactly be used in decoding (it does not indicate how ownersalt /
ownerentropy is handled differently). I figured this out eventually from
the C# and JS implementations.

- Under "Now we will encrypt seedb. Derive a second key from passpoint
using scrypt" it says "Split the result into two 16-byte halves and call
them derivedhalf1 and derivedhalf2.". This should be two *32-byte* halves
as the results is 64 bytes.

Regards,
Wladimir



On Fri, Oct 25, 2013 at 10:46 PM, Mike Caldwell <mcaldwell at swipeclock.com>wrote:

> Gregory,
>
> No problem, thanks for providing the IRC recap, and glad I've finally made
> "radio contact" with the list.  Perhaps there can be some long overdue
> discussion on the topic.
>
> I see Kogelman's improvements to my proposal as being of merit and may
> very well be sufficient to supersede what I've originally proposed.  I
> suppose the main thing I'm wanting to ensure is that the identity of my
> original proposal is maintained.  Regardless of whether a paper wallet or
> physical bitcoin with a single address is poor form or whether my proposal
> is rejected or superseded, I hope there can be a consensus that "BIP38" can
> continue to be understood to mean "Password-protected private key proposal
> by Mike Caldwell", and that it can appear in the lists of BIPs alongside
> others.
>
> Regarding "BIP 22"... I in fact did not originally attempt to post to the
> list over what I had created and called BIP 22 once upon a time, I
> literally just created a wiki entry contrary to advice in BIP 1 that I had
> not read at the time.  I recognize it's totally legitimate to feel and act
> upon the appearance that BIP 38 was created in a similar shortcut fashion.
>  Certainly, the next thing I propose will be in the form of a draft outside
> the BIP "numberspace" and I won't solicit a BIP number without an
> established consensus in the future.  That said, I'm asking for BIP 38 to
> stand and be recognized as in existence, so as to not confuse those who
> call it by that name and who have already chosen to do something with it
> (whether that's to implement it, or to draft improvements to it like
> Kogelman).
>
> If I did BIP 38 over again, there's a couple shortcomings of my own that I
> wouldn't mind seeing addressed in another iteration, and the right venue
> for that may very well be to contribute to Kogelman's work.  My particular
> improvements might include wanting the ability to outsource the
> computationally expensive step to another service at a minimized risk to
> the user, potentially the ability to have special-purpose "encrypted
> minikeys" (sort of how ARM has Thumb for places where the tradeoff makes
> sense), and a typo check with better privacy (I currently use
> sha256(address)[0...3] which may unintentionally reveal the bitcoin
> address, if it's funded, to someone who has the encrypted key but doesn't
> know the password).
>
> mike
>
>
>
> -----Original Message-----
> From: Gregory Maxwell [mailto:gmaxwell at gmail.com]
> Sent: Friday, October 25, 2013 2:05 PM
> To: Mike Caldwell
> Cc: bitcoin-development at lists.sourceforge.net
> Subject: Re: [Bitcoin-development] BIP 38
>
> On Fri, Oct 25, 2013 at 11:50 AM, Mike Caldwell <mcaldwell at swipeclock.com>
> wrote:
> > I have noticed that there was a recent change to BIP 0038
> > (Password-Protected Private Key) on the Wiki, which is a proposal I
> > wrote in late 2012.  Gregory, it looks to me as though you have made
> > this change, and I?m hoping for your help here.  The change suggests
> > that the number was never assigned, and that there has been no
> > discussion regarding the proposal on this list.
>
> Greetings, (repeating from our discussion on IRC)
>
> No prior messages about your proposal have made it to the list, and no
> mention of the assignment had been made in the wiki.
>
> The first I ever heard of this scheme was long after you'd written the
> document when I attempted to assign the number to something else then
> noticed something existed at that name.
>
> Since you had previously created BIP documents without public discussion
> (e.g. "BIP 22"
> https://en.bitcoin.it/wiki/OP_CHECKSIGEX_DRAFT_BIP [...] Or, I wonder did
> your emails just get eaten that time too?), I'd just assumed something
> similar had happened here.
>
> I didn't take any action at the time I first noticed it, but after someone
> complained about bitcoin-qt "not confirming with BIP38" to me today it was
> clear to me that people were confusing this with something that was
> "officially" (as much as anything is) supported, so I moved the document
> out.  (I've since moved it back, having heard from you that you thought
> that it had actually been assigned/announced).
>
> With respect to moving it forward: Having a wallet which can only a single
> address is poor form. Jean-Paul Kogelman has a draft proposal which is
> based on your BIP38 work though the encoding scheme is different, having
> been revised in response to public discussion.
>
> Perhaps efforts here can be combined?
>
> ------------------------------------------------------------------------------
> October Webinars: Code for Performance
> Free Intel webinars can help you accelerate application performance.
> Explore tips for MPI, OpenMP, advanced profiling, and more. Get the most
> from
> the latest Intel processors and coprocessors. See abstracts and register >
> http://pubads.g.doubleclick.net/gampad/clk?id=60135991&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131108/35cfe907/attachment.html>

From Goss.Brian at mayo.edu  Fri Nov  8 16:21:35 2013
From: Goss.Brian at mayo.edu (Goss, Brian C., M.D.)
Date: Fri, 8 Nov 2013 16:21:35 +0000
Subject: [Bitcoin-development] 1. Re: On the optimal block size and why
	transaction fees are 8
Message-ID: <FFE335820B1BFF4F8E8619F446F2D87F4C20067D@MSGPEXCEI32B.mfad.mfroot.org>

Peter,

What is the propagation time within a pool?  If my pool is made up of a ton
of fancy ASICs connected by 300 baud modems, how does that affect your
analysis (ie, Q for a mining pool is effectively a function of time as
well)?  

Brian
 P.S. I hope these are not ignorant questions; if they are, please feel free
to disregard!


Message: 1
Date: Thu, 7 Nov 2013 15:31:23 -0500
From: Peter Todd <pete at petertodd.org>
Subject: Re: [Bitcoin-development] On the optimal block size and why
	transaction fees are 8 times too low (or transactions 8 times too
big)
To: Michael Gronager <gronager at ceptacle.com>
Cc: Bitcoin Dev <bitcoin-development at lists.sourceforge.net>
Message-ID: <20131107203123.GB3805 at petertodd.org>
Content-Type: text/plain; charset="us-ascii"

> Final conclusions is that the fee currently is too small and that 
> there is no need to keep a maximum block size, the fork probability 
> will automatically provide an incentive to not let block grows into
infinity.

Your definition of P_fork is inaccurate for a miner with non-negligable
hashing power - a miner will never fork themselves. Taking that into account
we have three outcomes:

1) The block propagates without any other miner finding a block.
2) During propagation another miner finds a block. (tie)
2.1) You win the tie by finding another block.
2.2) You lose the tie because someone else finds a block.

We will define t_prop as the time it takes for a block to propagate from you
to 100% of the hashing power, and as a simplifying assumption we will assume
that until t_prop has elapsed, 0% of the hashing power has the block, and
immedately after, 100% has the block. We will also define t_int, the average
interval between blocks. (600 seconds for Bitcoin) Finally, we will define Q
as the probability that you will find the next block.

The probabilities of the various outcomes:

1) 1 - (t_prop/t_int * (1-Q))
2) t_prop/t_int * (1-Q)
2.1) Q
2.2) 1-Q

Note that to simplify the equations we have not taking into account
propagation in our calculations for outcomes 2.1 or 2.2

Thus we can define P_fork taking into account Q:

P_fork(Q) = (t_prop/t_int * (1-Q))(1-Q) = t_pop/t_int * (1-Q)^2

Over the range 0 < Q < 0.5 the probability of a fork decreases approximately
linearly as your hashing power increases:

d/dq P_fork(Q) = 2(Q-1)

Q=0   -> d/dq P_fork(Q) = -2
Q=1/2 -> d/dq P_fork(Q) = -1

With our new, more accurate, P_fork(Q) function lets re-calculate the
break-even fee/KB using your original approach:

t_prop = t_0 + \alpha*S
E_fee = f*S

E(Q) = Q*(1 - P_fork(Q))*(E_bounty + E_fee)
E(Q) = Q*[1 - (t_0 + k*S)/t_int * (1-Q)^2]*(E_B + f*S)

d/dS E(Q) = Q*[ -2fSk/t_int*(1-Q)^2 - f*t_0/t_int*(1-Q)^2 + f -
E_b*k/t_int*(1-Q)^2 ]

Again, we want to choose the fee so that the more transactions we include
the more we earn, dE/dS > 0 We find the minimum fee to include a transaction
at all by setting S=0, thus we get:

d/dS E(Q, S=0) = Q*[ f - f*t_0/t_int*(1-Q)^2 - E_b*k/t_int*(1-Q)^2 ] > 0

f(1 - t_0/t_int*(1-Q)^2) > E_b*k/t_int*(1-Q)^2

f > [E_b*k/t_int(1-Q)^2] / [1 - t_0/t_int*(1-Q)^2]

f > [E_b*k*(1-Q)^2] / [t_int - t_0*(1-Q)^2]

With Q=0:

f > E_b*k / (t_int - t_0) ~ E_b*k/t_int

This is the same result you derived. However lets look at Q != 0:

df/dQ = 2*E_b*k * [t_int*(q-1)] / [t_int - t_0(q-1)^2]^2

With negligible latency we get:

df/dQ, t_0=0 = 2*E_b*k*(q-1)/t_int

So what does that mean? Well in the region 0 < q < 1/2, df/dQ is always
negative. In other words, as you get more hashing power, the fee/KB you can
charge and still break even decreases linearly because you will never orphan
yourself. Lets trythe same assumptions as your first analysis, based on the
work by Decker et al

Based on the work by Decker et al, lets try to calculate break-even fee/KB
for negligible, 10%, 25% and 40% hashing power:

t_0 = 10s
t_int = 600s
k = 80ms/kB
E_b = 25BTC

Q=0    -> f = 0.0033 BTC/kB
Q=0.1  -> f = 0.0027 BTC/kB
Q=0.25 -> f = 0.0018 BTC/kB
Q=0.40 -> f = 0.0012 BTC/kB

Let's assume every miner is directly peered with every other miner, each of
those connections is 1MB/s, and somehow there's no latency at all:

k = 1mS/kB

Q=0    -> f = 0.000042 BTC/kB
Q=0.1  -> f = 0.000034 BTC/kB
Q=0.25 -> f = 0.000023 BTC/kB
Q=0.40 -> f = 0.000015 BTC/kB

Regardless of how you play around with the parameters, being a larger miner
has a significant advantage because you can charge lower fees for your
transactions and therefor earn more money. But it gets even more ugly when
you take into account that maybe a guy with 0.1% hashing power can't afford
the high bandwidth, low-latency, internet connection that the larger pool
has:

k = 10mS/kB, t_0=5s, Q=0.01 -> 0.000411 BTC/KB k =  1mS/kB, t_0=1s, Q=0.15
-> 0.000030 BTC/KB

So the 1% pool has an internet connection capable of 100kB/s to each peer,
taking 5s to reach all the hashing power. The 15% pool can do 1MB/s to each
peer, taking 1s to reach all the hashing power. This small different means
that the 1% pool needs to charge 13.7x more per KB for their transactions to
break even! It's a disaster for decentralization.
Businesses live and die on percentage points, let alone orders of magnitude
differences in cost, and I haven't even taken into account second-order
effects like the perverse incentives to publish your blocks to only a
minority of hashing power.(1)

This problem is inherent to the fundemental design of Bitcoin:
regardless of what the blocksize is, or how fast the network is, the current
Bitcoin consensus protocol rewards larger mining pools with lower costs per
KB to include transactions. It's a fundemental issue. An unlimited blocksize
will make the problem even worse by increasing fixed costs, but keeping the
blocksize at 1MB forever doesn't solve the underlying problem either as the
inflation subsidy becomes less important and fees more important.

1)
http://www.mail-archive.com/bitcoin-development at lists.sourceforge.net/msg032
00.html

--
'peter'[:-1]@petertodd.org
00000000000000054eeccf3ac454892457bf4919d78efb275efd2ddd1a920c99
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 490 bytes
Desc: Digital signature

------------------------------

-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/pkcs7-signature
Size: 6822 bytes
Desc: not available
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131108/76a7dd01/attachment.p7s>

From andreas at rooteleven.com  Fri Nov  8 19:49:11 2013
From: andreas at rooteleven.com (Andreas M. Antonopoulos)
Date: Fri, 8 Nov 2013 11:49:11 -0800
Subject: [Bitcoin-development] we can all relax now
In-Reply-To: <CADjHg8GNuoPQ7Ama0A=iGmboeE_T5LrLRHPKyvQqWwKAjT3K3w@mail.gmail.com>
References: <5279D49D.5050807@jerviss.org>
	<CAJHLa0N1-8LfFuWq=vS0r-t2Bt-qZ6yKuGjrnicUOj+K6Gpx5A@mail.gmail.com>
	<CANOOu=-MsPPgACKcHvsvtFAOAiULL+BOQvJz1tC3L=nT8wN01Q@mail.gmail.com>
	<20131107034404.GA5140@savin>
	<CABsx9T35Po7pUb2sr15zD5WODYqR4-xNvJD0Jz5+Of3d-NjPdg@mail.gmail.com>
	<20131107132442.GB22476@savin>
	<CANEZrP3T4qsz8qqPxqtP5oXNYA_WT5OQPrC2uAKuQyDqJ0N9Rw@mail.gmail.com>
	<CADjHg8GNuoPQ7Ama0A=iGmboeE_T5LrLRHPKyvQqWwKAjT3K3w@mail.gmail.com>
Message-ID: <CAFmyj8y2H8hR=T4Ogui09MPOzz1nydNDvNZug2GZ8bWiu+52wA@mail.gmail.com>

Nicholas Weaver is reporting that pools have already started delaying
blocks, something that hints at Selfish Mining, since Nov. 3rd.
https://medium.com/something-like-falling/d321a2ef9317

He dismisses other reasons for delayed block propagation.

Any ideas on whether pools are already mucking around with block delaying
tactics?

I have no idea if this report is accurate or explained by some other issue
in the network, does anyone here have a comment on this?


On Thu, Nov 7, 2013 at 10:28 AM, Daniel Lidstrom <lidstrom83 at gmail.com>wrote:

> Hey Peter, something seems wrong with your above analysis: I think a miner
> would withhold his block not because it leads to a greater probability of
> winning the next one, but because it increases his expected revenue.
>
> Suppose a cabal with fraction q of the total hashing power is n blocks
> ahead on a secret branch of that has mined r_tot coins, and let r_next be
> its next block's reward.  If the cabal chooses not to broadcast its secret
> chain until at least the next block, its expected revenue after the next
> block is found is
>
> (1 - (1-q)^(n+1))*(r_tot + r_next)
>
> If it does broadcast, its expected revenue after the next block is found is
>
> r_tot + q * r_next
>
> If the cabal seeks only to maximize immediate revenue, then after a bit of
> algebra we find that it will withhold its chain if
>
> q > 1 - ( 1 + r_tot / r_next )^(-1/n)
>
> So if the cabal has just mined his first block off of the public chain,
> i.e. n = 1, and if the block reward is relatively stable, i.e. r_next =
> r_tot, then it needs q > 50% to profitably withhold, not the 29.2% you
> calculated.
>
> From this formula we can also see that if the miner wins the race and
> withholds again, then he must grow q to compensate for the increase in
> r_tot, and any decrease in n.  So generally publication becomes
> increasingly in the cabal's interest, and secret chains will tend not to
> grow too large (intuition tells me that simulations using the above formula
> should bear this out).
>
> This seem correct to you?
>
>
> On Thu, Nov 7, 2013 at 9:14 AM, Mike Hearn <mike at plan99.net> wrote:
>
>> Once the ASIC race calms down because everyone has one, has more or less
>> optimal power supplies, process improvements aren't easily reachable
>> anymore etc then I'd expect people to dissipate from the large pools
>> because eliminating their fees will become the next lowest hanging fruit to
>> squeeze out extra profit. There's no particular reason we need only a
>> handful of pools that control a major fraction of the hashpower.
>>
>> If we end up with a few hundred pools or lots of miners on p2pool, then a
>> lot of these theoretical attacks become not very relevant (I don't think ID
>> sacrifices will be so common or large as to justify a pile of custom mining
>> code+strategies at any point ...)
>>
>>
>> On Thu, Nov 7, 2013 at 2:24 PM, Peter Todd <pete at petertodd.org> wrote:
>>
>>> On Thu, Nov 07, 2013 at 02:56:56PM +1000, Gavin Andresen wrote:
>>> > > P.S: If any large pools want to try this stuff out, give me a shout.
>>> You
>>> > > have my PGP key - confidentiality assured.
>>> > >
>>> >
>>> > If I find out one of the large pools decides to run this 'experiment'
>>> on
>>> > the main network, I will make it my mission to tell people to switch
>>> to a
>>> > more responsible pool.
>>>
>>> I hope they listen.
>>>
>>> A few months ago ASICMiner could have made use of that attack if my
>>> memories of their peak hashing power were correct. They certainely could
>>> have used the selfish miner version, (we need better name for that)
>>> although development costs would eat into profits.
>>>
>>> GHash.IO, 22%, says they're a "private Bitfury ASIC mining pool" - dunno
>>> what they mean by that, but they're involved with CEX.IO who has
>>> physical control of a bunch of hashing power so I guess that means their
>>> model is like ASICMiners. They're a bit short of 30%, but maybe some
>>> behind-the-scenes deals would fix that, and/or lowering the barrier with
>>> reactive block publishing. (a better name)
>>>
>>> > And if you think you can get away with driving up EVERYBODY's orphan
>>> rate
>>> > without anybody noticing, you should think again.
>>>
>>> ...and remember, if you only do the attack a little bit, you still can
>>> earn more profit, and only drive up the orphan rate a little bit. So who
>>> knows, maybe the orphans are real, or maybe they're an attack? ASICMiner
>>> was involved with a bunch of orphans a while back...
>>>
>>> You know what this calls for? A witchhunt!
>>>
>>> BURN THE LARGE POOLS!
>>>
>>> > > P.P.S: If you're mining on a pool with more than, like, 1% hashing
>>> > > power, do the math on varience... Seriously, stop it and go mine on a
>>> > > smaller pool, or better yet, p2pool.
>>> > >
>>> >
>>> > That I agree with.
>>>
>>> Glad to hear.
>>>
>>> --
>>> 'peter'[:-1]@petertodd.org
>>> 0000000000000007bd936f19e33bc8b8f9bb1f4c013b863ef60a7f5a6a5d2112
>>>
>>>
>>> ------------------------------------------------------------------------------
>>> November Webinars for C, C++, Fortran Developers
>>> Accelerate application performance with scalable programming models.
>>> Explore
>>> techniques for threading, error checking, porting, and tuning. Get the
>>> most
>>> from the latest Intel processors and coprocessors. See abstracts and
>>> register
>>>
>>> http://pubads.g.doubleclick.net/gampad/clk?id=60136231&iu=/4140/ostg.clktrk
>>> _______________________________________________
>>> Bitcoin-development mailing list
>>> Bitcoin-development at lists.sourceforge.net
>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>>
>>>
>>
>>
>> ------------------------------------------------------------------------------
>> November Webinars for C, C++, Fortran Developers
>> Accelerate application performance with scalable programming models.
>> Explore
>> techniques for threading, error checking, porting, and tuning. Get the
>> most
>> from the latest Intel processors and coprocessors. See abstracts and
>> register
>>
>> http://pubads.g.doubleclick.net/gampad/clk?id=60136231&iu=/4140/ostg.clktrk
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>
>>
>
>
> ------------------------------------------------------------------------------
> November Webinars for C, C++, Fortran Developers
> Accelerate application performance with scalable programming models.
> Explore
> techniques for threading, error checking, porting, and tuning. Get the most
> from the latest Intel processors and coprocessors. See abstracts and
> register
> http://pubads.g.doubleclick.net/gampad/clk?id=60136231&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131108/ce3a2e5b/attachment.html>

From gmaxwell at gmail.com  Fri Nov  8 20:33:38 2013
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Fri, 8 Nov 2013 12:33:38 -0800
Subject: [Bitcoin-development] we can all relax now
In-Reply-To: <CAFmyj8y2H8hR=T4Ogui09MPOzz1nydNDvNZug2GZ8bWiu+52wA@mail.gmail.com>
References: <5279D49D.5050807@jerviss.org>
	<CAJHLa0N1-8LfFuWq=vS0r-t2Bt-qZ6yKuGjrnicUOj+K6Gpx5A@mail.gmail.com>
	<CANOOu=-MsPPgACKcHvsvtFAOAiULL+BOQvJz1tC3L=nT8wN01Q@mail.gmail.com>
	<20131107034404.GA5140@savin>
	<CABsx9T35Po7pUb2sr15zD5WODYqR4-xNvJD0Jz5+Of3d-NjPdg@mail.gmail.com>
	<20131107132442.GB22476@savin>
	<CANEZrP3T4qsz8qqPxqtP5oXNYA_WT5OQPrC2uAKuQyDqJ0N9Rw@mail.gmail.com>
	<CADjHg8GNuoPQ7Ama0A=iGmboeE_T5LrLRHPKyvQqWwKAjT3K3w@mail.gmail.com>
	<CAFmyj8y2H8hR=T4Ogui09MPOzz1nydNDvNZug2GZ8bWiu+52wA@mail.gmail.com>
Message-ID: <CAAS2fgTKZGBmXxwTHyOimoZH_2ffsCd=yLMLPvMAL9H=MsM78g@mail.gmail.com>

On Fri, Nov 8, 2013 at 11:49 AM, Andreas M. Antonopoulos
<andreas at rooteleven.com> wrote:
> Nicholas Weaver is reporting that pools have already started delaying
> blocks, something that hints at Selfish Mining, since Nov. 3rd.
> https://medium.com/something-like-falling/d321a2ef9317
>
> He dismisses other reasons for delayed block propagation.
>
> Any ideas on whether pools are already mucking around with block delaying
> tactics?
>
> I have no idea if this report is accurate or explained by some other issue
> in the network, does anyone here have a comment on this?

The BC.i timestamps have historically been inaccurate relative to my
local GPS clock measurements on my own nodes... but not just that, it
sounds like he's comparing block timestamps and bc.i numbers.

Thats insane, because it tells you the delay between when the miner
_started_ a work unit and when BC.i claims to have found it. Even
assuming bc.i's times were accurate and assuming miner clocks are
accurate (they are often not) you expect there to be be a gap because
it takes time to compute work, send it to the miner, search for a
valid nonce (an average of 2^31 hash operations, often executed
sequentially on a single core taking ten seconds or so on a lot of
hardware) and then return a result.

Evidence of selfish miners wouldn't be block timestamps (which are
inaccurate and controlled by miners anyways), or data on
blockchain.info (which is inaccurate and controlled by bc.i) ... but
the existence of an unusual amount of orphan blocks. High levels of
blocks are _necessary_ evidence of this sort of things, there can be
other explanations of high orphaning levels, but they're required here
and couldn't be faked.



From taylor.gerring at gmail.com  Sat Nov  9 17:43:41 2013
From: taylor.gerring at gmail.com (Taylor Gerring)
Date: Sat, 9 Nov 2013 11:43:41 -0600
Subject: [Bitcoin-development] Extending the Payment Protocol with vCards
Message-ID: <0887034B-AA65-468B-A8DB-4DF1E6C27DA2@gmail.com>

Hi everyone,

I made a post on the BitcoinTalk forums <https://bitcointalk.org/index.php?topic=329229.0> outlining how the Payment Protocol could be extended with optional vCard support to increase the usability of Payment Protocol for user-to-user transactions and improve the user experience in wallets supporting PP.

I?ve outlined the concept in as much detail as my feeble brain can handle, drawing on BIP 0070 itself and Mike Hearn?s Payment Protocol FAQ. I know there is interest in ?contact exchange? functionality from the Hive team, so I?m hoping this will begin a discussion on how we can make wallets more friendly in a standard way.

Please read, digest, and let me know if you have any feedback.

Thanks,

Taylor Gerring



-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 496 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131109/0af3c2d6/attachment.sig>

From aaxiomfinity at gmail.com  Sat Nov  9 20:16:07 2013
From: aaxiomfinity at gmail.com (Chris Evans)
Date: Sat, 9 Nov 2013 12:16:07 -0800
Subject: [Bitcoin-development] idea
Message-ID: <CAE0e52UXMqkdK_wVorweawy==vwi7GjVmML1tmcdf2B4y69S-Q@mail.gmail.com>

maybe add an optional note field to transaction so the receiver knows who
sent the
btc



-chris
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131109/18a27baf/attachment.html>

From luke at dashjr.org  Sat Nov  9 20:30:28 2013
From: luke at dashjr.org (Luke-Jr)
Date: Sat, 9 Nov 2013 20:30:28 +0000
Subject: [Bitcoin-development] idea
In-Reply-To: <CAE0e52UXMqkdK_wVorweawy==vwi7GjVmML1tmcdf2B4y69S-Q@mail.gmail.com>
References: <CAE0e52UXMqkdK_wVorweawy==vwi7GjVmML1tmcdf2B4y69S-Q@mail.gmail.com>
Message-ID: <201311092030.29169.luke@dashjr.org>

On Saturday, November 09, 2013 8:16:07 PM Chris Evans wrote:
> maybe add an optional note field to transaction so the receiver knows who
> sent the btc

This mailing list is for development discussion, NOT bug reports nor feature 
requests.

Bitcoin does not currently support any built-in mechanism for conveying the 
sender of a transaction nor notes. It is advised to collect any such 
information you need before giving someone a payment address.

Luke



From laanwj at gmail.com  Sun Nov 10 08:13:46 2013
From: laanwj at gmail.com (Wladimir)
Date: Sun, 10 Nov 2013 09:13:46 +0100
Subject: [Bitcoin-development] idea
In-Reply-To: <CAE0e52UXMqkdK_wVorweawy==vwi7GjVmML1tmcdf2B4y69S-Q@mail.gmail.com>
References: <CAE0e52UXMqkdK_wVorweawy==vwi7GjVmML1tmcdf2B4y69S-Q@mail.gmail.com>
Message-ID: <CA+s+GJCidqqpkiarcYV8zfCNz1NRS6NS36uA=vP=Eo+4BEq+=A@mail.gmail.com>

On Sat, Nov 9, 2013 at 9:16 PM, Chris Evans <aaxiomfinity at gmail.com> wrote:

> maybe add an optional note field to transaction so the receiver knows who
> sent the
> btc
>

This has been discussed many times. But in any case: If you encounter this
as a problem it means you are re-using addresses, which is discouraged for
good reasons.

Otherwise, when someone wants to send you BTC they need to request a new
receiving address from you. Along with this request they can also send a
message, over whatever channel is used to negotiate the payment.

If you're just posting a static bitcoin address somewhere for donations,
consider it an anonymous (wel, pseudonymous) gift jar.

Regards,
Wladimir
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131110/78ef81a1/attachment.html>

From mike at plan99.net  Sun Nov 10 11:08:38 2013
From: mike at plan99.net (Mike Hearn)
Date: Sun, 10 Nov 2013 12:08:38 +0100
Subject: [Bitcoin-development] Extending the Payment Protocol with vCards
In-Reply-To: <0887034B-AA65-468B-A8DB-4DF1E6C27DA2@gmail.com>
References: <0887034B-AA65-468B-A8DB-4DF1E6C27DA2@gmail.com>
Message-ID: <CANEZrP0tAb0G700qXhmWJ4ChEfys87KCwUp1CAUQ9sfyHOCxbQ@mail.gmail.com>

Hey Taylor,

It's great to see people thinking about payment protocol extensions. I'm
not totally convinced vCard support is the best idea relative to social
network integration - I can't recall the last time I saw someone use a
vCard. However, that should not hold you back from experimenting or
prototyping. All an extension requires is some tag numbers and we're not in
danger of running out of numbers any time soon.

The reason I favour social network integration is because those are the
ID's people already have. Distributed social networks (like the PGP web of
trust) have never really taken off, and fixing that is an entirely separate
project to Bitcoin.

Doing so is quite easy. Major social networks all have a concept of a user
ID, moreover, one that can be queried without any kind of API authorization
for basic info. Examples:

https://graph.facebook.com/i.am.the.real.mike
https://plus.google.com/s2/u/0/photos/profile/114798402540078632611

So you could simply embed a social network URL into a payment request, and
use that to associate a name/photo with a payment. That would be
unauthenticated (the sender is not proving they are the real owner of the
social network profile). However, authentication may not turn out to be
necessary. If it were to be, then steganographically embedding a key into
the profile picture and signing the payment request with it would be a way
to do so.


On Sat, Nov 9, 2013 at 6:43 PM, Taylor Gerring <taylor.gerring at gmail.com>wrote:

> Hi everyone,
>
> I made a post on the BitcoinTalk forums <
> https://bitcointalk.org/index.php?topic=329229.0> outlining how the
> Payment Protocol could be extended with optional vCard support to increase
> the usability of Payment Protocol for user-to-user transactions and improve
> the user experience in wallets supporting PP.
>
> I?ve outlined the concept in as much detail as my feeble brain can handle,
> drawing on BIP 0070 itself and Mike Hearn?s Payment Protocol FAQ. I know
> there is interest in ?contact exchange? functionality from the Hive team,
> so I?m hoping this will begin a discussion on how we can make wallets more
> friendly in a standard way.
>
> Please read, digest, and let me know if you have any feedback.
>
> Thanks,
>
> Taylor Gerring
>
>
>
>
>
> ------------------------------------------------------------------------------
> November Webinars for C, C++, Fortran Developers
> Accelerate application performance with scalable programming models.
> Explore
> techniques for threading, error checking, porting, and tuning. Get the most
> from the latest Intel processors and coprocessors. See abstracts and
> register
> http://pubads.g.doubleclick.net/gampad/clk?id=60136231&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131110/8b1c59d0/attachment.html>

From w at grabhive.com  Tue Nov 12 18:34:37 2013
From: w at grabhive.com (Wendell)
Date: Wed, 13 Nov 2013 02:34:37 +0800
Subject: [Bitcoin-development] Extending the Payment Protocol with vCards
In-Reply-To: <CANEZrP0tAb0G700qXhmWJ4ChEfys87KCwUp1CAUQ9sfyHOCxbQ@mail.gmail.com>
References: <0887034B-AA65-468B-A8DB-4DF1E6C27DA2@gmail.com>
	<CANEZrP0tAb0G700qXhmWJ4ChEfys87KCwUp1CAUQ9sfyHOCxbQ@mail.gmail.com>
Message-ID: <B2561351-A852-41AE-AAAD-CB27EF3175C2@grabhive.com>

Hi Mike,

It seems to me there is some confusion about this. Taylor's talking about a standard way to pass around data; the end user would never be exposed to something like a "vCard". That vCard's existence itself would in fact be very temporary.

-wendell

grabhive.com | twitter.com/hivewallet | gpg: 6C0C9411

On Nov 10, 2013, at 7:08 PM, Mike Hearn wrote:

> It's great to see people thinking about payment protocol extensions. I'm not totally convinced vCard support is the best idea relative to social network integration - I can't recall the last time I saw someone use a vCard. However, that should not hold you back from experimenting or prototyping. All an extension requires is some tag numbers and we're not in danger of running out of numbers any time soon.
> 




From gronager at ceptacle.com  Wed Nov 13 11:52:21 2013
From: gronager at ceptacle.com (Michael Gronager)
Date: Wed, 13 Nov 2013 12:52:21 +0100
Subject: [Bitcoin-development] Even simpler minimum fee calculation formula:
	f > bounty*fork_rate/average_blocksize
Message-ID: <528367F5.9080303@ceptacle.com>

Last week I posted a writeup: "On the optimal block size and why
transaction fees are 8 times too low (or transactions 8 times too big)".

Peter Todd made some nice additions to it including different pool sizes
into the numbers.

However, it occurred to me that things can in fact be calculated even
simpler: The measured fork rate will mean out all the different pool
sizes and network latencies and will as such provide a simple number we
can use to estimate the minimum fee. Key assumption is that the latency
will depend on block size (# txns) and the fork rate will depend on latency.

Using the formulas from last week:

P_fork = t_propagate/t_blocks

and:

t_propagate = t_0 + alpha*S ~= alpha*S

We get a measure for alpha as a function of the average fork rate and
average block size:

alpha = P_fork*t_block/S

Further, take the formula for the minimum fee:

f > alpha*E_bounty/t_block

And insert the formula for alpha:

f > P_fork*E_bounty/S_average

Luckily the fork frequency and the average block size are easily
measurable. blockchain.info keeps historical graphs of number of
orphaned blocks pr day - average over the last year is 1.5. Average
number of blocks per day over the last year is 169, which yields a
P_fork of ~1/113. Average block size in the same time is 134kBytes,
which yields a minimum fee:

f > 0.00165XBT/kb or 0.00037XBT/txn

So the 0.0001 is only 4 times too small. Further, let us look at the
trend over the last 12 months. Pieter Wuille claimed that there has been
several improvements over the last half year that would bring down the
latency, there has also been speculations regarding direct connections
between the major pools etc - lets see if this is indeed true.

If you look instead of 360 days, only at the last 90 days the average
block size has been 131kBytes, and the fork rate has been ~1/118, which
results in a minimum fee of:

f > 0.00162XBT/kb or 0.00037XBT/txn

So a small improvement but not statistically important...

Last question, recalling that optimal revenue block size is a function
of the txn-fee (from the last writeup) - lets see what fee it takes to
support a block size of 131kBytes:

S = 1/2 * (t_block/alpha - E_bounty/f)

S = 1/2 * (S/P_fork - E_bounty/f)

f = E_bounty/[(1/P_fork-2)*S] = 0.00165XBT/kB

So a 4 times increase is still sufficient for the current load.

Anyway - the all important number is alpha, the network latency which we
expect to be dependent of various things such as interconnectivity,
bandwidths, software quality etc, where mainly the latter is within our
hands to bring down the fee. And you can actually setup the standard
client to choose a better fee, as all the parameters in the formula are
easily measured!



From gronager at ceptacle.com  Wed Nov 13 12:34:07 2013
From: gronager at ceptacle.com (Michael Gronager)
Date: Wed, 13 Nov 2013 13:34:07 +0100
Subject: [Bitcoin-development] Even simpler minimum fee calculation
 formula: f > bounty*fork_rate/average_blocksize
In-Reply-To: <528367F5.9080303@ceptacle.com>
References: <528367F5.9080303@ceptacle.com>
Message-ID: <528371BF.9030100@ceptacle.com>

Just a quick comment on the actual fees (checked at blockchain.info) the
average fee over the last 90 days is actually ~0.0003BTC/txn - so not
too far behind the theoretical minimum of 0.00037BTC/txn.

I suppose, though, that it has more to do with old clients and fee
settings (0.0005) than network wisdom ;)

On 13/11/13, 12:52 , Michael Gronager wrote:
> Last week I posted a writeup: "On the optimal block size and why
> transaction fees are 8 times too low (or transactions 8 times too big)".
> 
> Peter Todd made some nice additions to it including different pool sizes
> into the numbers.
> 
> However, it occurred to me that things can in fact be calculated even
> simpler: The measured fork rate will mean out all the different pool
> sizes and network latencies and will as such provide a simple number we
> can use to estimate the minimum fee. Key assumption is that the latency
> will depend on block size (# txns) and the fork rate will depend on latency.
> 
> Using the formulas from last week:
> 
> P_fork = t_propagate/t_blocks
> 
> and:
> 
> t_propagate = t_0 + alpha*S ~= alpha*S
> 
> We get a measure for alpha as a function of the average fork rate and
> average block size:
> 
> alpha = P_fork*t_block/S
> 
> Further, take the formula for the minimum fee:
> 
> f > alpha*E_bounty/t_block
> 
> And insert the formula for alpha:
> 
> f > P_fork*E_bounty/S_average
> 
> Luckily the fork frequency and the average block size are easily
> measurable. blockchain.info keeps historical graphs of number of
> orphaned blocks pr day - average over the last year is 1.5. Average
> number of blocks per day over the last year is 169, which yields a
> P_fork of ~1/113. Average block size in the same time is 134kBytes,
> which yields a minimum fee:
> 
> f > 0.00165XBT/kb or 0.00037XBT/txn
> 
> So the 0.0001 is only 4 times too small. Further, let us look at the
> trend over the last 12 months. Pieter Wuille claimed that there has been
> several improvements over the last half year that would bring down the
> latency, there has also been speculations regarding direct connections
> between the major pools etc - lets see if this is indeed true.
> 
> If you look instead of 360 days, only at the last 90 days the average
> block size has been 131kBytes, and the fork rate has been ~1/118, which
> results in a minimum fee of:
> 
> f > 0.00162XBT/kb or 0.00037XBT/txn
> 
> So a small improvement but not statistically important...
> 
> Last question, recalling that optimal revenue block size is a function
> of the txn-fee (from the last writeup) - lets see what fee it takes to
> support a block size of 131kBytes:
> 
> S = 1/2 * (t_block/alpha - E_bounty/f)
> 
> S = 1/2 * (S/P_fork - E_bounty/f)
> 
> f = E_bounty/[(1/P_fork-2)*S] = 0.00165XBT/kB
> 
> So a 4 times increase is still sufficient for the current load.
> 
> Anyway - the all important number is alpha, the network latency which we
> expect to be dependent of various things such as interconnectivity,
> bandwidths, software quality etc, where mainly the latter is within our
> hands to bring down the fee. And you can actually setup the standard
> client to choose a better fee, as all the parameters in the formula are
> easily measured!
> 
> ------------------------------------------------------------------------------
> DreamFactory - Open Source REST & JSON Services for HTML5 & Native Apps
> OAuth, Users, Roles, SQL, NoSQL, BLOB Storage and External API Access
> Free app hosting. Or install the open source package on any LAMP server.
> Sign up and see examples for AngularJS, jQuery, Sencha Touch and Native!
> http://pubads.g.doubleclick.net/gampad/clk?id=63469471&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 




From john.dillon892 at googlemail.com  Wed Nov 13 20:01:27 2013
From: john.dillon892 at googlemail.com (John Dillon)
Date: Wed, 13 Nov 2013 20:01:27 +0000
Subject: [Bitcoin-development] Even simpler minimum fee calculation
 formula: f > bounty*fork_rate/average_blocksize
In-Reply-To: <528367F5.9080303@ceptacle.com>
References: <528367F5.9080303@ceptacle.com>
Message-ID: <CAPaL=UWZXSwY9dzX30h_ksj2NAdkyLn3Xtfzs7P8Svg5tsE7Xw@mail.gmail.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256

> Last week I posted a writeup: "On the optimal block size and why
> transaction fees are 8 times too low (or transactions 8 times too big)".
>
> Peter Todd made some nice additions to it including different pool sizes
> into the numbers.

Peter claims on IRC that he is writing a paper of some kind on this topic. I
suggest he submit it to that crypto-currency thing the foundation is
sponsoring. Given the Nov 24th deadline, I also suggest at least making part of
it public ASAP so some peer review can be done. It would be a shame for a
simple math error to cause embarassment later.


> However, it occurred to me that things can in fact be calculated even
> simpler: The measured fork rate will mean out all the different pool
> sizes and network latencies and will as such provide a simple number we
> can use to estimate the minimum fee.

Are you sure about that? You are assuming linearity where none may exist.


> Luckily the fork frequency and the average block size are easily
> measurable. blockchain.info keeps historical graphs of number of
> orphaned blocks pr day

Are those stats accurate? Have any pool operators at least confirmed that the
orphaned blocks that blockchain.info reports match their own records?

My gut feeling is to relay all orphaned blocks. We know that with a high
investment and sybil attack as blockchain.info has done you can have better
awareness of orphaned blocks than someone without those resources. If having
that awareness is ever a profitable thing we have both created an incentive to
sybil attack the network and we have linked profitability to high up-front
capital investments.

On those grounds alone I will argue that we should relay all orphans to even
the playing field. If there is a circumstance where we do not want the attacker
to have that knowledge we have failed anyway, as blockchain.info's sybil attack
on the network clearly shows.


> Anyway - the all important number is alpha, the network latency which we
> expect to be dependent of various things such as interconnectivity,
> bandwidths, software quality etc, where mainly the latter is within our
> hands to bring down the fee. And you can actually setup the standard
> client to choose a better fee, as all the parameters in the formula are
> easily measured!

With relayed orphans you could even have P2Pool enforce an optimal tx inclusion
policy based on a statistical model by including proof of those orphans into
the P2Pool share chain. P2Pool needs to take fees into account soon, but simply
asking for blocks with the highest total fees or even highest fee/kb appears to
be incomplete according to what your and Peter's analysis is suggesting.

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.11 (GNU/Linux)

iQEcBAEBCAAGBQJSg9pfAAoJEEWCsU4mNhiP5mcH/jKd2Rpl9gEJ7WhTndS5gYJ9
Ep151NyD/iKpAA4E/d9QVYalo8595LCqnrXnV6wuvuiifB6EJD5WBJq3MAMyaJLA
agl920ygY98slhDmFhnwlU9lkJVim5FoUkZgE7lQ5dr0MIhvoLQiF2Ywky49Izf0
IqL+nyW83AQweSalvktA+XGkDfGDV/EnJN7SdNqKDNtE7E9NeMl61NNOWNndsYy6
uT4PF2YB7rh8wGyHXMTC4Z192pfW4S4s60ZAflG/sTtWCcEwWi+5V/RIu0o5Hmog
RFpEPvc6d6ykdqtPfTRADMGkT2wC1yXsgeos9oFFVVuVSj8EqHb2db0B+psHRBk=
=76Qs
-----END PGP SIGNATURE-----



From john.dillon892 at googlemail.com  Wed Nov 13 20:13:40 2013
From: john.dillon892 at googlemail.com (John Dillon)
Date: Wed, 13 Nov 2013 20:13:40 +0000
Subject: [Bitcoin-development] [ANN] High-speed Bitcoin Relay Network
In-Reply-To: <5279D89D.5000609@bluematt.me>
References: <5279D89D.5000609@bluematt.me>
Message-ID: <CAPaL=UXyARJ21w6W2dGxJ23wgsGL3O9LD0yT0Ai7GJyJmKFZBw@mail.gmail.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256

> To peer with the public relay nodes, simply select the closest region
> out of us-west (West Coast US), us-east (East Coast US), eu (Western
> Europe), au (Australia), or jpy (Japan) and add
> public.REGION.relay.mattcorallo.com to your addnode list. Note that
> since all of the relay nodes will relay between each other, you gain no
> latency advantage by peering with more than the closest node to you (and
> currently all the regions map to one node, so there they're redundant
> anyway).
>
> For each relay node, you can connect to either port 8334 or 8335.
> Connecting on port 8334 will relay only blocks, and port 8335 will relay
> both blocks and transactions. The relay nodes will request any
> transactions which appear in your invs no matter which port you connect to.

You should split the block-only and block+tx not only by port number, but also
by DNS address. DoS attack by flooding blocks is fundamentally more difficult
than DoS attack by flooding transctions, so doing the split by IP address
ensures that in the event of an attack the more important block relaying
functionality is less likely to be damaged. In the meantime point both DNS
addresses to the same IP until it becomes an issue.

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.11 (GNU/Linux)

iQEcBAEBCAAGBQJSg91YAAoJEEWCsU4mNhiPq2oH/03kVqfHsXJ1l10qHhYaBPMy
Le26Cp30Jt9BELiPVQISWjPeuOLsB0m7Say52GWHxBCfoNx3NYag6p8G3woSdWqv
guc5U2lTwfhXS5R7y0B5diaGJ+Jaq70me4DYGdEnmkBf0F38wcgOtK92V2esLyVx
TmCsRGxjAE8Ary0YHJOlb7sU4CNvQ8k1PDX6Hd+GCZVMvRtisILunGV4UDgSS62u
yddZfrOs0yWZr2bwwI4koB2Sc0cFjK6/gMhr/d19ikQj2i2uqxYtwZIxuaAvYNdA
hSmeouR4EFtVHTEQybF82VcfGcTcU11HncyKHU6FOAZQLZUgc3A/M3QgXc0mQrI=
=l6GI
-----END PGP SIGNATURE-----



From john.dillon892 at googlemail.com  Wed Nov 13 20:27:52 2013
From: john.dillon892 at googlemail.com (John Dillon)
Date: Wed, 13 Nov 2013 20:27:52 +0000
Subject: [Bitcoin-development] 1. Re: On the optimal block size and why
 transaction fees are 8
In-Reply-To: <FFE335820B1BFF4F8E8619F446F2D87F4C20067D@MSGPEXCEI32B.mfad.mfroot.org>
References: <FFE335820B1BFF4F8E8619F446F2D87F4C20067D@MSGPEXCEI32B.mfad.mfroot.org>
Message-ID: <CAPaL=UWEwWOtLtj684jNAhpDV3C8rWZ+dUVC6FWMmWpARRzUOg@mail.gmail.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256

On Fri, Nov 8, 2013 at 4:21 PM, Goss, Brian C., M.D.
<Goss.Brian at mayo.edu> wrote:
> Peter,
>
> What is the propagation time within a pool?  If my pool is made up of a ton
> of fancy ASICs connected by 300 baud modems, how does that affect your
> analysis (ie, Q for a mining pool is effectively a function of time as
> well)?

The propagation time you're thinking of is from the pool to the miner, and even
now that is significant for pools that do not pay for stale shares. I remember
an Australian pool mentioning that problem on their website as a reason for the
pools existence.

I would expect selfish mining, as well as orphans becoming more important in
general, to centralize the physical location of hashing power too. If the 100ms
delay to your pool impacts profits you'll have an incentive to locate your
mining equipment physically closer to the pool. The next step is pools wanting
to physically locate themselves closer to other pools.

It would not be good if all Bitcoin mining was done in Iceland...

> Brian
>  P.S. I hope these are not ignorant questions; if they are, please feel free
> to disregard!

Not ignorant at all IMO.

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.11 (GNU/Linux)

iQEcBAEBCAAGBQJSg+CpAAoJEEWCsU4mNhiPufwIAKNpBBvlRvSQZOzMJvghG7fX
lCNliohDKw9kdKJJjN1T73Ssl06wGbBe881k4c4r7fHeNDRQZbrFsj+uBsFyUhmy
CF70KiOKuowDlWwyWMxZbbyinK0mEKC7J/hJVOt15FHubLnq71Utb+I2L7seyHlo
2E2byG4UnofoD5L+hGzfD6FJ/zYEHtTKgFw7Y1+ZSmAxlIcdrcpH7tPmUzFD7JPi
RnaK1BH7hpM6FyZQUhSC/tW7mYswNEasvouBE4V1vSySZb6S43kiED2Q4uH3W0+A
UtbyRQ7yT3BOLGB2OO/L92tg6S7WRyMtvQoevJkEIAnUywD3YWaZnBbf0IM4LWg=
=6750
-----END PGP SIGNATURE-----



From gronager at ceptacle.com  Wed Nov 13 20:32:59 2013
From: gronager at ceptacle.com (Michael Gronager)
Date: Wed, 13 Nov 2013 21:32:59 +0100
Subject: [Bitcoin-development] Even simpler minimum fee calculation
 formula: f > bounty*fork_rate/average_blocksize
In-Reply-To: <CAPaL=UWZXSwY9dzX30h_ksj2NAdkyLn3Xtfzs7P8Svg5tsE7Xw@mail.gmail.com>
References: <528367F5.9080303@ceptacle.com>
	<CAPaL=UWZXSwY9dzX30h_ksj2NAdkyLn3Xtfzs7P8Svg5tsE7Xw@mail.gmail.com>
Message-ID: <5283E1FB.40509@ceptacle.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Hi John,

Thanks for the feedback - comments below:

>> However, it occurred to me that things can in fact be calculated even
>> simpler: The measured fork rate will mean out all the different pool
>> sizes and network latencies and will as such provide a simple number we
>> can use to estimate the minimum fee.
> 
> Are you sure about that? You are assuming linearity where none may exist.

Well, my work from last week and now is a model. A model enabling you to
easily calculate the minimum fee and as a miner which transaction to
include to not shoot yourselves in the foot risking to create an
orphaned block.

The assumption that there is a linearity between block size and latency
is shown pretty well in the paper by Decker et. al (see last weeks
post). What I add this week is mainly more up to date numbers and a
formula dependent only of data that is easy to measure. (fork rate and
block size).

> 
> Are those stats accurate? Have any pool operators at least confirmed that the
> orphaned blocks that blockchain.info reports match their own records?

Probably not - but the are at least a minimum - in case they are higher,
the fee should go up further.

> 
> My gut feeling is to relay all orphaned blocks. We know that with a high
> investment and sybil attack as blockchain.info has done you can have better
> awareness of orphaned blocks than someone without those resources. If having
> that awareness is ever a profitable thing we have both created an incentive to
> sybil attack the network and we have linked profitability to high up-front
> capital investments.

Another way to measure latency is to setup a node that only listens but
do not relay data. By measuring the propagation of blocks of different
size as well as transactions, you can get a propagation distribution and
from that an average. However, the relevant propagation time is the one
between the pools/(single miners). Which you cannot assess using this
scheme - however, it would be nice to compare it to the orphan block scheme.

> 
> With relayed orphans you could even have P2Pool enforce an optimal tx inclusion
> policy based on a statistical model by including proof of those orphans into
> the P2Pool share chain. P2Pool needs to take fees into account soon, but simply
> asking for blocks with the highest total fees or even highest fee/kb appears to
> be incomplete according to what your and Peter's analysis is suggesting.

Indeed, and nice... But note that it is never of benefit for the miner
to include a transaction with a fee of less than ~0.0004BTC - unless it
is linked to another transaction that pay an extra fee.

There have been a lot of assumptions on the fee size and generally it
has been linked to the bitcoin exchange rate. This analysis shows that
this is wrong. Also it shows that the scalability of bitcoin is directly
linked to the network and node latency (with the current latency it will
never beneficial for miners to include more than ~30k transactions in a
block or ~70 pr second resulting in ~10MB blocks).
However, halving the latency will double the capacity, down to the
minimum which is governed by the speed of light.

> 
> 
> ------------------------------------------------------------------------------
> DreamFactory - Open Source REST & JSON Services for HTML5 & Native Apps
> OAuth, Users, Roles, SQL, NoSQL, BLOB Storage and External API Access
> Free app hosting. Or install the open source package on any LAMP server.
> Sign up and see examples for AngularJS, jQuery, Sencha Touch and Native!
> http://pubads.g.doubleclick.net/gampad/clk?id=63469471&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 

-----BEGIN PGP SIGNATURE-----
Version: GnuPG/MacGPG2 v2.0.22 (Darwin)
Comment: GPGTools - http://gpgtools.org
Comment: Using GnuPG with Thunderbird - http://www.enigmail.net/

iQEcBAEBAgAGBQJSg+H7AAoJEKpww0VFxdGRn+gIAIgju90DED5r//USqKvkQsYI
JDj0tLBLMg9BPXOOt3eJ+NX4YE4lW+QkwqDd/swuJxLmj0l9BQKgt1lTb/f0P/cY
GdE14gh5EYlvNzY1h0TGKcMe8NTWXU0/tC+Clpy4sqBHPXW/eF/77sLQUnFRrLKi
sT48aHOOFUdBLdlyylUzzevh/FFVLidkKqV031tv52+BFHcTFd4kRPwZXgBSs9YH
U66MkJ4ytAqeOfJue9n7Qn4kJF9kNIhRpqTrtapqu8jglLfuYlJ3s5fwaw9FxQdR
+On4IWeXzURQ6tcVRCovCq/2lxRKIbYGlW7HGVASjRmm68/+8YUAfFsYFl6DIgA=
=9tbL
-----END PGP SIGNATURE-----



From gavinandresen at gmail.com  Wed Nov 13 23:52:41 2013
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Thu, 14 Nov 2013 09:52:41 +1000
Subject: [Bitcoin-development] Even simpler minimum fee calculation
	formula: f > bounty*fork_rate/average_blocksize
Message-ID: <CABsx9T0ZchCDReG5W6_7r+BU=zH7aZ=JzV0G4LUs3BpW926d2w@mail.gmail.com>

Couple of thoughts:

RE: the marvelous coincidence that the average fee these days is very close
to the modeled minimum orphan cost:

Engineers tend to underestimate the power of markets, even inefficient
markets, to arrive at the 'correct' price. It would not surprise me at all
if the messy, chaotic inefficient market with tens of thousands of
individual decisions ("which mining pool should I join" and "how high
should my dice site set fees" and "how large should the minimum payout be"
and "should I make my blocks bigger or smaller") might arrive at the
'correct' price, even if NOBODY involved has any clue how or why it
happened.

Or it might just be a coincidence.

RE: orphan rate:

The network-wide orphan rate has been very steady apart from the March
blockchain fork. Kudos to Ben Reeves for keeping track of the data and
giving us a nice chart:
  http://blockchain.info/charts/n-orphaned-blocks

RE: new block latency:

We should be able to reduce the size of new block announcements by about a
factor of ten with very little additional effort (transmit/relay as
"merkleblock" with full bloom filters-- the factor of 10 is because a
transaction id hash is 32 bytes, average transaction size is a few hundred
bytes).

Mining revenue is a fixed-size pie, so if EVERYBODY agreed to accept
(somewhat) higher orphan rates for more transaction volume then, in the
long run, there is no difference.  Well, except that more transaction
volume means more utility for Bitcoin as a whole, so everybody should
benefit from a higher bitcoin price.

That's a classic free-rider problem, though-- a miner could defect to try
to get a lower orphan rate.

This is one of the reasons why I think relaying all blocks in a race is
probably the right thing to do; if a miner is mildly punished (by losing
the occasional block race) for creating blocks that don't include "enough"
already-relayed transactions, that is a strong incentive to go along with
whatever consensus has been established.

The same argument applies for a miner producing too-large blocks, or blocks
with lots of transactions that were never relayed across the network.

-- 
--
Gavin Andresen
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131114/1d37b8b2/attachment.html>

From bitcoin-list at bluematt.me  Thu Nov 14 02:11:35 2013
From: bitcoin-list at bluematt.me (Matt Corallo)
Date: Wed, 13 Nov 2013 21:11:35 -0500
Subject: [Bitcoin-development] [ANN] High-speed Bitcoin Relay Network
In-Reply-To: <CANEZrP2Jr-tOEXan_bq_g1Zi2mpyN96oD-aCh-m51HyAfN7pXw@mail.gmail.com>
References: <5279D89D.5000609@bluematt.me>	<CAE-z3OXQiT-6OXddb9_jpY2Qqbfs+BKAVv3M-rQ4eedwBS2MAg@mail.gmail.com>	<527AD246.9050906@bluematt.me>
	<CANEZrP2Jr-tOEXan_bq_g1Zi2mpyN96oD-aCh-m51HyAfN7pXw@mail.gmail.com>
Message-ID: <52843157.9000609@bluematt.me>



On 11/08/13 06:46, Mike Hearn wrote:
> I took a brief look at the code - it's looking very reasonable. You can
> replace any construct like
> 
> try {
>   Thread.sleep(1000);
> } catch (InterruptedException e) {
>   throw new RuntimeException(e);
> }
> 
> which is quite verbose, just with
> Uninterruptibles.sleepUninterruptably(1000, TimeUnit.MILLISECONDS); (and
> of course static imports help too)

Thanks, fixed.


> 
> I think for this concept to take off, you'd need a website and to
> recruit someone to help you market it. Pool operators won't reach out to
> you.

Yes, I've done some initial outreach and plan on doing another major
round now that the initial network is up and Im working on running some
relay time benchmarks. Finding someone to help push peering would be
nice, if you have any suggestions, Im all ears.

> 
> I still find it perhaps more elegant to just boost the connectivity of
> the existing network with bitcoind changes, but this can help for now.

Agreed, improving relay times across the regular P2P network would be
nice, however I really dont see this as a part of the P2P network. Its
more of a backup relay network that just happens to follow the P2P
protocol (mostly, it doesnt do full block verification, so technically
it breaks spec). In this model, this is really a nice augment to the P2P
network no matter what improvements are made. Having more protocols/ways
blocks are relayed is always nice (anyone wanna launch a satellite?)

Matt



From bitcoin-list at bluematt.me  Thu Nov 14 02:14:57 2013
From: bitcoin-list at bluematt.me (Matt Corallo)
Date: Wed, 13 Nov 2013 21:14:57 -0500
Subject: [Bitcoin-development] [ANN] High-speed Bitcoin Relay Network
In-Reply-To: <CAPaL=UXyARJ21w6W2dGxJ23wgsGL3O9LD0yT0Ai7GJyJmKFZBw@mail.gmail.com>
References: <5279D89D.5000609@bluematt.me>
	<CAPaL=UXyARJ21w6W2dGxJ23wgsGL3O9LD0yT0Ai7GJyJmKFZBw@mail.gmail.com>
Message-ID: <52843221.8010606@bluematt.me>

In the short-term, maybe. Keep in mind that the code for tx relay is
fairly different and the bandwidth for transaction relay on these
nodes is already lower than it is for blocks (by design). That said,
I'd like to look into doing tx-less block relays for transactions that
peers already have to limit block relay times even for large blocks,
in which case tx relay is very much required.

Matt

On 11/13/13 15:13, John Dillon wrote:
> You should split the block-only and block+tx not only by port
> number, but also by DNS address. DoS attack by flooding blocks is
> fundamentally more difficult than DoS attack by flooding
> transctions, so doing the split by IP address ensures that in the
> event of an attack the more important block relaying functionality
> is less likely to be damaged. In the meantime point both DNS 
> addresses to the same IP until it becomes an issue.
> 
> 



From zumbi at e-mail.ph  Thu Nov 14 09:57:19 2013
From: zumbi at e-mail.ph (Zumbi Warrior)
Date: Thu, 14 Nov 2013 01:57:19 -0800
Subject: [Bitcoin-development] MITOSYS: New Encrypted Communications
	Cryptocurrency
Message-ID: <20131114015719.4FB5B750@m0005299.ppops.net>

An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131114/456c01fe/attachment.html>

From melvincarvalho at gmail.com  Thu Nov 14 11:45:51 2013
From: melvincarvalho at gmail.com (Melvin Carvalho)
Date: Thu, 14 Nov 2013 12:45:51 +0100
Subject: [Bitcoin-development] moving the default display to mbtc
Message-ID: <CAKaEYhK4oXH3hB7uS3=AEkA6r0VB5OYyTua+LOP18rq+rYajHg@mail.gmail.com>

Rationale
=======

Given the recent rise in value there seems to be anecdotal evidence that 1
bitcoin being so high is putting off a lot of normal buyers, because they
feel that putting down $400+ and only getting "1 coin", or having to buy in
multiples of 1 whole coin, is too much.. only after it being explained that
they can buy fractional amounts to they regain interest, apparently
happening increasingly.


Straw Poll
========

6 months ago there was a straw poll on this

https://bitcointalk.org/index.php?topic=220322.0

Roughly 2/3 of respondents favoured switching

A further 20% said to switch after it hits 1000

Satoshi's comments:
================

Eventually at most only 21 million coins for 6.8 billion people in the
world if it really gets huge.

But don't worry, there are another 6 decimal places that aren't shown, for
a total of 8 decimal places internally.  It shows 1.00 but internally it's
1.00000000.  If there's massive deflation in the future, the software could
show more decimal places.

If it gets tiresome working with small numbers, we could change where the
display shows the decimal point.  Same amount of money, just different
convention for where the ","'s and "."'s go.  e.g. moving the decimal place
3 places would mean if you had 1.00000 before, now it shows it as 1,000.00.

https://bitcointalk.org/index.php?topic=44.msg267#msg267


Would now be a good time to start thinking about changing the default
display in the software.  Perhaps initially it could be a dropdown display
option, then at some point mbtc becomes the default?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131114/264b078a/attachment.html>

From luke at dashjr.org  Thu Nov 14 18:18:45 2013
From: luke at dashjr.org (Luke-Jr)
Date: Thu, 14 Nov 2013 18:18:45 +0000
Subject: [Bitcoin-development] moving the default display to mbtc
In-Reply-To: <CAKaEYhK4oXH3hB7uS3=AEkA6r0VB5OYyTua+LOP18rq+rYajHg@mail.gmail.com>
References: <CAKaEYhK4oXH3hB7uS3=AEkA6r0VB5OYyTua+LOP18rq+rYajHg@mail.gmail.com>
Message-ID: <201311141818.47055.luke@dashjr.org>

On Thursday, November 14, 2013 11:45:51 AM Melvin Carvalho wrote:
> Would now be a good time to start thinking about changing the default
> display in the software.  Perhaps initially it could be a dropdown display
> option, then at some point mbtc becomes the default?

There's already a dropdown display option...



From etotheipi at gmail.com  Thu Nov 14 20:01:49 2013
From: etotheipi at gmail.com (Alan Reiner)
Date: Thu, 14 Nov 2013 15:01:49 -0500
Subject: [Bitcoin-development] moving the default display to mbtc
In-Reply-To: <CAKaEYhK4oXH3hB7uS3=AEkA6r0VB5OYyTua+LOP18rq+rYajHg@mail.gmail.com>
References: <CAKaEYhK4oXH3hB7uS3=AEkA6r0VB5OYyTua+LOP18rq+rYajHg@mail.gmail.com>
Message-ID: <52852C2D.9020103@gmail.com>

I highly recommend that if we make any move towards this, that the
software show verification in both/all units.

For instance, there should be 3 input fields, one for "BTC", one for
"mBTC" one for "uBTC".  As the user enters a value in one of the fields,
it would automatically update the other fields with the converted value
as they type.  This makes it really difficult to get it wrong... if
you're typing "10" into the BTC field, thinking it's mBTC, you'll see
10,000 mBTC showing up in the other box as you type.  Similarly, it
should display all units on all verification windows.  Users may also
use it for sanity checking conversion between units.

Personally, I'm of the opinion that this change is important in the long
run:  the current price makes Bitcoin *intimidating* to new users.  But
I'm also of the opinion that it's freakin' hard to change the base unit
in such an established system.  There is no easy way to do this that
doesn't cause more heartache than it's worth.  But it's possible if you
make it idiot-proof enough, and roll it out in the least inconvenient way.

-Alan


On 11/14/2013 06:45 AM, Melvin Carvalho wrote:
> Rationale
> =======
>
> Given the recent rise in value there seems to be anecdotal evidence
> that 1 bitcoin being so high is putting off a lot of normal buyers,
> because they feel that putting down $400+ and only getting "1 coin",
> or having to buy in multiples of 1 whole coin, is too much.. only
> after it being explained that they can buy fractional amounts to they
> regain interest, apparently happening increasingly.
>
>
> Straw Poll
> ========
>
> 6 months ago there was a straw poll on this
>
> https://bitcointalk.org/index.php?topic=220322.0
>
> Roughly 2/3 of respondents favoured switching
>
> A further 20% said to switch after it hits 1000
>
> Satoshi's comments:
> ================
>
> Eventually at most only 21 million coins for 6.8 billion people in the
> world if it really gets huge.
>
> But don't worry, there are another 6 decimal places that aren't shown,
> for a total of 8 decimal places internally.  It shows 1.00 but
> internally it's 1.00000000.  If there's massive deflation in the
> future, the software could show more decimal places.
>
> If it gets tiresome working with small numbers, we could change where
> the display shows the decimal point.  Same amount of money, just
> different convention for where the ","'s and "."'s go.  e.g. moving
> the decimal place 3 places would mean if you had 1.00000 before, now
> it shows it as 1,000.00.
>
> https://bitcointalk.org/index.php?topic=44.msg267#msg267
>
>
> Would now be a good time to start thinking about changing the default
> display in the software.  Perhaps initially it could be a dropdown
> display option, then at some point mbtc becomes the default?
>
>
>
> ------------------------------------------------------------------------------
> DreamFactory - Open Source REST & JSON Services for HTML5 & Native Apps
> OAuth, Users, Roles, SQL, NoSQL, BLOB Storage and External API Access
> Free app hosting. Or install the open source package on any LAMP server.
> Sign up and see examples for AngularJS, jQuery, Sencha Touch and Native!
> http://pubads.g.doubleclick.net/gampad/clk?id=63469471&iu=/4140/ostg.clktrk
>
>
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131114/bfef8905/attachment.html>

From mark at monetize.io  Thu Nov 14 21:15:54 2013
From: mark at monetize.io (Mark Friedenbach)
Date: Thu, 14 Nov 2013 13:15:54 -0800
Subject: [Bitcoin-development] moving the default display to mbtc
In-Reply-To: <52852C2D.9020103@gmail.com>
References: <CAKaEYhK4oXH3hB7uS3=AEkA6r0VB5OYyTua+LOP18rq+rYajHg@mail.gmail.com>
	<52852C2D.9020103@gmail.com>
Message-ID: <52853D8A.6010501@monetize.io>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

For this reason I'm in favor of skipping mBTC and moving straight to
uBTC. Having eight, or even five decimal places is not intuitive to
the average user. Two decimal places is becoming standard for new
national currencies, and we wouldn't be too far from human scale
everyday numbers: 25.00uBTC ~= $0.01 currently. And I don't think very
many people on this list would consider bitcoin overvalued in the long
term perspective.

Better to go through a confusing renumbering only once.

Mark

On 11/14/13 12:01 PM, Alan Reiner wrote:
> ... I'm also of the opinion that it's freakin' hard to change the
> base unit in such an established system.  There is no easy way to
> do this that doesn't cause more heartache than it's worth...
-----BEGIN PGP SIGNATURE-----
Version: GnuPG/MacGPG2 v2.0.19 (Darwin)
Comment: GPGTools - http://gpgtools.org
Comment: Using GnuPG with Thunderbird - http://www.enigmail.net/

iQIcBAEBAgAGBQJShT2JAAoJEAdzVfsmodw4DXAQAIJTNbpwBGTXuFyaxXQULf20
hMs7OlQZSOZOdsmSiPv2augxzbpa2DhhZjiosrScSBCjxMeYd4S6WgTt/b8moAYR
HD8pm88JyCKDOd7bOmzTkgDOTBBFfH+islmOY9VTdeKGHeOHH6yyLMKwnUpa+S89
4YtdzlIXAtfT37dpR5E4cHPmAYCbrRsNOB6j5ohVl2VqRou2vkwoJr/YvaW54M8i
ucIZyai2qjNWyJLcZC9QWi9Yw/W/n9QYE2mHyL0qWNaIrZVn6WGty8KpYq+i7aeU
4N4UdtLT7FAhWYec9nmEec868WsUsd+H3/WSWViMinUKO4YA3cyxWDL7MTmTRsci
g0R4WGYCzMM3cEWz5ycf5KEBPH/nDlbqFmEartTffqKXgrK5Ohhw+28Iqw5KcDX8
SVx34lw2yHWmTeIMY8d3qYKqBdcsvixDUD3xvq+ZqEIa+bZw12s4LIzqmir84TB8
fB4bdq5GddXX0PK4pboXL+Nib0OVK72YgYnVs/ejlBmeiG8Ixoz4/ygR5MHm8jcw
tSiwH0xohOJWg3lJj0vZorubXoECcOqwPzsZkwnT9irbrvOuk2jCPvrkEC8U9fgA
XHgirStS49/lI/iUWrRchoTt5iuwG18G4+E81V/DMsrSkYlipuf2DlEXiapn3hWz
ccP053+6o5Rgpc7J1aa0
=QW1i
-----END PGP SIGNATURE-----



From allen.piscitello at gmail.com  Thu Nov 14 21:55:35 2013
From: allen.piscitello at gmail.com (Allen Piscitello)
Date: Thu, 14 Nov 2013 15:55:35 -0600
Subject: [Bitcoin-development] moving the default display to mbtc
In-Reply-To: <52853D8A.6010501@monetize.io>
References: <CAKaEYhK4oXH3hB7uS3=AEkA6r0VB5OYyTua+LOP18rq+rYajHg@mail.gmail.com>
	<52852C2D.9020103@gmail.com> <52853D8A.6010501@monetize.io>
Message-ID: <CAJfRnm7w5dH5BwqnQX_APx53rhfBiUEbLP5RSU6o15rToOqAhw@mail.gmail.com>

I also would prefer to go straight to uBTC as the "standard wallet unit".
 It works out perfectly with Satoshi's being the decimal units.  Something
that costs $10USD would be 25000uBTC.  This isn't a problem for a place
like South Korea, where 10USD is about 10,000 Won, so we aren't even off on
a scale of usable currencies in major economies.

The downsides are obviously confusion (causing mistakes resulting in lost
coins), and possibly from a psychological perspective on price (uBTC are
worthless!).  On the other hand, it also might help people feel like they
are getting in on the ground floor still (I own 100,000 uBTC!), and reduce
the perception the Bitcoins are not divisible (I have heard several people
worry that 21 million is not enough units).

Alan's ideas for compatibility with multiple fields will also be helpful to
solving the confusion issue.



On Thu, Nov 14, 2013 at 3:15 PM, Mark Friedenbach <mark at monetize.io> wrote:

> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA1
>
> For this reason I'm in favor of skipping mBTC and moving straight to
> uBTC. Having eight, or even five decimal places is not intuitive to
> the average user. Two decimal places is becoming standard for new
> national currencies, and we wouldn't be too far from human scale
> everyday numbers: 25.00uBTC ~= $0.01 currently. And I don't think very
> many people on this list would consider bitcoin overvalued in the long
> term perspective.
>
> Better to go through a confusing renumbering only once.
>
> Mark
>
> On 11/14/13 12:01 PM, Alan Reiner wrote:
> > ... I'm also of the opinion that it's freakin' hard to change the
> > base unit in such an established system.  There is no easy way to
> > do this that doesn't cause more heartache than it's worth...
> -----BEGIN PGP SIGNATURE-----
> Version: GnuPG/MacGPG2 v2.0.19 (Darwin)
> Comment: GPGTools - http://gpgtools.org
> Comment: Using GnuPG with Thunderbird - http://www.enigmail.net/
>
> iQIcBAEBAgAGBQJShT2JAAoJEAdzVfsmodw4DXAQAIJTNbpwBGTXuFyaxXQULf20
> hMs7OlQZSOZOdsmSiPv2augxzbpa2DhhZjiosrScSBCjxMeYd4S6WgTt/b8moAYR
> HD8pm88JyCKDOd7bOmzTkgDOTBBFfH+islmOY9VTdeKGHeOHH6yyLMKwnUpa+S89
> 4YtdzlIXAtfT37dpR5E4cHPmAYCbrRsNOB6j5ohVl2VqRou2vkwoJr/YvaW54M8i
> ucIZyai2qjNWyJLcZC9QWi9Yw/W/n9QYE2mHyL0qWNaIrZVn6WGty8KpYq+i7aeU
> 4N4UdtLT7FAhWYec9nmEec868WsUsd+H3/WSWViMinUKO4YA3cyxWDL7MTmTRsci
> g0R4WGYCzMM3cEWz5ycf5KEBPH/nDlbqFmEartTffqKXgrK5Ohhw+28Iqw5KcDX8
> SVx34lw2yHWmTeIMY8d3qYKqBdcsvixDUD3xvq+ZqEIa+bZw12s4LIzqmir84TB8
> fB4bdq5GddXX0PK4pboXL+Nib0OVK72YgYnVs/ejlBmeiG8Ixoz4/ygR5MHm8jcw
> tSiwH0xohOJWg3lJj0vZorubXoECcOqwPzsZkwnT9irbrvOuk2jCPvrkEC8U9fgA
> XHgirStS49/lI/iUWrRchoTt5iuwG18G4+E81V/DMsrSkYlipuf2DlEXiapn3hWz
> ccP053+6o5Rgpc7J1aa0
> =QW1i
> -----END PGP SIGNATURE-----
>
>
> ------------------------------------------------------------------------------
> DreamFactory - Open Source REST & JSON Services for HTML5 & Native Apps
> OAuth, Users, Roles, SQL, NoSQL, BLOB Storage and External API Access
> Free app hosting. Or install the open source package on any LAMP server.
> Sign up and see examples for AngularJS, jQuery, Sencha Touch and Native!
> http://pubads.g.doubleclick.net/gampad/clk?id=63469471&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131114/c60e096d/attachment.html>

From etotheipi at gmail.com  Thu Nov 14 22:00:29 2013
From: etotheipi at gmail.com (Alan Reiner)
Date: Thu, 14 Nov 2013 17:00:29 -0500
Subject: [Bitcoin-development] moving the default display to mbtc
In-Reply-To: <CAJfRnm7w5dH5BwqnQX_APx53rhfBiUEbLP5RSU6o15rToOqAhw@mail.gmail.com>
References: <CAKaEYhK4oXH3hB7uS3=AEkA6r0VB5OYyTua+LOP18rq+rYajHg@mail.gmail.com>	<52852C2D.9020103@gmail.com>
	<52853D8A.6010501@monetize.io>
	<CAJfRnm7w5dH5BwqnQX_APx53rhfBiUEbLP5RSU6o15rToOqAhw@mail.gmail.com>
Message-ID: <528547FD.2070300@gmail.com>

Just keep in mind it will be a little awkward that 54.3 uBTC is the
smallest unit that can be transferred [easily] and the standard fees are
500 uBTC.    It's not a deal breaker, it's just something that needs to
be taken into consideration when it comes to user perception (which is
one of the reasons we would make such a change in the first place). 

"Holy crap these fees are huge!  I thought Bitcoin didn't have fees!"


On 11/14/2013 04:55 PM, Allen Piscitello wrote:
> I also would prefer to go straight to uBTC as the "standard wallet unit".    It works out
perfectly with Satoshi's being the decimal units.  Something that costs
$10USD would be 25000uBTC.  This isn't a problem for a place like South
Korea, where 10USD is about 10,000 Won, so we aren't even off on a scale
of usable currencies in major economies.
>
> The downsides are obviously confusion (causing mistakes resulting in
lost coins), and possibly from a psychological perspective on price
(uBTC are worthless!).  On the other hand, it also might help people
feel like they are getting in on the ground floor still (I own 100,000
uBTC!), and reduce the perception the Bitcoins are not divisible (I have
heard several people worry that 21 million is not enough units).
>
> Alan's ideas for compatibility with multiple fields will also be
helpful to solving the confusion issue.
>
>
>
> On Thu, Nov 14, 2013 at 3:15 PM, Mark Friedenbach <mark at monetize.io
<mailto:mark at monetize.io>> wrote:
>
> For this reason I'm in favor of skipping mBTC and moving straight to
> uBTC. Having eight, or even five decimal places is not intuitive to
> the average user. Two decimal places is becoming standard for new
> national currencies, and we wouldn't be too far from human scale
> everyday numbers: 25.00uBTC ~= $0.01 currently. And I don't think very
> many people on this list would consider bitcoin overvalued in the long
> term perspective.
>
> Better to go through a confusing renumbering only once.
>
> Mark
>
> On 11/14/13 12:01 PM, Alan Reiner wrote:
> > ... I'm also of the opinion that it's freakin' hard to change the
> > base unit in such an established system.  There is no easy way to
> > do this that doesn't cause more heartache than it's worth...
>
>    
------------------------------------------------------------------------------
>     DreamFactory - Open Source REST & JSON Services for HTML5 & Native
Apps
>     OAuth, Users, Roles, SQL, NoSQL, BLOB Storage and External API Access
>     Free app hosting. Or install the open source package on any LAMP
server.
>     Sign up and see examples for AngularJS, jQuery, Sencha Touch and
Native!
>    
http://pubads.g.doubleclick.net/gampad/clk?id=63469471&iu=/4140/ostg.clktrk
>     _______________________________________________
>     Bitcoin-development mailing list
>     Bitcoin-development at lists.sourceforge.net
<mailto:Bitcoin-development at lists.sourceforge.net>
>     https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
>
>
>
------------------------------------------------------------------------------
> DreamFactory - Open Source REST & JSON Services for HTML5 & Native Apps
> OAuth, Users, Roles, SQL, NoSQL, BLOB Storage and External API Access
> Free app hosting. Or install the open source package on any LAMP server.
> Sign up and see examples for AngularJS, jQuery, Sencha Touch and Native!
>
http://pubads.g.doubleclick.net/gampad/clk?id=63469471&iu=/4140/ostg.clktrk
>
>
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development


-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131114/862ccf75/attachment.html>

From jgarzik at bitpay.com  Thu Nov 14 22:03:03 2013
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Thu, 14 Nov 2013 17:03:03 -0500
Subject: [Bitcoin-development] moving the default display to mbtc
In-Reply-To: <52853D8A.6010501@monetize.io>
References: <CAKaEYhK4oXH3hB7uS3=AEkA6r0VB5OYyTua+LOP18rq+rYajHg@mail.gmail.com>
	<52852C2D.9020103@gmail.com> <52853D8A.6010501@monetize.io>
Message-ID: <CAJHLa0M6CkoDbD6FFixf9-mmhug7DvehSWCJ+EHWVxUDuwNiBg@mail.gmail.com>

Go straight to uBTC. Humans and existing computer systems handle numbers to
the left of the decimals just fine (HK Dollars, Yen). The opposite is
untrue (QuickBooks really does not like 3+ decimal places).

     - Jeff
On Nov 14, 2013 4:40 PM, "Mark Friedenbach" <mark at monetize.io> wrote:

> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA1
>
> For this reason I'm in favor of skipping mBTC and moving straight to
> uBTC. Having eight, or even five decimal places is not intuitive to
> the average user. Two decimal places is becoming standard for new
> national currencies, and we wouldn't be too far from human scale
> everyday numbers: 25.00uBTC ~= $0.01 currently. And I don't think very
> many people on this list would consider bitcoin overvalued in the long
> term perspective.
>
> Better to go through a confusing renumbering only once.
>
> Mark
>
> On 11/14/13 12:01 PM, Alan Reiner wrote:
> > ... I'm also of the opinion that it's freakin' hard to change the
> > base unit in such an established system.  There is no easy way to
> > do this that doesn't cause more heartache than it's worth...
> -----BEGIN PGP SIGNATURE-----
> Version: GnuPG/MacGPG2 v2.0.19 (Darwin)
> Comment: GPGTools - http://gpgtools.org
> Comment: Using GnuPG with Thunderbird - http://www.enigmail.net/
>
> iQIcBAEBAgAGBQJShT2JAAoJEAdzVfsmodw4DXAQAIJTNbpwBGTXuFyaxXQULf20
> hMs7OlQZSOZOdsmSiPv2augxzbpa2DhhZjiosrScSBCjxMeYd4S6WgTt/b8moAYR
> HD8pm88JyCKDOd7bOmzTkgDOTBBFfH+islmOY9VTdeKGHeOHH6yyLMKwnUpa+S89
> 4YtdzlIXAtfT37dpR5E4cHPmAYCbrRsNOB6j5ohVl2VqRou2vkwoJr/YvaW54M8i
> ucIZyai2qjNWyJLcZC9QWi9Yw/W/n9QYE2mHyL0qWNaIrZVn6WGty8KpYq+i7aeU
> 4N4UdtLT7FAhWYec9nmEec868WsUsd+H3/WSWViMinUKO4YA3cyxWDL7MTmTRsci
> g0R4WGYCzMM3cEWz5ycf5KEBPH/nDlbqFmEartTffqKXgrK5Ohhw+28Iqw5KcDX8
> SVx34lw2yHWmTeIMY8d3qYKqBdcsvixDUD3xvq+ZqEIa+bZw12s4LIzqmir84TB8
> fB4bdq5GddXX0PK4pboXL+Nib0OVK72YgYnVs/ejlBmeiG8Ixoz4/ygR5MHm8jcw
> tSiwH0xohOJWg3lJj0vZorubXoECcOqwPzsZkwnT9irbrvOuk2jCPvrkEC8U9fgA
> XHgirStS49/lI/iUWrRchoTt5iuwG18G4+E81V/DMsrSkYlipuf2DlEXiapn3hWz
> ccP053+6o5Rgpc7J1aa0
> =QW1i
> -----END PGP SIGNATURE-----
>
>
> ------------------------------------------------------------------------------
> DreamFactory - Open Source REST & JSON Services for HTML5 & Native Apps
> OAuth, Users, Roles, SQL, NoSQL, BLOB Storage and External API Access
> Free app hosting. Or install the open source package on any LAMP server.
> Sign up and see examples for AngularJS, jQuery, Sencha Touch and Native!
> http://pubads.g.doubleclick.net/gampad/clk?id=63469471&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131114/ac7bde5f/attachment.html>

From allen.piscitello at gmail.com  Thu Nov 14 22:07:58 2013
From: allen.piscitello at gmail.com (Allen Piscitello)
Date: Thu, 14 Nov 2013 16:07:58 -0600
Subject: [Bitcoin-development] moving the default display to mbtc
In-Reply-To: <528547FD.2070300@gmail.com>
References: <CAKaEYhK4oXH3hB7uS3=AEkA6r0VB5OYyTua+LOP18rq+rYajHg@mail.gmail.com>
	<52852C2D.9020103@gmail.com> <52853D8A.6010501@monetize.io>
	<CAJfRnm7w5dH5BwqnQX_APx53rhfBiUEbLP5RSU6o15rToOqAhw@mail.gmail.com>
	<528547FD.2070300@gmail.com>
Message-ID: <CAJfRnm7-34jwX0m+0Trj9-YvXFeUYMGq35AoRkY7bq9w-XpabA@mail.gmail.com>

Obviously the answer is to just display all fees and trading rates as BTC
or MBTC (.0000005 MBTC fee? how cheap!).  On a more serious note, the
transition should definitely be thought out well as it could be very
damaging to have this confusion, but I would prefer to do it only once
rather than twice.


On Thu, Nov 14, 2013 at 4:00 PM, Alan Reiner <etotheipi at gmail.com> wrote:

>  Just keep in mind it will be a little awkward that 54.3 uBTC is the
> smallest unit that can be transferred [easily] and the standard fees are
> 500 uBTC.    It's not a deal breaker, it's just something that needs to be
> taken into consideration when it comes to user perception (which is one of
> the reasons we would make such a change in the first place).
>
> "Holy crap these fees are huge!  I thought Bitcoin didn't have fees!"
>
>
>
> On 11/14/2013 04:55 PM, Allen Piscitello wrote:
> > I also would prefer to go straight to uBTC as the "standard wallet
> unit".    It works out perfectly with Satoshi's being the decimal units.
> Something that costs $10USD would be 25000uBTC.  This isn't a problem for a
> place like South Korea, where 10USD is about 10,000 Won, so we aren't even
> off on a scale of usable currencies in major economies.
> >
> > The downsides are obviously confusion (causing mistakes resulting in
> lost coins), and possibly from a psychological perspective on price (uBTC
> are worthless!).  On the other hand, it also might help people feel like
> they are getting in on the ground floor still (I own 100,000 uBTC!), and
> reduce the perception the Bitcoins are not divisible (I have heard several
> people worry that 21 million is not enough units).
> >
> > Alan's ideas for compatibility with multiple fields will also be helpful
> to solving the confusion issue.
> >
> >
> >
> > On Thu, Nov 14, 2013 at 3:15 PM, Mark Friedenbach <mark at monetize.io
> <mailto:mark at monetize.io> <mark at monetize.io>> wrote:
> >
>
> For this reason I'm in favor of skipping mBTC and moving straight to
> uBTC. Having eight, or even five decimal places is not intuitive to
> the average user. Two decimal places is becoming standard for new
> national currencies, and we wouldn't be too far from human scale
> everyday numbers: 25.00uBTC ~= $0.01 currently. And I don't think very
> many people on this list would consider bitcoin overvalued in the long
> term perspective.
>
> Better to go through a confusing renumbering only once.
>
> Mark
>
> On 11/14/13 12:01 PM, Alan Reiner wrote:
> > ... I'm also of the opinion that it's freakin' hard to change the
> > base unit in such an established system.  There is no easy way to
> > do this that doesn't cause more heartache than it's worth...
>
> >
>
> >
> ------------------------------------------------------------------------------
> >     DreamFactory - Open Source REST & JSON Services for HTML5 & Native
> Apps
> >     OAuth, Users, Roles, SQL, NoSQL, BLOB Storage and External API Access
> >     Free app hosting. Or install the open source package on any LAMP
> server.
> >     Sign up and see examples for AngularJS, jQuery, Sencha Touch and
> Native!
> >
> http://pubads.g.doubleclick.net/gampad/clk?id=63469471&iu=/4140/ostg.clktrk
> >     _______________________________________________
> >     Bitcoin-development mailing list
> >     Bitcoin-development at lists.sourceforge.net
> <mailto:Bitcoin-development at lists.sourceforge.net><Bitcoin-development at lists.sourceforge.net>
> >     https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
> >
> >
> >
> >
> >
> ------------------------------------------------------------------------------
> > DreamFactory - Open Source REST & JSON Services for HTML5 & Native Apps
> > OAuth, Users, Roles, SQL, NoSQL, BLOB Storage and External API Access
> > Free app hosting. Or install the open source package on any LAMP server.
> > Sign up and see examples for AngularJS, jQuery, Sencha Touch and Native!
> >
> http://pubads.g.doubleclick.net/gampad/clk?id=63469471&iu=/4140/ostg.clktrk
> >
> >
> > _______________________________________________
> > Bitcoin-development mailing list
> > Bitcoin-development at lists.sourceforge.net
> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
>
>
>
> ------------------------------------------------------------------------------
> DreamFactory - Open Source REST & JSON Services for HTML5 & Native Apps
> OAuth, Users, Roles, SQL, NoSQL, BLOB Storage and External API Access
> Free app hosting. Or install the open source package on any LAMP server.
> Sign up and see examples for AngularJS, jQuery, Sencha Touch and Native!
> http://pubads.g.doubleclick.net/gampad/clk?id=63469471&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131114/cfa37763/attachment.html>

From mark at monetize.io  Thu Nov 14 22:21:56 2013
From: mark at monetize.io (Mark Friedenbach)
Date: Thu, 14 Nov 2013 14:21:56 -0800
Subject: [Bitcoin-development] moving the default display to mbtc
In-Reply-To: <528547FD.2070300@gmail.com>
References: <CAKaEYhK4oXH3hB7uS3=AEkA6r0VB5OYyTua+LOP18rq+rYajHg@mail.gmail.com>	<52852C2D.9020103@gmail.com>	<52853D8A.6010501@monetize.io>	<CAJfRnm7w5dH5BwqnQX_APx53rhfBiUEbLP5RSU6o15rToOqAhw@mail.gmail.com>
	<528547FD.2070300@gmail.com>
Message-ID: <52854D04.5070005@monetize.io>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On 11/14/13 2:00 PM, Alan Reiner wrote:
> Just keep in mind it will be a little awkward that 54.3 uBTC is
> the smallest unit that can be transferred [easily] and the standard
> fees are 500 uBTC.    It's not a deal breaker, it's just something
> that needs to be taken into consideration when it comes to user
> perception (which is one of the reasons we would make such a change
> in the first place).
> 
> "Holy crap these fees are huge!  I thought Bitcoin didn't have
> fees!"

Well.. they are huge. 20 cents suggested fee for a irrevocable
transaction?
-----BEGIN PGP SIGNATURE-----
Version: GnuPG/MacGPG2 v2.0.19 (Darwin)
Comment: GPGTools - http://gpgtools.org
Comment: Using GnuPG with Thunderbird - http://www.enigmail.net/

iQIcBAEBAgAGBQJShU0EAAoJEAdzVfsmodw4TlAP/33KPX3ypMZ0PyHQVg3OCX21
hUXhTQBBO3JjO7x4HoNqdV0fApfCldq4cl/pNENG74inVuYNH+dUwUBIF6q6Qzfs
RU45++yytPob28ZojgrQgZq7/lAvi9qvsg5tLMyLt72uf3Kz1whmiRAHI5qaJ/xW
5w9LfOxXHFVkTQsUPzIjbD2kYAqUNILMzndKSv4YwRruYNm60gxCh2mQvgNr3s1Z
oGdLsPhx6AA1+Y6tgvnZVm71dwYUyg7OAafzGtpGEz953/cQwbgTqsZ3CrOiPk67
OJ9XxRPREOyKTDYo1WcM1GlQAq9LOHkMcU5OWS7TX2DzZAbLc7TqmqSMuAHdn6d5
eh+AgRWN1ppgVzHaCfgGSfP4NdXHRuMbDvSSoeiP+JLZ1ateT1aesklOaPRFfieW
NUJ61XAFWYCuVEK/ctUhSKMd19Rao23yuly+PtrMHvCw6Zn/LrpA4z2nD4vTFTXi
WeFyYwjIDjKBeuQMfWg5I2uMpo+9vC/DA3cwPticV7+LD7wsATHVNWVzuHlmjgTX
CPO4tVkqBPk7NsqDreOaVhvgnbAUHknyeDqguYS2LppDGu4P4XiOIHpS3reRyHuc
/NbXAvDkR23JGQFeHgdR/E983TdsqUiH3US43Cy3ikEcWm79eNG0cPGuHHVZBjPh
AACKjmPS+JR7rBAKFSGl
=f9P7
-----END PGP SIGNATURE-----



From drak at zikula.org  Thu Nov 14 22:27:53 2013
From: drak at zikula.org (Drak)
Date: Thu, 14 Nov 2013 22:27:53 +0000
Subject: [Bitcoin-development] moving the default display to mbtc
In-Reply-To: <CAKaEYhK4oXH3hB7uS3=AEkA6r0VB5OYyTua+LOP18rq+rYajHg@mail.gmail.com>
References: <CAKaEYhK4oXH3hB7uS3=AEkA6r0VB5OYyTua+LOP18rq+rYajHg@mail.gmail.com>
Message-ID: <CANAnSg3zWdyGymJ2tE5RUQsCSqh4jw7pkb619tX0nVoi-9efgA@mail.gmail.com>

Given the meteoric growth many are now saying we should just switch
straight to Satoshi (uBTC) because it looks like we will be seeing BTC
valued in the thousands pretty soon. Small decimal numbers are certainly
not very attractive to the masses. There's no point switching to mBTC only
to have to switch to uBTC later - especially when that later could be a lot
sooner.

Unless something is recommended/done by the bitcoin core developers I doubt
much will change at bitcoin user/consumer level.

Drak


On 14 November 2013 11:45, Melvin Carvalho <melvincarvalho at gmail.com> wrote:

> Rationale
> =======
>
> Given the recent rise in value there seems to be anecdotal evidence that 1
> bitcoin being so high is putting off a lot of normal buyers, because they
> feel that putting down $400+ and only getting "1 coin", or having to buy in
> multiples of 1 whole coin, is too much.. only after it being explained that
> they can buy fractional amounts to they regain interest, apparently
> happening increasingly.
>
>
> Straw Poll
> ========
>
> 6 months ago there was a straw poll on this
>
> https://bitcointalk.org/index.php?topic=220322.0
>
> Roughly 2/3 of respondents favoured switching
>
> A further 20% said to switch after it hits 1000
>
> Satoshi's comments:
> ================
>
> Eventually at most only 21 million coins for 6.8 billion people in the
> world if it really gets huge.
>
> But don't worry, there are another 6 decimal places that aren't shown, for
> a total of 8 decimal places internally.  It shows 1.00 but internally it's
> 1.00000000.  If there's massive deflation in the future, the software could
> show more decimal places.
>
> If it gets tiresome working with small numbers, we could change where the
> display shows the decimal point.  Same amount of money, just different
> convention for where the ","'s and "."'s go.  e.g. moving the decimal place
> 3 places would mean if you had 1.00000 before, now it shows it as 1,000.00.
>
> https://bitcointalk.org/index.php?topic=44.msg267#msg267
>
>
> Would now be a good time to start thinking about changing the default
> display in the software.  Perhaps initially it could be a dropdown display
> option, then at some point mbtc becomes the default?
>
>
>
> ------------------------------------------------------------------------------
> DreamFactory - Open Source REST & JSON Services for HTML5 & Native Apps
> OAuth, Users, Roles, SQL, NoSQL, BLOB Storage and External API Access
> Free app hosting. Or install the open source package on any LAMP server.
> Sign up and see examples for AngularJS, jQuery, Sencha Touch and Native!
> http://pubads.g.doubleclick.net/gampad/clk?id=63469471&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131114/2209c344/attachment.html>

From mark at monetize.io  Thu Nov 14 22:31:53 2013
From: mark at monetize.io (Mark Friedenbach)
Date: Thu, 14 Nov 2013 14:31:53 -0800
Subject: [Bitcoin-development] moving the default display to mbtc
In-Reply-To: <CAJHLa0M6CkoDbD6FFixf9-mmhug7DvehSWCJ+EHWVxUDuwNiBg@mail.gmail.com>
References: <CAKaEYhK4oXH3hB7uS3=AEkA6r0VB5OYyTua+LOP18rq+rYajHg@mail.gmail.com>	<52852C2D.9020103@gmail.com>	<52853D8A.6010501@monetize.io>
	<CAJHLa0M6CkoDbD6FFixf9-mmhug7DvehSWCJ+EHWVxUDuwNiBg@mail.gmail.com>
Message-ID: <52854F59.9000500@monetize.io>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Whoops, this was meant for the list:

Drawing on analogues from national currencies, it's also possible to
alleviate the confusion by switching currency symbols, e.g. to XBT or
NBC (New Bitcoin).

1 XBC == 1 uBTC

On 11/14/13 2:03 PM, Jeff Garzik wrote:
> Go straight to uBTC. Humans and existing computer systems handle
> numbers to the left of the decimals just fine (HK Dollars, Yen).
> The opposite is untrue (QuickBooks really does not like 3+ decimal
> places).
> 
> - Jeff
> 
> On Nov 14, 2013 4:40 PM, "Mark Friedenbach" <mark at monetize.io 
> <mailto:mark at monetize.io>> wrote:
> 
> For this reason I'm in favor of skipping mBTC and moving straight
> to uBTC. Having eight, or even five decimal places is not intuitive
> to the average user. Two decimal places is becoming standard for
> new national currencies, and we wouldn't be too far from human
> scale everyday numbers: 25.00uBTC ~= $0.01 currently. And I don't
> think very many people on this list would consider bitcoin
> overvalued in the long term perspective.
> 
> Better to go through a confusing renumbering only once.
> 
> Mark
-----BEGIN PGP SIGNATURE-----
Version: GnuPG/MacGPG2 v2.0.19 (Darwin)
Comment: GPGTools - http://gpgtools.org
Comment: Using GnuPG with Thunderbird - http://www.enigmail.net/

iQIcBAEBAgAGBQJShU9YAAoJEAdzVfsmodw4svUP/1THaWdSoy+/J1Z4QcuoEC5T
Lxyu5uN6d1TRb/fxZ1VQI+FJgRjJTT2zIBrk9lJHBuvYy6Gq6JUjHQZHbC7lhr9Q
nDwM76LFOWPR0PDC9JLIeiDbkIimrARUjrKIMUJYCpQWHfLOZssWjDmLhAucAYcF
gmObw+9M2fR7Xh7X2qOQt+xXWyAeeqCur2EClV+xNnhcyQXyXl2R9qdCF5ugy7k1
nmHhMYap7q8TP2yrH/SloEGor56DICamVNnB91HOiN/QY9fZD0To6+RTJDsu/CR3
01hRS+5JNVEQIBQ7cCxAO7kRxcxf9aDabEdS24r/alpuMg7/32wz/EqCSCqQtSnq
MlvKifF5Bh+Y0hSNbNKdFMSes6fOhoLkl87ugKCkH8FQjI8rev3ke79tGKK92m01
kmSBuzazwjVDNS/wwhPunkaiBaEAtzo1VCilibjjqLQEWdUBdsawsdlLDYb13mQD
xPxDTKB2TR33Iri+mvdAai8qrLGHJUDDLVs5N0uK+tHbxqgznCkQ3NSINtuwFRLk
L1Usvr3XNSc0Jh7lHfPP+voE1TAYsDD3DXmT0eAmIXXzo1E4J2UKzhI+M7kJM8M9
qSzbC3TExmijd9LrOYdVX3Ab+LP6XDSPym4rBb0mAH8DOxKmFOYrNIwURnmGwJFA
jZi0WrHXHpg3ThXP8Jdj
=J7x7
-----END PGP SIGNATURE-----



From drak at zikula.org  Thu Nov 14 22:32:42 2013
From: drak at zikula.org (Drak)
Date: Thu, 14 Nov 2013 22:32:42 +0000
Subject: [Bitcoin-development] moving the default display to mbtc
In-Reply-To: <528547FD.2070300@gmail.com>
References: <CAKaEYhK4oXH3hB7uS3=AEkA6r0VB5OYyTua+LOP18rq+rYajHg@mail.gmail.com>
	<52852C2D.9020103@gmail.com> <52853D8A.6010501@monetize.io>
	<CAJfRnm7w5dH5BwqnQX_APx53rhfBiUEbLP5RSU6o15rToOqAhw@mail.gmail.com>
	<528547FD.2070300@gmail.com>
Message-ID: <CANAnSg31hZYVD2BHYtr=-qsAia1uO7uBbdXGbN6-bg3qbkQjng@mail.gmail.com>

On 14 November 2013 22:00, Alan Reiner <etotheipi at gmail.com> wrote:

>  Just keep in mind it will be a little awkward that 54.3 uBTC is the
> smallest unit that can be transferred [easily] and the standard fees are
> 500 uBTC.    It's not a deal breaker,
>

The fed was reduced to 0.0001/kb a while back...

Drak
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131114/485c885c/attachment.html>

From drak at zikula.org  Thu Nov 14 22:37:08 2013
From: drak at zikula.org (Drak)
Date: Thu, 14 Nov 2013 22:37:08 +0000
Subject: [Bitcoin-development] moving the default display to mbtc
In-Reply-To: <CANAnSg31hZYVD2BHYtr=-qsAia1uO7uBbdXGbN6-bg3qbkQjng@mail.gmail.com>
References: <CAKaEYhK4oXH3hB7uS3=AEkA6r0VB5OYyTua+LOP18rq+rYajHg@mail.gmail.com>
	<52852C2D.9020103@gmail.com> <52853D8A.6010501@monetize.io>
	<CAJfRnm7w5dH5BwqnQX_APx53rhfBiUEbLP5RSU6o15rToOqAhw@mail.gmail.com>
	<528547FD.2070300@gmail.com>
	<CANAnSg31hZYVD2BHYtr=-qsAia1uO7uBbdXGbN6-bg3qbkQjng@mail.gmail.com>
Message-ID: <CANAnSg2m0LYv9hgsyrDasFcVNLUbtJ75KoNBH+hzttHKSWfqiw@mail.gmail.com>

On 14 November 2013 22:32, Drak <drak at zikula.org> wrote:

> On 14 November 2013 22:00, Alan Reiner <etotheipi at gmail.com> wrote:
>
>>  Just keep in mind it will be a little awkward that 54.3 uBTC is the
>> smallest unit that can be transferred [easily] and the standard fees are
>> 500 uBTC.    It's not a deal breaker,
>>
>
> The fed was reduced to 0.0001/kb a while back...
>

Hrm. Freudian slip... you know what I mean *fee, not fed.... :-)

.... so in response to those saying the fees are $0.20, actually it's more
like $0.042 at current prices.

Drak
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131114/e4c182e4/attachment.html>

From etotheipi at gmail.com  Thu Nov 14 22:53:16 2013
From: etotheipi at gmail.com (Alan Reiner)
Date: Thu, 14 Nov 2013 17:53:16 -0500
Subject: [Bitcoin-development] moving the default display to mbtc
In-Reply-To: <52854F59.9000500@monetize.io>
References: <CAKaEYhK4oXH3hB7uS3=AEkA6r0VB5OYyTua+LOP18rq+rYajHg@mail.gmail.com>	<52852C2D.9020103@gmail.com>	<52853D8A.6010501@monetize.io>	<CAJHLa0M6CkoDbD6FFixf9-mmhug7DvehSWCJ+EHWVxUDuwNiBg@mail.gmail.com>
	<52854F59.9000500@monetize.io>
Message-ID: <5285545C.4030607@gmail.com>

I really like the XBT idea.  It makes a lot of sense to match the ISO
currency symbol (though the ISO guys will have to adjust the way they've
defined the "XBT").  And I do agree that going right to uBTC and
skipping mBTC makes sense, too.

I'd prefer them not be called "micro bitcoins."  I really want to call
them "microbes" ... but I'm not sure that has the right flavor for money
transfer :)  "Please give me 872 microbes".  Perhaps we just call them
"bits."  Or even "micros" or "microbits".  As I write this, I realize
there's probably 872 threads on the forums about this already...

But we would want to promote a consistent term, to avoid further
confusion when people use different names for the new unit.  It's not
guaranteed to be successful, but if we pick a good name, and build it
into the interface on the first release pushing the new unit, we have a
chance to make the transition even easier.





On 11/14/2013 05:31 PM, Mark Friedenbach wrote:
> Whoops, this was meant for the list:
>
> Drawing on analogues from national currencies, it's also possible to
> alleviate the confusion by switching currency symbols, e.g. to XBT or
> NBC (New Bitcoin).
>
> 1 XBC == 1 uBTC
>
> On 11/14/13 2:03 PM, Jeff Garzik wrote:
> > Go straight to uBTC. Humans and existing computer systems handle
> > numbers to the left of the decimals just fine (HK Dollars, Yen).
> > The opposite is untrue (QuickBooks really does not like 3+ decimal
> > places).
>
> > - Jeff
>
> > On Nov 14, 2013 4:40 PM, "Mark Friedenbach" <mark at monetize.io
> > <mailto:mark at monetize.io>> wrote:
>
> > For this reason I'm in favor of skipping mBTC and moving straight
> > to uBTC. Having eight, or even five decimal places is not intuitive
> > to the average user. Two decimal places is becoming standard for
> > new national currencies, and we wouldn't be too far from human
> > scale everyday numbers: 25.00uBTC ~= $0.01 currently. And I don't
> > think very many people on this list would consider bitcoin
> > overvalued in the long term perspective.
>
> > Better to go through a confusing renumbering only once.
>
> > Mark
>
>
------------------------------------------------------------------------------
> DreamFactory - Open Source REST & JSON Services for HTML5 & Native Apps
> OAuth, Users, Roles, SQL, NoSQL, BLOB Storage and External API Access
> Free app hosting. Or install the open source package on any LAMP server.
> Sign up and see examples for AngularJS, jQuery, Sencha Touch and Native!
>
http://pubads.g.doubleclick.net/gampad/clk?id=63469471&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development


-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131114/c8bca901/attachment.html>

From luke at dashjr.org  Thu Nov 14 23:01:38 2013
From: luke at dashjr.org (Luke-Jr)
Date: Thu, 14 Nov 2013 23:01:38 +0000
Subject: [Bitcoin-development] moving the default display to mbtc
In-Reply-To: <CAJfRnm7-34jwX0m+0Trj9-YvXFeUYMGq35AoRkY7bq9w-XpabA@mail.gmail.com>
References: <CAKaEYhK4oXH3hB7uS3=AEkA6r0VB5OYyTua+LOP18rq+rYajHg@mail.gmail.com>
	<528547FD.2070300@gmail.com>
	<CAJfRnm7-34jwX0m+0Trj9-YvXFeUYMGq35AoRkY7bq9w-XpabA@mail.gmail.com>
Message-ID: <201311142301.39550.luke@dashjr.org>

On Thursday, November 14, 2013 10:07:58 PM Allen Piscitello wrote:
> Obviously the answer is to just display all fees and trading rates as BTC
> or MBTC (.0000005 MBTC fee? how cheap!).  On a more serious note, the
> transition should definitely be thought out well as it could be very
> damaging to have this confusion, but I would prefer to do it only once
> rather than twice.

I wonder if it might make sense to bundle some other terminology fixups at the 
same time.

Right now, Bitcoin-Qt has been using the term "confirmations" (plural) to 
refer to how many blocks deep a transaction is buried. We also use the term 
"confirmation" to refer to the point where a transaction is accepted as paid. 
IMO, the latter use makes sense, but the former leads to confusion especially 
in light of scamcoins which abuse this confusion to claim they have "faster 
confirmations", implying that the actual confirmation occurs faster when it 
really doesn't. "5 blocks deep" may not be more clear to laymen, but at least 
it makes it harder for people to confuse with actual confirmation.

I think we all know the problems with the term "address". People naturally 
compare it to postal addresses, email addresses, etc, which operate 
fundamentally different. I suggest that we switch to using "invoice id" to 
refer to what is now known as addresses, as that seems to get the more natural 
understanding to people. On the other hand, with the advent of the payment 
protocol, perhaps address/invoice id use will die out soon?

Thoughts?

Luke



From jgarzik at bitpay.com  Thu Nov 14 23:01:45 2013
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Thu, 14 Nov 2013 18:01:45 -0500
Subject: [Bitcoin-development] moving the default display to mbtc
In-Reply-To: <5285545C.4030607@gmail.com>
References: <CAKaEYhK4oXH3hB7uS3=AEkA6r0VB5OYyTua+LOP18rq+rYajHg@mail.gmail.com>
	<52852C2D.9020103@gmail.com> <52853D8A.6010501@monetize.io>
	<CAJHLa0M6CkoDbD6FFixf9-mmhug7DvehSWCJ+EHWVxUDuwNiBg@mail.gmail.com>
	<52854F59.9000500@monetize.io> <5285545C.4030607@gmail.com>
Message-ID: <CAJHLa0MeZ6oR9CNQ3G27mOZU-PTxNzfZY2y53We2E31fp19yJg@mail.gmail.com>

On Thu, Nov 14, 2013 at 5:53 PM, Alan Reiner <etotheipi at gmail.com> wrote:
> I really like the XBT idea.  It makes a lot of sense to match the ISO

Indeed.  The decimal place move would be an excellent time to switch.

     Jeff



From luke at dashjr.org  Thu Nov 14 23:10:32 2013
From: luke at dashjr.org (Luke-Jr)
Date: Thu, 14 Nov 2013 23:10:32 +0000
Subject: [Bitcoin-development] moving the default display to mbtc
In-Reply-To: <5285545C.4030607@gmail.com>
References: <CAKaEYhK4oXH3hB7uS3=AEkA6r0VB5OYyTua+LOP18rq+rYajHg@mail.gmail.com>
	<52854F59.9000500@monetize.io> <5285545C.4030607@gmail.com>
Message-ID: <201311142310.33829.luke@dashjr.org>

On Thursday, November 14, 2013 10:53:16 PM Alan Reiner wrote:
> I really like the XBT idea.  It makes a lot of sense to match the ISO
> currency symbol (though the ISO guys will have to adjust the way they've
> defined the "XBT").  And I do agree that going right to uBTC and
> skipping mBTC makes sense, too.
> 
> I'd prefer them not be called "micro bitcoins."  I really want to call
> them "microbes" ... but I'm not sure that has the right flavor for money
> transfer :)  "Please give me 872 microbes".  Perhaps we just call them
> "bits."  Or even "micros" or "microbits".  As I write this, I realize
> there's probably 872 threads on the forums about this already...
> 
> But we would want to promote a consistent term, to avoid further
> confusion when people use different names for the new unit.  It's not
> guaranteed to be successful, but if we pick a good name, and build it
> into the interface on the first release pushing the new unit, we have a
> chance to make the transition even easier.

As long as we're using SI units, IMO we should stick to SI. That means "micro-
bitcoins". *Informally/spoken*, an abbreviation like "mibicoins" might make 
sense.

Luke



From mark at monetize.io  Thu Nov 14 23:11:26 2013
From: mark at monetize.io (Mark Friedenbach)
Date: Thu, 14 Nov 2013 15:11:26 -0800
Subject: [Bitcoin-development] moving the default display to mbtc
In-Reply-To: <201311142301.39550.luke@dashjr.org>
References: <CAKaEYhK4oXH3hB7uS3=AEkA6r0VB5OYyTua+LOP18rq+rYajHg@mail.gmail.com>	<528547FD.2070300@gmail.com>	<CAJfRnm7-34jwX0m+0Trj9-YvXFeUYMGq35AoRkY7bq9w-XpabA@mail.gmail.com>
	<201311142301.39550.luke@dashjr.org>
Message-ID: <5285589E.10707@monetize.io>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On 11/14/13 3:01 PM, Luke-Jr wrote:
> I think we all know the problems with the term "address". People
> naturally compare it to postal addresses, email addresses, etc,
> which operate fundamentally different. I suggest that we switch to
> using "invoice id" to refer to what is now known as addresses, as
> that seems to get the more natural understanding to people. On the
> other hand, with the advent of the payment protocol, perhaps
> address/invoice id use will die out soon?
> 
> Thoughts?

"key id" (thanks sipa).

I know it's a more technical term, but that is rather the point. It
was a fundamental error to call hashed-pubkeys "addresses" as people
either associate this with "account" or physical addresses, which also
rarely change.

Security and privacy guarantees of the system are defeated when key
pairs are reused. We should ideally adopt terminology that lead people
to associations of ephemeral, temporary use. "key id" is at least
neutral in this regard. Can anyone think of something better?

Mark

-----BEGIN PGP SIGNATURE-----
Version: GnuPG/MacGPG2 v2.0.19 (Darwin)
Comment: GPGTools - http://gpgtools.org
Comment: Using GnuPG with Thunderbird - http://www.enigmail.net/

iQIcBAEBAgAGBQJShVieAAoJEAdzVfsmodw4TlkP/i2cZm9NolReIsv6WBNQUGZ6
0VJveOcsOmEXj3ixSyzPRitFl52EOfU+LZaM3liwFPczuIOXZUXOLAJqakxGGsFa
cWwvZjrBk13aTR+4dXZ6OWcCNmTfm6+st2+v1MpQcXlHD8J1WtrdrzKr3fNSntir
yHbNmF6hPfgLr64m52BhUVrxBg9eiIFDI6VCzmUgk+paNmIxs9dgx7POnz1/hQb3
2FGfNt2J81t4F78mpzjtKx+vHRyHpIKJ2+3mjzcQ7IBkhBgPYnp69TwBSGXbg7l9
6yV0P7DGjWepO5+s96GCjbScYpmZO0gx0ZTn/eamfxh20XuX2fZBEVNd1KnhX4Xq
D4UwylGNa5FteRgURtVN5Xdb82jB2qhhr/IkGSgKds24zhHzgvBgvLJBgwtQHwil
M/y2DMC70WVEXf0Fz96L1kNYUA6062/ZNlwITRWxkUUJprF+xyN3R+BVWMggBMnR
Vjht74MZMkJyYlPQr8BRbYdhgMwv6dh0v5T4M6ck6MjKYj/GLsnEfHyY2d/BNg8c
2nkcBC8Dtv9KoFOk6STS1n7R4ooqepmdsRNPBZUzKvv/NN1B1A8jeluLiN9hSzl1
ubDF/34LJTji8bP9jfDBEND94xdaKjTl+2ISweRttBOOVqCtQlzCQ4udiT7vAntb
AYYMBYmYO/A926T+K6Lp
=kFj9
-----END PGP SIGNATURE-----



From luke at dashjr.org  Thu Nov 14 23:13:59 2013
From: luke at dashjr.org (Luke-Jr)
Date: Thu, 14 Nov 2013 23:13:59 +0000
Subject: [Bitcoin-development] moving the default display to mbtc
In-Reply-To: <5285589E.10707@monetize.io>
References: <CAKaEYhK4oXH3hB7uS3=AEkA6r0VB5OYyTua+LOP18rq+rYajHg@mail.gmail.com>
	<201311142301.39550.luke@dashjr.org> <5285589E.10707@monetize.io>
Message-ID: <201311142314.00978.luke@dashjr.org>

On Thursday, November 14, 2013 11:11:26 PM Mark Friedenbach wrote:
> "key id" (thanks sipa).
> 
> I know it's a more technical term, but that is rather the point. It
> was a fundamental error to call hashed-pubkeys "addresses" as people
> either associate this with "account" or physical addresses, which also
> rarely change.
> 
> Security and privacy guarantees of the system are defeated when key
> pairs are reused. We should ideally adopt terminology that lead people
> to associations of ephemeral, temporary use. "key id" is at least
> neutral in this regard. Can anyone think of something better?

Keys are often reused, so not sure that conveys the single-use much better.
Reason I suggested invoice id is because nobody wants to pay the same invoice 
twice.

Luke



From jgarzik at bitpay.com  Thu Nov 14 23:22:38 2013
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Thu, 14 Nov 2013 18:22:38 -0500
Subject: [Bitcoin-development] moving the default display to mbtc
In-Reply-To: <5285589E.10707@monetize.io>
References: <CAKaEYhK4oXH3hB7uS3=AEkA6r0VB5OYyTua+LOP18rq+rYajHg@mail.gmail.com>
	<528547FD.2070300@gmail.com>
	<CAJfRnm7-34jwX0m+0Trj9-YvXFeUYMGq35AoRkY7bq9w-XpabA@mail.gmail.com>
	<201311142301.39550.luke@dashjr.org> <5285589E.10707@monetize.io>
Message-ID: <CAJHLa0MxjbxiXAh1-+Rk2QyfzYV80j3br-fA59W9nX3FJ_3zeA@mail.gmail.com>

On Thu, Nov 14, 2013 at 6:11 PM, Mark Friedenbach <mark at monetize.io> wrote:
> "key id" (thanks sipa).

+1, short and accurate

-- 
Jeff Garzik
Senior Software Engineer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From jgarzik at bitpay.com  Fri Nov 15 00:05:06 2013
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Thu, 14 Nov 2013 19:05:06 -0500
Subject: [Bitcoin-development] moving the default display to mbtc
In-Reply-To: <CANAnSg3zWdyGymJ2tE5RUQsCSqh4jw7pkb619tX0nVoi-9efgA@mail.gmail.com>
References: <CAKaEYhK4oXH3hB7uS3=AEkA6r0VB5OYyTua+LOP18rq+rYajHg@mail.gmail.com>
	<CANAnSg3zWdyGymJ2tE5RUQsCSqh4jw7pkb619tX0nVoi-9efgA@mail.gmail.com>
Message-ID: <CAJHLa0MhfLarZ09Aajd-9_HVYTD=TxgLxcshr-xNHUb1XbOpSw@mail.gmail.com>

On Thu, Nov 14, 2013 at 5:27 PM, Drak <drak at zikula.org> wrote:
> Unless something is recommended/done by the bitcoin core developers I doubt
> much will change at bitcoin user/consumer level.

While the sentiment is appreciated, it seems important to gently push
back a bit, and remind:

This is a decentralized currency, and we should avoid centralizing
decisions.  This is something that impacts the community at large, and
deserves input and discussion at every level.

I would suggest posting on all possible forums "proposal: switch to
uBTC, labelled as ISO prefers (XBT?)" and see what sort of discussion
is generated.  If the support is broad, it will be plain from the
responses if there is a consensus.  Perhaps everyone will agree it is
the best course, and we can make an easy change.

But we need less "core dev fiat" not more :)

-- 
Jeff Garzik
Senior Software Engineer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From luke at dashjr.org  Fri Nov 15 00:15:58 2013
From: luke at dashjr.org (Luke-Jr)
Date: Fri, 15 Nov 2013 00:15:58 +0000
Subject: [Bitcoin-development] moving the default display to mbtc
In-Reply-To: <5285589E.10707@monetize.io>
References: <CAKaEYhK4oXH3hB7uS3=AEkA6r0VB5OYyTua+LOP18rq+rYajHg@mail.gmail.com>
	<201311142301.39550.luke@dashjr.org> <5285589E.10707@monetize.io>
Message-ID: <201311150015.59537.luke@dashjr.org>

On Thursday, November 14, 2013 11:11:26 PM Mark Friedenbach wrote:
> On 11/14/13 3:01 PM, Luke-Jr wrote:
> > I think we all know the problems with the term "address". People
> > naturally compare it to postal addresses, email addresses, etc,
> > which operate fundamentally different. I suggest that we switch to
> > using "invoice id" to refer to what is now known as addresses, as
> > that seems to get the more natural understanding to people. On the
> > other hand, with the advent of the payment protocol, perhaps
> > address/invoice id use will die out soon?
> > 
> > Thoughts?
> 
> "key id" (thanks sipa).

To be clear, I wasn't suggesting renaming scriptPubKey, which sipa was talking 
about with "key id"; just the destination-for-transaction presented to
end-users.



From mark at monetize.io  Fri Nov 15 00:18:45 2013
From: mark at monetize.io (Mark Friedenbach)
Date: Thu, 14 Nov 2013 16:18:45 -0800
Subject: [Bitcoin-development] moving the default display to mbtc
In-Reply-To: <201311150015.59537.luke@dashjr.org>
References: <CAKaEYhK4oXH3hB7uS3=AEkA6r0VB5OYyTua+LOP18rq+rYajHg@mail.gmail.com>
	<201311142301.39550.luke@dashjr.org> <5285589E.10707@monetize.io>
	<201311150015.59537.luke@dashjr.org>
Message-ID: <52856865.4040206@monetize.io>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On 11/14/13 4:15 PM, Luke-Jr wrote:
> On Thursday, November 14, 2013 11:11:26 PM Mark Friedenbach wrote:
>> "key id" (thanks sipa).
> 
> To be clear, I wasn't suggesting renaming scriptPubKey, which sipa
> was talking about with "key id"; just the
> destination-for-transaction presented to end-users.

I was referencing a IRC conversation where sipa suggested "key id" as
a replacement for "address".

My only issue with "invoice" is possible confusion over the payment
protocol.

Mark
-----BEGIN PGP SIGNATURE-----
Version: GnuPG/MacGPG2 v2.0.19 (Darwin)
Comment: GPGTools - http://gpgtools.org
Comment: Using GnuPG with Thunderbird - http://www.enigmail.net/

iQIcBAEBAgAGBQJShWhlAAoJEAdzVfsmodw4SgUP/j52LdhCh/MZXrZNlKQhO57/
RO2Z9Ul2lL/uAB/7/lydxDmds6Ad12QT285fwYycvnKY31F2flBI3j+Er8EDZPCs
7O2eTWw9LD1DF45iBoU2PM1oXL+G1xsiNoyTKriLIH9n16sXr1/XvaeRa539gRhT
naM/r3AeW0mr6TZ/kh4/KRcFkkMsnyzrdFDwEpbpHlWPfz+QFQaJ6fI1rtgvD8xv
v7zlRBi7WhSdPQhE+SmK97hxRRTK0qW+qSOYd5zbh9gZXRcbI5ys0erikORUVBjR
/rMnKzK46uF8RYddXiMew/AdrFBb999MJsdI2Ci+HOezAzg5tyxf4IqKqk6FJcVK
TC1KebM/TpH3MpAqYLpRo24/SAelLLCIPD9S+afz5ME+pD5cuMZNAnyqY9vVPpCb
w9sEh5JksIVXXPugKM5ZW4VBjj/h6zOKD1fsjirgV0JzKKZm59JHSG9NL7XQhoSS
zFb1SxH8jueH+xAIE6mCUDWK1uDPUphJ6ZMs2fk3opBeDEevLspR2g+U2XSdtB4p
ymV+sbsph+rT02Gf6d588WXlQHbD5KTaLbyq6XqFHI3UIhjhVs0mAda/Ey6S+PMS
o/5Q10gX9NKPinqQU/WYHD2pgEwRFhCCqSuAbfWzz4v2fyvUT3v9o/aDxXlU/ogF
MVptUVrWXCJDUymG0mbq
=EclJ
-----END PGP SIGNATURE-----



From nanotube at gmail.com  Fri Nov 15 00:37:27 2013
From: nanotube at gmail.com (Daniel F)
Date: Thu, 14 Nov 2013 19:37:27 -0500
Subject: [Bitcoin-development] moving the default display to mbtc
In-Reply-To: <CAJHLa0MhfLarZ09Aajd-9_HVYTD=TxgLxcshr-xNHUb1XbOpSw@mail.gmail.com>
References: <CAKaEYhK4oXH3hB7uS3=AEkA6r0VB5OYyTua+LOP18rq+rYajHg@mail.gmail.com>	<CANAnSg3zWdyGymJ2tE5RUQsCSqh4jw7pkb619tX0nVoi-9efgA@mail.gmail.com>
	<CAJHLa0MhfLarZ09Aajd-9_HVYTD=TxgLxcshr-xNHUb1XbOpSw@mail.gmail.com>
Message-ID: <52856CC7.5050103@gmail.com>

> This is a decentralized currency, and we should avoid centralizing
> decisions.  This is something that impacts the community at large, and
> deserves input and discussion at every level.
> 
> I would suggest posting on all possible forums "proposal: switch to
> uBTC, labelled as ISO prefers (XBT?)" and see what sort of discussion
> is generated.  If the support is broad, it will be plain from the
> responses if there is a consensus.  Perhaps everyone will agree it is
> the best course, and we can make an easy change.
> 
> But we need less "core dev fiat" not more :)
> 
this seems like such a paint-the-bikeshed problem that it's sure to
generate vast volumes of discussion, waste a lot of people's time, and
all for only a dubious (imo) gain. (case in point - here i am
contributing to it :) ).

i agree that we should avoid centralizing this. i'll go a step further
and note that the client already has a dropdown allowing individuals to
choose units. merchants are free to choose to price in different units.
exchanges are free to denominate trade in different units.

i suggest we just let the market do its thing and not get into trying to
'make a decision' of any sort.



From melvincarvalho at gmail.com  Fri Nov 15 00:46:14 2013
From: melvincarvalho at gmail.com (Melvin Carvalho)
Date: Fri, 15 Nov 2013 01:46:14 +0100
Subject: [Bitcoin-development] moving the default display to mbtc
In-Reply-To: <52856CC7.5050103@gmail.com>
References: <CAKaEYhK4oXH3hB7uS3=AEkA6r0VB5OYyTua+LOP18rq+rYajHg@mail.gmail.com>
	<CANAnSg3zWdyGymJ2tE5RUQsCSqh4jw7pkb619tX0nVoi-9efgA@mail.gmail.com>
	<CAJHLa0MhfLarZ09Aajd-9_HVYTD=TxgLxcshr-xNHUb1XbOpSw@mail.gmail.com>
	<52856CC7.5050103@gmail.com>
Message-ID: <CAKaEYh+ZAmNVTG7BUK3d9aZhE3Q0_-boQ9SUkinJr5VC3e+1YA@mail.gmail.com>

On 15 November 2013 01:37, Daniel F <nanotube at gmail.com> wrote:

> > This is a decentralized currency, and we should avoid centralizing
> > decisions.  This is something that impacts the community at large, and
> > deserves input and discussion at every level.
> >
> > I would suggest posting on all possible forums "proposal: switch to
> > uBTC, labelled as ISO prefers (XBT?)" and see what sort of discussion
> > is generated.  If the support is broad, it will be plain from the
> > responses if there is a consensus.  Perhaps everyone will agree it is
> > the best course, and we can make an easy change.
> >
> > But we need less "core dev fiat" not more :)
> >
> this seems like such a paint-the-bikeshed problem that it's sure to
> generate vast volumes of discussion, waste a lot of people's time, and
> all for only a dubious (imo) gain. (case in point - here i am
> contributing to it :) ).
>
> i agree that we should avoid centralizing this. i'll go a step further
> and note that the client already has a dropdown allowing individuals to
> choose units. merchants are free to choose to price in different units.
> exchanges are free to denominate trade in different units.
>
> i suggest we just let the market do its thing and not get into trying to
> 'make a decision' of any sort.
>

I do agree with you here

e.g. I think the question of the ISO code (XBT vs BTC) is probably out of
scope for this thread, and there was no clear consensus, when it came up on
the forums.

As a data point, the price of bitcoin has gone up roughly 1000x since
satoshi made his suggestion that the decimal point could move 3 places.

I dont think it's a question of centralization, I was just seeking opinion
on what people felt about the reference implementation.  How about just
changing the default value in the dropdown from BTC -> to mBTC

The the other clients and exchange choose whether they want to follow suit
or not

>
>
>
> ------------------------------------------------------------------------------
> DreamFactory - Open Source REST & JSON Services for HTML5 & Native Apps
> OAuth, Users, Roles, SQL, NoSQL, BLOB Storage and External API Access
> Free app hosting. Or install the open source package on any LAMP server.
> Sign up and see examples for AngularJS, jQuery, Sencha Touch and Native!
> http://pubads.g.doubleclick.net/gampad/clk?id=63469471&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131115/5cd8c304/attachment.html>

From etotheipi at gmail.com  Fri Nov 15 00:57:43 2013
From: etotheipi at gmail.com (Alan Reiner)
Date: Thu, 14 Nov 2013 19:57:43 -0500
Subject: [Bitcoin-development] moving the default display to mbtc
In-Reply-To: <52856CC7.5050103@gmail.com>
References: <CAKaEYhK4oXH3hB7uS3=AEkA6r0VB5OYyTua+LOP18rq+rYajHg@mail.gmail.com>	<CANAnSg3zWdyGymJ2tE5RUQsCSqh4jw7pkb619tX0nVoi-9efgA@mail.gmail.com>	<CAJHLa0MhfLarZ09Aajd-9_HVYTD=TxgLxcshr-xNHUb1XbOpSw@mail.gmail.com>
	<52856CC7.5050103@gmail.com>
Message-ID: <52857187.4060506@gmail.com>

I disagree.  There's a real perception and usability issue with the
current interface combined with the current price.  People are
intimidated by the current system, even though the price really reflects
Bitcoin starting to spread its wings (maybe prematurely, bubble-style,
but the price will have to get to this point eventually if Bitcoin will
thrive at the target scale). 

Bitcoin's learning curve is hard enough already.   As silly as it
sounds, feeling "insecure" because you only 0.00032 BTC, and then using
too many zeroes when paying for your smoothie are problems that can
really turn people off.  You say "Let the market sort it out". 
Sometimes the market needs direction and consistency.  Without us doing
anything, we just end up with fragmentation and confusion. 

I'd much prefer we reach a consensus on a path forward and push that
path hard.  Because there's always resistance to change, and confusion
along the way.  The easier and more consistent we can make it, the
smoother it will be.  We want to avoid:

"Hey, I'll sell it to you for 382 microbes." 
"What is a microbe?  Is that the same as a XBT?"
"I don't know, my wallet uses NBC."
"Well how much BTC is it? Okay, just send me 0.00038200 BTC"
"Four zeros after the decimal?"
"Yeah... oh wait you just sent me 10x"
...

Again it sounds silly, but this is a real usability issue.

On 11/14/2013 07:37 PM, Daniel F wrote:
>> This is a decentralized currency, and we should avoid centralizing
>> decisions.  This is something that impacts the community at large, and
>> deserves input and discussion at every level.
>>
>> I would suggest posting on all possible forums "proposal: switch to
>> uBTC, labelled as ISO prefers (XBT?)" and see what sort of discussion
>> is generated.  If the support is broad, it will be plain from the
>> responses if there is a consensus.  Perhaps everyone will agree it is
>> the best course, and we can make an easy change.
>>
>> But we need less "core dev fiat" not more :)
>>
> this seems like such a paint-the-bikeshed problem that it's sure to
> generate vast volumes of discussion, waste a lot of people's time, and
> all for only a dubious (imo) gain. (case in point - here i am
> contributing to it :) ).
>
> i agree that we should avoid centralizing this. i'll go a step further
> and note that the client already has a dropdown allowing individuals to
> choose units. merchants are free to choose to price in different units.
> exchanges are free to denominate trade in different units.
>
> i suggest we just let the market do its thing and not get into trying to
> 'make a decision' of any sort.
>
> ------------------------------------------------------------------------------
> DreamFactory - Open Source REST & JSON Services for HTML5 & Native Apps
> OAuth, Users, Roles, SQL, NoSQL, BLOB Storage and External API Access
> Free app hosting. Or install the open source package on any LAMP server.
> Sign up and see examples for AngularJS, jQuery, Sencha Touch and Native!
> http://pubads.g.doubleclick.net/gampad/clk?id=63469471&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development




From tamas at bitsofproof.com  Fri Nov 15 05:21:26 2013
From: tamas at bitsofproof.com (Tamas Blummer)
Date: Fri, 15 Nov 2013 06:21:26 +0100
Subject: [Bitcoin-development] moving the default display to mbtc
Message-ID: <4FEB4B8B-7F96-470E-8129-5ECB3382DEEB@bitsofproof.com>

Hi Jeff,

such a vote is up there since March:

https://bitcointalk.org/index.php?topic=149150.0

Votes are in favor of it.

Advantages are obvious:

1. having satoshi as 1/100 of the main unit is familiar to people like USD and cent
2. All existing financial software can deal/store big numbers but typically only 2 decimals.
3. Split could be linked with the introduction of the ISO code in one step.

Lets get it finally done.

On Thu, 14 Nov 2013 19:05:06 -0500 Jeff Garzik <jgarzik at bitpay.com> wrote:
> would suggest posting on all possible forums "proposal: switch to
>uBTC, labelled as ISO prefers (XBT?)" and see what sort of discussion
>is generated.  If the support is broad, it will be plain from the
>responses if there is a consensus.  Perhaps everyone will agree it is
>the best course, and we can make an easy change.
>
>But we need less "core dev fiat" not more :)
>
>-- 
>Jeff Garzik
>Senior Software Engineer and open source evangelist
>BitPay, Inc.      https://bitpay.com/

Regards,

Tam?s Blummer
Founder, CEO
http://bitsofproof.com

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 495 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131115/0c3e0bd4/attachment.sig>

From laanwj at gmail.com  Fri Nov 15 07:18:52 2013
From: laanwj at gmail.com (Wladimir)
Date: Fri, 15 Nov 2013 08:18:52 +0100
Subject: [Bitcoin-development] moving the default display to mbtc
In-Reply-To: <CAJHLa0M6CkoDbD6FFixf9-mmhug7DvehSWCJ+EHWVxUDuwNiBg@mail.gmail.com>
References: <CAKaEYhK4oXH3hB7uS3=AEkA6r0VB5OYyTua+LOP18rq+rYajHg@mail.gmail.com>
	<52852C2D.9020103@gmail.com> <52853D8A.6010501@monetize.io>
	<CAJHLa0M6CkoDbD6FFixf9-mmhug7DvehSWCJ+EHWVxUDuwNiBg@mail.gmail.com>
Message-ID: <CA+s+GJBao16mhrbmgnCmA4tmfVf8dHFWW25jT_y=NBuPQTjL1Q@mail.gmail.com>

On Thu, Nov 14, 2013 at 11:03 PM, Jeff Garzik <jgarzik at bitpay.com> wrote:

> Go straight to uBTC. Humans and existing computer systems handle numbers
> to the left of the decimals just fine (HK Dollars, Yen). The opposite is
> untrue (QuickBooks really does not like 3+ decimal places).
>
I have used mBTC for a long time and never had cope with more than two
numbers to the right of the decimal (which is the norm in euro countries).
Sure, if we have another 100x+ price increase then ?BTC is a better pick,
but right now that would give us *intimidating large numbers*.

Though I have always liked the idea of moving to mBTC or ?BTC, I want the
community to take initiative before switching over the default in the
reference client. The alternative units should first be sufficiently known
to the user base.

It has been possible for a long time to set the reference client to those
units (and all mentions of monetary value are accompanied with a unit).
Maybe we should stealthily collect people's settings and switch over once a
majority switched *ducks*.

Or, more seriously, maybe add a popup when upgrading the first time to 0.9
with an explanation where people can reconsider their unit setting?

Wladimir



>      - Jeff
> On Nov 14, 2013 4:40 PM, "Mark Friedenbach" <mark at monetize.io> wrote:
>
>> -----BEGIN PGP SIGNED MESSAGE-----
>> Hash: SHA1
>>
>> For this reason I'm in favor of skipping mBTC and moving straight to
>> uBTC. Having eight, or even five decimal places is not intuitive to
>> the average user. Two decimal places is becoming standard for new
>> national currencies, and we wouldn't be too far from human scale
>> everyday numbers: 25.00uBTC ~= $0.01 currently. And I don't think very
>> many people on this list would consider bitcoin overvalued in the long
>> term perspective.
>>
>> Better to go through a confusing renumbering only once.
>>
>> Mark
>>
>> On 11/14/13 12:01 PM, Alan Reiner wrote:
>> > ... I'm also of the opinion that it's freakin' hard to change the
>> > base unit in such an established system.  There is no easy way to
>> > do this that doesn't cause more heartache than it's worth...
>> -----BEGIN PGP SIGNATURE-----
>> Version: GnuPG/MacGPG2 v2.0.19 (Darwin)
>> Comment: GPGTools - http://gpgtools.org
>> Comment: Using GnuPG with Thunderbird - http://www.enigmail.net/
>>
>> iQIcBAEBAgAGBQJShT2JAAoJEAdzVfsmodw4DXAQAIJTNbpwBGTXuFyaxXQULf20
>> hMs7OlQZSOZOdsmSiPv2augxzbpa2DhhZjiosrScSBCjxMeYd4S6WgTt/b8moAYR
>> HD8pm88JyCKDOd7bOmzTkgDOTBBFfH+islmOY9VTdeKGHeOHH6yyLMKwnUpa+S89
>> 4YtdzlIXAtfT37dpR5E4cHPmAYCbrRsNOB6j5ohVl2VqRou2vkwoJr/YvaW54M8i
>> ucIZyai2qjNWyJLcZC9QWi9Yw/W/n9QYE2mHyL0qWNaIrZVn6WGty8KpYq+i7aeU
>> 4N4UdtLT7FAhWYec9nmEec868WsUsd+H3/WSWViMinUKO4YA3cyxWDL7MTmTRsci
>> g0R4WGYCzMM3cEWz5ycf5KEBPH/nDlbqFmEartTffqKXgrK5Ohhw+28Iqw5KcDX8
>> SVx34lw2yHWmTeIMY8d3qYKqBdcsvixDUD3xvq+ZqEIa+bZw12s4LIzqmir84TB8
>> fB4bdq5GddXX0PK4pboXL+Nib0OVK72YgYnVs/ejlBmeiG8Ixoz4/ygR5MHm8jcw
>> tSiwH0xohOJWg3lJj0vZorubXoECcOqwPzsZkwnT9irbrvOuk2jCPvrkEC8U9fgA
>> XHgirStS49/lI/iUWrRchoTt5iuwG18G4+E81V/DMsrSkYlipuf2DlEXiapn3hWz
>> ccP053+6o5Rgpc7J1aa0
>> =QW1i
>> -----END PGP SIGNATURE-----
>>
>>
>> ------------------------------------------------------------------------------
>> DreamFactory - Open Source REST & JSON Services for HTML5 & Native Apps
>> OAuth, Users, Roles, SQL, NoSQL, BLOB Storage and External API Access
>> Free app hosting. Or install the open source package on any LAMP server.
>> Sign up and see examples for AngularJS, jQuery, Sencha Touch and Native!
>>
>> http://pubads.g.doubleclick.net/gampad/clk?id=63469471&iu=/4140/ostg.clktrk
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>
>
>
> ------------------------------------------------------------------------------
> DreamFactory - Open Source REST & JSON Services for HTML5 & Native Apps
> OAuth, Users, Roles, SQL, NoSQL, BLOB Storage and External API Access
> Free app hosting. Or install the open source package on any LAMP server.
> Sign up and see examples for AngularJS, jQuery, Sencha Touch and Native!
> http://pubads.g.doubleclick.net/gampad/clk?id=63469471&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131115/64a9bcfe/attachment.html>

From eugen at leitl.org  Fri Nov 15 08:55:42 2013
From: eugen at leitl.org (Eugen Leitl)
Date: Fri, 15 Nov 2013 09:55:42 +0100
Subject: [Bitcoin-development] moving the default display to mbtc
In-Reply-To: <CAJfRnm7-34jwX0m+0Trj9-YvXFeUYMGq35AoRkY7bq9w-XpabA@mail.gmail.com>
References: <CAKaEYhK4oXH3hB7uS3=AEkA6r0VB5OYyTua+LOP18rq+rYajHg@mail.gmail.com>
	<52852C2D.9020103@gmail.com> <52853D8A.6010501@monetize.io>
	<CAJfRnm7w5dH5BwqnQX_APx53rhfBiUEbLP5RSU6o15rToOqAhw@mail.gmail.com>
	<528547FD.2070300@gmail.com>
	<CAJfRnm7-34jwX0m+0Trj9-YvXFeUYMGq35AoRkY7bq9w-XpabA@mail.gmail.com>
Message-ID: <20131115085542.GJ5661@leitl.org>

On Thu, Nov 14, 2013 at 04:07:58PM -0600, Allen Piscitello wrote:
> Obviously the answer is to just display all fees and trading rates as BTC
> or MBTC (.0000005 MBTC fee? how cheap!).  On a more serious note, the
> transition should definitely be thought out well as it could be very
> damaging to have this confusion, but I would prefer to do it only once
> rather than twice.

Why not just using SI prefixes, as God intended.

MBTC mega 10^6 
kBTC kilo 10^3
-    -    10^0
mBTC milli 10^-3 
uBTC micro 10^-6
nBTC nano  10^-9 (at all possible?)



From eugen at leitl.org  Fri Nov 15 09:23:39 2013
From: eugen at leitl.org (Eugen Leitl)
Date: Fri, 15 Nov 2013 10:23:39 +0100
Subject: [Bitcoin-development] moving the default display to mbtc
In-Reply-To: <5285545C.4030607@gmail.com>
References: <CAKaEYhK4oXH3hB7uS3=AEkA6r0VB5OYyTua+LOP18rq+rYajHg@mail.gmail.com>
	<52852C2D.9020103@gmail.com> <52853D8A.6010501@monetize.io>
	<CAJHLa0M6CkoDbD6FFixf9-mmhug7DvehSWCJ+EHWVxUDuwNiBg@mail.gmail.com>
	<52854F59.9000500@monetize.io> <5285545C.4030607@gmail.com>
Message-ID: <20131115092338.GN5661@leitl.org>

On Thu, Nov 14, 2013 at 05:53:16PM -0500, Alan Reiner wrote:
> I really like the XBT idea.  It makes a lot of sense to match the ISO

I really don't. Just use the SI prefixes.

> currency symbol (though the ISO guys will have to adjust the way they've
> defined the "XBT").  And I do agree that going right to uBTC and
> skipping mBTC makes sense, too.

The display units should be choosable by the user. 
 
> I'd prefer them not be called "micro bitcoins."  I really want to call
> them "microbes" ... but I'm not sure that has the right flavor for money

Why on earth?

> transfer :)  "Please give me 872 microbes".  Perhaps we just call them
> "bits."  Or even "micros" or "microbits".  As I write this, I realize
> there's probably 872 threads on the forums about this already...
> 
> But we would want to promote a consistent term, to avoid further
> confusion when people use different names for the new unit.  It's not
> guaranteed to be successful, but if we pick a good name, and build it
> into the interface on the first release pushing the new unit, we have a
> chance to make the transition even easier.

The reason SI prefixes were invented is exactly to preven that case.



From kravets at gmail.com  Fri Nov 15 09:37:56 2013
From: kravets at gmail.com (Alex Kravets)
Date: Fri, 15 Nov 2013 01:37:56 -0800
Subject: [Bitcoin-development] moving the default display to mbtc
In-Reply-To: <20131115092338.GN5661@leitl.org>
References: <CAKaEYhK4oXH3hB7uS3=AEkA6r0VB5OYyTua+LOP18rq+rYajHg@mail.gmail.com>
	<52852C2D.9020103@gmail.com> <52853D8A.6010501@monetize.io>
	<CAJHLa0M6CkoDbD6FFixf9-mmhug7DvehSWCJ+EHWVxUDuwNiBg@mail.gmail.com>
	<52854F59.9000500@monetize.io> <5285545C.4030607@gmail.com>
	<20131115092338.GN5661@leitl.org>
Message-ID: <CALMbsiKktwOVfLv2DZMBXVtWVMbtvK2uSUMKriY+PndzYLmzZg@mail.gmail.com>

Hi guys,

I've seen many many non-geeks be utterly intimidated and confused by
0.000XXXXX quantities and/or mBTC & uBTC notation


Yes, $10 being rougnly 10,000 Won in South Korean is a great example where
large amounts of units work very well in a major economy.


FWIW,  I would prefer the entire switch-over be done *once* *and *at the
same time switching both BTC to XBT and using the following


Currency Code *: *XBT
Unit Definition  *: *1 Bit = 100 Satoshis

Addition benefit is splitting the term Bitcoin/bitcoin (as in Network and
currency unit) into Bitcoin (network) and Bit (the unit).


Perhaps this project/process should have a name and be listed on a road map
somewhere

*BRCS: *Bitcoin Re-denomination and [Currency] Code Standardization project


Cheers ...





On Fri, Nov 15, 2013 at 1:23 AM, Eugen Leitl <eugen at leitl.org> wrote:

> On Thu, Nov 14, 2013 at 05:53:16PM -0500, Alan Reiner wrote:
> > I really like the XBT idea.  It makes a lot of sense to match the ISO
>
> I really don't. Just use the SI prefixes.
>
> > currency symbol (though the ISO guys will have to adjust the way they've
> > defined the "XBT").  And I do agree that going right to uBTC and
> > skipping mBTC makes sense, too.
>
> The display units should be choosable by the user.
>
> > I'd prefer them not be called "micro bitcoins."  I really want to call
> > them "microbes" ... but I'm not sure that has the right flavor for money
>
> Why on earth?
>
> > transfer :)  "Please give me 872 microbes".  Perhaps we just call them
> > "bits."  Or even "micros" or "microbits".  As I write this, I realize
> > there's probably 872 threads on the forums about this already...
> >
> > But we would want to promote a consistent term, to avoid further
> > confusion when people use different names for the new unit.  It's not
> > guaranteed to be successful, but if we pick a good name, and build it
> > into the interface on the first release pushing the new unit, we have a
> > chance to make the transition even easier.
>
> The reason SI prefixes were invented is exactly to preven that case.
>
>
> ------------------------------------------------------------------------------
> DreamFactory - Open Source REST & JSON Services for HTML5 & Native Apps
> OAuth, Users, Roles, SQL, NoSQL, BLOB Storage and External API Access
> Free app hosting. Or install the open source package on any LAMP server.
> Sign up and see examples for AngularJS, jQuery, Sencha Touch and Native!
> http://pubads.g.doubleclick.net/gampad/clk?id=63469471&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>



-- 
Alex Kravets <http://www.linkedin.com/in/akravets>       def redPill = '
Scala <http://www.scala-lang.org/>
[[ brutal honesty <http://goo.gl/vwydt> is the best policy ]]
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131115/8eb4c3e6/attachment.html>

From pete at petertodd.org  Fri Nov 15 09:54:13 2013
From: pete at petertodd.org (Peter Todd)
Date: Fri, 15 Nov 2013 04:54:13 -0500
Subject: [Bitcoin-development] Even simpler minimum fee calculation
 formula: f > bounty*fork_rate/average_blocksize
In-Reply-To: <CAPaL=UWZXSwY9dzX30h_ksj2NAdkyLn3Xtfzs7P8Svg5tsE7Xw@mail.gmail.com>
References: <528367F5.9080303@ceptacle.com>
	<CAPaL=UWZXSwY9dzX30h_ksj2NAdkyLn3Xtfzs7P8Svg5tsE7Xw@mail.gmail.com>
Message-ID: <20131115095413.GA17034@savin>

On Wed, Nov 13, 2013 at 08:01:27PM +0000, John Dillon wrote:
> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA256
> 
> > Last week I posted a writeup: "On the optimal block size and why
> > transaction fees are 8 times too low (or transactions 8 times too big)".
> >
> > Peter Todd made some nice additions to it including different pool sizes
> > into the numbers.
> 
> Peter claims on IRC that he is writing a paper of some kind on this topic. I
> suggest he submit it to that crypto-currency thing the foundation is
> sponsoring. Given the Nov 24th deadline, I also suggest at least making part of
> it public ASAP so some peer review can be done. It would be a shame for a
> simple math error to cause embarassment later.

Here's what I've got to date. The first two sections is just a
relatively simple proof that mining is more profitable as centralization
increases under any circumstance, even before any real-world factors are
taken into account. (other than non-zero latency and bandwidth) Nice
homework problem, and neat that you can easily get a solid proof, but
academic because it doesn't say anything about the magnitude of the
incentives.

The latter part is the actual derivation with proper model of
supply-and-demand for fees. Or will be: while you can of course solve
the equations with mathematica or similar - getting a horrid mess - I'm
still trying to see if I can simplify them sanely in a way that's
step-by-step understandable. Taking me longer than I'd like; sobering to
realize how rusty I am. That said if any you do just throw it at
Mathematica, looks like you get a result where the slope of your
expected block return is at least quadratic with increasing hashing
power. (though I spent all of five minutes eyeballing that result)


\documentclass{article}
\usepackage{url}
\usepackage{mathtools}
\begin{document}
\title{Expected Return}
\author{Peter Todd}
\date{FIXME}
\maketitle

\section{Expected return of a block}
\label{sec:exp-return-of-a-block}

Let $f(L)$, a continuous function,\footnote{Transactions do of course give a
discontinuous $f$. For a large $L$ the approximation error is negligible.} be
the fee-per-byte available to a rational miner for the last transaction
included in a block of size $L$. $f(L)$ is a continuous function defined for $L
\ge 0$. Supply and demand dictates that:

\begin{equation}
    f(L) \ge f(L+\epsilon) \label{eq:f-increases}
\end{equation}

A reasonable example for $f$ might be $f(L) = kL$, representing the demand side
of a linear supply and demand plot. For a block of size $L$ that is optimally
filled with transactions the value of those fees is just the integral:

\begin{equation}
    E_f(L) = \int_0^L f(l)\,dl
\end{equation}

Let $P(Q,L)$, a continuous function, be the probability that a block of size
$L$ produced by a miner with relative hashing power $Q$ will be orphaned.
Because a miner will never orphan their own blocks the following holds true:

\begin{equation}
    P(Q,L) \le P(Q + \epsilon,L) \label{eq:p-increases}
\end{equation}

Similarly because larger blocks take longer to propagate and thus risk getting
orphaned by another miner finding a block at the same time:

\begin{equation}
    P(Q,L) \ge P(Q,L + \epsilon)
\end{equation}

By combining $P(Q, L)$, $E_f(L)$ and the inflation subsidy $B$, gives us the
expected return of a block for a given size and hashing power:\footnote{Note
how real world marginal costs can be accommodated easily in the definitions of
$f$ and $B$.}

\begin{equation}
    E(Q,L) = P(Q,L)[E_f(L) + B]
\end{equation}

The optimal size is simply the size $L$ at which $E(Q, L)$ no longer increases:

\begin{equation}
    \frac{d}{dL}\big[E(Q, L(Q))\big] = 0
\end{equation}

We will define the function $L(Q)$ as the optimal value for a given $Q$. A
miner creating optimal blocks will thus have an expected return per block found
of $E'(Q)=E(Q,L(Q))$. Note how this definition is per unit hashing power by
virtue of being per block found.


\section{Optimal return $E'$ vs. hashing power $Q$}

We want to know if a large miner has a larger return for a given amount of
hashing power. We do this by taking the derivative with respect to $Q$ of the
expected return given optimal strategy:

\begin{align*}
    \frac{d}{dQ}\big[E'(Q)\big] &= \frac{d}{dQ}\big[P(Q,L(Q))\big]\big[E_f(L(Q)) + B\big] + P(Q,L(Q))\frac{d}{dQ}\big[E_f(L(Q))\big] \\
                                &= \frac{dL(Q)}{dQ}\Big[\frac{dP(Q,L(Q))}{dQ}\big[E_f(L(Q)) + B\big] + P(Q,L)\frac{dE_f(L(Q))}{dQ}\Big]
\end{align*}

We know that $L(Q)$, $E_f$, $P$, and $B$ are all $\ge 0$. Thus for $dE'/dQ$ to
be negative requires either $dL/dQ$ to be negative, or for $dL/dQ$ to be
positive and one of $dP/dQ$ or $dE_f/dQ$ negative.

Suppose $dP/dQ$ negative and $dL/dQ$ positive:

\begin{align}
    \frac{dL(Q)}{dQ} > 0    &\implies L(Q + \epsilon) > L(Q) \notag \\
    \frac{dP(L(Q))}{dQ} < 0 &\implies P(Q + \epsilon, L(Q + \epsilon)) < P(Q, L(Q)) \label{eq:dl-pos-dp-neg}
\end{align}

But that contradicts our definition \eqref{eq:p-increases} of $P$ as continuous
and increasing. Suppose instead that $dE_f/dQ$ is negative and $dL/dQ$
positive:

\begin{align}
    \frac{dL(Q)}{dQ} > 0      &\implies L(Q) < L(Q + \epsilon) \notag \\
    \frac{dE_f(L(Q))}{dL} < 0 &\implies E_f(L(Q)) > E_f(L(Q + \epsilon)) \notag \\
                              &\implies \int_0^{L(Q)} f(l)\,dl > \int_0^{L(Q+\epsilon)} f(l)\,dl \notag \\
                              &\implies f(l) < 0 \label{eq:dl-pos-de-neg}
\end{align}

Again we have a contradiction with our definition \eqref{eq:f-increases} of
$f$. Finally suppose $dL/dQ$ is negative:

\begin{align}
    \frac{dL(Q)}{dQ} < 0 &\implies L(Q) > L(Q + \epsilon) \notag \\
                         &\implies P(Q + \epsilon, L(Q + \epsilon)) < P(Q, L(Q)) \notag \\
                         &\implies \frac{dP(Q, L(Q))}{dQ} < 0 \notag \\
                         &\implies \frac{dL(Q)}{dQ}\frac{dP(Q, L(Q))}{dQ} > 0 \label{eq:dl-neg-dp-neg} \\
                         &\implies E_f(L(Q + \epsilon)) < E_f(L(Q)) \implies \frac{dE_f(L(Q))}{dQ} < 0 \notag \\
                         &\implies \frac{dL(Q)}{dQ}\frac{dE_f(L(Q))}{dQ} > 0 \label{eq:dl-neg-de-neg}
\end{align}

Even if $dL/dQ$ is negative \eqref{eq:dl-neg-dp-neg} and
\eqref{eq:dl-neg-de-neg} show that $dE'/dQ > 0$. In conjunction with
\eqref{eq:dl-pos-dp-neg} and \eqref{eq:dl-pos-de-neg} we prove that increased
hashing power always leads to increased return on investment per unit hashing
power.


\subsection{Real-world implications to centralization}

While the author has shown that they still remember first-year, is this result
relevant?

The proof holds regardless of what any of the functions actually are, provided
that they meet the requirements set out in section
\ref{sec:exp-return-of-a-block}. The requirements are met by any reasonable
real-world scenario\footnote{Negative fees are not reasonable!}, and show an
incentive for mining to centralize even in an ideal situation where all miners
are on a level playing field and have no fixed costs.

However the proof is abstract, and doesn't tell us anything about how strong
that pressure is; it may be insignificant enough to be outweighed by effects
such as social pressure.

We need to investigate $dE'/dQ$ in detail.


\section{Detailed derivation of of $P(Q,L)$}

\subsection{Assumptions}

The difficulty is assumed to be in a steady state condition and the
percentage of hashing power for any given miner is fixed. Unconfirmed
transactions are assumed to be known to all miners, giving everyone an
equal opportunity of mining any given transaction.

We assume that the graph of all Bitcoin miners is fully connected and
that the bandwidth, $1/k$, and latency, $t_0$, is identical for all
connections and unchanging. We assume that miners always attempt to
build upon the first block they see on the longest chain known to them,
and when they find a block, they always broadcast it to all other miners
simultaneously. From that we see that the time taken for a block of size
$L$ to propagate to $100\%$ of the hashing power is simply:

\begin{equation}
    t(L) = t_0 + kL
\end{equation}


\subsection{Analysis}

When miner $Q$ finds a block during the condition of full consensus the
outcomes can be described by the following state tree.  The numbers in brackets
are the "scorecard" of blocks found by $Q$ and all other miners should a given
state be reached:

\begin{description}

    \item[1)] No other block is found prior to full propagation. (1:0)

    \item[2)] $Q$ finds another block prior to full propagation. (2:0)
    \begin{description}
        \item[2.1)] $Q$'s second block is not orphaned. (2:0)
        \item[2.2)] $Q$'s second block is orphaned. (2:3)
    \end{description}

    \item[3)] $(1-Q)$ finds another block prior to full propagation. (1:1)
    \begin{description}
        \item[3.1)] $(1-Q)$'s block is orphaned. (2:1)
        \item[3.2)] $(1-Q)$'s block is not orphaned. (1:2)
    \end{description}
\end{description}

Miner $Q$ wins if states $1$, $2.1$, or $3.1$ are reached. Though it is
possible to derive an equation for $P$ that accurately models possible states -
the author did exactly that in a fit of madness - the resulting equation is
unwieldly and offers no additional insight.

We want to end up with a $dE'/dQ$ that captures second order effects. Since
$L(Q)$ and thus $E'(Q)$ will depend on $Q$ our approximation of $P$ should be
such that $dP/dQ$ is at least linear.

With $\lambda$ as the block interval the probabilities of reaching states $1$,
$2$, and $3$ are as follows:
\begin{align}
    p_1 &= 1 - \frac{t}{\lambda} \\
    p_2 &= \frac{t}{\lambda} Q \\
    p_3 &= \frac{t}{\lambda} (1-Q)
\end{align}

We could assume that states $2$ and $3$ both lead to the block being orphaned,
thus giving us:
\begin{equation}
    P(Q, L) = 1 - \frac{t}{\lambda} = 1 - \frac{t_o + kL}{\lambda}
\end{equation}

However this gives us a linear $E(Q, L)$, linear $L(Q)$, and thus only a
quadratic $E'(Q)$. We need at least one more state in our model; state $2.1$ is
a good choice. Reaching state $2.2$ is exceptionally improbable - the miners
$(1-Q)$ have to find three blocks in time $t$ - so ignoring state $2.2$ and
thus using the probability for state $2$ instead has negligible impact on the
model. Meanwhile state $3$ requires that state $3.1$ be used directly and would
result in a third-order terms in $P$ when treating state $3$ as an always loss
is a conservative lower-bound.

This gives us:
\begin{align}
    P(Q, L) &= p_1 + p_2 = 1 - \frac{t}{\lambda} + \frac{t}{\lambda} Q = 1 - (1-Q)\frac{t}{\lambda} \notag \\
            &= 1 - (1-Q)\frac{t_o + kL}{\lambda}
\end{align}


\subsection{Detailed derivation of E'(Q)}

Some preliminaries:

\begin{align}
    \frac{dP(Q,L)}{dL} &= -(1-Q)\frac{k}{\lambda} \\
    \notag\\
    \frac{dE(Q,L)}{dL} &= \frac{dP(Q,L)}{dL}\big[E_f(L) + B\big] + P(Q,L)\frac{dE_f(L)}{dL} \notag\\
                       &= \frac{dP(Q,L)}{dL}\big[E_f(L) + B\big] + P(Q,L)\,f(L)
\end{align}

We're not going to get very far without a definition for $f$ so we'll use a
simple linear demand model:

\begin{align}
    f(L) &= a - bL \\
    E_f(L) &= aL - \frac{1}{2}bL^2
\end{align}

Now we set $dE/dL=0$ and solve for $L$. To simplify the problem we will consider the no-subsidy, $B=0$ case:

\begin{align}
    0 &= \frac{dP(Q,L)}{dL}E_f(L) + P(Q,L)\,f(L) \\
      &= -(1-Q)\frac{k}{\lambda}\big[aL - \frac{1}{2}bL^2] + \big[1 - (1-Q)\frac{t_o + kL}{\lambda}\big](a - bL) \\
\end{align}


\end{document}

> > Luckily the fork frequency and the average block size are easily
> > measurable. blockchain.info keeps historical graphs of number of
> > orphaned blocks pr day
> 
> Are those stats accurate? Have any pool operators at least confirmed that the
> orphaned blocks that blockchain.info reports match their own records?
> 
> My gut feeling is to relay all orphaned blocks. We know that with a high
> investment and sybil attack as blockchain.info has done you can have better
> awareness of orphaned blocks than someone without those resources. If having
> that awareness is ever a profitable thing we have both created an incentive to
> sybil attack the network and we have linked profitability to high up-front
> capital investments.
> 
> On those grounds alone I will argue that we should relay all orphans to even
> the playing field. If there is a circumstance where we do not want the attacker
> to have that knowledge we have failed anyway, as blockchain.info's sybil attack
> on the network clearly shows.

Agreed.

-- 
'peter'[:-1]@petertodd.org
0000000000000004fe7b45f3bbc4c7edbd9ff86c963fe77282453e1b38f66503
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 685 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131115/38ed190c/attachment.sig>

From gmaxwell at gmail.com  Fri Nov 15 09:59:44 2013
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Fri, 15 Nov 2013 01:59:44 -0800
Subject: [Bitcoin-development] Even simpler minimum fee calculation
 formula: f > bounty*fork_rate/average_blocksize
In-Reply-To: <20131115095413.GA17034@savin>
References: <528367F5.9080303@ceptacle.com>
	<CAPaL=UWZXSwY9dzX30h_ksj2NAdkyLn3Xtfzs7P8Svg5tsE7Xw@mail.gmail.com>
	<20131115095413.GA17034@savin>
Message-ID: <CAAS2fgT_1dYON7UQWVw5i-M0zGp+sXhpPu1S01kYes-cqPAD3w@mail.gmail.com>

On Fri, Nov 15, 2013 at 1:54 AM, Peter Todd <pete at petertodd.org> wrote:
> \documentclass{article}

LaTeX moon language to PDF moon language conversion:

https://people.xiph.org/~greg/peter_todd_mining_ev.pdf



From adam at cypherspace.org  Fri Nov 15 09:59:59 2013
From: adam at cypherspace.org (Adam Back)
Date: Fri, 15 Nov 2013 10:59:59 +0100
Subject: [Bitcoin-development] moving the default display to mbtc
In-Reply-To: <CALMbsiKktwOVfLv2DZMBXVtWVMbtvK2uSUMKriY+PndzYLmzZg@mail.gmail.com>
References: <CAKaEYhK4oXH3hB7uS3=AEkA6r0VB5OYyTua+LOP18rq+rYajHg@mail.gmail.com>
	<52852C2D.9020103@gmail.com> <52853D8A.6010501@monetize.io>
	<CAJHLa0M6CkoDbD6FFixf9-mmhug7DvehSWCJ+EHWVxUDuwNiBg@mail.gmail.com>
	<52854F59.9000500@monetize.io> <5285545C.4030607@gmail.com>
	<20131115092338.GN5661@leitl.org>
	<CALMbsiKktwOVfLv2DZMBXVtWVMbtvK2uSUMKriY+PndzYLmzZg@mail.gmail.com>
Message-ID: <20131115095959.GA2073@netbook.cypherspace.org>

While we're discussing the emotive (though actually of real relevance for
bitcoin user comprehension and sentiment) I couldnt resisnt to add some
trivia reference it is amusing that a currency rarely in history had to
deflate (remove 0s) rather than inflate (add 0s).  Viz this hyperinflated
fifty trillion zimbabwe dollar note I carry in my wallet for bitcoin
contrast/amusement purposes:

http://www.ebay.com/itm/50-TRILLION-ZIMBABWE-DOLLARS-CURRENCY-MONEY-US-SELLER-/110671104681

I like Alan's suggestion to show both to avoid denomination confusion.  That
is the one danger, and high risk given irrevocability.

Adam



From pete at petertodd.org  Fri Nov 15 10:32:46 2013
From: pete at petertodd.org (Peter Todd)
Date: Fri, 15 Nov 2013 05:32:46 -0500
Subject: [Bitcoin-development] Even simpler minimum fee calculation
 formula: f > bounty*fork_rate/average_blocksize
In-Reply-To: <528367F5.9080303@ceptacle.com>
References: <528367F5.9080303@ceptacle.com>
Message-ID: <20131115103246.GB17034@savin>

On Wed, Nov 13, 2013 at 12:52:21PM +0100, Michael Gronager wrote:
> Last week I posted a writeup: "On the optimal block size and why
> transaction fees are 8 times too low (or transactions 8 times too big)".
> 
> Peter Todd made some nice additions to it including different pool sizes
> into the numbers.
> 
> However, it occurred to me that things can in fact be calculated even
> simpler: The measured fork rate will mean out all the different pool
> sizes and network latencies and will as such provide a simple number we
> can use to estimate the minimum fee. Key assumption is that the latency
> will depend on block size (# txns) and the fork rate will depend on latency.
> 
> Using the formulas from last week:
> 
> P_fork = t_propagate/t_blocks
> 
> and:
> 
> t_propagate = t_0 + alpha*S ~= alpha*S

Assuming t_0 is negligible is wrong in this case. Or, it should be...

> We get a measure for alpha as a function of the average fork rate and
> average block size:
> 
> alpha = P_fork*t_block/S

So alpha has units of seconds/byte, which lets us indirectly figure out
the bandwidth the blocks are propagating at assuming t_0=0 and all links
are equal. When you realize that P_fork is basically a multiplier on the
bandwidth required to get a block out fast enough, the derivation makes
sense. In any case we get:

alpha = (1/113)*600s/134kBytes = 39.62uS/byte = 24kB/second

Which is atrocious... but when you remember that Bitcoin nodes send
blocks to all peers simultaneously,(1) thus dividing up the bandwidth and
ruining latency you see why. t_0 shouldn't be at all negligible due to
speed of light, but with this low bandwidth it is anyway.

1) To be precise, nodes answer queries for blocks from all peers
simultaneously.

This also indicates that pools haven't taken the simple step of peering
with each other using high-bandwidth nodes with restricted numbers of
peers, which shows you how little attention they are paying to
optimizing profits.  Right now mining pulls in $1.8 million/day, so
that's up to $16k wasted.

However, because miners don't orphan themselves, that $16k loss is born
disproportionately by smaller miners... which also means the 24kB/sec
bandwidth estimate is wrong, and the real number is even worse. In
theory anyway, could just as easily be the case that larger pools have
screwed up relaying still such that p2pool's forwarding wins.

-- 
'peter'[:-1]@petertodd.org
000000000000000658459cd64e63243e719106014257870d073207c2d5460137
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 685 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131115/461df067/attachment.sig>

From eugen at leitl.org  Fri Nov 15 10:39:17 2013
From: eugen at leitl.org (Eugen Leitl)
Date: Fri, 15 Nov 2013 11:39:17 +0100
Subject: [Bitcoin-development] moving the default display to mbtc
In-Reply-To: <CALMbsiKktwOVfLv2DZMBXVtWVMbtvK2uSUMKriY+PndzYLmzZg@mail.gmail.com>
References: <CAKaEYhK4oXH3hB7uS3=AEkA6r0VB5OYyTua+LOP18rq+rYajHg@mail.gmail.com>
	<52852C2D.9020103@gmail.com> <52853D8A.6010501@monetize.io>
	<CAJHLa0M6CkoDbD6FFixf9-mmhug7DvehSWCJ+EHWVxUDuwNiBg@mail.gmail.com>
	<52854F59.9000500@monetize.io> <5285545C.4030607@gmail.com>
	<20131115092338.GN5661@leitl.org>
	<CALMbsiKktwOVfLv2DZMBXVtWVMbtvK2uSUMKriY+PndzYLmzZg@mail.gmail.com>
Message-ID: <20131115103917.GP5661@leitl.org>

On Fri, Nov 15, 2013 at 01:37:56AM -0800, Alex Kravets wrote:
> Hi guys,

Alex, you're top-posting and not trimming your replies.
 
> I've seen many many non-geeks be utterly intimidated and confused by
> 0.000XXXXX quantities and/or mBTC & uBTC notation

Yes, people really can't tell any difference between
mm, cm, m, dm and km. Not.
 
> 
> Yes, $10 being rougnly 10,000 Won in South Korean is a great example where
> large amounts of units work very well in a major economy.

You're trying to invent a new symbol for the same unit, instead
of using an established, generic system of prefixes.
That's pretty insane.
 
> 
> FWIW,  I would prefer the entire switch-over be done *once* *and *at the
> same time switching both BTC to XBT and using the following

I would prefer that nobody does any such silly thing. 
 
> 
> Currency Code *: *XBT
> Unit Definition  *: *1 Bit = 100 Satoshis
> 
> Addition benefit is splitting the term Bitcoin/bitcoin (as in Network and
> currency unit) into Bitcoin (network) and Bit (the unit).

Bitcoin is not measured in bits. Bits are units of information, and
are measured in bits, kbits, Mbits, Gbits, Tbits, Pbits etc.
http://en.wikipedia.org/wiki/Bit_rate
 
> 
> Perhaps this project/process should have a name and be listed on a road map
> somewhere

What would a sane person think if he saw that on the roadmap, you think?
 
> *BRCS: *Bitcoin Re-denomination and [Currency] Code Standardization project

Ever heard of SI unit prefixes?

http://en.wikipedia.org/wiki/Metric_prefix
 
> 
> Cheers ...
> 
> 
> 
> 
> 
> On Fri, Nov 15, 2013 at 1:23 AM, Eugen Leitl <eugen at leitl.org> wrote:
> 
> > On Thu, Nov 14, 2013 at 05:53:16PM -0500, Alan Reiner wrote:
> > > I really like the XBT idea.  It makes a lot of sense to match the ISO
> >
> > I really don't. Just use the SI prefixes.
> >
> > > currency symbol (though the ISO guys will have to adjust the way they've
> > > defined the "XBT").  And I do agree that going right to uBTC and
> > > skipping mBTC makes sense, too.
> >
> > The display units should be choosable by the user.
> >
> > > I'd prefer them not be called "micro bitcoins."  I really want to call
> > > them "microbes" ... but I'm not sure that has the right flavor for money
> >
> > Why on earth?
> >
> > > transfer :)  "Please give me 872 microbes".  Perhaps we just call them
> > > "bits."  Or even "micros" or "microbits".  As I write this, I realize
> > > there's probably 872 threads on the forums about this already...
> > >
> > > But we would want to promote a consistent term, to avoid further
> > > confusion when people use different names for the new unit.  It's not
> > > guaranteed to be successful, but if we pick a good name, and build it
> > > into the interface on the first release pushing the new unit, we have a
> > > chance to make the transition even easier.
> >
> > The reason SI prefixes were invented is exactly to preven that case.
> >
> >
> > ------------------------------------------------------------------------------
> > DreamFactory - Open Source REST & JSON Services for HTML5 & Native Apps
> > OAuth, Users, Roles, SQL, NoSQL, BLOB Storage and External API Access
> > Free app hosting. Or install the open source package on any LAMP server.
> > Sign up and see examples for AngularJS, jQuery, Sencha Touch and Native!
> > http://pubads.g.doubleclick.net/gampad/clk?id=63469471&iu=/4140/ostg.clktrk
> > _______________________________________________
> > Bitcoin-development mailing list
> > Bitcoin-development at lists.sourceforge.net
> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> >
> 
> 
> 
> -- 
> Alex Kravets <http://www.linkedin.com/in/akravets>       def redPill = '
> Scala <http://www.scala-lang.org/>
> [[ brutal honesty <http://goo.gl/vwydt> is the best policy ]]

> ------------------------------------------------------------------------------
> DreamFactory - Open Source REST & JSON Services for HTML5 & Native Apps
> OAuth, Users, Roles, SQL, NoSQL, BLOB Storage and External API Access
> Free app hosting. Or install the open source package on any LAMP server.
> Sign up and see examples for AngularJS, jQuery, Sencha Touch and Native!
> http://pubads.g.doubleclick.net/gampad/clk?id=63469471&iu=/4140/ostg.clktrk

> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development




From laanwj at gmail.com  Fri Nov 15 10:45:41 2013
From: laanwj at gmail.com (Wladimir)
Date: Fri, 15 Nov 2013 11:45:41 +0100
Subject: [Bitcoin-development] moving the default display to mbtc
In-Reply-To: <52852C2D.9020103@gmail.com>
References: <CAKaEYhK4oXH3hB7uS3=AEkA6r0VB5OYyTua+LOP18rq+rYajHg@mail.gmail.com>
	<52852C2D.9020103@gmail.com>
Message-ID: <CA+s+GJCJvKagcRQ5L8agDn0370mS4jfayhTu7LE_tshM_sBkZQ@mail.gmail.com>

Alan,

 I highly recommend that if we make any move towards this, that the
> software show verification in both/all units.
>
> For instance, there should be 3 input fields, one for "BTC", one for
> "mBTC" one for "uBTC".  As the user enters a value in one of the fields, it
> would automatically update the other fields with the converted value as
> they type.  This makes it really difficult to get it wrong... if you're
> typing "10" into the BTC field, thinking it's mBTC, you'll see 10,000 mBTC
> showing up in the other box as you type.  Similarly, it should display all
> units on all verification windows.  Users may also use it for sanity
> checking conversion between units.
>

Good point - For me its too much clutter to show multiple boxes everywhere
(we already support unit conversion by changing the dropdown box in the
amount widget), but I'm going to make the verification dialog show the
totals in all three units. This will make people learn about other units
without having to choose them consciously.

Wladimir
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131115/01c469b0/attachment.html>

From pete at petertodd.org  Fri Nov 15 10:46:54 2013
From: pete at petertodd.org (Peter Todd)
Date: Fri, 15 Nov 2013 05:46:54 -0500
Subject: [Bitcoin-development] Even simpler minimum fee calculation
 formula: f > bounty*fork_rate/average_blocksize
In-Reply-To: <528371BF.9030100@ceptacle.com>
References: <528367F5.9080303@ceptacle.com>
 <528371BF.9030100@ceptacle.com>
Message-ID: <20131115104654.GC17034@savin>

On Wed, Nov 13, 2013 at 01:34:07PM +0100, Michael Gronager wrote:
> Just a quick comment on the actual fees (checked at blockchain.info) the
> average fee over the last 90 days is actually ~0.0003BTC/txn - so not
> too far behind the theoretical minimum of 0.00037BTC/txn.

How did you get those numbers exactly?

Also fee per txn is *not* useful and we really shouldn't quote it so
that newbies reading this stuff get the right understanding.

-- 
'peter'[:-1]@petertodd.org
00000000000000075ed91531e07d2045b5823da050fe373bde7bb363965e44ae
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 685 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131115/68ff333f/attachment.sig>

From gronager at ceptacle.com  Fri Nov 15 10:47:53 2013
From: gronager at ceptacle.com (Michael Gronager)
Date: Fri, 15 Nov 2013 11:47:53 +0100
Subject: [Bitcoin-development] Even simpler minimum fee calculation
 formula: f > bounty*fork_rate/average_blocksize
In-Reply-To: <20131115095413.GA17034@savin>
References: <528367F5.9080303@ceptacle.com>
	<CAPaL=UWZXSwY9dzX30h_ksj2NAdkyLn3Xtfzs7P8Svg5tsE7Xw@mail.gmail.com>
	<20131115095413.GA17034@savin>
Message-ID: <5285FBD9.2070106@ceptacle.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Hi Peter,

Love to see things put into formulas - nice work!

Fully agree on the your fist section: As latency determines maximum
block earnings, define a 0-latency (big-miner never orphans his own
blocks) island and growing that will of course result in increased earnings.

So build your own huge mining data center and you rock.

However, that is hardly the real work scenario today. Instead we have
pools (Huge pools). It would be interesting to do the calculation:

	Q = Total pool size (fraction of all mining power)
	q = My mining power (do.)
	e = fraction of block fee that pool reserves

It is pretty obvious that given your formulas small miners are better
off in a pool (can't survive as solo miners), but there will be a
threshold q_min above which you are actually better off on you own -
depending also on e. (excluding here all benefits of a stable revenue
stream provided by pools)

Next interesting calculation would be bitcoin rate as a function of pool
size, I expect a sharp dip somewhere in the 40%s of hardware controlled
by one entity ;)

Finally, as you mention yourselves, qualification of the various
functions is needed. This could e.g. suggest if we are like to get 3 or
10 miners on the long run.

And now for section 2. You insert a definition of f(L) = a-bL. I think
the whole idea of letting f depend on L is superfluous. As a miner you
are always free to choose which transactions to include. You will always
choose those with the biggest fee, so really it is only the average fee
that is relevant: f(L) = c. Any dependence in L will be removed by the
reshuffeling. To include an extra transaction will require either that
it has a fee larger than another (kicking that out out) or that it has a
fee so large that it covers for the other transaction too. Also recall
that there is a logical minimum fee (as I have already shown), and a
maximum optimal block size - that is until the bounty becomes 0 (which
is where other effects kick in).

> Here's what I've got to date. The first two sections is just a
> relatively simple proof that mining is more profitable as centralization
> increases under any circumstance, even before any real-world factors are
> taken into account. (other than non-zero latency and bandwidth) Nice
> homework problem, and neat that you can easily get a solid proof, but
> academic because it doesn't say anything about the magnitude of the
> incentives.
> 
> The latter part is the actual derivation with proper model of
> supply-and-demand for fees. Or will be: while you can of course solve
> the equations with mathematica or similar - getting a horrid mess - I'm
> still trying to see if I can simplify them sanely in a way that's
> step-by-step understandable. Taking me longer than I'd like; sobering to
> realize how rusty I am. That said if any you do just throw it at
> Mathematica, looks like you get a result where the slope of your
> expected block return is at least quadratic with increasing hashing
> power. (though I spent all of five minutes eyeballing that result)
> 
> 
> \documentclass{article}
> \usepackage{url}
> \usepackage{mathtools}
> \begin{document}
> \title{Expected Return}
> \author{Peter Todd}
> \date{FIXME}
> \maketitle
> 
> \section{Expected return of a block}
> \label{sec:exp-return-of-a-block}
> 
> Let $f(L)$, a continuous function,\footnote{Transactions do of course give a
> discontinuous $f$. For a large $L$ the approximation error is negligible.} be
> the fee-per-byte available to a rational miner for the last transaction
> included in a block of size $L$. $f(L)$ is a continuous function defined for $L
> \ge 0$. Supply and demand dictates that:
> 
> \begin{equation}
>     f(L) \ge f(L+\epsilon) \label{eq:f-increases}
> \end{equation}
> 
> A reasonable example for $f$ might be $f(L) = kL$, representing the demand side
> of a linear supply and demand plot. For a block of size $L$ that is optimally
> filled with transactions the value of those fees is just the integral:
> 
> \begin{equation}
>     E_f(L) = \int_0^L f(l)\,dl
> \end{equation}
> 
> Let $P(Q,L)$, a continuous function, be the probability that a block of size
> $L$ produced by a miner with relative hashing power $Q$ will be orphaned.
> Because a miner will never orphan their own blocks the following holds true:
> 
> \begin{equation}
>     P(Q,L) \le P(Q + \epsilon,L) \label{eq:p-increases}
> \end{equation}
> 
> Similarly because larger blocks take longer to propagate and thus risk getting
> orphaned by another miner finding a block at the same time:
> 
> \begin{equation}
>     P(Q,L) \ge P(Q,L + \epsilon)
> \end{equation}
> 
> By combining $P(Q, L)$, $E_f(L)$ and the inflation subsidy $B$, gives us the
> expected return of a block for a given size and hashing power:\footnote{Note
> how real world marginal costs can be accommodated easily in the definitions of
> $f$ and $B$.}
> 
> \begin{equation}
>     E(Q,L) = P(Q,L)[E_f(L) + B]
> \end{equation}
> 
> The optimal size is simply the size $L$ at which $E(Q, L)$ no longer increases:
> 
> \begin{equation}
>     \frac{d}{dL}\big[E(Q, L(Q))\big] = 0
> \end{equation}
> 
> We will define the function $L(Q)$ as the optimal value for a given $Q$. A
> miner creating optimal blocks will thus have an expected return per block found
> of $E'(Q)=E(Q,L(Q))$. Note how this definition is per unit hashing power by
> virtue of being per block found.
> 
> 
> \section{Optimal return $E'$ vs. hashing power $Q$}
> 
> We want to know if a large miner has a larger return for a given amount of
> hashing power. We do this by taking the derivative with respect to $Q$ of the
> expected return given optimal strategy:
> 
> \begin{align*}
>     \frac{d}{dQ}\big[E'(Q)\big] &= \frac{d}{dQ}\big[P(Q,L(Q))\big]\big[E_f(L(Q)) + B\big] + P(Q,L(Q))\frac{d}{dQ}\big[E_f(L(Q))\big] \\
>                                 &= \frac{dL(Q)}{dQ}\Big[\frac{dP(Q,L(Q))}{dQ}\big[E_f(L(Q)) + B\big] + P(Q,L)\frac{dE_f(L(Q))}{dQ}\Big]
> \end{align*}
> 
> We know that $L(Q)$, $E_f$, $P$, and $B$ are all $\ge 0$. Thus for $dE'/dQ$ to
> be negative requires either $dL/dQ$ to be negative, or for $dL/dQ$ to be
> positive and one of $dP/dQ$ or $dE_f/dQ$ negative.
> 
> Suppose $dP/dQ$ negative and $dL/dQ$ positive:
> 
> \begin{align}
>     \frac{dL(Q)}{dQ} > 0    &\implies L(Q + \epsilon) > L(Q) \notag \\
>     \frac{dP(L(Q))}{dQ} < 0 &\implies P(Q + \epsilon, L(Q + \epsilon)) < P(Q, L(Q)) \label{eq:dl-pos-dp-neg}
> \end{align}
> 
> But that contradicts our definition \eqref{eq:p-increases} of $P$ as continuous
> and increasing. Suppose instead that $dE_f/dQ$ is negative and $dL/dQ$
> positive:
> 
> \begin{align}
>     \frac{dL(Q)}{dQ} > 0      &\implies L(Q) < L(Q + \epsilon) \notag \\
>     \frac{dE_f(L(Q))}{dL} < 0 &\implies E_f(L(Q)) > E_f(L(Q + \epsilon)) \notag \\
>                               &\implies \int_0^{L(Q)} f(l)\,dl > \int_0^{L(Q+\epsilon)} f(l)\,dl \notag \\
>                               &\implies f(l) < 0 \label{eq:dl-pos-de-neg}
> \end{align}
> 
> Again we have a contradiction with our definition \eqref{eq:f-increases} of
> $f$. Finally suppose $dL/dQ$ is negative:
> 
> \begin{align}
>     \frac{dL(Q)}{dQ} < 0 &\implies L(Q) > L(Q + \epsilon) \notag \\
>                          &\implies P(Q + \epsilon, L(Q + \epsilon)) < P(Q, L(Q)) \notag \\
>                          &\implies \frac{dP(Q, L(Q))}{dQ} < 0 \notag \\
>                          &\implies \frac{dL(Q)}{dQ}\frac{dP(Q, L(Q))}{dQ} > 0 \label{eq:dl-neg-dp-neg} \\
>                          &\implies E_f(L(Q + \epsilon)) < E_f(L(Q)) \implies \frac{dE_f(L(Q))}{dQ} < 0 \notag \\
>                          &\implies \frac{dL(Q)}{dQ}\frac{dE_f(L(Q))}{dQ} > 0 \label{eq:dl-neg-de-neg}
> \end{align}
> 
> Even if $dL/dQ$ is negative \eqref{eq:dl-neg-dp-neg} and
> \eqref{eq:dl-neg-de-neg} show that $dE'/dQ > 0$. In conjunction with
> \eqref{eq:dl-pos-dp-neg} and \eqref{eq:dl-pos-de-neg} we prove that increased
> hashing power always leads to increased return on investment per unit hashing
> power.
> 
> 
> \subsection{Real-world implications to centralization}
> 
> While the author has shown that they still remember first-year, is this result
> relevant?
> 
> The proof holds regardless of what any of the functions actually are, provided
> that they meet the requirements set out in section
> \ref{sec:exp-return-of-a-block}. The requirements are met by any reasonable
> real-world scenario\footnote{Negative fees are not reasonable!}, and show an
> incentive for mining to centralize even in an ideal situation where all miners
> are on a level playing field and have no fixed costs.
> 
> However the proof is abstract, and doesn't tell us anything about how strong
> that pressure is; it may be insignificant enough to be outweighed by effects
> such as social pressure.
> 
> We need to investigate $dE'/dQ$ in detail.
> 
> 
> \section{Detailed derivation of of $P(Q,L)$}
> 
> \subsection{Assumptions}
> 
> The difficulty is assumed to be in a steady state condition and the
> percentage of hashing power for any given miner is fixed. Unconfirmed
> transactions are assumed to be known to all miners, giving everyone an
> equal opportunity of mining any given transaction.
> 
> We assume that the graph of all Bitcoin miners is fully connected and
> that the bandwidth, $1/k$, and latency, $t_0$, is identical for all
> connections and unchanging. We assume that miners always attempt to
> build upon the first block they see on the longest chain known to them,
> and when they find a block, they always broadcast it to all other miners
> simultaneously. From that we see that the time taken for a block of size
> $L$ to propagate to $100\%$ of the hashing power is simply:
> 
> \begin{equation}
>     t(L) = t_0 + kL
> \end{equation}
> 
> 
> \subsection{Analysis}
> 
> When miner $Q$ finds a block during the condition of full consensus the
> outcomes can be described by the following state tree.  The numbers in brackets
> are the "scorecard" of blocks found by $Q$ and all other miners should a given
> state be reached:
> 
> \begin{description}
> 
>     \item[1)] No other block is found prior to full propagation. (1:0)
> 
>     \item[2)] $Q$ finds another block prior to full propagation. (2:0)
>     \begin{description}
>         \item[2.1)] $Q$'s second block is not orphaned. (2:0)
>         \item[2.2)] $Q$'s second block is orphaned. (2:3)
>     \end{description}
> 
>     \item[3)] $(1-Q)$ finds another block prior to full propagation. (1:1)
>     \begin{description}
>         \item[3.1)] $(1-Q)$'s block is orphaned. (2:1)
>         \item[3.2)] $(1-Q)$'s block is not orphaned. (1:2)
>     \end{description}
> \end{description}
> 
> Miner $Q$ wins if states $1$, $2.1$, or $3.1$ are reached. Though it is
> possible to derive an equation for $P$ that accurately models possible states -
> the author did exactly that in a fit of madness - the resulting equation is
> unwieldly and offers no additional insight.
> 
> We want to end up with a $dE'/dQ$ that captures second order effects. Since
> $L(Q)$ and thus $E'(Q)$ will depend on $Q$ our approximation of $P$ should be
> such that $dP/dQ$ is at least linear.
> 
> With $\lambda$ as the block interval the probabilities of reaching states $1$,
> $2$, and $3$ are as follows:
> \begin{align}
>     p_1 &= 1 - \frac{t}{\lambda} \\
>     p_2 &= \frac{t}{\lambda} Q \\
>     p_3 &= \frac{t}{\lambda} (1-Q)
> \end{align}
> 
> We could assume that states $2$ and $3$ both lead to the block being orphaned,
> thus giving us:
> \begin{equation}
>     P(Q, L) = 1 - \frac{t}{\lambda} = 1 - \frac{t_o + kL}{\lambda}
> \end{equation}
> 
> However this gives us a linear $E(Q, L)$, linear $L(Q)$, and thus only a
> quadratic $E'(Q)$. We need at least one more state in our model; state $2.1$ is
> a good choice. Reaching state $2.2$ is exceptionally improbable - the miners
> $(1-Q)$ have to find three blocks in time $t$ - so ignoring state $2.2$ and
> thus using the probability for state $2$ instead has negligible impact on the
> model. Meanwhile state $3$ requires that state $3.1$ be used directly and would
> result in a third-order terms in $P$ when treating state $3$ as an always loss
> is a conservative lower-bound.
> 
> This gives us:
> \begin{align}
>     P(Q, L) &= p_1 + p_2 = 1 - \frac{t}{\lambda} + \frac{t}{\lambda} Q = 1 - (1-Q)\frac{t}{\lambda} \notag \\
>             &= 1 - (1-Q)\frac{t_o + kL}{\lambda}
> \end{align}
> 
> 
> \subsection{Detailed derivation of E'(Q)}
> 
> Some preliminaries:
> 
> \begin{align}
>     \frac{dP(Q,L)}{dL} &= -(1-Q)\frac{k}{\lambda} \\
>     \notag\\
>     \frac{dE(Q,L)}{dL} &= \frac{dP(Q,L)}{dL}\big[E_f(L) + B\big] + P(Q,L)\frac{dE_f(L)}{dL} \notag\\
>                        &= \frac{dP(Q,L)}{dL}\big[E_f(L) + B\big] + P(Q,L)\,f(L)
> \end{align}
> 
> We're not going to get very far without a definition for $f$ so we'll use a
> simple linear demand model:
> 
> \begin{align}
>     f(L) &= a - bL \\
>     E_f(L) &= aL - \frac{1}{2}bL^2
> \end{align}
> 
> Now we set $dE/dL=0$ and solve for $L$. To simplify the problem we will consider the no-subsidy, $B=0$ case:
> 
> \begin{align}
>     0 &= \frac{dP(Q,L)}{dL}E_f(L) + P(Q,L)\,f(L) \\
>       &= -(1-Q)\frac{k}{\lambda}\big[aL - \frac{1}{2}bL^2] + \big[1 - (1-Q)\frac{t_o + kL}{\lambda}\big](a - bL) \\
> \end{align}
> 
> 
> \end{document}
> 
>>> Luckily the fork frequency and the average block size are easily
>>> measurable. blockchain.info keeps historical graphs of number of
>>> orphaned blocks pr day
>>
>> Are those stats accurate? Have any pool operators at least confirmed that the
>> orphaned blocks that blockchain.info reports match their own records?
>>
>> My gut feeling is to relay all orphaned blocks. We know that with a high
>> investment and sybil attack as blockchain.info has done you can have better
>> awareness of orphaned blocks than someone without those resources. If having
>> that awareness is ever a profitable thing we have both created an incentive to
>> sybil attack the network and we have linked profitability to high up-front
>> capital investments.
>>
>> On those grounds alone I will argue that we should relay all orphans to even
>> the playing field. If there is a circumstance where we do not want the attacker
>> to have that knowledge we have failed anyway, as blockchain.info's sybil attack
>> on the network clearly shows.
> 
> Agreed.
> 

-----BEGIN PGP SIGNATURE-----
Version: GnuPG/MacGPG2 v2.0.22 (Darwin)
Comment: GPGTools - http://gpgtools.org
Comment: Using GnuPG with Thunderbird - http://www.enigmail.net/

iQEcBAEBAgAGBQJShfvZAAoJEKpww0VFxdGRDVoIALEgjxC8PQvj4hyp8CmTM8wP
4ASL72gs/V6cRZuVPXjKJrrWxs2GjvxASQWaZa+9Oe5pXTg1Qa9yo5/3vBnB4kmK
SgeJNo+C1rQjd3KuunAV0vG4pkIYnMa9GyBYnWf8mNuP1oysy8NSDOVt2jhtO5A3
gKra0YFJYIEyOgewfefDrxokP0iSfQnJO7mPYfkoaLQm0ugoAi1IR8EiAuZX3oT9
v80o9yhKqilz0wxhvsFAFf8txfpJw7LWTne5L/gQkHIV3v3dY7fLoWTfil/mqsAq
6+d6xf+9s1tOXD18C/QTvhZIAyE3yiW7ZxbOyAYbQmbjORRZBdgWzaxCQbTHQNM=
=k1i2
-----END PGP SIGNATURE-----



From pete at petertodd.org  Fri Nov 15 10:52:40 2013
From: pete at petertodd.org (Peter Todd)
Date: Fri, 15 Nov 2013 05:52:40 -0500
Subject: [Bitcoin-development] On the optimal block size and why
 transaction fees are 8 times too low (or transactions 8 times too big)
In-Reply-To: <527C0D12.8030905@ceptacle.com>
References: <527B9F9B.4060808@ceptacle.com>
	<20131107203123.GB3805@petertodd.org>
	<527C0D12.8030905@ceptacle.com>
Message-ID: <20131115105240.GD17034@savin>

On Thu, Nov 07, 2013 at 10:58:42PM +0100, Michael Gronager wrote:
> > Q=0    -> f = 0.0033 BTC/kB Q=0.1  -> f = 0.0027 BTC/kB Q=0.25 -> f
> > = 0.0018 BTC/kB Q=0.40 -> f = 0.0012 BTC/kB
> 
> You second list of numbers is an unlikely extreme:
> 
> > k = 1mS/kB
> 
> The propagation latency in the network is more due to the block
> verification than due to its network (fiber) propagation time,
> bringing down the number of hops helps tremendously, so I agree that
> we can probably bring down k by a factor of ~10 (k=8-12) if we
> consider only pools directly connected. This should bring us close to
> break even with the current fee size, but we should really get some
> empirical data for interconnected large pools.

Well if large pools wanted it would be trivial for all of them to just
connect to each other... but my 25kB/s average data rate sure indicates
that they either aren't bothering, or aren't bothering to do that
correctly.

> However - important
> note - if you are a 1% miner - don't include transactions!

Which is an awful solution, although probably a correct one.... After
all, if you don't include transactions, you can start mining blocks
earlier too based on just the header.

> > Q=0    -> f = 0.000042 BTC/kB Q=0.1  -> f = 0.000034 BTC/kB Q=0.25
> > -> f = 0.000023 BTC/kB Q=0.40 -> f = 0.000015 BTC/kB
> > 
> 
> > 
> > This problem is inherent to the fundemental design of Bitcoin: 
> > regardless of what the blocksize is, or how fast the network is,
> > the current Bitcoin consensus protocol rewards larger mining pools
> > with lower costs per KB to include transactions.
> 
> I don't see a problem of rewarding economy of scale, as long as the
> effect is not too grave (raising the min fee would actually make it
> more profitable for smaller miners).

That's a fundemental misunderstanding; there's no such thing as a min
fee.

As for economies of scale, the "product" we're paying miners for is
decentralization and resistance to 51% attack. If instead only get 51%
attack resistance, we're getting a bum deal. If that's all we're
getting, we don't actually have 51% resistance...

-- 
'peter'[:-1]@petertodd.org
00000000000000075ed91531e07d2045b5823da050fe373bde7bb363965e44ae
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 685 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131115/06316107/attachment.sig>

From eugen at leitl.org  Fri Nov 15 10:57:32 2013
From: eugen at leitl.org (Eugen Leitl)
Date: Fri, 15 Nov 2013 11:57:32 +0100
Subject: [Bitcoin-development] moving the default display to mbtc
In-Reply-To: <CA+s+GJCJvKagcRQ5L8agDn0370mS4jfayhTu7LE_tshM_sBkZQ@mail.gmail.com>
References: <CAKaEYhK4oXH3hB7uS3=AEkA6r0VB5OYyTua+LOP18rq+rYajHg@mail.gmail.com>
	<52852C2D.9020103@gmail.com>
	<CA+s+GJCJvKagcRQ5L8agDn0370mS4jfayhTu7LE_tshM_sBkZQ@mail.gmail.com>
Message-ID: <20131115105731.GR5661@leitl.org>

On Fri, Nov 15, 2013 at 11:45:41AM +0100, Wladimir wrote:

> Good point - For me its too much clutter to show multiple boxes everywhere
> (we already support unit conversion by changing the dropdown box in the
> amount widget), but I'm going to make the verification dialog show the
> totals in all three units. This will make people learn about other units
> without having to choose them consciously.

That sounds like a good idea.



From pete at petertodd.org  Fri Nov 15 10:58:37 2013
From: pete at petertodd.org (Peter Todd)
Date: Fri, 15 Nov 2013 05:58:37 -0500
Subject: [Bitcoin-development] we can all relax now
In-Reply-To: <CADjHg8GNuoPQ7Ama0A=iGmboeE_T5LrLRHPKyvQqWwKAjT3K3w@mail.gmail.com>
References: <5279D49D.5050807@jerviss.org>
	<CAJHLa0N1-8LfFuWq=vS0r-t2Bt-qZ6yKuGjrnicUOj+K6Gpx5A@mail.gmail.com>
	<CANOOu=-MsPPgACKcHvsvtFAOAiULL+BOQvJz1tC3L=nT8wN01Q@mail.gmail.com>
	<20131107034404.GA5140@savin>
	<CABsx9T35Po7pUb2sr15zD5WODYqR4-xNvJD0Jz5+Of3d-NjPdg@mail.gmail.com>
	<20131107132442.GB22476@savin>
	<CANEZrP3T4qsz8qqPxqtP5oXNYA_WT5OQPrC2uAKuQyDqJ0N9Rw@mail.gmail.com>
	<CADjHg8GNuoPQ7Ama0A=iGmboeE_T5LrLRHPKyvQqWwKAjT3K3w@mail.gmail.com>
Message-ID: <20131115105837.GE17034@savin>

On Thu, Nov 07, 2013 at 11:28:52AM -0700, Daniel Lidstrom wrote:
> Hey Peter, something seems wrong with your above analysis: I think a miner
> would withhold his block not because it leads to a greater probability of
> winning the next one, but because it increases his expected revenue.
> 
> Suppose a cabal with fraction q of the total hashing power is n blocks
> ahead on a secret branch of that has mined r_tot coins, and let r_next be
> its next block's reward.  If the cabal chooses not to broadcast its secret
> chain until at least the next block, its expected revenue after the next
> block is found is
> 
> (1 - (1-q)^(n+1))*(r_tot + r_next)
> 
> If it does broadcast, its expected revenue after the next block is found is
> 
> r_tot + q * r_next
> 
> If the cabal seeks only to maximize immediate revenue, then after a bit of
> algebra we find that it will withhold its chain if
> 
> q > 1 - ( 1 + r_tot / r_next )^(-1/n)
> 
> So if the cabal has just mined his first block off of the public chain,
> i.e. n = 1, and if the block reward is relatively stable, i.e. r_next =
> r_tot, then it needs q > 50% to profitably withhold, not the 29.2% you
> calculated.
> 
> From this formula we can also see that if the miner wins the race and
> withholds again, then he must grow q to compensate for the increase in
> r_tot, and any decrease in n.  So generally publication becomes
> increasingly in the cabal's interest, and secret chains will tend not to
> grow too large (intuition tells me that simulations using the above formula
> should bear this out).
> 
> This seem correct to you?

Remember how I started off by asking what was the correct strategy if a
miner wanted to get more blocks than their *competition*, not more
blocks in total. In some scenarios that strategy is the one that
maximizes returns, such as the case when you make your returns from
transaction fees, especially without a blocksize limit restricting how
many fee paying transactions you can stuff in your blocks. It's not
correct to say the cabal is trying to maximize immediate revenue.

As for the length of those secret chains, at every step you of course
want to weigh the value of the blocks you have found against the risk
that someone else catches up, and when it makes sense, publish some or
all.

-- 
'peter'[:-1]@petertodd.org
0000000000000000b4ff49cd2cad865d6cbca99828987a02f3d5f41067eab00a
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 685 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131115/bbf731b9/attachment.sig>

From pete at petertodd.org  Fri Nov 15 11:12:04 2013
From: pete at petertodd.org (Peter Todd)
Date: Fri, 15 Nov 2013 06:12:04 -0500
Subject: [Bitcoin-development] Even simpler minimum fee calculation
 formula: f > bounty*fork_rate/average_blocksize
In-Reply-To: <5285FBD9.2070106@ceptacle.com>
References: <528367F5.9080303@ceptacle.com>
	<CAPaL=UWZXSwY9dzX30h_ksj2NAdkyLn3Xtfzs7P8Svg5tsE7Xw@mail.gmail.com>
	<20131115095413.GA17034@savin> <5285FBD9.2070106@ceptacle.com>
Message-ID: <20131115111204.GF17034@savin>

On Fri, Nov 15, 2013 at 11:47:53AM +0100, Michael Gronager wrote:
> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA1
> 
> Hi Peter,
> 
> Love to see things put into formulas - nice work!
> 
> Fully agree on the your fist section: As latency determines maximum
> block earnings, define a 0-latency (big-miner never orphans his own
> blocks) island and growing that will of course result in increased earnings.
> 
> So build your own huge mining data center and you rock.
> 
> However, that is hardly the real work scenario today. Instead we have
> pools (Huge pools). It would be interesting to do the calculation:
> 
> 	Q = Total pool size (fraction of all mining power)
> 	q = My mining power (do.)
> 	e = fraction of block fee that pool reserves
> 
> It is pretty obvious that given your formulas small miners are better
> off in a pool (can't survive as solo miners), but there will be a
> threshold q_min above which you are actually better off on you own -
> depending also on e. (excluding here all benefits of a stable revenue
> stream provided by pools)

Unfortunately the math doesn't work that way. For any Q, a bigger Q
gives you a higher return. Remember that the way I setup those equations
in section 3.2 is such that I'm actually modeling two pools, one with Q
hashing power and one with (1-Q) hashing power. Or maybe more
accurately, it's irrelevant if the (1-Q) hashing power is or isn't a
unified pool.

The other thing is the fraction of the block fee the pool reserves
indicates you're talking about real-world costs... and the moment you do
that you find that pools themselves have economies of scale simply by
virtue of using a small overhead infrastructure, their nodes etc., for a
large number of miners. On that basis alone a small miner joining a
larger pool would always be financially advantageous modulo situations
where the large pool had legal restrictions that artificially increased
their overheads.

> Next interesting calculation would be bitcoin rate as a function of pool
> size, I expect a sharp dip somewhere in the 40%s of hardware controlled
> by one entity ;)

Bitcoin rate?

> Finally, as you mention yourselves, qualification of the various
> functions is needed. This could e.g. suggest if we are like to get 3 or
> 10 miners on the long run.

The equations give an incentive to centralize all the way up to 1 miner
with 100% hashing power.

Of course, if that one pool were p2pool, that might be ok!

> And now for section 2. You insert a definition of f(L) = a-bL. I think
> the whole idea of letting f depend on L is superfluous. As a miner you
> are always free to choose which transactions to include. You will always
> choose those with the biggest fee, so really it is only the average fee
> that is relevant: f(L) = c. Any dependence in L will be removed by the
> reshuffeling. To include an extra transaction will require either that
> it has a fee larger than another (kicking that out out) or that it has a
> fee so large that it covers for the other transaction too. Also recall
> that there is a logical minimum fee (as I have already shown), and a
> maximum optimal block size - that is until the bounty becomes 0 (which
> is where other effects kick in).

By defining f(L) you can model supply and demand, which can be relevant
in that a steep demand curve with a small number of high-fee
transactions can reduce centralization pressure in my model.

Of course, by defining f(L) = a-bL you also wind up with mathematica
spitting out some truly hideous polynomials. :P Setting f(L) = c as you
suggest is something I looked at, and results in equations that are more
reasonable, so I think I'll likely wind up doing that. You can make a
good argument anyway that the centralization would cause a flattening of
any demand curve anyway, as in the no-blocksize-limit case the larger
pools cost per transaction tends towards zero as their hashing power
increases - why pay high fees when the large pool will mine them almost
as fast?

-- 
'peter'[:-1]@petertodd.org
0000000000000000b4ff49cd2cad865d6cbca99828987a02f3d5f41067eab00a
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 685 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131115/b10ac2bf/attachment.sig>

From gronager at ceptacle.com  Fri Nov 15 11:47:46 2013
From: gronager at ceptacle.com (Michael Gronager)
Date: Fri, 15 Nov 2013 12:47:46 +0100
Subject: [Bitcoin-development] Even simpler minimum fee calculation
 formula: f > bounty*fork_rate/average_blocksize
In-Reply-To: <20131115103246.GB17034@savin>
References: <528367F5.9080303@ceptacle.com> <20131115103246.GB17034@savin>
Message-ID: <528609E2.2050107@ceptacle.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On 15/11/13, 11:32 , Peter Todd wrote:

> alpha = (1/113)*600s/134kBytes = 39.62uS/byte = 24kB/second
> 
> Which is atrocious... 

alpha = P_fork*t_block/S = 1/113*454000/134 = 29ms/kb

or 272kbit pr second - if you assume this is a bandwidth then I agree it
is strikingly small (ISDN like), but this is not the case, the size
dependence of this number originates both from the limited network
bandwidth and from the validation and verification time of the blocks as
well as the latency in sending thee again.

The connection between propagation time and fork rate cannot be denied,
and the bandwidth can be deducted from that alone - see Decket et al.

t_0 on a 10000km link is on the order of 40ms, and that is only counting
the finite light speed in the fibers - if you ping the same distance you
get roughly 1-200ms (due to latencies in network equipment). at a size
of ~100kbyte t_0 hence becomes irrelevant.

> This also indicates that pools haven't taken the simple step of peering
> with each other using high-bandwidth nodes with restricted numbers of
> peers

agree

> , which shows you how little attention they are paying to
> optimizing profits.  Right now mining pulls in $1.8 million/day, so
> that's up to $16k wasted.

yup, but the relevant comparison is not 16k vs 1.8m, but the pool
operator earnings which are on the order of 1% of the 1.8m so it is 18k
vs 16k - I wouldn't mind doubling my income...

> 
> However, because miners don't orphan themselves, that $16k loss is born
> disproportionately by smaller miners... which also means the 24kB/sec
> bandwidth estimate is wrong, and the real number is even worse.

Yes, agree

> In
> theory anyway, could just as easily be the case that larger pools have
> screwed up relaying still such that p2pool's forwarding wins.

Yeah, we should resurrect p2pool ;)

> 
> 
> 
> ------------------------------------------------------------------------------
> DreamFactory - Open Source REST & JSON Services for HTML5 & Native Apps
> OAuth, Users, Roles, SQL, NoSQL, BLOB Storage and External API Access
> Free app hosting. Or install the open source package on any LAMP server.
> Sign up and see examples for AngularJS, jQuery, Sencha Touch and Native!
> http://pubads.g.doubleclick.net/gampad/clk?id=63469471&iu=/4140/ostg.clktrk
> 
> 
> 
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 

-----BEGIN PGP SIGNATURE-----
Version: GnuPG/MacGPG2 v2.0.22 (Darwin)
Comment: GPGTools - http://gpgtools.org
Comment: Using GnuPG with Thunderbird - http://www.enigmail.net/

iQEcBAEBAgAGBQJShgniAAoJEKpww0VFxdGRrwQIALKsOtBUaAaQTX9ikN+10mSE
pE2dp2VnUvfUqpXf3MgJtAvg2RFqHjziyBMYmpMw5tLJPpeUthpNXm6Vm/Yg0DdL
JXSESIrd4Pdb/xPk2Fh9OKHmR1SB/8VxtRL2Vj1HmzzBcBiCylcaBuKlRkizvGSF
KrUm3EOFUfzgGYFUnqNceZ3CuQHWFAXbsitNqU6Vop8JOTgiSLhUrvb7r3W7Ewuy
jM3H2KAk/PrdGXwna3sUfDXmmOxmPm1pBy6+OaBTHEv+ALkreD++XSUnLUUTky9N
nZt2g7eMEFHIkVooj/HOGiwAvVwd7r86etiyUi8c2Pd46ff2OP5h1uiP/Qr28MA=
=Bsv9
-----END PGP SIGNATURE-----



From gronager at ceptacle.com  Fri Nov 15 11:58:14 2013
From: gronager at ceptacle.com (Michael Gronager)
Date: Fri, 15 Nov 2013 12:58:14 +0100
Subject: [Bitcoin-development] Even simpler minimum fee calculation
 formula: f > bounty*fork_rate/average_blocksize
In-Reply-To: <20131115111204.GF17034@savin>
References: <528367F5.9080303@ceptacle.com>
	<CAPaL=UWZXSwY9dzX30h_ksj2NAdkyLn3Xtfzs7P8Svg5tsE7Xw@mail.gmail.com>
	<20131115095413.GA17034@savin> <5285FBD9.2070106@ceptacle.com>
	<20131115111204.GF17034@savin>
Message-ID: <52860C56.7000608@ceptacle.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

>> 

>> Q = Total pool size (fraction of all mining power) q = My mining
>> power (do.) e = fraction of block fee that pool reserves
>> 
> 
> Unfortunately the math doesn't work that way. For any Q, a bigger
> Q gives you a higher return. Remember that the way I setup those
> equations in section 3.2 is such that I'm actually modeling two
> pools, one with Q hashing power and one with (1-Q) hashing power.
> Or maybe more accurately, it's irrelevant if the (1-Q) hashing
> power is or isn't a unified pool.

My Q and q are meant differently, I agree to your Q vs Q-1 argument,
but the q is "me as a miner" participating in "a pool" Q. If I
participate in a pool I pay the pool owner a fraction, e, but at the
same time I become part of an economy of scale (well actually a math
of scale...) and that can end up paying for the lost e. The question
is what is the ratio q/Q where I should rather mine on my own ? This
question is interesting as it will make bigger miners break away from
pools into solo mining, but I also agree that from pure math the most
advantageous scenario is the 100% mining rig.

> The equations give an incentive to centralize all the way up to 1
> miner with 100% hashing power.
> 
> Of course, if that one pool were p2pool, that might be ok!

Ha, yes, and then the math for p2pool starts... a math where we have
much more stales...


-----BEGIN PGP SIGNATURE-----
Version: GnuPG/MacGPG2 v2.0.22 (Darwin)
Comment: GPGTools - http://gpgtools.org
Comment: Using GnuPG with Thunderbird - http://www.enigmail.net/

iQEcBAEBAgAGBQJShgxWAAoJEKpww0VFxdGRoiwH/3RGTH503PJ8UWuyKjrxscb4
dG3TyThZCDs12DvtC+2TPKnIkQFinGx9442tZU/O+qmwsGJsNVoEcnGmKEYz/vlI
XzFF30ugslB4FKwHZYRqXELaKR4RvUtSzu6td8P3n+e6d0MZsuemMornpbXZkw3n
CbMlYuiG4h3iUAwTaOTS26cFbZoo6eyogydDjnS7Ogi2Ur85Rydi/Lj24rj7UxYB
+WUkYAv3bCqCzTkv1LxO7HwY1SICZDmoGRbuil5M7bJ+MftYt6Q6DVprGSVP0mOV
9eEVeMVY/WmMZCI/01ruXpzC3gxU60vOd/a3q9G2hd9Tn00HzugAllEXh7ZzzUs=
=unP8
-----END PGP SIGNATURE-----



From pete at petertodd.org  Fri Nov 15 19:09:40 2013
From: pete at petertodd.org (Peter Todd)
Date: Fri, 15 Nov 2013 14:09:40 -0500
Subject: [Bitcoin-development] Even simpler minimum fee calculation
 formula: f > bounty*fork_rate/average_blocksize
In-Reply-To: <52860C56.7000608@ceptacle.com>
References: <528367F5.9080303@ceptacle.com>
	<CAPaL=UWZXSwY9dzX30h_ksj2NAdkyLn3Xtfzs7P8Svg5tsE7Xw@mail.gmail.com>
	<20131115095413.GA17034@savin> <5285FBD9.2070106@ceptacle.com>
	<20131115111204.GF17034@savin> <52860C56.7000608@ceptacle.com>
Message-ID: <20131115190940.GA29469@petertodd.org>

On Fri, Nov 15, 2013 at 12:58:14PM +0100, Michael Gronager wrote:
> My Q and q are meant differently, I agree to your Q vs Q-1 argument,
> but the q is "me as a miner" participating in "a pool" Q. If I
> participate in a pool I pay the pool owner a fraction, e, but at the
> same time I become part of an economy of scale (well actually a math
> of scale...) and that can end up paying for the lost e. The question
> is what is the ratio q/Q where I should rather mine on my own ? This
> question is interesting as it will make bigger miners break away from
> pools into solo mining, but I also agree that from pure math the most
> advantageous scenario is the 100% mining rig.

The underlying issue is what is the pools expenses compared to yours.
There is an overhead to mining, you need to spend money and time (and
hence money) running and administering full nodes at the very minimum.
The pool can amortise that cost over many hashers; the solo miner can't.

Pools will of course have some profit margin, but why would you expect
that margin to not be sufficiently low to make it in a solo-miner's
interest to join the pool? Both the pool and the former solo-miner earn
more return after all if they centralize.

The fundemental issue is that in the design of Bitcoin there is an
incentive for miners to join into pools, and that incentive exists at
any amount of hashing power. Sure second order effects like regulation
and social pressure can counteract that incentive in some circumstances,
but that's not very strong protection.

> > The equations give an incentive to centralize all the way up to 1
> > miner with 100% hashing power.
> > 
> > Of course, if that one pool were p2pool, that might be ok!
> 
> Ha, yes, and then the math for p2pool starts... a math where we have
> much more stales...

However p2pool doesn't necessarily need a linear blockchain to function,
so there is a potential for stales to be much less relevant.

-- 
'peter'[:-1]@petertodd.org
000000000000000772f720b0a231150f22af20760c1463ef920f71ba3daab819
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 490 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131115/540cf503/attachment.sig>

From pete at petertodd.org  Fri Nov 15 19:19:56 2013
From: pete at petertodd.org (Peter Todd)
Date: Fri, 15 Nov 2013 14:19:56 -0500
Subject: [Bitcoin-development] Even simpler minimum fee calculation
 formula: f > bounty*fork_rate/average_blocksize
In-Reply-To: <528609E2.2050107@ceptacle.com>
References: <528367F5.9080303@ceptacle.com> <20131115103246.GB17034@savin>
	<528609E2.2050107@ceptacle.com>
Message-ID: <20131115191956.GB29469@petertodd.org>

On Fri, Nov 15, 2013 at 12:47:46PM +0100, Michael Gronager wrote:
> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA1
> 
> On 15/11/13, 11:32 , Peter Todd wrote:
> 
> > alpha = (1/113)*600s/134kBytes = 39.62uS/byte = 24kB/second
> > 
> > Which is atrocious... 
> 
> alpha = P_fork*t_block/S = 1/113*454000/134 = 29ms/kb

Huh? Where did 454000 come from?

> > , which shows you how little attention they are paying to
> > optimizing profits.  Right now mining pulls in $1.8 million/day, so
> > that's up to $16k wasted.
> 
> yup, but the relevant comparison is not 16k vs 1.8m, but the pool
> operator earnings which are on the order of 1% of the 1.8m so it is 18k
> vs 16k - I wouldn't mind doubling my income...

That's only true for a PPS pool though, not the more usual pools that
pay relative to blocks actually found. Heh, actually, that might be part
of the problem... also doesn't help how varience is going to make
noticing 1% hard.

> > In
> > theory anyway, could just as easily be the case that larger pools have
> > screwed up relaying still such that p2pool's forwarding wins.
> 
> Yeah, we should resurrect p2pool ;)

P2Pool has 1% hashing power right now; I mine on it myself with what
little hashing power I have.

The more interesting thing is how do you grow P2Pool - requiring a full
node is going to make that tricky. Also the once we start adding more
efficient block propagation by transmitting headers + txids p2pool's
current advantage goes away.

-- 
'peter'[:-1]@petertodd.org
0000000000000005fbc1840bbd5bd71d4d6cd2930e20da9e697710f58bd4f69d
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 490 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131115/bc59798d/attachment.sig>

From mike at belshe.com  Fri Nov 15 19:34:50 2013
From: mike at belshe.com (Mike Belshe)
Date: Fri, 15 Nov 2013 11:34:50 -0800
Subject: [Bitcoin-development] Testnet under attack?
Message-ID: <CABaLYCufS4pW644S9q63YfZNECtRW5jhJRw3-vozNz1=N50oHQ@mail.gmail.com>

It appears that someone is minting new blocks literally every couple of
seconds on the testnet chain right now.

You can see it on both blockexplorer:
   http://blockexplorer.com/testnet

and also btclook:
  http://testnet.btclook.com/

Is this something we should worry about?

thanks,
Mike
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131115/344160f8/attachment.html>

From mike at plan99.net  Fri Nov 15 20:02:06 2013
From: mike at plan99.net (Mike Hearn)
Date: Fri, 15 Nov 2013 21:02:06 +0100
Subject: [Bitcoin-development] Testnet under attack?
In-Reply-To: <CABaLYCufS4pW644S9q63YfZNECtRW5jhJRw3-vozNz1=N50oHQ@mail.gmail.com>
References: <CABaLYCufS4pW644S9q63YfZNECtRW5jhJRw3-vozNz1=N50oHQ@mail.gmail.com>
Message-ID: <CANEZrP1_vkosrRpouzRqZRFo8z0iNXzR14F1GU=yWZ66gZUtNw@mail.gmail.com>

I don't use testnet much anymore, partly because it sometimes kind of
breaks like this. It's a public resource and people sometimes abuse it.

You can create your own local network with -regtest and that lets you mint
new blocks instantly. It's a much simpler way to do testing and app
development.


On Fri, Nov 15, 2013 at 8:34 PM, Mike Belshe <mike at belshe.com> wrote:

> It appears that someone is minting new blocks literally every couple of
> seconds on the testnet chain right now.
>
> You can see it on both blockexplorer:
>    http://blockexplorer.com/testnet
>
> and also btclook:
>   http://testnet.btclook.com/
>
> Is this something we should worry about?
>
> thanks,
> Mike
>
>
>
> ------------------------------------------------------------------------------
> DreamFactory - Open Source REST & JSON Services for HTML5 & Native Apps
> OAuth, Users, Roles, SQL, NoSQL, BLOB Storage and External API Access
> Free app hosting. Or install the open source package on any LAMP server.
> Sign up and see examples for AngularJS, jQuery, Sencha Touch and Native!
> http://pubads.g.doubleclick.net/gampad/clk?id=63469471&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131115/635bddf7/attachment.html>

From pete at petertodd.org  Fri Nov 15 22:06:48 2013
From: pete at petertodd.org (Peter Todd)
Date: Fri, 15 Nov 2013 17:06:48 -0500
Subject: [Bitcoin-development] Committing to extra block data/a better
 merge-mine standard
In-Reply-To: <5277F166.9090606@monetize.io>
References: <CANEZrP3iYBdg3p7Ru4O-UENY_yyQDA8=9PGn=KDKGGTrZ-xkRw@mail.gmail.com>
	<20131104115314.GA1013@savin>
	<CANEZrP1uqee1UO=zb+50t9BNtv2voTHoCKQCTQExNyoL=Y0=PA@mail.gmail.com>
	<20131104181649.GA3847@petertodd.org>
	<5277F166.9090606@monetize.io>
Message-ID: <20131115220648.GA30456@petertodd.org>

On Mon, Nov 04, 2013 at 11:11:34AM -0800, Mark Friedenbach wrote:
> > Now interpret the bits of that UUID as an allowed path: 0 = left, 1
> > = right, from the top of the tree. When you build the tree, make
> > sure everything that is going to be committed to uses it's allowed
> > path; the tree will look a bit jagged. If everyone picks their
> > per-purpose UUIDs randomly the paths won't collide for very many
> > levels on average, and path lengths will remain short. Validating
> > that some given data was committed properly is simple and easy:
> > just check the path, and check that the directions from the top of
> > the tree followed the spec.
> 
> You mean... an authenticated prefix tree? Composable/commutative
> properties are not needed as far as I can see, so you could make the
> path validation, traversal, and proof size smaller by using level
> compression.

You don't need level compression if you adopt my per-block randomization
idea. I think we'd be better off keeping the proofs as simple as
possible, just dumb merkle paths.

> I had previously proposed to this list a hash256-to-UUID mechanism
> explicitly for this purpose. Recap: use 122 of the low 128 bits of the
> aux-chain's genesis block to form a version=4 (random) or version=6
> (previously unused) UUID. However since making that proposal I am now
> leaning towards simply using the hash of the genesis block directly to
> identify aux chains since level compression will allow longer keys
> with the same path length.

I mentioned UUID more in spirit than in terms of the official UUID
standard; any large randomly picked integer is fine.

> If there is general interest, I can make finishing this a higher priority.

Wouldn't hurt to run the idea past forrestv, given p2pool will be
affected as it'd need to adopt the standard. He's run into some oddness
with mining hardware and nonces that would be good to understand. (note
how p2pool blocks don't commit to a fully random hash - there's some
extra bytes in there due to stratum or something IIRC)

-- 
'peter'[:-1]@petertodd.org
000000000000000601a5b2f2b4a597851fdf00f6fc3572bbc03f26857c170032
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 490 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131115/735bc9b1/attachment.sig>

From drak at zikula.org  Sat Nov 16 00:41:56 2013
From: drak at zikula.org (Drak)
Date: Sat, 16 Nov 2013 00:41:56 +0000
Subject: [Bitcoin-development] moving the default display to mbtc
In-Reply-To: <201311142301.39550.luke@dashjr.org>
References: <CAKaEYhK4oXH3hB7uS3=AEkA6r0VB5OYyTua+LOP18rq+rYajHg@mail.gmail.com>
	<528547FD.2070300@gmail.com>
	<CAJfRnm7-34jwX0m+0Trj9-YvXFeUYMGq35AoRkY7bq9w-XpabA@mail.gmail.com>
	<201311142301.39550.luke@dashjr.org>
Message-ID: <CANAnSg1-uW+g3KYyqdfqdvcUybpu2Mn2-j4hJN-5-gVWPrdgvg@mail.gmail.com>

On 14 November 2013 23:01, Luke-Jr <luke at dashjr.org> wrote:

> I wonder if it might make sense to bundle some other terminology fixups at
> the
> same time.
>

A very good idea.


> Right now, Bitcoin-Qt has been using the term "confirmations" (plural) to
> refer to how many blocks deep a transaction is buried. We also use the term
> "confirmation" to refer to the point where a transaction is accepted as
> paid.
> IMO, the latter use makes sense, but the former leads to confusion
> especially
> in light of scamcoins which abuse this confusion to claim they have "faster
> confirmations", implying that the actual confirmation occurs faster when it
> really doesn't. "5 blocks deep" may not be more clear to laymen, but at
> least
> it makes it harder for people to confuse with actual confirmation.
>

I think people are more familiar with check clearance - "the payment/check
has cleared".

If "confirmation" and "n confirmations" together are problematic, I'd talk
about "cleared payments" and "n confirmations"

So "a payment clears after one confirmation, but you might want to wait
until the payment has been confirmed n times".
Then at least you are not using the same word for two different meanings
and you're using stuff more familiar in popular lexicon.
I dont think it's helpful for users if we use the word "blocks".

Without the technical details, I just explain to normal bitcoin users that
the Bitcoin network checks and confirms the payment is valid (multiple
times).

I think we all know the problems with the term "address". People naturally
> compare it to postal addresses, email addresses, etc, which operate
> fundamentally different. I suggest that we switch to using "invoice id" to
> refer to what is now known as addresses, as that seems to get the more
> natural
> understanding to people. On the other hand, with the advent of the payment
> protocol, perhaps address/invoice id use will die out soon?
>

I think "key id" is a bit alien at user level - it's not something they are
used to.
For years, people had a problem with  "email address", instead using "email
number" but they got there eventually. Most people nowadays use "email
address"
So "payment address" or "bitcoin address" make better sense here when
qualified as a "<foo> address" and not just an "address"

You could also call it "payment id", but I dont think "invoice id" since
no-one pays to an invoice id that's just a reference for a payment, not the
destination.

People are very familiar with Paypal these days, and are familiar with
"paypal address" or their "paypal id" so again I think valid contenders are
"bitcoin address" or "bitcoin id".

Regards,

Drak
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131116/4c212074/attachment.html>

From luke at dashjr.org  Sat Nov 16 01:10:41 2013
From: luke at dashjr.org (Luke-Jr)
Date: Sat, 16 Nov 2013 01:10:41 +0000
Subject: [Bitcoin-development] moving the default display to mbtc
In-Reply-To: <CANAnSg1-uW+g3KYyqdfqdvcUybpu2Mn2-j4hJN-5-gVWPrdgvg@mail.gmail.com>
References: <CAKaEYhK4oXH3hB7uS3=AEkA6r0VB5OYyTua+LOP18rq+rYajHg@mail.gmail.com>
	<201311142301.39550.luke@dashjr.org>
	<CANAnSg1-uW+g3KYyqdfqdvcUybpu2Mn2-j4hJN-5-gVWPrdgvg@mail.gmail.com>
Message-ID: <201311160110.42132.luke@dashjr.org>

On Saturday, November 16, 2013 12:41:56 AM Drak wrote:
> So "a payment clears after one confirmation, but you might want to wait
> until the payment has been confirmed n times".
> Then at least you are not using the same word for two different meanings
> and you're using stuff more familiar in popular lexicon.
> I dont think it's helpful for users if we use the word "blocks".

"Confirmations" in a numeric context isn't correct, though. We're using to it 
because we've been using Bitcoin so long, but to the average person they would 
expect it to mean something more than it is. If not referring to blocks, then 
perhaps "witnessed N times"?

> For years, people had a problem with  "email address", instead using "email
> number" but they got there eventually. Most people nowadays use "email
> address"
> So "payment address" or "bitcoin address" make better sense here when
> qualified as a "<foo> address" and not just an "address"
> 
> You could also call it "payment id", but I dont think "invoice id" since
> no-one pays to an invoice id that's just a reference for a payment, not the
> destination.
> 
> People are very familiar with Paypal these days, and are familiar with
> "paypal address" or their "paypal id" so again I think valid contenders are
> "bitcoin address" or "bitcoin id".

I think you might be demonstrating my point with regard to user confusion 
here. Bitcoin addresses are *not* like email addresses, paypal ids, etc. 
Bitcoin addresses aren't the destination - they're point to a destination (an 
account in a wallet), but they also represent information such as who is 
paying and what for - in other words, a specific invoice.

Luke



From mark at monetize.io  Sat Nov 16 00:48:42 2013
From: mark at monetize.io (Mark Friedenbach)
Date: Fri, 15 Nov 2013 16:48:42 -0800
Subject: [Bitcoin-development] moving the default display to mbtc
In-Reply-To: <CANAnSg1-uW+g3KYyqdfqdvcUybpu2Mn2-j4hJN-5-gVWPrdgvg@mail.gmail.com>
References: <CAKaEYhK4oXH3hB7uS3=AEkA6r0VB5OYyTua+LOP18rq+rYajHg@mail.gmail.com>	<528547FD.2070300@gmail.com>	<CAJfRnm7-34jwX0m+0Trj9-YvXFeUYMGq35AoRkY7bq9w-XpabA@mail.gmail.com>	<201311142301.39550.luke@dashjr.org>
	<CANAnSg1-uW+g3KYyqdfqdvcUybpu2Mn2-j4hJN-5-gVWPrdgvg@mail.gmail.com>
Message-ID: <5286C0EA.4060903@monetize.io>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On 11/15/13 4:41 PM, Drak wrote:
> For years, people had a problem with  "email address", instead
> using "email number" but they got there eventually. Most people
> nowadays use "email address" So "payment address" or "bitcoin
> address" make better sense here when qualified as a "<foo> address"
> and not just an "address"
> 
> You could also call it "payment id", but I dont think "invoice id"
> since no-one pays to an invoice id that's just a reference for a
> payment, not the destination.
> 
> People are very familiar with Paypal these days, and are familiar
> with "paypal address" or their "paypal id" so again I think valid
> contenders are "bitcoin address" or "bitcoin id".

No, no no. That's precisely the problem! Bitcoin pubkey-hashes are not
like email address, physical address, or paypal address. These latter
things are fixed pieces of information that stay constant over time.
Bitcoin keys, on the other hand, must be one-use-only. We want to
break this association, not strengthen it.


-----BEGIN PGP SIGNATURE-----
Version: GnuPG/MacGPG2 v2.0.19 (Darwin)
Comment: GPGTools - http://gpgtools.org
Comment: Using GnuPG with Thunderbird - http://www.enigmail.net/

iQIcBAEBAgAGBQJShsDqAAoJEAdzVfsmodw4e+UQAJBk3N7y/1ph8k6K/tPn2RB4
t0TiI46j0WuUghnCiDSOhQiL0EnUWUX8tCa6jH/3ASafBLKVey2LA7LeYoFZXpqJ
QEk5S7+eroA6uzzhViDTcoJJ7yH+ivd6dioVApirfnHVYiq6TZuTULhN/5zM6g1J
WehI9Rg2C7wj+I71yPJDeGAdtyOeX0iKQy3hN+q7+RIgeZC1viwsq81u6dzVjIZM
aPIk6S2VYHSUKhd7wSg+AprCV7jwftKhxDrW6R6KmOGYIG+JdqVnaErc5Wm7ujXk
Jnoh6UsQrcx9ck8I4sRTcbb5jGme1taN8RDcKifYqzTVQAr/ziVRqYY57fNAJMm2
lJZ0ctVD1+UB96DzQB4wCuWRoFF5+I9kD2hoEAXA4O9tqcou48lTQ25DAnkcusd+
dD0SfcRsgda8XqnWffGPYaW0E0dQuvu6elO+rzSh4DSCMkroKIvUwdak8Ah5M2lC
DyE/efwO9csImbTc1QukedkPskbOqPOo36sH5GdmObKKFCpORIzIO0aDQE1NM2Ib
rJurpU0iJ8eA+QT9lpyWG+jjahYpqyVhPcpfVsIewKhI0izBa352IYPbpCv/pdfM
oMO/tBfIwUW3jjav3zyFE47hAwistqfV4xds93K9rqpOmLtDIhSuzfmbuXwmciCM
d7/3rYQ6FxtyNkEUa27L
=5MWw
-----END PGP SIGNATURE-----



From jeanpaulkogelman at me.com  Sat Nov 16 01:19:06 2013
From: jeanpaulkogelman at me.com (Jean-Paul Kogelman)
Date: Sat, 16 Nov 2013 01:19:06 +0000 (GMT)
Subject: [Bitcoin-development] moving the default display to mbtc
In-Reply-To: <201311160110.42132.luke@dashjr.org>
Message-ID: <365382c5-d86c-4e54-8b47-810bf4a758c2@me.com>



On Nov 15, 2013, at 05:10 PM, Luke-Jr <luke at dashjr.org> wrote:

On Saturday, November 16, 2013 12:41:56 AM Drak wrote:
So "a payment clears after one confirmation, but you might want to wait
until the payment has been confirmed n times".
Then at least you are not using the same word for two different meanings
and you're using stuff more familiar in popular lexicon.
I dont think it's helpful for users if we use the word "blocks".

"Confirmations" in a numeric context isn't correct, though. We're using to it 
because we've been using Bitcoin so long, but to the average person they would 
expect it to mean something more than it is. If not referring to blocks, then 
perhaps "witnessed N times"?

Why not call it "Clearing" for transactions with < 6 confirmations and "Cleared" for >= 6?
?
The round ticker should be enough of an indication of the progress.


-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131116/efd41732/attachment.html>

From drak at zikula.org  Sat Nov 16 01:19:22 2013
From: drak at zikula.org (Drak)
Date: Sat, 16 Nov 2013 01:19:22 +0000
Subject: [Bitcoin-development] moving the default display to mbtc
In-Reply-To: <201311160110.42132.luke@dashjr.org>
References: <CAKaEYhK4oXH3hB7uS3=AEkA6r0VB5OYyTua+LOP18rq+rYajHg@mail.gmail.com>
	<201311142301.39550.luke@dashjr.org>
	<CANAnSg1-uW+g3KYyqdfqdvcUybpu2Mn2-j4hJN-5-gVWPrdgvg@mail.gmail.com>
	<201311160110.42132.luke@dashjr.org>
Message-ID: <CANAnSg23FeqWmGRaSNvTp4Y9nAM+t8ttuxs8+HRXH0iJ2sFbjg@mail.gmail.com>

On 16 November 2013 01:10, Luke-Jr <luke at dashjr.org> wrote:

> On Saturday, November 16, 2013 12:41:56 AM Drak wrote:
> > So "a payment clears after one confirmation, but you might want to wait
> > until the payment has been confirmed n times".
> > Then at least you are not using the same word for two different meanings
> > and you're using stuff more familiar in popular lexicon.
> > I dont think it's helpful for users if we use the word "blocks".
>
> "Confirmations" in a numeric context isn't correct, though. We're using to
> it
> because we've been using Bitcoin so long, but to the average person they
> would
> expect it to mean something more than it is. If not referring to blocks,
> then
> perhaps "witnessed N times"?


If you are talking about user interface, I don't think you have to be
technically correct. It must make sense to the user.
A user cares about his balance, and did a payment "go through", and "did my
payment arrive/clear".

The UI is for their benefit.


> > For years, people had a problem with  "email address", instead using
> "email
> > number" but they got there eventually. Most people nowadays use "email
> > address"
> > So "payment address" or "bitcoin address" make better sense here when
> > qualified as a "<foo> address" and not just an "address"
> >
> > You could also call it "payment id", but I dont think "invoice id" since
> > no-one pays to an invoice id that's just a reference for a payment, not
> the
> > destination.
> >
> > People are very familiar with Paypal these days, and are familiar with
> > "paypal address" or their "paypal id" so again I think valid contenders
> are
> > "bitcoin address" or "bitcoin id".
>
> I think you might be demonstrating my point with regard to user confusion
> here. Bitcoin addresses are *not* like email addresses, paypal ids, etc.
> Bitcoin addresses aren't the destination - they're point to a destination
> (an
> account in a wallet), but they also represent information such as who is
> paying and what for - in other words, a specific invoice.


Maybe, but again from the user's perspective they pay someone, and they
receive money - just like you do with paypal using an email address.
The technical bits in the middle dont matter to the user and trying to crap
stuff in to be technically correct is just confusing to them.

The UI needs to be about the user and fit with his experience of the world.

Drak
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131116/49a7ee31/attachment.html>

From mark at monetize.io  Sat Nov 16 01:31:36 2013
From: mark at monetize.io (Mark Friedenbach)
Date: Fri, 15 Nov 2013 17:31:36 -0800
Subject: [Bitcoin-development] moving the default display to mbtc
In-Reply-To: <CANAnSg23FeqWmGRaSNvTp4Y9nAM+t8ttuxs8+HRXH0iJ2sFbjg@mail.gmail.com>
References: <CAKaEYhK4oXH3hB7uS3=AEkA6r0VB5OYyTua+LOP18rq+rYajHg@mail.gmail.com>	<201311142301.39550.luke@dashjr.org>	<CANAnSg1-uW+g3KYyqdfqdvcUybpu2Mn2-j4hJN-5-gVWPrdgvg@mail.gmail.com>	<201311160110.42132.luke@dashjr.org>
	<CANAnSg23FeqWmGRaSNvTp4Y9nAM+t8ttuxs8+HRXH0iJ2sFbjg@mail.gmail.com>
Message-ID: <5286CAF8.9010005@monetize.io>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On 11/15/13 5:19 PM, Drak wrote:
> Maybe, but again from the user's perspective they pay someone, and
> they receive money - just like you do with paypal using an email
> address. The technical bits in the middle dont matter to the user
> and trying to crap stuff in to be technically correct is just
> confusing to them.
> 
> The UI needs to be about the user and fit with his experience of
> the world.

It's not about being technically correct. It is about protecting the
user from grave breaches of privacy. It is for their own benefit that
they should not be reusing addresses, and if they understood why they
wouldn't.

Unfortunately calling it a "bitcoin address" and including an "address
book" in the reference client has had the effect of making people
think that these objects are like paypal address, or email addresses,
but they are not and they should not be treated the same.

Mark

-----BEGIN PGP SIGNATURE-----
Version: GnuPG/MacGPG2 v2.0.19 (Darwin)
Comment: GPGTools - http://gpgtools.org
Comment: Using GnuPG with Thunderbird - http://www.enigmail.net/

iQIcBAEBAgAGBQJShsr4AAoJEAdzVfsmodw46nIP/AlDcJh2ET9qYT2ZvddciTk3
dtQDArCkwCW3kYbVjIFT8YtNFftEfkq/qBNnILipLJNN49QduAIlt3aetEE6eJBZ
oqYOV2R7GW2yhLDv/GrT6GnB1C9nQ4OuKC6RNpXX4bMpZSrbP9yfyyLqecF1tMBV
i8De4XLz1uUvZOo/jwHNeYy/BAZktwdk5hWlgG2yKebRbqVX1Xv70Qb1cPpBgCWm
uRDL3bqdZuh6i8NNDQpBqMJ/MP4ZWpIgdHkfO6a3QCq3H0JXyug4t5lkNngCrAI3
KGlSOuYK4Fsfw97xQUBFIaSYFOU+yPDRQK4UGcTqWPLt5YHzUxBFNkOXSnVReudq
Em/wlbDkPqm7R6by54fVkG85snJrwmTbD7uxGz2fe1LyzB3HhdOTZyZ1KiyDHqGA
zDUFxmH0XNhvVcJvcSFlc38A54oOHTJmfJ3rxJU/q0/5N3ZIBdF8fQ4xIvXXDeeA
dO+tul5q78tbO6xyTrbsHO8JRYt4Un8Hjc5mkdqp9gzA8beJFm5+jMZlGBfdl5jR
lS9sW7QBxr6m+n2PJ97i+1CgoxTfzOh3jyj93G6Hqx3reTfCu5fSWUhwRnFzJXav
qqPBP4Cl+6ocK7+4V1lyfAzMqpYx+GCJ1JZhD0hhwrGglgVPfE0bz7BUGea8U3+T
0pCTlkhWzEbzDp7NtFdY
=ShxL
-----END PGP SIGNATURE-----



From gmaxwell at gmail.com  Sat Nov 16 02:47:09 2013
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Fri, 15 Nov 2013 18:47:09 -0800
Subject: [Bitcoin-development] [RFC] Proposal: Base58 encoded HD Wallet
 master seed with optional encryption
In-Reply-To: <81f77484-3ca9-40a7-a999-884260b26be5@me.com>
References: <CANEZrP37a=EH+1P47opH0E-1TG9ozgw_1NzecJpRRJsMaZRLOw@mail.gmail.com>
	<81f77484-3ca9-40a7-a999-884260b26be5@me.com>
Message-ID: <CAAS2fgSyegH8y1dYcijCSPLsC54mxeSNsN+3FQVDo5R9tWwAwQ@mail.gmail.com>

On Mon, Jul 22, 2013 at 2:37 PM, Jean-Paul Kogelman
<jeanpaulkogelman at me.com> wrote:
>
> I added a 2 byte 'weeks since 2013-01-01' field and updated the prefixes,
> ranges and test vectors.
>
> The updated proposal lives here:
> https://bitcointalk.org/index.php?topic=258678

Greetings.  Any recent progress on this?

Do we believe this proposal can replace BIP38?  If not, what are the
limitations that would prevent it from doing so?



From jeanpaulkogelman at me.com  Sat Nov 16 03:09:07 2013
From: jeanpaulkogelman at me.com (Jean-Paul Kogelman)
Date: Fri, 15 Nov 2013 19:09:07 -0800
Subject: [Bitcoin-development] [RFC] Proposal: Base58 encoded HD Wallet
 master seed with optional encryption
In-Reply-To: <CAAS2fgSyegH8y1dYcijCSPLsC54mxeSNsN+3FQVDo5R9tWwAwQ@mail.gmail.com>
References: <CANEZrP37a=EH+1P47opH0E-1TG9ozgw_1NzecJpRRJsMaZRLOw@mail.gmail.com>
	<81f77484-3ca9-40a7-a999-884260b26be5@me.com>
	<CAAS2fgSyegH8y1dYcijCSPLsC54mxeSNsN+3FQVDo5R9tWwAwQ@mail.gmail.com>
Message-ID: <BF62F0D0-1D13-4F19-A8F6-F588F3060A64@me.com>


I've made no changes since the last time I've mentioned it here on the list (when the BIP procedures were being discussed).

The last changes are:

01-10-2013 - Expanded the salt to be prefix + date + checksum and renamed 'master seed' to 'root key'.
24-07-2013 - Added user selectable KDF + parameters, encoded in the prefix.
22-07-2013 - Added 2 byte creation date field, as a result, the prefix is expanded to 3 bytes.

The biggest difference between this proposal and BIP38 is that BIP38 allows a 3rd party to generate the encrypted private key + confirmation code from a passphrase code. Since this proposal is about encrypting a random value that's fed into HMAC-SHA512 and the presence of a partial hash of the root address, that's not possible.




>> https://bitcointalk.org/index.php?topic=258678
> 
> Greetings.  Any recent progress on this?
> 
> Do we believe this proposal can replace BIP38?  If not, what are the
> limitations that would prevent it from doing so?

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131115/4376a583/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 842 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131115/4376a583/attachment.sig>

From stick at gk2.sk  Sat Nov 16 23:41:01 2013
From: stick at gk2.sk (Pavol Rusnak)
Date: Sun, 17 Nov 2013 00:41:01 +0100
Subject: [Bitcoin-development] Proposal to replace BIP0039
In-Reply-To: <20131104151036.GN16611@crunch>
References: <526BDEC2.2090709@gmx.de>	<CAJna-HgH1g8iiSvxXrJuga808SQJ6DKo4AYw4fxpwTRCsL+EyQ@mail.gmail.com>	<CAPg+sBiuLJJV3pB-EF3O9sgB_Z3tuLhEg9k=A9mcxJvgy3UQSw@mail.gmail.com>	<52721F47.30206@gmx.de>	<CAJna-Hj+q7oyTj8SWiVESPt5Web-mLuDhv7yA8zF5wRD81aBXA@mail.gmail.com>	<5274C99A.8060304@gmx.de>
	<20131103064111.GI16611@crunch>	<5275F55A.1030805@gmx.de>
	<20131103074052.GJ16611@crunch>	<52760BCE.6080501@gmx.de>
	<20131104151036.GN16611@crunch>
Message-ID: <5288028D.2050308@gk2.sk>

On 04/11/13 16:10, Timo Hanke wrote:
> Does Trezor even use private derivation?

No. It can't. Private keys never leave the device so client would not
know how to generate addresses.

-- 
Best Regards / S pozdravom,

Pavol Rusnak <stick at gk2.sk>



From stick at gk2.sk  Sat Nov 16 23:49:04 2013
From: stick at gk2.sk (Pavol Rusnak)
Date: Sun, 17 Nov 2013 00:49:04 +0100
Subject: [Bitcoin-development] Proposal to replace BIP0039
In-Reply-To: <20131103074052.GJ16611@crunch>
References: <trinity-ba3941a0-f758-4372-b431-c64e9b44328a-1382635758149@3capp-gmx-bs09>	<CAJna-HjgpRhLdVGh+prx54VezHaH1vXGpPotW1Xkz2tiAiWrbg@mail.gmail.com>	<526BDEC2.2090709@gmx.de>	<CAJna-HgH1g8iiSvxXrJuga808SQJ6DKo4AYw4fxpwTRCsL+EyQ@mail.gmail.com>	<CAPg+sBiuLJJV3pB-EF3O9sgB_Z3tuLhEg9k=A9mcxJvgy3UQSw@mail.gmail.com>	<52721F47.30206@gmx.de>	<CAJna-Hj+q7oyTj8SWiVESPt5Web-mLuDhv7yA8zF5wRD81aBXA@mail.gmail.com>	<5274C99A.8060304@gmx.de>
	<20131103064111.GI16611@crunch>	<5275F55A.1030805@gmx.de>
	<20131103074052.GJ16611@crunch>
Message-ID: <52880470.2060206@gk2.sk>

On 03/11/13 08:40, Timo Hanke wrote:
> Trezor picks random s and sends S=s*G to computer, keeping s secret.

That's a really neat trick!

> One question remains: if you only write down the mnemonic how can you be
> sure that it is correct and corresponds to the secret in Trezor?

Right. That's a problem. I'm not sure if this whole cryptomagic is
benefitial at all.

I'd suggest to go the easy way for now, i.e. prove that external entropy
was used while generating the master seed. If the user does not trust
our firmware, he can use his own built one.

-- 
Best Regards / S pozdravom,

Pavol Rusnak <stick at gk2.sk>



From timo.hanke at web.de  Sun Nov 17 00:42:39 2013
From: timo.hanke at web.de (Timo Hanke)
Date: Sat, 16 Nov 2013 18:42:39 -0600
Subject: [Bitcoin-development] Proposal to replace BIP0039
In-Reply-To: <52880470.2060206@gk2.sk>
References: <526BDEC2.2090709@gmx.de>
	<CAJna-HgH1g8iiSvxXrJuga808SQJ6DKo4AYw4fxpwTRCsL+EyQ@mail.gmail.com>
	<CAPg+sBiuLJJV3pB-EF3O9sgB_Z3tuLhEg9k=A9mcxJvgy3UQSw@mail.gmail.com>
	<52721F47.30206@gmx.de>
	<CAJna-Hj+q7oyTj8SWiVESPt5Web-mLuDhv7yA8zF5wRD81aBXA@mail.gmail.com>
	<5274C99A.8060304@gmx.de> <20131103064111.GI16611@crunch>
	<5275F55A.1030805@gmx.de> <20131103074052.GJ16611@crunch>
	<52880470.2060206@gk2.sk>
Message-ID: <20131117004239.GA24383@crunch>

On Sun, Nov 17, 2013 at 12:49:04AM +0100, Pavol Rusnak wrote:
> On 03/11/13 08:40, Timo Hanke wrote:
> > Trezor picks random s and sends S=s*G to computer, keeping s secret.
> 
> That's a really neat trick!
> 
> > One question remains: if you only write down the mnemonic how can you be
> > sure that it is correct and corresponds to the secret in Trezor?
> 
> Right. That's a problem. I'm not sure if this whole cryptomagic is
> benefitial at all.
> 
> I'd suggest to go the easy way for now, i.e. prove that external entropy
> was used while generating the master seed. If the user does not trust
> our firmware, he can use his own built one.

No, this question of mine was regardless of any cryptomagic or neat
tricks like Thomas' suggestion. It has nothing do with auditing the
entropy. It was just a backup question.

I recently had an experience where I thought coins were lost because the
secrets I had didn't match the public keys that I thought they'd match.
>From now on I will always recover my wallet first, from the backed up
secrets, before sending any coins to the pubkeys in the wallet. I will
never again generate a wallet, backup the secrets, and hope the secrets
indeed match the pubkeys.. without testing that. My question was how
Trezor allows me to verify my backup.

All this makes me think if having one device generating and displaying
the secret, and making a backing from the display, is the right way to
go. Since you would need a second device to verify your backup is sane,
you could have two devices to start with. One is your hardware wallet
and it only imports secrets (restores backups). The other is an entropy
generator and it only generates secrets.

Best regards,
Timo

p.s. The question about auditing entropy would only apply to the generator,
not the wallet. Is it yet documented how Trezor proves that external
entropy was used? 

-- 
Timo Hanke
PGP 1EFF 69BC 6FB7 8744 14DB  631D 1BB5 D6E3 AB96 7DA8



From stick at gk2.sk  Sun Nov 17 00:49:00 2013
From: stick at gk2.sk (Pavol Rusnak)
Date: Sun, 17 Nov 2013 01:49:00 +0100
Subject: [Bitcoin-development] Proposal to replace BIP0039
In-Reply-To: <20131117004239.GA24383@crunch>
References: <526BDEC2.2090709@gmx.de>
	<CAJna-HgH1g8iiSvxXrJuga808SQJ6DKo4AYw4fxpwTRCsL+EyQ@mail.gmail.com>
	<CAPg+sBiuLJJV3pB-EF3O9sgB_Z3tuLhEg9k=A9mcxJvgy3UQSw@mail.gmail.com>
	<52721F47.30206@gmx.de>
	<CAJna-Hj+q7oyTj8SWiVESPt5Web-mLuDhv7yA8zF5wRD81aBXA@mail.gmail.com>
	<5274C99A.8060304@gmx.de> <20131103064111.GI16611@crunch>
	<5275F55A.1030805@gmx.de> <20131103074052.GJ16611@crunch>
	<52880470.2060206@gk2.sk> <20131117004239.GA24383@crunch>
Message-ID: <5288127C.5010605@gk2.sk>

On 17/11/13 01:42, Timo Hanke wrote:
> p.s. The question about auditing entropy would only apply to the generator,
> not the wallet. Is it yet documented how Trezor proves that external
> entropy was used? 

We'll probably use the most straightforward way:
a) trezor prints entropy A on a display (probably in hex format, this
step is triggered by sending a special flag in initialize message)
b) trezor receives entropy B from external source
c) trezor creates sha256(A + B) and uses that as a seed
d) trezor prints used seed on a display (probably in BIP39 format)
e) user can check on a trusted computer that everything was ok

(note that steps b-d are the same regardless of whether the special flag
was set)

-- 
Best Regards / S pozdravom,

Pavol Rusnak <stick at gk2.sk>



From jacob.lyles at gmail.com  Sun Nov 17 03:22:36 2013
From: jacob.lyles at gmail.com (Jacob Lyles)
Date: Sat, 16 Nov 2013 19:22:36 -0800
Subject: [Bitcoin-development] moving the default display to mbtc
In-Reply-To: <201311141818.47055.luke@dashjr.org>
References: <CAKaEYhK4oXH3hB7uS3=AEkA6r0VB5OYyTua+LOP18rq+rYajHg@mail.gmail.com>
	<201311141818.47055.luke@dashjr.org>
Message-ID: <CAC078-CAvgRmXdQpQLQpZ=Z4U8gLO4VYERGVZmDjn3gztcGRTw@mail.gmail.com>

One of the strongest results from psychology is the power of defaults over
people's behavio<http://danariely.com/2008/05/05/3-main-lessons-of-psychology/>r.
Opt-in vs. opt-out national organ donation policies mean the difference
between organ donation rates under ~10% to over ~90%. Most people stick
with the default option.


On Thu, Nov 14, 2013 at 10:18 AM, Luke-Jr <luke at dashjr.org> wrote:

> On Thursday, November 14, 2013 11:45:51 AM Melvin Carvalho wrote:
> > Would now be a good time to start thinking about changing the default
> > display in the software.  Perhaps initially it could be a dropdown
> display
> > option, then at some point mbtc becomes the default?
>
> There's already a dropdown display option...
>
>
> ------------------------------------------------------------------------------
> DreamFactory - Open Source REST & JSON Services for HTML5 & Native Apps
> OAuth, Users, Roles, SQL, NoSQL, BLOB Storage and External API Access
> Free app hosting. Or install the open source package on any LAMP server.
> Sign up and see examples for AngularJS, jQuery, Sencha Touch and Native!
> http://pubads.g.doubleclick.net/gampad/clk?id=63469471&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131116/3df42782/attachment.html>

From mail at rbrune.de  Sun Nov 17 16:43:14 2013
From: mail at rbrune.de (Rafael Brune)
Date: Sun, 17 Nov 2013 17:43:14 +0100
Subject: [Bitcoin-development] Bitcoin Network Simulator
Message-ID: <63B3BF21-C487-4D62-8BB8-18C90F2C3F4C@rbrune.de>

Over the last days I spent some time working on a simple Bitcoin network simulator.
It is a stochastic event-based continuous-time simulation of Bitcoin miners
exchanging messages and building block chains. It simulates latency, bandwidth 
and also verification speed but it currently does not simulate propagation/inclusion
of transactions and instead uses random block sizes.

The simulator includes two examples, one for a 51% attack and the other is an
implementation of selfish mining (pretty much 1:1 as described in the paper).
With the random parameters I picked it seems like it pays off to mine selfish with
>=30% of the hashing power - but take this with a huge grain of salt as this
is with a very small network and randomly chosen parameters. And of course it
is not a perfect replica of the real world network.

Since this is based on my understanding of the Bitcoin network and protocol it
would be great if others would take a look and help improve it.

The project can be found on my github:
https://github.com/rbrune/btcsim

Regards,
 Rafael Brune


From w at grabhive.com  Mon Nov 18 02:28:56 2013
From: w at grabhive.com (Wendell)
Date: Mon, 18 Nov 2013 10:28:56 +0800
Subject: [Bitcoin-development] moving the default display to mbtc
In-Reply-To: <CAJHLa0M6CkoDbD6FFixf9-mmhug7DvehSWCJ+EHWVxUDuwNiBg@mail.gmail.com>
References: <CAKaEYhK4oXH3hB7uS3=AEkA6r0VB5OYyTua+LOP18rq+rYajHg@mail.gmail.com>
	<52852C2D.9020103@gmail.com> <52853D8A.6010501@monetize.io>
	<CAJHLa0M6CkoDbD6FFixf9-mmhug7DvehSWCJ+EHWVxUDuwNiBg@mail.gmail.com>
Message-ID: <EE02A310-8604-4811-B2D0-FC32C72C20F3@grabhive.com>

We're with uBTC too. Been waiting for the signal to do this, let's do it right after the fee system is improved.

-wendell

grabhive.com | twitter.com/hivewallet | gpg: 6C0C9411

On Nov 15, 2013, at 6:03 AM, Jeff Garzik wrote:

> Go straight to uBTC. Humans and existing computer systems handle numbers to
> the left of the decimals just fine (HK Dollars, Yen). The opposite is
> untrue (QuickBooks really does not like 3+ decimal places).




From christophe.biocca at gmail.com  Mon Nov 18 03:59:04 2013
From: christophe.biocca at gmail.com (Christophe Biocca)
Date: Sun, 17 Nov 2013 22:59:04 -0500
Subject: [Bitcoin-development] Bitcoin Network Simulator
In-Reply-To: <63B3BF21-C487-4D62-8BB8-18C90F2C3F4C@rbrune.de>
References: <63B3BF21-C487-4D62-8BB8-18C90F2C3F4C@rbrune.de>
Message-ID: <CANOOu=9CwTOi37FJXXNjMirN9RhYdF=W21DV0BzKV9HCCksJBg@mail.gmail.com>

Beat me to it. My own implementation is here:
https://github.com/christophebiocca/bitcoin-network-simulator
Same basic principles, but I've been following the protocol message
structure as much as possible/Theoretical support for transaction
propagation (I really want to see zero-conf stuff, and whether it works).
Running a network of 1000 full nodes (with 100 miners) for a week of
simulated time (with a normal hashrate) and empty blocks (except for the
coinbase transaction) takes about 30-60 seconds.
Uses nodejs, with the ultimate goal of having a network/chain visualization
running in the browser (with the actual simulation running on a WebWorker
to keep things responsive).


On Sun, Nov 17, 2013 at 11:43 AM, Rafael Brune <mail at rbrune.de> wrote:

> Over the last days I spent some time working on a simple Bitcoin network
> simulator.
> It is a stochastic event-based continuous-time simulation of Bitcoin miners
> exchanging messages and building block chains. It simulates latency,
> bandwidth
> and also verification speed but it currently does not simulate
> propagation/inclusion
> of transactions and instead uses random block sizes.
>
> The simulator includes two examples, one for a 51% attack and the other is
> an
> implementation of selfish mining (pretty much 1:1 as described in the
> paper).
> With the random parameters I picked it seems like it pays off to mine
> selfish with
> >=30% of the hashing power - but take this with a huge grain of salt as
> this
> is with a very small network and randomly chosen parameters. And of course
> it
> is not a perfect replica of the real world network.
>
> Since this is based on my understanding of the Bitcoin network and
> protocol it
> would be great if others would take a look and help improve it.
>
> The project can be found on my github:
> https://github.com/rbrune/btcsim
>
> Regards,
>  Rafael Brune
>
> ------------------------------------------------------------------------------
> DreamFactory - Open Source REST & JSON Services for HTML5 & Native Apps
> OAuth, Users, Roles, SQL, NoSQL, BLOB Storage and External API Access
> Free app hosting. Or install the open source package on any LAMP server.
> Sign up and see examples for AngularJS, jQuery, Sencha Touch and Native!
> http://pubads.g.doubleclick.net/gampad/clk?id=63469471&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131117/0e733ccf/attachment.html>

From wtogami at gmail.com  Mon Nov 18 11:29:04 2013
From: wtogami at gmail.com (Warren Togami Jr.)
Date: Mon, 18 Nov 2013 01:29:04 -1000
Subject: [Bitcoin-development] Bounty: MacOS X Bitcoin Corruption Issue
Message-ID: <CAEz79PrGSO+LHb4PoU3VYF4SNajhEqXTXODqc1A_QV3ywdH7KQ@mail.gmail.com>

https://bitcointalk.org/index.php?topic=337294
Since 0.8.x many MacOS X users have been experiencing periodic leveldb data
corruption issues.  While not fatal, it is very time consuming to recover
from this corruption and upsetting that it happens often for some users.
 There have been three commits in Bitcoin that attempted to fix this, one
fsync fix in leveldb, one in util.h, and a leveldb version upgrade to 1.13.
 My guess is that one of these commits fixed other corruption, but there
remains at least one mysterious corruption issue on Mac where leveldb is
corrupted after a clean shutdown of Bitcoin-Qt.  After 5+ months we still
do not know why some users never see corruption while it happens often for
others.

Gavin has pledged 5 BTC, and Litecoin Dev pledges 200 LTC to start this
bounty.  This thread has public addresses for Mac users to donate to
increase the incentive to fix this issue sooner.

To help please contribute detailed bug reports or links to more relevant
background information pertaining to this corruption issue.

https://bitcointalk.org/index.php?topic=320695.0
For testing purposes, please use either Bitcoin git master or Bitcoin 0.8.5
OMG3, both of which contain all of the relevant leveldb fixes.  Testing
without those fixes will not be helpful at this point.

Warren
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131118/5f66c79a/attachment.html>

From pete at petertodd.org  Tue Nov 19 11:00:23 2013
From: pete at petertodd.org (Peter Todd)
Date: Tue, 19 Nov 2013 06:00:23 -0500
Subject: [Bitcoin-development] Disentangling Crypto-Coin Mining:
 Timestamping, Proof-of-Publication, and Validation
Message-ID: <20131119110023.GA24068@savin>

In the design of Bitcoin mining serves two fundemental purposes:
proof-of-publication and order consensus.  Bitcoin's design entangles
these fundemental purposes with other goals, such as validation and
initial coin distribution. This leads to a design that is fundementally
unscalable, albeit effective on a small scale. Here we show how these
purposes do not need to be entangled together, and how by disentangling
them we can achieve better scalability and validation of the system as a
whole.

Let's first look at what role each of those purposes plays:

* Proof-of-publication

The fundemental problem Bitcoin solves is the double-spend problem.
Alice has some Bitcoins, and she wants to give them to Bob. She does
this by signing a digital message, a transaction, authorizing her coins
to be assigned to Bob. However, Bob has no way of knowing if Alice has
signed a conflicting digital message assigning her coins to Charlie
instead.

Bitcoin solves this problem by providing a way for Alice and Bob to
agree on a common place where *all* transactions will be published, the
blockchain. Because the definition of a valid transaction is that it has
been published in the blockchain, Bob can examine the contents of it,
and be confident that no conflicting transaction exists.


* Order consensus

Due to the constraints of physics no decentralized system can provide
instantaneous and reliable proof of publication; for a non-ideal
proof-of-publication system to be useful to solve the double-spend
problem we need to come to a consensus about the order in which data was
published. Once an order has been established, subsequent
double-spending transactions can be declared invalid.

Note that time itself isn't directly required, only the order of
transactions needs to be agreed upon.


* Why validation is an optional optimization

Given only proof-of-publication, and a consensus on the order of
transactions, can we make a succesful crypto-coin system? Surprisingly,
the answere is yes!

Suppose the rules of Bitcoin allowed blocks to contain invalid
transactions, in fact, suppose miners did no verification what-so-ever
of the contents of the blocks they mined. Could Bob still be confident
in the coins he received? Absolutely. There is consensus that the
transaction sending coins to Bob's came first and all prior transactions
can be verified as valid by checking the entire blockchain. In Bitcoin
all full nodes do this and Bitcoin could succesfully operate on that
model.

What can't be supported in this model is SPV clients: the existance of a
transaction in a block tells you nothing about its validity, so no
compact proof can be made.

Real-world examples of this issue can be found in the parasitic
consensus system Mastercoin, and to a lesser extent Colored Coins: the
former uses Bitcoin as a proof-of-publication, applying it's own
independent set of rules to that published data. The latter tracks the
transfer of assets in a way that takes advantage of the Bitcoin
validation rules, but any given txout can only be proven to represent a
particular asset with a full chain of transfers back to the asset
genesis. It's notable that proponents of colored coins have proposed
that rules to validate colored coins be added to Bitcoin to make such
lengthy proofs not required.(1)


* What is the minimum domain for anti-double-spend proof-of-publication?

Answer: a single txout.

So what do we mean by "domain" here? In the existing Bitcoin system,
modulo validation, what Alice has proven to Bob is that an entire
transaction has been published. But that's not actually what Bob wants
to know: he only wants to be sure that no transaction inputs, that is
the CTxIn data structure containing a valid scriptSig and reference to a
previous output, have been published that spend outputs of the
transaction he is accepting from Alice. Put more simply, he doesn't care
where a double-spending transaction sends the money, he only cares that
it exists at all.

Suppose the blockchain consisted of blocks that only contained
information on the transaction outputs spent by that block; essentially
a block is a list of CTxIn's. We also, add a third field to the existing
CTxIn structure, hashTx, which commits to the rest of the transaction
spending that txout.

If we sort the CTxIn's in each block by the hash of the *transaction
output being spent* and commit to them with a merkle tree, Bob can now
determine if Alice's transaction is valid by checking the blockchain for
blocks that contain a conflicting spend of any of the inputs to that
transaction. For each block the proof that the block does not contain a
given spend is log2(n) in size.

Put another way, Bob needs proof that some data, a valid CTxIn spending
some CTxOut, has never been published before. He only cares about that
particular CTxOut, so the "publication domain" he is interested in is
that single CTxOut. (note that we are considering a CTxIn as valid if
its scriptSig satisfies the prevout's scriptPubKey; the rest of the
transaction may be invalid for other reasons)

Conversely a transaction is only considered to be valid if all CTxIn's
in that transaction have been succesfully committed to the blockchain
proper; there must be proof that every CTxIn has been published.

Note the parallels to the authors TXO commitments proposal: where TXO
commitments commit to the outputs of every transaction in each block,
here we are committing to the inputs of all transactions.


* Transaction validation

Miners still are doing almost no validation in this scheme, other than
the fact that a block is only valid if the data in it follows some
order. Bob still needs to examine the chain of of all transactions to
determine if Alice's payment was valid. However, the information he
needs to do this is greatly diminished: log(n) * m per txout in that
history, with n as the average number of spends in a block, and m the
number of blocks each txout was in existance for.

Of course, a practical implementation of this concept will have to rely
heavily on direct transfer of proof data from payor to payee.


** Privacy

The increased validation effort required on the part of Bob has an
important privacy advantage: whole transactions need never appear in the
blockchain at all. By incorporating a simple nonce into every
transaction blinding the miners have no way of linking CTxIn's to
CTxOut's. This achieves the end goal of Adam Back's blind symmetric
commitments(3) but by leaving data out of the blockchain entirely rather
than blinding it.


* The incentive to share blockchain data

What is the incentive for miners have in the Bitcoin system to share
their blocks? Why not just share the block header? Of course, the
incentive is that unless they share their block data, all other miners
in the system won't build upon their blocks because they have no idea if
they are valid or not.

But here there is no such thing as an invalid block! Blocks are just
arbitrary data with no specific meaning; whether or not the data is
valid in some sense is of no importance to the miner.

We can re-introduce this incentive by using a proof-of-work scheme that
has the requirement of posession of blockchain data. For instance we
could make the underlying computation be simply H(header + all previous
blocks) - without the entire blockchain you would be unable to mine, or
even validate the work done.

Of course this is impractical for a number of reasons. But it's
important to recognize that this simple scheme doesn't make any
compromises about the continual availability of blockchain data, and
thus the ability for users to validate history. Any lesser scheme will
be a trade-off between that guarantee and other objectives.


** Full TxIn set commitments

Since we have to require miners to posess blockchain data, we might as
well make a simple optimization: rather than commit to the CTxIn's in a
single block, commit to multiple blocks.

First, let's require that every CTxIn present in a block be have a valid
scriptSig for the corresponding scriptPubKey. To do this we need for
CTxIn's to commit to the H(txout) they are spending, and include the
CTxOut itself alongside the CTxIn in the block. Our hash commitments are
now chained as follows:

    CTxIn -> CTxOut -> <merkle path> -> CTransaction -> <merkle path> -> CTxIn

Now that we have valid and invalid CTxIn's, we might as well state that
only one valid CTxIn is allowed for a given CTxOut per block; proof that
a transaction is valid now doesn't have to take into account the problem
of an *invalid* CTxIn that you need to prove is invalid and thus can be
ignored. This validation is stateless, requiring only local data, and
still provides for strong privacy.(a) A fraud proof in this scheme is
simply the CTxIn and CTxOut and merkle path, and the code required to
evaluate it is the same code required to evaluate the data in a block.

a) Remember the mention of a per transaction nonce? It can be used
   between the CTxOut and the rest of the CTransaction so that even if
   every CTxIn and CTxOut is known, the actual transactions can't be
   derived.

Now that we have a definition of a valid CTxIn, we can naturally extend
this to define the set of all valid *oldest* CTxIn's. That is for any
given CTxOut, we include the first valid CTxIn found in any block in
this set. This is analogous to the concept of the UTXO set, except that
items can only ever be added to the TxIn set.

As with UTXO commitments we can commit to the state of the TxIn set
using a merkelized radix tree whose tip is committed to by the block
header.

Of course because a block can manipulate the contents of this set in an
invalid way, we've strongly reintroduced the notion of an invalid block,
we've re-introduced the incentive to share blockchain data, and we've
re-introduced the requirement to have the full set of blockchain data to
mine.


*** Mining with incomplete blockchain data

Or have we? This requirement isn't particularly strong as all: if other
miners are usually honest we'll get away with just trusting them to mine
only valid blocks. Meanwhile the TxIn set in merkelized radix tree form
can have items added to it with only the subset of internal nodes
modified by your additions. A miner can easily produce blocks only
containing CTxIn's spending CTxOuts from a subset of the possible
values. Multiple such miners can even co-operate to produce blocks, with
each handling a specific subset, as multiple radix trees are easily
composed.(b)

Note that Bitcoin is even worse in this regard: you don't need any
previous blockchain data at all to create a new block. For instance the
authors proof-of-tx-propagation concept(5) has the serious flaw that
unscrupulous miners can use the proof that other miners are mining
certain transactions as a way to avoid doing any validation themselves.


*** The deletion problem

What happens if a copy of some of the txin set can't be found? With
Bitcoin this isn't an issue in theory - the miners are supposed to never
extend blocks they haven't verified in full and they are supposed to
distribute blocks freely. Not necessarily a perfect assumption(6) but it
mostly holds true.

With any type of sharded blockchain, it is easy to see that assumption
may not hold true. Now rather than a 51% attack in terms of total
hashing power, you could have a "local" attack on some portion of the
commitment set. On the other hand, with the right set of incentives, the
existance of such an attack can be made to imply actual consent by those
owning the coins involved, e.g. through proof-of-stake combined with the
proof-of-work. (perhaps better described as proof-of-consent with
proof-of-work)


1) OP_CHECKCOLORVERIFY: soft-fork for native color coin support,
   https://bitcointalk.org/index.php?topic=253385.0,
   jl2012

2) Merkle tree of open transactions for lite mode?
   https://bitcointalk.org/index.php?topic=21995.0,
   Gregory Maxwell

3) Ultimate blockchain compression w/ trust-free lite nodes
   https://bitcointalk.org/index.php?topic=88208.0
   Alan C. Reiner

4) blind symmetric commitment for stronger byzantine voting resilience,
   http://www.mail-archive.com/bitcoin-development at lists.sourceforge.net/msg02184.html,
   Adam Back

5) Near-block broadcasts for proof of tx propagation,
   http://www.mail-archive.com/bitcoin-development at lists.sourceforge.net/msg02868.html,
   Peter Todd

6) Perverse incentives to withhold blocks
   http://www.mail-archive.com/bitcoin-development at lists.sourceforge.net/msg03200.html
   Peter Todd

-- 
'peter'[:-1]@petertodd.org
0000000000000009f9403506c42540415272f68232a986e8f529d994bc917c1e
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 685 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131119/e1b491fe/attachment.sig>

From laanwj at gmail.com  Tue Nov 19 16:32:55 2013
From: laanwj at gmail.com (Wladimir)
Date: Tue, 19 Nov 2013 17:32:55 +0100
Subject: [Bitcoin-development] Revisiting the BIPS process, a proposal
In-Reply-To: <CAJHLa0MCJzFapBYu+cGcJobeVkuS3yibpgaEJOmEj5-1wWEDYA@mail.gmail.com>
References: <CAJHLa0MCJzFapBYu+cGcJobeVkuS3yibpgaEJOmEj5-1wWEDYA@mail.gmail.com>
Message-ID: <CA+s+GJDnCx4ZT5woovB-MsKfHOqNoC9WefKQ-VMpWHCZrat5Kw@mail.gmail.com>

On Mon, Oct 21, 2013 at 4:30 PM, Jeff Garzik <jgarzik at bitpay.com> wrote:

> BIP drafts are stored in git://github.com/bitcoin/bips.git/drafts/ and
> are not automatically assigned a BIPS number.
>

Are we going to move ahead with this?

If so, I'm volunteering to create the repository and import the current
BIPs from the wiki there (and convert from wiki markup to markdown where
necessary).

2) Time passes.  Software for BIP drafts is developed, tested,
> published, and publicly discussed in a typical open source manner.
>

Personally I think it is useful to have a number as soon as a BIP can be
implemented, even if still in draft status; it gives something to refer to
when mentioning a certain improvement proposal (in commit messages and such
it could be called BIP xxx Draft).
I don't think we are at risk of running out of numbers to assign any time
soon.

Wladimir
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131119/295bc88c/attachment.html>

From drak at zikula.org  Tue Nov 19 16:53:38 2013
From: drak at zikula.org (Drak)
Date: Tue, 19 Nov 2013 16:53:38 +0000
Subject: [Bitcoin-development] Revisiting the BIPS process, a proposal
In-Reply-To: <CA+s+GJDnCx4ZT5woovB-MsKfHOqNoC9WefKQ-VMpWHCZrat5Kw@mail.gmail.com>
References: <CAJHLa0MCJzFapBYu+cGcJobeVkuS3yibpgaEJOmEj5-1wWEDYA@mail.gmail.com>
	<CA+s+GJDnCx4ZT5woovB-MsKfHOqNoC9WefKQ-VMpWHCZrat5Kw@mail.gmail.com>
Message-ID: <CANAnSg1eH8+sY6n4-cptdzS5Qj0aXdN_d8h8B9joyk73HGL6ZA@mail.gmail.com>

On 19 November 2013 16:32, Wladimir <laanwj at gmail.com> wrote:

>
> On Mon, Oct 21, 2013 at 4:30 PM, Jeff Garzik <jgarzik at bitpay.com> wrote:
>
>> BIP drafts are stored in git://github.com/bitcoin/bips.git/drafts/ and
>> are not automatically assigned a BIPS number.
>>
>
> Are we going to move ahead with this?
>
> If so, I'm volunteering to create the repository and import the current
> BIPs from the wiki there (and convert from wiki markup to markdown where
> necessary).
>
> 2) Time passes.  Software for BIP drafts is developed, tested,
>> published, and publicly discussed in a typical open source manner.
>>
>
> Personally I think it is useful to have a number as soon as a BIP can be
> implemented, even if still in draft status; it gives something to refer to
> when mentioning a certain improvement proposal (in commit messages and such
> it could be called BIP xxx Draft).
> I don't think we are at risk of running out of numbers to assign any time
> soon.
>

It's quite normal for standards bodies to allocate numbers when in draft
status. If they don't pass, they don't pass - they are clearly labelled
DRAFTs.

+1 on having things in a github repository. Much better for collaboration,

Drak
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131119/54f8eeca/attachment.html>

From gmaxwell at gmail.com  Tue Nov 19 17:01:26 2013
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Tue, 19 Nov 2013 09:01:26 -0800
Subject: [Bitcoin-development] Revisiting the BIPS process, a proposal
In-Reply-To: <CANAnSg1eH8+sY6n4-cptdzS5Qj0aXdN_d8h8B9joyk73HGL6ZA@mail.gmail.com>
References: <CAJHLa0MCJzFapBYu+cGcJobeVkuS3yibpgaEJOmEj5-1wWEDYA@mail.gmail.com>
	<CA+s+GJDnCx4ZT5woovB-MsKfHOqNoC9WefKQ-VMpWHCZrat5Kw@mail.gmail.com>
	<CANAnSg1eH8+sY6n4-cptdzS5Qj0aXdN_d8h8B9joyk73HGL6ZA@mail.gmail.com>
Message-ID: <CAAS2fgREw+5NWaFVYd9FS-s63_-24tyWsz5_w6yc8+mGnFYUgQ@mail.gmail.com>

On Tue, Nov 19, 2013 at 8:53 AM, Drak <drak at zikula.org> wrote:
> It's quite normal for standards bodies to allocate numbers when in draft
> status. If they don't pass, they don't pass - they are clearly labelled
> DRAFTs.
>
> +1 on having things in a github repository. Much better for collaboration,

The IETF makes a clear distinction between individual proposals and
documents which have been accepted by a working group. The former are
named after their authors.  Work is not assigned a number until it is
complete.

I believe it is important to distinguish complete work that people
should be implementing from things which are incomplete,  and even
more important to distinguish the work of single parties.

Otherwise you're going to get crap like BIP90: "Increase the supply of
Bitcoins to 210 million" being confused as an earnest proposal
supported by many that has traction.



From pete at petertodd.org  Tue Nov 19 17:06:13 2013
From: pete at petertodd.org (Peter Todd)
Date: Tue, 19 Nov 2013 12:06:13 -0500
Subject: [Bitcoin-development] Revisiting the BIPS process, a proposal
In-Reply-To: <CA+s+GJDnCx4ZT5woovB-MsKfHOqNoC9WefKQ-VMpWHCZrat5Kw@mail.gmail.com>
References: <CAJHLa0MCJzFapBYu+cGcJobeVkuS3yibpgaEJOmEj5-1wWEDYA@mail.gmail.com>
	<CA+s+GJDnCx4ZT5woovB-MsKfHOqNoC9WefKQ-VMpWHCZrat5Kw@mail.gmail.com>
Message-ID: <20131119170612.GA30105@petertodd.org>

On Tue, Nov 19, 2013 at 05:32:55PM +0100, Wladimir wrote:
> On Mon, Oct 21, 2013 at 4:30 PM, Jeff Garzik <jgarzik at bitpay.com> wrote:
> 
> > BIP drafts are stored in git://github.com/bitcoin/bips.git/drafts/ and
> > are not automatically assigned a BIPS number.
> >
> 
> Are we going to move ahead with this?
> 
> If so, I'm volunteering to create the repository and import the current
> BIPs from the wiki there (and convert from wiki markup to markdown where
> necessary).

I already did that:

https://github.com/petertodd/bips

GitHub can render MediaWiki just fine, so I think leaving the BIPs as
MediaWiki is the way to go. New BIPs may want to use either markdown or
MediaWiki - the latter has advantages in terms of formatting
capabilities over the former, particularly when math needs to be
displayed.

-- 
'peter'[:-1]@petertodd.org
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 490 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131119/8fb8fb48/attachment.sig>

From drak at zikula.org  Tue Nov 19 17:07:58 2013
From: drak at zikula.org (Drak)
Date: Tue, 19 Nov 2013 17:07:58 +0000
Subject: [Bitcoin-development] Revisiting the BIPS process, a proposal
In-Reply-To: <CAAS2fgREw+5NWaFVYd9FS-s63_-24tyWsz5_w6yc8+mGnFYUgQ@mail.gmail.com>
References: <CAJHLa0MCJzFapBYu+cGcJobeVkuS3yibpgaEJOmEj5-1wWEDYA@mail.gmail.com>
	<CA+s+GJDnCx4ZT5woovB-MsKfHOqNoC9WefKQ-VMpWHCZrat5Kw@mail.gmail.com>
	<CANAnSg1eH8+sY6n4-cptdzS5Qj0aXdN_d8h8B9joyk73HGL6ZA@mail.gmail.com>
	<CAAS2fgREw+5NWaFVYd9FS-s63_-24tyWsz5_w6yc8+mGnFYUgQ@mail.gmail.com>
Message-ID: <CANAnSg18FWEQqfqMMY_3XYeLcZ0NJN_1S5QaR0mbp34ZHqM0hg@mail.gmail.com>

On 19 November 2013 17:01, Gregory Maxwell <gmaxwell at gmail.com> wrote:

> On Tue, Nov 19, 2013 at 8:53 AM, Drak <drak at zikula.org> wrote:
> > It's quite normal for standards bodies to allocate numbers when in draft
> > status. If they don't pass, they don't pass - they are clearly labelled
> > DRAFTs.
> >
> > +1 on having things in a github repository. Much better for
> collaboration,
>
> The IETF makes a clear distinction between individual proposals and
> documents which have been accepted by a working group. The former are
> named after their authors.  Work is not assigned a number until it is
> complete.
>
> I believe it is important to distinguish complete work that people
> should be implementing from things which are incomplete,  and even
> more important to distinguish the work of single parties.
>
> Otherwise you're going to get crap like BIP90: "Increase the supply of
> Bitcoins to 210 million" being confused as an earnest proposal
> supported by many that has traction.
>

I wasnt suggesting people add drafts willy nilly to the repository.
When working on a proposal you can work on it in your own fork and create a
PR. When it's ready to be accepted as a working draft by the WG, then it
can be merged into the draft folder. At which point, PRs are made to that
draft copy until it gets into a ready state to become final. If passed,
it's moved to the accepted/ folder.

This way random BIPS cannot be added to the drafts/ folder in the official
repo. They are only added once they are accepted as a working draft
proposal by Gavin or whatever. Now you get all the niceties of github
workflow for collaboration and tweaking of the draft proposal.

Drak
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131119/ca9c1e2a/attachment.html>

From laanwj at gmail.com  Tue Nov 19 17:21:50 2013
From: laanwj at gmail.com (Wladimir)
Date: Tue, 19 Nov 2013 18:21:50 +0100
Subject: [Bitcoin-development] Fwd:  Revisiting the BIPS process, a proposal
In-Reply-To: <CA+s+GJA=p+yvoJqUAMQQRcfYK1B8eMVSJDWaXW8o+X5dzCXkdA@mail.gmail.com>
References: <CAJHLa0MCJzFapBYu+cGcJobeVkuS3yibpgaEJOmEj5-1wWEDYA@mail.gmail.com>
	<CA+s+GJDnCx4ZT5woovB-MsKfHOqNoC9WefKQ-VMpWHCZrat5Kw@mail.gmail.com>
	<20131119170612.GA30105@petertodd.org>
	<CA+s+GJA=p+yvoJqUAMQQRcfYK1B8eMVSJDWaXW8o+X5dzCXkdA@mail.gmail.com>
Message-ID: <CA+s+GJDV0R=GjbDwyWMjB85E8CT28os0E33rr_u5E1Yw7=v4qg@mail.gmail.com>

On Tue, Nov 19, 2013 at 6:06 PM, Peter Todd <pete at petertodd.org> wrote:

> On Tue, Nov 19, 2013 at 05:32:55PM +0100, Wladimir wrote:
> > On Mon, Oct 21, 2013 at 4:30 PM, Jeff Garzik <jgarzik at bitpay.com> wrote:
> >
> > > BIP drafts are stored in git://github.com/bitcoin/bips.git/drafts/ and
> > > are not automatically assigned a BIPS number.
> > >
> >
> > Are we going to move ahead with this?
> >
> > If so, I'm volunteering to create the repository and import the current
> > BIPs from the wiki there (and convert from wiki markup to markdown where
> > necessary).
>
> I already did that:
>
> https://github.com/petertodd/bips
>

Ok cool, I forked it into https://github.com/bitcoin/bips


> GitHub can render MediaWiki just fine, so I think leaving the BIPs as
> MediaWiki is the way to go. New BIPs may want to use either markdown or
> MediaWiki - the latter has advantages in terms of formatting
> capabilities over the former, particularly when math needs to be
> displayed.
>

Agreed, I had no idea github could do that too.

Wladimir
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131119/5589b9e8/attachment.html>

From laanwj at gmail.com  Tue Nov 19 17:45:36 2013
From: laanwj at gmail.com (Wladimir)
Date: Tue, 19 Nov 2013 18:45:36 +0100
Subject: [Bitcoin-development] Revisiting the BIPS process, a proposal
In-Reply-To: <CAAS2fgREw+5NWaFVYd9FS-s63_-24tyWsz5_w6yc8+mGnFYUgQ@mail.gmail.com>
References: <CAJHLa0MCJzFapBYu+cGcJobeVkuS3yibpgaEJOmEj5-1wWEDYA@mail.gmail.com>
	<CA+s+GJDnCx4ZT5woovB-MsKfHOqNoC9WefKQ-VMpWHCZrat5Kw@mail.gmail.com>
	<CANAnSg1eH8+sY6n4-cptdzS5Qj0aXdN_d8h8B9joyk73HGL6ZA@mail.gmail.com>
	<CAAS2fgREw+5NWaFVYd9FS-s63_-24tyWsz5_w6yc8+mGnFYUgQ@mail.gmail.com>
Message-ID: <CA+s+GJAW9j88VWNgmpXTjeSFOxHHzow82E2pyvyfKr=SRcS-Kg@mail.gmail.com>

On Tue, Nov 19, 2013 at 6:01 PM, Gregory Maxwell <gmaxwell at gmail.com> wrote:

> On Tue, Nov 19, 2013 at 8:53 AM, Drak <drak at zikula.org> wrote:
> > It's quite normal for standards bodies to allocate numbers when in draft
> > status. If they don't pass, they don't pass - they are clearly labelled
> > DRAFTs.
> >
> > +1 on having things in a github repository. Much better for
> collaboration,
>
> The IETF makes a clear distinction between individual proposals and
> documents which have been accepted by a working group. The former are
> named after their authors.  Work is not assigned a number until it is
> complete.
>

Talking about complete, BIP 40 and 41 don't even have an associated
document:
https://github.com/bitcoin/bips
I agree that was over-eager number assigning.

Wladimir
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131119/e8ebcf9a/attachment.html>

From gmaxwell at gmail.com  Tue Nov 19 17:54:34 2013
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Tue, 19 Nov 2013 09:54:34 -0800
Subject: [Bitcoin-development] Revisiting the BIPS process, a proposal
In-Reply-To: <CA+s+GJAW9j88VWNgmpXTjeSFOxHHzow82E2pyvyfKr=SRcS-Kg@mail.gmail.com>
References: <CAJHLa0MCJzFapBYu+cGcJobeVkuS3yibpgaEJOmEj5-1wWEDYA@mail.gmail.com>
	<CA+s+GJDnCx4ZT5woovB-MsKfHOqNoC9WefKQ-VMpWHCZrat5Kw@mail.gmail.com>
	<CANAnSg1eH8+sY6n4-cptdzS5Qj0aXdN_d8h8B9joyk73HGL6ZA@mail.gmail.com>
	<CAAS2fgREw+5NWaFVYd9FS-s63_-24tyWsz5_w6yc8+mGnFYUgQ@mail.gmail.com>
	<CA+s+GJAW9j88VWNgmpXTjeSFOxHHzow82E2pyvyfKr=SRcS-Kg@mail.gmail.com>
Message-ID: <CAAS2fgROsymXnXTrfLTLTQ=EDwaAFu+xrrD4Q-Gye5XWze7vFw@mail.gmail.com>

On Tue, Nov 19, 2013 at 9:45 AM, Wladimir <laanwj at gmail.com> wrote:
> Talking about complete, BIP 40 and 41 don't even have an associated
> document:
> https://github.com/bitcoin/bips
> I agree that was over-eager number assigning.

Maybe!  The subject matter its assigned for is already _widely_
deployed, for better or worse.

(by comparison in the IETF, informational RFCs for already widely
deployed things are issued pretty liberally)

I'm not sure how we should be distinguish BIPs which are documenting
things which are already defacto standards vs ones which are proposing
that people do something new.

Mostly I think we don't want the BIP itself being a lever to force
something down people's throats, but rather the process should help
build consensus and review about how to do something? and then
document that consensus.



From pete at petertodd.org  Wed Nov 20 10:01:08 2013
From: pete at petertodd.org (Peter Todd)
Date: Wed, 20 Nov 2013 05:01:08 -0500
Subject: [Bitcoin-development] Even simpler minimum fee calculation
 formula: f > bounty*fork_rate/average_blocksize
In-Reply-To: <20131115191956.GB29469@petertodd.org>
References: <528367F5.9080303@ceptacle.com> <20131115103246.GB17034@savin>
	<528609E2.2050107@ceptacle.com>
	<20131115191956.GB29469@petertodd.org>
Message-ID: <20131120100108.GA4589@savin>

On Fri, Nov 15, 2013 at 02:19:56PM -0500, Peter Todd wrote:
> On Fri, Nov 15, 2013 at 12:47:46PM +0100, Michael Gronager wrote:
> > -----BEGIN PGP SIGNED MESSAGE-----
> > Hash: SHA1
> > 
> > On 15/11/13, 11:32 , Peter Todd wrote:
> > 
> > > alpha = (1/113)*600s/134kBytes = 39.62uS/byte = 24kB/second
> > > 
> > > Which is atrocious... 
> > 
> > alpha = P_fork*t_block/S = 1/113*454000/134 = 29ms/kb
> 
> Huh? Where did 454000 come from?

Oh right, you're using the actual block interval, not the steady state
one.

-- 
'peter'[:-1]@petertodd.org
00000000000000056032432f186a8276d3feecb805d064c1def85905670a453b
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 685 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131120/d595d74c/attachment.sig>

From mike at plan99.net  Thu Nov 21 13:48:10 2013
From: mike at plan99.net (Mike Hearn)
Date: Thu, 21 Nov 2013 14:48:10 +0100
Subject: [Bitcoin-development] Who or what is /Satoshi:0.8.99/Gangnam
	Style:2.1/ ?
Message-ID: <CANEZrP3Amb+vBDR-JyVLDmDy9ewF8DQFVDJgOEg4izhTaR7hVw@mail.gmail.com>

I added some additional logging to my node and ran it for a few days.
There's a pull req open for my extra logging, it is quite trivial. Here's
what it looks like:

2013-11-21 13:41:04 AcceptToMemoryPool:
5.9.24.81:7834/Satoshi:0.8.99/Gangnam Style:2.1/ : accepted
2d1bbcc2bf64dfcb57a2f0180b2607a48a34de4422c446929b26b190083bbfe7 (poolsz
2087)
2013-11-21 13:41:05 AcceptToMemoryPool:
198.12.127.2:29057/Satoshi:0.8.99/Gangnam Style:2.1/ : accepted
28bb94978bdaa224faeafa95d03a0c4f5743396d6f592469c5ac2b64184ac716 (poolsz
2088)
2013-11-21 13:41:06 ERROR: AcceptToMemoryPool : nonstandard transaction:
dust
2013-11-21 13:41:06
42323d9553e4c592d27765dc3ef9152c186cb7d67b08d783d72974a56085032d from
82.68.68.254:39232 /Satoshi:0.8.1/ was not accepted into the memory pool:
dust
2013-11-21 13:41:06 AcceptToMemoryPool:
198.12.127.2:29057/Satoshi:0.8.99/Gangnam Style:2.1/ : accepted
2fdb19e5e87d518b7b6bb7371d547a5f60c2bb056ba4522190460f0bc41b51fb (poolsz
2089)
2013-11-21 13:41:08 AcceptToMemoryPool:
5.9.24.81:7834/Satoshi:0.8.99/Gangnam Style:2.1/ : accepted
52c8ed6a48f89d48b1152b67ac0b718a7aadb5f9a0c70c18b9b2fed058ca3323 (poolsz
2090)
2013-11-21 13:41:08 AcceptToMemoryPool:
198.12.127.2:29057/Satoshi:0.8.99/Gangnam Style:2.1/ : accepted
980bbdbd4a6b365fa6f13fb5247eb6cb1e54847e490c3b7c3026d1548fb9efc6 (poolsz
2091)
2013-11-21 13:41:08 AcceptToMemoryPool:
64.120.253.194:60896/Satoshi:0.8.99/Gangnam Style:2.0/ : accepted
03f79c611bbdc1afa7afa67eb0bbd4d8bc86a730a7066622e2709ae506e61e0f (poolsz
2092)
2013-11-21 13:41:10 AcceptToMemoryPool:
5.9.24.81:7834/Satoshi:0.8.99/Gangnam Style:2.1/ : accepted
af8096ad637af1ca022a5146e07cf1fc6bfbec877935f9e114b279fcfe26c06d (poolsz
2093)
2013-11-21 13:41:10 AcceptToMemoryPool:
5.9.24.81:7834/Satoshi:0.8.99/Gangnam Style:2.1/ : accepted
751c2415d058d45ca602fdf1b6490edb6e57fc718e914d628c11b17e25aac834 (poolsz
2094)



Despite that I have 87 connections from regular nodes, virtually all
transactions seen by my node are being announced by this modified software,
which appears to run on several different machines.

I am wondering if anyone out there knows/owns these nodes and if they are
relaying transactions without checking their validity. That seems the most
likely reason for how they are always able to win the race to be the first
to announce to my node.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131121/c281e9e8/attachment.html>

From ayeowch at gmail.com  Thu Nov 21 13:55:25 2013
From: ayeowch at gmail.com (Addy Yeow)
Date: Fri, 22 Nov 2013 00:55:25 +1100
Subject: [Bitcoin-development] Who or what is /Satoshi:0.8.99/Gangnam
 Style:2.1/ ?
In-Reply-To: <CANEZrP3Amb+vBDR-JyVLDmDy9ewF8DQFVDJgOEg4izhTaR7hVw@mail.gmail.com>
References: <CANEZrP3Amb+vBDR-JyVLDmDy9ewF8DQFVDJgOEg4izhTaR7hVw@mail.gmail.com>
Message-ID: <CAA3bHny27fRZNNYMtqa85wrr7e3_EUgxsDFba6+E=QOW1o+mqw@mail.gmail.com>

Try https://bitcointalk.org/index.php?action=profile;u=19897?




On Fri, Nov 22, 2013 at 12:48 AM, Mike Hearn <mike at plan99.net> wrote:

> I added some additional logging to my node and ran it for a few days.
> There's a pull req open for my extra logging, it is quite trivial. Here's
> what it looks like:
>
> 2013-11-21 13:41:04 AcceptToMemoryPool: 5.9.24.81:7834/Satoshi:0.8.99/Gangnam Style:2.1/ : accepted
> 2d1bbcc2bf64dfcb57a2f0180b2607a48a34de4422c446929b26b190083bbfe7 (poolsz
> 2087)
> 2013-11-21 13:41:05 AcceptToMemoryPool: 198.12.127.2:29057/Satoshi:0.8.99/Gangnam Style:2.1/ : accepted
> 28bb94978bdaa224faeafa95d03a0c4f5743396d6f592469c5ac2b64184ac716 (poolsz
> 2088)
> 2013-11-21 13:41:06 ERROR: AcceptToMemoryPool : nonstandard transaction:
> dust
> 2013-11-21 13:41:06
> 42323d9553e4c592d27765dc3ef9152c186cb7d67b08d783d72974a56085032d from
> 82.68.68.254:39232 /Satoshi:0.8.1/ was not accepted into the memory pool:
> dust
> 2013-11-21 13:41:06 AcceptToMemoryPool: 198.12.127.2:29057/Satoshi:0.8.99/Gangnam Style:2.1/ : accepted
> 2fdb19e5e87d518b7b6bb7371d547a5f60c2bb056ba4522190460f0bc41b51fb (poolsz
> 2089)
> 2013-11-21 13:41:08 AcceptToMemoryPool: 5.9.24.81:7834/Satoshi:0.8.99/Gangnam Style:2.1/ : accepted
> 52c8ed6a48f89d48b1152b67ac0b718a7aadb5f9a0c70c18b9b2fed058ca3323 (poolsz
> 2090)
> 2013-11-21 13:41:08 AcceptToMemoryPool: 198.12.127.2:29057/Satoshi:0.8.99/Gangnam Style:2.1/ : accepted
> 980bbdbd4a6b365fa6f13fb5247eb6cb1e54847e490c3b7c3026d1548fb9efc6 (poolsz
> 2091)
> 2013-11-21 13:41:08 AcceptToMemoryPool: 64.120.253.194:60896/Satoshi:0.8.99/Gangnam Style:2.0/ : accepted
> 03f79c611bbdc1afa7afa67eb0bbd4d8bc86a730a7066622e2709ae506e61e0f (poolsz
> 2092)
> 2013-11-21 13:41:10 AcceptToMemoryPool: 5.9.24.81:7834/Satoshi:0.8.99/Gangnam Style:2.1/ : accepted
> af8096ad637af1ca022a5146e07cf1fc6bfbec877935f9e114b279fcfe26c06d (poolsz
> 2093)
> 2013-11-21 13:41:10 AcceptToMemoryPool: 5.9.24.81:7834/Satoshi:0.8.99/Gangnam Style:2.1/ : accepted
> 751c2415d058d45ca602fdf1b6490edb6e57fc718e914d628c11b17e25aac834 (poolsz
> 2094)
>
>
>
> Despite that I have 87 connections from regular nodes, virtually all
> transactions seen by my node are being announced by this modified software,
> which appears to run on several different machines.
>
> I am wondering if anyone out there knows/owns these nodes and if they are
> relaying transactions without checking their validity. That seems the most
> likely reason for how they are always able to win the race to be the first
> to announce to my node.
>
>
> ------------------------------------------------------------------------------
> Shape the Mobile Experience: Free Subscription
> Software experts and developers: Be at the forefront of tech innovation.
> Intel(R) Software Adrenaline delivers strategic insight and game-changing
> conversations that shape the rapidly evolving mobile landscape. Sign up
> now.
> http://pubads.g.doubleclick.net/gampad/clk?id=63431311&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131122/73033547/attachment.html>

From mike at plan99.net  Thu Nov 21 14:47:59 2013
From: mike at plan99.net (Mike Hearn)
Date: Thu, 21 Nov 2013 15:47:59 +0100
Subject: [Bitcoin-development] Who or what is /Satoshi:0.8.99/Gangnam
 Style:2.1/ ?
In-Reply-To: <CAA3bHny27fRZNNYMtqa85wrr7e3_EUgxsDFba6+E=QOW1o+mqw@mail.gmail.com>
References: <CANEZrP3Amb+vBDR-JyVLDmDy9ewF8DQFVDJgOEg4izhTaR7hVw@mail.gmail.com>
	<CAA3bHny27fRZNNYMtqa85wrr7e3_EUgxsDFba6+E=QOW1o+mqw@mail.gmail.com>
Message-ID: <CANEZrP1ZoU5DXf=4arxcy++3P1z2jHFZWCn1R=JuYxQDEX4W1Q@mail.gmail.com>

Thanks. By the way, your bitnodes site is excellent. Thanks for doing that.
If you're in the mood for extending it, it'd be great to gather and chart
data on block and tx propagation times.

Do you think the recent explosion in running nodes is real, or due to some
kind of custom experimental thing?


On Thu, Nov 21, 2013 at 2:55 PM, Addy Yeow <ayeowch at gmail.com> wrote:

> Try https://bitcointalk.org/index.php?action=profile;u=19897?
>
>
>
>
> On Fri, Nov 22, 2013 at 12:48 AM, Mike Hearn <mike at plan99.net> wrote:
>
>> I added some additional logging to my node and ran it for a few days.
>> There's a pull req open for my extra logging, it is quite trivial. Here's
>> what it looks like:
>>
>> 2013-11-21 13:41:04 AcceptToMemoryPool: 5.9.24.81:7834/Satoshi:0.8.99/Gangnam Style:2.1/ : accepted
>> 2d1bbcc2bf64dfcb57a2f0180b2607a48a34de4422c446929b26b190083bbfe7 (poolsz
>> 2087)
>> 2013-11-21 13:41:05 AcceptToMemoryPool: 198.12.127.2:29057/Satoshi:0.8.99/Gangnam Style:2.1/ : accepted
>> 28bb94978bdaa224faeafa95d03a0c4f5743396d6f592469c5ac2b64184ac716 (poolsz
>> 2088)
>> 2013-11-21 13:41:06 ERROR: AcceptToMemoryPool : nonstandard transaction:
>> dust
>> 2013-11-21 13:41:06
>> 42323d9553e4c592d27765dc3ef9152c186cb7d67b08d783d72974a56085032d from
>> 82.68.68.254:39232 /Satoshi:0.8.1/ was not accepted into the memory
>> pool: dust
>> 2013-11-21 13:41:06 AcceptToMemoryPool: 198.12.127.2:29057/Satoshi:0.8.99/Gangnam Style:2.1/ : accepted
>> 2fdb19e5e87d518b7b6bb7371d547a5f60c2bb056ba4522190460f0bc41b51fb (poolsz
>> 2089)
>> 2013-11-21 13:41:08 AcceptToMemoryPool: 5.9.24.81:7834/Satoshi:0.8.99/Gangnam Style:2.1/ : accepted
>> 52c8ed6a48f89d48b1152b67ac0b718a7aadb5f9a0c70c18b9b2fed058ca3323 (poolsz
>> 2090)
>> 2013-11-21 13:41:08 AcceptToMemoryPool: 198.12.127.2:29057/Satoshi:0.8.99/Gangnam Style:2.1/ : accepted
>> 980bbdbd4a6b365fa6f13fb5247eb6cb1e54847e490c3b7c3026d1548fb9efc6 (poolsz
>> 2091)
>> 2013-11-21 13:41:08 AcceptToMemoryPool: 64.120.253.194:60896/Satoshi:0.8.99/Gangnam Style:2.0/ : accepted
>> 03f79c611bbdc1afa7afa67eb0bbd4d8bc86a730a7066622e2709ae506e61e0f (poolsz
>> 2092)
>> 2013-11-21 13:41:10 AcceptToMemoryPool: 5.9.24.81:7834/Satoshi:0.8.99/Gangnam Style:2.1/ : accepted
>> af8096ad637af1ca022a5146e07cf1fc6bfbec877935f9e114b279fcfe26c06d (poolsz
>> 2093)
>> 2013-11-21 13:41:10 AcceptToMemoryPool: 5.9.24.81:7834/Satoshi:0.8.99/Gangnam Style:2.1/ : accepted
>> 751c2415d058d45ca602fdf1b6490edb6e57fc718e914d628c11b17e25aac834 (poolsz
>> 2094)
>>
>>
>>
>> Despite that I have 87 connections from regular nodes, virtually all
>> transactions seen by my node are being announced by this modified software,
>> which appears to run on several different machines.
>>
>> I am wondering if anyone out there knows/owns these nodes and if they are
>> relaying transactions without checking their validity. That seems the most
>> likely reason for how they are always able to win the race to be the first
>> to announce to my node.
>>
>>
>> ------------------------------------------------------------------------------
>> Shape the Mobile Experience: Free Subscription
>> Software experts and developers: Be at the forefront of tech innovation.
>> Intel(R) Software Adrenaline delivers strategic insight and game-changing
>> conversations that shape the rapidly evolving mobile landscape. Sign up
>> now.
>>
>> http://pubads.g.doubleclick.net/gampad/clk?id=63431311&iu=/4140/ostg.clktrk
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131121/9f4acdfd/attachment.html>

From arthur.gervais at inf.ethz.ch  Thu Nov 21 15:02:27 2013
From: arthur.gervais at inf.ethz.ch (Arthur Gervais)
Date: Thu, 21 Nov 2013 16:02:27 +0100
Subject: [Bitcoin-development] Who or what is /Satoshi:0.8.99/Gangnam
 Style:2.1/ ?
In-Reply-To: <CAA3bHny27fRZNNYMtqa85wrr7e3_EUgxsDFba6+E=QOW1o+mqw@mail.gmail.com>
References: <CANEZrP3Amb+vBDR-JyVLDmDy9ewF8DQFVDJgOEg4izhTaR7hVw@mail.gmail.com>
	<CAA3bHny27fRZNNYMtqa85wrr7e3_EUgxsDFba6+E=QOW1o+mqw@mail.gmail.com>
Message-ID: <528E2083.8060708@inf.ethz.ch>

Hello Mike,

You can see the three nodes from nogleg on
https://blockchain.info/hub-nodes. They also relay the most to
blockchain.info.

Arthur

On 21/11/13 14:55, Addy Yeow wrote:
> Try https://bitcointalk.org/index.php?action=profile;u=19897?
> 
> 
> 
> 
> On Fri, Nov 22, 2013 at 12:48 AM, Mike Hearn <mike at plan99.net
> <mailto:mike at plan99.net>> wrote:
> 
>     I added some additional logging to my node and ran it for a few
>     days. There's a pull req open for my extra logging, it is quite
>     trivial. Here's what it looks like:
> 
>     2013-11-21 13:41:04 AcceptToMemoryPool: 5.9.24.81:7834
>     <http://5.9.24.81:7834> /Satoshi:0.8.99/Gangnam Style:2.1/ :
>     accepted
>     2d1bbcc2bf64dfcb57a2f0180b2607a48a34de4422c446929b26b190083bbfe7
>     (poolsz 2087)
>     2013-11-21 13:41:05 AcceptToMemoryPool: 198.12.127.2:29057
>     <http://198.12.127.2:29057> /Satoshi:0.8.99/Gangnam Style:2.1/ :
>     accepted
>     28bb94978bdaa224faeafa95d03a0c4f5743396d6f592469c5ac2b64184ac716
>     (poolsz 2088)
>     2013-11-21 13:41:06 ERROR: AcceptToMemoryPool : nonstandard
>     transaction: dust
>     2013-11-21 13:41:06
>     42323d9553e4c592d27765dc3ef9152c186cb7d67b08d783d72974a56085032d
>     from 82.68.68.254:39232 <http://82.68.68.254:39232> /Satoshi:0.8.1/
>     was not accepted into the memory pool: dust
>     2013-11-21 13:41:06 AcceptToMemoryPool: 198.12.127.2:29057
>     <http://198.12.127.2:29057> /Satoshi:0.8.99/Gangnam Style:2.1/ :
>     accepted
>     2fdb19e5e87d518b7b6bb7371d547a5f60c2bb056ba4522190460f0bc41b51fb
>     (poolsz 2089)
>     2013-11-21 13:41:08 AcceptToMemoryPool: 5.9.24.81:7834
>     <http://5.9.24.81:7834> /Satoshi:0.8.99/Gangnam Style:2.1/ :
>     accepted
>     52c8ed6a48f89d48b1152b67ac0b718a7aadb5f9a0c70c18b9b2fed058ca3323
>     (poolsz 2090)
>     2013-11-21 13:41:08 AcceptToMemoryPool: 198.12.127.2:29057
>     <http://198.12.127.2:29057> /Satoshi:0.8.99/Gangnam Style:2.1/ :
>     accepted
>     980bbdbd4a6b365fa6f13fb5247eb6cb1e54847e490c3b7c3026d1548fb9efc6
>     (poolsz 2091)
>     2013-11-21 13:41:08 AcceptToMemoryPool: 64.120.253.194:60896
>     <http://64.120.253.194:60896> /Satoshi:0.8.99/Gangnam Style:2.0/ :
>     accepted
>     03f79c611bbdc1afa7afa67eb0bbd4d8bc86a730a7066622e2709ae506e61e0f
>     (poolsz 2092)
>     2013-11-21 13:41:10 AcceptToMemoryPool: 5.9.24.81:7834
>     <http://5.9.24.81:7834> /Satoshi:0.8.99/Gangnam Style:2.1/ :
>     accepted
>     af8096ad637af1ca022a5146e07cf1fc6bfbec877935f9e114b279fcfe26c06d
>     (poolsz 2093)
>     2013-11-21 13:41:10 AcceptToMemoryPool: 5.9.24.81:7834
>     <http://5.9.24.81:7834> /Satoshi:0.8.99/Gangnam Style:2.1/ :
>     accepted
>     751c2415d058d45ca602fdf1b6490edb6e57fc718e914d628c11b17e25aac834
>     (poolsz 2094)
> 
> 
> 
>     Despite that I have 87 connections from regular nodes, virtually all
>     transactions seen by my node are being announced by this modified
>     software, which appears to run on several different machines.
> 
>     I am wondering if anyone out there knows/owns these nodes and if
>     they are relaying transactions without checking their validity. That
>     seems the most likely reason for how they are always able to win the
>     race to be the first to announce to my node.
> 
>     ------------------------------------------------------------------------------
>     Shape the Mobile Experience: Free Subscription
>     Software experts and developers: Be at the forefront of tech innovation.
>     Intel(R) Software Adrenaline delivers strategic insight and
>     game-changing
>     conversations that shape the rapidly evolving mobile landscape. Sign
>     up now.
>     http://pubads.g.doubleclick.net/gampad/clk?id=63431311&iu=/4140/ostg.clktrk
>     _______________________________________________
>     Bitcoin-development mailing list
>     Bitcoin-development at lists.sourceforge.net
>     <mailto:Bitcoin-development at lists.sourceforge.net>
>     https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 
> 
> 
> 
> ------------------------------------------------------------------------------
> Shape the Mobile Experience: Free Subscription
> Software experts and developers: Be at the forefront of tech innovation.
> Intel(R) Software Adrenaline delivers strategic insight and game-changing 
> conversations that shape the rapidly evolving mobile landscape. Sign up now. 
> http://pubads.g.doubleclick.net/gampad/clk?id=63431311&iu=/4140/ostg.clktrk
> 
> 
> 
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 




From jgarzik at bitpay.com  Thu Nov 21 15:27:30 2013
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Thu, 21 Nov 2013 10:27:30 -0500
Subject: [Bitcoin-development] Who or what is /Satoshi:0.8.99/Gangnam
 Style:2.1/ ?
In-Reply-To: <CANEZrP3Amb+vBDR-JyVLDmDy9ewF8DQFVDJgOEg4izhTaR7hVw@mail.gmail.com>
References: <CANEZrP3Amb+vBDR-JyVLDmDy9ewF8DQFVDJgOEg4izhTaR7hVw@mail.gmail.com>
Message-ID: <CAJHLa0P=BBZDu8uZPptq9KBVoZf8Z4kmpNkXfgYXuMxeD05nAQ@mail.gmail.com>

Is that Matt's relay, which has reduced validity checking?


On Thu, Nov 21, 2013 at 8:48 AM, Mike Hearn <mike at plan99.net> wrote:
> I added some additional logging to my node and ran it for a few days.
> There's a pull req open for my extra logging, it is quite trivial. Here's
> what it looks like:
>
> 2013-11-21 13:41:04 AcceptToMemoryPool: 5.9.24.81:7834
> /Satoshi:0.8.99/Gangnam Style:2.1/ : accepted
> 2d1bbcc2bf64dfcb57a2f0180b2607a48a34de4422c446929b26b190083bbfe7 (poolsz
> 2087)
> 2013-11-21 13:41:05 AcceptToMemoryPool: 198.12.127.2:29057
> /Satoshi:0.8.99/Gangnam Style:2.1/ : accepted
> 28bb94978bdaa224faeafa95d03a0c4f5743396d6f592469c5ac2b64184ac716 (poolsz
> 2088)
> 2013-11-21 13:41:06 ERROR: AcceptToMemoryPool : nonstandard transaction:
> dust
> 2013-11-21 13:41:06
> 42323d9553e4c592d27765dc3ef9152c186cb7d67b08d783d72974a56085032d from
> 82.68.68.254:39232 /Satoshi:0.8.1/ was not accepted into the memory pool:
> dust
> 2013-11-21 13:41:06 AcceptToMemoryPool: 198.12.127.2:29057
> /Satoshi:0.8.99/Gangnam Style:2.1/ : accepted
> 2fdb19e5e87d518b7b6bb7371d547a5f60c2bb056ba4522190460f0bc41b51fb (poolsz
> 2089)
> 2013-11-21 13:41:08 AcceptToMemoryPool: 5.9.24.81:7834
> /Satoshi:0.8.99/Gangnam Style:2.1/ : accepted
> 52c8ed6a48f89d48b1152b67ac0b718a7aadb5f9a0c70c18b9b2fed058ca3323 (poolsz
> 2090)
> 2013-11-21 13:41:08 AcceptToMemoryPool: 198.12.127.2:29057
> /Satoshi:0.8.99/Gangnam Style:2.1/ : accepted
> 980bbdbd4a6b365fa6f13fb5247eb6cb1e54847e490c3b7c3026d1548fb9efc6 (poolsz
> 2091)
> 2013-11-21 13:41:08 AcceptToMemoryPool: 64.120.253.194:60896
> /Satoshi:0.8.99/Gangnam Style:2.0/ : accepted
> 03f79c611bbdc1afa7afa67eb0bbd4d8bc86a730a7066622e2709ae506e61e0f (poolsz
> 2092)
> 2013-11-21 13:41:10 AcceptToMemoryPool: 5.9.24.81:7834
> /Satoshi:0.8.99/Gangnam Style:2.1/ : accepted
> af8096ad637af1ca022a5146e07cf1fc6bfbec877935f9e114b279fcfe26c06d (poolsz
> 2093)
> 2013-11-21 13:41:10 AcceptToMemoryPool: 5.9.24.81:7834
> /Satoshi:0.8.99/Gangnam Style:2.1/ : accepted
> 751c2415d058d45ca602fdf1b6490edb6e57fc718e914d628c11b17e25aac834 (poolsz
> 2094)
>
>
>
> Despite that I have 87 connections from regular nodes, virtually all
> transactions seen by my node are being announced by this modified software,
> which appears to run on several different machines.
>
> I am wondering if anyone out there knows/owns these nodes and if they are
> relaying transactions without checking their validity. That seems the most
> likely reason for how they are always able to win the race to be the first
> to announce to my node.
>
> ------------------------------------------------------------------------------
> Shape the Mobile Experience: Free Subscription
> Software experts and developers: Be at the forefront of tech innovation.
> Intel(R) Software Adrenaline delivers strategic insight and game-changing
> conversations that shape the rapidly evolving mobile landscape. Sign up now.
> http://pubads.g.doubleclick.net/gampad/clk?id=63431311&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>



-- 
Jeff Garzik
Bitcoin core developer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From bitcoin-list at bluematt.me  Thu Nov 21 15:28:58 2013
From: bitcoin-list at bluematt.me (Matt Corallo)
Date: Thu, 21 Nov 2013 10:28:58 -0500
Subject: [Bitcoin-development] Who or what is /Satoshi:0.8.99/Gangnam
 Style:2.1/ ?
In-Reply-To: <CAJHLa0P=BBZDu8uZPptq9KBVoZf8Z4kmpNkXfgYXuMxeD05nAQ@mail.gmail.com>
References: <CANEZrP3Amb+vBDR-JyVLDmDy9ewF8DQFVDJgOEg4izhTaR7hVw@mail.gmail.com>
	<CAJHLa0P=BBZDu8uZPptq9KBVoZf8Z4kmpNkXfgYXuMxeD05nAQ@mail.gmail.com>
Message-ID: <528E26BA.5000804@bluematt.me>

No, mine identifies as BitcoinJ, RelayNode, version string

On 11/21/2013 10:27 AM, Jeff Garzik wrote:
> Is that Matt's relay, which has reduced validity checking?
> 
> 
> On Thu, Nov 21, 2013 at 8:48 AM, Mike Hearn <mike at plan99.net> wrote:
>> I added some additional logging to my node and ran it for a few days.
>> There's a pull req open for my extra logging, it is quite trivial. Here's
>> what it looks like:
>>
>> 2013-11-21 13:41:04 AcceptToMemoryPool: 5.9.24.81:7834
>> /Satoshi:0.8.99/Gangnam Style:2.1/ : accepted
>> 2d1bbcc2bf64dfcb57a2f0180b2607a48a34de4422c446929b26b190083bbfe7 (poolsz
>> 2087)
>> 2013-11-21 13:41:05 AcceptToMemoryPool: 198.12.127.2:29057
>> /Satoshi:0.8.99/Gangnam Style:2.1/ : accepted
>> 28bb94978bdaa224faeafa95d03a0c4f5743396d6f592469c5ac2b64184ac716 (poolsz
>> 2088)
>> 2013-11-21 13:41:06 ERROR: AcceptToMemoryPool : nonstandard transaction:
>> dust
>> 2013-11-21 13:41:06
>> 42323d9553e4c592d27765dc3ef9152c186cb7d67b08d783d72974a56085032d from
>> 82.68.68.254:39232 /Satoshi:0.8.1/ was not accepted into the memory pool:
>> dust
>> 2013-11-21 13:41:06 AcceptToMemoryPool: 198.12.127.2:29057
>> /Satoshi:0.8.99/Gangnam Style:2.1/ : accepted
>> 2fdb19e5e87d518b7b6bb7371d547a5f60c2bb056ba4522190460f0bc41b51fb (poolsz
>> 2089)
>> 2013-11-21 13:41:08 AcceptToMemoryPool: 5.9.24.81:7834
>> /Satoshi:0.8.99/Gangnam Style:2.1/ : accepted
>> 52c8ed6a48f89d48b1152b67ac0b718a7aadb5f9a0c70c18b9b2fed058ca3323 (poolsz
>> 2090)
>> 2013-11-21 13:41:08 AcceptToMemoryPool: 198.12.127.2:29057
>> /Satoshi:0.8.99/Gangnam Style:2.1/ : accepted
>> 980bbdbd4a6b365fa6f13fb5247eb6cb1e54847e490c3b7c3026d1548fb9efc6 (poolsz
>> 2091)
>> 2013-11-21 13:41:08 AcceptToMemoryPool: 64.120.253.194:60896
>> /Satoshi:0.8.99/Gangnam Style:2.0/ : accepted
>> 03f79c611bbdc1afa7afa67eb0bbd4d8bc86a730a7066622e2709ae506e61e0f (poolsz
>> 2092)
>> 2013-11-21 13:41:10 AcceptToMemoryPool: 5.9.24.81:7834
>> /Satoshi:0.8.99/Gangnam Style:2.1/ : accepted
>> af8096ad637af1ca022a5146e07cf1fc6bfbec877935f9e114b279fcfe26c06d (poolsz
>> 2093)
>> 2013-11-21 13:41:10 AcceptToMemoryPool: 5.9.24.81:7834
>> /Satoshi:0.8.99/Gangnam Style:2.1/ : accepted
>> 751c2415d058d45ca602fdf1b6490edb6e57fc718e914d628c11b17e25aac834 (poolsz
>> 2094)
>>
>>
>>
>> Despite that I have 87 connections from regular nodes, virtually all
>> transactions seen by my node are being announced by this modified software,
>> which appears to run on several different machines.
>>
>> I am wondering if anyone out there knows/owns these nodes and if they are
>> relaying transactions without checking their validity. That seems the most
>> likely reason for how they are always able to win the race to be the first
>> to announce to my node.
>>
>> ------------------------------------------------------------------------------
>> Shape the Mobile Experience: Free Subscription
>> Software experts and developers: Be at the forefront of tech innovation.
>> Intel(R) Software Adrenaline delivers strategic insight and game-changing
>> conversations that shape the rapidly evolving mobile landscape. Sign up now.
>> http://pubads.g.doubleclick.net/gampad/clk?id=63431311&iu=/4140/ostg.clktrk
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>
> 
> 
> 



From danteat7 at gmail.com  Thu Nov 21 20:22:33 2013
From: danteat7 at gmail.com (coinscoins)
Date: Thu, 21 Nov 2013 20:22:33 +0000 (UTC)
Subject: [Bitcoin-development] is there a way to do bitcoin-staging?
References: <20130519132359.GA12366@netbook.cypherspace.org>
	<CAMGNxUsGRyYWepSn4on+V9CJAj0J8oSXndo36OrrCyMhvKnoxA@mail.gmail.com>
	<5199C3DE.901@gmail.com>
	<20131014180807.GA32082@netbook.cypherspace.org>
Message-ID: <loom.20131121T212121-510@post.gmane.org>

looks like Betacoin is already here - http://betacoin.org




From melvincarvalho at gmail.com  Thu Nov 21 20:35:44 2013
From: melvincarvalho at gmail.com (Melvin Carvalho)
Date: Thu, 21 Nov 2013 21:35:44 +0100
Subject: [Bitcoin-development] is there a way to do bitcoin-staging?
In-Reply-To: <20131014180807.GA32082@netbook.cypherspace.org>
References: <20130519132359.GA12366@netbook.cypherspace.org>
	<CAMGNxUsGRyYWepSn4on+V9CJAj0J8oSXndo36OrrCyMhvKnoxA@mail.gmail.com>
	<5199C3DE.901@gmail.com>
	<20131014180807.GA32082@netbook.cypherspace.org>
Message-ID: <CAKaEYhJVLhRfcX7T62S8fx+cPKJepQCd4gBnqv5cUJzcGM7MHA@mail.gmail.com>

On 14 October 2013 20:08, Adam Back <adam at cypherspace.org> wrote:

> Coming back to the staging idea, maybe this is a realistic model that could
> work.  The objective being to provide a way for bitcoin to move to a live
> beta and stable being worked on in parallel like fedora vs RHEL or odd/even
> linux kernel versions.
>
> Development runs in parallel on bitcoin 1.x beta (betacoin) and bitcoin 0.x
> stable and leap-frogs as beta becomes stable after testing.
>
> Its a live beta, meaning real value, real contracts.  But we dont want it
> to
> be an alt-coin with a floating value exactly, we want it to be bitcoin, but
> the bleeding edge bitcoin so we want to respect the 21 million coin limit,
> and allow coins to move between bitcoin and betacoin with some necessary
> security related restrictions.
>
> There is no mining reward on the betacoin network (can be merge mined for
> security), and the way you opt to move a bitcoin into the betacoin network
> is to mark it as transferred in some UTXO recognized way.  It cant be
> reanimated, its dead.  (eg spend to a specific recognized invalid address
> on
> the bitcoin network).  In this way its not really a destruction, but a
> move,
> moving the coin from bitcoin to betacoin network.
>
> This respects the 21 million coin cap, and avoids betacoin bugs flowing
> back
> and affecting bitcoin security or value-store properties.  Users may buy or
> swap betacoin for bitcoin to facilitate moving money back from betacoin to
> bitcoin.  However that is market priced so the bitcoin network is security
> insulated from beta.  A significant security bug in beta would cause a
> market freeze, until it is rectified.
>
> The cost of a betacoin is capped at one BTC because no one will pay more
> than one bitcoin for a betacoin because they could alternatively move their
> own coin.  The reverse is market priced.
>
> Once bitcoin beta stabalizes, eg say year or two type of time-frame, a
> decision is reached to promote 1.0 beta to 2.0 stable, the remaining
> bitcoins can be moved, and the old network switched off, with mining past a
> flag day moving to the betacoin.
>
> During the beta period betacoin is NOT an alpha, people can rely on it and
> use it in anger for real value transactions.  eg if it enables more script
> features, or coin coloring, scalabity tweaks etc people can use it.
> Probably for large value store they are always going to prefer
> bitcoin-stable, but applications that need the coloring features, or
> advanced scripting etc can go ahead and beta.
>
> Bitcoin-stable may pull validated changes and merge them, as a way to pull
> in any features needed in the shorter term and benefit from the betacoin
> validation.  (Testing isnt as much validation as real-money at stake
> survivability).
>
> The arguments are I think that:
>
> - it allows faster development allowing bitcoin to progress features
> faster,
>
> - it avoids mindshare dilution if alternatively an alt-coin with a hit
>    missing feature takes off;
>
> - it concentrates such useful-feature alt activities into one OPEN source
>    and OPEN control foundation mediated area (rather than suspected land
>    grabs on colored fees or such like bitcoin respun as a business model
>    things),
>
> - maybe gets the developers that would've been working on their pet
>    alt-coin, or their startup alt-coin to work together putting more
>    developers, testers and resources onto something with open control (open
>    source does not necessarily mean that much) and bitcoin mindshare
>    branding, its STILL bitcoin, its just the beta network.
>
> - it respects the 21 million limit, starting new mining races probably
>    dillutes the artificial scarcity semantic
>
> - while insulating bitcoin from betacoin security defects (I dont mean
>    betacoin as a testnet, it should have prudent rigorous testing like
>    bitcoin, just the very act of adding a feature creates risk that bitcoin
>    stable can be hesitant to take).
>
> Probably the main issue as always is more (trustable) very high caliber
> testers and developers.  Maybe if the alt-coin minded startups and
> developers donate their time to bitcoin-beta (or bitcoin-stable) for the
> bits they are missing, we'll get more hands to work on something of
> reusable
> value to humanity, in parallel with their startup's objectives and as a way
> for them to get their needed features, while giving back to the bitcoin
> community, and helping bitcoin progress faster.
>
> Maybe bitcoin foundation could ask for BTC donations to hire more
> developers
> and testers full time.  $1.5b of stored value should be interested to safe
> guard their value store, and develop the transaction features.
>

I think there may be a simpler way to do this.

Create a new genesis block for a staging network, but in all other aspects,
as far as possible, keep the properties the same as bitcoin.

Do not actively be opposed to it being traded, but people need to know
that, although there is no intention to reset the chain, new and
potentially not fully tested, changes can be rolled into the network.
Anyone mining staging coins should be prepared for the value to go to zero.

Perhaps also a "straw poll" voting system could be set up for those that
own staging coins could sign messages saying which patches they would like
to test out next.  When patches are stable in the staging area, they could
be "promoted" to the main net ...


>
> Adam
>
> On Mon, May 20, 2013 at 02:34:06AM -0400, Alan Reiner wrote:
> >   This is exactly what I was planning to do with the
> >   inappropriately-named "Ultimate Blockchain Compression".  [...]
> >
> >   For it to really work, it's gotta be part of the mainnet validation
> >   rules, but no way it can be evaluated realistically without some kind
> of
> >   "staging".
>
> >   On 5/19/2013 11:08 AM, Peter Vessenes wrote:
> >
> >   I think this is a very interesting idea. As Bitcoiners, we often stuff
> >   things into the 'alt chain' bucket in our heads; I wonder if this idea
> >   works better as a curing period, essentially an extended version of the
> >   current 100 block wait for mined coins.
>
>
> ------------------------------------------------------------------------------
> October Webinars: Code for Performance
> Free Intel webinars can help you accelerate application performance.
> Explore tips for MPI, OpenMP, advanced profiling, and more. Get the most
> from
> the latest Intel processors and coprocessors. See abstracts and register >
> http://pubads.g.doubleclick.net/gampad/clk?id=60134071&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131121/61f2374a/attachment.html>

From adam at cypherspace.org  Thu Nov 21 21:11:57 2013
From: adam at cypherspace.org (Adam Back)
Date: Thu, 21 Nov 2013 22:11:57 +0100
Subject: [Bitcoin-development] bitcoin 1.x & 0.x in parallel (Re: is there a
 way to do bitcoin-staging?)
In-Reply-To: <CAKaEYhJVLhRfcX7T62S8fx+cPKJepQCd4gBnqv5cUJzcGM7MHA@mail.gmail.com>
References: <20130519132359.GA12366@netbook.cypherspace.org>
	<CAMGNxUsGRyYWepSn4on+V9CJAj0J8oSXndo36OrrCyMhvKnoxA@mail.gmail.com>
	<5199C3DE.901@gmail.com>
	<20131014180807.GA32082@netbook.cypherspace.org>
	<CAKaEYhJVLhRfcX7T62S8fx+cPKJepQCd4gBnqv5cUJzcGM7MHA@mail.gmail.com>
Message-ID: <20131121211157.GA4871@netbook.cypherspace.org>

Yeah but that sounds pretty much like test-net and starts a new digital
scarcity on an alpha-qa level network, with an implied promise that maybe if
you're lucky your coins might survive the alpha testing and have some value.

I'm not talking about some slightly stabler version of test-net.

Probably bitcoin staging is the wrong name.  I mean like development of
bitcoin 1.x in parallel with bitcoin 0.x which includes like test net for
both, and strong (though maybe not quite as high) assurance of qa and care
as bitcoin 0.x.  Just as a way to get features like Mark Freidenbach's
freimarket script extensions, and some of the disabled scripts validated on
1.x testnet and then after rigorous testing deployed onto 1.x  Because they
are new features even with good testing that introduces non-zero risk, hence
the 1 way peg idea.  Welcome to suggest better names for the idea...

Of course maybe the other issue is insufficient people with the skills and
motivation to support two parallel efforts.

It gives somewhere to code and test and then deploy clearly useful things
but that dont warrant a hard fork.

Adam

Melvin wrote:
>   I think there may be a simpler way to do this.
>   Create a new genesis block for a staging network, but in all other
>   aspects, as far as possible, keep the properties the same as bitcoin.
>   Do not actively be opposed to it being traded, but people need to know
>   that, although there is no intention to reset the chain, new and
>   potentially not fully tested, changes can be rolled into the network.
>   Anyone mining staging coins should be prepared for the value to go to
>   zero.
>   Perhaps also a "straw poll" voting system could be set up for those
>   that own staging coins could sign messages saying which patches they
>   would like to test out next.  When patches are stable in the staging
>   area, they could be "promoted" to the main net ...



From ayeowch at gmail.com  Fri Nov 22 10:55:21 2013
From: ayeowch at gmail.com (Addy Yeow)
Date: Fri, 22 Nov 2013 21:55:21 +1100
Subject: [Bitcoin-development] Who or what is /Satoshi:0.8.99/Gangnam
 Style:2.1/ ?
In-Reply-To: <CANEZrP1ZoU5DXf=4arxcy++3P1z2jHFZWCn1R=JuYxQDEX4W1Q@mail.gmail.com>
References: <CANEZrP3Amb+vBDR-JyVLDmDy9ewF8DQFVDJgOEg4izhTaR7hVw@mail.gmail.com>
	<CAA3bHny27fRZNNYMtqa85wrr7e3_EUgxsDFba6+E=QOW1o+mqw@mail.gmail.com>
	<CANEZrP1ZoU5DXf=4arxcy++3P1z2jHFZWCn1R=JuYxQDEX4W1Q@mail.gmail.com>
Message-ID: <CAA3bHnyq2AAZ-WAb-PE1UEyCP+Mz84ao=eJMdRjvPEa+P=EB7w@mail.gmail.com>

Hi Mike,

I am glad you are still following up with Bitnodes. The recent spike in
nodes count should probably be taken with a grain of salt; run #231 (
http://getaddr.bitnodes.io/231/) does appear artificial to me, i.e.
potentially bogus nodes being added. I am still working on a more in depth
analysis on the data.

There are quite some TODOs for the project at the moment for the next
couple of months. I have included propagation data as well into the list.

Cheers,
Addy


On Fri, Nov 22, 2013 at 1:47 AM, Mike Hearn <mike at plan99.net> wrote:

> Thanks. By the way, your bitnodes site is excellent. Thanks for doing
> that. If you're in the mood for extending it, it'd be great to gather and
> chart data on block and tx propagation times.
>
> Do you think the recent explosion in running nodes is real, or due to some
> kind of custom experimental thing?
>
>
> On Thu, Nov 21, 2013 at 2:55 PM, Addy Yeow <ayeowch at gmail.com> wrote:
>
>> Try https://bitcointalk.org/index.php?action=profile;u=19897?
>>
>>
>>
>>
>> On Fri, Nov 22, 2013 at 12:48 AM, Mike Hearn <mike at plan99.net> wrote:
>>
>>>  I added some additional logging to my node and ran it for a few days.
>>> There's a pull req open for my extra logging, it is quite trivial. Here's
>>> what it looks like:
>>>
>>> 2013-11-21 13:41:04 AcceptToMemoryPool: 5.9.24.81:7834/Satoshi:0.8.99/Gangnam Style:2.1/ : accepted
>>> 2d1bbcc2bf64dfcb57a2f0180b2607a48a34de4422c446929b26b190083bbfe7 (poolsz
>>> 2087)
>>> 2013-11-21 13:41:05 AcceptToMemoryPool: 198.12.127.2:29057/Satoshi:0.8.99/Gangnam Style:2.1/ : accepted
>>> 28bb94978bdaa224faeafa95d03a0c4f5743396d6f592469c5ac2b64184ac716 (poolsz
>>> 2088)
>>> 2013-11-21 13:41:06 ERROR: AcceptToMemoryPool : nonstandard transaction:
>>> dust
>>> 2013-11-21 13:41:06
>>> 42323d9553e4c592d27765dc3ef9152c186cb7d67b08d783d72974a56085032d from
>>> 82.68.68.254:39232 /Satoshi:0.8.1/ was not accepted into the memory
>>> pool: dust
>>> 2013-11-21 13:41:06 AcceptToMemoryPool: 198.12.127.2:29057/Satoshi:0.8.99/Gangnam Style:2.1/ : accepted
>>> 2fdb19e5e87d518b7b6bb7371d547a5f60c2bb056ba4522190460f0bc41b51fb (poolsz
>>> 2089)
>>> 2013-11-21 13:41:08 AcceptToMemoryPool: 5.9.24.81:7834/Satoshi:0.8.99/Gangnam Style:2.1/ : accepted
>>> 52c8ed6a48f89d48b1152b67ac0b718a7aadb5f9a0c70c18b9b2fed058ca3323 (poolsz
>>> 2090)
>>> 2013-11-21 13:41:08 AcceptToMemoryPool: 198.12.127.2:29057/Satoshi:0.8.99/Gangnam Style:2.1/ : accepted
>>> 980bbdbd4a6b365fa6f13fb5247eb6cb1e54847e490c3b7c3026d1548fb9efc6 (poolsz
>>> 2091)
>>> 2013-11-21 13:41:08 AcceptToMemoryPool: 64.120.253.194:60896/Satoshi:0.8.99/Gangnam Style:2.0/ : accepted
>>> 03f79c611bbdc1afa7afa67eb0bbd4d8bc86a730a7066622e2709ae506e61e0f (poolsz
>>> 2092)
>>> 2013-11-21 13:41:10 AcceptToMemoryPool: 5.9.24.81:7834/Satoshi:0.8.99/Gangnam Style:2.1/ : accepted
>>> af8096ad637af1ca022a5146e07cf1fc6bfbec877935f9e114b279fcfe26c06d (poolsz
>>> 2093)
>>> 2013-11-21 13:41:10 AcceptToMemoryPool: 5.9.24.81:7834/Satoshi:0.8.99/Gangnam Style:2.1/ : accepted
>>> 751c2415d058d45ca602fdf1b6490edb6e57fc718e914d628c11b17e25aac834 (poolsz
>>> 2094)
>>>
>>>
>>>
>>> Despite that I have 87 connections from regular nodes, virtually all
>>> transactions seen by my node are being announced by this modified software,
>>> which appears to run on several different machines.
>>>
>>> I am wondering if anyone out there knows/owns these nodes and if they
>>> are relaying transactions without checking their validity. That seems the
>>> most likely reason for how they are always able to win the race to be the
>>> first to announce to my node.
>>>
>>>
>>> ------------------------------------------------------------------------------
>>> Shape the Mobile Experience: Free Subscription
>>> Software experts and developers: Be at the forefront of tech innovation.
>>> Intel(R) Software Adrenaline delivers strategic insight and game-changing
>>> conversations that shape the rapidly evolving mobile landscape. Sign up
>>> now.
>>>
>>> http://pubads.g.doubleclick.net/gampad/clk?id=63431311&iu=/4140/ostg.clktrk
>>> _______________________________________________
>>> Bitcoin-development mailing list
>>> Bitcoin-development at lists.sourceforge.net
>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>>
>>>
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131122/b7408390/attachment.html>

From jgarzik at bitpay.com  Fri Nov 22 20:46:50 2013
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Fri, 22 Nov 2013 15:46:50 -0500
Subject: [Bitcoin-development] [PATCH] bitcoind: whitelist nodes,
	to prevent them from being banned
Message-ID: <CAJHLa0PP-q9cmHKzk5uzRZfLYXpwse4K497Wuuc+7UBrupDd2w@mail.gmail.com>

Trying something new... a [simple] patch sent to the list, for
discussion.  Seems unlikely to be controversial.  github access is
temporarily disabled, so this is the best pull request avenue for the
moment.

-- 
Jeff Garzik
Bitcoin core developer and open source evangelist
BitPay, Inc.      https://bitpay.com/
-------------- next part --------------
diff --git a/node_modules/bitpay/bitcoinRPC.js b/node_modules/bitpay/bitcoinRPC.js
index bd410ac..e6edf81 100644
--- a/node_modules/bitpay/bitcoinRPC.js
+++ b/node_modules/bitpay/bitcoinRPC.js
@@ -68,6 +68,18 @@ function spec(b) {
     RPC.call(this, 'gettransaction',  [txid], callback);
   };
 
+  BitcoinRPC.prototype.getRawTransaction = function(txid, callback) {
+    RPC.call(this, 'getrawtransaction',  [txid], callback);
+  };
+
+  BitcoinRPC.prototype.signRawTransaction = function(hexstr, callback) {
+    RPC.call(this, 'signrawtransaction',  [hexstr], callback);
+  };
+
+  BitcoinRPC.prototype.sendRawTransaction = function(hexstr, callback) {
+    RPC.call(this, 'sendrawtransaction',  [hexstr], callback);
+  };
+
   BitcoinRPC.prototype.sendToAddress = function(address, amount, callback) {
     RPC.call(this, 'sendtoaddress', [address, amount], callback);
   };
diff --git a/node_modules/txtool/txtool b/node_modules/txtool/txtool
new file mode 100755
index 0000000..b50dc77
--- /dev/null
+++ b/node_modules/txtool/txtool
@@ -0,0 +1,124 @@
+#!/usr/bin/env node
+
+var fs = require('fs');
+var Util = require('bitcoin/lib/ext/util');
+var BitcoinRPC = require('bitpay/bitcoinRPC').default();
+var bitcoinRPC = undefined;
+var Transaction = required('bitcoin/lib/model/transaction').class();
+
+var argv = require('optimist')
+	.usage('Transaction tool.\nUsage: $0 [options]')
+	.demand(['c'])
+	.alias('f', 'file')
+	.describe('f', 'Transaction source file (raw, serialized, hex encoded)')
+	.alias('x', 'txid')
+	.describe('x', 'Transaction id (switches TX source to RPC)')
+	.alias('c', 'cmd')
+	.describe('c', 'JSON command file')
+	.alias('h', 'host')
+	.describe('h', 'bitcoind RPC hostname or IP address')
+	.alias('p', 'port')
+	.describe('p', 'bitcoind RPC port')
+	.alias('U', 'user')
+	.describe('U', 'bitcoind RPC username')
+	.alias('P', 'pass')
+	.describe('P', 'bitcoind RPC password')
+	.argv
+;
+
+function setupRPC(host, port, user, pass) {
+	var opts = {};
+	opts.host = host;
+	opts.port = port;
+	opts.user = user;
+	opts.pass = pass;
+	bitcoinRPC = new BitcoinRPC(opts);
+}
+
+function loadTxRPC(txid) {
+	var hexstr = bitcoinRPC.getRawTransaction(txid);
+
+	var data = new Buffer(hexstr, 'hex');
+	var tx = new Transaction(data);
+	return tx;
+}
+
+function loadTxfile(filename) {
+	var hexfile = fs.readFilesync(filename, 'utf8');
+
+	var data = new Buffer(hexfile.trim(), 'hex');
+	var tx = new Transaction(data);
+	return tx;
+}
+
+function loadCmdFile(filename) {
+	var data = JSON.parse(fs.readFileSync(filename)).result;
+	return data;
+}
+
+// how many copies of this can one codebase bear?
+function transactionDesc(tx) {
+  var outDescriptions = [];
+  var outs = tx.outs;
+  for(var i=0; i<outs.length; i++) {
+    var txout = outs[i];
+    var script = txout.getScript();
+    var type = script.getOutType();
+    var amount = (txout.getValue() / 1e8).round(8);
+    if(type == 'Address') {
+      outDescriptions.push({
+        type: type,
+        amount: amount,
+        address: Util.pubKeyHashToAddress(script.simpleOutHash())
+      });
+    } else {
+      outDescriptions.push({
+        type: type,
+        amount: amount
+      });
+    }
+  }
+  return {
+    txid: Util.formatHashFull(tx.getHash()),
+    outs: outDescriptions
+  }
+};
+
+function CmdShow(tx) {
+	console.log(inspect(transactionDesc(tx), false, 10));
+}
+
+function CmdSign(tx) {
+	var txHex = Util.encodeHex(tx.serialize());
+	var retHex = bitcoinRPC.signRawTransaction(txHex);
+	console.log(retHex);
+}
+
+function CmdSend(tx) {
+	var txHex = Util.encodeHex(tx.serialize());
+	bitcoinRPC.sendRawTransaction(txHex);
+}
+
+function ExecCmdData(tx, cmdData) {
+	for (var i = 0; i < cmdData.length; i++) {
+		var obj = cmdData[i];
+		if (obj.cmd == "show") {
+			CmdShow(tx);
+		}
+		else if (obj.cmd == "sign") {
+			CmdSign(tx);
+		}
+		else if (obj.cmd == "send") {
+			CmdSend(tx);
+		}
+	}
+}
+
+if (argv.host) {
+	setupRPC(host, port, user, pass);
+}
+var tx = argv.txid ? loadTxRPC(argv.txid) :
+		     loadTxFile(argv.file);
+var cmdData = loadCmdFile(argv.cmd);
+ExecCmdData(tx, cmdData);
+

From jgarzik at bitpay.com  Fri Nov 22 20:49:04 2013
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Fri, 22 Nov 2013 15:49:04 -0500
Subject: [Bitcoin-development] [PATCH,
	try2] bitcoind: whitelist nodes against banning
Message-ID: <CAJHLa0NGQaMMFByzHhnuPHYhUSj6czqBcimwhaj-DyEM91PRZA@mail.gmail.com>

Whitelist nodes against banning.

-- 
Jeff Garzik
Bitcoin core developer and open source evangelist
BitPay, Inc.      https://bitpay.com/
-------------- next part --------------
commit af7b624763e790075f8bb29a084309e6591e3469
Author: Jeff Garzik <jgarzik at bitpay.com>
Date:   Fri Nov 22 15:43:51 2013 -0500

    Add whitelist, to prevent whitelisted nodes from being banned.
    
    Entry point via RPC, configuration file or command line.

diff --git a/src/bitcoinrpc.cpp b/src/bitcoinrpc.cpp
index a1e7d14..506b370 100644
--- a/src/bitcoinrpc.cpp
+++ b/src/bitcoinrpc.cpp
@@ -233,6 +233,7 @@ static const CRPCCommand vRPCCommands[] =
     { "getpeerinfo",            &getpeerinfo,            true,      false,      false },
     { "ping",                   &ping,                   true,      false,      false },
     { "addnode",                &addnode,                true,      true,       false },
+    { "addwhite",               &addwhite,               true,      true,       false },
     { "getaddednodeinfo",       &getaddednodeinfo,       true,      true,       false },
     { "getnettotals",           &getnettotals,           true,      true,       false },
     { "getdifficulty",          &getdifficulty,          true,      false,      false },
diff --git a/src/bitcoinrpc.h b/src/bitcoinrpc.h
index 9025ff9..a7c2e2d 100644
--- a/src/bitcoinrpc.h
+++ b/src/bitcoinrpc.h
@@ -162,6 +162,7 @@ extern json_spirit::Value getconnectioncount(const json_spirit::Array& params, b
 extern json_spirit::Value getpeerinfo(const json_spirit::Array& params, bool fHelp);
 extern json_spirit::Value ping(const json_spirit::Array& params, bool fHelp);
 extern json_spirit::Value addnode(const json_spirit::Array& params, bool fHelp);
+extern json_spirit::Value addwhite(const json_spirit::Array& params, bool fHelp);
 extern json_spirit::Value getaddednodeinfo(const json_spirit::Array& params, bool fHelp);
 extern json_spirit::Value getnettotals(const json_spirit::Array& params, bool fHelp);
 
diff --git a/src/init.cpp b/src/init.cpp
index b2e7ddf..75aa301 100644
--- a/src/init.cpp
+++ b/src/init.cpp
@@ -548,6 +548,8 @@ bool AppInit2(boost::thread_group& threadGroup, bool fForceServer)
 
     strWalletFile = GetArg("-wallet", "wallet.dat");
 
+    LoadWhitelist();
+
     // ********************************************************* Step 4: application initialization: dir lock, daemonize, pidfile, debug log
 
     std::string strDataDir = GetDataDir().string();
diff --git a/src/net.cpp b/src/net.cpp
index c547cf3..969bb1b 100644
--- a/src/net.cpp
+++ b/src/net.cpp
@@ -55,6 +55,8 @@ bool fDiscover = true;
 uint64_t nLocalServices = NODE_NETWORK;
 static CCriticalSection cs_mapLocalHost;
 static map<CNetAddr, LocalServiceInfo> mapLocalHost;
+static CCriticalSection cs_mapWhitelist;
+static map<CNetAddr, LocalServiceInfo> mapWhitelist;
 static bool vfReachable[NET_MAX] = {};
 static bool vfLimited[NET_MAX] = {};
 static CNode* pnodeLocalHost = NULL;
@@ -298,6 +300,45 @@ bool IsReachable(const CNetAddr& addr)
     return vfReachable[net] && !vfLimited[net];
 }
 
+// learn a new whitelisted address
+bool AddWhitelist(const CService& addr, int nScore)
+{
+    LogPrintf("AddWhitelist(%s,%i)\n", addr.ToString().c_str(), nScore);
+
+    {
+        LOCK(cs_mapWhitelist);
+        bool fAlready = mapWhitelist.count(addr) > 0;
+        LocalServiceInfo &info = mapWhitelist[addr];
+        if (!fAlready || nScore >= info.nScore) {
+            info.nScore = nScore + (fAlready ? 1 : 0);
+            info.nPort = addr.GetPort();
+        }
+    }
+
+    return true;
+}
+
+/** check whether a given address is potentially local */
+bool IsWhitelisted(const CService& addr)
+{
+    LOCK(cs_mapWhitelist);
+    return mapWhitelist.count(addr) > 0;
+}
+
+void LoadWhitelist()
+{
+    // Connect to specific addresses
+    if (mapArgs.count("-whitelist") && mapMultiArgs["-whitelist"].size() > 0)
+    {
+        BOOST_FOREACH(string strAddr, mapMultiArgs["-whitelist"])
+        {
+            CService serv(strAddr.c_str(), Params().GetDefaultPort(), true);
+            if (serv.IsValid())
+                AddWhitelist(serv, 0);
+        }
+    }
+}
+
 bool GetMyExternalIP2(const CService& addrConnect, const char* pszGet, const char* pszKeyword, CNetAddr& ipRet)
 {
     SOCKET hSocket;
@@ -588,6 +629,11 @@ bool CNode::Misbehaving(int howmuch)
         LogPrintf("Warning: Local node %s misbehaving (delta: %d)!\n", addrName.c_str(), howmuch);
         return false;
     }
+    if (IsWhitelisted(addr))
+    {
+        LogPrintf("Warning: Whitelisted node %s misbehaving (delta: %d)!\n", addrName.c_str(), howmuch);
+        return false;
+    }
 
     nMisbehavior += howmuch;
     if (nMisbehavior >= GetArg("-banscore", 100))
diff --git a/src/net.h b/src/net.h
index 278462a..e215255 100644
--- a/src/net.h
+++ b/src/net.h
@@ -87,6 +87,9 @@ bool AddLocal(const CService& addr, int nScore = LOCAL_NONE);
 bool AddLocal(const CNetAddr& addr, int nScore = LOCAL_NONE);
 bool SeenLocal(const CService& addr);
 bool IsLocal(const CService& addr);
+bool AddWhitelist(const CService& addr, int nScore);
+bool IsWhitelisted(const CService& addr);
+void LoadWhitelist();
 bool GetLocal(CService &addr, const CNetAddr *paddrPeer = NULL);
 bool IsReachable(const CNetAddr &addr);
 void SetReachable(enum Network net, bool fFlag = true);
diff --git a/src/rpcnet.cpp b/src/rpcnet.cpp
index 9f8dea8..47af21f 100644
--- a/src/rpcnet.cpp
+++ b/src/rpcnet.cpp
@@ -139,6 +139,26 @@ Value getpeerinfo(const Array& params, bool fHelp)
     return ret;
 }
 
+Value addwhite(const Array& params, bool fHelp)
+{
+    if (fHelp || params.size() != 1)
+        throw runtime_error(
+            "addwhite \"node\"\n"
+            "\nAttempts add a node to the whitelist.\n"
+            "\nArguments:\n"
+            "1. \"node\"     (string, required) The node (see getpeerinfo for nodes)\n"
+            "\nExamples:\n"
+            + HelpExampleCli("addwhite", "\"192.168.0.6:8333\" ")
+            + HelpExampleRpc("addwhite", "\"192.168.0.6:8333\" ")
+        );
+
+    string strNode = params[0].get_str();
+
+    CService serv(strNode.c_str(), Params().GetDefaultPort(), true);
+
+    return AddWhitelist(serv, 0);
+}
+
 Value addnode(const Array& params, bool fHelp)
 {
     string strCommand;

From gmaxwell at gmail.com  Fri Nov 22 20:56:43 2013
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Fri, 22 Nov 2013 12:56:43 -0800
Subject: [Bitcoin-development] [PATCH,
 try2] bitcoind: whitelist nodes against banning
In-Reply-To: <CAJHLa0NGQaMMFByzHhnuPHYhUSj6czqBcimwhaj-DyEM91PRZA@mail.gmail.com>
References: <CAJHLa0NGQaMMFByzHhnuPHYhUSj6czqBcimwhaj-DyEM91PRZA@mail.gmail.com>
Message-ID: <CAAS2fgRp7K7QD+y7a5uQr-BneN2MfW5U3J4NeoF9T_WcFv+UPg@mail.gmail.com>

On Fri, Nov 22, 2013 at 12:49 PM, Jeff Garzik <jgarzik at bitpay.com> wrote:
> Whitelist nodes against banning.

Is there a reason not to have a parallel get rpc to get the current list?



From jgarzik at bitpay.com  Fri Nov 22 21:01:51 2013
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Fri, 22 Nov 2013 16:01:51 -0500
Subject: [Bitcoin-development] [PATCH,
 try2] bitcoind: whitelist nodes against banning
In-Reply-To: <CAAS2fgRp7K7QD+y7a5uQr-BneN2MfW5U3J4NeoF9T_WcFv+UPg@mail.gmail.com>
References: <CAJHLa0NGQaMMFByzHhnuPHYhUSj6czqBcimwhaj-DyEM91PRZA@mail.gmail.com>
	<CAAS2fgRp7K7QD+y7a5uQr-BneN2MfW5U3J4NeoF9T_WcFv+UPg@mail.gmail.com>
Message-ID: <CAJHLa0NJxFOo2ZAv86bcMTNwjNJNL1v3bVmN6f+3MEnWfs5dcg@mail.gmail.com>

On Fri, Nov 22, 2013 at 3:56 PM, Gregory Maxwell <gmaxwell at gmail.com> wrote:
> Is there a reason not to have a parallel get rpc to get the current list?

Easy enough to add.  There had also been requests for an IP blacklist,
which would need associated RPC/config gadgetry.

-- 
Jeff Garzik
Bitcoin core developer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From wtogami at gmail.com  Fri Nov 22 21:07:53 2013
From: wtogami at gmail.com (Warren Togami Jr.)
Date: Fri, 22 Nov 2013 11:07:53 -1000
Subject: [Bitcoin-development] [PATCH,
 try2] bitcoind: whitelist nodes against banning
In-Reply-To: <CAJHLa0NJxFOo2ZAv86bcMTNwjNJNL1v3bVmN6f+3MEnWfs5dcg@mail.gmail.com>
References: <CAJHLa0NGQaMMFByzHhnuPHYhUSj6czqBcimwhaj-DyEM91PRZA@mail.gmail.com>
	<CAAS2fgRp7K7QD+y7a5uQr-BneN2MfW5U3J4NeoF9T_WcFv+UPg@mail.gmail.com>
	<CAJHLa0NJxFOo2ZAv86bcMTNwjNJNL1v3bVmN6f+3MEnWfs5dcg@mail.gmail.com>
Message-ID: <CAEz79PpJ5cp79tz9L4+z+DnZwH_cPS6O4HLix6TRQuQDkrurcQ@mail.gmail.com>

https://github.com/bitcoin/bitcoin/pull/2906
There is already a bannode RPC PR.  Last I tried it didn't work though.


On Fri, Nov 22, 2013 at 11:01 AM, Jeff Garzik <jgarzik at bitpay.com> wrote:

> On Fri, Nov 22, 2013 at 3:56 PM, Gregory Maxwell <gmaxwell at gmail.com>
> wrote:
> > Is there a reason not to have a parallel get rpc to get the current list?
>
> Easy enough to add.  There had also been requests for an IP blacklist,
> which would need associated RPC/config gadgetry.
>
> --
> Jeff Garzik
> Bitcoin core developer and open source evangelist
> BitPay, Inc.      https://bitpay.com/
>
>
> ------------------------------------------------------------------------------
> Shape the Mobile Experience: Free Subscription
> Software experts and developers: Be at the forefront of tech innovation.
> Intel(R) Software Adrenaline delivers strategic insight and game-changing
> conversations that shape the rapidly evolving mobile landscape. Sign up
> now.
> http://pubads.g.doubleclick.net/gampad/clk?id=63431311&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131122/75e1a855/attachment.html>

From jouke at bitonic.nl  Fri Nov 22 21:37:40 2013
From: jouke at bitonic.nl (Jouke Hofman)
Date: Fri, 22 Nov 2013 22:37:40 +0100
Subject: [Bitcoin-development] [PATCH,
 try2] bitcoind: whitelist nodes against banning
In-Reply-To: <CAJHLa0NGQaMMFByzHhnuPHYhUSj6czqBcimwhaj-DyEM91PRZA@mail.gmail.com>
References: <CAJHLa0NGQaMMFByzHhnuPHYhUSj6czqBcimwhaj-DyEM91PRZA@mail.gmail.com>
Message-ID: <528FCEA4.8010308@bitonic.nl>

Thanks a lot! I will run these patches on some nodes tomorrow to see if
it works.

On 22-11-13 21:49, Jeff Garzik wrote:
> Whitelist nodes against banning.
> 
> 
> 
> ------------------------------------------------------------------------------
> Shape the Mobile Experience: Free Subscription
> Software experts and developers: Be at the forefront of tech innovation.
> Intel(R) Software Adrenaline delivers strategic insight and game-changing 
> conversations that shape the rapidly evolving mobile landscape. Sign up now. 
> http://pubads.g.doubleclick.net/gampad/clk?id=63431311&iu=/4140/ostg.clktrk
> 
> 
> 
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 




From michael at ndrix.org  Fri Nov 22 23:11:00 2013
From: michael at ndrix.org (Michael Hendricks)
Date: Fri, 22 Nov 2013 16:11:00 -0700
Subject: [Bitcoin-development] [PATCH] bitcoind: whitelist nodes,
 to prevent them from being banned
In-Reply-To: <CAJHLa0PP-q9cmHKzk5uzRZfLYXpwse4K497Wuuc+7UBrupDd2w@mail.gmail.com>
References: <CAJHLa0PP-q9cmHKzk5uzRZfLYXpwse4K497Wuuc+7UBrupDd2w@mail.gmail.com>
Message-ID: <CAFHuXuaqUJO0WUHfUOvvQqL-=hhY5ADrjdbDH=2pnJt+bDH7ig@mail.gmail.com>

Wrong patch?  This looks like node.js code for something called txtool.


-- 
Michael


On Fri, Nov 22, 2013 at 1:46 PM, Jeff Garzik <jgarzik at bitpay.com> wrote:

> Trying something new... a [simple] patch sent to the list, for
> discussion.  Seems unlikely to be controversial.  github access is
> temporarily disabled, so this is the best pull request avenue for the
> moment.
>
> --
> Jeff Garzik
> Bitcoin core developer and open source evangelist
> BitPay, Inc.      https://bitpay.com/
>
>
> ------------------------------------------------------------------------------
> Shape the Mobile Experience: Free Subscription
> Software experts and developers: Be at the forefront of tech innovation.
> Intel(R) Software Adrenaline delivers strategic insight and game-changing
> conversations that shape the rapidly evolving mobile landscape. Sign up
> now.
> http://pubads.g.doubleclick.net/gampad/clk?id=63431311&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131122/ce3833ea/attachment.html>

From decker.christian at gmail.com  Sun Nov 24 16:20:22 2013
From: decker.christian at gmail.com (Christian Decker)
Date: Sun, 24 Nov 2013 17:20:22 +0100
Subject: [Bitcoin-development] Network propagation speeds
Message-ID: <CALxbBHWwQXjjET+-GFTKNFPd_yWPjEWGvS-YwUPL+z86J8sw0Q@mail.gmail.com>

Since this came up again during the discussion of the Cornell paper I
thought I'd dig up my measurement code from the Information
Propagation paper and automate it as much as possible.

The result is the Network Propagation page on bitcoinstats.com
(http://bitcoinstats.com/network/propagation/). It takes a daily
snapshot of the situation, then calculates the time until blocks and
transactions reach a certain percentile of the nodes in the network.
There is also a detailed page showing the density function describing
at what times nodes learn about the existence of a block/transaction
(for example yesterdays distribution:
http://bitcoinstats.com/network/propagation/2013/11/23).

I intend to add more information and plots over time, but I wanted to
push this out quickly as there were some people asking for it. Hope
this helps getting the blockchain fork rate down :-)

Regards,
Chris
--
Christian Decker



From gmaxwell at gmail.com  Sun Nov 24 16:26:45 2013
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Sun, 24 Nov 2013 08:26:45 -0800
Subject: [Bitcoin-development] Network propagation speeds
In-Reply-To: <CALxbBHWwQXjjET+-GFTKNFPd_yWPjEWGvS-YwUPL+z86J8sw0Q@mail.gmail.com>
References: <CALxbBHWwQXjjET+-GFTKNFPd_yWPjEWGvS-YwUPL+z86J8sw0Q@mail.gmail.com>
Message-ID: <CAAS2fgQxBVOT1ceWWttH5e2wG7-qJ3LxKKnFBEqLwbz-OwDo3g@mail.gmail.com>

On Sun, Nov 24, 2013 at 8:20 AM, Christian Decker
<decker.christian at gmail.com> wrote:
> Since this came up again during the discussion of the Cornell paper I
> thought I'd dig up my measurement code from the Information
> Propagation paper and automate it as much as possible.

Could you publish the block ids and timestamp sets for each block?

It would be useful in correlating propagation information against
block characteristics.



From decker.christian at gmail.com  Sun Nov 24 16:37:25 2013
From: decker.christian at gmail.com (Christian Decker)
Date: Sun, 24 Nov 2013 17:37:25 +0100
Subject: [Bitcoin-development] Network propagation speeds
In-Reply-To: <CAAS2fgQxBVOT1ceWWttH5e2wG7-qJ3LxKKnFBEqLwbz-OwDo3g@mail.gmail.com>
References: <CALxbBHWwQXjjET+-GFTKNFPd_yWPjEWGvS-YwUPL+z86J8sw0Q@mail.gmail.com>
	<CAAS2fgQxBVOT1ceWWttH5e2wG7-qJ3LxKKnFBEqLwbz-OwDo3g@mail.gmail.com>
Message-ID: <CALxbBHX9PACKFJM_-=0Hm7hO7Km7jnLNRk=pRcKYTAcPD4G5qg@mail.gmail.com>

Sure thing, I'm looking for a good way to publish these measurements,
but I haven't found a good option yet. They are rather large in size,
so I'd rather not serve them along with the website as it hasn't got
the capacity. Any suggestions? If the demand is not huge I could
provide them on a per user basis.
--
Christian Decker


On Sun, Nov 24, 2013 at 5:26 PM, Gregory Maxwell <gmaxwell at gmail.com> wrote:
> On Sun, Nov 24, 2013 at 8:20 AM, Christian Decker
> <decker.christian at gmail.com> wrote:
>> Since this came up again during the discussion of the Cornell paper I
>> thought I'd dig up my measurement code from the Information
>> Propagation paper and automate it as much as possible.
>
> Could you publish the block ids and timestamp sets for each block?
>
> It would be useful in correlating propagation information against
> block characteristics.



From mike at plan99.net  Sun Nov 24 16:38:57 2013
From: mike at plan99.net (Mike Hearn)
Date: Sun, 24 Nov 2013 17:38:57 +0100
Subject: [Bitcoin-development] Network propagation speeds
In-Reply-To: <CAAS2fgQxBVOT1ceWWttH5e2wG7-qJ3LxKKnFBEqLwbz-OwDo3g@mail.gmail.com>
References: <CALxbBHWwQXjjET+-GFTKNFPd_yWPjEWGvS-YwUPL+z86J8sw0Q@mail.gmail.com>
	<CAAS2fgQxBVOT1ceWWttH5e2wG7-qJ3LxKKnFBEqLwbz-OwDo3g@mail.gmail.com>
Message-ID: <CANEZrP3=L-jutLZjg4DDqR-78RnxXRgtSuCr8hTbHZUogNBMSA@mail.gmail.com>

This is great, thanks for doing it. Tip sent your way.

Graphs of how propagation data change over time would also be helpful (as
well as raw data so we can calculate overhead per kilobyte and so on). I
know there are only two days worth of data, but for future, it'd be good.

I think the next part of figuring out why there's such huge disparity is
instrumenting bitcoind to find out where the time goes when relaying a
block.


On Sun, Nov 24, 2013 at 5:26 PM, Gregory Maxwell <gmaxwell at gmail.com> wrote:

> On Sun, Nov 24, 2013 at 8:20 AM, Christian Decker
> <decker.christian at gmail.com> wrote:
> > Since this came up again during the discussion of the Cornell paper I
> > thought I'd dig up my measurement code from the Information
> > Propagation paper and automate it as much as possible.
>
> Could you publish the block ids and timestamp sets for each block?
>
> It would be useful in correlating propagation information against
> block characteristics.
>
>
> ------------------------------------------------------------------------------
> Shape the Mobile Experience: Free Subscription
> Software experts and developers: Be at the forefront of tech innovation.
> Intel(R) Software Adrenaline delivers strategic insight and game-changing
> conversations that shape the rapidly evolving mobile landscape. Sign up
> now.
> http://pubads.g.doubleclick.net/gampad/clk?id=63431311&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131124/2fbea1fe/attachment.html>

From pete at petertodd.org  Sun Nov 24 17:13:10 2013
From: pete at petertodd.org (Peter Todd)
Date: Sun, 24 Nov 2013 12:13:10 -0500
Subject: [Bitcoin-development] Network propagation speeds
In-Reply-To: <CALxbBHWwQXjjET+-GFTKNFPd_yWPjEWGvS-YwUPL+z86J8sw0Q@mail.gmail.com>
References: <CALxbBHWwQXjjET+-GFTKNFPd_yWPjEWGvS-YwUPL+z86J8sw0Q@mail.gmail.com>
Message-ID: <20131124171310.GB16143@savin>

On Sun, Nov 24, 2013 at 05:20:22PM +0100, Christian Decker wrote:
> Since this came up again during the discussion of the Cornell paper I
> thought I'd dig up my measurement code from the Information
> Propagation paper and automate it as much as possible.
> 
> The result is the Network Propagation page on bitcoinstats.com
> (http://bitcoinstats.com/network/propagation/). It takes a daily
> snapshot of the situation, then calculates the time until blocks and
> transactions reach a certain percentile of the nodes in the network.
> There is also a detailed page showing the density function describing
> at what times nodes learn about the existence of a block/transaction
> (for example yesterdays distribution:
> http://bitcoinstats.com/network/propagation/2013/11/23).
> 
> I intend to add more information and plots over time, but I wanted to
> push this out quickly as there were some people asking for it. Hope
> this helps getting the blockchain fork rate down :-)

Do you have the resources to save the raw log data? You'll also need to
save transaction timestamp data - whether or not a given node has a
transaction already matters re: propagation.

Of course given pool centralization the moment pools start peering
directly with each other all these stats might not mean all that much.

Note that the number that's important isn't seconds, rather rather
seconds/actual block interval as long as hashing power is growing.
Unfortunately actually determining that is tricky - block interval is
inherently noisy so you'll want to use a fairly agressively smoothed
average.

So here's a rough calculation: right now blocks are happening roughly
%15 faster than they would at equilibrium, and blockchain.info reports
about 2 orphans a day. 2/166=1.2% orphan rate.

Now with a simplistic model where it takes exactly t seconds for a block
to propagate to 100% of the hashing power, and until then 0% has it,
you'd get:

    orphan rate = t / actual block interval -> t = rate * interval

Or 6.2 seconds with our orphan rate data. Now whether or not
blockchain.info succesfully captures all orphans I don't know, but given
you're reporting 4.5 to 9.4 seconds for 50th and 75th percentile
respectively that number 6.2s seems "ballpark" reasonable - remember
that hashing power is definitely not distributed evenly among the nodes
you are sampling from.

Which is another point... it may be the case that your propagation data
doesn't actually give any insight into real-world orphan rates because
the distribution of hashing power is concentrated into pools.

-- 
'peter'[:-1]@petertodd.org
00000000000000064bb57c6681a117371f06c4efe26917d9179a56cc20cff9f2
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 685 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131124/c7c2d88e/attachment.sig>

From gronager at ceptacle.com  Mon Nov 25 08:51:47 2013
From: gronager at ceptacle.com (Michael Gronager)
Date: Mon, 25 Nov 2013 09:51:47 +0100
Subject: [Bitcoin-development] Network propagation speeds
In-Reply-To: <CALxbBHX9PACKFJM_-=0Hm7hO7Km7jnLNRk=pRcKYTAcPD4G5qg@mail.gmail.com>
References: <CALxbBHWwQXjjET+-GFTKNFPd_yWPjEWGvS-YwUPL+z86J8sw0Q@mail.gmail.com>
	<CAAS2fgQxBVOT1ceWWttH5e2wG7-qJ3LxKKnFBEqLwbz-OwDo3g@mail.gmail.com>
	<CALxbBHX9PACKFJM_-=0Hm7hO7Km7jnLNRk=pRcKYTAcPD4G5qg@mail.gmail.com>
Message-ID: <52930FA3.3070802@ceptacle.com>

Hi Christian,

Cool - thanks for posting - agree, that it would be nice to normalize
the results with block size - so divide by size and:
1. see if there is a correlation (we all presume there still is)
2. plot the delay graph as e.g. normalized to the averaged blocksize or
lets define a "standard block size" of 200kb or what ever so we can
compare the plot btw days.

Also, does the correlation of propagation times hold for transaction
sizes as well (would be ice to find the logical t0 and the constant - I
guess the interesting measure is not kb but signatures, so number of
inputs - some correlation with size though).

Best,

Michael

On 24/11/13, 17:37 , Christian Decker wrote:
> Sure thing, I'm looking for a good way to publish these measurements,
> but I haven't found a good option yet. They are rather large in size,
> so I'd rather not serve them along with the website as it hasn't got
> the capacity. Any suggestions? If the demand is not huge I could
> provide them on a per user basis.
> --
> Christian Decker
> 
> 
> On Sun, Nov 24, 2013 at 5:26 PM, Gregory Maxwell <gmaxwell at gmail.com> wrote:
>> On Sun, Nov 24, 2013 at 8:20 AM, Christian Decker
>> <decker.christian at gmail.com> wrote:
>>> Since this came up again during the discussion of the Cornell paper I
>>> thought I'd dig up my measurement code from the Information
>>> Propagation paper and automate it as much as possible.
>>
>> Could you publish the block ids and timestamp sets for each block?
>>
>> It would be useful in correlating propagation information against
>> block characteristics.
> 
> ------------------------------------------------------------------------------
> Shape the Mobile Experience: Free Subscription
> Software experts and developers: Be at the forefront of tech innovation.
> Intel(R) Software Adrenaline delivers strategic insight and game-changing 
> conversations that shape the rapidly evolving mobile landscape. Sign up now. 
> http://pubads.g.doubleclick.net/gampad/clk?id=63431311&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 




From decker.christian at gmail.com  Mon Nov 25 19:27:09 2013
From: decker.christian at gmail.com (Christian Decker)
Date: Mon, 25 Nov 2013 20:27:09 +0100
Subject: [Bitcoin-development] Network propagation speeds
In-Reply-To: <52930FA3.3070802@ceptacle.com>
References: <CALxbBHWwQXjjET+-GFTKNFPd_yWPjEWGvS-YwUPL+z86J8sw0Q@mail.gmail.com>
	<CAAS2fgQxBVOT1ceWWttH5e2wG7-qJ3LxKKnFBEqLwbz-OwDo3g@mail.gmail.com>
	<CALxbBHX9PACKFJM_-=0Hm7hO7Km7jnLNRk=pRcKYTAcPD4G5qg@mail.gmail.com>
	<52930FA3.3070802@ceptacle.com>
Message-ID: <CALxbBHUQaFd7zA+CW8GUNHE1FMhbmCy7NGgsfsdwnfNrck5xrA@mail.gmail.com>

Thanks Mike for the Tip :-)

I will definitely extend the calculations to include a size-normalized
version. As for transaction propagations, being much smaller the
measurements tend to be much noisier, but given enough samples we
might be able to reconstruct some of the system parameters.

Good idea to attempt to correlate propagation speed and number of
inputs/outputs, might be interesting to see whether processing at the
nodes has an influence.

Regards,
Chris
--
Christian Decker


On Mon, Nov 25, 2013 at 9:51 AM, Michael Gronager <gronager at ceptacle.com> wrote:
> Hi Christian,
>
> Cool - thanks for posting - agree, that it would be nice to normalize
> the results with block size - so divide by size and:
> 1. see if there is a correlation (we all presume there still is)
> 2. plot the delay graph as e.g. normalized to the averaged blocksize or
> lets define a "standard block size" of 200kb or what ever so we can
> compare the plot btw days.
>
> Also, does the correlation of propagation times hold for transaction
> sizes as well (would be ice to find the logical t0 and the constant - I
> guess the interesting measure is not kb but signatures, so number of
> inputs - some correlation with size though).
>
> Best,
>
> Michael
>
> On 24/11/13, 17:37 , Christian Decker wrote:
>> Sure thing, I'm looking for a good way to publish these measurements,
>> but I haven't found a good option yet. They are rather large in size,
>> so I'd rather not serve them along with the website as it hasn't got
>> the capacity. Any suggestions? If the demand is not huge I could
>> provide them on a per user basis.
>> --
>> Christian Decker
>>
>>
>> On Sun, Nov 24, 2013 at 5:26 PM, Gregory Maxwell <gmaxwell at gmail.com> wrote:
>>> On Sun, Nov 24, 2013 at 8:20 AM, Christian Decker
>>> <decker.christian at gmail.com> wrote:
>>>> Since this came up again during the discussion of the Cornell paper I
>>>> thought I'd dig up my measurement code from the Information
>>>> Propagation paper and automate it as much as possible.
>>>
>>> Could you publish the block ids and timestamp sets for each block?
>>>
>>> It would be useful in correlating propagation information against
>>> block characteristics.
>>
>> ------------------------------------------------------------------------------
>> Shape the Mobile Experience: Free Subscription
>> Software experts and developers: Be at the forefront of tech innovation.
>> Intel(R) Software Adrenaline delivers strategic insight and game-changing
>> conversations that shape the rapidly evolving mobile landscape. Sign up now.
>> http://pubads.g.doubleclick.net/gampad/clk?id=63431311&iu=/4140/ostg.clktrk
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>
>
>
> ------------------------------------------------------------------------------
> Shape the Mobile Experience: Free Subscription
> Software experts and developers: Be at the forefront of tech innovation.
> Intel(R) Software Adrenaline delivers strategic insight and game-changing
> conversations that shape the rapidly evolving mobile landscape. Sign up now.
> http://pubads.g.doubleclick.net/gampad/clk?id=63431311&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development



From pete at petertodd.org  Wed Nov 27 15:24:58 2013
From: pete at petertodd.org (Peter Todd)
Date: Wed, 27 Nov 2013 10:24:58 -0500
Subject: [Bitcoin-development] Proof-of-storage txouts
Message-ID: <20131127152458.GA10884@petertodd.org>

So Sarchar and I were talking about his Bitstorage scheme(1) and we came
to the conclusion that it wouldn't work. However he came up with a less
abitious idea that I thought would work: force people to prove they were
still holding your data D by publishing transactions with scriptPubKeys
of the form:

    HASH160 H(D[i:i+n]) EQUALVERIFY {<pubkey> OP_CHECKSIG}

Where pubkey optionally lets you pick a specific person to hold your
data. (so the scheme isn't restricted to miners - hash-only
scriptPubKeys aren't secure) Basically you'd publish the data and store
a much smaller random set of D[] samples. If you ever needed the data in
full, you know it's out there, so it's just a matter of haggling on the
price to get it back. (you may want to do some dry-runs for negotiation
leverage...)

However, I realized you can improve upon this greatly by deriving the
ECC privkeys from the random samples of data instead using H(E_k(D)),
that is, use a block cipher with key k, and then hash that to form the
privkey. Then create a perfectly normal txout paying to the appropriate
pubkey. Now only people who actually have the data can claim the txout,
and everyone doesn't even know the scheme exists at all.

Furthermore you can create key k using k_i=HMAC(i, K), where i in [0,
n], so rewards for the proof can be released incrementally while only
storing a single secret key. Again, actual retrivial isn't necessarily
guaranteed, but the odd dry-run is simple enough.

One last issue is how to distribute k_i, although this is made easier by
the fact that they can be tiny 128-bit numbers - they should however be
signed to avoid DoS attacks as only by processing all the data can the
storage node know if k_i works for the given txout.


1) https://bitcointalk.org/index.php?topic=348868.new#new

-- 
'peter'[:-1]@petertodd.org
00000000000000056738baba2d1f0fb2638555529e0735e41e1ce9e0c946d48a
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 490 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131127/7e0e1652/attachment.sig>

From mike at plan99.net  Wed Nov 27 19:35:15 2013
From: mike at plan99.net (Mike Hearn)
Date: Wed, 27 Nov 2013 20:35:15 +0100
Subject: [Bitcoin-development] Network propagation speeds
In-Reply-To: <CALxbBHUQaFd7zA+CW8GUNHE1FMhbmCy7NGgsfsdwnfNrck5xrA@mail.gmail.com>
References: <CALxbBHWwQXjjET+-GFTKNFPd_yWPjEWGvS-YwUPL+z86J8sw0Q@mail.gmail.com>
	<CAAS2fgQxBVOT1ceWWttH5e2wG7-qJ3LxKKnFBEqLwbz-OwDo3g@mail.gmail.com>
	<CALxbBHX9PACKFJM_-=0Hm7hO7Km7jnLNRk=pRcKYTAcPD4G5qg@mail.gmail.com>
	<52930FA3.3070802@ceptacle.com>
	<CALxbBHUQaFd7zA+CW8GUNHE1FMhbmCy7NGgsfsdwnfNrck5xrA@mail.gmail.com>
Message-ID: <CANEZrP0SBSV_r6jieXSDB6FRFsFDcjxFH5hc4D3BpDgO7QxK6Q@mail.gmail.com>

Hey Christian,

Could you sort the snapshots by date? At the moment they're kind of in a
random order.

Sometimes I wish we had real-time stats too but this is a great start.


On Mon, Nov 25, 2013 at 8:27 PM, Christian Decker <
decker.christian at gmail.com> wrote:

> Thanks Mike for the Tip :-)
>
> I will definitely extend the calculations to include a size-normalized
> version. As for transaction propagations, being much smaller the
> measurements tend to be much noisier, but given enough samples we
> might be able to reconstruct some of the system parameters.
>
> Good idea to attempt to correlate propagation speed and number of
> inputs/outputs, might be interesting to see whether processing at the
> nodes has an influence.
>
> Regards,
> Chris
> --
> Christian Decker
>
>
> On Mon, Nov 25, 2013 at 9:51 AM, Michael Gronager <gronager at ceptacle.com>
> wrote:
> > Hi Christian,
> >
> > Cool - thanks for posting - agree, that it would be nice to normalize
> > the results with block size - so divide by size and:
> > 1. see if there is a correlation (we all presume there still is)
> > 2. plot the delay graph as e.g. normalized to the averaged blocksize or
> > lets define a "standard block size" of 200kb or what ever so we can
> > compare the plot btw days.
> >
> > Also, does the correlation of propagation times hold for transaction
> > sizes as well (would be ice to find the logical t0 and the constant - I
> > guess the interesting measure is not kb but signatures, so number of
> > inputs - some correlation with size though).
> >
> > Best,
> >
> > Michael
> >
> > On 24/11/13, 17:37 , Christian Decker wrote:
> >> Sure thing, I'm looking for a good way to publish these measurements,
> >> but I haven't found a good option yet. They are rather large in size,
> >> so I'd rather not serve them along with the website as it hasn't got
> >> the capacity. Any suggestions? If the demand is not huge I could
> >> provide them on a per user basis.
> >> --
> >> Christian Decker
> >>
> >>
> >> On Sun, Nov 24, 2013 at 5:26 PM, Gregory Maxwell <gmaxwell at gmail.com>
> wrote:
> >>> On Sun, Nov 24, 2013 at 8:20 AM, Christian Decker
> >>> <decker.christian at gmail.com> wrote:
> >>>> Since this came up again during the discussion of the Cornell paper I
> >>>> thought I'd dig up my measurement code from the Information
> >>>> Propagation paper and automate it as much as possible.
> >>>
> >>> Could you publish the block ids and timestamp sets for each block?
> >>>
> >>> It would be useful in correlating propagation information against
> >>> block characteristics.
> >>
> >>
> ------------------------------------------------------------------------------
> >> Shape the Mobile Experience: Free Subscription
> >> Software experts and developers: Be at the forefront of tech innovation.
> >> Intel(R) Software Adrenaline delivers strategic insight and
> game-changing
> >> conversations that shape the rapidly evolving mobile landscape. Sign up
> now.
> >>
> http://pubads.g.doubleclick.net/gampad/clk?id=63431311&iu=/4140/ostg.clktrk
> >> _______________________________________________
> >> Bitcoin-development mailing list
> >> Bitcoin-development at lists.sourceforge.net
> >> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> >>
> >
> >
> >
> ------------------------------------------------------------------------------
> > Shape the Mobile Experience: Free Subscription
> > Software experts and developers: Be at the forefront of tech innovation.
> > Intel(R) Software Adrenaline delivers strategic insight and game-changing
> > conversations that shape the rapidly evolving mobile landscape. Sign up
> now.
> >
> http://pubads.g.doubleclick.net/gampad/clk?id=63431311&iu=/4140/ostg.clktrk
> > _______________________________________________
> > Bitcoin-development mailing list
> > Bitcoin-development at lists.sourceforge.net
> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
> ------------------------------------------------------------------------------
> Shape the Mobile Experience: Free Subscription
> Software experts and developers: Be at the forefront of tech innovation.
> Intel(R) Software Adrenaline delivers strategic insight and game-changing
> conversations that shape the rapidly evolving mobile landscape. Sign up
> now.
> http://pubads.g.doubleclick.net/gampad/clk?id=63431311&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131127/0361951b/attachment.html>

From decker.christian at gmail.com  Wed Nov 27 20:46:50 2013
From: decker.christian at gmail.com (Christian Decker)
Date: Wed, 27 Nov 2013 21:46:50 +0100
Subject: [Bitcoin-development] Network propagation speeds
In-Reply-To: <CANEZrP0SBSV_r6jieXSDB6FRFsFDcjxFH5hc4D3BpDgO7QxK6Q@mail.gmail.com>
References: <CALxbBHWwQXjjET+-GFTKNFPd_yWPjEWGvS-YwUPL+z86J8sw0Q@mail.gmail.com>
	<CAAS2fgQxBVOT1ceWWttH5e2wG7-qJ3LxKKnFBEqLwbz-OwDo3g@mail.gmail.com>
	<CALxbBHX9PACKFJM_-=0Hm7hO7Km7jnLNRk=pRcKYTAcPD4G5qg@mail.gmail.com>
	<52930FA3.3070802@ceptacle.com>
	<CALxbBHUQaFd7zA+CW8GUNHE1FMhbmCy7NGgsfsdwnfNrck5xrA@mail.gmail.com>
	<CANEZrP0SBSV_r6jieXSDB6FRFsFDcjxFH5hc4D3BpDgO7QxK6Q@mail.gmail.com>
Message-ID: <CALxbBHXBCNyWwkthaY=1VuS-H35zxnfEarPqhmJMvkmvCheciw@mail.gmail.com>

Damn, that happens if I do the overview as an afterthought. Fixed :-)

Real time (last 24 hours, last week, last month) are in the pipeline,
just need to find the time to implement access to the collector from
the webpage.
--
Christian Decker


On Wed, Nov 27, 2013 at 8:35 PM, Mike Hearn <mike at plan99.net> wrote:
> Hey Christian,
>
> Could you sort the snapshots by date? At the moment they're kind of in a
> random order.
>
> Sometimes I wish we had real-time stats too but this is a great start.
>
>
> On Mon, Nov 25, 2013 at 8:27 PM, Christian Decker
> <decker.christian at gmail.com> wrote:
>>
>> Thanks Mike for the Tip :-)
>>
>> I will definitely extend the calculations to include a size-normalized
>> version. As for transaction propagations, being much smaller the
>> measurements tend to be much noisier, but given enough samples we
>> might be able to reconstruct some of the system parameters.
>>
>> Good idea to attempt to correlate propagation speed and number of
>> inputs/outputs, might be interesting to see whether processing at the
>> nodes has an influence.
>>
>> Regards,
>> Chris
>> --
>> Christian Decker
>>
>>
>> On Mon, Nov 25, 2013 at 9:51 AM, Michael Gronager <gronager at ceptacle.com>
>> wrote:
>> > Hi Christian,
>> >
>> > Cool - thanks for posting - agree, that it would be nice to normalize
>> > the results with block size - so divide by size and:
>> > 1. see if there is a correlation (we all presume there still is)
>> > 2. plot the delay graph as e.g. normalized to the averaged blocksize or
>> > lets define a "standard block size" of 200kb or what ever so we can
>> > compare the plot btw days.
>> >
>> > Also, does the correlation of propagation times hold for transaction
>> > sizes as well (would be ice to find the logical t0 and the constant - I
>> > guess the interesting measure is not kb but signatures, so number of
>> > inputs - some correlation with size though).
>> >
>> > Best,
>> >
>> > Michael
>> >
>> > On 24/11/13, 17:37 , Christian Decker wrote:
>> >> Sure thing, I'm looking for a good way to publish these measurements,
>> >> but I haven't found a good option yet. They are rather large in size,
>> >> so I'd rather not serve them along with the website as it hasn't got
>> >> the capacity. Any suggestions? If the demand is not huge I could
>> >> provide them on a per user basis.
>> >> --
>> >> Christian Decker
>> >>
>> >>
>> >> On Sun, Nov 24, 2013 at 5:26 PM, Gregory Maxwell <gmaxwell at gmail.com>
>> >> wrote:
>> >>> On Sun, Nov 24, 2013 at 8:20 AM, Christian Decker
>> >>> <decker.christian at gmail.com> wrote:
>> >>>> Since this came up again during the discussion of the Cornell paper I
>> >>>> thought I'd dig up my measurement code from the Information
>> >>>> Propagation paper and automate it as much as possible.
>> >>>
>> >>> Could you publish the block ids and timestamp sets for each block?
>> >>>
>> >>> It would be useful in correlating propagation information against
>> >>> block characteristics.
>> >>
>> >>
>> >> ------------------------------------------------------------------------------
>> >> Shape the Mobile Experience: Free Subscription
>> >> Software experts and developers: Be at the forefront of tech
>> >> innovation.
>> >> Intel(R) Software Adrenaline delivers strategic insight and
>> >> game-changing
>> >> conversations that shape the rapidly evolving mobile landscape. Sign up
>> >> now.
>> >>
>> >> http://pubads.g.doubleclick.net/gampad/clk?id=63431311&iu=/4140/ostg.clktrk
>> >> _______________________________________________
>> >> Bitcoin-development mailing list
>> >> Bitcoin-development at lists.sourceforge.net
>> >> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>> >>
>> >
>> >
>> >
>> > ------------------------------------------------------------------------------
>> > Shape the Mobile Experience: Free Subscription
>> > Software experts and developers: Be at the forefront of tech innovation.
>> > Intel(R) Software Adrenaline delivers strategic insight and
>> > game-changing
>> > conversations that shape the rapidly evolving mobile landscape. Sign up
>> > now.
>> >
>> > http://pubads.g.doubleclick.net/gampad/clk?id=63431311&iu=/4140/ostg.clktrk
>> > _______________________________________________
>> > Bitcoin-development mailing list
>> > Bitcoin-development at lists.sourceforge.net
>> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>
>>
>> ------------------------------------------------------------------------------
>> Shape the Mobile Experience: Free Subscription
>> Software experts and developers: Be at the forefront of tech innovation.
>> Intel(R) Software Adrenaline delivers strategic insight and game-changing
>> conversations that shape the rapidly evolving mobile landscape. Sign up
>> now.
>>
>> http://pubads.g.doubleclick.net/gampad/clk?id=63431311&iu=/4140/ostg.clktrk
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>



