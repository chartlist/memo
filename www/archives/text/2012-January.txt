From pieter.wuille at gmail.com  Sun Jan  1 22:43:33 2012
From: pieter.wuille at gmail.com (Pieter Wuille)
Date: Sun, 1 Jan 2012 23:43:33 +0100
Subject: [Bitcoin-development] [ANN] Bitcoin-seeder v0.1
Message-ID: <20120101224332.GA23076@ulyssis.org>

Hello all,

I've just tagged v0.1.0 of my bitcoin-seeder program on github:

  https://github.com/sipa/bitcoin-seeder

This is the program powering the DNS seed on seed.bitcoin.sipa.be.

It is a crawler for the bitcoin network, with integrated DNS server.

It's not more than a preview release with only mininal functionality. Missing
features include:
* logging
* some configuration options
* daemonization
* ...

It has however been running without problem on my node for over a week now,
so I'm releasing it. Comments and questions are welcome.

The program regularly dumps its database in dnsseed.dat, allowing fast
reinitialization. As the program is far from finished, I do not guarantee that
the file format will remain compatible with future versions.

-- 
Pieter



From tyrell.elden at gmail.com  Mon Jan  2 05:04:03 2012
From: tyrell.elden at gmail.com (Elden Tyrell)
Date: Sun, 1 Jan 2012 21:04:03 -0800
Subject: [Bitcoin-development] does "stubbing" off Merkle trees reduce
	initial download bandwidth?
Message-ID: <jdrds3$3tf$1@dough.gmane.org>

Satoshi's paper mentions that storage requirements for the blockchain 
can be reduced by deleting transactions whose outputs have been spent.

If I understand correctly, this technique can only be used for reducing 
*storage* requirements, not *bandwidth* needed for the initial chain 
download by a high-security client that doesn't trust any of its peers 
-- right?

The rule is "trust the longest valid chain of blocks".  Part of a block 
being "valid" is that each transaction's inputs are unspent and their 
sum exceeds the transaction's outputs unless it is a coinbase.  This 
cannot be verified for "stubbed out" transactions -- they have outputs 
but no inputs, and aren't coinbases.  So a paranoid client booting up 
for the first time needs to be given an un-stubbed chain, right?

Of course, if a client decided to accept a stubbed blocks only when the 
sum of the difficulties in the blocks after it exceeds some number N, 
then attacking it could be made very expensive by picking a large 
enough N.

Please let me know if I have misunderstood something.





From decker.christian at gmail.com  Mon Jan  2 13:31:19 2012
From: decker.christian at gmail.com (Christian Decker)
Date: Mon, 2 Jan 2012 14:31:19 +0100
Subject: [Bitcoin-development] does "stubbing" off Merkle trees reduce
 initial download bandwidth?
In-Reply-To: <jdrds3$3tf$1@dough.gmane.org>
References: <jdrds3$3tf$1@dough.gmane.org>
Message-ID: <CALxbBHU7f1m+p45RHLhN-VGBoXJEi62x5mZUiAe_d5D-5Ga7yA@mail.gmail.com>

It can speed up the initial chain download. A newly created wallet will
have only new key-pairs, hence no incoming transactions (unless we have a
key collision, which is unlikely). So there is no need for a bootstrapping
node to download the chain with transactions. The chain itself can be
verified without the transactions. Later full blocks would be required to
detect usable inputs for future outgoing transactions. As long as you
verify the very last blocks in the chain you can be sure that all
preceeding blocks were also valid.

HTH,
Chris

On Mon, Jan 2, 2012 at 6:04 AM, Elden Tyrell <tyrell.elden at gmail.com> wrote:

> Satoshi's paper mentions that storage requirements for the blockchain
> can be reduced by deleting transactions whose outputs have been spent.
>
> If I understand correctly, this technique can only be used for reducing
> *storage* requirements, not *bandwidth* needed for the initial chain
> download by a high-security client that doesn't trust any of its peers
> -- right?
>
> The rule is "trust the longest valid chain of blocks".  Part of a block
> being "valid" is that each transaction's inputs are unspent and their
> sum exceeds the transaction's outputs unless it is a coinbase.  This
> cannot be verified for "stubbed out" transactions -- they have outputs
> but no inputs, and aren't coinbases.  So a paranoid client booting up
> for the first time needs to be given an un-stubbed chain, right?
>
> Of course, if a client decided to accept a stubbed blocks only when the
> sum of the difficulties in the blocks after it exceeds some number N,
> then attacking it could be made very expensive by picking a large
> enough N.
>
> Please let me know if I have misunderstood something.
>
>
>
>
> ------------------------------------------------------------------------------
> Ridiculously easy VDI. With Citrix VDI-in-a-Box, you don't need a complex
> infrastructure or vast IT resources to deliver seamless, secure access to
> virtual desktops. With this all-in-one solution, easily deploy virtual
> desktops for less than the cost of PCs and save 60% on VDI infrastructure
> costs. Try it free! http://p.sf.net/sfu/Citrix-VDIinabox
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120102/d90a3da4/attachment.html>

From moon at justmoon.de  Mon Jan  2 15:14:32 2012
From: moon at justmoon.de (Stefan Thomas)
Date: Mon, 02 Jan 2012 16:14:32 +0100
Subject: [Bitcoin-development] Alternative to OP_EVAL
In-Reply-To: <alpine.LRH.2.00.1112301214380.9419@theorem.ca>
References: <alpine.LRH.2.00.1112290111310.22327@theorem.ca>
	<1325148259.14431.140661016987461@webmail.messagingengine.com>
	<alpine.LRH.2.00.1112291135040.22327@theorem.ca>
	<CALn1vHHjY6Qq0zEUcWaNzm_eP_JekjrK26zMXfcrfPSydwSKig@mail.gmail.com>
	<alpine.LRH.2.00.1112301214380.9419@theorem.ca>
Message-ID: <4F01C9D8.10107@justmoon.de>

The OP_EVAL discussion went into some private discussion for a bit, so 
here is a summary of what we talked about.

Roconnor pointed out that the currently proposed OP_EVAL removes the 
ability to statically reason about scripts. Justmoon pointed out that 
this is evidenced by the changes to GetSigOpCount:

Currently, the client first counts the number of sigops and if it is 
over a certain limit, it doesn't execute the script at all. This is no 
longer possible with OP_EVAL, since OP_EVAL can stand for any number of 
other operations, which might be part of some piece of data. The script 
that is executed by OP_EVAL can be changed (polymorphic code). Gavin's 
patch deals with this, by counting the sigops at runtime and aborting 
only after the limit has been reached.

Here is an example for a script that based on naive counting contains no 
sigops, but in fact contains 20:

[20 signatures] 20 [pubkey] OP_DUP OP_DUP OP_2DUP OP_3DUP OP_3DUP     
OP_3DUP OP_3DUP OP_3DUP 20 "58959998C76C231F" OP_RIPEMD160 OP_EVAL

RIPEMD160( 58 95 99 98 C7 6C 23 1F )

hashes to

AE4C10400B7DF3A56FE2B32B9906BCF1B1AFE975

which OP_EVAL interprets as

OP_CHECKMULTISIG "400B7DF3A56FE2B32B9906BCF1B1AFE9" OP_DROP

The nonce 58959998C76C231F was generated using this code: 
https://gist.github.com/1546061

Gavin and Amir argued that it is possible to "dry run" the script, 
avoiding the expensive OP_CHECKSIG operation and running only the other 
very cheap operations. However, sipa pointed out that in the presence of 
an OP_CHECKSIG a dry runner cannot predict the outcome of conditional 
branches, so it has to either do the OP_CHECKSIG (and become just a 
regular execution) or it has to follow both branches. Roconnor and 
justmoon suggested the following script to illustrate this point:

[sig] [pubkey]
[some data]
[sig] [pubkey] OP_CHECKSIG OP_IF OP_HASH160 OP_ELSE OP_HASH256 OP_ENDIF
(previous line repeated 33 times with different sigs/pubkeys)
OP_EVAL

This script is valid assuming that the resulting hash from the branch 
that is chosen based on what signatures are valid contains an 
OP_CHECKSIG. (And the initial [sig] and [pubkey] are valid.) But a dry 
runner trying to count how many OP_CHECKSIGs this script contains would 
run into the first OP_CHECKSIG OP_IF and have to run both branches. In 
both branches it would again encounter a OP_CHECKSIG OP_IF and run all 
four branches, etc. In total it has to run (2^33 - 2) * 1.5 SHA256 
operations (8 GHash) and 2^32 - 1 RIPEMD160 operations. Therefore we now 
believe a dry runner is not possible or at least too complicated to be 
involved in protocol rules such as the sigops limit.

As a result people are now on a spectrum from those who feel strongly 
that static analysis is an important property and not something to give 
up easily all the way to those who think it's superfluous and the other 
side is just unnecessarily delaying OP_EVAL deployment.

One thing I want to note is that static analysis is a property for which 
there is a better argument than for other, weaker properties, such as 
limited recursion depth. Bitcoin currently allows you to:

* Tell if a script contains a specific opcode or not
* Count how many times a script will execute an operation at most
* Count how many total operations a script will execute at most
* Count how many signatures a script will execute at most
* Find the maximum length of a datum pushed onto the stack
* Find the maximum number of items that can be pushed onto the stack
* Find the maximum size (in bytes) of the stack
* Calculate how long a script will run at most

OP_EVAL as proposed makes these upper bounds almost meaningless as it 
can contain, indirectly, up to 32 instances of any other opcode. (About 
3-6 instances are currently practical.) The only way to answer these 
questions would then be to fully execute the script.

Suppose we want to one day allow arbitrary scripts as IsStandard, but 
put constraints on them, such as enforcing a subset of allowed opcodes. 
(See list above for other possible restrictions.) If we want to include 
OP_EVAL in the set of allowed opcodes, it's important that OP_EVAL is 
implemented in a way that allows static analysis, because we can then 
allow it while still maintaining other restrictions.

If proponents of the current implementation want to argue that we don't 
need static analysis now, the burden is on them to show how we could 
retrofit it when/if we get to this point or why they think we will never 
want to allow some freedom in IsStandard that includes OP_EVAL.

There are several proposals for OP_EVAL that allow static analysis:

* Using a fixed position reference prefix (sipa)
* Using an execute bit on data set by an opcode (justmoon)
* Using OP_CODEHASH (roconnor)
* Using OP_CHECKEDEVAL (sipa)
* Using OP_HASH160 OP_EQUALVERIFY as a special sigPubKey (gavinandresen)

Let's fully develop these proposals and see how much of a hassle it 
would actually be to get a statically verifiable OP_EVAL. I think that's 
a prerequisite for having the argument on whether it is *worth* the hassle.

(Update: Gavin's latest proposal looks *very* good, so that may settle 
the debate quickly.)




On 12/30/2011 6:19 PM, roconnor at theorem.ca wrote:
> On Sat, 31 Dec 2011, Chris Double wrote:
>
>> On Fri, Dec 30, 2011 at 5:42 AM, <roconnor at theorem.ca> wrote:
>>> Basically OP_DUP lets you duplicate the code on the stack and that 
>>> is the
>>> key to looping.  I'm pretty sure from here we get get Turing 
>>> completeness.
>>> Using the stack operations I expect you can implement the SK-calculus
>>> given an OP_EVAL that allows arbitrary depth.
>>>
>>> OP_EVAL adds dangerously expressive power to the scripting language.
>>
>> If you look at the archives of the concatenative programming mailing
>> list [1] you'll see lots of examples of people creating stack
>> languages with minimal operations that exploit similar functionality
>> to reduce the required built in operations. The discussion on the list
>> is mostly about stack based languages where programs can be pushed on
>> the stack and executed (eg. Joy [2]/Factor/Some Forths).
>>
>> I don't think the scripting engine in bitcoin has the ability to
>> concatenate, append or otherwise manipulate scripts on the stack to be
>> eval'd though does it?
>
> It will limited ability manipulate scripts on the stack through the 
> use of arithmetic and hashing operations, and if OP_CAT, OP_SUBSTR and 
> friends are ever restored, it will have even more abilities.
>
>
>
> ------------------------------------------------------------------------------
> Ridiculously easy VDI. With Citrix VDI-in-a-Box, you don't need a complex
> infrastructure or vast IT resources to deliver seamless, secure access to
> virtual desktops. With this all-in-one solution, easily deploy virtual
> desktops for less than the cost of PCs and save 60% on VDI infrastructure
> costs. Try it free! http://p.sf.net/sfu/Citrix-VDIinabox
>
>
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120102/5e4eb4bb/attachment.html>

From gavinandresen at gmail.com  Mon Jan  2 15:59:00 2012
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Mon, 2 Jan 2012 10:59:00 -0500
Subject: [Bitcoin-development] Alternative to OP_EVAL
In-Reply-To: <4F01C9D8.10107@justmoon.de>
References: <alpine.LRH.2.00.1112290111310.22327@theorem.ca>
	<1325148259.14431.140661016987461@webmail.messagingengine.com>
	<alpine.LRH.2.00.1112291135040.22327@theorem.ca>
	<CALn1vHHjY6Qq0zEUcWaNzm_eP_JekjrK26zMXfcrfPSydwSKig@mail.gmail.com>
	<alpine.LRH.2.00.1112301214380.9419@theorem.ca>
	<4F01C9D8.10107@justmoon.de>
Message-ID: <CABsx9T3gNNmPen=WtCpG8RCChSwpJ73r7WU2Kz_fP31wAQ+jQg@mail.gmail.com>

Here are my latest thoughts on a safer OP_EVAL alternative, inspired
by all the ideas and agitated IRC and email
discussions of the last week or so:

Goal:  Let users publish a short "funding address" that is the hash of
an arbitrary redemption Script revealed when they spend the funds,
implemented in a backwards-compatible-in-the-blockchain way.

Proposal:

A new 'standard' transaction type, "pay to Script hash":

scriptPubKey:  HASH160 <push-20-byte-hash>  EQUAL

Redeemed with the same scriptSig as the OP_EVAL proposal:
<signatures> <serialized Script>

Old clients/miners will ignore <signatures> and just validate that the
hash of <serialized Script> matches.

New clients/miners will recognize the new type of transaction and will
do the following additional validation:

1. Fail validation if there were any operations other than "push data"
in the original scriptSig.
2. Deserialize the top (last) item on the scriptSig stack (fail
validation if it fails to deserialize properly).
3. Run an additional validation on the deserialized script, using the
remaining items on the scriptSig stack and the deserialized script as
the scriptPubKey.


---------------

As Amir said in IRC chat today, "the idea is a hack.... but I like it."

I like it, too-- it is cleaner than OP_EVAL, more straightforward to
implement, and pretty much exactly matches the feature I care about
(moving code from the scriptPubKey to the scriptSig). There are no
special cases like "CODESEPARATORS not allowed in <serialized
script>".

-- 
--
Gavin Andresen



From zgenjix at yahoo.com  Mon Jan  2 16:04:46 2012
From: zgenjix at yahoo.com (Amir Taaki)
Date: Mon, 2 Jan 2012 08:04:46 -0800 (PST)
Subject: [Bitcoin-development] Meeting 21:00 UTC #bitcoin-dev Freenode IRC
Message-ID: <1325520286.43835.YahooMailNeo@web121005.mail.ne1.yahoo.com>

This meeting is to discuss the new OP_EVAL changes coming to bitcoin.

A good summary of the past discussion so far by justmoon can be found:
http://privatepaste.com/4088b049af

Hopefully this can become a weekly thing. For now this is to discuss and inform about the coming changes to bitcoin.

----------

Where: Freenode IRC #bitcoin-dev
When: ?21:00 UTC (16:00 New York time) until 22:00*
What: ?OP_EVAL

Bitcoin is starting decentralising as any healthy free thinking community
should. Projects are thiving and the economy is growing. New ideas are
being realised and will edge out old models disruptively.

My hope is that we don't all become fractured. By having weekly regular
meetings, projects can harmonise in lock step. Concepts and algorithms can
be proposed and debated. You'd be surprised what having a scheduled regular
platform can achieve. A soap-box on an island in central waters.

For me, I don't have time to wade through IRC discussions, forum posts and
mailing lists. At least if the important things are discussed in one place
it makes bitcoin development and the system more accessible.

Before meeting:

- A wiki page is created for in advance of a weekly meeting.
- Announced on forums/mailing lists.
- Throughout the week talking points are added to the meeting page.

After:

- Log of discussion is posted online.
- I will type an accessible summary for the community at large on
http://bitcoinmedia.com/
- Next weekly meeting is scheduled.

Amir Taaki

*We can go over this hour, but this is to stop meetings dwindling off topic
into banal banter and stay focused.



From roconnor at theorem.ca  Mon Jan  2 16:42:31 2012
From: roconnor at theorem.ca (roconnor at theorem.ca)
Date: Mon, 2 Jan 2012 11:42:31 -0500 (EST)
Subject: [Bitcoin-development] Alternative to OP_EVAL
In-Reply-To: <CABsx9T3gNNmPen=WtCpG8RCChSwpJ73r7WU2Kz_fP31wAQ+jQg@mail.gmail.com>
References: <alpine.LRH.2.00.1112290111310.22327@theorem.ca>
	<1325148259.14431.140661016987461@webmail.messagingengine.com>
	<alpine.LRH.2.00.1112291135040.22327@theorem.ca>
	<CALn1vHHjY6Qq0zEUcWaNzm_eP_JekjrK26zMXfcrfPSydwSKig@mail.gmail.com>
	<alpine.LRH.2.00.1112301214380.9419@theorem.ca>
	<4F01C9D8.10107@justmoon.de>
	<CABsx9T3gNNmPen=WtCpG8RCChSwpJ73r7WU2Kz_fP31wAQ+jQg@mail.gmail.com>
Message-ID: <alpine.LRH.2.00.1201021134030.21247@theorem.ca>

Seems ... acceptable from first glance.

Though I propose an ammendent to either

(1)

make the script: OP_NOP1 HASH160 <push-20-byte-hash> EQUAL to make it 
extremely easy to see from the first byte that this is verly likely to be 
a special transaction (or more accurately if the first byte isn't 
OP_NOP1 then you immediately know it isn't a special script and can even 
disregard the token).

or

(2)

If you are feel like spending another byte make the script:
OP_NOP1 <push-special-script-version-number> <special-script>

and assign 1 to this special script, making this case:

OP_NOP1 OP_1 HASH160 <push-20-byte-hash> EQUAL

On Mon, 2 Jan 2012, Gavin Andresen wrote:

> Here are my latest thoughts on a safer OP_EVAL alternative, inspired
> by all the ideas and agitated IRC and email
> discussions of the last week or so:
>
> Goal:  Let users publish a short "funding address" that is the hash of
> an arbitrary redemption Script revealed when they spend the funds,
> implemented in a backwards-compatible-in-the-blockchain way.
>
> Proposal:
>
> A new 'standard' transaction type, "pay to Script hash":
>
> scriptPubKey:  HASH160 <push-20-byte-hash>  EQUAL
>
> Redeemed with the same scriptSig as the OP_EVAL proposal:
> <signatures> <serialized Script>
>
> Old clients/miners will ignore <signatures> and just validate that the
> hash of <serialized Script> matches.
>
> New clients/miners will recognize the new type of transaction and will
> do the following additional validation:
>
> 1. Fail validation if there were any operations other than "push data"
> in the original scriptSig.
> 2. Deserialize the top (last) item on the scriptSig stack (fail
> validation if it fails to deserialize properly).
> 3. Run an additional validation on the deserialized script, using the
> remaining items on the scriptSig stack and the deserialized script as
> the scriptPubKey.
>
>
> ---------------
>
> As Amir said in IRC chat today, "the idea is a hack.... but I like it."
>
> I like it, too-- it is cleaner than OP_EVAL, more straightforward to
> implement, and pretty much exactly matches the feature I care about
> (moving code from the scriptPubKey to the scriptSig). There are no
> special cases like "CODESEPARATORS not allowed in <serialized
> script>".
>
>

-- 
Russell O'Connor                                      <http://r6.ca/>
``All talk about `theft,''' the general counsel of the American Graphophone
Company wrote, ``is the merest claptrap, for there exists no property in
ideas musical, literary or artistic, except as defined by statute.''



From moon at justmoon.de  Mon Jan  2 17:10:25 2012
From: moon at justmoon.de (Stefan Thomas)
Date: Mon, 02 Jan 2012 18:10:25 +0100
Subject: [Bitcoin-development] Alternative to OP_EVAL
In-Reply-To: <CABsx9T3gNNmPen=WtCpG8RCChSwpJ73r7WU2Kz_fP31wAQ+jQg@mail.gmail.com>
References: <alpine.LRH.2.00.1112290111310.22327@theorem.ca>
	<1325148259.14431.140661016987461@webmail.messagingengine.com>
	<alpine.LRH.2.00.1112291135040.22327@theorem.ca>
	<CALn1vHHjY6Qq0zEUcWaNzm_eP_JekjrK26zMXfcrfPSydwSKig@mail.gmail.com>
	<alpine.LRH.2.00.1112301214380.9419@theorem.ca>
	<4F01C9D8.10107@justmoon.de>
	<CABsx9T3gNNmPen=WtCpG8RCChSwpJ73r7WU2Kz_fP31wAQ+jQg@mail.gmail.com>
Message-ID: <4F01E501.3070605@justmoon.de>

+1. I love this proposal.

It's two less bytes than OP_EVAL even.
It allows static analysis.
It doesn't require any change to the script interpreter. (You can do a 
static replacement step between parsing and execution.)
It allows all urgent use cases.
It doesn't consume a NOP. If we ever want recursion or something else, 
we can still add OP_EVAL,... then.

@roconnor:
> 1. make the script: OP_NOP1 HASH160 <push-20-byte-hash> EQUAL to make 
> it extremely easy to see from the first byte that this is verly likely 
> to be a special transaction (or more accurately if the first byte 
> isn't OP_NOP1 then you immediately know it isn't a special script and 
> can even disregard the token). 

I disagree. If people actually do mean HASH160 <hash> EQUAL, let *them* 
add a NOP. Or better to avoid NOP let them use HASH160 <hash> 
EQUALVERIFY 1. Point is, if you don't want code replacement you can 
easily break the pattern. But code replacement will be overwhelmingly 
more common, so it should be as small as possible. Every byte matters.


On 1/2/2012 4:59 PM, Gavin Andresen wrote:
> Here are my latest thoughts on a safer OP_EVAL alternative, inspired
> by all the ideas and agitated IRC and email
> discussions of the last week or so:
>
> Goal:  Let users publish a short "funding address" that is the hash of
> an arbitrary redemption Script revealed when they spend the funds,
> implemented in a backwards-compatible-in-the-blockchain way.
>
> Proposal:
>
> A new 'standard' transaction type, "pay to Script hash":
>
> scriptPubKey:  HASH160<push-20-byte-hash>   EQUAL
>
> Redeemed with the same scriptSig as the OP_EVAL proposal:
> <signatures>  <serialized Script>
>
> Old clients/miners will ignore<signatures>  and just validate that the
> hash of<serialized Script>  matches.
>
> New clients/miners will recognize the new type of transaction and will
> do the following additional validation:
>
> 1. Fail validation if there were any operations other than "push data"
> in the original scriptSig.
> 2. Deserialize the top (last) item on the scriptSig stack (fail
> validation if it fails to deserialize properly).
> 3. Run an additional validation on the deserialized script, using the
> remaining items on the scriptSig stack and the deserialized script as
> the scriptPubKey.
>
>
> ---------------
>
> As Amir said in IRC chat today, "the idea is a hack.... but I like it."
>
> I like it, too-- it is cleaner than OP_EVAL, more straightforward to
> implement, and pretty much exactly matches the feature I care about
> (moving code from the scriptPubKey to the scriptSig). There are no
> special cases like "CODESEPARATORS not allowed in<serialized
> script>".
>




From bitcoin-list at bluematt.me  Mon Jan  2 21:24:12 2012
From: bitcoin-list at bluematt.me (Matt Corallo)
Date: Mon, 02 Jan 2012 13:24:12 -0800
Subject: [Bitcoin-development] Meeting 21:00 UTC #bitcoin-dev Freenode
 IRC
In-Reply-To: <1325520286.43835.YahooMailNeo@web121005.mail.ne1.yahoo.com>
References: <1325520286.43835.YahooMailNeo@web121005.mail.ne1.yahoo.com>
Message-ID: <1325539452.3500.1.camel@BMThinkPad.lan.bluematt.me>

Because many made the mistake and it isnt specified in this email, this
meeting is tomorrow (not 30 minutes ago).

On Mon, 2012-01-02 at 08:04 -0800, Amir Taaki wrote:
> This meeting is to discuss the new OP_EVAL changes coming to bitcoin.
> 
> A good summary of the past discussion so far by justmoon can be found:
> http://privatepaste.com/4088b049af
> 
> Hopefully this can become a weekly thing. For now this is to discuss and inform about the coming changes to bitcoin.
> 
> ----------
> 
> Where: Freenode IRC #bitcoin-dev
> When:  21:00 UTC (16:00 New York time) until 22:00*
> What:  OP_EVAL
> 
> Bitcoin is starting decentralising as any healthy free thinking community
> should. Projects are thiving and the economy is growing. New ideas are
> being realised and will edge out old models disruptively.
> 
> My hope is that we don't all become fractured. By having weekly regular
> meetings, projects can harmonise in lock step. Concepts and algorithms can
> be proposed and debated. You'd be surprised what having a scheduled regular
> platform can achieve. A soap-box on an island in central waters.
> 
> For me, I don't have time to wade through IRC discussions, forum posts and
> mailing lists. At least if the important things are discussed in one place
> it makes bitcoin development and the system more accessible.
> 
> Before meeting:
> 
> - A wiki page is created for in advance of a weekly meeting.
> - Announced on forums/mailing lists.
> - Throughout the week talking points are added to the meeting page.
> 
> After:
> 
> - Log of discussion is posted online.
> - I will type an accessible summary for the community at large on
> http://bitcoinmedia.com/
> - Next weekly meeting is scheduled.
> 
> Amir Taaki
> 
> *We can go over this hour, but this is to stop meetings dwindling off topic
> into banal banter and stay focused.
> 
> ------------------------------------------------------------------------------
> Ridiculously easy VDI. With Citrix VDI-in-a-Box, you don't need a complex
> infrastructure or vast IT resources to deliver seamless, secure access to
> virtual desktops. With this all-in-one solution, easily deploy virtual 
> desktops for less than the cost of PCs and save 60% on VDI infrastructure 
> costs. Try it free! http://p.sf.net/sfu/Citrix-VDIinabox
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development





From tyrell.elden at gmail.com  Mon Jan  2 22:23:16 2012
From: tyrell.elden at gmail.com (Elden Tyrell)
Date: Mon, 2 Jan 2012 14:23:16 -0800
Subject: [Bitcoin-development] does "stubbing" off Merkle trees reduce
	initial download bandwidth?
References: <jdrds3$3tf$1@dough.gmane.org>
	<CALxbBHU7f1m+p45RHLhN-VGBoXJEi62x5mZUiAe_d5D-5Ga7yA@mail.gmail.com>
Message-ID: <jdtaol$3ku$1@dough.gmane.org>

On 2012-01-02 05:31:19 -0800, Christian Decker said:
> Later full blocks would be required to detect usable inputs for future 
> outgoing transactions.

Er, yes, this is what I meant; I guess I should have been more specific.

So, a paranoid client cannot confirm reciept of coins until it has an 
unstubbed copy of the entire chain.  It can do other things (like send 
coins) using a stubbed chain, but it needs the whole unstubbed chain in 
order to be sure that incoming coins haven't already been spent.

Thanks for confirming this.





From gmaxwell at gmail.com  Mon Jan  2 22:41:10 2012
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Mon, 2 Jan 2012 17:41:10 -0500
Subject: [Bitcoin-development] does "stubbing" off Merkle trees reduce
 initial download bandwidth?
In-Reply-To: <jdtaol$3ku$1@dough.gmane.org>
References: <jdrds3$3tf$1@dough.gmane.org>
	<CALxbBHU7f1m+p45RHLhN-VGBoXJEi62x5mZUiAe_d5D-5Ga7yA@mail.gmail.com>
	<jdtaol$3ku$1@dough.gmane.org>
Message-ID: <CAAS2fgTOZKM9c=UvfVW1rajnPQVQMNS4mR5KUqq8p0HreG=vuQ@mail.gmail.com>

On Mon, Jan 2, 2012 at 5:23 PM, Elden Tyrell <tyrell.elden at gmail.com> wrote:
> On 2012-01-02 05:31:19 -0800, Christian Decker said:
>> Later full blocks would be required to detect usable inputs for future
>> outgoing transactions.
>
> Er, yes, this is what I meant; I guess I should have been more specific.
>
> So, a paranoid client cannot confirm reciept of coins until it has an
> unstubbed copy of the entire chain. ?It can do other things (like send
> coins) using a stubbed chain, but it needs the whole unstubbed chain in
> order to be sure that incoming coins haven't already been spent.
>
> Thanks for confirming this.


Er, no?  if a node controls the private keys for a transaction, and
that transaction makes it into the chain then it can safely assume
that its unspent (at least once its buried a few blocks into the
chain).  This is the essence of a SPV node.

What it can't do is perform this function for txn which aren't its
own. Though the system could be extended in a compatible manner to
make this possible: https://bitcointalk.org/index.php?topic=21995.0



From tyrell.elden at gmail.com  Tue Jan  3 01:39:09 2012
From: tyrell.elden at gmail.com (Elden Tyrell)
Date: Mon, 2 Jan 2012 17:39:09 -0800
Subject: [Bitcoin-development] does "stubbing" off Merkle trees reduce
	initial download bandwidth?
References: <jdrds3$3tf$1@dough.gmane.org>
	<CAAS2fgTOZKM9c=UvfVW1rajnPQVQMNS4mR5KUqq8p0HreG=vuQ@mail.gmail.com>
Message-ID: <jdtm7t$4ed$1@dough.gmane.org>

On 2012-01-02 14:41:10 -0800, Gregory Maxwell said:
> make this possible: https://bitcointalk.org/index.php?topic=21995.0

Neat!  I had a similar idea but you've clearly beat me to [a big part of] it.


> Er, no?  if a node controls the private keys for a transaction, and
> that transaction makes it into the chain then it can safely assume
> that its unspent (at least once its buried a few blocks into the
> chain).

I'm not so sure about that.  If you accept X successor blocks as proof 
that none of the transactions in a block re-used an output, then the 
cost of attacking is X*50BTC since the hashpower needed for the attack 
could have earned that much reward.

However, an attacker could use the same faked X-block sequence to 
attack multiple clients by putting several double-spend transactions in 
the first faked block.  This would spread out the cost over more than 
one attack.  So simply checking that the value of the transaction is 
less than X*50 isn't necessarily enough, although the logistics of the 
attack aren't exactly easy.

There's also the question of knowing what the difficulty for those X 
blocks ought to be.  If the attacker controls your network connection 
(e.g. your ISP attacks you) you wouldn't be able to get a second 
opinion on how high the difficulty ought to be, and might get fooled by 
X very-low-difficulty blocks that were each produced with a lot less 
than 50BTC worth of hashpower.

  - e





From zgenjix at yahoo.com  Wed Jan  4 13:23:16 2012
From: zgenjix at yahoo.com (Amir Taaki)
Date: Wed, 4 Jan 2012 05:23:16 -0800 (PST)
Subject: [Bitcoin-development] Meeting 10 Jan 2012 at 21:00 UTC
Message-ID: <1325683396.95180.YahooMailNeo@web121005.mail.ne1.yahoo.com>

Hey,

Will get around to that write-up. Here is the page for next Tuesday:


https://en.bitcoin.it/wiki//10_Jan_2012

Feel free to add talking/discussion points to the agenda.




From mike at plan99.net  Thu Jan  5 23:30:16 2012
From: mike at plan99.net (Mike Hearn)
Date: Fri, 6 Jan 2012 00:30:16 +0100
Subject: [Bitcoin-development] does "stubbing" off Merkle trees reduce
 initial download bandwidth?
In-Reply-To: <jdtm7t$4ed$1@dough.gmane.org>
References: <jdrds3$3tf$1@dough.gmane.org>
	<CAAS2fgTOZKM9c=UvfVW1rajnPQVQMNS4mR5KUqq8p0HreG=vuQ@mail.gmail.com>
	<jdtm7t$4ed$1@dough.gmane.org>
Message-ID: <CANEZrP1ZfSJGaRimJhJ-jCuarSMmJGi5+=vxngDgc6kOKTR8JA@mail.gmail.com>

This thread is discussing two unrelated things.

Your first email asked about transaction pruning ("stubbing"). You're
correct. This doesn't do anything for initial chain download bandwidth or
time. In fact it makes it slower because you have the overhead of deleting
the old transactions. It exists purely to save disk space.

Christians reply is about simplified payment verification (SPV) mode. It is
unrelated to transaction pruning. SPV clients can download only the chain
headers with no bodies all the way from the genesis block until the
creation time of their youngest key. This does reduce initial setup time
and in fact is now implemented in BitCoinJ, but it's still linear in the
length of Bitcoins life, so that's ultimately unsustainable. You need a
regular series of checkpoints signed by a trusted developer and a circular
block store to have truly bounded overheads. The merkle tree is still
useful because it allows for SPV clients to receive only the transactions
of interest yet have nearly the same assurances that downloading full
blocks would give - remote nodes can now hide transactions from you (dos)
but not invent new ones.

SPV clients do not use "number of blocks on top" as a way to decide
validity. They look for the best chain they can find, same as a regular
node does. As Satoshis paper says, if an SPV node has access to the P2P
network and is also talking to you, you can defraud it for as long as you
can dominate the networks hash power (51% attack) because you can create a
harder chain than everyone else can. However your invalid blocks won't be
accepted by the rest of the network regardless of how many there are or how
much work they represent, so as soon as you stop dominating the network the
correct chain will catch up and replace yours, resulting in the fraud being
detected and shown to the SPV user.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120106/d56bcb87/attachment.html>

From zgenjix at yahoo.com  Sat Jan  7 17:21:15 2012
From: zgenjix at yahoo.com (Amir Taaki)
Date: Sat, 7 Jan 2012 09:21:15 -0800 (PST)
Subject: [Bitcoin-development] Pull 748 pay to script hash
Message-ID: <1325956875.73286.YahooMailNeo@web121006.mail.ne1.yahoo.com>

https://github.com/bitcoin/bitcoin/pull/748/files

I'm reading a diff of a now defunct OP_EVAL proposal with the current pay to script hash one.

It might be better for code review if the old pull is reverted and then this one re-requested. That will make it easier to see the real changes.




From david at bitcoin.se  Sat Jan  7 17:20:48 2012
From: david at bitcoin.se (D.H.)
Date: Sat, 7 Jan 2012 18:20:48 +0100
Subject: [Bitcoin-development] Should we get some free advertising on
	StackOverflow?
In-Reply-To: <CANf5GBhu6HJ3pCqSQQu1MkFFLPxA2Gyv16x0sOtZ67Y_ehDH5A@mail.gmail.com>
References: <CANf5GBhu6HJ3pCqSQQu1MkFFLPxA2Gyv16x0sOtZ67Y_ehDH5A@mail.gmail.com>
Message-ID: <CANf5GBhQT81hDYbsyd-j1qYWvpUawE9CbZjZmquU8chs468paA@mail.gmail.com>

Hi all,

StackOverflow has something that they call "Free Vote-Based
Advertising for Open Source Projects". The way it works is that a
suggested 220x250 pixel ad is posted here:
http://meta.stackoverflow.com/questions/114442/open-source-advertising-sidebar-1h-2012.
As soon as it gets 6 upvotes or more it will be included in a rotation
of ads displayed on the right hand side of the StackOverflow site.

"It must be an advertisement soliciting the participation and
contribution of programmers writing actual source code. This is not
intended as a general purpose ad for consumer products which just
happen to be open source. It's for finding programmers who will help
contribute code or other programmery things (documentation, code
review, bug fixes, etc.)."

I remember Gavin talking about the need for testers (I don't know what
the need is for developers). Anyway, we could target the ad towards
whatever we need. If you think that this is a good idea, please post
some ad suggestions in this thread. Please don't post the suggestion
on StackOverflow just yet since we're not allowed to have multiple ads
for the same project and we'll want to make that ad a good one.

D.H.



From gavinandresen at gmail.com  Sat Jan  7 22:48:47 2012
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Sat, 7 Jan 2012 17:48:47 -0500
Subject: [Bitcoin-development] Pull 748 pay to script hash
In-Reply-To: <1325956875.73286.YahooMailNeo@web121006.mail.ne1.yahoo.com>
References: <1325956875.73286.YahooMailNeo@web121006.mail.ne1.yahoo.com>
Message-ID: <CABsx9T00=X+0-59+pQN6MqAox8hnqm-08gr2GA=QWfqe_qSF5g@mail.gmail.com>

> It might be better for code review if the old pull is reverted and then this one re-requested. That will make it easier
> to see the real changes.

I count the 1 major merge then 8 commits to fix bugs or tweak
things...  I just tried reverting them and stopped when I got scared
I'll accidentally revert a fix we do want to keep.

Instead, I updated my gavinandresen/master github branch to the state
of the tree just before the OP_EVAL merge, so for code review purposes
you can look at:

https://github.com/gavinandresen/bitcoin-git/compare/master...pay_to_script_hash

There are unrelated 0.6 pulls in those changes, too, but it should be
pretty obvious what is what.

-- 
--
Gavin Andresen



From zgenjix at yahoo.com  Sat Jan  7 23:11:14 2012
From: zgenjix at yahoo.com (Amir Taaki)
Date: Sat, 7 Jan 2012 15:11:14 -0800 (PST)
Subject: [Bitcoin-development] Pull 748 pay to script hash
In-Reply-To: <CABsx9T00=X+0-59+pQN6MqAox8hnqm-08gr2GA=QWfqe_qSF5g@mail.gmail.com>
References: <1325956875.73286.YahooMailNeo@web121006.mail.ne1.yahoo.com>
	<CABsx9T00=X+0-59+pQN6MqAox8hnqm-08gr2GA=QWfqe_qSF5g@mail.gmail.com>
Message-ID: <1325977874.57604.YahooMailNeo@web121006.mail.ne1.yahoo.com>

OK, here is one thing:

what is the purpose behind counting the number of sig ops after you have executed the script in ConnectInputs?
Seems like it would be too late then.



----- Original Message -----
From: Gavin Andresen <gavinandresen at gmail.com>
To: Amir Taaki <zgenjix at yahoo.com>
Cc: Bitcoin Dev <bitcoin-development at lists.sourceforge.net>
Sent: Saturday, January 7, 2012 10:48 PM
Subject: Re: [Bitcoin-development] Pull 748 pay to script hash

> It might be better for code review if the old pull is reverted and then this one re-requested. That will make it easier
> to see the real changes.

I count the 1 major merge then 8 commits to fix bugs or tweak
things...? I just tried reverting them and stopped when I got scared
I'll accidentally revert a fix we do want to keep.

Instead, I updated my gavinandresen/master github branch to the state
of the tree just before the OP_EVAL merge, so for code review purposes
you can look at:

https://github.com/gavinandresen/bitcoin-git/compare/master...pay_to_script_hash

There are unrelated 0.6 pulls in those changes, too, but it should be
pretty obvious what is what.

-- 
--
Gavin Andresen




From gavinandresen at gmail.com  Sun Jan  8 01:12:35 2012
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Sat, 7 Jan 2012 20:12:35 -0500
Subject: [Bitcoin-development] Pull 748 pay to script hash
In-Reply-To: <1325977874.57604.YahooMailNeo@web121006.mail.ne1.yahoo.com>
References: <1325956875.73286.YahooMailNeo@web121006.mail.ne1.yahoo.com>
	<CABsx9T00=X+0-59+pQN6MqAox8hnqm-08gr2GA=QWfqe_qSF5g@mail.gmail.com>
	<1325977874.57604.YahooMailNeo@web121006.mail.ne1.yahoo.com>
Message-ID: <CABsx9T26Uit2jHkKeZSHOW51p8H31osmBo7JYp8Md6RaBDWPhw@mail.gmail.com>

> what is the purpose behind counting the number of sig ops after you have executed the script in ConnectInputs?
> Seems like it would be too late then.

The purpose is to comply with the "a block shall not contain more than
MAX_BLOCK_SIGOPS (20,000)" rule, under both the old way of counting
(look at the scriptPubKeys and count CHECKMULTISIGs as 20 sigops no
matter what) and the new way (look at both scriptPubKeys and
pay-to-script-hash scripts in the scriptSig, but count CHECKMULTISIGS
preceded by OP_1/2/3/... as 1/2/3 operations).

RE: too late:

Excellent point. I'll refactor ConnectInputs further, and do something like:

FetchInputs()
AreInputsStandard() <-- reject from memory pool if nonstanard
ComputeSigOps()
ComputeFees() <-- reject if too little fees per byte / sigop
ConnectInputs()

Pieter's compressed-public-keys patch (which was just pulled)
interacts with pay-to-script-hash to make ECDSA denial-of-service
attempts less expensive; I think we need to think hard again about
transaction fees before releasing 0.6, and maybe tweak the fee policy
so denial-of-service attacks using compressed public keys and 1-of-3
CHECKMULTISIG transactions is expensive enough to deter would-be
attackers.

-- 
--
Gavin Andresen



From pieter.wuille at gmail.com  Sun Jan  8 16:12:16 2012
From: pieter.wuille at gmail.com (Pieter Wuille)
Date: Sun, 8 Jan 2012 17:12:16 +0100
Subject: [Bitcoin-development] Pull 748 pay to script hash
In-Reply-To: <CABsx9T26Uit2jHkKeZSHOW51p8H31osmBo7JYp8Md6RaBDWPhw@mail.gmail.com>
References: <1325956875.73286.YahooMailNeo@web121006.mail.ne1.yahoo.com>
	<CABsx9T00=X+0-59+pQN6MqAox8hnqm-08gr2GA=QWfqe_qSF5g@mail.gmail.com>
	<1325977874.57604.YahooMailNeo@web121006.mail.ne1.yahoo.com>
	<CABsx9T26Uit2jHkKeZSHOW51p8H31osmBo7JYp8Md6RaBDWPhw@mail.gmail.com>
Message-ID: <20120108161215.GA13828@ulyssis.org>

On Sat, Jan 07, 2012 at 08:12:35PM -0500, Gavin Andresen wrote:
> Pieter's compressed-public-keys patch (which was just pulled)

Uhm, was it? I just added some unit tests though.

> interacts with pay-to-script-hash to make ECDSA denial-of-service
> attempts less expensive; I think we need to think hard again about
> transaction fees before releasing 0.6, and maybe tweak the fee policy
> so denial-of-service attacks using compressed public keys and 1-of-3
> CHECKMULTISIG transactions is expensive enough to deter would-be
> attackers.

Very true; compressed public keys are 32 bytes smaller (so more keys
fit in a script), and are about 5% more CPU intensive to verify.

-- 
Pieter




From zgenjix at yahoo.com  Mon Jan  9 10:08:43 2012
From: zgenjix at yahoo.com (Amir Taaki)
Date: Mon, 9 Jan 2012 02:08:43 -0800 (PST)
Subject: [Bitcoin-development] IRC meeting Tuesday tomorrow 21:00 UTC
Message-ID: <1326103723.24844.YahooMailNeo@web121002.mail.ne1.yahoo.com>

Hey,

I made a list of things to ask about:

https://en.bitcoin.it/wiki//10_Jan_2012

Feel free to add things to the agenda. Those are just random things I wanted to discuss.




From pieter.wuille at gmail.com  Mon Jan  9 13:53:51 2012
From: pieter.wuille at gmail.com (Pieter Wuille)
Date: Mon, 9 Jan 2012 14:53:51 +0100
Subject: [Bitcoin-development] Compressed public keys: import/export and
	test cases
Message-ID: <CAPg+sBhDFCjAn1tRRQhaudtqwsh4vcVbxzm+AA2OuFxN71fwUA@mail.gmail.com>

Hello all,

pull #649 now also defines an import/export format for private keys
whose public key is compressed.

Rationale: even though a compressed and uncompressed public key share
the same actual 32-byte secret, the import/export format needs a
marker that states whether the corresponding compressed or
uncompressed public key should be used (since they have different
addresses).

Format:
* uncompressed: 0x80 + [32-byte secret] + [4 bytes of Hash() of
previous 33 bytes], base58 encoded
* compressed: 0x80 + [32-byte secret] + 0x01 + [4 bytes of Hash()
previous 34 bytes], base58 encoded

Any comments or suggestions regarding this format? Below I've included
3 cases to test implementations with.

Test cases:

case 1:
  * secret (hex):
1111111111111111111111111111111111111111111111111111111111111111
  * uncompressed:
    * secret (base58): 5HwoXVkHoRM8sL2KmNRS217n1g8mPPBomrY7yehCuXC1115WWsh
    * pubkey (hex):
044f355bdcb7cc0af728ef3cceb9615d90684bb5b2ca5f859ab0f0b704075871aa385b6b1b8ead809ca67454d9683fcf2ba03456d6fe2c4abe2b07f0fbdbb2f1c1
    * address (base58): 1MsHWS1BnwMc3tLE8G35UXsS58fKipzB7a
  * compressed:
    * secret (base58): KwntMbt59tTsj8xqpqYqRRWufyjGunvhSyeMo3NTYpFYzZbXJ5Hp
    * pubkey (hex):
034f355bdcb7cc0af728ef3cceb9615d90684bb5b2ca5f859ab0f0b704075871aa
    * address (base58): 1Q1pE5vPGEEMqRcVRMbtBK842Y6Pzo6nK9

case 2:
  * secret (hex):
dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd
  * uncompressed:
    * secret (base58): 5KVzsHJiUxgvBBgtVS7qBTbbYZpwWM4WQNCCyNSiuFCJzYMxg8H
    * pubkey (hex):
04ed83704c95d829046f1ac27806211132102c34e9ac7ffa1b71110658e5b9d1bdedc416f5cefc1db0625cd0c75de8192d2b592d7e3b00bcfb4a0e860d880fd1fc
    * address (base58): 1JyMKvPHkrCQd8jQrqTR1rBsAd1VpRhTiE
  * compressed:
    * secret (base58): L4ezQvyC6QoBhxB4GVs9fAPhUKtbaXYUn8YTqoeXwbevQq4U92vN
    * pubkey (hex):
02ed83704c95d829046f1ac27806211132102c34e9ac7ffa1b71110658e5b9d1bd
    * address (base58): 1NKRhS7iYUGTaAfaR5z8BueAJesqaTyc4a

case 3:
  * secret (hex):
47f7616ea6f9b923076625b4488115de1ef1187f760e65f89eb6f4f7ff04b012
  * uncompressed:
    * secret (base58): 5JMys7YfK72cRVTrbwkq5paxU7vgkMypB55KyXEtN5uSnjV7K8Y
    * pubkey (hex):
042596957532fc37e40486b910802ff45eeaa924548c0e1c080ef804e523ec3ed3ed0a9004acf927666eee18b7f5e8ad72ff100a3bb710a577256fd7ec81eb1cb3
    * address (base58): 1PM35qz2uwCDzcUJtiqDSudAaaLrWRw41L
  * compressed:
    * secret (base58): KydbzBtk6uc7M6dXwEgTEH2sphZxSPbmDSz6kUUHi4eUpSQuhEbq
    * pubkey (hex):
032596957532fc37e40486b910802ff45eeaa924548c0e1c080ef804e523ec3ed3
    * address (base58): 19ck9VKC6KjGxR9LJg4DNMRc45qFrJguvV

-- 
Pieter



From pieter.wuille at gmail.com  Mon Jan  9 13:53:51 2012
From: pieter.wuille at gmail.com (Pieter Wuille)
Date: Mon, 9 Jan 2012 14:53:51 +0100
Subject: [Bitcoin-development] Compressed public keys: import/export and
	test cases
Message-ID: <CAPg+sBhDFCjAn1tRRQhaudtqwsh4vcVbxzm+AA2OuFxN71fwUA@mail.gmail.com>

Hello all,

pull #649 now also defines an import/export format for private keys
whose public key is compressed.

Rationale: even though a compressed and uncompressed public key share
the same actual 32-byte secret, the import/export format needs a
marker that states whether the corresponding compressed or
uncompressed public key should be used (since they have different
addresses).

Format:
* uncompressed: 0x80 + [32-byte secret] + [4 bytes of Hash() of
previous 33 bytes], base58 encoded
* compressed: 0x80 + [32-byte secret] + 0x01 + [4 bytes of Hash()
previous 34 bytes], base58 encoded

Any comments or suggestions regarding this format? Below I've included
3 cases to test implementations with.

Test cases:

case 1:
  * secret (hex):
1111111111111111111111111111111111111111111111111111111111111111
  * uncompressed:
    * secret (base58): 5HwoXVkHoRM8sL2KmNRS217n1g8mPPBomrY7yehCuXC1115WWsh
    * pubkey (hex):
044f355bdcb7cc0af728ef3cceb9615d90684bb5b2ca5f859ab0f0b704075871aa385b6b1b8ead809ca67454d9683fcf2ba03456d6fe2c4abe2b07f0fbdbb2f1c1
    * address (base58): 1MsHWS1BnwMc3tLE8G35UXsS58fKipzB7a
  * compressed:
    * secret (base58): KwntMbt59tTsj8xqpqYqRRWufyjGunvhSyeMo3NTYpFYzZbXJ5Hp
    * pubkey (hex):
034f355bdcb7cc0af728ef3cceb9615d90684bb5b2ca5f859ab0f0b704075871aa
    * address (base58): 1Q1pE5vPGEEMqRcVRMbtBK842Y6Pzo6nK9

case 2:
  * secret (hex):
dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd
  * uncompressed:
    * secret (base58): 5KVzsHJiUxgvBBgtVS7qBTbbYZpwWM4WQNCCyNSiuFCJzYMxg8H
    * pubkey (hex):
04ed83704c95d829046f1ac27806211132102c34e9ac7ffa1b71110658e5b9d1bdedc416f5cefc1db0625cd0c75de8192d2b592d7e3b00bcfb4a0e860d880fd1fc
    * address (base58): 1JyMKvPHkrCQd8jQrqTR1rBsAd1VpRhTiE
  * compressed:
    * secret (base58): L4ezQvyC6QoBhxB4GVs9fAPhUKtbaXYUn8YTqoeXwbevQq4U92vN
    * pubkey (hex):
02ed83704c95d829046f1ac27806211132102c34e9ac7ffa1b71110658e5b9d1bd
    * address (base58): 1NKRhS7iYUGTaAfaR5z8BueAJesqaTyc4a

case 3:
  * secret (hex):
47f7616ea6f9b923076625b4488115de1ef1187f760e65f89eb6f4f7ff04b012
  * uncompressed:
    * secret (base58): 5JMys7YfK72cRVTrbwkq5paxU7vgkMypB55KyXEtN5uSnjV7K8Y
    * pubkey (hex):
042596957532fc37e40486b910802ff45eeaa924548c0e1c080ef804e523ec3ed3ed0a9004acf927666eee18b7f5e8ad72ff100a3bb710a577256fd7ec81eb1cb3
    * address (base58): 1PM35qz2uwCDzcUJtiqDSudAaaLrWRw41L
  * compressed:
    * secret (base58): KydbzBtk6uc7M6dXwEgTEH2sphZxSPbmDSz6kUUHi4eUpSQuhEbq
    * pubkey (hex):
032596957532fc37e40486b910802ff45eeaa924548c0e1c080ef804e523ec3ed3
    * address (base58): 19ck9VKC6KjGxR9LJg4DNMRc45qFrJguvV

-- 
Pieter



From rogerdpack2 at gmail.com  Sat Jan 14 15:19:29 2012
From: rogerdpack2 at gmail.com (Roger Pack)
Date: Sat, 14 Jan 2012 08:19:29 -0700
Subject: [Bitcoin-development] some feedbacks
Message-ID: <CAL1QdWefDYaZhN91ysWQ85Tx8M2MKZerU4fpdVUm14SC9AHfyA@mail.gmail.com>

Since I seemingly could not find the "create new post" link on the
forum, resorting to here...

a few feedbacks:
1) It would be helpful I think to, when the client first starts, to
ask "do you want to set a password to encrypt your wallet'? (if yes
take them to the encrypt wallet dialog).
I had been confused, since I knew 0.5 had "wallet encryption" I
assumed it would prompt on startup...
Also nice might be a message "first we have to synchronize with the
network, this will take several hours, then you'll be ready to go" or
some odd.
2) After synchronizing with the network, I believe the OS X client
started *always* crashing on startup.  Lost the backtrace but will
post it here if I can reproduce it.
3) With the forum I can't seemingly reply or create new posts? (rogerdpack)

Cheers!
-roger-



From pieter.wuille at gmail.com  Sun Jan 15 15:22:27 2012
From: pieter.wuille at gmail.com (Pieter Wuille)
Date: Sun, 15 Jan 2012 16:22:27 +0100
Subject: [Bitcoin-development] some feedbacks
In-Reply-To: <CAL1QdWefDYaZhN91ysWQ85Tx8M2MKZerU4fpdVUm14SC9AHfyA@mail.gmail.com>
References: <CAL1QdWefDYaZhN91ysWQ85Tx8M2MKZerU4fpdVUm14SC9AHfyA@mail.gmail.com>
Message-ID: <20120115152226.GC18357@ulyssis.org>

On Sat, Jan 14, 2012 at 08:19:29AM -0700, Roger Pack wrote:
> Since I seemingly could not find the "create new post" link on the
> forum, resorting to here...
> 
> a few feedbacks:
> 1) It would be helpful I think to, when the client first starts, to
> ask "do you want to set a password to encrypt your wallet'? (if yes
> take them to the encrypt wallet dialog).
> I had been confused, since I knew 0.5 had "wallet encryption" I
> assumed it would prompt on startup...
> Also nice might be a message "first we have to synchronize with the
> network, this will take several hours, then you'll be ready to go" or
> some odd.

This sounds like an easy improvement. Anyone interested in implementing
such a minimal "first-use wizard" ?

> 2) After synchronizing with the network, I believe the OS X client
> started *always* crashing on startup.  Lost the backtrace but will
> post it here if I can reproduce it.

Please do.

> 3) With the forum I can't seemingly reply or create new posts? (rogerdpack)

I believe posting to the forum is restricted to certain boards for newbies.

-- 
PIeter



From zgenjix at yahoo.com  Sun Jan 15 22:09:54 2012
From: zgenjix at yahoo.com (Amir Taaki)
Date: Sun, 15 Jan 2012 14:09:54 -0800 (PST)
Subject: [Bitcoin-development] bitcoin.org SOPA/PIPA blackout
Message-ID: <1326665394.7032.YahooMailNeo@web121002.mail.ne1.yahoo.com>

How is this not the most important world issue right now?

EVERYTHING is under threat. Go nuclear to show our nerd-rage.

Everybody blank your personal sites too. Americans, take to the streets. World, go scream at the US embassy.




From jgarzik at exmulti.com  Sun Jan 15 22:37:05 2012
From: jgarzik at exmulti.com (Jeff Garzik)
Date: Sun, 15 Jan 2012 17:37:05 -0500
Subject: [Bitcoin-development] bitcoin.org SOPA/PIPA blackout
In-Reply-To: <1326665394.7032.YahooMailNeo@web121002.mail.ne1.yahoo.com>
References: <1326665394.7032.YahooMailNeo@web121002.mail.ne1.yahoo.com>
Message-ID: <CA+8xBpfWvLGtF3aP10xjTs-wyD1ia=iKLh3b=B+LqQjpRV5PVQ@mail.gmail.com>

On Sun, Jan 15, 2012 at 5:09 PM, Amir Taaki <zgenjix at yahoo.com> wrote:
> How is this not the most important world issue right now?
>
> EVERYTHING is under threat. Go nuclear to show our nerd-rage.
>
> Everybody blank your personal sites too. Americans, take to the streets. World, go scream at the US embassy.


There are always issues that raise ire and moral outrage.  I would
rather that bitcoin.org stay apolitical -- our users will appreciate
this in the long run.

-- 
Jeff Garzik
exMULTI, Inc.
jgarzik at exmulti.com



From luke at dashjr.org  Mon Jan 16 01:19:34 2012
From: luke at dashjr.org (Luke-Jr)
Date: Sun, 15 Jan 2012 20:19:34 -0500
Subject: [Bitcoin-development] bitcoin.org SOPA/PIPA blackout
In-Reply-To: <CA+8xBpfWvLGtF3aP10xjTs-wyD1ia=iKLh3b=B+LqQjpRV5PVQ@mail.gmail.com>
References: <1326665394.7032.YahooMailNeo@web121002.mail.ne1.yahoo.com>
	<CA+8xBpfWvLGtF3aP10xjTs-wyD1ia=iKLh3b=B+LqQjpRV5PVQ@mail.gmail.com>
Message-ID: <201201152019.36066.luke@dashjr.org>

On Sunday, January 15, 2012 5:37:05 PM Jeff Garzik wrote:
> There are always issues that raise ire and moral outrage.  I would
> rather that bitcoin.org stay apolitical -- our users will appreciate
> this in the long run.

I agree (with the conclusion). There are much more important and urgent 
problems than SOPA/PIPA that we'd need to constantly 'blackout' if we did it 
over every single problem.



From laanwj at gmail.com  Mon Jan 16 07:35:30 2012
From: laanwj at gmail.com (Wladimir)
Date: Mon, 16 Jan 2012 08:35:30 +0100
Subject: [Bitcoin-development] bitcoin.org SOPA/PIPA blackout
In-Reply-To: <201201152019.36066.luke@dashjr.org>
References: <1326665394.7032.YahooMailNeo@web121002.mail.ne1.yahoo.com>
	<CA+8xBpfWvLGtF3aP10xjTs-wyD1ia=iKLh3b=B+LqQjpRV5PVQ@mail.gmail.com>
	<201201152019.36066.luke@dashjr.org>
Message-ID: <CA+s+GJA6vq=9FQw4aHYv0x9xY2E1nenMjzL+vgwCxFWcJM8dZg@mail.gmail.com>

Internet censorship *is* a threat to bitcoin, if we don't stand up for our
rights now we deserve anything that is coming. There will be no "long run".

On Mon, Jan 16, 2012 at 2:19 AM, Luke-Jr <luke at dashjr.org> wrote:

> On Sunday, January 15, 2012 5:37:05 PM Jeff Garzik wrote:
> > There are always issues that raise ire and moral outrage.  I would
> > rather that bitcoin.org stay apolitical -- our users will appreciate
> > this in the long run.
>
> I agree (with the conclusion). There are much more important and urgent
> problems than SOPA/PIPA that we'd need to constantly 'blackout' if we did
> it
> over every single problem.
>
>
> ------------------------------------------------------------------------------
> RSA(R) Conference 2012
> Mar 27 - Feb 2
> Save $400 by Jan. 27
> Register now!
> http://p.sf.net/sfu/rsa-sfdev2dev2
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120116/091050ce/attachment.html>

From gmaxwell at gmail.com  Mon Jan 16 08:12:09 2012
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Mon, 16 Jan 2012 03:12:09 -0500
Subject: [Bitcoin-development] bitcoin.org SOPA/PIPA blackout
In-Reply-To: <CA+s+GJA6vq=9FQw4aHYv0x9xY2E1nenMjzL+vgwCxFWcJM8dZg@mail.gmail.com>
References: <1326665394.7032.YahooMailNeo@web121002.mail.ne1.yahoo.com>
	<CA+8xBpfWvLGtF3aP10xjTs-wyD1ia=iKLh3b=B+LqQjpRV5PVQ@mail.gmail.com>
	<201201152019.36066.luke@dashjr.org>
	<CA+s+GJA6vq=9FQw4aHYv0x9xY2E1nenMjzL+vgwCxFWcJM8dZg@mail.gmail.com>
Message-ID: <CAAS2fgQYijky7g-K4dZF6x9NktnADuxRO6A=YAJxCF2gj85JHg@mail.gmail.com>

On Mon, Jan 16, 2012 at 2:35 AM, Wladimir <laanwj at gmail.com> wrote:
> Internet censorship *is* a threat to bitcoin, if we don't stand up for our
> rights now we deserve anything that is coming. There will be no "long run".

Very few people actually care if they can load that particular URL ...
if you were talking about the forums it might matter more.   It also
might make sense to run some informative popup, except people are
going to be seeing them all over the internet on higher traffic sites.

E.g.: http://en.wikipedia.org/wiki/File:Wikipedia_SOPA_Blackout_Design_%28derivative_A%29.png



From laanwj at gmail.com  Mon Jan 16 08:29:07 2012
From: laanwj at gmail.com (Wladimir)
Date: Mon, 16 Jan 2012 09:29:07 +0100
Subject: [Bitcoin-development] bitcoin.org SOPA/PIPA blackout
In-Reply-To: <CAAS2fgQYijky7g-K4dZF6x9NktnADuxRO6A=YAJxCF2gj85JHg@mail.gmail.com>
References: <1326665394.7032.YahooMailNeo@web121002.mail.ne1.yahoo.com>
	<CA+8xBpfWvLGtF3aP10xjTs-wyD1ia=iKLh3b=B+LqQjpRV5PVQ@mail.gmail.com>
	<201201152019.36066.luke@dashjr.org>
	<CA+s+GJA6vq=9FQw4aHYv0x9xY2E1nenMjzL+vgwCxFWcJM8dZg@mail.gmail.com>
	<CAAS2fgQYijky7g-K4dZF6x9NktnADuxRO6A=YAJxCF2gj85JHg@mail.gmail.com>
Message-ID: <CA+s+GJBdQegz2=kDEbAmPw4wTVdduZhc2B+XnO49g6ZEXB8TKQ@mail.gmail.com>

On Mon, Jan 16, 2012 at 9:12 AM, Gregory Maxwell <gmaxwell at gmail.com> wrote:

> On Mon, Jan 16, 2012 at 2:35 AM, Wladimir <laanwj at gmail.com> wrote:
> > Internet censorship *is* a threat to bitcoin, if we don't stand up for
> our
> > rights now we deserve anything that is coming. There will be no "long
> run".
>
> Very few people actually care if they can load that particular URL ...
> if you were talking about the forums it might matter more.   It also
> might make sense to run some informative popup, except people are
> going to be seeing them all over the internet on higher traffic sites.
>

Agreed, a notice would be enough. No need to make the entire site
inaccessible either.

Wladimir
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120116/29739d41/attachment.html>

From support at pi.uk.com  Mon Jan 16 15:45:17 2012
From: support at pi.uk.com (Ben Reeves)
Date: Mon, 16 Jan 2012 15:45:17 +0000
Subject: [Bitcoin-development] BIP Submission
Message-ID: <CAPBPUnruXZC049F8d08LE3BmCG_+L__Ffg95BV_-LtqE3tXfVQ@mail.gmail.com>

Hi everyone,

I wish to submit the following draft BIP for discussion and possible
formal BIP review.

https://en.bitcoin.it/wiki/BIP_M_of_2_DRAFT

It is a proposed alternative to BIP 16 ("/P2SH/").

Thank you,
Ben Reeves



From luke at dashjr.org  Mon Jan 16 16:14:08 2012
From: luke at dashjr.org (Luke-Jr)
Date: Mon, 16 Jan 2012 11:14:08 -0500
Subject: [Bitcoin-development] 0.5.2 - rush?
Message-ID: <201201161114.09561.luke@dashjr.org>

Mushoz makes a good point:
	https://bitcointalk.org/index.php?topic=58450.msg695052#msg695052

Do we have enough downloads on 0.5.2rc1 to get the final rushed out and onto 
the website?



From gavinandresen at gmail.com  Mon Jan 16 21:22:54 2012
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Mon, 16 Jan 2012 16:22:54 -0500
Subject: [Bitcoin-development] BIP Submission
In-Reply-To: <CAPBPUnruXZC049F8d08LE3BmCG_+L__Ffg95BV_-LtqE3tXfVQ@mail.gmail.com>
References: <CAPBPUnruXZC049F8d08LE3BmCG_+L__Ffg95BV_-LtqE3tXfVQ@mail.gmail.com>
Message-ID: <CABsx9T0CKJ8W8d4yojhjzQkEzP5j+jsw0i2mY2bLBKXPC5XmBQ@mail.gmail.com>

Your approach won't work-- OP_ADD is limited to 4-byte operands.  Changing
that would require a "hard" blockchain split / entire-network-upgrade.

I wish to submit the following draft BIP for discussion and possible
> formal BIP review.
>
> https://en.bitcoin.it/wiki/BIP_M_of_2_DRAFT
>
> It is a proposed alternative to BIP 16 ("/P2SH/").
>
> Thank you,
> Ben Reeves
>

-- 
--
Gavin Andresen
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120116/06905a0f/attachment.html>

From zgenjix at yahoo.com  Tue Jan 17 00:30:27 2012
From: zgenjix at yahoo.com (Amir Taaki)
Date: Mon, 16 Jan 2012 16:30:27 -0800 (PST)
Subject: [Bitcoin-development] bitcoin.org SOPA/PIPA blackout
In-Reply-To: <CA+8xBpfWvLGtF3aP10xjTs-wyD1ia=iKLh3b=B+LqQjpRV5PVQ@mail.gmail.com>
References: <1326665394.7032.YahooMailNeo@web121002.mail.ne1.yahoo.com>
	<CA+8xBpfWvLGtF3aP10xjTs-wyD1ia=iKLh3b=B+LqQjpRV5PVQ@mail.gmail.com>
Message-ID: <1326760227.63298.YahooMailNeo@web121006.mail.ne1.yahoo.com>

Bunk argument. This is an issue that affects bitcoin directly.

Wikipedia has far more need to remain neutral and apolitical than bitcoin ever does- you've read Satoshi's politically charged whitepaper or seen the genesis block quote.

http://en.wikipedia.org/wiki/Wikipedia:SOPA_initiative/Action

The Wikipedia community decided on a full and global blackout. Bitcoin should do the same in unison with the rest of the web- sites like Reddit, 4chan and Wikipedia.

It's funny / almost comical how you consign this to being just another issue or case of moral alarm. Sad.



----- Original Message -----
From: Jeff Garzik <jgarzik at exmulti.com>
To: Amir Taaki <zgenjix at yahoo.com>
Cc: "bitcoin-development at lists.sourceforge.net" <bitcoin-development at lists.sourceforge.net>
Sent: Sunday, January 15, 2012 10:37 PM
Subject: Re: [Bitcoin-development] bitcoin.org SOPA/PIPA blackout

On Sun, Jan 15, 2012 at 5:09 PM, Amir Taaki <zgenjix at yahoo.com> wrote:
> How is this not the most important world issue right now?
>
> EVERYTHING is under threat. Go nuclear to show our nerd-rage.
>
> Everybody blank your personal sites too. Americans, take to the streets. World, go scream at the US embassy.


There are always issues that raise ire and moral outrage.? I would
rather that bitcoin.org stay apolitical -- our users will appreciate
this in the long run.

-- 
Jeff Garzik
exMULTI, Inc.
jgarzik at exmulti.com




From etotheipi at gmail.com  Tue Jan 17 00:46:39 2012
From: etotheipi at gmail.com (Alan Reiner)
Date: Mon, 16 Jan 2012 19:46:39 -0500
Subject: [Bitcoin-development] bitcoin.org SOPA/PIPA blackout
In-Reply-To: <1326760227.63298.YahooMailNeo@web121006.mail.ne1.yahoo.com>
References: <1326665394.7032.YahooMailNeo@web121002.mail.ne1.yahoo.com>	<CA+8xBpfWvLGtF3aP10xjTs-wyD1ia=iKLh3b=B+LqQjpRV5PVQ@mail.gmail.com>
	<1326760227.63298.YahooMailNeo@web121006.mail.ne1.yahoo.com>
Message-ID: <4F14C4EF.5070709@gmail.com>

You guys are representing both extremes of the issue.  In response to 
Jeff and Luke-Jr, I don't see how this is /just any other poltical 
issue/.  It strikes at the heart of everything Bitcoin is about.  
Barring Bitcoin-specific legislation, I don't see how any legislation 
could be more relevant to Bitcoin and the community around it.

On the other hand, Bitcoin is still a non-entity, and shouldn't get in 
the business of making statements.  A central voice for Bitcoin gives 
the impression that it is actually centralized, and one that has 
opinions.  Plus I wouldn't be surprised if some, heavily-invested 
Bitcoin users were of the opinion that SOPA/PIPA/whatever could be a 
huge profit for themselves:  once SOPA kicks in and businesses around 
the world start getting cut off for legit or illegitimate purposes, a 
lot of them could potentially switch to Bitcoin to keep their business 
going.  That could be a huge boon for Bitcoin.  You may not agree it's 
worth the tradeoff, but people are selfish and may not actually 
understand or even care about SOPA legislation itself.

I think it's /not inappropriate/ for something to be mentioned on the 
website about Bitcoin's philosophy being threatened by SOPA, but I agree 
Bitcoin should avoid making any bold political stands.  Users could be 
reminded that SOPA affects yet another thing they care about, but it 
might be better to avoid it altogether.  If any response is made, it 
should be a very light one.

-Alan


On 01/16/2012 07:30 PM, Amir Taaki wrote:
> Bunk argument. This is an issue that affects bitcoin directly.
>
> Wikipedia has far more need to remain neutral and apolitical than bitcoin ever does- you've read Satoshi's politically charged whitepaper or seen the genesis block quote.
>
> http://en.wikipedia.org/wiki/Wikipedia:SOPA_initiative/Action
>
> The Wikipedia community decided on a full and global blackout. Bitcoin should do the same in unison with the rest of the web- sites like Reddit, 4chan and Wikipedia.
>
> It's funny / almost comical how you consign this to being just another issue or case of moral alarm. Sad.
>
>
>
> ----- Original Message -----
> From: Jeff Garzik<jgarzik at exmulti.com>
> To: Amir Taaki<zgenjix at yahoo.com>
> Cc: "bitcoin-development at lists.sourceforge.net"<bitcoin-development at lists.sourceforge.net>
> Sent: Sunday, January 15, 2012 10:37 PM
> Subject: Re: [Bitcoin-development] bitcoin.org SOPA/PIPA blackout
>
> On Sun, Jan 15, 2012 at 5:09 PM, Amir Taaki<zgenjix at yahoo.com>  wrote:
>> How is this not the most important world issue right now?
>>
>> EVERYTHING is under threat. Go nuclear to show our nerd-rage.
>>
>> Everybody blank your personal sites too. Americans, take to the streets. World, go scream at the US embassy.
>
> There are always issues that raise ire and moral outrage.  I would
> rather that bitcoin.org stay apolitical -- our users will appreciate
> this in the long run.
>

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120116/5083fc3c/attachment.html>

From slush at centrum.cz  Tue Jan 17 00:59:25 2012
From: slush at centrum.cz (slush)
Date: Tue, 17 Jan 2012 01:59:25 +0100
Subject: [Bitcoin-development] bitcoin.org SOPA/PIPA blackout
In-Reply-To: <4F14C4EF.5070709@gmail.com>
References: <1326665394.7032.YahooMailNeo@web121002.mail.ne1.yahoo.com>
	<CA+8xBpfWvLGtF3aP10xjTs-wyD1ia=iKLh3b=B+LqQjpRV5PVQ@mail.gmail.com>
	<1326760227.63298.YahooMailNeo@web121006.mail.ne1.yahoo.com>
	<4F14C4EF.5070709@gmail.com>
Message-ID: <CAJna-HjMSvnJxXnnvC_mGEsHNX=7yaDU3W22P8LwbbbuX2dEvQ@mail.gmail.com>

>  I agree Bitcoin should avoid making any bold political stands.

I agree on this. Please don't turn Bitcoin project/homepage into some
political agitation. Not everybody care about political attitude of main
project developers.

slush

On Tue, Jan 17, 2012 at 1:46 AM, Alan Reiner <etotheipi at gmail.com> wrote:

> **
> You guys are representing both extremes of the issue.  In response to Jeff
> and Luke-Jr, I don't see how this is *just any other poltical issue*.  It
> strikes at the heart of everything Bitcoin is about.  Barring
> Bitcoin-specific legislation, I don't see how any legislation could be more
> relevant to Bitcoin and the community around it.
>
> On the other hand, Bitcoin is still a non-entity, and shouldn't get in the
> business of making statements.  A central voice for Bitcoin gives the
> impression that it is actually centralized, and one that has opinions.
> Plus I wouldn't be surprised if some, heavily-invested Bitcoin users were
> of the opinion that SOPA/PIPA/whatever could be a huge profit for
> themselves:  once SOPA kicks in and businesses around the world start
> getting cut off for legit or illegitimate purposes, a lot of them could
> potentially switch to Bitcoin to keep their business going.  That could be
> a huge boon for Bitcoin.  You may not agree it's worth the tradeoff, but
> people are selfish and may not actually understand or even care about SOPA
> legislation itself.
>
> I think it's *not inappropriate* for something to be mentioned on the
> website about Bitcoin's philosophy being threatened by SOPA, but I agree
> Bitcoin should avoid making any bold political stands.  Users could be
> reminded that SOPA affects yet another thing they care about, but it might
> be better to avoid it altogether.  If any response is made, it should be a
> very light one.
>
> -Alan
>
>
>
> On 01/16/2012 07:30 PM, Amir Taaki wrote:
>
> Bunk argument. This is an issue that affects bitcoin directly.
>
> Wikipedia has far more need to remain neutral and apolitical than bitcoin ever does- you've read Satoshi's politically charged whitepaper or seen the genesis block quote.
> http://en.wikipedia.org/wiki/Wikipedia:SOPA_initiative/Action
>
> The Wikipedia community decided on a full and global blackout. Bitcoin should do the same in unison with the rest of the web- sites like Reddit, 4chan and Wikipedia.
>
> It's funny / almost comical how you consign this to being just another issue or case of moral alarm. Sad.
>
>
>
> ----- Original Message -----
> From: Jeff Garzik <jgarzik at exmulti.com> <jgarzik at exmulti.com>
> To: Amir Taaki <zgenjix at yahoo.com> <zgenjix at yahoo.com>
> Cc: "bitcoin-development at lists.sourceforge.net" <bitcoin-development at lists.sourceforge.net> <bitcoin-development at lists.sourceforge.net> <bitcoin-development at lists.sourceforge.net>
> Sent: Sunday, January 15, 2012 10:37 PM
> Subject: Re: [Bitcoin-development] bitcoin.org SOPA/PIPA blackout
>
> On Sun, Jan 15, 2012 at 5:09 PM, Amir Taaki <zgenjix at yahoo.com> <zgenjix at yahoo.com> wrote:
>
>  How is this not the most important world issue right now?
>
> EVERYTHING is under threat. Go nuclear to show our nerd-rage.
>
> Everybody blank your personal sites too. Americans, take to the streets. World, go scream at the US embassy.
>
>  There are always issues that raise ire and moral outrage.  I would
> rather that bitcoin.org stay apolitical -- our users will appreciate
> this in the long run.
>
>
>
>
>
> ------------------------------------------------------------------------------
> Keep Your Developer Skills Current with LearnDevNow!
> The most comprehensive online learning library for Microsoft developers
> is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3, MVC3,
> Metro Style Apps, more. Free future releases when you subscribe now!
> http://p.sf.net/sfu/learndevnow-d2d
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120117/61e06bb7/attachment.html>

From luke at dashjr.org  Tue Jan 17 02:25:20 2012
From: luke at dashjr.org (Luke-Jr)
Date: Mon, 16 Jan 2012 21:25:20 -0500
Subject: [Bitcoin-development] bitcoin.org SOPA/PIPA blackout
In-Reply-To: <4F14C4EF.5070709@gmail.com>
References: <1326665394.7032.YahooMailNeo@web121002.mail.ne1.yahoo.com>
	<1326760227.63298.YahooMailNeo@web121006.mail.ne1.yahoo.com>
	<4F14C4EF.5070709@gmail.com>
Message-ID: <201201162125.22141.luke@dashjr.org>

On Monday, January 16, 2012 7:46:39 PM Alan Reiner wrote:
> In response to Jeff and Luke-Jr, I don't see how this is /just any other
> poltical issue/.  It strikes at the heart of everything Bitcoin is about.

Sorry, Bitcoin is not about the same thing to everyone. For me, Bitcoin is 
about one thing: providing a monetary system for the Tonal number system. 
Otherwise, it would be merely an interesting project I have no real concern 
with. To assume everyone has the same interests is a sure-fire way to prevent 
widescale adoption. If you want Bitcoin to succeed, don't try to impose a 
single purpose/"about" on everyone using it (which a "blackout" would do).

> Barring Bitcoin-specific legislation, I don't see how any legislation
> could be more relevant to Bitcoin and the community around it.

Bitcoin is an innovative new currency. How is a bill on internet censorship 
(which is badly needed, even if not in the form of SOPA/PIPA) directly 
relevant? I don't think it is.




From da2ce7 at gmail.com  Tue Jan 17 02:35:00 2012
From: da2ce7 at gmail.com (Cameron Garnham)
Date: Tue, 17 Jan 2012 13:35:00 +1100
Subject: [Bitcoin-development] bitcoin.org SOPA/PIPA blackout
In-Reply-To: <CAJna-HjMSvnJxXnnvC_mGEsHNX=7yaDU3W22P8LwbbbuX2dEvQ@mail.gmail.com>
References: <1326665394.7032.YahooMailNeo@web121002.mail.ne1.yahoo.com>
	<CA+8xBpfWvLGtF3aP10xjTs-wyD1ia=iKLh3b=B+LqQjpRV5PVQ@mail.gmail.com>
	<1326760227.63298.YahooMailNeo@web121006.mail.ne1.yahoo.com>
	<4F14C4EF.5070709@gmail.com>
	<CAJna-HjMSvnJxXnnvC_mGEsHNX=7yaDU3W22P8LwbbbuX2dEvQ@mail.gmail.com>
Message-ID: <4F14DE54.9010804@gmail.com>

I think that bitcoin.org should remain apolitical.  However maybe it 
would be good if the blackout to take effect on bitcointalk.org if 
theymos and Sirius believes it is appropriate.

Bitcoin.org should provide bitcoin.




On 17/01/2012 11:59 AM, slush wrote:
> >  I agree Bitcoin should avoid making any bold political stands.
>
> I agree on this. Please don't turn Bitcoin project/homepage into some 
> political agitation. Not everybody care about political attitude of 
> main project developers.
>
> slush
>
> On Tue, Jan 17, 2012 at 1:46 AM, Alan Reiner <etotheipi at gmail.com 
> <mailto:etotheipi at gmail.com>> wrote:
>
>     You guys are representing both extremes of the issue.  In response
>     to Jeff and Luke-Jr, I don't see how this is /just any other
>     poltical issue/.  It strikes at the heart of everything Bitcoin is
>     about.  Barring Bitcoin-specific legislation, I don't see how any
>     legislation could be more relevant to Bitcoin and the community
>     around it.
>
>     On the other hand, Bitcoin is still a non-entity, and shouldn't
>     get in the business of making statements.  A central voice for
>     Bitcoin gives the impression that it is actually centralized, and
>     one that has opinions.  Plus I wouldn't be surprised if some,
>     heavily-invested Bitcoin users were of the opinion that
>     SOPA/PIPA/whatever could be a huge profit for themselves:  once
>     SOPA kicks in and businesses around the world start getting cut
>     off for legit or illegitimate purposes, a lot of them could
>     potentially switch to Bitcoin to keep their business going.  That
>     could be a huge boon for Bitcoin.  You may not agree it's worth
>     the tradeoff, but people are selfish and may not actually
>     understand or even care about SOPA legislation itself.
>
>     I think it's /not inappropriate/ for something to be mentioned on
>     the website about Bitcoin's philosophy being threatened by SOPA,
>     but I agree Bitcoin should avoid making any bold political
>     stands.  Users could be reminded that SOPA affects yet another
>     thing they care about, but it might be better to avoid it
>     altogether.  If any response is made, it should be a very light one.
>
>     -Alan
>
>
>
>     On 01/16/2012 07:30 PM, Amir Taaki wrote:
>>     Bunk argument. This is an issue that affects bitcoin directly.
>>
>>     Wikipedia has far more need to remain neutral and apolitical than bitcoin ever does- you've read Satoshi's politically charged whitepaper or seen the genesis block quote.
>>
>>     http://en.wikipedia.org/wiki/Wikipedia:SOPA_initiative/Action
>>
>>     The Wikipedia community decided on a full and global blackout. Bitcoin should do the same in unison with the rest of the web- sites like Reddit, 4chan and Wikipedia.
>>
>>     It's funny / almost comical how you consign this to being just another issue or case of moral alarm. Sad.
>>
>>
>>
>>     ----- Original Message -----
>>     From: Jeff Garzik<jgarzik at exmulti.com>  <mailto:jgarzik at exmulti.com>
>>     To: Amir Taaki<zgenjix at yahoo.com>  <mailto:zgenjix at yahoo.com>
>>     Cc:"bitcoin-development at lists.sourceforge.net"  <mailto:bitcoin-development at lists.sourceforge.net>  <bitcoin-development at lists.sourceforge.net>  <mailto:bitcoin-development at lists.sourceforge.net>
>>     Sent: Sunday, January 15, 2012 10:37 PM
>>     Subject: Re: [Bitcoin-development]bitcoin.org  <http://bitcoin.org>  SOPA/PIPA blackout
>>
>>     On Sun, Jan 15, 2012 at 5:09 PM, Amir Taaki<zgenjix at yahoo.com>  <mailto:zgenjix at yahoo.com>  wrote:
>>>     How is this not the most important world issue right now?
>>>
>>>     EVERYTHING is under threat. Go nuclear to show our nerd-rage.
>>>
>>>     Everybody blank your personal sites too. Americans, take to the streets. World, go scream at the US embassy.
>>     There are always issues that raise ire and moral outrage.  I would
>>     rather thatbitcoin.org  <http://bitcoin.org>  stay apolitical -- our users will appreciate
>>     this in the long run.
>>
>
>
>     ------------------------------------------------------------------------------
>     Keep Your Developer Skills Current with LearnDevNow!
>     The most comprehensive online learning library for Microsoft
>     developers
>     is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3,
>     MVC3,
>     Metro Style Apps, more. Free future releases when you subscribe now!
>     http://p.sf.net/sfu/learndevnow-d2d
>     _______________________________________________
>     Bitcoin-development mailing list
>     Bitcoin-development at lists.sourceforge.net
>     <mailto:Bitcoin-development at lists.sourceforge.net>
>     https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
>
>
> ------------------------------------------------------------------------------
> Keep Your Developer Skills Current with LearnDevNow!
> The most comprehensive online learning library for Microsoft developers
> is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3, MVC3,
> Metro Style Apps, more. Free future releases when you subscribe now!
> http://p.sf.net/sfu/learndevnow-d2d
>
>
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120117/b2a27c23/attachment.html>

From k at old.school.nz  Tue Jan 17 02:37:31 2012
From: k at old.school.nz (Kyle Henderson)
Date: Tue, 17 Jan 2012 15:37:31 +1300
Subject: [Bitcoin-development] bitcoin.org SOPA/PIPA blackout
In-Reply-To: <CA+8xBpfWvLGtF3aP10xjTs-wyD1ia=iKLh3b=B+LqQjpRV5PVQ@mail.gmail.com>
References: <1326665394.7032.YahooMailNeo@web121002.mail.ne1.yahoo.com>
	<CA+8xBpfWvLGtF3aP10xjTs-wyD1ia=iKLh3b=B+LqQjpRV5PVQ@mail.gmail.com>
Message-ID: <CA+QPp0q8MCMfz2mz+vatG6E62vhNZEip0ZhxjbKk1L2HyLARYg@mail.gmail.com>

On Mon, Jan 16, 2012 at 11:37 AM, Jeff Garzik <jgarzik at exmulti.com> wrote:

>
> There are always issues that raise ire and moral outrage.  I would
> rather that bitcoin.org stay apolitical -- our users will appreciate
> this in the long run.
>
>
Agreed :)

For those that believe one particularly noisy country in the North America
region with a policy called SOPA or PIPA directly affects Bitcoin - can you
point out precisely where it does so?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120117/c4523216/attachment.html>

From gmaxwell at gmail.com  Tue Jan 17 06:15:11 2012
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Tue, 17 Jan 2012 01:15:11 -0500
Subject: [Bitcoin-development] bitcoin.org SOPA/PIPA blackout
In-Reply-To: <CA+QPp0q8MCMfz2mz+vatG6E62vhNZEip0ZhxjbKk1L2HyLARYg@mail.gmail.com>
References: <1326665394.7032.YahooMailNeo@web121002.mail.ne1.yahoo.com>
	<CA+8xBpfWvLGtF3aP10xjTs-wyD1ia=iKLh3b=B+LqQjpRV5PVQ@mail.gmail.com>
	<CA+QPp0q8MCMfz2mz+vatG6E62vhNZEip0ZhxjbKk1L2HyLARYg@mail.gmail.com>
Message-ID: <CAAS2fgRTpNYQ1pUopLQeJmtQbQqKo1rkNX8nNdvnftQyTtoevA@mail.gmail.com>

On Mon, Jan 16, 2012 at 9:37 PM, Kyle Henderson <k at old.school.nz> wrote:
> For those that believe one particularly noisy country in the North America
> region with a policy called SOPA or PIPA directly affects Bitcoin - can you
> point out precisely where it does so?

In addition to the concerns about internet freedom and domain name
system filtering which are against the interests of bitcoin users and
the bitcoin system generally, SOPA contains new requirements for
payment networks which may adversely impact Bitcoin services
businesses and limit their ability to do business in the US and other
places where similar legislation is adopted.  There are many millions
of potential Bitcoin users in the US, so US law matters for our
ecosystem even though far from all Bitcoin users are in the US
themselves.

(21) PAYMENT NETWORK PROVIDER-
            (A) IN GENERAL- The term `payment network provider' means
an entity that directly or indirectly provides the proprietary
services, infrastructure, and software to effect or facilitate a
debit, credit, or other payment transaction.
[...]
                (i) PREVENTING AFFILIATION- A payment network provider
shall take technically feasible and reasonable measures, as
expeditiously as possible, but in any case within 5 days after being
served with a copy of the order, or within such time as the court may
order, designed to prevent, prohibit, or suspend its service from
completing payment transactions involving customers located within the
United States or subject to the jurisdiction of the United States and
the payment account--
                    (I) which is used by the foreign infringing site,
or portion thereof, that is subject to the order; and
                    (II) through which the payment network provider
would complete such payment transactions.

If you really want to go for the more extreme interpretation, it's not
hard to conclude that the Bitcoin system itself is a "payment network"
by the definition under the act, and if so in theory the AG's office
could? without due process? order miners and mining pools located in
the US to, for example, not process transactions containing the well
known addresses of targeted infringing sites (e.g. The Wikileaks
donation address).  Though I personally think this is far out.

I also think that other people will covered the SOPA/PIPA awareness
(e.g. Wikipedia is shutting down for 24 hours) more than we could
possibly do with our own resources.

But this attitude of it being someone elses problem? I think thats
nonsense. We live in _one world_, one world which is getting smaller
every day.  The value of a network?or of a economy? comes from the
number of potential connections it can make. One reason Bitcoin is
good is because it deconstructs some of the old barriers and anything
that risks imposing new ones is a threat to us all.

So, don't participate because bitcoin.org's help would be so small as
to be pointless? sure.  But because it doesn't matter? hardly.



From timon.elviejo at gmail.com  Tue Jan 17 07:42:51 2012
From: timon.elviejo at gmail.com (=?ISO-8859-1?Q?Jorge_Tim=F3n?=)
Date: Tue, 17 Jan 2012 08:42:51 +0100
Subject: [Bitcoin-development] bitcoin.org SOPA/PIPA blackout
In-Reply-To: <CAAS2fgRTpNYQ1pUopLQeJmtQbQqKo1rkNX8nNdvnftQyTtoevA@mail.gmail.com>
References: <1326665394.7032.YahooMailNeo@web121002.mail.ne1.yahoo.com>
	<CA+8xBpfWvLGtF3aP10xjTs-wyD1ia=iKLh3b=B+LqQjpRV5PVQ@mail.gmail.com>
	<CA+QPp0q8MCMfz2mz+vatG6E62vhNZEip0ZhxjbKk1L2HyLARYg@mail.gmail.com>
	<CAAS2fgRTpNYQ1pUopLQeJmtQbQqKo1rkNX8nNdvnftQyTtoevA@mail.gmail.com>
Message-ID: <CAGQP0AFyASUwgpgyWJobq1WypRjP9NuXSF2bPfrB8dX_xYti-Q@mail.gmail.com>

It may be a political issue, but I don't think wikipedia becomes a
political organization for being against censorship.
This is not about left or right. Is about free speech, one of the
basic principles not only of freedom but also of democracy.
And as Gregory shows it clearly affects bitcoin directly.



From laanwj at gmail.com  Tue Jan 17 09:04:22 2012
From: laanwj at gmail.com (Wladimir)
Date: Tue, 17 Jan 2012 10:04:22 +0100
Subject: [Bitcoin-development] bitcoin.org SOPA/PIPA blackout
In-Reply-To: <CAGQP0AFyASUwgpgyWJobq1WypRjP9NuXSF2bPfrB8dX_xYti-Q@mail.gmail.com>
References: <1326665394.7032.YahooMailNeo@web121002.mail.ne1.yahoo.com>
	<CA+8xBpfWvLGtF3aP10xjTs-wyD1ia=iKLh3b=B+LqQjpRV5PVQ@mail.gmail.com>
	<CA+QPp0q8MCMfz2mz+vatG6E62vhNZEip0ZhxjbKk1L2HyLARYg@mail.gmail.com>
	<CAAS2fgRTpNYQ1pUopLQeJmtQbQqKo1rkNX8nNdvnftQyTtoevA@mail.gmail.com>
	<CAGQP0AFyASUwgpgyWJobq1WypRjP9NuXSF2bPfrB8dX_xYti-Q@mail.gmail.com>
Message-ID: <CA+s+GJBqAPmcwD0Z7AyQsPZgxfyNnU+OoOcE39N8XCk2ZEOm9Q@mail.gmail.com>

This is not just "a political issue". The internet as we know it is at
stake, and bitcoin depends directly on a working, single, globally
connected internet (at least for now, until mesh networking goes
anywhere...).

*Everyone* using bitcoin has the interest in keeping the internet working
and un-balkanized. That's not a political opinion, it's a fact.

The laws could also criminalize both the users and developers, if they
regard bitcoin as a "payment network". And countries aren't too fussy about
extradition to the US (see the case of Richard O'Dwyer).

Though I agree that SOPA and PIPA are just manifestations of a brand of
censorship that is spreading all over the world. Stopping these laws won't
solve the underlying issue either. Other countries will keep pushing for
them, and we can't blank out the page for every country.

However, that does not make the issue "political and thus meaningless".
Also: "being too small to matter" is never a good argument to not do
something. It is fear paralysis.

Wladimir

2012/1/17 Jorge Tim?n <timon.elviejo at gmail.com>

> It may be a political issue, but I don't think wikipedia becomes a
> political organization for being against censorship.
> This is not about left or right. Is about free speech, one of the
> basic principles not only of freedom but also of democracy.
> And as Gregory shows it clearly affects bitcoin directly.
>
>
> ------------------------------------------------------------------------------
> Keep Your Developer Skills Current with LearnDevNow!
> The most comprehensive online learning library for Microsoft developers
> is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3, MVC3,
> Metro Style Apps, more. Free future releases when you subscribe now!
> http://p.sf.net/sfu/learndevnow-d2d
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120117/3d69e9b0/attachment.html>

From vladimir at marchenko.co.uk  Tue Jan 17 09:19:04 2012
From: vladimir at marchenko.co.uk (Vladimir Marchenko)
Date: Tue, 17 Jan 2012 09:19:04 +0000
Subject: [Bitcoin-development] bitcoin.org SOPA/PIPA blackout
In-Reply-To: <1326760227.63298.YahooMailNeo@web121006.mail.ne1.yahoo.com>
References: <1326665394.7032.YahooMailNeo@web121002.mail.ne1.yahoo.com>
	<CA+8xBpfWvLGtF3aP10xjTs-wyD1ia=iKLh3b=B+LqQjpRV5PVQ@mail.gmail.com>
	<1326760227.63298.YahooMailNeo@web121006.mail.ne1.yahoo.com>
Message-ID: <CACv5nHKcDW=Dg6_sgqLEjBgPuXn9cqFsjGhHW-q+4P9kWfa9yw@mail.gmail.com>

On 17 January 2012 00:30, Amir Taaki <zgenjix at yahoo.com> wrote:
> ...
> Wikipedia has far more need to remain neutral and apolitical than bitcoin ever does- you've read Satoshi's politically charged whitepaper or seen the genesis block quote.
>
> http://en.wikipedia.org/wiki/Wikipedia:SOPA_initiative/Action
> ...

I would like to voice my support to Amir here. It is a solidarity
gesture and from my point of view it would be great if bitcoin related
websites join the Blackout. In my view it is almost like Internet's
general strike, which is being enacted for a very good reason. To some
degree, ignoring it and continuing business as usual is almost
equivalent to being a strikebreaker.

For whatever it worth, all websites where I have some degree of
control will particpate in the blackout. Even where it means loss of
revenue for one day (actually it is likely that ad revenues tomorrow
would be easily twice the usual amount due to so many publishers
shutting down their websites.)



From moon at justmoon.de  Tue Jan 17 09:25:27 2012
From: moon at justmoon.de (Stefan Thomas)
Date: Tue, 17 Jan 2012 10:25:27 +0100
Subject: [Bitcoin-development] bitcoin.org SOPA/PIPA blackout
In-Reply-To: <CAAS2fgRTpNYQ1pUopLQeJmtQbQqKo1rkNX8nNdvnftQyTtoevA@mail.gmail.com>
References: <1326665394.7032.YahooMailNeo@web121002.mail.ne1.yahoo.com>
	<CA+8xBpfWvLGtF3aP10xjTs-wyD1ia=iKLh3b=B+LqQjpRV5PVQ@mail.gmail.com>
	<CA+QPp0q8MCMfz2mz+vatG6E62vhNZEip0ZhxjbKk1L2HyLARYg@mail.gmail.com>
	<CAAS2fgRTpNYQ1pUopLQeJmtQbQqKo1rkNX8nNdvnftQyTtoevA@mail.gmail.com>
Message-ID: <4F153E87.4030203@justmoon.de>

I'm firmly against a *blackout* - it would harm users' trust in Bitcoin 
since people looking to download the client or to get information about 
Bitcoin may end up in the wrong place. I constantly have to delete 
YouTube spam advertising this or that "miracle GPU miner" or "secure 
Bitcoin client", which of course are all just the same trojan.

As for making a statement or putting up a banner - that's ok with me.

On 1/17/2012 7:15 AM, Gregory Maxwell wrote:
> On Mon, Jan 16, 2012 at 9:37 PM, Kyle Henderson<k at old.school.nz>  wrote:
>> For those that believe one particularly noisy country in the North America
>> region with a policy called SOPA or PIPA directly affects Bitcoin - can you
>> point out precisely where it does so?
> In addition to the concerns about internet freedom and domain name
> system filtering which are against the interests of bitcoin users and
> the bitcoin system generally, SOPA contains new requirements for
> payment networks which may adversely impact Bitcoin services
> businesses and limit their ability to do business in the US and other
> places where similar legislation is adopted.  There are many millions
> of potential Bitcoin users in the US, so US law matters for our
> ecosystem even though far from all Bitcoin users are in the US
> themselves.
>
> (21) PAYMENT NETWORK PROVIDER-
>              (A) IN GENERAL- The term `payment network provider' means
> an entity that directly or indirectly provides the proprietary
> services, infrastructure, and software to effect or facilitate a
> debit, credit, or other payment transaction.
> [...]
>                  (i) PREVENTING AFFILIATION- A payment network provider
> shall take technically feasible and reasonable measures, as
> expeditiously as possible, but in any case within 5 days after being
> served with a copy of the order, or within such time as the court may
> order, designed to prevent, prohibit, or suspend its service from
> completing payment transactions involving customers located within the
> United States or subject to the jurisdiction of the United States and
> the payment account--
>                      (I) which is used by the foreign infringing site,
> or portion thereof, that is subject to the order; and
>                      (II) through which the payment network provider
> would complete such payment transactions.
>
> If you really want to go for the more extreme interpretation, it's not
> hard to conclude that the Bitcoin system itself is a "payment network"
> by the definition under the act, and if so in theory the AG's office
> could? without due process? order miners and mining pools located in
> the US to, for example, not process transactions containing the well
> known addresses of targeted infringing sites (e.g. The Wikileaks
> donation address).  Though I personally think this is far out.
>
> I also think that other people will covered the SOPA/PIPA awareness
> (e.g. Wikipedia is shutting down for 24 hours) more than we could
> possibly do with our own resources.
>
> But this attitude of it being someone elses problem? I think thats
> nonsense. We live in _one world_, one world which is getting smaller
> every day.  The value of a network?or of a economy? comes from the
> number of potential connections it can make. One reason Bitcoin is
> good is because it deconstructs some of the old barriers and anything
> that risks imposing new ones is a threat to us all.
>
> So, don't participate because bitcoin.org's help would be so small as
> to be pointless? sure.  But because it doesn't matter? hardly.
>
> ------------------------------------------------------------------------------
> Keep Your Developer Skills Current with LearnDevNow!
> The most comprehensive online learning library for Microsoft developers
> is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3, MVC3,
> Metro Style Apps, more. Free future releases when you subscribe now!
> http://p.sf.net/sfu/learndevnow-d2d
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development




From luke at dashjr.org  Tue Jan 17 16:03:11 2012
From: luke at dashjr.org (Luke-Jr)
Date: Tue, 17 Jan 2012 11:03:11 -0500
Subject: [Bitcoin-development] bitcoin.org SOPA/PIPA blackout
In-Reply-To: <CAGQP0AFyASUwgpgyWJobq1WypRjP9NuXSF2bPfrB8dX_xYti-Q@mail.gmail.com>
References: <1326665394.7032.YahooMailNeo@web121002.mail.ne1.yahoo.com>
	<CAAS2fgRTpNYQ1pUopLQeJmtQbQqKo1rkNX8nNdvnftQyTtoevA@mail.gmail.com>
	<CAGQP0AFyASUwgpgyWJobq1WypRjP9NuXSF2bPfrB8dX_xYti-Q@mail.gmail.com>
Message-ID: <201201171103.12310.luke@dashjr.org>

On Tuesday, January 17, 2012 2:42:51 AM Jorge Tim?n wrote:
> It may be a political issue, but I don't think wikipedia becomes a
> political organization for being against censorship.
> This is not about left or right. Is about free speech, one of the
> basic principles not only of freedom but also of democracy.

Censorship is, in principle, good. Free speech and democracy are, in princple, 
evil. Idolizing Liberty is also evil. Your backward morals are worse than a 
political issue.

How about taking a few minutes to read this article by Bishop Sanborn? ;)
	http://www.traditionalmass.org/articles/article.php?id=13&catname=7



From james.burkle at gmail.com  Tue Jan 17 16:16:11 2012
From: james.burkle at gmail.com (James Burkle)
Date: Tue, 17 Jan 2012 11:16:11 -0500
Subject: [Bitcoin-development] bitcoin.org SOPA/PIPA blackout
In-Reply-To: <201201171103.12310.luke@dashjr.org>
References: <1326665394.7032.YahooMailNeo@web121002.mail.ne1.yahoo.com>
	<CAAS2fgRTpNYQ1pUopLQeJmtQbQqKo1rkNX8nNdvnftQyTtoevA@mail.gmail.com>
	<CAGQP0AFyASUwgpgyWJobq1WypRjP9NuXSF2bPfrB8dX_xYti-Q@mail.gmail.com>
	<201201171103.12310.luke@dashjr.org>
Message-ID: <CALTa-XPQS97Auqrh4TENgHTTyFetzY246EYEQO06=_7e1fK8bg@mail.gmail.com>

I don't think this is the right mailing list for discussion of this
Blackout topic. I know this is definitely not the right mailing list
for proselytizing.

On Tue, Jan 17, 2012 at 11:03 AM, Luke-Jr <luke at dashjr.org> wrote:
> On Tuesday, January 17, 2012 2:42:51 AM Jorge Tim?n wrote:
>> It may be a political issue, but I don't think wikipedia becomes a
>> political organization for being against censorship.
>> This is not about left or right. Is about free speech, one of the
>> basic principles not only of freedom but also of democracy.
>
> Censorship is, in principle, good. Free speech and democracy are, in princple,
> evil. Idolizing Liberty is also evil. Your backward morals are worse than a
> political issue.
>
> How about taking a few minutes to read this article by Bishop Sanborn? ;)
> ? ? ? ?http://www.traditionalmass.org/articles/article.php?id=13&catname=7
>
> ------------------------------------------------------------------------------
> Keep Your Developer Skills Current with LearnDevNow!
> The most comprehensive online learning library for Microsoft developers
> is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3, MVC3,
> Metro Style Apps, more. Free future releases when you subscribe now!
> http://p.sf.net/sfu/learndevnow-d2d
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development



From solar at heliacal.net  Tue Jan 17 16:30:02 2012
From: solar at heliacal.net (solar)
Date: Tue, 17 Jan 2012 16:30:02 +0000
Subject: [Bitcoin-development] bitcoin.org SOPA/PIPA blackout
In-Reply-To: <CALTa-XPQS97Auqrh4TENgHTTyFetzY246EYEQO06=_7e1fK8bg@mail.gmail.com>
References: <1326665394.7032.YahooMailNeo@web121002.mail.ne1.yahoo.com>
	<CAAS2fgRTpNYQ1pUopLQeJmtQbQqKo1rkNX8nNdvnftQyTtoevA@mail.gmail.com>
	<CAGQP0AFyASUwgpgyWJobq1WypRjP9NuXSF2bPfrB8dX_xYti-Q@mail.gmail.com>
	<201201171103.12310.luke@dashjr.org>
	<CALTa-XPQS97Auqrh4TENgHTTyFetzY246EYEQO06=_7e1fK8bg@mail.gmail.com>
Message-ID: <4AEA05A4-110E-478D-86F8-0E46A8DA1ACB@heliacal.net>

Dear bitcoin-development,

One of the original reasons for the creation of this mailing list was because the bitcoin.org forum was filled with this type of noise and this list was to provide a medium for discussion of development topics.  This entire SOPA thing is off topic for this list.  Might as well argue about abortion, because you can pay an abortion doctor with bitcoins.. maybe.

Many of us subscribe because we're interested in the technical discussions.. not internet trolling.  Several people have already expressed that they don't care about this, so please discuss it somewhere more appropriate for this topic, like the bitcointalk forums.

Thanks,
Laszlo


On Jan 17, 2012, at 4:16 PM, James Burkle wrote:

> I don't think this is the right mailing list for discussion of this
> Blackout topic. I know this is definitely not the right mailing list
> for proselytizing.
> 
> On Tue, Jan 17, 2012 at 11:03 AM, Luke-Jr <luke at dashjr.org> wrote:
>> On Tuesday, January 17, 2012 2:42:51 AM Jorge Tim?n wrote:
>>> It may be a political issue, but I don't think wikipedia becomes a
>>> political organization for being against censorship.
>>> This is not about left or right. Is about free speech, one of the
>>> basic principles not only of freedom but also of democracy.
>> 
>> Censorship is, in principle, good. Free speech and democracy are, in princple,
>> evil. Idolizing Liberty is also evil. Your backward morals are worse than a
>> political issue.
>> 
>> How about taking a few minutes to read this article by Bishop Sanborn? ;)
>>        http://www.traditionalmass.org/articles/article.php?id=13&catname=7
>> 
>> ------------------------------------------------------------------------------
>> Keep Your Developer Skills Current with LearnDevNow!
>> The most comprehensive online learning library for Microsoft developers
>> is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3, MVC3,
>> Metro Style Apps, more. Free future releases when you subscribe now!
>> http://p.sf.net/sfu/learndevnow-d2d
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 
> ------------------------------------------------------------------------------
> Keep Your Developer Skills Current with LearnDevNow!
> The most comprehensive online learning library for Microsoft developers
> is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3, MVC3,
> Metro Style Apps, more. Free future releases when you subscribe now!
> http://p.sf.net/sfu/learndevnow-d2d
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development




From peter at coinlab.com  Tue Jan 17 19:03:36 2012
From: peter at coinlab.com (Peter Vessenes)
Date: Tue, 17 Jan 2012 11:03:36 -0800
Subject: [Bitcoin-development] bitcoin.org SOPA/PIPA blackout
Message-ID: <CAMGNxUu5Owk0w2THhPfLj1_Uo1V=FSuzS=NS1HqYdek1rrZz6Q@mail.gmail.com>

It seems to me that the internet as a whole has got this one covered. I say
this as someone who thinks that BitCoin needs to choose its battles and
craft its reputation extremely carefully; this isn't the most important
fight for BitCoin, nor the most deadly.

I do think SOPA and PIPA could impact bitcoin, what if, for instance,
copyrighted material made its way into the blockchain?

Already the DMCA would make it hard for someone publishing blocks online to
do anything but cease under a DMCA request. SOPA, at least, would go
farther and allow the US to cut all access to 'offending' sites elsewhere
in the world.

At any rate, I don't think these bills are 'aimed at' BitCoin, and the
companies with the most stake are taking the threat quite seriously.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120117/d31607be/attachment.html>

From gavinandresen at gmail.com  Thu Jan 19 16:29:29 2012
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Thu, 19 Jan 2012 11:29:29 -0500
Subject: [Bitcoin-development] Extending IsStandard() to transaction
	scriptSigs
Message-ID: <CABsx9T2Hh-qb6CwMdD-Ov_qT6pg=muqO4uY1=+ccCxhVLUU5Gw@mail.gmail.com>

I've been working on a patch to make transaction inputs (scriptSigs) with
extra data non-standard, as part of a general attitude of "try to
anticipate possible problems before they turn into real problems."

Today, any node on the network that is relaying unconfirmed transactions
can add bytes to the transaction's scriptSig's before passing it on, and
that modified version of the transaction will get relayed and might
possibly get mined.

For example, take a standard scriptSig that is:   OP_PUSHDATA <signature>
OP_PUSHDATA <public key>
... and change it to:   OP_PUSHDATA <Hi Mom!> OP_PUSHDATA <signature>
OP_PUSHDATA <public key>
... and the modified transaction will pass all of the IsStandard(),
IsValid(), and OP_CHECKSIG checks.

That is... unexpected, especially since it changes the transaction id.  You
might transmit a transaction with ID 123 but find out it has been mined as
transaction ID 456.  Satoshi's code doesn't care (it just looks like an
attempted double-spend of the coins), but I wouldn't be surprised if it
caused problems for other implementations or other transaction-handling
software.

My patch will make transactions with extra stuff in the scriptSig
non-standard, so they won't get relayed or mined by new nodes. Alternative
implementations will still have to deal with all types of double-spends, of
course, and there are other ways of producing two transactions that are
identical except for their scriptSigs  (you can generate an arbitrary
number of valid signatures for a transaction if you have the private keys,
for example) so this isn't a panacea for poorly-implemented bitcoin
transaction handling software. But it does remove some "wiggle room," which
is generally a good idea for improving security.


I'm still thinking about how much further to go with this:

+ I think requiring that the <signature> and <public key> be DER-encoded
for the transaction to be IsStandard() is a good idea.  DER encoding
defines a canonical way of representing data; Satoshi's code relies on
OpenSSL to decode signatures and public keys, and OpenSSL accepts any, more
general, BER encoding.

+ I'm tempted to require that the "filler item" to workaround the
OP_CHECKMULTISIG pops-one-too-many-items-off-the-stack bug be exactly OP_0.

Discussion welcome; I should be making a pull request for my patch this
afternoon.

--
Gavin Andresen
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120119/a1656f10/attachment.html>

From robert.brautigam at netmind.hu  Sun Jan 22 13:18:35 2012
From: robert.brautigam at netmind.hu (=?ISO-8859-1?Q?Brautigam_R=F3bert?=)
Date: Sun, 22 Jan 2012 14:18:35 +0100
Subject: [Bitcoin-development] ECC Signature Issue
Message-ID: <4F1C0CAB.4000905@netmind.hu>

Hi all,

I'm working on a from scratch Java implementation. So far I got a 
modularized, unit tested implementation of the core modules (api, keys, 
blocks, chain, scripts, network protocol).

My dummy client however gets stuck on Block 140493, specifically at 
transaction hash: 
70f7c15c6f62139cc41afa858894650344eda9975b46656d893ee59df8914a3d

It seems the (signature) verification fails for this specific 
transaction (for the 1 input in it), which is rather odd since 
verification was successful for all the preceding blocks and inputs.

I double checked that the official (C++) client is indeed successful 
here. Oddly enough the bitcoinj implementation also seems to fail to 
verify this transaction, which seems to point in the direction of 
BouncyCastle (which we both use).

My question is, did anybody hit this issue before? If not, can someone 
doublecheck maybe that I'm not missing something trivial?

The data that should be signed (the signature hash):
b45c680f32f9364f5255cc15ef7cad879dbde9062d7fb8db0fe56e245823a78f

The signature (with '01' at the end for SIGHASH_ALL, remove this before 
you pass it to verification): 
304402206b5c3b1c86748dcf328b9f3a65e10085afcf5d1af5b40970d8ce3a9355e06b5b0220cdbdc23e6d3618e47056fccc60c5f73d1a542186705197e5791e97f0e6582a3201

The public key:
04f25ec495fa21ad14d69f45bf277129488cfb1a339aba1fed3c5099bb6d8e9716491a14050fbc0b2fed2963dc1e56264b3adf52a81b953222a2180d48b54d1e18

As said, this seems to work with openssl, but seems to fail with 
bouncycastle for some reason (version 140).

Thanks,
Robert.




From mike at plan99.net  Mon Jan 23 17:50:51 2012
From: mike at plan99.net (Mike Hearn)
Date: Mon, 23 Jan 2012 18:50:51 +0100
Subject: [Bitcoin-development] ECC Signature Issue
In-Reply-To: <4F1C0CAB.4000905@netmind.hu>
References: <4F1C0CAB.4000905@netmind.hu>
Message-ID: <CANEZrP31-7gGDxze11QHBpt0sG3M5A6yviM++7RM63fRHzUwdA@mail.gmail.com>

> I double checked that the official (C++) client is indeed successful
> here. Oddly enough the bitcoinj implementation also seems to fail to
> verify this transaction, which seems to point in the direction of
> BouncyCastle (which we both use).

BitCoinJ does not verify signatures (it is an SPV implementation), so
I'm not sure what you mean by this. Are you using old code? There used
to be some stuff that checked signatures but it was removed some time
ago.



From kungfoobar at gmail.com  Tue Jan 24 02:00:59 2012
From: kungfoobar at gmail.com (Alberto Torres)
Date: Tue, 24 Jan 2012 03:00:59 +0100
Subject: [Bitcoin-development] [PROPOSAL] Merkle tree of unspent
 transactions (MTUT),
 for serverless thin clients and self-verifiable prunned blockchain.
Message-ID: <CAE98tO0Nh=L2mSy-MzEW7o+0=Tzivw0zj8cG8e1EscmW0C0kBg@mail.gmail.com>

Hello,

I've written this proposal. C&P of the overview:

Satoshi's original paper describes a way of prunning spent
transactions in the blockchain to save storage space while it remains
consistent and verifiable, but it's useless for partial blockchain
downloads: while you can know if a given transaction is in the
blockchain, you can't know if it has been spent in a subsequent
transaction.
This proposal describes how to add a hash-tree based check in the
blockchain that allows to verify if a transaction is unspent without
downloading and checking all the blockchain. The idea is not new, but
at the time of this writing there isn't any technical description of
how this should be done. Aditionally, this solution is rather simple.

https://en.bitcoin.it/wiki/User:DiThi/MTUT

Cheers

-- 
Alberto Torres Ruiz (a.k.a. DiThi)



From robert.brautigam at netmind.hu  Tue Jan 24 17:33:33 2012
From: robert.brautigam at netmind.hu (=?UTF-8?B?QnJhdXRpZ2FtIFLDs2JlcnQ=?=)
Date: Tue, 24 Jan 2012 18:33:33 +0100
Subject: [Bitcoin-development] ECC Signature Issue
In-Reply-To: <4F1DBD07.3050904@netmind.hu>
References: <4F1DBD07.3050904@netmind.hu>
Message-ID: <4F1EEB6D.8080004@netmind.hu>

On 01/23/2012 06:50 PM, Mike Hearn wrote:
>> I double checked that the official (C++) client is indeed successful
>> here. Oddly enough the bitcoinj implementation also seems to fail to
>> verify this transaction, which seems to point in the direction of
>> BouncyCastle (which we both use).
>
> BitCoinJ does not verify signatures (it is an SPV implementation), so
> I'm not sure what you mean by this. Are you using old code? There used
> to be some stuff that checked signatures but it was removed some time
> ago.

Hi Mike,

Bitcoinj has a class named ECKey. I just hardwired it with a main() to
check the mentioned transaction's signature.

I debugged the official client to get the exact data (hash, signed data
and public key). I checked signatures of transactions prior to the
mentioned one, all work, so the test code and the data I got are very
likely correct.

It might be that I'm using old bitcoinj code (I think it is 0.3, can't
find a version string anywhere), but I doubt that has any impact on the
ecc verification. Even if it did, I got my on code too, so what are the
odds that two implementations fail at the same point?

Anyway it would be helpful if someone just tried to run a verification
independently with the mentioned transaction (with BouncyCastle and with
openssl) and see whether he/she gets the same result.

I tried with BouncyCastle 140 and the newest 1.46, both fail.

Robert.



From zgenjix at yahoo.com  Wed Jan 25 23:27:52 2012
From: zgenjix at yahoo.com (Amir Taaki)
Date: Wed, 25 Jan 2012 15:27:52 -0800 (PST)
Subject: [Bitcoin-development] Fuzzer?
Message-ID: <1327534072.49535.YahooMailNeo@web121001.mail.ne1.yahoo.com>

Hey,

I heard there is a fuzzer in the works? Where can I find more details of this? I'm going to write one for libbitcoin, but if one already exists then I'd rather build on and use that.

Something simple like:
- Set previous block hash, set current target
- Start hashing
- Connect and send to specified host (i.e localhost)

That way I can force re-organisations and stress the blockchain algorithm. Should be trivial for me to build, but worth asking anyway :)

Thanks



From gavinandresen at gmail.com  Thu Jan 26 15:32:33 2012
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Thu, 26 Jan 2012 10:32:33 -0500
Subject: [Bitcoin-development] Fuzzer?
In-Reply-To: <1327534072.49535.YahooMailNeo@web121001.mail.ne1.yahoo.com>
References: <1327534072.49535.YahooMailNeo@web121001.mail.ne1.yahoo.com>
Message-ID: <CABsx9T2Faoo2S8rCtqHBiM+q9nOpOxSF0zaP9yFDW6JmDwDLOw@mail.gmail.com>

https://github.com/gavinandresen/bitcoin-git/tree/fuzzer

It is a transaction fuzzer; adding block fuzzing is on the TODO.

Basic usage is:
1. Use the send* RPC commands to get one or more transaction IDs
2. Run a script that repeatedly calls relayfuzzed with a nonce/txid
... and see how the connected peer(s) react to all the fuzzy 'inv/tx'
protocol messages.

I built it to stress-test BIP 16, there are lots of useful features that
could be added.  Patches welcome!

-- 
--
Gavin Andresen
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120126/8667911c/attachment.html>

From zgenjix at yahoo.com  Fri Jan 27 16:33:18 2012
From: zgenjix at yahoo.com (Amir Taaki)
Date: Fri, 27 Jan 2012 08:33:18 -0800 (PST)
Subject: [Bitcoin-development] GetBlocksToMaturity
Message-ID: <1327681998.52230.YahooMailNeo@web121001.mail.ne1.yahoo.com>

Why add 20 to COINBASE_MATURITY there?

The underlying protocol accepts spent transactions at 100 (COINBASE_MATURITY) so this seems more like a measure to put people off spending until 120 confirms. If you are determined enough to hack your client, you can still spend before 120 but after 100.

Why is this?

Did Satoshi overestimate how many competing races there would be between mined blocks?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120127/87958a48/attachment.html>

From zgenjix at yahoo.com  Fri Jan 27 16:37:05 2012
From: zgenjix at yahoo.com (Amir Taaki)
Date: Fri, 27 Jan 2012 08:37:05 -0800 (PST)
Subject: [Bitcoin-development] GetBlocksToMaturity
In-Reply-To: <1327681998.52230.YahooMailNeo@web121001.mail.ne1.yahoo.com>
References: <1327681998.52230.YahooMailNeo@web121001.mail.ne1.yahoo.com>
Message-ID: <1327682225.4658.YahooMailNeo@web121001.mail.ne1.yahoo.com>

Actually now I'm thinking- I reckon it is so that your transaction gets accepted by the network when it is sent out. At around 20 confirmations, you can be sure that the rest of the network also has 100 confirmations off the original mined block.

Otherwise at 100 confirms, you may have a chain ahead of everyone else or there might be a temporary network partition (islanding) that causes another fork to get built up, then when they rejoin, not everyone has 100 confirms...


________________________________
 From: Amir Taaki <zgenjix at yahoo.com>
To: "bitcoin-development at lists.sourceforge.net" <bitcoin-development at lists.sourceforge.net> 
Sent: Friday, January 27, 2012 4:33 PM
Subject: GetBlocksToMaturity
 

Why add 20 to COINBASE_MATURITY there?

The underlying protocol accepts spent transactions at 100 (COINBASE_MATURITY) so this seems more like a measure to put people off spending until 120 confirms. If you are determined enough to hack your client, you can still spend before 120 but after 100.

Why is this?

Did Satoshi overestimate how many competing races there would be between mined blocks?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120127/6c35b1a4/attachment.html>

From robert.brautigam at netmind.hu  Fri Jan 27 18:19:54 2012
From: robert.brautigam at netmind.hu (=?ISO-8859-1?Q?Brautigam_R=F3bert?=)
Date: Fri, 27 Jan 2012 19:19:54 +0100
Subject: [Bitcoin-development] ECC Signature Issue
In-Reply-To: <4F1EEB6D.8080004@netmind.hu>
References: <4F1DBD07.3050904@netmind.hu> <4F1EEB6D.8080004@netmind.hu>
Message-ID: <4F22EACA.2080807@netmind.hu>

Hi,

I'll reply to myself here, just to mention that the issue is solved.

Dave Hook from Bouncycastle replied that in the particular signature 
mentioned, one of the ASN1 encoded Integers is actually negative (which 
is not a valid coordinate for a point on a curve I assume). Since ASN1 
integers are always signed, one has to pad "big" values with a zero byte 
to stay positive.

Workaround is easy for verification (convert to positive).

Robert.

On 01/24/2012 06:33 PM, Brautigam R?bert wrote:
> On 01/23/2012 06:50 PM, Mike Hearn wrote:
>>> I double checked that the official (C++) client is indeed successful
>>> here. Oddly enough the bitcoinj implementation also seems to fail to
>>> verify this transaction, which seems to point in the direction of
>>> BouncyCastle (which we both use).
...



From zgenjix at yahoo.com  Fri Jan 27 22:51:04 2012
From: zgenjix at yahoo.com (Amir Taaki)
Date: Fri, 27 Jan 2012 14:51:04 -0800 (PST)
Subject: [Bitcoin-development] BIP 0020: URI Scheme
Message-ID: <1327704664.31621.YahooMailNeo@web121003.mail.ne1.yahoo.com>

BIP 0020 is the old URI scheme BIPisized.

ATM it is Draft status.

I do not know enough about the discussion back last year to know whether to move it to Accepted status or not. My feelings are that having a re-decision (even if it was accepted last year) is healthy since it makes no sense to have a standard before a standardisation process existed.

For now, it is Draft status until there's a general agreement.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120127/2e4286b5/attachment.html>

From luke at dashjr.org  Fri Jan 27 23:00:29 2012
From: luke at dashjr.org (Luke-Jr)
Date: Fri, 27 Jan 2012 18:00:29 -0500
Subject: [Bitcoin-development] BIP 0020: URI Scheme
In-Reply-To: <1327704664.31621.YahooMailNeo@web121003.mail.ne1.yahoo.com>
References: <1327704664.31621.YahooMailNeo@web121003.mail.ne1.yahoo.com>
Message-ID: <201201271800.31819.luke@dashjr.org>

On Friday, January 27, 2012 5:51:04 PM Amir Taaki wrote:
> BIP 0020 is the old URI scheme BIPisized.
> 
> ATM it is Draft status.

It's been Final (even according to BIP 1 standards) since late January 2011. 
The only change recently is assigning it a BIP number for formality.

> I do not know enough about the discussion back last year to know whether to
> move it to Accepted status or not. My feelings are that having a
> re-decision (even if it was accepted last year) is healthy since it makes
> no sense to have a standard before a standardisation process existed.

Once P2SH is deployed, it will probably make good sense to revisit the URI 
Scheme for revision, and eventually move BIP 20 to Replaced/Superceded status.



From bitcoin-list at bluematt.me  Sat Jan 28 00:36:31 2012
From: bitcoin-list at bluematt.me (bitcoin-list at bluematt.me)
Date: Fri, 27 Jan 2012 19:36:31 -0500
Subject: [Bitcoin-development] BIP 0020: URI Scheme
In-Reply-To: <201201271800.31819.luke@dashjr.org>
References: <1327704664.31621.YahooMailNeo@web121003.mail.ne1.yahoo.com>
	<201201271800.31819.luke@dashjr.org>
Message-ID: <05d62c81-ef50-4c43-8fa5-65592c8f54a4@email.android.com>

It was implemented in the waylaying client with the merge of Bitcoin-Qt for drag and drop, and just recently for system URI handling in https://github.com/bitcoin/bitcoin/commit/70f55355e29c8e45b607e782c5d76609d23cc858. However the version on the wiki armed as BIP 20 has a ton of extraneous crap in it's number encoding which is not implemented in Bitcoin-Qt since it was explicitly voted against at the time the spec was being discussed. If that stuff were removed, I would agree that it is final.

Luke-Jr <luke at dashjr.org> wrote:

On Friday, January 27, 2012 5:51:04 PM Amir Taaki wrote:
> BIP 0020 is the old URI scheme BIPisized.
> 
> ATM it is Draft status.

It's been Final (even according to BIP 1 standards) since late January 2011. 
The only change recently is assigning it a BIP number for formality.

> I do not know enough about the discussion back last year to know whether to
> move it to Accepted status or not. My feelings are that having a
> re-decision (even if it was accepted last year) is healthy since it makes
> no sense to have a standard before a standardisation process existed.

Once P2SH is deployed, it will probably make good sense to revisit the URI 
Scheme for revision, and eventually move BIP 20 to Replaced/Superceded status.

_____________________________________________

Try before you buy = See our experts in action!
The most comprehensive online learning library for Microsoft developers
is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3, MVC3,
Metro Style Apps, more. Free future releases when you subscribe now!
http://p.sf.net/sfu/learndevnow-dev2
_____________________________________________

Bitcoin-development mailing list
Bitcoin-development at lists.sourceforge.net
https://lists.sourceforge.net/lists/listinfo/bitcoin-development

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120127/f01f8287/attachment.html>

From luke at dashjr.org  Sat Jan 28 01:45:09 2012
From: luke at dashjr.org (Luke-Jr)
Date: Fri, 27 Jan 2012 20:45:09 -0500
Subject: [Bitcoin-development] BIP 0020: URI Scheme
In-Reply-To: <05d62c81-ef50-4c43-8fa5-65592c8f54a4@email.android.com>
References: <1327704664.31621.YahooMailNeo@web121003.mail.ne1.yahoo.com>
	<201201271800.31819.luke@dashjr.org>
	<05d62c81-ef50-4c43-8fa5-65592c8f54a4@email.android.com>
Message-ID: <201201272045.10787.luke@dashjr.org>

On Friday, January 27, 2012 7:36:31 PM bitcoin-list at bluematt.me wrote:
> It was implemented in the waylaying client with the merge of Bitcoin-Qt for
> drag and drop, and just recently for system URI handling in
> https://github.com/bitcoin/bitcoin/commit/70f55355e29c8e45b607e782c5d76609
> d23cc858.

It's been implemented in many clients for nearly all 2011.
Bitcoin-Qt is just behind the pace. Not relevant.

> However the version on the wiki armed as BIP 20 has a ton of extraneous crap
> in it's number encoding which is not implemented in Bitcoin-Qt since it was
> explicitly voted against at the time the spec was being discussed.

You mean 3 months *after* the spec had a consensus and multiple 
implementations.



From bitcoin-list at bluematt.me  Sat Jan 28 02:12:11 2012
From: bitcoin-list at bluematt.me (bitcoin-list at bluematt.me)
Date: Fri, 27 Jan 2012 21:12:11 -0500
Subject: [Bitcoin-development] BIP 0020: URI Scheme
In-Reply-To: <201201272045.10787.luke@dashjr.org>
References: <1327704664.31621.YahooMailNeo@web121003.mail.ne1.yahoo.com>
	<201201271800.31819.luke@dashjr.org>
	<05d62c81-ef50-4c43-8fa5-65592c8f54a4@email.android.com>
	<201201272045.10787.luke@dashjr.org>
Message-ID: <759be3f8-ca4c-4e36-aac1-b3894dda450d@email.android.com>



Luke-Jr <luke at dashjr.org> wrote:

>On Friday, January 27, 2012 7:36:31 PM bitcoin-list at bluematt.me wrote:
>> It was implemented in the waylaying client with the merge of
>Bitcoin-Qt for
>> drag and drop, and just recently for system URI handling in
>>
>https://github.com/bitcoin/bitcoin/commit/70f55355e29c8e45b607e782c5d76609
>> d23cc858.
>
>It's been implemented in many clients for nearly all 2011.
>Bitcoin-Qt is just behind the pace. Not relevant.
>
>> However the version on the wiki armed as BIP 20 has a ton of
>extraneous crap
>> in it's number encoding which is not implemented in Bitcoin-Qt since
>it was
>> explicitly voted against at the time the spec was being discussed.
>
>You mean 3 months *after* the spec had a consensus and multiple 
>implementations.
I'm really not gonna reopen this debate.  You made a poll that was worded in the most biased way I could think of and still lost.  The multiple implementations were written but you and I know of no sites that actually had links to your version.



From laanwj at gmail.com  Sat Jan 28 08:23:51 2012
From: laanwj at gmail.com (Wladimir)
Date: Sat, 28 Jan 2012 09:23:51 +0100
Subject: [Bitcoin-development] BIP 0020: URI Scheme
In-Reply-To: <759be3f8-ca4c-4e36-aac1-b3894dda450d@email.android.com>
References: <1327704664.31621.YahooMailNeo@web121003.mail.ne1.yahoo.com>
	<201201271800.31819.luke@dashjr.org>
	<05d62c81-ef50-4c43-8fa5-65592c8f54a4@email.android.com>
	<201201272045.10787.luke@dashjr.org>
	<759be3f8-ca4c-4e36-aac1-b3894dda450d@email.android.com>
Message-ID: <CA+s+GJAtRO_PH1oWmT7KOMeDF2L-YvoWkanURYD=keepCaQ9VQ@mail.gmail.com>

I'd state it this way: a spec needs to be minimally complete

The subset implemented by bitcoin-qt allows description of *all* currently
desirable bitcoin transactions.

The rest of the spec is simply other ways to describe the same = redundancy

In case new transaction types are added, the spec obviously needs to be
extended. But not with a zillion ways to write "send XXX coins to YYY".

Anyway, that's my last word about it.

Wladimir

On Sat, Jan 28, 2012 at 3:12 AM, <bitcoin-list at bluematt.me> wrote:

>
>
> Luke-Jr <luke at dashjr.org> wrote:
>
> >On Friday, January 27, 2012 7:36:31 PM bitcoin-list at bluematt.me wrote:
> >> It was implemented in the waylaying client with the merge of
> >Bitcoin-Qt for
> >> drag and drop, and just recently for system URI handling in
> >>
> >
> https://github.com/bitcoin/bitcoin/commit/70f55355e29c8e45b607e782c5d76609
> >> d23cc858.
> >
> >It's been implemented in many clients for nearly all 2011.
> >Bitcoin-Qt is just behind the pace. Not relevant.
> >
> >> However the version on the wiki armed as BIP 20 has a ton of
> >extraneous crap
> >> in it's number encoding which is not implemented in Bitcoin-Qt since
> >it was
> >> explicitly voted against at the time the spec was being discussed.
> >
> >You mean 3 months *after* the spec had a consensus and multiple
> >implementations.
> I'm really not gonna reopen this debate.  You made a poll that was worded
> in the most biased way I could think of and still lost.  The multiple
> implementations were written but you and I know of no sites that actually
> had links to your version.
>
>
> ------------------------------------------------------------------------------
> Try before you buy = See our experts in action!
> The most comprehensive online learning library for Microsoft developers
> is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3, MVC3,
> Metro Style Apps, more. Free future releases when you subscribe now!
> http://p.sf.net/sfu/learndevnow-dev2
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120128/90bc69d7/attachment.html>

From gronager at ceptacle.com  Sat Jan 28 10:21:19 2012
From: gronager at ceptacle.com (Michael Gronager)
Date: Sat, 28 Jan 2012 11:21:19 +0100
Subject: [Bitcoin-development] BIP-12, 16, 17
Message-ID: <B2F57365-3B00-4A0A-B0FC-92B823796F2B@ceptacle.com>

Dear Bitcoiners,

I have been following some of the debate on the various BIP suggestions for enabling e.g. multisignature transactions. ( First a little rant - it seems like the discussion takes place in at least 5 different forums plus the IRC, this is so annoying. Please keep the discussion at one place and refer to this for people asking questions other places - including me, now... ).

I have some issues with BIP-16, it is mainly the lines 265-269 in the reference implementation (https://github.com/gavinandresen/bitcoin-git/blob/pay_to_script_hash/src/base58.h): 

PUBKEY_ADDRESS = 0,
SCRIPT_ADDRESS = 5,
PUBKEY_ADDRESS_TEST = 111,
SCRIPT_ADDRESS_TEST = 196,

The purpose of the networkID is broken by this, as it ties additional information into an address as a hack. In the BIP-12 implementation I argued that this notification on address level is not needed, and should not be introduced, I am still of the same opinion. The bitcoin code has enough of globals and cross references inside the code s it is today, lets not add another one...

If we want more information in a bitcoin address we could just as well cannibalize it from the checksum - today it is 4 bytes (1 to 4mia) it could be 2 or 3 bytes (1 to 65k or 16M) and that would not break the current meaning of the network ID. This would have the same effect - that you could not mistake two different addresses and create a non-redeemable transaction.

The BIP-17 seems a step forward, but I also agree with Gavins note on one on the forums, that it behaves differently in input and output scripts. So it obviously need some further work too.

Cheers,

Michael


From andreas at schildbach.de  Sat Jan 28 16:32:15 2012
From: andreas at schildbach.de (Andreas Schildbach)
Date: Sat, 28 Jan 2012 17:32:15 +0100
Subject: [Bitcoin-development] BIP 0020: URI Scheme
In-Reply-To: <201201272045.10787.luke@dashjr.org>
References: <1327704664.31621.YahooMailNeo@web121003.mail.ne1.yahoo.com>
	<201201271800.31819.luke@dashjr.org>
	<05d62c81-ef50-4c43-8fa5-65592c8f54a4@email.android.com>
	<201201272045.10787.luke@dashjr.org>
Message-ID: <jg17uf$7k4$1@dough.gmane.org>

On 01/28/2012 02:45 AM, Luke-Jr wrote:

> It's been implemented in many clients for nearly all 2011.
> Bitcoin-Qt is just behind the pace. Not relevant.

Bitcoin Wallet for Android implements only parts of this spec:

The hexadecimal notations (x) and exponent notations (X) feel horribly
redundant to me and are thus not implemented.

"label" and "message" parameters are not implemented right now, but will
probably be in a later version.

"send" is also not implemented.

Cheers,

Andreas




From zgenjix at yahoo.com  Sun Jan 29 04:52:20 2012
From: zgenjix at yahoo.com (Amir Taaki)
Date: Sat, 28 Jan 2012 20:52:20 -0800 (PST)
Subject: [Bitcoin-development] Quote on BIP 16
Message-ID: <1327812740.41242.YahooMailNeo@web121002.mail.ne1.yahoo.com>

Gavin said:
"Part of the controversy is whether really long bitcoin addresses would work-- would it be OK if the new bitcoin addresses were really long and looked something like this:??57HrrfEw6ZgRS58dygiHhfN7vVhaPaBE7HrrfEw6ZgRS58dygiHhfN7vVhaPaBiTE7vVhaPaBE7Hr
(or possibly even longer)

I've argued no: past 70 or so characters it becomes a lot harder to copy and paste, a lot harder to scan an address with your eyes to see if you're paying who you think you're paying, harder to create a readable QR code, harder to upgrade website or database code that deals with bitcoin addresses, etc. There is rough consensus that very-long addresses are not workable."

How could you have a 70 byte long address without a P2SH scheme? Is this a mistake?



From zgenjix at yahoo.com  Sun Jan 29 05:10:41 2012
From: zgenjix at yahoo.com (Amir Taaki)
Date: Sat, 28 Jan 2012 21:10:41 -0800 (PST)
Subject: [Bitcoin-development] Quote on BIP 16
In-Reply-To: <1327812740.41242.YahooMailNeo@web121002.mail.ne1.yahoo.com>
References: <1327812740.41242.YahooMailNeo@web121002.mail.ne1.yahoo.com>
Message-ID: <1327813841.99379.YahooMailNeo@web121006.mail.ne1.yahoo.com>

2 compressed pubkeys


----- Original Message -----
From: Amir Taaki <zgenjix at yahoo.com>
To: "bitcoin-development at lists.sourceforge.net" <bitcoin-development at lists.sourceforge.net>
Cc: 
Sent: Sunday, January 29, 2012 4:52 AM
Subject: [Bitcoin-development] Quote on BIP 16

Gavin said:
"Part of the controversy is whether really long bitcoin addresses would work-- would it be OK if the new bitcoin addresses were really long and looked something like this:??57HrrfEw6ZgRS58dygiHhfN7vVhaPaBE7HrrfEw6ZgRS58dygiHhfN7vVhaPaBiTE7vVhaPaBE7Hr
(or possibly even longer)

I've argued no: past 70 or so characters it becomes a lot harder to copy and paste, a lot harder to scan an address with your eyes to see if you're paying who you think you're paying, harder to create a readable QR code, harder to upgrade website or database code that deals with bitcoin addresses, etc. There is rough consensus that very-long addresses are not workable."

How could you have a 70 byte long address without a P2SH scheme? Is this a mistake?

------------------------------------------------------------------------------
Try before you buy = See our experts in action!
The most comprehensive online learning library for Microsoft developers
is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3, MVC3,
Metro Style Apps, more. Free future releases when you subscribe now!
http://p.sf.net/sfu/learndevnow-dev2
_______________________________________________
Bitcoin-development mailing list
Bitcoin-development at lists.sourceforge.net
https://lists.sourceforge.net/lists/listinfo/bitcoin-development




From luke at dashjr.org  Sun Jan 29 05:15:58 2012
From: luke at dashjr.org (Luke-Jr)
Date: Sun, 29 Jan 2012 00:15:58 -0500
Subject: [Bitcoin-development] Quote on BIP 16
In-Reply-To: <1327813841.99379.YahooMailNeo@web121006.mail.ne1.yahoo.com>
References: <1327812740.41242.YahooMailNeo@web121002.mail.ne1.yahoo.com>
	<1327813841.99379.YahooMailNeo@web121006.mail.ne1.yahoo.com>
Message-ID: <201201290015.59665.luke@dashjr.org>

On Sunday, January 29, 2012 12:10:41 AM Amir Taaki wrote:
> 2 compressed pubkeys

2 compressed pubkeys are 33 bytes each. Add 1 bytes for the N (n-of-m), 1 byte 
for the address version, and finally the 4 byte checksum, you get a total of 
72 bytes. But these are *bytes* - to get an address, you also need to base58 
encode it: this yields a 99 character address.



From gmaxwell at gmail.com  Sun Jan 29 05:19:44 2012
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Sun, 29 Jan 2012 00:19:44 -0500
Subject: [Bitcoin-development] Quote on BIP 16
In-Reply-To: <1327812740.41242.YahooMailNeo@web121002.mail.ne1.yahoo.com>
References: <1327812740.41242.YahooMailNeo@web121002.mail.ne1.yahoo.com>
Message-ID: <CAAS2fgRWJb+p=gM4eG_p4fr1+UsT-EO_YZOvkgh6SnktRRTyEw@mail.gmail.com>

On Sat, Jan 28, 2012 at 11:52 PM, Amir Taaki <zgenjix at yahoo.com> wrote:
> How could you have a 70 byte long address without a P2SH scheme? Is this a mistake?

...  No it's not a mistake.  P2SH _prevents_ needing long addresses.

Lets unpack the acronym "pay to script _hash_".  Hashes only need to
be 128-256 bits in size or so to have acceptable security, so you
don't need something longer than that for paying to a hash.

Note that gavin is saying 70 characters, not bytes.

Without some form of P2SH then only way for you to make a personal
choice of asking people to pay to a two-factor protected account or
two a multiparty trust that manages the finances of an organization
is using some form of "P2S", pay-to-script.

In other words, you'd have to have an address that encodes a full
script specification for the sender to pay to,  instead of just
encoding its hash.  As a result these addresses would be much longer
(and potentially very long).

The minimum size of a two address involving encoded script would be on
that order, but they get bigger quite quickly if you add more options
to the script (actually 70 sounds quite small, it should be more like
100 for a minimum two pubkey script).

In addition to the unworkability of very long addresses as described
by gavin (amusingly I am unable to copy and paste the quoted example
in one go) a P2S solution has several problems which you might
consider more or less important:


(1) They are highly vulnerable to invisible substitution.  E.g. I can
trivially take a P2S address, change one or two characters and get a
script which is redeemable by anyone.  With P2SH you have to do
computation which is exponential in the number of unchanged digits to
get a look alike address.

(2) The sender is fully responsible for fees related to the enlarged
transactions. Even if _you're_ willing to take the txn-processing time
and fee burden of a 30 person joint trust address,  random e-commerce
sites will not be and will randomly reject your addresses.

(3) They create another input vector for non-trivial data which must
be inspected and validated, potentially presenting an attack surface.

(4) They leave the complicated (long) release rules in the transaction
outputs.  When a transaction is mined we can't be sure if it will ever
be redeemed. The outputs are unprunable.   In a future world where
many nodes prune output space is far more important than input space
and it would make sense to require more fees for it because we're
never sure how long it would need to be stored (making it an
attractive target for someone who wants to make Bitcoin unusable by
spamming it with worthless data).  P2SH reduces output sizes to the
absolute minimum without inflating the total data size.



From etotheipi at gmail.com  Sun Jan 29 05:23:13 2012
From: etotheipi at gmail.com (Alan Reiner)
Date: Sun, 29 Jan 2012 00:23:13 -0500
Subject: [Bitcoin-development] Quote on BIP 16
In-Reply-To: <1327813841.99379.YahooMailNeo@web121006.mail.ne1.yahoo.com>
References: <1327812740.41242.YahooMailNeo@web121002.mail.ne1.yahoo.com>
	<1327813841.99379.YahooMailNeo@web121006.mail.ne1.yahoo.com>
Message-ID: <4F24D7C1.3070106@gmail.com>

It certainly wouldn't hurt if there was a way to use OP_MULTICHECKSIG 
with hash160 values instead... I doubt that's workable, though.

At the moment, I feel that the copy&paste size problem is much smaller 
than the risk we take implementing such a huge change to the network.  I 
almost feel like, we should have multi-sig in place, thoroughly tested 
and available, as something to fall back on if something goes wrong with 
BIP 13/16/17 after implementation.  After all, I've been promoting the 
idea of considering the "cost" to fixing an erroneous/insecure 
implementation, as consideration for the proposals at hand.

But gmaxwell has expressed some compelling reasons why plain multi-sig 
might be abused, which maybe suggests we don't want it ever considered 
standard...?  I guess I'm not really promoting one thing or another, but 
I feel like copy&pasting is not a big deal (after all, it exists to 
moving large amounts of data around).  Then of course, I use 
home-shift-end all the time, and regular users may not be so adept at 
copying long strings.

-Alan



On 01/29/2012 12:10 AM, Amir Taaki wrote:
> 2 compressed pubkeys
>
>
> ----- Original Message -----
> From: Amir Taaki<zgenjix at yahoo.com>
> To: "bitcoin-development at lists.sourceforge.net"<bitcoin-development at lists.sourceforge.net>
> Cc:
> Sent: Sunday, January 29, 2012 4:52 AM
> Subject: [Bitcoin-development] Quote on BIP 16
>
> Gavin said:
> "Part of the controversy is whether really long bitcoin addresses would work-- would it be OK if the new bitcoin addresses were really long and looked something like this:  57HrrfEw6ZgRS58dygiHhfN7vVhaPaBE7HrrfEw6ZgRS58dygiHhfN7vVhaPaBiTE7vVhaPaBE7Hr
> (or possibly even longer)
>
> I've argued no: past 70 or so characters it becomes a lot harder to copy and paste, a lot harder to scan an address with your eyes to see if you're paying who you think you're paying, harder to create a readable QR code, harder to upgrade website or database code that deals with bitcoin addresses, etc. There is rough consensus that very-long addresses are not workable."
>
> How could you have a 70 byte long address without a P2SH scheme? Is this a mistake?
>
> ------------------------------------------------------------------------------
> Try before you buy = See our experts in action!
> The most comprehensive online learning library for Microsoft developers
> is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3, MVC3,
> Metro Style Apps, more. Free future releases when you subscribe now!
> http://p.sf.net/sfu/learndevnow-dev2
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
> ------------------------------------------------------------------------------
> Try before you buy = See our experts in action!
> The most comprehensive online learning library for Microsoft developers
> is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3, MVC3,
> Metro Style Apps, more. Free future releases when you subscribe now!
> http://p.sf.net/sfu/learndevnow-dev2
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development




From gmaxwell at gmail.com  Sun Jan 29 08:14:06 2012
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Sun, 29 Jan 2012 03:14:06 -0500
Subject: [Bitcoin-development] Quote on BIP 16
In-Reply-To: <4F24D7C1.3070106@gmail.com>
References: <1327812740.41242.YahooMailNeo@web121002.mail.ne1.yahoo.com>
	<1327813841.99379.YahooMailNeo@web121006.mail.ne1.yahoo.com>
	<4F24D7C1.3070106@gmail.com>
Message-ID: <CAAS2fgQhfYfwrT6M8AVDRYETwS0WrXD7iYoxUvcPT3VMJm5ryA@mail.gmail.com>

On Sun, Jan 29, 2012 at 12:23 AM, Alan Reiner <etotheipi at gmail.com> wrote:
[snip]
> But gmaxwell has expressed some compelling reasons why plain multi-sig
> might be abused, which maybe suggests we don't want it ever considered
> standard...? ?I guess I'm not really promoting one thing or another, but

Be careful not to conflate multisig _addresses_  and P2S with multisig
output scripts in general.

Of the issues I raised only the size of the potentially unprunable
transaction outputs is an argument against multisig outputs which
aren't getting packed up in addresses.

Things like negotiated escrow arrangements can work okay either way.

I think P2SH is still better for these for two reasons: Reasonable
anti-spam behavior by network participant may make it hard to make
large output scripts (see above), but this isn't an issue yet...  and
P2S(H) lets you use a separate escrow-maker tool for clients paying
into escrow without any knowledge or support of escrow transactions in
that client. This uncoupling is important both for general "feature
velocity" as well as providing a uniform feature set across bitcoin
services (e.g. you negotiate paying someone via escrow, you use a tool
to make a mutually agreed escrow configuration, but your funds are in
MTGOX? no issue if P2SH is widely used).



From zgenjix at yahoo.com  Sun Jan 29 11:19:44 2012
From: zgenjix at yahoo.com (Amir Taaki)
Date: Sun, 29 Jan 2012 03:19:44 -0800 (PST)
Subject: [Bitcoin-development] Fw:  Quote on BIP 16
In-Reply-To: <1327835941.47827.YahooMailNeo@web121006.mail.ne1.yahoo.com>
References: <1327812740.41242.YahooMailNeo@web121002.mail.ne1.yahoo.com>
	<CAAS2fgRWJb+p=gM4eG_p4fr1+UsT-EO_YZOvkgh6SnktRRTyEw@mail.gmail.com>
	<1327835941.47827.YahooMailNeo@web121006.mail.ne1.yahoo.com>
Message-ID: <1327835984.12365.YahooMailNeo@web121002.mail.ne1.yahoo.com>

(oops sorry greg- replied to you by mistake)

That address he gives is 77 characters/bytes (same thing). What I'm asking is how can it be so small. I know that it's encoding a script, but then I started trying to imagine what kind of script and to me it seems that 2 public keys are too large for those 77 characters when encoded.

That is the example quoted on the forums:
57HrrfEw6ZgRS58dygiHhfN7vVhaPaBE7HrrfEw6ZgRS58dygiHhfN7vVhaPaBiTE7vVhaPaBE7Hr


Could it be a mistake?


----- Original Message -----
From: Gregory Maxwell <gmaxwell at gmail.com>
To: Amir Taaki <zgenjix at yahoo.com>
Cc: "bitcoin-development at lists.sourceforge.net" <bitcoin-development at lists.sourceforge.net>
Sent: Sunday, January 29, 2012 5:19 AM
Subject: Re: [Bitcoin-development] Quote on BIP 16

On Sat, Jan 28, 2012 at 11:52 PM, Amir Taaki <zgenjix at yahoo.com> wrote:
> How could you have a 70 byte long address without a P2SH scheme? Is this a mistake?

...? No it's not a mistake.? P2SH _prevents_ needing long addresses.

Lets unpack the acronym "pay to script _hash_".? Hashes only need to
be 128-256 bits in size or so to have acceptable security, so you
don't need something longer than that for paying to a hash.

Note that gavin is saying 70 characters, not bytes.

Without some form of P2SH then only way for you to make a personal
choice of asking people to pay to a two-factor protected account or
two a multiparty trust that manages the finances of an organization
is using some form of "P2S", pay-to-script.

In other words, you'd have to have an address that encodes a full
script specification for the sender to pay to,? instead of just
encoding its hash.? As a result these addresses would be much longer
(and potentially very long).

The minimum size of a two address involving encoded script would be on
that order, but they get bigger quite quickly if you add more options
to the script (actually 70 sounds quite small, it should be more like
100 for a minimum two pubkey script).

In addition to the unworkability of very long addresses as described
by gavin (amusingly I am unable to copy and paste the quoted example
in one go) a P2S solution has several problems which you might
consider more or less important:


(1) They are highly vulnerable to invisible substitution.? E.g. I can
trivially take a P2S address, change one or two characters and get a
script which is redeemable by anyone.? With P2SH you have to do
computation which is exponential in the number of unchanged digits to
get a look alike address.

(2) The sender is fully responsible for fees related to the enlarged
transactions. Even if _you're_ willing to take the txn-processing time
and fee burden of a 30 person joint trust address,? random e-commerce
sites will not be and will randomly reject your addresses.

(3) They create another input vector for non-trivial data which must
be inspected and validated, potentially presenting an attack surface.

(4) They leave the complicated (long) release rules in the transaction
outputs.? When a transaction is mined we can't be sure if it will ever
be redeemed. The outputs are unprunable.?? In a future world where
many nodes prune output space is far more important than input space
and it would make sense to require more fees for it because we're
never sure how long it would need to be stored (making it an
attractive target for someone who wants to make Bitcoin unusable by
spamming it with worthless data).? P2SH reduces output sizes to the
absolute minimum without inflating the total data size.



From gavinandresen at gmail.com  Sun Jan 29 14:30:10 2012
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Sun, 29 Jan 2012 09:30:10 -0500
Subject: [Bitcoin-development] Fw: Quote on BIP 16
In-Reply-To: <1327835984.12365.YahooMailNeo@web121002.mail.ne1.yahoo.com>
References: <1327812740.41242.YahooMailNeo@web121002.mail.ne1.yahoo.com>
	<CAAS2fgRWJb+p=gM4eG_p4fr1+UsT-EO_YZOvkgh6SnktRRTyEw@mail.gmail.com>
	<1327835941.47827.YahooMailNeo@web121006.mail.ne1.yahoo.com>
	<1327835984.12365.YahooMailNeo@web121002.mail.ne1.yahoo.com>
Message-ID: <CABsx9T2A8f64mh2-uSKwrjj9aEo0Z=jHyETQ5J9cka9JwyJqJw@mail.gmail.com>

On Sun, Jan 29, 2012 at 6:19 AM, Amir Taaki <zgenjix at yahoo.com> wrote:

> (oops sorry greg- replied to you by mistake)
>
> That address he gives is 77 characters/bytes (same thing). What I'm asking
> is how can it be so small.


That's an alternative design for multisig addresses that would put a byte
giving the type of transaction and the 20-byte hashes of each of the public
keys involved. They would not have been redeemed using CHECKMULTISIG, but
would use DUP HASH160 CHECKSIG and the arithmetic or logical opcodes to
create the "m of n" condition.

Nobody really liked that solution because it means a new 'type' of bitcoin
address every time we want a new transaction type and long addresses.

Its only advantage is it didn't use CHECKMULTISIG, so there were no
problems with maximum-sigops-per-block.

-- 
--
Gavin Andresen
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120129/733b78ce/attachment.html>

From zgenjix at yahoo.com  Sun Jan 29 14:36:55 2012
From: zgenjix at yahoo.com (Amir Taaki)
Date: Sun, 29 Jan 2012 06:36:55 -0800 (PST)
Subject: [Bitcoin-development] Controlled block generation in fuzzer for
	testing blockchain
Message-ID: <1327847815.40132.YahooMailNeo@web121004.mail.ne1.yahoo.com>

I added the ability to do controlled generation of blocks to gavin's fuzzer

https://github.com/genjix/bitcoin/tree/fuzzer


bitcoind -daemon
bitcoind setfuzzpreviousblock?000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f
bitcoind setgenerate true

It will start hashing the block with the previous hash field set to?000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f and the target as 0x1d0000ff

On completion it will dump the hex value of the block to debug.log and exit.

You can then feed that block to your implementation in whatever controlled manner you wish (i.e with libbitcoin I made a simple tool in a few lines to read the hex and send it via the network in localhost). If anyone wants the libbitcoin tool then let me know and i'll paste it over on IRC.



From luke at dashjr.org  Sun Jan 29 14:40:01 2012
From: luke at dashjr.org (Luke-Jr)
Date: Sun, 29 Jan 2012 09:40:01 -0500
Subject: [Bitcoin-development] Fw: Quote on BIP 16
In-Reply-To: <CABsx9T2A8f64mh2-uSKwrjj9aEo0Z=jHyETQ5J9cka9JwyJqJw@mail.gmail.com>
References: <1327812740.41242.YahooMailNeo@web121002.mail.ne1.yahoo.com>
	<1327835984.12365.YahooMailNeo@web121002.mail.ne1.yahoo.com>
	<CABsx9T2A8f64mh2-uSKwrjj9aEo0Z=jHyETQ5J9cka9JwyJqJw@mail.gmail.com>
Message-ID: <201201290940.02464.luke@dashjr.org>

On Sunday, January 29, 2012 9:30:10 AM Gavin Andresen wrote:
> On Sun, Jan 29, 2012 at 6:19 AM, Amir Taaki <zgenjix at yahoo.com> wrote:
> > (oops sorry greg- replied to you by mistake)
> > 
> > That address he gives is 77 characters/bytes (same thing). What I'm
> > asking is how can it be so small.
> 
> That's an alternative design for multisig addresses that would put a byte
> giving the type of transaction and the 20-byte hashes of each of the public
> keys involved. They would not have been redeemed using CHECKMULTISIG, but
> would use DUP HASH160 CHECKSIG and the arithmetic or logical opcodes to
> create the "m of n" condition.
> 
> Nobody really liked that solution because it means a new 'type' of bitcoin
> address every time we want a new transaction type and long addresses.
> 
> Its only advantage is it didn't use CHECKMULTISIG, so there were no
> problems with maximum-sigops-per-block.

In other words, if the max-sigops-per-block were ever approaching a real 
problem, we could just start using these kind of transactions instead hidden 
behind the P2SH... so the one remotely-tangible benefit of BIP 16 over 17 has 
been solved, right? ;)



From tyrell.elden at gmail.com  Sun Jan 29 18:40:23 2012
From: tyrell.elden at gmail.com (Elden Tyrell)
Date: Sun, 29 Jan 2012 12:40:23 -0600
Subject: [Bitcoin-development] [PROPOSAL] Merkle tree of unspent
	transactions (MTUT),
	for serverless thin clients and self-verifiable prunned blockchain.
References: <CAE98tO0Nh=L2mSy-MzEW7o+0=Tzivw0zj8cG8e1EscmW0C0kBg@mail.gmail.com>
Message-ID: <jg43qn$jbn$1@dough.gmane.org>

On 2012-01-23 20:00:59 -0600, Alberto Torres said:
> This proposal describes how to add a hash-tree based check in the
> blockchain that allows to verify if a transaction is unspent without
> downloading and checking all the blockchain. The idea is not new, but
> at the time of this writing there isn't any technical description of
> how this should be done.

Thanks for writing this up (it's high time somebody did).  I like your 
acronym, but shouldn't it be "MTUO" since you spend *outputs* rather 
than *transactions*?  A transaction can have multiple outputs, some of 
which are spent and others which aren't.

I've added a link to your proposal on the 
https://en.bitcoin.it/wiki/Thin_Client_Security wiki page.

> Once 55% of blocks includes a valid MTUT hash in a 2-week timespan, 
> they should reject any block with an invalid (i.e. probably malicious) 
> MTUT hash block while accepting blocks without MTUT.

Just like OP_EVAL/p2sh, this creates the (small) risk of a blockchain split.

Unlike adding a new transaction type, here it's possible to eliminate 
this risk: give each MTUT an additional "prev" pointer (hash of some 
prior block) which points to the latest prior block with a correct 
MTUT.  This produces a "chain within the chain" of blocks that have 
valid MTUTs.  Hostile miners are free to add bogus-MTUT-blocks; those 
bogus blocks will simply never be included in the "inner chain", just 
like invalid blocks mined by hostile miners are never included in the 
blockchain.  By downloading the last day's worth of blocks (which is 
not much data at all), a client can see which "inner chain" the 
majority of the hashpower believed during the last 24 hours.  This 
eliminates the need for a vote in any specific block -- in effect you 
get a "rolling election".

This "inner chain" approach can be broadened to a K-ary tree by 
including K-many prior-block pointers.  With one of these in every 
block (and sensible choices) you wind up with 
O(log_K(chain_length))-operation hash-secure access to arbitrary blocks 
in the middle of the chain.  This is an important building block for 
ultra-high-security thin clients.  Even if only a 1/K of the network's 
hashpower starts adding these pointers the worst-case number of 
operations needed to reach an arbitrary block will still converge 
(though much more slowly) towards this ideal.

  - e





From zgenjix at yahoo.com  Sun Jan 29 22:40:14 2012
From: zgenjix at yahoo.com (Amir Taaki)
Date: Sun, 29 Jan 2012 14:40:14 -0800 (PST)
Subject: [Bitcoin-development] All pre-BIP BIPs are not valid
Message-ID: <1327876814.85926.YahooMailNeo@web121001.mail.ne1.yahoo.com>

Hi all,

Luke Dashjr is telling me that BIP 20 was accepted as Final a year ago (before the BIP process existed).

https://en.bitcoin.it/wiki/Bitcoin_Improvement_Proposals


I respectfully disagree. I find it nonsensical to have a BIP to have been accepted before the BIP process existed. My feeling is that a BIP needs to go through the proper formalised motions in public before becoming accepted.

The URI Scheme did not go through these motions. I did not know it was even accepted, and at least 2 implementations have objected to the standard as is. This is problematic because a standard is meant to be consensus building not enforcement from above.

Ergo I am going to say:

NO BIP EXISTED BEFORE THE BIP PROCESS.

NEW BIPS ARE ALWAYS DRAFT STATUS.

BIPS CHANGE STATUS AS SPECIFIED IN BIP 0001

Luke claims I do not have the ability to specify those conditions above.

If there are any objections then please tell me. I did not get to observe the process for BIP 20, therefore I am not accepting it. Anybody is welcome to submit a competing BIP to Luke's BIP 20 (as has happened with BIP 16 and 17).




From luke at dashjr.org  Sun Jan 29 22:50:40 2012
From: luke at dashjr.org (Luke-Jr)
Date: Sun, 29 Jan 2012 17:50:40 -0500
Subject: [Bitcoin-development] All pre-BIP BIPs are not valid
In-Reply-To: <1327876814.85926.YahooMailNeo@web121001.mail.ne1.yahoo.com>
References: <1327876814.85926.YahooMailNeo@web121001.mail.ne1.yahoo.com>
Message-ID: <201201291750.43042.luke@dashjr.org>

First and foremost, I consider this thread an utter waste of time. These 
matters were "finished" over a year ago, and there is no need to dig them up 
again just because there are numbers for BIPs now. I don't intend to continue 
this topic any further than necessary, since my time (and everyone else's) is 
better spent working on *actual forward progress*, not this attempt to rewrite 
history. That being said...

On Sunday, January 29, 2012 5:40:14 PM Amir Taaki wrote:
> Luke Dashjr is telling me that BIP 20 was accepted as Final a year ago
> (before the BIP process existed).

Before the BIP process was formalized. The process itself existed long before.

> I respectfully disagree. I find it nonsensical to have a BIP to have been
> accepted before the BIP process existed. My feeling is that a BIP needs to
> go through the proper formalised motions in public before becoming
> accepted.
> 
> The URI Scheme did not go through these motions. I did not know it was even
> accepted, and at least 2 implementations have objected to the standard as
> is. This is problematic because a standard is meant to be consensus
> building not enforcement from above.

It did. In early 2011, there was a consensus and multiple implementations (by 
name, I know of at least Spesmilo and WalletBuddy). This is by definition the 
Final status. It was not until months later that anyone objected to the 
standard.

> Ergo I am going to say:
> 
> NO BIP EXISTED BEFORE THE BIP PROCESS.

You are contradicting the assignment of BIP 0020 to a preexisting standard 
here.

> NEW BIPS ARE ALWAYS DRAFT STATUS.
> 
> BIPS CHANGE STATUS AS SPECIFIED IN BIP 0001

By trying to demote BIP 0020 from Final to Draft, you are not following the 
specification in BIP 0001.

> Luke claims I do not have the ability to specify those conditions above.

Rather, I am claiming that assigning a number does not give you the authority 
to demote a preexisting standard. No other standards organization has 
attempted to claim preexisting standards don't exist or change their status.

> If there are any objections then please tell me. I did not get to observe
> the process for BIP 20, therefore I am not accepting it. Anybody is
> welcome to submit a competing BIP to Luke's BIP 20 (as has happened with
> BIP 16 and 17).

Anyone is welcome to submit a new BIP aimed at Superceding BIP 20 (and doing 
so might make good sense soon, with various new functionality), but until that 
occurs, BIP 20 remains the Final status it has been for a whole year now.



From bitcoin-list at bluematt.me  Sun Jan 29 23:02:30 2012
From: bitcoin-list at bluematt.me (Matt Corallo)
Date: Sun, 29 Jan 2012 18:02:30 -0500
Subject: [Bitcoin-development] All pre-BIP BIPs are not valid
In-Reply-To: <1327876814.85926.YahooMailNeo@web121001.mail.ne1.yahoo.com>
References: <1327876814.85926.YahooMailNeo@web121001.mail.ne1.yahoo.com>
Message-ID: <1327878150.23803.4.camel@BMThinkPad.lan.bluematt.me>

I have to say, I agree with Luke here, this was Finalized a long time
ago.  The version that was agreed on can be seen at
https://en.bitcoin.it/wiki/BIP_0021

Also see https://bitcointalk.org/index.php?topic=6205.0 and Luke's three
biased polls at 
https://bitcointalk.org/index.php?topic=6206.0
https://bitcointalk.org/index.php?topic=6207.0
https://bitcointalk.org/index.php?topic=6208.0

Matt

On Sun, 2012-01-29 at 14:40 -0800, Amir Taaki wrote:
> Hi all,
> 
> Luke Dashjr is telling me that BIP 20 was accepted as Final a year ago (before the BIP process existed).
> 
> https://en.bitcoin.it/wiki/Bitcoin_Improvement_Proposals
> 
> 
> I respectfully disagree. I find it nonsensical to have a BIP to have been accepted before the BIP process existed. My feeling is that a BIP needs to go through the proper formalised motions in public before becoming accepted.
> 
> The URI Scheme did not go through these motions. I did not know it was even accepted, and at least 2 implementations have objected to the standard as is. This is problematic because a standard is meant to be consensus building not enforcement from above.
> 
> Ergo I am going to say:
> 
> NO BIP EXISTED BEFORE THE BIP PROCESS.
> 
> NEW BIPS ARE ALWAYS DRAFT STATUS.
> 
> BIPS CHANGE STATUS AS SPECIFIED IN BIP 0001
> 
> Luke claims I do not have the ability to specify those conditions above.
> 
> If there are any objections then please tell me. I did not get to observe the process for BIP 20, therefore I am not accepting it. Anybody is welcome to submit a competing BIP to Luke's BIP 20 (as has happened with BIP 16 and 17).





From luke at dashjr.org  Sun Jan 29 23:10:30 2012
From: luke at dashjr.org (Luke-Jr)
Date: Sun, 29 Jan 2012 18:10:30 -0500
Subject: [Bitcoin-development] All pre-BIP BIPs are not valid
In-Reply-To: <1327878150.23803.4.camel@BMThinkPad.lan.bluematt.me>
References: <1327876814.85926.YahooMailNeo@web121001.mail.ne1.yahoo.com>
	<1327878150.23803.4.camel@BMThinkPad.lan.bluematt.me>
Message-ID: <201201291810.31581.luke@dashjr.org>

On Sunday, January 29, 2012 6:02:30 PM Matt Corallo wrote:
> I have to say, I agree with Luke here, this was Finalized a long time
> ago.  The version that was agreed on can be seen at
> https://en.bitcoin.it/wiki/BIP_0021

No, that never had a consensus.

> Also see https://bitcointalk.org/index.php?topic=6205.0 and Luke's three
> biased polls at
> https://bitcointalk.org/index.php?topic=6206.0
> https://bitcointalk.org/index.php?topic=6207.0
> https://bitcointalk.org/index.php?topic=6208.0

As everyone can observe from your bitcointalk links, you didn't begin trolling 
until months after the URI Scheme was Finalized (in January 2011).



From zgenjix at yahoo.com  Sun Jan 29 23:55:29 2012
From: zgenjix at yahoo.com (Amir Taaki)
Date: Sun, 29 Jan 2012 15:55:29 -0800 (PST)
Subject: [Bitcoin-development] BIP 21 (modification BIP 20)
Message-ID: <1327881329.49770.YahooMailNeo@web121003.mail.ne1.yahoo.com>

Matt Corallo posted a modification of BIP 20 in an earlier email and I asked him if he wanted to become the champion of that BIP he submitted.

It is a modification of BIP 20 sans the alternative non-decimal number stuff.

https://en.bitcoin.it/wiki/BIP_0021


Right now, I will ask the GUI client implementations like MultiBit or Bitcoin-Qt, not different codebases like BitCoinJ or libbitcoin if they support BIP 20 or BIP 21. Feel free to raise any objections.

More weight will be given to GUIs with actual URI scheme implementations and it's good to have a general consensus.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120129/e0808f48/attachment.html>

From pieter.wuille at gmail.com  Mon Jan 30 02:31:02 2012
From: pieter.wuille at gmail.com (Pieter Wuille)
Date: Mon, 30 Jan 2012 03:31:02 +0100
Subject: [Bitcoin-development] CAddrMan: Stochastic IP address manager
Message-ID: <CAPg+sBjNTS3n8Q3XzZi5GpBL6k_-4AxRKr0BkWa=-AAVgqS=2Q@mail.gmail.com>

Hello all,

wanting to move to IPv6 support in the Satoshi bitcoin client
somewhere in the future, the way IP addresses were managed is not
really possible anymore. Right now, basically all addresses ever seen
are kept - both on-disk and in-memory, and sorted on last-seen time
with some randomization. For some people this lead to multi-megabyte
addr.dat files that took ages (well, seconds) to load.

After some discussion with Gregory Maxwell and others on IRC, I
decided to write a specialized address manager based on an entirely
different principle: only keep a limited number of addresses, keep and
index them in-memory, and only occasionally (and asynchronously) dump
them to disk. This of course leads to a weakness: attackers may try to
poison your entire address cache with addresses they control, in order
to perform a Sybil attack. This is especially dangerous in the context
of IPv6, where much more possible addresses exist.

To protect against this, we came up with this design: keep two tables:
one that keeps addresses we've had actual connections with, and one
that maintains untried/new addresses. Both are separated into several
limited-size buckets. Each tables provides a level of protection
against sybil attacks:
 * Addresses in the first table are placed in one of only a few
buckets chosen based on the address range (/16 for IPv4). This way, an
attacker cannot have tons of active nodes in the same /16 range, and
use those to fill the table.
 * Addresses in the second table are placed in one of a few buckets
chosen based on address range the information came from, instead of
the address itself. This way, an attacker spamming you with tons of
"addr" messages can only still have a limited effect.
 * All crucial decisions (selection of addresses, picking a place in a
bucket, which entry to evict if necessary, ...) are randomized with
biases to improve efficiency. Selection of buckets is based on a
cryptographic hash using a secret key to deterministically randomize
behaviour.

The implementation is available in pull request 787
(https://github.com/bitcoin/bitcoin/pull/787), but there is certainly
need for testing, and room for improvements. Test reports, comments,
constructive criticism, suggestions and improvements are very welcome.

-- 
Pieter



From luke at dashjr.org  Mon Jan 30 02:37:23 2012
From: luke at dashjr.org (Luke-Jr)
Date: Sun, 29 Jan 2012 21:37:23 -0500
Subject: [Bitcoin-development] CAddrMan: Stochastic IP address manager
In-Reply-To: <CAPg+sBjNTS3n8Q3XzZi5GpBL6k_-4AxRKr0BkWa=-AAVgqS=2Q@mail.gmail.com>
References: <CAPg+sBjNTS3n8Q3XzZi5GpBL6k_-4AxRKr0BkWa=-AAVgqS=2Q@mail.gmail.com>
Message-ID: <201201292137.25507.luke@dashjr.org>

On Sunday, January 29, 2012 9:31:02 PM Pieter Wuille wrote:
> The implementation is available in pull request 787
> (https://github.com/bitcoin/bitcoin/pull/787), but there is certainly
> need for testing, and room for improvements. Test reports, comments,
> constructive criticism, suggestions and improvements are very welcome.

As of yesterday, this is also part of my `next' and `next-test' branches.

Summary of latest next/next-test:

*** ACCEPTED (`next' branch)
	719 coinbaser					3dc0e2a
	755 explicit_p2sh				6728ecb
	787 sipa/addrman				70b8988
	786 sipa/checkkeys			c0e8c4d

*** NEEDS ACCEPT
	570 force_send (557)			9437c14
	568 rpc_keepalive				178f2c3	(threaded_rpc included)

*** NEEDS REVIEW
	457 origin-pull/457/head*	433b275	IPv6 JSON-RPC
	565 optimize_FastGetWork	4c1214f
	691 origin-pull/691/head	6192d6d	Temporarily disable "minimize to tray"

*** NEEDS SUPPORT
	780 checkhashverify			60649bd
	715 bugfix_client_name		fd6fc41
	559 accept_nonstdtxn		   7945399
	552 base58_liberal_parsing	e005327
	553 bugfix_qt_uri_amount_?	45d7c36
	562 optimize_ToHex			a781103

Luke



From laanwj at gmail.com  Mon Jan 30 09:13:37 2012
From: laanwj at gmail.com (Wladimir)
Date: Mon, 30 Jan 2012 10:13:37 +0100
Subject: [Bitcoin-development] BIP 21 (modification BIP 20)
In-Reply-To: <1327881329.49770.YahooMailNeo@web121003.mail.ne1.yahoo.com>
References: <1327881329.49770.YahooMailNeo@web121003.mail.ne1.yahoo.com>
Message-ID: <CA+s+GJAPBBtnHq_JyTapYpOOo3iv494EC8YX-bO-oLMDwj7WAg@mail.gmail.com>

I agree with BIP 0021

Wladimir

On Mon, Jan 30, 2012 at 12:55 AM, Amir Taaki <zgenjix at yahoo.com> wrote:

> Matt Corallo posted a modification of BIP 20 in an earlier email and I
> asked him if he wanted to become the champion of that BIP he submitted.
>
> It is a modification of BIP 20 sans the alternative non-decimal number
> stuff.
>
> https://en.bitcoin.it/wiki/BIP_0021
>
> Right now, I will ask the GUI client implementations like MultiBit or
> Bitcoin-Qt, not different codebases like BitCoinJ or libbitcoin if they
> support BIP 20 or BIP 21. Feel free to raise any objections.
>
> More weight will be given to GUIs with actual URI scheme implementations
> and it's good to have a general consensus.
>
>
> ------------------------------------------------------------------------------
> Try before you buy = See our experts in action!
> The most comprehensive online learning library for Microsoft developers
> is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3, MVC3,
> Metro Style Apps, more. Free future releases when you subscribe now!
> http://p.sf.net/sfu/learndevnow-dev2
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120130/beed5d9d/attachment.html>

From andyparkins at gmail.com  Mon Jan 30 10:57:54 2012
From: andyparkins at gmail.com (Andy Parkins)
Date: Mon, 30 Jan 2012 10:57:54 +0000
Subject: [Bitcoin-development] BIP-12, 16, 17
In-Reply-To: <B2F57365-3B00-4A0A-B0FC-92B823796F2B@ceptacle.com>
References: <B2F57365-3B00-4A0A-B0FC-92B823796F2B@ceptacle.com>
Message-ID: <201201301058.00650.andyparkins@gmail.com>

On 2012 January 28 Saturday, Michael Gronager wrote:

> If we want more information in a bitcoin address we could just as well
> cannibalize it from the checksum - today it is 4 bytes (1 to 4mia) it
> could be 2 or 3 bytes (1 to 65k or 16M) and that would not break the
> current meaning of the network ID. This would have the same effect - that
> you could not mistake two different addresses and create a non-redeemable
> transaction.

I'm throwing this out as an idea; not necessarily saying it's doable or even 
good.

There is spare capacity in the base58 encoding.

 - The address hash is 20 bytes
 - The checksum is 4 bytes
 - The address type is 1 byte
 
The longest and largest address is therefore 25 bytes of 0xff (it's not 
possible to all be 0xff of course).  Converting those 25 bytes of 0xff to 
base58...

 hex:    ffffffffffffffffffffffffffffffffffffffffffffffffff
 base58: 2mXR4oJkmBdJMxhBGQGb96gQ88xUzxLFyG

This is 34 base58 symbols.  It's not the largest base 58 number that will fit 
in 34 symbols though...

 base58: zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz
 hex:    20a8469deca6b5a6d367cbc0907d07e6a5584778de27ffffffff
 vs hex:   ffffffffffffffffffffffffffffffffffffffffffffffffff

i.e. there are a few unused bits (~5) available in the base58 representation 
that can be added without changing the number of symbols in the address.



Andy

-- 
Dr Andy Parkins
andyparkins at gmail.com
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 198 bytes
Desc: This is a digitally signed message part.
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120130/18318a15/attachment.sig>

From michael at ndrix.org  Mon Jan 30 16:53:27 2012
From: michael at ndrix.org (Michael Hendricks)
Date: Mon, 30 Jan 2012 09:53:27 -0700
Subject: [Bitcoin-development] CAddrMan: Stochastic IP address manager
In-Reply-To: <CAPg+sBjNTS3n8Q3XzZi5GpBL6k_-4AxRKr0BkWa=-AAVgqS=2Q@mail.gmail.com>
References: <CAPg+sBjNTS3n8Q3XzZi5GpBL6k_-4AxRKr0BkWa=-AAVgqS=2Q@mail.gmail.com>
Message-ID: <CAFHuXub52Lu4T0mCWoPoCrHGhCXyLpmEpSWn32_PZPjaRGL2LQ@mail.gmail.com>

On Sun, Jan 29, 2012 at 7:31 PM, Pieter Wuille <pieter.wuille at gmail.com> wrote:
> wanting to move to IPv6 support in the Satoshi bitcoin client
> somewhere in the future, the way IP addresses were managed is not
> really possible anymore. Right now, basically all addresses ever seen
> are kept - both on-disk and in-memory, and sorted on last-seen time
> with some randomization. For some people this lead to multi-megabyte
> addr.dat files that took ages (well, seconds) to load.

I think this is a great change for IPv4 too.  On certain machines with
slow IO, I routinely delete the address database before starting
bitcoind to improve load times.

> After some discussion with Gregory Maxwell and others on IRC, I
> decided to write a specialized address manager based on an entirely
> different principle: only keep a limited number of addresses, keep and
> index them in-memory, and only occasionally (and asynchronously) dump
> them to disk.

I've started a couple patches with a similar design, but not produced
anything I'm happy with.  That work has persuaded me that this
architecture is a valuable improvement over what we have today.

> This of course leads to a weakness: attackers may try to
> poison your entire address cache with addresses they control, in order
> to perform a Sybil attack. This is especially dangerous in the context
> of IPv6, where much more possible addresses exist.

If the Bitcoin client has multiple peer discovery methods enabled
(IRC, DNS, seed nodes, etc), it might be wise to guarantee that at
least one peer is selected via each method.  This requires a Sybil
attacker to control all peer discovery methods for a successful
attack.

> To protect against this, we came up with this design: keep two tables:
> one that keeps addresses we've had actual connections with, and one
> that maintains untried/new addresses. Both are separated into several
> limited-size buckets. Each tables provides a level of protection
> against sybil attacks:
> ?* Addresses in the first table are placed in one of only a few
> buckets chosen based on the address range (/16 for IPv4). This way, an
> attacker cannot have tons of active nodes in the same /16 range, and
> use those to fill the table.
> ?* Addresses in the second table are placed in one of a few buckets
> chosen based on address range the information came from, instead of
> the address itself. This way, an attacker spamming you with tons of
> "addr" messages can only still have a limited effect.

Cool design.  It seems resilient to many attacks.  A Sybil attack
coming from a large botnet (which controls addresses in many ranges)
can still fill all buckets in both tables, I think.  As far as I can
tell, that wasn't possible with the old design.

-- 
Michael



From gavinandresen at gmail.com  Mon Jan 30 17:55:50 2012
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Mon, 30 Jan 2012 12:55:50 -0500
Subject: [Bitcoin-development] BIP 16/17 deadlines
Message-ID: <CABsx9T2LBXsoQiQguJMoFhA9aM7bFE6AGX9czRQB2wti1Binqw@mail.gmail.com>

I've started a discussion on BIP 16/17 support moving forward
(including trying to improve the testing process) here:
??https://bitcointalk.org/index.php?topic=61922.0

(please reply there so the discussion stays mostly in one place)

--
--
Gavin Andresen



From thomasV1 at gmx.de  Mon Jan 30 18:07:16 2012
From: thomasV1 at gmx.de (thomasV1 at gmx.de)
Date: Mon, 30 Jan 2012 19:07:16 +0100
Subject: [Bitcoin-development] BIP 21 (modification BIP 20)
Message-ID: <20120130180716.261910@gmx.net>

I too support BIP21 over BIP20. However, I do not understand the "Sending money via private key" feature; in which situation would such a URI be useful?

Also, I posted a proposal in the forum, to extend the URI syntax with signatures. The goal would be to provide a proof of identity of the recipient; genjix told me that it would be more appropriate to post that here.

My proposal is described here: http://ecdsa.org/bitcoin_URIs.html

My original forum post is here: https://bitcointalk.org/index.php?topic=58534.msg689190#msg689190

-- 
Empfehlen Sie GMX DSL Ihren Freunden und Bekannten und wir
belohnen Sie mit bis zu 50,- Euro! https://freundschaftswerbung.gmx.de



From luke at dashjr.org  Mon Jan 30 18:44:06 2012
From: luke at dashjr.org (Luke-Jr)
Date: Mon, 30 Jan 2012 13:44:06 -0500
Subject: [Bitcoin-development] BIP 21 (modification BIP 20)
In-Reply-To: <20120130180716.261910@gmx.net>
References: <20120130180716.261910@gmx.net>
Message-ID: <201201301344.08034.luke@dashjr.org>

On Monday, January 30, 2012 1:07:16 PM thomasV1 at gmx.de wrote:
> I too support BIP21 over BIP20.

BIP 21 is not forwards-compatible, and is intentionally designed to be biased 
toward decimal. BIP 20 is neutrally biased, forward-compatible, and has been 
implemented for over a year now. If BIP 20 is to be Superceded, a proposal 
should improve on it, not make it worse with bigotry and short-sightedness.



From g.rowe at froot.co.uk  Mon Jan 30 18:50:03 2012
From: g.rowe at froot.co.uk (Gary Rowe)
Date: Mon, 30 Jan 2012 18:50:03 +0000
Subject: [Bitcoin-development]  BIP 21 (modification BIP 20)
Message-ID: <CAKm8k+1VFYSt7115KKGy5C7orFoU-N=8vfkQ_sc8onfQq96_Ww@mail.gmail.com>

Hi all,

Speaking on behalf of the MultiBit team (Jim's currently on holiday), we
will not be supporting Tonal Bitcoins anytime soon. Therefore we back the
BIP 21 proposal.

At present MultiBit does not support the "message" or "send" fields but we
would be happy to add this functionality as required.

Regarding the idea of a signed URI, it is appealing, however, it may not
work. If I understand it correctly, the main idea appears to be to protect
a URI from malicious replacement (at MultiBit we were concerned that a
Bitcoin "swatch" would be subjected to the same attack vector and we came
up with the term "swatch swabbing"). If a Bitcoin URI is served up from a
trusted source (e.g. a merchant site over HTTPS) then there is no need for
signing. It should be assumed that the merchant will offer a clean room
payment area so that no untrusted JavaScript will creep into the final page
and wreak havoc.

It would seem that in any situation where the attacker has complete control
over the content of the URI they will be able to successfully swab it to
match their own fraudulent address. Imagine attempting to protect a QR code
posted against a pole attempting to get BTC donations for a charity. How
long before that was replaced by a different version operated by the
thieves with good signatures all round?

Of course, I may have misunderstood so I would welcome further discussion.

One field that the MultiBit team would like to add to the BIP 21 proposal
is "expires" which would contain an ISO8601 formatted date/time in UTC
(e.g. "2000-01-01T23:59:59Z"). This would allow merchants to issue Bitcoin
URIs that would expose them to a currency/inventory risk for a defined
period of time.

Kind regards,

Gary Rowe


PS First post to this list
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120130/17b4bede/attachment.html>

From luke at dashjr.org  Mon Jan 30 18:56:14 2012
From: luke at dashjr.org (Luke-Jr)
Date: Mon, 30 Jan 2012 13:56:14 -0500
Subject: [Bitcoin-development] BIP 21 (modification BIP 20)
In-Reply-To: <CAKm8k+1VFYSt7115KKGy5C7orFoU-N=8vfkQ_sc8onfQq96_Ww@mail.gmail.com>
References: <CAKm8k+1VFYSt7115KKGy5C7orFoU-N=8vfkQ_sc8onfQq96_Ww@mail.gmail.com>
Message-ID: <201201301356.16032.luke@dashjr.org>

On Monday, January 30, 2012 1:50:03 PM Gary Rowe wrote:
> Speaking on behalf of the MultiBit team (Jim's currently on holiday), we
> will not be supporting Tonal Bitcoins anytime soon. Therefore we back the
> BIP 21 proposal.

It is not correct to imply that BIP 20 requires Tonal Bitcoin support.
In fact, the exact opposite is true; it states that even if one unit (eg, TBC) 
would be a more rational way to display a specified amount, clients should 
still interpret it in the way that is deemed to be most intuitive to the user 
(eg, BTC).



From g.rowe at froot.co.uk  Mon Jan 30 19:13:52 2012
From: g.rowe at froot.co.uk (Gary Rowe)
Date: Mon, 30 Jan 2012 19:13:52 +0000
Subject: [Bitcoin-development] BIP 21 (modification BIP 20)
In-Reply-To: <201201301356.16032.luke@dashjr.org>
References: <CAKm8k+1VFYSt7115KKGy5C7orFoU-N=8vfkQ_sc8onfQq96_Ww@mail.gmail.com>
	<201201301356.16032.luke@dashjr.org>
Message-ID: <CAKm8k+2JcZ++N76HOd+Obr1DR3gG9e+U-gVCHYyN_Eo-4+ciZw@mail.gmail.com>

Having closely read the BIP20 proposal, I can see your point. As I see it,
BIP 20 vs BIP 21 is about standardising on a representation of the "amount"
field. BIP 20 proposes that "amount" can contain alternative
representations, clearly defined, whereas BIP 21 requires the use of a
single representation in decimal notation.

In my view, BIP 21 still wins since it reduces complexity for the end
client both at the human and machine level.

On 30 January 2012 18:56, Luke-Jr <luke at dashjr.org> wrote:

> On Monday, January 30, 2012 1:50:03 PM Gary Rowe wrote:
> > Speaking on behalf of the MultiBit team (Jim's currently on holiday), we
> > will not be supporting Tonal Bitcoins anytime soon. Therefore we back the
> > BIP 21 proposal.
>
> It is not correct to imply that BIP 20 requires Tonal Bitcoin support.
> In fact, the exact opposite is true; it states that even if one unit (eg,
> TBC)
> would be a more rational way to display a specified amount, clients should
> still interpret it in the way that is deemed to be most intuitive to the
> user
> (eg, BTC).
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120130/cb417acb/attachment.html>

From luke at dashjr.org  Mon Jan 30 19:17:03 2012
From: luke at dashjr.org (Luke-Jr)
Date: Mon, 30 Jan 2012 14:17:03 -0500
Subject: [Bitcoin-development] BIP 21 (modification BIP 20)
In-Reply-To: <CAKm8k+2JcZ++N76HOd+Obr1DR3gG9e+U-gVCHYyN_Eo-4+ciZw@mail.gmail.com>
References: <CAKm8k+1VFYSt7115KKGy5C7orFoU-N=8vfkQ_sc8onfQq96_Ww@mail.gmail.com>
	<201201301356.16032.luke@dashjr.org>
	<CAKm8k+2JcZ++N76HOd+Obr1DR3gG9e+U-gVCHYyN_Eo-4+ciZw@mail.gmail.com>
Message-ID: <201201301417.05584.luke@dashjr.org>

On Monday, January 30, 2012 2:13:52 PM Gary Rowe wrote:
> Having closely read the BIP20 proposal, I can see your point. As I see it,
> BIP 20 vs BIP 21 is about standardising on a representation of the "amount"
> field. BIP 20 proposes that "amount" can contain alternative
> representations, clearly defined, whereas BIP 21 requires the use of a
> single representation in decimal notation.
> 
> In my view, BIP 21 still wins since it reduces complexity for the end
> client both at the human and machine level.

If the goal is to reduce complexity, strtol-compatible amount is the answer ;)



From grarpamp at gmail.com  Mon Jan 30 23:27:43 2012
From: grarpamp at gmail.com (grarpamp)
Date: Mon, 30 Jan 2012 18:27:43 -0500
Subject: [Bitcoin-development] Compilation warnings with -Wall
Message-ID: <CAD2Ti29M_cYh=4-1AFqoJ9umk8RB5PnHD2pjXMRNuD96LxVcbw@mail.gmail.com>

This is counted from the current git master on bsd.
The first two are of note and should probably be looked at.
A little more work after those and it might be possible to
use -Wall by default as addressing even some of these
would remove tons of lines from the output :)

   1 net.cpp:141: warning: 'pszGet' may be used uninitialized in this function
   1 net.cpp:142: warning: 'pszKeyword' may be used uninitialized in
this function

   1 script.cpp:1427: warning: unused variable 'n'
   1 test/miner_tests.cpp:14: warning: unused variable 'pstate'

   1 bitcoinrpc.cpp:1533: warning: unused parameter 'parg'
   1 bitcoinrpc.cpp:2366: warning: unused parameter 'parg'
   1 db.cpp:337: warning: unused parameter 'nHeight'
   1 init.cpp:36: warning: unused parameter 'parg'
   1 init.cpp:44: warning: unused parameter 'parg'
   1 init.cpp:705: warning: unused parameter 'fAutoStart'
   1 irc.cpp:258: warning: unused parameter 'parg'
   1 json/json_spirit_reader_template.h:362: warning: unused parameter 'i'
   1 json/json_spirit_reader_template.h:381: warning: unused parameter 'end'
   1 json/json_spirit_reader_template.h:386: warning: unused parameter 'end'
   1 json/json_spirit_reader_template.h:391: warning: unused parameter 'end'
   1 json/json_spirit_reader_template.h:401: warning: unused parameter 'end'
   1 main.cpp:3130: warning: unused parameter 'pindexPrev'
   1 net.cpp:1063: warning: unused parameter 'parg'
   1 net.cpp:1209: warning: unused parameter 'parg'
   1 net.cpp:1380: warning: unused parameter 'parg'
   1 net.cpp:1480: warning: unused parameter 'parg'
   1 net.cpp:1617: warning: unused parameter 'parg'
   1 net.cpp:200: warning: unused parameter 'parg'
   1 net.cpp:619: warning: unused parameter 'parg'
  13 noui.h:40: warning: unused parameter 'parent'
  13 noui.h:40: warning: unused parameter 'style'
  13 noui.h:40: warning: unused parameter 'x'
  13 noui.h:40: warning: unused parameter 'y'
  13 noui.h:53: warning: unused parameter 'nFeeRequired'
  13 noui.h:53: warning: unused parameter 'parent'
  13 noui.h:53: warning: unused parameter 'strCaption'
  13 noui.h:58: warning: unused parameter 'nField'
  13 noui.h:58: warning: unused parameter 'strText'
  13 noui.h:62: warning: unused parameter 'fn'
  13 noui.h:70: warning: unused parameter 'message'
  23 script.h:352: warning: unused parameter 'b'
   1 serialize.h:1131: warning: unused parameter 'nType'
   1 serialize.h:1131: warning: unused parameter 'nVersion'
  31 serialize.h:176: warning: unused parameter 'a'
  53 serialize.h:460: warning: unused parameter 'nType'
  53 serialize.h:460: warning: unused parameter 'nVersion'
  66 serialize.h:482: warning: unused parameter 'nType'
  66 serialize.h:482: warning: unused parameter 'nVersion'
  66 serialize.h:505: warning: unused parameter 'nType'
  66 serialize.h:505: warning: unused parameter 'nVersion'
 611 serialize.h:747: warning: unused parameter 's'
 611 serialize.h:747: warning: unused parameter 'ser_action'
 607 serialize.h:753: warning: unused parameter 'ser_action'
 671 serialize.h:760: warning: unused parameter 'ser_action'
   1 test/test_bitcoin.cpp:25: warning: unused parameter 'parg'
  23 uint256.h:359: warning: unused parameter 'nType'
  23 uint256.h:359: warning: unused parameter 'nVersion'
  66 uint256.h:365: warning: unused parameter 'nType'
  66 uint256.h:365: warning: unused parameter 'nVersion'
  45 uint256.h:371: warning: unused parameter 'nType'
  45 uint256.h:371: warning: unused parameter 'nVersion'
   1 util.cpp:1184: warning: unused parameter 'nLine'
   1 util.cpp:1184: warning: unused parameter 'pszFile'
   1 util.cpp:1184: warning: unused parameter 'pszName'
   1 util.cpp:48: warning: unused parameter 'file'
   1 util.cpp:48: warning: unused parameter 'line'
  28 util.h:682: warning: unused parameter 'nExitCode'
  28 util.h:697: warning: unused parameter 'pfn'
   1 wallet.cpp:320: warning: unused parameter 'fFindBlock'



From gavinandresen at gmail.com  Tue Jan 31 02:05:49 2012
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Mon, 30 Jan 2012 21:05:49 -0500
Subject: [Bitcoin-development] CAddrMan: Stochastic IP address manager
In-Reply-To: <CAFHuXub52Lu4T0mCWoPoCrHGhCXyLpmEpSWn32_PZPjaRGL2LQ@mail.gmail.com>
References: <CAPg+sBjNTS3n8Q3XzZi5GpBL6k_-4AxRKr0BkWa=-AAVgqS=2Q@mail.gmail.com>
	<CAFHuXub52Lu4T0mCWoPoCrHGhCXyLpmEpSWn32_PZPjaRGL2LQ@mail.gmail.com>
Message-ID: <CABsx9T0avsrL3134WaA3boG-cdx2NcgEH1mQG7Cef78ZV5UNkw@mail.gmail.com>

> Cool design. ?It seems resilient to many attacks. ?A Sybil attack
> coming from a large botnet (which controls addresses in many ranges)
> can still fill all buckets in both tables, I think. ?As far as I can
> tell, that wasn't possible with the old design.

Given the randomness in Pieter's design, that seems extremely unlikely
/ difficult to do. Is it possible to do a back-of-the-envelope
calculation to figure out what percentage of nodes on the network an
attacker would have to control to have a (say) 1% chance of a
successful Sybil attack?

I like this change; I'd like to pull it for the 0.6 release.

I've also been wondering if it is time to remove the IRC bootstrapping
mechanism; it would remove a fair bit of code and we'd stop getting
reports that various ISPs tag bitcoin as malware.  When testing the
list of built-in bootstrapping IP addresses I always connect fairly
quickly, and the DNS seeding hosts seems to be working nicely, too.

-- 
--
Gavin Andresen



From luke at dashjr.org  Tue Jan 31 02:07:05 2012
From: luke at dashjr.org (Luke-Jr)
Date: Mon, 30 Jan 2012 21:07:05 -0500
Subject: [Bitcoin-development] CAddrMan: Stochastic IP address manager
In-Reply-To: <CABsx9T0avsrL3134WaA3boG-cdx2NcgEH1mQG7Cef78ZV5UNkw@mail.gmail.com>
References: <CAPg+sBjNTS3n8Q3XzZi5GpBL6k_-4AxRKr0BkWa=-AAVgqS=2Q@mail.gmail.com>
	<CAFHuXub52Lu4T0mCWoPoCrHGhCXyLpmEpSWn32_PZPjaRGL2LQ@mail.gmail.com>
	<CABsx9T0avsrL3134WaA3boG-cdx2NcgEH1mQG7Cef78ZV5UNkw@mail.gmail.com>
Message-ID: <201201302107.07130.luke@dashjr.org>

On Monday, January 30, 2012 9:05:49 PM Gavin Andresen wrote:
> I've also been wondering if it is time to remove the IRC bootstrapping
> mechanism; it would remove a fair bit of code and we'd stop getting
> reports that various ISPs tag bitcoin as malware.  When testing the
> list of built-in bootstrapping IP addresses I always connect fairly
> quickly, and the DNS seeding hosts seems to be working nicely, too.

How about just disable it by default for 0.6 and strip it out entirely before 
0.7 if there's no problems?



From gmaxwell at gmail.com  Tue Jan 31 02:57:31 2012
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Mon, 30 Jan 2012 21:57:31 -0500
Subject: [Bitcoin-development] CAddrMan: Stochastic IP address manager
In-Reply-To: <CABsx9T0avsrL3134WaA3boG-cdx2NcgEH1mQG7Cef78ZV5UNkw@mail.gmail.com>
References: <CAPg+sBjNTS3n8Q3XzZi5GpBL6k_-4AxRKr0BkWa=-AAVgqS=2Q@mail.gmail.com>
	<CAFHuXub52Lu4T0mCWoPoCrHGhCXyLpmEpSWn32_PZPjaRGL2LQ@mail.gmail.com>
	<CABsx9T0avsrL3134WaA3boG-cdx2NcgEH1mQG7Cef78ZV5UNkw@mail.gmail.com>
Message-ID: <CAAS2fgRPj29FSBcC_RQbufSC5tPhnZjguUQVAaWOn2VN6DZR1A@mail.gmail.com>

On Mon, Jan 30, 2012 at 9:05 PM, Gavin Andresen <gavinandresen at gmail.com> wrote:
> I've also been wondering if it is time to remove the IRC bootstrapping
> mechanism; it would remove a fair bit of code and we'd stop getting
> reports that various ISPs tag bitcoin as malware. ?When testing the
> list of built-in bootstrapping IP addresses I always connect fairly
> quickly, and the DNS seeding hosts seems to be working nicely, too.

S?? would we remove it or leave it deactivated as a fallback users can turn on?

I have two different thoughts about IRC depending on the answer.

I think it's important that we have more mechanisms then just DNS and
hardcoded seednodes.

This is important because the mechanisms we have are all pretty
subject to blocking. Now? before you say it? Bitcoin isn't intended to
be blocking resistant (combine it with Tor and Tor anti-censorship
tools) but by making blocking a bit harder we discourage people from
even trying, even if we're not seriously in the anti-blocking
business? and it gives bitcoin users more confidence because there is
a bit less FUD  "What if your ISP blocks it?? It uses DNS! Someone
might take away the domains! SOPA PIPI ACTA CIPA Alakazam".

Is the fact that users can addnodes / addr.txt enough of an
alternative to address this?   _If so_, then removing it is a good
idea.  I volunteer to maintain a multi-channel joining node for the
foreseeable future to avoid letting old clients get partitioned
(several people need to do this).

An area where I think our mechanisms are inadequate absent IRC is
announcing new nodes. I had a new listener up for over a week recently
and was basically getting no inbound until I enabled IRC.   I
volunteer to do some measurement of this (e.g. bring up some nodes
with no irc and find out how long until sipa hears about them).  If
DNS seeds are slow to learn about new nodes we may need to add a
simple UDP announcement feature.

In any case, I hadn't been thinking that we would completely remove
IRC? I was expecting us to keep IRC around but turned off.

In particular I think it may be a little risky to turn off IRC at the
same time as deploying addrman, because if addrman has unexpected bad
behavior IRC is what may keep things going.  Obviously it should be
well tested enough to feel confident, but belt-and-suspenders is the
way to go.


If we do keep in the long run I think it's important to _fix_ IRC.
Right now it has some really stupid behavior which is highly
pro-partitioning.

*/who only returns a few nodes, and because most idlers aren't
actually working (no port forward) it's usually for there to be only a
few that work. (I've never seen zero, but I've seen 1).
*Other than who we only learn about nodes when they join. But the
stable long lived nodes we need to hear about seldom rejoin. Nonuseful
windows boxes go up and down a lot.
*Nodes sit in a single channel forever. There are 100 of them.
Especially with fewer clients on line nodes may be sitting alone with
no correctly working nodes with them.
*Nodes recently seen on IRC are highly promoted in the peer selection.

So, here is an updated irc.cpp which I've been running (in various
versions) for a while:
http://people.xiph.org/~greg/irc.cpp

It does the following things:
* Only stays connected for a half hour
* If its sure its not listening it uses a random nick so people won't
try to connect
* Reconnects if it needs more connections
* If the node is actually listening (evidence by actual incoming
connections) it reconnects on its own every 1-2 hours and joins two
channels at random rather than one.
(it doesn't change peer selection? It's hard to be confident of the
impact of that change. I think addrman makes it less of an issue)

I've only not submitted it as a pull request because I haven't had a
chance to test to my standards, and because I felt unsure about the
future of IRC.

I feel strongly that if we're going to keep IRC as a backup we should
fix it. If we're not going to bother then thats fine? but I think we
need to think carefully if we're doing enough for bootstraping (with
the points I made) without it.

Certainly getting it off by default would be a good move. The botnet
allegations are horrible.



From michael at ndrix.org  Tue Jan 31 04:33:02 2012
From: michael at ndrix.org (Michael Hendricks)
Date: Mon, 30 Jan 2012 21:33:02 -0700
Subject: [Bitcoin-development] CAddrMan: Stochastic IP address manager
In-Reply-To: <CABsx9T0avsrL3134WaA3boG-cdx2NcgEH1mQG7Cef78ZV5UNkw@mail.gmail.com>
References: <CAPg+sBjNTS3n8Q3XzZi5GpBL6k_-4AxRKr0BkWa=-AAVgqS=2Q@mail.gmail.com>
	<CAFHuXub52Lu4T0mCWoPoCrHGhCXyLpmEpSWn32_PZPjaRGL2LQ@mail.gmail.com>
	<CABsx9T0avsrL3134WaA3boG-cdx2NcgEH1mQG7Cef78ZV5UNkw@mail.gmail.com>
Message-ID: <CAFHuXuZ78y3nHfuKBgjO1j+bNsdnbngDee_Xii4xGhUshJqtZQ@mail.gmail.com>

On Mon, Jan 30, 2012 at 7:05 PM, Gavin Andresen <gavinandresen at gmail.com> wrote:
> Given the randomness in Pieter's design, that seems extremely unlikely
> / difficult to do. Is it possible to do a back-of-the-envelope
> calculation to figure out what percentage of nodes on the network an
> attacker would have to control to have a (say) 1% chance of a
> successful Sybil attack?

The randomness prevents finely crafted attacks since an attacker can't
predict which bucket his address ends up in.  I don't think it helps
against brute force attacks though.  If 60% of the network's nodes are
controlled by an evil botnet, 60% of the nodes we pull out of the
address manager point to the attacker.  If a client has 8 connections
to the network, a Sybil attack would succeed 1.7% of the time.  At
current network size, 60% of listening nodes is 2,800; only 2-5% of a
decent botnet.

Nodes that accept incoming connections are far less vulnerable, since
the probability of success decreases exponentially with the number of
connections.  95% botnet control with 125 connections has 10^-6 chance
of success.

Perhaps we could add a command-line option for increasing the maximum
number of outbound connections.  That way, nodes unable to accept
incoming connections can easily decrease their susceptibility to Sybil
attack.

> I've also been wondering if it is time to remove the IRC bootstrapping
> mechanism; it would remove a fair bit of code and we'd stop getting
> reports that various ISPs tag bitcoin as malware. ?When testing the
> list of built-in bootstrapping IP addresses I always connect fairly
> quickly, and the DNS seeding hosts seems to be working nicely, too.

I think it should be disabled by default one release after the new
address manager is released.  That way, we're not changing too many
parts of the bootstrapping process at once.

As an aside, I can't help but wonder whether ISPs blocking IRC traffic
filters some botnets out of the IRC bootstrapping channels; keeping
them more "pure".

-- 
Michael



From thomasV1 at gmx.de  Tue Jan 31 06:54:44 2012
From: thomasV1 at gmx.de (thomasV1 at gmx.de)
Date: Tue, 31 Jan 2012 07:54:44 +0100
Subject: [Bitcoin-development] BIP 21 (modification BIP 20)
In-Reply-To: <CAKm8k+1VFYSt7115KKGy5C7orFoU-N=8vfkQ_sc8onfQq96_Ww@mail.gmail.com>
References: <CAKm8k+1VFYSt7115KKGy5C7orFoU-N=8vfkQ_sc8onfQq96_Ww@mail.gmail.com>
Message-ID: <20120131065444.29110@gmx.net>


> Regarding the idea of a signed URI, it is appealing, however, it may not
> work. If I understand it correctly, the main idea appears to be to protect
> a URI from malicious replacement 

No. The main idea is to protect the consumer against a malicious seller pretending that he has not been paid. Please read the forum.

> If a Bitcoin URI is served up from a
> trusted source (e.g. a merchant site over HTTPS) then there is no need for
> signing. It should be assumed that the merchant will offer a clean room
> payment area so that no untrusted JavaScript will creep into the final
> page
> and wreak havoc.
> 
> It would seem that in any situation where the attacker has complete
> control
> over the content of the URI they will be able to successfully swab it to
> match their own fraudulent address. Imagine attempting to protect a QR
> code
> posted against a pole attempting to get BTC donations for a charity. How
> long before that was replaced by a different version operated by the
> thieves with good signatures all round?
> 
> Of course, I may have misunderstood so I would welcome further discussion.

The bitcoin address that is used to sign URIs will establish the online reputation of the merchant. If a merchant has received a payment and pretends not to have received it, the signed URI will prove him wrong. 

In principle it would be possible to use HTTPS signatures for that purpose, but this is not really the way HTTPS is supposed to work, and it has disadvantages:
- HTTPS is not always available; there are other communication channels.
- A website, even a single page, may contain URIs posted by various merchants; we need to distinguish the identity of the merchant from the identity of the website.
- with signed URIs, a Bitcoin client can easily keep track of the signatures for all the payments it made. if we used the HTTPS signature of the webpage as receipts, then users would need to save them manually. To my knowledge, nobody does that.



> One field that the MultiBit team would like to add to the BIP 21 proposal
> is "expires" which would contain an ISO8601 formatted date/time in UTC
> (e.g. "2000-01-01T23:59:59Z"). This would allow merchants to issue Bitcoin
> URIs that would expose them to a currency/inventory risk for a defined
> period of time.

yes, that too. see my proposal here: https://bitcointalk.org/index.php?topic=60828.0;topicseen

-- 
Empfehlen Sie GMX DSL Ihren Freunden und Bekannten und wir
belohnen Sie mit bis zu 50,- Euro! https://freundschaftswerbung.gmx.de



From gmaxwell at gmail.com  Tue Jan 31 07:17:07 2012
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Tue, 31 Jan 2012 02:17:07 -0500
Subject: [Bitcoin-development] CAddrMan: Stochastic IP address manager
In-Reply-To: <CAFHuXuZ78y3nHfuKBgjO1j+bNsdnbngDee_Xii4xGhUshJqtZQ@mail.gmail.com>
References: <CAPg+sBjNTS3n8Q3XzZi5GpBL6k_-4AxRKr0BkWa=-AAVgqS=2Q@mail.gmail.com>
	<CAFHuXub52Lu4T0mCWoPoCrHGhCXyLpmEpSWn32_PZPjaRGL2LQ@mail.gmail.com>
	<CABsx9T0avsrL3134WaA3boG-cdx2NcgEH1mQG7Cef78ZV5UNkw@mail.gmail.com>
	<CAFHuXuZ78y3nHfuKBgjO1j+bNsdnbngDee_Xii4xGhUshJqtZQ@mail.gmail.com>
Message-ID: <CAAS2fgSAkCOg=E+JTuX5tSyrfCh7ZPLprNyqr6hRndK2YfMcug@mail.gmail.com>

On Mon, Jan 30, 2012 at 11:33 PM, Michael Hendricks <michael at ndrix.org> wrote:
> address manager point to the attacker. ?If a client has 8 connections
> to the network, a Sybil attack would succeed 1.7% of the time.

Meh, careful not to mixup addrman created issues with preexisting ones
simply related to the number of connections vs the number of nodes.
Even absent addressman someone who can spin up a large multiple of the
current nodes as tcp forwarders to a system they control can capture
all of a nodes outbound connections.

Increasing the number of outbound connections is a very bad solution
to this problem: It invites a tragedy of the commons: you get the
"best" security by setting your number as high as it will let you. Who
doesn't want security?   Meanwhile we've come pretty close to running
out of open listening ports already in the past.

There is a much more scalable improvement for those concerned about
the sybil attack (I say those concerned because a sybil attack is not
that fatal in bitcoin? checkpoints prevent a total fantasy chain, it's
mostly  but not entirely a DOS risk)...

The solution is to addnode a couple of (ideally) trusted nodes, or
failing the availability of trusted nodes, a few that you think are
unlikely to be mutually cooperating against you.

A single connection to the 'good' network kills isolation attacks
dead, so a couple carefully selected outbound connections its a more
secure remedy and one which doesn't explode the network.



From grarpamp at gmail.com  Tue Jan 31 08:19:27 2012
From: grarpamp at gmail.com (grarpamp)
Date: Tue, 31 Jan 2012 03:19:27 -0500
Subject: [Bitcoin-development] CAddrMan: Stochastic IP address manager
In-Reply-To: <CAAS2fgRPj29FSBcC_RQbufSC5tPhnZjguUQVAaWOn2VN6DZR1A@mail.gmail.com>
References: <CAPg+sBjNTS3n8Q3XzZi5GpBL6k_-4AxRKr0BkWa=-AAVgqS=2Q@mail.gmail.com>
	<CAFHuXub52Lu4T0mCWoPoCrHGhCXyLpmEpSWn32_PZPjaRGL2LQ@mail.gmail.com>
	<CABsx9T0avsrL3134WaA3boG-cdx2NcgEH1mQG7Cef78ZV5UNkw@mail.gmail.com>
	<CAAS2fgRPj29FSBcC_RQbufSC5tPhnZjguUQVAaWOn2VN6DZR1A@mail.gmail.com>
Message-ID: <CAD2Ti2_U2X47mwouZw085mncb8vBJ7x9Tr3-f8soot2foUp5cA@mail.gmail.com>

> I think it's important that we have more mechanisms then just DNS and
> hardcoded seednodes.
> This is important because the mechanisms we have are all pretty
> subject to blocking. Now? before you say it? Bitcoin isn't intended to
> be blocking resistant (combine it with Tor and Tor anti-censorship
> tools)
> Is the fact that users can addnodes / addr.txt enough of an
> alternative to address this?

Perhaps not worry about removing it too much. As above, if blocking
or other issues arise, people will be hosting manual lists and nodes
on hidden sites... Tor/I2P/etc. The nodes are already there.
For that matter, since the nodes are talking once seeded, why not
deploy a DHT and be done. All you'd need is one friendly node and
the list comes in and maintains itself through node expiry rules.
Your node publishes its hello for others to discover, etc.
IRC, DNS, etc would go away in favor of autonomy. It wouldn't
be any more resistant. But if people wanted that, some form of
signatures from the hidden nodes would do... if you trusted them.
Booting and running is easy, trust isn't (ask the Tor/I2P people).



From andreas at schildbach.de  Tue Jan 31 08:23:40 2012
From: andreas at schildbach.de (Andreas Schildbach)
Date: Tue, 31 Jan 2012 09:23:40 +0100
Subject: [Bitcoin-development] BIP 21 (modification BIP 20)
In-Reply-To: <1327881329.49770.YahooMailNeo@web121003.mail.ne1.yahoo.com>
References: <1327881329.49770.YahooMailNeo@web121003.mail.ne1.yahoo.com>
Message-ID: <jg88ed$i85$1@dough.gmane.org>

Generally I prefer BIP 21 over BIP 20.

I'm neutral on the 'send' parameter - present in both BIPs - which I
don't understand. I think a practical usecase should be given in the BIP.

Also, the 'version' parameter is unclear. What does it mean? Is an oder
defined on versions (1.0b > 1.0)? Why is it an ";" parameter rather than
a normal "&" parameter?


On 01/30/2012 12:55 AM, Amir Taaki wrote:
> Matt Corallo posted a modification of BIP 20 in an earlier email and I
> asked him if he wanted to become the champion of that BIP he submitted.
> 
> It is a modification of BIP 20 sans the alternative non-decimal number
> stuff.
> 
> https://en.bitcoin.it/wiki/BIP_0021
> 
> Right now, I will ask the GUI client implementations like MultiBit or
> Bitcoin-Qt, not different codebases like BitCoinJ or libbitcoin if they
> support BIP 20 or BIP 21. Feel free to raise any objections.
> 
> More weight will be given to GUIs with actual URI sche me
> implementations and it's good to have a general consensus.
> 
> 
> ------------------------------------------------------------------------------
> Try before you buy = See our experts in action!
> The most comprehensive online learning library for Microsoft developers
> is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3, MVC3,
> Metro Style Apps, more. Free future releases when you subscribe now!
> http://p.sf.net/sfu/learndevnow-dev2
> 
> 
> 
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development





From laanwj at gmail.com  Tue Jan 31 08:35:26 2012
From: laanwj at gmail.com (Wladimir)
Date: Tue, 31 Jan 2012 09:35:26 +0100
Subject: [Bitcoin-development] BIP 21 (modification BIP 20)
In-Reply-To: <jg88ed$i85$1@dough.gmane.org>
References: <1327881329.49770.YahooMailNeo@web121003.mail.ne1.yahoo.com>
	<jg88ed$i85$1@dough.gmane.org>
Message-ID: <CA+s+GJDLoUG43hdLKYMwehBO9qqE=YCm7eJ2RN-TTTY_+OLp=A@mail.gmail.com>

I also wonder whether the "send to private address" should be part of this
BIP, or a future one.

IMO (but your mileage may vary) this BIP should only define the bare-bones
URL scheme, AND provide room for future extensions such
as send-to-private-address, send-multiple-signers, and so on. These should
be forwards-compatible (as Luke-Jr says) in the sense that older clients
can detect schemes they don't understand and give the user an appropriate
error message.

Maybe we need a send-type parameter to define the scheme?

Good point on the version parameter. How are clients supposed to handle
this? Refuse to handle the request if their URL scheme parser version is
older than in the URL? This should be in the BIP.

Wladimir

On Tue, Jan 31, 2012 at 9:23 AM, Andreas Schildbach
<andreas at schildbach.de>wrote:

> Generally I prefer BIP 21 over BIP 20.
>
> I'm neutral on the 'send' parameter - present in both BIPs - which I
> don't understand. I think a practical usecase should be given in the BIP.
>
> Also, the 'version' parameter is unclear. What does it mean? Is an oder
> defined on versions (1.0b > 1.0)? Why is it an ";" parameter rather than
> a normal "&" parameter?
>
>
> On 01/30/2012 12:55 AM, Amir Taaki wrote:
> > Matt Corallo posted a modification of BIP 20 in an earlier email and I
> > asked him if he wanted to become the champion of that BIP he submitted.
> >
> > It is a modification of BIP 20 sans the alternative non-decimal number
> > stuff.
> >
> > https://en.bitcoin.it/wiki/BIP_0021
> >
> > Right now, I will ask the GUI client implementations like MultiBit or
> > Bitcoin-Qt, not different codebases like BitCoinJ or libbitcoin if they
> > support BIP 20 or BIP 21. Feel free to raise any objections.
> >
> > More weight will be given to GUIs with actual URI sche me
> > implementations and it's good to have a general consensus.
> >
> >
> >
> ------------------------------------------------------------------------------
> > Try before you buy = See our experts in action!
> > The most comprehensive online learning library for Microsoft developers
> > is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3, MVC3,
> > Metro Style Apps, more. Free future releases when you subscribe now!
> > http://p.sf.net/sfu/learndevnow-dev2
> >
> >
> >
> > _______________________________________________
> > Bitcoin-development mailing list
> > Bitcoin-development at lists.sourceforge.net
> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
>
>
> ------------------------------------------------------------------------------
> Keep Your Developer Skills Current with LearnDevNow!
> The most comprehensive online learning library for Microsoft developers
> is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3, MVC3,
> Metro Style Apps, more. Free future releases when you subscribe now!
> http://p.sf.net/sfu/learndevnow-d2d
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120131/8214b95c/attachment.html>

From phantomcircuit at covertinferno.org  Tue Jan 31 09:21:09 2012
From: phantomcircuit at covertinferno.org (Phantomcircuit)
Date: Tue, 31 Jan 2012 04:21:09 -0500
Subject: [Bitcoin-development] CAddrMan: Stochastic IP address manager
In-Reply-To: <CAFHuXuZ78y3nHfuKBgjO1j+bNsdnbngDee_Xii4xGhUshJqtZQ@mail.gmail.com>
References: <CAPg+sBjNTS3n8Q3XzZi5GpBL6k_-4AxRKr0BkWa=-AAVgqS=2Q@mail.gmail.com>
	<CAFHuXub52Lu4T0mCWoPoCrHGhCXyLpmEpSWn32_PZPjaRGL2LQ@mail.gmail.com>
	<CABsx9T0avsrL3134WaA3boG-cdx2NcgEH1mQG7Cef78ZV5UNkw@mail.gmail.com>
	<CAFHuXuZ78y3nHfuKBgjO1j+bNsdnbngDee_Xii4xGhUshJqtZQ@mail.gmail.com>
Message-ID: <4F27B285.6060105@covertinferno.org>

On 01/30/2012 11:33 PM, Michael Hendricks wrote:
> On Mon, Jan 30, 2012 at 7:05 PM, Gavin Andresen <gavinandresen at gmail.com> wrote:
>> Given the randomness in Pieter's design, that seems extremely unlikely
>> / difficult to do. Is it possible to do a back-of-the-envelope
>> calculation to figure out what percentage of nodes on the network an
>> attacker would have to control to have a (say) 1% chance of a
>> successful Sybil attack?
> The randomness prevents finely crafted attacks since an attacker can't
> predict which bucket his address ends up in.  I don't think it helps
> against brute force attacks though.  If 60% of the network's nodes are
> controlled by an evil botnet, 60% of the nodes we pull out of the
> address manager point to the attacker.  If a client has 8 connections
> to the network, a Sybil attack would succeed 1.7% of the time.  At
> current network size, 60% of listening nodes is 2,800; only 2-5% of a
> decent botnet.
>
> Nodes that accept incoming connections are far less vulnerable, since
> the probability of success decreases exponentially with the number of
> connections.  95% botnet control with 125 connections has 10^-6 chance
> of success.
>
> Perhaps we could add a command-line option for increasing the maximum
> number of outbound connections.  That way, nodes unable to accept
> incoming connections can easily decrease their susceptibility to Sybil
> attack.
>
>> I've also been wondering if it is time to remove the IRC bootstrapping
>> mechanism; it would remove a fair bit of code and we'd stop getting
>> reports that various ISPs tag bitcoin as malware.  When testing the
>> list of built-in bootstrapping IP addresses I always connect fairly
>> quickly, and the DNS seeding hosts seems to be working nicely, too.
> I think it should be disabled by default one release after the new
> address manager is released.  That way, we're not changing too many
> parts of the bootstrapping process at once.
>
> As an aside, I can't help but wonder whether ISPs blocking IRC traffic
> filters some botnets out of the IRC bootstrapping channels; keeping
> them more "pure".
>
If the number of outbound connections is increased the delay of
transaction broadcast code needs to be improved to avoid a broadcast storm.

-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/pkcs7-signature
Size: 4515 bytes
Desc: S/MIME Cryptographic Signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120131/d42fcd10/attachment.p7s>

From g.rowe at froot.co.uk  Tue Jan 31 10:01:00 2012
From: g.rowe at froot.co.uk (Gary Rowe)
Date: Tue, 31 Jan 2012 10:01:00 +0000
Subject: [Bitcoin-development] BIP 21 (modification BIP 20)
In-Reply-To: <CA+s+GJDLoUG43hdLKYMwehBO9qqE=YCm7eJ2RN-TTTY_+OLp=A@mail.gmail.com>
References: <1327881329.49770.YahooMailNeo@web121003.mail.ne1.yahoo.com>
	<jg88ed$i85$1@dough.gmane.org>
	<CA+s+GJDLoUG43hdLKYMwehBO9qqE=YCm7eJ2RN-TTTY_+OLp=A@mail.gmail.com>
Message-ID: <CAKm8k+2wrsNDxEQXjZmqWQtO5DHiTjc0SgU_+QCU_FybeFFY6g@mail.gmail.com>

I think that the "send to private address" field will require more effort
to implement than the simpler "expires" and "message" fields and should be
deferred to a later BIP. There is a pressing need for expires and the only
point of contention I see is the inclusion of a dual representation (block
or timestamp).

Personally, I feel that simple is best and while a block number represents
Bitcoin's pulse, there is no guarantee that a block will be discovered at
any particular moment. From a merchant perspective the main point of the
expires field is to limit risk against currency movement (immediate cash
out) or inventory movement (time limited offer). I have difficulty seeing a
good use case that would need a block. People have been co-ordinating
events based on a UTC timestamp for decades and I think we should stick
with it.

Regarding the "version" field I again think it adds unnecessary complexity.
Pretty much everything that is needed within the Bitcoin URI scheme can be
encoded with suitable optional fields (as query params) making the whole
structure forward compatible. Having a version field seems redundant.

Finally, the URI signing mechanism. Apologies for the earlier
misunderstanding, I was reading from a limited description and it didn't
make the purpose clear. I've since used
https://bitcointalk.org/index.php?topic=58534.msg689190#msg689190 as my
reference which is a lot clearer. I think it's a good idea, and I'll
definitely support it in my MulitBit Merchant project, but it currently
seems to need more work so I think should be deferred into a dedicated BIP.

On 31 January 2012 08:35, Wladimir <laanwj at gmail.com> wrote:

>
> I also wonder whether the "send to private address" should be part of this
> BIP, or a future one.
>
> IMO (but your mileage may vary) this BIP should only define the bare-bones
> URL scheme, AND provide room for future extensions such
> as send-to-private-address, send-multiple-signers, and so on. These should
> be forwards-compatible (as Luke-Jr says) in the sense that older clients
> can detect schemes they don't understand and give the user an appropriate
> error message.
>
> Maybe we need a send-type parameter to define the scheme?
>
> Good point on the version parameter. How are clients supposed to handle
> this? Refuse to handle the request if their URL scheme parser version is
> older than in the URL? This should be in the BIP.
>
> Wladimir
>
> On Tue, Jan 31, 2012 at 9:23 AM, Andreas Schildbach <andreas at schildbach.de
> > wrote:
>
>> Generally I prefer BIP 21 over BIP 20.
>>
>> I'm neutral on the 'send' parameter - present in both BIPs - which I
>> don't understand. I think a practical usecase should be given in the BIP.
>>
>> Also, the 'version' parameter is unclear. What does it mean? Is an oder
>> defined on versions (1.0b > 1.0)? Why is it an ";" parameter rather than
>> a normal "&" parameter?
>>
>>
>> On 01/30/2012 12:55 AM, Amir Taaki wrote:
>> > Matt Corallo posted a modification of BIP 20 in an earlier email and I
>> > asked him if he wanted to become the champion of that BIP he submitted.
>> >
>> > It is a modification of BIP 20 sans the alternative non-decimal number
>> > stuff.
>> >
>> > https://en.bitcoin.it/wiki/BIP_0021
>> >
>> > Right now, I will ask the GUI client implementations like MultiBit or
>> > Bitcoin-Qt, not different codebases like BitCoinJ or libbitcoin if they
>> > support BIP 20 or BIP 21. Feel free to raise any objections.
>> >
>> > More weight will be given to GUIs with actual URI sche me
>> > implementations and it's good to have a general consensus.
>> >
>> >
>> >
>> ------------------------------------------------------------------------------
>> > Try before you buy = See our experts in action!
>> > The most comprehensive online learning library for Microsoft developers
>> > is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3, MVC3,
>> > Metro Style Apps, more. Free future releases when you subscribe now!
>> > http://p.sf.net/sfu/learndevnow-dev2
>> >
>> >
>> >
>> > _______________________________________________
>> > Bitcoin-development mailing list
>> > Bitcoin-development at lists.sourceforge.net
>> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>
>>
>>
>>
>> ------------------------------------------------------------------------------
>> Keep Your Developer Skills Current with LearnDevNow!
>> The most comprehensive online learning library for Microsoft developers
>> is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3, MVC3,
>> Metro Style Apps, more. Free future releases when you subscribe now!
>> http://p.sf.net/sfu/learndevnow-d2d
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>
>
>
>
> ------------------------------------------------------------------------------
> Keep Your Developer Skills Current with LearnDevNow!
> The most comprehensive online learning library for Microsoft developers
> is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3, MVC3,
> Metro Style Apps, more. Free future releases when you subscribe now!
> http://p.sf.net/sfu/learndevnow-d2d
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120131/16ac1108/attachment.html>

From laanwj at gmail.com  Tue Jan 31 10:22:11 2012
From: laanwj at gmail.com (Wladimir)
Date: Tue, 31 Jan 2012 11:22:11 +0100
Subject: [Bitcoin-development] BIP 21 (modification BIP 20)
In-Reply-To: <CAKm8k+2wrsNDxEQXjZmqWQtO5DHiTjc0SgU_+QCU_FybeFFY6g@mail.gmail.com>
References: <1327881329.49770.YahooMailNeo@web121003.mail.ne1.yahoo.com>
	<jg88ed$i85$1@dough.gmane.org>
	<CA+s+GJDLoUG43hdLKYMwehBO9qqE=YCm7eJ2RN-TTTY_+OLp=A@mail.gmail.com>
	<CAKm8k+2wrsNDxEQXjZmqWQtO5DHiTjc0SgU_+QCU_FybeFFY6g@mail.gmail.com>
Message-ID: <CA+s+GJAvEPda7UGHDoz84OavSh5jdN8wOhGgrNUgPU_Wh66Xyw@mail.gmail.com>

To ensure forward compatibility with optional fields, we need to define how
a client handles fields that it doesn't know about.

When should it display an error message, and when should it silently accept
and ignore the extraneous fields?

(For example, if something that restricts the validity, such as "expires"
is added later on, it is pretty important not to ignore it. Older clients
should refuse to comply.)

URL signing should indeed be addressed in a separate BIP and be an
extension mechanism, IMO.

"expires" and "message" could go into BIP 21 one as they're easy to
implement and don't need much discussion.

Wladimir

On Tue, Jan 31, 2012 at 11:01 AM, Gary Rowe <g.rowe at froot.co.uk> wrote:

> I think that the "send to private address" field will require more effort
> to implement than the simpler "expires" and "message" fields and should be
> deferred to a later BIP. There is a pressing need for expires and the only
> point of contention I see is the inclusion of a dual representation (block
> or timestamp).
>
> Personally, I feel that simple is best and while a block number represents
> Bitcoin's pulse, there is no guarantee that a block will be discovered at
> any particular moment. From a merchant perspective the main point of the
> expires field is to limit risk against currency movement (immediate cash
> out) or inventory movement (time limited offer). I have difficulty seeing a
> good use case that would need a block. People have been co-ordinating
> events based on a UTC timestamp for decades and I think we should stick
> with it.
>
> Regarding the "version" field I again think it adds unnecessary
> complexity. Pretty much everything that is needed within the Bitcoin URI
> scheme can be encoded with suitable optional fields (as query params)
> making the whole structure forward compatible. Having a version field seems
> redundant.
>
> Finally, the URI signing mechanism. Apologies for the earlier
> misunderstanding, I was reading from a limited description and it didn't
> make the purpose clear. I've since used
> https://bitcointalk.org/index.php?topic=58534.msg689190#msg689190 as my
> reference which is a lot clearer. I think it's a good idea, and I'll
> definitely support it in my MulitBit Merchant project, but it currently
> seems to need more work so I think should be deferred into a dedicated BIP.
>
> On 31 January 2012 08:35, Wladimir <laanwj at gmail.com> wrote:
>
>>
>> I also wonder whether the "send to private address" should be part of
>> this BIP, or a future one.
>>
>> IMO (but your mileage may vary) this BIP should only define the
>> bare-bones URL scheme, AND provide room for future extensions such
>> as send-to-private-address, send-multiple-signers, and so on. These should
>> be forwards-compatible (as Luke-Jr says) in the sense that older clients
>> can detect schemes they don't understand and give the user an appropriate
>> error message.
>>
>> Maybe we need a send-type parameter to define the scheme?
>>
>> Good point on the version parameter. How are clients supposed to handle
>> this? Refuse to handle the request if their URL scheme parser version is
>> older than in the URL? This should be in the BIP.
>>
>> Wladimir
>>
>> On Tue, Jan 31, 2012 at 9:23 AM, Andreas Schildbach <
>> andreas at schildbach.de> wrote:
>>
>>> Generally I prefer BIP 21 over BIP 20.
>>>
>>> I'm neutral on the 'send' parameter - present in both BIPs - which I
>>> don't understand. I think a practical usecase should be given in the BIP.
>>>
>>> Also, the 'version' parameter is unclear. What does it mean? Is an oder
>>> defined on versions (1.0b > 1.0)? Why is it an ";" parameter rather than
>>> a normal "&" parameter?
>>>
>>>
>>> On 01/30/2012 12:55 AM, Amir Taaki wrote:
>>> > Matt Corallo posted a modification of BIP 20 in an earlier email and I
>>> > asked him if he wanted to become the champion of that BIP he submitted.
>>> >
>>> > It is a modification of BIP 20 sans the alternative non-decimal number
>>> > stuff.
>>> >
>>> > https://en.bitcoin.it/wiki/BIP_0021
>>> >
>>> > Right now, I will ask the GUI client implementations like MultiBit or
>>> > Bitcoin-Qt, not different codebases like BitCoinJ or libbitcoin if they
>>> > support BIP 20 or BIP 21. Feel free to raise any objections.
>>> >
>>> > More weight will be given to GUIs with actual URI sche me
>>> > implementations and it's good to have a general consensus.
>>> >
>>> >
>>> >
>>> ------------------------------------------------------------------------------
>>> > Try before you buy = See our experts in action!
>>> > The most comprehensive online learning library for Microsoft developers
>>> > is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3,
>>> MVC3,
>>> > Metro Style Apps, more. Free future releases when you subscribe now!
>>> > http://p.sf.net/sfu/learndevnow-dev2
>>> >
>>> >
>>> >
>>> > _______________________________________________
>>> > Bitcoin-development mailing list
>>> > Bitcoin-development at lists.sourceforge.net
>>> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>>
>>>
>>>
>>>
>>> ------------------------------------------------------------------------------
>>> Keep Your Developer Skills Current with LearnDevNow!
>>> The most comprehensive online learning library for Microsoft developers
>>> is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3, MVC3,
>>> Metro Style Apps, more. Free future releases when you subscribe now!
>>> http://p.sf.net/sfu/learndevnow-d2d
>>> _______________________________________________
>>> Bitcoin-development mailing list
>>> Bitcoin-development at lists.sourceforge.net
>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>>
>>
>>
>>
>> ------------------------------------------------------------------------------
>> Keep Your Developer Skills Current with LearnDevNow!
>> The most comprehensive online learning library for Microsoft developers
>> is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3, MVC3,
>> Metro Style Apps, more. Free future releases when you subscribe now!
>> http://p.sf.net/sfu/learndevnow-d2d
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>
>>
>
>
> ------------------------------------------------------------------------------
> Keep Your Developer Skills Current with LearnDevNow!
> The most comprehensive online learning library for Microsoft developers
> is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3, MVC3,
> Metro Style Apps, more. Free future releases when you subscribe now!
> http://p.sf.net/sfu/learndevnow-d2d
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120131/6c6c8e64/attachment.html>

From pieter.wuille at gmail.com  Tue Jan 31 10:39:44 2012
From: pieter.wuille at gmail.com (Pieter Wuille)
Date: Tue, 31 Jan 2012 11:39:44 +0100
Subject: [Bitcoin-development] BIP 21 (modification BIP 20)]
Message-ID: <20120131103943.GA31329@ulyssis.org>

On Tue, Jan 31, 2012 at 09:35:26AM +0100, Wladimir wrote:
> I also wonder whether the "send to private address" should be part of this
> BIP, or a future one.

It is actually a "send of private key", not to. And I agree, it should be part
of a separate BIP.

-- 
Pieter



From pieter.wuille at gmail.com  Tue Jan 31 10:44:44 2012
From: pieter.wuille at gmail.com (Pieter Wuille)
Date: Tue, 31 Jan 2012 11:44:44 +0100
Subject: [Bitcoin-development] BIP 21 (modification BIP 20)
In-Reply-To: <CAKm8k+2wrsNDxEQXjZmqWQtO5DHiTjc0SgU_+QCU_FybeFFY6g@mail.gmail.com>
References: <1327881329.49770.YahooMailNeo@web121003.mail.ne1.yahoo.com>
	<jg88ed$i85$1@dough.gmane.org>
	<CA+s+GJDLoUG43hdLKYMwehBO9qqE=YCm7eJ2RN-TTTY_+OLp=A@mail.gmail.com>
	<CAKm8k+2wrsNDxEQXjZmqWQtO5DHiTjc0SgU_+QCU_FybeFFY6g@mail.gmail.com>
Message-ID: <20120131104443.GB19161@ulyssis.org>

On Tue, Jan 31, 2012 at 10:01:00AM +0000, Gary Rowe wrote:
> Personally, I feel that simple is best and while a block number represents
> Bitcoin's pulse, there is no guarantee that a block will be discovered at
> any particular moment. From a merchant perspective the main point of the
> expires field is to limit risk against currency movement (immediate cash
> out) or inventory movement (time limited offer). I have difficulty seeing a
> good use case that would need a block. People have been co-ordinating
> events based on a UTC timestamp for decades and I think we should stick
> with it.

For merchant purposes, I believe URI's containing a static pubkeyhash-address
are only a temporary solution until more elaborate solutions that deal with
all concerns appear (tagging transactions, feedback to the merchant, making
the receiver responsible for inclusion, certificates that a payment was
accepted, authentication, ...). I believe static addresses are too limited
for this purpose, and we shouldn't be trying to extend them with too many
features.

There have been discussions about more dynamic approaches (such as HTTP
communication to negotiate an address) here, and I've written my own
proposal as well (https://gist.github.com/1237788). The details are not
really relevant at this time, but these dynamic approaches seem a much
better way of dealing with what you're trying to add to the bitcoin URI
system now.

My 2 cents: keep bitcoin URI's simple for now.

-- 
Pieter





From andreas at schildbach.de  Tue Jan 31 11:55:01 2012
From: andreas at schildbach.de (Andreas Schildbach)
Date: Tue, 31 Jan 2012 12:55:01 +0100
Subject: [Bitcoin-development] BIP 21 (modification BIP 20)
In-Reply-To: <CA+s+GJAvEPda7UGHDoz84OavSh5jdN8wOhGgrNUgPU_Wh66Xyw@mail.gmail.com>
References: <1327881329.49770.YahooMailNeo@web121003.mail.ne1.yahoo.com>
	<jg88ed$i85$1@dough.gmane.org>
	<CA+s+GJDLoUG43hdLKYMwehBO9qqE=YCm7eJ2RN-TTTY_+OLp=A@mail.gmail.com>
	<CAKm8k+2wrsNDxEQXjZmqWQtO5DHiTjc0SgU_+QCU_FybeFFY6g@mail.gmail.com>
	<CA+s+GJAvEPda7UGHDoz84OavSh5jdN8wOhGgrNUgPU_Wh66Xyw@mail.gmail.com>
Message-ID: <jg8kql$bct$1@dough.gmane.org>

On 01/31/2012 11:22 AM, Wladimir wrote:

> To ensure forward compatibility with optional fields, we need to define
> how a client handles fields that it doesn't know about.
> 
> When should it display an error message, and when should it silently
> accept and ignore the extraneous fields?

IMHO its standard that unknown URL parameters are simply ignored. I
think we should not change this principle.

> (For example, if something that restricts the validity, such
> as "expires" is added later on, it is pretty important not to ignore it.
> Older clients should refuse to comply.)

In this case, you'd need to refuse *all* parameters you don't know
about. In consequence, all extensions would break older clients.




From laanwj at gmail.com  Tue Jan 31 12:03:56 2012
From: laanwj at gmail.com (Wladimir)
Date: Tue, 31 Jan 2012 13:03:56 +0100
Subject: [Bitcoin-development] BIP 21 (modification BIP 20)
In-Reply-To: <jg8kql$bct$1@dough.gmane.org>
References: <1327881329.49770.YahooMailNeo@web121003.mail.ne1.yahoo.com>
	<jg88ed$i85$1@dough.gmane.org>
	<CA+s+GJDLoUG43hdLKYMwehBO9qqE=YCm7eJ2RN-TTTY_+OLp=A@mail.gmail.com>
	<CAKm8k+2wrsNDxEQXjZmqWQtO5DHiTjc0SgU_+QCU_FybeFFY6g@mail.gmail.com>
	<CA+s+GJAvEPda7UGHDoz84OavSh5jdN8wOhGgrNUgPU_Wh66Xyw@mail.gmail.com>
	<jg8kql$bct$1@dough.gmane.org>
Message-ID: <CA+s+GJCwUYtYX4EYRBMp-FujJnSO6ZBwN67k8DgLh75YbnHeeQ@mail.gmail.com>

>
> IMHO its standard that unknown URL parameters are simply ignored. I
> think we should not change this principle.
>

It's usually the right thing to do to be open to future backward-compatible
changes, but I don't know of any such standard, as it equally makes future
non-backward-compatible changes impossible.

Whatever will be defined in the BIP is the standard in this case.


> > (For example, if something that restricts the validity, such
> > as "expires" is added later on, it is pretty important not to ignore it.
> > Older clients should refuse to comply.)
>
> In this case, you'd need to refuse *all* parameters you don't know
> about. In consequence, all extensions would break older clients.
>

Which is exactly what I want to avoid by defining this up-front.

A versioning scheme can avoid this. Any BIP that breaks backwards
compatibility (for example, adds a multiple-send type or specific
restriction) should increase the version number. A client rejects URLs with
a version number higher than what it knows about.

That's the simplest way to handle it, and enough IMO.

Wladimir
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120131/677da89f/attachment.html>

From gavinandresen at gmail.com  Tue Jan 31 13:12:19 2012
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Tue, 31 Jan 2012 08:12:19 -0500
Subject: [Bitcoin-development] BIP 21 (modification BIP 20)
In-Reply-To: <20120131065444.29110@gmx.net>
References: <CAKm8k+1VFYSt7115KKGy5C7orFoU-N=8vfkQ_sc8onfQq96_Ww@mail.gmail.com>
	<20120131065444.29110@gmx.net>
Message-ID: <CABsx9T127RTX8Ha1yb4PnTcRSB22EC4+y4QrekZzz=pSvotjHQ@mail.gmail.com>

RE: BIP 21 versus BIP 20:  I like BIP 21; simpler is better.

RE: signing and dating URIs:  good ideas.  I think we should agree
that there is consensus around BIP 21 and then after there is some
experience with signing/dating URIs you should write follow-up BIPs .

-- 
--
Gavin Andresen



From da2ce7 at gmail.com  Tue Jan 31 13:20:10 2012
From: da2ce7 at gmail.com (Cameron Garnham)
Date: Wed, 01 Feb 2012 00:20:10 +1100
Subject: [Bitcoin-development] BIP 21 (modification BIP 20)
In-Reply-To: <CABsx9T127RTX8Ha1yb4PnTcRSB22EC4+y4QrekZzz=pSvotjHQ@mail.gmail.com>
References: <CAKm8k+1VFYSt7115KKGy5C7orFoU-N=8vfkQ_sc8onfQq96_Ww@mail.gmail.com>
	<20120131065444.29110@gmx.net>
	<CABsx9T127RTX8Ha1yb4PnTcRSB22EC4+y4QrekZzz=pSvotjHQ@mail.gmail.com>
Message-ID: <4F27EA8A.6010506@gmail.com>

On 1/02/2012 00:12, Gavin Andresen wrote:
> RE: BIP 21 versus BIP 20:  I like BIP 21; simpler is better.
> 
> RE: signing and dating URIs:  good ideas.  I think we should agree
> that there is consensus around BIP 21 and then after there is some
> experience with signing/dating URIs you should write follow-up BIPs .
> 

If we had a self signed URI, we could just pay directly to the public
key (or calculate the bitcoin address from it).  It
would no longer require a bitcoin address in the URI.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: 0x33B5E7D6.asc
Type: application/pgp-keys
Size: 2647 bytes
Desc: not available
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120201/05727153/attachment.bin>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: 0x33B5E7D6.asc
Type: application/pgp-keys
Size: 2646 bytes
Desc: not available
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120201/05727153/attachment-0001.bin>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 283 bytes
Desc: OpenPGP digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120201/05727153/attachment.sig>

From solar at heliacal.net  Tue Jan 31 13:50:13 2012
From: solar at heliacal.net (solar)
Date: Tue, 31 Jan 2012 13:50:13 +0000
Subject: [Bitcoin-development] CAddrMan: Stochastic IP address manager
In-Reply-To: <CAAS2fgRPj29FSBcC_RQbufSC5tPhnZjguUQVAaWOn2VN6DZR1A@mail.gmail.com>
References: <CAPg+sBjNTS3n8Q3XzZi5GpBL6k_-4AxRKr0BkWa=-AAVgqS=2Q@mail.gmail.com>
	<CAFHuXub52Lu4T0mCWoPoCrHGhCXyLpmEpSWn32_PZPjaRGL2LQ@mail.gmail.com>
	<CABsx9T0avsrL3134WaA3boG-cdx2NcgEH1mQG7Cef78ZV5UNkw@mail.gmail.com>
	<CAAS2fgRPj29FSBcC_RQbufSC5tPhnZjguUQVAaWOn2VN6DZR1A@mail.gmail.com>
Message-ID: <0491E579-66B9-4E23-859E-90E1ECC98D66@heliacal.net>

We split IRC among all those channels to handle the load when there were 60k clients.. the ideal thing would be some kind of dynamic sizing, and this applies to the number of outbound connections and transaction relaying logic too.. the same values that work for 1k clients don't work as well for 50k.  It is difficult to get this kind of thing tuned correctly, especially with the added complexity of potentially malicious nodes.

I think the observed isolation problems, with or without IRC, are simply due to there not being many bitcoin nodes leaving/joining the network.  The ones that are stable are happy with their 8 connections or whatever they're set to, and they're just relaying.  There are only about 5k clients on IRC now.. it would probably work to go back to the single channel model as (at least from the IRC point of view) the usage is declining not growing.  Maybe people are just turning off IRC though.  IRC works well with many channels having a few clients each, not with one channel having many clients.  We considered probing bitcoin clients to see if they're listening and favoring those clients in the WHO response, kind of like the DNS booters, but nobody got around to doing it.

Still, I think it's good to have a bunch of different ways to bootstrap in case one or the other is broken/poisoned.

Laszlo



On Jan 31, 2012, at 2:57 AM, Gregory Maxwell wrote:

> On Mon, Jan 30, 2012 at 9:05 PM, Gavin Andresen <gavinandresen at gmail.com> wrote:
>> I've also been wondering if it is time to remove the IRC bootstrapping
>> mechanism; it would remove a fair bit of code and we'd stop getting
>> reports that various ISPs tag bitcoin as malware.  When testing the
>> list of built-in bootstrapping IP addresses I always connect fairly
>> quickly, and the DNS seeding hosts seems to be working nicely, too.
> 
> S?? would we remove it or leave it deactivated as a fallback users can turn on?
> 
> I have two different thoughts about IRC depending on the answer.
> 
> I think it's important that we have more mechanisms then just DNS and
> hardcoded seednodes.
> 
> This is important because the mechanisms we have are all pretty
> subject to blocking. Now? before you say it? Bitcoin isn't intended to
> be blocking resistant (combine it with Tor and Tor anti-censorship
> tools) but by making blocking a bit harder we discourage people from
> even trying, even if we're not seriously in the anti-blocking
> business? and it gives bitcoin users more confidence because there is
> a bit less FUD  "What if your ISP blocks it?? It uses DNS! Someone
> might take away the domains! SOPA PIPI ACTA CIPA Alakazam".
> 
> Is the fact that users can addnodes / addr.txt enough of an
> alternative to address this?   _If so_, then removing it is a good
> idea.  I volunteer to maintain a multi-channel joining node for the
> foreseeable future to avoid letting old clients get partitioned
> (several people need to do this).
> 
> An area where I think our mechanisms are inadequate absent IRC is
> announcing new nodes. I had a new listener up for over a week recently
> and was basically getting no inbound until I enabled IRC.   I
> volunteer to do some measurement of this (e.g. bring up some nodes
> with no irc and find out how long until sipa hears about them).  If
> DNS seeds are slow to learn about new nodes we may need to add a
> simple UDP announcement feature.
> 
> In any case, I hadn't been thinking that we would completely remove
> IRC? I was expecting us to keep IRC around but turned off.
> 
> In particular I think it may be a little risky to turn off IRC at the
> same time as deploying addrman, because if addrman has unexpected bad
> behavior IRC is what may keep things going.  Obviously it should be
> well tested enough to feel confident, but belt-and-suspenders is the
> way to go.
> 
> 
> If we do keep in the long run I think it's important to _fix_ IRC.
> Right now it has some really stupid behavior which is highly
> pro-partitioning.
> 
> */who only returns a few nodes, and because most idlers aren't
> actually working (no port forward) it's usually for there to be only a
> few that work. (I've never seen zero, but I've seen 1).
> *Other than who we only learn about nodes when they join. But the
> stable long lived nodes we need to hear about seldom rejoin. Nonuseful
> windows boxes go up and down a lot.
> *Nodes sit in a single channel forever. There are 100 of them.
> Especially with fewer clients on line nodes may be sitting alone with
> no correctly working nodes with them.
> *Nodes recently seen on IRC are highly promoted in the peer selection.
> 
> So, here is an updated irc.cpp which I've been running (in various
> versions) for a while:
> http://people.xiph.org/~greg/irc.cpp
> 
> It does the following things:
> * Only stays connected for a half hour
> * If its sure its not listening it uses a random nick so people won't
> try to connect
> * Reconnects if it needs more connections
> * If the node is actually listening (evidence by actual incoming
> connections) it reconnects on its own every 1-2 hours and joins two
> channels at random rather than one.
> (it doesn't change peer selection? It's hard to be confident of the
> impact of that change. I think addrman makes it less of an issue)
> 
> I've only not submitted it as a pull request because I haven't had a
> chance to test to my standards, and because I felt unsure about the
> future of IRC.
> 
> I feel strongly that if we're going to keep IRC as a backup we should
> fix it. If we're not going to bother then thats fine? but I think we
> need to think carefully if we're doing enough for bootstraping (with
> the points I made) without it.
> 
> Certainly getting it off by default would be a good move. The botnet
> allegations are horrible.
> 
> ------------------------------------------------------------------------------
> Keep Your Developer Skills Current with LearnDevNow!
> The most comprehensive online learning library for Microsoft developers
> is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3, MVC3,
> Metro Style Apps, more. Free future releases when you subscribe now!
> http://p.sf.net/sfu/learndevnow-d2d
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development




From zgenjix at yahoo.com  Tue Jan 31 14:27:26 2012
From: zgenjix at yahoo.com (Amir Taaki)
Date: Tue, 31 Jan 2012 06:27:26 -0800 (PST)
Subject: [Bitcoin-development] BIP 20 Rejected, process for BIP 21N
Message-ID: <1328020046.70720.YahooMailNeo@web121002.mail.ne1.yahoo.com>

BIP 20 really has no support among implementations such as Bitcoin-Qt, Electrum, MultiBit or Bitcoin-JS. As the most active and visible user facing GUI projects (all with some form of URI Scheme), their opinion carries the most weight. To a lesser degree Bitcoin-Qt has the large majority of users too (although that's a line of reasoning I'd discourage).

Normally we should probably Reject BIP 21 and re-submit a new standard (for history's sake), but as a) BIP 21 is largely a copy paste of BIP 20 sans some sections b) it is still a draft, probably the best thing here is if you all agree on something to run it by BlueMatt and then we'll make it the new BIP 21.

I can see a consensus forming on most parts. Just the send private key is contentious, and there's the topic of adding a time to expire field for merchants (this is a very good idea IMO).

Also BIP 20 is problematic because it is incompatible with about every standard on the web. All the HTML, URI and everything uses decimal numbers alone. I see no reason for breaking with tradition. Note that everytime I have to write Color or Vectorize (as a British speaker) in my code, I die a little inside. But it's convention and American English = International English. Also it would be cool if all code used a *real* international language (like Esperanto) but the world ain't perfect! We live in a decimal-counting English-speaking Windows-using God-worshipping world!

(no offense to?decimal-counting English-speaking Windows-using God-worshipping world- I do half those things too :)



From slush at centrum.cz  Tue Jan 31 14:33:38 2012
From: slush at centrum.cz (slush)
Date: Tue, 31 Jan 2012 15:33:38 +0100
Subject: [Bitcoin-development] BIP 20 Rejected, process for BIP 21N
In-Reply-To: <1328020046.70720.YahooMailNeo@web121002.mail.ne1.yahoo.com>
References: <1328020046.70720.YahooMailNeo@web121002.mail.ne1.yahoo.com>
Message-ID: <CAJna-Hhx_JquBCOWA096YDe1HzJhGBrcZvvaDg2_2x9XJM+pNA@mail.gmail.com>

Hi Amir,

>  All the HTML, URI and everything uses decimal numbers alone. I see no
reason for breaking with tradition.

excuse me if it was already discussed, but maybe using satoshis instead of
decimal bitcoin would be better choice? We all know about pains with proper
handling decimal numbers across of all implementations - and it's not only
about json-rpc.

Otherwise I agree, BIP 21 is better than BIP 20 because it's easier to
implement all points of the standard.

Best,
slush

On Tue, Jan 31, 2012 at 3:27 PM, Amir Taaki <zgenjix at yahoo.com> wrote:

> BIP 20 really has no support among implementations such as Bitcoin-Qt,
> Electrum, MultiBit or Bitcoin-JS. As the most active and visible user
> facing GUI projects (all with some form of URI Scheme), their opinion
> carries the most weight. To a lesser degree Bitcoin-Qt has the large
> majority of users too (although that's a line of reasoning I'd discourage).
>
> Normally we should probably Reject BIP 21 and re-submit a new standard
> (for history's sake), but as a) BIP 21 is largely a copy paste of BIP 20
> sans some sections b) it is still a draft, probably the best thing here is
> if you all agree on something to run it by BlueMatt and then we'll make it
> the new BIP 21.
>
> I can see a consensus forming on most parts. Just the send private key is
> contentious, and there's the topic of adding a time to expire field for
> merchants (this is a very good idea IMO).
>
> Also BIP 20 is problematic because it is incompatible with about every
> standard on the web. All the HTML, URI and everything uses decimal numbers
> alone. I see no reason for breaking with tradition. Note that everytime I
> have to write Color or Vectorize (as a British speaker) in my code, I die a
> little inside. But it's convention and American English = International
> English. Also it would be cool if all code used a *real* international
> language (like Esperanto) but the world ain't perfect! We live in a
> decimal-counting English-speaking Windows-using God-worshipping world!
>
> (no offense to decimal-counting English-speaking Windows-using
> God-worshipping world- I do half those things too :)
>
>
> ------------------------------------------------------------------------------
> Keep Your Developer Skills Current with LearnDevNow!
> The most comprehensive online learning library for Microsoft developers
> is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3, MVC3,
> Metro Style Apps, more. Free future releases when you subscribe now!
> http://p.sf.net/sfu/learndevnow-d2d
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120131/1da41631/attachment.html>

From zgenjix at yahoo.com  Tue Jan 31 14:52:03 2012
From: zgenjix at yahoo.com (Amir Taaki)
Date: Tue, 31 Jan 2012 06:52:03 -0800 (PST)
Subject: [Bitcoin-development] BIP 20 Rejected, process for BIP 21N
In-Reply-To: <CAJna-Hhx_JquBCOWA096YDe1HzJhGBrcZvvaDg2_2x9XJM+pNA@mail.gmail.com>
References: <1328020046.70720.YahooMailNeo@web121002.mail.ne1.yahoo.com>
	<CAJna-Hhx_JquBCOWA096YDe1HzJhGBrcZvvaDg2_2x9XJM+pNA@mail.gmail.com>
Message-ID: <1328021523.22197.YahooMailNeo@web121001.mail.ne1.yahoo.com>

> excuse me if it was already discussed, but maybe using satoshis instead of decimal bitcoin would be better ?> choice? We all know about pains with proper handling decimal numbers across of all implementations - and > it's not only about json-rpc.


Yeah well it's up to the people who are making this stuff to decide :)


On Tue, Jan 31, 2012 at 3:27 PM, Amir Taaki <zgenjix at yahoo.com> wrote:

BIP 20 really has no support among implementations such as Bitcoin-Qt, Electrum, MultiBit or Bitcoin-JS. As the most active and visible user facing GUI projects (all with some form of URI Scheme), their opinion carries the most weight. To a lesser degree Bitcoin-Qt has the large majority of users too (although that's a line of reasoning I'd discourage).
>
>Normally we should probably Reject BIP 21 and re-submit a new standard (for history's sake), but as a) BIP 21 is largely a copy paste of BIP 20 sans some sections b) it is still a draft, probably the best thing here is if you all agree on something to run it by BlueMatt and then we'll make it the new BIP 21.
>
>I can see a consensus forming on most parts. Just the send private key is contentious, and there's the topic of adding a time to expire field for merchants (this is a very good idea IMO).
>
>Also BIP 20 is problematic because it is incompatible with about every standard on the web. All the HTML, URI and everything uses decimal numbers alone. I see no reason for breaking with tradition. Note that everytime I have to write Color or Vectorize (as a British speaker) in my code, I die a little inside. But it's convention and American English = International English. Also it would be cool if all code used a *real* international language (like Esperanto) but the world ain't perfect! We live in a decimal-counting English-speaking Windows-using God-worshipping world!
>
>(no offense to?decimal-counting English-speaking Windows-using God-worshipping world- I do half those things too :)
>
>------------------------------------------------------------------------------
>Keep Your Developer Skills Current with LearnDevNow!
>The most comprehensive online learning library for Microsoft developers
>is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3, MVC3,
>Metro Style Apps, more. Free future releases when you subscribe now!
>http://p.sf.net/sfu/learndevnow-d2d
>_______________________________________________
>Bitcoin-development mailing list
>Bitcoin-development at lists.sourceforge.net
>https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120131/70273888/attachment.html>

From g.rowe at froot.co.uk  Tue Jan 31 14:53:57 2012
From: g.rowe at froot.co.uk (Gary Rowe)
Date: Tue, 31 Jan 2012 14:53:57 +0000
Subject: [Bitcoin-development]  BIP 20 Rejected, process for BIP 21N
In-Reply-To: <CAKm8k+1cHagzj3T27S=h0PueH8EgcCkEajZGgAw7HcQ=N-46ow@mail.gmail.com>
References: <1328020046.70720.YahooMailNeo@web121002.mail.ne1.yahoo.com>
	<CAJna-Hhx_JquBCOWA096YDe1HzJhGBrcZvvaDg2_2x9XJM+pNA@mail.gmail.com>
	<CAKm8k+1cHagzj3T27S=h0PueH8EgcCkEajZGgAw7HcQ=N-46ow@mail.gmail.com>
Message-ID: <CAKm8k+1Ha=e8BpUDsRb_UWzmBeMpbRsYu37dwkcGXSG_n7Cd2Q@mail.gmail.com>

Regarding the decimal vs satoshi notation I see a few problems with satoshi:

* readability - humans reading the URI would expect it to accurately
reflect what is being displayed (subject to internationalisation issues)
For example, amount=1.234 is more human readable than amount=123400000 (ish)
* backwards compatibility - existing software already uses the decimal
notation
* forwards compatibility - Bitcoin needs to move beyond the satoshi to 20
dps for some reason, this remains OK within the existing schema, but forces
decimals into the satoshi scheme
* simplicity - dual decimal/satoshi variants should be discouraged under
the "single representation" approach

It's relatively straightforward to convert a string encoded decimal into an
internal integer for currency calculations just by applying a multiplying
factor. One never uses doubles or floats for money.


On 31 January 2012 14:33, slush <slush at centrum.cz> wrote:

> Hi Amir,
>
> >  All the HTML, URI and everything uses decimal numbers alone. I see no
> reason for breaking with tradition.
>
> excuse me if it was already discussed, but maybe using satoshis instead of
> decimal bitcoin would be better choice? We all know about pains with proper
> handling decimal numbers across of all implementations - and it's not only
> about json-rpc.
>
> Otherwise I agree, BIP 21 is better than BIP 20 because it's easier to
> implement all points of the standard.
>
> Best,
> slush
>
> On Tue, Jan 31, 2012 at 3:27 PM, Amir Taaki <zgenjix at yahoo.com> wrote:
>
>> BIP 20 really has no support among implementations such as Bitcoin-Qt,
>> Electrum, MultiBit or Bitcoin-JS. As the most active and visible user
>> facing GUI projects (all with some form of URI Scheme), their opinion
>> carries the most weight. To a lesser degree Bitcoin-Qt has the large
>> majority of users too (although that's a line of reasoning I'd discourage).
>>
>> Normally we should probably Reject BIP 21 and re-submit a new standard
>> (for history's sake), but as a) BIP 21 is largely a copy paste of BIP 20
>> sans some sections b) it is still a draft, probably the best thing here is
>> if you all agree on something to run it by BlueMatt and then we'll make it
>> the new BIP 21.
>>
>> I can see a consensus forming on most parts. Just the send private key is
>> contentious, and there's the topic of adding a time to expire field for
>> merchants (this is a very good idea IMO).
>>
>> Also BIP 20 is problematic because it is incompatible with about every
>> standard on the web. All the HTML, URI and everything uses decimal numbers
>> alone. I see no reason for breaking with tradition. Note that everytime I
>> have to write Color or Vectorize (as a British speaker) in my code, I die a
>> little inside. But it's convention and American English = International
>> English. Also it would be cool if all code used a *real* international
>> language (like Esperanto) but the world ain't perfect! We live in a
>> decimal-counting English-speaking Windows-using God-worshipping world!
>>
>> (no offense to decimal-counting English-speaking Windows-using
>> God-worshipping world- I do half those things too :)
>>
>>
>> ------------------------------------------------------------------------------
>> Keep Your Developer Skills Current with LearnDevNow!
>> The most comprehensive online learning library for Microsoft developers
>> is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3, MVC3,
>> Metro Style Apps, more. Free future releases when you subscribe now!
>> http://p.sf.net/sfu/learndevnow-d2d
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>
>
>
>
> ------------------------------------------------------------------------------
> Keep Your Developer Skills Current with LearnDevNow!
> The most comprehensive online learning library for Microsoft developers
> is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3, MVC3,
> Metro Style Apps, more. Free future releases when you subscribe now!
> http://p.sf.net/sfu/learndevnow-d2d
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120131/fbee5852/attachment.html>

From gmaxwell at gmail.com  Tue Jan 31 14:59:26 2012
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Tue, 31 Jan 2012 09:59:26 -0500
Subject: [Bitcoin-development] BIP 20 Rejected, process for BIP 21N
In-Reply-To: <CAJna-Hhx_JquBCOWA096YDe1HzJhGBrcZvvaDg2_2x9XJM+pNA@mail.gmail.com>
References: <1328020046.70720.YahooMailNeo@web121002.mail.ne1.yahoo.com>
	<CAJna-Hhx_JquBCOWA096YDe1HzJhGBrcZvvaDg2_2x9XJM+pNA@mail.gmail.com>
Message-ID: <CAAS2fgTx3LVT=JkHQpFTiuPnR0utKUZ4at99Jfk96xJR7CBmAw@mail.gmail.com>

On Tue, Jan 31, 2012 at 9:33 AM, slush <slush at centrum.cz> wrote:
> excuse me if it was already discussed, but maybe using satoshis instead of
> decimal bitcoin would be better choice? We all know about pains with proper
> handling decimal numbers across of all implementations - and it's not only
> about json-rpc.

Mixed bag of worms there, even ignoring what people have already
implemented? if you make it use satoshis people who are working with
things at COIN scale are inevitably going to end up multiplying
numbers stored as radix-2 floating point to get satoshis and then are
going to be confused when it comes out "wrong".

Using decimal numbers at least lets them treat the values as strings
and avoid arithmetic that will end up confusing them.



From gmaxwell at gmail.com  Tue Jan 31 15:02:47 2012
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Tue, 31 Jan 2012 10:02:47 -0500
Subject: [Bitcoin-development] BIP 20 Rejected, process for BIP 21N
In-Reply-To: <CAKm8k+1Ha=e8BpUDsRb_UWzmBeMpbRsYu37dwkcGXSG_n7Cd2Q@mail.gmail.com>
References: <1328020046.70720.YahooMailNeo@web121002.mail.ne1.yahoo.com>
	<CAJna-Hhx_JquBCOWA096YDe1HzJhGBrcZvvaDg2_2x9XJM+pNA@mail.gmail.com>
	<CAKm8k+1cHagzj3T27S=h0PueH8EgcCkEajZGgAw7HcQ=N-46ow@mail.gmail.com>
	<CAKm8k+1Ha=e8BpUDsRb_UWzmBeMpbRsYu37dwkcGXSG_n7Cd2Q@mail.gmail.com>
Message-ID: <CAAS2fgTBTfQ-4kXUAig-cSFpQQawvxrD3sWDWahE7+Q5ZtAgXQ@mail.gmail.com>

On Tue, Jan 31, 2012 at 9:53 AM, Gary Rowe <g.rowe at froot.co.uk> wrote:
> One never uses doubles or floats for money.

Lots and lots of people do.  Go place a sell order on mtgox for
$999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999
per BTC and look at the awesome doublemax trade it actually stores for
you.



From g.rowe at froot.co.uk  Tue Jan 31 15:04:14 2012
From: g.rowe at froot.co.uk (Gary Rowe)
Date: Tue, 31 Jan 2012 15:04:14 +0000
Subject: [Bitcoin-development] BIP 20 Rejected, process for BIP 21N
In-Reply-To: <CAAS2fgTBTfQ-4kXUAig-cSFpQQawvxrD3sWDWahE7+Q5ZtAgXQ@mail.gmail.com>
References: <1328020046.70720.YahooMailNeo@web121002.mail.ne1.yahoo.com>
	<CAJna-Hhx_JquBCOWA096YDe1HzJhGBrcZvvaDg2_2x9XJM+pNA@mail.gmail.com>
	<CAKm8k+1cHagzj3T27S=h0PueH8EgcCkEajZGgAw7HcQ=N-46ow@mail.gmail.com>
	<CAKm8k+1Ha=e8BpUDsRb_UWzmBeMpbRsYu37dwkcGXSG_n7Cd2Q@mail.gmail.com>
	<CAAS2fgTBTfQ-4kXUAig-cSFpQQawvxrD3sWDWahE7+Q5ZtAgXQ@mail.gmail.com>
Message-ID: <CAKm8k+1f3A8MDKsc1twWN_nR+hTjY=H7WQenVC9Zt=e-75TQnA@mail.gmail.com>

Shudder.

:-)

On 31 January 2012 15:02, Gregory Maxwell <gmaxwell at gmail.com> wrote:

> On Tue, Jan 31, 2012 at 9:53 AM, Gary Rowe <g.rowe at froot.co.uk> wrote:
> > One never uses doubles or floats for money.
>
> Lots and lots of people do.  Go place a sell order on mtgox for
>
> $999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999
> per BTC and look at the awesome doublemax trade it actually stores for
> you.
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120131/c0674004/attachment.html>

From michael at ndrix.org  Tue Jan 31 15:06:45 2012
From: michael at ndrix.org (Michael Hendricks)
Date: Tue, 31 Jan 2012 08:06:45 -0700
Subject: [Bitcoin-development] CAddrMan: Stochastic IP address manager
In-Reply-To: <CAAS2fgSAkCOg=E+JTuX5tSyrfCh7ZPLprNyqr6hRndK2YfMcug@mail.gmail.com>
References: <CAPg+sBjNTS3n8Q3XzZi5GpBL6k_-4AxRKr0BkWa=-AAVgqS=2Q@mail.gmail.com>
	<CAFHuXub52Lu4T0mCWoPoCrHGhCXyLpmEpSWn32_PZPjaRGL2LQ@mail.gmail.com>
	<CABsx9T0avsrL3134WaA3boG-cdx2NcgEH1mQG7Cef78ZV5UNkw@mail.gmail.com>
	<CAFHuXuZ78y3nHfuKBgjO1j+bNsdnbngDee_Xii4xGhUshJqtZQ@mail.gmail.com>
	<CAAS2fgSAkCOg=E+JTuX5tSyrfCh7ZPLprNyqr6hRndK2YfMcug@mail.gmail.com>
Message-ID: <CAFHuXuaOoFnV=sdFDOHN6fXwXng7TsjpziAu-fZnq=ircXb8XA@mail.gmail.com>

On Tue, Jan 31, 2012 at 12:17 AM, Gregory Maxwell <gmaxwell at gmail.com> wrote:
> On Mon, Jan 30, 2012 at 11:33 PM, Michael Hendricks <michael at ndrix.org> wrote:
>> address manager point to the attacker. ?If a client has 8 connections
>> to the network, a Sybil attack would succeed 1.7% of the time.
>
> Meh, careful not to mixup addrman created issues with preexisting ones
> simply related to the number of connections vs the number of nodes.
> Even absent addressman someone who can spin up a large multiple of the
> current nodes as tcp forwarders to a system they control can capture
> all of a nodes outbound connections.

I think I've explained myself poorly.  On my nodes, the old address
database routinely has 120k addresses.  With the new address manager,
it will have 20k addresses.  Filling the former with 60% evil nodes
requires 72,000 evil nodes; while the latter requires 12,000.

As I mentioned in my first post, I think the new address manager "is a
valuable improvement over what we have today".  I think it should be
included in the next release.

I also think we should be aware that we're making it somewhat easier
to isolate outbound-only nodes.  A single listening node can support
15 non-listening nodes (125/8).  The network currently has 5
non-listening nodes for every listening node.  That ratio has stayed
quite stable, so I think we have wiggle room if we wanted to allow
more outbound connections in some circumstances.

-- 
Michael



From michael at ndrix.org  Tue Jan 31 15:07:16 2012
From: michael at ndrix.org (Michael Hendricks)
Date: Tue, 31 Jan 2012 08:07:16 -0700
Subject: [Bitcoin-development] CAddrMan: Stochastic IP address manager
In-Reply-To: <CAAS2fgSAkCOg=E+JTuX5tSyrfCh7ZPLprNyqr6hRndK2YfMcug@mail.gmail.com>
References: <CAPg+sBjNTS3n8Q3XzZi5GpBL6k_-4AxRKr0BkWa=-AAVgqS=2Q@mail.gmail.com>
	<CAFHuXub52Lu4T0mCWoPoCrHGhCXyLpmEpSWn32_PZPjaRGL2LQ@mail.gmail.com>
	<CABsx9T0avsrL3134WaA3boG-cdx2NcgEH1mQG7Cef78ZV5UNkw@mail.gmail.com>
	<CAFHuXuZ78y3nHfuKBgjO1j+bNsdnbngDee_Xii4xGhUshJqtZQ@mail.gmail.com>
	<CAAS2fgSAkCOg=E+JTuX5tSyrfCh7ZPLprNyqr6hRndK2YfMcug@mail.gmail.com>
Message-ID: <CAFHuXubnw1wvt8B4CaTE+ZWm3cDgD1MrHtOe=xyZ0KrHHHb2fQ@mail.gmail.com>

On Tue, Jan 31, 2012 at 12:17 AM, Gregory Maxwell <gmaxwell at gmail.com> wrote:
> On Mon, Jan 30, 2012 at 11:33 PM, Michael Hendricks <michael at ndrix.org> wrote:
>> address manager point to the attacker. ?If a client has 8 connections
>> to the network, a Sybil attack would succeed 1.7% of the time.
>
> Meh, careful not to mixup addrman created issues with preexisting ones
> simply related to the number of connections vs the number of nodes.
> Even absent addressman someone who can spin up a large multiple of the
> current nodes as tcp forwarders to a system they control can capture
> all of a nodes outbound connections.

I think I've explained myself poorly.  On my nodes, the old address
database routinely has 120k addresses.  With the new address manager,
it will have 20k addresses.  Filling the former with 60% evil nodes
requires 72,000 evil nodes; while the latter requires 12,000.

As I mentioned in my first post, I think the new address manager "is a
valuable improvement over what we have today".  I think it should be
included in the next release.

I also think we should be aware that we're making it somewhat easier
to isolate outbound-only nodes.  A single listening node can support
15 non-listening nodes (125/8).  The network currently has 5
non-listening nodes for every listening node.  That ratio has stayed
quite stable, so I think we have wiggle room if we wanted to allow
more outbound connections in some circumstances.

-- 
Michael



From michael at ndrix.org  Tue Jan 31 15:06:45 2012
From: michael at ndrix.org (Michael Hendricks)
Date: Tue, 31 Jan 2012 08:06:45 -0700
Subject: [Bitcoin-development] CAddrMan: Stochastic IP address manager
In-Reply-To: <CAAS2fgSAkCOg=E+JTuX5tSyrfCh7ZPLprNyqr6hRndK2YfMcug@mail.gmail.com>
References: <CAPg+sBjNTS3n8Q3XzZi5GpBL6k_-4AxRKr0BkWa=-AAVgqS=2Q@mail.gmail.com>
	<CAFHuXub52Lu4T0mCWoPoCrHGhCXyLpmEpSWn32_PZPjaRGL2LQ@mail.gmail.com>
	<CABsx9T0avsrL3134WaA3boG-cdx2NcgEH1mQG7Cef78ZV5UNkw@mail.gmail.com>
	<CAFHuXuZ78y3nHfuKBgjO1j+bNsdnbngDee_Xii4xGhUshJqtZQ@mail.gmail.com>
	<CAAS2fgSAkCOg=E+JTuX5tSyrfCh7ZPLprNyqr6hRndK2YfMcug@mail.gmail.com>
Message-ID: <CAFHuXuaOoFnV=sdFDOHN6fXwXng7TsjpziAu-fZnq=ircXb8XA@mail.gmail.com>

On Tue, Jan 31, 2012 at 12:17 AM, Gregory Maxwell <gmaxwell at gmail.com> wrote:
> On Mon, Jan 30, 2012 at 11:33 PM, Michael Hendricks <michael at ndrix.org> wrote:
>> address manager point to the attacker. ?If a client has 8 connections
>> to the network, a Sybil attack would succeed 1.7% of the time.
>
> Meh, careful not to mixup addrman created issues with preexisting ones
> simply related to the number of connections vs the number of nodes.
> Even absent addressman someone who can spin up a large multiple of the
> current nodes as tcp forwarders to a system they control can capture
> all of a nodes outbound connections.

I think I've explained myself poorly.  On my nodes, the old address
database routinely has 120k addresses.  With the new address manager,
it will have 20k addresses.  Filling the former with 60% evil nodes
requires 72,000 evil nodes; while the latter requires 12,000.

As I mentioned in my first post, I think the new address manager "is a
valuable improvement over what we have today".  I think it should be
included in the next release.

I also think we should be aware that we're making it somewhat easier
to isolate outbound-only nodes.  A single listening node can support
15 non-listening nodes (125/8).  The network currently has 5
non-listening nodes for every listening node.  That ratio has stayed
quite stable, so I think we have wiggle room if we wanted to allow
more outbound connections in some circumstances.

-- 
Michael



From bitcoin-list at bluematt.me  Tue Jan 31 16:04:59 2012
From: bitcoin-list at bluematt.me (Matt Corallo)
Date: Tue, 31 Jan 2012 11:04:59 -0500
Subject: [Bitcoin-development] BIP 20 Rejected, process for BIP 21N
In-Reply-To: <1328020046.70720.YahooMailNeo@web121002.mail.ne1.yahoo.com>
References: <1328020046.70720.YahooMailNeo@web121002.mail.ne1.yahoo.com>
Message-ID: <1328025899.2832.5.camel@BMThinkPad.lan.bluematt.me>

On Tue, 2012-01-31 at 06:27 -0800, Amir Taaki wrote:
> BIP 20 really has no support among implementations such as Bitcoin-Qt, Electrum, MultiBit or Bitcoin-JS. As the most active and visible user facing GUI projects (all with some form of URI Scheme), their opinion carries the most weight. To a lesser degree Bitcoin-Qt has the large majority of users too (although that's a line of reasoning I'd discourage).
> 
> Normally we should probably Reject BIP 21 and re-submit a new standard (for history's sake), but as a) BIP 21 is largely a copy paste of BIP 20 sans some sections b) it is still a draft, probably the best thing here is if you all agree on something to run it by BlueMatt and then we'll make it the new BIP 21.
> 
> I can see a consensus forming on most parts. Just the send private key is contentious, and there's the topic of adding a time to expire field for merchants (this is a very good idea IMO).
> 
> Also BIP 20 is problematic because it is incompatible with about every standard on the web. All the HTML, URI and everything uses decimal numbers alone. I see no reason for breaking with tradition. Note that everytime I have to write Color or Vectorize (as a British speaker) in my code, I die a little inside. But it's convention and American English = International English. Also it would be cool if all code used a *real* international language (like Esperanto) but the world ain't perfect! We live in a decimal-counting English-speaking Windows-using God-worshipping world!
> 
> (no offense to decimal-counting English-speaking Windows-using God-worshipping world- I do half those things too :)

The send crap was not in the original spec, is not implemented anywhere,
and should have been removed as part of the BIP 21 copy/paste.  It is
now gone.

As for the expire time, well thats a bit problematic IMHO.  Technically
BIP 21 is still a draft, but it is implemented in all versions of
Bitcoin-Qt for drag and drop and adding a field which restricts the
validity of a URI for new clients, but which old clients will gladly
accept could result in some ugly situations IMO.

Matt




From luke at dashjr.org  Tue Jan 31 16:07:00 2012
From: luke at dashjr.org (Luke-Jr)
Date: Tue, 31 Jan 2012 11:07:00 -0500
Subject: [Bitcoin-development] BIP 20 Rejected, process for BIP 21N
In-Reply-To: <1328020046.70720.YahooMailNeo@web121002.mail.ne1.yahoo.com>
References: <1328020046.70720.YahooMailNeo@web121002.mail.ne1.yahoo.com>
Message-ID: <201201311107.01635.luke@dashjr.org>

On Tuesday, January 31, 2012 9:27:26 AM Amir Taaki wrote:
> BIP 20 really has no support among implementations such as Bitcoin-Qt,
> Electrum, MultiBit or Bitcoin-JS.

It does among implementations such as Spesmilo and WalletBuddy, and has for 
some time. More importantly, it achieved consensus and Final status before any 
objections were made. Final only changes to Superceded. What's the point of a 
formal BIP process if that process won't be followed?

> Also BIP 20 is problematic because it is incompatible with about every
> standard on the web. All the HTML, URI and everything uses decimal numbers
> alone. I see no reason for breaking with tradition.

That's not incompatibility, and not true. The standards use hexadecimal 
numbers, and I can't even think of a single case off-hand where decimal is 
used.

That being said, I'd be fine with a spec that used strtol-compatible satoshis 
for amount. This is both simple and forward-compatible.

On Tuesday, January 31, 2012 9:53:57 AM Gary Rowe wrote:
> Regarding the decimal vs satoshi notation I see a few problems with
> satoshi:
> 
> * readability - humans reading the URI would expect it to accurately
> reflect what is being displayed (subject to internationalisation issues)
> For example, amount=1.234 is more human readable than amount=123400000
> (ish)

This is true only for BTC users. While that might be a sensible unit today, it 
almost certainly won't be in the future. amount=0.00001 is much worse than 
amount=1000 or amount=1x3

> * backwards compatibility - existing software already uses the decimal
> notation

Existing software uses Satoshis internally, and it's generally regarded as a 
design flaw that it uses BTC numbers in the JSON-RPC protocol.

> * forwards compatibility - Bitcoin needs to move beyond the satoshi to 20
> dps for some reason, this remains OK within the existing schema, but forces
> decimals into the satoshi scheme

This strikes me as more of "let's test the code earlier rather than later" 
than forwards compatibility. The problem is that it's pretty much unanimous 
that floating-point should never be used, and without that both 
representations will be rounding when there are smaller units available.




From andyparkins at gmail.com  Tue Jan 31 16:50:58 2012
From: andyparkins at gmail.com (Andy Parkins)
Date: Tue, 31 Jan 2012 16:50:58 +0000
Subject: [Bitcoin-development] BIP16/17 replacement
Message-ID: <201201311651.02726.andyparkins@gmail.com>

Hello,

Gulp.  Am a little nervous about wading into this swamp.  However, it seems 
to me that the debate has veered into the personal and away from the 
technical.  Surely if there are objections to both suggestions, that another 
solution might be better?  The answer doesn't have to be A or B, if the 
answer C turns out to be acceptable.

That being said; I am not confident enough to start making BIPs so I offer 
this idea up for my traditional mailing-list roasting but with the hope that 
I blindly stumble toward something more acceptable to everyone.

----

If the change is going to be a big one anyway and will require a client 
upgrade why not...

 - Increase the version number in transactions to make a new transaction
   structure
 - Dump the "scriptPubKey" field completely.  Everything will be pay-to-
   script-hash in version2 transactions
 - Replace it with "hashOfClaimingScript"
 - Add an "unsignedParameters" array.

hashOfClaimingScript is _not_ script.  It's just the hash of the script that 
is allowed to claim the output.  Then before scriptSig is allowed to run, it 
is hashed and compared against the hashOfClaimingScript.

unsignedParameters replaces the need for all the crazy messing around that 
OP_CHECKSIG currently does because it is specifically a block of the 
transaction that it not signed (although I would include the array size bytes 
in the signature calculation), therefore no script filtering is necessary.

The claiming script, scriptSig, can then be checked against whatever list of 
templates you like.  For pay-to-address it will probably look like:

  OP_PUSHPARAMETER {0}
  OP_PUSH { <claimant public key> }
  OP_CHECKSIGVERIFY

Handling the more complicated transactions (they're the point of all this 
after all) is pretty obvious; the unsignedParameters block can hold as many 
signatures as you like.  It also removes the need for OP_CHECKMULTISIG, since 
the script can specify the signature conditions.  e.g. a 2-of-3 script:

  OP_PUSHPARMETER {0}
  OP_PUSH { <claimant public key0> }
  OP_CHECKSIG
  OP_PUSHPARMETER {1}
  OP_PUSH { <claimant public key1> }
  OP_CHECKSIG
  OP_PUSHPARMETER {1}
  OP_PUSH { <claimant public key1> }
  OP_CHECKSIG
  OP_ADD
  OP_ADD
  OP_PUSH {1}
  OP_GREATERTHAN

(I'm sure someone cleverer than I can improve on the above)

-----

Let the flaming commence...



Andy

-- 
Dr Andy Parkins
andyparkins at gmail.com
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 198 bytes
Desc: This is a digitally signed message part.
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120131/b2ee00aa/attachment.sig>

From luke at dashjr.org  Tue Jan 31 16:58:49 2012
From: luke at dashjr.org (Luke-Jr)
Date: Tue, 31 Jan 2012 11:58:49 -0500
Subject: [Bitcoin-development] BIP16/17 replacement
In-Reply-To: <201201311651.02726.andyparkins@gmail.com>
References: <201201311651.02726.andyparkins@gmail.com>
Message-ID: <201201311158.50801.luke@dashjr.org>

On Tuesday, January 31, 2012 11:50:58 AM Andy Parkins wrote:
> Gulp.  Am a little nervous about wading into this swamp.  However, it seems
> to me that the debate has veered into the personal and away from the
> technical.  Surely if there are objections to both suggestions, that
> another solution might be better?  The answer doesn't have to be A or B,
> if the answer C turns out to be acceptable.

I'm not aware of any remaining *tangible* objections to BIP 17 at this point 
(Gavin seems concerned over a theoretical risk-that-nobody-has-thought-of), 
but if there's a better solution, I'm perfectly fine Withdrawing BIP 17 to 
support it.

> If the change is going to be a big one anyway and will require a client
> upgrade why not...

Both BIP 16 and 17 are backward compatible enough that people can continue to 
use the old clients with each other. An upgrade is only required to send to 
(or create/receive on) the new 3...-form addresses. That being said, it's 
quite possible to rewrite the practical implications of both BIP 16 and 17 in 
the format you seem to be suggesting. Doing so would even get rid of one of 
the major objections to BIP 16 (its inconsistency).




From andyparkins at gmail.com  Tue Jan 31 17:11:56 2012
From: andyparkins at gmail.com (Andy Parkins)
Date: Tue, 31 Jan 2012 17:11:56 +0000
Subject: [Bitcoin-development] BIP16/17 replacement
In-Reply-To: <201201311158.50801.luke@dashjr.org>
References: <201201311651.02726.andyparkins@gmail.com>
	<201201311158.50801.luke@dashjr.org>
Message-ID: <201201311711.57046.andyparkins@gmail.com>

On 2012 January 31 Tuesday, Luke-Jr wrote:

> I'm not aware of any remaining *tangible* objections to BIP 17 at this
> point (Gavin seems concerned over a theoretical
> risk-that-nobody-has-thought-of), but if there's a better solution, I'm
> perfectly fine Withdrawing BIP 17 to support it.

I imagine the BIP16 supporters would say the same?  Isn't that the essence of 
the current impasse?

> Both BIP 16 and 17 are backward compatible enough that people can continue
> to use the old clients with each other. An upgrade is only required to
> send to (or create/receive on) the new 3...-form addresses. That being
> said, it's quite possible to rewrite the practical implications of both
> BIP 16 and 17 in the format you seem to be suggesting. Doing so would even
> get rid of one of the major objections to BIP 16 (its inconsistency).

My suggestion is backward compatible.  You'd only have to make version2 
transactions for version2 addresses; and the join between version1 and 
version2 is not a problem since the version1 source can be detected, and the 
handling of the version2 transaction altered as appropriate (it's only a 
matter of switching from the hash check to running the two scripts as 
normal).



Andy
-- 
Dr Andy Parkins
andyparkins at gmail.com
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 198 bytes
Desc: This is a digitally signed message part.
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120131/0908135b/attachment.sig>

From gmaxwell at gmail.com  Tue Jan 31 17:45:14 2012
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Tue, 31 Jan 2012 12:45:14 -0500
Subject: [Bitcoin-development] BIP16/17 replacement
In-Reply-To: <201201311651.02726.andyparkins@gmail.com>
References: <201201311651.02726.andyparkins@gmail.com>
Message-ID: <CAAS2fgTvvDT+acJQfwAGpVNeA2PAQ7wip9xXc-__V2oz-=Kk6Q@mail.gmail.com>

On Tue, Jan 31, 2012 at 11:50 AM, Andy Parkins <andyparkins at gmail.com> wrote:
> Hello,
>
> Gulp. ?Am a little nervous about wading into this swamp. ?However, it seems
> to me that the debate has veered into the personal and away from the

I think you've been deceived by people who have some interest in
promoting this as some sort of big controversy, or perhaps just
confused by the general level of noise.

The differences between BIP16/BIP17 are technically obscure, everyone
who is well versed in the issue (with the potential exception of
Luke). There is broad consensus among the involved technically minded
parties over just about all of it.

Luke has been maintaining an opinion tracker page:
https://en.bitcoin.it/wiki/P2SH_Votes

reflecting the views of core developers and people who've been
technically involved enough to have an informed opinion.

>?Surely if there are objections to both suggestions, that another
> solution might be better?

There is always a different color that the shed could be painted.
Expecting absolute consensus on the _best_ way forward is an
unreasonable standard, especially if you're going to invite the
opinions of many people.

Depending on how you count we have considered a good two dozen options
in this space?  Starting with the OP_CAT key combinations many months
back, and including many variants of the current ideas. The BIPs only
represent the "final" surviving ideas.

In particular, BIP16 was the isolated consensus path forward that came
out of the discussions about the concerns that BIP12 was too
computationally powerful? I don't think I can identify any particular
person as the author of the BIP16 idea.  At the the time BIP16 became
a BIP only Luke was actively objecting to it.

Though his hard work and tireless (...unstoppable dogmatic) promotion
he's managed to build a workable alternative, and it now has some
support other than himself.  This, however, doesn't constitute a
material schism.

> this idea up for my traditional mailing-list roasting but with the hope that

As always, asbestos underwear is required.

> If the change is going to be a big one anyway and will require a client
> upgrade why not...

It does not, in fact? Yes, it requires a client update to make use of
the new functionality, but old nodes will happily continue to validate
things.  It's hard to express how critical this is distinctly.
Bitcoin is, predominantly, a zero-trust system. Nodes don't trust that
things were done right, the validate them for themselves.

A breaking change of the kind you suggest is not something that would
be considered lightly, and this is certainly not justified for this.

> ?- Increase the version number in transactions to make a new transaction
> ? structure
> ?- Dump the "scriptPubKey" field completely. ?Everything will be pay-to-
> ? script-hash in version2 transactions
> ?- Replace it with "hashOfClaimingScript"
> ?- Add an "unsignedParameters" array.

If we ever were to scrap the system, I think we very much would do
something like what you describe here... and as much has been
documented:

https://en.bitcoin.it/wiki/Hardfork_Wishlist
(see "Elimination of output scripts")

But, to be clear, this stuff is pretty much fantasy. I'm doubtful that
it will ever happen, doubtful that we can get the kind of development
resources required to pull off a true breaking change in a way that
people would actually trust upgrading to? at least not before a time
that the system is simply too big to make that kind of change.



From bitcoin-list at bluematt.me  Tue Jan 31 18:22:25 2012
From: bitcoin-list at bluematt.me (Matt Corallo)
Date: Tue, 31 Jan 2012 13:22:25 -0500
Subject: [Bitcoin-development] BIP 20 Rejected, process for BIP 21N
In-Reply-To: <1328025899.2832.5.camel@BMThinkPad.lan.bluematt.me>
References: <1328020046.70720.YahooMailNeo@web121002.mail.ne1.yahoo.com>
	<1328025899.2832.5.camel@BMThinkPad.lan.bluematt.me>
Message-ID: <1328034145.2832.11.camel@BMThinkPad.lan.bluematt.me>

OK, so I just did some heavy changes to the methods for forward
compatibility in BIP 21.  Instead of a version number, now new variables
will be added either as-is or with a mustimplement: prefix.  If a
clients does not know what the variable is that is after mustimplement:,
it should consider the entire URI invalid and either notify the user or
just drop it silently.  That way things like expiretime can be added
without worrying about old clients ignoring the field.  

All that said, I dont think its an ideal solution, depending on the
names of variables to provide information is ugly.  If anyone has a
better idea on how to do backward compatibility, please suggest it.

In terms of the expiretime field being implemented now, I dont think its
appropriate.  Because some clients already have an old implementation,
the possibility of it getting ignored is too large.  The BIP now states
that "It is recommended that additional variables prefixed with
mustimplement: not be used in a mission-critical way until a grace
period of 6 months from the finalization of this BIP has passed in order
to allow client developers to release new versions, and users of old
clients to upgrade."  Mostly, however, I want to keep the list of
changes from the Bitcoin-Qt implementation to this BIP very, very
minimal this late the 0.6 release cycle (I want to get this BIP
finalized and implemented for 0.6, so that at least Bitcoin-Qt will have
no version which support OS URI opening with a broken implementation).

Matt

On Tue, 2012-01-31 at 11:04 -0500, Matt Corallo wrote:
> On Tue, 2012-01-31 at 06:27 -0800, Amir Taaki wrote:
> > BIP 20 really has no support among implementations such as Bitcoin-Qt, Electrum, MultiBit or Bitcoin-JS. As the most active and visible user facing GUI projects (all with some form of URI Scheme), their opinion carries the most weight. To a lesser degree Bitcoin-Qt has the large majority of users too (although that's a line of reasoning I'd discourage).
> > 
> > Normally we should probably Reject BIP 21 and re-submit a new standard (for history's sake), but as a) BIP 21 is largely a copy paste of BIP 20 sans some sections b) it is still a draft, probably the best thing here is if you all agree on something to run it by BlueMatt and then we'll make it the new BIP 21.
> > 
> > I can see a consensus forming on most parts. Just the send private key is contentious, and there's the topic of adding a time to expire field for merchants (this is a very good idea IMO).
> > 
> > Also BIP 20 is problematic because it is incompatible with about every standard on the web. All the HTML, URI and everything uses decimal numbers alone. I see no reason for breaking with tradition. Note that everytime I have to write Color or Vectorize (as a British speaker) in my code, I die a little inside. But it's convention and American English = International English. Also it would be cool if all code used a *real* international language (like Esperanto) but the world ain't perfect! We live in a decimal-counting English-speaking Windows-using God-worshipping world!
> > 
> > (no offense to decimal-counting English-speaking Windows-using God-worshipping world- I do half those things too :)
> 
> The send crap was not in the original spec, is not implemented anywhere,
> and should have been removed as part of the BIP 21 copy/paste.  It is
> now gone.
> 
> As for the expire time, well thats a bit problematic IMHO.  Technically
> BIP 21 is still a draft, but it is implemented in all versions of
> Bitcoin-Qt for drag and drop and adding a field which restricts the
> validity of a URI for new clients, but which old clients will gladly
> accept could result in some ugly situations IMO.
> 
> Matt




From laanwj at gmail.com  Tue Jan 31 19:02:32 2012
From: laanwj at gmail.com (Wladimir)
Date: Tue, 31 Jan 2012 20:02:32 +0100
Subject: [Bitcoin-development] BIP 20 Rejected, process for BIP 21N
In-Reply-To: <1328034145.2832.11.camel@BMThinkPad.lan.bluematt.me>
References: <1328020046.70720.YahooMailNeo@web121002.mail.ne1.yahoo.com>
	<1328025899.2832.5.camel@BMThinkPad.lan.bluematt.me>
	<1328034145.2832.11.camel@BMThinkPad.lan.bluematt.me>
Message-ID: <CA+s+GJAyNR7+=Dht4uLVjJ5DLLwhyG2aTDuFonu0ABXXCUVBKA@mail.gmail.com>

On Tue, Jan 31, 2012 at 7:22 PM, Matt Corallo <bitcoin-list at bluematt.me>wrote:

>
> All that said, I dont think its an ideal solution, depending on the
> names of variables to provide information is ugly.  If anyone has a
> better idea on how to do backward compatibility, please suggest it.
>

I like the mustimplement: idea, though I'd recommend a shorter
(abbreviated) prefix, to keep URL sizes small for QR codes and such,

Wladimir
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120131/65e9f826/attachment.html>

From bitcoin-list at bluematt.me  Tue Jan 31 21:42:48 2012
From: bitcoin-list at bluematt.me (Matt Corallo)
Date: Tue, 31 Jan 2012 16:42:48 -0500
Subject: [Bitcoin-development] BIP 20 Rejected, process for BIP 21N
In-Reply-To: <CA+s+GJAyNR7+=Dht4uLVjJ5DLLwhyG2aTDuFonu0ABXXCUVBKA@mail.gmail.com>
References: <1328020046.70720.YahooMailNeo@web121002.mail.ne1.yahoo.com>
	<1328025899.2832.5.camel@BMThinkPad.lan.bluematt.me>
	<1328034145.2832.11.camel@BMThinkPad.lan.bluematt.me>
	<CA+s+GJAyNR7+=Dht4uLVjJ5DLLwhyG2aTDuFonu0ABXXCUVBKA@mail.gmail.com>
Message-ID: <1328046168.2891.2.camel@BMThinkPad.lan.bluematt.me>

OK, I went ahead and changed mustimplement out for req (required).  Its
not quite as expressive, but its much shorter and still makes sense
(IMHO).  I also explicitly stated that numbers shouldnt contain commas
and should use period to separate whole numbers and fractional decimal
fractions (to avoid any localization concerns).

Matt

On Tue, 2012-01-31 at 20:02 +0100, Wladimir wrote:
> 
> On Tue, Jan 31, 2012 at 7:22 PM, Matt Corallo
> <bitcoin-list at bluematt.me> wrote:
>         
>         All that said, I dont think its an ideal solution, depending
>         on the
>         names of variables to provide information is ugly.  If anyone
>         has a
>         better idea on how to do backward compatibility, please
>         suggest it.
> 
> I like the mustimplement: idea, though I'd recommend a shorter
> (abbreviated) prefix, to keep URL sizes small for QR codes and such,
> 
> Wladimir
> 
> 





From andreas at schildbach.de  Tue Jan 31 22:14:32 2012
From: andreas at schildbach.de (Andreas Schildbach)
Date: Tue, 31 Jan 2012 23:14:32 +0100
Subject: [Bitcoin-development] BIP 20 Rejected, process for BIP 21N
In-Reply-To: <1328034145.2832.11.camel@BMThinkPad.lan.bluematt.me>
References: <1328020046.70720.YahooMailNeo@web121002.mail.ne1.yahoo.com>
	<1328025899.2832.5.camel@BMThinkPad.lan.bluematt.me>
	<1328034145.2832.11.camel@BMThinkPad.lan.bluematt.me>
Message-ID: <jg9p4a$c90$1@dough.gmane.org>

On 01/31/2012 07:22 PM, Matt Corallo wrote:

> that "It is recommended that additional variables prefixed with
> mustimplement: not be used in a mission-critical way until a grace

Is the ':' sign actually allowed in URL parameter names
(unescaped/unencoded)? If not, I'd propose an unrestricted char instead,
maybe '_'.





From g.rowe at froot.co.uk  Tue Jan 31 22:37:50 2012
From: g.rowe at froot.co.uk (Gary Rowe)
Date: Tue, 31 Jan 2012 22:37:50 +0000
Subject: [Bitcoin-development] BIP 20 Rejected, process for BIP 21N
In-Reply-To: <jg9p4a$c90$1@dough.gmane.org>
References: <1328020046.70720.YahooMailNeo@web121002.mail.ne1.yahoo.com>
	<1328025899.2832.5.camel@BMThinkPad.lan.bluematt.me>
	<1328034145.2832.11.camel@BMThinkPad.lan.bluematt.me>
	<jg9p4a$c90$1@dough.gmane.org>
Message-ID: <CAKm8k+0o0fBcBgRMOEc3nycGaLN7EEvfQ5wrZN4XwO5Gk2Pk5w@mail.gmail.com>

Andreas has a good point. See RFC 3986 on URI schemes:
http://tools.ietf.org/html/rfc3986#page-12

The colon is a reserved general delimiter (similar in use to the / in a
typical URL, but applies to URNs etc). As suggested, we get req:something
being changed to one of the unreserved characters that do not have to be
URL encoded. Again, from the RFC these are

* Option A: req_something (underscore)
* Option B: req-something (hyphen)
* Option C: req~something (tilde)
* Option D: req.something (period)

Personally, my eye likes Option B, the hyphen.

On 31 January 2012 22:14, Andreas Schildbach <andreas at schildbach.de> wrote:

> On 01/31/2012 07:22 PM, Matt Corallo wrote:
>
> > that "It is recommended that additional variables prefixed with
> > mustimplement: not be used in a mission-critical way until a grace
>
> Is the ':' sign actually allowed in URL parameter names
> (unescaped/unencoded)? If not, I'd propose an unrestricted char instead,
> maybe '_'.
>
>
>
>
> ------------------------------------------------------------------------------
> Keep Your Developer Skills Current with LearnDevNow!
> The most comprehensive online learning library for Microsoft developers
> is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3, MVC3,
> Metro Style Apps, more. Free future releases when you subscribe now!
> http://p.sf.net/sfu/learndevnow-d2d
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120131/682b40e3/attachment.html>

From bitcoin-list at bluematt.me  Tue Jan 31 22:47:57 2012
From: bitcoin-list at bluematt.me (Matt Corallo)
Date: Tue, 31 Jan 2012 17:47:57 -0500
Subject: [Bitcoin-development] BIP 20 Rejected, process for BIP 21N
In-Reply-To: <CAKm8k+0o0fBcBgRMOEc3nycGaLN7EEvfQ5wrZN4XwO5Gk2Pk5w@mail.gmail.com>
References: <1328020046.70720.YahooMailNeo@web121002.mail.ne1.yahoo.com>
	<1328025899.2832.5.camel@BMThinkPad.lan.bluematt.me>
	<1328034145.2832.11.camel@BMThinkPad.lan.bluematt.me>
	<jg9p4a$c90$1@dough.gmane.org>
	<CAKm8k+0o0fBcBgRMOEc3nycGaLN7EEvfQ5wrZN4XwO5Gk2Pk5w@mail.gmail.com>
Message-ID: <1328050077.2891.4.camel@BMThinkPad.lan.bluematt.me>

Odd, here I was thinking I checked that.  Just goes to show how useful
sources other than the rfc itself are... Anyway, Ill change it to a
hyphen.

Matt

On Tue, 2012-01-31 at 22:37 +0000, Gary Rowe wrote:
> Andreas has a good point. See RFC 3986 on URI
> schemes: http://tools.ietf.org/html/rfc3986#page-12
> 
> 
> The colon is a reserved general delimiter (similar in use to the / in
> a typical URL, but applies to URNs etc). As suggested, we get
> req:something being changed to one of the unreserved characters that
> do not have to be URL encoded. Again, from the RFC these are
> 
> 
> * Option A: req_something (underscore)
> * Option B: req-something (hyphen)
> * Option C: req~something (tilde)
> * Option D: req.something (period)
> 
> 
> Personally, my eye likes Option B, the hyphen. 
> 
> On 31 January 2012 22:14, Andreas Schildbach <andreas at schildbach.de>
> wrote:
>         On 01/31/2012 07:22 PM, Matt Corallo wrote:
>         
>         > that "It is recommended that additional variables prefixed
>         with
>         > mustimplement: not be used in a mission-critical way until a
>         grace
>         
>         
>         Is the ':' sign actually allowed in URL parameter names
>         (unescaped/unencoded)? If not, I'd propose an unrestricted
>         char instead,
>         maybe '_'.






