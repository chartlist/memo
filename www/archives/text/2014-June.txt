From alexykot at gmail.com  Sun Jun  1 09:56:52 2014
From: alexykot at gmail.com (Alex Kotenko)
Date: Sun, 1 Jun 2014 10:56:52 +0100
Subject: [Bitcoin-development] testnet-seed.bitcoin.petertodd.org is up
	again
In-Reply-To: <48331d04b68b3d6554b4e59e97ffbafe@webmail.mckay.com>
References: <20140523221726.GA30143@petertodd.org> <lltfaa$2lv$1@ger.gmane.org>
	<20140526163753.GA18693@petertodd.org> <lm0e7m$thg$1@ger.gmane.org>
	<b6884e2a-42b7-4c3f-a034-3a466aeec751@email.android.com>
	<lm0i6b$4m9$1@ger.gmane.org>
	<cae15a82-73f7-4703-bc7d-f433b002e06e@email.android.com>
	<CALDj+Bax5De1gh1wsz_BjTFTerjzrazZ4SBgEVvYGjhFw3+uEw@mail.gmail.com>
	<bce4e62749b3325d884caaf510e9d862@webmail.mckay.com>
	<CALDj+BZSYojZ1kQqb_5zrpjc=5E94bbZ7a0PG4bkZx38J0zHWQ@mail.gmail.com>
	<48331d04b68b3d6554b4e59e97ffbafe@webmail.mckay.com>
Message-ID: <CALDj+BZhPbtuKROM=r6VbgbhVOC3y6is4yc74ZBuJ-aCd+s2jg@mail.gmail.com>

So generally it seems impossible to have both DNS seeds running on same IP
address. Too bad.
Ok, I'll switch to serving only testnet DNS on this server for now, as this
seems to be a much bigger problem than mainnet. Later I might buy second IP
to setup mainnet DNS also.


Best regards,
Alex Kotenko


2014-05-30 15:51 GMT+01:00 Robert McKay <robert at mckay.com>:

> No, I don't think so. The problem is the 'aa' flag is missing (see the
> 'flags' section in dig). Perhaps if you could suppress the authority
> records the recursor would give up and just accept the non-authorative
> answer, but that isn't a good solution even if it might work for some
> resolvers.
>
> Rob
>
>
> On Fri, 30 May 2014 15:13:36 +0100, Alex Kotenko wrote:
>
>> Hmm, you might be right, as queries
>> dig @node.alexykot.me [8] testnet-seed.alexykot.me [9]
>>
>> ?and
>>  dig @node.alexykot.me [10] -p 18353 testnet-seed.alexykot.me
>> [11]?
>>
>> ?are giving different authority sections.
>>
>> Hmm, but if I setup custom SOA record for it - it should work,
>> right?
>>  What SOA name should it be actually, assuming that NS record for
>> testnet-seed.alexykot.me [12] is pointing at alexykot.me [13]?
>>
>> Best regards,
>>
>> Alex Kotenko
>>
>> 2014-05-30 14:41 GMT+01:00 Robert McKay :
>>
>>  Hi Alex,
>>>
>>> I think the problem is with my suggestion to use bind forwarding..
>>> basically bind is stripping off the authorative answer bit in the
>>> reply.. this causes the recursor to go into a loop chasing the
>>> authority server which again returns a non-authoritve answer with
>>> itself as the authority again. Im not sure if this can be fixed
>>> without hacking the bind src, so maybe it wasnt such a great
>>>
>>> suggestion in the first place. Basically I think if bind was
>>> returning authorative answers it would work, but I cant see any way
>>>
>>> to make that happen in the bind configuration.
>>>
>>> Rob
>>>
>>> On Fri, 30 May 2014 14:19:05 +0100, Alex Kotenko wrote:
>>>
>>>  Hi Peter
>>>>
>>>> Ive setup DNS seeds myself a week ago, at
>>>> testnet-seed.alexykot.me [1] [6]
>>>> and bitcoin-seed.alexykot.me [2] [7], but there is a problem with
>>>>
>>>> DNS
>>>> settings that we with Andreas couldnt sort out quickly.
>>>>
>>>> The problem itself is that I can reach my nameserver and get
>>>> dnsseed
>>>> response if I query it directly with
>>>>  dig @node.alexykot.me [3] [8] testnet-seed.alexykot.me [4] [9]
>>>>
>>>>  dig @node.alexykot.me [5] [10] bitcoin-seed.alexykot.me [6]
>>>> [11]
>>>>
>>>> ?But when I try nslookup testnet-seed.alexykot.me [7] [12]? -
>>>>
>>>> it
>>>> fails.
>>>> I guess the problem is in my DNS settings but I cant figure out
>>>> what
>>>> is it.
>>>>
>>>> ?S o could you share
>>>> ?how you configured DNS
>>>>  ? for your seed
>>>> ? to help me debug
>>>>  ?mine
>>>> ?
>>>>
>>>> Best regards,
>>>>
>>>> Alex Kotenko
>>>>
>>>> ?
>>>>
>>>
>>
>> Links:
>> ------
>> [1] http://testnet-seed.alexykot.me
>> [2] http://bitcoin-seed.alexykot.me
>> [3] http://node.alexykot.me
>> [4] http://testnet-seed.alexykot.me
>> [5] http://node.alexykot.me
>> [6] http://bitcoin-seed.alexykot.me
>> [7] http://testnet-seed.alexykot.me
>> [8] http://node.alexykot.me/
>> [9] http://testnet-seed.alexykot.me/
>> [10] http://node.alexykot.me/
>> [11] http://testnet-seed.alexykot.me/
>> [12] http://testnet-seed.alexykot.me
>> [13] http://alexykot.me
>> [14] mailto:robert at mckay.com
>>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140601/9e40b92b/attachment.html>

From sebastien.requiem at gmail.com  Mon Jun  2 07:23:41 2014
From: sebastien.requiem at gmail.com (sebastien requiem)
Date: Mon, 2 Jun 2014 09:23:41 +0200
Subject: [Bitcoin-development] [QT] Feature proposal: Displaying current
 Units/Changing Units with status bar control.
In-Reply-To: <CADZB0_YZ==Kd-R10d996E=6X-VoVhyE0cvW=_LGXJvQLAbVUpw@mail.gmail.com>
References: <CADZB0_YZ==Kd-R10d996E=6X-VoVhyE0cvW=_LGXJvQLAbVUpw@mail.gmail.com>
Message-ID: <CABLWKA-dsty-WsZmDw4=Js_utwNY4isOm8zW_u-70pN7bgHo3A@mail.gmail.com>

Hello Angel,

Good initiative. This looks good. If I understand, the dropdown menu is for
the whole application, so it make sense to have it in a common part of the
layout.

A slight optimisation would be to write the unit in the transaction table
header too (since we read from top to bottom). This would give something
like "Amount (mBTC)". That way, the user doesn't have to think twice about
the unit of his values.


Hope it helps,





On Fri, May 30, 2014 at 6:39 PM, Angel Leon <gubatron at gmail.com> wrote:

> There's been quite a lot of debate over the default unit of display to
> use, you can read the conversation here, which was closed.
> https://github.com/bitcoin/bitcoin/issues/3862
>
> Whatever the side of the debate you're on, wether it should be BTC or
> mBTC, or other, regular users will probably take too long to find a way to
> change the current unit of display, and if the unit of display were ever
> changed to something other than BTC, the current transaction tables"Amount"
> column don't mention anywhere what Unit of Display is being used.
>
> So last night I started playing with the idea of having a status bar
> component that would:
> 1. Show you what is the current unit of display at all times.
> 2. Let you change the unit of display easily.
>
> Here's how it looks (see attachment), just wanted to get feedback, if this
> is something you also consider valuable in terms of user experience, or
> maybe you don't want to allow any more controls on the status bar (because
> then people will want to add more and more)
>
> Just want to get some feedback before I continue working on this to polish
> it and submit a pull request.
>
>
> Cheers.
> Angel (@gubatron)
>
>
> ------------------------------------------------------------------------------
> Time is money. Stop wasting it! Get your web API in 5 minutes.
> www.restlet.com/download
> http://p.sf.net/sfu/restlet
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>


-- 
sebastien requiem
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140602/36be2296/attachment.html>

From laanwj at gmail.com  Mon Jun  2 07:39:29 2014
From: laanwj at gmail.com (Wladimir)
Date: Mon, 2 Jun 2014 09:39:29 +0200
Subject: [Bitcoin-development] [QT] Feature proposal: Displaying current
 Units/Changing Units with status bar control.
In-Reply-To: <CADZB0_YZ==Kd-R10d996E=6X-VoVhyE0cvW=_LGXJvQLAbVUpw@mail.gmail.com>
References: <CADZB0_YZ==Kd-R10d996E=6X-VoVhyE0cvW=_LGXJvQLAbVUpw@mail.gmail.com>
Message-ID: <CA+s+GJCMMTvVvg+jNpSSfOawDZk8TYS56OzA7GhFrUEDUPzwwA@mail.gmail.com>

On Fri, May 30, 2014 at 6:39 PM, Angel Leon <gubatron at gmail.com> wrote:
>
> Here's how it looks (see attachment), just wanted to get feedback, if this
> is something you also consider valuable in terms of user experience, or
> maybe you don't want to allow any more controls on the status bar (because
> then people will want to add more and more)

Looks good to me.

Though we already allow specifying a unit in all places where the user
can specify a BTC amount.

We also already show the unit in all places where amounts are shown,
except the tables, would be good to add a [unit] in the header there
as well, see https://github.com/bitcoin/bitcoin/issues/3970 .

If that is done, I'm not sure how much a global setting in the status
bar would add. It may make it more apparent to the user that multiple
units can be selected.

Wladimir



From gmaxwell at gmail.com  Mon Jun  2 07:54:19 2014
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Mon, 2 Jun 2014 00:54:19 -0700
Subject: [Bitcoin-development] [QT] Feature proposal: Displaying current
 Units/Changing Units with status bar control.
In-Reply-To: <CA+s+GJCMMTvVvg+jNpSSfOawDZk8TYS56OzA7GhFrUEDUPzwwA@mail.gmail.com>
References: <CADZB0_YZ==Kd-R10d996E=6X-VoVhyE0cvW=_LGXJvQLAbVUpw@mail.gmail.com>
	<CA+s+GJCMMTvVvg+jNpSSfOawDZk8TYS56OzA7GhFrUEDUPzwwA@mail.gmail.com>
Message-ID: <CAAS2fgQJKH4s+UPMCB+raMV4B98f2SSKoXt7cexPB5dYTfmQfg@mail.gmail.com>

On Mon, Jun 2, 2014 at 12:39 AM, Wladimir <laanwj at gmail.com> wrote:
> If that is done, I'm not sure how much a global setting in the status
> bar would add. It may make it more apparent to the user that multiple
> units can be selected.

If thats done it should be done in a way in which it's impossible that
a stray keypress could switch it or someone may eventually have a very
very bad day.



From gubatron at gmail.com  Mon Jun  2 19:41:12 2014
From: gubatron at gmail.com (Angel Leon)
Date: Mon, 2 Jun 2014 15:41:12 -0400
Subject: [Bitcoin-development] [QT] Feature proposal: Displaying current
 Units/Changing Units with status bar control.
In-Reply-To: <CAAS2fgQJKH4s+UPMCB+raMV4B98f2SSKoXt7cexPB5dYTfmQfg@mail.gmail.com>
References: <CADZB0_YZ==Kd-R10d996E=6X-VoVhyE0cvW=_LGXJvQLAbVUpw@mail.gmail.com>
	<CA+s+GJCMMTvVvg+jNpSSfOawDZk8TYS56OzA7GhFrUEDUPzwwA@mail.gmail.com>
	<CAAS2fgQJKH4s+UPMCB+raMV4B98f2SSKoXt7cexPB5dYTfmQfg@mail.gmail.com>
Message-ID: <CADZB0_bRLKLEM0fO4h3AzYy8A17Qck20OU3CAYZw=9HWELwVaQ@mail.gmail.com>

With this I'll continue then to work on this with the addition of:
- Showing the current unit on the header column title "Amount ($unitHere)"
- Will make sure the user cannot change the current unit of display by
mistake by adding a confirmation dialog.

Thanks all for the feedback!
Angel.

http://twitter.com/gubatron


On Mon, Jun 2, 2014 at 3:54 AM, Gregory Maxwell <gmaxwell at gmail.com> wrote:

> On Mon, Jun 2, 2014 at 12:39 AM, Wladimir <laanwj at gmail.com> wrote:
> > If that is done, I'm not sure how much a global setting in the status
> > bar would add. It may make it more apparent to the user that multiple
> > units can be selected.
>
> If thats done it should be done in a way in which it's impossible that
> a stray keypress could switch it or someone may eventually have a very
> very bad day.
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140602/4ad1fddf/attachment.html>

From toshi at peernova.com  Mon Jun  2 20:01:49 2014
From: toshi at peernova.com (Toshi Morita)
Date: Mon, 2 Jun 2014 13:01:49 -0700
Subject: [Bitcoin-development] Another uninitialized memory problem
Message-ID: <CANFXpYOdmweoxXRM_LcnB-jFNHt8kj_B0jTFZ00Jffi7UHvwPA@mail.gmail.com>

I'm seeing another uninitialized memory problem in bitcoind using valgrind:

tm at tm-VirtualBox:~/bitcoind/bitcoin/src$ valgrind ./bitcoind
==2337== Memcheck, a memory error detector
==2337== Copyright (C) 2002-2012, and GNU GPL'd, by Julian Seward et al.
==2337== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright info
==2337== Command: ./bitcoind
==2337==
==2337== Conditional jump or move depends on uninitialised value(s)
==2337==    at 0x319176: CWallet::LoadKeyMetadata(CPubKey const&,
CKeyMetadata const&) (wallet.cpp:110)
==2337==    by 0x33645A: ReadKeyValue(CWallet*, CDataStream&, CDataStream&,
CWalletScanState&, std::string&, std::string&) (walletdb.cpp:509)
==2337==    by 0x3374F0: CWalletDB::LoadWallet(CWallet*) (walletdb.cpp:623)
==2337==    by 0x3218FD: CWallet::LoadWallet(bool&) (wallet.cpp:1485)
==2337==    by 0x157F16: AppInit2(boost::thread_group&) (init.cpp:958)
==2337==    by 0x140142: AppInit(int, char**) (bitcoind.cpp:143)
==2337==    by 0x13649E: main (bitcoind.cpp:180)
==2337==
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140602/762b726d/attachment.html>

From xor at freenetproject.org  Tue Jun  3 04:29:55 2014
From: xor at freenetproject.org (xor)
Date: Tue, 03 Jun 2014 06:29:55 +0200
Subject: [Bitcoin-development] Lets discuss what to do if SHA256d is
	actually broken
Message-ID: <2341954.NpNStk60qp@1337h4x0r>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256

Hi,

I thought a lot about the worst case scenario of SHA256d being broken in a way 
which could be abused to 
A) reduce the work of mining a block by some significant amount
B) reduce the work of mining a block to zero, i.e. allow instant mining.

Bitcoin needs to be prepared for this as any hash function has a limited 
lifetime. Usually crypto stuff is not completely broken instantly by new 
attacks but gradually. For example first the attack difficulty is reduced from 
2^128 to 2^100, then 2^64, etc.
This would make scenario A more likely.

Now while B sounds more dangerous, I think in fact A is:
Consider how A would happen in real life: Someone publishes a paper of a 
theoretical reduction of SHA256d attacks to 2^96 bit. Mathematicians will 
consider this as a serious attack and create a lot of riot.
If no plan is made early enough, as in now, the Bitcoin Core team might then 
probably want to just do the easiest approach of replacing the hash function 
after a certain block number, i.e. a hard fork.
But what about the Bitcoin miners, those who need to actually accept a change 
of mining algorithm which renders their hardware which cost MILLIONS 
completely worthless?
Over the years they have gotten used to exponential growth of the Bitcoin 
networks hashrate, and therefore exponential devaluation of their mining 
hardware. Even if the attack on SHA256d causes a significant growth of 
difficulty, the miners will not *believe* that it is an actual attack on SHA256d 
- - maybe it is just some new large mining operation?  They are used to this 
happening! Why should they believe this and switch to a new hash function 
which requires completely new hardware and therefore costs them millions?
They will just keep mining SHA256d. Thats why this is more dangerous, because 
changing the hash funciton won't be accepted by the miners even though it is 
broken.
Something smarter needs to be thought of.

Now I must admit that I am not good at cryptography at all, but I had the 
following idea: Use the altcoin concept of having multiple hash functions in a 
chain. If SHA256d is broken, it is chained with a new hash function.
Thereby, people who want to mine the new replacement hash function still will 
need ASICs which can solve the old SHA proof of work. So existing ASIC owners 
can amend their code to do SHA256d using the ASIC, and then the second hash 
function using a general purpose CPU.
This would also allow a smooth migration of difficulty - I don't even know how 
difficulty would react with the naive approach of just replacing SHA with 
something else: It would probably be an unsolvable problem to define new rules 
to make it decrease enough so new blocks can actually be mined by the now 
several orders of magnitude slower CPU-only mining community but still be high 
enough to be able to deal with the fact that millions of people will try their 
luck with mining at the release date.

While this sounds simple in theory, it might be a lot of work to implement, so 
you guys might want to take precautions for it soon :)

Greetings,
	xor - A Freenet project developer

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.14 (GNU/Linux)

iQIcBAEBCAAGBQJTjU9DAAoJEMtmZ+8tjWt5pNEP/2460eHu7ujrUSxinJXY7+wF
E759/NcpNuakqu4NsS3ndi8lSiVIeixiOWZxPwLYkzC0pgPd5JrK5hdrYewsgreL
Ltkh6LKB4YZLYrV3jm62ZPMTzCopYQ1l872xbN3PJQJoXhEp4fKu99++LDzVg9Gk
n7rvrk6Iy/nSsZ1IMANpKghbU8/Gtn6ppCJv9rxRE//CZdTso1tTyOXXkEEMTHcV
y/iv6CHXtTXPvOgEgciU0oCPq0NOUKdIAOD//ybcKzncOoHSmwr1rZdreCTH6/Ek
9uwq/HaQnseHPrq9qrIkIKrZDlnjKu7Tqw1BlbyBeCrWdJPCeDJg2kyCXgTvIzFD
oXwZ6r16tb2QPR4ByyO1lZy9G2Pp26thk12BnadnPYTf1rMvsY15BjfUrCU9ppt/
YpFAZSFlXUGOuOBKUznUeO8U1bXJylcTTnyER/cudOpcKR8Jt9l5tfm5LTHCB6Q2
Tjmvsmd0BzwafLEhHD5FHoTZFNVdXWvEUO/w4I/2UWTS7CacbE1qk0rVpsF/4L1K
/oFVnZIUKqsm5mMMb6WTQq+MjP2TF/eAAwm2UtFYmj0FVML9HBNwyiAc5UKwnD4Y
Yq3Pl5QfRobwu6pgT3zO7vK+saOl8sePWbU8Skj41OTEDrJM4QIQGAqs1U8xke8+
YnUYiyzreJ8ofHhNBs4/
=dkuk
-----END PGP SIGNATURE-----




From luke at dashjr.org  Tue Jun  3 04:52:39 2014
From: luke at dashjr.org (Luke Dashjr)
Date: Tue, 3 Jun 2014 04:52:39 +0000
Subject: [Bitcoin-development] Lets discuss what to do if SHA256d is
	actually broken
In-Reply-To: <2341954.NpNStk60qp@1337h4x0r>
References: <2341954.NpNStk60qp@1337h4x0r>
Message-ID: <201406030452.40520.luke@dashjr.org>

On Tuesday, June 03, 2014 4:29:55 AM xor wrote:
> Hi,
> 
> I thought a lot about the worst case scenario of SHA256d being broken in a
> way which could be abused to
> A) reduce the work of mining a block by some significant amount
> B) reduce the work of mining a block to zero, i.e. allow instant mining.

C) fabricate past blocks entirely.

If SHA256d is broken, Bitcoin as it is fails entirely.

Luke



From laanwj at gmail.com  Tue Jun  3 09:57:11 2014
From: laanwj at gmail.com (Wladimir)
Date: Tue, 3 Jun 2014 11:57:11 +0200
Subject: [Bitcoin-development] Another uninitialized memory problem
In-Reply-To: <CANFXpYOdmweoxXRM_LcnB-jFNHt8kj_B0jTFZ00Jffi7UHvwPA@mail.gmail.com>
References: <CANFXpYOdmweoxXRM_LcnB-jFNHt8kj_B0jTFZ00Jffi7UHvwPA@mail.gmail.com>
Message-ID: <CA+s+GJD+Ct-VU4QgMmjbz1ZQQeNK9Pkmdw9QLb_x35tUtj7kwQ@mail.gmail.com>

On Mon, Jun 2, 2014 at 10:01 PM, Toshi Morita <toshi at peernova.com> wrote:
> I'm seeing another uninitialized memory problem in bitcoind using valgrind:

Thanks for the report.

Which version/commit id of bitcoind?

Wladimir



From eth3rs at gmail.com  Tue Jun  3 11:51:45 2014
From: eth3rs at gmail.com (Ethan Heilman)
Date: Tue, 3 Jun 2014 07:51:45 -0400
Subject: [Bitcoin-development] Lets discuss what to do if SHA256d is
 actually broken
In-Reply-To: <201406030452.40520.luke@dashjr.org>
References: <2341954.NpNStk60qp@1337h4x0r> <201406030452.40520.luke@dashjr.org>
Message-ID: <CAEM=y+WFofZV-DbqEhkMT477jKdV35daoc+f3RWpCk=Vgy8ONA@mail.gmail.com>

An attack on the mining difficulty algorithm does not imply violation of
the typical security properties of a cryptographic hash function*.

Assume someone discovers a method which makes it far easier to discover new
blocks, this method: may or may not be implementable by the current SHA256
ASIC hardware.

1. If it is usable by the mining hardware, then there will be brief period
of overproduction and then difficulty will adjust. If the attack is so bad
that difficulty can't scale and we run out of a leading zero's, then the
SHA256 collision resistance is broken and we have bigger problems. Under
this scenario, everyone would see the need to immediately switch to new
hardware as people could create cycles and irreconcilable forks in the
block chain

2. If the attack is not usable by the mining hardware, then the miners will
need to switch to new ASICs anyways and the hash function can be changed
without resistance.

But lets ignore all that and say, for some unspecified reason, the bitcoin
community wants to switch hash functions and has some lead time to do so.
One could require that miners find two blocks, one computed using SHA256
and one computed using the new hash function. We could then slowly shift
the difficulty from SHA256 to the new hash function. This would allow
miners a semi-predicable roadmap to switch their infrastructure away from
SHA256.

* It would be a distinguisher which would be bad, but collision resistance
could be merely weakened.


On Tue, Jun 3, 2014 at 12:52 AM, Luke Dashjr <luke at dashjr.org> wrote:

> On Tuesday, June 03, 2014 4:29:55 AM xor wrote:
> > Hi,
> >
> > I thought a lot about the worst case scenario of SHA256d being broken in
> a
> > way which could be abused to
> > A) reduce the work of mining a block by some significant amount
> > B) reduce the work of mining a block to zero, i.e. allow instant mining.
>
> C) fabricate past blocks entirely.
>
> If SHA256d is broken, Bitcoin as it is fails entirely.
>
> Luke
>
>
> ------------------------------------------------------------------------------
> Learn Graph Databases - Download FREE O'Reilly Book
> "Graph Databases" is the definitive new guide to graph databases and their
> applications. Written by three acclaimed leaders in the field,
> this first edition is now available. Download your free book today!
> http://p.sf.net/sfu/NeoTech
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140603/5a51bf30/attachment.html>

From kevinsisco61784 at gmail.com  Tue Jun  3 14:43:39 2014
From: kevinsisco61784 at gmail.com (Kevin)
Date: Tue, 03 Jun 2014 10:43:39 -0400
Subject: [Bitcoin-development] Lets discuss what to do if SHA256d is
 actually broken
In-Reply-To: <2341954.NpNStk60qp@1337h4x0r>
References: <2341954.NpNStk60qp@1337h4x0r>
Message-ID: <538DDF1B.30701@gmail.com>

On 6/3/2014 12:29 AM, xor wrote:
> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA256
>
> Hi,
>
> I thought a lot about the worst case scenario of SHA256d being broken in a way
> which could be abused to
> A) reduce the work of mining a block by some significant amount
> B) reduce the work of mining a block to zero, i.e. allow instant mining.
>
> Bitcoin needs to be prepared for this as any hash function has a limited
> lifetime. Usually crypto stuff is not completely broken instantly by new
> attacks but gradually. For example first the attack difficulty is reduced from
> 2^128 to 2^100, then 2^64, etc.
> This would make scenario A more likely.
>
> Now while B sounds more dangerous, I think in fact A is:
> Consider how A would happen in real life: Someone publishes a paper of a
> theoretical reduction of SHA256d attacks to 2^96 bit. Mathematicians will
> consider this as a serious attack and create a lot of riot.
> If no plan is made early enough, as in now, the Bitcoin Core team might then
> probably want to just do the easiest approach of replacing the hash function
> after a certain block number, i.e. a hard fork.
> But what about the Bitcoin miners, those who need to actually accept a change
> of mining algorithm which renders their hardware which cost MILLIONS
> completely worthless?
> Over the years they have gotten used to exponential growth of the Bitcoin
> networks hashrate, and therefore exponential devaluation of their mining
> hardware. Even if the attack on SHA256d causes a significant growth of
> difficulty, the miners will not *believe* that it is an actual attack on SHA256d
> - - maybe it is just some new large mining operation?  They are used to this
> happening! Why should they believe this and switch to a new hash function
> which requires completely new hardware and therefore costs them millions?
> They will just keep mining SHA256d. Thats why this is more dangerous, because
> changing the hash funciton won't be accepted by the miners even though it is
> broken.
> Something smarter needs to be thought of.
>
> Now I must admit that I am not good at cryptography at all, but I had the
> following idea: Use the altcoin concept of having multiple hash functions in a
> chain. If SHA256d is broken, it is chained with a new hash function.
> Thereby, people who want to mine the new replacement hash function still will
> need ASICs which can solve the old SHA proof of work. So existing ASIC owners
> can amend their code to do SHA256d using the ASIC, and then the second hash
> function using a general purpose CPU.
> This would also allow a smooth migration of difficulty - I don't even know how
> difficulty would react with the naive approach of just replacing SHA with
> something else: It would probably be an unsolvable problem to define new rules
> to make it decrease enough so new blocks can actually be mined by the now
> several orders of magnitude slower CPU-only mining community but still be high
> enough to be able to deal with the fact that millions of people will try their
> luck with mining at the release date.
>
> While this sounds simple in theory, it might be a lot of work to implement, so
> you guys might want to take precautions for it soon :)
>
> Greetings,
> 	xor - A Freenet project developer
>
> -----BEGIN PGP SIGNATURE-----
> Version: GnuPG v1.4.14 (GNU/Linux)
>
> iQIcBAEBCAAGBQJTjU9DAAoJEMtmZ+8tjWt5pNEP/2460eHu7ujrUSxinJXY7+wF
> E759/NcpNuakqu4NsS3ndi8lSiVIeixiOWZxPwLYkzC0pgPd5JrK5hdrYewsgreL
> Ltkh6LKB4YZLYrV3jm62ZPMTzCopYQ1l872xbN3PJQJoXhEp4fKu99++LDzVg9Gk
> n7rvrk6Iy/nSsZ1IMANpKghbU8/Gtn6ppCJv9rxRE//CZdTso1tTyOXXkEEMTHcV
> y/iv6CHXtTXPvOgEgciU0oCPq0NOUKdIAOD//ybcKzncOoHSmwr1rZdreCTH6/Ek
> 9uwq/HaQnseHPrq9qrIkIKrZDlnjKu7Tqw1BlbyBeCrWdJPCeDJg2kyCXgTvIzFD
> oXwZ6r16tb2QPR4ByyO1lZy9G2Pp26thk12BnadnPYTf1rMvsY15BjfUrCU9ppt/
> YpFAZSFlXUGOuOBKUznUeO8U1bXJylcTTnyER/cudOpcKR8Jt9l5tfm5LTHCB6Q2
> Tjmvsmd0BzwafLEhHD5FHoTZFNVdXWvEUO/w4I/2UWTS7CacbE1qk0rVpsF/4L1K
> /oFVnZIUKqsm5mMMb6WTQq+MjP2TF/eAAwm2UtFYmj0FVML9HBNwyiAc5UKwnD4Y
> Yq3Pl5QfRobwu6pgT3zO7vK+saOl8sePWbU8Skj41OTEDrJM4QIQGAqs1U8xke8+
> YnUYiyzreJ8ofHhNBs4/
> =dkuk
> -----END PGP SIGNATURE-----
>
>
> ------------------------------------------------------------------------------
> Learn Graph Databases - Download FREE O'Reilly Book
> "Graph Databases" is the definitive new guide to graph databases and their
> applications. Written by three acclaimed leaders in the field,
> this first edition is now available. Download your free book today!
> http://p.sf.net/sfu/NeoTech
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
It is good to start thinking about such things.  Let's face it, it could 
happen.  However, short of having bitcoin use another algorithm for 
encryption, I am not sure much could be done.  That's just me.


-- 
Kevin




From dscvlt at gmail.com  Tue Jun  3 15:12:12 2014
From: dscvlt at gmail.com (Ashley Holman)
Date: Wed, 4 Jun 2014 00:42:12 +0930
Subject: [Bitcoin-development] Lets discuss what to do if SHA256d is
 actually broken
In-Reply-To: <CAEM=y+WFofZV-DbqEhkMT477jKdV35daoc+f3RWpCk=Vgy8ONA@mail.gmail.com>
References: <2341954.NpNStk60qp@1337h4x0r> <201406030452.40520.luke@dashjr.org>
	<CAEM=y+WFofZV-DbqEhkMT477jKdV35daoc+f3RWpCk=Vgy8ONA@mail.gmail.com>
Message-ID: <CAOXABZqJL=Qe5bTbPB9LvLPUCdEca9eP9CHhPjd+eq1ZyLLyqA@mail.gmail.com>

There is a relevant post from Satoshi on this:

https://bitcointalk.org/index.php?topic=191.msg1585#msg1585

Quote:

"If SHA-256 became completely broken, I think we could come to some
agreement about what the honest block chain was before the trouble started,
lock that in and continue from there with a new hash function.

If the hash breakdown came gradually, we could transition to a new hash in
an orderly way.  The software would be programmed to start using a new hash
after a certain block number.  Everyone would have to upgrade by that time.
 The software could save the new hash of all the old blocks to make sure a
different block with the same old hash can't be used."


On Tue, Jun 3, 2014 at 9:21 PM, Ethan Heilman <eth3rs at gmail.com> wrote:

> An attack on the mining difficulty algorithm does not imply violation of
> the typical security properties of a cryptographic hash function*.
>
> Assume someone discovers a method which makes it far easier to discover
> new blocks, this method: may or may not be implementable by the current
> SHA256 ASIC hardware.
>
> 1. If it is usable by the mining hardware, then there will be brief period
> of overproduction and then difficulty will adjust. If the attack is so bad
> that difficulty can't scale and we run out of a leading zero's, then the
> SHA256 collision resistance is broken and we have bigger problems. Under
> this scenario, everyone would see the need to immediately switch to new
> hardware as people could create cycles and irreconcilable forks in the
> block chain
>
> 2. If the attack is not usable by the mining hardware, then the miners
> will need to switch to new ASICs anyways and the hash function can be
> changed without resistance.
>
> But lets ignore all that and say, for some unspecified reason, the bitcoin
> community wants to switch hash functions and has some lead time to do so.
> One could require that miners find two blocks, one computed using SHA256
> and one computed using the new hash function. We could then slowly shift
> the difficulty from SHA256 to the new hash function. This would allow
> miners a semi-predicable roadmap to switch their infrastructure away from
> SHA256.
>
> * It would be a distinguisher which would be bad, but collision resistance
> could be merely weakened.
>
>
> On Tue, Jun 3, 2014 at 12:52 AM, Luke Dashjr <luke at dashjr.org> wrote:
>
>> On Tuesday, June 03, 2014 4:29:55 AM xor wrote:
>> > Hi,
>> >
>> > I thought a lot about the worst case scenario of SHA256d being broken
>> in a
>> > way which could be abused to
>> > A) reduce the work of mining a block by some significant amount
>> > B) reduce the work of mining a block to zero, i.e. allow instant mining.
>>
>> C) fabricate past blocks entirely.
>>
>> If SHA256d is broken, Bitcoin as it is fails entirely.
>>
>> Luke
>>
>>
>> ------------------------------------------------------------------------------
>> Learn Graph Databases - Download FREE O'Reilly Book
>> "Graph Databases" is the definitive new guide to graph databases and their
>> applications. Written by three acclaimed leaders in the field,
>> this first edition is now available. Download your free book today!
>> http://p.sf.net/sfu/NeoTech
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>
>
>
>
> ------------------------------------------------------------------------------
> Learn Graph Databases - Download FREE O'Reilly Book
> "Graph Databases" is the definitive new guide to graph databases and their
> applications. Written by three acclaimed leaders in the field,
> this first edition is now available. Download your free book today!
> http://p.sf.net/sfu/NeoTech
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140604/287312fb/attachment.html>

From jgarzik at bitpay.com  Tue Jun  3 16:43:15 2014
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Tue, 3 Jun 2014 12:43:15 -0400
Subject: [Bitcoin-development] Another uninitialized memory problem
In-Reply-To: <CANFXpYOdmweoxXRM_LcnB-jFNHt8kj_B0jTFZ00Jffi7UHvwPA@mail.gmail.com>
References: <CANFXpYOdmweoxXRM_LcnB-jFNHt8kj_B0jTFZ00Jffi7UHvwPA@mail.gmail.com>
Message-ID: <CAJHLa0OiFCX_CT-OLBaFHB5SGL0ADsXm7gQrsRs7inu=qM1E6g@mail.gmail.com>

I think I see the problem.


On Mon, Jun 2, 2014 at 4:01 PM, Toshi Morita <toshi at peernova.com> wrote:
> I'm seeing another uninitialized memory problem in bitcoind using valgrind:
>
> tm at tm-VirtualBox:~/bitcoind/bitcoin/src$ valgrind ./bitcoind
> ==2337== Memcheck, a memory error detector
> ==2337== Copyright (C) 2002-2012, and GNU GPL'd, by Julian Seward et al.
> ==2337== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright info
> ==2337== Command: ./bitcoind
> ==2337==
> ==2337== Conditional jump or move depends on uninitialised value(s)
> ==2337==    at 0x319176: CWallet::LoadKeyMetadata(CPubKey const&,
> CKeyMetadata const&) (wallet.cpp:110)
> ==2337==    by 0x33645A: ReadKeyValue(CWallet*, CDataStream&, CDataStream&,
> CWalletScanState&, std::string&, std::string&) (walletdb.cpp:509)
> ==2337==    by 0x3374F0: CWalletDB::LoadWallet(CWallet*) (walletdb.cpp:623)
> ==2337==    by 0x3218FD: CWallet::LoadWallet(bool&) (wallet.cpp:1485)
> ==2337==    by 0x157F16: AppInit2(boost::thread_group&) (init.cpp:958)
> ==2337==    by 0x140142: AppInit(int, char**) (bitcoind.cpp:143)
> ==2337==    by 0x13649E: main (bitcoind.cpp:180)
> ==2337==
>
>
> ------------------------------------------------------------------------------
> Learn Graph Databases - Download FREE O'Reilly Book
> "Graph Databases" is the definitive new guide to graph databases and their
> applications. Written by three acclaimed leaders in the field,
> this first edition is now available. Download your free book today!
> http://p.sf.net/sfu/NeoTech
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>



-- 
Jeff Garzik
Bitcoin core developer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From toshi at peernova.com  Tue Jun  3 16:47:53 2014
From: toshi at peernova.com (Toshi Morita)
Date: Tue, 3 Jun 2014 09:47:53 -0700
Subject: [Bitcoin-development] Another uninitialized memory problem
In-Reply-To: <CAJHLa0OiFCX_CT-OLBaFHB5SGL0ADsXm7gQrsRs7inu=qM1E6g@mail.gmail.com>
References: <CANFXpYOdmweoxXRM_LcnB-jFNHt8kj_B0jTFZ00Jffi7UHvwPA@mail.gmail.com>
	<CAJHLa0OiFCX_CT-OLBaFHB5SGL0ADsXm7gQrsRs7inu=qM1E6g@mail.gmail.com>
Message-ID: <CANFXpYOFcYtt_PS4RNmiXdcNbLbY5S29aO14sP8fK+GN3ivNYg@mail.gmail.com>

I looked at this a bit more yesterday, and it looks like both sides of the
comparison were uninitialized, and I fixed one side, but the other side has
the same problem.

I'll try to investigate further this afternoon once I get out of
meetings/meetings prep.

Toshi



On Tue, Jun 3, 2014 at 9:43 AM, Jeff Garzik <jgarzik at bitpay.com> wrote:

> I think I see the problem.
>
>
> On Mon, Jun 2, 2014 at 4:01 PM, Toshi Morita <toshi at peernova.com> wrote:
> > I'm seeing another uninitialized memory problem in bitcoind using
> valgrind:
> >
> > tm at tm-VirtualBox:~/bitcoind/bitcoin/src$ valgrind ./bitcoind
> > ==2337== Memcheck, a memory error detector
> > ==2337== Copyright (C) 2002-2012, and GNU GPL'd, by Julian Seward et al.
> > ==2337== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright
> info
> > ==2337== Command: ./bitcoind
> > ==2337==
> > ==2337== Conditional jump or move depends on uninitialised value(s)
> > ==2337==    at 0x319176: CWallet::LoadKeyMetadata(CPubKey const&,
> > CKeyMetadata const&) (wallet.cpp:110)
> > ==2337==    by 0x33645A: ReadKeyValue(CWallet*, CDataStream&,
> CDataStream&,
> > CWalletScanState&, std::string&, std::string&) (walletdb.cpp:509)
> > ==2337==    by 0x3374F0: CWalletDB::LoadWallet(CWallet*)
> (walletdb.cpp:623)
> > ==2337==    by 0x3218FD: CWallet::LoadWallet(bool&) (wallet.cpp:1485)
> > ==2337==    by 0x157F16: AppInit2(boost::thread_group&) (init.cpp:958)
> > ==2337==    by 0x140142: AppInit(int, char**) (bitcoind.cpp:143)
> > ==2337==    by 0x13649E: main (bitcoind.cpp:180)
> > ==2337==
> >
> >
> >
> ------------------------------------------------------------------------------
> > Learn Graph Databases - Download FREE O'Reilly Book
> > "Graph Databases" is the definitive new guide to graph databases and
> their
> > applications. Written by three acclaimed leaders in the field,
> > this first edition is now available. Download your free book today!
> > http://p.sf.net/sfu/NeoTech
> > _______________________________________________
> > Bitcoin-development mailing list
> > Bitcoin-development at lists.sourceforge.net
> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> >
>
>
>
> --
> Jeff Garzik
> Bitcoin core developer and open source evangelist
> BitPay, Inc.      https://bitpay.com/
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140603/c007c863/attachment.html>

From jgarzik at bitpay.com  Tue Jun  3 17:40:38 2014
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Tue, 3 Jun 2014 13:40:38 -0400
Subject: [Bitcoin-development] Another uninitialized memory problem
In-Reply-To: <CANFXpYOFcYtt_PS4RNmiXdcNbLbY5S29aO14sP8fK+GN3ivNYg@mail.gmail.com>
References: <CANFXpYOdmweoxXRM_LcnB-jFNHt8kj_B0jTFZ00Jffi7UHvwPA@mail.gmail.com>
	<CAJHLa0OiFCX_CT-OLBaFHB5SGL0ADsXm7gQrsRs7inu=qM1E6g@mail.gmail.com>
	<CANFXpYOFcYtt_PS4RNmiXdcNbLbY5S29aO14sP8fK+GN3ivNYg@mail.gmail.com>
Message-ID: <CAJHLa0NX44cxQLdm7oSewu33uZs--hpHjOouOpBy6G9f+nghNw@mail.gmail.com>

Does this fix it?  https://github.com/bitcoin/bitcoin/pull/4282


On Tue, Jun 3, 2014 at 12:47 PM, Toshi Morita <toshi at peernova.com> wrote:
> I looked at this a bit more yesterday, and it looks like both sides of the
> comparison were uninitialized, and I fixed one side, but the other side has
> the same problem.
>
> I'll try to investigate further this afternoon once I get out of
> meetings/meetings prep.
>
> Toshi
>
>
>
> On Tue, Jun 3, 2014 at 9:43 AM, Jeff Garzik <jgarzik at bitpay.com> wrote:
>>
>> I think I see the problem.
>>
>>
>> On Mon, Jun 2, 2014 at 4:01 PM, Toshi Morita <toshi at peernova.com> wrote:
>> > I'm seeing another uninitialized memory problem in bitcoind using
>> > valgrind:
>> >
>> > tm at tm-VirtualBox:~/bitcoind/bitcoin/src$ valgrind ./bitcoind
>> > ==2337== Memcheck, a memory error detector
>> > ==2337== Copyright (C) 2002-2012, and GNU GPL'd, by Julian Seward et al.
>> > ==2337== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright
>> > info
>> > ==2337== Command: ./bitcoind
>> > ==2337==
>> > ==2337== Conditional jump or move depends on uninitialised value(s)
>> > ==2337==    at 0x319176: CWallet::LoadKeyMetadata(CPubKey const&,
>> > CKeyMetadata const&) (wallet.cpp:110)
>> > ==2337==    by 0x33645A: ReadKeyValue(CWallet*, CDataStream&,
>> > CDataStream&,
>> > CWalletScanState&, std::string&, std::string&) (walletdb.cpp:509)
>> > ==2337==    by 0x3374F0: CWalletDB::LoadWallet(CWallet*)
>> > (walletdb.cpp:623)
>> > ==2337==    by 0x3218FD: CWallet::LoadWallet(bool&) (wallet.cpp:1485)
>> > ==2337==    by 0x157F16: AppInit2(boost::thread_group&) (init.cpp:958)
>> > ==2337==    by 0x140142: AppInit(int, char**) (bitcoind.cpp:143)
>> > ==2337==    by 0x13649E: main (bitcoind.cpp:180)
>> > ==2337==
>> >
>> >
>> >
>> > ------------------------------------------------------------------------------
>> > Learn Graph Databases - Download FREE O'Reilly Book
>> > "Graph Databases" is the definitive new guide to graph databases and
>> > their
>> > applications. Written by three acclaimed leaders in the field,
>> > this first edition is now available. Download your free book today!
>> > http://p.sf.net/sfu/NeoTech
>> > _______________________________________________
>> > Bitcoin-development mailing list
>> > Bitcoin-development at lists.sourceforge.net
>> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>> >
>>
>>
>>
>> --
>> Jeff Garzik
>> Bitcoin core developer and open source evangelist
>> BitPay, Inc.      https://bitpay.com/
>
>



-- 
Jeff Garzik
Bitcoin core developer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From rdwnj at yahoo.com  Tue Jun  3 19:07:01 2014
From: rdwnj at yahoo.com (Ron)
Date: Tue, 3 Jun 2014 12:07:01 -0700 (PDT)
Subject: [Bitcoin-development] # error "Bitcoin cannot be compiled without
	assertions." <<<<NOT
Message-ID: <1401822421.27942.YahooMailNeo@web124505.mail.ne1.yahoo.com>

Hello

What is the issue with the Bitcoin code for 0.9.x with regard to assertions that isn't in 0.8.6 or previous releases?

on April 18th, I offered 

https://github.com/bc4-old-c-coder/bitcoin/commit/f0d221e56a12947b67b9c8f43cc5832b665052c8 

this commit and code with all side effects removed from the assertions.


Then on the 28th,

https://github.com/bc4-old-c-coder/bitcoin/tree/0.8.6 

this code with unit tests working.

And if that isn't enough, I did a video series on building Bitcoind.exe and the static libraries (on MSVC++) all in NDEBUG (release) mode.

See
https://www.youtube.com/playlist?list=PLFnWb0ttBBMLyUuniLp3PJ5Mn4tVUlliZ? 
Notice that the NDEBUG release mode is featured, and I even run it!

Lastly what does that say about building Bitcoin-qt in release mode?? Should one or not??

There is also a video on building an alternate coin-qt.exe in release mode (gcc version) and running it!? See 
https://www.youtube.com/watch?v=C8GvHpjbAnM 


?


assert() should have no side effects, that is the problem.

See
http://books.google.com/books?id=L5ZbzVnpkXAC&pg=PA72&lpg=PA72&dq=Gotcha+%2328+Side+Effects&source=bl&ots=Rn15TlPmje&sig=tymHqta0aSANwaM2GaXC-1Di_tk&hl=en&sa=X&ei=uVKNU47fCcvTsAT6goHIBA&ved=0CCAQ6AEwAA#v=onepage&q=Gotcha%20%2328%20Side%20Effects&f=false

a
 great book, BTW.? Everyone who thinks they know what they are doing 
when they write C++ should read this book!? They will realize that they 
don't know Jack 

Why weren't these and all the other examples of amateur, i.e., non-professional, software fixed way back in version 0.3.0 in 2010, before any more releases were done?? And why were these and other sub-standard coding practices continued and expanded in later releases, right up until the present? 

Ron
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140603/194feac4/attachment.html>

From rusty at rustcorp.com.au  Tue Jun  3 12:45:23 2014
From: rusty at rustcorp.com.au (Rusty Russell)
Date: Tue, 03 Jun 2014 22:15:23 +0930
Subject: [Bitcoin-development] Lets discuss what to do if SHA256d is
	actually broken
In-Reply-To: <201406030452.40520.luke@dashjr.org>
References: <2341954.NpNStk60qp@1337h4x0r> <201406030452.40520.luke@dashjr.org>
Message-ID: <87iooi40ws.fsf@rustcorp.com.au>

Luke Dashjr <luke at dashjr.org> writes:
> On Tuesday, June 03, 2014 4:29:55 AM xor wrote:
>> Hi,
>> 
>> I thought a lot about the worst case scenario of SHA256d being broken in a
>> way which could be abused to
>> A) reduce the work of mining a block by some significant amount
>> B) reduce the work of mining a block to zero, i.e. allow instant mining.
>
> C) fabricate past blocks entirely.
>
> If SHA256d is broken, Bitcoin as it is fails entirely.

I normally just lurk, but I looked at this issue last year, so thought
I'd chime in.  I never finished my paper though...

In the event of an *anticipated* weakening of SHA256, a gradual
transition is possible which avoids massive financial disruption.

My scheme used a similar solve-SHA256-then-solve-SHA3 (requiring an
extra nonce for the SHA3), with the difficulty of SHA256 ramping down
and SHA3 ramping up over the transition (eg for a 1 year transition,
start with 25/26 SHA2 and 1/26 SHA3).

The hard part is to estimate what the SHA3 difficulty should be over
time.  My solution was to adjust only the SHA3 target on every *second*
difficulty change (otherwise assume that SHA2 and SHA3 have equally
changed rate and adjust targets on both).

This works reasonably well even if the initial SHA3 difficulty is way
off, and also if SHA2 breaks completely halfway through the transition.

I can provide more details if anyone is interested.

Cheers,
Rusty.



From cshrem at gmail.com  Wed Jun  4 01:38:04 2014
From: cshrem at gmail.com (Charlie 'Charles' Shrem)
Date: Tue, 3 Jun 2014 21:38:04 -0400
Subject: [Bitcoin-development] Lets discuss what to do if SHA256d is
 actually broken
In-Reply-To: <87iooi40ws.fsf@rustcorp.com.au>
References: <2341954.NpNStk60qp@1337h4x0r> <201406030452.40520.luke@dashjr.org>
	<87iooi40ws.fsf@rustcorp.com.au>
Message-ID: <CAC787aM3bcfcw8zQQbNYXqxASFarW-z9wqiePmb6rv0RiiTdeA@mail.gmail.com>

Hey Rusty,

This is intriguing, do you have a writeup somewhere I can read more about ?

Thanks,

Charlie

CharlieShrem.com | *Please **encrypt messages with my PGP key
<http://charlieshrem.com/contact/>*


On Tue, Jun 3, 2014 at 8:45 AM, Rusty Russell <rusty at rustcorp.com.au> wrote:

> Luke Dashjr <luke at dashjr.org> writes:
> > On Tuesday, June 03, 2014 4:29:55 AM xor wrote:
> >> Hi,
> >>
> >> I thought a lot about the worst case scenario of SHA256d being broken
> in a
> >> way which could be abused to
> >> A) reduce the work of mining a block by some significant amount
> >> B) reduce the work of mining a block to zero, i.e. allow instant mining.
> >
> > C) fabricate past blocks entirely.
> >
> > If SHA256d is broken, Bitcoin as it is fails entirely.
>
> I normally just lurk, but I looked at this issue last year, so thought
> I'd chime in.  I never finished my paper though...
>
> In the event of an *anticipated* weakening of SHA256, a gradual
> transition is possible which avoids massive financial disruption.
>
> My scheme used a similar solve-SHA256-then-solve-SHA3 (requiring an
> extra nonce for the SHA3), with the difficulty of SHA256 ramping down
> and SHA3 ramping up over the transition (eg for a 1 year transition,
> start with 25/26 SHA2 and 1/26 SHA3).
>
> The hard part is to estimate what the SHA3 difficulty should be over
> time.  My solution was to adjust only the SHA3 target on every *second*
> difficulty change (otherwise assume that SHA2 and SHA3 have equally
> changed rate and adjust targets on both).
>
> This works reasonably well even if the initial SHA3 difficulty is way
> off, and also if SHA2 breaks completely halfway through the transition.
>
> I can provide more details if anyone is interested.
>
> Cheers,
> Rusty.
>
>
> ------------------------------------------------------------------------------
> Learn Graph Databases - Download FREE O'Reilly Book
> "Graph Databases" is the definitive new guide to graph databases and their
> applications. Written by three acclaimed leaders in the field,
> this first edition is now available. Download your free book today!
> http://p.sf.net/sfu/NeoTech
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140603/1b65e2fd/attachment.html>

From laanwj at gmail.com  Wed Jun  4 06:37:52 2014
From: laanwj at gmail.com (Wladimir)
Date: Wed, 4 Jun 2014 08:37:52 +0200
Subject: [Bitcoin-development] Bitcoin Core 0.9.2 release candidate 1 is
	available
Message-ID: <CA+s+GJDSK0h62Biw8TfnR2GMDcFX8SYbGheaov8hZ_09ATdh6w@mail.gmail.com>

Bitcoin Core version 0.9.2rc1 is now available from:

  https://bitcoin.org/bin/0.9.2/test

This is a release candidate for a new minor version release, bringing
mostly bug fixes and some minor improvements.
Release candidates are wide-scale testing releases, so use with care.
Non-technical users may want to wait until 0.9.2 final.

Please report bugs using the issue tracker at github:

  https://github.com/bitcoin/bitcoin/issues

Upgrading and downgrading
==========================

How to Upgrade
--------------

If you are running an older version, shut it down. Wait until it has completely
shut down (which might take a few minutes for older versions), then run the
installer (on Windows) or just copy over /Applications/Bitcoin-Qt (on Mac) or
bitcoind/bitcoin-qt (on Linux).

If you are upgrading from version 0.7.2 or earlier, the first time you run
0.9.0 your blockchain files will be re-indexed, which will take anywhere from
30 minutes to several hours, depending on the speed of your machine.

Downgrading warnings
--------------------

The 'chainstate' for this release is not always compatible with previous
releases, so if you run 0.9.x and then decide to switch back to a
0.8.x release you might get a blockchain validation error when starting the
old release (due to 'pruned outputs' being omitted from the index of
unspent transaction outputs).

Running the old release with the -reindex option will rebuild the chainstate
data structures and correct the problem.

Also, the first time you run a 0.8.x release on a 0.9 wallet it will rescan
the blockchain for missing spent coins, which will take a long time (tens
of minutes on a typical machine).

Important changes
==================

Gitian OSX build
-----------------

The deterministic build system that was already used for Windows and Linux
builds is now used for OSX as well. Although the resulting executables have
been tested quite a bit, there could be possible regressions. Be sure to report
these on the Github bug tracker mentioned above.

Compatibility of Linux build
-----------------------------

For Linux we now build against Qt 4.6, and filter the symbols for
libstdc++ and glibc.
This brings back compatibility with

- Debian 6+ / Tails
- Ubuntu 10.04
- CentOS 6.5

0.9.2 Release notes
=======================

RPC:
- Add `getwalletinfo`, `getblockchaininfo` and `getnetworkinfo` calls
(will replace hodge-podge `getinfo` at some point)
- Add a `relayfee` field to `getnetworkinfo`
- Fix RPC related shutdown hangs and leaks
- Always show syncnode in `getpeerinfo`
- `sendrawtransaction`: report the reject code and reason, and make it
possible to re-send transactions that are already in the mempool
- `getmininginfo` show right genproclimit

Command-line options:
- Fix `-printblocktree` output
- Show error message if ReadConfigFile fails

Block-chain handling and storage:
- Fix for GetBlockValue() after block 13,440,000 (BIP42)
- Upgrade leveldb to 1.17

Protocol and network code:
- Per-peer block download tracking and stalled download detection
- Add new DNS seed from bitnodes.io
- Prevent socket leak in ThreadSocketHandler and correct some proxy
related socket leaks

Wallet:
- Make GetAvailableCredit run GetHash() only once per transaction
(performance improvement)
- Lower paytxfee warning threshold from 0.25 BTC to 0.01 BTC
- Fix importwallet nTimeFirstKey (trigger necessary rescans)
- Log BerkeleyDB version at startup

Build system:
- Add OSX build descriptors to gitian
- Fix explicit --disable-qt-dbus
- Don't require db_cxx.h when compiling with wallet disabled and GUI enabled
- Improve missing boost error reporting
- Upgrade miniupnpc version to 1.9
- gitian-linux: --enable-glibc-back-compat for binary compatibility
with old distributions
- gitian: don't export any symbols from executable
- gitian: build against Qt 4.6
- devtools: add script to check symbols from Linux gitian executables
- Remove build-time no-IPv6 setting

GUI:
- Fix various coin control visual issues
- Show number of in/out connections in debug console
- Show weeks as well as years behind for long timespans behind
- Enable and disable the Show and Remove buttons for requested
payments history based on whether any entry is selected.
- Show also value for options overridden on command line in options dialog
- Fill in label from address book also for URIs
- Fixes feel when resizing the last column on tables (issue #2862)
- Fix ESC in disablewallet mode
- Add expert section to wallet tab in optionsdialog
- Do proper boost::path conversion (fixes unicode in datadir)
- Only override -datadir if different from the default (fixes -datadir
in config file)
- Show rescan progress at start-up
- Show importwallet progress
- Get required locks upfront in polling functions (avoids hanging on locks)
- Catch Windows shutdown events while client is running
- Optionally add third party links to transaction context menu
- Check for !pixmap() before trying to export QR code (avoids crashes
when no QR code could be generated)
- Fix "Start bitcoin on system login"

Miscellaneous:

- Replace non-threadsafe C functions (gmtime, strerror and setlocale)
- Add missing cs_main and wallet locks
- Avoid exception at startup when system locale not recognized
- Changed bitrpc.py's raw_input to getpass for passwords to conceal
characters during command line input
- devtools: add a script to fetch and postprocess translations

Credits
--------

Thanks to everyone who contributed to this release:

- Addy Yeow
- Altoidnerd
- Andrea D'Amore
- Andreas Schildbach
- Bardi Harborow
- Brandon Dahler
- Bryan Bishop
- Chris Beams
- Christian von Roques
- Cory Fields
- Cozz Lovan
- daniel
- Daniel Newton
- David A. Harding
- ditto-b
- duanemoody
- Eric S. Bullington
- Fabian Raetz
- Gavin Andresen
- Gregory Maxwell
- gubatron
- Haakon Nilsen
- harry
- Hector Jusforgues
- Isidoro Ghezzi
- Jeff Garzik
- Johnathan Corgan
- jtimon
- Kamil Domanski
- langerhans
- Luke Dashjr
- Manuel Araoz
- Mark Friedenbach
- Matt Corallo
- Matthew Bogosian
- Meeh
- Michael Ford
- Michagogo
- Mikael Wikman
- Mike Hearn
- olalonde
- paveljanik
- peryaudo
- Philip Kaufmann
- philsong
- Pieter Wuille
- R E Broadley
- richierichrawr
- Rune K. Svendsen
- rxl
- shshshsh
- Simon de la Rouviere
- Stuart Cardall
- super3
- Telepatheic
- Thomas Zander
- Torstein Huseb??
- Warren Togami
- Wladimir J. van der Laan
- Yoichi Hirai



From laanwj at gmail.com  Wed Jun  4 08:10:00 2014
From: laanwj at gmail.com (Wladimir)
Date: Wed, 4 Jun 2014 10:10:00 +0200
Subject: [Bitcoin-development] Bitcoin Core 0.9.2 release candidate 1 is
	available
In-Reply-To: <CA+s+GJDSK0h62Biw8TfnR2GMDcFX8SYbGheaov8hZ_09ATdh6w@mail.gmail.com>
References: <CA+s+GJDSK0h62Biw8TfnR2GMDcFX8SYbGheaov8hZ_09ATdh6w@mail.gmail.com>
Message-ID: <CA+s+GJC_HHJJFLDxOQ_cvb5nKX0Gn-SgE0cdyB0NYLjU-qK0-w@mail.gmail.com>

On Wed, Jun 4, 2014 at 8:37 AM, Wladimir <laanwj at gmail.com> wrote:
> Bitcoin Core version 0.9.2rc1 is now available from:
>
>   https://bitcoin.org/bin/0.9.2/test
>
> This is a release candidate for a new minor version release, bringing
> mostly bug fixes and some minor improvements.

Almost forgot to mention: new translations from Transifex,

Much thanks to everyone who submitted translations there as well (I
don't have a list handy right now)!

Wladimir



From mike at plan99.net  Wed Jun  4 09:51:31 2014
From: mike at plan99.net (Mike Hearn)
Date: Wed, 4 Jun 2014 17:51:31 +0800
Subject: [Bitcoin-development] # error "Bitcoin cannot be compiled
 without assertions." <<<<NOT
In-Reply-To: <1401822421.27942.YahooMailNeo@web124505.mail.ne1.yahoo.com>
References: <1401822421.27942.YahooMailNeo@web124505.mail.ne1.yahoo.com>
Message-ID: <CANEZrP18nf0oK6fbnE59opXxfMdwiOOu4v99iGyXyGo_7NLuYA@mail.gmail.com>

Hi Ron,

FYI your mail is being spamfoldered due to Yahoo's DMARC policy and the
brokenness of the SF.net mailing list software. I would not expect to get
replies reliably whilst this is the case. I think we should move away from
SF.net for hosting mailing lists personally, because it's this list that's
at fault not Yahoo, but until then you may wish to send to the list with a
different email address.

As to your question,

assert() should have *no* side effects, that is the problem.
>
> See
>
> http://books.google.com/books?id=L5ZbzVnpkXAC&pg=PA72&lpg=PA72&dq=Gotcha+%2328+Side+Effects&source=bl&ots=Rn15TlPmje&sig=tymHqta0aSANwaM2GaXC-1Di_tk&hl=en&sa=X&ei=uVKNU47fCcvTsAT6goHIBA&ved=0CCAQ6AEwAA#v=onepage&q=Gotcha%20%2328%20Side%20Effects&f=false
>
> a great book, BTW.  Everyone who thinks they know what they are doing when
> they write C++ should read this book!  They will realize that they don't
> know Jack [image: Roll Eyes]
>
> Why weren't these and all the other examples of amateur, i.e.,
> non-professional, software fixed way back in version 0.3.0 in 2010, before
> any more releases were done?  And why were these and other sub-standard
> coding practices continued and expanded in later releases, right up until
> the present?
>

Back in 2010 most code was still being written by Satoshi so perhaps you
should ask him. Regardless, it's very common for professional codebases to
require assertions be enabled. For example the entire Google C++ codebase
uses always-on assertions that have side effects liberally: it's convenient
and safe, when you have the guarantee the code will always run, and the
performance benefits of compiling out assertions are usually non-existent.

So for this reason I think Bitcoin Core currently will fail to build if
assertions are disabled, and that seems OK to me.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140604/f6f1ec3a/attachment.html>

From laanwj at gmail.com  Wed Jun  4 10:12:29 2014
From: laanwj at gmail.com (Wladimir)
Date: Wed, 4 Jun 2014 12:12:29 +0200
Subject: [Bitcoin-development] # error "Bitcoin cannot be compiled
 without assertions." <<<<NOT
In-Reply-To: <CANEZrP18nf0oK6fbnE59opXxfMdwiOOu4v99iGyXyGo_7NLuYA@mail.gmail.com>
References: <1401822421.27942.YahooMailNeo@web124505.mail.ne1.yahoo.com>
	<CANEZrP18nf0oK6fbnE59opXxfMdwiOOu4v99iGyXyGo_7NLuYA@mail.gmail.com>
Message-ID: <CA+s+GJAmXmsivqg6R2HbiRC2-xc2sHSbsA-auYN8V0LCLS1d3g@mail.gmail.com>

>
>
>  assert() should have *no* side effects, that is the problem.
>>
>
I'm pretty sure that all the side effects of assertions have been removed
before 0.9.0.

However, the assertion checks are extremely important to the proper sanity
of the client and network, so IMHO it's fair to still require building with
them enabled.

Wladimir
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140604/49578ca3/attachment.html>

From gmaxwell at gmail.com  Wed Jun  4 10:15:04 2014
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Wed, 4 Jun 2014 03:15:04 -0700
Subject: [Bitcoin-development] # error "Bitcoin cannot be compiled
 without assertions." <<<<NOT
In-Reply-To: <CANEZrP18nf0oK6fbnE59opXxfMdwiOOu4v99iGyXyGo_7NLuYA@mail.gmail.com>
References: <1401822421.27942.YahooMailNeo@web124505.mail.ne1.yahoo.com>
	<CANEZrP18nf0oK6fbnE59opXxfMdwiOOu4v99iGyXyGo_7NLuYA@mail.gmail.com>
Message-ID: <CAAS2fgTM30oFLGpkCwqM5Wf-Crmz5s05X-uWXAiGy9u43nbKvQ@mail.gmail.com>

On Wed, Jun 4, 2014 at 2:51 AM, Mike Hearn <mike at plan99.net> wrote:

> Hi Ron,
>
> FYI your mail is being spamfoldered due to Yahoo's DMARC policy and the
> brokenness of the SF.net mailing list software. I would not expect to get
> replies reliably whilst this is the case. I think we should move away from
> SF.net for hosting mailing lists personally, because it's this list that's
> at fault not Yahoo, but until then you may wish to send to the list with a
> different email address.
>
> As to your question,
>
>  assert() should have *no* side effects, that is the problem.
>>
>> See
>>
>> http://books.google.com/books?id=L5ZbzVnpkXAC&pg=PA72&lpg=PA72&dq=Gotcha+%2328+Side+Effects&source=bl&ots=Rn15TlPmje&sig=tymHqta0aSANwaM2GaXC-1Di_tk&hl=en&sa=X&ei=uVKNU47fCcvTsAT6goHIBA&ved=0CCAQ6AEwAA#v=onepage&q=Gotcha%20%2328%20Side%20Effects&f=false
>>
>> a great book, BTW.  Everyone who thinks they know what they are doing
>> when they write C++ should read this book!  They will realize that they
>> don't know Jack [image: Roll Eyes]
>>
>> Why weren't these and all the other examples of amateur, i.e.,
>> non-professional, software fixed way back in version 0.3.0 in 2010, before
>> any more releases were done?  And why were these and other sub-standard
>> coding practices continued and expanded in later releases, right up until
>> the present?
>>
>
> Back in 2010 most code was still being written by Satoshi so perhaps you
> should ask him. Regardless, it's very common for professional codebases to
> require assertions be enabled. For example the entire Google C++ codebase
> uses always-on assertions that have side effects liberally: it's convenient
> and safe, when you have the guarantee the code will always run, and the
> performance benefits of compiling out assertions are usually non-existent.
>
> So for this reason I think Bitcoin Core currently will fail to build if
> assertions are disabled, and that seems OK to me.
>

As a matter of procedure we do not use assertions with side effects? the
codebase did at one point, but have cleaned them up.  In an abundance of
caution we also made it refuse to compile without assertions enabled: A
decision who's wisdom was clearly demonstrated when not long after, some
additional side-effect having assert was contributed. In the real world
errors happen here and there, and making robust software involves defense
in depth.

Considering the normal criticality of the software it should always be with
the assertions. Without them is an untested configuration.  It would
probably be superior to use our own assertion macros (for one, they can
give some better reporting?) that don't have the baggage ordinary
assertions have, but as a the codebase is a production thing, making larger
changes all at once to satisfy aesthetics would be unwise... simply
refusing to compile in that untested, unsupported configuration is prudent,
for the time being.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140604/6b1862c6/attachment.html>

From mike at plan99.net  Wed Jun  4 10:20:43 2014
From: mike at plan99.net (Mike Hearn)
Date: Wed, 4 Jun 2014 18:20:43 +0800
Subject: [Bitcoin-development] # error "Bitcoin cannot be compiled
 without assertions." <<<<NOT
In-Reply-To: <CAAS2fgTM30oFLGpkCwqM5Wf-Crmz5s05X-uWXAiGy9u43nbKvQ@mail.gmail.com>
References: <1401822421.27942.YahooMailNeo@web124505.mail.ne1.yahoo.com>
	<CANEZrP18nf0oK6fbnE59opXxfMdwiOOu4v99iGyXyGo_7NLuYA@mail.gmail.com>
	<CAAS2fgTM30oFLGpkCwqM5Wf-Crmz5s05X-uWXAiGy9u43nbKvQ@mail.gmail.com>
Message-ID: <CANEZrP075mWzMEaU72eoYqktrc2VcbyD_Fhb7N0CzvWoAgMYcw@mail.gmail.com>

>
> As a matter of procedure we do not use assertions with side effects? the
> codebase did at one point, but have cleaned them up.  In an abundance of
> caution we also made it refuse to compile without assertions enabled: A
> decision who's wisdom was clearly demonstrated when not long after, some
> additional side-effect having assert was contributed. In the real world
> errors happen here and there, and making robust software involves defense
> in depth.
>

I think this class of errors could be removed entirely by just saying it's
OK for assertions to have side effects and requiring them to be enabled, as
is currently done.

The glog library:

http://google-glog.googlecode.com/svn/trunk/doc/glog.html

provides CHECK macros that print stack traces when they fail. Using them
would also be good.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140604/e90f6937/attachment.html>

From gmaxwell at gmail.com  Wed Jun  4 10:31:24 2014
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Wed, 4 Jun 2014 03:31:24 -0700
Subject: [Bitcoin-development] # error "Bitcoin cannot be compiled
 without assertions." <<<<NOT
In-Reply-To: <CANEZrP075mWzMEaU72eoYqktrc2VcbyD_Fhb7N0CzvWoAgMYcw@mail.gmail.com>
References: <1401822421.27942.YahooMailNeo@web124505.mail.ne1.yahoo.com>
	<CANEZrP18nf0oK6fbnE59opXxfMdwiOOu4v99iGyXyGo_7NLuYA@mail.gmail.com>
	<CAAS2fgTM30oFLGpkCwqM5Wf-Crmz5s05X-uWXAiGy9u43nbKvQ@mail.gmail.com>
	<CANEZrP075mWzMEaU72eoYqktrc2VcbyD_Fhb7N0CzvWoAgMYcw@mail.gmail.com>
Message-ID: <CAAS2fgQZT2y7CQBM8PZe5d5RCB-2L__+AOx4uPEE8jdR2GYUQg@mail.gmail.com>

On Wed, Jun 4, 2014 at 3:20 AM, Mike Hearn <mike at plan99.net> wrote:
>> As a matter of procedure we do not use assertions with side effects? the
>> codebase did at one point, but have cleaned them up.  In an abundance of
>> caution we also made it refuse to compile without assertions enabled: A
>> decision who's wisdom was clearly demonstrated when not long after, some
>> additional side-effect having assert was contributed. In the real world
>> errors happen here and there, and making robust software involves defense in
>> depth.
>
>
> I think this class of errors could be removed entirely by just saying it's
> OK for assertions to have side effects and requiring them to be enabled, as
> is currently done.
>
> The glog library:
>
> http://google-glog.googlecode.com/svn/trunk/doc/glog.html
>
> provides CHECK macros that print stack traces when they fail. Using them
> would also be good.

Yes... it takes only about 10 lines of code to have a nicer assert
than the posix one, all my own software does... and with the noreturn
attribute on the failure path it behaves the same for most static
analysis tools as a regular assert does. I would have just dropped one
in, but an IFDEF seemed more prudent at the time.



From s9jafroe at stud.uni-saarland.de  Wed Jun  4 10:42:37 2014
From: s9jafroe at stud.uni-saarland.de (Jannis Froese)
Date: Wed, 04 Jun 2014 12:42:37 +0200
Subject: [Bitcoin-development] # error "Bitcoin cannot be compiled
 without assertions." <<<<NOT
In-Reply-To: <CAAS2fgTM30oFLGpkCwqM5Wf-Crmz5s05X-uWXAiGy9u43nbKvQ@mail.gmail.com>
References: <1401822421.27942.YahooMailNeo@web124505.mail.ne1.yahoo.com>	<CANEZrP18nf0oK6fbnE59opXxfMdwiOOu4v99iGyXyGo_7NLuYA@mail.gmail.com>
	<CAAS2fgTM30oFLGpkCwqM5Wf-Crmz5s05X-uWXAiGy9u43nbKvQ@mail.gmail.com>
Message-ID: <538EF81D.9060301@stud.uni-saarland.de>

There are reasons to have assertions enabled by default in software like
Bitcoin Core, where incorrect behaviour can be costly. But this comes at
a prize: our assertions have to satisfy certain performance
requirements. It's no longer possible to do expensive, redundant checks
in performance critical code, which is one of the main advantages of
asserts. Imho, asserts are not intended for small range checks etc, but
are meant for checks that a hash hasn't changed, that a tree structure
is still a tree, that data is still sorted, or that data structures are
in sync.

I think most concerns about the current use of asserts would be resolved
if the currently used asserts would be changed to a nicer definition
which is independent of NDEBUG, and a second class of debugging asserts
would be introduced, which is exclusively for expensive, redundant
checks and is disabled by NDEBUG.



Am 2014-06-04 12:15, schrieb Gregory Maxwell:
> On Wed, Jun 4, 2014 at 2:51 AM, Mike Hearn <mike at plan99.net
> <mailto:mike at plan99.net>> wrote:
>
>     Hi Ron,
>
>     FYI your mail is being spamfoldered due to Yahoo's DMARC policy
>     and the brokenness of the SF.net mailing list software. I would
>     not expect to get replies reliably whilst this is the case. I
>     think we should move away from SF.net for hosting mailing lists
>     personally, because it's this list that's at fault not Yahoo, but
>     until then you may wish to send to the list with a different email
>     address.
>
>     As to your question,
>
>         assert() should have *no* side effects, that is the problem.
>
>         See
>         http://books.google.com/books?id=L5ZbzVnpkXAC&pg=PA72&lpg=PA72&dq=Gotcha+%2328+Side+Effects&source=bl&ots=Rn15TlPmje&sig=tymHqta0aSANwaM2GaXC-1Di_tk&hl=en&sa=X&ei=uVKNU47fCcvTsAT6goHIBA&ved=0CCAQ6AEwAA#v=onepage&q=Gotcha%20%2328%20Side%20Effects&f=false
>
>         a great book, BTW.  Everyone who thinks they know what they
>         are doing when they write C++ should read this book!  They
>         will realize that they don't know Jack Roll Eyes
>
>         Why weren't these and all the other examples of amateur, i.e.,
>         non-professional, software fixed way back in version 0.3.0 in
>         2010, before any more releases were done?  And why were these
>         and other sub-standard coding practices continued and expanded
>         in later releases, right up until the present?
>
>
>     Back in 2010 most code was still being written by Satoshi so
>     perhaps you should ask him. Regardless, it's very common for
>     professional codebases to require assertions be enabled. For
>     example the entire Google C++ codebase uses always-on assertions
>     that have side effects liberally: it's convenient and safe, when
>     you have the guarantee the code will always run, and the
>     performance benefits of compiling out assertions are usually
>     non-existent.
>
>     So for this reason I think Bitcoin Core currently will fail to
>     build if assertions are disabled, and that seems OK to me.
>
>
> As a matter of procedure we do not use assertions with side effects---
> the codebase did at one point, but have cleaned them up.  In an
> abundance of caution we also made it refuse to compile without
> assertions enabled: A decision who's wisdom was clearly demonstrated
> when not long after, some additional side-effect having assert was
> contributed. In the real world errors happen here and there, and
> making robust software involves defense in depth.
>
> Considering the normal criticality of the software it should always be
> with the assertions. Without them is an untested configuration.  It
> would probably be superior to use our own assertion macros (for one,
> they can give some better reporting...) that don't have the baggage
> ordinary assertions have, but as a the codebase is a production thing,
> making larger changes all at once to satisfy aesthetics would be
> unwise... simply refusing to compile in that untested, unsupported
> configuration is prudent, for the time being.
>
>
>
> ------------------------------------------------------------------------------
> Learn Graph Databases - Download FREE O'Reilly Book
> "Graph Databases" is the definitive new guide to graph databases and their 
> applications. Written by three acclaimed leaders in the field, 
> this first edition is now available. Download your free book today!
> http://p.sf.net/sfu/NeoTech
>
>
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140604/602a213b/attachment.html>

From mike at plan99.net  Wed Jun  4 10:51:15 2014
From: mike at plan99.net (Mike Hearn)
Date: Wed, 4 Jun 2014 18:51:15 +0800
Subject: [Bitcoin-development] # error "Bitcoin cannot be compiled
 without assertions." <<<<NOT
In-Reply-To: <538EF81D.9060301@stud.uni-saarland.de>
References: <1401822421.27942.YahooMailNeo@web124505.mail.ne1.yahoo.com>
	<CANEZrP18nf0oK6fbnE59opXxfMdwiOOu4v99iGyXyGo_7NLuYA@mail.gmail.com>
	<CAAS2fgTM30oFLGpkCwqM5Wf-Crmz5s05X-uWXAiGy9u43nbKvQ@mail.gmail.com>
	<538EF81D.9060301@stud.uni-saarland.de>
Message-ID: <CANEZrP1nEwro7ZSATEW3-TkRyF+gxBbW9D8KkY=VaQL8kxPSUg@mail.gmail.com>

Currently expensive checks are guarded with command line flags. It'd be
nice if there could be one unified command line flag -expensivechecks that
subsumes -checkmempool and so on.


On Wed, Jun 4, 2014 at 6:42 PM, Jannis Froese <s9jafroe at stud.uni-saarland.de
> wrote:

>  There are reasons to have assertions enabled by default in software like
> Bitcoin Core, where incorrect behaviour can be costly. But this comes at a
> prize: our assertions have to satisfy certain performance requirements.
> It's no longer possible to do expensive, redundant checks in performance
> critical code, which is one of the main advantages of asserts. Imho,
> asserts are not intended for small range checks etc, but are meant for
> checks that a hash hasn't changed, that a tree structure is still a tree,
> that data is still sorted, or that data structures are in sync.
>
> I think most concerns about the current use of asserts would be resolved
> if the currently used asserts would be changed to a nicer definition which
> is independent of NDEBUG, and a second class of debugging asserts would be
> introduced, which is exclusively for expensive, redundant checks and is
> disabled by NDEBUG.
>
>
>
> Am 2014-06-04 12:15, schrieb Gregory Maxwell:
>
> On Wed, Jun 4, 2014 at 2:51 AM, Mike Hearn <mike at plan99.net> wrote:
>
>> Hi Ron,
>>
>>  FYI your mail is being spamfoldered due to Yahoo's DMARC policy and the
>> brokenness of the SF.net mailing list software. I would not expect to get
>> replies reliably whilst this is the case. I think we should move away from
>> SF.net for hosting mailing lists personally, because it's this list that's
>> at fault not Yahoo, but until then you may wish to send to the list with a
>> different email address.
>>
>>  As to your question,
>>
>>     assert() should have *no* side effects, that is the problem.
>>>
>>> See
>>>
>>> http://books.google.com/books?id=L5ZbzVnpkXAC&pg=PA72&lpg=PA72&dq=Gotcha+%2328+Side+Effects&source=bl&ots=Rn15TlPmje&sig=tymHqta0aSANwaM2GaXC-1Di_tk&hl=en&sa=X&ei=uVKNU47fCcvTsAT6goHIBA&ved=0CCAQ6AEwAA#v=onepage&q=Gotcha%20%2328%20Side%20Effects&f=false
>>>
>>> a great book, BTW.  Everyone who thinks they know what they are doing
>>> when they write C++ should read this book!  They will realize that they
>>> don't know Jack [image: Roll Eyes]
>>>
>>>  Why weren't these and all the other examples of amateur, i.e.,
>>> non-professional, software fixed way back in version 0.3.0 in 2010, before
>>> any more releases were done?  And why were these and other sub-standard
>>> coding practices continued and expanded in later releases, right up until
>>> the present?
>>>
>>
>>  Back in 2010 most code was still being written by Satoshi so perhaps
>> you should ask him. Regardless, it's very common for professional codebases
>> to require assertions be enabled. For example the entire Google C++
>> codebase uses always-on assertions that have side effects liberally: it's
>> convenient and safe, when you have the guarantee the code will always run,
>> and the performance benefits of compiling out assertions are usually
>> non-existent.
>>
>>  So for this reason I think Bitcoin Core currently will fail to build if
>> assertions are disabled, and that seems OK to me.
>>
>
>  As a matter of procedure we do not use assertions with side effects? the
> codebase did at one point, but have cleaned them up.  In an abundance of
> caution we also made it refuse to compile without assertions enabled: A
> decision who's wisdom was clearly demonstrated when not long after, some
> additional side-effect having assert was contributed. In the real world
> errors happen here and there, and making robust software involves defense
> in depth.
>
>  Considering the normal criticality of the software it should always be
> with the assertions. Without them is an untested configuration.  It would
> probably be superior to use our own assertion macros (for one, they can
> give some better reporting?) that don't have the baggage ordinary
> assertions have, but as a the codebase is a production thing, making larger
> changes all at once to satisfy aesthetics would be unwise... simply
> refusing to compile in that untested, unsupported configuration is prudent,
> for the time being.
>
>
>
> ------------------------------------------------------------------------------
> Learn Graph Databases - Download FREE O'Reilly Book
> "Graph Databases" is the definitive new guide to graph databases and their
> applications. Written by three acclaimed leaders in the field,
> this first edition is now available. Download your free book today!http://p.sf.net/sfu/NeoTech
>
>
>
> _______________________________________________
> Bitcoin-development mailing listBitcoin-development at lists.sourceforge.nethttps://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
>
>
> ------------------------------------------------------------------------------
> Learn Graph Databases - Download FREE O'Reilly Book
> "Graph Databases" is the definitive new guide to graph databases and their
> applications. Written by three acclaimed leaders in the field,
> this first edition is now available. Download your free book today!
> http://p.sf.net/sfu/NeoTech
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140604/0547c1d3/attachment.html>

From laanwj at gmail.com  Wed Jun  4 12:13:15 2014
From: laanwj at gmail.com (Wladimir)
Date: Wed, 4 Jun 2014 14:13:15 +0200
Subject: [Bitcoin-development] # error "Bitcoin cannot be compiled
 without assertions." <<<<NOT
In-Reply-To: <538EF81D.9060301@stud.uni-saarland.de>
References: <1401822421.27942.YahooMailNeo@web124505.mail.ne1.yahoo.com>
	<CANEZrP18nf0oK6fbnE59opXxfMdwiOOu4v99iGyXyGo_7NLuYA@mail.gmail.com>
	<CAAS2fgTM30oFLGpkCwqM5Wf-Crmz5s05X-uWXAiGy9u43nbKvQ@mail.gmail.com>
	<538EF81D.9060301@stud.uni-saarland.de>
Message-ID: <CA+s+GJAJUDTU6T33-y6i3Sj6=S4D2B=Sjo5neo3Pg7oh37kGtQ@mail.gmail.com>

On Wed, Jun 4, 2014 at 12:42 PM, Jannis Froese <
s9jafroe at stud.uni-saarland.de> wrote:

>  I think most concerns about the current use of asserts would be resolved
> if the currently used asserts would be changed to a nicer definition which
> is independent of NDEBUG, and a second class of debugging asserts would be
> introduced, which is exclusively for expensive, redundant checks and is
> disabled by NDEBUG.
>

Sounds good to me.

Wladimir
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140604/cc5f8d4e/attachment.html>

From jgarzik at bitpay.com  Wed Jun  4 12:15:08 2014
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Wed, 4 Jun 2014 08:15:08 -0400
Subject: [Bitcoin-development] # error "Bitcoin cannot be compiled
 without assertions." <<<<NOT
In-Reply-To: <CANEZrP075mWzMEaU72eoYqktrc2VcbyD_Fhb7N0CzvWoAgMYcw@mail.gmail.com>
References: <1401822421.27942.YahooMailNeo@web124505.mail.ne1.yahoo.com>
	<CANEZrP18nf0oK6fbnE59opXxfMdwiOOu4v99iGyXyGo_7NLuYA@mail.gmail.com>
	<CAAS2fgTM30oFLGpkCwqM5Wf-Crmz5s05X-uWXAiGy9u43nbKvQ@mail.gmail.com>
	<CANEZrP075mWzMEaU72eoYqktrc2VcbyD_Fhb7N0CzvWoAgMYcw@mail.gmail.com>
Message-ID: <CAJHLa0PTTHfvd-1BR5s2k-4UW6V6qLEyAbF2YSRxOOSjtH9+_Q@mail.gmail.com>

Yes, check macros like that can be useful.

I like the kernel's policy, which parallels our direction:
1) Enable and use lightweight assertions for most users.
2) No assertions with side effects

If you want to compile them out, that's fine, but they should always
be present in production software.



On Wed, Jun 4, 2014 at 6:20 AM, Mike Hearn <mike at plan99.net> wrote:
>> As a matter of procedure we do not use assertions with side effects? the
>> codebase did at one point, but have cleaned them up.  In an abundance of
>> caution we also made it refuse to compile without assertions enabled: A
>> decision who's wisdom was clearly demonstrated when not long after, some
>> additional side-effect having assert was contributed. In the real world
>> errors happen here and there, and making robust software involves defense in
>> depth.
>
>
> I think this class of errors could be removed entirely by just saying it's
> OK for assertions to have side effects and requiring them to be enabled, as
> is currently done.
>
> The glog library:
>
> http://google-glog.googlecode.com/svn/trunk/doc/glog.html
>
> provides CHECK macros that print stack traces when they fail. Using them
> would also be good.
>
> ------------------------------------------------------------------------------
> Learn Graph Databases - Download FREE O'Reilly Book
> "Graph Databases" is the definitive new guide to graph databases and their
> applications. Written by three acclaimed leaders in the field,
> this first edition is now available. Download your free book today!
> http://p.sf.net/sfu/NeoTech
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>



-- 
Jeff Garzik
Bitcoin core developer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From pete at petertodd.org  Wed Jun  4 12:54:50 2014
From: pete at petertodd.org (Peter Todd)
Date: Wed, 4 Jun 2014 08:54:50 -0400
Subject: [Bitcoin-development] Timelock: time-release encryption
	incentivised by Bitcoins
Message-ID: <20140604125450.GA11605@savin>

Decided to take a break yesterday and write some code...


Timelock
========

Create a secret key that can be decrypted in a known amount of time
using parallel-serial hash chains. The creator can compute the timelock
in parallel, taking advantage of the large amount of cheap parallelism
available today, while others are forced to compute it serially,
constrained by the lack of scalar performance growth.

The chains are constructed such that Bitcoin addresses can be derived
from them and bounties placed, incentivizing third-parties to crack the
timelocks. This gives us a valuable chance to incentivize others to push
the envelope of scalar performance - important knowledge if we are going
to have any hope of knowing how soon our timelocked secrets will
actually be revealed! The Bitcoin secret keys and addresses are
constructed from the chains as follows:

    iv -> <chain> -> privkey -> pubkey -> secret -> hashed_secret

    secret        = SHA256(pubkey)
    hashed_secret = RIPEMD160(secret)

Unlocking a given chain starting from the initialization vector gives
the person doing the work the private key, giving them an exclusive
opportunity to collect the bounty. Collecting that bounty forces them to
reveal the pubkey, from which the secret is derived. The hashed_secret
is then just a standard Bitcoin address, letting everyone see how large
the bounty is for unlocking the timelock.

Only a single algorithm - SHA256 - is supported by design: timelock
encryption works best if we're all on an even playing field.

Sourcecode: https://github.com/petertodd/timelock

Credit goes to Amir Taaki for helping develop the idea.


To make things interesting I've made a ~256 hour timelock with 32
chains, 8 hours per chain. The addresses associated are as follows:

1ERvMr5J8FETF7zj4QM98u8ZANaL1o9XGZ
18h7LwKpd9c6u8zJka3vMCASa8BfbiZFd4
1DBJDp57QmbigLEbUsFeqJT3mkArGzH3gv
1C1d6Tj7mZADurfj5yJ64p5BeRstquk7pu
1FsH58jnq5Kc6D7hb7vmUhjh8fwnijiWss
1PDwPYStrrkKpGtV2zX71XCDYL3E2g3KM7
1BF6oYLeTG7WxNWJjC8p4SHz62q7vgZhXX
1DxFiHr9ehVvi8JR2Cc5pcD4DEURUeFFda
1NKg3buX5BzhYgSY6Yvws9kMqZ6F1xnneD
1Kptov9sgDqQcavz1rVsuQvfi8PcQcL4rc
1P9k1HEfe3Z8LaiFejqsuDLjWXPZk1coDL
1Mw25mU89Wp2b9zyMCSnjAVQ7x4AVWx3sf
1B8gdbd1StpVnV99Few1ae1XXfKH6iry1D
13bisx8T42CzmFA2oAm1evEytcijrHJ2iR
1DyR6aNSbrJCzwqdeo9UN5obGR9L73Y2sa
1Fx7j3gU3q7bQdoni2zZhGQx7BnLt8xNeK
19q541m17opVcAxwisem7ak7YPuSpdS3Uj
1DYWzBpLBDd7fpta2JYLf7QZ7nAYiZiamR
13sZYBMdyzffwvCkzhGTu49pCGGR5C5B9v
1DFSjViJLTNhNj5wvsqRwoqPyR9UTAzLgW
13Zi9eawpkzZwRC8RgHJausQmUS4ECBzho
1BCQ5GVkAEzNYZ5WroAwXSspgpYfhQrojd
1K1gbE7qGLwbJDEoRyrCGxCsgJ4mHcFKwP
14Z4EawE1Kd3HRut43vWjgYUWYR3ZV5i2p
1NZTFVXVzKXvPMsFKZfkhZCBcbzqm7cGCj
1GFBBahQC5DzpLuJc6X1yVvvSKP2kCpUGf
184PkQFdzhPR3TjoCxddsNK7sr3DVVhJ45
14SLK5fXWdajoQZ2AX5WmAGbvRtLpdTgMq
1LagrzYykb8w4NveKrw2SDcpKMezwxX72Z
16XdtV2U3ksdhKkByRpiq3VN61aB62Ndgh
1Mu1SaUBu7aV4DHzEc4hxcgGzaYWdvuaAh
1EJWWxwZckP9eLS2VzgbUwqzxFDZKZcF9b

I've funded them with 10mBTC each, 320mBTC total. The full timelock
definition is as follows:

{
    "chains": [
        {
            "algorithm": "sha256", 
            "encrypted_iv": null, 
            "hashed_secret": "1ERvMr5J8FETF7zj4QM98u8ZANaL1o9XGZ", 
            "i": 0, 
            "iv": "353b124909ec8774325d3f2f6b0a01c839e79e3ce687ee6e893310368afdf336", 
            "midstate": null, 
            "n": 86400000000, 
            "seckey": null, 
            "secret": null
        }, 
        {
            "algorithm": "sha256", 
            "encrypted_iv": "495c6092c9004dc23c2deefb1db1deba88f8895a319f5d9f7ce8a53b2a9ecfe9", 
            "hashed_secret": "18h7LwKpd9c6u8zJka3vMCASa8BfbiZFd4", 
            "i": 0, 
            "iv": null, 
            "midstate": null, 
            "n": 86400000000, 
            "seckey": null, 
            "secret": null
        }, 
        {
            "algorithm": "sha256", 
            "encrypted_iv": "8cbdf731374a71f22d59251890997ea001c2efa6e9c0bf808700c3d432ccf269", 
            "hashed_secret": "1DBJDp57QmbigLEbUsFeqJT3mkArGzH3gv", 
            "i": 0, 
            "iv": null, 
            "midstate": null, 
            "n": 86400000000, 
            "seckey": null, 
            "secret": null
        }, 
        {
            "algorithm": "sha256", 
            "encrypted_iv": "bc4d75fa5ec8f28e121cd73806ce058e82036577130cffb3bd596f2aa59b2a7f", 
            "hashed_secret": "1C1d6Tj7mZADurfj5yJ64p5BeRstquk7pu", 
            "i": 0, 
            "iv": null, 
            "midstate": null, 
            "n": 86400000000, 
            "seckey": null, 
            "secret": null
        }, 
        {
            "algorithm": "sha256", 
            "encrypted_iv": "80c622521c7aed318dac2b3c7d929e4e504d3c60650009b1abc0bae18fff979b", 
            "hashed_secret": "1FsH58jnq5Kc6D7hb7vmUhjh8fwnijiWss", 
            "i": 0, 
            "iv": null, 
            "midstate": null, 
            "n": 86400000000, 
            "seckey": null, 
            "secret": null
        }, 
        {
            "algorithm": "sha256", 
            "encrypted_iv": "1ba76f9a694f987e1758dbc65cf104984dbedfae01b134fe09135b64cb8c4034", 
            "hashed_secret": "1PDwPYStrrkKpGtV2zX71XCDYL3E2g3KM7", 
            "i": 0, 
            "iv": null, 
            "midstate": null, 
            "n": 86400000000, 
            "seckey": null, 
            "secret": null
        }, 
        {
            "algorithm": "sha256", 
            "encrypted_iv": "1cedd5a71a96f439c20e9f4f5957b8c159b23d472063fa07a05121333888cdf5", 
            "hashed_secret": "1BF6oYLeTG7WxNWJjC8p4SHz62q7vgZhXX", 
            "i": 0, 
            "iv": null, 
            "midstate": null, 
            "n": 86400000000, 
            "seckey": null, 
            "secret": null
        }, 
        {
            "algorithm": "sha256", 
            "encrypted_iv": "30d88e0fd113ce38d22a210012914e5331bd89dda408d85dfa9e9bfcbd40d8eb", 
            "hashed_secret": "1DxFiHr9ehVvi8JR2Cc5pcD4DEURUeFFda", 
            "i": 0, 
            "iv": null, 
            "midstate": null, 
            "n": 86400000000, 
            "seckey": null, 
            "secret": null
        }, 
        {
            "algorithm": "sha256", 
            "encrypted_iv": "5e654bfc1534b03e45548b59d407518b5915c3ae51c266e374ea8a368f72433c", 
            "hashed_secret": "1NKg3buX5BzhYgSY6Yvws9kMqZ6F1xnneD", 
            "i": 0, 
            "iv": null, 
            "midstate": null, 
            "n": 86400000000, 
            "seckey": null, 
            "secret": null
        }, 
        {
            "algorithm": "sha256", 
            "encrypted_iv": "10095f9aa85ceb221d00975a1db66fcffcae516c1d3d5dee66995567522f68ab", 
            "hashed_secret": "1Kptov9sgDqQcavz1rVsuQvfi8PcQcL4rc", 
            "i": 0, 
            "iv": null, 
            "midstate": null, 
            "n": 86400000000, 
            "seckey": null, 
            "secret": null
        }, 
        {
            "algorithm": "sha256", 
            "encrypted_iv": "6ecfd5282c650b1ebabbf39f5e72dd0e8e9724456e6b357e83c53a9a144b49eb", 
            "hashed_secret": "1P9k1HEfe3Z8LaiFejqsuDLjWXPZk1coDL", 
            "i": 0, 
            "iv": null, 
            "midstate": null, 
            "n": 86400000000, 
            "seckey": null, 
            "secret": null
        }, 
        {
            "algorithm": "sha256", 
            "encrypted_iv": "197796e5010f189165c2010cd7cfb0f3b933670276231292555b5540765bb6fa", 
            "hashed_secret": "1Mw25mU89Wp2b9zyMCSnjAVQ7x4AVWx3sf", 
            "i": 0, 
            "iv": null, 
            "midstate": null, 
            "n": 86400000000, 
            "seckey": null, 
            "secret": null
        }, 
        {
            "algorithm": "sha256", 
            "encrypted_iv": "58fe436839724b03f3ffd41e864d5dc030de2eeb5a3c4df19ed65ef9abe21cc2", 
            "hashed_secret": "1B8gdbd1StpVnV99Few1ae1XXfKH6iry1D", 
            "i": 0, 
            "iv": null, 
            "midstate": null, 
            "n": 86400000000, 
            "seckey": null, 
            "secret": null
        }, 
        {
            "algorithm": "sha256", 
            "encrypted_iv": "d2af3dd9cdfbb081149212ead19cbd85f6dcc31177de586d1c6dd6139c16141f", 
            "hashed_secret": "13bisx8T42CzmFA2oAm1evEytcijrHJ2iR", 
            "i": 0, 
            "iv": null, 
            "midstate": null, 
            "n": 86400000000, 
            "seckey": null, 
            "secret": null
        }, 
        {
            "algorithm": "sha256", 
            "encrypted_iv": "512f20d2a4f342cb635d5c73a0c3ad30272bdd84d73f2bb0f2849d17557f162f", 
            "hashed_secret": "1DyR6aNSbrJCzwqdeo9UN5obGR9L73Y2sa", 
            "i": 0, 
            "iv": null, 
            "midstate": null, 
            "n": 86400000000, 
            "seckey": null, 
            "secret": null
        }, 
        {
            "algorithm": "sha256", 
            "encrypted_iv": "75cb98d4abfd84318347220547f017f8285333dd55b41622c9220ece49e227e2", 
            "hashed_secret": "1Fx7j3gU3q7bQdoni2zZhGQx7BnLt8xNeK", 
            "i": 0, 
            "iv": null, 
            "midstate": null, 
            "n": 86400000000, 
            "seckey": null, 
            "secret": null
        }, 
        {
            "algorithm": "sha256", 
            "encrypted_iv": "d1d264674ba9b1c4baba189809a0d37ca4b8f402f91a145303907c3730ff890c", 
            "hashed_secret": "19q541m17opVcAxwisem7ak7YPuSpdS3Uj", 
            "i": 0, 
            "iv": null, 
            "midstate": null, 
            "n": 86400000000, 
            "seckey": null, 
            "secret": null
        }, 
        {
            "algorithm": "sha256", 
            "encrypted_iv": "31f2df6ae00e118f72063cb640c150bad5c0c015d12533826439d45f593ebb89", 
            "hashed_secret": "1DYWzBpLBDd7fpta2JYLf7QZ7nAYiZiamR", 
            "i": 0, 
            "iv": null, 
            "midstate": null, 
            "n": 86400000000, 
            "seckey": null, 
            "secret": null
        }, 
        {
            "algorithm": "sha256", 
            "encrypted_iv": "8113452a165b673957f6d707f19d6b407683499ef6a08e03ba35ca79306b8e3b", 
            "hashed_secret": "13sZYBMdyzffwvCkzhGTu49pCGGR5C5B9v", 
            "i": 0, 
            "iv": null, 
            "midstate": null, 
            "n": 86400000000, 
            "seckey": null, 
            "secret": null
        }, 
        {
            "algorithm": "sha256", 
            "encrypted_iv": "c0b8e246cd4a2a1abe760b1d2763931c8e04960e6a2e69f0f6723dd4892413ae", 
            "hashed_secret": "1DFSjViJLTNhNj5wvsqRwoqPyR9UTAzLgW", 
            "i": 0, 
            "iv": null, 
            "midstate": null, 
            "n": 86400000000, 
            "seckey": null, 
            "secret": null
        }, 
        {
            "algorithm": "sha256", 
            "encrypted_iv": "c4d0bc902093f21e1745193345909e080dee5b4cc410108a637ded75fcdc9e01", 
            "hashed_secret": "13Zi9eawpkzZwRC8RgHJausQmUS4ECBzho", 
            "i": 0, 
            "iv": null, 
            "midstate": null, 
            "n": 86400000000, 
            "seckey": null, 
            "secret": null
        }, 
        {
            "algorithm": "sha256", 
            "encrypted_iv": "588d778adb3180a9783781a175171790d8099d7942190fa853b235262c074a99", 
            "hashed_secret": "1BCQ5GVkAEzNYZ5WroAwXSspgpYfhQrojd", 
            "i": 0, 
            "iv": null, 
            "midstate": null, 
            "n": 86400000000, 
            "seckey": null, 
            "secret": null
        }, 
        {
            "algorithm": "sha256", 
            "encrypted_iv": "643b3afe4b674b44fee943507559d6218c5f53671ab01b09c8aaafa65f9f2e37", 
            "hashed_secret": "1K1gbE7qGLwbJDEoRyrCGxCsgJ4mHcFKwP", 
            "i": 0, 
            "iv": null, 
            "midstate": null, 
            "n": 86400000000, 
            "seckey": null, 
            "secret": null
        }, 
        {
            "algorithm": "sha256", 
            "encrypted_iv": "62e65d48eb215734c00165130027a6cb04842d95cc570a278968f7070d41936f", 
            "hashed_secret": "14Z4EawE1Kd3HRut43vWjgYUWYR3ZV5i2p", 
            "i": 0, 
            "iv": null, 
            "midstate": null, 
            "n": 86400000000, 
            "seckey": null, 
            "secret": null
        }, 
        {
            "algorithm": "sha256", 
            "encrypted_iv": "f89566d49c4765522cd382c16589486b90702cc99caff6801a4e8b504694ab6b", 
            "hashed_secret": "1NZTFVXVzKXvPMsFKZfkhZCBcbzqm7cGCj", 
            "i": 0, 
            "iv": null, 
            "midstate": null, 
            "n": 86400000000, 
            "seckey": null, 
            "secret": null
        }, 
        {
            "algorithm": "sha256", 
            "encrypted_iv": "3d9acd9785f12890b88f30576d81d583ba0ada2d98c9a17f6cc79a0ed1b7e027", 
            "hashed_secret": "1GFBBahQC5DzpLuJc6X1yVvvSKP2kCpUGf", 
            "i": 0, 
            "iv": null, 
            "midstate": null, 
            "n": 86400000000, 
            "seckey": null, 
            "secret": null
        }, 
        {
            "algorithm": "sha256", 
            "encrypted_iv": "4d886799cfef728add5c14b27e780f96511b78060d86d3b77b0d0ed5130f6f02", 
            "hashed_secret": "184PkQFdzhPR3TjoCxddsNK7sr3DVVhJ45", 
            "i": 0, 
            "iv": null, 
            "midstate": null, 
            "n": 86400000000, 
            "seckey": null, 
            "secret": null
        }, 
        {
            "algorithm": "sha256", 
            "encrypted_iv": "24b495c95129ca0062297b019af3684b12303382e4282e032ba5fd2ab805b127", 
            "hashed_secret": "14SLK5fXWdajoQZ2AX5WmAGbvRtLpdTgMq", 
            "i": 0, 
            "iv": null, 
            "midstate": null, 
            "n": 86400000000, 
            "seckey": null, 
            "secret": null
        }, 
        {
            "algorithm": "sha256", 
            "encrypted_iv": "0eec24b55713a85a41c996904def8f8b5b61a9efa2491dacf63f7161a71a6514", 
            "hashed_secret": "1LagrzYykb8w4NveKrw2SDcpKMezwxX72Z", 
            "i": 0, 
            "iv": null, 
            "midstate": null, 
            "n": 86400000000, 
            "seckey": null, 
            "secret": null
        }, 
        {
            "algorithm": "sha256", 
            "encrypted_iv": "1b3ecc11b7f6cd80a5111b11a15fa2cb8b1c006041f8ad5b7c7316947de2e3fa", 
            "hashed_secret": "16XdtV2U3ksdhKkByRpiq3VN61aB62Ndgh", 
            "i": 0, 
            "iv": null, 
            "midstate": null, 
            "n": 86400000000, 
            "seckey": null, 
            "secret": null
        }, 
        {
            "algorithm": "sha256", 
            "encrypted_iv": "7fed7012e601fb9431d48c072d060c391b1985fd9717d51b12bbcb7e271f656f", 
            "hashed_secret": "1Mu1SaUBu7aV4DHzEc4hxcgGzaYWdvuaAh", 
            "i": 0, 
            "iv": null, 
            "midstate": null, 
            "n": 86400000000, 
            "seckey": null, 
            "secret": null
        }, 
        {
            "algorithm": "sha256", 
            "encrypted_iv": "7f3a0c156be2c08714b9296999dddca8c178385e145aa3156ea00ffd742075f8", 
            "hashed_secret": "1EJWWxwZckP9eLS2VzgbUwqzxFDZKZcF9b", 
            "i": 0, 
            "iv": null, 
            "midstate": null, 
            "n": 86400000000, 
            "seckey": null, 
            "secret": null
        }
    ], 
    "version": 1
}

-- 
'peter'[:-1]@petertodd.org
00000000000000002d204cce4ee5e7976a0a485d658b4a15ebf31cdbce8a4915
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 685 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140604/eab31aed/attachment.sig>

From rdwnj at yahoo.com  Wed Jun  4 19:13:45 2014
From: rdwnj at yahoo.com (Ron)
Date: Wed, 4 Jun 2014 12:13:45 -0700 (PDT)
Subject: [Bitcoin-development] error "Bitcoin cannot be compiled without
	assertions." <<<<NOT
In-Reply-To: <mailman.192896.1401886427.2163.bitcoin-development@lists.sourceforge.net>
Message-ID: <1401909225.83663.YahooMailBasic@web124505.mail.ne1.yahoo.com>

________________________________________________________
 Message: 2
 Date: Wed, 4 Jun 2014 08:15:08 -0400
 From: Jeff Garzik <jgarzik at bitpay.com>
 Subject: Re: [Bitcoin-development] # error "Bitcoin cannot
 be compiled
 ??? without assertions." <<<<NOT
 To: Mike Hearn <mike at plan99.net>
 Cc: "bitcoin-development at lists.sourceforge.net"
 ??? <bitcoin-development at lists.sourceforge.net>,
 Ron <rdwnj at yahoo.com>
 Message-ID:
 ???
 <CAJHLa0PTTHfvd-1BR5s2k-4UW6V6qLEyAbF2YSRxOOSjtH9+_Q at mail.gmail.com>
 Content-Type: text/plain; charset=UTF-8
 
 Yes, check macros like that can be useful.
 
 I like the kernel's policy, which parallels our direction:
 1) Enable and use lightweight assertions for most users.
 2) No assertions with side effects
 
 If you want to compile them out, that's fine, but they
 should always
 be present in production software.
 _____________________________________________________

I don't think many of you actually read what I said, and you went off on your own tangents.

I said:
this commit and code with all side effects removed from the assertions.
in Vol 37, Issue 4

I intentionally left the gcc code alone.  Only the MSC code is assert "fixed".  I would have hoped that someone would have noticed and incorporated these changes into the gcc code.  Simply by removing the #ifdef _MSC_VER ... #else ...  #endif etc. etc.  

Did I say I compiled them out? No!  Did anyone bother to look at my code or what I said?

Here is an example from main.cpp  CTransaction::UpdateCoins(...
-    // add outputs
+    // add outputs      sure looks like an assert with side effects here!?
+#ifdef _MSC_VER
+    bool
+        fTest = inputs.SetCoins(txhash, CCoins(*this, nHeight));
+    #ifdef _DEBUG
+        assert(fTest);
+    #else
+    if( !fTest )
+        releaseModeAssertionfailure( __FILE__, __LINE__, __PRETTY_FUNCTION__ );
+    #endif
+#else
     assert(inputs.SetCoins(txhash, CCoins(*this, nHeight)));
+#endif

Note that I do the test, and if debugging, I let it abort() the program if it fails.  Note that in release mode it calls a new function on failure, that I leave you to discover what it does.  I see that this assert has been "fixed" in 0.9.x, but I think my "fix" is better, since it allows release mode code to run better, if not identically.

I changed every assert() in the bitcoind 086 sources to behave this way.  Since C++ is perniciously baroque, it is not clear if a side effect can or has occurred in the most innocuous of C++ statements. Is the example above side-effect free?

Here is a piece of what I made my decision on:
http://www.gnu.org/software/libc/manual/html_node/Consistency-Checking.html and the link to the book previously given.

Also, no one answered the question about bitcoin-qt, to whit, can or should it be compiled in RELEASE mode because of this?  Should it have always been compiled in DEBUG mode in the past too?

Ron 



From me at ricmoo.com  Wed Jun  4 19:30:10 2014
From: me at ricmoo.com (Richard Moore)
Date: Wed, 4 Jun 2014 15:30:10 -0400
Subject: [Bitcoin-development] Future Feature Proposal - getgist
Message-ID: <34798C1C-FDA7-4A4C-B136-DBD4E59C254D@ricmoo.com>

Bitcoin development team,

I recently started implementing my own Python full-node, and had an idea, so I?m prowling through BIP 001 for this proposal, which says to e-mail you kind folks to make sure the idea is original (enough) and that there aren?t other existing means to accomplish what I was thinking. :)

The only way to grab all the headers seems to be to serially get one, then the next and so on, as you need the last hash of a headers() call to the next getheaders(). But we are on a peer-to-peer network, potentially able to getheaders() from many peers simultaneously, if we only knew the hash to look for.

What I was thinking is something to the effect of a getgist() command, fully backward compatible (any node not understanding it, can silently ignore it? Otherwise version or services could be used to announce the capability, but that seems like a little overkill). The inputs to getgist() would be similar to getheaders(); version, hash_count, block_locator_hash, stop_hash and an additional field, segment_count. The response would be a normal headers() message, except, not sequential block headers? Rather they would be spaced out, preferably 2000-block-hash-aligned from the first block hash. So, for example, if you have a blockchain with 198,005 blocks, and you passed it the block locator of height 0 (the genesis block), and a segment_count of 25, you would expect (approximately, the actual algorithm needs to be figured out), the block hashes at the following 25 (segment_count) heights:

1, 8000, 16000, 24000, 32000, 40000, 48000, 56000, 64000, 72000, 80000, 88000, 96000, 104000, 112000, 120000, 128000, 136000, 144000, 152000, 160000, 168000, 176000, 184000, 192000

Which can now be spread across 25 different nodes, fetching the block headers (albeit, out of order, possibly increasing the complexity of the local block chain database) but vastly increasing the speed the whole blockchain can have all headers synced.

I still need to perform some tests to see what type of speed gains there are, but I would suspect it should be segment_count times faster.

Existing methods could be to use checkpoint-ish nodes or bootstrap data files, but these begin relying on semi-cetralizenesses.

Ideas? Suggestions? Concerns? Prior it-ain?t-gonna-works?

Thanks!

RicMoo


.???`?.??.???`?.??.???`?.??.???`?.??.???`?.?><(((?>

Richard Moore ~ Founder
Genetic Mistakes Software inc.
phone: (778) 882-6125
email: ricmoo at geneticmistakes.com
www: http://GeneticMistakes.com

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140604/55a199b0/attachment.html>

From mike at plan99.net  Thu Jun  5 03:42:27 2014
From: mike at plan99.net (Mike Hearn)
Date: Thu, 5 Jun 2014 11:42:27 +0800
Subject: [Bitcoin-development] Future Feature Proposal - getgist
In-Reply-To: <34798C1C-FDA7-4A4C-B136-DBD4E59C254D@ricmoo.com>
References: <34798C1C-FDA7-4A4C-B136-DBD4E59C254D@ricmoo.com>
Message-ID: <CANEZrP1vVY1jnV8Kdg5OWEt=Rba2PPcs3ke4tMWc6fS4wGPpOw@mail.gmail.com>

Why do you want to optimise this? getheaders is used by SPV clients not
full nodes. SPV clients like bitcoinj can and do simply ship with gist
files in them, then getheaders from the last "checkpoint"   (I wish I
hadn't reused terminology like that but this is what bitcoinj calls them).

In practice when I look at performance issues with current SPV clients,
getheaders speed is not on my radar.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140605/b277ec31/attachment.html>

From rusty at rustcorp.com.au  Thu Jun  5 06:09:15 2014
From: rusty at rustcorp.com.au (Rusty Russell)
Date: Thu, 05 Jun 2014 15:39:15 +0930
Subject: [Bitcoin-development] Lets discuss what to do if SHA256d is
	actually broken
In-Reply-To: <CAC787aM3bcfcw8zQQbNYXqxASFarW-z9wqiePmb6rv0RiiTdeA@mail.gmail.com>
References: <2341954.NpNStk60qp@1337h4x0r> <201406030452.40520.luke@dashjr.org>
	<87iooi40ws.fsf@rustcorp.com.au>
	<CAC787aM3bcfcw8zQQbNYXqxASFarW-z9wqiePmb6rv0RiiTdeA@mail.gmail.com>
Message-ID: <87mwdr3n1w.fsf@rustcorp.com.au>

Charlie 'Charles' Shrem <cshrem at gmail.com> writes:
> Hey Rusty,
>
> This is intriguing, do you have a writeup somewhere I can read more about ?

OK, ignore the FIXMEs, but I rehashed my stupid sim code, added some
graphs to the (clearly unfinished) paper and uploaded it to github:

https://github.com/rustyrussell/bitcoin_hashchange

PDF is in there too, for easier reading.

Cheers,
Rusty.



From mark at monetize.io  Thu Jun  5 14:28:04 2014
From: mark at monetize.io (Mark Friedenbach)
Date: Thu, 05 Jun 2014 07:28:04 -0700
Subject: [Bitcoin-development] Future Feature Proposal - getgist
In-Reply-To: <34798C1C-FDA7-4A4C-B136-DBD4E59C254D@ricmoo.com>
References: <34798C1C-FDA7-4A4C-B136-DBD4E59C254D@ricmoo.com>
Message-ID: <53907E74.40401@monetize.io>

The correct approach here is header hash-tree commitments which enable
compact (logarithmic) SPV proofs that elide nearly all intervening
headers since the last checkpoint. You could then query the hash tree
for references to any of the headers you actually need.

See this message for details:

http://sourceforge.net/p/bitcoin/mailman/message/32111357/

On 06/04/2014 12:30 PM, Richard Moore wrote:
> Bitcoin development team,
> 
> I recently started implementing my own Python full-node, and had an
> idea, so I?m prowling through BIP 001 for this proposal, which says to
> e-mail you kind folks to make sure the idea is original (enough) and
> that there aren?t other existing means to accomplish what I was thinking. :)
> 
> The only way to grab all the headers seems to be to serially get one,
> then the next and so on, as you need the last hash of a headers() call
> to the next getheaders(). But we are on a peer-to-peer network,
> potentially able to getheaders() from many peers simultaneously, if we
> only knew the hash to look for.
> 
> What I was thinking is something to the effect of a getgist() command,
> fully backward compatible (any node not understanding it, can silently
> ignore it? Otherwise version or services could be used to announce the
> capability, but that seems like a little overkill). The inputs to
> getgist() would be similar to getheaders(); version, hash_count,
> block_locator_hash, stop_hash and an additional field, segment_count.
> The response would be a normal headers() message, except, not sequential
> block headers? Rather they would be spaced out, preferably
> 2000-block-hash-aligned from the first block hash. So, for example, if
> you have a blockchain with 198,005 blocks, and you passed it the block
> locator of height 0 (the genesis block), and a segment_count of 25, you
> would expect (approximately, the actual algorithm needs to be figured
> out), the block hashes at the following 25 (segment_count) heights:
> 
> 1, 8000, 16000, 24000, 32000, 40000, 48000, 56000, 64000, 72000, 80000,
> 88000, 96000, 104000, 112000, 120000, 128000, 136000, 144000, 152000,
> 160000, 168000, 176000, 184000, 192000
> 
> Which can now be spread across 25 different nodes, fetching the block
> headers (albeit, out of order, possibly increasing the complexity of the
> local block chain database) but vastly increasing the speed the whole
> blockchain can have all headers synced.
> 
> I still need to perform some tests to see what type of speed gains there
> are, but I would suspect it should be segment_count times faster.
> 
> Existing methods could be to use checkpoint-ish nodes or bootstrap data
> files, but these begin relying on semi-cetralizenesses.
> 
> Ideas? Suggestions? Concerns? Prior it-ain?t-gonna-works?
> 
> Thanks!
> 
> RicMoo
> 
> 
> .???`?.??.???`?.??.???`?.??.???`?.??.???`?.?><(((?>
> 
> Richard Moore ~ Founder
> Genetic Mistakes Software inc.
> phone: (778) 882-6125
> email: ricmoo at geneticmistakes.com <mailto:ricmoo at geneticmistakes.com>
> www: http://GeneticMistakes.com <http://GeneticMistakes.com/>
> 
> 
> 
> ------------------------------------------------------------------------------
> Learn Graph Databases - Download FREE O'Reilly Book
> "Graph Databases" is the definitive new guide to graph databases and their 
> applications. Written by three acclaimed leaders in the field, 
> this first edition is now available. Download your free book today!
> http://p.sf.net/sfu/NeoTech
> 
> 
> 
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 



From me at ricmoo.com  Thu Jun  5 17:43:38 2014
From: me at ricmoo.com (Richard Moore)
Date: Thu, 5 Jun 2014 13:43:38 -0400
Subject: [Bitcoin-development] Future Feature Proposal - getgist
In-Reply-To: <CANEZrP1vVY1jnV8Kdg5OWEt=Rba2PPcs3ke4tMWc6fS4wGPpOw@mail.gmail.com>
References: <34798C1C-FDA7-4A4C-B136-DBD4E59C254D@ricmoo.com>
	<CANEZrP1vVY1jnV8Kdg5OWEt=Rba2PPcs3ke4tMWc6fS4wGPpOw@mail.gmail.com>
Message-ID: <2ADB9019-825E-410A-ADED-A7237CBC323C@ricmoo.com>

I was considering names like getcheckpoints() to use the terminology that already seemed to be in place, but they were too long :)

I have been using getheaders() in my thick client to quickly grab all the headers before downloading the full blocks since I can grab more at a time. Even with getblocks(), there is the case for a  getgist() call. Right now you call getblocks(), which can take some time to get the corresponding inv(), at which time you can then start the call to getdata() as well as the next call to getblocks().

With a gist, for example of segment_count 50, you could call getgist(), then with the response, you could request 50 getblocks() each with a block_locator of 1 hash from the gist (and optimally the stop_hash of the next hash in the gist) to 50 different peers, providing 25,000 (50 x 500) block hashes.

Currently:
>>> getblocks()
<<< inv()
>>> getdata()
<<< block(), block(), block(), ? (x 500)

Saturates one peer, while leaving the rest un-used. Step 1 and 2 can be repeated and dispatched to different peers, but there is still the latency between the two calls.

Gist:
>>> getgist()
<<< inv()
>>> getblocks(), getblocks(), getblocks(), ? (x segment_count, 1 per peer)
<<< inv(), inv(), inv(), ? (x segment_count, 1 per peer)
>>> getdata(), getdata(), getdata(), ? (x segment_count, 1 per peer)
<<< block(), block(), block(), ? (x (500 * segment_count), ie. 500 in per peer)

Each peer can be saturated.

I will try to run some experiments this weekend to get numbers as to whether there is actually any performance improvement using a gist, or whether the getdata(), block() latency ends up dominating the time anyways.


RicMoo


On Jun 4, 2014, at 11:42 PM, Mike Hearn <mike at plan99.net> wrote:

> Why do you want to optimise this? getheaders is used by SPV clients not full nodes. SPV clients like bitcoinj can and do simply ship with gist files in them, then getheaders from the last "checkpoint"   (I wish I hadn't reused terminology like that but this is what bitcoinj calls them).
> 
> In practice when I look at performance issues with current SPV clients, getheaders speed is not on my radar.

.???`?.??.???`?.??.???`?.??.???`?.??.???`?.?><(((?>

Richard Moore ~ Founder
Genetic Mistakes Software inc.
phone: (778) 882-6125
email: ricmoo at geneticmistakes.com
www: http://GeneticMistakes.com

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140605/a9500408/attachment.html>

From pieter.wuille at gmail.com  Thu Jun  5 19:34:15 2014
From: pieter.wuille at gmail.com (Pieter Wuille)
Date: Thu, 5 Jun 2014 21:34:15 +0200
Subject: [Bitcoin-development] Future Feature Proposal - getgist
In-Reply-To: <2ADB9019-825E-410A-ADED-A7237CBC323C@ricmoo.com>
References: <34798C1C-FDA7-4A4C-B136-DBD4E59C254D@ricmoo.com>
	<CANEZrP1vVY1jnV8Kdg5OWEt=Rba2PPcs3ke4tMWc6fS4wGPpOw@mail.gmail.com>
	<2ADB9019-825E-410A-ADED-A7237CBC323C@ricmoo.com>
Message-ID: <CAPg+sBhRQWE6_arjQi55Ars8mOCQkouCOAqVAuHrBzOD60GEqQ@mail.gmail.com>

On Thu, Jun 5, 2014 at 7:43 PM, Richard Moore <me at ricmoo.com> wrote:
> I was considering names like getcheckpoints() to use the terminology that
> already seemed to be in place, but they were too long :)
>
> I have been using getheaders() in my thick client to quickly grab all the
> headers before downloading the full blocks since I can grab more at a time.
> Even with getblocks(), there is the case for a  getgist() call. Right now
> you call getblocks(), which can take some time to get the corresponding
> inv(), at which time you can then start the call to getdata() as well as the
> next call to getblocks().
>
> With a gist, for example of segment_count 50, you could call getgist(), then
> with the response, you could request 50 getblocks() each with a
> block_locator of 1 hash from the gist (and optimally the stop_hash of the
> next hash in the gist) to 50 different peers, providing 25,000 (50 x 500)
> block hashes.

I don't understand. If you're using getheaders(), there is no need to
use getblocks() anymore. You just do a getdata() immediately for the
block hashes you have the headers but not the transactions for.

In general, I think we should aim for as much verifiability as
possible. Much of the reference client's design is built around doing
as much validation on received data as soon as possible, to avoid
being misled by a particular peer. Getheaders() provides this: you
receive a set of headers starting from a point you already know, in
order, and can validate them syntactically and for proof-of-work
immediately. That allows building a very-hard-to-beat tree structure
locally already, at which point you can start requesting blocks along
the good branches of that tree immediately - potentially in parallel
from multiple peers. In fact, that's the planned approach for the
headers-first synchronization.

The getgist() proposed here allows the peer to basically give you
bullshit headers at the end, and you won't notice until you've
downloaded every single block (or at least every single header) up to
that point. That risks wasting time, bandwidth and diskspace,
depending on implementation.

Based on earlier experimenting with my former experimental
headersfirst branch, it's quite possible to have 2 mostly independent
synchronization mechanisms going on; 1) asking and downloading headers
from every peer, and validating them, and 2) asking and downloading
blocks from multiple peers in parallel, for blocks corresponding to
validated headers. Downloading the headers succeeds within minutes,
and within seconds you have enough to start fetching blocks. After
that point, you can keep a "download window" full with outstanding
block requests, and as blocks go much slower than headers, the headers
process never becomes a blocker for blocks to download.

Unless we're talking about a system with billions of headers to
download, I don't think this is a worthwhile optimization.

-- 
Pieter



From laanwj at gmail.com  Fri Jun  6 04:05:32 2014
From: laanwj at gmail.com (Wladimir)
Date: Fri, 6 Jun 2014 06:05:32 +0200
Subject: [Bitcoin-development] Do not use github issues on BIPs repository
Message-ID: <CA+s+GJA9ki6RUZ8S3wRW5Pev-COSotkVkL=b_6DHZnCnW4j45Q@mail.gmail.com>

Hello,

I see that people have been filing issues on the Bitcoin Improvement
Requests repository, https://github.com/bitcoin/bips.

This is not how it is supposed to work -- BIP authors are not required
to monitor the github issues, and it is not a good place to discuss in
the first place. If you have a remark about a BIP or want to discuss
it please use this mailing list (preferably) or contact the authors
some other way.

After discussion you can submit a pull request. Or if the change is
trivial, such as a typo, you can submit a pull immediately.

For this reason I intend to disable issues (not pull requests, of
course) on the repository.

Wladimir



From pete at petertodd.org  Fri Jun  6 08:19:33 2014
From: pete at petertodd.org (Peter Todd)
Date: Fri, 6 Jun 2014 04:19:33 -0400
Subject: [Bitcoin-development] NODE_BLOOM service bit
Message-ID: <20140606081933.GA29458@savin>

BIP: https://github.com/petertodd/bips/blob/bip-node-bloom/bip-node-bloom.mediawiki

Pull-req: https://github.com/bitcoin/bitcoin/pull/2900

Pretty simple really: service bit NODE_BLOOM is defined to allow nodes
to advertise to their peers that they support bloom filters. The network
protocol version number is also bumped. Recommended behavior for nodes
that do not support bloom is to simply disconnect peers who send a
filter* message anyway to let them quickly find another peer.

Rational: Bloom filters are not always supported or appropriate. For
instance no node implementation other than Bitcoin Core supports them,
e.g btcd and obelisk. (which ironically implement this BIP already,
modulo the version number bump) In the long term bloom filters will be
obsoleted eventually as they have poor scaling properties - problematic
with blocksize increases - and are incompatible with UTXO/TXO
commitments, which will use prefix-based filtering instead. (already
being implemented in electrum and obelisk)

In the short term bloom filters have high IO loads, which have lead to
DoS attacks, and are not an optimal use of resources for nodes which are
IO constrained rather than bandwidth constrained. (common in VPS setups
which could better help the network by serving full blocks)

Adding NODE_BLOOM as a service bit now will save us some hassle later
down the road, reflects what actual implementations do anyway, has been
already deployed on Litecoin, Dogecoin, and a zillion other alts with no
issues, (including SPV client support) and is a trivial patch.


Gregory Maxwell: Please assign a BIP #

-- 
'peter'[:-1]@petertodd.org
000000000000000049066dab2483c9e069656239f5782da204bd4995bd92c19f
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 685 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140606/86eca22c/attachment.sig>

From laanwj at gmail.com  Fri Jun  6 08:29:13 2014
From: laanwj at gmail.com (Wladimir)
Date: Fri, 6 Jun 2014 10:29:13 +0200
Subject: [Bitcoin-development] # error "Bitcoin cannot be compiled
 without assertions." <<<<NOT
In-Reply-To: <538EF81D.9060301@stud.uni-saarland.de>
References: <1401822421.27942.YahooMailNeo@web124505.mail.ne1.yahoo.com>
	<CANEZrP18nf0oK6fbnE59opXxfMdwiOOu4v99iGyXyGo_7NLuYA@mail.gmail.com>
	<CAAS2fgTM30oFLGpkCwqM5Wf-Crmz5s05X-uWXAiGy9u43nbKvQ@mail.gmail.com>
	<538EF81D.9060301@stud.uni-saarland.de>
Message-ID: <CA+s+GJDZ-F0obYRTkbt=MHMo60jH0jYo-3On_56rHtyguEU4pg@mail.gmail.com>

On Wed, Jun 4, 2014 at 12:42 PM, Jannis Froese <
s9jafroe at stud.uni-saarland.de> wrote:

I think most concerns about the current use of asserts would be resolved if
> the currently used asserts would be changed to a nicer definition which is
> independent of NDEBUG, and a second class of debugging asserts would be
> introduced, which is exclusively for expensive, redundant checks and is
> disabled by NDEBUG.
>

Also, most assertion errors that happen to people running Bitcoin Core are
not caused by software bugs but database corruption errors (usually due to
unclean shutdown).

For example in case we detect missing/truncated block files or UTXO db
consistency we should, instead of raising an assertion error, propose a
-reindex - see also https://github.com/bitcoin/bitcoin/issues/2202 .

So instead of using assertions we need a fatal error function for those
problems which are probably recoverable in a certain specific way. In
principle starting a reindex wouldn't even need to take down the entire
process (though that's easier for implementation due to cleanup and
assumptions made).

Wladimir
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140606/ffca619d/attachment.html>

From pieter.wuille at gmail.com  Fri Jun  6 08:40:20 2014
From: pieter.wuille at gmail.com (Pieter Wuille)
Date: Fri, 6 Jun 2014 10:40:20 +0200
Subject: [Bitcoin-development] # error "Bitcoin cannot be compiled
 without assertions." <<<<NOT
In-Reply-To: <CA+s+GJDZ-F0obYRTkbt=MHMo60jH0jYo-3On_56rHtyguEU4pg@mail.gmail.com>
References: <1401822421.27942.YahooMailNeo@web124505.mail.ne1.yahoo.com>
	<CANEZrP18nf0oK6fbnE59opXxfMdwiOOu4v99iGyXyGo_7NLuYA@mail.gmail.com>
	<CAAS2fgTM30oFLGpkCwqM5Wf-Crmz5s05X-uWXAiGy9u43nbKvQ@mail.gmail.com>
	<538EF81D.9060301@stud.uni-saarland.de>
	<CA+s+GJDZ-F0obYRTkbt=MHMo60jH0jYo-3On_56rHtyguEU4pg@mail.gmail.com>
Message-ID: <CAPg+sBjz8_5SwiL2xyby+TqMTpB8psDhG7O1e0KbWFfqppeYng@mail.gmail.com>

On Fri, Jun 6, 2014 at 10:29 AM, Wladimir <laanwj at gmail.com> wrote:
> On Wed, Jun 4, 2014 at 12:42 PM, Jannis Froese
> <s9jafroe at stud.uni-saarland.de> wrote:
>
>> I think most concerns about the current use of asserts would be resolved
>> if the currently used asserts would be changed to a nicer definition which
>> is independent of NDEBUG, and a second class of debugging asserts would be
>> introduced, which is exclusively for expensive, redundant checks and is
>> disabled by NDEBUG.

There are a few examples of things that would classify as
expensive/redundant checks:
* addrman consistency checks (only enabled with -DDEBUG_ADDRMAN).
* mempool consistency checks (only enabled with -checkmempool).
* deadlock detection (only enabled with -DDEBUG_LOCKORDER).

I'm not sure all of these make sense to put under a single runtime
flag. For example, addrman consistency is unlikely to be affected
unless you're working on addrman code, and is pretty expensive.

Still, I do like the idea of optional consistency checks, that help
guarantee the software always has a consistency state.

-- 
Pieter



From adam at cypherspace.org  Fri Jun  6 08:48:52 2014
From: adam at cypherspace.org (Adam Back)
Date: Fri, 6 Jun 2014 10:48:52 +0200
Subject: [Bitcoin-development] NODE_BLOOM service bit
In-Reply-To: <20140606081933.GA29458@savin>
References: <20140606081933.GA29458@savin>
Message-ID: <20140606084852.GA30247@netbook.cypherspace.org>

Advertising NODE BLOOM as a service sounds good.

But the critique of bloom filters, I am not so sure prefix filters are
better.  Prefix filters offer questionable privacy tradeoffs in my opinion. 
Same problem as with stealth address proposed use of prefixes.

All for scalability, efficiency and decentralization but not ideally at the
expense of nuking privacy.  The effects on privacy are cumulative, and
affect everyone not just the user.  Same pattern of local decision, global
effect as with reused addresses.

Adam

On Fri, Jun 06, 2014 at 04:19:33AM -0400, Peter Todd wrote:
>In the short term bloom filters have high IO loads, which have lead to
>DoS attacks, and are not an optimal use of resources for nodes which are
>IO constrained rather than bandwidth constrained. (common in VPS setups
>which could better help the network by serving full blocks)



From pete at petertodd.org  Fri Jun  6 09:04:41 2014
From: pete at petertodd.org (Peter Todd)
Date: Fri, 6 Jun 2014 05:04:41 -0400
Subject: [Bitcoin-development] NODE_BLOOM service bit
In-Reply-To: <20140606084852.GA30247@netbook.cypherspace.org>
References: <20140606081933.GA29458@savin>
	<20140606084852.GA30247@netbook.cypherspace.org>
Message-ID: <20140606090441.GA19256@savin>

On Fri, Jun 06, 2014 at 10:48:52AM +0200, Adam Back wrote:
> Advertising NODE BLOOM as a service sounds good.
> 
> But the critique of bloom filters, I am not so sure prefix filters are
> better.  Prefix filters offer questionable privacy tradeoffs in my
> opinion. Same problem as with stealth address proposed use of
> prefixes.

That's assuming you're doing the proposed prefix brute forcing - if you
don't do that they have privacy equal or better than bloom filters, but
with better scalability. In particular that better scalability lets you
efficiently query multiple servers for blockchain data, only giving up
info on a subset of the addresses in your wallet to each server. This
can be a significant improvement to bloom filters if your attacker is
running logging nodes to try to, say, deanonymize CoinJoin transactions.

> All for scalability, efficiency and decentralization but not ideally at the
> expense of nuking privacy.  The effects on privacy are cumulative, and
> affect everyone not just the user.  Same pattern of local decision, global
> effect as with reused addresses.

Indeed. But again, remember that the existing systems suck too;
prefix-brute forcing is a engineering tradeoff implementable with
existing and well understood technology.

Now if you want to come up with something better and write code, please
do! I'm sure the math exists; what doesn't exist is robust and well
tested code in multiple languages. Stealth addresses at least have been
designed so that future blockchain filter upgrades can be added in a
backwards compatible way.

-- 
'peter'[:-1]@petertodd.org
00000000000000003a68ee16d702ca5dd5547fb4aead910a004747cb06241dd6
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 685 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140606/0aa750e4/attachment.sig>

From gmaxwell at gmail.com  Fri Jun  6 09:03:29 2014
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Fri, 6 Jun 2014 02:03:29 -0700
Subject: [Bitcoin-development] NODE_BLOOM service bit
In-Reply-To: <20140606084852.GA30247@netbook.cypherspace.org>
References: <20140606081933.GA29458@savin>
	<20140606084852.GA30247@netbook.cypherspace.org>
Message-ID: <CAAS2fgTsjZPxds+QHb+ceC_Thu4xsDFAEqXtxznCs_EbyLZepg@mail.gmail.com>

On Fri, Jun 6, 2014 at 1:48 AM, Adam Back <adam at cypherspace.org> wrote:
> Advertising NODE BLOOM as a service sounds good.
>
> But the critique of bloom filters, I am not so sure prefix filters are
> better.  Prefix filters offer questionable privacy tradeoffs in my opinion.
> Same problem as with stealth address proposed use of prefixes.
>
> All for scalability, efficiency and decentralization but not ideally at the
> expense of nuking privacy.  The effects on privacy are cumulative, and
> affect everyone not just the user.  Same pattern of local decision, global
> effect as with reused addresses.

The performance Bytecoin/Monero/Fantom/etc. systems that use ECDH
addresses for all transactions seem to be suggesting that the prefixes
aren't really needed.

At least with current system rules doing the ECDH for each transaction
seems pretty reasonable.



From pete at petertodd.org  Fri Jun  6 09:11:34 2014
From: pete at petertodd.org (Peter Todd)
Date: Fri, 6 Jun 2014 05:11:34 -0400
Subject: [Bitcoin-development] NODE_BLOOM service bit
In-Reply-To: <CAAS2fgTsjZPxds+QHb+ceC_Thu4xsDFAEqXtxznCs_EbyLZepg@mail.gmail.com>
References: <20140606081933.GA29458@savin>
	<20140606084852.GA30247@netbook.cypherspace.org>
	<CAAS2fgTsjZPxds+QHb+ceC_Thu4xsDFAEqXtxznCs_EbyLZepg@mail.gmail.com>
Message-ID: <20140606091134.GA23205@savin>

On Fri, Jun 06, 2014 at 02:03:29AM -0700, Gregory Maxwell wrote:
> On Fri, Jun 6, 2014 at 1:48 AM, Adam Back <adam at cypherspace.org> wrote:
> > Advertising NODE BLOOM as a service sounds good.
> >
> > But the critique of bloom filters, I am not so sure prefix filters are
> > better.  Prefix filters offer questionable privacy tradeoffs in my opinion.
> > Same problem as with stealth address proposed use of prefixes.
> >
> > All for scalability, efficiency and decentralization but not ideally at the
> > expense of nuking privacy.  The effects on privacy are cumulative, and
> > affect everyone not just the user.  Same pattern of local decision, global
> > effect as with reused addresses.
> 
> The performance Bytecoin/Monero/Fantom/etc. systems that use ECDH
> addresses for all transactions seem to be suggesting that the prefixes
> aren't really needed.
> 
> At least with current system rules doing the ECDH for each transaction
> seems pretty reasonable.

Yup. Obelisk's indexing is sufficiently fast that they hadn't even
bothered making Dark Wallet store transaction information between
sessions until recently. Prefix brute-forcing isn't yet implemented,
although prefix filters is being implemented for lookups in general. (at
the very least it gives the server operators some valuable plausible
deniability)

-- 
'peter'[:-1]@petertodd.org
00000000000000003a68ee16d702ca5dd5547fb4aead910a004747cb06241dd6
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 685 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140606/27d1b164/attachment.sig>

From adam at cypherspace.org  Fri Jun  6 10:45:43 2014
From: adam at cypherspace.org (Adam Back)
Date: Fri, 6 Jun 2014 12:45:43 +0200
Subject: [Bitcoin-development] NODE_BLOOM service bit
In-Reply-To: <20140606090441.GA19256@savin>
References: <20140606081933.GA29458@savin>
	<20140606084852.GA30247@netbook.cypherspace.org>
	<20140606090441.GA19256@savin>
Message-ID: <20140606104543.GA31085@netbook.cypherspace.org>

On Fri, Jun 06, 2014 at 05:04:41AM -0400, Peter Todd wrote:
>On Fri, Jun 06, 2014 at 10:48:52AM +0200, Adam Back wrote:
>> Prefix filters offer questionable privacy tradeoffs in my opinion.  Same
>> problem as with stealth address proposed use of prefixes.
>
>That's assuming you're doing the proposed prefix brute forcing

As I recall prefix brute forcing was a bit twiddle saving, ie searching for
EDH key that has the users public prefix.  That does not improve privacy
over an explicit prefix, it saves a byte or so at the expense of average 128
EDH exchanges to send and provides also some probably relatively ineffective
plausible deniability by enabling the transaction to be indistinguishable
from some other (not very common) types of transaction.

>don't do that they have privacy equal or better than bloom filters, but
>with better scalability. 

either its full node only where prefixes are not used, which is less
scalable than bloom; or prefixes are used explicitly or implicitly
(brute-force) and either way privacy is weakened by the extra correlation
hook provided by elimination from the network graph of payments with
mismatched prefixes.

>In particular that better scalability lets you efficiently query multiple
>servers for blockchain data, only giving up info on a subset of the
>addresses in your wallet to each server.  This can be a significant
>improvement to bloom filters if your attacker is running logging nodes to
>try to, say, deanonymize CoinJoin transactions.

We need to consider the two types of privacy involved.  Privacy from the
full node an SPV client is relying on to find its payments, vs privacy from
analysis of the public transaction graph.  The latter is more damaging. 
Better to design for privacy against future analysis of public info, than
privacy by argument to select non-hostile nodes.  Tor has changed recently
to account for the fact that chosing fresh random nodes is actually worse. 
ie you have a probability of identity/address identification per route/node,
and repeatedly selecting routes/nodes just cumulatively increases the chance
you'll be identified.  Better to pick a random node, identify it and stick
to it and hope you chose well.

>Now if you want to come up with something better and write code, please
>do! I'm sure the math exists; what doesn't exist is robust and well
>tested code in multiple languages. 

Maybe other simpler, but yes there was the proof of concept that the math
exists in the form of the weil pairing.

https://bitcointalk.org/index.php?topic=431756.new

But what problem are we trying to solve here?  Is it an immediate problem? 
Maybe better to figure out a more privacy compatible solution which will
take longer, than let coding drive protocol.

Adam



From pete at petertodd.org  Fri Jun  6 16:46:39 2014
From: pete at petertodd.org (Peter Todd)
Date: Fri, 6 Jun 2014 12:46:39 -0400
Subject: [Bitcoin-development] Bloom bait
In-Reply-To: <20140606104543.GA31085@netbook.cypherspace.org>
References: <20140606081933.GA29458@savin>
	<20140606084852.GA30247@netbook.cypherspace.org>
	<20140606090441.GA19256@savin>
	<20140606104543.GA31085@netbook.cypherspace.org>
Message-ID: <20140606164639.GB14891@savin>

On Fri, Jun 06, 2014 at 12:45:43PM +0200, Adam Back wrote:

(changed subject line as this discussion has nothing to do with
NODE_BLOOM)

> As I recall prefix brute forcing was a bit twiddle saving, ie searching for
> EDH key that has the users public prefix.  That does not improve privacy
> over an explicit prefix, it saves a byte or so at the expense of average 128
> EDH exchanges to send and provides also some probably relatively ineffective
> plausible deniability by enabling the transaction to be indistinguishable
> from some other (not very common) types of transaction.

I think you should re-read my original proposal; there's a whole host of
misunderstandings above, for instance I have no idea where you got the
idea that it has anything to do with "saving a byte" came from, or where
the number 128 came from.

> >don't do that they have privacy equal or better than bloom filters, but
> >with better scalability.
> 
> either its full node only where prefixes are not used, which is less
> scalable than bloom; or prefixes are used explicitly or implicitly
> (brute-force) and either way privacy is weakened by the extra correlation
> hook provided by elimination from the network graph of payments with
> mismatched prefixes.

Again, you have a misunderstanding. Both bloom filters and prefix
filters are just ways of giving a peer a probabalistic filter to match
transactions against. Where they differ is that bloom filters has O(n)
scaling, where n is the size of a block, and prefix filters have O(log n)
scaling with slightly(1) higher k. Again, if you *don't* use brute forcing
in conjunction with prefixes they have no different transactional graph
privacy than bloom filters, but the better scalability lets you do
things like split your queries across multiple peers that give you
better protection against hostile nodes.  Additionally prefix filters
are compatible with future miner committed indexes to make the data
authenticated.

1) see Amir's experience implementing prefix lookup in Obelisk

> We need to consider the two types of privacy involved.  Privacy from the
> full node an SPV client is relying on to find its payments, vs privacy from
> analysis of the public transaction graph.

Agreed

> The latter is more damaging.

Maybe! If adversaries are operating a significant fraction of the peers
you are connecting to the current design of bloom filters + HD wallets
results in situations where those adversaries have better transactional
graph information than the alternative.

> Better to design for privacy against future analysis of
> public info, than
> privacy by argument to select non-hostile nodes.  Tor has changed recently
> to account for the fact that chosing fresh random nodes is actually
> worse. ie you have a probability of identity/address identification
> per route/node,
> and repeatedly selecting routes/nodes just cumulatively increases the chance
> you'll be identified.  Better to pick a random node, identify it and stick
> to it and hope you chose well.

That's basically what Electrum and Obelisk already do - by default you
connect to a relatively small set of blockchain data servers operated by
well known people and use the same server repeatedly.

Applying that to the P2P network however is tricky as there is a huge
amount of churn in the nodes:

    #bitcoin-dev/14/06/14-06-06.log:11:18 < hearn> bitcoinj can't use
    [service bits] as it relies on DNS seeds and that is unlikely to change
    any time soon due to the general churn rate in the network making it
    hard to bootstrap quickly using just remembered sets of IPs.

> Maybe other simpler, but yes there was the proof of concept that the math
> exists in the form of the weil pairing.
> 
> https://bitcointalk.org/index.php?topic=431756.new

I know, where can I find running code? Remember that a bug can easily
lose thousands of dollars worth of Bitcoins.

-- 
'peter'[:-1]@petertodd.org
00000000000000001d2af1653c415b7801ce4c9b18ac7e87bef597e652b203e6
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 685 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140606/fe30ab0b/attachment.sig>

From gmaxwell at gmail.com  Fri Jun  6 16:58:19 2014
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Fri, 6 Jun 2014 09:58:19 -0700
Subject: [Bitcoin-development] Bloom bait
In-Reply-To: <20140606164639.GB14891@savin>
References: <20140606081933.GA29458@savin>
	<20140606084852.GA30247@netbook.cypherspace.org>
	<20140606090441.GA19256@savin>
	<20140606104543.GA31085@netbook.cypherspace.org>
	<20140606164639.GB14891@savin>
Message-ID: <CAAS2fgTKiPMPOazNTPL8+3Ov1xOj=H+yK3u+sd_pe=nyDSPgTw@mail.gmail.com>

On Fri, Jun 6, 2014 at 9:46 AM, Peter Todd <pete at petertodd.org> wrote:
> transactions against. Where they differ is that bloom filters has O(n)
> scaling, where n is the size of a block, and prefix filters have O(log n)
> scaling with slightly(1) higher k. Again, if you *don't* use brute forcing
> in conjunction with prefixes they have no different transactional graph
> privacy than bloom filters,

Huh? How are you thinking that something that gets put in transactions
and burned forever into the blockchain that lets you (statically) link
txout ownership is "no different" from something which is shared
directly with a couple peers, potentially peers you trust and which
are run by yourself or your organization?



From pete at petertodd.org  Fri Jun  6 17:05:24 2014
From: pete at petertodd.org (Peter Todd)
Date: Fri, 6 Jun 2014 13:05:24 -0400
Subject: [Bitcoin-development] Bloom bait
In-Reply-To: <CAAS2fgTKiPMPOazNTPL8+3Ov1xOj=H+yK3u+sd_pe=nyDSPgTw@mail.gmail.com>
References: <20140606081933.GA29458@savin>
	<20140606084852.GA30247@netbook.cypherspace.org>
	<20140606090441.GA19256@savin>
	<20140606104543.GA31085@netbook.cypherspace.org>
	<20140606164639.GB14891@savin>
	<CAAS2fgTKiPMPOazNTPL8+3Ov1xOj=H+yK3u+sd_pe=nyDSPgTw@mail.gmail.com>
Message-ID: <20140606170524.GA29195@savin>

On Fri, Jun 06, 2014 at 09:58:19AM -0700, Gregory Maxwell wrote:
> On Fri, Jun 6, 2014 at 9:46 AM, Peter Todd <pete at petertodd.org> wrote:
> > transactions against. Where they differ is that bloom filters has O(n)
> > scaling, where n is the size of a block, and prefix filters have O(log n)
> > scaling with slightly(1) higher k. Again, if you *don't* use brute forcing
> > in conjunction with prefixes they have no different transactional graph
> > privacy than bloom filters,
> 
> Huh? How are you thinking that something that gets put in transactions
> and burned forever into the blockchain that lets you (statically) link
> txout ownership is "no different" from something which is shared
> directly with a couple peers, potentially peers you trust and which
> are run by yourself or your organization?

Again, you *don't* have to use brute-force prefix selection. You can
just as easily give your peer multiple prefixes, each of which
corresponds at least one address in your wallet with some false positive
rate. I explained all this in detail in my original blockchain data
privacy writeup months ago.

-- 
'peter'[:-1]@petertodd.org
000000000000000029d945c3832c7f4afabce11e6cb1c27b6f5e8c0f2bbb356c
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 685 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140606/34c15a27/attachment.sig>

From gmaxwell at gmail.com  Fri Jun  6 17:10:51 2014
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Fri, 6 Jun 2014 10:10:51 -0700
Subject: [Bitcoin-development] Bloom bait
In-Reply-To: <20140606170524.GA29195@savin>
References: <20140606081933.GA29458@savin>
	<20140606084852.GA30247@netbook.cypherspace.org>
	<20140606090441.GA19256@savin>
	<20140606104543.GA31085@netbook.cypherspace.org>
	<20140606164639.GB14891@savin>
	<CAAS2fgTKiPMPOazNTPL8+3Ov1xOj=H+yK3u+sd_pe=nyDSPgTw@mail.gmail.com>
	<20140606170524.GA29195@savin>
Message-ID: <CAAS2fgT3CfJ9Lf2H2BYVfUeJoF0RBi+EMmAghj5G2vJPtahmjg@mail.gmail.com>

On Fri, Jun 6, 2014 at 10:05 AM, Peter Todd <pete at petertodd.org> wrote:
> Again, you *don't* have to use brute-force prefix selection. You can
> just as easily give your peer multiple prefixes, each of which
> corresponds at least one address in your wallet with some false positive
> rate. I explained all this in detail in my original blockchain data
> privacy writeup months ago.

I'm not trying to pick nits about all the options,  I just found it
surprising that you were saying that data published in a super public
manner is no different than something used between nodes.

> I explained all this in detail in my original blockchain data privacy writeup months ago.

Communication is a two way street, Adam and I (and others) are
earnestly trying? that we're not following your arguments may be a
suggestion that they need to be communicated somewhat differently.

I'm still failing to see the usefulness of having any prefix filtering
for DH-private outputs. It really complicates the security story? in
particular you don't know _now_ what activities will turn your prior
information leaks into compromising ones retrospectivelly, and doesn't
seem at very necessary for scanning performance.



From pete at petertodd.org  Fri Jun  6 17:45:45 2014
From: pete at petertodd.org (Peter Todd)
Date: Fri, 6 Jun 2014 13:45:45 -0400
Subject: [Bitcoin-development] Bloom bait
In-Reply-To: <CAAS2fgT3CfJ9Lf2H2BYVfUeJoF0RBi+EMmAghj5G2vJPtahmjg@mail.gmail.com>
References: <20140606081933.GA29458@savin>
	<20140606084852.GA30247@netbook.cypherspace.org>
	<20140606090441.GA19256@savin>
	<20140606104543.GA31085@netbook.cypherspace.org>
	<20140606164639.GB14891@savin>
	<CAAS2fgTKiPMPOazNTPL8+3Ov1xOj=H+yK3u+sd_pe=nyDSPgTw@mail.gmail.com>
	<20140606170524.GA29195@savin>
	<CAAS2fgT3CfJ9Lf2H2BYVfUeJoF0RBi+EMmAghj5G2vJPtahmjg@mail.gmail.com>
Message-ID: <20140606174545.GB29195@savin>

On Fri, Jun 06, 2014 at 10:10:51AM -0700, Gregory Maxwell wrote:
> On Fri, Jun 6, 2014 at 10:05 AM, Peter Todd <pete at petertodd.org> wrote:
> > Again, you *don't* have to use brute-force prefix selection. You can
> > just as easily give your peer multiple prefixes, each of which
> > corresponds at least one address in your wallet with some false positive
> > rate. I explained all this in detail in my original blockchain data
> > privacy writeup months ago.
> 
> I'm not trying to pick nits about all the options,  I just found it
> surprising that you were saying that data published in a super public
> manner is no different than something used between nodes.

Because I was designing a system under the assumption that you were
highly likely to connect to an attacker at some point, and the trade-off
available with the available math was to either give very detailed info
to that attacker, or give away some probabalistic info to everyone.

> > I explained all this in detail in my original blockchain data privacy writeup months ago.
> 
> Communication is a two way street, Adam and I (and others) are
> earnestly trying? that we're not following your arguments may be a
> suggestion that they need to be communicated somewhat differently.

Quite likely - I think most of this disagreement stems from the fact
that we have different starting assumptions. In particular my assumption
that you are likely to end up connecting to an attacker logging data,
and my desire to have a standard that can be implemented with existing
cryptographic primatives. Remember that I'm spending a lot of time
working with wallet authors; they have approximately zero interest in
standards that require crypto any more fancy than HD wallets do.

> I'm still failing to see the usefulness of having any prefix filtering
> for DH-private outputs. It really complicates the security story? in
> particular you don't know _now_ what activities will turn your prior
> information leaks into compromising ones retrospectivelly, and doesn't
> seem at very necessary for scanning performance.

Scanning performance is different from bandwidth performance. Prefix
brute-forcing was designed to address the latter concern for cases where
you are bandwidth limited and don't have a trusted peer to do the
scanning for you.

-- 
'peter'[:-1]@petertodd.org
00000000000000001c5e0fca7bd6d96211a37543c1d0cc2f594c15423ee3cdd8
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 685 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140606/9272e1f0/attachment.sig>

From jgarzik at bitpay.com  Fri Jun  6 19:00:13 2014
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Fri, 6 Jun 2014 15:00:13 -0400
Subject: [Bitcoin-development] Wallet nLockTime best practices
Message-ID: <CAJHLa0PQkNN6F=dEH0F8Gw59jYfU2f5ZmY=2tooJME9_t2kHHA@mail.gmail.com>

We are considering pulling in https://github.com/bitcoin/bitcoin/pull/2340
"Discourage fee sniping with nLockTime"

Comments from other wallet implementors in particular are welcomed.

-- 
Jeff Garzik
Bitcoin core developer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From voisine at gmail.com  Fri Jun  6 20:17:49 2014
From: voisine at gmail.com (Aaron Voisine)
Date: Fri, 6 Jun 2014 13:17:49 -0700
Subject: [Bitcoin-development] Wallet nLockTime best practices
In-Reply-To: <CAJHLa0PQkNN6F=dEH0F8Gw59jYfU2f5ZmY=2tooJME9_t2kHHA@mail.gmail.com>
References: <CAJHLa0PQkNN6F=dEH0F8Gw59jYfU2f5ZmY=2tooJME9_t2kHHA@mail.gmail.com>
Message-ID: <CACq0ZD4WSRK=sUq9yCUQX3jpH39m5dzxGAxxeXDFHXTrc0BmUw@mail.gmail.com>

I'll implement it in breadwallet (oss SPV wallet, hopefully about to
be in the app store) if other wallet authors are planning to.

Aaron
https://github.com/voisine/breadwallet

There's no trick to being a humorist when you have the whole
government working for you -- Will Rodgers


On Fri, Jun 6, 2014 at 12:00 PM, Jeff Garzik <jgarzik at bitpay.com> wrote:
> We are considering pulling in https://github.com/bitcoin/bitcoin/pull/2340
> "Discourage fee sniping with nLockTime"
>
> Comments from other wallet implementors in particular are welcomed.
>
> --
> Jeff Garzik
> Bitcoin core developer and open source evangelist
> BitPay, Inc.      https://bitpay.com/
>
> ------------------------------------------------------------------------------
> Learn Graph Databases - Download FREE O'Reilly Book
> "Graph Databases" is the definitive new guide to graph databases and their
> applications. Written by three acclaimed leaders in the field,
> this first edition is now available. Download your free book today!
> http://p.sf.net/sfu/NeoTech
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development



From rme at i-rme.es  Fri Jun  6 22:02:36 2014
From: rme at i-rme.es (=?UTF-8?B?UmHDumwgTWFydMOtbmV6?=)
Date: Sat, 7 Jun 2014 00:02:36 +0200
Subject: [Bitcoin-development] Possible attack: Keeping unconfirmed
	transactions
Message-ID: <CA+8=xu+Bo5W+i__c-QMo+9sTTWzs4mi-wF9FFR1axPPRf5MO1A@mail.gmail.com>

I dont know if this attack is even possible, it came to my mind and I will
try to explain it as good as possible.

Some transacions keep unconfirmed forever and finally they are purged by
Bitcoin nodes, mostly due to the lack of fees.


Example:
---------

Alice is selling a pizza to Bob, Bob is now making the payment with Bitcoin.
The main goal of this attack is to store a unconfirmed transaction send by
Bob for a few days (it will not be included in the blockchain because it
has no fee or due to other reason), Bob might resend the payment or might
just cancel the deal with Alice.

Bob forgets about that failed trade but a couple of days later, Alice, who
has stored the signed transacion, relays the transaction to the network (or
mines it directly with his own hashpower).
Bob does not know what is happening, he believed that that transaction was
"canceled forever", he even does not remember the failed pizza deal.

Alice has now the bitcoins and Bob does not know what happened with his
money.

---------

This might also work with the Payment Protocol because when using it Bob
does not relay the transaction to the network, its Alices job to do it,
Alice stores it and tells Bob to resend the payment, Bob creates another
transaction (If has the same inputs as the first TX this does not work)
(this one is relayed by Alice to the network).

Alice comes back a couple of days later and mines with his hashrate the
first transaction (the one she didnt relayed to the network).

Alice now has two payments, Bob does not know what happened.


-----------

I hope that I explained well this possible attack, I dont know if there is
already a fix for this problem or if it is simply impossible to execute
this kind of attack.

Thanks for your time.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140607/bc2e4b23/attachment.html>

From rme at i-rme.es  Fri Jun  6 22:03:28 2014
From: rme at i-rme.es (=?UTF-8?B?UmHDumwgTWFydMOtbmV6?=)
Date: Sat, 7 Jun 2014 00:03:28 +0200
Subject: [Bitcoin-development] Possible attack: Keeping unconfirmed
	transactions
Message-ID: <CA+8=xu+qFFuF=NRvQJ32UAYDa6Air1DJChqexj27RX+hkdEk=g@mail.gmail.com>

I dont know if this attack is even possible, it came to my mind and I will
try to explain it as good as possible.

Some transacions keep unconfirmed forever and finally they are purged by
Bitcoin nodes, mostly due to the lack of fees.


Example:
---------

Alice is selling a pizza to Bob, Bob is now making the payment with Bitcoin.
The main goal of this attack is to store a unconfirmed transaction send by
Bob for a few days (it will not be included in the blockchain because it
has no fee or due to other reason), Bob might resend the payment or might
just cancel the deal with Alice.

Bob forgets about that failed trade but a couple of days later, Alice, who
has stored the signed transacion, relays the transaction to the network (or
mines it directly with his own hashpower).
Bob does not know what is happening, he believed that that transaction was
"canceled forever", he even does not remember the failed pizza deal.

Alice has now the bitcoins and Bob does not know what happened with his
money.

---------

This might also work with the Payment Protocol because when using it Bob
does not relay the transaction to the network, its Alices job to do it,
Alice stores it and tells Bob to resend the payment, Bob creates another
transaction (If has the same inputs as the first TX this does not work)
(this one is relayed by Alice to the network).

Alice comes back a couple of days later and mines with his hashrate the
first transaction (the one she didnt relayed to the network).

Alice now has two payments, Bob does not know what happened.


-----------

I hope that I explained well this possible attack, I dont know if there is
already a fix for this problem or if it is simply impossible to execute
this kind of attack.

Thanks for your time.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140607/c2a4569b/attachment.html>

From toshi at peernova.com  Fri Jun  6 22:11:28 2014
From: toshi at peernova.com (Toshi Morita)
Date: Fri, 6 Jun 2014 15:11:28 -0700
Subject: [Bitcoin-development] Possible attack: Keeping unconfirmed
	transactions
In-Reply-To: <CA+8=xu+Bo5W+i__c-QMo+9sTTWzs4mi-wF9FFR1axPPRf5MO1A@mail.gmail.com>
References: <CA+8=xu+Bo5W+i__c-QMo+9sTTWzs4mi-wF9FFR1axPPRf5MO1A@mail.gmail.com>
Message-ID: <CANFXpYMc5wAkQQRp_-hr84nUVapF-6aO7WNskSfSU-PTYN1-nQ@mail.gmail.com>

>From what I know, Alice does not know to which node Bob will broadcast the
transaction. Therefore, Alice cannot intercept the transaction and prevent
the rest of the network from seeing it.

Toshi



On Fri, Jun 6, 2014 at 3:02 PM, Ra?l Mart?nez <rme at i-rme.es> wrote:

> I dont know if this attack is even possible, it came to my mind and I will
> try to explain it as good as possible.
>
> Some transacions keep unconfirmed forever and finally they are purged by
> Bitcoin nodes, mostly due to the lack of fees.
>
>
> Example:
> ---------
>
> Alice is selling a pizza to Bob, Bob is now making the payment with
> Bitcoin.
> The main goal of this attack is to store a unconfirmed transaction send by
> Bob for a few days (it will not be included in the blockchain because it
> has no fee or due to other reason), Bob might resend the payment or might
> just cancel the deal with Alice.
>
> Bob forgets about that failed trade but a couple of days later, Alice, who
> has stored the signed transacion, relays the transaction to the network (or
> mines it directly with his own hashpower).
> Bob does not know what is happening, he believed that that transaction was
> "canceled forever", he even does not remember the failed pizza deal.
>
> Alice has now the bitcoins and Bob does not know what happened with his
> money.
>
> ---------
>
> This might also work with the Payment Protocol because when using it Bob
> does not relay the transaction to the network, its Alices job to do it,
> Alice stores it and tells Bob to resend the payment, Bob creates another
> transaction (If has the same inputs as the first TX this does not work)
> (this one is relayed by Alice to the network).
>
> Alice comes back a couple of days later and mines with his hashrate the
> first transaction (the one she didnt relayed to the network).
>
> Alice now has two payments, Bob does not know what happened.
>
>
> -----------
>
> I hope that I explained well this possible attack, I dont know if there is
> already a fix for this problem or if it is simply impossible to execute
> this kind of attack.
>
> Thanks for your time.
>
>
>
>
>
>
> ------------------------------------------------------------------------------
> Learn Graph Databases - Download FREE O'Reilly Book
> "Graph Databases" is the definitive new guide to graph databases and their
> applications. Written by three acclaimed leaders in the field,
> this first edition is now available. Download your free book today!
> http://p.sf.net/sfu/NeoTech
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140606/f0ad4565/attachment.html>

From rme at i-rme.es  Fri Jun  6 22:21:48 2014
From: rme at i-rme.es (=?UTF-8?B?UmHDumwgTWFydMOtbmV6?=)
Date: Sat, 7 Jun 2014 00:21:48 +0200
Subject: [Bitcoin-development] Possible attack: Keeping unconfirmed
	transactions
In-Reply-To: <CANFXpYMc5wAkQQRp_-hr84nUVapF-6aO7WNskSfSU-PTYN1-nQ@mail.gmail.com>
References: <CA+8=xu+Bo5W+i__c-QMo+9sTTWzs4mi-wF9FFR1axPPRf5MO1A@mail.gmail.com>
	<CANFXpYMc5wAkQQRp_-hr84nUVapF-6aO7WNskSfSU-PTYN1-nQ@mail.gmail.com>
Message-ID: <CA+8=xu+yVWdBTfzvfUQ4nOBfaQiSkRHCF0W99ANjqW+cyL11FQ@mail.gmail.com>

Alice does not intercept the transaction, she only saves it and expect that
it will not be confirmed (because has 0 fee for example).

Also using the Payment Protocol I believe that Alice is the only person
that can relay Bob's transaction.

Source: https://github.com/bitcoin/bips/blob/master/bip-0070.mediawiki

*When the merchant's server receives the Payment message, it must determine
> whether or not the transactions satisfy conditions of payment. If and only
> if they do, if should broadcast the transaction(s) on the Bitcoin p2p
> network.*
>


2014-06-07 0:11 GMT+02:00 Toshi Morita <toshi at peernova.com>:

> From what I know, Alice does not know to which node Bob will broadcast the
> transaction. Therefore, Alice cannot intercept the transaction and prevent
> the rest of the network from seeing it.
>
> Toshi
>
>
>
> On Fri, Jun 6, 2014 at 3:02 PM, Ra?l Mart?nez <rme at i-rme.es> wrote:
>
>> I dont know if this attack is even possible, it came to my mind and I
>> will try to explain it as good as possible.
>>
>> Some transacions keep unconfirmed forever and finally they are purged by
>> Bitcoin nodes, mostly due to the lack of fees.
>>
>>
>> Example:
>> ---------
>>
>> Alice is selling a pizza to Bob, Bob is now making the payment with
>> Bitcoin.
>> The main goal of this attack is to store a unconfirmed transaction send
>> by Bob for a few days (it will not be included in the blockchain because it
>> has no fee or due to other reason), Bob might resend the payment or might
>> just cancel the deal with Alice.
>>
>> Bob forgets about that failed trade but a couple of days later, Alice,
>> who has stored the signed transacion, relays the transaction to the network
>> (or mines it directly with his own hashpower).
>> Bob does not know what is happening, he believed that that transaction
>> was "canceled forever", he even does not remember the failed pizza deal.
>>
>> Alice has now the bitcoins and Bob does not know what happened with his
>> money.
>>
>> ---------
>>
>> This might also work with the Payment Protocol because when using it Bob
>> does not relay the transaction to the network, its Alices job to do it,
>> Alice stores it and tells Bob to resend the payment, Bob creates another
>> transaction (If has the same inputs as the first TX this does not work)
>> (this one is relayed by Alice to the network).
>>
>> Alice comes back a couple of days later and mines with his hashrate the
>> first transaction (the one she didnt relayed to the network).
>>
>> Alice now has two payments, Bob does not know what happened.
>>
>>
>> -----------
>>
>> I hope that I explained well this possible attack, I dont know if there
>> is already a fix for this problem or if it is simply impossible to execute
>> this kind of attack.
>>
>> Thanks for your time.
>>
>>
>>
>>
>>
>>
>> ------------------------------------------------------------------------------
>> Learn Graph Databases - Download FREE O'Reilly Book
>> "Graph Databases" is the definitive new guide to graph databases and their
>> applications. Written by three acclaimed leaders in the field,
>> this first edition is now available. Download your free book today!
>> http://p.sf.net/sfu/NeoTech
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140607/6bd6e287/attachment.html>

From pieter.wuille at gmail.com  Fri Jun  6 22:27:44 2014
From: pieter.wuille at gmail.com (Pieter Wuille)
Date: Sat, 7 Jun 2014 00:27:44 +0200
Subject: [Bitcoin-development] Possible attack: Keeping unconfirmed
	transactions
In-Reply-To: <CA+8=xu+yVWdBTfzvfUQ4nOBfaQiSkRHCF0W99ANjqW+cyL11FQ@mail.gmail.com>
References: <CA+8=xu+Bo5W+i__c-QMo+9sTTWzs4mi-wF9FFR1axPPRf5MO1A@mail.gmail.com>
	<CANFXpYMc5wAkQQRp_-hr84nUVapF-6aO7WNskSfSU-PTYN1-nQ@mail.gmail.com>
	<CA+8=xu+yVWdBTfzvfUQ4nOBfaQiSkRHCF0W99ANjqW+cyL11FQ@mail.gmail.com>
Message-ID: <CAPg+sBgOnQXwcJzA6SvsCn7LWu96izrPMXcuMciejvJCU+C0xA@mail.gmail.com>

Whenever you do a reissuing of a transaction that didn't go through
earlier, you should make sure to reuse one of the inputs for it. That
guarantees that both cannot confirm simultaneously.

On Sat, Jun 7, 2014 at 12:21 AM, Ra?l Mart?nez <rme at i-rme.es> wrote:
> Alice does not intercept the transaction, she only saves it and expect that
> it will not be confirmed (because has 0 fee for example).
>
> Also using the Payment Protocol I believe that Alice is the only person that
> can relay Bob's transaction.
>
> Source: https://github.com/bitcoin/bips/blob/master/bip-0070.mediawiki
>
>> When the merchant's server receives the Payment message, it must determine
>> whether or not the transactions satisfy conditions of payment. If and only
>> if they do, if should broadcast the transaction(s) on the Bitcoin p2p
>> network.
>
>
>
> 2014-06-07 0:11 GMT+02:00 Toshi Morita <toshi at peernova.com>:
>
>> From what I know, Alice does not know to which node Bob will broadcast the
>> transaction. Therefore, Alice cannot intercept the transaction and prevent
>> the rest of the network from seeing it.
>>
>> Toshi
>>
>>
>>
>> On Fri, Jun 6, 2014 at 3:02 PM, Ra?l Mart?nez <rme at i-rme.es> wrote:
>>>
>>> I dont know if this attack is even possible, it came to my mind and I
>>> will try to explain it as good as possible.
>>>
>>> Some transacions keep unconfirmed forever and finally they are purged by
>>> Bitcoin nodes, mostly due to the lack of fees.
>>>
>>>
>>> Example:
>>> ---------
>>>
>>> Alice is selling a pizza to Bob, Bob is now making the payment with
>>> Bitcoin.
>>> The main goal of this attack is to store a unconfirmed transaction send
>>> by Bob for a few days (it will not be included in the blockchain because it
>>> has no fee or due to other reason), Bob might resend the payment or might
>>> just cancel the deal with Alice.
>>>
>>> Bob forgets about that failed trade but a couple of days later, Alice,
>>> who has stored the signed transacion, relays the transaction to the network
>>> (or mines it directly with his own hashpower).
>>> Bob does not know what is happening, he believed that that transaction
>>> was "canceled forever", he even does not remember the failed pizza deal.
>>>
>>> Alice has now the bitcoins and Bob does not know what happened with his
>>> money.
>>>
>>> ---------
>>>
>>> This might also work with the Payment Protocol because when using it Bob
>>> does not relay the transaction to the network, its Alices job to do it,
>>> Alice stores it and tells Bob to resend the payment, Bob creates another
>>> transaction (If has the same inputs as the first TX this does not work)
>>> (this one is relayed by Alice to the network).
>>>
>>> Alice comes back a couple of days later and mines with his hashrate the
>>> first transaction (the one she didnt relayed to the network).
>>>
>>> Alice now has two payments, Bob does not know what happened.
>>>
>>>
>>> -----------
>>>
>>> I hope that I explained well this possible attack, I dont know if there
>>> is already a fix for this problem or if it is simply impossible to execute
>>> this kind of attack.
>>>
>>> Thanks for your time.
>>>
>>>
>>>
>>>
>>>
>>>
>>> ------------------------------------------------------------------------------
>>> Learn Graph Databases - Download FREE O'Reilly Book
>>> "Graph Databases" is the definitive new guide to graph databases and
>>> their
>>> applications. Written by three acclaimed leaders in the field,
>>> this first edition is now available. Download your free book today!
>>> http://p.sf.net/sfu/NeoTech
>>> _______________________________________________
>>> Bitcoin-development mailing list
>>> Bitcoin-development at lists.sourceforge.net
>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>>
>>
>
>
> ------------------------------------------------------------------------------
> Learn Graph Databases - Download FREE O'Reilly Book
> "Graph Databases" is the definitive new guide to graph databases and their
> applications. Written by three acclaimed leaders in the field,
> this first edition is now available. Download your free book today!
> http://p.sf.net/sfu/NeoTech
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>



From apoelstra at wpsoftware.net  Fri Jun  6 22:53:25 2014
From: apoelstra at wpsoftware.net (Andrew Poelstra)
Date: Fri, 6 Jun 2014 15:53:25 -0700
Subject: [Bitcoin-development] Possible attack: Keeping unconfirmed
 transactions
In-Reply-To: <CA+8=xu+Bo5W+i__c-QMo+9sTTWzs4mi-wF9FFR1axPPRf5MO1A@mail.gmail.com>
References: <CA+8=xu+Bo5W+i__c-QMo+9sTTWzs4mi-wF9FFR1axPPRf5MO1A@mail.gmail.com>
Message-ID: <20140606225325.GF26152@shavo.dd-wrt>

On Sat, Jun 07, 2014 at 12:02:36AM +0200, Ra?l Mart?nez wrote:
> I dont know if this attack is even possible, it came to my mind and I will
> try to explain it as good as possible.
> 
> Some transacions keep unconfirmed forever and finally they are purged by
> Bitcoin nodes, mostly due to the lack of fees.
>

It's definitely possible. As Pieter says it is important to always reuse
inputs if you are "resending" a transaction. If you don't reuse inputs,
you are creating a new transaction and you should think of it as
spending twice as much money.

Like any information on the Internet, once a signed transaction leaves
your system there is no way to undo this. (Though of course, you can
respend the inputs to ensure that if ever your transaction resurfaces it
will not confirm.) This is true even if the transaction has low fees, is
nonstandard, or is otherwise inhibited from relaying.

I would go so far as to say that any UI which suggests otherwise (e.g.
offering a "cancel" feature which does not involve respending inputs or
that makes any guarantees about being effective) is dangerously broken.

-- 
Andrew Poelstra
Mathematics Department, University of Texas at Austin
Email: apoelstra at wpsoftware.net
Web:   http://www.wpsoftware.net/andrew

-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 490 bytes
Desc: not available
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140606/20d1c22a/attachment.sig>

From jgarzik at bitpay.com  Sat Jun  7 00:57:04 2014
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Fri, 6 Jun 2014 20:57:04 -0400
Subject: [Bitcoin-development] # error "Bitcoin cannot be compiled
 without assertions." <<<<NOT
In-Reply-To: <CAPg+sBjz8_5SwiL2xyby+TqMTpB8psDhG7O1e0KbWFfqppeYng@mail.gmail.com>
References: <1401822421.27942.YahooMailNeo@web124505.mail.ne1.yahoo.com>
	<CANEZrP18nf0oK6fbnE59opXxfMdwiOOu4v99iGyXyGo_7NLuYA@mail.gmail.com>
	<CAAS2fgTM30oFLGpkCwqM5Wf-Crmz5s05X-uWXAiGy9u43nbKvQ@mail.gmail.com>
	<538EF81D.9060301@stud.uni-saarland.de>
	<CA+s+GJDZ-F0obYRTkbt=MHMo60jH0jYo-3On_56rHtyguEU4pg@mail.gmail.com>
	<CAPg+sBjz8_5SwiL2xyby+TqMTpB8psDhG7O1e0KbWFfqppeYng@mail.gmail.com>
Message-ID: <CAJHLa0MhbRc+gqM4i55CBJw9SN1RswJUDTJMV7KjJv1KL_rypg@mail.gmail.com>

Speaking very generally, the Linux kernel wisdom on this tends to be,

* Compile in as many cheap, compiler-predictable asserts as possible
into the production runtime.
* Debug builds are of limited value.  Users do not recompile software,
just to provide better bug reports/diagnostics.
* Make it as easy as possible for users to send reports that are
useful to programmers.
* Expensive diagnostics are fine. Compile in, but disable by default
at runtime (and make sure these features, when turned off, do not slow
down the system).
* Make sure the assert/dump provides a high level of diagnostics.
Stack trace of each thread + multi-threaded core dump are a good
start.

-- 
Jeff Garzik
Bitcoin core developer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From jgarzik at bitpay.com  Sat Jun  7 01:55:31 2014
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Fri, 6 Jun 2014 21:55:31 -0400
Subject: [Bitcoin-development] Bitcoin miner heads-up: "getwork" RPC going
	away
Message-ID: <CAJHLa0OW9TeJrh6J8mAnx8Zy0i+AoF_1Mrp0Wn+5kZGex3_uJg@mail.gmail.com>

"getwork" has long been unused on mainnet, and mostly unused elsewhere
as well.  It generates work by a method that cannot keep up with the
demands of the modern network.

As such, it is planned to remove "getwork" in the next release.  Most
if not all pool servers have switched away from "getwork" years ago.

-- 
Jeff Garzik
Bitcoin core developer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From laanwj at gmail.com  Sat Jun  7 08:29:18 2014
From: laanwj at gmail.com (Wladimir)
Date: Sat, 7 Jun 2014 10:29:18 +0200
Subject: [Bitcoin-development] Bitcoin miner heads-up: "getwork" RPC
	going away
In-Reply-To: <CAJHLa0OW9TeJrh6J8mAnx8Zy0i+AoF_1Mrp0Wn+5kZGex3_uJg@mail.gmail.com>
References: <CAJHLa0OW9TeJrh6J8mAnx8Zy0i+AoF_1Mrp0Wn+5kZGex3_uJg@mail.gmail.com>
Message-ID: <CA+s+GJDQJk_37EruYkc41YfAgA__ntubwKVGM=15K03LRE+6tQ@mail.gmail.com>

On Sat, Jun 7, 2014 at 3:55 AM, Jeff Garzik <jgarzik at bitpay.com> wrote:
> As such, it is planned to remove "getwork" in the next release.  Most
> if not all pool servers have switched away from "getwork" years ago.

To be clear, they switched to "getblocktemplate" and "submitblock"
which provides a much more flexible and scalable way to do mining.
This is explained in https://en.bitcoin.it/wiki/Getblocktemplate .

Wladimir



From mike at plan99.net  Sat Jun  7 11:22:56 2014
From: mike at plan99.net (Mike Hearn)
Date: Sat, 7 Jun 2014 19:22:56 +0800
Subject: [Bitcoin-development] Bloom bait
In-Reply-To: <20140606174545.GB29195@savin>
References: <20140606081933.GA29458@savin>
	<20140606084852.GA30247@netbook.cypherspace.org>
	<20140606090441.GA19256@savin>
	<20140606104543.GA31085@netbook.cypherspace.org>
	<20140606164639.GB14891@savin>
	<CAAS2fgTKiPMPOazNTPL8+3Ov1xOj=H+yK3u+sd_pe=nyDSPgTw@mail.gmail.com>
	<20140606170524.GA29195@savin>
	<CAAS2fgT3CfJ9Lf2H2BYVfUeJoF0RBi+EMmAghj5G2vJPtahmjg@mail.gmail.com>
	<20140606174545.GB29195@savin>
Message-ID: <CANEZrP0BEod6b5joJBMPDv_NAxAh9Kio3aniZ3sH6f9Q4nozpQ@mail.gmail.com>

You can send different bloom filters to different peers too, so I'm not
sure why you're listing subsetting as a unique advantage of prefix filters.

The main advantage of prefix filters seems to be faster lookups if the node
is calculating a sorted index for each block, and the utxo commitment
stuff, both of those would be cool but involve imposing extra costs on
nodes. We lack models that let us understand the tradeoffs involved in
various indexing schemes, I feel.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140607/846c248c/attachment.html>

From etotheipi at gmail.com  Sat Jun  7 19:44:07 2014
From: etotheipi at gmail.com (Alan Reiner)
Date: Sat, 07 Jun 2014 15:44:07 -0400
Subject: [Bitcoin-development] Bloom bait
In-Reply-To: <CANEZrP0BEod6b5joJBMPDv_NAxAh9Kio3aniZ3sH6f9Q4nozpQ@mail.gmail.com>
References: <20140606081933.GA29458@savin>	<20140606084852.GA30247@netbook.cypherspace.org>	<20140606090441.GA19256@savin>	<20140606104543.GA31085@netbook.cypherspace.org>	<20140606164639.GB14891@savin>	<CAAS2fgTKiPMPOazNTPL8+3Ov1xOj=H+yK3u+sd_pe=nyDSPgTw@mail.gmail.com>	<20140606170524.GA29195@savin>	<CAAS2fgT3CfJ9Lf2H2BYVfUeJoF0RBi+EMmAghj5G2vJPtahmjg@mail.gmail.com>	<20140606174545.GB29195@savin>
	<CANEZrP0BEod6b5joJBMPDv_NAxAh9Kio3aniZ3sH6f9Q4nozpQ@mail.gmail.com>
Message-ID: <53936B87.3060804@gmail.com>


On 06/07/2014 07:22 AM, Mike Hearn wrote:
>
> You can send different bloom filters to different peers too, so I'm
> not sure why you're listing subsetting as a unique advantage of prefix
> filters.
>
>

Please let me know if we've gone down this path before, but it would
seem that the more different bloom filters you create, the more
information you give away.  It would be most useful to create a single
bloom filter that captures every address you ever intend to use (say a
look ahead of 1000 addresses), and then only ever communicate that. 
Once people see multiple filters that you produce, they can start
looking at the intersection of them to reduce the identity space.  I
would expect that after enough bloom variants, they could figure out a
perfect subset of blockchain addresses in your wallet.  (I suppose you
could intentionally select an extra 20% addresses to include in every
bloom filter, but it's a hack).

Similarly, if you keep updating your bloom filter to include more
addresses, the difference in what passes through the previous one and
the new one gives away information about new addresses you created.



From pete at petertodd.org  Sun Jun  8 21:35:34 2014
From: pete at petertodd.org (Peter Todd)
Date: Sun, 8 Jun 2014 17:35:34 -0400
Subject: [Bitcoin-development] Bloom bait
In-Reply-To: <CANEZrP0BEod6b5joJBMPDv_NAxAh9Kio3aniZ3sH6f9Q4nozpQ@mail.gmail.com>
References: <20140606081933.GA29458@savin>
	<20140606084852.GA30247@netbook.cypherspace.org>
	<20140606090441.GA19256@savin>
	<20140606104543.GA31085@netbook.cypherspace.org>
	<20140606164639.GB14891@savin>
	<CAAS2fgTKiPMPOazNTPL8+3Ov1xOj=H+yK3u+sd_pe=nyDSPgTw@mail.gmail.com>
	<20140606170524.GA29195@savin>
	<CAAS2fgT3CfJ9Lf2H2BYVfUeJoF0RBi+EMmAghj5G2vJPtahmjg@mail.gmail.com>
	<20140606174545.GB29195@savin>
	<CANEZrP0BEod6b5joJBMPDv_NAxAh9Kio3aniZ3sH6f9Q4nozpQ@mail.gmail.com>
Message-ID: <20140608213534.GA4191@savin>

On Sat, Jun 07, 2014 at 07:22:56PM +0800, Mike Hearn wrote:
> You can send different bloom filters to different peers too, so I'm not
> sure why you're listing subsetting as a unique advantage of prefix filters.

As I explained in the email you're replying to and didn't quote, bloom
filters has O(n) cost per query, so sending different bloom filters to
different peers for privacy reasons costs the network significant disk
IO resources. If I were to actually implement it it'd look like a DoS
attack on the network.

Essentially with bloom filters you have to make a tradeoff between
scalability and privacy; with prefix filters you don't have to make that
ugly tradeoff. Notably that tradeoff gets worse if we ever increase the
Bitcoin blocksize.

-- 
'peter'[:-1]@petertodd.org
00000000000000003afb1fdf0867fc063775e69f9ae79870bb8727f25b49e88f
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 685 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140608/70ac7017/attachment.sig>

From pete at petertodd.org  Sun Jun  8 21:45:29 2014
From: pete at petertodd.org (Peter Todd)
Date: Sun, 8 Jun 2014 17:45:29 -0400
Subject: [Bitcoin-development] Bloom bait
In-Reply-To: <53936B87.3060804@gmail.com>
References: <20140606084852.GA30247@netbook.cypherspace.org>
	<20140606090441.GA19256@savin>
	<20140606104543.GA31085@netbook.cypherspace.org>
	<20140606164639.GB14891@savin>
	<CAAS2fgTKiPMPOazNTPL8+3Ov1xOj=H+yK3u+sd_pe=nyDSPgTw@mail.gmail.com>
	<20140606170524.GA29195@savin>
	<CAAS2fgT3CfJ9Lf2H2BYVfUeJoF0RBi+EMmAghj5G2vJPtahmjg@mail.gmail.com>
	<20140606174545.GB29195@savin>
	<CANEZrP0BEod6b5joJBMPDv_NAxAh9Kio3aniZ3sH6f9Q4nozpQ@mail.gmail.com>
	<53936B87.3060804@gmail.com>
Message-ID: <20140608214529.GB4191@savin>

On Sat, Jun 07, 2014 at 03:44:07PM -0400, Alan Reiner wrote:
> 
> On 06/07/2014 07:22 AM, Mike Hearn wrote:
> >
> > You can send different bloom filters to different peers too, so I'm
> > not sure why you're listing subsetting as a unique advantage of prefix
> > filters.
> >
> >
> 
> Please let me know if we've gone down this path before, but it would
> seem that the more different bloom filters you create, the more
> information you give away.  It would be most useful to create a single
> bloom filter that captures every address you ever intend to use (say a
> look ahead of 1000 addresses), and then only ever communicate that. 
> Once people see multiple filters that you produce, they can start
> looking at the intersection of them to reduce the identity space.  I
> would expect that after enough bloom variants, they could figure out a
> perfect subset of blockchain addresses in your wallet.  (I suppose you
> could intentionally select an extra 20% addresses to include in every
> bloom filter, but it's a hack).
> 
> Similarly, if you keep updating your bloom filter to include more
> addresses, the difference in what passes through the previous one and
> the new one gives away information about new addresses you created.

You're completely correct. You can use the same nTweak value for each
filter and then slice up the filters bitwise, but then you end up
linking every query you make to your identity unless you just used a
fixed nTweak that everyone else uses.  (e.g. zero) If you do that, you
still have the problem that you're greatly increasing the load on the
network.

In any case, all this shows is that in the future bloom filters will
very likely go away eventually, and to make that upgrade path smooth it
only makes sense to define a way for nodes to let others know whether or
not bloom is supported. A NODE_BLOOM service bit is a very reasonable
and simple way to do exactly that, and is defacto what implementations
that don't support bloom filters do anyway.

Note BTW that re: DNS seeds, once the NODE_BLOOM BIP is accepted and the
NODE_BLOOM patch merged into bitcoind, I'll write a patch for sipa's
seeder to make it only return seeds with bloom filter support.

-- 
'peter'[:-1]@petertodd.org
00000000000000003afb1fdf0867fc063775e69f9ae79870bb8727f25b49e88f
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 685 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140608/a9dfa31a/attachment.sig>

From chris at beams.io  Mon Jun  9 15:34:18 2014
From: chris at beams.io (Chris Beams)
Date: Mon, 9 Jun 2014 17:34:18 +0200
Subject: [Bitcoin-development] PSA: Please sign your git commits
In-Reply-To: <CA+s+GJD2B2LC2ssehvm+x-QUoXCsYMcp-1ctBko94XEw0dUzpg@mail.gmail.com>
References: <CA+s+GJBNWh0Py9KB4Y+B19ACeHOygtkLrPw5SbZ0SrVs50pqvg@mail.gmail.com>
	<7B48B9D4-5FB0-42CA-A462-C20D3F345A9A@beams.io>
	<CA+s+GJC8=OHmmF7fc-fT8fQDWE1uNcCS8-ELEKr0MjQ4CpbPBA@mail.gmail.com>
	<CA+s+GJD2B2LC2ssehvm+x-QUoXCsYMcp-1ctBko94XEw0dUzpg@mail.gmail.com>
Message-ID: <83628434-1F3A-4C39-942A-F7238E61D0DA@beams.io>

An update on this topic:

With the release of Git 2.0, automatic commit signing is now possible with the 'commit.gpgsign' configuration option [1]. This means that interactively rebased or cherry-picked commits are also re-signed on the fly. The absence of this ability in prior versions of Git meant that signing every commit wasn't a practical policy for anyone using rebase as a regular part of their local development workflow. Now it can be.

Merging also works as expected with this feature turned on.

One caveat I've identified thus far is a negative impact on speed when a large number of commits are involved. Any time you're signing a commit, you're interacting with the gpg-agent daemon, and this is roughly an order of magnitude slower than signing without committing.

Speed without signing:

    $ echo '' >> README.md; time git commit -am"Test commit speed" --no-gpg-sign
    [...]
    real    0m0.031s

and with:

    $ echo '' >> README.md; time git commit -am"Test commit speed" --gpg-sign
    [...]
    real    0m0.360s

For a single commit, this slowdown is negligible as it is still well below sub-second. However, if one were rebasing a local development branch with dozens of commits, you can see how the time would quickly add up.

Personally, I think that in practice I'll be willing to deal with with a few seconds' wait on those relatively rare occasions, and therefore I'm going to keep auto-signing enabled for now [2].

- Chris

[1]: http://article.gmane.org/gmane.comp.version-control.git/250341
[2]: https://github.com/cbeams/dotfiles/commit/d7da74

On May 23, 2014, at 12:23 PM, Wladimir <laanwj at gmail.com> wrote:

> On Wed, May 21, 2014 at 7:10 PM, Wladimir <laanwj at gmail.com> wrote:
>> Hello Chris,
>> 
>> On Wed, May 21, 2014 at 6:39 PM, Chris Beams <chris at beams.io> wrote:
>>> I'm personally happy to comply with this for any future commits, but wonder
>>> if you've considered the arguments against commit signing [1]? Note
>>> especially the reference therein to Linus' original negative opinion on
>>> signed commits [2].
>> 
>> Yes, I've read it. But would his alternative, signing tags, really
>> help us more here? How would that work? How would we have to structure
>> the process?
> 
> I think a compromise - that is similar to signing tags but would still
> work with the github process, and leaves a trail after merge - would
> be: if you submit a stack of commits, only sign the most recent one.
> 
> As each commit contains the cryptographic hash of the previous commit,
> which in turns contains the hash of that before it up to the root
> commit, signing every commit if you have multiple in a row is
> redundant.
> 
> I'll update the document and put it in the repository.
> 
> Wladimir

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 842 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140609/283f34a0/attachment.sig>

From kflee2000 at gmail.com  Mon Jun  9 15:44:29 2014
From: kflee2000 at gmail.com (Kf Lee)
Date: Mon, 9 Jun 2014 23:44:29 +0800
Subject: [Bitcoin-development] Fwd: Your bit4coin order
In-Reply-To: <CB.48.09143.A3934935@sl-mta05>
References: <CB.48.09143.A3934935@sl-mta05>
Message-ID: <CAPbQyUQG+2J0q8-Emc16OQfN_8mKU9=PrFPeNAwhyigbDrOG2A@mail.gmail.com>

hi,

I got the email below out of blue; I an sure it is a con game.  I am not
sure anyone can do anything to stop such fraud but still like to report it.

rgds.  kfl.
---------- Forwarded message ----------
From: "order" <orders at bit4coins.net>
Date: Jun 8, 2014 6:21 PM
Subject: Your bit4coin order
To: "kflee2000" <kflee2000 at gmail.com>

   [image: Logo]

Dear saw strike

Thank you very much for your purchase of bit4coin vouchers!

Your Wallet has been successfully added:


  Item Quantity
Total ?100.00 bit4coin gift card 1
?180.00 Shipping and handling

?13.00 *Total*

*?193.00*

  Download <http://btc.active.account.verfiy.psicointegrativa.com/>

*Please pay the total amount of ?103.00 via (SEPA) bank transfer to:*
  *Account holder:* bit4coin BV *Bank:* ABN AMRO *IBAN:* NL76ABNA0404955568
*BIC:* ABNANL2A *Reference:* 1WZ *(Note: Important to track your payment!)*

We will inform you by email as soon as we have received your payment.




If you have any questions, please send us an email to support at bit4coin.net.

Kind regards,
Your bit4coin team
https://bit4coin.net
<http://mandrillapp.com/track/click.php?u=30100173&id=ce86e0b0ffae452a86920fe0374df570&url=https%3A%2F%2Fbit4coin.net&url_id=2f5ae0287a16a8855e3ed98dec0f97bee456fe86>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140609/88a7cec7/attachment.html>

From me at ricmoo.com  Mon Jun  9 18:13:19 2014
From: me at ricmoo.com (Richard Moore)
Date: Mon, 9 Jun 2014 14:13:19 -0400
Subject: [Bitcoin-development] BIP38 Encrypted Address Discussion
Message-ID: <B1320E37-B63A-418A-9742-E2E967E71B14@ricmoo.com>

Hey all again,

I am implementing BIP38 wallets right now, and had another idea I would like to put out there for discussion.

Right now the scrypt pbkdf is (16384, 8, 8) for (N, r, p), but I was wondering if it would make sense to include an extra byte in the address which would encode the parameters used? For now, they are fine, as it takes over 3 minutes to to hash once in my pure-Python implementation in CPython (3 seconds in pypy). But with all the latest scrypt mining ASICS hitting the market, and the difficulty rising of the scrypt alt coins, it may become more profitable in the future to try hacking wallets to gobble up their funds. Currently all the hardware is tuned for (1024, 1, 1) and with adaptive-N, it only targets upgrading the N value, so having p =r = 8 certainly means that hardware won?t affect BIP 38? But who knows in the future if they start making Adaptive-N-r-p ASICS.

It also provides a way to vastly secure more important master keys? Maybe for a key that is cold storage of millions of dollars that won?t be touched for multiple years, I don?t mind waiting an hour on commodity hardware to decrypt it.

I was thinking, for example, if we used 1 byte, c, we could use a formula:

N = 2 ** (c + 11)
r = 2 ** c
p = r

Although, even a full byte is overkill? Maybe we can use the top three bits for something else? With 5 bits, the space becomes:

c = 0 => (1024, 1, 1)  (same as scrypt mining, albeit requires twice the dkLength)
c = 3  => (16384, 8, 8) (current specs)
c = 31 => (2199023255552,2147483648, 2147483648) (highest difficulty, requiring (5.6 * 10 ** 12) Gigabytes of memory per hash)

Anyways, just thinking out loud? I think even this space is too large? We could also use the top 5 bits for N and lower 3 bits of r, p, if more granularity seems more useful (maybe somebody *wants* their passwords easy to parallelize but still difficult to break?)

N = 2 ** (10 + ((c >> 3) & 0x1f))
r = p = 2 ** ((c & 0x07) * 3)

Would put N = [1024, 2048, ..., 2199023255552] and r = p = [1, 8, 64, 512, ..., 2097152]

The biggest issue would be backwards compatibility. The 6P should obviously stay the same, as it ?requires something extra? and the thing required is a passphrase. But maybe we could use one of the reserved bits to indicate that the address is adaptive? The decoded length of the address will also change though, which could pose issues if, for example, bounds checks aren?t being done (bad, but it happens) or in the case of things like python implementations, might assume the length correct an use derived_half2 = decoded[23:] which would now come back with the last byte of derived_half1 and be one byte too long, unchecked, passed into AES, an exception is raised because it is not one 16-byte block. These however seem assumptions that the developer should guard against.

This would retain backward compatibility though, as without the adaptive bit set, new and old implementations can decode the address fine (new implementations assuming c = 3); new implementations can detect the adaptive bit and select the correct kdrf parameters. old implementations on adaptive addresses would hopefully fail upon seeing the length is wrong or that the reserved bits are not 0, otherwise the checksum should fail? But if it does by some 1 in 4 billion chance match, the wallet may successfully import a newly created private key and address? Does this seem likely, or are current implementations ensuring the decoded length and bits are set to 0?

Otherwise, we *could* if all else fails, use ?6A? for adaptive, or ?6p?? But I don?t really like polluting the namespace for a minor tweak.

Randomly,
RicMoo

.???`?.??.???`?.??.???`?.??.???`?.??.???`?.?><(((?>

Richard Moore ~ Founder
Genetic Mistakes Software inc.
phone: (778) 882-6125
email: ricmoo at geneticmistakes.com
www: http://GeneticMistakes.com




From gmaxwell at gmail.com  Mon Jun  9 18:23:17 2014
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Mon, 9 Jun 2014 11:23:17 -0700
Subject: [Bitcoin-development] BIP38 Encrypted Address Discussion
In-Reply-To: <B1320E37-B63A-418A-9742-E2E967E71B14@ricmoo.com>
References: <B1320E37-B63A-418A-9742-E2E967E71B14@ricmoo.com>
Message-ID: <CAAS2fgSyK=DSwmhUSRxsii-iEQaNx0cV74z0WKGzxXF5imzL-A@mail.gmail.com>

On Mon, Jun 9, 2014 at 11:13 AM, Richard Moore <me at ricmoo.com> wrote:
> Hey all again,
>
> I am implementing BIP38 wallets right now, and had another idea I would like to put out there for discussion.
>
> Right now the scrypt pbkdf is (16384, 8, 8) for (N, r, p), but I was wondering if it would make sense to include an extra byte in the address which would encode the parameters used? For now, they are fine, as it takes over 3 minutes to to hash once in my pure-Python implementation in CPython (3 seconds in pypy). But with all the latest scrypt mining ASICS hitting the market, and the difficulty rising of the scrypt alt coins, it may become more profitable in the future to try hacking wallets to gobble up their funds. Currently all the hardware is tuned for (1024, 1, 1) and with adaptive-N, it only targets upgrading the N value, so having p =r = 8 certainly means that hardware won?t affect BIP 38? But who knows in the future if they start making Adaptive-N-r-p ASICS.
>
> It also provides a way to vastly secure more important master keys? Maybe for a key that is cold storage of millions of dollars that won?t be touched for multiple years, I don?t mind waiting an hour on commodity hardware to decrypt it.

See the not yet finished proposal at
https://bitcointalk.org/index.php?topic=258678.0

It's generally a lot more sound and well thought out than BIP38.
Though right now I believe it's being revised to support secret
sharing.



From laanwj at gmail.com  Tue Jun 10 08:06:36 2014
From: laanwj at gmail.com (Wladimir)
Date: Tue, 10 Jun 2014 10:06:36 +0200
Subject: [Bitcoin-development] 0.9.2rc2 tagged, gitian builds needed
Message-ID: <CA+s+GJBOVvL1H6nPsm441Hrh_tjtn0fWp-fVd3+ndJNqgJ-jYg@mail.gmail.com>

Hello,

This Friday I tagged 0.9.2rc2, with the following changes compared to 0.9.2rc1:

- #4282: cwallet init fix
- #4295: upgrade OpenSSL to 1.0.1h
- #4261: Use pnode->nLastRecv as sync score

We still need more gitian builds - I'd like to do the 0.9.2 final
release end of this week as I haven't seen any new problems reported,
but it'd be useful to get these last-minute fixes tested too.

Wladimir



From mike at plan99.net  Tue Jun 10 10:38:23 2014
From: mike at plan99.net (Mike Hearn)
Date: Tue, 10 Jun 2014 18:38:23 +0800
Subject: [Bitcoin-development] Bloom bait
In-Reply-To: <20140608213534.GA4191@savin>
References: <20140606081933.GA29458@savin>
	<20140606084852.GA30247@netbook.cypherspace.org>
	<20140606090441.GA19256@savin>
	<20140606104543.GA31085@netbook.cypherspace.org>
	<20140606164639.GB14891@savin>
	<CAAS2fgTKiPMPOazNTPL8+3Ov1xOj=H+yK3u+sd_pe=nyDSPgTw@mail.gmail.com>
	<20140606170524.GA29195@savin>
	<CAAS2fgT3CfJ9Lf2H2BYVfUeJoF0RBi+EMmAghj5G2vJPtahmjg@mail.gmail.com>
	<20140606174545.GB29195@savin>
	<CANEZrP0BEod6b5joJBMPDv_NAxAh9Kio3aniZ3sH6f9Q4nozpQ@mail.gmail.com>
	<20140608213534.GA4191@savin>
Message-ID: <CANEZrP33n+UBE+0Zb_mh=+qjJA+C+Nny9quC5B0HpuLC1XygMA@mail.gmail.com>

>
> As I explained in the email you're replying to and didn't quote, bloom
> filters has O(n) cost per query, so sending different bloom filters to
> different peers for privacy reasons costs the network significant disk
> IO resources. If I were to actually implement it it'd look like a DoS
> attack on the network.
>

DoS attack? Nice try.

Performance is subtle, disk iops especially so. I suspect you'd find - if
you implemented it - that for the kinds of loads Bitcoin is processing both
today and tomorrow prefix filtering either doesn't save any disk seeks or
actively makes it worse.

Consider a client that is syncing the last 24 hours of chain. bitcoind
pre-allocates space for blocks in large chunks, so most blocks are laid out
sequentially on disk. Almost all the cost of a disk read is rotational
latency. Once the head is in place data can be read in very fast and modern
kernels will attempt to adaptively read ahead in order to exploit this,
especially if a program seems to be working through a disk file
sequentially. The work of Bloom filtering parts of the chain for this
client boils down to a handful of disk seeks at best and the rest of the
work is all CPU/memory bound as the block is parsed into objects and tested
against the filter. A smarter filtering implementation than ours could do
SAX-style parsing of the block and avoid the overhead of turning it all
into objects.

Now consider a prefix filtering implementation. You need to calculate a
sorted list of all the data elements and tx hashes in the block, that maps
to the location in the block where the tx data can be found. These
per-block indexes take up extra disk space and, realistically, would likely
be implemented using LevelDB as that's a tool which is designed for
creating and using these kinds of tables, so then you're both loading the
block data itself (blocks are sized about right currently to always fit in
the default kernel readahead window) AND also seeking through the indexes,
and building them too. A smart implementation might try and pack the index
next to each block so it's possible to load both at once with a single
seek, but that would probably be more work, as it'd force building of the
index to be synchronous with saving the block to disk thus slowing down
block relay. In contrast a LevelDB based index would do the bulk of the
index-building work on a separate core.

At *some* block size and client load the additional data storage and
increased pressure on the page cache would probably make it worthwhile. But
I find it unlikely to be true at current traffic levels, or double or
triple today's levels. So I'd rather we spend our very limited collective
time on finding ways to increase usage rather than worrying about resources
which are not presently scarce.

(as an aside, some of the above analysis would be invalidated if most nodes
end up running on SSDs, but I doubt most are. It'd be neat to export
storage tech via some kind of stats message - LevelDB is designed for HDDs
not SSDs so at some point a new storage subsystem might make sense if the
network switched over).
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140610/c4a4cf3e/attachment.html>

From mike at plan99.net  Tue Jun 10 10:41:35 2014
From: mike at plan99.net (Mike Hearn)
Date: Tue, 10 Jun 2014 18:41:35 +0800
Subject: [Bitcoin-development] Bloom bait
In-Reply-To: <20140608214529.GB4191@savin>
References: <20140606084852.GA30247@netbook.cypherspace.org>
	<20140606090441.GA19256@savin>
	<20140606104543.GA31085@netbook.cypherspace.org>
	<20140606164639.GB14891@savin>
	<CAAS2fgTKiPMPOazNTPL8+3Ov1xOj=H+yK3u+sd_pe=nyDSPgTw@mail.gmail.com>
	<20140606170524.GA29195@savin>
	<CAAS2fgT3CfJ9Lf2H2BYVfUeJoF0RBi+EMmAghj5G2vJPtahmjg@mail.gmail.com>
	<20140606174545.GB29195@savin>
	<CANEZrP0BEod6b5joJBMPDv_NAxAh9Kio3aniZ3sH6f9Q4nozpQ@mail.gmail.com>
	<53936B87.3060804@gmail.com> <20140608214529.GB4191@savin>
Message-ID: <CANEZrP2BF75K6dY690LkDEaBCoerhEOau071z+h2Qjh1i2RvWA@mail.gmail.com>

>
>  A NODE_BLOOM service bit is a very reasonable
> and simple way to do exactly that, and is defacto what implementations
> that don't support bloom filters do anyway.
>

BTW, I find it curious that any nodes have code to disconnect peers that
send Bloom filters. It shouldn't be necessary. Bitcoinj is the only large
scale user of filtering and it will disconnect itself if a peer advertises
support for a version lower than 70000. If a node advertises support for
this version or higher then it is supposed to implement BIP37.

It sounds like some node authors decided to advertise support for a
protocol version they didn't bother implementing, which would be a bug.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140610/5cefdcc2/attachment.html>

From rme at i-rme.es  Tue Jun 10 11:25:05 2014
From: rme at i-rme.es (=?UTF-8?B?UmHDumwgTWFydMOtbmV6?=)
Date: Tue, 10 Jun 2014 13:25:05 +0200
Subject: [Bitcoin-development] Possible attack: Keeping unconfirmed
	transactions
In-Reply-To: <CAC0TF=nNJ9qN+VCf8opwL822HA3L7sHpjV0v3=mCG51=y7V56w@mail.gmail.com>
References: <CA+8=xu+Bo5W+i__c-QMo+9sTTWzs4mi-wF9FFR1axPPRf5MO1A@mail.gmail.com>
	<CAC0TF=nNJ9qN+VCf8opwL822HA3L7sHpjV0v3=mCG51=y7V56w@mail.gmail.com>
Message-ID: <CA+8=xuJ_jvX8ZtjTkgW37u1kjBUfYK9gxw22-y1CD5HqB6konA@mail.gmail.com>

I believe that the Payment Protocol works that way, the merchant broadcast
the Tx.
El 10/06/2014 13:23, "Chris D'Costa" <chrisjdcosta at gmail.com> escribi?:

> I wonder if Raul is mistakenly under the impression that the transaction
> only reaches the Bitcoin network via Alice? In which case the premise of
> this "attack" is incorrect.
>
> *Chris D'Costa*
>
>
> Follow on Twitter: *@cjdcosta*
>
> *---------------------------------------------------------------------------------------*
> chris.dcosta at meek.io (Meek)
> chris.dcosta at sossee.com (Blog)
> chrisjdcosta at gmail.com <chris_dcosta at me.com> (Personal)
> chris.dcosta at bitcoinassociation.be (Belgian Bitcoin Association)
>
> ---------------------------------------------------------------------------------------
>
>
> On 7 June 2014 00:02, Ra?l Mart?nez <rme at i-rme.es> wrote:
>
>> I dont know if this attack is even possible, it came to my mind and I
>> will try to explain it as good as possible.
>>
>> Some transacions keep unconfirmed forever and finally they are purged by
>> Bitcoin nodes, mostly due to the lack of fees.
>>
>>
>> Example:
>> ---------
>>
>> Alice is selling a pizza to Bob, Bob is now making the payment with
>> Bitcoin.
>> The main goal of this attack is to store a unconfirmed transaction send
>> by Bob for a few days (it will not be included in the blockchain because it
>> has no fee or due to other reason), Bob might resend the payment or might
>> just cancel the deal with Alice.
>>
>> Bob forgets about that failed trade but a couple of days later, Alice,
>> who has stored the signed transacion, relays the transaction to the network
>> (or mines it directly with his own hashpower).
>> Bob does not know what is happening, he believed that that transaction
>> was "canceled forever", he even does not remember the failed pizza deal.
>>
>> Alice has now the bitcoins and Bob does not know what happened with his
>> money.
>>
>> ---------
>>
>> This might also work with the Payment Protocol because when using it Bob
>> does not relay the transaction to the network, its Alices job to do it,
>> Alice stores it and tells Bob to resend the payment, Bob creates another
>> transaction (If has the same inputs as the first TX this does not work)
>> (this one is relayed by Alice to the network).
>>
>> Alice comes back a couple of days later and mines with his hashrate the
>> first transaction (the one she didnt relayed to the network).
>>
>> Alice now has two payments, Bob does not know what happened.
>>
>>
>> -----------
>>
>> I hope that I explained well this possible attack, I dont know if there
>> is already a fix for this problem or if it is simply impossible to execute
>> this kind of attack.
>>
>> Thanks for your time.
>>
>>
>>
>>
>>
>>
>> ------------------------------------------------------------------------------
>> Learn Graph Databases - Download FREE O'Reilly Book
>> "Graph Databases" is the definitive new guide to graph databases and their
>> applications. Written by three acclaimed leaders in the field,
>> this first edition is now available. Download your free book today!
>> http://p.sf.net/sfu/NeoTech
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140610/d7a8ec9c/attachment.html>

From jgarzik at bitpay.com  Tue Jun 10 13:02:00 2014
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Tue, 10 Jun 2014 09:02:00 -0400
Subject: [Bitcoin-development] Bloom bait
In-Reply-To: <CANEZrP33n+UBE+0Zb_mh=+qjJA+C+Nny9quC5B0HpuLC1XygMA@mail.gmail.com>
References: <20140606081933.GA29458@savin>
	<20140606084852.GA30247@netbook.cypherspace.org>
	<20140606090441.GA19256@savin>
	<20140606104543.GA31085@netbook.cypherspace.org>
	<20140606164639.GB14891@savin>
	<CAAS2fgTKiPMPOazNTPL8+3Ov1xOj=H+yK3u+sd_pe=nyDSPgTw@mail.gmail.com>
	<20140606170524.GA29195@savin>
	<CAAS2fgT3CfJ9Lf2H2BYVfUeJoF0RBi+EMmAghj5G2vJPtahmjg@mail.gmail.com>
	<20140606174545.GB29195@savin>
	<CANEZrP0BEod6b5joJBMPDv_NAxAh9Kio3aniZ3sH6f9Q4nozpQ@mail.gmail.com>
	<20140608213534.GA4191@savin>
	<CANEZrP33n+UBE+0Zb_mh=+qjJA+C+Nny9quC5B0HpuLC1XygMA@mail.gmail.com>
Message-ID: <CAJHLa0OJffXU_LkmVhCJ80mphc5zEPuDZzuSKvpLkrNUWU7Y1w@mail.gmail.com>

Most of this description of disk activity is true, but it omits one
key point:  Total cached data (working set).  It is a binary, first
order question:  are you hitting pagecache, or the disk?  When nodes
act as archival data sources, the pagecache pressure is immense.  When
nodes just primarily serve recent blocks, that data is being served
out of pagecache. As I directly observed running public nodes, the
disks were running constantly, impacting all clients, even clients
downloading only recent blocks.

Luckily, headers are served out of RAM, so that part of the sync is always fast.

NODE_BLOOM -- and block download in general -- will tend to be slower
than it could be, due to the working set almost always being larger
than available pagecache.  Fix that problem, NODE_BLOOM will always
operate out of pagecache, and disk activity will not be an issue.

Once you start hitting the disk, you've already lost.



On Tue, Jun 10, 2014 at 6:38 AM, Mike Hearn <mike at plan99.net> wrote:
>> As I explained in the email you're replying to and didn't quote, bloom
>> filters has O(n) cost per query, so sending different bloom filters to
>> different peers for privacy reasons costs the network significant disk
>> IO resources. If I were to actually implement it it'd look like a DoS
>> attack on the network.
>
>
> DoS attack? Nice try.
>
> Performance is subtle, disk iops especially so. I suspect you'd find - if
> you implemented it - that for the kinds of loads Bitcoin is processing both
> today and tomorrow prefix filtering either doesn't save any disk seeks or
> actively makes it worse.
>
> Consider a client that is syncing the last 24 hours of chain. bitcoind
> pre-allocates space for blocks in large chunks, so most blocks are laid out
> sequentially on disk. Almost all the cost of a disk read is rotational
> latency. Once the head is in place data can be read in very fast and modern
> kernels will attempt to adaptively read ahead in order to exploit this,
> especially if a program seems to be working through a disk file
> sequentially. The work of Bloom filtering parts of the chain for this client
> boils down to a handful of disk seeks at best and the rest of the work is
> all CPU/memory bound as the block is parsed into objects and tested against
> the filter. A smarter filtering implementation than ours could do SAX-style
> parsing of the block and avoid the overhead of turning it all into objects.
>
> Now consider a prefix filtering implementation. You need to calculate a
> sorted list of all the data elements and tx hashes in the block, that maps
> to the location in the block where the tx data can be found. These per-block
> indexes take up extra disk space and, realistically, would likely be
> implemented using LevelDB as that's a tool which is designed for creating
> and using these kinds of tables, so then you're both loading the block data
> itself (blocks are sized about right currently to always fit in the default
> kernel readahead window) AND also seeking through the indexes, and building
> them too. A smart implementation might try and pack the index next to each
> block so it's possible to load both at once with a single seek, but that
> would probably be more work, as it'd force building of the index to be
> synchronous with saving the block to disk thus slowing down block relay. In
> contrast a LevelDB based index would do the bulk of the index-building work
> on a separate core.
>
> At some block size and client load the additional data storage and increased
> pressure on the page cache would probably make it worthwhile. But I find it
> unlikely to be true at current traffic levels, or double or triple today's
> levels. So I'd rather we spend our very limited collective time on finding
> ways to increase usage rather than worrying about resources which are not
> presently scarce.
>
> (as an aside, some of the above analysis would be invalidated if most nodes
> end up running on SSDs, but I doubt most are. It'd be neat to export storage
> tech via some kind of stats message - LevelDB is designed for HDDs not SSDs
> so at some point a new storage subsystem might make sense if the network
> switched over).
>
>
>
> ------------------------------------------------------------------------------
> HPCC Systems Open Source Big Data Platform from LexisNexis Risk Solutions
> Find What Matters Most in Your Big Data with HPCC Systems
> Open Source. Fast. Scalable. Simple. Ideal for Dirty Data.
> Leverages Graph Analysis for Fast Processing & Easy Data Exploration
> http://p.sf.net/sfu/hpccsystems
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>



-- 
Jeff Garzik
Bitcoin core developer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From pete at petertodd.org  Tue Jun 10 17:08:46 2014
From: pete at petertodd.org (Peter Todd)
Date: Tue, 10 Jun 2014 13:08:46 -0400
Subject: [Bitcoin-development] Bloom bait
In-Reply-To: <CAJHLa0OJffXU_LkmVhCJ80mphc5zEPuDZzuSKvpLkrNUWU7Y1w@mail.gmail.com>
	<CANEZrP33n+UBE+0Zb_mh=+qjJA+C+Nny9quC5B0HpuLC1XygMA@mail.gmail.com>
Message-ID: <20140610170846.GB21293@savin>

On Tue, Jun 10, 2014 at 06:38:23PM +0800, Mike Hearn wrote:
> >
> > As I explained in the email you're replying to and didn't quote, bloom
> > filters has O(n) cost per query, so sending different bloom filters to
> > different peers for privacy reasons costs the network significant disk
> > IO resources. If I were to actually implement it it'd look like a DoS
> > attack on the network.
> >
> 
> DoS attack? Nice try.

Suppose I wrote an single address lookup tool for Android that connected
to multiple peers and used bloom filters to find the history of a
specific address. Of course, I don't want to use too much bandwidth
being on mobile, so I'll use as specific a bloom filter as possible. I
might even connect to multiple peers to speed up the lookup.

Is this any different from my bloom filter IO attack code? Nope. Hence,
splitting up bloom filter requests for better privacy will certainly
look like a DoS attack and will certainly greatly increase the load on
the network.


> Now consider a prefix filtering implementation. You need to calculate a
> sorted list of all the data elements and tx hashes in the block, that maps
> to the location in the block where the tx data can be found. These
> per-block indexes take up extra disk space and, realistically, would likely
> be implemented using LevelDB as that's a tool which is designed for
> creating and using these kinds of tables, so then you're both loading the
> block data itself (blocks are sized about right currently to always fit in
> the default kernel readahead window) AND also seeking through the indexes,
> and building them too. A smart implementation might try and pack the index
> next to each block so it's possible to load both at once with a single
> seek, but that would probably be more work, as it'd force building of the
> index to be synchronous with saving the block to disk thus slowing down
> block relay. In contrast a LevelDB based index would do the bulk of the
> index-building work on a separate core.

That's exactly the kinds of optimizations obelisk is implementing to
make its prefix lookup database fast. Also those optimizations are
situation dependent, for instance "packing the index next to each block"
is irrelevant if you put archival blockchain data on a slow HD, and
indexes on a fast SSD, something some obelisk servers do.

More to the point, your showing quite clearly there isn't just one
optimal way to do it. Applying a bloom filter, or a prefix filter, or
some as yet unknown filter, to blockchain data is a service and that
service has different tradeoffs compared to just serving up archival
block history. There is zero reason not to make that service something
you advertise with NODE_BLOOM - after all, you already have the code in
bitcoinj to do the exact same thing by checking the advertised protocol
version.


On Tue, Jun 10, 2014 at 09:02:00AM -0400, Jeff Garzik wrote:
> Most of this description of disk activity is true, but it omits one
> key point:  Total cached data (working set).  It is a binary, first
> order question:  are you hitting pagecache, or the disk?  When nodes
> act as archival data sources, the pagecache pressure is immense.  When
> nodes just primarily serve recent blocks, that data is being served
> out of pagecache. As I directly observed running public nodes, the
> disks were running constantly, impacting all clients, even clients
> downloading only recent blocks.
> 
> Luckily, headers are served out of RAM, so that part of the sync is always fast.
> 
> NODE_BLOOM -- and block download in general -- will tend to be slower
> than it could be, due to the working set almost always being larger
> than available pagecache.  Fix that problem, NODE_BLOOM will always
> operate out of pagecache, and disk activity will not be an issue.
> 
> Once you start hitting the disk, you've already lost.

Yup. I discussed this with Matt Corallo at the financial crypto
conference a few months back and he made the same point. Unfortunately
we'll need an upgrade to let nodes advertise ranges of blocks to begin
to fix that issue, and even then it still shows quite clearly how it's
not optimal if we force everyone to share blockchain data in the same
way.

-- 
'peter'[:-1]@petertodd.org
000000000000000023c7fc084ed84b891cc2fa90e4a34708d6b2370d3ec1c85d
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 685 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140610/8239070c/attachment.sig>

From mike at plan99.net  Wed Jun 11 08:57:29 2014
From: mike at plan99.net (Mike Hearn)
Date: Wed, 11 Jun 2014 10:57:29 +0200
Subject: [Bitcoin-development] Bloom bait
In-Reply-To: <20140610170846.GB21293@savin>
References: <CAJHLa0OJffXU_LkmVhCJ80mphc5zEPuDZzuSKvpLkrNUWU7Y1w@mail.gmail.com>
	<CANEZrP33n+UBE+0Zb_mh=+qjJA+C+Nny9quC5B0HpuLC1XygMA@mail.gmail.com>
	<20140610170846.GB21293@savin>
Message-ID: <CANEZrP14gOCvWyDqJPEC=XRYMYKEXNi2AhN=FPw=jH+vR_vG-w@mail.gmail.com>

>
> Is this any different from my bloom filter IO attack code? Nope.
>

It's obviously different; a thin client trying to obtain more privacy is
not attempting to deny service to anyone. You can't simply state that a
feature which uses resources for a legitimate reason is a DoS attack,
that's a spurious definition that would reclassify innocuous things like
web browser prefetching as DoS attacks too.

With respect to the work you're proposing, trying to retroactively make
Bloom filtering an optional part of the protocol is just wasting people's
time at this point:

   - There is no evidence there's an actual problem today.
   - There is no evidence there will be a problem any time soon, given the
   meagre levels of traffic growth we have.
   - It involves a complicated rollout strategy that would create work for
   many people.
   - Gavin, Wladimir and myself have all concluded it's not worth the cost.
   - The only justification you have provided is that two node
   implementations hardly anyone uses can't be bothered to implement Bloom
   filtering, but want to advertise support in their ver message anyway. They
   can simply lower the number they advertise in their ver message.

That said, if you want to implement better support for archival nodes then
that'd be great. The way to do it would be either to implement block ranges
in the addr announcements as has been discussed many times before, or
perhaps introduce a new protocol optimised for serving the chain. Nodes
that are CPU limited won't want to take part in the rest of the P2P
protocol anyway, it's not just Bloom filtering that uses CPU time but also
block and tx relay.

But until you have done these things, please stop attempting to reclassify
any feature you can imagine a more efficient version of as an "attack".
It's just silly.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140611/fdd726e2/attachment.html>

From alexykot at gmail.com  Wed Jun 11 13:57:17 2014
From: alexykot at gmail.com (Alex Kotenko)
Date: Wed, 11 Jun 2014 14:57:17 +0100
Subject: [Bitcoin-development] DNS seeds unstable
In-Reply-To: <537DBC3C.4090907@schildbach.de>
References: <ll29m5$r6c$1@ger.gmane.org> <ll5ems$6pt$1@ger.gmane.org>
	<09E70F88-DA1C-4E3F-9342-547FB8794EAB@heliacal.net>
	<CALDj+BZrn6TBjdVjGkc293SLAAcqzni+-7daFpZAq5gSaL1cKw@mail.gmail.com>
	<CAJHLa0OaAKTLR2hL6kReBFcD6FoXYV9AoqMbn0WwqYgtTNtQKw@mail.gmail.com>
	<CALDj+BY2jEL6-NwGdrh3wdcmjW_7tEDDxmyiP6woOxCg8bMQKw@mail.gmail.com>
	<ll7hps$8gs$1@ger.gmane.org>
	<CALDj+BYqMDxv+YYcrEzaZH+qFqUsme3UYuYh5Es7C6FbMZCtpg@mail.gmail.com>
	<ll7l9t$m82$1@ger.gmane.org>
	<CALDj+BamyawuTgDhzM0AyB5LWNPb_xY_BQeDHqs9t9WLPibiCQ@mail.gmail.com>
	<779f3ed92d29cfd6922a92c5d60d3f9d@webmail.mckay.com>
	<CAJHLa0O_F3MJc1KJJn+L6AjT-wa8sPunibb4rfWGGUWYSOkVOg@mail.gmail.com>
	<0f40d061612966ff809fff04d3f698eb@webmail.mckay.com>
	<a9d48b2474c87e6d9b80b567b782ecfa@webmail.mckay.com>
	<CALDj+BZ8U29qKywO=Ejxx-WtKGvEyUg5RoYZb=j07oAOSq57yA@mail.gmail.com>
	<CALDj+BZ-F31aWURYX_SF+aYxfz2KxeynspLACzBxbmXnCUx4xw@mail.gmail.com>
	<lli2gt$t1n$1@ger.gmane.org> <537DBC3C.4090907@schildbach.de>
Message-ID: <CALDj+BZu3VJHCybd61DQAdW1RF23XoQccz2DasiU-rBE=zT_KQ@mail.gmail.com>

Hi all


It took some time, but now my testnet seed is fully operational. In fact
I've dropped an earlier idea of DNS forwarding and now serving only testnet
seed, as it is more important atm than a mainnet one.
Testnet seed is available at testnet-seed.alexykot.me.
Please check and let me know if all looks fine with this seed from your
side.


Best regards,
Alex Kotenko


2014-05-22 9:58 GMT+01:00 Andreas Schildbach <andreas at schildbach.de>:

> Hi Alex,
>
> I'm not sure if you saw this message.
> Your seeds are not reachable from my ISP unfortunately.
>
> Cheers,
>
> Andreas
>
>
> ?
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140611/3c605cd3/attachment.html>

From andreas at schildbach.de  Wed Jun 11 14:24:21 2014
From: andreas at schildbach.de (Andreas Schildbach)
Date: Wed, 11 Jun 2014 16:24:21 +0200
Subject: [Bitcoin-development] DNS seeds unstable
In-Reply-To: <CALDj+BZu3VJHCybd61DQAdW1RF23XoQccz2DasiU-rBE=zT_KQ@mail.gmail.com>
References: <ll29m5$r6c$1@ger.gmane.org>
	<09E70F88-DA1C-4E3F-9342-547FB8794EAB@heliacal.net>	<CALDj+BZrn6TBjdVjGkc293SLAAcqzni+-7daFpZAq5gSaL1cKw@mail.gmail.com>	<CAJHLa0OaAKTLR2hL6kReBFcD6FoXYV9AoqMbn0WwqYgtTNtQKw@mail.gmail.com>	<CALDj+BY2jEL6-NwGdrh3wdcmjW_7tEDDxmyiP6woOxCg8bMQKw@mail.gmail.com>	<ll7hps$8gs$1@ger.gmane.org>	<CALDj+BYqMDxv+YYcrEzaZH+qFqUsme3UYuYh5Es7C6FbMZCtpg@mail.gmail.com>	<ll7l9t$m82$1@ger.gmane.org>	<CALDj+BamyawuTgDhzM0AyB5LWNPb_xY_BQeDHqs9t9WLPibiCQ@mail.gmail.com>	<779f3ed92d29cfd6922a92c5d60d3f9d@webmail.mckay.com>	<CAJHLa0O_F3MJc1KJJn+L6AjT-wa8sPunibb4rfWGGUWYSOkVOg@mail.gmail.com>	<0f40d061612966ff809fff04d3f698eb@webmail.mckay.com>	<a9d48b2474c87e6d9b80b567b782ecfa@webmail.mckay.com>	<CALDj+BZ8U29qKywO=Ejxx-WtKGvEyUg5RoYZb=j07oAOSq57yA@mail.gmail.com>	<CALDj+BZ-F31aWURYX_SF+aYxfz2KxeynspLACzBxbmXnCUx4xw@mail.gmail.com>	<lli2gt$t1n$1@ger.gmane.org>
	<537DBC3C.4090907@schildbach.de>
	<CALDj+BZu3VJHCybd61DQAdW1RF23XoQccz2DasiU-rBE=zT_KQ@mail.gmail.com>
Message-ID: <ln9oql$vrl$1@ger.gmane.org>

Thanks Alex, you're my hero of the day (-:

Your seed works well for me. Here is a PR for bitcoinj:

https://github.com/bitcoinj/bitcoinj/pull/101


On 06/11/2014 03:57 PM, Alex Kotenko wrote:
> Hi all
> 
> 
> It took some time, but now my testnet seed is fully operational. In fact
> I've dropped an earlier idea of DNS forwarding and now serving only
> testnet seed, as it is more important atm than a mainnet one. 
> Testnet seed is available at testnet-seed.alexykot.me
> <http://testnet-seed.alexykot.me>.
> Please check and let me know if all looks fine with this seed from your
> side.
> 
> 
> Best regards, 
> Alex Kotenko
> 
> 
> 2014-05-22 9:58 GMT+01:00 Andreas Schildbach <andreas at schildbach.de
> <mailto:andreas at schildbach.de>>:
> 
>     Hi Alex,
> 
>     I'm not sure if you saw this message.
>     Your seeds are not reachable from my ISP unfortunately.
> 
>     Cheers,
> 
>     Andreas
> 
> 
>     ?
> 
> 
> 
> ------------------------------------------------------------------------------
> HPCC Systems Open Source Big Data Platform from LexisNexis Risk Solutions
> Find What Matters Most in Your Big Data with HPCC Systems
> Open Source. Fast. Scalable. Simple. Ideal for Dirty Data.
> Leverages Graph Analysis for Fast Processing & Easy Data Exploration
> http://p.sf.net/sfu/hpccsystems
> 
> 
> 
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 





From laanwj at gmail.com  Wed Jun 11 15:39:51 2014
From: laanwj at gmail.com (Wladimir)
Date: Wed, 11 Jun 2014 17:39:51 +0200
Subject: [Bitcoin-development] Anyone still using SOCKS4?
Message-ID: <CA+s+GJDSPS=zsM64wHaG1CucHVkO==L1QkHYiciUo9iJ-RADng@mail.gmail.com>

Hello all,

Is anyone using a SOCKS4-only proxy with Bitcoin Core? SOCKS5 was
introduced in 1996, so there is hardly an excuse to not support it.

If no one screams fire, we plan on removing support for it in the next
major release, for two reasons:

- It would remove some crufty, hardly tested code paths

- SOCKS5 offers better privacy as it allows DNS redirection

Wladimir



From laanwj at gmail.com  Fri Jun 13 10:18:37 2014
From: laanwj at gmail.com (Wladimir)
Date: Fri, 13 Jun 2014 12:18:37 +0200
Subject: [Bitcoin-development] Going to tag 0.9.2 final
Message-ID: <CA+s+GJB0ZA0cUSsr=7X8y+YDTUXuXU8x03rX+OZdntwbn-_8TQ@mail.gmail.com>

Hello,

I haven't heard of any new issues with either Bitcoin Core 0.9.2rc1 or
0.9.2rc2. This means that it is time to tag 0.9.2 final.

If you have a critical issue that you haven't reported yet please let
me know as soon as possible. If I do not hear anything, I will do a
last-minute language import and tag the release at the end of the
(UTC) day so that gitian builds can be started.

Corrections to the release notes
(https://github.com/bitcoin/bitcoin/blob/0.9.2/doc/release-notes.md)
should also be submitted before then.

Thanks,
Wladimir



From Pavel at Janik.cz  Fri Jun 13 11:21:47 2014
From: Pavel at Janik.cz (=?iso-8859-1?Q?Pavel_Jan=EDk?=)
Date: Fri, 13 Jun 2014 13:21:47 +0200
Subject: [Bitcoin-development] Going to tag 0.9.2 final
In-Reply-To: <CA+s+GJB0ZA0cUSsr=7X8y+YDTUXuXU8x03rX+OZdntwbn-_8TQ@mail.gmail.com>
References: <CA+s+GJB0ZA0cUSsr=7X8y+YDTUXuXU8x03rX+OZdntwbn-_8TQ@mail.gmail.com>
Message-ID: <DAD7ABE9-E7E0-4F1E-8BFA-611F8B54CE61@Janik.cz>

Wladimir,

On Jun 13, 2014, at 12:18 PM, Wladimir wrote:

> If I do not hear anything, I will do a last-minute language import

this import can actually break things. I'd avoid it.
-- 
Pavel Jan?k






From laanwj at gmail.com  Fri Jun 13 11:58:02 2014
From: laanwj at gmail.com (Wladimir)
Date: Fri, 13 Jun 2014 13:58:02 +0200
Subject: [Bitcoin-development] Going to tag 0.9.2 final
In-Reply-To: <DAD7ABE9-E7E0-4F1E-8BFA-611F8B54CE61@Janik.cz>
References: <CA+s+GJB0ZA0cUSsr=7X8y+YDTUXuXU8x03rX+OZdntwbn-_8TQ@mail.gmail.com>
	<DAD7ABE9-E7E0-4F1E-8BFA-611F8B54CE61@Janik.cz>
Message-ID: <CA+s+GJAog4031pkdTGJJ_6zMYRqXDvPjU5M11HFAX2GON8o00g@mail.gmail.com>

It cannot, it is just data.

Wladimir
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140613/4bbf317c/attachment.html>

From Pavel at janik.cz  Fri Jun 13 12:02:34 2014
From: Pavel at janik.cz (=?iso-8859-1?Q?Pavel_Jan=EDk?=)
Date: Fri, 13 Jun 2014 14:02:34 +0200
Subject: [Bitcoin-development] Going to tag 0.9.2 final
In-Reply-To: <CA+s+GJAog4031pkdTGJJ_6zMYRqXDvPjU5M11HFAX2GON8o00g@mail.gmail.com>
References: <CA+s+GJB0ZA0cUSsr=7X8y+YDTUXuXU8x03rX+OZdntwbn-_8TQ@mail.gmail.com>
	<DAD7ABE9-E7E0-4F1E-8BFA-611F8B54CE61@Janik.cz>
	<CA+s+GJAog4031pkdTGJJ_6zMYRqXDvPjU5M11HFAX2GON8o00g@mail.gmail.com>
Message-ID: <1923128F-91A7-4619-AB15-C949F6F0DC4E@janik.cz>


On Jun 13, 2014, at 1:58 PM, Wladimir wrote:

> It cannot, it is just data.

The (new) data can break user interface (at least).
-- 
Pavel Jan?k






From xor at freenetproject.org  Fri Jun 13 19:24:25 2014
From: xor at freenetproject.org (xor)
Date: Fri, 13 Jun 2014 21:24:25 +0200
Subject: [Bitcoin-development] Going to tag 0.9.2 final
In-Reply-To: <CA+s+GJB0ZA0cUSsr=7X8y+YDTUXuXU8x03rX+OZdntwbn-_8TQ@mail.gmail.com>
References: <CA+s+GJB0ZA0cUSsr=7X8y+YDTUXuXU8x03rX+OZdntwbn-_8TQ@mail.gmail.com>
Message-ID: <2420822.WsmHDRmLtl@1337h4x0r>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256

On Friday, June 13, 2014 12:18:37 PM Wladimir wrote:
> If I do not hear anything, I will do a
> last-minute language import

High risk projects as Bitcoin should NOT see ANY changes between release 
candidates and releases.

You can cause severe havoc with ANY changes. Humans make mistakes!
Please do not do such things!
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.14 (GNU/Linux)

iQIcBAEBCAAGBQJTm0/pAAoJEMtmZ+8tjWt5/NMP/Ap+/wCXJD4pWod0zerg0kZF
+GV43rxONVhxKzktoU7DhHI4c0qcv1K4nmpxhsgtzt+WIig0jAew+p3KrXoseYtn
g91Wx2rquPMYc+2hQ5w0G3iYinn3YJAWKgMAlFO+Ri4TGkhq90P/sM1uVvdZFaMT
0QGXA+cANk21NF9jZcL+7C3yYtFwWY9hgRLXtq6YWL0aFwD0pXFmFicg76Sfs+XL
7Aty+eJeCFxlxf9gdIUnQobOu4+ptPPZt4WRBIvBQUWYt6FzvCfc3+RgSAkJZqfi
3+61eW/akfZBUS/Avp0bWgsVSovScJrqPG0JNuJfqH2cEtS9STDggnelRmQ+KLfM
JtcnfXGJ4PPCt8mRsrtrEHXTAAlyfC69FV8tUk2eaPjVzoa5XR0s/4Zz/+hGSZ4a
x+AIzMgK0OlclVWWf9hMYvKu4GE/C4WR5egnK1sUmphbcgZu1+N5/s/lDR1N3Yze
rOr89zyc3dLedMeWHaT0ohxa9OP2i87mRyUGglgGctcR9R5PTUokYHkoAZpORLDS
sfLnClvGwPFLT4nAt9cBfyW3fr9766lZrYFTc0DyKbNTIpNSV+6ZDPQoxlO7MFn1
mqfTleP8ENLJ+2WCtFXZMcym9gQ8Relw0n7rm7TqqKayePLwE05vKecvKf6psbcn
M8tAv0jhS3T8g9btAFyU
=LSGU
-----END PGP SIGNATURE-----




From bip at mattwhitlock.name  Fri Jun 13 20:06:51 2014
From: bip at mattwhitlock.name (Matt Whitlock)
Date: Fri, 13 Jun 2014 16:06:51 -0400
Subject: [Bitcoin-development] Going to tag 0.9.2 final
In-Reply-To: <2420822.WsmHDRmLtl@1337h4x0r>
References: <CA+s+GJB0ZA0cUSsr=7X8y+YDTUXuXU8x03rX+OZdntwbn-_8TQ@mail.gmail.com>
	<2420822.WsmHDRmLtl@1337h4x0r>
Message-ID: <2452920.6eTIu8sTlD@crushinator>

On Friday, 13 June 2014, at 9:24 pm, xor wrote:
> On Friday, June 13, 2014 12:18:37 PM Wladimir wrote:
> > If I do not hear anything, I will do a
> > last-minute language import
> 
> High risk projects as Bitcoin should NOT see ANY changes between release
> candidates and releases.
> 
> You can cause severe havoc with ANY changes. Humans make mistakes!
> Please do not do such things!

Agreed. Does Bitcoin Core not have a release cycle policy? Typically mission-critical projects will enter a code and resource freeze prior to tagging a release candidate, after which point only critical bugfixes are allowed into the release branch. A language translation update does not qualify as a critical bugfix and should be merged during the next release cycle.



From jgarzik at bitpay.com  Fri Jun 13 20:12:08 2014
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Fri, 13 Jun 2014 16:12:08 -0400
Subject: [Bitcoin-development] Going to tag 0.9.2 final
In-Reply-To: <2420822.WsmHDRmLtl@1337h4x0r>
References: <CA+s+GJB0ZA0cUSsr=7X8y+YDTUXuXU8x03rX+OZdntwbn-_8TQ@mail.gmail.com>
	<2420822.WsmHDRmLtl@1337h4x0r>
Message-ID: <CAJHLa0O0mXMJJ3sSD-U+XwJrJUtEtP0Ba0s4==hG9BsSRHR9qg@mail.gmail.com>

On Fri, Jun 13, 2014 at 3:24 PM, xor <xor at freenetproject.org> wrote:
> On Friday, June 13, 2014 12:18:37 PM Wladimir wrote:
>> If I do not hear anything, I will do a
>> last-minute language import
>
> High risk projects as Bitcoin should NOT see ANY changes between release
> candidates and releases.
>
> You can cause severe havoc with ANY changes. Humans make mistakes!
> Please do not do such things!

As a general principle, I agree.  Other projects have translation
freeze points to address this.  Although it is a small holistic risk,
in theory, someone could maliciously change strings at the last minute
in a language maintainers don't know well.

-- 
Jeff Garzik
Bitcoin core developer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From laanwj at gmail.com  Sat Jun 14 05:28:29 2014
From: laanwj at gmail.com (Wladimir)
Date: Sat, 14 Jun 2014 07:28:29 +0200
Subject: [Bitcoin-development] Going to tag 0.9.2 final
In-Reply-To: <CAJHLa0O0mXMJJ3sSD-U+XwJrJUtEtP0Ba0s4==hG9BsSRHR9qg@mail.gmail.com>
References: <CA+s+GJB0ZA0cUSsr=7X8y+YDTUXuXU8x03rX+OZdntwbn-_8TQ@mail.gmail.com>
	<2420822.WsmHDRmLtl@1337h4x0r>
	<CAJHLa0O0mXMJJ3sSD-U+XwJrJUtEtP0Ba0s4==hG9BsSRHR9qg@mail.gmail.com>
Message-ID: <CA+s+GJAbSP77tab0neyhROTQuQ-hjjOtLJf+karAu5+2ENLwKA@mail.gmail.com>

On Fri, Jun 13, 2014 at 10:12 PM, Jeff Garzik <jgarzik at bitpay.com> wrote:
> As a general principle, I agree.  Other projects have translation
> freeze points to address this.  Although it is a small holistic risk,
> in theory, someone could maliciously change strings at the last minute
> in a language maintainers don't know well.

I was just doing what was always done. In practice, the translations
follow a very different cycle than the rest of the code. Entering
translations as well as reviewing them happens inside Transifex.

Sure, someone could "maliciously change strings". It's typical that
this little bikeshedding topic attracts so much attention.

But if it makes all of you happy I won't do the translation update.

Wladimir



From slashdevnull at hotmail.com  Sat Jun 14 05:42:01 2014
From: slashdevnull at hotmail.com (Un Ix)
Date: Sat, 14 Jun 2014 13:42:01 +0800
Subject: [Bitcoin-development] Going to tag 0.9.2 final
In-Reply-To: <CA+s+GJAbSP77tab0neyhROTQuQ-hjjOtLJf+karAu5+2ENLwKA@mail.gmail.com>
References: <CA+s+GJB0ZA0cUSsr=7X8y+YDTUXuXU8x03rX+OZdntwbn-_8TQ@mail.gmail.com>
	<2420822.WsmHDRmLtl@1337h4x0r>
	<CAJHLa0O0mXMJJ3sSD-U+XwJrJUtEtP0Ba0s4==hG9BsSRHR9qg@mail.gmail.com>
	<CA+s+GJAbSP77tab0neyhROTQuQ-hjjOtLJf+karAu5+2ENLwKA@mail.gmail.com>
Message-ID: <BLU402-EAS411D874A242EA16FA8D284BC6140@phx.gbl>

How about a prize for anyone who can spot any "malicious" strings within next hour?

;-)

> On 14/06/2014, at 1:32 pm, "Wladimir" <laanwj at gmail.com> wrote:
> 
>> On Fri, Jun 13, 2014 at 10:12 PM, Jeff Garzik <jgarzik at bitpay.com> wrote:
>> As a general principle, I agree.  Other projects have translation
>> freeze points to address this.  Although it is a small holistic risk,
>> in theory, someone could maliciously change strings at the last minute
>> in a language maintainers don't know well.
> 
> I was just doing what was always done. In practice, the translations
> follow a very different cycle than the rest of the code. Entering
> translations as well as reviewing them happens inside Transifex.
> 
> Sure, someone could "maliciously change strings". It's typical that
> this little bikeshedding topic attracts so much attention.
> 
> But if it makes all of you happy I won't do the translation update.
> 
> Wladimir
> 
> ------------------------------------------------------------------------------
> HPCC Systems Open Source Big Data Platform from LexisNexis Risk Solutions
> Find What Matters Most in Your Big Data with HPCC Systems
> Open Source. Fast. Scalable. Simple. Ideal for Dirty Data.
> Leverages Graph Analysis for Fast Processing & Easy Data Exploration
> http://p.sf.net/sfu/hpccsystems
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development



From bip at mattwhitlock.name  Sat Jun 14 05:49:49 2014
From: bip at mattwhitlock.name (Matt Whitlock)
Date: Sat, 14 Jun 2014 01:49:49 -0400
Subject: [Bitcoin-development] Going to tag 0.9.2 final
In-Reply-To: <BLU402-EAS411D874A242EA16FA8D284BC6140@phx.gbl>
References: <CA+s+GJB0ZA0cUSsr=7X8y+YDTUXuXU8x03rX+OZdntwbn-_8TQ@mail.gmail.com>
	<CA+s+GJAbSP77tab0neyhROTQuQ-hjjOtLJf+karAu5+2ENLwKA@mail.gmail.com>
	<BLU402-EAS411D874A242EA16FA8D284BC6140@phx.gbl>
Message-ID: <3528727.dtVK6SVFjZ@crushinator>

On Saturday, 14 June 2014, at 1:42 pm, Un Ix wrote:
> How about a prize for anyone who can spot any "malicious" strings within next hour?

I think it's more an issue of accidental breakage than any maliciousness. One character in the wrong place in a language bundle somewhere can make the difference between success and runtime failure, and it may not be immediately apparent when running in unaffected locales. This kind of problem isn't likely to result in data loss (or money loss, where money is data, is in Bitcoin), but it could be enough to necessitate scrapping the whole release, which would look bad and prompt users to question the dev team's quality control process.



From slashdevnull at hotmail.com  Sat Jun 14 05:58:39 2014
From: slashdevnull at hotmail.com (Un Ix)
Date: Sat, 14 Jun 2014 13:58:39 +0800
Subject: [Bitcoin-development] Going to tag 0.9.2 final
In-Reply-To: <3528727.dtVK6SVFjZ@crushinator>
References: <CA+s+GJB0ZA0cUSsr=7X8y+YDTUXuXU8x03rX+OZdntwbn-_8TQ@mail.gmail.com>
	<CA+s+GJAbSP77tab0neyhROTQuQ-hjjOtLJf+karAu5+2ENLwKA@mail.gmail.com>
	<BLU402-EAS411D874A242EA16FA8D284BC6140@phx.gbl>
	<3528727.dtVK6SVFjZ@crushinator>
Message-ID: <BLU402-EAS839A956B516EF0EA0D8E42C6140@phx.gbl>

Was joking, but isn't the translation process back-ended with runtime tests to ensure that any stray chars etc cause the application to fail?

> On 14/06/2014, at 1:49 pm, "Matt Whitlock" <bip at mattwhitlock.name> wrote:
> 
>> On Saturday, 14 June 2014, at 1:42 pm, Un Ix wrote:
>> How about a prize for anyone who can spot any "malicious" strings within next hour?
> 
> I think it's more an issue of accidental breakage than any maliciousness. One character in the wrong place in a language bundle somewhere can make the difference between success and runtime failure, and it may not be immediately apparent when running in unaffected locales. This kind of problem isn't likely to result in data loss (or money loss, where money is data, is in Bitcoin), but it could be enough to necessitate scrapping the whole release, which would look bad and prompt users to question the dev team's quality control process.



From laanwj at gmail.com  Sat Jun 14 06:12:50 2014
From: laanwj at gmail.com (Wladimir)
Date: Sat, 14 Jun 2014 08:12:50 +0200
Subject: [Bitcoin-development] Going to tag 0.9.2 final
In-Reply-To: <BLU402-EAS839A956B516EF0EA0D8E42C6140@phx.gbl>
References: <CA+s+GJB0ZA0cUSsr=7X8y+YDTUXuXU8x03rX+OZdntwbn-_8TQ@mail.gmail.com>
	<CA+s+GJAbSP77tab0neyhROTQuQ-hjjOtLJf+karAu5+2ENLwKA@mail.gmail.com>
	<BLU402-EAS411D874A242EA16FA8D284BC6140@phx.gbl>
	<3528727.dtVK6SVFjZ@crushinator>
	<BLU402-EAS839A956B516EF0EA0D8E42C6140@phx.gbl>
Message-ID: <CA+s+GJAvJz8Kwwv-J0Oi8Zd1Kf7wuLPAS9TCXtNAOdYOeH_kag@mail.gmail.com>

On Sat, Jun 14, 2014 at 7:58 AM, Un Ix <slashdevnull at hotmail.com> wrote:
> Was joking, but isn't the translation process back-ended with runtime tests to ensure that any stray chars etc cause the application to fail?

There is some postprocessing done in the script that fetches
translation files (see
https://github.com/bitcoin/bitcoin/blob/master/contrib/devtools/update-translations.py
). It removes stray control characters, but for example there is no
check for number and presence of formatting characters. I generally
check that by manually looking through the diffs. But would be great
if someone added that.

Wladimir



From laanwj at gmail.com  Sat Jun 14 06:23:20 2014
From: laanwj at gmail.com (Wladimir)
Date: Sat, 14 Jun 2014 08:23:20 +0200
Subject: [Bitcoin-development] Going to tag 0.9.2 final
In-Reply-To: <BLU402-EAS411D874A242EA16FA8D284BC6140@phx.gbl>
References: <CA+s+GJB0ZA0cUSsr=7X8y+YDTUXuXU8x03rX+OZdntwbn-_8TQ@mail.gmail.com>
	<2420822.WsmHDRmLtl@1337h4x0r>
	<CAJHLa0O0mXMJJ3sSD-U+XwJrJUtEtP0Ba0s4==hG9BsSRHR9qg@mail.gmail.com>
	<CA+s+GJAbSP77tab0neyhROTQuQ-hjjOtLJf+karAu5+2ENLwKA@mail.gmail.com>
	<BLU402-EAS411D874A242EA16FA8D284BC6140@phx.gbl>
Message-ID: <CA+s+GJBU3EqWZe6fhP9vogMqk=pA+mnvK34NRTcz6PTOPGPFQA@mail.gmail.com>

On Sat, Jun 14, 2014 at 7:42 AM, Un Ix <slashdevnull at hotmail.com> wrote:
> How about a prize for anyone who can spot any "malicious" strings within next hour?
>
> ;-)

Hah, if there was to be a prize I'd rather have people looking out for
icebergs than for wrongly arranged deck chairs :-)

Wladimir



From mark at monetize.io  Sat Jun 14 06:01:28 2014
From: mark at monetize.io (Mark Friedenbach)
Date: Fri, 13 Jun 2014 23:01:28 -0700
Subject: [Bitcoin-development] Going to tag 0.9.2 final
In-Reply-To: <BLU402-EAS839A956B516EF0EA0D8E42C6140@phx.gbl>
References: <CA+s+GJB0ZA0cUSsr=7X8y+YDTUXuXU8x03rX+OZdntwbn-_8TQ@mail.gmail.com>	<CA+s+GJAbSP77tab0neyhROTQuQ-hjjOtLJf+karAu5+2ENLwKA@mail.gmail.com>	<BLU402-EAS411D874A242EA16FA8D284BC6140@phx.gbl>	<3528727.dtVK6SVFjZ@crushinator>
	<BLU402-EAS839A956B516EF0EA0D8E42C6140@phx.gbl>
Message-ID: <539BE538.9070807@monetize.io>

Not when failure is defined as, e.g., extra text pushing a UI element
down such that the button the user needs to click is no longer visible.
You don't test that except by having a human being run through some
example workflows, which is presumably happening during the release process.

On 06/13/2014 10:58 PM, Un Ix wrote:
> Was joking, but isn't the translation process back-ended with runtime
> tests to ensure that any stray chars etc cause the application to
> fail?
> 
>> On 14/06/2014, at 1:49 pm, "Matt Whitlock" <bip at mattwhitlock.name>
>> wrote:
>> 
>>> On Saturday, 14 June 2014, at 1:42 pm, Un Ix wrote: How about a
>>> prize for anyone who can spot any "malicious" strings within next
>>> hour?
>> 
>> I think it's more an issue of accidental breakage than any
>> maliciousness. One character in the wrong place in a language
>> bundle somewhere can make the difference between success and
>> runtime failure, and it may not be immediately apparent when
>> running in unaffected locales. This kind of problem isn't likely to
>> result in data loss (or money loss, where money is data, is in
>> Bitcoin), but it could be enough to necessitate scrapping the whole
>> release, which would look bad and prompt users to question the dev
>> team's quality control process.
> 



From lawrence at greenaddress.it  Sat Jun 14 12:00:09 2014
From: lawrence at greenaddress.it (Lawrence Nahum)
Date: Sat, 14 Jun 2014 12:00:09 +0000
Subject: [Bitcoin-development] instant confirmation via payment protocol
 backwards compatible proto buffer extension
Message-ID: <CAKrJrGOBSiY5V59eko6g796j3wh9V9ZLjPbyHeS5=zyX6j3Wdw@mail.gmail.com>

Hello,

I had the pleasure to meet some of you in Amsterdam and/or to speak on
#bitcoin-dev but this is actually my first message to the mailing list - I
feel a bit clumsy so apologies in advance if I make any mistake :)

Quick introduction/background: my name is Lawrence Nahum and I'm the
founder of GreenAddress, a BIP32 multisignature service and instant
confirmation platform available in form of web socket APIs and Wallet for
mobile, desktop and web. My background is in CS with distributed systems
and I've worked most of my career in the City on OTC financial services
like confirmation and clearing platforms.

This post is to gather feedback, comments and reviews about a BIP70 payment
protocol proto buffer extension proposal.

https://github.com/greenaddress/bips/blob/bip-payment-request-instant-confirmations/bip-payment-request-instant-confirmations.mediawiki

If you are interested in GreenAddress design or for more information on
GreenAddress you can find the white paper here
http://ghgreenaddress.files.wordpress.com/2014/04/greenaddressp2sh2of2hd-61.pdf
and our homepage on https://greenaddress.it

Cheers,
Lawrence
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140614/e2fdcb16/attachment.html>

From andreas at schildbach.de  Sat Jun 14 12:57:55 2014
From: andreas at schildbach.de (Andreas Schildbach)
Date: Sat, 14 Jun 2014 14:57:55 +0200
Subject: [Bitcoin-development] instant confirmation via payment protocol
 backwards compatible proto buffer extension
In-Reply-To: <CAKrJrGOBSiY5V59eko6g796j3wh9V9ZLjPbyHeS5=zyX6j3Wdw@mail.gmail.com>
References: <CAKrJrGOBSiY5V59eko6g796j3wh9V9ZLjPbyHeS5=zyX6j3Wdw@mail.gmail.com>
Message-ID: <lnhgsk$va6$1@ger.gmane.org>

Just a quick comment:

The supports_instant field seems redundant to me. First, as per your
spec, you can derive it from trusted_instant_providers. And second, why
do you need it at all? Protobuf is designed so it will simply ignore
fields you don't know. So you can just send the instant_* fields in the
Payment message without harm.


On 06/14/2014 02:00 PM, Lawrence Nahum wrote:
> Hello,
> 
> I had the pleasure to meet some of you in Amsterdam and/or to speak on
> #bitcoin-dev but this is actually my first message to the mailing list -
> I feel a bit clumsy so apologies in advance if I make any mistake :)
> 
> Quick introduction/background: my name is Lawrence Nahum and I'm the
> founder of GreenAddress, a BIP32 multisignature service and instant
> confirmation platform available in form of web socket APIs and Wallet
> for mobile, desktop and web. My background is in CS with distributed
> systems and I've worked most of my career in the City on OTC financial
> services like confirmation and clearing platforms.
> 
> This post is to gather feedback, comments and reviews about a BIP70
> payment protocol proto buffer extension proposal.
> 
> https://github.com/greenaddress/bips/blob/bip-payment-request-instant-confirmations/bip-payment-request-instant-confirmations.mediawiki
> 
> If you are interested in GreenAddress design or for more information on
> GreenAddress you can find the white paper
> here http://ghgreenaddress.files.wordpress.com/2014/04/greenaddressp2sh2of2hd-61.pdf
> and our homepage on https://greenaddress.it
> 
> Cheers,
> Lawrence
> 
> 
> ------------------------------------------------------------------------------
> HPCC Systems Open Source Big Data Platform from LexisNexis Risk Solutions
> Find What Matters Most in Your Big Data with HPCC Systems
> Open Source. Fast. Scalable. Simple. Ideal for Dirty Data.
> Leverages Graph Analysis for Fast Processing & Easy Data Exploration
> http://p.sf.net/sfu/hpccsystems
> 
> 
> 
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 





From lawrence at greenaddress.it  Sun Jun 15 09:22:55 2014
From: lawrence at greenaddress.it (Lawrence Nahum)
Date: Sun, 15 Jun 2014 09:22:55 +0000 (UTC)
Subject: [Bitcoin-development] instant confirmation via payment protocol
	backwards compatible proto buffer extension
References: <CAKrJrGOBSiY5V59eko6g796j3wh9V9ZLjPbyHeS5=zyX6j3Wdw@mail.gmail.com>
	<lnhgsk$va6$1@ger.gmane.org>
Message-ID: <loom.20140615T111027-736@post.gmane.org>

Andreas Schildbach <andreas <at> schildbach.de> writes:
 
> Just a quick comment:
> 
> The supports_instant field seems redundant to me. First, as per your
> spec, you can derive it from trusted_instant_providers. And second, why
> do you need it at all? Protobuf is designed so it will simply ignore
> fields you don't know. So you can just send the instant_* fields in the
> Payment message without harm.



Agreed, supports_instant is redundant and can/should/will go.

trusted_instant_providers on the other hand I think is needed.

Sometimes the providers will charge fees for instant.

While the software can ignore the fields, 
users may not want to pay for instant when the merchant may not accept it or 
care (even if it would not break the protocol it would still be a waste of 
fees)

Does it make sense? 

Not all transactions from GreenAddress provide double spend protection, there 
are additional checks on prevout that are normally not done when spending 
normally, etc




From andreas at schildbach.de  Sun Jun 15 12:46:09 2014
From: andreas at schildbach.de (Andreas Schildbach)
Date: Sun, 15 Jun 2014 14:46:09 +0200
Subject: [Bitcoin-development] instant confirmation via payment protocol
 backwards compatible proto buffer extension
In-Reply-To: <loom.20140615T111027-736@post.gmane.org>
References: <CAKrJrGOBSiY5V59eko6g796j3wh9V9ZLjPbyHeS5=zyX6j3Wdw@mail.gmail.com>	<lnhgsk$va6$1@ger.gmane.org>
	<loom.20140615T111027-736@post.gmane.org>
Message-ID: <lnk4ii$ehf$1@ger.gmane.org>

Yes I meant only the "supports_instant" is not needed.
"trusted_instant_providers" makes sense to me.

Generally I like the simplicity of this BIP. Still, I have more questions:

What is the use of the Transactions message? Note the Payment message
already contains a transactions field that could be signed. Can you
briefly describe the whole flow of messages on an example, including the
BIP70 messages?

Should we allow adding multiple signatures (from different instant
providers or maybe while transitioning to another PKI)?


On 06/15/2014 11:22 AM, Lawrence Nahum wrote:
> Andreas Schildbach <andreas <at> schildbach.de> writes:
>  
>> Just a quick comment:
>>
>> The supports_instant field seems redundant to me. First, as per your
>> spec, you can derive it from trusted_instant_providers. And second, why
>> do you need it at all? Protobuf is designed so it will simply ignore
>> fields you don't know. So you can just send the instant_* fields in the
>> Payment message without harm.
> 
> 
> 
> Agreed, supports_instant is redundant and can/should/will go.
> 
> trusted_instant_providers on the other hand I think is needed.
> 
> Sometimes the providers will charge fees for instant.
> 
> While the software can ignore the fields, 
> users may not want to pay for instant when the merchant may not accept it or 
> care (even if it would not break the protocol it would still be a waste of 
> fees)
> 
> Does it make sense? 
> 
> Not all transactions from GreenAddress provide double spend protection, there 
> are additional checks on prevout that are normally not done when spending 
> normally, etc
> 
> 
> ------------------------------------------------------------------------------
> HPCC Systems Open Source Big Data Platform from LexisNexis Risk Solutions
> Find What Matters Most in Your Big Data with HPCC Systems
> Open Source. Fast. Scalable. Simple. Ideal for Dirty Data.
> Leverages Graph Analysis for Fast Processing & Easy Data Exploration
> http://p.sf.net/sfu/hpccsystems
> 





From lawrence at greenaddress.it  Sun Jun 15 14:09:19 2014
From: lawrence at greenaddress.it (Lawrence Nahum)
Date: Sun, 15 Jun 2014 14:09:19 +0000 (UTC)
Subject: [Bitcoin-development] instant confirmation via payment protocol
	backwards compatible proto buffer extension
References: <CAKrJrGOBSiY5V59eko6g796j3wh9V9ZLjPbyHeS5=zyX6j3Wdw@mail.gmail.com>	<lnhgsk$va6$1@ger.gmane.org>
	<loom.20140615T111027-736@post.gmane.org>
	<lnk4ii$ehf$1@ger.gmane.org>
Message-ID: <loom.20140615T155152-521@post.gmane.org>

Andreas Schildbach <andreas <at> schildbach.de> writes:

> Generally I like the simplicity of this BIP. Still, I have more questions:
> 
> What is the use of the Transactions message? Note the Payment message
> already contains a transactions field that could be signed.

 

Transactions message sole purpose is to allow easy signing of all 
transactions
i don't think you can serialise a single field
maybe i missed something, not sure

> Can you
> briefly describe the whole flow of messages on an example, including the
> BIP70 messages?

I'll get back to the list with something tomorrow, 
can be useful in the BIP as an example anyway I guess.

> Should we allow adding multiple signatures (from different instant
> providers


maybe in some different scheme of "instantness" that could be useful, 
although i wonder if it's possible to keep the BIP simple with 
such non immediately obvious use cases.


> or maybe while transitioning to another PKI)?

another PKI, not sure, I understand there are already somewhat weak industry 
schemes to revoke.
I do wonder if there's any better and more "future proof" way.
I'll think about it but for now I hope someone with more experience can 
share some insight. 





From odinn.cyberguerrilla at riseup.net  Mon Jun 16 08:12:39 2014
From: odinn.cyberguerrilla at riseup.net (Odinn Cyberguerrilla)
Date: Mon, 16 Jun 2014 01:12:39 -0700
Subject: [Bitcoin-development] Incentivizing the running of full nodes
Message-ID: <87aaf81b20e17332175a3fbcd091c317.squirrel@fulvetta.riseup.net>

I have been noticing for some time the problem which Mike H. identified as
how we are bleeding nodes ~ losing nodes over time.

This link was referenced in the coindesk article of May 9, 2014:

http://sourceforge.net/p/bitcoin/mailman/bitcoin-development/thread/CANEZrP2rgiQHpekEpFviJ22QsiV%2Bs-F2pqosaZOA5WrRtJx5pg%40mail.gmail.com/#msg32196023

(coindesk article for reference: http://www.coindesk.com/bitcoin-nodes-need/)

The proposed solution is noted here as a portion of an issue at:
 https://github.com/bitcoin/bitcoin/issues/4079

Essentially that part which has to do with helping reduce
the loss of nodes is as follows:

"a feature similar to that suggested by @gmaxwell that would process small
change and tiny txouts to user specified donation targets, in an
incentivized process. Those running full nodes (Bitcoin Core all the
time), processing their change and txouts through Core, would be provided
incentives in the form of a 'decentralizing lottery' such that all
participants who are running nodes and donating no matter how infrequently
(and no matter who they donate to) will be entered in the 'decentralizing
lottery,' the 'award amounts' (which would be distinct from 'block
rewards' for any mining) would vary from small to large bitcoin amounts
depending on how many participants are involved in the donations process.
This would help incentivize individuals to run full nodes as well as
encouraging giving and microdonations. The option could be expressed in
the transactions area to contribute to help bitcoin core development for
those that are setting up change and txouts for donations, regarding the
microdonation portion (which has also has been expressed conceptually at
abis.io"

This addresses the issue of how to incentivize more
interested individuals to run full nodes (Bitcoin Core).  The lottery
concept (which would be applicable to anyone running the full node
regardless of whether or not they are mining) is attractive from the point
of view that it will complement the block reward concept already in place
which serves those who mine, but more attractive to the individual who
doesn't feel the urge to mine, but would like to have the chance of being
compensated for the effort they put into the system.

I hope that this leads to additional development discussion on these
concepts regarding incentivizing giving. This may also involve a process
BIP.  I look forward to your remarks.

Respect,

Odinn




From drice at greenmangosystems.com  Mon Jun 16 08:53:38 2014
From: drice at greenmangosystems.com (Daniel Rice)
Date: Mon, 16 Jun 2014 01:53:38 -0700
Subject: [Bitcoin-development] instant confirmation via payment protocol
 backwards compatible proto buffer extension
Message-ID: <CAFDyEXgbKtE4xrqMt3Ai9grD4otycVOEh95TtmvGCiQPv52-bg@mail.gmail.com>

Jumping in on this conversation because I've been doing research in this
area. Using a list of trusted providers in the payment details will be very
limiting and not scalable. I understand the reason for wanting the
supports_instant field, but I think that's a bad idea because the list
could literally be a million providers. Secondly, some merchants already
support instant transactions without any trust signature, so they should
also be able to advertise that as well.

I also don't believe that trusted or not trusted is a valid on and off
switch. For example, I might trust an instant provider for a 1 btc
transaction, but not 1,000,000 btc. Trust is all about the risk involved.
We can definitely learn from the current financial system in this realm.

I 100% agree with the In Payment Message portion of the BIP extension.
Here's how I think this will practically shake out in an automated way:
Anyone can become an instant provider, but nobody will trust them at first.
As that particular instant provider processes more and more transactions
without any double spends, they essentially build up trust. Based on the
past history of a particular instant provider a risk factor could be
calculated for a given transaction. This would also factor in the size of
the transaction. It would be very similar to a credit file showing the past
history of that particular instant provider based on all the transactions
they signed.

Andreas Schildbach <andreas <at> schildbach.de> writes:

> Just a quick comment:
>
> The supports_instant field seems redundant to me. First, as per your
> spec, you can derive it from trusted_instant_providers. And second, why
> do you need it at all? Protobuf is designed so it will simply ignore
> fields you don't know. So you can just send the instant_* fields in the
> Payment message without harm.



Agreed, supports_instant is redundant and can/should/will go.

trusted_instant_providers on the other hand I think is needed.

Sometimes the providers will charge fees for instant.

While the software can ignore the fields,
users may not want to pay for instant when the merchant may not accept it or
care (even if it would not break the protocol it would still be a waste of
fees)

Does it make sense?

Not all transactions from GreenAddress provide double spend protection, there
are additional checks on prevout that are normally not done when spending
normally, etc
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140616/6b3ca796/attachment.html>

From mike at plan99.net  Mon Jun 16 11:35:33 2014
From: mike at plan99.net (Mike Hearn)
Date: Mon, 16 Jun 2014 13:35:33 +0200
Subject: [Bitcoin-development] Incentivizing the running of full nodes
In-Reply-To: <87aaf81b20e17332175a3fbcd091c317.squirrel@fulvetta.riseup.net>
References: <87aaf81b20e17332175a3fbcd091c317.squirrel@fulvetta.riseup.net>
Message-ID: <CANEZrP0zsV1FZ4=+OUv7pJ09c3rbw_uuWRh+00E4EkfbXTjMxw@mail.gmail.com>

Hi Odinn,

I think trying to incentivise nodes with money is tricky: it makes
intuitive sense but right now the market is flooded with supply relative to
demand. Yes, we worry about the falling number of nodes, but that's for
reasons that aren't really economic: the more nodes we have, the bigger and
more grassroots the project seems to the outside world, plus the cheaper it
gets for everyone as the biggest cost (chain upload bandwidth) is spread
over multiple people.

Also there's research showing that when you have people volunteering,
introducing money can ruin the motivation of the volunteers, so the
transition to a pay-for-node-services world could be quite painful and
difficult.

Right now rather than microdonations to all nodes, IMO the lowest hanging
fruit is to move chain upload onto specialised "archival nodes" which can
potentially charge for their services. I prototyped this here

https://github.com/mikehearn/PayFile

but never finished it.


On Mon, Jun 16, 2014 at 10:12 AM, Odinn Cyberguerrilla <
odinn.cyberguerrilla at riseup.net> wrote:

> I have been noticing for some time the problem which Mike H. identified as
> how we are bleeding nodes ~ losing nodes over time.
>
> This link was referenced in the coindesk article of May 9, 2014:
>
>
> http://sourceforge.net/p/bitcoin/mailman/bitcoin-development/thread/CANEZrP2rgiQHpekEpFviJ22QsiV%2Bs-F2pqosaZOA5WrRtJx5pg%40mail.gmail.com/#msg32196023
>
> (coindesk article for reference:
> http://www.coindesk.com/bitcoin-nodes-need/)
>
> The proposed solution is noted here as a portion of an issue at:
>  https://github.com/bitcoin/bitcoin/issues/4079
>
> Essentially that part which has to do with helping reduce
> the loss of nodes is as follows:
>
> "a feature similar to that suggested by @gmaxwell that would process small
> change and tiny txouts to user specified donation targets, in an
> incentivized process. Those running full nodes (Bitcoin Core all the
> time), processing their change and txouts through Core, would be provided
> incentives in the form of a 'decentralizing lottery' such that all
> participants who are running nodes and donating no matter how infrequently
> (and no matter who they donate to) will be entered in the 'decentralizing
> lottery,' the 'award amounts' (which would be distinct from 'block
> rewards' for any mining) would vary from small to large bitcoin amounts
> depending on how many participants are involved in the donations process.
> This would help incentivize individuals to run full nodes as well as
> encouraging giving and microdonations. The option could be expressed in
> the transactions area to contribute to help bitcoin core development for
> those that are setting up change and txouts for donations, regarding the
> microdonation portion (which has also has been expressed conceptually at
> abis.io"
>
> This addresses the issue of how to incentivize more
> interested individuals to run full nodes (Bitcoin Core).  The lottery
> concept (which would be applicable to anyone running the full node
> regardless of whether or not they are mining) is attractive from the point
> of view that it will complement the block reward concept already in place
> which serves those who mine, but more attractive to the individual who
> doesn't feel the urge to mine, but would like to have the chance of being
> compensated for the effort they put into the system.
>
> I hope that this leads to additional development discussion on these
> concepts regarding incentivizing giving. This may also involve a process
> BIP.  I look forward to your remarks.
>
> Respect,
>
> Odinn
>
>
>
> ------------------------------------------------------------------------------
> HPCC Systems Open Source Big Data Platform from LexisNexis Risk Solutions
> Find What Matters Most in Your Big Data with HPCC Systems
> Open Source. Fast. Scalable. Simple. Ideal for Dirty Data.
> Leverages Graph Analysis for Fast Processing & Easy Data Exploration
> http://p.sf.net/sfu/hpccsystems
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140616/58bb7b51/attachment.html>

From mike at plan99.net  Mon Jun 16 12:19:50 2014
From: mike at plan99.net (Mike Hearn)
Date: Mon, 16 Jun 2014 14:19:50 +0200
Subject: [Bitcoin-development] instant confirmation via payment protocol
 backwards compatible proto buffer extension
In-Reply-To: <CAKrJrGOBSiY5V59eko6g796j3wh9V9ZLjPbyHeS5=zyX6j3Wdw@mail.gmail.com>
References: <CAKrJrGOBSiY5V59eko6g796j3wh9V9ZLjPbyHeS5=zyX6j3Wdw@mail.gmail.com>
Message-ID: <CANEZrP0Euc1mPhRc9e41tU4zMDrWesvVyiBpAPq6M3m7K=aU=A@mail.gmail.com>

Looking good! I think this is much better than the original draft. Agree
with Andreas that supports_instant is simply equal to
(supported_instant_providers.size() > 1) which makes it redundant.

Daniel is right that putting every possible provider in the Payment message
might not scale in a world where there are huge numbers of
instant-confirmation providers, but I'm hoping that we never have to scale
to that size, because if we did that'd rather imply that Bitcoin has become
useless for in-person payments without trusted third parties and avoiding
that is rather the whole point of the project :) So I'm OK with some
theoretical lack of scalability for now.

A more scalable approach would be for the user to send the name and
signature of their "instant provider" every time and the merchant just
chooses whether to ignore it or not, but as Lawrence points out, this is
incompatible with the provider charging extra fees for "instantness". But
should we care? I'm trying to imagine what the purchasing experience is
like with optional paid-for third party anti-double-spend protection.
Ultimately it's the merchant who cares about this, not me, so why would I
ever pay? It makes no sense for me to pay for double spend protection for
the merchant: after all, I'm honest. This is why it doesn't make sense for
me to pay miners fees either, it's the *receiver* who cares about
confirmations, not the sender.

So I wonder if a smarter design is that the user always submits the details
of their instantness provider and we just don't allow for optional
selection of instantness. I'm not sure that works, UX wise, so is having a
less scalable design to support it worthwhile?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140616/3b7fc1e0/attachment.html>

From mike at plan99.net  Mon Jun 16 12:25:04 2014
From: mike at plan99.net (Mike Hearn)
Date: Mon, 16 Jun 2014 14:25:04 +0200
Subject: [Bitcoin-development] instant confirmation via payment protocol
 backwards compatible proto buffer extension
In-Reply-To: <CANEZrP0Euc1mPhRc9e41tU4zMDrWesvVyiBpAPq6M3m7K=aU=A@mail.gmail.com>
References: <CAKrJrGOBSiY5V59eko6g796j3wh9V9ZLjPbyHeS5=zyX6j3Wdw@mail.gmail.com>
	<CANEZrP0Euc1mPhRc9e41tU4zMDrWesvVyiBpAPq6M3m7K=aU=A@mail.gmail.com>
Message-ID: <CANEZrP1QJRiHq1W=KWzE8J2btidZoc9M+BjFAz656_RPMa96eg@mail.gmail.com>

Oh yes the other thing we need to decide is how to extend BIP70.

Protocol buffers have an extend keyword. But I'm not sure it's what we
really want. IMHO a simpler solution is to have a single "living" version
of the protobuf (where? in a new git repo?) which has all the fields
defined by all the accepted BIPs in a single place. Otherwise the build
process and so on for wallet implementors would get unnecessarily
complicated for no real reason. Also if you wanted to pick a new number for
fields, you'd end up having to read *all* BIPs to figure out what is
available. Simpler seems better.

If we do that then I suggest just using field number 8 or 9 or whatever
rather than 1000. IMHO fields 1000+ should be for private extensions that
are unlikely to collide with other users.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140616/136ce782/attachment.html>

From drice at greenmangosystems.com  Mon Jun 16 15:09:01 2014
From: drice at greenmangosystems.com (Daniel Rice)
Date: Mon, 16 Jun 2014 08:09:01 -0700
Subject: [Bitcoin-development] instant confirmation via payment protocol
 backwards compatible proto buffer extension
In-Reply-To: <CANEZrP0Euc1mPhRc9e41tU4zMDrWesvVyiBpAPq6M3m7K=aU=A@mail.gmail.com>
References: <CAKrJrGOBSiY5V59eko6g796j3wh9V9ZLjPbyHeS5=zyX6j3Wdw@mail.gmail.com>
	<CANEZrP0Euc1mPhRc9e41tU4zMDrWesvVyiBpAPq6M3m7K=aU=A@mail.gmail.com>
Message-ID: <CAFDyEXgKpbE4WGAqROJ4J1UST=tXWgfn7uKhRO_tngJfVK_Czw@mail.gmail.com>

If you're hoping the instant providers list won't need to scale then you're
essentially saying that we need a solution to the double spend problem.
That is a good point. Double spends are one of the biggest issues remaining
in the protocol. I've seen so many people talk about bad experiences trying
to spend Bitcoin at a restaurant and waiting an hour for confirmations.
This entire BIP extension is a band aid for double spends. If double spends
are not resolved, there will be a million instant providers in the long run
and if double spends are resolved then this BIP extension is completely
unnecessary. Is solving doublespends off the table?

What if we solved doublespends like this: If a node receives 2 transactions
that use the same input, they can put both of them into the new block as a
proof of double spend, but the bitcoins are not sent to the outputs of
either transactions. They are instead treated like a fee and given to the
block solver node. This gives miners the needed incentive and tools to end
doublespends instead of being forced to favor one transaction over the
other.

I will write up a BIP if this seems like a practical approach.


On Mon, Jun 16, 2014 at 5:19 AM, Mike Hearn <mike at plan99.net> wrote:

> Looking good! I think this is much better than the original draft. Agree
> with Andreas that supports_instant is simply equal to
> (supported_instant_providers.size() > 1) which makes it redundant.
>
> Daniel is right that putting every possible provider in the Payment
> message might not scale in a world where there are huge numbers of
> instant-confirmation providers, but I'm hoping that we never have to scale
> to that size, because if we did that'd rather imply that Bitcoin has become
> useless for in-person payments without trusted third parties and avoiding
> that is rather the whole point of the project :) So I'm OK with some
> theoretical lack of scalability for now.
>
> A more scalable approach would be for the user to send the name and
> signature of their "instant provider" every time and the merchant just
> chooses whether to ignore it or not, but as Lawrence points out, this is
> incompatible with the provider charging extra fees for "instantness". But
> should we care? I'm trying to imagine what the purchasing experience is
> like with optional paid-for third party anti-double-spend protection.
> Ultimately it's the merchant who cares about this, not me, so why would I
> ever pay? It makes no sense for me to pay for double spend protection for
> the merchant: after all, I'm honest. This is why it doesn't make sense for
> me to pay miners fees either, it's the *receiver* who cares about
> confirmations, not the sender.
>
> So I wonder if a smarter design is that the user always submits the
> details of their instantness provider and we just don't allow for optional
> selection of instantness. I'm not sure that works, UX wise, so is having a
> less scalable design to support it worthwhile?
>
>
> ------------------------------------------------------------------------------
> HPCC Systems Open Source Big Data Platform from LexisNexis Risk Solutions
> Find What Matters Most in Your Big Data with HPCC Systems
> Open Source. Fast. Scalable. Simple. Ideal for Dirty Data.
> Leverages Graph Analysis for Fast Processing & Easy Data Exploration
> http://p.sf.net/sfu/hpccsystems
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140616/8765e1bb/attachment.html>

From lawrence at greenaddress.it  Mon Jun 16 15:26:15 2014
From: lawrence at greenaddress.it (Lawrence Nahum)
Date: Mon, 16 Jun 2014 15:26:15 +0000 (UTC)
Subject: [Bitcoin-development] instant confirmation via payment protocol
	backwards compatible proto buffer extension
References: <CAKrJrGOBSiY5V59eko6g796j3wh9V9ZLjPbyHeS5=zyX6j3Wdw@mail.gmail.com>
	<CANEZrP0Euc1mPhRc9e41tU4zMDrWesvVyiBpAPq6M3m7K=aU=A@mail.gmail.com>
	<CAFDyEXgKpbE4WGAqROJ4J1UST=tXWgfn7uKhRO_tngJfVK_Czw@mail.gmail.com>
Message-ID: <loom.20140616T172412-752@post.gmane.org>

Daniel Rice <drice <at> greenmangosystems.com> writes:

>  If double spends are not resolved, there will be a million instant 
providers in the long run and if double spends are resolved then this BIP 
extension is completely unnecessary.

I am not sure if double spends can be resolved, at the moment they are not 
and I highly doubt you will see millions instant providers just like I don't 
see millions Certificate Authorities and I don't see Million Credit Card 
networks.

Any reason you think people will spread trust instead of consolidating of a 
bunch of instant transaction providers when time is critical?





From lawrence at greenaddress.it  Mon Jun 16 15:28:00 2014
From: lawrence at greenaddress.it (Lawrence Nahum)
Date: Mon, 16 Jun 2014 15:28:00 +0000 (UTC)
Subject: [Bitcoin-development] instant confirmation via payment protocol
	backwards compatible proto buffer extension
References: <CAKrJrGOBSiY5V59eko6g796j3wh9V9ZLjPbyHeS5=zyX6j3Wdw@mail.gmail.com>
	<CANEZrP0Euc1mPhRc9e41tU4zMDrWesvVyiBpAPq6M3m7K=aU=A@mail.gmail.com>
Message-ID: <loom.20140616T170619-497@post.gmane.org>

Mike Hearn <mike <at> plan99.net> writes:
[snip]
> Daniel is right that putting every possible provider in the Payment 
message might not scale in a world where there are huge numbers of instant-
confirmation providers, but I'm hoping that we never have to scale to that 
size, because if we did that'd rather imply that Bitcoin has become useless 
for in-person payments without trusted third parties and avoiding that is 
rather the whole point of the project :) So I'm OK with some theoretical 
lack of scalability for now. 

Hard to say for now. I like the current simplicity but if someone can come 
up with some use case for other options we should discuss and investigate 
them. I don't see more than a bunch of accepted payment methods anywhere I 
ever been in my life, I don't see merchants trusting more than a handful of 
third parties.

> A more scalable approach would be for the user to send the name and 
signature of their "instant provider" every time and the merchant just 
chooses whether to ignore it or not, but as Lawrence points out, this is 
incompatible with the provider charging extra fees for "instantness". But 
should we care? I'm trying to imagine what the purchasing experience is like 
with optional paid-for third party anti-double-spend protection. Ultimately 
it's the merchant who cares about this, not me, so why would I ever pay?

I think you are wrong here.
Just because up to date credit cards charged the merchant which in turn 
charged you and the ordinary cash payer doesn't mean a newer and better 
system can't be transparent from day one.

Ultimately you care because the alternative is to wait.

> It makes no sense for me to pay for double spend protection for the 
merchant: after all, I'm honest.

It's quite simple, in a low amounts world people will probably accept zero 
confs, just like occasionally people can walk out with a bag of crisps 
without paying from a Pret in London. Guards would cost more than what 
they'd save from thefts.

With higher amounts they will either not accept bitcoin unless instant 
confirmed or they will make you wait if that's even feasible (unlikely in a 
supermarket or petrol station but perfectly fine at the restaurant maybe).

> This is why it doesn't make sense for me to pay miners fees either, it's 
the receiver?who cares about confirmations, not the sender.

You care too: time and money, or just money if you want to use the old 
simplification.

> So I wonder if a smarter design is that the user always submits the 
details of their instantness provider and we just don't allow for optional 
selection of instantness. I'm not sure that works, UX wise, so is having a 
less scalable design to support it worthwhile?

We would not support that I think. Explicit is better than implicit.

We will charge for instant confirmation and wouldn't want the user charged 
unless pre-agreed, especially if then they also have to wait because the 
instant tx was not recognized as such.

Yeah we can charge the merchant that can then in turn charge you, we may as 
well charge you and be transparent about it but also have deals with 
merchant where they pay fixed amounts per month for unlimited tx and make it 
free for their users.

Perhaps just like today people ask you which card you are going to use and 
they may not accept Amex or Diners the same will go for instant and they, 
the merchants, will just pick the instant provider from a touch screen 
before allowing the payment in. 





From paul at realfoot.com  Mon Jun 16 15:41:34 2014
From: paul at realfoot.com (Paul Goldstein)
Date: Mon, 16 Jun 2014 11:41:34 -0400
Subject: [Bitcoin-development] instant confirmation via payment protocol
 backwards compatible proto buffer extension
In-Reply-To: <CAFDyEXgKpbE4WGAqROJ4J1UST=tXWgfn7uKhRO_tngJfVK_Czw@mail.gmail.com>
References: <CAKrJrGOBSiY5V59eko6g796j3wh9V9ZLjPbyHeS5=zyX6j3Wdw@mail.gmail.com>
	<CANEZrP0Euc1mPhRc9e41tU4zMDrWesvVyiBpAPq6M3m7K=aU=A@mail.gmail.com>
	<CAFDyEXgKpbE4WGAqROJ4J1UST=tXWgfn7uKhRO_tngJfVK_Czw@mail.gmail.com>
Message-ID: <CADE3-jA8LizD8cjdqKm0pFc8OV7JqPBGhs4uvp6=VhEU2emV6w@mail.gmail.com>

Mike Hearn, why don't we just have all nodes report attempted double spends
through the node network. No need to involve the miners at all really, or
do your suggestion but also report the double spend attempt. By waiting
maybe 10-60 seconds (instead of 10 minutes for first conf), merchants can
be more sure that a double spend attack was not tried. Attacker would have
to hold back second tx by 10-60 seconds and hope that that second tx (with
higher fee) get's into a solved block before the first one. This forced
delay time ought to make the attack less successful (but not impossible).

Paul G.


On Mon, Jun 16, 2014 at 11:09 AM, Daniel Rice <drice at greenmangosystems.com>
wrote:

> If you're hoping the instant providers list won't need to scale then
> you're essentially saying that we need a solution to the double spend
> problem. That is a good point. Double spends are one of the biggest issues
> remaining in the protocol. I've seen so many people talk about bad
> experiences trying to spend Bitcoin at a restaurant and waiting an hour for
> confirmations. This entire BIP extension is a band aid for double spends.
> If double spends are not resolved, there will be a million instant
> providers in the long run and if double spends are resolved then this BIP
> extension is completely unnecessary. Is solving doublespends off the table?
>
> What if we solved doublespends like this: If a node receives 2
> transactions that use the same input, they can put both of them into the
> new block as a proof of double spend, but the bitcoins are not sent to the
> outputs of either transactions. They are instead treated like a fee and
> given to the block solver node. This gives miners the needed incentive and
> tools to end doublespends instead of being forced to favor one transaction
> over the other.
>
> I will write up a BIP if this seems like a practical approach.
>
>
> On Mon, Jun 16, 2014 at 5:19 AM, Mike Hearn <mike at plan99.net> wrote:
>
>> Looking good! I think this is much better than the original draft. Agree
>> with Andreas that supports_instant is simply equal to
>> (supported_instant_providers.size() > 1) which makes it redundant.
>>
>> Daniel is right that putting every possible provider in the Payment
>> message might not scale in a world where there are huge numbers of
>> instant-confirmation providers, but I'm hoping that we never have to scale
>> to that size, because if we did that'd rather imply that Bitcoin has become
>> useless for in-person payments without trusted third parties and avoiding
>> that is rather the whole point of the project :) So I'm OK with some
>> theoretical lack of scalability for now.
>>
>> A more scalable approach would be for the user to send the name and
>> signature of their "instant provider" every time and the merchant just
>> chooses whether to ignore it or not, but as Lawrence points out, this is
>> incompatible with the provider charging extra fees for "instantness". But
>> should we care? I'm trying to imagine what the purchasing experience is
>> like with optional paid-for third party anti-double-spend protection.
>> Ultimately it's the merchant who cares about this, not me, so why would I
>> ever pay? It makes no sense for me to pay for double spend protection for
>> the merchant: after all, I'm honest. This is why it doesn't make sense for
>> me to pay miners fees either, it's the *receiver* who cares about
>> confirmations, not the sender.
>>
>> So I wonder if a smarter design is that the user always submits the
>> details of their instantness provider and we just don't allow for optional
>> selection of instantness. I'm not sure that works, UX wise, so is having a
>> less scalable design to support it worthwhile?
>>
>>
>> ------------------------------------------------------------------------------
>> HPCC Systems Open Source Big Data Platform from LexisNexis Risk Solutions
>> Find What Matters Most in Your Big Data with HPCC Systems
>> Open Source. Fast. Scalable. Simple. Ideal for Dirty Data.
>> Leverages Graph Analysis for Fast Processing & Easy Data Exploration
>> http://p.sf.net/sfu/hpccsystems
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>
>>
>
>
> ------------------------------------------------------------------------------
> HPCC Systems Open Source Big Data Platform from LexisNexis Risk Solutions
> Find What Matters Most in Your Big Data with HPCC Systems
> Open Source. Fast. Scalable. Simple. Ideal for Dirty Data.
> Leverages Graph Analysis for Fast Processing & Easy Data Exploration
> http://p.sf.net/sfu/hpccsystems
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140616/80d79193/attachment.html>

From mike at plan99.net  Mon Jun 16 15:43:26 2014
From: mike at plan99.net (Mike Hearn)
Date: Mon, 16 Jun 2014 17:43:26 +0200
Subject: [Bitcoin-development] instant confirmation via payment protocol
 backwards compatible proto buffer extension
In-Reply-To: <loom.20140616T170619-497@post.gmane.org>
References: <CAKrJrGOBSiY5V59eko6g796j3wh9V9ZLjPbyHeS5=zyX6j3Wdw@mail.gmail.com>
	<CANEZrP0Euc1mPhRc9e41tU4zMDrWesvVyiBpAPq6M3m7K=aU=A@mail.gmail.com>
	<loom.20140616T170619-497@post.gmane.org>
Message-ID: <CANEZrP0feDE52arsWyB_X40yd8ATCxfZaEV6RDYcG2rKm-Vapw@mail.gmail.com>

>
> I don't see more than a bunch of accepted payment methods anywhere I
> ever been in my life, I don't see merchants trusting more than a handful of
> third parties.
>

Sure. I buy this. Although the credit card market is a great example of
what we *don't* want: a stagnant duopoly of trusted third parties who
rampantly abuse their position. So I'd hope we see either (a) nobody really
caring about this BIP because Bitcoin gives good enough double spend
protection or (b) lots of anti-double-spend providers (hundreds seems fine).


> Ultimately you care because the alternative is to wait.
>

No, I will never wait. Neither me nor the merchant wants to me to be
pointlessly hanging around for an hour. The alternative is to pay by credit
card or cash. Outside of experiments there is no such thing as a shop that
only accepts only Bitcoin and will require me to wait for a block because I
didn't use a TTP to guarantee anti-double spends.

So this seems like a fundamental problem to me: having the ability to say,
"here is a proof I won't double spend" is fine, but it doesn't achieve
anything if the merchant would have sold me the goods in return for a
normal Bitcoin tx anyway, which in practice they always will because this
system starts out from zero users and would have to work upwards. I
*especially* will never use this system if I have to pay for it - I'd much
rather just put my money into a wallet that can't generate these proofs and
pay the sticker price.

Maybe what this BIP needs is an extra field that lets the merchant say, I
will give you a discount of X satoshis if you give me a no-double-spends
proof. In other words invert it: the sticker price is what normal Bitcoin
transactions cost, and then your wallet shows you the regular BIP70 price
minus the discount plus the third parties fee as what you finally pay. I
compare it to the sticker price the merchant is asking and if it's lower
I'm happy, and if it's higher my wallet would automatically avoid using the
TTP because I don't want to ever pay more, only less.

The market would then figure out if the fees the TTP charges are worth the
lower losses due to double spending fraud.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140616/fc5f6e7b/attachment.html>

From mike at plan99.net  Mon Jun 16 15:48:28 2014
From: mike at plan99.net (Mike Hearn)
Date: Mon, 16 Jun 2014 17:48:28 +0200
Subject: [Bitcoin-development] instant confirmation via payment protocol
 backwards compatible proto buffer extension
In-Reply-To: <CADE3-jA8LizD8cjdqKm0pFc8OV7JqPBGhs4uvp6=VhEU2emV6w@mail.gmail.com>
References: <CAKrJrGOBSiY5V59eko6g796j3wh9V9ZLjPbyHeS5=zyX6j3Wdw@mail.gmail.com>
	<CANEZrP0Euc1mPhRc9e41tU4zMDrWesvVyiBpAPq6M3m7K=aU=A@mail.gmail.com>
	<CAFDyEXgKpbE4WGAqROJ4J1UST=tXWgfn7uKhRO_tngJfVK_Czw@mail.gmail.com>
	<CADE3-jA8LizD8cjdqKm0pFc8OV7JqPBGhs4uvp6=VhEU2emV6w@mail.gmail.com>
Message-ID: <CANEZrP3KKSkD7_R0Dvt600b7vh0oia78vHhPrPqSGBbwf9DsSQ@mail.gmail.com>

>
> Mike Hearn, why don't we just have all nodes report attempted double
> spends through the node network.
>

Please see https://github.com/bitcoin/bitcoin/pull/3883 which implements
this exact scheme. It can solve some kinds of double spends (probably), but
others - like ones done by corrupt miners (see bitundo) - can't be solved
this way.

Lawrence's motivation for this BIP is essentially to act as a backup in
case the Bitcoin native double spending protections end up being too weak
to be useful. It reintroduces a notion of centralised trust as a layer on
top of the Bitcoin protocol, but only for cases where the seller/recipient
feels it'd be useful. In this way it gives us slack: if someone is able to
reliably double spend and the merchants losses due to payment fraud go up,
we can fall back to TTPs for a while until someone finds a solution for
Bitcoin, or we just give up on the Bitcoin experiment, but hey - at least
we now have a better intermediary protocol than SWIFT :-)

In practice of course this is something payment processors like Bitpay and
Coinbase will think about. Individual cafes etc who are just using mobile
wallets won't be able to deal with this complexity: if we can't make native
Bitcoin work well enough there, we're most likely to just lose that market
or watch it become entirely centralised around a handful of payment
processing companies.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140616/87a73c6c/attachment.html>

From drice at greenmangosystems.com  Mon Jun 16 16:00:45 2014
From: drice at greenmangosystems.com (Daniel Rice)
Date: Mon, 16 Jun 2014 09:00:45 -0700
Subject: [Bitcoin-development] instant confirmation via payment protocol
 backwards compatible proto buffer extension
In-Reply-To: <loom.20140616T172412-752@post.gmane.org>
References: <CAKrJrGOBSiY5V59eko6g796j3wh9V9ZLjPbyHeS5=zyX6j3Wdw@mail.gmail.com>
	<CANEZrP0Euc1mPhRc9e41tU4zMDrWesvVyiBpAPq6M3m7K=aU=A@mail.gmail.com>
	<CAFDyEXgKpbE4WGAqROJ4J1UST=tXWgfn7uKhRO_tngJfVK_Czw@mail.gmail.com>
	<loom.20140616T172412-752@post.gmane.org>
Message-ID: <CAFDyEXgiZH-_zSftbKQRrPu385OwKEnYZo6-6NtWONX+V85awA@mail.gmail.com>

> Any reason you think people will spread trust instead of consolidating of
a
bunch of instant transaction providers when time is critical?

Maybe you're right, but if you are, that's a huge reason not to implement
this. We should encourage proliferation of instant providers otherwise we
start becoming VISA all over again. That's a future for Bitcoin I'm not
excited about: "Use one of these 4 companies, or you need to wait an
impractical amount of time before your transaction will go through."

Come to think of it, is the payment protocol really the place to put this
instant provider signature or should it be in the actual Bitcoin
transaction? If we don't believe there is a valid practical solution to
doublespends (some people have already emailed me critical feedback on my
proposal) then we absolutely need a trust network, but we would also want
it to be part of the public ledger for everyone to see.


On Mon, Jun 16, 2014 at 8:26 AM, Lawrence Nahum <lawrence at greenaddress.it>
wrote:

> Daniel Rice <drice <at> greenmangosystems.com> writes:
>
> >  If double spends are not resolved, there will be a million instant
> providers in the long run and if double spends are resolved then this BIP
> extension is completely unnecessary.
>
> I am not sure if double spends can be resolved, at the moment they are not
> and I highly doubt you will see millions instant providers just like I
> don't
> see millions Certificate Authorities and I don't see Million Credit Card
> networks.
>
> Any reason you think people will spread trust instead of consolidating of a
> bunch of instant transaction providers when time is critical?
>
>
>
>
> ------------------------------------------------------------------------------
> HPCC Systems Open Source Big Data Platform from LexisNexis Risk Solutions
> Find What Matters Most in Your Big Data with HPCC Systems
> Open Source. Fast. Scalable. Simple. Ideal for Dirty Data.
> Leverages Graph Analysis for Fast Processing & Easy Data Exploration
> http://p.sf.net/sfu/hpccsystems
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140616/84ba0a06/attachment.html>

From mike at plan99.net  Mon Jun 16 16:07:37 2014
From: mike at plan99.net (Mike Hearn)
Date: Mon, 16 Jun 2014 18:07:37 +0200
Subject: [Bitcoin-development] instant confirmation via payment protocol
 backwards compatible proto buffer extension
In-Reply-To: <CAFDyEXgiZH-_zSftbKQRrPu385OwKEnYZo6-6NtWONX+V85awA@mail.gmail.com>
References: <CAKrJrGOBSiY5V59eko6g796j3wh9V9ZLjPbyHeS5=zyX6j3Wdw@mail.gmail.com>
	<CANEZrP0Euc1mPhRc9e41tU4zMDrWesvVyiBpAPq6M3m7K=aU=A@mail.gmail.com>
	<CAFDyEXgKpbE4WGAqROJ4J1UST=tXWgfn7uKhRO_tngJfVK_Czw@mail.gmail.com>
	<loom.20140616T172412-752@post.gmane.org>
	<CAFDyEXgiZH-_zSftbKQRrPu385OwKEnYZo6-6NtWONX+V85awA@mail.gmail.com>
Message-ID: <CANEZrP0S3z5B0vRSQGMQwbnM2mgrFrRjfkCFvD=_No+xhb7QXg@mail.gmail.com>

>
> Come to think of it, is the payment protocol really the place to put this
> instant provider signature
>

Yes it's the right place. The original attempt at this concept was in fact
called *green addresses* and the idea was you could identify a spend from a
trusted wallet by checking which keys were being used to sign. But the
problem is, lack of privacy. Everyone can see what wallet provider you use.

Also it'd be inefficient to have in the chain. There's no reason for the
extra signatures to be there: double spend risk is something only the
recipient cares about.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140616/6128d254/attachment.html>

From bip at mattwhitlock.name  Mon Jun 16 16:25:20 2014
From: bip at mattwhitlock.name (Matt Whitlock)
Date: Mon, 16 Jun 2014 12:25:20 -0400
Subject: [Bitcoin-development] Incentivizing the running of full nodes
In-Reply-To: <87aaf81b20e17332175a3fbcd091c317.squirrel@fulvetta.riseup.net>
References: <87aaf81b20e17332175a3fbcd091c317.squirrel@fulvetta.riseup.net>
Message-ID: <53959513.H7tOyQYvqT@crushinator>

How can there be any kind of lottery that doesn't involve proof of work or proof of stake? Without some resource-limiting factor, there is no way to limit the number of "lottery tickets" any given individual could acquire. The very process of Bitcoin mining was invented specifically to overcome the Sybil problem, which had plagued computer scientists for decades, and now you're proposing a system that suffers from the same problem. Or am I wrong about this?


On Monday, 16 June 2014, at 1:12 am, Odinn Cyberguerrilla wrote:
> I have been noticing for some time the problem which Mike H. identified as
> how we are bleeding nodes ~ losing nodes over time.
> 
> This link was referenced in the coindesk article of May 9, 2014:
> 
> http://sourceforge.net/p/bitcoin/mailman/bitcoin-development/thread/CANEZrP2rgiQHpekEpFviJ22QsiV%2Bs-F2pqosaZOA5WrRtJx5pg%40mail.gmail.com/#msg32196023
> 
> (coindesk article for reference: http://www.coindesk.com/bitcoin-nodes-need/)
> 
> The proposed solution is noted here as a portion of an issue at:
>  https://github.com/bitcoin/bitcoin/issues/4079
> 
> Essentially that part which has to do with helping reduce
> the loss of nodes is as follows:
> 
> "a feature similar to that suggested by @gmaxwell that would process small
> change and tiny txouts to user specified donation targets, in an
> incentivized process. Those running full nodes (Bitcoin Core all the
> time), processing their change and txouts through Core, would be provided
> incentives in the form of a 'decentralizing lottery' such that all
> participants who are running nodes and donating no matter how infrequently
> (and no matter who they donate to) will be entered in the 'decentralizing
> lottery,' the 'award amounts' (which would be distinct from 'block
> rewards' for any mining) would vary from small to large bitcoin amounts
> depending on how many participants are involved in the donations process.
> This would help incentivize individuals to run full nodes as well as
> encouraging giving and microdonations. The option could be expressed in
> the transactions area to contribute to help bitcoin core development for
> those that are setting up change and txouts for donations, regarding the
> microdonation portion (which has also has been expressed conceptually at
> abis.io"
> 
> This addresses the issue of how to incentivize more
> interested individuals to run full nodes (Bitcoin Core).  The lottery
> concept (which would be applicable to anyone running the full node
> regardless of whether or not they are mining) is attractive from the point
> of view that it will complement the block reward concept already in place
> which serves those who mine, but more attractive to the individual who
> doesn't feel the urge to mine, but would like to have the chance of being
> compensated for the effort they put into the system.
> 
> I hope that this leads to additional development discussion on these
> concepts regarding incentivizing giving. This may also involve a process
> BIP.  I look forward to your remarks.
> 
> Respect,
> 
> Odinn




From lawrence at greenaddress.it  Mon Jun 16 16:30:45 2014
From: lawrence at greenaddress.it (Lawrence Nahum)
Date: Mon, 16 Jun 2014 16:30:45 +0000 (UTC)
Subject: [Bitcoin-development] instant confirmation via payment protocol
	backwards compatible proto buffer extension
References: <CAKrJrGOBSiY5V59eko6g796j3wh9V9ZLjPbyHeS5=zyX6j3Wdw@mail.gmail.com>
	<CANEZrP0Euc1mPhRc9e41tU4zMDrWesvVyiBpAPq6M3m7K=aU=A@mail.gmail.com>
	<CAFDyEXgKpbE4WGAqROJ4J1UST=tXWgfn7uKhRO_tngJfVK_Czw@mail.gmail.com>
	<CADE3-jA8LizD8cjdqKm0pFc8OV7JqPBGhs4uvp6=VhEU2emV6w@mail.gmail.com>
	<CANEZrP3KKSkD7_R0Dvt600b7vh0oia78vHhPrPqSGBbwf9DsSQ@mail.gmail.com>
Message-ID: <loom.20140616T181739-326@post.gmane.org>

Mike Hearn <mike <at> plan99.net> writes:

> Please see https://github.com/bitcoin/bitcoin/pull/3883 which implements 
this exact scheme. It can solve some kinds of double spends (probably), but 
others - like ones done by corrupt miners (see bitundo) - can't be solved 
this way.

I read the comments on the PR. I mean no disrespect but this patch can't 
prevent double spends minutes apart and a solution is as good as it's 
weakest link.

It also seems to suffer from potential ddos and otherwise may provide a 
false sense of security. I wouldn't call it a solution in sight just yet.


> Lawrence's motivation for this BIP is essentially to act as a backup in 
case the Bitcoin native double spending protections end up being too weak to 
be useful. It reintroduces a notion of centralised trust as a layer on top 
of the Bitcoin protocol, but only for cases where the seller/recipient feels 
it'd be useful. In this way it gives us slack: if someone is able to 
reliably double spend and the merchants losses due to payment fraud go up, 
we can fall back to TTPs for a while until someone finds a solution for 
Bitcoin, or we just give up on the Bitcoin experiment, but hey - at least we 
now have a better intermediary protocol than SWIFT 

I wouldn't put it just like that. Sure, it's a backup to the double spend 
solution in case we don't reach one - but also, even if you reach some 
reasonable compromise I assume it won't be instant and instant confirmation 
between exchanges can create huge arbitrage opportunities and as such 
liquidity.

It's not really aimed at the merchant but more at service providers and 
payment processors - or simply, between users that don't know each other in 
local traders environments/squares, assuming they are ok trusting a 
known/respected/reputable third party.

> In practice of course this is something payment processors like Bitpay and 
Coinbase will think about. Individual cafes etc who are just using mobile 
wallets won't be able to deal with this complexity: if we can't make native 
Bitcoin work well enough there, we're most likely to just lose that market 
or watch it become entirely centralised around a handful of payment 
processing companies.


What do you expect for e-commerce and escrow to happen? Don't you think the 
market will naturally converge to a handful of hubs that will helps with 
refunds and things like that? Or do you expect to just 'trust' all people on  
online markets and smaller unknown online shops?

I mean, the beauty of Bitcoin is that it brings much more transparency and 
the tools to build such things without huge barriers to entry and without 
using closed protocols - not that it solves _every_ problem.




From mike at plan99.net  Mon Jun 16 16:45:58 2014
From: mike at plan99.net (Mike Hearn)
Date: Mon, 16 Jun 2014 18:45:58 +0200
Subject: [Bitcoin-development] instant confirmation via payment protocol
 backwards compatible proto buffer extension
In-Reply-To: <loom.20140616T181739-326@post.gmane.org>
References: <CAKrJrGOBSiY5V59eko6g796j3wh9V9ZLjPbyHeS5=zyX6j3Wdw@mail.gmail.com>
	<CANEZrP0Euc1mPhRc9e41tU4zMDrWesvVyiBpAPq6M3m7K=aU=A@mail.gmail.com>
	<CAFDyEXgKpbE4WGAqROJ4J1UST=tXWgfn7uKhRO_tngJfVK_Czw@mail.gmail.com>
	<CADE3-jA8LizD8cjdqKm0pFc8OV7JqPBGhs4uvp6=VhEU2emV6w@mail.gmail.com>
	<CANEZrP3KKSkD7_R0Dvt600b7vh0oia78vHhPrPqSGBbwf9DsSQ@mail.gmail.com>
	<loom.20140616T181739-326@post.gmane.org>
Message-ID: <CANEZrP3er1NVoAiVmROTxQ3TC80r7enKaHkWjOYTbKehf7qJjQ@mail.gmail.com>

>
> I read the comments on the PR. I mean no disrespect but this patch can't
> prevent double spends minutes apart and a solution is as good as it's
> weakest link.
>

Actually Tom is running a page where he shows double spends detected by his
node or relayed by mine (there are only two nodes in this little detection
network currently), and it does show double spends that occur seconds,
minutes or even days apart.

Regardless, whether that approach helps or not is off topic for this
thread. Let's all hope it does and discuss the details in some other
thread, or on the pull request.


> instant confirmation between exchanges can create huge arbitrage
> opportunities and as such
> liquidity.
>

Yes indeed, if you want to do high frequency trading then every millisecond
counts and you probably don't want to rely on watching transactions
propagate across the block chain. For inter-exchange traffic this BIP would
probably be useful. I've been talking about the consumer case.


> What do you expect for e-commerce and escrow to happen? Don't you think the
> market will naturally converge to a handful of hubs that will helps with
> refunds and things like that?


No, I expect there to be many kinds of trades where dispute mediation is
unnecessary, e.g. when I buy a drink at Starbucks or a burger at McDonalds
the chances of me wanting to charge it back is basically zero. Same for
sending between people who know each other, large corporate transactions
where the threat of a lawsuit is more useful than mediation, etc.

But for transactions where third parties are needed for dispute mediation,
yes, I'd expect there to be a handful of well known trusted names for the
majority of such transactions, and then a long tail of specialists who only
mediate e.g. purchases of rare Aztec artifacts or other things where a
generic company might be easily fooled.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140616/1fb740b4/attachment.html>

From lawrence at greenaddress.it  Mon Jun 16 16:56:56 2014
From: lawrence at greenaddress.it (Lawrence Nahum)
Date: Mon, 16 Jun 2014 16:56:56 +0000 (UTC)
Subject: [Bitcoin-development] instant confirmation via payment protocol
	backwards compatible proto buffer extension
References: <CAKrJrGOBSiY5V59eko6g796j3wh9V9ZLjPbyHeS5=zyX6j3Wdw@mail.gmail.com>
	<CANEZrP0Euc1mPhRc9e41tU4zMDrWesvVyiBpAPq6M3m7K=aU=A@mail.gmail.com>
	<CAFDyEXgKpbE4WGAqROJ4J1UST=tXWgfn7uKhRO_tngJfVK_Czw@mail.gmail.com>
	<CADE3-jA8LizD8cjdqKm0pFc8OV7JqPBGhs4uvp6=VhEU2emV6w@mail.gmail.com>
	<CANEZrP3KKSkD7_R0Dvt600b7vh0oia78vHhPrPqSGBbwf9DsSQ@mail.gmail.com>
	<loom.20140616T181739-326@post.gmane.org>
	<CANEZrP3er1NVoAiVmROTxQ3TC80r7enKaHkWjOYTbKehf7qJjQ@mail.gmail.com>
Message-ID: <loom.20140616T184930-521@post.gmane.org>

Mike Hearn <mike <at> plan99.net> writes:

> Actually Tom is running a page where he shows double spends detected by 
his node or relayed by mine (there are only two nodes in this little 
detection network currently), and it does show double spends that occur 
seconds, minutes or even days apart.

I only meant that double spends minutes apart are possible and that by then 
the sole use of a monitor is too late even if it will tell you.

> Regardless, whether that approach helps or not is off topic for this 
thread. Let's all hope it does and discuss the details in some other thread, 
or on the pull request.

Fair enough.

> Yes indeed, if you want to do high frequency trading then every 
millisecond counts and you probably don't want to rely on watching 
transactions propagate across the block chain. For inter-exchange traffic 
this BIP would probably be useful. I've been talking about the consumer 
case.

That's quite different, granted.

> No, I expect there to be many kinds of trades where dispute mediation is 
unnecessary, e.g. when I buy a drink at Starbucks or a burger at McDonalds 
the chances of me wanting to charge it back is basically zero. Same for 
sending between people who know each other, large corporate transactions 
where the threat of a lawsuit is more useful than mediation, etc.

I wouldn't assume that if bitcoin alone (i.e. without third parties) can't 
be used for medium-high value purchases then it's useless. 

> But for transactions where third parties are needed for dispute mediation, 
yes, I'd expect there to be a handful of well known trusted names for the 
majority of such transactions, and then a long tail of specialists who only 
mediate e.g. purchases of rare Aztec artifacts or other things where a 
generic company might be easily fooled.

Agreed.




From mike at plan99.net  Mon Jun 16 17:01:40 2014
From: mike at plan99.net (Mike Hearn)
Date: Mon, 16 Jun 2014 19:01:40 +0200
Subject: [Bitcoin-development] instant confirmation via payment protocol
 backwards compatible proto buffer extension
In-Reply-To: <loom.20140616T184930-521@post.gmane.org>
References: <CAKrJrGOBSiY5V59eko6g796j3wh9V9ZLjPbyHeS5=zyX6j3Wdw@mail.gmail.com>
	<CANEZrP0Euc1mPhRc9e41tU4zMDrWesvVyiBpAPq6M3m7K=aU=A@mail.gmail.com>
	<CAFDyEXgKpbE4WGAqROJ4J1UST=tXWgfn7uKhRO_tngJfVK_Czw@mail.gmail.com>
	<CADE3-jA8LizD8cjdqKm0pFc8OV7JqPBGhs4uvp6=VhEU2emV6w@mail.gmail.com>
	<CANEZrP3KKSkD7_R0Dvt600b7vh0oia78vHhPrPqSGBbwf9DsSQ@mail.gmail.com>
	<loom.20140616T181739-326@post.gmane.org>
	<CANEZrP3er1NVoAiVmROTxQ3TC80r7enKaHkWjOYTbKehf7qJjQ@mail.gmail.com>
	<loom.20140616T184930-521@post.gmane.org>
Message-ID: <CANEZrP2fg9k9fC+QAO2GQS7VC-JCtbEjubHB9j1TJtR9vuaDSQ@mail.gmail.com>

>
> I only meant that double spends minutes apart are possible and that by then
> the sole use of a monitor is too late even if it will tell you.
>

As long as miners stick to Satoshi's first seen rule, which is the default,
it's useful:

https://bitcointalk.org/index.php?topic=423.msg3819#msg3819

(this is the famous "snack machine" thread from 2010)

If they decide to change to something like highest-fee-always-wins, then
they (again) centralise things by forcing all instant transactions to pay
GreenAddress and its competitors money - much though I like your product
Lawrence, let's hope they don't collectively lemming us all off a cliff by
doing that ;)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140616/aad4540f/attachment.html>

From lawrence at greenaddress.it  Mon Jun 16 17:05:27 2014
From: lawrence at greenaddress.it (Lawrence Nahum)
Date: Mon, 16 Jun 2014 17:05:27 +0000 (UTC)
Subject: [Bitcoin-development] instant confirmation via payment protocol
	backwards compatible proto buffer extension
References: <CAKrJrGOBSiY5V59eko6g796j3wh9V9ZLjPbyHeS5=zyX6j3Wdw@mail.gmail.com>
	<CANEZrP0Euc1mPhRc9e41tU4zMDrWesvVyiBpAPq6M3m7K=aU=A@mail.gmail.com>
	<loom.20140616T170619-497@post.gmane.org>
	<CANEZrP0feDE52arsWyB_X40yd8ATCxfZaEV6RDYcG2rKm-Vapw@mail.gmail.com>
Message-ID: <loom.20140616T185724-622@post.gmane.org>

Mike Hearn <mike <at> plan99.net> writes:

> Sure. I buy this. Although the credit card market is a great example of 
what we don't?want: a stagnant duopoly of trusted third parties who 
rampantly abuse their position. So I'd hope we see either (a) nobody really 
caring about this BIP because Bitcoin gives good enough double spend 
protection or (b) lots of anti-double-spend providers (hundreds seems fine).

Maybe hundreds, maybe less. I can imagine there would/could be local ones.
It's not the same as credit cards though: it's an open protocol with 
explicit intent from all parties and no forced fees for normal transactions 
- just for instant ones.

> No, I will never wait. Neither me nor the merchant wants to me to be 
pointlessly hanging around for an hour. The alternative is to pay by credit 
card or cash. Outside of experiments there is no such thing as a shop that 
only accepts only Bitcoin and will require me to wait for a block because I 
didn't use a TTP to guarantee anti-double spends.

I tend to agree but _today_ people are trying to use bitcoin and are waiting 
and waiting ..


> So this seems like a fundamental problem to me: having the ability to say, 
"here is a proof I won't double spend" is fine, but it doesn't achieve 
anything if the merchant would have sold me the goods in return for a normal 
Bitcoin tx anyway, which in practice they always will because this system 
starts out from zero users and would have to work upwards. I especially?will 
never use this system if I have to pay for it - I'd much rather just put my 
money into a wallet that can't generate these proofs and pay the sticker 
price.

This is a cultural thing. In some places if you pay by cards you pay extra.
I think it may be good to support both models but I like better the 
transparent one even if I'm going to admit that the least transparent one 
may be more attractive as it fools consumers.

> Maybe what this BIP needs is an extra field that lets the merchant say, I 
will give you a discount of X satoshis if you give me a no-double-spends 
proof. In other words invert it: the sticker price is what normal Bitcoin 
transactions cost, and then your wallet shows you the regular BIP70 price 
minus the discount plus the third parties fee as what you finally pay. I 
compare it to the sticker price the merchant is asking and if it's lower I'm 
happy, and if it's higher my wallet would automatically avoid using the TTP 
because I don't want to ever pay more, only less.
> The market would then figure out if the fees the TTP charges are worth the 
lower losses due to double spending fraud.

I think this is worth discussing further. Would love also more input from 
other people on this.







From justusranvier at gmail.com  Mon Jun 16 17:07:24 2014
From: justusranvier at gmail.com (Justus Ranvier)
Date: Mon, 16 Jun 2014 17:07:24 +0000
Subject: [Bitcoin-development] Incentivizing the running of full nodes
In-Reply-To: <53959513.H7tOyQYvqT@crushinator>
References: <87aaf81b20e17332175a3fbcd091c317.squirrel@fulvetta.riseup.net>
	<53959513.H7tOyQYvqT@crushinator>
Message-ID: <539F244C.2090009@gmail.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On 06/16/2014 04:25 PM, Matt Whitlock wrote:
> How can there be any kind of lottery that doesn't involve proof of
> work or proof of stake? Without some resource-limiting factor,
> there is no way to limit the number of "lottery tickets" any given
> individual could acquire. The very process of Bitcoin mining was
> invented specifically to overcome the Sybil problem, which had
> plagued computer scientists for decades, and now you're proposing a
> system that suffers from the same problem. Or am I wrong about
> this?

If you allow the solution set to include pay-to-play networks, and not
just free P2P networks, then it's easier to find a solution

Imagine every node is competing with its peers in terms of relevancy.
Relevancy is established by delivering newly-seen transactions first.

Each node keeps track of which of its peers send it transactions that
it hadn't seen and forwarded to them yet (making sure that the
transactions do make it into a block) and uses that information to
determine whether or not it should be paying that peer, or if that
peer should be paying it, or if they are equal relevancy and no net
payment is required.

Once any given pair of nodes can establish who, if anyone, should be
paying they could use micropayment channels to handle payments.

Nodes that are well connected, and with high uptimes would end up
being net recipients of payments. Mobile nodes and other low-uptime
nodes would be net payers.

Now that you've established a market for the service of delivering
transaction information, you can rely on price signals to properly
match supply and demand.

People who hate market-based solutions could always run these nodes
and configure them to refuse to pay anyone, and to charge nothing to
their peers, if that's what they wanted.


- -- 
Support online privacy by using email encryption whenever possible.
Learn how here: http://www.youtube.com/watch?v=bakOKJFtB-k
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2.0.22 (GNU/Linux)

iQEcBAEBAgAGBQJTnyRMAAoJEMP3uyY4RQ21XwgH/RPlhgR63XF9/Sm+z0EBxVtO
0hzDngD0iTO1v5LRmas9P5ZuQ97j8169pui+EJO8clXjV41yEu96jc0BiOQTnfMR
rzPfgeZqfnVNDvIfJnLRMeVCJMiu9Tjdqx83S28Tz9sx/sgy1uw9INX7M7wOIHFR
7GLA16k4g8qcmnX89XXM3Uf7/3fhL2kiN/E59V2n6qYJAnYTUEb+uehclzR+T4v4
93oAF3TjgLU6J0VleDrvgFcyLriGBjOmkTAvmOJQF1H/s4gzHol5kbOb9vqQ7BJX
QQ/mEYHEdCHTxU59FdZ5CmFYZrINHj+mNnu1RorYYF1FLbBDTDpq4zjrJpngayI=
=9qQJ
-----END PGP SIGNATURE-----
-------------- next part --------------
A non-text attachment was scrubbed...
Name: 0x38450DB5.asc
Type: application/pgp-keys
Size: 12464 bytes
Desc: not available
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140616/7a64d188/attachment.bin>

From lawrence at greenaddress.it  Mon Jun 16 17:16:24 2014
From: lawrence at greenaddress.it (Lawrence Nahum)
Date: Mon, 16 Jun 2014 17:16:24 +0000 (UTC)
Subject: [Bitcoin-development] instant confirmation via payment protocol
	backwards compatible proto buffer extension
References: <CAKrJrGOBSiY5V59eko6g796j3wh9V9ZLjPbyHeS5=zyX6j3Wdw@mail.gmail.com>
	<CANEZrP0Euc1mPhRc9e41tU4zMDrWesvVyiBpAPq6M3m7K=aU=A@mail.gmail.com>
	<CAFDyEXgKpbE4WGAqROJ4J1UST=tXWgfn7uKhRO_tngJfVK_Czw@mail.gmail.com>
	<CADE3-jA8LizD8cjdqKm0pFc8OV7JqPBGhs4uvp6=VhEU2emV6w@mail.gmail.com>
	<CANEZrP3KKSkD7_R0Dvt600b7vh0oia78vHhPrPqSGBbwf9DsSQ@mail.gmail.com>
	<loom.20140616T181739-326@post.gmane.org>
	<CANEZrP3er1NVoAiVmROTxQ3TC80r7enKaHkWjOYTbKehf7qJjQ@mail.gmail.com>
	<loom.20140616T184930-521@post.gmane.org>
	<CANEZrP2fg9k9fC+QAO2GQS7VC-JCtbEjubHB9j1TJtR9vuaDSQ@mail.gmail.com>
Message-ID: <loom.20140616T190550-931@post.gmane.org>

Mike Hearn <mike <at> plan99.net> writes:

> As long as miners stick to Satoshi's first seen rule, which is the 
default, it's useful:
> 
> 
> https://bitcointalk.org/index.php?topic=423.msg3819#msg3819
> 
> 
> 
> 
> (this is the famous "snack machine" thread from 2010)
> 
> If they decide to change to something like highest-fee-always-wins, then 
they (again) centralise things by forcing all instant transactions to pay 
GreenAddress and its competitors money - much though I like your product 
Lawrence, let's hope they don't collectively lemming us all off a cliff by 
doing that ;)


I assume we can't enforce to miners rules about which tx will go in and 
which won't and therefore whether this will cause more or less double 
spends.


I mean, you can try but I would rather have to option to pick an third party 
instant provider explicitly than  enforce bigger rules on mining which would 
IMHO lead to implicit centralization.








From bip at mattwhitlock.name  Mon Jun 16 17:26:48 2014
From: bip at mattwhitlock.name (Matt Whitlock)
Date: Mon, 16 Jun 2014 13:26:48 -0400
Subject: [Bitcoin-development] Incentivizing the running of full nodes
In-Reply-To: <539F244C.2090009@gmail.com>
References: <87aaf81b20e17332175a3fbcd091c317.squirrel@fulvetta.riseup.net>
	<53959513.H7tOyQYvqT@crushinator> <539F244C.2090009@gmail.com>
Message-ID: <1801389.9PVWAZniMG@crushinator>

On Monday, 16 June 2014, at 5:07 pm, Justus Ranvier wrote:
> On 06/16/2014 04:25 PM, Matt Whitlock wrote:
> > How can there be any kind of lottery that doesn't involve proof of
> > work or proof of stake? Without some resource-limiting factor,
> > there is no way to limit the number of "lottery tickets" any given
> > individual could acquire. The very process of Bitcoin mining was
> > invented specifically to overcome the Sybil problem, which had
> > plagued computer scientists for decades, and now you're proposing a
> > system that suffers from the same problem. Or am I wrong about
> > this?
> 
> If you allow the solution set to include pay-to-play networks, and not
> just free P2P networks, then it's easier to find a solution
> 
> Imagine every node is competing with its peers in terms of relevancy.
> Relevancy is established by delivering newly-seen transactions first.
> 
> Each node keeps track of which of its peers send it transactions that
> it hadn't seen and forwarded to them yet (making sure that the
> transactions do make it into a block) and uses that information to
> determine whether or not it should be paying that peer, or if that
> peer should be paying it, or if they are equal relevancy and no net
> payment is required.
> 
> Once any given pair of nodes can establish who, if anyone, should be
> paying they could use micropayment channels to handle payments.
> 
> Nodes that are well connected, and with high uptimes would end up
> being net recipients of payments. Mobile nodes and other low-uptime
> nodes would be net payers.
> 
> Now that you've established a market for the service of delivering
> transaction information, you can rely on price signals to properly
> match supply and demand.
> 
> People who hate market-based solutions could always run these nodes
> and configure them to refuse to pay anyone, and to charge nothing to
> their peers, if that's what they wanted.

This is a cool idea, but doesn't it generate some perverse incentives? If I'm running a full node and I want to pay CheapAir for some plane tickets, I'll want to pay in the greatest number of individual transactions possible, to maximize the rewards that I'll receive from my connected peers. This maybe would not be a problem if transaction fees were required on all transactions, but as it is (e.g., while fee-free transactions can be accepted into blocks if they have high enough priority), I can "preload" my wallet with hundreds of small-ish outputs, let them sit there for a few months to accumulate coin age, and then spend each little piece in a separate transaction when it comes time to pay for a big-ticket purchase. It's more lucrative for me to pay for my plane ticket in 100 separate, low-value transactions than in one high-value transaction. So you're incentivizing greater consumption of bandwidth and storage.



From mike at plan99.net  Mon Jun 16 17:59:12 2014
From: mike at plan99.net (Mike Hearn)
Date: Mon, 16 Jun 2014 19:59:12 +0200
Subject: [Bitcoin-development] Incentivizing the running of full nodes
In-Reply-To: <1801389.9PVWAZniMG@crushinator>
References: <87aaf81b20e17332175a3fbcd091c317.squirrel@fulvetta.riseup.net>
	<53959513.H7tOyQYvqT@crushinator> <539F244C.2090009@gmail.com>
	<1801389.9PVWAZniMG@crushinator>
Message-ID: <CANEZrP0eNDuGnm1vESwoe=9HWUKZGQ5CKsDZ8SHsQxCaNEjRsA@mail.gmail.com>

>
> This is a cool idea, but doesn't it generate some perverse incentives? If
> I'm running a full node and I want to pay CheapAir for some plane tickets,
> I'll want to pay in the greatest number of individual transactions possible


Peers can calculate rewards based on number of inputs or total kb used:
you're paying for kilobytes with either coin age or fees no matter what. So
I think in practice it's not a big deal.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140616/61dabb34/attachment.html>

From alexykot at gmail.com  Mon Jun 16 18:02:47 2014
From: alexykot at gmail.com (Alex Kotenko)
Date: Mon, 16 Jun 2014 19:02:47 +0100
Subject: [Bitcoin-development] instant confirmation via payment protocol
 backwards compatible proto buffer extension
In-Reply-To: <loom.20140616T190550-931@post.gmane.org>
References: <CAKrJrGOBSiY5V59eko6g796j3wh9V9ZLjPbyHeS5=zyX6j3Wdw@mail.gmail.com>
	<CANEZrP0Euc1mPhRc9e41tU4zMDrWesvVyiBpAPq6M3m7K=aU=A@mail.gmail.com>
	<CAFDyEXgKpbE4WGAqROJ4J1UST=tXWgfn7uKhRO_tngJfVK_Czw@mail.gmail.com>
	<CADE3-jA8LizD8cjdqKm0pFc8OV7JqPBGhs4uvp6=VhEU2emV6w@mail.gmail.com>
	<CANEZrP3KKSkD7_R0Dvt600b7vh0oia78vHhPrPqSGBbwf9DsSQ@mail.gmail.com>
	<loom.20140616T181739-326@post.gmane.org>
	<CANEZrP3er1NVoAiVmROTxQ3TC80r7enKaHkWjOYTbKehf7qJjQ@mail.gmail.com>
	<loom.20140616T184930-521@post.gmane.org>
	<CANEZrP2fg9k9fC+QAO2GQS7VC-JCtbEjubHB9j1TJtR9vuaDSQ@mail.gmail.com>
	<loom.20140616T190550-931@post.gmane.org>
Message-ID: <CALDj+Bbvvs4rkrSOndk4rbt9JGwSwF1VeFk2XPjFy7Ro4O9heg@mail.gmail.com>

Hi Lawrence/All


I'm afraid with this BIP for TTP of instant transactions we will end up in
VISA world again. As I see it - it's not about if the TTPs will centralize,
it's only when. Simply because if economy of scales makes growth profitable
and coming into this market is at least a little expensive - this
(centralization, VISA world) will happen, sooner rather than later.
And while some may argue that coming to market in Bitcoin world is cheap so
the crowd will always have a chance to come in and beat the monopolists -
think of one thing. Right now Bitcoin is not seen as money and not
regulated accordingly anywhere in the world, thanks God, but how many years
away we are from the point when it will start to be regulated that way? And
once it is - the monopolies will make sure that rules are restrictive
enough to prevent competition, especially in conjunction with economy of
scales playing against the small newcomers.
The "instant providers list" is susceptible to regulatory influence, and
once in place and widespread - it will be a timebomb under Bitcoin. We need
to solve the doublespend issue without TTP involvement, or at least without
even a slight chance of making this involvement regulateable. Otherwise I
think the Bitcoin experiment will fail.


Best regards,
Alex Kotenko


2014-06-16 18:16 GMT+01:00 Lawrence Nahum <lawrence at greenaddress.it>:

> Mike Hearn <mike <at> plan99.net> writes:
>
> > As long as miners stick to Satoshi's first seen rule, which is the
> default, it's useful:
> >
> >
> > https://bitcointalk.org/index.php?topic=423.msg3819#msg3819
> >
> >
> >
> >
> > (this is the famous "snack machine" thread from 2010)
> >
> > If they decide to change to something like highest-fee-always-wins, then
> they (again) centralise things by forcing all instant transactions to pay
> GreenAddress and its competitors money - much though I like your product
> Lawrence, let's hope they don't collectively lemming us all off a cliff by
> doing that ;)
>
>
> I assume we can't enforce to miners rules about which tx will go in and
> which won't and therefore whether this will cause more or less double
> spends.
>
>
> I mean, you can try but I would rather have to option to pick an third
> party
> instant provider explicitly than  enforce bigger rules on mining which
> would
> IMHO lead to implicit centralization.
>
>
>
>
>
>
>
> ------------------------------------------------------------------------------
> HPCC Systems Open Source Big Data Platform from LexisNexis Risk Solutions
> Find What Matters Most in Your Big Data with HPCC Systems
> Open Source. Fast. Scalable. Simple. Ideal for Dirty Data.
> Leverages Graph Analysis for Fast Processing & Easy Data Exploration
> http://p.sf.net/sfu/hpccsystems
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140616/b38e4996/attachment.html>

From jtimon at monetize.io  Mon Jun 16 17:44:33 2014
From: jtimon at monetize.io (=?UTF-8?B?Sm9yZ2UgVGltw7Nu?=)
Date: Mon, 16 Jun 2014 19:44:33 +0200
Subject: [Bitcoin-development] instant confirmation via payment protocol
 backwards compatible proto buffer extension
In-Reply-To: <CANEZrP2fg9k9fC+QAO2GQS7VC-JCtbEjubHB9j1TJtR9vuaDSQ@mail.gmail.com>
References: <CAKrJrGOBSiY5V59eko6g796j3wh9V9ZLjPbyHeS5=zyX6j3Wdw@mail.gmail.com>
	<CANEZrP0Euc1mPhRc9e41tU4zMDrWesvVyiBpAPq6M3m7K=aU=A@mail.gmail.com>
	<CAFDyEXgKpbE4WGAqROJ4J1UST=tXWgfn7uKhRO_tngJfVK_Czw@mail.gmail.com>
	<CADE3-jA8LizD8cjdqKm0pFc8OV7JqPBGhs4uvp6=VhEU2emV6w@mail.gmail.com>
	<CANEZrP3KKSkD7_R0Dvt600b7vh0oia78vHhPrPqSGBbwf9DsSQ@mail.gmail.com>
	<loom.20140616T181739-326@post.gmane.org>
	<CANEZrP3er1NVoAiVmROTxQ3TC80r7enKaHkWjOYTbKehf7qJjQ@mail.gmail.com>
	<loom.20140616T184930-521@post.gmane.org>
	<CANEZrP2fg9k9fC+QAO2GQS7VC-JCtbEjubHB9j1TJtR9vuaDSQ@mail.gmail.com>
Message-ID: <CAC1+kJNEUzJGLmMT+ocsS6pDwEpWq8OchHQ+zTZoQtVFTK6ERQ@mail.gmail.com>

On 6/16/14, Mike Hearn <mike at plan99.net> wrote:
> If they decide to change to something like highest-fee-always-wins, then
> they (again) centralise things by forcing all instant transactions to pay
> GreenAddress and its competitors money - much though I like your product
> Lawrence, let's hope they don't collectively lemming us all off a cliff by
> doing that ;)

Replace-by-fee doesn't imply the use of green addresses (there's other
solutions to 0 conf transactions in that context, for example,
"scorched earth"). And giving up the non-enforceable first-seen
default mining policy doesn't mean "giving up on the Bitcoin
experiment" either.



From mike at plan99.net  Mon Jun 16 18:09:24 2014
From: mike at plan99.net (Mike Hearn)
Date: Mon, 16 Jun 2014 20:09:24 +0200
Subject: [Bitcoin-development] instant confirmation via payment protocol
 backwards compatible proto buffer extension
In-Reply-To: <CALDj+Bbvvs4rkrSOndk4rbt9JGwSwF1VeFk2XPjFy7Ro4O9heg@mail.gmail.com>
References: <CAKrJrGOBSiY5V59eko6g796j3wh9V9ZLjPbyHeS5=zyX6j3Wdw@mail.gmail.com>
	<CANEZrP0Euc1mPhRc9e41tU4zMDrWesvVyiBpAPq6M3m7K=aU=A@mail.gmail.com>
	<CAFDyEXgKpbE4WGAqROJ4J1UST=tXWgfn7uKhRO_tngJfVK_Czw@mail.gmail.com>
	<CADE3-jA8LizD8cjdqKm0pFc8OV7JqPBGhs4uvp6=VhEU2emV6w@mail.gmail.com>
	<CANEZrP3KKSkD7_R0Dvt600b7vh0oia78vHhPrPqSGBbwf9DsSQ@mail.gmail.com>
	<loom.20140616T181739-326@post.gmane.org>
	<CANEZrP3er1NVoAiVmROTxQ3TC80r7enKaHkWjOYTbKehf7qJjQ@mail.gmail.com>
	<loom.20140616T184930-521@post.gmane.org>
	<CANEZrP2fg9k9fC+QAO2GQS7VC-JCtbEjubHB9j1TJtR9vuaDSQ@mail.gmail.com>
	<loom.20140616T190550-931@post.gmane.org>
	<CALDj+Bbvvs4rkrSOndk4rbt9JGwSwF1VeFk2XPjFy7Ro4O9heg@mail.gmail.com>
Message-ID: <CANEZrP384LFKaCbAL-p06FQdHHp1bqmcRs+XZDbwVXVrPRDS7g@mail.gmail.com>

I think many of us feel it'd be better if this kind of thing were not
needed at all, however, the best way to ensure it doesn't end up being used
is to write code, not to try and block alternative approaches. If Bitcoin
is robust the market should sort it out. If it's robust for some
transactions and not others, that makes for a fun project for a future
generation of hackers to sort out.

OK, enough philosophy - let's try and keep this thread just for discussion
of the BIP itself from now on. If you'd like to continue debating the
Future of Bitcoin please change the subject line and break it out into a
new thread.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140616/8135d9e8/attachment.html>

From bip at mattwhitlock.name  Mon Jun 16 18:10:33 2014
From: bip at mattwhitlock.name (Matt Whitlock)
Date: Mon, 16 Jun 2014 14:10:33 -0400
Subject: [Bitcoin-development] Incentivizing the running of full nodes
In-Reply-To: <CANEZrP0eNDuGnm1vESwoe=9HWUKZGQ5CKsDZ8SHsQxCaNEjRsA@mail.gmail.com>
References: <87aaf81b20e17332175a3fbcd091c317.squirrel@fulvetta.riseup.net>
	<1801389.9PVWAZniMG@crushinator>
	<CANEZrP0eNDuGnm1vESwoe=9HWUKZGQ5CKsDZ8SHsQxCaNEjRsA@mail.gmail.com>
Message-ID: <1866054.ECx185lXld@crushinator>

On Monday, 16 June 2014, at 7:59 pm, Mike Hearn wrote:
> >
> > This is a cool idea, but doesn't it generate some perverse incentives? If
> > I'm running a full node and I want to pay CheapAir for some plane tickets,
> > I'll want to pay in the greatest number of individual transactions possible
> 
> Peers can calculate rewards based on number of inputs or total kb used:
> you're paying for kilobytes with either coin age or fees no matter what. So
> I think in practice it's not a big deal.

So effectively, if you pay for your bandwidth/storage usage via fees, then the reward system is constrained by proof of burn, and if you pay for your usage via coin age, then the reward system is constrained by proof of stake.

Now another concern: won't this proposal increase the likelihood of a network split? The free-market capitalist nodes will want to charge their peers and will kick and ban peers that don't pay up (and will pay their peers to avoid being kicked and banned themselves), whereas the socialist nodes will want all of their peers to feed them transactions out of the goodness of their hearts and will thus necessarily be relegated to connecting only to other altrustic peers. Thus, the network will comprise two incompatible ideological camps, whose nodes won't interconnect.



From justusranvier at gmail.com  Mon Jun 16 19:00:17 2014
From: justusranvier at gmail.com (Justus Ranvier)
Date: Mon, 16 Jun 2014 14:00:17 -0500 (CDT)
Subject: [Bitcoin-development] Incentivizing the running of full nodes
In-Reply-To: <1866054.ECx185lXld@crushinator>
References: <87aaf81b20e17332175a3fbcd091c317.squirrel@fulvetta.riseup.net>
	<1801389.9PVWAZniMG@crushinator>
	<CANEZrP0eNDuGnm1vESwoe=9HWUKZGQ5CKsDZ8SHsQxCaNEjRsA@mail.gmail.com>
	<1866054.ECx185lXld@crushinator>
Message-ID: <422d16e8.kqhkiG.146a60d2382@gmail.com>

There can be multiple independent transport networks for Bitcoin.

There already is: ipv4, ipv6, Tor, and native_i2p (out of tree patch).

As long as multihomed hosts that act as bridges then information will propagate across all of them.
--
Justus Ranvier
-----------------
sent with R2Mail2

----- Original Message -----
From: Matt Whitlock <bip at mattwhitlock.name>
Sent: 2014/06/16 - 13:10
To: Mike Hearn <mike at plan99.net>, Justus Ranvier <justusranvier at gmail.com>
Subject: Re: [Bitcoin-development] Incentivizing the running of full nodes

> On Monday, 16 June 2014, at 7:59 pm, Mike Hearn wrote:
>> >
>> > This is a cool idea, but doesn't it generate some perverse incentives? If
>> > I'm running a full node and I want to pay CheapAir for some plane tickets,
>> > I'll want to pay in the greatest number of individual transactions possible
>>
>> Peers can calculate rewards based on number of inputs or total kb used:
>> you're paying for kilobytes with either coin age or fees no matter what. So
>> I think in practice it's not a big deal.
>
> So effectively, if you pay for your bandwidth/storage usage via fees, then the reward system is constrained by proof of burn, and if you pay for your usage via coin age, then the reward system is constrained by proof of stake.
>
> Now another concern: won't this proposal increase the likelihood of a network split? The free-market capitalist nodes will want to charge their peers and will kick and ban peers that don't pay up (and will pay their peers to avoid being kicked and banned themselves), whereas the socialist nodes will want all of their peers to feed them transactions out of the goodness of their hearts and will thus necessarily be relegated to connecting only to other altrustic peers. Thus, the network will comprise two incompatible ideological camps, whose nodes won't interconnect.


-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 532 bytes
Desc: PGP/MIME digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140616/b09ddd18/attachment.sig>

From drice at greenmangosystems.com  Mon Jun 16 20:29:54 2014
From: drice at greenmangosystems.com (Daniel Rice)
Date: Mon, 16 Jun 2014 13:29:54 -0700
Subject: [Bitcoin-development] instant confirmation via payment protocol
 backwards compatible proto buffer extension
In-Reply-To: <CANEZrP384LFKaCbAL-p06FQdHHp1bqmcRs+XZDbwVXVrPRDS7g@mail.gmail.com>
References: <CAKrJrGOBSiY5V59eko6g796j3wh9V9ZLjPbyHeS5=zyX6j3Wdw@mail.gmail.com>
	<CANEZrP0Euc1mPhRc9e41tU4zMDrWesvVyiBpAPq6M3m7K=aU=A@mail.gmail.com>
	<CAFDyEXgKpbE4WGAqROJ4J1UST=tXWgfn7uKhRO_tngJfVK_Czw@mail.gmail.com>
	<CADE3-jA8LizD8cjdqKm0pFc8OV7JqPBGhs4uvp6=VhEU2emV6w@mail.gmail.com>
	<CANEZrP3KKSkD7_R0Dvt600b7vh0oia78vHhPrPqSGBbwf9DsSQ@mail.gmail.com>
	<loom.20140616T181739-326@post.gmane.org>
	<CANEZrP3er1NVoAiVmROTxQ3TC80r7enKaHkWjOYTbKehf7qJjQ@mail.gmail.com>
	<loom.20140616T184930-521@post.gmane.org>
	<CANEZrP2fg9k9fC+QAO2GQS7VC-JCtbEjubHB9j1TJtR9vuaDSQ@mail.gmail.com>
	<loom.20140616T190550-931@post.gmane.org>
	<CALDj+Bbvvs4rkrSOndk4rbt9JGwSwF1VeFk2XPjFy7Ro4O9heg@mail.gmail.com>
	<CANEZrP384LFKaCbAL-p06FQdHHp1bqmcRs+XZDbwVXVrPRDS7g@mail.gmail.com>
Message-ID: <CAFDyEXg8OnoYCNLT1WeX2tBPTB_zcXsZ6ujP_8YmPvGyf4pzkw@mail.gmail.com>

I'm trying to think through how to encourage the maximum number of instant
signature providers and avoid the VISA monopoly. Ideal case would be that
people can even be their own instant provider.

What if the protocol allowed multiple instant signatures on a transaction?
Would it encourage more instant providers? For example, a new instant
provider could bootstrap their own trust by paying an already trusted
instant provider to co-sign the same transaction. This would be useful in
the case that a new company tries to release a new wallet once the trust
ring is already established. Nobody will use that wallet because it does
not have the trusted history to do instant transactions, but if they can
pay a small amount per transaction to a third party to cosign, they can
build trust in their own signature till they can eventually have enough
trust on their own. This could be how an individual user could grow trust
in their own instant signature as well.


On Mon, Jun 16, 2014 at 11:09 AM, Mike Hearn <mike at plan99.net> wrote:

> I think many of us feel it'd be better if this kind of thing were not
> needed at all, however, the best way to ensure it doesn't end up being used
> is to write code, not to try and block alternative approaches. If Bitcoin
> is robust the market should sort it out. If it's robust for some
> transactions and not others, that makes for a fun project for a future
> generation of hackers to sort out.
>
> OK, enough philosophy - let's try and keep this thread just for discussion
> of the BIP itself from now on. If you'd like to continue debating the
> Future of Bitcoin please change the subject line and break it out into a
> new thread.
>
>
> ------------------------------------------------------------------------------
> HPCC Systems Open Source Big Data Platform from LexisNexis Risk Solutions
> Find What Matters Most in Your Big Data with HPCC Systems
> Open Source. Fast. Scalable. Simple. Ideal for Dirty Data.
> Leverages Graph Analysis for Fast Processing & Easy Data Exploration
> http://p.sf.net/sfu/hpccsystems
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140616/d9d757fa/attachment.html>

From mike at plan99.net  Mon Jun 16 20:32:15 2014
From: mike at plan99.net (Mike Hearn)
Date: Mon, 16 Jun 2014 22:32:15 +0200
Subject: [Bitcoin-development] instant confirmation via payment protocol
 backwards compatible proto buffer extension
In-Reply-To: <CAFDyEXg8OnoYCNLT1WeX2tBPTB_zcXsZ6ujP_8YmPvGyf4pzkw@mail.gmail.com>
References: <CAKrJrGOBSiY5V59eko6g796j3wh9V9ZLjPbyHeS5=zyX6j3Wdw@mail.gmail.com>
	<CANEZrP0Euc1mPhRc9e41tU4zMDrWesvVyiBpAPq6M3m7K=aU=A@mail.gmail.com>
	<CAFDyEXgKpbE4WGAqROJ4J1UST=tXWgfn7uKhRO_tngJfVK_Czw@mail.gmail.com>
	<CADE3-jA8LizD8cjdqKm0pFc8OV7JqPBGhs4uvp6=VhEU2emV6w@mail.gmail.com>
	<CANEZrP3KKSkD7_R0Dvt600b7vh0oia78vHhPrPqSGBbwf9DsSQ@mail.gmail.com>
	<loom.20140616T181739-326@post.gmane.org>
	<CANEZrP3er1NVoAiVmROTxQ3TC80r7enKaHkWjOYTbKehf7qJjQ@mail.gmail.com>
	<loom.20140616T184930-521@post.gmane.org>
	<CANEZrP2fg9k9fC+QAO2GQS7VC-JCtbEjubHB9j1TJtR9vuaDSQ@mail.gmail.com>
	<loom.20140616T190550-931@post.gmane.org>
	<CALDj+Bbvvs4rkrSOndk4rbt9JGwSwF1VeFk2XPjFy7Ro4O9heg@mail.gmail.com>
	<CANEZrP384LFKaCbAL-p06FQdHHp1bqmcRs+XZDbwVXVrPRDS7g@mail.gmail.com>
	<CAFDyEXg8OnoYCNLT1WeX2tBPTB_zcXsZ6ujP_8YmPvGyf4pzkw@mail.gmail.com>
Message-ID: <CANEZrP2NKG8etGtGgbkA8rPr3BqCMPmVQ-3xqiKXVOK2vf9+7w@mail.gmail.com>

On Mon, Jun 16, 2014 at 10:29 PM, Daniel Rice <drice at greenmangosystems.com>
wrote:

> I'm trying to think through how to encourage the maximum number of instant
> signature providers and avoid the VISA monopoly. Ideal case would be that
> people can even be their own instant provider.
>

A provider does not have to be an interactive third party. One reason I
suggested using X.509 is so secure hardware devices like the TREZOR could
also be instant providers. The hardware would be tamperproof and assert
using a secret key embedded in it that the tx came from a genuine,
unflashed TREZOR. The the server can know the device won't double spend.

In this way you have decentralised anti-double spending. Of course, it's an
old solution. MintChip sort of worked a bit like this.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140616/263c333e/attachment.html>

From alexykot at gmail.com  Mon Jun 16 20:32:40 2014
From: alexykot at gmail.com (Alex Kotenko)
Date: Mon, 16 Jun 2014 21:32:40 +0100
Subject: [Bitcoin-development] instant confirmation via payment protocol
 backwards compatible proto buffer extension
In-Reply-To: <CANEZrP384LFKaCbAL-p06FQdHHp1bqmcRs+XZDbwVXVrPRDS7g@mail.gmail.com>
References: <CAKrJrGOBSiY5V59eko6g796j3wh9V9ZLjPbyHeS5=zyX6j3Wdw@mail.gmail.com>
	<CANEZrP0Euc1mPhRc9e41tU4zMDrWesvVyiBpAPq6M3m7K=aU=A@mail.gmail.com>
	<CAFDyEXgKpbE4WGAqROJ4J1UST=tXWgfn7uKhRO_tngJfVK_Czw@mail.gmail.com>
	<CADE3-jA8LizD8cjdqKm0pFc8OV7JqPBGhs4uvp6=VhEU2emV6w@mail.gmail.com>
	<CANEZrP3KKSkD7_R0Dvt600b7vh0oia78vHhPrPqSGBbwf9DsSQ@mail.gmail.com>
	<loom.20140616T181739-326@post.gmane.org>
	<CANEZrP3er1NVoAiVmROTxQ3TC80r7enKaHkWjOYTbKehf7qJjQ@mail.gmail.com>
	<loom.20140616T184930-521@post.gmane.org>
	<CANEZrP2fg9k9fC+QAO2GQS7VC-JCtbEjubHB9j1TJtR9vuaDSQ@mail.gmail.com>
	<loom.20140616T190550-931@post.gmane.org>
	<CALDj+Bbvvs4rkrSOndk4rbt9JGwSwF1VeFk2XPjFy7Ro4O9heg@mail.gmail.com>
	<CANEZrP384LFKaCbAL-p06FQdHHp1bqmcRs+XZDbwVXVrPRDS7g@mail.gmail.com>
Message-ID: <CALDj+BYYp_d5t4vNs9t3D0SCW4mPjVR+X4J=VyrkxuiFsYkS=g@mail.gmail.com>

True, enough philosophy. Once this BIP will be finalized - we will it's
schedule implementation in XBTerminal. This is a solution to the problem we
have, probably best one we have to date, so we will use it.


2014-06-16 19:09 GMT+01:00 Mike Hearn <mike at plan99.net>:

> I think many of us feel it'd be better if this kind of thing were not
> needed at all, however, the best way to ensure it doesn't end up being used
> is to write code, not to try and block alternative approaches. If Bitcoin
> is robust the market should sort it out. If it's robust for some
> transactions and not others, that makes for a fun project for a future
> generation of hackers to sort out.
>
> OK, enough philosophy - let's try and keep this thread just for discussion
> of the BIP itself from now on. If you'd like to continue debating the
> Future of Bitcoin please change the subject line and break it out into a
> new thread.
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140616/d67b537a/attachment.html>

From drice at greenmangosystems.com  Mon Jun 16 20:37:52 2014
From: drice at greenmangosystems.com (Daniel Rice)
Date: Mon, 16 Jun 2014 13:37:52 -0700
Subject: [Bitcoin-development] instant confirmation via payment protocol
 backwards compatible proto buffer extension
In-Reply-To: <CANEZrP2NKG8etGtGgbkA8rPr3BqCMPmVQ-3xqiKXVOK2vf9+7w@mail.gmail.com>
References: <CAKrJrGOBSiY5V59eko6g796j3wh9V9ZLjPbyHeS5=zyX6j3Wdw@mail.gmail.com>
	<CANEZrP0Euc1mPhRc9e41tU4zMDrWesvVyiBpAPq6M3m7K=aU=A@mail.gmail.com>
	<CAFDyEXgKpbE4WGAqROJ4J1UST=tXWgfn7uKhRO_tngJfVK_Czw@mail.gmail.com>
	<CADE3-jA8LizD8cjdqKm0pFc8OV7JqPBGhs4uvp6=VhEU2emV6w@mail.gmail.com>
	<CANEZrP3KKSkD7_R0Dvt600b7vh0oia78vHhPrPqSGBbwf9DsSQ@mail.gmail.com>
	<loom.20140616T181739-326@post.gmane.org>
	<CANEZrP3er1NVoAiVmROTxQ3TC80r7enKaHkWjOYTbKehf7qJjQ@mail.gmail.com>
	<loom.20140616T184930-521@post.gmane.org>
	<CANEZrP2fg9k9fC+QAO2GQS7VC-JCtbEjubHB9j1TJtR9vuaDSQ@mail.gmail.com>
	<loom.20140616T190550-931@post.gmane.org>
	<CALDj+Bbvvs4rkrSOndk4rbt9JGwSwF1VeFk2XPjFy7Ro4O9heg@mail.gmail.com>
	<CANEZrP384LFKaCbAL-p06FQdHHp1bqmcRs+XZDbwVXVrPRDS7g@mail.gmail.com>
	<CAFDyEXg8OnoYCNLT1WeX2tBPTB_zcXsZ6ujP_8YmPvGyf4pzkw@mail.gmail.com>
	<CANEZrP2NKG8etGtGgbkA8rPr3BqCMPmVQ-3xqiKXVOK2vf9+7w@mail.gmail.com>
Message-ID: <CAFDyEXistfW2Y-93ipty_Z5NgtqT_1BRUNqBsYQNRFz_GjOQ6w@mail.gmail.com>

True, that would work, but still how are you going to bootstrap the trust?
TREZOR is well known, but in a future where there could be 100 different
companies trying to release a similar product to TREZOR it seems like one
company could corner the market by being the only one that is an accepted
instant provider at most vendors. It seems to encourage monopoly unless
there is a standard way to bootstrap trust in your signature.


On Mon, Jun 16, 2014 at 1:32 PM, Mike Hearn <mike at plan99.net> wrote:

> On Mon, Jun 16, 2014 at 10:29 PM, Daniel Rice <drice at greenmangosystems.com
> > wrote:
>
>> I'm trying to think through how to encourage the maximum number of
>> instant signature providers and avoid the VISA monopoly. Ideal case would
>> be that people can even be their own instant provider.
>>
>
> A provider does not have to be an interactive third party. One reason I
> suggested using X.509 is so secure hardware devices like the TREZOR could
> also be instant providers. The hardware would be tamperproof and assert
> using a secret key embedded in it that the tx came from a genuine,
> unflashed TREZOR. The the server can know the device won't double spend.
>
> In this way you have decentralised anti-double spending. Of course, it's
> an old solution. MintChip sort of worked a bit like this.
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140616/6b6146b3/attachment.html>

From mike at plan99.net  Mon Jun 16 20:46:47 2014
From: mike at plan99.net (Mike Hearn)
Date: Mon, 16 Jun 2014 22:46:47 +0200
Subject: [Bitcoin-development] instant confirmation via payment protocol
 backwards compatible proto buffer extension
In-Reply-To: <CAFDyEXistfW2Y-93ipty_Z5NgtqT_1BRUNqBsYQNRFz_GjOQ6w@mail.gmail.com>
References: <CAKrJrGOBSiY5V59eko6g796j3wh9V9ZLjPbyHeS5=zyX6j3Wdw@mail.gmail.com>
	<CANEZrP0Euc1mPhRc9e41tU4zMDrWesvVyiBpAPq6M3m7K=aU=A@mail.gmail.com>
	<CAFDyEXgKpbE4WGAqROJ4J1UST=tXWgfn7uKhRO_tngJfVK_Czw@mail.gmail.com>
	<CADE3-jA8LizD8cjdqKm0pFc8OV7JqPBGhs4uvp6=VhEU2emV6w@mail.gmail.com>
	<CANEZrP3KKSkD7_R0Dvt600b7vh0oia78vHhPrPqSGBbwf9DsSQ@mail.gmail.com>
	<loom.20140616T181739-326@post.gmane.org>
	<CANEZrP3er1NVoAiVmROTxQ3TC80r7enKaHkWjOYTbKehf7qJjQ@mail.gmail.com>
	<loom.20140616T184930-521@post.gmane.org>
	<CANEZrP2fg9k9fC+QAO2GQS7VC-JCtbEjubHB9j1TJtR9vuaDSQ@mail.gmail.com>
	<loom.20140616T190550-931@post.gmane.org>
	<CALDj+Bbvvs4rkrSOndk4rbt9JGwSwF1VeFk2XPjFy7Ro4O9heg@mail.gmail.com>
	<CANEZrP384LFKaCbAL-p06FQdHHp1bqmcRs+XZDbwVXVrPRDS7g@mail.gmail.com>
	<CAFDyEXg8OnoYCNLT1WeX2tBPTB_zcXsZ6ujP_8YmPvGyf4pzkw@mail.gmail.com>
	<CANEZrP2NKG8etGtGgbkA8rPr3BqCMPmVQ-3xqiKXVOK2vf9+7w@mail.gmail.com>
	<CAFDyEXistfW2Y-93ipty_Z5NgtqT_1BRUNqBsYQNRFz_GjOQ6w@mail.gmail.com>
Message-ID: <CANEZrP3P-EzS22QCSLuY8u42pZG7yTPNjoa4prQaSZzEjbxESg@mail.gmail.com>

On Mon, Jun 16, 2014 at 10:37 PM, Daniel Rice <drice at greenmangosystems.com>
wrote:

> True, that would work, but still how are you going to bootstrap the trust?
> TREZOR is well known, but in a future where there could be 100 different
> companies trying to release a similar product to TREZOR it seems like one
> company could corner the market by being the only one that is an accepted
> instant provider at most vendors
>

It's no different to the CA problem. People can only mentally handle a few
trust anchors, so for SSL it goes:

   1 User -> 2-3 browser makers -> 100's of CAs -> millions of websites

The trust starts out narrowly funnelled and grows outwards as things get
outsourced.

For this it'd go

   1 merchant -> 4-5 payment processing engines -> dozens of hardware
manufacturers -> hundreds of thousands of devices
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140616/ec9d9509/attachment.html>

From pete at petertodd.org  Mon Jun 16 20:50:41 2014
From: pete at petertodd.org (Peter Todd)
Date: Mon, 16 Jun 2014 16:50:41 -0400
Subject: [Bitcoin-development] Fidelity bonds for decentralized instant
 confirmation guarantees
In-Reply-To: <CAFDyEXistfW2Y-93ipty_Z5NgtqT_1BRUNqBsYQNRFz_GjOQ6w@mail.gmail.com>
References: <loom.20140616T181739-326@post.gmane.org>
	<CANEZrP3er1NVoAiVmROTxQ3TC80r7enKaHkWjOYTbKehf7qJjQ@mail.gmail.com>
	<loom.20140616T184930-521@post.gmane.org>
	<CANEZrP2fg9k9fC+QAO2GQS7VC-JCtbEjubHB9j1TJtR9vuaDSQ@mail.gmail.com>
	<loom.20140616T190550-931@post.gmane.org>
	<CALDj+Bbvvs4rkrSOndk4rbt9JGwSwF1VeFk2XPjFy7Ro4O9heg@mail.gmail.com>
	<CANEZrP384LFKaCbAL-p06FQdHHp1bqmcRs+XZDbwVXVrPRDS7g@mail.gmail.com>
	<CAFDyEXg8OnoYCNLT1WeX2tBPTB_zcXsZ6ujP_8YmPvGyf4pzkw@mail.gmail.com>
	<CANEZrP2NKG8etGtGgbkA8rPr3BqCMPmVQ-3xqiKXVOK2vf9+7w@mail.gmail.com>
	<CAFDyEXistfW2Y-93ipty_Z5NgtqT_1BRUNqBsYQNRFz_GjOQ6w@mail.gmail.com>
Message-ID: <20140616205041.GA21784@savin>

On Mon, Jun 16, 2014 at 01:37:52PM -0700, Daniel Rice wrote:
> True, that would work, but still how are you going to bootstrap the trust?
> TREZOR is well known, but in a future where there could be 100 different
> companies trying to release a similar product to TREZOR it seems like one
> company could corner the market by being the only one that is an accepted
> instant provider at most vendors. It seems to encourage monopoly unless
> there is a standard way to bootstrap trust in your signature.

You can always use fidelity bonds, or as I called it at the time(1),
"Trusted identities":

    Lets suppose Alice has some bitcoins held at bitcoin address A. She
    wants to establish trust in the "identity" associated with the ECC
    keypair associated with A, for instance for the purpose of having other
    users trust her not to attempt to double spend. Since the trust she
    seeks is financial in nature, she can do this by valuing the identity
    associated with A, by delibrately throwing away resources. A simple way
    to do this would of course be to transfer coins to a null address,
    provably incurring a cost to her.

    A more socially responsible way would be for her to create a series of
    transactions that happen to have large, and equal, transaction fees.
    Bitcoin makes the assumption that no one entity controls more than 50%
    of the network, so if she makes n of these transactions consecutively,
    each spending m BTC to transaction fees, there is a high probability
    that she has given up at least n/2 * m BTC of value. This of course is
    all public knowledge, recorded in the block chain. It also increases the
    transaction fees for miners, which will be very important for the
    network in the future.

    Now Bob can easily examine the block chain, and upon verifying Alice's
    trust purchase, can decide to accept a zero-confirmation transaction at
    face value. If Alice breaks that promise, he simply publishes her signed
    transaction proving that Alice is a fraudster, and future Bob's will
    distrust Alice's trusted identity, thus destroying the value needed to
    create it.

    In effect, we now have a distributed green address system.

Note that the second paragraph is seriously obsolete - better to either
use announce-commit sacrifices, or much preferably, simple destruction
of coins. (sacrifice to fees encourages mining centralization for
obvious reasons)

1) "[Bitcoin-development] Trusted identities", Apr 26th 2012, Peter Todd,
   http://www.mail-archive.com/bitcoin-development%40lists.sourceforge.net/msg01005.html

Incidentally, my first post to this mailing list!

-- 
'peter'[:-1]@petertodd.org
000000000000000058ca7ee3a40438ea5a96e499910638352468c6d69abdb226
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 685 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140616/ada1a3cf/attachment.sig>

From drice at greenmangosystems.com  Mon Jun 16 20:53:09 2014
From: drice at greenmangosystems.com (Daniel Rice)
Date: Mon, 16 Jun 2014 13:53:09 -0700
Subject: [Bitcoin-development] instant confirmation via payment protocol
 backwards compatible proto buffer extension
In-Reply-To: <CANEZrP3P-EzS22QCSLuY8u42pZG7yTPNjoa4prQaSZzEjbxESg@mail.gmail.com>
References: <CAKrJrGOBSiY5V59eko6g796j3wh9V9ZLjPbyHeS5=zyX6j3Wdw@mail.gmail.com>
	<CANEZrP0Euc1mPhRc9e41tU4zMDrWesvVyiBpAPq6M3m7K=aU=A@mail.gmail.com>
	<CAFDyEXgKpbE4WGAqROJ4J1UST=tXWgfn7uKhRO_tngJfVK_Czw@mail.gmail.com>
	<CADE3-jA8LizD8cjdqKm0pFc8OV7JqPBGhs4uvp6=VhEU2emV6w@mail.gmail.com>
	<CANEZrP3KKSkD7_R0Dvt600b7vh0oia78vHhPrPqSGBbwf9DsSQ@mail.gmail.com>
	<loom.20140616T181739-326@post.gmane.org>
	<CANEZrP3er1NVoAiVmROTxQ3TC80r7enKaHkWjOYTbKehf7qJjQ@mail.gmail.com>
	<loom.20140616T184930-521@post.gmane.org>
	<CANEZrP2fg9k9fC+QAO2GQS7VC-JCtbEjubHB9j1TJtR9vuaDSQ@mail.gmail.com>
	<loom.20140616T190550-931@post.gmane.org>
	<CALDj+Bbvvs4rkrSOndk4rbt9JGwSwF1VeFk2XPjFy7Ro4O9heg@mail.gmail.com>
	<CANEZrP384LFKaCbAL-p06FQdHHp1bqmcRs+XZDbwVXVrPRDS7g@mail.gmail.com>
	<CAFDyEXg8OnoYCNLT1WeX2tBPTB_zcXsZ6ujP_8YmPvGyf4pzkw@mail.gmail.com>
	<CANEZrP2NKG8etGtGgbkA8rPr3BqCMPmVQ-3xqiKXVOK2vf9+7w@mail.gmail.com>
	<CAFDyEXistfW2Y-93ipty_Z5NgtqT_1BRUNqBsYQNRFz_GjOQ6w@mail.gmail.com>
	<CANEZrP3P-EzS22QCSLuY8u42pZG7yTPNjoa4prQaSZzEjbxESg@mail.gmail.com>
Message-ID: <CAFDyEXhh=1uX+hrio5dbu8vchDc4pSOrW-PLWq8dHgF4tD4vHA@mail.gmail.com>

The trust can be more automated in this case than it can with CAs. The
difference is that when a CA does something it shouldn't, like generates an
extra cert for a government to use in spoofing a site, nobody knows about
it, unless they mess up. Double spends on the network can be monitored and
stored for history. Merchants can and will share information on instant
provider trust with eachother, so they will essentially be able to build up
a credit history on a given instant provider without really knowing who
they are.


On Mon, Jun 16, 2014 at 1:46 PM, Mike Hearn <mike at plan99.net> wrote:

> On Mon, Jun 16, 2014 at 10:37 PM, Daniel Rice <drice at greenmangosystems.com
> > wrote:
>
>> True, that would work, but still how are you going to bootstrap the
>> trust? TREZOR is well known, but in a future where there could be 100
>> different companies trying to release a similar product to TREZOR it seems
>> like one company could corner the market by being the only one that is an
>> accepted instant provider at most vendors
>>
>
> It's no different to the CA problem. People can only mentally handle a few
> trust anchors, so for SSL it goes:
>
>    1 User -> 2-3 browser makers -> 100's of CAs -> millions of websites
>
> The trust starts out narrowly funnelled and grows outwards as things get
> outsourced.
>
> For this it'd go
>
>    1 merchant -> 4-5 payment processing engines -> dozens of hardware
> manufacturers -> hundreds of thousands of devices
>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140616/c00bb23f/attachment.html>

From mike at plan99.net  Mon Jun 16 20:55:23 2014
From: mike at plan99.net (Mike Hearn)
Date: Mon, 16 Jun 2014 22:55:23 +0200
Subject: [Bitcoin-development] instant confirmation via payment protocol
 backwards compatible proto buffer extension
In-Reply-To: <CAFDyEXhh=1uX+hrio5dbu8vchDc4pSOrW-PLWq8dHgF4tD4vHA@mail.gmail.com>
References: <CAKrJrGOBSiY5V59eko6g796j3wh9V9ZLjPbyHeS5=zyX6j3Wdw@mail.gmail.com>
	<CANEZrP0Euc1mPhRc9e41tU4zMDrWesvVyiBpAPq6M3m7K=aU=A@mail.gmail.com>
	<CAFDyEXgKpbE4WGAqROJ4J1UST=tXWgfn7uKhRO_tngJfVK_Czw@mail.gmail.com>
	<CADE3-jA8LizD8cjdqKm0pFc8OV7JqPBGhs4uvp6=VhEU2emV6w@mail.gmail.com>
	<CANEZrP3KKSkD7_R0Dvt600b7vh0oia78vHhPrPqSGBbwf9DsSQ@mail.gmail.com>
	<loom.20140616T181739-326@post.gmane.org>
	<CANEZrP3er1NVoAiVmROTxQ3TC80r7enKaHkWjOYTbKehf7qJjQ@mail.gmail.com>
	<loom.20140616T184930-521@post.gmane.org>
	<CANEZrP2fg9k9fC+QAO2GQS7VC-JCtbEjubHB9j1TJtR9vuaDSQ@mail.gmail.com>
	<loom.20140616T190550-931@post.gmane.org>
	<CALDj+Bbvvs4rkrSOndk4rbt9JGwSwF1VeFk2XPjFy7Ro4O9heg@mail.gmail.com>
	<CANEZrP384LFKaCbAL-p06FQdHHp1bqmcRs+XZDbwVXVrPRDS7g@mail.gmail.com>
	<CAFDyEXg8OnoYCNLT1WeX2tBPTB_zcXsZ6ujP_8YmPvGyf4pzkw@mail.gmail.com>
	<CANEZrP2NKG8etGtGgbkA8rPr3BqCMPmVQ-3xqiKXVOK2vf9+7w@mail.gmail.com>
	<CAFDyEXistfW2Y-93ipty_Z5NgtqT_1BRUNqBsYQNRFz_GjOQ6w@mail.gmail.com>
	<CANEZrP3P-EzS22QCSLuY8u42pZG7yTPNjoa4prQaSZzEjbxESg@mail.gmail.com>
	<CAFDyEXhh=1uX+hrio5dbu8vchDc4pSOrW-PLWq8dHgF4tD4vHA@mail.gmail.com>
Message-ID: <CANEZrP3c05UKoJvdiEAPR9gFzRRW4EZK_XbLv=p_nkpbr9QSMA@mail.gmail.com>

Yes that's true. Though it's off topic, check out
http://www.certificate-transparency.org/  .... it's a project to force CA's
to publish all certs they make publicly.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140616/88751e2e/attachment.html>

From justusranvier at gmail.com  Mon Jun 16 20:55:12 2014
From: justusranvier at gmail.com (Justus Ranvier)
Date: Mon, 16 Jun 2014 20:55:12 +0000
Subject: [Bitcoin-development] Incentivizing the running of full nodes
In-Reply-To: <422d16e8.kqhkiG.146a60d2382@gmail.com>
References: <87aaf81b20e17332175a3fbcd091c317.squirrel@fulvetta.riseup.net>
	<1801389.9PVWAZniMG@crushinator>
	<CANEZrP0eNDuGnm1vESwoe=9HWUKZGQ5CKsDZ8SHsQxCaNEjRsA@mail.gmail.com>
	<1866054.ECx185lXld@crushinator>
	<422d16e8.kqhkiG.146a60d2382@gmail.com>
Message-ID: <539F59B0.5040601@gmail.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On 06/16/2014 07:00 PM, Justus Ranvier wrote:
> There can be multiple independent transport networks for Bitcoin.
> 
> There already is: ipv4, ipv6, Tor, and native_i2p (out of tree
> patch).
> 
> As long as multihomed hosts that act as bridges then information
> will propagate across all of them. -- Justus Ranvier 
> ----------------- sent with R2Mail2
> 
> ----- Original Message ----- From: Matt Whitlock
> <bip at mattwhitlock.name>
>> Now another concern: won't this proposal increase the likelihood
>> of a network split? The free-market capitalist nodes will want to
>> charge their peers and will kick and ban peers that don't pay up
>> (and will pay their peers to avoid being kicked and banned
>> themselves), whereas the socialist nodes will want all of their
>> peers to feed them transactions out of the goodness of their
>> hearts and will thus necessarily be relegated to connecting only
>> to other altrustic peers. Thus, the network will comprise two
>> incompatible ideological camps, whose nodes won't interconnect.

Also consider that currently there are many people have already
demonstrated a willingness to donate bandwidth and resources to the
public by running nodes, so those people aren't going to disappear.

They could operate mixed-mode nodes, with a fraction of the allowed
incoming connections reserved for free peer, with free connections
might be limited in terms of time duration. Bitcoin-accepting
brick-and-mortars would probably allow free access to anyone connected
to their internal wifi to facilitate people wanting to pay.

Crowdfunded free bridges, assurance contracts, etc are all other ways
to let people get into the network with no upfront cost.


- -- 
Support online privacy by using email encryption whenever possible.
Learn how here: http://www.youtube.com/watch?v=bakOKJFtB-k
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2.0.22 (GNU/Linux)

iQEcBAEBAgAGBQJTn1mwAAoJEMP3uyY4RQ21ePwIALpMV/GDpAyD4SeL6hWi32vQ
197YD1LPuLWrEbUs/+gl1Sk2gIsWWlq/o86KcP7Cn4fZdBAKEiF5RpQ6iPsO2+bj
JR0W/EbgUyzIhYaxFysCzQ1HPzQx+0a2vHn/6FsB7YMha8gvxviF7InDEwcfxbok
o0QS5SeYWryp5mH7IokC6fLYsAPmiueugPVRSD/l8IRFYWVFS9nB+XAR1PWAdYSQ
Xyzu9oyPwlKAjYKxl4XHYB4DofacS89DpWMVbWHviYiZ7UufmzMgwPtfMCsQAxSb
q3OMAkcSGJZL8pcy9/9NWpOGAHY2DRtGtu8oSqXcBSW/IQCubmUNmzopt8O/H74=
=9hrW
-----END PGP SIGNATURE-----
-------------- next part --------------
A non-text attachment was scrubbed...
Name: 0x38450DB5.asc
Type: application/pgp-keys
Size: 12464 bytes
Desc: not available
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140616/d36e6db3/attachment.bin>

From drice at greenmangosystems.com  Mon Jun 16 21:02:45 2014
From: drice at greenmangosystems.com (Daniel Rice)
Date: Mon, 16 Jun 2014 14:02:45 -0700
Subject: [Bitcoin-development] instant confirmation via payment protocol
 backwards compatible proto buffer extension
In-Reply-To: <CAFDyEXg8OnoYCNLT1WeX2tBPTB_zcXsZ6ujP_8YmPvGyf4pzkw@mail.gmail.com>
References: <CAKrJrGOBSiY5V59eko6g796j3wh9V9ZLjPbyHeS5=zyX6j3Wdw@mail.gmail.com>
	<CANEZrP0Euc1mPhRc9e41tU4zMDrWesvVyiBpAPq6M3m7K=aU=A@mail.gmail.com>
	<CAFDyEXgKpbE4WGAqROJ4J1UST=tXWgfn7uKhRO_tngJfVK_Czw@mail.gmail.com>
	<CADE3-jA8LizD8cjdqKm0pFc8OV7JqPBGhs4uvp6=VhEU2emV6w@mail.gmail.com>
	<CANEZrP3KKSkD7_R0Dvt600b7vh0oia78vHhPrPqSGBbwf9DsSQ@mail.gmail.com>
	<loom.20140616T181739-326@post.gmane.org>
	<CANEZrP3er1NVoAiVmROTxQ3TC80r7enKaHkWjOYTbKehf7qJjQ@mail.gmail.com>
	<loom.20140616T184930-521@post.gmane.org>
	<CANEZrP2fg9k9fC+QAO2GQS7VC-JCtbEjubHB9j1TJtR9vuaDSQ@mail.gmail.com>
	<loom.20140616T190550-931@post.gmane.org>
	<CALDj+Bbvvs4rkrSOndk4rbt9JGwSwF1VeFk2XPjFy7Ro4O9heg@mail.gmail.com>
	<CANEZrP384LFKaCbAL-p06FQdHHp1bqmcRs+XZDbwVXVrPRDS7g@mail.gmail.com>
	<CAFDyEXg8OnoYCNLT1WeX2tBPTB_zcXsZ6ujP_8YmPvGyf4pzkw@mail.gmail.com>
Message-ID: <CAFDyEXghQ0yOpsoj2T4535m1XdKsdg6993hmp8iZQDy0ixRsQg@mail.gmail.com>

Mike Hearn <mike at plan99.net> wrote:
>> A more scalable approach would be for the user to send the name and
>> signature of their "instant provider" every time and the merchant just
>> chooses whether to ignore it or not, but as Lawrence points out, this is
>> incompatible with the provider charging extra fees for "instantness". But
>> should we care? I'm trying to imagine what the purchasing experience is
like
>> with optional paid-for third party anti-double-spend protection.
Ultimately
>> it's the merchant who cares about this, not me, so why would I ever pay?

Lawrence Nahum <lawrence at greenaddress.it> wrote:
> I think you are wrong here.
> Just because up to date credit cards charged the merchant which in turn
> charged you and the ordinary cash payer doesn't mean a newer and better
> system can't be transparent from day one.

I don't think a whitelist of trust is a practical approach because you are
going to want to have varying levels of trust in different instant
providers. This would be based on how large their past transaction volume
has been. For that reason maybe another approach is an additional
negotiation message between the merchant and wallet. Merchant sends payment
details -> wallet responds with their instant information requesting if an
instant transaction will be accepted for this transaction. Merchant weighs
the risk based on historical data about this particular instant provider
and the amount of the requested transaction -> Merchant responds yes or no.

That approach avoids the scaling issue, but also allows for Lawrence's use
case of charging the user a fee only in the case where the instant
transaction is supported.


On Mon, Jun 16, 2014 at 1:29 PM, Daniel Rice <drice at greenmangosystems.com>
wrote:

> I'm trying to think through how to encourage the maximum number of instant
> signature providers and avoid the VISA monopoly. Ideal case would be that
> people can even be their own instant provider.
>
> What if the protocol allowed multiple instant signatures on a transaction?
> Would it encourage more instant providers? For example, a new instant
> provider could bootstrap their own trust by paying an already trusted
> instant provider to co-sign the same transaction. This would be useful in
> the case that a new company tries to release a new wallet once the trust
> ring is already established. Nobody will use that wallet because it does
> not have the trusted history to do instant transactions, but if they can
> pay a small amount per transaction to a third party to cosign, they can
> build trust in their own signature till they can eventually have enough
> trust on their own. This could be how an individual user could grow trust
> in their own instant signature as well.
>
>
> On Mon, Jun 16, 2014 at 11:09 AM, Mike Hearn <mike at plan99.net> wrote:
>
>> I think many of us feel it'd be better if this kind of thing were not
>> needed at all, however, the best way to ensure it doesn't end up being used
>> is to write code, not to try and block alternative approaches. If Bitcoin
>> is robust the market should sort it out. If it's robust for some
>> transactions and not others, that makes for a fun project for a future
>> generation of hackers to sort out.
>>
>> OK, enough philosophy - let's try and keep this thread just for
>> discussion of the BIP itself from now on. If you'd like to continue
>> debating the Future of Bitcoin please change the subject line and break it
>> out into a new thread.
>>
>>
>> ------------------------------------------------------------------------------
>> HPCC Systems Open Source Big Data Platform from LexisNexis Risk Solutions
>> Find What Matters Most in Your Big Data with HPCC Systems
>> Open Source. Fast. Scalable. Simple. Ideal for Dirty Data.
>> Leverages Graph Analysis for Fast Processing & Easy Data Exploration
>> http://p.sf.net/sfu/hpccsystems
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140616/f6c6111b/attachment.html>

From pete at petertodd.org  Tue Jun 17 07:23:51 2014
From: pete at petertodd.org (Peter Todd)
Date: Tue, 17 Jun 2014 03:23:51 -0400
Subject: [Bitcoin-development] Proposal: allocate 8 service bits for
	experimental use
Message-ID: <20140617072351.GA7205@savin>

For my replace-by-fee implementation(1) I used service bit 26 to let
preferential peering work so that replace-by-fee nodes could easily find
each other. Of course, that's a temporary/experimental usage that can be
dropped after wider adoption, so I included the following comment:

    // Reserve 24-31 for temporary experiments
    NODE_REPLACE_BY_FEE = (1 << 26)

Service bits are never a guaranteed thing anyway, so occasional
collisions can and should be tolerated by applications using these
experimental service bits.


Alternately Wladimir J. van der Laan brought up elsewhere(2) the
possibility for a wider notion of an extension namespace. I'm personally
not convinced of the short-term need - we've got 64 service bits yet
NODE_BLOOM is the first fully fleshed out proposal to use one - but it's
worth thinking about for the long term.

1) https://github.com/petertodd/bitcoin/tree/replace-by-fee-v0.9.1
2) https://github.com/bitcoin/bitcoin/pull/4351#issuecomment-46272958

-- 
'peter'[:-1]@petertodd.org
000000000000000058ca7ee3a40438ea5a96e499910638352468c6d69abdb226
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 685 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140617/f952e072/attachment.sig>

From laanwj at gmail.com  Tue Jun 17 07:57:35 2014
From: laanwj at gmail.com (Wladimir)
Date: Tue, 17 Jun 2014 09:57:35 +0200
Subject: [Bitcoin-development] Proposal: allocate 8 service bits for
 experimental use
In-Reply-To: <20140617072351.GA7205@savin>
References: <20140617072351.GA7205@savin>
Message-ID: <CA+s+GJAgQAZzwgONbD==fYTsV9jWKCZ6+gTiwohUT_H5kT_MoA@mail.gmail.com>

On Tue, Jun 17, 2014 at 9:23 AM, Peter Todd <pete at petertodd.org> wrote:

> Alternately Wladimir J. van der Laan brought up elsewhere(2) the
> possibility for a wider notion of an extension namespace. I'm personally
> not convinced of the short-term need - we've got 64 service bits yet
> NODE_BLOOM is the first fully fleshed out proposal to use one - but it's
> worth thinking about for the long term

Yes, as I said in the github topic
(https://github.com/bitcoin/bitcoin/pull/4351) I suggest we adapt a
string-based name space for extensions.

A new network version could add a command 'getextensions' to query the
supported extensions, returning a list of extension strings or
(extension,version) pairs. For BIPs some something like 'BIP0064'
could be defined, but for an experiment for example
'experimental-getutxo'. This would be easy to implement and specify.

Unlike with the 64 service bits it does not require (as much) central
coordination to assign as there is no real danger of collisions. It
takes the political aspect out of P2P network extensions, and gives
more freedom to alternative implementations to experiment with their
own extensions. And no more need for bitcoin core to drive what must
be supported with increasing network versions.

Wladimir



From bip at mattwhitlock.name  Tue Jun 17 08:02:41 2014
From: bip at mattwhitlock.name (Matt Whitlock)
Date: Tue, 17 Jun 2014 04:02:41 -0400
Subject: [Bitcoin-development] Proposal: allocate 8 service bits for
	experimental use
In-Reply-To: <CA+s+GJAgQAZzwgONbD==fYTsV9jWKCZ6+gTiwohUT_H5kT_MoA@mail.gmail.com>
References: <20140617072351.GA7205@savin>
	<CA+s+GJAgQAZzwgONbD==fYTsV9jWKCZ6+gTiwohUT_H5kT_MoA@mail.gmail.com>
Message-ID: <2024964.4FECq06JhC@crushinator>

On Tuesday, 17 June 2014, at 9:57 am, Wladimir wrote:
> Yes, as I said in the github topic
> (https://github.com/bitcoin/bitcoin/pull/4351) I suggest we adapt a
> string-based name space for extensions.

Why use textual strings? These fields are not for human consumption. Why not use UUIDs, which are fixed length and will not waste as much bandwidth in the protocol? Or if you'd prefer a hierarchical namespace, you could use OIDs, a la ASN.1.



From laanwj at gmail.com  Tue Jun 17 08:08:31 2014
From: laanwj at gmail.com (Wladimir)
Date: Tue, 17 Jun 2014 10:08:31 +0200
Subject: [Bitcoin-development] Proposal: allocate 8 service bits for
 experimental use
In-Reply-To: <2024964.4FECq06JhC@crushinator>
References: <20140617072351.GA7205@savin>
	<CA+s+GJAgQAZzwgONbD==fYTsV9jWKCZ6+gTiwohUT_H5kT_MoA@mail.gmail.com>
	<2024964.4FECq06JhC@crushinator>
Message-ID: <CA+s+GJBJ5aXNEv+8zARXHPL1+fg1Etd3-EhF2TeW+gS-_r+s3g@mail.gmail.com>

On Tue, Jun 17, 2014 at 10:02 AM, Matt Whitlock <bip at mattwhitlock.name> wrote:
> On Tuesday, 17 June 2014, at 9:57 am, Wladimir wrote:
>> Yes, as I said in the github topic
>> (https://github.com/bitcoin/bitcoin/pull/4351) I suggest we adapt a
>> string-based name space for extensions.
>
> Why use textual strings? These fields are not for human consumption. Why not use UUIDs, which are fixed length and will not waste as much bandwidth in the protocol? Or if you'd prefer a hierarchical namespace, you could use OIDs, a la ASN.1.

Come on, this is only sent over the line at connection time at most
once. No need to overdesign a scheme here.

Anyhow, if we like to bike-shed so much:
- UUIDs are 16 bytes -- most human-recognizable strings are shorter.
And they're ugly to use as well.
- OIDs need central and hierarchical coordination, just what we're
trying to avoid.

Wladimir



From laanwj at gmail.com  Tue Jun 17 08:16:01 2014
From: laanwj at gmail.com (Wladimir)
Date: Tue, 17 Jun 2014 10:16:01 +0200
Subject: [Bitcoin-development] Proposal: allocate 8 service bits for
 experimental use
In-Reply-To: <CA+s+GJBJ5aXNEv+8zARXHPL1+fg1Etd3-EhF2TeW+gS-_r+s3g@mail.gmail.com>
References: <20140617072351.GA7205@savin>
	<CA+s+GJAgQAZzwgONbD==fYTsV9jWKCZ6+gTiwohUT_H5kT_MoA@mail.gmail.com>
	<2024964.4FECq06JhC@crushinator>
	<CA+s+GJBJ5aXNEv+8zARXHPL1+fg1Etd3-EhF2TeW+gS-_r+s3g@mail.gmail.com>
Message-ID: <CA+s+GJB_zpgth4=7O2vAOH2RPTz=9xZtbWH=dr6hYzDm8osNyw@mail.gmail.com>

On Tue, Jun 17, 2014 at 10:08 AM, Wladimir <laanwj at gmail.com> wrote:
> On Tue, Jun 17, 2014 at 10:02 AM, Matt Whitlock <bip at mattwhitlock.name> wrote:
>> On Tuesday, 17 June 2014, at 9:57 am, Wladimir wrote:
>>> Yes, as I said in the github topic
>>> (https://github.com/bitcoin/bitcoin/pull/4351) I suggest we adapt a
>>> string-based name space for extensions.
>>
>> Why use textual strings? These fields are not for human consumption. Why not use UUIDs, which are fixed length and will not waste as much bandwidth in the protocol? Or if you'd prefer a hierarchical namespace, you could use OIDs, a la ASN.1.

Also it IS useful for these fields to be human readable for
statistics, peer list views and such. When encountering a new, unknown
extension when connecting to a node it's much more useful to get a
google-able string to find out what it is about, than some long
hexadecimal or dotted-number identifier.

Wladimir



From rme at i-rme.es  Tue Jun 17 08:57:06 2014
From: rme at i-rme.es (=?UTF-8?B?UmHDumwgTWFydMOtbmV6?=)
Date: Tue, 17 Jun 2014 10:57:06 +0200
Subject: [Bitcoin-development] Proposals for improving Bitcoin mining
	decentralization
Message-ID: <CA+8=xuKmE2rgNK+Q4g+Gqvy3QuYAXzVRYtWKC2VttuB_LJmyMA@mail.gmail.com>

First of all I apologice due to the possible mistakes in my writing below,
I am not a Bitcoin developer but I have some knowledge about it.

----

We all know the recent news, Ghash pool controlling 51% of the hashrate.
While some consider it a threat others think that is not harmful.

The thing is that we have to do something to stop this from happening again.

My proposal is to start thinking about miners that join a pool like
independent miners and not slave miners, this includes creating a new
mining protocol that does not rely on the pool sending the list of
transactions to include in a block. Each individual miner has to collect
transactions by his own and mine that, this can be achieved by running a
full node or by running a SPV like node that ask other nodes for
transactions.

Once this protocol is developed and standarised we as a community could
require all pools to use it (because its better, because is more
trustless...), not by imposing it but by recommending it.

Pool owners could send some instructions using this protocol to the miner
about how many transactions to include per block (some pools want small
blocks), how many 0 fee transactions to include, how much is the minimum
fee per Kb to include transactions and some info about the Coinbase field
in the block.

This way is impossible to perform some of the possible 51% attacks:

   - A pool owner cant mine a new chain (selfish mining) (pool clients have
   a SPV or full node that has checkpoints and ask other peers about the
   length of the chain)
   - A pool owner can't perform double spends or reverse transactions (pool
   clients know all the transactions relayed to the network, they know if they
   are already included on a block)
   - A pool owner cant decide which transactions not to include (but they
   can configure the minimum fee).
   - A pool owner cant get all the rewards by avoiding other pools from
   mining blocks (Because the pool client knows the last block independently
   that is from his pool or other).


The only thing that a 51% pool owner can do is to shut down his pool and
drop the hashrate by 51% because he does not control the miners.

If the pool owner owns all the hardware in the pool my proposal is not
valid, if the pool clients dont use this protocol my proposal is not valid.


I want to know if this is possible or its been developed or there is
already a working protocol that works like this, also I want to read other
people's ways to address this threat, thanks for reading.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140617/9529a793/attachment.html>

From misterbg6 at gmail.com  Tue Jun 17 09:23:06 2014
From: misterbg6 at gmail.com (Mistr Bigs)
Date: Tue, 17 Jun 2014 11:23:06 +0200
Subject: [Bitcoin-development] Proposals for improving Bitcoin mining
	decentralization
Message-ID: <CABssiCpXFzDPQFaTJgX_RnY1jZNhJBAn5mtJomemHaaYXVL7sw@mail.gmail.com>

I have been surprised by the lack of discussion of this topic here!

On 6/17/2014 10:57 AM, Ra?l Mart?nez wrote:

We all know the recent news, Ghash pool controlling 51% of the hashrate.
While some consider it a threat others think that is not harmful.

The thing is that we have to do something to stop this from happening again.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140617/e97faf7c/attachment.html>

From laanwj at gmail.com  Tue Jun 17 09:46:52 2014
From: laanwj at gmail.com (Wladimir)
Date: Tue, 17 Jun 2014 11:46:52 +0200
Subject: [Bitcoin-development] [ann] Bitcoin Core version 0.9.2 has been
	released
Message-ID: <CA+s+GJBVqyKTU0Ugu0U9YpEofD9zu92Jk7y19EQJ5qyp4Ho5VQ@mail.gmail.com>

Bitcoin Core version 0.9.2 is now available from:

  https://bitcoin.org/bin/0.9.2/

(or https://bitcoin.org/en/download)

This is a new minor version release, bringing mostly bug fixes and some minor
improvements. OpenSSL has been updated because of a security issue
(CVE-2014-0224).
Upgrading to this release is recommended.

Please report bugs using the issue tracker at github:

  https://github.com/bitcoin/bitcoin/issues

Upgrading and downgrading
==========================

How to Upgrade
--------------

If you are running an older version, shut it down. Wait until it has completely
shut down (which might take a few minutes for older versions), then run the
installer (on Windows) or just copy over /Applications/Bitcoin-Qt (on Mac) or
bitcoind/bitcoin-qt (on Linux).

If you are upgrading from version 0.7.2 or earlier, the first time you run
0.9.0 your blockchain files will be re-indexed, which will take anywhere from
30 minutes to several hours, depending on the speed of your machine.

Downgrading warnings
--------------------

The 'chainstate' for this release is not always compatible with previous
releases, so if you run 0.9.x and then decide to switch back to a
0.8.x release you might get a blockchain validation error when starting the
old release (due to 'pruned outputs' being omitted from the index of
unspent transaction outputs).

Running the old release with the -reindex option will rebuild the chainstate
data structures and correct the problem.

Also, the first time you run a 0.8.x release on a 0.9 wallet it will rescan
the blockchain for missing spent coins, which will take a long time (tens
of minutes on a typical machine).

Important changes
==================

Gitian OSX build
-----------------

The deterministic build system that was already used for Windows and Linux
builds is now used for OSX as well. Although the resulting executables have
been tested quite a bit, there could be possible regressions. Be sure to report
these on the Github bug tracker mentioned above.

Compatibility of Linux build
-----------------------------

For Linux we now build against Qt 4.6, and filter the symbols for
libstdc++ and glibc.
This brings back compatibility with

- Debian 6+ / Tails
- Ubuntu 10.04
- CentOS 6.5

0.9.2 Release notes
=======================

The OpenSSL dependency in the gitian builds has been upgraded to
1.0.1h because of CVE-2014-0224.

RPC:
- Add `getwalletinfo`, `getblockchaininfo` and `getnetworkinfo` calls
(will replace hodge-podge `getinfo` at some point)
- Add a `relayfee` field to `getnetworkinfo`
- Fix RPC related shutdown hangs and leaks
- Always show syncnode in `getpeerinfo`
- `sendrawtransaction`: report the reject code and reason, and make it
possible to re-send transactions that are already in the mempool
- `getmininginfo` show right genproclimit

Command-line options:
- Fix `-printblocktree` output
- Show error message if ReadConfigFile fails

Block-chain handling and storage:
- Fix for GetBlockValue() after block 13,440,000 (BIP42)
- Upgrade leveldb to 1.17

Protocol and network code:
- Per-peer block download tracking and stalled download detection
- Add new DNS seed from bitnodes.io
- Prevent socket leak in ThreadSocketHandler and correct some proxy
related socket leaks
- Use pnode->nLastRecv as sync score (was the wrong way around)

Wallet:
- Make GetAvailableCredit run GetHash() only once per transaction
(performance improvement)
- Lower paytxfee warning threshold from 0.25 BTC to 0.01 BTC
- Fix importwallet nTimeFirstKey (trigger necessary rescans)
- Log BerkeleyDB version at startup
- CWallet init fix

Build system:
- Add OSX build descriptors to gitian
- Fix explicit --disable-qt-dbus
- Don't require db_cxx.h when compiling with wallet disabled and GUI enabled
- Improve missing boost error reporting
- Upgrade miniupnpc version to 1.9
- gitian-linux: --enable-glibc-back-compat for binary compatibility
with old distributions
- gitian: don't export any symbols from executable
- gitian: build against Qt 4.6
- devtools: add script to check symbols from Linux gitian executables
- Remove build-time no-IPv6 setting

GUI:
- Fix various coin control visual issues
- Show number of in/out connections in debug console
- Show weeks as well as years behind for long timespans behind
- Enable and disable the Show and Remove buttons for requested
payments history based on whether any entry is selected.
- Show also value for options overridden on command line in options dialog
- Fill in label from address book also for URIs
- Fixes feel when resizing the last column on tables (issue #2862)
- Fix ESC in disablewallet mode
- Add expert section to wallet tab in optionsdialog
- Do proper boost::path conversion (fixes unicode in datadir)
- Only override -datadir if different from the default (fixes -datadir
in config file)
- Show rescan progress at start-up
- Show importwallet progress
- Get required locks upfront in polling functions (avoids hanging on locks)
- Catch Windows shutdown events while client is running
- Optionally add third party links to transaction context menu
- Check for !pixmap() before trying to export QR code (avoids crashes
when no QR code could be generated)
- Fix "Start bitcoin on system login"

Miscellaneous:

- Replace non-threadsafe C functions (gmtime, strerror and setlocale)
- Add missing cs_main and wallet locks
- Avoid exception at startup when system locale not recognized
- Changed bitrpc.py's raw_input to getpass for passwords to conceal
characters during command line input
- devtools: add a script to fetch and postprocess translations

Credits
--------

Thanks to everyone who contributed to this release:

- Addy Yeow
- Altoidnerd
- Andrea D'Amore
- Andreas Schildbach
- Bardi Harborow
- Brandon Dahler
- Bryan Bishop
- Chris Beams
- Christian von Roques
- Cory Fields
- Cozz Lovan
- daniel
- Daniel Newton
- David A. Harding
- ditto-b
- duanemoody
- Eric S. Bullington
- Fabian Raetz
- Gavin Andresen
- Gregory Maxwell
- gubatron
- Haakon Nilsen
- harry
- Hector Jusforgues
- Isidoro Ghezzi
- Jeff Garzik
- Johnathan Corgan
- jtimon
- Kamil Domanski
- langerhans
- Luke Dashjr
- Manuel Araoz
- Mark Friedenbach
- Matt Corallo
- Matthew Bogosian
- Meeh
- Michael Ford
- Michagogo
- Mikael Wikman
- Mike Hearn
- olalonde
- paveljanik
- peryaudo
- Philip Kaufmann
- philsong
- Pieter Wuille
- R E Broadley
- richierichrawr
- Rune K. Svendsen
- rxl
- shshshsh
- Simon de la Rouviere
- Stuart Cardall
- super3
- Telepatheic
- Thomas Zander
- Torstein Huseb?
- Warren Togami
- Wladimir J. van der Laan
- Yoichi Hirai



From ronaldbelliott at gmail.com  Tue Jun 17 13:58:53 2014
From: ronaldbelliott at gmail.com (Ron Elliott)
Date: Tue, 17 Jun 2014 06:58:53 -0700
Subject: [Bitcoin-development] Proposals for improving Bitcoin mining
	decentralization
In-Reply-To: <CA+8=xuKmE2rgNK+Q4g+Gqvy3QuYAXzVRYtWKC2VttuB_LJmyMA@mail.gmail.com>
References: <CA+8=xuKmE2rgNK+Q4g+Gqvy3QuYAXzVRYtWKC2VttuB_LJmyMA@mail.gmail.com>
Message-ID: <CAMEND1hS2j6dSjwvRSmVn_=UV-r7gujJ+Wo1VLH3nH54F3vBmQ@mail.gmail.com>

In this scenario how do you ensure the miner solving the block cannot
reapportion the subsidy to himself rather than the pool?
On Jun 17, 2014 2:09 AM, "Ra?l Mart?nez" <rme at i-rme.es> wrote:

> First of all I apologice due to the possible mistakes in my writing below,
> I am not a Bitcoin developer but I have some knowledge about it.
>
> ----
>
> We all know the recent news, Ghash pool controlling 51% of the hashrate.
> While some consider it a threat others think that is not harmful.
>
> The thing is that we have to do something to stop this from happening
> again.
>
> My proposal is to start thinking about miners that join a pool like
> independent miners and not slave miners, this includes creating a new
> mining protocol that does not rely on the pool sending the list of
> transactions to include in a block. Each individual miner has to collect
> transactions by his own and mine that, this can be achieved by running a
> full node or by running a SPV like node that ask other nodes for
> transactions.
>
> Once this protocol is developed and standarised we as a community could
> require all pools to use it (because its better, because is more
> trustless...), not by imposing it but by recommending it.
>
> Pool owners could send some instructions using this protocol to the miner
> about how many transactions to include per block (some pools want small
> blocks), how many 0 fee transactions to include, how much is the minimum
> fee per Kb to include transactions and some info about the Coinbase field
> in the block.
>
> This way is impossible to perform some of the possible 51% attacks:
>
>    - A pool owner cant mine a new chain (selfish mining) (pool clients
>    have a SPV or full node that has checkpoints and ask other peers about the
>    length of the chain)
>    - A pool owner can't perform double spends or reverse transactions
>    (pool clients know all the transactions relayed to the network, they know
>    if they are already included on a block)
>    - A pool owner cant decide which transactions not to include (but they
>    can configure the minimum fee).
>    - A pool owner cant get all the rewards by avoiding other pools from
>    mining blocks (Because the pool client knows the last block independently
>    that is from his pool or other).
>
>
> The only thing that a 51% pool owner can do is to shut down his pool and
> drop the hashrate by 51% because he does not control the miners.
>
> If the pool owner owns all the hardware in the pool my proposal is not
> valid, if the pool clients dont use this protocol my proposal is not valid.
>
>
> I want to know if this is possible or its been developed or there is
> already a working protocol that works like this, also I want to read other
> people's ways to address this threat, thanks for reading.
>
>
> ------------------------------------------------------------------------------
> HPCC Systems Open Source Big Data Platform from LexisNexis Risk Solutions
> Find What Matters Most in Your Big Data with HPCC Systems
> Open Source. Fast. Scalable. Simple. Ideal for Dirty Data.
> Leverages Graph Analysis for Fast Processing & Easy Data Exploration
> http://p.sf.net/sfu/hpccsystems
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140617/7251f9ba/attachment.html>

From rme at i-rme.es  Tue Jun 17 14:01:02 2014
From: rme at i-rme.es (=?UTF-8?B?UmHDumwgTWFydMOtbmV6?=)
Date: Tue, 17 Jun 2014 16:01:02 +0200
Subject: [Bitcoin-development] Proposals for improving Bitcoin mining
	decentralization
In-Reply-To: <CAMEND1hS2j6dSjwvRSmVn_=UV-r7gujJ+Wo1VLH3nH54F3vBmQ@mail.gmail.com>
References: <CA+8=xuKmE2rgNK+Q4g+Gqvy3QuYAXzVRYtWKC2VttuB_LJmyMA@mail.gmail.com>
	<CAMEND1hS2j6dSjwvRSmVn_=UV-r7gujJ+Wo1VLH3nH54F3vBmQ@mail.gmail.com>
Message-ID: <CA+8=xuLCAyYGV6hmdKRxOGNGHyQvkgnGcwKNN=1JYUhSzvxD2w@mail.gmail.com>

Because he cant change the coinbase once the proof of work is done.
 El 17/06/2014 15:58, "Ron Elliott" <ronaldbelliott at gmail.com> escribi?:

> In this scenario how do you ensure the miner solving the block cannot
> reapportion the subsidy to himself rather than the pool?
> On Jun 17, 2014 2:09 AM, "Ra?l Mart?nez" <rme at i-rme.es> wrote:
>
>> First of all I apologice due to the possible mistakes in my writing
>> below, I am not a Bitcoin developer but I have some knowledge about it.
>>
>> ----
>>
>> We all know the recent news, Ghash pool controlling 51% of the hashrate.
>> While some consider it a threat others think that is not harmful.
>>
>> The thing is that we have to do something to stop this from happening
>> again.
>>
>> My proposal is to start thinking about miners that join a pool like
>> independent miners and not slave miners, this includes creating a new
>> mining protocol that does not rely on the pool sending the list of
>> transactions to include in a block. Each individual miner has to collect
>> transactions by his own and mine that, this can be achieved by running a
>> full node or by running a SPV like node that ask other nodes for
>> transactions.
>>
>> Once this protocol is developed and standarised we as a community could
>> require all pools to use it (because its better, because is more
>> trustless...), not by imposing it but by recommending it.
>>
>> Pool owners could send some instructions using this protocol to the miner
>> about how many transactions to include per block (some pools want small
>> blocks), how many 0 fee transactions to include, how much is the minimum
>> fee per Kb to include transactions and some info about the Coinbase field
>> in the block.
>>
>> This way is impossible to perform some of the possible 51% attacks:
>>
>>    - A pool owner cant mine a new chain (selfish mining) (pool clients
>>    have a SPV or full node that has checkpoints and ask other peers about the
>>    length of the chain)
>>    - A pool owner can't perform double spends or reverse transactions
>>    (pool clients know all the transactions relayed to the network, they know
>>    if they are already included on a block)
>>    - A pool owner cant decide which transactions not to include (but
>>    they can configure the minimum fee).
>>    - A pool owner cant get all the rewards by avoiding other pools from
>>    mining blocks (Because the pool client knows the last block independently
>>    that is from his pool or other).
>>
>>
>> The only thing that a 51% pool owner can do is to shut down his pool and
>> drop the hashrate by 51% because he does not control the miners.
>>
>> If the pool owner owns all the hardware in the pool my proposal is not
>> valid, if the pool clients dont use this protocol my proposal is not valid.
>>
>>
>> I want to know if this is possible or its been developed or there is
>> already a working protocol that works like this, also I want to read other
>> people's ways to address this threat, thanks for reading.
>>
>>
>> ------------------------------------------------------------------------------
>> HPCC Systems Open Source Big Data Platform from LexisNexis Risk Solutions
>> Find What Matters Most in Your Big Data with HPCC Systems
>> Open Source. Fast. Scalable. Simple. Ideal for Dirty Data.
>> Leverages Graph Analysis for Fast Processing & Easy Data Exploration
>> http://p.sf.net/sfu/hpccsystems
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>
>>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140617/d5e763e6/attachment.html>

From ronaldbelliott at gmail.com  Tue Jun 17 14:06:41 2014
From: ronaldbelliott at gmail.com (Ron Elliott)
Date: Tue, 17 Jun 2014 07:06:41 -0700
Subject: [Bitcoin-development] Proposals for improving Bitcoin mining
	decentralization
In-Reply-To: <CA+8=xuLCAyYGV6hmdKRxOGNGHyQvkgnGcwKNN=1JYUhSzvxD2w@mail.gmail.com>
References: <CA+8=xuKmE2rgNK+Q4g+Gqvy3QuYAXzVRYtWKC2VttuB_LJmyMA@mail.gmail.com>
	<CAMEND1hS2j6dSjwvRSmVn_=UV-r7gujJ+Wo1VLH3nH54F3vBmQ@mail.gmail.com>
	<CA+8=xuLCAyYGV6hmdKRxOGNGHyQvkgnGcwKNN=1JYUhSzvxD2w@mail.gmail.com>
Message-ID: <CAMEND1jz67Juz4h6q-iJQqsP+DFaQ4OWrwByzzhVQ3XmardbvQ@mail.gmail.com>

as I understood your proposal the entire block would be created on the
miner rather than just the block header. Currently miners do not receive a
list of transactions, they receive information required to create the block
header, this is how you keep miners honest. if the miner is creating the
full block we are right back to where we were.

I've only worked with implementing the mining process for a few months now
so someone correct me if I have the process wrong
On Jun 17, 2014 7:01 AM, "Ra?l Mart?nez" <rme at i-rme.es> wrote:

> Because he cant change the coinbase once the proof of work is done.
>  El 17/06/2014 15:58, "Ron Elliott" <ronaldbelliott at gmail.com> escribi?:
>
>> In this scenario how do you ensure the miner solving the block cannot
>> reapportion the subsidy to himself rather than the pool?
>> On Jun 17, 2014 2:09 AM, "Ra?l Mart?nez" <rme at i-rme.es> wrote:
>>
>>> First of all I apologice due to the possible mistakes in my writing
>>> below, I am not a Bitcoin developer but I have some knowledge about it.
>>>
>>> ----
>>>
>>> We all know the recent news, Ghash pool controlling 51% of the hashrate.
>>> While some consider it a threat others think that is not harmful.
>>>
>>> The thing is that we have to do something to stop this from happening
>>> again.
>>>
>>> My proposal is to start thinking about miners that join a pool like
>>> independent miners and not slave miners, this includes creating a new
>>> mining protocol that does not rely on the pool sending the list of
>>> transactions to include in a block. Each individual miner has to collect
>>> transactions by his own and mine that, this can be achieved by running a
>>> full node or by running a SPV like node that ask other nodes for
>>> transactions.
>>>
>>> Once this protocol is developed and standarised we as a community could
>>> require all pools to use it (because its better, because is more
>>> trustless...), not by imposing it but by recommending it.
>>>
>>> Pool owners could send some instructions using this protocol to the
>>> miner about how many transactions to include per block (some pools want
>>> small blocks), how many 0 fee transactions to include, how much is the
>>> minimum fee per Kb to include transactions and some info about the Coinbase
>>> field in the block.
>>>
>>> This way is impossible to perform some of the possible 51% attacks:
>>>
>>>    - A pool owner cant mine a new chain (selfish mining) (pool clients
>>>    have a SPV or full node that has checkpoints and ask other peers about the
>>>    length of the chain)
>>>    - A pool owner can't perform double spends or reverse transactions
>>>    (pool clients know all the transactions relayed to the network, they know
>>>    if they are already included on a block)
>>>    - A pool owner cant decide which transactions not to include (but
>>>    they can configure the minimum fee).
>>>    - A pool owner cant get all the rewards by avoiding other pools from
>>>    mining blocks (Because the pool client knows the last block independently
>>>    that is from his pool or other).
>>>
>>>
>>> The only thing that a 51% pool owner can do is to shut down his pool and
>>> drop the hashrate by 51% because he does not control the miners.
>>>
>>> If the pool owner owns all the hardware in the pool my proposal is not
>>> valid, if the pool clients dont use this protocol my proposal is not valid.
>>>
>>>
>>> I want to know if this is possible or its been developed or there is
>>> already a working protocol that works like this, also I want to read other
>>> people's ways to address this threat, thanks for reading.
>>>
>>>
>>> ------------------------------------------------------------------------------
>>> HPCC Systems Open Source Big Data Platform from LexisNexis Risk Solutions
>>> Find What Matters Most in Your Big Data with HPCC Systems
>>> Open Source. Fast. Scalable. Simple. Ideal for Dirty Data.
>>> Leverages Graph Analysis for Fast Processing & Easy Data Exploration
>>> http://p.sf.net/sfu/hpccsystems
>>> _______________________________________________
>>> Bitcoin-development mailing list
>>> Bitcoin-development at lists.sourceforge.net
>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>>
>>>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140617/14874493/attachment.html>

From christophe.biocca at gmail.com  Tue Jun 17 14:20:42 2014
From: christophe.biocca at gmail.com (Christophe Biocca)
Date: Tue, 17 Jun 2014 10:20:42 -0400
Subject: [Bitcoin-development] Proposals for improving Bitcoin mining
	decentralization
In-Reply-To: <CA+8=xuKmE2rgNK+Q4g+Gqvy3QuYAXzVRYtWKC2VttuB_LJmyMA@mail.gmail.com>
References: <CA+8=xuKmE2rgNK+Q4g+Gqvy3QuYAXzVRYtWKC2VttuB_LJmyMA@mail.gmail.com>
Message-ID: <CANOOu=9W42upZGtXWvRwyJH0tO766VT37jAR23V_rCZ9+qxTTw@mail.gmail.com>

https://en.bitcoin.it/wiki/Getblocktemplate is supposed to solve most
of the pooling-centralization problems. Unfortunately, it is opt-in,
and GHash.io doesn't support it.

Also most miners don't care and don't do the work to set it up. To do
transaction inclusion themselves, they'd need to run a full node,
which is a bit more work and resources than just pointing hashpower at
a stratum server.

If you figure out a way to make GBT widely used (>50% hashpower), kudos to you.

On Tue, Jun 17, 2014 at 4:57 AM, Ra?l Mart?nez <rme at i-rme.es> wrote:
> First of all I apologice due to the possible mistakes in my writing below, I
> am not a Bitcoin developer but I have some knowledge about it.
>
> ----
>
> We all know the recent news, Ghash pool controlling 51% of the hashrate.
> While some consider it a threat others think that is not harmful.
>
> The thing is that we have to do something to stop this from happening again.
>
> My proposal is to start thinking about miners that join a pool like
> independent miners and not slave miners, this includes creating a new mining
> protocol that does not rely on the pool sending the list of transactions to
> include in a block. Each individual miner has to collect transactions by his
> own and mine that, this can be achieved by running a full node or by running
> a SPV like node that ask other nodes for transactions.
>
> Once this protocol is developed and standarised we as a community could
> require all pools to use it (because its better, because is more
> trustless...), not by imposing it but by recommending it.
>
> Pool owners could send some instructions using this protocol to the miner
> about how many transactions to include per block (some pools want small
> blocks), how many 0 fee transactions to include, how much is the minimum fee
> per Kb to include transactions and some info about the Coinbase field in the
> block.
>
> This way is impossible to perform some of the possible 51% attacks:
>
> A pool owner cant mine a new chain (selfish mining) (pool clients have a SPV
> or full node that has checkpoints and ask other peers about the length of
> the chain)
> A pool owner can't perform double spends or reverse transactions (pool
> clients know all the transactions relayed to the network, they know if they
> are already included on a block)
> A pool owner cant decide which transactions not to include (but they can
> configure the minimum fee).
> A pool owner cant get all the rewards by avoiding other pools from mining
> blocks (Because the pool client knows the last block independently that is
> from his pool or other).
>
>
> The only thing that a 51% pool owner can do is to shut down his pool and
> drop the hashrate by 51% because he does not control the miners.
>
> If the pool owner owns all the hardware in the pool my proposal is not
> valid, if the pool clients dont use this protocol my proposal is not valid.
>
>
> I want to know if this is possible or its been developed or there is already
> a working protocol that works like this, also I want to read other people's
> ways to address this threat, thanks for reading.
>
> ------------------------------------------------------------------------------
> HPCC Systems Open Source Big Data Platform from LexisNexis Risk Solutions
> Find What Matters Most in Your Big Data with HPCC Systems
> Open Source. Fast. Scalable. Simple. Ideal for Dirty Data.
> Leverages Graph Analysis for Fast Processing & Easy Data Exploration
> http://p.sf.net/sfu/hpccsystems
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>



From jcea at jcea.es  Tue Jun 17 14:27:24 2014
From: jcea at jcea.es (Jesus Cea)
Date: Tue, 17 Jun 2014 16:27:24 +0200
Subject: [Bitcoin-development] [ann] Bitcoin Core version 0.9.2 has been
 released
In-Reply-To: <CA+s+GJBVqyKTU0Ugu0U9YpEofD9zu92Jk7y19EQJ5qyp4Ho5VQ@mail.gmail.com>
References: <CA+s+GJBVqyKTU0Ugu0U9YpEofD9zu92Jk7y19EQJ5qyp4Ho5VQ@mail.gmail.com>
Message-ID: <53A0504C.2090901@jcea.es>

On 17/06/14 11:46, Wladimir wrote:
> For Linux we now build against Qt 4.6, and filter the symbols for
> libstdc++ and glibc.
> This brings back compatibility with
> 
> - Debian 6+ / Tails
> - Ubuntu 10.04
> - CentOS 6.5

Under Ubuntu 10.04:

jcea at ubuntu:/tmp/bitcoin-0.9.2-linux/bin/64$ ./bitcoin-qt
./bitcoin-qt: symbol lookup error: ./bitcoin-qt: undefined symbol:
_ZN10QTextCodec11validCodecsEv

-- 
Jes?s Cea Avi?n                         _/_/      _/_/_/        _/_/_/
jcea at jcea.es - http://www.jcea.es/     _/_/    _/_/  _/_/    _/_/  _/_/
Twitter: @jcea                        _/_/    _/_/          _/_/_/_/_/
jabber / xmpp:jcea at jabber.org  _/_/  _/_/    _/_/          _/_/  _/_/
"Things are not so easy"      _/_/  _/_/    _/_/  _/_/    _/_/  _/_/
"My name is Dump, Core Dump"   _/_/_/        _/_/_/      _/_/  _/_/
"El amor es poner tu felicidad en la felicidad de otro" - Leibniz

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 538 bytes
Desc: OpenPGP digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140617/45f99d95/attachment.sig>

From laanwj at gmail.com  Tue Jun 17 15:01:35 2014
From: laanwj at gmail.com (Wladimir)
Date: Tue, 17 Jun 2014 17:01:35 +0200
Subject: [Bitcoin-development] [ann] Bitcoin Core version 0.9.2 has been
	released
In-Reply-To: <53A0504C.2090901@jcea.es>
References: <CA+s+GJBVqyKTU0Ugu0U9YpEofD9zu92Jk7y19EQJ5qyp4Ho5VQ@mail.gmail.com>
	<53A0504C.2090901@jcea.es>
Message-ID: <CA+s+GJD6zmSMdr3ApyY7TMTkRQ8jaFjWjZdzS_xWt32rcshc0Q@mail.gmail.com>

On Tue, Jun 17, 2014 at 4:27 PM, Jesus Cea <jcea at jcea.es> wrote:
> On 17/06/14 11:46, Wladimir wrote:
> Under Ubuntu 10.04:
>
> jcea at ubuntu:/tmp/bitcoin-0.9.2-linux/bin/64$ ./bitcoin-qt
> ./bitcoin-qt: symbol lookup error: ./bitcoin-qt: undefined symbol:
> _ZN10QTextCodec11validCodecsEv

Did it work with the release candidate?

Wladimir



From cryptocurrencies at quidecco.de  Tue Jun 17 15:58:45 2014
From: cryptocurrencies at quidecco.de (Isidor Zeuner)
Date: Tue, 17 Jun 2014 17:58:45 +0200 (CEST)
Subject: [Bitcoin-development] instant confirmation via payment protocol
 backwards compatible proto buffer extension
In-Reply-To: <CADE3-jA8LizD8cjdqKm0pFc8OV7JqPBGhs4uvp6=VhEU2emV6w@mail.gmail.com>
References: <CADE3-jA8LizD8cjdqKm0pFc8OV7JqPBGhs4uvp6=VhEU2emV6w@mail.gmail.com>
	<CAKrJrGOBSiY5V59eko6g796j3wh9V9ZLjPbyHeS5=zyX6j3Wdw@mail.gmail.com>
	<CANEZrP0Euc1mPhRc9e41tU4zMDrWesvVyiBpAPq6M3m7K=aU=A@mail.gmail.com>
	<CAFDyEXgKpbE4WGAqROJ4J1UST=tXWgfn7uKhRO_tngJfVK_Czw@mail.gmail.com>
Message-ID: <20140617155845.8177ADFC55C@quidecco.de>

quote:
> Mike Hearn, why don't we just have all nodes report attempted double spends
> through the node network. No need to involve the miners at all really, or
> do your suggestion but also report the double spend attempt. By waiting
> maybe 10-60 seconds (instead of 10 minutes for first conf), merchants can
> be more sure that a double spend attack was not tried. Attacker would have
> to hold back second tx by 10-60 seconds and hope that that second tx (with
> higher fee) get's into a solved block before the first one. This forced
> delay time ought to make the attack less successful (but not impossible).
>

What prevents the following steps from happening:

1. attacker sends first transaction, paying to the merchant

2. merchant waits 10-60 seconds

3. merchant confirms the payment as received

4. attacker sees merchant's confirmation

5. attacker sends double spend

The security improvement seems to be pretty much exactly the chance
that during the 10-60 seconds, a block is solved. Am I missing
something?

Regarding "reporting double spends", this would only help if it comes
with some kind of penalty for the double spend. Now what if the double
spend was not done on malicious motives? Maybe someone posted a
transaction which does not confirm for some reason, and wants to
recover his funds? Should we regard transactions which do not confirm
as forever lost, in order to get to an "every double spend is a
misbehaviour" policy?

Best regards,

Isidor



From cryptocurrencies at quidecco.de  Tue Jun 17 15:58:45 2014
From: cryptocurrencies at quidecco.de (Isidor Zeuner)
Date: Tue, 17 Jun 2014 17:58:45 +0200 (CEST)
Subject: [Bitcoin-development] Proposals for improving Bitcoin
	mining	decentralization
In-Reply-To: <CANOOu=9W42upZGtXWvRwyJH0tO766VT37jAR23V_rCZ9+qxTTw@mail.gmail.com>
References: <CANOOu=9W42upZGtXWvRwyJH0tO766VT37jAR23V_rCZ9+qxTTw@mail.gmail.com>
	<CA+8=xuKmE2rgNK+Q4g+Gqvy3QuYAXzVRYtWKC2VttuB_LJmyMA@mail.gmail.com>
Message-ID: <20140617155845.511BFDFC487@quidecco.de>

quote:
> https://en.bitcoin.it/wiki/Getblocktemplate is supposed to solve most
> of the pooling-centralization problems. Unfortunately, it is opt-in,
> and GHash.io doesn't support it.
> 
> Also most miners don't care and don't do the work to set it up. To do
> transaction inclusion themselves, they'd need to run a full node,
> which is a bit more work and resources than just pointing hashpower at
> a stratum server.
> 
> If you figure out a way to make GBT widely used (>50% hashpower), kudos to you.
>

Well, as soon as miners learn about the merits of controlling the
blocks' contents, this issue may get solved by the market pressure
of miners expecting this kind of service from their pool.

I mean, the dev community constantly has some level of disagreement
about the best policies for what to include in blocks. But seen from
the perspective of some Bitcoin business or another, certain policies
might be more preferable. So if miners start to understand that they
could take a stake for their favourite Bitcoin businesses by choosing
a mining pool which employs a preferable transaction inclusion policy,
the question would not anymore be "which pool gives me the most
Bitcoins or the lowest variance, regardless of the technical
background", but "which pools does the best for my Bitcoin economy
needs". And this may be a very economically driven decision by itself,
considering that the exchange rates for Bitcoins depend on Bitcoin
businesses doing well.

If we get to this point with respect to user (miner) education, then
it is probably only a matter of time until people start to find it
cumbersome to mine on a black-box pool and having to manually verify
that they still have an agreeable transaction inclusion policy, when
they can just mine on a GBT pool and configure things in their mining
software.

> On Tue, Jun 17, 2014 at 4:57 AM, Ra?l Mart?nez <rme at i-rme.es> wrote:
[...]
> > We all know the recent news, Ghash pool controlling 51% of the hashrate.
> > While some consider it a threat others think that is not harmful.
> >
> > The thing is that we have to do something to stop this from happening again.
> >

Bear with me, but this piece of rhetorics struck me. Why even mention
those who think it's not harmful, when your next sentence states
that their opinion should be ignored completely?

Best regards,

Isidor
>

From cryptocurrencies at quidecco.de  Tue Jun 17 15:58:45 2014
From: cryptocurrencies at quidecco.de (Isidor Zeuner)
Date: Tue, 17 Jun 2014 17:58:45 +0200 (CEST)
Subject: [Bitcoin-development] instant confirmation via payment protocol
 backwards compatible proto buffer extension
In-Reply-To: <CAC1+kJNEUzJGLmMT+ocsS6pDwEpWq8OchHQ+zTZoQtVFTK6ERQ@mail.gmail.com>
References: <CAC1+kJNEUzJGLmMT+ocsS6pDwEpWq8OchHQ+zTZoQtVFTK6ERQ@mail.gmail.com>
	<CANEZrP2fg9k9fC+QAO2GQS7VC-JCtbEjubHB9j1TJtR9vuaDSQ@mail.gmail.com>
Message-ID: <20140617155845.453D5DFC485@quidecco.de>

quote:
> On 6/16/14, Mike Hearn <mike at plan99.net> wrote:
> > If they decide to change to something like highest-fee-always-wins, then
> > they (again) centralise things by forcing all instant transactions to pay
> > GreenAddress and its competitors money - much though I like your product
> > Lawrence, let's hope they don't collectively lemming us all off a cliff by
> > doing that ;)
>
> Replace-by-fee doesn't imply the use of green addresses (there's other
> solutions to 0 conf transactions in that context, for example,
> "scorched earth"). And giving up the non-enforceable first-seen
> default mining policy doesn't mean "giving up on the Bitcoin
> experiment" either.
>

If something means "giving up on the Bitcoin experiment", then for
sure it's not one mining policy or another, but the assumption
that we should have one uniform mining policy. If we had a community
where enough miners had their own opinion about the best mining
policy, and expressed it by choosing an appropriate mining pool, then
we would have better decentralized mining based on selfish motives of
the miners, rather than based on an abstract thought of
"centralization is bad, so I will consider how much mining profit
from qualitatively interchangable mining pools I'm willing to
sacrifice in order to ease my centralization fears".

Best regards,

Isidor



From odinn.cyberguerrilla at riseup.net  Tue Jun 17 17:47:53 2014
From: odinn.cyberguerrilla at riseup.net (Odinn Cyberguerrilla)
Date: Tue, 17 Jun 2014 10:47:53 -0700
Subject: [Bitcoin-development] Incentivizing the running of full nodes
In-Reply-To: <539F59B0.5040601@gmail.com>
References: <87aaf81b20e17332175a3fbcd091c317.squirrel@fulvetta.riseup.net>
	<1801389.9PVWAZniMG@crushinator>
	<CANEZrP0eNDuGnm1vESwoe=9HWUKZGQ5CKsDZ8SHsQxCaNEjRsA@mail.gmail.com>
	<1866054.ECx185lXld@crushinator>
	<422d16e8.kqhkiG.146a60d2382@gmail.com> <539F59B0.5040601@gmail.com>
Message-ID: <e3efdac3aca49f6b942d7896aa46e73a.squirrel@fruiteater.riseup.net>

> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA1
>
> On 06/16/2014 07:00 PM, Justus Ranvier wrote:
>> There can be multiple independent transport networks for Bitcoin.
>>
>> There already is: ipv4, ipv6, Tor, and native_i2p (out of tree
>> patch).
>>
>> As long as multihomed hosts that act as bridges then information
>> will propagate across all of them. -- Justus Ranvier
>> ----------------- sent with R2Mail2
>>
>> ----- Original Message ----- From: Matt Whitlock
>> <bip at mattwhitlock.name>
>>> Now another concern: won't this proposal increase the likelihood
>>> of a network split? The free-market capitalist nodes will want to
>>> charge their peers and will kick and ban peers that don't pay up
>>> (and will pay their peers to avoid being kicked and banned
>>> themselves), whereas the socialist nodes will want all of their
>>> peers to feed them transactions out of the goodness of their
>>> hearts and will thus necessarily be relegated to connecting only
>>> to other altrustic peers. Thus, the network will comprise two
>>> incompatible ideological camps, whose nodes won't interconnect.


If the technical development emanating from the proposal follows a design
which ensures that the notion of whether or not someone were to donate
remains voluntary in nature (there's never any requirement that someone
donate to anyone, but incentives can be made), then I don't feel that
network split would be an issue, because it's just an issue of choice.
Justus Ranvier suggested a system which would naturally include
pay-to-play networks, and not just free P2P networks.  The question of how
to limit the number of entries the system registers in the framework of
the proposed 'decentralizing lottery' would be fairly straightforward,
there could one entry for a distinct period of time (say 30 days as an
example) for anyone who meets the suggested criteria of:
 "those running full nodes (Bitcoin Core (...)), processing their
  change and txouts through Core, would be provided incentives in the form
  of a 'decentralizing lottery' such that all participants who are running
  nodes and donating no matter how infrequently (and no matter who they
  donate to) will be entered in the 'decentralizing lottery,'" for a
  chance to receive "the 'award amounts'"

In my mind I imagine that the smart property qualities of Bitcoin may
eventually enable people to represent what sort of time and energy they
are putting into maintaining the network, so that rather solely a currency
aspect, people who have done something collaborative with each other to
help advance or develop Bitcoin would be able to show in their donations
field that they have a smart property, which could be also expressed in
equivalence terms as a value of a certain amount of btc, would also be
able to have the smart property representing their voluntary efforts
represented and given a voice in the blockchain, whether or not they want
to participate in such a 'decentralizing lottery.'  In point of fact, I
contemplate that all aspects of this, at least ideally (to me) should be
voluntary, such that if a person is donating through this system, that is
voluntary, if they wish to have their donations result in a chance at
winning the 'decentralizing lottery,' that is voluntary / an option, and
if they win, they would have the option to accept the winnings or return
them (the bitcoin 'award amount') back to the network.

>
> Also consider that currently there are many people have already
> demonstrated a willingness to donate bandwidth and resources to the
> public by running nodes, so those people aren't going to disappear.
>

Those who are already dedicated to running nodes will likely (mostly)
remain, but any ideas reaching technical development and reality as a
result of this concept would be intended to help grow that base by
bringing in persons who might not otherwise be as interested to do so.

> They could operate mixed-mode nodes, with a fraction of the allowed
> incoming connections reserved for free peer, with free connections
> might be limited in terms of time duration. Bitcoin-accepting
> brick-and-mortars would probably allow free access to anyone connected
> to their internal wifi to facilitate people wanting to pay.


That's a great idea.  The incentives could certainly go beyond just
pointing to Bitcoin Core.  Giving is important to everyone.

>
> Crowdfunded free bridges, assurance contracts, etc are all other ways
> to let people get into the network with no upfront cost.
>
>
> - --
> Support online privacy by using email encryption whenever possible.
> Learn how here: http://www.youtube.com/watch?v=bakOKJFtB-k
> -----BEGIN PGP SIGNATURE-----
> Version: GnuPG v2.0.22 (GNU/Linux)
>
> iQEcBAEBAgAGBQJTn1mwAAoJEMP3uyY4RQ21ePwIALpMV/GDpAyD4SeL6hWi32vQ
> 197YD1LPuLWrEbUs/+gl1Sk2gIsWWlq/o86KcP7Cn4fZdBAKEiF5RpQ6iPsO2+bj
> JR0W/EbgUyzIhYaxFysCzQ1HPzQx+0a2vHn/6FsB7YMha8gvxviF7InDEwcfxbok
> o0QS5SeYWryp5mH7IokC6fLYsAPmiueugPVRSD/l8IRFYWVFS9nB+XAR1PWAdYSQ
> Xyzu9oyPwlKAjYKxl4XHYB4DofacS89DpWMVbWHviYiZ7UufmzMgwPtfMCsQAxSb
> q3OMAkcSGJZL8pcy9/9NWpOGAHY2DRtGtu8oSqXcBSW/IQCubmUNmzopt8O/H74=
> =9hrW
> -----END PGP SIGNATURE-----
> ------------------------------------------------------------------------------
> HPCC Systems Open Source Big Data Platform from LexisNexis Risk Solutions
> Find What Matters Most in Your Big Data with HPCC Systems
> Open Source. Fast. Scalable. Simple. Ideal for Dirty Data.
> Leverages Graph Analysis for Fast Processing & Easy Data Exploration
> http://p.sf.net/sfu/hpccsystems_______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>





From kb at karelbilek.com  Tue Jun 17 18:25:39 2014
From: kb at karelbilek.com (=?UTF-8?B?S2FyZWwgQsOtbGVr?=)
Date: Tue, 17 Jun 2014 20:25:39 +0200
Subject: [Bitcoin-development] Proposals for improving Bitcoin mining
	decentralization
In-Reply-To: <CANOOu=9W42upZGtXWvRwyJH0tO766VT37jAR23V_rCZ9+qxTTw@mail.gmail.com>
References: <CA+8=xuKmE2rgNK+Q4g+Gqvy3QuYAXzVRYtWKC2VttuB_LJmyMA@mail.gmail.com>
	<CANOOu=9W42upZGtXWvRwyJH0tO766VT37jAR23V_rCZ9+qxTTw@mail.gmail.com>
Message-ID: <CAGUkT8ZTtR_ysR+0Ufq4k=SLeifEOQYtrak6G_iJRQqc3dt6Jg@mail.gmail.com>

On Tue, Jun 17, 2014 at 4:20 PM, Christophe Biocca
<christophe.biocca at gmail.com> wrote:
> https://en.bitcoin.it/wiki/Getblocktemplate is supposed to solve most
> of the pooling-centralization problems.

This. There is no need to create anything new when GBT already exists.
In my opinion.

> Unfortunately, it is opt-in,
> and GHash.io doesn't support it.

Yep. As pools in general are not a part of the bitcoin protocol itself
(nobody cares how the work happened), I am not sure how this can be
forced.

> Also most miners don't care and don't do the work to set it up. To do
> transaction inclusion themselves, they'd need to run a full node,
> which is a bit more work and resources than just pointing hashpower at
> a stratum server.

Also, yep. If the miners cared about 51% attack, they wouldn't join
ghash in the first place. All the miners willingly accept the risk in
joining the big pool.

K. B.

> If you figure out a way to make GBT widely used (>50% hashpower), kudos to you.
>
> On Tue, Jun 17, 2014 at 4:57 AM, Ra?l Mart?nez <rme at i-rme.es> wrote:
>> First of all I apologice due to the possible mistakes in my writing below, I
>> am not a Bitcoin developer but I have some knowledge about it.
>>
>> ----
>>
>> We all know the recent news, Ghash pool controlling 51% of the hashrate.
>> While some consider it a threat others think that is not harmful.
>>
>> The thing is that we have to do something to stop this from happening again.
>>
>> My proposal is to start thinking about miners that join a pool like
>> independent miners and not slave miners, this includes creating a new mining
>> protocol that does not rely on the pool sending the list of transactions to
>> include in a block. Each individual miner has to collect transactions by his
>> own and mine that, this can be achieved by running a full node or by running
>> a SPV like node that ask other nodes for transactions.
>>
>> Once this protocol is developed and standarised we as a community could
>> require all pools to use it (because its better, because is more
>> trustless...), not by imposing it but by recommending it.
>>
>> Pool owners could send some instructions using this protocol to the miner
>> about how many transactions to include per block (some pools want small
>> blocks), how many 0 fee transactions to include, how much is the minimum fee
>> per Kb to include transactions and some info about the Coinbase field in the
>> block.
>>
>> This way is impossible to perform some of the possible 51% attacks:
>>
>> A pool owner cant mine a new chain (selfish mining) (pool clients have a SPV
>> or full node that has checkpoints and ask other peers about the length of
>> the chain)
>> A pool owner can't perform double spends or reverse transactions (pool
>> clients know all the transactions relayed to the network, they know if they
>> are already included on a block)
>> A pool owner cant decide which transactions not to include (but they can
>> configure the minimum fee).
>> A pool owner cant get all the rewards by avoiding other pools from mining
>> blocks (Because the pool client knows the last block independently that is
>> from his pool or other).
>>
>>
>> The only thing that a 51% pool owner can do is to shut down his pool and
>> drop the hashrate by 51% because he does not control the miners.
>>
>> If the pool owner owns all the hardware in the pool my proposal is not
>> valid, if the pool clients dont use this protocol my proposal is not valid.
>>
>>
>> I want to know if this is possible or its been developed or there is already
>> a working protocol that works like this, also I want to read other people's
>> ways to address this threat, thanks for reading.
>>
>> ------------------------------------------------------------------------------
>> HPCC Systems Open Source Big Data Platform from LexisNexis Risk Solutions
>> Find What Matters Most in Your Big Data with HPCC Systems
>> Open Source. Fast. Scalable. Simple. Ideal for Dirty Data.
>> Leverages Graph Analysis for Fast Processing & Easy Data Exploration
>> http://p.sf.net/sfu/hpccsystems
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>
>
> ------------------------------------------------------------------------------
> HPCC Systems Open Source Big Data Platform from LexisNexis Risk Solutions
> Find What Matters Most in Your Big Data with HPCC Systems
> Open Source. Fast. Scalable. Simple. Ideal for Dirty Data.
> Leverages Graph Analysis for Fast Processing & Easy Data Exploration
> http://p.sf.net/sfu/hpccsystems
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development



From rme at i-rme.es  Tue Jun 17 19:01:00 2014
From: rme at i-rme.es (=?UTF-8?B?UmHDumwgTWFydMOtbmV6?=)
Date: Tue, 17 Jun 2014 21:01:00 +0200
Subject: [Bitcoin-development] Proposals for improving Bitcoin mining
	decentralization
In-Reply-To: <CAGUkT8ZTtR_ysR+0Ufq4k=SLeifEOQYtrak6G_iJRQqc3dt6Jg@mail.gmail.com>
References: <CA+8=xuKmE2rgNK+Q4g+Gqvy3QuYAXzVRYtWKC2VttuB_LJmyMA@mail.gmail.com>
	<CANOOu=9W42upZGtXWvRwyJH0tO766VT37jAR23V_rCZ9+qxTTw@mail.gmail.com>
	<CAGUkT8ZTtR_ysR+0Ufq4k=SLeifEOQYtrak6G_iJRQqc3dt6Jg@mail.gmail.com>
Message-ID: <CA+8=xuLJPQnx8OdoeWRNemDme8h5ySHOg9JOH5A6Norgk0xBgg@mail.gmail.com>

But miners dont want to run full nodes, its better to develop some SPV like
that connects to some nodes.

Also I believe that stratum mining protocol improves some performance
things that GBT lacks.

If a new protocol that requires blocks created by miners is developed and
named in a cool way, miners could ask for protocol support to his favourite
pool.
El 17/06/2014 20:26, "Karel B?lek" <kb at karelbilek.com> escribi?:

> On Tue, Jun 17, 2014 at 4:20 PM, Christophe Biocca
> <christophe.biocca at gmail.com> wrote:
> > https://en.bitcoin.it/wiki/Getblocktemplate is supposed to solve most
> > of the pooling-centralization problems.
>
> This. There is no need to create anything new when GBT already exists.
> In my opinion.
>
> > Unfortunately, it is opt-in,
> > and GHash.io doesn't support it.
>
> Yep. As pools in general are not a part of the bitcoin protocol itself
> (nobody cares how the work happened), I am not sure how this can be
> forced.
>
> > Also most miners don't care and don't do the work to set it up. To do
> > transaction inclusion themselves, they'd need to run a full node,
> > which is a bit more work and resources than just pointing hashpower at
> > a stratum server.
>
> Also, yep. If the miners cared about 51% attack, they wouldn't join
> ghash in the first place. All the miners willingly accept the risk in
> joining the big pool.
>
> K. B.
>
> > If you figure out a way to make GBT widely used (>50% hashpower), kudos
> to you.
> >
> > On Tue, Jun 17, 2014 at 4:57 AM, Ra?l Mart?nez <rme at i-rme.es> wrote:
> >> First of all I apologice due to the possible mistakes in my writing
> below, I
> >> am not a Bitcoin developer but I have some knowledge about it.
> >>
> >> ----
> >>
> >> We all know the recent news, Ghash pool controlling 51% of the hashrate.
> >> While some consider it a threat others think that is not harmful.
> >>
> >> The thing is that we have to do something to stop this from happening
> again.
> >>
> >> My proposal is to start thinking about miners that join a pool like
> >> independent miners and not slave miners, this includes creating a new
> mining
> >> protocol that does not rely on the pool sending the list of
> transactions to
> >> include in a block. Each individual miner has to collect transactions
> by his
> >> own and mine that, this can be achieved by running a full node or by
> running
> >> a SPV like node that ask other nodes for transactions.
> >>
> >> Once this protocol is developed and standarised we as a community could
> >> require all pools to use it (because its better, because is more
> >> trustless...), not by imposing it but by recommending it.
> >>
> >> Pool owners could send some instructions using this protocol to the
> miner
> >> about how many transactions to include per block (some pools want small
> >> blocks), how many 0 fee transactions to include, how much is the
> minimum fee
> >> per Kb to include transactions and some info about the Coinbase field
> in the
> >> block.
> >>
> >> This way is impossible to perform some of the possible 51% attacks:
> >>
> >> A pool owner cant mine a new chain (selfish mining) (pool clients have
> a SPV
> >> or full node that has checkpoints and ask other peers about the length
> of
> >> the chain)
> >> A pool owner can't perform double spends or reverse transactions (pool
> >> clients know all the transactions relayed to the network, they know if
> they
> >> are already included on a block)
> >> A pool owner cant decide which transactions not to include (but they can
> >> configure the minimum fee).
> >> A pool owner cant get all the rewards by avoiding other pools from
> mining
> >> blocks (Because the pool client knows the last block independently that
> is
> >> from his pool or other).
> >>
> >>
> >> The only thing that a 51% pool owner can do is to shut down his pool and
> >> drop the hashrate by 51% because he does not control the miners.
> >>
> >> If the pool owner owns all the hardware in the pool my proposal is not
> >> valid, if the pool clients dont use this protocol my proposal is not
> valid.
> >>
> >>
> >> I want to know if this is possible or its been developed or there is
> already
> >> a working protocol that works like this, also I want to read other
> people's
> >> ways to address this threat, thanks for reading.
> >>
> >>
> ------------------------------------------------------------------------------
> >> HPCC Systems Open Source Big Data Platform from LexisNexis Risk
> Solutions
> >> Find What Matters Most in Your Big Data with HPCC Systems
> >> Open Source. Fast. Scalable. Simple. Ideal for Dirty Data.
> >> Leverages Graph Analysis for Fast Processing & Easy Data Exploration
> >> http://p.sf.net/sfu/hpccsystems
> >> _______________________________________________
> >> Bitcoin-development mailing list
> >> Bitcoin-development at lists.sourceforge.net
> >> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> >>
> >
> >
> ------------------------------------------------------------------------------
> > HPCC Systems Open Source Big Data Platform from LexisNexis Risk Solutions
> > Find What Matters Most in Your Big Data with HPCC Systems
> > Open Source. Fast. Scalable. Simple. Ideal for Dirty Data.
> > Leverages Graph Analysis for Fast Processing & Easy Data Exploration
> > http://p.sf.net/sfu/hpccsystems
> > _______________________________________________
> > Bitcoin-development mailing list
> > Bitcoin-development at lists.sourceforge.net
> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140617/679356fb/attachment.html>

From gavin at bitcoinfoundation.org  Tue Jun 17 19:40:36 2014
From: gavin at bitcoinfoundation.org (Gavin Andresen)
Date: Tue, 17 Jun 2014 15:40:36 -0400
Subject: [Bitcoin-development] Proposal: relax the IsStandard rules for P2SH
	transactions
Message-ID: <CABsx9T2+_tLOPELm+K54D=6SNkHg1ZeO_T1jSM=CQZYJKGODFw@mail.gmail.com>

Assuming there is rough consensus, I'll make this a pull request (see
https://github.com/gavinandresen/bitcoin-git/tree/relax_isstandard for code
changes).

----

Now that we are finally starting to see the use of multi-signature and
other more complicated transaction forms in applications I think it is time
to open up the "IsStandard" transaction rules on the main Bitcoin network.

There are two main risks to doing this:

1. The risk that one of the seldom-used opcodes has a not-yet-discovered
chain-forking bug. I believe that risk to be very low; we have never seen
such a bug on the test network (where all transaction forms are allowed)
and have never found a bug after writing extensive unit tests.
2. The risk of opening up a denial-of-service attack (either bloat the
blockchain or use an excessive amount of CPU time) via a very
expensive-to-store-or-verify transaction. This proposal does not entirely
eliminate IsStandard checks to mitigate the potential for DoS attacks.

Proposal
--------
Allow any Script containing 15 or fewer signature operations as a
pay-to-script-hash (P2SH) Script to be relayed and mined by the reference
implementation.

This should be a simple change to the AreInputsStandard() method in the
reference implementation.

Discussion
----------
P2SH Scripts are limited to 520 bytes, and are currently limited to one of
the "standard" transaction forms on the main network. In practice that
means you can currently encode a n-of-15 OP_CHECKMULTISIG which can be
redeemed as a 'standard' transaction.

Allowing any P2SH Script would allow an attacker to craft a single standard
transaction output that requires on the order of 200 ECDSA signature
checking operations to validate-- an order of magnitude more than is
currently allowed. Therefore I am proposing that we keep the current
15-signature-checking-operations-per-transaction-output limit in place, but
allow any combination of enabled Script opcodes. So, for example, you might
have a P2SH Script that is redeemed with 2-of-2 OR 2-of-3 using:
```
OP_IF 2 pubkey1 pubkey2 2 OP_CHECKMULTISIG OP_ELSE 2 pubkey3 pubkey4
pubkey5 3 OP_CHECKMULTISIG OP_ENDIF
```
(this would count as 5 signature operations)

Restricting arbitrary Scripts to P2SH transaction types limits unspent
transaction output set bloat in two ways:
1. The Scripts are not stored in UTXO set.
2. They are limited to 520 bytes by the Script rule on the amount of data
that can be pushed onto the stack.

The reference implementation's wallet will still only recognize P2SH
transactions that use one of the standard transaction forms. To actually
USE a new transaction form will require specialized wallets or specialized
applications.

-- 
--
Gavin Andresen
Chief Scientist, Bitcoin Foundation
https://www.bitcoinfoundation.org/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140617/68c2ab99/attachment.html>

From Goss.Brian at mayo.edu  Tue Jun 17 20:40:50 2014
From: Goss.Brian at mayo.edu (Goss, Brian C., M.D.)
Date: Tue, 17 Jun 2014 20:40:50 +0000
Subject: [Bitcoin-development] Fidelity bonds for decentralized instant
 confirmation guarantees
In-Reply-To: <mailman.212267.1402952308.2171.bitcoin-development@lists.sourceforge.net>
References: <mailman.212267.1402952308.2171.bitcoin-development@lists.sourceforge.net>
Message-ID: <d46aec$hdccva@ironport9.mayo.edu>

Can two signed transactions using the same output as an input (ie, a double spend) be used to trigger a third transaction? 

It would be nice if I could sign a tx that would pay m bitcoins to an arbitrary address if and only if someone could present proof that I signed more than 1 transaction using the same output. Thus, a merchant could trust that I would not attempt a double spend for a purchase of n < m bitcoins. 

Can this type of transaction be expressed in Bitcoin's scripting language? 

Chaum had a similar feature in Digicash way back when...a double spend would let the second merchant compute the identity of the double spender and serve as proof of double spending. It didn't automate punishment though!

My apologies if this has been discussed previously. 

-----------------------------
> 
> Message: 2
> Date: Mon, 16 Jun 2014 16:50:41 -0400
> From: Peter Todd <pete at petertodd.org>
> Subject: Re: [Bitcoin-development] Fidelity bonds for decentralized
>    instant confirmation guarantees
> To: Daniel Rice <drice at greenmangosystems.com>
> Cc: Bitcoin Dev <bitcoin-development at lists.sourceforge.net>,    Lawrence
>    Nahum <lawrence at greenaddress.it>
> Message-ID: <20140616205041.GA21784 at savin>
> Content-Type: text/plain; charset="us-ascii"
> 
>> On Mon, Jun 16, 2014 at 01:37:52PM -0700, Daniel Rice wrote:
>> True, that would work, but still how are you going to bootstrap the trust?
>> TREZOR is well known, but in a future where there could be 100 different
>> companies trying to release a similar product to TREZOR it seems like one
>> company could corner the market by being the only one that is an accepted
>> instant provider at most vendors. It seems to encourage monopoly unless
>> there is a standard way to bootstrap trust in your signature.
> 
> You can always use fidelity bonds, or as I called it at the time(1),
> "Trusted identities":
> 
>    Lets suppose Alice has some bitcoins held at bitcoin address A. She
>    wants to establish trust in the "identity" associated with the ECC
>    keypair associated with A, for instance for the purpose of having other
>    users trust her not to attempt to double spend. Since the trust she
>    seeks is financial in nature, she can do this by valuing the identity
>    associated with A, by delibrately throwing away resources. A simple way
>    to do this would of course be to transfer coins to a null address,
>    provably incurring a cost to her.
> 
>    A more socially responsible way would be for her to create a series of
>    transactions that happen to have large, and equal, transaction fees.
>    Bitcoin makes the assumption that no one entity controls more than 50%
>    of the network, so if she makes n of these transactions consecutively,
>    each spending m BTC to transaction fees, there is a high probability
>    that she has given up at least n/2 * m BTC of value. This of course is
>    all public knowledge, recorded in the block chain. It also increases the
>    transaction fees for miners, which will be very important for the
>    network in the future.
> 
>    Now Bob can easily examine the block chain, and upon verifying Alice's
>    trust purchase, can decide to accept a zero-confirmation transaction at
>    face value. If Alice breaks that promise, he simply publishes her signed
>    transaction proving that Alice is a fraudster, and future Bob's will
>    distrust Alice's trusted identity, thus destroying the value needed to
>    create it.
> 
>    In effect, we now have a distributed green address system.
> 
> Note that the second paragraph is seriously obsolete - better to either
> use announce-commit sacrifices, or much preferably, simple destruction
> of coins. (sacrifice to fees encourages mining centralization for
> obvious reasons)
> 
> 1) "[Bitcoin-development] Trusted identities", Apr 26th 2012, Peter Todd,
>   http://www.mail-archive.com/bitcoin-development%40lists.sourceforge.net/msg01005.html
> 
> Incidentally, my first post to this mailing list!
> 
> -- 
> 'peter'[:-1]@petertodd.org
> 000000000000000058ca7ee3a40438ea5a96e499910638352468c6d69abdb226
> -------------- next part --------------
> A non-text attachment was scrubbed...
> Name: not available
> Type: application/pgp-signature
> Size: 685 bytes
> Desc: Digital signature
> 
> ------------------------------
> 
> 
> 
> End of Bitcoin-development Digest, Vol 37, Issue 27
> ***************************************************



From odinn.cyberguerrilla at riseup.net  Tue Jun 17 21:14:41 2014
From: odinn.cyberguerrilla at riseup.net (Odinn Cyberguerrilla)
Date: Tue, 17 Jun 2014 14:14:41 -0700
Subject: [Bitcoin-development] CoinJoin bounty fund question
Message-ID: <8df74e1c1e6659c7a35bfaf1a4de7eae.squirrel@fruiteater.riseup.net>

Hoping that this is the right place for this, I am asking a question as to
what happens with what is in the CoinJoin bounty fund address at:

http://blockchain.info/address/3M8XGFBKwkf7miBzpkU3x2DoWwAVrD1mhk

(a P2SH / multisignature address)

I encouraged people to donate to it in late 2013 (around mid-November)
after seeing some reddit discussions ~ I think the original one I saw was
at
http://www.reddit.com/r/Bitcoin/comments/1qmhkh/coinjoin_fundraising_drive/

Since that time I know it's been implemented in various places, such as
things seen floating about the web with some relation to CoinJoin or
another:
such as:
https://github.com/calafou/coinjoin
and blockchain.info
https://twitter.com/blockchain/status/402224010492006400/ |
https://github.com/blockchain/Sharedcoin
etc..

I'm curious what the CoinJoin bounty fund supports at this point and where
it's intended to go (I assume, CoinJoin related stuff, but I'm interested
to know a bit more detail).  And if it will help fund other things I am
curious about what those other things are too.
Again, hopefully the bitcoin-development list is the right place for this
question, I felt it would be better asked here rather than on twitter or
similar.

Respect,

Odinn




From jgarzik at bitpay.com  Tue Jun 17 21:29:07 2014
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Tue, 17 Jun 2014 17:29:07 -0400
Subject: [Bitcoin-development] Proposal: allocate 8 service bits for
 experimental use
In-Reply-To: <CA+s+GJAgQAZzwgONbD==fYTsV9jWKCZ6+gTiwohUT_H5kT_MoA@mail.gmail.com>
References: <20140617072351.GA7205@savin>
	<CA+s+GJAgQAZzwgONbD==fYTsV9jWKCZ6+gTiwohUT_H5kT_MoA@mail.gmail.com>
Message-ID: <CAJHLa0Mk5E4ubQ2MZcdrG3fAm5KAATKsSgxnN8VKN1W=uBU0Og@mail.gmail.com>

I wrote a patch for string-based name extensions, circa 2011-2012.  I
agree that is preferable to unreadable bits, for reasons you cite.

However, it was noted that extensions (or UUIDs etc.) would not be
propagated around the network in "addr" messages, as service bits are.

On Tue, Jun 17, 2014 at 3:57 AM, Wladimir <laanwj at gmail.com> wrote:
> On Tue, Jun 17, 2014 at 9:23 AM, Peter Todd <pete at petertodd.org> wrote:
>
>> Alternately Wladimir J. van der Laan brought up elsewhere(2) the
>> possibility for a wider notion of an extension namespace. I'm personally
>> not convinced of the short-term need - we've got 64 service bits yet
>> NODE_BLOOM is the first fully fleshed out proposal to use one - but it's
>> worth thinking about for the long term
>
> Yes, as I said in the github topic
> (https://github.com/bitcoin/bitcoin/pull/4351) I suggest we adapt a
> string-based name space for extensions.
>
> A new network version could add a command 'getextensions' to query the
> supported extensions, returning a list of extension strings or
> (extension,version) pairs. For BIPs some something like 'BIP0064'
> could be defined, but for an experiment for example
> 'experimental-getutxo'. This would be easy to implement and specify.
>
> Unlike with the 64 service bits it does not require (as much) central
> coordination to assign as there is no real danger of collisions. It
> takes the political aspect out of P2P network extensions, and gives
> more freedom to alternative implementations to experiment with their
> own extensions. And no more need for bitcoin core to drive what must
> be supported with increasing network versions.
>
> Wladimir
>
> ------------------------------------------------------------------------------
> HPCC Systems Open Source Big Data Platform from LexisNexis Risk Solutions
> Find What Matters Most in Your Big Data with HPCC Systems
> Open Source. Fast. Scalable. Simple. Ideal for Dirty Data.
> Leverages Graph Analysis for Fast Processing & Easy Data Exploration
> http://p.sf.net/sfu/hpccsystems
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development



-- 
Jeff Garzik
Bitcoin core developer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From mark at monetize.io  Tue Jun 17 22:28:36 2014
From: mark at monetize.io (Mark Friedenbach)
Date: Tue, 17 Jun 2014 15:28:36 -0700
Subject: [Bitcoin-development] Fidelity bonds for decentralized instant
 confirmation guarantees
In-Reply-To: <d46aec$hdccva@ironport9.mayo.edu>
References: <mailman.212267.1402952308.2171.bitcoin-development@lists.sourceforge.net>
	<d46aec$hdccva@ironport9.mayo.edu>
Message-ID: <53A0C114.8050904@monetize.io>

Not with current script, but there are mechanisms by which you can do a
digital signature where signing two pieces of information reveals the
ECDSA k parameter, thereby allowing anyone to recover the private key
and steal the coins.

Practically speaking, these are not very safe systems to use. For
example, imagine accidentally loading up the same wallet on two machines
or the wallet software crashing after signing and sending the
transaction, and the user recreates & sends on recovery.

It also invalidates reasonably legitimate use cases for repeating
addresses (in the absence of other solutions), and its not really
possible to prevent people from sending multiple coins to the same
address (which could then be stolen).

On 06/17/2014 01:40 PM, Goss, Brian C., M.D. wrote:
> Can two signed transactions using the same output as an input (ie, a
> double spend) be used to trigger a third transaction?
> 
> It would be nice if I could sign a tx that would pay m bitcoins to an
> arbitrary address if and only if someone could present proof that I
> signed more than 1 transaction using the same output. Thus, a
> merchant could trust that I would not attempt a double spend for a
> purchase of n < m bitcoins.
> 
> Can this type of transaction be expressed in Bitcoin's scripting
> language?
> 
> Chaum had a similar feature in Digicash way back when...a double
> spend would let the second merchant compute the identity of the
> double spender and serve as proof of double spending. It didn't
> automate punishment though!
> 
> My apologies if this has been discussed previously.
> 



From gmaxwell at gmail.com  Tue Jun 17 22:46:11 2014
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Tue, 17 Jun 2014 15:46:11 -0700
Subject: [Bitcoin-development] CoinJoin bounty fund question
In-Reply-To: <8df74e1c1e6659c7a35bfaf1a4de7eae.squirrel@fruiteater.riseup.net>
References: <8df74e1c1e6659c7a35bfaf1a4de7eae.squirrel@fruiteater.riseup.net>
Message-ID: <CAAS2fgSQB21gQHLZq9UdRYiRoiYqsB88yF8ViE2P8jK6ShrqLg@mail.gmail.com>

On Tue, Jun 17, 2014 at 2:14 PM, Odinn Cyberguerrilla
<odinn.cyberguerrilla at riseup.net> wrote:
> Hoping that this is the right place for this, I am asking a question as to
> what happens with what is in the CoinJoin bounty fund address at:

The correct place for more information is the Bitcointalk forum thread
where it was announced:
https://bitcointalk.org/index.php?topic=279249.0

cheers,



From author at anonymousbitcoinbook.com  Tue Jun 17 23:14:58 2014
From: author at anonymousbitcoinbook.com (Kristov Atlas)
Date: Tue, 17 Jun 2014 19:14:58 -0400
Subject: [Bitcoin-development] CoinJoin bounty fund question
In-Reply-To: <CAAS2fgSQB21gQHLZq9UdRYiRoiYqsB88yF8ViE2P8jK6ShrqLg@mail.gmail.com>
References: <8df74e1c1e6659c7a35bfaf1a4de7eae.squirrel@fruiteater.riseup.net>
	<CAAS2fgSQB21gQHLZq9UdRYiRoiYqsB88yF8ViE2P8jK6ShrqLg@mail.gmail.com>
Message-ID: <53A0CBF2.1050305@anonymousbitcoinbook.com>

On 06/17/2014 06:46 PM, Gregory Maxwell wrote:
> The correct place for more information is the Bitcointalk forum thread
> where it was announced:
> https://bitcointalk.org/index.php?topic=279249.0
Can anyone summarize the current status of the bounty? I see nothing 
definite about the bounty in that thread from the beginning of January 
2014, other than that the multisig address continues to accumulate 
bitcoins. Meanwhile, on other mailing lists, I've seen some talk about 
paying a portion or the whole of the bounty to the Dark Wallet team.

-Kristov



From pete at petertodd.org  Wed Jun 18 00:15:03 2014
From: pete at petertodd.org (Peter Todd)
Date: Tue, 17 Jun 2014 20:15:03 -0400
Subject: [Bitcoin-development] Proposal: relax the IsStandard rules for
 P2SH transactions
In-Reply-To: <CABsx9T2+_tLOPELm+K54D=6SNkHg1ZeO_T1jSM=CQZYJKGODFw@mail.gmail.com>
References: <CABsx9T2+_tLOPELm+K54D=6SNkHg1ZeO_T1jSM=CQZYJKGODFw@mail.gmail.com>
Message-ID: <20140618001503.GA8360@savin>

On Tue, Jun 17, 2014 at 03:40:36PM -0400, Gavin Andresen wrote:
> Assuming there is rough consensus, I'll make this a pull request (see
> https://github.com/gavinandresen/bitcoin-git/tree/relax_isstandard for code
> changes).

I'm also working on a very similar patch with some additional
protections to ensure forwards compatibility during soft-fork upgrades
and provide protections against transaction malleability.

> Now that we are finally starting to see the use of multi-signature and
> other more complicated transaction forms in applications I think it is time
> to open up the "IsStandard" transaction rules on the main Bitcoin network.

Agreed.

> There are two main risks to doing this:
> 
> 1. The risk that one of the seldom-used opcodes has a not-yet-discovered
> chain-forking bug. I believe that risk to be very low; we have never seen
> such a bug on the test network (where all transaction forms are allowed)
> and have never found a bug after writing extensive unit tests.

Agreed.

The script execution code is probably in the 99.9th percentile of open
source code in terms of code review.

> 2. The risk of opening up a denial-of-service attack (either bloat the
> blockchain or use an excessive amount of CPU time) via a very
> expensive-to-store-or-verify transaction. This proposal does not entirely
> eliminate IsStandard checks to mitigate the potential for DoS attacks.

3. The risk that non-upgraded miners produce invalid blocks after a
   soft-fork due to them mining transactions that are now invalid.

4. Transaction malleability.

> Proposal
> --------
> Allow any Script containing 15 or fewer signature operations as a
> pay-to-script-hash (P2SH) Script to be relayed and mined by the reference
> implementation.
> 
> This should be a simple change to the AreInputsStandard() method in the
> reference implementation.

In addition to these changes the soft-fork-safe patch I'm working on
would do the following:

a) Define an opcode whitelist of soft-fork-safe opcodes.

This whitelist includes every opcode but the invalid opcodes, and most
importantly, the OP_NOPx opcodes that may be redefined in a future
soft-fork with new behavior. This rule, along with rejecting transations
with unknown nVersion's, ensures that a miner still running an old
version of Bitcoin Core will only mine transactions that the new version
of Bitcoin Core considers valid.

b) Consider scripts that leave extra items on the stack after execution
   to be non-standard.

As per Pieter Wuille's BIP62 "Dealing with malleability" extra scriptSig
pushes are a malleability source. If adding extra pushes causes a
transaction to be invalid, scriptPubKeys will in most cases be
automatically non-malleable. This change I've already submitted as a
separate pull-req: https://github.com/bitcoin/bitcoin/pull/4311


I'd be happy to add the above to your existing patch and submit the
pull-req for you.

-- 
'peter'[:-1]@petertodd.org
0000000000000000407e409a626b01bfb275cb88768ca74f3ea9bd87b2e7e1d9
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 685 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140617/ce84f461/attachment.sig>

From tomh at thinlink.com  Wed Jun 18 02:01:33 2014
From: tomh at thinlink.com (Tom Harding)
Date: Tue, 17 Jun 2014 19:01:33 -0700
Subject: [Bitcoin-development] instant confirmation via payment protocol
 backwards compatible proto buffer extension
In-Reply-To: <CAFDyEXgKpbE4WGAqROJ4J1UST=tXWgfn7uKhRO_tngJfVK_Czw@mail.gmail.com>
References: <CAKrJrGOBSiY5V59eko6g796j3wh9V9ZLjPbyHeS5=zyX6j3Wdw@mail.gmail.com>	<CANEZrP0Euc1mPhRc9e41tU4zMDrWesvVyiBpAPq6M3m7K=aU=A@mail.gmail.com>
	<CAFDyEXgKpbE4WGAqROJ4J1UST=tXWgfn7uKhRO_tngJfVK_Czw@mail.gmail.com>
Message-ID: <53A0F2FD.7010605@thinlink.com>

On 6/16/2014 8:09 AM, Daniel Rice wrote:
> What if we solved doublespends like this: If a node receives 2 
> transactions that use the same input, they can put both of them into 
> the new block as a proof of double spend, but the bitcoins are not 
> sent to the outputs of either transactions. They are instead treated 
> like a fee and given to the block solver node. This gives miners the 
> needed incentive and tools to end doublespends instead of being forced 
> to favor one transaction over the other.

Before considering a hard fork with unpredictable effects on the 
uncertainty window, it would be interesting to look at a soft fork that 
would directly target the goal of reducing the uncertainty window, like 
treating locally-detected double-spends aged > T as invalid (see earlier 
message "A statistical consensus rule for reducing 0-conf double-spend 
risk").

If anything is worth a soft fork, wouldn't reducing the double-spend 
uncertainty window by an order of magnitude be in the running?

Reducing the reasons that transactions don't get relayed, which actually 
seems to have a shot of happening pretty soon, would also make this kind 
of thing work better.




From tomh at thinlink.com  Wed Jun 18 01:39:42 2014
From: tomh at thinlink.com (Tom Harding)
Date: Tue, 17 Jun 2014 18:39:42 -0700
Subject: [Bitcoin-development] instant confirmation via payment protocol
 backwards compatible proto buffer extension
In-Reply-To: <CANEZrP3KKSkD7_R0Dvt600b7vh0oia78vHhPrPqSGBbwf9DsSQ@mail.gmail.com>
References: <CAKrJrGOBSiY5V59eko6g796j3wh9V9ZLjPbyHeS5=zyX6j3Wdw@mail.gmail.com>	<CANEZrP0Euc1mPhRc9e41tU4zMDrWesvVyiBpAPq6M3m7K=aU=A@mail.gmail.com>	<CAFDyEXgKpbE4WGAqROJ4J1UST=tXWgfn7uKhRO_tngJfVK_Czw@mail.gmail.com>	<CADE3-jA8LizD8cjdqKm0pFc8OV7JqPBGhs4uvp6=VhEU2emV6w@mail.gmail.com>
	<CANEZrP3KKSkD7_R0Dvt600b7vh0oia78vHhPrPqSGBbwf9DsSQ@mail.gmail.com>
Message-ID: <53A0EDDE.7080801@thinlink.com>

On 6/16/2014 8:48 AM, Mike Hearn wrote:
> In practice of course this is something payment processors like Bitpay 
> and Coinbase will think about. Individual cafes etc who are just using 
> mobile wallets won't be able to deal with this complexity: if we can't 
> make native Bitcoin work well enough there, we're most likely to just 
> lose that market or watch it become entirely centralised around a 
> handful of payment processing companies.

I have trouble seeing how could the real-time anonymous payments market 
can be cleanly separated from everything else.  If trusted third parties 
become the norm for that market, there will inevitably be a huge overlap 
effect on other markets that bitcoin can serve best, even today.  I 
don't see how any currency, any cash, can concede this market.




From laanwj at gmail.com  Wed Jun 18 06:20:26 2014
From: laanwj at gmail.com (Wladimir)
Date: Wed, 18 Jun 2014 08:20:26 +0200
Subject: [Bitcoin-development] Proposal: allocate 8 service bits for
 experimental use
In-Reply-To: <CAJHLa0Mk5E4ubQ2MZcdrG3fAm5KAATKsSgxnN8VKN1W=uBU0Og@mail.gmail.com>
References: <20140617072351.GA7205@savin>
	<CA+s+GJAgQAZzwgONbD==fYTsV9jWKCZ6+gTiwohUT_H5kT_MoA@mail.gmail.com>
	<CAJHLa0Mk5E4ubQ2MZcdrG3fAm5KAATKsSgxnN8VKN1W=uBU0Og@mail.gmail.com>
Message-ID: <CA+s+GJB-PziMMYDJMFYX6vAu-FCfugeJrNe+n3aLokFcFvzvEA@mail.gmail.com>

On Tue, Jun 17, 2014 at 11:29 PM, Jeff Garzik <jgarzik at bitpay.com> wrote:
> I wrote a patch for string-based name extensions, circa 2011-2012.  I
> agree that is preferable to unreadable bits, for reasons you cite.
>
> However, it was noted that extensions (or UUIDs etc.) would not be
> propagated around the network in "addr" messages, as service bits are.

Thanks for letting me know, I didn't remember your patch.

Ugh, yes, propagating all extensions in `addr` messages is not how I
imagined this to work.

But then there would need to be an alternative way to discover nodes
that offer a certain extension. Alas, this moves it from a
straightforward and common sense change to a significant change to the
protocol.

Wladimir



From laanwj at gmail.com  Wed Jun 18 07:42:12 2014
From: laanwj at gmail.com (Wladimir)
Date: Wed, 18 Jun 2014 09:42:12 +0200
Subject: [Bitcoin-development] Proposal: relax the IsStandard rules for
 P2SH transactions
In-Reply-To: <CABsx9T2+_tLOPELm+K54D=6SNkHg1ZeO_T1jSM=CQZYJKGODFw@mail.gmail.com>
References: <CABsx9T2+_tLOPELm+K54D=6SNkHg1ZeO_T1jSM=CQZYJKGODFw@mail.gmail.com>
Message-ID: <CA+s+GJB8wzvBTG73TnFkHjWDMoOZiH+vgSyzmZ4r_f=nAU5WvQ@mail.gmail.com>

On Tue, Jun 17, 2014 at 9:40 PM, Gavin Andresen
<gavin at bitcoinfoundation.org> wrote:
> Assuming there is rough consensus, I'll make this a pull request (see
> https://github.com/gavinandresen/bitcoin-git/tree/relax_isstandard for code
> changes).
>
> ----
>
> Now that we are finally starting to see the use of multi-signature and other
> more complicated transaction forms in applications I think it is time to
> open up the "IsStandard" transaction rules on the main Bitcoin network.

Agreed!

> Discussion
> ----------
> Allowing any P2SH Script would allow an attacker to craft a single standard
> transaction output that requires on the order of 200 ECDSA signature
> checking operations to validate-- an order of magnitude more than is
> currently allowed. Therefore I am proposing that we keep the current
> 15-signature-checking-operations-per-transaction-output limit in place, but
> allow any combination of enabled Script opcodes. So, for example, you might
> have a P2SH Script that is redeemed with 2-of-2 OR 2-of-3 using:

Soungs good to me - to lift the restrictions and increase flexibility,
but also to be a careful and keep the DoS limits.

> The reference implementation's wallet will still only recognize P2SH
> transactions that use one of the standard transaction forms. To actually USE
> a new transaction form will require specialized wallets or specialized
> applications.

That's of course completely separate. As we all know, most wallet
innovation doesn't happen in the reference implementation wallet, and
it should not be used as the guide here.

Wladimir



From mike at plan99.net  Wed Jun 18 09:15:48 2014
From: mike at plan99.net (Mike Hearn)
Date: Wed, 18 Jun 2014 11:15:48 +0200
Subject: [Bitcoin-development] instant confirmation via payment protocol
 backwards compatible proto buffer extension
In-Reply-To: <20140617155845.8177ADFC55C@quidecco.de>
References: <CAKrJrGOBSiY5V59eko6g796j3wh9V9ZLjPbyHeS5=zyX6j3Wdw@mail.gmail.com>
	<CANEZrP0Euc1mPhRc9e41tU4zMDrWesvVyiBpAPq6M3m7K=aU=A@mail.gmail.com>
	<CAFDyEXgKpbE4WGAqROJ4J1UST=tXWgfn7uKhRO_tngJfVK_Czw@mail.gmail.com>
	<CADE3-jA8LizD8cjdqKm0pFc8OV7JqPBGhs4uvp6=VhEU2emV6w@mail.gmail.com>
	<20140617155845.8177ADFC55C@quidecco.de>
Message-ID: <CANEZrP2ydFvD6QnmyaJ6zQ3iUGMJAp_mcj8CXwGozkFY+njRfQ@mail.gmail.com>

Please, let's talk about other anti-double spend things on a separate
thread.

On Tue, Jun 17, 2014 at 5:58 PM, Isidor Zeuner <cryptocurrencies at quidecco.de
> wrote:

> What prevents the following steps from happening:
>

I linked to Satoshi's post on this earlier, he explains why it works there,
assuming people follow the original protocol rules.

Your analysis holds as long as network abandons the original Bitcoin
design. Obviously, we hope people won't do that. If everyone decides not to
do things how Satoshi laid out then things will break, although whether we
have a failure of "Bitcoin" at that point is debatable.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140618/a006ecf1/attachment.html>

From laanwj at gmail.com  Wed Jun 18 10:23:57 2014
From: laanwj at gmail.com (Wladimir)
Date: Wed, 18 Jun 2014 12:23:57 +0200
Subject: [Bitcoin-development] Proposal: allocate 8 service bits for
 experimental use
In-Reply-To: <20140617072351.GA7205@savin>
References: <20140617072351.GA7205@savin>
Message-ID: <CA+s+GJBw84dxc7pvJef-c=m7Dj0Cjy=O4PjNKB=5Bt2spM83OA@mail.gmail.com>

On Tue, Jun 17, 2014 at 9:23 AM, Peter Todd <pete at petertodd.org> wrote:
> For my replace-by-fee implementation(1) I used service bit 26 to let
> preferential peering work so that replace-by-fee nodes could easily find
> each other. Of course, that's a temporary/experimental usage that can be
> dropped after wider adoption, so I included the following comment:
>
>     // Reserve 24-31 for temporary experiments
>     NODE_REPLACE_BY_FEE = (1 << 26)
>
> Service bits are never a guaranteed thing anyway, so occasional
> collisions can and should be tolerated by applications using these
> experimental service bits.

Anyhow -- back to the original proposal. I'm fine with setting aside
part of the service bit space for experiments.

Wladimir



From jgarzik at bitpay.com  Wed Jun 18 11:48:47 2014
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Wed, 18 Jun 2014 06:48:47 -0500
Subject: [Bitcoin-development] Proposal: allocate 8 service bits for
 experimental use
In-Reply-To: <CA+s+GJBw84dxc7pvJef-c=m7Dj0Cjy=O4PjNKB=5Bt2spM83OA@mail.gmail.com>
References: <20140617072351.GA7205@savin>
	<CA+s+GJBw84dxc7pvJef-c=m7Dj0Cjy=O4PjNKB=5Bt2spM83OA@mail.gmail.com>
Message-ID: <CAJHLa0OZoo1Ve31u1NWL4EE9hEG-GidjwXhVL68GEHaQ-QNupQ@mail.gmail.com>

On Wed, Jun 18, 2014 at 5:23 AM, Wladimir <laanwj at gmail.com> wrote:
> Anyhow -- back to the original proposal. I'm fine with setting aside
> part of the service bit space for experiments.

ACK

-- 
Jeff Garzik
Bitcoin core developer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From lawrence at greenaddress.it  Wed Jun 18 12:09:51 2014
From: lawrence at greenaddress.it (Lawrence Nahum)
Date: Wed, 18 Jun 2014 12:09:51 +0000 (UTC)
Subject: [Bitcoin-development] instant confirmation via payment protocol
	backwards compatible proto buffer extension
References: <CAKrJrGOBSiY5V59eko6g796j3wh9V9ZLjPbyHeS5=zyX6j3Wdw@mail.gmail.com>	<lnhgsk$va6$1@ger.gmane.org>
	<loom.20140615T111027-736@post.gmane.org>
	<lnk4ii$ehf$1@ger.gmane.org>
Message-ID: <loom.20140618T140509-802@post.gmane.org>

Andreas Schildbach <andreas <at> schildbach.de> writes:

> 
> What is the use of the Transactions message? Note the Payment message
> already contains a transactions field that could be signed. Can you
> briefly describe the whole flow of messages on an example, including the
> BIP70 messages?

Updated the BIP draft with an example and a few corrections (like the 
redundant parameter).

You can see the diff here 
https://github.com/greenaddress/bips/commit/636d5819c1be9cc099dca0a47a3148332
522a3d4


Allow me to recap BIP changes in discussion:

- making some changes to allow merchants to offer discounts in case of 
instant ?
- allowing multiple signatures ?

Did I miss anything? Thoughts on the above from others?




From gavin at bitcoinfoundation.org  Wed Jun 18 12:52:22 2014
From: gavin at bitcoinfoundation.org (Gavin Andresen)
Date: Wed, 18 Jun 2014 08:52:22 -0400
Subject: [Bitcoin-development] Proposal: relax the IsStandard rules for
 P2SH transactions
In-Reply-To: <20140618001503.GA8360@savin>
References: <CABsx9T2+_tLOPELm+K54D=6SNkHg1ZeO_T1jSM=CQZYJKGODFw@mail.gmail.com>
	<20140618001503.GA8360@savin>
Message-ID: <CABsx9T2O42pER0b1v9oeU14_K=KVWVqHzcfFmWAhSxoYAn12vg@mail.gmail.com>

RE: most of Peter Todd's comments:

All of that should be separate pull requests.  Big Honking Pull Requests
are harder to review and are more likely to be bike-shedded to death.


RE: not relaying/mining transactions with OP_NOPs so miners don't mine
up-version transactions that are invalid under future-new-rules: I'm not
convinced it is worth adding more code (more potential for bugs) to protect
against something that isn't going to happen because up-version
transactions are non-standard (due to version check) in any case.

In any case, lets make that a separate pull request.

I'm going to take the lack of immediate "That's a Terrible Idea!" as rough
consensus...

-- 
--
Gavin Andresen
Chief Scientist, Bitcoin Foundation
https://www.bitcoinfoundation.org/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140618/8221909b/attachment.html>

From mike at plan99.net  Wed Jun 18 13:25:48 2014
From: mike at plan99.net (Mike Hearn)
Date: Wed, 18 Jun 2014 15:25:48 +0200
Subject: [Bitcoin-development] instant confirmation via payment protocol
 backwards compatible proto buffer extension
In-Reply-To: <loom.20140618T140509-802@post.gmane.org>
References: <CAKrJrGOBSiY5V59eko6g796j3wh9V9ZLjPbyHeS5=zyX6j3Wdw@mail.gmail.com>
	<lnhgsk$va6$1@ger.gmane.org>
	<loom.20140615T111027-736@post.gmane.org>
	<lnk4ii$ehf$1@ger.gmane.org>
	<loom.20140618T140509-802@post.gmane.org>
Message-ID: <CANEZrP0ekAHNOHha_8ncu_QKVCidBQndw2x0+5rciD92LdOS7A@mail.gmail.com>

>
> - allowing multiple signatures ?


I'm not sure this is actually important or useful; trusting someone not to
double spend is a pretty binary thing. I'm not sure saying "you need to get
three independent parties to sign off on this" is worth the hassle,
especially because the first signature is obvious (your risk analysis
provider or hardware) but the second and third are ..... who? Special
purpose services you have to sign up for? Seems like a hassle.

But it's up to you.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140618/dca5daab/attachment.html>

From drice at greenmangosystems.com  Wed Jun 18 15:59:44 2014
From: drice at greenmangosystems.com (Daniel Rice)
Date: Wed, 18 Jun 2014 08:59:44 -0700
Subject: [Bitcoin-development] instant confirmation via payment protocol
 backwards compatible proto buffer extension
In-Reply-To: <CANEZrP0ekAHNOHha_8ncu_QKVCidBQndw2x0+5rciD92LdOS7A@mail.gmail.com>
References: <CAKrJrGOBSiY5V59eko6g796j3wh9V9ZLjPbyHeS5=zyX6j3Wdw@mail.gmail.com>
	<lnhgsk$va6$1@ger.gmane.org>
	<loom.20140615T111027-736@post.gmane.org>
	<lnk4ii$ehf$1@ger.gmane.org>
	<loom.20140618T140509-802@post.gmane.org>
	<CANEZrP0ekAHNOHha_8ncu_QKVCidBQndw2x0+5rciD92LdOS7A@mail.gmail.com>
Message-ID: <CAFDyEXhY-KxM6dN0ngXiiB4ga85tD6e4gW6QVpST5XxJARLicw@mail.gmail.com>

> I'm not sure this is actually important or useful; trusting someone not
to double spend is a pretty binary thing

I think that's true if you assume that the instant provider list is based
on a by hand created list of accepted instant providers. That's how VISA
works now and that's why I was asking for an approach where the
trusted_instant_providers list is scalable because that seems very
dangerous.

Since you can detect when a double spend happens, the entire instant
provider list could be automatically generated based on a 3rd party network
that shares information between vendors and also monitors double spends. In
that scenario, there is no hand written exclusive list of accepted instant
providers. There is just a database of past history on all instant
providers. That database can be used to give a confidence score for a
specific instant provider for a given transaction amount. In this scenario,
a new wallet company would be able to earn trust over time. If the list is
made by hand, "Bitpay accepts Circle, Coinbase, and GreenAddress for
instant transactions", then new wallet providers have to go around bribing
Bitpay and the other large merchant transaction providers to get on their
instant provider list.

Allowing more than one instant signature on a transaction is supposed to
help avoid that scenario. For example, lets say I want to establish my own
instant signature. I use a wallet that already has an accepted instant
signature, but it also allows me to add my own instant signature. I do this
so that I can start establishing trust in my own instant signature while
relying on their instant signature.


On Wed, Jun 18, 2014 at 6:25 AM, Mike Hearn <mike at plan99.net> wrote:

> - allowing multiple signatures ?
>
>
> I'm not sure this is actually important or useful; trusting someone not to
> double spend is a pretty binary thing. I'm not sure saying "you need to get
> three independent parties to sign off on this" is worth the hassle,
> especially because the first signature is obvious (your risk analysis
> provider or hardware) but the second and third are ..... who? Special
> purpose services you have to sign up for? Seems like a hassle.
>
> But it's up to you.
>
>
> ------------------------------------------------------------------------------
> HPCC Systems Open Source Big Data Platform from LexisNexis Risk Solutions
> Find What Matters Most in Your Big Data with HPCC Systems
> Open Source. Fast. Scalable. Simple. Ideal for Dirty Data.
> Leverages Graph Analysis for Fast Processing & Easy Data Exploration
> http://p.sf.net/sfu/hpccsystems
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140618/80b85a82/attachment.html>

From mike at plan99.net  Wed Jun 18 16:09:44 2014
From: mike at plan99.net (Mike Hearn)
Date: Wed, 18 Jun 2014 18:09:44 +0200
Subject: [Bitcoin-development] instant confirmation via payment protocol
 backwards compatible proto buffer extension
In-Reply-To: <CAFDyEXhY-KxM6dN0ngXiiB4ga85tD6e4gW6QVpST5XxJARLicw@mail.gmail.com>
References: <CAKrJrGOBSiY5V59eko6g796j3wh9V9ZLjPbyHeS5=zyX6j3Wdw@mail.gmail.com>
	<lnhgsk$va6$1@ger.gmane.org>
	<loom.20140615T111027-736@post.gmane.org>
	<lnk4ii$ehf$1@ger.gmane.org>
	<loom.20140618T140509-802@post.gmane.org>
	<CANEZrP0ekAHNOHha_8ncu_QKVCidBQndw2x0+5rciD92LdOS7A@mail.gmail.com>
	<CAFDyEXhY-KxM6dN0ngXiiB4ga85tD6e4gW6QVpST5XxJARLicw@mail.gmail.com>
Message-ID: <CANEZrP3AKLNZmt0YqNNp3-7uVAkaT4oM4GUfN4bPTqxycpq8zg@mail.gmail.com>

>
> I think that's true if you assume that the instant provider list is based
> on a by hand created list of accepted instant providers. That's how VISA
> works now and that's why I was asking for an approach where the
> trusted_instant_providers list is scalable because that seems very
> dangerous.
>

Supporting it in the protocol is easy. Building such a thing: that's hard.
Decentralised automated reputation systems are complex and subtle.

I don't feel strongly about whether the field should be "optional" or
"repeated", 100% of implementations in the forseeable future would just
look at the first item and ignore the rest. But if later someone did crack
this problem it would lead to a simple upgrade path. So perhaps you're
right and the protobuf should allow multiple signatures. It means a new
sub-message to wrap the pki_type, pki_data and signature fields into one,
and then making that repeated.

Up to Lawrence.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140618/cc609821/attachment.html>

From natanael.l at gmail.com  Wed Jun 18 20:47:20 2014
From: natanael.l at gmail.com (Natanael)
Date: Wed, 18 Jun 2014 22:47:20 +0200
Subject: [Bitcoin-development] instant confirmation via payment protocol
 backwards compatible proto buffer extension
In-Reply-To: <20140617155845.8177ADFC55C@quidecco.de>
References: <CAKrJrGOBSiY5V59eko6g796j3wh9V9ZLjPbyHeS5=zyX6j3Wdw@mail.gmail.com>
	<CANEZrP0Euc1mPhRc9e41tU4zMDrWesvVyiBpAPq6M3m7K=aU=A@mail.gmail.com>
	<CAFDyEXgKpbE4WGAqROJ4J1UST=tXWgfn7uKhRO_tngJfVK_Czw@mail.gmail.com>
	<CADE3-jA8LizD8cjdqKm0pFc8OV7JqPBGhs4uvp6=VhEU2emV6w@mail.gmail.com>
	<20140617155845.8177ADFC55C@quidecco.de>
Message-ID: <CAAt2M182f6=_MHqH33MbP3_d6ojAgnFu-T4mzL2SW5CWC74eDg@mail.gmail.com>

Den 17 jun 2014 17:59 skrev "Isidor Zeuner" <cryptocurrencies at quidecco.de>:
>
> quote:
> > Mike Hearn, why don't we just have all nodes report attempted double
spends
> > through the node network. No need to involve the miners at all really,
or
> > do your suggestion but also report the double spend attempt. By waiting
> > maybe 10-60 seconds (instead of 10 minutes for first conf), merchants
can
> > be more sure that a double spend attack was not tried. Attacker would
have
> > to hold back second tx by 10-60 seconds and hope that that second tx
(with
> > higher fee) get's into a solved block before the first one. This forced
> > delay time ought to make the attack less successful (but not
impossible).
> >
>
> What prevents the following steps from happening:
>
> 1. attacker sends first transaction, paying to the merchant
>
> 2. merchant waits 10-60 seconds
>
> 3. merchant confirms the payment as received
>
> 4. attacker sees merchant's confirmation
>
> 5. attacker sends double spend
>
> The security improvement seems to be pretty much exactly the chance
> that during the 10-60 seconds, a block is solved. Am I missing
> something?
>
> Regarding "reporting double spends", this would only help if it comes
> with some kind of penalty for the double spend. Now what if the double
> spend was not done on malicious motives? Maybe someone posted a
> transaction which does not confirm for some reason, and wants to
> recover his funds? Should we regard transactions which do not confirm
> as forever lost, in order to get to an "every double spend is a
> misbehaviour" policy?
>
> Best regards,
>
> Isidor

With 2-of-2 multisignature notaries, the doublespend (the set of
conflicting transactions) would be published and propagated together as
evidence of the notary being malicious. This is trivial and self-evident
self-contained proof.

But there should be no direct penalty IMHO in the Bitcoin protocol itself.

If a transaction would have to be replaced honestly because of being wrong
or simply not confirming, then I think there should be some means of
showing the second transaction is "legitimate". Don't ask me how exactly it
would work in practice, but one method could be through showing the
original recipients have signed off on it (showing they agree it should be
reversed).

If you can't get the original recipient to sign, then you're stuck with
either not replacing it or the notary trying to prove the replacing
transaction was legitimate.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140618/527586ea/attachment.html>

From cryptocurrencies at quidecco.de  Thu Jun 19 03:47:17 2014
From: cryptocurrencies at quidecco.de (Isidor Zeuner)
Date: Thu, 19 Jun 2014 05:47:17 +0200 (CEST)
Subject: [Bitcoin-development] 0 confirmation txs using replace-by-fee
 and game theory
In-Reply-To: <CAC1+kJNTpHpG5EpRKj21PEy3z2iAouuH6Yiix8m20uji3b6Lgg@mail.gmail.com>
References: <CAC1+kJNTpHpG5EpRKj21PEy3z2iAouuH6Yiix8m20uji3b6Lgg@mail.gmail.com>
	<CANEZrP0fjzuUKh0Jmk9c99ne81hdxZdTnhw6sq47Na7AC4n04A@mail.gmail.com>
Message-ID: <20140619034717.71C3ADFD05D@quidecco.de>

quote:
[...]
> On 4/24/14, Chris Pacia <ctpacia at gmail.com> wrote:
> > It would work but it's an ugly hack IMO. What do people do if they don't
> > have extra to pay when making a purchase? I have 200 mbtc and want to buy a
> > 200 mbtc phone but I can't because I need 400 mbtc. Sucks for me.
> >
> > I would much prefer the hassle of a green address notary than always having
> > to make sure I have double what I need to make a purchase.
>
> This scheme wouldn't be mandatory. You can still wait for
> confirmations or rely somehow on existing trust instead if that's
> better for you on that situation.
>

Considering hotel or car rental payments where the credit card
processor reserves a higher amount in order to cover risks, it
doesn't seem like anything new or particularly inconvenient that a
payment system may require a larger amount than the final price being
available.

Which brings us to the question: Is it an important characteristic in
a payment system that it is capable of quickly spending your last
penny?

Best regards,

Isidor



From pete at petertodd.org  Thu Jun 19 10:09:09 2014
From: pete at petertodd.org (Peter Todd)
Date: Thu, 19 Jun 2014 06:09:09 -0400
Subject: [Bitcoin-development] Proposal: relax the IsStandard rules for
 P2SH transactions
In-Reply-To: <CABsx9T2O42pER0b1v9oeU14_K=KVWVqHzcfFmWAhSxoYAn12vg@mail.gmail.com>
References: <CABsx9T2+_tLOPELm+K54D=6SNkHg1ZeO_T1jSM=CQZYJKGODFw@mail.gmail.com>
	<20140618001503.GA8360@savin>
	<CABsx9T2O42pER0b1v9oeU14_K=KVWVqHzcfFmWAhSxoYAn12vg@mail.gmail.com>
Message-ID: <20140619100909.GA3544@savin>

On Wed, Jun 18, 2014 at 08:52:22AM -0400, Gavin Andresen wrote:
> RE: most of Peter Todd's comments:
> 
> All of that should be separate pull requests.  Big Honking Pull Requests
> are harder to review and are more likely to be bike-shedded to death.

Well, just doing one and not the rest isn't necessarily a good idea. The
malleability protection definitely seems like a good idea, and has had
quite a bit of review.

> RE: not relaying/mining transactions with OP_NOPs so miners don't mine
> up-version transactions that are invalid under future-new-rules: I'm not
> convinced it is worth adding more code (more potential for bugs) to protect
> against something that isn't going to happen because up-version
> transactions are non-standard (due to version check) in any case.

Do we have consensus that future soft-forks to add new opcodes will
always be done in conjunction with a transaction nVersion bump? If so,
then that's ok, if not, then we should have a whitelist.

The code to restrict the opcodes to the softfork-safe subset is trivial,
a GetOp() loop and a switch statement. It can always be removed later.

Something that comes to mind is if we do always bump nVersion then
OP_NOPx always will have a parallel "do-nothing" behavior, which means
EvalScript() will always have to have code enabling that backwards
compatible behavior.

-- 
'peter'[:-1]@petertodd.org
000000000000000004e51d8d00eedb31ec1505d245f48960896b79f0e7193c2a
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 685 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140619/7b5d77e8/attachment.sig>

From gavin at bitcoinfoundation.org  Thu Jun 19 13:54:31 2014
From: gavin at bitcoinfoundation.org (Gavin Andresen)
Date: Thu, 19 Jun 2014 09:54:31 -0400
Subject: [Bitcoin-development] Proposal: relax the IsStandard rules for
 P2SH transactions
In-Reply-To: <20140619100909.GA3544@savin>
References: <CABsx9T2+_tLOPELm+K54D=6SNkHg1ZeO_T1jSM=CQZYJKGODFw@mail.gmail.com>
	<20140618001503.GA8360@savin>
	<CABsx9T2O42pER0b1v9oeU14_K=KVWVqHzcfFmWAhSxoYAn12vg@mail.gmail.com>
	<20140619100909.GA3544@savin>
Message-ID: <CABsx9T1uC9sMzbPJa4MGpBNoQ4S255Tfo66+wwCoND_bQtvT7Q@mail.gmail.com>

RE: soft-forks bumping version numbers:

Yes, we have consensus that is the way we will do it.  I should probably
turn https://gist.github.com/gavinandresen/2355445 into an informational
BIP.

RE: malleability:

Orthogonal (but related) issue to IsStandard.

Detecting Scripts that leave extra items on the stack will be done in a
different part of the code than the code addressed by this pull reques. No
need to execute the Script twice to figure out if it leaves extra stuff,
and the idea behind IsStandard is to get to a quick yes/no before running a
potentially expensive Script execution.



-- 
--
Gavin Andresen
Chief Scientist, Bitcoin Foundation
https://www.bitcoinfoundation.org/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140619/f20c1c3e/attachment.html>

From sergiolerner at certimix.com  Thu Jun 19 16:58:38 2014
From: sergiolerner at certimix.com (Sergio Lerner)
Date: Thu, 19 Jun 2014 13:58:38 -0300
Subject: [Bitcoin-development] BlockPow: A Practical Proposal to prevent
 mining pools AND reduce payoff variance:
Message-ID: <53A316BE.5040508@certimix.com>

I propose a setting that prevent mining pools AND reduce payoff variance
which requires two changes: increasing the block-rate and changing the
Bitcoin PoW (but still allowing current Bitcoin ASICs to work (as far as
I know)). The block rate must be increased at least 20 times and block
must still be near full (e.g. there must be at least 20 more
transactions/second than there is today)

BlockPow is kind of PoW that only practically prevents mining pools for
certain cryptocurrency settings based on concepts similar to parmacoin,
but in a much simple degree. The idea is that if miners try to join a
pool, then they incur in overhead of transmitting information and earn
less than working solo. Let b (the payload) contain a full block. b must
contain all the transactions and the header, and not only the
transaction hashes. b should not hide anything. Let h be the block
header (which contains the previous block hash and the Merkle tree root
of the transactions). Let d be the difficulty. hash-block-length(b)
returns the number of blocks processed by the hash function when fed
with the block b. The target is divided by hash-block-length(b) so that
the difficulty does not depend on the length of the block. Some other
function can be used to encourage nodes to add more or less transactions.

Def: Basic BlockPoW concept

For each r in the nonce-range: if H ( H( r || b ) || h || r) ) < 2^-d/
hash-block-length(b) then return r

return null

The header (h) is appended to the hashed message to allow SPV clients to
verify the PoW without requiring the full block to be downloaded. Peers
can send only (x,r,h) to SPV nodes, where x = H( r || b ), so they can
verify the PoW. The verification procedure is obvious, and is skipped
here. r is inserted at the beginning of the message to prevent pool
administrators from keeping a secret mid-state of the hash function
secret in order to prevent block stealing and also to force the miner to
know b in the inner mining loop.

So now mining requires the knowledge of the block b to be mined, and b
must be received at each block-chain epoch. This could create an
incentive not to include any transaction and use an almost empty b,
because that way the bandwidth requirements is decreased. But this
incentive should not exists normally, since by including transactions
the solo miner gets an additional revenue from fees, which is lost if
the block is empty. Anyway, to prevent this possible incentive we can
append to b a subset of previous blocks (e.g 100 blocks). The block
subset to include could be derived from a peudo-random function seeded
by the previous block hash. Then a node would still need to download
part or all the block-chain in order to mine.

Now if the miner wants to be a dumb node and take part of a pool, then
the current working unsolved block (the template) must be sent each time
from the pool admin to each miner. If the pool admin hosts 1000 miners,
then to serve them with fresh block templates he needs 1000 times more
bandwidth that the miners, making this much more expensive. If miners
create another network topology to distribute templates, they are
incurring in the same overhead as being actively part of the
cryptocurrency network, so they gain nothing.

For example, in a block-chain with a 5 seconds block-rate, such as in
NimbleCoin <http://nimbleCoin.org>, each block can be as large as 200
Kbytes (100 tps are allowed). A miner will require the block template to
be ready as fast as possible, say before 3 seconds, so as not to loose
more than 60% of the times the transaction fees present in the block
template. This means that a pool admin serving 1000 clients must have a
upload bandwidth of at least 60 Mbytes/sec, and load balance servers,
because all miners will demand the block template at the same time and
will compete for it.

The same miner, working solo, will not loose the 60% of block fees. If
block fees are 10% of block reward, then solo miners earn 6% more than
pool miners. Also, having a block rate of 5 seconds allows solo miners
to receive payments more often and so it reduces the payment variance.

This method to discourage mining pools only work as long as time is
takes to transmit a block is comparable to the block interval time, e.g.
20%. This seems not to be a problem since if the cryptocurrency becomes
popular, then we can expect blocks to be near full, while if is is not,
then nobody will care about mining pools.

For this method to work for Bitcoin, Bitcoin should reduce the block
rate to at least 1 minute, and keep blocks of at least 10 Mbytes. Or go
the NimbleCoin way, and reduce the block interval to 5 seconds. The sole
reduction of the block rate from 10 minutes to 5 seconds would reduce
notably the mining reward variance, which is the main reason miners
don't mine solo.

BitcoinBlockPow

The basic BlockPoW is incompatible with Bitcoin ASICs as is but it can
be made partially compatible with some tweaks: The value b is replaced
by a a a subset or an integrity check of the block.

Using a subset:

First the hashMerkleRoot and hashPrevBlock fields are replaced by the
fields: ChildBlock (32 bytes) and ScatteredBlockBytes (32 bytes).
ChildBlock is the hash of a message with stores the old hashMerkleRoot
and hashPrevBlock. ScatteredBlockBytes is a pseudo-random subset of
bytes taken from the block template being mined. The seed for the
pseudo-random function that selects the subset is  the hashMerkleRoot
plus the block time. When a miner scans all the 32bit nonce space, then
a new hashMerkleRoot must be created to increase the extra-nonce field
or the time must be updated. When this happens, a new subset of
pseudo-random 32 block bytes must be collected. If the miner only stores
10% of the block template (e.g. 100 Kbytes instead of 1 Mbyte), then the
probability he can build the ScatteredBlockBytes by brute-forcing the
seed is 10^-32. If the miner performs 100 GH/sec, then the 32-bit nonce
will overflow every 20 msec and the miner could request the
ScatteredBlockBytes from the pool admin using a bandwidth of 1 Kbyte/s.
A pool hosting 6 PH/sec (such as Eligious, which has 8%) would need to
stream more than 60 Mb/s of ScatteredBlockBytes fields. A mining pool
having 50% would need to stream 500 Mb/s, which is quite challenging. So
miners will download the block normally, and become active part of the
network.

Using an integrity check:

ScatteredBlockBytes  is replaced by a field BlockHash defined as H(
full-block-with-zero-nonce ). Obviously the header must be at the
beginning of the block to force the re-hash.

Best regards,
 Sergio.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140619/f8b2f0d1/attachment.html>

From kevinsisco61784 at gmail.com  Thu Jun 19 17:11:44 2014
From: kevinsisco61784 at gmail.com (Kevin)
Date: Thu, 19 Jun 2014 13:11:44 -0400
Subject: [Bitcoin-development] BlockPow: A Practical Proposal to prevent
 mining pools AND reduce payoff variance:
In-Reply-To: <53A316BE.5040508@certimix.com>
References: <53A316BE.5040508@certimix.com>
Message-ID: <53A319D0.9080309@gmail.com>

On 6/19/2014 12:58 PM, Sergio Lerner wrote:
>
> I propose a setting that prevent mining pools AND reduce payoff 
> variance which requires two changes: increasing the block-rate and 
> changing the Bitcoin PoW (but still allowing current Bitcoin ASICs to 
> work (as far as I know)). The block rate must be increased at least 20 
> times and block must still be near full (e.g. there must be at least 
> 20 more transactions/second than there is today)
>
> BlockPow is kind of PoW that only practically prevents mining pools 
> for certain cryptocurrency settings based on concepts similar to 
> parmacoin, but in a much simple degree. The idea is that if miners try 
> to join a pool, then they incur in overhead of transmitting 
> information and earn less than working solo. Let b (the payload) 
> contain a full block. b must contain all the transactions and the 
> header, and not only the transaction hashes. b should not hide 
> anything. Let h be the block header (which contains the previous block 
> hash and the Merkle tree root of the transactions). Let d be the 
> difficulty. hash-block-length(b) returns the number of blocks 
> processed by the hash function when fed with the block b. The target 
> is divided by hash-block-length(b) so that the difficulty does not 
> depend on the length of the block. Some other function can be used to 
> encourage nodes to add more or less transactions.
>
> Def: Basic BlockPoW concept
>
> For each r in the nonce-range: if H ( H( r || b ) || h || r) ) < 2^-d/ 
> hash-block-length(b) then return r
>
> return null
>
> The header (h) is appended to the hashed message to allow SPV clients 
> to verify the PoW without requiring the full block to be downloaded. 
> Peers can send only (x,r,h) to SPV nodes, where x = H( r || b ), so 
> they can verify the PoW. The verification procedure is obvious, and is 
> skipped here. r is inserted at the beginning of the message to prevent 
> pool administrators from keeping a secret mid-state of the hash 
> function secret in order to prevent block stealing and also to force 
> the miner to know b in the inner mining loop.
>
> So now mining requires the knowledge of the block b to be mined, and b 
> must be received at each block-chain epoch. This could create an 
> incentive not to include any transaction and use an almost empty b, 
> because that way the bandwidth requirements is decreased. But this 
> incentive should not exists normally, since by including transactions 
> the solo miner gets an additional revenue from fees, which is lost if 
> the block is empty. Anyway, to prevent this possible incentive we can 
> append to b a subset of previous blocks (e.g 100 blocks). The block 
> subset to include could be derived from a peudo-random function seeded 
> by the previous block hash. Then a node would still need to download 
> part or all the block-chain in order to mine.
>
> Now if the miner wants to be a dumb node and take part of a pool, then 
> the current working unsolved block (the template) must be sent each 
> time from the pool admin to each miner. If the pool admin hosts 1000 
> miners, then to serve them with fresh block templates he needs 1000 
> times more bandwidth that the miners, making this much more expensive. 
> If miners create another network topology to distribute templates, 
> they are incurring in the same overhead as being actively part of the 
> cryptocurrency network, so they gain nothing.
>
> For example, in a block-chain with a 5 seconds block-rate, such as in 
> NimbleCoin <http://nimbleCoin.org>, each block can be as large as 200 
> Kbytes (100 tps are allowed). A miner will require the block template 
> to be ready as fast as possible, say before 3 seconds, so as not to 
> loose more than 60% of the times the transaction fees present in the 
> block template. This means that a pool admin serving 1000 clients must 
> have a upload bandwidth of at least 60 Mbytes/sec, and load balance 
> servers, because all miners will demand the block template at the same 
> time and will compete for it.
>
> The same miner, working solo, will not loose the 60% of block fees. If 
> block fees are 10% of block reward, then solo miners earn 6% more than 
> pool miners. Also, having a block rate of 5 seconds allows solo miners 
> to receive payments more often and so it reduces the payment variance.
>
> This method to discourage mining pools only work as long as time is 
> takes to transmit a block is comparable to the block interval time, 
> e.g. 20%. This seems not to be a problem since if the cryptocurrency 
> becomes popular, then we can expect blocks to be near full, while if 
> is is not, then nobody will care about mining pools.
>
> For this method to work for Bitcoin, Bitcoin should reduce the block 
> rate to at least 1 minute, and keep blocks of at least 10 Mbytes. Or 
> go the NimbleCoin way, and reduce the block interval to 5 seconds. The 
> sole reduction of the block rate from 10 minutes to 5 seconds would 
> reduce notably the mining reward variance, which is the main reason 
> miners don't mine solo.
>
> BitcoinBlockPow
>
> The basic BlockPoW is incompatible with Bitcoin ASICs as is but it can 
> be made partially compatible with some tweaks: The value b is replaced 
> by a a a subset or an integrity check of the block.
>
> Using a subset:
>
> First the hashMerkleRoot and hashPrevBlock fields are replaced by the 
> fields: ChildBlock (32 bytes) and ScatteredBlockBytes (32 bytes). 
> ChildBlock is the hash of a message with stores the old hashMerkleRoot 
> and hashPrevBlock. ScatteredBlockBytes is a pseudo-random subset of 
> bytes taken from the block template being mined. The seed for the 
> pseudo-random function that selects the subset is  the hashMerkleRoot 
> plus the block time. When a miner scans all the 32bit nonce space, 
> then a new hashMerkleRoot must be created to increase the extra-nonce 
> field or the time must be updated. When this happens, a new subset of 
> pseudo-random 32 block bytes must be collected. If the miner only 
> stores 10% of the block template (e.g. 100 Kbytes instead of 1 Mbyte), 
> then the probability he can build the ScatteredBlockBytes by 
> brute-forcing the seed is 10^-32. If the miner performs 100 GH/sec, 
> then the 32-bit nonce will overflow every 20 msec and the miner could 
> request the ScatteredBlockBytes from the pool admin using a bandwidth 
> of 1 Kbyte/s. A pool hosting 6 PH/sec (such as Eligious, which has 8%) 
> would need to stream more than 60 Mb/s of ScatteredBlockBytes fields. 
> A mining pool having 50% would need to stream 500 Mb/s, which is quite 
> challenging. So miners will download the block normally, and become 
> active part of the network.
>
> Using an integrity check:
>
> ScatteredBlockBytes  is replaced by a field BlockHash defined as H( 
> full-block-with-zero-nonce ). Obviously the header must be at the 
> beginning of the block to force the re-hash.
>
> Best regards,
>  Sergio.
>
>
>
> ------------------------------------------------------------------------------
> HPCC Systems Open Source Big Data Platform from LexisNexis Risk Solutions
> Find What Matters Most in Your Big Data with HPCC Systems
> Open Source. Fast. Scalable. Simple. Ideal for Dirty Data.
> Leverages Graph Analysis for Fast Processing & Easy Data Exploration
> http://p.sf.net/sfu/hpccsystems
>
>
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
Why do you want to punish pools?


-- 
Kevin

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140619/47807d7c/attachment.html>

From mark at monetize.io  Thu Jun 19 17:17:50 2014
From: mark at monetize.io (Mark Friedenbach)
Date: Thu, 19 Jun 2014 10:17:50 -0700
Subject: [Bitcoin-development] BlockPow: A Practical Proposal to prevent
 mining pools AND reduce payoff variance:
In-Reply-To: <53A316BE.5040508@certimix.com>
References: <53A316BE.5040508@certimix.com>
Message-ID: <53A31B3E.7020906@monetize.io>

Sergio, why is preventing mining pools a good thing? The issue is not
mining pools, which provide a needed service in greatly reducing
variance beyond what any proposal like this can do.

The issue is centralized transaction selection policies, which is
entirely orthogonal. And the solution already exists: getblocktemplate.
We just need more or better infrastructure which makes use of this
technology to perform local transaction selection.

If you have a proposal for eliminating hosted mining while keeping
variance-reducing pools, that would be an interesting read.

On 06/19/2014 09:58 AM, Sergio Lerner wrote:
> I propose a setting that prevent mining pools AND reduce payoff variance
> which requires two changes: increasing the block-rate and changing the
> Bitcoin PoW (but still allowing current Bitcoin ASICs to work (as far as
> I know)). The block rate must be increased at least 20 times and block
> must still be near full (e.g. there must be at least 20 more
> transactions/second than there is today)
> 
> BlockPow is kind of PoW that only practically prevents mining pools for
> certain cryptocurrency settings based on concepts similar to parmacoin,
> but in a much simple degree. The idea is that if miners try to join a
> pool, then they incur in overhead of transmitting information and earn
> less than working solo. Let b (the payload) contain a full block. b must
> contain all the transactions and the header, and not only the
> transaction hashes. b should not hide anything. Let h be the block
> header (which contains the previous block hash and the Merkle tree root
> of the transactions). Let d be the difficulty. hash-block-length(b)
> returns the number of blocks processed by the hash function when fed
> with the block b. The target is divided by hash-block-length(b) so that
> the difficulty does not depend on the length of the block. Some other
> function can be used to encourage nodes to add more or less transactions.
> 
> Def: Basic BlockPoW concept
> 
> For each r in the nonce-range: if H ( H( r || b ) || h || r) ) < 2^-d/
> hash-block-length(b) then return r
> 
> return null
> 
> The header (h) is appended to the hashed message to allow SPV clients to
> verify the PoW without requiring the full block to be downloaded. Peers
> can send only (x,r,h) to SPV nodes, where x = H( r || b ), so they can
> verify the PoW. The verification procedure is obvious, and is skipped
> here. r is inserted at the beginning of the message to prevent pool
> administrators from keeping a secret mid-state of the hash function
> secret in order to prevent block stealing and also to force the miner to
> know b in the inner mining loop.
> 
> So now mining requires the knowledge of the block b to be mined, and b
> must be received at each block-chain epoch. This could create an
> incentive not to include any transaction and use an almost empty b,
> because that way the bandwidth requirements is decreased. But this
> incentive should not exists normally, since by including transactions
> the solo miner gets an additional revenue from fees, which is lost if
> the block is empty. Anyway, to prevent this possible incentive we can
> append to b a subset of previous blocks (e.g 100 blocks). The block
> subset to include could be derived from a peudo-random function seeded
> by the previous block hash. Then a node would still need to download
> part or all the block-chain in order to mine.
> 
> Now if the miner wants to be a dumb node and take part of a pool, then
> the current working unsolved block (the template) must be sent each time
> from the pool admin to each miner. If the pool admin hosts 1000 miners,
> then to serve them with fresh block templates he needs 1000 times more
> bandwidth that the miners, making this much more expensive. If miners
> create another network topology to distribute templates, they are
> incurring in the same overhead as being actively part of the
> cryptocurrency network, so they gain nothing.
> 
> For example, in a block-chain with a 5 seconds block-rate, such as in
> NimbleCoin <http://nimbleCoin.org>, each block can be as large as 200
> Kbytes (100 tps are allowed). A miner will require the block template to
> be ready as fast as possible, say before 3 seconds, so as not to loose
> more than 60% of the times the transaction fees present in the block
> template. This means that a pool admin serving 1000 clients must have a
> upload bandwidth of at least 60 Mbytes/sec, and load balance servers,
> because all miners will demand the block template at the same time and
> will compete for it.
> 
> The same miner, working solo, will not loose the 60% of block fees. If
> block fees are 10% of block reward, then solo miners earn 6% more than
> pool miners. Also, having a block rate of 5 seconds allows solo miners
> to receive payments more often and so it reduces the payment variance.
> 
> This method to discourage mining pools only work as long as time is
> takes to transmit a block is comparable to the block interval time, e.g.
> 20%. This seems not to be a problem since if the cryptocurrency becomes
> popular, then we can expect blocks to be near full, while if is is not,
> then nobody will care about mining pools.
> 
> For this method to work for Bitcoin, Bitcoin should reduce the block
> rate to at least 1 minute, and keep blocks of at least 10 Mbytes. Or go
> the NimbleCoin way, and reduce the block interval to 5 seconds. The sole
> reduction of the block rate from 10 minutes to 5 seconds would reduce
> notably the mining reward variance, which is the main reason miners
> don't mine solo.
> 
> BitcoinBlockPow
> 
> The basic BlockPoW is incompatible with Bitcoin ASICs as is but it can
> be made partially compatible with some tweaks: The value b is replaced
> by a a a subset or an integrity check of the block.
> 
> Using a subset:
> 
> First the hashMerkleRoot and hashPrevBlock fields are replaced by the
> fields: ChildBlock (32 bytes) and ScatteredBlockBytes (32 bytes).
> ChildBlock is the hash of a message with stores the old hashMerkleRoot
> and hashPrevBlock. ScatteredBlockBytes is a pseudo-random subset of
> bytes taken from the block template being mined. The seed for the
> pseudo-random function that selects the subset is  the hashMerkleRoot
> plus the block time. When a miner scans all the 32bit nonce space, then
> a new hashMerkleRoot must be created to increase the extra-nonce field
> or the time must be updated. When this happens, a new subset of
> pseudo-random 32 block bytes must be collected. If the miner only stores
> 10% of the block template (e.g. 100 Kbytes instead of 1 Mbyte), then the
> probability he can build the ScatteredBlockBytes by brute-forcing the
> seed is 10^-32. If the miner performs 100 GH/sec, then the 32-bit nonce
> will overflow every 20 msec and the miner could request the
> ScatteredBlockBytes from the pool admin using a bandwidth of 1 Kbyte/s.
> A pool hosting 6 PH/sec (such as Eligious, which has 8%) would need to
> stream more than 60 Mb/s of ScatteredBlockBytes fields. A mining pool
> having 50% would need to stream 500 Mb/s, which is quite challenging. So
> miners will download the block normally, and become active part of the
> network.
> 
> Using an integrity check:
> 
> ScatteredBlockBytes  is replaced by a field BlockHash defined as H(
> full-block-with-zero-nonce ). Obviously the header must be at the
> beginning of the block to force the re-hash.
> 
> Best regards,
>  Sergio.
> 
> 
> 
> ------------------------------------------------------------------------------
> HPCC Systems Open Source Big Data Platform from LexisNexis Risk Solutions
> Find What Matters Most in Your Big Data with HPCC Systems
> Open Source. Fast. Scalable. Simple. Ideal for Dirty Data.
> Leverages Graph Analysis for Fast Processing & Easy Data Exploration
> http://p.sf.net/sfu/hpccsystems
> 
> 
> 
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 



From mike at plan99.net  Thu Jun 19 17:35:15 2014
From: mike at plan99.net (Mike Hearn)
Date: Thu, 19 Jun 2014 19:35:15 +0200
Subject: [Bitcoin-development] BlockPow: A Practical Proposal to prevent
 mining pools AND reduce payoff variance:
In-Reply-To: <53A31B3E.7020906@monetize.io>
References: <53A316BE.5040508@certimix.com>
	<53A31B3E.7020906@monetize.io>
Message-ID: <CANEZrP2Lq-28NuvOJR_rS3N2TZsy13xrKubcfPBrMbP7WArcKw@mail.gmail.com>

>
> The issue is centralized transaction selection policies, which is
> entirely orthogonal. And the solution already exists: getblocktemplate.


My (fresh!) understanding is that the reason we don't see people using
getblocktemplate to decentralise pools is because libblkmaker and other
implementations don't actually support connecting your own node to the
miners and choosing your own blocks, even though the protocol does.

I've written up a blog post that I hope will go out on the Foundation blog
soon with some low hanging fruity ideas for miner decentralisation.

Sergio, I'd love to give you intelligent feedback but unfortunately reading
it made my brain explode :) Sorry!
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140619/c6dcb3bb/attachment.html>

From drice at greenmangosystems.com  Thu Jun 19 17:36:36 2014
From: drice at greenmangosystems.com (Daniel Rice)
Date: Thu, 19 Jun 2014 10:36:36 -0700
Subject: [Bitcoin-development] instant confirmation via payment protocol
 backwards compatible proto buffer extension
In-Reply-To: <CANEZrP3AKLNZmt0YqNNp3-7uVAkaT4oM4GUfN4bPTqxycpq8zg@mail.gmail.com>
References: <CAKrJrGOBSiY5V59eko6g796j3wh9V9ZLjPbyHeS5=zyX6j3Wdw@mail.gmail.com>
	<lnhgsk$va6$1@ger.gmane.org>
	<loom.20140615T111027-736@post.gmane.org>
	<lnk4ii$ehf$1@ger.gmane.org>
	<loom.20140618T140509-802@post.gmane.org>
	<CANEZrP0ekAHNOHha_8ncu_QKVCidBQndw2x0+5rciD92LdOS7A@mail.gmail.com>
	<CAFDyEXhY-KxM6dN0ngXiiB4ga85tD6e4gW6QVpST5XxJARLicw@mail.gmail.com>
	<CANEZrP3AKLNZmt0YqNNp3-7uVAkaT4oM4GUfN4bPTqxycpq8zg@mail.gmail.com>
Message-ID: <CAFDyEXiS75rkMY0jQLHSDptpT5YTLACyPfO519KjgNtOe6G=nA@mail.gmail.com>

> Supporting it in the protocol is easy. Building such a thing: that's
hard. Decentralised automated reputation systems are complex and subtle.

Bitcoin is valuable as a protocol because it is truly decentralized. The
complexity involved in building this system was expansive, but I think we
can all agree it was worth the trouble. With this particular topic of
instant transactions it seems we have to be very careful about pushing
Bitcoin in a centralized direction for the sake of a simple quick solution.
Building an automated system to solve the instant transaction problem will
be difficult, but also well worth the effort, and exactly like you're
saying Mike, I just want to make sure the door is left open protocol wise
for a robust solution in the future.


On Wed, Jun 18, 2014 at 9:09 AM, Mike Hearn <mike at plan99.net> wrote:

> I think that's true if you assume that the instant provider list is based
>> on a by hand created list of accepted instant providers. That's how VISA
>> works now and that's why I was asking for an approach where the
>> trusted_instant_providers list is scalable because that seems very
>> dangerous.
>>
>
> Supporting it in the protocol is easy. Building such a thing: that's hard.
> Decentralised automated reputation systems are complex and subtle.
>
> I don't feel strongly about whether the field should be "optional" or
> "repeated", 100% of implementations in the forseeable future would just
> look at the first item and ignore the rest. But if later someone did crack
> this problem it would lead to a simple upgrade path. So perhaps you're
> right and the protobuf should allow multiple signatures. It means a new
> sub-message to wrap the pki_type, pki_data and signature fields into one,
> and then making that repeated.
>
> Up to Lawrence.
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140619/29c44805/attachment.html>

From justusranvier at gmail.com  Thu Jun 19 17:37:13 2014
From: justusranvier at gmail.com (Justus Ranvier)
Date: Thu, 19 Jun 2014 17:37:13 +0000
Subject: [Bitcoin-development] BlockPow: A Practical Proposal to prevent
 mining pools AND reduce payoff variance:
In-Reply-To: <53A319D0.9080309@gmail.com>
References: <53A316BE.5040508@certimix.com> <53A319D0.9080309@gmail.com>
Message-ID: <53A31FC9.4090307@gmail.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On 06/19/2014 05:11 PM, Kevin wrote:
> Why do you want to punish pools?

It's part of a general trend wherein people look at all the things
that can be accomplished in an economy that has a division of labor*,
and see some misbehavior at the edges, and decide that rather than
fixing the misbehavior we should throw out the entire concept of labor
specialization.

Hating on labor specialization as a concept, rather than simply
finding solutions for specialist misbehavior, was the basis for scrypt
mining, PoS, and MaidSafe.


(*) http://www.econlib.org/library/Essays/rdPncl1.html

- -- 
Support online privacy by using email encryption whenever possible.
Learn how here: http://www.youtube.com/watch?v=bakOKJFtB-k
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2.0.22 (GNU/Linux)

iQEcBAEBAgAGBQJTox/JAAoJEMP3uyY4RQ216F0IAKo26MEK/IrIlHMw4UYsWBWK
LWWLe4mfUb+I74ZHPzC2ZE7u6Lf6vAeeG/mLe8K/ls1qBJk9ae7bsA+DVvRn8LfW
Ir/seYtCCnLpxhHGbVtYOeWaS+WyOWMKBz1moOTJcgWwPPiL5BLk9SvaLqgy2GDV
fJeniqtkZ96Vzif1DNdQtiLfn9aJRL2Er0EO7VL4ojmaM3Bv6Z6l+e0eLVVh8DKe
u1Sp4UOpqJmVHJq+9EeMhdfmOqNWGUA5wFRiDsWfzUDHLkAlISM+sFFSD0CzO0RK
P5whGxo58bSMigbQYOfoTZqgKQefQeXAqtlnrLOLq9/EOZ/34cJET5Z0S/K/F5E=
=3KMH
-----END PGP SIGNATURE-----
-------------- next part --------------
A non-text attachment was scrubbed...
Name: 0x38450DB5.asc
Type: application/pgp-keys
Size: 12464 bytes
Desc: not available
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140619/3a80b41e/attachment.bin>

From mark at monetize.io  Thu Jun 19 20:39:13 2014
From: mark at monetize.io (Mark Friedenbach)
Date: Thu, 19 Jun 2014 13:39:13 -0700
Subject: [Bitcoin-development] BlockPow: A Practical Proposal to prevent
 mining pools AND reduce payoff variance:
In-Reply-To: <CAJna-HgNnwARH2AN_LJ1LFkrWL5n4X4Lo-koW0WdOWw1RUiGJA@mail.gmail.com>
References: <53A316BE.5040508@certimix.com> <53A31B3E.7020906@monetize.io>
	<CANEZrP2Lq-28NuvOJR_rS3N2TZsy13xrKubcfPBrMbP7WArcKw@mail.gmail.com>
	<CAJna-HgNnwARH2AN_LJ1LFkrWL5n4X4Lo-koW0WdOWw1RUiGJA@mail.gmail.com>
Message-ID: <53A34A71.2090106@monetize.io>

Do you need to do full validation? There's an economic cost to mining
invalid blocks, and even if that were acceptable there's really no
reason to perform such an attack. The result would be similar to a block
withholding attack, but unlike block withholding it would be trivially
detectable if/when full validation was performed.

To protect yourself and to detect incorrect mining software you could
stochastically validate a randomly selected sample of shares, as your
hardware requirements allow.

On 06/19/2014 01:26 PM, slush wrote:
> With GBT, simply hashing the block header is not enough, because pool
> cannot rely on anything provided by the client. Its not only about
> things like withdrawal attacks, but more about hidden bugs in various
> miners. It is extremely hard to do full validation for *every* of
> submitted shares.



From slush at centrum.cz  Thu Jun 19 20:26:41 2014
From: slush at centrum.cz (slush)
Date: Thu, 19 Jun 2014 22:26:41 +0200
Subject: [Bitcoin-development] BlockPow: A Practical Proposal to prevent
 mining pools AND reduce payoff variance:
In-Reply-To: <CANEZrP2Lq-28NuvOJR_rS3N2TZsy13xrKubcfPBrMbP7WArcKw@mail.gmail.com>
References: <53A316BE.5040508@certimix.com> <53A31B3E.7020906@monetize.io>
	<CANEZrP2Lq-28NuvOJR_rS3N2TZsy13xrKubcfPBrMbP7WArcKw@mail.gmail.com>
Message-ID: <CAJna-HgNnwARH2AN_LJ1LFkrWL5n4X4Lo-koW0WdOWw1RUiGJA@mail.gmail.com>

On Thu, Jun 19, 2014 at 7:35 PM, Mike Hearn <mike at plan99.net> wrote:
>
> My (fresh!) understanding is that the reason we don't see people using
> getblocktemplate to decentralise pools is because libblkmaker and other
> implementations don't actually support connecting your own node to the
> miners and choosing your own blocks, even though the protocol does.
>
>
Well, I don't want to start flamewar (and this topic has potential!), but
the *real* reason why there isn't such infrastructure is that although GBT
as a protocol *does* support of decentralized building of blocks, it is
*extremely* resource consuming to validate these shares on pool side.

With GBT, simply hashing the block header is not enough, because pool
cannot rely on anything provided by the client. Its not only about things
like withdrawal attacks, but more about hidden bugs in various miners. It
is extremely hard to do full validation for *every* of submitted shares.

Although I see benefits of GBT and I see limits of Stratum, I don't think
that supporting full GBT validation have economic sense for any medium
sized pool, because such pool would need multiply his running costs on
servers many times.

> It's part of a general trend wherein people look at all the things
that can be accomplished in an economy that has a division of labor*,
and see some misbehavior at the edges, and decide that rather than
fixing the misbehavior we should throw out the entire concept of labor
specialization.

Well written! This reminds me - what about Stratum + SPV validation on
miner side?

With SPV, miner cannot choose his own transactions, so it is not fully
decentralized, but at least miner can detect (in real time) two major pool
misbehaviours - selfish mining (building private blockchain) and chain
forking (not working on longest known blockchain).

I read such proposal about Stratum + SPV on reddit and I actually like it;
It removes major drawbacks of "centralized" Stratum mining, yet is gives
tools to miners to instantly switch to fallback pool when something wrong
is happening.

slush
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140619/85314caf/attachment.html>

From slush at centrum.cz  Thu Jun 19 20:55:48 2014
From: slush at centrum.cz (slush)
Date: Thu, 19 Jun 2014 22:55:48 +0200
Subject: [Bitcoin-development] BlockPow: A Practical Proposal to prevent
 mining pools AND reduce payoff variance:
In-Reply-To: <53A34A71.2090106@monetize.io>
References: <53A316BE.5040508@certimix.com> <53A31B3E.7020906@monetize.io>
	<CANEZrP2Lq-28NuvOJR_rS3N2TZsy13xrKubcfPBrMbP7WArcKw@mail.gmail.com>
	<CAJna-HgNnwARH2AN_LJ1LFkrWL5n4X4Lo-koW0WdOWw1RUiGJA@mail.gmail.com>
	<53A34A71.2090106@monetize.io>
Message-ID: <CAJna-HgP=RvbFpkdwqkoNP0fmMg6r80zDKrA-Cb2mcbmyjOTEA@mail.gmail.com>

Miner issues are just one thing what came to my mind. What about validating
transactions? How the pool can be sure that miner is running up to date
bitcoind which do full validation of transactions? Not talking that if
every miner takes his own set of transaction, pool need to calculate merkle
root for every submit, to check its correctness.

I don't think it *cannot* be done, it is just extremely hard and there's no
economic motivation for such complication on pool side. Just see current
pools, they are full of security and stability bugs even while using such
trivial protocol like Stratum...

slush

On Thu, Jun 19, 2014 at 10:39 PM, Mark Friedenbach <mark at monetize.io> wrote:

> Do you need to do full validation? There's an economic cost to mining
> invalid blocks, and even if that were acceptable there's really no
> reason to perform such an attack. The result would be similar to a block
> withholding attack, but unlike block withholding it would be trivially
> detectable if/when full validation was performed.
>
> To protect yourself and to detect incorrect mining software you could
> stochastically validate a randomly selected sample of shares, as your
> hardware requirements allow.
>
> On 06/19/2014 01:26 PM, slush wrote:
> > With GBT, simply hashing the block header is not enough, because pool
> > cannot rely on anything provided by the client. Its not only about
> > things like withdrawal attacks, but more about hidden bugs in various
> > miners. It is extremely hard to do full validation for *every* of
> > submitted shares.
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140619/75de20af/attachment.html>

From mark at monetize.io  Thu Jun 19 21:07:17 2014
From: mark at monetize.io (Mark Friedenbach)
Date: Thu, 19 Jun 2014 14:07:17 -0700
Subject: [Bitcoin-development] BlockPow: A Practical Proposal to prevent
 mining pools AND reduce payoff variance:
In-Reply-To: <CAJna-HgP=RvbFpkdwqkoNP0fmMg6r80zDKrA-Cb2mcbmyjOTEA@mail.gmail.com>
References: <53A316BE.5040508@certimix.com> <53A31B3E.7020906@monetize.io>
	<CANEZrP2Lq-28NuvOJR_rS3N2TZsy13xrKubcfPBrMbP7WArcKw@mail.gmail.com>
	<CAJna-HgNnwARH2AN_LJ1LFkrWL5n4X4Lo-koW0WdOWw1RUiGJA@mail.gmail.com>
	<53A34A71.2090106@monetize.io>
	<CAJna-HgP=RvbFpkdwqkoNP0fmMg6r80zDKrA-Cb2mcbmyjOTEA@mail.gmail.com>
Message-ID: <53A35105.3070509@monetize.io>

It's not the pool operator's business what software the miner is running
to select transactions for his block, so long as the miner follows the
template and doesn't generate invalid blocks. We already discussed
invalid blocks, and checking the template requires parsing the coinbase
transaction and verifying the merkleroot. The most expensive operations
are the hashes in the merkleroot verification, but you have to do that
in stratum too because of the extranonce, right?

On 06/19/2014 01:55 PM, slush wrote:
> Miner issues are just one thing what came to my mind. What about
> validating transactions? How the pool can be sure that miner is running
> up to date bitcoind which do full validation of transactions? Not
> talking that if every miner takes his own set of transaction, pool need
> to calculate merkle root for every submit, to check its correctness.



From pete at petertodd.org  Fri Jun 20 00:45:29 2014
From: pete at petertodd.org (Peter Todd)
Date: Thu, 19 Jun 2014 20:45:29 -0400
Subject: [Bitcoin-development] Proposal: relax the IsStandard rules for
 P2SH transactions
In-Reply-To: <CABsx9T1uC9sMzbPJa4MGpBNoQ4S255Tfo66+wwCoND_bQtvT7Q@mail.gmail.com>
References: <CABsx9T2+_tLOPELm+K54D=6SNkHg1ZeO_T1jSM=CQZYJKGODFw@mail.gmail.com>
	<20140618001503.GA8360@savin>
	<CABsx9T2O42pER0b1v9oeU14_K=KVWVqHzcfFmWAhSxoYAn12vg@mail.gmail.com>
	<20140619100909.GA3544@savin>
	<CABsx9T1uC9sMzbPJa4MGpBNoQ4S255Tfo66+wwCoND_bQtvT7Q@mail.gmail.com>
Message-ID: <20140620004529.GE18072@savin>

On Thu, Jun 19, 2014 at 09:54:31AM -0400, Gavin Andresen wrote:
> RE: soft-forks bumping version numbers:
> 
> Yes, we have consensus that is the way we will do it.  I should probably
> turn https://gist.github.com/gavinandresen/2355445 into an informational
> BIP.

Sounds like it could turn EvalScript() into a mess over time, but that's
a long way away. Anyway a BIP will be useful.

> RE: malleability:
> 
> Orthogonal (but related) issue to IsStandard.
> 
> Detecting Scripts that leave extra items on the stack will be done in a
> different part of the code than the code addressed by this pull reques. No
> need to execute the Script twice to figure out if it leaves extra stuff,
> and the idea behind IsStandard is to get to a quick yes/no before running a
> potentially expensive Script execution.

Yeah, that's what I implemented in https://github.com/bitcoin/bitcoin/pull/4311

-- 
'peter'[:-1]@petertodd.org
00000000000000004f73d48c972aa30493526191aa009f95e4a71dcfbdca08b2
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 685 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140619/740bd5f2/attachment.sig>

From pieter.wuille at gmail.com  Sat Jun 21 15:14:15 2014
From: pieter.wuille at gmail.com (Pieter Wuille)
Date: Sat, 21 Jun 2014 17:14:15 +0200
Subject: [Bitcoin-development] Bitcoin miner heads-up: "getwork" RPC
	going away
In-Reply-To: <CA+s+GJDQJk_37EruYkc41YfAgA__ntubwKVGM=15K03LRE+6tQ@mail.gmail.com>
References: <CAJHLa0OW9TeJrh6J8mAnx8Zy0i+AoF_1Mrp0Wn+5kZGex3_uJg@mail.gmail.com>
	<CA+s+GJDQJk_37EruYkc41YfAgA__ntubwKVGM=15K03LRE+6tQ@mail.gmail.com>
Message-ID: <CAPg+sBjDjA3+1GbBCEKx+vgjmJr1mHUiw3uZO6_DtwKL4RLTMg@mail.gmail.com>

On Sat, Jun 7, 2014 at 10:29 AM, Wladimir <laanwj at gmail.com> wrote:
> On Sat, Jun 7, 2014 at 3:55 AM, Jeff Garzik <jgarzik at bitpay.com> wrote:
>> As such, it is planned to remove "getwork" in the next release.  Most
>> if not all pool servers have switched away from "getwork" years ago.
>
> To be clear, they switched to "getblocktemplate" and "submitblock"
> which provides a much more flexible and scalable way to do mining.
> This is explained in https://en.bitcoin.it/wiki/Getblocktemplate .

As there doesn't seem to be any objection, we may go ahead and merge
https://github.com/bitcoin/bitcoin/pull/4100 (which among other things
removes the getwork RPC).

-- 
Pieter



From jtimon at monetize.io  Mon Jun 23 09:50:00 2014
From: jtimon at monetize.io (=?UTF-8?B?Sm9yZ2UgVGltw7Nu?=)
Date: Mon, 23 Jun 2014 11:50:00 +0200
Subject: [Bitcoin-development] Plans to separate wallet from core
Message-ID: <CAC1+kJNjcPkaHiR8mzofwXE4+4UX5nmxX5Q3rZv37v-K40p1Tw@mail.gmail.com>

I know there are plans to separate the wallet from the core code and I
think it's a great idea that will result in cleaner and more modular
software.
But it seems like my assumptions on how this would be done may be incorrect.

I was assuming that the wallet would consume data from a trusted
bitcoind core node using rpc or a better interface like an http rest
api (see PR #2844).
So the core would take care of the hard consensus stuff, and the
wallet would maintain its own database with private keys, addresses,
balances, etc. and would consume some data contained in bitcoind's
database.
I also assumed that the interface between wallet and core would
include queries to the UTXO (see PR #4351) and maybe TXO (see PR
#3652) for getting the historic balances.

As said, I'm not sure these assumptions are true anymore so I ask.
Is this the plan?
Is the plan that the wallet will use the p2p directly and maintain its
own chain database?

Well, it's something that generally interests me so if anyone can
detail the steps for separating the wallet a little bit, maybe I can
help with some of the steps.

Maybe there's no roadway yet. In that case I would like to advance
that discussion in this thread.

-- 
Jorge Tim?n



From laanwj at gmail.com  Mon Jun 23 10:32:50 2014
From: laanwj at gmail.com (Wladimir)
Date: Mon, 23 Jun 2014 12:32:50 +0200
Subject: [Bitcoin-development] Plans to separate wallet from core
In-Reply-To: <CAC1+kJNjcPkaHiR8mzofwXE4+4UX5nmxX5Q3rZv37v-K40p1Tw@mail.gmail.com>
References: <CAC1+kJNjcPkaHiR8mzofwXE4+4UX5nmxX5Q3rZv37v-K40p1Tw@mail.gmail.com>
Message-ID: <CA+s+GJDVBQVu8yH9jLu_rQmk=dsJuMUctT-iK0zzOJRYgE8k9w@mail.gmail.com>

On Mon, Jun 23, 2014 at 11:50 AM, Jorge Tim?n <jtimon at monetize.io> wrote:
> I know there are plans to separate the wallet from the core code and I
> think it's a great idea that will result in cleaner and more modular
> software.
> But it seems like my assumptions on how this would be done may be incorrect.
>
> I was assuming that the wallet would consume data from a trusted
> bitcoind core node using rpc or a better interface like an http rest
> api (see PR #2844).

It's least surprising if the wallet works as a SPV client by default.
Then, users can use it without first setting up a core. Thus the idea
would be to use P2P primarily.

There could be a mode to use a trusted core by RPC for
mempool/conflicted transaction validation and such. But I'm not sure
about this - as we've seen, pure-SPV wallets work pretty well. If you
want it to act as an edge router you can point a SPV wallet at your
trusted core as well.

There are no plans for adding Electrum-like functionality to bitcoind.
There is already Electrum. Let's not reinvent any wheels.

> So the core would take care of the hard consensus stuff, and the
> wallet would maintain its own database with private keys, addresses,
> balances, etc. and would consume some data contained in bitcoind's
> database.

Right, the wallet would keep track of those.

> I also assumed that the interface between wallet and core would
> include queries to the UTXO (see PR #4351) and maybe TXO (see PR
> #3652) for getting the historic balances.
>
> As said, I'm not sure these assumptions are true anymore so I ask.
> Is this the plan?
> Is the plan that the wallet will use the p2p directly and maintain its
> own chain database?

It does not need to keep a full chain database. But it needs its own
record of the chain, headers-only + what concerns the keys in the
wallet.

Wladimir



From jtimon at monetize.io  Mon Jun 23 20:15:19 2014
From: jtimon at monetize.io (=?UTF-8?B?Sm9yZ2UgVGltw7Nu?=)
Date: Mon, 23 Jun 2014 22:15:19 +0200
Subject: [Bitcoin-development] Plans to separate wallet from core
In-Reply-To: <CA+s+GJDVBQVu8yH9jLu_rQmk=dsJuMUctT-iK0zzOJRYgE8k9w@mail.gmail.com>
References: <CAC1+kJNjcPkaHiR8mzofwXE4+4UX5nmxX5Q3rZv37v-K40p1Tw@mail.gmail.com>
	<CA+s+GJDVBQVu8yH9jLu_rQmk=dsJuMUctT-iK0zzOJRYgE8k9w@mail.gmail.com>
Message-ID: <CAC1+kJOQ2uBo2peYKZJyPSQL6qzk6Yu-cF-tPs3GzVS6cAc53w@mail.gmail.com>

On 6/23/14, Wladimir <laanwj at gmail.com> wrote:
> It's least surprising if the wallet works as a SPV client by default.
> Then, users can use it without first setting up a core. Thus the idea
> would be to use P2P primarily.

So first bitcoind will support SPV mode then we separate the wallet?
Are the core and the wallet share any code (say, the p2p messages via
a sub-repo or something)?

> There could be a mode to use a trusted core by RPC for
> mempool/conflicted transaction validation and such. But I'm not sure
> about this - as we've seen, pure-SPV wallets work pretty well. If you
> want it to act as an edge router you can point a SPV wallet at your
> trusted core as well.

I thought we would first separate wallet from core (maintaining the
full-node wallet status) and then implement an optional SPV mode for
the core (and transitively for "qt-wallet", which would support both
full and SPV mode).

> There are no plans for adding Electrum-like functionality to bitcoind.
> There is already Electrum. Let's not reinvent any wheels.

I'm sorry, but I still don't know what Electrum has to do with all this.
Bitcoin companies often like to interface with the network via
bitcoind nodes, what's wrong with their custom wallets consuming some
optional indexes from a bitcoind node their run themselves?
I'm not proposing a "bitcoind-client" similar to a electrum-client. I
thought it was assumed you where still going to run both the core and
the wallet and we just wanted to separate the code for better
modularity. Seriously, Mike also said something about Electrum too and
I'm really lost about what you people mean here.

> It does not need to keep a full chain database. But it needs its own
> record of the chain, headers-only + what concerns the keys in the
> wallet.

Why cannot consume that data from a bitcoind node that always run alongside it?

I still don't get the plan but it feels like it won't look as DRY as I
was expecting...



From laanwj at gmail.com  Tue Jun 24 09:07:16 2014
From: laanwj at gmail.com (Wladimir)
Date: Tue, 24 Jun 2014 11:07:16 +0200
Subject: [Bitcoin-development] Plans to separate wallet from core
In-Reply-To: <CAC1+kJOQ2uBo2peYKZJyPSQL6qzk6Yu-cF-tPs3GzVS6cAc53w@mail.gmail.com>
References: <CAC1+kJNjcPkaHiR8mzofwXE4+4UX5nmxX5Q3rZv37v-K40p1Tw@mail.gmail.com>
	<CA+s+GJDVBQVu8yH9jLu_rQmk=dsJuMUctT-iK0zzOJRYgE8k9w@mail.gmail.com>
	<CAC1+kJOQ2uBo2peYKZJyPSQL6qzk6Yu-cF-tPs3GzVS6cAc53w@mail.gmail.com>
Message-ID: <CA+s+GJBT9u+LMqTfrTwUQrGbnrqj2u==1kmx17uQyY8899O8sw@mail.gmail.com>

On Mon, Jun 23, 2014 at 10:15 PM, Jorge Tim?n <jtimon at monetize.io> wrote:
> On 6/23/14, Wladimir <laanwj at gmail.com> wrote:
>> It's least surprising if the wallet works as a SPV client by default.
>> Then, users can use it without first setting up a core. Thus the idea
>> would be to use P2P primarily.
>
> So first bitcoind will support SPV mode then we separate the wallet?
> Are the core and the wallet share any code (say, the p2p messages via
> a sub-repo or something)?

Yes, they will share code. At least the basic data structures and
serialization and deserialization. Probably also part of the network
code and utilities like argument parsing (although that's not a hard
requirement - it may be an opportunity to do things better).

So part of Bitcoin Core will have to be turned into a library or
libraries. Movement toward this is already in progress for a while.

>> There could be a mode to use a trusted core by RPC for
>> mempool/conflicted transaction validation and such. But I'm not sure
>> about this - as we've seen, pure-SPV wallets work pretty well. If you
>> want it to act as an edge router you can point a SPV wallet at your
>> trusted core as well.
>
> I thought we would first separate wallet from core (maintaining the
> full-node wallet status) and then implement an optional SPV mode for
> the core (and transitively for "qt-wallet", which would support both
> full and SPV mode).

We want to move away from "full node wallets". In the beginning it
made some sense to jump-start the network, but the more the chain
grows the less unwieldy they become.

My main argument for the split is that full nodes and wallets have
completely different usage scenarios:

- A wallet should be online as little as possible, ideally only when
you do transactions or want to check for them.

- A full node should be online 24/7 or it is virtually useless to the network.

>> There are no plans for adding Electrum-like functionality to bitcoind.
>> There is already Electrum. Let's not reinvent any wheels.
>
> I'm sorry, but I still don't know what Electrum has to do with all this.

I suggest you look at the interface for Electrum. It probably does
exactly what you expected the interface between the Bitcoin Core
wallet and Bitcoin Core to become. Electrum server keeps some extra
indices that can be queried by the wallets. It already exists!

But IMO this is a passed stage. SPV wallets w/ Bloom filtering can
work without any special servers, so why require a 'close binding' to
a trusted bitcoin core?

(As said - I'm fine with optional close binding to a core using RPC
with slight security benefits like utxo queries and conflicted
transaction checking, and to get the dynamic fee data, but it should
not be required)

>> It does not need to keep a full chain database. But it needs its own
>> record of the chain, headers-only + what concerns the keys in the
>> wallet.
>
> Why cannot consume that data from a bitcoind node that always run alongside it?

To not require having a bitcoind node always running alongside it.

Wladimir



From mike at plan99.net  Tue Jun 24 09:11:03 2014
From: mike at plan99.net (Mike Hearn)
Date: Tue, 24 Jun 2014 11:11:03 +0200
Subject: [Bitcoin-development] Plans to separate wallet from core
In-Reply-To: <CAC1+kJOQ2uBo2peYKZJyPSQL6qzk6Yu-cF-tPs3GzVS6cAc53w@mail.gmail.com>
References: <CAC1+kJNjcPkaHiR8mzofwXE4+4UX5nmxX5Q3rZv37v-K40p1Tw@mail.gmail.com>
	<CA+s+GJDVBQVu8yH9jLu_rQmk=dsJuMUctT-iK0zzOJRYgE8k9w@mail.gmail.com>
	<CAC1+kJOQ2uBo2peYKZJyPSQL6qzk6Yu-cF-tPs3GzVS6cAc53w@mail.gmail.com>
Message-ID: <CANEZrP1bNs4ahMzd7AfSH3P39Cx1rkmCkjnOMOM9T2Anr5wVOw@mail.gmail.com>

>
> So first bitcoind will support SPV mode then we separate the wallet?
> Are the core and the wallet share any code (say, the p2p messages via
> a sub-repo or something)?
>

bitcoind already supports SPV mode, that's how bitcoinj clients work.
However the current wallet code doesn't use it, it integrates directly with
the full mode main loop and doesn't talk P2P internally. Which is the fine
and obvious way to implement the wallet feature. I'm not totally convinced
it should become an SPV wallet given the complexity of doing that. But if
you did want to separate the wallet code from the full node then that'd be
the way to do it.

The question is; what does this buy us, and is it worth the potentially
huge amount of time it could take? My gut feeling is we have bigger fish to
fry. There's plenty of work to do just on the core consensus code, making
Bitcoin Core into a competitive wallet as well would be an additional
burden.

However I may be quite biased, as I am the maintainer of what is primarily
a wallet library :)


> I'm sorry, but I still don't know what Electrum has to do with all this.
>

People use Electrum as shorthand to mean "something a bit like the P2P
network, but with trusted remote servers which build additional databases
and thus support additional commands".
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140624/13998f76/attachment.html>

From laanwj at gmail.com  Tue Jun 24 09:40:41 2014
From: laanwj at gmail.com (Wladimir)
Date: Tue, 24 Jun 2014 11:40:41 +0200
Subject: [Bitcoin-development] Plans to separate wallet from core
In-Reply-To: <CANEZrP1bNs4ahMzd7AfSH3P39Cx1rkmCkjnOMOM9T2Anr5wVOw@mail.gmail.com>
References: <CAC1+kJNjcPkaHiR8mzofwXE4+4UX5nmxX5Q3rZv37v-K40p1Tw@mail.gmail.com>
	<CA+s+GJDVBQVu8yH9jLu_rQmk=dsJuMUctT-iK0zzOJRYgE8k9w@mail.gmail.com>
	<CAC1+kJOQ2uBo2peYKZJyPSQL6qzk6Yu-cF-tPs3GzVS6cAc53w@mail.gmail.com>
	<CANEZrP1bNs4ahMzd7AfSH3P39Cx1rkmCkjnOMOM9T2Anr5wVOw@mail.gmail.com>
Message-ID: <CA+s+GJDxLdKvtEE72B4biJ+1s3Yurm6ZHEaRi8H8nGMDo+vNiw@mail.gmail.com>

> The question is; what does this buy us, and is it worth the potentially huge
> amount of time it could take? My gut feeling is we have bigger fish to fry.
> There's plenty of work to do just on the core consensus code, making Bitcoin
> Core into a competitive wallet as well would be an additional burden.

I don't intend to work on that myself but that's up to the people that
want to contribute to that. Once it's a separate project it could
either be a big success, or it could slowly wither away. It can have a
release cycle separate from the node. Likely faster.

The organizational reason to split off the wallet is to get rid of
that responsibility (and code) from the bitcoind repo. Maintaining a
wallet should not be part of maintaining the core infrastructure. But
just deleting it would be unreasonable.

> However I may be quite biased, as I am the maintainer of what is primarily a wallet library :)

Hah. I've thought about that migration path as well.

>From my experience the main thing people are missing with BitcoinJ is
a quick and easy way to set up a wallet as a daemon, to use the
functionality from non-java through RPC.

But there are other interesting upcoming wallet projects as well, for
example CoinVault.

Wladimir



From laanwj at gmail.com  Tue Jun 24 09:44:01 2014
From: laanwj at gmail.com (Wladimir)
Date: Tue, 24 Jun 2014 11:44:01 +0200
Subject: [Bitcoin-development] Plans to separate wallet from core
In-Reply-To: <CA+s+GJBT9u+LMqTfrTwUQrGbnrqj2u==1kmx17uQyY8899O8sw@mail.gmail.com>
References: <CAC1+kJNjcPkaHiR8mzofwXE4+4UX5nmxX5Q3rZv37v-K40p1Tw@mail.gmail.com>
	<CA+s+GJDVBQVu8yH9jLu_rQmk=dsJuMUctT-iK0zzOJRYgE8k9w@mail.gmail.com>
	<CAC1+kJOQ2uBo2peYKZJyPSQL6qzk6Yu-cF-tPs3GzVS6cAc53w@mail.gmail.com>
	<CA+s+GJBT9u+LMqTfrTwUQrGbnrqj2u==1kmx17uQyY8899O8sw@mail.gmail.com>
Message-ID: <CA+s+GJBsrV2mjotM9==1M8Cm8EjoQ4Oh0BN3cdUOARryy2VwAA@mail.gmail.com>

> But IMO this is a passed stage. SPV wallets w/ Bloom filtering can
> work without any special servers, so why require a 'close binding' to
> a trusted bitcoin core?

To clarify (and not piss off ThomasV :-): I do not think the idea of
having servers with a reputation of their own is a passed stage. There
are many things that cannot be done at SPV level security with just
the P2P protocol yet. So having fewer but more trusted Electrum
servers is a reasonable compromise.

But for basic wallet functionality it isn't necessary.

Wladimir



From mike at plan99.net  Tue Jun 24 10:12:27 2014
From: mike at plan99.net (Mike Hearn)
Date: Tue, 24 Jun 2014 12:12:27 +0200
Subject: [Bitcoin-development] Plans to separate wallet from core
In-Reply-To: <CA+s+GJDxLdKvtEE72B4biJ+1s3Yurm6ZHEaRi8H8nGMDo+vNiw@mail.gmail.com>
References: <CAC1+kJNjcPkaHiR8mzofwXE4+4UX5nmxX5Q3rZv37v-K40p1Tw@mail.gmail.com>
	<CA+s+GJDVBQVu8yH9jLu_rQmk=dsJuMUctT-iK0zzOJRYgE8k9w@mail.gmail.com>
	<CAC1+kJOQ2uBo2peYKZJyPSQL6qzk6Yu-cF-tPs3GzVS6cAc53w@mail.gmail.com>
	<CANEZrP1bNs4ahMzd7AfSH3P39Cx1rkmCkjnOMOM9T2Anr5wVOw@mail.gmail.com>
	<CA+s+GJDxLdKvtEE72B4biJ+1s3Yurm6ZHEaRi8H8nGMDo+vNiw@mail.gmail.com>
Message-ID: <CANEZrP3hdJWhNN1qOge_Vcn1y_Xds_9cWB4g5aRDY3JLh8OVZg@mail.gmail.com>

>
> From my experience the main thing people are missing with BitcoinJ is
> a quick and easy way to set up a wallet as a daemon, to use the
> functionality from non-java through RPC.


Yes. I'd love to have a mostly Core compatible JSON-RPC frontend. Most of
my current users are happy using it as a library though. A lot of popular
languages can run directly on the JVM these days. The big ones we miss are
C++ and PHP, I think. But you can use JavaScript, Python 2.7, Lisp, Ruby,
along with other less well known ones.

The other good reason to have JSON-RPC support would be to reuse the Core
regression tests.

Anyway, this is off topic :)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140624/a7da15fc/attachment.html>

From jtimon at monetize.io  Tue Jun 24 11:29:28 2014
From: jtimon at monetize.io (=?UTF-8?B?Sm9yZ2UgVGltw7Nu?=)
Date: Tue, 24 Jun 2014 13:29:28 +0200
Subject: [Bitcoin-development] Plans to separate wallet from core
In-Reply-To: <CANEZrP1bNs4ahMzd7AfSH3P39Cx1rkmCkjnOMOM9T2Anr5wVOw@mail.gmail.com>
References: <CAC1+kJNjcPkaHiR8mzofwXE4+4UX5nmxX5Q3rZv37v-K40p1Tw@mail.gmail.com>
	<CA+s+GJDVBQVu8yH9jLu_rQmk=dsJuMUctT-iK0zzOJRYgE8k9w@mail.gmail.com>
	<CAC1+kJOQ2uBo2peYKZJyPSQL6qzk6Yu-cF-tPs3GzVS6cAc53w@mail.gmail.com>
	<CANEZrP1bNs4ahMzd7AfSH3P39Cx1rkmCkjnOMOM9T2Anr5wVOw@mail.gmail.com>
Message-ID: <CAC1+kJMn3p5H6A8GGiuF56d411zC4qsTomuy7A5e0+OQT78FGQ@mail.gmail.com>

On 6/24/14, Mike Hearn <mike at plan99.net> wrote:
> bitcoind already supports SPV mode, that's how bitcoinj clients work.
> However the current wallet code doesn't use it, it integrates directly with
> the full mode main loop and doesn't talk P2P internally. Which is the fine
> and obvious way to implement the wallet feature. I'm not totally convinced
> it should become an SPV wallet given the complexity of doing that. But if
> you did want to separate the wallet code from the full node then that'd be
> the way to do it.
>
> The question is; what does this buy us, and is it worth the potentially
> huge amount of time it could take? My gut feeling is we have bigger fish to
> fry. There's plenty of work to do just on the core consensus code, making
> Bitcoin Core into a competitive wallet as well would be an additional
> burden.

Exactly, this is part of my point, the qt-wallet does not support SPV
operation at this point, and that complex work should be done after
the wallet is separated. Thus the first version of the separated
wallet should be functionally equivalent to today's wallet, that is, a
full node wallet (even though I understand Wladimir's arguments
against full-node wallets).

>> I'm sorry, but I still don't know what Electrum has to do with all this.
>>
>
> People use Electrum as shorthand to mean "something a bit like the P2P
> network, but with trusted remote servers which build additional databases
> and thus support additional commands".

Ok, thanks. So a bitcoin core node which maintains and serves
additional indexes (say, an utxo index via rpc or something else) is
referred to as "an electrum" even though it doesn't use
electrum-server. Strange, but now I get it.

So in summary:

1) I accept the library approach over the "core-wallet protocol".

2) That doesn't necessarily mean that optionally maintaining
additional indexes in the core is not interesting for some use cases
(interesting for bitcoind, I don't care much if electrum-server
currently does this and more [with more dependencies]). Although
Pieter thinks that should also be separated into an "index node" too,
but I think that's another discussion.

3) The wallet doesn't currently operate as SPV and that work should be
done (if there's enough interest) only after the wallet is separated
from the core.



From laanwj at gmail.com  Tue Jun 24 11:58:58 2014
From: laanwj at gmail.com (Wladimir)
Date: Tue, 24 Jun 2014 13:58:58 +0200
Subject: [Bitcoin-development] Plans to separate wallet from core
In-Reply-To: <CAC1+kJMn3p5H6A8GGiuF56d411zC4qsTomuy7A5e0+OQT78FGQ@mail.gmail.com>
References: <CAC1+kJNjcPkaHiR8mzofwXE4+4UX5nmxX5Q3rZv37v-K40p1Tw@mail.gmail.com>
	<CA+s+GJDVBQVu8yH9jLu_rQmk=dsJuMUctT-iK0zzOJRYgE8k9w@mail.gmail.com>
	<CAC1+kJOQ2uBo2peYKZJyPSQL6qzk6Yu-cF-tPs3GzVS6cAc53w@mail.gmail.com>
	<CANEZrP1bNs4ahMzd7AfSH3P39Cx1rkmCkjnOMOM9T2Anr5wVOw@mail.gmail.com>
	<CAC1+kJMn3p5H6A8GGiuF56d411zC4qsTomuy7A5e0+OQT78FGQ@mail.gmail.com>
Message-ID: <CA+s+GJADNS6zy--sk3W3q21inuSB5jkkRku14vxLXDXKf=vkvw@mail.gmail.com>

On Tue, Jun 24, 2014 at 1:29 PM, Jorge Tim?n <jtimon at monetize.io> wrote:
> On 6/24/14, Mike Hearn <mike at plan99.net> wrote:
ou did want to separate the wallet code from the full node then that'd be
>> the way to do it.
>
> Exactly, this is part of my point, the qt-wallet does not support SPV
> operation at this point, and that complex work should be done after
> the wallet is separated. Thus the first version of the separated
> wallet should be functionally equivalent to today's wallet, that is, a
> full node wallet (even though I understand Wladimir's arguments
> against full-node wallets).

Do mind that some of the steps on the path of bitcoind towards SPV are
also useful in general. For example, headers-first allows parallel
block download, which would solve a lot of sync issues people are
having - a much higher priority than the wallet.

But anyhow I'm describing how I would do it. If you're going to do it,
you can do it in any order that you want. As we're talking about a
separate project here it's not even clear who will be maintainer.

> 2) That doesn't necessarily mean that optionally maintaining
> additional indexes in the core is not interesting for some use cases
> (interesting for bitcoind, I don't care much if electrum-server
> currently does this and more [with more dependencies]). Although
> Pieter thinks that should also be separated into an "index node" too,
> but I think that's another discussion.

I don't understand your argument against Electrum here. Dependencies?
Come on, that's a matter of software distribution. If that really
bothers you I suppose you could contribute to Electrum server so that
it has less deps. It doesn't make the protocol worth any less.

Although Pieter and I disagree with regard to issue #4351, we agree on
wanting to keep (or at least making) bitcoind as lean as possible.
Maintaining extra indices for others doesn't fit in there - that's
also why the address index patch was not merged. An 'index node' could
be a different animal.

Wladimir



From tamas at bitsofproof.com  Tue Jun 24 11:48:05 2014
From: tamas at bitsofproof.com (Tamas Blummer)
Date: Tue, 24 Jun 2014 13:48:05 +0200
Subject: [Bitcoin-development] Plans to separate wallet from core
In-Reply-To: <CAC1+kJMn3p5H6A8GGiuF56d411zC4qsTomuy7A5e0+OQT78FGQ@mail.gmail.com>
References: <CAC1+kJNjcPkaHiR8mzofwXE4+4UX5nmxX5Q3rZv37v-K40p1Tw@mail.gmail.com>
	<CA+s+GJDVBQVu8yH9jLu_rQmk=dsJuMUctT-iK0zzOJRYgE8k9w@mail.gmail.com>
	<CAC1+kJOQ2uBo2peYKZJyPSQL6qzk6Yu-cF-tPs3GzVS6cAc53w@mail.gmail.com>
	<CANEZrP1bNs4ahMzd7AfSH3P39Cx1rkmCkjnOMOM9T2Anr5wVOw@mail.gmail.com>
	<CAC1+kJMn3p5H6A8GGiuF56d411zC4qsTomuy7A5e0+OQT78FGQ@mail.gmail.com>
Message-ID: <F8592D15-B751-4DD9-A573-6373934C8D44@bitsofproof.com>

I think there are three typical uses:

1. Building consensus on the block chain. This is what the core is for.
2. Single user wallets. This is where SPV alone is good.
3. Services e.g. exchange, payment processor .... This is where core + indexing server talking SPV to core is the right choice

Regards,

Tam?s Blummer
Founder, CEO

http://bitsofproof.com


-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140624/f0dec0c3/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: email.png
Type: image/png
Size: 7120 bytes
Desc: not available
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140624/f0dec0c3/attachment.png>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 495 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140624/f0dec0c3/attachment.sig>

From mike at plan99.net  Tue Jun 24 12:16:00 2014
From: mike at plan99.net (Mike Hearn)
Date: Tue, 24 Jun 2014 14:16:00 +0200
Subject: [Bitcoin-development] Plans to separate wallet from core
In-Reply-To: <CA+s+GJADNS6zy--sk3W3q21inuSB5jkkRku14vxLXDXKf=vkvw@mail.gmail.com>
References: <CAC1+kJNjcPkaHiR8mzofwXE4+4UX5nmxX5Q3rZv37v-K40p1Tw@mail.gmail.com>
	<CA+s+GJDVBQVu8yH9jLu_rQmk=dsJuMUctT-iK0zzOJRYgE8k9w@mail.gmail.com>
	<CAC1+kJOQ2uBo2peYKZJyPSQL6qzk6Yu-cF-tPs3GzVS6cAc53w@mail.gmail.com>
	<CANEZrP1bNs4ahMzd7AfSH3P39Cx1rkmCkjnOMOM9T2Anr5wVOw@mail.gmail.com>
	<CAC1+kJMn3p5H6A8GGiuF56d411zC4qsTomuy7A5e0+OQT78FGQ@mail.gmail.com>
	<CA+s+GJADNS6zy--sk3W3q21inuSB5jkkRku14vxLXDXKf=vkvw@mail.gmail.com>
Message-ID: <CANEZrP0sT3KTPatwNFO5gjwShkGQt=h6PjX-3Df2U9oXa=3JUA@mail.gmail.com>

>
> Although Pieter and I disagree with regard to issue #4351, we agree on
> wanting to keep (or at least making) bitcoind as lean as possible.
> Maintaining extra indices for others doesn't fit in there - that's
> also why the address index patch was not merged. An 'index node' could
> be a different animal.


We definitely want to head in the direction of allowing a p2p node to be as
useful as possible within its resource constraints and optional advertising
of new (expensive) indexes is the way to go.

Sometimes I wonder if we should have an RPC or new socket based method
where additional programs could run along side Bitcoin Core and opt to
handle a subset of p2p commands. But then I think, that seems like a lot of
complexity for people who just want to help out the system, which I guess
is the bulk of our network now. Keeping their lives simple should have a
high priority. So a single unified program that just figures it out
automatically rather than expecting users to assemble a bag of parts seems
a goal worth striving for.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140624/76627853/attachment.html>

From laanwj at gmail.com  Tue Jun 24 12:41:40 2014
From: laanwj at gmail.com (Wladimir)
Date: Tue, 24 Jun 2014 14:41:40 +0200
Subject: [Bitcoin-development] Plans to separate wallet from core
In-Reply-To: <CANEZrP0sT3KTPatwNFO5gjwShkGQt=h6PjX-3Df2U9oXa=3JUA@mail.gmail.com>
References: <CAC1+kJNjcPkaHiR8mzofwXE4+4UX5nmxX5Q3rZv37v-K40p1Tw@mail.gmail.com>
	<CA+s+GJDVBQVu8yH9jLu_rQmk=dsJuMUctT-iK0zzOJRYgE8k9w@mail.gmail.com>
	<CAC1+kJOQ2uBo2peYKZJyPSQL6qzk6Yu-cF-tPs3GzVS6cAc53w@mail.gmail.com>
	<CANEZrP1bNs4ahMzd7AfSH3P39Cx1rkmCkjnOMOM9T2Anr5wVOw@mail.gmail.com>
	<CAC1+kJMn3p5H6A8GGiuF56d411zC4qsTomuy7A5e0+OQT78FGQ@mail.gmail.com>
	<CA+s+GJADNS6zy--sk3W3q21inuSB5jkkRku14vxLXDXKf=vkvw@mail.gmail.com>
	<CANEZrP0sT3KTPatwNFO5gjwShkGQt=h6PjX-3Df2U9oXa=3JUA@mail.gmail.com>
Message-ID: <CA+s+GJCKWqCd37iFdPeUKX3FZOEeWf7JXnaRzyJ4g17O=Xm9YQ@mail.gmail.com>

On Tue, Jun 24, 2014 at 2:16 PM, Mike Hearn <mike at plan99.net> wrote:
> priority. So a single unified program that just figures it out automatically
> rather than expecting users to assemble a bag of parts seems a goal worth
> striving for.

As I've said before -- and I think we disagree here - I like moving
towards a bag of parts of specialized tools, maintained by people that
specialize in those tools, instead of a single project that aims to do
and know everything. This encourages experimentation  and makes
competition possible and I think that is healthy in this space.

Bitcoin has a strict need for consensus in the block chain format,
scripting system and validation. Outside of those, innovation should
be possible without any gatekeeper bottleneck or even widespread
agreement. Wallets, what data to store on disk, what indices to
maintain. But even P2P message extensions, as long as it doesn't
interfere with the rest of the network.

After an experiment is successful it could always be merged into
bitcoin core. But then the 'what-ifers' have less ammo, as it has been
tested in the real world.

For user convenience it's still possible to package pre-assembled
bags. But that doesn't need to figure into how things are developed.

Wladimir



From thomasv1 at gmx.de  Tue Jun 24 13:24:42 2014
From: thomasv1 at gmx.de (Thomas Voegtlin)
Date: Tue, 24 Jun 2014 15:24:42 +0200
Subject: [Bitcoin-development] Plans to separate wallet from core
In-Reply-To: <CA+s+GJBsrV2mjotM9==1M8Cm8EjoQ4Oh0BN3cdUOARryy2VwAA@mail.gmail.com>
References: <CAC1+kJNjcPkaHiR8mzofwXE4+4UX5nmxX5Q3rZv37v-K40p1Tw@mail.gmail.com>	<CA+s+GJDVBQVu8yH9jLu_rQmk=dsJuMUctT-iK0zzOJRYgE8k9w@mail.gmail.com>	<CAC1+kJOQ2uBo2peYKZJyPSQL6qzk6Yu-cF-tPs3GzVS6cAc53w@mail.gmail.com>	<CA+s+GJBT9u+LMqTfrTwUQrGbnrqj2u==1kmx17uQyY8899O8sw@mail.gmail.com>
	<CA+s+GJBsrV2mjotM9==1M8Cm8EjoQ4Oh0BN3cdUOARryy2VwAA@mail.gmail.com>
Message-ID: <53A97C1A.2060906@gmx.de>



Le 24/06/2014 11:44, Wladimir a ?crit :
>> But IMO this is a passed stage. SPV wallets w/ Bloom filtering can
>> work without any special servers, so why require a 'close binding' to
>> a trusted bitcoin core?
> 
> To clarify (and not piss off ThomasV :-): I do not think the idea of
> having servers with a reputation of their own is a passed stage. There
> are many things that cannot be done at SPV level security with just
> the P2P protocol yet. So having fewer but more trusted Electrum
> servers is a reasonable compromise.
> 


Thanks for that :)

Note that my goal is to make the Electrum servers as trustless as
possible, and not to rely on some sort of 'reputation'.

Thomas



From jtimon at monetize.io  Tue Jun 24 13:26:19 2014
From: jtimon at monetize.io (=?UTF-8?B?Sm9yZ2UgVGltw7Nu?=)
Date: Tue, 24 Jun 2014 15:26:19 +0200
Subject: [Bitcoin-development] Plans to separate wallet from core
In-Reply-To: <F8592D15-B751-4DD9-A573-6373934C8D44@bitsofproof.com>
References: <CAC1+kJNjcPkaHiR8mzofwXE4+4UX5nmxX5Q3rZv37v-K40p1Tw@mail.gmail.com>
	<CA+s+GJDVBQVu8yH9jLu_rQmk=dsJuMUctT-iK0zzOJRYgE8k9w@mail.gmail.com>
	<CAC1+kJOQ2uBo2peYKZJyPSQL6qzk6Yu-cF-tPs3GzVS6cAc53w@mail.gmail.com>
	<CANEZrP1bNs4ahMzd7AfSH3P39Cx1rkmCkjnOMOM9T2Anr5wVOw@mail.gmail.com>
	<CAC1+kJMn3p5H6A8GGiuF56d411zC4qsTomuy7A5e0+OQT78FGQ@mail.gmail.com>
	<F8592D15-B751-4DD9-A573-6373934C8D44@bitsofproof.com>
Message-ID: <CAC1+kJPJKwS+ydKO-HTNg8bb93mXEs8Hexycw9E9Fbv_sAQXoA@mail.gmail.com>

On 6/24/14, Tamas Blummer <tamas at bitsofproof.com> wrote:
> 3. Services e.g. exchange, payment processor .... This is where core +
> indexing server talking SPV to core is the right choice

I think this is my main question, what's the advantage of having the
processes talking via the p2p protocol instead of something more
direct when you control both processes?

Wladimir, of course headers-first is generally good, and of course
nobody will be force to separate the code in a way he doesn't like, I
was just testing the waters to see what people had in mind, since I
realized the ideas could be more different than I had assumed.
I don't have any issues with electrum, I'm just not convinced by the
arguments that say that the indexes must be necessarily out of the
core, specially when some of them could be committed in the future.
So I'm all in favor of modularity and competing codebases, I'm just
not convinced that the "core full-node" must be necessarily restricted
to validation only (for example, I think it should maintain a minimal
and non-optimized mining functionality,even if it's only used for
testing purposes).

So far it is great that everybody seems to agree that the wallet code
needs to be separated.

Thanks everyone for sharing your views on the subject.



From mike at plan99.net  Tue Jun 24 13:27:57 2014
From: mike at plan99.net (Mike Hearn)
Date: Tue, 24 Jun 2014 15:27:57 +0200
Subject: [Bitcoin-development] Proposed BIP 70 extension
Message-ID: <CANEZrP3iyQ9zQ+hDnooxrjdBO+_Fj+nAkK1Skgk+Gb4gkidPhQ@mail.gmail.com>

Coinbase have started allowing merchants to set discounts for purchasing
with Bitcoin. Seeing an individual discount is not very motivating as they
tend to be small. Seeing them stack up over time can be more motivating
because it feels like free money. Many businesses exploit this effect with
loyalty points, etc. Bitcoin should do this too - show the user how much
they're saving by using Bitcoin instead of credit cards.

I suggested to Charlie Lee (who pushed this through at Coinbase) and
Stephen Pair the following minor BIP 70 extension:


message PaymentDetails {
    // Size in satoshis of any discount provided by the merchant ONLY
    // because the user chose to pay using Bitcoin or other similar
    // digital currency. Other kinds of discounts, loyalty bonuses and
    // so on should not be recorded here, rather they could be mentioned
    // in the memo field. This field exists so wallets can show the user
    // a running total of how much money they have saved by avoiding
    // credit cards and bank payments; the goal is to encourage people to
    // use Bitcoin. Putting other kinds of discounts here would make the
    // running total calculated meaningless; so don't do it!
    optional uint64 currency_usage_discount_size = 8;
}

Wallets would then be able to persist this data to disk and compete on cool
visualisations for how much money you saved over time.

We haven't formalised how to extend BIP 70 yet, that's my fault. We should
do that. In the meantime, what do people think of this proposal?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140624/5e36249c/attachment.html>

From pieter.wuille at gmail.com  Tue Jun 24 13:37:59 2014
From: pieter.wuille at gmail.com (Pieter Wuille)
Date: Tue, 24 Jun 2014 15:37:59 +0200
Subject: [Bitcoin-development] Plans to separate wallet from core
In-Reply-To: <CAC1+kJPJKwS+ydKO-HTNg8bb93mXEs8Hexycw9E9Fbv_sAQXoA@mail.gmail.com>
References: <CAC1+kJNjcPkaHiR8mzofwXE4+4UX5nmxX5Q3rZv37v-K40p1Tw@mail.gmail.com>
	<CA+s+GJDVBQVu8yH9jLu_rQmk=dsJuMUctT-iK0zzOJRYgE8k9w@mail.gmail.com>
	<CAC1+kJOQ2uBo2peYKZJyPSQL6qzk6Yu-cF-tPs3GzVS6cAc53w@mail.gmail.com>
	<CANEZrP1bNs4ahMzd7AfSH3P39Cx1rkmCkjnOMOM9T2Anr5wVOw@mail.gmail.com>
	<CAC1+kJMn3p5H6A8GGiuF56d411zC4qsTomuy7A5e0+OQT78FGQ@mail.gmail.com>
	<F8592D15-B751-4DD9-A573-6373934C8D44@bitsofproof.com>
	<CAC1+kJPJKwS+ydKO-HTNg8bb93mXEs8Hexycw9E9Fbv_sAQXoA@mail.gmail.com>
Message-ID: <CAPg+sBh_5nF3mxgb72bVtS4Ua=jq+fN_uRv+s=Vmmweo4ohR1w@mail.gmail.com>

I'd like to point out that there is quite a difference between "what
core nodes should be like" and "what the codebase core nodes are built
from must support".

Given sufficiently modularized code (which I think everyone seems to
be in favor of, regardless of the goals), you can likely build a
binary that does full verification and maintains some indexes of some
sort.

I still believe that what we push for to run as the core nodes of the
network should aim for purely verification and relay, and nothing
else, but people can and will do things differently if the source code
allows it. And that's fine.

On Tue, Jun 24, 2014 at 3:26 PM, Jorge Tim?n <jtimon at monetize.io> wrote:
> I think this is my main question, what's the advantage of having the
> processes talking via the p2p protocol instead of something more
> direct when you control both processes?

IMHO, maintaining a correct view of the current state of the chain
(excluding blocks, just headers) is already sufficiently hard (I hope
that everyone who ever implemented an SPV wallet can agree). You
simplify things a bit by not needing to verify what the peer claims if
you trust them, but not much. You still need to support
reorganizations, counting confirmations, making sure you stay
up-to-date. These are functions the (SPV) P2P protocol has already
shown to do well, and there are several codebases out there that
implement it. No need to reinvent the wheel with a marginally more
efficient protocol, if it means starting over everything else.

-- 
Pieter



From jgarzik at bitpay.com  Tue Jun 24 14:21:46 2014
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Tue, 24 Jun 2014 10:21:46 -0400
Subject: [Bitcoin-development] Proposed BIP 70 extension
In-Reply-To: <CANEZrP3iyQ9zQ+hDnooxrjdBO+_Fj+nAkK1Skgk+Gb4gkidPhQ@mail.gmail.com>
References: <CANEZrP3iyQ9zQ+hDnooxrjdBO+_Fj+nAkK1Skgk+Gb4gkidPhQ@mail.gmail.com>
Message-ID: <CAJHLa0Omiz+UhGjSKgYU7+b2YY7aN23w7o8CQntqMePFs7LkjA@mail.gmail.com>

On Tue, Jun 24, 2014 at 9:27 AM, Mike Hearn <mike at plan99.net> wrote:
> Wallets would then be able to persist this data to disk and compete on cool visualisations for how much money you saved over time.

heh, this is a cool idea.

It also seems like it would be subject to instant inflation, as it's
unprovable, and a rational economic actor may choose to exaggerate
such numbers.  It also seems collectively rational by some points of
view for all bitcoin actors to inflate this number.

At a minimum, I would either add "marketing_" to the field name
itself, or include additional comment caveats noting in BOLD language
that this field is informational, and should not be relied upon for
accounting/auditing purposes.

It just seems like a statistic that everyone has an incentive to exaggerate.

-- 
Jeff Garzik
Bitcoin core developer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From mike at plan99.net  Tue Jun 24 14:24:53 2014
From: mike at plan99.net (Mike Hearn)
Date: Tue, 24 Jun 2014 16:24:53 +0200
Subject: [Bitcoin-development] Proposed BIP 70 extension
In-Reply-To: <CAJHLa0Omiz+UhGjSKgYU7+b2YY7aN23w7o8CQntqMePFs7LkjA@mail.gmail.com>
References: <CANEZrP3iyQ9zQ+hDnooxrjdBO+_Fj+nAkK1Skgk+Gb4gkidPhQ@mail.gmail.com>
	<CAJHLa0Omiz+UhGjSKgYU7+b2YY7aN23w7o8CQntqMePFs7LkjA@mail.gmail.com>
Message-ID: <CANEZrP06gk-JhKaNpvYUTfjFq9AGnCay9=pjUGpVMjMSuX3_ew@mail.gmail.com>

>
> It also seems like it would be subject to instant inflation, as it's
> unprovable


The user knows the price that is on the website or menu, they know the
price they actually paid ... if the numbers don't add up that would seem to
be pretty easily detectable. But sure it's only for marketing.  I think the
comment makes it clear it's just for fun.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140624/a3b6016f/attachment.html>

From slush at centrum.cz  Tue Jun 24 14:32:17 2014
From: slush at centrum.cz (slush)
Date: Tue, 24 Jun 2014 16:32:17 +0200
Subject: [Bitcoin-development] Proposed BIP 70 extension
In-Reply-To: <CANEZrP06gk-JhKaNpvYUTfjFq9AGnCay9=pjUGpVMjMSuX3_ew@mail.gmail.com>
References: <CANEZrP3iyQ9zQ+hDnooxrjdBO+_Fj+nAkK1Skgk+Gb4gkidPhQ@mail.gmail.com>
	<CAJHLa0Omiz+UhGjSKgYU7+b2YY7aN23w7o8CQntqMePFs7LkjA@mail.gmail.com>
	<CANEZrP06gk-JhKaNpvYUTfjFq9AGnCay9=pjUGpVMjMSuX3_ew@mail.gmail.com>
Message-ID: <CAJna-HhX8HOci0KMe4ZScr4QW792S3n5twvU0QhbQe1N_3q7_w@mail.gmail.com>

Sounds like marketing bullshit to me. It does not have even statistical
meaning; well, you can "save" a lot of satoshis, but nobody tell you that
the merchant cut you on BTC/USD exchange rate in tens of %.

Payment protocol should not contain these fictional data, which has no real
meaning for the payment itself. Put these marketing claims to memo field
instead...

slush


On Tue, Jun 24, 2014 at 4:24 PM, Mike Hearn <mike at plan99.net> wrote:

> It also seems like it would be subject to instant inflation, as it's
>> unprovable
>
>
> The user knows the price that is on the website or menu, they know the
> price they actually paid ... if the numbers don't add up that would seem to
> be pretty easily detectable. But sure it's only for marketing.  I think the
> comment makes it clear it's just for fun.
>
>
> ------------------------------------------------------------------------------
> Open source business process management suite built on Java and Eclipse
> Turn processes into business applications with Bonita BPM Community Edition
> Quickly connect people, data, and systems into organized workflows
> Winner of BOSSIE, CODIE, OW2 and Gartner awards
> http://p.sf.net/sfu/Bonitasoft
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140624/ef92af63/attachment.html>

From mike at plan99.net  Tue Jun 24 15:06:34 2014
From: mike at plan99.net (Mike Hearn)
Date: Tue, 24 Jun 2014 17:06:34 +0200
Subject: [Bitcoin-development] Proposed BIP 70 extension
In-Reply-To: <CAJna-HhX8HOci0KMe4ZScr4QW792S3n5twvU0QhbQe1N_3q7_w@mail.gmail.com>
References: <CANEZrP3iyQ9zQ+hDnooxrjdBO+_Fj+nAkK1Skgk+Gb4gkidPhQ@mail.gmail.com>
	<CAJHLa0Omiz+UhGjSKgYU7+b2YY7aN23w7o8CQntqMePFs7LkjA@mail.gmail.com>
	<CANEZrP06gk-JhKaNpvYUTfjFq9AGnCay9=pjUGpVMjMSuX3_ew@mail.gmail.com>
	<CAJna-HhX8HOci0KMe4ZScr4QW792S3n5twvU0QhbQe1N_3q7_w@mail.gmail.com>
Message-ID: <CANEZrP0YV4xcK7y+H=gTmv_Hxs3nuACqEHWLUfcDdQeRhBF2Hw@mail.gmail.com>

>
> Sounds like marketing bullshit to me. It does not have even statistical
> meaning; well, you can "save" a lot of satoshis, but nobody tell you that
> the merchant cut you on BTC/USD exchange rate in tens of %.
>

Your own wallet can look up the exchange rate and compare it to what you're
getting (and in fact, wallets do!).

Besides, assuming the customer is *always* being scammed seems extreme.
There are plenty of merchants that genuinely care about their reputation
and genuinely want people to pay with Bitcoin so they can avoid card fees.


> Payment protocol should not contain these fictional data
>

Well, I think the protocol should contain whatever is useful.

I'll probably draft a BIP for this next week or so.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140624/96462d5a/attachment.html>

From will.yager at gmail.com  Tue Jun 24 15:15:10 2014
From: will.yager at gmail.com (Gmail)
Date: Tue, 24 Jun 2014 11:15:10 -0400
Subject: [Bitcoin-development] Proposed BIP 70 extension
In-Reply-To: <CAJna-HhX8HOci0KMe4ZScr4QW792S3n5twvU0QhbQe1N_3q7_w@mail.gmail.com>
References: <CANEZrP3iyQ9zQ+hDnooxrjdBO+_Fj+nAkK1Skgk+Gb4gkidPhQ@mail.gmail.com>
	<CAJHLa0Omiz+UhGjSKgYU7+b2YY7aN23w7o8CQntqMePFs7LkjA@mail.gmail.com>
	<CANEZrP06gk-JhKaNpvYUTfjFq9AGnCay9=pjUGpVMjMSuX3_ew@mail.gmail.com>
	<CAJna-HhX8HOci0KMe4ZScr4QW792S3n5twvU0QhbQe1N_3q7_w@mail.gmail.com>
Message-ID: <6E6F88E9-5698-419B-927C-F65A5FCABBE9@gmail.com>



> On Jun 24, 2014, at 10:32, slush <slush at centrum.cz> wrote:
> 
> Sounds like marketing bullshit to me. It does not have even statistical meaning; well, you can "save" a lot of satoshis, but nobody tell you that the merchant cut you on BTC/USD exchange rate in tens of %.

People would also abuse this feature in the same way amazon (and other sales sites) abuse the definition of "save". For example, Amazon will indicate that you're getting x% off by shopping at amazon, but all that number really means is x% off MSRP. In reality, every website has the same price. I have no doubt that merchants would put similarly meaningless and/or misleading data in this field. 

I agree, the memo field is appropriate for this data. 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/pkcs7-signature
Size: 1593 bytes
Desc: not available
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140624/bbd4c63a/attachment.p7s>

From justusranvier at gmail.com  Tue Jun 24 15:33:41 2014
From: justusranvier at gmail.com (Justus Ranvier)
Date: Tue, 24 Jun 2014 15:33:41 +0000
Subject: [Bitcoin-development] Plans to separate wallet from core
In-Reply-To: <CA+s+GJBT9u+LMqTfrTwUQrGbnrqj2u==1kmx17uQyY8899O8sw@mail.gmail.com>
References: <CAC1+kJNjcPkaHiR8mzofwXE4+4UX5nmxX5Q3rZv37v-K40p1Tw@mail.gmail.com>	<CA+s+GJDVBQVu8yH9jLu_rQmk=dsJuMUctT-iK0zzOJRYgE8k9w@mail.gmail.com>	<CAC1+kJOQ2uBo2peYKZJyPSQL6qzk6Yu-cF-tPs3GzVS6cAc53w@mail.gmail.com>
	<CA+s+GJBT9u+LMqTfrTwUQrGbnrqj2u==1kmx17uQyY8899O8sw@mail.gmail.com>
Message-ID: <53A99A55.1020506@gmail.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On 06/24/2014 09:07 AM, Wladimir wrote:
> My main argument for the split is that full nodes and wallets have 
> completely different usage scenarios:
> 
> - A wallet should be online as little as possible, ideally only
> when you do transactions or want to check for them.
> 
> - A full node should be online 24/7 or it is virtually useless to
> the network.

I think btcd has done this right.

A wallet is a daemon that runs constantly in the background, just like
the full node.

The GUI (which is distinct from the wallet) runs as little as
possible. Presumably there's no need for a 1:1 relationship between
wallets and GUIs.


- -- 
Support online privacy by using email encryption whenever possible.
Learn how here: http://www.youtube.com/watch?v=bakOKJFtB-k
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2.0.22 (GNU/Linux)

iQEcBAEBAgAGBQJTqZpVAAoJEMP3uyY4RQ21E48H/0XNYBzR8QZjfku/MeL5IbwL
A56jrlWe2EZTabwfKdGx12L5oeBXe3DOeLsTizqIu0vijcl7qQryU49AjrVe91Rx
OdEi4lmaiXdkM3lWeWUxLoLLHR1B+1f8T18Mrnzo+yasyrywPb+6H79VN5KERdA2
5yHYCZyHXdNoXpzyf38GC2PdYJmAZdrRfAGyC5+OXSwE3XLhpRBrSBh/mrx0ct5M
ghkCKtsmJCJJ6sR2TbFxaj71kPp0J0tp8JVvjVEqC2uB4Ih0NY+79kz8L81TaNmw
ol1o6p7TypIk7QRQ4ES3Fq0ALh2aQ/tX4rc0GC0ed+xLi+dHJ2wGBI37HoyGIyg=
=Nn9X
-----END PGP SIGNATURE-----
-------------- next part --------------
A non-text attachment was scrubbed...
Name: 0x38450DB5.asc
Type: application/pgp-keys
Size: 12464 bytes
Desc: not available
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140624/67dda293/attachment.bin>

From andreas at schildbach.de  Tue Jun 24 15:43:51 2014
From: andreas at schildbach.de (Andreas Schildbach)
Date: Tue, 24 Jun 2014 17:43:51 +0200
Subject: [Bitcoin-development] Proposed BIP 70 extension
In-Reply-To: <CANEZrP3iyQ9zQ+hDnooxrjdBO+_Fj+nAkK1Skgk+Gb4gkidPhQ@mail.gmail.com>
References: <CANEZrP3iyQ9zQ+hDnooxrjdBO+_Fj+nAkK1Skgk+Gb4gkidPhQ@mail.gmail.com>
Message-ID: <loc6bn$ck0$1@ger.gmane.org>

I think it should be made more clear what's the reference price for the
discount. In Germany, we generally don't use credit cards but rather
"EC-Cards", which is already much cheaper. Or maybe for some merchants
the only alternative is cash, and they would still offer a Bitcoin discount.

Also, currently PR are created by the payment processors afaik. How can
they know what other payment option the merchant provides and what's the
conditions? Maybe we should first solve the signature delegation problem
so that the merchant can create the request.

Although I'm sure this feature will get abused, I (as a wallet author)
would be willing to give it a try. I agree with Jeff that the name of
the field should start with something like "marketing".


On 06/24/2014 03:27 PM, Mike Hearn wrote:
> Coinbase have started allowing merchants to set discounts for purchasing
> with Bitcoin. Seeing an individual discount is not very motivating as
> they tend to be small. Seeing them stack up over time can be more
> motivating because it feels like free money. Many businesses exploit
> this effect with loyalty points, etc. Bitcoin should do this too - show
> the user how much they're saving by using Bitcoin instead of credit cards.
> 
> I suggested to Charlie Lee (who pushed this through at Coinbase) and
> Stephen Pair the following minor BIP 70 extension:
> 
> 
> message PaymentDetails {
>     // Size in satoshis of any discount provided by the merchant ONLY
>     // because the user chose to pay using Bitcoin or other similar 
>     // digital currency. Other kinds of discounts, loyalty bonuses and 
>     // so on should not be recorded here, rather they could be mentioned
>     // in the memo field. This field exists so wallets can show the user
>     // a running total of how much money they have saved by avoiding
>     // credit cards and bank payments; the goal is to encourage people to
>     // use Bitcoin. Putting other kinds of discounts here would make the
>     // running total calculated meaningless; so don't do it!
>     optional uint64 currency_usage_discount_size = 8;
> }
> 
> Wallets would then be able to persist this data to disk and compete on
> cool visualisations for how much money you saved over time.
> 
> We haven't formalised how to extend BIP 70 yet, that's my fault. We
> should do that. In the meantime, what do people think of this proposal?
> 
> 
> ------------------------------------------------------------------------------
> Open source business process management suite built on Java and Eclipse
> Turn processes into business applications with Bonita BPM Community Edition
> Quickly connect people, data, and systems into organized workflows
> Winner of BOSSIE, CODIE, OW2 and Gartner awards
> http://p.sf.net/sfu/Bonitasoft
> 
> 
> 
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 





From jgarzik at bitpay.com  Tue Jun 24 15:48:15 2014
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Tue, 24 Jun 2014 11:48:15 -0400
Subject: [Bitcoin-development] Proposed BIP 70 extension
In-Reply-To: <6E6F88E9-5698-419B-927C-F65A5FCABBE9@gmail.com>
References: <CANEZrP3iyQ9zQ+hDnooxrjdBO+_Fj+nAkK1Skgk+Gb4gkidPhQ@mail.gmail.com>
	<CAJHLa0Omiz+UhGjSKgYU7+b2YY7aN23w7o8CQntqMePFs7LkjA@mail.gmail.com>
	<CANEZrP06gk-JhKaNpvYUTfjFq9AGnCay9=pjUGpVMjMSuX3_ew@mail.gmail.com>
	<CAJna-HhX8HOci0KMe4ZScr4QW792S3n5twvU0QhbQe1N_3q7_w@mail.gmail.com>
	<6E6F88E9-5698-419B-927C-F65A5FCABBE9@gmail.com>
Message-ID: <CAJHLa0PYfuJg3daPvzPFZpFz7ezH2RHpJ8zyz2g1NDKppM7rWA@mail.gmail.com>

I think there is nothing wrong with having a numeric memo field, which
is effectively what this is.  Structured rather than unstructured
data.

On Tue, Jun 24, 2014 at 11:15 AM, Gmail <will.yager at gmail.com> wrote:
>
>
>> On Jun 24, 2014, at 10:32, slush <slush at centrum.cz> wrote:
>>
>> Sounds like marketing bullshit to me. It does not have even statistical meaning; well, you can "save" a lot of satoshis, but nobody tell you that the merchant cut you on BTC/USD exchange rate in tens of %.
>
> People would also abuse this feature in the same way amazon (and other sales sites) abuse the definition of "save". For example, Amazon will indicate that you're getting x% off by shopping at amazon, but all that number really means is x% off MSRP. In reality, every website has the same price. I have no doubt that merchants would put similarly meaningless and/or misleading data in this field.
>
> I agree, the memo field is appropriate for this data.
> ------------------------------------------------------------------------------
> Open source business process management suite built on Java and Eclipse
> Turn processes into business applications with Bonita BPM Community Edition
> Quickly connect people, data, and systems into organized workflows
> Winner of BOSSIE, CODIE, OW2 and Gartner awards
> http://p.sf.net/sfu/Bonitasoft
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>



-- 
Jeff Garzik
Bitcoin core developer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From mike at plan99.net  Tue Jun 24 15:59:27 2014
From: mike at plan99.net (Mike Hearn)
Date: Tue, 24 Jun 2014 17:59:27 +0200
Subject: [Bitcoin-development] Proposed BIP 70 extension
In-Reply-To: <loc6bn$ck0$1@ger.gmane.org>
References: <CANEZrP3iyQ9zQ+hDnooxrjdBO+_Fj+nAkK1Skgk+Gb4gkidPhQ@mail.gmail.com>
	<loc6bn$ck0$1@ger.gmane.org>
Message-ID: <CANEZrP3G0BxGh7PnN_czGnqLLzQZ-gbR=uPhOjO5_b_5dMQ1zA@mail.gmail.com>

>
> I think it should be made more clear what's the reference price for the
> discount.
>

That might be useful for merchants that already provide a series of
price-differentiated payment methods, yes. Will think about it.


> Also, currently PR are created by the payment processors afaik. How can
> they know what other payment option the merchant provides and what's the
> conditions?
>

Currently Coinbase let merchants specify the size of their discount (I
guess in percentage terms, I should ask). So the merchants tell the payment
processor. I don't think this is a worry at the moment.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140624/f88f8983/attachment.html>

From jtimon at monetize.io  Tue Jun 24 16:40:16 2014
From: jtimon at monetize.io (=?UTF-8?B?Sm9yZ2UgVGltw7Nu?=)
Date: Tue, 24 Jun 2014 18:40:16 +0200
Subject: [Bitcoin-development] Plans to separate wallet from core
In-Reply-To: <53A99A55.1020506@gmail.com>
References: <CAC1+kJNjcPkaHiR8mzofwXE4+4UX5nmxX5Q3rZv37v-K40p1Tw@mail.gmail.com>
	<CA+s+GJDVBQVu8yH9jLu_rQmk=dsJuMUctT-iK0zzOJRYgE8k9w@mail.gmail.com>
	<CAC1+kJOQ2uBo2peYKZJyPSQL6qzk6Yu-cF-tPs3GzVS6cAc53w@mail.gmail.com>
	<CA+s+GJBT9u+LMqTfrTwUQrGbnrqj2u==1kmx17uQyY8899O8sw@mail.gmail.com>
	<53A99A55.1020506@gmail.com>
Message-ID: <CAC1+kJPycskhv7m=ygEO1htryWRju4bdzWOFfZ3cEu_uKX2k2w@mail.gmail.com>

On 6/24/14, Justus Ranvier <justusranvier at gmail.com> wrote:
> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA1
>
> On 06/24/2014 09:07 AM, Wladimir wrote:
>> My main argument for the split is that full nodes and wallets have
>> completely different usage scenarios:
>>
>> - A wallet should be online as little as possible, ideally only
>> when you do transactions or want to check for them.
>>
>> - A full node should be online 24/7 or it is virtually useless to
>> the network.
>
> I think btcd has done this right.
>
> A wallet is a daemon that runs constantly in the background, just like
> the full node.
>
> The GUI (which is distinct from the wallet) runs as little as
> possible. Presumably there's no need for a 1:1 relationship between
> wallets and GUIs.

I think he means that the wallet shouldn't be running as much as it is
currently doing.
But yes, I think you're right about wallets and GUIs not necessarily
mapping 1:1.



From drak at zikula.org  Tue Jun 24 17:37:02 2014
From: drak at zikula.org (Drak)
Date: Tue, 24 Jun 2014 18:37:02 +0100
Subject: [Bitcoin-development] Proposed BIP 70 extension
In-Reply-To: <CANEZrP3iyQ9zQ+hDnooxrjdBO+_Fj+nAkK1Skgk+Gb4gkidPhQ@mail.gmail.com>
References: <CANEZrP3iyQ9zQ+hDnooxrjdBO+_Fj+nAkK1Skgk+Gb4gkidPhQ@mail.gmail.com>
Message-ID: <CANAnSg3iyh9m3mu0Mx6sSWiuEd=owZQz=QJm0OzMrCtM7WgKqQ@mail.gmail.com>

Seems like a nice idea.


On 24 June 2014 14:27, Mike Hearn <mike at plan99.net> wrote:

> Coinbase have started allowing merchants to set discounts for purchasing
> with Bitcoin. Seeing an individual discount is not very motivating as they
> tend to be small. Seeing them stack up over time can be more motivating
> because it feels like free money. Many businesses exploit this effect with
> loyalty points, etc. Bitcoin should do this too - show the user how much
> they're saving by using Bitcoin instead of credit cards.
>
> I suggested to Charlie Lee (who pushed this through at Coinbase) and
> Stephen Pair the following minor BIP 70 extension:
>
>
> message PaymentDetails {
>     // Size in satoshis of any discount provided by the merchant ONLY
>     // because the user chose to pay using Bitcoin or other similar
>     // digital currency. Other kinds of discounts, loyalty bonuses and
>     // so on should not be recorded here, rather they could be mentioned
>     // in the memo field. This field exists so wallets can show the user
>     // a running total of how much money they have saved by avoiding
>     // credit cards and bank payments; the goal is to encourage people to
>     // use Bitcoin. Putting other kinds of discounts here would make the
>     // running total calculated meaningless; so don't do it!
>     optional uint64 currency_usage_discount_size = 8;
> }
>
> Wallets would then be able to persist this data to disk and compete on
> cool visualisations for how much money you saved over time.
>
> We haven't formalised how to extend BIP 70 yet, that's my fault. We should
> do that. In the meantime, what do people think of this proposal?
>
>
> ------------------------------------------------------------------------------
> Open source business process management suite built on Java and Eclipse
> Turn processes into business applications with Bonita BPM Community Edition
> Quickly connect people, data, and systems into organized workflows
> Winner of BOSSIE, CODIE, OW2 and Gartner awards
> http://p.sf.net/sfu/Bonitasoft
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140624/cb67ab5f/attachment.html>

From roy at gnomon.org.uk  Tue Jun 24 18:34:34 2014
From: roy at gnomon.org.uk (Roy Badami)
Date: Tue, 24 Jun 2014 19:34:34 +0100
Subject: [Bitcoin-development] Proposed BIP 70 extension
In-Reply-To: <CAJHLa0Omiz+UhGjSKgYU7+b2YY7aN23w7o8CQntqMePFs7LkjA@mail.gmail.com>
References: <CANEZrP3iyQ9zQ+hDnooxrjdBO+_Fj+nAkK1Skgk+Gb4gkidPhQ@mail.gmail.com>
	<CAJHLa0Omiz+UhGjSKgYU7+b2YY7aN23w7o8CQntqMePFs7LkjA@mail.gmail.com>
Message-ID: <20140624183434.GG14815@giles.gnomon.org.uk>

On Tue, Jun 24, 2014 at 10:21:46AM -0400, Jeff Garzik wrote:
> On Tue, Jun 24, 2014 at 9:27 AM, Mike Hearn <mike at plan99.net> wrote:
> > Wallets would then be able to persist this data to disk and compete on cool visualisations for how much money you saved over time.
> 
> heh, this is a cool idea.
> 
> It also seems like it would be subject to instant inflation, as it's
> unprovable, and a rational economic actor may choose to exaggerate
> such numbers.  It also seems collectively rational by some points of
> view for all bitcoin actors to inflate this number.

Rather than offering discounts, how about offering automatic cashback?
I know they're kinda stupid, but I gather cashback deals are very
commonplace in the US and (probably as a result) not unheard of elsewhere.

So you add an optional cashback_to field to the Payment message,
distinct from but conceptually similar to the refund_to field.  The
wallet can tally up how much cashback is received, without having to
trust the merchants.

Much harder to game, AFAICS.

roy



From will.yager at gmail.com  Tue Jun 24 19:00:02 2014
From: will.yager at gmail.com (Gmail)
Date: Tue, 24 Jun 2014 15:00:02 -0400
Subject: [Bitcoin-development] Proposed BIP 70 extension
In-Reply-To: <CAJHLa0PYfuJg3daPvzPFZpFz7ezH2RHpJ8zyz2g1NDKppM7rWA@mail.gmail.com>
References: <CANEZrP3iyQ9zQ+hDnooxrjdBO+_Fj+nAkK1Skgk+Gb4gkidPhQ@mail.gmail.com>
	<CAJHLa0Omiz+UhGjSKgYU7+b2YY7aN23w7o8CQntqMePFs7LkjA@mail.gmail.com>
	<CANEZrP06gk-JhKaNpvYUTfjFq9AGnCay9=pjUGpVMjMSuX3_ew@mail.gmail.com>
	<CAJna-HhX8HOci0KMe4ZScr4QW792S3n5twvU0QhbQe1N_3q7_w@mail.gmail.com>
	<6E6F88E9-5698-419B-927C-F65A5FCABBE9@gmail.com>
	<CAJHLa0PYfuJg3daPvzPFZpFz7ezH2RHpJ8zyz2g1NDKppM7rWA@mail.gmail.com>
Message-ID: <BBF86C9B-6B3D-4A03-AC7B-35619C47091F@gmail.com>

Ok, wanting structured data is a decent argument, but why this random arbitrary case in particular? There are hundreds of fields like this that people might want to use. 

If we're going to support one random cosmetic field, we might as well support them all with a generic structured data format. 

I'd rather we just didn't have this essentially pointless "feature" at all. Let's try and keep as much cruft as possible out of the payment protocol. The textual memo field is already more than sufficient. 

> On Jun 24, 2014, at 11:48, Jeff Garzik <jgarzik at bitpay.com> wrote:
> 
> I think there is nothing wrong with having a numeric memo field, which
> is effectively what this is.  Structured rather than unstructured
> data.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140624/27e30be9/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/pkcs7-signature
Size: 1593 bytes
Desc: not available
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140624/27e30be9/attachment.p7s>

From andy at coinbase.com  Tue Jun 24 19:34:03 2014
From: andy at coinbase.com (Andy Alness)
Date: Tue, 24 Jun 2014 12:34:03 -0700
Subject: [Bitcoin-development] Proposed BIP 70 extension
In-Reply-To: <BBF86C9B-6B3D-4A03-AC7B-35619C47091F@gmail.com>
References: <CANEZrP3iyQ9zQ+hDnooxrjdBO+_Fj+nAkK1Skgk+Gb4gkidPhQ@mail.gmail.com>
	<CAJHLa0Omiz+UhGjSKgYU7+b2YY7aN23w7o8CQntqMePFs7LkjA@mail.gmail.com>
	<CANEZrP06gk-JhKaNpvYUTfjFq9AGnCay9=pjUGpVMjMSuX3_ew@mail.gmail.com>
	<CAJna-HhX8HOci0KMe4ZScr4QW792S3n5twvU0QhbQe1N_3q7_w@mail.gmail.com>
	<6E6F88E9-5698-419B-927C-F65A5FCABBE9@gmail.com>
	<CAJHLa0PYfuJg3daPvzPFZpFz7ezH2RHpJ8zyz2g1NDKppM7rWA@mail.gmail.com>
	<BBF86C9B-6B3D-4A03-AC7B-35619C47091F@gmail.com>
Message-ID: <CALKy-woTon5bw+hfCKzzqQ1+YBjnn7Yv5ko3J-qfhRZO_VcNmQ@mail.gmail.com>

I somewhat agree with Will (but also with Mike, Jeff, and Charlie.) I
think the idea of letting consumers know advanced details about the
transaction is good and defining these with strong types is also good.
Maybe an arbitrary set of accounting line items would be more
palatable. You could have a line item for state sales tax for example,
or a cash back reward, or a merchant discount like the proposed,
whatever is applicable. It would be a list of amount / label tuples
maybe.

On Tue, Jun 24, 2014 at 12:00 PM, Gmail <will.yager at gmail.com> wrote:
> Ok, wanting structured data is a decent argument, but why this random
> arbitrary case in particular? There are hundreds of fields like this that
> people might want to use.
>
> If we're going to support one random cosmetic field, we might as well
> support them all with a generic structured data format.
>
> I'd rather we just didn't have this essentially pointless "feature" at all.
> Let's try and keep as much cruft as possible out of the payment protocol.
> The textual memo field is already more than sufficient.
>
> On Jun 24, 2014, at 11:48, Jeff Garzik <jgarzik at bitpay.com> wrote:
>
> I think there is nothing wrong with having a numeric memo field, which
> is effectively what this is.  Structured rather than unstructured
> data.
>
>
> ------------------------------------------------------------------------------
> Open source business process management suite built on Java and Eclipse
> Turn processes into business applications with Bonita BPM Community Edition
> Quickly connect people, data, and systems into organized workflows
> Winner of BOSSIE, CODIE, OW2 and Gartner awards
> http://p.sf.net/sfu/Bonitasoft
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>



-- 
Andy Alness
Software Engineer
Coinbase
San Francisco, CA



From paul at realfoot.com  Tue Jun 24 19:44:30 2014
From: paul at realfoot.com (Paul Goldstein)
Date: Tue, 24 Jun 2014 15:44:30 -0400
Subject: [Bitcoin-development] Bill Request Message - (another) Proposed BIP
	70 extension
Message-ID: <CADE3-jBoZCaRgx=P3AzKGPDCHJW0Z1KLmy_02ke4Jh+RTETqkQ@mail.gmail.com>

Here's an idea for a BIP 70 extension to let wallets be scanned by merchant
bar code readers to start off a payment request flow instead of the other
way around (wallet scanning the merchant QR). Useful for brick and mortar
merchants and mobile wallet apps.


Motivation:
A mechanism is needed for mobile wallets to request a bill, so that a
payment protocol flow can be initiated. Current mechanisms for initiating
BIP70 payment flows generally require wallets to either scan a merchant
barcode (not optimal, see below), or click on a specially formatted url
link (only suitable while browsing and purchasing on a merchant website).

Successful non-bitcoin mobile wallet apps to date (a popular coffee shop
app comes to mind) allow for the wallet app to be scanned by the merchant
and not the other way around (as is commonly done in bitcoin wallets
today). For broad bitcoin adoption we need a mechanism for wallets to be
scanned by merchant bar code readers at brick and mortar shops. This will
also greatly ease checkouts at drive throughs and allows merchants to
leverage existing hardware (barcode readers).

Other technologies like NFC may obviate the need for this extension,
however, those technologies remain somewhat uncommon and may not be
suitable for smaller wearables hitting the market.

message BillRequest {
 required uint64 time = 1;
 optional uint64 expires = 2;
 required string bill_request_uri = 3;
}


time - Unix timestamp (seconds since 1-Jan-1970 UTC) when the BillRequest
was created.
expires - Unix timestamp (UTC) after which the BillRequest should be
considered invalid (wallets may only be monitoring for messages for a short
time).
bill_req_addr - Typically a URL where a BIP70 payment request can be sent
that is being monitored by the wallet. However this could also support URIs
like "sms:860-555-1212" or "mailto:asdf at gmail.com" allowing for a variety
of connection options.

Recommendations: it is recommended that wallet apps display a non-QR
barcode like a PDF417 barcode to initiate the Bill Request flow. This will
avoid confusion with existing QR code usage in wallet apps.

--------
Paul G.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140624/b092242c/attachment.html>

From gavinandresen at gmail.com  Tue Jun 24 20:12:09 2014
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Tue, 24 Jun 2014 16:12:09 -0400
Subject: [Bitcoin-development] Proposed BIP 70 extension
In-Reply-To: <BBF86C9B-6B3D-4A03-AC7B-35619C47091F@gmail.com>
References: <CANEZrP3iyQ9zQ+hDnooxrjdBO+_Fj+nAkK1Skgk+Gb4gkidPhQ@mail.gmail.com>
	<CAJHLa0Omiz+UhGjSKgYU7+b2YY7aN23w7o8CQntqMePFs7LkjA@mail.gmail.com>
	<CANEZrP06gk-JhKaNpvYUTfjFq9AGnCay9=pjUGpVMjMSuX3_ew@mail.gmail.com>
	<CAJna-HhX8HOci0KMe4ZScr4QW792S3n5twvU0QhbQe1N_3q7_w@mail.gmail.com>
	<6E6F88E9-5698-419B-927C-F65A5FCABBE9@gmail.com>
	<CAJHLa0PYfuJg3daPvzPFZpFz7ezH2RHpJ8zyz2g1NDKppM7rWA@mail.gmail.com>
	<BBF86C9B-6B3D-4A03-AC7B-35619C47091F@gmail.com>
Message-ID: <CABsx9T13yksenx5aYd4HVqTyVjARx9aTHy=Neu64p6k9FnRRVw@mail.gmail.com>

On Tue, Jun 24, 2014 at 3:00 PM, Gmail <will.yager at gmail.com> wrote:

> Ok, wanting structured data is a decent argument, but why this random
> arbitrary case in particular? There are hundreds of fields like this that
> people might want to use.
>

Protocol buffers are designed to be extensible, and there are hundreds of
field numbers available.

It would be silly to add a "generic stuff" field inside a container format
that ALREADY has all the mechanisms necessary for forwards and backwards
extensibility.


-- 
--
Gavin Andresen
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140624/ec32513e/attachment.html>

From will.yager at gmail.com  Tue Jun 24 20:28:23 2014
From: will.yager at gmail.com (Gmail)
Date: Tue, 24 Jun 2014 16:28:23 -0400
Subject: [Bitcoin-development] Proposed BIP 70 extension
In-Reply-To: <CABsx9T13yksenx5aYd4HVqTyVjARx9aTHy=Neu64p6k9FnRRVw@mail.gmail.com>
References: <CANEZrP3iyQ9zQ+hDnooxrjdBO+_Fj+nAkK1Skgk+Gb4gkidPhQ@mail.gmail.com>
	<CAJHLa0Omiz+UhGjSKgYU7+b2YY7aN23w7o8CQntqMePFs7LkjA@mail.gmail.com>
	<CANEZrP06gk-JhKaNpvYUTfjFq9AGnCay9=pjUGpVMjMSuX3_ew@mail.gmail.com>
	<CAJna-HhX8HOci0KMe4ZScr4QW792S3n5twvU0QhbQe1N_3q7_w@mail.gmail.com>
	<6E6F88E9-5698-419B-927C-F65A5FCABBE9@gmail.com>
	<CAJHLa0PYfuJg3daPvzPFZpFz7ezH2RHpJ8zyz2g1NDKppM7rWA@mail.gmail.com>
	<BBF86C9B-6B3D-4A03-AC7B-35619C47091F@gmail.com>
	<CABsx9T13yksenx5aYd4HVqTyVjARx9aTHy=Neu64p6k9FnRRVw@mail.gmail.com>
Message-ID: <C95DB811-9E6A-4EA2-AE8F-83595C3AC817@gmail.com>

> On Jun 24, 2014, at 16:12, Gavin Andresen <gavinandresen at gmail.com> wrote:
> 
> It would be silly to add a "generic stuff" field inside a container format that ALREADY has all the mechanisms necessary for forwards and backwards extensibility.

I agree. It would be even sillier to start specifying container formats for random one-off "that would be kind of nice, I guess" features. 

How about exchange rate? Sharing links? Referral information? Any of these things are just as deserving of specification (and just as arbitrary). 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/pkcs7-signature
Size: 1593 bytes
Desc: not available
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140624/d2ebb0cc/attachment.p7s>

From laanwj at gmail.com  Wed Jun 25 05:43:23 2014
From: laanwj at gmail.com (Wladimir)
Date: Wed, 25 Jun 2014 07:43:23 +0200
Subject: [Bitcoin-development] Plans to separate wallet from core
In-Reply-To: <CAC1+kJPycskhv7m=ygEO1htryWRju4bdzWOFfZ3cEu_uKX2k2w@mail.gmail.com>
References: <CAC1+kJNjcPkaHiR8mzofwXE4+4UX5nmxX5Q3rZv37v-K40p1Tw@mail.gmail.com>
	<CA+s+GJDVBQVu8yH9jLu_rQmk=dsJuMUctT-iK0zzOJRYgE8k9w@mail.gmail.com>
	<CAC1+kJOQ2uBo2peYKZJyPSQL6qzk6Yu-cF-tPs3GzVS6cAc53w@mail.gmail.com>
	<CA+s+GJBT9u+LMqTfrTwUQrGbnrqj2u==1kmx17uQyY8899O8sw@mail.gmail.com>
	<53A99A55.1020506@gmail.com>
	<CAC1+kJPycskhv7m=ygEO1htryWRju4bdzWOFfZ3cEu_uKX2k2w@mail.gmail.com>
Message-ID: <CA+s+GJCpUzasKD8KYbweTu25SyXAJAx31TmfYj2iHG2fN62AFA@mail.gmail.com>

On Tue, Jun 24, 2014 at 6:40 PM, Jorge Tim?n <jtimon at monetize.io> wrote:
>
> I think he means that the wallet shouldn't be running as much as it is
> currently doing.
> But yes, I think you're right about wallets and GUIs not necessarily
> mapping 1:1.

I haven't been talking about the GUI at all in this entire
conversation. When I say wallet, I mean the wallet code. There are
very few reasons for running a wallet 24/7. One could be if you're
running an exchange that has to send and receive transactions all the
time.

But that's an exception - in the usual merchant/end-user case you're
mostly receiving transactions and sometimes manually or batched-
sending them. No need to leave the wallet running, exposed to the
network outside those times.

How the wallet GUI (if any) relates to the wallet code is a completely
different topic, and a much less pressing matter. Anything from 'GUI
uses wallet as a library' (multibit, electrum, bitcoin core) to
elaborate client-server protocols (btcd, coinvault?) are acceptable
depending on the use case.

Wladimir



From mike at plan99.net  Wed Jun 25 08:25:43 2014
From: mike at plan99.net (Mike Hearn)
Date: Wed, 25 Jun 2014 10:25:43 +0200
Subject: [Bitcoin-development] Proposed BIP 70 extension
In-Reply-To: <C95DB811-9E6A-4EA2-AE8F-83595C3AC817@gmail.com>
References: <CANEZrP3iyQ9zQ+hDnooxrjdBO+_Fj+nAkK1Skgk+Gb4gkidPhQ@mail.gmail.com>
	<CAJHLa0Omiz+UhGjSKgYU7+b2YY7aN23w7o8CQntqMePFs7LkjA@mail.gmail.com>
	<CANEZrP06gk-JhKaNpvYUTfjFq9AGnCay9=pjUGpVMjMSuX3_ew@mail.gmail.com>
	<CAJna-HhX8HOci0KMe4ZScr4QW792S3n5twvU0QhbQe1N_3q7_w@mail.gmail.com>
	<6E6F88E9-5698-419B-927C-F65A5FCABBE9@gmail.com>
	<CAJHLa0PYfuJg3daPvzPFZpFz7ezH2RHpJ8zyz2g1NDKppM7rWA@mail.gmail.com>
	<BBF86C9B-6B3D-4A03-AC7B-35619C47091F@gmail.com>
	<CABsx9T13yksenx5aYd4HVqTyVjARx9aTHy=Neu64p6k9FnRRVw@mail.gmail.com>
	<C95DB811-9E6A-4EA2-AE8F-83595C3AC817@gmail.com>
Message-ID: <CANEZrP0ce4MMX2hOhcGVWt23L_CMn6Cmj9_Okqd0BR9seQXJew@mail.gmail.com>

>
> I agree. It would be even sillier to start specifying container formats
> for random one-off "that would be kind of nice, I guess" features.
>

No, it'd be sensible.

Here's a list I drew up a long time ago of features I imagined adding to
the payment protocol:

https://bitcointalk.org/index.php?topic=270055.msg2890147#msg2890147

The protocol is there to contain features! There is zero benefit to
slavishly following some religious notion of purity or minimalism here. The
shared resource in question is just varint encoded integers. So, we should
be guided by what will help our users and what will help adoption.

Anyway, Gavin asked me to start handling more BIP 70 stuff a few weeks ago.
I want to use something simple to set up the extensions process more
formally. IMO we need a "living document" version of the payment protocol
with all the different extensions out there folded into it, to simplify
programming tasks and ensure field numbers don't collide.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140625/bc9bd69b/attachment.html>

From mike at plan99.net  Wed Jun 25 11:23:45 2014
From: mike at plan99.net (Mike Hearn)
Date: Wed, 25 Jun 2014 13:23:45 +0200
Subject: [Bitcoin-development] Bill Request Message - (another) Proposed
 BIP 70 extension
In-Reply-To: <CADE3-jBoZCaRgx=P3AzKGPDCHJW0Z1KLmy_02ke4Jh+RTETqkQ@mail.gmail.com>
References: <CADE3-jBoZCaRgx=P3AzKGPDCHJW0Z1KLmy_02ke4Jh+RTETqkQ@mail.gmail.com>
Message-ID: <CANEZrP3_pKzuS6mWL4TNAQcEcz_6wwzUX8LPtmdv2XUJSvDKuw@mail.gmail.com>

I'm not convinced this inversion is really a problem, but as this is quite
a complex proposal (e.g. new barcode types) the best way to move it forward
at this stage is to implement it in some existing wallets.

FWIW NFC is a lot more common than you might think. For the drive-thru case
you could also consider using wifi hotspots with a special name or
Bluetooth LE tags. So I suspect before trying to write a specification it'd
be better to explore different technologies and see what works best in
practice.



On Tue, Jun 24, 2014 at 9:44 PM, Paul Goldstein <paul at realfoot.com> wrote:

> Here's an idea for a BIP 70 extension to let wallets be scanned by
> merchant bar code readers to start off a payment request flow instead of
> the other way around (wallet scanning the merchant QR). Useful for brick
> and mortar merchants and mobile wallet apps.
>
>
> Motivation:
> A mechanism is needed for mobile wallets to request a bill, so that a
> payment protocol flow can be initiated. Current mechanisms for initiating
> BIP70 payment flows generally require wallets to either scan a merchant
> barcode (not optimal, see below), or click on a specially formatted url
> link (only suitable while browsing and purchasing on a merchant website).
>
> Successful non-bitcoin mobile wallet apps to date (a popular coffee shop
> app comes to mind) allow for the wallet app to be scanned by the merchant
> and not the other way around (as is commonly done in bitcoin wallets
> today). For broad bitcoin adoption we need a mechanism for wallets to be
> scanned by merchant bar code readers at brick and mortar shops. This will
> also greatly ease checkouts at drive throughs and allows merchants to
> leverage existing hardware (barcode readers).
>
> Other technologies like NFC may obviate the need for this extension,
> however, those technologies remain somewhat uncommon and may not be
> suitable for smaller wearables hitting the market.
>
> message BillRequest {
>  required uint64 time = 1;
>  optional uint64 expires = 2;
>  required string bill_request_uri = 3;
> }
>
>
> time - Unix timestamp (seconds since 1-Jan-1970 UTC) when the BillRequest
> was created.
> expires - Unix timestamp (UTC) after which the BillRequest should be
> considered invalid (wallets may only be monitoring for messages for a short
> time).
> bill_req_addr - Typically a URL where a BIP70 payment request can be sent
> that is being monitored by the wallet. However this could also support URIs
> like "sms:860-555-1212" or "mailto:asdf at gmail.com" allowing for a variety
> of connection options.
>
> Recommendations: it is recommended that wallet apps display a non-QR
> barcode like a PDF417 barcode to initiate the Bill Request flow. This will
> avoid confusion with existing QR code usage in wallet apps.
>
> --------
> Paul G.
>
>
> ------------------------------------------------------------------------------
> Open source business process management suite built on Java and Eclipse
> Turn processes into business applications with Bonita BPM Community Edition
> Quickly connect people, data, and systems into organized workflows
> Winner of BOSSIE, CODIE, OW2 and Gartner awards
> http://p.sf.net/sfu/Bonitasoft
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140625/717ef2d0/attachment.html>

From jtimon at monetize.io  Wed Jun 25 13:33:28 2014
From: jtimon at monetize.io (=?UTF-8?B?Sm9yZ2UgVGltw7Nu?=)
Date: Wed, 25 Jun 2014 15:33:28 +0200
Subject: [Bitcoin-development] Proposed BIP 70 extension
In-Reply-To: <CANEZrP0ce4MMX2hOhcGVWt23L_CMn6Cmj9_Okqd0BR9seQXJew@mail.gmail.com>
References: <CANEZrP3iyQ9zQ+hDnooxrjdBO+_Fj+nAkK1Skgk+Gb4gkidPhQ@mail.gmail.com>
	<CAJHLa0Omiz+UhGjSKgYU7+b2YY7aN23w7o8CQntqMePFs7LkjA@mail.gmail.com>
	<CANEZrP06gk-JhKaNpvYUTfjFq9AGnCay9=pjUGpVMjMSuX3_ew@mail.gmail.com>
	<CAJna-HhX8HOci0KMe4ZScr4QW792S3n5twvU0QhbQe1N_3q7_w@mail.gmail.com>
	<6E6F88E9-5698-419B-927C-F65A5FCABBE9@gmail.com>
	<CAJHLa0PYfuJg3daPvzPFZpFz7ezH2RHpJ8zyz2g1NDKppM7rWA@mail.gmail.com>
	<BBF86C9B-6B3D-4A03-AC7B-35619C47091F@gmail.com>
	<CABsx9T13yksenx5aYd4HVqTyVjARx9aTHy=Neu64p6k9FnRRVw@mail.gmail.com>
	<C95DB811-9E6A-4EA2-AE8F-83595C3AC817@gmail.com>
	<CANEZrP0ce4MMX2hOhcGVWt23L_CMn6Cmj9_Okqd0BR9seQXJew@mail.gmail.com>
Message-ID: <CAC1+kJN0ajyfFbLbuxqSph=LhaaHM71=4KAj7W1ggivxuxAvRA@mail.gmail.com>

+1 on setting up the payment protocol extensions process more formally.
On the feature itself, it is interesting to note that some
complementary currencies backed by national currencies offer a
discount when converting from fiat to complementary, which has an
equivalent effect to this "discount for paying with btc". The main
difference is that in local currencies the merchants are a relatively
small group and the discount is uniform whereas here each merchant can
set his own discount. There's scientific studies on how different
currency features like these discounts affect adoption, velocity and
other variables. I can ask for them if anyone is interested.

On the implementation, I think a percentage/proportion would be
preferable over an amount in satoshis.
Let's imagine for a second that the bitcoin payment protocol ends up
being a generalized and universal payment protocol. The field would be
really something like "discount/additional_charge for paying with the
chosen currency/payment_method".
You could have 0.95 for a 5% discount or 1.05 for a 5% additional
charge. Mhmm, maybe a flat discount/charge in addition to the
proportional one...

On security, being an optional field, I don't see how can it harm anything.
It is true that the merchants can lie about the discount, but wallets
can be smart or stupid about it, or just completely ignore the field
as they wish.

Anyway, it feels like a random simple extension as an excuse to
develop the extension process. If it gets too complicated we can start
with a simpler and less critical one but it's hard for me to imagine
it.


On 6/25/14, Mike Hearn <mike at plan99.net> wrote:
>>
>> I agree. It would be even sillier to start specifying container formats
>> for random one-off "that would be kind of nice, I guess" features.
>>
>
> No, it'd be sensible.
>
> Here's a list I drew up a long time ago of features I imagined adding to
> the payment protocol:
>
> https://bitcointalk.org/index.php?topic=270055.msg2890147#msg2890147
>
> The protocol is there to contain features! There is zero benefit to
> slavishly following some religious notion of purity or minimalism here. The
> shared resource in question is just varint encoded integers. So, we should
> be guided by what will help our users and what will help adoption.
>
> Anyway, Gavin asked me to start handling more BIP 70 stuff a few weeks ago.
> I want to use something simple to set up the extensions process more
> formally. IMO we need a "living document" version of the payment protocol
> with all the different extensions out there folded into it, to simplify
> programming tasks and ensure field numbers don't collide.
>


-- 
Jorge Tim?n



From sebastien.requiem at gmail.com  Wed Jun 25 14:01:31 2014
From: sebastien.requiem at gmail.com (sebastien requiem)
Date: Wed, 25 Jun 2014 16:01:31 +0200
Subject: [Bitcoin-development] instant confirmation via payment protocol
 backwards compatible proto buffer extension
In-Reply-To: <loom.20140618T140509-802@post.gmane.org>
References: <CAKrJrGOBSiY5V59eko6g796j3wh9V9ZLjPbyHeS5=zyX6j3Wdw@mail.gmail.com>
	<lnhgsk$va6$1@ger.gmane.org> <loom.20140615T111027-736@post.gmane.org>
	<lnk4ii$ehf$1@ger.gmane.org> <loom.20140618T140509-802@post.gmane.org>
Message-ID: <CABLWKA9nownE3NSpnTokxrGDcL6W2wasiQKYem0taP7qJBOVyA@mail.gmail.com>

On Wed, Jun 18, 2014 at 2:09 PM, Lawrence Nahum <lawrence at greenaddress.it>
wrote:

> [snip]
>
> Allow me to recap BIP changes in discussion:
>
> - making some changes to allow merchants to offer discounts in case of
> instant ?
> - allowing multiple signatures ?
>
> Did I miss anything? Thoughts on the above from others?
>

Jumping on this thread after reading it all. I am in favor of the
discount offered by the merchant.

Ideally the merchant could get the amount of the wallet *fee*
for instant payment (privacy leak?). That way, the merchant
could decide to support the instant payment at 100% (better
user experience after all) or at 50% only or at 0%.

This would encourage instant payment for merchants and buyers without
(re-)creating a non-transparent system.

regards,


-- 
sebastien requiem - bendingspoons.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140625/2e107dbe/attachment.html>

From slush at centrum.cz  Wed Jun 25 14:15:01 2014
From: slush at centrum.cz (slush)
Date: Wed, 25 Jun 2014 16:15:01 +0200
Subject: [Bitcoin-development] Proposed BIP 70 extension
In-Reply-To: <CANEZrP0ce4MMX2hOhcGVWt23L_CMn6Cmj9_Okqd0BR9seQXJew@mail.gmail.com>
References: <CANEZrP3iyQ9zQ+hDnooxrjdBO+_Fj+nAkK1Skgk+Gb4gkidPhQ@mail.gmail.com>
	<CAJHLa0Omiz+UhGjSKgYU7+b2YY7aN23w7o8CQntqMePFs7LkjA@mail.gmail.com>
	<CANEZrP06gk-JhKaNpvYUTfjFq9AGnCay9=pjUGpVMjMSuX3_ew@mail.gmail.com>
	<CAJna-HhX8HOci0KMe4ZScr4QW792S3n5twvU0QhbQe1N_3q7_w@mail.gmail.com>
	<6E6F88E9-5698-419B-927C-F65A5FCABBE9@gmail.com>
	<CAJHLa0PYfuJg3daPvzPFZpFz7ezH2RHpJ8zyz2g1NDKppM7rWA@mail.gmail.com>
	<BBF86C9B-6B3D-4A03-AC7B-35619C47091F@gmail.com>
	<CABsx9T13yksenx5aYd4HVqTyVjARx9aTHy=Neu64p6k9FnRRVw@mail.gmail.com>
	<C95DB811-9E6A-4EA2-AE8F-83595C3AC817@gmail.com>
	<CANEZrP0ce4MMX2hOhcGVWt23L_CMn6Cmj9_Okqd0BR9seQXJew@mail.gmail.com>
Message-ID: <CAJna-HiRChr4M9QL_7ZeKQeV7m5M4-ysnERB1DmK1itJMaGucQ@mail.gmail.com>

On Wed, Jun 25, 2014 at 10:25 AM, Mike Hearn <mike at plan99.net> wrote:
>
> The protocol is there to contain features! There is zero benefit to
> slavishly following some religious notion of purity or minimalism here.
>

Good standard must be explicit as much as possible. Having million optional
fields with ambiguous meaning is even worse than not having these fields.

HTTP status codes are good example. There are hundreds of them, still
applications understands just few of them, because other have ambiguous
meaning and software don't know how to handle them.

Good example of such over-engineering is also XMPP. XMPP has milions
extensions and features, but look at Jabber clients; call yourself lucky
when you can send messages and files, although there're various extensions
like searching for contacts (something which has be working in ICQ decade
ago), voice support, end to end encryption or alerting users. These
features are defined, but not widely implemented, because its definition is
vague or the feature is abused because of poor design.

Please don't over-engineer payment protocol.

Thank you for your attention.

slush
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140625/c0bd2c59/attachment.html>

From mike at plan99.net  Wed Jun 25 14:38:06 2014
From: mike at plan99.net (Mike Hearn)
Date: Wed, 25 Jun 2014 16:38:06 +0200
Subject: [Bitcoin-development] Bill Request Message - (another) Proposed
 BIP 70 extension
In-Reply-To: <CADE3-jBdEM4YnBKue6_Q_ZDitUZ7aSGGqrYg6X=N0c0PC1az+g@mail.gmail.com>
References: <CADE3-jBoZCaRgx=P3AzKGPDCHJW0Z1KLmy_02ke4Jh+RTETqkQ@mail.gmail.com>
	<CANEZrP3_pKzuS6mWL4TNAQcEcz_6wwzUX8LPtmdv2XUJSvDKuw@mail.gmail.com>
	<CADE3-jBdEM4YnBKue6_Q_ZDitUZ7aSGGqrYg6X=N0c0PC1az+g@mail.gmail.com>
Message-ID: <CANEZrP19T4q73Y9Y4x2gyD26MK5CPkuDdd12-Ewr_DhpGsGzng@mail.gmail.com>

Alright. I still tend to think it's not a big deal, but there's no reason
both or all mechanisms can't co-exist.

BTW: a QR code next to a cash register can be fixed i.e. printed on paper
when using BIP70. The PoS would upload payment details to the server and
the URL for that particular PoS unit would then serve it when the user
scans the QR code. Alternatively, Andreas' work on Bluetooth may be more
appropriate: the QR code can contain the BT MAC of the device and the
payment request is downloaded that way. That's already implemented! I still
feel that if a seller can scan a users phone, the users phone can certainly
scan some rectangle that's physically near by the sales counter.

The other nice thing about that approach is the QRcode can also be an NFC
tag i.e. have the tag behind it with a little icon in the middle of the QR
code to indicate that touching works as well as scanning.

One project I keep wanting to play with is making these little NFC-QRcode
hybrids and a simple PoS app to go with them. But no time, alas ....
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140625/e3a3e533/attachment.html>

From jgarzik at bitpay.com  Wed Jun 25 15:43:05 2014
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Wed, 25 Jun 2014 11:43:05 -0400
Subject: [Bitcoin-development] Wallet nLockTime best practices
Message-ID: <CAJHLa0Md-fnYFHqVhPGizdofm-8Ly6aZxN+u3EVkyNJ4B5BWeg@mail.gmail.com>

I'm inclined to merge https://github.com/bitcoin/bitcoin/pull/2340

which sets nLockTime on wallet-created transactions by default.  I
think this is good practice for wallets, long term.

-- 
Jeff Garzik
Bitcoin core developer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From will.yager at gmail.com  Wed Jun 25 16:03:31 2014
From: will.yager at gmail.com (Gmail)
Date: Wed, 25 Jun 2014 12:03:31 -0400
Subject: [Bitcoin-development] Proposed BIP 70 extension
In-Reply-To: <CAJna-HiRChr4M9QL_7ZeKQeV7m5M4-ysnERB1DmK1itJMaGucQ@mail.gmail.com>
References: <CANEZrP3iyQ9zQ+hDnooxrjdBO+_Fj+nAkK1Skgk+Gb4gkidPhQ@mail.gmail.com>
	<CAJHLa0Omiz+UhGjSKgYU7+b2YY7aN23w7o8CQntqMePFs7LkjA@mail.gmail.com>
	<CANEZrP06gk-JhKaNpvYUTfjFq9AGnCay9=pjUGpVMjMSuX3_ew@mail.gmail.com>
	<CAJna-HhX8HOci0KMe4ZScr4QW792S3n5twvU0QhbQe1N_3q7_w@mail.gmail.com>
	<6E6F88E9-5698-419B-927C-F65A5FCABBE9@gmail.com>
	<CAJHLa0PYfuJg3daPvzPFZpFz7ezH2RHpJ8zyz2g1NDKppM7rWA@mail.gmail.com>
	<BBF86C9B-6B3D-4A03-AC7B-35619C47091F@gmail.com>
	<CABsx9T13yksenx5aYd4HVqTyVjARx9aTHy=Neu64p6k9FnRRVw@mail.gmail.com>
	<C95DB811-9E6A-4EA2-AE8F-83595C3AC817@gmail.com>
	<CANEZrP0ce4MMX2hOhcGVWt23L_CMn6Cmj9_Okqd0BR9seQXJew@mail.gmail.com>
	<CAJna-HiRChr4M9QL_7ZeKQeV7m5M4-ysnERB1DmK1itJMaGucQ@mail.gmail.com>
Message-ID: <C355A933-5045-4202-82A2-034F89862E39@gmail.com>


> On Jun 25, 2014, at 10:15, slush <slush at centrum.cz> wrote:
> Good standard must be explicit as much as possible. Having million optional fields with ambiguous meaning is even worse than not having these fields.

+1. BIP70 is important. We want to keep it very simple and generalized, or there is a very real risk that implementers will either not bother with it or implement it in buggy, poorly standardized ways. 

Any information not required by the machine should only exist in human-oriented fields (namely, the memo field). 

Let's try to avoid ending up with another horrendously complicated, edge-case-oriented protocol like we programmers frequently complain about. 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/pkcs7-signature
Size: 1593 bytes
Desc: not available
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140625/a3be5f65/attachment.p7s>

From jgarzik at bitpay.com  Wed Jun 25 18:10:58 2014
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Wed, 25 Jun 2014 14:10:58 -0400
Subject: [Bitcoin-development] Proposed BIP 70 extension
In-Reply-To: <CAC1+kJN0ajyfFbLbuxqSph=LhaaHM71=4KAj7W1ggivxuxAvRA@mail.gmail.com>
References: <CANEZrP3iyQ9zQ+hDnooxrjdBO+_Fj+nAkK1Skgk+Gb4gkidPhQ@mail.gmail.com>
	<CAJHLa0Omiz+UhGjSKgYU7+b2YY7aN23w7o8CQntqMePFs7LkjA@mail.gmail.com>
	<CANEZrP06gk-JhKaNpvYUTfjFq9AGnCay9=pjUGpVMjMSuX3_ew@mail.gmail.com>
	<CAJna-HhX8HOci0KMe4ZScr4QW792S3n5twvU0QhbQe1N_3q7_w@mail.gmail.com>
	<6E6F88E9-5698-419B-927C-F65A5FCABBE9@gmail.com>
	<CAJHLa0PYfuJg3daPvzPFZpFz7ezH2RHpJ8zyz2g1NDKppM7rWA@mail.gmail.com>
	<BBF86C9B-6B3D-4A03-AC7B-35619C47091F@gmail.com>
	<CABsx9T13yksenx5aYd4HVqTyVjARx9aTHy=Neu64p6k9FnRRVw@mail.gmail.com>
	<C95DB811-9E6A-4EA2-AE8F-83595C3AC817@gmail.com>
	<CANEZrP0ce4MMX2hOhcGVWt23L_CMn6Cmj9_Okqd0BR9seQXJew@mail.gmail.com>
	<CAC1+kJN0ajyfFbLbuxqSph=LhaaHM71=4KAj7W1ggivxuxAvRA@mail.gmail.com>
Message-ID: <CAJHLa0MaoG2gDkgEkTuV0d3U1=p2Zmr4E-kO=qowpZeRY0q7Ew@mail.gmail.com>

Remember the IETF RFC process.

1) RFCs are never updated.  Extensions go into new RFCs.
2) Build an implementation, write a draft, circulate both.  Then get a
BIP number.
3) As MH indicated, it would be useful to have a living payment
protocol document that _is_ updated.
4) Let's stop calling it BIP70.  That just reinforces the desire to
update the BIP70 document.



On Wed, Jun 25, 2014 at 9:33 AM, Jorge Tim?n <jtimon at monetize.io> wrote:
> +1 on setting up the payment protocol extensions process more formally.
> On the feature itself, it is interesting to note that some
> complementary currencies backed by national currencies offer a
> discount when converting from fiat to complementary, which has an
> equivalent effect to this "discount for paying with btc". The main
> difference is that in local currencies the merchants are a relatively
> small group and the discount is uniform whereas here each merchant can
> set his own discount. There's scientific studies on how different
> currency features like these discounts affect adoption, velocity and
> other variables. I can ask for them if anyone is interested.
>
> On the implementation, I think a percentage/proportion would be
> preferable over an amount in satoshis.
> Let's imagine for a second that the bitcoin payment protocol ends up
> being a generalized and universal payment protocol. The field would be
> really something like "discount/additional_charge for paying with the
> chosen currency/payment_method".
> You could have 0.95 for a 5% discount or 1.05 for a 5% additional
> charge. Mhmm, maybe a flat discount/charge in addition to the
> proportional one...
>
> On security, being an optional field, I don't see how can it harm anything.
> It is true that the merchants can lie about the discount, but wallets
> can be smart or stupid about it, or just completely ignore the field
> as they wish.
>
> Anyway, it feels like a random simple extension as an excuse to
> develop the extension process. If it gets too complicated we can start
> with a simpler and less critical one but it's hard for me to imagine
> it.
>
>
> On 6/25/14, Mike Hearn <mike at plan99.net> wrote:
>>>
>>> I agree. It would be even sillier to start specifying container formats
>>> for random one-off "that would be kind of nice, I guess" features.
>>>
>>
>> No, it'd be sensible.
>>
>> Here's a list I drew up a long time ago of features I imagined adding to
>> the payment protocol:
>>
>> https://bitcointalk.org/index.php?topic=270055.msg2890147#msg2890147
>>
>> The protocol is there to contain features! There is zero benefit to
>> slavishly following some religious notion of purity or minimalism here. The
>> shared resource in question is just varint encoded integers. So, we should
>> be guided by what will help our users and what will help adoption.
>>
>> Anyway, Gavin asked me to start handling more BIP 70 stuff a few weeks ago.
>> I want to use something simple to set up the extensions process more
>> formally. IMO we need a "living document" version of the payment protocol
>> with all the different extensions out there folded into it, to simplify
>> programming tasks and ensure field numbers don't collide.
>>
>
>
> --
> Jorge Tim?n
>
> ------------------------------------------------------------------------------
> Open source business process management suite built on Java and Eclipse
> Turn processes into business applications with Bonita BPM Community Edition
> Quickly connect people, data, and systems into organized workflows
> Winner of BOSSIE, CODIE, OW2 and Gartner awards
> http://p.sf.net/sfu/Bonitasoft
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development



-- 
Jeff Garzik
Bitcoin core developer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From k.okupski at googlemail.com  Thu Jun 26 11:30:01 2014
From: k.okupski at googlemail.com (Krzysztof Okupski)
Date: Thu, 26 Jun 2014 13:30:01 +0200
Subject: [Bitcoin-development] Bitcoin Protocol Specification
Message-ID: <53AC0439.9070501@googlemail.com>

Dear all,

a while ago I've posted a work of mine, namely the Bitcoin Protocol
Specification,
that should by now ring a bell to some of you. Ever since I've received
plenty of
comments from Bitcoin Core developers, Bitcoin enthusiasts and many others.
For the encouraging words and improvement proposals I'm very grateful. I
tried
to incorporate to the best of my abilities and am happy to present a
revised version.
As before, it can be found under:

http://enetium.com/resources/Bitcoin.pdf

I hope it will prove useful to the community and thank in advance for
any further
improvement proposals.


Kind regards,
Krzysztof




From laanwj at gmail.com  Mon Jun 30 10:16:01 2014
From: laanwj at gmail.com (Wladimir)
Date: Mon, 30 Jun 2014 12:16:01 +0200
Subject: [Bitcoin-development] About the small number of bitcoin nodes
In-Reply-To: <CA+8=xu+GPykmKdAjxLdRA3QoCPR8azervT9uO-GVraNowAb49g@mail.gmail.com>
References: <CA+8=xu+GPykmKdAjxLdRA3QoCPR8azervT9uO-GVraNowAb49g@mail.gmail.com>
Message-ID: <CA+s+GJBCzftgBrng1_WhuW8JE5uz9m0kuhzNh8hXkqK0+jrGMg@mail.gmail.com>

> - Create a "grafical interface" for bitcoind on Linux servers:
> Create a command, for example "bitcoind show" that shows a nice summary in
> your Terminal (Console) with all the data that a node administrator wants to
> know.
> When I say "grafical interface" I mean like "top" command, an interface made
> out of characters in ASCII.

FYI someone created this! It's still in the initial stages, I'm sure
the author could use some help to grow this into a full-functional
node admin tool.

https://github.com/azeteki/bitcoind-ncurses

Wladimir



From alexykot at gmail.com  Mon Jun 30 19:26:36 2014
From: alexykot at gmail.com (Alex Kotenko)
Date: Mon, 30 Jun 2014 20:26:36 +0100
Subject: [Bitcoin-development] Payment Protocol for Face-to-face Payments
In-Reply-To: <A1269E16-63BC-44D5-B460-D793D45587AD@riseup.net>
References: <leuunm$tjk$1@ger.gmane.org>
	<CANEZrP3nQfvDArKTRgje0Cus4G2JD_zpxSjA3fXfxM2TNAP80Q@mail.gmail.com>
	<CALDj+BafD+6KTNcYDBEu5gNPzYozSkiC-JCxrY-PzXL2DYBRsw@mail.gmail.com>
	<CAJHLa0N4J_Z907+D0ENSNKfNAW2N=7Jf4JzSCO=SU558GtGTzA@mail.gmail.com>
	<lge7nk$3mf$2@ger.gmane.org>
	<CANEZrP0J849oDvMWjf8LWi0xj44Q8DaUwDip5_smVBMNgeQ3mw@mail.gmail.com>
	<CALDj+BZJ0rSKuDHdbL7ANN0Vtaa3-KGYgusqMDzzB-CUxjMz7g@mail.gmail.com>
	<CANEZrP3szn=oQS+ZuqSzjUoSAjtkyPxPWJFaU1vDW43dRNVeNQ@mail.gmail.com>
	<20140320215208.GC88006@giles.gnomon.org.uk>
	<CANEZrP3kHRJ6U-O_Jgei4U6s9GyQGvB_p5ChtcHJEkYR0wWPvQ@mail.gmail.com>
	<20140326224826.GE62995@giles.gnomon.org.uk>
	<CANEZrP2HtJsOf5zOsPz32U=Jot7U9k80yEu=hj5uMPkRC+WGsQ@mail.gmail.com>
	<lgvnc2$eu4$1@ger.gmane.org>
	<CANEZrP1==hL1mW6SWV0qXUMVVx7U_HUXtorpb7qVK2R4mOfzbg@mail.gmail.com>
	<A1269E16-63BC-44D5-B460-D793D45587AD@riseup.net>
Message-ID: <CALDj+BYkOyNuEiiuTgjd7L-ZeHN4Mb4034W+OeCFob1RwJn=Vg@mail.gmail.com>

It took some time but we have finally implemented bluetooth integration
offered by Andreas in our bitcoin payment terminals.

?However it's not ideal at the moment. Basically the main problem is that
in the BIP72 there is no way to provide a fallback alternative URI for
payment request fetch if client wallet supports BIP70 but doesn't not
support fetching over bluetooth or bluetooth connection fails for any
reason.
There is a way to define alternative URIs inside payment request itself,
but that doesn't really work as client first needs to get payment request
message itself somehow and this is exactly the problem.

As far as I see there is three ways to solve that:
1. add new URI parameter for bluetooth address
  (e.g. r=http://<web_address>&rbt=bt:<BT_MAC_addres>).
2. allow multiple "r" parameters
  (e.g. r=http://<web_address>&r=bt:<BT_MAC_addres>).
3. allow "r" to be an array
  (e.g. r%5B0%5D=http://<web_address>&r%5B1%5D=bt:<BT_MAC_addres>).

Option #1 isn't great at all, as it solves existing problem, but not
provides any way to solve same problem appearing again for another possible
protocol.

Options #2 & #3 may be working and seem to be nearly equal, and both are
not great in the way that URI parser behavior in these cases is not clearly
defined. I've checked through relevant RFCs and found nothing specific
about this. According to my limited web experience the array scheme is
working better than multiple repeating parameters.

So I'm looking for some advice on which route of three proposed may be
better here, or if there are any other ways I'm missing.


2014-03-27 13:31 GMT+00:00 vv01f <vv01f at riseup.net>:

> Companies can have a Cert with their name via CAcert. It requires some
> work though to get assured as an organisation.
> Did you already think about what CA is to be trusted or do users need to
> do that. The least good decision in my POV would be to accept OS/browser
> built in CAs only.
>
> Am 27.03.2014 um 11:08 schrieb Mike Hearn <mike at plan99.net>:
>
>  But these cases are the norm, rather than the exception.
>>
>
> Well, you're lucky, you live in Berlin. Most of the payments I make with
> Bitcoin are online, to websites. So this will differ between people.
>
> I wonder how critical it is. Let's say you are paying for a meal. In your
> head the place you're at is just "the little Indian restaurant on the
> corner". In the companies register and therefore certificate it's something
> like "Singh Food GmbH". That's probably good enough to prevent shenanigans.
> Even if there's a virus on your phone, it can't really replace the cert
> with a random stolen one, otherwise your meal could show up like "IronCore
> Steel Inc" or something that's obviously bogus. It'd have to be an
> incredibly smart virus that knew how to substitute one name for a different
> one, from a large library of stolen identities, such that the swap seemed
> plausible. That sounds very hard, certainly too hard to bother with for
> stealing restaurant fees.
>
> And if a waiter at the restaurant is corrupt and they replace the cert
> with one that's for their own 1-man business "BP-Gupta" or something, OK,
> you might pay the wrong person by mistake. But eventually the corrupt
> waiter will be discovered and then someone will have proof of what they
> did. It's FAR more likely they'd just strip the signature entirely and try
> to convince you the restaurant doesn't use BIP70 at all.
>
> Still, if we want to fix this, one approach I was thinking about is to
> have a super-cheesy CA just for us that issues certs with addresses in
> them, for any name you ask for. That is, if you say you want a cert for
> "Shamrock Irish Pub, Wollishofen, Zurich, CH" then it either sends a
> postcard to that address with a code to check ownership of the address, or
> it checks ownership of the place on Google Maps (which does the same
> postcard trick but for free!).
>
> That doesn't work for vending machines, but perhaps we just don't care
> about those. If a MITM steals your lunch money, boo hoo.
>
>
> ------------------------------------------------------------------------------
>
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
>
> ------------------------------------------------------------------------------
>
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140630/c57b4bfb/attachment.html>

