From wtogami at gmail.com  Sun Dec  1 11:05:28 2013
From: wtogami at gmail.com (Warren Togami Jr.)
Date: Sun, 1 Dec 2013 01:05:28 -1000
Subject: [Bitcoin-development] Coin Control, Send crash on MacOS X
Message-ID: <CAEz79PptC4VZr19iHYx5iA2K8SZ2aJbUvnt8_ZGRwbBJ6=WW3A@mail.gmail.com>

https://github.com/litecoin-project/bitcoinomg/commits/0.8.5-OMG6
http://download1.rpmfusion.org/~warren/bitcoin-0.8.5-OMG6/
I've been backporting patches from master and Litecoin to make a Bitcoin
0.8 client with more features.  It works quite well on Linux and Win32.

http://pastebin.com/g8QqheGc
Today we discovered a rare crash that can happen on MacOS X. toffoo and
coblee reproduced it on MacOS X 10.9 and I reproduced it on 10.6.8. It
seems to be some kind of race condition involving SendCoinsEntry::clear().


   1. 11  QtGui                               0x00e28141
   QWidget::setFocus(Qt::FocusReason) + 289
   2. 12  org.bitcoinfoundation.Bitcoin-Qt    0x002ca665
   SendCoinsEntry::clear() + 101


This build was made with Xcode 3.2.6 on MacOS X with MacPorts qt4-mac
qt-4.8.4, roughly meant to approximate Gavin's build environment for the
0.8.x releases.

With this unfamiliar build environment I have been unsuccessful at building
master so I am unable to confirm if this crash exists there.  I am trying
qt-4.8.5 next ... but even if I manage to build it, it is exceedingly
difficult to reproduce...

Warren
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131201/def7da00/attachment.html>

From mike at plan99.net  Sun Dec  1 11:51:46 2013
From: mike at plan99.net (Mike Hearn)
Date: Sun, 1 Dec 2013 12:51:46 +0100
Subject: [Bitcoin-development] Floating fees and SPV clients
Message-ID: <CANEZrP3tGdFh6oG5fbX9JbU6sYbbex1cq=0tQB-0A4aDrdbXrQ@mail.gmail.com>

Lately I was pondering how to make floating fees and SPV wallets work well
together.

I propose the following plan:

1) 0.9 ships with something dead simple, like a command to query what a
node estimates and then clients just take the average, or cross-check a
centralised estimate against the P2P network. It's fast to implement and
simple, but not very secure or decentralised. However it will allow the
feature to launch on some kind of reasonable timeframe.

2) We bump the protocol version and the tx message now gets an optional
protobuf buffer stuck on the end. The first thing put in this protobuf is a
list of the values of the inputs. Using this data, the fee paid by a
transaction can be calculated. In step 2 the data is unauthenticated.

3) Some SPV wallets already set themselves up so that they sync with the
network in the background, e.g. the Android wallet syncs at least every 24
hours. This should become more common, using scheduler capabilities built
into most operating systems. When the wallet syncs with the network, it
sets a deliberately very noisy Bloom filter on its peers and waits around
for 30-60 seconds or so. The wallet observes some of the broadcasts taking
place and records the hashes and associated fees that were paid to disk.
Next time it syncs, it includes the observed hashes into the Bloom filter
used to download the chain, and thus learns how quickly they confirmed. It
can calculate its own fee estimate from that.

4) Finally, when we next hard fork, we make v2 transactions include the
output value in the signature, same as the output script (this proposal has
been on the forums for a while now). That allows the fee data added in step
2 to be cross-checked against the signatures on the inputs, thus
authenticating it.


I think this is a small and easy set of steps that would make it quite hard
to attack - malicious nodes could make it appear that some transactions
never confirmed thus seeming to force the price up, but it's easy to simply
exclude transactions which never confirm at all from the calculations. Plus
of course you can cross-check nodes against each other to try and catch
nodes that are failing to match transactions properly.

One obvious concern is what to do if nodes don't converge on very similar
estimates. Wallets will always want to pay the lowest fee possible, so that
means they'll always be riding the very edge of what's acceptable, opening
up tx propagation to random flaky failures if fee estimates change whilst a
transaction is in progress, or if some nodes don't calculate the same
estimates as others.

If a wallet gets a reject message for a tx that has a fee that are by its
own estimates acceptable, what should it do? What if only some nodes report
that and others don't?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131201/d06702fb/attachment.html>

From andreas at schildbach.de  Sun Dec  1 12:15:04 2013
From: andreas at schildbach.de (Andreas Schildbach)
Date: Sun, 01 Dec 2013 13:15:04 +0100
Subject: [Bitcoin-development] Floating fees and SPV clients
In-Reply-To: <CANEZrP3tGdFh6oG5fbX9JbU6sYbbex1cq=0tQB-0A4aDrdbXrQ@mail.gmail.com>
References: <CANEZrP3tGdFh6oG5fbX9JbU6sYbbex1cq=0tQB-0A4aDrdbXrQ@mail.gmail.com>
Message-ID: <l7f97u$jdg$1@ger.gmane.org>

On 12/01/2013 12:51 PM, Mike Hearn wrote:

> I propose the following plan:

Thanks taking the initiative and writing this up!

> If a wallet gets a reject message for a tx that has a fee that are by
> its own estimates acceptable, what should it do? What if only some nodes
> report that and others don't?

As long as the tx is not confirmed (by a broadcast), apps can offer to
bump up the fee a little bit.





From mike at plan99.net  Sun Dec  1 13:41:52 2013
From: mike at plan99.net (Mike Hearn)
Date: Sun, 1 Dec 2013 14:41:52 +0100
Subject: [Bitcoin-development] Floating fees and SPV clients
In-Reply-To: <l7f97u$jdg$1@ger.gmane.org>
References: <CANEZrP3tGdFh6oG5fbX9JbU6sYbbex1cq=0tQB-0A4aDrdbXrQ@mail.gmail.com>
	<l7f97u$jdg$1@ger.gmane.org>
Message-ID: <5E4597E4-C1C7-4536-8CF0-82EDD7715DAB@plan99.net>

> As long as the tx is not confirmed (by a broadcast), apps can offer to
> bump up the fee a little bit.

Unfortunately there are risks to that approach. 

The most obvious one is that nodes could keep sending reject messages to get wallets to attach ridiculously high fees. If half a wallets peers do this and the other half don?t, then effectively the wallet will double spend against itself. The bad nodes can keep the fat transaction and send it directly to a corrupt miner, no broadcast. If some other miner includes the original normal transaction, no problem, just take it out of the current block. If the corrupt miner finds the current block, they get to claim huge fee premiums.

Quite apart from the problem of malicious nodes/miners, how would you represent this in the wallet GUI? Current wallets are designed on the assumption that 1 payment == 1 transaction == 1 paid fee. If a single payment could have several different fees, and there?s no way to know which you will actually pay until later, then complexity would explode. Even the notion of balance would become even more complicated than it already is.

So I really don?t like the idea of creating different transactions depending on error messages from remote nodes. The only time when it could make sense is if *all* nodes reject a transaction. Then (assuming no MITM) you can assume the first transaction can be thrown away and a new attempt made.

But if you think about what the UI flows for that would look like - it?s just a mess.

There are other risks to fee estimation. Let?s say wallet authors create transactions with exactly the estimated fee needed to get into the next block. But due to mempool skew, estimates vary, and so those transactions don?t propagate cleanly everywhere. Now we have two problems:

1) Unpredictable failure to enter the mempools can lead to double spending and slow confirmations

2) Wallet authors may be tempted to ensure that doesn?t happen by taking the estimate, adding 10% and using that. But then if a bunch of popular wallets all do the same thing, the estimation algorithm might get confused and decide that as everyone seems to be attaching a fee of X+10%, the correct estimate for what fee to attach is X+10%. Then wallets would immediate raise their attached fees again and you?d enter into a infinite upward spiral.

The more I think about this, the more complicated it gets.

It?s tempting to try and just push all the complexity onto the merchant side, but one of the best things about Bitcoin is there isn?t any strong notion of ?merchant? - that?s inherent to being peer to peer. So just hand-waving and saying sellers will deal with complicated fee processes is just a punt.

-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/pkcs7-signature
Size: 4127 bytes
Desc: not available
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131201/56554bc4/attachment.p7s>

From andreas at schildbach.de  Sun Dec  1 16:50:10 2013
From: andreas at schildbach.de (Andreas Schildbach)
Date: Sun, 01 Dec 2013 17:50:10 +0100
Subject: [Bitcoin-development] Floating fees and SPV clients
In-Reply-To: <5E4597E4-C1C7-4536-8CF0-82EDD7715DAB@plan99.net>
References: <CANEZrP3tGdFh6oG5fbX9JbU6sYbbex1cq=0tQB-0A4aDrdbXrQ@mail.gmail.com>	<l7f97u$jdg$1@ger.gmane.org>
	<5E4597E4-C1C7-4536-8CF0-82EDD7715DAB@plan99.net>
Message-ID: <l7fpbn$hf6$1@ger.gmane.org>

(my post hasn't shown up for an hour, so I'm sending it again)


On 12/01/2013 02:41 PM, Mike Hearn wrote:

>> As long as the tx is not confirmed (by a broadcast), apps can offer to
>> bump up the fee a little bit.
>
> Unfortunately there are risks to that approach.

I assume you're right, since I do not have so much experience with game
theory.

About the UI:

Generally, for pending tx I'd like to measure time they're not being
broadcast-confirmed and count blocks that they missed being included.
Both can be combined into adapting the current generic messages ("This
payment should become spendable shortly" for incoming and "This payment
has not been transmitted yet" for outgoing transactions). Hint:
Statistics could be offered by bitcoinj.

For outgoing transactions, if it is very clear that they're never going
to be confirmed, I'd like to see a "Revoke" button. This would have
saved us some support hassles with the transmit bugs. It could also
offer a "Top up fee" button, which would replace the tx by a new one.
I'm aware about a possible double spend but who cares? It doesn't matter
which of the two transactions gets into the chain, as long as not both
will be included.




From mike at plan99.net  Sun Dec  1 17:19:14 2013
From: mike at plan99.net (Mike Hearn)
Date: Sun, 1 Dec 2013 18:19:14 +0100
Subject: [Bitcoin-development] Floating fees and SPV clients
In-Reply-To: <l7fpbn$hf6$1@ger.gmane.org>
References: <CANEZrP3tGdFh6oG5fbX9JbU6sYbbex1cq=0tQB-0A4aDrdbXrQ@mail.gmail.com>	<l7f97u$jdg$1@ger.gmane.org>
	<5E4597E4-C1C7-4536-8CF0-82EDD7715DAB@plan99.net>
	<l7fpbn$hf6$1@ger.gmane.org>
Message-ID: <39921E12-B411-4430-9D56-04F53906B109@plan99.net>

> Both can be combined into adapting the current generic messages ("This
> payment should become spendable shortly" for incoming and "This payment
> has not been transmitted yet" for outgoing transactions). 

What would the new messages say?

We need to get away from the notion of senders attaching fees anyway. This is the wrong way around because it?s the recipient who cares about double spending risk, not the sender. That?s why merchants keep running into issues with people attaching zero fees. Of course they attach zero fees. They know they aren?t going to double spend. It?s the merchant who cares about getting the security against that.

The UI for sending money should end up dead simple - no mention of fees anywhere, IMO.

The UI for receiving money could be a bit more complicated but even then - I think if ordinary people using smartphone wallets are having to think about how quickly they want their transaction to confirm and adjust fees, etc on the receiving side then we?re getting dangerously close to the usability failure zone.

Unfortunately we lack the protocol pieces to get the right UI here :( Someone needs to sit down and figure out what the UI *should* look like, in the ideal world, and then work backwards to figure out what needs to be done to get us there.

> For outgoing transactions, if it is very clear that they're never going
> to be confirmed, I'd like to see a "Revoke" button.

Disagree. There should never be any cases in which a transaction doesn?t confirm. Period. I know there have been bugs with bitcoinj that could cause this in the past, but they were bugs and they got fixed/will get fixed.

Settlement failure is just unacceptable and building a UI around the possibility will just encourage people to think of it as normal, when it should not be so.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/pkcs7-signature
Size: 4127 bytes
Desc: not available
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131201/7316497c/attachment.p7s>

From andreas at schildbach.de  Sun Dec  1 17:40:55 2013
From: andreas at schildbach.de (Andreas Schildbach)
Date: Sun, 01 Dec 2013 18:40:55 +0100
Subject: [Bitcoin-development] Floating fees and SPV clients
In-Reply-To: <39921E12-B411-4430-9D56-04F53906B109@plan99.net>
References: <CANEZrP3tGdFh6oG5fbX9JbU6sYbbex1cq=0tQB-0A4aDrdbXrQ@mail.gmail.com>	<l7f97u$jdg$1@ger.gmane.org>	<5E4597E4-C1C7-4536-8CF0-82EDD7715DAB@plan99.net>	<l7fpbn$hf6$1@ger.gmane.org>
	<39921E12-B411-4430-9D56-04F53906B109@plan99.net>
Message-ID: <l7fsat$hf3$1@ger.gmane.org>

On 12/01/2013 06:19 PM, Mike Hearn wrote:
>> Both can be combined into adapting the current generic messages ("This
>> payment should become spendable shortly" for incoming and "This payment
>> has not been transmitted yet" for outgoing transactions).
>
> What would the new messages say?

Well, for starters I'd suggest something like

"This payment did not become spendable since xxx minutes. Check with the
sender if s/he paid the Bitcoin network fee. Check if your internet
connection is working properly." (incoming)

"This payment still has not been transmitted. Check if your internet
connection is working properly." (outgoing)

> We need to get away from the notion of senders attaching fees anyway.
This is the wrong way around because it?s the recipient who cares about
double spending risk, not the sender. That?s why merchants keep running
into issues with people attaching zero fees. Of course they attach zero
fees. They know they aren?t going to double spend. It?s the merchant who
cares about getting the security against that.

Guess you're right. But as you said, we're not there yet.

> The UI for sending money should end up dead simple - no mention of
fees anywhere, IMO.

Agreed, if the sender does not need to pay a fee any more. On the
receiving side it of course needs to be mentioned. (Or the other way
round, as of today.)

> Unfortunately we lack the protocol pieces to get the right UI here :(
Someone needs to sit down and figure out what the UI *should* look like,
in the ideal world, and then work backwards to figure out what needs to
be done to get us there.

(The ideal world doesn't need a UI for money.)

>> For outgoing transactions, if it is very clear that they're never going
>> to be confirmed, I'd like to see a "Revoke" button.
>
> Disagree. There should never be any cases in which a transaction
doesn?t confirm. Period. I know there have been bugs with bitcoinj that
could cause this in the past, but they were bugs and they got fixed/will
get fixed.
>
> Settlement failure is just unacceptable and building a UI around the
possibility will just encourage people to think of it as normal, when it
should not be so.

I fully understand your point of view. However, its not the reality
currently. (Hopefully it is, after the fixes to bitcoinj.)





From mike at plan99.net  Sun Dec  1 17:52:27 2013
From: mike at plan99.net (Mike Hearn)
Date: Sun, 1 Dec 2013 18:52:27 +0100
Subject: [Bitcoin-development] Floating fees and SPV clients
In-Reply-To: <l7fsat$hf3$1@ger.gmane.org>
References: <CANEZrP3tGdFh6oG5fbX9JbU6sYbbex1cq=0tQB-0A4aDrdbXrQ@mail.gmail.com>	<l7f97u$jdg$1@ger.gmane.org>	<5E4597E4-C1C7-4536-8CF0-82EDD7715DAB@plan99.net>	<l7fpbn$hf6$1@ger.gmane.org>
	<39921E12-B411-4430-9D56-04F53906B109@plan99.net>
	<l7fsat$hf3$1@ger.gmane.org>
Message-ID: <8071CCBC-2583-4561-9D78-CF9FBAAFB95A@plan99.net>


> "This payment did not become spendable since xxx minutes. Check with the
> sender if s/he paid the Bitcoin network fee. Check if your internet
> connection is working properly." (incoming)

That seems reasonable.

The other message should be implementable today, I think? If numBroadcastPeers > 0 post 0.10.3 then you know the tx made it out to the internet.

Unfortunately if nodes start to diverge a lot in terms of what they will accept, then ?transmitted? is no longer a clean binary yes/no thing. Guess we?ll have to jump that hurdle when we come to it.

> Guess you're right. But as you said, we're not there yet.

The payment protocol at least would need some notion of fee, or possibly (better?) the ability for a recipient to specify some inputs as well as some outputs.

Originally I think we were hoping for child-pays-for-parent. I guess that needs someone to sit down and focus on it for a while, assuming we still think that?s a good idea.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/pkcs7-signature
Size: 4127 bytes
Desc: not available
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131201/e59627ff/attachment.p7s>

From pete at petertodd.org  Sun Dec  1 18:12:11 2013
From: pete at petertodd.org (Peter Todd)
Date: Sun, 1 Dec 2013 13:12:11 -0500
Subject: [Bitcoin-development] Floating fees and SPV clients
In-Reply-To: <39921E12-B411-4430-9D56-04F53906B109@plan99.net>
References: <CANEZrP3tGdFh6oG5fbX9JbU6sYbbex1cq=0tQB-0A4aDrdbXrQ@mail.gmail.com>
	<l7f97u$jdg$1@ger.gmane.org>
	<5E4597E4-C1C7-4536-8CF0-82EDD7715DAB@plan99.net>
	<l7fpbn$hf6$1@ger.gmane.org>
	<39921E12-B411-4430-9D56-04F53906B109@plan99.net>
Message-ID: <20131201181211.GA20533@tilt>

On Sun, Dec 01, 2013 at 06:19:14PM +0100, Mike Hearn wrote:
> > Both can be combined into adapting the current generic messages ("This
> > payment should become spendable shortly" for incoming and "This payment
> > has not been transmitted yet" for outgoing transactions). 
> 
> What would the new messages say?
> 
> We need to get away from the notion of senders attaching fees anyway. This is the wrong way around because it?s the recipient who cares about double spending risk, not the sender. That?s why merchants keep running into issues with people attaching zero fees. Of course they attach zero fees. They know they aren?t going to double spend. It?s the merchant who cares about getting the security against that.
> 
> The UI for sending money should end up dead simple - no mention of fees anywhere, IMO.
> 
> The UI for receiving money could be a bit more complicated but even then - I think if ordinary people using smartphone wallets are having to think about how quickly they want their transaction to confirm and adjust fees, etc on the receiving side then we?re getting dangerously close to the usability failure zone.
> 
> Unfortunately we lack the protocol pieces to get the right UI here :( Someone needs to sit down and figure out what the UI *should* look like, in the ideal world, and then work backwards to figure out what needs to be done to get us there.
> 
> > For outgoing transactions, if it is very clear that they're never going
> > to be confirmed, I'd like to see a "Revoke" button.
> 
> Disagree. There should never be any cases in which a transaction doesn?t confirm. Period. I know there have been bugs with bitcoinj that could cause this in the past, but they were bugs and they got fixed/will get fixed.
> 
> Settlement failure is just unacceptable and building a UI around the possibility will just encourage people to think of it as normal, when it should not be so.

Bitcoin is and always will be limited in capacity - transactions may not
confirm in a reasonable about of time because of high-demand and/or DoS
attacks. Giving senders and/or receivers the ability to increase fees
after the fact is the only way you'll ever be able to deal with these
situations. Of course, in those situations revoke isn't going to be 100%
reliable until the txins get spent elsewhere, but that just indicates
the UI problem is around that kind of functionality is subtle.


re: merchants paying tx fees, child-pays-for-parent is inefficient, and
micropayments direct to miners isn't implemented. (though I did write up
a rough sketch of how to do that in a decentralized fashion on
#bitcoin-dev) Propose something concrete.

-- 
'peter'[:-1]@petertodd.org
000000000000000f9102d27cfd61ea9e8bb324593593ca3ce6ba53153ff251b3
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 490 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131201/daa712d9/attachment.sig>

From mike at plan99.net  Sun Dec  1 18:18:07 2013
From: mike at plan99.net (Mike Hearn)
Date: Sun, 1 Dec 2013 19:18:07 +0100
Subject: [Bitcoin-development] Floating fees and SPV clients
In-Reply-To: <20131201181211.GA20533@tilt>
References: <CANEZrP3tGdFh6oG5fbX9JbU6sYbbex1cq=0tQB-0A4aDrdbXrQ@mail.gmail.com>
	<l7f97u$jdg$1@ger.gmane.org>
	<5E4597E4-C1C7-4536-8CF0-82EDD7715DAB@plan99.net>
	<l7fpbn$hf6$1@ger.gmane.org>
	<39921E12-B411-4430-9D56-04F53906B109@plan99.net>
	<20131201181211.GA20533@tilt>
Message-ID: <31CF9128-4BFA-48E6-9B68-9732E914E6D0@plan99.net>

> Bitcoin is and always will be limited in capacity - transactions may not
> confirm in a reasonable about of time because of high-demand and/or DoS
> attacks.

I agree in the general case, but I was talking about the mobile wallet case specifically (i.e. people who are sending money between themselves or making small purchases of physical things). I think Bitcoin should be able to scale to handle these sorts of ordinary every-day transactions. Where I?d expect to see transactions falling off the edge is in more specialised cases like very small single micropayments, or ?optional? internal transactions like mixing/re/defragmentation of wallets that don?t correspond to an actual payment. Those sorts of transactions would I guess be the first to go when faced with a sudden capacity crunch, but they wouldn?t show up in a mobile wallet UI anyway.

> re: merchants paying tx fees, child-pays-for-parent is inefficient

I know the existing code is, but is that fundamentally the case or just how the code has been written? I haven?t looked at this issue much but I know you?ve worked on it, so I?m curious to learn about why it?s inefficient and whether there are any fixes possible.	
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/pkcs7-signature
Size: 4127 bytes
Desc: not available
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131201/db6d97f7/attachment.p7s>

From pete at petertodd.org  Sun Dec  1 18:37:49 2013
From: pete at petertodd.org (Peter Todd)
Date: Sun, 1 Dec 2013 13:37:49 -0500
Subject: [Bitcoin-development] Floating fees and SPV clients
In-Reply-To: <31CF9128-4BFA-48E6-9B68-9732E914E6D0@plan99.net>
References: <CANEZrP3tGdFh6oG5fbX9JbU6sYbbex1cq=0tQB-0A4aDrdbXrQ@mail.gmail.com>
	<l7f97u$jdg$1@ger.gmane.org>
	<5E4597E4-C1C7-4536-8CF0-82EDD7715DAB@plan99.net>
	<l7fpbn$hf6$1@ger.gmane.org>
	<39921E12-B411-4430-9D56-04F53906B109@plan99.net>
	<20131201181211.GA20533@tilt>
	<31CF9128-4BFA-48E6-9B68-9732E914E6D0@plan99.net>
Message-ID: <20131201183748.GA21280@tilt>

On Sun, Dec 01, 2013 at 07:18:07PM +0100, Mike Hearn wrote:
> > Bitcoin is and always will be limited in capacity - transactions may not
> > confirm in a reasonable about of time because of high-demand and/or DoS
> > attacks.
> 
> I agree in the general case, but I was talking about the mobile wallet case specifically (i.e. people who are sending money between themselves or making small purchases of physical things). I think Bitcoin should be able to scale to handle these sorts of ordinary every-day transactions. Where I?d expect to see transactions falling off the edge is in more specialised cases like very small single micropayments, or ?optional? internal transactions like mixing/re/defragmentation of wallets that don?t correspond to an actual payment. Those sorts of transactions would I guess be the first to go when faced with a sudden capacity crunch, but they wouldn?t show up in a mobile wallet UI anyway.

Maybe, maybe not. We have no idea what fees will be because the system's
entire capacity is, and always will be, limited. That's just how
fundementally unscalable systems with huge global state work. What
demand will be for that limited capacity is unknown.


> > re: merchants paying tx fees, child-pays-for-parent is inefficient
> 
> I know the existing code is, but is that fundamentally the case or just how the code has been written? I haven?t looked at this issue much but I know you?ve worked on it, so I?m curious to learn about why it?s inefficient and whether there are any fixes possible.	

No, Luke's existing code uses good algorithms with O(n) scaling for n
transactions. The inefficiency is needing a second transaction, bloating
the blockchain and driving up fees.

-- 
'peter'[:-1]@petertodd.org
000000000000000f9102d27cfd61ea9e8bb324593593ca3ce6ba53153ff251b3
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 490 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131201/b55f69e4/attachment.sig>

From patrick at meadia.com.au  Mon Dec  2 13:54:30 2013
From: patrick at meadia.com.au (Patrick Mead)
Date: Tue, 3 Dec 2013 00:24:30 +1030
Subject: [Bitcoin-development] Floating fees and SPV clients
In-Reply-To: <39921E12-B411-4430-9D56-04F53906B109@plan99.net>
References: <CANEZrP3tGdFh6oG5fbX9JbU6sYbbex1cq=0tQB-0A4aDrdbXrQ@mail.gmail.com>
	<l7f97u$jdg$1@ger.gmane.org>
	<5E4597E4-C1C7-4536-8CF0-82EDD7715DAB@plan99.net>
	<l7fpbn$hf6$1@ger.gmane.org>
	<39921E12-B411-4430-9D56-04F53906B109@plan99.net>
Message-ID: <CAGLkj4C9fyAX1CnB0oZH3BwLRQp6WOo9kLUqDhRUSA6y3LxYvg@mail.gmail.com>

First time posting to this mailing list so feel free to ignore me if
this is a stupid idea.


On Mon, Dec 2, 2013 at 3:49 AM, Mike Hearn <mike at plan99.net> wrote:
>
> We need to get away from the notion of senders attaching fees anyway. This is the wrong
> way around because it?s the recipient who cares about double spending risk, not the sender.
>


It seems to me that a common problem currently revolves around
accepting transactions in
retail scenarios, such as paying for a sandwich from Subway. A
solution could be to give the
vendor responsibility for setting the fee, which means they can choose
the trade-off that works
best for them in terms of fee size vs. speed of processing.

Idea:
Add a "fee" parameter to the payment URI specification.
When processing the transaction, the customer's UI should show only
the total price, including
both the transfer amount and the fee. The vendor only accepts the
transaction if the customer
uses the right amount and fee. If the fee is too small (for example,
the user might be using an
older wallet and has selected a fee of zero), the vendor can issue a
refund transaction
immediately and tell the user to try again.

Pros:
- could easily be implemented immediately
- old wallets would still be supported by just manually entering the
fee as users do now
- no greater risk of double spending on either side
- maintains the distributed nature of the system
- relies on humans to judge the fee (who are much less likely to
spiral infinitely upwards)
- flexible enough to support varying sizes of transaction and varying
degrees of security

Cons
- requires the vendor to have sufficient understanding of Bitcoin to
make the trade-off
- doesn't solve the problem of selecting a fee for transactions
between individuals/laymen
- doesn't solve fee selection for automated transactions such as
mixing/de/refragmentation


Thoughts?



From mike at plan99.net  Mon Dec  2 14:33:46 2013
From: mike at plan99.net (Mike Hearn)
Date: Mon, 2 Dec 2013 15:33:46 +0100
Subject: [Bitcoin-development] Floating fees and SPV clients
In-Reply-To: <CAGLkj4C9fyAX1CnB0oZH3BwLRQp6WOo9kLUqDhRUSA6y3LxYvg@mail.gmail.com>
References: <CANEZrP3tGdFh6oG5fbX9JbU6sYbbex1cq=0tQB-0A4aDrdbXrQ@mail.gmail.com>
	<l7f97u$jdg$1@ger.gmane.org>
	<5E4597E4-C1C7-4536-8CF0-82EDD7715DAB@plan99.net>
	<l7fpbn$hf6$1@ger.gmane.org>
	<39921E12-B411-4430-9D56-04F53906B109@plan99.net>
	<CAGLkj4C9fyAX1CnB0oZH3BwLRQp6WOo9kLUqDhRUSA6y3LxYvg@mail.gmail.com>
Message-ID: <CANEZrP1C=Hc-3f-rqQ+wYrPn-eUj52HjN+qRQdJMWvnP+dkK=Q@mail.gmail.com>

Right, as I said earlier:

"The payment protocol at least would need some notion of fee, or possibly
(better?) the ability for a recipient to specify some inputs as well as
some outputs."

Having thought about it a bit more, I think it's better to just have a fee
field that lets the receiver request the sender to attach the given fee.
The outputs would have less value associated with them, so effectively the
seller folds the fee into the price. If the seller is charging a round
price like 1 mBTC, the user sees "1 mBTC" as the price, even if behind the
scenes the created tx only sends 0.99999 BTC

Allowing specification of inputs seems to add too much complexity in other
cases, like when value isn't specified at all.


On Mon, Dec 2, 2013 at 2:54 PM, Patrick Mead <patrick at meadia.com.au> wrote:

> First time posting to this mailing list so feel free to ignore me if
> this is a stupid idea.
>
>
> On Mon, Dec 2, 2013 at 3:49 AM, Mike Hearn <mike at plan99.net> wrote:
> >
> > We need to get away from the notion of senders attaching fees anyway.
> This is the wrong
> > way around because it?s the recipient who cares about double spending
> risk, not the sender.
> >
>
>
> It seems to me that a common problem currently revolves around
> accepting transactions in
> retail scenarios, such as paying for a sandwich from Subway. A
> solution could be to give the
> vendor responsibility for setting the fee, which means they can choose
> the trade-off that works
> best for them in terms of fee size vs. speed of processing.
>
> Idea:
> Add a "fee" parameter to the payment URI specification.
> When processing the transaction, the customer's UI should show only
> the total price, including
> both the transfer amount and the fee. The vendor only accepts the
> transaction if the customer
> uses the right amount and fee. If the fee is too small (for example,
> the user might be using an
> older wallet and has selected a fee of zero), the vendor can issue a
> refund transaction
> immediately and tell the user to try again.
>
> Pros:
> - could easily be implemented immediately
> - old wallets would still be supported by just manually entering the
> fee as users do now
> - no greater risk of double spending on either side
> - maintains the distributed nature of the system
> - relies on humans to judge the fee (who are much less likely to
> spiral infinitely upwards)
> - flexible enough to support varying sizes of transaction and varying
> degrees of security
>
> Cons
> - requires the vendor to have sufficient understanding of Bitcoin to
> make the trade-off
> - doesn't solve the problem of selecting a fee for transactions
> between individuals/laymen
> - doesn't solve fee selection for automated transactions such as
> mixing/de/refragmentation
>
>
> Thoughts?
>
>
> ------------------------------------------------------------------------------
> Rapidly troubleshoot problems before they affect your business. Most IT
> organizations don't have a clear picture of how application performance
> affects their revenue. With AppDynamics, you get 100% visibility into your
> Java,.NET, & PHP application. Start your 15-day FREE TRIAL of AppDynamics
> Pro!
> http://pubads.g.doubleclick.net/gampad/clk?id=84349351&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131202/9f1e85d6/attachment.html>

From jgarzik at bitpay.com  Mon Dec  2 14:37:45 2013
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Mon, 2 Dec 2013 09:37:45 -0500
Subject: [Bitcoin-development] Floating fees and SPV clients
In-Reply-To: <CANEZrP1C=Hc-3f-rqQ+wYrPn-eUj52HjN+qRQdJMWvnP+dkK=Q@mail.gmail.com>
References: <CANEZrP3tGdFh6oG5fbX9JbU6sYbbex1cq=0tQB-0A4aDrdbXrQ@mail.gmail.com>
	<l7f97u$jdg$1@ger.gmane.org>
	<5E4597E4-C1C7-4536-8CF0-82EDD7715DAB@plan99.net>
	<l7fpbn$hf6$1@ger.gmane.org>
	<39921E12-B411-4430-9D56-04F53906B109@plan99.net>
	<CAGLkj4C9fyAX1CnB0oZH3BwLRQp6WOo9kLUqDhRUSA6y3LxYvg@mail.gmail.com>
	<CANEZrP1C=Hc-3f-rqQ+wYrPn-eUj52HjN+qRQdJMWvnP+dkK=Q@mail.gmail.com>
Message-ID: <CAJHLa0P_uzEQ2OG2FTXyD2Zw4RzujNBxKbKD04CSS1sLNpLUUQ@mail.gmail.com>

On Mon, Dec 2, 2013 at 9:33 AM, Mike Hearn <mike at plan99.net> wrote:
> "The payment protocol at least would need some notion of fee, or possibly
> (better?) the ability for a recipient to specify some inputs as well as some
> outputs."

<vendor hat: on>

BitPay noticed this detail last week.  We were noticing that some
transactions were not even reaching our bitcoind border routers (edge
nodes), due to low/no fees.  That led to a long discussion of all
things fee-related.  SPV fees are a big issue.  Getting
child-pays-for-parent in some form out to miners is another.  Getting
a smart, dynamic fee market Gavin mentions is a big need.

-- 
Jeff Garzik
Bitcoin core developer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From mike at plan99.net  Mon Dec  2 14:44:50 2013
From: mike at plan99.net (Mike Hearn)
Date: Mon, 2 Dec 2013 15:44:50 +0100
Subject: [Bitcoin-development] Floating fees and SPV clients
In-Reply-To: <CAJHLa0P_uzEQ2OG2FTXyD2Zw4RzujNBxKbKD04CSS1sLNpLUUQ@mail.gmail.com>
References: <CANEZrP3tGdFh6oG5fbX9JbU6sYbbex1cq=0tQB-0A4aDrdbXrQ@mail.gmail.com>
	<l7f97u$jdg$1@ger.gmane.org>
	<5E4597E4-C1C7-4536-8CF0-82EDD7715DAB@plan99.net>
	<l7fpbn$hf6$1@ger.gmane.org>
	<39921E12-B411-4430-9D56-04F53906B109@plan99.net>
	<CAGLkj4C9fyAX1CnB0oZH3BwLRQp6WOo9kLUqDhRUSA6y3LxYvg@mail.gmail.com>
	<CANEZrP1C=Hc-3f-rqQ+wYrPn-eUj52HjN+qRQdJMWvnP+dkK=Q@mail.gmail.com>
	<CAJHLa0P_uzEQ2OG2FTXyD2Zw4RzujNBxKbKD04CSS1sLNpLUUQ@mail.gmail.com>
Message-ID: <CANEZrP2hf2853w9f4__Ji9v3eRRU0u6pEzPxAmFN+iH067gtnA@mail.gmail.com>

PPv1 doesn't have any notion of fee unfortunately. I suppose it could be
added easily, but we also need to launch the existing feature set.

There's code pending review to implement PPv1 in bitcoinj, unfortunately
it's currently not passing unit tests and the author can't figure out why.
I didn't have time to debug it yet myself. I'm hopeful we can get it
working and merged by EOY.

It may be time to start talking about timelines for 0.9. I am wondering if
floating fees should be broken out of the 0.9 release and launched in a
quick 0.10 followup - if that were to be done then I think 0.9 could go to
beta relatively soon, like early next year. There have been a lot of
improvements already and it'd be a shame to block them all further.



On Mon, Dec 2, 2013 at 3:37 PM, Jeff Garzik <jgarzik at bitpay.com> wrote:

> On Mon, Dec 2, 2013 at 9:33 AM, Mike Hearn <mike at plan99.net> wrote:
> > "The payment protocol at least would need some notion of fee, or possibly
> > (better?) the ability for a recipient to specify some inputs as well as
> some
> > outputs."
>
> <vendor hat: on>
>
> BitPay noticed this detail last week.  We were noticing that some
> transactions were not even reaching our bitcoind border routers (edge
> nodes), due to low/no fees.  That led to a long discussion of all
> things fee-related.  SPV fees are a big issue.  Getting
> child-pays-for-parent in some form out to miners is another.  Getting
> a smart, dynamic fee market Gavin mentions is a big need.
>
> --
> Jeff Garzik
> Bitcoin core developer and open source evangelist
> BitPay, Inc.      https://bitpay.com/
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131202/7981a1ce/attachment.html>

From jgarzik at bitpay.com  Mon Dec  2 14:47:41 2013
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Mon, 2 Dec 2013 09:47:41 -0500
Subject: [Bitcoin-development] Floating fees and SPV clients
In-Reply-To: <CANEZrP2hf2853w9f4__Ji9v3eRRU0u6pEzPxAmFN+iH067gtnA@mail.gmail.com>
References: <CANEZrP3tGdFh6oG5fbX9JbU6sYbbex1cq=0tQB-0A4aDrdbXrQ@mail.gmail.com>
	<l7f97u$jdg$1@ger.gmane.org>
	<5E4597E4-C1C7-4536-8CF0-82EDD7715DAB@plan99.net>
	<l7fpbn$hf6$1@ger.gmane.org>
	<39921E12-B411-4430-9D56-04F53906B109@plan99.net>
	<CAGLkj4C9fyAX1CnB0oZH3BwLRQp6WOo9kLUqDhRUSA6y3LxYvg@mail.gmail.com>
	<CANEZrP1C=Hc-3f-rqQ+wYrPn-eUj52HjN+qRQdJMWvnP+dkK=Q@mail.gmail.com>
	<CAJHLa0P_uzEQ2OG2FTXyD2Zw4RzujNBxKbKD04CSS1sLNpLUUQ@mail.gmail.com>
	<CANEZrP2hf2853w9f4__Ji9v3eRRU0u6pEzPxAmFN+iH067gtnA@mail.gmail.com>
Message-ID: <CAJHLa0M+HP4_irVyqG-J1+h6BRFHX2QZvDopxMxnD+j6ERzEzg@mail.gmail.com>

Current rough timeline proposed for 0.9 was end-of-January, IIRC.

On Mon, Dec 2, 2013 at 9:44 AM, Mike Hearn <mike at plan99.net> wrote:
> PPv1 doesn't have any notion of fee unfortunately. I suppose it could be
> added easily, but we also need to launch the existing feature set.
>
> There's code pending review to implement PPv1 in bitcoinj, unfortunately
> it's currently not passing unit tests and the author can't figure out why. I
> didn't have time to debug it yet myself. I'm hopeful we can get it working
> and merged by EOY.
>
> It may be time to start talking about timelines for 0.9. I am wondering if
> floating fees should be broken out of the 0.9 release and launched in a
> quick 0.10 followup - if that were to be done then I think 0.9 could go to
> beta relatively soon, like early next year. There have been a lot of
> improvements already and it'd be a shame to block them all further.
>
>
>
> On Mon, Dec 2, 2013 at 3:37 PM, Jeff Garzik <jgarzik at bitpay.com> wrote:
>>
>> On Mon, Dec 2, 2013 at 9:33 AM, Mike Hearn <mike at plan99.net> wrote:
>> > "The payment protocol at least would need some notion of fee, or
>> > possibly
>> > (better?) the ability for a recipient to specify some inputs as well as
>> > some
>> > outputs."
>>
>> <vendor hat: on>
>>
>> BitPay noticed this detail last week.  We were noticing that some
>> transactions were not even reaching our bitcoind border routers (edge
>> nodes), due to low/no fees.  That led to a long discussion of all
>> things fee-related.  SPV fees are a big issue.  Getting
>> child-pays-for-parent in some form out to miners is another.  Getting
>> a smart, dynamic fee market Gavin mentions is a big need.
>>
>> --
>> Jeff Garzik
>> Bitcoin core developer and open source evangelist
>> BitPay, Inc.      https://bitpay.com/
>
>



-- 
Jeff Garzik
Bitcoin core developer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From gavinandresen at gmail.com  Tue Dec  3 01:40:35 2013
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Tue, 3 Dec 2013 11:40:35 +1000
Subject: [Bitcoin-development] Floating fees and SPV clients
In-Reply-To: <CANEZrP2hf2853w9f4__Ji9v3eRRU0u6pEzPxAmFN+iH067gtnA@mail.gmail.com>
References: <CANEZrP3tGdFh6oG5fbX9JbU6sYbbex1cq=0tQB-0A4aDrdbXrQ@mail.gmail.com>
	<l7f97u$jdg$1@ger.gmane.org>
	<5E4597E4-C1C7-4536-8CF0-82EDD7715DAB@plan99.net>
	<l7fpbn$hf6$1@ger.gmane.org>
	<39921E12-B411-4430-9D56-04F53906B109@plan99.net>
	<CAGLkj4C9fyAX1CnB0oZH3BwLRQp6WOo9kLUqDhRUSA6y3LxYvg@mail.gmail.com>
	<CANEZrP1C=Hc-3f-rqQ+wYrPn-eUj52HjN+qRQdJMWvnP+dkK=Q@mail.gmail.com>
	<CAJHLa0P_uzEQ2OG2FTXyD2Zw4RzujNBxKbKD04CSS1sLNpLUUQ@mail.gmail.com>
	<CANEZrP2hf2853w9f4__Ji9v3eRRU0u6pEzPxAmFN+iH067gtnA@mail.gmail.com>
Message-ID: <CABsx9T3NQDPL6=pz5BD5DsP0qh0x3LJOCj2H3yY5tzL2_DivGA@mail.gmail.com>

On Tue, Dec 3, 2013 at 12:44 AM, Mike Hearn <mike at plan99.net> wrote:

> PPv1 doesn't have any notion of fee unfortunately. I suppose it could be
> added easily, but we also need to launch the existing feature set.
>

Lets bang out a merchant-pays-fee extension.

How about:

SPEC:

    optional uint64 allowfee    tag number=1000

Allow up to allowfee satoshis to be deducted from the amount paid to be
used to pay Bitcoin network transaction fees. A wallet implementation must
not reduce the amount paid for fees more than allowfee, and transaction
fees must be equal to or greater than the amount reduced.

:ENDSPEC

Rationale: we don't want wallet software giving users discounts-- sending
transactions that are amount-allowfee without paying any fee.  We also want
to allow users to pay MORE in fees, if they need to (fragmented wallet,
maybe, or big CoinJoin transaction) or decide to.


PS: I think there was also consensus that the BIP72  request=...   should
be shortened to just r=... (save 6 chars in QR codes).  Unless somebody
objects, I'll change the BIP and the reference implementation code to make
it so...

-- 
--
Gavin Andresen
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131203/6bd7b54f/attachment.html>

From mike at plan99.net  Tue Dec  3 10:06:39 2013
From: mike at plan99.net (Mike Hearn)
Date: Tue, 3 Dec 2013 11:06:39 +0100
Subject: [Bitcoin-development] Floating fees and SPV clients
In-Reply-To: <CABsx9T3NQDPL6=pz5BD5DsP0qh0x3LJOCj2H3yY5tzL2_DivGA@mail.gmail.com>
References: <CANEZrP3tGdFh6oG5fbX9JbU6sYbbex1cq=0tQB-0A4aDrdbXrQ@mail.gmail.com>
	<l7f97u$jdg$1@ger.gmane.org>
	<5E4597E4-C1C7-4536-8CF0-82EDD7715DAB@plan99.net>
	<l7fpbn$hf6$1@ger.gmane.org>
	<39921E12-B411-4430-9D56-04F53906B109@plan99.net>
	<CAGLkj4C9fyAX1CnB0oZH3BwLRQp6WOo9kLUqDhRUSA6y3LxYvg@mail.gmail.com>
	<CANEZrP1C=Hc-3f-rqQ+wYrPn-eUj52HjN+qRQdJMWvnP+dkK=Q@mail.gmail.com>
	<CAJHLa0P_uzEQ2OG2FTXyD2Zw4RzujNBxKbKD04CSS1sLNpLUUQ@mail.gmail.com>
	<CANEZrP2hf2853w9f4__Ji9v3eRRU0u6pEzPxAmFN+iH067gtnA@mail.gmail.com>
	<CABsx9T3NQDPL6=pz5BD5DsP0qh0x3LJOCj2H3yY5tzL2_DivGA@mail.gmail.com>
Message-ID: <CANEZrP1PLKemiUEgMJRGdiZXt7o=0_5fhLKYY0x3Ngb_iEm+2w@mail.gmail.com>

On Tue, Dec 3, 2013 at 2:40 AM, Gavin Andresen <gavinandresen at gmail.com>wrote:

>     optional uint64 allowfee    tag number=1000
>

Let's just use a normal/low tag number. The extensions mechanism is great
for people who want to extend the protocol outside the core development
process. It'd be weird if nobody ever used the low numbers again though.

Tag numbers are varint encoded so using smaller ones does have a minor
efficiency benefit, it's not just aesthetics :)


> Allow up to allowfee satoshis to be deducted from the amount paid to be
> used to pay Bitcoin network transaction fees. A wallet implementation must
> not reduce the amount paid for fees more than allowfee, and transaction
> fees must be equal to or greater than the amount reduced.
>

Hmmm. Why "allow"? Should it not be called min_fee instead? Wallets would
have to attach at least that much in fees, right?

Also, why describe it as reducing the amount paid? Which output would be
reduced in value? Why not just have it be added to the total value
displayed to the user and the outputs are left alone/not reduced.


> We also want to allow users to pay MORE in fees, if they need to
> (fragmented wallet, maybe, or big CoinJoin transaction) or decide to.
>

I like the idea but it seems this gets us back to the original problem -
senders don't care about confirmations, ever, not even if they make an
annoying set of transactions. The protocol allows users to submit
transactions directly to receivers, I guess, if the receiver does not like
the transactions they get they could potentially reject the payment. But
I'd hope that's really rare.


> PS: I think there was also consensus that the BIP72  request=...   should
> be shortened to just r=... (save 6 chars in QR codes).  Unless somebody
> objects, I'll change the BIP and the reference implementation code to make
> it so...
>

Sweet, thanks!
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131203/26e3aaec/attachment.html>

From drak at zikula.org  Tue Dec  3 10:36:50 2013
From: drak at zikula.org (Drak)
Date: Tue, 3 Dec 2013 10:36:50 +0000
Subject: [Bitcoin-development] Floating fees and SPV clients
In-Reply-To: <CANEZrP1PLKemiUEgMJRGdiZXt7o=0_5fhLKYY0x3Ngb_iEm+2w@mail.gmail.com>
References: <CANEZrP3tGdFh6oG5fbX9JbU6sYbbex1cq=0tQB-0A4aDrdbXrQ@mail.gmail.com>
	<l7f97u$jdg$1@ger.gmane.org>
	<5E4597E4-C1C7-4536-8CF0-82EDD7715DAB@plan99.net>
	<l7fpbn$hf6$1@ger.gmane.org>
	<39921E12-B411-4430-9D56-04F53906B109@plan99.net>
	<CAGLkj4C9fyAX1CnB0oZH3BwLRQp6WOo9kLUqDhRUSA6y3LxYvg@mail.gmail.com>
	<CANEZrP1C=Hc-3f-rqQ+wYrPn-eUj52HjN+qRQdJMWvnP+dkK=Q@mail.gmail.com>
	<CAJHLa0P_uzEQ2OG2FTXyD2Zw4RzujNBxKbKD04CSS1sLNpLUUQ@mail.gmail.com>
	<CANEZrP2hf2853w9f4__Ji9v3eRRU0u6pEzPxAmFN+iH067gtnA@mail.gmail.com>
	<CABsx9T3NQDPL6=pz5BD5DsP0qh0x3LJOCj2H3yY5tzL2_DivGA@mail.gmail.com>
	<CANEZrP1PLKemiUEgMJRGdiZXt7o=0_5fhLKYY0x3Ngb_iEm+2w@mail.gmail.com>
Message-ID: <CANAnSg2kH+OeypDARUKyDTUmq26PiK2_U45wGaUOGTnkXj6jjA@mail.gmail.com>

I dont like the idea of putting the min fee in the hands of the receiver.
Seems like that will work against the best interests of senders in the long
run.

Why not try a different path of calculating the min fee like difficulty
retarget. You can analyse the last 2016 blocks to find the average fee
accepted per kb (which would include transactions that were included
without fees) and then write that into the block as a soft recommendation
that wallets could use in the UI. This way the price can vary up and down
according to what people were willing to spend on fees and miners willing
to accept.

I absolutely do not trust vendors to set fees. I think it has to be based
on what senders are willing to pay and what miners are willing to accept.

Drak
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131203/17a85798/attachment.html>

From mike at plan99.net  Tue Dec  3 10:45:33 2013
From: mike at plan99.net (Mike Hearn)
Date: Tue, 3 Dec 2013 11:45:33 +0100
Subject: [Bitcoin-development] Floating fees and SPV clients
In-Reply-To: <CANAnSg2kH+OeypDARUKyDTUmq26PiK2_U45wGaUOGTnkXj6jjA@mail.gmail.com>
References: <CANEZrP3tGdFh6oG5fbX9JbU6sYbbex1cq=0tQB-0A4aDrdbXrQ@mail.gmail.com>
	<l7f97u$jdg$1@ger.gmane.org>
	<5E4597E4-C1C7-4536-8CF0-82EDD7715DAB@plan99.net>
	<l7fpbn$hf6$1@ger.gmane.org>
	<39921E12-B411-4430-9D56-04F53906B109@plan99.net>
	<CAGLkj4C9fyAX1CnB0oZH3BwLRQp6WOo9kLUqDhRUSA6y3LxYvg@mail.gmail.com>
	<CANEZrP1C=Hc-3f-rqQ+wYrPn-eUj52HjN+qRQdJMWvnP+dkK=Q@mail.gmail.com>
	<CAJHLa0P_uzEQ2OG2FTXyD2Zw4RzujNBxKbKD04CSS1sLNpLUUQ@mail.gmail.com>
	<CANEZrP2hf2853w9f4__Ji9v3eRRU0u6pEzPxAmFN+iH067gtnA@mail.gmail.com>
	<CABsx9T3NQDPL6=pz5BD5DsP0qh0x3LJOCj2H3yY5tzL2_DivGA@mail.gmail.com>
	<CANEZrP1PLKemiUEgMJRGdiZXt7o=0_5fhLKYY0x3Ngb_iEm+2w@mail.gmail.com>
	<CANAnSg2kH+OeypDARUKyDTUmq26PiK2_U45wGaUOGTnkXj6jjA@mail.gmail.com>
Message-ID: <CANEZrP2iQ3P813qz9KL2R3WBTYpVq4AuL1xrfnwt5ay8Tk1oxw@mail.gmail.com>

On Tue, Dec 3, 2013 at 11:36 AM, Drak <drak at zikula.org> wrote:

> I dont like the idea of putting the min fee in the hands of the receiver.
> Seems like that will work against the best interests of senders in the long
> run.
>

Senders have no interest in ever attaching any kind of fee, which is one
reason we explored child-pays-for-parent for a while. It's not the sender
who cares about double spending risk. Left to their own devices, all
senders would always attach no fee at all (or rather: whatever the min was
to get the transaction relayed to the merchant).

However, receivers do want a fee attached, and ideally we would do this
without redundant transactions. Hence, receivers asking senders to attach a
fee and effectively folding it into the price that is paid. That is, if you
go into a restaurant and the menu says "Burger: 10mBTC" then when you come
to pay, what you see on your phone screen is 10mBTC. The fact that actually
the shop with receiver 9.9mBTC and the tx fee is 0.1mBTC is hidden in the
user interface - creating a situation like many others, where receivers eat
a transaction cost. For instance in Europe sales taxes are included in the
price, not attached separately later.

There's no need to trust the vendor. If a vendor asks for a ridiculously
high tx fee, it will just surface as uncompetitively priced goods/services.
Buyers will go elsewhere.


> Why not try a different path of calculating the min fee like difficulty
> retarget. You can analyse the last 2016 blocks to find the average fee
> accepted per kb (which would include transactions that were included
> without fees) and then write that into the block as a soft recommendation
> that wallets could use in the UI. This way the price can vary up and down
> according to what people were willing to spend on fees and miners willing
> to accept.
>

That's what fee estimation does, essentially, minus the encoding into
blocks. Once you start getting miners telling people what fees are directly
you run into cases where they might try to lie about their behaviour or
otherwise influence the average. Querying all nodes avoids that problem.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131203/ea2876a4/attachment.html>

From pete at petertodd.org  Tue Dec  3 11:03:54 2013
From: pete at petertodd.org (Peter Todd)
Date: Tue, 3 Dec 2013 06:03:54 -0500
Subject: [Bitcoin-development] Floating fees and SPV clients
In-Reply-To: <CABsx9T3NQDPL6=pz5BD5DsP0qh0x3LJOCj2H3yY5tzL2_DivGA@mail.gmail.com>
References: <CANEZrP3tGdFh6oG5fbX9JbU6sYbbex1cq=0tQB-0A4aDrdbXrQ@mail.gmail.com>
	<l7f97u$jdg$1@ger.gmane.org>
	<5E4597E4-C1C7-4536-8CF0-82EDD7715DAB@plan99.net>
	<l7fpbn$hf6$1@ger.gmane.org>
	<39921E12-B411-4430-9D56-04F53906B109@plan99.net>
	<CAGLkj4C9fyAX1CnB0oZH3BwLRQp6WOo9kLUqDhRUSA6y3LxYvg@mail.gmail.com>
	<CANEZrP1C=Hc-3f-rqQ+wYrPn-eUj52HjN+qRQdJMWvnP+dkK=Q@mail.gmail.com>
	<CAJHLa0P_uzEQ2OG2FTXyD2Zw4RzujNBxKbKD04CSS1sLNpLUUQ@mail.gmail.com>
	<CANEZrP2hf2853w9f4__Ji9v3eRRU0u6pEzPxAmFN+iH067gtnA@mail.gmail.com>
	<CABsx9T3NQDPL6=pz5BD5DsP0qh0x3LJOCj2H3yY5tzL2_DivGA@mail.gmail.com>
Message-ID: <20131203110354.GA6513@tilt>

On Tue, Dec 03, 2013 at 11:40:35AM +1000, Gavin Andresen wrote:
> On Tue, Dec 3, 2013 at 12:44 AM, Mike Hearn <mike at plan99.net> wrote:
> 
> > PPv1 doesn't have any notion of fee unfortunately. I suppose it could be
> > added easily, but we also need to launch the existing feature set.
> >
> 
> Lets bang out a merchant-pays-fee extension.
> 
> How about:
> 
> SPEC:
> 
>     optional uint64 allowfee    tag number=1000
> 
> Allow up to allowfee satoshis to be deducted from the amount paid to be
> used to pay Bitcoin network transaction fees. A wallet implementation must
> not reduce the amount paid for fees more than allowfee, and transaction
> fees must be equal to or greater than the amount reduced.

Fees are per byte of tx data; call it allowfeeperkb, and given that fees
are required - the merchant would really rather not waste up to about
twice as much on fees for a child-pays-for-parent - it should be called
requirefeeperkb.

Back to your point, the merchant wants to limit total fees that have
been deducted - 'allowfee' is still a good idea - but only in
conjunction with specifying fee-per-kb requirements.

UI once both are implemented is to not show anything in the default
case, and explain to the user why they have to pay extra in the unusual
case where they are spending a whole bunch of dust.

-- 
'peter'[:-1]@petertodd.org
000000000000000f9102d27cfd61ea9e8bb324593593ca3ce6ba53153ff251b3
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 490 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131203/a412ca87/attachment.sig>

From drak at zikula.org  Tue Dec  3 11:04:53 2013
From: drak at zikula.org (Drak)
Date: Tue, 3 Dec 2013 11:04:53 +0000
Subject: [Bitcoin-development] Floating fees and SPV clients
In-Reply-To: <CANEZrP2iQ3P813qz9KL2R3WBTYpVq4AuL1xrfnwt5ay8Tk1oxw@mail.gmail.com>
References: <CANEZrP3tGdFh6oG5fbX9JbU6sYbbex1cq=0tQB-0A4aDrdbXrQ@mail.gmail.com>
	<l7f97u$jdg$1@ger.gmane.org>
	<5E4597E4-C1C7-4536-8CF0-82EDD7715DAB@plan99.net>
	<l7fpbn$hf6$1@ger.gmane.org>
	<39921E12-B411-4430-9D56-04F53906B109@plan99.net>
	<CAGLkj4C9fyAX1CnB0oZH3BwLRQp6WOo9kLUqDhRUSA6y3LxYvg@mail.gmail.com>
	<CANEZrP1C=Hc-3f-rqQ+wYrPn-eUj52HjN+qRQdJMWvnP+dkK=Q@mail.gmail.com>
	<CAJHLa0P_uzEQ2OG2FTXyD2Zw4RzujNBxKbKD04CSS1sLNpLUUQ@mail.gmail.com>
	<CANEZrP2hf2853w9f4__Ji9v3eRRU0u6pEzPxAmFN+iH067gtnA@mail.gmail.com>
	<CABsx9T3NQDPL6=pz5BD5DsP0qh0x3LJOCj2H3yY5tzL2_DivGA@mail.gmail.com>
	<CANEZrP1PLKemiUEgMJRGdiZXt7o=0_5fhLKYY0x3Ngb_iEm+2w@mail.gmail.com>
	<CANAnSg2kH+OeypDARUKyDTUmq26PiK2_U45wGaUOGTnkXj6jjA@mail.gmail.com>
	<CANEZrP2iQ3P813qz9KL2R3WBTYpVq4AuL1xrfnwt5ay8Tk1oxw@mail.gmail.com>
Message-ID: <CANAnSg2nXnuyPk9JPpqW82SC1QXqh=TSr5mbZc9YWqTM6NqPJw@mail.gmail.com>

On 3 December 2013 10:45, Mike Hearn <mike at plan99.net> wrote:

> On Tue, Dec 3, 2013 at 11:36 AM, Drak <drak at zikula.org> wrote:
>
>> I dont like the idea of putting the min fee in the hands of the receiver.
>> Seems like that will work against the best interests of senders in the long
>> run.
>>
>
> Senders have no interest in ever attaching any kind of fee, which is one
> reason we explored child-pays-for-parent for a while. It's not the sender
> who cares about double spending risk. Left to their own devices, all
> senders would always attach no fee at all (or rather: whatever the min was
> to get the transaction relayed to the merchant).
>

I respectfully disagree. Senders need their funds to be received. The
incentive is right there. Miners want mining fees. So if you want to pay
for something, you need to make sure payment arrives. Senders know that if
they exclude the fee it might not arrive at all. Miners increasingly ignore
no or low fees. So those two agents together ensure there is a fee more
than not. If what you said was true, we would hardly see fees being paid at
all, but on the contrary we see lots of fees, and much higher than the
minimum 0.0001/kb rate that is currently required.

Merchants will just include ridiculous fees - there are some exchanges that
do it already - MtGox being the famous example requires a 0.001 fee 10x
higher than the network rate - the CEO does it because he says "it's
better". That's not a fee going to MtGox, that is the miner fee and they
have no plans to reduce it.

Typically vendor software may not get updated and or lag behind with fat
fees never decreasing or decreasing way too slowly - it's just not fluid or
dynamic enough when it rests with the vendor.

However, receivers do want a fee attached,
>

No - receivers want to be paid. If they are not paid they wont dispatch the
goods or service. Neither party is happy in that circumstance. The
incentive that the payment confirms is there naturally.


> That's what fee estimation does, essentially, minus the encoding into
> blocks. Once you start getting miners telling people what fees are directly
> you run into cases where they might try to lie about their behaviour or
> otherwise influence the average. Querying all nodes avoids that problem.
>

Miners cant lie about fees accepted because that's part of the transaction.
When Alice sends funds to Bob it includes the fee information and that is
included in the block. There is no way to fake it. The average fee paid is
provable - so there is no need to query nodes at all, you simply look at
the blockchain. You dont even need to write it into the blockchain since it
can be calculated from the blockchain, it would just make it simpler.

Drak
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131203/55522461/attachment.html>

From gavinandresen at gmail.com  Tue Dec  3 11:07:30 2013
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Tue, 3 Dec 2013 21:07:30 +1000
Subject: [Bitcoin-development] Floating fees and SPV clients
In-Reply-To: <CANEZrP1PLKemiUEgMJRGdiZXt7o=0_5fhLKYY0x3Ngb_iEm+2w@mail.gmail.com>
References: <CANEZrP3tGdFh6oG5fbX9JbU6sYbbex1cq=0tQB-0A4aDrdbXrQ@mail.gmail.com>
	<l7f97u$jdg$1@ger.gmane.org>
	<5E4597E4-C1C7-4536-8CF0-82EDD7715DAB@plan99.net>
	<l7fpbn$hf6$1@ger.gmane.org>
	<39921E12-B411-4430-9D56-04F53906B109@plan99.net>
	<CAGLkj4C9fyAX1CnB0oZH3BwLRQp6WOo9kLUqDhRUSA6y3LxYvg@mail.gmail.com>
	<CANEZrP1C=Hc-3f-rqQ+wYrPn-eUj52HjN+qRQdJMWvnP+dkK=Q@mail.gmail.com>
	<CAJHLa0P_uzEQ2OG2FTXyD2Zw4RzujNBxKbKD04CSS1sLNpLUUQ@mail.gmail.com>
	<CANEZrP2hf2853w9f4__Ji9v3eRRU0u6pEzPxAmFN+iH067gtnA@mail.gmail.com>
	<CABsx9T3NQDPL6=pz5BD5DsP0qh0x3LJOCj2H3yY5tzL2_DivGA@mail.gmail.com>
	<CANEZrP1PLKemiUEgMJRGdiZXt7o=0_5fhLKYY0x3Ngb_iEm+2w@mail.gmail.com>
Message-ID: <CABsx9T322nCvynRCL6Mb9C0f5EuJSfMDTSGiU+_JsYoSCb=_kQ@mail.gmail.com>

Ok, revised spec:

SPEC:

message PaymentDeatils {
    ...
    optional uint64 minfee    tag number=8

Pay at least minfee satoshis in transaction fees. Wallet software should
add minfee to the amount the user authorizes and pays, and include at least
minfee in the transaction created to pay miner's transaction fees. Wallet
software may request that the user pays more, if it must create a complex
transaction or judges that minfee is not sufficient for the transaction to
be accepted by the network..

:ENDSPEC

Making it fee-per-kilobyte is a bad idea, in my opinion; users don't care
how many kilobytes their transactions are, and they will just be confused
if they're paying for a 10mBTC burger and are asked to pay 10.00011 or
9.9994 because the merchant has no idea how many kilobytes the paying
transaction will be.

-- 
--
Gavin Andresen
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131203/2e21a6a1/attachment.html>

From drak at zikula.org  Tue Dec  3 11:09:51 2013
From: drak at zikula.org (Drak)
Date: Tue, 3 Dec 2013 11:09:51 +0000
Subject: [Bitcoin-development] Floating fees and SPV clients
In-Reply-To: <20131203110354.GA6513@tilt>
References: <CANEZrP3tGdFh6oG5fbX9JbU6sYbbex1cq=0tQB-0A4aDrdbXrQ@mail.gmail.com>
	<l7f97u$jdg$1@ger.gmane.org>
	<5E4597E4-C1C7-4536-8CF0-82EDD7715DAB@plan99.net>
	<l7fpbn$hf6$1@ger.gmane.org>
	<39921E12-B411-4430-9D56-04F53906B109@plan99.net>
	<CAGLkj4C9fyAX1CnB0oZH3BwLRQp6WOo9kLUqDhRUSA6y3LxYvg@mail.gmail.com>
	<CANEZrP1C=Hc-3f-rqQ+wYrPn-eUj52HjN+qRQdJMWvnP+dkK=Q@mail.gmail.com>
	<CAJHLa0P_uzEQ2OG2FTXyD2Zw4RzujNBxKbKD04CSS1sLNpLUUQ@mail.gmail.com>
	<CANEZrP2hf2853w9f4__Ji9v3eRRU0u6pEzPxAmFN+iH067gtnA@mail.gmail.com>
	<CABsx9T3NQDPL6=pz5BD5DsP0qh0x3LJOCj2H3yY5tzL2_DivGA@mail.gmail.com>
	<20131203110354.GA6513@tilt>
Message-ID: <CANAnSg10KnY=oSM61onYjw5Fp==BwByEeoZUXWfzHqNFjsHYGA@mail.gmail.com>

On 3 December 2013 11:03, Peter Todd <pete at petertodd.org> wrote:

> UI once both are implemented is to not show anything in the default
> case, and explain to the user why they have to pay extra in the unusual
> case where they are spending a whole bunch of dust.


Yes, that's the other problem with a merchant setting a fee - they have no
idea how large the transaction might be. If you spend a bunch of dust the
fee could be 2 or 3x the expected fee. Then you might get merchants
including higher fees by default to account for this. That means we end up
paying more per kb over time.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131203/199e85e4/attachment.html>

From mike at plan99.net  Tue Dec  3 11:29:03 2013
From: mike at plan99.net (Mike Hearn)
Date: Tue, 3 Dec 2013 12:29:03 +0100
Subject: [Bitcoin-development] Floating fees and SPV clients
In-Reply-To: <CABsx9T322nCvynRCL6Mb9C0f5EuJSfMDTSGiU+_JsYoSCb=_kQ@mail.gmail.com>
References: <CANEZrP3tGdFh6oG5fbX9JbU6sYbbex1cq=0tQB-0A4aDrdbXrQ@mail.gmail.com>
	<l7f97u$jdg$1@ger.gmane.org>
	<5E4597E4-C1C7-4536-8CF0-82EDD7715DAB@plan99.net>
	<l7fpbn$hf6$1@ger.gmane.org>
	<39921E12-B411-4430-9D56-04F53906B109@plan99.net>
	<CAGLkj4C9fyAX1CnB0oZH3BwLRQp6WOo9kLUqDhRUSA6y3LxYvg@mail.gmail.com>
	<CANEZrP1C=Hc-3f-rqQ+wYrPn-eUj52HjN+qRQdJMWvnP+dkK=Q@mail.gmail.com>
	<CAJHLa0P_uzEQ2OG2FTXyD2Zw4RzujNBxKbKD04CSS1sLNpLUUQ@mail.gmail.com>
	<CANEZrP2hf2853w9f4__Ji9v3eRRU0u6pEzPxAmFN+iH067gtnA@mail.gmail.com>
	<CABsx9T3NQDPL6=pz5BD5DsP0qh0x3LJOCj2H3yY5tzL2_DivGA@mail.gmail.com>
	<CANEZrP1PLKemiUEgMJRGdiZXt7o=0_5fhLKYY0x3Ngb_iEm+2w@mail.gmail.com>
	<CABsx9T322nCvynRCL6Mb9C0f5EuJSfMDTSGiU+_JsYoSCb=_kQ@mail.gmail.com>
Message-ID: <CANEZrP0P9NTJXs22K8-4hnLkxV7Uo+tjvWKJ8msgxiFgJW6xvg@mail.gmail.com>

On Tue, Dec 3, 2013 at 12:07 PM, Gavin Andresen <gavinandresen at gmail.com>wrote:

> Making it fee-per-kilobyte is a bad idea, in my opinion; users don't care
> how many kilobytes their transactions are, and they will just be confused
> if they're paying for a 10mBTC burger and are asked to pay 10.00011 or
> 9.9994 because the merchant has no idea how many kilobytes the paying
> transaction will be.
>

Wouldn't the idea be that the user always sees 10mBTC no matter what, but
the receiver may receive less if the user decides to pay with a huge
transaction?

It may be acceptable that receivers don't always receive exactly what they
requested, at least for person-to-business transactions.  For
person-to-person transactions of course any fee at all is confusing because
you intuitively expect that if you send 1 mBTC, then 1 mBTC will arrive the
other end. I wonder if we'll end up in a world where buying things from
shops involves paying fees, and (more occasional?) person-to-person
transactions tend to be free and people just understand that the money
isn't going to be spendable for a while. Or alternatively that wallets let
you override the safeguards on spending unconfirmed coins when the user is
sure that they trust the sender.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131203/166be5c6/attachment.html>

From pete at petertodd.org  Tue Dec  3 11:31:17 2013
From: pete at petertodd.org (Peter Todd)
Date: Tue, 3 Dec 2013 06:31:17 -0500
Subject: [Bitcoin-development] Floating fees and SPV clients
In-Reply-To: <CANEZrP3tGdFh6oG5fbX9JbU6sYbbex1cq=0tQB-0A4aDrdbXrQ@mail.gmail.com>
References: <CANEZrP3tGdFh6oG5fbX9JbU6sYbbex1cq=0tQB-0A4aDrdbXrQ@mail.gmail.com>
Message-ID: <20131203113117.GA12623@tilt>

On Sun, Dec 01, 2013 at 12:51:46PM +0100, Mike Hearn wrote:
> 4) Finally, when we next hard fork, we make v2 transactions include the
> output value in the signature, same as the output script (this proposal has
> been on the forums for a while now). That allows the fee data added in step
> 2 to be cross-checked against the signatures on the inputs, thus
> authenticating it.

FTFY s/hard-fork/soft-fork/

The proposals on the forums with regard to a soft-fork are for a new
transaction format - to be done in parallel with the old one - that
commits to transaction inputs and outputs via a merkle tree extending
into the transaction. This data is then committed to via the merge-mine
standard.


In addition, all this discussion about trying to figure out transaction
fees based on transaction is a bit irrelevant if you suppose a
soft-fork. We already know that we need a merkle-sum-tree of fees and
transaction size to be able to audit miners and create compact fraud
proofs, and using that merkle-sum-tree you can easily calculate sum
fees/sum size for the whole block to determine fees.

We know that we can make a good assumption that transactions in
blocks will have been broadcast prior by the assumption you and Gavin
are making that miners would by far prefer to mine transactions that
have already been broadcast so that block propagation via txid lists
works. That advantage is on the order of 10x to 100x (or even higher)
lower cost per KB to the miner. (if this is not true, let us all know,
because then your scalability arguments are bunk with regard to
blocksize)

In addition faking fees via non-disclosed high-fee transactions has a
cost of about 1% due to the risk your block gets orphaned and the tx fee
gets mined by another miner.


Between those two the merkle-sum-trees for fees and size can be used for
various levels of average fee for a whole block, plus statistical
distributions.


Next it is also desirable for another, related, soft-fork to include a
sorted list of txids and/or H(scriptPubKey)'s in a block. (the latter is
explicitly part of my TXO commitments proposal) With the txids version
especially it's easy and low-bandwidth for SPV nodes to get proof that a
given transaction has been mined recently, by asking for proof of
inclusion or exclusion to accompany a bloom filter match.


Finally with various anti-sybil techniques that create long-term
identities it's easy to show that a peer lied about the data required
for fee estimates anyway.

> One obvious concern is what to do if nodes don't converge on very similar
> estimates. Wallets will always want to pay the lowest fee possible, so that
> means they'll always be riding the very edge of what's acceptable, opening
> up tx propagation to random flaky failures if fee estimates change whilst a
> transaction is in progress, or if some nodes don't calculate the same
> estimates as others.

Propagation failures are not a major problem if transactions can be
rebroadcast with new, higher, fees; propagation failures can be detected
easily and quickly with my proof-of-tx-mining proposal.

-- 
'peter'[:-1]@petertodd.org
000000000000000f9102d27cfd61ea9e8bb324593593ca3ce6ba53153ff251b3
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 490 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131203/6556880f/attachment.sig>

From pete at petertodd.org  Tue Dec  3 11:33:21 2013
From: pete at petertodd.org (Peter Todd)
Date: Tue, 3 Dec 2013 06:33:21 -0500
Subject: [Bitcoin-development] Floating fees and SPV clients
In-Reply-To: <CANAnSg10KnY=oSM61onYjw5Fp==BwByEeoZUXWfzHqNFjsHYGA@mail.gmail.com>
References: <5E4597E4-C1C7-4536-8CF0-82EDD7715DAB@plan99.net>
	<l7fpbn$hf6$1@ger.gmane.org>
	<39921E12-B411-4430-9D56-04F53906B109@plan99.net>
	<CAGLkj4C9fyAX1CnB0oZH3BwLRQp6WOo9kLUqDhRUSA6y3LxYvg@mail.gmail.com>
	<CANEZrP1C=Hc-3f-rqQ+wYrPn-eUj52HjN+qRQdJMWvnP+dkK=Q@mail.gmail.com>
	<CAJHLa0P_uzEQ2OG2FTXyD2Zw4RzujNBxKbKD04CSS1sLNpLUUQ@mail.gmail.com>
	<CANEZrP2hf2853w9f4__Ji9v3eRRU0u6pEzPxAmFN+iH067gtnA@mail.gmail.com>
	<CABsx9T3NQDPL6=pz5BD5DsP0qh0x3LJOCj2H3yY5tzL2_DivGA@mail.gmail.com>
	<20131203110354.GA6513@tilt>
	<CANAnSg10KnY=oSM61onYjw5Fp==BwByEeoZUXWfzHqNFjsHYGA@mail.gmail.com>
Message-ID: <20131203113321.GB12623@tilt>

On Tue, Dec 03, 2013 at 11:09:51AM +0000, Drak wrote:
> On 3 December 2013 11:03, Peter Todd <pete at petertodd.org> wrote:
> 
> > UI once both are implemented is to not show anything in the default
> > case, and explain to the user why they have to pay extra in the unusual
> > case where they are spending a whole bunch of dust.
> 
> 
> Yes, that's the other problem with a merchant setting a fee - they have no
> idea how large the transaction might be. If you spend a bunch of dust the
> fee could be 2 or 3x the expected fee. Then you might get merchants
> including higher fees by default to account for this. That means we end up
> paying more per kb over time.

Right, which is solved by requiring a fee-per-kb, and only allowing up
to a certain amount to be deducted from the amount paid to pay that
total fee.


But really, we're better off leaving fees visible to the user in the
first place: they're how Bitcoin works and it's not going to change.
(was just talking to Taylor from Hive Wallet about that in person
actually)

-- 
'peter'[:-1]@petertodd.org
000000000000000f9102d27cfd61ea9e8bb324593593ca3ce6ba53153ff251b3
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 490 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131203/97c04e6f/attachment.sig>

From pete at petertodd.org  Tue Dec  3 11:37:25 2013
From: pete at petertodd.org (Peter Todd)
Date: Tue, 3 Dec 2013 06:37:25 -0500
Subject: [Bitcoin-development] Floating fees and SPV clients
In-Reply-To: <CANEZrP0P9NTJXs22K8-4hnLkxV7Uo+tjvWKJ8msgxiFgJW6xvg@mail.gmail.com>
References: <l7fpbn$hf6$1@ger.gmane.org>
	<39921E12-B411-4430-9D56-04F53906B109@plan99.net>
	<CAGLkj4C9fyAX1CnB0oZH3BwLRQp6WOo9kLUqDhRUSA6y3LxYvg@mail.gmail.com>
	<CANEZrP1C=Hc-3f-rqQ+wYrPn-eUj52HjN+qRQdJMWvnP+dkK=Q@mail.gmail.com>
	<CAJHLa0P_uzEQ2OG2FTXyD2Zw4RzujNBxKbKD04CSS1sLNpLUUQ@mail.gmail.com>
	<CANEZrP2hf2853w9f4__Ji9v3eRRU0u6pEzPxAmFN+iH067gtnA@mail.gmail.com>
	<CABsx9T3NQDPL6=pz5BD5DsP0qh0x3LJOCj2H3yY5tzL2_DivGA@mail.gmail.com>
	<CANEZrP1PLKemiUEgMJRGdiZXt7o=0_5fhLKYY0x3Ngb_iEm+2w@mail.gmail.com>
	<CABsx9T322nCvynRCL6Mb9C0f5EuJSfMDTSGiU+_JsYoSCb=_kQ@mail.gmail.com>
	<CANEZrP0P9NTJXs22K8-4hnLkxV7Uo+tjvWKJ8msgxiFgJW6xvg@mail.gmail.com>
Message-ID: <20131203113725.GC12623@tilt>

On Tue, Dec 03, 2013 at 12:29:03PM +0100, Mike Hearn wrote:
> On Tue, Dec 3, 2013 at 12:07 PM, Gavin Andresen <gavinandresen at gmail.com>wrote:
> 
> > Making it fee-per-kilobyte is a bad idea, in my opinion; users don't care
> > how many kilobytes their transactions are, and they will just be confused
> > if they're paying for a 10mBTC burger and are asked to pay 10.00011 or
> > 9.9994 because the merchant has no idea how many kilobytes the paying
> > transaction will be.
> >
> 
> Wouldn't the idea be that the user always sees 10mBTC no matter what, but
> the receiver may receive less if the user decides to pay with a huge
> transaction?
> 
> It may be acceptable that receivers don't always receive exactly what they
> requested, at least for person-to-business transactions.  For
> person-to-person transactions of course any fee at all is confusing because
> you intuitively expect that if you send 1 mBTC, then 1 mBTC will arrive the
> other end. I wonder if we'll end up in a world where buying things from
> shops involves paying fees, and (more occasional?) person-to-person
> transactions tend to be free and people just understand that the money
> isn't going to be spendable for a while. Or alternatively that wallets let
> you override the safeguards on spending unconfirmed coins when the user is
> sure that they trust the sender.

Person-to-person payments are an *excellent* argument for keeping fees
visible to end-users; people will pay other people commonly in Bitcoin
and they will be very confused if those transactions act weirdly
differently than payments to merchants.


NAK on unconfirmed overrides - if something goes wrong even by accident
it just makes fixing the problem much harder and less intuitive.

-- 
'peter'[:-1]@petertodd.org
000000000000000f9102d27cfd61ea9e8bb324593593ca3ce6ba53153ff251b3
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 490 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131203/23bebdf3/attachment.sig>

From gavinandresen at gmail.com  Tue Dec  3 11:41:10 2013
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Tue, 3 Dec 2013 21:41:10 +1000
Subject: [Bitcoin-development] Floating fees and SPV clients
In-Reply-To: <CANEZrP0P9NTJXs22K8-4hnLkxV7Uo+tjvWKJ8msgxiFgJW6xvg@mail.gmail.com>
References: <CANEZrP3tGdFh6oG5fbX9JbU6sYbbex1cq=0tQB-0A4aDrdbXrQ@mail.gmail.com>
	<l7f97u$jdg$1@ger.gmane.org>
	<5E4597E4-C1C7-4536-8CF0-82EDD7715DAB@plan99.net>
	<l7fpbn$hf6$1@ger.gmane.org>
	<39921E12-B411-4430-9D56-04F53906B109@plan99.net>
	<CAGLkj4C9fyAX1CnB0oZH3BwLRQp6WOo9kLUqDhRUSA6y3LxYvg@mail.gmail.com>
	<CANEZrP1C=Hc-3f-rqQ+wYrPn-eUj52HjN+qRQdJMWvnP+dkK=Q@mail.gmail.com>
	<CAJHLa0P_uzEQ2OG2FTXyD2Zw4RzujNBxKbKD04CSS1sLNpLUUQ@mail.gmail.com>
	<CANEZrP2hf2853w9f4__Ji9v3eRRU0u6pEzPxAmFN+iH067gtnA@mail.gmail.com>
	<CABsx9T3NQDPL6=pz5BD5DsP0qh0x3LJOCj2H3yY5tzL2_DivGA@mail.gmail.com>
	<CANEZrP1PLKemiUEgMJRGdiZXt7o=0_5fhLKYY0x3Ngb_iEm+2w@mail.gmail.com>
	<CABsx9T322nCvynRCL6Mb9C0f5EuJSfMDTSGiU+_JsYoSCb=_kQ@mail.gmail.com>
	<CANEZrP0P9NTJXs22K8-4hnLkxV7Uo+tjvWKJ8msgxiFgJW6xvg@mail.gmail.com>
Message-ID: <CABsx9T2cs5Agzpbn7S1ppzDnFgLuMJoqFVFZjJzPU+RuSVrQPQ@mail.gmail.com>

>
> Wouldn't the idea be that the user always sees 10mBTC no matter what, but
> the receiver may receive less if the user decides to pay with a huge
> transaction?
>

If users want to pay with a huge transaction then it seems to me the user
should cover that cost. Allowing users to pay merchants with 100K
transactions full of dust and expecting them to eat the cost seems like a
great way to enable bleed-the-merchant-dry attacks.


RE: hiding or showing fees:  I pointed out to Peter that there doesn't have
to be One True Answer.  Let wallets experiment with either hiding or
exposing fees, and may the best user experience win.

-- 
--
Gavin Andresen
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131203/59fe56b9/attachment.html>

From mike at plan99.net  Tue Dec  3 11:46:43 2013
From: mike at plan99.net (Mike Hearn)
Date: Tue, 3 Dec 2013 12:46:43 +0100
Subject: [Bitcoin-development] Floating fees and SPV clients
In-Reply-To: <CABsx9T2cs5Agzpbn7S1ppzDnFgLuMJoqFVFZjJzPU+RuSVrQPQ@mail.gmail.com>
References: <CANEZrP3tGdFh6oG5fbX9JbU6sYbbex1cq=0tQB-0A4aDrdbXrQ@mail.gmail.com>
	<l7f97u$jdg$1@ger.gmane.org>
	<5E4597E4-C1C7-4536-8CF0-82EDD7715DAB@plan99.net>
	<l7fpbn$hf6$1@ger.gmane.org>
	<39921E12-B411-4430-9D56-04F53906B109@plan99.net>
	<CAGLkj4C9fyAX1CnB0oZH3BwLRQp6WOo9kLUqDhRUSA6y3LxYvg@mail.gmail.com>
	<CANEZrP1C=Hc-3f-rqQ+wYrPn-eUj52HjN+qRQdJMWvnP+dkK=Q@mail.gmail.com>
	<CAJHLa0P_uzEQ2OG2FTXyD2Zw4RzujNBxKbKD04CSS1sLNpLUUQ@mail.gmail.com>
	<CANEZrP2hf2853w9f4__Ji9v3eRRU0u6pEzPxAmFN+iH067gtnA@mail.gmail.com>
	<CABsx9T3NQDPL6=pz5BD5DsP0qh0x3LJOCj2H3yY5tzL2_DivGA@mail.gmail.com>
	<CANEZrP1PLKemiUEgMJRGdiZXt7o=0_5fhLKYY0x3Ngb_iEm+2w@mail.gmail.com>
	<CABsx9T322nCvynRCL6Mb9C0f5EuJSfMDTSGiU+_JsYoSCb=_kQ@mail.gmail.com>
	<CANEZrP0P9NTJXs22K8-4hnLkxV7Uo+tjvWKJ8msgxiFgJW6xvg@mail.gmail.com>
	<CABsx9T2cs5Agzpbn7S1ppzDnFgLuMJoqFVFZjJzPU+RuSVrQPQ@mail.gmail.com>
Message-ID: <CANEZrP1Ef7P_bvE_qY+CsXG02=jGx8f4DrDKweSo7AAXLjeWXQ@mail.gmail.com>

On Tue, Dec 3, 2013 at 12:41 PM, Gavin Andresen <gavinandresen at gmail.com>wrote:
>
> If users want to pay with a huge transaction then it seems to me the user
> should cover that cost. Allowing users to pay merchants with 100K
> transactions full of dust and expecting them to eat the cost seems like a
> great way to enable bleed-the-merchant-dry attacks.
>

A merchant can always refuse the payment and refund it if that's a
practical problem. I doubt it would be though. If a user is trying to buy
something from the merchant, they will want it to work, and it'll be up to
the developers of the wallet they're using to ensure it never does anything
obnoxious or unacceptable that would result in people hating to receive
money from that app.


> RE: hiding or showing fees:  I pointed out to Peter that there doesn't
> have to be One True Answer.  Let wallets experiment with either hiding or
> exposing fees, and may the best user experience win.
>

Sure. I think there will be experimentation in this regard.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131203/382b9201/attachment.html>

From gavinandresen at gmail.com  Tue Dec  3 11:54:41 2013
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Tue, 3 Dec 2013 21:54:41 +1000
Subject: [Bitcoin-development] Floating fees and SPV clients
In-Reply-To: <CANEZrP1Ef7P_bvE_qY+CsXG02=jGx8f4DrDKweSo7AAXLjeWXQ@mail.gmail.com>
References: <CANEZrP3tGdFh6oG5fbX9JbU6sYbbex1cq=0tQB-0A4aDrdbXrQ@mail.gmail.com>
	<l7f97u$jdg$1@ger.gmane.org>
	<5E4597E4-C1C7-4536-8CF0-82EDD7715DAB@plan99.net>
	<l7fpbn$hf6$1@ger.gmane.org>
	<39921E12-B411-4430-9D56-04F53906B109@plan99.net>
	<CAGLkj4C9fyAX1CnB0oZH3BwLRQp6WOo9kLUqDhRUSA6y3LxYvg@mail.gmail.com>
	<CANEZrP1C=Hc-3f-rqQ+wYrPn-eUj52HjN+qRQdJMWvnP+dkK=Q@mail.gmail.com>
	<CAJHLa0P_uzEQ2OG2FTXyD2Zw4RzujNBxKbKD04CSS1sLNpLUUQ@mail.gmail.com>
	<CANEZrP2hf2853w9f4__Ji9v3eRRU0u6pEzPxAmFN+iH067gtnA@mail.gmail.com>
	<CABsx9T3NQDPL6=pz5BD5DsP0qh0x3LJOCj2H3yY5tzL2_DivGA@mail.gmail.com>
	<CANEZrP1PLKemiUEgMJRGdiZXt7o=0_5fhLKYY0x3Ngb_iEm+2w@mail.gmail.com>
	<CABsx9T322nCvynRCL6Mb9C0f5EuJSfMDTSGiU+_JsYoSCb=_kQ@mail.gmail.com>
	<CANEZrP0P9NTJXs22K8-4hnLkxV7Uo+tjvWKJ8msgxiFgJW6xvg@mail.gmail.com>
	<CABsx9T2cs5Agzpbn7S1ppzDnFgLuMJoqFVFZjJzPU+RuSVrQPQ@mail.gmail.com>
	<CANEZrP1Ef7P_bvE_qY+CsXG02=jGx8f4DrDKweSo7AAXLjeWXQ@mail.gmail.com>
Message-ID: <CABsx9T2CLBV7Xnx8ePEonYnr7HTZDRi14=ZhQeNznftL9Mj7Uw@mail.gmail.com>

>
> A merchant can always refuse the payment and refund it if that's a
> practical problem.
>

No, they can't, at least not in bitcoin-qt:  when the user pokes the SEND
button, the transaction is broadcast on the network, and then the merchant
is also told with the Payment/PaymentACK round-trip.

Allowing merchants to cancel (e.g. having a PaymentNACK) makes
implementation harder, and brings up nasty issues if we want to allow
CoinJoin or CoinJoin-like transactions as payments to merchants.
 Bitcoin-Qt ALREADY allows you to pay several PaymentRequests with one
transaction; handling the case where one merchant gives you a PaymentACK
and another gives you (or wants to give you) a PaymentNACK is a nightmare.

--
Gavin Andresen
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131203/7df4c2e4/attachment.html>

From taylor.gerring at gmail.com  Tue Dec  3 11:57:23 2013
From: taylor.gerring at gmail.com (Taylor Gerring)
Date: Tue, 3 Dec 2013 12:57:23 +0100
Subject: [Bitcoin-development] Floating fees and SPV clients
In-Reply-To: <CANEZrP0P9NTJXs22K8-4hnLkxV7Uo+tjvWKJ8msgxiFgJW6xvg@mail.gmail.com>
References: <CANEZrP3tGdFh6oG5fbX9JbU6sYbbex1cq=0tQB-0A4aDrdbXrQ@mail.gmail.com>
	<l7f97u$jdg$1@ger.gmane.org>
	<5E4597E4-C1C7-4536-8CF0-82EDD7715DAB@plan99.net>
	<l7fpbn$hf6$1@ger.gmane.org>
	<39921E12-B411-4430-9D56-04F53906B109@plan99.net>
	<CAGLkj4C9fyAX1CnB0oZH3BwLRQp6WOo9kLUqDhRUSA6y3LxYvg@mail.gmail.com>
	<CANEZrP1C=Hc-3f-rqQ+wYrPn-eUj52HjN+qRQdJMWvnP+dkK=Q@mail.gmail.com>
	<CAJHLa0P_uzEQ2OG2FTXyD2Zw4RzujNBxKbKD04CSS1sLNpLUUQ@mail.gmail.com>
	<CANEZrP2hf2853w9f4__Ji9v3eRRU0u6pEzPxAmFN+iH067gtnA@mail.gmail.com>
	<CABsx9T3NQDPL6=pz5BD5DsP0qh0x3LJOCj2H3yY5tzL2_DivGA@mail.gmail.com>
	<CANEZrP1PLKemiUEgMJRGdiZXt7o=0_5fhLKYY0x3Ngb_iEm+2w@mail.gmail.com>
	<CABsx9T322nCvynRCL6Mb9C0f5EuJSfMDTSGiU+_JsYoSCb=_kQ@mail.gmail.com>
	<CANEZrP0P9NTJXs22K8-4hnLkxV7Uo+tjvWKJ8msgxiFgJW6xvg@mail.gmail.com>
Message-ID: <05CEDEB4-BA29-4ED3-8CFC-D3504727DB4D@gmail.com>


On Dec 3, 2013, at 12:29 PM, Mike Hearn <mike at plan99.net> wrote:

> It may be acceptable that receivers don't always receive exactly what they requested, at least for person-to-business transactions.  For person-to-person transactions of course any fee at all is confusing because you intuitively expect that if you send 1 mBTC, then 1 mBTC will arrive the other end. I wonder if we'll end up in a world where buying things from shops involves paying fees, and (more occasional?) person-to-person transactions tend to be free and people just understand that the money isn't going to be spendable for a while.


> person-to-business transactions.  For person-to-person transactions
Why should there be two classes of transactions? Where does paying a local business at a farmer?s stand lie in that realm? Transactions should work the same regardless of who is on the receiving end.

> any fee at all is confusing because you intuitively expect that if you send 1 mBTC, then 1 mBTC will arrive the other end
The paradigm of sending money has an explicit cost is not new... I think people are used to Western Union/PayPal and associated fees, no?  It?s okay to have a fee if it?s reasonable, so let?s inform the user what the estimated cost is to send a transaction in a reasonable amount of time.

>  wonder if we'll end up in a world where buying things from shops involves paying fees
I stayed in a hotel for the first night here here in Milan, and there was an (anticipated) surcharge for the use of credit over cash. Again, nothing new here.


Fees are only confusing because existing clients do a terrible job of presenting the information to the user. In Hive Wallet, I?m of the opinion that we should inform the user in an intuitive way to let them make an informed decision.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131203/7758e30c/attachment.html>

From drak at zikula.org  Tue Dec  3 12:05:21 2013
From: drak at zikula.org (Drak)
Date: Tue, 3 Dec 2013 12:05:21 +0000
Subject: [Bitcoin-development] Floating fees and SPV clients
In-Reply-To: <CANEZrP1Ef7P_bvE_qY+CsXG02=jGx8f4DrDKweSo7AAXLjeWXQ@mail.gmail.com>
References: <CANEZrP3tGdFh6oG5fbX9JbU6sYbbex1cq=0tQB-0A4aDrdbXrQ@mail.gmail.com>
	<l7f97u$jdg$1@ger.gmane.org>
	<5E4597E4-C1C7-4536-8CF0-82EDD7715DAB@plan99.net>
	<l7fpbn$hf6$1@ger.gmane.org>
	<39921E12-B411-4430-9D56-04F53906B109@plan99.net>
	<CAGLkj4C9fyAX1CnB0oZH3BwLRQp6WOo9kLUqDhRUSA6y3LxYvg@mail.gmail.com>
	<CANEZrP1C=Hc-3f-rqQ+wYrPn-eUj52HjN+qRQdJMWvnP+dkK=Q@mail.gmail.com>
	<CAJHLa0P_uzEQ2OG2FTXyD2Zw4RzujNBxKbKD04CSS1sLNpLUUQ@mail.gmail.com>
	<CANEZrP2hf2853w9f4__Ji9v3eRRU0u6pEzPxAmFN+iH067gtnA@mail.gmail.com>
	<CABsx9T3NQDPL6=pz5BD5DsP0qh0x3LJOCj2H3yY5tzL2_DivGA@mail.gmail.com>
	<CANEZrP1PLKemiUEgMJRGdiZXt7o=0_5fhLKYY0x3Ngb_iEm+2w@mail.gmail.com>
	<CABsx9T322nCvynRCL6Mb9C0f5EuJSfMDTSGiU+_JsYoSCb=_kQ@mail.gmail.com>
	<CANEZrP0P9NTJXs22K8-4hnLkxV7Uo+tjvWKJ8msgxiFgJW6xvg@mail.gmail.com>
	<CABsx9T2cs5Agzpbn7S1ppzDnFgLuMJoqFVFZjJzPU+RuSVrQPQ@mail.gmail.com>
	<CANEZrP1Ef7P_bvE_qY+CsXG02=jGx8f4DrDKweSo7AAXLjeWXQ@mail.gmail.com>
Message-ID: <CANAnSg0s-fo=+SmzZpv+5Yv32jXP3ptnjbV8DxexC8tvW5wtDg@mail.gmail.com>

On 3 December 2013 11:46, Mike Hearn <mike at plan99.net> wrote:

> On Tue, Dec 3, 2013 at 12:41 PM, Gavin Andresen <gavinandresen at gmail.com>wrote:
>>
>> If users want to pay with a huge transaction then it seems to me the user
>> should cover that cost. Allowing users to pay merchants with 100K
>> transactions full of dust and expecting them to eat the cost seems like a
>> great way to enable bleed-the-merchant-dry attacks.
>>
>
> A merchant can always refuse the payment and refund it if that's a
> practical problem. I doubt it would be though. If a user is trying to buy
> something from the merchant, they will want it to work, and it'll be up to
> the developers of the wallet they're using to ensure it never does anything
> obnoxious or unacceptable that would result in people hating to receive
> money from that app.
>

Refunds in this circumstance would be problematic because someone is going
to lose because they have to pay the fee. If the sender's money is refunded
minus the fee, they will be unhappy. And the merchant will be unhappy about
having had an unacceptable transaction they have to send back, and eat a
fee for the privilege.

This kind of situation needs to be avoided at all costs.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131203/85ad8acd/attachment.html>

From pete at petertodd.org  Tue Dec  3 12:07:34 2013
From: pete at petertodd.org (Peter Todd)
Date: Tue, 3 Dec 2013 07:07:34 -0500
Subject: [Bitcoin-development] Floating fees and SPV clients
In-Reply-To: <05CEDEB4-BA29-4ED3-8CFC-D3504727DB4D@gmail.com>
References: <39921E12-B411-4430-9D56-04F53906B109@plan99.net>
	<CAGLkj4C9fyAX1CnB0oZH3BwLRQp6WOo9kLUqDhRUSA6y3LxYvg@mail.gmail.com>
	<CANEZrP1C=Hc-3f-rqQ+wYrPn-eUj52HjN+qRQdJMWvnP+dkK=Q@mail.gmail.com>
	<CAJHLa0P_uzEQ2OG2FTXyD2Zw4RzujNBxKbKD04CSS1sLNpLUUQ@mail.gmail.com>
	<CANEZrP2hf2853w9f4__Ji9v3eRRU0u6pEzPxAmFN+iH067gtnA@mail.gmail.com>
	<CABsx9T3NQDPL6=pz5BD5DsP0qh0x3LJOCj2H3yY5tzL2_DivGA@mail.gmail.com>
	<CANEZrP1PLKemiUEgMJRGdiZXt7o=0_5fhLKYY0x3Ngb_iEm+2w@mail.gmail.com>
	<CABsx9T322nCvynRCL6Mb9C0f5EuJSfMDTSGiU+_JsYoSCb=_kQ@mail.gmail.com>
	<CANEZrP0P9NTJXs22K8-4hnLkxV7Uo+tjvWKJ8msgxiFgJW6xvg@mail.gmail.com>
	<05CEDEB4-BA29-4ED3-8CFC-D3504727DB4D@gmail.com>
Message-ID: <20131203120734.GA18895@tilt>

On Tue, Dec 03, 2013 at 12:57:23PM +0100, Taylor Gerring wrote:
> 
> On Dec 3, 2013, at 12:29 PM, Mike Hearn <mike at plan99.net> wrote:
> 
> > It may be acceptable that receivers don't always receive exactly what they requested, at least for person-to-business transactions.  For person-to-person transactions of course any fee at all is confusing because you intuitively expect that if you send 1 mBTC, then 1 mBTC will arrive the other end. I wonder if we'll end up in a world where buying things from shops involves paying fees, and (more occasional?) person-to-person transactions tend to be free and people just understand that the money isn't going to be spendable for a while.
> 
> 
> > person-to-business transactions.  For person-to-person transactions
> Why should there be two classes of transactions? Where does paying a local business at a farmer?s stand lie in that realm? Transactions should work the same regardless of who is on the receiving end.
> 
> > any fee at all is confusing because you intuitively expect that if you send 1 mBTC, then 1 mBTC will arrive the other end
> The paradigm of sending money has an explicit cost is not new... I think people are used to Western Union/PayPal and associated fees, no?  It?s okay to have a fee if it?s reasonable, so let?s inform the user what the estimated cost is to send a transaction in a reasonable amount of time.

Indeed.

Transparency on fees is going to be good from a marketing point of view
as well: fact is, Bitcoin transations have fees involved, and if we're
up-front and honest about those fees and what they are and why, we
demystify the system and give people the confidence to tell others about
the cost-advantages of Bitcoin, and at the same time, combat fud about
fees with accurate and honest information.

-- 
'peter'[:-1]@petertodd.org
000000000000000f9102d27cfd61ea9e8bb324593593ca3ce6ba53153ff251b3
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 490 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131203/a2ca1e26/attachment.sig>

From jamie.mcnaught at gmail.com  Tue Dec  3 13:20:11 2013
From: jamie.mcnaught at gmail.com (Jamie McNaught)
Date: Tue, 3 Dec 2013 13:20:11 +0000
Subject: [Bitcoin-development] Floating fees and SPV clients
In-Reply-To: <20131203120734.GA18895@tilt>
References: <39921E12-B411-4430-9D56-04F53906B109@plan99.net>
	<CAGLkj4C9fyAX1CnB0oZH3BwLRQp6WOo9kLUqDhRUSA6y3LxYvg@mail.gmail.com>
	<CANEZrP1C=Hc-3f-rqQ+wYrPn-eUj52HjN+qRQdJMWvnP+dkK=Q@mail.gmail.com>
	<CAJHLa0P_uzEQ2OG2FTXyD2Zw4RzujNBxKbKD04CSS1sLNpLUUQ@mail.gmail.com>
	<CANEZrP2hf2853w9f4__Ji9v3eRRU0u6pEzPxAmFN+iH067gtnA@mail.gmail.com>
	<CABsx9T3NQDPL6=pz5BD5DsP0qh0x3LJOCj2H3yY5tzL2_DivGA@mail.gmail.com>
	<CANEZrP1PLKemiUEgMJRGdiZXt7o=0_5fhLKYY0x3Ngb_iEm+2w@mail.gmail.com>
	<CABsx9T322nCvynRCL6Mb9C0f5EuJSfMDTSGiU+_JsYoSCb=_kQ@mail.gmail.com>
	<CANEZrP0P9NTJXs22K8-4hnLkxV7Uo+tjvWKJ8msgxiFgJW6xvg@mail.gmail.com>
	<05CEDEB4-BA29-4ED3-8CFC-D3504727DB4D@gmail.com>
	<20131203120734.GA18895@tilt>
Message-ID: <CAO4nzO+BJYJGjg0z-duAU6kR7c6Og75P_SYjtBo7sPDQ4yxX9Q@mail.gmail.com>

Hi all, first post so go easy on me!

Background/Intro: I'm a C/C++ software engineer with a keen interest in
Bitcoin working for everyone. I've spent the last couple of months pitching
Bitcoin to merchants & end users (previously I mined),

While I agree as Peter said, transparency with fees is good and leaving it
to the wallet designer to decide to either show / hide these (as Gavin
suggested) there is no denying that users hate fees/charges. That's why in
the UK so many online retailers offer free delivery (again perceived as a
zero value add charge). Infact, if you ask the average consumer, they only
have a mild inkling that there are fees paid by the merchants for using
credit cards.

So I'd agree with Gavin's proposed spec in an optional uint64 minfee which
senders(wallets) should deduct from the total paid to the receiver. If
however the sender is doing a dust collection txn (surely hugely unusual
for legit users?) then the sender should pay the additional costs. Does
that make "minfee" actually "minfeeperkb"? Perhaps, but wallets should aim
to not display such implementation details.

As a newb though, I have to ask, how does the receiver/requester/merchant
enforce these fee requests are respected?




On 3 December 2013 12:07, Peter Todd <pete at petertodd.org> wrote:

> On Tue, Dec 03, 2013 at 12:57:23PM +0100, Taylor Gerring wrote:
> >
> > On Dec 3, 2013, at 12:29 PM, Mike Hearn <mike at plan99.net> wrote:
> >
> > > It may be acceptable that receivers don't always receive exactly what
> they requested, at least for person-to-business transactions.  For
> person-to-person transactions of course any fee at all is confusing because
> you intuitively expect that if you send 1 mBTC, then 1 mBTC will arrive the
> other end. I wonder if we'll end up in a world where buying things from
> shops involves paying fees, and (more occasional?) person-to-person
> transactions tend to be free and people just understand that the money
> isn't going to be spendable for a while.
> >
> >
> > > person-to-business transactions.  For person-to-person transactions
> > Why should there be two classes of transactions? Where does paying a
> local business at a farmer?s stand lie in that realm? Transactions should
> work the same regardless of who is on the receiving end.
> >
> > > any fee at all is confusing because you intuitively expect that if you
> send 1 mBTC, then 1 mBTC will arrive the other end
> > The paradigm of sending money has an explicit cost is not new... I think
> people are used to Western Union/PayPal and associated fees, no?  It?s okay
> to have a fee if it?s reasonable, so let?s inform the user what the
> estimated cost is to send a transaction in a reasonable amount of time.
>
> Indeed.
>
> Transparency on fees is going to be good from a marketing point of view
> as well: fact is, Bitcoin transations have fees involved, and if we're
> up-front and honest about those fees and what they are and why, we
> demystify the system and give people the confidence to tell others about
> the cost-advantages of Bitcoin, and at the same time, combat fud about
> fees with accurate and honest information.
>
> --
> 'peter'[:-1]@petertodd.org
> 000000000000000f9102d27cfd61ea9e8bb324593593ca3ce6ba53153ff251b3
>
>
> ------------------------------------------------------------------------------
> Rapidly troubleshoot problems before they affect your business. Most IT
> organizations don't have a clear picture of how application performance
> affects their revenue. With AppDynamics, you get 100% visibility into your
> Java,.NET, & PHP application. Start your 15-day FREE TRIAL of AppDynamics
> Pro!
> http://pubads.g.doubleclick.net/gampad/clk?id=84349351&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131203/1cb29c19/attachment.html>

From mike at plan99.net  Tue Dec  3 13:20:36 2013
From: mike at plan99.net (Mike Hearn)
Date: Tue, 3 Dec 2013 14:20:36 +0100
Subject: [Bitcoin-development] Floating fees and SPV clients
In-Reply-To: <05CEDEB4-BA29-4ED3-8CFC-D3504727DB4D@gmail.com>
References: <CANEZrP3tGdFh6oG5fbX9JbU6sYbbex1cq=0tQB-0A4aDrdbXrQ@mail.gmail.com>
	<l7f97u$jdg$1@ger.gmane.org>
	<5E4597E4-C1C7-4536-8CF0-82EDD7715DAB@plan99.net>
	<l7fpbn$hf6$1@ger.gmane.org>
	<39921E12-B411-4430-9D56-04F53906B109@plan99.net>
	<CAGLkj4C9fyAX1CnB0oZH3BwLRQp6WOo9kLUqDhRUSA6y3LxYvg@mail.gmail.com>
	<CANEZrP1C=Hc-3f-rqQ+wYrPn-eUj52HjN+qRQdJMWvnP+dkK=Q@mail.gmail.com>
	<CAJHLa0P_uzEQ2OG2FTXyD2Zw4RzujNBxKbKD04CSS1sLNpLUUQ@mail.gmail.com>
	<CANEZrP2hf2853w9f4__Ji9v3eRRU0u6pEzPxAmFN+iH067gtnA@mail.gmail.com>
	<CABsx9T3NQDPL6=pz5BD5DsP0qh0x3LJOCj2H3yY5tzL2_DivGA@mail.gmail.com>
	<CANEZrP1PLKemiUEgMJRGdiZXt7o=0_5fhLKYY0x3Ngb_iEm+2w@mail.gmail.com>
	<CABsx9T322nCvynRCL6Mb9C0f5EuJSfMDTSGiU+_JsYoSCb=_kQ@mail.gmail.com>
	<CANEZrP0P9NTJXs22K8-4hnLkxV7Uo+tjvWKJ8msgxiFgJW6xvg@mail.gmail.com>
	<05CEDEB4-BA29-4ED3-8CFC-D3504727DB4D@gmail.com>
Message-ID: <CANEZrP2PrhtFRPK4dSDFeu9iauqt_WJzCMrr+ynbAPRMBbDcOQ@mail.gmail.com>

On Tue, Dec 3, 2013 at 12:57 PM, Taylor Gerring <taylor.gerring at gmail.com>wrote:

> Why should there be two classes of transactions? Where does paying a local
> business at a farmer?s stand lie in that realm? Transactions should work
> the same regardless of who is on the receiving end.
>

Lots and lots of people are psychologically trained to expect that they pay
the sticker price for things. Yes in recent times some places have started
to show additional fees for using credit cards, but only as a way to try
and push people onto cheaper forms of payment, not because customers love
surcharges. It's for that reason that many merchants don't do this, even
when they could - I pay for things with Maestro Debit all the time and I
don't think I've ever seen a surcharge. That system obviously has costs,
but they're included.

This is just a basic cultural thing - when I buy something from a shop, the
social expectation is that the seller should be grateful for receiving my
money. "The customer is always right". When I send money to a friend, the
social expectation is different. If my friend said, hey Mike, could you
send me that 10 bucks you owe me from last weekend and what he receives is
less than 10 bucks, he would probably feel annoyed - if I owe him 10 bucks
then I owe him 10 bucks and it's my job the cover the fees. That's why
PayPal makes sender pay fees in that case.

Maybe we need new terminology for this. *Interior fees* for included in the
price/receiver pays and *exterior fees* for excluded from the price/sender
pays?

Fees are only confusing because existing clients do a terrible job of
> presenting the information to the user. In Hive Wallet, I?m of the opinion
> that we should inform the user in an intuitive way to let them make an
> informed decision.
>

Have you thought through the UI for that in detail? How exactly are you
going to explain the fee structure? Let the user pick the number of blocks
they need to wait for? What's a block? Why should I care? Why shouldn't I
just set the slider all the way to the other end and pay no fees at all? Is
the merchant going to refuse to take my payment? Gavin just said that's not
possible with Bitcoin-Qt. I'm thinking for bitcoinj I might go in a
slightly different direction and not broadcast payments submitted via the
payment protocol (and definitely not have one wire tx pay multiple payment
requests simultaneously, at least not for consumer wallets).
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131203/de1cf793/attachment.html>

From taylor.gerring at gmail.com  Tue Dec  3 13:48:58 2013
From: taylor.gerring at gmail.com (Taylor Gerring)
Date: Tue, 3 Dec 2013 14:48:58 +0100
Subject: [Bitcoin-development] Floating fees and SPV clients
In-Reply-To: <CANEZrP2PrhtFRPK4dSDFeu9iauqt_WJzCMrr+ynbAPRMBbDcOQ@mail.gmail.com>
References: <CANEZrP3tGdFh6oG5fbX9JbU6sYbbex1cq=0tQB-0A4aDrdbXrQ@mail.gmail.com>
	<l7f97u$jdg$1@ger.gmane.org>
	<5E4597E4-C1C7-4536-8CF0-82EDD7715DAB@plan99.net>
	<l7fpbn$hf6$1@ger.gmane.org>
	<39921E12-B411-4430-9D56-04F53906B109@plan99.net>
	<CAGLkj4C9fyAX1CnB0oZH3BwLRQp6WOo9kLUqDhRUSA6y3LxYvg@mail.gmail.com>
	<CANEZrP1C=Hc-3f-rqQ+wYrPn-eUj52HjN+qRQdJMWvnP+dkK=Q@mail.gmail.com>
	<CAJHLa0P_uzEQ2OG2FTXyD2Zw4RzujNBxKbKD04CSS1sLNpLUUQ@mail.gmail.com>
	<CANEZrP2hf2853w9f4__Ji9v3eRRU0u6pEzPxAmFN+iH067gtnA@mail.gmail.com>
	<CABsx9T3NQDPL6=pz5BD5DsP0qh0x3LJOCj2H3yY5tzL2_DivGA@mail.gmail.com>
	<CANEZrP1PLKemiUEgMJRGdiZXt7o=0_5fhLKYY0x3Ngb_iEm+2w@mail.gmail.com>
	<CABsx9T322nCvynRCL6Mb9C0f5EuJSfMDTSGiU+_JsYoSCb=_kQ@mail.gmail.com>
	<CANEZrP0P9NTJXs22K8-4hnLkxV7Uo+tjvWKJ8msgxiFgJW6xvg@mail.gmail.com>
	<05CEDEB4-BA29-4ED3-8CFC-D3504727DB4D@gmail.com>
	<CANEZrP2PrhtFRPK4dSDFeu9iauqt_WJzCMrr+ynbAPRMBbDcOQ@mail.gmail.com>
Message-ID: <2176080D-CE85-422C-A937-A1849F584C51@gmail.com>


On Dec 3, 2013, at 2:20 PM, Mike Hearn <mike at plan99.net> wrote:

> On Tue, Dec 3, 2013 at 12:57 PM, Taylor Gerring <taylor.gerring at gmail.com> wrote:
> Why should there be two classes of transactions? Where does paying a local business at a farmer?s stand lie in that realm? Transactions should work the same regardless of who is on the receiving end.
> 
> Lots and lots of people are psychologically trained to expect that they pay the sticker price for things. Yes in recent times some places have started to show additional fees for using credit cards, but only as a way to try and push people onto cheaper forms of payment, not because customers love surcharges. It's for that reason that many merchants don't do this, even when they could - I pay for things with Maestro Debit all the time and I don't think I've ever seen a surcharge. That system obviously has costs, but they're included.
> 
> This is just a basic cultural thing - when I buy something from a shop, the social expectation is that the seller should be grateful for receiving my money. "The customer is always right". When I send money to a friend, the social expectation is different. If my friend said, hey Mike, could you send me that 10 bucks you owe me from last weekend and what he receives is less than 10 bucks, he would probably feel annoyed - if I owe him 10 bucks then I owe him 10 bucks and it's my job the cover the fees. That's why PayPal makes sender pay fees in that case.
> 
> Maybe we need new terminology for this. Interior fees for included in the price/receiver pays and exterior fees for excluded from the price/sender pays?
> 
> Fees are only confusing because existing clients do a terrible job of presenting the information to the user. In Hive Wallet, I?m of the opinion that we should inform the user in an intuitive way to let them make an informed decision.
> 
> Have you thought through the UI for that in detail? How exactly are you going to explain the fee structure? Let the user pick the number of blocks they need to wait for? What's a block? Why should I care? Why shouldn't I just set the slider all the way to the other end and pay no fees at all? Is the merchant going to refuse to take my payment? Gavin just said that's not possible with Bitcoin-Qt. I'm thinking for bitcoinj I might go in a slightly different direction and not broadcast payments submitted via the payment protocol (and definitely not have one wire tx pay multiple payment requests simultaneously, at least not for consumer wallets).
> 
> 

Most of what you mentioned is entirely culture-dependant. In the majority of North America, sales tax is calculated at the point of sale on top of the advertised price. When my local government increases sales taxes, we feel it BECAUSE we see it. Expose information in a digestible way. Just because you don?t instinctively know how to implement a UI for varying sender fees doesn?t mean that other wallets don?t.

Leave the fee structure alone. Instead, let?s concentrate on how to calculate an accurate assessment of what a reasonable fee is for reliable service and let the software shake out the rest.

Taylor

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131203/57f9e83e/attachment.html>

From mike at plan99.net  Tue Dec  3 13:54:26 2013
From: mike at plan99.net (Mike Hearn)
Date: Tue, 3 Dec 2013 14:54:26 +0100
Subject: [Bitcoin-development] Floating fees and SPV clients
In-Reply-To: <2176080D-CE85-422C-A937-A1849F584C51@gmail.com>
References: <CANEZrP3tGdFh6oG5fbX9JbU6sYbbex1cq=0tQB-0A4aDrdbXrQ@mail.gmail.com>
	<l7f97u$jdg$1@ger.gmane.org>
	<5E4597E4-C1C7-4536-8CF0-82EDD7715DAB@plan99.net>
	<l7fpbn$hf6$1@ger.gmane.org>
	<39921E12-B411-4430-9D56-04F53906B109@plan99.net>
	<CAGLkj4C9fyAX1CnB0oZH3BwLRQp6WOo9kLUqDhRUSA6y3LxYvg@mail.gmail.com>
	<CANEZrP1C=Hc-3f-rqQ+wYrPn-eUj52HjN+qRQdJMWvnP+dkK=Q@mail.gmail.com>
	<CAJHLa0P_uzEQ2OG2FTXyD2Zw4RzujNBxKbKD04CSS1sLNpLUUQ@mail.gmail.com>
	<CANEZrP2hf2853w9f4__Ji9v3eRRU0u6pEzPxAmFN+iH067gtnA@mail.gmail.com>
	<CABsx9T3NQDPL6=pz5BD5DsP0qh0x3LJOCj2H3yY5tzL2_DivGA@mail.gmail.com>
	<CANEZrP1PLKemiUEgMJRGdiZXt7o=0_5fhLKYY0x3Ngb_iEm+2w@mail.gmail.com>
	<CABsx9T322nCvynRCL6Mb9C0f5EuJSfMDTSGiU+_JsYoSCb=_kQ@mail.gmail.com>
	<CANEZrP0P9NTJXs22K8-4hnLkxV7Uo+tjvWKJ8msgxiFgJW6xvg@mail.gmail.com>
	<05CEDEB4-BA29-4ED3-8CFC-D3504727DB4D@gmail.com>
	<CANEZrP2PrhtFRPK4dSDFeu9iauqt_WJzCMrr+ynbAPRMBbDcOQ@mail.gmail.com>
	<2176080D-CE85-422C-A937-A1849F584C51@gmail.com>
Message-ID: <CANEZrP2ouUVuCXtd1FE=re76ECSQVrBVHjbn-tTR8+q=E7=AoA@mail.gmail.com>

Heh. People feel rises in sales tax elsewhere too. When VAT rises merchants
all raise their prices, they don't normally swallow it (or if they do, they
make a big fuss over how awesome they are).

The US system is a complete pain in the ass. You never know how much money
you actually need to pay for anything unless you happen to know the local
rate and do the multiplication in your head. There's a reason this system
is not used in big chunks of the world economy.


> Expose information in a digestible way. Just because you don?t
> instinctively know how to implement a UI for varying sender fees doesn?t
> mean that other wallets don?t.
>

I would love to know how to do it. If you have an intuitive GUI in mind
please show us so other wallet authors can copy it :)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131203/e1a1e722/attachment.html>

From btcdev at quinnharris.me  Tue Dec  3 14:42:35 2013
From: btcdev at quinnharris.me (Quinn Harris)
Date: Tue, 03 Dec 2013 11:42:35 -0300
Subject: [Bitcoin-development] Floating fees and SPV clients
In-Reply-To: <CANEZrP2PrhtFRPK4dSDFeu9iauqt_WJzCMrr+ynbAPRMBbDcOQ@mail.gmail.com>
References: <CANEZrP3tGdFh6oG5fbX9JbU6sYbbex1cq=0tQB-0A4aDrdbXrQ@mail.gmail.com>	<l7f97u$jdg$1@ger.gmane.org>	<5E4597E4-C1C7-4536-8CF0-82EDD7715DAB@plan99.net>	<l7fpbn$hf6$1@ger.gmane.org>	<39921E12-B411-4430-9D56-04F53906B109@plan99.net>	<CAGLkj4C9fyAX1CnB0oZH3BwLRQp6WOo9kLUqDhRUSA6y3LxYvg@mail.gmail.com>	<CANEZrP1C=Hc-3f-rqQ+wYrPn-eUj52HjN+qRQdJMWvnP+dkK=Q@mail.gmail.com>	<CAJHLa0P_uzEQ2OG2FTXyD2Zw4RzujNBxKbKD04CSS1sLNpLUUQ@mail.gmail.com>	<CANEZrP2hf2853w9f4__Ji9v3eRRU0u6pEzPxAmFN+iH067gtnA@mail.gmail.com>	<CABsx9T3NQDPL6=pz5BD5DsP0qh0x3LJOCj2H3yY5tzL2_DivGA@mail.gmail.com>	<CANEZrP1PLKemiUEgMJRGdiZXt7o=0_5fhLKYY0x3Ngb_iEm+2w@mail.gmail.com>	<CABsx9T322nCvynRCL6Mb9C0f5EuJSfMDTSGiU+_JsYoSCb=_kQ@mail.gmail.com>	<CANEZrP0P9NTJXs22K8-4hnLkxV7Uo+tjvWKJ8msgxiFgJW6xvg@mail.gmail.com>	<05CEDEB4-BA29-4ED3-8CFC-D3504727DB4D@gmail.com>
	<CANEZrP2PrhtFRPK4dSDFeu9iauqt_WJzCMrr+ynbAPRMBbDcOQ@mail.gmail.com>
Message-ID: <529DEDDB.1090108@quinnharris.me>

The merchant wants to include a fee to ensure the transaction is 
confirmed which is dependent on the fee per kilobyte, but they don't 
want to pay unexpectedly high fees. So what about including a 
min_fee_per_kilobyte and a max_fee in PaymentDetails describing what 
fees the merchant will pay.  The sender would be expected to respect the 
min_fee_per_kilobyte but if the result exceeds max_fee the sender would 
be agreeing to pay the extra fee (exterior fees).  The sender might also 
agree to pay fees in excess of min_fee_per_kilobyte.

The sender would deduct the interior or merchant fees from the first output.

The UI could show the payment "price" which would match the sum of 
original outputs.  It would show the merchant fees (interior) and sender 
fees (exterior) if there are any.  The UI should always show fees so 
users learn to expect them for all transactions.

This should allow the merchant to pay fees in most cases while not 
having to pay excessive fees if the sender wants to use some large 
transaction.  If max_fee is 0 the sender would be expected to pay all fees.

On 12/03/2013 10:20 AM, Mike Hearn wrote:
> On Tue, Dec 3, 2013 at 12:57 PM, Taylor Gerring 
> <taylor.gerring at gmail.com <mailto:taylor.gerring at gmail.com>> wrote:
>
>     Why should there be two classes of transactions? Where does paying
>     a local business at a farmer's stand lie in that realm?
>     Transactions should work the same regardless of who is on the
>     receiving end.
>
>
> Lots and lots of people are psychologically trained to expect that 
> they pay the sticker price for things. Yes in recent times some places 
> have started to show additional fees for using credit cards, but only 
> as a way to try and push people onto cheaper forms of payment, not 
> because customers love surcharges. It's for that reason that many 
> merchants don't do this, even when they could - I pay for things with 
> Maestro Debit all the time and I don't think I've ever seen a 
> surcharge. That system obviously has costs, but they're included.
>
> This is just a basic cultural thing - when I buy something from a 
> shop, the social expectation is that the seller should be grateful for 
> receiving my money. "The customer is always right". When I send money 
> to a friend, the social expectation is different. If my friend said, 
> hey Mike, could you send me that 10 bucks you owe me from last weekend 
> and what he receives is less than 10 bucks, he would probably feel 
> annoyed - if I owe him 10 bucks then I owe him 10 bucks and it's my 
> job the cover the fees. That's why PayPal makes sender pay fees in 
> that case.
>
> Maybe we need new terminology for this. /Interior fees/ for included 
> in the price/receiver pays and /exterior fees/ for excluded from the 
> price/sender pays?
>
>     Fees are only confusing because existing clients do a terrible job
>     of presenting the information to the user. In Hive Wallet, I'm of
>     the opinion that we should inform the user in an intuitive way to
>     let them make an informed decision.
>
>
> Have you thought through the UI for that in detail? How exactly are 
> you going to explain the fee structure? Let the user pick the number 
> of blocks they need to wait for? What's a block? Why should I care? 
> Why shouldn't I just set the slider all the way to the other end and 
> pay no fees at all? Is the merchant going to refuse to take my 
> payment? Gavin just said that's not possible with Bitcoin-Qt. I'm 
> thinking for bitcoinj I might go in a slightly different direction and 
> not broadcast payments submitted via the payment protocol (and 
> definitely not have one wire tx pay multiple payment requests 
> simultaneously, at least not for consumer wallets).
>
>
>
>
> ------------------------------------------------------------------------------
> Rapidly troubleshoot problems before they affect your business. Most IT
> organizations don't have a clear picture of how application performance
> affects their revenue. With AppDynamics, you get 100% visibility into your
> Java,.NET, & PHP application. Start your 15-day FREE TRIAL of AppDynamics Pro!
> http://pubads.g.doubleclick.net/gampad/clk?id=84349351&iu=/4140/ostg.clktrk
>
>
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131203/1544d487/attachment.html>

From fragabr at gmail.com  Tue Dec  3 19:59:10 2013
From: fragabr at gmail.com (=?UTF-8?B?RMOibmllbA==?= Fraga)
Date: Tue, 3 Dec 2013 17:59:10 -0200
Subject: [Bitcoin-development] Suggestion: easy way to restore wallet.dat
	backup
Message-ID: <l7ld63$25l$2@ger.gmane.org>

	I posted this on bitcoin-user, but nobody replied, so I'm
trying here.

	Today, when a user uses bitcoin-qt client, it can make a backup
of wallet.dat easily through menu, but when he/she needs to restore
this backup, he/she must copy the file to the correct folder and
execute "bitcoin-qt -rescan".

	My suggestion: bitcoin-qt developers could implement an easier
way to restore. For example: a option in the File menu "Restore Wallet"
or "Recover Wallet" where it would show a dialog asking for the backup
file and everything would be done automatically (no need to do it
manually).

	If we want everybody to use bitcoin, these operations should
be as easy as possible.

	What do you think?

-- 
Linux 3.12.0: One Giant Leap for Frogkind
http://www.youtube.com/DanielFragaBR
http://mcxnow.com
Bitcoin: 12H6661yoLDUZaYPdah6urZS5WiXwTAUgL





From odinn.cyberguerrilla at riseup.net  Wed Dec  4 01:46:16 2013
From: odinn.cyberguerrilla at riseup.net (Odinn Cyberguerrilla)
Date: Tue, 3 Dec 2013 17:46:16 -0800
Subject: [Bitcoin-development] ABIS protocol introduction
Message-ID: <1fc7967a244515c41508b4e2645cf724.squirrel@fulvetta.riseup.net>

Hello,

This concept, 'ABIS protocol,' has been many years in the making and is
presented here as a basic concept.  It is sent to you for you review and
possible consideration.  There will be further additions in the near
future.  Looking forward to your reply and any contributions you may
provide.

Cheers

https://github.com/ABISprotocol/ABIS#abis





From wtogami at gmail.com  Wed Dec  4 01:57:00 2013
From: wtogami at gmail.com (Warren Togami Jr.)
Date: Tue, 3 Dec 2013 15:57:00 -1000
Subject: [Bitcoin-development] Coin Control, Send crash on MacOS X
In-Reply-To: <CA+s+GJA-rXF7spPwLDJv-hGRk-obohdJDHQ9D6bDTdh1UGZVEQ@mail.gmail.com>
References: <CAEz79PptC4VZr19iHYx5iA2K8SZ2aJbUvnt8_ZGRwbBJ6=WW3A@mail.gmail.com>
	<CA+s+GJA-rXF7spPwLDJv-hGRk-obohdJDHQ9D6bDTdh1UGZVEQ@mail.gmail.com>
Message-ID: <CAEz79Pp0LXfvLo85_FVcL-gLLYYon0SLHoG40qTfFDs59f40yw@mail.gmail.com>

On Sun, Dec 1, 2013 at 1:19 AM, Wladimir <laanwj at gmail.com> wrote:

> On Sun, Dec 1, 2013 at 12:05 PM, Warren Togami Jr. <wtogami at gmail.com>wrote:
>
>> https://github.com/litecoin-project/bitcoinomg/commits/0.8.5-OMG6
>> http://download1.rpmfusion.org/~warren/bitcoin-0.8.5-OMG6/
>> I've been backporting patches from master and Litecoin to make a Bitcoin
>> 0.8 client with more features.  It works quite well on Linux and Win32.
>>
>> http://pastebin.com/g8QqheGc
>> Today we discovered a rare crash that can happen on MacOS X. toffoo and
>> coblee reproduced it on MacOS X 10.9 and I reproduced it on 10.6.8. It
>> seems to be some kind of race condition involving SendCoinsEntry::clear().
>>
>>
>>    1. 11  QtGui                               0x00e28141
>>    QWidget::setFocus(Qt::FocusReason) + 289
>>    2. 12  org.bitcoinfoundation.Bitcoin-Qt    0x002ca665
>>    SendCoinsEntry::clear() + 101
>>
>>
> I don't think the setFocus should be in clear() in the first place. It
> conflates clearing the widgets and changing the focus.
>
> If the automatic focus change is desirable at all it could be moved to a
> seperate function "focusPayTo".
>
> In any case it's just a nicety and should just be removed if it causes
> problems.
>
> Wladimir
>
>
Did as you suggested, removed both setFocus() calls that happen after Send
is clicked

http://pastebin.com/j4adDpsM
Now it crashes in something else within qt.

I'm trying other things...

Warren
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131203/182c1fb1/attachment.html>

From jeremy at taplink.co  Wed Dec  4 01:45:44 2013
From: jeremy at taplink.co (Jeremy Spilman)
Date: Tue, 03 Dec 2013 17:45:44 -0800
Subject: [Bitcoin-development] Floating fees and SPV clients
In-Reply-To: <CABsx9T322nCvynRCL6Mb9C0f5EuJSfMDTSGiU+_JsYoSCb=_kQ@mail.gmail.com>
References: <CANEZrP3tGdFh6oG5fbX9JbU6sYbbex1cq=0tQB-0A4aDrdbXrQ@mail.gmail.com>
	<l7f97u$jdg$1@ger.gmane.org>
	<5E4597E4-C1C7-4536-8CF0-82EDD7715DAB@plan99.net>
	<l7fpbn$hf6$1@ger.gmane.org>
	<39921E12-B411-4430-9D56-04F53906B109@plan99.net>
	<CAGLkj4C9fyAX1CnB0oZH3BwLRQp6WOo9kLUqDhRUSA6y3LxYvg@mail.gmail.com>
	<CANEZrP1C=Hc-3f-rqQ+wYrPn-eUj52HjN+qRQdJMWvnP+dkK=Q@mail.gmail.com>
	<CAJHLa0P_uzEQ2OG2FTXyD2Zw4RzujNBxKbKD04CSS1sLNpLUUQ@mail.gmail.com>
	<CANEZrP2hf2853w9f4__Ji9v3eRRU0u6pEzPxAmFN+iH067gtnA@mail.gmail.com>
	<CABsx9T3NQDPL6=pz5BD5DsP0qh0x3LJOCj2H3yY5tzL2_DivGA@mail.gmail.com>
	<CANEZrP1PLKemiUEgMJRGdiZXt7o=0_5fhLKYY0x3Ngb_iEm+2w@mail.gmail.com>
	<CABsx9T322nCvynRCL6Mb9C0f5EuJSfMDTSGiU+_JsYoSCb=_kQ@mail.gmail.com>
Message-ID: <op.w7jnreqwyldrnw@laptop-air.hsd1.ca.comcast.net>

allowfee:

> Allow up to allowfee satoshis to be deducted from the amount paid to be  
> used to pay Bitcoin network transaction fees. A wallet >implementation  
> must not reduce the amount paid for fees more than allowfee, and  
> transaction fees must be equal to or greater than the >amount reduced.

minfee:

> Pay at least minfee satoshis in transaction fees. Wallet software should  
> add minfee to the amount the user authorizes and pays, and >include at  
> least minfee in the transaction created to pay miner's transaction fees.  
> Wallet software may request that the user pays more, if >it must create  
> a complex transaction or judges that minfee is not sufficient for the  
> transaction to be accepted by the network..
>

Thanks for the draft specs Gavin. Very clear and precise.

Personally I think 'allowfee' is more useful than 'minfee'. The 'allowfee'  
tells me something very useful and definitive about what the merchant will  
let me do when making payment, and if the merchant chooses 'allowfee'  
intelligently, they can provide real value to their customers without  
exposing them to undue risk.

A 'minfee' field on the other hand, is just a data point for the wallet  
software to consider, and likely to be noisy enough that wallets will tend  
to ignore it. (e.g. like Drak's example of Gox's 0.001 fee)

The sender's wallet software will always be free to choose the fee, and  
paying less than the 'allowfee' or 'minfee' can still get a TX included in  
the next block.

I think of the PaymentRequest is a part of the purchase contract. If a  
payer transmits a transaction before 'expires' but with less than  
'minfee', which gets included in the next block, have they  failed to meet  
the terms of payment?

If there is some time criticality, for example to reduce exchange rate  
risk, then a wallet might need to choose a higher fee to ensure the  
transaction clears in time. Instead of 'minfee' I'm thinking it would be  
more appropriate to communicate this using the existing 'expires' field --  
in other words, let the merchant express what their requirement is, not  
tell the wallet how to achieve it.

In the case of a transaction with too-low fee, either the payer can  
double-spend with a higher fee, or wait longer for the transaction to make  
it into a block. If it hits the blockchain before the 'expires' time, then  
the merchant should have no standing to refute it, regardless of the  
amount of fees paid.

A refund comes into play if a payer reduced the total amount in excess of  
an agreed upon 'allowfee', or if the transaction doesn't hit the  
blockchain until after 'expires'. It should be clear in these cases that  
payer would end up eating the fees in both directions. But then, what if a  
wallet pays the 'minfee' and broadcasts 1 block before 'expires' but the  
payment DOESN'T make the block? Is the merchant liable for too-slow  
transactions due to their own insufficient 'minfee' value?

So I see 'allowfee' as extremely useful, but 'minfee' as somewhat  
problematic.

Thanks,
Jeremy




From casey at rodarmor.com  Wed Dec  4 05:16:18 2013
From: casey at rodarmor.com (Casey Rodarmor)
Date: Tue, 3 Dec 2013 21:16:18 -0800
Subject: [Bitcoin-development] Suggestion: easy way to restore
	wallet.dat backup
In-Reply-To: <l7ld63$25l$2@ger.gmane.org>
References: <l7ld63$25l$2@ger.gmane.org>
Message-ID: <CANLPe+Ox4zsQQ2nYshtzOHj9biK=YK3C+dcGZ3L_+Tj_HAQv3A@mail.gmail.com>

On Tue, Dec 3, 2013 at 11:59 AM, D?niel Fraga <fragabr at gmail.com> wrote:
>
>         Today, when a user uses bitcoin-qt client, it can make a backup
> of wallet.dat easily through menu, but when he/she needs to restore
> this backup, he/she must copy the file to the correct folder and
> execute "bitcoin-qt -rescan".
>

I actually think this is part of a larger and somewhat subtle UX problem
with bitcoin-qt ? and, to be totally fair, a whole bunch of other wallet
programs.

I think the issue is that bitcoin-qt should have a document-oriented
approach to wallets. It should make you select a location to store your
wallet, just like a word processor, when you create a new wallet. It could
open the most recent wallet when you run the program, or allow you to open
a wallet by double-clicking it directly in the OS.

I think this would solve this particular issue nicely, just double click
the wallet file. Also, the menu item can just be labeled "Open Wallet". It
might also prevent those kind of heartbreaking posts which read something
like, "I just wiped my hard drive and reinstalled bitcoin-qt, where are my
coins?" People don't have the expectation that if they get Word on a new PC
that their documents will somehow magically be available, I think in part
because Word forces you to deal with the documents and the save location
yourself.

I know that this would bring with it a host of other considerations: Can
multiple wallets be open at the same time? What happens if a wallet file is
moved while it's open? What happens when there are two versions of the same
wallet? Will users understand that they need to backup their wallets
periodically?

But, I think it would be a big enough usability win that it should be
considered. Also, if at the same time bitcoin-qt were to adopt BIP 32 style
deterministically derived private keys from a single seed, a bunch of the
issues above would also go away: There are never two versions of the same
wallet, since they're the same seed, and periodic backups are unnecessary.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131203/e19d2db8/attachment.html>

From bitcoin-devel at jerviss.org  Wed Dec  4 05:50:27 2013
From: bitcoin-devel at jerviss.org (kjj)
Date: Tue, 03 Dec 2013 23:50:27 -0600
Subject: [Bitcoin-development] Floating fees and SPV clients
In-Reply-To: <CABsx9T3NQDPL6=pz5BD5DsP0qh0x3LJOCj2H3yY5tzL2_DivGA@mail.gmail.com>
References: <CANEZrP3tGdFh6oG5fbX9JbU6sYbbex1cq=0tQB-0A4aDrdbXrQ@mail.gmail.com>	<l7f97u$jdg$1@ger.gmane.org>	<5E4597E4-C1C7-4536-8CF0-82EDD7715DAB@plan99.net>	<l7fpbn$hf6$1@ger.gmane.org>	<39921E12-B411-4430-9D56-04F53906B109@plan99.net>	<CAGLkj4C9fyAX1CnB0oZH3BwLRQp6WOo9kLUqDhRUSA6y3LxYvg@mail.gmail.com>	<CANEZrP1C=Hc-3f-rqQ+wYrPn-eUj52HjN+qRQdJMWvnP+dkK=Q@mail.gmail.com>	<CAJHLa0P_uzEQ2OG2FTXyD2Zw4RzujNBxKbKD04CSS1sLNpLUUQ@mail.gmail.com>	<CANEZrP2hf2853w9f4__Ji9v3eRRU0u6pEzPxAmFN+iH067gtnA@mail.gmail.com>
	<CABsx9T3NQDPL6=pz5BD5DsP0qh0x3LJOCj2H3yY5tzL2_DivGA@mail.gmail.com>
Message-ID: <529EC2A3.7080602@jerviss.org>

After reading all 99 messages in this thread, I think allowfee is just 
about perfect.

It effectively lets merchants to give an allowance against the purchase 
price for network fees, if they choose.  It is still up to the sender 
(and/or the sender's software) to get the fees right.  Sometimes the 
sender will need to pay more fees than allowed, and sometimes the sender 
will need to pay less.

We can't solve the fee problem, in general.  I'm not sure that we can 
even define it properly.  But this is something that we can do, that 
will be useful at least occasionally, and that will cause no harm the 
rest of the time.

P.S.  Clever senders can use this to defrag their wallets.  Who wants to 
write the patch for that?

Gavin Andresen wrote:
> On Tue, Dec 3, 2013 at 12:44 AM, Mike Hearn <mike at plan99.net 
> <mailto:mike at plan99.net>> wrote:
>
>     PPv1 doesn't have any notion of fee unfortunately. I suppose it
>     could be added easily, but we also need to launch the existing
>     feature set.
>
>
> Lets bang out a merchant-pays-fee extension.
>
> How about:
>
> SPEC:
>
>     optional uint64 allowfee    tag number=1000
>
> Allow up to allowfee satoshis to be deducted from the amount paid to 
> be used to pay Bitcoin network transaction fees. A wallet 
> implementation must not reduce the amount paid for fees more than 
> allowfee, and transaction fees must be equal to or greater than the 
> amount reduced.
>
> :ENDSPEC
>
> Rationale: we don't want wallet software giving users discounts-- 
> sending transactions that are amount-allowfee without paying any fee. 
>  We also want to allow users to pay MORE in fees, if they need to 
> (fragmented wallet, maybe, or big CoinJoin transaction) or decide to.
>
>
> PS: I think there was also consensus that the BIP72  request=...   
> should be shortened to just r=... (save 6 chars in QR codes).  Unless 
> somebody objects, I'll change the BIP and the reference implementation 
> code to make it so...
>
> -- 
> --
> Gavin Andresen
>
>
>
> ------------------------------------------------------------------------------
> Rapidly troubleshoot problems before they affect your business. Most IT
> organizations don't have a clear picture of how application performance
> affects their revenue. With AppDynamics, you get 100% visibility into your
> Java,.NET, & PHP application. Start your 15-day FREE TRIAL of AppDynamics Pro!
> http://pubads.g.doubleclick.net/gampad/clk?id=84349351&iu=/4140/ostg.clktrk
>
>
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131203/c91f052f/attachment.html>

From laanwj at gmail.com  Wed Dec  4 07:02:48 2013
From: laanwj at gmail.com (Wladimir)
Date: Wed, 4 Dec 2013 08:02:48 +0100
Subject: [Bitcoin-development] Coin Control, Send crash on MacOS X
In-Reply-To: <CAEz79Pp0LXfvLo85_FVcL-gLLYYon0SLHoG40qTfFDs59f40yw@mail.gmail.com>
References: <CAEz79PptC4VZr19iHYx5iA2K8SZ2aJbUvnt8_ZGRwbBJ6=WW3A@mail.gmail.com>
	<CA+s+GJA-rXF7spPwLDJv-hGRk-obohdJDHQ9D6bDTdh1UGZVEQ@mail.gmail.com>
	<CAEz79Pp0LXfvLo85_FVcL-gLLYYon0SLHoG40qTfFDs59f40yw@mail.gmail.com>
Message-ID: <CA+s+GJDpU5UGXpFhFsmNHTLuVrkyVd+SeNKbS5skDgkPzmQ9-Q@mail.gmail.com>

>
> Did as you suggested, removed both setFocus() calls that happen after Send
>> is clicked
>>
>
> http://pastebin.com/j4adDpsM
> Now it crashes in something else within qt.
>
> I'm trying other things...
>

As I've said to you on IRC before, I think the problem is with this loop:

https://github.com/bitcoin/bitcoin/blob/master/src/qt/sendcoinsdialog.cpp#L261

This deletes widgets, but Qt may still be referring to them internally, and
"Deleting a QObject while pending events are waiting to be delivered can
cause a crash."

Can you try replacing with ->deleteLater()?

Wladimir
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131204/e963f50d/attachment.html>

From mike at plan99.net  Wed Dec  4 10:40:00 2013
From: mike at plan99.net (Mike Hearn)
Date: Wed, 4 Dec 2013 11:40:00 +0100
Subject: [Bitcoin-development] Floating fees and SPV clients
In-Reply-To: <op.w7jnreqwyldrnw@laptop-air.hsd1.ca.comcast.net>
References: <CANEZrP3tGdFh6oG5fbX9JbU6sYbbex1cq=0tQB-0A4aDrdbXrQ@mail.gmail.com>
	<l7f97u$jdg$1@ger.gmane.org>
	<5E4597E4-C1C7-4536-8CF0-82EDD7715DAB@plan99.net>
	<l7fpbn$hf6$1@ger.gmane.org>
	<39921E12-B411-4430-9D56-04F53906B109@plan99.net>
	<CAGLkj4C9fyAX1CnB0oZH3BwLRQp6WOo9kLUqDhRUSA6y3LxYvg@mail.gmail.com>
	<CANEZrP1C=Hc-3f-rqQ+wYrPn-eUj52HjN+qRQdJMWvnP+dkK=Q@mail.gmail.com>
	<CAJHLa0P_uzEQ2OG2FTXyD2Zw4RzujNBxKbKD04CSS1sLNpLUUQ@mail.gmail.com>
	<CANEZrP2hf2853w9f4__Ji9v3eRRU0u6pEzPxAmFN+iH067gtnA@mail.gmail.com>
	<CABsx9T3NQDPL6=pz5BD5DsP0qh0x3LJOCj2H3yY5tzL2_DivGA@mail.gmail.com>
	<CANEZrP1PLKemiUEgMJRGdiZXt7o=0_5fhLKYY0x3Ngb_iEm+2w@mail.gmail.com>
	<CABsx9T322nCvynRCL6Mb9C0f5EuJSfMDTSGiU+_JsYoSCb=_kQ@mail.gmail.com>
	<op.w7jnreqwyldrnw@laptop-air.hsd1.ca.comcast.net>
Message-ID: <CANEZrP3D4WhXTdMAT7B=DaXEOSdXESc+bU0n7enu7hSaGtns8A@mail.gmail.com>

I think this US/other cultural issue is complicating things more than we
appreciate.

I am trying to imagine in my head how all this will work and what it will
look like with allow_fee, and I just can't see it. Merchants want customers
to pay the sticker price, deviance from that social norm is extremely rare
even after the credit card company contracts that required it have been
invalidated. The only time it happens to me is when buying flight tickets
with credit cards: but it's only for that method, other payment methods are
still treated as "free" a.k.a interior fees.

If you walk into a physical shop and try to pay a large bill with bags of
pennies, the merchant won't enter into a complicated agreement where they
agree to split the cost of processing with you. They will just reject the
payment out of hand and tell you to get real. It has to be that way because
otherwise the shop would carry the cost of counting all the pennies and
hauling them around, not the buyer (who "knows" he put the right number of
pennies in the bags).

As a buyer, I do not care about whether my transaction will confirm. If I
try to pay with dust, there is no incentive for me to attach a higher fee
than allow_fee to make that confirm, especially if the merchant has no way
to reject the payment. What's more, as Jeremy points out, no clean fail
mechanism means large piles of manual work and lots of disputes due to
payments not clearing before the exchange rate shifts and other things like
that.

Trying to make the success of payment confirmation a two-person dance seems
to have so many edge cases it makes my head hurt. For most pay-to-merchant
cases, it has to be the receivers job to get a transaction confirmed, and
if the sender doesn't follow the instructions a payment should hard fail
and require trying again. If Bitcoin-Qt can't handle that today, that does
seem like a problem.

In the case of a transaction with too-low fee, either the payer can
> double-spend with a higher fee


You can't do that. When a tx doesn't have the right fee attached you're out
of luck today, except for the fact that some pools run with a custom child
pays for parent patch. So respending it would bump priority for some miners
and not others.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131204/21e7c3e0/attachment.html>

From pete at petertodd.org  Wed Dec  4 10:57:48 2013
From: pete at petertodd.org (Peter Todd)
Date: Wed, 04 Dec 2013 11:57:48 +0100
Subject: [Bitcoin-development] Floating fees and SPV clients
In-Reply-To: <CANEZrP3D4WhXTdMAT7B=DaXEOSdXESc+bU0n7enu7hSaGtns8A@mail.gmail.com>
References: <CANEZrP3tGdFh6oG5fbX9JbU6sYbbex1cq=0tQB-0A4aDrdbXrQ@mail.gmail.com>
	<l7f97u$jdg$1@ger.gmane.org>
	<5E4597E4-C1C7-4536-8CF0-82EDD7715DAB@plan99.net>
	<l7fpbn$hf6$1@ger.gmane.org>
	<39921E12-B411-4430-9D56-04F53906B109@plan99.net>
	<CAGLkj4C9fyAX1CnB0oZH3BwLRQp6WOo9kLUqDhRUSA6y3LxYvg@mail.gmail.com>
	<CANEZrP1C=Hc-3f-rqQ+wYrPn-eUj52HjN+qRQdJMWvnP+dkK=Q@mail.gmail.com>
	<CAJHLa0P_uzEQ2OG2FTXyD2Zw4RzujNBxKbKD04CSS1sLNpLUUQ@mail.gmail.com>
	<CANEZrP2hf2853w9f4__Ji9v3eRRU0u6pEzPxAmFN+iH067gtnA@mail.gmail.com>
	<CABsx9T3NQDPL6=pz5BD5DsP0qh0x3LJOCj2H3yY5tzL2_DivGA@mail.gmail.com>
	<CANEZrP1PLKemiUEgMJRGdiZXt7o=0_5fhLKYY0x3Ngb_iEm+2w@mail.gmail.com>
	<CABsx9T322nCvynRCL6Mb9C0f5EuJSfMDTSGiU+_JsYoSCb=_kQ@mail.gmail.com>
	<op.w7jnreqwyldrnw@laptop-air.hsd1.ca.comcast.net>
	<CANEZrP3D4WhXTdMAT7B=DaXEOSdXESc+bU0n7enu7hSaGtns8A@mail.gmail.com>
Message-ID: <e4515a76-b4c1-4a5f-a884-6d692b8d3466@email.android.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256



Mike Hearn <mike at plan99.net> wrote:
>I think this US/other cultural issue is complicating things more than
>we
>appreciate.
>
>I am trying to imagine in my head how all this will work and what it
>will
>look like with allow_fee, and I just can't see it. Merchants want
>customers
>to pay the sticker price, deviance from that social norm is extremely
>rare
>even after the credit card company contracts that required it have been
>invalidated. The only time it happens to me is when buying flight
>tickets
>with credit cards: but it's only for that method, other payment methods
>are
>still treated as "free" a.k.a interior fees.
>
>If you walk into a physical shop and try to pay a large bill with bags
>of
>pennies, the merchant won't enter into a complicated agreement where
>they
>agree to split the cost of processing with you. They will just reject
>the
>payment out of hand and tell you to get real. It has to be that way
>because
>otherwise the shop would carry the cost of counting all the pennies and
>hauling them around, not the buyer (who "knows" he put the right number
>of
>pennies in the bags).
>
>As a buyer, I do not care about whether my transaction will confirm. If
>I
>try to pay with dust, there is no incentive for me to attach a higher
>fee
>than allow_fee to make that confirm, especially if the merchant has no
>way
>to reject the payment. What's more, as Jeremy points out, no clean fail
>mechanism means large piles of manual work and lots of disputes due to
>payments not clearing before the exchange rate shifts and other things
>like
>that.
>
>Trying to make the success of payment confirmation a two-person dance
>seems
>to have so many edge cases it makes my head hurt. For most
>pay-to-merchant
>cases, it has to be the receivers job to get a transaction confirmed,
>and
>if the sender doesn't follow the instructions a payment should hard
>fail
>and require trying again. If Bitcoin-Qt can't handle that today, that
>does
>seem like a problem.
>
>In the case of a transaction with too-low fee, either the payer can
>> double-spend with a higher fee
>
>
>You can't do that. When a tx doesn't have the right fee attached you're
>out
>of luck today, except for the fact that some pools run with a custom
>child
>pays for parent patch. So respending it would bump priority for some
>miners
>and not others.


Here at the dark wallet conf there seems yo be rough consensus that replacement for fee bumping is a good thing and should be supported; I was talking to Taylor from hive specifically yesterday. The code is trivial on the node side of things and doesn't need consent of anymore than a small minority, and coinjoin forces wallets to handle double spends well anyway. I haven't heard anyone caring about zeroconf safety.

I'll be proposing it for "formal" inclusion in our wallet best practices guidelines.


Also fwiw apparently libbitcoin already implements a memory limited mempool and Amir is open to the idea of it using the satoshi consensus critical code for block validity. (therefor fairly safe mining) I wouldn't be surprised if libbitcoin based nodes start getting usage, and with a limited mempool it is very DoS attack safe for them to relay replacements regardless of miner support.
-----BEGIN PGP SIGNATURE-----
Version: APG v1.0.9

iQFQBAEBCAA6BQJSnwqsMxxQZXRlciBUb2RkIChsb3cgc2VjdXJpdHkga2V5KSA8
cGV0ZUBwZXRlcnRvZGQub3JnPgAKCRAZnIM7qOfwhR5yCAC3vaQQeoBrLdqn/rO5
Dzblqwl1B6AE1UjFj5+abQEZ2+uPy5P+7dZidpUn8Ms+tDDcCCge6HVOg+UeseaE
8pDP3+VIHZHH+9n6Y3+4facLNpQ3dP/+Zsg4pC+QSAjVV6408+yWPLtpbC6V0apK
T6K4qdq0Ct6V+54Ol0Thx+5cJlWLI+XbW2eXze3WjJzj3FgZUK0udBcVWa8JyWAV
WD1tv8DpPoUvDDzdmjEyf0EdjvcmamH9mcIvtxRdVwzyY/siZoizv9X8/gXNL+fg
JJ3Oxwrl1dOYSeENgp9VP8fU7GK7855bT1Wxd5zGNW7p/1gNxN4Lnx57XSMz2IHc
dHbg
=dcYz
-----END PGP SIGNATURE-----




From mike at plan99.net  Wed Dec  4 11:09:42 2013
From: mike at plan99.net (Mike Hearn)
Date: Wed, 4 Dec 2013 12:09:42 +0100
Subject: [Bitcoin-development] Floating fees and SPV clients
In-Reply-To: <e4515a76-b4c1-4a5f-a884-6d692b8d3466@email.android.com>
References: <CANEZrP3tGdFh6oG5fbX9JbU6sYbbex1cq=0tQB-0A4aDrdbXrQ@mail.gmail.com>
	<l7f97u$jdg$1@ger.gmane.org>
	<5E4597E4-C1C7-4536-8CF0-82EDD7715DAB@plan99.net>
	<l7fpbn$hf6$1@ger.gmane.org>
	<39921E12-B411-4430-9D56-04F53906B109@plan99.net>
	<CAGLkj4C9fyAX1CnB0oZH3BwLRQp6WOo9kLUqDhRUSA6y3LxYvg@mail.gmail.com>
	<CANEZrP1C=Hc-3f-rqQ+wYrPn-eUj52HjN+qRQdJMWvnP+dkK=Q@mail.gmail.com>
	<CAJHLa0P_uzEQ2OG2FTXyD2Zw4RzujNBxKbKD04CSS1sLNpLUUQ@mail.gmail.com>
	<CANEZrP2hf2853w9f4__Ji9v3eRRU0u6pEzPxAmFN+iH067gtnA@mail.gmail.com>
	<CABsx9T3NQDPL6=pz5BD5DsP0qh0x3LJOCj2H3yY5tzL2_DivGA@mail.gmail.com>
	<CANEZrP1PLKemiUEgMJRGdiZXt7o=0_5fhLKYY0x3Ngb_iEm+2w@mail.gmail.com>
	<CABsx9T322nCvynRCL6Mb9C0f5EuJSfMDTSGiU+_JsYoSCb=_kQ@mail.gmail.com>
	<op.w7jnreqwyldrnw@laptop-air.hsd1.ca.comcast.net>
	<CANEZrP3D4WhXTdMAT7B=DaXEOSdXESc+bU0n7enu7hSaGtns8A@mail.gmail.com>
	<e4515a76-b4c1-4a5f-a884-6d692b8d3466@email.android.com>
Message-ID: <CANEZrP287DH6JSMjAdu53_omrA96f5aQMZKObT1=VV5vqk=JBA@mail.gmail.com>

Please don't try and drag this thread off topic. What I said is factually
correct. If you want to (again) try and convince people things should work
differently, start another thread for that.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131204/f70c5e4a/attachment.html>

From pete at petertodd.org  Wed Dec  4 13:06:43 2013
From: pete at petertodd.org (Peter Todd)
Date: Wed, 4 Dec 2013 08:06:43 -0500
Subject: [Bitcoin-development] Floating fees and SPV clients
In-Reply-To: <CANEZrP287DH6JSMjAdu53_omrA96f5aQMZKObT1=VV5vqk=JBA@mail.gmail.com>
References: <CANEZrP1C=Hc-3f-rqQ+wYrPn-eUj52HjN+qRQdJMWvnP+dkK=Q@mail.gmail.com>
	<CAJHLa0P_uzEQ2OG2FTXyD2Zw4RzujNBxKbKD04CSS1sLNpLUUQ@mail.gmail.com>
	<CANEZrP2hf2853w9f4__Ji9v3eRRU0u6pEzPxAmFN+iH067gtnA@mail.gmail.com>
	<CABsx9T3NQDPL6=pz5BD5DsP0qh0x3LJOCj2H3yY5tzL2_DivGA@mail.gmail.com>
	<CANEZrP1PLKemiUEgMJRGdiZXt7o=0_5fhLKYY0x3Ngb_iEm+2w@mail.gmail.com>
	<CABsx9T322nCvynRCL6Mb9C0f5EuJSfMDTSGiU+_JsYoSCb=_kQ@mail.gmail.com>
	<op.w7jnreqwyldrnw@laptop-air.hsd1.ca.comcast.net>
	<CANEZrP3D4WhXTdMAT7B=DaXEOSdXESc+bU0n7enu7hSaGtns8A@mail.gmail.com>
	<e4515a76-b4c1-4a5f-a884-6d692b8d3466@email.android.com>
	<CANEZrP287DH6JSMjAdu53_omrA96f5aQMZKObT1=VV5vqk=JBA@mail.gmail.com>
Message-ID: <20131204130643.GA5313@tilt>

On Wed, Dec 04, 2013 at 12:09:42PM +0100, Mike Hearn wrote:
> Please don't try and drag this thread off topic. What I said is factually
> correct. If you want to (again) try and convince people things should work
> differently, start another thread for that.

replace-by-fee is no less speculative than your original proposals;
you're also trying to convince people that things should work
differently re: fees

-- 
'peter'[:-1]@petertodd.org
000000000000000f9102d27cfd61ea9e8bb324593593ca3ce6ba53153ff251b3
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 490 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131204/2af86d51/attachment.sig>

From mike at plan99.net  Wed Dec  4 13:48:08 2013
From: mike at plan99.net (Mike Hearn)
Date: Wed, 4 Dec 2013 14:48:08 +0100
Subject: [Bitcoin-development] Floating fees and SPV clients
In-Reply-To: <20131204130643.GA5313@tilt>
References: <CANEZrP1C=Hc-3f-rqQ+wYrPn-eUj52HjN+qRQdJMWvnP+dkK=Q@mail.gmail.com>
	<CAJHLa0P_uzEQ2OG2FTXyD2Zw4RzujNBxKbKD04CSS1sLNpLUUQ@mail.gmail.com>
	<CANEZrP2hf2853w9f4__Ji9v3eRRU0u6pEzPxAmFN+iH067gtnA@mail.gmail.com>
	<CABsx9T3NQDPL6=pz5BD5DsP0qh0x3LJOCj2H3yY5tzL2_DivGA@mail.gmail.com>
	<CANEZrP1PLKemiUEgMJRGdiZXt7o=0_5fhLKYY0x3Ngb_iEm+2w@mail.gmail.com>
	<CABsx9T322nCvynRCL6Mb9C0f5EuJSfMDTSGiU+_JsYoSCb=_kQ@mail.gmail.com>
	<op.w7jnreqwyldrnw@laptop-air.hsd1.ca.comcast.net>
	<CANEZrP3D4WhXTdMAT7B=DaXEOSdXESc+bU0n7enu7hSaGtns8A@mail.gmail.com>
	<e4515a76-b4c1-4a5f-a884-6d692b8d3466@email.android.com>
	<CANEZrP287DH6JSMjAdu53_omrA96f5aQMZKObT1=VV5vqk=JBA@mail.gmail.com>
	<20131204130643.GA5313@tilt>
Message-ID: <CANEZrP2D_9AZXT2b5cgyiO3T9Udhk33tbNxBYSa16W7xL7_woA@mail.gmail.com>

On Wed, Dec 4, 2013 at 2:06 PM, Peter Todd <pete at petertodd.org> wrote:

> replace-by-fee is no less speculative than your original proposals;
> you're also trying to convince people that things should work
> differently re: fees


The original proposal I started this thread with hasn't even received
comments - presumably it's uncontroversial. The other discussions are about
how to handle fees in requests that use the payment protocol, which isn't
currently used anywhere so doing things differently isn't possible.

On the other hand you have been talking about a fundamental change to the
behaviour of how all Bitcoin nodes operate, which is off topic for this
thread.

If you have something specific to say about how floating fees should be
managed by SPV wallets or how fees should be negotiated when the payment
protocol is in use, this thread is appropriate. Otherwise please take it
elsewhere.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131204/c10ebe19/attachment.html>

From pete at petertodd.org  Wed Dec  4 21:51:58 2013
From: pete at petertodd.org (Peter Todd)
Date: Wed, 4 Dec 2013 16:51:58 -0500
Subject: [Bitcoin-development] Floating fees and SPV clients
In-Reply-To: <CANEZrP2D_9AZXT2b5cgyiO3T9Udhk33tbNxBYSa16W7xL7_woA@mail.gmail.com>
References: <CANEZrP2hf2853w9f4__Ji9v3eRRU0u6pEzPxAmFN+iH067gtnA@mail.gmail.com>
	<CABsx9T3NQDPL6=pz5BD5DsP0qh0x3LJOCj2H3yY5tzL2_DivGA@mail.gmail.com>
	<CANEZrP1PLKemiUEgMJRGdiZXt7o=0_5fhLKYY0x3Ngb_iEm+2w@mail.gmail.com>
	<CABsx9T322nCvynRCL6Mb9C0f5EuJSfMDTSGiU+_JsYoSCb=_kQ@mail.gmail.com>
	<op.w7jnreqwyldrnw@laptop-air.hsd1.ca.comcast.net>
	<CANEZrP3D4WhXTdMAT7B=DaXEOSdXESc+bU0n7enu7hSaGtns8A@mail.gmail.com>
	<e4515a76-b4c1-4a5f-a884-6d692b8d3466@email.android.com>
	<CANEZrP287DH6JSMjAdu53_omrA96f5aQMZKObT1=VV5vqk=JBA@mail.gmail.com>
	<20131204130643.GA5313@tilt>
	<CANEZrP2D_9AZXT2b5cgyiO3T9Udhk33tbNxBYSa16W7xL7_woA@mail.gmail.com>
Message-ID: <20131204215158.GA5924@tilt>

On Wed, Dec 04, 2013 at 02:48:08PM +0100, Mike Hearn wrote:
> On Wed, Dec 4, 2013 at 2:06 PM, Peter Todd <pete at petertodd.org> wrote:
> 
> > replace-by-fee is no less speculative than your original proposals;
> > you're also trying to convince people that things should work
> > differently re: fees
> 
> 
> The original proposal I started this thread with hasn't even received
> comments - presumably it's uncontroversial. The other discussions are about
> how to handle fees in requests that use the payment protocol, which isn't
> currently used anywhere so doing things differently isn't possible.
> 
> On the other hand you have been talking about a fundamental change to the
> behaviour of how all Bitcoin nodes operate, which is off topic for this
> thread.
> 
> If you have something specific to say about how floating fees should be
> managed by SPV wallets or how fees should be negotiated when the payment
> protocol is in use, this thread is appropriate. Otherwise please take it
> elsewhere.

Other than you, replacement for fee changing isn't controversial; I know
this because no-one other than you comments on it... just like the
fundemental changes involving your proposed hardfork presumably. (which
I did comment on)


Besides, "Happily, there does not have to be One Correct Answer here.
Let wallets compete, and may the best user experience win..."

-- 
'peter'[:-1]@petertodd.org
000000000000000f9102d27cfd61ea9e8bb324593593ca3ce6ba53153ff251b3
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 490 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131204/3d192f45/attachment.sig>

From laanwj at gmail.com  Thu Dec  5 13:37:10 2013
From: laanwj at gmail.com (Wladimir)
Date: Thu, 5 Dec 2013 14:37:10 +0100
Subject: [Bitcoin-development] Move authorative source for BIPs to git
	repository
Message-ID: <CA+s+GJCuWNj7LuLJy4rSkN_t0qgO3UsBS2hEBTgm6DiiQyqbVQ@mail.gmail.com>

Hello all,

A while ago after discussion on the mailing list a repository was set up to
store the BIP documents, as this is deemed a more secure solution than
having them on the wiki:

https://github.com/bitcoin/bips

To prevent confusion the next step should probably be to replace the BIPs
on the wiki with links to the github documents, with a notice that changes
should be proposed on github or mailed to the BIP editor (gmaxwell).

Agreed?

Regards,
Wladimir
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131205/567ebc52/attachment.html>

From luke at dashjr.org  Thu Dec  5 14:27:43 2013
From: luke at dashjr.org (Luke-Jr)
Date: Thu, 5 Dec 2013 14:27:43 +0000
Subject: [Bitcoin-development] Move authorative source for BIPs to git
	repository
In-Reply-To: <CA+s+GJCuWNj7LuLJy4rSkN_t0qgO3UsBS2hEBTgm6DiiQyqbVQ@mail.gmail.com>
References: <CA+s+GJCuWNj7LuLJy4rSkN_t0qgO3UsBS2hEBTgm6DiiQyqbVQ@mail.gmail.com>
Message-ID: <201312051427.44179.luke@dashjr.org>

On Thursday, December 05, 2013 1:37:10 PM Wladimir wrote:
> Hello all,
> 
> A while ago after discussion on the mailing list a repository was set up to
> store the BIP documents, as this is deemed a more secure solution than
> having them on the wiki:
> 
> https://github.com/bitcoin/bips
> 
> To prevent confusion the next step should probably be to replace the BIPs
> on the wiki with links to the github documents, with a notice that changes
> should be proposed on github or mailed to the BIP editor (gmaxwell).
> 
> Agreed?

I think this would stifle active BIP draft editing. We're already having a 
hard time getting some developers to write BIPs for their proposals - I don't 
think we should be putting up bigger hurdles.

Luke



From laanwj at gmail.com  Thu Dec  5 14:38:45 2013
From: laanwj at gmail.com (Wladimir)
Date: Thu, 5 Dec 2013 15:38:45 +0100
Subject: [Bitcoin-development] Move authorative source for BIPs to git
	repository
In-Reply-To: <201312051427.44179.luke@dashjr.org>
References: <CA+s+GJCuWNj7LuLJy4rSkN_t0qgO3UsBS2hEBTgm6DiiQyqbVQ@mail.gmail.com>
	<201312051427.44179.luke@dashjr.org>
Message-ID: <CA+s+GJC5LB_9n9ktCby=st-2-y-6x2jQ27D9UOo6WzWrD2CQZQ@mail.gmail.com>

On Thu, Dec 5, 2013 at 3:27 PM, Luke-Jr <luke at dashjr.org> wrote:

> On Thursday, December 05, 2013 1:37:10 PM Wladimir wrote:
>


> I think this would stifle active BIP draft editing. We're already having a
> hard time getting some developers to write BIPs for their proposals - I
> don't
> think we should be putting up bigger hurdles.
>

How is github a hurdle?

It's easy enough to create a fork and submit back the changes as a pull
request.

In the case of text documents, this can be completely done through the web
interface.

If anything creating a github account is a smaller hurdle than having to
pay to create a wiki account and wait for it to be activated.

Aside: my proposal is for the BIPs that are already accepted, and should
not be edited without dicussion. If people want to put their drafts in the
wiki that's a different story.

Regards,
Wladimir
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131205/6abd02c8/attachment.html>

From jgarzik at bitpay.com  Thu Dec  5 14:43:08 2013
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Thu, 5 Dec 2013 09:43:08 -0500
Subject: [Bitcoin-development] Move authorative source for BIPs to git
	repository
In-Reply-To: <201312051427.44179.luke@dashjr.org>
References: <CA+s+GJCuWNj7LuLJy4rSkN_t0qgO3UsBS2hEBTgm6DiiQyqbVQ@mail.gmail.com>
	<201312051427.44179.luke@dashjr.org>
Message-ID: <CAJHLa0OhQn=+BpbvejqRZBv=x3Vd5BYSDERERMEYDrrQ0gRXkQ@mail.gmail.com>

This entire discussion is recycled.  Please review the previous
discussion, before asking the same questions over again.

Properly done, there are FEWER hurdles.  In the previous discussion,
there was outlined a process whereby the BIPS Editor would receive an
email, and could take it from there.  No wiki login or bitcoin payment
required.  More advanced users may submit pull requests.

Compared with a hash-sealed git repo as primary source, the wiki is
second class.


On Thu, Dec 5, 2013 at 9:27 AM, Luke-Jr <luke at dashjr.org> wrote:
> On Thursday, December 05, 2013 1:37:10 PM Wladimir wrote:
>> Hello all,
>>
>> A while ago after discussion on the mailing list a repository was set up to
>> store the BIP documents, as this is deemed a more secure solution than
>> having them on the wiki:
>>
>> https://github.com/bitcoin/bips
>>
>> To prevent confusion the next step should probably be to replace the BIPs
>> on the wiki with links to the github documents, with a notice that changes
>> should be proposed on github or mailed to the BIP editor (gmaxwell).
>>
>> Agreed?
>
> I think this would stifle active BIP draft editing. We're already having a
> hard time getting some developers to write BIPs for their proposals - I don't
> think we should be putting up bigger hurdles.
>
> Luke
>
> ------------------------------------------------------------------------------
> Sponsored by Intel(R) XDK
> Develop, test and display web and hybrid apps with a single code base.
> Download it for free now!
> http://pubads.g.doubleclick.net/gampad/clk?id=111408631&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development



-- 
Jeff Garzik
Bitcoin core developer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From g.rowe at froot.co.uk  Thu Dec  5 20:49:56 2013
From: g.rowe at froot.co.uk (Gary Rowe)
Date: Thu, 5 Dec 2013 20:49:56 +0000
Subject: [Bitcoin-development] Move authorative source for BIPs to git
	repository
In-Reply-To: <CAJHLa0OhQn=+BpbvejqRZBv=x3Vd5BYSDERERMEYDrrQ0gRXkQ@mail.gmail.com>
References: <CA+s+GJCuWNj7LuLJy4rSkN_t0qgO3UsBS2hEBTgm6DiiQyqbVQ@mail.gmail.com>
	<201312051427.44179.luke@dashjr.org>
	<CAJHLa0OhQn=+BpbvejqRZBv=x3Vd5BYSDERERMEYDrrQ0gRXkQ@mail.gmail.com>
Message-ID: <CAKm8k+2=kSeDALJJLF9hPfuyDyHN+G9Dx6cQRPGgcKRVOW-4aA@mail.gmail.com>

Personally, I would be more inclined to submit and work on a BIP if it was
in GitHub. It's a regular home from home for me now.


On 5 December 2013 14:43, Jeff Garzik <jgarzik at bitpay.com> wrote:

> This entire discussion is recycled.  Please review the previous
> discussion, before asking the same questions over again.
>
> Properly done, there are FEWER hurdles.  In the previous discussion,
> there was outlined a process whereby the BIPS Editor would receive an
> email, and could take it from there.  No wiki login or bitcoin payment
> required.  More advanced users may submit pull requests.
>
> Compared with a hash-sealed git repo as primary source, the wiki is
> second class.
>
>
> On Thu, Dec 5, 2013 at 9:27 AM, Luke-Jr <luke at dashjr.org> wrote:
> > On Thursday, December 05, 2013 1:37:10 PM Wladimir wrote:
> >> Hello all,
> >>
> >> A while ago after discussion on the mailing list a repository was set
> up to
> >> store the BIP documents, as this is deemed a more secure solution than
> >> having them on the wiki:
> >>
> >> https://github.com/bitcoin/bips
> >>
> >> To prevent confusion the next step should probably be to replace the
> BIPs
> >> on the wiki with links to the github documents, with a notice that
> changes
> >> should be proposed on github or mailed to the BIP editor (gmaxwell).
> >>
> >> Agreed?
> >
> > I think this would stifle active BIP draft editing. We're already having
> a
> > hard time getting some developers to write BIPs for their proposals - I
> don't
> > think we should be putting up bigger hurdles.
> >
> > Luke
> >
> >
> ------------------------------------------------------------------------------
> > Sponsored by Intel(R) XDK
> > Develop, test and display web and hybrid apps with a single code base.
> > Download it for free now!
> >
> http://pubads.g.doubleclick.net/gampad/clk?id=111408631&iu=/4140/ostg.clktrk
> > _______________________________________________
> > Bitcoin-development mailing list
> > Bitcoin-development at lists.sourceforge.net
> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
>
> --
> Jeff Garzik
> Bitcoin core developer and open source evangelist
> BitPay, Inc.      https://bitpay.com/
>
>
> ------------------------------------------------------------------------------
> Sponsored by Intel(R) XDK
> Develop, test and display web and hybrid apps with a single code base.
> Download it for free now!
>
> http://pubads.g.doubleclick.net/gampad/clk?id=111408631&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131205/a4e50d00/attachment.html>

From gavinandresen at gmail.com  Thu Dec  5 23:16:47 2013
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Fri, 6 Dec 2013 09:16:47 +1000
Subject: [Bitcoin-development] Move authorative source for BIPs to git
	repository
In-Reply-To: <CA+s+GJCuWNj7LuLJy4rSkN_t0qgO3UsBS2hEBTgm6DiiQyqbVQ@mail.gmail.com>
References: <CA+s+GJCuWNj7LuLJy4rSkN_t0qgO3UsBS2hEBTgm6DiiQyqbVQ@mail.gmail.com>
Message-ID: <CABsx9T2v5OBwh55s=5HmzU0HLyvg8e=FGUFit0Zp6V6nUfLB2A@mail.gmail.com>

RE: replace BIPs on the wiki with links to github documents: agreed.

Wladimir or Gregory: can one of you update BIP 0001 to describe the Proper
Process for creating/editing a BIP? It doesn't mention the github repo at
all right now.

-- 
--
Gavin Andresen
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131206/705c3d43/attachment.html>

From andreas at petersson.at  Fri Dec  6 02:44:00 2013
From: andreas at petersson.at (Andreas Petersson)
Date: Fri, 06 Dec 2013 03:44:00 +0100
Subject: [Bitcoin-development] Temporary fee fix
Message-ID: <52A139F0.2080401@petersson.at>

I know we should all be brainstorming and working on a new fee market.
But fact is, it will still take some time and in the meantime users will
continue to shout insults at us for the high "fixed" fee of 0,1 mBtc.
Even banks sometimes have less fees. (1 of 5 Play Store reviews of
Mycelium seem to mention high fees recently)

My suggestion: until the market is established let's lower the minimum
relay fee per kb to something less. 0,01 mBtc comes to mind. (of course
pulling this number out of thin air)



From gavinandresen at gmail.com  Fri Dec  6 06:52:02 2013
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Fri, 6 Dec 2013 16:52:02 +1000
Subject: [Bitcoin-development] 0.8.6 release candidate 1
Message-ID: <CABsx9T3tMkYf=LCWdeoptxwL3LSrSTDCtQ8zNUdkNaJ4F9kY7w@mail.gmail.com>

0.8.6 release candidate 1 is available from:
  https://sourceforge.net/projects/bitcoin/files/Bitcoin/bitcoin-0.8.6/test/

Please help sanity-test, especially if you are running OSX or Windows.

-- 
--
Gavin Andresen
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131206/fc9c0478/attachment.html>

From laanwj at gmail.com  Fri Dec  6 08:37:55 2013
From: laanwj at gmail.com (Wladimir)
Date: Fri, 6 Dec 2013 09:37:55 +0100
Subject: [Bitcoin-development] Temporary fee fix
In-Reply-To: <52A139F0.2080401@petersson.at>
References: <52A139F0.2080401@petersson.at>
Message-ID: <CA+s+GJAUDE_rqrj2tHK75j58mCvwnD5oTnCTYFRovzxfSxoQiQ@mail.gmail.com>

On Fri, Dec 6, 2013 at 3:44 AM, Andreas Petersson <andreas at petersson.at>wrote:

> I know we should all be brainstorming and working on a new fee market.
> But fact is, it will still take some time and in the meantime users will
> continue to shout insults at us for the high "fixed" fee of 0,1 mBtc.
> Even banks sometimes have less fees. (1 of 5 Play Store reviews of
> Mycelium seem to mention high fees recently)
>
> My suggestion: until the market is established let's lower the minimum
> relay fee per kb to something less. 0,01 mBtc comes to mind. (of course
> pulling this number out of thin air)
>

This was considered (see https://github.com/bitcoin/bitcoin/pull/3305) but
deemed to risky for 0.8.6 at the last moment, see the linked pull request
for details.

It will go into 0.9, at least if the full floating fee implementation isn't
yet ready and deemed safe by then.

Wladimir
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131206/17fe0237/attachment.html>

From melvincarvalho at gmail.com  Fri Dec  6 10:44:32 2013
From: melvincarvalho at gmail.com (Melvin Carvalho)
Date: Fri, 6 Dec 2013 11:44:32 +0100
Subject: [Bitcoin-development] Message Signing based authentication
In-Reply-To: <CAJna-HhuQZHb49-UGjpg3-T+wK7PPRa34=0xk4=Dw=6FeFBEpg@mail.gmail.com>
References: <20131102050144.5850@gmx.com>
	<CAJna-HgUT2u+nhdz3e8mT99R+TR6o1FFQ4c8KBz_vpc_oSOzSQ@mail.gmail.com>
	<CAKaEYh+bAVcK0tUrE75HvSf0PJ5Ps1j_yUheBeOM5Q1EHADdCw@mail.gmail.com>
	<CAJna-HhuQZHb49-UGjpg3-T+wK7PPRa34=0xk4=Dw=6FeFBEpg@mail.gmail.com>
Message-ID: <CAKaEYh+jKZ+MZ3p4Gf7pmmEnnkaXhBqSonD_-v=4mA1ppxNUHQ@mail.gmail.com>

On 6 November 2013 07:41, slush <slush at centrum.cz> wrote:

> > But where are the private keys stored? Crypto in the browser with help,
> but although they will expose ECC via the NSS, I dont think bitcoin's
> particular curve will be supported, because it's not NIST approved. If the
> use case was presented though, they may add it.
>
> Trezor, my friend.
>

Looking forward to the trezor release, best of luck.

This may be an interesting read too:

https://www.grc.com/sqrl/sqrl.htm


> Slush
>
> Sent from mobile phone.
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131206/dab65908/attachment.html>

From laanwj at gmail.com  Fri Dec  6 13:41:16 2013
From: laanwj at gmail.com (Wladimir)
Date: Fri, 6 Dec 2013 14:41:16 +0100
Subject: [Bitcoin-development] Move authorative source for BIPs to git
	repository
In-Reply-To: <CABsx9T2v5OBwh55s=5HmzU0HLyvg8e=FGUFit0Zp6V6nUfLB2A@mail.gmail.com>
References: <CA+s+GJCuWNj7LuLJy4rSkN_t0qgO3UsBS2hEBTgm6DiiQyqbVQ@mail.gmail.com>
	<CABsx9T2v5OBwh55s=5HmzU0HLyvg8e=FGUFit0Zp6V6nUfLB2A@mail.gmail.com>
Message-ID: <CA+s+GJC2UwcRugtGonZVdbKDV3z_91LgWpbzVnWeMsjbHzPryQ@mail.gmail.com>

Yes, i'm updating BIP 0001 right now, will send a pull when ready.



On Fri, Dec 6, 2013 at 12:16 AM, Gavin Andresen <gavinandresen at gmail.com>wrote:

> RE: replace BIPs on the wiki with links to github documents: agreed.
>
> Wladimir or Gregory: can one of you update BIP 0001 to describe the Proper
> Process for creating/editing a BIP? It doesn't mention the github repo at
> all right now.
>
> --
> --
> Gavin Andresen
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131206/bab9cb89/attachment.html>

From eduffield82 at gmail.com  Fri Dec  6 13:55:45 2013
From: eduffield82 at gmail.com (Evan Duffield)
Date: Fri, 6 Dec 2013 06:55:45 -0700
Subject: [Bitcoin-development] New paper: Accelerating Bitcoin's Trasaction
	Processing
Message-ID: <CAMkFLsTEKFsmPE42A+K34zkQMp4Da3DuYEUDSn9rBN8D0ChYgQ@mail.gmail.com>

I'm posting this here for visibility. Some researchers in Israel have
proposed a way to increase the transaction limit to 200 transactions per
second by implementing a new blockchain selection algorithm called GHOST.

https://bitcointalk.org/index.php?topic=359582.msg3274963;boardseen#new
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131206/8b4bc4c4/attachment.html>

From saivann at gmail.com  Sun Dec  8 01:17:25 2013
From: saivann at gmail.com (=?ISO-8859-1?Q?Sa=EFvann_Carignan?=)
Date: Sat, 07 Dec 2013 20:17:25 -0500
Subject: [Bitcoin-development] Dedicated server for bitcoin.org,
	your thoughts?
Message-ID: <52A3C8A5.7010606@gmail.com>

I would like to know what are your thoughts on moving bitcoin.org on a
dedicated server with a SSL certificate?

I am considering the idea more seriously, but I'd like some feedback
before taking steps.

Sa?vann



From odinn.cyberguerrilla at riseup.net  Sun Dec  8 03:38:00 2013
From: odinn.cyberguerrilla at riseup.net (Odinn Cyberguerrilla)
Date: Sat, 7 Dec 2013 19:38:00 -0800
Subject: [Bitcoin-development] Dedicated server for bitcoin.org,
 your thoughts?
In-Reply-To: <52A3C8A5.7010606@gmail.com>
References: <52A3C8A5.7010606@gmail.com>
Message-ID: <1795f3067ba3fcdd0caf978cc59ff024.squirrel@fruiteater.riseup.net>

Hello, re. the dedicated server for bitcoin.org idea, I have a few thoughts

1) I have commented in a blogpost of August 2013 at
https://odinn.cyberguerrilla.org/ with some thoughts relative to possible
issues with CA related to bitcoin.org - where I mentioned something
relative to the DigiCert certificate,
"DigiCert ?may revoke a Certificate, without notice, for the reasons
stated in the CPS, including if DigiCert reasonably believes that? (?)
?Applicant is added to a government list of prohibited persons or entities
or is operating from a prohibited destination under the laws of the United
States? (?) ?the Private Key associated with a Certificate was disclosed
or Compromised?"
In the same post I mentioned
"Bitcoin.org has no certificate, no encryption ? a situation which has its
own obvious problems. Bitcoin.org currently sends users to download the
bitcoin-qt client from sourceforge. Sourceforge is encrypted and has a
certificate based on GeoTrust:
https://www.geotrust.com/resources/repository/legal/"

(Currently (Dec. 7, 2013) bitcoin.org shows as 'not verified' and 'not
encrypted' examining it in a cursory fashion w/ Chrome)

Not sure how this would work, but it would be nice to see the content at
bitcoin.org encrypted, of course, but also further decentralized? how many
mirrors are there of bitcoin.org - not sure, but a few things that come to
mind when thinking of this are Tahoe-LAFS and also .bit stuff (namecoin). 
There are many ways to decentralize something but that is just something
that comes to mind.

This has been discussed at https://bitcointalk.org/index.php?topic=16312.0
('Is Bitcoin.org a weakness of bitcoin?) in the past and see also this
https://bitcointalk.org/index.php?topic=119652.0 which discusses mirroring
of certain content

Some things to think about.

> I would like to know what are your thoughts on moving bitcoin.org on a
> dedicated server with a SSL certificate?
>
> I am considering the idea more seriously, but I'd like some feedback
> before taking steps.
>
> Sa?vann
>
> ------------------------------------------------------------------------------
> Sponsored by Intel(R) XDK
> Develop, test and display web and hybrid apps with a single code base.
> Download it for free now!
> http://pubads.g.doubleclick.net/gampad/clk?id=111408631&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>





From saivann at gmail.com  Sun Dec  8 09:03:38 2013
From: saivann at gmail.com (=?UTF-8?B?U2HDr3Zhbm4gQ2FyaWduYW4=?=)
Date: Sun, 08 Dec 2013 04:03:38 -0500
Subject: [Bitcoin-development] Dedicated server for bitcoin.org,
 your thoughts?
In-Reply-To: <1795f3067ba3fcdd0caf978cc59ff024.squirrel@fruiteater.riseup.net>
References: <52A3C8A5.7010606@gmail.com>
	<1795f3067ba3fcdd0caf978cc59ff024.squirrel@fruiteater.riseup.net>
Message-ID: <52A435EA.7090405@gmail.com>

Forward secrecy:
I was definitively already interested in using this.

Binaries:
Sourceforge is not encrypted, actually. Although binaries hosting /
sharing could be a separate subject discussed later I think.

Revocation:
I guess we could just buy another SSL cert from another CA (I mean, if
that really happens). There's a few ones that are not US based.

Decentralization:
So long as we actually use DNS, the website is centralized :( However,
its content isn't (can be forked on GitHub), but regarding the domain
name, there is not much we can do against this AFAIK.

Sa?vann



Le 2013-12-07 22:38, Odinn Cyberguerrilla a ?crit :
> Hello, re. the dedicated server for bitcoin.org idea, I have a few thoughts
> 
> 1) I have commented in a blogpost of August 2013 at
> https://odinn.cyberguerrilla.org/ with some thoughts relative to possible
> issues with CA related to bitcoin.org - where I mentioned something
> relative to the DigiCert certificate,
> "DigiCert ?may revoke a Certificate, without notice, for the reasons
> stated in the CPS, including if DigiCert reasonably believes that? (?)
> ?Applicant is added to a government list of prohibited persons or entities
> or is operating from a prohibited destination under the laws of the United
> States? (?) ?the Private Key associated with a Certificate was disclosed
> or Compromised?"
> In the same post I mentioned
> "Bitcoin.org has no certificate, no encryption ? a situation which has its
> own obvious problems. Bitcoin.org currently sends users to download the
> bitcoin-qt client from sourceforge. Sourceforge is encrypted and has a
> certificate based on GeoTrust:
> https://www.geotrust.com/resources/repository/legal/"
> 
> (Currently (Dec. 7, 2013) bitcoin.org shows as 'not verified' and 'not
> encrypted' examining it in a cursory fashion w/ Chrome)
> 
> Not sure how this would work, but it would be nice to see the content at
> bitcoin.org encrypted, of course, but also further decentralized? how many
> mirrors are there of bitcoin.org - not sure, but a few things that come to
> mind when thinking of this are Tahoe-LAFS and also .bit stuff (namecoin). 
> There are many ways to decentralize something but that is just something
> that comes to mind.
> 
> This has been discussed at https://bitcointalk.org/index.php?topic=16312.0
> ('Is Bitcoin.org a weakness of bitcoin?) in the past and see also this
> https://bitcointalk.org/index.php?topic=119652.0 which discusses mirroring
> of certain content
> 
> Some things to think about.
> 
>> I would like to know what are your thoughts on moving bitcoin.org on a
>> dedicated server with a SSL certificate?
>>
>> I am considering the idea more seriously, but I'd like some feedback
>> before taking steps.
>>
>> Sa?vann
>>
>> ------------------------------------------------------------------------------
>> Sponsored by Intel(R) XDK
>> Develop, test and display web and hybrid apps with a single code base.
>> Download it for free now!
>> http://pubads.g.doubleclick.net/gampad/clk?id=111408631&iu=/4140/ostg.clktrk
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>
> 
> 
> 
> ------------------------------------------------------------------------------
> Sponsored by Intel(R) XDK 
> Develop, test and display web and hybrid apps with a single code base.
> Download it for free now!
> http://pubads.g.doubleclick.net/gampad/clk?id=111408631&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 



From drak at zikula.org  Sun Dec  8 10:00:35 2013
From: drak at zikula.org (Drak)
Date: Sun, 8 Dec 2013 10:00:35 +0000
Subject: [Bitcoin-development] Dedicated server for bitcoin.org,
	your thoughts?
In-Reply-To: <1795f3067ba3fcdd0caf978cc59ff024.squirrel@fruiteater.riseup.net>
References: <52A3C8A5.7010606@gmail.com>
	<1795f3067ba3fcdd0caf978cc59ff024.squirrel@fruiteater.riseup.net>
Message-ID: <CANAnSg1DiPLqAGW=2Q0zoLjupn8wvYuhhH8HgvBM0d=5uKJNXA@mail.gmail.com>

There is really no excuse for not using an SSL certificate. Without one it
would be trivial for an attacker to change the contents of the page via
MITM.
Recent studies have shown MASSIVE abuse of the BGP routing protocol being
used to redirect websites through a third party.
This is not a theoretical attack, it's happening every single day on a
global scale and could be used to divert users to a rogue versions of
software.
It's just a matter of time... it will happen sooner or later given the
incentives it could bring...

Recent references:
http://www.theregister.co.uk/2013/11/22/net_traffic_redirection_attacks/
http://www.wired.com/threatlevel/2013/12/bgp-hijacking-belarus-iceland/

The only way to mitigate these MITMs is to use SSL.

Also it's about time we hosted the Bitcoin Qt software at Github. They have
a releases feature where you can upload a packaged release (see
https://github.com/blog/1547-release-your-software). There are also no
adverts (another privacy leak at the least) and many feel are more
trustworthy than Sourceforge: it also makes sense to have the downloads
where the source is developed.

Regards,

Drak



On 8 December 2013 03:38, Odinn Cyberguerrilla <
odinn.cyberguerrilla at riseup.net> wrote:

> Hello, re. the dedicated server for bitcoin.org idea, I have a few
> thoughts
>
> 1) I have commented in a blogpost of August 2013 at
> https://odinn.cyberguerrilla.org/ with some thoughts relative to possible
> issues with CA related to bitcoin.org - where I mentioned something
> relative to the DigiCert certificate,
> "DigiCert ?may revoke a Certificate, without notice, for the reasons
> stated in the CPS, including if DigiCert reasonably believes that? (?)
> ?Applicant is added to a government list of prohibited persons or entities
> or is operating from a prohibited destination under the laws of the United
> States? (?) ?the Private Key associated with a Certificate was disclosed
> or Compromised?"
> In the same post I mentioned
> "Bitcoin.org has no certificate, no encryption ? a situation which has its
> own obvious problems. Bitcoin.org currently sends users to download the
> bitcoin-qt client from sourceforge. Sourceforge is encrypted and has a
> certificate based on GeoTrust:
> https://www.geotrust.com/resources/repository/legal/"
>
> (Currently (Dec. 7, 2013) bitcoin.org shows as 'not verified' and 'not
> encrypted' examining it in a cursory fashion w/ Chrome)
>
> Not sure how this would work, but it would be nice to see the content at
> bitcoin.org encrypted, of course, but also further decentralized? how many
> mirrors are there of bitcoin.org - not sure, but a few things that come to
> mind when thinking of this are Tahoe-LAFS and also .bit stuff (namecoin).
> There are many ways to decentralize something but that is just something
> that comes to mind.
>
> This has been discussed at https://bitcointalk.org/index.php?topic=16312.0
> ('Is Bitcoin.org a weakness of bitcoin?) in the past and see also this
> https://bitcointalk.org/index.php?topic=119652.0 which discusses mirroring
> of certain content
>
> Some things to think about.
>
> > I would like to know what are your thoughts on moving bitcoin.org on a
> > dedicated server with a SSL certificate?
> >
> > I am considering the idea more seriously, but I'd like some feedback
> > before taking steps.
> >
> > Sa?vann
> >
> >
> ------------------------------------------------------------------------------
> > Sponsored by Intel(R) XDK
> > Develop, test and display web and hybrid apps with a single code base.
> > Download it for free now!
> >
> http://pubads.g.doubleclick.net/gampad/clk?id=111408631&iu=/4140/ostg.clktrk
> > _______________________________________________
> > Bitcoin-development mailing list
> > Bitcoin-development at lists.sourceforge.net
> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> >
>
>
>
>
> ------------------------------------------------------------------------------
> Sponsored by Intel(R) XDK
> Develop, test and display web and hybrid apps with a single code base.
> Download it for free now!
>
> http://pubads.g.doubleclick.net/gampad/clk?id=111408631&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131208/5957ba7d/attachment.html>

From luke at dashjr.org  Sun Dec  8 12:37:22 2013
From: luke at dashjr.org (Luke-Jr)
Date: Sun, 8 Dec 2013 12:37:22 +0000
Subject: [Bitcoin-development] Dedicated server for bitcoin.org,
	your thoughts?
In-Reply-To: <52A435EA.7090405@gmail.com>
References: <52A3C8A5.7010606@gmail.com>
	<1795f3067ba3fcdd0caf978cc59ff024.squirrel@fruiteater.riseup.net>
	<52A435EA.7090405@gmail.com>
Message-ID: <201312081237.24473.luke@dashjr.org>

On Sunday, December 08, 2013 9:03:38 AM Sa?vann Carignan wrote:
> Binaries:
> Sourceforge is not encrypted, actually. Although binaries hosting /
> sharing could be a separate subject discussed later I think.

Encryption is useless here. We want everyone to be able to download Bitcoin 
clients. Binaries on sourceforge are signed by multiple parties using gitian.

> Decentralization:
> So long as we actually use DNS, the website is centralized :( However,
> its content isn't (can be forked on GitHub), but regarding the domain
> name, there is not much we can do against this AFAIK.

So long as someone has root (or a user that can modify it), the website is 
centralised. To really solve this, we would need a dedicated server that 
accepts commands only when signed by N-of-M parties, inside a cage locked by 
padlocks with keys held by independent parties, with a SSL certificate issued 
by an authority that has multiple parties watch it every step of the way into 
that server.

Luke



From luke at dashjr.org  Sun Dec  8 12:39:02 2013
From: luke at dashjr.org (Luke-Jr)
Date: Sun, 8 Dec 2013 12:39:02 +0000
Subject: [Bitcoin-development] Dedicated server for bitcoin.org,
	your thoughts?
In-Reply-To: <CANAnSg1DiPLqAGW=2Q0zoLjupn8wvYuhhH8HgvBM0d=5uKJNXA@mail.gmail.com>
References: <52A3C8A5.7010606@gmail.com>
	<1795f3067ba3fcdd0caf978cc59ff024.squirrel@fruiteater.riseup.net>
	<CANAnSg1DiPLqAGW=2Q0zoLjupn8wvYuhhH8HgvBM0d=5uKJNXA@mail.gmail.com>
Message-ID: <201312081239.03166.luke@dashjr.org>

On Sunday, December 08, 2013 10:00:35 AM Drak wrote:
> Also it's about time we hosted the Bitcoin Qt software at Github. They have
> a releases feature where you can upload a packaged release (see
> https://github.com/blog/1547-release-your-software). There are also no
> adverts (another privacy leak at the least) and many feel are more
> trustworthy than Sourceforge: it also makes sense to have the downloads
> where the source is developed.

I'm not aware of any rational basis for trusting GitHub more than SourceForge. 
At least SourceForge is transparent and releases their source code.

Luke



From laanwj at gmail.com  Sun Dec  8 16:08:34 2013
From: laanwj at gmail.com (Wladimir)
Date: Sun, 8 Dec 2013 17:08:34 +0100
Subject: [Bitcoin-development] Dedicated server for bitcoin.org,
	your thoughts?
In-Reply-To: <52A3C8A5.7010606@gmail.com>
References: <52A3C8A5.7010606@gmail.com>
Message-ID: <CA+s+GJDRn_Gi39pe=bGzitC1f6bYuxCJyFhM+1yKUjmhPoBM_g@mail.gmail.com>

On Sun, Dec 8, 2013 at 2:17 AM, Sa?vann Carignan <saivann at gmail.com> wrote:

> I would like to know what are your thoughts on moving bitcoin.org on a
> dedicated server with a SSL certificate?
>

Good idea.
If anything, these days, not using https is sort of a smell for sites that
security is not being taken seriously.

Wladimir
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131208/24cd6f09/attachment.html>

From gmaxwell at gmail.com  Sun Dec  8 16:51:50 2013
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Sun, 8 Dec 2013 08:51:50 -0800
Subject: [Bitcoin-development] Dedicated server for bitcoin.org,
	your thoughts?
In-Reply-To: <CANAnSg1DiPLqAGW=2Q0zoLjupn8wvYuhhH8HgvBM0d=5uKJNXA@mail.gmail.com>
References: <52A3C8A5.7010606@gmail.com>
	<1795f3067ba3fcdd0caf978cc59ff024.squirrel@fruiteater.riseup.net>
	<CANAnSg1DiPLqAGW=2Q0zoLjupn8wvYuhhH8HgvBM0d=5uKJNXA@mail.gmail.com>
Message-ID: <CAAS2fgREE01pVgesjWa6Y51EXzvtot=fRTGf9L7QL+o8N_SMLA@mail.gmail.com>

On Sun, Dec 8, 2013 at 2:00 AM, Drak <drak at zikula.org> wrote:
> There is really no excuse for not using an SSL certificate. Without one it
> would be trivial for an attacker to change the contents of the page via
> MITM.

Having control of the site gives you a cert regardless, as several CAs
will issue a cert to anyone who can make a http page appear at a
specific URL at the domain when requested via the CA over http.

It really is darn near pretextual security in this kind case? only
protecting you against attacks near the client, not the server? but as
Wladimir says, it's expected and I don't see how it would be a harm.

The revocation argument is somewhat interesting, especially since any
such site should use HSTS or otherwise a downgrade attack is trivial.



From drak at zikula.org  Sun Dec  8 19:16:31 2013
From: drak at zikula.org (Drak)
Date: Sun, 8 Dec 2013 19:16:31 +0000
Subject: [Bitcoin-development] Dedicated server for bitcoin.org,
	your thoughts?
In-Reply-To: <201312081237.24473.luke@dashjr.org>
References: <52A3C8A5.7010606@gmail.com>
	<1795f3067ba3fcdd0caf978cc59ff024.squirrel@fruiteater.riseup.net>
	<52A435EA.7090405@gmail.com> <201312081237.24473.luke@dashjr.org>
Message-ID: <CANAnSg2OrmQAcZ+cZdtQeADicH3U29QOgYPfP1AQhOMP6+P1wg@mail.gmail.com>

On 8 December 2013 12:37, Luke-Jr <luke at dashjr.org> wrote:

> Encryption is useless here. We want everyone to be able to download Bitcoin
> clients. Binaries on sourceforge are signed by multiple parties using
> gitian.
>
> > Decentralization:
> > So long as we actually use DNS, the website is centralized :( However,
> > its content isn't (can be forked on GitHub), but regarding the domain
> > name, there is not much we can do against this AFAIK.
>
> So long as someone has root (or a user that can modify it), the website is
> centralised. To really solve this, we would need a dedicated server that
> accepts commands only when signed by N-of-M parties, inside a cage locked
> by
> padlocks with keys held by independent parties, with a SSL certificate
> issued
> by an authority that has multiple parties watch it every step of the way
> into
> that server.


Malicious actors with root access to the server is another issue entirely.
Sure it's a problem, but it is not an argument not to have a properly
signed SSL certificate.

With out one, the exploit can be performed on routers to redirect traffic
through a third party alter the content of the site (like the links on
bitcoin.org to various wallet projects) and then onto the correct
destination. SSL at least mitigates that. For example it would be trivial
to impersonate Electrum's site or whatever, "change" the link on the fly
that appears on the trusted source bitcoin.org via BGP redirection. Now
users will be directed to the scammers site which could be identical except
for domain name and of course malicious binaries.

BGP redirection is a reality and can be exploited without much
expense/effort. MITM is a real world threat, not some theoretical
possibility - reports show it's happening on an unprecedented scale. SSL is
essential - that's a no-brainer. Sure other measures are important, but
without SSL there is almost no point to any of the other options.

SSL is so considered so important that the *HTTP 2.0 spec might be SSL
only*according to recent discussions at the W3C (
http://lists.w3.org/Archives/Public/ietf-http-wg/2013OctDec/0625.html).

Drak
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131208/c6778642/attachment.html>

From gmaxwell at gmail.com  Sun Dec  8 19:25:24 2013
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Sun, 8 Dec 2013 11:25:24 -0800
Subject: [Bitcoin-development] Dedicated server for bitcoin.org,
	your thoughts?
In-Reply-To: <CANAnSg2OrmQAcZ+cZdtQeADicH3U29QOgYPfP1AQhOMP6+P1wg@mail.gmail.com>
References: <52A3C8A5.7010606@gmail.com>
	<1795f3067ba3fcdd0caf978cc59ff024.squirrel@fruiteater.riseup.net>
	<52A435EA.7090405@gmail.com> <201312081237.24473.luke@dashjr.org>
	<CANAnSg2OrmQAcZ+cZdtQeADicH3U29QOgYPfP1AQhOMP6+P1wg@mail.gmail.com>
Message-ID: <CAAS2fgR0khyJxmz9c2Oc87hOFgiNuiPJuaeugGajdo_EcKEW9w@mail.gmail.com>

On Sun, Dec 8, 2013 at 11:16 AM, Drak <drak at zikula.org> wrote:
> BGP redirection is a reality and can be exploited without much

You're managing to argue against SSL. Because it actually provides
basically protection against an attacker who can actively intercept
traffic to the server. Against that threat model SSL is clearly? based
on your comments? providing a false sense of security.

We _do_ have protection that protect against that? the pgp signature,
but they are far from a solution since people do not check that.

(I'm not suggesting we shouldn't have it, I'm suggesting you stop
arguing SSL provides protection it doesn't before you manage to change
my mind!)



From mike at plan99.net  Sun Dec  8 20:28:35 2013
From: mike at plan99.net (Mike Hearn)
Date: Sun, 8 Dec 2013 21:28:35 +0100
Subject: [Bitcoin-development] Dedicated server for bitcoin.org,
	your thoughts?
In-Reply-To: <CAAS2fgR0khyJxmz9c2Oc87hOFgiNuiPJuaeugGajdo_EcKEW9w@mail.gmail.com>
References: <52A3C8A5.7010606@gmail.com>
	<1795f3067ba3fcdd0caf978cc59ff024.squirrel@fruiteater.riseup.net>
	<52A435EA.7090405@gmail.com> <201312081237.24473.luke@dashjr.org>
	<CANAnSg2OrmQAcZ+cZdtQeADicH3U29QOgYPfP1AQhOMP6+P1wg@mail.gmail.com>
	<CAAS2fgR0khyJxmz9c2Oc87hOFgiNuiPJuaeugGajdo_EcKEW9w@mail.gmail.com>
Message-ID: <CANEZrP3+AowZZS1=hAkx0KODiT-vbcRKyZaHOE2CWaJk3y5-Dw@mail.gmail.com>

Issues that would need to be resolved:

1) Who pays for it? Most obvious answer: Foundation. However there's
currently a fairly clear line between the foundation website and the
bitcoin.org website. I personally am fine with the bitcoin foundation
funding the website, it's a lot closer to the bitcoin community than
github. But some people might care. So next step would be to contact the
Foundation board and see if they're willing to fund it.

2) Anti-DoS? I assume github handles this at the moment, though I doubt
there's anything to be gained from DoSing the informational website

3) Where does the server go? Ideally, a hosting provider that accepts
Bitcoin of course!

4) Who admins it?

5) Who controls DNS for it?

Right now I think Sirius still owns DNS for bitcoin.org which is nonsense.
He needs to pass it on to someone who is actually still involved with the
project. Again, the most obvious neutral candidate would be the Foundation.

So I think it's a good idea but there's a fair amount of work here. The
primary upside I see is that it opens the potential for adding
interactive/server-side code in future if we decide that would be useful.



On Sun, Dec 8, 2013 at 8:25 PM, Gregory Maxwell <gmaxwell at gmail.com> wrote:

> On Sun, Dec 8, 2013 at 11:16 AM, Drak <drak at zikula.org> wrote:
> > BGP redirection is a reality and can be exploited without much
>
> You're managing to argue against SSL. Because it actually provides
> basically protection against an attacker who can actively intercept
> traffic to the server. Against that threat model SSL is clearly? based
> on your comments? providing a false sense of security.
>
> We _do_ have protection that protect against that? the pgp signature,
> but they are far from a solution since people do not check that.
>
> (I'm not suggesting we shouldn't have it, I'm suggesting you stop
> arguing SSL provides protection it doesn't before you manage to change
> my mind!)
>
>
> ------------------------------------------------------------------------------
> Sponsored by Intel(R) XDK
> Develop, test and display web and hybrid apps with a single code base.
> Download it for free now!
>
> http://pubads.g.doubleclick.net/gampad/clk?id=111408631&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131208/69028098/attachment.html>

From gmaxwell at gmail.com  Sun Dec  8 20:40:12 2013
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Sun, 8 Dec 2013 12:40:12 -0800
Subject: [Bitcoin-development] Dedicated server for bitcoin.org,
	your thoughts?
In-Reply-To: <CANEZrP3+AowZZS1=hAkx0KODiT-vbcRKyZaHOE2CWaJk3y5-Dw@mail.gmail.com>
References: <52A3C8A5.7010606@gmail.com>
	<1795f3067ba3fcdd0caf978cc59ff024.squirrel@fruiteater.riseup.net>
	<52A435EA.7090405@gmail.com> <201312081237.24473.luke@dashjr.org>
	<CANAnSg2OrmQAcZ+cZdtQeADicH3U29QOgYPfP1AQhOMP6+P1wg@mail.gmail.com>
	<CAAS2fgR0khyJxmz9c2Oc87hOFgiNuiPJuaeugGajdo_EcKEW9w@mail.gmail.com>
	<CANEZrP3+AowZZS1=hAkx0KODiT-vbcRKyZaHOE2CWaJk3y5-Dw@mail.gmail.com>
Message-ID: <CAAS2fgT2x3iLnRiLabPT28eO6rbGuBBgi2s-Yhtgwo+3XWq7+Q@mail.gmail.com>

On Sun, Dec 8, 2013 at 12:28 PM, Mike Hearn <mike at plan99.net> wrote:
> Right now I think Sirius still owns DNS for bitcoin.org which is nonsense.
> He needs to pass it on to someone who is actually still involved with the
> project. Again, the most obvious neutral candidate would be the Foundation.

I am opposed to Bitcoin Foundation having control of Bitcoin.org, and
I think it would be foolish of the foundation to accept it were it
offered.



From drak at zikula.org  Sun Dec  8 20:40:04 2013
From: drak at zikula.org (Drak)
Date: Sun, 8 Dec 2013 20:40:04 +0000
Subject: [Bitcoin-development] Dedicated server for bitcoin.org,
	your thoughts?
In-Reply-To: <CAAS2fgR0khyJxmz9c2Oc87hOFgiNuiPJuaeugGajdo_EcKEW9w@mail.gmail.com>
References: <52A3C8A5.7010606@gmail.com>
	<1795f3067ba3fcdd0caf978cc59ff024.squirrel@fruiteater.riseup.net>
	<52A435EA.7090405@gmail.com> <201312081237.24473.luke@dashjr.org>
	<CANAnSg2OrmQAcZ+cZdtQeADicH3U29QOgYPfP1AQhOMP6+P1wg@mail.gmail.com>
	<CAAS2fgR0khyJxmz9c2Oc87hOFgiNuiPJuaeugGajdo_EcKEW9w@mail.gmail.com>
Message-ID: <CANAnSg2tep2VURmudfNModuJAryw8hfOj8Z8idVbt37keiZ8Lg@mail.gmail.com>

On 8 December 2013 19:25, Gregory Maxwell <gmaxwell at gmail.com> wrote:

> On Sun, Dec 8, 2013 at 11:16 AM, Drak <drak at zikula.org> wrote:
> > BGP redirection is a reality and can be exploited without much
>
> You're managing to argue against SSL. Because it actually provides
> basically protection against an attacker who can actively intercept
> traffic to the server. Against that threat model SSL is clearly? based
> on your comments? providing a false sense of security.


Let me clarify. SSL renders BGP redirection useless because the browser
holds the signatures of CA's it trusts: an attacker cannot spoof a
certificate because it needs to be signed by a trusted CA: that's the point
of SSL, it encrypts and proves identity, the latter part is what thwarts
MITM. If there was an MITM the browser screams pretty loudly about it with
a big threat warning interstitial.

Regards,

Drak
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131208/9e49620a/attachment.html>

From gmaxwell at gmail.com  Sun Dec  8 20:50:29 2013
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Sun, 8 Dec 2013 12:50:29 -0800
Subject: [Bitcoin-development] Dedicated server for bitcoin.org,
	your thoughts?
In-Reply-To: <CANAnSg2tep2VURmudfNModuJAryw8hfOj8Z8idVbt37keiZ8Lg@mail.gmail.com>
References: <52A3C8A5.7010606@gmail.com>
	<1795f3067ba3fcdd0caf978cc59ff024.squirrel@fruiteater.riseup.net>
	<52A435EA.7090405@gmail.com> <201312081237.24473.luke@dashjr.org>
	<CANAnSg2OrmQAcZ+cZdtQeADicH3U29QOgYPfP1AQhOMP6+P1wg@mail.gmail.com>
	<CAAS2fgR0khyJxmz9c2Oc87hOFgiNuiPJuaeugGajdo_EcKEW9w@mail.gmail.com>
	<CANAnSg2tep2VURmudfNModuJAryw8hfOj8Z8idVbt37keiZ8Lg@mail.gmail.com>
Message-ID: <CAAS2fgT=0m=0-C+MNotUy6nqwcR-Y+YTNYrS8DZptMo5vCMRnA@mail.gmail.com>

On Sun, Dec 8, 2013 at 12:40 PM, Drak <drak at zikula.org> wrote:
> Let me clarify. SSL renders BGP redirection useless because the browser
> holds the signatures of CA's it trusts: an attacker cannot spoof a
> certificate because it needs to be signed by a trusted CA: that's the point
> of SSL, it encrypts and proves identity, the latter part is what thwarts
> MITM. If there was an MITM the browser screams pretty loudly about it with a
> big threat warning interstitial.

Sadly this isn't true: There are (many) CAs which will issue a
certificate (apparently sometime within minutes, though last
certificate I obtained took a couple hours total) to anyone who can
respond to http (not https) requests on behalf of the domain from the
perspective of the CA.

This means you can MITM the site, pass all traffic through except the
HTTP request from the CA, and start intercepting once the CA has
signed your certificate. This works because the CA does nothing to
verify identity except check that the requester can control the site.

If you'd like to me to demonstrate this attack for you I'd be willing?
I can provide a proxy that passes on :80 and :443, run your traffic
through it and I'll get a cert with your domain name.

I'm sorry for the tangent here? I think this sub-discussion is really
unrelated to having Bitcoin.org behind SSL? but "someone is wrong on
the internet", and its important to know that SSL hardly does anything
to reduce the need to check the offline signatures on the binaries.



From drak at zikula.org  Sun Dec  8 20:51:07 2013
From: drak at zikula.org (Drak)
Date: Sun, 8 Dec 2013 20:51:07 +0000
Subject: [Bitcoin-development] Dedicated server for bitcoin.org,
	your thoughts?
In-Reply-To: <CAAS2fgT2x3iLnRiLabPT28eO6rbGuBBgi2s-Yhtgwo+3XWq7+Q@mail.gmail.com>
References: <52A3C8A5.7010606@gmail.com>
	<1795f3067ba3fcdd0caf978cc59ff024.squirrel@fruiteater.riseup.net>
	<52A435EA.7090405@gmail.com> <201312081237.24473.luke@dashjr.org>
	<CANAnSg2OrmQAcZ+cZdtQeADicH3U29QOgYPfP1AQhOMP6+P1wg@mail.gmail.com>
	<CAAS2fgR0khyJxmz9c2Oc87hOFgiNuiPJuaeugGajdo_EcKEW9w@mail.gmail.com>
	<CANEZrP3+AowZZS1=hAkx0KODiT-vbcRKyZaHOE2CWaJk3y5-Dw@mail.gmail.com>
	<CAAS2fgT2x3iLnRiLabPT28eO6rbGuBBgi2s-Yhtgwo+3XWq7+Q@mail.gmail.com>
Message-ID: <CANAnSg3GeLPyXXK5Osg1hcC7MQ=Na3BWrGCe95ab7UcbeG2Jgw@mail.gmail.com>

On 8 December 2013 20:40, Gregory Maxwell <gmaxwell at gmail.com> wrote:

> On Sun, Dec 8, 2013 at 12:28 PM, Mike Hearn <mike at plan99.net> wrote:
> > Right now I think Sirius still owns DNS for bitcoin.org which is
> nonsense.
> > He needs to pass it on to someone who is actually still involved with the
> > project. Again, the most obvious neutral candidate would be the
> Foundation.
>
> I am opposed to Bitcoin Foundation having control of Bitcoin.org, and
> I think it would be foolish of the foundation to accept it were it
> offered.
>

What do you suggest though? We will need to trust someone (even in a group
each person can act autonomously).
The only thing I can suggest would be to hand the keys to the bitcoin
project lead.

Otherwise, who has admin rights to the code projects
(github/sourceforge/this mailing list)? Those people have proven they can
be trusted so far.

Drak
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131208/7513277a/attachment.html>

From luke at dashjr.org  Sun Dec  8 21:01:24 2013
From: luke at dashjr.org (Luke-Jr)
Date: Sun, 8 Dec 2013 21:01:24 +0000
Subject: [Bitcoin-development] Dedicated server for bitcoin.org,
	your thoughts?
In-Reply-To: <CANAnSg3GeLPyXXK5Osg1hcC7MQ=Na3BWrGCe95ab7UcbeG2Jgw@mail.gmail.com>
References: <52A3C8A5.7010606@gmail.com>
	<CAAS2fgT2x3iLnRiLabPT28eO6rbGuBBgi2s-Yhtgwo+3XWq7+Q@mail.gmail.com>
	<CANAnSg3GeLPyXXK5Osg1hcC7MQ=Na3BWrGCe95ab7UcbeG2Jgw@mail.gmail.com>
Message-ID: <201312082101.25609.luke@dashjr.org>

On Sunday, December 08, 2013 8:51:07 PM Drak wrote:
> Otherwise, who has admin rights to the code projects
> (github/sourceforge/this mailing list)? Those people have proven they can
> be trusted so far.

Can someone explain how Sirius has proven the least bit untrustworthy?

Luke



From drak at zikula.org  Sun Dec  8 21:07:54 2013
From: drak at zikula.org (Drak)
Date: Sun, 8 Dec 2013 21:07:54 +0000
Subject: [Bitcoin-development] Dedicated server for bitcoin.org,
	your thoughts?
In-Reply-To: <CAAS2fgT=0m=0-C+MNotUy6nqwcR-Y+YTNYrS8DZptMo5vCMRnA@mail.gmail.com>
References: <52A3C8A5.7010606@gmail.com>
	<1795f3067ba3fcdd0caf978cc59ff024.squirrel@fruiteater.riseup.net>
	<52A435EA.7090405@gmail.com> <201312081237.24473.luke@dashjr.org>
	<CANAnSg2OrmQAcZ+cZdtQeADicH3U29QOgYPfP1AQhOMP6+P1wg@mail.gmail.com>
	<CAAS2fgR0khyJxmz9c2Oc87hOFgiNuiPJuaeugGajdo_EcKEW9w@mail.gmail.com>
	<CANAnSg2tep2VURmudfNModuJAryw8hfOj8Z8idVbt37keiZ8Lg@mail.gmail.com>
	<CAAS2fgT=0m=0-C+MNotUy6nqwcR-Y+YTNYrS8DZptMo5vCMRnA@mail.gmail.com>
Message-ID: <CANAnSg28awKbAGQS7-kNmenbU00XVB1gpN4c0A3dhGxaH4sxWw@mail.gmail.com>

On 8 December 2013 20:50, Gregory Maxwell <gmaxwell at gmail.com> wrote:

> Sadly this isn't true: There are (many) CAs which will issue a
>  certificate (apparently sometime within minutes, though last
> certificate I obtained took a couple hours total) to anyone who can
> respond to http (not https) requests on behalf of the domain from the
> perspective of the CA.
>

Simple verification relies on being able to answer the email sent to the
person in the whois records, or standard admin/webmaster@ addresses to
prove ownership of the domain. This is a good point to note -
bitcoin.orgshould not get a simple certificate, but one that requires
identify
verification for the person/org who is applying. They are more expensive.


> This means you can MITM the site, pass all traffic through except the
> HTTP request from the CA, and start intercepting once the CA has
> signed your certificate. This works because the CA does nothing to
> verify identity except check that the requester can control the site.
>
> If you'd like to me to demonstrate this attack for you I'd be willing?
> I can provide a proxy that passes on :80 and :443, run your traffic
> through it and I'll get a cert with your domain name.
>

You cannot MITM SSL connections - it will cause a browser warning.
I do not have the means, but it has been demonstrated some people are
performing BGP redirections, daily, and on a massive scale... and it's a
problem, because BGP was designed on implicit trust.


> I'm sorry for the tangent here? I think this sub-discussion is really
> unrelated to having Bitcoin.org behind SSL? but "someone is wrong on
> the internet", and its important to know that SSL hardly does anything
> to reduce the need to check the offline signatures on the binaries.


You are right that the CA system is not full-proof, one CA was caught
issuing a bogus certificate on purpose a while back, I forgot the name but
it resulted in CA certificate revokation and the entire company being
blacklisted from Firefox and Google Chrome forever - basically a summary
corporate execution. I personally imagine the CIA or other state actor
could just quietly buy up an already trusted CA and abuse them. But it's
clear, people are watching, and if a CA is caught once, that's the end of
their business forever: Firefox and Google demonstrated that. The strategy
is possibly too expensive and risky to carry off which is maybe why they
don't do it.

What has been noted with all the Snowden leaks, and with the Lavabit case,
the security agencies did not get bogus certificates issued, they still got
court orders, or other deception to get hold of the encryption certificates
of their targets instead of issuing their own so they could listen in.

The CA system is not full proof, but it is what we have. Similar arguments
have been made against the use of identity certificates for bitcoin, but
that hasnt stopped it's inclusion in the bitcoin payment protocol.

Anyway, I take your points, but this is an area I am quite passionate about
so it's important for me to be clear.

Regards,

Drak
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131208/875bc5d8/attachment.html>

From gmaxwell at gmail.com  Sun Dec  8 21:09:21 2013
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Sun, 8 Dec 2013 13:09:21 -0800
Subject: [Bitcoin-development] Dedicated server for bitcoin.org,
	your thoughts?
In-Reply-To: <CANAnSg3GeLPyXXK5Osg1hcC7MQ=Na3BWrGCe95ab7UcbeG2Jgw@mail.gmail.com>
References: <52A3C8A5.7010606@gmail.com>
	<1795f3067ba3fcdd0caf978cc59ff024.squirrel@fruiteater.riseup.net>
	<52A435EA.7090405@gmail.com> <201312081237.24473.luke@dashjr.org>
	<CANAnSg2OrmQAcZ+cZdtQeADicH3U29QOgYPfP1AQhOMP6+P1wg@mail.gmail.com>
	<CAAS2fgR0khyJxmz9c2Oc87hOFgiNuiPJuaeugGajdo_EcKEW9w@mail.gmail.com>
	<CANEZrP3+AowZZS1=hAkx0KODiT-vbcRKyZaHOE2CWaJk3y5-Dw@mail.gmail.com>
	<CAAS2fgT2x3iLnRiLabPT28eO6rbGuBBgi2s-Yhtgwo+3XWq7+Q@mail.gmail.com>
	<CANAnSg3GeLPyXXK5Osg1hcC7MQ=Na3BWrGCe95ab7UcbeG2Jgw@mail.gmail.com>
Message-ID: <CAAS2fgS7=FbX6Si+vfHYL9jtwBm0ipSjsBy3PwJ5zQuYxEkPqg@mail.gmail.com>

On Sun, Dec 8, 2013 at 12:51 PM, Drak <drak at zikula.org> wrote:
> What do you suggest though? We will need to trust someone (even in a group
> each person can act autonomously).
> The only thing I can suggest would be to hand the keys to the bitcoin
> project lead.
>
> Otherwise, who has admin rights to the code projects
> (github/sourceforge/this mailing list)? Those people have proven they can be
> trusted so far.

My concern isn't a matter of trustworthyness, it's a matter of too
many eggs in one basket (especially a basket with potentially poor
jurisdictional locality).  The current control of the domain has
proven reasonably trustworthy, and if there is a concern for funding
our own server stuff that can be easily handled (e.g. if need be, I'd
pay for it myself, without being in control of it).

Also, in terms of effective lobbying/advocacy I worry that the
foundation would be unable to do an effective job if its saddled with
the belief that its in control of Bitcoin ("Why don't you just make
every transaction {...}": the answer is because its a decentralized
system and no one can unilaterally change it in ways its users would
hate, but it becomes complicated. It's crisper when its clear that
diverse and independant parties are in control of the popular
infrastructure).



From drak at zikula.org  Sun Dec  8 21:11:20 2013
From: drak at zikula.org (Drak)
Date: Sun, 8 Dec 2013 21:11:20 +0000
Subject: [Bitcoin-development] Dedicated server for bitcoin.org,
	your thoughts?
In-Reply-To: <201312082101.25609.luke@dashjr.org>
References: <52A3C8A5.7010606@gmail.com>
	<CAAS2fgT2x3iLnRiLabPT28eO6rbGuBBgi2s-Yhtgwo+3XWq7+Q@mail.gmail.com>
	<CANAnSg3GeLPyXXK5Osg1hcC7MQ=Na3BWrGCe95ab7UcbeG2Jgw@mail.gmail.com>
	<201312082101.25609.luke@dashjr.org>
Message-ID: <CANAnSg0vwbSyYtzOpbFzaHmS2wQ2aQCibk9tg+G4VA_ESp_7ow@mail.gmail.com>

On 8 December 2013 21:01, Luke-Jr <luke at dashjr.org> wrote:

> On Sunday, December 08, 2013 8:51:07 PM Drak wrote:
> > Otherwise, who has admin rights to the code projects
> > (github/sourceforge/this mailing list)? Those people have proven they can
> > be trusted so far.
>
> Can someone explain how Sirius has proven the least bit untrustworthy?


It's not just about trust, there is the robustness factor: what if he
becomes sick, unavailable, hit by a bus? Others need the ability to pickup
and run with it. The control over the domain (including ability to renew
registration, alter nameservers) needs to be with more than one person.
That's why I suggest using the same people who have control over the
software project at sf,github.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131208/232210d7/attachment.html>

From gmaxwell at gmail.com  Sun Dec  8 21:14:44 2013
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Sun, 8 Dec 2013 13:14:44 -0800
Subject: [Bitcoin-development] Dedicated server for bitcoin.org,
	your thoughts?
In-Reply-To: <CANAnSg28awKbAGQS7-kNmenbU00XVB1gpN4c0A3dhGxaH4sxWw@mail.gmail.com>
References: <52A3C8A5.7010606@gmail.com>
	<1795f3067ba3fcdd0caf978cc59ff024.squirrel@fruiteater.riseup.net>
	<52A435EA.7090405@gmail.com> <201312081237.24473.luke@dashjr.org>
	<CANAnSg2OrmQAcZ+cZdtQeADicH3U29QOgYPfP1AQhOMP6+P1wg@mail.gmail.com>
	<CAAS2fgR0khyJxmz9c2Oc87hOFgiNuiPJuaeugGajdo_EcKEW9w@mail.gmail.com>
	<CANAnSg2tep2VURmudfNModuJAryw8hfOj8Z8idVbt37keiZ8Lg@mail.gmail.com>
	<CAAS2fgT=0m=0-C+MNotUy6nqwcR-Y+YTNYrS8DZptMo5vCMRnA@mail.gmail.com>
	<CANAnSg28awKbAGQS7-kNmenbU00XVB1gpN4c0A3dhGxaH4sxWw@mail.gmail.com>
Message-ID: <CAAS2fgQ=b2e-hFwZiVDPTs2hnPLuQBh0Lx31Q9xGNPG8+2fH-g@mail.gmail.com>

On Sun, Dec 8, 2013 at 1:07 PM, Drak <drak at zikula.org> wrote:
> Simple verification relies on being able to answer the email sent to the
> person in the whois records, or standard admin/webmaster@ addresses to prove
> ownership of the domain

Godaddy and many other CA's are verified from nothing other than a
http fetch, no email involved.

As I said, I'm willing to demonstrate if you have a domain.

> You cannot MITM SSL connections

You can, once you've obtained a certificate.

> Anyway, I take your points, but this is an area I am quite passionate about
> so it's important for me to be clear.

As I warned before, you're making my reconsider my position about the
downloads being SSL. If people are so convinced that SSL provides
protection it does not that even with an explanation and and an offer
to demonstrate then perhaps providing SSL will reduce people's
security.

... the _only_ reason I don't yet hold that position now is that I
know objectively that almost no one tests the signatures.

On Sun, Dec 8, 2013 at 1:11 PM, Drak <drak at zikula.org> wrote:
> It's not just about trust, there is the robustness factor: what if he
> becomes sick, unavailable, hit by a bus? Others need the ability to pickup
> and run with it. The control over the domain (including ability to renew
> registration, alter nameservers) needs to be with more than one person.
> That's why I suggest using the same people who have control over the
> software project at sf,github.

My understanding is that the domain is already controlled by more than
one person. You're not the first person to think of these things. :)



From saivann at gmail.com  Sun Dec  8 21:16:09 2013
From: saivann at gmail.com (=?windows-1252?Q?Sa=EFvann_Carignan?=)
Date: Sun, 08 Dec 2013 16:16:09 -0500
Subject: [Bitcoin-development] Dedicated server for bitcoin.org,
 your thoughts?
In-Reply-To: <CANEZrP3+AowZZS1=hAkx0KODiT-vbcRKyZaHOE2CWaJk3y5-Dw@mail.gmail.com>
References: <52A3C8A5.7010606@gmail.com>	<1795f3067ba3fcdd0caf978cc59ff024.squirrel@fruiteater.riseup.net>	<52A435EA.7090405@gmail.com>
	<201312081237.24473.luke@dashjr.org>	<CANAnSg2OrmQAcZ+cZdtQeADicH3U29QOgYPfP1AQhOMP6+P1wg@mail.gmail.com>	<CAAS2fgR0khyJxmz9c2Oc87hOFgiNuiPJuaeugGajdo_EcKEW9w@mail.gmail.com>
	<CANEZrP3+AowZZS1=hAkx0KODiT-vbcRKyZaHOE2CWaJk3y5-Dw@mail.gmail.com>
Message-ID: <52A4E199.3000209@gmail.com>


> Issues that would need to be resolved:
> 
> 1) Who pays for it? Most obvious answer: Foundation. However there's
> currently a fairly clear line between the foundation website and the
> bitcoin.org <http://bitcoin.org> website. I personally am fine with the
> bitcoin foundation funding the website, it's a lot closer to the bitcoin
> community than github. But some people might care. So next step would be
> to contact the Foundation board and see if they're willing to fund it.

Actually I might find way to fund it. But I needed to have ACK &
comments from developers before anything.

> 2) Anti-DoS? I assume github handles this at the moment, though I doubt
> there's anything to be gained from DoSing the informational website

That is a fair question, we will need anti-DDoS. Unless something better
(and affordable) can be recommended, this would yet put another Bitcoin
website under CloudFlare.

> 4) Who admins it?

Obviously, I thought it would be important that the server is owned by
someone who can be trusted, with ssh access for all core developers.

> 5) Who controls DNS for it?

I'm not sure we'll get any change on this level. I have no idea if the
domain is in good hands, except for the fact that nothing bad happened
thus far. If anything, moving it to core developers (as intended when
the domain was registered) would make more sense IMO. But again, is it
possible, I don't know.



From mark at monetize.io  Sun Dec  8 21:46:18 2013
From: mark at monetize.io (Mark Friedenbach)
Date: Sun, 8 Dec 2013 13:46:18 -0800
Subject: [Bitcoin-development] Dedicated server for bitcoin.org,
	your thoughts?
In-Reply-To: <CANEZrP3+AowZZS1=hAkx0KODiT-vbcRKyZaHOE2CWaJk3y5-Dw@mail.gmail.com>
References: <52A3C8A5.7010606@gmail.com>
	<1795f3067ba3fcdd0caf978cc59ff024.squirrel@fruiteater.riseup.net>
	<52A435EA.7090405@gmail.com> <201312081237.24473.luke@dashjr.org>
	<CANAnSg2OrmQAcZ+cZdtQeADicH3U29QOgYPfP1AQhOMP6+P1wg@mail.gmail.com>
	<CAAS2fgR0khyJxmz9c2Oc87hOFgiNuiPJuaeugGajdo_EcKEW9w@mail.gmail.com>
	<CANEZrP3+AowZZS1=hAkx0KODiT-vbcRKyZaHOE2CWaJk3y5-Dw@mail.gmail.com>
Message-ID: <CACh7GpEGyPsOtgNpkVqizuugygpeXAn6829CF-7eDZ1yuCKvDg@mail.gmail.com>

I too would be against the foundation taking control of hosting or the
domain. I have no reason at this time not to trust them, by checks and
balances are a good thing.
On Dec 8, 2013 12:29 PM, "Mike Hearn" <mike at plan99.net> wrote:

> Issues that would need to be resolved:
>
> 1) Who pays for it? Most obvious answer: Foundation. However there's
> currently a fairly clear line between the foundation website and the
> bitcoin.org website. I personally am fine with the bitcoin foundation
> funding the website, it's a lot closer to the bitcoin community than
> github. But some people might care. So next step would be to contact the
> Foundation board and see if they're willing to fund it.
>
> 2) Anti-DoS? I assume github handles this at the moment, though I doubt
> there's anything to be gained from DoSing the informational website
>
> 3) Where does the server go? Ideally, a hosting provider that accepts
> Bitcoin of course!
>
> 4) Who admins it?
>
> 5) Who controls DNS for it?
>
> Right now I think Sirius still owns DNS for bitcoin.org which is
> nonsense. He needs to pass it on to someone who is actually still involved
> with the project. Again, the most obvious neutral candidate would be the
> Foundation.
>
> So I think it's a good idea but there's a fair amount of work here. The
> primary upside I see is that it opens the potential for adding
> interactive/server-side code in future if we decide that would be useful.
>
>
>
> On Sun, Dec 8, 2013 at 8:25 PM, Gregory Maxwell <gmaxwell at gmail.com>wrote:
>
>> On Sun, Dec 8, 2013 at 11:16 AM, Drak <drak at zikula.org> wrote:
>> > BGP redirection is a reality and can be exploited without much
>>
>> You're managing to argue against SSL. Because it actually provides
>> basically protection against an attacker who can actively intercept
>> traffic to the server. Against that threat model SSL is clearly? based
>> on your comments? providing a false sense of security.
>>
>> We _do_ have protection that protect against that? the pgp signature,
>> but they are far from a solution since people do not check that.
>>
>> (I'm not suggesting we shouldn't have it, I'm suggesting you stop
>> arguing SSL provides protection it doesn't before you manage to change
>> my mind!)
>>
>>
>> ------------------------------------------------------------------------------
>> Sponsored by Intel(R) XDK
>> Develop, test and display web and hybrid apps with a single code base.
>> Download it for free now!
>>
>> http://pubads.g.doubleclick.net/gampad/clk?id=111408631&iu=/4140/ostg.clktrk
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>
>
>
>
> ------------------------------------------------------------------------------
> Sponsored by Intel(R) XDK
> Develop, test and display web and hybrid apps with a single code base.
> Download it for free now!
>
> http://pubads.g.doubleclick.net/gampad/clk?id=111408631&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131208/17fae2d5/attachment.html>

From roy at gnomon.org.uk  Sun Dec  8 21:58:50 2013
From: roy at gnomon.org.uk (Roy Badami)
Date: Sun, 8 Dec 2013 21:58:50 +0000
Subject: [Bitcoin-development] Dedicated server for bitcoin.org,
 your thoughts?
In-Reply-To: <52A4E199.3000209@gmail.com>
References: <52A3C8A5.7010606@gmail.com>
	<1795f3067ba3fcdd0caf978cc59ff024.squirrel@fruiteater.riseup.net>
	<52A435EA.7090405@gmail.com> <201312081237.24473.luke@dashjr.org>
	<CANAnSg2OrmQAcZ+cZdtQeADicH3U29QOgYPfP1AQhOMP6+P1wg@mail.gmail.com>
	<CAAS2fgR0khyJxmz9c2Oc87hOFgiNuiPJuaeugGajdo_EcKEW9w@mail.gmail.com>
	<CANEZrP3+AowZZS1=hAkx0KODiT-vbcRKyZaHOE2CWaJk3y5-Dw@mail.gmail.com>
	<52A4E199.3000209@gmail.com>
Message-ID: <20131208215850.GE62848@giles.gnomon.org.uk>

> > 5) Who controls DNS for it?
> 
> I'm not sure we'll get any change on this level. I have no idea if the
> domain is in good hands, except for the fact that nothing bad happened
> thus far. If anything, moving it to core developers (as intended when
> the domain was registered) would make more sense IMO. But again, is it
> possible, I don't know.

That's an interesting question.  The bitcoin.org domain is hiding
behind a WhoisGuard anonymous registration.  Why are we not allowed to
know who this domain belongs to?  Why are we being asked to trust some
unidentified party?

roy





From gavinandresen at gmail.com  Sun Dec  8 22:44:26 2013
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Mon, 9 Dec 2013 08:44:26 +1000
Subject: [Bitcoin-development] Dedicated server for bitcoin.org,
	your thoughts?
In-Reply-To: <52A4E199.3000209@gmail.com>
References: <52A3C8A5.7010606@gmail.com>
	<1795f3067ba3fcdd0caf978cc59ff024.squirrel@fruiteater.riseup.net>
	<52A435EA.7090405@gmail.com> <201312081237.24473.luke@dashjr.org>
	<CANAnSg2OrmQAcZ+cZdtQeADicH3U29QOgYPfP1AQhOMP6+P1wg@mail.gmail.com>
	<CAAS2fgR0khyJxmz9c2Oc87hOFgiNuiPJuaeugGajdo_EcKEW9w@mail.gmail.com>
	<CANEZrP3+AowZZS1=hAkx0KODiT-vbcRKyZaHOE2CWaJk3y5-Dw@mail.gmail.com>
	<52A4E199.3000209@gmail.com>
Message-ID: <CABsx9T0ATM0BWKJQfodik6X0=xeU853rVrS2A8V2SO36GDm_gQ@mail.gmail.com>

>
> > 4) Who admins it?
>
> Obviously, I thought it would be important that the server is owned by
> someone who can be trusted, with ssh access for all core developers.
>

That is a really bad idea.  If there is not a CLEAR answer to "who admins
it", there will be a bunch of "I thought YOU were applying security
patches... no, I thought YOU were..." the first time it gets hacked.

So, the question is:  who wants to take responsibility for keeping
bitcoin.org safe and secure?

I am not going to do that, I've got too many other things to worry about.
It is exactly the type of thing the Foundation was setup to do, but if
y'all want to create some other organization to do it, then please make it
happen.

-- 
--
Gavin Andresen
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131209/2960d236/attachment.html>

From robert at mckay.com  Sun Dec  8 22:27:17 2013
From: robert at mckay.com (Robert McKay)
Date: Sun, 08 Dec 2013 22:27:17 +0000
Subject: [Bitcoin-development]
	=?utf-8?q?Dedicated_server_for_bitcoin=2Eor?=
	=?utf-8?q?g=2C_your_thoughts=3F?=
In-Reply-To: <CAAS2fgQ=b2e-hFwZiVDPTs2hnPLuQBh0Lx31Q9xGNPG8+2fH-g@mail.gmail.com>
References: <52A3C8A5.7010606@gmail.com>
	<1795f3067ba3fcdd0caf978cc59ff024.squirrel@fruiteater.riseup.net>
	<52A435EA.7090405@gmail.com> <201312081237.24473.luke@dashjr.org>
	<CANAnSg2OrmQAcZ+cZdtQeADicH3U29QOgYPfP1AQhOMP6+P1wg@mail.gmail.com>
	<CAAS2fgR0khyJxmz9c2Oc87hOFgiNuiPJuaeugGajdo_EcKEW9w@mail.gmail.com>
	<CANAnSg2tep2VURmudfNModuJAryw8hfOj8Z8idVbt37keiZ8Lg@mail.gmail.com>
	<CAAS2fgT=0m=0-C+MNotUy6nqwcR-Y+YTNYrS8DZptMo5vCMRnA@mail.gmail.com>
	<CANAnSg28awKbAGQS7-kNmenbU00XVB1gpN4c0A3dhGxaH4sxWw@mail.gmail.com>
	<CAAS2fgQ=b2e-hFwZiVDPTs2hnPLuQBh0Lx31Q9xGNPG8+2fH-g@mail.gmail.com>
Message-ID: <261ae2bf5c67d44d090709be57a9e1ad@webmail.mckay.com>

On Sun, 8 Dec 2013 13:14:44 -0800, Gregory Maxwell wrote:
> On Sun, Dec 8, 2013 at 1:07 PM, Drak <drak at zikula.org> wrote:
>> Simple verification relies on being able to answer the email sent to 
>> the
>> person in the whois records, or standard admin/webmaster@ addresses 
>> to prove
>> ownership of the domain
>
> Godaddy and many other CA's are verified from nothing other than a
> http fetch, no email involved.

It's just as easy to steal emails via a BGP or DNS redirect anyway.. 
you could even take over the actual domain at the registry level by 
stealing a password reset via BGP or DNS redirect and actually many 
registries will hand over control of a domain by faxing them a forged 
driving license in the owner's name anyway so it doesn't even really 
need to be a particularly sophisticated attacker. Once you have registry 
control of the domain it's easy enough to get an SSL cert too, probably 
even an 'extended validation' one.

When Afghanistan was taken over the entire .af TLD was probably 
transferred using a forged fax to ICANN 
(http://web.archive.org/web/20041017031020/http://www.iana.org/cctld/af/razeeq-letter-13aug02.pdf) 
but I guess that's a little different :p

Rob



From mike at plan99.net  Sun Dec  8 23:03:50 2013
From: mike at plan99.net (Mike Hearn)
Date: Mon, 9 Dec 2013 00:03:50 +0100
Subject: [Bitcoin-development] Dedicated server for bitcoin.org,
	your thoughts?
In-Reply-To: <20131208215850.GE62848@giles.gnomon.org.uk>
References: <52A3C8A5.7010606@gmail.com>
	<1795f3067ba3fcdd0caf978cc59ff024.squirrel@fruiteater.riseup.net>
	<52A435EA.7090405@gmail.com> <201312081237.24473.luke@dashjr.org>
	<CANAnSg2OrmQAcZ+cZdtQeADicH3U29QOgYPfP1AQhOMP6+P1wg@mail.gmail.com>
	<CAAS2fgR0khyJxmz9c2Oc87hOFgiNuiPJuaeugGajdo_EcKEW9w@mail.gmail.com>
	<CANEZrP3+AowZZS1=hAkx0KODiT-vbcRKyZaHOE2CWaJk3y5-Dw@mail.gmail.com>
	<52A4E199.3000209@gmail.com>
	<20131208215850.GE62848@giles.gnomon.org.uk>
Message-ID: <CANEZrP0YyLd-zwniE-FUT4AG2Zemp2SBrwF8gskTf3LgsKfByw@mail.gmail.com>

> That's an interesting question.  The bitcoin.org domain is hiding
> behind a WhoisGuard anonymous registration.  Why are we not allowed to
> know who this domain belongs to?  Why are we being asked to trust some
> unidentified party?


It's done that way because it was originally registered by Satoshi. It's
now controlled by Sirius, who doesn't really take part in the project
anymore.

I bring this up because of the recent bitcointalk fiasco. AFAIK the domains
are registered and controlled in the same way. It's likely that the current
registrar isn't very secure.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131209/26229b53/attachment.html>

From wtogami at gmail.com  Sun Dec  8 23:07:30 2013
From: wtogami at gmail.com (Warren Togami Jr.)
Date: Sun, 8 Dec 2013 13:07:30 -1000
Subject: [Bitcoin-development] 0.8.6 release candidate 1
In-Reply-To: <CABsx9T3tMkYf=LCWdeoptxwL3LSrSTDCtQ8zNUdkNaJ4F9kY7w@mail.gmail.com>
References: <CABsx9T3tMkYf=LCWdeoptxwL3LSrSTDCtQ8zNUdkNaJ4F9kY7w@mail.gmail.com>
Message-ID: <CAEz79PpUacdKTYokbdrhJr1Q1cH7KdyNjMiN38nLG2hLe+u=Cg@mail.gmail.com>

I found a tiny error in 0.8.6rc1.  The leveldb subtree merge was done
incorrectly leaving an errant db/ directory in the base of bitcoin instead
of src/leveldb.  See my earlier mail on 0.8.6 for suggested subtree squash
and merge syntax.  (On plane now...)

Warren
On Dec 5, 2013 10:53 PM, "Gavin Andresen" <gavinandresen at gmail.com> wrote:

> 0.8.6 release candidate 1 is available from:
>
> https://sourceforge.net/projects/bitcoin/files/Bitcoin/bitcoin-0.8.6/test/
>
> Please help sanity-test, especially if you are running OSX or Windows.
>
> --
> --
> Gavin Andresen
>
>
> ------------------------------------------------------------------------------
> Sponsored by Intel(R) XDK
> Develop, test and display web and hybrid apps with a single code base.
> Download it for free now!
>
> http://pubads.g.doubleclick.net/gampad/clk?id=111408631&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131208/7645b3bc/attachment.html>

From luke at dashjr.org  Sun Dec  8 23:18:42 2013
From: luke at dashjr.org (Luke-Jr)
Date: Sun, 8 Dec 2013 23:18:42 +0000
Subject: [Bitcoin-development] Dedicated server for bitcoin.org,
	your thoughts?
In-Reply-To: <52A4E199.3000209@gmail.com>
References: <52A3C8A5.7010606@gmail.com>
	<CANEZrP3+AowZZS1=hAkx0KODiT-vbcRKyZaHOE2CWaJk3y5-Dw@mail.gmail.com>
	<52A4E199.3000209@gmail.com>
Message-ID: <201312082318.43516.luke@dashjr.org>

On Sunday, December 08, 2013 9:16:09 PM Sa?vann Carignan wrote:
> > 1) Who pays for it? Most obvious answer: Foundation. However there's
> > currently a fairly clear line between the foundation website and the
> > bitcoin.org <http://bitcoin.org> website. I personally am fine with the
> > bitcoin foundation funding the website, it's a lot closer to the bitcoin
> > community than github. But some people might care. So next step would be
> > to contact the Foundation board and see if they're willing to fund it.
> 
> Actually I might find way to fund it. But I needed to have ACK &
> comments from developers before anything.
> 
> ...
> > 4) Who admins it?
> 
> Obviously, I thought it would be important that the server is owned by
> someone who can be trusted, with ssh access for all core developers.
> 
> > 5) Who controls DNS for it?
> 
> I'm not sure we'll get any change on this level. I have no idea if the
> domain is in good hands, except for the fact that nothing bad happened
> thus far. If anything, moving it to core developers (as intended when
> the domain was registered) would make more sense IMO. But again, is it
> possible, I don't know.

I don't think "core developers" should be directly in control here any more 
than the Foundation should. Developers are good for development, not 
necessarily web or server admin tasks. Only those directly involved in the 
needed roles should have access IMO.

Luke



From theymos at mm.st  Sun Dec  8 23:51:20 2013
From: theymos at mm.st (theymos)
Date: Sun, 08 Dec 2013 17:51:20 -0600
Subject: [Bitcoin-development] Dedicated server for bitcoin.org,
 your thoughts?
In-Reply-To: <CANAnSg0vwbSyYtzOpbFzaHmS2wQ2aQCibk9tg+G4VA_ESp_7ow@mail.gmail.com>
References: <52A3C8A5.7010606@gmail.com>
	<CAAS2fgT2x3iLnRiLabPT28eO6rbGuBBgi2s-Yhtgwo+3XWq7+Q@mail.gmail.com>
	<CANAnSg3GeLPyXXK5Osg1hcC7MQ=Na3BWrGCe95ab7UcbeG2Jgw@mail.gmail.com>
	<201312082101.25609.luke@dashjr.org>
	<CANAnSg0vwbSyYtzOpbFzaHmS2wQ2aQCibk9tg+G4VA_ESp_7ow@mail.gmail.com>
Message-ID: <1386546680.28932.57095933.29430EA8@webmail.messagingengine.com>

On Sun, Dec 8, 2013, at 03:11 PM, Drak wrote:

It's not just about trust, there is the robustness factor: what if he
becomes sick, unavailable, hit by a bus? Others need the ability to
pickup and run with it. The control over the domain (including ability
to renew registration, alter nameservers) needs to be with more than
one person. That's why I suggest using the same people who have control
over the software project at sf,github


The bitcoin.org domain is controlled by me, Sirius, and an anonymous
person. Control will not be lost if Sirius becomes unavailable.

SSL is probably a good idea, and it's probably also a good idea to
separate bitcoin.org from Github. I don't know that I trust Github. I'm
sure that you can find a sponsor for a dedicated server. Let us know if
DNS changes to bitcoin.org are required.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131208/576e4afb/attachment.html>

From patrick at intersango.com  Sun Dec  8 23:29:05 2013
From: patrick at intersango.com (Patrick)
Date: Sun, 08 Dec 2013 17:29:05 -0600
Subject: [Bitcoin-development] Dedicated server for bitcoin.org,
 your thoughts?
In-Reply-To: <52A4E199.3000209@gmail.com>
References: <52A3C8A5.7010606@gmail.com>	<1795f3067ba3fcdd0caf978cc59ff024.squirrel@fruiteater.riseup.net>	<52A435EA.7090405@gmail.com>
	<201312081237.24473.luke@dashjr.org>	<CANAnSg2OrmQAcZ+cZdtQeADicH3U29QOgYPfP1AQhOMP6+P1wg@mail.gmail.com>	<CAAS2fgR0khyJxmz9c2Oc87hOFgiNuiPJuaeugGajdo_EcKEW9w@mail.gmail.com>
	<CANEZrP3+AowZZS1=hAkx0KODiT-vbcRKyZaHOE2CWaJk3y5-Dw@mail.gmail.com>
	<52A4E199.3000209@gmail.com>
Message-ID: <52A500C1.60503@intersango.com>

Have you considered black lotus dedicated servers?

On 12/08/2013 03:16 PM, Sa?vann Carignan wrote:
>> Issues that would need to be resolved:
>>
>> 1) Who pays for it? Most obvious answer: Foundation. However there's
>> currently a fairly clear line between the foundation website and the
>> bitcoin.org <http://bitcoin.org> website. I personally am fine with the
>> bitcoin foundation funding the website, it's a lot closer to the bitcoin
>> community than github. But some people might care. So next step would be
>> to contact the Foundation board and see if they're willing to fund it.
> Actually I might find way to fund it. But I needed to have ACK &
> comments from developers before anything.
>
>> 2) Anti-DoS? I assume github handles this at the moment, though I doubt
>> there's anything to be gained from DoSing the informational website
> That is a fair question, we will need anti-DDoS. Unless something better
> (and affordable) can be recommended, this would yet put another Bitcoin
> website under CloudFlare.
>
>> 4) Who admins it?
> Obviously, I thought it would be important that the server is owned by
> someone who can be trusted, with ssh access for all core developers.
>
>> 5) Who controls DNS for it?
> I'm not sure we'll get any change on this level. I have no idea if the
> domain is in good hands, except for the fact that nothing bad happened
> thus far. If anything, moving it to core developers (as intended when
> the domain was registered) would make more sense IMO. But again, is it
> possible, I don't know.
>
> ------------------------------------------------------------------------------
> Sponsored by Intel(R) XDK 
> Develop, test and display web and hybrid apps with a single code base.
> Download it for free now!
> http://pubads.g.doubleclick.net/gampad/clk?id=111408631&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development




From taylor.gerring at gmail.com  Mon Dec  9 00:06:30 2013
From: taylor.gerring at gmail.com (Taylor Gerring)
Date: Sun, 8 Dec 2013 18:06:30 -0600
Subject: [Bitcoin-development] Dedicated server for bitcoin.org,
	your thoughts?
In-Reply-To: <1386546680.28932.57095933.29430EA8@webmail.messagingengine.com>
References: <52A3C8A5.7010606@gmail.com>
	<CAAS2fgT2x3iLnRiLabPT28eO6rbGuBBgi2s-Yhtgwo+3XWq7+Q@mail.gmail.com>
	<CANAnSg3GeLPyXXK5Osg1hcC7MQ=Na3BWrGCe95ab7UcbeG2Jgw@mail.gmail.com>
	<201312082101.25609.luke@dashjr.org>
	<CANAnSg0vwbSyYtzOpbFzaHmS2wQ2aQCibk9tg+G4VA_ESp_7ow@mail.gmail.com>
	<1386546680.28932.57095933.29430EA8@webmail.messagingengine.com>
Message-ID: <B44167AC-57F9-4149-BE5B-E64A0BD797A3@gmail.com>

Maybe bitcointalk.org would like to donate a few BTC from the 6,000 BTC "new forum" fund to sponsor hosting?

On Dec 8, 2013, at 5:51 PM, theymos <theymos at mm.st> wrote:

>  I'm sure that you can find a sponsor for a dedicated server. 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131208/24223e3b/attachment.html>

From saivann at gmail.com  Sun Dec  8 23:48:12 2013
From: saivann at gmail.com (=?ISO-8859-1?Q?Sa=EFvann_Carignan?=)
Date: Sun, 08 Dec 2013 18:48:12 -0500
Subject: [Bitcoin-development] Dedicated server for bitcoin.org,
 your thoughts?
In-Reply-To: <CABsx9T0ATM0BWKJQfodik6X0=xeU853rVrS2A8V2SO36GDm_gQ@mail.gmail.com>
References: <52A3C8A5.7010606@gmail.com>	<1795f3067ba3fcdd0caf978cc59ff024.squirrel@fruiteater.riseup.net>	<52A435EA.7090405@gmail.com>	<201312081237.24473.luke@dashjr.org>	<CANAnSg2OrmQAcZ+cZdtQeADicH3U29QOgYPfP1AQhOMP6+P1wg@mail.gmail.com>	<CAAS2fgR0khyJxmz9c2Oc87hOFgiNuiPJuaeugGajdo_EcKEW9w@mail.gmail.com>	<CANEZrP3+AowZZS1=hAkx0KODiT-vbcRKyZaHOE2CWaJk3y5-Dw@mail.gmail.com>	<52A4E199.3000209@gmail.com>
	<CABsx9T0ATM0BWKJQfodik6X0=xeU853rVrS2A8V2SO36GDm_gQ@mail.gmail.com>
Message-ID: <52A5053C.5050801@gmail.com>

>     > 4) Who admins it?
> 
>     Obviously, I thought it would be important that the server is owned by
>     someone who can be trusted, with ssh access for all core developers.
> 
> 
> That is a really bad idea.  If there is not a CLEAR answer to "who
> admins it", there will be a bunch of "I thought YOU were applying
> security patches... no, I thought YOU were..." the first time it gets
> hacked.
> 
> So, the question is:  who wants to take responsibility for keeping
> bitcoin.org <http://bitcoin.org> safe and secure?
> 
> I am not going to do that, I've got too many other things to worry
> about. It is exactly the type of thing the Foundation was setup to do,
> but if y'all want to create some other organization to do it, then
> please make it happen.
> 
> -- 
> --
> Gavin Andresen
> 

I fully agree that someone *must* be assigned to the task, otherwise
it's better keeping current hosting.

Perhaps that was implicit, but I can take this responsibility so long as
I can be replaced if required for any reason. On this regard, I agree
that the Foundation funding / owning / securing the server
infrastructure is a much better long term strategy.

This said, I also agree that it is a better idea to keep the domain and
website content independently owned and managed, for the reasons stated
by Gregory Maxwell.

If there isn't a good consensus on one of the two options I suggested, I
vote we don't lose more time on this question and keep focus with bigger
priorities.



From jgarzik at bitpay.com  Mon Dec  9 05:32:34 2013
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Mon, 9 Dec 2013 03:32:34 -0200
Subject: [Bitcoin-development] Dedicated server for bitcoin.org,
	your thoughts?
In-Reply-To: <CANEZrP0YyLd-zwniE-FUT4AG2Zemp2SBrwF8gskTf3LgsKfByw@mail.gmail.com>
References: <52A3C8A5.7010606@gmail.com>
	<1795f3067ba3fcdd0caf978cc59ff024.squirrel@fruiteater.riseup.net>
	<52A435EA.7090405@gmail.com> <201312081237.24473.luke@dashjr.org>
	<CANAnSg2OrmQAcZ+cZdtQeADicH3U29QOgYPfP1AQhOMP6+P1wg@mail.gmail.com>
	<CAAS2fgR0khyJxmz9c2Oc87hOFgiNuiPJuaeugGajdo_EcKEW9w@mail.gmail.com>
	<CANEZrP3+AowZZS1=hAkx0KODiT-vbcRKyZaHOE2CWaJk3y5-Dw@mail.gmail.com>
	<52A4E199.3000209@gmail.com>
	<20131208215850.GE62848@giles.gnomon.org.uk>
	<CANEZrP0YyLd-zwniE-FUT4AG2Zemp2SBrwF8gskTf3LgsKfByw@mail.gmail.com>
Message-ID: <CAJHLa0MXUXVC9vgvrC8wBU=6wwZm4A85yUBA+UguXZPCzwXMxw@mail.gmail.com>

On Sun, Dec 8, 2013 at 8:03 PM, Mike Hearn <mike at plan99.net> wrote:
> I bring this up because of the recent bitcointalk fiasco. AFAIK the domains
> are registered and controlled in the same way. It's likely that the current
> registrar isn't very secure.

I registered bitcointalk.org originally, then passed along control.
It is likely that the two domains are /not/ registered and controlled
in the same way.

The handling of bitcointalk.org was quite disappointing.  Even after
"control" passed from me to Sirius, he did not bother to change the
registrar credentials for months afterward, despite repeated urging.

-- 
Jeff Garzik
Bitcoin core developer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From gavinandresen at gmail.com  Mon Dec  9 06:14:37 2013
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Mon, 9 Dec 2013 16:14:37 +1000
Subject: [Bitcoin-development] 0.8.6 release candidate 1
In-Reply-To: <CAEz79PpUacdKTYokbdrhJr1Q1cH7KdyNjMiN38nLG2hLe+u=Cg@mail.gmail.com>
References: <CABsx9T3tMkYf=LCWdeoptxwL3LSrSTDCtQ8zNUdkNaJ4F9kY7w@mail.gmail.com>
	<CAEz79PpUacdKTYokbdrhJr1Q1cH7KdyNjMiN38nLG2hLe+u=Cg@mail.gmail.com>
Message-ID: <CABsx9T3_8dJFGAYG8T6oF6CNoAs6e9VBxkQP9M3KUON+4HUqVQ@mail.gmail.com>

On Mon, Dec 9, 2013 at 9:07 AM, Warren Togami Jr. <wtogami at gmail.com> wrote:

> I found a tiny error in 0.8.6rc1.  The leveldb subtree merge was done
> incorrectly leaving an errant db/ directory in the base of bitcoin instead
> of src/leveldb.
>

I see:
  db/autocompact_test.cc

... which I assume is a leveldb unit test file that should be in
src/leveldb/db/

Not a showstopper bug.

Given we've had hundreds of downloads and no reports of insanity, I think
we should tag v0.8.6 today (same commit as v0.8.6rc1) and ship it.

-- 
--
Gavin Andresen
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131209/830ac4b3/attachment.html>

From wtogami at gmail.com  Mon Dec  9 07:34:22 2013
From: wtogami at gmail.com (Warren Togami Jr.)
Date: Sun, 8 Dec 2013 21:34:22 -1000
Subject: [Bitcoin-development] 0.8.6 release candidate 1
In-Reply-To: <CABsx9T3_8dJFGAYG8T6oF6CNoAs6e9VBxkQP9M3KUON+4HUqVQ@mail.gmail.com>
References: <CABsx9T3tMkYf=LCWdeoptxwL3LSrSTDCtQ8zNUdkNaJ4F9kY7w@mail.gmail.com>
	<CAEz79PpUacdKTYokbdrhJr1Q1cH7KdyNjMiN38nLG2hLe+u=Cg@mail.gmail.com>
	<CABsx9T3_8dJFGAYG8T6oF6CNoAs6e9VBxkQP9M3KUON+4HUqVQ@mail.gmail.com>
Message-ID: <CAEz79Pp+s+AAnjaKTdOHRakbqeJoF2sa=j4Xk9kediLhqbTYCQ@mail.gmail.com>

Our testing of the macos leveldb parts for the past 6 days has had zero
complaints of new corruption from OMG and LTC users.  I agree it is time to
release 0.8.6.


On Sun, Dec 8, 2013 at 8:14 PM, Gavin Andresen <gavinandresen at gmail.com>wrote:

> On Mon, Dec 9, 2013 at 9:07 AM, Warren Togami Jr. <wtogami at gmail.com>wrote:
>
>> I found a tiny error in 0.8.6rc1.  The leveldb subtree merge was done
>> incorrectly leaving an errant db/ directory in the base of bitcoin instead
>> of src/leveldb.
>>
>
> I see:
>   db/autocompact_test.cc
>
> ... which I assume is a leveldb unit test file that should be in
> src/leveldb/db/
>
> Not a showstopper bug.
>
> Given we've had hundreds of downloads and no reports of insanity, I think
> we should tag v0.8.6 today (same commit as v0.8.6rc1) and ship it.
>
> --
> --
> Gavin Andresen
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131208/3d50bab6/attachment.html>

From jeremy at taplink.co  Mon Dec  9 06:29:25 2013
From: jeremy at taplink.co (Jeremy Spilman)
Date: Sun, 08 Dec 2013 22:29:25 -0800
Subject: [Bitcoin-development] Dedicated server for bitcoin.org,
	your thoughts?
In-Reply-To: <1386546680.28932.57095933.29430EA8@webmail.messagingengine.com>
References: <52A3C8A5.7010606@gmail.com>
	<CAAS2fgT2x3iLnRiLabPT28eO6rbGuBBgi2s-Yhtgwo+3XWq7+Q@mail.gmail.com>
	<CANAnSg3GeLPyXXK5Osg1hcC7MQ=Na3BWrGCe95ab7UcbeG2Jgw@mail.gmail.com>
	<201312082101.25609.luke@dashjr.org>
	<CANAnSg0vwbSyYtzOpbFzaHmS2wQ2aQCibk9tg+G4VA_ESp_7ow@mail.gmail.com>
	<1386546680.28932.57095933.29430EA8@webmail.messagingengine.com>
Message-ID: <op.w7tazbhdyldrnw@laptop-air.hsd1.ca.comcast.net>

I can provide the server hardware and colocation (space, power, and  
bandwidth) if dedicated 50Mbit in 55 S. Market, San Jose, CA data center  
is acceptable.

If it needs more bandwidth than that, in a few months I hope to be getting  
space in LA with 1Gbit, but I can't commit to that now.


> On Sun, Dec 8, 2013, at 03:11 PM, Drak wrote:
>> It's not just about trust, there is the robustness factor: what if he  
>> becomes sick, unavailable, hit by a bus? Others need the ability to  
>> >>pickup and run with it. The control over the domain (including  
>> ability to renew registration, alter nameservers) needs to be with more  
>> than >>one person. That's why I suggest using the same people who have  
>> control over the software project at sf,github
>The bitcoin.org domain is controlled by me, Sirius, and an anonymous  
> person. Control will not be lost if Sirius becomes unavailable.
>SSL is probably a good idea, and it's probably also a good idea to  
> separate bitcoin.org from Github. I don't know that I trust Github. I'm  
> sure that you can >find a sponsor for a dedicated server. Let us know if  
> DNS changes to bitcoin.org are required.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131208/d012ed80/attachment.html>

From roy at gnomon.org.uk  Mon Dec  9 10:54:36 2013
From: roy at gnomon.org.uk (Roy Badami)
Date: Mon, 9 Dec 2013 10:54:36 +0000
Subject: [Bitcoin-development] Dedicated server for bitcoin.org,
 your thoughts?
In-Reply-To: <1386546680.28932.57095933.29430EA8@webmail.messagingengine.com>
References: <52A3C8A5.7010606@gmail.com>
	<CAAS2fgT2x3iLnRiLabPT28eO6rbGuBBgi2s-Yhtgwo+3XWq7+Q@mail.gmail.com>
	<CANAnSg3GeLPyXXK5Osg1hcC7MQ=Na3BWrGCe95ab7UcbeG2Jgw@mail.gmail.com>
	<201312082101.25609.luke@dashjr.org>
	<CANAnSg0vwbSyYtzOpbFzaHmS2wQ2aQCibk9tg+G4VA_ESp_7ow@mail.gmail.com>
	<1386546680.28932.57095933.29430EA8@webmail.messagingengine.com>
Message-ID: <20131209105435.GG62848@giles.gnomon.org.uk>

> The bitcoin.org domain is controlled by me, Sirius, and an anonymous
> person. Control will not be lost if Sirius becomes unavailable.

I know this will be a controversial viewpoint in some quarters, but
I'm not a fan of anonymity, or of pseudonyms.  As far as I know
(please correct me if I'm wrong) all the core devs go by their real
names with the exception of Satoshi (and I would hope he no longer has
commit access? - only because I would hope that no-one has
pseudonymous commit access these days).  I don't see why this should
be different for the domain, the DNS and the rest of the
infrastructure...

Although that's separate from the question of who the registrant of
the domain should be (the registrant being the closest thing a domain
has to a recorded legal owner).  Who currently purports to be the
current legal owner of the domain?

IMHO the registrant should obviously be real and not WhoisGuard -
anonymous stuff like this always looks shady.  And surely the Bitcoin
Foundation is the obvious candidate to own the domain (just like
kernel.org is owned by the Linux Foundation).  But this may all be
moot unless the current legal owners are willing to assign the
domain...

roy




From drak at zikula.org  Mon Dec  9 13:39:51 2013
From: drak at zikula.org (Drak)
Date: Mon, 9 Dec 2013 13:39:51 +0000
Subject: [Bitcoin-development] 0.8.6 release candidate 1
In-Reply-To: <CAEz79Pp+s+AAnjaKTdOHRakbqeJoF2sa=j4Xk9kediLhqbTYCQ@mail.gmail.com>
References: <CABsx9T3tMkYf=LCWdeoptxwL3LSrSTDCtQ8zNUdkNaJ4F9kY7w@mail.gmail.com>
	<CAEz79PpUacdKTYokbdrhJr1Q1cH7KdyNjMiN38nLG2hLe+u=Cg@mail.gmail.com>
	<CABsx9T3_8dJFGAYG8T6oF6CNoAs6e9VBxkQP9M3KUON+4HUqVQ@mail.gmail.com>
	<CAEz79Pp+s+AAnjaKTdOHRakbqeJoF2sa=j4Xk9kediLhqbTYCQ@mail.gmail.com>
Message-ID: <CANAnSg3GD8MgykRW3a2CY2r04OKPm43Ss1UTZW+xnxEP+GtpzA@mail.gmail.com>

Someone needs to update the bitcoin.org website, it still points downloads
to 0.8.5
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131209/6891ac5b/attachment.html>

From roy at gnomon.org.uk  Mon Dec  9 13:52:44 2013
From: roy at gnomon.org.uk (Roy Badami)
Date: Mon, 9 Dec 2013 13:52:44 +0000
Subject: [Bitcoin-development] 0.8.6 release candidate 1
In-Reply-To: <CANAnSg3GD8MgykRW3a2CY2r04OKPm43Ss1UTZW+xnxEP+GtpzA@mail.gmail.com>
References: <CABsx9T3tMkYf=LCWdeoptxwL3LSrSTDCtQ8zNUdkNaJ4F9kY7w@mail.gmail.com>
	<CAEz79PpUacdKTYokbdrhJr1Q1cH7KdyNjMiN38nLG2hLe+u=Cg@mail.gmail.com>
	<CABsx9T3_8dJFGAYG8T6oF6CNoAs6e9VBxkQP9M3KUON+4HUqVQ@mail.gmail.com>
	<CAEz79Pp+s+AAnjaKTdOHRakbqeJoF2sa=j4Xk9kediLhqbTYCQ@mail.gmail.com>
	<CANAnSg3GD8MgykRW3a2CY2r04OKPm43Ss1UTZW+xnxEP+GtpzA@mail.gmail.com>
Message-ID: <20131209135244.GK62848@giles.gnomon.org.uk>


On Mon, Dec 09, 2013 at 01:39:51PM +0000, Drak wrote:
> Someone needs to update the bitcoin.org website, it still points downloads
> to 0.8.5

Perhaps because 0.8.6 hasn't been released yet?  Or did I miss the
announcement?  I think it makes sense that release candidates are not
promoted on bitcoin.org.

> ------------------------------------------------------------------------------
> Sponsored by Intel(R) XDK 
> Develop, test and display web and hybrid apps with a single code base.
> Download it for free now!
> http://pubads.g.doubleclick.net/gampad/clk?id=111408631&iu=/4140/ostg.clktrk

> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development




From drak at zikula.org  Mon Dec  9 14:55:02 2013
From: drak at zikula.org (Drak)
Date: Mon, 9 Dec 2013 14:55:02 +0000
Subject: [Bitcoin-development] 0.8.6 release candidate 1
In-Reply-To: <20131209135244.GK62848@giles.gnomon.org.uk>
References: <CABsx9T3tMkYf=LCWdeoptxwL3LSrSTDCtQ8zNUdkNaJ4F9kY7w@mail.gmail.com>
	<CAEz79PpUacdKTYokbdrhJr1Q1cH7KdyNjMiN38nLG2hLe+u=Cg@mail.gmail.com>
	<CABsx9T3_8dJFGAYG8T6oF6CNoAs6e9VBxkQP9M3KUON+4HUqVQ@mail.gmail.com>
	<CAEz79Pp+s+AAnjaKTdOHRakbqeJoF2sa=j4Xk9kediLhqbTYCQ@mail.gmail.com>
	<CANAnSg3GD8MgykRW3a2CY2r04OKPm43Ss1UTZW+xnxEP+GtpzA@mail.gmail.com>
	<20131209135244.GK62848@giles.gnomon.org.uk>
Message-ID: <CANAnSg2htxzNE9Z05XS8q3Uzwyt27uc0LDoPCiNWBsQYMCY=yw@mail.gmail.com>

On 9 December 2013 13:52, Roy Badami <roy at gnomon.org.uk> wrote:
>
>  On Mon, Dec 09, 2013 at 01:39:51PM +0000, Drak wrote:
> > Someone needs to update the bitcoin.org website, it still points
> downloads
> > to 0.8.5
>
> Perhaps because 0.8.6 hasn't been released yet?  Or did I miss the
> announcement?  I think it makes sense that release candidates are not
> promoted on bitcoin.org.


It was released and it's all over bitcointalk/reddit
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131209/3926b3fb/attachment.html>

From gmaxwell at gmail.com  Mon Dec  9 15:07:35 2013
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Mon, 9 Dec 2013 07:07:35 -0800
Subject: [Bitcoin-development] 0.8.6 release candidate 1
In-Reply-To: <CANAnSg2htxzNE9Z05XS8q3Uzwyt27uc0LDoPCiNWBsQYMCY=yw@mail.gmail.com>
References: <CABsx9T3tMkYf=LCWdeoptxwL3LSrSTDCtQ8zNUdkNaJ4F9kY7w@mail.gmail.com>
	<CAEz79PpUacdKTYokbdrhJr1Q1cH7KdyNjMiN38nLG2hLe+u=Cg@mail.gmail.com>
	<CABsx9T3_8dJFGAYG8T6oF6CNoAs6e9VBxkQP9M3KUON+4HUqVQ@mail.gmail.com>
	<CAEz79Pp+s+AAnjaKTdOHRakbqeJoF2sa=j4Xk9kediLhqbTYCQ@mail.gmail.com>
	<CANAnSg3GD8MgykRW3a2CY2r04OKPm43Ss1UTZW+xnxEP+GtpzA@mail.gmail.com>
	<20131209135244.GK62848@giles.gnomon.org.uk>
	<CANAnSg2htxzNE9Z05XS8q3Uzwyt27uc0LDoPCiNWBsQYMCY=yw@mail.gmail.com>
Message-ID: <CAAS2fgQCP+8-_pc00pHPDY_6-BO2gYKQ1nqnwwt_FUkZ0vNKfQ@mail.gmail.com>

On Mon, Dec 9, 2013 at 6:55 AM, Drak <drak at zikula.org> wrote:
> It was released and it's all over bitcointalk/reddit

It has not been released. It's queued for announcement. We were
waiting for another independant gitian build before sending out the
announcement.



From drak at zikula.org  Mon Dec  9 15:19:05 2013
From: drak at zikula.org (Drak)
Date: Mon, 9 Dec 2013 15:19:05 +0000
Subject: [Bitcoin-development] 0.8.6 release candidate 1
In-Reply-To: <CAAS2fgQCP+8-_pc00pHPDY_6-BO2gYKQ1nqnwwt_FUkZ0vNKfQ@mail.gmail.com>
References: <CABsx9T3tMkYf=LCWdeoptxwL3LSrSTDCtQ8zNUdkNaJ4F9kY7w@mail.gmail.com>
	<CAEz79PpUacdKTYokbdrhJr1Q1cH7KdyNjMiN38nLG2hLe+u=Cg@mail.gmail.com>
	<CABsx9T3_8dJFGAYG8T6oF6CNoAs6e9VBxkQP9M3KUON+4HUqVQ@mail.gmail.com>
	<CAEz79Pp+s+AAnjaKTdOHRakbqeJoF2sa=j4Xk9kediLhqbTYCQ@mail.gmail.com>
	<CANAnSg3GD8MgykRW3a2CY2r04OKPm43Ss1UTZW+xnxEP+GtpzA@mail.gmail.com>
	<20131209135244.GK62848@giles.gnomon.org.uk>
	<CANAnSg2htxzNE9Z05XS8q3Uzwyt27uc0LDoPCiNWBsQYMCY=yw@mail.gmail.com>
	<CAAS2fgQCP+8-_pc00pHPDY_6-BO2gYKQ1nqnwwt_FUkZ0vNKfQ@mail.gmail.com>
Message-ID: <CANAnSg35RESWnodi01F0qyBY4RQm9TSmkKfp-6cWn2o36iRE5Q@mail.gmail.com>

On 9 December 2013 15:07, Gregory Maxwell <gmaxwell at gmail.com> wrote:

> On Mon, Dec 9, 2013 at 6:55 AM, Drak <drak at zikula.org> wrote:
> > It was released and it's all over bitcointalk/reddit
>
> It has not been released. It's queued for announcement. We were
> waiting for another independant gitian build before sending out the
> announcement.
>

Why would it be made available for download at sourceforge.net if it's not
actually released? The files are available here:
http://sourceforge.net/projects/bitcoin/files/Bitcoin/bitcoin-0.8.6/ and
people watch the sf rss feeds etc...
Seems to me like there needs to be a better release workflow. As far as the
world is concerned, they are downloading the 0.8.6 and there is a lot of
community buzz about it already.
IMO, to avoid that, no files should be placed online unless they are the
official release.

Drak
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131209/507c1713/attachment.html>

From gmaxwell at gmail.com  Mon Dec  9 15:25:25 2013
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Mon, 9 Dec 2013 07:25:25 -0800
Subject: [Bitcoin-development] 0.8.6 release candidate 1
In-Reply-To: <CANAnSg35RESWnodi01F0qyBY4RQm9TSmkKfp-6cWn2o36iRE5Q@mail.gmail.com>
References: <CABsx9T3tMkYf=LCWdeoptxwL3LSrSTDCtQ8zNUdkNaJ4F9kY7w@mail.gmail.com>
	<CAEz79PpUacdKTYokbdrhJr1Q1cH7KdyNjMiN38nLG2hLe+u=Cg@mail.gmail.com>
	<CABsx9T3_8dJFGAYG8T6oF6CNoAs6e9VBxkQP9M3KUON+4HUqVQ@mail.gmail.com>
	<CAEz79Pp+s+AAnjaKTdOHRakbqeJoF2sa=j4Xk9kediLhqbTYCQ@mail.gmail.com>
	<CANAnSg3GD8MgykRW3a2CY2r04OKPm43Ss1UTZW+xnxEP+GtpzA@mail.gmail.com>
	<20131209135244.GK62848@giles.gnomon.org.uk>
	<CANAnSg2htxzNE9Z05XS8q3Uzwyt27uc0LDoPCiNWBsQYMCY=yw@mail.gmail.com>
	<CAAS2fgQCP+8-_pc00pHPDY_6-BO2gYKQ1nqnwwt_FUkZ0vNKfQ@mail.gmail.com>
	<CANAnSg35RESWnodi01F0qyBY4RQm9TSmkKfp-6cWn2o36iRE5Q@mail.gmail.com>
Message-ID: <CAAS2fgSL9ptEmW-zkHm-Yzfm3FCNNMtXMc54Epj76DuuyNFS7w@mail.gmail.com>

On Mon, Dec 9, 2013 at 7:19 AM, Drak <drak at zikula.org> wrote:
> Why would it be made available for download at sourceforge.net if it's not
> actually released? The files are available here:

Because it takes time to put the files up, propagate to mirrors, check
by multiple people that the downloads work an the signatures pass.

Every release comes with a release announcement, you'll know its out
when you see the release announcement.

The alternative is that announcements go out and the files are not
correct, or hide the files in the release pipeline and allow less
public participation in the release workflow. I think that would be
unfortunate.



From laanwj at gmail.com  Mon Dec  9 15:35:54 2013
From: laanwj at gmail.com (Wladimir)
Date: Mon, 9 Dec 2013 16:35:54 +0100
Subject: [Bitcoin-development] 0.8.6 release candidate 1
In-Reply-To: <CANAnSg35RESWnodi01F0qyBY4RQm9TSmkKfp-6cWn2o36iRE5Q@mail.gmail.com>
References: <CABsx9T3tMkYf=LCWdeoptxwL3LSrSTDCtQ8zNUdkNaJ4F9kY7w@mail.gmail.com>
	<CAEz79PpUacdKTYokbdrhJr1Q1cH7KdyNjMiN38nLG2hLe+u=Cg@mail.gmail.com>
	<CABsx9T3_8dJFGAYG8T6oF6CNoAs6e9VBxkQP9M3KUON+4HUqVQ@mail.gmail.com>
	<CAEz79Pp+s+AAnjaKTdOHRakbqeJoF2sa=j4Xk9kediLhqbTYCQ@mail.gmail.com>
	<CANAnSg3GD8MgykRW3a2CY2r04OKPm43Ss1UTZW+xnxEP+GtpzA@mail.gmail.com>
	<20131209135244.GK62848@giles.gnomon.org.uk>
	<CANAnSg2htxzNE9Z05XS8q3Uzwyt27uc0LDoPCiNWBsQYMCY=yw@mail.gmail.com>
	<CAAS2fgQCP+8-_pc00pHPDY_6-BO2gYKQ1nqnwwt_FUkZ0vNKfQ@mail.gmail.com>
	<CANAnSg35RESWnodi01F0qyBY4RQm9TSmkKfp-6cWn2o36iRE5Q@mail.gmail.com>
Message-ID: <CA+s+GJDMSvpY_0p05RfEh=P_uuLPGFezBiNY+e7aktbUt8-oyQ@mail.gmail.com>

On Mon, Dec 9, 2013 at 4:19 PM, Drak <drak at zikula.org> wrote:

>
> IMO, to avoid that, no files should be placed online unless they are the
> official release.
>

They *are* the official release as soon as they're uploaded. We may wait
for some extra gitian builds to be more confident and make the announcement
on the forums and such, but the downloads themselves don't change anymore.

It really doesn't matter in what order the different places are updated, as
long as the news is propagated everywhere within a reasonable time-span of
say a day. Requiring a certain order would require unnecessary coordination.

Don't make problems where they don't exist, we have enough actual issues.

Wladimir
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131209/f8a18b88/attachment.html>

From drak at zikula.org  Mon Dec  9 15:42:43 2013
From: drak at zikula.org (Drak)
Date: Mon, 9 Dec 2013 15:42:43 +0000
Subject: [Bitcoin-development] 0.8.6 release candidate 1
In-Reply-To: <CA+s+GJDMSvpY_0p05RfEh=P_uuLPGFezBiNY+e7aktbUt8-oyQ@mail.gmail.com>
References: <CABsx9T3tMkYf=LCWdeoptxwL3LSrSTDCtQ8zNUdkNaJ4F9kY7w@mail.gmail.com>
	<CAEz79PpUacdKTYokbdrhJr1Q1cH7KdyNjMiN38nLG2hLe+u=Cg@mail.gmail.com>
	<CABsx9T3_8dJFGAYG8T6oF6CNoAs6e9VBxkQP9M3KUON+4HUqVQ@mail.gmail.com>
	<CAEz79Pp+s+AAnjaKTdOHRakbqeJoF2sa=j4Xk9kediLhqbTYCQ@mail.gmail.com>
	<CANAnSg3GD8MgykRW3a2CY2r04OKPm43Ss1UTZW+xnxEP+GtpzA@mail.gmail.com>
	<20131209135244.GK62848@giles.gnomon.org.uk>
	<CANAnSg2htxzNE9Z05XS8q3Uzwyt27uc0LDoPCiNWBsQYMCY=yw@mail.gmail.com>
	<CAAS2fgQCP+8-_pc00pHPDY_6-BO2gYKQ1nqnwwt_FUkZ0vNKfQ@mail.gmail.com>
	<CANAnSg35RESWnodi01F0qyBY4RQm9TSmkKfp-6cWn2o36iRE5Q@mail.gmail.com>
	<CA+s+GJDMSvpY_0p05RfEh=P_uuLPGFezBiNY+e7aktbUt8-oyQ@mail.gmail.com>
Message-ID: <CANAnSg1bmox9rAETgVVsyD8kVyvpiZ9vxddSEaR0i5a8c9riBw@mail.gmail.com>

On 9 December 2013 15:35, Wladimir <laanwj at gmail.com> wrote:
>
> On Mon, Dec 9, 2013 at 4:19 PM, Drak <drak at zikula.org> wrote:
>
>>
>> IMO, to avoid that, no files should be placed online unless they are the
>> official release.
>>
>
> They *are* the official release as soon as they're uploaded. We may wait
> for some extra gitian builds to be more confident and make the announcement
> on the forums and such, but the downloads themselves don't change anymore.
>

That is exactly the point and the moment they are publicly available you
cannot stop people talking about it or noticing it, or posting official
looking sticky posts at bitcointalk like this one:
https://bitcointalk.org/index.php?topic=364353.0. Was that an official
announcement?

Drak
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131209/9be62b4a/attachment.html>

From laanwj at gmail.com  Mon Dec  9 15:44:23 2013
From: laanwj at gmail.com (Wladimir)
Date: Mon, 9 Dec 2013 16:44:23 +0100
Subject: [Bitcoin-development] 0.8.6 release candidate 1
In-Reply-To: <CANAnSg1bmox9rAETgVVsyD8kVyvpiZ9vxddSEaR0i5a8c9riBw@mail.gmail.com>
References: <CABsx9T3tMkYf=LCWdeoptxwL3LSrSTDCtQ8zNUdkNaJ4F9kY7w@mail.gmail.com>
	<CAEz79PpUacdKTYokbdrhJr1Q1cH7KdyNjMiN38nLG2hLe+u=Cg@mail.gmail.com>
	<CABsx9T3_8dJFGAYG8T6oF6CNoAs6e9VBxkQP9M3KUON+4HUqVQ@mail.gmail.com>
	<CAEz79Pp+s+AAnjaKTdOHRakbqeJoF2sa=j4Xk9kediLhqbTYCQ@mail.gmail.com>
	<CANAnSg3GD8MgykRW3a2CY2r04OKPm43Ss1UTZW+xnxEP+GtpzA@mail.gmail.com>
	<20131209135244.GK62848@giles.gnomon.org.uk>
	<CANAnSg2htxzNE9Z05XS8q3Uzwyt27uc0LDoPCiNWBsQYMCY=yw@mail.gmail.com>
	<CAAS2fgQCP+8-_pc00pHPDY_6-BO2gYKQ1nqnwwt_FUkZ0vNKfQ@mail.gmail.com>
	<CANAnSg35RESWnodi01F0qyBY4RQm9TSmkKfp-6cWn2o36iRE5Q@mail.gmail.com>
	<CA+s+GJDMSvpY_0p05RfEh=P_uuLPGFezBiNY+e7aktbUt8-oyQ@mail.gmail.com>
	<CANAnSg1bmox9rAETgVVsyD8kVyvpiZ9vxddSEaR0i5a8c9riBw@mail.gmail.com>
Message-ID: <CA+s+GJCNoNy5mh5S-_M7fKNanRRXWR8z_A4trjsn4Sp4ZtUxiQ@mail.gmail.com>

On Mon, Dec 9, 2013 at 4:42 PM, Drak <drak at zikula.org> wrote:

> actly the point and the moment they are publicly available you cannot stop
> people talking about it or noticing it, or posting official looking sticky
> posts at bitcointalk like this one:
> https://bitcointalk.org/index.php?topic=364353.0. Was that an official
> announcement?
>

Yes, it is.

Wladimir
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131209/be98fed3/attachment.html>

From jgarzik at bitpay.com  Mon Dec  9 19:06:50 2013
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Mon, 9 Dec 2013 17:06:50 -0200
Subject: [Bitcoin-development] 0.8.6 release candidate 1
In-Reply-To: <CANAnSg1bmox9rAETgVVsyD8kVyvpiZ9vxddSEaR0i5a8c9riBw@mail.gmail.com>
References: <CABsx9T3tMkYf=LCWdeoptxwL3LSrSTDCtQ8zNUdkNaJ4F9kY7w@mail.gmail.com>
	<CAEz79PpUacdKTYokbdrhJr1Q1cH7KdyNjMiN38nLG2hLe+u=Cg@mail.gmail.com>
	<CABsx9T3_8dJFGAYG8T6oF6CNoAs6e9VBxkQP9M3KUON+4HUqVQ@mail.gmail.com>
	<CAEz79Pp+s+AAnjaKTdOHRakbqeJoF2sa=j4Xk9kediLhqbTYCQ@mail.gmail.com>
	<CANAnSg3GD8MgykRW3a2CY2r04OKPm43Ss1UTZW+xnxEP+GtpzA@mail.gmail.com>
	<20131209135244.GK62848@giles.gnomon.org.uk>
	<CANAnSg2htxzNE9Z05XS8q3Uzwyt27uc0LDoPCiNWBsQYMCY=yw@mail.gmail.com>
	<CAAS2fgQCP+8-_pc00pHPDY_6-BO2gYKQ1nqnwwt_FUkZ0vNKfQ@mail.gmail.com>
	<CANAnSg35RESWnodi01F0qyBY4RQm9TSmkKfp-6cWn2o36iRE5Q@mail.gmail.com>
	<CA+s+GJDMSvpY_0p05RfEh=P_uuLPGFezBiNY+e7aktbUt8-oyQ@mail.gmail.com>
	<CANAnSg1bmox9rAETgVVsyD8kVyvpiZ9vxddSEaR0i5a8c9riBw@mail.gmail.com>
Message-ID: <CAJHLa0MVt9Op73DTns1q3fueRUwX-8HgDuE57bnX8rW60F4oHA@mail.gmail.com>

On Mon, Dec 9, 2013 at 12:42 PM, Drak <drak at zikula.org> wrote:
> looking sticky posts at bitcointalk like this one:
> https://bitcointalk.org/index.php?topic=364353.0. Was that an official
> announcement?

Yes.

-- 
Jeff Garzik
Bitcoin core developer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From harald.hoyer at gmail.com  Mon Dec  9 21:05:40 2013
From: harald.hoyer at gmail.com (Harald Hoyer)
Date: Mon, 09 Dec 2013 22:05:40 +0100
Subject: [Bitcoin-development] [Patch] bitcoin for Fedora >= 20
Message-ID: <52A630A4.7080903@gmail.com>

Interesting post: https://bitcointalk.org/index.php?topic=364877.0

Would be worth a try :-)

I'd like to see bitcoin running on Fedora >= 20 out of the box.



From ryan.jc.pc at gmail.com  Mon Dec  9 22:01:07 2013
From: ryan.jc.pc at gmail.com (Ryan Carboni)
Date: Mon, 9 Dec 2013 14:01:07 -0800
Subject: [Bitcoin-development] Monetary Authority for Bitcoin
Message-ID: <CAO7N=i1p=7fGgzJXvctRoGTsztP6f9rqs78s9=Vnc3TC0RVLdA@mail.gmail.com>

This is no doubt probably a very controversial Bitcoin Improvement Proposal
and is also a very rough draft of one.

Bitcoin lacks a Central Bank. This is good and bad. A central bank benefits
those with political connections. But Bitcoin lacks price stability, this
generates menu costs, and incentivizes speculation. I propose the creation
of a monetary authority for Bitcoin that sets block reward to a new
mathematical formula.

The velocity of the Bitcoins that are in circulation likely approaches
100,000x per year as compared to 1x - 4x for the USD. This in itself is not
bad. But given that only 10% to 20% of Bitcoins are circulating, this means
that the price of Bitcoin is decided largely through speculation. In fact
the price of a Bitcoin is irrelevant to those who use Bitcoins as a
currency because it appears the majority of coins being used are
immediately being sold and repurchased in the exchanges for the sole
purpose of buying goods.

Unless Bitcoins can be used to purchase intermediate goods and have a
closed economic ecosystem, Bitcoin will be too vulnerable to speculation
and would not be a viable currency. But the development of a closed
economic ecosystem is stymied by the uncertainty of Bitcoin prices and
speculation.

Fortunately the infrastructure for transacting Bitcoin has long been
established, with many major exchanges. Nearly all major exchanges announce
recent prices. At the point when a block is generated, the miner will also
add the exchange price of bitcoin between various other currencies and
crypto-currencies to the blockchain. The exchanges that are kept track of
could be hard coded into Bitcoin or the miner could choose, how this works
is not something I'm personally focused on.

With every new block, the miner will compare the cumulative percentage
change in the exchange price of Bitcoin over the previous 432 blocks. The
standard deviation of the percentage change in exchange rates will be
calculated. Outliers will be excluded, this is so that in case x-currency
suffers from hyperinflation, the x-currency will be ignored. It is
extremely unlikely for all the world?s currencies to be suffering from
hyperinflation caused by monetary expansion as opposed to a supply shock.

Every 432 blocks the block reward will be reevaluated. For every 5%
increase in the geometric mean of Bitcoin exchange rates in relation to the
world?s currencies would increase the block reward by 3%. A 5% decrease in
the geometric mean of Bitcoin exchange rates will decrease the block reward
by 3%. Changes in the exchange rates of less than 5% will not alter the
block reward.

The minimum block reward will be one Bitcoin.



Why is this better then the current system? Very simple, we are still
dependent on banks. Currently Bitcoin is poised to replace Visa and Paypal,
not the Federal Reserve. Bitcoin will be less efficient then Visa and
Paypal because it takes times to transfer money out of exchanges to one's
bank account and vice versa. In order for Bitcoin to replace the US dollar,
it needs to not be a more complex version of a debit card. It needs to have
a closed economic ecosystem, where all transactions are done in Bitcoin
(Consumer > Merchant > Wholesaler > Factory), and the only people who use
the exchanges are merchants who need to and those who wish to gamble on
Bitcoin.

In order for Bitcoin to have widespread acceptance, it needs price
stability. My proposal won't peg the Bitcoin to any one currency, but it
would reduce month to month variability in relation to a basket of
currencies and discourage views that it's speculative.

Look at the current system, it's not healthy and it's not a currency.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131209/07587a31/attachment.html>

From gavinandresen at gmail.com  Mon Dec  9 22:06:23 2013
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Tue, 10 Dec 2013 08:06:23 +1000
Subject: [Bitcoin-development] Monetary Authority for Bitcoin
In-Reply-To: <CAO7N=i1p=7fGgzJXvctRoGTsztP6f9rqs78s9=Vnc3TC0RVLdA@mail.gmail.com>
References: <CAO7N=i1p=7fGgzJXvctRoGTsztP6f9rqs78s9=Vnc3TC0RVLdA@mail.gmail.com>
Message-ID: <CABsx9T3ikXBroxvJ6F6Y+1ZpevLhSJcHJd8v5uU6AR2THmtMZA@mail.gmail.com>

On Tue, Dec 10, 2013 at 8:01 AM, Ryan Carboni <ryan.jc.pc at gmail.com> wrote:

> The exchanges that are kept track of could be hard coded into Bitcoin or
> the miner could choose, how this works is not something I'm personally
> focused on.
>
>
That is like saying "We need a way to travel around the world quickly.
There will be an anti-gravity technology; how this works is not something
I'm personally focused on."

Or, in other words, you are ignoring exactly the sticky, difficult problem
that would have to be solved for your proposal to have any chance of
working.

-- 
--
Gavin Andresen
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131210/41833cf5/attachment.html>

From ryan.jc.pc at gmail.com  Mon Dec  9 22:23:35 2013
From: ryan.jc.pc at gmail.com (Ryan Carboni)
Date: Mon, 9 Dec 2013 14:23:35 -0800
Subject: [Bitcoin-development] Monetary Authority for Bitcoin
In-Reply-To: <20131209221130.GA22556@shavo.dd-wrt>
References: <CAO7N=i1p=7fGgzJXvctRoGTsztP6f9rqs78s9=Vnc3TC0RVLdA@mail.gmail.com>
	<20131209221130.GA22556@shavo.dd-wrt>
Message-ID: <CAO7N=i0Y=sKXa=djc+8652e_0NiWLyMA9hrXyddaS+gOTu0yxQ@mail.gmail.com>

It is not a violation of the trust of those holding the currency. Many
people bought Bitcoin in the hopes that it's value in the relation of other
currencies will increase, not because there's a fixed money supply. The
majority of people using Bitcoin as a currency in exchange for real goods
are using the exchanges.

 My proposal will still allow for 4.9% semi-weekly variations in the price
of Bitcoin, allowing for it to appreciate 11,800% per year.


On Mon, Dec 9, 2013 at 2:11 PM, Andrew Poelstra <asp11 at sfu.ca> wrote:

> On Mon, Dec 09, 2013 at 02:01:07PM -0800, Ryan Carboni wrote:
> > This is no doubt probably a very controversial Bitcoin Improvement
> Proposal
> > and is also a very rough draft of one.
> >
>
> Ryan, you can stop there already because any change to the inflation
> formula (supposing such a thing is even possible, which it's not)
> would be a violation of the trust of those holding the currency, who
> obtained it while believing that its inflation algorithm would not
> change.
>
> --
> Andrew Poelstra
> Email: apoelstra at wpsoftware.net
> Web:   http://www.wpsoftware.net/andrew
>
> "If they had taught a class on how to be the kind of citizen Dick Cheney
>  worries about, I would have finished high school."   --Edward Snowden
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131209/21ef75ca/attachment.html>

From jgarzik at bitpay.com  Mon Dec  9 23:10:36 2013
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Mon, 9 Dec 2013 21:10:36 -0200
Subject: [Bitcoin-development] Monetary Authority for Bitcoin
In-Reply-To: <CAO7N=i0Y=sKXa=djc+8652e_0NiWLyMA9hrXyddaS+gOTu0yxQ@mail.gmail.com>
References: <CAO7N=i1p=7fGgzJXvctRoGTsztP6f9rqs78s9=Vnc3TC0RVLdA@mail.gmail.com>
	<20131209221130.GA22556@shavo.dd-wrt>
	<CAO7N=i0Y=sKXa=djc+8652e_0NiWLyMA9hrXyddaS+gOTu0yxQ@mail.gmail.com>
Message-ID: <CAJHLa0MXzQoSso+ZdXsNf7nzBe=6tCsq0CNrbF6waFxV2moWiQ@mail.gmail.com>

On Mon, Dec 9, 2013 at 7:23 PM, Ryan Carboni <ryan.jc.pc at gmail.com> wrote:
> It is not a violation of the trust of those holding the currency. Many
> people bought Bitcoin in the hopes that it's value in the relation of other
> currencies will increase, not because there's a fixed money supply. The
> majority of people using Bitcoin as a currency in exchange for real goods
> are using the exchanges.

Your proposal has been met with widespread laughter.  Were I not ill
with the flu, mockery would ensue as well.

-- 
Jeff Garzik
Bitcoin core developer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From mcaldwell at swipeclock.com  Mon Dec  9 22:57:26 2013
From: mcaldwell at swipeclock.com (Mike Caldwell)
Date: Mon, 9 Dec 2013 17:57:26 -0500
Subject: [Bitcoin-development] Monetary Authority for Bitcoin
In-Reply-To: <CAO7N=i0Y=sKXa=djc+8652e_0NiWLyMA9hrXyddaS+gOTu0yxQ@mail.gmail.com>
References: <CAO7N=i1p=7fGgzJXvctRoGTsztP6f9rqs78s9=Vnc3TC0RVLdA@mail.gmail.com>
	<20131209221130.GA22556@shavo.dd-wrt>
	<CAO7N=i0Y=sKXa=djc+8652e_0NiWLyMA9hrXyddaS+gOTu0yxQ@mail.gmail.com>
Message-ID: <B09A5DE3EF411243BB3328232CD25A5DABFF021E7A@MAILR023.mail.lan>

For what it's worth, once upon a time I pushed this agenda on Bitcointalk.  I'd say early 2011 or so.  The response I got was so strong and unanimous in favor of this point being absolutely non-negotiable that if the money supply were anything other than fixed, Bitcoin may as well be pretend e-dollars.  I was not just persuaded against it, I was put in my place.

I believe that if there ever becomes a consensus that Bitcoin's inflation parameters were a show-stopper for the Bitcoin economy, that the power to correct it lies with merchants, who would vote for changing the rules.  I believe they would do this not by changing Bitcoin, but by accepting, in parallel, a brand new alt coin that reflects the consensus as to how the inflation should be.  I believe such an alt coin would have its genesis at around the time that consensus moved toward accepting inflation, rather than adopting the seignorage of some other alt coin out there today.

Mike/Casascius


From: Ryan Carboni [mailto:ryan.jc.pc at gmail.com]
Sent: Monday, December 09, 2013 3:24 PM
To: apoelstra at wpsoftware.net
Cc: bitcoin-development at lists.sourceforge.net
Subject: Re: [Bitcoin-development] Monetary Authority for Bitcoin

It is not a violation of the trust of those holding the currency. Many people bought Bitcoin in the hopes that it's value in the relation of other currencies will increase, not because there's a fixed money supply. The majority of people using Bitcoin as a currency in exchange for real goods are using the exchanges.

 My proposal will still allow for 4.9% semi-weekly variations in the price of Bitcoin, allowing for it to appreciate 11,800% per year.

On Mon, Dec 9, 2013 at 2:11 PM, Andrew Poelstra <asp11 at sfu.ca<mailto:asp11 at sfu.ca>> wrote:
On Mon, Dec 09, 2013 at 02:01:07PM -0800, Ryan Carboni wrote:
> This is no doubt probably a very controversial Bitcoin Improvement Proposal
> and is also a very rough draft of one.
>
Ryan, you can stop there already because any change to the inflation
formula (supposing such a thing is even possible, which it's not)
would be a violation of the trust of those holding the currency, who
obtained it while believing that its inflation algorithm would not
change.

--
Andrew Poelstra
Email: apoelstra at wpsoftware.net<http://wpsoftware.net>
Web:   http://www.wpsoftware.net/andrew

"If they had taught a class on how to be the kind of citizen Dick Cheney
 worries about, I would have finished high school."   --Edward Snowden

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131209/a73ff496/attachment.html>

From jameson.lopp at gmail.com  Mon Dec  9 23:23:17 2013
From: jameson.lopp at gmail.com (Jameson Lopp)
Date: Mon, 09 Dec 2013 18:23:17 -0500
Subject: [Bitcoin-development] Monetary Authority for Bitcoin
In-Reply-To: <CAJHLa0MXzQoSso+ZdXsNf7nzBe=6tCsq0CNrbF6waFxV2moWiQ@mail.gmail.com>
References: <CAO7N=i1p=7fGgzJXvctRoGTsztP6f9rqs78s9=Vnc3TC0RVLdA@mail.gmail.com>	<20131209221130.GA22556@shavo.dd-wrt>	<CAO7N=i0Y=sKXa=djc+8652e_0NiWLyMA9hrXyddaS+gOTu0yxQ@mail.gmail.com>
	<CAJHLa0MXzQoSso+ZdXsNf7nzBe=6tCsq0CNrbF6waFxV2moWiQ@mail.gmail.com>
Message-ID: <52A650E5.9070801@gmail.com>

To piggyback on Jeff,

Any proposal that is going to add reliance upon data from third parties
outside of the Bitcoin network itself is likely going to be rejected
outright. This opens far too many potential vulnerabilities.

"The exchanges that are kept track of could be hard coded into Bitcoin
or the miner could choose, how this works is not something I'm
personally focused on."

Yeah... you can't just gloss over a little detail like that. There must
be consensus between the miners, otherwise a solved block will be
rejected by a miner's peers.
--
Jameson Lopp
Software Engineer
Bronto Software, Inc

On 12/09/2013 06:10 PM, Jeff Garzik wrote:
> On Mon, Dec 9, 2013 at 7:23 PM, Ryan Carboni <ryan.jc.pc at gmail.com> wrote:
>> It is not a violation of the trust of those holding the currency. Many
>> people bought Bitcoin in the hopes that it's value in the relation of other
>> currencies will increase, not because there's a fixed money supply. The
>> majority of people using Bitcoin as a currency in exchange for real goods
>> are using the exchanges.
> 
> Your proposal has been met with widespread laughter.  Were I not ill
> with the flu, mockery would ensue as well.
> 



From allen.piscitello at gmail.com  Tue Dec 10 01:16:18 2013
From: allen.piscitello at gmail.com (Allen Piscitello)
Date: Mon, 9 Dec 2013 19:16:18 -0600
Subject: [Bitcoin-development] Monetary Authority for Bitcoin
In-Reply-To: <52A650E5.9070801@gmail.com>
References: <CAO7N=i1p=7fGgzJXvctRoGTsztP6f9rqs78s9=Vnc3TC0RVLdA@mail.gmail.com>
	<20131209221130.GA22556@shavo.dd-wrt>
	<CAO7N=i0Y=sKXa=djc+8652e_0NiWLyMA9hrXyddaS+gOTu0yxQ@mail.gmail.com>
	<CAJHLa0MXzQoSso+ZdXsNf7nzBe=6tCsq0CNrbF6waFxV2moWiQ@mail.gmail.com>
	<52A650E5.9070801@gmail.com>
Message-ID: <CAJfRnm5O7Y7cSi4B8kCxGvdG7mNChevfyO4bFLfPU6833BXS8w@mail.gmail.com>

I've got a better idea.  Ben Bernake needs a new job.  Let's just let him
set the block reward.


On Mon, Dec 9, 2013 at 5:23 PM, Jameson Lopp <jameson.lopp at gmail.com> wrote:

> To piggyback on Jeff,
>
> Any proposal that is going to add reliance upon data from third parties
> outside of the Bitcoin network itself is likely going to be rejected
> outright. This opens far too many potential vulnerabilities.
>
> "The exchanges that are kept track of could be hard coded into Bitcoin
> or the miner could choose, how this works is not something I'm
> personally focused on."
>
> Yeah... you can't just gloss over a little detail like that. There must
> be consensus between the miners, otherwise a solved block will be
> rejected by a miner's peers.
> --
> Jameson Lopp
> Software Engineer
> Bronto Software, Inc
>
> On 12/09/2013 06:10 PM, Jeff Garzik wrote:
> > On Mon, Dec 9, 2013 at 7:23 PM, Ryan Carboni <ryan.jc.pc at gmail.com>
> wrote:
> >> It is not a violation of the trust of those holding the currency. Many
> >> people bought Bitcoin in the hopes that it's value in the relation of
> other
> >> currencies will increase, not because there's a fixed money supply. The
> >> majority of people using Bitcoin as a currency in exchange for real
> goods
> >> are using the exchanges.
> >
> > Your proposal has been met with widespread laughter.  Were I not ill
> > with the flu, mockery would ensue as well.
> >
>
>
> ------------------------------------------------------------------------------
> Sponsored by Intel(R) XDK
> Develop, test and display web and hybrid apps with a single code base.
> Download it for free now!
>
> http://pubads.g.doubleclick.net/gampad/clk?id=111408631&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131209/2bcf7785/attachment.html>

From ryan.jc.pc at gmail.com  Tue Dec 10 01:19:18 2013
From: ryan.jc.pc at gmail.com (Ryan Carboni)
Date: Mon, 9 Dec 2013 17:19:18 -0800
Subject: [Bitcoin-development] Monetary Authority for Bitcoin
In-Reply-To: <CABsx9T3ikXBroxvJ6F6Y+1ZpevLhSJcHJd8v5uU6AR2THmtMZA@mail.gmail.com>
References: <CAO7N=i1p=7fGgzJXvctRoGTsztP6f9rqs78s9=Vnc3TC0RVLdA@mail.gmail.com>
	<CABsx9T3ikXBroxvJ6F6Y+1ZpevLhSJcHJd8v5uU6AR2THmtMZA@mail.gmail.com>
Message-ID: <CAO7N=i0hoDV9zviqOHTyfeXOEWmVAu65t9MGuNo8wynL-iC=pA@mail.gmail.com>

Bitcoin is made of many parts, yes, but not all parts were developed
simultaneously.


On Mon, Dec 9, 2013 at 2:06 PM, Gavin Andresen <gavinandresen at gmail.com>wrote:

> On Tue, Dec 10, 2013 at 8:01 AM, Ryan Carboni <ryan.jc.pc at gmail.com>wrote:
>
>> The exchanges that are kept track of could be hard coded into Bitcoin or
>> the miner could choose, how this works is not something I'm personally
>> focused on.
>>
>>
> That is like saying "We need a way to travel around the world quickly.
> There will be an anti-gravity technology; how this works is not something
> I'm personally focused on."
>
> Or, in other words, you are ignoring exactly the sticky, difficult problem
> that would have to be solved for your proposal to have any chance of
> working.
>
> --
> --
> Gavin Andresen
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131209/cf795cd4/attachment.html>

From ryan.jc.pc at gmail.com  Tue Dec 10 01:20:59 2013
From: ryan.jc.pc at gmail.com (Ryan Carboni)
Date: Mon, 9 Dec 2013 17:20:59 -0800
Subject: [Bitcoin-development] Monetary Authority for Bitcoin
In-Reply-To: <CAJHLa0MXzQoSso+ZdXsNf7nzBe=6tCsq0CNrbF6waFxV2moWiQ@mail.gmail.com>
References: <CAO7N=i1p=7fGgzJXvctRoGTsztP6f9rqs78s9=Vnc3TC0RVLdA@mail.gmail.com>
	<20131209221130.GA22556@shavo.dd-wrt>
	<CAO7N=i0Y=sKXa=djc+8652e_0NiWLyMA9hrXyddaS+gOTu0yxQ@mail.gmail.com>
	<CAJHLa0MXzQoSso+ZdXsNf7nzBe=6tCsq0CNrbF6waFxV2moWiQ@mail.gmail.com>
Message-ID: <CAO7N=i3wb0cmoaTsQSrMhezgsGqCxzK-AzAF22LU0UpBLcqiUw@mail.gmail.com>

You're just closed minded.


On Mon, Dec 9, 2013 at 3:10 PM, Jeff Garzik <jgarzik at bitpay.com> wrote:

> On Mon, Dec 9, 2013 at 7:23 PM, Ryan Carboni <ryan.jc.pc at gmail.com> wrote:
> > It is not a violation of the trust of those holding the currency. Many
> > people bought Bitcoin in the hopes that it's value in the relation of
> other
> > currencies will increase, not because there's a fixed money supply. The
> > majority of people using Bitcoin as a currency in exchange for real goods
> > are using the exchanges.
>
> Your proposal has been met with widespread laughter.  Were I not ill
> with the flu, mockery would ensue as well.
>
> --
> Jeff Garzik
> Bitcoin core developer and open source evangelist
> BitPay, Inc.      https://bitpay.com/
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131209/c3838fb9/attachment.html>

From bitcoin-devel at jerviss.org  Tue Dec 10 01:22:28 2013
From: bitcoin-devel at jerviss.org (kjj)
Date: Mon, 09 Dec 2013 19:22:28 -0600
Subject: [Bitcoin-development] Monetary Authority for Bitcoin
In-Reply-To: <CAO7N=i1p=7fGgzJXvctRoGTsztP6f9rqs78s9=Vnc3TC0RVLdA@mail.gmail.com>
References: <CAO7N=i1p=7fGgzJXvctRoGTsztP6f9rqs78s9=Vnc3TC0RVLdA@mail.gmail.com>
Message-ID: <52A66CD4.9090203@jerviss.org>

Ryan Carboni wrote:
>
> Bitcoin lacks a Central Bank.
>
This is a feature, not a bug.

Also, this is offtopic.  Political debate is thataway ->.

bitcoin-development is for development and technical discussion.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131209/5af27753/attachment.html>

From rick at support-intelligence.com  Tue Dec 10 04:05:30 2013
From: rick at support-intelligence.com (Rick Wesson)
Date: Mon, 9 Dec 2013 20:05:30 -0800
Subject: [Bitcoin-development] Monetary Authority for Bitcoin
In-Reply-To: <CABsx9T3ikXBroxvJ6F6Y+1ZpevLhSJcHJd8v5uU6AR2THmtMZA@mail.gmail.com>
References: <CAO7N=i1p=7fGgzJXvctRoGTsztP6f9rqs78s9=Vnc3TC0RVLdA@mail.gmail.com>
	<CABsx9T3ikXBroxvJ6F6Y+1ZpevLhSJcHJd8v5uU6AR2THmtMZA@mail.gmail.com>
Message-ID: <CAJ1JLtuAxGxJX_Jf_09h_MnY+xY7U4MS5Xoo98_RRchA6dtCTA@mail.gmail.com>

+1


On Mon, Dec 9, 2013 at 2:06 PM, Gavin Andresen <gavinandresen at gmail.com>wrote:

> On Tue, Dec 10, 2013 at 8:01 AM, Ryan Carboni <ryan.jc.pc at gmail.com>wrote:
>
>> The exchanges that are kept track of could be hard coded into Bitcoin or
>> the miner could choose, how this works is not something I'm personally
>> focused on.
>>
>>
> That is like saying "We need a way to travel around the world quickly.
> There will be an anti-gravity technology; how this works is not something
> I'm personally focused on."
>
> Or, in other words, you are ignoring exactly the sticky, difficult problem
> that would have to be solved for your proposal to have any chance of
> working.
>
> --
> --
> Gavin Andresen
>
>
> ------------------------------------------------------------------------------
> Sponsored by Intel(R) XDK
> Develop, test and display web and hybrid apps with a single code base.
> Download it for free now!
>
> http://pubads.g.doubleclick.net/gampad/clk?id=111408631&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131209/229d288d/attachment.html>

From roy at gnomon.org.uk  Tue Dec 10 07:23:36 2013
From: roy at gnomon.org.uk (Roy Badami)
Date: Tue, 10 Dec 2013 07:23:36 +0000
Subject: [Bitcoin-development] 0.8.6 release candidate 1
In-Reply-To: <CANAnSg2htxzNE9Z05XS8q3Uzwyt27uc0LDoPCiNWBsQYMCY=yw@mail.gmail.com>
References: <CABsx9T3tMkYf=LCWdeoptxwL3LSrSTDCtQ8zNUdkNaJ4F9kY7w@mail.gmail.com>
	<CAEz79PpUacdKTYokbdrhJr1Q1cH7KdyNjMiN38nLG2hLe+u=Cg@mail.gmail.com>
	<CABsx9T3_8dJFGAYG8T6oF6CNoAs6e9VBxkQP9M3KUON+4HUqVQ@mail.gmail.com>
	<CAEz79Pp+s+AAnjaKTdOHRakbqeJoF2sa=j4Xk9kediLhqbTYCQ@mail.gmail.com>
	<CANAnSg3GD8MgykRW3a2CY2r04OKPm43Ss1UTZW+xnxEP+GtpzA@mail.gmail.com>
	<20131209135244.GK62848@giles.gnomon.org.uk>
	<CANAnSg2htxzNE9Z05XS8q3Uzwyt27uc0LDoPCiNWBsQYMCY=yw@mail.gmail.com>
Message-ID: <20131210072336.GN62848@giles.gnomon.org.uk>

On Mon, Dec 09, 2013 at 02:55:02PM +0000, Drak wrote:
> On 9 December 2013 13:52, Roy Badami <roy at gnomon.org.uk> wrote:
> >
> >  On Mon, Dec 09, 2013 at 01:39:51PM +0000, Drak wrote:
> > > Someone needs to update the bitcoin.org website, it still points
> > downloads
> > > to 0.8.5
> >
> > Perhaps because 0.8.6 hasn't been released yet?  Or did I miss the
> > announcement?  I think it makes sense that release candidates are not
> > promoted on bitcoin.org.
> 
> 
> It was released and it's all over bitcointalk/reddit

Oh, I see - so it was.  It wasn't announced here though - is there
some other list I need to be on, too?  It would be nice if
announcements like this were posted to a mailing list as well as
bitcointalk.org (is there a bitcoin-announce list that I missed?  If
not, maybe there should be)

roy




From laanwj at gmail.com  Tue Dec 10 07:47:55 2013
From: laanwj at gmail.com (Wladimir)
Date: Tue, 10 Dec 2013 08:47:55 +0100
Subject: [Bitcoin-development] 0.8.6 release candidate 1
In-Reply-To: <20131210072336.GN62848@giles.gnomon.org.uk>
References: <CABsx9T3tMkYf=LCWdeoptxwL3LSrSTDCtQ8zNUdkNaJ4F9kY7w@mail.gmail.com>
	<CAEz79PpUacdKTYokbdrhJr1Q1cH7KdyNjMiN38nLG2hLe+u=Cg@mail.gmail.com>
	<CABsx9T3_8dJFGAYG8T6oF6CNoAs6e9VBxkQP9M3KUON+4HUqVQ@mail.gmail.com>
	<CAEz79Pp+s+AAnjaKTdOHRakbqeJoF2sa=j4Xk9kediLhqbTYCQ@mail.gmail.com>
	<CANAnSg3GD8MgykRW3a2CY2r04OKPm43Ss1UTZW+xnxEP+GtpzA@mail.gmail.com>
	<20131209135244.GK62848@giles.gnomon.org.uk>
	<CANAnSg2htxzNE9Z05XS8q3Uzwyt27uc0LDoPCiNWBsQYMCY=yw@mail.gmail.com>
	<20131210072336.GN62848@giles.gnomon.org.uk>
Message-ID: <CA+s+GJAwBpNmaLo1+zP1Gj+qGZ0JbkxdOg0FpM=2Tj2pMjQCOQ@mail.gmail.com>

On Tue, Dec 10, 2013 at 8:23 AM, Roy Badami <roy at gnomon.org.uk> wrote:

> Oh, I see - so it was.  It wasn't announced here though - is there
> some other list I need to be on, too?  It would be nice if
> announcements like this were posted to a mailing list as well as
> bitcointalk.org (is there a bitcoin-announce list that I missed?  If
> not, maybe there should be)
>

Yes could have been announced here too.
We announced the rc1 here but not the final release.
...maybe we should add a list of places to announce to the release process.

Wladimir
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131210/9ade8195/attachment.html>

From laanwj at gmail.com  Tue Dec 10 08:19:12 2013
From: laanwj at gmail.com (Wladimir)
Date: Tue, 10 Dec 2013 09:19:12 +0100
Subject: [Bitcoin-development] Monetary Authority for Bitcoin
In-Reply-To: <B09A5DE3EF411243BB3328232CD25A5DABFF021E7A@MAILR023.mail.lan>
References: <CAO7N=i1p=7fGgzJXvctRoGTsztP6f9rqs78s9=Vnc3TC0RVLdA@mail.gmail.com>
	<20131209221130.GA22556@shavo.dd-wrt>
	<CAO7N=i0Y=sKXa=djc+8652e_0NiWLyMA9hrXyddaS+gOTu0yxQ@mail.gmail.com>
	<B09A5DE3EF411243BB3328232CD25A5DABFF021E7A@MAILR023.mail.lan>
Message-ID: <CA+s+GJDJA7_HOiJ-_jazXERSYfWvO-DHk89ih4pG8dEK5K9Z9A@mail.gmail.com>

On Mon, Dec 9, 2013 at 11:57 PM, Mike Caldwell <mcaldwell at swipeclock.com>wrote:

>
> I believe that if there ever becomes a consensus that Bitcoin?s inflation
> parameters were a show-stopper for the Bitcoin economy, that the power to
> correct it lies with merchants, who would vote for changing the rules.  I
> believe they would do this not by changing Bitcoin, but by accepting, in
> parallel, a brand new alt coin that reflects the consensus as to how the
> inflation should be.  I believe such an alt coin would have its genesis at
> around the time that consensus moved toward accepting inflation, rather
> than adopting the seignorage of some other alt coin out there today.
>

Agreed Mike.

The economic parameters of Bitcoin are fixed in stone forever. Adding a
monetary authority to Bitcoin is impossible and undesirable because the
implicit contract of Bitcoin is that there would finally be a currency in
which no one could mess around with. It would betray all prior holders.

But these are ideas everyone is free to experiment with in new altcoins. If
the lack of inflation in Bitcoin ever becomes a problem in day-to-day
usage, such a parallel chain could become the de-facto cryptocurrency for
spending. Or just maybe fiat already works well enough there...

Wladimir
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131210/3c718388/attachment.html>

From odinn.cyberguerrilla at riseup.net  Tue Dec 10 09:18:41 2013
From: odinn.cyberguerrilla at riseup.net (Odinn Cyberguerrilla)
Date: Tue, 10 Dec 2013 01:18:41 -0800
Subject: [Bitcoin-development] Dedicated server for bitcoin.org,
 your thoughts?
In-Reply-To: <1386546680.28932.57095933.29430EA8@webmail.messagingengine.com>
References: <52A3C8A5.7010606@gmail.com>
	<CAAS2fgT2x3iLnRiLabPT28eO6rbGuBBgi2s-Yhtgwo+3XWq7+Q@mail.gmail.com>
	<CANAnSg3GeLPyXXK5Osg1hcC7MQ=Na3BWrGCe95ab7UcbeG2Jgw@mail.gmail.com>
	<201312082101.25609.luke@dashjr.org>
	<CANAnSg0vwbSyYtzOpbFzaHmS2wQ2aQCibk9tg+G4VA_ESp_7ow@mail.gmail.com>
	<1386546680.28932.57095933.29430EA8@webmail.messagingengine.com>
Message-ID: <cb1f7b4d35219cbf2811fcdd592a83fa.squirrel@fruiteater.riseup.net>

I've been lurking on this convo since it began, but I wanted to say
thanks, theymos

cheers to you all and yay for decentralization, wherever it leads.

-odinn
muh latest: http://github.com/ABISprotocol/ABIS

> On Sun, Dec 8, 2013, at 03:11 PM, Drak wrote:
>
> It's not just about trust, there is the robustness factor: what if he
> becomes sick, unavailable, hit by a bus? Others need the ability to
> pickup and run with it. The control over the domain (including ability
> to renew registration, alter nameservers) needs to be with more than
> one person. That's why I suggest using the same people who have control
> over the software project at sf,github
>
>
> The bitcoin.org domain is controlled by me, Sirius, and an anonymous
> person. Control will not be lost if Sirius becomes unavailable.
>
> SSL is probably a good idea, and it's probably also a good idea to
> separate bitcoin.org from Github. I don't know that I trust Github. I'm
> sure that you can find a sponsor for a dedicated server. Let us know if
> DNS changes to bitcoin.org are required.
> ------------------------------------------------------------------------------
> Sponsored by Intel(R) XDK
> Develop, test and display web and hybrid apps with a single code base.
> Download it for free now!
> http://pubads.g.doubleclick.net/gampad/clk?id=111408631&iu=/4140/ostg.clktrk_______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>





From ryan.jc.pc at gmail.com  Tue Dec 10 09:55:53 2013
From: ryan.jc.pc at gmail.com (Ryan Carboni)
Date: Tue, 10 Dec 2013 01:55:53 -0800
Subject: [Bitcoin-development] Bitcoin-development Digest, Vol 31,
	Issue 25
In-Reply-To: <mailman.365464.1386663560.21953.bitcoin-development@lists.sourceforge.net>
References: <mailman.365464.1386663560.21953.bitcoin-development@lists.sourceforge.net>
Message-ID: <CAO7N=i0=esXrwDJ-NNqXbhSNMPASk4mpjMmxOJsOmouWp84ZiA@mail.gmail.com>

>
> I believe that if there ever becomes a consensus that Bitcoin?s inflation
> parameters were a show-stopper for the Bitcoin economy, that the power to
> correct it lies with merchants, who would vote for changing the rules.  I
> believe they would do this not by changing Bitcoin, but by accepting, in
> parallel, a brand new alt coin that reflects the consensus as to how the
> inflation should be.  I believe such an alt coin would have its genesis at
> around the time that consensus moved toward accepting inflation, rather
> than adopting the seignorage of some other alt coin out there today.
>

Agreed Mike.

The economic parameters of Bitcoin are fixed in stone forever. Adding a
monetary authority to Bitcoin is impossible and undesirable because the
implicit contract of Bitcoin is that there would finally be a currency in
which no one could mess around with. It would betray all prior holders.

But these are ideas everyone is free to experiment with in new altcoins. If
the lack of inflation in Bitcoin ever becomes a problem in day-to-day
usage, such a parallel chain could become the de-facto cryptocurrency for
spending. Or just maybe fiat already works well enough there...

Wladimir
-------------- --------------
How do you propose to use Bitcoin on a week-long vacation or for life in
general, when it's value constantly swings up and down? Or for the average
person's paycheck to swing up and down in value every week? Awfully hard to
budget. There is also a catch-22, no altcoin can gain acceptance because
the infrastructure for Bitcoin already exists, but without infrastructure,
no altcoin can gain acceptance. Furthermore, the average merchant or
consumer lacks the idealism or knowledge to bring about such changes in
Bitcoin. It's a lofty idea that the average person will bring about such
change when they don't bring about such change already in their own lives.
It is ironic considering that there's no Bitcoin "chamber of commerce,"
just a few programmers in a development mailing list who direct the future
of Bitcoin, and thus these merchants you speak of have little to no voice
what so ever, with a few exceptions of merchants who do subscribe to this
mailing list.
What I am proposing makes sound economic sense. It is the only way to fix
the speculation crisis.
Just ask an economist.

And the economic parameters of bitcoin are not fixed in stone. If there
needs to be a change, it will be messy but it could happen.

Besides, using Austrian precepts of inflation blurs the fact that deflation
will still be possible under my proposal. Although amusingly enough
Austrian-defined inflation is still occurring within Bitcoin, in fact
faster then desired since blocks are being processed every seven minutes
now as opposed to ten, and it's quite likely when 28nm ASIC miners are
released that blocks will be processed every five minutes before the
difficulty is adjusted again.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131210/0ed5f68f/attachment.html>

From jtimon at monetize.io  Tue Dec 10 12:38:38 2013
From: jtimon at monetize.io (=?ISO-8859-1?Q?Jorge_Tim=F3n?=)
Date: Tue, 10 Dec 2013 13:38:38 +0100
Subject: [Bitcoin-development] Monetary Authority for Bitcoin
In-Reply-To: <CAO7N=i3wb0cmoaTsQSrMhezgsGqCxzK-AzAF22LU0UpBLcqiUw@mail.gmail.com>
References: <CAO7N=i1p=7fGgzJXvctRoGTsztP6f9rqs78s9=Vnc3TC0RVLdA@mail.gmail.com>
	<20131209221130.GA22556@shavo.dd-wrt>
	<CAO7N=i0Y=sKXa=djc+8652e_0NiWLyMA9hrXyddaS+gOTu0yxQ@mail.gmail.com>
	<CAJHLa0MXzQoSso+ZdXsNf7nzBe=6tCsq0CNrbF6waFxV2moWiQ@mail.gmail.com>
	<CAO7N=i3wb0cmoaTsQSrMhezgsGqCxzK-AzAF22LU0UpBLcqiUw@mail.gmail.com>
Message-ID: <CAC1+kJNbSn_3p9Pu_geyb0nYhE10mLkpJ1o-4BzR-w2p5e_5pQ@mail.gmail.com>

On 12/10/13, Ryan Carboni <ryan.jc.pc at gmail.com> wrote:
> You're just closed minded.

No, at least to persons have explained you why your proposal is not feasible.
If you wanted to learn, you would have made questions on why those
parts of your proposal are unfeasible.
There have been many proposals about "stablecoins" in bitcointalk and
other forums (for example, the "initial proposals" freicoin subforum).
I have participated in several of them trying to find a solution and
I'm now convinced that this is impossible to implement in a secure AND
P2P system.

This is off-topic for this forum, specially if (as you've shown to us)
you are not interested in learning why this proposal is unfeasible.

-- 
Jorge Tim?n

http://freico.in/



From bitcoin-devel at jerviss.org  Tue Dec 10 13:18:52 2013
From: bitcoin-devel at jerviss.org (kjj)
Date: Tue, 10 Dec 2013 07:18:52 -0600
Subject: [Bitcoin-development] Bitcoin-development Digest, Vol 31,
 Issue 25
In-Reply-To: <CAO7N=i0=esXrwDJ-NNqXbhSNMPASk4mpjMmxOJsOmouWp84ZiA@mail.gmail.com>
References: <mailman.365464.1386663560.21953.bitcoin-development@lists.sourceforge.net>
	<CAO7N=i0=esXrwDJ-NNqXbhSNMPASk4mpjMmxOJsOmouWp84ZiA@mail.gmail.com>
Message-ID: <52A714BC.1010909@jerviss.org>

Ryan Carboni wrote:
> And the economic parameters of bitcoin are not fixed in stone. If 
> there needs to be a change, it will be messy but it could happen.

Need is an awfully big word.  One thing we are certain of is that some 
guy telling us all that we are wrong is nowhere near the "need" level.
> Besides, using Austrian precepts of inflation blurs the fact that 
> deflation will still be possible under my proposal. Although amusingly 
> enough Austrian-defined inflation is still occurring within Bitcoin, 
> in fact faster then desired since blocks are being processed every 
> seven minutes now as opposed to ten, and it's quite likely when 28nm 
> ASIC miners are released that blocks will be processed every five 
> minutes before the difficulty is adjusted again.
Don't take this the wrong way, but things like this make it very hard 
for us to take you seriously.

Please read up on how the system works, then read up on why we reject 
the argument from authority, then if you still have something to say, 
please do so in a proper venue.  One option for this discussion is the 
bitcointalk.org forums, where you will find literally dozens of threads 
proposing the exact same thing you are proposing.

This mailing list is NOT for political discussion.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131210/dfa36d13/attachment.html>

From kozuch82 at gmail.com  Tue Dec 10 16:23:01 2013
From: kozuch82 at gmail.com (=?ISO-8859-2?Q?Jan_Ku=E8era?=)
Date: Tue, 10 Dec 2013 17:23:01 +0100
Subject: [Bitcoin-development] Popularity based mining (variable block
	reward)
Message-ID: <CA+n47WKrAwbzb31YrHfytdNjKax9ixR2nT1Etw+UxsjLHqH08g@mail.gmail.com>

Hi there,

I am not sure this wont be considered as off-topic here, but I did not find
a better place to ask. My question is - has anybody here thought about the
idea of variable block rewards where mining would essentially be popularity
based? I mean in terms either improving Bitcoin's protocol or forking a
completely new coin? I think elasticity of money supply could bring more
exchange rate stability to the hypothetical new coin (say there'd be a
demand for such a coin). I am thinking of an alternative mining scheme
where block reward would grow (or decrease) with popularity of the coin.
The rationale behind this idea is to make an exchange rate more stable
since greater interest will not result in higher coin price.

Evidence clearly shows Bitcoin lacks some basic features of money and thus
behaves more like a commodity (read gold). I have been watching the
exchange rate for several months and the volatility simply does not seem to
go away... so it seems like something has to change in order to get a more
stable currency. I am not telling I want Bitcoin to implement this, I fully
understand that a philosophy of "one coin = never changing features" can be
present that is why I also speak about a fork.

Basically there would be no reliance on external data as the network itself
would decide on reward height and everybody node would be free to do so.
Each network node would determine the popularity on its own depending on
various factors (coin valuation/exchange rate, number of transactions and
many others) and basically come up with its own block reward value. It
would then want to see a new block being mined with such reward value. In
case such a block is mined, it will include it in its own chain. There'd be
some %s of tolerance for block reward value so that the system would not
collapse.

I may be completely wrong with my idea but am asking it this was spoken
before and what opinions do developers have.

Regards,
Jan
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131210/38578826/attachment.html>

From jameson.lopp at gmail.com  Tue Dec 10 16:27:26 2013
From: jameson.lopp at gmail.com (Jameson Lopp)
Date: Tue, 10 Dec 2013 11:27:26 -0500
Subject: [Bitcoin-development] Popularity based mining (variable block
 reward)
In-Reply-To: <CA+n47WKrAwbzb31YrHfytdNjKax9ixR2nT1Etw+UxsjLHqH08g@mail.gmail.com>
References: <CA+n47WKrAwbzb31YrHfytdNjKax9ixR2nT1Etw+UxsjLHqH08g@mail.gmail.com>
Message-ID: <52A740EE.1020605@gmail.com>


"no reliance on external data" ... "depending on various factors (coin
valuation/exchange rate"

?_?
--
Jameson Lopp
Software Engineer
Bronto Software

On 12/10/2013 11:23 AM, Jan Ku?era wrote:
> Basically there would be no reliance on external data as the network itself
> would decide on reward height and everybody node would be free to do so.
> Each network node would determine the popularity on its own depending on
> various factors (coin valuation/exchange rate, number of transactions and
> many others) and basically come up with its own block reward value.



From jtimon at monetize.io  Tue Dec 10 17:18:40 2013
From: jtimon at monetize.io (=?ISO-8859-1?Q?Jorge_Tim=F3n?=)
Date: Tue, 10 Dec 2013 18:18:40 +0100
Subject: [Bitcoin-development] Popularity based mining (variable block
	reward)
In-Reply-To: <52A740EE.1020605@gmail.com>
References: <CA+n47WKrAwbzb31YrHfytdNjKax9ixR2nT1Etw+UxsjLHqH08g@mail.gmail.com>
	<52A740EE.1020605@gmail.com>
Message-ID: <CAC1+kJPtYfn7+YVWkDHRzd3h-HQVJrTQv-KP=ij_LswDuUgw4Q@mail.gmail.com>

This has been asked very recently:

http://sourceforge.net/mailarchive/forum.php?forum_name=bitcoin-development

And a thousand times on bitcointalk.


On 12/10/13, Jameson Lopp <jameson.lopp at gmail.com> wrote:
>
> "no reliance on external data" ... "depending on various factors (coin
> valuation/exchange rate"
>
> ?_?
> --
> Jameson Lopp
> Software Engineer
> Bronto Software
>
> On 12/10/2013 11:23 AM, Jan Ku?era wrote:
>> Basically there would be no reliance on external data as the network
>> itself
>> would decide on reward height and everybody node would be free to do so.
>> Each network node would determine the popularity on its own depending on
>> various factors (coin valuation/exchange rate, number of transactions and
>> many others) and basically come up with its own block reward value.
>
> ------------------------------------------------------------------------------
> Rapidly troubleshoot problems before they affect your business. Most IT
> organizations don't have a clear picture of how application performance
> affects their revenue. With AppDynamics, you get 100% visibility into your
> Java,.NET, & PHP application. Start your 15-day FREE TRIAL of AppDynamics
> Pro!
> http://pubads.g.doubleclick.net/gampad/clk?id=84349831&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>


-- 
Jorge Tim?n

http://freico.in/



From bk at thinkloop.com  Wed Dec 11 00:07:19 2013
From: bk at thinkloop.com (Baz)
Date: Tue, 10 Dec 2013 16:07:19 -0800
Subject: [Bitcoin-development] Monetary Authority for Bitcoin
In-Reply-To: <CAC1+kJNbSn_3p9Pu_geyb0nYhE10mLkpJ1o-4BzR-w2p5e_5pQ@mail.gmail.com>
References: <CAO7N=i1p=7fGgzJXvctRoGTsztP6f9rqs78s9=Vnc3TC0RVLdA@mail.gmail.com>
	<20131209221130.GA22556@shavo.dd-wrt>
	<CAO7N=i0Y=sKXa=djc+8652e_0NiWLyMA9hrXyddaS+gOTu0yxQ@mail.gmail.com>
	<CAJHLa0MXzQoSso+ZdXsNf7nzBe=6tCsq0CNrbF6waFxV2moWiQ@mail.gmail.com>
	<CAO7N=i3wb0cmoaTsQSrMhezgsGqCxzK-AzAF22LU0UpBLcqiUw@mail.gmail.com>
	<CAC1+kJNbSn_3p9Pu_geyb0nYhE10mLkpJ1o-4BzR-w2p5e_5pQ@mail.gmail.com>
Message-ID: <CAAsce+vzR_TGX5x9GaGGZLNh4ML4LO_mZPH0O1inhi0ag7sXVw@mail.gmail.com>

Bitcoin's volatility is not a symptom of its architecture, but a reflection
of the collective knowledge of its future acceptance. Currently that
knowledge is based on very volatile sources: how some senator feels about
it this morning, which direction departments in the Chinese government are
leaning. The issue is that proof-of-work is missing from society's end. As
time goes on, laws, regulations and policies will start to form, people
will challenge them, they will be reviewed and updated, they will be
challenged again on different grounds, re-reviewed, and so on. Each of
those confirmations will make it that much harder to change earlier
confirmations. It won't matter anymore what some senator thinks this
morning because she will have months of hard-work ahead of her before she
can affect any change. It also doesn't matter if the rulings are positive
or negative, just having them will add stability to Bitcoin at some value
between $0.0001 to $100,000 per coin.




On Tue, Dec 10, 2013 at 4:38 AM, Jorge Tim?n <jtimon at monetize.io> wrote:

> On 12/10/13, Ryan Carboni <ryan.jc.pc at gmail.com> wrote:
> > You're just closed minded.
>
> No, at least to persons have explained you why your proposal is not
> feasible.
> If you wanted to learn, you would have made questions on why those
> parts of your proposal are unfeasible.
> There have been many proposals about "stablecoins" in bitcointalk and
> other forums (for example, the "initial proposals" freicoin subforum).
> I have participated in several of them trying to find a solution and
> I'm now convinced that this is impossible to implement in a secure AND
> P2P system.
>
> This is off-topic for this forum, specially if (as you've shown to us)
> you are not interested in learning why this proposal is unfeasible.
>
> --
> Jorge Tim?n
>
> http://freico.in/
>
>
> ------------------------------------------------------------------------------
> Sponsored by Intel(R) XDK
> Develop, test and display web and hybrid apps with a single code base.
> Download it for free now!
>
> http://pubads.g.doubleclick.net/gampad/clk?id=111408631&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131210/f3a9fa83/attachment.html>

From jgarzik at bitpay.com  Wed Dec 11 01:01:52 2013
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Tue, 10 Dec 2013 20:01:52 -0500
Subject: [Bitcoin-development] Monetary Authority for Bitcoin
In-Reply-To: <CAAsce+vzR_TGX5x9GaGGZLNh4ML4LO_mZPH0O1inhi0ag7sXVw@mail.gmail.com>
References: <CAO7N=i1p=7fGgzJXvctRoGTsztP6f9rqs78s9=Vnc3TC0RVLdA@mail.gmail.com>
	<20131209221130.GA22556@shavo.dd-wrt>
	<CAO7N=i0Y=sKXa=djc+8652e_0NiWLyMA9hrXyddaS+gOTu0yxQ@mail.gmail.com>
	<CAJHLa0MXzQoSso+ZdXsNf7nzBe=6tCsq0CNrbF6waFxV2moWiQ@mail.gmail.com>
	<CAO7N=i3wb0cmoaTsQSrMhezgsGqCxzK-AzAF22LU0UpBLcqiUw@mail.gmail.com>
	<CAC1+kJNbSn_3p9Pu_geyb0nYhE10mLkpJ1o-4BzR-w2p5e_5pQ@mail.gmail.com>
	<CAAsce+vzR_TGX5x9GaGGZLNh4ML4LO_mZPH0O1inhi0ag7sXVw@mail.gmail.com>
Message-ID: <CAJHLa0NTv15M691i3p4gOsWc+-zV_wo+_suh0y+JG8rKu4mEaA@mail.gmail.com>

It is simpler than that; simple numbers.  Bitcoin is volatile right
now, not for fundamental architecture reasons, but for reasons why
many other small issues are volatile.  Low liquidity and a small issue
implies that a single big player can easily the move the market.
Further, it is volatile because common financial tools available
elsewhere -- shorting, futures/options, etc. -- are not widely and
easily available.

None of these factors are special or specific to bitcoin.  See
http://garzikrants.blogspot.com/2013/11/solution-to-bitcoin-volatility.html

However, this is getting WAY off-topic for a development mailing list.

Ryan successfully trolled the list.  Let's not further feed the trolls.


On Tue, Dec 10, 2013 at 7:07 PM, Baz <bk at thinkloop.com> wrote:
> Bitcoin's volatility is not a symptom of its architecture, but a reflection
> of the collective knowledge of its future acceptance. Currently that
> knowledge is based on very volatile sources: how some senator feels about it
> this morning, which direction departments in the Chinese government are
> leaning. The issue is that proof-of-work is missing from society's end. As
> time goes on, laws, regulations and policies will start to form, people will
> challenge them, they will be reviewed and updated, they will be challenged
> again on different grounds, re-reviewed, and so on. Each of those
> confirmations will make it that much harder to change earlier confirmations.
> It won't matter anymore what some senator thinks this morning because she
> will have months of hard-work ahead of her before she can affect any change.
> It also doesn't matter if the rulings are positive or negative, just having
> them will add stability to Bitcoin at some value between $0.0001 to $100,000
> per coin.
>
>
>
>
> On Tue, Dec 10, 2013 at 4:38 AM, Jorge Tim?n <jtimon at monetize.io> wrote:
>>
>> On 12/10/13, Ryan Carboni <ryan.jc.pc at gmail.com> wrote:
>> > You're just closed minded.
>>
>> No, at least to persons have explained you why your proposal is not
>> feasible.
>> If you wanted to learn, you would have made questions on why those
>> parts of your proposal are unfeasible.
>> There have been many proposals about "stablecoins" in bitcointalk and
>> other forums (for example, the "initial proposals" freicoin subforum).
>> I have participated in several of them trying to find a solution and
>> I'm now convinced that this is impossible to implement in a secure AND
>> P2P system.
>>
>> This is off-topic for this forum, specially if (as you've shown to us)
>> you are not interested in learning why this proposal is unfeasible.
>>
>> --
>> Jorge Tim?n
>>
>> http://freico.in/
>>
>>
>> ------------------------------------------------------------------------------
>> Sponsored by Intel(R) XDK
>> Develop, test and display web and hybrid apps with a single code base.
>> Download it for free now!
>>
>> http://pubads.g.doubleclick.net/gampad/clk?id=111408631&iu=/4140/ostg.clktrk
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>



-- 
Jeff Garzik
Bitcoin core developer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From laanwj at gmail.com  Wed Dec 11 15:10:58 2013
From: laanwj at gmail.com (Wladimir)
Date: Wed, 11 Dec 2013 16:10:58 +0100
Subject: [Bitcoin-development] Updated BIP-0001 for github move
Message-ID: <CA+s+GJBqWYHGVJ0CvjOpAmwtTukArEUo-bP_WSUd9ROCDS6ONg@mail.gmail.com>

- Mention github instead of wiki
- Add markdown as allowed format
- Fix some weirdnesses such as "A BIP editor must subscribe to the
gmaxwell at gmail.com list.". Remove the repetition and create a new section
which lists the BIP editors (currently only gmaxwell).
- Prefer discussion on mailing list to forum

This is just a cleanup and change for the github move. I have not changed
the process to jgarzik's new proposed process (
http://sourceforge.net/mailarchive/forum.php?thread_name=CAAS2fgROsymXnXTrfLTLTQ%3DEDwaAFu%2BxrrD4Q-Gye5XWze7vFw%40mail.gmail.com&forum_name=bitcoin-development),
this can be done in a later separate change.

See pull request here:
https://github.com/bitcoin/bips/pull/1

Regards,
Wladimir
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131211/b8f5da36/attachment.html>

From whiskers75 at whiskers75.com  Wed Dec 11 16:51:47 2013
From: whiskers75 at whiskers75.com (whiskers75)
Date: Wed, 11 Dec 2013 16:51:47 -0000
Subject: [Bitcoin-development] This list...
References: <mailman.368561.1386774669.21953.bitcoin-development@lists.sourceforge.net>
Message-ID: <52A89823.3060906@whiskers75.com>


Can we get on topic here? I feel there are too many trolls and this
list is becoming a lot like bitcointalk....



From mike at plan99.net  Thu Dec 12 16:03:55 2013
From: mike at plan99.net (Mike Hearn)
Date: Thu, 12 Dec 2013 08:03:55 -0800
Subject: [Bitcoin-development] Merge avoidance and P2P connection encryption
Message-ID: <CANEZrP1gDxcKO8z4hgM9BJU6-+Ft0oaiCZjqjN4MxGEJCgs5Ng@mail.gmail.com>

I wrote an article intended for a broad/non-developer audience on a few
Bitcoin privacy topics:

- P2P connection encryption
- Address re-use/payment protocol
- CoinJoin and merge avoidance

I don't think there's anything much new here for people who were involved
with the BIP70 design discussions, but it may prove a useful resource when
talking about privacy features in the payment protocol. Specifically the
ability to request multiple outputs and submit multiple transactions that
satisfy them. The article elaborates on how to use that feature to achieve
some useful privacy outcomes.

I also analyze what using SSL for P2P connections would buy us and what it
wouldn't.

https://medium.com/p/7f95a386692f
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131212/a620d5e9/attachment.html>

From prabahy at gmail.com  Thu Dec 12 17:28:32 2013
From: prabahy at gmail.com (Paul Rabahy)
Date: Thu, 12 Dec 2013 12:28:32 -0500
Subject: [Bitcoin-development] Merge avoidance and P2P connection
	encryption
In-Reply-To: <CANEZrP1gDxcKO8z4hgM9BJU6-+Ft0oaiCZjqjN4MxGEJCgs5Ng@mail.gmail.com>
References: <CANEZrP1gDxcKO8z4hgM9BJU6-+Ft0oaiCZjqjN4MxGEJCgs5Ng@mail.gmail.com>
Message-ID: <CADu7o8MXuUVrRP0vsvEkPLJ4f=2pC6V7W3hYE0jCVDRKmvqu8A@mail.gmail.com>

First off, nice article. Very clear and informative.

I don't know if this is the best place to post this, but it seems related
to me.

As more wallets implement BIP32, I believe that bitcoin wallets should
begin to encourage people to use
https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki#recurrent-business-to-business-transactions-mi0style
address instead of traditional addresses. In the end, this would
improve privacy because users never need to merge coin if they had one of
these "super addresses".

In addition, "super addresses" would fit nicely into BIP70. Right now, the
PaymentDetails message allows the merchant to provide multiple outputs. If
instead the PaymentDetails provide 1 traditional output (for reverse
compatibility) and 1 "super address", the payment could be broken into as
many pieces as is needed to match unspent outputs already in the customers
wallet. Finally, the refund_to address in Payment could also be upgraded to
a "super address" to enhance privacy there.

I am not sure if there is a large memory requirement for "super addresses",
but to me, it seems that a lot of these privacy enhancing possibilities
will be simple to implement once BIP32 is widely deployed.


On Thu, Dec 12, 2013 at 11:03 AM, Mike Hearn <mike at plan99.net> wrote:

> I wrote an article intended for a broad/non-developer audience on a few
> Bitcoin privacy topics:
>
> - P2P connection encryption
> - Address re-use/payment protocol
> - CoinJoin and merge avoidance
>
> I don't think there's anything much new here for people who were involved
> with the BIP70 design discussions, but it may prove a useful resource when
> talking about privacy features in the payment protocol. Specifically the
> ability to request multiple outputs and submit multiple transactions that
> satisfy them. The article elaborates on how to use that feature to achieve
> some useful privacy outcomes.
>
> I also analyze what using SSL for P2P connections would buy us and what it
> wouldn't.
>
> https://medium.com/p/7f95a386692f
>
>
> ------------------------------------------------------------------------------
> Rapidly troubleshoot problems before they affect your business. Most IT
> organizations don't have a clear picture of how application performance
> affects their revenue. With AppDynamics, you get 100% visibility into your
> Java,.NET, & PHP application. Start your 15-day FREE TRIAL of AppDynamics
> Pro!
> http://pubads.g.doubleclick.net/gampad/clk?id=84349831&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131212/c18d0b4c/attachment.html>

From mike at plan99.net  Thu Dec 12 18:24:46 2013
From: mike at plan99.net (Mike Hearn)
Date: Thu, 12 Dec 2013 10:24:46 -0800
Subject: [Bitcoin-development] Merge avoidance and P2P connection
	encryption
In-Reply-To: <CADu7o8MXuUVrRP0vsvEkPLJ4f=2pC6V7W3hYE0jCVDRKmvqu8A@mail.gmail.com>
References: <CANEZrP1gDxcKO8z4hgM9BJU6-+Ft0oaiCZjqjN4MxGEJCgs5Ng@mail.gmail.com>
	<CADu7o8MXuUVrRP0vsvEkPLJ4f=2pC6V7W3hYE0jCVDRKmvqu8A@mail.gmail.com>
Message-ID: <CANEZrP33bRx6abbXcf6nQYiPXFOOWSsZJqiFZY+A08x6O3X+pg@mail.gmail.com>

I think the right way to integrate BIP32 and BIP70 would be to specify
output scripts as normal for backwards compatibility, and then allow each
output to have an additional xpubkey and iteration count field. The
iteration counts could be unsigned.

Unfortunately to add data that isn't signed requires a backwards
incompatible change to the protocol :( There isn't currently any area that
isn't covered by the signature. We would have to add one, and then have a
matching array of iteration counts for each xpubkey that was specified in
the output.

I wonder if we should make a last minute change to BIP70 before wallets
have shipped and merchant support starts, something like

message PaymentRequest {
  optional byte unsigned_data = 6;
}

that would be deleted like the signature is before reserialization.



On Thu, Dec 12, 2013 at 9:28 AM, Paul Rabahy <prabahy at gmail.com> wrote:

> First off, nice article. Very clear and informative.
>
> I don't know if this is the best place to post this, but it seems related
> to me.
>
> As more wallets implement BIP32, I believe that bitcoin wallets should
> begin to encourage people to use
> https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki#recurrent-business-to-business-transactions-mi0style address instead of traditional addresses. In the end, this would
> improve privacy because users never need to merge coin if they had one of
> these "super addresses".
>
> In addition, "super addresses" would fit nicely into BIP70. Right now, the
> PaymentDetails message allows the merchant to provide multiple outputs. If
> instead the PaymentDetails provide 1 traditional output (for reverse
> compatibility) and 1 "super address", the payment could be broken into as
> many pieces as is needed to match unspent outputs already in the customers
> wallet. Finally, the refund_to address in Payment could also be upgraded to
> a "super address" to enhance privacy there.
>
> I am not sure if there is a large memory requirement for "super
> addresses", but to me, it seems that a lot of these privacy enhancing
> possibilities will be simple to implement once BIP32 is widely deployed.
>
>
> On Thu, Dec 12, 2013 at 11:03 AM, Mike Hearn <mike at plan99.net> wrote:
>
>> I wrote an article intended for a broad/non-developer audience on a few
>> Bitcoin privacy topics:
>>
>> - P2P connection encryption
>> - Address re-use/payment protocol
>> - CoinJoin and merge avoidance
>>
>> I don't think there's anything much new here for people who were involved
>> with the BIP70 design discussions, but it may prove a useful resource when
>> talking about privacy features in the payment protocol. Specifically the
>> ability to request multiple outputs and submit multiple transactions that
>> satisfy them. The article elaborates on how to use that feature to achieve
>> some useful privacy outcomes.
>>
>> I also analyze what using SSL for P2P connections would buy us and what
>> it wouldn't.
>>
>> https://medium.com/p/7f95a386692f
>>
>>
>> ------------------------------------------------------------------------------
>> Rapidly troubleshoot problems before they affect your business. Most IT
>> organizations don't have a clear picture of how application performance
>> affects their revenue. With AppDynamics, you get 100% visibility into your
>> Java,.NET, & PHP application. Start your 15-day FREE TRIAL of AppDynamics
>> Pro!
>>
>> http://pubads.g.doubleclick.net/gampad/clk?id=84349831&iu=/4140/ostg.clktrk
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131212/c0b07754/attachment.html>

From adam at cypherspace.org  Thu Dec 12 20:51:06 2013
From: adam at cypherspace.org (Adam Back)
Date: Thu, 12 Dec 2013 21:51:06 +0100
Subject: [Bitcoin-development] Dedicated server for bitcoin.org,
 your thoughts?
In-Reply-To: <CAAS2fgR0khyJxmz9c2Oc87hOFgiNuiPJuaeugGajdo_EcKEW9w@mail.gmail.com>
References: <52A3C8A5.7010606@gmail.com>
	<1795f3067ba3fcdd0caf978cc59ff024.squirrel@fruiteater.riseup.net>
	<52A435EA.7090405@gmail.com> <201312081237.24473.luke@dashjr.org>
	<CANAnSg2OrmQAcZ+cZdtQeADicH3U29QOgYPfP1AQhOMP6+P1wg@mail.gmail.com>
	<CAAS2fgR0khyJxmz9c2Oc87hOFgiNuiPJuaeugGajdo_EcKEW9w@mail.gmail.com>
Message-ID: <20131212205106.GA4572@netbook.cypherspace.org>

I think the one thing that SSL does provide is some protection against ARP
or DNS poisoning to trick the user into downloading from a different site.

The PGP WoT surrounding bitcoin or OS related ISOs be weak - I am not sure
if I could even check it directly myself despite spending a few hours
tracking down keys and checking fingerprints of biz cards of core devs I met
in person, then that is a relevant point.

Adam

On Sun, Dec 08, 2013 at 11:25:24AM -0800, Gregory Maxwell wrote:
>On Sun, Dec 8, 2013 at 11:16 AM, Drak <drak at zikula.org> wrote:
>> BGP redirection is a reality and can be exploited without much
>
>You're managing to argue against SSL. Because it actually provides
>basically protection against an attacker who can actively intercept
>traffic to the server. Against that threat model SSL is clearly? based
>on your comments? providing a false sense of security.
>
>We _do_ have protection that protect against that? the pgp signature,
>but they are far from a solution since people do not check that.
>
>(I'm not suggesting we shouldn't have it, I'm suggesting you stop
>arguing SSL provides protection it doesn't before you manage to change
>my mind!)
>
>------------------------------------------------------------------------------
>Sponsored by Intel(R) XDK
>Develop, test and display web and hybrid apps with a single code base.
>Download it for free now!
>http://pubads.g.doubleclick.net/gampad/clk?id=111408631&iu=/4140/ostg.clktrk
>_______________________________________________
>Bitcoin-development mailing list
>Bitcoin-development at lists.sourceforge.net
>https://lists.sourceforge.net/lists/listinfo/bitcoin-development



From gavinandresen at gmail.com  Fri Dec 13 00:20:50 2013
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Fri, 13 Dec 2013 10:20:50 +1000
Subject: [Bitcoin-development] Merge avoidance and P2P connection
	encryption
In-Reply-To: <CANEZrP33bRx6abbXcf6nQYiPXFOOWSsZJqiFZY+A08x6O3X+pg@mail.gmail.com>
References: <CANEZrP1gDxcKO8z4hgM9BJU6-+Ft0oaiCZjqjN4MxGEJCgs5Ng@mail.gmail.com>
	<CADu7o8MXuUVrRP0vsvEkPLJ4f=2pC6V7W3hYE0jCVDRKmvqu8A@mail.gmail.com>
	<CANEZrP33bRx6abbXcf6nQYiPXFOOWSsZJqiFZY+A08x6O3X+pg@mail.gmail.com>
Message-ID: <CABsx9T0VEu15KXH_XPn+cAERQFz=Tmjqna6ZoNpLrxkzeKw9kQ@mail.gmail.com>

On Fri, Dec 13, 2013 at 4:24 AM, Mike Hearn <mike at plan99.net> wrote:

> I think the right way to integrate BIP32 and BIP70 would be to specify
> output scripts as normal for backwards compatibility, and then allow each
> output to have an additional xpubkey and iteration count field. The
> iteration counts could be unsigned.
>

Why would there be an iteration count? The payer would handle that,
wouldn't they?

If the use case is:  I give the Foundation a "here's where to pay my
salary" PaymentRequest, maybe with several Outputs each having a different
xpubkey, then it seems to me the Foundation's wallet software should take
care of iterating.

(either saving state, so it knows it used xpubkey+10 last month and should
use xpubkey+11 this month, or maybe it knows I'm paid monthly and just uses
xpubkey+(number_of_months_from_date_in_original_payment_request).

-- 
--
Gavin Andresen
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131213/0db7c1e4/attachment.html>

From jgarzik at bitpay.com  Fri Dec 13 00:26:34 2013
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Thu, 12 Dec 2013 19:26:34 -0500
Subject: [Bitcoin-development] Merge avoidance and P2P connection
	encryption
In-Reply-To: <CABsx9T0VEu15KXH_XPn+cAERQFz=Tmjqna6ZoNpLrxkzeKw9kQ@mail.gmail.com>
References: <CANEZrP1gDxcKO8z4hgM9BJU6-+Ft0oaiCZjqjN4MxGEJCgs5Ng@mail.gmail.com>
	<CADu7o8MXuUVrRP0vsvEkPLJ4f=2pC6V7W3hYE0jCVDRKmvqu8A@mail.gmail.com>
	<CANEZrP33bRx6abbXcf6nQYiPXFOOWSsZJqiFZY+A08x6O3X+pg@mail.gmail.com>
	<CABsx9T0VEu15KXH_XPn+cAERQFz=Tmjqna6ZoNpLrxkzeKw9kQ@mail.gmail.com>
Message-ID: <CAJHLa0NUNpGWXv4WFhtkM0WXQMFmX98Tvp_O5p7aWqLXHf+H_A@mail.gmail.com>

On Thu, Dec 12, 2013 at 7:20 PM, Gavin Andresen <gavinandresen at gmail.com> wrote:
> If the use case is:  I give the Foundation a "here's where to pay my salary"
> PaymentRequest, maybe with several Outputs each having a different xpubkey,
> then it seems to me the Foundation's wallet software should take care of
> iterating.

Absolutely.  This is a key address-non-reuse case we really need to
solve.  Miner payouts, BitPay salary payouts, etc. all use a
statically provided, manually changed address.

Rotating through multiple outputs is a stopgap -- but IMO a useful
one.  HD wallets will solve this in a better way, but existing randkey
systems will be around for a long time.

-- 
Jeff Garzik
Bitcoin core developer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From pete at petertodd.org  Fri Dec 13 14:43:09 2013
From: pete at petertodd.org (Peter Todd)
Date: Fri, 13 Dec 2013 21:43:09 +0700
Subject: [Bitcoin-development] Merge avoidance and P2P
	connection	encryption
In-Reply-To: <CAJHLa0NUNpGWXv4WFhtkM0WXQMFmX98Tvp_O5p7aWqLXHf+H_A@mail.gmail.com>
References: <CANEZrP1gDxcKO8z4hgM9BJU6-+Ft0oaiCZjqjN4MxGEJCgs5Ng@mail.gmail.com>
	<CADu7o8MXuUVrRP0vsvEkPLJ4f=2pC6V7W3hYE0jCVDRKmvqu8A@mail.gmail.com>
	<CANEZrP33bRx6abbXcf6nQYiPXFOOWSsZJqiFZY+A08x6O3X+pg@mail.gmail.com>
	<CABsx9T0VEu15KXH_XPn+cAERQFz=Tmjqna6ZoNpLrxkzeKw9kQ@mail.gmail.com>
	<CAJHLa0NUNpGWXv4WFhtkM0WXQMFmX98Tvp_O5p7aWqLXHf+H_A@mail.gmail.com>
Message-ID: <38aa6d9e-15fa-46d2-80c8-1cde567290dd@email.android.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256

So, vendors hat on, what would it take for, say, BitPay to implement merge avoidance and coinjoin together?

At the dark wallet hackathon when we were talking usability we decided that the main way to get coinjoin working well is to take advantage of non-time-critical payments to act as counterparties to time-critical payments. For instance BitPay could schedule a vendor payment to happen in full by some time in the future, say 1 day, and send the funds in one or more joins. The actual amounts sent in each tx are then picked to match the amounts desired by the counterparty who needs funds sent right now.

We expect this to be first implemented just as a "anonymize my coins" button for wallet software on always on machines; getting vendors on board would be gravy.

We may even allow joins to happen when one party pays less fees than the other, although this is tricky: the main Sybil resistance of coinjoin is fees so you don't want to overdo it. OTOH the idea of the NSA and Chinese equivalent wasting money completing each others joins is hilarious...


Jeff Garzik <jgarzik at bitpay.com> wrote:
>On Thu, Dec 12, 2013 at 7:20 PM, Gavin Andresen
><gavinandresen at gmail.com> wrote:
>> If the use case is:  I give the Foundation a "here's where to pay my
>salary"
>> PaymentRequest, maybe with several Outputs each having a different
>xpubkey,
>> then it seems to me the Foundation's wallet software should take care
>of
>> iterating.
>
>Absolutely.  This is a key address-non-reuse case we really need to
>solve.  Miner payouts, BitPay salary payouts, etc. all use a
>statically provided, manually changed address.
>
>Rotating through multiple outputs is a stopgap -- but IMO a useful
>one.  HD wallets will solve this in a better way, but existing randkey
>systems will be around for a long time.
-----BEGIN PGP SIGNATURE-----
Version: APG v1.0.9

iQFQBAEBCAA6BQJSqxz9MxxQZXRlciBUb2RkIChsb3cgc2VjdXJpdHkga2V5KSA8
cGV0ZUBwZXRlcnRvZGQub3JnPgAKCRAZnIM7qOfwhTMBB/9L8h5NuSHxsC6W5ptm
gucxg2AbCwReuWQzRzqW42TYKQ7MnAhpfLLbSQrewNoXRP4H/j6aG8uWOt+z7fZf
pJZ9K8kxmSltHm8SJcmPLTb62yazEKQXF5TDsdpgBdH14M/pFsjUR4H2hypW8k4T
gcEAIhymZvlXev1NXDMh6rbuw0LtRTBE4NgE2buCuFzp0sEwTNTLxMU1WenMXfRQ
PooSBn8UoAVNw7Vztnag0T0f5D45VFNJBvQ8m42ee0u3gvMCa4JNRTBM49N2U9qc
Gk6WAvDakOf7FwaJiNMYoDpGyWphx6g697j28NnfB2q2hdjUVnZF+UVuBzkjnNwD
Y40/
=4dxZ
-----END PGP SIGNATURE-----




From mike at plan99.net  Fri Dec 13 17:26:59 2013
From: mike at plan99.net (Mike Hearn)
Date: Fri, 13 Dec 2013 09:26:59 -0800
Subject: [Bitcoin-development] Merge avoidance and P2P connection
	encryption
In-Reply-To: <CABsx9T0VEu15KXH_XPn+cAERQFz=Tmjqna6ZoNpLrxkzeKw9kQ@mail.gmail.com>
References: <CANEZrP1gDxcKO8z4hgM9BJU6-+Ft0oaiCZjqjN4MxGEJCgs5Ng@mail.gmail.com>
	<CADu7o8MXuUVrRP0vsvEkPLJ4f=2pC6V7W3hYE0jCVDRKmvqu8A@mail.gmail.com>
	<CANEZrP33bRx6abbXcf6nQYiPXFOOWSsZJqiFZY+A08x6O3X+pg@mail.gmail.com>
	<CABsx9T0VEu15KXH_XPn+cAERQFz=Tmjqna6ZoNpLrxkzeKw9kQ@mail.gmail.com>
Message-ID: <CANEZrP1ha6y-w1Cpq+7t1ogUwNmxSobEREY2tawp7bcFGRPKiw@mail.gmail.com>

>
> Why would there be an iteration count? The payer would handle that,
> wouldn't they?
>

I'm thinking about a use case I hope will become common next year -
pastebin style hosting sites for payment requests. Like, if I as a regular
end user wish to use the payment protocol, I could just upload a (possibly
signed) payment request to:

payr.com/a62gahZ

or whatever, and then payr.com can take care of incrementing the iteration
count on each download of my file. That's why it's useful for it to be
unsigned.


> If the use case is:  I give the Foundation a "here's where to pay my
> salary" PaymentRequest, maybe with several Outputs each having a different
> xpubkey, then it seems to me the Foundation's wallet software should take
> care of iterating.
>

Absolutely. The two use cases can both be supported. You could give
iteration ranges, for instance, if you want to specify expiry in terms of
number of payments rather than time.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131213/b1257578/attachment.html>

From mark at monetize.io  Fri Dec 13 19:19:05 2013
From: mark at monetize.io (Mark Friedenbach)
Date: Fri, 13 Dec 2013 11:19:05 -0800
Subject: [Bitcoin-development] Merge avoidance and P2P connection
	encryption
In-Reply-To: <CANEZrP1ha6y-w1Cpq+7t1ogUwNmxSobEREY2tawp7bcFGRPKiw@mail.gmail.com>
References: <CANEZrP1gDxcKO8z4hgM9BJU6-+Ft0oaiCZjqjN4MxGEJCgs5Ng@mail.gmail.com>	<CADu7o8MXuUVrRP0vsvEkPLJ4f=2pC6V7W3hYE0jCVDRKmvqu8A@mail.gmail.com>	<CANEZrP33bRx6abbXcf6nQYiPXFOOWSsZJqiFZY+A08x6O3X+pg@mail.gmail.com>	<CABsx9T0VEu15KXH_XPn+cAERQFz=Tmjqna6ZoNpLrxkzeKw9kQ@mail.gmail.com>
	<CANEZrP1ha6y-w1Cpq+7t1ogUwNmxSobEREY2tawp7bcFGRPKiw@mail.gmail.com>
Message-ID: <52AB5DA9.1060701@monetize.io>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On 12/13/2013 09:26 AM, Mike Hearn wrote:
> I'm thinking about a use case I hope will become common next year
> - pastebin style hosting sites for payment requests. Like, if I as
> a regular end user wish to use the payment protocol, I could just
> upload a (possibly signed) payment request to:
> 
> payr.com/a62gahZ <http://payr.com/a62gahZ>
> 
> or whatever, and then payr.com <http://payr.com> can take care of 
> incrementing the iteration count on each download of my file.
> That's why it's useful for it to be unsigned.

Or alternatively, the user-signed payment request without iteration
count is enclosed within a payr.com-signed envelope that contains the
iteration count. Having fields completely unsigned by anybody leaves
me a little nervous.

Mark
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.14 (GNU/Linux)
Comment: GPGTools - http://gpgtools.org
Comment: Using GnuPG with Thunderbird - http://www.enigmail.net/

iQIcBAEBAgAGBQJSq12pAAoJEAdzVfsmodw4MC4QAI9cjmQXz8AVawwr1htFc6b+
DVAAs1Y4hzbChPeeJCmy13m8a/BuXqc6G0WEWGSzIIa1or3IXCd01JQ2a5waD0IC
uOjlIMD0tTT7yxwxRjxPc2df82s82traGJC2caOMYjrN4T5VPtj7erB2poNyvOF+
p0lmj+duxUZ8IoyDaih5mgNKzIVujfX7o3lPoOMDdIi6Q1LF9SZ9XbUAxHCpCLfw
ieqVIm8zqtH0NprZ7/JLbqstl1iq5jCPKbORc+9qQWESZH1hFAeS29/ptjnRR8y6
HqrpDP236vSlrLDW4dLcW9UiQP42tSTwrLCgud08VqeKapSlMX8fjukLyNlTD7h5
GtPHEo1/j+LmpMfwsXA2OotUIVQBeFfEoi7PwV/Jd+SRVqC6zCTPky1lfg0P7JXA
7qD9m3u/Ey0+nk888zzff8N7AfBe7GaqFuUByXIyHh6dkcr0xUHBU4afiadFpNhg
8dTvmP4yqY0g05uz/Cq/ZqrSb5y/yPqsysuruAjWG2GT0M8rFM9oYepVHpUJr01K
QOHY6qSoqyX/KDCkZgpTMZFDq9gvyPyMFuCQbdecNcCeMPV5kiwPyqqH4rHliJ8I
gsXW44re5GfdL90nCOTboYFf2CFEn+66zyJ5vBskKSyDRDcU3t5YyCtrDzXdtJMu
MjVeMFRluY700zLBajw0
=+MjP
-----END PGP SIGNATURE-----



From mike at plan99.net  Fri Dec 13 21:49:23 2013
From: mike at plan99.net (Mike Hearn)
Date: Fri, 13 Dec 2013 13:49:23 -0800
Subject: [Bitcoin-development] Merge avoidance and P2P connection
	encryption
In-Reply-To: <52AB5DA9.1060701@monetize.io>
References: <CANEZrP1gDxcKO8z4hgM9BJU6-+Ft0oaiCZjqjN4MxGEJCgs5Ng@mail.gmail.com>
	<CADu7o8MXuUVrRP0vsvEkPLJ4f=2pC6V7W3hYE0jCVDRKmvqu8A@mail.gmail.com>
	<CANEZrP33bRx6abbXcf6nQYiPXFOOWSsZJqiFZY+A08x6O3X+pg@mail.gmail.com>
	<CABsx9T0VEu15KXH_XPn+cAERQFz=Tmjqna6ZoNpLrxkzeKw9kQ@mail.gmail.com>
	<CANEZrP1ha6y-w1Cpq+7t1ogUwNmxSobEREY2tawp7bcFGRPKiw@mail.gmail.com>
	<52AB5DA9.1060701@monetize.io>
Message-ID: <CANEZrP00qF+cikCe8_j6YY9Y5_meQkFMvh+BNeK0ZZYtvS2XjQ@mail.gmail.com>

>
> Or alternatively, the user-signed payment request without iteration
> count is enclosed within a payr.com-signed envelope that contains the
> iteration count.


But how does that show up in the user interface? I don't know how you would
explain what the signature means or implies, or what you do if the
signature is broken/missing.

The only thing that a maliciously modified iteration count can do is cause
money to be sent to an address that's beyond the recipients gap limit,
meaning they won't receive it (unless they reconfigure their software and
rescan). But you can't steal money that way.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131213/d20e2329/attachment.html>

From melvincarvalho at gmail.com  Sun Dec 15 18:09:59 2013
From: melvincarvalho at gmail.com (Melvin Carvalho)
Date: Sun, 15 Dec 2013 19:09:59 +0100
Subject: [Bitcoin-development] Web Crypto -- Named Curve Dictionary (adding
	secp256k1)
Message-ID: <CAKaEYh+=cFKzwW7J9j6Bz4P6OxTC56k3K1fFG4svg843QRTjVA@mail.gmail.com>

Harry and David suggested I send a message to this group.  I was wondering
if the crypto group may consider adding support for *secp256k1* in the
browser Named Curve dictionary.

http://www.w3.org/TR/WebCryptoAPI/#EcKeyGenParams-dictionary

enum NamedCurve {
  // NIST recommended curve P-256, also known as secp256r1.
  "P-256",
  // NIST recommended curve P-384, also known as secp384r1.
  "P-384",
  // NIST recommended curve P-521, also known as secp521r1.
  "P-521"
};

Over the last year, there has been a significant increase in deployment for
this curve.  It's used in bitcoin and many other crypto currencies.
Bitcoin deployment now numbers in the millions of users and hundreds of
companies.  There are also free software implementations in most
languages.

For more background on Koblitz curve used by bitcoin see:

https://bitcointalk.org/?topic=2699.0

I'm aware that the API tends to expose what's existing in NSS, but, imho,
if it were possible to add support for this curve would be a great step to
help to many people that already work with crypto currencies in the browser.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131215/c4e0d373/attachment.html>

From drak at zikula.org  Mon Dec 16 10:13:22 2013
From: drak at zikula.org (Drak)
Date: Mon, 16 Dec 2013 10:13:22 +0000
Subject: [Bitcoin-development] Fees UI warning
Message-ID: <CANAnSg0QnZQ2BNJRYm1SD4HePZJQZy3GuAejLXYH+rLFn34CtA@mail.gmail.com>

Not sure if this is the right place, but since a few wallet authors
congregate here I though it might be the best place.

It seems every once in a while you see stories of people accidentally
paying huge fees. Today I read about a man who paid a 20.14BTC fee for a
0.05 BTC transaction[1], oops. There was another recently where someone
paid a fee of about 200BTC which fortunately the pool operator refunded.

It just occurs to me this kind of sad story could be averted if wallets
implemented a confirmation box if the fee amount seems crazy - for example,
if it's >10x what the default fee should be, or if it's greater than x% of
the sending amount. "the fee seems unusually high, are you really sure you
want to pay X in fees?"

I realise the exact details of this might need to be fleshed out given we
want flexible fees, but it should be pretty simple to agree with what looks
like an unusually large fee according to the going rate.

Drak

[1]
http://www.reddit.com/r/Bitcoin/comments/1syu3h/i_lost_all_my_bitcoins_in_an_erroneous/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131216/b82d03e2/attachment.html>

From jim618 at fastmail.co.uk  Mon Dec 16 10:46:48 2013
From: jim618 at fastmail.co.uk (Jim)
Date: Mon, 16 Dec 2013 10:46:48 +0000
Subject: [Bitcoin-development] Fees UI warning
In-Reply-To: <CANAnSg0QnZQ2BNJRYm1SD4HePZJQZy3GuAejLXYH+rLFn34CtA@mail.gmail.com>
References: <CANAnSg0QnZQ2BNJRYm1SD4HePZJQZy3GuAejLXYH+rLFn34CtA@mail.gmail.com>
Message-ID: <1387190808.12225.60115997.547B23B6@webmail.messagingengine.com>

Yes I saw that on reddit too.

I think it applies mainly to custom transactions rather
than where fees are calculated automatically.

Another variant of not understanding change that loses
people's bitcoins I have encountered is:
1) Import a private key of a brainwallet/ paper wallet.
2) Send a small amount of bitcoin from that key.
3) The user then secure deletes all copies of the wallet
'for security'. If they are not careful they can delete
a change address with funds on it.

In MultiBit I have tried to reduce this possibility by:
1) Hiding the ability to delete wallet (in the next version
I am removing it entirely)
2) There is always a single key in a new wallet. When
a user imports a key then that makes two. I always send
the change to the second address, if it is available.
(This is bad for privacy but at least lessens the chances
that the funds become lost). 

If users are determined to use a brain wallet and 
secure delete every copy of the wallet after they use
them you cannot stop them (it is their machine after all)
But these two options help lessen the chance of bitcoin
loss if they do.

For the HD version of MultiBit we are removing the import
of individual private keys entirely and only supporting HD
addresses, primarily for safety reasons.

Jim

On Mon, Dec 16, 2013, at 10:13 AM, Drak wrote:
> Not sure if this is the right place, but since a few wallet authors
> congregate here I though it might be the best place.
> 
> It seems every once in a while you see stories of people accidentally
> paying huge fees. Today I read about a man who paid a 20.14BTC fee for a
> 0.05 BTC transaction[1], oops. There was another recently where someone
> paid a fee of about 200BTC which fortunately the pool operator refunded.
> 
> It just occurs to me this kind of sad story could be averted if wallets
> implemented a confirmation box if the fee amount seems crazy - for example,
> if it's >10x what the default fee should be, or if it's greater than x% of
> the sending amount. "the fee seems unusually high, are you really sure you
> want to pay X in fees?"
> 
> I realise the exact details of this might need to be fleshed out given we
> want flexible fees, but it should be pretty simple to agree with what looks
> like an unusually large fee according to the going rate.
> 
> Drak
> 
> [1]
> http://www.reddit.com/r/Bitcoin/comments/1syu3h/i_lost_all_my_bitcoins_in_an_erroneous/
> ------------------------------------------------------------------------------
> Rapidly troubleshoot problems before they affect your business. Most IT 
> organizations don't have a clear picture of how application performance 
> affects their revenue. With AppDynamics, you get 100% visibility into your 
> Java,.NET, & PHP application. Start your 15-day FREE TRIAL of AppDynamics Pro!
> http://pubads.g.doubleclick.net/gampad/clk?id=84349831&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development


-- 
http://bitcoin-solutions.co.uk



From drak at zikula.org  Mon Dec 16 11:08:56 2013
From: drak at zikula.org (Drak)
Date: Mon, 16 Dec 2013 11:08:56 +0000
Subject: [Bitcoin-development] Fees UI warning
In-Reply-To: <1387190808.12225.60115997.547B23B6@webmail.messagingengine.com>
References: <CANAnSg0QnZQ2BNJRYm1SD4HePZJQZy3GuAejLXYH+rLFn34CtA@mail.gmail.com>
	<1387190808.12225.60115997.547B23B6@webmail.messagingengine.com>
Message-ID: <CANAnSg1oWrjod8N-iQg5fTzyhXWxMfSSdcnvhtjWEWcWW7_LOg@mail.gmail.com>

Jim,

It's great to see the many ways wallet authors try to protect users from
easy to make mistakes, especially against losing funds.

But this issues isn't confined to custom transaction - some wallet
implementations have a fee field and almost all wallets allow the fee rate
to be configured in preferences. Sanity checking is sensible where a user
can override the calculated fee. Some wallets don't allow the fee to be
adjusted at all, but quite a few do.

Drak


On 16 December 2013 10:46, Jim <jim618 at fastmail.co.uk> wrote:

> Yes I saw that on reddit too.
>
> I think it applies mainly to custom transactions rather
> than where fees are calculated automatically.
>
> Another variant of not understanding change that loses
> people's bitcoins I have encountered is:
> 1) Import a private key of a brainwallet/ paper wallet.
> 2) Send a small amount of bitcoin from that key.
> 3) The user then secure deletes all copies of the wallet
> 'for security'. If they are not careful they can delete
> a change address with funds on it.
>
> In MultiBit I have tried to reduce this possibility by:
> 1) Hiding the ability to delete wallet (in the next version
> I am removing it entirely)
> 2) There is always a single key in a new wallet. When
> a user imports a key then that makes two. I always send
> the change to the second address, if it is available.
> (This is bad for privacy but at least lessens the chances
> that the funds become lost).
>
> If users are determined to use a brain wallet and
> secure delete every copy of the wallet after they use
> them you cannot stop them (it is their machine after all)
> But these two options help lessen the chance of bitcoin
> loss if they do.
>
> For the HD version of MultiBit we are removing the import
> of individual private keys entirely and only supporting HD
> addresses, primarily for safety reasons.
>
> Jim
>
> On Mon, Dec 16, 2013, at 10:13 AM, Drak wrote:
> > Not sure if this is the right place, but since a few wallet authors
> > congregate here I though it might be the best place.
> >
> > It seems every once in a while you see stories of people accidentally
> > paying huge fees. Today I read about a man who paid a 20.14BTC fee for a
> > 0.05 BTC transaction[1], oops. There was another recently where someone
> > paid a fee of about 200BTC which fortunately the pool operator refunded.
> >
> > It just occurs to me this kind of sad story could be averted if wallets
> > implemented a confirmation box if the fee amount seems crazy - for
> example,
> > if it's >10x what the default fee should be, or if it's greater than x%
> of
> > the sending amount. "the fee seems unusually high, are you really sure
> you
> > want to pay X in fees?"
> >
> > I realise the exact details of this might need to be fleshed out given we
> > want flexible fees, but it should be pretty simple to agree with what
> looks
> > like an unusually large fee according to the going rate.
> >
> > Drak
> >
> > [1]
> >
> http://www.reddit.com/r/Bitcoin/comments/1syu3h/i_lost_all_my_bitcoins_in_an_erroneous/
> >
> ------------------------------------------------------------------------------
> > Rapidly troubleshoot problems before they affect your business. Most IT
> > organizations don't have a clear picture of how application performance
> > affects their revenue. With AppDynamics, you get 100% visibility into
> your
> > Java,.NET, & PHP application. Start your 15-day FREE TRIAL of
> AppDynamics Pro!
> >
> http://pubads.g.doubleclick.net/gampad/clk?id=84349831&iu=/4140/ostg.clktrk
> > _______________________________________________
> > Bitcoin-development mailing list
> > Bitcoin-development at lists.sourceforge.net
> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
> --
> http://bitcoin-solutions.co.uk
>
>
> ------------------------------------------------------------------------------
> Rapidly troubleshoot problems before they affect your business. Most IT
> organizations don't have a clear picture of how application performance
> affects their revenue. With AppDynamics, you get 100% visibility into your
> Java,.NET, & PHP application. Start your 15-day FREE TRIAL of AppDynamics
> Pro!
> http://pubads.g.doubleclick.net/gampad/clk?id=84349831&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131216/a379b0a4/attachment.html>

From laanwj at gmail.com  Mon Dec 16 11:27:54 2013
From: laanwj at gmail.com (Wladimir)
Date: Mon, 16 Dec 2013 12:27:54 +0100
Subject: [Bitcoin-development] Fees UI warning
In-Reply-To: <CANAnSg0QnZQ2BNJRYm1SD4HePZJQZy3GuAejLXYH+rLFn34CtA@mail.gmail.com>
References: <CANAnSg0QnZQ2BNJRYm1SD4HePZJQZy3GuAejLXYH+rLFn34CtA@mail.gmail.com>
Message-ID: <CA+s+GJApRy+Y7bqWPNoQ3O1FooM0T1sBB2_jwzOg51q4Oc1RBg@mail.gmail.com>

On Mon, Dec 16, 2013 at 11:13 AM, Drak <drak at zikula.org> wrote:

> It just occurs to me this kind of sad story could be averted if wallets
> implemented a confirmation box if the fee amount seems crazy - for example,
> if it's >10x what the default fee should be, or if it's greater than x% of
> the sending amount. "the fee seems unusually high, are you really sure you
> want to pay X in fees?"
>

Bitcoin-qt (in master) always shows the fee and total amount that is going
to be paid in the confirmation dialog, so it is very hard to accidentally a
very high fee.

Wladimir
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131216/7422fe45/attachment.html>

From pieter.wuille at gmail.com  Mon Dec 16 11:31:11 2013
From: pieter.wuille at gmail.com (Pieter Wuille)
Date: Mon, 16 Dec 2013 12:31:11 +0100
Subject: [Bitcoin-development] Fees UI warning
In-Reply-To: <1387190808.12225.60115997.547B23B6@webmail.messagingengine.com>
References: <CANAnSg0QnZQ2BNJRYm1SD4HePZJQZy3GuAejLXYH+rLFn34CtA@mail.gmail.com>
	<1387190808.12225.60115997.547B23B6@webmail.messagingengine.com>
Message-ID: <CAPg+sBg6Fa2FZ=OkA78c2qte8jpn-S00JCSvbJ82-1XYwTkwXQ@mail.gmail.com>

On Mon, Dec 16, 2013 at 11:46 AM, Jim <jim618 at fastmail.co.uk> wrote:
> For the HD version of MultiBit we are removing the import
> of individual private keys entirely and only supporting HD
> addresses, primarily for safety reasons.

Will that also mean no longer reusing (change) addresses?

-- 
Pieter



From laanwj at gmail.com  Mon Dec 16 11:37:04 2013
From: laanwj at gmail.com (Wladimir)
Date: Mon, 16 Dec 2013 12:37:04 +0100
Subject: [Bitcoin-development] Fees UI warning
In-Reply-To: <1387190808.12225.60115997.547B23B6@webmail.messagingengine.com>
References: <CANAnSg0QnZQ2BNJRYm1SD4HePZJQZy3GuAejLXYH+rLFn34CtA@mail.gmail.com>
	<1387190808.12225.60115997.547B23B6@webmail.messagingengine.com>
Message-ID: <CA+s+GJB+qvYBhjzvut2WJCeVc35nmwwUwQM45w_6BYwbw2UawA@mail.gmail.com>

On Mon, Dec 16, 2013 at 11:46 AM, Jim <jim618 at fastmail.co.uk> wrote:

> For the HD version of MultiBit we are removing the import
> of individual private keys entirely and only supporting HD
> addresses, primarily for safety reasons.
>

I'd love to have the same in Bitcoin-Qt as well. Too many sob stories about
people with outdated backups that lost part or all of their coins. These
are much more common than fee messups.

What we should really do is:

- Use deterministic wallets. Making regular backups becomes optional (to
retain label and transaction data and such) instead of mandatory.

- Don't support importing private keys. Replace the importing of private
keys by a "sweep" function.

Wladimir
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131216/73f4c6a2/attachment.html>

From taylor.gerring at gmail.com  Mon Dec 16 17:55:11 2013
From: taylor.gerring at gmail.com (Taylor Gerring)
Date: Mon, 16 Dec 2013 11:55:11 -0600
Subject: [Bitcoin-development] Fees UI warning
In-Reply-To: <CA+s+GJB+qvYBhjzvut2WJCeVc35nmwwUwQM45w_6BYwbw2UawA@mail.gmail.com>
References: <CANAnSg0QnZQ2BNJRYm1SD4HePZJQZy3GuAejLXYH+rLFn34CtA@mail.gmail.com>
	<1387190808.12225.60115997.547B23B6@webmail.messagingengine.com>
	<CA+s+GJB+qvYBhjzvut2WJCeVc35nmwwUwQM45w_6BYwbw2UawA@mail.gmail.com>
Message-ID: <75261AAF-989D-4A9A-A99A-160B13BC6B09@gmail.com>

Providing people with a great user experience is something that Hive Wallet is enthusiastic about, so this is stuff we?re thinking about constantly. For example, how do you alert the user to abnormal activity (i.e. sending ?too much? on accident[1])? The removal of extraneous UI and functionality that can be automated is a priority, which is why we (to date) still don?t have a Preferences dialog. Smart defaults should be an important aspect of design decisions.

Thinking about stripping UI away as much as possible, consider what was done with dat.wallet[2]: no wallet file whatsoever and it doesn't even reveal the address except when explicitly necessary. For privacy?s sake, the intent should be to detect the use of an address and automatically rotate it away from the user. This minimal interaction results in maximum benefit.

Or take a look at the new Bitstamp app I?m writing for Hive[3]. How do you cram an entire trading API into a mobile-like window? Smart use of space and making intelligent event-driven decisions is often overlooked. In the linked screenshot, imagine the user actually clicks the deposit button. A ?send bitcoins" dialog is pre-populated with the deposit address and the requested amount. Copying and pasting addresses is error-prone and not user-friendly in the least.

I would urge all software developers to think about UX when developing applications. What can be automated? What can we make a best guess about? In the case of fees, we will hopefully have more control over them in the coming months, but in the meantime, consider what your application tries to accomplish and how it can do that without getting in the way too much. Software should enable the user, not encumber them.

Lastly, I?ll leave everyone with an approach we?re considering once floating fees are feasible[4], something Mike Hearn asked about in a previous thread.

[1] https://github.com/hivewallet/hive-osx/issues/107
[2] https://github.com/darkwallet/dat.wallet
[3] https://github.com/tgerring/hiveapp-bitstamptrader
[4] https://github.com/hivewallet/hive-osx/issues/148


Taylor


On Dec 16, 2013, at 5:37 AM, Wladimir <laanwj at gmail.com> wrote:

> On Mon, Dec 16, 2013 at 11:46 AM, Jim <jim618 at fastmail.co.uk> wrote:
> For the HD version of MultiBit we are removing the import
> of individual private keys entirely and only supporting HD
> addresses, primarily for safety reasons.
> 
> I'd love to have the same in Bitcoin-Qt as well. Too many sob stories about people with outdated backups that lost part or all of their coins. These are much more common than fee messups.
> 
> What we should really do is:
> 
> - Use deterministic wallets. Making regular backups becomes optional (to retain label and transaction data and such) instead of mandatory.
> 
> - Don't support importing private keys. Replace the importing of private keys by a "sweep" function.
> 
> Wladimir
> 
> ------------------------------------------------------------------------------
> Rapidly troubleshoot problems before they affect your business. Most IT 
> organizations don't have a clear picture of how application performance 
> affects their revenue. With AppDynamics, you get 100% visibility into your 
> Java,.NET, & PHP application. Start your 15-day FREE TRIAL of AppDynamics Pro!
> http://pubads.g.doubleclick.net/gampad/clk?id=84349831&iu=/4140/ostg.clktrk_______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131216/112aa966/attachment.html>

From mike at plan99.net  Mon Dec 16 18:26:10 2013
From: mike at plan99.net (Mike Hearn)
Date: Mon, 16 Dec 2013 19:26:10 +0100
Subject: [Bitcoin-development] Fees UI warning
In-Reply-To: <CAPg+sBg6Fa2FZ=OkA78c2qte8jpn-S00JCSvbJ82-1XYwTkwXQ@mail.gmail.com>
References: <CANAnSg0QnZQ2BNJRYm1SD4HePZJQZy3GuAejLXYH+rLFn34CtA@mail.gmail.com>
	<1387190808.12225.60115997.547B23B6@webmail.messagingengine.com>
	<CAPg+sBg6Fa2FZ=OkA78c2qte8jpn-S00JCSvbJ82-1XYwTkwXQ@mail.gmail.com>
Message-ID: <CANEZrP2igjVPOmiOXcfYXbNspeL=9q1QO5=uza6wvMSdnp-y2A@mail.gmail.com>

On Mon, Dec 16, 2013 at 12:31 PM, Pieter Wuille <pieter.wuille at gmail.com>wrote:

> Will that also mean no longer reusing (change) addresses?
>

Jim seems to be planning some parallel development to what I'm doing, but
HD wallets and stopping address re-use is the current feature I'm working
on for bitcoinj. Only code review and merging takes higher priority at the
moment. So I think we might be able to stop re-using addresses at least on
devices with sufficient memory some time in Q1
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131216/1596fb64/attachment.html>

From mike at plan99.net  Mon Dec 16 18:28:08 2013
From: mike at plan99.net (Mike Hearn)
Date: Mon, 16 Dec 2013 19:28:08 +0100
Subject: [Bitcoin-development] Fees UI warning
In-Reply-To: <CANAnSg0QnZQ2BNJRYm1SD4HePZJQZy3GuAejLXYH+rLFn34CtA@mail.gmail.com>
References: <CANAnSg0QnZQ2BNJRYm1SD4HePZJQZy3GuAejLXYH+rLFn34CtA@mail.gmail.com>
Message-ID: <CANEZrP1Fm2cEEXNih7arWoLPNEU4d=y0QZxqi30q+n0wh9nV-w@mail.gmail.com>

On Mon, Dec 16, 2013 at 11:13 AM, Drak <drak at zikula.org> wrote:

> It just occurs to me this kind of sad story could be averted if wallets
> implemented a confirmation box if the fee amount seems crazy - for example,
> if it's >10x what the default fee should be, or if it's greater than x% of
> the sending amount.
>

Most good wallets have UI's designed to be safe. Unfortunately this guy was
using brainwallet.org which is by no means a "good" wallet in that sense
(it's not really even a wallet app at all)

I think most of us have expressed displeasure at the existence of this site
before, and I once even asked the guy to stop running it, but he refused.
It's an extremely sharp tool which makes it easy to cut yourself, except it
doesn't look dangerous, it looks like ordinary software designed for
ordinary people.

I don't know how to solve this. Badly designed software that looks
appealing will always be a danger.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131216/55cc6b23/attachment.html>

From gmaxwell at gmail.com  Mon Dec 16 18:45:57 2013
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Mon, 16 Dec 2013 10:45:57 -0800
Subject: [Bitcoin-development] Fees UI warning
In-Reply-To: <CA+s+GJB+qvYBhjzvut2WJCeVc35nmwwUwQM45w_6BYwbw2UawA@mail.gmail.com>
References: <CANAnSg0QnZQ2BNJRYm1SD4HePZJQZy3GuAejLXYH+rLFn34CtA@mail.gmail.com>
	<1387190808.12225.60115997.547B23B6@webmail.messagingengine.com>
	<CA+s+GJB+qvYBhjzvut2WJCeVc35nmwwUwQM45w_6BYwbw2UawA@mail.gmail.com>
Message-ID: <CAAS2fgRLWLgOvZLA3NUgnqrHz=mSUNU3y9GJbPdyZNAfRS3=qQ@mail.gmail.com>

On Mon, Dec 16, 2013 at 3:37 AM, Wladimir <laanwj at gmail.com> wrote:
> What we should really do is:
> - Use deterministic wallets. Making regular backups becomes optional (to
> retain label and transaction data and such) instead of mandatory.
> - Don't support importing private keys. Replace the importing of private
> keys by a "sweep" function.

I'd add a third: make structured key-management possible, e.g.

At a minimum:  Users should be able to hit a "retire keys / keys
possibly compromised" button, which creates a new seed, forces the
user to make a backup (and allows more than one), then switches to the
new seed and moves all their coins.

On Mon, Dec 16, 2013 at 10:28 AM, Mike Hearn <mike at plan99.net> wrote:
> I don't know how to solve this. Badly designed software that looks appealing
> will always be a danger.

"We didn't say it couldn't be done?  We said don't do it!"

Part of the challenge here is that the service does a number of things
people _really_ shouldn't be doing? things so dangerous that I
certainly won't do them? and as a result to not use the site turn into
big education efforts rather than just "use this other thing (that
also does the wrong headed thing you want to do)".



From andreas at schildbach.de  Mon Dec 16 22:32:30 2013
From: andreas at schildbach.de (Andreas Schildbach)
Date: Mon, 16 Dec 2013 23:32:30 +0100
Subject: [Bitcoin-development] Fees UI warning
In-Reply-To: <CANEZrP1Fm2cEEXNih7arWoLPNEU4d=y0QZxqi30q+n0wh9nV-w@mail.gmail.com>
References: <CANAnSg0QnZQ2BNJRYm1SD4HePZJQZy3GuAejLXYH+rLFn34CtA@mail.gmail.com>
	<CANEZrP1Fm2cEEXNih7arWoLPNEU4d=y0QZxqi30q+n0wh9nV-w@mail.gmail.com>
Message-ID: <l8nv1j$q3c$1@ger.gmane.org>

On 12/16/2013 07:28 PM, Mike Hearn wrote:

> I don't know how to solve this. Badly designed software that looks
> appealing will always be a danger.

One way would be to explicitly warn against some services. For example,
on the "Choose you wallet" page of bitcoin.org.






From hozer at hozed.org  Tue Dec 17 22:41:30 2013
From: hozer at hozed.org (Troy Benjegerdes)
Date: Tue, 17 Dec 2013 16:41:30 -0600
Subject: [Bitcoin-development] RFC: MERGE transaction/script/process for
	forked chains
Message-ID: <20131217224130.GC3180@nl.grid.coop>

I want to get some feedback.. I've used distributed version control 
systems for a long time, and the most useful feature is to be able
to merge two different forks.

So what's the equivalent of this for Bitcoin or other crypto-currencies?

Let's suppose that me and my friends get 'islanded' from the rest of
the internet for a week, but we still want to trade bitcoin. It would
work if there are local miners, until we reconnect.

Suppose we have the main chain (Alice), while bob is on a boat, trading
with some friends, but has no network connectivity.

When bob reconnects with Alice, a 'Merge' transaction happens where a 
miner looks at bob's forked blockchain, sees no double-spends, and 
includes BOTH chains.

Now suppose someone on bob's boat has a buggy client, or sent a 
transaction before disconnect that results in a double-spend on the 
merge.

So we have a merge conflict, which generally requires human interaction,
so bob and his friends broadcast a MERGE request with a transaction fee
sufficient to cover reconciling the double-spends, AND incentivize a 
miner to do some extra work to merge.

Thoughts everyone?

-- Troy



From gmaxwell at gmail.com  Tue Dec 17 22:48:14 2013
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Tue, 17 Dec 2013 14:48:14 -0800
Subject: [Bitcoin-development] RFC: MERGE transaction/script/process for
 forked chains
In-Reply-To: <20131217224130.GC3180@nl.grid.coop>
References: <20131217224130.GC3180@nl.grid.coop>
Message-ID: <CAAS2fgT5S8x6njU6Le9tNwR_QWnoSGzfK38VLgnFfR=p=+t72g@mail.gmail.com>

On Tue, Dec 17, 2013 at 2:41 PM, Troy Benjegerdes <hozer at hozed.org> wrote:
> I want to get some feedback.. I've used distributed version control
> systems for a long time, and the most useful feature is to be able
> to merge two different forks.

We already automatically merge forks that we become aware of simply by
pulling in all the novel non-conflicting transactions the fork
contains and including them in our next blocks.



From mark at monetize.io  Tue Dec 17 22:48:46 2013
From: mark at monetize.io (Mark Friedenbach)
Date: Tue, 17 Dec 2013 14:48:46 -0800
Subject: [Bitcoin-development] RFC: MERGE transaction/script/process for
 forked chains
In-Reply-To: <20131217224130.GC3180@nl.grid.coop>
References: <20131217224130.GC3180@nl.grid.coop>
Message-ID: <52B0D4CE.9020108@monetize.io>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Transactions != blocks. There is no need for a "merge" block.

You are free to trade transactions off-line, so long as you are
certain the other parties are not secretly double-spending coins they
send you on the block chain.

When connection to the bitcoin network is re-established, you simply
transmit the transactions and in the regular course of things they
make their way into one of the next blocks.

Any transactions which derive from the double-spent one are invalid.
But that's your problem, not the miners - chase after Bob and get him
to give you the money he owes.

On 12/17/2013 02:41 PM, Troy Benjegerdes wrote:
> I want to get some feedback.. I've used distributed version control
>  systems for a long time, and the most useful feature is to be
> able to merge two different forks.
> 
> So what's the equivalent of this for Bitcoin or other
> crypto-currencies?
> 
> Let's suppose that me and my friends get 'islanded' from the rest
> of the internet for a week, but we still want to trade bitcoin. It
> would work if there are local miners, until we reconnect.
> 
> Suppose we have the main chain (Alice), while bob is on a boat,
> trading with some friends, but has no network connectivity.
> 
> When bob reconnects with Alice, a 'Merge' transaction happens where
> a miner looks at bob's forked blockchain, sees no double-spends,
> and includes BOTH chains.
> 
> Now suppose someone on bob's boat has a buggy client, or sent a 
> transaction before disconnect that results in a double-spend on the
>  merge.
> 
> So we have a merge conflict, which generally requires human
> interaction, so bob and his friends broadcast a MERGE request with
> a transaction fee sufficient to cover reconciling the
> double-spends, AND incentivize a miner to do some extra work to
> merge.
> 
> Thoughts everyone?
> 
> -- Troy
> 
> ------------------------------------------------------------------------------
>
> 
Rapidly troubleshoot problems before they affect your business. Most IT
> organizations don't have a clear picture of how application
> performance affects their revenue. With AppDynamics, you get 100%
> visibility into your Java,.NET, & PHP application. Start your
> 15-day FREE TRIAL of AppDynamics Pro! 
> http://pubads.g.doubleclick.net/gampad/clk?id=84349831&iu=/4140/ostg.clktrk
>
> 
_______________________________________________
> Bitcoin-development mailing list 
> Bitcoin-development at lists.sourceforge.net 
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.14 (GNU/Linux)
Comment: GPGTools - http://gpgtools.org
Comment: Using GnuPG with Thunderbird - http://www.enigmail.net/

iQIcBAEBAgAGBQJSsNTOAAoJEAdzVfsmodw4rBUP/jBFvPks4h0k1GQEPQPYvqNa
3OhuSlC9EfHmjXxftj6j0lH6JO60BFIoA3P76oFycQRqzNSw3YoldQ1MttpNAAZg
ftiJJjYcuVmDYYWxfWPZN7ZsHrrhGkMn+i0PB1vXU3PB3sStb18vhbIoTZmwH7Rk
vaUaX8EKFh6R8Y+6nqFMKu8eALaFQPJFP1aNo31ixsFFJrl02zQeIZiTbrOensEj
6AhXm2oYRqB1aolMmy/m5zcA3IicayJ6seoCQcRhPty6G2l+/4opgATdEBjzgczW
Yhw20YkayyvPa+Fsqwad5AzgGYbm7OA0U6mO/pfeNhglNSt/TGfuSPe1oM9hWt9/
8gP3PG4O4Fxi+gOAlNABgmoRKvQK8T3TX+eoayxPJiLxi+5l3+1CK0FK1+mKPThr
heFrc5e9QlUIgATOpLYSs/elgAFM6N2Sez+RNiOg201M10VVKqXzBgZRQ+IYRRk6
jbaBKxsQ/ql5+2vwaUkplg/6Y6rfvRItQ+8xwXEvxazPAAh3Mp0fPbqas+F0e1Ie
SwVTq517iV7eu+kMxOJEqaCky8ihbaUmshjeEccXdbodpygxCR2dZ0xAkvwXYtnK
+ZjLQ7o8ySZs89Jvdx8H2fsu6m3hS/7Mm+zJVGV/hLHLoL7IrYPzTHcOHv8eT106
IYM30Hv+vDrt+f8ZRZ80
=09Pt
-----END PGP SIGNATURE-----



From luke at dashjr.org  Tue Dec 17 22:50:24 2013
From: luke at dashjr.org (Luke-Jr)
Date: Tue, 17 Dec 2013 22:50:24 +0000
Subject: [Bitcoin-development] RFC: MERGE transaction/script/process for
	forked chains
In-Reply-To: <20131217224130.GC3180@nl.grid.coop>
References: <20131217224130.GC3180@nl.grid.coop>
Message-ID: <201312172250.24887.luke@dashjr.org>

On Tuesday, December 17, 2013 10:41:30 PM Troy Benjegerdes wrote:
> I want to get some feedback.. I've used distributed version control
> systems for a long time, and the most useful feature is to be able
> to merge two different forks.
> 
> So what's the equivalent of this for Bitcoin or other crypto-currencies?
> 
> Let's suppose that me and my friends get 'islanded' from the rest of
> the internet for a week, but we still want to trade bitcoin. It would
> work if there are local miners, until we reconnect.
> 
> Suppose we have the main chain (Alice), while bob is on a boat, trading
> with some friends, but has no network connectivity.
> 
> When bob reconnects with Alice, a 'Merge' transaction happens where a
> miner looks at bob's forked blockchain, sees no double-spends, and
> includes BOTH chains.
> 
> Now suppose someone on bob's boat has a buggy client, or sent a
> transaction before disconnect that results in a double-spend on the
> merge.
> 
> So we have a merge conflict, which generally requires human interaction,
> so bob and his friends broadcast a MERGE request with a transaction fee
> sufficient to cover reconciling the double-spends, AND incentivize a
> miner to do some extra work to merge.
> 
> Thoughts everyone?

This is interesting, but I'm not sure it has the right incentives. First, it 
adds more reason for miners to *avoid* including transactions (they might turn 
out to be double-spends and make merging costly). Second, it gives people 
reason to double-spend (the miner might cover the cost of it). Finally, you 
don't appear to address how to deal with the subsidy - do both miners get it?

Luke



From hozer at hozed.org  Wed Dec 18 06:03:53 2013
From: hozer at hozed.org (Troy Benjegerdes)
Date: Wed, 18 Dec 2013 00:03:53 -0600
Subject: [Bitcoin-development] RFC: MERGE transaction/script/process for
 forked chains
In-Reply-To: <CAAS2fgT5S8x6njU6Le9tNwR_QWnoSGzfK38VLgnFfR=p=+t72g@mail.gmail.com>
References: <20131217224130.GC3180@nl.grid.coop>
	<CAAS2fgT5S8x6njU6Le9tNwR_QWnoSGzfK38VLgnFfR=p=+t72g@mail.gmail.com>
Message-ID: <20131218060353.GD3180@nl.grid.coop>

On Tue, Dec 17, 2013 at 02:48:14PM -0800, Gregory Maxwell wrote:
> On Tue, Dec 17, 2013 at 2:41 PM, Troy Benjegerdes <hozer at hozed.org> wrote:
> > I want to get some feedback.. I've used distributed version control
> > systems for a long time, and the most useful feature is to be able
> > to merge two different forks.
> 
> We already automatically merge forks that we become aware of simply by
> pulling in all the novel non-conflicting transactions the fork
> contains and including them in our next blocks.

Now maybe this is a fatal flaw with Bitcoin's hard upper limit for number
of coins, but any miners that with good faith tried to support an islanded
bitcoin network now have generate transactions that get clobbered when
the network reconnects.

I can imagine a way to do this with some freicoin-like demurrage, which
would only impact new coinbase based on the percentage of the hashing
power that was on the other side of the fork. So if you are with the
95% of hashing power, you keep 95% of the new coins when the other 5%
shows back up from being islanded.

And this is also way more complicated than what I had first imagined
to do securely and reliably.



From pete at petertodd.org  Thu Dec 19 13:17:06 2013
From: pete at petertodd.org (Peter Todd)
Date: Thu, 19 Dec 2013 08:17:06 -0500
Subject: [Bitcoin-development] DarkWallet Best Practices
Message-ID: <20131219131706.GA21179@savin>

Here's my draft. I don't claim this to be "official", but I think this
should represent the consensus we've come to at the DarkWallet
Hackathon; I'm writing it up as an email in part to preserve a record of
that consensus.


* General Principles

We believe in decentralization, user-defined privacy, education as
opposed to "magic", and security based on openness rather than just
trust. We consider users who are individuals as well as the needs of
businesses such as merchants and exchanges. We recognize that often the
more people who use privacy protection technologies such as CoinJoin,
the better protected we all are.


* Privacy

Bitcoin inherently makes the flow of money visible, however it does not
require that flow to have real-world identities attached, or even for
that matter, pseudonyms. We see this as an unfortunate flaw in the
Bitcoin protocol that is to be corrected; the Satoshi whitepaper itself
included one such correction by outlining how avoiding address re-use
helped preserve privacy.


** Threat model

We assume a worst-case sophisticated state-level attacker with the goal
of deanonymizing and otherwise subverting Bitcoin users. Such an
attacker can be assumed to control up to 100% of the Bitcoin relay
network as well as have the ability to wiretap up to 100% of the
node-to-node traffic. (for nodes that they do not control) Such
attackers are however constrained by politics and budget. We assume they
use their ability to conduct MITM attacks sparingly - for instance by
subverting certificate authorities - due to the risk of detection. (note
how such attackers may be more willing to use detectable attacks in the
future now that their activities are public knowledge) We also assume
that while their budgets for individual targets may be very large, the
equally large number of targets required for en-mass survailance leads
to relatively low budgets per target. In particular note how the 51%
assumption assumes that the overall "economic value" of Bitcoin to its
participants is greater than the attacker's budget by some margin.


** Address re-use

Wallet software SHALL avoid address re-use. New addresses will be used
for all change and users will be encouraged through the user-interface
and other measures to use new addresses for every payment to the wallet.


** CoinJoin

With CoinJoin the more users that make use of it, the larger the
anonymity set and the better protected user privacy is. Thus we
encourage wallet software to agressively make trade-offs between
absolute privacy and usability; compromise is not a dirty word.

Wallet software SHALL implement basic two-party mix functionality and
MAY implement more sophisticated CoinJoin functionality such as n-party
mixes. CoinJoin SHALL be the default way that all transactions are sent.
Wallet authors are cautioned that more sophisticated functionality may
be more secure in theory, but if users do not use it the functionality
is wasted; focus on the general case first and only then try to improve.


*** Two-Party Mixes

The most basic form of CoinJoin is for two parties to author a
transaction. A key distinction between a 2 party mix and an n-party mix
is that in the two party case both parties automatically learn the
other's inputs and outputs by simple elimination; sophisticated
cryptographic blinding protocols are useless. To an external attacker
each transaction doubles the size of the anonymity set: the coins may
have come from one party or the other and the attacker has no way of
knowing which. (modulo value analysis, which will be discussed later)


*** n-party Mixes and Blinding

If two parties can jointly author a transaction, n parties can too.
Without special effort this has the disadvantage of revealing the input
to output mapping to all parties. Various cryptographic blinding schemes
have been proposed to fix this problem, either with multi-party
computational techniques, or by making use of multiple communication
channels along with a robust anti-DoS scheme. In either case, for now we
reject such schemes as complex and inconvenient and prioritize robust
two-party mixing. However we do take the existance of such schemes into
account; note how a n-party mix can act as a single party in a two-party
mix scheme.


*** Four-stage two-party mix protocol

<on the wiki>


*** Defeating value analysis

Attackers can make good guesses at the mapping of inputs to outputs
based on value. For instance with two inputs of 3 and 5, and fours
outputs of 1.4, 1.6, 2.4 and 2.6 the attacker can easily map inputs to
outputs based on what values match up, in this case 3 split into 1.6 and
1.4, and 5 split into 2.4 and 2.6


**** Value Matching

Not all CoinJoin users need their transactions to have specific output
amounts; some users simply need to move money from one place to another
but do not need a specific amount moved or at a specific time. These
users can assist users with more stringent requirements by matching the
input or output values they request. As a general principle wallets
SHOULD make these anonymity optimizations possible by allowing users to
schedule transactions to complete by a specific time and/or allow users
to specify that they do not wish the transaction to happen unless
CoinJoin is used.

With four-stage two-party mixes the Alice, who advertised a desire to do
a transaction first, can easily do ths by picking the transaction output
amounts only after Bob replies with his desired inputs and outputs, and
picking those amounts so they match Bob's. (or some combination of Bob's
outputs)


**** Merge Avoidance

Merge avoidance is the practice of avoiding the merging of multiple
transaction inputs into a single new transaction output, thus implying a
common relationship between those inputs. The most primitive form of
merge avoidance is to create multiple individual transactions, each
moving single transaction input to an output. (or perhaps some small
number) This is of course inefficient, and appears to have only been
proposed as a means to still allow for coin blacklists to function while
preserving some financial privacy.

Combined with CoinJoin however merge avoidance becomes much more
powerful. For instance even in its most simple form multiple parties can
combine their merge-avoiding transaction sets, giving even transactions
without actual counterparties a useful measure of plausible deniability.

In addition the underlyng features that make merge-avoidance possible -
the ability of a recipient to designate they are willing to receive
payments made to multiple addresses - synergisticly make very
sophisticated value matching strategies possible.


***** Cut-thru payments

Related to merge avoidance the idea of a cut-thru payment is that if an
intermediary is both a debitor and a creditor, with sophisticated
payment protocols they can request incoming payments to directly pay
outgoing liabilities, skipping them as an intermediary. While premature
to implement this feature now, it is worth thinking about for the future.


** Tor

While Tor isn't perfect there is real-world evidence - specifically the
Snowden leaks - that it works well enough to be considered a worthy
adversary by state-level attackers. Wallets MUST suppoort the basic
proxy options that allow the Tor proxy - or some other similar
technology - to be used for privacy enhancement and SHOULD make use of
Tor-specific features such as hidden services.


* Decentralization

** Fees

In a decentralized system distinguishing DoS attackers from legitimate
users is at best difficult, at worst impossible. Wallets that do not
provide users with the ability to set fees, both when a transaction is
created initially and after initial broadcast, do their users a
disservice by taking away a vital method of responding to an attack:
outspending the attacker.

Wallets MUST give users the ability to set the fee per KB they are
willing to pay for their transactions. Wallets SHOULD allow users to
change that fee after the fact via transction replacement. Wallets MAY
additionally implement fee estimation techniques, such as watching what
transactions in the mempool are finally mined, or using estimates
provided by miners. However it must be recognized that such data is
inherently unreliable, and this may become a problem in practice in the
future; giving users robust ways to alter fees after the fact will make
lying about fee data - perhaps to push fees upwards - less advantageous.

Note that the current direction of the Bitcoin Foundation maintained
reference implementation is weakly towards a pure estimation scheme;
deployment of full nodes supporting replacement and support from miners
is a precondition to doing things correctly.


*** Fees and privacy

Where there is a trade-off between fees and privacy - such as with merge
avoidance strategies - users should be given options to specify how much
extra they are willing to pay for extra privacy. Wallets SHOULD default
to being willing to pay some extra, perhaps 25% more over the basic fee.


** SPV, full nodes and partial nodes

Wallet software SHOULD whenever possible blur the distinctions between
full UTXO set nodes, SPV nodes, and partial UTXO set nodes. In addition
to those three basic categories there is also the question of whether or
not a node stores archival blockchain data, something that all three
categories of nodes can participate in.

Instead how a node contributes back to the health of the network should
be a function of what resources it has available to it. Of course in
some cases, like a phone wallet, that won't be very much, but for
desktop or business usage the resources available can be significant in
both bandwidth and storage capacity.


*** Relaying data

**** Blocks and blockheaders

Any node can safely relay blocks and block headers, where "safely" is
defined as SPV-level security. Our threat model implies that we don't
trust random peers on the network, thus we are not relying on them for
block validity; as a SPV node we are relying on miners to do validity
checking for us. In short feel free to relay data that you yourself
would trust.


**** Transactions

Remember that relaying transactions has a DoS-attack risk; the Bitcoin
model relies entirely on mining fees and/or priority as the limited
resource to prevent DoS attacks. Thus at present nodes SHOULD NOT relay
transactions if they do not have an up-to-date copy of the relevant
parts of the UTXO set spent by the transaction. (relaying transactions
spending only inputs in a partial UTXO set is acceptable):


**** Block-header diversity

Wallet software MUST make it possible to get block-header information
from a diverse set of sources. These sources SHOULD comprise more than
just peers on a single P2P network. Remember that it is acceptable to
use even centralized sources in addition to decentralized ones for
blockheader data - knowing that a miner did the work required to create
a block header is always valuable information. (for reasonable amounts
of work) For instance the author's block headers over twitter project -
while an April Fools joke - is equally a perfectly reasonable backup
source of blockheader data.


** Updating wallets from blockchain data

In an ideal world wallets wouldn't need to sync their state with
blockchain data at all: pervasive use of payment protocols would have
senders send txout proofs directly to recipients. But that's not the
case. Instead wallet implementations sync themselves from the
blockchain, and when bandwidth limited this becomes a tradeoff between
bandwidth and privacy: your transactions hide in the anonymity set of
the false positives matched by the filter.


*** Bloom filters

The current implementation for SPV nodes is to simply give peers a bloom
filter; the false-positives make the anonymity set. For n peers this has
O(n) cost when a new block comes in; Bloom filters are cheap to test
against and this system works reasonably well.

However, for archival blockchain data bloom filters are seriously
flawed: every block has to be read from disk in full, the bloom filter
matched, and some (potentially very small!) subset sent to the peer. n
peers. The result is high IO load on the node relative to the client,
enabling easy DoS attacks.

Wallet software SHOULD NOT implement only Bloom filters, however using
them when availalbe is acceptable. Note how the Bloom filter design has
at best O(n^2) scaling ruling it out for large-blocksize future
scenarios.


*** Prefix filters

TXO or UTXO data can be easily indexed by in radix trees with log2(k)
lookup cost per query. We can take advantage of the fact that the query
keys need not be provided in full by only providing partial keys.
Because scriptPubKeys are randomly distributed a prefix n bits long has
an anonymity set of roughly 1/2^n * # of transactions in total.

Wallet software SHOULD implement prefix filters and SHOULD use them in
preference to bloom filters whenever available. Wallet software that
currently uses full-key filtering - e.g. Electrum - MUST be upgraded to
support prefix filters in the future.

Wallet software MUST NOT assume that matching anyting other than
H(scriptPubkey) is possible. This applies to bloom filter matches as
well.

In the future miners may commit to either the TXO set in conjunction
with per-block lookup trees, or possibly the full UTXO set. In either
case many of the leading designs may be implemented with only
H(scriptPubKey) lookup capability for reasons of scalability.


* Security

Bitcoin wallet software is unprecedented in how they provide attackers
targets that are highly profitable to attack and highly liquid. (note
the irony here!) A succesfull attack that injects malicious theft
routines into either sourcecode or binaries can steal thousands of
Bitcoins in one go, and the attacks target is you and your team.
Following basic good practices for robust code is a start, but it's far
from enough.


** Source-code integrity

Sourcecode MUST be maintained using a revision control system that
provides strong integrity guarantees; git is recommended.

Sourcecode MUST be PGP signed on a regular basis. Releases MUST be
signed - in git this is accomplished by signing the release tag.
Individual commits SHOULD be signed, particularly if source-code used in
day-to-day development is kept on an untrusted server, e.g. github.
Recovering from a server compromise is made significantly easier if
every commit is securely signed.


** Binary integrity

All things being equal it is better to use an interpreted language
rather than a compiled one; auditing the former is significantly easier
than the latter. Similarly, all things being equal, do not distribute
binaries of your software - have end-users compile binaries themselves.

Of course all things are not equal, and frequently compiled languages
and distributing binaries is the correct choice. If that is the case
deterministic build systems MUST be used when possible; if using them is
not possible take great care with the process by which binaries are
created and try to create long-term plans to move to a deterministic
build system in the future.


** PGP

Developers of wallet software MUST make use of PGP and participate in
the web-of-trust. Developers MUST advertise their PGP fingerprint
widely, for instance on personal websites, forum profiles, business
cards etc. simultaneously. Multiple paths by which someone can find a
fingerprint claimed to be of some developer make subterfuge easier to
detect and more costly to carry out. When possible it is highly
recommended to attach these advertisements to real-world, physical,
actions. For instance the author has included his PGP fingerprint in
highly public, videotaped, talks he has given at conferences. He has
also created a videotaped statement of his PGP key that was timestamped
in the Bitcoin blockchain. While it certainly is possible for such
artifacts to be faked, doing so convincingly is expensive, labour
intensive, and error prone.

Developers SHOULD sign as much communication as practical. Sourcecode is
one form; your emails to development lists and between each other are
another. Signing both leaves a large body of widely distributed work,
all tied to your identity. (it's highly unfortunate that nearly all
publicly available mail archives do not make mail accessible to the
public in such a way as to allow verification of PGP signatures; often
even inline signatures are broken for various reasons)


*** Increasing adoption of PGP

Keep in mind that end-users very rarely verify PGP fingerprints at all,
let alone correctly - the above advice with regard to PGP is currently
mostly useful in allowing *other developers* the tools they need to
verify the integrity of your code. For instance, in the event of a
suspected compromise consistantly signed code allows anyone competent in
the use of PGP to quickly evaluate the situation, and if warrented,
inform less sophisticated users through traditional measures such as the
media.

While this is somewhat out of scope for this document the "DarkWallet
effort" should include work to make PGP more user-friendly and a better
experience. But that does *not* have to mean "making PGP easier for
grama", right now "making PGP easier for Joe Wallet Developer" is a
laudable goal. For instance understanding and using the web-of-trust
sucks right now. How can we make that experience better for a user who
understands the basics of cryptography?


** SSL/Certificate authorties

While certificate authorities are notoriously bad at the job they are
supposed to be doing the CA system is still better than nothing - use it
where appropriate. For instance if you have a website advertising your
software, use https rather than http.


** Multi-factor spend authorization, AKA multisig wallets

<mainly discussed at the conference in terms of multiple individuals
controlling funds, which is out of scope for this document>

Assuming any individual device is uncompromised is risky; wallet
software SHOULD support some form of multi-factor protection of some or
all wallet funds. Note that this is a weak "should"; mainly we want to
ensure that users have options to keep large quantities of funds secure;
accepting higher risks for smaller quantities is an acceptable
trade-off.

FIXME: go into more detail.


*** P2SH

Wallet software MUST support paying funds to P2SH addresses.


** Payment Integrity

Multi-factor wallets protect your funds from being spent without your
knowledge, but they provide no assurance about where those funds went; a
Bitcoin address is not an identity. A payment protocol, such as BIP70,
is needed.

Wallet software SHOULD support BIP70. Yes, there are (justified)
concerns about its current dependence on the certificate authority
system, but those concerns should be addressed by a combination of
fixing that system, and extending BIP70 with different and better
identity verification options.

However, remember that in the absense of multi-factor wallets the "know
who you are paying" protections of BIP70 are actually pretty much
useless; malware that defeats the payment protocol locally is not much
different than malware that silently rewrites Bitcoin addresses. There
are other motivations for the BIP70 version of the payment protocol, but
whether or not they are actually interesting for users is an open
question; it was not designed by user-experience experts. Thus wallet
authors should consider supporting a low priority for now.


-- 
'peter'[:-1]@petertodd.org
000000000000000f9102d27cfd61ea9e8bb324593593ca3ce6ba53153ff251b3
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 685 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131219/7f0be874/attachment.sig>

From drak at zikula.org  Thu Dec 19 15:46:58 2013
From: drak at zikula.org (Drak)
Date: Thu, 19 Dec 2013 15:46:58 +0000
Subject: [Bitcoin-development] DarkWallet Best Practices
In-Reply-To: <20131219131706.GA21179@savin>
References: <20131219131706.GA21179@savin>
Message-ID: <CANAnSg3G431rdPdq=mtqSUJvjqeu0NaV1KvOVdntoPVTcBZWRw@mail.gmail.com>

On 19 December 2013 13:17, Peter Todd <pete at petertodd.org> wrote:

> ** Fees
>
> Wallets MUST give users the ability to set the fee per KB they are
> willing to pay for their transactions. Wallets SHOULD allow users to
> change that fee after the fact via transction replacement.


Can you add a part about SHOULD/MUST warn users if the fee is unusually
high to avoid sob-stories of people sending 20BTC fees with for the
0.002BTC sandwich.

Sourcecode MUST be PGP signed on a regular basis. Releases MUST be
> signed - in git this is accomplished by signing the release tag.
> Individual commits SHOULD be signed, particularly if source-code used in
>

"SHOULD be cryptographically signed" I assume.


> ** SSL/Certificate authorties
>
> While certificate authorities are notoriously bad at the job they are
> supposed to be doing the CA system is still better than nothing - use it
> where appropriate. For instance if you have a website advertising your
> software, use https rather than http.
>

Once could make efforts to publish (maybe even as signed commits in the git
repo etc the current valid certificate fingerprints and which CA signed
it). This would go some way to exposing
MITM either by CA or in workplaces where browsers are loaded with bogus CAs
for the purpose
of deep packet inspection.


> ** Multi-factor spend authorization, AKA multisig wallets
>
> <mainly discussed at the conference in terms of multiple individuals
> controlling funds, which is out of scope for this document>
>
> Assuming any individual device is uncompromised is risky; wallet
> software SHOULD support some form of multi-factor protection of some or
> all wallet funds. Note that this is a weak "should"; mainly we want to
>

According to RFC 2119 <http://www.ietf.org/rfc/rfc2119.txt> language, you
might be better using the word RECOMMENDED or MAY over SHOULD here.

Additionally, at the beginning of the spec I would put :

"The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
document are to be interpreted as described in RFC
2119<http://www.ietf.org/rfc/rfc2119.txt>
."

Regards

Drak
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131219/0b70da93/attachment.html>

From drak at zikula.org  Thu Dec 19 16:32:10 2013
From: drak at zikula.org (Drak)
Date: Thu, 19 Dec 2013 16:32:10 +0000
Subject: [Bitcoin-development] [unSYSTEM] DarkWallet Best Practices
In-Reply-To: <538d3c4677a4332ae8341e37d1a77d5e.squirrel@fruiteater.riseup.net>
References: <20131219131706.GA21179@savin>
	<dde469d7ce77a748fb4c279334deb643.squirrel@fruiteater.riseup.net>
	<538d3c4677a4332ae8341e37d1a77d5e.squirrel@fruiteater.riseup.net>
Message-ID: <CANAnSg312feKyW-LtRu+n99ODn4KDTja__Wp7bRz+k=5ox3yHg@mail.gmail.com>

On 19 December 2013 16:04, Amir Taaki <genjix at riseup.net> wrote:

> About signing each commit, Linus advises against it:
>
> http://git.661346.n2.nabble.com/GPG-signing-for-git-commit-td2582986.html


Yeah, it makes no sense after reading it. Nice catch.

However, his recommendation for signing tags with `git tag -s` should
probably be incorporated into the spec as a MUST.

Drak
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131219/009ff7b0/attachment.html>

From mike at belshe.com  Thu Dec 19 17:23:18 2013
From: mike at belshe.com (Mike Belshe)
Date: Thu, 19 Dec 2013 09:23:18 -0800
Subject: [Bitcoin-development] [unSYSTEM] DarkWallet Best Practices
In-Reply-To: <CANAnSg312feKyW-LtRu+n99ODn4KDTja__Wp7bRz+k=5ox3yHg@mail.gmail.com>
References: <20131219131706.GA21179@savin>
	<dde469d7ce77a748fb4c279334deb643.squirrel@fruiteater.riseup.net>
	<538d3c4677a4332ae8341e37d1a77d5e.squirrel@fruiteater.riseup.net>
	<CANAnSg312feKyW-LtRu+n99ODn4KDTja__Wp7bRz+k=5ox3yHg@mail.gmail.com>
Message-ID: <CABaLYCtWXURDiKHvXfbAu2z-TzZQWA1Z42a0EhP3hKHyEv9ZyA@mail.gmail.com>

Hey Peter -

I think this is a super list.   A couple of thoughts:

a) In the section on multi-sig and multi-factor, I think we can split these
apart. Multi-factor user authentication is very valuable and not the same
as multi-factor signing, which is a second level of complexity.   The
multi-factor auth can be off-blockchain, e.g. authenticating with SMS
message to your phone or Google Authenticator challenge.  Given the state
of malware today, I personally would propose two requirements:
    1) wallets SHOULD use multi-factor authentication before authorizing
access to a wallet (e.g. view balances, addresses, transactions, etc)
    2) wallets MUST use multi-factor auth before signing a transaction.
[note: I recognize that MUST might be too aggressive right now, but I
wouldn't use a wallet without it.  this can also be impractical for
server-side wallets]

b) Multi-factor signing (e.g. P2SH) may be too early to really define.  But
here are some issues which have come up from my own personal development
experience:
    - Wallets SHOULD NOT create two keys on a single host or device
    - Wallets SHOULD provide a way to import external public keys which can
be used as part of a P2SH address

Slightly off topic:  For P2SH, address creation requires the public key,
not the public hash of an address.  For me, this has made it difficult to
import keys created through out-of-band sources.  Most wallets/key
generators/etc only provide the address and not the public key, and this is
a hinderance to easy P2SH creation off host.  It would be great if there
were a way to address this, but I don't know how.

c) Small word-choice nit:  I had to go lookup the meaning of "SHALL" (I now
know it is the same as MUST).  I think most RFCs just use MUST these days.


Thanks,
mike








On Thu, Dec 19, 2013 at 8:32 AM, Drak <drak at zikula.org> wrote:

> On 19 December 2013 16:04, Amir Taaki <genjix at riseup.net> wrote:
>
>> About signing each commit, Linus advises against it:
>>
>> http://git.661346.n2.nabble.com/GPG-signing-for-git-commit-td2582986.html
>
>
> Yeah, it makes no sense after reading it. Nice catch.
>
> However, his recommendation for signing tags with `git tag -s` should
> probably be incorporated into the spec as a MUST.
>
> Drak
>
>
>
>
> ------------------------------------------------------------------------------
> Rapidly troubleshoot problems before they affect your business. Most IT
> organizations don't have a clear picture of how application performance
> affects their revenue. With AppDynamics, you get 100% visibility into your
> Java,.NET, & PHP application. Start your 15-day FREE TRIAL of AppDynamics
> Pro!
> http://pubads.g.doubleclick.net/gampad/clk?id=84349831&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131219/80e6438c/attachment.html>

From pete at petertodd.org  Thu Dec 19 17:44:06 2013
From: pete at petertodd.org (Peter Todd)
Date: Thu, 19 Dec 2013 12:44:06 -0500
Subject: [Bitcoin-development] DarkWallet Best Practices
In-Reply-To: <538d3c4677a4332ae8341e37d1a77d5e.squirrel@fruiteater.riseup.net>
References: <20131219131706.GA21179@savin>
	<dde469d7ce77a748fb4c279334deb643.squirrel@fruiteater.riseup.net>
	<538d3c4677a4332ae8341e37d1a77d5e.squirrel@fruiteater.riseup.net>
Message-ID: <20131219174406.GA12740@petertodd.org>

On Thu, Dec 19, 2013 at 04:04:17PM -0000, Amir Taaki wrote:

Looks like for this to actually go to the email lists they need to be in
the To: field.

> About signing each commit, Linus advises against it:
> 
> http://git.661346.n2.nabble.com/GPG-signing-for-git-commit-td2582986.html
> 
> "Btw, there's a final reason, and probably the really real one. Signing
> each commit is totally stupid. It just means that you automate it, and you
> make the signature worth less. It also doesn't add any real value, since
> the way the git DAG-chain of SHA1's work, you only ever need _one_
> signature to make all the commits reachable from that one be effectively
> covered by that one. So signing each commit is simply missing the point."
> 
> What do you reckon?

His point is valid, but it's valid in the context of how Linux
development is done, not Bitcoin. The key difference being that Linus
and other kernel developers have a model where code is passed around on
mailing lists and between developers rather than stored on untrustworthy
third-parties like github.

For instance typically someone will submit a patch to the kernel
development mailing list, example:
http://www.mail-archive.com/linux-kernel at vger.kernel.org/msg558841.html
That patch isn't signed, and the email itself doesn't have to be PGP
signed either. However a trusted maintainer of the relevant subsystem
will (in theory) look over the patch carefully and commit it to their
personal tree on a secure computer. (in theory)

At some point the maintainer will create a *signed* tag on a commit with
one or more patches, often many patches, another another maintainer
higher in the hierarchy (maybe even Linus) will *merge* that tag into
their tree, hopefully checking the signature first! Modern versions of
git actually include the tag signature in the merge commit, so the
result is signed by the original maintainer; note how this contradicts
Linus's email with regard to the idea of separable signatures.
Eventually multiple such groups of patches build up and the result is
tagged as a release, and that release tag is signed.

Accountability in this model rests with maintainers, and source-code
stays on a multitude of personal, secure, locations. (in theory)


However since we like to use github and tend to get code directly from
it our main risk is github (or similar) being compromised. Given that I
think we're much better off using per-commit signatures, and in effect
continually making the statement "Yes, this commit/merge was really
produced by me on my machine, although I may have made a mistake and
might not have looked at the code as thoroughly as I maybe should have."
The statement *is* weaker than Linus's model of "This signature is
Really Official and Stuff and I've carefully checked everything." but I
think we're much more interested in getting a strong guarantee on who
made the commit than some strong statement about its actual contents -
humans are fallible anyway.

> Also do you approve of the other link I sent you?
> 
> https://wiki.unsystem.net/index.php/DarkWallet/Negotiation

I think you're conflating identities with the messaging layer; focus on
the latter and use off-the-shelf identity systems like OpenPGP and SSL
certificate authorities. Remember that every new identity system that
gets involved is another way for an attacker to MITM attack you; you're
better off using whatever the user is using already.

-- 
'peter'[:-1]@petertodd.org
00000000000000016a442255c6d15cd6e085991c1efffc9caeff5fc6da14368a
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 490 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131219/84d0b90a/attachment.sig>

From drak at zikula.org  Thu Dec 19 18:05:51 2013
From: drak at zikula.org (Drak)
Date: Thu, 19 Dec 2013 18:05:51 +0000
Subject: [Bitcoin-development] [unSYSTEM] DarkWallet Best Practices
In-Reply-To: <20131219174406.GA12740@petertodd.org>
References: <20131219131706.GA21179@savin>
	<dde469d7ce77a748fb4c279334deb643.squirrel@fruiteater.riseup.net>
	<538d3c4677a4332ae8341e37d1a77d5e.squirrel@fruiteater.riseup.net>
	<20131219174406.GA12740@petertodd.org>
Message-ID: <CANAnSg0e5vRQk9+wG5cxpOPnciBoDfm1AtYRZofJRF49pCsdgQ@mail.gmail.com>

How does signing the commit message itself help at all since it just signs
the commit message, not the content of the commit. You could commit some
code then I. Then I squash my commits into yours and use your commit
message. You could also include the previous commit hash in your commit
message.

But correct me if I am wrong, but that would be difficult (if not
impossible) to verify once you get into merging code since the patch can be
merged in at another point in history entirely.. and still doesn't work
because I can still squash commits into yours. I don't see how it can work
at all unless I am missing something obvious (which I fear I may be?).

I also don't believe Linus is talking just from the perspective of how the
kernel project works. The integrity of a git repository is maintained by
the hash chaining and by the distributed nature of the repository. If
someone hacked github and changed the history of the tree, the next time
you tried to push his code up it would fail because the history had changed
- tampering is immediately obvious in git.

Regards,

Drak


On 19 December 2013 17:44, Peter Todd <pete at petertodd.org> wrote:

> On Thu, Dec 19, 2013 at 04:04:17PM -0000, Amir Taaki wrote:
>
> Looks like for this to actually go to the email lists they need to be in
> the To: field.
>
> > About signing each commit, Linus advises against it:
> >
> >
> http://git.661346.n2.nabble.com/GPG-signing-for-git-commit-td2582986.html
> >
> > "Btw, there's a final reason, and probably the really real one. Signing
> > each commit is totally stupid. It just means that you automate it, and
> you
> > make the signature worth less. It also doesn't add any real value, since
> > the way the git DAG-chain of SHA1's work, you only ever need _one_
> > signature to make all the commits reachable from that one be effectively
> > covered by that one. So signing each commit is simply missing the point."
> >
> > What do you reckon?
>
> His point is valid, but it's valid in the context of how Linux
> development is done, not Bitcoin. The key difference being that Linus
> and other kernel developers have a model where code is passed around on
> mailing lists and between developers rather than stored on untrustworthy
> third-parties like github.
>
> For instance typically someone will submit a patch to the kernel
> development mailing list, example:
> http://www.mail-archive.com/linux-kernel at vger.kernel.org/msg558841.html
> That patch isn't signed, and the email itself doesn't have to be PGP
> signed either. However a trusted maintainer of the relevant subsystem
> will (in theory) look over the patch carefully and commit it to their
> personal tree on a secure computer. (in theory)
>
> At some point the maintainer will create a *signed* tag on a commit with
> one or more patches, often many patches, another another maintainer
> higher in the hierarchy (maybe even Linus) will *merge* that tag into
> their tree, hopefully checking the signature first! Modern versions of
> git actually include the tag signature in the merge commit, so the
> result is signed by the original maintainer; note how this contradicts
> Linus's email with regard to the idea of separable signatures.
> Eventually multiple such groups of patches build up and the result is
> tagged as a release, and that release tag is signed.
>
> Accountability in this model rests with maintainers, and source-code
> stays on a multitude of personal, secure, locations. (in theory)
>
>
> However since we like to use github and tend to get code directly from
> it our main risk is github (or similar) being compromised. Given that I
> think we're much better off using per-commit signatures, and in effect
> continually making the statement "Yes, this commit/merge was really
> produced by me on my machine, although I may have made a mistake and
> might not have looked at the code as thoroughly as I maybe should have."
> The statement *is* weaker than Linus's model of "This signature is
> Really Official and Stuff and I've carefully checked everything." but I
> think we're much more interested in getting a strong guarantee on who
> made the commit than some strong statement about its actual contents -
> humans are fallible anyway.
>
> > Also do you approve of the other link I sent you?
> >
> > https://wiki.unsystem.net/index.php/DarkWallet/Negotiation
>
> I think you're conflating identities with the messaging layer; focus on
> the latter and use off-the-shelf identity systems like OpenPGP and SSL
> certificate authorities. Remember that every new identity system that
> gets involved is another way for an attacker to MITM attack you; you're
> better off using whatever the user is using already.
>
> --
> 'peter'[:-1]@petertodd.org
> 00000000000000016a442255c6d15cd6e085991c1efffc9caeff5fc6da14368a
>
> _______________________________________________
> unSYSTEM mailing list: http://unsystem.net
> https://mailinglists.dyne.org/cgi-bin/mailman/listinfo/unsystem
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131219/fff6022f/attachment.html>

From mark at monetize.io  Fri Dec 20 01:47:52 2013
From: mark at monetize.io (Mark Friedenbach)
Date: Thu, 19 Dec 2013 17:47:52 -0800
Subject: [Bitcoin-development] BIP proposal: Authenticated prefix trees
Message-ID: <52B3A1C8.5000005@monetize.io>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Hello fellow bitcoin developers. Included below is the first draft of
a BIP for a new Merkle-compressed data structure. The need for this
data structure arose out of the misnamed "Ultimate blockchain
compression" project, but it has since been recognized to have many
other applications.

In addition to this BIP I am preparing three additional BIPs
describing the use of this data structure in stateless validation &
mining, the UBC address index for "SPV+" operating modes, document
timestamping and merged mining.

A Python implementation of this data structure is available here:

https://github.com/monetizeio/python-bitcoin

A C++ implementation is being worked on.

As per the BIP-1 procedure, I am submitting this rough draft to the
community for discussion. I welcome all comments and criticisms of
both form and content.

- -Mark


==Abstract==

This BIP describes a [http://en.wikipedia.org/wiki/Hash_tree Merkle
hash tree] variant of the [http://en.wikipedia.org/wiki/Trie
prefix-tree data structure], ideally suited for encoding key-value
indices which support memory-efficient proofs.

==Motivation==

There are a number of applications which would benefit from having a
data structure with the following properties:

* '''Arbitrary mapping of keys to values.''' A ''key'' can be any
bytestring, and its ''value'' any other bytestring.
* '''Duplicate keys disallowed.''' Every key has one, and only one
value associated with it. Some applications demand assurance that no
key value is reused, and that this constraint can be checked without
requiring access to the entire data structure.
* '''Efficient look-up by key.''' The data structure should support
sub-linear lookup operations with respect to the number of keys in the
mapping. Logarithmic time or linear with respect to the length of the
key should be achievable and would be sufficient for realistic
applications.
* '''Merkle compression of mapping structure.''' It should be possible
to produce a reduced description of the tree consisting of a single
root hash value which is deterministically calculated from the mapping
structure.
* '''Efficient proofs of inclusion.''' It should be possible to
extract a proof of key/value mapping which is limited in size and
verification time by the length of the key in the worst case.
* '''Computation of updates using local information.''' Given a set of
inclusion proofs, it should be possible to calculate adjustments to
the local mapping structure (update or deletion of included mappings,
or insertion between two included mappings which are adjacent in the
global structure).

Such applications include committed validation indices which enable
stateless mining nodes, committed wallet indices which enable
trust-less querying of the unspent transaction output set by
<code>scriptPubKey</code>, efficient document time-stamping, and
secure & efficient merged mining. This BIP describes an authenticated
prefix tree which has the above properties, but leaves the myriad
applications to be formalized in future BIPs.

==Data structure==

This BIP defines a binary prefix tree. Such a structure provides a
mapping of bitstrings (the ''keys'') to bytestrings (the ''values'').
It is an acyclic binary tree which implicitly encodes keys within the
traversal path -- a "left" branch is a 0, and a "right" branch is a 1.
Each node is reachable by only one unique path, and reading off the
branches taken (0 for each left, 1 for each right) as one follows the
path from root to target yields the node's key.

The particular binary prefix tree defined by this BIP is a hybrid
PATRICIA / de la Brandais tree structure.
[http://en.wikipedia.org/wiki/Radix_tree PATRICIA trees] compress a
long sequence of non-branching nodes into a single interior node with
a per-branch ''skip prefix''. This achieves significant savings in
storage space, root hash calculation, and traversal time.

A de la Brandais trie achieves compression by only storing branches
actually taken in a node. The space savings are minimal for a binary
tree, but place the serialized size of a non-branching interior node
under the SHA-256 block size, thereby reducing the number of hash
operations required to perform updates and validate proofs.

This BIP describes the authenticated prefix tree and its many
variations in terms of its serialized representation. Additional BIPs
describe the application of authenticated prefix trees to such
applications as committed indices, document time-stamping, and merged
mining.

==Serialization format==

As a hierarchical structure, the serialization of an entire tree is
the serialization of its root node. A serialized node is the
concatenation of five structures:

    node := flags || VARCHAR(extra) || value || left || right

The <code>flags</code> is a single byte field whose composite values
determine the bytes that follow.

    flags = (left_flags  << 0) |
            (right_flags << 2) |
            (has_value   << 4) |
            (prune_left  << 5) |
            (prune_right << 6) |
            (prune_value << 7)

The <code>left_flags</code> and <code>right_flags</code> are special
2-bit enumeration fields. A value of 0 indicates that the node does
not branch in this direction, and the corresponding <code>left</code>
or <code>right</code> branch is missing (replaced with the empty
string in the node serialization). A value of 1 indicates a single bit
key prefix for this branch, implicitly 0 for <code>left</code> and 1
for <code>right</code>. A 2 indicates up to 7 bits of additional skip
prefix (beyond the implicit first bit, making 8 bits total) are stored
in a compact single-byte format. A 3 indicates a skip prefix with
greater than 7 additional bits, stored length-prefix encoded.

The single bit <code>has_value</code> indicates whether the node
stores a data bytestring, the value associated with its key prefix.
Since keys may be any value or length, including one key being a
prefix of another, it is possible for interior nodes in addition to
leaf nodes to have values associated with them, and therefore an
explicit value-existence bit is required.

The remaining three bits are used for proof extraction, and are masked
away prior to hash operations. <code>prune_left</code> indicates that
the entire left branch has been pruned. <code>prune_right</code> has
similar meaning for the right branch. If <code>has_value</code> is
set, <code>prune_value</code> may be set to exclude the node's value
from encoded proof. This is necessary field for interior nodes, since
it is possible that their values may be pruned while their children
are not.

The <code>value</code> field is only present if the bit
<code>flags.has_value</code> is set, in which case it is a
<code>VARCHAR</code> bytestring:

    switch flags.has_value:
      case 0:
        value := ?
      case 1:
        value := VARCHAR(node.value)

The <code>extra</code> field is always present, and takes on a
bytestring value defined by the particular application. Use of the
<code>extra</code> field is application dependent, and will not be
covered in this specification. It can be set to the empty bytestring
(serialized as a single zero byte) if the application has no use for
the <code>extra</code> field.

    value := VARCHAR(calculate_extra(node))

The <code>left</code> and <code>right</code> non-terminals are only
present if the corresponding <code>flags.left_flags</code> or
<code>flags.right_flags</code> are non-zero. The format depends on the
value of this flags setting:

    switch branch_flags:
      case 0:
        branch := ?
      case 1:
        branch := branch_node_or_hash
      case 2:
        prefix  = prefix >> 1
        branch := int_to_byte(1 << len(prefix) | bits_to_int(prefix)) ||
                  branch_node_or_hash
      case 3:
        prefix  = prefix >> 1
        branch := VARINT(len(prefix) - 9) ||
                  bits_to_string(prefix) ||
                  branch_node_or_hash

<code>branch_flags</code> is a stand-in meant to describe either
<code>left_flags</code> or <code>right_flags</code>, and likewise
everywhere else in the above pseudocode <code>branch</code> can be
replaced with either <code>left</code> or <code>right</code>.

<code>prefix</code> is the key bits between the current node and the
next branching, terminal, and/or leaf node, including the implicit
leading bit for the branch (0 for the left branch, 1 for the right
branch). In the above code, <code>len(prefix)</code> returns the
number of bits in the bitstring, and <code>prefix >> 1</code> drops
the first bit reducing the size of the bitstring by one and
renumbering the indices accordingly.

The function <code>int_to_byte</code> takes an integer in the range
[0, 255] and returns the octet representing that value. This is a NOP
in many languages, but present in this pseudocode so as to be explicit
about what is going on.

The function <code>bits_to_int</code> interprets a sequence of bits as
a little-endian integer value. This is analogous to the following
pseudocode:

    def bits_to_int(bits):
        result = 0
        for idx in 1..len(bits):
            if bits[idx] == 1:
                result |= 1<<idx

The function <code>bits_to_string</code> serializes a sequence of bits
into a binary string. It uses little-endian bit and byte order, as
demonstrated by the following pseudocode:

    def bits_to_string(bits):
        bytes = [0] * ceil(len(bits) / 8)
        for idx in 1..len(bits):
            if bits[idx] == 1:
                bytes[idx / 8] |= 1 << idx % 8
        return map(int_to_byte, bytes)

<code>branch_node_or_hash</code> is either the serialized child node
or its SHA-256 hash and associated meta-data. Context determines which
value to use: during digest calculations, disk/database serialization,
and when the branch is pruned the hash value is used and serialized in
the same way as other SHA-256 values in the bitcoin protocol (note
however that it is single-SHA-256, not the double-SHA-256 more
commonly used in bitcoin). The number of terminal (value-containing)
nodes and the serialized size in bytes of the fully unpruned branch
are suffixed to the branch hash. When serializing a proof or
snapshotting tree state and the branch is not pruned, the serialized
child node is included directly and the count and size are omitted as
they can be derived from the serialization.

    if branch_pruned or SER_HASH:
        branch_node_or_hash := SHA-256(branch) ||
                               count(branch) ||
                               size(branch)
    else:
        branch_node_or_hash := serialize(branch)

As an example, here is the serialization of a prefix tree mapping the
names men and women of science to the year of their greatest publication:

    >>> dict = AuthTree()
    >>> dict['Curie'] = VARINT(1898)
    >>> dict('Einstein') = VARINT(1905)
    >>> dict['Fleming'] = VARINT(1928)
    >>> dict['??'] = VARINT(2009)
    >>> dict.serialize()
    # An bytestring, broken out into parts:

    # . Root node:
    0x0e # left_flags: 2, right_flags: 3, has_value: 1
    0x00 # extra: ?

    # .l Inner node: 0b01000
    0x11 # 0b01000
    0x07 # left_flags: 3, right_flags: 1
    0x00 # extra: ?

    # .l.l Inner node: 0b01000011 0b01110101 0b01110010 0b01101001
    #                  'C'        'u'        'r'        'i'
    #                  0b01100101
    #                  'e'
    0x1abb3a599a02 # 0b01101110101011100100110100101100101
    0x10           # has_value: 1
    0x00           # extra: ?
    0x03fd6a07     # value: VARINT(1911)

    # .l.r Inner node: 0b010001
    0x0f # left_flags: 3, right_flags: 3
    0x00 # extra: ?

    # .l.r.l Inner node: 0b01000101 0b01101001 0b01101110 0b01110011
    #                    'E'        'i'        'n'        's'
    #                    0b01110100 0b01100101 0b01101001 0b01101110
    #                    't'        'e'        'i'        'n'
    0x312ded9c5d4c2ded00 # 0b1011010010110111
                         # 0b0011100110111010
                         # 0b0011001010110100
                         # 0b101101110
    0x10                 # has_value: 1
    0x00                 # extra: ?
    0x03fd7107           # value: VARINT(1905)

    # .l.r.r Inner node: 0b01000110 0b01101100 0b01100101 0b01101101
    #                    'F'        'l'        'e'        'm'
    #                    0b01101001 0b01101110 0b01100111
    #                    'i'        'n'        'g'
    0x296c4c6d2dedcc01 # 0b0011011000110010
                       # 0b1011011010110100
                       # 0b10110111001100111
    0x10               # has_value: 1
    0x00               # extra: ?
    0x03fd8807         # value: VARINT(1928)

    # .r Inner node: 0b11100100 0b10111000 0b10101101
    #                '?'
    #                0b11100110 0b10011100 0b10101100
    #                '?'
    0x27938edab39c1a # 0b1100100101110001
                     # 0b0101101111001101
                     # 0b001110010101100
    0x10             # has_value: 1
    0x00             # extra: ?
    0x03fdd907       # value: VARINT(2009)

==Hashing==

There are two variations of the authenticated prefix tree presented in
this draft BIP. They differ only in the way in which hash values of a
node and its left/right branches are constructed. The variations,
discussed below, tradeoff computational resources for the ability to
compose operational proofs. Whether the performance hit is
significant, and whether or not the added features are worth the
tradeoff depends very much on the application.

===Variation 1: Level-compressed hashing===

In this variation the referenced child node's hash is used in
construction of an interior node's hash digest. The interior node is
serialized just as described (using the child node's digest instead of
inline serialization), the resulting bytestring is passed through one
round of SHA-256, and the digest that comes out of that is the hash
value of the node. This is very efficient to calculate, requiring the
absolute minimum number of SHA-256 hash operations, and achieving
level-compression of computational resources in addition to reduction
of space usage.

For example:

    >>> dict = AuthTree()
    >>> dict['a'] = 0xff
    >>> dict.serialize()
    0x0200c3100001ff
    >>> dict.root
    AuthTreeNode(
        left_prefix = 0b01100001,
        left_hash   =
0xbafa0e2bba3396c5e9804b6cbe61be82bc442c1121aed81f8d5de36e9b20dc2f,
        left_count  = 1,
        left_size   = 4)
    >>> dict.hash
    0xb4837376022a7c9ddaa7d685ad183bcbd5d16c362b81fa293a7b9e911766cf3c

Assuming uniform distribution of key values, level-compressed hashing
has time-complexity logarithmic with respect to the number of keys in
the prefix tree. The disadvantage is that it is not possible in
general to "rebase" an operational proof on top of a sibling,
particularly if that sibling deletes branches that result in
reorganization and level compression of internal nodes used by the
rebased proof.

===Variation 2: Proof-updatable hashing===

In this variation, level-compressed branches are expanded into a
series of chained single-branch internal nodes, each including the
hash of its direct child. For a brach with a prefix N bits in length,
this requires N chained hashes. Thanks to node-compression (excluding
empty branches from the serialization), it is possible for each hash
operation + padding to fit within a single SHA-256 block.

Note that the serialization semantics are unchanged! The variation
only changes the procedure for calculating the hash values of interior
nodes. The serialization format remains the same (modulo differing
hash values standing in for pruned branches).

Using the above example, calling <code>dict.hash</code> causes the
following internal nodes to be constructed:

    >>> node1 = AuthTreeNode(
        right_prefix = 0b1,
        right_hash   =
0xbafa0e2bba3396c5e9804b6cbe61be82bc442c1121aed81f8d5de36e9b20dc2f,
        right_count  = 1,
        right_size   = 4)
    >>> node2 = AuthTreeNode( left_prefix=0b0,  left_hash=node1.hash,
 left_count=1,  left_size=4)
    >>> node3 = AuthTreeNode( left_prefix=0b0,  left_hash=node2.hash,
 left_count=1,  left_size=4)
    >>> node4 = AuthTreeNode( left_prefix=0b0,  left_hash=node3.hash,
 left_count=1,  left_size=4)
    >>> node5 = AuthTreeNode( left_prefix=0b0,  left_hash=node4.hash,
 left_count=1,  left_size=4)
    >>> node6 = AuthTreeNode(right_prefix=0b1, right_hash=node5.hash,
right_count=1, right_size=4)
    >>> node7 = AuthTreeNode(right_prefix=0b1, right_hash=node6.hash,
right_count=1, right_size=4)
    >>> node8 = AuthTreeNode( left_prefix=0b0,  left_hash=node7.hash,
 left_count=1,  left_size=4,
                              value=0xff)
    >>> dict.hash == node8.hash
    True
    >>> dict.hash
    0xc3a9328eff06662ed9ff8e82aa9cc094d05f70f0953828ea8c643c4679213895

The advantage of proof-updatable hashing is that any operational proof
may be "rebased" onto the tree resulting from a sibling proof, using
only the information locally available in the proofs, even in the
presence of deletion operations that result in level-compression of
the serialized form. The disadvantage is performance: validating an
updatable proof requires a number of hash operations lower-bounded by
the length of the key in bits.

==Inclusion proofs==

An inclusion proof is a prefix tree pruned to contain a subset of its
keys. The serialization of an inclusion proof takes the following form:

    inclusion_proof := variant || root_hash || root_node || checksum

Where <code>variant</code> is a single-byte value indicating the
presence of level-compression (0 for proof-updatable hashing, 1 for
level-compressed hashing). <code>root_hash</code> is the Merkle
compression hash of the tree, the 32-byte SHA-256 hash of the root
node. <code>tree</code> is the possibly pruned, serialized
representation of the tree. And finally, <code>checksum</code> is the
first 4 bytes of the SHA-256 checksum of <code>variant</code>,
<code>root_hash</code>, and <code>root_node</code>.

For ease of transport, the standard envelope for display of an
inclusion proof is internet-standard base64 encoding in the following
format:

- -----BEGIN INCLUSION PROOF-----
ATzPZheRnns6KfqBKzZs0dXLOxithdan2p18KgJ2c4O0DgARBwAauzpZmgIQAAP9agcPADEt7Zxd
TC3tABAAA/1xBylsTG0t7cwBEAAD/YgHJ5OO2rOcGhAAA/3ZByEg+2g=
- -----END INCLUSION PROOF-----

Decoded, it looks like this:

    0x01 # Level-compressed hashing
    # Merkle root:
    0x3ccf6617919e7b3a29fa812b366cd1d5cb3b18ad85d6a7da9d7c2a02767383b4
    # Serialized tree (unpruned):
    0x0e001107001abb3a599a02100003fd6a070f00312ded9c5d4c2ded00100003fd
    0x7107296c4c6d2dedcc01100003fd880727938edab39c1a100003fdd907
    # Checksum:
    0x2120fb68

==Operational proofs==

An operational proof is a list of insert/update and delete operations
suffixed to an inclusion proof which contains the pathways necessary
to perform the specified operations. The inclusion proof must contain
the key values to be updated or deleted, and the nearest adjacent key
values for each insertion. The serialization of an operational proof
takes the following form:

    operational_proof := variant || root_hash || tree ||
                         VARLIST(delete*) || VARLIST(update*) ||
                         new_hash || checksum

    delete := VARCHAR(key)
    update := VARCHAR(key) || VARCHAR(value)

The first three fields, <code>variant</code>, <code>root_hash</code>,
and <code>tree</code> are the inclusion proof, and take the same
values described in the previous section. <code>deletes</code> is a
list of key values to be deleted; each key value in this list must
exist in the inclusion proof. <code>updates</code> is a list of key,
value mappings which are to be inserted into the tree, possibly
replacing any mapping for the key which already exists; either the key
itself if it exists (update), or the two lexicographically closest
keys on either side if it does not (insert) must be present in the
insertion proof. <code>new_hash</code> is the resulting Merkle root
after the insertion, updates, and deletes are performed, and
<code>checksum</code> is the initial 4 bytes of the SHA-256 hash of
the preceding fields.

Just like inclusion proofs, an operational proof is encoded in base64
for display and transport. Here's the same

- -----BEGIN OPERATIONAL PROOF-----
ATzPZheRnns6KfqBKzZs0dXLOxithdan2p18KgJ2c4O0LgARaIsVaQi/GdhOPOgA8p4Pu4PiEfEg
lcmy3j7bOc7hXw0DLSeTjtqznBoQAAP92QcBMOS4reacrACzuZJbyP7fqIOf5VEk4iarG4+uPoZC
oun8BztQMQBy0LHVeSY=
- -----END OPERATIONAL PROOF-----

Decoded and broken into its constituent fields:

    0x01 # Level-compressed hashing
    # Original Merkle root:
    0x3ccf6617919e7b3a29fa812b366cd1d5cb3b18ad85d6a7da9d7c2a02767383b4
    # Serialized tree (included keys: '??'):
    0x2e0011688b156908bf19d84e3ce800f29e0fbb83e211f12095c9b2de3edb39ce
    0xe15f0d032d27938edab39c1a100003fdd907
    # Deletion list ['??']:
    0x01
    0x30e4b8ade69cac
    # Insertion list []:
    0x00
    # New Merkle root:
    0xb3b9925bc8fedfa8839fe55124e226ab1b8fae3e8642a2e9fc073b50310072d0
    # Checksum:
    0xb1d57926

~End of File~
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.14 (GNU/Linux)
Comment: GPGTools - http://gpgtools.org
Comment: Using GnuPG with Thunderbird - http://www.enigmail.net/

iQIcBAEBAgAGBQJSs6HIAAoJEAdzVfsmodw4gooQAJm7XNsZjgdeTSpKIvUIU38f
tQx2FD08hQdLl48me5mDUbHJgGlYINsKAgoZ8Mqwi/kHEEYhuIlLIX1p6Ovigidb
21BiVoOLdG1egGOwxp17DuwYaDPTppFTlN9TBjZzW6WKc7+4aNvyc1KtrbHIhtj/
04ekFyAn4U5UH0ht7CI79j0u3Kp85p5D4PyYZB2m82mzti6OxpSM4tXlMkDW7ihg
QJwiZSjzejqTd7WF0zr0SLeGVRSN2A0dzUCoVsI98eIa3hkw2N4ae6dRkibyStOT
V8VEDvHArEDlvu8jiryajhsom5mvtOOclNDkVXWAf/Te4gj05iYdTIvNvDEJtqsP
XDbmw6GgV1kBLlLo0mp//t/+wr+nIvy+sVAP+eqtM/0vjaVXBkXxkUMqqNkrtVpB
f3whq7nFahssUMSoWE93jgob1ayAax2XUALVMAXYsJl7b2MqBGlhiTZ8FQZ+TW4A
tIpKeUprPmDvA18rO3SCbmLMQryZqYiH0sRyvUc5kvn3qCRHrISZNkEuK591eS+x
BO1eOluPzVqeXPPSK1jvGeY0FNJtwzbov4nI1mzOvzQHLCvkHn5PhUFCK5tL5tAe
b0Z5qwDV+SvVs7W1R7ejYBzEj77U1zuzZ9AtikOuvy+bNGrkIlpI49EyXHijm7C3
Q6JacTuI0PelYji2gaBJ
=BbDs
-----END PGP SIGNATURE-----



From w at grabhive.com  Fri Dec 20 06:52:51 2013
From: w at grabhive.com (Wendell)
Date: Fri, 20 Dec 2013 01:52:51 -0500
Subject: [Bitcoin-development] DarkWallet Best Practices
In-Reply-To: <20131219131706.GA21179@savin>
References: <20131219131706.GA21179@savin>
Message-ID: <2251EAA8-1798-4D0E-8268-855AC933E472@grabhive.com>

Amazingly thorough, Peter. Thanks so much!

-wendell

hivewallet.com | twitter.com/hivewallet | pgp: B7179FA88C498718

On Dec 19, 2013, at 8:17 AM, Peter Todd wrote:

> Here's my draft. I don't claim this to be "official", but I think this
> should represent the consensus we've come to at the DarkWallet
> Hackathon; I'm writing it up as an email in part to preserve a record of
> that consensus.
> 
> 
> * General Principles
> 
> We believe in decentralization, user-defined privacy, education as
> opposed to "magic", and security based on openness rather than just
> trust. We consider users who are individuals as well as the needs of
> businesses such as merchants and exchanges. We recognize that often the
> more people who use privacy protection technologies such as CoinJoin,
> the better protected we all are.
> 
> 
> * Privacy
> 
> Bitcoin inherently makes the flow of money visible, however it does not
> require that flow to have real-world identities attached, or even for
> that matter, pseudonyms. We see this as an unfortunate flaw in the
> Bitcoin protocol that is to be corrected; the Satoshi whitepaper itself
> included one such correction by outlining how avoiding address re-use
> helped preserve privacy.
> 
> 
> ** Threat model
> 
> We assume a worst-case sophisticated state-level attacker with the goal
> of deanonymizing and otherwise subverting Bitcoin users. Such an
> attacker can be assumed to control up to 100% of the Bitcoin relay
> network as well as have the ability to wiretap up to 100% of the
> node-to-node traffic. (for nodes that they do not control) Such
> attackers are however constrained by politics and budget. We assume they
> use their ability to conduct MITM attacks sparingly - for instance by
> subverting certificate authorities - due to the risk of detection. (note
> how such attackers may be more willing to use detectable attacks in the
> future now that their activities are public knowledge) We also assume
> that while their budgets for individual targets may be very large, the
> equally large number of targets required for en-mass survailance leads
> to relatively low budgets per target. In particular note how the 51%
> assumption assumes that the overall "economic value" of Bitcoin to its
> participants is greater than the attacker's budget by some margin.
> 
> 
> ** Address re-use
> 
> Wallet software SHALL avoid address re-use. New addresses will be used
> for all change and users will be encouraged through the user-interface
> and other measures to use new addresses for every payment to the wallet.
> 
> 
> ** CoinJoin
> 
> With CoinJoin the more users that make use of it, the larger the
> anonymity set and the better protected user privacy is. Thus we
> encourage wallet software to agressively make trade-offs between
> absolute privacy and usability; compromise is not a dirty word.
> 
> Wallet software SHALL implement basic two-party mix functionality and
> MAY implement more sophisticated CoinJoin functionality such as n-party
> mixes. CoinJoin SHALL be the default way that all transactions are sent.
> Wallet authors are cautioned that more sophisticated functionality may
> be more secure in theory, but if users do not use it the functionality
> is wasted; focus on the general case first and only then try to improve.
> 
> 
> *** Two-Party Mixes
> 
> The most basic form of CoinJoin is for two parties to author a
> transaction. A key distinction between a 2 party mix and an n-party mix
> is that in the two party case both parties automatically learn the
> other's inputs and outputs by simple elimination; sophisticated
> cryptographic blinding protocols are useless. To an external attacker
> each transaction doubles the size of the anonymity set: the coins may
> have come from one party or the other and the attacker has no way of
> knowing which. (modulo value analysis, which will be discussed later)
> 
> 
> *** n-party Mixes and Blinding
> 
> If two parties can jointly author a transaction, n parties can too.
> Without special effort this has the disadvantage of revealing the input
> to output mapping to all parties. Various cryptographic blinding schemes
> have been proposed to fix this problem, either with multi-party
> computational techniques, or by making use of multiple communication
> channels along with a robust anti-DoS scheme. In either case, for now we
> reject such schemes as complex and inconvenient and prioritize robust
> two-party mixing. However we do take the existance of such schemes into
> account; note how a n-party mix can act as a single party in a two-party
> mix scheme.
> 
> 
> *** Four-stage two-party mix protocol
> 
> <on the wiki>
> 
> 
> *** Defeating value analysis
> 
> Attackers can make good guesses at the mapping of inputs to outputs
> based on value. For instance with two inputs of 3 and 5, and fours
> outputs of 1.4, 1.6, 2.4 and 2.6 the attacker can easily map inputs to
> outputs based on what values match up, in this case 3 split into 1.6 and
> 1.4, and 5 split into 2.4 and 2.6
> 
> 
> **** Value Matching
> 
> Not all CoinJoin users need their transactions to have specific output
> amounts; some users simply need to move money from one place to another
> but do not need a specific amount moved or at a specific time. These
> users can assist users with more stringent requirements by matching the
> input or output values they request. As a general principle wallets
> SHOULD make these anonymity optimizations possible by allowing users to
> schedule transactions to complete by a specific time and/or allow users
> to specify that they do not wish the transaction to happen unless
> CoinJoin is used.
> 
> With four-stage two-party mixes the Alice, who advertised a desire to do
> a transaction first, can easily do ths by picking the transaction output
> amounts only after Bob replies with his desired inputs and outputs, and
> picking those amounts so they match Bob's. (or some combination of Bob's
> outputs)
> 
> 
> **** Merge Avoidance
> 
> Merge avoidance is the practice of avoiding the merging of multiple
> transaction inputs into a single new transaction output, thus implying a
> common relationship between those inputs. The most primitive form of
> merge avoidance is to create multiple individual transactions, each
> moving single transaction input to an output. (or perhaps some small
> number) This is of course inefficient, and appears to have only been
> proposed as a means to still allow for coin blacklists to function while
> preserving some financial privacy.
> 
> Combined with CoinJoin however merge avoidance becomes much more
> powerful. For instance even in its most simple form multiple parties can
> combine their merge-avoiding transaction sets, giving even transactions
> without actual counterparties a useful measure of plausible deniability.
> 
> In addition the underlyng features that make merge-avoidance possible -
> the ability of a recipient to designate they are willing to receive
> payments made to multiple addresses - synergisticly make very
> sophisticated value matching strategies possible.
> 
> 
> ***** Cut-thru payments
> 
> Related to merge avoidance the idea of a cut-thru payment is that if an
> intermediary is both a debitor and a creditor, with sophisticated
> payment protocols they can request incoming payments to directly pay
> outgoing liabilities, skipping them as an intermediary. While premature
> to implement this feature now, it is worth thinking about for the future.
> 
> 
> ** Tor
> 
> While Tor isn't perfect there is real-world evidence - specifically the
> Snowden leaks - that it works well enough to be considered a worthy
> adversary by state-level attackers. Wallets MUST suppoort the basic
> proxy options that allow the Tor proxy - or some other similar
> technology - to be used for privacy enhancement and SHOULD make use of
> Tor-specific features such as hidden services.
> 
> 
> * Decentralization
> 
> ** Fees
> 
> In a decentralized system distinguishing DoS attackers from legitimate
> users is at best difficult, at worst impossible. Wallets that do not
> provide users with the ability to set fees, both when a transaction is
> created initially and after initial broadcast, do their users a
> disservice by taking away a vital method of responding to an attack:
> outspending the attacker.
> 
> Wallets MUST give users the ability to set the fee per KB they are
> willing to pay for their transactions. Wallets SHOULD allow users to
> change that fee after the fact via transction replacement. Wallets MAY
> additionally implement fee estimation techniques, such as watching what
> transactions in the mempool are finally mined, or using estimates
> provided by miners. However it must be recognized that such data is
> inherently unreliable, and this may become a problem in practice in the
> future; giving users robust ways to alter fees after the fact will make
> lying about fee data - perhaps to push fees upwards - less advantageous.
> 
> Note that the current direction of the Bitcoin Foundation maintained
> reference implementation is weakly towards a pure estimation scheme;
> deployment of full nodes supporting replacement and support from miners
> is a precondition to doing things correctly.
> 
> 
> *** Fees and privacy
> 
> Where there is a trade-off between fees and privacy - such as with merge
> avoidance strategies - users should be given options to specify how much
> extra they are willing to pay for extra privacy. Wallets SHOULD default
> to being willing to pay some extra, perhaps 25% more over the basic fee.
> 
> 
> ** SPV, full nodes and partial nodes
> 
> Wallet software SHOULD whenever possible blur the distinctions between
> full UTXO set nodes, SPV nodes, and partial UTXO set nodes. In addition
> to those three basic categories there is also the question of whether or
> not a node stores archival blockchain data, something that all three
> categories of nodes can participate in.
> 
> Instead how a node contributes back to the health of the network should
> be a function of what resources it has available to it. Of course in
> some cases, like a phone wallet, that won't be very much, but for
> desktop or business usage the resources available can be significant in
> both bandwidth and storage capacity.
> 
> 
> *** Relaying data
> 
> **** Blocks and blockheaders
> 
> Any node can safely relay blocks and block headers, where "safely" is
> defined as SPV-level security. Our threat model implies that we don't
> trust random peers on the network, thus we are not relying on them for
> block validity; as a SPV node we are relying on miners to do validity
> checking for us. In short feel free to relay data that you yourself
> would trust.
> 
> 
> **** Transactions
> 
> Remember that relaying transactions has a DoS-attack risk; the Bitcoin
> model relies entirely on mining fees and/or priority as the limited
> resource to prevent DoS attacks. Thus at present nodes SHOULD NOT relay
> transactions if they do not have an up-to-date copy of the relevant
> parts of the UTXO set spent by the transaction. (relaying transactions
> spending only inputs in a partial UTXO set is acceptable):
> 
> 
> **** Block-header diversity
> 
> Wallet software MUST make it possible to get block-header information
> from a diverse set of sources. These sources SHOULD comprise more than
> just peers on a single P2P network. Remember that it is acceptable to
> use even centralized sources in addition to decentralized ones for
> blockheader data - knowing that a miner did the work required to create
> a block header is always valuable information. (for reasonable amounts
> of work) For instance the author's block headers over twitter project -
> while an April Fools joke - is equally a perfectly reasonable backup
> source of blockheader data.
> 
> 
> ** Updating wallets from blockchain data
> 
> In an ideal world wallets wouldn't need to sync their state with
> blockchain data at all: pervasive use of payment protocols would have
> senders send txout proofs directly to recipients. But that's not the
> case. Instead wallet implementations sync themselves from the
> blockchain, and when bandwidth limited this becomes a tradeoff between
> bandwidth and privacy: your transactions hide in the anonymity set of
> the false positives matched by the filter.
> 
> 
> *** Bloom filters
> 
> The current implementation for SPV nodes is to simply give peers a bloom
> filter; the false-positives make the anonymity set. For n peers this has
> O(n) cost when a new block comes in; Bloom filters are cheap to test
> against and this system works reasonably well.
> 
> However, for archival blockchain data bloom filters are seriously
> flawed: every block has to be read from disk in full, the bloom filter
> matched, and some (potentially very small!) subset sent to the peer. n
> peers. The result is high IO load on the node relative to the client,
> enabling easy DoS attacks.
> 
> Wallet software SHOULD NOT implement only Bloom filters, however using
> them when availalbe is acceptable. Note how the Bloom filter design has
> at best O(n^2) scaling ruling it out for large-blocksize future
> scenarios.
> 
> 
> *** Prefix filters
> 
> TXO or UTXO data can be easily indexed by in radix trees with log2(k)
> lookup cost per query. We can take advantage of the fact that the query
> keys need not be provided in full by only providing partial keys.
> Because scriptPubKeys are randomly distributed a prefix n bits long has
> an anonymity set of roughly 1/2^n * # of transactions in total.
> 
> Wallet software SHOULD implement prefix filters and SHOULD use them in
> preference to bloom filters whenever available. Wallet software that
> currently uses full-key filtering - e.g. Electrum - MUST be upgraded to
> support prefix filters in the future.
> 
> Wallet software MUST NOT assume that matching anyting other than
> H(scriptPubkey) is possible. This applies to bloom filter matches as
> well.
> 
> In the future miners may commit to either the TXO set in conjunction
> with per-block lookup trees, or possibly the full UTXO set. In either
> case many of the leading designs may be implemented with only
> H(scriptPubKey) lookup capability for reasons of scalability.
> 
> 
> * Security
> 
> Bitcoin wallet software is unprecedented in how they provide attackers
> targets that are highly profitable to attack and highly liquid. (note
> the irony here!) A succesfull attack that injects malicious theft
> routines into either sourcecode or binaries can steal thousands of
> Bitcoins in one go, and the attacks target is you and your team.
> Following basic good practices for robust code is a start, but it's far
> from enough.
> 
> 
> ** Source-code integrity
> 
> Sourcecode MUST be maintained using a revision control system that
> provides strong integrity guarantees; git is recommended.
> 
> Sourcecode MUST be PGP signed on a regular basis. Releases MUST be
> signed - in git this is accomplished by signing the release tag.
> Individual commits SHOULD be signed, particularly if source-code used in
> day-to-day development is kept on an untrusted server, e.g. github.
> Recovering from a server compromise is made significantly easier if
> every commit is securely signed.
> 
> 
> ** Binary integrity
> 
> All things being equal it is better to use an interpreted language
> rather than a compiled one; auditing the former is significantly easier
> than the latter. Similarly, all things being equal, do not distribute
> binaries of your software - have end-users compile binaries themselves.
> 
> Of course all things are not equal, and frequently compiled languages
> and distributing binaries is the correct choice. If that is the case
> deterministic build systems MUST be used when possible; if using them is
> not possible take great care with the process by which binaries are
> created and try to create long-term plans to move to a deterministic
> build system in the future.
> 
> 
> ** PGP
> 
> Developers of wallet software MUST make use of PGP and participate in
> the web-of-trust. Developers MUST advertise their PGP fingerprint
> widely, for instance on personal websites, forum profiles, business
> cards etc. simultaneously. Multiple paths by which someone can find a
> fingerprint claimed to be of some developer make subterfuge easier to
> detect and more costly to carry out. When possible it is highly
> recommended to attach these advertisements to real-world, physical,
> actions. For instance the author has included his PGP fingerprint in
> highly public, videotaped, talks he has given at conferences. He has
> also created a videotaped statement of his PGP key that was timestamped
> in the Bitcoin blockchain. While it certainly is possible for such
> artifacts to be faked, doing so convincingly is expensive, labour
> intensive, and error prone.
> 
> Developers SHOULD sign as much communication as practical. Sourcecode is
> one form; your emails to development lists and between each other are
> another. Signing both leaves a large body of widely distributed work,
> all tied to your identity. (it's highly unfortunate that nearly all
> publicly available mail archives do not make mail accessible to the
> public in such a way as to allow verification of PGP signatures; often
> even inline signatures are broken for various reasons)
> 
> 
> *** Increasing adoption of PGP
> 
> Keep in mind that end-users very rarely verify PGP fingerprints at all,
> let alone correctly - the above advice with regard to PGP is currently
> mostly useful in allowing *other developers* the tools they need to
> verify the integrity of your code. For instance, in the event of a
> suspected compromise consistantly signed code allows anyone competent in
> the use of PGP to quickly evaluate the situation, and if warrented,
> inform less sophisticated users through traditional measures such as the
> media.
> 
> While this is somewhat out of scope for this document the "DarkWallet
> effort" should include work to make PGP more user-friendly and a better
> experience. But that does *not* have to mean "making PGP easier for
> grama", right now "making PGP easier for Joe Wallet Developer" is a
> laudable goal. For instance understanding and using the web-of-trust
> sucks right now. How can we make that experience better for a user who
> understands the basics of cryptography?
> 
> 
> ** SSL/Certificate authorties
> 
> While certificate authorities are notoriously bad at the job they are
> supposed to be doing the CA system is still better than nothing - use it
> where appropriate. For instance if you have a website advertising your
> software, use https rather than http.
> 
> 
> ** Multi-factor spend authorization, AKA multisig wallets
> 
> <mainly discussed at the conference in terms of multiple individuals
> controlling funds, which is out of scope for this document>
> 
> Assuming any individual device is uncompromised is risky; wallet
> software SHOULD support some form of multi-factor protection of some or
> all wallet funds. Note that this is a weak "should"; mainly we want to
> ensure that users have options to keep large quantities of funds secure;
> accepting higher risks for smaller quantities is an acceptable
> trade-off.
> 
> FIXME: go into more detail.
> 
> 
> *** P2SH
> 
> Wallet software MUST support paying funds to P2SH addresses.
> 
> 
> ** Payment Integrity
> 
> Multi-factor wallets protect your funds from being spent without your
> knowledge, but they provide no assurance about where those funds went; a
> Bitcoin address is not an identity. A payment protocol, such as BIP70,
> is needed.
> 
> Wallet software SHOULD support BIP70. Yes, there are (justified)
> concerns about its current dependence on the certificate authority
> system, but those concerns should be addressed by a combination of
> fixing that system, and extending BIP70 with different and better
> identity verification options.
> 
> However, remember that in the absense of multi-factor wallets the "know
> who you are paying" protections of BIP70 are actually pretty much
> useless; malware that defeats the payment protocol locally is not much
> different than malware that silently rewrites Bitcoin addresses. There
> are other motivations for the BIP70 version of the payment protocol, but
> whether or not they are actually interesting for users is an open
> question; it was not designed by user-experience experts. Thus wallet
> authors should consider supporting a low priority for now.
> 
> 
> -- 
> 'peter'[:-1]@petertodd.org
> 000000000000000f9102d27cfd61ea9e8bb324593593ca3ce6ba53153ff251b3

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 841 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131220/850f36f2/attachment.sig>

From aaxiomfinity at gmail.com  Fri Dec 20 07:49:18 2013
From: aaxiomfinity at gmail.com (Chris Evans)
Date: Thu, 19 Dec 2013 23:49:18 -0800
Subject: [Bitcoin-development] bitcoin-qt
Message-ID: <CAE0e52VaUWDwEcXZfR7cRxyzQ90BPvv4K2JpuyELVYnWqAhi5w@mail.gmail.com>

maybe make it so bitcoin.conf settings can be edited with in the app
instead of external editor,  and make it easier to enable rpc server mode...
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131219/028182b9/attachment.html>

From mark at monetize.io  Fri Dec 20 07:54:31 2013
From: mark at monetize.io (Mark Friedenbach)
Date: Thu, 19 Dec 2013 23:54:31 -0800
Subject: [Bitcoin-development] bitcoin-qt
In-Reply-To: <CAE0e52VaUWDwEcXZfR7cRxyzQ90BPvv4K2JpuyELVYnWqAhi5w@mail.gmail.com>
References: <CAE0e52VaUWDwEcXZfR7cRxyzQ90BPvv4K2JpuyELVYnWqAhi5w@mail.gmail.com>
Message-ID: <52B3F7B7.3020108@monetize.io>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

JSON-RPC is a huge security risk. It's perfectly reasonable that
enabling it requires some technical mumbo-jumbo.

Are there specific configuration settings that you would like to see
exposed by the GUI?


On 12/19/2013 11:49 PM, Chris Evans wrote:
> maybe make it so bitcoin.conf settings can be edited with in the
> app instead of external editor,  and make it easier to enable rpc
> server mode...
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.14 (GNU/Linux)
Comment: GPGTools - http://gpgtools.org
Comment: Using GnuPG with Thunderbird - http://www.enigmail.net/

iQIcBAEBAgAGBQJSs/e3AAoJEAdzVfsmodw4mEkP/3XdrWMoly5t2ALN/YAj1QCv
nviQfzcv7vQKEO1ZnLMmyo1npIMRf5UqZCD6kfWS7g4vtEHjP2KNQXdwcNkDPbdL
7BjHGHghoGfjPosTz2HV8I79g+6o+f9KCYxUz56dRVs1eNjF/QAMKbHY5M2QD7UZ
3BVxdEGD2UkIN89dUSq+Ljrt+ugPlOYFiehrLhOSqYTLtoG2von7JQR8q6HRKmzC
hWSuT20aV66VL03ps5Dt/c8NVr0p0nNYRVY1vPzkcjN+1UpMBUvgn8E2d5XrchD+
uqTeWCMv2bhmFTr0qaVQwBY5Et5q6/OBJbWcF02qFq0/hy/SuZPIp/5fZEOuSpns
/QJRGRyMLtCpRH4iNxlhcZeiQs8MoV02AHYiSN/9Z9yZDEBZkpbKO9Ce6S0GwmEX
iXeloVaIil5dqtr8P9aWXW12jgohGy84oFGwK0Bxrk+HfT04OCSU0lqjRQVFzfdl
/K0jqgRdrXZz2wQYOO6+GjQvb8CP/7WfRxivKqcKdQT9CrsW+DvgaAkTy3tBJcel
aGrPynsNnDdatXK0Nyhirn/gSvxSW/Z2x2CIaPCq+jw4HrnmJu+j5AXcD8yKo8+c
FsTap1/TXeFPcDP6B7eUT+nV+hR6qXYLOuHpFwbTvt/8SJ0jAgj9Yhyq8PmL4rok
mdrqhFHk3i/RMYqGK59Q
=WCub
-----END PGP SIGNATURE-----



From jeremy at taplink.co  Fri Dec 20 06:48:53 2013
From: jeremy at taplink.co (Jeremy Spilman)
Date: Thu, 19 Dec 2013 22:48:53 -0800
Subject: [Bitcoin-development] BIP proposal: Authenticated prefix trees
In-Reply-To: <52B3A1C8.5000005@monetize.io>
References: <52B3A1C8.5000005@monetize.io>
Message-ID: <op.w8do7rg9yldrnw@laptop-air.hsd1.ca.comcast.net>

Wow there's a lot here to think about. I'm pretty sure I haven't grasped  
the full implications yet.

I see it proposes to also introduce additional BIPs describing the use of  
the data stucture for stateless validation & mining, the UBC address index  
for "SPV+" operating modes, document timestamping and merged mining.

Can the BIP stand alone as a BIP without some specific changes to the  
protocol or end-user accessible features defined within it? It seems like  
an extremely useful data stucture, but as I understand it the purpose of  
BIPS is defining interoperability points, not implementation details?

Unless the tree itself is becoming part of the protocol, seems like its  
spec, test vectors, and reference implementation can live elsewhere, but I  
would love to read about BIPS which use this tree to accomplish some  
amazing scalability or security benefits.





From laanwj at gmail.com  Fri Dec 20 08:10:03 2013
From: laanwj at gmail.com (Wladimir)
Date: Fri, 20 Dec 2013 09:10:03 +0100
Subject: [Bitcoin-development] bitcoin-qt
In-Reply-To: <CAE0e52VaUWDwEcXZfR7cRxyzQ90BPvv4K2JpuyELVYnWqAhi5w@mail.gmail.com>
References: <CAE0e52VaUWDwEcXZfR7cRxyzQ90BPvv4K2JpuyELVYnWqAhi5w@mail.gmail.com>
Message-ID: <CA+s+GJAb00vTyrkOv8NGuRs_n+2UefbxADW5UdeTa-=rd=LLRg@mail.gmail.com>

On Fri, Dec 20, 2013 at 8:49 AM, Chris Evans <aaxiomfinity at gmail.com> wrote:

> maybe make it so bitcoin.conf settings can be edited with in the app
> instead of external editor,  and make it easier to enable rpc server mode...
>

You can help me and diapolo a lot by testing his pull request to add a few
options to the options dialog (and improve the dialog in general),

https://github.com/bitcoin/bitcoin/pull/3347

It doesn't add the RPC settings though. As Mark says, it's dangerous to
make it too easy to shoot yourself in the foot.

Wladimir
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131220/732b97c5/attachment.html>

From pete at petertodd.org  Fri Dec 20 10:48:26 2013
From: pete at petertodd.org (Peter Todd)
Date: Fri, 20 Dec 2013 05:48:26 -0500
Subject: [Bitcoin-development] BIP proposal: Authenticated prefix trees
In-Reply-To: <52B3A1C8.5000005@monetize.io>
References: <52B3A1C8.5000005@monetize.io>
Message-ID: <20131220104826.GC23836@savin>

On Thu, Dec 19, 2013 at 05:47:52PM -0800, Mark Friedenbach wrote:
> This BIP describes the authenticated prefix tree and its many
> variations in terms of its serialized representation. Additional BIPs
> describe the application of authenticated prefix trees to such
> applications as committed indices, document time-stamping, and merged
> mining.

Could you expand more on how prefix trees could be used for
time-stamping and merged mining?


>     >>> dict = AuthTree()
>     >>> dict['Curie'] = VARINT(1898)
>     >>> dict('Einstein') = VARINT(1905)
>     >>> dict['Fleming'] = VARINT(1928)
>     >>> dict['??'] = VARINT(2009)

I'd be inclined to leave the unicode out of the code examples as many
editors and shells still don't copy-and-paste it nicely. Using it in BIP
documents themselves is fine and often has advantages re: typesetting,
but using it in crypto examples like this just makes it harder to
reproduce the results by hand unnecessarily.

-- 
'peter'[:-1]@petertodd.org
0000000000000002d7a0c56ae2c5b2b3322d5017cfef847455d4d86a6bc12280
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 685 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131220/20d08a2b/attachment.sig>

From mark at monetize.io  Fri Dec 20 11:21:38 2013
From: mark at monetize.io (Mark Friedenbach)
Date: Fri, 20 Dec 2013 03:21:38 -0800
Subject: [Bitcoin-development] BIP proposal: Authenticated prefix trees
In-Reply-To: <op.w8do7rg9yldrnw@laptop-air.hsd1.ca.comcast.net>
References: <52B3A1C8.5000005@monetize.io>
	<op.w8do7rg9yldrnw@laptop-air.hsd1.ca.comcast.net>
Message-ID: <52B42842.6000306@monetize.io>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Hi Jeremy, Let's give a preview of the application-oriented BIPs I
mentioned:

Stateless validation and mining involves prefixing transaction and
block messages with proofs of their UTxO state changes. These are the
"operational proofs" I describe in the draft, and they work on prefix
trees whose root hashes committed to the coinbase in a soft-fork
upgrade of the validation rules.

"Ultimate blockchain compression" involves consensus over an address
index, which can be queried over the p2p network by lightweight nodes.
The structure of the index is an authenticated prefix tree, and the
results of such a query is an an inclusion proof.

Document time-stamping and this new method of merged mining use the
same structure: a prefix tree whose root hash value is committed to a
pruneable output of the coinbase transaction. Document timestamp
proofs and merged mining proof-of-works are inclusion proofs over this
tree.

I hope that shows how the BIP directly affects interoperability of the
bitcoin protocol and clients which use these applications. I released
this BIP first to get some feedback on the structure itself, which
will be used by all of the application-specific BIPs which follow.


Stepping back and speaking generically, the purpose of a BIP as I see
it is to standardize details which affect interoperability between
clients. In fact, at a cursory glance only about half of the BIPs deal
with protocol issues directly - the rest deal with local /
user-interface issues like key derivation or JSON-RPC APIs. Even if
none of the applications involved protocol changes, I still think BIPs
like this would be of value in that they serve to standardize things
which are or will seek to become commonly used and widely implemented.

Cheers,
Mark

On 12/19/2013 10:48 PM, Jeremy Spilman wrote:
> Wow there's a lot here to think about. I'm pretty sure I haven't
> grasped the full implications yet.
> 
> I see it proposes to also introduce additional BIPs describing the
> use of the data stucture for stateless validation & mining, the UBC
> address index for "SPV+" operating modes, document timestamping and
> merged mining.
> 
> Can the BIP stand alone as a BIP without some specific changes to
> the protocol or end-user accessible features defined within it? It
> seems like an extremely useful data stucture, but as I understand
> it the purpose of BIPS is defining interoperability points, not
> implementation details?
> 
> Unless the tree itself is becoming part of the protocol, seems like
> its spec, test vectors, and reference implementation can live
> elsewhere, but I would love to read about BIPS which use this tree
> to accomplish some amazing scalability or security benefits.
> 
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.14 (GNU/Linux)
Comment: GPGTools - http://gpgtools.org
Comment: Using GnuPG with Thunderbird - http://www.enigmail.net/

iQIcBAEBAgAGBQJStChCAAoJEAdzVfsmodw42DcQAIlgkukh5K/XYloIiT5pgaHS
xCZXtOvxpNUep8x35rvEO1ePjvPvUkbUE2jRw2se1rSMkhzw3PpHHtXV/gIOGqUe
WVKeeIM5pZX56sEcEdUQ1pTwB2rmtSNeyCuHl8fLatk8eLhcAHcpv/7esLuAjWCr
EE840s8+q3ltuzKi3nqxK84bwIohgSMKhncfonNp5lMAtug8Itqopq3DPDoxwiK/
qUwSz5UCEMH6oNHnywzhKGUhBErqo4q8IgAKcZYBZZ9n4BRjf4ngoCw9n5wCef8v
tyTvwrg0nSQTQa67cg7RCsY7SisrI9gaMvCYTSvEMKdw9X0aqAX1p0yZpTbV+dIr
Q2ZT6gJmg2sD22zKY1/58oq+PiNO+nRS81OG2znZofsIfhOVW0bIZAQ8+zZtFW40
vXxMuHCNieCK8e7f9A6LLv/Zz7rmNxdQ6cHBEL1nIs1Y4d1FpHJVI2LHi54QmVXf
C5PKF/e7K2eD3LZMNxS818rZaiJJ7qmpjS3rkG2owHyJHEhBJIlkYXfI1YCraT+b
R5AzAh2Oz0Nyb5ChP2VSaecJNjGvRMo7Z6HCytmgAGOEcDDZkxSv0kkprbvchqXx
XziFgA4iSajBKYWPiPLGMADfMPT6zd4fhDjyaN8+LPO3d3ZK1VwmQDLRQ3DxfeIP
RgchHR/pS77XI7hCFwtN
=ao17
-----END PGP SIGNATURE-----



From pete at petertodd.org  Fri Dec 20 12:47:10 2013
From: pete at petertodd.org (Peter Todd)
Date: Fri, 20 Dec 2013 07:47:10 -0500
Subject: [Bitcoin-development] BIP proposal: Authenticated prefix trees
In-Reply-To: <52B425BA.6060304@monetize.io>
References: <52B3A1C8.5000005@monetize.io> <20131220104826.GC23836@savin>
	<52B425BA.6060304@monetize.io>
Message-ID: <20131220124710.GB21148@savin>

On Fri, Dec 20, 2013 at 03:10:50AM -0800, Mark Friedenbach wrote:
> On 12/20/2013 02:48 AM, Peter Todd wrote:
> > On Thu, Dec 19, 2013 at 05:47:52PM -0800, Mark Friedenbach wrote:
> >> This BIP describes the authenticated prefix tree and its many 
> >> variations in terms of its serialized representation. Additional
> >> BIPs describe the application of authenticated prefix trees to
> >> such applications as committed indices, document time-stamping,
> >> and merged mining.
> > 
> > Could you expand more on how prefix trees could be used for 
> > time-stamping and merged mining?
> 
> The root hash of a prefix tree is placed in the coinbase at a location
> standardized by convention.

Right, last txout in an OP_RETURN like we discussed.

> For document time-stamping, the key can be
> the hash of the document.

Don't you mean the value is the hash of the document and the key is
irrelevant?

> For merged mining, the key is the hash of
> the genesis block of the altchain, and the value is the hash of the
> aux-pow (for p2pool, the share hash).

What's the advantage over the direction-based system I proposed before?
Seems to me the code required to validate the proof is significantly
more complex in your scheme.

http://www.mail-archive.com/bitcoin-development at lists.sourceforge.net/msg03149.html

> In the system I have in mind this adds 43 bytes to the coinbase
> transaction,

By 43 bytes you mean the whole op_return txout right?

> >>>>> dict = AuthTree() dict['Curie'] = VARINT(1898) 
> >>>>> dict('Einstein') = VARINT(1905) dict['Fleming'] =
> >>>>> VARINT(1928) dict['??'] = VARINT(2009)
> > 
> > I'd be inclined to leave the unicode out of the code examples as
> > many editors and shells still don't copy-and-paste it nicely. Using
> > it in BIP documents themselves is fine and often has advantages re:
> > typesetting, but using it in crypto examples like this just makes
> > it harder to reproduce the results by hand unnecessarily.
> 
> Thanks for the feedback, I rather agree. When I was creating that
> example for some reason I wanted the right branch of the root node to
> be used, which is difficult when only 7-bit ASCII keys are used. But I
> don't think the illustrative point I had in mind ended up being
> particularly relevant, so I'll rework it.

That example is python, so I'd suggest just using escape sequences
myself. You probably also should include the "b" prefix to make the
strings explicitly binary for py3 compatibility, ie dict[b'\xbe\xef']

-- 
'peter'[:-1]@petertodd.org
000000000000000216e3750a9ad9584395352d728a3c543844eab3bfc9ce1073
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 685 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131220/267c3c6c/attachment.sig>

From pete at petertodd.org  Fri Dec 20 13:17:31 2013
From: pete at petertodd.org (Peter Todd)
Date: Fri, 20 Dec 2013 08:17:31 -0500
Subject: [Bitcoin-development] BIP proposal: Authenticated prefix trees
In-Reply-To: <52B42842.6000306@monetize.io>
References: <52B3A1C8.5000005@monetize.io>
	<op.w8do7rg9yldrnw@laptop-air.hsd1.ca.comcast.net>
	<52B42842.6000306@monetize.io>
Message-ID: <20131220131731.GC21148@savin>

On Fri, Dec 20, 2013 at 03:21:38AM -0800, Mark Friedenbach wrote:
> Hi Jeremy, Let's give a preview of the application-oriented BIPs I
> mentioned:
> 
> Stateless validation and mining involves prefixing transaction and
> block messages with proofs of their UTxO state changes. These are the
> "operational proofs" I describe in the draft, and they work on prefix
> trees whose root hashes committed to the coinbase in a soft-fork
> upgrade of the validation rules.
> 
> "Ultimate blockchain compression" involves consensus over an address
> index, which can be queried over the p2p network by lightweight nodes.
> The structure of the index is an authenticated prefix tree, and the
> results of such a query is an an inclusion proof.

I've thought about this for awhile and come to the conclusion that UTXO
commitments are a really bad idea. I myself wanted to see them
implemented about a year ago for fidelity bonded banks, but I've changed
my mind and I hope you do too.

They force miners and every full node with SPV clients to store the
entire UTXO set in perpetuity. This is bad by itself, but then they make
it even worse by making Bitcoin really useful and convenient to use as a
decentralized database; UTXO commitments make it easy and convenient to
implement systems like Namecoin on top of Bitcoin, yet we don't have the
UTXO expiration that might make such uses reasonable. Right now the UTXO
set is reasonable small - ~300MB - but that can and will change if we
make it an attractive way to store data. UTXO commitments do exactly
that.

You're also *not* giving users what they actually want: the transactions
associated with their wallets. Even though Electrum could easily work
via a pure UTXO database they implemented transaction lookup instead;
Electrum servers cough up every transaction associated with a user's
wallet. If you're going to do that, it's just as easy to do per-block
lookup trees which don't force the UTXO set to be stored.

There's also a more subtle issue: the security model of UTXO commitments
sucks. It encourages wallets to essentially trust single confirmations
because it's unlikely that nodes will want to store the multiple copies
of the UTXO set required to provide proof of multiple confirmations.
Basically the issue is when you start your wallet you get a proof of
UTXO set for the most recent block; that's just one confirmation. To get
more confirmations you have to wait for subsequent blocks, checking the
set on each block. Per block indexes on the other hand naturally lead
wallets to count confirmations properly.


IMO you should take this technology to Namecoin instead. For them the
fast lookups are probably worth the trade-offs, and they expire domains
so the total set size doesn't grow unbounded.

-- 
'peter'[:-1]@petertodd.org
00000000000000028fd077fb1e33e942e3e875aa29cec134fed89d650242c577
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 681 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131220/15a33b11/attachment.sig>

From pete at petertodd.org  Fri Dec 20 16:54:34 2013
From: pete at petertodd.org (Peter Todd)
Date: Fri, 20 Dec 2013 11:54:34 -0500
Subject: [Bitcoin-development] Censorship-resistance via timelock crypto for
 embedded consensus systems
Message-ID: <20131220165434.GA23932@petertodd.org>

Embedded consensus systems such as Mastercoin face the risk that the
data they need to embed in the host consensus system will be subject to
censorship. This censorship can take two forms: whitelists and
blacklists. The former we can't do anything about, however the latter
requires someone to identify the data-carrying transactions that are to
be blacklisted.

Embedding data steganographically in transactions is known to be
possible in ways that can-not be detected. Even if P2SH^2 (1) is
implemented data can be hidden in pubkeys in P2SH scriptSigs, either by
using unused pubkeys in CHECKMULTISIG transactions with a simple
transform(2) to turn arbitrary data into valid-looking pubkeys, or with
some ECC math even usable pubkeys can have data hidden in them.(3)

However these methods are unsuitable if the data needs to be provably
made public; without the encryption key the data is securely hidden.
Almost all consensus systems rely on proof-of-publication(4) and even if
the encryption keys are later made public - perhaps by broadcasting them
on a P2P network - we've only shifted the problem to proving that the
keys were released. Of course, if we then publish them via our host
consensus system, *that* act of publishing can itself be censored!

Timelock cryptography offers a solution to this problem. Let S(n, k) be
a sequential-hard strengthening function that takes key k and number of
rounds n, outputting k'. A suitable S() might be the scrypt function.
Let E(d, k) be a symmetric encryption algorithm. Finally let H(m) be a
cryptographic hash function.

To hide data D in a transaction we set k to some random and publicly
known value in the transaction and compute k'=S(n, k) and D'=E(D, k')
Then D' is hidden in the transaction, perhaps in an unused pubkey of a
CHECKMULTISIG scriptPubKey.

Our intended audience can also calculate k' from the public data, and
thus recover D in time ~t, thus we know that after time ~t has elapsed
all participants in the system can reliably come to consensus.

However miners and other parties who may wish to censor D face a
dilemma: If they repeat the calculation for every transaction that may
be hiding data they delay all transactions for all users. In addition
miners have a financial incentive to defect and mine transactions
without checking for hidden data.


Practical Considerations
========================

Efforts should be made to limit the scope of possible transactions as
much as possible to reduce the computation required, e.g. by restricting
the search space to only transactions with scriptPubKeys starting with
some short prefix. This is a balance between computation and censorship
resistance.

Consideration needs to be made as to how the data will be validated as
part of the embedded consensus system, for instance via a checksum or
cryptographic signature.

Participates in the embedded consensus system should share k' keys among
each other to reduce overall effort. This ties back to validation: it
must not be possible to distribute a fake k' undetectably.

Picking n, and thus the time taken, is a balance. Also there should be
some mechanism to update n as technological improvements warrant. Along
those lines this method works best when t can be large and immediate
consensus is not required. A suitable use-case could be a key-value
consensus system for name information where mappings are infrequently
changed.

The source of k should be such that k' can be computed in advance,
however only by the sender. For instance simply using the first txin
hash allows the attacker to compute k' in advance themselves. A better
choice would be the first (real) pubkey in a scriptPubKey, a value we
can both compute in advance, yet is not known publicly.


Censorship resistant voting
===========================

With due care the scheme can be used to allow for censorship-resistant
voting. While previously it was believed that miners would inevitably be
able to censor any voting scheme - with the exception of certain special
cases(5) - provided that the financial incentive to collect fees
outweighs the incentive to not count votes we have strong censorship
resistance with strong consensus in a fixed amount of time.


1) Gregory Maxwell, [Bitcoin-development] To prevent arbitrary data
   storage in txouts ? The Ultimate Solution,
   https://www.mail-archive.com/bitcoin-development at lists.sourceforge.net/msg01987.html

2) Peter Todd, Re: MasterCoin: New Protocol Layer Starting From ?The
   Exodus Address?,
   https://bitcointalk.org/index.php?topic=265488.msg3377058#msg3377058

3) ByteCoin, Untraceable transactions which can contain a secure message
   are inevitable, https://bitcointalk.org/index.php?topic=5965.0

4) Peter Todd, [Bitcoin-development] Disentangling Crypto-Coin Mining:
   Timestamping, Proof-of-Publication, and Validation,
   http://www.mail-archive.com/bitcoin-development at lists.sourceforge.net/msg03307.html

5) John Dillon, Proposal: We should vote on the blocksize limit with proof-of-stake
   voting, https://bitcointalk.org/index.php?topic=230864.0

-- 
'peter'[:-1]@petertodd.org
0000000000000001cdaabe80320d14ab5907997ec6ad12eaaa304941c34fc8bd
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 490 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131220/75159ce0/attachment.sig>

From hozer at hozed.org  Fri Dec 20 17:30:00 2013
From: hozer at hozed.org (Troy Benjegerdes)
Date: Fri, 20 Dec 2013 11:30:00 -0600
Subject: [Bitcoin-development] Payment processors that support testnet?
Message-ID: <20131220173000.GE3180@nl.grid.coop>

Are there any bitcoin to fiat currency processors (like bitpay,
coinbase, etc) that allow testing using the bitcoin testnet?

It seems most of the credit card payment processor apis have 
features to allow developers to do testing without 'real money',
what's the equivalent of this for bitcoin when you need to do
end-to-end testing that goes from BTC to a USD or EU denominated
bank accound?



From taylor.gerring at gmail.com  Fri Dec 20 17:32:57 2013
From: taylor.gerring at gmail.com (Taylor Gerring)
Date: Fri, 20 Dec 2013 11:32:57 -0600
Subject: [Bitcoin-development] [unSYSTEM] DarkWallet Best Practices
In-Reply-To: <52B359C4.3050106@sindominio.net>
References: <20131219131706.GA21179@savin> <52B359C4.3050106@sindominio.net>
Message-ID: <910AE313-00A5-4DEB-8974-742FE0B14116@gmail.com>

I?m inclined to agree, as this was discussed on multiple occasions and seems to fix a lot of the address re-use problems. With hot topics like ?coin validation?, I think it?s important to highlight the privacy that generating fresh addresses from public extended keys grants us.

Also thinking about implications regarding non-merchant use of Payment Protocol, encouraging the exchange of extended public keys instead of a single address could be a boon for Payment Protocol to actually be useful for users. Initially, the idea was that the merchant would generate a new address from an extended key and include that in the Payment Request. How do we handle pushing the extended public key down to the wallet itself? Do we just shoehorn the exchange of keys into the Payment Protocol itself via a special tag or would this require more substantive change? Services could develop to facilitate the exchange (acting as a sort of ?PP gateway?) or wallet software might be able to directly communicate, perhaps by exchanging PGP-encrypted files in Payment Protocol format via Bluetooth, AirDrop, email, BitMessage, or whatever future communications channel comes into being. 

Thanks again to Peter for putting together a consolidated list of topics!

Taylor



On Dec 19, 2013, at 2:40 PM, caedes <caedes at sindominio.net> wrote:

> I feel it's missing mention of using (or not) *extended public keys*
> from bip 32 to share multiple addresses in one go, so regular payments
> can be done without asking for further addresses. Also since whoever has
> the extended key can generate public keys this might help P2SH where the
> public key is also needed.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131220/f86849b3/attachment.html>

From mark at monetize.io  Fri Dec 20 18:41:31 2013
From: mark at monetize.io (Mark Friedenbach)
Date: Fri, 20 Dec 2013 10:41:31 -0800
Subject: [Bitcoin-development] BIP proposal: Authenticated prefix trees
In-Reply-To: <20131220131731.GC21148@savin>
References: <52B3A1C8.5000005@monetize.io>
	<op.w8do7rg9yldrnw@laptop-air.hsd1.ca.comcast.net>
	<52B42842.6000306@monetize.io> <20131220131731.GC21148@savin>
Message-ID: <52B48F5B.8020706@monetize.io>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

(Sorry Peter, this was meant for the whole list:)

On 12/20/2013 05:17 AM, Peter Todd wrote:
> I've thought about this for awhile and come to the conclusion that 
> UTXO commitments are a really bad idea. I myself wanted to see them
> implemented about a year ago for fidelity bonded banks, but I've
> changed my mind and I hope you do too.
> 
> They force miners and every full node with SPV clients to store the
> entire UTXO set in perpetuity.

This is incorrect. If the slower proof-updatable hashes are used, then
mining only requires what I've called "operational proofs" to be
attached to received transactions and blocks.

Access to the UTXO set is required to make new transactions, at least
for the outputs of the transaction, but I do not believe this is as
significant a problem as you do. It is a service that can be
outsourced for a minimal fee - include an explicit output of the
necessary amount to a scriptPubKey specified by the archival node, and
they will make sure the proper proofs are attached.

> This is bad by itself, but then they make it even worse by making 
> Bitcoin really useful and convenient to use as a decentralized 
> database; UTXO commitments make it easy and convenient to
> implement systems like Namecoin on top of Bitcoin, yet we don't
> have the UTXO expiration that might make such uses reasonable.
> Right now the UTXO set is reasonable small - ~300MB - but that can
> and will change if we make it an attractive way to store data.
> UTXO commitments do exactly that.

You might have to explain this to me, but it is not clear to me how
the validation index could be twisted into providing a Namecoin-like
system. Or the address index either, which I presume is what you are
referring to. Namecoin works by assigning domains to outputs, and then
tracking ownership and configuration of that domain through chains of
outputs. But the UTXO set doesn't contain connecting information. At
best all it would be is a glorified, and expensive time-stamper,
unattractive because there are already better solutions.

> You're also *not* giving users what they actually want: the 
> transactions associated with their wallets. Even though Electrum 
> could easily work via a pure UTXO database they implemented 
> transaction lookup instead; Electrum servers cough up every 
> transaction associated with a user's wallet. If you're going to do 
> that, it's just as easy to do per-block lookup trees which don't 
> force the UTXO set to be stored.

At the cost of having the supposedly lightweight client query for each
of its coins on every single block, to construct a negative
proof-of-spend.

> There's also a more subtle issue: the security model of UTXO 
> commitments sucks. It encourages wallets to essentially trust 
> single confirmations because it's unlikely that nodes will want to 
> store the multiple copies of the UTXO set required to provide
> proof of multiple confirmations. Basically the issue is when you
> start your wallet you get a proof of UTXO set for the most recent
> block; that's just one confirmation. To get more confirmations you
> have to wait for subsequent blocks, checking the set on each block.
> Per block indexes on the other hand naturally lead wallets to
> count confirmations properly.

I don't think this is true, or at least you are not considering
available optimizations. You certainly don't need to store multiple
copies of the UTXO set.

I'm a little confused as to the exact situation you are describing.
When a key is loaded into a wallet, or a wallet comes online after a
significant absence, it looks for coins in the current UTXO set. If
any coins are found, their attached transaction record has a block
height field, so the confirmation count can be derived from that. As
blocks go by that count is naturally increased. I'm not sure how this
is different from the current situation.

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.14 (GNU/Linux)
Comment: GPGTools - http://gpgtools.org
Comment: Using GnuPG with Thunderbird - http://www.enigmail.net/

iQIcBAEBAgAGBQJStI9aAAoJEAdzVfsmodw4IooP/1uK9cvP1vxXyQRbAHf9oFXw
AmZ8p1+t8f6MHUpjkv/Xn0poFNU8qSnNz65drQdq8ErcJnqe4V3Wt6G32/uCxvZs
6AX6bRYQIfhHY0DBPgfacO5/ALdlnS4NdjWFCA5hHDgLd30BpbU1WK1ze985TXrd
+ucQkzcMYEDW2lb+sFvfhpi9ZPFd34ZrNzH//oS794eYKWAmj7jXqdgxk5AKat61
Xileq5beE4xom3pChXc3PtIJKsoil5SjE20/FW52wcCdyaEFG0kwl937pEGjQnlP
mylK/ilfZ6cvRC8MmVnl/6AC4V2hjB4Ncej03jG3JI2FdaJEOHuHg0uh8/Zl1I4A
YVIKyrHQhQb/VGsfXtW3zokHzDeEtJwlx+PPFaLc9QurFirNjSnenhbw4Vpbg3Xt
dH1Qd9xWcT85a19Oz8Q4rt3z7UmX9J/geZrUHCuPtr47yXU0e1Cc6ZP9zDYNtfKU
q6MjNZiaLJ/Wp0n4IeQ/4/wqy0rM/psP9i5d6IdP96tayVM9aKj5Lh9lU/Od5wGO
2PPB4kvhJfMbx3o+S7UK5vra7ysZzULpoVGDpUR3xRM72l//vlNhSLK5nILVO3r8
sIC5+3WoZLUKvuNo45/BDxXHZajrWLCU84WrwHVm1u7SHfBQcoES/rhcx2zlgyx0
/Iwxsgb7Fznl+eM2bEpZ
=TtaV
-----END PGP SIGNATURE-----



From gmaxwell at gmail.com  Fri Dec 20 19:48:23 2013
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Fri, 20 Dec 2013 11:48:23 -0800
Subject: [Bitcoin-development] BIP proposal: Authenticated prefix trees
In-Reply-To: <52B3A1C8.5000005@monetize.io>
References: <52B3A1C8.5000005@monetize.io>
Message-ID: <CAAS2fgSD7qbDkcPqW1XsRbSKpF5JhJXbJQrYQQ63LEQnV0qJyA@mail.gmail.com>

On Thu, Dec 19, 2013 at 5:47 PM, Mark Friedenbach <mark at monetize.io> wrote:
> Hello fellow bitcoin developers. Included below is the first draft of
> a BIP for a new Merkle-compressed data structure. The need for this
> data structure arose out of the misnamed "Ultimate blockchain
> compression" project, but it has since been recognized to have many
> other applications.

A couple very early comments? I shared some of these with you on IRC
but I thought I'd post them to make them more likely to not get lost.

Whats a VARCHAR()  A zero terminated string?  A length prefixed
string? How is the length encoded?  Hopefully not in a way that has
redundancy, since things that don't survive a serialization round trip
is a major trap.

Is the 'middle' the best place for the extradata? Have you
contemplated the possibility that some applications might use midstate
compression?

On that general subject, since the structure here pretty much always
guarantees two compression function invocations. SHA512/256 might
actually be faster in this application.

Re: using sha256 instead of sha256^2, we need to think carefully about
the implications of Merkle-Damgard generic length extension attacks.
It would be unfortunately to introduce them here, even though they're
currently mostly theoretical for sha256.

WRT hash function performance, hash functions are so ludicrously fast
(and will be more so as processors get SHA2 instructions) that the
performance of the raw compression function would hardly ever be a
performance consideration unless you're using a slow interpreted
language (... and that sounds like a personal problem to me). So I
don't think CPU performance should be a major consideration in this
BIP.

What I do think should be a consideration is the cost of validating
the structure under a zero-knowledge proof. An example application is
a blind proof for a SIN or a proof of how much coin you control... or
even a proof that a block was a correctly validated one, and in these
cases additional compression function calls are indeed pretty
expensive. But they're not the only cost, any conditional logic in the
hash tree evaluation is expensive, and particular, I think that any
place where data from children will be combined with a variable offset
(especially if its not word aligned) would potentially be rather
expensive.

I'm unconvinced about the prefix tree compressed applications, since
they break compact update proofs.  If we used them in the Bitcoin
network they could only be used for data where all verifying nodes had
all their data under the tree. I think they add a lot of complexity to
the BIP (esp from people reading the wrong section), so perhaps they
should be split into another document?

In any case, I want to thank you for talking the time to write this
up. You've been working on this stuff for a while and I think it will
be lead to useful results, even if we don't end up using how it was
originally envisioned.



From mark at monetize.io  Fri Dec 20 22:04:23 2013
From: mark at monetize.io (Mark Friedenbach)
Date: Fri, 20 Dec 2013 14:04:23 -0800
Subject: [Bitcoin-development] BIP proposal: Authenticated prefix trees
In-Reply-To: <CAAS2fgSD7qbDkcPqW1XsRbSKpF5JhJXbJQrYQQ63LEQnV0qJyA@mail.gmail.com>
References: <52B3A1C8.5000005@monetize.io>
	<CAAS2fgSD7qbDkcPqW1XsRbSKpF5JhJXbJQrYQQ63LEQnV0qJyA@mail.gmail.com>
Message-ID: <52B4BEE7.9020401@monetize.io>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On 12/20/2013 11:48 AM, Gregory Maxwell wrote:
> A couple very early comments? I shared some of these with you on
> IRC but I thought I'd post them to make them more likely to not get
> lost.

I got the inputs from IRC, but thank you for posting to the list so
that others can see and review.

> Whats a VARCHAR()  A zero terminated string?  A length prefixed 
> string? How is the length encoded?  Hopefully not in a way that
> has redundancy, since things that don't survive a serialization
> round trip is a major trap.

A length-prefixed string, using the shortest representation VARINT for
the length. Same as how scripts are serialized in transactions.

> Is the 'middle' the best place for the extradata? Have you 
> contemplated the possibility that some applications might use
> midstate compression?

Yes I considered midstate compression which is why the branch hashes
come last, but "extra" was an oversight. In every application I've
considered it's either not used (and therefore a single byte), or
updated whenever the node or its children updates.

Honestly I don't expect midestate compression to offer much since in
the nodes that are updated frequently it is unlikely that there will
be enough static data at the front to fill even a 512 bit block of the
smaller hash function.

But it doesn't hurt to prepare just in case. I'll move it to the end.

> On that general subject, since the structure here pretty much
> always guarantees two compression function invocations. SHA512/256
> might actually be faster in this application.

Yes, this is a great suggestion. Moving to SHA-512/256 will let most
inner nodes fit inside a single block, so long as the "extra" field is
not too long. Also apparently SHA-512 is faster on 64-bit CPUs, which
is a nice advantage. I didn't know that.

I'm concerned about speed but I did not go with a faster hash function
because users are more likely to have hardware acceleration for the
SHA-2 family.

> Re: using sha256 instead of sha256^2, we need to think carefully
> about the implications of Merkle-Damgard generic length extension
> attacks. It would be unfortunately to introduce them here, even
> though they're currently mostly theoretical for sha256.

The serialization format encodes lengths in such a way that you cannot
extend the data structure merely by appending bits. You would have to
change the prior, already hashed bits as well. I believe this makes it
immune to length extension attacks.

> WRT hash function performance, hash functions are so ludicrously
> fast (and will be more so as processors get SHA2 instructions) that
> the performance of the raw compression function would hardly ever
> be a performance consideration unless you're using a slow
> interpreted language (... and that sounds like a personal problem
> to me). So I don't think CPU performance should be a major
> consideration in this BIP.

Well.. the UTXO tree is big. Let's assume 5,000 transactions per
block, with an average of 3 inputs/outputs per transaction. This is
close to the worst-case scenario with the current block size. That's
15,000 insert, update, or delete operations.

The number of hashes required when level-compression is used is log2
the number of items in the tree, which for bitcoin is currently about
2.5 million transactions. So that's about ~21 hashes per input/ouput,
or 315,000 hash operations. A CPU is able to do about 100,000 hashes
per second per core, that'll probably take about a second on a modern
4- or 8-core machine.

For updatable proofs, the number of hash operations is equal to the
number of bits in the key, which for the validation index is always
256. That means 3.84 million hashes, or about 10 seconds on a 4-core
machine.

The numbers for the wallet index are worse, as it scales with the
number of outputs, which is necessarily larger, and the keys are longer.

This is not an insignificant cost in the near term, although it is the
type of operation that could be easily offloaded to a GPU or FPGA.

> What I do think should be a consideration is the cost of
> validating the structure under a zero-knowledge proof. An example
> application is a blind proof for a SIN or a proof of how much coin
> you control... or even a proof that a block was a correctly
> validated one, and in these cases additional compression function
> calls are indeed pretty expensive. But they're not the only cost,
> any conditional logic in the hash tree evaluation is expensive, and
> particular, I think that any place where data from children will be
> combined with a variable offset (especially if its not word
> aligned) would potentially be rather expensive.

This is something I know less about, and I welcome constructive input.
There is *no* reason that the hash serialization needs to have fancy
space-saving features. You could even make the SIG_HASH node
serialization into fixed-size, word-aligned data structures.

But this is absolutely not my field, and I may need some hand-holding.
Do the fields need to be at fixed offsets? With fixed widths? Should I
put variable-length stuff like the level-compressed prefixes and value
data at the end (midstate be damned) to keep fixed offsets? What's
expected word alignment, 32-bit or 64-bit?

> I'm unconvinced about the prefix tree compressed applications,
> since they break compact update proofs.  If we used them in the
> Bitcoin network they could only be used for data where all
> verifying nodes had all their data under the tree. I think they add
> a lot of complexity to the BIP (esp from people reading the wrong
> section), so perhaps they should be split into another document?

I believe what you mean by "compact update proofs" is what I call
"updatable proofs", where level compression is only used in the disk
and network serialization. These are what I propose to use for the
validation and wallet indexes, if the computational costs can be
brought under control, because it allows composable proofs.

Unlike a time-ordered index, it does require that someone, somewhere
has random access to the entire UTXO set since you can't predict in
advance what your txid will be. But this is a matter of tradeoffs and
I don't believe at this time that there is a clearcut advantage of one
approach over the other. I'm pursuing a txid-indexed UTXO set because
it most closely matches the current operational model.

That said, you still want level-compression within the serialization
format itself, if for no other reason than to keep proof sizes small.

> In any case, I want to thank you for talking the time to write
> this up. You've been working on this stuff for a while and I think
> it will be lead to useful results, even if we don't end up using
> how it was originally envisioned.

Thanks,
Mark
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.14 (GNU/Linux)
Comment: GPGTools - http://gpgtools.org
Comment: Using GnuPG with Thunderbird - http://www.enigmail.net/

iQIcBAEBAgAGBQJStL7nAAoJEAdzVfsmodw4DQcP/ilB2LTPnbK/UoU+y0d/0CUu
4PVo8VJt0KCUgWbEHIohm0rq4FUpb7FpjzAyQ171jzRykDEkUy7nDh/QsWGUvDvA
gOHKEsX3E+ei8iQMkwlw5D/Lpbb8GNr3SHrU3lvVbXOoaPua9I16778hv3wBWhiN
R70N8dQUwWD1IU0Dfmhi8v2P8OTn4OGTEwS5AQANGCroYyALF+U9EDHjWDMV+bYn
8qrX4v05xjik5YXOv8PNDDp0S9A+KxD72OKL5xlXiE7VbKrYXKt6xNfy1xYgHH8p
u9kWDFMkbis/HAiB5aiFTmxX5/k+yeJw8BfG+txj0xo7b7cWKB9cQLT8vUru2QuH
lHdurxkaBQ+6jqlxYRk7nh0h+obeAXA/CGMseaDYluBg7qTkeWnLORfm7T7fUnHw
fB5sXPUKEeYw48sfs58w/71NbCyl2yYNGlmmugk2SilD3QbUKU1xogNTHEGDuA8M
kPsWW7vRIdI3iy9adgh3LZAvySt7/a5VXXs1li7teDgV4QqH7e2hR0KR8n115N7f
r30LSctbc/MovE9VPb8I7ssQTB7So+1Ki6DbVeQO/8UlCSK5prM3n2sICmT/EVW7
2hNzwbHuEJEWYE7q89buzMRdqbUYSRdG1T1mFBeZ+/n4HH6cweMl6BH4d46LAfuq
BqzTmq5neoCKBwfMfoqg
=YmkZ
-----END PGP SIGNATURE-----



From rdwnj at yahoo.com  Sun Dec 22 21:37:41 2013
From: rdwnj at yahoo.com (Ron)
Date: Sun, 22 Dec 2013 13:37:41 -0800 (PST)
Subject: [Bitcoin-development] Dual elliptic curve algorithms
In-Reply-To: <mailman.384736.1387560790.12996.bitcoin-development@lists.sourceforge.net>
References: <mailman.384736.1387560790.12996.bitcoin-development@lists.sourceforge.net>
Message-ID: <1387748261.7326.YahooMailNeo@web124504.mail.ne1.yahoo.com>





________________________________
 From: "bitcoin-development-request at lists.sourceforge.net" <bitcoin-development-request at lists.sourceforge.net>
To: bitcoin-development at lists.sourceforge.net 
Sent: Friday, December 20, 2013 12:33 PM
Subject: Bitcoin-development Digest, Vol 31, Issue 37
 

Send Bitcoin-development mailing list submissions to
??? bitcoin-development at lists.sourceforge.net

When replying, please edit your Subject line so it is more specific
than "Re: Contents of Bitcoin-development digest..."

Hello all,

Is the dual elliptic curve algorithm mentioned in 
http://www.theguardian.com/world/2013/dec/20/nsa-internet-security-rsa-secret-10m-encryption 
from 2 days ago, of any concern to Bitcoin? I only ask, since I don't follow the field closely, but I see 
http://en.wikipedia.org/wiki/Elliptic_Curve_DSA 

Is this a concern for Bitcoin, or is this all "old news"?

Ron
_____________________________________
Bitcoin-development mailing list
Bitcoin-development at lists.sourceforge.net
https://lists.sourceforge.net/lists/listinfo/bitcoin-development


End of Bitcoin-development Digest, Vol 31, Issue 37
***************************************************
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131222/c4d3f9a4/attachment.html>

From mike at plan99.net  Sun Dec 22 22:46:00 2013
From: mike at plan99.net (Mike Hearn)
Date: Sun, 22 Dec 2013 23:46:00 +0100
Subject: [Bitcoin-development] Dual elliptic curve algorithms
In-Reply-To: <1387748261.7326.YahooMailNeo@web124504.mail.ne1.yahoo.com>
References: <mailman.384736.1387560790.12996.bitcoin-development@lists.sourceforge.net>
	<1387748261.7326.YahooMailNeo@web124504.mail.ne1.yahoo.com>
Message-ID: <CANEZrP0fFDH1bU7t_koPLZu7mALCbrPBNtfpW8q3X3u48b3+iw@mail.gmail.com>

It is irrelevant.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131222/95f41066/attachment.html>

From ryan.jc.pc at gmail.com  Mon Dec 23 03:10:37 2013
From: ryan.jc.pc at gmail.com (Ryan Carboni)
Date: Sun, 22 Dec 2013 19:10:37 -0800
Subject: [Bitcoin-development] Bitcoin difficulty sanity check suggestion
Message-ID: <CAO7N=i1_ZyGBAsOGdCvPwJNhARbe-MuWzi9MYLsa3WS_PO25hg@mail.gmail.com>

I think Bitcoin should have a sanity check: after three days if only four
blocks have been mined, difficulty should be adjusted downwards.

This might become important in the near future. I project a Bitcoin mining
bubble.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131222/bedebd25/attachment.html>

From mark at monetize.io  Mon Dec 23 03:22:46 2013
From: mark at monetize.io (Mark Friedenbach)
Date: Sun, 22 Dec 2013 19:22:46 -0800
Subject: [Bitcoin-development] Bitcoin difficulty sanity check suggestion
In-Reply-To: <CAO7N=i1_ZyGBAsOGdCvPwJNhARbe-MuWzi9MYLsa3WS_PO25hg@mail.gmail.com>
References: <CAO7N=i1_ZyGBAsOGdCvPwJNhARbe-MuWzi9MYLsa3WS_PO25hg@mail.gmail.com>
Message-ID: <52B7AC86.9010808@monetize.io>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Ryan, these sort of adjustments introduce security risks. If you were
isolated from the main chain by a low-hashpower attacker, how would
you know? They'd need just three days without you noticing that
network block generation has stalled - maybe they wait for a long
weekend - then after that the block rate is normal but completely
controlled by the attacker (and isolated from mainnet).

There are fast acting alternative difficulty adjustment algorithms
being explored by some alts, such as the 9-block interval, 144-block
window, Parks-McClellan FIR filter used by Freicoin to recover from
just such a mining bubble. If it were to happen to bitcoin, there
would be sophisticated alternative to turn to, and enough time to make
the change.

On 12/22/2013 07:10 PM, Ryan Carboni wrote:
> I think Bitcoin should have a sanity check: after three days if
> only four blocks have been mined, difficulty should be adjusted
> downwards.
> 
> This might become important in the near future. I project a
> Bitcoin mining bubble.
> 
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.14 (GNU/Linux)
Comment: GPGTools - http://gpgtools.org
Comment: Using GnuPG with Thunderbird - http://www.enigmail.net/

iQIcBAEBAgAGBQJSt6yGAAoJEAdzVfsmodw4SegQAIJAWW0OgSjediSWq+EpkReS
qMvC2Y9dmVHtowYLdJVcgwFWbpU8RhA6ApQ1Ks2XF4t0hFCObYDecG6Nl3OIaLfb
snz24v8ymdxYXKNtzHHUP0VBgsaoRghIpkbf7JMUXC22sxPoPOXFt5RevLgJHrvc
oGFZSIcEcGgwhwZ745CgFZLwaKuSmg5+wFFcrjIihlHKJOl47Z7rzeqnD6mf2Oi3
hDpRuVbuhlGMliYcmhk1E6oV0in2R4Purw1WtoY8C9DxrSP2za7W1oeCkmlFfJZS
to6SzRj7nEIl0LFaPGsIdBrRdDHfvu6eP2OecI+GNLEwLY6qE5v5fkh47mcDkrN0
02PmepoX5PRzBqp4sx8WaFKuRbmTRRr3E4i9PGoyzTckkZzq+zFmb1y5fwOy17hE
C+nP+DyuaPzjypjdo6V+/oGzUKtuKPtqcB1vurbm+WBl5C1jWosAXv5pR87mdCUJ
+0e14wPra5blV6yBVqX7yx+2heDGymPKfHJ8i76Dtix7XVOJWKVY4OpIxO7YrYv8
IKcIswoKhZdSDOJLcjm4Qp4hrzgCHAHWx6vN71r5r2T6zaJTOvp98GS04Yy7VGAr
j38hojcwvJC1ahER3LV/vC0cqO+fxrvY8Q9rW2cUxCnzxzjjG0+Z/gjW8uh73lXN
DOTF7jpt0ZmCm7uhG9z7
=5Q2H
-----END PGP SIGNATURE-----



From robin at pathwayi.com  Mon Dec 23 20:22:49 2013
From: robin at pathwayi.com (Robin Ranjit Singh Chauhan)
Date: Mon, 23 Dec 2013 12:22:49 -0800
Subject: [Bitcoin-development] Bitcoin difficulty sanity check suggestion
In-Reply-To: <52B7AC86.9010808@monetize.io>
References: <CAO7N=i1_ZyGBAsOGdCvPwJNhARbe-MuWzi9MYLsa3WS_PO25hg@mail.gmail.com>
	<52B7AC86.9010808@monetize.io>
Message-ID: <CAF3j42HJXY__6sGpohNFH5MuyRFG1GAJzAwtn1QhmQT2uM-FjA@mail.gmail.com>

Mark, thank you for a very clear explanation of why this proposal would be
dangerous.

What I have noted in many discussions regarding blockchain security and
proof-or-work schemes, is there is a wide gulf between those few people who
can clearly reason about it, and those who have a lot trouble with it (I
mostly fall into the later camp).

I wonder if anyone can point to resources who can help "the rest of us"
reason clearly about these types of proposals, prior to bringing them to
this list or a senior dev.

Ideally it would illustrate various past proposals, explain why they would
and wouldnt work, and build up some fundamental concepts, like a "Newtons
laws of blockchain security" that would help us evaluate such ideas on our
own.

Blockchain stuff is often counterintuitive.



On Sun, Dec 22, 2013 at 7:22 PM, Mark Friedenbach <mark at monetize.io> wrote:

> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA1
>
> Ryan, these sort of adjustments introduce security risks. If you were
> isolated from the main chain by a low-hashpower attacker, how would
> you know? They'd need just three days without you noticing that
> network block generation has stalled - maybe they wait for a long
> weekend - then after that the block rate is normal but completely
> controlled by the attacker (and isolated from mainnet).
>
> There are fast acting alternative difficulty adjustment algorithms
> being explored by some alts, such as the 9-block interval, 144-block
> window, Parks-McClellan FIR filter used by Freicoin to recover from
> just such a mining bubble. If it were to happen to bitcoin, there
> would be sophisticated alternative to turn to, and enough time to make
> the change.
>
> On 12/22/2013 07:10 PM, Ryan Carboni wrote:
> > I think Bitcoin should have a sanity check: after three days if
> > only four blocks have been mined, difficulty should be adjusted
> > downwards.
> >
> > This might become important in the near future. I project a
> > Bitcoin mining bubble.
> >
> -----BEGIN PGP SIGNATURE-----
> Version: GnuPG v1.4.14 (GNU/Linux)
> Comment: GPGTools - http://gpgtools.org
> Comment: Using GnuPG with Thunderbird - http://www.enigmail.net/
>
> iQIcBAEBAgAGBQJSt6yGAAoJEAdzVfsmodw4SegQAIJAWW0OgSjediSWq+EpkReS
> qMvC2Y9dmVHtowYLdJVcgwFWbpU8RhA6ApQ1Ks2XF4t0hFCObYDecG6Nl3OIaLfb
> snz24v8ymdxYXKNtzHHUP0VBgsaoRghIpkbf7JMUXC22sxPoPOXFt5RevLgJHrvc
> oGFZSIcEcGgwhwZ745CgFZLwaKuSmg5+wFFcrjIihlHKJOl47Z7rzeqnD6mf2Oi3
> hDpRuVbuhlGMliYcmhk1E6oV0in2R4Purw1WtoY8C9DxrSP2za7W1oeCkmlFfJZS
> to6SzRj7nEIl0LFaPGsIdBrRdDHfvu6eP2OecI+GNLEwLY6qE5v5fkh47mcDkrN0
> 02PmepoX5PRzBqp4sx8WaFKuRbmTRRr3E4i9PGoyzTckkZzq+zFmb1y5fwOy17hE
> C+nP+DyuaPzjypjdo6V+/oGzUKtuKPtqcB1vurbm+WBl5C1jWosAXv5pR87mdCUJ
> +0e14wPra5blV6yBVqX7yx+2heDGymPKfHJ8i76Dtix7XVOJWKVY4OpIxO7YrYv8
> IKcIswoKhZdSDOJLcjm4Qp4hrzgCHAHWx6vN71r5r2T6zaJTOvp98GS04Yy7VGAr
> j38hojcwvJC1ahER3LV/vC0cqO+fxrvY8Q9rW2cUxCnzxzjjG0+Z/gjW8uh73lXN
> DOTF7jpt0ZmCm7uhG9z7
> =5Q2H
> -----END PGP SIGNATURE-----
>
>
> ------------------------------------------------------------------------------
> Rapidly troubleshoot problems before they affect your business. Most IT
> organizations don't have a clear picture of how application performance
> affects their revenue. With AppDynamics, you get 100% visibility into your
> Java,.NET, & PHP application. Start your 15-day FREE TRIAL of AppDynamics
> Pro!
> http://pubads.g.doubleclick.net/gampad/clk?id=84349831&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>



-- 
Robin R Chauhan
CEO, Pathway Intelligence Inc
robin at pathwayi.com
Office: 778-588-6217 Ext. 201
Cell: 604-865-0517
Fax: 778-588-1042
http://pathwayi.com/
---------------------------------------------------------------------
This transmission (including any attachments) may contain confidential
information or constitute non-public information. Any use of this
information by anyone other than the intended recipient is prohibited.
If you have received this transmission in error, please immediately
reply to the sender and delete this information from your system.
Use, dissemination, distribution, or reproduction of this transmission
by unintended recipients is not authorized and may be unlawful.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131223/ad1dac6c/attachment.html>

From ryan.jc.pc at gmail.com  Tue Dec 24 01:51:41 2013
From: ryan.jc.pc at gmail.com (Ryan Carboni)
Date: Mon, 23 Dec 2013 17:51:41 -0800
Subject: [Bitcoin-development] Bitcoin difficulty sanity check suggestion
In-Reply-To: <52B7AC86.9010808@monetize.io>
References: <CAO7N=i1_ZyGBAsOGdCvPwJNhARbe-MuWzi9MYLsa3WS_PO25hg@mail.gmail.com>
	<52B7AC86.9010808@monetize.io>
Message-ID: <CAO7N=i1avBNy9wfQSAyDH19ywJ__C_A9XSVBbufa42=Lu4MjRg@mail.gmail.com>

I think you misunderstood my statement. If time > 3 days, and after 4
blocks have been mined, then difficulty would be reset.

In theory, one would have to isolate roughly one percent of the Bitcoin
network's hashing power to do so. Which would indicate an attack by a state
actor as opposed to anything else. Arguably, the safest way to run Bitcoin
is through a proprietary dial-up network.


On Sun, Dec 22, 2013 at 7:22 PM, Mark Friedenbach <mark at monetize.io> wrote:

> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA1
>
> Ryan, these sort of adjustments introduce security risks. If you were
> isolated from the main chain by a low-hashpower attacker, how would
> you know? They'd need just three days without you noticing that
> network block generation has stalled - maybe they wait for a long
> weekend - then after that the block rate is normal but completely
> controlled by the attacker (and isolated from mainnet).
>
> There are fast acting alternative difficulty adjustment algorithms
> being explored by some alts, such as the 9-block interval, 144-block
> window, Parks-McClellan FIR filter used by Freicoin to recover from
> just such a mining bubble. If it were to happen to bitcoin, there
> would be sophisticated alternative to turn to, and enough time to make
> the change.
>
> On 12/22/2013 07:10 PM, Ryan Carboni wrote:
> > I think Bitcoin should have a sanity check: after three days if
> > only four blocks have been mined, difficulty should be adjusted
> > downwards.
> >
> > This might become important in the near future. I project a
> > Bitcoin mining bubble.
> >
> -----BEGIN PGP SIGNATURE-----
> Version: GnuPG v1.4.14 (GNU/Linux)
> Comment: GPGTools - http://gpgtools.org
> Comment: Using GnuPG with Thunderbird - http://www.enigmail.net/
>
> iQIcBAEBAgAGBQJSt6yGAAoJEAdzVfsmodw4SegQAIJAWW0OgSjediSWq+EpkReS
> qMvC2Y9dmVHtowYLdJVcgwFWbpU8RhA6ApQ1Ks2XF4t0hFCObYDecG6Nl3OIaLfb
> snz24v8ymdxYXKNtzHHUP0VBgsaoRghIpkbf7JMUXC22sxPoPOXFt5RevLgJHrvc
> oGFZSIcEcGgwhwZ745CgFZLwaKuSmg5+wFFcrjIihlHKJOl47Z7rzeqnD6mf2Oi3
> hDpRuVbuhlGMliYcmhk1E6oV0in2R4Purw1WtoY8C9DxrSP2za7W1oeCkmlFfJZS
> to6SzRj7nEIl0LFaPGsIdBrRdDHfvu6eP2OecI+GNLEwLY6qE5v5fkh47mcDkrN0
> 02PmepoX5PRzBqp4sx8WaFKuRbmTRRr3E4i9PGoyzTckkZzq+zFmb1y5fwOy17hE
> C+nP+DyuaPzjypjdo6V+/oGzUKtuKPtqcB1vurbm+WBl5C1jWosAXv5pR87mdCUJ
> +0e14wPra5blV6yBVqX7yx+2heDGymPKfHJ8i76Dtix7XVOJWKVY4OpIxO7YrYv8
> IKcIswoKhZdSDOJLcjm4Qp4hrzgCHAHWx6vN71r5r2T6zaJTOvp98GS04Yy7VGAr
> j38hojcwvJC1ahER3LV/vC0cqO+fxrvY8Q9rW2cUxCnzxzjjG0+Z/gjW8uh73lXN
> DOTF7jpt0ZmCm7uhG9z7
> =5Q2H
> -----END PGP SIGNATURE-----
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131223/b341eca6/attachment.html>

From allen.piscitello at gmail.com  Tue Dec 24 04:05:48 2013
From: allen.piscitello at gmail.com (Allen Piscitello)
Date: Mon, 23 Dec 2013 22:05:48 -0600
Subject: [Bitcoin-development] Bitcoin difficulty sanity check suggestion
In-Reply-To: <CAO7N=i1avBNy9wfQSAyDH19ywJ__C_A9XSVBbufa42=Lu4MjRg@mail.gmail.com>
References: <CAO7N=i1_ZyGBAsOGdCvPwJNhARbe-MuWzi9MYLsa3WS_PO25hg@mail.gmail.com>
	<52B7AC86.9010808@monetize.io>
	<CAO7N=i1avBNy9wfQSAyDH19ywJ__C_A9XSVBbufa42=Lu4MjRg@mail.gmail.com>
Message-ID: <CAJfRnm4EouQFwpKXLZX4GtfE5hzvNMufYxm=Kt+J3iwy9a9edg@mail.gmail.com>

Ryan,

Why do you continue to try to correct people who clearly have put more
thought into this than you?  Everyone understood you just fine, you just
seem to have trouble comprehending why your ideas are terrible.


On Mon, Dec 23, 2013 at 7:51 PM, Ryan Carboni <ryan.jc.pc at gmail.com> wrote:

> I think you misunderstood my statement. If time > 3 days, and after 4
> blocks have been mined, then difficulty would be reset.
>
> In theory, one would have to isolate roughly one percent of the Bitcoin
> network's hashing power to do so. Which would indicate an attack by a state
> actor as opposed to anything else. Arguably, the safest way to run Bitcoin
> is through a proprietary dial-up network.
>
>
> On Sun, Dec 22, 2013 at 7:22 PM, Mark Friedenbach <mark at monetize.io>wrote:
>
>> -----BEGIN PGP SIGNED MESSAGE-----
>> Hash: SHA1
>>
>> Ryan, these sort of adjustments introduce security risks. If you were
>> isolated from the main chain by a low-hashpower attacker, how would
>> you know? They'd need just three days without you noticing that
>> network block generation has stalled - maybe they wait for a long
>> weekend - then after that the block rate is normal but completely
>> controlled by the attacker (and isolated from mainnet).
>>
>> There are fast acting alternative difficulty adjustment algorithms
>> being explored by some alts, such as the 9-block interval, 144-block
>> window, Parks-McClellan FIR filter used by Freicoin to recover from
>> just such a mining bubble. If it were to happen to bitcoin, there
>> would be sophisticated alternative to turn to, and enough time to make
>> the change.
>>
>> On 12/22/2013 07:10 PM, Ryan Carboni wrote:
>> > I think Bitcoin should have a sanity check: after three days if
>> > only four blocks have been mined, difficulty should be adjusted
>> > downwards.
>> >
>> > This might become important in the near future. I project a
>> > Bitcoin mining bubble.
>> >
>> -----BEGIN PGP SIGNATURE-----
>> Version: GnuPG v1.4.14 (GNU/Linux)
>> Comment: GPGTools - http://gpgtools.org
>> Comment: Using GnuPG with Thunderbird - http://www.enigmail.net/
>>
>> iQIcBAEBAgAGBQJSt6yGAAoJEAdzVfsmodw4SegQAIJAWW0OgSjediSWq+EpkReS
>> qMvC2Y9dmVHtowYLdJVcgwFWbpU8RhA6ApQ1Ks2XF4t0hFCObYDecG6Nl3OIaLfb
>> snz24v8ymdxYXKNtzHHUP0VBgsaoRghIpkbf7JMUXC22sxPoPOXFt5RevLgJHrvc
>> oGFZSIcEcGgwhwZ745CgFZLwaKuSmg5+wFFcrjIihlHKJOl47Z7rzeqnD6mf2Oi3
>> hDpRuVbuhlGMliYcmhk1E6oV0in2R4Purw1WtoY8C9DxrSP2za7W1oeCkmlFfJZS
>> to6SzRj7nEIl0LFaPGsIdBrRdDHfvu6eP2OecI+GNLEwLY6qE5v5fkh47mcDkrN0
>> 02PmepoX5PRzBqp4sx8WaFKuRbmTRRr3E4i9PGoyzTckkZzq+zFmb1y5fwOy17hE
>> C+nP+DyuaPzjypjdo6V+/oGzUKtuKPtqcB1vurbm+WBl5C1jWosAXv5pR87mdCUJ
>> +0e14wPra5blV6yBVqX7yx+2heDGymPKfHJ8i76Dtix7XVOJWKVY4OpIxO7YrYv8
>> IKcIswoKhZdSDOJLcjm4Qp4hrzgCHAHWx6vN71r5r2T6zaJTOvp98GS04Yy7VGAr
>> j38hojcwvJC1ahER3LV/vC0cqO+fxrvY8Q9rW2cUxCnzxzjjG0+Z/gjW8uh73lXN
>> DOTF7jpt0ZmCm7uhG9z7
>> =5Q2H
>> -----END PGP SIGNATURE-----
>>
>
>
>
> ------------------------------------------------------------------------------
> Rapidly troubleshoot problems before they affect your business. Most IT
> organizations don't have a clear picture of how application performance
> affects their revenue. With AppDynamics, you get 100% visibility into your
> Java,.NET, & PHP application. Start your 15-day FREE TRIAL of AppDynamics
> Pro!
> http://pubads.g.doubleclick.net/gampad/clk?id=84349831&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131223/44072dc2/attachment.html>

From ryan.jc.pc at gmail.com  Tue Dec 24 07:37:32 2013
From: ryan.jc.pc at gmail.com (Ryan Carboni)
Date: Mon, 23 Dec 2013 23:37:32 -0800
Subject: [Bitcoin-development] Bitcoin difficulty sanity check suggestion
In-Reply-To: <52B8EB37.2080006@monetize.io>
References: <CAO7N=i1_ZyGBAsOGdCvPwJNhARbe-MuWzi9MYLsa3WS_PO25hg@mail.gmail.com>
	<52B7AC86.9010808@monetize.io>
	<CAO7N=i1avBNy9wfQSAyDH19ywJ__C_A9XSVBbufa42=Lu4MjRg@mail.gmail.com>
	<52B8EB37.2080006@monetize.io>
Message-ID: <CAO7N=i1DpGnfjgAX6GHNC-yVq_9P38vb_1MszcRcRhEA8nnLcA@mail.gmail.com>

It does take a state-level actor to apparently disconnect *multiple *miners
from the rest of the network.

How many Bitcoin miners hash an entire percent or more of the Bitcoin
network? What you're proposing is an attack at the highest levels of the
internet infrastructure.


On Mon, Dec 23, 2013 at 6:02 PM, Mark Friedenbach <mark at monetize.io> wrote:

> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA1
>
> Which would leave you entirely in the hands of your dialup provider.
> Or the manufacturer of your switch. Or your ISP's backbone provider.
> It does not take a state-level actor to do network attacks.
>
> BTW, what does "difficulty would be reset" mean? There are multiple
> ways to interpret that statement. In the most straightforward way, my
> objections apply.
>
> On 12/23/2013 05:51 PM, Ryan Carboni wrote:
> > I think you misunderstood my statement. If time > 3 days, and after
> > 4 blocks have been mined, then difficulty would be reset.
> >
> > In theory, one would have to isolate roughly one percent of the
> > Bitcoin network's hashing power to do so. Which would indicate an
> > attack by a state actor as opposed to anything else. Arguably, the
> > safest way to run Bitcoin is through a proprietary dial-up
> > network.
> >
> -----BEGIN PGP SIGNATURE-----
> Version: GnuPG v1.4.14 (GNU/Linux)
> Comment: GPGTools - http://gpgtools.org
> Comment: Using GnuPG with Thunderbird - http://www.enigmail.net/
>
> iQIcBAEBAgAGBQJSuOs3AAoJEAdzVfsmodw4BwAP/0Ynq/SxNIBFFdL7RaSiE5KM
> zNRtlZJCYvmCXgKKtMyO+Ron+YGqY8yg8r0ifb6oqlJCG5t0msExym/CA9CYMV6V
> UnVaGaNkFrLSF1q8Dt6X4I9OSeCiBstahQOjPaerUycLTY2W/cKPblhCC0rvXrfI
> 3Fz3p6SHbCcNHw89w6ry3QG420+UNroFCpNu+Oa2YfWoZY2p91JLbuiUwXL5KEac
> PDskHGsb9q1vyAkCJ6eOp3MJfFP/Dy7mASVwPql/nzf2ceSDtO4dpngo0uNsCwFo
> QSWIRdWv4OiJk1OM6fjEj/51mebczgO0ShczRKk9QkX4FEFEqP/ARdbl8bSC4IsT
> /3s2HHiYDahEOMiXV5ao3kmBpyUR8p4erRbtwRzdZzOgGL37yxj8VGmY93bkVQNB
> zi2n3WCCju0a+gqREyaEFAM8kPIhx9++YNIddwQxK38njUSe2CzqM8t+28ZfseYl
> YnQeNFUfcmvzhxTXxgyoCuGF5HbFRTn/AallkYSPxYtxGq4WuLN36BS3cTv8wCLz
> sYTyuxWxjZ7CS8fx8MWilw72tQf9torwmrWJtjgRLFE3OvQxRjN+ppDV8cfC8UAB
> p0CGzBgVaw5yZ5LzCawQVTGWJdzs+ZPlQu8SO53dHhEtRAmdbFa0mMD2FrS/5Ih/
> YcwdP6Xm69HTgzCenu5F
> =HtRS
> -----END PGP SIGNATURE-----
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131223/19bb077d/attachment.html>

From ryan.jc.pc at gmail.com  Tue Dec 24 07:41:08 2013
From: ryan.jc.pc at gmail.com (Ryan Carboni)
Date: Mon, 23 Dec 2013 23:41:08 -0800
Subject: [Bitcoin-development] Bitcoin difficulty sanity check suggestion
In-Reply-To: <CAJfRnm4EouQFwpKXLZX4GtfE5hzvNMufYxm=Kt+J3iwy9a9edg@mail.gmail.com>
References: <CAO7N=i1_ZyGBAsOGdCvPwJNhARbe-MuWzi9MYLsa3WS_PO25hg@mail.gmail.com>
	<52B7AC86.9010808@monetize.io>
	<CAO7N=i1avBNy9wfQSAyDH19ywJ__C_A9XSVBbufa42=Lu4MjRg@mail.gmail.com>
	<CAJfRnm4EouQFwpKXLZX4GtfE5hzvNMufYxm=Kt+J3iwy9a9edg@mail.gmail.com>
Message-ID: <CAO7N=i3LEGJ-fSApYPhoAkL=BCQuHmYZgOCrq9OOZe0SY4Tb1g@mail.gmail.com>

Maybe it's because the arguments being presented are nonsensical and
irrelevant to the current Bitcoin network topology, composed of a small
number of mining pools, not solo miners? Furthermore I think people would
realize that their mining pool has gone "off the reservation" so to speak.


On Mon, Dec 23, 2013 at 8:05 PM, Allen Piscitello <
allen.piscitello at gmail.com> wrote:

> Ryan,
>
> Why do you continue to try to correct people who clearly have put more
> thought into this than you?  Everyone understood you just fine, you just
> seem to have trouble comprehending why your ideas are terrible.
>
>
> On Mon, Dec 23, 2013 at 7:51 PM, Ryan Carboni <ryan.jc.pc at gmail.com>wrote:
>
>> I think you misunderstood my statement. If time > 3 days, and after 4
>> blocks have been mined, then difficulty would be reset.
>>
>> In theory, one would have to isolate roughly one percent of the Bitcoin
>> network's hashing power to do so. Which would indicate an attack by a state
>> actor as opposed to anything else. Arguably, the safest way to run Bitcoin
>> is through a proprietary dial-up network.
>>
>>
>> On Sun, Dec 22, 2013 at 7:22 PM, Mark Friedenbach <mark at monetize.io>wrote:
>>
>>> -----BEGIN PGP SIGNED MESSAGE-----
>>> Hash: SHA1
>>>
>>> Ryan, these sort of adjustments introduce security risks. If you were
>>> isolated from the main chain by a low-hashpower attacker, how would
>>> you know? They'd need just three days without you noticing that
>>> network block generation has stalled - maybe they wait for a long
>>> weekend - then after that the block rate is normal but completely
>>> controlled by the attacker (and isolated from mainnet).
>>>
>>> There are fast acting alternative difficulty adjustment algorithms
>>> being explored by some alts, such as the 9-block interval, 144-block
>>> window, Parks-McClellan FIR filter used by Freicoin to recover from
>>> just such a mining bubble. If it were to happen to bitcoin, there
>>> would be sophisticated alternative to turn to, and enough time to make
>>> the change.
>>>
>>> On 12/22/2013 07:10 PM, Ryan Carboni wrote:
>>> > I think Bitcoin should have a sanity check: after three days if
>>> > only four blocks have been mined, difficulty should be adjusted
>>> > downwards.
>>> >
>>> > This might become important in the near future. I project a
>>> > Bitcoin mining bubble.
>>> >
>>> -----BEGIN PGP SIGNATURE-----
>>> Version: GnuPG v1.4.14 (GNU/Linux)
>>> Comment: GPGTools - http://gpgtools.org
>>> Comment: Using GnuPG with Thunderbird - http://www.enigmail.net/
>>>
>>> iQIcBAEBAgAGBQJSt6yGAAoJEAdzVfsmodw4SegQAIJAWW0OgSjediSWq+EpkReS
>>> qMvC2Y9dmVHtowYLdJVcgwFWbpU8RhA6ApQ1Ks2XF4t0hFCObYDecG6Nl3OIaLfb
>>> snz24v8ymdxYXKNtzHHUP0VBgsaoRghIpkbf7JMUXC22sxPoPOXFt5RevLgJHrvc
>>> oGFZSIcEcGgwhwZ745CgFZLwaKuSmg5+wFFcrjIihlHKJOl47Z7rzeqnD6mf2Oi3
>>> hDpRuVbuhlGMliYcmhk1E6oV0in2R4Purw1WtoY8C9DxrSP2za7W1oeCkmlFfJZS
>>> to6SzRj7nEIl0LFaPGsIdBrRdDHfvu6eP2OecI+GNLEwLY6qE5v5fkh47mcDkrN0
>>> 02PmepoX5PRzBqp4sx8WaFKuRbmTRRr3E4i9PGoyzTckkZzq+zFmb1y5fwOy17hE
>>> C+nP+DyuaPzjypjdo6V+/oGzUKtuKPtqcB1vurbm+WBl5C1jWosAXv5pR87mdCUJ
>>> +0e14wPra5blV6yBVqX7yx+2heDGymPKfHJ8i76Dtix7XVOJWKVY4OpIxO7YrYv8
>>> IKcIswoKhZdSDOJLcjm4Qp4hrzgCHAHWx6vN71r5r2T6zaJTOvp98GS04Yy7VGAr
>>> j38hojcwvJC1ahER3LV/vC0cqO+fxrvY8Q9rW2cUxCnzxzjjG0+Z/gjW8uh73lXN
>>> DOTF7jpt0ZmCm7uhG9z7
>>> =5Q2H
>>> -----END PGP SIGNATURE-----
>>>
>>
>>
>>
>> ------------------------------------------------------------------------------
>> Rapidly troubleshoot problems before they affect your business. Most IT
>> organizations don't have a clear picture of how application performance
>> affects their revenue. With AppDynamics, you get 100% visibility into your
>> Java,.NET, & PHP application. Start your 15-day FREE TRIAL of AppDynamics
>> Pro!
>>
>> http://pubads.g.doubleclick.net/gampad/clk?id=84349831&iu=/4140/ostg.clktrk
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131223/6a03de9a/attachment.html>

From slashdevnull at hotmail.com  Tue Dec 24 07:53:09 2013
From: slashdevnull at hotmail.com (Gavin Costin)
Date: Tue, 24 Dec 2013 15:53:09 +0800
Subject: [Bitcoin-development] Bitcoin difficulty sanity check suggestion
In-Reply-To: <CAO7N=i3LEGJ-fSApYPhoAkL=BCQuHmYZgOCrq9OOZe0SY4Tb1g@mail.gmail.com>
References: <CAO7N=i1_ZyGBAsOGdCvPwJNhARbe-MuWzi9MYLsa3WS_PO25hg@mail.gmail.com>
	<52B7AC86.9010808@monetize.io>
	<CAO7N=i1avBNy9wfQSAyDH19ywJ__C_A9XSVBbufa42=Lu4MjRg@mail.gmail.com>
	<CAJfRnm4EouQFwpKXLZX4GtfE5hzvNMufYxm=Kt+J3iwy9a9edg@mail.gmail.com>
	<CAO7N=i3LEGJ-fSApYPhoAkL=BCQuHmYZgOCrq9OOZe0SY4Tb1g@mail.gmail.com>
Message-ID: <BLU403-EAS12505C3A52C931DB9057A55C6C00@phx.gbl>

Ryan,

Maybe you could test out your ideas somewhere like bitcointalk.org and/or provide some more technical substance before engaging with this forum.

Developers tend to prefer dealing with numbers known to be either 1 or 0, not a variable set of possible values depending on non-technical factors ...

Gavin

> On 24/12/2013, at 15:42, "Ryan Carboni" <ryan.jc.pc at gmail.com> wrote:
> 
> Maybe it's because the arguments being presented are nonsensical and irrelevant to the current Bitcoin network topology, composed of a small number of mining pools, not solo miners? Furthermore I think people would realize that their mining pool has gone "off the reservation" so to speak.
> 
> 
>> On Mon, Dec 23, 2013 at 8:05 PM, Allen Piscitello <allen.piscitello at gmail.com> wrote:
>> Ryan,
>> 
>> Why do you continue to try to correct people who clearly have put more thought into this than you?  Everyone understood you just fine, you just seem to have trouble comprehending why your ideas are terrible.
>> 
>> 
>>> On Mon, Dec 23, 2013 at 7:51 PM, Ryan Carboni <ryan.jc.pc at gmail.com> wrote:
>>> I think you misunderstood my statement. If time > 3 days, and after 4 blocks have been mined, then difficulty would be reset.
>>> 
>>> In theory, one would have to isolate roughly one percent of the Bitcoin network's hashing power to do so. Which would indicate an attack by a state actor as opposed to anything else. Arguably, the safest way to run Bitcoin is through a proprietary dial-up network.
>>> 
>>> 
>>>> On Sun, Dec 22, 2013 at 7:22 PM, Mark Friedenbach <mark at monetize.io> wrote:
>>> 
>>>> -----BEGIN PGP SIGNED MESSAGE-----
>>>> Hash: SHA1
>>>> 
>>>> Ryan, these sort of adjustments introduce security risks. If you were
>>>> isolated from the main chain by a low-hashpower attacker, how would
>>>> you know? They'd need just three days without you noticing that
>>>> network block generation has stalled - maybe they wait for a long
>>>> weekend - then after that the block rate is normal but completely
>>>> controlled by the attacker (and isolated from mainnet).
>>>> 
>>>> There are fast acting alternative difficulty adjustment algorithms
>>>> being explored by some alts, such as the 9-block interval, 144-block
>>>> window, Parks-McClellan FIR filter used by Freicoin to recover from
>>>> just such a mining bubble. If it were to happen to bitcoin, there
>>>> would be sophisticated alternative to turn to, and enough time to make
>>>> the change.
>>>> 
>>>> On 12/22/2013 07:10 PM, Ryan Carboni wrote:
>>>> > I think Bitcoin should have a sanity check: after three days if
>>>> > only four blocks have been mined, difficulty should be adjusted
>>>> > downwards.
>>>> >
>>>> > This might become important in the near future. I project a
>>>> > Bitcoin mining bubble.
>>>> >
>>>> -----BEGIN PGP SIGNATURE-----
>>>> Version: GnuPG v1.4.14 (GNU/Linux)
>>>> Comment: GPGTools - http://gpgtools.org
>>>> Comment: Using GnuPG with Thunderbird - http://www.enigmail.net/
>>>> 
>>>> iQIcBAEBAgAGBQJSt6yGAAoJEAdzVfsmodw4SegQAIJAWW0OgSjediSWq+EpkReS
>>>> qMvC2Y9dmVHtowYLdJVcgwFWbpU8RhA6ApQ1Ks2XF4t0hFCObYDecG6Nl3OIaLfb
>>>> snz24v8ymdxYXKNtzHHUP0VBgsaoRghIpkbf7JMUXC22sxPoPOXFt5RevLgJHrvc
>>>> oGFZSIcEcGgwhwZ745CgFZLwaKuSmg5+wFFcrjIihlHKJOl47Z7rzeqnD6mf2Oi3
>>>> hDpRuVbuhlGMliYcmhk1E6oV0in2R4Purw1WtoY8C9DxrSP2za7W1oeCkmlFfJZS
>>>> to6SzRj7nEIl0LFaPGsIdBrRdDHfvu6eP2OecI+GNLEwLY6qE5v5fkh47mcDkrN0
>>>> 02PmepoX5PRzBqp4sx8WaFKuRbmTRRr3E4i9PGoyzTckkZzq+zFmb1y5fwOy17hE
>>>> C+nP+DyuaPzjypjdo6V+/oGzUKtuKPtqcB1vurbm+WBl5C1jWosAXv5pR87mdCUJ
>>>> +0e14wPra5blV6yBVqX7yx+2heDGymPKfHJ8i76Dtix7XVOJWKVY4OpIxO7YrYv8
>>>> IKcIswoKhZdSDOJLcjm4Qp4hrzgCHAHWx6vN71r5r2T6zaJTOvp98GS04Yy7VGAr
>>>> j38hojcwvJC1ahER3LV/vC0cqO+fxrvY8Q9rW2cUxCnzxzjjG0+Z/gjW8uh73lXN
>>>> DOTF7jpt0ZmCm7uhG9z7
>>>> =5Q2H
>>>> -----END PGP SIGNATURE-----
>>> 
>>> 
>>> ------------------------------------------------------------------------------
>>> Rapidly troubleshoot problems before they affect your business. Most IT
>>> organizations don't have a clear picture of how application performance
>>> affects their revenue. With AppDynamics, you get 100% visibility into your
>>> Java,.NET, & PHP application. Start your 15-day FREE TRIAL of AppDynamics Pro!
>>> http://pubads.g.doubleclick.net/gampad/clk?id=84349831&iu=/4140/ostg.clktrk
>>> _______________________________________________
>>> Bitcoin-development mailing list
>>> Bitcoin-development at lists.sourceforge.net
>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 
> ------------------------------------------------------------------------------
> Rapidly troubleshoot problems before they affect your business. Most IT 
> organizations don't have a clear picture of how application performance 
> affects their revenue. With AppDynamics, you get 100% visibility into your 
> Java,.NET, & PHP application. Start your 15-day FREE TRIAL of AppDynamics Pro!
> http://pubads.g.doubleclick.net/gampad/clk?id=84349831&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131224/569be16b/attachment.html>
-------------- next part --------------
------------------------------------------------------------------------------
Rapidly troubleshoot problems before they affect your business. Most IT 
organizations don't have a clear picture of how application performance 
affects their revenue. With AppDynamics, you get 100% visibility into your 
Java,.NET, & PHP application. Start your 15-day FREE TRIAL of AppDynamics Pro!
http://pubads.g.doubleclick.net/gampad/clk?id=84349831&iu=/4140/ostg.clktrk
-------------- next part --------------
_______________________________________________
Bitcoin-development mailing list
Bitcoin-development at lists.sourceforge.net
https://lists.sourceforge.net/lists/listinfo/bitcoin-development

From bitcoin-list at bluematt.me  Tue Dec 24 08:34:53 2013
From: bitcoin-list at bluematt.me (Matt Corallo)
Date: Tue, 24 Dec 2013 00:34:53 -0800
Subject: [Bitcoin-development] Bitcoin difficulty sanity check suggestion
In-Reply-To: <CAO7N=i1avBNy9wfQSAyDH19ywJ__C_A9XSVBbufa42=Lu4MjRg@mail.gmail.com>
References: <CAO7N=i1_ZyGBAsOGdCvPwJNhARbe-MuWzi9MYLsa3WS_PO25hg@mail.gmail.com>	<52B7AC86.9010808@monetize.io>
	<CAO7N=i1avBNy9wfQSAyDH19ywJ__C_A9XSVBbufa42=Lu4MjRg@mail.gmail.com>
Message-ID: <52B9472D.9000303@bluematt.me>

An attacker with some small hashpower isolates you (as an individual)
from the network by MITMing your network. You just switch the the
attackers chain as if nothing happened because of the network rule
that defines it as OK. Today, you will see that you're behind and warn
the user.

Was it really so hard to write a three-sentence paragraph to clarify
the attack instead of insulting people? Still, posting ideas here
without spending time to ensure you understand the Bitcoin network
well is frowned upon.

Matt

On 12/23/13 17:51, Ryan Carboni wrote:
> I think you misunderstood my statement. If time > 3 days, and after
> 4 blocks have been mined, then difficulty would be reset.
> 
> In theory, one would have to isolate roughly one percent of the
> Bitcoin network's hashing power to do so. Which would indicate an
> attack by a state actor as opposed to anything else. Arguably, the
> safest way to run Bitcoin is through a proprietary dial-up
> network.
> 
> 
> On Sun, Dec 22, 2013 at 7:22 PM, Mark Friedenbach
> <mark at monetize.io <mailto:mark at monetize.io>> wrote:
> 
> Ryan, these sort of adjustments introduce security risks. If you
> were isolated from the main chain by a low-hashpower attacker, how
> would you know? They'd need just three days without you noticing
> that network block generation has stalled - maybe they wait for a
> long weekend - then after that the block rate is normal but
> completely controlled by the attacker (and isolated from mainnet).
> 
> There are fast acting alternative difficulty adjustment algorithms 
> being explored by some alts, such as the 9-block interval,
> 144-block window, Parks-McClellan FIR filter used by Freicoin to
> recover from just such a mining bubble. If it were to happen to
> bitcoin, there would be sophisticated alternative to turn to, and
> enough time to make the change.
> 
> On 12/22/2013 07:10 PM, Ryan Carboni wrote:
>> I think Bitcoin should have a sanity check: after three days if 
>> only four blocks have been mined, difficulty should be adjusted 
>> downwards.
> 
>> This might become important in the near future. I project a 
>> Bitcoin mining bubble.
> 
> 
> 
> 
> 
> ------------------------------------------------------------------------------
>
> 
Rapidly troubleshoot problems before they affect your business. Most IT
> organizations don't have a clear picture of how application
> performance affects their revenue. With AppDynamics, you get 100%
> visibility into your Java,.NET, & PHP application. Start your
> 15-day FREE TRIAL of AppDynamics Pro! 
> http://pubads.g.doubleclick.net/gampad/clk?id=84349831&iu=/4140/ostg.clktrk
>
> 
> 
> 
> _______________________________________________ Bitcoin-development
> mailing list Bitcoin-development at lists.sourceforge.net 
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 



From jeremy at taplink.co  Tue Dec 24 08:52:46 2013
From: jeremy at taplink.co (Jeremy Spilman)
Date: Tue, 24 Dec 2013 00:52:46 -0800
Subject: [Bitcoin-development] Peer Discovery and Overlay
Message-ID: <op.w8k9l8qayldrnw@laptop-air.hsd1.ca.comcast.net>

Some really nice efforts out there to map and analyze the bitcoin P2P  
network.

The current protocol apparently recommends returning up to 2500 addresses  
 from 'getaddr'. I'm not sure how much clients are expected to probe the  
address space in order to select 'far-apart' peers, or how much such an  
process would even attempt to achieve.

How much does it matter if the ability to discover the entire network of  
peers is fast or slow? There are probably pros and cons to both.

Is there any thought to how existing bitcoin node relations, and the ease  
at which peers can be discovered, becomes a service in itself, or even  
possibly a vulnerability?

Are there any past instances of applications hijacking or interfacing with  
the exiting p2p messages, or abusing 'getaddr' functionality? Are there  
any guidelines on this, or should there be?




From tier.nolan at gmail.com  Tue Dec 24 10:47:26 2013
From: tier.nolan at gmail.com (Tier Nolan)
Date: Tue, 24 Dec 2013 10:47:26 +0000
Subject: [Bitcoin-development] Peer Discovery and Overlay
In-Reply-To: <op.w8k9l8qayldrnw@laptop-air.hsd1.ca.comcast.net>
References: <op.w8k9l8qayldrnw@laptop-air.hsd1.ca.comcast.net>
Message-ID: <CAE-z3OXaucepVnN_GbxVQPyeoxYsPirinfamg7fi9CJEOzuRMA@mail.gmail.com>

On Tue, Dec 24, 2013 at 8:52 AM, Jeremy Spilman <jeremy at taplink.co> wrote:

> Are there any past instances of applications hijacking or interfacing with
> the exiting p2p messages, or abusing 'getaddr' functionality? Are there
> any guidelines on this, or should there be?
>
>
There was a BIP by Stefan Thomas for adding custom services to the
protocol.  Discovery would be helpful here too.  If this was added, it
wouldn't be intended for use in a hostile way though.

This one was the custom services BIP.  It defines a change to the version
message and also custom sub-commands.
https://github.com/bitcoin/bips/blob/master/bip-0036.mediawiki

This one discusses how network discovery should be handles.
https://en.bitcoin.it/wiki/User:Justmoon/BIP_Draft:_Custom_Service_Discovery
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131224/b35e78a0/attachment.html>

From pete at petertodd.org  Tue Dec 24 14:02:28 2013
From: pete at petertodd.org (Peter Todd)
Date: Tue, 24 Dec 2013 09:02:28 -0500
Subject: [Bitcoin-development] Peer Discovery and Overlay
In-Reply-To: <op.w8k9l8qayldrnw@laptop-air.hsd1.ca.comcast.net>
References: <op.w8k9l8qayldrnw@laptop-air.hsd1.ca.comcast.net>
Message-ID: <20131224140228.GA9838@savin>

On Tue, Dec 24, 2013 at 12:52:46AM -0800, Jeremy Spilman wrote:
> Some really nice efforts out there to map and analyze the bitcoin P2P  
> network.
> 
> The current protocol apparently recommends returning up to 2500 addresses  
>  from 'getaddr'. I'm not sure how much clients are expected to probe the  
> address space in order to select 'far-apart' peers, or how much such an  
> process would even attempt to achieve.

The logic is that by simply connecting to peers at random you keep the
network structure as a whole randomized. You don't need to make any
specific attempt at connecting to "far-apart" peers.

> How much does it matter if the ability to discover the entire network of  
> peers is fast or slow? There are probably pros and cons to both.
> 
> Is there any thought to how existing bitcoin node relations, and the ease  
> at which peers can be discovered, becomes a service in itself, or even  
> possibly a vulnerability?

Keep in mind it's easy for better knowledge of the network to be a
vulnerability; the number of full nodes is small enough that DoS
attacking all of them is quite feasible.

The other big vulnerability is that getaddr data is best effort; we
currently have no mechanism to ensure that nodes are in fact operated by
separate individuals. It'd be quite easy for someone to set up a
relatively small number of nodes that only advertise themselves in the
getaddr information. Over time they would get proportionally more
incoming connections than is "fair"

As for node addresses being a service, that's what the DNS seeds are!
bitcoinj clients, for instance, depend very heavily on those seeds and
can be easily compromised in a variety of ways by them.

-- 
'peter'[:-1]@petertodd.org
000000000000000092a315c01cfc115d7f1b40dc44edbafd504b0d7498b0704a
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 685 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131224/318e9c4e/attachment.sig>

From wtogami at gmail.com  Tue Dec 24 17:11:10 2013
From: wtogami at gmail.com (Warren Togami Jr.)
Date: Tue, 24 Dec 2013 09:11:10 -0800
Subject: [Bitcoin-development] Peer Discovery and Overlay
In-Reply-To: <20131224140228.GA9838@savin>
References: <op.w8k9l8qayldrnw@laptop-air.hsd1.ca.comcast.net>
	<20131224140228.GA9838@savin>
Message-ID: <CAEz79PqbDS=i54zNkOVwdUFaSYuGGcvwdyLGPxS1poE5hx+7LA@mail.gmail.com>

I was concerned about this issue so we sponsored BlueMatt to implement an
address database for bitcoinj.  In the future it won't be entirely reliant
on what DNS tells it.

Warren

On Tue, Dec 24, 2013 at 6:02 AM, Peter Todd <pete at petertodd.org> wrote:

> As for node addresses being a service, that's what the DNS seeds are!
> bitcoinj clients, for instance, depend very heavily on those seeds and
> can be easily compromised in a variety of ways by them.
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131224/cb906ddb/attachment.html>

From mike at plan99.net  Tue Dec 24 17:15:00 2013
From: mike at plan99.net (Mike Hearn)
Date: Tue, 24 Dec 2013 18:15:00 +0100
Subject: [Bitcoin-development] Peer Discovery and Overlay
In-Reply-To: <CAEz79PqbDS=i54zNkOVwdUFaSYuGGcvwdyLGPxS1poE5hx+7LA@mail.gmail.com>
References: <op.w8k9l8qayldrnw@laptop-air.hsd1.ca.comcast.net>
	<20131224140228.GA9838@savin>
	<CAEz79PqbDS=i54zNkOVwdUFaSYuGGcvwdyLGPxS1poE5hx+7LA@mail.gmail.com>
Message-ID: <CANEZrP1uMGq1zASHyabj_RZPog3sZN=a9FkRg3uEiBBuxXPd=w@mail.gmail.com>

Thanks Warren! That's great. It's also a prerequisite for chain pruning, so
it's not only about decentralisation but also scalability.

Looking forward to reviewing and merging that.


On Tue, Dec 24, 2013 at 6:11 PM, Warren Togami Jr. <wtogami at gmail.com>wrote:

> I was concerned about this issue so we sponsored BlueMatt to implement an
> address database for bitcoinj.  In the future it won't be entirely reliant
> on what DNS tells it.
>
> Warren
>
>
> On Tue, Dec 24, 2013 at 6:02 AM, Peter Todd <pete at petertodd.org> wrote:
>
>> As for node addresses being a service, that's what the DNS seeds are!
>>  bitcoinj clients, for instance, depend very heavily on those seeds and
>> can be easily compromised in a variety of ways by them.
>>
>
>
> ------------------------------------------------------------------------------
> Rapidly troubleshoot problems before they affect your business. Most IT
> organizations don't have a clear picture of how application performance
> affects their revenue. With AppDynamics, you get 100% visibility into your
> Java,.NET, & PHP application. Start your 15-day FREE TRIAL of AppDynamics
> Pro!
> http://pubads.g.doubleclick.net/gampad/clk?id=84349831&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131224/92e6e132/attachment.html>

From ryan.jc.pc at gmail.com  Wed Dec 25 06:53:54 2013
From: ryan.jc.pc at gmail.com (Ryan Carboni)
Date: Tue, 24 Dec 2013 22:53:54 -0800
Subject: [Bitcoin-development] Bitcoin-development Digest, Vol 31,
	Issue 41
In-Reply-To: <mailman.388916.1387882054.12996.bitcoin-development@lists.sourceforge.net>
References: <mailman.388916.1387882054.12996.bitcoin-development@lists.sourceforge.net>
Message-ID: <CAO7N=i0xVm8jxOuz5Rh4g1acpTEuYzcGerH+aHRKaE1ae7FCpA@mail.gmail.com>

You just completely ignored my point. I'm not sure who's trying to insult
whom, or if you're attempting an argumentum ad hominem. My idea is
completely valid.

The only way to man in the middle to have such a large percentage of hash
power is to either a) attack a pool (which people would notice when their
withdrawals go nowhere), b) attack a large number of nodes, which must have
enough combined hash power to mine four blocks within three days for people
to notice (I think it is unlikely for Bitcoin point of sale nodes to have
significant hash power), or c) the attacker himself has 1% of the hash
power and is diverting it to conduct a man in the middle attack against one
single person (as opposed to a major retailer who has a round the clock IT
staff). In order for a large number of nodes to be attacked, it must be by
someone who either is a state actor or an ISP, at which point you've
already lost.

It's really simple math, it require on even the most optimistic estimates a
tenth of a percent of the total network hash power to mine 4 blocks within
three days with good luck. Or maybe this single person is on vacation, then
it would take a hundredth of a percent of the total hash power over two
weeks. I think very few people even have a hundredth of a percent of the
total hash power, which goes to show how secure the network is, and how
little my proposal would weaken network security. I'll concede that
difficulty could be reduced only by 80% if only four blocks were mined in 3
days, which would provide sufficient margin against these proposed man in
the middle attacks, because block-chain growth would be noticeably reduced.

But I repeat myself. Repeatedly. I wish you would understand my points. I'm
making a good faith effort to provide an original idea before it's possibly
too late. But fine. I have nothing more to add, and it's the holidays.


On Tue, Dec 24, 2013 at 2:47 AM, <
bitcoin-development-request at lists.sourceforge.net> wrote:

> An attacker with some small hashpower isolates you (as an individual)
> from the network by MITMing your network. You just switch the the
> attackers chain as if nothing happened because of the network rule
> that defines it as OK. Today, you will see that you're behind and warn
> the user.
>
> Was it really so hard to write a three-sentence paragraph to clarify
> the attack instead of insulting people? Still, posting ideas here
> without spending time to ensure you understand the Bitcoin network
> well is frowned upon.
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131224/e30ee1d4/attachment.html>

From allen.piscitello at gmail.com  Wed Dec 25 20:21:36 2013
From: allen.piscitello at gmail.com (Allen Piscitello)
Date: Wed, 25 Dec 2013 14:21:36 -0600
Subject: [Bitcoin-development] Bitcoin-development Digest, Vol 31,
	Issue 41
In-Reply-To: <CAO7N=i0xVm8jxOuz5Rh4g1acpTEuYzcGerH+aHRKaE1ae7FCpA@mail.gmail.com>
References: <mailman.388916.1387882054.12996.bitcoin-development@lists.sourceforge.net>
	<CAO7N=i0xVm8jxOuz5Rh4g1acpTEuYzcGerH+aHRKaE1ae7FCpA@mail.gmail.com>
Message-ID: <CAJfRnm7fQ1hpoxaQiivCxcNg=pe0wcuHt29eZ4DVvDD4=xVZpg@mail.gmail.com>

No, you don't get it, and it's been explained clearly to you twice.  Take
it to bitcointalk, this does not belong on this list.  Your cure is worse
than the disease.


On Wed, Dec 25, 2013 at 12:53 AM, Ryan Carboni <ryan.jc.pc at gmail.com> wrote:

> You just completely ignored my point. I'm not sure who's trying to insult
> whom, or if you're attempting an argumentum ad hominem. My idea is
> completely valid.
>
> The only way to man in the middle to have such a large percentage of hash
> power is to either a) attack a pool (which people would notice when their
> withdrawals go nowhere), b) attack a large number of nodes, which must have
> enough combined hash power to mine four blocks within three days for people
> to notice (I think it is unlikely for Bitcoin point of sale nodes to have
> significant hash power), or c) the attacker himself has 1% of the hash
> power and is diverting it to conduct a man in the middle attack against one
> single person (as opposed to a major retailer who has a round the clock IT
> staff). In order for a large number of nodes to be attacked, it must be by
> someone who either is a state actor or an ISP, at which point you've
> already lost.
>
> It's really simple math, it require on even the most optimistic estimates
> a tenth of a percent of the total network hash power to mine 4 blocks
> within three days with good luck. Or maybe this single person is on
> vacation, then it would take a hundredth of a percent of the total hash
> power over two weeks. I think very few people even have a hundredth of a
> percent of the total hash power, which goes to show how secure the network
> is, and how little my proposal would weaken network security. I'll concede
> that difficulty could be reduced only by 80% if only four blocks were mined
> in 3 days, which would provide sufficient margin against these proposed man
> in the middle attacks, because block-chain growth would be noticeably
> reduced.
>
> But I repeat myself. Repeatedly. I wish you would understand my points.
> I'm making a good faith effort to provide an original idea before it's
> possibly too late. But fine. I have nothing more to add, and it's the
> holidays.
>
>
> On Tue, Dec 24, 2013 at 2:47 AM, <
> bitcoin-development-request at lists.sourceforge.net> wrote:
>
>> An attacker with some small hashpower isolates you (as an individual)
>> from the network by MITMing your network. You just switch the the
>> attackers chain as if nothing happened because of the network rule
>> that defines it as OK. Today, you will see that you're behind and warn
>> the user.
>>
>> Was it really so hard to write a three-sentence paragraph to clarify
>> the attack instead of insulting people? Still, posting ideas here
>> without spending time to ensure you understand the Bitcoin network
>> well is frowned upon.
>>
>
>
> ------------------------------------------------------------------------------
> Rapidly troubleshoot problems before they affect your business. Most IT
> organizations don't have a clear picture of how application performance
> affects their revenue. With AppDynamics, you get 100% visibility into your
> Java,.NET, & PHP application. Start your 15-day FREE TRIAL of AppDynamics
> Pro!
> http://pubads.g.doubleclick.net/gampad/clk?id=84349831&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131225/29006e75/attachment.html>

From jeanpaulkogelman at me.com  Thu Dec 26 11:48:12 2013
From: jeanpaulkogelman at me.com (Jean-Paul Kogelman)
Date: Thu, 26 Dec 2013 12:48:12 +0100
Subject: [Bitcoin-development] [RFC] Proposal: Base58 encoded HD Wallet
 master seed with optional encryption
In-Reply-To: <BF62F0D0-1D13-4F19-A8F6-F588F3060A64@me.com>
References: <CANEZrP37a=EH+1P47opH0E-1TG9ozgw_1NzecJpRRJsMaZRLOw@mail.gmail.com>
	<81f77484-3ca9-40a7-a999-884260b26be5@me.com>
	<CAAS2fgSyegH8y1dYcijCSPLsC54mxeSNsN+3FQVDo5R9tWwAwQ@mail.gmail.com>
	<BF62F0D0-1D13-4F19-A8F6-F588F3060A64@me.com>
Message-ID: <682B9F30-7DDC-4A9D-886E-5454D5F45665@me.com>

Merry Christmas everyone!

I've updated the proposal.

I've changed the checksum to be a double SHA256 of the private key instead of the public address string and I've added support for 3rd party KDF computation.

The full proposal with updated test vectors lives here:

https://bitcointalk.org/index.php?topic=258678

Cheers,

Jean-Paul
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131226/59f93b93/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 842 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131226/59f93b93/attachment.sig>

From mike at plan99.net  Fri Dec 27 18:05:12 2013
From: mike at plan99.net (Mike Hearn)
Date: Fri, 27 Dec 2013 18:05:12 +0000
Subject: [Bitcoin-development] Testnet block explorer
Message-ID: <CANEZrP398MCW6CdQLo78DtQ7HWY4f1TMkj32Fm2dTrKcUT09cg@mail.gmail.com>

For a long time the only block explorer for testnet has been the original
blockexplorer.com, which is unfortunately often broken / behind / slow and
not really maintained any more.

There is now a new one, here:

https://www.biteasy.com/testnet/blocks

There's also a REST/JSON API for it.

Please note one curiosity of this block explorer is that the coinbase tx
doesn't necessarily come first in the listing (it's sorted by "time
received", see).

Other interesting thing to note: this site is built using bitcoinj. The
author can be contacted on IRC sometimes using the nick damethos.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131227/2e246894/attachment.html>

From mike at belshe.com  Fri Dec 27 18:08:01 2013
From: mike at belshe.com (Mike Belshe)
Date: Fri, 27 Dec 2013 10:08:01 -0800
Subject: [Bitcoin-development] Testnet block explorer
In-Reply-To: <CANEZrP398MCW6CdQLo78DtQ7HWY4f1TMkj32Fm2dTrKcUT09cg@mail.gmail.com>
References: <CANEZrP398MCW6CdQLo78DtQ7HWY4f1TMkj32Fm2dTrKcUT09cg@mail.gmail.com>
Message-ID: <CABaLYCvCcyCdicVRHR-3EhC-8FRB2mZ4AneU0P=skGh_kbSAiw@mail.gmail.com>

Great!

There is another one at http://testnet.btclook.com/ which provides a
different view as well.

Mike



On Fri, Dec 27, 2013 at 10:05 AM, Mike Hearn <mike at plan99.net> wrote:

> For a long time the only block explorer for testnet has been the original
> blockexplorer.com, which is unfortunately often broken / behind / slow
> and not really maintained any more.
>
> There is now a new one, here:
>
> https://www.biteasy.com/testnet/blocks
>
> There's also a REST/JSON API for it.
>
> Please note one curiosity of this block explorer is that the coinbase tx
> doesn't necessarily come first in the listing (it's sorted by "time
> received", see).
>
> Other interesting thing to note: this site is built using bitcoinj. The
> author can be contacted on IRC sometimes using the nick damethos.
>
>
> ------------------------------------------------------------------------------
> Rapidly troubleshoot problems before they affect your business. Most IT
> organizations don't have a clear picture of how application performance
> affects their revenue. With AppDynamics, you get 100% visibility into your
> Java,.NET, & PHP application. Start your 15-day FREE TRIAL of AppDynamics
> Pro!
> http://pubads.g.doubleclick.net/gampad/clk?id=84349831&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131227/4b8330f0/attachment.html>

From melvincarvalho at gmail.com  Fri Dec 27 19:23:58 2013
From: melvincarvalho at gmail.com (Melvin Carvalho)
Date: Fri, 27 Dec 2013 20:23:58 +0100
Subject: [Bitcoin-development] Testnet block explorer
In-Reply-To: <CABaLYCvCcyCdicVRHR-3EhC-8FRB2mZ4AneU0P=skGh_kbSAiw@mail.gmail.com>
References: <CANEZrP398MCW6CdQLo78DtQ7HWY4f1TMkj32Fm2dTrKcUT09cg@mail.gmail.com>
	<CABaLYCvCcyCdicVRHR-3EhC-8FRB2mZ4AneU0P=skGh_kbSAiw@mail.gmail.com>
Message-ID: <CAKaEYhKnRgK2PS4hV2fCws6z69bvsMabL_hEY4OXBv685bCoJg@mail.gmail.com>

On 27 December 2013 19:08, Mike Belshe <mike at belshe.com> wrote:

> Great!
>
> There is another one at http://testnet.btclook.com/ which provides a
> different view as well.
>

And another at:

http://test.webbtc.com/<http://test.webbtc.com/address/myTPjxggahXyAzuMcYp5JTkbybANyLsYBW>

Testnet does not currently fully function with for creating transactions:

http://test.webbtc.com/<http://test.webbtc.com/address/myTPjxggahXyAzuMcYp5JTkbybANyLsYBW>

Because there's no "unspent" API for getting the unspent values for an
address.  If there existed a testnet explorer which would send out those
values (as blockchain.info does with the main net), that would be awesome.

I'm also working on a testnet explorer with semantic web markup so that
it's both human and machine readable.


>
> Mike
>
>
>
> On Fri, Dec 27, 2013 at 10:05 AM, Mike Hearn <mike at plan99.net> wrote:
>
>> For a long time the only block explorer for testnet has been the original
>> blockexplorer.com, which is unfortunately often broken / behind / slow
>> and not really maintained any more.
>>
>> There is now a new one, here:
>>
>> https://www.biteasy.com/testnet/blocks
>>
>> There's also a REST/JSON API for it.
>>
>> Please note one curiosity of this block explorer is that the coinbase tx
>> doesn't necessarily come first in the listing (it's sorted by "time
>> received", see).
>>
>> Other interesting thing to note: this site is built using bitcoinj. The
>> author can be contacted on IRC sometimes using the nick damethos.
>>
>>
>> ------------------------------------------------------------------------------
>> Rapidly troubleshoot problems before they affect your business. Most IT
>> organizations don't have a clear picture of how application performance
>> affects their revenue. With AppDynamics, you get 100% visibility into your
>> Java,.NET, & PHP application. Start your 15-day FREE TRIAL of AppDynamics
>> Pro!
>>
>> http://pubads.g.doubleclick.net/gampad/clk?id=84349831&iu=/4140/ostg.clktrk
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>
>>
>
>
> ------------------------------------------------------------------------------
> Rapidly troubleshoot problems before they affect your business. Most IT
> organizations don't have a clear picture of how application performance
> affects their revenue. With AppDynamics, you get 100% visibility into your
> Java,.NET, & PHP application. Start your 15-day FREE TRIAL of AppDynamics
> Pro!
> http://pubads.g.doubleclick.net/gampad/clk?id=84349831&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131227/ec348462/attachment.html>

From elombrozo at gmail.com  Fri Dec 27 21:36:29 2013
From: elombrozo at gmail.com (Eric Lombrozo)
Date: Fri, 27 Dec 2013 13:36:29 -0800
Subject: [Bitcoin-development] Testnet block explorer
In-Reply-To: <CAKaEYhKnRgK2PS4hV2fCws6z69bvsMabL_hEY4OXBv685bCoJg@mail.gmail.com>
References: <CANEZrP398MCW6CdQLo78DtQ7HWY4f1TMkj32Fm2dTrKcUT09cg@mail.gmail.com>
	<CABaLYCvCcyCdicVRHR-3EhC-8FRB2mZ4AneU0P=skGh_kbSAiw@mail.gmail.com>
	<CAKaEYhKnRgK2PS4hV2fCws6z69bvsMabL_hEY4OXBv685bCoJg@mail.gmail.com>
Message-ID: <80BCD591-8F4E-4BDA-B9E8-029700B31760@gmail.com>

I've built a shell around the bitcoind JSON-RPC, along with a websockets server that provides realtime transaction and block feeds which can be used with bitcoin mainnet and testnet as well as any of the alt chains and formats it similar to blockchain.info with the bootstrap look-and-feel, i.e. http://altcoins.ws/dogecoin/

A goal of this project was simplicity in deployment to a new server.

The JSON-RPC is missing address indexing and an "unspent" API, so these things are still missing from this shell.

-Eric

On Dec 27, 2013, at 11:23 AM, Melvin Carvalho <melvincarvalho at gmail.com> wrote:

> 
> 
> 
> On 27 December 2013 19:08, Mike Belshe <mike at belshe.com> wrote:
> Great!
> 
> There is another one at http://testnet.btclook.com/ which provides a different view as well.
> 
> And another at:
> 
> http://test.webbtc.com/
> 
> Testnet does not currently fully function with for creating transactions:
> 
> http://test.webbtc.com/
> 
> Because there's no "unspent" API for getting the unspent values for an address.  If there existed a testnet explorer which would send out those values (as blockchain.info does with the main net), that would be awesome.
> 
> I'm also working on a testnet explorer with semantic web markup so that it's both human and machine readable.
>  
> 
> Mike
> 
> 
> 
> On Fri, Dec 27, 2013 at 10:05 AM, Mike Hearn <mike at plan99.net> wrote:
> For a long time the only block explorer for testnet has been the original blockexplorer.com, which is unfortunately often broken / behind / slow and not really maintained any more.
> 
> There is now a new one, here:
> 
> https://www.biteasy.com/testnet/blocks
> 
> There's also a REST/JSON API for it.
> 
> Please note one curiosity of this block explorer is that the coinbase tx doesn't necessarily come first in the listing (it's sorted by "time received", see).
> 
> Other interesting thing to note: this site is built using bitcoinj. The author can be contacted on IRC sometimes using the nick damethos.
> 
> ------------------------------------------------------------------------------
> Rapidly troubleshoot problems before they affect your business. Most IT
> organizations don't have a clear picture of how application performance
> affects their revenue. With AppDynamics, you get 100% visibility into your
> Java,.NET, & PHP application. Start your 15-day FREE TRIAL of AppDynamics Pro!
> http://pubads.g.doubleclick.net/gampad/clk?id=84349831&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 
> 
> 
> ------------------------------------------------------------------------------
> Rapidly troubleshoot problems before they affect your business. Most IT
> organizations don't have a clear picture of how application performance
> affects their revenue. With AppDynamics, you get 100% visibility into your
> Java,.NET, & PHP application. Start your 15-day FREE TRIAL of AppDynamics Pro!
> http://pubads.g.doubleclick.net/gampad/clk?id=84349831&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 
> 
> ------------------------------------------------------------------------------
> Rapidly troubleshoot problems before they affect your business. Most IT 
> organizations don't have a clear picture of how application performance 
> affects their revenue. With AppDynamics, you get 100% visibility into your 
> Java,.NET, & PHP application. Start your 15-day FREE TRIAL of AppDynamics Pro!
> http://pubads.g.doubleclick.net/gampad/clk?id=84349831&iu=/4140/ostg.clktrk_______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131227/d5aa048c/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 801 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131227/d5aa048c/attachment.sig>

From elombrozo at gmail.com  Fri Dec 27 21:48:06 2013
From: elombrozo at gmail.com (Eric Lombrozo)
Date: Fri, 27 Dec 2013 13:48:06 -0800
Subject: [Bitcoin-development] Testnet block explorer
In-Reply-To: <80BCD591-8F4E-4BDA-B9E8-029700B31760@gmail.com>
References: <CANEZrP398MCW6CdQLo78DtQ7HWY4f1TMkj32Fm2dTrKcUT09cg@mail.gmail.com>
	<CABaLYCvCcyCdicVRHR-3EhC-8FRB2mZ4AneU0P=skGh_kbSAiw@mail.gmail.com>
	<CAKaEYhKnRgK2PS4hV2fCws6z69bvsMabL_hEY4OXBv685bCoJg@mail.gmail.com>
	<80BCD591-8F4E-4BDA-B9E8-029700B31760@gmail.com>
Message-ID: <3C53863C-23E3-44E2-B5B2-ACF728164F40@gmail.com>

I'll add testnet to it as well - sorry, Ben, for lifting the css (I'm a programmer, not a graphic designer) - if anyone would like to help me make the styling original, I would be more than happy to collaborate.

-Eric

On Dec 27, 2013, at 1:36 PM, Eric Lombrozo <elombrozo at gmail.com> wrote:

> I've built a shell around the bitcoind JSON-RPC, along with a websockets server that provides realtime transaction and block feeds which can be used with bitcoin mainnet and testnet as well as any of the alt chains and formats it similar to blockchain.info with the bootstrap look-and-feel, i.e. http://altcoins.ws/dogecoin/
> 
> A goal of this project was simplicity in deployment to a new server.
> 
> The JSON-RPC is missing address indexing and an "unspent" API, so these things are still missing from this shell.
> 
> -Eric
> 
> On Dec 27, 2013, at 11:23 AM, Melvin Carvalho <melvincarvalho at gmail.com> wrote:
> 
>> 
>> 
>> 
>> On 27 December 2013 19:08, Mike Belshe <mike at belshe.com> wrote:
>> Great!
>> 
>> There is another one at http://testnet.btclook.com/ which provides a different view as well.
>> 
>> And another at:
>> 
>> http://test.webbtc.com/
>> 
>> Testnet does not currently fully function with for creating transactions:
>> 
>> http://test.webbtc.com/
>> 
>> Because there's no "unspent" API for getting the unspent values for an address.  If there existed a testnet explorer which would send out those values (as blockchain.info does with the main net), that would be awesome.
>> 
>> I'm also working on a testnet explorer with semantic web markup so that it's both human and machine readable.
>>  
>> 
>> Mike
>> 
>> 
>> 
>> On Fri, Dec 27, 2013 at 10:05 AM, Mike Hearn <mike at plan99.net> wrote:
>> For a long time the only block explorer for testnet has been the original blockexplorer.com, which is unfortunately often broken / behind / slow and not really maintained any more.
>> 
>> There is now a new one, here:
>> 
>> https://www.biteasy.com/testnet/blocks
>> 
>> There's also a REST/JSON API for it.
>> 
>> Please note one curiosity of this block explorer is that the coinbase tx doesn't necessarily come first in the listing (it's sorted by "time received", see).
>> 
>> Other interesting thing to note: this site is built using bitcoinj. The author can be contacted on IRC sometimes using the nick damethos.
>> 
>> ------------------------------------------------------------------------------
>> Rapidly troubleshoot problems before they affect your business. Most IT
>> organizations don't have a clear picture of how application performance
>> affects their revenue. With AppDynamics, you get 100% visibility into your
>> Java,.NET, & PHP application. Start your 15-day FREE TRIAL of AppDynamics Pro!
>> http://pubads.g.doubleclick.net/gampad/clk?id=84349831&iu=/4140/ostg.clktrk
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>> 
>> 
>> 
>> ------------------------------------------------------------------------------
>> Rapidly troubleshoot problems before they affect your business. Most IT
>> organizations don't have a clear picture of how application performance
>> affects their revenue. With AppDynamics, you get 100% visibility into your
>> Java,.NET, & PHP application. Start your 15-day FREE TRIAL of AppDynamics Pro!
>> http://pubads.g.doubleclick.net/gampad/clk?id=84349831&iu=/4140/ostg.clktrk
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>> 
>> 
>> ------------------------------------------------------------------------------
>> Rapidly troubleshoot problems before they affect your business. Most IT 
>> organizations don't have a clear picture of how application performance 
>> affects their revenue. With AppDynamics, you get 100% visibility into your 
>> Java,.NET, & PHP application. Start your 15-day FREE TRIAL of AppDynamics Pro!
>> http://pubads.g.doubleclick.net/gampad/clk?id=84349831&iu=/4140/ostg.clktrk_______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131227/b8b65d3b/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 801 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131227/b8b65d3b/attachment.sig>

From jeremy at taplink.co  Sat Dec 28 07:29:52 2013
From: jeremy at taplink.co (Jeremy Spilman)
Date: Fri, 27 Dec 2013 23:29:52 -0800
Subject: [Bitcoin-development] Access to Mempool
Message-ID: <op.w8skf2pmyldrnw@laptop-air.hsd1.ca.comcast.net>

I was reading there are some commands to access a peer's mempool state.  
The purpose being to allow miners to recover faster after a reboot, I  
think?

Reading peer mempool definitely allows recovering faster after a reboot.  
So does persisting mempool in a database locally. But what can you learn  
about a node from its mempool? Basically, are there distinguishing  
features in the mempool, or could there be?

Are there transactions you can receive which go into your own mempool but  
which you don't forward? How about 'nLockTime' transactions?

Is this new feature off by default? Which clients support it?

By the way, are there recommended places to go to compare features  
implemented by different wallet software?

Sorry, so many questions...




From mike at plan99.net  Sat Dec 28 14:46:05 2013
From: mike at plan99.net (Mike Hearn)
Date: Sat, 28 Dec 2013 14:46:05 +0000
Subject: [Bitcoin-development] Access to Mempool
In-Reply-To: <op.w8skf2pmyldrnw@laptop-air.hsd1.ca.comcast.net>
References: <op.w8skf2pmyldrnw@laptop-air.hsd1.ca.comcast.net>
Message-ID: <CANEZrP3t_QYP6giYhJ7H7Zumo0DwaVe=APeY4Kqv=S66g=-QQw@mail.gmail.com>

>
> I was reading there are some commands to access a peer's mempool state.
> The purpose being to allow miners to recover faster after a reboot, I
> think?
>

The "mempool" command allows nodes to request the contents of a peers
memory pool, yes.

It is currently used by SPV clients to find transactions that were
broadcast before they were started up (but not yet confirmed).


> Reading peer mempool definitely allows recovering faster after a reboot.
> So does persisting mempool in a database locally.


0.9 has code to save the mempool to disk.


> But what can you learn about a node from its mempool? Basically, are there
> distinguishing
> features in the mempool, or could there be?
>

Er, you mean, distinguishing features beyond the nodes IP address?

The contents of the mempool may vary depending on when the node was started
and what it saw at what times. I guess it's distinguishing in a way, but
not in any important way. Nodes are not intended to be completely
indistinguishable, just indistinguishable enough that it doesn't matter
which you connect to.


> Are there transactions you can receive which go into your own mempool but
> which you don't forward?


I don't think so, unless there are quirks to do with sendrawtransaction
RPCs or strangely crafted wallet spends. Normally if a tx is in the mempool
it will be relayed.


> By the way, are there recommended places to go to compare features
> implemented by different wallet software?
>

I don't know of any such place, but I'm sure people have compiled tables
somewhere.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131228/575ec0fd/attachment.html>

From mike at plan99.net  Sat Dec 28 18:56:28 2013
From: mike at plan99.net (Mike Hearn)
Date: Sat, 28 Dec 2013 18:56:28 +0000
Subject: [Bitcoin-development] Fees / prio to be confirmed within ....
Message-ID: <CANEZrP10Q4aYgVhcoi2w=Ki5KkXxeX2rexnrSNEK6m56GPX0zg@mail.gmail.com>

(nb: Gavin is on vacation at the moment, I post this now just to give food
for thought over the holidays).

I patched my bitcoind to use a modified version of Gavin's fee estimation
framework. Here is what it's currently estimating. This shows number of
samples taken for fee-paying transactions and free transactions (where
confirmation requires priority), along with the median fee paid and then
the 10th percentile fee paid, and median priority for the free transactions
(no 10th percentile there). -1 means missing data, of course. Max 1000
samples.

2013-12-28 18:34:42 estimates: for confirming within 0 blocks based on
1000/383 samples, fee=38759.7/16155.1 (10%) per kilobyte, prio=8.41811e+08
2013-12-28 18:34:42 estimates: for confirming within 1 blocks based on
1000/202 samples, fee=26738/16155.1 (10%) per kilobyte, prio=2.91473e+08
2013-12-28 18:34:42 estimates: for confirming within 2 blocks based on
298/115 samples, fee=22831.1/10341.3 (10%) per kilobyte, prio=3.18117e+08
2013-12-28 18:34:42 estimates: for confirming within 3 blocks based on
115/88 samples, fee=22831.1/8810.57 (10%) per kilobyte, prio=2.53442e+08
2013-12-28 18:34:42 estimates: for confirming within 4 blocks based on
17/26 samples, fee=14992.5/2759.38 (10%) per kilobyte, prio=2.99917e+08
2013-12-28 18:34:42 estimates: for confirming within 5 blocks based on 1/12
samples, fee=7468.26/7468.26 (10%) per kilobyte, prio=4.12797e+08
2013-12-28 18:34:42 estimates: for confirming within 6 blocks based on 1/9
samples, fee=8071.03/8071.03 (10%) per kilobyte, prio=1.32007e+08
2013-12-28 18:34:42 estimates: for confirming within 7 blocks based on 5/22
samples, fee=3018.41/1.91939 (10%) per kilobyte, prio=9.60733e+07
2013-12-28 18:34:42 estimates: for confirming within 8 blocks based on 0/9
samples, fee=-1/-1 (10%) per kilobyte, prio=1.22123e+08
2013-12-28 18:34:42 estimates: for confirming within 9 blocks based on 0/8
samples, fee=-1/-1 (10%) per kilobyte, prio=6.42686e+07
2013-12-28 18:34:42 estimates: for confirming within 10 blocks based on 0/3
samples, fee=-1/-1 (10%) per kilobyte, prio=6.72846e+06
2013-12-28 18:34:42 estimates: for confirming within 11 blocks based on 0/9
samples, fee=-1/-1 (10%) per kilobyte, prio=5.42872e+08
2013-12-28 18:34:42 estimates: for confirming within 12 blocks based on 0/1
samples, fee=-1/-1 (10%) per kilobyte, prio=1.13419e+07
2013-12-28 18:34:42 estimates: for confirming within 13 blocks based on 0/3
samples, fee=-1/-1 (10%) per kilobyte, prio=4.57343e+08
2013-12-28 18:34:42 estimates: for confirming within 18 blocks based on 0/2
samples, fee=-1/-1 (10%) per kilobyte, prio=5.51321e+08
2013-12-28 18:34:42 estimates: for confirming within 20 blocks based on 0/3
samples, fee=-1/-1 (10%) per kilobyte, prio=4.41654e+08
2013-12-28 18:34:42 estimates: for confirming within 22 blocks based on 0/4
samples, fee=-1/-1 (10%) per kilobyte, prio=4.04413e+08
2013-12-28 18:34:42 estimates: for confirming within 23 blocks based on 0/4
samples, fee=-1/-1 (10%) per kilobyte, prio=5.02467e+08
2013-12-28 18:34:42 estimates: for confirming within 24 blocks based on 0/1
samples, fee=-1/-1 (10%) per kilobyte, prio=2.76975e+08
2013-12-28 18:34:42 estimates: for confirming within 25 blocks based on 0/1
samples, fee=-1/-1 (10%) per kilobyte, prio=2.90481e+08
2013-12-28 18:34:42 estimates: for confirming within 27 blocks based on 0/3
samples, fee=-1/-1 (10%) per kilobyte, prio=3.49409e+08
2013-12-28 18:34:42 estimates: for confirming within 28 blocks based on 0/1
samples, fee=-1/-1 (10%) per kilobyte, prio=1.35682e+09
2013-12-28 18:34:42 estimates: for confirming within 31 blocks based on 0/2
samples, fee=-1/-1 (10%) per kilobyte, prio=2.17966e+08
2013-12-28 18:34:42 estimates: for confirming within 36 blocks based on 1/0
samples, fee=8103.73/8103.73 (10%) per kilobyte, prio=-1
2013-12-28 18:34:42 estimates: for confirming within 47 blocks based on 1/0
samples, fee=608.273/608.273 (10%) per kilobyte, prio=-1
2013-12-28 18:34:42 estimates: for confirming within 48 blocks based on 1/0
samples, fee=11415.5/11415.5 (10%) per kilobyte, prio=-1
2013-12-28 18:34:42 estimates: for confirming within 51 blocks based on 0/1
samples, fee=-1/-1 (10%) per kilobyte, prio=1.01951e+09
2013-12-28 18:34:42 estimates: for confirming within 55 blocks based on 1/0
samples, fee=3891.05/3891.05 (10%) per kilobyte, prio=-1
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131228/d772d7fb/attachment.html>

From eduffield82 at gmail.com  Sun Dec 29 18:53:19 2013
From: eduffield82 at gmail.com (Evan Duffield)
Date: Sun, 29 Dec 2013 11:53:19 -0700
Subject: [Bitcoin-development] Looking for GREAT C++ developer for exciting
	opportunity in bitcoin space
Message-ID: <CAMkFLsSwKEiEtV1OaAsGPiU8iAWbb77fDNJDmRwbgKnZ_kjG6Q@mail.gmail.com>

Hello,

We?re a startup looking for 1 or 2 really good C++ programmer that is
familiar with the bitcoin internals to help with a for-profit startup.

We will be able to provide more information about the project after signing
a non-compete/non-disclosure agreement. Our coin will be one of the truly
unique coins that are not just a clone of the original Bitcoin code. In
short the project will be a merge-mined altcoin that will provide a very
useful service to the whole crypto-coin ecosystem.

If you have added any features to Bitcoin or related technologies this is a
definite bonus. Please include information about the work you?re done in
the space.

We have detailed plans on how to implement it and the roles we are looking
to fill. If interested please email eduffield82 at gmail.com with a
description of your work experience and we?ll vett the applications and
share our plans to see if you?re interested.

Thanks,

Evan & Kyle
Hawk Financial Group, LLC
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131229/58bf9741/attachment.html>

From jeremie.dl at gmail.com  Sun Dec 29 19:10:42 2013
From: jeremie.dl at gmail.com (=?ISO-8859-1?Q?J=E9r=E9mie_Dubois=2DLacoste?=)
Date: Sun, 29 Dec 2013 20:10:42 +0100
Subject: [Bitcoin-development] Looking for GREAT C++ developer for
 exciting opportunity in bitcoin space
Message-ID: <CAJqsvLC8KX04ZFLzntOecnWtN_mFeH6iTPQJp4_hv4StrVVh2w@mail.gmail.com>

Hey,

I doubt this list is for this kind of thing. I am following
bitcoin-development since a long time but never participated because I
believe discussions should be well-focused and I never had anything
relevant to say.
Evan, I am pretty sure that emails such as yours will cause the true
discussions between core-dev (or those closely graviting around) to
move elsewhere on a less public channel, where people like me won't be
able to follow them anymore. Thus my request: please post this kind of
things elsewhere, because you are hijacking a list just to target his
audience, but not to contribute relevant content. (A definition
usually describing spam).

Cheers,

Jeremie


2013/12/29 Evan Duffield <eduffield82 at gmail.com>:
> Hello,
>
>
> We?re a startup looking for 1 or 2 really good C++ programmer that is
> familiar with the bitcoin internals to help with a for-profit startup.
>
>
> We will be able to provide more information about the project after signing
> a non-compete/non-disclosure agreement. Our coin will be one of the truly
> unique coins that are not just a clone of the original Bitcoin code. In
> short the project will be a merge-mined altcoin that will provide a very
> useful service to the whole crypto-coin ecosystem.
>
>
> If you have added any features to Bitcoin or related technologies this is a
> definite bonus. Please include information about the work you?re done in the
> space.
>
>
> We have detailed plans on how to implement it and the roles we are looking
> to fill. If interested please email eduffield82 at gmail.com with a description
> of your work experience and we?ll vett the applications and share our plans
> to see if you?re interested.
>
>
> Thanks,
>
>
> Evan & Kyle
>
> Hawk Financial Group, LLC
>
> ------------------------------------------------------------------------------
> Rapidly troubleshoot problems before they affect your business. Most IT
> organizations don't have a clear picture of how application performance
> affects their revenue. With AppDynamics, you get 100% visibility into your
> Java,.NET, & PHP application. Start your 15-day FREE TRIAL of AppDynamics
> Pro!
> http://pubads.g.doubleclick.net/gampad/clk?id=84349831&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>



From jeanpaulkogelman at me.com  Sun Dec 29 19:24:01 2013
From: jeanpaulkogelman at me.com (Jean-Paul Kogelman)
Date: Sun, 29 Dec 2013 20:24:01 +0100
Subject: [Bitcoin-development] HD wallet import strategies
Message-ID: <E677DCDC-C139-4A8F-B1A9-0D1582365688@me.com>

Hi all,

We've been having a heated discussion on HD wallet import strategies on bitcointalk and I was wondering what the people on bitcoin-dev had to say about the subject. 

So I have a few questions and would love to hear your thoughts on them:

1) What information do you consider absolutely essential when importing an HD wallet root key?
2) If you already have an HD wallet import function, can you give a rough description of how it works?
3) Do you think it would be wise to set up some sort of guidelines to ensure that different HD wallet implementations will be able to import each others HD wallet root keys?
4) Anything else on the subject you consider important?

Thanks in advance,

Jean-Paul

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 842 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131229/248a1049/attachment.sig>

From bitcoin-list at bluematt.me  Sun Dec 29 19:27:52 2013
From: bitcoin-list at bluematt.me (Matt Corallo)
Date: Sun, 29 Dec 2013 11:27:52 -0800
Subject: [Bitcoin-development] Looking for GREAT C++ developer for
	exciting	opportunity in bitcoin space
In-Reply-To: <CAMkFLsSwKEiEtV1OaAsGPiU8iAWbb77fDNJDmRwbgKnZ_kjG6Q@mail.gmail.com>
References: <CAMkFLsSwKEiEtV1OaAsGPiU8iAWbb77fDNJDmRwbgKnZ_kjG6Q@mail.gmail.com>
Message-ID: <57c31225-e730-4376-af56-eea34a0918c1@email.android.com>

I'm not sure where you got the idea that Bitcoin-development was ideal for hiring scamcoin developers, but it's not. Most of the people on this list are smart enough to realize posts like this are dumb ideas backed by greedy "entrepreneurs" who don't understand the system they're trying to improve 99.9% of the time.


Evan Duffield <eduffield82 at gmail.com> wrote:
>Hello,
>
>We?re a startup looking for 1 or 2 really good C++ programmer that is
>familiar with the bitcoin internals to help with a for-profit startup.
>
>We will be able to provide more information about the project after
>signing
>a non-compete/non-disclosure agreement. Our coin will be one of the
>truly
>unique coins that are not just a clone of the original Bitcoin code. In
>short the project will be a merge-mined altcoin that will provide a
>very
>useful service to the whole crypto-coin ecosystem.
>
>If you have added any features to Bitcoin or related technologies this
>is a
>definite bonus. Please include information about the work you?re done
>in
>the space.
>
>We have detailed plans on how to implement it and the roles we are
>looking
>to fill. If interested please email eduffield82 at gmail.com with a
>description of your work experience and we?ll vett the applications and
>share our plans to see if you?re interested.
>
>Thanks,
>
>Evan & Kyle
>Hawk Financial Group, LLC
>
>
>------------------------------------------------------------------------
>
>------------------------------------------------------------------------------
>Rapidly troubleshoot problems before they affect your business. Most IT
>
>organizations don't have a clear picture of how application performance
>
>affects their revenue. With AppDynamics, you get 100% visibility into
>your 
>Java,.NET, & PHP application. Start your 15-day FREE TRIAL of
>AppDynamics Pro!
>http://pubads.g.doubleclick.net/gampad/clk?id=84349831&iu=/4140/ostg.clktrk
>
>------------------------------------------------------------------------
>
>_______________________________________________
>Bitcoin-development mailing list
>Bitcoin-development at lists.sourceforge.net
>https://lists.sourceforge.net/lists/listinfo/bitcoin-development
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131229/0a81a289/attachment.html>

From mfreitas at gmail.com  Mon Dec 30 19:23:17 2013
From: mfreitas at gmail.com (Miguel Freitas)
Date: Mon, 30 Dec 2013 17:23:17 -0200
Subject: [Bitcoin-development] New P2P microblogging project based on Bitcoin
Message-ID: <CAJq5o=v+1k798X_xVOUsaFBVrKVzx=QOnea9A_nZXgA5A-PEQw@mail.gmail.com>

Hi folks,

I'd like to let you know about a new project based on Bitcoin + Libtorrent:
twister - a new p2p microblogging platform.

First of all, some kudos and apologies are due. Bitcoin and libtorrent are
both well written, high quality C++ codebases and i'd like to thank all
developers for their work.

Apologies are for bastardizing those codebases and (forcibly) merging them
together in order to try my P2P ideas. I wouldn't be able to have something
working in just a few months if i did it differently. So the least I could
do in retribution is offering write-access to the repository for bitcoin
and libtorrent developers (for those who want it, of course).

I won't add more details here because the site has plenty of information
and i'm sure some people will not be interested anyway as we get offtopic.

twister main site:

http://twister.net.co

white-paper:

http://arxiv.org/abs/1312.7152

regards,

Miguel
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131230/fff7b0c4/attachment.html>

From pete at petertodd.org  Mon Dec 30 23:22:25 2013
From: pete at petertodd.org (Peter Todd)
Date: Mon, 30 Dec 2013 18:22:25 -0500
Subject: [Bitcoin-development] Looking for GREAT C++ developer for
 exciting opportunity in bitcoin space
In-Reply-To: <CAMkFLsSwKEiEtV1OaAsGPiU8iAWbb77fDNJDmRwbgKnZ_kjG6Q@mail.gmail.com>
References: <CAMkFLsSwKEiEtV1OaAsGPiU8iAWbb77fDNJDmRwbgKnZ_kjG6Q@mail.gmail.com>
Message-ID: <20131230232225.GA10594@tilt>

On Sun, Dec 29, 2013 at 11:53:19AM -0700, Evan Duffield wrote:
> Hello,
> 
> We?re a startup looking for 1 or 2 really good C++ programmer that is
> familiar with the bitcoin internals to help with a for-profit startup.
> 
> We will be able to provide more information about the project after signing
> a non-compete/non-disclosure agreement. Our coin will be one of the truly
> unique coins that are not just a clone of the original Bitcoin code. In
> short the project will be a merge-mined altcoin that will provide a very
> useful service to the whole crypto-coin ecosystem.

I would strongly suggest that if you have not done so already you hire
someone competent to do an analysis of whether or not your idea makes
sense at all; that you are using merge-mining is a red-flag because
without majority, or at least near-majority, hashing power an attacker
can 51% attack your altcoin at negligible cost by re-using existing
hashing power. If you are starting a timestamping service that may be an
exception, but how to turn a profit doing so is non-obvious.


I would offer that consulting myself, but it would likely be a conflict
of interest with my employers. I'd be happy to speak informally in
private, but am explicitly unwilling to agree to any
non-compete/non-disclosure terms.

-- 
'peter'[:-1]@petertodd.org
000000000000000f9102d27cfd61ea9e8bb324593593ca3ce6ba53153ff251b3
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 490 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131230/7a5971d9/attachment.sig>

From luke at dashjr.org  Tue Dec 31 01:14:05 2013
From: luke at dashjr.org (Luke-Jr)
Date: Tue, 31 Dec 2013 01:14:05 +0000
Subject: [Bitcoin-development] Looking for GREAT C++ developer for
	exciting opportunity in bitcoin space
In-Reply-To: <20131230232225.GA10594@tilt>
References: <CAMkFLsSwKEiEtV1OaAsGPiU8iAWbb77fDNJDmRwbgKnZ_kjG6Q@mail.gmail.com>
	<20131230232225.GA10594@tilt>
Message-ID: <201312310114.05600.luke@dashjr.org>

On Monday, December 30, 2013 11:22:25 PM Peter Todd wrote:
> that you are using merge-mining is a red-flag because without majority, or
> at least near-majority, hashing power an attacker can 51% attack your
> altcoin at negligible cost by re-using existing hashing power.

I strongly disagree on this isolated point. Using the same logic, Bitcoin is 
vulnerable to an attacker at negligible cost by re-using existing hashing 
power from mining Namecoin. Any non-scam altcoin is pretty safe using merged 
mining, since any would-be attacker is going to have it in their interests to 
invest in the altcoin instead of attacking it. It's only the scam ones that 
want to pump & dump with no improvements, that are really at risk here.

The rational decision for a non-scam altcoin, is to take advantage of merged 
mining to get as much security as possible. There are also some possible 
tricks to get the full security of the bitcoin miners even when not all 
participate in your altcoin (but this area probably needs some studying to get 
right).

Luke



From jeremy at taplink.co  Tue Dec 31 07:28:10 2013
From: jeremy at taplink.co (Jeremy Spilman)
Date: Mon, 30 Dec 2013 23:28:10 -0800
Subject: [Bitcoin-development] Merge mining
In-Reply-To: <201312310114.05600.luke@dashjr.org>
References: <CAMkFLsSwKEiEtV1OaAsGPiU8iAWbb77fDNJDmRwbgKnZ_kjG6Q@mail.gmail.com>
	<20131230232225.GA10594@tilt> <201312310114.05600.luke@dashjr.org>
Message-ID: <op.w8x4c8vbyldrnw@laptop-air.hsd1.ca.comcast.net>

Merge mining lets Bitcoin miners support or attack an alt-coin without any  
additional cost for their proof-of-work.

Since bitcoin miners have to install software to build and claim blocks in  
the alt-coin, the percentage of bitcoin hashing power reflected toward the  
alt-coin will follow some adoption curve based on convincing bitcoin  
miners to opt-in.

Depending on where you are on that adoption curve or 'participation rate',  
you need [a lot] less than 51% of of total Bitcoin hashing power in order  
to 51% attack the alt-coin.

But there's so much 'dry powder' out there (GPUs), I wonder if *not*  
supporting merge-mining is any better? At least the attacker has to do  
some unique PoW, so you hope it's costing them something. Relatively large  
amounts of hashing can definitely be deployed on target with zero startup  
cost, and perhaps very little runtime cost (botnets).

I think the absolute cost of the PoW is very likely *not* the determining  
factor in preventing a 51% attack on all but one or two blockchains  
currently in existence.

Do I understand correctly, the question here is mostly a matter a game  
theory?

On Mon, 30 Dec 2013 17:14:05 -0800, Luke-Jr <luke at dashjr.org> wrote:

> On Monday, December 30, 2013 11:22:25 PM Peter Todd wrote:
>> that you are using merge-mining is a red-flag because without majority,  
>> or
>> at least near-majority, hashing power an attacker can 51% attack your
>> altcoin at negligible cost by re-using existing hashing power.
>
> I strongly disagree on this isolated point. Using the same logic,  
> Bitcoin is
> vulnerable to an attacker at negligible cost by re-using existing hashing
> power from mining Namecoin. Any non-scam altcoin is pretty safe using  
> merged
> mining, since any would-be attacker is going to have it in their  
> interests to
> invest in the altcoin instead of attacking it. It's only the scam ones  
> that want to pump & dump with no improvements, that are really at risk  
> here.
>
> The rational decision for a non-scam altcoin, is to take advantage of  
> merged mining to get as much security as possible. There are also some  
> possible
> tricks to get the full security of the bitcoin miners even when not all
> participate in your altcoin (but this area probably needs some studying  
> to get right).
>
> Luke
>




From rob.golding at astutium.com  Tue Dec 31 07:38:26 2013
From: rob.golding at astutium.com (rob.golding at astutium.com)
Date: Tue, 31 Dec 2013 07:38:26 +0000
Subject: [Bitcoin-development] Merge mining
In-Reply-To: <op.w8x4c8vbyldrnw@laptop-air.hsd1.ca.comcast.net>
References: <CAMkFLsSwKEiEtV1OaAsGPiU8iAWbb77fDNJDmRwbgKnZ_kjG6Q@mail.gmail.com>
	<20131230232225.GA10594@tilt> <201312310114.05600.luke@dashjr.org>
	<op.w8x4c8vbyldrnw@laptop-air.hsd1.ca.comcast.net>
Message-ID: <9aaa913f73f45db41d94d93d02eed3fa@astutium.com>

> But there's so much 'dry powder' out there (GPUs), I wonder if *not*
> supporting merge-mining is any better? At least the attacker has to do
> some unique PoW, so you hope it's costing them something.

With lots of people having access to 100TH+ there's not really much 
'cost' to doing a 51% attack on an alt-coin beyond a short-term 
diversion away from 'profitable' mining.

At least by supporting merged mining, more miners are likely to 
'support' multiple coin types, thus making a 51% attack from an 
individual/group less straightforward.

>> The rational decision for a non-scam altcoin, is to take advantage of
>> merged mining to get as much security as possible.

Exactly.

Rob



From drak at zikula.org  Tue Dec 31 13:39:30 2013
From: drak at zikula.org (Drak)
Date: Tue, 31 Dec 2013 13:39:30 +0000
Subject: [Bitcoin-development] Dedicated server for bitcoin.org,
	your thoughts?
In-Reply-To: <20131212205106.GA4572@netbook.cypherspace.org>
References: <52A3C8A5.7010606@gmail.com>
	<1795f3067ba3fcdd0caf978cc59ff024.squirrel@fruiteater.riseup.net>
	<52A435EA.7090405@gmail.com> <201312081237.24473.luke@dashjr.org>
	<CANAnSg2OrmQAcZ+cZdtQeADicH3U29QOgYPfP1AQhOMP6+P1wg@mail.gmail.com>
	<CAAS2fgR0khyJxmz9c2Oc87hOFgiNuiPJuaeugGajdo_EcKEW9w@mail.gmail.com>
	<20131212205106.GA4572@netbook.cypherspace.org>
Message-ID: <CANAnSg3nPhrk2k=yDKf39AuBQnSuTWJbgANdMhGe=soiOy0NTw@mail.gmail.com>

Has anyone seen the talk at 30c3 on the current NSA capabilities?
https://www.youtube.com/watch?v=b0w36GAyZIA

Specifically they are able to "beat the speed of light" between you and a
website such that if you communicate with Bob, they can sent competing
packets that will arrive before Bob's packets. They have  realtime deep
packet insertion able to inject arbitrary data into an TCP streams and can
change file downloads **on the fly**. This can be done remotely.

Sourceforge do not have https downloads, so this is yet another reason to
move downloads to somewhere that does - like github.
The NSA has the ability, right now to change every download of bitcoin-qt,
on the fly and the only cure is encryption.

Revealed as part of the presentation is the fact that if the NSA has access
to these capabilities, then so do others and in fact one of the things
revealed yesterday was independently discovered already and published.

Same goes for the bitcoin.org site - why are we dragging our feet on
installing an SSL certificate and redirecting all http to https? While no
solution is perfect, it's a lot better than zero defense.

You can see the irony of disseminating the bitcoin crypto-currency client
 in the clear.

For anyone who has not seen the video. You will be shocked by what is
actually in the wild being used today. It goes way beyond anything
imaginable even in science fiction.

https://www.youtube.com/watch?v=b0w36GAyZIA

Drak
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131231/351419ac/attachment.html>

From gmaxwell at gmail.com  Tue Dec 31 13:48:06 2013
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Tue, 31 Dec 2013 05:48:06 -0800
Subject: [Bitcoin-development] Dedicated server for bitcoin.org,
	your thoughts?
In-Reply-To: <CANAnSg3nPhrk2k=yDKf39AuBQnSuTWJbgANdMhGe=soiOy0NTw@mail.gmail.com>
References: <52A3C8A5.7010606@gmail.com>
	<1795f3067ba3fcdd0caf978cc59ff024.squirrel@fruiteater.riseup.net>
	<52A435EA.7090405@gmail.com> <201312081237.24473.luke@dashjr.org>
	<CANAnSg2OrmQAcZ+cZdtQeADicH3U29QOgYPfP1AQhOMP6+P1wg@mail.gmail.com>
	<CAAS2fgR0khyJxmz9c2Oc87hOFgiNuiPJuaeugGajdo_EcKEW9w@mail.gmail.com>
	<20131212205106.GA4572@netbook.cypherspace.org>
	<CANAnSg3nPhrk2k=yDKf39AuBQnSuTWJbgANdMhGe=soiOy0NTw@mail.gmail.com>
Message-ID: <CAAS2fgTmWRMxYweu3sNn_X7grgjUqTQujM-DbZRxG_YMZnD=7g@mail.gmail.com>

On Tue, Dec 31, 2013 at 5:39 AM, Drak <drak at zikula.org> wrote:
> The NSA has the ability, right now to change every download of bitcoin-qt,
> on the fly and the only cure is encryption.

Please cut it out with the snake oil pedaling. This is really over the
top. You're invoking the NSA as the threat here? Okay. The NSA can
trivially compromise an HTTPS download site: even ignoring the CA
insecurity, and government run CAs certificate authorities issue CA
certs to random governments and corporations for dataloss prevention
purposes. Not to mention unparalleled access to exploits.

The downloads are protected by something far stronger than SSL
already, which might even have a chance against the NSA. Actual
signatures of the downloads with offline keys.

I'm all pro-SSL and all that, but you are? piece by piece? really
convincing me that it produces an entirely false sense of security
which is entirely unjustified.



From mike at plan99.net  Tue Dec 31 13:59:47 2013
From: mike at plan99.net (Mike Hearn)
Date: Tue, 31 Dec 2013 13:59:47 +0000
Subject: [Bitcoin-development] Dedicated server for bitcoin.org,
	your thoughts?
In-Reply-To: <CAAS2fgTmWRMxYweu3sNn_X7grgjUqTQujM-DbZRxG_YMZnD=7g@mail.gmail.com>
References: <52A3C8A5.7010606@gmail.com>
	<1795f3067ba3fcdd0caf978cc59ff024.squirrel@fruiteater.riseup.net>
	<52A435EA.7090405@gmail.com> <201312081237.24473.luke@dashjr.org>
	<CANAnSg2OrmQAcZ+cZdtQeADicH3U29QOgYPfP1AQhOMP6+P1wg@mail.gmail.com>
	<CAAS2fgR0khyJxmz9c2Oc87hOFgiNuiPJuaeugGajdo_EcKEW9w@mail.gmail.com>
	<20131212205106.GA4572@netbook.cypherspace.org>
	<CANAnSg3nPhrk2k=yDKf39AuBQnSuTWJbgANdMhGe=soiOy0NTw@mail.gmail.com>
	<CAAS2fgTmWRMxYweu3sNn_X7grgjUqTQujM-DbZRxG_YMZnD=7g@mail.gmail.com>
Message-ID: <CANEZrP2X_63qkuNuk0MvsLR9ewd7HR0mPVaD7bZSgWMTJ5-9FQ@mail.gmail.com>

Given that hardly anyone checks the signatures, it's fair to say downloads
aren't protected by anything at the moment. SSL for downloads can only
raise the bar, never lower it, and if the NSA want to kick off the process
of revoking some of the big CA's then I'm game (assuming anyone detects it
of course) :)

Anyway, nobody is dragging feet, the problem is right now we get what is
effectively a huge free subsidy from github and SourceForge for site
hosting. The cost is no SSL. So getting SSL would require that "we" pay for
it ourselves, but the primary method we have for funding public
goods/infrastructure (the Foundation) which is the subject of various
conspiracy theories. Jeremy has made a generous offer further up the
thread, the issue being I guess none of us know how much traffic we
actually get :( I remember suggesting that we whack Google Analytics or
some other statistics package on when the new website design was done and
that was rejected for similar reasons ("organisations are bad").

So we are in a position where we get a subsidy of large but unknown size
from various existing US corporations, but moving to different ones is
controversial, hence no progress :)



On Tue, Dec 31, 2013 at 1:48 PM, Gregory Maxwell <gmaxwell at gmail.com> wrote:

> On Tue, Dec 31, 2013 at 5:39 AM, Drak <drak at zikula.org> wrote:
> > The NSA has the ability, right now to change every download of
> bitcoin-qt,
> > on the fly and the only cure is encryption.
>
> Please cut it out with the snake oil pedaling. This is really over the
> top. You're invoking the NSA as the threat here? Okay. The NSA can
> trivially compromise an HTTPS download site: even ignoring the CA
> insecurity, and government run CAs certificate authorities issue CA
> certs to random governments and corporations for dataloss prevention
> purposes. Not to mention unparalleled access to exploits.
>
> The downloads are protected by something far stronger than SSL
> already, which might even have a chance against the NSA. Actual
> signatures of the downloads with offline keys.
>
> I'm all pro-SSL and all that, but you are? piece by piece? really
> convincing me that it produces an entirely false sense of security
> which is entirely unjustified.
>
>
> ------------------------------------------------------------------------------
> Rapidly troubleshoot problems before they affect your business. Most IT
> organizations don't have a clear picture of how application performance
> affects their revenue. With AppDynamics, you get 100% visibility into your
> Java,.NET, & PHP application. Start your 15-day FREE TRIAL of AppDynamics
> Pro!
> http://pubads.g.doubleclick.net/gampad/clk?id=84349831&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131231/459ec369/attachment.html>

From benjamin.l.cordes at gmail.com  Tue Dec 31 14:05:23 2013
From: benjamin.l.cordes at gmail.com (Benjamin Cordes)
Date: Tue, 31 Dec 2013 15:05:23 +0100
Subject: [Bitcoin-development] Dedicated server for bitcoin.org,
	your thoughts?
In-Reply-To: <CAAS2fgTmWRMxYweu3sNn_X7grgjUqTQujM-DbZRxG_YMZnD=7g@mail.gmail.com>
References: <52A3C8A5.7010606@gmail.com>
	<1795f3067ba3fcdd0caf978cc59ff024.squirrel@fruiteater.riseup.net>
	<52A435EA.7090405@gmail.com> <201312081237.24473.luke@dashjr.org>
	<CANAnSg2OrmQAcZ+cZdtQeADicH3U29QOgYPfP1AQhOMP6+P1wg@mail.gmail.com>
	<CAAS2fgR0khyJxmz9c2Oc87hOFgiNuiPJuaeugGajdo_EcKEW9w@mail.gmail.com>
	<20131212205106.GA4572@netbook.cypherspace.org>
	<CANAnSg3nPhrk2k=yDKf39AuBQnSuTWJbgANdMhGe=soiOy0NTw@mail.gmail.com>
	<CAAS2fgTmWRMxYweu3sNn_X7grgjUqTQujM-DbZRxG_YMZnD=7g@mail.gmail.com>
Message-ID: <CAOoPuRYO_Bi41b1VzcXbMeWWSbaXD3u1oooxM3mYrYkmWJLLKQ@mail.gmail.com>

Interesting. I think the original BitDNS discussion was more interesting
that what currently is happening with namecoin, see
https://bitcointalk.org/index.php?topic=1790.0

Satoshi said there: "1) IP records don't need to be in the chain, just do
registrar function not DNS.  And CA problem solved, neat."

Besides, ICANN is currently selling out the global public namespace - not
that anybody really cares about such measly topics as the ownership of
global namespaces. And so some guy on the Cayman Islands is now the largest
holder of TLD's.

On Tue, Dec 31, 2013 at 2:48 PM, Gregory Maxwell <gmaxwell at gmail.com> wrote:

> On Tue, Dec 31, 2013 at 5:39 AM, Drak <drak at zikula.org> wrote:
> > The NSA has the ability, right now to change every download of
> bitcoin-qt,
> > on the fly and the only cure is encryption.
>
> Please cut it out with the snake oil pedaling. This is really over the
> top. You're invoking the NSA as the threat here? Okay. The NSA can
> trivially compromise an HTTPS download site: even ignoring the CA
> insecurity, and government run CAs certificate authorities issue CA
> certs to random governments and corporations for dataloss prevention
> purposes. Not to mention unparalleled access to exploits.
>
> The downloads are protected by something far stronger than SSL
> already, which might even have a chance against the NSA. Actual
> signatures of the downloads with offline keys.
>
> I'm all pro-SSL and all that, but you are? piece by piece? really
> convincing me that it produces an entirely false sense of security
> which is entirely unjustified.
>
>
> ------------------------------------------------------------------------------
> Rapidly troubleshoot problems before they affect your business. Most IT
> organizations don't have a clear picture of how application performance
> affects their revenue. With AppDynamics, you get 100% visibility into your
> Java,.NET, & PHP application. Start your 15-day FREE TRIAL of AppDynamics
> Pro!
> http://pubads.g.doubleclick.net/gampad/clk?id=84349831&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131231/dea5bd70/attachment.html>

From gmaxwell at gmail.com  Tue Dec 31 14:18:45 2013
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Tue, 31 Dec 2013 06:18:45 -0800
Subject: [Bitcoin-development] Dedicated server for bitcoin.org,
	your thoughts?
In-Reply-To: <CANEZrP2X_63qkuNuk0MvsLR9ewd7HR0mPVaD7bZSgWMTJ5-9FQ@mail.gmail.com>
References: <52A3C8A5.7010606@gmail.com>
	<1795f3067ba3fcdd0caf978cc59ff024.squirrel@fruiteater.riseup.net>
	<52A435EA.7090405@gmail.com> <201312081237.24473.luke@dashjr.org>
	<CANAnSg2OrmQAcZ+cZdtQeADicH3U29QOgYPfP1AQhOMP6+P1wg@mail.gmail.com>
	<CAAS2fgR0khyJxmz9c2Oc87hOFgiNuiPJuaeugGajdo_EcKEW9w@mail.gmail.com>
	<20131212205106.GA4572@netbook.cypherspace.org>
	<CANAnSg3nPhrk2k=yDKf39AuBQnSuTWJbgANdMhGe=soiOy0NTw@mail.gmail.com>
	<CAAS2fgTmWRMxYweu3sNn_X7grgjUqTQujM-DbZRxG_YMZnD=7g@mail.gmail.com>
	<CANEZrP2X_63qkuNuk0MvsLR9ewd7HR0mPVaD7bZSgWMTJ5-9FQ@mail.gmail.com>
Message-ID: <CAAS2fgQmMZ6RYjbJ6ZfFO5+ZhZoR4d4yMf8CXLXKPmZt3-Je4Q@mail.gmail.com>

On Tue, Dec 31, 2013 at 5:59 AM, Mike Hearn <mike at plan99.net> wrote:
> but moving to different ones is
> controversial, hence no progress :)

The site was actually moved onto a dedicated server temporarily and it
melted down under the load. I wouldn't call that no progress.


Perhaps I wasn't clear on the point I was making Drak's threat model
is not improved in the slightest by SSL. It would be improved by
increasing the use of signature checking, e.g. by making it easier.
Flat out misinformation never improves security.



From mike at plan99.net  Tue Dec 31 14:23:55 2013
From: mike at plan99.net (Mike Hearn)
Date: Tue, 31 Dec 2013 14:23:55 +0000
Subject: [Bitcoin-development] Dedicated server for bitcoin.org,
	your thoughts?
In-Reply-To: <CAAS2fgQmMZ6RYjbJ6ZfFO5+ZhZoR4d4yMf8CXLXKPmZt3-Je4Q@mail.gmail.com>
References: <52A3C8A5.7010606@gmail.com>
	<1795f3067ba3fcdd0caf978cc59ff024.squirrel@fruiteater.riseup.net>
	<52A435EA.7090405@gmail.com> <201312081237.24473.luke@dashjr.org>
	<CANAnSg2OrmQAcZ+cZdtQeADicH3U29QOgYPfP1AQhOMP6+P1wg@mail.gmail.com>
	<CAAS2fgR0khyJxmz9c2Oc87hOFgiNuiPJuaeugGajdo_EcKEW9w@mail.gmail.com>
	<20131212205106.GA4572@netbook.cypherspace.org>
	<CANAnSg3nPhrk2k=yDKf39AuBQnSuTWJbgANdMhGe=soiOy0NTw@mail.gmail.com>
	<CAAS2fgTmWRMxYweu3sNn_X7grgjUqTQujM-DbZRxG_YMZnD=7g@mail.gmail.com>
	<CANEZrP2X_63qkuNuk0MvsLR9ewd7HR0mPVaD7bZSgWMTJ5-9FQ@mail.gmail.com>
	<CAAS2fgQmMZ6RYjbJ6ZfFO5+ZhZoR4d4yMf8CXLXKPmZt3-Je4Q@mail.gmail.com>
Message-ID: <CANEZrP1mdJNa7ADkUXTGDNKMSCROjGAVbMXZXxodxCz1LFDzZw@mail.gmail.com>

>
> The site was actually moved onto a dedicated server temporarily and it
> melted down under the load. I wouldn't call that no progress.
>

Oh, it did? When was that? I must have missed this excitement :)

Any idea how much load it had?

Perhaps I wasn't clear on the point I was making Drak's threat model
> is not improved in the slightest by SSL. It would be improved by
> increasing the use of signature checking, e.g. by making it easier.
>

Well, that depends. If you watch Applebaums talk he is pushing TLS pretty
hard, and saying that based on the access to the source docs some of their
MITM attacks can't beat TLS. It appears that they have the capability to do
bulk MITM and rewrite of downloads as Drak says but *not* when TLS is
present, that would force more targeted attacks. So to me that implies that
TLS does raise the bar and is worth doing.

However if we can't find a server that won't melt under the load, then
that'd be an issue. We could consider hosting downloads on AppEngine or
something else that can handle both high load and TLS.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131231/b669b88d/attachment.html>

From jeremy at taplink.co  Tue Dec 31 21:25:40 2013
From: jeremy at taplink.co (Jeremy Spilman)
Date: Tue, 31 Dec 2013 13:25:40 -0800
Subject: [Bitcoin-development] Dedicated server for bitcoin.org,
	your thoughts?
In-Reply-To: <CANEZrP1mdJNa7ADkUXTGDNKMSCROjGAVbMXZXxodxCz1LFDzZw@mail.gmail.com>
References: <52A3C8A5.7010606@gmail.com>
	<1795f3067ba3fcdd0caf978cc59ff024.squirrel@fruiteater.riseup.net>
	<52A435EA.7090405@gmail.com> <201312081237.24473.luke@dashjr.org>
	<CANAnSg2OrmQAcZ+cZdtQeADicH3U29QOgYPfP1AQhOMP6+P1wg@mail.gmail.com>
	<CAAS2fgR0khyJxmz9c2Oc87hOFgiNuiPJuaeugGajdo_EcKEW9w@mail.gmail.com>
	<20131212205106.GA4572@netbook.cypherspace.org>
	<CANAnSg3nPhrk2k=yDKf39AuBQnSuTWJbgANdMhGe=soiOy0NTw@mail.gmail.com>
	<CAAS2fgTmWRMxYweu3sNn_X7grgjUqTQujM-DbZRxG_YMZnD=7g@mail.gmail.com>
	<CANEZrP2X_63qkuNuk0MvsLR9ewd7HR0mPVaD7bZSgWMTJ5-9FQ@mail.gmail.com>
	<CAAS2fgQmMZ6RYjbJ6ZfFO5+ZhZoR4d4yMf8CXLXKPmZt3-Je4Q@mail.gmail.com>
	<CANEZrP1mdJNa7ADkUXTGDNKMSCROjGAVbMXZXxodxCz1LFDzZw@mail.gmail.com>
Message-ID: <op.w8y642nryldrnw@laptop-air.hsd1.ca.comcast.net>

I didn't know about the dedicated server meltdown, it wasn't any of my  
infra. Anyway, my previous offer still stands.

One less 'security theater' approach would be if we could provide  
forward-validation of updates using the blockchain. It's always going to  
be up to the user the first time they install the wallet to verify the  
provenance of the binaries/source. From that point forward, we could make  
it easier if the wallet could detect updates and prove they were valid.

This could be as simple as hard-coding a public key into the client and  
checking a signature on the new binaries. But it could also be more  
interesting...

For example, a well known address on the blockchain corresponds to  
multi-sig with keys controlled by developers (or whatever key policy the  
release team wants to impose). A spend from that address announces a new  
release, and includes the expected hash of the file.

You would probably need some way to handle the different release targets.  
A more rigorous approach could identify all the various releases in terms  
of a BIP32 xpubkey whose branches would correspond to the different  
release trains and platform builds. Spends from a node announce the  
release and the expected hash.

This provides zero benefit if the wallet software is already compromised,  
but I think this would allow trusted automatic update notification, and a  
trusted way to deliver the expected hashes. It also might resolve some of  
the consternation around when a release is truly "released", if that's  
really a problem.

I'm not sure how far along the slope you would want to go; 1) announcing  
updates in the UI, 2) providing a button the user could click to verify a  
binary matches its expected hash, 3) click to download and verify the  
upgrade matches the expected hash, 4) click to upgrade

Formalizing the release process around a set of privkeys (or split shares  
of keys) may raise its own set of questions.

For the download itself, I've heard the advocates of announcing  
availability on the blockchain leading to a BitTorrent magnet link, but I  
also understand objections to adding an entire BitTorrent stack into a  
wallet.

On Tue, 31 Dec 2013 06:23:55 -0800, Mike Hearn <mike at plan99.net> wrote:

>> The site was actually moved onto a dedicated server temporarily and it
>> melted down under the load. I wouldn't call that no progress.
>
> Oh, it did? When was that? I must have missed this excitement :)
>Any idea how much load it had?
>
>> Perhaps I wasn't clear on the point I was making Drak's threat model
>> is not improved in the slightest by SSL. It would be improved by
>> increasing the use of signature checking, e.g. by making it easier.
>
> Well, that depends. If you watch Applebaums talk he is pushing TLS  
> pretty hard, and saying that based on the access to the source docs some  
> of >their MITM attacks can't beat TLS. It appears that they have the  
> capability to do bulk MITM and rewrite of downloads as Drak says but  
> *not* when >TLS is present, that would force more targeted attacks. So  
> to me that implies that TLS does raise the bar and is worth doing.
>
> However if we can't find a server that won't melt under the load, then  
> that'd be an issue. We could consider hosting downloads on AppEngine or  
> >something else that can handle both high load and TLS.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131231/8348caad/attachment.html>

From bitcoin-list at bluematt.me  Tue Dec 31 21:33:54 2013
From: bitcoin-list at bluematt.me (Matt Corallo)
Date: Tue, 31 Dec 2013 13:33:54 -0800
Subject: [Bitcoin-development] Dedicated server for bitcoin.org,
	your thoughts?
In-Reply-To: <op.w8y642nryldrnw@laptop-air.hsd1.ca.comcast.net>
References: <52A3C8A5.7010606@gmail.com>
	<1795f3067ba3fcdd0caf978cc59ff024.squirrel@fruiteater.riseup.net>
	<52A435EA.7090405@gmail.com> <201312081237.24473.luke@dashjr.org>
	<CANAnSg2OrmQAcZ+cZdtQeADicH3U29QOgYPfP1AQhOMP6+P1wg@mail.gmail.com>
	<CAAS2fgR0khyJxmz9c2Oc87hOFgiNuiPJuaeugGajdo_EcKEW9w@mail.gmail.com>
	<20131212205106.GA4572@netbook.cypherspace.org>
	<CANAnSg3nPhrk2k=yDKf39AuBQnSuTWJbgANdMhGe=soiOy0NTw@mail.gmail.com>
	<CAAS2fgTmWRMxYweu3sNn_X7grgjUqTQujM-DbZRxG_YMZnD=7g@mail.gmail.com>
	<CANEZrP2X_63qkuNuk0MvsLR9ewd7HR0mPVaD7bZSgWMTJ5-9FQ@mail.gmail.com>
	<CAAS2fgQmMZ6RYjbJ6ZfFO5+ZhZoR4d4yMf8CXLXKPmZt3-Je4Q@mail.gmail.com>
	<CANEZrP1mdJNa7ADkUXTGDNKMSCROjGAVbMXZXxodxCz1LFDzZw@mail.gmail.com>
	<op.w8y642nryldrnw@laptop-air.hsd1.ca.comcast.net>
Message-ID: <4264e886-48de-40ac-921a-a60502595060@email.android.com>

We already have a wonderful system for secure updating - gitian-downloader. We just neither use it not bother making actual gitian releases so anyone can use it to verify signatures of downloads.

Jeremy Spilman <jeremy at taplink.co> wrote:
>I didn't know about the dedicated server meltdown, it wasn't any of my 
>
>infra. Anyway, my previous offer still stands.
>
>One less 'security theater' approach would be if we could provide  
>forward-validation of updates using the blockchain. It's always going
>to  
>be up to the user the first time they install the wallet to verify the 
>
>provenance of the binaries/source. From that point forward, we could
>make  
>it easier if the wallet could detect updates and prove they were valid.
>
>This could be as simple as hard-coding a public key into the client and
> 
>checking a signature on the new binaries. But it could also be more  
>interesting...
>
>For example, a well known address on the blockchain corresponds to  
>multi-sig with keys controlled by developers (or whatever key policy
>the  
>release team wants to impose). A spend from that address announces a
>new  
>release, and includes the expected hash of the file.
>
>You would probably need some way to handle the different release
>targets.  
>A more rigorous approach could identify all the various releases in
>terms  
>of a BIP32 xpubkey whose branches would correspond to the different  
>release trains and platform builds. Spends from a node announce the  
>release and the expected hash.
>
>This provides zero benefit if the wallet software is already
>compromised,  
>but I think this would allow trusted automatic update notification, and
>a  
>trusted way to deliver the expected hashes. It also might resolve some
>of  
>the consternation around when a release is truly "released", if that's 
>
>really a problem.
>
>I'm not sure how far along the slope you would want to go; 1)
>announcing  
>updates in the UI, 2) providing a button the user could click to verify
>a  
>binary matches its expected hash, 3) click to download and verify the  
>upgrade matches the expected hash, 4) click to upgrade
>
>Formalizing the release process around a set of privkeys (or split
>shares  
>of keys) may raise its own set of questions.
>
>For the download itself, I've heard the advocates of announcing  
>availability on the blockchain leading to a BitTorrent magnet link, but
>I  
>also understand objections to adding an entire BitTorrent stack into a 
>
>wallet.
>
>On Tue, 31 Dec 2013 06:23:55 -0800, Mike Hearn <mike at plan99.net> wrote:
>
>>> The site was actually moved onto a dedicated server temporarily and
>it
>>> melted down under the load. I wouldn't call that no progress.
>>
>> Oh, it did? When was that? I must have missed this excitement :)
>>Any idea how much load it had?
>>
>>> Perhaps I wasn't clear on the point I was making Drak's threat model
>>> is not improved in the slightest by SSL. It would be improved by
>>> increasing the use of signature checking, e.g. by making it easier.
>>
>> Well, that depends. If you watch Applebaums talk he is pushing TLS  
>> pretty hard, and saying that based on the access to the source docs
>some  
>> of >their MITM attacks can't beat TLS. It appears that they have the 
>
>> capability to do bulk MITM and rewrite of downloads as Drak says but 
>
>> *not* when >TLS is present, that would force more targeted attacks.
>So  
>> to me that implies that TLS does raise the bar and is worth doing.
>>
>> However if we can't find a server that won't melt under the load,
>then  
>> that'd be an issue. We could consider hosting downloads on AppEngine
>or  
>> >something else that can handle both high load and TLS.
>
>------------------------------------------------------------------------
>
>------------------------------------------------------------------------------
>Rapidly troubleshoot problems before they affect your business. Most IT
>
>organizations don't have a clear picture of how application performance
>
>affects their revenue. With AppDynamics, you get 100% visibility into
>your 
>Java,.NET, & PHP application. Start your 15-day FREE TRIAL of
>AppDynamics Pro!
>http://pubads.g.doubleclick.net/gampad/clk?id=84349831&iu=/4140/ostg.clktrk
>
>------------------------------------------------------------------------
>
>_______________________________________________
>Bitcoin-development mailing list
>Bitcoin-development at lists.sourceforge.net
>https://lists.sourceforge.net/lists/listinfo/bitcoin-development
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131231/eaa34c28/attachment.html>

