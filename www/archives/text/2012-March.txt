From support at pi.uk.com  Thu Mar  1 10:15:01 2012
From: support at pi.uk.com (Ben Reeves)
Date: Thu, 1 Mar 2012 10:15:01 +0000
Subject: [Bitcoin-development] Duplicate transactions vulnerability
In-Reply-To: <20120229234558.GA6573@vps7135.xlshosting.net>
References: <CAPg+sBhb+gYMwp1OJuCHYt5=BU63=YBWOFaLLthHBkN_U-scaA@mail.gmail.com>
	<CAPBPUnqgV_hHYwFoB_1qXMvEaE1pM0vm8=V=AKe2n-rPFzz+mQ@mail.gmail.com>
	<CABsx9T1YbFLcuCLbZZvSJGPy9k0PRgWttOp-KPUW+99XSYTkQQ@mail.gmail.com>
	<CAPBPUnp61tCr5yVa36OGoqmO83hOJitnWJDyW3SihXyxy_FbYg@mail.gmail.com>
	<20120229232029.GA6073@vps7135.xlshosting.net>
	<20120229234558.GA6573@vps7135.xlshosting.net>
Message-ID: <CAPBPUno7EaUeQHEb6jfR77k==p5_Q5Es8dGQiwmQW+DPSttDuA@mail.gmail.com>

Yes you are right. Any fix in DisconnectBlock() has the same potential issues.

I think the exchanges and major merchants need to be made aware that
they must also upgrade. Maybe bundle both BIP16 and BIP30 in 0.6 and
issue an advisory stating that this is a mandatory upgrade for
everyone.

It also might be prudent to have a blockchain repair script ready,
which checks the db for missing coinbase transactions and downloads
them from another peer or block explorer if necessary.

Thank You,
Ben Reeves
www.blockchain.info

On Wed, Feb 29, 2012 at 11:45 PM, Pieter Wuille <pieter.wuille at gmail.com> wrote:
> On Wed, Feb 29, 2012 at 11:00:42PM +0000, Ben Reeves wrote:
>> I'm not sure. What if they use a coinbase of a block that has already matured?
>
> Indeed; duplicate an old coinbase, fork chain without dupe, and spend the old coinbase.
> The 100-blocks maturity will not help against is.
>
> I'm not sure how you intend to fix DisconnectBlock() to prevent this in a backward-
> compatible way, though.
>
> --
> Pieter



From support at pi.uk.com  Thu Mar  1 13:09:02 2012
From: support at pi.uk.com (Ben Reeves)
Date: Thu, 1 Mar 2012 13:09:02 +0000
Subject: [Bitcoin-development] Duplicate transactions vulnerability
In-Reply-To: <CAPBPUno7EaUeQHEb6jfR77k==p5_Q5Es8dGQiwmQW+DPSttDuA@mail.gmail.com>
References: <CAPg+sBhb+gYMwp1OJuCHYt5=BU63=YBWOFaLLthHBkN_U-scaA@mail.gmail.com>
	<CAPBPUnqgV_hHYwFoB_1qXMvEaE1pM0vm8=V=AKe2n-rPFzz+mQ@mail.gmail.com>
	<CABsx9T1YbFLcuCLbZZvSJGPy9k0PRgWttOp-KPUW+99XSYTkQQ@mail.gmail.com>
	<CAPBPUnp61tCr5yVa36OGoqmO83hOJitnWJDyW3SihXyxy_FbYg@mail.gmail.com>
	<20120229232029.GA6073@vps7135.xlshosting.net>
	<20120229234558.GA6573@vps7135.xlshosting.net>
	<CAPBPUno7EaUeQHEb6jfR77k==p5_Q5Es8dGQiwmQW+DPSttDuA@mail.gmail.com>
Message-ID: <CAPBPUnpj=u53Nvvvu54e2X462gPshLQ5rUcPosxvoNAXp6uN8w@mail.gmail.com>

One more thing to add. The implementation in the reference patch fixes
the blockchain forking issue however by still allowing spent coinbases
to be disconnected patched clients are still vulnerable to blockchain
corruption. While not an immediate issue it would mean
LoadBlockIndex() would error on restart and could cause problems for
new clients during the initial blockchain download.

Is there a reason not to disallow duplicate coinbases entirely?

On Thu, Mar 1, 2012 at 10:15 AM, Ben Reeves <support at pi.uk.com> wrote:
> Yes you are right. Any fix in DisconnectBlock() has the same potential issues.
>
> I think the exchanges and major merchants need to be made aware that
> they must also upgrade. Maybe bundle both BIP16 and BIP30 in 0.6 and
> issue an advisory stating that this is a mandatory upgrade for
> everyone.
>
> It also might be prudent to have a blockchain repair script ready,
> which checks the db for missing coinbase transactions and downloads
> them from another peer or block explorer if necessary.
>
> Thank You,
> Ben Reeves
> www.blockchain.info
>
> On Wed, Feb 29, 2012 at 11:45 PM, Pieter Wuille <pieter.wuille at gmail.com> wrote:
>> On Wed, Feb 29, 2012 at 11:00:42PM +0000, Ben Reeves wrote:
>>> I'm not sure. What if they use a coinbase of a block that has already matured?
>>
>> Indeed; duplicate an old coinbase, fork chain without dupe, and spend the old coinbase.
>> The 100-blocks maturity will not help against is.
>>
>> I'm not sure how you intend to fix DisconnectBlock() to prevent this in a backward-
>> compatible way, though.
>>
>> --
>> Pieter



From gmaxwell at gmail.com  Thu Mar  1 14:27:53 2012
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Thu, 1 Mar 2012 09:27:53 -0500
Subject: [Bitcoin-development] Duplicate transactions vulnerability
In-Reply-To: <CAPBPUnpj=u53Nvvvu54e2X462gPshLQ5rUcPosxvoNAXp6uN8w@mail.gmail.com>
References: <CAPg+sBhb+gYMwp1OJuCHYt5=BU63=YBWOFaLLthHBkN_U-scaA@mail.gmail.com>
	<CAPBPUnqgV_hHYwFoB_1qXMvEaE1pM0vm8=V=AKe2n-rPFzz+mQ@mail.gmail.com>
	<CABsx9T1YbFLcuCLbZZvSJGPy9k0PRgWttOp-KPUW+99XSYTkQQ@mail.gmail.com>
	<CAPBPUnp61tCr5yVa36OGoqmO83hOJitnWJDyW3SihXyxy_FbYg@mail.gmail.com>
	<20120229232029.GA6073@vps7135.xlshosting.net>
	<20120229234558.GA6573@vps7135.xlshosting.net>
	<CAPBPUno7EaUeQHEb6jfR77k==p5_Q5Es8dGQiwmQW+DPSttDuA@mail.gmail.com>
	<CAPBPUnpj=u53Nvvvu54e2X462gPshLQ5rUcPosxvoNAXp6uN8w@mail.gmail.com>
Message-ID: <CAAS2fgS2NMcdpyomSE76O8EuHV8Zw7NuvSjBuk8S+BSKX5ry=A@mail.gmail.com>

On Thu, Mar 1, 2012 at 8:09 AM, Ben Reeves <support at pi.uk.com> wrote:
> One more thing to add. The implementation in the reference patch fixes
> the blockchain forking issue however by still allowing spent coinbases
> to be disconnected patched clients are still vulnerable to blockchain
> corruption. While not an immediate issue it would mean
> LoadBlockIndex() would error on restart and could cause problems for
> new clients during the initial blockchain download.

I am not following you here, can you explain what you're thinking?

> Is there a reason not to disallow duplicate coinbases entirely?

Because this would make it impossible for nodes to prune the vaules.
They'd all forever have to keep a set of all the coinbase hashes in
order to perform the test. The height-in-coinbase BIP will make
duplicates effectively impossible to create, which is a much more
clean behavior.



From pieter.wuille at gmail.com  Thu Mar  1 14:30:30 2012
From: pieter.wuille at gmail.com (Pieter Wuille)
Date: Thu, 1 Mar 2012 15:30:30 +0100
Subject: [Bitcoin-development] Duplicate transactions vulnerability
In-Reply-To: <CAPBPUnpj=u53Nvvvu54e2X462gPshLQ5rUcPosxvoNAXp6uN8w@mail.gmail.com>
References: <CAPg+sBhb+gYMwp1OJuCHYt5=BU63=YBWOFaLLthHBkN_U-scaA@mail.gmail.com>
	<CAPBPUnqgV_hHYwFoB_1qXMvEaE1pM0vm8=V=AKe2n-rPFzz+mQ@mail.gmail.com>
	<CABsx9T1YbFLcuCLbZZvSJGPy9k0PRgWttOp-KPUW+99XSYTkQQ@mail.gmail.com>
	<CAPBPUnp61tCr5yVa36OGoqmO83hOJitnWJDyW3SihXyxy_FbYg@mail.gmail.com>
	<20120229232029.GA6073@vps7135.xlshosting.net>
	<20120229234558.GA6573@vps7135.xlshosting.net>
	<CAPBPUno7EaUeQHEb6jfR77k==p5_Q5Es8dGQiwmQW+DPSttDuA@mail.gmail.com>
	<CAPBPUnpj=u53Nvvvu54e2X462gPshLQ5rUcPosxvoNAXp6uN8w@mail.gmail.com>
Message-ID: <20120301143029.GA18168@vps7135.xlshosting.net>

On Thu, Mar 01, 2012 at 01:09:02PM +0000, Ben Reeves wrote:
> One more thing to add. The implementation in the reference patch fixes
> the blockchain forking issue however by still allowing spent coinbases
> to be disconnected patched clients are still vulnerable to blockchain
> corruption. While not an immediate issue it would mean
> LoadBlockIndex() would error on restart and could cause problems for
> new clients during the initial blockchain download.

I don't understand this.

> Is there a reason not to disallow duplicate coinbases entirely?

Just disallowing duplicate coinbases is possible, but it requires keeping a
set of all coinbases transaction around until infinity. That's not really a problem,
but it can be avoided. One very reasonable proposed solution is adding the block
height to the coinbase. However, as coinbases are used for all kinds of things
already, this is harder to roll out network-wide. Hence, first this "emergency"
solution that already prevents (afaik) all practical attacks, and in a later step
forcing unique coinbases, so that transactions can be assumed to be unique
identifiable by their hash again.

-- 
Pieter



From support at pi.uk.com  Thu Mar  1 17:20:41 2012
From: support at pi.uk.com (Ben Reeves)
Date: Thu, 1 Mar 2012 17:20:41 +0000
Subject: [Bitcoin-development] Duplicate transactions vulnerability
In-Reply-To: <CAAS2fgS2NMcdpyomSE76O8EuHV8Zw7NuvSjBuk8S+BSKX5ry=A@mail.gmail.com>
References: <CAPg+sBhb+gYMwp1OJuCHYt5=BU63=YBWOFaLLthHBkN_U-scaA@mail.gmail.com>
	<CAPBPUnqgV_hHYwFoB_1qXMvEaE1pM0vm8=V=AKe2n-rPFzz+mQ@mail.gmail.com>
	<CABsx9T1YbFLcuCLbZZvSJGPy9k0PRgWttOp-KPUW+99XSYTkQQ@mail.gmail.com>
	<CAPBPUnp61tCr5yVa36OGoqmO83hOJitnWJDyW3SihXyxy_FbYg@mail.gmail.com>
	<20120229232029.GA6073@vps7135.xlshosting.net>
	<20120229234558.GA6573@vps7135.xlshosting.net>
	<CAPBPUno7EaUeQHEb6jfR77k==p5_Q5Es8dGQiwmQW+DPSttDuA@mail.gmail.com>
	<CAPBPUnpj=u53Nvvvu54e2X462gPshLQ5rUcPosxvoNAXp6uN8w@mail.gmail.com>
	<CAAS2fgS2NMcdpyomSE76O8EuHV8Zw7NuvSjBuk8S+BSKX5ry=A@mail.gmail.com>
Message-ID: <CAPBPUnr6aDJ-Bs-Sebeij=S_nNdGj+uFcsFcCXFT8v0JTyJyKQ@mail.gmail.com>

>I am not following you here, can you explain what you're thinking?

If I mine a duplicate coinbase of an old block (whether spent or not)
if that block is then invalidated DisconnectBlock() will erase both
the coinbase of the new block and of the old block. This leaves the
blockchain is in an inconsistent state because with the coinbase
missing the old block will no longer pass CheckBlock().

When affected clients are restarted LoadBlockIndex() will try and
verify all blocks in the main chain, failing at the block with the
missing coinbase.

1) If an attacker was to do this with an early block it would force
all affected clients to redownload the majority of the blockchain.
2) If the attacker was able to do this on a block after the March 1st
deadline (future block A). If they mined a fake copy of block A (block
B) with the same coinbase but a different hash clients who received
block B before block A will refuse to accept block A because of the
unspent duplicate coinbase in block B. The attacker can then fork the
chain at this point despite the real chain being longer.

I am just think out load here so I could be wrong, but maybe it would
be better to go for the full block height fix now?

On Thu, Mar 1, 2012 at 2:27 PM, Gregory Maxwell <gmaxwell at gmail.com> wrote:
> On Thu, Mar 1, 2012 at 8:09 AM, Ben Reeves <support at pi.uk.com> wrote:
>> One more thing to add. The implementation in the reference patch fixes
>> the blockchain forking issue however by still allowing spent coinbases
>> to be disconnected patched clients are still vulnerable to blockchain
>> corruption. While not an immediate issue it would mean
>> LoadBlockIndex() would error on restart and could cause problems for
>> new clients during the initial blockchain download.
>
> I am not following you here, can you explain what you're thinking?
>
>> Is there a reason not to disallow duplicate coinbases entirely?
>
> Because this would make it impossible for nodes to prune the vaules.
> They'd all forever have to keep a set of all the coinbase hashes in
> order to perform the test. The height-in-coinbase BIP will make
> duplicates effectively impossible to create, which is a much more
> clean behavior.



From pieter.wuille at gmail.com  Fri Mar  2 01:56:34 2012
From: pieter.wuille at gmail.com (Pieter Wuille)
Date: Fri, 2 Mar 2012 02:56:34 +0100
Subject: [Bitcoin-development] Duplicate transactions vulnerability
In-Reply-To: <CAPg+sBhb+gYMwp1OJuCHYt5=BU63=YBWOFaLLthHBkN_U-scaA@mail.gmail.com>
References: <CAPg+sBhb+gYMwp1OJuCHYt5=BU63=YBWOFaLLthHBkN_U-scaA@mail.gmail.com>
Message-ID: <CAPg+sBj_zOvNS91BeAzJ8bFWmyYxk1CUhA=Y2_J8vFt4-fruyg@mail.gmail.com>

On Tue, Feb 28, 2012 at 17:48, Pieter Wuille <pieter.wuille at gmail.com> wrote:
> I've written about it in BIP30[2]. There is a patch for the reference
> client, which has been tested and verified to make the attack
> impossible. The change is backward compatible in the same way BIP16
> is: if a supermajority of mining power implements it, old clients can
> continue to function without risk.

After some private discussion, Ben Reeves pointed out two potential
small weaknesses in the proposed patch, which seem viable to me.

First: disconnecting the same coinbase transaction twice would fail,
as EraseTxIndex will not find anything the second time. This is
extremely hard to pull off, as it requires reverting a chain of at
least 120 blocks long. Still, the fix is very easy imho: allow
EraseTxIndex to fail.

Second: assume the following order of events: block with coinbase A is
created, 120 blocks later, A:0 is spent in transaction B. Then, a dupe
of A is created, and another 120 blocks are waited. At this point, A:0
and B:0 are still spendable. Now a block is created with two
transactions: first C which spends B:0, followed by a dupe of B. This
dupe is accepted, as its former instance is completely spent now.
However, if this last block is disconnected again, B:0 is not
spendable anymore, causing a risk for chain split. Ben suggested
moving the check for dupes up, turning the new network rule into:

  Blocks are not allowed to contain transactions whose hash matches
that of an earlier transaction in the same chain, unless that
transaction was already completely spent before said block.

I've updated the patch, and will update the BIP soon.

What do you all think? Can we still move forward with deploying this?

-- 
Pieter



From zgenjix at yahoo.com  Fri Mar  2 18:51:41 2012
From: zgenjix at yahoo.com (Amir Taaki)
Date: Fri, 2 Mar 2012 10:51:41 -0800 (PST)
Subject: [Bitcoin-development] JSON-RPC is BIP territory or not?
Message-ID: <1330714301.3840.YahooMailNeo@web121006.mail.ne1.yahoo.com>

Hi,

I got sent this BIP:

https://en.bitcoin.it/wiki/BIP_DRAFT:_getmemorypool#JSON-RPC_Method:_getmemorypool


What is your opinion on this? Is it BIP related?

It is a implementation-specific non-bitcoin-protocol proposal. My understanding of BIPs is that
they apply across bitcoin implementations and largely focus on the most generic use-cases
(like the URIs) and the protocol. Things which affect all clients, and allow the system to function
as a united whole.

That BIPs especially focus on the protocol, and that something like this is outside the mandate
of the BIP process.

For instance, we could imagine a future scenario. Bitcoin-Qt is currently based off bitcoind's
codebase. However wumpus built the client in mind with an abstraction layer to enable multiple
backends (a good design). In our hypothetical situation, there are 3 different backend codebases
using?Bitcoin-Qt. I do not think a proposal to mandate a changing to Bitcoin-Qt's abstraction
layer or a change in the UI placement would be appropriate BIP material.

OTOH, many clients do need to make use of URIs and the BIP process is totally correct, as it
standardises a behaviour which is needed for interoperability of the network and community.

Thoughts?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120302/fede72ef/attachment.html>

From luke at dashjr.org  Fri Mar  2 19:14:05 2012
From: luke at dashjr.org (Luke-Jr)
Date: Fri, 2 Mar 2012 14:14:05 -0500
Subject: [Bitcoin-development] JSON-RPC is BIP territory or not?
In-Reply-To: <1330714301.3840.YahooMailNeo@web121006.mail.ne1.yahoo.com>
References: <1330714301.3840.YahooMailNeo@web121006.mail.ne1.yahoo.com>
Message-ID: <201203021414.07109.luke@dashjr.org>

On Friday, March 02, 2012 1:51:41 PM Amir Taaki wrote:
> It is a implementation-specific non-bitcoin-protocol proposal. My
> understanding of BIPs is that they apply across bitcoin implementations
> and largely focus on the most generic use-cases (like the URIs) and the
> protocol. Things which affect all clients, and allow the system to
> function as a united whole.

This isn't implementation-specific. If you read it, you should notice it is 
intentionally generic for multiple use-cases. Right now bitcoind supports 
getmemorypool for a few use cases, but this proposed BIP enables it to be 
utilized for many more. Specifically, Eligius and at least a few other pools 
wish to move toward a more decentralized method of pooled mining (similar to 
the proprietary p2pool protocol). Eligius already supports miners producing 
their own work with getmemorypool using this draft, and our Eloipool server is 
open source (AGPL-3) for others to adopt (I know of at least one other pool 
planning to do so). Other pools not using Eloipool also have expressed 
interest in this, so a standard is desirable.



From wbl at uchicago.edu  Fri Mar  2 19:57:27 2012
From: wbl at uchicago.edu (Watson Ladd)
Date: Fri, 2 Mar 2012 13:57:27 -0600
Subject: [Bitcoin-development] Fwd: Proposal for a new opcode
In-Reply-To: <CACsn0c=P1veYnmXe4E3qU0OC=Xr9Aw6Fy=6Zm0sUAaSBEDvpMA@mail.gmail.com>
References: <CACsn0c=P1veYnmXe4E3qU0OC=Xr9Aw6Fy=6Zm0sUAaSBEDvpMA@mail.gmail.com>
Message-ID: <CACsn0cne5An+SyKDf9w4o4Secn7C9wqqbG7ff0HB3Dvk-XxHRg@mail.gmail.com>

Dear all,
I am proposing a new opcode for the purposes of anonymous
transactions. This new opcode enables scripts to be given proof that
the receiver can carry out or has carried out a previous transaction.
I'm currently working on a paper that discusses using this opcode for
anonymous transactions.

Name: OP_CHECKEXPSIG
Stack before: <sig><pk><hash>
Stack after: T/F, where is true if sig is a ECDSA signature under pk
for the hash hash. (Hash is the hash of a message).
Uses: Preexisting digital cash techniques relied on keeping track of a
list of turned in notes to forbid double spending. Using
OP_CHECKEXPSIG we can instead pass the script that gives the nth note
value proof that the notes {1,...n-1} were turned in and are distinct.
This enables a coupling of the strong double spend protection of
Bitcoin with traditional digital cash's strong anonymity.

Sincerely,
Watson Ladd



From moon at justmoon.de  Sat Mar  3 13:44:45 2012
From: moon at justmoon.de (Stefan Thomas)
Date: Sat, 03 Mar 2012 14:44:45 +0100
Subject: [Bitcoin-development] JSON-RPC is BIP territory or not?
In-Reply-To: <1330714301.3840.YahooMailNeo@web121006.mail.ne1.yahoo.com>
References: <1330714301.3840.YahooMailNeo@web121006.mail.ne1.yahoo.com>
Message-ID: <4F52204D.1040504@justmoon.de>

Since several independent clients (I know at least libcoin 
<https://github.com/ceptacle/libcoin/blob/master/src/coinHTTP/RequestHandler.cpp> 
and BitcoinJS 
<https://github.com/bitcoinjs/bitcoinjs-server/tree/master/lib/rpc>) aim 
to implement JSON-RPC APIs which are either a superset of the original 
client's or have at least some compatible functions, I think you can 
make a case for including JSON-RPC API calls within the domain of BIPs.

In this instance the BIP aims to create a common protocol between 
different clients, miners, mining proxies and pools. That's a lot of 
software, so standardization definitely seems like a good idea and I 
can't think of a reason not to use the BIP process.

I have some comments on the content of the BIP, but since this thread is 
more of a meta-discussion I'll wait until the BIP is officially proposed.


On 3/2/2012 7:51 PM, Amir Taaki wrote:
> Hi,
>
> I got sent this BIP:
>
> https://en.bitcoin.it/wiki/BIP_DRAFT:_getmemorypool#JSON-RPC_Method:_getmemorypool
>
> What is your opinion on this? Is it BIP related?
>
> It is a implementation-specific non-bitcoin-protocol proposal. My 
> understanding of BIPs is that
> they apply across bitcoin implementations and largely focus on the 
> most generic use-cases
> (like the URIs) and the protocol. Things which affect all clients, and 
> allow the system to function
> as a united whole.
>
> That BIPs especially focus on the protocol, and that something like 
> this is outside the mandate
> of the BIP process.
>
> For instance, we could imagine a future scenario. Bitcoin-Qt is 
> currently based off bitcoind's
> codebase. However wumpus built the client in mind with an abstraction 
> layer to enable multiple
> backends (a good design). In our hypothetical situation, there are 3 
> different backend codebases
> using Bitcoin-Qt. I do not think a proposal to mandate a changing to 
> Bitcoin-Qt's abstraction
> layer or a change in the UI placement would be appropriate BIP material.
>
> OTOH, many clients do need to make use of URIs and the BIP process is 
> totally correct, as it
> standardises a behaviour which is needed for interoperability of the 
> network and community.
>
> Thoughts?
>
>
> ------------------------------------------------------------------------------
> Virtualization&  Cloud Management Using Capacity Planning
> Cloud computing makes use of virtualization - but cloud computing
> also focuses on allowing computing to be delivered as a service.
> http://www.accelacomm.com/jaw/sfnl/114/51521223/
>
>
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120303/f86175ef/attachment.html>

From luke at dashjr.org  Sat Mar  3 13:49:03 2012
From: luke at dashjr.org (Luke-Jr)
Date: Sat, 3 Mar 2012 08:49:03 -0500
Subject: [Bitcoin-development] JSON-RPC is BIP territory or not?
In-Reply-To: <4F52204D.1040504@justmoon.de>
References: <1330714301.3840.YahooMailNeo@web121006.mail.ne1.yahoo.com>
	<4F52204D.1040504@justmoon.de>
Message-ID: <201203030849.05029.luke@dashjr.org>

On Saturday, March 03, 2012 8:44:45 AM Stefan Thomas wrote:
> I have some comments on the content of the BIP, but since this thread is
> more of a meta-discussion I'll wait until the BIP is officially proposed.

Please do comment on the content, in the original thread if you prefer:

Message-Id: <201202281706.22650.luke at dashjr.org>
Subject: [Bitcoin-development] getmemorypool BIP process
Date: Tue, 28 Feb 2012 17:06:20 -0500



From moon at justmoon.de  Sat Mar  3 14:23:08 2012
From: moon at justmoon.de (Stefan Thomas)
Date: Sat, 03 Mar 2012 15:23:08 +0100
Subject: [Bitcoin-development] getmemorypool BIP process
In-Reply-To: <201202281706.22650.luke@dashjr.org>
References: <201202281706.22650.luke@dashjr.org>
Message-ID: <4F52294C.8080409@justmoon.de>

 From what I understand the BIP uses a polling model, e.g. a miner would 
use getmemorypool to request new work from a pool in intervals. Would it 
make sense to specify a version of the API supporting long polling?

For BitcoinJS specifically, since we also support JSON-RPC over TCP, I'd 
even be interested in a genuine "push" API. Something like C->S 
"listenmemorypool", S->C "updatememorypool" (continually).

On 2/28/2012 11:06 PM, Luke-Jr wrote:
> Please review and comment/critique:
>      https://en.bitcoin.it/wiki/BIP_DRAFT:_getmemorypool
>
> ------------------------------------------------------------------------------
> Keep Your Developer Skills Current with LearnDevNow!
> The most comprehensive online learning library for Microsoft developers
> is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3, MVC3,
> Metro Style Apps, more. Free future releases when you subscribe now!
> http://p.sf.net/sfu/learndevnow-d2d
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>




From luke at dashjr.org  Sat Mar  3 15:00:27 2012
From: luke at dashjr.org (Luke-Jr)
Date: Sat, 3 Mar 2012 10:00:27 -0500
Subject: [Bitcoin-development] getmemorypool BIP process
In-Reply-To: <4F52294C.8080409@justmoon.de>
References: <201202281706.22650.luke@dashjr.org> <4F52294C.8080409@justmoon.de>
Message-ID: <201203031000.28760.luke@dashjr.org>

On Saturday, March 03, 2012 9:23:08 AM Stefan Thomas wrote:
>  From what I understand the BIP uses a polling model, e.g. a miner would
> use getmemorypool to request new work from a pool in intervals. Would it
> make sense to specify a version of the API supporting long polling?

You mean explicitly mention the getwork longpoll protocol as part of the 
getmemorypool BIP? Probably a good idea.

> For BitcoinJS specifically, since we also support JSON-RPC over TCP, I'd
> even be interested in a genuine "push" API. Something like C->S
> "listenmemorypool", S->C "updatememorypool" (continually).

HTTP and JSON-RPC are a client-server model; there is no way for the server to 
make calls to the client. It's not practical to expect clients to run their 
own JSON-RPC server - many cannot listen on WAN ports at all.



From luke at dashjr.org  Sat Mar  3 15:44:15 2012
From: luke at dashjr.org (Luke-Jr)
Date: Sat, 3 Mar 2012 10:44:15 -0500
Subject: [Bitcoin-development] getmemorypool BIP process
Message-ID: <201203031044.17005.luke@dashjr.org>

On Saturday, March 03, 2012 10:05:58 AM Gavin Andresen wrote:
> > HTTP and JSON-RPC are a client-server model; there is no way for the
> > server to make calls to the client. It's not practical to expect clients
> > to run their own JSON-RPC server - many cannot listen on WAN ports at
> > all.
> 
> You're doing that thing where either you say something before you've
> done adequate research, or you're being needlessly pedantic; I just
> copied and pasted this from section 2.1 of the JSON-RPC spec:

I wasn't aware anyone was considering JSON-RPC over anything other than HTTP.

I've updated the draft to include long polling, and remove some assumptions of 
using HTTP for transport.



From pieter.wuille at gmail.com  Sat Mar  3 16:41:03 2012
From: pieter.wuille at gmail.com (Pieter Wuille)
Date: Sat, 3 Mar 2012 17:41:03 +0100
Subject: [Bitcoin-development] Duplicate transactions vulnerability
In-Reply-To: <CAPg+sBhb+gYMwp1OJuCHYt5=BU63=YBWOFaLLthHBkN_U-scaA@mail.gmail.com>
References: <CAPg+sBhb+gYMwp1OJuCHYt5=BU63=YBWOFaLLthHBkN_U-scaA@mail.gmail.com>
Message-ID: <CAPg+sBhmGHnMResVxPDZdfpmWTb9uqD0RrQD7oSXBQq7oHpm8g@mail.gmail.com>

On Tue, Feb 28, 2012 at 17:48, Pieter Wuille <pieter.wuille at gmail.com> wrote:
> Hello all,
>
> I've written about it in BIP30[2]. There is a patch for the reference
> client, which has been tested and verified to make the attack
> impossible. The change is backward compatible in the same way BIP16
> is: if a supermajority of mining power implements it, old clients can
> continue to function without risk.

After getting responses from Deepbit, bitcoin.cz (slush), MtRed, Bitlc
and BTCmine, it looks like march 15 is a reasonable deployment date
for the security update described in BIP 30.

I have created patches for:
* git master: https://github.com/sipa/bitcoin/tree/nooverwritetx
* v0.4.0: https://github.com/sipa/bitcoin/tree/nooverwritetx_v0.4.0
* v0.3.24: https://github.com/sipa/bitcoin/tree/nooverwritetx_v0.3.24
* v0.3.24+vinced:
https://github.com/sipa/bitcoin/tree/nooverwritetx_v0.3.24+vinced
* v0.3.19: https://github.com/sipa/bitcoin/tree/nooverwritetx_v0.3.19

I've asked pool operators to upgrade, and confirm when they have done
so. If you are a miner or pool operator, and have the ability to
upgrade, please do so as well.

Thanks,

-- 
Pieter



From gronager at mac.com  Sat Mar  3 17:08:57 2012
From: gronager at mac.com (=?iso-8859-1?Q?Michael_Gr=F8nager?=)
Date: Sat, 3 Mar 2012 18:08:57 +0100
Subject: [Bitcoin-development] getmemorypool BIP process
In-Reply-To: <201203031000.28760.luke@dashjr.org>
References: <201202281706.22650.luke@dashjr.org> <4F52294C.8080409@justmoon.de>
	<201203031000.28760.luke@dashjr.org>
Message-ID: <345337E5-9645-40B7-9A77-F65DD1694CEA@mac.com>

> 
> HTTP and JSON-RPC are a client-server model; there is no way for the server to 
> make calls to the client. It's not practical to expect clients to run their 
> own JSON-RPC server - many cannot listen on WAN ports at all.

Well, I think what Stefan had in mind was http keep-alive combined with an event system. So similar to the way a web chat application work, just for json-rpc. BitcoinJS already uses this for realtime updating a webwallet. Libcoin is also prepared for this with a quite advanced, non-blocking, http server so I second Stefan that an update function could indeed be of relevance.

Btw - question to Stefan as the JavaScript guru - what do you consider the standard/defacto-standard/right/best-practice way of doing S->C json-rpc, what (javascript) library do you use for this?

Cheers,

Michael


> 
> ------------------------------------------------------------------------------
> Virtualization & Cloud Management Using Capacity Planning
> Cloud computing makes use of virtualization - but cloud computing 
> also focuses on allowing computing to be delivered as a service.
> http://www.accelacomm.com/jaw/sfnl/114/51521223/
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development




From gavinandresen at gmail.com  Sat Mar  3 17:55:02 2012
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Sat, 3 Mar 2012 12:55:02 -0500
Subject: [Bitcoin-development] Fwd: Proposal for a new opcode
In-Reply-To: <CACsn0cne5An+SyKDf9w4o4Secn7C9wqqbG7ff0HB3Dvk-XxHRg@mail.gmail.com>
References: <CACsn0c=P1veYnmXe4E3qU0OC=Xr9Aw6Fy=6Zm0sUAaSBEDvpMA@mail.gmail.com>
	<CACsn0cne5An+SyKDf9w4o4Secn7C9wqqbG7ff0HB3Dvk-XxHRg@mail.gmail.com>
Message-ID: <CABsx9T3rNtTAhi+QKibuxpW=tMzdfvTRPLb_3PoA7MY0QVAeaQ@mail.gmail.com>

On Fri, Mar 2, 2012 at 2:57 PM, Watson Ladd <wbl at uchicago.edu> wrote:
> Dear all,
> I am proposing a new opcode for the purposes of anonymous
> transactions.

That's very exciting!  I'm eager to read the paper for all of the
details, and working out what else would need to be done besides a new
opcode to enable strong anonymity (at the very least, I assume we'll
need one or more new 'standard' transaction types that clients
understand).

-- 
--
Gavin Andresen



From moon at justmoon.de  Sun Mar  4 00:18:09 2012
From: moon at justmoon.de (Stefan Thomas)
Date: Sun, 04 Mar 2012 01:18:09 +0100
Subject: [Bitcoin-development] getmemorypool BIP process
In-Reply-To: <345337E5-9645-40B7-9A77-F65DD1694CEA@mac.com>
References: <201202281706.22650.luke@dashjr.org> <4F52294C.8080409@justmoon.de>
	<201203031000.28760.luke@dashjr.org>
	<345337E5-9645-40B7-9A77-F65DD1694CEA@mac.com>
Message-ID: <4F52B4C1.60604@justmoon.de>


> Btw - question to Stefan as the JavaScript guru - what do you consider the standard/defacto-standard/right/best-practice way of doing S->C json-rpc, what (javascript) library do you use for this?

As for an explicitly standard way, there is none. The JSON-RPC 1.0 spec 
<http://json-rpc.org/wiki/specification> says "The specifications do not 
require a certain transport protocol. The use of TCP/IP socket streams 
is encouraged. The serialized request and response objects are sent to 
the peers through the byte streams. " The JSON-RPC 2.0 spec 
<http://jsonrpc.org/specification> goes out of its way to say "It is 
transport agnostic in that the concepts can be used within the same 
process, over sockets, over http, or in many various message passing 
environments."

The de-facto standard for bidirectional JSON-RPC is plain TCP sockets. 
BitcoinJS currently implements this - we detect whether an incoming 
connection is HTTP or raw JSON-RPC based on the first character. (HTTP 
must start with an uppercase letter, raw JSON-RPC must start with an 
opening curly bracket.)

There are two things to watch out for with JSON-RPC over plain TCP:

1. Plain TCP sockets (unlike HTTP) have no standardized authentication 
mechanism, so I added an extra RPC call auth("username", "password").

2. The TCP packets may or may not correspond to JSON-RPC messages. You 
can either use a streaming JSON parser (yajl in ANSI C, Jackson in Java, 
etc.), or you can just count (non-string-literal) curly braces to detect 
when a complete message has arrived.

Many JSON-RPC libraries come with TCP socket support out of the box: 
http://json-rpc.org/wiki/implementations

We're planning to add more features to our JSON-RPC API in the future, 
such as:

- JSON-RPC over TLS sockets
- Challenge-response authentication
- TLS client handshake (certificate authentication)

As for HTTP Keep-Alive: It works, but I don't think it's very widely 
supported among client libraries and HTTP isn't really made for this 
type of thing, so my gut instinct would be to avoid it. That said, it 
doesn't hurt to offer the option.

On 3/3/2012 6:08 PM, Michael Gr?nager wrote:
>> HTTP and JSON-RPC are a client-server model; there is no way for the server to
>> make calls to the client. It's not practical to expect clients to run their
>> own JSON-RPC server - many cannot listen on WAN ports at all.
> Well, I think what Stefan had in mind was http keep-alive combined with an event system. So similar to the way a web chat application work, just for json-rpc. BitcoinJS already uses this for realtime updating a webwallet. Libcoin is also prepared for this with a quite advanced, non-blocking, http server so I second Stefan that an update function could indeed be of relevance.
>
> Btw - question to Stefan as the JavaScript guru - what do you consider the standard/defacto-standard/right/best-practice way of doing S->C json-rpc, what (javascript) library do you use for this?
>
> Cheers,
>
> Michael
>
>
>> ------------------------------------------------------------------------------
>> Virtualization&  Cloud Management Using Capacity Planning
>> Cloud computing makes use of virtualization - but cloud computing
>> also focuses on allowing computing to be delivered as a service.
>> http://www.accelacomm.com/jaw/sfnl/114/51521223/
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
> ------------------------------------------------------------------------------
> Virtualization&  Cloud Management Using Capacity Planning
> Cloud computing makes use of virtualization - but cloud computing
> also focuses on allowing computing to be delivered as a service.
> http://www.accelacomm.com/jaw/sfnl/114/51521223/
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120304/72c6808b/attachment.html>

From moon at justmoon.de  Sun Mar  4 00:18:17 2012
From: moon at justmoon.de (Stefan Thomas)
Date: Sun, 04 Mar 2012 01:18:17 +0100
Subject: [Bitcoin-development] getmemorypool BIP process
In-Reply-To: <201203031044.17005.luke@dashjr.org>
References: <201203031044.17005.luke@dashjr.org>
Message-ID: <4F52B4C9.3060900@justmoon.de>

> I've updated the draft to include long polling, and remove some assumptions of
> using HTTP for transport.

Looks good to me.

On 3/3/2012 4:44 PM, Luke-Jr wrote:
> On Saturday, March 03, 2012 10:05:58 AM Gavin Andresen wrote:
>>> HTTP and JSON-RPC are a client-server model; there is no way for the
>>> server to make calls to the client. It's not practical to expect clients
>>> to run their own JSON-RPC server - many cannot listen on WAN ports at
>>> all.
>> You're doing that thing where either you say something before you've
>> done adequate research, or you're being needlessly pedantic; I just
>> copied and pasted this from section 2.1 of the JSON-RPC spec:
> I wasn't aware anyone was considering JSON-RPC over anything other than HTTP.
>
> I've updated the draft to include long polling, and remove some assumptions of
> using HTTP for transport.
>
> ------------------------------------------------------------------------------
> Virtualization&  Cloud Management Using Capacity Planning
> Cloud computing makes use of virtualization - but cloud computing
> also focuses on allowing computing to be delivered as a service.
> http://www.accelacomm.com/jaw/sfnl/114/51521223/
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>




From operator at bitminter.com  Sat Mar  3 23:51:34 2012
From: operator at bitminter.com (Geir Harald Hansen)
Date: Sun, 04 Mar 2012 00:51:34 +0100
Subject: [Bitcoin-development] getmemorypool BIP process
In-Reply-To: <201202281706.22650.luke@dashjr.org>
References: <201202281706.22650.luke@dashjr.org>
Message-ID: <4F52AE86.2060102@bitminter.com>

On 28.02.2012 23:06, Luke-Jr wrote:
> Please review and comment/critique:
>     https://en.bitcoin.it/wiki/BIP_DRAFT:_getmemorypool

Looking forward to implementing this in my pool backend and miner.

A few comments:

"transactions 	add or remove transactions (both of the above; default if
"transactions" omitted) "

In the above, you may want to specify that the "transactions" referred
to here is the one in the first table (JSON-RPC response object) and not
the mutations. For a moment I thought free tx editing was the default.

Long polling as currently implemented in pools has a race condition.
Does the miner reconnect first or does another block change happen
first? "Double" block changes are common with merged mining and I'm
doing all sorts of tricks in my pool backend to reduce this problem.

How about another entry "longpollid" in long poll responses. The last
seen longpollid should be included by the client in future long poll
requests. This enables the server to see if the client has missed any
block changes. The ID could perhaps be submitted in an HTTP header
(X-LongPollID?) if we wish to keep the JSON-RPC params empty, or params
could hold an object with a key "longpollid". Could be a string or
number, like "workid".

Another useful value in the getmemorypool response would be "height", so
the miner can include the correct height in the coinbase. I would like
that in bitcoind as well. One JSON-RPC call instead of two, and no race
condition between getmemorypool and getblocknumber.

It should be explained how target vs. fulltarget works.

Perhaps some things should be optional for a client to implement? I
think "noncerange" is of limited use and there's a good chance of
getting the endianness wrong.

Regards,
Geir Harald Hansen



From luke at dashjr.org  Sun Mar  4 01:04:29 2012
From: luke at dashjr.org (Luke-Jr)
Date: Sat, 3 Mar 2012 20:04:29 -0500
Subject: [Bitcoin-development] getmemorypool BIP process
In-Reply-To: <4F52AE86.2060102@bitminter.com>
References: <201202281706.22650.luke@dashjr.org>
	<4F52AE86.2060102@bitminter.com>
Message-ID: <201203032004.31048.luke@dashjr.org>

On Saturday, March 03, 2012 6:51:34 PM Geir Harald Hansen wrote:
> Long polling as currently implemented in pools has a race condition.
> Does the miner reconnect first or does another block change happen
> first? "Double" block changes are common with merged mining and I'm
> doing all sorts of tricks in my pool backend to reduce this problem.

How would you suggest addressing this? I presume if a share solves blocks on 
multiple chains, you just longpoll once when that's successful?

> How about another entry "longpollid" in long poll responses. The last
> seen longpollid should be included by the client in future long poll
> requests. This enables the server to see if the client has missed any
> block changes. The ID could perhaps be submitted in an HTTP header
> (X-LongPollID?) if we wish to keep the JSON-RPC params empty, or params
> could hold an object with a key "longpollid". Could be a string or
> number, like "workid".

Hmm, the problem is that adding any parameters to getmemorypool itself breaks 
compatibility with bitcoind 0.5, and using HTTP headers makes it HTTP-specific 
again. Any ideas?

> Another useful value in the getmemorypool response would be "height", so
> the miner can include the correct height in the coinbase. I would like
> that in bitcoind as well. One JSON-RPC call instead of two, and no race
> condition between getmemorypool and getblocknumber.

Good catch. Should this be required (since it might be necessary for future 
Bitcoin blocks), or just "should" for compatibility?

> It should be explained how target vs. fulltarget works.

What is unclear about this?

> Perhaps some things should be optional for a client to implement?

Doing this safely needs some way for clients to communicate capabilities to 
the server, which has the problem of passing parameters to getmemorypool.

> I think "noncerange" is of limited use and there's a good chance of getting
> the endianness wrong.

There is no mining hardware to date that exhausts even half the nonce space, 
so I'd really prefer to see this as a required feature on the miner side. On 
the other hand, it's merely an extension for getwork, so I can see the problem 
so long as we're using getwork proxies.

Luke



From operator at bitminter.com  Sun Mar  4 17:49:00 2012
From: operator at bitminter.com (Geir Harald Hansen)
Date: Sun, 04 Mar 2012 18:49:00 +0100
Subject: [Bitcoin-development] getmemorypool BIP process
In-Reply-To: <201203032004.31048.luke@dashjr.org>
References: <201202281706.22650.luke@dashjr.org>
	<4F52AE86.2060102@bitminter.com> <201203032004.31048.luke@dashjr.org>
Message-ID: <4F53AB0C.5010008@bitminter.com>

On 04.03.2012 02:04, Luke-Jr wrote:
> On Saturday, March 03, 2012 6:51:34 PM Geir Harald Hansen wrote:
>> Long polling as currently implemented in pools has a race condition.
>> Does the miner reconnect first or does another block change happen
>> first? "Double" block changes are common with merged mining and I'm
>> doing all sorts of tricks in my pool backend to reduce this problem.
> 
> How would you suggest addressing this? I presume if a share solves blocks on 
> multiple chains, you just longpoll once when that's successful?

If the client doesn't tell you which block change it saw last, you can't
avoid this problem completely.

>> How about another entry "longpollid" in long poll responses. The last
>> seen longpollid should be included by the client in future long poll
>> requests. This enables the server to see if the client has missed any
>> block changes. The ID could perhaps be submitted in an HTTP header
>> (X-LongPollID?) if we wish to keep the JSON-RPC params empty, or params
>> could hold an object with a key "longpollid". Could be a string or
>> number, like "workid".
> 
> Hmm, the problem is that adding any parameters to getmemorypool itself breaks 
> compatibility with bitcoind 0.5, and using HTTP headers makes it HTTP-specific 
> again. Any ideas?

I think long polling and reconnecting to LP is an HTTP-specific problem
anyway? So it may be best to go with an HTTP header. See below for an
idea for a capabilities reporting system, though, which would allow
putting this data into JSON.

>> Another useful value in the getmemorypool response would be "height", so
>> the miner can include the correct height in the coinbase. I would like
>> that in bitcoind as well. One JSON-RPC call instead of two, and no race
>> condition between getmemorypool and getblocknumber.
> 
> Good catch. Should this be required (since it might be necessary for future 
> Bitcoin blocks), or just "should" for compatibility?

I think "should" makes sense.

>> It should be explained how target vs. fulltarget works.
> 
> What is unclear about this?

Reading through it again it is mostly clear except for one thing, how to
submit "share/merkle" style. It doesn't say exactly how to submit this data.

It says merkle tree, but a merkle branch should suffice. Also, I believe
the coinbase must always be the first transaction of a block? So we
won't need the transaction's index in the merkle tree (it's always index
zero). This would then be just an array of sha256 hashes making up the
merkle branch for the coinbase.

I'd prefer if block header, coinbase tx and merkle branch were submitted
in 3 pieces. When merged mining and submitting a block generating proof
to the aux backend you put an auxiliary proof of work between the block
header and transactions. So the header and transactions are not
necessarily adjacent. Also, there's no merkle branch in a regular
bitcoin block.

>> Perhaps some things should be optional for a client to implement?
> 
> Doing this safely needs some way for clients to communicate capabilities to 
> the server, which has the problem of passing parameters to getmemorypool.

Let's add an optional "servercapabilities" key on the server side, the
value being a space-delimited list of what's supported by the server. If
that list contains "clientcapabilities" then the client may, instead of
sending an empty request, send an object where one of the keys is
"clientcapabilities", and the value is a space-delimited list of extensions.

Those names are a bit long, maybe "caps" is better.

Ok, this is not entirely clean. For the first request the client won't
know what the server supports. For subsequent requests I guess always
assume the last caps the server reported.

>> I think "noncerange" is of limited use and there's a good chance of getting
>> the endianness wrong.
> 
> There is no mining hardware to date that exhausts even half the nonce space, 
> so I'd really prefer to see this as a required feature on the miner side. On 
> the other hand, it's merely an extension for getwork, so I can see the problem 
> so long as we're using getwork proxies.

Yes, you can end up getting half a nonce range from an upstream server,
and not being able to make use of it because your downstream clients
don't support it.

A single GPU can make full use of the noncerange if you allow the
timestamp to slip a few seconds into the past. I believe most miners do
that today.

Also worth including are the "hostlist" and "switchto" getwork
extensions. I think those can fit right into the JSON response, to keep
with being transport-agnostic, but otherwise look like they do for getwork.

Regards,
Geir H. Hansen



From gronager at mac.com  Mon Mar  5 14:14:07 2012
From: gronager at mac.com (=?iso-8859-1?Q?Michael_Gr=F8nager?=)
Date: Mon, 5 Mar 2012 15:14:07 +0100
Subject: [Bitcoin-development] Proposal for a new opcode
In-Reply-To: <CACsn0cne5An+SyKDf9w4o4Secn7C9wqqbG7ff0HB3Dvk-XxHRg@mail.gmail.com>
References: <CACsn0c=P1veYnmXe4E3qU0OC=Xr9Aw6Fy=6Zm0sUAaSBEDvpMA@mail.gmail.com>
	<CACsn0cne5An+SyKDf9w4o4Secn7C9wqqbG7ff0HB3Dvk-XxHRg@mail.gmail.com>
Message-ID: <6A095CA9-8A01-4578-A660-CED02B24F215@mac.com>

Sounds interesting, however, even after a couple of days, I cannot see how you maintain protection against double spend using OP_CHECKEXPSIG. It is not until you redeem the OP_CHECKEXPSIG transaction that you reveal which former transactions that was involved?

I guess I am missing a point here?

/M




 
On 02/03/2012, at 20:57, Watson Ladd wrote:

> Dear all,
> I am proposing a new opcode for the purposes of anonymous
> transactions. This new opcode enables scripts to be given proof that
> the receiver can carry out or has carried out a previous transaction.
> I'm currently working on a paper that discusses using this opcode for
> anonymous transactions.
> 
> Name: OP_CHECKEXPSIG
> Stack before: <sig><pk><hash>
> Stack after: T/F, where is true if sig is a ECDSA signature under pk
> for the hash hash. (Hash is the hash of a message).
> Uses: Preexisting digital cash techniques relied on keeping track of a
> list of turned in notes to forbid double spending. Using
> OP_CHECKEXPSIG we can instead pass the script that gives the nth note
> value proof that the notes {1,...n-1} were turned in and are distinct.
> This enables a coupling of the strong double spend protection of
> Bitcoin with traditional digital cash's strong anonymity.
> 
> Sincerely,
> Watson Ladd
> 
> ------------------------------------------------------------------------------
> Virtualization & Cloud Management Using Capacity Planning
> Cloud computing makes use of virtualization - but cloud computing 
> also focuses on allowing computing to be delivered as a service.
> http://www.accelacomm.com/jaw/sfnl/114/51521223/
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development

Michael Gronager, PhD
Director, Ceptacle
Jens Juels Gade 33
2100 Copenhagen E
Mobile: +45 31 45 14 01
E-mail: gronager at ceptacle.com
Web: http://www.ceptacle.com/




From luke at dashjr.org  Tue Mar  6 15:46:25 2012
From: luke at dashjr.org (Luke-Jr)
Date: Tue, 6 Mar 2012 10:46:25 -0500
Subject: [Bitcoin-development] P2SH status update
Message-ID: <201203061046.27885.luke@dashjr.org>

BIP16: 37% support vs 4% oppose
BIP17:  4% support vs 0% oppose



From slush at centrum.cz  Tue Mar  6 17:34:15 2012
From: slush at centrum.cz (slush)
Date: Tue, 6 Mar 2012 18:34:15 +0100
Subject: [Bitcoin-development] P2SH status update
In-Reply-To: <201203061046.27885.luke@dashjr.org>
References: <201203061046.27885.luke@dashjr.org>
Message-ID: <CAJna-HhuhyGvphCHrXRy09xjXCquNzHmcfj8RQr=KO_gOie8=Q@mail.gmail.com>

Hi,

is there any status update from Deepbit? Why he still does not support
anything...

slush

On Tue, Mar 6, 2012 at 4:46 PM, Luke-Jr <luke at dashjr.org> wrote:
> BIP16: 37% support vs 4% oppose
> BIP17: ?4% support vs 0% oppose
>
> ------------------------------------------------------------------------------
> Keep Your Developer Skills Current with LearnDevNow!
> The most comprehensive online learning library for Microsoft developers
> is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3, MVC3,
> Metro Style Apps, more. Free future releases when you subscribe now!
> http://p.sf.net/sfu/learndevnow-d2d
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development



From luke at dashjr.org  Tue Mar  6 19:29:14 2012
From: luke at dashjr.org (Luke-Jr)
Date: Tue, 6 Mar 2012 14:29:14 -0500
Subject: [Bitcoin-development] P2SH status update
In-Reply-To: <CAJna-HhuhyGvphCHrXRy09xjXCquNzHmcfj8RQr=KO_gOie8=Q@mail.gmail.com>
References: <201203061046.27885.luke@dashjr.org>
	<CAJna-HhuhyGvphCHrXRy09xjXCquNzHmcfj8RQr=KO_gOie8=Q@mail.gmail.com>
Message-ID: <201203061429.16460.luke@dashjr.org>

On Tuesday, March 06, 2012 12:34:15 PM slush wrote:
> is there any status update from Deepbit? Why he still does not support
> anything...

I think nobody has discussed P2SH with Tycho recently, since the priority is 
to get BIP 30 deployed first.



From gmaxwell at gmail.com  Wed Mar  7 00:05:48 2012
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Tue, 6 Mar 2012 19:05:48 -0500
Subject: [Bitcoin-development] Fwd: Proposal for a new opcode
In-Reply-To: <CACsn0cne5An+SyKDf9w4o4Secn7C9wqqbG7ff0HB3Dvk-XxHRg@mail.gmail.com>
References: <CACsn0c=P1veYnmXe4E3qU0OC=Xr9Aw6Fy=6Zm0sUAaSBEDvpMA@mail.gmail.com>
	<CACsn0cne5An+SyKDf9w4o4Secn7C9wqqbG7ff0HB3Dvk-XxHRg@mail.gmail.com>
Message-ID: <CAAS2fgSHsuhHOXXdAvgLZqF7ozLrzu-2wDikVxd0z6bPiCo+Hg@mail.gmail.com>

On Fri, Mar 2, 2012 at 2:57 PM, Watson Ladd <wbl at uchicago.edu> wrote:
> I am proposing a new opcode for the purposes of anonymous
> transactions. This new opcode enables scripts to be given proof that
> the receiver can carry out or has carried out a previous transaction.
> I'm currently working on a paper that discusses using this opcode for
> anonymous transactions.

I believe I understand what the opcode does directly? it just
validates an opaque signautre. I don't understand how it enables
anonymous transactions.

Can you spell this out for me?

In particular I don't see why it is not, from the perspective of the
blockchain, isomorphic to a hash locked transaction.   (This
equivalence is more obvious when you think about how lamport
signtures turn simple hashing into a one time signature).



From wbl at uchicago.edu  Wed Mar  7 00:42:41 2012
From: wbl at uchicago.edu (Watson Ladd)
Date: Tue, 6 Mar 2012 18:42:41 -0600
Subject: [Bitcoin-development] Fwd: Proposal for a new opcode
In-Reply-To: <CAAS2fgSHsuhHOXXdAvgLZqF7ozLrzu-2wDikVxd0z6bPiCo+Hg@mail.gmail.com>
References: <CACsn0c=P1veYnmXe4E3qU0OC=Xr9Aw6Fy=6Zm0sUAaSBEDvpMA@mail.gmail.com>
	<CACsn0cne5An+SyKDf9w4o4Secn7C9wqqbG7ff0HB3Dvk-XxHRg@mail.gmail.com>
	<CAAS2fgSHsuhHOXXdAvgLZqF7ozLrzu-2wDikVxd0z6bPiCo+Hg@mail.gmail.com>
Message-ID: <CACsn0cm6wgPdNvVr6Q4yS+cGP-kpUJxtXsL1mZS502UTOx8t0g@mail.gmail.com>

On Tue, Mar 6, 2012 at 6:05 PM, Gregory Maxwell <gmaxwell at gmail.com> wrote:
> On Fri, Mar 2, 2012 at 2:57 PM, Watson Ladd <wbl at uchicago.edu> wrote:
>> I am proposing a new opcode for the purposes of anonymous
>> transactions. This new opcode enables scripts to be given proof that
>> the receiver can carry out or has carried out a previous transaction.
>> I'm currently working on a paper that discusses using this opcode for
>> anonymous transactions.
>
> I believe I understand what the opcode does directly? it just
> validates an opaque signautre. I don't understand how it enables
> anonymous transactions.
>
> Can you spell this out for me?
One doesn't use this opcode as the sole thing to secure a transaction.
Instead this opcode prevents double spend attacks against
anonymization schemes. The idea is for Alice to give signatures to the
recipients of funds, all signatures being equivalent. To avoid this
from leading to a double-spend, we use a quorum method based on
showing earlier redemptions happened.
>
> In particular I don't see why it is not, from the perspective of the
> blockchain, isomorphic to a hash locked transaction. ? (This
> equivalence is more obvious when you think about how lamport
> signtures turn simple hashing into a one time signature).
Because you can't blind a lamport signature, it isn't. I'm searching
for a place to post the current draft: it's not ready for anything
official yet, but does seem to be of interest. Drop me a (offlist)line
if you have ideas about where I can put  it.
Sincerely,
Watson Ladd

-- 
"Those who would give up Essential Liberty to purchase a little
Temporary Safety deserve neither? Liberty nor Safety."
-- Benjamin Franklin



From mike at plan99.net  Fri Mar  9 14:50:02 2012
From: mike at plan99.net (Mike Hearn)
Date: Fri, 9 Mar 2012 15:50:02 +0100
Subject: [Bitcoin-development] [ANNOUNCE] BitCoinJ 0.4
Message-ID: <CANEZrP2YHcDirFus=tOZniDf2bb=GdVSf09Ov1N=iqKa4T-wUw@mail.gmail.com>

I'm pleased to announce the release of BitCoinJ 0.4, the leading Java
implementation of the Bitcoin protocol. BitCoinJ implements simplified
payment verification, a lightweight mode in which no central server or
authority is needed but the resource requirements are still low enough to
be usable on smartphones.

This version of the library is used in the new releases of Android Wallet
and MultiBit.

New in this release <http://code.google.com/p/bitcoinj/wiki/ReleaseNotes>

   - Ability to use "getheaders" to quickly catch up new users to the head
   of the chain. This is a big performance win.
   - ECKeys no longer require the private part, allowing for "watching
   wallets" that cannot spend, but still gather and track the transactions
   associated with the public keys.
   - A new API that implements transaction confidences. Get a quick summary
   or detailed information about how much confidence you can have that a given
   transaction won't be reversed.
   - A new DerbyBlockStore that stores block headers and related data in
   the Apache Derby relational database.
   - Protocol buffers are now a supported serialization format for the
   wallet. This means BitCoinJ based protobuf wallets can be read and
   manipulated by any language/platform with a protobufs implementation, which
   is most of them. There are extension points in the format to allow third
   parties to add new features.
   - Various new event listeners that help you learn when the state of the
   wallet or transactions change.
   - Support for post February 20th version handshakes (most library users
   already got this fix via backports)
   - All event listeners are now allowed to remove themselves during their
   own execution.
   - New APIs that allow you to create offline transactions and then
   broadcast them at a later point. Pending relevant transactions are recorded
   and announced to all newly connected nodes, ensuring a transaction won't
   "get lost" if there was flaky network connectivity at the time of creation.
   Pending transactions are supported much better in this release than in
   previous releases.
   - Wallet now can now take an invalid transaction and complete it by
   adding sufficient inputs and a change output. This enables the creation of
   multi-sends, as well as making experimentation with contracts easier.
   - Support for BIP 14: apps can now set their own "user agent" which will
   be put in the subVer field along with the library version.
   - Updated DNS seeds list.
   - A new WalletTool program for command line usage, and a ToyWallet app
   showing how to set everything up.
   - Support parsing and checking of alert messages.
   - New articles explaining how to use the library:
      - Working with
transactions<http://code.google.com/p/bitcoinj/wiki/WorkingWithTransactions>
      - Working with the
wallet<http://code.google.com/p/bitcoinj/wiki/WorkingWithTheWallet>
   - The usual assortment of bugfixes, new APIs, robustness and test suite
   improvements.

Thanks to everyone who contributed to this release, in particular Andreas
Schildbach, Miron Cuperman, Roman Maneleil, Chris Rico and Vasile Rotaru.

In the next release cycle, I'll be focusing on the following areas:

   1. Real support for transaction fee calculations (most users apply a
   custom patch for this today)
   2. A better block chain API
   3. Have the library manage save points for the wallet itself
   4. Further chain download time optimizations
   5. More support for moving apps onto "work done" as a confidence
   measurement

Of course contributors are welcome to work on whatever they want.

thanks
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120309/798140af/attachment.html>

From wbl at uchicago.edu  Sun Mar 11 23:52:06 2012
From: wbl at uchicago.edu (Watson Ladd)
Date: Sun, 11 Mar 2012 18:52:06 -0500
Subject: [Bitcoin-development] Paper up
Message-ID: <CACsn0ck9auW=S=odh7b0wv0o7TEEHjhhaRLaJAb4VrGdYGw1uA@mail.gmail.com>

Dear all,
A draft of my paper is up at
http://wbl.github.com/bitcoinanon.pdf
Comments are welcome, as is discussion about implications I haven't thought of.
Sincerely,
Watson Ladd



From mike at plan99.net  Tue Mar 13 18:06:38 2012
From: mike at plan99.net (Mike Hearn)
Date: Tue, 13 Mar 2012 19:06:38 +0100
Subject: [Bitcoin-development] Adding a pong message
Message-ID: <CANEZrP17mwsmhShUKDOrZFsotLD+PHt6omNpL3-r21RtmHRX4Q@mail.gmail.com>

https://github.com/bitcoin/bitcoin/pull/932 adds a "pong" message that
echoes back a 64 bit nonce contained in the ping, if the protocol
version is new enough.

The goal of this is to make it easier for clients, especially mobile
clients, to quickly check if a connection is stale, and also to see if
a remote node is overloaded so we can avoid talking to it. A common
case where this happens is if the remote node is itself downloading
the block chain or doing something equally intensive.

Any objections?



From luke at dashjr.org  Tue Mar 13 18:45:08 2012
From: luke at dashjr.org (Luke-Jr)
Date: Tue, 13 Mar 2012 14:45:08 -0400
Subject: [Bitcoin-development] Adding a pong message
In-Reply-To: <CANEZrP17mwsmhShUKDOrZFsotLD+PHt6omNpL3-r21RtmHRX4Q@mail.gmail.com>
References: <CANEZrP17mwsmhShUKDOrZFsotLD+PHt6omNpL3-r21RtmHRX4Q@mail.gmail.com>
Message-ID: <201203131445.09552.luke@dashjr.org>

On Tuesday, March 13, 2012 2:06:38 PM Mike Hearn wrote:
> https://github.com/bitcoin/bitcoin/pull/932 adds a "pong" message that
> echoes back a 64 bit nonce contained in the ping, if the protocol
> version is new enough.
> 
> The goal of this is to make it easier for clients, especially mobile
> clients, to quickly check if a connection is stale, and also to see if
> a remote node is overloaded so we can avoid talking to it. A common
> case where this happens is if the remote node is itself downloading
> the block chain or doing something equally intensive.
> 
> Any objections?

Not really an objection per se, but what's wrong with TCP keepalives?



From gavinandresen at gmail.com  Tue Mar 13 18:46:50 2012
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Tue, 13 Mar 2012 14:46:50 -0400
Subject: [Bitcoin-development] 0.6rc3 binaries available
Message-ID: <CABsx9T3B0hMfS5kL+RaKwRq5MO0Bfs2EJRrzS6pfNsk+DPjx3w@mail.gmail.com>

Version 0.6 release candidate 3 binaries are available at:
  https://sourceforge.net/projects/bitcoin/files/Bitcoin/bitcoin-0.6.0/test/

The big reason to run rc3 is to get the BIP30 security fix that takes
effect on March 15.

It also includes a fix to the problem of running rc1, upgrading, and
being stuck on the wrong block-chain fork

-- 
--
Gavin Andresen



From matt at bluematt.me  Tue Mar 13 19:48:02 2012
From: matt at bluematt.me (Matt Corallo)
Date: Tue, 13 Mar 2012 15:48:02 -0400
Subject: [Bitcoin-development] Adding a pong message
In-Reply-To: <201203131445.09552.luke@dashjr.org>
References: <CANEZrP17mwsmhShUKDOrZFsotLD+PHt6omNpL3-r21RtmHRX4Q@mail.gmail.com>
	<201203131445.09552.luke@dashjr.org>
Message-ID: <1331668049.3266.0.camel@BMThinkPad.lan.bluematt.me>

On Tue, 2012-03-13 at 14:45 -0400, Luke-Jr wrote:
> On Tuesday, March 13, 2012 2:06:38 PM Mike Hearn wrote:
> > https://github.com/bitcoin/bitcoin/pull/932 adds a "pong" message that
> > echoes back a 64 bit nonce contained in the ping, if the protocol
> > version is new enough.
> > 
> > The goal of this is to make it easier for clients, especially mobile
> > clients, to quickly check if a connection is stale, and also to see if
> > a remote node is overloaded so we can avoid talking to it. A common
> > case where this happens is if the remote node is itself downloading
> > the block chain or doing something equally intensive.
> > 
> > Any objections?
> 
> Not really an objection per se, but what's wrong with TCP keepalives?
> 
It wont tell you if the node itself is overloaded (not just the OS'
network stack).

Looks good to me.

Matt




From mike at plan99.net  Tue Mar 13 22:29:27 2012
From: mike at plan99.net (Mike Hearn)
Date: Tue, 13 Mar 2012 23:29:27 +0100
Subject: [Bitcoin-development] Adding a pong message
In-Reply-To: <201203131445.09552.luke@dashjr.org>
References: <CANEZrP17mwsmhShUKDOrZFsotLD+PHt6omNpL3-r21RtmHRX4Q@mail.gmail.com>
	<201203131445.09552.luke@dashjr.org>
Message-ID: <CANEZrP3vRKiEBsosi1SaD=Sz-CZ7LqunwqURHSf=sYiNqfutNg@mail.gmail.com>

TCP keep-alives aren't reliably implemented.

I've got reports that sometimes we struggle to keep connection to the
network on mobile, eg, because we roam into an area with poor
connectivity but not poor enough for the network stack to drop access
entirely. Being able to quickly check if the connection is really
there with some kind of bounded, app layer deadline is probably useful
and besides, it's cheap.



From zgenjix at yahoo.com  Wed Mar 14 15:07:29 2012
From: zgenjix at yahoo.com (Amir Taaki)
Date: Wed, 14 Mar 2012 08:07:29 -0700 (PDT)
Subject: [Bitcoin-development] BIP 18 (or not?)
Message-ID: <1331737649.82143.YahooMailNeo@web121006.mail.ne1.yahoo.com>

Hi,

luke-jr withdrew BIP 16 and put forwards support for BIP 17. So now there's a consensus to move forwards.

However he submitted BIP 18 to me today. From looking it over, I'm not even sure the idea is tenable nor see the purpose when we are adopting BIP 17. Personally I'd rather not see a high turnover in protocol design when something works (now that we have viable multisig transactions) even compromising on the position of a perfect design.

https://en.bitcoin.it/wiki/BIP_0018

Usually for a BIP, someone submits it to me, I review to see whether the idea is technically sound (not making judgements on the validity), the community discusses the idea and I evaluate the support at the end to change the status. In general I try to accept all BIPs in the interests of fairness, rather than holding a vote or being the executioner.

"Once the champion has asked the Bitcoin community as to whether an idea has any chance of acceptance, a draft BIP should be presented to?bitcoin-development at lists.sourceforge.net. This gives the author a chance to flesh out the draft BIP to make properly formatted, of high quality, and to address initial concerns about the proposal.
Following a discussion, the proposal should be sent to the Bitcoin-dev list with the draft BIP and the BIP editors <BIPs at Bitcoin.org>. This draft must be written in BIP style as described below, else it will be sent back without further regard until proper formatting rules are followed."

I don't think BIP 18 has followed this discussion before being accepted. Neither have many other BIPs as we're a small community, and so far we avoided this unneeded level of bureaucracy. However I think this is a good thing to do here.

Should BIP 18 be accepted into the repo or not?

"The BIP editor will not unreasonably deny a BIP. Reasons for denying BIP status include duplication of effort, being technically unsound, not providing proper motivation or addressing backwards compatibility, or not in keeping with the Bitcoin philosophy."

"For a BIP to be accepted it must meet certain minimum criteria. It must be a clear and complete description of the proposed enhancement. The enhancement must represent a net improvement. The proposed implementation, if applicable, must be solid and must not complicate the protocol unduly."

(quotes from BIP 1)



From moon at justmoon.de  Wed Mar 14 15:20:43 2012
From: moon at justmoon.de (Stefan Thomas)
Date: Wed, 14 Mar 2012 16:20:43 +0100
Subject: [Bitcoin-development] BIP 18 (or not?)
In-Reply-To: <1331737649.82143.YahooMailNeo@web121006.mail.ne1.yahoo.com>
References: <1331737649.82143.YahooMailNeo@web121006.mail.ne1.yahoo.com>
Message-ID: <4F60B74B.9090606@justmoon.de>

> luke-jr withdrew BIP 16 and put forwards support for BIP 17.

You are so funny sometimes. xD

On 3/14/2012 4:07 PM, Amir Taaki wrote:
> Hi,
>
> luke-jr withdrew BIP 16 and put forwards support for BIP 17. So now there's a consensus to move forwards.
>
> However he submitted BIP 18 to me today. From looking it over, I'm not even sure the idea is tenable nor see the purpose when we are adopting BIP 17. Personally I'd rather not see a high turnover in protocol design when something works (now that we have viable multisig transactions) even compromising on the position of a perfect design.
>
> https://en.bitcoin.it/wiki/BIP_0018
>
> Usually for a BIP, someone submits it to me, I review to see whether the idea is technically sound (not making judgements on the validity), the community discusses the idea and I evaluate the support at the end to change the status. In general I try to accept all BIPs in the interests of fairness, rather than holding a vote or being the executioner.
>
> "Once the champion has asked the Bitcoin community as to whether an idea has any chance of acceptance, a draft BIP should be presented to bitcoin-development at lists.sourceforge.net. This gives the author a chance to flesh out the draft BIP to make properly formatted, of high quality, and to address initial concerns about the proposal.
> Following a discussion, the proposal should be sent to the Bitcoin-dev list with the draft BIP and the BIP editors <BIPs at Bitcoin.org>. This draft must be written in BIP style as described below, else it will be sent back without further regard until proper formatting rules are followed."
>
> I don't think BIP 18 has followed this discussion before being accepted. Neither have many other BIPs as we're a small community, and so far we avoided this unneeded level of bureaucracy. However I think this is a good thing to do here.
>
> Should BIP 18 be accepted into the repo or not?
>
> "The BIP editor will not unreasonably deny a BIP. Reasons for denying BIP status include duplication of effort, being technically unsound, not providing proper motivation or addressing backwards compatibility, or not in keeping with the Bitcoin philosophy."
>
> "For a BIP to be accepted it must meet certain minimum criteria. It must be a clear and complete description of the proposed enhancement. The enhancement must represent a net improvement. The proposed implementation, if applicable, must be solid and must not complicate the protocol unduly."
>
> (quotes from BIP 1)
>
> ------------------------------------------------------------------------------
> Virtualization & Cloud Management Using Capacity Planning
> Cloud computing makes use of virtualization - but cloud computing 
> also focuses on allowing computing to be delivered as a service.
> http://www.accelacomm.com/jaw/sfnl/114/51521223/
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>




From gavinandresen at gmail.com  Fri Mar 16 17:44:11 2012
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Fri, 16 Mar 2012 13:44:11 -0400
Subject: [Bitcoin-development] April 1 BIP16 switchover time is definite
Message-ID: <CABsx9T3Hvx-A5+tdPi=-wMWXd_3mW6GbLoponZUjwBA_A=gMMA@mail.gmail.com>

Support for BIP16 has been approximately 70% of hashing power for the
last two days, and is 54% over the last week, so we're going to
announce that the BIP16 switchover time of April 1 is final and
strongly encourage any pools/miners that haven't yet upgraded their
software to do so in the next two weeks or risk hashing on a minority
chain.

I'll be checking to make sure support doesn't slip before April 1.

I've learned a lot, and have started writing up a document that
suggests how we can make the next upgrade process less painful for
everybody; when I've got a reasonable draft I'll start a discussion
about it here.

-- 
--
Gavin Andresen


PS: If you're curious, here is what support over the last 30 days
looks like, beginning with the last 24 hours (144 blocks) and going
backwards for each 24 hour period:

Found 103 matches in 144 blocks (71.5 percent)
Found 99 matches in 144 blocks (68.8 percent)
Found 87 matches in 144 blocks (60.4 percent)
Found 70 matches in 144 blocks (48.6 percent)
Found 73 matches in 144 blocks (50.7 percent)
Found 57 matches in 144 blocks (39.6 percent)
Found 52 matches in 144 blocks (36.1 percent)
Found 40 matches in 144 blocks (27.8 percent)
Found 40 matches in 144 blocks (27.8 percent)
Found 46 matches in 144 blocks (31.9 percent)
Found 41 matches in 144 blocks (28.5 percent)
Found 45 matches in 144 blocks (31.2 percent)
Found 57 matches in 144 blocks (39.6 percent)
Found 69 matches in 144 blocks (47.9 percent)
Found 51 matches in 144 blocks (35.4 percent)
Found 53 matches in 144 blocks (36.8 percent)
Found 65 matches in 144 blocks (45.1 percent)
Found 43 matches in 144 blocks (29.9 percent)
Found 48 matches in 144 blocks (33.3 percent)
Found 51 matches in 144 blocks (35.4 percent)
Found 46 matches in 144 blocks (31.9 percent)
Found 57 matches in 144 blocks (39.6 percent)
Found 61 matches in 144 blocks (42.4 percent)
Found 54 matches in 144 blocks (37.5 percent)
Found 53 matches in 144 blocks (36.8 percent)
Found 44 matches in 144 blocks (30.6 percent)
Found 52 matches in 144 blocks (36.1 percent)
Found 51 matches in 144 blocks (35.4 percent)
Found 53 matches in 144 blocks (36.8 percent)

Command used to get that data:
  for i in {1..30}; do ./search_coinbases.py --n=$(($i * 144))
--start=$(( ($i -1) * 144)); done

search_coinbases is one of my bitcointools:
  https://github.com/gavinandresen/bitcointools

Pretty graph of support over the last 100 blocks here:
  github.com/bitcoin/bitcoin/



From gavinandresen at gmail.com  Fri Mar 16 17:45:27 2012
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Fri, 16 Mar 2012 13:45:27 -0400
Subject: [Bitcoin-development] April 1 BIP16 switchover time is definite
In-Reply-To: <CABsx9T3Hvx-A5+tdPi=-wMWXd_3mW6GbLoponZUjwBA_A=gMMA@mail.gmail.com>
References: <CABsx9T3Hvx-A5+tdPi=-wMWXd_3mW6GbLoponZUjwBA_A=gMMA@mail.gmail.com>
Message-ID: <CABsx9T228+fZ49Cwp3eMdfob2xrUhfT=gw+EvGaoadR1en8G_A@mail.gmail.com>

> Pretty graph of support over the last 100 blocks here:
> ?github.com/bitcoin/bitcoin/

D'oh!  correct url for the pretty graph:
  http://blockchain.info/P2SH

-- 
--
Gavin Andresen



From gavinandresen at gmail.com  Sat Mar 17 00:14:26 2012
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Fri, 16 Mar 2012 20:14:26 -0400
Subject: [Bitcoin-development] Urgent: Windows Bitcoin-Qt update
Message-ID: <4F63D762.7080405@gmail.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

A potential security vulnerability has been discovered in the Windows
version of Bitcoin-Qt. If you are running Bitcoin-Qt versions 0.5
through 0.6 on Windows you should shut it down and upgrade to either
version 0.5.3.1 or 0.6rc4 NOW.

The command-line bitcoin daemon (bitcoind), Mac and Linux versions of
Bitcoin-Qt, and versions prior to 0.5 are not affected.

Due to the nature of the vulnerability, we believe it would be very
difficult for an attacker to do anything more than crash the
Bitcoin-Qt process. However, because there is a possibility of such a
crash causing remote code execution we consider this a critical issue.

Binaries are available at SourceForge:
https://sourceforge.net/projects/bitcoin/files/Bitcoin/bitcoin-0.6.0/test/
https://sourceforge.net/projects/bitcoin/files/Bitcoin/bitcoin-0.5.3/

If you have questions, feel free to drop by the #bitcoin-dev channel
on FreeNode IRC.

- --
Gavin Andresen
Gregory Maxwell
Matt Corallo
Nils Schneider
Wladimir J. van der Laan
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.9 (Darwin)
Comment: Using GnuPG with Mozilla - http://enigmail.mozdev.org/

iEYEARECAAYFAk9j12IACgkQdYgkL74406iIyQCfbxFTO3yD4Q2bHDjPlDuJn3Mj
9GAAn3mV+ggo+5q1Ujd0A5zwpFYojkE2
=g1Ad
-----END PGP SIGNATURE-----



From zgenjix at yahoo.com  Sun Mar 18 14:04:27 2012
From: zgenjix at yahoo.com (Amir Taaki)
Date: Sun, 18 Mar 2012 07:04:27 -0700 (PDT)
Subject: [Bitcoin-development] BIP 16 changes (list inside)
Message-ID: <1332079467.53650.YahooMailNeo@web121003.mail.ne1.yahoo.com>

Hi,

Is this an accurate and precise summary of the changes needed for P2SH and BIP 16?

== Block validation (starting with ProcessBlock) ==

* SigOpCount is now a LegacySigOpCount (CheckBlock)
* Main body of AcceptBlock() and rest of ProcessBlock() is unchanged.
* AddToBlockIndex() unchanged
* Some nice efficient improvements to SetBestChain(), but not related to BIP 16
* ConnectBlock() has new SigOp calculation.
* No important changes to FetchInputs()/ConnectInputs()

== Script ==

* Solver has special case to check for TX_SCRIPTHASH. Returns hash of input eval script
* Another Solver which a) returns signature of pubkey script or b) TX_SCRIPTHASH - finds redeem script in KeyStore and returns it.
* ExtractAddress(es)
* VerifyScript:
** After running input script (scriptSig), copy stack
** Evaluate script as normal
** if block date (fValidatePayToScriptHash) and output script (scriptPubKey) is P2SH:
*** scriptSig must be only push operations
*** evaluate last item of copied stack as a script using the copied stack as the stack
* SigOpCount (used inside CBlock::ConnectBlock main loop) does scoring checksigs and multisigs.
** Newly added DecodeOP_N to normal SigOpCount

== Address ==

* Set main hash160 data with a beginning byte (nVersion) of 0x05




From luke at dashjr.org  Sun Mar 18 18:11:48 2012
From: luke at dashjr.org (Luke-Jr)
Date: Sun, 18 Mar 2012 14:11:48 -0400
Subject: [Bitcoin-development] BIP 16 changes (list inside)
In-Reply-To: <1332079467.53650.YahooMailNeo@web121003.mail.ne1.yahoo.com>
References: <1332079467.53650.YahooMailNeo@web121003.mail.ne1.yahoo.com>
Message-ID: <201203181411.49361.luke@dashjr.org>

On Sunday, March 18, 2012 10:04:27 AM Amir Taaki wrote:
> Is this an accurate and precise summary of the changes needed for P2SH and
> BIP 16?

You might find my 0.4.x backport helpful:
    https://github.com/luke-jr/bitcoin/commit/bip16_0.4.x
Be aware, this still needs auditing (nobody else has looked it over), but I 
believe should cover only the minimal changes required to get P2SH validation 
(though not the "standard" rule changes to accept them into blocks).



From jpierre at xeno-genesis.com  Mon Mar 19 07:28:55 2012
From: jpierre at xeno-genesis.com (Jean-Pierre Rupp)
Date: Mon, 19 Mar 2012 08:28:55 +0100
Subject: [Bitcoin-development] A better Spanish translation for
	vulnerability page
Message-ID: <4F66E037.7030306@xeno-genesis.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Una potencial falla de seguridad ha sido descubierta en  Bitcoin-Qt
para Windows. Si tienes Bitcoin-Qt para Windows en alguna versi?n
entre 0.5 y 0.6, deber?as salir del programa, y actualizar a la
versi?n 0.5.3.1 o 0.6rc4 AHORA.

La aplicaci?n de l?nea de comandos (bitcoind), las versiones Mac y
Linux de Bitcoin-Qt, y las versiones anteriores a 0.5 no est?n afectadas.

Debido a la naturaleza de esta falla, creemos que ser?a muy dif?cil
para un atacante hacer algo m?s que colgar (cerrar) el proceso de
Bitcoin-Qt. Sin embargo, porque existe la posibilidad que un cierre
inesperado permita la ejecuci?n de c?digo remoto, consideramos esto un
incidente cr?tico.

Si tienes alguna pregunta, visita el canal IRC #bitcoin-dev en Freenode.

Puedes descargar el software actualizado desde SourceForge:
0.6rc
[https://sourceforge.net/projects/bitcoin/files/Bitcoin/bitcoin-0.6.0/test/]
0.5.3.1 para Windows y 0.5.3 para Linux
[https://sourceforge.net/projects/bitcoin/files/Bitcoin/bitcoin-0.5.3/]

- -- 
Be Happy
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.11 (GNU/Linux)
Comment: Using GnuPG with Mozilla - http://enigmail.mozdev.org/

iEYEARECAAYFAk9m4DYACgkQ77Wxq1L+vC74wgCfX4kF+BiKjO51UOgZmRib4kMP
W6sAn016/jDXOfV/WeonqtqB3GuhzG+t
=pqWY
-----END PGP SIGNATURE-----



From timon.elviejo at gmail.com  Mon Mar 19 09:35:56 2012
From: timon.elviejo at gmail.com (=?ISO-8859-1?Q?Jorge_Tim=F3n?=)
Date: Mon, 19 Mar 2012 10:35:56 +0100
Subject: [Bitcoin-development] A better Spanish translation for
 vulnerability page
In-Reply-To: <4F66E037.7030306@xeno-genesis.com>
References: <4F66E037.7030306@xeno-genesis.com>
Message-ID: <CAGQP0AHa7UCW_BRfwziEVLmyzk6EmepOHZecMCn3hOUcaCLBHg@mail.gmail.com>

Hi, I've made some corrections.

Se ha descubierto un fallo potencial de seguridad en Bitcoin-Qt
 para Windows. Si tienes Bitcoin-Qt para Windows en alguna versi?n
 entre 0.5 y 0.6, deber?as salir del programa, y actualizar a la
 versi?n 0.5.3.1 o 0.6rc4 AHORA.

 La aplicaci?n de l?nea de comandos (bitcoind), las versiones Mac y
 Linux de Bitcoin-Qt, y las versiones anteriores a 0.5 no est?n afectadas.

 Debido a la naturaleza de este fallo, creemos que ser?a muy dif?cil
 para un atacante hacer algo m?s que bloquear el proceso de
 Bitcoin-Qt. Sin embargo, debido a que existe la posibilidad de que un cierre
 inesperado permita la ejecuci?n de c?digo remoto, consideramos esto una
 incidencia cr?tica.

 Si tienes alguna pregunta, visita el canal IRC #bitcoin-dev en Freenode.

Puedes descargar el software actualizado desde SourceForge:
 0.6rc
 [https://sourceforge.net/projects/bitcoin/files/Bitcoin/bitcoin-0.6.0/test/]
 0.5.3.1 para Windows y 0.5.3 para Linux
 [https://sourceforge.net/projects/bitcoin/files/Bitcoin/bitcoin-0.5.3/]

Hope this helps


On 3/19/12, Jean-Pierre Rupp <jpierre at xeno-genesis.com> wrote:
> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA1
>
> Una potencial falla de seguridad ha sido descubierta en  Bitcoin-Qt
> para Windows. Si tienes Bitcoin-Qt para Windows en alguna versi?n
> entre 0.5 y 0.6, deber?as salir del programa, y actualizar a la
> versi?n 0.5.3.1 o 0.6rc4 AHORA.
>
> La aplicaci?n de l?nea de comandos (bitcoind), las versiones Mac y
> Linux de Bitcoin-Qt, y las versiones anteriores a 0.5 no est?n afectadas.
>
> Debido a la naturaleza de esta falla, creemos que ser?a muy dif?cil
> para un atacante hacer algo m?s que colgar (cerrar) el proceso de
> Bitcoin-Qt. Sin embargo, porque existe la posibilidad que un cierre
> inesperado permita la ejecuci?n de c?digo remoto, consideramos esto un
> incidente cr?tico.
>
> Si tienes alguna pregunta, visita el canal IRC #bitcoin-dev en Freenode.
>
> Puedes descargar el software actualizado desde SourceForge:
> 0.6rc
> [https://sourceforge.net/projects/bitcoin/files/Bitcoin/bitcoin-0.6.0/test/]
> 0.5.3.1 para Windows y 0.5.3 para Linux
> [https://sourceforge.net/projects/bitcoin/files/Bitcoin/bitcoin-0.5.3/]
>
> - --
> Be Happy
> -----BEGIN PGP SIGNATURE-----
> Version: GnuPG v1.4.11 (GNU/Linux)
> Comment: Using GnuPG with Mozilla - http://enigmail.mozdev.org/
>
> iEYEARECAAYFAk9m4DYACgkQ77Wxq1L+vC74wgCfX4kF+BiKjO51UOgZmRib4kMP
> W6sAn016/jDXOfV/WeonqtqB3GuhzG+t
> =pqWY
> -----END PGP SIGNATURE-----
>
> ------------------------------------------------------------------------------
> This SF email is sponsosred by:
> Try Windows Azure free for 90 days Click Here
> http://p.sf.net/sfu/sfd2d-msazure
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>


-- 
Jorge Tim?n



From gavinandresen at gmail.com  Mon Mar 19 16:07:13 2012
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Mon, 19 Mar 2012 12:07:13 -0400
Subject: [Bitcoin-development] Full disclosure on the Bitcoin-Qt on Windows
	problem
Message-ID: <CABsx9T2Mz0CgNyXfWxOmO7Vbr6fyGX34TFA0JkZYvPSozKCObQ@mail.gmail.com>

Reposting from my tech blog:
  http://gavintech.blogspot.com/2012/03/full-disclosure-bitcoin-qt-on-windows.html

----------------

A major bug in Bitcoin-Qt on Windows went unnoticed for over four
months. The bug was in the bitcoin-qt.pro file, in these two lines of
code:
  windows:LIBS += -lws2_32 -lshlwapi
  windows:DEFINES += WIN32
See the bug?

I don't-- I can't see it, because the problem was Bitcoin-Qt on
Windows should have been linked with the "mingw" multithreading
library and compiled with the -D_MT to turn on support for
multithread-safe C++ exception handling in the "mingw" library (you
can see the 3-line fix here).

There might be developers reading this who have had experience writing
multithreaded mingw-based C++ applications who will say "Duh! You guys
are idiots, everybody knows that!"

If that's you and you're interested in Bitcoin:  we need people like
you to help out! Review the code, review the build process, let us
know when we're being idiots. There seem to be a lot fewer Windows
developers willing to help out with Bitcoin than Linux or Mac
developers, which is unfortunate since a majority of our downloads are
Windows users.


Non-mingw-C++-multithreaded developers are reading this and thinking
"the bug was THERE?  Not in some #ifdef WINDOWS C++ code or some
slightly-out-of-date library that you were linking against?"


The other reason this bug went unnoticed for so long is because it
almost never matters. Bitcoin-Qt doesn't throw a lot of exceptions
normally, and most of the time the single-threaded-application
exception support in mingw works just fine. I'm still not sure exactly
what triggers the bug-- probably something like two threads throwing
exceptions at the same time, or one thread being interrupted while in
a try{} block and then resuming later and crashing because the
exception handling code is in a different state.

Matt Corallo deserves a lot of credit for being persistent and finding
the bug when investigating hard-to-reproduce reports of Bitcoin-Qt
crashing sometimes when run with the -server flag and handling
JSON-RPC requests. He was never able to get the code to crash when
running outside of the debugger, which is typical of bugs related to
multithreading. But he did see crashes not involving RPC requests, and
that is why we consider this a critical issue and are telling
everybody affected to upgrade immediately.

It it exploitable? Could an attacker craft bitcoin protocol messages
that triggered the bug and compromised Windows computers? Has it
already been exploited?

We don't know. We think it would be extremely difficult to craft a
usable exploit, partly because it is hard to even trigger the bug
reliably but also because Bitcoin-Qt has some security-in-depth to try
to prevent this type of bug from becoming exploitable.

If we're very careful and extremely lucky, this will be the last time
we have to tell users to shutdown and upgrade immediately because of
some potential vulnerability. But there is no such thing as perfect
security, and I expect that there will be another subtle bug either in
Bitcoin or in one of the many libraries we link against that becomes a
potential security issue.

That doesn't mean we give up and go back to paying each other with
cowrie shells; it means we assume that devices get compromised and
design around that assumption. I think that is a lesson that the
entire software industry needs to learn better.


-- 
--
Gavin Andresen



From gmaxwell at gmail.com  Wed Mar 21 19:54:30 2012
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Wed, 21 Mar 2012 15:54:30 -0400
Subject: [Bitcoin-development] Fwd: Proposal for a new opcode
In-Reply-To: <CACsn0cne5An+SyKDf9w4o4Secn7C9wqqbG7ff0HB3Dvk-XxHRg@mail.gmail.com>
References: <CACsn0c=P1veYnmXe4E3qU0OC=Xr9Aw6Fy=6Zm0sUAaSBEDvpMA@mail.gmail.com>
	<CACsn0cne5An+SyKDf9w4o4Secn7C9wqqbG7ff0HB3Dvk-XxHRg@mail.gmail.com>
Message-ID: <CAAS2fgRQrD0=3p2aXUpXVWV3PeWw+=Do=2CAvx1cOqwYUFrOQw@mail.gmail.com>

On Fri, Mar 2, 2012 at 2:57 PM, Watson Ladd <wbl at uchicago.edu> wrote:
> Dear all,
> I am proposing a new opcode for the purposes of anonymous
> transactions. This new opcode enables scripts to be given proof that
> the receiver can carry out or has carried out a previous transaction.
> I'm currently working on a paper that discusses using this opcode for
> anonymous transactions.


Here is an alternative protocol:


N parties wish to purchase equal amounts of Bitcoin without the
exchange being able to link their future transactions, they each put
the relevant amount of gold/whatever up at the exchange.

The exchange provides the exchanges public key, and the user provides
a public key for signing.   Externally the N participants agree on a
collection of non-cooperating mixers (the mixers may actually just be
the participants themselves, independent third parties, etc).   Each
participant generates a new bitcoin address, and encrypts it with the
the public keys of the the exchange and all the mixers using an
appropriate communicative homorophic scheme (or just a layers stack of
regular encryption keys).  The participants then combine their
encrypted addresess into a block and hand it off to the mixing chain.
Each mixer randomizes the order and decrypts all the messages with its
key.

At the end of the chain the exchange does the final decryption and
presents a list of addresses to the involved users.  Users validate
that their address is in the set and sign the entire set.  Once all
involved users have signed, the exchange pays.


This requires no changes to the Bitcoin system and could be trivially
implemented by anyone interested.  It provides anonymity which is
strong so long as any one of the mixers is uncompromised.  It has very
low overhead.   It is not directly resistant to disruption, but if
participation in an identified round requires a key provided by the
exchange, abusive users can be detected and excluded.

Have I explained this clearly enough? I could probably implement the
whole system it if its unclear.

Can you contrast this with your proposal for me?



From wbl at uchicago.edu  Wed Mar 21 22:02:46 2012
From: wbl at uchicago.edu (Watson Ladd)
Date: Wed, 21 Mar 2012 18:02:46 -0400
Subject: [Bitcoin-development] Proposal for a new opcode
In-Reply-To: <CACsn0cmfwuBpFTTMZ9psOoTKb3ovmAdb=VTSYQ7LJaf8+YzTUg@mail.gmail.com>
References: <CACsn0c=P1veYnmXe4E3qU0OC=Xr9Aw6Fy=6Zm0sUAaSBEDvpMA@mail.gmail.com>
	<CACsn0cne5An+SyKDf9w4o4Secn7C9wqqbG7ff0HB3Dvk-XxHRg@mail.gmail.com>
	<CAAS2fgRQrD0=3p2aXUpXVWV3PeWw+=Do=2CAvx1cOqwYUFrOQw@mail.gmail.com>
	<CACsn0cmfwuBpFTTMZ9psOoTKb3ovmAdb=VTSYQ7LJaf8+YzTUg@mail.gmail.com>
Message-ID: <CACsn0cn70Kj+HbhNHEJtdbNSFQM_aeUWJ=dc+gDjpseRivT-qg@mail.gmail.com>

On Wed, Mar 21, 2012 at 3:54 PM, Gregory Maxwell <gmaxwell at gmail.com> wrote:
> On Fri, Mar 2, 2012 at 2:57 PM, Watson Ladd <wbl at uchicago.edu> wrote:
>> Dear all,
>> I am proposing a new opcode for the purposes of anonymous
>> transactions. This new opcode enables scripts to be given proof that
>> the receiver can carry out or has carried out a previous transaction.
>> I'm currently working on a paper that discusses using this opcode for
>> anonymous transactions.
>
>
> Here is an alternative protocol:
>
>
> N parties wish to purchase equal amounts of Bitcoin without the
> exchange being able to link their future transactions, they each put
> the relevant amount of gold/whatever up at the exchange.
>
> The exchange provides the exchanges public key, and the user provides
> a public key for signing. ? Externally the N participants agree on a
> collection of non-cooperating mixers (the mixers may actually just be
> the participants themselves, independent third parties, etc). ? Each
> participant generates a new bitcoin address, and encrypts it with the
> the public keys of the the exchange and all the mixers using an
> appropriate communicative homorophic scheme (or just a layers stack of
> regular encryption keys). ?The participants then combine their
> encrypted addresess into a block and hand it off to the mixing chain.
> Each mixer randomizes the order and decrypts all the messages with its
> key.
>
> At the end of the chain the exchange does the final decryption and
> presents a list of addresses to the involved users. ?Users validate
> that their address is in the set and sign the entire set. ?Once all
> involved users have signed, the exchange pays.
>
>
> This requires no changes to the Bitcoin system and could be trivially
> implemented by anyone interested. ?It provides anonymity which is
> strong so long as any one of the mixers is uncompromised. ?It has very
> low overhead. ? It is not directly resistant to disruption, but if
> participation in an identified round requires a key provided by the
> exchange, abusive users can be detected and excluded.
>
> Have I explained this clearly enough? I could probably implement the
> whole system it if its unclear.
>
> Can you contrast this with your proposal for me?
Contrasts
-My protocol works, your's doesn't. It's not enough to have a mix, the
mix needs to be verifiable to avoid
one of the mixers inserting their own key and removing a key that
should be in there. That doesn't mean you can't make your protocol
work with some more magic, but magic is required.
-You need a lot of online computation: the recipients need to be
involved with validating the mix. By contrast in mine you need to wait for
enough people to get their bitcoins to avoid partitioning. But this
might be a strength,
not a weakness.
-You avoid the problem of de-anonymizing through having the protocol
run incompletely: if the permutation is correctly computed the
transaction goes through.
-You also avoid all the problems with modifications to the bitcoin
clients and miners.

It's definitely a good alternative, once you fix the problem in 1.

On a related note, private keys and signatures have better proofs of
knowledge then hashes. Has this been considered in the P2SH
conversation? There might be ways to use this to make even better
methods for enhancing anonymity.
Sincerely,
Watson Ladd



--
"Those who would give up Essential Liberty to purchase a little
Temporary Safety deserve neither? Liberty nor Safety."
-- Benjamin Franklin


-- 
"Those who would give up Essential Liberty to purchase a little
Temporary Safety deserve neither? Liberty nor Safety."
-- Benjamin Franklin



From gmaxwell at gmail.com  Thu Mar 22 00:49:20 2012
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Wed, 21 Mar 2012 20:49:20 -0400
Subject: [Bitcoin-development] Proposal for a new opcode
In-Reply-To: <CACsn0cn70Kj+HbhNHEJtdbNSFQM_aeUWJ=dc+gDjpseRivT-qg@mail.gmail.com>
References: <CACsn0c=P1veYnmXe4E3qU0OC=Xr9Aw6Fy=6Zm0sUAaSBEDvpMA@mail.gmail.com>
	<CACsn0cne5An+SyKDf9w4o4Secn7C9wqqbG7ff0HB3Dvk-XxHRg@mail.gmail.com>
	<CAAS2fgRQrD0=3p2aXUpXVWV3PeWw+=Do=2CAvx1cOqwYUFrOQw@mail.gmail.com>
	<CACsn0cmfwuBpFTTMZ9psOoTKb3ovmAdb=VTSYQ7LJaf8+YzTUg@mail.gmail.com>
	<CACsn0cn70Kj+HbhNHEJtdbNSFQM_aeUWJ=dc+gDjpseRivT-qg@mail.gmail.com>
Message-ID: <CAAS2fgT1ZkGYx8y48SMSApMMYfaOOLwjsC-q0fTXGs1KHUfRMQ@mail.gmail.com>

On Wed, Mar 21, 2012 at 6:02 PM, Watson Ladd <wbl at uchicago.edu> wrote:
> -My protocol works, your's doesn't. It's not enough to have a mix, the
> mix needs to be verifiable to avoid
> one of the mixers inserting their own key and removing a key that
> should be in there. That doesn't mean you can't make your protocol
> work with some more magic, but magic is required.

If the final step fails (someone says their address is missing) you
challenge the mixes to disclose half of their correspondences. You can
then prove which (if any) mixes defected.

Why I didn't bother elaborating is ... I think you can even avoid the
fancy protocol where you must take care to only disclose alternating
halves at each mix because the addresses are throwaway: If the it
fails in the final stage everyone publishes _everything_ and the
cheater is instantly and provably identified and can be excluded from
the next attempt which is then performed using totally new addresses
and the disclosed addresses are never used.  Care would need to be
taken to avoid fake-failures (e.g. the exchange says 'it fails'
triggering disclosure then sending anyways? but the participants could
prove this cheating and stop using the exchange), I think there isn't
much risk there if the participants are themselves the mixes.  I need
to think this through a bit more.

[snip]
> On a related note, private keys and signatures have better proofs of
> knowledge then hashes. Has this been considered in the P2SH
> conversation? There might be ways to use this to make even better
> methods for enhancing anonymity.

It's not something I thought about? In general the P2SH tends to be
a superset of other schemes, e.g. you can do a signature to prove you
access to a private key, then you can show someone a script using that
key to show control of a P2SH address.

There are lot of interesting things you can do with bitcoin if you can
construct (potentially interactive) proofs for knowing the preimages of hashes.



From elombrozo at gmail.com  Thu Mar 22 05:13:13 2012
From: elombrozo at gmail.com (Eric Lombrozo)
Date: Wed, 21 Mar 2012 22:13:13 -0700
Subject: [Bitcoin-development] Adding callback hooks to the satoshi client
Message-ID: <CABr1YTc0TOvfyFNY4CTaOiTa3WWb-5JHjQOTarB=8zZ+DqiUFg@mail.gmail.com>

Hey, guys.

I've been writing a number of apps that require realtime event
notifications, where the JSON-RPC API clearly doesn't suffice.

There are two approaches I've been taking to this end:

1) Writing my own library for dealing with raw bitcoin structures and
connecting to bitcoin nodes via the bitcoin protocol.
2) Making custom builds of the satoshi client putting callback hooks
in key points.

Neither of these two approaches is ideal. (1) involves a lot of code
duplication, (2) involves patching the satoshi client source
each time I grab a later version, with the everpresent risk of
something breaking and the need to continue maintaining these patches.
Moreover, unfortunately many of these key points happen to be in files
like main.cpp which see frequent changes.

I would like to propose adding these callback hooks to the main
branch. I am willing to help locate these key points, reorganize the
code
to place these methods in separate source files, define a callback
mechanism, and contribute source code.

-Eric Lombrozo



From bitcoin-list at bluematt.me  Thu Mar 22 05:24:11 2012
From: bitcoin-list at bluematt.me (Matt Corallo)
Date: Thu, 22 Mar 2012 01:24:11 -0400
Subject: [Bitcoin-development] Adding callback hooks to the satoshi
 client
In-Reply-To: <CABr1YTc0TOvfyFNY4CTaOiTa3WWb-5JHjQOTarB=8zZ+DqiUFg@mail.gmail.com>
References: <CABr1YTc0TOvfyFNY4CTaOiTa3WWb-5JHjQOTarB=8zZ+DqiUFg@mail.gmail.com>
Message-ID: <1332393851.10496.11.camel@BMThinkPad.lan.bluematt.me>

I spent some time changing the internal bitcoin code to use callback
hooks, but its far from complete (or even really usable from anything
other than the code in the satoshi client itself, it doesnt even have
any deregister methods!).  As it sits now, it is likely to get more
eyeballs and merged for 0.7.  If you need additional specific callbacks,
adding them would be cool, though I wouldn't recommend relying on the
blockstore API to remain even remotely stable for the foreseeable
future.

https://github.com/bitcoin/bitcoin/pull/771

Matt

On Wed, 2012-03-21 at 22:13 -0700, Eric Lombrozo wrote:
> Hey, guys.
> 
> I've been writing a number of apps that require realtime event
> notifications, where the JSON-RPC API clearly doesn't suffice.
> 
> There are two approaches I've been taking to this end:
> 
> 1) Writing my own library for dealing with raw bitcoin structures and
> connecting to bitcoin nodes via the bitcoin protocol.
> 2) Making custom builds of the satoshi client putting callback hooks
> in key points.
> 
> Neither of these two approaches is ideal. (1) involves a lot of code
> duplication, (2) involves patching the satoshi client source
> each time I grab a later version, with the everpresent risk of
> something breaking and the need to continue maintaining these patches.
> Moreover, unfortunately many of these key points happen to be in files
> like main.cpp which see frequent changes.
> 
> I would like to propose adding these callback hooks to the main
> branch. I am willing to help locate these key points, reorganize the
> code
> to place these methods in separate source files, define a callback
> mechanism, and contribute source code.
> 
> -Eric Lombrozo




From bitcoin-list at bluematt.me  Thu Mar 22 05:39:06 2012
From: bitcoin-list at bluematt.me (bitcoin-list at bluematt.me)
Date: Thu, 22 Mar 2012 01:39:06 -0400
Subject: [Bitcoin-development] Adding callback hooks to the satoshi
	client
In-Reply-To: <CABr1YTc0TOvfyFNY4CTaOiTa3WWb-5JHjQOTarB=8zZ+DqiUFg@mail.gmail.com>
References: <CABr1YTc0TOvfyFNY4CTaOiTa3WWb-5JHjQOTarB=8zZ+DqiUFg@mail.gmail.com>
Message-ID: <15bcfa26-7be9-4883-ad03-bfb7085b5df0@email.android.com>

You might also want to check out libcoin. Its a fork of the satoshi client: https://github.com/ceptacle/libcoin

Matt

Eric Lombrozo <elombrozo at gmail.com> wrote:

Hey, guys.

I've been writing a number of apps that require realtime event
notifications, where the JSON-RPC API clearly doesn't suffice.

There are two approaches I've been taking to this end:

1) Writing my own library for dealing with raw bitcoin structures and
connecting to bitcoin nodes via the bitcoin protocol.
2) Making custom builds of the satoshi client putting callback hooks
in key points.

Neither of these two approaches is ideal. (1) involves a lot of code
duplication, (2) involves patching the satoshi client source
each time I grab a later version, with the everpresent risk of
something breaking and the need to continue maintaining these patches.
Moreover, unfortunately many of these key points happen to be in files
like main.cpp which see frequent changes.

I would like to propose adding these callback hooks to the main
branch. I am willing to help locate these key points, reorganize the
code
to place these methods in separate source files, define a callback
mechanism, and contribute source code.

-Eric Lombrozo

_____________________________________________

This SF email is sponsosred by:
Try Windows Azure free for 90 days Click Here 
http://p.sf.net/sfu/sfd2d-msazure
_____________________________________________

Bitcoin-development mailing list
Bitcoin-development at lists.sourceforge.net
https://lists.sourceforge.net/lists/listinfo/bitcoin-development

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120322/a48c76bf/attachment.html>

From gronager at ceptacle.com  Thu Mar 22 09:56:00 2012
From: gronager at ceptacle.com (=?iso-8859-1?Q?Michael_Gr=F8nager?=)
Date: Thu, 22 Mar 2012 10:56:00 +0100
Subject: [Bitcoin-development] Adding callback hooks to the
	satoshi	client
In-Reply-To: <15bcfa26-7be9-4883-ad03-bfb7085b5df0@email.android.com>
References: <CABr1YTc0TOvfyFNY4CTaOiTa3WWb-5JHjQOTarB=8zZ+DqiUFg@mail.gmail.com>
	<15bcfa26-7be9-4883-ad03-bfb7085b5df0@email.android.com>
Message-ID: <7E6B77BA-6F88-4632-B9DD-487E870D45CA@ceptacle.com>

Hi Eric,

What hooks are you looking for in particular ?

libcoin supports registration of listeners for new blocks and new transactions. These are e.g. used for connecting the Wallet to the Node.

Cheers,

M


On 22/03/2012, at 06:39, bitcoin-list at bluematt.me wrote:

> You might also want to check out libcoin. Its a fork of the satoshi client: https://github.com/ceptacle/libcoin
> 
> Matt
> 
> Eric Lombrozo <elombrozo at gmail.com> wrote:
> Hey, guys.
> 
> I've been writing a number of apps that require realtime event
> notifications, where the JSON-RPC API clearly doesn't suffice.
> 
> There are two approaches I've been taking to this end:
> 
> 1) Writing my own library for dealing with raw bitcoin structures and
> connecting to bitcoin nodes via the bitcoin protocol.
> 2) Making custom builds of the satoshi client putting callback hooks
> in key points.
> 
> Neither of these two approaches is ideal. (1) involves a lot of code
> duplication, (2) involves patching the satoshi client source
> each time I grab a later version, with the everpresent risk of
> something breaking and the need to continue maintaining these patches.
> Moreover, unfortunately many of these key points happen to be in files
> like main.cpp which see frequent changes.
> 
> I would like to propose adding these
> callback hooks to the main
> 
> branch. I am willing to help locate these key points, reorganize the
> code
> to place these methods in separate source files, define a callback
> mechanism, and contribute source code.
> 
> -Eric Lombrozo
> 
> 
> This SF email is sponsosred by:
> Try Windows Azure free for 90 days Click Here 
> http://p.sf.net/sfu/sfd2d-msazure
> 
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> ------------------------------------------------------------------------------
> This SF email is sponsosred by:
> Try Windows Azure free for 90 days Click Here 
> http://p.sf.net/sfu/sfd2d-msazure_______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development

Michael Gronager, PhD
Director, Ceptacle
Jens Juels Gade 33
2100 Copenhagen E
Mobile: +45 31 45 14 01
E-mail: gronager at ceptacle.com
Web: http://www.ceptacle.com/




From gronager at ceptacle.com  Thu Mar 22 11:34:22 2012
From: gronager at ceptacle.com (=?iso-8859-1?Q?Michael_Gr=F8nager?=)
Date: Thu, 22 Mar 2012 12:34:22 +0100
Subject: [Bitcoin-development] Announcement: libcoin
In-Reply-To: <CAJSM8J2Xe1EnFxKFAGdH+bx2AVgoRYMg=VsdEmvO9S=x6gbMNQ@mail.gmail.com>
References: <D55C3D18-8286-44E9-B877-6FCE7C05E980@ceptacle.com>
	<CAJSM8J0zqF2=Poknzc8R7TrTJ0DWCMBw2-K9gGhUP_Qf+J6eFg@mail.gmail.com>
	<4FF4A408-F8C9-4A50-8B13-13D3686BEB09@ceptacle.com>
	<CAJSM8J3bZYfpE9EATcYe=79s_RxvGG9BrdRQR9ivwtZnuPsL0w@mail.gmail.com>
	<CAJSM8J2nhoKsOnAeF8qBW3zOfp=sJ25sd8gnw2dMJ3GgkohDjQ@mail.gmail.com>
	<C3C58158-0DED-41A1-B4D2-BF746AFE717A@ceptacle.com>
	<CAJSM8J3255LpXbHRF+zEi0QRoM0mwuRP3FSNbSwSyz-_ge=Few@mail.gmail.com>
	<3C518667-C2A6-4D1F-988D-888964925489@ceptacle.com>
	<CAJSM8J2-+uHKJg9xjqtz785HBNY8wXtJLnw70jP0_HgNspx4Tg@mail.gmail.com>
	<AB5AEA73-93BD-440E-89F0-F0951047D71A@ceptacle.com>
	<CAJSM8J2ytXR0RSL=3+Se6mggH+pDmnkSx+CUp-bcod4qmJ3ObA@mail.gmail.com>
	<07A82C1E-AE1D-44DC-AF02-38A3D755FA35@ceptacle.com>
	<CAJSM8J15LBiT9ojrPDE1-TXqmBLXcVvAmWw0e=5nQfLtMQ42Zg@mail.gmail.com>
	<8CEEE576-37DF-4101-9593-73D5FB66D52F@ceptacle.com>
	<CAJSM8J2Xe1EnFxKFAGdH+bx2AVgoRYMg=VsdEmvO9S=x6gbMNQ@mail.gmail.com>
Message-ID: <072A82C0-A8FF-415D-8D1B-AE71F1D2208F@ceptacle.com>

> 
>  1- How close is Libcoin with original Bitcoin? I mean, the output is a little different, the bitcoind help output was disabled and, I'm afraid that Libcoin can possibly being distant from Bitcoin in the future... That can happen?!

Well, I hope at some point to push libcoin to bitcoin, but that is not for me to decide ;)

Anyway, I will strive at keeping the two synced - currently, they are almost in sync - even bip 16 is part of libcoin, but I have postponed generation of P2SH till after we were certain of 16 vs 17. So that is high on the list. 

I did a presentation of libcoin at BitCon12 in San Antonio - I will trow the slides at the web-side asap.

> 
>  2- Do you have plans to update Libcoin on every new upstream Bitcoin release? How fast will be this updates? Do you need more resources/people working on it?

More people is always nice! I am using libcoin for my own bitcoin project, so that should guarantee that it will be kept up to date.

>  Another questions not involved directly with Libcoin/Bitcoin but, I'll need it for my future Bitcoin projects, and Libcoin is on my radar:
> 
>  1- Do you know about Diaspora* Project?

Yes, I even have an account :)

>  2- Do you have skills in Ruby on Rails development?

Nope...

/M

> 
> 
> Thank you!
> Thiago
> 
> 2012/3/3 Michael Gr?nager <gronager at ceptacle.com>
> Hi Martin,
> 
> There are a couple of options of doing similarly...
> 
> In the libcoin repository you will find some code for btc and btcd, it is some code I wrote a while ago and it needs to be updated. It functions as a bitcoind master and slave. The btcd keeps the blockchain, but no wallet. btc keeps the wallet and contact the btcd to get transaction info (like send an address and get its transactions or send a transaction id and get its details). It works (or worked when I wrote them) with the wallet.dat, but needs a little update.
> 
> You could e.g. run one btcd on the machine and several btc instances to get the functionality you asked for.
> 
> Further, btcd also enables a web wallet, where the private keys are stored in your browsers local-store.
> 
> I will get the application updated, but most likely in a bit other setup as it is something I intend to marketize in the near future.
> 
> Hope this answers your question.
> 
> Cheers,
> 
> Michael
> 
> On 03/03/2012, at 02:04, Martinx - ????? wrote:
> 
> > Michael,
> >
> > libcoin is AWESOME! Thanks!!!
> >
> > Can I do the following scenario with libcoin ? :
> >
> > 1- Create a regular Linux user called "blockchain", with home dir pointed to /var/lib/libcoin/ (more or like Ubuntu/Debian mysql does);
> >
> > 2- Start "bitcoind" under user "blockchain" (the Bitcoin blockchain) will be downloaded to /var/lib/libcoin/bitcoin/ directory);
> >
> > 3- As another regular user, called "michael", I would like to run "bitcoind" too but, I do not want to re-download the blockchain to its own subdir, I want instead, to consult it (blockchain) through libcoin itself (not by socket of JSON)...
> >
> > So, the /home/michael/.bitcoin/ directory will have only wallet.dat and related files, not the blockchain.
> >
> > This is more or less what we can do with Bitcoin Electrum alternate client but, with Electrum, it copy the whole blockchain to mysql... This is terrible from my point of view, I think that there is no need to duplicate the blockchain within MySQL in anyway.
> >
> > I just imagine a bitcoin splited in two, blockchain in one side and wallet in the other side.
> >
> > This is possible with libcoin?!
> >
> > Thank you again!
> >
> > Best,
> > Thiago
> >
> > 2012/2/28 Michael Gr?nager <gronager at ceptacle.com>
> > Hi again - and thanks for testing and finding this!
> >
> > I have fixed the bug you reported:
> >
> > The culprit was an implicit string constructor for the ChainAddress that caused creation of a not fully initialized ChainAddress. The right way to do it is using chain::getAddress(string) as the ChainAddress is chain specific.
> >
> > A git pull will fix it ;)
> >
> > Cheers,
> >
> > Michael
> >
> >
> > On 27/02/2012, at 20:03, Martinx - ????? wrote:
> >
> >> AWESOME!! Thank you!!
> >>
> >> Anyway, I found a new problem... lol
> >>
> >> /usr/local/bin/bitcoind getinfo #okay
> >> {
> >>   "version" : 40001,
> >>   "blocks" : 168753,
> >>   "connections" : 8,
> >>   "difficulty" : 1376302.26788638,
> >>   "testnet" : false
> >> }
> >>
> >> /usr/local/bin/bitcoind getaccountaddress ""  # okay...
> >> 1J4vNcvEdeCuLH4yvyoC2gxFEF4zquoJ87
> >>
> >> /usr/local/bin/bitcoind listaccounts # NOT okay...
> >> {
> >> }
> >>
> >> /usr/local/bin/bitcoind getaccountaddress "teste" # okay
> >> 1E6pGh6AAtuJdFXheZMp1zdYmvdqAQn9QT
> >>
> >> /usr/local/bin/bitcoind listaccounts # NOT okay...
> >> {
> >>   "teste" : 0.00000000
> >> }
> >>
> >> Where is my default account listed at "listaccounts" output?!
> >>
> >> Best,
> >> Thiago
> >>
> >> 2012/2/26 Michael Gr?nager <gronager at ceptacle.com>
> >> And if you do an update now "help" is there too ;)
> >>
> >> /M
> >>
> >> On 25/02/2012, at 03:11, Martinx - ????? wrote:
> >>
> >>> Thank you!!!
> >>>
> >>> It is all working now! Except "help"...
> >>>
> >>> Nice work Michael!!
> >>>
> >>> Best,
> >>> Thiago
> >>>
> >>> 2012/2/24 Michael Gr?nager <gronager at ceptacle.com>
> >>> OK - didn't took the weekend:
> >>>
> >>> support for "port" is on github now :)
> >>>
> >>> Only took two lines:
> >>>
> >>>         ("port", value<unsigned short>(&port)->default_value(8333), "Listen on specified port for the p2p protocol")
> >>>
> >>> and using the port option in the Node constructor (was there already):
> >>>
> >>>     Node node(chain, data_dir, args.count("nolisten") ? "" : "0.0.0.0", lexical_cast<string>(port)); // it is also here we specify the use of a proxy!
> >>>
> >>> /M
> >>>
> >>>
> >>>
> >>> On 24/02/2012, at 19:49, Martinx - ????? wrote:
> >>>
> >>>> Hi Michael,
> >>>>
> >>>> Thank you for your attention!
> >>>>
> >>>> Now, I'm trying to start libcoin's bitcoind using high ports but, it always try to listen at 8332, no matter what I "say"...
> >>>>
> >>>> Look:
> >>>>
> >>>> $ cat .bitcoin/bitcoin.conf
> >>>> server=1
> >>>> daemon=1
> >>>> rpcuser=libcoin
> >>>> rpcpassword=LibCoin13
> >>>> rpcport=10332
> >>>> port=10333
> >>>>
> >>>> But:
> >>>>
> >>>> /usr/local/bin/bitcoind
> >>>> Error: Address already in use
> >>>>
> >>>> terminate called after throwing an instance of 'DbException'
> >>>> what():  DbEnv::close: Invalid argument
> >>>> Aborted
> >>>>
> >>>> When I "strace it", I can see:
> >>>>
> >>>> ...
> >>>> bind(12, {sa_family=AF_INET, sin_port=htons(8333), sin_addr=inet_addr("0.0.0.0")}, 16) = -1 EADDRINUSE (Address already in use)
> >>>> ...
> >>>>
> >>>> I already tried:
> >>>>
> >>>> /usr/local/bin/bitcoind --rpcport 10332
> >>>> /usr/local/bin/bitcoind --rpcport=10332
> >>>>
> >>>> Without success...
> >>>>
> >>>> Thanks again!
> >>>> Thiago
> >>>>
> >>>> 2012/2/24 Michael Gr?nager <gronager at ceptacle.com>
> >>>> Hi Thiago,
> >>>>
> >>>> Forgot to comment on the two latter:
> >>>>
> >>>>> $ bitcoind getaccountaddress ""
> >>>>> HTTP error code: 401
> >>>>> Error: couldn't parse reply from server
> >>>>>
> >>>>> $ bitcoind listaccounts
> >>>>> HTTP error code: 401
> >>>>> Error: couldn't parse reply from server
> >>>>>
> >>>>
> >>>> 401 = permission denied - you need to setup username / password either on the commandline or in the bicoin.conf file to access those commands...
> >>>>
> >>>> See in the bitcoind.cpp file for commands that you can use with and without auth...
> >>>>
> >>>> Those that contains an "auth" requires auth:
> >>>>
> >>>>    server.registerMethod(method_ptr(new GetBalance(wallet)), auth);
> >>>>
> >>>> As opposed to:
> >>>>
> >>>>    server.registerMethod(method_ptr(new GetInfo(node)));
> >>>>
> >>>> auth is defined by:
> >>>>
> >>>>    Auth auth(rpc_user, rpc_pass); // if rpc_user and rpc_pass are not set, all authenticated methods becomes disallowed.
> >>>>
> >>>> so you just experience the case explained in the comment ;) I admit that the output could be more readable, though!
> >>>>
> >>>> /M
> >>>>
> >>>>
> >>>>>
> >>>>> Any tips?! lol
> >>>>>
> >>>>> Thanks!
> >>>>> Thiago
> >>>>>
> >>>>> 2012/2/23 Martinx - ????? <thiagocmartinsc at gmail.com>
> >>>>> AWESOME!!!
> >>>>>
> >>>>> I can compile libcoin at my Ubuntu 11.10... I just need to install:
> >>>>>
> >>>>> sudo aptitude install libboost1.46-all-dev
> >>>>>
> >>>>> ...alongside with another already installed dependencies, and now it works!!
> >>>>>
> >>>>> Thank you!
> >>>>> Thiago
> >>>>>
> >>>>> 2012/2/23 Michael Gr?nager <gronager at ceptacle.com>
> >>>>> Hi Martinx,
> >>>>>
> >>>>> Another note:
> >>>>>
> >>>>> boost 1.42 and openssl 1.0 has a conflict (you will see it when you try to compile coinHTTP with that specific combination: sslv2 has been removed from openssl, but boost still references it.)
> >>>>>
> >>>>> You should do a :
> >>>>>
> >>>>> sudo apt-get upgrade libboost-dev-all
> >>>>>
> >>>>> to get the 1.46.1 library
> >>>>>
> >>>>> /M
> >>>>>
> >>>>>
> >>>>> On 23/02/2012, at 18:31, Martinx - ????? wrote:
> >>>>>
> >>>>>> Hi Michael!
> >>>>>>
> >>>>>> Thank you for libcoin! It is a awesome evolution for Bitcoin and for the CryptoCurrencies as a hole... Thanks!!!
> >>>>>>
> >>>>>> Anyway, I am unable to compile libcoin under my Ubuntu 11.04. At this machine, I have compiled and running Bitcoin (from sources), Namecoin, Devcoin, Litecoin, IXcoin and I0coin, all from sources but, when I try to compile libcoin, I got:
> >>>>>>
> >>>>>> ----
> >>>>>> user at desk:~/libcoin$ ./configure
> >>>>>> -- The C compiler identification is GNU
> >>>>>> -- The CXX compiler identification is GNU
> >>>>>> -- Check for working C compiler: /usr/bin/gcc
> >>>>>> -- Check for working C compiler: /usr/bin/gcc -- works
> >>>>>> -- Detecting C compiler ABI info
> >>>>>> -- Detecting C compiler ABI info - done
> >>>>>> -- Check for working CXX compiler: /usr/bin/c++
> >>>>>> -- Check for working CXX compiler: /usr/bin/c++ -- works
> >>>>>> -- Detecting CXX compiler ABI info
> >>>>>> -- Detecting CXX compiler ABI info - done
> >>>>>> -- Looking for include files CMAKE_HAVE_PTHREAD_H
> >>>>>> -- Looking for include files CMAKE_HAVE_PTHREAD_H - found
> >>>>>> -- Looking for pthread_create in pthreads
> >>>>>> -- Looking for pthread_create in pthreads - not found
> >>>>>> -- Looking for pthread_create in pthread
> >>>>>> -- Looking for pthread_create in pthread - found
> >>>>>> -- Found Threads: TRUE
> >>>>>> -- Looking for XOpenDisplay in /usr/lib/i386-linux-gnu/libX11.so;/usr/lib/i386-linux-gnu/libXext.so
> >>>>>> -- Looking for XOpenDisplay in /usr/lib/i386-linux-gnu/libX11.so;/usr/lib/i386-linux-gnu/libXext.so - found
> >>>>>> -- Looking for gethostbyname
> >>>>>> -- Looking for gethostbyname - found
> >>>>>> -- Looking for connect
> >>>>>> -- Looking for connect - found
> >>>>>> -- Looking for remove
> >>>>>> -- Looking for remove - found
> >>>>>> -- Looking for shmat
> >>>>>> -- Looking for shmat - found
> >>>>>> -- Looking for IceConnectionNumber in ICE
> >>>>>> -- Looking for IceConnectionNumber in ICE - found
> >>>>>> -- Found X11: /usr/lib/i386-linux-gnu/libX11.so
> >>>>>> -- Boost version: 1.42.0
> >>>>>> -- Found the following Boost libraries:
> >>>>>> --   date_time
> >>>>>> --   regex
> >>>>>> --   filesystem
> >>>>>> --   system
> >>>>>> --   program_options
> >>>>>> --   thread
> >>>>>> -- Found OpenSSL: /usr/lib/libssl.so;/usr/lib/libcrypto.so
> >>>>>> -- Looking for Q_WS_X11
> >>>>>> -- Looking for Q_WS_X11 - found
> >>>>>> -- Looking for Q_WS_WIN
> >>>>>> -- Looking for Q_WS_WIN - not found.
> >>>>>> -- Looking for Q_WS_QWS
> >>>>>> -- Looking for Q_WS_QWS - not found.
> >>>>>> -- Looking for Q_WS_MAC
> >>>>>> -- Looking for Q_WS_MAC - not found.
> >>>>>> -- Found Qt-Version 4.7.2 (using /usr/bin/qmake)
> >>>>>> -- Found wxWidgets: TRUE
> >>>>>>
> >>>>>> The build system is configured to install libraries to /usr/local/lib
> >>>>>> Your applications may not be able to find your installed libraries unless you:
> >>>>>> set your LD_LIBRARY_PATH (user specific) or
> >>>>>> update your ld.so configuration (system wide)
> >>>>>> You have an ld.so.conf.d directory on your system, so if you wish to ensure that
> >>>>>> applications find the installed libcoin libraries, system wide, you could install an
> >>>>>> libcoin specific ld.so configuration with:
> >>>>>> sudo make install_ld_conf
> >>>>>>
> >>>>>> -- Configuring done
> >>>>>> -- Generating done
> >>>>>> -- Build files have been written to: /home/user/libcoin
> >>>>>> ----
> >>>>>>
> >>>>>> Now I tried make, without success:
> >>>>>>
> >>>>>> ----
> >>>>>> .....
> >>>>>> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0xf): undefined reference to `BN_init'
> >>>>>> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x1e): undefined reference to `BN_copy'
> >>>>>> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x38): undefined reference to `BN_set_negative'
> >>>>>> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x4f): undefined reference to `BN_clear_free'
> >>>>>> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0xd3): undefined reference to `BN_clear_free'
> >>>>>> ../../lib/libcoin.a(Script.o): In function `operator<<(CBigNum const&, unsigned int)':
> >>>>>> Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&, unsigned int)]+0x16): undefined reference to `BN_init'
> >>>>>> Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&, unsigned int)]+0x2c): undefined reference to `BN_lshift'
> >>>>>> Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&, unsigned int)]+0xad): undefined reference to `BN_clear_free'
> >>>>>> ../../lib/libcoin.a(Script.o): In function `operator>>(CBigNum const&, unsigned int)':
> >>>>>> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned int)]+0xf): undefined reference to `BN_init'
> >>>>>> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned int)]+0x1e): undefined reference to `BN_copy'
> >>>>>> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned int)]+0x47): undefined reference to `BN_clear_free'
> >>>>>> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned int)]+0xcb): undefined reference to `BN_clear_free'
> >>>>>> ../../lib/libcoin.a(Script.o): In function `operator!=(CBigNum const&, CBigNum const&)':
> >>>>>> Script.cpp:(.text._ZneRK7CBigNumS1_[operator!=(CBigNum const&, CBigNum const&)]+0x14): undefined reference to `BN_cmp'
> >>>>>> ../../lib/libcoin.a(Script.o): In function `operator>(CBigNum const&, CBigNum const&)':
> >>>>>> Script.cpp:(.text._ZgtRK7CBigNumS1_[operator>(CBigNum const&, CBigNum const&)]+0x14): undefined reference to `BN_cmp'
> >>>>>> ../../lib/libcoin.a(Script.o): In function `uint256 Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > > >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >)':
> >>>>>> Script.cpp:(.text._Z4HashIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEE7uint256T_S8_[uint256 Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > > >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >)]+0x6d): undefined reference to `SHA256'
> >>>>>> Script.cpp:(.text._Z4HashIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEE7uint256T_S8_[uint256 Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > > >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >)]+0xb8): undefined reference to `SHA256'
> >>>>>> collect2: ld returned 1 exit status
> >>>>>> make[2]: *** [bin/bitcoind] Error 1
> >>>>>> make[1]: *** [applications/bitcoind/CMakeFiles/app_bitcoind.dir/all] Error 2
> >>>>>> make: *** [all] Error 2
> >>>>>> -----
> >>>>>>
> >>>>>> What can I do?!
> >>>>>>
> >>>>>> Best,
> >>>>>> Thiago
> >>>>>>
> >>>>>>
> >>>>>> On 1 February 2012 12:18, Michael Gr?nager <gronager at ceptacle.com> wrote:
> >>>>>> Dear Bitcoiners,
> >>>>>>
> >>>>>> libcoin is now in a state ready for its first release, which I would like to share with you!
> >>>>>>
> >>>>>> === libcoin is a crypto currency library based on the bitcoin/bitcoin "Satoshi" client. ===
> >>>>>>
> >>>>>> Copenhagen, Denmark - 1st February 2012 Ceptacle announces the release of the first version of the crypto currency library "libcoin" based on the bitcoin/bitcoin "Satoshi" client.
> >>>>>>
> >>>>>> libcoin also maintains a version of bitcoind that is a 100% compatible drop-in replacement of the bitcoin/bitcoind client: You can use it on the same computer on the same files and you can call it with the same scripts. And you can easily extend it without touching the basic bitcoin source files.
> >>>>>>
> >>>>>> The libcoin/bitcoind client downloads the entire block chain 3.5 times faster than the bitcoin/bitcoind client. This is less than 90 minutes on a modern laptop!
> >>>>>>
> >>>>>> In libcoin, the Satoshi client code has been completely refactored, properly encapsulating classes, removing all globals, moving from threads and mutexes to a pure asynchronous approach. Functionalities have been divided into logical units and libraries, minimizing dependencies for e.g. thin clients.
> >>>>>>
> >>>>>> libcoin is chain agnostic, all chain (bitcoin, testnet, namecoin, litecoin, ...) specific settings are maintained from a single class (Chain) and hence experiments with chain settings, mining, security and digital currencies for research and educational purposes are easily accessible. See the ponzicoin example for how you define your own chain.
> >>>>>>
> >>>>>> The build system of libcoin is based on CMake and supports builds of static and dynamic libraries on Linux, Mac OS X, and Windows.
> >>>>>>
> >>>>>> The libcoin license is LGPL v. 3. This mean that you can use it in open source as well as in commercial projects, but improvements should go back into the libcoin library.
> >>>>>>
> >>>>>> ======
> >>>>>>
> >>>>>> Read more on libcoin on: http://github.com/ceptacle/libcoin/wiki
> >>>>>>
> >>>>>> Join libcoin on twitter: http://twitter.com/libcoin
> >>>>>>
> >>>>>> Download "libcoin Satoshi release": http://github.com/ceptacle/libcoin/zipball/v0.4.0.1
> >>>>>>
> >>>>>> Best regards,
> >>>>>>
> >>>>>> Michael Gronager, PhD
> >>>>>> Director, Ceptacle
> >>>>>> Jens Juels Gade 33
> >>>>>> 2100 Copenhagen E
> >>>>>> Mobile: +45 31 45 14 01
> >>>>>> E-mail: gronager at ceptacle.com
> >>>>>> Web: http://www.ceptacle.com/
> >>>>>>
> >>>>>>
> >>>>>> ------------------------------------------------------------------------------
> >>>>>> Keep Your Developer Skills Current with LearnDevNow!
> >>>>>> The most comprehensive online learning library for Microsoft developers
> >>>>>> is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3, MVC3,
> >>>>>> Metro Style Apps, more. Free future releases when you subscribe now!
> >>>>>> http://p.sf.net/sfu/learndevnow-d2d
> >>>>>> _______________________________________________
> >>>>>> Bitcoin-development mailing list
> >>>>>> Bitcoin-development at lists.sourceforge.net
> >>>>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> >>>>>>
> >>>>>
> >>>>> Michael Gronager, PhD
> >>>>> Director, Ceptacle
> >>>>> Jens Juels Gade 33
> >>>>> 2100 Copenhagen E
> >>>>> Mobile: +45 31 45 14 01
> >>>>> E-mail: gronager at ceptacle.com
> >>>>> Web: http://www.ceptacle.com/
> >>>>>
> >>>>>
> >>>>>
> >>>>
> >>>>
> >>>
> >>> Michael Gronager, PhD
> >>> Director, Ceptacle
> >>> Jens Juels Gade 33
> >>> 2100 Copenhagen E
> >>> Mobile: +45 31 45 14 01
> >>> E-mail: gronager at ceptacle.com
> >>> Web: http://www.ceptacle.com/
> >>>
> >>>
> >>
> >> Michael Gronager, PhD
> >> Director, Ceptacle
> >> Jens Juels Gade 33
> >> 2100 Copenhagen E
> >> Mobile: +45 31 45 14 01
> >> E-mail: gronager at ceptacle.com
> >> Web: http://www.ceptacle.com/
> >>
> >>
> >
> > Michael Gronager, PhD
> > Director, Ceptacle
> > Jens Juels Gade 33
> > 2100 Copenhagen E
> > Mobile: +45 31 45 14 01
> > E-mail: gronager at ceptacle.com
> > Web: http://www.ceptacle.com/
> >
> >
> 
> Michael Gronager, PhD
> Director, Ceptacle
> Jens Juels Gade 33
> 2100 Copenhagen E
> Mobile: +45 31 45 14 01
> E-mail: gronager at ceptacle.com
> Web: http://www.ceptacle.com/
> 
> 

Michael Gronager, PhD
Director, Ceptacle
Jens Juels Gade 33
2100 Copenhagen E
Mobile: +45 31 45 14 01
E-mail: gronager at ceptacle.com
Web: http://www.ceptacle.com/




From gronager at ceptacle.com  Thu Mar 22 11:35:12 2012
From: gronager at ceptacle.com (=?iso-8859-1?Q?Michael_Gr=F8nager?=)
Date: Thu, 22 Mar 2012 12:35:12 +0100
Subject: [Bitcoin-development] Announcement: libcoin
In-Reply-To: <CAJSM8J2cjazkGn9vCdoqEKtDP0y1geftn7pJLcTmAGa4FH9BTA@mail.gmail.com>
References: <D55C3D18-8286-44E9-B877-6FCE7C05E980@ceptacle.com>
	<CAJSM8J0zqF2=Poknzc8R7TrTJ0DWCMBw2-K9gGhUP_Qf+J6eFg@mail.gmail.com>
	<4FF4A408-F8C9-4A50-8B13-13D3686BEB09@ceptacle.com>
	<CAJSM8J3bZYfpE9EATcYe=79s_RxvGG9BrdRQR9ivwtZnuPsL0w@mail.gmail.com>
	<CAJSM8J2nhoKsOnAeF8qBW3zOfp=sJ25sd8gnw2dMJ3GgkohDjQ@mail.gmail.com>
	<C3C58158-0DED-41A1-B4D2-BF746AFE717A@ceptacle.com>
	<CAJSM8J3255LpXbHRF+zEi0QRoM0mwuRP3FSNbSwSyz-_ge=Few@mail.gmail.com>
	<3C518667-C2A6-4D1F-988D-888964925489@ceptacle.com>
	<CAJSM8J2-+uHKJg9xjqtz785HBNY8wXtJLnw70jP0_HgNspx4Tg@mail.gmail.com>
	<AB5AEA73-93BD-440E-89F0-F0951047D71A@ceptacle.com>
	<CAJSM8J2ytXR0RSL=3+Se6mggH+pDmnkSx+CUp-bcod4qmJ3ObA@mail.gmail.com>
	<07A82C1E-AE1D-44DC-AF02-38A3D755FA35@ceptacle.com>
	<CAJSM8J2cjazkGn9vCdoqEKtDP0y1geftn7pJLcTmAGa4FH9BTA@mail.gmail.com>
Message-ID: <264BCBC5-8ADC-46FA-B756-6CEEC18CAE75@ceptacle.com>

What you list below was actually the plan - just havn't gotten there yet, but it will be dead easy.

/M


On 22/03/2012, at 11:50, Martinx - ????? wrote:

> Michael,
> 
>  Since libcoin is "chain agnostic", I was wondering if the project can be used like this:
> 
>  When I install it with "make install", I would like to have something like this:
> 
>  Regular file: /usr/local/bin/libcoincore # or whatever you like
> 
>  Symlink -> Regular file
> 
>  /usr/local/bit/bitcoind ->  /usr/local/bin/libcoincore  # bitcoind is a symlink to libcoincore
> 
>  /usr/local/bit/litecoind ->  /usr/local/bin/libcoincore  # litecoind is a symlink to libcoincore
> 
>  /usr/local/bit/devcoind ->  /usr/local/bin/libcoincore  # devcoind is a symlink to libcoincore
> 
>  /usr/local/bit/namecoind ->  /usr/local/bin/libcoincore  # devcoind is a symlink to libcoincore
> 
>  ...and so on...
> 
>  So, libcoincore will interpret the ARGV[0] and, for each string, it will initiate the appropriate internal functions...
> 
>  I don't know if Libcoin already does something like that... I'm not a developer/code reader... Just a small nerd with big ideas...  ^_^
> 
> Thanks!
> Thiago
> 
> 2012/2/28 Michael Gr?nager <gronager at ceptacle.com>
> Hi again - and thanks for testing and finding this!
> 
> I have fixed the bug you reported:
> 
> The culprit was an implicit string constructor for the ChainAddress that caused creation of a not fully initialized ChainAddress. The right way to do it is using chain::getAddress(string) as the ChainAddress is chain specific.
> 
> A git pull will fix it ;)
> 
> Cheers,
> 
> Michael
> 
> 
> On 27/02/2012, at 20:03, Martinx - ????? wrote:
> 
> > AWESOME!! Thank you!!
> >
> > Anyway, I found a new problem... lol
> >
> > /usr/local/bin/bitcoind getinfo #okay
> > {
> >    "version" : 40001,
> >    "blocks" : 168753,
> >    "connections" : 8,
> >    "difficulty" : 1376302.26788638,
> >    "testnet" : false
> > }
> >
> > /usr/local/bin/bitcoind getaccountaddress ""  # okay...
> > 1J4vNcvEdeCuLH4yvyoC2gxFEF4zquoJ87
> >
> > /usr/local/bin/bitcoind listaccounts # NOT okay...
> > {
> > }
> >
> > /usr/local/bin/bitcoind getaccountaddress "teste" # okay
> > 1E6pGh6AAtuJdFXheZMp1zdYmvdqAQn9QT
> >
> > /usr/local/bin/bitcoind listaccounts # NOT okay...
> > {
> >    "teste" : 0.00000000
> > }
> >
> > Where is my default account listed at "listaccounts" output?!
> >
> > Best,
> > Thiago
> >
> > 2012/2/26 Michael Gr?nager <gronager at ceptacle.com>
> > And if you do an update now "help" is there too ;)
> >
> > /M
> >
> > On 25/02/2012, at 03:11, Martinx - ????? wrote:
> >
> >> Thank you!!!
> >>
> >> It is all working now! Except "help"...
> >>
> >> Nice work Michael!!
> >>
> >> Best,
> >> Thiago
> >>
> >> 2012/2/24 Michael Gr?nager <gronager at ceptacle.com>
> >> OK - didn't took the weekend:
> >>
> >> support for "port" is on github now :)
> >>
> >> Only took two lines:
> >>
> >>          ("port", value<unsigned short>(&port)->default_value(8333), "Listen on specified port for the p2p protocol")
> >>
> >> and using the port option in the Node constructor (was there already):
> >>
> >>      Node node(chain, data_dir, args.count("nolisten") ? "" : "0.0.0.0", lexical_cast<string>(port)); // it is also here we specify the use of a proxy!
> >>
> >> /M
> >>
> >>
> >>
> >> On 24/02/2012, at 19:49, Martinx - ????? wrote:
> >>
> >>> Hi Michael,
> >>>
> >>> Thank you for your attention!
> >>>
> >>> Now, I'm trying to start libcoin's bitcoind using high ports but, it always try to listen at 8332, no matter what I "say"...
> >>>
> >>> Look:
> >>>
> >>> $ cat .bitcoin/bitcoin.conf
> >>> server=1
> >>> daemon=1
> >>> rpcuser=libcoin
> >>> rpcpassword=LibCoin13
> >>> rpcport=10332
> >>> port=10333
> >>>
> >>> But:
> >>>
> >>> /usr/local/bin/bitcoind
> >>> Error: Address already in use
> >>>
> >>> terminate called after throwing an instance of 'DbException'
> >>> what():  DbEnv::close: Invalid argument
> >>> Aborted
> >>>
> >>> When I "strace it", I can see:
> >>>
> >>> ...
> >>> bind(12, {sa_family=AF_INET, sin_port=htons(8333), sin_addr=inet_addr("0.0.0.0")}, 16) = -1 EADDRINUSE (Address already in use)
> >>> ...
> >>>
> >>> I already tried:
> >>>
> >>> /usr/local/bin/bitcoind --rpcport 10332
> >>> /usr/local/bin/bitcoind --rpcport=10332
> >>>
> >>> Without success...
> >>>
> >>> Thanks again!
> >>> Thiago
> >>>
> >>> 2012/2/24 Michael Gr?nager <gronager at ceptacle.com>
> >>> Hi Thiago,
> >>>
> >>> Forgot to comment on the two latter:
> >>>
> >>>> $ bitcoind getaccountaddress ""
> >>>> HTTP error code: 401
> >>>> Error: couldn't parse reply from server
> >>>>
> >>>> $ bitcoind listaccounts
> >>>> HTTP error code: 401
> >>>> Error: couldn't parse reply from server
> >>>>
> >>>
> >>> 401 = permission denied - you need to setup username / password either on the commandline or in the bicoin.conf file to access those commands...
> >>>
> >>> See in the bitcoind.cpp file for commands that you can use with and without auth...
> >>>
> >>> Those that contains an "auth" requires auth:
> >>>
> >>>     server.registerMethod(method_ptr(new GetBalance(wallet)), auth);
> >>>
> >>> As opposed to:
> >>>
> >>>     server.registerMethod(method_ptr(new GetInfo(node)));
> >>>
> >>> auth is defined by:
> >>>
> >>>     Auth auth(rpc_user, rpc_pass); // if rpc_user and rpc_pass are not set, all authenticated methods becomes disallowed.
> >>>
> >>> so you just experience the case explained in the comment ;) I admit that the output could be more readable, though!
> >>>
> >>> /M
> >>>
> >>>
> >>>>
> >>>> Any tips?! lol
> >>>>
> >>>> Thanks!
> >>>> Thiago
> >>>>
> >>>> 2012/2/23 Martinx - ????? <thiagocmartinsc at gmail.com>
> >>>> AWESOME!!!
> >>>>
> >>>> I can compile libcoin at my Ubuntu 11.10... I just need to install:
> >>>>
> >>>> sudo aptitude install libboost1.46-all-dev
> >>>>
> >>>> ...alongside with another already installed dependencies, and now it works!!
> >>>>
> >>>> Thank you!
> >>>> Thiago
> >>>>
> >>>> 2012/2/23 Michael Gr?nager <gronager at ceptacle.com>
> >>>> Hi Martinx,
> >>>>
> >>>> Another note:
> >>>>
> >>>> boost 1.42 and openssl 1.0 has a conflict (you will see it when you try to compile coinHTTP with that specific combination: sslv2 has been removed from openssl, but boost still references it.)
> >>>>
> >>>> You should do a :
> >>>>
> >>>> sudo apt-get upgrade libboost-dev-all
> >>>>
> >>>> to get the 1.46.1 library
> >>>>
> >>>> /M
> >>>>
> >>>>
> >>>> On 23/02/2012, at 18:31, Martinx - ????? wrote:
> >>>>
> >>>>> Hi Michael!
> >>>>>
> >>>>> Thank you for libcoin! It is a awesome evolution for Bitcoin and for the CryptoCurrencies as a hole... Thanks!!!
> >>>>>
> >>>>> Anyway, I am unable to compile libcoin under my Ubuntu 11.04. At this machine, I have compiled and running Bitcoin (from sources), Namecoin, Devcoin, Litecoin, IXcoin and I0coin, all from sources but, when I try to compile libcoin, I got:
> >>>>>
> >>>>> ----
> >>>>> user at desk:~/libcoin$ ./configure
> >>>>> -- The C compiler identification is GNU
> >>>>> -- The CXX compiler identification is GNU
> >>>>> -- Check for working C compiler: /usr/bin/gcc
> >>>>> -- Check for working C compiler: /usr/bin/gcc -- works
> >>>>> -- Detecting C compiler ABI info
> >>>>> -- Detecting C compiler ABI info - done
> >>>>> -- Check for working CXX compiler: /usr/bin/c++
> >>>>> -- Check for working CXX compiler: /usr/bin/c++ -- works
> >>>>> -- Detecting CXX compiler ABI info
> >>>>> -- Detecting CXX compiler ABI info - done
> >>>>> -- Looking for include files CMAKE_HAVE_PTHREAD_H
> >>>>> -- Looking for include files CMAKE_HAVE_PTHREAD_H - found
> >>>>> -- Looking for pthread_create in pthreads
> >>>>> -- Looking for pthread_create in pthreads - not found
> >>>>> -- Looking for pthread_create in pthread
> >>>>> -- Looking for pthread_create in pthread - found
> >>>>> -- Found Threads: TRUE
> >>>>> -- Looking for XOpenDisplay in /usr/lib/i386-linux-gnu/libX11.so;/usr/lib/i386-linux-gnu/libXext.so
> >>>>> -- Looking for XOpenDisplay in /usr/lib/i386-linux-gnu/libX11.so;/usr/lib/i386-linux-gnu/libXext.so - found
> >>>>> -- Looking for gethostbyname
> >>>>> -- Looking for gethostbyname - found
> >>>>> -- Looking for connect
> >>>>> -- Looking for connect - found
> >>>>> -- Looking for remove
> >>>>> -- Looking for remove - found
> >>>>> -- Looking for shmat
> >>>>> -- Looking for shmat - found
> >>>>> -- Looking for IceConnectionNumber in ICE
> >>>>> -- Looking for IceConnectionNumber in ICE - found
> >>>>> -- Found X11: /usr/lib/i386-linux-gnu/libX11.so
> >>>>> -- Boost version: 1.42.0
> >>>>> -- Found the following Boost libraries:
> >>>>> --   date_time
> >>>>> --   regex
> >>>>> --   filesystem
> >>>>> --   system
> >>>>> --   program_options
> >>>>> --   thread
> >>>>> -- Found OpenSSL: /usr/lib/libssl.so;/usr/lib/libcrypto.so
> >>>>> -- Looking for Q_WS_X11
> >>>>> -- Looking for Q_WS_X11 - found
> >>>>> -- Looking for Q_WS_WIN
> >>>>> -- Looking for Q_WS_WIN - not found.
> >>>>> -- Looking for Q_WS_QWS
> >>>>> -- Looking for Q_WS_QWS - not found.
> >>>>> -- Looking for Q_WS_MAC
> >>>>> -- Looking for Q_WS_MAC - not found.
> >>>>> -- Found Qt-Version 4.7.2 (using /usr/bin/qmake)
> >>>>> -- Found wxWidgets: TRUE
> >>>>>
> >>>>> The build system is configured to install libraries to /usr/local/lib
> >>>>> Your applications may not be able to find your installed libraries unless you:
> >>>>>  set your LD_LIBRARY_PATH (user specific) or
> >>>>>  update your ld.so configuration (system wide)
> >>>>> You have an ld.so.conf.d directory on your system, so if you wish to ensure that
> >>>>> applications find the installed libcoin libraries, system wide, you could install an
> >>>>> libcoin specific ld.so configuration with:
> >>>>>  sudo make install_ld_conf
> >>>>>
> >>>>> -- Configuring done
> >>>>> -- Generating done
> >>>>> -- Build files have been written to: /home/user/libcoin
> >>>>> ----
> >>>>>
> >>>>> Now I tried make, without success:
> >>>>>
> >>>>> ----
> >>>>> .....
> >>>>> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0xf): undefined reference to `BN_init'
> >>>>> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x1e): undefined reference to `BN_copy'
> >>>>> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x38): undefined reference to `BN_set_negative'
> >>>>> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x4f): undefined reference to `BN_clear_free'
> >>>>> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0xd3): undefined reference to `BN_clear_free'
> >>>>> ../../lib/libcoin.a(Script.o): In function `operator<<(CBigNum const&, unsigned int)':
> >>>>> Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&, unsigned int)]+0x16): undefined reference to `BN_init'
> >>>>> Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&, unsigned int)]+0x2c): undefined reference to `BN_lshift'
> >>>>> Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&, unsigned int)]+0xad): undefined reference to `BN_clear_free'
> >>>>> ../../lib/libcoin.a(Script.o): In function `operator>>(CBigNum const&, unsigned int)':
> >>>>> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned int)]+0xf): undefined reference to `BN_init'
> >>>>> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned int)]+0x1e): undefined reference to `BN_copy'
> >>>>> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned int)]+0x47): undefined reference to `BN_clear_free'
> >>>>> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&, unsigned int)]+0xcb): undefined reference to `BN_clear_free'
> >>>>> ../../lib/libcoin.a(Script.o): In function `operator!=(CBigNum const&, CBigNum const&)':
> >>>>> Script.cpp:(.text._ZneRK7CBigNumS1_[operator!=(CBigNum const&, CBigNum const&)]+0x14): undefined reference to `BN_cmp'
> >>>>> ../../lib/libcoin.a(Script.o): In function `operator>(CBigNum const&, CBigNum const&)':
> >>>>> Script.cpp:(.text._ZgtRK7CBigNumS1_[operator>(CBigNum const&, CBigNum const&)]+0x14): undefined reference to `BN_cmp'
> >>>>> ../../lib/libcoin.a(Script.o): In function `uint256 Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > > >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >)':
> >>>>> Script.cpp:(.text._Z4HashIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEE7uint256T_S8_[uint256 Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > > >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >)]+0x6d): undefined reference to `SHA256'
> >>>>> Script.cpp:(.text._Z4HashIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEE7uint256T_S8_[uint256 Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > > >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >)]+0xb8): undefined reference to `SHA256'
> >>>>> collect2: ld returned 1 exit status
> >>>>> make[2]: *** [bin/bitcoind] Error 1
> >>>>> make[1]: *** [applications/bitcoind/CMakeFiles/app_bitcoind.dir/all] Error 2
> >>>>> make: *** [all] Error 2
> >>>>> -----
> >>>>>
> >>>>> What can I do?!
> >>>>>
> >>>>> Best,
> >>>>> Thiago
> >>>>>
> >>>>>
> >>>>> On 1 February 2012 12:18, Michael Gr?nager <gronager at ceptacle.com> wrote:
> >>>>> Dear Bitcoiners,
> >>>>>
> >>>>> libcoin is now in a state ready for its first release, which I would like to share with you!
> >>>>>
> >>>>> === libcoin is a crypto currency library based on the bitcoin/bitcoin "Satoshi" client. ===
> >>>>>
> >>>>> Copenhagen, Denmark - 1st February 2012 Ceptacle announces the release of the first version of the crypto currency library "libcoin" based on the bitcoin/bitcoin "Satoshi" client.
> >>>>>
> >>>>> libcoin also maintains a version of bitcoind that is a 100% compatible drop-in replacement of the bitcoin/bitcoind client: You can use it on the same computer on the same files and you can call it with the same scripts. And you can easily extend it without touching the basic bitcoin source files.
> >>>>>
> >>>>> The libcoin/bitcoind client downloads the entire block chain 3.5 times faster than the bitcoin/bitcoind client. This is less than 90 minutes on a modern laptop!
> >>>>>
> >>>>> In libcoin, the Satoshi client code has been completely refactored, properly encapsulating classes, removing all globals, moving from threads and mutexes to a pure asynchronous approach. Functionalities have been divided into logical units and libraries, minimizing dependencies for e.g. thin clients.
> >>>>>
> >>>>> libcoin is chain agnostic, all chain (bitcoin, testnet, namecoin, litecoin, ...) specific settings are maintained from a single class (Chain) and hence experiments with chain settings, mining, security and digital currencies for research and educational purposes are easily accessible. See the ponzicoin example for how you define your own chain.
> >>>>>
> >>>>> The build system of libcoin is based on CMake and supports builds of static and dynamic libraries on Linux, Mac OS X, and Windows.
> >>>>>
> >>>>> The libcoin license is LGPL v. 3. This mean that you can use it in open source as well as in commercial projects, but improvements should go back into the libcoin library.
> >>>>>
> >>>>> ======
> >>>>>
> >>>>> Read more on libcoin on: http://github.com/ceptacle/libcoin/wiki
> >>>>>
> >>>>> Join libcoin on twitter: http://twitter.com/libcoin
> >>>>>
> >>>>> Download "libcoin Satoshi release": http://github.com/ceptacle/libcoin/zipball/v0.4.0.1
> >>>>>
> >>>>> Best regards,
> >>>>>
> >>>>> Michael Gronager, PhD
> >>>>> Director, Ceptacle
> >>>>> Jens Juels Gade 33
> >>>>> 2100 Copenhagen E
> >>>>> Mobile: +45 31 45 14 01
> >>>>> E-mail: gronager at ceptacle.com
> >>>>> Web: http://www.ceptacle.com/
> >>>>>
> >>>>>
> >>>>> ------------------------------------------------------------------------------
> >>>>> Keep Your Developer Skills Current with LearnDevNow!
> >>>>> The most comprehensive online learning library for Microsoft developers
> >>>>> is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3, MVC3,
> >>>>> Metro Style Apps, more. Free future releases when you subscribe now!
> >>>>> http://p.sf.net/sfu/learndevnow-d2d
> >>>>> _______________________________________________
> >>>>> Bitcoin-development mailing list
> >>>>> Bitcoin-development at lists.sourceforge.net
> >>>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> >>>>>
> >>>>
> >>>> Michael Gronager, PhD
> >>>> Director, Ceptacle
> >>>> Jens Juels Gade 33
> >>>> 2100 Copenhagen E
> >>>> Mobile: +45 31 45 14 01
> >>>> E-mail: gronager at ceptacle.com
> >>>> Web: http://www.ceptacle.com/
> >>>>
> >>>>
> >>>>
> >>>
> >>>
> >>
> >> Michael Gronager, PhD
> >> Director, Ceptacle
> >> Jens Juels Gade 33
> >> 2100 Copenhagen E
> >> Mobile: +45 31 45 14 01
> >> E-mail: gronager at ceptacle.com
> >> Web: http://www.ceptacle.com/
> >>
> >>
> >
> > Michael Gronager, PhD
> > Director, Ceptacle
> > Jens Juels Gade 33
> > 2100 Copenhagen E
> > Mobile: +45 31 45 14 01
> > E-mail: gronager at ceptacle.com
> > Web: http://www.ceptacle.com/
> >
> >
> 
> Michael Gronager, PhD
> Director, Ceptacle
> Jens Juels Gade 33
> 2100 Copenhagen E
> Mobile: +45 31 45 14 01
> E-mail: gronager at ceptacle.com
> Web: http://www.ceptacle.com/
> 
> 

Michael Gronager, PhD
Director, Ceptacle
Jens Juels Gade 33
2100 Copenhagen E
Mobile: +45 31 45 14 01
E-mail: gronager at ceptacle.com
Web: http://www.ceptacle.com/




From luke at dashjr.org  Thu Mar 22 14:00:40 2012
From: luke at dashjr.org (Luke-Jr)
Date: Thu, 22 Mar 2012 10:00:40 -0400
Subject: [Bitcoin-development] Adding callback hooks to the satoshi
	client
In-Reply-To: <CABr1YTc0TOvfyFNY4CTaOiTa3WWb-5JHjQOTarB=8zZ+DqiUFg@mail.gmail.com>
References: <CABr1YTc0TOvfyFNY4CTaOiTa3WWb-5JHjQOTarB=8zZ+DqiUFg@mail.gmail.com>
Message-ID: <201203221000.41636.luke@dashjr.org>

On Thursday, March 22, 2012 1:13:13 AM Eric Lombrozo wrote:
> I would like to propose adding these callback hooks to the main
> branch. I am willing to help locate these key points, reorganize the
> code to place these methods in separate source files, define a callback
> mechanism, and contribute source code.

I'm not sure it's a good idea to let other code into the main wallet-handling 
process/memory space. I'd suggest looking into designing a workable Wallet 
Protocol for general use between the wallet and GUIs/applications.

https://en.bitcoin.it/wiki/Wallet_protocol has a draft I made a long time ago, 
but really seems a bit overcomplicated.



From elombrozo at gmail.com  Thu Mar 22 15:23:17 2012
From: elombrozo at gmail.com (Eric Lombrozo)
Date: Thu, 22 Mar 2012 08:23:17 -0700
Subject: [Bitcoin-development] Adding callback hooks to the satoshi
	client
In-Reply-To: <201203221000.41636.luke@dashjr.org>
References: <CABr1YTc0TOvfyFNY4CTaOiTa3WWb-5JHjQOTarB=8zZ+DqiUFg@mail.gmail.com>
	<201203221000.41636.luke@dashjr.org>
Message-ID: <CABr1YTd4+KES75cHqKSa0Gwz62nJnMVsTANVh_qzuSXqoYZAew@mail.gmail.com>

The callback architecture could be such that other code would never
need to enter into the wallet-handling process/memory space. For
instance, client applications could subscribe a particular URL to get
sent an HTTP POST.

For the apps I've been working on, there really isn't any need to
access the wallet space. I was talking more about events like "A new
transaction was just seen" or "A new block was just seen", like what
libcoin seems to support (sorry, Michael, I haven't really had a
chance to look at it in depth but I will). Then there are other types
of events for other bitcoin messages could also be useful: new addr,
new node connected, node disconnected, bitcoin alert, etc...

Then there are events for dealing with potential attacks: DoS attempt,
double-spend attempts (two transactions seen with valid signatures
claiming the same output), node sending malformed messages, etc...

And then there are alerts pertaining to the status of the bitcoind
process itself: bitcoind started, bitcoind ready to accept
connections, bitcoind stopping, etc...

None of these events require the callback subscriber to have any
access to the bitcoind process/memory space and all the I/O could be
done via IPC or over network sockets.



From thiagocmartinsc at gmail.com  Thu Mar 22 10:48:29 2012
From: thiagocmartinsc at gmail.com (=?ISO-2022-JP?B?TWFydGlueCAtIBskQiU4JSchPCVgJTobKEI=?=)
Date: Thu, 22 Mar 2012 07:48:29 -0300
Subject: [Bitcoin-development] Announcement: libcoin
In-Reply-To: <8CEEE576-37DF-4101-9593-73D5FB66D52F@ceptacle.com>
References: <D55C3D18-8286-44E9-B877-6FCE7C05E980@ceptacle.com>
	<CAJSM8J0zqF2=Poknzc8R7TrTJ0DWCMBw2-K9gGhUP_Qf+J6eFg@mail.gmail.com>
	<4FF4A408-F8C9-4A50-8B13-13D3686BEB09@ceptacle.com>
	<CAJSM8J3bZYfpE9EATcYe=79s_RxvGG9BrdRQR9ivwtZnuPsL0w@mail.gmail.com>
	<CAJSM8J2nhoKsOnAeF8qBW3zOfp=sJ25sd8gnw2dMJ3GgkohDjQ@mail.gmail.com>
	<C3C58158-0DED-41A1-B4D2-BF746AFE717A@ceptacle.com>
	<CAJSM8J3255LpXbHRF+zEi0QRoM0mwuRP3FSNbSwSyz-_ge=Few@mail.gmail.com>
	<3C518667-C2A6-4D1F-988D-888964925489@ceptacle.com>
	<CAJSM8J2-+uHKJg9xjqtz785HBNY8wXtJLnw70jP0_HgNspx4Tg@mail.gmail.com>
	<AB5AEA73-93BD-440E-89F0-F0951047D71A@ceptacle.com>
	<CAJSM8J2ytXR0RSL=3+Se6mggH+pDmnkSx+CUp-bcod4qmJ3ObA@mail.gmail.com>
	<07A82C1E-AE1D-44DC-AF02-38A3D755FA35@ceptacle.com>
	<CAJSM8J15LBiT9ojrPDE1-TXqmBLXcVvAmWw0e=5nQfLtMQ42Zg@mail.gmail.com>
	<8CEEE576-37DF-4101-9593-73D5FB66D52F@ceptacle.com>
Message-ID: <CAJSM8J2Xe1EnFxKFAGdH+bx2AVgoRYMg=VsdEmvO9S=x6gbMNQ@mail.gmail.com>

Hi Michael,

 NOTE: Re-add bitcoin-dev to this thread on Cc...

 I'll test this ASAP! I REALLY need this feature (blockchain server <->
wallet client).

 I just want ask you some things...

 1- How close is Libcoin with original Bitcoin? I mean, the output is a
little different, the bitcoind help output was disabled and, I'm afraid
that Libcoin can possibly being distant from Bitcoin in the future... That
can happen?!

 2- Do you have plans to update Libcoin on every new upstream Bitcoin
release? How fast will be this updates? Do you need more resources/people
working on it?


 Another questions not involved directly with Libcoin/Bitcoin but, I'll
need it for my future Bitcoin projects, and Libcoin is on my radar:

 1- Do you know about Diaspora* Project?

 2- Do you have skills in Ruby on Rails development?


Thank you!
Thiago

2012/3/3 Michael Gr?nager <gronager at ceptacle.com>

> Hi Martin,
>
> There are a couple of options of doing similarly...
>
> In the libcoin repository you will find some code for btc and btcd, it is
> some code I wrote a while ago and it needs to be updated. It functions as a
> bitcoind master and slave. The btcd keeps the blockchain, but no wallet.
> btc keeps the wallet and contact the btcd to get transaction info (like
> send an address and get its transactions or send a transaction id and get
> its details). It works (or worked when I wrote them) with the wallet.dat,
> but needs a little update.
>
> You could e.g. run one btcd on the machine and several btc instances to
> get the functionality you asked for.
>
> Further, btcd also enables a web wallet, where the private keys are stored
> in your browsers local-store.
>
> I will get the application updated, but most likely in a bit other setup
> as it is something I intend to marketize in the near future.
>
> Hope this answers your question.
>
> Cheers,
>
> Michael
>
> On 03/03/2012, at 02:04, Martinx - ????? wrote:
>
> > Michael,
> >
> > libcoin is AWESOME! Thanks!!!
> >
> > Can I do the following scenario with libcoin ? :
> >
> > 1- Create a regular Linux user called "blockchain", with home dir
> pointed to /var/lib/libcoin/ (more or like Ubuntu/Debian mysql does);
> >
> > 2- Start "bitcoind" under user "blockchain" (the Bitcoin blockchain)
> will be downloaded to /var/lib/libcoin/bitcoin/ directory);
> >
> > 3- As another regular user, called "michael", I would like to run
> "bitcoind" too but, I do not want to re-download the blockchain to its own
> subdir, I want instead, to consult it (blockchain) through libcoin itself
> (not by socket of JSON)...
> >
> > So, the /home/michael/.bitcoin/ directory will have only wallet.dat and
> related files, not the blockchain.
> >
> > This is more or less what we can do with Bitcoin Electrum alternate
> client but, with Electrum, it copy the whole blockchain to mysql... This is
> terrible from my point of view, I think that there is no need to duplicate
> the blockchain within MySQL in anyway.
> >
> > I just imagine a bitcoin splited in two, blockchain in one side and
> wallet in the other side.
> >
> > This is possible with libcoin?!
> >
> > Thank you again!
> >
> > Best,
> > Thiago
> >
> > 2012/2/28 Michael Gr?nager <gronager at ceptacle.com>
> > Hi again - and thanks for testing and finding this!
> >
> > I have fixed the bug you reported:
> >
> > The culprit was an implicit string constructor for the ChainAddress that
> caused creation of a not fully initialized ChainAddress. The right way to
> do it is using chain::getAddress(string) as the ChainAddress is chain
> specific.
> >
> > A git pull will fix it ;)
> >
> > Cheers,
> >
> > Michael
> >
> >
> > On 27/02/2012, at 20:03, Martinx - ????? wrote:
> >
> >> AWESOME!! Thank you!!
> >>
> >> Anyway, I found a new problem... lol
> >>
> >> /usr/local/bin/bitcoind getinfo #okay
> >> {
> >>   "version" : 40001,
> >>   "blocks" : 168753,
> >>   "connections" : 8,
> >>   "difficulty" : 1376302.26788638,
> >>   "testnet" : false
> >> }
> >>
> >> /usr/local/bin/bitcoind getaccountaddress ""  # okay...
> >> 1J4vNcvEdeCuLH4yvyoC2gxFEF4zquoJ87
> >>
> >> /usr/local/bin/bitcoind listaccounts # NOT okay...
> >> {
> >> }
> >>
> >> /usr/local/bin/bitcoind getaccountaddress "teste" # okay
> >> 1E6pGh6AAtuJdFXheZMp1zdYmvdqAQn9QT
> >>
> >> /usr/local/bin/bitcoind listaccounts # NOT okay...
> >> {
> >>   "teste" : 0.00000000
> >> }
> >>
> >> Where is my default account listed at "listaccounts" output?!
> >>
> >> Best,
> >> Thiago
> >>
> >> 2012/2/26 Michael Gr?nager <gronager at ceptacle.com>
> >> And if you do an update now "help" is there too ;)
> >>
> >> /M
> >>
> >> On 25/02/2012, at 03:11, Martinx - ????? wrote:
> >>
> >>> Thank you!!!
> >>>
> >>> It is all working now! Except "help"...
> >>>
> >>> Nice work Michael!!
> >>>
> >>> Best,
> >>> Thiago
> >>>
> >>> 2012/2/24 Michael Gr?nager <gronager at ceptacle.com>
> >>> OK - didn't took the weekend:
> >>>
> >>> support for "port" is on github now :)
> >>>
> >>> Only took two lines:
> >>>
> >>>         ("port", value<unsigned short>(&port)->default_value(8333),
> "Listen on specified port for the p2p protocol")
> >>>
> >>> and using the port option in the Node constructor (was there already):
> >>>
> >>>     Node node(chain, data_dir, args.count("nolisten") ? "" :
> "0.0.0.0", lexical_cast<string>(port)); // it is also here we specify the
> use of a proxy!
> >>>
> >>> /M
> >>>
> >>>
> >>>
> >>> On 24/02/2012, at 19:49, Martinx - ????? wrote:
> >>>
> >>>> Hi Michael,
> >>>>
> >>>> Thank you for your attention!
> >>>>
> >>>> Now, I'm trying to start libcoin's bitcoind using high ports but, it
> always try to listen at 8332, no matter what I "say"...
> >>>>
> >>>> Look:
> >>>>
> >>>> $ cat .bitcoin/bitcoin.conf
> >>>> server=1
> >>>> daemon=1
> >>>> rpcuser=libcoin
> >>>> rpcpassword=LibCoin13
> >>>> rpcport=10332
> >>>> port=10333
> >>>>
> >>>> But:
> >>>>
> >>>> /usr/local/bin/bitcoind
> >>>> Error: Address already in use
> >>>>
> >>>> terminate called after throwing an instance of 'DbException'
> >>>> what():  DbEnv::close: Invalid argument
> >>>> Aborted
> >>>>
> >>>> When I "strace it", I can see:
> >>>>
> >>>> ...
> >>>> bind(12, {sa_family=AF_INET, sin_port=htons(8333),
> sin_addr=inet_addr("0.0.0.0")}, 16) = -1 EADDRINUSE (Address already in use)
> >>>> ...
> >>>>
> >>>> I already tried:
> >>>>
> >>>> /usr/local/bin/bitcoind --rpcport 10332
> >>>> /usr/local/bin/bitcoind --rpcport=10332
> >>>>
> >>>> Without success...
> >>>>
> >>>> Thanks again!
> >>>> Thiago
> >>>>
> >>>> 2012/2/24 Michael Gr?nager <gronager at ceptacle.com>
> >>>> Hi Thiago,
> >>>>
> >>>> Forgot to comment on the two latter:
> >>>>
> >>>>> $ bitcoind getaccountaddress ""
> >>>>> HTTP error code: 401
> >>>>> Error: couldn't parse reply from server
> >>>>>
> >>>>> $ bitcoind listaccounts
> >>>>> HTTP error code: 401
> >>>>> Error: couldn't parse reply from server
> >>>>>
> >>>>
> >>>> 401 = permission denied - you need to setup username / password
> either on the commandline or in the bicoin.conf file to access those
> commands...
> >>>>
> >>>> See in the bitcoind.cpp file for commands that you can use with and
> without auth...
> >>>>
> >>>> Those that contains an "auth" requires auth:
> >>>>
> >>>>    server.registerMethod(method_ptr(new GetBalance(wallet)), auth);
> >>>>
> >>>> As opposed to:
> >>>>
> >>>>    server.registerMethod(method_ptr(new GetInfo(node)));
> >>>>
> >>>> auth is defined by:
> >>>>
> >>>>    Auth auth(rpc_user, rpc_pass); // if rpc_user and rpc_pass are not
> set, all authenticated methods becomes disallowed.
> >>>>
> >>>> so you just experience the case explained in the comment ;) I admit
> that the output could be more readable, though!
> >>>>
> >>>> /M
> >>>>
> >>>>
> >>>>>
> >>>>> Any tips?! lol
> >>>>>
> >>>>> Thanks!
> >>>>> Thiago
> >>>>>
> >>>>> 2012/2/23 Martinx - ????? <thiagocmartinsc at gmail.com>
> >>>>> AWESOME!!!
> >>>>>
> >>>>> I can compile libcoin at my Ubuntu 11.10... I just need to install:
> >>>>>
> >>>>> sudo aptitude install libboost1.46-all-dev
> >>>>>
> >>>>> ...alongside with another already installed dependencies, and now it
> works!!
> >>>>>
> >>>>> Thank you!
> >>>>> Thiago
> >>>>>
> >>>>> 2012/2/23 Michael Gr?nager <gronager at ceptacle.com>
> >>>>> Hi Martinx,
> >>>>>
> >>>>> Another note:
> >>>>>
> >>>>> boost 1.42 and openssl 1.0 has a conflict (you will see it when you
> try to compile coinHTTP with that specific combination: sslv2 has been
> removed from openssl, but boost still references it.)
> >>>>>
> >>>>> You should do a :
> >>>>>
> >>>>> sudo apt-get upgrade libboost-dev-all
> >>>>>
> >>>>> to get the 1.46.1 library
> >>>>>
> >>>>> /M
> >>>>>
> >>>>>
> >>>>> On 23/02/2012, at 18:31, Martinx - ????? wrote:
> >>>>>
> >>>>>> Hi Michael!
> >>>>>>
> >>>>>> Thank you for libcoin! It is a awesome evolution for Bitcoin and
> for the CryptoCurrencies as a hole... Thanks!!!
> >>>>>>
> >>>>>> Anyway, I am unable to compile libcoin under my Ubuntu 11.04. At
> this machine, I have compiled and running Bitcoin (from sources), Namecoin,
> Devcoin, Litecoin, IXcoin and I0coin, all from sources but, when I try to
> compile libcoin, I got:
> >>>>>>
> >>>>>> ----
> >>>>>> user at desk:~/libcoin$ ./configure
> >>>>>> -- The C compiler identification is GNU
> >>>>>> -- The CXX compiler identification is GNU
> >>>>>> -- Check for working C compiler: /usr/bin/gcc
> >>>>>> -- Check for working C compiler: /usr/bin/gcc -- works
> >>>>>> -- Detecting C compiler ABI info
> >>>>>> -- Detecting C compiler ABI info - done
> >>>>>> -- Check for working CXX compiler: /usr/bin/c++
> >>>>>> -- Check for working CXX compiler: /usr/bin/c++ -- works
> >>>>>> -- Detecting CXX compiler ABI info
> >>>>>> -- Detecting CXX compiler ABI info - done
> >>>>>> -- Looking for include files CMAKE_HAVE_PTHREAD_H
> >>>>>> -- Looking for include files CMAKE_HAVE_PTHREAD_H - found
> >>>>>> -- Looking for pthread_create in pthreads
> >>>>>> -- Looking for pthread_create in pthreads - not found
> >>>>>> -- Looking for pthread_create in pthread
> >>>>>> -- Looking for pthread_create in pthread - found
> >>>>>> -- Found Threads: TRUE
> >>>>>> -- Looking for XOpenDisplay in
> /usr/lib/i386-linux-gnu/libX11.so;/usr/lib/i386-linux-gnu/libXext.so
> >>>>>> -- Looking for XOpenDisplay in
> /usr/lib/i386-linux-gnu/libX11.so;/usr/lib/i386-linux-gnu/libXext.so - found
> >>>>>> -- Looking for gethostbyname
> >>>>>> -- Looking for gethostbyname - found
> >>>>>> -- Looking for connect
> >>>>>> -- Looking for connect - found
> >>>>>> -- Looking for remove
> >>>>>> -- Looking for remove - found
> >>>>>> -- Looking for shmat
> >>>>>> -- Looking for shmat - found
> >>>>>> -- Looking for IceConnectionNumber in ICE
> >>>>>> -- Looking for IceConnectionNumber in ICE - found
> >>>>>> -- Found X11: /usr/lib/i386-linux-gnu/libX11.so
> >>>>>> -- Boost version: 1.42.0
> >>>>>> -- Found the following Boost libraries:
> >>>>>> --   date_time
> >>>>>> --   regex
> >>>>>> --   filesystem
> >>>>>> --   system
> >>>>>> --   program_options
> >>>>>> --   thread
> >>>>>> -- Found OpenSSL: /usr/lib/libssl.so;/usr/lib/libcrypto.so
> >>>>>> -- Looking for Q_WS_X11
> >>>>>> -- Looking for Q_WS_X11 - found
> >>>>>> -- Looking for Q_WS_WIN
> >>>>>> -- Looking for Q_WS_WIN - not found.
> >>>>>> -- Looking for Q_WS_QWS
> >>>>>> -- Looking for Q_WS_QWS - not found.
> >>>>>> -- Looking for Q_WS_MAC
> >>>>>> -- Looking for Q_WS_MAC - not found.
> >>>>>> -- Found Qt-Version 4.7.2 (using /usr/bin/qmake)
> >>>>>> -- Found wxWidgets: TRUE
> >>>>>>
> >>>>>> The build system is configured to install libraries to
> /usr/local/lib
> >>>>>> Your applications may not be able to find your installed libraries
> unless you:
> >>>>>> set your LD_LIBRARY_PATH (user specific) or
> >>>>>> update your ld.so configuration (system wide)
> >>>>>> You have an ld.so.conf.d directory on your system, so if you wish
> to ensure that
> >>>>>> applications find the installed libcoin libraries, system wide, you
> could install an
> >>>>>> libcoin specific ld.so configuration with:
> >>>>>> sudo make install_ld_conf
> >>>>>>
> >>>>>> -- Configuring done
> >>>>>> -- Generating done
> >>>>>> -- Build files have been written to: /home/user/libcoin
> >>>>>> ----
> >>>>>>
> >>>>>> Now I tried make, without success:
> >>>>>>
> >>>>>> ----
> >>>>>> .....
> >>>>>> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0xf):
> undefined reference to `BN_init'
> >>>>>> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x1e):
> undefined reference to `BN_copy'
> >>>>>> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x38):
> undefined reference to `BN_set_negative'
> >>>>>> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x4f):
> undefined reference to `BN_clear_free'
> >>>>>> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0xd3):
> undefined reference to `BN_clear_free'
> >>>>>> ../../lib/libcoin.a(Script.o): In function `operator<<(CBigNum
> const&, unsigned int)':
> >>>>>> Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&,
> unsigned int)]+0x16): undefined reference to `BN_init'
> >>>>>> Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&,
> unsigned int)]+0x2c): undefined reference to `BN_lshift'
> >>>>>> Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&,
> unsigned int)]+0xad): undefined reference to `BN_clear_free'
> >>>>>> ../../lib/libcoin.a(Script.o): In function `operator>>(CBigNum
> const&, unsigned int)':
> >>>>>> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&,
> unsigned int)]+0xf): undefined reference to `BN_init'
> >>>>>> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&,
> unsigned int)]+0x1e): undefined reference to `BN_copy'
> >>>>>> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&,
> unsigned int)]+0x47): undefined reference to `BN_clear_free'
> >>>>>> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&,
> unsigned int)]+0xcb): undefined reference to `BN_clear_free'
> >>>>>> ../../lib/libcoin.a(Script.o): In function `operator!=(CBigNum
> const&, CBigNum const&)':
> >>>>>> Script.cpp:(.text._ZneRK7CBigNumS1_[operator!=(CBigNum const&,
> CBigNum const&)]+0x14): undefined reference to `BN_cmp'
> >>>>>> ../../lib/libcoin.a(Script.o): In function `operator>(CBigNum
> const&, CBigNum const&)':
> >>>>>> Script.cpp:(.text._ZgtRK7CBigNumS1_[operator>(CBigNum const&,
> CBigNum const&)]+0x14): undefined reference to `BN_cmp'
> >>>>>> ../../lib/libcoin.a(Script.o): In function `uint256
> Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned
> char, std::allocator<unsigned char> > >
> >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char,
> std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned
> char*, std::vector<unsigned char, std::allocator<unsigned char> > >)':
> >>>>>>
> Script.cpp:(.text._Z4HashIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEE7uint256T_S8_[uint256
> Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned
> char, std::allocator<unsigned char> > >
> >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char,
> std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned
> char*, std::vector<unsigned char, std::allocator<unsigned char> >
> >)]+0x6d): undefined reference to `SHA256'
> >>>>>>
> Script.cpp:(.text._Z4HashIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEE7uint256T_S8_[uint256
> Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned
> char, std::allocator<unsigned char> > >
> >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char,
> std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned
> char*, std::vector<unsigned char, std::allocator<unsigned char> >
> >)]+0xb8): undefined reference to `SHA256'
> >>>>>> collect2: ld returned 1 exit status
> >>>>>> make[2]: *** [bin/bitcoind] Error 1
> >>>>>> make[1]: ***
> [applications/bitcoind/CMakeFiles/app_bitcoind.dir/all] Error 2
> >>>>>> make: *** [all] Error 2
> >>>>>> -----
> >>>>>>
> >>>>>> What can I do?!
> >>>>>>
> >>>>>> Best,
> >>>>>> Thiago
> >>>>>>
> >>>>>>
> >>>>>> On 1 February 2012 12:18, Michael Gr?nager <gronager at ceptacle.com>
> wrote:
> >>>>>> Dear Bitcoiners,
> >>>>>>
> >>>>>> libcoin is now in a state ready for its first release, which I
> would like to share with you!
> >>>>>>
> >>>>>> === libcoin is a crypto currency library based on the
> bitcoin/bitcoin "Satoshi" client. ===
> >>>>>>
> >>>>>> Copenhagen, Denmark - 1st February 2012 Ceptacle announces the
> release of the first version of the crypto currency library "libcoin" based
> on the bitcoin/bitcoin "Satoshi" client.
> >>>>>>
> >>>>>> libcoin also maintains a version of bitcoind that is a 100%
> compatible drop-in replacement of the bitcoin/bitcoind client: You can use
> it on the same computer on the same files and you can call it with the same
> scripts. And you can easily extend it without touching the basic bitcoin
> source files.
> >>>>>>
> >>>>>> The libcoin/bitcoind client downloads the entire block chain 3.5
> times faster than the bitcoin/bitcoind client. This is less than 90 minutes
> on a modern laptop!
> >>>>>>
> >>>>>> In libcoin, the Satoshi client code has been completely refactored,
> properly encapsulating classes, removing all globals, moving from threads
> and mutexes to a pure asynchronous approach. Functionalities have been
> divided into logical units and libraries, minimizing dependencies for e.g.
> thin clients.
> >>>>>>
> >>>>>> libcoin is chain agnostic, all chain (bitcoin, testnet, namecoin,
> litecoin, ...) specific settings are maintained from a single class (Chain)
> and hence experiments with chain settings, mining, security and digital
> currencies for research and educational purposes are easily accessible. See
> the ponzicoin example for how you define your own chain.
> >>>>>>
> >>>>>> The build system of libcoin is based on CMake and supports builds
> of static and dynamic libraries on Linux, Mac OS X, and Windows.
> >>>>>>
> >>>>>> The libcoin license is LGPL v. 3. This mean that you can use it in
> open source as well as in commercial projects, but improvements should go
> back into the libcoin library.
> >>>>>>
> >>>>>> ======
> >>>>>>
> >>>>>> Read more on libcoin on: http://github.com/ceptacle/libcoin/wiki
> >>>>>>
> >>>>>> Join libcoin on twitter: http://twitter.com/libcoin
> >>>>>>
> >>>>>> Download "libcoin Satoshi release":
> http://github.com/ceptacle/libcoin/zipball/v0.4.0.1
> >>>>>>
> >>>>>> Best regards,
> >>>>>>
> >>>>>> Michael Gronager, PhD
> >>>>>> Director, Ceptacle
> >>>>>> Jens Juels Gade 33
> >>>>>> 2100 Copenhagen E
> >>>>>> Mobile: +45 31 45 14 01
> >>>>>> E-mail: gronager at ceptacle.com
> >>>>>> Web: http://www.ceptacle.com/
> >>>>>>
> >>>>>>
> >>>>>>
> ------------------------------------------------------------------------------
> >>>>>> Keep Your Developer Skills Current with LearnDevNow!
> >>>>>> The most comprehensive online learning library for Microsoft
> developers
> >>>>>> is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3,
> MVC3,
> >>>>>> Metro Style Apps, more. Free future releases when you subscribe now!
> >>>>>> http://p.sf.net/sfu/learndevnow-d2d
> >>>>>> _______________________________________________
> >>>>>> Bitcoin-development mailing list
> >>>>>> Bitcoin-development at lists.sourceforge.net
> >>>>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> >>>>>>
> >>>>>
> >>>>> Michael Gronager, PhD
> >>>>> Director, Ceptacle
> >>>>> Jens Juels Gade 33
> >>>>> 2100 Copenhagen E
> >>>>> Mobile: +45 31 45 14 01
> >>>>> E-mail: gronager at ceptacle.com
> >>>>> Web: http://www.ceptacle.com/
> >>>>>
> >>>>>
> >>>>>
> >>>>
> >>>>
> >>>
> >>> Michael Gronager, PhD
> >>> Director, Ceptacle
> >>> Jens Juels Gade 33
> >>> 2100 Copenhagen E
> >>> Mobile: +45 31 45 14 01
> >>> E-mail: gronager at ceptacle.com
> >>> Web: http://www.ceptacle.com/
> >>>
> >>>
> >>
> >> Michael Gronager, PhD
> >> Director, Ceptacle
> >> Jens Juels Gade 33
> >> 2100 Copenhagen E
> >> Mobile: +45 31 45 14 01
> >> E-mail: gronager at ceptacle.com
> >> Web: http://www.ceptacle.com/
> >>
> >>
> >
> > Michael Gronager, PhD
> > Director, Ceptacle
> > Jens Juels Gade 33
> > 2100 Copenhagen E
> > Mobile: +45 31 45 14 01
> > E-mail: gronager at ceptacle.com
> > Web: http://www.ceptacle.com/
> >
> >
>
> Michael Gronager, PhD
> Director, Ceptacle
> Jens Juels Gade 33
> 2100 Copenhagen E
> Mobile: +45 31 45 14 01
> E-mail: gronager at ceptacle.com
> Web: http://www.ceptacle.com/
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120322/5b5eff87/attachment.html>

From thiagocmartinsc at gmail.com  Thu Mar 22 10:50:23 2012
From: thiagocmartinsc at gmail.com (=?ISO-2022-JP?B?TWFydGlueCAtIBskQiU4JSchPCVgJTobKEI=?=)
Date: Thu, 22 Mar 2012 07:50:23 -0300
Subject: [Bitcoin-development] Announcement: libcoin
In-Reply-To: <07A82C1E-AE1D-44DC-AF02-38A3D755FA35@ceptacle.com>
References: <D55C3D18-8286-44E9-B877-6FCE7C05E980@ceptacle.com>
	<CAJSM8J0zqF2=Poknzc8R7TrTJ0DWCMBw2-K9gGhUP_Qf+J6eFg@mail.gmail.com>
	<4FF4A408-F8C9-4A50-8B13-13D3686BEB09@ceptacle.com>
	<CAJSM8J3bZYfpE9EATcYe=79s_RxvGG9BrdRQR9ivwtZnuPsL0w@mail.gmail.com>
	<CAJSM8J2nhoKsOnAeF8qBW3zOfp=sJ25sd8gnw2dMJ3GgkohDjQ@mail.gmail.com>
	<C3C58158-0DED-41A1-B4D2-BF746AFE717A@ceptacle.com>
	<CAJSM8J3255LpXbHRF+zEi0QRoM0mwuRP3FSNbSwSyz-_ge=Few@mail.gmail.com>
	<3C518667-C2A6-4D1F-988D-888964925489@ceptacle.com>
	<CAJSM8J2-+uHKJg9xjqtz785HBNY8wXtJLnw70jP0_HgNspx4Tg@mail.gmail.com>
	<AB5AEA73-93BD-440E-89F0-F0951047D71A@ceptacle.com>
	<CAJSM8J2ytXR0RSL=3+Se6mggH+pDmnkSx+CUp-bcod4qmJ3ObA@mail.gmail.com>
	<07A82C1E-AE1D-44DC-AF02-38A3D755FA35@ceptacle.com>
Message-ID: <CAJSM8J2cjazkGn9vCdoqEKtDP0y1geftn7pJLcTmAGa4FH9BTA@mail.gmail.com>

Michael,

 Since libcoin is "chain agnostic", I was wondering if the project can be
used like this:

 When I install it with "make install", I would like to have something like
this:

 Regular file: /usr/local/bin/libcoincore # or whatever you like

 Symlink -> Regular file

 /usr/local/bit/bitcoind ->  /usr/local/bin/libcoincore  # bitcoind is a
symlink to libcoincore

 /usr/local/bit/litecoind ->  /usr/local/bin/libcoincore  # litecoind is a
symlink to libcoincore

 /usr/local/bit/devcoind ->  /usr/local/bin/libcoincore  # devcoind is a
symlink to libcoincore

 /usr/local/bit/namecoind ->  /usr/local/bin/libcoincore  # devcoind is a
symlink to libcoincore

 ...and so on...

 So, libcoincore will interpret the ARGV[0] and, for each string, it will
initiate the appropriate internal functions...

 I don't know if Libcoin already does something like that... I'm not a
developer/code reader... Just a small nerd with big ideas...  ^_^

Thanks!
Thiago

2012/2/28 Michael Gr?nager <gronager at ceptacle.com>

> Hi again - and thanks for testing and finding this!
>
> I have fixed the bug you reported:
>
> The culprit was an implicit string constructor for the ChainAddress that
> caused creation of a not fully initialized ChainAddress. The right way to
> do it is using chain::getAddress(string) as the ChainAddress is chain
> specific.
>
> A git pull will fix it ;)
>
> Cheers,
>
> Michael
>
>
> On 27/02/2012, at 20:03, Martinx - ????? wrote:
>
> > AWESOME!! Thank you!!
> >
> > Anyway, I found a new problem... lol
> >
> > /usr/local/bin/bitcoind getinfo #okay
> > {
> >    "version" : 40001,
> >    "blocks" : 168753,
> >    "connections" : 8,
> >    "difficulty" : 1376302.26788638,
> >    "testnet" : false
> > }
> >
> > /usr/local/bin/bitcoind getaccountaddress ""  # okay...
> > 1J4vNcvEdeCuLH4yvyoC2gxFEF4zquoJ87
> >
> > /usr/local/bin/bitcoind listaccounts # NOT okay...
> > {
> > }
> >
> > /usr/local/bin/bitcoind getaccountaddress "teste" # okay
> > 1E6pGh6AAtuJdFXheZMp1zdYmvdqAQn9QT
> >
> > /usr/local/bin/bitcoind listaccounts # NOT okay...
> > {
> >    "teste" : 0.00000000
> > }
> >
> > Where is my default account listed at "listaccounts" output?!
> >
> > Best,
> > Thiago
> >
> > 2012/2/26 Michael Gr?nager <gronager at ceptacle.com>
> > And if you do an update now "help" is there too ;)
> >
> > /M
> >
> > On 25/02/2012, at 03:11, Martinx - ????? wrote:
> >
> >> Thank you!!!
> >>
> >> It is all working now! Except "help"...
> >>
> >> Nice work Michael!!
> >>
> >> Best,
> >> Thiago
> >>
> >> 2012/2/24 Michael Gr?nager <gronager at ceptacle.com>
> >> OK - didn't took the weekend:
> >>
> >> support for "port" is on github now :)
> >>
> >> Only took two lines:
> >>
> >>          ("port", value<unsigned short>(&port)->default_value(8333),
> "Listen on specified port for the p2p protocol")
> >>
> >> and using the port option in the Node constructor (was there already):
> >>
> >>      Node node(chain, data_dir, args.count("nolisten") ? "" :
> "0.0.0.0", lexical_cast<string>(port)); // it is also here we specify the
> use of a proxy!
> >>
> >> /M
> >>
> >>
> >>
> >> On 24/02/2012, at 19:49, Martinx - ????? wrote:
> >>
> >>> Hi Michael,
> >>>
> >>> Thank you for your attention!
> >>>
> >>> Now, I'm trying to start libcoin's bitcoind using high ports but, it
> always try to listen at 8332, no matter what I "say"...
> >>>
> >>> Look:
> >>>
> >>> $ cat .bitcoin/bitcoin.conf
> >>> server=1
> >>> daemon=1
> >>> rpcuser=libcoin
> >>> rpcpassword=LibCoin13
> >>> rpcport=10332
> >>> port=10333
> >>>
> >>> But:
> >>>
> >>> /usr/local/bin/bitcoind
> >>> Error: Address already in use
> >>>
> >>> terminate called after throwing an instance of 'DbException'
> >>> what():  DbEnv::close: Invalid argument
> >>> Aborted
> >>>
> >>> When I "strace it", I can see:
> >>>
> >>> ...
> >>> bind(12, {sa_family=AF_INET, sin_port=htons(8333),
> sin_addr=inet_addr("0.0.0.0")}, 16) = -1 EADDRINUSE (Address already in use)
> >>> ...
> >>>
> >>> I already tried:
> >>>
> >>> /usr/local/bin/bitcoind --rpcport 10332
> >>> /usr/local/bin/bitcoind --rpcport=10332
> >>>
> >>> Without success...
> >>>
> >>> Thanks again!
> >>> Thiago
> >>>
> >>> 2012/2/24 Michael Gr?nager <gronager at ceptacle.com>
> >>> Hi Thiago,
> >>>
> >>> Forgot to comment on the two latter:
> >>>
> >>>> $ bitcoind getaccountaddress ""
> >>>> HTTP error code: 401
> >>>> Error: couldn't parse reply from server
> >>>>
> >>>> $ bitcoind listaccounts
> >>>> HTTP error code: 401
> >>>> Error: couldn't parse reply from server
> >>>>
> >>>
> >>> 401 = permission denied - you need to setup username / password either
> on the commandline or in the bicoin.conf file to access those commands...
> >>>
> >>> See in the bitcoind.cpp file for commands that you can use with and
> without auth...
> >>>
> >>> Those that contains an "auth" requires auth:
> >>>
> >>>     server.registerMethod(method_ptr(new GetBalance(wallet)), auth);
> >>>
> >>> As opposed to:
> >>>
> >>>     server.registerMethod(method_ptr(new GetInfo(node)));
> >>>
> >>> auth is defined by:
> >>>
> >>>     Auth auth(rpc_user, rpc_pass); // if rpc_user and rpc_pass are not
> set, all authenticated methods becomes disallowed.
> >>>
> >>> so you just experience the case explained in the comment ;) I admit
> that the output could be more readable, though!
> >>>
> >>> /M
> >>>
> >>>
> >>>>
> >>>> Any tips?! lol
> >>>>
> >>>> Thanks!
> >>>> Thiago
> >>>>
> >>>> 2012/2/23 Martinx - ????? <thiagocmartinsc at gmail.com>
> >>>> AWESOME!!!
> >>>>
> >>>> I can compile libcoin at my Ubuntu 11.10... I just need to install:
> >>>>
> >>>> sudo aptitude install libboost1.46-all-dev
> >>>>
> >>>> ...alongside with another already installed dependencies, and now it
> works!!
> >>>>
> >>>> Thank you!
> >>>> Thiago
> >>>>
> >>>> 2012/2/23 Michael Gr?nager <gronager at ceptacle.com>
> >>>> Hi Martinx,
> >>>>
> >>>> Another note:
> >>>>
> >>>> boost 1.42 and openssl 1.0 has a conflict (you will see it when you
> try to compile coinHTTP with that specific combination: sslv2 has been
> removed from openssl, but boost still references it.)
> >>>>
> >>>> You should do a :
> >>>>
> >>>> sudo apt-get upgrade libboost-dev-all
> >>>>
> >>>> to get the 1.46.1 library
> >>>>
> >>>> /M
> >>>>
> >>>>
> >>>> On 23/02/2012, at 18:31, Martinx - ????? wrote:
> >>>>
> >>>>> Hi Michael!
> >>>>>
> >>>>> Thank you for libcoin! It is a awesome evolution for Bitcoin and for
> the CryptoCurrencies as a hole... Thanks!!!
> >>>>>
> >>>>> Anyway, I am unable to compile libcoin under my Ubuntu 11.04. At
> this machine, I have compiled and running Bitcoin (from sources), Namecoin,
> Devcoin, Litecoin, IXcoin and I0coin, all from sources but, when I try to
> compile libcoin, I got:
> >>>>>
> >>>>> ----
> >>>>> user at desk:~/libcoin$ ./configure
> >>>>> -- The C compiler identification is GNU
> >>>>> -- The CXX compiler identification is GNU
> >>>>> -- Check for working C compiler: /usr/bin/gcc
> >>>>> -- Check for working C compiler: /usr/bin/gcc -- works
> >>>>> -- Detecting C compiler ABI info
> >>>>> -- Detecting C compiler ABI info - done
> >>>>> -- Check for working CXX compiler: /usr/bin/c++
> >>>>> -- Check for working CXX compiler: /usr/bin/c++ -- works
> >>>>> -- Detecting CXX compiler ABI info
> >>>>> -- Detecting CXX compiler ABI info - done
> >>>>> -- Looking for include files CMAKE_HAVE_PTHREAD_H
> >>>>> -- Looking for include files CMAKE_HAVE_PTHREAD_H - found
> >>>>> -- Looking for pthread_create in pthreads
> >>>>> -- Looking for pthread_create in pthreads - not found
> >>>>> -- Looking for pthread_create in pthread
> >>>>> -- Looking for pthread_create in pthread - found
> >>>>> -- Found Threads: TRUE
> >>>>> -- Looking for XOpenDisplay in
> /usr/lib/i386-linux-gnu/libX11.so;/usr/lib/i386-linux-gnu/libXext.so
> >>>>> -- Looking for XOpenDisplay in
> /usr/lib/i386-linux-gnu/libX11.so;/usr/lib/i386-linux-gnu/libXext.so - found
> >>>>> -- Looking for gethostbyname
> >>>>> -- Looking for gethostbyname - found
> >>>>> -- Looking for connect
> >>>>> -- Looking for connect - found
> >>>>> -- Looking for remove
> >>>>> -- Looking for remove - found
> >>>>> -- Looking for shmat
> >>>>> -- Looking for shmat - found
> >>>>> -- Looking for IceConnectionNumber in ICE
> >>>>> -- Looking for IceConnectionNumber in ICE - found
> >>>>> -- Found X11: /usr/lib/i386-linux-gnu/libX11.so
> >>>>> -- Boost version: 1.42.0
> >>>>> -- Found the following Boost libraries:
> >>>>> --   date_time
> >>>>> --   regex
> >>>>> --   filesystem
> >>>>> --   system
> >>>>> --   program_options
> >>>>> --   thread
> >>>>> -- Found OpenSSL: /usr/lib/libssl.so;/usr/lib/libcrypto.so
> >>>>> -- Looking for Q_WS_X11
> >>>>> -- Looking for Q_WS_X11 - found
> >>>>> -- Looking for Q_WS_WIN
> >>>>> -- Looking for Q_WS_WIN - not found.
> >>>>> -- Looking for Q_WS_QWS
> >>>>> -- Looking for Q_WS_QWS - not found.
> >>>>> -- Looking for Q_WS_MAC
> >>>>> -- Looking for Q_WS_MAC - not found.
> >>>>> -- Found Qt-Version 4.7.2 (using /usr/bin/qmake)
> >>>>> -- Found wxWidgets: TRUE
> >>>>>
> >>>>> The build system is configured to install libraries to /usr/local/lib
> >>>>> Your applications may not be able to find your installed libraries
> unless you:
> >>>>>  set your LD_LIBRARY_PATH (user specific) or
> >>>>>  update your ld.so configuration (system wide)
> >>>>> You have an ld.so.conf.d directory on your system, so if you wish to
> ensure that
> >>>>> applications find the installed libcoin libraries, system wide, you
> could install an
> >>>>> libcoin specific ld.so configuration with:
> >>>>>  sudo make install_ld_conf
> >>>>>
> >>>>> -- Configuring done
> >>>>> -- Generating done
> >>>>> -- Build files have been written to: /home/user/libcoin
> >>>>> ----
> >>>>>
> >>>>> Now I tried make, without success:
> >>>>>
> >>>>> ----
> >>>>> .....
> >>>>> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0xf):
> undefined reference to `BN_init'
> >>>>> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x1e):
> undefined reference to `BN_copy'
> >>>>> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x38):
> undefined reference to `BN_set_negative'
> >>>>> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x4f):
> undefined reference to `BN_clear_free'
> >>>>> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0xd3):
> undefined reference to `BN_clear_free'
> >>>>> ../../lib/libcoin.a(Script.o): In function `operator<<(CBigNum
> const&, unsigned int)':
> >>>>> Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&,
> unsigned int)]+0x16): undefined reference to `BN_init'
> >>>>> Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&,
> unsigned int)]+0x2c): undefined reference to `BN_lshift'
> >>>>> Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&,
> unsigned int)]+0xad): undefined reference to `BN_clear_free'
> >>>>> ../../lib/libcoin.a(Script.o): In function `operator>>(CBigNum
> const&, unsigned int)':
> >>>>> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&,
> unsigned int)]+0xf): undefined reference to `BN_init'
> >>>>> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&,
> unsigned int)]+0x1e): undefined reference to `BN_copy'
> >>>>> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&,
> unsigned int)]+0x47): undefined reference to `BN_clear_free'
> >>>>> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&,
> unsigned int)]+0xcb): undefined reference to `BN_clear_free'
> >>>>> ../../lib/libcoin.a(Script.o): In function `operator!=(CBigNum
> const&, CBigNum const&)':
> >>>>> Script.cpp:(.text._ZneRK7CBigNumS1_[operator!=(CBigNum const&,
> CBigNum const&)]+0x14): undefined reference to `BN_cmp'
> >>>>> ../../lib/libcoin.a(Script.o): In function `operator>(CBigNum
> const&, CBigNum const&)':
> >>>>> Script.cpp:(.text._ZgtRK7CBigNumS1_[operator>(CBigNum const&,
> CBigNum const&)]+0x14): undefined reference to `BN_cmp'
> >>>>> ../../lib/libcoin.a(Script.o): In function `uint256
> Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned
> char, std::allocator<unsigned char> > >
> >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char,
> std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned
> char*, std::vector<unsigned char, std::allocator<unsigned char> > >)':
> >>>>>
> Script.cpp:(.text._Z4HashIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEE7uint256T_S8_[uint256
> Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned
> char, std::allocator<unsigned char> > >
> >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char,
> std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned
> char*, std::vector<unsigned char, std::allocator<unsigned char> >
> >)]+0x6d): undefined reference to `SHA256'
> >>>>>
> Script.cpp:(.text._Z4HashIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEE7uint256T_S8_[uint256
> Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned
> char, std::allocator<unsigned char> > >
> >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char,
> std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned
> char*, std::vector<unsigned char, std::allocator<unsigned char> >
> >)]+0xb8): undefined reference to `SHA256'
> >>>>> collect2: ld returned 1 exit status
> >>>>> make[2]: *** [bin/bitcoind] Error 1
> >>>>> make[1]: *** [applications/bitcoind/CMakeFiles/app_bitcoind.dir/all]
> Error 2
> >>>>> make: *** [all] Error 2
> >>>>> -----
> >>>>>
> >>>>> What can I do?!
> >>>>>
> >>>>> Best,
> >>>>> Thiago
> >>>>>
> >>>>>
> >>>>> On 1 February 2012 12:18, Michael Gr?nager <gronager at ceptacle.com>
> wrote:
> >>>>> Dear Bitcoiners,
> >>>>>
> >>>>> libcoin is now in a state ready for its first release, which I would
> like to share with you!
> >>>>>
> >>>>> === libcoin is a crypto currency library based on the
> bitcoin/bitcoin "Satoshi" client. ===
> >>>>>
> >>>>> Copenhagen, Denmark - 1st February 2012 Ceptacle announces the
> release of the first version of the crypto currency library "libcoin" based
> on the bitcoin/bitcoin "Satoshi" client.
> >>>>>
> >>>>> libcoin also maintains a version of bitcoind that is a 100%
> compatible drop-in replacement of the bitcoin/bitcoind client: You can use
> it on the same computer on the same files and you can call it with the same
> scripts. And you can easily extend it without touching the basic bitcoin
> source files.
> >>>>>
> >>>>> The libcoin/bitcoind client downloads the entire block chain 3.5
> times faster than the bitcoin/bitcoind client. This is less than 90 minutes
> on a modern laptop!
> >>>>>
> >>>>> In libcoin, the Satoshi client code has been completely refactored,
> properly encapsulating classes, removing all globals, moving from threads
> and mutexes to a pure asynchronous approach. Functionalities have been
> divided into logical units and libraries, minimizing dependencies for e.g.
> thin clients.
> >>>>>
> >>>>> libcoin is chain agnostic, all chain (bitcoin, testnet, namecoin,
> litecoin, ...) specific settings are maintained from a single class (Chain)
> and hence experiments with chain settings, mining, security and digital
> currencies for research and educational purposes are easily accessible. See
> the ponzicoin example for how you define your own chain.
> >>>>>
> >>>>> The build system of libcoin is based on CMake and supports builds of
> static and dynamic libraries on Linux, Mac OS X, and Windows.
> >>>>>
> >>>>> The libcoin license is LGPL v. 3. This mean that you can use it in
> open source as well as in commercial projects, but improvements should go
> back into the libcoin library.
> >>>>>
> >>>>> ======
> >>>>>
> >>>>> Read more on libcoin on: http://github.com/ceptacle/libcoin/wiki
> >>>>>
> >>>>> Join libcoin on twitter: http://twitter.com/libcoin
> >>>>>
> >>>>> Download "libcoin Satoshi release":
> http://github.com/ceptacle/libcoin/zipball/v0.4.0.1
> >>>>>
> >>>>> Best regards,
> >>>>>
> >>>>> Michael Gronager, PhD
> >>>>> Director, Ceptacle
> >>>>> Jens Juels Gade 33
> >>>>> 2100 Copenhagen E
> >>>>> Mobile: +45 31 45 14 01
> >>>>> E-mail: gronager at ceptacle.com
> >>>>> Web: http://www.ceptacle.com/
> >>>>>
> >>>>>
> >>>>>
> ------------------------------------------------------------------------------
> >>>>> Keep Your Developer Skills Current with LearnDevNow!
> >>>>> The most comprehensive online learning library for Microsoft
> developers
> >>>>> is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3,
> MVC3,
> >>>>> Metro Style Apps, more. Free future releases when you subscribe now!
> >>>>> http://p.sf.net/sfu/learndevnow-d2d
> >>>>> _______________________________________________
> >>>>> Bitcoin-development mailing list
> >>>>> Bitcoin-development at lists.sourceforge.net
> >>>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> >>>>>
> >>>>
> >>>> Michael Gronager, PhD
> >>>> Director, Ceptacle
> >>>> Jens Juels Gade 33
> >>>> 2100 Copenhagen E
> >>>> Mobile: +45 31 45 14 01
> >>>> E-mail: gronager at ceptacle.com
> >>>> Web: http://www.ceptacle.com/
> >>>>
> >>>>
> >>>>
> >>>
> >>>
> >>
> >> Michael Gronager, PhD
> >> Director, Ceptacle
> >> Jens Juels Gade 33
> >> 2100 Copenhagen E
> >> Mobile: +45 31 45 14 01
> >> E-mail: gronager at ceptacle.com
> >> Web: http://www.ceptacle.com/
> >>
> >>
> >
> > Michael Gronager, PhD
> > Director, Ceptacle
> > Jens Juels Gade 33
> > 2100 Copenhagen E
> > Mobile: +45 31 45 14 01
> > E-mail: gronager at ceptacle.com
> > Web: http://www.ceptacle.com/
> >
> >
>
> Michael Gronager, PhD
> Director, Ceptacle
> Jens Juels Gade 33
> 2100 Copenhagen E
> Mobile: +45 31 45 14 01
> E-mail: gronager at ceptacle.com
> Web: http://www.ceptacle.com/
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120322/61d91451/attachment.html>

From peter at coinlab.com  Thu Mar 22 16:34:34 2012
From: peter at coinlab.com (Peter Vessenes)
Date: Thu, 22 Mar 2012 09:34:34 -0700
Subject: [Bitcoin-development] Announcement: libcoin
In-Reply-To: <264BCBC5-8ADC-46FA-B756-6CEEC18CAE75@ceptacle.com>
References: <D55C3D18-8286-44E9-B877-6FCE7C05E980@ceptacle.com>
	<CAJSM8J0zqF2=Poknzc8R7TrTJ0DWCMBw2-K9gGhUP_Qf+J6eFg@mail.gmail.com>
	<4FF4A408-F8C9-4A50-8B13-13D3686BEB09@ceptacle.com>
	<CAJSM8J3bZYfpE9EATcYe=79s_RxvGG9BrdRQR9ivwtZnuPsL0w@mail.gmail.com>
	<CAJSM8J2nhoKsOnAeF8qBW3zOfp=sJ25sd8gnw2dMJ3GgkohDjQ@mail.gmail.com>
	<C3C58158-0DED-41A1-B4D2-BF746AFE717A@ceptacle.com>
	<CAJSM8J3255LpXbHRF+zEi0QRoM0mwuRP3FSNbSwSyz-_ge=Few@mail.gmail.com>
	<3C518667-C2A6-4D1F-988D-888964925489@ceptacle.com>
	<CAJSM8J2-+uHKJg9xjqtz785HBNY8wXtJLnw70jP0_HgNspx4Tg@mail.gmail.com>
	<AB5AEA73-93BD-440E-89F0-F0951047D71A@ceptacle.com>
	<CAJSM8J2ytXR0RSL=3+Se6mggH+pDmnkSx+CUp-bcod4qmJ3ObA@mail.gmail.com>
	<07A82C1E-AE1D-44DC-AF02-38A3D755FA35@ceptacle.com>
	<CAJSM8J2cjazkGn9vCdoqEKtDP0y1geftn7pJLcTmAGa4FH9BTA@mail.gmail.com>
	<264BCBC5-8ADC-46FA-B756-6CEEC18CAE75@ceptacle.com>
Message-ID: <CAMGNxUsnz853vo=tBj9PNfcct8ZSrrm7Rcugud3ikGqU-W=LLg@mail.gmail.com>

This conversation reminds me that I'd like to see a comprehensive list of
tests that alt processors / generators can run against.

I haven't looked in the client code for some time, but does that exist now?
That would be a nice 'I want to help' early project, getting together
inputs and expected outputs / stack states for implementers to check
against.

As it is right now, we've split our codebase a bit; we rely on the client
to check the validity of a transaction, the balance of a given address, and
converse with the network, but we have written most of our own code for
stuff like block gen; I expect we will also do that for transaction
creation.

Peter



2012/3/22 Michael Gr?nager <gronager at ceptacle.com>

> What you list below was actually the plan - just havn't gotten there yet,
> but it will be dead easy.
>
> /M
>
>
> On 22/03/2012, at 11:50, Martinx - ????? wrote:
>
> > Michael,
> >
> >  Since libcoin is "chain agnostic", I was wondering if the project can
> be used like this:
> >
> >  When I install it with "make install", I would like to have something
> like this:
> >
> >  Regular file: /usr/local/bin/libcoincore # or whatever you like
> >
> >  Symlink -> Regular file
> >
> >  /usr/local/bit/bitcoind ->  /usr/local/bin/libcoincore  # bitcoind is a
> symlink to libcoincore
> >
> >  /usr/local/bit/litecoind ->  /usr/local/bin/libcoincore  # litecoind is
> a symlink to libcoincore
> >
> >  /usr/local/bit/devcoind ->  /usr/local/bin/libcoincore  # devcoind is a
> symlink to libcoincore
> >
> >  /usr/local/bit/namecoind ->  /usr/local/bin/libcoincore  # devcoind is
> a symlink to libcoincore
> >
> >  ...and so on...
> >
> >  So, libcoincore will interpret the ARGV[0] and, for each string, it
> will initiate the appropriate internal functions...
> >
> >  I don't know if Libcoin already does something like that... I'm not a
> developer/code reader... Just a small nerd with big ideas...  ^_^
> >
> > Thanks!
> > Thiago
> >
> > 2012/2/28 Michael Gr?nager <gronager at ceptacle.com>
> > Hi again - and thanks for testing and finding this!
> >
> > I have fixed the bug you reported:
> >
> > The culprit was an implicit string constructor for the ChainAddress that
> caused creation of a not fully initialized ChainAddress. The right way to
> do it is using chain::getAddress(string) as the ChainAddress is chain
> specific.
> >
> > A git pull will fix it ;)
> >
> > Cheers,
> >
> > Michael
> >
> >
> > On 27/02/2012, at 20:03, Martinx - ????? wrote:
> >
> > > AWESOME!! Thank you!!
> > >
> > > Anyway, I found a new problem... lol
> > >
> > > /usr/local/bin/bitcoind getinfo #okay
> > > {
> > >    "version" : 40001,
> > >    "blocks" : 168753,
> > >    "connections" : 8,
> > >    "difficulty" : 1376302.26788638,
> > >    "testnet" : false
> > > }
> > >
> > > /usr/local/bin/bitcoind getaccountaddress ""  # okay...
> > > 1J4vNcvEdeCuLH4yvyoC2gxFEF4zquoJ87
> > >
> > > /usr/local/bin/bitcoind listaccounts # NOT okay...
> > > {
> > > }
> > >
> > > /usr/local/bin/bitcoind getaccountaddress "teste" # okay
> > > 1E6pGh6AAtuJdFXheZMp1zdYmvdqAQn9QT
> > >
> > > /usr/local/bin/bitcoind listaccounts # NOT okay...
> > > {
> > >    "teste" : 0.00000000
> > > }
> > >
> > > Where is my default account listed at "listaccounts" output?!
> > >
> > > Best,
> > > Thiago
> > >
> > > 2012/2/26 Michael Gr?nager <gronager at ceptacle.com>
> > > And if you do an update now "help" is there too ;)
> > >
> > > /M
> > >
> > > On 25/02/2012, at 03:11, Martinx - ????? wrote:
> > >
> > >> Thank you!!!
> > >>
> > >> It is all working now! Except "help"...
> > >>
> > >> Nice work Michael!!
> > >>
> > >> Best,
> > >> Thiago
> > >>
> > >> 2012/2/24 Michael Gr?nager <gronager at ceptacle.com>
> > >> OK - didn't took the weekend:
> > >>
> > >> support for "port" is on github now :)
> > >>
> > >> Only took two lines:
> > >>
> > >>          ("port", value<unsigned short>(&port)->default_value(8333),
> "Listen on specified port for the p2p protocol")
> > >>
> > >> and using the port option in the Node constructor (was there already):
> > >>
> > >>      Node node(chain, data_dir, args.count("nolisten") ? "" :
> "0.0.0.0", lexical_cast<string>(port)); // it is also here we specify the
> use of a proxy!
> > >>
> > >> /M
> > >>
> > >>
> > >>
> > >> On 24/02/2012, at 19:49, Martinx - ????? wrote:
> > >>
> > >>> Hi Michael,
> > >>>
> > >>> Thank you for your attention!
> > >>>
> > >>> Now, I'm trying to start libcoin's bitcoind using high ports but, it
> always try to listen at 8332, no matter what I "say"...
> > >>>
> > >>> Look:
> > >>>
> > >>> $ cat .bitcoin/bitcoin.conf
> > >>> server=1
> > >>> daemon=1
> > >>> rpcuser=libcoin
> > >>> rpcpassword=LibCoin13
> > >>> rpcport=10332
> > >>> port=10333
> > >>>
> > >>> But:
> > >>>
> > >>> /usr/local/bin/bitcoind
> > >>> Error: Address already in use
> > >>>
> > >>> terminate called after throwing an instance of 'DbException'
> > >>> what():  DbEnv::close: Invalid argument
> > >>> Aborted
> > >>>
> > >>> When I "strace it", I can see:
> > >>>
> > >>> ...
> > >>> bind(12, {sa_family=AF_INET, sin_port=htons(8333),
> sin_addr=inet_addr("0.0.0.0")}, 16) = -1 EADDRINUSE (Address already in use)
> > >>> ...
> > >>>
> > >>> I already tried:
> > >>>
> > >>> /usr/local/bin/bitcoind --rpcport 10332
> > >>> /usr/local/bin/bitcoind --rpcport=10332
> > >>>
> > >>> Without success...
> > >>>
> > >>> Thanks again!
> > >>> Thiago
> > >>>
> > >>> 2012/2/24 Michael Gr?nager <gronager at ceptacle.com>
> > >>> Hi Thiago,
> > >>>
> > >>> Forgot to comment on the two latter:
> > >>>
> > >>>> $ bitcoind getaccountaddress ""
> > >>>> HTTP error code: 401
> > >>>> Error: couldn't parse reply from server
> > >>>>
> > >>>> $ bitcoind listaccounts
> > >>>> HTTP error code: 401
> > >>>> Error: couldn't parse reply from server
> > >>>>
> > >>>
> > >>> 401 = permission denied - you need to setup username / password
> either on the commandline or in the bicoin.conf file to access those
> commands...
> > >>>
> > >>> See in the bitcoind.cpp file for commands that you can use with and
> without auth...
> > >>>
> > >>> Those that contains an "auth" requires auth:
> > >>>
> > >>>     server.registerMethod(method_ptr(new GetBalance(wallet)), auth);
> > >>>
> > >>> As opposed to:
> > >>>
> > >>>     server.registerMethod(method_ptr(new GetInfo(node)));
> > >>>
> > >>> auth is defined by:
> > >>>
> > >>>     Auth auth(rpc_user, rpc_pass); // if rpc_user and rpc_pass are
> not set, all authenticated methods becomes disallowed.
> > >>>
> > >>> so you just experience the case explained in the comment ;) I admit
> that the output could be more readable, though!
> > >>>
> > >>> /M
> > >>>
> > >>>
> > >>>>
> > >>>> Any tips?! lol
> > >>>>
> > >>>> Thanks!
> > >>>> Thiago
> > >>>>
> > >>>> 2012/2/23 Martinx - ????? <thiagocmartinsc at gmail.com>
> > >>>> AWESOME!!!
> > >>>>
> > >>>> I can compile libcoin at my Ubuntu 11.10... I just need to install:
> > >>>>
> > >>>> sudo aptitude install libboost1.46-all-dev
> > >>>>
> > >>>> ...alongside with another already installed dependencies, and now
> it works!!
> > >>>>
> > >>>> Thank you!
> > >>>> Thiago
> > >>>>
> > >>>> 2012/2/23 Michael Gr?nager <gronager at ceptacle.com>
> > >>>> Hi Martinx,
> > >>>>
> > >>>> Another note:
> > >>>>
> > >>>> boost 1.42 and openssl 1.0 has a conflict (you will see it when you
> try to compile coinHTTP with that specific combination: sslv2 has been
> removed from openssl, but boost still references it.)
> > >>>>
> > >>>> You should do a :
> > >>>>
> > >>>> sudo apt-get upgrade libboost-dev-all
> > >>>>
> > >>>> to get the 1.46.1 library
> > >>>>
> > >>>> /M
> > >>>>
> > >>>>
> > >>>> On 23/02/2012, at 18:31, Martinx - ????? wrote:
> > >>>>
> > >>>>> Hi Michael!
> > >>>>>
> > >>>>> Thank you for libcoin! It is a awesome evolution for Bitcoin and
> for the CryptoCurrencies as a hole... Thanks!!!
> > >>>>>
> > >>>>> Anyway, I am unable to compile libcoin under my Ubuntu 11.04. At
> this machine, I have compiled and running Bitcoin (from sources), Namecoin,
> Devcoin, Litecoin, IXcoin and I0coin, all from sources but, when I try to
> compile libcoin, I got:
> > >>>>>
> > >>>>> ----
> > >>>>> user at desk:~/libcoin$ ./configure
> > >>>>> -- The C compiler identification is GNU
> > >>>>> -- The CXX compiler identification is GNU
> > >>>>> -- Check for working C compiler: /usr/bin/gcc
> > >>>>> -- Check for working C compiler: /usr/bin/gcc -- works
> > >>>>> -- Detecting C compiler ABI info
> > >>>>> -- Detecting C compiler ABI info - done
> > >>>>> -- Check for working CXX compiler: /usr/bin/c++
> > >>>>> -- Check for working CXX compiler: /usr/bin/c++ -- works
> > >>>>> -- Detecting CXX compiler ABI info
> > >>>>> -- Detecting CXX compiler ABI info - done
> > >>>>> -- Looking for include files CMAKE_HAVE_PTHREAD_H
> > >>>>> -- Looking for include files CMAKE_HAVE_PTHREAD_H - found
> > >>>>> -- Looking for pthread_create in pthreads
> > >>>>> -- Looking for pthread_create in pthreads - not found
> > >>>>> -- Looking for pthread_create in pthread
> > >>>>> -- Looking for pthread_create in pthread - found
> > >>>>> -- Found Threads: TRUE
> > >>>>> -- Looking for XOpenDisplay in
> /usr/lib/i386-linux-gnu/libX11.so;/usr/lib/i386-linux-gnu/libXext.so
> > >>>>> -- Looking for XOpenDisplay in
> /usr/lib/i386-linux-gnu/libX11.so;/usr/lib/i386-linux-gnu/libXext.so - found
> > >>>>> -- Looking for gethostbyname
> > >>>>> -- Looking for gethostbyname - found
> > >>>>> -- Looking for connect
> > >>>>> -- Looking for connect - found
> > >>>>> -- Looking for remove
> > >>>>> -- Looking for remove - found
> > >>>>> -- Looking for shmat
> > >>>>> -- Looking for shmat - found
> > >>>>> -- Looking for IceConnectionNumber in ICE
> > >>>>> -- Looking for IceConnectionNumber in ICE - found
> > >>>>> -- Found X11: /usr/lib/i386-linux-gnu/libX11.so
> > >>>>> -- Boost version: 1.42.0
> > >>>>> -- Found the following Boost libraries:
> > >>>>> --   date_time
> > >>>>> --   regex
> > >>>>> --   filesystem
> > >>>>> --   system
> > >>>>> --   program_options
> > >>>>> --   thread
> > >>>>> -- Found OpenSSL: /usr/lib/libssl.so;/usr/lib/libcrypto.so
> > >>>>> -- Looking for Q_WS_X11
> > >>>>> -- Looking for Q_WS_X11 - found
> > >>>>> -- Looking for Q_WS_WIN
> > >>>>> -- Looking for Q_WS_WIN - not found.
> > >>>>> -- Looking for Q_WS_QWS
> > >>>>> -- Looking for Q_WS_QWS - not found.
> > >>>>> -- Looking for Q_WS_MAC
> > >>>>> -- Looking for Q_WS_MAC - not found.
> > >>>>> -- Found Qt-Version 4.7.2 (using /usr/bin/qmake)
> > >>>>> -- Found wxWidgets: TRUE
> > >>>>>
> > >>>>> The build system is configured to install libraries to
> /usr/local/lib
> > >>>>> Your applications may not be able to find your installed libraries
> unless you:
> > >>>>>  set your LD_LIBRARY_PATH (user specific) or
> > >>>>>  update your ld.so configuration (system wide)
> > >>>>> You have an ld.so.conf.d directory on your system, so if you wish
> to ensure that
> > >>>>> applications find the installed libcoin libraries, system wide,
> you could install an
> > >>>>> libcoin specific ld.so configuration with:
> > >>>>>  sudo make install_ld_conf
> > >>>>>
> > >>>>> -- Configuring done
> > >>>>> -- Generating done
> > >>>>> -- Build files have been written to: /home/user/libcoin
> > >>>>> ----
> > >>>>>
> > >>>>> Now I tried make, without success:
> > >>>>>
> > >>>>> ----
> > >>>>> .....
> > >>>>> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0xf):
> undefined reference to `BN_init'
> > >>>>> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x1e):
> undefined reference to `BN_copy'
> > >>>>> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x38):
> undefined reference to `BN_set_negative'
> > >>>>> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0x4f):
> undefined reference to `BN_clear_free'
> > >>>>> Script.cpp:(.text._ZngRK7CBigNum[operator-(CBigNum const&)]+0xd3):
> undefined reference to `BN_clear_free'
> > >>>>> ../../lib/libcoin.a(Script.o): In function `operator<<(CBigNum
> const&, unsigned int)':
> > >>>>> Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&,
> unsigned int)]+0x16): undefined reference to `BN_init'
> > >>>>> Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&,
> unsigned int)]+0x2c): undefined reference to `BN_lshift'
> > >>>>> Script.cpp:(.text._ZlsRK7CBigNumj[operator<<(CBigNum const&,
> unsigned int)]+0xad): undefined reference to `BN_clear_free'
> > >>>>> ../../lib/libcoin.a(Script.o): In function `operator>>(CBigNum
> const&, unsigned int)':
> > >>>>> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&,
> unsigned int)]+0xf): undefined reference to `BN_init'
> > >>>>> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&,
> unsigned int)]+0x1e): undefined reference to `BN_copy'
> > >>>>> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&,
> unsigned int)]+0x47): undefined reference to `BN_clear_free'
> > >>>>> Script.cpp:(.text._ZrsRK7CBigNumj[operator>>(CBigNum const&,
> unsigned int)]+0xcb): undefined reference to `BN_clear_free'
> > >>>>> ../../lib/libcoin.a(Script.o): In function `operator!=(CBigNum
> const&, CBigNum const&)':
> > >>>>> Script.cpp:(.text._ZneRK7CBigNumS1_[operator!=(CBigNum const&,
> CBigNum const&)]+0x14): undefined reference to `BN_cmp'
> > >>>>> ../../lib/libcoin.a(Script.o): In function `operator>(CBigNum
> const&, CBigNum const&)':
> > >>>>> Script.cpp:(.text._ZgtRK7CBigNumS1_[operator>(CBigNum const&,
> CBigNum const&)]+0x14): undefined reference to `BN_cmp'
> > >>>>> ../../lib/libcoin.a(Script.o): In function `uint256
> Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned
> char, std::allocator<unsigned char> > >
> >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char,
> std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned
> char*, std::vector<unsigned char, std::allocator<unsigned char> > >)':
> > >>>>>
> Script.cpp:(.text._Z4HashIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEE7uint256T_S8_[uint256
> Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned
> char, std::allocator<unsigned char> > >
> >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char,
> std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned
> char*, std::vector<unsigned char, std::allocator<unsigned char> >
> >)]+0x6d): undefined reference to `SHA256'
> > >>>>>
> Script.cpp:(.text._Z4HashIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEE7uint256T_S8_[uint256
> Hash<__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned
> char, std::allocator<unsigned char> > >
> >(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char,
> std::allocator<unsigned char> > >, __gnu_cxx::__normal_iterator<unsigned
> char*, std::vector<unsigned char, std::allocator<unsigned char> >
> >)]+0xb8): undefined reference to `SHA256'
> > >>>>> collect2: ld returned 1 exit status
> > >>>>> make[2]: *** [bin/bitcoind] Error 1
> > >>>>> make[1]: ***
> [applications/bitcoind/CMakeFiles/app_bitcoind.dir/all] Error 2
> > >>>>> make: *** [all] Error 2
> > >>>>> -----
> > >>>>>
> > >>>>> What can I do?!
> > >>>>>
> > >>>>> Best,
> > >>>>> Thiago
> > >>>>>
> > >>>>>
> > >>>>> On 1 February 2012 12:18, Michael Gr?nager <gronager at ceptacle.com>
> wrote:
> > >>>>> Dear Bitcoiners,
> > >>>>>
> > >>>>> libcoin is now in a state ready for its first release, which I
> would like to share with you!
> > >>>>>
> > >>>>> === libcoin is a crypto currency library based on the
> bitcoin/bitcoin "Satoshi" client. ===
> > >>>>>
> > >>>>> Copenhagen, Denmark - 1st February 2012 Ceptacle announces the
> release of the first version of the crypto currency library "libcoin" based
> on the bitcoin/bitcoin "Satoshi" client.
> > >>>>>
> > >>>>> libcoin also maintains a version of bitcoind that is a 100%
> compatible drop-in replacement of the bitcoin/bitcoind client: You can use
> it on the same computer on the same files and you can call it with the same
> scripts. And you can easily extend it without touching the basic bitcoin
> source files.
> > >>>>>
> > >>>>> The libcoin/bitcoind client downloads the entire block chain 3.5
> times faster than the bitcoin/bitcoind client. This is less than 90 minutes
> on a modern laptop!
> > >>>>>
> > >>>>> In libcoin, the Satoshi client code has been completely
> refactored, properly encapsulating classes, removing all globals, moving
> from threads and mutexes to a pure asynchronous approach. Functionalities
> have been divided into logical units and libraries, minimizing dependencies
> for e.g. thin clients.
> > >>>>>
> > >>>>> libcoin is chain agnostic, all chain (bitcoin, testnet, namecoin,
> litecoin, ...) specific settings are maintained from a single class (Chain)
> and hence experiments with chain settings, mining, security and digital
> currencies for research and educational purposes are easily accessible. See
> the ponzicoin example for how you define your own chain.
> > >>>>>
> > >>>>> The build system of libcoin is based on CMake and supports builds
> of static and dynamic libraries on Linux, Mac OS X, and Windows.
> > >>>>>
> > >>>>> The libcoin license is LGPL v. 3. This mean that you can use it in
> open source as well as in commercial projects, but improvements should go
> back into the libcoin library.
> > >>>>>
> > >>>>> ======
> > >>>>>
> > >>>>> Read more on libcoin on: http://github.com/ceptacle/libcoin/wiki
> > >>>>>
> > >>>>> Join libcoin on twitter: http://twitter.com/libcoin
> > >>>>>
> > >>>>> Download "libcoin Satoshi release":
> http://github.com/ceptacle/libcoin/zipball/v0.4.0.1
> > >>>>>
> > >>>>> Best regards,
> > >>>>>
> > >>>>> Michael Gronager, PhD
> > >>>>> Director, Ceptacle
> > >>>>> Jens Juels Gade 33
> > >>>>> 2100 Copenhagen E
> > >>>>> Mobile: +45 31 45 14 01
> > >>>>> E-mail: gronager at ceptacle.com
> > >>>>> Web: http://www.ceptacle.com/
> > >>>>>
> > >>>>>
> > >>>>>
> ------------------------------------------------------------------------------
> > >>>>> Keep Your Developer Skills Current with LearnDevNow!
> > >>>>> The most comprehensive online learning library for Microsoft
> developers
> > >>>>> is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3,
> MVC3,
> > >>>>> Metro Style Apps, more. Free future releases when you subscribe
> now!
> > >>>>> http://p.sf.net/sfu/learndevnow-d2d
> > >>>>> _______________________________________________
> > >>>>> Bitcoin-development mailing list
> > >>>>> Bitcoin-development at lists.sourceforge.net
> > >>>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> > >>>>>
> > >>>>
> > >>>> Michael Gronager, PhD
> > >>>> Director, Ceptacle
> > >>>> Jens Juels Gade 33
> > >>>> 2100 Copenhagen E
> > >>>> Mobile: +45 31 45 14 01
> > >>>> E-mail: gronager at ceptacle.com
> > >>>> Web: http://www.ceptacle.com/
> > >>>>
> > >>>>
> > >>>>
> > >>>
> > >>>
> > >>
> > >> Michael Gronager, PhD
> > >> Director, Ceptacle
> > >> Jens Juels Gade 33
> > >> 2100 Copenhagen E
> > >> Mobile: +45 31 45 14 01
> > >> E-mail: gronager at ceptacle.com
> > >> Web: http://www.ceptacle.com/
> > >>
> > >>
> > >
> > > Michael Gronager, PhD
> > > Director, Ceptacle
> > > Jens Juels Gade 33
> > > 2100 Copenhagen E
> > > Mobile: +45 31 45 14 01
> > > E-mail: gronager at ceptacle.com
> > > Web: http://www.ceptacle.com/
> > >
> > >
> >
> > Michael Gronager, PhD
> > Director, Ceptacle
> > Jens Juels Gade 33
> > 2100 Copenhagen E
> > Mobile: +45 31 45 14 01
> > E-mail: gronager at ceptacle.com
> > Web: http://www.ceptacle.com/
> >
> >
>
> Michael Gronager, PhD
> Director, Ceptacle
> Jens Juels Gade 33
> 2100 Copenhagen E
> Mobile: +45 31 45 14 01
> E-mail: gronager at ceptacle.com
> Web: http://www.ceptacle.com/
>
>
>
> ------------------------------------------------------------------------------
> This SF email is sponsosred by:
> Try Windows Azure free for 90 days Click Here
> http://p.sf.net/sfu/sfd2d-msazure
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>



-- 

Peter J. Vessenes
CEO, CoinLab
M: 206.595.9839
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120322/337a4904/attachment.html>

From gavinandresen at gmail.com  Thu Mar 22 17:06:20 2012
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Thu, 22 Mar 2012 13:06:20 -0400
Subject: [Bitcoin-development] Please trim excessive quoting
Message-ID: <CABsx9T3XfYzLNYS+2sw-ROMaF1AO3n0_FeY8iqFdc7BJiMMgGg@mail.gmail.com>

Messages over 40Kbytes big require moderator approval on this list; if
you want your messages to appear promptly, please trim excessive
quoting before hitting send.

Thanks!

-- 
--
Gavin Andresen



From elombrozo at gmail.com  Sat Mar 24 08:41:25 2012
From: elombrozo at gmail.com (Eric Lombrozo)
Date: Sat, 24 Mar 2012 01:41:25 -0700
Subject: [Bitcoin-development] Adding callback hooks to the satoshi
	client
In-Reply-To: <CABr1YTd4+KES75cHqKSa0Gwz62nJnMVsTANVh_qzuSXqoYZAew@mail.gmail.com>
References: <CABr1YTc0TOvfyFNY4CTaOiTa3WWb-5JHjQOTarB=8zZ+DqiUFg@mail.gmail.com>
	<201203221000.41636.luke@dashjr.org>
	<CABr1YTd4+KES75cHqKSa0Gwz62nJnMVsTANVh_qzuSXqoYZAew@mail.gmail.com>
Message-ID: <CABr1YTcpoRT3k1Bqjz_m48RrDuGciD4nJmsE1RiGJ4g_2z22Ww@mail.gmail.com>

I'd also like to be able to get detailed information of message format
errors for debugging other nodes that connect to bitcoind. For
instance, if a transaction is rejected because the signature is
invalid, I want to know this. If it's because the amount is out of
range or because the output couldn't be connected, I want to know
this, too. I especially want to know if it was because the transaction
is claiming an output that has already been claimed by another
transaction.

For now, I've had to resort to sticking tracers and stubs into
bitcoind. It would be really nice to not only be able to write an
error log but to also let the connecting node know what went wrong.
Obviously these types of messages should *not* be part of the bitcoin
protocol itself since it invites all kinds of attacks. But it would be
wonderful to have a side channel for this type of data, and it could
also be done using callbacks.

The callback mechanism could be configurable in a similar fashion to
the RPC in the bitcoin.conf file.

-Eric Lombrozo



From gavinandresen at gmail.com  Mon Mar 26 23:40:18 2012
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Mon, 26 Mar 2012 19:40:18 -0400
Subject: [Bitcoin-development] Version 0.6 release candidate 5 binaries
Message-ID: <4F70FE62.8040807@gmail.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Barring any last-minute showstopper issues, the plan is for release
candidate 5 to become the official 0.6.0 release on Wednesday.

So please help look for last-minute showstopper issues:

https://sourceforge.net/projects/bitcoin/files/Bitcoin/bitcoin-0.6.0/test/

The major changes from release candidate 4:

+ Much faster writing of blkindex.dat during initial blockchain
download (by modifying the default bdb environment cache settings)

+ A new policy for wallet.dat upgrades: use the old format unless the
user either uses a feature that requires an upgrade (encrypts the
wallet) or explicitly requests that the wallet be upgraded using the
new -upgradewallet option. New wallets will use new features (for 0.6,
the only new wallet feature is compressed public keys).

+ bugfix introduced in rc4 for an assertion failure that could occur
during blockchain reorganizations

+ New code for managing the addr.dat file that prevents an attacker
from filling it with bogus entries.


- -- 
- --
Gavin Andresen
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.9 (Darwin)
Comment: Using GnuPG with Mozilla - http://enigmail.mozdev.org/

iEYEARECAAYFAk9w/mIACgkQdYgkL74406gafACdHYn6QI6QoKhkf22e0My2jCWa
IPkAn3YnNeMEmG8N6xEyCdNx3MTjgkcF
=CRL2
-----END PGP SIGNATURE-----



From thiagocmartinsc at gmail.com  Tue Mar 27 09:58:55 2012
From: thiagocmartinsc at gmail.com (=?ISO-2022-JP?B?TWFydGlueCAtIBskQiU4JSchPCVgJTobKEI=?=)
Date: Tue, 27 Mar 2012 06:58:55 -0300
Subject: [Bitcoin-development] Announcement: libcoin
In-Reply-To: <CAMGNxUsnz853vo=tBj9PNfcct8ZSrrm7Rcugud3ikGqU-W=LLg@mail.gmail.com>
References: <D55C3D18-8286-44E9-B877-6FCE7C05E980@ceptacle.com>
	<CAJSM8J0zqF2=Poknzc8R7TrTJ0DWCMBw2-K9gGhUP_Qf+J6eFg@mail.gmail.com>
	<4FF4A408-F8C9-4A50-8B13-13D3686BEB09@ceptacle.com>
	<CAJSM8J3bZYfpE9EATcYe=79s_RxvGG9BrdRQR9ivwtZnuPsL0w@mail.gmail.com>
	<CAJSM8J2nhoKsOnAeF8qBW3zOfp=sJ25sd8gnw2dMJ3GgkohDjQ@mail.gmail.com>
	<C3C58158-0DED-41A1-B4D2-BF746AFE717A@ceptacle.com>
	<CAJSM8J3255LpXbHRF+zEi0QRoM0mwuRP3FSNbSwSyz-_ge=Few@mail.gmail.com>
	<3C518667-C2A6-4D1F-988D-888964925489@ceptacle.com>
	<CAJSM8J2-+uHKJg9xjqtz785HBNY8wXtJLnw70jP0_HgNspx4Tg@mail.gmail.com>
	<AB5AEA73-93BD-440E-89F0-F0951047D71A@ceptacle.com>
	<CAJSM8J2ytXR0RSL=3+Se6mggH+pDmnkSx+CUp-bcod4qmJ3ObA@mail.gmail.com>
	<07A82C1E-AE1D-44DC-AF02-38A3D755FA35@ceptacle.com>
	<CAJSM8J2cjazkGn9vCdoqEKtDP0y1geftn7pJLcTmAGa4FH9BTA@mail.gmail.com>
	<264BCBC5-8ADC-46FA-B756-6CEEC18CAE75@ceptacle.com>
	<CAMGNxUsnz853vo=tBj9PNfcct8ZSrrm7Rcugud3ikGqU-W=LLg@mail.gmail.com>
Message-ID: <CAJSM8J2JpByLfJO5v=nSEHc-UJ7mN58UTJvpQKmYXZRuXqnd0Q@mail.gmail.com>

Hi!

 I'm trying to compile libcoin again and I'm seeing the following error:

libcoin at xapado:~/libcoin$ make
Scanning dependencies of target coin
[  1%] Building CXX object src/coin/CMakeFiles/coin.dir/util.o
In file included from /home/libcoin/libcoin/include/coin/serialize.h:22:0,
                 from /home/libcoin/libcoin/include/coin/uint256.h:8,
                 from /home/libcoin/libcoin/include/coin/util.h:10,
                 from /home/libcoin/libcoin/src/coin/util.cpp:6:
/home/libcoin/libcoin/include/coin/Version.h:5:25: fatal error:
coin/export.h: No such file or directory
compilation terminated.
make[2]: *** [src/coin/CMakeFiles/coin.dir/util.o] Error 1
make[1]: *** [src/coin/CMakeFiles/coin.dir/all] Error 2
make: *** [all] Error 2

 Any help?!

Thanks!
Thiago
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120327/b183899c/attachment.html>

From thiagocmartinsc at gmail.com  Wed Mar 28 07:59:42 2012
From: thiagocmartinsc at gmail.com (=?ISO-2022-JP?B?TWFydGlueCAtIBskQiU4JSchPCVgJTobKEI=?=)
Date: Wed, 28 Mar 2012 04:59:42 -0300
Subject: [Bitcoin-development] Announcement: libcoin
In-Reply-To: <072A82C0-A8FF-415D-8D1B-AE71F1D2208F@ceptacle.com>
References: <D55C3D18-8286-44E9-B877-6FCE7C05E980@ceptacle.com>
	<CAJSM8J0zqF2=Poknzc8R7TrTJ0DWCMBw2-K9gGhUP_Qf+J6eFg@mail.gmail.com>
	<4FF4A408-F8C9-4A50-8B13-13D3686BEB09@ceptacle.com>
	<CAJSM8J3bZYfpE9EATcYe=79s_RxvGG9BrdRQR9ivwtZnuPsL0w@mail.gmail.com>
	<CAJSM8J2nhoKsOnAeF8qBW3zOfp=sJ25sd8gnw2dMJ3GgkohDjQ@mail.gmail.com>
	<C3C58158-0DED-41A1-B4D2-BF746AFE717A@ceptacle.com>
	<CAJSM8J3255LpXbHRF+zEi0QRoM0mwuRP3FSNbSwSyz-_ge=Few@mail.gmail.com>
	<3C518667-C2A6-4D1F-988D-888964925489@ceptacle.com>
	<CAJSM8J2-+uHKJg9xjqtz785HBNY8wXtJLnw70jP0_HgNspx4Tg@mail.gmail.com>
	<AB5AEA73-93BD-440E-89F0-F0951047D71A@ceptacle.com>
	<CAJSM8J2ytXR0RSL=3+Se6mggH+pDmnkSx+CUp-bcod4qmJ3ObA@mail.gmail.com>
	<07A82C1E-AE1D-44DC-AF02-38A3D755FA35@ceptacle.com>
	<CAJSM8J15LBiT9ojrPDE1-TXqmBLXcVvAmWw0e=5nQfLtMQ42Zg@mail.gmail.com>
	<8CEEE576-37DF-4101-9593-73D5FB66D52F@ceptacle.com>
	<CAJSM8J2Xe1EnFxKFAGdH+bx2AVgoRYMg=VsdEmvO9S=x6gbMNQ@mail.gmail.com>
	<072A82C0-A8FF-415D-8D1B-AE71F1D2208F@ceptacle.com>
Message-ID: <CAJSM8J2O-zy1aDuEj7G+v8TZXuQqz-eLFnoUS7=3NVQWWTCpxg@mail.gmail.com>

Hi Michael,

 Let's talk a little bit more about this awesome stuff!

2012/3/22 Michael Gr?nager <gronager at ceptacle.com>

> >
> >  1- How close is Libcoin with original Bitcoin? I mean, the output is a
> little different, the bitcoind help output was disabled and, I'm afraid
> that Libcoin can possibly being distant from Bitcoin in the future... That
> can happen?!
>
> Well, I hope at some point to push libcoin to bitcoin, but that is not for
> me to decide ;)
>
>
Well, +1000 for that!! Since bitcoin-qt and bitcoind binaries share a lot
of functions... There is a need for some kind of library, right?! So, both
(and even more apps) can use it!  :)


> Anyway, I will strive at keeping the two synced - currently, they are
> almost in sync - even bip 16 is part of libcoin, but I have postponed
> generation of P2SH till after we were certain of 16 vs 17. So that is high
> on the list.
>
> I did a presentation of libcoin at BitCon12 in San Antonio - I will trow
> the slides at the web-side asap.
>
>
AWESOME!!


> >
> >  2- Do you have plans to update Libcoin on every new upstream Bitcoin
> release? How fast will be this updates? Do you need more resources/people
> working on it?
>
> More people is always nice! I am using libcoin for my own bitcoin project,
> so that should guarantee that it will be kept up to date.
>

 I'll try to help you here... One thing that I like to try and announce is:

 Use P2Pool with libcoin instead Bitcoin! BUT, to that work, libcoin must
behave EXACTLY like Bitcoin 0.6.0rc5 (at least).

 If it works, I'll update my P2Pool guide here:

 A Complete Guide to P2Pool - Merged Mining (BTC/NMC/DVC/IXC/I0C) plus LTC,
Linux:
 https://bitcointalk.org/index.php?topic=62842.0

 I think that this will bring much more eyes to Libcoin!! Don't you think?!

 Let's do it?!?!


> >  Another questions not involved directly with Libcoin/Bitcoin but, I'll
> need it for my future Bitcoin projects, and Libcoin is on my radar:
> >
> >  1- Do you know about Diaspora* Project?
>
> Yes, I even have an account :)
>

COOL!! I just finish my Diaspora test environment, can you try it?!

https://quilombas.com/


>
> >  2- Do you have skills in Ruby on Rails development?
>
> Nope...
>

Too bad... lol

My plan with Diaspora is to include a wallet for each user and, Libcoin
sound perfect for it.

If I use original bitcoind, each Diaspora user will consumes a lot of
resources and I'll need to build a private cloud computing for running
user's wallets more safely...

You know when you log into Diaspora and there is a Cubbi.es app for it?!
So, the same way Cubbi.es manages/shows your pictures within Diaspora, my
(our) application will manage our Bitcoins!! And users will be able to
send/sell Bitcoins between them (maybe integrating it with Bitcoin-OTC will
be a good idea for the future)...


> /M
>
> Michael Gronager, PhD
> Director, Ceptacle
> Jens Juels Gade 33
> 2100 Copenhagen E
> Mobile: +45 31 45 14 01
> E-mail: gronager at ceptacle.com
> Web: http://www.ceptacle.com/
>
>
Cheers!
Thiago Martins
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120328/8bf172e4/attachment.html>

From luke at dashjr.org  Sat Mar 31 04:03:17 2012
From: luke at dashjr.org (Luke-Jr)
Date: Sat, 31 Mar 2012 00:03:17 -0400
Subject: [Bitcoin-development] 0.7 merge recommendations/status
Message-ID: <201203310003.18599.luke@dashjr.org>

NOTE: I've been piecing this together for about a week now, and intended to 
update it when 0.6.0 final was released, but with the timing of it, I just 
won't get the time to update for a while, so here is my last draft...

It seems to me, there is potentially enough ready to merge into 0.7 to start 
the RC process right away if someone wants to... except that the first merge 
will probably require rebasing everything else ;)

My first recommendation is to merge Matt's CBlockStore (#771). It's mostly a 
major code cleanup, but it still needs a lot of post-merge testing. The sooner 
it gets in the master branch, the more testing of unexpected cases that it 
will get before final. Also, Matt's been working hard to keep rebasing it 
throughout the 0.6 merge window, which is very difficult since it conflicts 
with pretty much every other change. As one of the parties responsible for 
those other changes, I vote to get the big conflict over with and rebase all 
the simpler stuff afterward.

Next up are some changes already ACK'd for 0.7: Hearn's "pong" message (#932) 
and Wladimir's Visual C++ 2010 fixes (#949). getmemorypool BIP standardization 
(#936) is also ACK'd, but it might be good to wait until later in the merge 
window considering its low impact and high potential for change as the BIP 
gets closer to Accepted status.

For similar reasons as CBlockStore, I feel multithreaded JSON-RPC with keep-
alive support (#568) should be merged sooner rather than later. It's long 
overdue for bitcoind having had a lot of testing, and pretty much required for 
any sort of high-volume bitcoind usage (such as solo mining). Some other 
optimizations by Joel such as the optimized ToHex function (#562) and 
FastGetWork (#565) have also had plenty of testing; all combined, these 
optimizations more than double the performance of JSON-RPC.
Details: https://github.com/bitcoin/bitcoin/pull/565#issuecomment-3269334

Pieter's getalltransactions (#841) and my getblock_full (#886) provide what is 
needed to completely replace Jeff's old dumpblock call with bitcoind's new 
getblock. He also put together a -loadblock option (#883) which has proven 
quite handy for development, and -walletupgrade (#974) seems like a good idea.

Under the hood, Chris has some neat refactoring of the coin selection 
algorithm (#905, #898), and I haven't had any problems using it in next-test 
for a few weeks now. Michael has contributed a patch to get the standard 
reopen-log-files-on-SIGHUP (#917). Matt noticed the protocol documentation on 
the wiki and BitcoinJ both expect the 'getheaders' message to return at most 
only 2000 headers, so recommends we enforce that in the core (#951). Philip 
has a trivial flip to the backslashes in debug.log for Windows (#971). Some 
p2pool miners put up a bounty for a JSON-RPC call to customize fee 
requirements (#989) that would help make Bitcoin more decentralized.

Scott has a pull request for Bitcoin-Qt to behave more like other close-to-
systray applications by toggling the hide/show action (#855). He's also 
contributed a patch to show miners' immature balances on the overview screen 
(#837; it leaves only a blank space for non-miners). Nils, on the other hand, 
has been working with a UI designer to totally remodel Bitcoin-Qt.

Coderrr has rebased his Coin Control features (#415) to the latest version. 
These seem to be popular, so should probably be merged as soon as it's had 
proper review.

Finally, I don't know the status of Pieter's IPv6 support, but I hope it will 
be ready for 0.7. Right now all I see submitted for this is support for 
multiple local IPs (#829) though.

I'd like to see Coinbaser (#719) finally get merged, but since it seems nobody 
is using bitcoind for mining anymore, I guess there isn't a real need. I don't 
plan to rebase this anymore unless someone gives it a "I'll merge it" sign.

Luke



From laanwj at gmail.com  Sat Mar 31 07:56:57 2012
From: laanwj at gmail.com (Wladimir)
Date: Sat, 31 Mar 2012 09:56:57 +0200
Subject: [Bitcoin-development] 0.7 merge recommendations/status
In-Reply-To: <201203310003.18599.luke@dashjr.org>
References: <201203310003.18599.luke@dashjr.org>
Message-ID: <CA+s+GJCzo6GZDyFh8UEy9BNpO7AAZv4NDcEFDAUz=ZEad2=VMQ@mail.gmail.com>

Thanks for the summary!

On Sat, Mar 31, 2012 at 6:03 AM, Luke-Jr <luke at dashjr.org> wrote:

> It seems to me, there is potentially enough ready to merge into 0.7 to
> start
> the RC process right away if someone wants to... except that the first
> merge
> will probably require rebasing everything else ;)
>

Yes, we have a lot of changes waiting already.


> Next up are some changes already ACK'd for 0.7: Hearn's "pong" message
> (#932)
> and Wladimir's Visual C++ 2010 fixes (#949). getmemorypool BIP
> standardization
> (#936) is also ACK'd, but it might be good to wait until later in the merge
> window considering its low impact and high potential for change as the BIP
> gets closer to Accepted status.
>

Agreed.


>
> any sort of high-volume bitcoind usage (such as solo mining). Some other
> optimizations by Joel such as the optimized ToHex function (#562) and
>

See my comments there; I'm all for optimizing the ToHex function, but I
prefer that he optimizes the current ToHex function not add yet another one
with an incompatible interface.

(we have the same problem with Error/Debug/"Log to console" functions, too
many of them and sometimes it's unclear what the difference is)


> Scott has a pull request for Bitcoin-Qt to behave more like other close-to-
> systray applications by toggling the hide/show action (#855). He's also
> contributed a patch to show miners' immature balances on the overview
> screen
> (#837; it leaves only a blank space for non-miners). Nils, on the other
> hand,
> has been working with a UI designer to totally remodel Bitcoin-Qt.
>

I also have some UI code changes ready, for example one to use notification
from the bitcoin core when the address book/transactions changed, instead
of a timer. Will submit pull requests soon.

Coderrr has rebased his Coin Control features (#415) to the latest version.
> These seem to be popular, so should probably be merged as soon as it's
> had proper review.
>

Agreed. It is very popular and should certainly be merged. And it has seen
quite some testing already. Though this will take some time to review, as
it is quite a large change.


> Finally, I don't know the status of Pieter's IPv6 support, but I hope it
> will
> be ready for 0.7. Right now all I see submitted for this is support for
> multiple local IPs (#829) though.
>
>
IPv6 support would be nice, but I don't think a milestone of 0.7 is
realistic. Such a change to the network code will require extensive
testing. Who has access to IPv6 and can help testing?

Wladimir
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120331/554463e4/attachment.html>

From pieter.wuille at gmail.com  Sat Mar 31 10:54:02 2012
From: pieter.wuille at gmail.com (Pieter Wuille)
Date: Sat, 31 Mar 2012 12:54:02 +0200
Subject: [Bitcoin-development] 0.7 merge recommendations/status
In-Reply-To: <201203310003.18599.luke@dashjr.org>
References: <201203310003.18599.luke@dashjr.org>
Message-ID: <20120331105401.GA14117@vps7135.xlshosting.net>

On Sat, Mar 31, 2012 at 12:03:17AM -0400, Luke-Jr wrote:
> NOTE: I've been piecing this together for about a week now, and intended to 
> update it when 0.6.0 final was released, but with the timing of it, I just 
> won't get the time to update for a while, so here is my last draft...

Nice summary, thanks.

> It seems to me, there is potentially enough ready to merge into 0.7 to start 
> the RC process right away if someone wants to... except that the first merge 
> will probably require rebasing everything else ;)

I think that's right - for several reasons, the time between 0.5 and 0.6 was 
over 4 months. I prefer more frequent releases, as it slows down development
this way.

> For similar reasons as CBlockStore, I feel multithreaded JSON-RPC with keep-
> alive support (#568) should be merged sooner rather than later. It's long 
> overdue for bitcoind having had a lot of testing, and pretty much required for 
> any sort of high-volume bitcoind usage (such as solo mining). Some other 
> optimizations by Joel such as the optimized ToHex function (#562) and 
> FastGetWork (#565) have also had plenty of testing; all combined, these 
> optimizations more than double the performance of JSON-RPC.
> Details: https://github.com/bitcoin/bitcoin/pull/565#issuecomment-3269334

I'd rather see a decent encapsulation of wallet and blockchain data structures
that allow us to make their mutexes private, and let only the code from the
respective mutex take locks in it when necessary. That will automatically
lead to multithreaded RPC, but in a safe way, without needing guesswork about
which two calls may or may not be called simultaneously.

Of course, that requires a lot more work, but at some point that will be needed
anyway, imho.

> Pieter's getalltransactions (#841) and my getblock_full (#886) provide what is 
> needed to completely replace Jeff's old dumpblock call with bitcoind's new 
> getblock. He also put together a -loadblock option (#883) which has proven 
> quite handy for development, and -walletupgrade (#974) seems like a good idea.

I've used loadblocks often in my personal branches. At least on Linux it seems
to work fine. The data scanning code is mostly Cish though, and there may be
more preferrable to use boost or generic C++ solutions.

> Finally, I don't know the status of Pieter's IPv6 support, but I hope it will 
> be ready for 0.7. Right now all I see submitted for this is support for 
> multiple local IPs (#829) though.

I've already had a fully functional IPv6 node based on 0.3.24. Most of the changes
there have since been incorported in netbase (#735), and because of a risk for DoS'es
based on the much larger number of addresses an attacker could have under his control,
addrman (#787) was necessary before IPv6 could be fully implemented. So, the technical
part of supporting IPv6 seems mostly finished - right now, it's mostly just removing
some (!IsIPv4()) checks and adding listen/connect code that is IPv6-compatible.
I'll do a pullreq for that soon.

There are a few other issues, though. For example: how will relaying work: will IPv4
nodes relay IPv6 addresses? If not, the IPv6 bitcoin network will be completely
separate from the IPv4 one, though both may overlap in some points. The opposite is
also possible: allowing all nodes to relay IPv6 addresses, but only use them in case
an IPv6-compatible interface is detected. Any opinions about this?

Something else was suggested by Jeff: what if a node accidentally connects to itself?
As we're moving towards multiple local addresses with IPv6, the chances for this
become larger. Finally, there are always extra risks involved, as we could unknowingly
be opening DoS or others vulnerabilities.

Finally, supporting IPv6 in a somewhat general way would pave the way for bitcoin
functioning for example as a Tor or I2P hidden service, by using onioncat-like
tor-encoded-in-IPv6 addresses. This way, two bitcoin nodes could connect to eachother
without the need for passing any exit node.

-- 
Pieter



From pieter.wuille at gmail.com  Sat Mar 31 11:08:47 2012
From: pieter.wuille at gmail.com (Pieter Wuille)
Date: Sat, 31 Mar 2012 13:08:47 +0200
Subject: [Bitcoin-development] 0.7 merge recommendations/status
In-Reply-To: <20120331105401.GA14117@vps7135.xlshosting.net>
References: <201203310003.18599.luke@dashjr.org>
	<20120331105401.GA14117@vps7135.xlshosting.net>
Message-ID: <20120331110846.GA15011@vps7135.xlshosting.net>

On Sat, Mar 31, 2012 at 12:54:02PM +0200, Pieter Wuille wrote:
> Something else was suggested by Jeff: what if a node accidentally connects to itself?
> As we're moving towards multiple local addresses with IPv6, the chances for this
> become larger. Finally, there are always extra risks involved, as we could unknowingly
> be opening DoS or others vulnerabilities.

My mistake: I mean two nodes connecting twice to eachother. There is already protection
against a node connecting to itself.

-- 
Pieter




From gronager at mac.com  Sat Mar 31 11:16:56 2012
From: gronager at mac.com (=?iso-8859-1?Q?Michael_Gr=F8nager?=)
Date: Sat, 31 Mar 2012 13:16:56 +0200
Subject: [Bitcoin-development] 0.7 merge recommendations/status
In-Reply-To: <20120331105401.GA14117@vps7135.xlshosting.net>
References: <201203310003.18599.luke@dashjr.org>
	<20120331105401.GA14117@vps7135.xlshosting.net>
Message-ID: <FF86C935-B407-4983-BCB2-61A79DAF8DB8@mac.com>

If you are interested, I could push libcoin to bitcoin (e.g. bitcoin/libcoin) and then you could build bitcoind bitcoin-qt on libcoin.

libcoin solved most of the problems you list below. And if you worry about the copyright/license I am also willing to change that to make it fit.

libcoin have no global thread mutexes and and there is no blocking of the main thread due to rpc methods (except for a sendto), further, e.g. a reorganize only locks the main thread for a split second while the final commit is done. 

The libcoin rpc supports keep_alive and pipelining, runs in its own thread (but can also run in the same thread as the node) and uses async operation. Ipv6 is easy to implement in libcoin as the CAddress/Endpoint class is implemented as a subclass of boost::endpoint, only thing holding back is deciding on an ipv6 format on IRC, and, I then I would really like to reverse the order of the last 12 bytes in the address db (they are opposite to boost).

Cheers,

Michael

On 31/03/2012, at 12:54, Pieter Wuille wrote:

> On Sat, Mar 31, 2012 at 12:03:17AM -0400, Luke-Jr wrote:
>> NOTE: I've been piecing this together for about a week now, and intended to 
>> update it when 0.6.0 final was released, but with the timing of it, I just 
>> won't get the time to update for a while, so here is my last draft...
> 
> Nice summary, thanks.
> 
>> It seems to me, there is potentially enough ready to merge into 0.7 to start 
>> the RC process right away if someone wants to... except that the first merge 
>> will probably require rebasing everything else ;)
> 
> I think that's right - for several reasons, the time between 0.5 and 0.6 was 
> over 4 months. I prefer more frequent releases, as it slows down development
> this way.
> 
>> For similar reasons as CBlockStore, I feel multithreaded JSON-RPC with keep-
>> alive support (#568) should be merged sooner rather than later. It's long 
>> overdue for bitcoind having had a lot of testing, and pretty much required for 
>> any sort of high-volume bitcoind usage (such as solo mining). Some other 
>> optimizations by Joel such as the optimized ToHex function (#562) and 
>> FastGetWork (#565) have also had plenty of testing; all combined, these 
>> optimizations more than double the performance of JSON-RPC.
>> Details: https://github.com/bitcoin/bitcoin/pull/565#issuecomment-3269334
> 
> I'd rather see a decent encapsulation of wallet and blockchain data structures
> that allow us to make their mutexes private, and let only the code from the
> respective mutex take locks in it when necessary. That will automatically
> lead to multithreaded RPC, but in a safe way, without needing guesswork about
> which two calls may or may not be called simultaneously.
> 
> Of course, that requires a lot more work, but at some point that will be needed
> anyway, imho.
> 
>> Pieter's getalltransactions (#841) and my getblock_full (#886) provide what is 
>> needed to completely replace Jeff's old dumpblock call with bitcoind's new 
>> getblock. He also put together a -loadblock option (#883) which has proven 
>> quite handy for development, and -walletupgrade (#974) seems like a good idea.
> 
> I've used loadblocks often in my personal branches. At least on Linux it seems
> to work fine. The data scanning code is mostly Cish though, and there may be
> more preferrable to use boost or generic C++ solutions.
> 
>> Finally, I don't know the status of Pieter's IPv6 support, but I hope it will 
>> be ready for 0.7. Right now all I see submitted for this is support for 
>> multiple local IPs (#829) though.
> 
> I've already had a fully functional IPv6 node based on 0.3.24. Most of the changes
> there have since been incorported in netbase (#735), and because of a risk for DoS'es
> based on the much larger number of addresses an attacker could have under his control,
> addrman (#787) was necessary before IPv6 could be fully implemented. So, the technical
> part of supporting IPv6 seems mostly finished - right now, it's mostly just removing
> some (!IsIPv4()) checks and adding listen/connect code that is IPv6-compatible.
> I'll do a pullreq for that soon.
> 
> There are a few other issues, though. For example: how will relaying work: will IPv4
> nodes relay IPv6 addresses? If not, the IPv6 bitcoin network will be completely
> separate from the IPv4 one, though both may overlap in some points. The opposite is
> also possible: allowing all nodes to relay IPv6 addresses, but only use them in case
> an IPv6-compatible interface is detected. Any opinions about this?
> 
> Something else was suggested by Jeff: what if a node accidentally connects to itself?
> As we're moving towards multiple local addresses with IPv6, the chances for this
> become larger. Finally, there are always extra risks involved, as we could unknowingly
> be opening DoS or others vulnerabilities.
> 
> Finally, supporting IPv6 in a somewhat general way would pave the way for bitcoin
> functioning for example as a Tor or I2P hidden service, by using onioncat-like
> tor-encoded-in-IPv6 addresses. This way, two bitcoin nodes could connect to eachother
> without the need for passing any exit node.
> 
> -- 
> Pieter
> 
> ------------------------------------------------------------------------------
> This SF email is sponsosred by:
> Try Windows Azure free for 90 days Click Here 
> http://p.sf.net/sfu/sfd2d-msazure
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development

Michael Gronager, PhD
Director, Ceptacle
Jens Juels Gade 33
2100 Copenhagen E
Mobile: +45 31 45 14 01
E-mail: gronager at ceptacle.com
Web: http://www.ceptacle.com/




From pieter.wuille at gmail.com  Sat Mar 31 12:28:28 2012
From: pieter.wuille at gmail.com (Pieter Wuille)
Date: Sat, 31 Mar 2012 14:28:28 +0200
Subject: [Bitcoin-development] 0.7 merge recommendations/status
In-Reply-To: <FF86C935-B407-4983-BCB2-61A79DAF8DB8@mac.com>
References: <201203310003.18599.luke@dashjr.org>
	<20120331105401.GA14117@vps7135.xlshosting.net>
	<FF86C935-B407-4983-BCB2-61A79DAF8DB8@mac.com>
Message-ID: <20120331122827.GA15726@vps7135.xlshosting.net>

On Sat, Mar 31, 2012 at 01:16:56PM +0200, Michael Gr?nager wrote:
> If you are interested, I could push libcoin to bitcoin (e.g. bitcoin/libcoin) and then you could build bitcoind bitcoin-qt on libcoin.
> 
> libcoin solved most of the problems you list below. And if you worry about the copyright/license I am also willing to change that to make it fit.

Thanks for that - without a license change it would not be possible to merge anything.

> libcoin have no global thread mutexes and and there is no blocking of the main thread due to rpc methods (except for a sendto), further, e.g. a reorganize only locks the main thread for a split second while the final commit is done. 

Yes, I like its design and refactorings a lot, but at the same time it's very large change to accept at once. In particular, I'm not entirely convinced yet about its thread-safety. For example, acceptblock is a public method, but it seems (i may be missing something) to grab no lock at all until setBestBlock or reorganize is called. Is it impossible to call acceptBlock twice simultaneously? One may start with a bestblockindex value that gets modified a split second later by a simultaneous call. It may be the case that there are indeed no possibilities for this to happen because of things I'm missing, but although I'm a big fan of well-encapsulated locks and the use of reader-writer locks, it's hard to verify whether you use them enough. My suggestion would be: make each publicly accessible method of BlockChain grab either a reader lock (if it's a const function) or an upgradable lock, and take a writer lock in each method that actually performs changes.

> The libcoin rpc supports keep_alive and pipelining, runs in its own thread (but can also run in the same thread as the node) and uses async operation. Ipv6 is easy to implement in libcoin as the CAddress/Endpoint class is implemented as a subclass of boost::endpoint, only thing holding back is deciding on an ipv6 format on IRC, and, I then I would really like to reverse the order of the last 12 bytes in the address db (they are opposite to boost).

Not sure what you mean: the serialized combination of the 32-bit IPv4 address and 12 bytes padding in CAddress are exactly a bsd socket library in6_addr in network byte order. In 0.6.0, CAddress derives from CNetAddr, which encapsulates these 16 bytes.

-- 
Pieter




