From jgarzik at bitpay.com  Wed Jul  3 16:15:52 2013
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Wed, 3 Jul 2013 12:15:52 -0400
Subject: [Bitcoin-development] txtool: Advanced transaction building and fun
Message-ID: <CAJHLa0PkRV+Jh6ZvPGuvOUwZc-=4LjS0ONT8h3VAESvF33s28A@mail.gmail.com>

URL: https://github.com/jgarzik/txtool

txtool is a command line tool written in node.js that interfaces with
Bitcoin-Qt/bitcoind, to automate or assist in building interesting,
unusual, complicated or just plain odd transactions.  The goal is to
demonstrate advanced bitcoin features, and make it easier for users to
experiment.  The intended audience has a basic awareness of how
bitcoin transactions look and work.

The theory of operation and full list of commands may be reviewed at
https://github.com/jgarzik/txtool/blob/master/README

Initially, two working examples are presented:
* Easy multi-signature transaction building:
https://github.com/jgarzik/txtool/blob/master/examples/multisig.txt
(similar to gmaxwell's P2SH multisig example)
* Passing around transactions (possibly multi-signature) for signing:
https://github.com/jgarzik/txtool/blob/master/examples/tx-signing.txt

Further examples such as decentralized crowdfunding and atomic coin
swapping* will be demonstrated soon.


* https://bitcointalk.org/index.php?topic=112007.msg1212356#msg1212356

-- 
Jeff Garzik
Senior Software Engineer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From adam at cypherspace.org  Fri Jul  5 14:01:40 2013
From: adam at cypherspace.org (Adam Back)
Date: Fri, 5 Jul 2013 16:01:40 +0200
Subject: [Bitcoin-development] libzerocoin released,
 what about a zerocoin-only alt-coin with either-or mining
Message-ID: <20130705140140.GA23949@netbook.cypherspace.org>

Hi

I presume everyone saw the announce from Matthew Green & Ian Miers at JHU on
the release of libzerocoin: https://github.com/Zerocoin/libzerocoin

So now that raises the question of how can people experiment with real money
with zerocoin.  I think its fair to summarize there is resistance to merging
into bitcoin as it slows validation, bloats the blockchain, and also a
policy aspect it also imports cryptographic privacy into bitcoin.

On the forum thread on zerocoin math etc I suggested maybe people interested
to explore bitcoin could create an all-zerocoin alt-coin that is either-or
mined and p2p exchangeable for bitcoin.

Do people think that should work?  It seems to me it should with minimal,
bitcoin changes.  I think the rule for either-or mining should be as simple
as skipping the value / double-spend validation of the blocks that are
zerocoin mining blocks.  Obviously zerocoin blocks can themselves end up on
forks, that get resolved, but that fork resolution can perhaps be shared? 
(Because the fork resolution is simply to accept the longest fork).

> what about making an all zerocoin based alt-coin (no bitcoins, nothing but
> zerocoins), that is either-or mined with bitcoin.  Then people can trade
> in and out of zerocoins by buying or selling them for bitcoin with an
> atomic transaction, probably p2p without some trusted exchange like mtgox.
> 
> Either-or mined (as distinct from merge-mined) I mean that each mined coin
> set is either a set of 25 bitcoins or a set of 25 zerocoins.  If its a
> zerocoin set its not a valid bitcoin set, and if its a bitcoin its not a
> valid zerocoin.  I'm not sure the zerocoins or bitcoins have to do much
> with mining events for the other network other than check they have the
> expected number of bits as they wont automatically know how to validate
> the other network.  Some miners may choose to validate both networks, but
> thats a choice for them.
> 
> In that way people can experiment with zerocoin, without bloating the
> block chain, complicating bitcoin, and without slowing validation on the
> bitcoin network.  And the two coins should have approximately the same
> cost (and maybe therefore value, though the price would be subject to
> demand/supply and any taint discount for bitcoins; zerocoins are taint
> free, or perfectly blended taint at least).

Adam



From robbak at robbak.com  Tue Jul  9 00:22:38 2013
From: robbak at robbak.com (Robert Backhaus)
Date: Tue, 9 Jul 2013 10:22:38 +1000
Subject: [Bitcoin-development] Proposal: MultiBit as default desktop
 client on bitcoin.org
In-Reply-To: <CAKm8k+20z0FkQjnYXjBwUSwY4ncTmMc-LXDH=hF6u55f_gWpkA@mail.gmail.com>
References: <1372353053.10405.140661249237317.77984E1F@webmail.messagingengine.com>
	<CAJHLa0Ncac9Xt-AQBnpghqqpfR-j6Xtd9qVQoUe2dPp0kJvz1A@mail.gmail.com>
	<CANEZrP0k1HDrJC9DOn6JYiVcaRRXwVwxW7ZPjE9XvfTCHXX6pw@mail.gmail.com>
	<CABsx9T3GJN0inGChebJt_dRLpVrPw7BTH8oQo6F4q6yFJaOoCA@mail.gmail.com>
	<CANEZrP3LGxZ6E+9UWQH+_RN66dfeGzo4+QYACjauKRufpqB2QA@mail.gmail.com>
	<1372605569.4937.140661250186789.39404E47@webmail.messagingengine.com>
	<CAKm8k+20z0FkQjnYXjBwUSwY4ncTmMc-LXDH=hF6u55f_gWpkA@mail.gmail.com>
Message-ID: <CA+i0-i9tj8w7pNuk7nUBQKdxvizX+6_Ez1VA8OtKJNTqRrYtxg@mail.gmail.com>

But... Multibit is Java. Java's security problems has made it an instant
uninstall item on windows PCs for about a year now. Java exploits are a
dime a dozen.

Yes, you can reduce some of the problems by manually disabling the browser
plugin, but how many users will do that?

Recommending a fast SPV client as a first wallet - yes, of course.
Recommending users open such a huge attack interface on their computers by
installing Java - No go. Until Multibit is provided as a compiled binary
without a Java dependency, it is DOA.


On 1 July 2013 02:39, Gary Rowe <g.rowe at froot.co.uk> wrote:

> I've beefed up the supporting documentation for the website to make it
> more accessible for developers who wish to contribute. It's a Java
> application serving HTML.
>
> It can be found here: https://github.com/jim618/multibit-website
>
>
> On 30 June 2013 16:19, Jim <jim618 at fastmail.co.uk> wrote:
>
>> Yeah "email jim' was never going to work so I have
>> bumped up MultiBit support (a bit) by:
>>
>> + having a dedicated Support page on the website
>>    https://multibit.org/support.html
>>    It has fixes and support notes for the most common gotchas.
>> + the in-app help also now has a 'Support' section with
>>    "Troubleshooting' and the commonest gotchas.
>>    I've also written more help to cover as much as possible.
>> + Failing that people are directed first to bitcoin.stackchange.com
>>    (I have a notification set up for the 'multibit' keyword.
>> + Then finally users are directed to the github issues to search
>>    existing or raise a new issue. Gary and Tim often chip in on there to
>>    close
>>    issues down as well as me.
>>
>>
>>
>> On Sun, Jun 30, 2013, at 12:42 PM, Mike Hearn wrote:
>> > Sounds like we have consensus, Saivann, shall we do it?
>> >
>> > I'm also going to ask Theymos again to relax the newbie restrictions
>> > for the alt client forums. It's probably too hard to get support at
>> > the moment and "email jim" doesn't scale at all.
>> >
>> > On Fri, Jun 28, 2013 at 4:24 PM, Gavin Andresen <
>> gavinandresen at gmail.com>
>> > wrote:
>> > > I vote "yes" to have MultiBit replace Bitcoin-Qt as the recommended
>> > > desktop wallet app. I think most users will be happier with it.
>> > >
>> > > If I'm wrong, it is easy to change back.
>> > >
>> > >
>> ------------------------------------------------------------------------------
>> > > This SF.net email is sponsored by Windows:
>> > >
>> > > Build for Windows Store.
>> > >
>> > > http://p.sf.net/sfu/windows-dev2dev
>> > > _______________________________________________
>> > > Bitcoin-development mailing list
>> > > Bitcoin-development at lists.sourceforge.net
>> > > https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>> >
>> >
>> ------------------------------------------------------------------------------
>> > This SF.net email is sponsored by Windows:
>> >
>> > Build for Windows Store.
>> >
>> > http://p.sf.net/sfu/windows-dev2dev
>> > _______________________________________________
>> > Bitcoin-development mailing list
>> > Bitcoin-development at lists.sourceforge.net
>> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>
>>
>> --
>> https://multibit.org    Money, reinvented
>>
>>
>> ------------------------------------------------------------------------------
>> This SF.net email is sponsored by Windows:
>>
>> Build for Windows Store.
>>
>> http://p.sf.net/sfu/windows-dev2dev
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>
>
>
>
> ------------------------------------------------------------------------------
> This SF.net email is sponsored by Windows:
>
> Build for Windows Store.
>
> http://p.sf.net/sfu/windows-dev2dev
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130709/e45170a6/attachment.html>

From calebdelisle at lavabit.com  Tue Jul  9 01:20:08 2013
From: calebdelisle at lavabit.com (Caleb James DeLisle)
Date: Mon, 08 Jul 2013 21:20:08 -0400
Subject: [Bitcoin-development] Proposal: MultiBit as default desktop
 client on bitcoin.org
In-Reply-To: <CA+i0-i9tj8w7pNuk7nUBQKdxvizX+6_Ez1VA8OtKJNTqRrYtxg@mail.gmail.com>
References: <1372353053.10405.140661249237317.77984E1F@webmail.messagingengine.com>
	<CAJHLa0Ncac9Xt-AQBnpghqqpfR-j6Xtd9qVQoUe2dPp0kJvz1A@mail.gmail.com>
	<CANEZrP0k1HDrJC9DOn6JYiVcaRRXwVwxW7ZPjE9XvfTCHXX6pw@mail.gmail.com>
	<CABsx9T3GJN0inGChebJt_dRLpVrPw7BTH8oQo6F4q6yFJaOoCA@mail.gmail.com>
	<CANEZrP3LGxZ6E+9UWQH+_RN66dfeGzo4+QYACjauKRufpqB2QA@mail.gmail.com>
	<1372605569.4937.140661250186789.39404E47@webmail.messagingengine.com>
	<CAKm8k+20z0FkQjnYXjBwUSwY4ncTmMc-LXDH=hF6u55f_gWpkA@mail.gmail.com>
	<CA+i0-i9tj8w7pNuk7nUBQKdxvizX+6_Ez1VA8OtKJNTqRrYtxg@mail.gmail.com>
Message-ID: <51DB6548.5070909@lavabit.com>

Java (Applet) security is indeed abysmal but lets compare apples to apples.
With an applet some random guy with a website makes up some Java code and
your browser automatically executes it.
With Multibit you're only executing highly trusted code (so trusted that it
handles your money).
There has almost never been a Java exploit against secure trusted code.

The idea of discouraging use of java apps just because people would be
tricked into activating the browser plugin when installing the JVM is
probably valid but Multibit is the only reasonably complete client outside
of bitcoinqt and I think client diversity is more important than stamping
out java.

Thanks,
Caleb


On 07/08/2013 08:22 PM, Robert Backhaus wrote:
> But... Multibit is Java. Java's security problems has made it an instant uninstall item on windows PCs for about a year now. Java exploits are a dime a dozen.
> 
> Yes, you can reduce some of the problems by manually disabling the browser plugin, but how many users will do that?
> 
> Recommending a fast SPV client as a first wallet - yes, of course. Recommending users open such a huge attack interface on their computers by installing Java - No go. Until Multibit is provided as a compiled binary without a Java dependency, it is DOA.
> 
> 
> On 1 July 2013 02:39, Gary Rowe <g.rowe at froot.co.uk <mailto:g.rowe at froot.co.uk>> wrote:
> 
>     I've beefed up the supporting documentation for the website to make it more accessible for developers who wish to contribute. It's a Java application serving HTML.
> 
>     It can be found here: https://github.com/jim618/multibit-website
> 
> 
>     On 30 June 2013 16:19, Jim <jim618 at fastmail.co.uk <mailto:jim618 at fastmail.co.uk>> wrote:
> 
>         Yeah "email jim' was never going to work so I have
>         bumped up MultiBit support (a bit) by:
> 
>         + having a dedicated Support page on the website
>            https://multibit.org/support.html
>            It has fixes and support notes for the most common gotchas.
>         + the in-app help also now has a 'Support' section with
>            "Troubleshooting' and the commonest gotchas.
>            I've also written more help to cover as much as possible.
>         + Failing that people are directed first to bitcoin.stackchange.com <http://bitcoin.stackchange.com>
>            (I have a notification set up for the 'multibit' keyword.
>         + Then finally users are directed to the github issues to search
>            existing or raise a new issue. Gary and Tim often chip in on there to
>            close
>            issues down as well as me.
> 
> 
> 
>         On Sun, Jun 30, 2013, at 12:42 PM, Mike Hearn wrote:
>         > Sounds like we have consensus, Saivann, shall we do it?
>         >
>         > I'm also going to ask Theymos again to relax the newbie restrictions
>         > for the alt client forums. It's probably too hard to get support at
>         > the moment and "email jim" doesn't scale at all.
>         >
>         > On Fri, Jun 28, 2013 at 4:24 PM, Gavin Andresen <gavinandresen at gmail.com <mailto:gavinandresen at gmail.com>>
>         > wrote:
>         > > I vote "yes" to have MultiBit replace Bitcoin-Qt as the recommended
>         > > desktop wallet app. I think most users will be happier with it.
>         > >
>         > > If I'm wrong, it is easy to change back.
>         > >
>         > > ------------------------------------------------------------------------------
>         > > This SF.net email is sponsored by Windows:
>         > >
>         > > Build for Windows Store.
>         > >
>         > > http://p.sf.net/sfu/windows-dev2dev
>         > > _______________________________________________
>         > > Bitcoin-development mailing list
>         > > Bitcoin-development at lists.sourceforge.net <mailto:Bitcoin-development at lists.sourceforge.net>
>         > > https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>         >
>         > ------------------------------------------------------------------------------
>         > This SF.net email is sponsored by Windows:
>         >
>         > Build for Windows Store.
>         >
>         > http://p.sf.net/sfu/windows-dev2dev
>         > _______________________________________________
>         > Bitcoin-development mailing list
>         > Bitcoin-development at lists.sourceforge.net <mailto:Bitcoin-development at lists.sourceforge.net>
>         > https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 
> 
>         --
>         https://multibit.org    Money, reinvented
> 
>         ------------------------------------------------------------------------------
>         This SF.net email is sponsored by Windows:
> 
>         Build for Windows Store.
> 
>         http://p.sf.net/sfu/windows-dev2dev
>         _______________________________________________
>         Bitcoin-development mailing list
>         Bitcoin-development at lists.sourceforge.net <mailto:Bitcoin-development at lists.sourceforge.net>
>         https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 
> 
> 
>     ------------------------------------------------------------------------------
>     This SF.net email is sponsored by Windows:
> 
>     Build for Windows Store.
> 
>     http://p.sf.net/sfu/windows-dev2dev
>     _______________________________________________
>     Bitcoin-development mailing list
>     Bitcoin-development at lists.sourceforge.net <mailto:Bitcoin-development at lists.sourceforge.net>
>     https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 
> 
> 
> 
> ------------------------------------------------------------------------------
> See everything from the browser to the database with AppDynamics
> Get end-to-end visibility with application monitoring from AppDynamics
> Isolate bottlenecks and diagnose root cause in seconds.
> Start your free trial of AppDynamics Pro today!
> http://pubads.g.doubleclick.net/gampad/clk?id=48808831&iu=/4140/ostg.clktrk
> 
> 
> 
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 




From mike at plan99.net  Tue Jul  9 10:36:16 2013
From: mike at plan99.net (Mike Hearn)
Date: Tue, 9 Jul 2013 12:36:16 +0200
Subject: [Bitcoin-development] Proposal: MultiBit as default desktop
 client on bitcoin.org
In-Reply-To: <51DB6548.5070909@lavabit.com>
References: <1372353053.10405.140661249237317.77984E1F@webmail.messagingengine.com>
	<CAJHLa0Ncac9Xt-AQBnpghqqpfR-j6Xtd9qVQoUe2dPp0kJvz1A@mail.gmail.com>
	<CANEZrP0k1HDrJC9DOn6JYiVcaRRXwVwxW7ZPjE9XvfTCHXX6pw@mail.gmail.com>
	<CABsx9T3GJN0inGChebJt_dRLpVrPw7BTH8oQo6F4q6yFJaOoCA@mail.gmail.com>
	<CANEZrP3LGxZ6E+9UWQH+_RN66dfeGzo4+QYACjauKRufpqB2QA@mail.gmail.com>
	<1372605569.4937.140661250186789.39404E47@webmail.messagingengine.com>
	<CAKm8k+20z0FkQjnYXjBwUSwY4ncTmMc-LXDH=hF6u55f_gWpkA@mail.gmail.com>
	<CA+i0-i9tj8w7pNuk7nUBQKdxvizX+6_Ez1VA8OtKJNTqRrYtxg@mail.gmail.com>
	<51DB6548.5070909@lavabit.com>
Message-ID: <CANEZrP0OZZDtRw_KYJpPkhYhQA75h5yyQRQrw+gxV0hsnc2bbg@mail.gmail.com>

Modern Java versions let you bundle the app with a stripped down JVM. I
don't know if Jim does that, but I think it's an obvious step towards
making MultiBit friendlier and easier to use.

BTW I believe most secure browsers (Chrome, Firefox) have banned the applet
plugin or severely restrained it anyway. So even if you install the JVM and
plugin together there is not an issue.


On Tue, Jul 9, 2013 at 3:20 AM, Caleb James DeLisle <
calebdelisle at lavabit.com> wrote:

> Java (Applet) security is indeed abysmal but lets compare apples to apples.
> With an applet some random guy with a website makes up some Java code and
> your browser automatically executes it.
> With Multibit you're only executing highly trusted code (so trusted that it
> handles your money).
> There has almost never been a Java exploit against secure trusted code.
>
> The idea of discouraging use of java apps just because people would be
> tricked into activating the browser plugin when installing the JVM is
> probably valid but Multibit is the only reasonably complete client outside
> of bitcoinqt and I think client diversity is more important than stamping
> out java.
>
> Thanks,
> Caleb
>
>
> On 07/08/2013 08:22 PM, Robert Backhaus wrote:
> > But... Multibit is Java. Java's security problems has made it an instant
> uninstall item on windows PCs for about a year now. Java exploits are a
> dime a dozen.
> >
> > Yes, you can reduce some of the problems by manually disabling the
> browser plugin, but how many users will do that?
> >
> > Recommending a fast SPV client as a first wallet - yes, of course.
> Recommending users open such a huge attack interface on their computers by
> installing Java - No go. Until Multibit is provided as a compiled binary
> without a Java dependency, it is DOA.
> >
> >
> > On 1 July 2013 02:39, Gary Rowe <g.rowe at froot.co.uk <mailto:
> g.rowe at froot.co.uk>> wrote:
> >
> >     I've beefed up the supporting documentation for the website to make
> it more accessible for developers who wish to contribute. It's a Java
> application serving HTML.
> >
> >     It can be found here: https://github.com/jim618/multibit-website
> >
> >
> >     On 30 June 2013 16:19, Jim <jim618 at fastmail.co.uk <mailto:
> jim618 at fastmail.co.uk>> wrote:
> >
> >         Yeah "email jim' was never going to work so I have
> >         bumped up MultiBit support (a bit) by:
> >
> >         + having a dedicated Support page on the website
> >            https://multibit.org/support.html
> >            It has fixes and support notes for the most common gotchas.
> >         + the in-app help also now has a 'Support' section with
> >            "Troubleshooting' and the commonest gotchas.
> >            I've also written more help to cover as much as possible.
> >         + Failing that people are directed first to
> bitcoin.stackchange.com <http://bitcoin.stackchange.com>
> >            (I have a notification set up for the 'multibit' keyword.
> >         + Then finally users are directed to the github issues to search
> >            existing or raise a new issue. Gary and Tim often chip in on
> there to
> >            close
> >            issues down as well as me.
> >
> >
> >
> >         On Sun, Jun 30, 2013, at 12:42 PM, Mike Hearn wrote:
> >         > Sounds like we have consensus, Saivann, shall we do it?
> >         >
> >         > I'm also going to ask Theymos again to relax the newbie
> restrictions
> >         > for the alt client forums. It's probably too hard to get
> support at
> >         > the moment and "email jim" doesn't scale at all.
> >         >
> >         > On Fri, Jun 28, 2013 at 4:24 PM, Gavin Andresen <
> gavinandresen at gmail.com <mailto:gavinandresen at gmail.com>>
> >         > wrote:
> >         > > I vote "yes" to have MultiBit replace Bitcoin-Qt as the
> recommended
> >         > > desktop wallet app. I think most users will be happier with
> it.
> >         > >
> >         > > If I'm wrong, it is easy to change back.
> >         > >
> >         > >
> ------------------------------------------------------------------------------
> >         > > This SF.net email is sponsored by Windows:
> >         > >
> >         > > Build for Windows Store.
> >         > >
> >         > > http://p.sf.net/sfu/windows-dev2dev
> >         > > _______________________________________________
> >         > > Bitcoin-development mailing list
> >         > > Bitcoin-development at lists.sourceforge.net <mailto:
> Bitcoin-development at lists.sourceforge.net>
> >         > >
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> >         >
> >         >
> ------------------------------------------------------------------------------
> >         > This SF.net email is sponsored by Windows:
> >         >
> >         > Build for Windows Store.
> >         >
> >         > http://p.sf.net/sfu/windows-dev2dev
> >         > _______________________________________________
> >         > Bitcoin-development mailing list
> >         > Bitcoin-development at lists.sourceforge.net <mailto:
> Bitcoin-development at lists.sourceforge.net>
> >         >
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> >
> >
> >         --
> >         https://multibit.org    Money, reinvented
> >
> >
> ------------------------------------------------------------------------------
> >         This SF.net email is sponsored by Windows:
> >
> >         Build for Windows Store.
> >
> >         http://p.sf.net/sfu/windows-dev2dev
> >         _______________________________________________
> >         Bitcoin-development mailing list
> >         Bitcoin-development at lists.sourceforge.net <mailto:
> Bitcoin-development at lists.sourceforge.net>
> >         https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> >
> >
> >
> >
> ------------------------------------------------------------------------------
> >     This SF.net email is sponsored by Windows:
> >
> >     Build for Windows Store.
> >
> >     http://p.sf.net/sfu/windows-dev2dev
> >     _______________________________________________
> >     Bitcoin-development mailing list
> >     Bitcoin-development at lists.sourceforge.net <mailto:
> Bitcoin-development at lists.sourceforge.net>
> >     https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> >
> >
> >
> >
> >
> ------------------------------------------------------------------------------
> > See everything from the browser to the database with AppDynamics
> > Get end-to-end visibility with application monitoring from AppDynamics
> > Isolate bottlenecks and diagnose root cause in seconds.
> > Start your free trial of AppDynamics Pro today!
> >
> http://pubads.g.doubleclick.net/gampad/clk?id=48808831&iu=/4140/ostg.clktrk
> >
> >
> >
> > _______________________________________________
> > Bitcoin-development mailing list
> > Bitcoin-development at lists.sourceforge.net
> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> >
>
>
>
> ------------------------------------------------------------------------------
> See everything from the browser to the database with AppDynamics
> Get end-to-end visibility with application monitoring from AppDynamics
> Isolate bottlenecks and diagnose root cause in seconds.
> Start your free trial of AppDynamics Pro today!
> http://pubads.g.doubleclick.net/gampad/clk?id=48808831&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130709/ce8cde0c/attachment.html>

From jim618 at fastmail.co.uk  Tue Jul  9 10:56:11 2013
From: jim618 at fastmail.co.uk (Jim)
Date: Tue, 09 Jul 2013 11:56:11 +0100
Subject: [Bitcoin-development] Proposal: MultiBit as default desktop
 client on bitcoin.org
In-Reply-To: <CANEZrP0OZZDtRw_KYJpPkhYhQA75h5yyQRQrw+gxV0hsnc2bbg@mail.gmail.com>
References: <1372353053.10405.140661249237317.77984E1F@webmail.messagingengine.com>
	<CAJHLa0Ncac9Xt-AQBnpghqqpfR-j6Xtd9qVQoUe2dPp0kJvz1A@mail.gmail.com>
	<CANEZrP0k1HDrJC9DOn6JYiVcaRRXwVwxW7ZPjE9XvfTCHXX6pw@mail.gmail.com>
	<CABsx9T3GJN0inGChebJt_dRLpVrPw7BTH8oQo6F4q6yFJaOoCA@mail.gmail.com>
	<CANEZrP3LGxZ6E+9UWQH+_RN66dfeGzo4+QYACjauKRufpqB2QA@mail.gmail.com>
	<1372605569.4937.140661250186789.39404E47@webmail.messagingengine.com>
	<CAKm8k+20z0FkQjnYXjBwUSwY4ncTmMc-LXDH=hF6u55f_gWpkA@mail.gmail.com>
	<CA+i0-i9tj8w7pNuk7nUBQKdxvizX+6_Ez1VA8OtKJNTqRrYtxg@mail.gmail.com>
	<51DB6548.5070909@lavabit.com>
	<CANEZrP0OZZDtRw_KYJpPkhYhQA75h5yyQRQrw+gxV0hsnc2bbg@mail.gmail.com>
Message-ID: <1373367371.4283.140661253533454.0D7E544E@webmail.messagingengine.com>

Yes I would like to bundle a JVM as it would simplify the user
experience.

There are a few downsides though:
+ all the build packaging will need redoing and retesting.
+ it will bump up the MultiBit download from about 11MB to 30-40MB 
(I think). This drops the maximum copies of MultiBit the multibit.org 
server can deliver per day from around 90,000 to 30,000ish. 
The multibit.org server maxes out at 1 TB of bandwidth per day.

Currently there is no provision to update anything automatically.
I would like to start having Bitcoin signed files that MultiBit can
check
and update (initially the checkpoints file, I18N files - NOT code
at first because of the security implications). I think this needs to be 
in place before bundling a JVM so that users don't have to
keep redownloading it.

Having lists of all the artifacts signed and them having SHA256 hashes 
then makes it practical/ safe to start mirroring the code. I can see
each mirror crosschecking the others that the SHA256s are correct
for instance. This would increase the maximum number of 
downloads we could cope with.


On Tue, Jul 9, 2013, at 11:36 AM, Mike Hearn wrote:
> Modern Java versions let you bundle the app with a stripped down JVM. I
> don't know if Jim does that, but I think it's an obvious step towards
> making MultiBit friendlier and easier to use.
> 
> BTW I believe most secure browsers (Chrome, Firefox) have banned the
> applet
> plugin or severely restrained it anyway. So even if you install the JVM
> and
> plugin together there is not an issue.
> 
> 
> On Tue, Jul 9, 2013 at 3:20 AM, Caleb James DeLisle <
> calebdelisle at lavabit.com> wrote:
> 
> > Java (Applet) security is indeed abysmal but lets compare apples to apples.
> > With an applet some random guy with a website makes up some Java code and
> > your browser automatically executes it.
> > With Multibit you're only executing highly trusted code (so trusted that it
> > handles your money).
> > There has almost never been a Java exploit against secure trusted code.
> >
> > The idea of discouraging use of java apps just because people would be
> > tricked into activating the browser plugin when installing the JVM is
> > probably valid but Multibit is the only reasonably complete client outside
> > of bitcoinqt and I think client diversity is more important than stamping
> > out java.
> >
> > Thanks,
> > Caleb
> >
> >
> > On 07/08/2013 08:22 PM, Robert Backhaus wrote:
> > > But... Multibit is Java. Java's security problems has made it an instant
> > uninstall item on windows PCs for about a year now. Java exploits are a
> > dime a dozen.
> > >
> > > Yes, you can reduce some of the problems by manually disabling the
> > browser plugin, but how many users will do that?
> > >
> > > Recommending a fast SPV client as a first wallet - yes, of course.
> > Recommending users open such a huge attack interface on their computers by
> > installing Java - No go. Until Multibit is provided as a compiled binary
> > without a Java dependency, it is DOA.
> > >
> > >
> > > On 1 July 2013 02:39, Gary Rowe <g.rowe at froot.co.uk <mailto:
> > g.rowe at froot.co.uk>> wrote:
> > >
> > >     I've beefed up the supporting documentation for the website to make
> > it more accessible for developers who wish to contribute. It's a Java
> > application serving HTML.
> > >
> > >     It can be found here: https://github.com/jim618/multibit-website
> > >
> > >
> > >     On 30 June 2013 16:19, Jim <jim618 at fastmail.co.uk <mailto:
> > jim618 at fastmail.co.uk>> wrote:
> > >
> > >         Yeah "email jim' was never going to work so I have
> > >         bumped up MultiBit support (a bit) by:
> > >
> > >         + having a dedicated Support page on the website
> > >            https://multibit.org/support.html
> > >            It has fixes and support notes for the most common gotchas.
> > >         + the in-app help also now has a 'Support' section with
> > >            "Troubleshooting' and the commonest gotchas.
> > >            I've also written more help to cover as much as possible.
> > >         + Failing that people are directed first to
> > bitcoin.stackchange.com <http://bitcoin.stackchange.com>
> > >            (I have a notification set up for the 'multibit' keyword.
> > >         + Then finally users are directed to the github issues to search
> > >            existing or raise a new issue. Gary and Tim often chip in on
> > there to
> > >            close
> > >            issues down as well as me.
> > >
> > >
> > >
> > >         On Sun, Jun 30, 2013, at 12:42 PM, Mike Hearn wrote:
> > >         > Sounds like we have consensus, Saivann, shall we do it?
> > >         >
> > >         > I'm also going to ask Theymos again to relax the newbie
> > restrictions
> > >         > for the alt client forums. It's probably too hard to get
> > support at
> > >         > the moment and "email jim" doesn't scale at all.
> > >         >
> > >         > On Fri, Jun 28, 2013 at 4:24 PM, Gavin Andresen <
> > gavinandresen at gmail.com <mailto:gavinandresen at gmail.com>>
> > >         > wrote:
> > >         > > I vote "yes" to have MultiBit replace Bitcoin-Qt as the
> > recommended
> > >         > > desktop wallet app. I think most users will be happier with
> > it.
> > >         > >
> > >         > > If I'm wrong, it is easy to change back.
> > >         > >
> > >         > >
> > ------------------------------------------------------------------------------
> > >         > > This SF.net email is sponsored by Windows:
> > >         > >
> > >         > > Build for Windows Store.
> > >         > >
> > >         > > http://p.sf.net/sfu/windows-dev2dev
> > >         > > _______________________________________________
> > >         > > Bitcoin-development mailing list
> > >         > > Bitcoin-development at lists.sourceforge.net <mailto:
> > Bitcoin-development at lists.sourceforge.net>
> > >         > >
> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> > >         >
> > >         >
> > ------------------------------------------------------------------------------
> > >         > This SF.net email is sponsored by Windows:
> > >         >
> > >         > Build for Windows Store.
> > >         >
> > >         > http://p.sf.net/sfu/windows-dev2dev
> > >         > _______________________________________________
> > >         > Bitcoin-development mailing list
> > >         > Bitcoin-development at lists.sourceforge.net <mailto:
> > Bitcoin-development at lists.sourceforge.net>
> > >         >
> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> > >
> > >
> > >         --
> > >         https://multibit.org    Money, reinvented
> > >
> > >
> > ------------------------------------------------------------------------------
> > >         This SF.net email is sponsored by Windows:
> > >
> > >         Build for Windows Store.
> > >
> > >         http://p.sf.net/sfu/windows-dev2dev
> > >         _______________________________________________
> > >         Bitcoin-development mailing list
> > >         Bitcoin-development at lists.sourceforge.net <mailto:
> > Bitcoin-development at lists.sourceforge.net>
> > >         https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> > >
> > >
> > >
> > >
> > ------------------------------------------------------------------------------
> > >     This SF.net email is sponsored by Windows:
> > >
> > >     Build for Windows Store.
> > >
> > >     http://p.sf.net/sfu/windows-dev2dev
> > >     _______________________________________________
> > >     Bitcoin-development mailing list
> > >     Bitcoin-development at lists.sourceforge.net <mailto:
> > Bitcoin-development at lists.sourceforge.net>
> > >     https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> > >
> > >
> > >
> > >
> > >
> > ------------------------------------------------------------------------------
> > > See everything from the browser to the database with AppDynamics
> > > Get end-to-end visibility with application monitoring from AppDynamics
> > > Isolate bottlenecks and diagnose root cause in seconds.
> > > Start your free trial of AppDynamics Pro today!
> > >
> > http://pubads.g.doubleclick.net/gampad/clk?id=48808831&iu=/4140/ostg.clktrk
> > >
> > >
> > >
> > > _______________________________________________
> > > Bitcoin-development mailing list
> > > Bitcoin-development at lists.sourceforge.net
> > > https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> > >
> >
> >
> >
> > ------------------------------------------------------------------------------
> > See everything from the browser to the database with AppDynamics
> > Get end-to-end visibility with application monitoring from AppDynamics
> > Isolate bottlenecks and diagnose root cause in seconds.
> > Start your free trial of AppDynamics Pro today!
> > http://pubads.g.doubleclick.net/gampad/clk?id=48808831&iu=/4140/ostg.clktrk
> > _______________________________________________
> > Bitcoin-development mailing list
> > Bitcoin-development at lists.sourceforge.net
> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> >
> ------------------------------------------------------------------------------
> See everything from the browser to the database with AppDynamics
> Get end-to-end visibility with application monitoring from AppDynamics
> Isolate bottlenecks and diagnose root cause in seconds.
> Start your free trial of AppDynamics Pro today!
> http://pubads.g.doubleclick.net/gampad/clk?id=48808831&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development


-- 
https://multibit.org    Money, reinvented



From mike at plan99.net  Tue Jul  9 11:04:19 2013
From: mike at plan99.net (Mike Hearn)
Date: Tue, 9 Jul 2013 13:04:19 +0200
Subject: [Bitcoin-development] Proposal: MultiBit as default desktop
 client on bitcoin.org
In-Reply-To: <1373367371.4283.140661253533454.0D7E544E@webmail.messagingengine.com>
References: <1372353053.10405.140661249237317.77984E1F@webmail.messagingengine.com>
	<CAJHLa0Ncac9Xt-AQBnpghqqpfR-j6Xtd9qVQoUe2dPp0kJvz1A@mail.gmail.com>
	<CANEZrP0k1HDrJC9DOn6JYiVcaRRXwVwxW7ZPjE9XvfTCHXX6pw@mail.gmail.com>
	<CABsx9T3GJN0inGChebJt_dRLpVrPw7BTH8oQo6F4q6yFJaOoCA@mail.gmail.com>
	<CANEZrP3LGxZ6E+9UWQH+_RN66dfeGzo4+QYACjauKRufpqB2QA@mail.gmail.com>
	<1372605569.4937.140661250186789.39404E47@webmail.messagingengine.com>
	<CAKm8k+20z0FkQjnYXjBwUSwY4ncTmMc-LXDH=hF6u55f_gWpkA@mail.gmail.com>
	<CA+i0-i9tj8w7pNuk7nUBQKdxvizX+6_Ez1VA8OtKJNTqRrYtxg@mail.gmail.com>
	<51DB6548.5070909@lavabit.com>
	<CANEZrP0OZZDtRw_KYJpPkhYhQA75h5yyQRQrw+gxV0hsnc2bbg@mail.gmail.com>
	<1373367371.4283.140661253533454.0D7E544E@webmail.messagingengine.com>
Message-ID: <CANEZrP3zi4sWBJa-9hu4S2+gT5pP-6JzNi=mJQi=OnzF5iZE_w@mail.gmail.com>

How many downloads/day do we see currently? I think you said it's on the
order of a few thousand, so nowhere near 30k I'd guess. Anyway I can mirror
it if we need to.

The JavaFX packager is supposed to delete parts of the JVM that aren't
used. Is the 30-40mb figure based on using that tool or something else?
Note that you don't need to use the JFX widget toolkit to use the bundler
tool.

We could also invest in a copy of JET, which does native compilation down
to self contained Windows binaries. It might create smaller bundles. But,
it's a proprietary tool and I don't know how reproducible its outputs are.

For the auto update, is there an existing auto update framework that we can
modify to support threshold signed updates? I'm sure such a thing must
exist. The updates would download in the background and then the app can
just ask the user to restart it once the update is locally available, as
Chrome does.



On Tue, Jul 9, 2013 at 12:56 PM, Jim <jim618 at fastmail.co.uk> wrote:

> Yes I would like to bundle a JVM as it would simplify the user
> experience.
>
> There are a few downsides though:
> + all the build packaging will need redoing and retesting.
> + it will bump up the MultiBit download from about 11MB to 30-40MB
> (I think). This drops the maximum copies of MultiBit the multibit.org
> server can deliver per day from around 90,000 to 30,000ish.
> The multibit.org server maxes out at 1 TB of bandwidth per day.
>
> Currently there is no provision to update anything automatically.
> I would like to start having Bitcoin signed files that MultiBit can
> check
> and update (initially the checkpoints file, I18N files - NOT code
> at first because of the security implications). I think this needs to be
> in place before bundling a JVM so that users don't have to
> keep redownloading it.
>
> Having lists of all the artifacts signed and them having SHA256 hashes
> then makes it practical/ safe to start mirroring the code. I can see
> each mirror crosschecking the others that the SHA256s are correct
> for instance. This would increase the maximum number of
> downloads we could cope with.
>
>
> On Tue, Jul 9, 2013, at 11:36 AM, Mike Hearn wrote:
> > Modern Java versions let you bundle the app with a stripped down JVM. I
> > don't know if Jim does that, but I think it's an obvious step towards
> > making MultiBit friendlier and easier to use.
> >
> > BTW I believe most secure browsers (Chrome, Firefox) have banned the
> > applet
> > plugin or severely restrained it anyway. So even if you install the JVM
> > and
> > plugin together there is not an issue.
> >
> >
> > On Tue, Jul 9, 2013 at 3:20 AM, Caleb James DeLisle <
> > calebdelisle at lavabit.com> wrote:
> >
> > > Java (Applet) security is indeed abysmal but lets compare apples to
> apples.
> > > With an applet some random guy with a website makes up some Java code
> and
> > > your browser automatically executes it.
> > > With Multibit you're only executing highly trusted code (so trusted
> that it
> > > handles your money).
> > > There has almost never been a Java exploit against secure trusted code.
> > >
> > > The idea of discouraging use of java apps just because people would be
> > > tricked into activating the browser plugin when installing the JVM is
> > > probably valid but Multibit is the only reasonably complete client
> outside
> > > of bitcoinqt and I think client diversity is more important than
> stamping
> > > out java.
> > >
> > > Thanks,
> > > Caleb
> > >
> > >
> > > On 07/08/2013 08:22 PM, Robert Backhaus wrote:
> > > > But... Multibit is Java. Java's security problems has made it an
> instant
> > > uninstall item on windows PCs for about a year now. Java exploits are a
> > > dime a dozen.
> > > >
> > > > Yes, you can reduce some of the problems by manually disabling the
> > > browser plugin, but how many users will do that?
> > > >
> > > > Recommending a fast SPV client as a first wallet - yes, of course.
> > > Recommending users open such a huge attack interface on their
> computers by
> > > installing Java - No go. Until Multibit is provided as a compiled
> binary
> > > without a Java dependency, it is DOA.
> > > >
> > > >
> > > > On 1 July 2013 02:39, Gary Rowe <g.rowe at froot.co.uk <mailto:
> > > g.rowe at froot.co.uk>> wrote:
> > > >
> > > >     I've beefed up the supporting documentation for the website to
> make
> > > it more accessible for developers who wish to contribute. It's a Java
> > > application serving HTML.
> > > >
> > > >     It can be found here: https://github.com/jim618/multibit-website
> > > >
> > > >
> > > >     On 30 June 2013 16:19, Jim <jim618 at fastmail.co.uk <mailto:
> > > jim618 at fastmail.co.uk>> wrote:
> > > >
> > > >         Yeah "email jim' was never going to work so I have
> > > >         bumped up MultiBit support (a bit) by:
> > > >
> > > >         + having a dedicated Support page on the website
> > > >            https://multibit.org/support.html
> > > >            It has fixes and support notes for the most common
> gotchas.
> > > >         + the in-app help also now has a 'Support' section with
> > > >            "Troubleshooting' and the commonest gotchas.
> > > >            I've also written more help to cover as much as possible.
> > > >         + Failing that people are directed first to
> > > bitcoin.stackchange.com <http://bitcoin.stackchange.com>
> > > >            (I have a notification set up for the 'multibit' keyword.
> > > >         + Then finally users are directed to the github issues to
> search
> > > >            existing or raise a new issue. Gary and Tim often chip in
> on
> > > there to
> > > >            close
> > > >            issues down as well as me.
> > > >
> > > >
> > > >
> > > >         On Sun, Jun 30, 2013, at 12:42 PM, Mike Hearn wrote:
> > > >         > Sounds like we have consensus, Saivann, shall we do it?
> > > >         >
> > > >         > I'm also going to ask Theymos again to relax the newbie
> > > restrictions
> > > >         > for the alt client forums. It's probably too hard to get
> > > support at
> > > >         > the moment and "email jim" doesn't scale at all.
> > > >         >
> > > >         > On Fri, Jun 28, 2013 at 4:24 PM, Gavin Andresen <
> > > gavinandresen at gmail.com <mailto:gavinandresen at gmail.com>>
> > > >         > wrote:
> > > >         > > I vote "yes" to have MultiBit replace Bitcoin-Qt as the
> > > recommended
> > > >         > > desktop wallet app. I think most users will be happier
> with
> > > it.
> > > >         > >
> > > >         > > If I'm wrong, it is easy to change back.
> > > >         > >
> > > >         > >
> > >
> ------------------------------------------------------------------------------
> > > >         > > This SF.net email is sponsored by Windows:
> > > >         > >
> > > >         > > Build for Windows Store.
> > > >         > >
> > > >         > > http://p.sf.net/sfu/windows-dev2dev
> > > >         > > _______________________________________________
> > > >         > > Bitcoin-development mailing list
> > > >         > > Bitcoin-development at lists.sourceforge.net <mailto:
> > > Bitcoin-development at lists.sourceforge.net>
> > > >         > >
> > > https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> > > >         >
> > > >         >
> > >
> ------------------------------------------------------------------------------
> > > >         > This SF.net email is sponsored by Windows:
> > > >         >
> > > >         > Build for Windows Store.
> > > >         >
> > > >         > http://p.sf.net/sfu/windows-dev2dev
> > > >         > _______________________________________________
> > > >         > Bitcoin-development mailing list
> > > >         > Bitcoin-development at lists.sourceforge.net <mailto:
> > > Bitcoin-development at lists.sourceforge.net>
> > > >         >
> > > https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> > > >
> > > >
> > > >         --
> > > >         https://multibit.org    Money, reinvented
> > > >
> > > >
> > >
> ------------------------------------------------------------------------------
> > > >         This SF.net email is sponsored by Windows:
> > > >
> > > >         Build for Windows Store.
> > > >
> > > >         http://p.sf.net/sfu/windows-dev2dev
> > > >         _______________________________________________
> > > >         Bitcoin-development mailing list
> > > >         Bitcoin-development at lists.sourceforge.net <mailto:
> > > Bitcoin-development at lists.sourceforge.net>
> > > >
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> > > >
> > > >
> > > >
> > > >
> > >
> ------------------------------------------------------------------------------
> > > >     This SF.net email is sponsored by Windows:
> > > >
> > > >     Build for Windows Store.
> > > >
> > > >     http://p.sf.net/sfu/windows-dev2dev
> > > >     _______________________________________________
> > > >     Bitcoin-development mailing list
> > > >     Bitcoin-development at lists.sourceforge.net <mailto:
> > > Bitcoin-development at lists.sourceforge.net>
> > > >     https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> > > >
> > > >
> > > >
> > > >
> > > >
> > >
> ------------------------------------------------------------------------------
> > > > See everything from the browser to the database with AppDynamics
> > > > Get end-to-end visibility with application monitoring from
> AppDynamics
> > > > Isolate bottlenecks and diagnose root cause in seconds.
> > > > Start your free trial of AppDynamics Pro today!
> > > >
> > >
> http://pubads.g.doubleclick.net/gampad/clk?id=48808831&iu=/4140/ostg.clktrk
> > > >
> > > >
> > > >
> > > > _______________________________________________
> > > > Bitcoin-development mailing list
> > > > Bitcoin-development at lists.sourceforge.net
> > > > https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> > > >
> > >
> > >
> > >
> > >
> ------------------------------------------------------------------------------
> > > See everything from the browser to the database with AppDynamics
> > > Get end-to-end visibility with application monitoring from AppDynamics
> > > Isolate bottlenecks and diagnose root cause in seconds.
> > > Start your free trial of AppDynamics Pro today!
> > >
> http://pubads.g.doubleclick.net/gampad/clk?id=48808831&iu=/4140/ostg.clktrk
> > > _______________________________________________
> > > Bitcoin-development mailing list
> > > Bitcoin-development at lists.sourceforge.net
> > > https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> > >
> >
> ------------------------------------------------------------------------------
> > See everything from the browser to the database with AppDynamics
> > Get end-to-end visibility with application monitoring from AppDynamics
> > Isolate bottlenecks and diagnose root cause in seconds.
> > Start your free trial of AppDynamics Pro today!
> >
> http://pubads.g.doubleclick.net/gampad/clk?id=48808831&iu=/4140/ostg.clktrk
> > _______________________________________________
> > Bitcoin-development mailing list
> > Bitcoin-development at lists.sourceforge.net
> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
> --
> https://multibit.org    Money, reinvented
>
>
> ------------------------------------------------------------------------------
> See everything from the browser to the database with AppDynamics
> Get end-to-end visibility with application monitoring from AppDynamics
> Isolate bottlenecks and diagnose root cause in seconds.
> Start your free trial of AppDynamics Pro today!
> http://pubads.g.doubleclick.net/gampad/clk?id=48808831&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130709/53d448c1/attachment.html>

From jim618 at fastmail.co.uk  Tue Jul  9 11:15:44 2013
From: jim618 at fastmail.co.uk (Jim)
Date: Tue, 09 Jul 2013 12:15:44 +0100
Subject: [Bitcoin-development] Proposal: MultiBit as default desktop
 client on bitcoin.org
In-Reply-To: <CANEZrP3zi4sWBJa-9hu4S2+gT5pP-6JzNi=mJQi=OnzF5iZE_w@mail.gmail.com>
References: <1372353053.10405.140661249237317.77984E1F@webmail.messagingengine.com>
	<CAJHLa0Ncac9Xt-AQBnpghqqpfR-j6Xtd9qVQoUe2dPp0kJvz1A@mail.gmail.com>
	<CANEZrP0k1HDrJC9DOn6JYiVcaRRXwVwxW7ZPjE9XvfTCHXX6pw@mail.gmail.com>
	<CABsx9T3GJN0inGChebJt_dRLpVrPw7BTH8oQo6F4q6yFJaOoCA@mail.gmail.com>
	<CANEZrP3LGxZ6E+9UWQH+_RN66dfeGzo4+QYACjauKRufpqB2QA@mail.gmail.com>
	<1372605569.4937.140661250186789.39404E47@webmail.messagingengine.com>
	<CAKm8k+20z0FkQjnYXjBwUSwY4ncTmMc-LXDH=hF6u55f_gWpkA@mail.gmail.com>
	<CA+i0-i9tj8w7pNuk7nUBQKdxvizX+6_Ez1VA8OtKJNTqRrYtxg@mail.gmail.com>
	<51DB6548.5070909@lavabit.com>
	<CANEZrP0OZZDtRw_KYJpPkhYhQA75h5yyQRQrw+gxV0hsnc2bbg@mail.gmail.com>
	<1373367371.4283.140661253533454.0D7E544E@webmail.messagingengine.com>
	<CANEZrP3zi4sWBJa-9hu4S2+gT5pP-6JzNi=mJQi=OnzF5iZE_w@mail.gmail.com>
Message-ID: <1373368544.9057.140661253540582.544AB3A2@webmail.messagingengine.com>

Currently there are about 2,500 downloads a day for MultiBit.
There are download stats here:
https://multibit.org/awstats/awstats.pl?config=multibit.org

With a mirror from Mike and perhaps another instance at
multibit.org that would get us to 100K per day so probably
nothing to worry about.

I think the highest daily download stats I have seen were in the
April 2013 'boom' where Bitcoin-QT downloads hit 30K per day as
I recall.

The 30-40 MB including a JVM is based on the download sizes for
CharlesProxy.com which does this for their Windows downloads.
The sizes are here:
http://www.charlesproxy.com/download/

This is a Java codebase too.


Yes there must be an auto-update framework (but without 
ECDSA signing most likely). I haven't spent much time on this
yet.


On Tue, Jul 9, 2013, at 12:04 PM, Mike Hearn wrote:
> How many downloads/day do we see currently? I think you said it's on the
> order of a few thousand, so nowhere near 30k I'd guess. Anyway I can
> mirror
> it if we need to.
> 
> The JavaFX packager is supposed to delete parts of the JVM that aren't
> used. Is the 30-40mb figure based on using that tool or something else?
> Note that you don't need to use the JFX widget toolkit to use the bundler
> tool.
> 
> We could also invest in a copy of JET, which does native compilation down
> to self contained Windows binaries. It might create smaller bundles. But,
> it's a proprietary tool and I don't know how reproducible its outputs
> are.
> 
> For the auto update, is there an existing auto update framework that we
> can
> modify to support threshold signed updates? I'm sure such a thing must
> exist. The updates would download in the background and then the app can
> just ask the user to restart it once the update is locally available, as
> Chrome does.
> 
> 
> 
> On Tue, Jul 9, 2013 at 12:56 PM, Jim <jim618 at fastmail.co.uk> wrote:
> 
> > Yes I would like to bundle a JVM as it would simplify the user
> > experience.
> >
> > There are a few downsides though:
> > + all the build packaging will need redoing and retesting.
> > + it will bump up the MultiBit download from about 11MB to 30-40MB
> > (I think). This drops the maximum copies of MultiBit the multibit.org
> > server can deliver per day from around 90,000 to 30,000ish.
> > The multibit.org server maxes out at 1 TB of bandwidth per day.
> >
> > Currently there is no provision to update anything automatically.
> > I would like to start having Bitcoin signed files that MultiBit can
> > check
> > and update (initially the checkpoints file, I18N files - NOT code
> > at first because of the security implications). I think this needs to be
> > in place before bundling a JVM so that users don't have to
> > keep redownloading it.
> >
> > Having lists of all the artifacts signed and them having SHA256 hashes
> > then makes it practical/ safe to start mirroring the code. I can see
> > each mirror crosschecking the others that the SHA256s are correct
> > for instance. This would increase the maximum number of
> > downloads we could cope with.
> >
> >
> > On Tue, Jul 9, 2013, at 11:36 AM, Mike Hearn wrote:
> > > Modern Java versions let you bundle the app with a stripped down JVM. I
> > > don't know if Jim does that, but I think it's an obvious step towards
> > > making MultiBit friendlier and easier to use.
> > >
> > > BTW I believe most secure browsers (Chrome, Firefox) have banned the
> > > applet
> > > plugin or severely restrained it anyway. So even if you install the JVM
> > > and
> > > plugin together there is not an issue.
> > >
> > >
> > > On Tue, Jul 9, 2013 at 3:20 AM, Caleb James DeLisle <
> > > calebdelisle at lavabit.com> wrote:
> > >
> > > > Java (Applet) security is indeed abysmal but lets compare apples to
> > apples.
> > > > With an applet some random guy with a website makes up some Java code
> > and
> > > > your browser automatically executes it.
> > > > With Multibit you're only executing highly trusted code (so trusted
> > that it
> > > > handles your money).
> > > > There has almost never been a Java exploit against secure trusted code.
> > > >
> > > > The idea of discouraging use of java apps just because people would be
> > > > tricked into activating the browser plugin when installing the JVM is
> > > > probably valid but Multibit is the only reasonably complete client
> > outside
> > > > of bitcoinqt and I think client diversity is more important than
> > stamping
> > > > out java.
> > > >
> > > > Thanks,
> > > > Caleb
> > > >
> > > >
> > > > On 07/08/2013 08:22 PM, Robert Backhaus wrote:
> > > > > But... Multibit is Java. Java's security problems has made it an
> > instant
> > > > uninstall item on windows PCs for about a year now. Java exploits are a
> > > > dime a dozen.
> > > > >
> > > > > Yes, you can reduce some of the problems by manually disabling the
> > > > browser plugin, but how many users will do that?
> > > > >
> > > > > Recommending a fast SPV client as a first wallet - yes, of course.
> > > > Recommending users open such a huge attack interface on their
> > computers by
> > > > installing Java - No go. Until Multibit is provided as a compiled
> > binary
> > > > without a Java dependency, it is DOA.
> > > > >
> > > > >
> > > > > On 1 July 2013 02:39, Gary Rowe <g.rowe at froot.co.uk <mailto:
> > > > g.rowe at froot.co.uk>> wrote:
> > > > >
> > > > >     I've beefed up the supporting documentation for the website to
> > make
> > > > it more accessible for developers who wish to contribute. It's a Java
> > > > application serving HTML.
> > > > >
> > > > >     It can be found here: https://github.com/jim618/multibit-website
> > > > >
> > > > >
> > > > >     On 30 June 2013 16:19, Jim <jim618 at fastmail.co.uk <mailto:
> > > > jim618 at fastmail.co.uk>> wrote:
> > > > >
> > > > >         Yeah "email jim' was never going to work so I have
> > > > >         bumped up MultiBit support (a bit) by:
> > > > >
> > > > >         + having a dedicated Support page on the website
> > > > >            https://multibit.org/support.html
> > > > >            It has fixes and support notes for the most common
> > gotchas.
> > > > >         + the in-app help also now has a 'Support' section with
> > > > >            "Troubleshooting' and the commonest gotchas.
> > > > >            I've also written more help to cover as much as possible.
> > > > >         + Failing that people are directed first to
> > > > bitcoin.stackchange.com <http://bitcoin.stackchange.com>
> > > > >            (I have a notification set up for the 'multibit' keyword.
> > > > >         + Then finally users are directed to the github issues to
> > search
> > > > >            existing or raise a new issue. Gary and Tim often chip in
> > on
> > > > there to
> > > > >            close
> > > > >            issues down as well as me.
> > > > >
> > > > >
> > > > >
> > > > >         On Sun, Jun 30, 2013, at 12:42 PM, Mike Hearn wrote:
> > > > >         > Sounds like we have consensus, Saivann, shall we do it?
> > > > >         >
> > > > >         > I'm also going to ask Theymos again to relax the newbie
> > > > restrictions
> > > > >         > for the alt client forums. It's probably too hard to get
> > > > support at
> > > > >         > the moment and "email jim" doesn't scale at all.
> > > > >         >
> > > > >         > On Fri, Jun 28, 2013 at 4:24 PM, Gavin Andresen <
> > > > gavinandresen at gmail.com <mailto:gavinandresen at gmail.com>>
> > > > >         > wrote:
> > > > >         > > I vote "yes" to have MultiBit replace Bitcoin-Qt as the
> > > > recommended
> > > > >         > > desktop wallet app. I think most users will be happier
> > with
> > > > it.
> > > > >         > >
> > > > >         > > If I'm wrong, it is easy to change back.
> > > > >         > >
> > > > >         > >
> > > >
> > ------------------------------------------------------------------------------
> > > > >         > > This SF.net email is sponsored by Windows:
> > > > >         > >
> > > > >         > > Build for Windows Store.
> > > > >         > >
> > > > >         > > http://p.sf.net/sfu/windows-dev2dev
> > > > >         > > _______________________________________________
> > > > >         > > Bitcoin-development mailing list
> > > > >         > > Bitcoin-development at lists.sourceforge.net <mailto:
> > > > Bitcoin-development at lists.sourceforge.net>
> > > > >         > >
> > > > https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> > > > >         >
> > > > >         >
> > > >
> > ------------------------------------------------------------------------------
> > > > >         > This SF.net email is sponsored by Windows:
> > > > >         >
> > > > >         > Build for Windows Store.
> > > > >         >
> > > > >         > http://p.sf.net/sfu/windows-dev2dev
> > > > >         > _______________________________________________
> > > > >         > Bitcoin-development mailing list
> > > > >         > Bitcoin-development at lists.sourceforge.net <mailto:
> > > > Bitcoin-development at lists.sourceforge.net>
> > > > >         >
> > > > https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> > > > >
> > > > >
> > > > >         --
> > > > >         https://multibit.org    Money, reinvented
> > > > >
> > > > >
> > > >
> > ------------------------------------------------------------------------------
> > > > >         This SF.net email is sponsored by Windows:
> > > > >
> > > > >         Build for Windows Store.
> > > > >
> > > > >         http://p.sf.net/sfu/windows-dev2dev
> > > > >         _______________________________________________
> > > > >         Bitcoin-development mailing list
> > > > >         Bitcoin-development at lists.sourceforge.net <mailto:
> > > > Bitcoin-development at lists.sourceforge.net>
> > > > >
> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> > > > >
> > > > >
> > > > >
> > > > >
> > > >
> > ------------------------------------------------------------------------------
> > > > >     This SF.net email is sponsored by Windows:
> > > > >
> > > > >     Build for Windows Store.
> > > > >
> > > > >     http://p.sf.net/sfu/windows-dev2dev
> > > > >     _______________________________________________
> > > > >     Bitcoin-development mailing list
> > > > >     Bitcoin-development at lists.sourceforge.net <mailto:
> > > > Bitcoin-development at lists.sourceforge.net>
> > > > >     https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> > > > >
> > > > >
> > > > >
> > > > >
> > > > >
> > > >
> > ------------------------------------------------------------------------------
> > > > > See everything from the browser to the database with AppDynamics
> > > > > Get end-to-end visibility with application monitoring from
> > AppDynamics
> > > > > Isolate bottlenecks and diagnose root cause in seconds.
> > > > > Start your free trial of AppDynamics Pro today!
> > > > >
> > > >
> > http://pubads.g.doubleclick.net/gampad/clk?id=48808831&iu=/4140/ostg.clktrk
> > > > >
> > > > >
> > > > >
> > > > > _______________________________________________
> > > > > Bitcoin-development mailing list
> > > > > Bitcoin-development at lists.sourceforge.net
> > > > > https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> > > > >
> > > >
> > > >
> > > >
> > > >
> > ------------------------------------------------------------------------------
> > > > See everything from the browser to the database with AppDynamics
> > > > Get end-to-end visibility with application monitoring from AppDynamics
> > > > Isolate bottlenecks and diagnose root cause in seconds.
> > > > Start your free trial of AppDynamics Pro today!
> > > >
> > http://pubads.g.doubleclick.net/gampad/clk?id=48808831&iu=/4140/ostg.clktrk
> > > > _______________________________________________
> > > > Bitcoin-development mailing list
> > > > Bitcoin-development at lists.sourceforge.net
> > > > https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> > > >
> > >
> > ------------------------------------------------------------------------------
> > > See everything from the browser to the database with AppDynamics
> > > Get end-to-end visibility with application monitoring from AppDynamics
> > > Isolate bottlenecks and diagnose root cause in seconds.
> > > Start your free trial of AppDynamics Pro today!
> > >
> > http://pubads.g.doubleclick.net/gampad/clk?id=48808831&iu=/4140/ostg.clktrk
> > > _______________________________________________
> > > Bitcoin-development mailing list
> > > Bitcoin-development at lists.sourceforge.net
> > > https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> >
> >
> > --
> > https://multibit.org    Money, reinvented
> >
> >
> > ------------------------------------------------------------------------------
> > See everything from the browser to the database with AppDynamics
> > Get end-to-end visibility with application monitoring from AppDynamics
> > Isolate bottlenecks and diagnose root cause in seconds.
> > Start your free trial of AppDynamics Pro today!
> > http://pubads.g.doubleclick.net/gampad/clk?id=48808831&iu=/4140/ostg.clktrk
> > _______________________________________________
> > Bitcoin-development mailing list
> > Bitcoin-development at lists.sourceforge.net
> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> >


-- 
https://multibit.org    Money, reinvented



From mike at plan99.net  Tue Jul  9 11:18:07 2013
From: mike at plan99.net (Mike Hearn)
Date: Tue, 9 Jul 2013 13:18:07 +0200
Subject: [Bitcoin-development] Proposal: MultiBit as default desktop
 client on bitcoin.org
In-Reply-To: <CANEZrP3zi4sWBJa-9hu4S2+gT5pP-6JzNi=mJQi=OnzF5iZE_w@mail.gmail.com>
References: <1372353053.10405.140661249237317.77984E1F@webmail.messagingengine.com>
	<CAJHLa0Ncac9Xt-AQBnpghqqpfR-j6Xtd9qVQoUe2dPp0kJvz1A@mail.gmail.com>
	<CANEZrP0k1HDrJC9DOn6JYiVcaRRXwVwxW7ZPjE9XvfTCHXX6pw@mail.gmail.com>
	<CABsx9T3GJN0inGChebJt_dRLpVrPw7BTH8oQo6F4q6yFJaOoCA@mail.gmail.com>
	<CANEZrP3LGxZ6E+9UWQH+_RN66dfeGzo4+QYACjauKRufpqB2QA@mail.gmail.com>
	<1372605569.4937.140661250186789.39404E47@webmail.messagingengine.com>
	<CAKm8k+20z0FkQjnYXjBwUSwY4ncTmMc-LXDH=hF6u55f_gWpkA@mail.gmail.com>
	<CA+i0-i9tj8w7pNuk7nUBQKdxvizX+6_Ez1VA8OtKJNTqRrYtxg@mail.gmail.com>
	<51DB6548.5070909@lavabit.com>
	<CANEZrP0OZZDtRw_KYJpPkhYhQA75h5yyQRQrw+gxV0hsnc2bbg@mail.gmail.com>
	<1373367371.4283.140661253533454.0D7E544E@webmail.messagingengine.com>
	<CANEZrP3zi4sWBJa-9hu4S2+gT5pP-6JzNi=mJQi=OnzF5iZE_w@mail.gmail.com>
Message-ID: <CANEZrP03kR2J858mpcqW3drAMzHsEKLWAmY-a=CyPQVcW+MCrw@mail.gmail.com>

By the way, the Java Web Start system has improved a lot in recent versions
as well. I just tried running http://jfxtras.org/ and this was the
experience:

   - It told me my Java was insecure and that I should download the latest
   version (hah). It had three buttons, one saying "Update", one saying "Block
   content in browser" and one saying "Later". So it seems Java learned how to
   disable its plugin by itself anyway. I think on non-Linux platforms it
   probably knows how to update itself as well these days.
   - As it happens I don't care right now because jfxtras is a source I
   trust, so I clicked later and it popped up a permission screen saying the
   author was unknown, could damage my computer, etc. Actually, Jim has a code
   signing cert so this would show his identity at that point.
   - Clicked run. The app downloaded in a few seconds and was running.
   - JavaWS keeps the app up to date for you at that point.

It's triggered by downloading and opening a .jnlp file, so - same security
boundaries as a regular app download, except you download metadata for the
runtime instead of the whole app at once.

It might be worth providing a JNLP option on the multibit webpage as well,
as although I wouldn't let the applet plugin in my browser, once I made an
explicit decision to go to multibit.org and trust James Burton with my
money, the JWS experience at that point is pretty good. Until we have our
own auto update engine it's better than nothing.



On Tue, Jul 9, 2013 at 1:04 PM, Mike Hearn <mike at plan99.net> wrote:

> How many downloads/day do we see currently? I think you said it's on the
> order of a few thousand, so nowhere near 30k I'd guess. Anyway I can mirror
> it if we need to.
>
> The JavaFX packager is supposed to delete parts of the JVM that aren't
> used. Is the 30-40mb figure based on using that tool or something else?
> Note that you don't need to use the JFX widget toolkit to use the bundler
> tool.
>
> We could also invest in a copy of JET, which does native compilation down
> to self contained Windows binaries. It might create smaller bundles. But,
> it's a proprietary tool and I don't know how reproducible its outputs are.
>
> For the auto update, is there an existing auto update framework that we
> can modify to support threshold signed updates? I'm sure such a thing must
> exist. The updates would download in the background and then the app can
> just ask the user to restart it once the update is locally available, as
> Chrome does.
>
>
>
> On Tue, Jul 9, 2013 at 12:56 PM, Jim <jim618 at fastmail.co.uk> wrote:
>
>> Yes I would like to bundle a JVM as it would simplify the user
>> experience.
>>
>> There are a few downsides though:
>> + all the build packaging will need redoing and retesting.
>> + it will bump up the MultiBit download from about 11MB to 30-40MB
>> (I think). This drops the maximum copies of MultiBit the multibit.org
>> server can deliver per day from around 90,000 to 30,000ish.
>> The multibit.org server maxes out at 1 TB of bandwidth per day.
>>
>> Currently there is no provision to update anything automatically.
>> I would like to start having Bitcoin signed files that MultiBit can
>> check
>> and update (initially the checkpoints file, I18N files - NOT code
>> at first because of the security implications). I think this needs to be
>> in place before bundling a JVM so that users don't have to
>> keep redownloading it.
>>
>> Having lists of all the artifacts signed and them having SHA256 hashes
>> then makes it practical/ safe to start mirroring the code. I can see
>> each mirror crosschecking the others that the SHA256s are correct
>> for instance. This would increase the maximum number of
>> downloads we could cope with.
>>
>>
>> On Tue, Jul 9, 2013, at 11:36 AM, Mike Hearn wrote:
>> > Modern Java versions let you bundle the app with a stripped down JVM. I
>> > don't know if Jim does that, but I think it's an obvious step towards
>> > making MultiBit friendlier and easier to use.
>> >
>> > BTW I believe most secure browsers (Chrome, Firefox) have banned the
>> > applet
>> > plugin or severely restrained it anyway. So even if you install the JVM
>> > and
>> > plugin together there is not an issue.
>> >
>> >
>> > On Tue, Jul 9, 2013 at 3:20 AM, Caleb James DeLisle <
>> > calebdelisle at lavabit.com> wrote:
>> >
>> > > Java (Applet) security is indeed abysmal but lets compare apples to
>> apples.
>> > > With an applet some random guy with a website makes up some Java code
>> and
>> > > your browser automatically executes it.
>> > > With Multibit you're only executing highly trusted code (so trusted
>> that it
>> > > handles your money).
>> > > There has almost never been a Java exploit against secure trusted
>> code.
>> > >
>> > > The idea of discouraging use of java apps just because people would be
>> > > tricked into activating the browser plugin when installing the JVM is
>> > > probably valid but Multibit is the only reasonably complete client
>> outside
>> > > of bitcoinqt and I think client diversity is more important than
>> stamping
>> > > out java.
>> > >
>> > > Thanks,
>> > > Caleb
>> > >
>> > >
>> > > On 07/08/2013 08:22 PM, Robert Backhaus wrote:
>> > > > But... Multibit is Java. Java's security problems has made it an
>> instant
>> > > uninstall item on windows PCs for about a year now. Java exploits are
>> a
>> > > dime a dozen.
>> > > >
>> > > > Yes, you can reduce some of the problems by manually disabling the
>> > > browser plugin, but how many users will do that?
>> > > >
>> > > > Recommending a fast SPV client as a first wallet - yes, of course.
>> > > Recommending users open such a huge attack interface on their
>> computers by
>> > > installing Java - No go. Until Multibit is provided as a compiled
>> binary
>> > > without a Java dependency, it is DOA.
>> > > >
>> > > >
>> > > > On 1 July 2013 02:39, Gary Rowe <g.rowe at froot.co.uk <mailto:
>> > > g.rowe at froot.co.uk>> wrote:
>> > > >
>> > > >     I've beefed up the supporting documentation for the website to
>> make
>> > > it more accessible for developers who wish to contribute. It's a Java
>> > > application serving HTML.
>> > > >
>> > > >     It can be found here:
>> https://github.com/jim618/multibit-website
>> > > >
>> > > >
>> > > >     On 30 June 2013 16:19, Jim <jim618 at fastmail.co.uk <mailto:
>> > > jim618 at fastmail.co.uk>> wrote:
>> > > >
>> > > >         Yeah "email jim' was never going to work so I have
>> > > >         bumped up MultiBit support (a bit) by:
>> > > >
>> > > >         + having a dedicated Support page on the website
>> > > >            https://multibit.org/support.html
>> > > >            It has fixes and support notes for the most common
>> gotchas.
>> > > >         + the in-app help also now has a 'Support' section with
>> > > >            "Troubleshooting' and the commonest gotchas.
>> > > >            I've also written more help to cover as much as possible.
>> > > >         + Failing that people are directed first to
>> > > bitcoin.stackchange.com <http://bitcoin.stackchange.com>
>> > > >            (I have a notification set up for the 'multibit' keyword.
>> > > >         + Then finally users are directed to the github issues to
>> search
>> > > >            existing or raise a new issue. Gary and Tim often chip
>> in on
>> > > there to
>> > > >            close
>> > > >            issues down as well as me.
>> > > >
>> > > >
>> > > >
>> > > >         On Sun, Jun 30, 2013, at 12:42 PM, Mike Hearn wrote:
>> > > >         > Sounds like we have consensus, Saivann, shall we do it?
>> > > >         >
>> > > >         > I'm also going to ask Theymos again to relax the newbie
>> > > restrictions
>> > > >         > for the alt client forums. It's probably too hard to get
>> > > support at
>> > > >         > the moment and "email jim" doesn't scale at all.
>> > > >         >
>> > > >         > On Fri, Jun 28, 2013 at 4:24 PM, Gavin Andresen <
>> > > gavinandresen at gmail.com <mailto:gavinandresen at gmail.com>>
>> > > >         > wrote:
>> > > >         > > I vote "yes" to have MultiBit replace Bitcoin-Qt as the
>> > > recommended
>> > > >         > > desktop wallet app. I think most users will be happier
>> with
>> > > it.
>> > > >         > >
>> > > >         > > If I'm wrong, it is easy to change back.
>> > > >         > >
>> > > >         > >
>> > >
>> ------------------------------------------------------------------------------
>> > > >         > > This SF.net email is sponsored by Windows:
>> > > >         > >
>> > > >         > > Build for Windows Store.
>> > > >         > >
>> > > >         > > http://p.sf.net/sfu/windows-dev2dev
>> > > >         > > _______________________________________________
>> > > >         > > Bitcoin-development mailing list
>> > > >         > > Bitcoin-development at lists.sourceforge.net <mailto:
>> > > Bitcoin-development at lists.sourceforge.net>
>> > > >         > >
>> > > https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>> > > >         >
>> > > >         >
>> > >
>> ------------------------------------------------------------------------------
>> > > >         > This SF.net email is sponsored by Windows:
>> > > >         >
>> > > >         > Build for Windows Store.
>> > > >         >
>> > > >         > http://p.sf.net/sfu/windows-dev2dev
>> > > >         > _______________________________________________
>> > > >         > Bitcoin-development mailing list
>> > > >         > Bitcoin-development at lists.sourceforge.net <mailto:
>> > > Bitcoin-development at lists.sourceforge.net>
>> > > >         >
>> > > https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>> > > >
>> > > >
>> > > >         --
>> > > >         https://multibit.org    Money, reinvented
>> > > >
>> > > >
>> > >
>> ------------------------------------------------------------------------------
>> > > >         This SF.net email is sponsored by Windows:
>> > > >
>> > > >         Build for Windows Store.
>> > > >
>> > > >         http://p.sf.net/sfu/windows-dev2dev
>> > > >         _______________________________________________
>> > > >         Bitcoin-development mailing list
>> > > >         Bitcoin-development at lists.sourceforge.net <mailto:
>> > > Bitcoin-development at lists.sourceforge.net>
>> > > >
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>> > > >
>> > > >
>> > > >
>> > > >
>> > >
>> ------------------------------------------------------------------------------
>> > > >     This SF.net email is sponsored by Windows:
>> > > >
>> > > >     Build for Windows Store.
>> > > >
>> > > >     http://p.sf.net/sfu/windows-dev2dev
>> > > >     _______________________________________________
>> > > >     Bitcoin-development mailing list
>> > > >     Bitcoin-development at lists.sourceforge.net <mailto:
>> > > Bitcoin-development at lists.sourceforge.net>
>> > > >
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>> > > >
>> > > >
>> > > >
>> > > >
>> > > >
>> > >
>> ------------------------------------------------------------------------------
>> > > > See everything from the browser to the database with AppDynamics
>> > > > Get end-to-end visibility with application monitoring from
>> AppDynamics
>> > > > Isolate bottlenecks and diagnose root cause in seconds.
>> > > > Start your free trial of AppDynamics Pro today!
>> > > >
>> > >
>> http://pubads.g.doubleclick.net/gampad/clk?id=48808831&iu=/4140/ostg.clktrk
>> > > >
>> > > >
>> > > >
>> > > > _______________________________________________
>> > > > Bitcoin-development mailing list
>> > > > Bitcoin-development at lists.sourceforge.net
>> > > > https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>> > > >
>> > >
>> > >
>> > >
>> > >
>> ------------------------------------------------------------------------------
>> > > See everything from the browser to the database with AppDynamics
>> > > Get end-to-end visibility with application monitoring from AppDynamics
>> > > Isolate bottlenecks and diagnose root cause in seconds.
>> > > Start your free trial of AppDynamics Pro today!
>> > >
>> http://pubads.g.doubleclick.net/gampad/clk?id=48808831&iu=/4140/ostg.clktrk
>> > > _______________________________________________
>> > > Bitcoin-development mailing list
>> > > Bitcoin-development at lists.sourceforge.net
>> > > https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>> > >
>> >
>> ------------------------------------------------------------------------------
>> > See everything from the browser to the database with AppDynamics
>> > Get end-to-end visibility with application monitoring from AppDynamics
>> > Isolate bottlenecks and diagnose root cause in seconds.
>> > Start your free trial of AppDynamics Pro today!
>> >
>> http://pubads.g.doubleclick.net/gampad/clk?id=48808831&iu=/4140/ostg.clktrk
>> > _______________________________________________
>> > Bitcoin-development mailing list
>> > Bitcoin-development at lists.sourceforge.net
>> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>
>>
>> --
>> https://multibit.org    Money, reinvented
>>
>>
>> ------------------------------------------------------------------------------
>> See everything from the browser to the database with AppDynamics
>> Get end-to-end visibility with application monitoring from AppDynamics
>> Isolate bottlenecks and diagnose root cause in seconds.
>> Start your free trial of AppDynamics Pro today!
>>
>> http://pubads.g.doubleclick.net/gampad/clk?id=48808831&iu=/4140/ostg.clktrk
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130709/20be478a/attachment.html>

From will at phase.net  Tue Jul  9 11:13:16 2013
From: will at phase.net (Will)
Date: Tue, 9 Jul 2013 13:13:16 +0200
Subject: [Bitcoin-development] Proposal: MultiBit as default desktop
 client on bitcoin.org
In-Reply-To: <CANEZrP3zi4sWBJa-9hu4S2+gT5pP-6JzNi=mJQi=OnzF5iZE_w@mail.gmail.com>
References: <1372353053.10405.140661249237317.77984E1F@webmail.messagingengine.com>
	<CAJHLa0Ncac9Xt-AQBnpghqqpfR-j6Xtd9qVQoUe2dPp0kJvz1A@mail.gmail.com>
	<CANEZrP0k1HDrJC9DOn6JYiVcaRRXwVwxW7ZPjE9XvfTCHXX6pw@mail.gmail.com>
	<CABsx9T3GJN0inGChebJt_dRLpVrPw7BTH8oQo6F4q6yFJaOoCA@mail.gmail.com>
	<CANEZrP3LGxZ6E+9UWQH+_RN66dfeGzo4+QYACjauKRufpqB2QA@mail.gmail.com>
	<1372605569.4937.140661250186789.39404E47@webmail.messagingengine.com>
	<CAKm8k+20z0FkQjnYXjBwUSwY4ncTmMc-LXDH=hF6u55f_gWpkA@mail.gmail.com>
	<CA+i0-i9tj8w7pNuk7nUBQKdxvizX+6_Ez1VA8OtKJNTqRrYtxg@mail.gmail.com>
	<51DB6548.5070909@lavabit.com>
	<CANEZrP0OZZDtRw_KYJpPkhYhQA75h5yyQRQrw+gxV0hsnc2bbg@mail.gmail.com>
	<1373367371.4283.140661253533454.0D7E544E@webmail.messagingengine.com>
	<CANEZrP3zi4sWBJa-9hu4S2+gT5pP-6JzNi=mJQi=OnzF5iZE_w@mail.gmail.com>
Message-ID: <CAHQs=o5cZCNaiDmH=h3XqxxigWeXbkDMLBr0fSCxTiJtCOJUAA@mail.gmail.com>

Omaha - which is the automatic update framework that Google Chrome uses -
is open sourced:

https://code.google.com/p/omaha/

It might be a bit heavyweight for just one package though.

Will

On 9 July 2013 13:04, Mike Hearn <mike at plan99.net> wrote:

> For the auto update, is there an existing auto update framework that we
> can modify to support threshold signed updates? I'm sure such a thing must
> exist. The updates would download in the background and then the app can
> just ask the user to restart it once the update is locally available, as
> Chrome does.
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130709/7d9ba533/attachment.html>

From nanotube at gmail.com  Tue Jul  9 14:00:01 2013
From: nanotube at gmail.com (Daniel F)
Date: Tue, 09 Jul 2013 10:00:01 -0400
Subject: [Bitcoin-development] Proposal: MultiBit as default desktop
 client on bitcoin.org
In-Reply-To: <1373367371.4283.140661253533454.0D7E544E@webmail.messagingengine.com>
References: <1372353053.10405.140661249237317.77984E1F@webmail.messagingengine.com>
	<CAJHLa0Ncac9Xt-AQBnpghqqpfR-j6Xtd9qVQoUe2dPp0kJvz1A@mail.gmail.com>
	<CANEZrP0k1HDrJC9DOn6JYiVcaRRXwVwxW7ZPjE9XvfTCHXX6pw@mail.gmail.com>
	<CABsx9T3GJN0inGChebJt_dRLpVrPw7BTH8oQo6F4q6yFJaOoCA@mail.gmail.com>
	<CANEZrP3LGxZ6E+9UWQH+_RN66dfeGzo4+QYACjauKRufpqB2QA@mail.gmail.com>
	<1372605569.4937.140661250186789.39404E47@webmail.messagingengine.com>
	<CAKm8k+20z0FkQjnYXjBwUSwY4ncTmMc-LXDH=hF6u55f_gWpkA@mail.gmail.com>
	<CA+i0-i9tj8w7pNuk7nUBQKdxvizX+6_Ez1VA8OtKJNTqRrYtxg@mail.gmail.com>
	<51DB6548.5070909@lavabit.com>
	<CANEZrP0OZZDtRw_KYJpPkhYhQA75h5yyQRQrw+gxV0hsnc2bbg@mail.gmail.com>
	<1373367371.4283.140661253533454.0D7E544E@webmail.messagingengine.com>
Message-ID: <51DC1761.5080303@gmail.com>

on 07/09/2013 06:56 AM Jim said the following:
> + it will bump up the MultiBit download from about 11MB to 30-40MB 
> (I think). This drops the maximum copies of MultiBit the multibit.org 
> server can deliver per day from around 90,000 to 30,000ish. 
> The multibit.org server maxes out at 1 TB of bandwidth per day.

You could host your downloads on sourceforge and achieve virtually
unlimited capacity.



From jgarzik at bitpay.com  Tue Jul  9 14:06:47 2013
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Tue, 9 Jul 2013 10:06:47 -0400
Subject: [Bitcoin-development] Proposal: MultiBit as default desktop
 client on bitcoin.org
In-Reply-To: <51DC1761.5080303@gmail.com>
References: <1372353053.10405.140661249237317.77984E1F@webmail.messagingengine.com>
	<CAJHLa0Ncac9Xt-AQBnpghqqpfR-j6Xtd9qVQoUe2dPp0kJvz1A@mail.gmail.com>
	<CANEZrP0k1HDrJC9DOn6JYiVcaRRXwVwxW7ZPjE9XvfTCHXX6pw@mail.gmail.com>
	<CABsx9T3GJN0inGChebJt_dRLpVrPw7BTH8oQo6F4q6yFJaOoCA@mail.gmail.com>
	<CANEZrP3LGxZ6E+9UWQH+_RN66dfeGzo4+QYACjauKRufpqB2QA@mail.gmail.com>
	<1372605569.4937.140661250186789.39404E47@webmail.messagingengine.com>
	<CAKm8k+20z0FkQjnYXjBwUSwY4ncTmMc-LXDH=hF6u55f_gWpkA@mail.gmail.com>
	<CA+i0-i9tj8w7pNuk7nUBQKdxvizX+6_Ez1VA8OtKJNTqRrYtxg@mail.gmail.com>
	<51DB6548.5070909@lavabit.com>
	<CANEZrP0OZZDtRw_KYJpPkhYhQA75h5yyQRQrw+gxV0hsnc2bbg@mail.gmail.com>
	<1373367371.4283.140661253533454.0D7E544E@webmail.messagingengine.com>
	<51DC1761.5080303@gmail.com>
Message-ID: <CAJHLa0P5D2W_5GH9PGk4wgi2DwsqHjRQkjHZ3uCVwaFNDcPThw@mail.gmail.com>

On Tue, Jul 9, 2013 at 10:00 AM, Daniel F <nanotube at gmail.com> wrote:
> on 07/09/2013 06:56 AM Jim said the following:
>> + it will bump up the MultiBit download from about 11MB to 30-40MB
>> (I think). This drops the maximum copies of MultiBit the multibit.org
>> server can deliver per day from around 90,000 to 30,000ish.
>> The multibit.org server maxes out at 1 TB of bandwidth per day.
>
> You could host your downloads on sourceforge and achieve virtually
> unlimited capacity.

Indeed.  There is no reason to worry about download bandwidth these
days, for open source software downloads.

Move the downloads to a site where such worries do not exist.

-- 
Jeff Garzik
Senior Software Engineer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From mike at plan99.net  Tue Jul  9 14:28:36 2013
From: mike at plan99.net (Mike Hearn)
Date: Tue, 9 Jul 2013 16:28:36 +0200
Subject: [Bitcoin-development] Proposal: MultiBit as default desktop
 client on bitcoin.org
In-Reply-To: <CAJHLa0P5D2W_5GH9PGk4wgi2DwsqHjRQkjHZ3uCVwaFNDcPThw@mail.gmail.com>
References: <1372353053.10405.140661249237317.77984E1F@webmail.messagingengine.com>
	<CAJHLa0Ncac9Xt-AQBnpghqqpfR-j6Xtd9qVQoUe2dPp0kJvz1A@mail.gmail.com>
	<CANEZrP0k1HDrJC9DOn6JYiVcaRRXwVwxW7ZPjE9XvfTCHXX6pw@mail.gmail.com>
	<CABsx9T3GJN0inGChebJt_dRLpVrPw7BTH8oQo6F4q6yFJaOoCA@mail.gmail.com>
	<CANEZrP3LGxZ6E+9UWQH+_RN66dfeGzo4+QYACjauKRufpqB2QA@mail.gmail.com>
	<1372605569.4937.140661250186789.39404E47@webmail.messagingengine.com>
	<CAKm8k+20z0FkQjnYXjBwUSwY4ncTmMc-LXDH=hF6u55f_gWpkA@mail.gmail.com>
	<CA+i0-i9tj8w7pNuk7nUBQKdxvizX+6_Ez1VA8OtKJNTqRrYtxg@mail.gmail.com>
	<51DB6548.5070909@lavabit.com>
	<CANEZrP0OZZDtRw_KYJpPkhYhQA75h5yyQRQrw+gxV0hsnc2bbg@mail.gmail.com>
	<1373367371.4283.140661253533454.0D7E544E@webmail.messagingengine.com>
	<51DC1761.5080303@gmail.com>
	<CAJHLa0P5D2W_5GH9PGk4wgi2DwsqHjRQkjHZ3uCVwaFNDcPThw@mail.gmail.com>
Message-ID: <CANEZrP3CJAdJ12BimW5w9q4q-QgBoRDUnbY-uVc1+s3zbo4ncg@mail.gmail.com>

SourceForge has a horrible UI and blocks some countries. It also exposes us
to a large and potentially hackable mirror network. Whilst we're not
bandwidth constrained on our own servers, let's try and keep using them.


On Tue, Jul 9, 2013 at 4:06 PM, Jeff Garzik <jgarzik at bitpay.com> wrote:

> On Tue, Jul 9, 2013 at 10:00 AM, Daniel F <nanotube at gmail.com> wrote:
> > on 07/09/2013 06:56 AM Jim said the following:
> >> + it will bump up the MultiBit download from about 11MB to 30-40MB
> >> (I think). This drops the maximum copies of MultiBit the multibit.org
> >> server can deliver per day from around 90,000 to 30,000ish.
> >> The multibit.org server maxes out at 1 TB of bandwidth per day.
> >
> > You could host your downloads on sourceforge and achieve virtually
> > unlimited capacity.
>
> Indeed.  There is no reason to worry about download bandwidth these
> days, for open source software downloads.
>
> Move the downloads to a site where such worries do not exist.
>
> --
> Jeff Garzik
> Senior Software Engineer and open source evangelist
> BitPay, Inc.      https://bitpay.com/
>
>
> ------------------------------------------------------------------------------
> See everything from the browser to the database with AppDynamics
> Get end-to-end visibility with application monitoring from AppDynamics
> Isolate bottlenecks and diagnose root cause in seconds.
> Start your free trial of AppDynamics Pro today!
> http://pubads.g.doubleclick.net/gampad/clk?id=48808831&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130709/90f7630b/attachment.html>

From jim618 at fastmail.co.uk  Tue Jul  9 14:46:28 2013
From: jim618 at fastmail.co.uk (Jim)
Date: Tue, 09 Jul 2013 15:46:28 +0100
Subject: [Bitcoin-development] Proposal: MultiBit as default desktop
 client on bitcoin.org
In-Reply-To: <CANEZrP3CJAdJ12BimW5w9q4q-QgBoRDUnbY-uVc1+s3zbo4ncg@mail.gmail.com>
References: <1372353053.10405.140661249237317.77984E1F@webmail.messagingengine.com>
	<CAJHLa0Ncac9Xt-AQBnpghqqpfR-j6Xtd9qVQoUe2dPp0kJvz1A@mail.gmail.com>
	<CANEZrP0k1HDrJC9DOn6JYiVcaRRXwVwxW7ZPjE9XvfTCHXX6pw@mail.gmail.com>
	<CABsx9T3GJN0inGChebJt_dRLpVrPw7BTH8oQo6F4q6yFJaOoCA@mail.gmail.com>
	<CANEZrP3LGxZ6E+9UWQH+_RN66dfeGzo4+QYACjauKRufpqB2QA@mail.gmail.com>
	<1372605569.4937.140661250186789.39404E47@webmail.messagingengine.com>
	<CAKm8k+20z0FkQjnYXjBwUSwY4ncTmMc-LXDH=hF6u55f_gWpkA@mail.gmail.com>
	<CA+i0-i9tj8w7pNuk7nUBQKdxvizX+6_Ez1VA8OtKJNTqRrYtxg@mail.gmail.com>
	<51DB6548.5070909@lavabit.com>
	<CANEZrP0OZZDtRw_KYJpPkhYhQA75h5yyQRQrw+gxV0hsnc2bbg@mail.gmail.com>
	<1373367371.4283.140661253533454.0D7E544E@webmail.messagingengine.com>
	<51DC1761.5080303@gmail.com>
	<CAJHLa0P5D2W_5GH9PGk4wgi2DwsqHjRQkjHZ3uCVwaFNDcPThw@mail.gmail.com>
	<CANEZrP3CJAdJ12BimW5w9q4q-QgBoRDUnbY-uVc1+s3zbo4ncg@mail.gmail.com>
Message-ID: <1373381188.719.140661253620206.0E29651A@webmail.messagingengine.com>

For those interested in these things the multibit.org server
is a dedicated server hosted by the German company
http://www.server4you.net. 

It is physically located in the delightful city of Strasbourg, 
just on the French side of the French German border.



On Tue, Jul 9, 2013, at 03:28 PM, Mike Hearn wrote:
> SourceForge has a horrible UI and blocks some countries. It also exposes
> us
> to a large and potentially hackable mirror network. Whilst we're not
> bandwidth constrained on our own servers, let's try and keep using them.
> 
> 
> On Tue, Jul 9, 2013 at 4:06 PM, Jeff Garzik <jgarzik at bitpay.com> wrote:
> 
> > On Tue, Jul 9, 2013 at 10:00 AM, Daniel F <nanotube at gmail.com> wrote:
> > > on 07/09/2013 06:56 AM Jim said the following:
> > >> + it will bump up the MultiBit download from about 11MB to 30-40MB
> > >> (I think). This drops the maximum copies of MultiBit the multibit.org
> > >> server can deliver per day from around 90,000 to 30,000ish.
> > >> The multibit.org server maxes out at 1 TB of bandwidth per day.
> > >
> > > You could host your downloads on sourceforge and achieve virtually
> > > unlimited capacity.
> >
> > Indeed.  There is no reason to worry about download bandwidth these
> > days, for open source software downloads.
> >
> > Move the downloads to a site where such worries do not exist.
> >
> > --
> > Jeff Garzik
> > Senior Software Engineer and open source evangelist
> > BitPay, Inc.      https://bitpay.com/
> >
> >
> > ------------------------------------------------------------------------------
> > See everything from the browser to the database with AppDynamics
> > Get end-to-end visibility with application monitoring from AppDynamics
> > Isolate bottlenecks and diagnose root cause in seconds.
> > Start your free trial of AppDynamics Pro today!
> > http://pubads.g.doubleclick.net/gampad/clk?id=48808831&iu=/4140/ostg.clktrk
> > _______________________________________________
> > Bitcoin-development mailing list
> > Bitcoin-development at lists.sourceforge.net
> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> >
> ------------------------------------------------------------------------------
> See everything from the browser to the database with AppDynamics
> Get end-to-end visibility with application monitoring from AppDynamics
> Isolate bottlenecks and diagnose root cause in seconds.
> Start your free trial of AppDynamics Pro today!
> http://pubads.g.doubleclick.net/gampad/clk?id=48808831&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development


-- 
https://multibit.org    Money, reinvented



From nanotube at gmail.com  Tue Jul  9 14:57:34 2013
From: nanotube at gmail.com (Daniel F)
Date: Tue, 09 Jul 2013 10:57:34 -0400
Subject: [Bitcoin-development] Proposal: MultiBit as default desktop
 client on bitcoin.org
In-Reply-To: <CANEZrP3CJAdJ12BimW5w9q4q-QgBoRDUnbY-uVc1+s3zbo4ncg@mail.gmail.com>
References: <1372353053.10405.140661249237317.77984E1F@webmail.messagingengine.com>
	<CAJHLa0Ncac9Xt-AQBnpghqqpfR-j6Xtd9qVQoUe2dPp0kJvz1A@mail.gmail.com>
	<CANEZrP0k1HDrJC9DOn6JYiVcaRRXwVwxW7ZPjE9XvfTCHXX6pw@mail.gmail.com>
	<CABsx9T3GJN0inGChebJt_dRLpVrPw7BTH8oQo6F4q6yFJaOoCA@mail.gmail.com>
	<CANEZrP3LGxZ6E+9UWQH+_RN66dfeGzo4+QYACjauKRufpqB2QA@mail.gmail.com>
	<1372605569.4937.140661250186789.39404E47@webmail.messagingengine.com>
	<CAKm8k+20z0FkQjnYXjBwUSwY4ncTmMc-LXDH=hF6u55f_gWpkA@mail.gmail.com>
	<CA+i0-i9tj8w7pNuk7nUBQKdxvizX+6_Ez1VA8OtKJNTqRrYtxg@mail.gmail.com>
	<51DB6548.5070909@lavabit.com>
	<CANEZrP0OZZDtRw_KYJpPkhYhQA75h5yyQRQrw+gxV0hsnc2bbg@mail.gmail.com>
	<1373367371.4283.140661253533454.0D7E544E@webmail.messagingengine.com>
	<51DC1761.5080303@gmail.com>
	<CAJHLa0P5D2W_5GH9PGk4wgi2DwsqHjRQkjHZ3uCVwaFNDcPThw@mail.gmail.com>
	<CANEZrP3CJAdJ12BimW5w9q4q-QgBoRDUnbY-uVc1+s3zbo4ncg@mail.gmail.com>
Message-ID: <51DC24DE.2040801@gmail.com>

on 07/09/2013 10:28 AM Mike Hearn said the following:
> SourceForge has a horrible UI and blocks some countries. It also exposes
> us to a large and potentially hackable mirror network. Whilst we're not
> bandwidth constrained on our own servers, let's try and keep using them.

the point was just that "if need be" free capacity is available without
having to throw money at it. until there's no need, doesn't matter.

also hackability (and ui) should be irrelevant for the autoupdate
process (which i presume will do all kinds of checksum and sig
verification). and it's likely the autoupdates that will create very
lumpy download demand.




From mike at plan99.net  Tue Jul  9 15:27:17 2013
From: mike at plan99.net (Mike Hearn)
Date: Tue, 9 Jul 2013 17:27:17 +0200
Subject: [Bitcoin-development] Proposal: MultiBit as default desktop
 client on bitcoin.org
In-Reply-To: <51DC24DE.2040801@gmail.com>
References: <1372353053.10405.140661249237317.77984E1F@webmail.messagingengine.com>
	<CAJHLa0Ncac9Xt-AQBnpghqqpfR-j6Xtd9qVQoUe2dPp0kJvz1A@mail.gmail.com>
	<CANEZrP0k1HDrJC9DOn6JYiVcaRRXwVwxW7ZPjE9XvfTCHXX6pw@mail.gmail.com>
	<CABsx9T3GJN0inGChebJt_dRLpVrPw7BTH8oQo6F4q6yFJaOoCA@mail.gmail.com>
	<CANEZrP3LGxZ6E+9UWQH+_RN66dfeGzo4+QYACjauKRufpqB2QA@mail.gmail.com>
	<1372605569.4937.140661250186789.39404E47@webmail.messagingengine.com>
	<CAKm8k+20z0FkQjnYXjBwUSwY4ncTmMc-LXDH=hF6u55f_gWpkA@mail.gmail.com>
	<CA+i0-i9tj8w7pNuk7nUBQKdxvizX+6_Ez1VA8OtKJNTqRrYtxg@mail.gmail.com>
	<51DB6548.5070909@lavabit.com>
	<CANEZrP0OZZDtRw_KYJpPkhYhQA75h5yyQRQrw+gxV0hsnc2bbg@mail.gmail.com>
	<1373367371.4283.140661253533454.0D7E544E@webmail.messagingengine.com>
	<51DC1761.5080303@gmail.com>
	<CAJHLa0P5D2W_5GH9PGk4wgi2DwsqHjRQkjHZ3uCVwaFNDcPThw@mail.gmail.com>
	<CANEZrP3CJAdJ12BimW5w9q4q-QgBoRDUnbY-uVc1+s3zbo4ncg@mail.gmail.com>
	<51DC24DE.2040801@gmail.com>
Message-ID: <CANEZrP2mTgR64mXzKWQB6sPj=cHz9VcOuqqNO=0H2mrgWn2Q6Q@mail.gmail.com>

That's true - we could serve new users off our own servers and auto updates
off SF.net mirrors, potentially.


On Tue, Jul 9, 2013 at 4:57 PM, Daniel F <nanotube at gmail.com> wrote:

> on 07/09/2013 10:28 AM Mike Hearn said the following:
> > SourceForge has a horrible UI and blocks some countries. It also exposes
> > us to a large and potentially hackable mirror network. Whilst we're not
> > bandwidth constrained on our own servers, let's try and keep using them.
>
> the point was just that "if need be" free capacity is available without
> having to throw money at it. until there's no need, doesn't matter.
>
> also hackability (and ui) should be irrelevant for the autoupdate
> process (which i presume will do all kinds of checksum and sig
> verification). and it's likely the autoupdates that will create very
> lumpy download demand.
>
>
>
> ------------------------------------------------------------------------------
> See everything from the browser to the database with AppDynamics
> Get end-to-end visibility with application monitoring from AppDynamics
> Isolate bottlenecks and diagnose root cause in seconds.
> Start your free trial of AppDynamics Pro today!
> http://pubads.g.doubleclick.net/gampad/clk?id=48808831&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130709/8c1bf5c7/attachment.html>

From nick at mynicknet.com  Tue Jul  9 15:32:21 2013
From: nick at mynicknet.com (Nick Simpson)
Date: Tue, 9 Jul 2013 10:32:21 -0500
Subject: [Bitcoin-development] Proposal: MultiBit as default desktop
	client on bitcoin.org
In-Reply-To: <CANEZrP2mTgR64mXzKWQB6sPj=cHz9VcOuqqNO=0H2mrgWn2Q6Q@mail.gmail.com>
References: <1372353053.10405.140661249237317.77984E1F@webmail.messagingengine.com>
	<CANEZrP0k1HDrJC9DOn6JYiVcaRRXwVwxW7ZPjE9XvfTCHXX6pw@mail.gmail.com>
	<CABsx9T3GJN0inGChebJt_dRLpVrPw7BTH8oQo6F4q6yFJaOoCA@mail.gmail.com>
	<CANEZrP3LGxZ6E+9UWQH+_RN66dfeGzo4+QYACjauKRufpqB2QA@mail.gmail.com>
	<1372605569.4937.140661250186789.39404E47@webmail.messagingengine.com>
	<CAKm8k+20z0FkQjnYXjBwUSwY4ncTmMc-LXDH=hF6u55f_gWpkA@mail.gmail.com>
	<CA+i0-i9tj8w7pNuk7nUBQKdxvizX+6_Ez1VA8OtKJNTqRrYtxg@mail.gmail.com>
	<51DB6548.5070909@lavabit.com>
	<CANEZrP0OZZDtRw_KYJpPkhYhQA75h5yyQRQrw+gxV0hsnc2bbg@mail.gmail.com>
	<1373367371.4283.140661253533454.0D7E544E@webmail.messagingengine.com>
	<51DC1761.5080303@gmail.com>
	<CAJHLa0P5D2W_5GH9PGk4wgi2DwsqHjRQkjHZ3uCVwaFNDcPThw@mail.gmail.com>
	<CANEZrP3CJAdJ12BimW5w9q4q-QgBoRDUnbY-uVc1+s3zbo4ncg@mail.gmail.com>
	<51DC24DE.2040801@gmail.com>
	<CANEZrP2mTgR64mXzKWQB6sPj=cHz9VcOuqqNO=0H2mrgWn2Q6Q@mail.gmail.com>
Message-ID: <db5052bb-913d-4596-a16c-1f9b2b4b9a96@email.android.com>

What about something like Cloudflare? Transparent to most and it'd help with your bandwidth issues.


Mike Hearn <mike at plan99.net> wrote:
>That's true - we could serve new users off our own servers and auto
>updates
>off SF.net mirrors, potentially.
>
>
>On Tue, Jul 9, 2013 at 4:57 PM, Daniel F <nanotube at gmail.com> wrote:
>
>> on 07/09/2013 10:28 AM Mike Hearn said the following:
>> > SourceForge has a horrible UI and blocks some countries. It also
>exposes
>> > us to a large and potentially hackable mirror network. Whilst we're
>not
>> > bandwidth constrained on our own servers, let's try and keep using
>them.
>>
>> the point was just that "if need be" free capacity is available
>without
>> having to throw money at it. until there's no need, doesn't matter.
>>
>> also hackability (and ui) should be irrelevant for the autoupdate
>> process (which i presume will do all kinds of checksum and sig
>> verification). and it's likely the autoupdates that will create very
>> lumpy download demand.
>>
>>
>>
>>
>------------------------------------------------------------------------------
>> See everything from the browser to the database with AppDynamics
>> Get end-to-end visibility with application monitoring from
>AppDynamics
>> Isolate bottlenecks and diagnose root cause in seconds.
>> Start your free trial of AppDynamics Pro today!
>>
>http://pubads.g.doubleclick.net/gampad/clk?id=48808831&iu=/4140/ostg.clktrk
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>
>
>
>------------------------------------------------------------------------
>
>------------------------------------------------------------------------------
>See everything from the browser to the database with AppDynamics
>Get end-to-end visibility with application monitoring from AppDynamics
>Isolate bottlenecks and diagnose root cause in seconds.
>Start your free trial of AppDynamics Pro today!
>http://pubads.g.doubleclick.net/gampad/clk?id=48808831&iu=/4140/ostg.clktrk
>
>------------------------------------------------------------------------
>
>_______________________________________________
>Bitcoin-development mailing list
>Bitcoin-development at lists.sourceforge.net
>https://lists.sourceforge.net/lists/listinfo/bitcoin-development
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130709/c84812b7/attachment.html>

From jgarzik at bitpay.com  Tue Jul  9 15:59:13 2013
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Tue, 9 Jul 2013 11:59:13 -0400
Subject: [Bitcoin-development] Proposal: MultiBit as default desktop
 client on bitcoin.org
In-Reply-To: <db5052bb-913d-4596-a16c-1f9b2b4b9a96@email.android.com>
References: <1372353053.10405.140661249237317.77984E1F@webmail.messagingengine.com>
	<CANEZrP0k1HDrJC9DOn6JYiVcaRRXwVwxW7ZPjE9XvfTCHXX6pw@mail.gmail.com>
	<CABsx9T3GJN0inGChebJt_dRLpVrPw7BTH8oQo6F4q6yFJaOoCA@mail.gmail.com>
	<CANEZrP3LGxZ6E+9UWQH+_RN66dfeGzo4+QYACjauKRufpqB2QA@mail.gmail.com>
	<1372605569.4937.140661250186789.39404E47@webmail.messagingengine.com>
	<CAKm8k+20z0FkQjnYXjBwUSwY4ncTmMc-LXDH=hF6u55f_gWpkA@mail.gmail.com>
	<CA+i0-i9tj8w7pNuk7nUBQKdxvizX+6_Ez1VA8OtKJNTqRrYtxg@mail.gmail.com>
	<51DB6548.5070909@lavabit.com>
	<CANEZrP0OZZDtRw_KYJpPkhYhQA75h5yyQRQrw+gxV0hsnc2bbg@mail.gmail.com>
	<1373367371.4283.140661253533454.0D7E544E@webmail.messagingengine.com>
	<51DC1761.5080303@gmail.com>
	<CAJHLa0P5D2W_5GH9PGk4wgi2DwsqHjRQkjHZ3uCVwaFNDcPThw@mail.gmail.com>
	<CANEZrP3CJAdJ12BimW5w9q4q-QgBoRDUnbY-uVc1+s3zbo4ncg@mail.gmail.com>
	<51DC24DE.2040801@gmail.com>
	<CANEZrP2mTgR64mXzKWQB6sPj=cHz9VcOuqqNO=0H2mrgWn2Q6Q@mail.gmail.com>
	<db5052bb-913d-4596-a16c-1f9b2b4b9a96@email.android.com>
Message-ID: <CAJHLa0Me86xsc+qNjL03ivQDPrsEeifdTx4T+e4euY3BivnVCw@mail.gmail.com>

On Tue, Jul 9, 2013 at 11:32 AM, Nick Simpson <nick at mynicknet.com> wrote:
> What about something like Cloudflare? Transparent to most and it'd help with
> your bandwidth issues.

Cloudflare is rapidly becoming a bitcoin community SPOF.
-- 
Jeff Garzik
Senior Software Engineer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From nick at mynicknet.com  Tue Jul  9 16:03:02 2013
From: nick at mynicknet.com (Nick Simpson)
Date: Tue, 9 Jul 2013 11:03:02 -0500
Subject: [Bitcoin-development] Proposal: MultiBit as default desktop
	client on bitcoin.org
In-Reply-To: <CAJHLa0Me86xsc+qNjL03ivQDPrsEeifdTx4T+e4euY3BivnVCw@mail.gmail.com>
References: <1372353053.10405.140661249237317.77984E1F@webmail.messagingengine.com>
	<CABsx9T3GJN0inGChebJt_dRLpVrPw7BTH8oQo6F4q6yFJaOoCA@mail.gmail.com>
	<CANEZrP3LGxZ6E+9UWQH+_RN66dfeGzo4+QYACjauKRufpqB2QA@mail.gmail.com>
	<1372605569.4937.140661250186789.39404E47@webmail.messagingengine.com>
	<CAKm8k+20z0FkQjnYXjBwUSwY4ncTmMc-LXDH=hF6u55f_gWpkA@mail.gmail.com>
	<CA+i0-i9tj8w7pNuk7nUBQKdxvizX+6_Ez1VA8OtKJNTqRrYtxg@mail.gmail.com>
	<51DB6548.5070909@lavabit.com>
	<CANEZrP0OZZDtRw_KYJpPkhYhQA75h5yyQRQrw+gxV0hsnc2bbg@mail.gmail.com>
	<1373367371.4283.140661253533454.0D7E544E@webmail.messagingengine.com>
	<51DC1761.5080303@gmail.com>
	<CAJHLa0P5D2W_5GH9PGk4wgi2DwsqHjRQkjHZ3uCVwaFNDcPThw@mail.gmail.com>
	<CANEZrP3CJAdJ12BimW5w9q4q-QgBoRDUnbY-uVc1+s3zbo4ncg@mail.gmail.com>
	<51DC24DE.2040801@gmail.com>
	<CANEZrP2mTgR64mXzKWQB6sPj=cHz9VcOuqqNO=0H2mrgWn2Q6Q@mail.gmail.com>
	<db5052bb-913d-4596-a16c-1f9b2b4b9a96@email.android.com>
	<CAJHLa0Me86xsc+qNjL03ivQDPrsEeifdTx4T+e4euY3BivnVCw@mail.gmail.com>
Message-ID: <71007517-8ab6-4768-b3fc-f505b97168ed@email.android.com>

Not any more than sourceforge or github.. None of these solutions are replacements, but rather only supplements to self hosted files.

Jeff Garzik <jgarzik at bitpay.com> wrote:
>On Tue, Jul 9, 2013 at 11:32 AM, Nick Simpson <nick at mynicknet.com>
>wrote:
>> What about something like Cloudflare? Transparent to most and it'd
>help with
>> your bandwidth issues.
>
>Cloudflare is rapidly becoming a bitcoin community SPOF.
>-- 
>Jeff Garzik
>Senior Software Engineer and open source evangelist
>BitPay, Inc.      https://bitpay.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130709/0d8c3822/attachment.html>

From johnathan at corganlabs.com  Tue Jul  9 15:51:11 2013
From: johnathan at corganlabs.com (Johnathan Corgan)
Date: Tue, 09 Jul 2013 08:51:11 -0700
Subject: [Bitcoin-development] Proposal: MultiBit as default desktop
 client on bitcoin.org
In-Reply-To: <db5052bb-913d-4596-a16c-1f9b2b4b9a96@email.android.com>
References: <1372353053.10405.140661249237317.77984E1F@webmail.messagingengine.com>
	<CANEZrP0k1HDrJC9DOn6JYiVcaRRXwVwxW7ZPjE9XvfTCHXX6pw@mail.gmail.com>
	<CABsx9T3GJN0inGChebJt_dRLpVrPw7BTH8oQo6F4q6yFJaOoCA@mail.gmail.com>
	<CANEZrP3LGxZ6E+9UWQH+_RN66dfeGzo4+QYACjauKRufpqB2QA@mail.gmail.com>
	<1372605569.4937.140661250186789.39404E47@webmail.messagingengine.com>
	<CAKm8k+20z0FkQjnYXjBwUSwY4ncTmMc-LXDH=hF6u55f_gWpkA@mail.gmail.com>
	<CA+i0-i9tj8w7pNuk7nUBQKdxvizX+6_Ez1VA8OtKJNTqRrYtxg@mail.gmail.com>
	<51DB6548.5070909@lavabit.com>
	<CANEZrP0OZZDtRw_KYJpPkhYhQA75h5yyQRQrw+gxV0hsnc2bbg@mail.gmail.com>
	<1373367371.4283.140661253533454.0D7E544E@webmail.messagingengine.com>
	<51DC1761.5080303@gmail.com>
	<CAJHLa0P5D2W_5GH9PGk4wgi2DwsqHjRQkjHZ3uCVwaFNDcPThw@mail.gmail.com>
	<CANEZrP3CJAdJ12BimW5w9q4q-QgBoRDUnbY-uVc1+s3zbo4ncg@mail.gmail.com>
	<51DC24DE.2040801@gmail.com>
	<CANEZrP2mTgR64mXzKWQB6sPj=cHz9VcOuqqNO=0H2mrgWn2Q6Q@mail.gmail.com>
	<db5052bb-913d-4596-a16c-1f9b2b4b9a96@email.android.com>
Message-ID: <51DC316F.6010108@corganlabs.com>

On 07/09/2013 08:32 AM, Nick Simpson wrote:

> What about something like Cloudflare? Transparent to most and it'd help
> with your bandwidth issues.

By way of endorsement, at the GNU Radio Project we switched to
CloudFlare's free service tier a few months ago.  We host on AWS EC2 our
own web servers, downloads, and git repositories.  CloudFlare has
reduced our bandwidth bill by about 50%, with very little pain.

-- 
Johnathan Corgan
Corgan Labs - SDR Training and Development Services
http://corganlabs.com

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 230 bytes
Desc: OpenPGP digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130709/0cc393d5/attachment.sig>

From mike at plan99.net  Tue Jul  9 16:44:08 2013
From: mike at plan99.net (Mike Hearn)
Date: Tue, 9 Jul 2013 18:44:08 +0200
Subject: [Bitcoin-development] Proposal: MultiBit as default desktop
 client on bitcoin.org
In-Reply-To: <51DC316F.6010108@corganlabs.com>
References: <1372353053.10405.140661249237317.77984E1F@webmail.messagingengine.com>
	<CANEZrP0k1HDrJC9DOn6JYiVcaRRXwVwxW7ZPjE9XvfTCHXX6pw@mail.gmail.com>
	<CABsx9T3GJN0inGChebJt_dRLpVrPw7BTH8oQo6F4q6yFJaOoCA@mail.gmail.com>
	<CANEZrP3LGxZ6E+9UWQH+_RN66dfeGzo4+QYACjauKRufpqB2QA@mail.gmail.com>
	<1372605569.4937.140661250186789.39404E47@webmail.messagingengine.com>
	<CAKm8k+20z0FkQjnYXjBwUSwY4ncTmMc-LXDH=hF6u55f_gWpkA@mail.gmail.com>
	<CA+i0-i9tj8w7pNuk7nUBQKdxvizX+6_Ez1VA8OtKJNTqRrYtxg@mail.gmail.com>
	<51DB6548.5070909@lavabit.com>
	<CANEZrP0OZZDtRw_KYJpPkhYhQA75h5yyQRQrw+gxV0hsnc2bbg@mail.gmail.com>
	<1373367371.4283.140661253533454.0D7E544E@webmail.messagingengine.com>
	<51DC1761.5080303@gmail.com>
	<CAJHLa0P5D2W_5GH9PGk4wgi2DwsqHjRQkjHZ3uCVwaFNDcPThw@mail.gmail.com>
	<CANEZrP3CJAdJ12BimW5w9q4q-QgBoRDUnbY-uVc1+s3zbo4ncg@mail.gmail.com>
	<51DC24DE.2040801@gmail.com>
	<CANEZrP2mTgR64mXzKWQB6sPj=cHz9VcOuqqNO=0H2mrgWn2Q6Q@mail.gmail.com>
	<db5052bb-913d-4596-a16c-1f9b2b4b9a96@email.android.com>
	<51DC316F.6010108@corganlabs.com>
Message-ID: <CANEZrP2N89ADsrFpk2fei-+zE1BgsDwB4LSHa_DMoH3o9rxZ5A@mail.gmail.com>

That's good to know. Still, at the moment we'd need to dramatically
increase the download size and increase Bitcoin usage by 10x to hit our
limits. It'd be a good problem to have.


On Tue, Jul 9, 2013 at 5:51 PM, Johnathan Corgan
<johnathan at corganlabs.com>wrote:

> On 07/09/2013 08:32 AM, Nick Simpson wrote:
>
> > What about something like Cloudflare? Transparent to most and it'd help
> > with your bandwidth issues.
>
> By way of endorsement, at the GNU Radio Project we switched to
> CloudFlare's free service tier a few months ago.  We host on AWS EC2 our
> own web servers, downloads, and git repositories.  CloudFlare has
> reduced our bandwidth bill by about 50%, with very little pain.
>
> --
> Johnathan Corgan
> Corgan Labs - SDR Training and Development Services
> http://corganlabs.com
>
>
>
> ------------------------------------------------------------------------------
> See everything from the browser to the database with AppDynamics
> Get end-to-end visibility with application monitoring from AppDynamics
> Isolate bottlenecks and diagnose root cause in seconds.
> Start your free trial of AppDynamics Pro today!
> http://pubads.g.doubleclick.net/gampad/clk?id=48808831&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130709/84068a61/attachment.html>

From andreas at petersson.at  Tue Jul  9 22:15:03 2013
From: andreas at petersson.at (Andreas Petersson)
Date: Wed, 10 Jul 2013 00:15:03 +0200
Subject: [Bitcoin-development] Proposal: MultiBit as default desktop
 client on bitcoin.org
In-Reply-To: <CAJHLa0Me86xsc+qNjL03ivQDPrsEeifdTx4T+e4euY3BivnVCw@mail.gmail.com>
References: <1372353053.10405.140661249237317.77984E1F@webmail.messagingengine.com>
	<CABsx9T3GJN0inGChebJt_dRLpVrPw7BTH8oQo6F4q6yFJaOoCA@mail.gmail.com>
	<CANEZrP3LGxZ6E+9UWQH+_RN66dfeGzo4+QYACjauKRufpqB2QA@mail.gmail.com>
	<1372605569.4937.140661250186789.39404E47@webmail.messagingengine.com>
	<CAKm8k+20z0FkQjnYXjBwUSwY4ncTmMc-LXDH=hF6u55f_gWpkA@mail.gmail.com>
	<CA+i0-i9tj8w7pNuk7nUBQKdxvizX+6_Ez1VA8OtKJNTqRrYtxg@mail.gmail.com>
	<51DB6548.5070909@lavabit.com>
	<CANEZrP0OZZDtRw_KYJpPkhYhQA75h5yyQRQrw+gxV0hsnc2bbg@mail.gmail.com>
	<1373367371.4283.140661253533454.0D7E544E@webmail.messagingengine.com>
	<51DC1761.5080303@gmail.com>
	<CAJHLa0P5D2W_5GH9PGk4wgi2DwsqHjRQkjHZ3uCVwaFNDcPThw@mail.gmail.com>
	<CANEZrP3CJAdJ12BimW5w9q4q-QgBoRDUnbY-uVc1+s3zbo4ncg@mail.gmail.com>
	<51DC24DE.2040801@gmail.com>
	<CANEZrP2mTgR64mXzKWQB6sPj=cHz9VcOuqqNO=0H2mrgWn2Q6Q@mail.gmail.com>
	<db5052bb-913d-4596-a16c-1f9b2b4b9a96@email.android.com>
	<CAJHLa0Me86xsc+qNjL03ivQDPrsEeifdTx4T+e4euY3BivnVCw@mail.gmail.co
	m>
Message-ID: <51DC8B67.6050001@petersson.at>

It particulary worries me that a lot of sites hand over their SSL
private keys to Cloudflare, and they are located in prism land.

> Cloudflare is rapidly becoming a bitcoin community SPOF.




From pete at petertodd.org  Fri Jul 12 13:18:15 2013
From: pete at petertodd.org (Peter Todd)
Date: Fri, 12 Jul 2013 09:18:15 -0400
Subject: [Bitcoin-development] libzerocoin released,
 what about a zerocoin-only alt-coin with either-or mining
In-Reply-To: <20130705140140.GA23949@netbook.cypherspace.org>
References: <20130705140140.GA23949@netbook.cypherspace.org>
Message-ID: <20130712131815.GA18716@petertodd.org>

On Fri, Jul 05, 2013 at 04:01:40PM +0200, Adam Back wrote:
> Do people think that should work?  It seems to me it should with minimal,
> bitcoin changes.  I think the rule for either-or mining should be as simple
> as skipping the value / double-spend validation of the blocks that are
> zerocoin mining blocks.  Obviously zerocoin blocks can themselves end up on
> forks, that get resolved, but that fork resolution can perhaps be shared? 
> (Because the fork resolution is simply to accept the longest fork).

Yeah, there's been a lot of doom and gloom about zerocoin that is
frankly unwarrented. For instance people seem to think it's impossible
to make a blockchain with zerocoin due to the long time it takes to
verify transactions, about 1.5 seconds, and never realize that
verification can be parallelized.

Anyway the way to do it is to get out of the model of large blocks and
think about individual transactions. Make each transaction into its own
block, and have each transaction refer to the previous one in history.
(zerocoin is inherently linear due to the anonymity)

Verification does *not* need to be done by every node on every
transaction. Make the act of creating a transaction cost something and
include the previous state of the accumulator as part of a transaction.
Participants verify some subset of all transactions, and should they
find fraud they broadcast a proof. Optionally, but highly recomended,
make it profitable to find fraud, being careful to ensure that it's
never profitable to create fraud then find it yourself.

Anyway Bitcoin is limited to 7tx/s average so even without probabalistic
verification it'd be perfectly acceptable to just limit transactions to
one every few seconds provided you keep your "blocksize" down to one
transaction so the rate isn't bursty. You're going to want to be
cautious about bandwidth requirements anyway to make sure participants
can stay anonymous.

As you suggest creating zerocoins from provably sacrificing bitcoins is
the correct approach. The consensus algorithm should be that you
sacrifice zerocoins (specifically fractions there-of - note how I'm
assuming support for non-single-zerocoin amounts) and whatever chain has
the highest total sacrifice wins. One way to think about
proof-of-sacrifice is it's really proof-of-work, transferred. It also
has the *big* advantage that to double-spend, or for that matter 51% the
chain, you have to outspend everyone with a stake in the viability of
the blockchain: they can sacrifice their zerocoins to combat you. In the
case of a double-spend to rip off an online merchant the total amount
you could profit is the same as the total amount they would rationally
spend to stop you, and soon there will be collateral damage too
increasing the amount third-parties are willing to sacrifice to stop
you. You can't win.

Of course, this does mean that even unsuccesful sacrifices need to be
costly. You can make this acceptable to users by allowing a sacrifice to
be reused, but only for the exact same transaction it was originally
committed to.

Sacrifices in this manner are *not* proof of stake. You really are
giving up something by publishing the information that proves you made
the sacrifice as that information can always be included in the
consensus thereby taking away a limited resource. (your zerocoins) It's
more heavily dependent on jam-free networks, and doesn't play nice with
SPV, but zero-knowledge proofs will may help the latter. (you've got
Bitcoin itself to act as a random beacon remember)

Speaking of, another similar approach is to take advantage of how a
Bitcoin sacrifice can be made publicly visible. Create a txout of some
value like the following:

    OP_RETURN <prev-ztc-blockhash> <blockhash> <ztc-created>

Now even if you fail to publish your blocks, at least the whole world
knows how much they need to outspend to be sure you can't 51% attack the
network. This approach and not-btc sacrifices can go hand in hand too,
especially if nodes follow rules where they consider btc txout
sacrifices as "fixed" and only subject to change by the bitcoin
blockchain re-organizing. Advantages and disadvantages to both
approaches. (remember that visible tx's can be censored by miners)

Sacrifice to mining fees may be acceptable in the future too, but only
if OP_DEPTH is implemented so as to not give Bitcoin miners bad
incentives. (the sacrificed coins should go to fees *months* or even
*years* after they have been sacrificed)

Turning zerocoins back into Bitcoins is just supply and demand: sell
them. You'll always lose a bit given by definition the maximum exchange
rate is 1:1, but anonymity may be worth it. Others have written about
cross-chain trading protocols, and I'll point out they are easier to
implement if one chain has full visibility into what's happening on the
other; zerocoin is most likely to be implemented as an extension to the
bitcoin client itself.

Finally if the transaction rate is too slow there's nothing wrong with
running multiple parallel zerocoin blockchains, although given the
usecase of moving your funds through zerocoin for anonymity, and using
the clean coins that come out the other side, there's no reason to think
the zerocoin chain transaction rate needs to be especially high anyway.

-- 
'peter'[:-1]@petertodd.org
0000000000000013b2f7ee77027f583b765ad9811dfe3d0adc801e295fd9acdf
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 198 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130712/5150507e/attachment.sig>

From rmeijer at xs4all.nl  Fri Jul 12 14:28:24 2013
From: rmeijer at xs4all.nl (Rob Meijer)
Date: Fri, 12 Jul 2013 16:28:24 +0200
Subject: [Bitcoin-development] Review for slides for "defeating trojans" talk
Message-ID: <604065f299f2f3ef79747f969475042c.squirrel@webmail.xs4all.nl>

Completed the first draft of my slides+speaker-notes for my upcoming
"Defeating Trojans" talk at the OHM2013. BitCoin is one of the main
examples I use in this talk to emphasize the need for programs like
BitCoin to have
their own private storage apart from $HOME.

To make sure I don't misrepresent BitCoin, could anyone here help me out
by reviewing my slides,  please let me know and I'll e-mail my (open
office) slides to you for review.

Tnx,

Rob




From gmaxwell at gmail.com  Fri Jul 12 14:31:43 2013
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Fri, 12 Jul 2013 07:31:43 -0700
Subject: [Bitcoin-development] Review for slides for "defeating trojans"
	talk
In-Reply-To: <604065f299f2f3ef79747f969475042c.squirrel@webmail.xs4all.nl>
References: <604065f299f2f3ef79747f969475042c.squirrel@webmail.xs4all.nl>
Message-ID: <CAAS2fgQe4wO5J=4r3Lc-JsXJrQmaUqnD59=5eKorbZ+EMuXT-A@mail.gmail.com>

On Fri, Jul 12, 2013 at 7:28 AM, Rob Meijer <rmeijer at xs4all.nl> wrote:
> Completed the first draft of my slides+speaker-notes for my upcoming
> "Defeating Trojans" talk at the OHM2013. BitCoin is one of the main
> examples I use in this talk to emphasize the need for programs like
> BitCoin to have
> their own private storage apart from $HOME.
>
> To make sure I don't misrepresent BitCoin, could anyone here help me out
> by reviewing my slides,  please let me know and I'll e-mail my (open
> office) slides to you for review.

I'm game.



From mats at henricson.se  Fri Jul 12 16:46:00 2013
From: mats at henricson.se (Mats Henricson)
Date: Fri, 12 Jul 2013 22:16:00 +0530
Subject: [Bitcoin-development] Review for slides for "defeating trojans"
 talk
Message-ID: <yibrymtp4t53edwkfxhd8xem.1373647560916@email.android.com>

This is way off the point, but please write Bitcoin, not BitCoin.

Mats


Rob Meijer <rmeijer at xs4all.nl> wrote:

>Completed the first draft of my slides+speaker-notes for my upcoming
>"Defeating Trojans" talk at the OHM2013. BitCoin is one of the main
>examples I use in this talk to emphasize the need for programs like
>BitCoin to have
>their own private storage apart from $HOME.
>
>To make sure I don't misrepresent BitCoin, could anyone here help me out
>by reviewing my slides,  please let me know and I'll e-mail my (open
>office) slides to you for review.
>
>Tnx,
>
>Rob
>
>
>------------------------------------------------------------------------------
>See everything from the browser to the database with AppDynamics
>Get end-to-end visibility with application monitoring from AppDynamics
>Isolate bottlenecks and diagnose root cause in seconds.
>Start your free trial of AppDynamics Pro today!
>http://pubads.g.doubleclick.net/gampad/clk?id=48808831&iu=/4140/ostg.clktrk
>_______________________________________________
>Bitcoin-development mailing list
>Bitcoin-development at lists.sourceforge.net
>https://lists.sourceforge.net/lists/listinfo/bitcoin-development

From jtimon at monetize.io  Sat Jul 13 09:51:14 2013
From: jtimon at monetize.io (=?ISO-8859-1?Q?Jorge_Tim=F3n?=)
Date: Sat, 13 Jul 2013 11:51:14 +0200
Subject: [Bitcoin-development] libzerocoin released,
 what about a zerocoin-only alt-coin with either-or mining
In-Reply-To: <20130712131815.GA18716@petertodd.org>
References: <20130705140140.GA23949@netbook.cypherspace.org>
	<20130712131815.GA18716@petertodd.org>
Message-ID: <CAC1+kJOerE75+rtMHiy27aDLwWC9juAYva4u_iMVihnePTOYig@mail.gmail.com>

I'm not sure I understand the whole proposal, but it seems to me that
having different characteristics, bitcoins and zerocoins would be
different currencies.
I don't see the need to peg zerocoins to bitcoins.
It is great to have an anonymous p2p currency, maybe some bitcoin
users that use bitcoin because of the transparency they allow (public
funds expenditures could be more transparent than they have ever been)
don't like this hard-fork. Well, maybe this is not the main reason,
but I think this could be highly controversial.
Maybe everybody likes it, but can you expand more on the
justifications to peg the two currencies?
If you're requiring one chain look at the othe for validations (miners
will have to validate both to mine btc) you don't need the cross-chain
contract, you can do it better.

Instead of doing this:

https://en.bitcoin.it/wiki/Contracts#Example_5:_Trading_across_chains

You could do something like this:

https://bitcointalk.org/index.php?topic=31643.0

This very idea has been proposed recently by othe people, but I can't
find where.

The problem with this is of course scalabilty. Once you do it for what
chain, why not the others?
You can't validate 100 chains to mine bitcoin even if they're all
merged mined: that's asking miners too much.
If zerocoin enjoys this privilege why not, for example?

As some of you may know, Mark Friedenbach and I are working on a
protocol modification to support issuance of arbitrary assets. Would
be something like colored coins but better, we're calling it
FreiMarkets. Of course these assets are not p2p like bitcoin or
freicoin themselves: they have a centralized issuer.
But if you allowed to sacrifice real bitcoins (as opposed to IOUs
denominated in BTC like you have, for example, in ripple) so they
appear in Freicoin's chain and turn them back, you could have p2p
bitcoins inside Freicoin's chain.
Maybe ripplers want that too. If FreiMarkets prove to work well on
freicoin and be scalable enough, maybe a lot of scamcoins apply the
hardfork too and they want to have p2p btc in their chain as well.

Maybe I could have explained this without even mentioning FreiMarkets,
but my point is that you're asking for a lot like it was nothing.
Zerocoin-bitcoin fungibility hardfork is opening a little pandora's
box. Are we ready?

I was waiting for others to comment and I'm surprised that no one else
has made any objection yet. But if no one's going to point out the
controvery that is so obvious to me, I feel almost like a
responsability to act like a Devil's advocate here.
So if you make bitcoin and zerocoin fungible, I want bitcoins to be
transferrable to freicoin's chain. And I warn you there will be many
more people asking for the same thing on other chains. What criteria
will we have to say yes or no?
More



On 7/12/13, Peter Todd <pete at petertodd.org> wrote:
> On Fri, Jul 05, 2013 at 04:01:40PM +0200, Adam Back wrote:
>> Do people think that should work?  It seems to me it should with minimal,
>> bitcoin changes.  I think the rule for either-or mining should be as
>> simple
>> as skipping the value / double-spend validation of the blocks that are
>> zerocoin mining blocks.  Obviously zerocoin blocks can themselves end up
>> on
>> forks, that get resolved, but that fork resolution can perhaps be shared?
>>
>> (Because the fork resolution is simply to accept the longest fork).
>
> Yeah, there's been a lot of doom and gloom about zerocoin that is
> frankly unwarrented. For instance people seem to think it's impossible
> to make a blockchain with zerocoin due to the long time it takes to
> verify transactions, about 1.5 seconds, and never realize that
> verification can be parallelized.
>
> Anyway the way to do it is to get out of the model of large blocks and
> think about individual transactions. Make each transaction into its own
> block, and have each transaction refer to the previous one in history.
> (zerocoin is inherently linear due to the anonymity)
>
> Verification does *not* need to be done by every node on every
> transaction. Make the act of creating a transaction cost something and
> include the previous state of the accumulator as part of a transaction.
> Participants verify some subset of all transactions, and should they
> find fraud they broadcast a proof. Optionally, but highly recomended,
> make it profitable to find fraud, being careful to ensure that it's
> never profitable to create fraud then find it yourself.
>
> Anyway Bitcoin is limited to 7tx/s average so even without probabalistic
> verification it'd be perfectly acceptable to just limit transactions to
> one every few seconds provided you keep your "blocksize" down to one
> transaction so the rate isn't bursty. You're going to want to be
> cautious about bandwidth requirements anyway to make sure participants
> can stay anonymous.
>
> As you suggest creating zerocoins from provably sacrificing bitcoins is
> the correct approach. The consensus algorithm should be that you
> sacrifice zerocoins (specifically fractions there-of - note how I'm
> assuming support for non-single-zerocoin amounts) and whatever chain has
> the highest total sacrifice wins. One way to think about
> proof-of-sacrifice is it's really proof-of-work, transferred. It also
> has the *big* advantage that to double-spend, or for that matter 51% the
> chain, you have to outspend everyone with a stake in the viability of
> the blockchain: they can sacrifice their zerocoins to combat you. In the
> case of a double-spend to rip off an online merchant the total amount
> you could profit is the same as the total amount they would rationally
> spend to stop you, and soon there will be collateral damage too
> increasing the amount third-parties are willing to sacrifice to stop
> you. You can't win.
>
> Of course, this does mean that even unsuccesful sacrifices need to be
> costly. You can make this acceptable to users by allowing a sacrifice to
> be reused, but only for the exact same transaction it was originally
> committed to.
>
> Sacrifices in this manner are *not* proof of stake. You really are
> giving up something by publishing the information that proves you made
> the sacrifice as that information can always be included in the
> consensus thereby taking away a limited resource. (your zerocoins) It's
> more heavily dependent on jam-free networks, and doesn't play nice with
> SPV, but zero-knowledge proofs will may help the latter. (you've got
> Bitcoin itself to act as a random beacon remember)
>
> Speaking of, another similar approach is to take advantage of how a
> Bitcoin sacrifice can be made publicly visible. Create a txout of some
> value like the following:
>
>     OP_RETURN <prev-ztc-blockhash> <blockhash> <ztc-created>
>
> Now even if you fail to publish your blocks, at least the whole world
> knows how much they need to outspend to be sure you can't 51% attack the
> network. This approach and not-btc sacrifices can go hand in hand too,
> especially if nodes follow rules where they consider btc txout
> sacrifices as "fixed" and only subject to change by the bitcoin
> blockchain re-organizing. Advantages and disadvantages to both
> approaches. (remember that visible tx's can be censored by miners)
>
> Sacrifice to mining fees may be acceptable in the future too, but only
> if OP_DEPTH is implemented so as to not give Bitcoin miners bad
> incentives. (the sacrificed coins should go to fees *months* or even
> *years* after they have been sacrificed)
>
> Turning zerocoins back into Bitcoins is just supply and demand: sell
> them. You'll always lose a bit given by definition the maximum exchange
> rate is 1:1, but anonymity may be worth it. Others have written about
> cross-chain trading protocols, and I'll point out they are easier to
> implement if one chain has full visibility into what's happening on the
> other; zerocoin is most likely to be implemented as an extension to the
> bitcoin client itself.
>
> Finally if the transaction rate is too slow there's nothing wrong with
> running multiple parallel zerocoin blockchains, although given the
> usecase of moving your funds through zerocoin for anonymity, and using
> the clean coins that come out the other side, there's no reason to think
> the zerocoin chain transaction rate needs to be especially high anyway.
>
> --
> 'peter'[:-1]@petertodd.org
> 0000000000000013b2f7ee77027f583b765ad9811dfe3d0adc801e295fd9acdf
>


-- 
Jorge Tim?n

http://freico.in/



From jtimon at monetize.io  Sat Jul 13 09:53:44 2013
From: jtimon at monetize.io (=?ISO-8859-1?Q?Jorge_Tim=F3n?=)
Date: Sat, 13 Jul 2013 11:53:44 +0200
Subject: [Bitcoin-development] libzerocoin released,
 what about a zerocoin-only alt-coin with either-or mining
In-Reply-To: <CAC1+kJOerE75+rtMHiy27aDLwWC9juAYva4u_iMVihnePTOYig@mail.gmail.com>
References: <20130705140140.GA23949@netbook.cypherspace.org>
	<20130712131815.GA18716@petertodd.org>
	<CAC1+kJOerE75+rtMHiy27aDLwWC9juAYva4u_iMVihnePTOYig@mail.gmail.com>
Message-ID: <CAC1+kJN9G_OcX8+Vr6gLgM+KRNDzYtijjWxwmcA=yrKhU_fWkQ@mail.gmail.com>

Sorry about that.
Maybe more important, what's wrong with bitcoin and zerocoin being
different currencies with an exchange rate completely decided by the
market instead of trying to force 1:1 ???


On 7/13/13, Jorge Tim?n <jtimon at monetize.io> wrote:
> I'm not sure I understand the whole proposal, but it seems to me that
> having different characteristics, bitcoins and zerocoins would be
> different currencies.
> I don't see the need to peg zerocoins to bitcoins.
> It is great to have an anonymous p2p currency, maybe some bitcoin
> users that use bitcoin because of the transparency they allow (public
> funds expenditures could be more transparent than they have ever been)
> don't like this hard-fork. Well, maybe this is not the main reason,
> but I think this could be highly controversial.
> Maybe everybody likes it, but can you expand more on the
> justifications to peg the two currencies?
> If you're requiring one chain look at the othe for validations (miners
> will have to validate both to mine btc) you don't need the cross-chain
> contract, you can do it better.
>
> Instead of doing this:
>
> https://en.bitcoin.it/wiki/Contracts#Example_5:_Trading_across_chains
>
> You could do something like this:
>
> https://bitcointalk.org/index.php?topic=31643.0
>
> This very idea has been proposed recently by othe people, but I can't
> find where.
>
> The problem with this is of course scalabilty. Once you do it for what
> chain, why not the others?
> You can't validate 100 chains to mine bitcoin even if they're all
> merged mined: that's asking miners too much.
> If zerocoin enjoys this privilege why not, for example?
>
> As some of you may know, Mark Friedenbach and I are working on a
> protocol modification to support issuance of arbitrary assets. Would
> be something like colored coins but better, we're calling it
> FreiMarkets. Of course these assets are not p2p like bitcoin or
> freicoin themselves: they have a centralized issuer.
> But if you allowed to sacrifice real bitcoins (as opposed to IOUs
> denominated in BTC like you have, for example, in ripple) so they
> appear in Freicoin's chain and turn them back, you could have p2p
> bitcoins inside Freicoin's chain.
> Maybe ripplers want that too. If FreiMarkets prove to work well on
> freicoin and be scalable enough, maybe a lot of scamcoins apply the
> hardfork too and they want to have p2p btc in their chain as well.
>
> Maybe I could have explained this without even mentioning FreiMarkets,
> but my point is that you're asking for a lot like it was nothing.
> Zerocoin-bitcoin fungibility hardfork is opening a little pandora's
> box. Are we ready?
>
> I was waiting for others to comment and I'm surprised that no one else
> has made any objection yet. But if no one's going to point out the
> controvery that is so obvious to me, I feel almost like a
> responsability to act like a Devil's advocate here.
> So if you make bitcoin and zerocoin fungible, I want bitcoins to be
> transferrable to freicoin's chain. And I warn you there will be many
> more people asking for the same thing on other chains. What criteria
> will we have to say yes or no?
> More
>
>
>
> On 7/12/13, Peter Todd <pete at petertodd.org> wrote:
>> On Fri, Jul 05, 2013 at 04:01:40PM +0200, Adam Back wrote:
>>> Do people think that should work?  It seems to me it should with
>>> minimal,
>>> bitcoin changes.  I think the rule for either-or mining should be as
>>> simple
>>> as skipping the value / double-spend validation of the blocks that are
>>> zerocoin mining blocks.  Obviously zerocoin blocks can themselves end up
>>> on
>>> forks, that get resolved, but that fork resolution can perhaps be
>>> shared?
>>>
>>> (Because the fork resolution is simply to accept the longest fork).
>>
>> Yeah, there's been a lot of doom and gloom about zerocoin that is
>> frankly unwarrented. For instance people seem to think it's impossible
>> to make a blockchain with zerocoin due to the long time it takes to
>> verify transactions, about 1.5 seconds, and never realize that
>> verification can be parallelized.
>>
>> Anyway the way to do it is to get out of the model of large blocks and
>> think about individual transactions. Make each transaction into its own
>> block, and have each transaction refer to the previous one in history.
>> (zerocoin is inherently linear due to the anonymity)
>>
>> Verification does *not* need to be done by every node on every
>> transaction. Make the act of creating a transaction cost something and
>> include the previous state of the accumulator as part of a transaction.
>> Participants verify some subset of all transactions, and should they
>> find fraud they broadcast a proof. Optionally, but highly recomended,
>> make it profitable to find fraud, being careful to ensure that it's
>> never profitable to create fraud then find it yourself.
>>
>> Anyway Bitcoin is limited to 7tx/s average so even without probabalistic
>> verification it'd be perfectly acceptable to just limit transactions to
>> one every few seconds provided you keep your "blocksize" down to one
>> transaction so the rate isn't bursty. You're going to want to be
>> cautious about bandwidth requirements anyway to make sure participants
>> can stay anonymous.
>>
>> As you suggest creating zerocoins from provably sacrificing bitcoins is
>> the correct approach. The consensus algorithm should be that you
>> sacrifice zerocoins (specifically fractions there-of - note how I'm
>> assuming support for non-single-zerocoin amounts) and whatever chain has
>> the highest total sacrifice wins. One way to think about
>> proof-of-sacrifice is it's really proof-of-work, transferred. It also
>> has the *big* advantage that to double-spend, or for that matter 51% the
>> chain, you have to outspend everyone with a stake in the viability of
>> the blockchain: they can sacrifice their zerocoins to combat you. In the
>> case of a double-spend to rip off an online merchant the total amount
>> you could profit is the same as the total amount they would rationally
>> spend to stop you, and soon there will be collateral damage too
>> increasing the amount third-parties are willing to sacrifice to stop
>> you. You can't win.
>>
>> Of course, this does mean that even unsuccesful sacrifices need to be
>> costly. You can make this acceptable to users by allowing a sacrifice to
>> be reused, but only for the exact same transaction it was originally
>> committed to.
>>
>> Sacrifices in this manner are *not* proof of stake. You really are
>> giving up something by publishing the information that proves you made
>> the sacrifice as that information can always be included in the
>> consensus thereby taking away a limited resource. (your zerocoins) It's
>> more heavily dependent on jam-free networks, and doesn't play nice with
>> SPV, but zero-knowledge proofs will may help the latter. (you've got
>> Bitcoin itself to act as a random beacon remember)
>>
>> Speaking of, another similar approach is to take advantage of how a
>> Bitcoin sacrifice can be made publicly visible. Create a txout of some
>> value like the following:
>>
>>     OP_RETURN <prev-ztc-blockhash> <blockhash> <ztc-created>
>>
>> Now even if you fail to publish your blocks, at least the whole world
>> knows how much they need to outspend to be sure you can't 51% attack the
>> network. This approach and not-btc sacrifices can go hand in hand too,
>> especially if nodes follow rules where they consider btc txout
>> sacrifices as "fixed" and only subject to change by the bitcoin
>> blockchain re-organizing. Advantages and disadvantages to both
>> approaches. (remember that visible tx's can be censored by miners)
>>
>> Sacrifice to mining fees may be acceptable in the future too, but only
>> if OP_DEPTH is implemented so as to not give Bitcoin miners bad
>> incentives. (the sacrificed coins should go to fees *months* or even
>> *years* after they have been sacrificed)
>>
>> Turning zerocoins back into Bitcoins is just supply and demand: sell
>> them. You'll always lose a bit given by definition the maximum exchange
>> rate is 1:1, but anonymity may be worth it. Others have written about
>> cross-chain trading protocols, and I'll point out they are easier to
>> implement if one chain has full visibility into what's happening on the
>> other; zerocoin is most likely to be implemented as an extension to the
>> bitcoin client itself.
>>
>> Finally if the transaction rate is too slow there's nothing wrong with
>> running multiple parallel zerocoin blockchains, although given the
>> usecase of moving your funds through zerocoin for anonymity, and using
>> the clean coins that come out the other side, there's no reason to think
>> the zerocoin chain transaction rate needs to be especially high anyway.
>>
>> --
>> 'peter'[:-1]@petertodd.org
>> 0000000000000013b2f7ee77027f583b765ad9811dfe3d0adc801e295fd9acdf
>>
>
>
> --
> Jorge Tim?n
>
> http://freico.in/
>


-- 
Jorge Tim?n

http://freico.in/



From adam at cypherspace.org  Sat Jul 13 18:42:27 2013
From: adam at cypherspace.org (Adam Back)
Date: Sat, 13 Jul 2013 20:42:27 +0200
Subject: [Bitcoin-development] libzerocoin released,
 what about a zerocoin-only alt-coin with either-or mining
In-Reply-To: <CAC1+kJOerE75+rtMHiy27aDLwWC9juAYva4u_iMVihnePTOYig@mail.gmail.com>
References: <20130705140140.GA23949@netbook.cypherspace.org>
	<20130712131815.GA18716@petertodd.org>
	<CAC1+kJOerE75+rtMHiy27aDLwWC9juAYva4u_iMVihnePTOYig@mail.gmail.com>
Message-ID: <20130713184227.GA5902@netbook.cypherspace.org>

On Sat, Jul 13, 2013 at 11:51:14AM +0200, Jorge Tim?n wrote:
>I don't see the need to peg zerocoins to bitcoins.

Without a bitcoin peg on the creation cost of zerocoins, it is hard for a
new alt-coin to have a stable value.  Bitcoin itself is volatile enough.

Generally the available compute for mining is what it is, adding more
alt-coins just dillutes the compute available for a given coin.  (Modulo
different mining functions like scrypt vs hashcash there is some
non-overlapping available compute because different hardware is more
efficient, or even cost-effective at all).

Merge mining is less desirable for the alt-coin - its mining is essentially
free, on top of bitcoin mining.  Cost free is maybe a weaker starting point
bootstrapping digital scarcity based market price.

I think that serves to explain why bitcoin sacrifice as a mining method is a
simple and stable cost starting point for an alt-coin.  

>I think this could be highly controversial [alt-coin pegging].  Maybe
>everybody likes it, but can you expand more on the justifications to peg
>the two currencies?

Bitcoin sacrifice related applications do not require code changes to
bitcoin itself, which avoids the discussion about fairness of which alt-coin
is supported, and about sacrifice-based pegging being added or not.

I dont think it necessarily hurts investors in bitcoins as it just creates
some deflation in the supply of bitcoin.

>If you're requiring one chain look at the othe for validations (miners
>will have to validate both to mine btc) you don't need the cross-chain
>contract, you can do it better.

You can sacrifice bitcoins as a way to mine zerocoins without having the
bitcoin network validate zerocoin.  For all bitcoin clients care the
sacrifice could be useless.

Bi-directional sacrifice is more tricky.  ie being allowed to re-create
previously destroyed bitcoins, based on the sacrifice of zerocoin.  That
would have other coin validation requirements.

But I am not sure 1:1 is necessarily far from the right price - the price is
arbitrary for a divisible token, so 1:1 is as good as any.  And the price
equality depends on the extra functionality or value from the
characteristics of the other coin.  The only thing I can see is zerocoin is
more cpu expensive to validate, the coins are bigger, but provide more
payment privacy (and so less taint).  Removing taint may mean that zercoins
should be worth more.  However if any tainted bitcoins can be converted to
zerocoin via sacrifice at 1:1, maybe the taint issue goes away - any coins
that are tainted to the point of value-loss will be converted to zerocoin,
and consequently the price to convert back should also be 1:1?

>You could do something like this:
>
>https://bitcointalk.org/index.php?topic=31643.0

p2p transfer is a good idea.

Adam



From peter at coinlab.com  Sat Jul 13 18:32:39 2013
From: peter at coinlab.com (Peter Vessenes)
Date: Sat, 13 Jul 2013 11:32:39 -0700
Subject: [Bitcoin-development] libzerocoin released,
 what about a zerocoin-only alt-coin with either-or mining
In-Reply-To: <CAC1+kJN9G_OcX8+Vr6gLgM+KRNDzYtijjWxwmcA=yrKhU_fWkQ@mail.gmail.com>
References: <20130705140140.GA23949@netbook.cypherspace.org>
	<20130712131815.GA18716@petertodd.org>
	<CAC1+kJOerE75+rtMHiy27aDLwWC9juAYva4u_iMVihnePTOYig@mail.gmail.com>
	<CAC1+kJN9G_OcX8+Vr6gLgM+KRNDzYtijjWxwmcA=yrKhU_fWkQ@mail.gmail.com>
Message-ID: <CAMGNxUtnYy0qtdRw3Pz2xV9xztEg317MRs0_mNMEWGE5oAxnig@mail.gmail.com>

One very real issue for alt-currencies that don't peg to Bitcoin is that
market liquidity is a bitch. By almost all standards current global Bitcoin
liquidity is already very, very low. Too low for many transactions that
come across my desk at least.

There are a lot of reasons for that low liquidity, but to try and float a
new pair for which the likely initial counter-asset is going to be Bitcoin
means minuscule liquidity.

Peter



On Sat, Jul 13, 2013 at 2:53 AM, Jorge Tim?n <jtimon at monetize.io> wrote:

> Sorry about that.
> Maybe more important, what's wrong with bitcoin and zerocoin being
> different currencies with an exchange rate completely decided by the
> market instead of trying to force 1:1 ???
>
>
> On 7/13/13, Jorge Tim?n <jtimon at monetize.io> wrote:
> > I'm not sure I understand the whole proposal, but it seems to me that
> > having different characteristics, bitcoins and zerocoins would be
> > different currencies.
> > I don't see the need to peg zerocoins to bitcoins.
> > It is great to have an anonymous p2p currency, maybe some bitcoin
> > users that use bitcoin because of the transparency they allow (public
> > funds expenditures could be more transparent than they have ever been)
> > don't like this hard-fork. Well, maybe this is not the main reason,
> > but I think this could be highly controversial.
> > Maybe everybody likes it, but can you expand more on the
> > justifications to peg the two currencies?
> > If you're requiring one chain look at the othe for validations (miners
> > will have to validate both to mine btc) you don't need the cross-chain
> > contract, you can do it better.
> >
> > Instead of doing this:
> >
> > https://en.bitcoin.it/wiki/Contracts#Example_5:_Trading_across_chains
> >
> > You could do something like this:
> >
> > https://bitcointalk.org/index.php?topic=31643.0
> >
> > This very idea has been proposed recently by othe people, but I can't
> > find where.
> >
> > The problem with this is of course scalabilty. Once you do it for what
> > chain, why not the others?
> > You can't validate 100 chains to mine bitcoin even if they're all
> > merged mined: that's asking miners too much.
> > If zerocoin enjoys this privilege why not, for example?
> >
> > As some of you may know, Mark Friedenbach and I are working on a
> > protocol modification to support issuance of arbitrary assets. Would
> > be something like colored coins but better, we're calling it
> > FreiMarkets. Of course these assets are not p2p like bitcoin or
> > freicoin themselves: they have a centralized issuer.
> > But if you allowed to sacrifice real bitcoins (as opposed to IOUs
> > denominated in BTC like you have, for example, in ripple) so they
> > appear in Freicoin's chain and turn them back, you could have p2p
> > bitcoins inside Freicoin's chain.
> > Maybe ripplers want that too. If FreiMarkets prove to work well on
> > freicoin and be scalable enough, maybe a lot of scamcoins apply the
> > hardfork too and they want to have p2p btc in their chain as well.
> >
> > Maybe I could have explained this without even mentioning FreiMarkets,
> > but my point is that you're asking for a lot like it was nothing.
> > Zerocoin-bitcoin fungibility hardfork is opening a little pandora's
> > box. Are we ready?
> >
> > I was waiting for others to comment and I'm surprised that no one else
> > has made any objection yet. But if no one's going to point out the
> > controvery that is so obvious to me, I feel almost like a
> > responsability to act like a Devil's advocate here.
> > So if you make bitcoin and zerocoin fungible, I want bitcoins to be
> > transferrable to freicoin's chain. And I warn you there will be many
> > more people asking for the same thing on other chains. What criteria
> > will we have to say yes or no?
> > More
> >
> >
> >
> > On 7/12/13, Peter Todd <pete at petertodd.org> wrote:
> >> On Fri, Jul 05, 2013 at 04:01:40PM +0200, Adam Back wrote:
> >>> Do people think that should work?  It seems to me it should with
> >>> minimal,
> >>> bitcoin changes.  I think the rule for either-or mining should be as
> >>> simple
> >>> as skipping the value / double-spend validation of the blocks that are
> >>> zerocoin mining blocks.  Obviously zerocoin blocks can themselves end
> up
> >>> on
> >>> forks, that get resolved, but that fork resolution can perhaps be
> >>> shared?
> >>>
> >>> (Because the fork resolution is simply to accept the longest fork).
> >>
> >> Yeah, there's been a lot of doom and gloom about zerocoin that is
> >> frankly unwarrented. For instance people seem to think it's impossible
> >> to make a blockchain with zerocoin due to the long time it takes to
> >> verify transactions, about 1.5 seconds, and never realize that
> >> verification can be parallelized.
> >>
> >> Anyway the way to do it is to get out of the model of large blocks and
> >> think about individual transactions. Make each transaction into its own
> >> block, and have each transaction refer to the previous one in history.
> >> (zerocoin is inherently linear due to the anonymity)
> >>
> >> Verification does *not* need to be done by every node on every
> >> transaction. Make the act of creating a transaction cost something and
> >> include the previous state of the accumulator as part of a transaction.
> >> Participants verify some subset of all transactions, and should they
> >> find fraud they broadcast a proof. Optionally, but highly recomended,
> >> make it profitable to find fraud, being careful to ensure that it's
> >> never profitable to create fraud then find it yourself.
> >>
> >> Anyway Bitcoin is limited to 7tx/s average so even without probabalistic
> >> verification it'd be perfectly acceptable to just limit transactions to
> >> one every few seconds provided you keep your "blocksize" down to one
> >> transaction so the rate isn't bursty. You're going to want to be
> >> cautious about bandwidth requirements anyway to make sure participants
> >> can stay anonymous.
> >>
> >> As you suggest creating zerocoins from provably sacrificing bitcoins is
> >> the correct approach. The consensus algorithm should be that you
> >> sacrifice zerocoins (specifically fractions there-of - note how I'm
> >> assuming support for non-single-zerocoin amounts) and whatever chain has
> >> the highest total sacrifice wins. One way to think about
> >> proof-of-sacrifice is it's really proof-of-work, transferred. It also
> >> has the *big* advantage that to double-spend, or for that matter 51% the
> >> chain, you have to outspend everyone with a stake in the viability of
> >> the blockchain: they can sacrifice their zerocoins to combat you. In the
> >> case of a double-spend to rip off an online merchant the total amount
> >> you could profit is the same as the total amount they would rationally
> >> spend to stop you, and soon there will be collateral damage too
> >> increasing the amount third-parties are willing to sacrifice to stop
> >> you. You can't win.
> >>
> >> Of course, this does mean that even unsuccesful sacrifices need to be
> >> costly. You can make this acceptable to users by allowing a sacrifice to
> >> be reused, but only for the exact same transaction it was originally
> >> committed to.
> >>
> >> Sacrifices in this manner are *not* proof of stake. You really are
> >> giving up something by publishing the information that proves you made
> >> the sacrifice as that information can always be included in the
> >> consensus thereby taking away a limited resource. (your zerocoins) It's
> >> more heavily dependent on jam-free networks, and doesn't play nice with
> >> SPV, but zero-knowledge proofs will may help the latter. (you've got
> >> Bitcoin itself to act as a random beacon remember)
> >>
> >> Speaking of, another similar approach is to take advantage of how a
> >> Bitcoin sacrifice can be made publicly visible. Create a txout of some
> >> value like the following:
> >>
> >>     OP_RETURN <prev-ztc-blockhash> <blockhash> <ztc-created>
> >>
> >> Now even if you fail to publish your blocks, at least the whole world
> >> knows how much they need to outspend to be sure you can't 51% attack the
> >> network. This approach and not-btc sacrifices can go hand in hand too,
> >> especially if nodes follow rules where they consider btc txout
> >> sacrifices as "fixed" and only subject to change by the bitcoin
> >> blockchain re-organizing. Advantages and disadvantages to both
> >> approaches. (remember that visible tx's can be censored by miners)
> >>
> >> Sacrifice to mining fees may be acceptable in the future too, but only
> >> if OP_DEPTH is implemented so as to not give Bitcoin miners bad
> >> incentives. (the sacrificed coins should go to fees *months* or even
> >> *years* after they have been sacrificed)
> >>
> >> Turning zerocoins back into Bitcoins is just supply and demand: sell
> >> them. You'll always lose a bit given by definition the maximum exchange
> >> rate is 1:1, but anonymity may be worth it. Others have written about
> >> cross-chain trading protocols, and I'll point out they are easier to
> >> implement if one chain has full visibility into what's happening on the
> >> other; zerocoin is most likely to be implemented as an extension to the
> >> bitcoin client itself.
> >>
> >> Finally if the transaction rate is too slow there's nothing wrong with
> >> running multiple parallel zerocoin blockchains, although given the
> >> usecase of moving your funds through zerocoin for anonymity, and using
> >> the clean coins that come out the other side, there's no reason to think
> >> the zerocoin chain transaction rate needs to be especially high anyway.
> >>
> >> --
> >> 'peter'[:-1]@petertodd.org
> >> 0000000000000013b2f7ee77027f583b765ad9811dfe3d0adc801e295fd9acdf
> >>
> >
> >
> > --
> > Jorge Tim?n
> >
> > http://freico.in/
> >
>
>
> --
> Jorge Tim?n
>
> http://freico.in/
>
>
> ------------------------------------------------------------------------------
> See everything from the browser to the database with AppDynamics
> Get end-to-end visibility with application monitoring from AppDynamics
> Isolate bottlenecks and diagnose root cause in seconds.
> Start your free trial of AppDynamics Pro today!
> http://pubads.g.doubleclick.net/gampad/clk?id=48808831&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>



-- 

------------------------------

[image: CoinLab Logo]PETER VESSENES
CEO

*peter at coinlab.com * /  206.486.6856  / SKYPE: vessenes
900 Winslow Way East / SUITE 100  /  Bainbridge Island, WA 98110
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130713/8d91701d/attachment.html>

From jtimon at monetize.io  Sun Jul 14 11:18:37 2013
From: jtimon at monetize.io (=?ISO-8859-1?Q?Jorge_Tim=F3n?=)
Date: Sun, 14 Jul 2013 13:18:37 +0200
Subject: [Bitcoin-development] libzerocoin released,
 what about a zerocoin-only alt-coin with either-or mining
In-Reply-To: <20130713184227.GA5902@netbook.cypherspace.org>
References: <20130705140140.GA23949@netbook.cypherspace.org>
	<20130712131815.GA18716@petertodd.org>
	<CAC1+kJOerE75+rtMHiy27aDLwWC9juAYva4u_iMVihnePTOYig@mail.gmail.com>
	<20130713184227.GA5902@netbook.cypherspace.org>
Message-ID: <CAC1+kJMyvKnUKm8xTjzUK_5iq_VZM=iX17aCCd9vqe7jsYUJfQ@mail.gmail.com>

I was talking about bi-directional sacrifice.
If zerocoin has it, I want the same on top of freicoin so that btc/frc
can be traded p2p.
Why zerocoin and not the 20 other altchains are going to ask for it?
Ripplers will want it too, why not?

All the arguments in favor of this pegging use zerocoin's point of
view. Sure it would be much better for it, but are additional costs to
the bitcoin network and you cannot do it with every chain.

Merged mining is not mining the coin for free. The total reward (ie
btc + frc + nmc + dvc) should tend to equal the mining costs. But the
value comes from demand, not costs. So if people demand it more it
price will rise no matter how is mined. And if the price rises it will
make sense to spend more on mining.
"Bitcoins are worth because it costs to mine them" is a Marxian labor
thory of value argument.
It's the other way arround as Menger taught us.


On 7/13/13, Adam Back <adam at cypherspace.org> wrote:
> On Sat, Jul 13, 2013 at 11:51:14AM +0200, Jorge Tim?n wrote:
>>I don't see the need to peg zerocoins to bitcoins.
>
> Without a bitcoin peg on the creation cost of zerocoins, it is hard for a
> new alt-coin to have a stable value.  Bitcoin itself is volatile enough.
>
> Generally the available compute for mining is what it is, adding more
> alt-coins just dillutes the compute available for a given coin.  (Modulo
> different mining functions like scrypt vs hashcash there is some
> non-overlapping available compute because different hardware is more
> efficient, or even cost-effective at all).
>
> Merge mining is less desirable for the alt-coin - its mining is essentially
> free, on top of bitcoin mining.  Cost free is maybe a weaker starting point
> bootstrapping digital scarcity based market price.
>
> I think that serves to explain why bitcoin sacrifice as a mining method is
> a
> simple and stable cost starting point for an alt-coin.
>
>>I think this could be highly controversial [alt-coin pegging].  Maybe
>>everybody likes it, but can you expand more on the justifications to peg
>>the two currencies?
>
> Bitcoin sacrifice related applications do not require code changes to
> bitcoin itself, which avoids the discussion about fairness of which
> alt-coin
> is supported, and about sacrifice-based pegging being added or not.
>
> I dont think it necessarily hurts investors in bitcoins as it just creates
> some deflation in the supply of bitcoin.
>
>>If you're requiring one chain look at the othe for validations (miners
>>will have to validate both to mine btc) you don't need the cross-chain
>>contract, you can do it better.
>
> You can sacrifice bitcoins as a way to mine zerocoins without having the
> bitcoin network validate zerocoin.  For all bitcoin clients care the
> sacrifice could be useless.
>
> Bi-directional sacrifice is more tricky.  ie being allowed to re-create
> previously destroyed bitcoins, based on the sacrifice of zerocoin.  That
> would have other coin validation requirements.
>
> But I am not sure 1:1 is necessarily far from the right price - the price
> is
> arbitrary for a divisible token, so 1:1 is as good as any.  And the price
> equality depends on the extra functionality or value from the
> characteristics of the other coin.  The only thing I can see is zerocoin is
> more cpu expensive to validate, the coins are bigger, but provide more
> payment privacy (and so less taint).  Removing taint may mean that zercoins
> should be worth more.  However if any tainted bitcoins can be converted to
> zerocoin via sacrifice at 1:1, maybe the taint issue goes away - any coins
> that are tainted to the point of value-loss will be converted to zerocoin,
> and consequently the price to convert back should also be 1:1?
>
>>You could do something like this:
>>
>>https://bitcointalk.org/index.php?topic=31643.0
>
> p2p transfer is a good idea.
>
> Adam
>


-- 
Jorge Tim?n

http://freico.in/



From john.dillon892 at googlemail.com  Sun Jul 14 19:05:26 2013
From: john.dillon892 at googlemail.com (John Dillon)
Date: Sun, 14 Jul 2013 19:05:26 +0000
Subject: [Bitcoin-development] Reward for P2SH IsStandard() patch.
Message-ID: <CAPaL=UW4zXui8Jh-qaFgmfhbzhRSHNyh7U5MSJo2bHoWmtoCkA@mail.gmail.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256

As you all know keeping the size of the UTXO set small is critical, and more
recently we've also had problems with distasteful data being added to the UTXO
set. (http://garzikrants.blogspot.se/2013_04_01_archive.html) Gregory Maxwell
has an excellent solution to the distasteful data problem in the form of P2SH^2
(http://comments.gmane.org/gmane.comp.bitcoin.devel/1996) and Peter Todd
pointed out how we can implement it with the existing P2SH form. We're also
going to be implementing some kind of OP_RETURN <data> soon which handles the
timestamping and similar use-cases, again without UTXO impact.

Right now the only scriptPubKey form with any significant use is the
checksighash. Bare pubkey gets used by the odd miner, and by Deepbit due to
their ancient codebase. The former isn't an issue as the miner mines the txout
themselves, and the latter shouldn't find updating to be a big deal.
OP_CHECKMULTISIG is used by Peter Todd's timestamper, but that can be changed
to OP_RETURN without difficulty. However all that will (hopefully!) soon change
as hardware wallets and the payment protocol make hardware wallets worthwhile,
and we should make sure these protocols take the extra step of using P2SH
before we get locked into a bunch OP_CHECKMULTISIG implementations.

We also have the problem that the IsStandard() code accepts up to 120 bytes of
junk data as a pubkey, allowing injection of 240 bytes of *spendable* data into
the UTXO set with bare OP_CHECKMULTISIG. This capability has to be stopped.

Thus I'm offering a reward of 1BTC for whomever creates a patch to change
IsStandard() to accept only P2SH and pubkeyhash in a raw scriptSig, allowing
other forms only when used with P2SH. I'm offering a further 1BTC to whomever
gets such a patch accepted into mainline. It's a pretty easy patch, so I'm
asking that all core-developers (that includes you Peter) hold off for one week
to give less experienced developers a crack at it. If for some reason you want
to remain anonymous that is ok by me as well provided you assign copyright to
me. I do expect unittests. Should be about half a day to a days work.

Long-term we should be using P2SH with an inner OP_CHECKSIG for most addresses
as it's a 1 byte savings. Change addresses can have this done first, although
bitcoinj support will help so that satoshidice and similar sites can pay to
P2SH change. As for multisig's P2SH overhead for a 1-of-2 and 2-of-2 and
3-of-3, is 10%, 8.6% and 6.2% respectively, all pretty minor, especially if you
assume the blocksize limit will be raised.
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.11 (GNU/Linux)

iQEcBAEBCAAGBQJR4vX+AAoJEEWCsU4mNhiPg/EIAKWFaMsugbY4zZ+dpgnaTcUr
D1ZnY5PogETVqcwuXdVdHe2zCUcBhejsBe8ic9vp8OnttXTxo8uXJp9xBuq9VYBN
vXMyGKtxacLL5WS5ShAWnWS47xLf9wnKCJSGX0nqaETIQEUgqCMjTGspZNOpC9W0
fKBIDi4cZbpXn1EQx45v9vplZhFg+vBQV/Ia2/5rjZLPFvdqZoSBruOVTB/X2SDU
Hq36DQkRFblp/s3Ktv9c3yUQ8HocRIXD8jKRsE+uCNfEeI2b9oLpPp1cPsOvjveI
McJnHod8EDzxwbm6abK2cxHWBpGmBa5AABsRmQfpJK+u7GDQoPqzfJ68M1otZjk=
=uP4n
-----END PGP SIGNATURE-----



From john.dillon892 at googlemail.com  Sun Jul 14 19:22:10 2013
From: john.dillon892 at googlemail.com (John Dillon)
Date: Sun, 14 Jul 2013 19:22:10 +0000
Subject: [Bitcoin-development] libzerocoin released,
 what about a zerocoin-only alt-coin with either-or mining
In-Reply-To: <CAC1+kJMyvKnUKm8xTjzUK_5iq_VZM=iX17aCCd9vqe7jsYUJfQ@mail.gmail.com>
References: <20130705140140.GA23949@netbook.cypherspace.org>
	<20130712131815.GA18716@petertodd.org>
	<CAC1+kJOerE75+rtMHiy27aDLwWC9juAYva4u_iMVihnePTOYig@mail.gmail.com>
	<20130713184227.GA5902@netbook.cypherspace.org>
	<CAC1+kJMyvKnUKm8xTjzUK_5iq_VZM=iX17aCCd9vqe7jsYUJfQ@mail.gmail.com>
Message-ID: <CAPaL=UVmr1zng6QtngkY-Y+fP+E67NST7MYRpkSHfjtwZ7PFNw@mail.gmail.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256

On Sun, Jul 14, 2013 at 11:18 AM, Jorge Tim?n <jtimon at monetize.io> wrote:
> All the arguments in favor of this pegging use zerocoin's point of
> view. Sure it would be much better for it, but are additional costs to
> the bitcoin network and you cannot do it with every chain.

Seems that Peter is describing a system that requires no changes at all to the
Bitcoin codebase and thus there are no costs whatsoever.

Peter: I'm a bit confused by this concept of "bi-directional sacrifice" though,
I assume there exists only a sacrifice in one direction right? Wouldn't selling
a zerocoin be just a matter of giving zerocoin a rule so that the zerocoin tx
moving it to the new owner only happens if a specific form of bitcoin tx
happens too?

> Merged mining is not mining the coin for free. The total reward (ie
> btc + frc + nmc + dvc) should tend to equal the mining costs. But the
> value comes from demand, not costs. So if people demand it more it
> price will rise no matter how is mined. And if the price rises it will
> make sense to spend more on mining.
> "Bitcoins are worth because it costs to mine them" is a Marxian labor
> thory of value argument.
> It's the other way arround as Menger taught us.

Merge mining is very much mining a coin for free. Ask not what the total reward
is, ask that the marginal cost of merge mining an additional coin is. The issue
is that unless there is a cost to mining a *invalid* block the merge mined coin
has little protection from miners who mine invalid blocks, either maliciously
or through negligence. If the coin isn't worth much, either because it's market
value is low or the worth is negative to the malicious miner, your theories of
value have nothing to do with the issue.

Gregory Maxwell has written about this issue before on the #bitcoin-dev IRC
channel and on bitcointalk as well if memory serves. I advise you to look up
his description of the problem, almost everything he writes on the topic of
crypto-coin theory is spot-on correct.
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.11 (GNU/Linux)

iQEcBAEBCAAGBQJR4vpGAAoJEEWCsU4mNhiPwu0IAMrzkVfI0CQuNJRCR+jwhNts
juEerApSSpBes6CjLBJJYZWDdMReSl6izqNDancnJygYc+Q5/IkwBispyZyeIVqY
HbV+jyAFQeVaJBZp8N+ZUDfN9/35SkPb4Y30dkq6V76hBfl+59bWq4qG0dhiO915
SBWAUPLspb5GOyu494GJUr4SPzgs9mAKfNGeQR2anOLj8Qam8Khfa4Zm5T5dX8WQ
vBunUCLykPvWBC3nuTDBU5gQu4TGW9ivGB4p6yLr7MyaPQYZEnYGqgU/yIfAhnBj
MfIfs6njPwhGMwteNmwLoS0VLRBFjWZDflquJ0NK6mNLR3c9yjOFMFPTTZFVinQ=
=b40P
-----END PGP SIGNATURE-----



From pieter.wuille at gmail.com  Sun Jul 14 19:28:39 2013
From: pieter.wuille at gmail.com (Pieter Wuille)
Date: Sun, 14 Jul 2013 21:28:39 +0200
Subject: [Bitcoin-development] Reward for P2SH IsStandard() patch.
In-Reply-To: <CAPaL=UW4zXui8Jh-qaFgmfhbzhRSHNyh7U5MSJo2bHoWmtoCkA@mail.gmail.com>
References: <CAPaL=UW4zXui8Jh-qaFgmfhbzhRSHNyh7U5MSJo2bHoWmtoCkA@mail.gmail.com>
Message-ID: <20130714192838.GA26941@vps7135.xlshosting.net>

On Sun, Jul 14, 2013 at 07:05:26PM +0000, John Dillon wrote:
> Long-term we should be using P2SH with an inner OP_CHECKSIG for most addresses
> as it's a 1 byte savings. Change addresses can have this done first, although
> bitcoinj support will help so that satoshidice and similar sites can pay to
> P2SH change. As for multisig's P2SH overhead for a 1-of-2 and 2-of-2 and
> 3-of-3, is 10%, 8.6% and 6.2% respectively, all pretty minor, especially if you
> assume the blocksize limit will be raised.

Small comment: the current implementation in the reference client uses a custom
script encoder for the UTXO database, which stores every (valid) send-to-pubkey
as 33 bytes and every send-to-pubkeyhash or send-to-scripthash as 21 bytes.
So for "standard" address payment, there is no storage impact of using P2SH
instead.

-- 
Pieter




From luke at dashjr.org  Sun Jul 14 19:33:06 2013
From: luke at dashjr.org (Luke-Jr)
Date: Sun, 14 Jul 2013 19:33:06 +0000
Subject: [Bitcoin-development] libzerocoin released,
	what about a zerocoin-only alt-coin with either-or mining
In-Reply-To: <CAPaL=UVmr1zng6QtngkY-Y+fP+E67NST7MYRpkSHfjtwZ7PFNw@mail.gmail.com>
References: <20130705140140.GA23949@netbook.cypherspace.org>
	<CAC1+kJMyvKnUKm8xTjzUK_5iq_VZM=iX17aCCd9vqe7jsYUJfQ@mail.gmail.com>
	<CAPaL=UVmr1zng6QtngkY-Y+fP+E67NST7MYRpkSHfjtwZ7PFNw@mail.gmail.com>
Message-ID: <201307141933.13754.luke@dashjr.org>

On Sunday, July 14, 2013 7:22:10 PM John Dillon wrote:
> > Merged mining is not mining the coin for free. The total reward (ie
> > btc + frc + nmc + dvc) should tend to equal the mining costs. But the
> > value comes from demand, not costs. So if people demand it more it
> > price will rise no matter how is mined. And if the price rises it will
> > make sense to spend more on mining.
> 
> Merge mining is very much mining a coin for free. Ask not what the total
> reward is, ask that the marginal cost of merge mining an additional coin
> is.

But the total reward is what mining will tend toward equalizing in costs.
In any case, the cryptocurrencies are neutral to cost of mining, or perhaps 
even benefit from it being as cheap as possible: if it's cheaper to mine, you 
can get an even higher difficulty/security out of it.

> The issue is that unless there is a cost to mining a *invalid* block
> the merge mined coin has little protection from miners who mine invalid
> blocks, either maliciously or through negligence. If the coin isn't worth
> much, either because it's market value is low or the worth is negative to
> the malicious miner, your theories of value have nothing to do with the
> issue.

Invalid blocks are rejected by validating clients in all circumstances.

I suspect you may mean a block that doesn't include transactions you want 
confirmed. In that case, you must not be paying sufficient fees for the miner 
to consider it worth their time, or must be doing something the miner 
considers fundamentally objectionable (in which case they won't be satisfied 
by any fee). But these miners, unless they are able to acquire over 50% of the 
hashrate (in which case the cryptocoin is compromised), are not the only ones 
mining blocks, and if another miner accepts your transactions there is no 
issue.

Luke
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 1530 bytes
Desc: This is a digitally signed message part.
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130714/1f7fbc69/attachment.sig>

From john.dillon892 at googlemail.com  Sun Jul 14 19:40:21 2013
From: john.dillon892 at googlemail.com (John Dillon)
Date: Sun, 14 Jul 2013 19:40:21 +0000
Subject: [Bitcoin-development] Reward for P2SH IsStandard() patch.
In-Reply-To: <20130714192838.GA26941@vps7135.xlshosting.net>
References: <CAPaL=UW4zXui8Jh-qaFgmfhbzhRSHNyh7U5MSJo2bHoWmtoCkA@mail.gmail.com>
	<20130714192838.GA26941@vps7135.xlshosting.net>
Message-ID: <CAPaL=UXZP39CxjsVH5z0rvvvrFtt6uXbuy_Sn6Nz+CDUCt_T3A@mail.gmail.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256

On Sun, Jul 14, 2013 at 7:28 PM, Pieter Wuille <pieter.wuille at gmail.com> wrote:
> On Sun, Jul 14, 2013 at 07:05:26PM +0000, John Dillon wrote:
>> Long-term we should be using P2SH with an inner OP_CHECKSIG for most addresses
>> as it's a 1 byte savings. Change addresses can have this done first, although
>> bitcoinj support will help so that satoshidice and similar sites can pay to
>> P2SH change. As for multisig's P2SH overhead for a 1-of-2 and 2-of-2 and
>> 3-of-3, is 10%, 8.6% and 6.2% respectively, all pretty minor, especially if you
>> assume the blocksize limit will be raised.
>
> Small comment: the current implementation in the reference client uses a custom
> script encoder for the UTXO database, which stores every (valid) send-to-pubkey
> as 33 bytes and every send-to-pubkeyhash or send-to-scripthash as 21 bytes.
> So for "standard" address payment, there is no storage impact of using P2SH
> instead.

By "impact" I am referring to the impact on transaction size and thus
blockchain space and fees, not UTXO size as stored by nodes themselves.
Specifically take the size of the txout and txin and compare the version using
P2SH to the equivalent version not using it to get my numbers.

Anyway, given how much uncompressed keys are still used obviously fee pressure
isn't even close to getting people to create efficient transactions.
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.11 (GNU/Linux)

iQEcBAEBCAAGBQJR4v6QAAoJEEWCsU4mNhiP/ToH/1zwzkG0v8OphBaglzhF/dha
QgRXy3CGQqs43w1hEsfPNaZUyKIZz2gmGtJV2PUh5FavhWY9IUuMCVLvPJ18KZkc
eCLtAWSlUkjemXz6S52RPXW3vmKTJzZK4ZBZP0JiRYfhBQWbUlArLh+mQw9RcWng
9fdS/Xw4QYFfnN46NMlHdHyqGn4Mu8VgsozeUlxWXBGorf2+IFbMxR1BRi33CluH
3r6AIRHXPSqgHf6qnHgWqKh/WXMxuG8lLyLa00Rj+ByNcNQCwLV/+9AzSJYNA5Ol
nnGdkbVDtLjmDS4KjwuSXGP8jh/uRrHLubcgk6UEm27K2/yJxARBfECo78aBLsg=
=Nx+9
-----END PGP SIGNATURE-----



From pieter.wuille at gmail.com  Sun Jul 14 19:42:06 2013
From: pieter.wuille at gmail.com (Pieter Wuille)
Date: Sun, 14 Jul 2013 21:42:06 +0200
Subject: [Bitcoin-development] libzerocoin released,
 what about a zerocoin-only alt-coin with either-or mining
In-Reply-To: <201307141933.13754.luke@dashjr.org>
References: <20130705140140.GA23949@netbook.cypherspace.org>
	<CAC1+kJMyvKnUKm8xTjzUK_5iq_VZM=iX17aCCd9vqe7jsYUJfQ@mail.gmail.com>
	<CAPaL=UVmr1zng6QtngkY-Y+fP+E67NST7MYRpkSHfjtwZ7PFNw@mail.gmail.com>
	<201307141933.13754.luke@dashjr.org>
Message-ID: <20130714194205.GA27202@vps7135.xlshosting.net>

On Sun, Jul 14, 2013 at 07:33:06PM +0000, Luke-Jr wrote:
> > The issue is that unless there is a cost to mining a *invalid* block
> > the merge mined coin has little protection from miners who mine invalid
> > blocks, either maliciously or through negligence. If the coin isn't worth
> > much, either because it's market value is low or the worth is negative to
> > the malicious miner, your theories of value have nothing to do with the
> > issue.
> 
> Invalid blocks are rejected by validating clients in all circumstances.

I don't think that's what John means.

If you have hash power for the parent chain, mining invalid blocks for the
merge-mined chain costs you nothing. Yes, they will be invalid, but you've
lost nothing.

The basic assumption underlying mining security is that it is more profitable
to collaborate with mining a chain (and profit from the block payout) than to
attack it. In the case of merged mining, this assumption is not valid.

-- 
Pieter




From john.dillon892 at googlemail.com  Sun Jul 14 19:48:45 2013
From: john.dillon892 at googlemail.com (John Dillon)
Date: Sun, 14 Jul 2013 19:48:45 +0000
Subject: [Bitcoin-development] libzerocoin released,
 what about a zerocoin-only alt-coin with either-or mining
In-Reply-To: <201307141933.13754.luke@dashjr.org>
References: <20130705140140.GA23949@netbook.cypherspace.org>
	<CAC1+kJMyvKnUKm8xTjzUK_5iq_VZM=iX17aCCd9vqe7jsYUJfQ@mail.gmail.com>
	<CAPaL=UVmr1zng6QtngkY-Y+fP+E67NST7MYRpkSHfjtwZ7PFNw@mail.gmail.com>
	<201307141933.13754.luke@dashjr.org>
Message-ID: <CAPaL=UW2-W_dOmF=NDjEpE2fvPuzk-G-cmFKkj2dHdHoO6ygXg@mail.gmail.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256

On Sun, Jul 14, 2013 at 7:33 PM, Luke-Jr <luke at dashjr.org> wrote:
>> Merge mining is very much mining a coin for free. Ask not what the total
>> reward is, ask that the marginal cost of merge mining an additional coin
>> is.
>
> But the total reward is what mining will tend toward equalizing in costs.
> In any case, the cryptocurrencies are neutral to cost of mining, or perhaps
> even benefit from it being as cheap as possible: if it's cheaper to mine, you
> can get an even higher difficulty/security out of it.

Again, you forget that there may exist miners for which the value of the coin
is negative.

Never mind that in practice you want there to exist a cost to encourage miners
to actually pay attention to what they mind and to encourage them to update
software when required and participate.

>> The issue is that unless there is a cost to mining a *invalid* block
>> the merge mined coin has little protection from miners who mine invalid
>> blocks, either maliciously or through negligence. If the coin isn't worth
>> much, either because it's market value is low or the worth is negative to
>> the malicious miner, your theories of value have nothing to do with the
>> issue.
>
> Invalid blocks are rejected by validating clients in all circumstances.

Validating clients, not SPV clients.

> I suspect you may mean a block that doesn't include transactions you want
> confirmed. In that case, you must not be paying sufficient fees for the miner
> to consider it worth their time, or must be doing something the miner
> considers fundamentally objectionable (in which case they won't be satisfied
> by any fee). But these miners, unless they are able to acquire over 50% of the
> hashrate (in which case the cryptocoin is compromised), are not the only ones
> mining blocks, and if another miner accepts your transactions there is no
> issue.

All those things simply change the amount of alt-coin the miner gets, which to
the miner may have no reward. You also have the issue that we may be talking
about a non-currency chain where reward is more nebulous.

In any case, regarding a zerocoin chain, Peter's observation that
proof-of-sacrifice allows a strong 51% attck defense is very clever and IMO is
significantly stronger than proof-of-work mining, merged or not, would provide.
It's essentially the ability to conjur up mining capacity on demand, but only
by those who have a stake in the crypto-coin. It does depend on the existance
of a proof-of-work chain, but we have a perfectly good one handy.

PS: good to see you signing you email!
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.11 (GNU/Linux)

iQEcBAEBCAAGBQJR4wCFAAoJEEWCsU4mNhiPIcwH+gLYbUPDi/7ITK02wftqEV2E
FSlzZ0W8aw7z7sF7hqPm7jpmtqbXdvQRSSy+XRDgWUxvF72o5oRTwOpY7xN8KOct
9rMwF35nld8An9FOjOB6NR3sIQxmAg9q7xoilZrOHyRFcz/UT0BexSZ3x5DrKIAB
6S7qalrGT0NWZx8CI0PRAzY8Nx+WouaoofBaypRaXBVJxigFqJlWNxgUM1FuoCL+
C1wn0hlbWfO42Mh9jdnFZXhH2Omd5V3PzIS/t2cJGTjrwr7nT6VAJu+0hbNZHI/q
yg0TGbO/01pp4OVe7WdLz9OktMqqDdDZJd6HWLQk07zqHS3iRJ2cpRIO6k9UCk0=
=oicX
-----END PGP SIGNATURE-----



From john.dillon892 at googlemail.com  Sun Jul 14 19:52:56 2013
From: john.dillon892 at googlemail.com (John Dillon)
Date: Sun, 14 Jul 2013 19:52:56 +0000
Subject: [Bitcoin-development] libzerocoin released,
 what about a zerocoin-only alt-coin with either-or mining
In-Reply-To: <20130714194205.GA27202@vps7135.xlshosting.net>
References: <20130705140140.GA23949@netbook.cypherspace.org>
	<CAC1+kJMyvKnUKm8xTjzUK_5iq_VZM=iX17aCCd9vqe7jsYUJfQ@mail.gmail.com>
	<CAPaL=UVmr1zng6QtngkY-Y+fP+E67NST7MYRpkSHfjtwZ7PFNw@mail.gmail.com>
	<201307141933.13754.luke@dashjr.org>
	<20130714194205.GA27202@vps7135.xlshosting.net>
Message-ID: <CAPaL=UWBj2vhGMMzGAxGcjq3T8aO8+wMravQ4UXbi0w9DUEtAQ@mail.gmail.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256

On Sun, Jul 14, 2013 at 7:42 PM, Pieter Wuille <pieter.wuille at gmail.com> wrote:
> On Sun, Jul 14, 2013 at 07:33:06PM +0000, Luke-Jr wrote:
>> Invalid blocks are rejected by validating clients in all circumstances.
>
> I don't think that's what John means.
>
> If you have hash power for the parent chain, mining invalid blocks for the
> merge-mined chain costs you nothing. Yes, they will be invalid, but you've
> lost nothing.
>
> The basic assumption underlying mining security is that it is more profitable
> to collaborate with mining a chain (and profit from the block payout) than to
> attack it. In the case of merged mining, this assumption is not valid.

You said it better than I did.

Essentially I am worried about the chain being strangled at birth, merge-mining
makes doing so cost nothing for the attacker. With zerocoin this is a
particularly dangerous possibility due to those in the Bitcoin community who
would like to see Bitcoin continue to have poor privacy properties.
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.11 (GNU/Linux)

iQEcBAEBCAAGBQJR4wF9AAoJEEWCsU4mNhiPtCgH/3QLvFer3QHNU7AP+nehwcgK
QS3xLv60lvm+pYLVAp9xFyJ5SCHVGTPvWRBmoldk8xxh9ORHlNEsnrcx9ZONTJ4F
ja4Alp9MLZK5S8dKk2juJNdKziyRkQci/nNwuqepX5JjCIRNZq1lcW4Be4W7InPt
Ltrvp7lA03uNuAXxtlYnko4mEY5l1NiBp4BvhGZ6+GRdCltPeIk2m0NwLDHWd31t
qFLnnPSw0/9FGVs7lOaWuxbMGwPzGrIu6TXm17dqgBsl+8JuP6zHFE1ccqIxKyb6
Tdf4yNvhsvE+qlTnmcQNxM9nMHL4uqBZqJR174fAKQzcNGzVLloqbmRqKzuw5o4=
=leUJ
-----END PGP SIGNATURE-----



From luke at dashjr.org  Sun Jul 14 20:16:41 2013
From: luke at dashjr.org (Luke-Jr)
Date: Sun, 14 Jul 2013 20:16:41 +0000
Subject: [Bitcoin-development] libzerocoin released,
	what about a zerocoin-only alt-coin with either-or mining
In-Reply-To: <20130714194205.GA27202@vps7135.xlshosting.net>
References: <20130705140140.GA23949@netbook.cypherspace.org>
	<201307141933.13754.luke@dashjr.org>
	<20130714194205.GA27202@vps7135.xlshosting.net>
Message-ID: <201307142016.48605.luke@dashjr.org>

On Sunday, July 14, 2013 7:42:06 PM Pieter Wuille wrote:
> On Sun, Jul 14, 2013 at 07:33:06PM +0000, Luke-Jr wrote:
> > > The issue is that unless there is a cost to mining a *invalid* block
> > > the merge mined coin has little protection from miners who mine invalid
> > > blocks, either maliciously or through negligence. If the coin isn't
> > > worth much, either because it's market value is low or the worth is
> > > negative to the malicious miner, your theories of value have nothing
> > > to do with the issue.
> > 
> > Invalid blocks are rejected by validating clients in all circumstances.
> 
> I don't think that's what John means.
> 
> If you have hash power for the parent chain, mining invalid blocks for the
> merge-mined chain costs you nothing. Yes, they will be invalid, but you've
> lost nothing.

Nor gained anything. So the "lesser" chain maybe can't trust SPV.
But trusting SPV was already a bad idea anyway.

Note that the parent chain is not in any privileged position here either: a 
merged-mined chain could provide the value to the miner he is interested in, 
while he sees nothing of the parent chain. In short, merged mining is pretty 
much unavoidable in any case.

> The basic assumption underlying mining security is that it is more
> profitable to collaborate with mining a chain (and profit from the block
> payout) than to attack it. In the case of merged mining, this assumption
> is not valid.

The basic assumption of SPV is that more people will be assisting rather than 
making invalid blocks. That motive doesn't necessarily need to be economic, 
nor do proper validating clients rely on it. The only real assumption behind 
mining is that the majority will not be aiming to reverse transactions with 
valid blocks.

P.S. How about a Zerocoin with no-reward/PoSacrifice merged mining as well as 
(rewarded) Prime POW; maybe with no subsidy halving, to try a new economic 
idea as well ;)
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 1530 bytes
Desc: This is a digitally signed message part.
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130714/6ad9f2c9/attachment.sig>

From john.dillon892 at googlemail.com  Sun Jul 14 22:12:00 2013
From: john.dillon892 at googlemail.com (John Dillon)
Date: Sun, 14 Jul 2013 22:12:00 +0000
Subject: [Bitcoin-development] Protecting Bitcoin against network-wide DoS
	attack
Message-ID: <CAPaL=UVqD1RaguqvaUi-0KnabobvuJ27gF6vK5tTAxEGNO9Xww@mail.gmail.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256

It's been pointed out recently how a fairly cheap attack on the Bitcoin network
would be to take advantage of the fact that we limit the number of incoming
connections, but don't require anything of those connections. This means an
attacker can simply repeatedly query the the DNS seeds for new addresses and
make enough incoming connections that those nodes can not accept further
clients. nMaxConnections defaults to 125, and beyond that there is the limit on
file descriptors, as well as possible limits by stateful firewalls. (how much
memory/cpu does an incoming connection require?) The DNS seeds themselves crawl
the network on your behalf, and let you direct the attack starting at the nodes
new SPV clients are most likely to connect too.

The cost to the attacker is minimal, 1 INV message per transaction and block,
and some gossiped peer addresses.  Currently that should be on the order of 30
bytes a second. The attacker can do even better by pretending to be an SPV
client, thus reducing their incoming bandwidth consumption to nearly nothing,
yet increasing resource usage on the node.

Peter estimated you would need just 200 or so well distributed IP addresses to
make it impossible to use an SPV client. In fact as far as I can tell for
incoming connections we don't force incoming connections to be well
distributed, so the attack could be done by simply one server with enough
amount of bandwidth. Estimates of the total number of nodes out there on
mainnet are in the tens of thousands, let's say 25,000 for arguments sake. 125
connections to every one of those nodes would only cost the attacker 94MB/s of
incoming bandwidth, easily attainable by a few cheap EC2 nodes, and on EC2
incoming bandwidth is free. The SPV version of the attack would let the
attacker spend as little as they wished.

Obviously if we want to make it possible for SPV nodes to reliably connect to
the network we need to give them a way to prove they have sacrificed some
limited resource to allow nodes to distinguish legit users from attackers.
Failing that, we need to make attacks sufficiently expensive to discourage
bored script-kiddies, much the same way flooding the network with transactions
is sufficiently expensive due to fees that such attacks are impractical.

Now something to keep in mind is whatever we ask SPV nodes to sacrifice must
not be reusable. For instance proof-of-stake *doesn't* work without consensus
because an attacker can reuse the proof for multiple connections. Similarly IP
addresses don't work, requring incoming connections to be "well distributed" in
IP space isn't a bad idea, but it doesn't buy much DoS resistance. Fees paid by
confirmed transactions do work, but only if something links the transaction to
the specific connection.

We also want whatever the nodes to sacrifice to be something not much more
costly to the client than to the attacker. Bandwidth isn't reusable, but an
attacker with EC2 or a botnet has vastly lower costs for bandwidth than a user
with an Android wallet on a phone.


For a non-SPV-mode client we can easily do anti-DoS by requiring the peer to do
"useful work". As the incoming connections slots get used up, simply kick off
the incoming peers who have relayed the least fee-paying transactions and valid
blocks, keeping the peers who have relayed the most. We can continue to use the
usual, randomized, logic for outgoing peers to attempt to preserve the
randomized structure of the bitcoin network. Without an ongoing attack nodes
making new connections are unaffected, and during an attack new connections are
made somewhat easier by the increased numbers of incoming slots made available
as the attackers connections timeout.

Yes an attacker can simply relay some high-fee transactions to keep their nodes
from being kicked off, but in that case are they really an attacker? I reject
the argument that we are letting them de-randomize the structure of the network
because as I've shown they can already do that with little expenditure.


For SPV nodes again in the absense of an attack such anti-DoS code has no
effect. When an attack is launched the SPV client can simply create some
high-fee transactions with their own coins to get connection priority. SPV
nodes already have serious privacy issues, so I don't see the creation of
transactions as a big deal. Re-use is an issue, but nodes can take into account
how long it takes for another nodes to advertise the transactions when dealing
with SPV peers. Better systems can be implemented later, such as micropayment
channels and coinbase probabalistic payments, that don't result in blockchain
transactions just for the sake of anti-DoS.


A demo of the attack against would be useful. Pieter Wuille's bitcoin-seeder
code could probably be re-used as it already has the required functionality of
making large numbers of connections. In fact, simply running multiple instances
of it could do the trick.
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.11 (GNU/Linux)

iQEcBAEBCAAGBQJR4yHgAAoJEEWCsU4mNhiPRvkH/3fl5brCe+1cBUoFtAnVHV+0
dezNeXo+nAbDg8XCkF6cmFkDBSgTj8l2iy0N1pfCq1XDXmqfM5p+CtxIBuIwwURc
KnpwNnRwoQ0JKYFonmaM0rQgOcXnRvyNq2DVL/b/fA6X3I5nignWNFDtzpvFhM+J
IjhEVbu5S25c+O8LFlJV0ujjBgnR/8gJ0xV2fvdsaisAVHly1n9QWa1FEnMz7hp9
wfXPBh8tnehKnsspyeAEq5Yc/Yyow97CdwOqPVknI0rhes0OWR8ORcJ2NkBZm/Pn
rUFFMwAme/K1f3PqW1+EpM4gG/pJvg+xU5E5KdqgnjsQLoEGWtMcxEdAeCoBuNI=
=jzfg
-----END PGP SIGNATURE-----



From pete at petertodd.org  Mon Jul 15 00:12:23 2013
From: pete at petertodd.org (Peter Todd)
Date: Sun, 14 Jul 2013 20:12:23 -0400
Subject: [Bitcoin-development] libzerocoin released,
 what about a zerocoin-only alt-coin with either-or mining
In-Reply-To: <201307142016.48605.luke@dashjr.org>
References: <20130705140140.GA23949@netbook.cypherspace.org>
	<201307141933.13754.luke@dashjr.org>
	<20130714194205.GA27202@vps7135.xlshosting.net>
	<201307142016.48605.luke@dashjr.org>
Message-ID: <20130715001223.GA18773@savin>

On Sun, Jul 14, 2013 at 08:16:41PM +0000, Luke-Jr wrote:
> P.S. How about a Zerocoin with no-reward/PoSacrifice merged mining as well as 
> (rewarded) Prime POW; maybe with no subsidy halving, to try a new economic 
> idea as well ;)

Your ideas about making an alt-coin have anything to do with hashing
power might be a lot more convincing if you hadn't 51% attacks alt-coins
in the past.

-- 
'peter'[:-1]@petertodd.org
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 490 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130714/855268c1/attachment.sig>

From adam at cypherspace.org  Mon Jul 15 00:14:37 2013
From: adam at cypherspace.org (Adam Back)
Date: Mon, 15 Jul 2013 02:14:37 +0200
Subject: [Bitcoin-development] libzerocoin released,
 what about a zerocoin-only alt-coin with either-or mining
In-Reply-To: <CAPaL=UVmr1zng6QtngkY-Y+fP+E67NST7MYRpkSHfjtwZ7PFNw@mail.gmail.com>
References: <20130705140140.GA23949@netbook.cypherspace.org>
	<20130712131815.GA18716@petertodd.org>
	<CAC1+kJOerE75+rtMHiy27aDLwWC9juAYva4u_iMVihnePTOYig@mail.gmail.com>
	<20130713184227.GA5902@netbook.cypherspace.org>
	<CAC1+kJMyvKnUKm8xTjzUK_5iq_VZM=iX17aCCd9vqe7jsYUJfQ@mail.gmail.com>
	<CAPaL=UVmr1zng6QtngkY-Y+fP+E67NST7MYRpkSHfjtwZ7PFNw@mail.gmail.com>
Message-ID: <20130715001437.GA21991@netbook.cypherspace.org>

I think bi-directional sacrifice is probably not needed to assure a close to
1:1 bi-directional peg.

(Bi-directional sacrifice meaning also to convert a zerocoin to a bitcoin
you sacrifice a zerocoin and bitcoin would be modified to accept a zerocoin
sacrifice as a way to replace a previously sacrificed bitcoin).

I say that because if users who want zerocoins can obtain them at 1:1
exchange via sacrifice (a mathematical peg), it is of no additional cost to
them to instead buy them from someone who previously obtained them via
sacrifice for bitcoin (rather than sacrificing a new bitcoin).  So
presumably for goodwill, or nominal fee (a small discount), people would buy
rather than sacrifice where there is availability.

Adam

On Sun, Jul 14, 2013 at 07:22:10PM +0000, John Dillon wrote:
>-----BEGIN PGP SIGNED MESSAGE-----
>Hash: SHA256
>
>On Sun, Jul 14, 2013 at 11:18 AM, Jorge Tim?n <jtimon at monetize.io> wrote:
>> All the arguments in favor of this pegging use zerocoin's point of
>> view. Sure it would be much better for it, but are additional costs to
>> the bitcoin network and you cannot do it with every chain.
>
>Seems that Peter is describing a system that requires no changes at all to the
>Bitcoin codebase and thus there are no costs whatsoever.
>
>Peter: I'm a bit confused by this concept of "bi-directional sacrifice" though,
>I assume there exists only a sacrifice in one direction right? Wouldn't selling
>a zerocoin be just a matter of giving zerocoin a rule so that the zerocoin tx
>moving it to the new owner only happens if a specific form of bitcoin tx
>happens too?
>
>> Merged mining is not mining the coin for free. The total reward (ie
>> btc + frc + nmc + dvc) should tend to equal the mining costs. But the
>> value comes from demand, not costs. So if people demand it more it
>> price will rise no matter how is mined. And if the price rises it will
>> make sense to spend more on mining.
>> "Bitcoins are worth because it costs to mine them" is a Marxian labor
>> thory of value argument.
>> It's the other way arround as Menger taught us.
>
>Merge mining is very much mining a coin for free. Ask not what the total reward
>is, ask that the marginal cost of merge mining an additional coin is. The issue
>is that unless there is a cost to mining a *invalid* block the merge mined coin
>has little protection from miners who mine invalid blocks, either maliciously
>or through negligence. If the coin isn't worth much, either because it's market
>value is low or the worth is negative to the malicious miner, your theories of
>value have nothing to do with the issue.
>
>Gregory Maxwell has written about this issue before on the #bitcoin-dev IRC
>channel and on bitcointalk as well if memory serves. I advise you to look up
>his description of the problem, almost everything he writes on the topic of
>crypto-coin theory is spot-on correct.
>-----BEGIN PGP SIGNATURE-----
>Version: GnuPG v1.4.11 (GNU/Linux)
>
>iQEcBAEBCAAGBQJR4vpGAAoJEEWCsU4mNhiPwu0IAMrzkVfI0CQuNJRCR+jwhNts
>juEerApSSpBes6CjLBJJYZWDdMReSl6izqNDancnJygYc+Q5/IkwBispyZyeIVqY
>HbV+jyAFQeVaJBZp8N+ZUDfN9/35SkPb4Y30dkq6V76hBfl+59bWq4qG0dhiO915
>SBWAUPLspb5GOyu494GJUr4SPzgs9mAKfNGeQR2anOLj8Qam8Khfa4Zm5T5dX8WQ
>vBunUCLykPvWBC3nuTDBU5gQu4TGW9ivGB4p6yLr7MyaPQYZEnYGqgU/yIfAhnBj
>MfIfs6njPwhGMwteNmwLoS0VLRBFjWZDflquJ0NK6mNLR3c9yjOFMFPTTZFVinQ=
>=b40P
>-----END PGP SIGNATURE-----



From pete at petertodd.org  Mon Jul 15 00:29:20 2013
From: pete at petertodd.org (Peter Todd)
Date: Sun, 14 Jul 2013 20:29:20 -0400
Subject: [Bitcoin-development] libzerocoin released,
 what about a zerocoin-only alt-coin with either-or mining
In-Reply-To: <CAPaL=UVmr1zng6QtngkY-Y+fP+E67NST7MYRpkSHfjtwZ7PFNw@mail.gmail.com>
References: <20130705140140.GA23949@netbook.cypherspace.org>
	<20130712131815.GA18716@petertodd.org>
	<CAC1+kJOerE75+rtMHiy27aDLwWC9juAYva4u_iMVihnePTOYig@mail.gmail.com>
	<20130713184227.GA5902@netbook.cypherspace.org>
	<CAC1+kJMyvKnUKm8xTjzUK_5iq_VZM=iX17aCCd9vqe7jsYUJfQ@mail.gmail.com>
	<CAPaL=UVmr1zng6QtngkY-Y+fP+E67NST7MYRpkSHfjtwZ7PFNw@mail.gmail.com>
Message-ID: <20130715002920.GB18773@savin>

On Sun, Jul 14, 2013 at 07:22:10PM +0000, John Dillon wrote:
> Peter: I'm a bit confused by this concept of "bi-directional sacrifice" though,
> I assume there exists only a sacrifice in one direction right? Wouldn't selling
> a zerocoin be just a matter of giving zerocoin a rule so that the zerocoin tx
> moving it to the new owner only happens if a specific form of bitcoin tx
> happens too?

Exactly.

Basically you have one way of creating a Zerocoin: prove you sacrificed
a Bitcoin in a specific way. (spend to unspendable, or spend to mining
fees far into the future)

Now when you sell a Zerocoin what you do is create a Zerocoin
transaction with a txout that can only be spent if you can prove that a
Bitcoin transaction exists with specific conditions with sufficient
confirmations. The specific condition would most likely be it has a
txout of a specific value and scriptPubKey. Basically you'd have a
two-part scriptPubKey:

if <check bitcoin txout existance proof> <check zerocoin buyers signature
is correct> else <check zerocoin sellers signature is correct> <check n
blocks have passed>

Note how if the buyer screws up there is a fallback so the seller can
retrieve their funds after some reasonable amount of time.

Of course if the Bitcoin chain is re-orged Bad Things Happen(TM), but
just set the required number of confirms to something reasonable and
you're good to go. It does mean Zerocoin needs to have consensus on the
Bitcoin blockchain, but that's required to verify sacrifice proofs
anyway.

Economically the idea works because Zerocoins are gradually consumed by
the proof-of-sacrifice required to make Zerocoin transactions. If the
process by which Bitcoins are sacrificed is to fees, rather than
permanently, the overall affect is just a minor decrease in the Bitcoin
money supply. If they are sacrificed permanently, it'll result in
long-term Bitcoin deflation - potentially an issue as the blockreward
decreases.

-- 
'peter'[:-1]@petertodd.org
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 490 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130714/155dfca3/attachment.sig>

From luke at dashjr.org  Mon Jul 15 01:51:21 2013
From: luke at dashjr.org (Luke-Jr)
Date: Mon, 15 Jul 2013 01:51:21 +0000
Subject: [Bitcoin-development] libzerocoin released,
	what about a zerocoin-only alt-coin with either-or mining
In-Reply-To: <20130715001223.GA18773@savin>
References: <20130705140140.GA23949@netbook.cypherspace.org>
	<201307142016.48605.luke@dashjr.org> <20130715001223.GA18773@savin>
Message-ID: <201307150151.22722.luke@dashjr.org>

On Monday, July 15, 2013 12:12:23 AM Peter Todd wrote:
> On Sun, Jul 14, 2013 at 08:16:41PM +0000, Luke-Jr wrote:
> > P.S. How about a Zerocoin with no-reward/PoSacrifice merged mining as
> > well as (rewarded) Prime POW; maybe with no subsidy halving, to try a
> > new economic idea as well ;)
> 
> Your ideas about making an alt-coin have anything to do with hashing
> power might be a lot more convincing if you hadn't 51% attacks alt-coins
> in the past.

Slander like this does not belong on the dev ML.



From pete at petertodd.org  Mon Jul 15 01:59:45 2013
From: pete at petertodd.org (Peter Todd)
Date: Sun, 14 Jul 2013 21:59:45 -0400
Subject: [Bitcoin-development] libzerocoin released,
 what about a zerocoin-only alt-coin with either-or mining
In-Reply-To: <201307150151.22722.luke@dashjr.org>
References: <20130705140140.GA23949@netbook.cypherspace.org>
	<201307142016.48605.luke@dashjr.org> <20130715001223.GA18773@savin>
	<201307150151.22722.luke@dashjr.org>
Message-ID: <20130715015945.GF18773@savin>

On Mon, Jul 15, 2013 at 01:51:21AM +0000, Luke-Jr wrote:
> On Monday, July 15, 2013 12:12:23 AM Peter Todd wrote:
> > On Sun, Jul 14, 2013 at 08:16:41PM +0000, Luke-Jr wrote:
> > > P.S. How about a Zerocoin with no-reward/PoSacrifice merged mining as
> > > well as (rewarded) Prime POW; maybe with no subsidy halving, to try a
> > > new economic idea as well ;)
> > 
> > Your ideas about making an alt-coin have anything to do with hashing
> > power might be a lot more convincing if you hadn't 51% attacks alt-coins
> > in the past.
> 
> Slander like this does not belong on the dev ML.

I wasn't aware you denied that accusation, so my apologies; I retract
that statement.

-- 
'peter'[:-1]@petertodd.org
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 490 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130714/b500b979/attachment.sig>

From pete at petertodd.org  Mon Jul 15 07:32:24 2013
From: pete at petertodd.org (Peter Todd)
Date: Mon, 15 Jul 2013 03:32:24 -0400
Subject: [Bitcoin-development] Protecting Bitcoin against network-wide
 DoS attack
In-Reply-To: <CAPaL=UVqD1RaguqvaUi-0KnabobvuJ27gF6vK5tTAxEGNO9Xww@mail.gmail.com>
References: <CAPaL=UVqD1RaguqvaUi-0KnabobvuJ27gF6vK5tTAxEGNO9Xww@mail.gmail.com>
Message-ID: <20130715073224.GA4885@savin>

On Sun, Jul 14, 2013 at 10:12:00PM +0000, John Dillon wrote:
> For a non-SPV-mode client we can easily do anti-DoS by requiring the peer to do
> "useful work". As the incoming connections slots get used up, simply kick off
> the incoming peers who have relayed the least fee-paying transactions and valid
> blocks, keeping the peers who have relayed the most. We can continue to use the
> usual, randomized, logic for outgoing peers to attempt to preserve the
> randomized structure of the bitcoin network. Without an ongoing attack nodes
> making new connections are unaffected, and during an attack new connections are
> made somewhat easier by the increased numbers of incoming slots made available
> as the attackers connections timeout.

My mempool rewrite defined a CMemPoolTx subclass for CTransaction - it
shouldn't be too hard to add the required per-node accounting once nodes
get unique identifiers. (can be assigned randomly in the beginning,
later can be used for permanent node identifiers w/ ssl and message
signing)

-- 
'peter'[:-1]@petertodd.org
00000000000000214cc4e58adcacd8923d4d37b18e4f6b73556443ae7c88f71a
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 490 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130715/6b71caf0/attachment.sig>

From pete at petertodd.org  Mon Jul 15 09:51:07 2013
From: pete at petertodd.org (Peter Todd)
Date: Mon, 15 Jul 2013 05:51:07 -0400
Subject: [Bitcoin-development] libzerocoin released,
 what about a zerocoin-only alt-coin with either-or mining
In-Reply-To: <CAMGNxUtnYy0qtdRw3Pz2xV9xztEg317MRs0_mNMEWGE5oAxnig@mail.gmail.com>
References: <20130705140140.GA23949@netbook.cypherspace.org>
	<20130712131815.GA18716@petertodd.org>
	<CAC1+kJOerE75+rtMHiy27aDLwWC9juAYva4u_iMVihnePTOYig@mail.gmail.com>
	<CAC1+kJN9G_OcX8+Vr6gLgM+KRNDzYtijjWxwmcA=yrKhU_fWkQ@mail.gmail.com>
	<CAMGNxUtnYy0qtdRw3Pz2xV9xztEg317MRs0_mNMEWGE5oAxnig@mail.gmail.com>
Message-ID: <20130715095107.GA8828@savin>

On Sat, Jul 13, 2013 at 11:32:39AM -0700, Peter Vessenes wrote:
> One very real issue for alt-currencies that don't peg to Bitcoin is that
> market liquidity is a bitch. By almost all standards current global Bitcoin
> liquidity is already very, very low. Too low for many transactions that
> come across my desk at least.
> 
> There are a lot of reasons for that low liquidity, but to try and float a
> new pair for which the likely initial counter-asset is going to be Bitcoin
> means minuscule liquidity.

Being able to have automated Bitcoin<->Zerocoin P2P trading without an
exchange is also significantly more desirable from a privacy standpoint.
Basically it reduces the privacy risks of doing the exchange to spending
the Zerocoins in the first place.

-- 
'peter'[:-1]@petertodd.org
00000000000000878c30a45104c48fd4e8037cb5b3ba1e14dc4d8bef72eff1be
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 490 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130715/7104a3f2/attachment.sig>

From w at grabhive.com  Mon Jul 15 10:07:57 2013
From: w at grabhive.com (Wendell)
Date: Mon, 15 Jul 2013 12:07:57 +0200
Subject: [Bitcoin-development] Introducing BitcoinKit.framework
Message-ID: <B87F1213-5BD8-43F5-9744-F69947561ED5@grabhive.com>

Hi devs,

Just wanted to cross-post this here since it seems very relevant.

We're launching BitcoinKit.framework, a Cocoa framework that allows developers to write Bitcoin wallet apps for Mac OS X. BitcoinKit uses bitcoind, and serves a small and tidy API for developer use. Support for other Bitcoin implementations (libcbitcoin, etc) is soon to follow.

BitcoinKit's first application is as the backbone of a new Mac wallet app called Hive, which will be released soon at www.grabhive.com.

Grab the source here:
https://github.com/grabhive/BitcoinKit

Support is available via GitHub issues and this Bitcointalk thread:
https://bitcointalk.org/index.php?topic=256583.msg2733523

A sample GUI app is also included:
http://imgur.com/FzqA00X

Cheers everyone!

-Wendell
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 841 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130715/f4ae94ff/attachment.sig>

From jtimon at monetize.io  Mon Jul 15 13:05:52 2013
From: jtimon at monetize.io (=?ISO-8859-1?Q?Jorge_Tim=F3n?=)
Date: Mon, 15 Jul 2013 15:05:52 +0200
Subject: [Bitcoin-development] libzerocoin released,
 what about a zerocoin-only alt-coin with either-or mining
In-Reply-To: <20130715095107.GA8828@savin>
References: <20130705140140.GA23949@netbook.cypherspace.org>
	<20130712131815.GA18716@petertodd.org>
	<CAC1+kJOerE75+rtMHiy27aDLwWC9juAYva4u_iMVihnePTOYig@mail.gmail.com>
	<CAC1+kJN9G_OcX8+Vr6gLgM+KRNDzYtijjWxwmcA=yrKhU_fWkQ@mail.gmail.com>
	<CAMGNxUtnYy0qtdRw3Pz2xV9xztEg317MRs0_mNMEWGE5oAxnig@mail.gmail.com>
	<20130715095107.GA8828@savin>
Message-ID: <CAC1+kJO+dWdr=7uHx4Qokpsir6+B-VCaweOe-_YG0OHvYwCA=w@mail.gmail.com>

One way sacrifice (btc to zerocoin) is a non-issue since there's no
modification required for bitcoin and you can't do anything to prevent
it anyway.
The controversial thing is sacrificing something outside bitcoin's
chain and new btc appearing.

On merged mining. It is true that "merged attacking" the other chain
is free, but it is still more profitable to just follow the rules and
mine the other coin!!
If someone considers that something he can sell in a market for btc is
"negative value"...well, he's just dammed stupid. Proof of work is
designed for rational actors, if you stop assuming miners are more or
less rational everything falls apart. It is possible that the "extra
value" is too little for some miners to bother. But the extra costs of
validating something else are so little compared to chance-hashing
that miners not merged mining namecoin right now are just stupid
(irrational agents). You can merged mine and sell for btc right away.

On prime proof of work...for me it's interseting only because it's
moving towards SCIP-based mining but that should be the goal. Like
Mark said, "let's cure cancer" while mining. That would end all
"mining is wasteful" arguments about this great security system. This
would make Ripple's consensus mechanism less attractive. People
talking about new scrypts harder to ASIC-mine when that's the elephant
in the room...
Sorry, I'm going off-topic.
SCIP-based merged mining for the win.



On 7/15/13, Peter Todd <pete at petertodd.org> wrote:
> On Sat, Jul 13, 2013 at 11:32:39AM -0700, Peter Vessenes wrote:
>> One very real issue for alt-currencies that don't peg to Bitcoin is that
>> market liquidity is a bitch. By almost all standards current global
>> Bitcoin
>> liquidity is already very, very low. Too low for many transactions that
>> come across my desk at least.
>>
>> There are a lot of reasons for that low liquidity, but to try and float a
>> new pair for which the likely initial counter-asset is going to be
>> Bitcoin
>> means minuscule liquidity.
>
> Being able to have automated Bitcoin<->Zerocoin P2P trading without an
> exchange is also significantly more desirable from a privacy standpoint.
> Basically it reduces the privacy risks of doing the exchange to spending
> the Zerocoins in the first place.
>
> --
> 'peter'[:-1]@petertodd.org
> 00000000000000878c30a45104c48fd4e8037cb5b3ba1e14dc4d8bef72eff1be
>


-- 
Jorge Tim?n

http://freico.in/



From mike at plan99.net  Mon Jul 15 13:19:35 2013
From: mike at plan99.net (Mike Hearn)
Date: Mon, 15 Jul 2013 15:19:35 +0200
Subject: [Bitcoin-development] Introducing BitcoinKit.framework
In-Reply-To: <B87F1213-5BD8-43F5-9744-F69947561ED5@grabhive.com>
References: <B87F1213-5BD8-43F5-9744-F69947561ED5@grabhive.com>
Message-ID: <CANEZrP2xh=m8yWLt-o2UrrUVfU+cUYBuMVxkVFF5mVMtWdRwOQ@mail.gmail.com>

That's great! I'm all for more wallets, especially user friendly UIs.

However being based on bitcoind means it will take a very long time to
synchronize for new users. We know a lot of users drop out. The best fix
for this is SPV mode. Do you have any plans in this direction?

So far, the only SPV mode implementation I know about is bitcoinj. I am
experimenting with trans-piling bitcoinj to C++ to make it usable from
Objective-C++ exactly with your use case in mind.



On Mon, Jul 15, 2013 at 12:07 PM, Wendell <w at grabhive.com> wrote:

> Hi devs,
>
> Just wanted to cross-post this here since it seems very relevant.
>
> We're launching BitcoinKit.framework, a Cocoa framework that allows
> developers to write Bitcoin wallet apps for Mac OS X. BitcoinKit uses
> bitcoind, and serves a small and tidy API for developer use. Support for
> other Bitcoin implementations (libcbitcoin, etc) is soon to follow.
>
> BitcoinKit's first application is as the backbone of a new Mac wallet app
> called Hive, which will be released soon at www.grabhive.com.
>
> Grab the source here:
> https://github.com/grabhive/BitcoinKit
>
> Support is available via GitHub issues and this Bitcointalk thread:
> https://bitcointalk.org/index.php?topic=256583.msg2733523
>
> A sample GUI app is also included:
> http://imgur.com/FzqA00X
>
> Cheers everyone!
>
> -Wendell
>
> ------------------------------------------------------------------------------
> See everything from the browser to the database with AppDynamics
> Get end-to-end visibility with application monitoring from AppDynamics
> Isolate bottlenecks and diagnose root cause in seconds.
> Start your free trial of AppDynamics Pro today!
> http://pubads.g.doubleclick.net/gampad/clk?id=48808831&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130715/69a3df55/attachment.html>

From w at grabhive.com  Mon Jul 15 14:39:30 2013
From: w at grabhive.com (Wendell)
Date: Mon, 15 Jul 2013 16:39:30 +0200
Subject: [Bitcoin-development] Introducing BitcoinKit.framework
In-Reply-To: <CANEZrP2xh=m8yWLt-o2UrrUVfU+cUYBuMVxkVFF5mVMtWdRwOQ@mail.gmail.com>
References: <B87F1213-5BD8-43F5-9744-F69947561ED5@grabhive.com>
	<CANEZrP2xh=m8yWLt-o2UrrUVfU+cUYBuMVxkVFF5mVMtWdRwOQ@mail.gmail.com>
Message-ID: <C1727B41-AF61-44FA-BE17-5FE4425FDEA8@grabhive.com>

Hi Mike,

You are absolutely right about the synchronize time, it's one of our main frustration points right now and we clearly won't deliver the kind of user experience we want, without fixing this. Actually we were thinking of extending Jeff Garzik's picocoin as time permits, but the plan is far from concrete at the moment.

What you say about trans-piling bitcoinj is _really_ appealing. We discounted Java simply because an OS X JVM is no longer guaranteed, but otherwise bitcoinj is ideal for our purposes. How can we assist or otherwise accelerate such an effort?

-w

On Jul 15, 2013, at 3:19 PM, Mike Hearn wrote:

> That's great! I'm all for more wallets, especially user friendly UIs.
> 
> However being based on bitcoind means it will take a very long time to synchronize for new users. We know a lot of users drop out. The best fix for this is SPV mode. Do you have any plans in this direction?
> 
> So far, the only SPV mode implementation I know about is bitcoinj. I am experimenting with trans-piling bitcoinj to C++ to make it usable from Objective-C++ exactly with your use case in mind.




From mike at plan99.net  Mon Jul 15 15:48:41 2013
From: mike at plan99.net (Mike Hearn)
Date: Mon, 15 Jul 2013 17:48:41 +0200
Subject: [Bitcoin-development] Introducing BitcoinKit.framework
In-Reply-To: <C1727B41-AF61-44FA-BE17-5FE4425FDEA8@grabhive.com>
References: <B87F1213-5BD8-43F5-9744-F69947561ED5@grabhive.com>
	<CANEZrP2xh=m8yWLt-o2UrrUVfU+cUYBuMVxkVFF5mVMtWdRwOQ@mail.gmail.com>
	<C1727B41-AF61-44FA-BE17-5FE4425FDEA8@grabhive.com>
Message-ID: <CANEZrP0_H9+prDSF92q8a4QzP=fzDM6cTDv0+KcfV9NF9thkmw@mail.gmail.com>

Oracle provide an OSX JVM and will do so for the forseeable future, it's
also open source, so the community could carry on if they stopped. The
primary problem with the Oracle JVM is lack of retina support for Swing,
but if you'd write a Cocoa UI yourself then it doesn't matter of course as
Java won't handle any GUI stuff. Retina support for JavaFX2 (the
current-gen gui toolkit) is available in Java 8 so it's definitely being
actively developed, it's not abandoned or anything.

So the question then becomes, which is better:

a) Take bitcoinj completely out of the Java world via native compilation or
transpilation to C++
b) Embed the JVM and link the two worlds together?

(b) is much less ambitious, especially if you're OK with writing a bit of
Java code to keep the interface thin. Basically the Java side calls into
your app when interesting user-visible things happen, like new transactions
appearing, then your GUI can call into the java side to send money. There
are auto-translators that make the glue work easy, like
https://code.google.com/p/javacpp/. You probably wouldn't want to expose
the entire bitcoinj API that way because it's very large, but the code
needed to bring up a wallet app is very small. I knocked one up this
weekend in about one evenings worth of coding, completed with nice
animations. The interfaces you'd need are basically some Objective-C++
methods that receive information from the Bitcoin side, like the balance
having changed, a list of transactions, etc, and then a callback into the
Java side to send money. If you look at the javacpp site you can see
example code for making calls both ways.

If I were in your shoes, I'd go for (b) because it is the most well trodden
path and will let you achieve the best user visible results quickly. The
JVM can be bundled with your app and stripped down if you're worried about
download size.

If it's unclear how the code would look, let me know and I'll try and knock
up a really simple prototype.

There's also (a). I'm investigating transpilation for a few reasons, one of
which is to do with a private project. I'm working with the author of j2c:
https://code.google.com/a/eclipselabs.org/p/j2c/. It's a rather
sophisticated transpiler that converts Java to clean, readable C++11 that
looks much like code a human would write. It's complete enough to transpile
the entire standard Java class library, including all the GUI toolkits and
other things - so, pretty amazing piece of code. However it's incomplete
because where the Java code calls native methods (that would be provided by
the JVM) it just spits out stubs you're expected to fill out yourself, for
starting threads and so on. As there's no JVM it's just like using a C++
library that is missing a "portability layer".

I'm working on this myself and don't really need much help at the moment,
I'm just making steady progress towards getting something up and running. I
can let you know once I reach some interesting milestones. The point of
this is that whilst you don't need access to most of the API to write a
wallet app, I'd like to make every kind of app easy from C++, not just GUI
wallets. Then the compile-to-C++ approach is much more appealing, even
though it's also more work.





On Mon, Jul 15, 2013 at 4:39 PM, Wendell <w at grabhive.com> wrote:

> Hi Mike,
>
> You are absolutely right about the synchronize time, it's one of our main
> frustration points right now and we clearly won't deliver the kind of user
> experience we want, without fixing this. Actually we were thinking of
> extending Jeff Garzik's picocoin as time permits, but the plan is far from
> concrete at the moment.
>
> What you say about trans-piling bitcoinj is _really_ appealing. We
> discounted Java simply because an OS X JVM is no longer guaranteed, but
> otherwise bitcoinj is ideal for our purposes. How can we assist or
> otherwise accelerate such an effort?
>
> -w
>
> On Jul 15, 2013, at 3:19 PM, Mike Hearn wrote:
>
> > That's great! I'm all for more wallets, especially user friendly UIs.
> >
> > However being based on bitcoind means it will take a very long time to
> synchronize for new users. We know a lot of users drop out. The best fix
> for this is SPV mode. Do you have any plans in this direction?
> >
> > So far, the only SPV mode implementation I know about is bitcoinj. I am
> experimenting with trans-piling bitcoinj to C++ to make it usable from
> Objective-C++ exactly with your use case in mind.
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130715/d66cfde1/attachment.html>

From mike at plan99.net  Mon Jul 15 20:08:12 2013
From: mike at plan99.net (Mike Hearn)
Date: Mon, 15 Jul 2013 22:08:12 +0200
Subject: [Bitcoin-development] Introducing BitcoinKit.framework
In-Reply-To: <3E7894A0-06F3-453D-87F8-975A244EBACF@include7.ch>
References: <B87F1213-5BD8-43F5-9744-F69947561ED5@grabhive.com>
	<CANEZrP2xh=m8yWLt-o2UrrUVfU+cUYBuMVxkVFF5mVMtWdRwOQ@mail.gmail.com>
	<C1727B41-AF61-44FA-BE17-5FE4425FDEA8@grabhive.com>
	<CANEZrP0_H9+prDSF92q8a4QzP=fzDM6cTDv0+KcfV9NF9thkmw@mail.gmail.com>
	<3E7894A0-06F3-453D-87F8-975A244EBACF@include7.ch>
Message-ID: <CANEZrP2jmWkDbpJEm0vd2CKF-prFNbz_ZeNJfDWtSCKb8k5ZXA@mail.gmail.com>

You can cut down the JVM to be a few megabytes if you're aggressive about
it. But for a desktop app I'm not sure it's really necessary these days. A
few megabytes used to make a noticeable difference to success rates but
bandwidth improved a lot since then.

Portability to android is a given, it's already Java based. IOS is a non
starter until apple is convinced to allow wallet apps into the App store,
language is not the issue there.

There is no point manually rewriting bitcoinj to c++ when j2c does such a
great job already. You would want to at last start from what it generates
even if you fork from there.
On 15 Jul 2013 20:19, "Jonas Schnelli" <jonas.schnelli at include7.ch> wrote:

> The embedded JVM is a way. But the binary will be huge.
> And how about the portability (like iOS and Android)?
>
> If i would have "unlimited resources" and like to make a "perfect native
> client" i would see two solutions:
> a) add SPV features to bitcoind and go on with BitcoinKit.framework (maybe
> first SPV features are only available through "API's" and not for bitcoind
> as runnable binary)
> b) rewrite bitcoinj in c++ (*auto-port the unit-tests* and try to rewrite
> line by line to c++)
>
> also a mix of a) and b) is possible. Like extending bitcoind with the
> SPVBlockstore, bloom filter, etc. from bitcoinj (rewritten in c++). The
> wallet birthday must also be added somehow.
>
> both a) and b) (or the mix) is a lot of work and might take much longer as
> Mike's JVM idea.
> But it then might end up in a stable, portable and extendable pice of code.
>
> </jonas>
>
>
>
> Oracle provide an OSX JVM and will do so for the forseeable future, it's
> also open source, so the community could carry on if they stopped. The
> primary problem with the Oracle JVM is lack of retina support for Swing,
> but if you'd write a Cocoa UI yourself then it doesn't matter of course as
> Java won't handle any GUI stuff. Retina support for JavaFX2 (the
> current-gen gui toolkit) is available in Java 8 so it's definitely being
> actively developed, it's not abandoned or anything.
>
> So the question then becomes, which is better:
>
> a) Take bitcoinj completely out of the Java world via native compilation
> or transpilation to C++
> b) Embed the JVM and link the two worlds together?
>
> (b) is much less ambitious, especially if you're OK with writing a bit of
> Java code to keep the interface thin. Basically the Java side calls into
> your app when interesting user-visible things happen, like new transactions
> appearing, then your GUI can call into the java side to send money. There
> are auto-translators that make the glue work easy, like
> https://code.google.com/p/javacpp/. You probably wouldn't want to expose
> the entire bitcoinj API that way because it's very large, but the code
> needed to bring up a wallet app is very small. I knocked one up this
> weekend in about one evenings worth of coding, completed with nice
> animations. The interfaces you'd need are basically some Objective-C++
> methods that receive information from the Bitcoin side, like the balance
> having changed, a list of transactions, etc, and then a callback into the
> Java side to send money. If you look at the javacpp site you can see
> example code for making calls both ways.
>
> If I were in your shoes, I'd go for (b) because it is the most well
> trodden path and will let you achieve the best user visible results
> quickly. The JVM can be bundled with your app and stripped down if you're
> worried about download size.
>
> If it's unclear how the code would look, let me know and I'll try and
> knock up a really simple prototype.
>
> There's also (a). I'm investigating transpilation for a few reasons, one
> of which is to do with a private project. I'm working with the author of
> j2c: https://code.google.com/a/eclipselabs.org/p/j2c/. It's a rather
> sophisticated transpiler that converts Java to clean, readable C++11 that
> looks much like code a human would write. It's complete enough to transpile
> the entire standard Java class library, including all the GUI toolkits and
> other things - so, pretty amazing piece of code. However it's incomplete
> because where the Java code calls native methods (that would be provided by
> the JVM) it just spits out stubs you're expected to fill out yourself, for
> starting threads and so on. As there's no JVM it's just like using a C++
> library that is missing a "portability layer".
>
> I'm working on this myself and don't really need much help at the moment,
> I'm just making steady progress towards getting something up and running. I
> can let you know once I reach some interesting milestones. The point of
> this is that whilst you don't need access to most of the API to write a
> wallet app, I'd like to make every kind of app easy from C++, not just GUI
> wallets. Then the compile-to-C++ approach is much more appealing, even
> though it's also more work.
>
>
>
>
>
> On Mon, Jul 15, 2013 at 4:39 PM, Wendell <w at grabhive.com> wrote:
>
>> Hi Mike,
>>
>> You are absolutely right about the synchronize time, it's one of our main
>> frustration points right now and we clearly won't deliver the kind of user
>> experience we want, without fixing this. Actually we were thinking of
>> extending Jeff Garzik's picocoin as time permits, but the plan is far from
>> concrete at the moment.
>>
>> What you say about trans-piling bitcoinj is _really_ appealing. We
>> discounted Java simply because an OS X JVM is no longer guaranteed, but
>> otherwise bitcoinj is ideal for our purposes. How can we assist or
>> otherwise accelerate such an effort?
>>
>> -w
>>
>> On Jul 15, 2013, at 3:19 PM, Mike Hearn wrote:
>>
>> > That's great! I'm all for more wallets, especially user friendly UIs.
>> >
>> > However being based on bitcoind means it will take a very long time to
>> synchronize for new users. We know a lot of users drop out. The best fix
>> for this is SPV mode. Do you have any plans in this direction?
>> >
>> > So far, the only SPV mode implementation I know about is bitcoinj. I am
>> experimenting with trans-piling bitcoinj to C++ to make it usable from
>> Objective-C++ exactly with your use case in mind.
>>
>>
>
> ------------------------------------------------------------------------------
> See everything from the browser to the database with AppDynamics
> Get end-to-end visibility with application monitoring from AppDynamics
> Isolate bottlenecks and diagnose root cause in seconds.
> Start your free trial of AppDynamics Pro today!
>
> http://pubads.g.doubleclick.net/gampad/clk?id=48808831&iu=/4140/ostg.clktrk_______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
> ??????????????????????????????????????????????????
> include7 AG
> Jonas Schnelli
> Mattengasse 27
> CH-8005 Z?rich
> Switzerland
> Office: +41 44 500 16 70
>
> Mail: jonas.schnelli at include7.ch
> Web: www.include7.ch
> V-Card: www.include7.ch/js.vcf
> ??????????????????????????????????????????????????
>
> ACHTUNG
> Bitte senden sie uns keine sensitiven Daten in unverschl?sselten E-Mails.
> Verwenden Sie hierzu folgenden Link:
> https://include7.ch/contact/secureform
>
> ??????????????????????????????????????????????????
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130715/3c8e94e0/attachment.html>

From pete at petertodd.org  Mon Jul 15 20:29:09 2013
From: pete at petertodd.org (Peter Todd)
Date: Mon, 15 Jul 2013 16:29:09 -0400
Subject: [Bitcoin-development] libzerocoin released,
 what about a zerocoin-only alt-coin with either-or mining
In-Reply-To: <CAC1+kJO+dWdr=7uHx4Qokpsir6+B-VCaweOe-_YG0OHvYwCA=w@mail.gmail.com>
References: <20130705140140.GA23949@netbook.cypherspace.org>
	<20130712131815.GA18716@petertodd.org>
	<CAC1+kJOerE75+rtMHiy27aDLwWC9juAYva4u_iMVihnePTOYig@mail.gmail.com>
	<CAC1+kJN9G_OcX8+Vr6gLgM+KRNDzYtijjWxwmcA=yrKhU_fWkQ@mail.gmail.com>
	<CAMGNxUtnYy0qtdRw3Pz2xV9xztEg317MRs0_mNMEWGE5oAxnig@mail.gmail.com>
	<20130715095107.GA8828@savin>
	<CAC1+kJO+dWdr=7uHx4Qokpsir6+B-VCaweOe-_YG0OHvYwCA=w@mail.gmail.com>
Message-ID: <20130715202909.GA9286@petertodd.org>

On Mon, Jul 15, 2013 at 03:05:52PM +0200, Jorge Tim?n wrote:
> One way sacrifice (btc to zerocoin) is a non-issue since there's no
> modification required for bitcoin and you can't do anything to prevent
> it anyway.
> The controversial thing is sacrificing something outside bitcoin's
> chain and new btc appearing.

Which is why I'm not proposing that.

> On merged mining. It is true that "merged attacking" the other chain
> is free, but it is still more profitable to just follow the rules and
> mine the other coin!!
> If someone considers that something he can sell in a market for btc is
> "negative value"...well, he's just dammed stupid. Proof of work is
> designed for rational actors, if you stop assuming miners are more or
> less rational everything falls apart. It is possible that the "extra
> value" is too little for some miners to bother. But the extra costs of
> validating something else are so little compared to chance-hashing
> that miners not merged mining namecoin right now are just stupid
> (irrational agents). You can merged mine and sell for btc right away.

You are assuming value is the same for everyone - it's not.

If I mine in a jurisdiction where zerocoin is banned, and the blocks I
mine are public, the value of zerocoin blocks to me are at best zero.
Equally it would be easy for the local authorities to ask that I merge
mine zerocoin blocks to attack the chain - it doesn't cost me anything
so what's the harm? I may even choose to do so to preserve the value of
the coins I can mine legally - alt-coins are competition.

Incedentally keep in mind it is likely that in the future pools will not
allow miners to modify the work units they receive in any way as a means
of combating block-withholding fraud; there may not be very many people
willing or able to honestly merge-mine any given chain.

Proof-of-sacrifice can be done in a way that is opaque to the master
blockchain by creating txouts that look no different from any other
txout. Hopefully not required, but it would be a good strategy against
censorship of sacrifice-based chains.

> On prime proof of work...for me it's interseting only because it's
> moving towards SCIP-based mining but that should be the goal. Like
> Mark said, "let's cure cancer" while mining. That would end all
> "mining is wasteful" arguments about this great security system. This
> would make Ripple's consensus mechanism less attractive. People
> talking about new scrypts harder to ASIC-mine when that's the elephant
> in the room...
> Sorry, I'm going off-topic.
> SCIP-based merged mining for the win.

SCIP is for now a dream. Give it a few more years and see how the
technology shakes out.

-- 
'peter'[:-1]@petertodd.org
00000000000000582cc323897a582e9368a5c3dfbcdcf73e78b261703e1bd1ba
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 198 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130715/53ad02b2/attachment.sig>

From peter at coinlab.com  Tue Jul 16 03:54:23 2013
From: peter at coinlab.com (Peter Vessenes)
Date: Mon, 15 Jul 2013 21:54:23 -0600
Subject: [Bitcoin-development] libzerocoin released,
 what about a zerocoin-only alt-coin with either-or mining
In-Reply-To: <20130715202909.GA9286@petertodd.org>
References: <20130705140140.GA23949@netbook.cypherspace.org>
	<20130712131815.GA18716@petertodd.org>
	<CAC1+kJOerE75+rtMHiy27aDLwWC9juAYva4u_iMVihnePTOYig@mail.gmail.com>
	<CAC1+kJN9G_OcX8+Vr6gLgM+KRNDzYtijjWxwmcA=yrKhU_fWkQ@mail.gmail.com>
	<CAMGNxUtnYy0qtdRw3Pz2xV9xztEg317MRs0_mNMEWGE5oAxnig@mail.gmail.com>
	<20130715095107.GA8828@savin>
	<CAC1+kJO+dWdr=7uHx4Qokpsir6+B-VCaweOe-_YG0OHvYwCA=w@mail.gmail.com>
	<20130715202909.GA9286@petertodd.org>
Message-ID: <CAMGNxUv91eHNtSk61-wL=jnXjUCJBAAMdS2YCbkefFj3o4Jc9A@mail.gmail.com>

I'm at the Aspen Institute right now talking about Bitcoin and I mentioned
the perils of starting an alt-chain based on proof of work that pool
operators might attack; funny synchronicity!

Peter


On Mon, Jul 15, 2013 at 2:29 PM, Peter Todd <pete at petertodd.org> wrote:

> On Mon, Jul 15, 2013 at 03:05:52PM +0200, Jorge Tim?n wrote:
> > One way sacrifice (btc to zerocoin) is a non-issue since there's no
> > modification required for bitcoin and you can't do anything to prevent
> > it anyway.
> > The controversial thing is sacrificing something outside bitcoin's
> > chain and new btc appearing.
>
> Which is why I'm not proposing that.
>
> > On merged mining. It is true that "merged attacking" the other chain
> > is free, but it is still more profitable to just follow the rules and
> > mine the other coin!!
> > If someone considers that something he can sell in a market for btc is
> > "negative value"...well, he's just dammed stupid. Proof of work is
> > designed for rational actors, if you stop assuming miners are more or
> > less rational everything falls apart. It is possible that the "extra
> > value" is too little for some miners to bother. But the extra costs of
> > validating something else are so little compared to chance-hashing
> > that miners not merged mining namecoin right now are just stupid
> > (irrational agents). You can merged mine and sell for btc right away.
>
> You are assuming value is the same for everyone - it's not.
>
> If I mine in a jurisdiction where zerocoin is banned, and the blocks I
> mine are public, the value of zerocoin blocks to me are at best zero.
> Equally it would be easy for the local authorities to ask that I merge
> mine zerocoin blocks to attack the chain - it doesn't cost me anything
> so what's the harm? I may even choose to do so to preserve the value of
> the coins I can mine legally - alt-coins are competition.
>
> Incedentally keep in mind it is likely that in the future pools will not
> allow miners to modify the work units they receive in any way as a means
> of combating block-withholding fraud; there may not be very many people
> willing or able to honestly merge-mine any given chain.
>
> Proof-of-sacrifice can be done in a way that is opaque to the master
> blockchain by creating txouts that look no different from any other
> txout. Hopefully not required, but it would be a good strategy against
> censorship of sacrifice-based chains.
>
> > On prime proof of work...for me it's interseting only because it's
> > moving towards SCIP-based mining but that should be the goal. Like
> > Mark said, "let's cure cancer" while mining. That would end all
> > "mining is wasteful" arguments about this great security system. This
> > would make Ripple's consensus mechanism less attractive. People
> > talking about new scrypts harder to ASIC-mine when that's the elephant
> > in the room...
> > Sorry, I'm going off-topic.
> > SCIP-based merged mining for the win.
>
> SCIP is for now a dream. Give it a few more years and see how the
> technology shakes out.
>
> --
> 'peter'[:-1]@petertodd.org
> 00000000000000582cc323897a582e9368a5c3dfbcdcf73e78b261703e1bd1ba
>



-- 

------------------------------

[image: CoinLab Logo]PETER VESSENES
CEO

*peter at coinlab.com * /  206.486.6856  / SKYPE: vessenes
900 Winslow Way East / SUITE 100  /  Bainbridge Island, WA 98110
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130715/d32dcc9b/attachment.html>

From mike at plan99.net  Tue Jul 16 09:21:40 2013
From: mike at plan99.net (Mike Hearn)
Date: Tue, 16 Jul 2013 11:21:40 +0200
Subject: [Bitcoin-development] Introducing BitcoinKit.framework
In-Reply-To: <2BDA0943-22BB-4405-9AF0-86FB41FD04A6@include7.ch>
References: <B87F1213-5BD8-43F5-9744-F69947561ED5@grabhive.com>
	<CANEZrP2xh=m8yWLt-o2UrrUVfU+cUYBuMVxkVFF5mVMtWdRwOQ@mail.gmail.com>
	<C1727B41-AF61-44FA-BE17-5FE4425FDEA8@grabhive.com>
	<CANEZrP0_H9+prDSF92q8a4QzP=fzDM6cTDv0+KcfV9NF9thkmw@mail.gmail.com>
	<3E7894A0-06F3-453D-87F8-975A244EBACF@include7.ch>
	<CANEZrP2jmWkDbpJEm0vd2CKF-prFNbz_ZeNJfDWtSCKb8k5ZXA@mail.gmail.com>
	<2BDA0943-22BB-4405-9AF0-86FB41FD04A6@include7.ch>
Message-ID: <CANEZrP0McSrVzwv=-qimPyX41EEDmyQdYW5QjPr_i+KWyJZSZw@mail.gmail.com>

> Clear. Your right. C++ would give us more flexibility (other platforms)
> and also android compatibility (through NDK).
>

I'm a bit confused I'm afraid. bitcoinj already runs SPV wallets on Android
on top of Dalvik. In fact that's what it's designed for. The NDK is not
necessary to work with Bitcoin at any point.


> That's a great idea.
> Let me look into the quality of j2c's output.
>

There's an example of what it looks like here:

https://code.google.com/a/eclipselabs.org/p/j2c/wiki/Examples

If you're serious about playing with j2c let me know. It's an amazing piece
of work BUT it was written for fun, and as such isn't really documented at
all. It took me a little while to figure out how to make it work properly.
I'm now fixing bugs in it and making various improvements along with
filling out the native stubs (a.k.a. portability layer). If you want to
catch up to where I'm at, I can send you some notes because otherwise you
might waste a lot of time on blind alleys.

The main things be aware of so far are:

   - Lots of explicit null pointer checks are generated. The reason is that
   the output is meant to be entirely portable, so Jacek doesn't want to rely
   on platform specific stuff like signals or SEH. Simplest solution is just
   to disable npc() generation entirely because normal C++ libraries just
   segfault if a null pointer gets in the wrong place, they don't throw
   exceptions. Losing the Java behaviour would not be a downgrade for people
   used to C++.

   - Array accesses don't seem to be properly bounds-checked. That's a part
   of the Java security model - bitcoinj is written on the assumption that
   buffer and heap overflows aren't possible because they're caught by the
   runtime. If those checks go missing then it'd likely become possible to
   hack your program by exploiting buffer overflows. So that needs to be fixed.

   - Generated code doesn't use the STL of course, it can't because the
   Java library has more features than the STL. However as the way j2c works
   is you transpile your code alongside a copy of the (open source) Java class
   library, you can go in and modify the generated code for java::lang::String
   or java::util::List and so on to add helper methods for converting to
   various other forms. On Linux you'd have implicit c'tors to go back and
   forth between std::string, on MacOS X you'd have conversions for NSString,
   you could add code for QStrings or raw C strings too. Once the code has
   been generated you can extend or patch it to make the API more convenient.

   - Obviously, the resulting code requires the Boehm GC because there are
   no explicit delete calls anywhere. This is a safety feature though, it
   avoids use-after-free and double-free bugs that can create security holes.

   - The code generator doesn't do dependency tracing, so you end up with
   generated code that isn't used anywhere. It's up to the linker to do a dead
   code elimination pass. Otherwise the resulting binaries can be huge.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130716/1a743665/attachment.html>

From mike at plan99.net  Tue Jul 16 09:51:57 2013
From: mike at plan99.net (Mike Hearn)
Date: Tue, 16 Jul 2013 11:51:57 +0200
Subject: [Bitcoin-development] Introducing BitcoinKit.framework
In-Reply-To: <2F20A509-13A9-4C84-86D7-A15C21BACD53@include7.ch>
References: <B87F1213-5BD8-43F5-9744-F69947561ED5@grabhive.com>
	<CANEZrP2xh=m8yWLt-o2UrrUVfU+cUYBuMVxkVFF5mVMtWdRwOQ@mail.gmail.com>
	<C1727B41-AF61-44FA-BE17-5FE4425FDEA8@grabhive.com>
	<CANEZrP0_H9+prDSF92q8a4QzP=fzDM6cTDv0+KcfV9NF9thkmw@mail.gmail.com>
	<3E7894A0-06F3-453D-87F8-975A244EBACF@include7.ch>
	<CANEZrP2jmWkDbpJEm0vd2CKF-prFNbz_ZeNJfDWtSCKb8k5ZXA@mail.gmail.com>
	<2BDA0943-22BB-4405-9AF0-86FB41FD04A6@include7.ch>
	<CANEZrP0McSrVzwv=-qimPyX41EEDmyQdYW5QjPr_i+KWyJZSZw@mail.gmail.com>
	<2F20A509-13A9-4C84-86D7-A15C21BACD53@include7.ch>
Message-ID: <CANEZrP2yQvmvwP_ZULdS2i+X6L9MeZ+DfidiuZPD2EHwLsN2MA@mail.gmail.com>

Let's re-add the list as this is a topic of general interest.

On Tue, Jul 16, 2013 at 11:36 AM, Jonas Schnelli <jonas.schnelli at include7.ch
> wrote:

> What do you think about extending the BitcoinKit.framework (based on
> bitcoind) so that the kit could handle the very basic SPV concept
> (getHeaders aka fast catchup, wallet-birthday, bloom filters)?
> Maybe it would be possible to only port some of the bitcoinj work to c++
> (and use it for extending BitcoinKit or bitcoind)?
> Maybe then it could also be a starting point for someone who likes to
> create a SPV mode for bitcoind?
>

Making bitcoind/Bitcoin-Qt support SPV mode was the original plan some
years ago, Satoshi even sent me some code he wrote that did the first
parts, but it was incomplete.

At the time, I decided to do a separate implementation for a few different
reasons. One is that my understanding of his code wasn't so good back then
and I lacked confidence to change it. Especially as there were no unit
tests back then (and still aren't any for most of it), making invasive
changes to the core validation code was and is highly risky. A separate
code base seemed to reduce the risk a lot.

Another reason is that Satoshi encouraged me to write a simple
re-implementation that people could learn from. And I wanted a documented,
object oriented API that people could use to build a variety of apps.

Yet another reason was bitcoind is security critical code that scrapes
complex data structures from untrusted sources on the internet, and it's
written in an unmanaged language. Ordinarily this would be a recipe for
disaster as a single overflow or memory management error could lead to
hacking and theft on a massive scale. It's like taking a chainsaw and using
it to carve an ice sculpture. Satoshi, incredibly, pulled it off, mostly by
using advanced C++ features that made his code hard to read for many people
and by being very, very careful. I was not convinced I could do such a good
job and was worried about accidentally introducing vulnerabilities.

A final reason is that it was clear that the bitcoind codebase would need
serious changes for mobiles, beyond that required for ordinary SPV support.
For example, Satoshi's code assumes it has access to block headers via a
std::map and that assumption is made in a lot of places. On Android phones,
you can't fit all the block headers in RAM. bitcoinj uses a circular ring
buffer of the last N thousand headers for this reason. It's quite different
to how bitcoind works.

All that said, it was a ton of work and it's still unclear that it was the
right call.

Anyway, your situation is a little different. Firstly you don't care about
mobiles, your app is intended for desktops. So the changes required are
less invasive. Also, there are more unit tests and more people with a good
understanding of the code these days, so perhaps the risk of introducing
bugs is lower. And these days we have some nice APIs for building apps so
that need is already met.

If you wanted to implement SPV mode in bitcoind, Gavin or I could send you
Satoshi's old patch although of course it is no longer usable. It would
indicate the basic cut lines though.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130716/1f7b2a9c/attachment.html>

From w at grabhive.com  Tue Jul 16 10:17:46 2013
From: w at grabhive.com (Wendell)
Date: Tue, 16 Jul 2013 12:17:46 +0200
Subject: [Bitcoin-development] Introducing BitcoinKit.framework
In-Reply-To: <CANEZrP2yQvmvwP_ZULdS2i+X6L9MeZ+DfidiuZPD2EHwLsN2MA@mail.gmail.com>
References: <B87F1213-5BD8-43F5-9744-F69947561ED5@grabhive.com>
	<CANEZrP2xh=m8yWLt-o2UrrUVfU+cUYBuMVxkVFF5mVMtWdRwOQ@mail.gmail.com>
	<C1727B41-AF61-44FA-BE17-5FE4425FDEA8@grabhive.com>
	<CANEZrP0_H9+prDSF92q8a4QzP=fzDM6cTDv0+KcfV9NF9thkmw@mail.gmail.com>
	<3E7894A0-06F3-453D-87F8-975A244EBACF@include7.ch>
	<CANEZrP2jmWkDbpJEm0vd2CKF-prFNbz_ZeNJfDWtSCKb8k5ZXA@mail.gmail.com>
	<2BDA0943-22BB-4405-9AF0-86FB41FD04A6@include7.ch>
	<CANEZrP0McSrVzwv=-qimPyX41EEDmyQdYW5QjPr_i+KWyJZSZw@mail.gmail.com>
	<2F20A509-13A9-4C84-86D7-A15C21BACD53@include7.ch>
	<CANEZrP2yQvmvwP_ZULdS2i+X6L9MeZ+DfidiuZPD2EHwLsN2MA@mail.gmail.com>
Message-ID: <2A1C412D-414E-4C41-8E20-F0D21F801328@grabhive.com>

I for one would be interested in taking a look at that.

In San Jose I was asking around about the possibility of hiring someone to complete such a patch. Pieter Wuille introduced me to Eric Lombrozo, who expressed interest, but has since gotten quite busy. So we haven't arrived at a detailed estimate of what it would involve.

Maybe it would be better to start a completely new thread for this topic, but I would very much be interested in an open dissection of what adding SPV support to bitcoind would take. I am willing to fund or (ideally) co-fund this endeavor, if I can ever get my head around it. I'm super interested in all of these possibilities (including micro-stripped-VMs and transpilation), but would simply like to encourage the proliferation of _options_ whenever possible.

-wendell

grabhive.com | twitter.com/grabhive

On Jul 16, 2013, at 11:51 AM, Mike Hearn wrote:

> If you wanted to implement SPV mode in bitcoind, Gavin or I could send you Satoshi's old patch although of course it is no longer usable. It would indicate the basic cut lines though. 




From w at grabhive.com  Tue Jul 16 14:16:23 2013
From: w at grabhive.com (Wendell)
Date: Tue, 16 Jul 2013 16:16:23 +0200
Subject: [Bitcoin-development] SPV bitcoind? (was: Introducing
	BitcoinKit.framework)
In-Reply-To: <CANEZrP12V_5Ak0f91RsMziuqXysde102rGeSko=qPBjefy3AeA@mail.gmail.com>
References: <B87F1213-5BD8-43F5-9744-F69947561ED5@grabhive.com>
	<CANEZrP2xh=m8yWLt-o2UrrUVfU+cUYBuMVxkVFF5mVMtWdRwOQ@mail.gmail.com>
	<C1727B41-AF61-44FA-BE17-5FE4425FDEA8@grabhive.com>
	<CANEZrP0_H9+prDSF92q8a4QzP=fzDM6cTDv0+KcfV9NF9thkmw@mail.gmail.com>
	<3E7894A0-06F3-453D-87F8-975A244EBACF@include7.ch>
	<CANEZrP2jmWkDbpJEm0vd2CKF-prFNbz_ZeNJfDWtSCKb8k5ZXA@mail.gmail.com>
	<2BDA0943-22BB-4405-9AF0-86FB41FD04A6@include7.ch>
	<CANEZrP0McSrVzwv=-qimPyX41EEDmyQdYW5QjPr_i+KWyJZSZw@mail.gmail.com>
	<2F20A509-13A9-4C84-86D7-A15C21BACD53@include7.ch>
	<CANEZrP2yQvmvwP_ZULdS2i+X6L9MeZ+DfidiuZPD2EHwLsN2MA@mail.gmail.com>
	<2A1C412D-414E-4C41-8E20-F0D21F801328@grabhive.com>
	<CANEZrP12V_5Ak0f91RsMziuqXysde102rGeSko=qPBjefy3AeA@mail.gmail.com>
Message-ID: <8EE501AA-1601-4C28-A32E-80F17D219D3A@grabhive.com>

Hello everyone,

In the previous thread, I expressed interest in seeing an SPV bitcoind, further stating that I would fund such work. Mike Hearn followed up with some of Satoshi's old code for this, which is now quite broken. The offer and interest on my side still stand, as more diversity in SPV options seems like the right way to go.

Time-permitting, I would really appreciate feedback from knowledgable parties about the possible approaches to an SPV bitcoind. We at Hive ideally want to see something that could one be merge into master, rather than a fork.

-wendell

grabhive.com | twitter.com/grabhive




From mike at plan99.net  Tue Jul 16 15:09:19 2013
From: mike at plan99.net (Mike Hearn)
Date: Tue, 16 Jul 2013 17:09:19 +0200
Subject: [Bitcoin-development] SPV bitcoind? (was: Introducing
	BitcoinKit.framework)
In-Reply-To: <8EE501AA-1601-4C28-A32E-80F17D219D3A@grabhive.com>
References: <B87F1213-5BD8-43F5-9744-F69947561ED5@grabhive.com>
	<CANEZrP2xh=m8yWLt-o2UrrUVfU+cUYBuMVxkVFF5mVMtWdRwOQ@mail.gmail.com>
	<C1727B41-AF61-44FA-BE17-5FE4425FDEA8@grabhive.com>
	<CANEZrP0_H9+prDSF92q8a4QzP=fzDM6cTDv0+KcfV9NF9thkmw@mail.gmail.com>
	<3E7894A0-06F3-453D-87F8-975A244EBACF@include7.ch>
	<CANEZrP2jmWkDbpJEm0vd2CKF-prFNbz_ZeNJfDWtSCKb8k5ZXA@mail.gmail.com>
	<2BDA0943-22BB-4405-9AF0-86FB41FD04A6@include7.ch>
	<CANEZrP0McSrVzwv=-qimPyX41EEDmyQdYW5QjPr_i+KWyJZSZw@mail.gmail.com>
	<2F20A509-13A9-4C84-86D7-A15C21BACD53@include7.ch>
	<CANEZrP2yQvmvwP_ZULdS2i+X6L9MeZ+DfidiuZPD2EHwLsN2MA@mail.gmail.com>
	<2A1C412D-414E-4C41-8E20-F0D21F801328@grabhive.com>
	<CANEZrP12V_5Ak0f91RsMziuqXysde102rGeSko=qPBjefy3AeA@mail.gmail.com>
	<8EE501AA-1601-4C28-A32E-80F17D219D3A@grabhive.com>
Message-ID: <CANEZrP0ZG+91Bm9odkNWYja52_MLTgDz6DSGkPzNJLGteDpF-w@mail.gmail.com>

You'd want to create and get merged patches in the following order:

1) Be able to store just block headers in the blkXXXX.dat files instead of
full block contents. At this point you are still *downloading* full blocks,
but they are not being stored. The contents are still sent to the wallet
for extracting relevant transactions though (see SyncWithWallets).  You
also need to disable listening and addr announcements to the P2P network at
this point. You need to be able to re-org and do all the usual things
without storing block contents. You also need to short-circuit the leveldbs
so they aren't created or used. All that needs to be unit tested. You need
to also rewrite the mempool logic so it throws out irrelevant transactions.
The RPC interface needs to adjust itself so you can't try to start mining,
query the utxo set, etc.

At this point you have an SPV node, albeit one that still downloads the
entire block chain. However total disk storage used will be much lower.
Getting this written and reviewed is a big chunk of work but is the hardest
part. Once it's done you can breath easy.

2) Next step, use getheaders to catch up with the chain until the
min(wallet birthdays) is reached. You can see in Satoshi's patch where he
adds support for receiving "headers" messages. Because key times are
recorded as dates and you don't know the dates of blocks in advance, you
need to download headers until you see one that goes past the key birthday
minus some slack period, then throw out the headers you downloaded and
switch to downloading full blocks again from that point onwards.

3) Next step, implement client side support for Bloom filtering. Switch
from downloading full blocks to filteredblocks, verify the Merkle branches
then apply them to the wallet. Watch out for accidental re-orderings of
transactions here from block order (e.g. if you accidentally insert them
into a std::map or other unordered collection it can lead to bugs). Come up
with some way to decide on a FP rate. Probably you want a fairly high FP
rate for desktop wallets.

4) Next step (optional), implement monitoring of broadcast propagation for
transactions that are received. SPV clients cannot verify unconfirmed
transactions so you can either just give up entirely and accept any old
garbage, or assume a non-MITMd internet connection and use network
propagation as a rough proxy for "likely to be valid and mined upon".

4) Optimize!

How much you need to optimize really depends on a lot of things. I found
that to be competitive with Electrum/blockchain.info I had to do a ton of
optimizations including very aggressive checkpointing so new users don't
have to download more than a month or twos worth of headers, as downloading
all the headers was becoming a bottleneck. You'd need to download about
16mb+ of data at the moment to grab all the headers and on a weakass mobile
phone with a weak Dalvik VM and 3G internet this was way too much. I also
had to spend some time profiling to ensure we weren't accidentally
thrashing the UI due to too-fast updates, we weren't bottlenecking on
updating last seen block data in the wallet, we weren't accidentally
de/reserializing messages redundantly etc.

After about 3-4 evenings of non-stop profiling and optimising I ended up
with a relatively flat profile whilst doing initial catchup and chain sync.
On a desktop I bet you can get away with much less optimisation because
your CPUs, network and disk tend to be much stronger.



On Tue, Jul 16, 2013 at 4:16 PM, Wendell <w at grabhive.com> wrote:

> Hello everyone,
>
> In the previous thread, I expressed interest in seeing an SPV bitcoind,
> further stating that I would fund such work. Mike Hearn followed up with
> some of Satoshi's old code for this, which is now quite broken. The offer
> and interest on my side still stand, as more diversity in SPV options seems
> like the right way to go.
>
> Time-permitting, I would really appreciate feedback from knowledgable
> parties about the possible approaches to an SPV bitcoind. We at Hive
> ideally want to see something that could one be merge into master, rather
> than a fork.
>
> -wendell
>
> grabhive.com | twitter.com/grabhive
>
>
>
> ------------------------------------------------------------------------------
> See everything from the browser to the database with AppDynamics
> Get end-to-end visibility with application monitoring from AppDynamics
> Isolate bottlenecks and diagnose root cause in seconds.
> Start your free trial of AppDynamics Pro today!
> http://pubads.g.doubleclick.net/gampad/clk?id=48808831&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130716/0e2c8341/attachment.html>

From pete at petertodd.org  Wed Jul 17 10:58:53 2013
From: pete at petertodd.org (Peter Todd)
Date: Wed, 17 Jul 2013 06:58:53 -0400
Subject: [Bitcoin-development] SPV bitcoind? (was: Introducing
 BitcoinKit.framework)
In-Reply-To: <8EE501AA-1601-4C28-A32E-80F17D219D3A@grabhive.com>
References: <CANEZrP0_H9+prDSF92q8a4QzP=fzDM6cTDv0+KcfV9NF9thkmw@mail.gmail.com>
	<3E7894A0-06F3-453D-87F8-975A244EBACF@include7.ch>
	<CANEZrP2jmWkDbpJEm0vd2CKF-prFNbz_ZeNJfDWtSCKb8k5ZXA@mail.gmail.com>
	<2BDA0943-22BB-4405-9AF0-86FB41FD04A6@include7.ch>
	<CANEZrP0McSrVzwv=-qimPyX41EEDmyQdYW5QjPr_i+KWyJZSZw@mail.gmail.com>
	<2F20A509-13A9-4C84-86D7-A15C21BACD53@include7.ch>
	<CANEZrP2yQvmvwP_ZULdS2i+X6L9MeZ+DfidiuZPD2EHwLsN2MA@mail.gmail.com>
	<2A1C412D-414E-4C41-8E20-F0D21F801328@grabhive.com>
	<CANEZrP12V_5Ak0f91RsMziuqXysde102rGeSko=qPBjefy3AeA@mail.gmail.com>
	<8EE501AA-1601-4C28-A32E-80F17D219D3A@grabhive.com>
Message-ID: <20130717105853.GA10083@savin>

On Tue, Jul 16, 2013 at 04:16:23PM +0200, Wendell wrote:
> Hello everyone,
> 
> In the previous thread, I expressed interest in seeing an SPV bitcoind, further stating that I would fund such work. Mike Hearn followed up with some of Satoshi's old code for this, which is now quite broken. The offer and interest on my side still stand, as more diversity in SPV options seems like the right way to go.
> 
> Time-permitting, I would really appreciate feedback from knowledgable parties about the possible approaches to an SPV bitcoind. We at Hive ideally want to see something that could one be merge into master, rather than a fork.

Keep in mind that SPV mode is newer than many realize: bloom filters are
a 0.8 feature, itself released only last Febuary. As John Dillon posted
earlier this week in "Protecting Bitcoin against network-wide DoS
attack" the Bitcoin codebase will have to implement much better anti-DoS
attack defences soon, and in a decentralized system there aren't any
options other than requiring peers to either do work (useful or not) or
sacrifice something of value. SPV peers can't do useful work, leaving
only sacrifice - to what extent and how much is unknown. In addition SPV
nodes have serious privacy issues because their peers know that any
transaction sent to them by the SPV node is guaranteed to be from the
node rather than relayed; bloom filters are only really helpful with
payment protocols that don't exist yet and don't apply to merchants.
Then you have MITM problems, vulnerability to fake blocks etc.

It'll be awhile before we know how serious these issues are in practice,
and we're likely to find new issues we didn't think of too. In any case
Bitcoin is far better off if we make it easy to run a full node,
donating whatever resources you can. Fortunately there's a whole
continuum between SPV and full nodes.

The way you do this is by maintaining partial UTXO sets. The trick is
that if you have verified every block in some range i to j, every time
you see a txout created by a transaction, and not subsequently spent,
you can be sure that at height j the txout existed. If height j is the
current block, you can be sure the txout exists provided that the chain
itself is valid. Any transaction that only spends txouts in this partial
set is a transaction you can fully verify and safely relay; for other
transactions you just don't know and have to wait until you see them in
a block.

So what's useful about that? Basically it means your node starts with
the same security level, and usefulness to the network, as a SPV node.
But over time you keep downloading blocks as they are created, and with
whatever bandwidth you have left (out of some user-configurable
allocation) you download additional blocks going further and further
back in time. Gradually your UTXO set becomes more complete, and over
time you can verify a higher and higher % of all valid transactions.
Eventually your node becomes a full node, but in the meantime it was
still useful for the user, and still contributed to the network by
relaying blocks and an increasingly large subset of all transactions.
(optionally you can store a subset of the chain history too for other
nodes to bootstrap from) You've also got better security because you
*are* validating blocks, starting off incompletely, and increasingly
completely until your finally validating fully. Privacy is improved, for
both you and others, by mixing your transactions with others and adding
to the overall anonymity set.

In the future we'll have miners commit a hash of the UTXO set, and that
gives us even more options to, for instance, have relayed transactions
include proof that their inputs were valid, allowing all nodes to relay
them safely.


As for specifics, you need to maintain a UTXO set, and in addition a set
of spent txouts (the STXO set) for which you haven't seen the
transaction that created the txout. As download newer blocks you update
the UTXO set; as you download older blocks you update the UTXO set and
STXO set.

Nodes now advertise this new variable to their peers:

nOldestBlock - The oldest block that we've validated. (and all
subsequent blocks)

We'll also want the ability to advertise what sub-ranges of the
blockchain data we have on hand:

listArchivedBlockRanges - lists of (begin, end pairs)

Nodes should drop all but the largest n pairs, say 5 or something. The
index -1 is reserved to indicate the last block to make it easy to
advertise that you have every block starting at some height to the most
recent. (reserving -n with n as the last block might be a better choice
to show intent, but still allow for specific proofs when we get node
identities)

We probably want to define a NODE_PARTIAL service bit or something; I'll
have to re-read Pieter Wuille's proposal and think about it. Nodes
should NOT advertize NODE_NETWORK unless they have the full chain and
have verified it.

Nodes with partial peers should only relay transactions to those peers
if the transactions spend inputs the peers know about - remember how
even an SPV node has that information if it's not spending unconfirmed
inputs it didn't create. Nodes will have to update their peers
periodically as nOldestBlock changes. That said it may also be
worthwhile to simply relay all transactions in some cases too - a
reasonable way to approach this might be to set a bloom filter for tx's
that you *definitely* want, and if you are interested in everything,
just set the filter to all 1's. If someone comes up with a reasonable
micropayment or proof-of-work system even relaying txs that you haven't
validated is fine - the proof-of-work and prioritization will prevent
DoS attacks just fine.

Remember that if you're running a partial node, it can get new blocks
from any partial node, and it can retrieve historic blockchain data from
any partial node that has archived the sequence of blocks you need next.
On a large scale this is similar to how in BitTorrent you can serve data
to your peers the moment you get it - a significant scalability
improvement for the network as a whole. Even if a large % of the network
was partial nodes running for just a few hours a day the whole system
would work fine due to how partial nodes can serve each other the data
they need.

On startup you can act as a SPV node temporarily, grabbing asking for
filtered blocks matching your wallet, and then go back and get the full
blocks, or just download the full blocks right away. That's a tradeoff
on how long the node has been off.

Anyway, it's a bit more code compared to pure-SPV, but it results in a
much more scalable Bitcoin, and if you can spare the modest bandwidth
requirements to keep up with the blockchain it'll result in much better
robustness against DoS attacks for you and Bitcoin in general.

-- 
'peter'[:-1]@petertodd.org
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 490 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130717/a73ba03e/attachment.sig>

From mike at plan99.net  Wed Jul 17 12:29:26 2013
From: mike at plan99.net (Mike Hearn)
Date: Wed, 17 Jul 2013 14:29:26 +0200
Subject: [Bitcoin-development] SPV bitcoind? (was: Introducing
	BitcoinKit.framework)
In-Reply-To: <20130717105853.GA10083@savin>
References: <CANEZrP0_H9+prDSF92q8a4QzP=fzDM6cTDv0+KcfV9NF9thkmw@mail.gmail.com>
	<3E7894A0-06F3-453D-87F8-975A244EBACF@include7.ch>
	<CANEZrP2jmWkDbpJEm0vd2CKF-prFNbz_ZeNJfDWtSCKb8k5ZXA@mail.gmail.com>
	<2BDA0943-22BB-4405-9AF0-86FB41FD04A6@include7.ch>
	<CANEZrP0McSrVzwv=-qimPyX41EEDmyQdYW5QjPr_i+KWyJZSZw@mail.gmail.com>
	<2F20A509-13A9-4C84-86D7-A15C21BACD53@include7.ch>
	<CANEZrP2yQvmvwP_ZULdS2i+X6L9MeZ+DfidiuZPD2EHwLsN2MA@mail.gmail.com>
	<2A1C412D-414E-4C41-8E20-F0D21F801328@grabhive.com>
	<CANEZrP12V_5Ak0f91RsMziuqXysde102rGeSko=qPBjefy3AeA@mail.gmail.com>
	<8EE501AA-1601-4C28-A32E-80F17D219D3A@grabhive.com>
	<20130717105853.GA10083@savin>
Message-ID: <CANEZrP02oQ7GqJfLbEeD+khSGCyFz3eiynPkhARniEWr1ikmPQ@mail.gmail.com>

Partial UTXO sets is a neat idea. Unfortunately my intuition is that many
SPV wallets only remain open for <1 minute at a time because the user wants
to see they received money, or to send it. It'd be neat to get some
telemetry from the Android wallet for this - I will ask Andreas to let
users opt in to usage statistics.

So for anti-DoS I think smart prioritisation heuristics are the way to go
again. Perhaps by letting clients have an "identity" that they provide to a
node when it's load shedding. Clients that have been seen before, have a
track record of not being abusive etc get priority and new clients that
were never seen before get dropped. Coming up with a way to do that whilst
preserving privacy sounds like an interesting cryptographic challenge.


On Wed, Jul 17, 2013 at 12:58 PM, Peter Todd <pete at petertodd.org> wrote:

> On Tue, Jul 16, 2013 at 04:16:23PM +0200, Wendell wrote:
> > Hello everyone,
> >
> > In the previous thread, I expressed interest in seeing an SPV bitcoind,
> further stating that I would fund such work. Mike Hearn followed up with
> some of Satoshi's old code for this, which is now quite broken. The offer
> and interest on my side still stand, as more diversity in SPV options seems
> like the right way to go.
> >
> > Time-permitting, I would really appreciate feedback from knowledgable
> parties about the possible approaches to an SPV bitcoind. We at Hive
> ideally want to see something that could one be merge into master, rather
> than a fork.
>
> Keep in mind that SPV mode is newer than many realize: bloom filters are
> a 0.8 feature, itself released only last Febuary. As John Dillon posted
> earlier this week in "Protecting Bitcoin against network-wide DoS
> attack" the Bitcoin codebase will have to implement much better anti-DoS
> attack defences soon, and in a decentralized system there aren't any
> options other than requiring peers to either do work (useful or not) or
> sacrifice something of value. SPV peers can't do useful work, leaving
> only sacrifice - to what extent and how much is unknown. In addition SPV
> nodes have serious privacy issues because their peers know that any
> transaction sent to them by the SPV node is guaranteed to be from the
> node rather than relayed; bloom filters are only really helpful with
> payment protocols that don't exist yet and don't apply to merchants.
> Then you have MITM problems, vulnerability to fake blocks etc.
>
> It'll be awhile before we know how serious these issues are in practice,
> and we're likely to find new issues we didn't think of too. In any case
> Bitcoin is far better off if we make it easy to run a full node,
> donating whatever resources you can. Fortunately there's a whole
> continuum between SPV and full nodes.
>
> The way you do this is by maintaining partial UTXO sets. The trick is
> that if you have verified every block in some range i to j, every time
> you see a txout created by a transaction, and not subsequently spent,
> you can be sure that at height j the txout existed. If height j is the
> current block, you can be sure the txout exists provided that the chain
> itself is valid. Any transaction that only spends txouts in this partial
> set is a transaction you can fully verify and safely relay; for other
> transactions you just don't know and have to wait until you see them in
> a block.
>
> So what's useful about that? Basically it means your node starts with
> the same security level, and usefulness to the network, as a SPV node.
> But over time you keep downloading blocks as they are created, and with
> whatever bandwidth you have left (out of some user-configurable
> allocation) you download additional blocks going further and further
> back in time. Gradually your UTXO set becomes more complete, and over
> time you can verify a higher and higher % of all valid transactions.
> Eventually your node becomes a full node, but in the meantime it was
> still useful for the user, and still contributed to the network by
> relaying blocks and an increasingly large subset of all transactions.
> (optionally you can store a subset of the chain history too for other
> nodes to bootstrap from) You've also got better security because you
> *are* validating blocks, starting off incompletely, and increasingly
> completely until your finally validating fully. Privacy is improved, for
> both you and others, by mixing your transactions with others and adding
> to the overall anonymity set.
>
> In the future we'll have miners commit a hash of the UTXO set, and that
> gives us even more options to, for instance, have relayed transactions
> include proof that their inputs were valid, allowing all nodes to relay
> them safely.
>
>
> As for specifics, you need to maintain a UTXO set, and in addition a set
> of spent txouts (the STXO set) for which you haven't seen the
> transaction that created the txout. As download newer blocks you update
> the UTXO set; as you download older blocks you update the UTXO set and
> STXO set.
>
> Nodes now advertise this new variable to their peers:
>
> nOldestBlock - The oldest block that we've validated. (and all
> subsequent blocks)
>
> We'll also want the ability to advertise what sub-ranges of the
> blockchain data we have on hand:
>
> listArchivedBlockRanges - lists of (begin, end pairs)
>
> Nodes should drop all but the largest n pairs, say 5 or something. The
> index -1 is reserved to indicate the last block to make it easy to
> advertise that you have every block starting at some height to the most
> recent. (reserving -n with n as the last block might be a better choice
> to show intent, but still allow for specific proofs when we get node
> identities)
>
> We probably want to define a NODE_PARTIAL service bit or something; I'll
> have to re-read Pieter Wuille's proposal and think about it. Nodes
> should NOT advertize NODE_NETWORK unless they have the full chain and
> have verified it.
>
> Nodes with partial peers should only relay transactions to those peers
> if the transactions spend inputs the peers know about - remember how
> even an SPV node has that information if it's not spending unconfirmed
> inputs it didn't create. Nodes will have to update their peers
> periodically as nOldestBlock changes. That said it may also be
> worthwhile to simply relay all transactions in some cases too - a
> reasonable way to approach this might be to set a bloom filter for tx's
> that you *definitely* want, and if you are interested in everything,
> just set the filter to all 1's. If someone comes up with a reasonable
> micropayment or proof-of-work system even relaying txs that you haven't
> validated is fine - the proof-of-work and prioritization will prevent
> DoS attacks just fine.
>
> Remember that if you're running a partial node, it can get new blocks
> from any partial node, and it can retrieve historic blockchain data from
> any partial node that has archived the sequence of blocks you need next.
> On a large scale this is similar to how in BitTorrent you can serve data
> to your peers the moment you get it - a significant scalability
> improvement for the network as a whole. Even if a large % of the network
> was partial nodes running for just a few hours a day the whole system
> would work fine due to how partial nodes can serve each other the data
> they need.
>
> On startup you can act as a SPV node temporarily, grabbing asking for
> filtered blocks matching your wallet, and then go back and get the full
> blocks, or just download the full blocks right away. That's a tradeoff
> on how long the node has been off.
>
> Anyway, it's a bit more code compared to pure-SPV, but it results in a
> much more scalable Bitcoin, and if you can spare the modest bandwidth
> requirements to keep up with the blockchain it'll result in much better
> robustness against DoS attacks for you and Bitcoin in general.
>
> --
> 'peter'[:-1]@petertodd.org
>
>
> ------------------------------------------------------------------------------
> See everything from the browser to the database with AppDynamics
> Get end-to-end visibility with application monitoring from AppDynamics
> Isolate bottlenecks and diagnose root cause in seconds.
> Start your free trial of AppDynamics Pro today!
> http://pubads.g.doubleclick.net/gampad/clk?id=48808831&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130717/98b856c4/attachment.html>

From tamas at bitsofproof.com  Wed Jul 17 12:37:11 2013
From: tamas at bitsofproof.com (Tamas Blummer)
Date: Wed, 17 Jul 2013 14:37:11 +0200
Subject: [Bitcoin-development] SPV bitcoind? (was: Introducing
	BitcoinKit.framework)
In-Reply-To: <mailman.108889.1374064174.4583.bitcoin-development@lists.sourceforge.net>
References: <mailman.108889.1374064174.4583.bitcoin-development@lists.sourceforge.net>
Message-ID: <09D346D7-7D3D-43E9-8B43-5FCE1F188D8E@bitsofproof.com>

Would not an SPV bitcoind transfer all control on validation rules to miner?

A majority coalition of miner (pool operator) might even decide to change block reward
rules if the rest of the network only verifies POW.

Regards,

Tam?s Blummer
Founder, CEO

http://bitsofproof.com

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130717/54970590/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: email.png
Type: image/png
Size: 7120 bytes
Desc: not available
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130717/54970590/attachment.png>

From pete at petertodd.org  Wed Jul 17 12:50:52 2013
From: pete at petertodd.org (Peter Todd)
Date: Wed, 17 Jul 2013 08:50:52 -0400
Subject: [Bitcoin-development] SPV bitcoind? (was: Introducing
 BitcoinKit.framework)
In-Reply-To: <09D346D7-7D3D-43E9-8B43-5FCE1F188D8E@bitsofproof.com>
References: <mailman.108889.1374064174.4583.bitcoin-development@lists.sourceforge.net>
	<09D346D7-7D3D-43E9-8B43-5FCE1F188D8E@bitsofproof.com>
Message-ID: <20130717125052.GA1750@savin>

On Wed, Jul 17, 2013 at 02:37:11PM +0200, Tamas Blummer wrote:
> Would not an SPV bitcoind transfer all control on validation rules to miner?

Yes

> A majority coalition of miner (pool operator) might even decide to change block reward
> rules if the rest of the network only verifies POW.

Widespread dependence on SPV mode is very dangerous for Bitcoin in
general due to that reason. Fraud proofs may help, but they're also
another layer of never-before-tested crypto on top of an already poorly
understood technology, bitcoin itself.

-- 
'peter'[:-1]@petertodd.org
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 490 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130717/ea762589/attachment.sig>

From mike at plan99.net  Wed Jul 17 13:56:27 2013
From: mike at plan99.net (Mike Hearn)
Date: Wed, 17 Jul 2013 15:56:27 +0200
Subject: [Bitcoin-development] SPV bitcoind? (was: Introducing
	BitcoinKit.framework)
In-Reply-To: <09D346D7-7D3D-43E9-8B43-5FCE1F188D8E@bitsofproof.com>
References: <mailman.108889.1374064174.4583.bitcoin-development@lists.sourceforge.net>
	<09D346D7-7D3D-43E9-8B43-5FCE1F188D8E@bitsofproof.com>
Message-ID: <CANEZrP2sLMozcAuQ2ed8EqQrtc5Xo59VE2WEpcgToYk_Ne7qUQ@mail.gmail.com>

On Wed, Jul 17, 2013 at 2:37 PM, Tamas Blummer <tamas at bitsofproof.com>wrote:

> A majority coalition of miner (pool operator) might even decide to change
> block reward
> rules if the rest of the network only verifies POW.
>

Which is why it's still vital that any "important" node in the economy uses
full validation.

A majority miner coalition could change the block reward and award
themselves money which SPV clients would accept, however, the moment
somebody tried to cash that money out via an exchange, or use it to
purchase something from an online shop, or just see if it propagated across
the P2P network effectively, they'd notice something had gone wrong. Of
course it'd be in the news long before this happened ....

SPV is really meant for nodes that go away and come back a lot, i.e. end
user wallets. If you're a merchant it'd be dumb to run one unless you're on
such a tight budget that your server resembles a powerful tablet.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130717/93fb1d0b/attachment.html>

From w at grabhive.com  Wed Jul 17 13:37:41 2013
From: w at grabhive.com (Wendell)
Date: Wed, 17 Jul 2013 15:37:41 +0200
Subject: [Bitcoin-development] SPV bitcoind? (was: Introducing
	BitcoinKit.framework)
In-Reply-To: <20130717105853.GA10083@savin>
References: <CANEZrP0_H9+prDSF92q8a4QzP=fzDM6cTDv0+KcfV9NF9thkmw@mail.gmail.com>
	<3E7894A0-06F3-453D-87F8-975A244EBACF@include7.ch>
	<CANEZrP2jmWkDbpJEm0vd2CKF-prFNbz_ZeNJfDWtSCKb8k5ZXA@mail.gmail.com>
	<2BDA0943-22BB-4405-9AF0-86FB41FD04A6@include7.ch>
	<CANEZrP0McSrVzwv=-qimPyX41EEDmyQdYW5QjPr_i+KWyJZSZw@mail.gmail.com>
	<2F20A509-13A9-4C84-86D7-A15C21BACD53@include7.ch>
	<CANEZrP2yQvmvwP_ZULdS2i+X6L9MeZ+DfidiuZPD2EHwLsN2MA@mail.gmail.com>
	<2A1C412D-414E-4C41-8E20-F0D21F801328@grabhive.com>
	<CANEZrP12V_5Ak0f91RsMziuqXysde102rGeSko=qPBjefy3AeA@mail.gmail.com>
	<8EE501AA-1601-4C28-A32E-80F17D219D3A@grabhive.com>
	<20130717105853.GA10083@savin>
Message-ID: <3DB67FAF-E113-47FE-9043-C22D0F5A4F4A@grabhive.com>

Peter,

This sounds like a _very_ good idea for a desktop client, and probably acceptable to users so long as we take available disk space into consideration, and only ever use a fraction of it.

Will you implement this?

-wendell

grabhive.com | twitter.com/grabhive

On Jul 17, 2013, at 12:58 PM, Peter Todd wrote:

> So what's useful about that? Basically it means your node starts with
> the same security level, and usefulness to the network, as a SPV node.
> But over time you keep downloading blocks as they are created, and with
> whatever bandwidth you have left (out of some user-configurable
> allocation) you download additional blocks going further and further
> back in time. Gradually your UTXO set becomes more complete, and over
> time you can verify a higher and higher % of all valid transactions.
> Eventually your node becomes a full node, but in the meantime it was
> still useful for the user, and still contributed to the network by
> relaying blocks and an increasingly large subset of all transactions.
> (optionally you can store a subset of the chain history too for other
> nodes to bootstrap from) You've also got better security because you
> *are* validating blocks, starting off incompletely, and increasingly
> completely until your finally validating fully. Privacy is improved, for
> both you and others, by mixing your transactions with others and adding
> to the overall anonymity set.
> 
> In the future we'll have miners commit a hash of the UTXO set, and that
> gives us even more options to, for instance, have relayed transactions
> include proof that their inputs were valid, allowing all nodes to relay
> them safely.

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 841 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130717/e78aceae/attachment.sig>

From gronager at mac.com  Wed Jul 17 14:31:52 2013
From: gronager at mac.com (Michael Gronager)
Date: Wed, 17 Jul 2013 10:31:52 -0400
Subject: [Bitcoin-development] SPV bitcoind? (was: Introducing
 BitcoinKit.framework)
In-Reply-To: <3DB67FAF-E113-47FE-9043-C22D0F5A4F4A@grabhive.com>
References: <CANEZrP0_H9+prDSF92q8a4QzP=fzDM6cTDv0+KcfV9NF9thkmw@mail.gmail.com>
	<3E7894A0-06F3-453D-87F8-975A244EBACF@include7.ch>
	<CANEZrP2jmWkDbpJEm0vd2CKF-prFNbz_ZeNJfDWtSCKb8k5ZXA@mail.gmail.com>
	<2BDA0943-22BB-4405-9AF0-86FB41FD04A6@include7.ch>
	<CANEZrP0McSrVzwv=-qimPyX41EEDmyQdYW5QjPr_i+KWyJZSZw@mail.gmail.com>
	<2F20A509-13A9-4C84-86D7-A15C21BACD53@include7.ch>
	<CANEZrP2yQvmvwP_ZULdS2i+X6L9MeZ+DfidiuZPD2EHwLsN2MA@mail.gmail.com>
	<2A1C412D-414E-4C41-8E20-F0D21F801328@grabhive.com>
	<CANEZrP12V_5Ak0f91RsMziuqXysde102rGeSko=qPBjefy3AeA@mail.gmail.com>
	<8EE501AA-1601-4C28-A32E-80F17D219D3A@grabhive.com>
	<20130717105853.GA10083@savin>
	<3DB67FAF-E113-47FE-9043-C22D0F5A4F4A@grabhive.com>
Message-ID: <16E9C860-51CA-4274-B852-A816D12B6A5B@mac.com>

Hi Wendell,

What Peter describes (a hash of the current set of UTXOs as part of the coinbase) is already implemented in libcoin, on which you can easily build both a bitcoind and any client. Libcoin is a library originally based on the satoshi client, and as such it is compatible/replacable with "master". 

Have a look at github.com/libcoin/libcoin and look in the BlockChain.h/cpp and the MerkleTrie classes then you can see how it works.

What is missing from libcoin is a scheme to bootstrap the hash of UTXOs, there is some stub code for a p2pool like mining scheme ensuring several UTXO hashes every 10 minutes, but I will not have time to finalize it the first few months - anyone are of course welcome to help out ;)

Michael


On 17/07/2013, at 09:37, Wendell <w at grabhive.com> wrote:

> Peter,
> 
> This sounds like a _very_ good idea for a desktop client, and probably acceptable to users so long as we take available disk space into consideration, and only ever use a fraction of it.
> 
> Will you implement this?
> 
> -wendell
> 
> grabhive.com | twitter.com/grabhive
> 
> On Jul 17, 2013, at 12:58 PM, Peter Todd wrote:
> 
>> So what's useful about that? Basically it means your node starts with
>> the same security level, and usefulness to the network, as a SPV node.
>> But over time you keep downloading blocks as they are created, and with
>> whatever bandwidth you have left (out of some user-configurable
>> allocation) you download additional blocks going further and further
>> back in time. Gradually your UTXO set becomes more complete, and over
>> time you can verify a higher and higher % of all valid transactions.
>> Eventually your node becomes a full node, but in the meantime it was
>> still useful for the user, and still contributed to the network by
>> relaying blocks and an increasingly large subset of all transactions.
>> (optionally you can store a subset of the chain history too for other
>> nodes to bootstrap from) You've also got better security because you
>> *are* validating blocks, starting off incompletely, and increasingly
>> completely until your finally validating fully. Privacy is improved, for
>> both you and others, by mixing your transactions with others and adding
>> to the overall anonymity set.
>> 
>> In the future we'll have miners commit a hash of the UTXO set, and that
>> gives us even more options to, for instance, have relayed transactions
>> include proof that their inputs were valid, allowing all nodes to relay
>> them safely.
> 
> ------------------------------------------------------------------------------
> See everything from the browser to the database with AppDynamics
> Get end-to-end visibility with application monitoring from AppDynamics
> Isolate bottlenecks and diagnose root cause in seconds.
> Start your free trial of AppDynamics Pro today!
> http://pubads.g.doubleclick.net/gampad/clk?id=48808831&iu=/4140/ostg.clktrk_______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 495 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130717/d6c0fe64/attachment.sig>

From andreas at schildbach.de  Wed Jul 17 14:32:27 2013
From: andreas at schildbach.de (Andreas Schildbach)
Date: Wed, 17 Jul 2013 16:32:27 +0200
Subject: [Bitcoin-development] SPV bitcoind?
In-Reply-To: <CANEZrP02oQ7GqJfLbEeD+khSGCyFz3eiynPkhARniEWr1ikmPQ@mail.gmail.com>
References: <CANEZrP0_H9+prDSF92q8a4QzP=fzDM6cTDv0+KcfV9NF9thkmw@mail.gmail.com>
	<3E7894A0-06F3-453D-87F8-975A244EBACF@include7.ch>
	<CANEZrP2jmWkDbpJEm0vd2CKF-prFNbz_ZeNJfDWtSCKb8k5ZXA@mail.gmail.com>
	<2BDA0943-22BB-4405-9AF0-86FB41FD04A6@include7.ch>
	<CANEZrP0McSrVzwv=-qimPyX41EEDmyQdYW5QjPr_i+KWyJZSZw@mail.gmail.com>
	<2F20A509-13A9-4C84-86D7-A15C21BACD53@include7.ch>
	<CANEZrP2yQvmvwP_ZULdS2i+X6L9MeZ+DfidiuZPD2EHwLsN2MA@mail.gmail.com>
	<2A1C412D-414E-4C41-8E20-F0D21F801328@grabhive.com>
	<CANEZrP12V_5Ak0f91RsMziuqXysde102rGeSko=qPBjefy3AeA@mail.gmail.com>
	<8EE501AA-1601-4C28-A32E-80F17D219D3A@grabhive.com>
	<20130717105853.GA10083@savin>
	<CANEZrP02oQ7GqJfLbEeD+khSGCyFz3eiynPkhARniEWr1ikmPQ@mail.gmail.com>
Message-ID: <ks69tl$fs9$1@ger.gmane.org>

Android apps do whatever they are programmed to do. They become active
when the user installs and inactive when they are uninstalled.
Inbetween, they are not limited in runtime.

That said, the current programming is that when receiving a block, it
stays connected for at least ~2 more minutes. This generally allows the
chain to catch up while at the same time avoiding endless battery drain
because something gets stuck. Upon sending or receiving of a
transaction, it stays connected for at least ~8 more minutes, because it
is likely the wallet will see more activity.

Additionally, on the send and request coins screens and the network
monitor it stays connected for as long as the screen is on and the app
in the foreground (= resumed state).


On 07/17/2013 02:29 PM, Mike Hearn wrote:

> Partial UTXO sets is a neat idea. Unfortunately my intuition is that
> many SPV wallets only remain open for <1 minute at a time because the
> user wants to see they received money, or to send it. It'd be neat to
> get some telemetry from the Android wallet for this - I will ask Andreas
> to let users opt in to usage statistics.






From w at grabhive.com  Wed Jul 17 14:58:57 2013
From: w at grabhive.com (Wendell)
Date: Wed, 17 Jul 2013 16:58:57 +0200
Subject: [Bitcoin-development] SPV bitcoind? (was: Introducing
	BitcoinKit.framework)
In-Reply-To: <16E9C860-51CA-4274-B852-A816D12B6A5B@mac.com>
References: <CANEZrP0_H9+prDSF92q8a4QzP=fzDM6cTDv0+KcfV9NF9thkmw@mail.gmail.com>
	<3E7894A0-06F3-453D-87F8-975A244EBACF@include7.ch>
	<CANEZrP2jmWkDbpJEm0vd2CKF-prFNbz_ZeNJfDWtSCKb8k5ZXA@mail.gmail.com>
	<2BDA0943-22BB-4405-9AF0-86FB41FD04A6@include7.ch>
	<CANEZrP0McSrVzwv=-qimPyX41EEDmyQdYW5QjPr_i+KWyJZSZw@mail.gmail.com>
	<2F20A509-13A9-4C84-86D7-A15C21BACD53@include7.ch>
	<CANEZrP2yQvmvwP_ZULdS2i+X6L9MeZ+DfidiuZPD2EHwLsN2MA@mail.gmail.com>
	<2A1C412D-414E-4C41-8E20-F0D21F801328@grabhive.com>
	<CANEZrP12V_5Ak0f91RsMziuqXysde102rGeSko=qPBjefy3AeA@mail.gmail.com>
	<8EE501AA-1601-4C28-A32E-80F17D219D3A@grabhive.com>
	<20130717105853.GA10083@savin>
	<3DB67FAF-E113-47FE-9043-C22D0F5A4F4A@grabhive.com>
	<16E9C860-51CA-4274-B852-A816D12B6A5B@mac.com>
Message-ID: <7685FDAE-C584-4FC8-9751-4D5556EC57C7@grabhive.com>

"The libcoin/bitcoind client downloads the entire block chain 3.5 times faster than the bitcoin/bitcoind client. This is less than 90 minutes on a modern laptop!"

Good lord Michael, I wish we had known about libcoin a month ago!

-wendell

grabhive.com | twitter.com/grabhive

On Jul 17, 2013, at 4:31 PM, Michael Gronager wrote:

> Hi Wendell,
> 
> What Peter describes (a hash of the current set of UTXOs as part of the coinbase) is already implemented in libcoin, on which you can easily build both a bitcoind and any client. Libcoin is a library originally based on the satoshi client, and as such it is compatible/replacable with "master". 
> 
> Have a look at github.com/libcoin/libcoin and look in the BlockChain.h/cpp and the MerkleTrie classes then you can see how it works.
> 
> What is missing from libcoin is a scheme to bootstrap the hash of UTXOs, there is some stub code for a p2pool like mining scheme ensuring several UTXO hashes every 10 minutes, but I will not have time to finalize it the first few months - anyone are of course welcome to help out ;)
> 
> Michael

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 841 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130717/eb021d7c/attachment.sig>

From mike at plan99.net  Wed Jul 17 19:32:12 2013
From: mike at plan99.net (Mike Hearn)
Date: Wed, 17 Jul 2013 21:32:12 +0200
Subject: [Bitcoin-development] SPV bitcoind?
In-Reply-To: <ks69tl$fs9$1@ger.gmane.org>
References: <CANEZrP0_H9+prDSF92q8a4QzP=fzDM6cTDv0+KcfV9NF9thkmw@mail.gmail.com>
	<3E7894A0-06F3-453D-87F8-975A244EBACF@include7.ch>
	<CANEZrP2jmWkDbpJEm0vd2CKF-prFNbz_ZeNJfDWtSCKb8k5ZXA@mail.gmail.com>
	<2BDA0943-22BB-4405-9AF0-86FB41FD04A6@include7.ch>
	<CANEZrP0McSrVzwv=-qimPyX41EEDmyQdYW5QjPr_i+KWyJZSZw@mail.gmail.com>
	<2F20A509-13A9-4C84-86D7-A15C21BACD53@include7.ch>
	<CANEZrP2yQvmvwP_ZULdS2i+X6L9MeZ+DfidiuZPD2EHwLsN2MA@mail.gmail.com>
	<2A1C412D-414E-4C41-8E20-F0D21F801328@grabhive.com>
	<CANEZrP12V_5Ak0f91RsMziuqXysde102rGeSko=qPBjefy3AeA@mail.gmail.com>
	<8EE501AA-1601-4C28-A32E-80F17D219D3A@grabhive.com>
	<20130717105853.GA10083@savin>
	<CANEZrP02oQ7GqJfLbEeD+khSGCyFz3eiynPkhARniEWr1ikmPQ@mail.gmail.com>
	<ks69tl$fs9$1@ger.gmane.org>
Message-ID: <CANEZrP1f5_u6Rrqh5j3miDc=7C4WYO1SLpj_zAKHc868PbBkLw@mail.gmail.com>

Yeah, what I meant is, it'd be useful to know the average amount of time
that the app was holding connections open for.


On Wed, Jul 17, 2013 at 4:32 PM, Andreas Schildbach
<andreas at schildbach.de>wrote:

> Android apps do whatever they are programmed to do. They become active
> when the user installs and inactive when they are uninstalled.
> Inbetween, they are not limited in runtime.
>
> That said, the current programming is that when receiving a block, it
> stays connected for at least ~2 more minutes. This generally allows the
> chain to catch up while at the same time avoiding endless battery drain
> because something gets stuck. Upon sending or receiving of a
> transaction, it stays connected for at least ~8 more minutes, because it
> is likely the wallet will see more activity.
>
> Additionally, on the send and request coins screens and the network
> monitor it stays connected for as long as the screen is on and the app
> in the foreground (= resumed state).
>
>
> On 07/17/2013 02:29 PM, Mike Hearn wrote:
>
> > Partial UTXO sets is a neat idea. Unfortunately my intuition is that
> > many SPV wallets only remain open for <1 minute at a time because the
> > user wants to see they received money, or to send it. It'd be neat to
> > get some telemetry from the Android wallet for this - I will ask Andreas
> > to let users opt in to usage statistics.
>
>
>
>
>
> ------------------------------------------------------------------------------
> See everything from the browser to the database with AppDynamics
> Get end-to-end visibility with application monitoring from AppDynamics
> Isolate bottlenecks and diagnose root cause in seconds.
> Start your free trial of AppDynamics Pro today!
> http://pubads.g.doubleclick.net/gampad/clk?id=48808831&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130717/e4440b4b/attachment.html>

From mike at plan99.net  Wed Jul 17 19:33:32 2013
From: mike at plan99.net (Mike Hearn)
Date: Wed, 17 Jul 2013 21:33:32 +0200
Subject: [Bitcoin-development] SPV bitcoind? (was: Introducing
	BitcoinKit.framework)
In-Reply-To: <7685FDAE-C584-4FC8-9751-4D5556EC57C7@grabhive.com>
References: <CANEZrP0_H9+prDSF92q8a4QzP=fzDM6cTDv0+KcfV9NF9thkmw@mail.gmail.com>
	<3E7894A0-06F3-453D-87F8-975A244EBACF@include7.ch>
	<CANEZrP2jmWkDbpJEm0vd2CKF-prFNbz_ZeNJfDWtSCKb8k5ZXA@mail.gmail.com>
	<2BDA0943-22BB-4405-9AF0-86FB41FD04A6@include7.ch>
	<CANEZrP0McSrVzwv=-qimPyX41EEDmyQdYW5QjPr_i+KWyJZSZw@mail.gmail.com>
	<2F20A509-13A9-4C84-86D7-A15C21BACD53@include7.ch>
	<CANEZrP2yQvmvwP_ZULdS2i+X6L9MeZ+DfidiuZPD2EHwLsN2MA@mail.gmail.com>
	<2A1C412D-414E-4C41-8E20-F0D21F801328@grabhive.com>
	<CANEZrP12V_5Ak0f91RsMziuqXysde102rGeSko=qPBjefy3AeA@mail.gmail.com>
	<8EE501AA-1601-4C28-A32E-80F17D219D3A@grabhive.com>
	<20130717105853.GA10083@savin>
	<3DB67FAF-E113-47FE-9043-C22D0F5A4F4A@grabhive.com>
	<16E9C860-51CA-4274-B852-A816D12B6A5B@mac.com>
	<7685FDAE-C584-4FC8-9751-4D5556EC57C7@grabhive.com>
Message-ID: <CANEZrP3F0Q_NXhhbkh=9CESAAmhntM_uKQEe0CJf=sDuJx2Xmw@mail.gmail.com>

Is that still accurate Michael?


On Wed, Jul 17, 2013 at 4:58 PM, Wendell <w at grabhive.com> wrote:

> "The libcoin/bitcoind client downloads the entire block chain 3.5 times
> faster than the bitcoin/bitcoind client. This is less than 90 minutes on a
> modern laptop!"
>
> Good lord Michael, I wish we had known about libcoin a month ago!
>
> -wendell
>
> grabhive.com | twitter.com/grabhive
>
> On Jul 17, 2013, at 4:31 PM, Michael Gronager wrote:
>
> > Hi Wendell,
> >
> > What Peter describes (a hash of the current set of UTXOs as part of the
> coinbase) is already implemented in libcoin, on which you can easily build
> both a bitcoind and any client. Libcoin is a library originally based on
> the satoshi client, and as such it is compatible/replacable with "master".
> >
> > Have a look at github.com/libcoin/libcoin and look in the
> BlockChain.h/cpp and the MerkleTrie classes then you can see how it works.
> >
> > What is missing from libcoin is a scheme to bootstrap the hash of UTXOs,
> there is some stub code for a p2pool like mining scheme ensuring several
> UTXO hashes every 10 minutes, but I will not have time to finalize it the
> first few months - anyone are of course welcome to help out ;)
> >
> > Michael
>
>
>
> ------------------------------------------------------------------------------
> See everything from the browser to the database with AppDynamics
> Get end-to-end visibility with application monitoring from AppDynamics
> Isolate bottlenecks and diagnose root cause in seconds.
> Start your free trial of AppDynamics Pro today!
> http://pubads.g.doubleclick.net/gampad/clk?id=48808831&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130717/519fa2c2/attachment.html>

From gronager at mac.com  Wed Jul 17 22:26:39 2013
From: gronager at mac.com (Michael Gronager)
Date: Wed, 17 Jul 2013 18:26:39 -0400
Subject: [Bitcoin-development] SPV bitcoind? (was: Introducing
 BitcoinKit.framework)
In-Reply-To: <CANEZrP3F0Q_NXhhbkh=9CESAAmhntM_uKQEe0CJf=sDuJx2Xmw@mail.gmail.com>
References: <CANEZrP0_H9+prDSF92q8a4QzP=fzDM6cTDv0+KcfV9NF9thkmw@mail.gmail.com>
	<3E7894A0-06F3-453D-87F8-975A244EBACF@include7.ch>
	<CANEZrP2jmWkDbpJEm0vd2CKF-prFNbz_ZeNJfDWtSCKb8k5ZXA@mail.gmail.com>
	<2BDA0943-22BB-4405-9AF0-86FB41FD04A6@include7.ch>
	<CANEZrP0McSrVzwv=-qimPyX41EEDmyQdYW5QjPr_i+KWyJZSZw@mail.gmail.com>
	<2F20A509-13A9-4C84-86D7-A15C21BACD53@include7.ch>
	<CANEZrP2yQvmvwP_ZULdS2i+X6L9MeZ+DfidiuZPD2EHwLsN2MA@mail.gmail.com>
	<2A1C412D-414E-4C41-8E20-F0D21F801328@grabhive.com>
	<CANEZrP12V_5Ak0f91RsMziuqXysde102rGeSko=qPBjefy3AeA@mail.gmail.com>
	<8EE501AA-1601-4C28-A32E-80F17D219D3A@grabhive.com>
	<20130717105853.GA10083@savin>
	<3DB67FAF-E113-47FE-9043-C22D0F5A4F4A@grabhive.com>
	<16E9C860-51CA-4274-B852-A816D12B6A5B@mac.com>
	<7685FDAE-C584-4FC8-9751-4D5556EC57C7@grabhive.com>
	<CANEZrP3F0Q_NXhhbkh=9CESAAmhntM_uKQEe0CJf=sDuJx2Xmw@mail.gmail.com>
Message-ID: <EFFD62F8-8066-4B56-8331-1F1A8D7FF3C2@mac.com>


> Is that still accurate Michael?
> 

The 90 minutes is not - the blockchain has grown quite a lot since last year, and as for the 3.5 speed, I havn't tested it since Pieter's ultraprune - libcoin also has something similar to ultraprune, done directly in the sqlite database backend, but I should run a head to head again - could be fun. I would assume, though, that the result would be similar timings.

However, by having a merkle tree hash of all UTXOs they become downloadable in a trusted manner from any other client - something that enables bootstrap in minutes, so the old numbers becomes less relevant in this setting.

> 
> On Wed, Jul 17, 2013 at 4:58 PM, Wendell <w at grabhive.com> wrote:
> "The libcoin/bitcoind client downloads the entire block chain 3.5 times faster than the bitcoin/bitcoind client. This is less than 90 minutes on a modern laptop!"
> 
> 




From gmaxwell at gmail.com  Wed Jul 17 23:04:33 2013
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Wed, 17 Jul 2013 16:04:33 -0700
Subject: [Bitcoin-development] SPV bitcoind? (was: Introducing
	BitcoinKit.framework)
In-Reply-To: <EFFD62F8-8066-4B56-8331-1F1A8D7FF3C2@mac.com>
References: <CANEZrP0_H9+prDSF92q8a4QzP=fzDM6cTDv0+KcfV9NF9thkmw@mail.gmail.com>
	<3E7894A0-06F3-453D-87F8-975A244EBACF@include7.ch>
	<CANEZrP2jmWkDbpJEm0vd2CKF-prFNbz_ZeNJfDWtSCKb8k5ZXA@mail.gmail.com>
	<2BDA0943-22BB-4405-9AF0-86FB41FD04A6@include7.ch>
	<CANEZrP0McSrVzwv=-qimPyX41EEDmyQdYW5QjPr_i+KWyJZSZw@mail.gmail.com>
	<2F20A509-13A9-4C84-86D7-A15C21BACD53@include7.ch>
	<CANEZrP2yQvmvwP_ZULdS2i+X6L9MeZ+DfidiuZPD2EHwLsN2MA@mail.gmail.com>
	<2A1C412D-414E-4C41-8E20-F0D21F801328@grabhive.com>
	<CANEZrP12V_5Ak0f91RsMziuqXysde102rGeSko=qPBjefy3AeA@mail.gmail.com>
	<8EE501AA-1601-4C28-A32E-80F17D219D3A@grabhive.com>
	<20130717105853.GA10083@savin>
	<3DB67FAF-E113-47FE-9043-C22D0F5A4F4A@grabhive.com>
	<16E9C860-51CA-4274-B852-A816D12B6A5B@mac.com>
	<7685FDAE-C584-4FC8-9751-4D5556EC57C7@grabhive.com>
	<CANEZrP3F0Q_NXhhbkh=9CESAAmhntM_uKQEe0CJf=sDuJx2Xmw@mail.gmail.com>
	<EFFD62F8-8066-4B56-8331-1F1A8D7FF3C2@mac.com>
Message-ID: <CAAS2fgSDCOFk=7mVVuTKBHvCP+C+2KiE8sq8+JuSDVRz1hz4cw@mail.gmail.com>

On Wed, Jul 17, 2013 at 3:26 PM, Michael Gronager <gronager at mac.com> wrote:
> However, by having a merkle tree hash of all UTXOs they become downloadable in a trusted manner from any other client - something that enables bootstrap in minutes, so the old numbers becomes less relevant in this setting.

This, however, reduces the node to SPV security of the past history.
Particularly for a wallet client? as opposed to a miner or what have
you? if you are willing to accept SPV security you could simply be an
SPV client.

(I like committed UTXO trees, and I believe I was the first person to
suggest them? but I think it's good to not over-hype what they do!)



From mike at plan99.net  Thu Jul 18 08:19:20 2013
From: mike at plan99.net (Mike Hearn)
Date: Thu, 18 Jul 2013 10:19:20 +0200
Subject: [Bitcoin-development] SPV bitcoind? (was: Introducing
	BitcoinKit.framework)
In-Reply-To: <EFFD62F8-8066-4B56-8331-1F1A8D7FF3C2@mac.com>
References: <CANEZrP0_H9+prDSF92q8a4QzP=fzDM6cTDv0+KcfV9NF9thkmw@mail.gmail.com>
	<3E7894A0-06F3-453D-87F8-975A244EBACF@include7.ch>
	<CANEZrP2jmWkDbpJEm0vd2CKF-prFNbz_ZeNJfDWtSCKb8k5ZXA@mail.gmail.com>
	<2BDA0943-22BB-4405-9AF0-86FB41FD04A6@include7.ch>
	<CANEZrP0McSrVzwv=-qimPyX41EEDmyQdYW5QjPr_i+KWyJZSZw@mail.gmail.com>
	<2F20A509-13A9-4C84-86D7-A15C21BACD53@include7.ch>
	<CANEZrP2yQvmvwP_ZULdS2i+X6L9MeZ+DfidiuZPD2EHwLsN2MA@mail.gmail.com>
	<2A1C412D-414E-4C41-8E20-F0D21F801328@grabhive.com>
	<CANEZrP12V_5Ak0f91RsMziuqXysde102rGeSko=qPBjefy3AeA@mail.gmail.com>
	<8EE501AA-1601-4C28-A32E-80F17D219D3A@grabhive.com>
	<20130717105853.GA10083@savin>
	<3DB67FAF-E113-47FE-9043-C22D0F5A4F4A@grabhive.com>
	<16E9C860-51CA-4274-B852-A816D12B6A5B@mac.com>
	<7685FDAE-C584-4FC8-9751-4D5556EC57C7@grabhive.com>
	<CANEZrP3F0Q_NXhhbkh=9CESAAmhntM_uKQEe0CJf=sDuJx2Xmw@mail.gmail.com>
	<EFFD62F8-8066-4B56-8331-1F1A8D7FF3C2@mac.com>
Message-ID: <CANEZrP2dLJXfRmG8PRiHMWNGsSwT2ZL0Ac3ib4YZQ1Hv7uZDVg@mail.gmail.com>

> The 90 minutes is not - the blockchain has grown quite a lot since last
> year, and as for the 3.5 speed, I havn't tested it since Pieter's
> ultraprune - libcoin also has something similar to ultraprune, done
> directly in the sqlite database backend, but I should run a head to head
> again - could be fun. I would assume, though, that the result would be
> similar timings.
>

ultraprune made a huge difference. I think it's very likely that this claim
is no longer true. Bitcoin got a lot more optimised since you first did
libcoin.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130718/b1a0212b/attachment.html>

From pete at petertodd.org  Thu Jul 18 11:13:53 2013
From: pete at petertodd.org (Peter Todd)
Date: Thu, 18 Jul 2013 07:13:53 -0400
Subject: [Bitcoin-development] Anti DoS for tx replacement
In-Reply-To: <CA+CODZEQX_xiaJE7WtFZC2qfVfDqZAgg-ydU5Q73O-QTkXJpPw@mail.gmail.com>
References: <CA+CODZEQX_xiaJE7WtFZC2qfVfDqZAgg-ydU5Q73O-QTkXJpPw@mail.gmail.com>
Message-ID: <20130718111353.GA11385@savin>

On Fri, Apr 19, 2013 at 06:48:11PM -0700, Jeremy Spilman wrote:
>  0. User and AP negotiate how much to escrow, who pays the fees, and how
> far in the future nLockTime will be set (how long user?s funds will be tied
> if AP doesn?t close the channel)
> 
>  1. User creates an unsigned TX1 with 1 or more inputs from user?s
> ?listunspent?, change going back to user (if any), and a single output of
> ?FundAmount? with scriptPubKey of ?2 PK1 OP_0 CHECKMULTISIG?, and sends to
> the AP

Note that with OP_DEPTH we can remove the small chance of the payee
vanishing and putting the funds in limbo:

    <height + n> OP_DEPTH OP_LESSTHAN
    IF 2 PK1 PK2 CHECKMULTISIG
    ELSE PK1 CHECKSIG
    ENDIF

Though that shows how to implement OP_DEPTH as a true soft-fork we're
probably best off doing it as part of a script v2 using the soft-fork
mechanism I outlined before when talking about fidelity-bonded ledgers.
(best to do MAST (merklized abstract syntax tree) support at the same
time)

-- 
'peter'[:-1]@petertodd.org
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 490 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130718/c05fd6b2/attachment.sig>

From b at grabhive.com  Thu Jul 18 11:40:35 2013
From: b at grabhive.com (Bazyli Zygan)
Date: Thu, 18 Jul 2013 13:40:35 +0200
Subject: [Bitcoin-development] SPV bitcoind? (was: Introducing
 BitcoinKit.framework)
In-Reply-To: <CANEZrP2dLJXfRmG8PRiHMWNGsSwT2ZL0Ac3ib4YZQ1Hv7uZDVg@mail.gmail.com>
References: <CANEZrP0_H9+prDSF92q8a4QzP=fzDM6cTDv0+KcfV9NF9thkmw@mail.gmail.com>
	<3E7894A0-06F3-453D-87F8-975A244EBACF@include7.ch>
	<CANEZrP2jmWkDbpJEm0vd2CKF-prFNbz_ZeNJfDWtSCKb8k5ZXA@mail.gmail.com>
	<2BDA0943-22BB-4405-9AF0-86FB41FD04A6@include7.ch>
	<CANEZrP0McSrVzwv=-qimPyX41EEDmyQdYW5QjPr_i+KWyJZSZw@mail.gmail.com>
	<2F20A509-13A9-4C84-86D7-A15C21BACD53@include7.ch>
	<CANEZrP2yQvmvwP_ZULdS2i+X6L9MeZ+DfidiuZPD2EHwLsN2MA@mail.gmail.com>
	<2A1C412D-414E-4C41-8E20-F0D21F801328@grabhive.com>
	<CANEZrP12V_5Ak0f91RsMziuqXysde102rGeSko=qPBjefy3AeA@mail.gmail.com>
	<8EE501AA-1601-4C28-A32E-80F17D219D3A@grabhive.com>
	<20130717105853.GA10083@savin>
	<3DB67FAF-E113-47FE-9043-C22D0F5A4F4A@grabhive.com>
	<16E9C860-51CA-4274-B852-A816D12B6A5B@mac.com>
	<7685FDAE-C584-4FC8-9751-4D5556EC57C7@grabhive.com>
	<CANEZrP3F0Q_NXhhbkh=9CESAAmhntM_uKQEe0CJf=sDuJx2Xmw@mail.gmail.com>
	<EFFD62F8-8066-4B56-8331-1F1A8D7FF3C2@mac.com>
	<CANEZrP2dLJXfRmG8PRiHMWNGsSwT2ZL0Ac3ib4YZQ1Hv7uZDVg@mail.gmail.com>
Message-ID: <F2462CCF2C1B4404BAAC69048DA08A0D@grabhive.com>

Hi!

I should introduce myself. I am the BitcoinKit developer. If you can call that way a dude that wrapped up already existing code for Mac developers easier to understand and use :-)

I'm replying mostly because libcoin is something that I would like to have a closer look at.
Problems I've encountered with it so far are as follows:

1. It uses QT.
Well. It's a lib. Or at least I've thought it was. But it seems that I really need it to compile it. Dunno why yet.

2. Steps to create xcodeproject doesn't work
For some reason when I've tried to follow steps to create an xcodeproject from the cmake, it failed.

3. It doesn't compile at all
Even after installing QT libs and using cmake to compile it from the terminal? it fails on bitcoind.cpp. My assumtion is that cmake or not - it uses llvm to compile the stuff.
Because of the templates that bitcoind is actually using that's not gonna work ever. That's why BitcoinKit is a separate dynamic library that's compiled with gcc (or at least llvm pretending to be gcc ;P)

Michael, have you tried to use your sources on Mac OS X recently? It seems to be a bit? outdated.

/b
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130718/ac527243/attachment.html>

From pete at petertodd.org  Thu Jul 18 12:13:08 2013
From: pete at petertodd.org (Peter Todd)
Date: Thu, 18 Jul 2013 08:13:08 -0400
Subject: [Bitcoin-development] SPV bitcoind? (was: Introducing
 BitcoinKit.framework)
In-Reply-To: <CANEZrP02oQ7GqJfLbEeD+khSGCyFz3eiynPkhARniEWr1ikmPQ@mail.gmail.com>
References: <CANEZrP2jmWkDbpJEm0vd2CKF-prFNbz_ZeNJfDWtSCKb8k5ZXA@mail.gmail.com>
	<2BDA0943-22BB-4405-9AF0-86FB41FD04A6@include7.ch>
	<CANEZrP0McSrVzwv=-qimPyX41EEDmyQdYW5QjPr_i+KWyJZSZw@mail.gmail.com>
	<2F20A509-13A9-4C84-86D7-A15C21BACD53@include7.ch>
	<CANEZrP2yQvmvwP_ZULdS2i+X6L9MeZ+DfidiuZPD2EHwLsN2MA@mail.gmail.com>
	<2A1C412D-414E-4C41-8E20-F0D21F801328@grabhive.com>
	<CANEZrP12V_5Ak0f91RsMziuqXysde102rGeSko=qPBjefy3AeA@mail.gmail.com>
	<8EE501AA-1601-4C28-A32E-80F17D219D3A@grabhive.com>
	<20130717105853.GA10083@savin>
	<CANEZrP02oQ7GqJfLbEeD+khSGCyFz3eiynPkhARniEWr1ikmPQ@mail.gmail.com>
Message-ID: <20130718121307.GA6062@savin>

On Wed, Jul 17, 2013 at 02:29:26PM +0200, Mike Hearn wrote:
> Partial UTXO sets is a neat idea. Unfortunately my intuition is that many
> SPV wallets only remain open for <1 minute at a time because the user wants
> to see they received money, or to send it. It'd be neat to get some
> telemetry from the Android wallet for this - I will ask Andreas to let
> users opt in to usage statistics.

Good idea.

> So for anti-DoS I think smart prioritisation heuristics are the way to go
> again. Perhaps by letting clients have an "identity" that they provide to a
> node when it's load shedding. Clients that have been seen before, have a
> track record of not being abusive etc get priority and new clients that
> were never seen before get dropped. Coming up with a way to do that whilst
> preserving privacy sounds like an interesting cryptographic challenge.

SPV clients behaving normally are highly abusive: they use up maximum
node resources with minimum cost to themselves. (nodes doing an initial
block download are similar now, although with partial mode they can
contribute back to the network sooner)

We can't win if the attacker has more upstream bandwidth than we have
downstream, but fortunately botnets are generally comprised of computers
on asymetric residential connections. Thus our goal is to prevent the
attacker from using lots of downstream bandwidth, and more importantly,
from consuming more memory and similar resources than we posess.
Annoyingly the raw # of TCP connections is very much a limited resource
due to constraints on the # of ports a process can handle, and
constraints imposed by stateful firewalls, and memory used by kernel
buffers.

Anything that allows for more incoming connections with less memory
usage is a good thing - bloom filters are limited to 32KiB and the
per-peer test if a INV item needs to be relayed to a peer is fairly
cheap, but we also have other buffers like pending INV messages and so
on. EC2 micro instances, as an example, often need -maxconnections
limited or they run out of memory - we've probably got room for
improvement; removing mapRelay and just grabbing relayed txs from the
mempool comes to mind.


More generally a good thing to do would be to force incoming peers to
use up RAM to make a connection. We can do that with a proof-of-data
posession engineered such that unless you store the data in high-speed
memory you will have your connection dropped. Per peer a node can pick a
nonce k and define j_i=H(k+i), sending the peer a set J=(j_0...j_n) to
store in RAM. With f(k, n, i) as a pseudo-random sequence generator we
create nonce x and ask our peer to compute J'(x, m) = j_f(x, n, 0) ^ ...
^ j_f(x, n, m)) and give us the result. (^ as the XOR operator) Because
we know the nonce k we can do that cheaply, calculating it on the fly,
but our peers have no choice but to store J and retrieve it on demand.
If they store J in RAM they can do so quickly; if they store J on disk
they can't. We then prioritize peers by how fast they respond to these
requests, both measuring ping times, and forcing attackers trying to
connect to large numbers of peers to posess large amounts of relatively
expensive RAM. This is particularly nice because we've can make it
significantly more expensive for anyone to peer to every node in the
Bitcoin network simultaneously to do things like watch transaction
propagation in real-time.

A more sophisticated approach would be possible if there existed a
version of H() with a computational trap-door - that is if there existed
H'(s, i)=H(i) where H' had significantly faster running time than H(),
but required knowledge of a secret. Our peers would then be able to
answer our challenges quickly only if they stored the intermediate
results in a lookup table, while we could check those challenges cheaply
without that table.

Adam: you're our local crypto-expert, what can we use for H'? Seems that
maybe some kind of asymmetric crypto system would work by requiring the
peer to crack weak secret keys that we generate deterministicly.

-- 
'peter'[:-1]@petertodd.org
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 490 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130718/edcced21/attachment.sig>

From jgarzik at bitpay.com  Thu Jul 18 12:53:55 2013
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Thu, 18 Jul 2013 08:53:55 -0400
Subject: [Bitcoin-development] Anti DoS for tx replacement
In-Reply-To: <20130718111353.GA11385@savin>
References: <CA+CODZEQX_xiaJE7WtFZC2qfVfDqZAgg-ydU5Q73O-QTkXJpPw@mail.gmail.com>
	<20130718111353.GA11385@savin>
Message-ID: <CAJHLa0M+LNuEa6j3RN-e1JLA2Q35-mjCo+AhOSJdoxBA6Vm1ow@mail.gmail.com>

On Thu, Jul 18, 2013 at 7:13 AM, Peter Todd <pete at petertodd.org> wrote:
> Note that with OP_DEPTH we can remove the small chance of the payee
> vanishing and putting the funds in limbo:

What are the costs, benefits, and risks associated with scripts no
longer being stateless, as OP_DEPTH would seem to introduce?

-- 
Jeff Garzik
Senior Software Engineer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From gronager at mac.com  Thu Jul 18 13:03:12 2013
From: gronager at mac.com (Michael Gronager)
Date: Thu, 18 Jul 2013 09:03:12 -0400
Subject: [Bitcoin-development] SPV bitcoind? (was: Introducing
 BitcoinKit.framework)
In-Reply-To: <F2462CCF2C1B4404BAAC69048DA08A0D@grabhive.com>
References: <CANEZrP0_H9+prDSF92q8a4QzP=fzDM6cTDv0+KcfV9NF9thkmw@mail.gmail.com>
	<3E7894A0-06F3-453D-87F8-975A244EBACF@include7.ch>
	<CANEZrP2jmWkDbpJEm0vd2CKF-prFNbz_ZeNJfDWtSCKb8k5ZXA@mail.gmail.com>
	<2BDA0943-22BB-4405-9AF0-86FB41FD04A6@include7.ch>
	<CANEZrP0McSrVzwv=-qimPyX41EEDmyQdYW5QjPr_i+KWyJZSZw@mail.gmail.com>
	<2F20A509-13A9-4C84-86D7-A15C21BACD53@include7.ch>
	<CANEZrP2yQvmvwP_ZULdS2i+X6L9MeZ+DfidiuZPD2EHwLsN2MA@mail.gmail.com>
	<2A1C412D-414E-4C41-8E20-F0D21F801328@grabhive.com>
	<CANEZrP12V_5Ak0f91RsMziuqXysde102rGeSko=qPBjefy3AeA@mail.gmail.com>
	<8EE501AA-1601-4C28-A32E-80F17D219D3A@grabhive.com>
	<20130717105853.GA10083@savin>
	<3DB67FAF-E113-47FE-9043-C22D0F5A4F4A@grabhive.com>
	<16E9C860-51CA-4274-B852-A816D12B6A5B@mac.com>
	<7685FDAE-C584-4FC8-9751-4D5556EC57C7@grabhive.com>
	<CANEZrP3F0Q_NXhhbkh=9CESAAmhntM_uKQEe0CJf=sDuJx2Xmw@mail.gmail.com>
	<EFFD62F8-8066-4B56-8331-1F1A8D7FF3C2@mac.com>
	<CANEZrP2dLJXfRmG8PRiHMWNGsSwT2ZL0Ac3ib4YZQ1Hv7uZDVg@mail.gmail.com>
	<F2462CCF2C1B4404BAAC69048DA08A0D@grabhive.com>
Message-ID: <B0B0F385-1D3C-4D79-8A62-2E41E5EC20CF@mac.com>

Hi Bazyli,

I actually do my main development on Mac OSX, so it surprises me to hear - I build Xcode projects with libcoin daily on Mac OSX and linux, on Windows it is agreeable more of a fight to build. QT is really not needed, I kept it there for BitcoinQT, that was once part of the tree too, will remove it as the qt part got split out.

Building clean on Mac requires OpenSSL, BDB and Boost - all can be installed using homebrew, also remember to use the latest cmake, and a normal cmake xcode call: cmake -GXcode should do the job. Otherwise pls send me the debug output. 

A few quick notes for building stuff there:
 - try with coinexplorer, it is the base code I am using - it splits out the wallet from the server, nice if you e.g. want to build a webcoin like server.
 - The wallet parts from bitcoind I don't use personally, so if you have problems with these I need to have a closer look.

Also note that as the first version of libcoin was a direct refactorization of bitcoin, the current one add a lot of different features and handles things quite differently - you can e.g. lookup any unspent output by script (bitcoin address) in milliseconds (nice for web wallets).

Finally: 

> 	Because of the templates that bitcoind is actually using that's not gonna work ever. That's why BitcoinKit is a separate dynamic library that's compiled with gcc (or at least llvm pretending to be gcc ;P)

As I mentioned it also compiles on Linux (gcc) - gcc is quite savvy when it comes to templates - I agree that the template stuff from Database.h is quite involved, but as I mentioned before try with coinexplorer.

- I will try to do a from scratch recompilation to see if I experience similar issues...

Also - if you are good at creating frameworks on Mac OSX using cmake, help would be appreciated! I think that libcoin by defaults build using shared libs, this configurable from ccmake using the dynamic library option.

Thanks,

Michael




From gronager at mac.com  Thu Jul 18 13:16:44 2013
From: gronager at mac.com (Michael Gronager)
Date: Thu, 18 Jul 2013 09:16:44 -0400
Subject: [Bitcoin-development] SPV bitcoind? (was: Introducing
 BitcoinKit.framework)
In-Reply-To: <B0B0F385-1D3C-4D79-8A62-2E41E5EC20CF@mac.com>
References: <CANEZrP0_H9+prDSF92q8a4QzP=fzDM6cTDv0+KcfV9NF9thkmw@mail.gmail.com>
	<3E7894A0-06F3-453D-87F8-975A244EBACF@include7.ch>
	<CANEZrP2jmWkDbpJEm0vd2CKF-prFNbz_ZeNJfDWtSCKb8k5ZXA@mail.gmail.com>
	<2BDA0943-22BB-4405-9AF0-86FB41FD04A6@include7.ch>
	<CANEZrP0McSrVzwv=-qimPyX41EEDmyQdYW5QjPr_i+KWyJZSZw@mail.gmail.com>
	<2F20A509-13A9-4C84-86D7-A15C21BACD53@include7.ch>
	<CANEZrP2yQvmvwP_ZULdS2i+X6L9MeZ+DfidiuZPD2EHwLsN2MA@mail.gmail.com>
	<2A1C412D-414E-4C41-8E20-F0D21F801328@grabhive.com>
	<CANEZrP12V_5Ak0f91RsMziuqXysde102rGeSko=qPBjefy3AeA@mail.gmail.com>
	<8EE501AA-1601-4C28-A32E-80F17D219D3A@grabhive.com>
	<20130717105853.GA10083@savin>
	<3DB67FAF-E113-47FE-9043-C22D0F5A4F4A@grabhive.com>
	<16E9C860-51CA-4274-B852-A816D12B6A5B@mac.com>
	<7685FDAE-C584-4FC8-9751-4D5556EC57C7@grabhive.com>
	<CANEZrP3F0Q_NXhhbkh=9CESAAmhntM_uKQEe0CJf=sDuJx2Xmw@mail.gmail.com>
	<EFFD62F8-8066-4B56-8331-1F1A8D7FF3C2@mac.com>
	<CANEZrP2dLJXfRmG8PRiHMWNGsSwT2ZL0Ac3ib4YZQ1Hv7uZDVg@mail.gmail.com>
	<F2462CCF2C1B4404BAAC69048DA08A0D@grabhive.com>
	<B0B0F385-1D3C-4D79-8A62-2E41E5EC20CF@mac.com>
Message-ID: <6AC9D684-FB77-4435-8506-DDD876D2378A@mac.com>

Hi Bazyli,

Just did a fresh build based on git (Xcode) - had one issue: the paillier and account tests were missing - please comment them out in tests/CMakeLists.txt, then coinexplorer should build nicely.

Note I did a git push as well, so you need to do a git pull first.

/Michael


From pete at petertodd.org  Thu Jul 18 13:18:36 2013
From: pete at petertodd.org (Peter Todd)
Date: Thu, 18 Jul 2013 09:18:36 -0400
Subject: [Bitcoin-development] SPV bitcoind? (was: Introducing
 BitcoinKit.framework)
In-Reply-To: <20130718121307.GA6062@savin>
References: <2BDA0943-22BB-4405-9AF0-86FB41FD04A6@include7.ch>
	<CANEZrP0McSrVzwv=-qimPyX41EEDmyQdYW5QjPr_i+KWyJZSZw@mail.gmail.com>
	<2F20A509-13A9-4C84-86D7-A15C21BACD53@include7.ch>
	<CANEZrP2yQvmvwP_ZULdS2i+X6L9MeZ+DfidiuZPD2EHwLsN2MA@mail.gmail.com>
	<2A1C412D-414E-4C41-8E20-F0D21F801328@grabhive.com>
	<CANEZrP12V_5Ak0f91RsMziuqXysde102rGeSko=qPBjefy3AeA@mail.gmail.com>
	<8EE501AA-1601-4C28-A32E-80F17D219D3A@grabhive.com>
	<20130717105853.GA10083@savin>
	<CANEZrP02oQ7GqJfLbEeD+khSGCyFz3eiynPkhARniEWr1ikmPQ@mail.gmail.com>
	<20130718121307.GA6062@savin>
Message-ID: <20130718131836.GA28234@petertodd.org>

On Thu, Jul 18, 2013 at 08:13:08AM -0400, Peter Todd wrote:
> A more sophisticated approach would be possible if there existed a
> version of H() with a computational trap-door - that is if there existed
> H'(s, i)=H(i) where H' had significantly faster running time than H(),
> but required knowledge of a secret. Our peers would then be able to
> answer our challenges quickly only if they stored the intermediate
> results in a lookup table, while we could check those challenges cheaply
> without that table.
> 
> Adam: you're our local crypto-expert, what can we use for H'? Seems that
> maybe some kind of asymmetric crypto system would work by requiring the
> peer to crack weak secret keys that we generate deterministicly.

Actually, come to think of it a really easy way to create H' is for the
node to create some expensive to compute set of data associated with
their identity. The data set is then stored once by the node, cheap, but
the clients have to store one set for every unique node they connect
too, expensive. A set of the function scrypt(k | i) for i in 0..n is an
obvious way to do it.

This can equally be used as a proof-of-work to make creating lots of
nodes expensive given a cheap way to verify the POW; easily done with a
non-interactive zero-knowledge proofs. It'd be nice if that POW could
incorporate blockchain data, showing that the identity had access to
that data and thus could have computed the UTXO set honestly. (the POW
should be incrementally extendable as new data becomes available)
However that is back to using a bunch of bandwidth at startup if our
peer doesn't have access to blockchain data, so both mechanisms would
probably have to be done independently. Note how we also make MITM
attacks on encrypted P2P connections expensive this way too even without
any form of authentication. (works best when the proof-of-work is
dependent on your IP addresses)

-- 
'peter'[:-1]@petertodd.org
00000000000000762784b647ede3678f172d73dd0c72c2180ab451b00d756959
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 198 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130718/4f4bcc2e/attachment.sig>

From mike at plan99.net  Thu Jul 18 13:38:11 2013
From: mike at plan99.net (Mike Hearn)
Date: Thu, 18 Jul 2013 15:38:11 +0200
Subject: [Bitcoin-development] SPV bitcoind? (was: Introducing
	BitcoinKit.framework)
In-Reply-To: <20130718121307.GA6062@savin>
References: <CANEZrP2jmWkDbpJEm0vd2CKF-prFNbz_ZeNJfDWtSCKb8k5ZXA@mail.gmail.com>
	<2BDA0943-22BB-4405-9AF0-86FB41FD04A6@include7.ch>
	<CANEZrP0McSrVzwv=-qimPyX41EEDmyQdYW5QjPr_i+KWyJZSZw@mail.gmail.com>
	<2F20A509-13A9-4C84-86D7-A15C21BACD53@include7.ch>
	<CANEZrP2yQvmvwP_ZULdS2i+X6L9MeZ+DfidiuZPD2EHwLsN2MA@mail.gmail.com>
	<2A1C412D-414E-4C41-8E20-F0D21F801328@grabhive.com>
	<CANEZrP12V_5Ak0f91RsMziuqXysde102rGeSko=qPBjefy3AeA@mail.gmail.com>
	<8EE501AA-1601-4C28-A32E-80F17D219D3A@grabhive.com>
	<20130717105853.GA10083@savin>
	<CANEZrP02oQ7GqJfLbEeD+khSGCyFz3eiynPkhARniEWr1ikmPQ@mail.gmail.com>
	<20130718121307.GA6062@savin>
Message-ID: <CANEZrP14Xmv4mih1VzP8U51NtSQ=Tuv7ewNNZmG+-pDd+BGdQQ@mail.gmail.com>

> SPV clients behaving normally are highly abusive: they use up maximum
> node resources with minimum cost to themselves.
>

This must be a new use of the word "abuse" I haven't come across before :)

At any rate, some of these assumptions are incorrect. Botnets of
compromised web servers are quite common, and asymmetry in node resources
is obviously biased against the kinds of devices people increasingly have
(phones, tablets) where extremely limited memory bandwidth is common and
apps routinely have just 16 or 32mb of memory to do everything including
the GUI.

A good anti-DoS strategy looks much the same as a good load shedding
strategy. There's little reason to treat them separately. Perhaps instead
of talking about DoS we should instead talk about what happens if Bitcoin
suddenly gets too popular. Now there are suddenly lots of good users all
wanting to use the network, and not enough nodes to support them all. What
do we do?

Some rules seem obvious - try to prioritise existing users over new users,
old coins over new coins (dPriority already does this) etc. If you run out
of TCP sockets prefer to disconnect recent connections (probably new users)
to long lived connections (probably high powered backbone peers). If you
run out of disk seeks prefer processing new blocks to serving old parts of
the chain, etc.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130718/4c80ef0f/attachment.html>

From pete at petertodd.org  Thu Jul 18 13:43:47 2013
From: pete at petertodd.org (Peter Todd)
Date: Thu, 18 Jul 2013 09:43:47 -0400
Subject: [Bitcoin-development] Anti DoS for tx replacement
In-Reply-To: <CAJHLa0M+LNuEa6j3RN-e1JLA2Q35-mjCo+AhOSJdoxBA6Vm1ow@mail.gmail.com>
References: <CA+CODZEQX_xiaJE7WtFZC2qfVfDqZAgg-ydU5Q73O-QTkXJpPw@mail.gmail.com>
	<20130718111353.GA11385@savin>
	<CAJHLa0M+LNuEa6j3RN-e1JLA2Q35-mjCo+AhOSJdoxBA6Vm1ow@mail.gmail.com>
Message-ID: <20130718134347.GB28234@petertodd.org>

On Thu, Jul 18, 2013 at 08:53:55AM -0400, Jeff Garzik wrote:
> On Thu, Jul 18, 2013 at 7:13 AM, Peter Todd <pete at petertodd.org> wrote:
> > Note that with OP_DEPTH we can remove the small chance of the payee
> > vanishing and putting the funds in limbo:
> 
> What are the costs, benefits, and risks associated with scripts no
> longer being stateless, as OP_DEPTH would seem to introduce?

Satoshi was worried that in the event of a re-org long chains of
transactions could become invalid and thus impossible to include in the
blockchain again, however that's equally possibly through tx mutability
or double-spends;(1) I don't think it's a valid concern in general. When
accepting any payment you need to take the chance of a re-org into
account, and if the payment is large enough it'll call for more confirms
on that basis. It does increase that (small) risk however and a client
may want to trace the transaction chain back a few steps when accepting
a very large payment in leu of just waiting for more confirms.

1) Also via non-standard transactions as SetBestChain() calls
mempool.accept() which still applies IsStandard(). We also recently
broke re-acceptance of transactions with dependencies as they are
currently added in reverse order, broken when Matt removed the
fIgnoreMissingInputs flag.


Not a problem limited to OP_DEPTH either: consider the following
probabalistic payment:

    PREVBLOCKHASH HASH n LESSTHAN VERIFY <pubkey> CHECKSIG

Obviously in a re-org the chance of it being succesfully included is
slim. (this example is simplistic and is vulnerable to double-spends in
a number of ways)


Mempool and relay code will have to take into account that a transaction
that can be included in the next block may not be possible to include in
the block after that for the purposes of protecting against tx-flood DoS
attacks - not an important issue unless we loosen IsStandard()

-- 
'peter'[:-1]@petertodd.org
0000000000000090344430e3956a709039288ceeb473fff6c1b68e70ee7169c4
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 198 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130718/675e9103/attachment.sig>

From pete at petertodd.org  Thu Jul 18 16:09:54 2013
From: pete at petertodd.org (Peter Todd)
Date: Thu, 18 Jul 2013 12:09:54 -0400
Subject: [Bitcoin-development] Anti DoS for tx replacement
In-Reply-To: <20130718111353.GA11385@savin>
References: <CA+CODZEQX_xiaJE7WtFZC2qfVfDqZAgg-ydU5Q73O-QTkXJpPw@mail.gmail.com>
	<20130718111353.GA11385@savin>
Message-ID: <20130718160954.GA29323@petertodd.org>

On Thu, Jul 18, 2013 at 07:13:53AM -0400, Peter Todd wrote:
> Note that with OP_DEPTH we can remove the small chance of the payee
> vanishing and putting the funds in limbo:
> 
>     <height + n> OP_DEPTH OP_LESSTHAN
>     IF 2 PK1 PK2 CHECKMULTISIG
>     ELSE PK1 CHECKSIG
>     ENDIF
> 
> Though that shows how to implement OP_DEPTH as a true soft-fork we're
> probably best off doing it as part of a script v2 using the soft-fork
> mechanism I outlined before when talking about fidelity-bonded ledgers.
> (best to do MAST (merklized abstract syntax tree) support at the same
> time)

jl2012 pointed out we already have an OP_DEPTH instruction that returns
the number of items on the stack. In the future we should use the terms
OP_BLOCKHEIGHT, OP_TXOUTHEIGHT, OP_TXOUTDEPTH to talk about hypothetical
instructions that put the block height, confirmed txout height, and
confirmed txout depth on the stack. Thus the above example would now be:

     <height + n> BLOCKDEPTH LESSTHAN
     IF 2 <pk-payor> <pk-payee> CHECKMULTISIG
     ELSE <pk-payor> CHECKSIG
     ENDIF

-- 
'peter'[:-1]@petertodd.org
0000000000000013030f49fe3eed5e7f9388c4ecc237b7a847ca93255836bc3b
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 198 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130718/81681c3c/attachment.sig>

From pete at petertodd.org  Thu Jul 18 16:22:26 2013
From: pete at petertodd.org (Peter Todd)
Date: Thu, 18 Jul 2013 12:22:26 -0400
Subject: [Bitcoin-development] SPV bitcoind? (was: Introducing
 BitcoinKit.framework)
In-Reply-To: <3DB67FAF-E113-47FE-9043-C22D0F5A4F4A@grabhive.com>
References: <CANEZrP2jmWkDbpJEm0vd2CKF-prFNbz_ZeNJfDWtSCKb8k5ZXA@mail.gmail.com>
	<2BDA0943-22BB-4405-9AF0-86FB41FD04A6@include7.ch>
	<CANEZrP0McSrVzwv=-qimPyX41EEDmyQdYW5QjPr_i+KWyJZSZw@mail.gmail.com>
	<2F20A509-13A9-4C84-86D7-A15C21BACD53@include7.ch>
	<CANEZrP2yQvmvwP_ZULdS2i+X6L9MeZ+DfidiuZPD2EHwLsN2MA@mail.gmail.com>
	<2A1C412D-414E-4C41-8E20-F0D21F801328@grabhive.com>
	<CANEZrP12V_5Ak0f91RsMziuqXysde102rGeSko=qPBjefy3AeA@mail.gmail.com>
	<8EE501AA-1601-4C28-A32E-80F17D219D3A@grabhive.com>
	<20130717105853.GA10083@savin>
	<3DB67FAF-E113-47FE-9043-C22D0F5A4F4A@grabhive.com>
Message-ID: <20130718162226.GB29323@petertodd.org>

On Wed, Jul 17, 2013 at 03:37:41PM +0200, Wendell wrote:
> Peter,
> 
> This sounds like a _very_ good idea for a desktop client, and probably acceptable to users so long as we take available disk space into consideration, and only ever use a fraction of it.
> 
> Will you implement this?

I've got one or two orders of magnitude more good ideas than I have time
to implement, but I will say this one would have a pretty big impact -
I'm considering it.

Of course, I would accept bribes. :) But in all seriousness I also
accepted funds from John Dillon to implement replace-by-fee, although
he's been good in understanding that the scope of the project was quite
a bit bigger than originally thought. (it turned out replace-by-fee can
enable very safe zero-conf transactions, but only with mempool and
relaying changes) I'd suggest looking at my git commit track record
before you offer anything FWIW; I've been much more of an academic than
a programmer.

-- 
'peter'[:-1]@petertodd.org
0000000000000013030f49fe3eed5e7f9388c4ecc237b7a847ca93255836bc3b
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 198 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130718/8dfbae5b/attachment.sig>

From w at grabhive.com  Thu Jul 18 16:46:16 2013
From: w at grabhive.com (Wendell)
Date: Thu, 18 Jul 2013 18:46:16 +0200
Subject: [Bitcoin-development] SPV bitcoind? (was: Introducing
	BitcoinKit.framework)
In-Reply-To: <20130718162226.GB29323@petertodd.org>
References: <CANEZrP2jmWkDbpJEm0vd2CKF-prFNbz_ZeNJfDWtSCKb8k5ZXA@mail.gmail.com>
	<2BDA0943-22BB-4405-9AF0-86FB41FD04A6@include7.ch>
	<CANEZrP0McSrVzwv=-qimPyX41EEDmyQdYW5QjPr_i+KWyJZSZw@mail.gmail.com>
	<2F20A509-13A9-4C84-86D7-A15C21BACD53@include7.ch>
	<CANEZrP2yQvmvwP_ZULdS2i+X6L9MeZ+DfidiuZPD2EHwLsN2MA@mail.gmail.com>
	<2A1C412D-414E-4C41-8E20-F0D21F801328@grabhive.com>
	<CANEZrP12V_5Ak0f91RsMziuqXysde102rGeSko=qPBjefy3AeA@mail.gmail.com>
	<8EE501AA-1601-4C28-A32E-80F17D219D3A@grabhive.com>
	<20130717105853.GA10083@savin>
	<3DB67FAF-E113-47FE-9043-C22D0F5A4F4A@grabhive.com>
	<20130718162226.GB29323@petertodd.org>
Message-ID: <9CC66602-DA60-43D4-AC75-DDC9A463588D@grabhive.com>

Heh, will do. If you have less confidence in your programming skills perhaps its best if you write documentation and we bring in someone else to do the heavy lifting? Maybe Eric Lombrozo would be interested in this, for example...

-wendell

grabhive.com | twitter.com/grabhive

On Jul 18, 2013, at 6:22 PM, Peter Todd wrote:

> I've got one or two orders of magnitude more good ideas than I have time
> to implement, but I will say this one would have a pretty big impact -
> I'm considering it.
> 
> Of course, I would accept bribes. :) But in all seriousness I also
> accepted funds from John Dillon to implement replace-by-fee, although
> he's been good in understanding that the scope of the project was quite
> a bit bigger than originally thought. (it turned out replace-by-fee can
> enable very safe zero-conf transactions, but only with mempool and
> relaying changes) I'd suggest looking at my git commit track record
> before you offer anything FWIW; I've been much more of an academic than
> a programmer.

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 841 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130718/737f1371/attachment.sig>

From pete at petertodd.org  Thu Jul 18 23:03:59 2013
From: pete at petertodd.org (Peter Todd)
Date: Thu, 18 Jul 2013 19:03:59 -0400
Subject: [Bitcoin-development] SPV bitcoind? (was: Introducing
 BitcoinKit.framework)
In-Reply-To: <9CC66602-DA60-43D4-AC75-DDC9A463588D@grabhive.com>
References: <CANEZrP0McSrVzwv=-qimPyX41EEDmyQdYW5QjPr_i+KWyJZSZw@mail.gmail.com>
	<2F20A509-13A9-4C84-86D7-A15C21BACD53@include7.ch>
	<CANEZrP2yQvmvwP_ZULdS2i+X6L9MeZ+DfidiuZPD2EHwLsN2MA@mail.gmail.com>
	<2A1C412D-414E-4C41-8E20-F0D21F801328@grabhive.com>
	<CANEZrP12V_5Ak0f91RsMziuqXysde102rGeSko=qPBjefy3AeA@mail.gmail.com>
	<8EE501AA-1601-4C28-A32E-80F17D219D3A@grabhive.com>
	<20130717105853.GA10083@savin>
	<3DB67FAF-E113-47FE-9043-C22D0F5A4F4A@grabhive.com>
	<20130718162226.GB29323@petertodd.org>
	<9CC66602-DA60-43D4-AC75-DDC9A463588D@grabhive.com>
Message-ID: <20130718230359.GA23672@savin>

On Thu, Jul 18, 2013 at 06:46:16PM +0200, Wendell wrote:
> Heh, will do. If you have less confidence in your programming skills perhaps its best if you write documentation and we bring in someone else to do the heavy lifting? Maybe Eric Lombrozo would be interested in this, for example...

I have plenty of confidence in my programming skills, I just don't have
very much evidence in the Bitcoin git history to convince you my
confidence is well placed. :)

I do have a day job I love, so it will certainly get done faster if you
can get someone else to do the actual coding; I'd be willing to write
the specifications and supervise/audit/advise for a few hours a week.

> -wendell
> 
> grabhive.com | twitter.com/grabhive
> 
> On Jul 18, 2013, at 6:22 PM, Peter Todd wrote:
> 
> > I've got one or two orders of magnitude more good ideas than I have time
> > to implement, but I will say this one would have a pretty big impact -
> > I'm considering it.
> > 
> > Of course, I would accept bribes. :) But in all seriousness I also
> > accepted funds from John Dillon to implement replace-by-fee, although
> > he's been good in understanding that the scope of the project was quite
> > a bit bigger than originally thought. (it turned out replace-by-fee can
> > enable very safe zero-conf transactions, but only with mempool and
> > relaying changes) I'd suggest looking at my git commit track record
> > before you offer anything FWIW; I've been much more of an academic than
> > a programmer.

-- 
'peter'[:-1]@petertodd.org
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 490 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130718/7422d4cc/attachment.sig>

From jeanpaulkogelman at me.com  Fri Jul 19 17:46:44 2013
From: jeanpaulkogelman at me.com (Jean-Paul Kogelman)
Date: Fri, 19 Jul 2013 17:46:44 +0000 (GMT)
Subject: [Bitcoin-development] [RFC] Proposal: Base58 encoded HD Wallet
 master seed with optional encryption
Message-ID: <20ec1e35-3051-45d6-b449-e4a4d5c06dc8@me.com>


Hi everyone,

I'm looking for feedback on the proposal below.

Kind regards,

Jean-Paul

---
BIP:?
Title: Base58 encoded HD Wallet master seed with optional encryption
Author: Jean-Paul Kogelman
Status: Draft
Type: Informational
Created: 17-07-2013

Abstract

This proposal describes a method for encoding and optionally encrypting a Bitcoin Hierarchical Deterministic (HD) Wallet master seed. Encoded master seeds are intended for use on paper wallets. Each string contains all the information needed to verify and reconstitute an HD wallet except for the optional passphrase. The encrypted version uses salting and scrypt to resist brute-force attacks.

The method provides two encoding methodologies in 3 lengths each (16, 32 and 64 byte seeds). One is a clear version of the master seed with verification information for integrity checking and the other is an encrypted representation.

A 32-bit hash of the resulting master Bitcoin public address is encoded in plain text within each seed record, so in the case of an encrypted seed, it can be correlated to a Bitcoin public address with reasonable probability by someone not knowing the passphrase. The complete Bitcoin public address can be derived through successful decoding and optional decryption of the master seed record.


Motivation

The extended private keys proposed in BIP 0032 are long, fixed length records and don't offer any form of security. The master seed used to generate the HD wallet is typically shorter than the extended master private key that results from it.?

A compact representation of the master seed is easier to handle and a 2-factor version of the master seed record allows for safe storage and the creation of paper wallets by 3rd parties.?


Copyright

This proposal is hereby placed in the public domain.


Rationale

User story: As a Bitcoin user who uses HD wallets, I would like the ability to store my wallet master seed in a compact form as a paper wallet.

User story: As a Bitcoin user who uses HD wallets, I would like the ability to have a 3rd party create a paper wallet with my master seed in it, without having access to the funds stored in the wallet.

User story: As a Bitcoin user who uses HD wallets, I would like the ability to choose the strength of the master seed depending on my security requirements and how I wish to store it.?


Specification

This proposal makes use of the following functions and definitions:

AES256Encrypt, AES256Decrypt: the simple form of the well-known AES block cipher without consideration for initialization vectors or block chaining. Each of these functions takes a 256-bit key and a variable legth of input and deterministically yields output data of similar length to the input.

SHA256: a well-known hashing algorithm that takes an arbitrary number of bytes as input and deterministically yields a 32-byte hash.

RIPEMD160: a well known hashing algorithm that takes an arbitrary number of bytes as input and deterministically yields a 20-byte hash.

scrypt: A well-known key derivation algorithm. It takes the following parameters: (string) password, (string) salt, (int) n, (int) r, (int) p, (int) length, and deterministically yields an array of bytes whose length is equal to the length parameter.

HMAC-SHA512: Produces a 64 byte (512 bit) hash based message authentication code using the SHA512 hash function using a seed (in our case we will use a byte representation of "Bitcoin seed") and an aribtrary input message. The output will be 64 bytes.

Base58Check: a method for encoding arrays of bytes using 58 alphanumeric characters commonly used in the Bitcoin ecosystem.

G, N: Constants defined as part of the secp256k1 elliptic curve. G is an elliptic curve point, and N is a large positive integer.

Prefix

It is proposed that the resulting Base58Check-encoded string start with either "WS" for clear master seed records or "ws" for 2-factor master seed records. The prefixes "WS" and "ws" were chosen as abreviations of the term "Wallet Seed" and upper case to indicate whether it's a clear representation and lower case when it's a 2-factor representation.?

To keep the size of the encrypted key equal to the clear version, no initialization vectors (IVs) are used in the AES encryption. Rather, suitable values for IV-like use are derived using scrypt from the passphrase and from using a 32-bit hash of the resulting Bitcoin public address as salt.

Proposed specification

There are 2 seed record representations with 3 lengths each, resulting in a total of 6 different object identifier prefixes.?

Prefix 0x1093: Clear 16 byte master seed, total length: 22 bytes
Prefix 0x1E68: Clear 32 byte master seed, total length: 38 bytes
Prefix 0x665A: Clear 64 byte master seed, total length: 70 bytes

Prefix 0x1EE4: 2-factor 16 byte master seed, total length: 22 bytes
Prefix 0x38AE: 2-factor 32 byte master seed, total length: 38 bytes
Prefix 0xBECB: 2-factor 64 byte master seed, total length: 70 bytes

These are constant bytes that appear at the beginning of the Base58Check-encoded record, and their presence causes the resulting string to have a predictable prefix.

How the user sees it: 35, 57 or 101 characters always starting with either "WS" or "ws".

Count of payload bytes (beyond prefix): 20, 36 or 68

Payload format:
4 bytes: SHA256(SHA256(master_bitcoin_public_address))[0...3], used both for typo checking and as salt.
16, 32 or 64 bytes: either a clear representation or an encrypted representation of the master seed.

Range in Base58Check encoding for clear 16 byte master seed (prefix WS):
Minimum value: WSJ5JnjiRZT8b15aZr6GGWzt2VMBPapmhBQ (based on 0x10 0x93 plus twenty 0x00's)
Maximum value: WShQumr1iGdbTpWiesWbb189p7rSLBiq3EJ (based on 0x10 0x93 plus twenty 0xFF's)

Range in Base58Check encoding for clear 32 byte master seed (prefix WS):
Minimum value: WS7SqjMWhDGCagcZxCk317LLWyWUny7465ENGKEKuxBf5sFvRHmRRfCgr (based on 0x1E 0x68 plus thirty-six 0x00's)
Maximum value: WSLAbo8WHEQr1Z1cv26Z5njh5URHMo9fPiDFYE2NpCwmAoPZwDxzm3PjB (based on 0x1E 0x68 plus thirty-six 0xFF's)

Range in Base58Check encoding for clear 64 byte master seed (prefix WS):
Minimum value: WS2cMzM9WrogWVLKYFzTaTXZnYCryY31uptmdevXuRFBXTWJhmt4No9Eejoj3apqyU5RkyXsGHFPbZd14oz7Fv1Mi85kadBD4TPsL (based on 0x66 0x5A plus sixty-eight 0x00's)
Maximum value: WS6PXJ1HoJXn9hyLz8uXQEy2ZajAVaFDTViXhZDthwYbhyvfHRqjwU4FoGpepCbuuycAwMFbgoZB6E48baqD1c9PdMNUZCSSBmfE7 (based on 0x66 0x5A plus sixty-eight 0xFF's)

Range in Base58Check encoding for 2-factor 16 byte master seed (prefix ws):
Minimum value: ws1nyTi9KjdRkJda4Yh1KkXSLC8SZ6kKzEM (based on 0x1E 0xE4 plus twenty 0x00's)
Maximum value: wsR8aSpScSotd84i9a7LeEei7pdhVkeciX8 (based on 0x1E 0xE4 plus twenty 0xFF's)

Range in Base58Check encoding for 2-factor 32 byte master seed (prefix ws):
Minimum value: wsC8sayZpTpeX3k6jcCMeTedDapXkXd7SZpRJbSjdeqKBJ2Vnrm1xyfD3 (based on 0x38 0xAE plus thirty-six 0x00's)
Maximum value: wsQrdekZQUyHwv99hRYsj93yn5jLKMfikCoJaWEnXubRGEA9Jnxg5KaPW (based on 0x38 0xAE plus thirty-six 0xFF's)

Range in Base58Check encoding for 2-factor 64 byte master seed (prefix ws):
Minimum value: ws4XTrriTEyyy2TrGWv9R7o94CyBiN69S2VxiK5tVW9htEi48w54sQ43JChCmadoGtYpZSu7vqbbQTMemCSyyToyLPPMjughcXNxE (based on 0xBE 0xCB plus sixty-eight 0x00's)
Maximum value: ws8JdAWrjgi5cF6siPqDEuEbqFVVEQJLyhKinDPFJ2T84m8Qib2kS4y4Sji8YCQsDQ5ZjpcrMMuNu7nnHyJ5j9x1Fcg5iUwvZ7krH (based on 0xBE 0xCB plus sixty-eight 0xFF's)

Generation of master seed:

1. Take either an existing 16, 32 or 64 byte master seed S, or generate one from a (P)RNG.
2. Calculate I = HMAC-SHA512(key = "Bitcoin seed", msg = S)
3. Split I into two 32-byte sequences, IL and IR.
4. Use IL as master secret key. IR, the master chain code is not relevant here.
5. In case IL is 0 or >= N, the master key is invalid. Go back to step 1 if generating, or in case of a provided master seed, return an error.
6. Compute the public key K = IL*G
7. Calculate the master Bitcoin public address A = Base58Check(RIPEMD160(SHA256(K)))
8. Calculate the salt = SHA256(SHA256(A))[0...3]

Encryption:

9. Derive a hash H from the passphrase using scrypt
? ? - Parameters: passphrase is the passphrase itself encoded in UTF-8, salt = salt, n = 16384, r = 8, p = 8, length = seed length + 32
10. The first number of bytes in H, equal to length of seed S are used to xor seed S. Call the result X.
11. Do AES256Encrypt(message = X, key = last 32 bytes of H), call this encrypted_seed.


The encrypted_master_seed is the Base58Check-encoded concatenation of the following, which totals 2 + 4 + seed length bytes (22, 38 or 70 bytes):

encrypted_master_seed = prefix + salt + encrypted_seed

The clear version is:

master_seed = prefix + salt + seed S


Decryption:

1. Collect encrypted_master_seed and passphrase from user.
2. Perform step 9 of encryption with the passphrase and the salt from the encrypted_master_seed.
3. With the encrypted_seed from encrypted_master_seed do AES256Decrypt(message = encrypted_seed, key = last 32 bytes of H), call this decrypted_seed.
4. With the first number of bytes in H, equal to the length of the decrypted_seed, perform the xor operation on decrypted_seed and call the result S.
5. Perform generation steps 2 until 8 and verify that the generated salt is equal to the salt from encrypted_master_seed.


Suggestions for implementers of proposal with alt-chains

This proposal involves hashing of a text representation of a public address which for Bitcoin includes the leading '1'. Alt-chains can easily be denoted simply by using the alt-chain's preferred format for representing an address. Alt-chain implementers may also change the prefix such that encoded master seeds do not start with "WS" or "ws".


Bitcoin testnet representation

This proposal does not cover separate Bitcoin testnet representations of encoded master seeds, although since the 4 salt bytes are based on a double SHA256 of the Bitcoin public address, they will be different for Bitcoin testnet public addresses and validation will fail.?


Reference implementation

TODO


Test vectors

Test 1:

Seed ? ? ?: 000102030405060708090a0b0c0d0e0f
Clear ? ? : WSZsLQ5c1uKrRQugbrZNYsvMhRixiaWaVmJ
Password ?: Satoshi
Encrypted : wsHb15443fYPmneEXskd6wUZeP15fCiA69n
Address ? : 15mKKb2eos1hWa6tisdPwwDC1a5J1y9nma
xprv ? ? ?: xprv9s21ZrQH143K3QTDL4LXw2F7HEK3wJUD2nW2nRk4stbPy6cq3jPPqjiChkVvvNKmPGJxWUtg6LnF5kejMRNNU3TGtRBeJgk33yuGBxrMPHi
xpub ? ? ?: xpub661MyMwAqRbcFtXgS5sYJABqqG9YLmC4Q1Rdap9gSE8NqtwybGhePY2gZ29ESFjqJoCu1Rupje8YtGqsefD265TMg7usUDFdp6W1EGMcet8

Test 2:

Seed ? ? ?: 7f0ad7d595be13e6fe4cf1fa0fbb6ae9c26c5d9b09920709414982b6363d5844
Clear ? ? : WSB7z3izBZwDoaAUA4mDpEHzAZsA5zfTWu3cCxhkaLtZ4Ur6n6mXsgpMK
Password ?: Nakamoto
Encrypted : wsFp1uM2gFhd2PuRzmNFReRud71hgmVwPoc7cGpxuvgETRsv8J1wHNANJ
Address ? : 1A54ECavJaJAoLGqqNrPd9Y3cvSvkL2Roz
xprv ? ? ?: xprv9s21ZrQH143K3f9hMVvcbY4EX4CfxsEtc6C5BMkZtgGpTGpxAscoq7SLSAcL6k5dxaZ9s4SChrtfSFoKpijuwAnhuPn76eva6W8bDr118t3
xpub ? ? ?: xpub661MyMwAqRbcG9EATXTcxfzy563ANKxjyK7fykABT1ooL5A6iQw4NukpHShDxYgeso4NHscFmqcVEtdUt61c8RCf7FqXK9z6sgfkQvYBQPP

Test 3:

Seed ? ? ?: fffcf9f6f3f0edeae7e4e1dedbd8d5d2cfccc9c6c3c0bdbab7b4b1aeaba8a5a29f9c999693908d8a8784817e7b7875726f6c696663605d5a5754514e4b484542
Clear ? ? : WS6186bsAkSaGRjRZ1UGyCGigxsXPvnYGSqNHJYmauV9X4W8tLJke1DH8UP8YMsDLdsjwgodcghjjKqkWQmk3t7qDbNMJVBDKcD2s
Password ?: Vires In Numeris
Encrypted : ws7vDy7RjqMvcPX7GeakKvdK6vDKGhRSjQtaRfKUVQrJXwwetLSeTdNgGzn5BKZZqz1BBdaHBFYfLvNUSxDaoP1ojJMMJD9UnQuwt
Address ? : 1JEoxevbLLG8cVqeoGKQiAwoWbNYSUyYjg
xprv ? ? ?: xprv9s21ZrQH143K31xYSDQpPDxsXRTUcvj2iNHm5NUtrGiGG5e2DtALGdso3pGz6ssrdK4PFmM8NSpSBHNqPqm55Qn3LqFtT2emdEXVYsCzC2U
xpub ? ? ?: xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB

Test 4:

Seed ? ? ?: 6ca4a27ac660c683340f59353b1375a9
Clear ? ? : WSXnfK5CJbDoSwcqMfz7Xqy3avuPHSxDQQk
Password ?: ???
Encrypted : wsFWKz3c5eeHRwtJveSdFvwUrmoNVkJ5ns2
Address ? : 1JVncPbsdB2s4zHim3VdAWNkZ8JANBZ1U9
xprv ? ? ?: xprv9s21ZrQH143K3mJ4upPSDfXdA34yNjem6PSsXT63vm8dq8ikUJv4iiTD3PrSKtdGZXFVD689z5T7knXo55BjcHS2WL3Syp2DbGgnbgxw2QA
xpub ? ? ?: xpub661MyMwAqRbcGFNY1qvSaoUMi4uTnCNcTcNUKqVfV6fchw3u1rEKGWmgtfUMRKLgUHNZ7dfsh8Ys6SLwUojZqScFBQL3dFGF3QywNLJVZ2o


Acknowledgements

Mike Caldwell for BIP 0038, which this proposal borrows heavily from.


See Also

BIP 0032 Hierarchical Deterministic Wallets: https://en.bitcoin.it/wiki/BIP_0032
BIP 0038 Passphrase-protected private key: https://en.bitcoin.it/wiki/BIP_0038

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130719/eb2ecd1f/attachment.html>

From jeanpaulkogelman at me.com  Fri Jul 19 18:11:05 2013
From: jeanpaulkogelman at me.com (Jean-Paul Kogelman)
Date: Fri, 19 Jul 2013 18:11:05 +0000 (GMT)
Subject: [Bitcoin-development] [RFC] Proposal: Base58 encoded HD Wallet
 master seed with optional encryption
In-Reply-To: <CAFmyj8wDQ7p080QHFPkhfCXttCUPfrLxKqzo_2zgyTJVk9OTZg@mail.gmail.com>
Message-ID: <e8d5c7be-16d9-40c5-b163-28f689804e57@me.com>


I do, but it's currently not in shippable form. Would the encoding / decoding functions suffice?

jp


On Jul 19, 2013, at 10:54 AM, "Andreas M. Antonopoulos" <andreas at rooteleven.com> wrote:

Jean-Paul,

Very interesting. I have a beta BIP0038 compliant paper wallet and I'm working on BIP0032 paper wallets at the moment. 

This is definitely necessary and a great approach to combine BIP0038 and BIP0032. 

Do you have reference code?


On Fri, Jul 19, 2013 at 10:46 AM, Jean-Paul Kogelman <jeanpaulkogelman at me.com> wrote:

Hi everyone,

I'm looking for feedback on the proposal below.

Kind regards,

Jean-Paul

---
BIP:?
Title: Base58 encoded HD Wallet master seed with optional encryption
Author: Jean-Paul Kogelman
Status: Draft
Type: Informational
Created: 17-07-2013

...
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130719/efb998ec/attachment.html>

From jeanpaulkogelman at me.com  Fri Jul 19 18:15:32 2013
From: jeanpaulkogelman at me.com (Jean-Paul Kogelman)
Date: Fri, 19 Jul 2013 18:15:32 +0000 (GMT)
Subject: [Bitcoin-development] [RFC] Proposal: Base58 encoded HD Wallet
 master seed with optional encryption
In-Reply-To: <op.w0hd2nthyldrnw@laptop-air>
Message-ID: <acc0f014-7ae3-4e45-87ad-2b0e5358dca9@me.com>

Hi Jeremy,

The main reason is to stick as close to BIP 0038 as possible, allowing implementers to reuse existing code paths. This proposal and BIP 0032 don't really put any restrictions on content of the seed itself (as can be seen in test vector 1).

jp

On Jul 19, 2013, at 11:09 AM, Jeremy Spilman <jeremy at taplink.co> wrote:

Very clear write-up Jean!

Quick question - what is the purpose of step 10 of the encryption process -- why XOR the master seed with some bytes of the hashed passphrase before encrypting the XOR'd master seed with the remaining bytes of the hashed passphrase? Versus simply encrypting the master seed with the hashed passphrase of equal length to the seed?

Does this basically serve the fucntion of an IV?

Do you really need this since the master seed must be high entropy random bytes in the first place?

Thanks,
--Jeremy

On Fri, 19 Jul 2013 10:46:44 -0700, Jean-Paul Kogelman <jeanpaulkogelman at me.com> wrote:


Hi everyone,

I'm looking for feedback on the proposal below.

Kind regards,

Jean-Paul

---
BIP:?
Title: Base58 encoded HD Wallet master seed with optional encryption
Author: Jean-Paul Kogelman
Status: Draft
Type: Informational
Created: 17-07-2013

Abstract

This proposal describes a method for encoding and optionally encrypting a Bitcoin Hierarchical Deterministic (HD) Wallet master seed. Encoded master seeds are intended for use on paper wallets. Each string contains all the information needed to verify and reconstitute an HD wallet except for the optional passphrase. The encrypted version uses salting and scrypt to resist brute-force attacks.

The method provides two encoding methodologies in 3 lengths each (16, 32 and 64 byte seeds). One is a clear version of the master seed with verification information for integrity checking and the other is an encrypted representation.

A 32-bit hash of the resulting master Bitcoin public address is encoded in plain text within each seed record, so in the case of an encrypted seed, it can be correlated to a Bitcoin public address with reasonable probability by someone not knowing the passphrase. The complete Bitcoin public address can be derived through successful decoding and optional decryption of the master seed record.


Motivation

The extended private keys proposed in BIP 0032 are long, fixed length records and don't offer any form of security. The master seed used to generate the HD wallet is typically shorter than the extended master private key that results from it.?

A compact representation of the master seed is easier to handle and a 2-factor version of the master seed record allows for safe storage and the creation of paper wallets by 3rd parties.?


Copyright

This proposal is hereby placed in the public domain.


Rationale

User story: As a Bitcoin user who uses HD wallets, I would like the ability to store my wallet master seed in a compact form as a paper wallet.

User story: As a Bitcoin user who uses HD wallets, I would like the ability to have a 3rd party create a paper wallet with my master seed in it, without having access to the funds stored in the wallet.

User story: As a Bitcoin user who uses HD wallets, I would like the ability to choose the strength of the master seed depending on my security requirements and how I wish to store it.?


Specification

This proposal makes use of the following functions and definitions:

AES256Encrypt, AES256Decrypt: the simple form of the well-known AES block cipher without consideration for initialization vectors or block chaining. Each of these functions takes a 256-bit key and a variable legth of input and deterministically yields output data of similar length to the input.

SHA256: a well-known hashing algorithm that takes an arbitrary number of bytes as input and deterministically yields a 32-byte hash.

RIPEMD160: a well known hashing algorithm that takes an arbitrary number of bytes as input and deterministically yields a 20-byte hash.

scrypt: A well-known key derivation algorithm. It takes the following parameters: (string) password, (string) salt, (int) n, (int) r, (int) p, (int) length, and deterministically yields an array of bytes whose length is equal to the length parameter.

HMAC-SHA512: Produces a 64 byte (512 bit) hash based message authentication code using the SHA512 hash function using a seed (in our case we will use a byte representation of "Bitcoin seed") and an aribtrary input message. The output will be 64 bytes.

Base58Check: a method for encoding arrays of bytes using 58 alphanumeric characters commonly used in the Bitcoin ecosystem.

G, N: Constants defined as part of the secp256k1 elliptic curve. G is an elliptic curve point, and N is a large positive integer.

Prefix

It is proposed that the resulting Base58Check-encoded string start with either "WS" for clear master seed records or "ws" for 2-factor master seed records. The prefixes "WS" and "ws" were chosen as abreviations of the term "Wallet Seed" and upper case to indicate whether it's a clear representation and lower case when it's a 2-factor representation.?

To keep the size of the encrypted key equal to the clear version, no initialization vectors (IVs) are used in the AES encryption. Rather, suitable values for IV-like use are derived using scrypt from the passphrase and from using a 32-bit hash of the resulting Bitcoin public address as salt.

Proposed specification

There are 2 seed record representations with 3 lengths each, resulting in a total of 6 different object identifier prefixes.?

Prefix 0x1093: Clear 16 byte master seed, total length: 22 bytes
Prefix 0x1E68: Clear 32 byte master seed, total length: 38 bytes
Prefix 0x665A: Clear 64 byte master seed, total length: 70 bytes

Prefix 0x1EE4: 2-factor 16 byte master seed, total length: 22 bytes
Prefix 0x38AE: 2-factor 32 byte master seed, total length: 38 bytes
Prefix 0xBECB: 2-factor 64 byte master seed, total length: 70 bytes

These are constant bytes that appear at the beginning of the Base58Check-encoded record, and their presence causes the resulting string to have a predictable prefix.

How the user sees it: 35, 57 or 101 characters always starting with either "WS" or "ws".

Count of payload bytes (beyond prefix): 20, 36 or 68

Payload format:
4 bytes: SHA256(SHA256(master_bitcoin_public_address))[0...3], used both for typo checking and as salt.
16, 32 or 64 bytes: either a clear representation or an encrypted representation of the master seed.

Range in Base58Check encoding for clear 16 byte master seed (prefix WS):
Minimum value: WSJ5JnjiRZT8b15aZr6GGWzt2VMBPapmhBQ (based on 0x10 0x93 plus twenty 0x00's)
Maximum value: WShQumr1iGdbTpWiesWbb189p7rSLBiq3EJ (based on 0x10 0x93 plus twenty 0xFF's)

Range in Base58Check encoding for clear 32 byte master seed (prefix WS):
Minimum value: WS7SqjMWhDGCagcZxCk317LLWyWUny7465ENGKEKuxBf5sFvRHmRRfCgr (based on 0x1E 0x68 plus thirty-six 0x00's)
Maximum value: WSLAbo8WHEQr1Z1cv26Z5njh5URHMo9fPiDFYE2NpCwmAoPZwDxzm3PjB (based on 0x1E 0x68 plus thirty-six 0xFF's)

Range in Base58Check encoding for clear 64 byte master seed (prefix WS):
Minimum value: WS2cMzM9WrogWVLKYFzTaTXZnYCryY31uptmdevXuRFBXTWJhmt4No9Eejoj3apqyU5RkyXsGHFPbZd14oz7Fv1Mi85kadBD4TPsL (based on 0x66 0x5A plus sixty-eight 0x00's)
Maximum value: WS6PXJ1HoJXn9hyLz8uXQEy2ZajAVaFDTViXhZDthwYbhyvfHRqjwU4FoGpepCbuuycAwMFbgoZB6E48baqD1c9PdMNUZCSSBmfE7 (based on 0x66 0x5A plus sixty-eight 0xFF's)

Range in Base58Check encoding for 2-factor 16 byte master seed (prefix ws):
Minimum value: ws1nyTi9KjdRkJda4Yh1KkXSLC8SZ6kKzEM (based on 0x1E 0xE4 plus twenty 0x00's)
Maximum value: wsR8aSpScSotd84i9a7LeEei7pdhVkeciX8 (based on 0x1E 0xE4 plus twenty 0xFF's)

Range in Base58Check encoding for 2-factor 32 byte master seed (prefix ws):
Minimum value: wsC8sayZpTpeX3k6jcCMeTedDapXkXd7SZpRJbSjdeqKBJ2Vnrm1xyfD3 (based on 0x38 0xAE plus thirty-six 0x00's)
Maximum value: wsQrdekZQUyHwv99hRYsj93yn5jLKMfikCoJaWEnXubRGEA9Jnxg5KaPW (based on 0x38 0xAE plus thirty-six 0xFF's)

Range in Base58Check encoding for 2-factor 64 byte master seed (prefix ws):
Minimum value: ws4XTrriTEyyy2TrGWv9R7o94CyBiN69S2VxiK5tVW9htEi48w54sQ43JChCmadoGtYpZSu7vqbbQTMemCSyyToyLPPMjughcXNxE (based on 0xBE 0xCB plus sixty-eight 0x00's)
Maximum value: ws8JdAWrjgi5cF6siPqDEuEbqFVVEQJLyhKinDPFJ2T84m8Qib2kS4y4Sji8YCQsDQ5ZjpcrMMuNu7nnHyJ5j9x1Fcg5iUwvZ7krH (based on 0xBE 0xCB plus sixty-eight 0xFF's)

Generation of master seed:

1. Take either an existing 16, 32 or 64 byte master seed S, or generate one from a (P)RNG.
2. Calculate I = HMAC-SHA512(key = "Bitcoin seed", msg = S)
3. Split I into two 32-byte sequences, IL and IR.
4. Use IL as master secret key. IR, the master chain code is not relevant here.
5. In case IL is 0 or >= N, the master key is invalid. Go back to step 1 if generating, or in case of a provided master seed, return an error.
6. Compute the public key K = IL*G
7. Calculate the master Bitcoin public address A = Base58Check(RIPEMD160(SHA256(K)))
8. Calculate the salt = SHA256(SHA256(A))[0...3]

Encryption:

9. Derive a hash H from the passphrase using scrypt
? ? - Parameters: passphrase is the passphrase itself encoded in UTF-8, salt = salt, n = 16384, r = 8, p = 8, length = seed length + 32
10. The first number of bytes in H, equal to length of seed S are used to xor seed S. Call the result X.
11. Do AES256Encrypt(message = X, key = last 32 bytes of H), call this encrypted_seed.


The encrypted_master_seed is the Base58Check-encoded concatenation of the following, which totals 2 + 4 + seed length bytes (22, 38 or 70 bytes):

encrypted_master_seed = prefix + salt + encrypted_seed

The clear version is:

master_seed = prefix + salt + seed S


Decryption:

1. Collect encrypted_master_seed and passphrase from user.
2. Perform step 9 of encryption with the passphrase and the salt from the encrypted_master_seed.
3. With the encrypted_seed from encrypted_master_seed do AES256Decrypt(message = encrypted_seed, key = last 32 bytes of H), call this decrypted_seed.
4. With the first number of bytes in H, equal to the length of the decrypted_seed, perform the xor operation on decrypted_seed and call the result S.
5. Perform generation steps 2 until 8 and verify that the generated salt is equal to the salt from encrypted_master_seed.


Suggestions for implementers of proposal with alt-chains

This proposal involves hashing of a text representation of a public address which for Bitcoin includes the leading '1'. Alt-chains can easily be denoted simply by using the alt-chain's preferred format for representing an address. Alt-chain implementers may also change the prefix such that encoded master seeds do not start with "WS" or "ws".


Bitcoin testnet representation

This proposal does not cover separate Bitcoin testnet representations of encoded master seeds, although since the 4 salt bytes are based on a double SHA256 of the Bitcoin public address, they will be different for Bitcoin testnet public addresses and validation will fail.?


Reference implementation

TODO


Test vectors

Test 1:

Seed ? ? ?: 000102030405060708090a0b0c0d0e0f
Clear ? ? : WSZsLQ5c1uKrRQugbrZNYsvMhRixiaWaVmJ
Password ?: Satoshi
Encrypted : wsHb15443fYPmneEXskd6wUZeP15fCiA69n
Address ? : 15mKKb2eos1hWa6tisdPwwDC1a5J1y9nma
xprv ? ? ?: xprv9s21ZrQH143K3QTDL4LXw2F7HEK3wJUD2nW2nRk4stbPy6cq3jPPqjiChkVvvNKmPGJxWUtg6LnF5kejMRNNU3TGtRBeJgk33yuGBxrMPHi
xpub ? ? ?: xpub661MyMwAqRbcFtXgS5sYJABqqG9YLmC4Q1Rdap9gSE8NqtwybGhePY2gZ29ESFjqJoCu1Rupje8YtGqsefD265TMg7usUDFdp6W1EGMcet8

Test 2:

Seed ? ? ?: 7f0ad7d595be13e6fe4cf1fa0fbb6ae9c26c5d9b09920709414982b6363d5844
Clear ? ? : WSB7z3izBZwDoaAUA4mDpEHzAZsA5zfTWu3cCxhkaLtZ4Ur6n6mXsgpMK
Password ?: Nakamoto
Encrypted : wsFp1uM2gFhd2PuRzmNFReRud71hgmVwPoc7cGpxuvgETRsv8J1wHNANJ
Address ? : 1A54ECavJaJAoLGqqNrPd9Y3cvSvkL2Roz
xprv ? ? ?: xprv9s21ZrQH143K3f9hMVvcbY4EX4CfxsEtc6C5BMkZtgGpTGpxAscoq7SLSAcL6k5dxaZ9s4SChrtfSFoKpijuwAnhuPn76eva6W8bDr118t3
xpub ? ? ?: xpub661MyMwAqRbcG9EATXTcxfzy563ANKxjyK7fykABT1ooL5A6iQw4NukpHShDxYgeso4NHscFmqcVEtdUt61c8RCf7FqXK9z6sgfkQvYBQPP

Test 3:

Seed ? ? ?: fffcf9f6f3f0edeae7e4e1dedbd8d5d2cfccc9c6c3c0bdbab7b4b1aeaba8a5a29f9c999693908d8a8784817e7b7875726f6c696663605d5a5754514e4b484542
Clear ? ? : WS6186bsAkSaGRjRZ1UGyCGigxsXPvnYGSqNHJYmauV9X4W8tLJke1DH8UP8YMsDLdsjwgodcghjjKqkWQmk3t7qDbNMJVBDKcD2s
Password ?: Vires In Numeris
Encrypted : ws7vDy7RjqMvcPX7GeakKvdK6vDKGhRSjQtaRfKUVQrJXwwetLSeTdNgGzn5BKZZqz1BBdaHBFYfLvNUSxDaoP1ojJMMJD9UnQuwt
Address ? : 1JEoxevbLLG8cVqeoGKQiAwoWbNYSUyYjg
xprv ? ? ?: xprv9s21ZrQH143K31xYSDQpPDxsXRTUcvj2iNHm5NUtrGiGG5e2DtALGdso3pGz6ssrdK4PFmM8NSpSBHNqPqm55Qn3LqFtT2emdEXVYsCzC2U
xpub ? ? ?: xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB

Test 4:

Seed ? ? ?: 6ca4a27ac660c683340f59353b1375a9
Clear ? ? : WSXnfK5CJbDoSwcqMfz7Xqy3avuPHSxDQQk
Password ?: ???
Encrypted : wsFWKz3c5eeHRwtJveSdFvwUrmoNVkJ5ns2
Address ? : 1JVncPbsdB2s4zHim3VdAWNkZ8JANBZ1U9
xprv ? ? ?: xprv9s21ZrQH143K3mJ4upPSDfXdA34yNjem6PSsXT63vm8dq8ikUJv4iiTD3PrSKtdGZXFVD689z5T7knXo55BjcHS2WL3Syp2DbGgnbgxw2QA
xpub ? ? ?: xpub661MyMwAqRbcGFNY1qvSaoUMi4uTnCNcTcNUKqVfV6fchw3u1rEKGWmgtfUMRKLgUHNZ7dfsh8Ys6SLwUojZqScFBQL3dFGF3QywNLJVZ2o


Acknowledgements

Mike Caldwell for BIP 0038, which this proposal borrows heavily from.


See Also

BIP 0032 Hierarchical Deterministic Wallets: https://en.bitcoin.it/wiki/BIP_0032
BIP 0038 Passphrase-protected private key: https://en.bitcoin.it/wiki/BIP_0038




-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130719/22cd4c64/attachment.html>

From mike at plan99.net  Tue Jul 16 10:59:56 2013
From: mike at plan99.net (Mike Hearn)
Date: Tue, 16 Jul 2013 12:59:56 +0200
Subject: [Bitcoin-development] Introducing BitcoinKit.framework
In-Reply-To: <2A1C412D-414E-4C41-8E20-F0D21F801328@grabhive.com>
References: <B87F1213-5BD8-43F5-9744-F69947561ED5@grabhive.com>
	<CANEZrP2xh=m8yWLt-o2UrrUVfU+cUYBuMVxkVFF5mVMtWdRwOQ@mail.gmail.com>
	<C1727B41-AF61-44FA-BE17-5FE4425FDEA8@grabhive.com>
	<CANEZrP0_H9+prDSF92q8a4QzP=fzDM6cTDv0+KcfV9NF9thkmw@mail.gmail.com>
	<3E7894A0-06F3-453D-87F8-975A244EBACF@include7.ch>
	<CANEZrP2jmWkDbpJEm0vd2CKF-prFNbz_ZeNJfDWtSCKb8k5ZXA@mail.gmail.com>
	<2BDA0943-22BB-4405-9AF0-86FB41FD04A6@include7.ch>
	<CANEZrP0McSrVzwv=-qimPyX41EEDmyQdYW5QjPr_i+KWyJZSZw@mail.gmail.com>
	<2F20A509-13A9-4C84-86D7-A15C21BACD53@include7.ch>
	<CANEZrP2yQvmvwP_ZULdS2i+X6L9MeZ+DfidiuZPD2EHwLsN2MA@mail.gmail.com>
	<2A1C412D-414E-4C41-8E20-F0D21F801328@grabhive.com>
Message-ID: <CANEZrP12V_5Ak0f91RsMziuqXysde102rGeSko=qPBjefy3AeA@mail.gmail.com>

I think that's a great approach. Here is the patch Satoshi sent me back in
2010. All the code has changed since but it can be a source of inspiration.

>From Satoshi:

*The simplified payment verification in the paper imagined you would
receive transactions directly, as with sending to IP address which nobody
uses, or a node would index all transactions by public key and you could
download them like downloading mail from a mail server.

Instead, I think client-only nodes should receive full blocks so they can
scan them for their own transactions.  They don't need to store them or
index them.  For the initial download, they only need to download headers,
since there couldn't be any payments before the first time the program was
run (a header download command was added in 0.3.18).  From then on, they
download full blocks (but only store the headers).

Code for client-only mode is mostly implemented.  There's a feature branch
on github with it, also I'm attaching the patch to this message.

Here's some more about it:

"Here's my client-mode implementation so far.  Client-only mode only
records block headers and doesn't use the tx index.  It can't generate, but
it can still send and receive transactions.  It's not fully finished for
use by end-users, but it doesn't matter because it's a complete no-op if
fClient is not enabled.  At this point it's mainly documentation showing
the cut-lines for client-only re-implementers.

With fClient=true, I've only tested the header-only initial download.

A little background.  CBlockIndex contains all the information of the block
header, so to operate with headers only, I just maintain the CBlockIndex
structure as usual.  The nFile/nBlockPos are null, since the full block is
not recorded on disk.

The code to gracefully switch between client-mode on/off without deleting
blk*.dat in between is not implemented yet.  It would mostly be a matter of
having non-client LoadBlockIndex ignore block index entries with null block
pos.  That would make it re-download those as full blocks.  Switching back
to client-mode is no problem, it doesn't mind if the full blocks are there.

If the initial block download becomes too long, we'll want client mode as
an option so new users can get running quickly.  With graceful switch-off
of client mode, they can later turn off client mode and have it download
the full blocks if they want to start generating.  They should rather just
use a getwork miner to join a pool instead.

Client-only re-implementations would not need to implement EvalScript at
all, or at most just implement the five ops used by the standard
transaction templates."
*




diff -u old\db.cpp new\db.cpp
--- old\db.cpp  Sat Dec 18 18:35:59 2010
+++ new\db.cpp  Sun Dec 19 20:53:59 2010
@@ -464,29 +464,32 @@
     ReadBestInvalidWork(bnBestInvalidWork);

     // Verify blocks in the best chain
-    CBlockIndex* pindexFork = NULL;
-    for (CBlockIndex* pindex = pindexBest; pindex && pindex->pprev; pindex
= pindex->pprev)
+    if (!fClient)
     {
-        if (pindex->nHeight < nBestHeight-2500 &&
!mapArgs.count("-checkblocks"))
-            break;
-        CBlock block;
-        if (!block.ReadFromDisk(pindex))
-            return error("LoadBlockIndex() : block.ReadFromDisk failed");
-        if (!block.CheckBlock())
+        CBlockIndex* pindexFork = NULL;
+        for (CBlockIndex* pindex = pindexBest; pindex && pindex->pprev;
pindex = pindex->pprev)
         {
-            printf("LoadBlockIndex() : *** found bad block at %d,
hash=%s\n", pindex->nHeight, pindex->GetBlockHash().ToString().c_str());
-            pindexFork = pindex->pprev;
+            if (pindex->nHeight < nBestHeight-2500 &&
!mapArgs.count("-checkblocks"))
+                break;
+            CBlock block;
+            if (!block.ReadFromDisk(pindex))
+                return error("LoadBlockIndex() : block.ReadFromDisk
failed");
+            if (!block.CheckBlock())
+            {
+                printf("LoadBlockIndex() : *** found bad block at %d,
hash=%s\n", pindex->nHeight, pindex->GetBlockHash().ToString().c_str());
+                pindexFork = pindex->pprev;
+            }
+        }
+        if (pindexFork)
+        {
+            // Reorg back to the fork
+            printf("LoadBlockIndex() : *** moving best chain pointer back
to block %d\n", pindexFork->nHeight);
+            CBlock block;
+            if (!block.ReadFromDisk(pindexFork))
+                return error("LoadBlockIndex() : block.ReadFromDisk
failed");
+            CTxDB txdb;
+            block.SetBestChain(txdb, pindexFork);
         }
-    }
-    if (pindexFork)
-    {
-        // Reorg back to the fork
-        printf("LoadBlockIndex() : *** moving best chain pointer back to
block %d\n", pindexFork->nHeight);
-        CBlock block;
-        if (!block.ReadFromDisk(pindexFork))
-            return error("LoadBlockIndex() : block.ReadFromDisk failed");
-        CTxDB txdb;
-        block.SetBestChain(txdb, pindexFork);
     }

     return true;
diff -u old\main.cpp new\main.cpp
--- old\main.cpp        Sat Dec 18 18:35:59 2010
+++ new\main.cpp        Sun Dec 19 20:53:59 2010
@@ -637,6 +637,9 @@
     if (!IsStandard())
         return error("AcceptToMemoryPool() : nonstandard transaction
type");

+    if (fClient)
+        return true;
+
     // Do we already have it?
     uint256 hash = GetHash();
     CRITICAL_BLOCK(cs_mapTransactions)
@@ -1308,23 +1311,26 @@
     if (!CheckBlock())
         return false;

-    //// issue here: it doesn't know the version
-    unsigned int nTxPos = pindex->nBlockPos + ::GetSerializeSize(CBlock(),
SER_DISK) - 1 + GetSizeOfCompactSize(vtx.size());
-
-    map<uint256, CTxIndex> mapUnused;
-    int64 nFees = 0;
-    foreach(CTransaction& tx, vtx)
+    if (!fClient)
     {
-        CDiskTxPos posThisTx(pindex->nFile, pindex->nBlockPos, nTxPos);
-        nTxPos += ::GetSerializeSize(tx, SER_DISK);
+        //// issue here: it doesn't know the version
+        unsigned int nTxPos = pindex->nBlockPos +
::GetSerializeSize(CBlock(), SER_DISK) - 1 + GetSizeOfCompactSize(vtx.size(
));
+
+        map<uint256, CTxIndex> mapUnused;
+        int64 nFees = 0;
+        foreach(CTransaction& tx, vtx)
+        {
+            CDiskTxPos posThisTx(pindex->nFile, pindex->nBlockPos, nTxPos);
+            nTxPos += ::GetSerializeSize(tx, SER_DISK);

-        if (!tx.ConnectInputs(txdb, mapUnused, posThisTx, pindex, nFees,
true, false))
+            if (!tx.ConnectInputs(txdb, mapUnused, posThisTx, pindex,
nFees, true, false))
+                return false;
+        }
+
+        if (vtx[0].GetValueOut() > GetBlockValue(pindex->nHeight, nFees))
             return false;
     }

-    if (vtx[0].GetValueOut() > GetBlockValue(pindex->nHeight, nFees))
-        return false;
-
     // Update block index on disk without changing it in memory.
     // The memory index structure will be changed after the db commits.
     if (pindex->pprev)
@@ -1378,7 +1384,7 @@
     foreach(CBlockIndex* pindex, vDisconnect)
     {
         CBlock block;
-        if (!block.ReadFromDisk(pindex))
+        if (!block.ReadFromDisk(pindex, !fClient))
             return error("Reorganize() : ReadFromDisk for disconnect
failed");
         if (!block.DisconnectBlock(txdb, pindex))
             return error("Reorganize() : DisconnectBlock failed");
@@ -1395,7 +1401,7 @@
     {
         CBlockIndex* pindex = vConnect[i];
         CBlock block;
-        if (!block.ReadFromDisk(pindex))
+        if (!block.ReadFromDisk(pindex, !fClient))
             return error("Reorganize() : ReadFromDisk for connect failed");
         if (!block.ConnectBlock(txdb, pindex))
         {
@@ -1526,7 +1532,7 @@

     txdb.Close();

-    if (pindexNew == pindexBest)
+    if (!fClient && pindexNew == pindexBest)
     {
         // Notify UI to display prev block's coinbase if it was ours
         static uint256 hashPrevBestCoinBase;
@@ -1547,10 +1553,6 @@
     // These are checks that are independent of context
     // that can be verified before saving an orphan block.

-    // Size limits
-    if (vtx.empty() || vtx.size() > MAX_BLOCK_SIZE ||
::GetSerializeSize(*this, SER_NETWORK) > MAX_BLOCK_SIZE)
-        return error("CheckBlock() : size limits failed");
-
     // Check proof of work matches claimed amount
     if (!CheckProofOfWork(GetHash(), nBits))
         return error("CheckBlock() : proof of work failed");
@@ -1559,6 +1561,13 @@
     if (GetBlockTime() > GetAdjustedTime() + 2 * 60 * 60)
         return error("CheckBlock() : block timestamp too far in the
future");

+    if (fClient && vtx.empty())
+        return true;
+
+    // Size limits
+    if (vtx.empty() || vtx.size() > MAX_BLOCK_SIZE ||
::GetSerializeSize(*this, SER_NETWORK) > MAX_BLOCK_SIZE)
+        return error("CheckBlock() : size limits failed");
+
     // First transaction must be coinbase, the rest must not be
     if (vtx.empty() || !vtx[0].IsCoinBase())
         return error("CheckBlock() : first tx is not coinbase");
@@ -1623,13 +1632,14 @@
         return error("AcceptBlock() : out of disk space");
     unsigned int nFile = -1;
     unsigned int nBlockPos = 0;
-    if (!WriteToDisk(nFile, nBlockPos))
-        return error("AcceptBlock() : WriteToDisk failed");
+    if (!fClient)
+        if (!WriteToDisk(nFile, nBlockPos))
+            return error("AcceptBlock() : WriteToDisk failed");
     if (!AddToBlockIndex(nFile, nBlockPos))
         return error("AcceptBlock() : AddToBlockIndex failed");

     // Relay inventory, but don't relay old inventory during initial block
download
-    if (hashBestChain == hash)
+    if (!fClient && hashBestChain == hash)
         CRITICAL_BLOCK(cs_vNodes)
             foreach(CNode* pnode, vNodes)
                 if (nBestHeight > (pnode->nStartingHeight != -1 ?
pnode->nStartingHeight - 2000 : 55000))
@@ -2405,6 +2415,8 @@
         {
             if (fShutdown)
                 return true;
+            if (fClient && inv.type == MSG_TX)
+                continue;
             pfrom->AddInventoryKnown(inv);

             bool fAlreadyHave = AlreadyHave(txdb, inv);
@@ -2441,6 +2453,9 @@

             if (inv.type == MSG_BLOCK)
             {
+                if (fClient)
+                    return true;
+
                 // Send block from disk
                 map<uint256, CBlockIndex*>::iterator mi =
mapBlockIndex.find(inv.hash);
                 if (mi != mapBlockIndex.end())
@@ -2486,6 +2501,8 @@

     else if (strCommand == "getblocks")
     {
+        if (fClient)
+            return true;
         CBlockLocator locator;
         uint256 hashStop;
         vRecv >> locator >> hashStop;
@@ -2556,6 +2573,8 @@

     else if (strCommand == "tx")
     {
+        if (fClient)
+            return true;
         vector<uint256> vWorkQueue;
         CDataStream vMsg(vRecv);
         CTransaction tx;
@@ -2620,6 +2639,33 @@

         if (ProcessBlock(pfrom, &block))
             mapAlreadyAskedFor.erase(inv);
+    }
+
+
+    else if (strCommand == "headers")
+    {
+        if (!fClient)
+            return true;
+        vector<CBlock> vHeaders;
+        vRecv >> vHeaders;
+
+        uint256 hashBestBefore = hashBestChain;
+        foreach(CBlock& block, vHeaders)
+        {
+            block.vtx.clear();
+
+            printf("received header %s\n", block.GetHash().ToString().
substr(0,20).c_str());
+
+            CInv inv(MSG_BLOCK, block.GetHash());
+            pfrom->AddInventoryKnown(inv);
+
+            if (ProcessBlock(pfrom, &block))
+                mapAlreadyAskedFor.erase(inv);
+        }
+
+        // Request next batch
+        if (hashBestChain != hashBestBefore)
+            pfrom->PushGetBlocks(pindexBest, uint256(0));
     }


On Tue, Jul 16, 2013 at 12:17 PM, Wendell <w at grabhive.com> wrote:

> I for one would be interested in taking a look at that.
>
> In San Jose I was asking around about the possibility of hiring someone to
> complete such a patch. Pieter Wuille introduced me to Eric Lombrozo, who
> expressed interest, but has since gotten quite busy. So we haven't arrived
> at a detailed estimate of what it would involve.
>
> Maybe it would be better to start a completely new thread for this topic,
> but I would very much be interested in an open dissection of what adding
> SPV support to bitcoind would take. I am willing to fund or (ideally)
> co-fund this endeavor, if I can ever get my head around it. I'm super
> interested in all of these possibilities (including micro-stripped-VMs and
> transpilation), but would simply like to encourage the proliferation of
> _options_ whenever possible.
>
> -wendell
>
> grabhive.com | twitter.com/grabhive
>
> On Jul 16, 2013, at 11:51 AM, Mike Hearn wrote:
>
> > If you wanted to implement SPV mode in bitcoind, Gavin or I could send
> you Satoshi's old patch although of course it is no longer usable. It would
> indicate the basic cut lines though.
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130716/cb9235b2/attachment.html>

From pieter.wuille at gmail.com  Sun Jul 21 15:55:14 2013
From: pieter.wuille at gmail.com (Pieter Wuille)
Date: Sun, 21 Jul 2013 17:55:14 +0200
Subject: [Bitcoin-development] Introducing BitcoinKit.framework
In-Reply-To: <CANEZrP12V_5Ak0f91RsMziuqXysde102rGeSko=qPBjefy3AeA@mail.gmail.com>
References: <C1727B41-AF61-44FA-BE17-5FE4425FDEA8@grabhive.com>
	<CANEZrP0_H9+prDSF92q8a4QzP=fzDM6cTDv0+KcfV9NF9thkmw@mail.gmail.com>
	<3E7894A0-06F3-453D-87F8-975A244EBACF@include7.ch>
	<CANEZrP2jmWkDbpJEm0vd2CKF-prFNbz_ZeNJfDWtSCKb8k5ZXA@mail.gmail.com>
	<2BDA0943-22BB-4405-9AF0-86FB41FD04A6@include7.ch>
	<CANEZrP0McSrVzwv=-qimPyX41EEDmyQdYW5QjPr_i+KWyJZSZw@mail.gmail.com>
	<2F20A509-13A9-4C84-86D7-A15C21BACD53@include7.ch>
	<CANEZrP2yQvmvwP_ZULdS2i+X6L9MeZ+DfidiuZPD2EHwLsN2MA@mail.gmail.com>
	<2A1C412D-414E-4C41-8E20-F0D21F801328@grabhive.com>
	<CANEZrP12V_5Ak0f91RsMziuqXysde102rGeSko=qPBjefy3AeA@mail.gmail.com>
Message-ID: <20130721155513.GA3107@vps7135.xlshosting.net>

On Tue, Jul 16, 2013 at 12:59:56PM +0200, Mike Hearn wrote:
> I think that's a great approach. Here is the patch Satoshi sent me back in
> 2010. All the code has changed since but it can be a source of inspiration.
> 
> >From Satoshi:
> 
> *The simplified payment verification in the paper imagined you would
> receive transactions directly, as with sending to IP address which nobody
> uses, or a node would index all transactions by public key and you could
> download them like downloading mail from a mail server.

I'm currently working on headers-first sync, which I believe is generally
very useful (it fixes tons of edge-cases block synchronization currently
experiences), but it's also a first step towards SPV mode.

So headers-first sync means you first synchronize just the headers, and then,
when you already know (or have strong evidence for a guess on) the best chain,
start requesting blocks along that best chain - potentially in parallel from
different peers.

SPV mode is basically headers-first sync, but never do the full block sync
step, and replace it with a bloom/birthday/...-based fetching of blocks
interesting to the associated wallets. In SPV you'll also need to disable
the mempool though, and there will be more small changes, but I think
the separate headers-sync phase will be most of the work.

-- 
Pieter




From mike at plan99.net  Sun Jul 21 17:20:18 2013
From: mike at plan99.net (Mike Hearn)
Date: Sun, 21 Jul 2013 19:20:18 +0200
Subject: [Bitcoin-development] Introducing BitcoinKit.framework
In-Reply-To: <20130721155513.GA3107@vps7135.xlshosting.net>
References: <C1727B41-AF61-44FA-BE17-5FE4425FDEA8@grabhive.com>
	<CANEZrP0_H9+prDSF92q8a4QzP=fzDM6cTDv0+KcfV9NF9thkmw@mail.gmail.com>
	<3E7894A0-06F3-453D-87F8-975A244EBACF@include7.ch>
	<CANEZrP2jmWkDbpJEm0vd2CKF-prFNbz_ZeNJfDWtSCKb8k5ZXA@mail.gmail.com>
	<2BDA0943-22BB-4405-9AF0-86FB41FD04A6@include7.ch>
	<CANEZrP0McSrVzwv=-qimPyX41EEDmyQdYW5QjPr_i+KWyJZSZw@mail.gmail.com>
	<2F20A509-13A9-4C84-86D7-A15C21BACD53@include7.ch>
	<CANEZrP2yQvmvwP_ZULdS2i+X6L9MeZ+DfidiuZPD2EHwLsN2MA@mail.gmail.com>
	<2A1C412D-414E-4C41-8E20-F0D21F801328@grabhive.com>
	<CANEZrP12V_5Ak0f91RsMziuqXysde102rGeSko=qPBjefy3AeA@mail.gmail.com>
	<20130721155513.GA3107@vps7135.xlshosting.net>
Message-ID: <CANEZrP03Dh8kvAg+VJEC-4_8ibgix-bTQ1JqvZMxUvUpcr-6aw@mail.gmail.com>

Actually bitcoinj typically doesn't download all the headers (just from the
last checkpoint) and it throws away headers that are very old. By now
there's quite a lot of difference in how they manage things and I guess it
will diverge from bitcoind even more in future. For instance we're going to
start only storing relevant outputs in the wallet and doing other things to
try and save memory. Some people managed to get themselves wallets that
don't actually fit in ram :(
On 21 Jul 2013 17:55, "Pieter Wuille" <pieter.wuille at gmail.com> wrote:

> On Tue, Jul 16, 2013 at 12:59:56PM +0200, Mike Hearn wrote:
> > I think that's a great approach. Here is the patch Satoshi sent me back
> in
> > 2010. All the code has changed since but it can be a source of
> inspiration.
> >
> > >From Satoshi:
> >
> > *The simplified payment verification in the paper imagined you would
> > receive transactions directly, as with sending to IP address which nobody
> > uses, or a node would index all transactions by public key and you could
> > download them like downloading mail from a mail server.
>
> I'm currently working on headers-first sync, which I believe is generally
> very useful (it fixes tons of edge-cases block synchronization currently
> experiences), but it's also a first step towards SPV mode.
>
> So headers-first sync means you first synchronize just the headers, and
> then,
> when you already know (or have strong evidence for a guess on) the best
> chain,
> start requesting blocks along that best chain - potentially in parallel
> from
> different peers.
>
> SPV mode is basically headers-first sync, but never do the full block sync
> step, and replace it with a bloom/birthday/...-based fetching of blocks
> interesting to the associated wallets. In SPV you'll also need to disable
> the mempool though, and there will be more small changes, but I think
> the separate headers-sync phase will be most of the work.
>
> --
> Pieter
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130721/8389635e/attachment.html>

From mike at plan99.net  Mon Jul 22 13:08:58 2013
From: mike at plan99.net (Mike Hearn)
Date: Mon, 22 Jul 2013 15:08:58 +0200
Subject: [Bitcoin-development] Introducing BitcoinKit.framework
In-Reply-To: <CANEZrP0McSrVzwv=-qimPyX41EEDmyQdYW5QjPr_i+KWyJZSZw@mail.gmail.com>
References: <B87F1213-5BD8-43F5-9744-F69947561ED5@grabhive.com>
	<CANEZrP2xh=m8yWLt-o2UrrUVfU+cUYBuMVxkVFF5mVMtWdRwOQ@mail.gmail.com>
	<C1727B41-AF61-44FA-BE17-5FE4425FDEA8@grabhive.com>
	<CANEZrP0_H9+prDSF92q8a4QzP=fzDM6cTDv0+KcfV9NF9thkmw@mail.gmail.com>
	<3E7894A0-06F3-453D-87F8-975A244EBACF@include7.ch>
	<CANEZrP2jmWkDbpJEm0vd2CKF-prFNbz_ZeNJfDWtSCKb8k5ZXA@mail.gmail.com>
	<2BDA0943-22BB-4405-9AF0-86FB41FD04A6@include7.ch>
	<CANEZrP0McSrVzwv=-qimPyX41EEDmyQdYW5QjPr_i+KWyJZSZw@mail.gmail.com>
Message-ID: <CANEZrP37bBg0_UaNDKRY9ir1Jr9Jk8mKkbNL_JjTkhM9j-z7xQ@mail.gmail.com>

As an FYI, I've sent Wendell and co some example code for how to use CPPJVM
to use bitcoinj from native code. A rather rough Hello World app looks like
this:

https://github.com/mikehearn/cppjvm/blob/master/mytest/bcj-hello-world.cpp

So, fairly C++ like.

Further discussion of this should take place on the bitcoinj mailing list.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130722/3734f5cb/attachment.html>

From mike at plan99.net  Mon Jul 22 13:14:42 2013
From: mike at plan99.net (Mike Hearn)
Date: Mon, 22 Jul 2013 15:14:42 +0200
Subject: [Bitcoin-development] [RFC] Proposal: Base58 encoded HD Wallet
 master seed with optional encryption
In-Reply-To: <acc0f014-7ae3-4e45-87ad-2b0e5358dca9@me.com>
References: <op.w0hd2nthyldrnw@laptop-air>
	<acc0f014-7ae3-4e45-87ad-2b0e5358dca9@me.com>
Message-ID: <CANEZrP37a=EH+1P47opH0E-1TG9ozgw_1NzecJpRRJsMaZRLOw@mail.gmail.com>

This isn't usable for SPV wallets unless it has a birthday in it. Otherwise
you either need to scan the entire chain (slow) or find a fully indexed
copy of the block chain (expensive, more centralised). Just add a UNIX time
as an extra 4 bytes, or if you want to save a few characters then use a
uint16 that represents "days since birth of this specification".
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130722/68673889/attachment.html>

From jeanpaulkogelman at me.com  Mon Jul 22 14:33:34 2013
From: jeanpaulkogelman at me.com (Jean-Paul Kogelman)
Date: Mon, 22 Jul 2013 07:33:34 -0700
Subject: [Bitcoin-development] [RFC] Proposal: Base58 encoded HD Wallet
 master seed with optional encryption
In-Reply-To: <CANEZrP37a=EH+1P47opH0E-1TG9ozgw_1NzecJpRRJsMaZRLOw@mail.gmail.com>
References: <op.w0hd2nthyldrnw@laptop-air>
	<acc0f014-7ae3-4e45-87ad-2b0e5358dca9@me.com>
	<CANEZrP37a=EH+1P47opH0E-1TG9ozgw_1NzecJpRRJsMaZRLOw@mail.gmail.com>
Message-ID: <058CED37-646C-4978-8026-8EF3868F17A7@me.com>

Hi Mike,

I had a similar request on the forums. I suggested adding either a 2 byte 'weeks since genesis' or 'months since genesis', but starting from spec birth works too. Would either of those work for you?


jp

On Jul 22, 2013, at 6:14 AM, Mike Hearn <mike at plan99.net> wrote:

> This isn't usable for SPV wallets unless it has a birthday in it. Otherwise you either need to scan the entire chain (slow) or find a fully indexed copy of the block chain (expensive, more centralised). Just add a UNIX time as an extra 4 bytes, or if you want to save a few characters then use a uint16 that represents "days since birth of this specification".



From pieter.wuille at gmail.com  Mon Jul 22 14:44:59 2013
From: pieter.wuille at gmail.com (Pieter Wuille)
Date: Mon, 22 Jul 2013 16:44:59 +0200
Subject: [Bitcoin-development] [RFC] Standard for private keys with birth
	timestamp
Message-ID: <20130722144458.GA22993@vps7135.xlshosting.net>

Hello,

I should have brought up this suggestion before, as there seems to be relevant other work.

I'd like to propose encoding keys data (whatever type) with a birth timestamp as:
 * <serialized key>@<unix timestamp in decimal>

The reason for not incorporating this inside the key serialization (for example BIP32), is because
birth timestamps are more generally a property of an address, rather than the key it is derived from.
For one, it is useful for non-extended standard serialized private keys, but for P2SH addresses,
the "private key" is really the actual scriptPubKey, but birth data is equally useful for this.

Reason for choosing the '@' character: it's not present in the base58, hex, or base64 encodings that
are typically used for key/script data.

One downside is that this means no checksum-protection for the timestamp, but the advantage is
increased genericity. It's also longer than using a binary encoding, but this is an optional
part anyway, and I think "human typing" is already fairly hard anyway.

-- 
Pieter




From melvincarvalho at gmail.com  Mon Jul 22 15:12:50 2013
From: melvincarvalho at gmail.com (Melvin Carvalho)
Date: Mon, 22 Jul 2013 17:12:50 +0200
Subject: [Bitcoin-development] [RFC] Standard for private keys with
	birth timestamp
In-Reply-To: <20130722144458.GA22993@vps7135.xlshosting.net>
References: <20130722144458.GA22993@vps7135.xlshosting.net>
Message-ID: <CAKaEYhKxLup6yJEYeC+VL6KMzGZ3DhQzJ0Rs9RJc3CU-UhNKag@mail.gmail.com>

On 22 July 2013 16:44, Pieter Wuille <pieter.wuille at gmail.com> wrote:

> Hello,
>
> I should have brought up this suggestion before, as there seems to be
> relevant other work.
>
> I'd like to propose encoding keys data (whatever type) with a birth
> timestamp as:
>  * <serialized key>@<unix timestamp in decimal>
>
> The reason for not incorporating this inside the key serialization (for
> example BIP32), is because
> birth timestamps are more generally a property of an address, rather than
> the key it is derived from.
> For one, it is useful for non-extended standard serialized private keys,
> but for P2SH addresses,
> the "private key" is really the actual scriptPubKey, but birth data is
> equally useful for this.
>
> Reason for choosing the '@' character: it's not present in the base58,
> hex, or base64 encodings that
> are typically used for key/script data.
>
> One downside is that this means no checksum-protection for the timestamp,
> but the advantage is
> increased genericity. It's also longer than using a binary encoding, but
> this is an optional
> part anyway, and I think "human typing" is already fairly hard anyway.
>

Is there a BIP for this?

@ is normally used in conjunction with things other than a time stamp ...

You may want to look at RFC 4151

http://www.ietf.org/rfc/rfc4151.txt

They had an idea on adding time stamps to identifiers.

First impression is that the sacrifice in opacity does not seem to justify
the utility.


>
> --
> Pieter
>
>
>
> ------------------------------------------------------------------------------
> See everything from the browser to the database with AppDynamics
> Get end-to-end visibility with application monitoring from AppDynamics
> Isolate bottlenecks and diagnose root cause in seconds.
> Start your free trial of AppDynamics Pro today!
> http://pubads.g.doubleclick.net/gampad/clk?id=48808831&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130722/1a9c17e0/attachment.html>

From jgarzik at bitpay.com  Mon Jul 22 19:42:45 2013
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Mon, 22 Jul 2013 15:42:45 -0400
Subject: [Bitcoin-development] HTTP REST API for bitcoind
Message-ID: <CAJHLa0Ou1xF=LeLVu_wH1-XgJ1PavDV7_NHoDevo3R9+4z-ZfQ@mail.gmail.com>

URL: https://github.com/bitcoin/bitcoin/pull/2844

Adding an HTTP REST API for bitcoind has been occasionally tossed
about as a useful thing.  Such an API would essentially provide a
decentralized block explorer capability, enabling easy external access
to transaction/address/block indices that we maintain.

The first two implemented API calls are simple, returning a block or
TX given a simple query string based on block hash, e.g.

     GET /rest/tx/TX-HASH
or
     GET /rest/block/BLOCK-HASH

This can be easily accessed via command line cURL/wget utilities.
Output formats -- binary, hex or json -- may be selected via a
"bitcoin-format" header.

The general goal of the HTTP REST interface is to access
unauthenticated, public blockchain information.  There is no plan to
add wallet interfacing/manipulation via this API.

-- 
Jeff Garzik
Senior Software Engineer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From jeanpaulkogelman at me.com  Mon Jul 22 21:37:12 2013
From: jeanpaulkogelman at me.com (Jean-Paul Kogelman)
Date: Mon, 22 Jul 2013 21:37:12 +0000 (GMT)
Subject: [Bitcoin-development] [RFC] Proposal: Base58 encoded HD Wallet
 master seed with optional encryption
In-Reply-To: <CANEZrP37a=EH+1P47opH0E-1TG9ozgw_1NzecJpRRJsMaZRLOw@mail.gmail.com>
Message-ID: <81f77484-3ca9-40a7-a999-884260b26be5@me.com>


I added a 2 byte 'weeks since 2013-01-01' field and updated the prefixes, ranges and test vectors.

The updated proposal lives here:
https://bitcointalk.org/index.php?topic=258678

Cheers,

jp

On Jul 22, 2013, at 06:14 AM, Mike Hearn <mike at plan99.net> wrote:

This isn't usable for SPV wallets unless it has a birthday in it. Otherwise you either need to scan the entire chain (slow) or find a fully indexed copy of the block chain (expensive, more centralised). Just add a UNIX time as an extra 4 bytes, or if you want to save a few characters then use a uint16 that represents "days since birth of this specification".
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130722/c200153c/attachment.html>

From michael at ndrix.org  Mon Jul 22 22:06:15 2013
From: michael at ndrix.org (Michael Hendricks)
Date: Mon, 22 Jul 2013 16:06:15 -0600
Subject: [Bitcoin-development] HTTP REST API for bitcoind
In-Reply-To: <CAJHLa0Ou1xF=LeLVu_wH1-XgJ1PavDV7_NHoDevo3R9+4z-ZfQ@mail.gmail.com>
References: <CAJHLa0Ou1xF=LeLVu_wH1-XgJ1PavDV7_NHoDevo3R9+4z-ZfQ@mail.gmail.com>
Message-ID: <CAFHuXubk9qZ6ZKjO+xu0+0vHicGSPbPN2Ow=VphGj5b_yXNqjw@mail.gmail.com>

+1 and thank you. I've prototyped a couple different Bitcoin projects that
would benefit from this.

I'm traveling with poor 'net so I haven't read the patches yet. I echo pull
request comments about using Accept and Accept-Encoding headers. Same for
an API version number in the URL.

It'd be helpful, eventually, to have APIs corresponding to Bitcoin addr and
version messages.  Metadata about the network and the peer, respectively,
are valuable in my use cases.

Michael
On Jul 22, 2013 1:43 PM, "Jeff Garzik" <jgarzik at bitpay.com> wrote:

> URL: https://github.com/bitcoin/bitcoin/pull/2844
>
> Adding an HTTP REST API for bitcoind has been occasionally tossed
> about as a useful thing.  Such an API would essentially provide a
> decentralized block explorer capability, enabling easy external access
> to transaction/address/block indices that we maintain.
>
> The first two implemented API calls are simple, returning a block or
> TX given a simple query string based on block hash, e.g.
>
>      GET /rest/tx/TX-HASH
> or
>      GET /rest/block/BLOCK-HASH
>
> This can be easily accessed via command line cURL/wget utilities.
> Output formats -- binary, hex or json -- may be selected via a
> "bitcoin-format" header.
>
> The general goal of the HTTP REST interface is to access
> unauthenticated, public blockchain information.  There is no plan to
> add wallet interfacing/manipulation via this API.
>
> --
> Jeff Garzik
> Senior Software Engineer and open source evangelist
> BitPay, Inc.      https://bitpay.com/
>
>
> ------------------------------------------------------------------------------
> See everything from the browser to the database with AppDynamics
> Get end-to-end visibility with application monitoring from AppDynamics
> Isolate bottlenecks and diagnose root cause in seconds.
> Start your free trial of AppDynamics Pro today!
> http://pubads.g.doubleclick.net/gampad/clk?id=48808831&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130722/2c0063e6/attachment.html>

From andreas at schildbach.de  Tue Jul 23 08:27:19 2013
From: andreas at schildbach.de (Andreas Schildbach)
Date: Tue, 23 Jul 2013 10:27:19 +0200
Subject: [Bitcoin-development] HTTP REST API for bitcoind
In-Reply-To: <CAJHLa0Ou1xF=LeLVu_wH1-XgJ1PavDV7_NHoDevo3R9+4z-ZfQ@mail.gmail.com>
References: <CAJHLa0Ou1xF=LeLVu_wH1-XgJ1PavDV7_NHoDevo3R9+4z-ZfQ@mail.gmail.com>
Message-ID: <kslep0$hq7$1@ger.gmane.org>

On 07/22/2013 09:42 PM, Jeff Garzik wrote:

> The general goal of the HTTP REST interface is to access
> unauthenticated, public blockchain information.  There is no plan to
> add wallet interfacing/manipulation via this API.

Is it planned to expose the UXTO set of a given address? That would be
useful for SPV wallets to be able to swipe a previously unknown private
key (e.g. paper wallet).





From gronager at mac.com  Tue Jul 23 08:45:51 2013
From: gronager at mac.com (Michael Gronager)
Date: Tue, 23 Jul 2013 10:45:51 +0200
Subject: [Bitcoin-development] HTTP REST API for bitcoind
In-Reply-To: <kslep0$hq7$1@ger.gmane.org>
References: <CAJHLa0Ou1xF=LeLVu_wH1-XgJ1PavDV7_NHoDevo3R9+4z-ZfQ@mail.gmail.com>
	<kslep0$hq7$1@ger.gmane.org>
Message-ID: <7745E7A9-4247-4090-9689-DBC77040A75C@mac.com>

Hi Andreas / Jeff,

Access to the UTXO set can be done using libcoin (see the coinexplorer example), which also has a rest interface. Access to the UTXO set pr address/script requires indexing of all scripts, which was easy in libcoin as the blockchain is stored in a sqlite database. Integrating this in bitcoind would require setting up and maintaining such an index ad hoc.

Michael


On Jul 23, 2013, at 10:27 , Andreas Schildbach <andreas at schildbach.de> wrote:

> On 07/22/2013 09:42 PM, Jeff Garzik wrote:
> 
>> The general goal of the HTTP REST interface is to access
>> unauthenticated, public blockchain information.  There is no plan to
>> add wallet interfacing/manipulation via this API.
> 
> Is it planned to expose the UXTO set of a given address? That would be
> useful for SPV wallets to be able to swipe a previously unknown private
> key (e.g. paper wallet).
> 
> 
> 
> ------------------------------------------------------------------------------
> See everything from the browser to the database with AppDynamics
> Get end-to-end visibility with application monitoring from AppDynamics
> Isolate bottlenecks and diagnose root cause in seconds.
> Start your free trial of AppDynamics Pro today!
> http://pubads.g.doubleclick.net/gampad/clk?id=48808831&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development




From andyparkins at gmail.com  Tue Jul 23 09:30:13 2013
From: andyparkins at gmail.com (Andy Parkins)
Date: Tue, 23 Jul 2013 10:30:13 +0100
Subject: [Bitcoin-development] HTTP REST API for bitcoind
In-Reply-To: <CAJHLa0Ou1xF=LeLVu_wH1-XgJ1PavDV7_NHoDevo3R9+4z-ZfQ@mail.gmail.com>
References: <CAJHLa0Ou1xF=LeLVu_wH1-XgJ1PavDV7_NHoDevo3R9+4z-ZfQ@mail.gmail.com>
Message-ID: <201307231030.14139.andyparkins@gmail.com>

On Monday 22 July 2013 20:42:45 Jeff Garzik wrote:
> URL: https://github.com/bitcoin/bitcoin/pull/2844
> 
> Adding an HTTP REST API for bitcoind has been occasionally tossed
> about as a useful thing.  Such an API would essentially provide a
> decentralized block explorer capability, enabling easy external access
> to transaction/address/block indices that we maintain.

This is excellent.

> The first two implemented API calls are simple, returning a block or
> TX given a simple query string based on block hash, e.g.
> 
>      GET /rest/tx/TX-HASH
> or
>      GET /rest/block/BLOCK-HASH

One additional URL makes this pretty much perfect:

  GET /rest/block-with-tx/TX-HASH

Construction of the transaction-hash-to-block database is something the full 
client's have to do anyway, so this query is no harder than the others for 
them to supply; but suddenly makes it possible for an SPV client to trace the 
providence of any transaction without needing to maintain the entire chain.


Andy

-- 
Dr Andy Parkins
andyparkins at gmail.com



From pieter.wuille at gmail.com  Tue Jul 23 09:37:59 2013
From: pieter.wuille at gmail.com (Pieter Wuille)
Date: Tue, 23 Jul 2013 11:37:59 +0200
Subject: [Bitcoin-development] HTTP REST API for bitcoind
In-Reply-To: <kslep0$hq7$1@ger.gmane.org>
References: <CAJHLa0Ou1xF=LeLVu_wH1-XgJ1PavDV7_NHoDevo3R9+4z-ZfQ@mail.gmail.com>
	<kslep0$hq7$1@ger.gmane.org>
Message-ID: <20130723093759.GB6198@vps7135.xlshosting.net>

On Tue, Jul 23, 2013 at 10:27:19AM +0200, Andreas Schildbach wrote:
> On 07/22/2013 09:42 PM, Jeff Garzik wrote:
> 
> > The general goal of the HTTP REST interface is to access
> > unauthenticated, public blockchain information.  There is no plan to
> > add wallet interfacing/manipulation via this API.
> 
> Is it planned to expose the UXTO set of a given address? That would be
> useful for SPV wallets to be able to swipe a previously unknown private
> key (e.g. paper wallet).

Depends what you mean by expose.

Maintaining an address/script-indexed UTXO is generally useful, in
particular for things like sweeping addresses. I certainly have
less problems with 'exposing' this than exposing a fully-indexed
block chain history.

However, and I expect that's what your question is about, this isn't
really useful for SPV (or less) nodes, as there is no way to
authenticate this data. If you can fake a UTXO entry, you can make
a peer believe anything about their balance, potentially resulting
in creating a valid transaction that sends change it didn't know
was there as fee to miners. Other than for normal block chain data,
there is no way to detect this without at least partial validation.

The only way to do this safely at an SPV security assumption, is by
having an address-indexed committed merkle UTXO-set tree, like the
one proposed by Alan Reiner, and being implemented by Mark
Friedenback. I know Michael Gronager has something similar implemented,
but I don't know whether it is script-indexed. To be actually useful,
it likely needs to be enforced by miners - putting a significant
burden on validation nodes. Still, if it can be done efficiently,
I think this would be worth it, but more research is needed first in
any case.

Regarding sweeping keys in the first place - I think using those,
and relying on address-indexed UTXO sets or blockchains to import
them, is an idea that doesn't scale very well in the first place.
If it is for things like scratch card or physical coins, with a
pre-set value, the obvious solution IMHO is storing the crediting
transaction with its merkle path together with the key. If that's
not possible, just the txid:vout of the credit output can suffice.
Yes, that's more data than is necessary now, but it's so much more
trivial to use.

-- 
Pieter




From pieter.wuille at gmail.com  Tue Jul 23 09:42:05 2013
From: pieter.wuille at gmail.com (Pieter Wuille)
Date: Tue, 23 Jul 2013 11:42:05 +0200
Subject: [Bitcoin-development] HTTP REST API for bitcoind
In-Reply-To: <201307231030.14139.andyparkins@gmail.com>
References: <CAJHLa0Ou1xF=LeLVu_wH1-XgJ1PavDV7_NHoDevo3R9+4z-ZfQ@mail.gmail.com>
	<201307231030.14139.andyparkins@gmail.com>
Message-ID: <20130723094204.GB6385@vps7135.xlshosting.net>

On Tue, Jul 23, 2013 at 10:30:13AM +0100, Andy Parkins wrote:
> One additional URL makes this pretty much perfect:
> 
>   GET /rest/block-with-tx/TX-HASH
> 
> Construction of the transaction-hash-to-block database is something the full 
> client's have to do anyway, so this query is no harder than the others for 
> them to supply; but suddenly makes it possible for an SPV client to trace the 
> providence of any transaction without needing to maintain the entire chain.

There is actually no such index being maintained by default, and doing so is an
unnecessary burden IMHO (you need to enable -txindex since 0.8 to get this).
Of course, if enabled, it can be exposed.

-- 
Pieter



From pete at petertodd.org  Tue Jul 23 09:47:03 2013
From: pete at petertodd.org (Peter Todd)
Date: Tue, 23 Jul 2013 05:47:03 -0400
Subject: [Bitcoin-development] HTTP REST API for bitcoind
In-Reply-To: <201307231030.14139.andyparkins@gmail.com>
References: <CAJHLa0Ou1xF=LeLVu_wH1-XgJ1PavDV7_NHoDevo3R9+4z-ZfQ@mail.gmail.com>
	<201307231030.14139.andyparkins@gmail.com>
Message-ID: <20130723094703.GA25900@savin>

On Tue, Jul 23, 2013 at 10:30:13AM +0100, Andy Parkins wrote:
> One additional URL makes this pretty much perfect:
> 
>   GET /rest/block-with-tx/TX-HASH
> 
> Construction of the transaction-hash-to-block database is something the full 
> client's have to do anyway, so this query is no harder than the others for 
> them to supply; but suddenly makes it possible for an SPV client to trace the 
> providence of any transaction without needing to maintain the entire chain.

On Tue, Jul 23, 2013 at 10:27:19AM +0200, Andreas Schildbach wrote:
> On 07/22/2013 09:42 PM, Jeff Garzik wrote:
> 
> > The general goal of the HTTP REST interface is to access
> > unauthenticated, public blockchain information.  There is no plan to
> > add wallet interfacing/manipulation via this API.
> 
> Is it planned to expose the UXTO set of a given address? That would be
> useful for SPV wallets to be able to swipe a previously unknown private
> key (e.g. paper wallet).

The REST API has nothing to do with SPV clients; it's similar to the RPC
interface and won't be exposed to the network as a whole.

Increasing the resource usage by SPV clients on full nodes is undesirable; we
have a lot of work to do regarding DoS attacks. John Dillon's comments here on
using micro-transactions to compensate full-nodes for maintaining expensive
blockchain indexes are worth reading:
https://github.com/bitcoin/bitcoin/pull/2802#issuecomment-20232958

In any case UTXO data currently requires you to have full trust in
whomever is providing you with it, and that situation will continue
until UTXO commitments are implemented - if they are implemented.

-- 
'peter'[:-1]@petertodd.org
000000000000007bea8b46717ec4acb05830bcb6222497366dd72b02ddc80569
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 490 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130723/95cd1e72/attachment.sig>

From andyparkins at gmail.com  Tue Jul 23 09:52:14 2013
From: andyparkins at gmail.com (Andy Parkins)
Date: Tue, 23 Jul 2013 10:52:14 +0100
Subject: [Bitcoin-development] HTTP REST API for bitcoind
In-Reply-To: <20130723094204.GB6385@vps7135.xlshosting.net>
References: <CAJHLa0Ou1xF=LeLVu_wH1-XgJ1PavDV7_NHoDevo3R9+4z-ZfQ@mail.gmail.com>
	<201307231030.14139.andyparkins@gmail.com>
	<20130723094204.GB6385@vps7135.xlshosting.net>
Message-ID: <201307231052.14210.andyparkins@gmail.com>

On Tuesday 23 July 2013 10:42:05 Pieter Wuille wrote:
> On Tue, Jul 23, 2013 at 10:30:13AM +0100, Andy Parkins wrote:
> > One additional URL makes this pretty much perfect:
> >   GET /rest/block-with-tx/TX-HASH
> > 
> > Construction of the transaction-hash-to-block database is something the
> > full client's have to do anyway, so this query is no harder than the
> > others for them to supply; but suddenly makes it possible for an SPV
> > client to trace the providence of any transaction without needing to
> > maintain the entire chain.
> 
> There is actually no such index being maintained by default, and doing so
> is an unnecessary burden IMHO (you need to enable -txindex since 0.8 to
> get this). Of course, if enabled, it can be exposed.

Wow.  I'm surprised at that.  How does a newly received transaction have its 
inputs verified then?  Multiple linear brute force searches of the block chain 
for every new transaction?  Or is it that transactions are only recorded if 
they were in a block, and just their presence indicates they're valid?


Andy

-- 
Dr Andy Parkins
andyparkins at gmail.com



From gronager at mac.com  Tue Jul 23 09:53:07 2013
From: gronager at mac.com (Michael Gronager)
Date: Tue, 23 Jul 2013 11:53:07 +0200
Subject: [Bitcoin-development] HTTP REST API for bitcoind
In-Reply-To: <20130723093759.GB6198@vps7135.xlshosting.net>
References: <CAJHLa0Ou1xF=LeLVu_wH1-XgJ1PavDV7_NHoDevo3R9+4z-ZfQ@mail.gmail.com>
	<kslep0$hq7$1@ger.gmane.org>
	<20130723093759.GB6198@vps7135.xlshosting.net>
Message-ID: <7B546311-BBC6-45CB-8983-87DF722F0FA1@mac.com>

> 
> The only way to do this safely at an SPV security assumption, is by
> having an address-indexed committed merkle UTXO-set tree, like the
> one proposed by Alan Reiner, and being implemented by Mark
> Friedenback. I know Michael Gronager has something similar implemented,
> but I don't know whether it is script-indexed.

The MerkleTrie I have in libcoin is indexed on UTXOs only. However, adding
an extra index for scripts would be pretty easy (half day of coding), or even having the two merged into one index.

The burden imposed on validating nodes for keeping such an index is really minimal. When using the UTXO MerkleTrie I switch off the sqlite index of these and vise versa, so there are hardly any measurable timing difference.

However, the MerkleTrie index is currently re-build on startup (which takes ~30 sec on my laptop), keeping it synced with disk would be optimal and in the long run necessary as even the UTXO set will grow over time.

> To be actually useful,
> it likely needs to be enforced by miners - putting a significant
> burden on validation nodes. Still, if it can be done efficiently,
> I think this would be worth it, but more research is needed first in
> any case.
> 




From pieter.wuille at gmail.com  Tue Jul 23 09:56:02 2013
From: pieter.wuille at gmail.com (Pieter Wuille)
Date: Tue, 23 Jul 2013 11:56:02 +0200
Subject: [Bitcoin-development] HTTP REST API for bitcoind
In-Reply-To: <201307231052.14210.andyparkins@gmail.com>
References: <CAJHLa0Ou1xF=LeLVu_wH1-XgJ1PavDV7_NHoDevo3R9+4z-ZfQ@mail.gmail.com>
	<201307231030.14139.andyparkins@gmail.com>
	<20130723094204.GB6385@vps7135.xlshosting.net>
	<201307231052.14210.andyparkins@gmail.com>
Message-ID: <CAPg+sBgwnCOeehv8V7dhNUmfB9jiSc9zSL1CeBOnHELyNwSFHA@mail.gmail.com>

On Tue, Jul 23, 2013 at 11:52 AM, Andy Parkins <andyparkins at gmail.com> wrote:
>> There is actually no such index being maintained by default, and doing so
>> is an unnecessary burden IMHO (you need to enable -txindex since 0.8 to
>> get this). Of course, if enabled, it can be exposed.
>
> Wow.  I'm surprised at that.  How does a newly received transaction have its
> inputs verified then?  Multiple linear brute force searches of the block chain
> for every new transaction?  Or is it that transactions are only recorded if
> they were in a block, and just their presence indicates they're valid?

The block chain is not involved at all to verify transactions, it's
just a historical
record to serve to other nodes, and to do wallet rescans with.

For validation, a separate database with just unspent transaction
outputs is used (around 230 MB now).

-- 
Pieter



From andyparkins at gmail.com  Tue Jul 23 10:00:24 2013
From: andyparkins at gmail.com (Andy Parkins)
Date: Tue, 23 Jul 2013 11:00:24 +0100
Subject: [Bitcoin-development] HTTP REST API for bitcoind
In-Reply-To: <20130723094703.GA25900@savin>
References: <CAJHLa0Ou1xF=LeLVu_wH1-XgJ1PavDV7_NHoDevo3R9+4z-ZfQ@mail.gmail.com>
	<201307231030.14139.andyparkins@gmail.com>
	<20130723094703.GA25900@savin>
Message-ID: <201307231100.24538.andyparkins@gmail.com>

On Tuesday 23 July 2013 10:47:03 Peter Todd wrote:
> On Tue, Jul 23, 2013 at 10:30:13AM +0100, Andy Parkins wrote:
> > One additional URL makes this pretty much perfect:
> >   GET /rest/block-with-tx/TX-HASH
> > 
> > Construction of the transaction-hash-to-block database is something the
> > full client's have to do anyway, so this query is no harder than the
> > others for them to supply; but suddenly makes it possible for an SPV
> > client to trace the providence of any transaction without needing to
> > maintain the entire chain.

> The REST API has nothing to do with SPV clients; it's similar to the RPC
> interface and won't be exposed to the network as a whole.

Yes; I know that.  I'm saying that it would make it easier for SPV (and other 
lightweight clients) for that matter.

> Increasing the resource usage by SPV clients on full nodes is undesirable;

I don't think that's thinking big enough.  What I imagine is that making it 
easier and easier to store a partial blockchain would result in lower demand 
on full nodes.

I might run a client that has only fetched blocks that contain transactions 
needed to verify my balances, right back to the genesis block.  That will be 
some small subset of the block chain and will take me very little resource to 
maintain.  I join the network and am my client is willing to verify based on 
information I have, or supply (by REST or bitcoin protocol) blocks.  Imagine 
then that everyone with a wallet were doing this.  The blockchain would be 
distributed massively.  Obviously the miners would still be keeping the entire 
chain, but we'd have a lot more nodes in the network, each contributing a 
little bit and so reducing the load on the full nodes.

> In any case UTXO data currently requires you to have full trust in
> whomever is providing you with it, and that situation will continue
> until UTXO commitments are implemented - if they are implemented.

Almost; because you can go and ask someone else the same question, it's pretty 
easy to check if you're being lied to.  Also, it's far easier to maintain a 
headers-only block chain.  When you fetch your relevant block subset, you can 
easily see that they are real blocks in your headers-only blockchain; and so 
it's pretty much impossible to lie to "give me the block containing 
transaction X".


Andy

-- 
Dr Andy Parkins
andyparkins at gmail.com



From andyparkins at gmail.com  Tue Jul 23 10:02:06 2013
From: andyparkins at gmail.com (Andy Parkins)
Date: Tue, 23 Jul 2013 11:02:06 +0100
Subject: [Bitcoin-development] HTTP REST API for bitcoind
In-Reply-To: <CAPg+sBgwnCOeehv8V7dhNUmfB9jiSc9zSL1CeBOnHELyNwSFHA@mail.gmail.com>
References: <CAJHLa0Ou1xF=LeLVu_wH1-XgJ1PavDV7_NHoDevo3R9+4z-ZfQ@mail.gmail.com>
	<201307231052.14210.andyparkins@gmail.com>
	<CAPg+sBgwnCOeehv8V7dhNUmfB9jiSc9zSL1CeBOnHELyNwSFHA@mail.gmail.com>
Message-ID: <201307231102.06693.andyparkins@gmail.com>

On Tuesday 23 July 2013 10:56:02 Pieter Wuille wrote:

> The block chain is not involved at all to verify transactions, it's
> just a historical
> record to serve to other nodes, and to do wallet rescans with.

It must be involved to some extent.  Certainly during a temporary fork, there 
are two branches growing, and you have to be able, when verifying a new 
transaction, to say which branch it's one... which branch of the blockchain.


Andy
-- 
Dr Andy Parkins
andyparkins at gmail.com



From pieter.wuille at gmail.com  Tue Jul 23 10:06:24 2013
From: pieter.wuille at gmail.com (Pieter Wuille)
Date: Tue, 23 Jul 2013 12:06:24 +0200
Subject: [Bitcoin-development] HTTP REST API for bitcoind
In-Reply-To: <201307231102.06693.andyparkins@gmail.com>
References: <CAJHLa0Ou1xF=LeLVu_wH1-XgJ1PavDV7_NHoDevo3R9+4z-ZfQ@mail.gmail.com>
	<201307231052.14210.andyparkins@gmail.com>
	<CAPg+sBgwnCOeehv8V7dhNUmfB9jiSc9zSL1CeBOnHELyNwSFHA@mail.gmail.com>
	<201307231102.06693.andyparkins@gmail.com>
Message-ID: <CAPg+sBhPLP6o7w4iJCFqkHaoonge5FxwTrMm1UiO_=SWsbpW+g@mail.gmail.com>

On Tue, Jul 23, 2013 at 12:02 PM, Andy Parkins <andyparkins at gmail.com> wrote:
> On Tuesday 23 July 2013 10:56:02 Pieter Wuille wrote:
>
>> The block chain is not involved at all to verify transactions, it's
>> just a historical
>> record to serve to other nodes, and to do wallet rescans with.
>
> It must be involved to some extent.  Certainly during a temporary fork, there
> are two branches growing, and you have to be able, when verifying a new
> transaction, to say which branch it's one... which branch of the blockchain.

No, not really.

The UTXO set is the state you need to validate blocks and
transactions. You can see blocks as authenticated patches to the UTXO
set (consumes some outputs, produces others). During validation, we
store "undo data", basically (non-authenticated) reverse patches to
the UTXO set, so we can walk back in case of a reorganization.

-- 
Pieter



From pete at petertodd.org  Tue Jul 23 10:17:28 2013
From: pete at petertodd.org (Peter Todd)
Date: Tue, 23 Jul 2013 06:17:28 -0400
Subject: [Bitcoin-development] HTTP REST API for bitcoind
In-Reply-To: <201307231100.24538.andyparkins@gmail.com>
References: <CAJHLa0Ou1xF=LeLVu_wH1-XgJ1PavDV7_NHoDevo3R9+4z-ZfQ@mail.gmail.com>
	<201307231030.14139.andyparkins@gmail.com>
	<20130723094703.GA25900@savin>
	<201307231100.24538.andyparkins@gmail.com>
Message-ID: <20130723101728.GA2116@savin>

On Tue, Jul 23, 2013 at 11:00:24AM +0100, Andy Parkins wrote:
> > Increasing the resource usage by SPV clients on full nodes is undesirable;
> 
> I don't think that's thinking big enough.  What I imagine is that making it 
> easier and easier to store a partial blockchain would result in lower demand 
> on full nodes.

Read my proposal for "Partial UTXO" mode:
http://www.mail-archive.com/bitcoin-development at lists.sourceforge.net/msg02511.html

> I might run a client that has only fetched blocks that contain transactions 
> needed to verify my balances, right back to the genesis block.  That will be 
> some small subset of the block chain and will take me very little resource to 
> maintain.  I join the network and am my client is willing to verify based on 
> information I have, or supply (by REST or bitcoin protocol) blocks.  Imagine 
> then that everyone with a wallet were doing this.  The blockchain would be 
> distributed massively.  Obviously the miners would still be keeping the entire 
> chain, but we'd have a lot more nodes in the network, each contributing a 
> little bit and so reducing the load on the full nodes.

Actually the really scary thing about partial UTXO mode is miners can
get away without keeping the entire chain provided they don't (often)
try to mine transactions spending UTXO's that they haven't verified
themselves.

They can get away with accepting blocks without checking that the UTXO's
exist, at least until enough miners do so that someone creates an
invalid block and the majority of hashing power never notices. Remember
that only with a complete UTXO set can you know that a UTXO *doesn't*
exist.

We're going to have to force miners to prove they possess the full UTXO
set in the future or the security of Bitcoin will be seriously
threatened.

> > In any case UTXO data currently requires you to have full trust in
> > whomever is providing you with it, and that situation will continue
> > until UTXO commitments are implemented - if they are implemented.
> 
> Almost; because you can go and ask someone else the same question, it's pretty 

How do you know they actually are someone else?

> easy to check if you're being lied to.  Also, it's far easier to maintain a 
> headers-only block chain.  When you fetch your relevant block subset, you can 
> easily see that they are real blocks in your headers-only blockchain; and so 
> it's pretty much impossible to lie to "give me the block containing 
> transaction X".

Do you think you have SPV or full security in that situation?

Do you know the difference?

-- 
'peter'[:-1]@petertodd.org
0000000000000070f3d118303a611e1f44ea6482a3b59a16056e69af088b1ffa
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 490 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130723/c441d9c8/attachment.sig>

From andreas at schildbach.de  Tue Jul 23 10:17:33 2013
From: andreas at schildbach.de (Andreas Schildbach)
Date: Tue, 23 Jul 2013 12:17:33 +0200
Subject: [Bitcoin-development] HTTP REST API for bitcoind
In-Reply-To: <20130723093759.GB6198@vps7135.xlshosting.net>
References: <CAJHLa0Ou1xF=LeLVu_wH1-XgJ1PavDV7_NHoDevo3R9+4z-ZfQ@mail.gmail.com>
	<kslep0$hq7$1@ger.gmane.org>
	<20130723093759.GB6198@vps7135.xlshosting.net>
Message-ID: <ksll7m$o9u$1@ger.gmane.org>

On 07/23/2013 11:37 AM, Pieter Wuille wrote:

>> Is it planned to expose the UXTO set of a given address? That would be
>> useful for SPV wallets to be able to swipe a previously unknown private
>> key (e.g. paper wallet).
>
> Depends what you mean by expose.
>
> Maintaining an address/script-indexed UTXO is generally useful, in
> particular for things like sweeping addresses. I certainly have
> less problems with 'exposing' this than exposing a fully-indexed
> block chain history.
>
> However, and I expect that's what your question is about, this isn't
> really useful for SPV (or less) nodes, as there is no way to
> authenticate this data. If you can fake a UTXO entry, you can make
> a peer believe anything about their balance, potentially resulting
> in creating a valid transaction that sends change it didn't know
> was there as fee to miners. Other than for normal block chain data,
> there is no way to detect this without at least partial validation.
>
> The only way to do this safely at an SPV security assumption, is by
> having an address-indexed committed merkle UTXO-set tree, like the
> one proposed by Alan Reiner, and being implemented by Mark
> Friedenback. I know Michael Gronager has something similar implemented,
> but I don't know whether it is script-indexed. To be actually useful,
> it likely needs to be enforced by miners - putting a significant
> burden on validation nodes. Still, if it can be done efficiently,
> I think this would be worth it, but more research is needed first in
> any case.
>
> Regarding sweeping keys in the first place - I think using those,
> and relying on address-indexed UTXO sets or blockchains to import
> them, is an idea that doesn't scale very well in the first place.
> If it is for things like scratch card or physical coins, with a
> pre-set value, the obvious solution IMHO is storing the crediting
> transaction with its merkle path together with the key. If that's
> not possible, just the txid:vout of the credit output can suffice.
> Yes, that's more data than is necessary now, but it's so much more
> trivial to use.

I certainly don't want to push ideas that won't work for whatever
reason. So I fully respect whatever you decide regarding that feature.
Personally I have never felt any need for being able to sweep paper
wallets, I am more or less just relaying the need of users.

Let me just say this:

Sweeping paper wallets is a common feature request. People switch to
centralized services just for getting that.

It is my understanding that for the usecase, an address-indexed UXTO is
enough. So you probably don't need to worry about script-indexed for now.

Security issues could be mitigated by applying trust to the REST server,
e.g. because its your own or the one of your apps vendor. Of course,
link-level security would be needed for this (e.g. SSL).

Paper wallets that include the necessary additional information is
something I have been thinking about. I see some issues:

- Paper wallets are already quite widespread. You still won't be able to
sweep those.
- Some people like to "top up" a paper wallet or even just sweep a
portion of it. That would not be possible, and in some cases even lead
to loss of coins because of the "involuntary fee" you described.
- Does the necessary info fit into a QR code?





From pieter.wuille at gmail.com  Tue Jul 23 10:19:58 2013
From: pieter.wuille at gmail.com (Pieter Wuille)
Date: Tue, 23 Jul 2013 12:19:58 +0200
Subject: [Bitcoin-development] HTTP REST API for bitcoind
In-Reply-To: <201307231100.24538.andyparkins@gmail.com>
References: <CAJHLa0Ou1xF=LeLVu_wH1-XgJ1PavDV7_NHoDevo3R9+4z-ZfQ@mail.gmail.com>
	<201307231030.14139.andyparkins@gmail.com>
	<20130723094703.GA25900@savin>
	<201307231100.24538.andyparkins@gmail.com>
Message-ID: <CAPg+sBgXviFDBZqS5EhCkb2fLsvP3ySN+b_Q9K3tK5Q=z8Bv_w@mail.gmail.com>

On Tue, Jul 23, 2013 at 12:00 PM, Andy Parkins <andyparkins at gmail.com> wrote:
>> The REST API has nothing to do with SPV clients; it's similar to the RPC
>> interface and won't be exposed to the network as a whole.
>
> Yes; I know that.  I'm saying that it would make it easier for SPV (and other
> lightweight clients) for that matter.

In what way?

>> Increasing the resource usage by SPV clients on full nodes is undesirable;
>
> I don't think that's thinking big enough.  What I imagine is that making it
> easier and easier to store a partial blockchain would result in lower demand
> on full nodes.

A partial blockchain is quite useless, as you can't build an UTXO set from it.
If you're talking simply about the storage requirements for maintaining history,
perhaps, but why rely on SPV nodes for this? Right now, those don't store any
blocks at all, and there is no reason why they should.

The only requirement is that old blocks remain available for new full
nodes to be
able to bootstrap. It's certainly not required that everyone keeps
every block ever
created. That's how the software currently works, but as soon as we get to a few
protocol changes that would allow new full nodes to find specific
peers with the data
they need, we can have fully-verifying yet (partially) pruning nodes.
I think that's a
much better idea than conflating "maintaining a wallet" with
"maintaining a subset
of historical block data".


> Obviously the miners would still be keeping the entire
> chain, but we'd have a lot more nodes in the network, each contributing a
> little bit and so reducing the load on the full nodes.

I disagree strongly here. The rules of the network are enforced by
full nodes, not by
miners - they are just trying to satisfy the rules demaned by the network.

And as far as I know, there is no way to do some "partial validation"
using just the blocks
you care about (and remember, SPV nodes currently have none at all).
One interesting
possibility here is fraud proofs, where the network can relay proofs
that certain blocks or
transactions are violating certain network rules. In this case, even
SPV nodes can just
communicate with eachother and get some "herd immunity". But storing some blocks
doesn't matter here - it is all about whether you can maintain the
UTXO set or not.

>
>> In any case UTXO data currently requires you to have full trust in
>> whomever is providing you with it, and that situation will continue
>> until UTXO commitments are implemented - if they are implemented.
>
> Almost; because you can go and ask someone else the same question, it's pretty
> easy to check if you're being lied to.  Also, it's far easier to maintain a
> headers-only block chain.  When you fetch your relevant block subset, you can
> easily see that they are real blocks in your headers-only blockchain; and so
> it's pretty much impossible to lie to "give me the block containing
> transaction X".

That's assuming there is no powerful enough attacker that can benefit from doing
a sybil attack on you. For SPV nodes currently, that risk is limited
to an attacker
that can spend enough on faking a chain with valid proof-of-work, to make you
accept a transaction that will be reversed.

If you go let SPV nodes rely on unauthenticated UTXO set data, there is no such
limitation, and they can let you believe *anything*. There are some safeguards,
like combining it with merkle paths for all outputs that credit you (which again
requires a more expensive index on the other side), but you can't ever guarantee
that a particular outputs isn't spent yet.

-- 
Pieter



From pieter.wuille at gmail.com  Tue Jul 23 10:27:35 2013
From: pieter.wuille at gmail.com (Pieter Wuille)
Date: Tue, 23 Jul 2013 12:27:35 +0200
Subject: [Bitcoin-development] HTTP REST API for bitcoind
In-Reply-To: <ksll7m$o9u$1@ger.gmane.org>
References: <CAJHLa0Ou1xF=LeLVu_wH1-XgJ1PavDV7_NHoDevo3R9+4z-ZfQ@mail.gmail.com>
	<kslep0$hq7$1@ger.gmane.org>
	<20130723093759.GB6198@vps7135.xlshosting.net>
	<ksll7m$o9u$1@ger.gmane.org>
Message-ID: <CAPg+sBgpCaCeDththBeJaJPC1uNkQriM03e0M62DXkkpm_Qvxw@mail.gmail.com>

On Tue, Jul 23, 2013 at 12:17 PM, Andreas Schildbach
<andreas at schildbach.de> wrote:
> Sweeping paper wallets is a common feature request. People switch to
> centralized services just for getting that.

That means they value convenience more than the trust-freeness of a
decentralized solution. The only way to avoid that is by making sure
the decentralized one is convenient enough. But relying on
unauthenticated data itself is equally bad - it means you lose
whatever benefit the decentralization had.

> It is my understanding that for the usecase, an address-indexed UXTO is
> enough. So you probably don't need to worry about script-indexed for now.

The difference between script-indexed and address-indexed is
absolutely trivial compared to the effort needed to implement and
maintain such authenticated trees by all full nodes. Restricting
things at the network level (which doesn't even know about a thing
like an address) to address-based indexes is ridiculous IMHO.

> Security issues could be mitigated by applying trust to the REST server,
> e.g. because its your own or the one of your apps vendor. Of course,
> link-level security would be needed for this (e.g. SSL).

Sure, once you introduce trust, a lot can be done. But it's not really
Bitcoin anymore in that case - it's relying on a third party to do the
heavy indexing for you. And if that is the best-scaling solution, sure
- but I don't think we should encourage that. Or at least, we should
first search for alternatives. And encourage infrastructure that
doesn't require it.

> Paper wallets that include the necessary additional information is
> something I have been thinking about. I see some issues:
>
> - Paper wallets are already quite widespread. You still won't be able to
> sweep those.
> - Some people like to "top up" a paper wallet or even just sweep a
> portion of it. That would not be possible, and in some cases even lead
> to loss of coins because of the "involuntary fee" you described.

Yeah, those are inherent problems with how there are used today. But
today there is also little problem - the UTXO set is tiny.

> - Does the necessary info fit into a QR code?

Absolutely, though a slightly bigger one.

-- 
Pieter



From andreas at schildbach.de  Tue Jul 23 10:29:34 2013
From: andreas at schildbach.de (Andreas Schildbach)
Date: Tue, 23 Jul 2013 12:29:34 +0200
Subject: [Bitcoin-development] HTTP REST API for bitcoind
In-Reply-To: <20130723094703.GA25900@savin>
References: <CAJHLa0Ou1xF=LeLVu_wH1-XgJ1PavDV7_NHoDevo3R9+4z-ZfQ@mail.gmail.com>
	<201307231030.14139.andyparkins@gmail.com>
	<20130723094703.GA25900@savin>
Message-ID: <ksllu7$9i$1@ger.gmane.org>

On 07/23/2013 11:47 AM, Peter Todd wrote:

>> Is it planned to expose the UXTO set of a given address? That would be
>> useful for SPV wallets to be able to swipe a previously unknown private
>> key (e.g. paper wallet).
> 
> The REST API has nothing to do with SPV clients; it's similar to the RPC
> interface and won't be exposed to the network as a whole.
> 
> Increasing the resource usage by SPV clients on full nodes is undesirable; we
> have a lot of work to do regarding DoS attacks.

Yes, I understand that. For this reason, I would vote for adding the
usual HTTP authentication/SSL stuff to the REST API. That way, SPV users
can decide to run their own instance of the API (providing the needed
resources themselves).

Or, a trusted party can set up a server. For example, I would be willing
to set it up for users of Bitcoin Wallet. I don't expect shitloads of
paper wallets sweeps for the forseeable future.





From pieter.wuille at gmail.com  Tue Jul 23 10:36:46 2013
From: pieter.wuille at gmail.com (Pieter Wuille)
Date: Tue, 23 Jul 2013 12:36:46 +0200
Subject: [Bitcoin-development] HTTP REST API for bitcoind
In-Reply-To: <ksllu7$9i$1@ger.gmane.org>
References: <CAJHLa0Ou1xF=LeLVu_wH1-XgJ1PavDV7_NHoDevo3R9+4z-ZfQ@mail.gmail.com>
	<201307231030.14139.andyparkins@gmail.com>
	<20130723094703.GA25900@savin> <ksllu7$9i$1@ger.gmane.org>
Message-ID: <CAPg+sBj8Nt5eQmnyiD6vaFP1970hj5Z5JxEocw3BHEwO_Lbhkg@mail.gmail.com>

On Tue, Jul 23, 2013 at 12:29 PM, Andreas Schildbach
<andreas at schildbach.de> wrote:
> Yes, I understand that. For this reason, I would vote for adding the
> usual HTTP authentication/SSL stuff to the REST API. That way, SPV users
> can decide to run their own instance of the API (providing the needed
> resources themselves).
>
> Or, a trusted party can set up a server. For example, I would be willing
> to set it up for users of Bitcoin Wallet. I don't expect shitloads of
> paper wallets sweeps for the forseeable future.

I don't object to using a trusted server for this if people want that,
but I don't think the reference client should encourage this.

Apart from that, exposing this HTTP-based interface publicly has its
own problems, like security risks and potential DoS risks. If
anything, we should be reducing the attack surface rather than
increase it. IMHO, the only thing that should be exposed in the P2P
protocol, which is inevitable, and already has some DoS protections.

I like this HTTP interface, but it should really only be used for
trusted local applications and debugging.

-- 
Pieter



From tier.nolan at gmail.com  Tue Jul 23 11:27:03 2013
From: tier.nolan at gmail.com (Tier Nolan)
Date: Tue, 23 Jul 2013 12:27:03 +0100
Subject: [Bitcoin-development] Distributing low POW headers
Message-ID: <CAE-z3OX+Uzw_diW97yKWGzVMBFZHq2t+w15jNSdGMGqwyJ65yQ@mail.gmail.com>

I was thinking about a change to the rules for distinguishing between forks
and maybe a BIP..

*Summary*

- Low POW headers should be broadcast by the network

If a header has more than 1/64 of the POW of a block, it should be
broadcast.  This provides information on which fork is getting most of the
hashing power.

- Miners should use the header information to decide on longest chain

The fork selection rule for miners should be biased towards staying on the
fork that has the most hashing power.

This means that they might keep hashing on a fork that is 1-2 blocks
shorter.

If most miners follow the rule, then it is the best strategy for other
miners to also follow this rule.

- Advantages

This lowers the probability of natural and malicious reversals.

*Distributing low POW headers*

First block header messages that have more than 1/64 of the standard POW
requirements would be forwarded.

This means the client needs to maintain a short term view of the entire
header tree.

if (header extends header tree) {
  if (header meets full POW) {
    add to header tree;
    forward to peers;
    check if any blocks in storage now extend the header tree
  } else {
    if (header meets POW / 64) {
      forward to peers;
    }
} else {
  if (header meets POW) {
    add to orphan header storage
  }
}

The storage could be limited and headers could be discarded after a while.

This has the extra advantage that it informs clients of forks that are
receiving hashing power.

This could be linked to a protocol version to prevent disconnects due to
invalid header messages.

*Determining the longest chain*

Each link would get extra credit for headers received.

Assume there are 2 forks starting at block A as the fork point.

A(63) <- B(72) <- C(37) <- D(58)

and

A(63) <- B'(6) <- C'(9) <- D'(4) <- E(7) <- F(6)

The numbers in brackets are the number of low POW headers received that
have those blocks as parent.

The new rule is that the POW for a block is equal to

POW * (1 + (headers / 16))

Only headers within <some threshold> of the end of the (shorter) chain
count.  However, in most cases, that doesn't matter since the fork point
will act as the start point.  As long as miners keep headers for 30-40
blocks, they will likely have all headers back to any reasonable fork point.

This means that the top fork is considered longer, since it has much more
headers, even though it has 2 less blocks.

If 75% of the miners follow this rule, then the top fork will eventually
catch up and win, so it is in the interests of the other 25% to follow the
rule too.

Even if there isn't complete agreement on headers received, the fork that
is getting the most hashing will naturally gain most of the headers, so
ties will be broken quickly.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130723/8f153275/attachment.html>

From andyparkins at gmail.com  Tue Jul 23 11:45:44 2013
From: andyparkins at gmail.com (Andy Parkins)
Date: Tue, 23 Jul 2013 12:45:44 +0100
Subject: [Bitcoin-development] HTTP REST API for bitcoind
In-Reply-To: <20130723101728.GA2116@savin>
References: <CAJHLa0Ou1xF=LeLVu_wH1-XgJ1PavDV7_NHoDevo3R9+4z-ZfQ@mail.gmail.com>
	<201307231100.24538.andyparkins@gmail.com>
	<20130723101728.GA2116@savin>
Message-ID: <201307231245.44634.andyparkins@gmail.com>

On Tuesday 23 July 2013 11:17:28 Peter Todd wrote:
> On Tue, Jul 23, 2013 at 11:00:24AM +0100, Andy Parkins wrote:
> > > Increasing the resource usage by SPV clients on full nodes is
> > > undesirable;
> > 
> > I don't think that's thinking big enough.  What I imagine is that making
> > it easier and easier to store a partial blockchain would result in lower
> > demand on full nodes.
> 
> Read my proposal for "Partial UTXO" mode:
> http://www.mail-archive.com/bitcoin-development at lists.sourceforge.net/msg02
> 511.html

Very interesting.  I love the idea of the UTXO set being tied to a block.

> > I might run a client that has only fetched blocks that contain
> > transactions needed to verify my balances, right back to the genesis
> > block.  That will be some small subset of the block chain and will take
> > me very little resource to maintain.  I join the network and am my
> > client is willing to verify based on information I have, or supply (by
> > REST or bitcoin protocol) blocks.  Imagine then that everyone with a
> > wallet were doing this.  The blockchain would be distributed massively. 
> > Obviously the miners would still be keeping the entire chain, but we'd
> > have a lot more nodes in the network, each contributing a little bit and
> > so reducing the load on the full nodes.
> 
> Actually the really scary thing about partial UTXO mode is miners can
> get away without keeping the entire chain provided they don't (often)
> try to mine transactions spending UTXO's that they haven't verified
> themselves.

You're right.  That is scary.

> > > In any case UTXO data currently requires you to have full trust in
> > > whomever is providing you with it, and that situation will continue
> > > until UTXO commitments are implemented - if they are implemented.
> > 
> > Almost; because you can go and ask someone else the same question, it's
> > pretty
> 
> How do you know they actually are someone else?

You don't.  You can't invalidate the lie if all you have access to is lies.  
But if you have access to just one honest node; that will reveal the liars.  
I'm not claiming that headers-only nodes can ever be made as secure as a full 
node.  Just _more_ secure than they are now; and potentially able to act as 
one of those honest nodes.

> > easy to check if you're being lied to.  Also, it's far easier to maintain
> > a headers-only block chain.  When you fetch your relevant block subset,
> > you can easily see that they are real blocks in your headers-only
> > blockchain; and so it's pretty much impossible to lie to "give me the
> > block containing transaction X".
> 
> Do you think you have SPV or full security in that situation?
> Do you know the difference?

There is absolutely no need to get condescendingly shirty.  I thought this was 
a friendly list; and we were having a discussion.  If you don't want to 
respond to posts -- don't.  I also didn't realise I had to pass an exam before 
I was allowed to speak.

Yes: I know the difference between SPV and full security.  SPV is headers only 
and so has no way to verify that the transaction outputs references as inputs 
to any new as-yet-unverified transaction are valid.  Instead it relies on 
having some way of proving it's in the chain; and then looking for the number 
of blocks built on top of it as "verification".  "Full security" (which is 
itself a very poor name), is obviously just checking that every output 
referenced in the inputs is unspent; that necessarily requires full blocks.

The difference in security being that in SPV there is no way to know if the 
referenced Unspent TransaXtion Output really is unspent -- it might have been 
spent elsewhere then referenced again in this new transaction.

My suggestion was that we want to be able to fetch a block by transaction; and 
that simple nodes can all, in aggregate offer contribution to the network 
rather than just being parasitical on the full nodes.   When I ask for a block 
that contains a transaction, and I do that repeatedly, I have part of the 
block chain.  If lots of simple nodes are doing that, then the whole chain 
should be available if there are enough of them.  They would then gain the 
ability to do transaction-forwarding in some cases.  This is only possible if 
a few extra facilities are added to the protocol.  One of which is the new 
feature I suggested: block-given-transaction.  It's not enough on its own, but 
if you also add in the ability for a node to tell another about the output 
transactions (basically, what block spends it), _then_ the simple nodes are 
able to become much more secure -- not 100% of course, they're still not full 
nodes, because they have no way of knowing if they are being lied to when they 
are told (this transaction is unspent), but all it takes is one honest node to 
point them at the truth, and the lie is then exposed.

That facility is just a drain on full nodes for the most part; except if you 
start encouraging it whole-sale.  The simple node would keep cache both the 
incoming and outgoing transactions (or rather the blocks that contain them) 
for addresses to which they are paying attention.  That gives them a cache 
that contains more than just their minimal set; and then they are able to do 
just a little bit of verifying on their own.  With enough nodes of this sort, 
the verification load is reduced.

Perhaps all that effort is not worth it for the tiny reduction.  Perhaps it's 
not true that that contribution of verification adds nothing.  I can live with 
those objections.  But "do I know the difference" as a reposte?  Not so much.

Anyway; going by your post on partial UTXO's; you're well ahead of the game, 
and I'm not suggesting anything that hasn't already been thought of, and 
thought of better.  I'm not sure why you took umbridge at my idea, when it 
seems like I'm just a few steps behind what you've already thought of.  Not 
everything is an attack you know?



Andy

-- 
Dr Andy Parkins
andyparkins at gmail.com



From michael at ndrix.org  Tue Jul 23 15:48:22 2013
From: michael at ndrix.org (Michael Hendricks)
Date: Tue, 23 Jul 2013 09:48:22 -0600
Subject: [Bitcoin-development] HTTP REST API for bitcoind
In-Reply-To: <CAPg+sBj8Nt5eQmnyiD6vaFP1970hj5Z5JxEocw3BHEwO_Lbhkg@mail.gmail.com>
References: <CAJHLa0Ou1xF=LeLVu_wH1-XgJ1PavDV7_NHoDevo3R9+4z-ZfQ@mail.gmail.com>
	<201307231030.14139.andyparkins@gmail.com>
	<20130723094703.GA25900@savin> <ksllu7$9i$1@ger.gmane.org>
	<CAPg+sBj8Nt5eQmnyiD6vaFP1970hj5Z5JxEocw3BHEwO_Lbhkg@mail.gmail.com>
Message-ID: <CAFHuXubQw1uzKhE9GL4t8TeE3QD=d5j+UcejU59yK-U0efzU-A@mail.gmail.com>

On Tue, Jul 23, 2013 at 4:36 AM, Pieter Wuille <pieter.wuille at gmail.com>wrote:

> Apart from that, exposing this HTTP-based interface publicly has its
> own problems, like security risks and potential DoS risks. If
> anything, we should be reducing the attack surface rather than
> increase it. IMHO, the only thing that should be exposed in the P2P
> protocol, which is inevitable, and already has some DoS protections.
>
> I like this HTTP interface, but it should really only be used for
> trusted local applications and debugging.
>

We already have a good private HTTP interface.  Most benefits of this REST
interface come from exposing it publicly.  As always, the challenge is
balancing costs and benefits.  I'm not confident that either can be known
with certainty until a well-written prototype is running in the wild.  As
some nodes expose this interface, we'll gain concrete experience from which
node operators can make informed security trade offs.

-- 
Michael
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130723/8d1b3f10/attachment.html>

From mark at monetize.io  Tue Jul 23 19:36:55 2013
From: mark at monetize.io (Mark Friedenbach)
Date: Tue, 23 Jul 2013 12:36:55 -0700
Subject: [Bitcoin-development] HTTP REST API for bitcoind
In-Reply-To: <ksllu7$9i$1@ger.gmane.org>
References: <CAJHLa0Ou1xF=LeLVu_wH1-XgJ1PavDV7_NHoDevo3R9+4z-ZfQ@mail.gmail.com>
	<201307231030.14139.andyparkins@gmail.com>
	<20130723094703.GA25900@savin> <ksllu7$9i$1@ger.gmane.org>
Message-ID: <51EEDB57.4070108@monetize.io>


-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1


On 7/23/13 3:29 AM, Andreas Schildbach wrote:
>
> Yes, I understand that. For this reason, I would vote for adding the
> usual HTTP authentication/SSL stuff to the REST API. That way, SPV users
> can decide to run their own instance of the API (providing the needed
> resources themselves).
>
> Or, a trusted party can set up a server. For example, I would be willing
> to set it up for users of Bitcoin Wallet. I don't expect shitloads of
> paper wallets sweeps for the forseeable future.
>
>
Anyone who wants HTTP authentication or TLS can wrap it with nginx, or
something similar. In the process they could put appropriate
restrictions in place on incoming requests, and the onus would be on
them, not us to keep it secure.

Mark
-----BEGIN PGP SIGNATURE-----
Version: GnuPG/MacGPG2 v2.0.19 (Darwin)
Comment: GPGTools - http://gpgtools.org
Comment: Using GnuPG with Thunderbird - http://www.enigmail.net/

iQIcBAEBAgAGBQJR7ttWAAoJEAdzVfsmodw4UmIP/36lK2TDc7mLTT8rbflJhl3v
TL4CFKhXj6OuzG7tyino3Djs4EQnyk+CbpfOmJ8kYr29GPaZttuDJhYXtJqQBQCi
DPq79ktudHnVMLPirEs7dUrLo+TAqhYX+8Sj+eTlW+p6YZg3JbkOAIPJG7597OK4
zzU8Oxr0XKJFfGscKfkPThxJboNqzJYGl3otHUMXM4HsbIRYmrx4QSr8y7dsVgTd
YZnD4bJO+eY4ZPzCcFdkPD/8bXQyKC5nPOH8/79lARNLESwB4OW79uf9q86EuH2O
jZQ1qwpRNHblrNWS1/U2E4+7hEidvgZBwQhj+HbWgKiPWh4Df1lEXq6bLQQwdn6/
b+jfiwg7xpb7eB2M4gPZ0uF/1TIcGJN3+LWEULFNTT/vsjyD/UU63ahZ1kVv7X0m
W1NrbKjXxDbip+x3N7HLIu3zqAAaa0ele7OysyFCL6ZlwwafwJiEZZgHn2Iw7I1L
S7lYBbFoLfXlOMVXNaKHPEV5gQEveMROJVBtnWkqShPQM0N/+Z+TXZes37up0GVo
d7ptPfNbUNDTFc8Jj3+5rIyy3dUvSyMJlHZhsLmtCUnbQ867ZOgeUS52a8XQ+nJY
8IsShLfLk6fRWmHrwo9lzZQ/TbbUNyoUje0Ns6iL7G3IZwDqJH3kAGb/bkj/piDu
tPNcN8bkYeNobTFIH+o4
=jV80
-----END PGP SIGNATURE-----




From mike at plan99.net  Tue Jul 23 20:01:55 2013
From: mike at plan99.net (Mike Hearn)
Date: Tue, 23 Jul 2013 22:01:55 +0200
Subject: [Bitcoin-development] Linux packaging letter
Message-ID: <CANEZrP2GvgZP_1z3EoSs3p+db7tZB6JfEVAewLpGE5eRpGgR3w@mail.gmail.com>

Hi,

Some of us have put together an open letter to the Linux packaging
community, outlining why Bitcoin is different to other programs and asking
them to not patch or modify the upstream sources.

Please consider signing it if you agree (I think the wording by now is
fine, so don't edit the contents - use the comment feature if you want to
though).

https://docs.google.com/document/d/1naenR6N6fMWSpHM0f4jpQhYBEkCEQDbLBs8AXC19Y-o/edit#heading=h.i7tz3gqh65mi

The trigger for this is the discovery that Debian bitcoind's got split out
of the consensus some time in April, for reasons that nobody yet figured
out but is presumably related to a patch (eg it uses system leveldb).
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130723/9d4b2f2a/attachment.html>

From gmaxwell at gmail.com  Tue Jul 23 20:14:58 2013
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Tue, 23 Jul 2013 13:14:58 -0700
Subject: [Bitcoin-development] Linux packaging letter
In-Reply-To: <CANEZrP2GvgZP_1z3EoSs3p+db7tZB6JfEVAewLpGE5eRpGgR3w@mail.gmail.com>
References: <CANEZrP2GvgZP_1z3EoSs3p+db7tZB6JfEVAewLpGE5eRpGgR3w@mail.gmail.com>
Message-ID: <CAAS2fgT+GPgOtvvrjKozYc-Swqw-+HPcyZY5MbqvY9oEhiWRuA@mail.gmail.com>

On Tue, Jul 23, 2013 at 1:01 PM, Mike Hearn <mike at plan99.net> wrote:
> Hi,
>
> Some of us have put together an open letter to the Linux packaging
> community, outlining why Bitcoin is different to other programs and asking
> them to not patch or modify the upstream sources.
>
> Please consider signing it if you agree (I think the wording by now is fine,
> so don't edit the contents - use the comment feature if you want to though).
>
> https://docs.google.com/document/d/1naenR6N6fMWSpHM0f4jpQhYBEkCEQDbLBs8AXC19Y-o/edit#heading=h.i7tz3gqh65mi

Ah, this is not entirely in sync with the last (mostly minor)
copyedits that had been signed off by Gavin, Pieter, Jgarzik, and I...
but that appears to be a smaller issue than the fact that the whole
thing is now being rewritten by "anonymous beaver" and friends.



From mike at plan99.net  Tue Jul 23 20:32:06 2013
From: mike at plan99.net (Mike Hearn)
Date: Tue, 23 Jul 2013 22:32:06 +0200
Subject: [Bitcoin-development] Linux packaging letter
In-Reply-To: <CAAS2fgT+GPgOtvvrjKozYc-Swqw-+HPcyZY5MbqvY9oEhiWRuA@mail.gmail.com>
References: <CANEZrP2GvgZP_1z3EoSs3p+db7tZB6JfEVAewLpGE5eRpGgR3w@mail.gmail.com>
	<CAAS2fgT+GPgOtvvrjKozYc-Swqw-+HPcyZY5MbqvY9oEhiWRuA@mail.gmail.com>
Message-ID: <CANEZrP2hn3oXp4CU7-85vpSLc_3GGnRgfQNKDc+28jkB2DE2JA@mail.gmail.com>

Yes. Someone decided to actually delete the people who had signed so far
and replace it with a request for PGP signing - no. Not everyone even uses
PGP, which is overkill for this anyway.

I'm going to roll the document back and lock it. Sorry, I had hoped people
would respect my request to not fiddle with the content, which they did not
do.

If you'd like to have your name on it, let me know or post here and I'll
add it.


On Tue, Jul 23, 2013 at 10:14 PM, Gregory Maxwell <gmaxwell at gmail.com>wrote:

> On Tue, Jul 23, 2013 at 1:01 PM, Mike Hearn <mike at plan99.net> wrote:
> > Hi,
> >
> > Some of us have put together an open letter to the Linux packaging
> > community, outlining why Bitcoin is different to other programs and
> asking
> > them to not patch or modify the upstream sources.
> >
> > Please consider signing it if you agree (I think the wording by now is
> fine,
> > so don't edit the contents - use the comment feature if you want to
> though).
> >
> >
> https://docs.google.com/document/d/1naenR6N6fMWSpHM0f4jpQhYBEkCEQDbLBs8AXC19Y-o/edit#heading=h.i7tz3gqh65mi
>
> Ah, this is not entirely in sync with the last (mostly minor)
> copyedits that had been signed off by Gavin, Pieter, Jgarzik, and I...
> but that appears to be a smaller issue than the fact that the whole
> thing is now being rewritten by "anonymous beaver" and friends.
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130723/97c9d5c8/attachment.html>

From gmaxwell at gmail.com  Tue Jul 23 20:50:28 2013
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Tue, 23 Jul 2013 13:50:28 -0700
Subject: [Bitcoin-development] Linux packaging letter
In-Reply-To: <CANEZrP2hn3oXp4CU7-85vpSLc_3GGnRgfQNKDc+28jkB2DE2JA@mail.gmail.com>
References: <CANEZrP2GvgZP_1z3EoSs3p+db7tZB6JfEVAewLpGE5eRpGgR3w@mail.gmail.com>
	<CAAS2fgT+GPgOtvvrjKozYc-Swqw-+HPcyZY5MbqvY9oEhiWRuA@mail.gmail.com>
	<CANEZrP2hn3oXp4CU7-85vpSLc_3GGnRgfQNKDc+28jkB2DE2JA@mail.gmail.com>
Message-ID: <CAAS2fgR7evOkrTpX75EQgJzuDUBqGOKCAvWJR_5T64REOJmJ8A@mail.gmail.com>

On Tue, Jul 23, 2013 at 1:32 PM, Mike Hearn <mike at plan99.net> wrote:
> Yes. Someone decided to actually delete the people who had signed so far and

Some people/person went and actually started making substantive edits
to the text.
The text it's rolled back to is missing the last copyedits from last night too.

The text that had been ACKed last night was a3e52973,  available at
http://luke.dashjr.org/tmp/code/20130723-linux-distribution-packaging-and-bitcoin.md

As far as the PGP goes?

I think using the PGP is good: it's making use of the right tools,
avoids issues like we just had where people go changing the content
after names had been affixed,  shows solidarity with people building
security infrastructure that our ecosystem depends on.  If you only
use it occasionally then its easy for someone to strip it when it _is_
needed and disguise that just as regular non-use.  It's my general
view that for people working in our domain basic competence and use of
these tools, even when they kinda stink, is a kind of civic hygiene.

At the same time it's not urgent. It's poorly used by people and will
be ignored by most but packagers are the most frequent users of it
that I've encountered.  Fortunately, it's harmless in any case.

If people are interested in offering PGP signatures of it:

wget http://luke.dashjr.org/tmp/code/20130723-linux-distribution-packaging-and-bitcoin.md
gpg --clearsign 20130723-linux-distribution-packaging-and-bitcoin.md

and post the little signature asc. The result composes nicely:
http://luke.dashjr.org/tmp/code/20130723-linux-distribution-packaging-and-bitcoin.md.asc



From showard314 at gmail.com  Tue Jul 23 22:02:28 2013
From: showard314 at gmail.com (Scott Howard)
Date: Tue, 23 Jul 2013 18:02:28 -0400
Subject: [Bitcoin-development] Linux packaging letter
In-Reply-To: <CANEZrP2GvgZP_1z3EoSs3p+db7tZB6JfEVAewLpGE5eRpGgR3w@mail.gmail.com>
References: <CANEZrP2GvgZP_1z3EoSs3p+db7tZB6JfEVAewLpGE5eRpGgR3w@mail.gmail.com>
Message-ID: <CANg8-dAzc2ENivTpr6S=zoUkfGyBM6j=OUb8-_wLTFQqLRmnzw@mail.gmail.com>

On Tue, Jul 23, 2013 at 4:01 PM, Mike Hearn <mike at plan99.net> wrote:
> Hi,
>
> Some of us have put together an open letter to the Linux packaging
> community, outlining why Bitcoin is different to other programs and asking
> them to not patch or modify the upstream sources.
>
> Please consider signing it if you agree (I think the wording by now is fine,
> so don't edit the contents - use the comment feature if you want to though).
>
> https://docs.google.com/document/d/1naenR6N6fMWSpHM0f4jpQhYBEkCEQDbLBs8AXC19Y-o/edit#heading=h.i7tz3gqh65mi
>
> The trigger for this is the discovery that Debian bitcoind's got split out
> of the consensus some time in April, for reasons that nobody yet figured out
> but is presumably related to a patch (eg it uses system leveldb).

Hi Mike,
Debian's bitcoin is maintained on an open and archived mailing list
and git repo:
Debian Bitcoin Packaging Team <pkg-bitcoin-devel at lists.alioth.debian.org>

If there is a problem or question, getting an answer should be really
easy. It would be good to include them in the discussion there (I
CC:ed the list). If the upstream developers have a consensus that
distribution packaging is not in the best interest of the project,
then I personally would defer to their judgement and request removal.
I'm leaving this open for other opinions from the Debian side.

That said, let me summarize the arguments and see if we can figure out
a permanent solution:

1) It appears that the consensus of upstream developers is that any
distributed binary should only be linked against libraries that the
bitcoin developers have tested and audited since any compatibility bug
is a risk to both the user and the network.

Response: Is there a way to "certify" the Debian libraries? Debian
bitcoind/bitcoin-qt runs the compile test during all architectures.
MIPS has been failing recently, but no one has looked into it yet.
Perhaps it's not worth developers efforts yet, but at some point the
technology should reach a point it can be redistributed.


2) Bitcoin is new technology, so any patches have the ability of
harming both the network and user.

Response: I, and I'm sure everyone else working on it, totally agrees.
All patches are public [1], you can see that the patches are only to
the build system (except for one adding a debug message). Is there a
specific patch or bug that is problematic? This seems to be
reiterating (1) above: don't patch the build system to use libraries
that were not audited by the developers.



The two solutions are: (1) no one besides the upstream developers
compiles and distributes binaries, ever, or (2) upstream comes up with
a system where someone besides them can compile working binaries for
distribution. Most likely the best solution is to do (1) until
upstream sets up a system to allow (2).

I'm curious as to other's opinions.
Thanks,
Scott


[1] http://anonscm.debian.org/gitweb/?p=collab-maint/bitcoin.git;a=tree;f=debian/patches;h=ba576f9f3ddad47a2f85dcbfb7a0b3482834f19f;hb=HEAD



From luke at dashjr.org  Tue Jul 23 22:26:44 2013
From: luke at dashjr.org (Luke-Jr)
Date: Tue, 23 Jul 2013 22:26:44 +0000
Subject: [Bitcoin-development] Linux packaging letter
In-Reply-To: <CANg8-dAzc2ENivTpr6S=zoUkfGyBM6j=OUb8-_wLTFQqLRmnzw@mail.gmail.com>
References: <CANEZrP2GvgZP_1z3EoSs3p+db7tZB6JfEVAewLpGE5eRpGgR3w@mail.gmail.com>
	<CANg8-dAzc2ENivTpr6S=zoUkfGyBM6j=OUb8-_wLTFQqLRmnzw@mail.gmail.com>
Message-ID: <201307232226.52434.luke@dashjr.org>

On Tuesday, July 23, 2013 10:02:28 PM Scott Howard wrote:
> 1) It appears that the consensus of upstream developers is that any
> distributed binary should only be linked against libraries that the
> bitcoin developers have tested and audited since any compatibility bug
> is a risk to both the user and the network.
> 
> Response: Is there a way to "certify" the Debian libraries? Debian
> bitcoind/bitcoin-qt runs the compile test during all architectures.

It doesn't need to be audited by any given person or team, just someone who 
understands the issues and can dedicate the time to doing a competent audit.
Testing bitcoind/bitcoin-qt is not sufficient: you must guarantee that your 
libraries (especially LevelDB) are bug-for-bug compatible with the ones used 
by everyone else. And not only the current versions, but every future version 
to ever hit the repository. This means a lot of additional work for the 
maintainers of the library packages, and the security team; for example, the 
security team must understand that they *cannot* deploy a critical security 
bugfix to LevelDB until someone competent has reviewed that it is 
behaviourally (including bug behaviours!) compatible with the versions in use 
everywhere else/previously. I think it is likely all this additional 
work/delays will be considered unacceptable to your library/security teams, 
thus using the bundled/embedded LevelDB is probably the best solution.

> MIPS has been failing recently, but no one has looked into it yet.
> Perhaps it's not worth developers efforts yet, but at some point the
> technology should reach a point it can be redistributed.

MIPS (and any other big endian architecture) has *always* failed on the 
Satoshi codebase, and will not be supported until someone has time to dedicate 
to fixing the numerous little-endian assumptions in the code. I have an 
incomplete port, but it isn't very high on my priority list to figure out what 
else it's missing.

> 2) Bitcoin is new technology, so any patches have the ability of
> harming both the network and user.
> 
> Response: I, and I'm sure everyone else working on it, totally agrees.
> All patches are public [1], you can see that the patches are only to
> the build system (except for one adding a debug message). Is there a
> specific patch or bug that is problematic? This seems to be
> reiterating (1) above: don't patch the build system to use libraries
> that were not audited by the developers.
> 
> The two solutions are: (1) no one besides the upstream developers
> compiles and distributes binaries, ever, or (2) upstream comes up with
> a system where someone besides them can compile working binaries for
> distribution. Most likely the best solution is to do (1) until
> upstream sets up a system to allow (2).

Debian could probably get away with packaging Bitcoin-Qt and bitcoind as-is 
with no modifications, and not have any problems. It's only when you begin 
making modifications that it becomes a problem. There are also some concerns 
that it puts a much larger price on compromising Debian's build servers and/or 
repositories (suddenly the attacker can steal a LOT of money).

The official binaries are not simply built by upstream developers: using 
Gitian, *anyone* can produce bit-for-bit identical binaries. Official releases 
are only published after 3 or more people have done an independent compile and 
signed the output. It would be excellent if the whole of Debian could work 
toward achieving this level of security eventually, which would make 
distributing Bitcoin node software much safer as well.

Luke
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 1530 bytes
Desc: This is a digitally signed message part.
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130723/583a77e0/attachment.sig>

From pieter.wuille at gmail.com  Tue Jul 23 22:33:47 2013
From: pieter.wuille at gmail.com (Pieter Wuille)
Date: Wed, 24 Jul 2013 00:33:47 +0200
Subject: [Bitcoin-development] Linux packaging letter
In-Reply-To: <CANEZrP2GvgZP_1z3EoSs3p+db7tZB6JfEVAewLpGE5eRpGgR3w@mail.gmail.com>
References: <CANEZrP2GvgZP_1z3EoSs3p+db7tZB6JfEVAewLpGE5eRpGgR3w@mail.gmail.com>
Message-ID: <20130723223346.GA17088@vps7135.xlshosting.net>

On Tue, Jul 23, 2013 at 10:01:55PM +0200, Mike Hearn wrote:
> The trigger for this is the discovery that Debian bitcoind's got split out
> of the consensus some time in April, for reasons that nobody yet figured
> out but is presumably related to a patch (eg it uses system leveldb).

Just to make sure there are no misunderstandings, as far as I know there is
no reason to assume the reported problem (comment on #2726) is:
1) a fork (it's an indeterministic and avoidable database corruption, it seems)
2) related to leveldb
3) reproducible by more than one person
4) debian's fault.

That said, I think reaching out to packagers to educate them about the risks
is a good idea - but let's not blame people before we understand our own
problems.

-- 
Pieter





From gdt at work.lexort.com  Tue Jul 23 23:23:27 2013
From: gdt at work.lexort.com (Greg Troxel)
Date: Tue, 23 Jul 2013 19:23:27 -0400
Subject: [Bitcoin-development] Linux packaging letter
References: <CANEZrP2GvgZP_1z3EoSs3p+db7tZB6JfEVAewLpGE5eRpGgR3w@mail.gmail.com>
Message-ID: <smumwpcg8sw.fsf@linuxpal.mit.edu>

I find it interesting that this is a "linux packaging letter".  How much
of this applies to pkgsrc, FreeBSD ports, OpenBSD ports, and other
non-Linux packaging systems (pkgsrc supports Linux as on of 20 operating
systems, but is not a "Linux packaging system")?

Is the repeatable build infrastructure portable (to any reasonable
mostly-POSIX-compliant system, with gcc or clang)?  I have the vague
impression it's Ubuntu only, but I am very unclear on this point.  How
does this repeatableness interact with building for multiple operating
systems and cpu types (say 20 OS, with typically 3 versions of the OS
for each, with 1-20 cpu types per OS, for a cross-product of perhaps 200
combinations)?

Requiring precise library depdendencies is quite awkward.  Certainly
requiring new enough to avoid known bugs is understandable, but that
should be caught at configure time and fail.  Synchronous updates of
multiple packages is difficult, and runs into A wants only n of C, while
B wants only m.  So if you are talking about running regression tests
with the set of versions of a dependency that are considered reasonable,
and there's therefore a solution to the multiple-package constraint
problem, that seems ok.

It seems like a bug that the package will build on BE systems and then
fail tests.   If it's known not to be ok, it seems that absent some
configure-time flag the build should fail.

Asking people not to patch should mean willingnesss to make accomodation
in the master sources for build issues for multiple packaging systems.
I haven't gotten around to packaging this for pkgsrc - so far I only
have the energy to lurk (due to too many things on the todo list).  But
I often find that some changes are needed.  If you're willing (in
theory) to add in configure flags to control build behavior (in a way
that you can audit and decide is safe), that's great, and of course we
can discuss an actual situation when one gets figured out.

Greg






From luke at dashjr.org  Tue Jul 23 23:45:26 2013
From: luke at dashjr.org (Luke-Jr)
Date: Tue, 23 Jul 2013 23:45:26 +0000
Subject: [Bitcoin-development] Linux packaging letter
In-Reply-To: <smumwpcg8sw.fsf@linuxpal.mit.edu>
References: <CANEZrP2GvgZP_1z3EoSs3p+db7tZB6JfEVAewLpGE5eRpGgR3w@mail.gmail.com>
	<smumwpcg8sw.fsf@linuxpal.mit.edu>
Message-ID: <201307232345.37289.luke@dashjr.org>

On Tuesday, July 23, 2013 11:23:27 PM Greg Troxel wrote:
> I find it interesting that this is a "linux packaging letter".  How much
> of this applies to pkgsrc, FreeBSD ports, OpenBSD ports, and other
> non-Linux packaging systems (pkgsrc supports Linux as on of 20 operating
> systems, but is not a "Linux packaging system")?

It was written with bitcoind/Bitcoin-Qt in mind, which don't work on BSD. :p

> Is the repeatable build infrastructure portable (to any reasonable
> mostly-POSIX-compliant system, with gcc or clang)?  I have the vague
> impression it's Ubuntu only, but I am very unclear on this point.  How
> does this repeatableness interact with building for multiple operating
> systems and cpu types (say 20 OS, with typically 3 versions of the OS
> for each, with 1-20 cpu types per OS, for a cross-product of perhaps 200
> combinations)?

It should be portable to other systems, though hasn't been done yet.
Would be nice if the concepts it uses could be integrated into the package-
building systems.

> Requiring precise library depdendencies is quite awkward.  Certainly
> requiring new enough to avoid known bugs is understandable, but that
> should be caught at configure time and fail.

The problem is that we require bugs. That is, if your library has those bugs 
fixed, you have introduced a security vulnerability.

> It seems like a bug that the package will build on BE systems and then
> fail tests.   If it's known not to be ok, it seems that absent some
> configure-time flag the build should fail.

There is no configure-time for this node software yet. The autoconf-based one 
in the works *does* make this check, however.

> Asking people not to patch should mean willingnesss to make accomodation
> in the master sources for build issues for multiple packaging systems.
> I haven't gotten around to packaging this for pkgsrc - so far I only
> have the energy to lurk (due to too many things on the todo list).  But
> I often find that some changes are needed.  If you're willing (in
> theory) to add in configure flags to control build behavior (in a way
> that you can audit and decide is safe), that's great, and of course we
> can discuss an actual situation when one gets figured out.

The review process is very slow and strict, but that is because of the same 
reasons it isn't safe to distribute patched versions in general. Merging your 
patches to mainline is not only a good idea, but it helps to ensure they get 
the necessary testing needed to be safe.

Luke
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 1530 bytes
Desc: This is a digitally signed message part.
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130723/9a0e804f/attachment.sig>

From gmaxwell at gmail.com  Wed Jul 24 00:50:48 2013
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Tue, 23 Jul 2013 17:50:48 -0700
Subject: [Bitcoin-development] Linux packaging letter
In-Reply-To: <smumwpcg8sw.fsf@linuxpal.mit.edu>
References: <CANEZrP2GvgZP_1z3EoSs3p+db7tZB6JfEVAewLpGE5eRpGgR3w@mail.gmail.com>
	<smumwpcg8sw.fsf@linuxpal.mit.edu>
Message-ID: <CAAS2fgTxU4fb6n+fHPomOVDkEY+uoepd7QTPMxbxALYm2Sf3kg@mail.gmail.com>

On Tue, Jul 23, 2013 at 4:23 PM, Greg Troxel <gdt at work.lexort.com> wrote:
> Is the repeatable build infrastructure portable (to any reasonable
> mostly-POSIX-compliant system, with gcc or clang)?  I have the vague

It's "portable" to anything that can run the relevant VMs.  Uh
provided you don't mind cross compiling everything from an unbuntu VM.
 It certainly would be nice if the trusted-computing-base for gitian
were a bit smaller, thats an area for long term improvement for sure.

It may need some massaging. The tor project is beginning to use the
same infrastructure, so this could be usefully conserved work.

Likewise expanding the supported output targets would be great? though
in the case of Bitcoin this is bounded by resources to adequately QA
builds on alternative targets.

> Requiring precise library depdendencies is quite awkward.  Certainly
> requiring new enough to avoid known bugs is understandable, but that
> should be caught at configure time and fail.

In some cases packages solving bugs is problematic for Bitcoin.

This is something that it seems to take a whiteboard to explain, so I
apologize for the opacity of simple email here.

>From a technical perspective Bitcoin's whole purpose is getting a
whole bunch of computers world wide to reach a bit identical agreement
on the content of a database, subject to a whole pile of rules, in the
face of potentially malicious input, without any trusted parties at
all (even the guy you got the software from, assuming you have the
resources to audit it).

I'll walk through a simple example:

Say Bitcoin used a backing database which had an unknown a bug where
any item with a key that begins with 0xDEADBEEF returns not found when
queried, even if its in the DB. Once discovered, any database library
would want to fix that quickly and they'd fix it in a point release
without reservation. They might not even release note that particular
fix it if went along with some others, it could even be fixed
accidentally.

Now say that we have a state where half the Bitcoin network is running
the old buggy version, and half is running the fixed version.  Someone
creates a transaction with ID 0xDEADBEEF...  and then subsequently
spends the output of that transaction. This could be by pure chance or
it could be a malicious act.

To half the network that spending transaction looks like someone
spending coin from nowhere, a violation of the rules.  The consensus
would then fork, effectively partitioning the network.  On each fork
any coin could be spent twice, and the fork will only be resolvable by
one side or the other abandoning their state (generally the more
permissive side would need to be abandoned because the permissive one
is tolerant of the restrictive one's behavior) by manually downgrading
or patching software.  As a result of this parties who believed some
of their transactions were safely settled would find them reversed by
people who exploited the inconsistent consensus.

To deploy such a fix in Bitcoin without creating a risk for
participants we need to make a staged revision of the network protocol
rules:  There would be a protocol update that fixed the database bug
_and_ explicitly rejected 0xDEADBEEF transactions until either some
far out future date or until triggered by quorum sensing (or both).
The users of Bitcoin would all be advised that they had to apply
fixes/workaround by the switchover point or be left out of service or
vulnerable. At designated time / quorum nodes would simultaneously
switch to the new behavior.  (Or in some cases, we'd just move the
'bug' into the Bitcoin code so that it can be fixed in the database,
and we'd then just keep it forever, depending on how harmful it was to
Bitcoin, a one if 4 billion chance of having to rewrite a transaction
wouldn't be a big deal)

We've done these organized updates to solve problems (as various flaws
in Bitcoin itself can present similar consensus risks) several times
with great success, typical time horizons spanning for months to
years.  But it cannot work if the behavior is changed out from under
the software.

Fortunately, if the number of users running with an uncontrolled
consensus relevant inconsistent behavior is small the danger is only
to themselves (and, perhaps, their customers). I'm not happy to see
anyone get harmed, but it's better if its few people than many. This
is part of the reason that it's a "linux packaging letter", since for
Bitcoin the combination of uncoordinated patching and non-trivial
userbases appears to be currently unique to GNU/Linux systems.  Though
indeed, the concerns do apply more broadly.

> multiple packages is difficult, and runs into A wants only n of C, while
> B wants only m.

My understanding is that gentoo is actually able to handle this (and
does, for Bitcoin)? and really I presume just about everything else
could with enough effort. I certainly wouldn't ask anyone else to do
that.  If you're really getting into the rathole of building separate
libraries just for Bitcoin the value of packaging it goes away.

> So if you are talking about running regression tests
> with the set of versions of a dependency that are considered reasonable,
> and there's therefore a solution to the multiple-package constraint
> problem, that seems ok.

Running a complete set of tests is a start? though the unit tests are
not and cannot be adequate. There is a full systems testing harnesses
which should be used on new platforms.  Even that though isn't really
adequate, as it is currently infeasible to even achieve complete test
coverage in things like cryptographic libraries and database
environments.

This is an area where both the Bitcoin software ecosystem and the
greater art of large scale software validation need to mature. You
won't hear anyone applauding the fact that harmless looking bugfixes
in leveldb, boost, or openssl could be major doom event makers

We're not crazy folks who insist on using formally undefined behavior
and argue that it should never be changed out from under us. When
there is a known risk we will boil the oceans to close it even if we
think that the world would be more 'proper' some other way,  but for
known-unknowns and unknown-unknowns we can only adopt a conservative
approach and try to do our best.

One of the middle term things we did was internally integrated our
validation database library (leveldb).  Since we _know_ that its a
consistency critical component, and a part of our system that is
especially difficult to validate, integrating it meant removing a lot
of risk and allowed it to be upgraded with an eye on the
Bitcoin-specific consequences.  Unfortunately distributions have been
patching Bitcoin to unbundle it.  Checking versions isn't adequate
because, at least in other packages, some distributors frequently
backport fixes or apply novel fixes which may not even be shared with
upstream.

Other considerations may drive us out of external dependencies for
many of the consensus parts of Bitcoin. E.g. Pieter has writen an
ECDSA library for our specific ECC curve which does signature
validation >6x faster than OpenSSL (but it isn't obviously
upstreamable due to some differing requirements for constant time
operations), at some point we may need to adopt a backing database
that is able to produce authentication proofs, etc.  Certainly
additional clever tests will make undiscovered surprising behavior
less likely, though figuring out how to get the tests actually run if
they take two hours and use 20GB of disk space is a challenge.

... but today we need to work with what we have, which is fragile in
some atypical ways.  Part of that is making an effort to make sure
that anyone who might create a big footgun event has some idea of the
concern space.

> It seems like a bug that the package will build on BE systems and then
> fail tests.   If it's known not to be ok, it seems that absent some
> configure-time flag the build should fail.

Configure time?  At the moment Bitcoin is built with a straight
forward makefile (though there is a switch to autotools in the
pipeline).

BE isn't currently supported (and I believe this is well documented in
the package).  Fixing this would be nice, patches accepted.   There
was an amusing incident a while back where a distributor was refusing
to take an update that added unit tests because they revealed failures
on BE, nevermind that the application itself instantly failed on BE
and never worked there. I believe that has since been resolved.

> Asking people not to patch should mean willingnesss to make accomodation
> in the master sources for build issues for multiple packaging systems.
> I haven't gotten around to packaging this for pkgsrc - so far I only
> have the energy to lurk (due to too many things on the todo list).  But
> I often find that some changes are needed.  If you're willing (in
> theory) to add in configure flags to control build behavior (in a way
> that you can audit and decide is safe), that's great, and of course we
> can discuss an actual situation when one gets figured out.

I _believe_  (and hope) we've been very accommodating system specific
fixes, even for systems we don't formally support.

I personally believe that portable software is better software.
Portability forces you to dust out nasty cobwebs, reveals dependency
on dangerous undefined behavior, encourages intelligent abstractions
and appropriate testing, and it invites contributions from more hands
and eyes? I don't care if you use a weird OS: I just want you for your
code and your bug-reports.  So even if we don't consider a platform
worth supporting in any rigorous way, we should still be open to fixes
and build support.

... although we're typical very much resource bound on testing. Our
upstreaming pipeline is often somewhat slow. But it's slow because we
are serious about review, even of trivial changes. Being slow is no
reason to not submit, even if you make a decision to not block on it
(though, if you're doing that you should make the decision in full
knowledge of the potential implications). Like all things stepping up
and being willing to do the work goes a long way to getting things
done.



From dhuff at jrbobdobbs.org  Wed Jul 24 01:45:11 2013
From: dhuff at jrbobdobbs.org (Douglas Huff)
Date: Tue, 23 Jul 2013 18:45:11 -0700
Subject: [Bitcoin-development] Linux packaging letter
In-Reply-To: <CANg8-dAzc2ENivTpr6S=zoUkfGyBM6j=OUb8-_wLTFQqLRmnzw@mail.gmail.com>
References: <CANEZrP2GvgZP_1z3EoSs3p+db7tZB6JfEVAewLpGE5eRpGgR3w@mail.gmail.com>
	<CANg8-dAzc2ENivTpr6S=zoUkfGyBM6j=OUb8-_wLTFQqLRmnzw@mail.gmail.com>
Message-ID: <8A6BD408-352F-4346-AF81-3C63BD0ED93B@jrbobdobbs.org>

Honestly, until I read the quoted part of your response, I actually wasn't in favor of this whole thing since in general the types of issues being mentioned are, in large part, the types of issues that maintainers deal with all the time.

On Jul 23, 2013, at 3:02 PM, Scott Howard <showard314 at gmail.com> wrote:

> Response: Is there a way to "certify" the Debian libraries? Debian
> bitcoind/bitcoin-qt runs the compile test during all architectures.
> MIPS has been failing recently, but no one has looked into it yet.
> Perhaps it's not worth developers efforts yet, but at some point the
> technology should reach a point it can be redistributed.


The fact that you're even trying to package and/or at some point have packaged and shipped big endian binaries is straight up *NEGLIGENT.*

Stop that. Now. It won't work.

Thanks for showing that this *is* necessary, I guess.


From showard314 at gmail.com  Wed Jul 24 02:27:37 2013
From: showard314 at gmail.com (Scott Howard)
Date: Tue, 23 Jul 2013 22:27:37 -0400
Subject: [Bitcoin-development] Linux packaging letter
In-Reply-To: <8A6BD408-352F-4346-AF81-3C63BD0ED93B@jrbobdobbs.org>
References: <CANEZrP2GvgZP_1z3EoSs3p+db7tZB6JfEVAewLpGE5eRpGgR3w@mail.gmail.com>
	<CANg8-dAzc2ENivTpr6S=zoUkfGyBM6j=OUb8-_wLTFQqLRmnzw@mail.gmail.com>
	<8A6BD408-352F-4346-AF81-3C63BD0ED93B@jrbobdobbs.org>
Message-ID: <CANg8-dAjYXN=gSpwbNXLpzPjH2ejF4jxDk7iS1MaBC-4kH9qRg@mail.gmail.com>

On Tue, Jul 23, 2013 at 9:45 PM, Douglas Huff <dhuff at jrbobdobbs.org> wrote:
> Honestly, until I read the quoted part of your response, I actually wasn't in favor of this whole thing since in general the types of issues being mentioned are, in large part, the types of issues that maintainers deal with all the time.
>
> On Jul 23, 2013, at 3:02 PM, Scott Howard <showard314 at gmail.com> wrote:
>
>> Response: Is there a way to "certify" the Debian libraries? Debian
>> bitcoind/bitcoin-qt runs the compile test during all architectures.
>> MIPS has been failing recently, but no one has looked into it yet.
>> Perhaps it's not worth developers efforts yet, but at some point the
>> technology should reach a point it can be redistributed.
>
>
> The fact that you're even trying to package and/or at some point have packaged and shipped big endian binaries is straight up *NEGLIGENT.*
>
> Stop that. Now. It won't work.
>
> Thanks for showing that this *is* necessary, I guess.

before people get too upset, I'm talking about little-endian MIPS
(debian-mipsel)
http://www.debian.org/ports/mips/



From showard314 at gmail.com  Wed Jul 24 03:00:36 2013
From: showard314 at gmail.com (Scott Howard)
Date: Tue, 23 Jul 2013 23:00:36 -0400
Subject: [Bitcoin-development] Linux packaging letter
In-Reply-To: <201307232226.52434.luke@dashjr.org>
References: <CANEZrP2GvgZP_1z3EoSs3p+db7tZB6JfEVAewLpGE5eRpGgR3w@mail.gmail.com>
	<CANg8-dAzc2ENivTpr6S=zoUkfGyBM6j=OUb8-_wLTFQqLRmnzw@mail.gmail.com>
	<201307232226.52434.luke@dashjr.org>
Message-ID: <CANg8-dBfcOBKGtkw8DGn-VJDbUyv0bbwK2Nm7CBo3tZrQ_5Zwg@mail.gmail.com>

On Tue, Jul 23, 2013 at 6:26 PM, Luke-Jr <luke at dashjr.org> wrote:
> This means a lot of additional work for the
> maintainers of the library packages, and the security team; for example, the
> security team must understand that they *cannot* deploy a critical security
> bugfix to LevelDB until someone competent has reviewed that it is
> behaviourally (including bug behaviours!) compatible with the versions in use
> everywhere else/previously. I think it is likely all this additional
> work/delays will be considered unacceptable to your library/security teams,
> thus using the bundled/embedded LevelDB is probably the best solution.

The above is a key point, lukejr addressed it well "I think it is
likely all this additional work/delays will be considered unacceptable
to your library/security teams, thus using the bundled/embedded
LevelDB is probably the best solution."

>> MIPS has been failing recently, but no one has looked into it yet.
>> Perhaps it's not worth developers efforts yet, but at some point the
>> technology should reach a point it can be redistributed.
>
> MIPS (and any other big endian architecture) has *always* failed on the
> Satoshi codebase, and will not be supported until someone has time to dedicate
> to fixing the numerous little-endian assumptions in the code. I have an
> incomplete port, but it isn't very high on my priority list to figure out what
> else it's missing.

To be clear, bitcoind/bitcoin-qt is only built on little endian machines
https://buildd.debian.org/status/package.php?p=bitcoin

> Debian could probably get away with packaging Bitcoin-Qt and bitcoind as-is
> with no modifications, and not have any problems. It's only when you begin
> making modifications that it becomes a problem. There are also some concerns
> that it puts a much larger price on compromising Debian's build servers and/or
> repositories (suddenly the attacker can steal a LOT of money).

The only current modification is to use system leveldb instead of the
packaged leveldb. (There is also a patch porting libmemenv.a to
several other architectures, but that is only used in test suites - so
it shouldn't pose a risk to users).

>
> The official binaries are not simply built by upstream developers: using
> Gitian, *anyone* can produce bit-for-bit identical binaries. Official releases
> are only published after 3 or more people have done an independent compile and
> signed the output. It would be excellent if the whole of Debian could work
> toward achieving this level of security eventually, which would make
> distributing Bitcoin node software much safer as well.

Ironically, debian (in general) doesn't trust upstream security
maintenance of third part libraries - that's why they typically get
dropped in favor of use system libraries.

In this case, upstream doesn't trust (rightfully) that some future
debian security team bug fix to a stable library won't be tested
properly against bitcoin, causing problems for users (since bitcoin
might expect buggy library behavior).


I'm not the original packager or maintainer - I just came across the
package in really bad shape and helped bring it to something
reasonable and have done the most recent uploads (since 0.8, I
believe). Since updated libraries could pose a security risk because
bitcoin may expect buggy behavior, I think that is a good argument for
debian to use the included library. However, I'm just a recent helper
- I still want to hear what people who have been doing this for longer
think.

~Scott



From zooko at zooko.com  Wed Jul 24 02:35:28 2013
From: zooko at zooko.com (zooko)
Date: Wed, 24 Jul 2013 06:35:28 +0400
Subject: [Bitcoin-development] Linux packaging letter
In-Reply-To: <CAAS2fgTxU4fb6n+fHPomOVDkEY+uoepd7QTPMxbxALYm2Sf3kg@mail.gmail.com>
References: <CANEZrP2GvgZP_1z3EoSs3p+db7tZB6JfEVAewLpGE5eRpGgR3w@mail.gmail.com>
	<smumwpcg8sw.fsf@linuxpal.mit.edu>
	<CAAS2fgTxU4fb6n+fHPomOVDkEY+uoepd7QTPMxbxALYm2Sf3kg@mail.gmail.com>
Message-ID: <20130724023526.GD1009@zooko.com>

Folks:

With all due respect, I think the letter as I see it at
https://docs.google.com/document/d/1naenR6N6fMWSpHM0f4jpQhYBEkCEQDbLBs8AXC19Y-o/edit#heading=h.i7tz3gqh65mi
should be changed before being shown to package maintainers. I think some
package maintainers might perceive this version of the letter as high-handed --
telling someone else how to do their job -- and they might not notice the
actual facts included in the letter explaining why Bitcoin really *is*
different than a lot of software.

You should understand that without a careful read, this letter sounds much like
a cry that packagers have heard from hundreds of other authors who say things
to the effect that "my software is different and more important and packager
maintainers have to do things my way".

Why not solicit the cooperation of a few package maintainers and write a joint
letter with them signing on? Instead of it being a one-sided lecture from
Bitcoin devs to packagers, it would be a shared statement *and* packagers, and
it would be phrased in language that would make it instantly clear to other
packagers that this isn't just another whine from ignorant devs.

If you're interested in that, there are lots of packagers who would be happy to
help. Greg Troxel (pkgsrc) is one, who has already posted to this thread. I'd
be happy to invite the ones that I've worked with to package the software that
I am a dev on -- Tahoe-LAFS.

What I'm proposing is that we contact some packagers and say "Here's this rough
draft, and we'd like you to suggest edits that would make it into the kind of
letter that you'd sign your name to.". At the very least, we'd learn something
from the ensuing conversation.

Regards,

Zooko



From gmaxwell at gmail.com  Wed Jul 24 03:19:31 2013
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Tue, 23 Jul 2013 20:19:31 -0700
Subject: [Bitcoin-development] Linux packaging letter
In-Reply-To: <20130724023526.GD1009@zooko.com>
References: <CANEZrP2GvgZP_1z3EoSs3p+db7tZB6JfEVAewLpGE5eRpGgR3w@mail.gmail.com>
	<smumwpcg8sw.fsf@linuxpal.mit.edu>
	<CAAS2fgTxU4fb6n+fHPomOVDkEY+uoepd7QTPMxbxALYm2Sf3kg@mail.gmail.com>
	<20130724023526.GD1009@zooko.com>
Message-ID: <CAAS2fgQJ6B5q4xmB-UfC=jeiYDkqxK71oTvtp7MqHXRn43duTQ@mail.gmail.com>

On Tue, Jul 23, 2013 at 7:35 PM, zooko <zooko at zooko.com> wrote:
> I think some
> package maintainers might perceive this version of the letter as high-handed --
> telling someone else how to do their job -- and they might not notice the
> actual facts included in the letter explaining why Bitcoin really *is*
> different than a lot of software.

Bummer, because this was a explicit consideration while writing it and
a concern several people had with the initial draft Mike did.

We're very much aware that upstreams frequently cry (wolf) at the
mutilation of their unique and precious snowflake.

The intention was that second paragraph acknowledging the many good
motivations for the existing norms and the third paragraph talking
about consensus systems would address these concerns? showing that we
aren't totally clueless, and pointing out that we have an actually
unusual situation. In intermediate drafts they were longer and more
elaborate, but we were struggling against length and trying to avoid
delving into a highly technical discussion which would lose anyone who
wasn't already very interested.

We also compromised on an initial approach of "please don't package
this at all" to "please understand first", in part at the protest of
our gentoo package (which also bundles leveldb but hard locks it to an
exact version in the package system with exact build flags, which is a
sophisticated compromise which might not generalize to other
distributors) maintainer (uh, Luke-Jr, not exactly the most
representative sample).

As a first step it's at least important to know that there is a
concern here shared by a bunch of people. Helping talk people through
understanding it is part of the job here.  I certainly didn't expect
the discussion to stop with the letter but getting it out there is a
way to start the discussion and make it more likely that we have it
again with the next packager who comes around.

I guess the first priority though is avoiding gratuitously offending
people.  Can anyone point out any specific tweaks that would reduce
initial bristling?

On Tue, Jul 23, 2013 at 6:45 PM, Douglas Huff <dhuff at jrbobdobbs.org> wrote:
> Honestly, until I read the quoted part of your response,

Oh be nice. If any of this were easy it would all be _done_ already. :)

There is naturally some tension when people with different priorities
and backgrounds interact, ... I've seen a lot of upstreams run into
disagreements with packagers the result is usually better for
everyone.



From w at grabhive.com  Wed Jul 24 03:54:25 2013
From: w at grabhive.com (Wendell)
Date: Wed, 24 Jul 2013 05:54:25 +0200
Subject: [Bitcoin-development] Endianness (was: Linux packaging letter)
In-Reply-To: <8A6BD408-352F-4346-AF81-3C63BD0ED93B@jrbobdobbs.org>
References: <CANEZrP2GvgZP_1z3EoSs3p+db7tZB6JfEVAewLpGE5eRpGgR3w@mail.gmail.com>
	<CANg8-dAzc2ENivTpr6S=zoUkfGyBM6j=OUb8-_wLTFQqLRmnzw@mail.gmail.com>
	<8A6BD408-352F-4346-AF81-3C63BD0ED93B@jrbobdobbs.org>
Message-ID: <10A07C03-7BAF-4312-9D43-827D03034EAE@grabhive.com>

Forking for curiosity's sake:

Is there a substantial barrier to endian independence in the Bitcoin codebase?

-wendell

grabhive.com | twitter.com/grabhive

On Jul 24, 2013, at 3:45 AM, Douglas Huff wrote:

> The fact that you're even trying to package and/or at some point have packaged and shipped big endian binaries is straight up *NEGLIGENT.*




From luke at dashjr.org  Wed Jul 24 04:03:24 2013
From: luke at dashjr.org (Luke-Jr)
Date: Wed, 24 Jul 2013 04:03:24 +0000
Subject: [Bitcoin-development] Endianness (was: Linux packaging letter)
In-Reply-To: <10A07C03-7BAF-4312-9D43-827D03034EAE@grabhive.com>
References: <CANEZrP2GvgZP_1z3EoSs3p+db7tZB6JfEVAewLpGE5eRpGgR3w@mail.gmail.com>
	<8A6BD408-352F-4346-AF81-3C63BD0ED93B@jrbobdobbs.org>
	<10A07C03-7BAF-4312-9D43-827D03034EAE@grabhive.com>
Message-ID: <201307240403.25516.luke@dashjr.org>

On Wednesday, July 24, 2013 3:54:25 AM Wendell wrote:
> Is there a substantial barrier to endian independence in the Bitcoin
> codebase?

I got the obvious stuff ('endian' branch in my repo), but it still didn't work 
when I moved on. I haven't had time to try to figure out why not yet.

Luke



From gmaxwell at gmail.com  Wed Jul 24 04:07:37 2013
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Tue, 23 Jul 2013 21:07:37 -0700
Subject: [Bitcoin-development] Endianness (was: Linux packaging letter)
In-Reply-To: <10A07C03-7BAF-4312-9D43-827D03034EAE@grabhive.com>
References: <CANEZrP2GvgZP_1z3EoSs3p+db7tZB6JfEVAewLpGE5eRpGgR3w@mail.gmail.com>
	<CANg8-dAzc2ENivTpr6S=zoUkfGyBM6j=OUb8-_wLTFQqLRmnzw@mail.gmail.com>
	<8A6BD408-352F-4346-AF81-3C63BD0ED93B@jrbobdobbs.org>
	<10A07C03-7BAF-4312-9D43-827D03034EAE@grabhive.com>
Message-ID: <CAAS2fgTxJTbOiUE1ueA8HD7fFimTx-QgWD2yLmbH1Y41i_Hp4g@mail.gmail.com>

On Tue, Jul 23, 2013 at 8:54 PM, Wendell <w at grabhive.com> wrote:
> Forking for curiosity's sake:
> Is there a substantial barrier to endian independence in the Bitcoin codebase?

Not really. The software was originally written to write out memory
order to and from the wire, which is part of why the protocol is LE
everywhere, so fixing that much is pretty typical endianness fixes.
There is an extra kink in that almost everything Bitcoin sends and
receives is an authenticated data structure? the stuff gets hashed for
authentication.  So that simply swizzling the byte order on
immediately on input isn't enough because sometimes you'll go on to
hash that data and it can't be in memory order for that.

Luke gave an initial crack at it a long time ago:
http://gitorious.org/~Luke-Jr/bitcoin/luke-jr-bitcoin/commits/endian
But it wasn't enough yet.

Seems like its just enough of an undertaking that absent a really good
reason to care about it no real progress in fixing it is happening.



From gmaxwell at gmail.com  Wed Jul 24 04:09:01 2013
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Tue, 23 Jul 2013 21:09:01 -0700
Subject: [Bitcoin-development] Endianness (was: Linux packaging letter)
In-Reply-To: <CAAS2fgTxJTbOiUE1ueA8HD7fFimTx-QgWD2yLmbH1Y41i_Hp4g@mail.gmail.com>
References: <CANEZrP2GvgZP_1z3EoSs3p+db7tZB6JfEVAewLpGE5eRpGgR3w@mail.gmail.com>
	<CANg8-dAzc2ENivTpr6S=zoUkfGyBM6j=OUb8-_wLTFQqLRmnzw@mail.gmail.com>
	<8A6BD408-352F-4346-AF81-3C63BD0ED93B@jrbobdobbs.org>
	<10A07C03-7BAF-4312-9D43-827D03034EAE@grabhive.com>
	<CAAS2fgTxJTbOiUE1ueA8HD7fFimTx-QgWD2yLmbH1Y41i_Hp4g@mail.gmail.com>
Message-ID: <CAAS2fgRP1BDufTZGwFUfeB1TEBiKEm0Mxn0kka1kd1Oioivv8A@mail.gmail.com>

On Tue, Jul 23, 2013 at 9:07 PM, Gregory Maxwell <gmaxwell at gmail.com> wrote:
> order to and from the wire, which is part of why the protocol is LE
> everywhere,
*before someone corrects me, it's not LE everywhere (I meant
"manywhere" :P)? there is just enough BE to keep you on your toes. :P



From mike at plan99.net  Wed Jul 24 08:28:16 2013
From: mike at plan99.net (Mike Hearn)
Date: Wed, 24 Jul 2013 10:28:16 +0200
Subject: [Bitcoin-development] Linux packaging letter
In-Reply-To: <CAAS2fgQJ6B5q4xmB-UfC=jeiYDkqxK71oTvtp7MqHXRn43duTQ@mail.gmail.com>
References: <CANEZrP2GvgZP_1z3EoSs3p+db7tZB6JfEVAewLpGE5eRpGgR3w@mail.gmail.com>
	<smumwpcg8sw.fsf@linuxpal.mit.edu>
	<CAAS2fgTxU4fb6n+fHPomOVDkEY+uoepd7QTPMxbxALYm2Sf3kg@mail.gmail.com>
	<20130724023526.GD1009@zooko.com>
	<CAAS2fgQJ6B5q4xmB-UfC=jeiYDkqxK71oTvtp7MqHXRn43duTQ@mail.gmail.com>
Message-ID: <CANEZrP00vN0TFsxnpSO3RoC_aiAbGS9LG9KXM1+KqWRv8YsJXg@mail.gmail.com>

Yeah, if anyone wants to make the letter more digestable please do propose
an alternative, although by this point it's probably not worth it as people
have already signed.

FWIW, Gregory is right that my original draft was much more brusque. The
pain in the packaging relationship travels both ways. I have in the past
wasted a lot of time due to bogus packaging applied by non-expert packagers
that broke things. In fact the project I was a part of adopted a policy of
automatically closing bug reports from people who were using distributor
packages (any distro) because the quality was so inconsistent and so many
subtle bugs were introduced.

If packagers hear upstreams cry about packaging a lot, I think you should
keep an open mind that some of them probably know what they're talking
about. We really shouldn't have to beg and cajole here. Saying "we have our
reasons and we want you to stop" should be enough.




On Wed, Jul 24, 2013 at 5:19 AM, Gregory Maxwell <gmaxwell at gmail.com> wrote:

> On Tue, Jul 23, 2013 at 7:35 PM, zooko <zooko at zooko.com> wrote:
> > I think some
> > package maintainers might perceive this version of the letter as
> high-handed --
> > telling someone else how to do their job -- and they might not notice the
> > actual facts included in the letter explaining why Bitcoin really *is*
> > different than a lot of software.
>
> Bummer, because this was a explicit consideration while writing it and
> a concern several people had with the initial draft Mike did.
>
> We're very much aware that upstreams frequently cry (wolf) at the
> mutilation of their unique and precious snowflake.
>
> The intention was that second paragraph acknowledging the many good
> motivations for the existing norms and the third paragraph talking
> about consensus systems would address these concerns? showing that we
> aren't totally clueless, and pointing out that we have an actually
> unusual situation. In intermediate drafts they were longer and more
> elaborate, but we were struggling against length and trying to avoid
> delving into a highly technical discussion which would lose anyone who
> wasn't already very interested.
>
> We also compromised on an initial approach of "please don't package
> this at all" to "please understand first", in part at the protest of
> our gentoo package (which also bundles leveldb but hard locks it to an
> exact version in the package system with exact build flags, which is a
> sophisticated compromise which might not generalize to other
> distributors) maintainer (uh, Luke-Jr, not exactly the most
> representative sample).
>
> As a first step it's at least important to know that there is a
> concern here shared by a bunch of people. Helping talk people through
> understanding it is part of the job here.  I certainly didn't expect
> the discussion to stop with the letter but getting it out there is a
> way to start the discussion and make it more likely that we have it
> again with the next packager who comes around.
>
> I guess the first priority though is avoiding gratuitously offending
> people.  Can anyone point out any specific tweaks that would reduce
> initial bristling?
>
> On Tue, Jul 23, 2013 at 6:45 PM, Douglas Huff <dhuff at jrbobdobbs.org>
> wrote:
> > Honestly, until I read the quoted part of your response,
>
> Oh be nice. If any of this were easy it would all be _done_ already. :)
>
> There is naturally some tension when people with different priorities
> and backgrounds interact, ... I've seen a lot of upstreams run into
> disagreements with packagers the result is usually better for
> everyone.
>
>
> ------------------------------------------------------------------------------
> See everything from the browser to the database with AppDynamics
> Get end-to-end visibility with application monitoring from AppDynamics
> Isolate bottlenecks and diagnose root cause in seconds.
> Start your free trial of AppDynamics Pro today!
> http://pubads.g.doubleclick.net/gampad/clk?id=48808831&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130724/c24730dd/attachment.html>

From pete at petertodd.org  Wed Jul 24 09:42:55 2013
From: pete at petertodd.org (Peter Todd)
Date: Wed, 24 Jul 2013 05:42:55 -0400
Subject: [Bitcoin-development] Distributing low POW headers
In-Reply-To: <CAE-z3OX+Uzw_diW97yKWGzVMBFZHq2t+w15jNSdGMGqwyJ65yQ@mail.gmail.com>
References: <CAE-z3OX+Uzw_diW97yKWGzVMBFZHq2t+w15jNSdGMGqwyJ65yQ@mail.gmail.com>
Message-ID: <20130724094255.GB12568@savin>

On Tue, Jul 23, 2013 at 12:27:03PM +0100, Tier Nolan wrote:
> I was thinking about a change to the rules for distinguishing between forks
> and maybe a BIP..

Please provide equations and data justifying the 'magic constants' in
this proposal.

Currently we do not relay blocks to peers if they conflict with blocks
in the best known chain. What changes exactly are you proposing to that
behavior?

> *Summary*
> 
> - Low POW headers should be broadcast by the network
> 
> If a header has more than 1/64 of the POW of a block, it should be
> broadcast.  This provides information on which fork is getting most of the
> hashing power.
> 
> - Miners should use the header information to decide on longest chain
> 
> The fork selection rule for miners should be biased towards staying on the
> fork that has the most hashing power.
> 
> This means that they might keep hashing on a fork that is 1-2 blocks
> shorter.
> 
> If most miners follow the rule, then it is the best strategy for other
> miners to also follow this rule.
> 
> - Advantages
> 
> This lowers the probability of natural and malicious reversals.
> 
> *Distributing low POW headers*
> 
> First block header messages that have more than 1/64 of the standard POW
> requirements would be forwarded.
> 
> This means the client needs to maintain a short term view of the entire
> header tree.
> 
> if (header extends header tree) {
>   if (header meets full POW) {
>     add to header tree;
>     forward to peers;
>     check if any blocks in storage now extend the header tree
>   } else {
>     if (header meets POW / 64) {
>       forward to peers;
>     }
> } else {
>   if (header meets POW) {
>     add to orphan header storage
>   }
> }
> 
> The storage could be limited and headers could be discarded after a while.
> 
> This has the extra advantage that it informs clients of forks that are
> receiving hashing power.
> 
> This could be linked to a protocol version to prevent disconnects due to
> invalid header messages.
> 
> *Determining the longest chain*
> 
> Each link would get extra credit for headers received.
> 
> Assume there are 2 forks starting at block A as the fork point.
> 
> A(63) <- B(72) <- C(37) <- D(58)
> 
> and
> 
> A(63) <- B'(6) <- C'(9) <- D'(4) <- E(7) <- F(6)
> 
> The numbers in brackets are the number of low POW headers received that
> have those blocks as parent.
> 
> The new rule is that the POW for a block is equal to
> 
> POW * (1 + (headers / 16))
> 
> Only headers within <some threshold> of the end of the (shorter) chain
> count.  However, in most cases, that doesn't matter since the fork point
> will act as the start point.  As long as miners keep headers for 30-40
> blocks, they will likely have all headers back to any reasonable fork point.
> 
> This means that the top fork is considered longer, since it has much more
> headers, even though it has 2 less blocks.
> 
> If 75% of the miners follow this rule, then the top fork will eventually
> catch up and win, so it is in the interests of the other 25% to follow the
> rule too.
> 
> Even if there isn't complete agreement on headers received, the fork that
> is getting the most hashing will naturally gain most of the headers, so
> ties will be broken quickly.

-- 
'peter'[:-1]@petertodd.org
000000000000001e1c3393788031c4e427b67cfd1b5e90a3b0de4fff094b2894
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 490 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130724/ac3bedaa/attachment.sig>

From tier.nolan at gmail.com  Wed Jul 24 11:55:33 2013
From: tier.nolan at gmail.com (Tier Nolan)
Date: Wed, 24 Jul 2013 12:55:33 +0100
Subject: [Bitcoin-development] Distributing low POW headers
In-Reply-To: <20130724094255.GB12568@savin>
References: <CAE-z3OX+Uzw_diW97yKWGzVMBFZHq2t+w15jNSdGMGqwyJ65yQ@mail.gmail.com>
	<20130724094255.GB12568@savin>
Message-ID: <CAE-z3OWBoMz6jC36Bp+dGqj6jHiWj1d1zGtH+iBbLcCt_6kNJw@mail.gmail.com>

On Wed, Jul 24, 2013 at 10:42 AM, Peter Todd <pete at petertodd.org> wrote:

> Please provide equations and data justifying the 'magic constants' in
> this proposal.
>

The are a range of workable values.  Ideally, there would first need to be
agreement on the general principle.

Distributing headers with 1/64 of the standard POW means that a header
would be broadcast approximately once every 9 seconds (assuming a 10 minute
block time).  This was picked because sending 80 byte headers every 9
seconds shouldn't represent much load on the network.

The second magic number is how much credit to give for mini-headers.
Setting it at 1/16 means that the headers will be worth around 4 times as
much as a block (since there would be around 63 low POW headers for each
full POW one).

This creates an incentive for miners to take headers into account.  If all
the headers were worth less than a full block, then a fork which was losing
would suddenly be winning if a block is found.  A fork will only become the
main chain due to a new block, if it is within 16 mini-confirms.

Miners don't have to mine against the absolute best fork, but they do need
to make sure they stay within 16 of the best one (so if they find a block,
that block would be considered part of the main chain).  Some hysteresis
might be helpful.  The rule could be to only switch unless the current fork
is losing by at least 4 mini-confirms.

In most cases, this won't be a problem, since orphans don't happen that
often anyway.

Since it isn't a chain, this doesn't give the full benefits of a 9 second
block, but it should bring things to consensus faster.  6 full confirms
would be much more secure against random and hostile reversals.

It doesn't have the risks of 9 second blocks in causing network collapse,
since it isn't a chain, the headers are short, and there is no
confirmations of the required (other than checking the hash).

Each "mini" confirms adds to the strength of leaf blocks of the tree.  If
there is a tie, and 20% of the network is mining one block and 80% is
mining the other, the mining power of the network will be split until the
next block arrives.

With mini confirms, the entire network is aware of the 2 blocks (since the
headers would be forwarded) and the mini-confirms would show which one has
majority hashing power.

The least risk option would be to make them purely advisory.  The proposal
takes it further than that.

The proposal means that if the network is split 80/20, then miners should
stick with the 80% fork, even if the 20% fork wins the race for the next
block.

Winning a few rounds is easier than wining many rounds worth of
mini-confirms.

The key is that as long as the honest miners stay on the main chain, they
will eventually overwhelm any rewrite attack with less than 50% of the
mining power.  This is a system to agree on what is the main chain in the
face of a re-write attack.


>
> Currently we do not relay blocks to peers if they conflict with blocks
> in the best known chain. What changes exactly are you proposing to that
> behavior?
>

The (sub) proposal is that headers would still be broadcast.  The blocks
would not be forwarded.

If a header extends the header tree, meets full POW and is "near" the end
of the chain, then it is broadcast.  This means that all nodes will have
the entire header tree, including orphans.

The full blocks would only be sent if they extend the main chain.

Second, if a header builds on a header that is in the header tree, then it
is broadcast, even if it doesn't meet full POW (only 1/64 required).  This
gives information on which fork is getting the most power.

It gives information about potential "consensus loss" forks, where a
significant number of miners are following an alternative chain.

In fact, this is probably worth doing as an initial step.

A warning could be displayed on the client if a fork is getting more than
15% of the hashing power.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130724/bbae3ccf/attachment.html>

From jgarzik at bitpay.com  Wed Jul 24 13:52:33 2013
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Wed, 24 Jul 2013 09:52:33 -0400
Subject: [Bitcoin-development] Linux packaging letter
In-Reply-To: <CANEZrP00vN0TFsxnpSO3RoC_aiAbGS9LG9KXM1+KqWRv8YsJXg@mail.gmail.com>
References: <CANEZrP2GvgZP_1z3EoSs3p+db7tZB6JfEVAewLpGE5eRpGgR3w@mail.gmail.com>
	<smumwpcg8sw.fsf@linuxpal.mit.edu>
	<CAAS2fgTxU4fb6n+fHPomOVDkEY+uoepd7QTPMxbxALYm2Sf3kg@mail.gmail.com>
	<20130724023526.GD1009@zooko.com>
	<CAAS2fgQJ6B5q4xmB-UfC=jeiYDkqxK71oTvtp7MqHXRn43duTQ@mail.gmail.com>
	<CANEZrP00vN0TFsxnpSO3RoC_aiAbGS9LG9KXM1+KqWRv8YsJXg@mail.gmail.com>
Message-ID: <CAJHLa0OrYZbPCBfuuLLj4rCj45WvEgqaH5YS=Zr1i9i+m6hPTg@mail.gmail.com>

On Wed, Jul 24, 2013 at 4:28 AM, Mike Hearn <mike at plan99.net> wrote:
> Yeah, if anyone wants to make the letter more digestable please do propose
> an alternative, although by this point it's probably not worth it as people
> have already signed.

I'm working on a more digestable alternative:
https://gist.github.com/jgarzik/6065679

Should be ready in another ~24 hours, as its obviously incomplete
right now.  Alas the publishing of the lame version (which yes, I did
ACK) didn't give me time to finish my version.

I worked on Fedora packaging while at Red Hat, so hopefully, I have a
bit of insight here.  Was also thinking about publishing this on
opensource.com.

-- 
Jeff Garzik
Senior Software Engineer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From zooko at zooko.com  Wed Jul 24 15:32:52 2013
From: zooko at zooko.com (zooko)
Date: Wed, 24 Jul 2013 19:32:52 +0400
Subject: [Bitcoin-development] Linux packaging letter
In-Reply-To: <CAJHLa0OrYZbPCBfuuLLj4rCj45WvEgqaH5YS=Zr1i9i+m6hPTg@mail.gmail.com>
References: <CANEZrP2GvgZP_1z3EoSs3p+db7tZB6JfEVAewLpGE5eRpGgR3w@mail.gmail.com>
	<smumwpcg8sw.fsf@linuxpal.mit.edu>
	<CAAS2fgTxU4fb6n+fHPomOVDkEY+uoepd7QTPMxbxALYm2Sf3kg@mail.gmail.com>
	<20130724023526.GD1009@zooko.com>
	<CAAS2fgQJ6B5q4xmB-UfC=jeiYDkqxK71oTvtp7MqHXRn43duTQ@mail.gmail.com>
	<CANEZrP00vN0TFsxnpSO3RoC_aiAbGS9LG9KXM1+KqWRv8YsJXg@mail.gmail.com>
	<CAJHLa0OrYZbPCBfuuLLj4rCj45WvEgqaH5YS=Zr1i9i+m6hPTg@mail.gmail.com>
Message-ID: <20130724153251.GE1009@zooko.com>

On Wed, Jul 24, 2013 at 09:52:33AM -0400, Jeff Garzik wrote:
> 
> I'm working on a more digestable alternative:
> https://gist.github.com/jgarzik/6065679

Hi Jeff! Thanks for working on it. Even if that letter
(https://gist.github.com/jgarzik/6065679) doesn't supplant
https://docs.google.com/a/leastauthority.com/document/d/1naenR6N6fMWSpHM0f4jpQhYBEkCEQDbLBs8AXC19Y-o/edit#heading=h.i7tz3gqh65mi
as a message-to-packagers, it looks like it will still turn out to be a useful
text.

My first question about it is this part:

"""
 Make a mistake, lose $1 billion

The consequences of bitcoin consensus failure are very high, comparable to avionics or medical device software. As of this writing, over $1 billion of value depends on bitcoin software being able to reliably achieve consensus over the worldwide Internet. This is the digital equivalent of Fort Knox: consensus must be achieved, or bitcoin has no value.
"""

This makes it sound like if, for example, Debian were to link bitcoind to the
system leveldb, and then upgrade the system leveldb to fix a bug that affects
bitcoind, that this would spell the end of Bitcoin.

I hope that's not true!

I'd like to try to be more specific about two things:

1. What is the behavior that a dependency or a patch could cause that would be
problematic? I liked what Luke-Jr said earlier in this thread -- that in some
cases a bitcoin node (i.e. a bitcoind process) needs certain bugs or
limitations in order to maintain consensus with other bitcoin nodes. Maybe you
could use a statement like that, without attempting to explain in *what* cases
that applies.

2. What is the consequence if this goes wrong? This is something I don't
understand as well. I think the answer is:

   2.a. All bitcoin nodes which encounter one of these cases and are
        differently-buggy than the upstream bitcoind form their own consensus,
        causing a blockchain fork.

   2.b. There is a risk of double-spending attacks.

   2.c. The process for healing a blockchain fork is not very smooth or
        well-understood.

Regards,

Zooko



From zooko at zooko.com  Wed Jul 24 16:01:12 2013
From: zooko at zooko.com (zooko)
Date: Wed, 24 Jul 2013 20:01:12 +0400
Subject: [Bitcoin-development] Linux packaging letter
In-Reply-To: <CANEZrP00vN0TFsxnpSO3RoC_aiAbGS9LG9KXM1+KqWRv8YsJXg@mail.gmail.com>
References: <CANEZrP2GvgZP_1z3EoSs3p+db7tZB6JfEVAewLpGE5eRpGgR3w@mail.gmail.com>
	<smumwpcg8sw.fsf@linuxpal.mit.edu>
	<CAAS2fgTxU4fb6n+fHPomOVDkEY+uoepd7QTPMxbxALYm2Sf3kg@mail.gmail.com>
	<20130724023526.GD1009@zooko.com>
	<CAAS2fgQJ6B5q4xmB-UfC=jeiYDkqxK71oTvtp7MqHXRn43duTQ@mail.gmail.com>
	<CANEZrP00vN0TFsxnpSO3RoC_aiAbGS9LG9KXM1+KqWRv8YsJXg@mail.gmail.com>
Message-ID: <20130724160111.GF1009@zooko.com>

On Wed, Jul 24, 2013 at 10:28:16AM +0200, Mike Hearn wrote:
> Yeah, if anyone wants to make the letter more digestable please do propose
> an alternative, although by this point it's probably not worth it as people
> have already signed.

Okay, here's my attempt:

https://docs.google.com/document/d/1m3wyBIjqwPQ3wxVT7P_wJtdWt9a9RXvt9NV7rggLAOs/edit#

Please feel free to use any or all of it as you see fit.

> FWIW, Gregory is right that my original draft was much more brusque. The
> pain in the packaging relationship travels both ways. I have in the past
> wasted a lot of time due to bogus packaging applied by non-expert packagers
> that broke things. In fact the project I was a part of adopted a policy of
> automatically closing bug reports from people who were using distributor
> packages (any distro) because the quality was so inconsistent and so many
> subtle bugs were introduced.
> 
> If packagers hear upstreams cry about packaging a lot, I think you should
> keep an open mind that some of them probably know what they're talking
> about. We really shouldn't have to beg and cajole here. Saying "we have our
> reasons and we want you to stop" should be enough.

Yes, I know what you mean.

Regards,

Zooko



From gmaxwell at gmail.com  Wed Jul 24 19:35:45 2013
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Wed, 24 Jul 2013 12:35:45 -0700
Subject: [Bitcoin-development] Linux packaging letter
In-Reply-To: <20130724153251.GE1009@zooko.com>
References: <CANEZrP2GvgZP_1z3EoSs3p+db7tZB6JfEVAewLpGE5eRpGgR3w@mail.gmail.com>
	<smumwpcg8sw.fsf@linuxpal.mit.edu>
	<CAAS2fgTxU4fb6n+fHPomOVDkEY+uoepd7QTPMxbxALYm2Sf3kg@mail.gmail.com>
	<20130724023526.GD1009@zooko.com>
	<CAAS2fgQJ6B5q4xmB-UfC=jeiYDkqxK71oTvtp7MqHXRn43duTQ@mail.gmail.com>
	<CANEZrP00vN0TFsxnpSO3RoC_aiAbGS9LG9KXM1+KqWRv8YsJXg@mail.gmail.com>
	<CAJHLa0OrYZbPCBfuuLLj4rCj45WvEgqaH5YS=Zr1i9i+m6hPTg@mail.gmail.com>
	<20130724153251.GE1009@zooko.com>
Message-ID: <CAAS2fgRO4ngp=XJ3FN=TSmLkVguewQXCzK9Oqb68CSeKanW8ug@mail.gmail.com>

On Wed, Jul 24, 2013 at 8:32 AM, zooko <zooko at zooko.com> wrote:
> This makes it sound like if, for example, Debian were to link bitcoind to the
> system leveldb, and then upgrade the system leveldb to fix a bug that affects
> bitcoind, that this would spell the end of Bitcoin.

Maybe!  A widespread consensus failure causes people to lose money
even absent malice. How much depends on a bunch of details, including
the luck of attackers.

The total ramifications are as much social as they are technical so
it's hard to reason over the outcomes beyond "at a minimum, it's not
good".

A really bad splitting event could results in large amounts of Bitcoin
being stolen through reversals. Obviously the system itself would keep
on ticking once the issue was resolved... but if millions of dollars
at recent prices in coins were stolen,  would people want to keep
using it?

The most dire outcomes are (very?) unlikely, but they're not necessary
to recognize that risk mitigation is important.

It's good to be careful here just to avoid the bad outcomes we are
sure will happen (because we've experienced them before):   Hundreds
of dollars worth of coin income 'lost' per minute to miners on the
losing side of a 50/50 fork, hours long disruption of the lives of
dozens of people in the Bitcoin technical ecosystem (many of whom are
volunteer OSS developers), hours of disruption (no payments processed)
to Bitcoin users and businesses.  These are the best case outcomes in
a substantial non-transient hard forking event.

I think one of the challenges in talking about this stuff is correctly
framing these risks.  Bitcoin is a novel technology that lacks a lot
of the recourse that other systems have? No Bitcoin central bank to
create a bit of inflation to paper over a glitch,  eliminating those
kinds of centralized "fixes" is much of the point, after all?  so with
the idea of starry eyed people taking out second mortgages on their
kids kidneys to buy up coin clearly in my mind I do think it's
important to be clear about the full range of risk:  It's _possible_
that due to some amazing sequences of technical screwups that by next
week most everyone could consider Bitcoin worthless. I think it's
important to be frank about those risks.  ... but it's also not good
to be chicken little, calling doom on anyone who wants to change the
color of the GUI. :P   Navigating it is hard, and generally I'd prefer
that if there is any misunderstanding people overestimate the risks a
little? so long as things stay in the realm of the possible? rather
than underestimate them.



From gdt at work.lexort.com  Sat Jul 27 00:43:00 2013
From: gdt at work.lexort.com (Greg Troxel)
Date: Fri, 26 Jul 2013 20:43:00 -0400
Subject: [Bitcoin-development] Linux packaging letter
References: <CANEZrP2GvgZP_1z3EoSs3p+db7tZB6JfEVAewLpGE5eRpGgR3w@mail.gmail.com>
	<smumwpcg8sw.fsf@linuxpal.mit.edu>
	<CAAS2fgTxU4fb6n+fHPomOVDkEY+uoepd7QTPMxbxALYm2Sf3kg@mail.gmail.com>
Message-ID: <smuzjt8u92j.fsf@linuxpal.mit.edu>

Gregory Maxwell <gmaxwell at gmail.com> writes:

> It's "portable" to anything that can run the relevant VMs.  Uh
> provided you don't mind cross compiling everything from an unbuntu VM.
>  It certainly would be nice if the trusted-computing-base for gitian
> were a bit smaller, thats an area for long term improvement for sure.

Thanks - I'll look forward to this being portable someday.  Right now it
sounds similar to "a windows binary but you can use wine" with
substitution of variables :-) People may want to look at the NetBSD
build system, which I think achieves bit-identical builds from different
hosts (but I haven't really checked), by having the toolchain be part of
the source and building cross-compilers from host to target and then
using those to build the system.

> Say Bitcoin used a backing database which had an unknown a bug where
> any item with a key that begins with 0xDEADBEEF returns not found when
> queried, even if its in the DB. Once discovered, any database library
> would want to fix that quickly and they'd fix it in a point release
> without reservation. They might not even release note that particular
> fix it if went along with some others, it could even be fixed
> accidentally.
>
> Now say that we have a state where half the Bitcoin network is running
> the old buggy version, and half is running the fixed version.  Someone
> creates a transaction with ID 0xDEADBEEF...  and then subsequently
> spends the output of that transaction. This could be by pure chance or
> it could be a malicious act.
>
> To half the network that spending transaction looks like someone
> spending coin from nowhere, a violation of the rules.  The consensus
> would then fork, effectively partitioning the network.  On each fork
> any coin could be spent twice, and the fork will only be resolvable by
> one side or the other abandoning their state (generally the more
> permissive side would need to be abandoned because the permissive one
> is tolerant of the restrictive one's behavior) by manually downgrading
> or patching software.  As a result of this parties who believed some
> of their transactions were safely settled would find them reversed by
> people who exploited the inconsistent consensus.

Thanks for the explanation - that indeed makes sense.

>> multiple packages is difficult, and runs into A wants only n of C, while
>> B wants only m.
>
> My understanding is that gentoo is actually able to handle this (and
> does, for Bitcoin)? and really I presume just about everything else
> could with enough effort. I certainly wouldn't ask anyone else to do
> that.  If you're really getting into the rathole of building separate
> libraries just for Bitcoin the value of packaging it goes away.

Well, if you insist on not having updates and bugfixes, then either it's
the included version or there's a special package just for you.
Typically packaging systems don't like included versions because often a
package will have a security bug fixed long before there are updates of
packages that bundle that fixed version.    But given bitcoin's special
needs, that means you have to stay on top of these dependent included
packages and re-release if there are security fixes (that don't break
consensus).

> Running a complete set of tests is a start? though the unit tests are
> not and cannot be adequate. There is a full systems testing harnesses
> which should be used on new platforms.  Even that though isn't really
> adequate, as it is currently infeasible to even achieve complete test
> coverage in things like cryptographic libraries and database
> environments.

It would be nice if the regression tests were installed and it were
normal culturallly for end-users to run them.


Thanks again for the explanation; I understand where you are coming from
now.




From gdt at work.lexort.com  Sat Jul 27 00:45:46 2013
From: gdt at work.lexort.com (Greg Troxel)
Date: Fri, 26 Jul 2013 20:45:46 -0400
Subject: [Bitcoin-development] Linux packaging letter
References: <CANEZrP2GvgZP_1z3EoSs3p+db7tZB6JfEVAewLpGE5eRpGgR3w@mail.gmail.com>
	<smumwpcg8sw.fsf@linuxpal.mit.edu>
	<CAAS2fgTxU4fb6n+fHPomOVDkEY+uoepd7QTPMxbxALYm2Sf3kg@mail.gmail.com>
	<20130724023526.GD1009@zooko.com>
	<CAAS2fgQJ6B5q4xmB-UfC=jeiYDkqxK71oTvtp7MqHXRn43duTQ@mail.gmail.com>
	<CANEZrP00vN0TFsxnpSO3RoC_aiAbGS9LG9KXM1+KqWRv8YsJXg@mail.gmail.com>
Message-ID: <smuvc3wu8xx.fsf@linuxpal.mit.edu>

Mike Hearn <mike at plan99.net> writes:

> If packagers hear upstreams cry about packaging a lot, I think you should
> keep an open mind that some of them probably know what they're talking
> about. We really shouldn't have to beg and cajole here. Saying "we have our
> reasons and we want you to stop" should be enough.

Asserting without explaining isn't going to work; lots of people think
their code is more special than it is, and most of these claims are
unwarranted.  But, there is a good explanation for the bitcoin case.




From pete at petertodd.org  Sat Jul 27 23:49:18 2013
From: pete at petertodd.org (Peter Todd)
Date: Sat, 27 Jul 2013 19:49:18 -0400
Subject: [Bitcoin-development] Two factor wallet with one-time-passwords
Message-ID: <20130727234918.GA11635@savin>

Gavin Andresen recently suggested a design for a wallet protected by
two-factor authentication via one-time-passwords with the aid of a
third-party service to counter-sign 2-of-2 protected wallets.(1) The
design is useful when the user can't sign transactions on a second
device, such as a phone, but can provide one-time-passwords. (possibly
generated on a smart phone or stored on paper) However involving a
third-party has privacy and availability risks. Here is an alternate
design, also using one-time-passwords, that removes the requirement for
a third-party, along with other advantages and disadvantages.


User experience
===============

The user has a wallet with a separate balances for savings and a smaller
day-to-day spending amount. Transactions spending the day-to-day balance
do not need two-factor authorization, while spending the savings balance
does. As the day-to-day balance becomes low the user is able to top it
up by authorizing the movement of discrete multiples of some amount from
savings to spending. That authorization requires one one-time-password
per multiple being moved.


Implementation
==============

Savings use P2SH outputs matching the following scriptPubKey form:

HASH160 <H(nonce_i)> EQUALVERIFY <pubkey> CHECKSIG

spent with:

<sig> <nonce_i>

The way the pubkey/seckey is generated is unimportant, although some
kind of deterministic scheme is preferable. Nonces on the other hand are
generated deterministically using a counter-based one-time-password
scheme that takes some secret seed and an integer i.  A large number of
H(nonce_n) are generated in advance and moved to the computer holding
the wallet. (generating them on that computer is also possible, but
obviously risks the secret seed being compromised)

A brute-force attack to spend a signed txout requires the attacker to
find a preimage, thus the security level is the number of bits for the
nonce; 64 bits is sufficient. (remember the birthday attack doesn't
apply here) Unfortunately the most popular one-time-password scheme, the
RFC6238 used in Google Authenticator, only outputs six digits numbers,
well below the security level required. (Google Auth is generally used
in a time-mode, but also has a counter mode)

The older RFC2289 however turns the passwords into six words from a 2048
entry wordlist, giving a 64-bit nonce with 2-bits of checksum. RFC2289
implementations are also well suited to paper print-outs and generally
make it easy to do so. RFC2289 as written uses SHA1, however the
suspected vulnerabilities in SHA1 are partial-preimage collisions, not
relevant in this application.

In a sense the user is now acting as an oracle answering the question of
whether or not funds should be allowed to move from savings to spending,
without being responsible for where those funds are allowed to go. As
described in (2) it is easy to create a whole range of conditions by
using multiple nonces if the use-case demanded. For instance a corporate
environment may want multiple parties to be required to authorize the
funds to move, possible with multiple nonces.

It's interesting to note how in some cases it may be preferable that the
authorization is simply authorization to spend without any other
involvement. Here the party acting as an oracle not only doesn't need to
know where funds are going but can even authorize the spend in advance
without two-way communication - possibly even prior to the funds being
received in the first place. This authorization can be easily given
manually, for instance over the phone, and the accounting to keep track
of the total amount authorized can be easily done with pen and paper -
something not possible with CHECKMULTISIG wallets.


Funding the wallet
==================

As with any multi-party wallet receiving funds must also be handled
carefully to ensure an attacker can't fool the user into giving the
sender the wrong address. This requires the involvement of all parties
required to authorize an outgoing payment. In addition here the
protection only works if funds sent to the wallet are split up into the
discrete authorization amounts the user wishes. (possibly with more than
one amount level)

There hasn't been as much thought put into these systems as there has
been on payment protocols between a customer and a merchant, but the
basic idea is to have more than one device participate in the generation
of payment request signed somehow. For fund splitting the request can be
that the funds are paid to multiple txouts in one go.  For recurring
payments the request could have some mechanism for multiple addresses to
be specified for future use. Fall-back to a standard multi-signature
wallet is possible as well.

More research is needed.


1) https://gist.github.com/gavinandresen/5616606
2) https://bitcointalk.org/index.php?topic=260898.msg2804469#msg2804469

-- 
'peter'[:-1]@petertodd.org
000000000000006447c7d824b1952ba36ad1f34351be6904c30247591156460c
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 490 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130727/fbcf95af/attachment.sig>

From pete at petertodd.org  Sun Jul 28 01:20:08 2013
From: pete at petertodd.org (Peter Todd)
Date: Sat, 27 Jul 2013 21:20:08 -0400
Subject: [Bitcoin-development] Two factor wallet with one-time-passwords
In-Reply-To: <20130727234918.GA11635@savin>
References: <20130727234918.GA11635@savin>
Message-ID: <20130728012008.GA19958@savin>

On Sat, Jul 27, 2013 at 07:49:18PM -0400, Peter Todd wrote:
> Implementation
> ==============
> 
> Savings use P2SH outputs matching the following scriptPubKey form:
> 
> HASH160 <H(nonce_i)> EQUALVERIFY <pubkey> CHECKSIG
> 
> spent with:
> 
> <sig> <nonce_i>

FWIW with some minor scripting language additions such as access to txin
and txout contents, along with merklized abstract syntax tree (MAST)
support, we can even implement a version where scriptPubKey's can be
reused:

    <pubkey> CHECKSIGVERIFY

    // Verify we aren't spending more than the maximum spend amount
    0 GET-TXIN-VALUE      // relative indexing
    0 GET-TXOUT-VALUE
    SUB
    <max-spend-amount>
    LESSTHAN
    VERIFY

    // If the txout is greater than the maximum spend amount force it to
    // also follow these same rules.
    0 GET-TXOUT-VALUE
    <max-spend-amount>
    LESSTHAN
    IFNOT
        GET-THIS-SCRIPT
        MAST-HASH
        <serialized script "MAST-HASH MAST-EVAL">
        CAT
        GET-TXOUT-SCRIPT
        EQUALVERIFY
    ENDIF

    // Hash the provided oracle nonce, saving original for later.
    DUP
    HASH160

    // Use the txid:vout nonce as an index to a table, embedded with MAST
    // script compression.
    0 GET-TXIN-TXID
    0 GET-TXIN-VOUT
    CAT
    HASH160

    // The table, n=64 levels deep, not all levels shown for brevity.
    DUP
    1
    AND
    IF
        1
        RSHIFT
        DUP
        1
        AND
        IF
            1
            RSHIFT
            DUP
            1
            AND
            IF
                <MAST digest, not executed>
            ELSE
                1
                RSHIFT
                DUP
                1
                AND
                IF
                    // Lowest level contains the following pushdata,
                    // with 0 <= i < 2^64
                    <HASH160(HASH160(nonce-secret + i))>
                ELSE
                    <MAST digest, not executed>
                ENDIF
        ELSE
            <MAST digest, not executed>
        ENDIF
    ELSE
        <MAST digest, not executed>
    ENDIF

    // Drop the txid:vout nonce
    SWAP
    DROP

    // Verify that the hash of the nonce and the pre-committed value in
    // the H(nonce) table match.
    EQUALVERIFY

    // Stack now only contains the nonce preceeded by a merkle path linking
    // that nonce to the tip of a merkle tree over all nonces.
    //
    // Verify that path.
    SWAP // Move direction flag to the top
    IF
        SWAP
    ENDIF
    HASH160
    (repeat above five lines 63 more times)

    <nonce-merkle-tree-tip-digest>
    EQUAL

The scriptPubKey is spent by the following scriptSig:

    <nonce-merkle-path-0>...<nonce-merkle-path-63>
    <nonce>
    <signature>
    <serialized-script>

(note that I've left off a number of possible optimizations for clarity)

Now when the user wishes to spend a txout greather than their spending
limit their wallet software will first give them a short 6 word string
calculated from the last 64-bits of H(txid:vout). They simply enter this
string into their phone, ideally via convenient qr-code or voice/thought
recognition, and their phone provides a second short 6 word string to
enter into the wallet software on their computer, authorizing the
payment. If they opt for a paper-based one-time-password table they
simply use the 6 word string as an index to their pre-printed OTP
encyclopedia set.

Like the previously described version the security level is still a
healthy 2^64 - again the attacker needs to find a 64-bit pre-image,
considered to be a highly difficult task for any attacker unable to
count from 0 to 2^64 or store a table containing 2^64 values.

There is the disadvantage of the large storage requirements for both
wallets, however because of the double hashed construction,
H(H(nonce-secret+i)), neither table needs to be kept secret. Thus
without loss of security both tables can be easily stored in a
distributed hash table in the cloud and queried as needed.

-- 
'peter'[:-1]@petertodd.org
0000000000000012199fe3f1f54921e8e11c0b0d318ed6245dee22a4ad55bc65
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 490 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130727/3cfc9e58/attachment.sig>

From john.dillon892 at googlemail.com  Sun Jul 28 18:21:44 2013
From: john.dillon892 at googlemail.com (John Dillon)
Date: Sun, 28 Jul 2013 18:21:44 +0000
Subject: [Bitcoin-development] Linux packaging letter
In-Reply-To: <CAAS2fgR7evOkrTpX75EQgJzuDUBqGOKCAvWJR_5T64REOJmJ8A@mail.gmail.com>
References: <CANEZrP2GvgZP_1z3EoSs3p+db7tZB6JfEVAewLpGE5eRpGgR3w@mail.gmail.com>
	<CAAS2fgT+GPgOtvvrjKozYc-Swqw-+HPcyZY5MbqvY9oEhiWRuA@mail.gmail.com>
	<CANEZrP2hn3oXp4CU7-85vpSLc_3GGnRgfQNKDc+28jkB2DE2JA@mail.gmail.com>
	<CAAS2fgR7evOkrTpX75EQgJzuDUBqGOKCAvWJR_5T64REOJmJ8A@mail.gmail.com>
Message-ID: <CAPaL=UWsZ1xAgqSC==FzT3xEi1J6-qw4mYmnL0vycq5ipC0v7g@mail.gmail.com>

My signature:

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256

Linux distribution packaging and Bitcoin
========================================
2013-07-23

This note summarises the dangers inherent in the Linux distribution
packaging model for Bitcoin, and forms a request from upstream
maintainers to not distribute Bitcoin node software as part of
distribution package repositories without understanding the special
requirements of Bitcoin.

Distributors typically unbundle internal libraries and apply other
patches for a variety of generally good reasons, including ensuring
that security-critical fixes can be applied once, rather than multiple
times for many different packages. In most cases, the common
distribution packaging policy has many advantages.

However, Bitcoin nodes are an unusual category of software: they
implement a complex group consensus in which every client verifies the
behaviour of every other exactly. Even an exceptionally subtle change -
including apparently harmless bugfixes - can cause a failure to reach
consensus. A consensus failure of one client is a security risk to the
user of that client. A significant number of nodes failing to reach
consensus - as happened in March 2013 due to a change in database
libraries[1] - is a critical problem that threatens the functionality
and security of the system for all users.

For this reason, it is _vital_ that as much of the network as possible
uses _unmodified_ implementations that have been carefully audited and
tested, including dependencies. For instance, if the included copy
of LevelDB in bitcoind is replaced by a system-wide shared library,
_any_ change to that shared library requires auditing and testing,
a requirement generally not met by standard distributor packaging
practices.

Because distributed global consensus is a new area of computer science
research, the undersigned request that distributors refrain from
packaging Bitcoin node software (including bitcoind and Bitcoin-Qt)
and direct users to the upstream-provided binaries instead _until they
understand the unique testing procedures and other requirements to
achieve consensus_. Beyond being globally consistent, upstream binaries
are produced using a reproducible build system[2], ensuring that they
can be audited for backdoors.

1. https://en.bitcoin.it/wiki/BIP_0050
2. http://gitian.org/

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.11 (GNU/Linux)

iQEcBAEBCAAGBQJR9WC5AAoJEEWCsU4mNhiPg6UH/2oHzBWBPaQMhH/GCTHQEi5U
7GSRfqwihIs/M2ROHLNq0HhgWR7mPAh5TTI6+tG95FCGCGNZq0seqw9wW4ZyGCoc
VueY51q4hcn23405oLD/QGK2lDxxywWY8XtFYVPqAzXTq6zRzgpNJkjoRtOAUOP7
3PrRkimYYyj0KrqFg+cEvZDT27dkeX+5PXM6Ua0o7h/TlhR2RJPhej5DI8cNLXgA
f0t+mES4Apb6zLgnEYYlPp22FR9vuFcJO3z1akhVL4DLUMqr58NYHLVnH1FH0Jhn
hVuld159QtCjQ5Qyn19cn86akTQJVi+ikCXqaKriCc2jBFX7TCI8WTDc6aSZpsQ=
=oX5d
-----END PGP SIGNATURE-----



From john.dillon892 at googlemail.com  Sun Jul 28 18:42:26 2013
From: john.dillon892 at googlemail.com (John Dillon)
Date: Sun, 28 Jul 2013 18:42:26 +0000
Subject: [Bitcoin-development] Distributing low POW headers
In-Reply-To: <CAE-z3OWBoMz6jC36Bp+dGqj6jHiWj1d1zGtH+iBbLcCt_6kNJw@mail.gmail.com>
References: <CAE-z3OX+Uzw_diW97yKWGzVMBFZHq2t+w15jNSdGMGqwyJ65yQ@mail.gmail.com>
	<20130724094255.GB12568@savin>
	<CAE-z3OWBoMz6jC36Bp+dGqj6jHiWj1d1zGtH+iBbLcCt_6kNJw@mail.gmail.com>
Message-ID: <CAPaL=UVc0CGvvam0tdxw+4Y8XwSw0Awz8ifv64HYgORJ7zLztg@mail.gmail.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256

On Wed, Jul 24, 2013 at 11:55 AM, Tier Nolan <tier.nolan at gmail.com> wrote:
> Distributing headers with 1/64 of the standard POW means that a header would
> be broadcast approximately once every 9 seconds (assuming a 10 minute block
> time).  This was picked because sending 80 byte headers every 9 seconds
> shouldn't represent much load on the network.

As Peter said, "much" should be quantified.

Remember that there is a statistical distribution here, what is the probability
of how many seconds per headers?

> This creates an incentive for miners to take headers into account.  If all
> the headers were worth less than a full block, then a fork which was losing
> would suddenly be winning if a block is found.  A fork will only become the
> main chain due to a new block, if it is within 16 mini-confirms.

Sounds like you are changing economics and requiring miners to have even better
network connections. This is not a thing to do lightly and it probably a bad
idea.

> Second, if a header builds on a header that is in the header tree, then it
> is broadcast, even if it doesn't meet full POW (only 1/64 required).  This
> gives information on which fork is getting the most power.
>
> It gives information about potential "consensus loss" forks, where a
> significant number of miners are following an alternative chain.
>
> In fact, this is probably worth doing as an initial step.

I understand Pieter Wuille is working on letting Bitcoin propagate and make use
of pure block headers, a step towards SPV and partial UTXO mode.

Orphan measurement would be very useful for a lot of reasons, how about you
think about that first? It wouldn't have the potential data rate issues either
and should be a very simple change. Just set some threshold relative to the
height of the best block where you will not further propagate and orphan
block(header) and prior to that limit do so freely. I believe the change would
be 100% compatible with the P2P protocol as it is based on inventories.
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.11 (GNU/Linux)

iQEcBAEBCAAGBQJR9WXdAAoJEEWCsU4mNhiPBUYIALgg3ylA5mkciT3W/kb+qXCp
spYlPwAU/HVUrd/p6Ra6xAOOa224BE018FHRx7cJ31AQdVPsKhC1XiQCeYMv14Cj
5LstO2VTzxLovfs1lTVnekt+xVo6EHP47Qhmhdfo1AQWHS2njIp2lT9gAlNgMYoI
Twu0FLfJFwg14HlueLhTNvGo3TeVpGhTV3HYTbjWGBuPeroaaPCKKQOy/jmA9mnZ
1x4MjQZ+AkGA3+vrinyRZ1FQsp1pOUZMZx5UFYDOOPS3TysxttiHF/Vkdmy9dNVf
5zbXrEDImlariRnyxCf6sn4Fpu9H9bt6yttCez6NHqAoZCwciXyo+UrZjFawSVg=
=8gci
-----END PGP SIGNATURE-----



From john.dillon892 at googlemail.com  Sun Jul 28 19:11:42 2013
From: john.dillon892 at googlemail.com (John Dillon)
Date: Sun, 28 Jul 2013 19:11:42 +0000
Subject: [Bitcoin-development] Two factor wallet with one-time-passwords
In-Reply-To: <20130728012008.GA19958@savin>
References: <20130727234918.GA11635@savin>
	<20130728012008.GA19958@savin>
Message-ID: <CAPaL=UUQJmLquQJRwQO5FB28-QYFw1q_scU24S0Wr1HQVDu4WQ@mail.gmail.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256

On Sun, Jul 28, 2013 at 1:20 AM, Peter Todd <pete at petertodd.org> wrote:
> FWIW with some minor scripting language additions such as access to txin
> and txout contents, along with merklized abstract syntax tree (MAST)
> support, we can even implement a version where scriptPubKey's can be
> reused:

<snip>

>     // Stack now only contains the nonce preceeded by a merkle path linking
>     // that nonce to the tip of a merkle tree over all nonces.
>     //
>     // Verify that path.
>     SWAP // Move direction flag to the top
>     IF
>         SWAP
>     ENDIF

You missed a 'CAT' opcode here.

>     HASH160
>     (repeat above five lines 63 more times)

<snip>

> payment. If they opt for a paper-based one-time-password table they
> simply use the 6 word string as an index to their pre-printed OTP
> encyclopedia set.

I think you should disclose whether or not you have any ties to the pulp and
paper business... By my calculations the production of a single OTP table would
consume roughly half of all the forest biomass on this planet.

> Like the previously described version the security level is still a
> healthy 2^64 - again the attacker needs to find a 64-bit pre-image,
> considered to be a highly difficult task for any attacker unable to
> count from 0 to 2^64 or store a table containing 2^64 values.
>
> There is the disadvantage of the large storage requirements for both
> wallets, however because of the double hashed construction,
> H(H(nonce-secret+i)), neither table needs to be kept secret. Thus
> without loss of security both tables can be easily stored in a
> distributed hash table in the cloud and queried as needed.

ROTFL!

Your idea is better than you realize, you are just too paranoid for your own
good. The thing is the attacker isn't going to be someone paying you funds over
your minimum spending limit, which means the size of the table deriving which
H(nonce) is selected for a given txid:vout can be significantly smaller. For
instance if you want to have 256 total payments before a 50:50 chance of any
pair using the same nonce, you only need a table with ~2^16 elements or with 20
byte hashes just a megabyte of data. It is the 16 level merkle proofs that are
the problem, 16*21=336 bytes of data in the scriptSig. Then again, that's only
4.5x the size of a single signature, not unreasonable.

Also your nested IF statements, while a lovely and hilarious use of MAST, can
be replaced by simply creating the merkle tree over the tuples [i,H(nonce_i)]
and proving that the nonce_i you provided matched the precommitted tree. Now
you only need to provide one merkle proof, not two.

But don't let me discourage you, rarely do I see elaborate jokes that also meet
the criteria to be a least publishable unit. :)
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.11 (GNU/Linux)

iQEcBAEBCAAGBQJR9WzMAAoJEEWCsU4mNhiP8wIIAJTESdZiIyrfmrJIQad19He0
nPUB1UGdrcRyYBKfk2bxmIgeTppEneISerAzFpfsZk/R1vLSp2zuFvFLMvaTqF0a
nof9dR4ztp753P6O9nLBIK1gcoOagg/FL61Cd1mQzoTjznGioEgk1mCo/Qjb8h9E
I43De70j575bvUkq8RQgijctIt463bM7vfdBC6qtgSziL/xrLUDQEJ6Mhqz3rnmX
+A2+MPHd/aGnRIcBuN6DFQTMXpjXG2y1CIM45e2gPL5x/vSIXqJoJs9tgGyzuFLG
rR34GCsifUKxJyvswG5ue9rNuo5mDkri2jIFx8SlqhfT/b8iWU8JIieoZYGuMiA=
=uhmy
-----END PGP SIGNATURE-----



From john.dillon892 at googlemail.com  Sun Jul 28 19:39:08 2013
From: john.dillon892 at googlemail.com (John Dillon)
Date: Sun, 28 Jul 2013 19:39:08 +0000
Subject: [Bitcoin-development] Opcode whitelist for P2SH?
Message-ID: <CAPaL=UV9ytoDc-0U148QSbtq=QHFAY1N=nV_1h_dRW12F6YVhA@mail.gmail.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256

Peter Todd recently came up with two related, and IMO very good, uses for
non-standard transactions to implement both oracles and one-time-password
protection of wallet funds. While the wallet fund case could be implemented as
only a single standard type, at the cost of generality, the oracle case would
be most useful with more arbitrary rules. More generally it is also useful to
be able to have scriptPubKeys like the following:

    n <pubkey>...<pubkey> m CHECKMULTISIG <master pubkey> CHECKSIG BOOLOR

and many other similar constructions.

What are your thoughts on creating a whitelist for specific opcodes that would
apply to scripts serialized using P2SH, retaining the existing standard
whitelist for scriptPubKeys? (I would still recommend dropping pay-to-pubkey
and pay-to-multisig due to their potential for dumping data in the UTXO set)

I'm thinking it should contain the following opcodes, picked for either being
already used, or having simple semantics:

0 to 75 byte pushdata
PUSHDATA1

1NEGATE
OP 1 to OP16 (numbers are allowed through pushdata anyway)

IF
NOTIF
ELSE
ENDIF
VERIFY
RETURN

TOALTSTACK
FROMALTSTACK (the alt-stack makes stack manipulation in complex ways possible)
DROP
DUP
SWAP

EQUAL
EQUALVERIFY

0NOTEQUAL
BOOLAND
BOOLOR

RIPEMD160
SHA1
SHA256
HASH160
HASH256

CHECKSIG
CHECKSIGVERIFY
CHECKMULTISIG
CHECKMULTISIGVERIFY

Note how this list allows for complex logic, but does not allow for arithmetic,
thus not exposing us to a source of problems in the past.
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.11 (GNU/Linux)

iQEcBAEBCAAGBQJR9XMQAAoJEEWCsU4mNhiPyXoIAMz2YZsq+/YUnq5G5AEVmJL/
D7qrLpuI++auMEDoXzt8CqmXbDqci/d70IsBYeHdZkxBp2dah99iDzwIoBhtO/xh
XR8m4P+FH+IF6xbuTUAQbBQxr9VuymUatUCmsFzP0YbtPwIzJvUAqJkVeYW1DUXj
6pc9EW3iYdhAvpKNU7A19F6FA96y9m9DyBvY3TCHwzf591Ld1S8ghb9dEuKKYMGl
8TuEMMU/bytZkdD590Ww+f6ukeSOMw9C9+IpAKotB2oq4F4Vkwyzw4rd8sNRAa6c
lEDov6UtDSp4ALMfUxw/nxMO8UB43iJhu31KihcjOZpiYvRVeQlM8XLEvAafZvA=
=Jph1
-----END PGP SIGNATURE-----



From tier.nolan at gmail.com  Sun Jul 28 20:07:34 2013
From: tier.nolan at gmail.com (Tier Nolan)
Date: Sun, 28 Jul 2013 21:07:34 +0100
Subject: [Bitcoin-development] Distributing low POW headers
In-Reply-To: <CAPaL=UVc0CGvvam0tdxw+4Y8XwSw0Awz8ifv64HYgORJ7zLztg@mail.gmail.com>
References: <CAE-z3OX+Uzw_diW97yKWGzVMBFZHq2t+w15jNSdGMGqwyJ65yQ@mail.gmail.com>
	<20130724094255.GB12568@savin>
	<CAE-z3OWBoMz6jC36Bp+dGqj6jHiWj1d1zGtH+iBbLcCt_6kNJw@mail.gmail.com>
	<CAPaL=UVc0CGvvam0tdxw+4Y8XwSw0Awz8ifv64HYgORJ7zLztg@mail.gmail.com>
Message-ID: <CAE-z3OVTyR1cn31kHJWd=ZUQCwcgX8UdSeZsTMRTeDuDLctz3w@mail.gmail.com>

On Sun, Jul 28, 2013 at 7:42 PM, John Dillon
<john.dillon892 at googlemail.com>wrote:

> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA256
>
> On Wed, Jul 24, 2013 at 11:55 AM, Tier Nolan <tier.nolan at gmail.com> wrote:
> > Distributing headers with 1/64 of the standard POW means that a header
> would
> > be broadcast approximately once every 9 seconds (assuming a 10 minute
> block
> > time).  This was picked because sending 80 byte headers every 9 seconds
> > shouldn't represent much load on the network.
>
> As Peter said, "much" should be quantified.
>

It has the same statistic properties as normal blocks just 64 times faster.

Even if there is a new block 30 seconds after the previous one, that
doesn't cause a burst of 64 low POW block headers in the 30 second window.
They are all statistically independent hashing attempts.


> Sounds like you are changing economics and requiring miners to have even
> better
> network connections. This is not a thing to do lightly and it probably a
> bad
> idea.
>

No, it just breaks ties.  In most cases there would be only 1 contender
block, so all miners are equal.

If 10% of blocks were ties/orphans, then only 1% of blocks would be a 3-way
tie.  That probably overestimates the orphan rate.

This means the miner has to download 2 blocks 10% of the time and 3 blocks
1% of the time.

However, even then, half the network wouldn't have to download the 2nd
block of the tie, since they happened to get the winner first.  This means
5% extra bandwidth on average.

16 low POW headers at 9 seconds per header is more than 2 minutes for a
miner to switch to the other contender.

A miner would only lose out if he doesn't notice that block he is mining
against is not getting built on by anyone else.

He needs to download both tied blocks so that he can switch, but he has 2
minutes to actually switch.

I understand Pieter Wuille is working on letting Bitcoin propagate and make
> use
> of pure block headers, a step towards SPV and partial UTXO mode.
>

That would need to happen before low POW ones are broadcast.  There is a
basic set of rules in the first post.

At the moment, the client only provides headers when asked, but never
broadcasts them.


> Orphan measurement would be very useful for a lot of reasons, how about you
> think about that first?


I think distributing the low POW headers on an advisory basis a reasonable
first step.  However, just broadcasting the headers is a zeroth step.

Miners would probably break ties towards the block that seems to be getting
the most hashing anyway.

I think for orphan rate, the best is to have a system to link to orphans.
This would add the POW of the orphan to the main chain's total.

Unfortunately adding fields to the header is hard.  It could be done as a
coinbase extra-nonce thing.  A better option would be if the merkle tree
could include non-transactions.

The merkle root could be replaced by hash(auxiliary header).  This has the
advantage of not impacting ASIC miners.

Broadcasting all headers would at least allow clients to count orphans,
even if they aren't integrated into the block chain.

It wouldn't have the potential data rate issues either
> and should be a very simple change.


I don't think the data rate is really that high.  It would be 80 bytes
every 9 seconds, or 9 bytes per second.

Blocks are 500kB every 10 minutes, or 853 bytes per second.


> Just set some threshold relative to the
> height of the best block where you will not further propagate and orphan
> block(header) and prior to that limit do so freely. I believe the change
> would
> be 100% compatible with the P2P protocol as it is based on inventories.
>

Right absolutely.  Headers of blocks that add to the block tree within
recent history should be forwarded.

The inv system would need to be tweaked, since it can only say block and
transaction.

A block header field would allow the node to say that it only has the
header.  Alternatively, it would reply with a header message to the
getblocks message.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130728/ab4d2f59/attachment.html>

From luke at dashjr.org  Mon Jul 29 05:17:53 2013
From: luke at dashjr.org (Luke-Jr)
Date: Mon, 29 Jul 2013 05:17:53 +0000
Subject: [Bitcoin-development] Opcode whitelist for P2SH?
In-Reply-To: <CAPaL=UV9ytoDc-0U148QSbtq=QHFAY1N=nV_1h_dRW12F6YVhA@mail.gmail.com>
References: <CAPaL=UV9ytoDc-0U148QSbtq=QHFAY1N=nV_1h_dRW12F6YVhA@mail.gmail.com>
Message-ID: <201307290517.54624.luke@dashjr.org>

On Sunday, July 28, 2013 7:39:08 PM John Dillon wrote:
> What are your thoughts on creating a whitelist for specific opcodes that
> would apply to scripts serialized using P2SH, retaining the existing
> standard whitelist for scriptPubKeys? (I would still recommend dropping
> pay-to-pubkey and pay-to-multisig due to their potential for dumping data
> in the UTXO set)

This would be reasonable for miners, but for interoperability between wallets, 
some specific standard forms would still be necessary without a much smarter 
solver (which would then expand the code required to implement a wallet, which 
is unfortunate if not entirely necessary).



From jgarzik at bitpay.com  Mon Jul 29 06:00:10 2013
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Mon, 29 Jul 2013 02:00:10 -0400
Subject: [Bitcoin-development] Opcode whitelist for P2SH?
In-Reply-To: <201307290517.54624.luke@dashjr.org>
References: <CAPaL=UV9ytoDc-0U148QSbtq=QHFAY1N=nV_1h_dRW12F6YVhA@mail.gmail.com>
	<201307290517.54624.luke@dashjr.org>
Message-ID: <CAJHLa0Oe4YT+DnEiVxN_tykMQ8YPtyKTf3K7kb0B-9CHoHSy7g@mail.gmail.com>

On Mon, Jul 29, 2013 at 1:17 AM, Luke-Jr <luke at dashjr.org> wrote:
> On Sunday, July 28, 2013 7:39:08 PM John Dillon wrote:
>> What are your thoughts on creating a whitelist for specific opcodes that
>> would apply to scripts serialized using P2SH, retaining the existing
>> standard whitelist for scriptPubKeys? (I would still recommend dropping
>> pay-to-pubkey and pay-to-multisig due to their potential for dumping data
>> in the UTXO set)
>
> This would be reasonable for miners, but for interoperability between wallets,
> some specific standard forms would still be necessary without a much smarter
> solver (which would then expand the code required to implement a wallet, which
> is unfortunate if not entirely necessary).

Indeed.  Current designs are all based around pattern matching a
script template.  Satoshi even described lightweight clients as
needing no script engine at all, only the ability to match patterns.

-- 
Jeff Garzik
Senior Software Engineer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From pete at petertodd.org  Mon Jul 29 07:41:31 2013
From: pete at petertodd.org (Peter Todd)
Date: Mon, 29 Jul 2013 03:41:31 -0400
Subject: [Bitcoin-development] Opcode whitelist for P2SH?
In-Reply-To: <CAJHLa0Oe4YT+DnEiVxN_tykMQ8YPtyKTf3K7kb0B-9CHoHSy7g@mail.gmail.com>
References: <CAPaL=UV9ytoDc-0U148QSbtq=QHFAY1N=nV_1h_dRW12F6YVhA@mail.gmail.com>
	<201307290517.54624.luke@dashjr.org>
	<CAJHLa0Oe4YT+DnEiVxN_tykMQ8YPtyKTf3K7kb0B-9CHoHSy7g@mail.gmail.com>
Message-ID: <20130729074131.GA23180@savin>

On Mon, Jul 29, 2013 at 02:00:10AM -0400, Jeff Garzik wrote:
> On Mon, Jul 29, 2013 at 1:17 AM, Luke-Jr <luke at dashjr.org> wrote:
> > On Sunday, July 28, 2013 7:39:08 PM John Dillon wrote:
> >> What are your thoughts on creating a whitelist for specific opcodes that
> >> would apply to scripts serialized using P2SH, retaining the existing
> >> standard whitelist for scriptPubKeys? (I would still recommend dropping
> >> pay-to-pubkey and pay-to-multisig due to their potential for dumping data
> >> in the UTXO set)
> >
> > This would be reasonable for miners, but for interoperability between wallets,
> > some specific standard forms would still be necessary without a much smarter
> > solver (which would then expand the code required to implement a wallet, which
> > is unfortunate if not entirely necessary).
> 
> Indeed.  Current designs are all based around pattern matching a
> script template.  Satoshi even described lightweight clients as
> needing no script engine at all, only the ability to match patterns.

We're talking about two use-cases here: wallets protected by
authorization tokens for multi-factor security, and allowing funds to be
controlled by oracles that attest that events have happened allowing the
funds to move.

The latter application especially demands a specialized wallet, yet can
only possibly work with non-standard script formats.

IMO bringing the issue of wallet standardization into this discussion is
kinda silly and premature; if you don't want to use those features, then
you're wallet can ignore them. As for the people that are, they can come
up with appropriate standards for their needs.

After all John's suggesting only allowing the loosened IsStandard()
rules within P2SH, so until the txout is spent all *any* wallet sees is
a P2SH address with no information as to what scriptPubKey is needed to
spend it.

-- 
'peter'[:-1]@petertodd.org
00000000000000220b76f98fc9414043f765ec48dba3fb556e096caffbaae8ec
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 490 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130729/f6500b5f/attachment.sig>

From pete at petertodd.org  Mon Jul 29 08:13:55 2013
From: pete at petertodd.org (Peter Todd)
Date: Mon, 29 Jul 2013 04:13:55 -0400
Subject: [Bitcoin-development] Opcode whitelist for P2SH?
In-Reply-To: <CAPaL=UV9ytoDc-0U148QSbtq=QHFAY1N=nV_1h_dRW12F6YVhA@mail.gmail.com>
References: <CAPaL=UV9ytoDc-0U148QSbtq=QHFAY1N=nV_1h_dRW12F6YVhA@mail.gmail.com>
Message-ID: <20130729081355.GB23180@savin>

On Sun, Jul 28, 2013 at 07:39:08PM +0000, John Dillon wrote:
> Peter Todd recently came up with two related, and IMO very good, uses for
> non-standard transactions to implement both oracles and one-time-password
> protection of wallet funds. While the wallet fund case could be implemented as
> only a single standard type, at the cost of generality, the oracle case would
> be most useful with more arbitrary rules. More generally it is also useful to
> be able to have scriptPubKeys like the following:
> 
>     n <pubkey>...<pubkey> m CHECKMULTISIG <master pubkey> CHECKSIG BOOLOR
> 
> and many other similar constructions.
> 
> What are your thoughts on creating a whitelist for specific opcodes that would
> apply to scripts serialized using P2SH, retaining the existing standard
> whitelist for scriptPubKeys? (I would still recommend dropping pay-to-pubkey
> and pay-to-multisig due to their potential for dumping data in the UTXO set)

One subtlety of what you are proposing is that we should still retain
the IsStandard() check, or to be exact the AreInputsStandard() check, if
a P2SH serialized script follows a standard form.

The reason is transaction mutability. Right now other than BIP11
CHECKMULTISIG only miners can mutate transactions because any change to
the scriptSig will render the transaction non-standard. As you know this
is a good thing because it means unconfirmed transaction chains don't
get broken in flight.

BIP11 is an interesting case because CHECKMULTISIG consumes one extra
stack item, so when you spend a BIP11 n <pubkey>...<pubkey> m
CHECKMULTISIG scriptPubKey you have to provide an additional item prior
to the signatures; usually OP_0 is used.

But we don't actually check that! You can put anything there provided it
doesn't make the scriptSig go over the standard allowed scriptSig size
of 500 bytes; for instance I (ab)used that feature just now to timestamp
my Litecoin v0.8.3.6 audit report SHA256 hash:

d0dfe270e8e8e4c0196f780d42e34d8a1121f2f8a249586aa1a2c5ebcada10b1

in transaction:

15bb08318335f94a8de154dc39b03db2cdebcc7a96ab6cec0379978676d00301

It's been suggested that we consider transactions non-standard, or just
now allowed at all in a future soft-fork, if at the end of execution
there is more than one stack item left; a opcode whitelist should
probably do this. On the other hand I've come up with some soft-fork
upgrade mechanisms that would leave extra items on the stack for
non-upgraded nodes, suggesting a soft-fork imposing this is a bad idea.
(though note how it suggests considering such tx's non-standard is
reasonable in a few ways)

CHECKMULTISIG isn't helped here because the value really is ignored - a
soft-fork to force it to always be zero might not be a bad idea, though
it's far from the only example of mutability.

I'd be interested if you can come up with an example where imposing a
one stack item at the end of execution rule causes problems.


More generally, and getting a bit off topic, I think Bitcoin should have
been designed so that CHECKSIG signed hashes of scriptPubKeys, rather
than txid:vout outputs, so that malleability wouldn't affect the
validity of a signature. Of course, this would mean that signatures
could be reused if scriptPubKeys were reused, but address re-use is a
bad thing anyway! Not that I'll fault Satoshi here, type 2 deterministic
wallets were unknown back then. (though we should be careful that a
future CHECKSIG design can go back to txid:vout references - ECC is
unique in allowing for type 2 wallets)

-- 
'peter'[:-1]@petertodd.org
0000000000000053ef658095fb45c7a86955d70c76b44264c7abce79683a8a90
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 490 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130729/06f51fbd/attachment.sig>

From rdohm321 at gmail.com  Tue Jul 30 05:01:02 2013
From: rdohm321 at gmail.com (Randolph D.)
Date: Tue, 30 Jul 2013 07:01:02 +0200
Subject: [Bitcoin-development] BitMail - p2p Email 0.1. beta
Message-ID: <CAEvNM8=yQn8sE4Lrf5+xedfm4RomBkBVhVWOdFFXxPEk7wZYDw@mail.gmail.com>

http://bitmail.sourceforge.net/


   - Secure P2P Email from Friend to Friend without relying on a central
   server.
   - Key- / Repleo-Exchange.
   - Full decentral Email-Network using the Echo Protocol.
   - Store Email for Offline-Friends in the P2P Network.
   - Chat and Instant Messaging is build in. Define & Add your friends.
   - Strong e2e Multi-Encryption (PGP-kind/AES over SSL: using
libgcrypt<http://www.gnu.org/software/libgcrypt/>).

   - Libspoton Integration.
   - Additional Security Layer with the GB-Feature for Emails.
   - Preventing Data Retention (VDS). WoT-less.
   - HTTP & HTTPS Connections.
   - Open Source. BSD License.

anyone with a Server? Key?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130730/a149c342/attachment.html>

From gmaxwell at gmail.com  Tue Jul 30 06:50:12 2013
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Mon, 29 Jul 2013 23:50:12 -0700
Subject: [Bitcoin-development] BitMail - p2p Email 0.1. beta
In-Reply-To: <CAEvNM8=yQn8sE4Lrf5+xedfm4RomBkBVhVWOdFFXxPEk7wZYDw@mail.gmail.com>
References: <CAEvNM8=yQn8sE4Lrf5+xedfm4RomBkBVhVWOdFFXxPEk7wZYDw@mail.gmail.com>
Message-ID: <CAAS2fgS=5ju1BFFDkjoRW65qdtojm3rYBHZcSMtUmHhyaTxMhA@mail.gmail.com>

On Mon, Jul 29, 2013 at 10:01 PM, Randolph D. <rdohm321 at gmail.com> wrote:
> Secure P2P Email from Friend to Friend without relying on a central server.
> Key- / Repleo-Exchange.
> Full decentral Email-Network using the Echo Protocol.
> Store Email for Offline-Friends in the P2P Network.
> Chat and Instant Messaging is build in. Define & Add your friends.
> Strong e2e Multi-Encryption (PGP-kind/AES over SSL: using libgcrypt).
> Libspoton Integration.
> Additional Security Layer with the GB-Feature for Emails.
> Preventing Data Retention (VDS). WoT-less.
> HTTP & HTTPS Connections.
> Open Source. BSD License.
>
> anyone with a Server? Key?

Keep safe everyone:

A number of apparent sock accounts has been posting about what appears
to be the same software under the name "goldbug" for a couple days
now:

e.g.
https://lists.torproject.org/pipermail/tor-talk/2013-July/029107.html
https://lists.torproject.org/pipermail/tor-talk/2013-July/029125.html
http://lists.gnupg.org/pipermail/gnupg-users/2013-July/047137.html



From mike at plan99.net  Tue Jul 30 08:40:45 2013
From: mike at plan99.net (Mike Hearn)
Date: Tue, 30 Jul 2013 10:40:45 +0200
Subject: [Bitcoin-development] BitMail - p2p Email 0.1. beta
In-Reply-To: <CAAS2fgS=5ju1BFFDkjoRW65qdtojm3rYBHZcSMtUmHhyaTxMhA@mail.gmail.com>
References: <CAEvNM8=yQn8sE4Lrf5+xedfm4RomBkBVhVWOdFFXxPEk7wZYDw@mail.gmail.com>
	<CAAS2fgS=5ju1BFFDkjoRW65qdtojm3rYBHZcSMtUmHhyaTxMhA@mail.gmail.com>
Message-ID: <CANEZrP2+jOTHsEv+qXpqLKJS3UATB_so2ZwQdL+AyJTd2zti4A@mail.gmail.com>

For people who are interested in such technologies, I recommend looking at
Pond:

https://pond.imperialviolet.org/

It is written by Adam Langley, so it comes with some serious credentials
behind it. It provides asynchronous email-like messaging that's forward
secure, resistant to traffic analysis and the whole thing runs over Tor.
Messages are stored for a week and are strictly limited in size. There's no
spam because nobody has an address - instead you have to grant someone the
ability to message you by giving them a small file. So, not really intended
as an email competitor convenience wise, but it has many interesting ideas
and a reasonable GUI.

As a testament to the seriousness with which Pond takes forward security,
it can use the NVRAM in a TPM chip to reliably destroy keys for data that
an SSD device might have otherwise made un-erasable.

The main downside - it's written in Go :)


On Tue, Jul 30, 2013 at 8:50 AM, Gregory Maxwell <gmaxwell at gmail.com> wrote:

> On Mon, Jul 29, 2013 at 10:01 PM, Randolph D. <rdohm321 at gmail.com> wrote:
> > Secure P2P Email from Friend to Friend without relying on a central
> server.
> > Key- / Repleo-Exchange.
> > Full decentral Email-Network using the Echo Protocol.
> > Store Email for Offline-Friends in the P2P Network.
> > Chat and Instant Messaging is build in. Define & Add your friends.
> > Strong e2e Multi-Encryption (PGP-kind/AES over SSL: using libgcrypt).
> > Libspoton Integration.
> > Additional Security Layer with the GB-Feature for Emails.
> > Preventing Data Retention (VDS). WoT-less.
> > HTTP & HTTPS Connections.
> > Open Source. BSD License.
> >
> > anyone with a Server? Key?
>
> Keep safe everyone:
>
> A number of apparent sock accounts has been posting about what appears
> to be the same software under the name "goldbug" for a couple days
> now:
>
> e.g.
> https://lists.torproject.org/pipermail/tor-talk/2013-July/029107.html
> https://lists.torproject.org/pipermail/tor-talk/2013-July/029125.html
> http://lists.gnupg.org/pipermail/gnupg-users/2013-July/047137.html
>
>
> ------------------------------------------------------------------------------
> Get your SQL database under version control now!
> Version control is standard for application code, but databases havent
> caught up. So what steps can you take to put your SQL databases under
> version control? Why should you start doing it? Read more to find out.
> http://pubads.g.doubleclick.net/gampad/clk?id=49501711&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130730/d5fbfe8d/attachment.html>

From b at grabhive.com  Tue Jul 30 12:01:39 2013
From: b at grabhive.com (Bazyli Zygan)
Date: Tue, 30 Jul 2013 14:01:39 +0200
Subject: [Bitcoin-development] Tor and Bitcoin
Message-ID: <FB36762E8B574F7AAB7D25618841CF01@grabhive.com>

Hi everyone,

We at Hive had plans to make our wallet proxy through Tor by default. When it became apparent that this was not presently possible because bitcoinj lacks SOCKS support, it opened a minor discussion suggesting that this is perhaps not advisable practice for SPV wallets in the first place. To quote Mike Hearn:

> I think you have to be careful with Tor and Bitcoin. It isn't a no-brainer move. Virtually all people today don't have hacked internet connections. However when you connect outbound from Tor you have to pretty much assume your traffic is being packet logged and sometimes automatically MITMd by exit nodes, which in turn means you can be transparently connected to a sybil network. If you connect to a hidden service the issue is less problematic because you're authenticating the connection and can pick peers you have reason to believe are independent.
> 
> Whilst it's unlikely an attacker would actually try to auto-sybil SPV connections made out of a Tor exit node, if they did, they could make the person connecting out believe in fake pending/unconfirmed transactions. For instance if you're meeting with someone to do a currency trade and you happen to run an exit node that has a lot of bandwidth and an exit policy that allows only Bitcoin, there's a chance the other persons Tor client will pick your exit. You can then swap the cash, give them a fake transaction and when it doesn't confirm, apologise and say you can't wait and have to go. Walk out with the cash and it'll take a while for the victim to realize that the transaction never did actually get broadcast at all, it was just an illusion.
> 
> (this scenario worries me for mobile clients but instead of tor, the issue is an attacker controlled open wifi hotspot).
> 
> I think to support Tor really well [in bitcoinj], we'd need not only to make SOCKS work, but also add a way to use hidden peers and then try and come up with an anti-sybil heuristic. Unfortunately it's unclear what such a heuristic would look like. Bitcoin-Qt uses different /16s as a rule of thumb when on the clearnet, but no such technique is usable on Tor because by definition you aren't supposed to know anything about the hidden peers.

While the scenario outlined seems unlikely, it's best to be prepared... What do you all think? How can this be done properly?

As we said to Mike, if Thailand has actually made Bitcoin illegal, then packet filtering may not be far off for certain regions, and it would nice to be proactive and prepared. At the moment, Thailand already has cruder, URL-based filtering... But vendors like Cisco are no doubt constantly selling them on the virtues of more advanced censorship technologies.

Gregory Maxwell is the person who wrote the hidden service support for bitcoind, right? It might be interesting to get his comments here. 

/b

grabhive.com (http://grabhive.com) | twitter.com/grabhive (http://twitter.com/grabhive) | gpg: A1D5047E

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130730/81c23264/attachment.html>

From mike at plan99.net  Tue Jul 30 12:12:51 2013
From: mike at plan99.net (Mike Hearn)
Date: Tue, 30 Jul 2013 14:12:51 +0200
Subject: [Bitcoin-development] BitMail - p2p Email 0.1. beta
In-Reply-To: <7B0891A4-7163-43AE-85EC-8BA7ADC28A2A@grabhive.com>
References: <CAEvNM8=yQn8sE4Lrf5+xedfm4RomBkBVhVWOdFFXxPEk7wZYDw@mail.gmail.com>
	<CAAS2fgS=5ju1BFFDkjoRW65qdtojm3rYBHZcSMtUmHhyaTxMhA@mail.gmail.com>
	<CANEZrP2+jOTHsEv+qXpqLKJS3UATB_so2ZwQdL+AyJTd2zti4A@mail.gmail.com>
	<7B0891A4-7163-43AE-85EC-8BA7ADC28A2A@grabhive.com>
Message-ID: <CANEZrP0OYzz8p6zT_y7JGZyofZ=wTZ=6umCLu0AJy8KH6E0R5A@mail.gmail.com>

The TPM is a piece of secure* hardware that provides various cryptographic
services to the host system. It is important to understand that it is not a
crypto accelerator. It is a place to store keys and small pieces of data
(like hashes, counters) where it's difficult for someone to extract them
even if they have physical access.

The TPM is designed to support trusted computing, a rather splendid set of
extensions to the x86 architecture that let you do remote attestation,
software sealing and other things. Or at least it would be splendid if it
had been really finished off and pushed to completion by the designers.
Unfortunately due to various political issues it exists in a
quasi-finished, semi-broken state which only experts can use. Without a
doubt you have never run any software in a TC environment.

As part of that role, the TPM provides some permanent storage in the form
of NVRAM. Because the TPM is designed to be as cheap as possible, it has a
limited number of write cycles. Normally you're meant to store Intel TXT
launch control policies and sealed keys there, but Pond uses it in a
different way by storing keys there that it encrypts local data with. By
erasing the key in the TPM chips memory area, the data on disk is
effectively destroyed too.

This is useful because modern "disks" are often SSD drives, or physical
metal disks that use log structured file systems. Because flash memory has
a limited number of write cycles per cell, internally SSDs have firmware
that remap writes from logical addresses to different physical addresses,
the goal is to avoid wearing down the drive and extend its useful life.
Normally it doesn't matter, but if you want to delete data such that it's
really really gone, it obviously poses a problem. Using TPM NVRAM solves
it, albiet, at a high usability cost.



*note: actual tamper resistance of real-world TPM chips is not something
that seems to have been studied much


On Tue, Jul 30, 2013 at 1:27 PM, Wendell <w at grabhive.com> wrote:

> Can you explain this process for those of us not too familiar with TPM
> chips?
>
> -wendell
>
> grabhive.com | twitter.com/grabhive | gpg: 6C0C9411
>
> On Jul 30, 2013, at 10:40 AM, Mike Hearn wrote:
>
> > As a testament to the seriousness with which Pond takes forward
> security, it can use the NVRAM in a TPM chip to reliably destroy keys for
> data that an SSD device might have otherwise made un-erasable.
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130730/326a4eca/attachment.html>

From w at grabhive.com  Tue Jul 30 11:27:02 2013
From: w at grabhive.com (Wendell)
Date: Tue, 30 Jul 2013 13:27:02 +0200
Subject: [Bitcoin-development] BitMail - p2p Email 0.1. beta
In-Reply-To: <CANEZrP2+jOTHsEv+qXpqLKJS3UATB_so2ZwQdL+AyJTd2zti4A@mail.gmail.com>
References: <CAEvNM8=yQn8sE4Lrf5+xedfm4RomBkBVhVWOdFFXxPEk7wZYDw@mail.gmail.com>
	<CAAS2fgS=5ju1BFFDkjoRW65qdtojm3rYBHZcSMtUmHhyaTxMhA@mail.gmail.com>
	<CANEZrP2+jOTHsEv+qXpqLKJS3UATB_so2ZwQdL+AyJTd2zti4A@mail.gmail.com>
Message-ID: <7B0891A4-7163-43AE-85EC-8BA7ADC28A2A@grabhive.com>

Can you explain this process for those of us not too familiar with TPM chips?

-wendell

grabhive.com | twitter.com/grabhive | gpg: 6C0C9411

On Jul 30, 2013, at 10:40 AM, Mike Hearn wrote:

> As a testament to the seriousness with which Pond takes forward security, it can use the NVRAM in a TPM chip to reliably destroy keys for data that an SSD device might have otherwise made un-erasable.



From mike at plan99.net  Tue Jul 30 12:41:53 2013
From: mike at plan99.net (Mike Hearn)
Date: Tue, 30 Jul 2013 14:41:53 +0200
Subject: [Bitcoin-development] Tor and Bitcoin
In-Reply-To: <FB36762E8B574F7AAB7D25618841CF01@grabhive.com>
References: <FB36762E8B574F7AAB7D25618841CF01@grabhive.com>
Message-ID: <CANEZrP3rqTW_DEZ75B9tg6kNPtfX4ENBJupaJD1axSLsxMdCwQ@mail.gmail.com>

Various ideas are possible:

* Use the Tor SOCKS proxy in such a way that it creates a guaranteed
independent circuit to a different exit node each time you connect. This
gets you back to the slightly stronger clearnet heuristic of "if I saw a
bunch of peers announce my tx, then it's probably valid". I don't know if
this is possible.

* Have a set of hard-coded long term stable hidden peers, that are run by
known community members who are not going to collaborate to defraud people.
Of course if they're run by people who are well known that rather defeats
the point of them being hidden, but you benefit from the fact that the
.onion names double as authentication tokens.

* Talk the Tor protocol directly and have the app explicitly pick its own
diverse set of exit nodes, one per p2p connection. This is likely to be
complicated. Last time I looked Tor doesn't provide any kind of library or
API.

I agree that it's a kind of theoretical attack right now, but then again,
I'm not aware of any countries that block Bitcoin either. The thing with
Thailand seems like it might be the result of some confusion over who
exactly can make laws in that country. I'd be more concerned about
Argentina, but we're a long way from ISPs searching for people to arrest by
looking for port 8333.

Supporting SOCKS (really: blocking sockets) would be a good thing anyway.
Using blocking sockets also means we'd get SSL support, so if at some point
Bitcoin nodes start supporting SSL we'd be able to use it more easily.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130730/4dfc1147/attachment.html>

From jgarzik at bitpay.com  Tue Jul 30 14:01:56 2013
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Tue, 30 Jul 2013 10:01:56 -0400
Subject: [Bitcoin-development] Tor and Bitcoin
In-Reply-To: <CANEZrP3rqTW_DEZ75B9tg6kNPtfX4ENBJupaJD1axSLsxMdCwQ@mail.gmail.com>
References: <FB36762E8B574F7AAB7D25618841CF01@grabhive.com>
	<CANEZrP3rqTW_DEZ75B9tg6kNPtfX4ENBJupaJD1axSLsxMdCwQ@mail.gmail.com>
Message-ID: <CAJHLa0PcxdCwHRN8ZrpOyD_NWPfBod4SJNooxpMXQUqHg102uQ@mail.gmail.com>

On Tue, Jul 30, 2013 at 8:41 AM, Mike Hearn <mike at plan99.net> wrote:
> * Talk the Tor protocol directly and have the app explicitly pick its own
> diverse set of exit nodes, one per p2p connection. This is likely to be
> complicated. Last time I looked Tor doesn't provide any kind of library or
> API.

This has been discussed on IRC, and would be interesting to explore.
For several applications, linking directly with a Tor library is far
superior to the fragility of requiring a properly configured external
process.  Lacking such a Tor library right now, one must be written
<hint hint>

-- 
Jeff Garzik
Senior Software Engineer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From w at grabhive.com  Tue Jul 30 17:02:58 2013
From: w at grabhive.com (Wendell)
Date: Tue, 30 Jul 2013 19:02:58 +0200
Subject: [Bitcoin-development] Tor and Bitcoin
In-Reply-To: <CAJHLa0PcxdCwHRN8ZrpOyD_NWPfBod4SJNooxpMXQUqHg102uQ@mail.gmail.com>
References: <FB36762E8B574F7AAB7D25618841CF01@grabhive.com>
	<CANEZrP3rqTW_DEZ75B9tg6kNPtfX4ENBJupaJD1axSLsxMdCwQ@mail.gmail.com>
	<CAJHLa0PcxdCwHRN8ZrpOyD_NWPfBod4SJNooxpMXQUqHg102uQ@mail.gmail.com>
Message-ID: <18D9E6A0-946F-4707-A322-22CA2A17E608@grabhive.com>

I suppose it isn't quite what you're talking about but we did push this out today:

Tor.framework, for Cocoa developers, similar to our BitcoinKit:
https://github.com/grabhive/Tor.framework

-wendell

grabhive.com | twitter.com/grabhive | gpg: 6C0C9411

On Jul 30, 2013, at 4:01 PM, Jeff Garzik wrote:

> This has been discussed on IRC, and would be interesting to explore.
> For several applications, linking directly with a Tor library is far
> superior to the fragility of requiring a properly configured external
> process.  Lacking such a Tor library right now, one must be written
> <hint hint>




From b at grabhive.com  Tue Jul 30 17:20:54 2013
From: b at grabhive.com (Bazyli Zygan)
Date: Tue, 30 Jul 2013 19:20:54 +0200
Subject: [Bitcoin-development] Tor and Bitcoin
In-Reply-To: <18D9E6A0-946F-4707-A322-22CA2A17E608@grabhive.com>
References: <FB36762E8B574F7AAB7D25618841CF01@grabhive.com>
	<CANEZrP3rqTW_DEZ75B9tg6kNPtfX4ENBJupaJD1axSLsxMdCwQ@mail.gmail.com>
	<CAJHLa0PcxdCwHRN8ZrpOyD_NWPfBod4SJNooxpMXQUqHg102uQ@mail.gmail.com>
	<18D9E6A0-946F-4707-A322-22CA2A17E608@grabhive.com>
Message-ID: <17A909E3D54A4CBE9E0522EB3CBDC1A4@grabhive.com>

Apparently that won't help. That's just embeding the existing tor code and rerouting internal Cocoa internet communication via tors proxy.
What guys need is bigger configurability in tor itself. I can understand that. It's doable tough.

Gosh, why a day has only 24h? :) 

/b

grabhive.com (http://grabhive.com) | twitter.com/grabhive (http://twitter.com/grabhive) | gpg: A1D5047E


On Tuesday, 30 July 2013 at 19:02, Wendell wrote:

> I suppose it isn't quite what you're talking about but we did push this out today:
> 
> Tor.framework, for Cocoa developers, similar to our BitcoinKit:
> https://github.com/grabhive/Tor.framework
> 
> -wendell
> 
> grabhive.com (http://grabhive.com) | twitter.com/grabhive (http://twitter.com/grabhive) | gpg: 6C0C9411
> 
> On Jul 30, 2013, at 4:01 PM, Jeff Garzik wrote:
> 
> > This has been discussed on IRC, and would be interesting to explore.
> > For several applications, linking directly with a Tor library is far
> > superior to the fragility of requiring a properly configured external
> > process. Lacking such a Tor library right now, one must be written
> > <hint hint>
> > 
> 
> 
> 
> ------------------------------------------------------------------------------
> Get your SQL database under version control now!
> Version control is standard for application code, but databases havent 
> caught up. So what steps can you take to put your SQL databases under 
> version control? Why should you start doing it? Read more to find out.
> http://pubads.g.doubleclick.net/gampad/clk?id=49501711&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net (mailto:Bitcoin-development at lists.sourceforge.net)
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 
> 


-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130730/5035eb6c/attachment.html>

From pete at petertodd.org  Tue Jul 30 18:30:43 2013
From: pete at petertodd.org (Peter Todd)
Date: Tue, 30 Jul 2013 14:30:43 -0400
Subject: [Bitcoin-development] Tor and Bitcoin
In-Reply-To: <FB36762E8B574F7AAB7D25618841CF01@grabhive.com>
References: <FB36762E8B574F7AAB7D25618841CF01@grabhive.com>
Message-ID: <20130730183043.GA32398@petertodd.org>

On Tue, Jul 30, 2013 at 02:01:39PM +0200, Bazyli Zygan wrote:
> > I think to support Tor really well [in bitcoinj], we'd need not only to make SOCKS work, but also add a way to use hidden peers and then try and come up with an anti-sybil heuristic. Unfortunately it's unclear what such a heuristic would look like. Bitcoin-Qt uses different /16s as a rule of thumb when on the clearnet, but no such technique is usable on Tor because by definition you aren't supposed to know anything about the hidden peers.
> 
> While the scenario outlined seems unlikely, it's best to be prepared... What do you all think? How can this be done properly?

There was a good reply to those concerns last time the issue came up:

    Tor does not act as a particularly effective man in the middle for nodes
    that support connections to hidden services because while your
    connections to standard Bitcoin nodes go through your exit node, the
    routing path for each hidden service peer is independent. Having said
    that we should offer modes that send your self-generated transactions
    out via Tor, while still maintaining non-Tor connections.

    Anyway Sybil attacks aren't all that interesting if you are the one
    sending the funds, and receivers are reasonably well protected simply
    because generating false confirmations is extremely expensive and very
    difficult to do quickly. After all, you always make the assumption that
    nearly all hashing power in existence is honest when you talk about
    replace-by-fee among other things, and that assumption naturally leads
    to the conclusion that generating false confirmations with a sybil
    attack would take more than long enough that the user would be
    suspicious that something was wrong long before being defrauded.

    I'd be surprised if anyone has ever bothered with a false confirmation
    sybil attack. I wouldn't be the slightest bit surprised if the NSA is
    recording all the Bitcoin traffic they can for future analysis to find
    true transaction origins. Which reminds me, again, we need node-to-node
    connections to be encrypted to at least protect against network-wide
    passive sniffiing.

    Regarding usage I would be interested to hear from those running Bitcoin
    nodes advertising themselves as hidden services.
    -http://www.mail-archive.com/bitcoin-development at lists.sourceforge.net/msg02438.html

tl;dr: Users should be using Tor to preserve their privacy and the MITM
risks are minimal to anyone using Bitcoin correctly. (don't trust
zero-conf transactions, they are not secure!)

> Gregory Maxwell is the person who wrote the hidden service support for bitcoind, right? It might be interesting to get his comments here.

Yeah, he had the idea of adding .onion addresses of seed nodes
along-side the DNS seeds table; that would give an end-to-end MITM-proof
channel to a trusted seed who can in turn give an honest view of the
network.

Ideally those .onion addresses would be of nodes run by the same people
as running the existing seeds so that it was clear who was being trusted
- I'll write a patch to do this soon with a .onion testnet seed first.
(I run one of the testnet DNSSEED seeds and have a small grant from the
foundation to do so)

Bitcoin relays .onion addresses over the P2P network, so once you are
connected you can gain additional peers with addresses that are MITM
resistant. Currently there isn't any equivalent to the (weak) anti-sybil
properties of IP address range diversity for .onion's, but in the future
we'll eventually add node identities and some way to make creating lots
of fake identities for a sybil attack expensive.

-- 
'peter'[:-1]@petertodd.org
00000000000000321cb1ef9de9c4a6c470c7f88c4b85bcee3a63121e31096fef
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 198 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130730/f5533f0c/attachment.sig>

From w at grabhive.com  Tue Jul 30 19:36:50 2013
From: w at grabhive.com (Wendell)
Date: Tue, 30 Jul 2013 21:36:50 +0200
Subject: [Bitcoin-development] Tor and Bitcoin
In-Reply-To: <20130730183043.GA32398@petertodd.org>
References: <FB36762E8B574F7AAB7D25618841CF01@grabhive.com>
	<20130730183043.GA32398@petertodd.org>
Message-ID: <D20D7E1A-4E8C-4280-A81D-7AE960497CCB@grabhive.com>

Thank you Peter.

Does this advice apply equally to both full and SPV nodes? At this point I'm merely curious, since we don't have the option to run bitcoinj over Tor right now anyway.

-wendell

grabhive.com | twitter.com/grabhive | gpg: 6C0C9411

On Jul 30, 2013, at 8:30 PM, Peter Todd wrote:

> tl;dr: Users should be using Tor to preserve their privacy and the MITM
> risks are minimal to anyone using Bitcoin correctly. (don't trust
> zero-conf transactions, they are not secure!)

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 841 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130730/529ad341/attachment.sig>

From pete at petertodd.org  Tue Jul 30 20:11:41 2013
From: pete at petertodd.org (Peter Todd)
Date: Tue, 30 Jul 2013 16:11:41 -0400
Subject: [Bitcoin-development] Tor and Bitcoin
In-Reply-To: <D20D7E1A-4E8C-4280-A81D-7AE960497CCB@grabhive.com>
References: <FB36762E8B574F7AAB7D25618841CF01@grabhive.com>
	<20130730183043.GA32398@petertodd.org>
	<D20D7E1A-4E8C-4280-A81D-7AE960497CCB@grabhive.com>
Message-ID: <20130730201141.GA3555@petertodd.org>

On Tue, Jul 30, 2013 at 09:36:50PM +0200, Wendell wrote:
> Thank you Peter.
> 
> Does this advice apply equally to both full and SPV nodes? At this point I'm merely curious, since we don't have the option to run bitcoinj over Tor right now anyway.

Yes, although remember that in general SPV nodes are significantly less
safe because they depend soley on confirmations for security; it's often
not appreciated that an attacker can target multiple SPV-using entities
at once by creating a invalid block header with any number of completely
fake payments linked to it; if you can attack n targets at once, the
cost to perform the attack is n times less per target. 

Unrelated to Tor, but an interesting possibility to improve SPV security
is to ask for the history of a given txout - that is the previous
transactions that funded it. You could even do this with a
zero-knowledge proof, sampling some subset of the prior transactions to
detect fraud. Unfortunately none of the infrastructure is setup to do
this, and txid's aren't constructed in ways that make these kinds of
proofs cheap. (you really want a merkle tree over the txin and txout
sets)

Work thinking about for the future in any case - the above can be
implemented as a soft-fork.

-- 
'peter'[:-1]@petertodd.org
0000000000000077bb3b12c68ada1e2965411a973b07fc721834154df07aa5c9
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 198 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130730/8f8457a1/attachment.sig>

From pete at petertodd.org  Tue Jul 30 20:12:50 2013
From: pete at petertodd.org (Peter Todd)
Date: Tue, 30 Jul 2013 16:12:50 -0400
Subject: [Bitcoin-development] Tor and Bitcoin
In-Reply-To: <20130730201141.GA3555@petertodd.org>
References: <FB36762E8B574F7AAB7D25618841CF01@grabhive.com>
	<20130730183043.GA32398@petertodd.org>
	<D20D7E1A-4E8C-4280-A81D-7AE960497CCB@grabhive.com>
	<20130730201141.GA3555@petertodd.org>
Message-ID: <20130730201250.GB3555@petertodd.org>

On Tue, Jul 30, 2013 at 04:11:41PM -0400, Peter Todd wrote:
> Unrelated to Tor, but an interesting possibility to improve SPV security
> is to ask for the history of a given txout - that is the previous
> transactions that funded it. You could even do this with a
> zero-knowledge proof, sampling some subset of the prior transactions to

s/zero-knowledge/non-interactive/

-- 
'peter'[:-1]@petertodd.org
000000000000007f87c6d7e6b8c2dbf36c72c3db4a05055b604faeec59bda024
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 198 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130730/3a61e8c1/attachment.sig>

From mike at plan99.net  Tue Jul 30 22:17:44 2013
From: mike at plan99.net (Mike Hearn)
Date: Wed, 31 Jul 2013 00:17:44 +0200
Subject: [Bitcoin-development] [bitcoin-list] BitMail - p2p Email 0.1.
	beta
In-Reply-To: <CAD2Ti29=Lzcun+0Jz7zn2Dt9G2a06f-0V8KEBUMHJTGxhHQV0A@mail.gmail.com>
References: <CAEvNM8=yQn8sE4Lrf5+xedfm4RomBkBVhVWOdFFXxPEk7wZYDw@mail.gmail.com>
	<CAAS2fgS=5ju1BFFDkjoRW65qdtojm3rYBHZcSMtUmHhyaTxMhA@mail.gmail.com>
	<CANEZrP2+jOTHsEv+qXpqLKJS3UATB_so2ZwQdL+AyJTd2zti4A@mail.gmail.com>
	<7B0891A4-7163-43AE-85EC-8BA7ADC28A2A@grabhive.com>
	<CANEZrP0OYzz8p6zT_y7JGZyofZ=wTZ=6umCLu0AJy8KH6E0R5A@mail.gmail.com>
	<CAD2Ti29=Lzcun+0Jz7zn2Dt9G2a06f-0V8KEBUMHJTGxhHQV0A@mail.gmail.com>
Message-ID: <CANEZrP3JVtzBU9mcWvYNuespTi81kaoVUfKAx6vKBWd-hrCqCg@mail.gmail.com>

TPMs have come as standard with nearly all computers (except Macs, doh) for
a long time. They certainly don't cost $100. More like a few dollars at
most. That's why they're so slow.


On Tue, Jul 30, 2013 at 10:43 PM, grarpamp <grarpamp at gmail.com> wrote:

> On Tue, Jul 30, 2013 at 8:12 AM, Mike Hearn <mike at plan99.net> wrote:
> > The TPM is a piece of secure* hardware
>
> I've seen some motherboards with a TPM module header but none
> came with it installed. I think the modules themselves might be
> $50-$100 range. They might come with some API docs.
> Some of you might have links to ones you've used...
>
> > As part of that role, the TPM provides some permanent storage in the form
> > of NVRAM. Because the TPM is designed to be as cheap as possible, it has
> a
> > limited number of write cycles. Normally you're meant to store Intel TXT
> > launch control policies and sealed keys there
>
> > the goal is to avoid wearing down the drive and extend its useful life.
> > Normally it doesn't matter, but if you want to delete data such that it's
> > really really gone, it obviously poses a problem. Using TPM NVRAM solves
> > it, albiet, at a high usability cost.
>
> If said TPM storage has a 'limited [but unfixed number of write cycles',
> that
> sounds unreliable. It would seem to me that both reliable and 'really gone'
> are achievable on platters (or lesser, with ssd) provided the disk was also
> encrypted. Nuke that key and it's reliably gone.
>
>
> ------------------------------------------------------------------------------
> Get your SQL database under version control now!
> Version control is standard for application code, but databases havent
> caught up. So what steps can you take to put your SQL databases under
> version control? Why should you start doing it? Read more to find out.
> http://pubads.g.doubleclick.net/gampad/clk?id=49501711&iu=/4140/ostg.clktrk
> _______________________________________________
> bitcoin-list mailing list
> bitcoin-list at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-list
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130731/7c66d8a1/attachment.html>

From gavinandresen at gmail.com  Wed Jul 31 06:28:25 2013
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Wed, 31 Jul 2013 16:28:25 +1000
Subject: [Bitcoin-development] Payment Protocol: BIP 70, 71, 72
Message-ID: <CABsx9T0Ly67ZNJhoRQk0L9Q0-ucq3e=24b5Tg6GRKspRKKtP-g@mail.gmail.com>

I've turned the preliminary payment protocol spec into three BIPs:

https://en.bitcoin.it/wiki/BIP_0070 : Network protocol / messages
https://en.bitcoin.it/wiki/BIP_0071 : MIME types for the messages
https://en.bitcoin.it/wiki/BIP_0072 : bitcoin: URI extension

I expect the wallet-side implementation to be pulled into Bitcoin-Qt Real
Soon:
  https://github.com/bitcoin/bitcoin/pull/2539

There is also a reference implementation of server-side code for generating
payment requests in php and C++ :
  https://github.com/gavinandresen/paymentrequest

-- 
--
Gavin Andresen
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130731/e5088939/attachment.html>

From mike at plan99.net  Wed Jul 31 08:59:37 2013
From: mike at plan99.net (Mike Hearn)
Date: Wed, 31 Jul 2013 10:59:37 +0200
Subject: [Bitcoin-development] Payment Protocol: BIP 70, 71, 72
In-Reply-To: <CABsx9T0Ly67ZNJhoRQk0L9Q0-ucq3e=24b5Tg6GRKspRKKtP-g@mail.gmail.com>
References: <CABsx9T0Ly67ZNJhoRQk0L9Q0-ucq3e=24b5Tg6GRKspRKKtP-g@mail.gmail.com>
Message-ID: <CANEZrP3pp6N+B4HgRF_xpp-sm7gkkK-NoV6nKKnOzes_2ubT4g@mail.gmail.com>

Woo, huzzah :-)

Now the BIP draft is available and we know it all hangs together, I'm
hoping to (re)start implementation work in bitcoinj in the next month or
two. I'm currently trying to figure out which is more important,
deterministic wallets or payment protocol, but I think right now the
payment protocol would be easier to do and would benefit more from a second
implementation. HD wallets have already been shown interoperable.

Comments on BIP 70:

   "PaymentRequest messages larger than 50,000 bytes should be rejected by
the merchant's server, to mitigate denial-of-service attacks."

Do you mean "users wallet" here?

You could note in the motivation section two more motivations:

1) That the protocol can be a foundation on which other features are built
2) That it is required to assist hardware wallets when there is a virus on
the system

Perhaps note in the BIP that the merchant should not assume the
merchant_data field is trustworthy - malicious buyers could rewrite it as
they see fit. Point out that a good way to use this is to serialize server
state, signed by a merchant-only key, in the same way one might use an HTTP
cookie.

   "PaymentDetails.payment_url must be secure against man-in-the-middle
attacks that might alter Payment.refund_to (if using HTTP, it must be
TLS-protected).

This says "must", but what should a client do here if the payment URL is
not HTTPS? I suggest weakening this to "should", as sometimes TLS is
redundant (e.g. if you're sending to a Tor hidden service).

The PaymentACK message contains a copy of Payment, but the BIP doesn't say
what to do with it. I assume this means a client is free to ignore it and
rely on TCP state to figure out the payment/ack connection instead? It may
be worth noting that explicitly.

In the certificates section, you could observe that "validation" means
"verification that it correctly chains to a trusted root authority, where
trusted roots may be obtained from the operating system. If there is no
operating system, the Mozilla root store is recommended".

All the rest LGTM.
[edit<https://en.bitcoin.it/w/index.php?title=BIP_0070&action=edit&section=7>
]


On Wed, Jul 31, 2013 at 8:28 AM, Gavin Andresen <gavinandresen at gmail.com>wrote:

> I've turned the preliminary payment protocol spec into three BIPs:
>
> https://en.bitcoin.it/wiki/BIP_0070 : Network protocol / messages
> https://en.bitcoin.it/wiki/BIP_0071 : MIME types for the messages
> https://en.bitcoin.it/wiki/BIP_0072 : bitcoin: URI extension
>
> I expect the wallet-side implementation to be pulled into Bitcoin-Qt Real
> Soon:
>   https://github.com/bitcoin/bitcoin/pull/2539
>
> There is also a reference implementation of server-side code for
> generating payment requests in php and C++ :
>   https://github.com/gavinandresen/paymentrequest
>
> --
> --
> Gavin Andresen
>
>
>
> ------------------------------------------------------------------------------
> Get your SQL database under version control now!
> Version control is standard for application code, but databases havent
> caught up. So what steps can you take to put your SQL databases under
> version control? Why should you start doing it? Read more to find out.
> http://pubads.g.doubleclick.net/gampad/clk?id=49501711&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130731/dac8939e/attachment.html>

From mike at plan99.net  Wed Jul 31 09:08:53 2013
From: mike at plan99.net (Mike Hearn)
Date: Wed, 31 Jul 2013 11:08:53 +0200
Subject: [Bitcoin-development] [bitcoin-list] BitMail - p2p Email 0.1.
	beta
In-Reply-To: <51F886F6.1090108@gmail.com>
References: <CAEvNM8=yQn8sE4Lrf5+xedfm4RomBkBVhVWOdFFXxPEk7wZYDw@mail.gmail.com>
	<CAAS2fgS=5ju1BFFDkjoRW65qdtojm3rYBHZcSMtUmHhyaTxMhA@mail.gmail.com>
	<CANEZrP2+jOTHsEv+qXpqLKJS3UATB_so2ZwQdL+AyJTd2zti4A@mail.gmail.com>
	<7B0891A4-7163-43AE-85EC-8BA7ADC28A2A@grabhive.com>
	<CANEZrP0OYzz8p6zT_y7JGZyofZ=wTZ=6umCLu0AJy8KH6E0R5A@mail.gmail.com>
	<CAD2Ti29=Lzcun+0Jz7zn2Dt9G2a06f-0V8KEBUMHJTGxhHQV0A@mail.gmail.com>
	<CANEZrP3JVtzBU9mcWvYNuespTi81kaoVUfKAx6vKBWd-hrCqCg@mail.gmail.com>
	<CAD2Ti29zbac5YrW6+oMvb=8t7b1A31XckyC-mH7_qixLCRnFaQ@mail.gmail.com>
	<51F886F6.1090108@gmail.com>
Message-ID: <CANEZrP3E1g7btsjWsjD6twU+3pmGG-2Cfw_kExUGVb9JiYY4iQ@mail.gmail.com>

"Support" for a TPM is a rather tricky thing.

By itself the TPM is independent of any CPU. However, it's also not very
useful (though for Pond's use case, it works).

The TPM gets much more useful when it's integrated with features on the
motherboard, BIOS, CPU, northbridge, IOMMU etc. Then you have a full blown
TCG-compliant TC environment, which is useful for many things. Actually it
was never very useful for DRM - that was only one theoretical possibility
that was never implemented and even if it had been, TC is to DRM much as
cryptography is to DRM. So the FUD was just that: fear, uncertainty and
doubt which probably crippled a highly useful cryptographic security tool
for good. One of the more shameful periods of the tech industries history,
if you ask me.



On Wed, Jul 31, 2013 at 5:39 AM, Blibbet <blibbet at gmail.com> wrote:

> On 7/30/13 3:58 PM, grarpamp wrote:
> > [...] And if AMD even has this stuff.  [...]
>
> Yes, AMD does have TPM.
>
> Sorry, not sure which models support it.
>
> http://www.amd.com/us/products/embedded/das/Pages/security.aspx
>
>
> http://www.amd.com/us/products/desktop/platforms/Pages/desktop-platforms.aspx
>
>
>
> ------------------------------------------------------------------------------
> Get your SQL database under version control now!
> Version control is standard for application code, but databases havent
> caught up. So what steps can you take to put your SQL databases under
> version control? Why should you start doing it? Read more to find out.
> http://pubads.g.doubleclick.net/gampad/clk?id=49501711&iu=/4140/ostg.clktrk
> _______________________________________________
> bitcoin-list mailing list
> bitcoin-list at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-list
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130731/434df919/attachment.html>

From roy at gnomon.org.uk  Wed Jul 31 08:45:39 2013
From: roy at gnomon.org.uk (Roy Badami)
Date: Wed, 31 Jul 2013 09:45:39 +0100
Subject: [Bitcoin-development] Payment Protocol: BIP 70, 71, 72
In-Reply-To: <CABsx9T0Ly67ZNJhoRQk0L9Q0-ucq3e=24b5Tg6GRKspRKKtP-g@mail.gmail.com>
References: <CABsx9T0Ly67ZNJhoRQk0L9Q0-ucq3e=24b5Tg6GRKspRKKtP-g@mail.gmail.com>
Message-ID: <20130731084538.GL16713@giles.gnomon.org.uk>

On Wed, Jul 31, 2013 at 04:28:25PM +1000, Gavin Andresen wrote:
> I've turned the preliminary payment protocol spec into three BIPs:
> 
> https://en.bitcoin.it/wiki/BIP_0070 : Network protocol / messages
> https://en.bitcoin.it/wiki/BIP_0071 : MIME types for the messages
> https://en.bitcoin.it/wiki/BIP_0072 : bitcoin: URI extension


Is it envisaged to be possible/sensible to have a URI that is *only* a
payment request?  i.e. something like the following (although I'm not
sure this is a valid URI):

bitcoin:?request=https%3A%2F%2Fmerchant.com%2Fpay.php%3Fh%3D2a8628fc2fbe

roy



From gavinandresen at gmail.com  Wed Jul 31 11:19:05 2013
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Wed, 31 Jul 2013 21:19:05 +1000
Subject: [Bitcoin-development] Payment Protocol: BIP 70, 71, 72
In-Reply-To: <CANEZrP3pp6N+B4HgRF_xpp-sm7gkkK-NoV6nKKnOzes_2ubT4g@mail.gmail.com>
References: <CABsx9T0Ly67ZNJhoRQk0L9Q0-ucq3e=24b5Tg6GRKspRKKtP-g@mail.gmail.com>
	<CANEZrP3pp6N+B4HgRF_xpp-sm7gkkK-NoV6nKKnOzes_2ubT4g@mail.gmail.com>
Message-ID: <CABsx9T1WB+ZraSGXrLJw1F9a4k+KHZYBPJ2cL8ufUYkayfQStA@mail.gmail.com>

Thanks, Mike!

   "PaymentRequest messages larger than 50,000 bytes should be rejected by
> the merchant's server, to mitigate denial-of-service attacks."
>
> Do you mean "users wallet" here?
>

Yes, fixed.



> You could note in the motivation section two more motivations:
> 1) That the protocol can be a foundation on which other features are built
>

I don't like putting "this is what we think will happen in the future"
types of statements in specifications, so I'm inclined to leave that out.


> 2) That it is required to assist hardware wallets when there is a virus on
> the system
>

Added:

"Resistance from man-in-the-middle attacks that replace a merchant's
bitcoin address with an attacker's address before a transaction is
authorized with a hardware wallet."

Perhaps note in the BIP that the merchant should not assume the
> merchant_data field is trustworthy - malicious buyers could rewrite it as
> they see fit. Point out that a good way to use this is to serialize server
> state, signed by a merchant-only key, in the same way one might use an HTTP
> cookie.
>

Added:

"Note that malicious clients may modify the merchant_data, so should be
authenticated in some way (for example, signed with a merchant-only key)."


>    "PaymentDetails.payment_url must be secure against man-in-the-middle
> attacks that might alter Payment.refund_to (if using HTTP, it must be
> TLS-protected).
>
> This says "must", but what should a client do here if the payment URL is
> not HTTPS? I suggest weakening this to "should", as sometimes TLS is
> redundant (e.g. if you're sending to a Tor hidden service).
>

done.


> The PaymentACK message contains a copy of Payment, but the BIP doesn't say
> what to do with it. I assume this means a client is free to ignore it and
> rely on TCP state to figure out the payment/ack connection instead? It may
> be worth noting that explicitly.
>

Added:

"payment | Copy of the Payment message that triggered this PaymentACK.
Clients may ignore this if they implement another way of associating
Payments with PaymentACKs."


>
> In the certificates section, you could observe that "validation" means
> "verification that it correctly chains to a trusted root authority, where
> trusted roots may be obtained from the operating system. If there is no
> operating system, the Mozilla root store is recommended".
>

Modified that section to say:

"...followed by additional certificates, with each subsequent certificate
being the one used to certify the previous one, up to a trusted root
authority. The recipient must verify the certificate chain according to
[RFC5280] and reject the PaymentRequest if any validation failure occurs.

Trusted root certificates may be obtained from the operating system; if
validation is done on a device without an operating system, the Mozilla
root store<http://www.mozilla.org/projects/security/certs/included/index.html>
is
recommended."

-- 
--
Gavin Andresen
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130731/6d60201c/attachment.html>

From gavinandresen at gmail.com  Wed Jul 31 11:33:07 2013
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Wed, 31 Jul 2013 21:33:07 +1000
Subject: [Bitcoin-development] Payment Protocol: BIP 70, 71, 72
In-Reply-To: <CABsx9T3Xvnw2H6awgnT7mr-HzJOqCp_nOVM57BD-B9mY4R43aQ@mail.gmail.com>
References: <CABsx9T0Ly67ZNJhoRQk0L9Q0-ucq3e=24b5Tg6GRKspRKKtP-g@mail.gmail.com>
	<20130731084538.GL16713@giles.gnomon.org.uk>
	<CABsx9T3Xvnw2H6awgnT7mr-HzJOqCp_nOVM57BD-B9mY4R43aQ@mail.gmail.com>
Message-ID: <CABsx9T14Dfh8SEe6wsCJjE=S8hTcfDrAUNMBCjtkvM+UH-bAYQ@mail.gmail.com>

On Wed, Jul 31, 2013 at 6:45 PM, Roy Badami <roy at gnomon.org.uk> wrote:
>
> Is it envisaged to be possible/sensible to have a URI that is *only* a
> payment request?  i.e. something like the following (although I'm not
> sure this is a valid URI):
>
> bitcoin:?request=https%3A%2F%2Fmerchant.com%2Fpay.php%3Fh%3D2a8628fc2fbe

I think we'll want a bitcoin address in there for a long time for
backwards compatibility.

If web browser support for arbitrary MIME types is strong enough (I
haven't tested), then a payment request can be initiated with just an
anchor tag:
  <a href="https://merchant.com/pay.php?3D2a8628fc2fbe"
type="application/bitcoin-paymentrequest">

Doing it that way saves a http round-trip.

--
--
Gavin Andresen



From melvincarvalho at gmail.com  Wed Jul 31 11:45:26 2013
From: melvincarvalho at gmail.com (Melvin Carvalho)
Date: Wed, 31 Jul 2013 13:45:26 +0200
Subject: [Bitcoin-development] Payment Protocol: BIP 70, 71, 72
In-Reply-To: <CABsx9T14Dfh8SEe6wsCJjE=S8hTcfDrAUNMBCjtkvM+UH-bAYQ@mail.gmail.com>
References: <CABsx9T0Ly67ZNJhoRQk0L9Q0-ucq3e=24b5Tg6GRKspRKKtP-g@mail.gmail.com>
	<20130731084538.GL16713@giles.gnomon.org.uk>
	<CABsx9T3Xvnw2H6awgnT7mr-HzJOqCp_nOVM57BD-B9mY4R43aQ@mail.gmail.com>
	<CABsx9T14Dfh8SEe6wsCJjE=S8hTcfDrAUNMBCjtkvM+UH-bAYQ@mail.gmail.com>
Message-ID: <CAKaEYhKx44j8wMAn+P5g92BSv=-EdwrhMWmaaExHLavvdS+jgw@mail.gmail.com>

On 31 July 2013 13:33, Gavin Andresen <gavinandresen at gmail.com> wrote:

> On Wed, Jul 31, 2013 at 6:45 PM, Roy Badami <roy at gnomon.org.uk> wrote:
> >
> > Is it envisaged to be possible/sensible to have a URI that is *only* a
> > payment request?  i.e. something like the following (although I'm not
> > sure this is a valid URI):
> >
> > bitcoin:?request=https%3A%2F%2Fmerchant.com%2Fpay.php%3Fh%3D2a8628fc2fbe
>
> I think we'll want a bitcoin address in there for a long time for
> backwards compatibility.
>
> If web browser support for arbitrary MIME types is strong enough (I
> haven't tested), then a payment request can be initiated with just an
> anchor tag:
>   <a href="https://merchant.com/pay.php?3D2a8628fc2fbe"
> type="application/bitcoin-paymentrequest">
>

Unless I'm mistaken you cant generally set the "Accept" header on a browser
via a standard href ... one of those annoying quirks


>
> Doing it that way saves a http round-trip.
>
> --
> --
> Gavin Andresen
>
>
> ------------------------------------------------------------------------------
> Get your SQL database under version control now!
> Version control is standard for application code, but databases havent
> caught up. So what steps can you take to put your SQL databases under
> version control? Why should you start doing it? Read more to find out.
> http://pubads.g.doubleclick.net/gampad/clk?id=49501711&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130731/5c2200c4/attachment.html>

From tamas at bitsofproof.com  Wed Jul 31 12:31:08 2013
From: tamas at bitsofproof.com (Tamas Blummer)
Date: Wed, 31 Jul 2013 14:31:08 +0200
Subject: [Bitcoin-development] Payment Protocol: BIP 70, 71,
	72 (Gavin Andresen)
In-Reply-To: <mailman.133694.1375262729.12996.bitcoin-development@lists.sourceforge.net>
References: <mailman.133694.1375262729.12996.bitcoin-development@lists.sourceforge.net>
Message-ID: <A3B75B83-5DE2-4A1A-943D-AA529F3E1CC0@bitsofproof.com>

Since the payment request is available from a location defined in the URI,
I think it would be appropriate to attach the PaymentACK once payment 
accepted by Merchant.

This would make the request and receipt available for later review.

Regards,

Tam?s Blummer
Founder, CEO

http://bitsofproof.com

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130731/23d876a8/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: email.png
Type: image/png
Size: 7120 bytes
Desc: not available
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130731/23d876a8/attachment.png>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 495 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130731/23d876a8/attachment.sig>

From mike at plan99.net  Wed Jul 31 15:54:20 2013
From: mike at plan99.net (Mike Hearn)
Date: Wed, 31 Jul 2013 17:54:20 +0200
Subject: [Bitcoin-development] [bitcoin-list] BitMail - p2p Email 0.1.
	beta
In-Reply-To: <CANEZrP3J1+ATYSRcAcJgGtwcJE+XXKjFrdkP-bYQS7VbxKfV-g@mail.gmail.com>
References: <CAEvNM8=yQn8sE4Lrf5+xedfm4RomBkBVhVWOdFFXxPEk7wZYDw@mail.gmail.com>
	<CAAS2fgS=5ju1BFFDkjoRW65qdtojm3rYBHZcSMtUmHhyaTxMhA@mail.gmail.com>
	<CANEZrP2+jOTHsEv+qXpqLKJS3UATB_so2ZwQdL+AyJTd2zti4A@mail.gmail.com>
	<7B0891A4-7163-43AE-85EC-8BA7ADC28A2A@grabhive.com>
	<CANEZrP0OYzz8p6zT_y7JGZyofZ=wTZ=6umCLu0AJy8KH6E0R5A@mail.gmail.com>
	<CAD2Ti29=Lzcun+0Jz7zn2Dt9G2a06f-0V8KEBUMHJTGxhHQV0A@mail.gmail.com>
	<CANEZrP3JVtzBU9mcWvYNuespTi81kaoVUfKAx6vKBWd-hrCqCg@mail.gmail.com>
	<CAD2Ti29zbac5YrW6+oMvb=8t7b1A31XckyC-mH7_qixLCRnFaQ@mail.gmail.com>
	<51F886F6.1090108@gmail.com>
	<CANEZrP3E1g7btsjWsjD6twU+3pmGG-2Cfw_kExUGVb9JiYY4iQ@mail.gmail.com>
	<20130731133104.GW29404@leitl.org>
	<CANEZrP3J1+ATYSRcAcJgGtwcJE+XXKjFrdkP-bYQS7VbxKfV-g@mail.gmail.com>
Message-ID: <CANEZrP2uexbNM9xwNU1RSSgnRSGvUO69tVz0yL8Z5PXLG0HbSg@mail.gmail.com>

Sorry, I just noticed that this thread was CCd to the announce list not the
development list (why is it open access?)

It's offtopic anyway. Let's continue this discussion in private if anyone
wants to.


On Wed, Jul 31, 2013 at 5:53 PM, Mike Hearn <mike at plan99.net> wrote:

>
> The reason why TPM functionality was so much hated upon is because
>> it was pushed by a software/hardware monopoly, not just for DRM but
>> for locking down the system in general.
>>
>
> Regardless of what some people might have imagined or extrapolated at the
> time, the actual published specifications and technologies were nothing
> like that. There has never been a TC/TPM mode that would have generally
> locked systems down or even been useful for DRM (that'd have required a
> trusted hardware path which was never specced nor implemented).
>
> Locking a system down against tampering or for DRM does not require
> flexible open specifications with multiple competing implementations. It
> requires you to do an Xbox 360.
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130731/8d1fff0b/attachment.html>

From rdohm321 at gmail.com  Wed Jul 31 16:11:32 2013
From: rdohm321 at gmail.com (Randolph D.)
Date: Wed, 31 Jul 2013 18:11:32 +0200
Subject: [Bitcoin-development] BitMail - p2p Email 0.1. beta
In-Reply-To: <CANEZrP0OYzz8p6zT_y7JGZyofZ=wTZ=6umCLu0AJy8KH6E0R5A@mail.gmail.com>
References: <CAEvNM8=yQn8sE4Lrf5+xedfm4RomBkBVhVWOdFFXxPEk7wZYDw@mail.gmail.com>
	<CAAS2fgS=5ju1BFFDkjoRW65qdtojm3rYBHZcSMtUmHhyaTxMhA@mail.gmail.com>
	<CANEZrP2+jOTHsEv+qXpqLKJS3UATB_so2ZwQdL+AyJTd2zti4A@mail.gmail.com>
	<7B0891A4-7163-43AE-85EC-8BA7ADC28A2A@grabhive.com>
	<CANEZrP0OYzz8p6zT_y7JGZyofZ=wTZ=6umCLu0AJy8KH6E0R5A@mail.gmail.com>
Message-ID: <CAEvNM8=tdSZ4h4esx7_J0Qvt4420itqPc+GiQLL+OrFZf32dXw@mail.gmail.com>

right the original Topic was BitMail
here a Server running for the next few days to test BitMail.sf.net

 178.83.35.133:4710
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130731/4dbf6bd0/attachment.html>

From pete at petertodd.org  Wed Jul 31 22:11:10 2013
From: pete at petertodd.org (Peter Todd)
Date: Wed, 31 Jul 2013 18:11:10 -0400
Subject: [Bitcoin-development] Litecoin v0.8.3.7 audit report
Message-ID: <20130731221110.GA15353@savin>

https://s3.amazonaws.com/peter.todd/litecoin-v0.8.3.7-audit-report.tar.bz2

I thought this may be of interest to Bitcoin as well as an example.

-- 
'peter'[:-1]@petertodd.org
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 490 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130731/02aeda24/attachment.sig>

From pete at petertodd.org  Wed Jul 31 22:37:29 2013
From: pete at petertodd.org (Peter Todd)
Date: Wed, 31 Jul 2013 18:37:29 -0400
Subject: [Bitcoin-development] Litecoin v0.8.3.7 audit report
In-Reply-To: <20130731221110.GA15353@savin>
References: <20130731221110.GA15353@savin>
Message-ID: <20130731223729.GA23792@savin>

On Wed, Jul 31, 2013 at 06:11:10PM -0400, Peter Todd wrote:
> https://s3.amazonaws.com/peter.todd/litecoin-v0.8.3.7-audit-report.tar.bz2
> 
> I thought this may be of interest to Bitcoin as well as an example.

By request,

Zip archive:
https://s3.amazonaws.com/peter.todd/litecoin-v0.8.3.7-audit-report.zip

The individual files:
https://s3.amazonaws.com/peter.todd/litecoin-v0.8.3.7-audit-report/report.txt.asc
https://s3.amazonaws.com/peter.todd/litecoin-v0.8.3.7-audit-report/40809aed-1b5cb086.diff
https://s3.amazonaws.com/peter.todd/litecoin-v0.8.3.7-audit-report/litecoin-0.8.3.x-code-audit-agreement.txt.asc

report.txt.asc SHA256 hash:
24832b4b8411f3fbcc98b96bdfaaf90f4aeac39a7fbfb491bff5a76d23859dbd

-- 
'peter'[:-1]@petertodd.org
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 490 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130731/b2cbadc8/attachment.sig>

From ewillbefull at gmail.com  Wed Jul 31 23:30:46 2013
From: ewillbefull at gmail.com (E willbefull)
Date: Wed, 31 Jul 2013 17:30:46 -0600
Subject: [Bitcoin-development] Payment Protocol: BIP 70, 71, 72
In-Reply-To: <CABsx9T14Dfh8SEe6wsCJjE=S8hTcfDrAUNMBCjtkvM+UH-bAYQ@mail.gmail.com>
References: <CABsx9T0Ly67ZNJhoRQk0L9Q0-ucq3e=24b5Tg6GRKspRKKtP-g@mail.gmail.com>
	<20130731084538.GL16713@giles.gnomon.org.uk>
	<CABsx9T3Xvnw2H6awgnT7mr-HzJOqCp_nOVM57BD-B9mY4R43aQ@mail.gmail.com>
	<CABsx9T14Dfh8SEe6wsCJjE=S8hTcfDrAUNMBCjtkvM+UH-bAYQ@mail.gmail.com>
Message-ID: <CAGRKETunznLbBZO1gnS7WZH5sn=TnmKPS4Gz_Nrtocoe5devbw@mail.gmail.com>

I think it's important to expect PaymentRequest-only bitcoin URIs in the
future. Some types of payments (exotic transactions) may not make sense to
have a single fallback address. Or, a page with a bitcoin URI link may be
relying on a separate service provider to assemble the transaction.


On Wed, Jul 31, 2013 at 5:33 AM, Gavin Andresen <gavinandresen at gmail.com>wrote:

> On Wed, Jul 31, 2013 at 6:45 PM, Roy Badami <roy at gnomon.org.uk> wrote:
> >
> > Is it envisaged to be possible/sensible to have a URI that is *only* a
> > payment request?  i.e. something like the following (although I'm not
> > sure this is a valid URI):
> >
> > bitcoin:?request=https%3A%2F%2Fmerchant.com%2Fpay.php%3Fh%3D2a8628fc2fbe
>
> I think we'll want a bitcoin address in there for a long time for
> backwards compatibility.
>
> If web browser support for arbitrary MIME types is strong enough (I
> haven't tested), then a payment request can be initiated with just an
> anchor tag:
>   <a href="https://merchant.com/pay.php?3D2a8628fc2fbe"
> type="application/bitcoin-paymentrequest">
>
> Doing it that way saves a http round-trip.
>
> --
> --
> Gavin Andresen
>
>
> ------------------------------------------------------------------------------
> Get your SQL database under version control now!
> Version control is standard for application code, but databases havent
> caught up. So what steps can you take to put your SQL databases under
> version control? Why should you start doing it? Read more to find out.
> http://pubads.g.doubleclick.net/gampad/clk?id=49501711&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130731/a5fc54fa/attachment.html>

From gavinandresen at gmail.com  Wed Jul 31 23:38:11 2013
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Thu, 1 Aug 2013 09:38:11 +1000
Subject: [Bitcoin-development] Payment Protocol: BIP 70, 71, 72
In-Reply-To: <CAGRKETunznLbBZO1gnS7WZH5sn=TnmKPS4Gz_Nrtocoe5devbw@mail.gmail.com>
References: <CABsx9T0Ly67ZNJhoRQk0L9Q0-ucq3e=24b5Tg6GRKspRKKtP-g@mail.gmail.com>
	<20130731084538.GL16713@giles.gnomon.org.uk>
	<CABsx9T3Xvnw2H6awgnT7mr-HzJOqCp_nOVM57BD-B9mY4R43aQ@mail.gmail.com>
	<CABsx9T14Dfh8SEe6wsCJjE=S8hTcfDrAUNMBCjtkvM+UH-bAYQ@mail.gmail.com>
	<CAGRKETunznLbBZO1gnS7WZH5sn=TnmKPS4Gz_Nrtocoe5devbw@mail.gmail.com>
Message-ID: <CABsx9T22RQrQAAjGQ+hJix3LDXCdGkfMkxvv7xmxy1n4jM7SOw@mail.gmail.com>

On Thu, Aug 1, 2013 at 9:30 AM, E willbefull <ewillbefull at gmail.com> wrote:
> I think it's important to expect PaymentRequest-only bitcoin URIs in the
> future. Some types of payments (exotic transactions) may not make sense to
> have a single fallback address.

P2SH addresses already support all exotic transactions.

> Or, a page with a bitcoin URI link may be
> relying on a separate service provider to assemble the transaction.

Do you mean assemble the PaymentRequest message?  Because the payment
transaction will always be created by the customer's wallet software.

IF PaymentRequests take over the world and we get 100% wallet software
support, then I'd be happy to write another BIP that says that a
bitcoin: URI can be just bitcoin:?request=http...

-- 
--
Gavin Andresen



From ewillbefull at gmail.com  Wed Jul 31 23:52:40 2013
From: ewillbefull at gmail.com (E willbefull)
Date: Wed, 31 Jul 2013 17:52:40 -0600
Subject: [Bitcoin-development] Payment Protocol: BIP 70, 71, 72
In-Reply-To: <CABsx9T22RQrQAAjGQ+hJix3LDXCdGkfMkxvv7xmxy1n4jM7SOw@mail.gmail.com>
References: <CABsx9T0Ly67ZNJhoRQk0L9Q0-ucq3e=24b5Tg6GRKspRKKtP-g@mail.gmail.com>
	<20130731084538.GL16713@giles.gnomon.org.uk>
	<CABsx9T3Xvnw2H6awgnT7mr-HzJOqCp_nOVM57BD-B9mY4R43aQ@mail.gmail.com>
	<CABsx9T14Dfh8SEe6wsCJjE=S8hTcfDrAUNMBCjtkvM+UH-bAYQ@mail.gmail.com>
	<CAGRKETunznLbBZO1gnS7WZH5sn=TnmKPS4Gz_Nrtocoe5devbw@mail.gmail.com>
	<CABsx9T22RQrQAAjGQ+hJix3LDXCdGkfMkxvv7xmxy1n4jM7SOw@mail.gmail.com>
Message-ID: <CAGRKETuDX9ijUaJuo+U17qBwQZwCb4q4g7sJOQE8V9zJmm=B=Q@mail.gmail.com>

P2SH addresses support exotic transaction outputs, but not all exotic
transactions. This payment protocol can allow for combining multiple
outputs. A PaymentRequest for sending money to multiple parties, for
example, could not fall back to a single address.


On Wed, Jul 31, 2013 at 5:38 PM, Gavin Andresen <gavinandresen at gmail.com>wrote:

> On Thu, Aug 1, 2013 at 9:30 AM, E willbefull <ewillbefull at gmail.com>
> wrote:
> > I think it's important to expect PaymentRequest-only bitcoin URIs in the
> > future. Some types of payments (exotic transactions) may not make sense
> to
> > have a single fallback address.
>
> P2SH addresses already support all exotic transactions.
>
> > Or, a page with a bitcoin URI link may be
> > relying on a separate service provider to assemble the transaction.
>
> Do you mean assemble the PaymentRequest message?  Because the payment
> transaction will always be created by the customer's wallet software.
>
> IF PaymentRequests take over the world and we get 100% wallet software
> support, then I'd be happy to write another BIP that says that a
> bitcoin: URI can be just bitcoin:?request=http...
>
> --
> --
> Gavin Andresen
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130731/bdc484b2/attachment.html>

