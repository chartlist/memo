From jeremy at taplink.co  Sat Mar  1 06:26:39 2014
From: jeremy at taplink.co (Jeremy Spilman)
Date: Fri, 28 Feb 2014 22:26:39 -0800
Subject: [Bitcoin-development] Positive and negative feedback on certificate
	validation errors
Message-ID: <op.xb05iptvyldrnw@laptop-air>

We currently have subtle positive feedback of a signed payment request in  
the form of the green background. Unsigned requests simply show up without  
the green background, as well as requests which provide a certificate but  
have a missing or invalid signature.

There's a open bug (#3628) and pull request (#3684) to provide negative  
feedback (yellow background) for a missing or invalid signature, but it  
seems like there's some debate on whether bitcoind should do that...

If an attacker can avoid the negative feedback by just stripping the  
signature and setting pki_type to none, then arguably there's no security  
benefit by singling out badly signed payment requests from unsigned  
payment requests.

So perhaps the root problem is that the positive feedback (green  
background) is not strong enough to make its absence highly conspicuous to  
the end user.

As an aside, how could we go about implementing the equivalent of HTTP  
Strict Transport Security for payment protocol to prevent this trivial  
signature stripping attack? Is this a possible extension field merchants  
are interested in?




From laanwj at gmail.com  Sat Mar  1 07:26:57 2014
From: laanwj at gmail.com (Wladimir)
Date: Sat, 1 Mar 2014 08:26:57 +0100
Subject: [Bitcoin-development] Positive and negative feedback on
 certificate validation errors
In-Reply-To: <op.xb05iptvyldrnw@laptop-air>
References: <op.xb05iptvyldrnw@laptop-air>
Message-ID: <CA+s+GJBD-L8Lz+dsEgL+_xzJbrqjC7z_9Z45ow=xoccxwEdssQ@mail.gmail.com>

On Sat, Mar 1, 2014 at 7:26 AM, Jeremy Spilman <jeremy at taplink.co> wrote:

> There's a open bug (#3628) and pull request (#3684) to provide negative
> feedback (yellow background) for a missing or invalid signature, but it
> seems like there's some debate on whether bitcoind should do that...
>

The consensus there is to treat invalid and unsigned payment requests the
same (apart from debug error logging). After all, the cost to the attacker
to remove the signature or corrupt it is exactly the same.

I do recommend testing that pull request (#3684) to see if it improves
payment request reporting, and provide testing reports or suggestions in
the github comments.

I've been very busy the last few weeks with integrating and testing other
pre-0.9 changes so I have been unable to look at the visual side of payment
request stuff much. We could use some help there.

If an attacker can avoid the negative feedback by just stripping the
> signature and setting pki_type to none, then arguably there's no security
> benefit by singling out badly signed payment requests from unsigned
> payment requests.
>

Exactly.


> So perhaps the root problem is that the positive feedback (green
> background) is not strong enough to make its absence highly conspicuous to
> the end user.
>

Well, ideas to make the difference more conspicuous are welcome. The green
background is just to make a basic distinction.

If it involves any imagery or graphics we do need contributions (with the
appropriate MIT license), no one of us is an artist.


> As an aside, how could we go about implementing the equivalent of HTTP
> Strict Transport Security for payment protocol to prevent this trivial
> signature stripping attack? Is this a possible extension field merchants
> are interested in?
>

Such a thing would be interesting for a future BIP standard. I see one
problem here: for an unsigned payment request there isn't really an
"origin". Browser URI handlers don't send the referrer either.

This rules out adding a field to the Bitcoin URI 'requests from us must be
signed from now on' (there's no us).

The server that serves the payment requests *could* serve an HSTS-like
header 'only accept signed payment requests from us from now on'. The
client needs to remember this for this server. Then if someone has
compromised that server (or hijacked DNS) to serve fake and unsigned
payment requests, the client can block these.

Neither scenario will help in the case in which the server serving the
Bitcoin URIs is compromised.

Wladimir
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140301/93b80bf0/attachment.html>

From jeremy at taplink.co  Sat Mar  1 07:50:32 2014
From: jeremy at taplink.co (Jeremy Spilman)
Date: Fri, 28 Feb 2014 23:50:32 -0800
Subject: [Bitcoin-development] Positive and negative feedback on
 certificate validation errors
In-Reply-To: <CA+s+GJBD-L8Lz+dsEgL+_xzJbrqjC7z_9Z45ow=xoccxwEdssQ@mail.gmail.com>
References: <op.xb05iptvyldrnw@laptop-air>
	<CA+s+GJBD-L8Lz+dsEgL+_xzJbrqjC7z_9Z45ow=xoccxwEdssQ@mail.gmail.com>
Message-ID: <op.xb09eip8yldrnw@laptop-air>

On Fri, 28 Feb 2014 23:26:57 -0800, Wladimir <laanwj at gmail.com> wrote:

> Such a thing would be interesting for a future BIP standard. I see one  
> problem here: for an unsigned payment request there isn't really an  
> "origin". >Browser URI handlers don't send the referrer either.

Yeah, good point. If you have a cert, we have the CN from the cert, which  
becomes the string displayed as 'Pay To' and alternatively 'Merchant'.

But if there's no cert then all you have is memo.

So the best way to differentiate signed requests is by prominently  
displaying that Merchant string. Really the green part should just be the  
'Pay To' line, the rest is content. If it showed a BLANK 'Pay To' that  
would make the lack of certificate highly apparent.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140228/4ceb93c0/attachment.html>

From elombrozo at gmail.com  Sat Mar  1 12:29:48 2014
From: elombrozo at gmail.com (Eric Lombrozo)
Date: Sat, 1 Mar 2014 04:29:48 -0800
Subject: [Bitcoin-development] Making the H in HD keychains useful
Message-ID: <B837A283-4B5B-4753-A4A2-1AA27F1A2175@gmail.com>

I've been trying to find ways to make HD keychain wallets (BIP0032) really usable from an application development perspective. I think we all know a number of solid use cases and possible applications for the D in HD, but nobody seems to have really found a way to make use of the H in a way that is actually manageable from a usability standpoint.

After pondering it a bit more, I think I've stumbled upon at least a couple issues that seem to give hints as to how we can change this.

Hierarchical organizations do not generally tend to be designed up front, cast in stone. In the real world, hierarchies tend to evolve organically, growing new branches as entities differentiate themselves to different purposes. Organizations grow over time. Sometimes branches merge, sometimes branches die. This means that for HD keychains to be truly useful, they too need to be sufficiently flexible to adapt to the needs of a growing and evolving organization. It needs to be simple to create and move branches around as the need for them arises without having to plan the structure a priori.

A significant problem I'm runnign into in trying to build applications around the BIP0032 standard is the lack of a clear separation between signing keys and hierarchical nodes. That's to say, a child of a node can either be used as a signing key or as a parent for new branches to the tree. From a usability standpoint, what this means is that one must be very careful in how one allocates keys from the very beginning - if one mixes signing keys with new branching nodes in the same generation, the whole thing becomes a horrendous mess. Moreover, it is impossible to generally distinguish these two fundamentally different types of objects (at least from a use model perspective) just from the extended key representation, something that is certain to create significant confusion as we try to design applications that can share these types of objects.

An organization might begin as a single individual who just wants to generate signing keys for him/herself. Later on, this individual might bring on another individual or two and create new branches for them. With the current HD keychain structure, unless this individual made sure to set aside these new branches from the start, the individual is now forced to mix the new branches in at the same level of the hierarchy as the signing keys. Instead, it should be possible to branch off any node without having to worry at all about whether or not that node has been used to generate signing keys at all.

A possible workaround to this issue is to always allocate a specific child for hierarchical derivation and the rest of the children for signing keys. Then to create subbranches, the specific child would be used as the new parent, effectively alternating generations between signing keys and organizational nodes. However, this solution seems pretty ugly.

A better solution, IMO, is to only use BIP0032 for organizational hierarchy and have a different mechanism for generating a sequence of signing keys from a given node. This different mechanism could be used standalone by those not needing the full set of hierarchical features. For those who do want to use the hierarchical features, it could be seeded by the keys in the BIP0032 hierarchy. These individual signing keys would NEVER be represented in the same format as the organizational hierarchy nodes, thus ensuring applications can share these structures without risk of confusion.

Until we make this clear distinction between organizational hierarchy (which parallels real-world organizations) and signing keys (which are merely cryptographic primitives, preferably never even shown directly to most endusers), I think we'll fail to find good ways to make the H in HD keychains useful.

-Eric Lombrozo
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 801 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140301/7425caea/attachment.sig>

From hozer at hozed.org  Sat Mar  1 17:45:13 2014
From: hozer at hozed.org (Troy Benjegerdes)
Date: Sat, 1 Mar 2014 11:45:13 -0600
Subject: [Bitcoin-development] Decentralized digital asset exchange with
 honest pricing and market depth
In-Reply-To: <CAC1+kJPL0NpzihMUfuOvEaE8LoKZehS0PbXFCVMu4_N5MJCJfA@mail.gmail.com>
References: <20140209180458.GB20126@savin> <20140209204434.GA11488@savin>
	<20140210193247.GC17359@savin> <20140211175919.GV3180@nl.grid.coop>
	<20140214052159.GF31437@savin> <20140217054751.GY3180@nl.grid.coop>
	<CAC1+kJNTq2sMbORAU-HBSpTVE3ohzsxHrxXw9JOXZp5ux32Gtw@mail.gmail.com>
	<20140228013719.GA5786@savin>
	<CAC1+kJPL0NpzihMUfuOvEaE8LoKZehS0PbXFCVMu4_N5MJCJfA@mail.gmail.com>
Message-ID: <20140301174513.GP3180@nl.grid.coop>

> > You can make the same argument against Bitcoin itself you know...
> >
> > A Bitmessage-like network would be trivial to front-run via a sybil
> > attack. It's the fundemental problem with marketplaces - the data
> > they're trying to publish has to be public.
> 
> I don't see the Bitcoin analogy...
> Anyway, I still don't think the seller cares, if he sells at the price
> he was asking, what would he care about "front running" those parallel
> networks.
> I've seen many street markets without "public information" and they
> work just well.

The spot price for ammonia fertilizer, refined gasoline at terminals, 
and price of tea in china are not 'public information', yet these are
some of the largest traded commodities in the world, far exceeding 
the drop in the bucket that all cryptocoin transactions make.

I'd further argue that the *actual* price of corn (cash bid price at
elevators and ethanol plants) is not public information either. There
is a great deal of money traded in collecting and then distributing the
'cleared price' information. Have a look at 
http://www.interquote.com/template.cfm?navgroup=aboutlist&urlcode=12&view=1

 
> >> I don't think this will be a tragedy, because like we discussed on
> >> IRC, I don't think the primary goal of markets is price discovery, but
> >> trade itself.
> >>
> >> About historic data, the actual trades are always public, and some
> >> kind of "archivers" could collect and maintain old orders for historic
> >> bid and asks, etc.
> >
> > And again, how do you know that record is honest? Fact is without
> > proof-of-publication you just don't.
> 
> Well, the trades that appeared in the chain actually occurred.
> Buying to yourself at fake prices? Be careful, the miner could just
> separate the order and fill it himself. Or anyone paying a higher fee,
> for that matter.

You just made my long-term strategic argument for investing in my own
mining hardware so I can be sure to trade reliably.

> Again, you haven't addressed why the seller cares more about "accurate
> historic market data" than just his own fees and sell.
> 
> > You mean a reverse nLockTime that makes a transaction invalid after a
> > certain amount of time - that's dangerous in a reorg unfortunately as it
> > can make transactions permenantly invalid.
 
People who take money from buyers and sellers care most about 'accurate 
historic market data'. I just want to exchange my corn for e85, fertilizer,
and electricity, and audit the code that runs accounting for the exchange.

I really don't give a shit if there is 'accurate historic market data' as
long as **MY** personal trade data is accurate and I got a good enough price,
and I know who I'm dealing with.

I know someone smarter than me and with more money, market leverage, and 
political connections **WILL** game the system and distort the market data
history so they can take more money from buyers and sellers without actually
doing some usefull market function. 

As long as use buyers and sellers can see the code, and have a good eye for
knowing when someone's pushing the market around, we can just put our orders
in and relieve some speculators of their money.

Just get me working code for cross-chain trades, and we'll work on the 
accurate historic data problem later.

----------------------------------------------------------------------------
Troy Benjegerdes                 'da hozer'                  hozer at hozed.org
7 elements      earth::water::air::fire::mind::spirit::soul        grid.coop

      Never pick a fight with someone who buys ink by the barrel,
         nor try buy a hacker who makes money by the megahash




From jgarzik at bitpay.com  Sat Mar  1 18:22:56 2014
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Sat, 1 Mar 2014 13:22:56 -0500
Subject: [Bitcoin-development] Decentralized digital asset exchange with
 honest pricing and market depth
In-Reply-To: <20140301174513.GP3180@nl.grid.coop>
References: <20140209180458.GB20126@savin> <20140209204434.GA11488@savin>
	<20140210193247.GC17359@savin> <20140211175919.GV3180@nl.grid.coop>
	<20140214052159.GF31437@savin> <20140217054751.GY3180@nl.grid.coop>
	<CAC1+kJNTq2sMbORAU-HBSpTVE3ohzsxHrxXw9JOXZp5ux32Gtw@mail.gmail.com>
	<20140228013719.GA5786@savin>
	<CAC1+kJPL0NpzihMUfuOvEaE8LoKZehS0PbXFCVMu4_N5MJCJfA@mail.gmail.com>
	<20140301174513.GP3180@nl.grid.coop>
Message-ID: <CAJHLa0NMbeVneL3oYkuSUYXgoJYsEjQk_QFuzKZizYWfQnpWvw@mail.gmail.com>

This is wandering far off-topic for this mailing list.

On Sat, Mar 1, 2014 at 12:45 PM, Troy Benjegerdes <hozer at hozed.org> wrote:
>> > You can make the same argument against Bitcoin itself you know...
>> >
>> > A Bitmessage-like network would be trivial to front-run via a sybil
>> > attack. It's the fundemental problem with marketplaces - the data
>> > they're trying to publish has to be public.
>>
>> I don't see the Bitcoin analogy...
>> Anyway, I still don't think the seller cares, if he sells at the price
>> he was asking, what would he care about "front running" those parallel
>> networks.
>> I've seen many street markets without "public information" and they
>> work just well.
>
> The spot price for ammonia fertilizer, refined gasoline at terminals,
> and price of tea in china are not 'public information', yet these are
> some of the largest traded commodities in the world, far exceeding
> the drop in the bucket that all cryptocoin transactions make.
>
> I'd further argue that the *actual* price of corn (cash bid price at
> elevators and ethanol plants) is not public information either. There
> is a great deal of money traded in collecting and then distributing the
> 'cleared price' information. Have a look at
> http://www.interquote.com/template.cfm?navgroup=aboutlist&urlcode=12&view=1
>
>
>> >> I don't think this will be a tragedy, because like we discussed on
>> >> IRC, I don't think the primary goal of markets is price discovery, but
>> >> trade itself.
>> >>
>> >> About historic data, the actual trades are always public, and some
>> >> kind of "archivers" could collect and maintain old orders for historic
>> >> bid and asks, etc.
>> >
>> > And again, how do you know that record is honest? Fact is without
>> > proof-of-publication you just don't.
>>
>> Well, the trades that appeared in the chain actually occurred.
>> Buying to yourself at fake prices? Be careful, the miner could just
>> separate the order and fill it himself. Or anyone paying a higher fee,
>> for that matter.
>
> You just made my long-term strategic argument for investing in my own
> mining hardware so I can be sure to trade reliably.
>
>> Again, you haven't addressed why the seller cares more about "accurate
>> historic market data" than just his own fees and sell.
>>
>> > You mean a reverse nLockTime that makes a transaction invalid after a
>> > certain amount of time - that's dangerous in a reorg unfortunately as it
>> > can make transactions permenantly invalid.
>
> People who take money from buyers and sellers care most about 'accurate
> historic market data'. I just want to exchange my corn for e85, fertilizer,
> and electricity, and audit the code that runs accounting for the exchange.
>
> I really don't give a shit if there is 'accurate historic market data' as
> long as **MY** personal trade data is accurate and I got a good enough price,
> and I know who I'm dealing with.
>
> I know someone smarter than me and with more money, market leverage, and
> political connections **WILL** game the system and distort the market data
> history so they can take more money from buyers and sellers without actually
> doing some usefull market function.
>
> As long as use buyers and sellers can see the code, and have a good eye for
> knowing when someone's pushing the market around, we can just put our orders
> in and relieve some speculators of their money.
>
> Just get me working code for cross-chain trades, and we'll work on the
> accurate historic data problem later.
>
> ----------------------------------------------------------------------------
> Troy Benjegerdes                 'da hozer'                  hozer at hozed.org
> 7 elements      earth::water::air::fire::mind::spirit::soul        grid.coop
>
>       Never pick a fight with someone who buys ink by the barrel,
>          nor try buy a hacker who makes money by the megahash
>
>
> ------------------------------------------------------------------------------
> Flow-based real-time traffic analytics software. Cisco certified tool.
> Monitor traffic, SLAs, QoS, Medianet, WAAS etc. with NetFlow Analyzer
> Customize your own dashboards, set traffic alerts and generate reports.
> Network behavioral analysis & security monitoring. All-in-one tool.
> http://pubads.g.doubleclick.net/gampad/clk?id=126839071&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development



-- 
Jeff Garzik
Bitcoin core developer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From jgarzik at bitpay.com  Sat Mar  1 18:33:25 2014
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Sat, 1 Mar 2014 13:33:25 -0500
Subject: [Bitcoin-development] Decentralized digital asset exchange with
 honest pricing and market depth
In-Reply-To: <CACh7GpH2YDr2LBgnoxmNSwrufryzYwXkuo6uTk3-reRGCx6t8w@mail.gmail.com>
References: <20140209180458.GB20126@savin> <20140209204434.GA11488@savin>
	<20140210193247.GC17359@savin> <20140211175919.GV3180@nl.grid.coop>
	<20140214052159.GF31437@savin> <20140217054751.GY3180@nl.grid.coop>
	<CAC1+kJNTq2sMbORAU-HBSpTVE3ohzsxHrxXw9JOXZp5ux32Gtw@mail.gmail.com>
	<20140228013719.GA5786@savin>
	<CAC1+kJPL0NpzihMUfuOvEaE8LoKZehS0PbXFCVMu4_N5MJCJfA@mail.gmail.com>
	<20140301174513.GP3180@nl.grid.coop>
	<CAJHLa0NMbeVneL3oYkuSUYXgoJYsEjQk_QFuzKZizYWfQnpWvw@mail.gmail.com>
	<CACh7GpH2YDr2LBgnoxmNSwrufryzYwXkuo6uTk3-reRGCx6t8w@mail.gmail.com>
Message-ID: <CAJHLa0Ocs5foyROiVgB=xOj1CvE9fpKm8YJweWOYDuUzFw47+w@mail.gmail.com>

This is not bitcoin-philosophy, it's bitcoin-development.  Existential
philosophy belongs on IRC or the forums.


On Sat, Mar 1, 2014 at 1:28 PM, Mark Friedenbach <mark at monetize.io> wrote:
> Only if you view bitcoin as no more than a payment network.
>
> On Mar 1, 2014 10:24 AM, "Jeff Garzik" <jgarzik at bitpay.com> wrote:
>>
>> This is wandering far off-topic for this mailing list.
>>
>> On Sat, Mar 1, 2014 at 12:45 PM, Troy Benjegerdes <hozer at hozed.org> wrote:
>> >> > You can make the same argument against Bitcoin itself you know...
>> >> >
>> >> > A Bitmessage-like network would be trivial to front-run via a sybil
>> >> > attack. It's the fundemental problem with marketplaces - the data
>> >> > they're trying to publish has to be public.
>> >>
>> >> I don't see the Bitcoin analogy...
>> >> Anyway, I still don't think the seller cares, if he sells at the price
>> >> he was asking, what would he care about "front running" those parallel
>> >> networks.
>> >> I've seen many street markets without "public information" and they
>> >> work just well.
>> >
>> > The spot price for ammonia fertilizer, refined gasoline at terminals,
>> > and price of tea in china are not 'public information', yet these are
>> > some of the largest traded commodities in the world, far exceeding
>> > the drop in the bucket that all cryptocoin transactions make.
>> >
>> > I'd further argue that the *actual* price of corn (cash bid price at
>> > elevators and ethanol plants) is not public information either. There
>> > is a great deal of money traded in collecting and then distributing the
>> > 'cleared price' information. Have a look at
>> >
>> > http://www.interquote.com/template.cfm?navgroup=aboutlist&urlcode=12&view=1
>> >
>> >
>> >> >> I don't think this will be a tragedy, because like we discussed on
>> >> >> IRC, I don't think the primary goal of markets is price discovery,
>> >> >> but
>> >> >> trade itself.
>> >> >>
>> >> >> About historic data, the actual trades are always public, and some
>> >> >> kind of "archivers" could collect and maintain old orders for
>> >> >> historic
>> >> >> bid and asks, etc.
>> >> >
>> >> > And again, how do you know that record is honest? Fact is without
>> >> > proof-of-publication you just don't.
>> >>
>> >> Well, the trades that appeared in the chain actually occurred.
>> >> Buying to yourself at fake prices? Be careful, the miner could just
>> >> separate the order and fill it himself. Or anyone paying a higher fee,
>> >> for that matter.
>> >
>> > You just made my long-term strategic argument for investing in my own
>> > mining hardware so I can be sure to trade reliably.
>> >
>> >> Again, you haven't addressed why the seller cares more about "accurate
>> >> historic market data" than just his own fees and sell.
>> >>
>> >> > You mean a reverse nLockTime that makes a transaction invalid after a
>> >> > certain amount of time - that's dangerous in a reorg unfortunately as
>> >> > it
>> >> > can make transactions permenantly invalid.
>> >
>> > People who take money from buyers and sellers care most about 'accurate
>> > historic market data'. I just want to exchange my corn for e85,
>> > fertilizer,
>> > and electricity, and audit the code that runs accounting for the
>> > exchange.
>> >
>> > I really don't give a shit if there is 'accurate historic market data'
>> > as
>> > long as **MY** personal trade data is accurate and I got a good enough
>> > price,
>> > and I know who I'm dealing with.
>> >
>> > I know someone smarter than me and with more money, market leverage, and
>> > political connections **WILL** game the system and distort the market
>> > data
>> > history so they can take more money from buyers and sellers without
>> > actually
>> > doing some usefull market function.
>> >
>> > As long as use buyers and sellers can see the code, and have a good eye
>> > for
>> > knowing when someone's pushing the market around, we can just put our
>> > orders
>> > in and relieve some speculators of their money.
>> >
>> > Just get me working code for cross-chain trades, and we'll work on the
>> > accurate historic data problem later.
>> >
>> >
>> > ----------------------------------------------------------------------------
>> > Troy Benjegerdes                 'da hozer'
>> > hozer at hozed.org
>> > 7 elements      earth::water::air::fire::mind::spirit::soul
>> > grid.coop
>> >
>> >       Never pick a fight with someone who buys ink by the barrel,
>> >          nor try buy a hacker who makes money by the megahash
>> >
>> >
>> >
>> > ------------------------------------------------------------------------------
>> > Flow-based real-time traffic analytics software. Cisco certified tool.
>> > Monitor traffic, SLAs, QoS, Medianet, WAAS etc. with NetFlow Analyzer
>> > Customize your own dashboards, set traffic alerts and generate reports.
>> > Network behavioral analysis & security monitoring. All-in-one tool.
>> >
>> > http://pubads.g.doubleclick.net/gampad/clk?id=126839071&iu=/4140/ostg.clktrk
>> > _______________________________________________
>> > Bitcoin-development mailing list
>> > Bitcoin-development at lists.sourceforge.net
>> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>
>>
>>
>> --
>> Jeff Garzik
>> Bitcoin core developer and open source evangelist
>> BitPay, Inc.      https://bitpay.com/
>>
>>
>> ------------------------------------------------------------------------------
>> Flow-based real-time traffic analytics software. Cisco certified tool.
>> Monitor traffic, SLAs, QoS, Medianet, WAAS etc. with NetFlow Analyzer
>> Customize your own dashboards, set traffic alerts and generate reports.
>> Network behavioral analysis & security monitoring. All-in-one tool.
>>
>> http://pubads.g.doubleclick.net/gampad/clk?id=126839071&iu=/4140/ostg.clktrk
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development



-- 
Jeff Garzik
Bitcoin core developer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From mark at monetize.io  Sat Mar  1 18:28:22 2014
From: mark at monetize.io (Mark Friedenbach)
Date: Sat, 1 Mar 2014 10:28:22 -0800
Subject: [Bitcoin-development] Decentralized digital asset exchange with
 honest pricing and market depth
In-Reply-To: <CAJHLa0NMbeVneL3oYkuSUYXgoJYsEjQk_QFuzKZizYWfQnpWvw@mail.gmail.com>
References: <20140209180458.GB20126@savin> <20140209204434.GA11488@savin>
	<20140210193247.GC17359@savin> <20140211175919.GV3180@nl.grid.coop>
	<20140214052159.GF31437@savin> <20140217054751.GY3180@nl.grid.coop>
	<CAC1+kJNTq2sMbORAU-HBSpTVE3ohzsxHrxXw9JOXZp5ux32Gtw@mail.gmail.com>
	<20140228013719.GA5786@savin>
	<CAC1+kJPL0NpzihMUfuOvEaE8LoKZehS0PbXFCVMu4_N5MJCJfA@mail.gmail.com>
	<20140301174513.GP3180@nl.grid.coop>
	<CAJHLa0NMbeVneL3oYkuSUYXgoJYsEjQk_QFuzKZizYWfQnpWvw@mail.gmail.com>
Message-ID: <CACh7GpH2YDr2LBgnoxmNSwrufryzYwXkuo6uTk3-reRGCx6t8w@mail.gmail.com>

Only if you view bitcoin as no more than a payment network.
On Mar 1, 2014 10:24 AM, "Jeff Garzik" <jgarzik at bitpay.com> wrote:

> This is wandering far off-topic for this mailing list.
>
> On Sat, Mar 1, 2014 at 12:45 PM, Troy Benjegerdes <hozer at hozed.org> wrote:
> >> > You can make the same argument against Bitcoin itself you know...
> >> >
> >> > A Bitmessage-like network would be trivial to front-run via a sybil
> >> > attack. It's the fundemental problem with marketplaces - the data
> >> > they're trying to publish has to be public.
> >>
> >> I don't see the Bitcoin analogy...
> >> Anyway, I still don't think the seller cares, if he sells at the price
> >> he was asking, what would he care about "front running" those parallel
> >> networks.
> >> I've seen many street markets without "public information" and they
> >> work just well.
> >
> > The spot price for ammonia fertilizer, refined gasoline at terminals,
> > and price of tea in china are not 'public information', yet these are
> > some of the largest traded commodities in the world, far exceeding
> > the drop in the bucket that all cryptocoin transactions make.
> >
> > I'd further argue that the *actual* price of corn (cash bid price at
> > elevators and ethanol plants) is not public information either. There
> > is a great deal of money traded in collecting and then distributing the
> > 'cleared price' information. Have a look at
> >
> http://www.interquote.com/template.cfm?navgroup=aboutlist&urlcode=12&view=1
> >
> >
> >> >> I don't think this will be a tragedy, because like we discussed on
> >> >> IRC, I don't think the primary goal of markets is price discovery,
> but
> >> >> trade itself.
> >> >>
> >> >> About historic data, the actual trades are always public, and some
> >> >> kind of "archivers" could collect and maintain old orders for
> historic
> >> >> bid and asks, etc.
> >> >
> >> > And again, how do you know that record is honest? Fact is without
> >> > proof-of-publication you just don't.
> >>
> >> Well, the trades that appeared in the chain actually occurred.
> >> Buying to yourself at fake prices? Be careful, the miner could just
> >> separate the order and fill it himself. Or anyone paying a higher fee,
> >> for that matter.
> >
> > You just made my long-term strategic argument for investing in my own
> > mining hardware so I can be sure to trade reliably.
> >
> >> Again, you haven't addressed why the seller cares more about "accurate
> >> historic market data" than just his own fees and sell.
> >>
> >> > You mean a reverse nLockTime that makes a transaction invalid after a
> >> > certain amount of time - that's dangerous in a reorg unfortunately as
> it
> >> > can make transactions permenantly invalid.
> >
> > People who take money from buyers and sellers care most about 'accurate
> > historic market data'. I just want to exchange my corn for e85,
> fertilizer,
> > and electricity, and audit the code that runs accounting for the
> exchange.
> >
> > I really don't give a shit if there is 'accurate historic market data' as
> > long as **MY** personal trade data is accurate and I got a good enough
> price,
> > and I know who I'm dealing with.
> >
> > I know someone smarter than me and with more money, market leverage, and
> > political connections **WILL** game the system and distort the market
> data
> > history so they can take more money from buyers and sellers without
> actually
> > doing some usefull market function.
> >
> > As long as use buyers and sellers can see the code, and have a good eye
> for
> > knowing when someone's pushing the market around, we can just put our
> orders
> > in and relieve some speculators of their money.
> >
> > Just get me working code for cross-chain trades, and we'll work on the
> > accurate historic data problem later.
> >
> >
> ----------------------------------------------------------------------------
> > Troy Benjegerdes                 'da hozer'
> hozer at hozed.org
> > 7 elements      earth::water::air::fire::mind::spirit::soul
> grid.coop
> >
> >       Never pick a fight with someone who buys ink by the barrel,
> >          nor try buy a hacker who makes money by the megahash
> >
> >
> >
> ------------------------------------------------------------------------------
> > Flow-based real-time traffic analytics software. Cisco certified tool.
> > Monitor traffic, SLAs, QoS, Medianet, WAAS etc. with NetFlow Analyzer
> > Customize your own dashboards, set traffic alerts and generate reports.
> > Network behavioral analysis & security monitoring. All-in-one tool.
> >
> http://pubads.g.doubleclick.net/gampad/clk?id=126839071&iu=/4140/ostg.clktrk
> > _______________________________________________
> > Bitcoin-development mailing list
> > Bitcoin-development at lists.sourceforge.net
> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
>
> --
> Jeff Garzik
> Bitcoin core developer and open source evangelist
> BitPay, Inc.      https://bitpay.com/
>
>
> ------------------------------------------------------------------------------
> Flow-based real-time traffic analytics software. Cisco certified tool.
> Monitor traffic, SLAs, QoS, Medianet, WAAS etc. with NetFlow Analyzer
> Customize your own dashboards, set traffic alerts and generate reports.
> Network behavioral analysis & security monitoring. All-in-one tool.
>
> http://pubads.g.doubleclick.net/gampad/clk?id=126839071&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140301/cbe7ec2a/attachment.html>

From kgreenek at gmail.com  Sat Mar  1 20:42:18 2014
From: kgreenek at gmail.com (Kevin Greene)
Date: Sat, 1 Mar 2014 12:42:18 -0800
Subject: [Bitcoin-development] BIP70 extension to allow for identity
	delegation
In-Reply-To: <1393704464.6290.118.camel@mimiz>
References: <CANEZrP1eABw_x8o-Z9ac23e-dVvUWfZJ-hKfAak=-NicPhUv9g@mail.gmail.com>
	<1393704464.6290.118.camel@mimiz>
Message-ID: <CAEY8wq4KbfGteRf=UEwpxF7npa0=A3OReTdECxZE_02-8hjpAQ@mail.gmail.com>

Another example use-case to back up devrandom's point is using a twitter
handle as the "merchant name". In that example, a 3rd party service hosts
and signs the PaymentRequest, but when someone opens that PaymentRequest in
their wallet, they should know that they are paying the specified twitter
user.


On Sat, Mar 1, 2014 at 12:07 PM, Dev Random <c1.devrandom at niftybox.net>wrote:

> This looks like a good solution of the delegation use case for
> medium/large businesses.
>
> I'm wondering about the small business case.  A small business or an
> individual might not have the technical expertise to perform the
> delegation signature.  Normally the X509 keys are squirreled away on the
> merchant's web server and are not accessible through ordinary means.
> And actually, the merchant might not even have a standalone web
> presence.
>
> Do you think it makes sense to have another scheme where a merchant can
> be name spaced under the payment processor?  This would require just one
> additional field - the merchant identifier.  In effect, the PP would
> certify that "PP / merchant-id" generated this invoice directly on the
> PP system.
>
> On Fri, 2014-02-28 at 12:46 +0100, Mike Hearn wrote:
> > Now we're starting to see the first companies deploy BIP70, we're
> > encountering a need for identity delegation. This need was long
> > foreseen by the way: it's not in BIP70 because, well, we had to draw
> > the line for v1 somewhere, and this is an issue that mostly affects
> > payment processors. But I figured I'd start a thread anyway because
> > people keep asking me about it :)
> >
> >
> > Objective
> >
> >
> > Identity delegation means that a payment request can be signed by
> > someone who is not holding the certified private key. The most obvious
> > use case for this is payment processors like BitPay and Coinbase who
> > currently have to sign payment requests as themselves. Other use cases
> > might involve untrusted sales agents who want to be able to accept
> > payment as their employer, but cannot be trusted with a long-term
> > valuable secret, e.g. because they take their phone into areas with
> > high crime rates.
> >
> >
> > The lack of this is ok for v1 but not great, because:
> >
> >
> > 1) It requires the name of the *actual* recipient to be put in the
> > memo field, otherwise you don't have the nice receipt-like properties.
> > The memo field is just plain text though, it doesn't have any
> > exploitable structure.
> >
> >
> > 2) It gives a confusing UI, the user thinks they're paying e.g.
> > Overstock but their wallet UI tells them they're paying Coinbase
> >
> >
> > 3) Whilst these payment processors currently verify merchants so the
> > security risk is low, in future a lighter-weight model or competing
> > sites that allow open signups would give a weak security situation:  a
> > hacker who compromised your computer could sign up for some popular
> > payment processor under a false identity (or no identity), and wait
> > until you use your hacked computer to make a payment to someone else
> > using the same payment processor. They could then do an identity swap
> > of the real payment request for one of their own, and your Trezor
> > would still look the same. Avoiding this is a major motivation for the
> > entire system!
> >
> >
> > Also it just looks more professional if the name you see in the wallet
> > UI is correct.
> >
> >
> > Proposed implementation
> >
> >
> > We can fix this with a simple extension:
> >
> >
> > enum KeyType {
> >   SECP256K1 = 1
> > }
> >
> >
> > message ExtensionCert {
> >   required bytes signature = 1;
> >   required bytes public_key = 2;
> >   required KeyType key_type = 3;
> >   required uint32 expiry_time = 4;
> >   optional string memo = 5;
> > }
> >
> >
> > // modification
> > message X509Certificates {
> >   repeated bytes certificate = 1;
> >   repeated ExtensionCert extended_certs = 2;
> > }
> >
> >
> > message PaymentRequest {
> >   // new field
> >   optional bytes extended_signature = 6;
> > }
> >
> >
> > This allow us to define a so-called extended certificate, which is
> > conceptually the same as an X.509 certificate except simpler and
> > Bitcoin specific. To create one, you just format a ExtensionCert
> > message with an ECDSA public key from the payment processor (PP), set
> > signature to an empty array and then sign it using your SSL private
> > key. Obviously the resulting (most likely RSA) signature then goes
> > into the signature field of the ExtensionCert. The memo field could
> > optionally indicate the purpose of this cert, like "Delegation to
> > BitPay" but I don't think it'd ever appear in the UI, rather, it
> > should be there for debugging purposes.
> >
> >
> > The new ExtensionCert can then be provided back to the PP who adds it
> > to the X509Certificates message. In the PaymentRequest, there are now
> > two signature fields (this is for backwards compatibility). Because of
> > how the mechanism is designed they should not interfere with each
> > other - old implementations that don't understand the new
> > extended_signature field will drop it during reserialization to set
> > signature to the empty array, and thus signature should not cover that
> > field. On the other hand, extended_signature would cover signature.
> > Thus, for full backwards compatibility, you would:
> >
> >
> > 1) Sign the payment request using the PP's SSL cert, i.e. sign as
> > coinbase.com
> >
> >
> > 2) Then sign again using the PP's delegated ECDSA key, i.e. sign as
> > the merchant
> >
> >
> > The finished protobuf would show up in old clients as signed by
> > coinbase.com and by new clients as signed by overstock.com even though
> > Overstock did not provide their SSL key to coinbase.
> >
> >
> > If you have only an ExtensionCert and not any X.509 cert of your own,
> > then you cannot of course make backwards compatible signatures in this
> > way, and in that case you would miss out the signature field and set
> > the pki_type to a new value:  "x509+sha256+excert". Old wallets would
> > see that they don't understand this pki_type and treat the request as
> > unverified.
> >
> >
> > For maximum security the merchant may choose to set very short expiry
> > times (like, a day) and then have a cron job that uploads a new
> > ExtensionCert at the end of each expiry period. This means in the case
> > of PP compromise, the system reseals very fast.
> >
> >
> > Alternatives considered
> >
> >
> > We could always use a new pki_type and not bother with the two
> > signature fields. However, this means old wallets will show payment
> > requests as untrusted during the transition period. Some signing is
> > still better than none, security-wise.
> >
> >
> > We could attempt to fix the above by introducing a use of User-Agent
> > field to the case where a payment request is fetched via HTTP, so the
> > server can customise the PaymentRequest according to the capabilities
> > of the client. However, sometimes payment requests are not fetched via
> > HTTP, for example, they may be attached to an email, sent via an IM
> > network or sent over a Bluetooth socket. Nonetheless this may be a
> > useful thing to consider for future cases where the protocol may not
> > be extended in a backwards compatible manner.
> >
> >
> > We could create the extension cert as an X.509 cert, rather than a
> > custom type. However most CA's set path length constraints on their
> > intermediate certs that forbid this kind of extension (I forgot why,
> > possibly some kind of anti-DoS mitigation). Also re-using X.509 for
> > the extension cert would open up the risk of it being accepted by a
> > bogus SSL stack that didn't check the key usage constraints extension,
> > and that would allow for SSL delegation as well. It seems safer to
> > just use a different format that definitely won't be accepted.
> >
> >
> >
> >
> >
> >
> > Feedback welcome.
> >
> ------------------------------------------------------------------------------
> > Flow-based real-time traffic analytics software. Cisco certified tool.
> > Monitor traffic, SLAs, QoS, Medianet, WAAS etc. with NetFlow Analyzer
> > Customize your own dashboards, set traffic alerts and generate reports.
> > Network behavioral analysis & security monitoring. All-in-one tool.
> >
> http://pubads.g.doubleclick.net/gampad/clk?id=126839071&iu=/4140/ostg.clktrk
> > _______________________________________________
> > Bitcoin-development mailing list
> > Bitcoin-development at lists.sourceforge.net
> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
> --
> Miron
>
>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140301/2dd1527c/attachment.html>

From jeremy at taplink.co  Sun Mar  2 07:52:40 2014
From: jeremy at taplink.co (Jeremy Spilman)
Date: Sat, 01 Mar 2014 23:52:40 -0800
Subject: [Bitcoin-development] Payment Protocol Hash Comments
In-Reply-To: <op.xb05iptvyldrnw@laptop-air>
References: <op.xb05iptvyldrnw@laptop-air>
Message-ID: <op.xb2352ezyldrnw@laptop-air>

 From BIP70:

   If pki_type is "x509+sha256", then the Payment message is hashed using  
the
   SHA256 algorithm to produce the message digest that is signed. If  
pki_type
   is "x509+sha1", then the SHA1 algorithm is used.

A couple minor comments;

  - I think it meant to say the field to be hashed is 'PaymentRequest' not  
'Payment' message -- probably got renamed at some point and this is an old  
reference calling it by its original name.

  - Could be a bit more explicit about the hashing, e.g. 'copy the  
PaymentRequest, set the signature field to the empty string, serialize to  
a byte[] and hash.

  - SHA1 is retiring, any particular reason to even have it in there at all?

  - Should there any way for the end-user to see details like the pki_type  
and the certificate chain, like browser do?


Thanks,
Jeremy




From mike at plan99.net  Sun Mar  2 08:44:21 2014
From: mike at plan99.net (Mike Hearn)
Date: Sun, 2 Mar 2014 09:44:21 +0100
Subject: [Bitcoin-development] Payment Protocol Hash Comments
In-Reply-To: <op.xb2352ezyldrnw@laptop-air>
References: <op.xb05iptvyldrnw@laptop-air>
	<op.xb2352ezyldrnw@laptop-air>
Message-ID: <CANEZrP22SF4bD2pA3MyNmAojUmtZ20r=eL2Lgt=Fa4ZJyG=5SA@mail.gmail.com>

SHA-1 support is there for PHP developers. Apparently it can't do SHA-2.
On 2 Mar 2014 08:53, "Jeremy Spilman" <jeremy at taplink.co> wrote:

>  From BIP70:
>
>    If pki_type is "x509+sha256", then the Payment message is hashed using
> the
>    SHA256 algorithm to produce the message digest that is signed. If
> pki_type
>    is "x509+sha1", then the SHA1 algorithm is used.
>
> A couple minor comments;
>
>   - I think it meant to say the field to be hashed is 'PaymentRequest' not
> 'Payment' message -- probably got renamed at some point and this is an old
> reference calling it by its original name.
>
>   - Could be a bit more explicit about the hashing, e.g. 'copy the
> PaymentRequest, set the signature field to the empty string, serialize to
> a byte[] and hash.
>
>   - SHA1 is retiring, any particular reason to even have it in there at
> all?
>
>   - Should there any way for the end-user to see details like the pki_type
> and the certificate chain, like browser do?
>
>
> Thanks,
> Jeremy
>
>
>
> ------------------------------------------------------------------------------
> Flow-based real-time traffic analytics software. Cisco certified tool.
> Monitor traffic, SLAs, QoS, Medianet, WAAS etc. with NetFlow Analyzer
> Customize your own dashboards, set traffic alerts and generate reports.
> Network behavioral analysis & security monitoring. All-in-one tool.
>
> http://pubads.g.doubleclick.net/gampad/clk?id=126839071&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140302/35e640c6/attachment.html>

From drak at zikula.org  Sun Mar  2 08:52:41 2014
From: drak at zikula.org (Drak)
Date: Sun, 2 Mar 2014 08:52:41 +0000
Subject: [Bitcoin-development] Payment Protocol Hash Comments
In-Reply-To: <CANEZrP22SF4bD2pA3MyNmAojUmtZ20r=eL2Lgt=Fa4ZJyG=5SA@mail.gmail.com>
References: <op.xb05iptvyldrnw@laptop-air> <op.xb2352ezyldrnw@laptop-air>
	<CANEZrP22SF4bD2pA3MyNmAojUmtZ20r=eL2Lgt=Fa4ZJyG=5SA@mail.gmail.com>
Message-ID: <CANAnSg1fwkzXebbCMEf6XeGD0SG+ny=vKW-2nC_40yhkn1LVkg@mail.gmail.com>

Not true, PHP does support sha2

http://php.net/manual/en/mhash.constants.php
http://php.net/manual/en/function.hash-algos.php#refsect1-function.hash-algos-examples
On 2 Mar 2014 08:44, "Mike Hearn" <mike at plan99.net> wrote:

> SHA-1 support is there for PHP developers. Apparently it can't do SHA-2.
> On 2 Mar 2014 08:53, "Jeremy Spilman" <jeremy at taplink.co> wrote:
>
>>  From BIP70:
>>
>>    If pki_type is "x509+sha256", then the Payment message is hashed using
>> the
>>    SHA256 algorithm to produce the message digest that is signed. If
>> pki_type
>>    is "x509+sha1", then the SHA1 algorithm is used.
>>
>> A couple minor comments;
>>
>>   - I think it meant to say the field to be hashed is 'PaymentRequest' not
>> 'Payment' message -- probably got renamed at some point and this is an old
>> reference calling it by its original name.
>>
>>   - Could be a bit more explicit about the hashing, e.g. 'copy the
>> PaymentRequest, set the signature field to the empty string, serialize to
>> a byte[] and hash.
>>
>>   - SHA1 is retiring, any particular reason to even have it in there at
>> all?
>>
>>   - Should there any way for the end-user to see details like the pki_type
>> and the certificate chain, like browser do?
>>
>>
>> Thanks,
>> Jeremy
>>
>>
>>
>> ------------------------------------------------------------------------------
>> Flow-based real-time traffic analytics software. Cisco certified tool.
>> Monitor traffic, SLAs, QoS, Medianet, WAAS etc. with NetFlow Analyzer
>> Customize your own dashboards, set traffic alerts and generate reports.
>> Network behavioral analysis & security monitoring. All-in-one tool.
>>
>> http://pubads.g.doubleclick.net/gampad/clk?id=126839071&iu=/4140/ostg.clktrk
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>
>
>
> ------------------------------------------------------------------------------
> Flow-based real-time traffic analytics software. Cisco certified tool.
> Monitor traffic, SLAs, QoS, Medianet, WAAS etc. with NetFlow Analyzer
> Customize your own dashboards, set traffic alerts and generate reports.
> Network behavioral analysis & security monitoring. All-in-one tool.
>
> http://pubads.g.doubleclick.net/gampad/clk?id=126839071&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140302/f8fc2a2c/attachment.html>

From andreas at schildbach.de  Sun Mar  2 09:47:48 2014
From: andreas at schildbach.de (Andreas Schildbach)
Date: Sun, 02 Mar 2014 10:47:48 +0100
Subject: [Bitcoin-development] Payment Protocol for Face-to-face Payments
In-Reply-To: <lc5hmg$1jh$1@ger.gmane.org>
References: <lc5hmg$1jh$1@ger.gmane.org>
Message-ID: <leuunm$tjk$1@ger.gmane.org>

I've written up a document about all the different methods on how the
payment protocol (both the old one and BIP70) is used in Bitcoin Wallet.
It only provides an overview -- I plan to go into details with separate
(BIP?) documents where needed.

https://github.com/schildbach/bitcoin-wallet/wiki/Payment-Requests

If you have any questions about compatibility, don't hesitate to contact me.


On 01/27/2014 12:59 PM, Andreas Schildbach wrote:

> As promised I'd like to present my work done on leveraging the payment
> protocol for face-to-face payments.
> [...]





From mike at plan99.net  Sun Mar  2 10:37:48 2014
From: mike at plan99.net (Mike Hearn)
Date: Sun, 2 Mar 2014 11:37:48 +0100
Subject: [Bitcoin-development] Positive and negative feedback on
 certificate validation errors
In-Reply-To: <op.xb09eip8yldrnw@laptop-air>
References: <op.xb05iptvyldrnw@laptop-air>
	<CA+s+GJBD-L8Lz+dsEgL+_xzJbrqjC7z_9Z45ow=xoccxwEdssQ@mail.gmail.com>
	<op.xb09eip8yldrnw@laptop-air>
Message-ID: <CANEZrP3V+AhoMwq=UmatrhF19cswVm3LX19PwqrURPFqnTw-Xg@mail.gmail.com>

I'm hoping I can convince Saivann to do a bit of graphics work for this at
some point :-)

Something like a green stamp that appears (like a watermark) in the
background, might be good.


On Sat, Mar 1, 2014 at 8:50 AM, Jeremy Spilman <jeremy at taplink.co> wrote:

>  On Fri, 28 Feb 2014 23:26:57 -0800, Wladimir <laanwj at gmail.com> wrote:
>
> Such a thing would be interesting for a future BIP standard. I see one
> problem here: for an unsigned payment request there isn't really an
> "origin". Browser URI handlers don't send the referrer either.
>
>
> Yeah, good point. If you have a cert, we have the CN from the cert, which
> becomes the string displayed as 'Pay To' and alternatively 'Merchant'.
>
> But if there's no cert then all you have is memo.
>
> So the best way to differentiate signed requests is by prominently
> displaying that Merchant string. Really the green part should just be the
> 'Pay To' line, the rest is content. If it showed a BLANK 'Pay To' that
> would make the lack of certificate highly apparent.
>
>
>
>
> ------------------------------------------------------------------------------
> Flow-based real-time traffic analytics software. Cisco certified tool.
> Monitor traffic, SLAs, QoS, Medianet, WAAS etc. with NetFlow Analyzer
> Customize your own dashboards, set traffic alerts and generate reports.
> Network behavioral analysis & security monitoring. All-in-one tool.
>
> http://pubads.g.doubleclick.net/gampad/clk?id=126839071&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140302/8bc71fa8/attachment.html>

From jeremy at taplink.co  Sun Mar  2 10:38:04 2014
From: jeremy at taplink.co (Jeremy Spilman)
Date: Sun, 02 Mar 2014 02:38:04 -0800
Subject: [Bitcoin-development] BIP70 extension to allow for identity
 delegation
In-Reply-To: <CANEZrP1eABw_x8o-Z9ac23e-dVvUWfZJ-hKfAak=-NicPhUv9g@mail.gmail.com>
References: <CANEZrP1eABw_x8o-Z9ac23e-dVvUWfZJ-hKfAak=-NicPhUv9g@mail.gmail.com>
Message-ID: <op.xb3btqp7yldrnw@laptop-air>

On Fri, 28 Feb 2014 03:46:49 -0800, Mike Hearn <mike at plan99.net> wrote:

> 3) Whilst these payment processors currently verify merchants so the  
> security risk is low, in future a lighter-weight model or competing  
> sites that >allow open signups would give a weak security situation: a  
> hacker who compromised your computer could sign up for some popular  
> payment >processor under a false identity (or no identity), and wait  
> until you use your hacked computer to make a payment to someone else  
> using the same >payment processor. They could then do an identity swap  
> of the real payment request for one of their own, and your Trezor would  
> still look the same. >Avoiding this is a major motivation for the entire  
> system!

Let me restate that, it's a huge problem...

Alice's system is compromised,
Mallory intercepts a payment request being sent to Alice from payment  
processor X on behaf of merchant X.
Mallory regenerates a spoof payment request which pays to M, from the same  
payment processor
Alice can't tell Mallory's spoofed PR apart from Merchant X's and thinks  
she's paying Merchant X

It might be a bit challenging for M to generate the new PR on-the-fly  
without being noticed, but that's not a security guarantee.

Perhaps the UI just isn't expressive enough currently to expose this  
situation in any way, let alone reliably alert the user to the issue,  
because there's no way for the payment processor to get authenticated  
fields other than memo into the UI.

Today the only solution is for the payment processor to strictly control  
the 'memo' field so Mallory wouldn't be able to make his own PR that  
looked exactly like merchant Y's. But maybe it's too subtle to make  
payment processors embed that kind of information.

So is the main goal is to provide a structured way to embed this  
information in the PR and expect that user interfaces will display them to  
end users? If that's the case, I don't think we need an entirely secondary  
certificate, or cross signing from a secondary ECDSA key.

A poor solution: If the UI included some sort of certificate viewer, even  
just tied to the OS certificate viewer, and made the cert available for  
inspection, at least the merchant would have a chance to put some fields  
in there which a very advanced user might actually find. But this was  
discussed a while ago and I think the primary problem is the difficulty in  
getting a CA to let you embed any additional fields in your certificate in  
the first place, plus you don't want to generate a new cert for each  
merchant.

A somewhat better option: Some additional fields defined in an extension  
which are reliably shown in the UI. We could try to define specific  
fields, like 'DelegateCN' which would possibly override the primary CN...  
As an aside, I think you can never allow actually overriding the CN  
displayed in the UI directly, the most you can do is add another field in  
the UI to show this string. First I need to know it's from Payment  
Processor X, and then maybe we can let the payment processor make some  
additional claim, like yes you are paying irs.gov. You can't give the  
impression that Payment Processor X is not actually man-in-the-middle.

Maybe the simplest would be a single field expected to contain a delimited  
key/value string (of course JSON) which could be shown as additional lines  
of labeled text in the UI. I don't want to give the "merchant" too much  
dynamic control over what the user's screen will display, but making it  
somewhat dynamic might add some future proofing.

I think any additional extension fields should be hashed using the hash  
function specified in pki_type and signed by X509Certificates.certifcate  
private key. No extended_certs required -- I'm thinking something like;

message PaymentRequest {
// new field
  optional bytes extended_properties = 6;
  optional bytes extended_properties_sig = 7;
}


Thanks,
Jeremy
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140302/1195f53c/attachment.html>

From mike at plan99.net  Sun Mar  2 10:39:18 2014
From: mike at plan99.net (Mike Hearn)
Date: Sun, 2 Mar 2014 11:39:18 +0100
Subject: [Bitcoin-development] Payment Protocol Hash Comments
In-Reply-To: <CANAnSg1fwkzXebbCMEf6XeGD0SG+ny=vKW-2nC_40yhkn1LVkg@mail.gmail.com>
References: <op.xb05iptvyldrnw@laptop-air> <op.xb2352ezyldrnw@laptop-air>
	<CANEZrP22SF4bD2pA3MyNmAojUmtZ20r=eL2Lgt=Fa4ZJyG=5SA@mail.gmail.com>
	<CANAnSg1fwkzXebbCMEf6XeGD0SG+ny=vKW-2nC_40yhkn1LVkg@mail.gmail.com>
Message-ID: <CANEZrP3owLtLnBHZ4vEBYcdkQ0WtpDDQ8CXK+92oNd1rgaEZyg@mail.gmail.com>

I'm just repeating the rationale Gavin gave me for adding this to the spec
last year when he was implementing it. Perhaps it only applied to some
versions of PHP or something like that.

Jeremy, good comments. A pull request to fix those would be good.

One issue I seem looming on the horizon is that we'll need a version of the
payment protocol document that's living. Trying to reverse engineer the
current spec by manually reading all the BIPs and layering them in your
head is a non starter.




On Sun, Mar 2, 2014 at 9:52 AM, Drak <drak at zikula.org> wrote:

> Not true, PHP does support sha2
>
> http://php.net/manual/en/mhash.constants.php
>
> http://php.net/manual/en/function.hash-algos.php#refsect1-function.hash-algos-examples
> On 2 Mar 2014 08:44, "Mike Hearn" <mike at plan99.net> wrote:
>
>> SHA-1 support is there for PHP developers. Apparently it can't do SHA-2.
>> On 2 Mar 2014 08:53, "Jeremy Spilman" <jeremy at taplink.co> wrote:
>>
>>>  From BIP70:
>>>
>>>    If pki_type is "x509+sha256", then the Payment message is hashed using
>>> the
>>>    SHA256 algorithm to produce the message digest that is signed. If
>>> pki_type
>>>    is "x509+sha1", then the SHA1 algorithm is used.
>>>
>>> A couple minor comments;
>>>
>>>   - I think it meant to say the field to be hashed is 'PaymentRequest'
>>> not
>>> 'Payment' message -- probably got renamed at some point and this is an
>>> old
>>> reference calling it by its original name.
>>>
>>>   - Could be a bit more explicit about the hashing, e.g. 'copy the
>>> PaymentRequest, set the signature field to the empty string, serialize to
>>> a byte[] and hash.
>>>
>>>   - SHA1 is retiring, any particular reason to even have it in there at
>>> all?
>>>
>>>   - Should there any way for the end-user to see details like the
>>> pki_type
>>> and the certificate chain, like browser do?
>>>
>>>
>>> Thanks,
>>> Jeremy
>>>
>>>
>>>
>>> ------------------------------------------------------------------------------
>>> Flow-based real-time traffic analytics software. Cisco certified tool.
>>> Monitor traffic, SLAs, QoS, Medianet, WAAS etc. with NetFlow Analyzer
>>> Customize your own dashboards, set traffic alerts and generate reports.
>>> Network behavioral analysis & security monitoring. All-in-one tool.
>>>
>>> http://pubads.g.doubleclick.net/gampad/clk?id=126839071&iu=/4140/ostg.clktrk
>>> _______________________________________________
>>> Bitcoin-development mailing list
>>> Bitcoin-development at lists.sourceforge.net
>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>>
>>
>>
>> ------------------------------------------------------------------------------
>> Flow-based real-time traffic analytics software. Cisco certified tool.
>> Monitor traffic, SLAs, QoS, Medianet, WAAS etc. with NetFlow Analyzer
>> Customize your own dashboards, set traffic alerts and generate reports.
>> Network behavioral analysis & security monitoring. All-in-one tool.
>>
>> http://pubads.g.doubleclick.net/gampad/clk?id=126839071&iu=/4140/ostg.clktrk
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>
>>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140302/6ec02843/attachment.html>

From mike at plan99.net  Sun Mar  2 10:44:00 2014
From: mike at plan99.net (Mike Hearn)
Date: Sun, 2 Mar 2014 11:44:00 +0100
Subject: [Bitcoin-development] BIP70 extension to allow for identity
	delegation
In-Reply-To: <op.xb3btqp7yldrnw@laptop-air>
References: <CANEZrP1eABw_x8o-Z9ac23e-dVvUWfZJ-hKfAak=-NicPhUv9g@mail.gmail.com>
	<op.xb3btqp7yldrnw@laptop-air>
Message-ID: <CANEZrP0bkyO=L_9RAbgGCXhWSn+Tc_F12tMxqVz9d0Vd=kaU8w@mail.gmail.com>

>
> Perhaps the UI just isn't expressive enough currently to expose this
> situation in any way, let alone reliably alert the user to the issue,
> because there's no way for the payment processor to get authenticated
> fields other than memo into the UI.
>

I think for now as long as payment processors include the merchant name in
the memo, that's good - as long as hardware devices or second factor
wallets display the memo as well! Trezor has a small screen, I don't know
how feasible displaying the whole memo is there though - hence an interest
in something better. For now we can probably muddle through.


> A poor solution: If the UI included some sort of certificate viewer, even
> just tied to the OS certificate viewer, and made the cert available for
> inspection, at least the merchant would have a chance to put some fields in
> there which a very advanced user might actually find.
>

Not really interested in solutions that only help very advanced users.
Besides, my understanding is that most PKI CA's will not sign certs that
include arbitrary data they don't understand for I guess the obvious
security reasons (generally signing things you don't understand is a bad
idea). But I've never actually tried it.

We don't want anyone to have to go back to their CA anyway, especially not
with special requests.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140302/05a453e0/attachment.html>

From mike at plan99.net  Sun Mar  2 10:57:39 2014
From: mike at plan99.net (Mike Hearn)
Date: Sun, 2 Mar 2014 11:57:39 +0100
Subject: [Bitcoin-development] BIP70 extension to allow for identity
	delegation
In-Reply-To: <1393704464.6290.118.camel@mimiz>
References: <CANEZrP1eABw_x8o-Z9ac23e-dVvUWfZJ-hKfAak=-NicPhUv9g@mail.gmail.com>
	<1393704464.6290.118.camel@mimiz>
Message-ID: <CANEZrP0+q3FNF4z89Ow-S8D5ZeBQAc64YGRPLGEfk2dWTWyfyA@mail.gmail.com>

On Sat, Mar 1, 2014 at 9:07 PM, Dev Random <c1.devrandom at niftybox.net>wrote:

> I'm wondering about the small business case.  A small business or an
> individual might not have the technical expertise to perform the
> delegation signature.


If they take delivery of an SSL cert from the CA themselves, I don't see
why it'd be an issue. A simple GUI app can be produced that let's you open
the CA cert files and spits out the ExtendedCert file, which you then send
to the PP.

However, for small businesses like local shops, yes we don't expect them to
have a CA cert at the moment. Many of them do have small websites but for
those that don't, I don't think any great solutions exist yet. A virgin
market waiting to be tapped, perhaps ...


> Do you think it makes sense to have another scheme where a merchant can
> be name spaced under the payment processor?  This would require just one
> additional field - the merchant identifier.
>

What is "the merchant identifier" exactly, and what does it mean? If this
question is left unresolved, then it doesn't mean anything and as such it's
equivalent to putting the merchant name in the memo field, which is fine
and what I expect to happen for now.

If it's resolved, then it makes payment processors into certificate
authorities themselves. I think such a solution would be spiffy, but it can
be done within the same framework we have today by just having wallets add
some Bitcoin specific roots to their trust store before PKI verification.
For example, BitPay could become their own CA that doesn't issue SSL certs
but rather "local business certs" that contain a verified street address.
Indeed X.509 certs include X.520 names, that's one reason they're so damn
complicated, and that's already got ways to express organisation names.

Actually setting such a scheme up requires real work though. If we want a
wallet to display something like:

   "Pay to:  Room 77, Graefestra?e 77, Berlin"

then the question is, how is that verified and what does it mean when a
payment processor issues a cert containing it? Did someone physically visit
them? Did they just check on Google Maps? Does it mean it's a real
incorporated business or could it just be the address of a childs lemonade
stand?

My inclination would be to say that the ID requirements should be low and
cheap; for our primary use case of making hardware wallets secure, you
don't need robust ID verification, you just need to ensure a MITM can't
issue themselves duplicated ID's on the fly. Just posting a postcard with a
nonce on it would be sufficient IMO (or making a phone call to a number
obtained from a previously verified business listing).

Alternatively, a bitcoin payment processor CA could make visiting a
business, gathering photo evidence and issuing a cert into a kind of
microwork task with the PP/CA acting as a broker.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140302/67b6c21a/attachment.html>

From mike at plan99.net  Sun Mar  2 11:50:59 2014
From: mike at plan99.net (Mike Hearn)
Date: Sun, 2 Mar 2014 12:50:59 +0100
Subject: [Bitcoin-development] Payment Protocol for Face-to-face Payments
In-Reply-To: <leuunm$tjk$1@ger.gmane.org>
References: <lc5hmg$1jh$1@ger.gmane.org>
	<leuunm$tjk$1@ger.gmane.org>
Message-ID: <CANEZrP3nQfvDArKTRgje0Cus4G2JD_zpxSjA3fXfxM2TNAP80Q@mail.gmail.com>

Thanks Andreas.

For BIP standardisation, I think the VIEW intent seems like an obvious one.
Bluetooth support probably should come later if/when we put encryption/auth
on the RFCOMM link (probably SSL).
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140302/17be30e1/attachment.html>

From gavinandresen at gmail.com  Sun Mar  2 13:54:12 2014
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Sun, 2 Mar 2014 08:54:12 -0500
Subject: [Bitcoin-development] 0.9.0 release candidate two
Message-ID: <CABsx9T3j8rmQzJTdWX5M2kk=V7J3i6SFgL5fPCOfL1m0hT_-wg@mail.gmail.com>

Please download and help test 0.9.0rc2; binaries are available from:
   https://bitcoin.org/bin/0.9.0/test/

If no serious bugs are found in this release candidate, it will be the
final 0.9.0 release.

Release notes (please help proofread/improve these, too):
---------------------------------------------------------------------------

Bitcoin Core version 0.9.0rc2 is now available from:

  https://bitcoin.org/bin/0.9.0/test/

This is a release candidate for a new major version. A major version brings
both new features and bug fixes.

Please report bugs using the issue tracker at github:

  https://github.com/bitcoin/bitcoin/issues

How to Upgrade
--------------

If you are running an older version, shut it down. Wait until it has
completely
shut down (which might take a few minutes for older versions), uninstall all
earlier versions of Bitcoin, then run the installer (on Windows) or just
copy
over /Applications/Bitcoin-Qt (on Mac) or bitcoind/bitcoin-qt (on Linux).

If you are upgrading from version 0.7.2 or earlier, the first time you run
0.9.0 your blockchain files will be re-indexed, which will take anywhere
from
30 minutes to several hours, depending on the speed of your machine.

On Windows, do not forget to uninstall all earlier versions of the Bitcoin
client first, especially if you are switching to the 64-bit version.

Windows 64-bit installer
-------------------------

New in 0.9.0 is the Windows 64-bit version of the client. There have been
frequent reports of users running out of virtual memory on 32-bit systems
during the initial sync. Because of this it is recommended to install the
64-bit version if your system supports it.

NOTE: Release candidate 2 windows binaries are not code-signed; use pgp
and the SHA256SUMS.asc file to make sure your binaries are correct.
The final 0.9.0 release Windows setup.exe binaries will be code-signed.

OSX 10.5 / 32-bit no longer supported
-------------------------------------

0.9.0 drops support for older Macs. The minimum requirements are now
a 64-bit-capable CPU running OSX 10.6 or later.

Rebranding to Bitcoin Core
---------------------------

To reduce confusion between Bitcoin-the-network and Bitcoin-the-software we
have renamed the reference client to Bitcoin Core.

Autotools build system
-----------------------

For 0.9.0 we switched to an autotools-based build system instead of
individual
(q)makefiles.

Using the standard "./autogen.sh; ./configure; make" to build Bitcoin-Qt and
bitcoind makes it easier for experienced open source developers to
contribute
to the project.

Be sure to check doc/build-*.md for your platform before building from
source.

Bitcoin-cli
-------------

Another change in the 0.9 release is moving away from the bitcoind
executable
functioning both as a server and as a RPC client. The RPC client
functionality
("tell the running bitcoin daemon to do THIS") was split into a separate
executable, 'bitcoin-cli'. The RPC client code will eventually be removed
from
bitcoind, but will be kept for backwards compatibility for a release or two.

`walletpassphrase` RPC
-----------------------

The behavior of the `walletpassphrase` RPC when the wallet is already
unlocked
has changed between 0.8 and 0.9.

The 0.8 behavior of `walletpassphrase` is to fail when the wallet is
already unlocked:

    > walletpassphrase 1000
    walletunlocktime = now + 1000
    > walletpassphrase 10
    Error: Wallet is already unlocked (old unlock time stays)

The new behavior of `walletpassphrase` is to set a new unlock time
overriding
the old one:

    > walletpassphrase 1000
    walletunlocktime = now + 1000
    > walletpassphrase 10
    walletunlocktime = now + 10 (overriding the old unlock time)

Transaction malleability-related fixes
--------------------------------------

This release contains a few fixes for transaction id malleability issues:

- -nospendzeroconfchange command-line option, to avoid spending
  zero-confirmation change
- IsStandard() transaction rules tightened to prevent relaying and mining of
  mutated transactions
- Additional information in listtransactions/gettransaction output to
  report wallet transactions that conflict with each other because
  they spend the same outputs.
- Bug fixes to the getbalance/listaccounts RPC commands, which would report
  incorrect balances for double-spent (or mutated) transactions.
- New option: -zapwallettxes to rebuild the wallet's transaction information

Transaction Fees
----------------

This release drops the default fee required to relay transactions across the
network to 0.01mBTC per kilobyte. Note that getting a transaction relayed
across the network does NOT guarantee that the transaction will be
accepted by a miner and included in a block, and the default fee accepted
by miners remains 0.1mBTC per kilobyte.

As in previous releases, the relay fee may be changed with the
-minrelaytxfee
command-line option, and miners may change the default minimum fee they
accept
with the -mintxfee command-line option.

0.9.0rc2 Release notes
=======================

RPC:

- New notion of 'conflicted' transactions, reported as
  confirmations: -1
- 'listreceivedbyaddress' now provides tx ids
- Add raw transaction hex to 'gettransaction' output
- Updated help and tests for 'getreceivedby(account|address)'
- In 'getblock', accept 2nd 'verbose' parameter, similar to
getrawtransaction,
  but defaulting to 1 for backward compatibility
- Add 'verifychain', to verify chain database at runtime
- Add 'dumpwallet' and 'importwallet' RPCs
- 'keypoolrefill' gains optional size parameter
- Add 'getbestblockhash', to return tip of best chain
- Add 'chainwork' (the total work done by all blocks since the genesis
block)
  to 'getblock' output
- Make RPC password resistant to timing attacks
- Clarify help messages and add examples
- Add 'getrawchangeaddress' call for raw transaction change destinations
- Reject insanely high fees by default in 'sendrawtransaction'
- Add RPC call 'decodescript' to decode a hex-encoded transaction script
- Make 'validateaddress' provide redeemScript
- Add 'getnetworkhashps' to get the calculated network hashrate
- New RPC 'ping' command to request ping, new 'pingtime' and 'pingwait'
fields
  in 'getpeerinfo' output
- Adding new 'addrlocal' field to 'getpeerinfo' output
- Add verbose boolean to 'getrawmempool'
- Add rpc command 'getunconfirmedbalance' to obtain total unconfirmed
balance
- Explicitly ensure that wallet is unlocked in `importprivkey`
- Add check for valid keys in `importprivkey`

Command-line options:

- New option: -nospendzeroconfchange to never spend unconfirmed change
outputs
- New option: -zapwallettxes to rebuild the wallet's transaction information
- Rename option '-tor' to '-onion' to better reflect what it does
- Add '-disablewallet' mode to let bitcoind run entirely without wallet
(when
  built with wallet)
- Update default '-rpcsslciphers' to include TLSv1.2
- make '-logtimestamps' default on and rework help-message
- RPC client option: '-rpcwait', to wait for server start
- Remove '-logtodebugger'
- Allow `-noserver` with bitcoind

Block-chain handling and storage:

- Update leveldb to 1.15
- Check for correct genesis (prevent cases where a datadir from the wrong
  network is accidentally loaded)
- Allow txindex to be removed and add a reindex dialog
- Log aborted block database rebuilds
- Store orphan blocks in serialized form, to save memory
- Limit the number of orphan blocks in memory to 750
- Fix non-standard disconnected transactions causing mempool orphans
- Add a new checkpoint at block 279,000

Wallet:

- Bug fixes and new regression tests to correctly compute
  the balance of wallets containing double-spent (or mutated) transactions
- Store key creation time. Calculate whole-wallet birthday.
- Optimize rescan to skip blocks prior to birthday
- Let user select wallet file with -wallet=foo.dat
- Consider generated coins mature at 101 instead of 120 blocks
- Improve wallet load time
- Don't count txins for priority to encourage sweeping
- Don't create empty transactions when reading a corrupted wallet
- Fix rescan to start from beginning after importprivkey
- Only create signatures with low S values.

Mining:

- Increase default -blockmaxsize/prioritysize to 750K/50K
- 'getblocktemplate' does not require a key to create a block template

Protocol and network:

- Drop the fee required to relay a transaction to 0.01mBTC per kilobyte
- Send tx relay flag with version
- New 'reject' P2P message (BIP 0061, see
https://gist.github.com/gavinandresen/7079034 for draft)
- Dump addresses every 15 minutes instead of 10 seconds
- Relay OP_RETURN data TxOut as standard transaction type
- Remove CENT-output free transaction rule when relaying
- Lower maximum size for free transaction creation
- Send multiple inv messages if mempool.size > MAX_INV_SZ
- Split MIN_PROTO_VERSION into INIT_PROTO_VERSION and MIN_PEER_PROTO_VERSION
- Do not treat fFromMe transaction differently when broadcasting
- Process received messages one at a time without sleeping between messages
- Improve logging of failed connections
- Bump protocol version to 70002
- Add some additional logging to give extra network insight
- Added new DNS seed from bitcoinstats.com

Validation:

- Log reason for non-standard transaction rejection
- Prune provably-unspendable outputs, and adapt consistency check for it.
- Detect any sufficiently long fork and add a warning
- Call the -alertnotify script when we see a long or invalid fork
- Fix multi-block reorg transaction resurrection
- Reject non-canonically-encoded serialization sizes
- Reject dust amounts during validation
- Accept nLockTime transactions that finalize in the next block

Build system:

- Switch to autotools-based build system
- Build without wallet by passing `--disable-wallet` to configure, this
removes
  the BerkeleyDB dependency
- Upgrade gitian dependencies (libpng, libz, libupnpc, boost, openssl) to
more
  recent versions
- Windows 64-bit build support
- Solaris compatibility fixes
- Check integrity of gitian input source tarballs
- Enable full GCC Stack-smashing protection for all OSes

GUI:

- Switch to Qt 5.2.0 for Windows build
- Add payment request (BIP 0070) support
- Improve options dialog
- Show transaction fee in new send confirmation dialog
- Add total balance in overview page
- Allow user to choose data directory on first start, when data directory is
  missing, or when the -choosedatadir option is passed
- Save and restore window positions
- Add vout index to transaction id in transactions details dialog
- Add network traffic graph in debug window
- Add open URI dialog
- Add Coin Control Features
- Improve receive coins workflow: make the 'Receive' tab into a form to
request
  payments, and move historical address list functionality to File menu.
- Rebrand to `Bitcoin Core`
- Move initialization/shutdown to a thread. This prevents "Not responding"
  messages during startup. Also show a window during shutdown.
- Don't regenerate autostart link on every client startup
- Show and store message of normal bitcoin:URI
- Fix richtext detection hang issue on very old Qt versions
- osx: Make use of the 10.8+ user notification center to display growl like
       notifications
- osx: Added NSHighResolutionCapable flag to Info.plist for better font
       rendering on Retina displays.
- osx: Fix bitcoin-qt startup crash when clicking dock icon
- linux: Fix Gnome bitcoin: URI handler

Miscellaneous:

- Add Linux script (contrib/qos/tc.sh) to limit outgoing bandwidth
- Add '-regtest' mode, similar to testnet but private with instant block
  generation with 'setgenerate' RPC.
- Add 'linearize.py' script to contrib, for creating bootstrap.dat
- Add separate bitcoin-cli client

Credits
--------

Thanks to everyone who contributed to this release:

- Andrey
- Ashley Holman
- b6393ce9-d324-4fe1-996b-acf82dbc3d53
- bitsofproof
- Brandon Dahler
- Calvin Tam
- Christian Decker
- Christopher Latham
- Chuck
- coblee
- constantined
- Cory Fields
- Cozz Lovan
- Daniel Larimer
- David Hill
- Dmitry Smirnov
- Drak
- Eric Lombrozo
- fanquake
- fcicq
- Florin
- frewil
- Gavin Andresen
- Gregory Maxwell
- gubatron
- Guillermo C?spedes Tab?rez
- Haakon Nilsen
- HaltingState
- Han Lin Yap
- harry
- Ian Kelling
- Jeff Garzik
- Johnathan Corgan
- Jonas Schnelli
- Josh Lehan
- Josh Triplett
- Julian Langschaedel
- Kangmo
- Lake Denman
- Luke Dashjr
- Mark Friedenbach
- Matt Corallo
- Michael Bauer
- Michael Ford
- Michagogo
- Midnight Magic
- Mike Hearn
- Nils Schneider
- Noel Tiernan
- Olivier Langlois
- patrick s
- Patrick Strateman
- Peter Todd
- phantomcircuit
- phelixbtc
- Philip Kaufmann
- Pieter Wuille
- Rav3nPL
- regergregregerrge
- Robert Backhaus
- Roman Mindalev
- Rune K. Svendsen
- Ryan Niebur
- Scott Ellis
- Scott Willeke
- Sergey Kazenyuk
- Shawn Wilkinson
- Sined
- sje
- Subo1978
- super3
- Tamas Blummer
- theuni
- Thomas Holenstein
- Timon Rapp
- Timothy Stranex
- Vaclav Vobornik
- vhf / victor felder
- Vinnie Falco
- Warren Togami
- Wil Bown
- Wladimir J. van der Laan
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140302/d199384e/attachment.html>

From andreas at schildbach.de  Sun Mar  2 15:20:34 2014
From: andreas at schildbach.de (Andreas Schildbach)
Date: Sun, 02 Mar 2014 16:20:34 +0100
Subject: [Bitcoin-development] BIP70 extension to allow for identity
	delegation
In-Reply-To: <CANEZrP1eABw_x8o-Z9ac23e-dVvUWfZJ-hKfAak=-NicPhUv9g@mail.gmail.com>
References: <CANEZrP1eABw_x8o-Z9ac23e-dVvUWfZJ-hKfAak=-NicPhUv9g@mail.gmail.com>
Message-ID: <levi7k$pkt$1@ger.gmane.org>

I somehow think that it is too early for this heavy kind of extension,
given that the first version of BIP70 isn't even deployed widely let
alone *used*.

By reading your proposal I get the idea that the current spec doesn't
allow two (or three) different PKIs at once -- we would want this for
migration purposes as you wrote and also because different people prefer
different kinds of PKIs. And that's perhaps something we want to fix in
the current (version 1) spec to prevent us running into a wall and be
doomed to patch around the spec. Note I assume a potential PGP or
Bitcoin-based infrastructure would also be called 'PKI'.

I would prefer if your fix would stay local to X.509 (and thus only
change X.509 specific structs rather than the top-level PaymentRequest).
And for a future PKI we would implement identity delegation in a
straight forward, non-kludgy way.


On 02/28/2014 12:46 PM, Mike Hearn wrote:

> Now we're starting to see the first companies deploy BIP70, we're
> encountering a need for identity delegation. This need was long foreseen
> by the way: it's not in BIP70 because, well, we had to draw the line for
> v1 somewhere, and this is an issue that mostly affects payment
> processors. But I figured I'd start a thread anyway because people keep
> asking me about it :)
> 
> *_Objective_*
> 
> Identity delegation means that a payment request can be signed by
> someone who is not holding the certified private key. The most obvious
> use case for this is payment processors like BitPay and Coinbase who
> currently have to sign payment requests as themselves. Other use cases
> might involve untrusted sales agents who want to be able to accept
> payment as their employer, but cannot be trusted with a long-term
> valuable secret, e.g. because they take their phone into areas with high
> crime rates. 
> 
> The lack of this is ok for v1 but not great, because:
> 
> 1) It requires the name of the *actual* recipient to be put in the memo
> field, otherwise you don't have the nice receipt-like properties. The
> memo field is just plain text though, it doesn't have any exploitable
> structure.
> 
> 2) It gives a confusing UI, the user thinks they're paying e.g.
> Overstock but their wallet UI tells them they're paying Coinbase
> 
> 3) Whilst these payment processors currently verify merchants so the
> security risk is low, in future a lighter-weight model or competing
> sites that allow open signups would give a weak security situation:  a
> hacker who compromised your computer could sign up for some popular
> payment processor under a false identity (or no identity), and wait
> until you use your hacked computer to make a payment to someone else
> using the same payment processor. They could then do an identity swap of
> the real payment request for one of their own, and your Trezor would
> still look the same. Avoiding this is a major motivation for the entire
> system!
> 
> Also it just looks more professional if the name you see in the wallet
> UI is correct.
> 
> *_Proposed implementation_*
> 
> We can fix this with a simple extension:
> 
> enum KeyType {
>   SECP256K1 = 1
> }
> 
> message ExtensionCert {
>   required bytes signature = 1;
>   required bytes public_key = 2;
>   required KeyType key_type = 3;
>   required uint32 expiry_time = 4;
>   optional string memo = 5;
> }
> 
> // modification
> message X509Certificates {
>   repeated bytes certificate = 1;
>   repeated ExtensionCert extended_certs = 2;
> }
> 
> message PaymentRequest {
>   // new field
>   optional bytes extended_signature = 6;
> }
> 
> This allow us to define a so-called /extended certificate/, which is
> conceptually the same as an X.509 certificate except simpler and Bitcoin
> specific. To create one, you just format a ExtensionCert message with an
> ECDSA public key from the payment processor (PP), set signature to an
> empty array and then sign it using your SSL private key. Obviously the
> resulting (most likely RSA) signature then goes into the signature field
> of the ExtensionCert. The memo field could optionally indicate the
> purpose of this cert, like "Delegation to BitPay" but I don't think it'd
> ever appear in the UI, rather, it should be there for debugging purposes.
> 
> The new ExtensionCert can then be provided back to the PP who adds it to
> the X509Certificates message. In the PaymentRequest, there are now
> /two/ signature fields (this is for backwards compatibility). Because of
> how the mechanism is designed they should not interfere with each other
> - old implementations that don't understand the new extended_signature
> field will drop it during reserialization to set signature to the empty
> array, and thus signature should not cover that field. On the other
> hand, extended_signature would cover signature. Thus, for full backwards
> compatibility, you would:
> 
> 1) Sign the payment request using the PP's SSL cert, i.e. sign as
> coinbase.com <http://coinbase.com>
> 
> 2) Then sign again using the PP's delegated ECDSA key, i.e. sign as the
> merchant
> 
> The finished protobuf would show up in old clients as signed by
> coinbase.com <http://coinbase.com> and by new clients as signed by
> overstock.com <http://overstock.com> even though Overstock did not
> provide their SSL key to coinbase.
> 
> If you have /only/ an ExtensionCert and not any X.509 cert of your own,
> then you cannot of course make backwards compatible signatures in this
> way, and in that case you would miss out the signature field and set the
> pki_type to a new value:  "x509+sha256+excert". Old wallets would see
> that they don't understand this pki_type and treat the request as
> unverified.
> 
> For maximum security the merchant may choose to set very short expiry
> times (like, a day) and then have a cron job that uploads a new
> ExtensionCert at the end of each expiry period. This means in the case
> of PP compromise, the system reseals very fast.
> 
> *_Alternatives considered_*
> *_
> _*
> We could always use a new pki_type and not bother with the two signature
> fields. However, this means old wallets will show payment requests as
> untrusted during the transition period. Some signing is still better
> than none, security-wise.
> 
> We could attempt to fix the above by introducing a use of User-Agent
> field to the case where a payment request is fetched via HTTP, so the
> server can customise the PaymentRequest according to the capabilities of
> the client. However, sometimes payment requests are not fetched via
> HTTP, for example, they may be attached to an email, sent via an IM
> network or sent over a Bluetooth socket. Nonetheless this may be a
> useful thing to consider for future cases where the protocol may not be
> extended in a backwards compatible manner.
> 
> We could create the extension cert as an X.509 cert, rather than a
> custom type. However most CA's set path length constraints on their
> intermediate certs that forbid this kind of extension (I forgot why,
> possibly some kind of anti-DoS mitigation). Also re-using X.509 for the
> extension cert would open up the risk of it being accepted by a bogus
> SSL stack that didn't check the key usage constraints extension, and
> that would allow for SSL delegation as well. It seems safer to just use
> a different format that definitely won't be accepted.
> 
> 
> 
> Feedback welcome.
> 
> 
> ------------------------------------------------------------------------------
> Flow-based real-time traffic analytics software. Cisco certified tool.
> Monitor traffic, SLAs, QoS, Medianet, WAAS etc. with NetFlow Analyzer
> Customize your own dashboards, set traffic alerts and generate reports.
> Network behavioral analysis & security monitoring. All-in-one tool.
> http://pubads.g.doubleclick.net/gampad/clk?id=126839071&iu=/4140/ostg.clktrk
> 
> 
> 
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 





From mike at plan99.net  Sun Mar  2 16:14:43 2014
From: mike at plan99.net (Mike Hearn)
Date: Sun, 2 Mar 2014 17:14:43 +0100
Subject: [Bitcoin-development] BIP70 extension to allow for identity
	delegation
In-Reply-To: <levi7k$pkt$1@ger.gmane.org>
References: <CANEZrP1eABw_x8o-Z9ac23e-dVvUWfZJ-hKfAak=-NicPhUv9g@mail.gmail.com>
	<levi7k$pkt$1@ger.gmane.org>
Message-ID: <CANEZrP3i05=_xLbS1VDYkXfW0XVOyN9LBHhaf--TEGCryN0Ppg@mail.gmail.com>

On Sun, Mar 2, 2014 at 4:20 PM, Andreas Schildbach <andreas at schildbach.de>wrote:

> I somehow think that it is too early for this heavy kind of extension,
> given that the first version of BIP70 isn't even deployed widely let
> alone *used*.
>

Definitely agree - like I said, I publish this only because I keep getting
asked about it.


> By reading your proposal I get the idea that the current spec doesn't
> allow two (or three) different PKIs at once


That's right. There's little point in having multiple PKI's simultaneously,
that's why it doesn't allow it.

This one is a special case because it doesn't replace but rather
specialises and extends the existing PKI. Old clients that don't understand
it would still show something useful and by upgrading you get better
output. Actually you get closer to the output you're supposed to get.

That's going to be rare though, I think. Generally you wouldn't want to
have multiple PKIs in use simultaneously for the same payment request.


> I would prefer if your fix would stay local to X.509 (and thus only
> change X.509 specific structs rather than the top-level PaymentRequest).
>

It can be done but only by sacrificing backwards compatibility, which
doesn't seem worth it to me. It's hardly a big deal to have two signature
fields. The rest is all localised to the X509 parts.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140302/48d10322/attachment.html>

From hozer at hozed.org  Sun Mar  2 18:08:39 2014
From: hozer at hozed.org (Troy Benjegerdes)
Date: Sun, 2 Mar 2014 12:08:39 -0600
Subject: [Bitcoin-development] Decentralized digital asset exchange with
 honest pricing and market depth
In-Reply-To: <CAJHLa0Ocs5foyROiVgB=xOj1CvE9fpKm8YJweWOYDuUzFw47+w@mail.gmail.com>
References: <20140211175919.GV3180@nl.grid.coop> <20140214052159.GF31437@savin>
	<20140217054751.GY3180@nl.grid.coop>
	<CAC1+kJNTq2sMbORAU-HBSpTVE3ohzsxHrxXw9JOXZp5ux32Gtw@mail.gmail.com>
	<20140228013719.GA5786@savin>
	<CAC1+kJPL0NpzihMUfuOvEaE8LoKZehS0PbXFCVMu4_N5MJCJfA@mail.gmail.com>
	<20140301174513.GP3180@nl.grid.coop>
	<CAJHLa0NMbeVneL3oYkuSUYXgoJYsEjQk_QFuzKZizYWfQnpWvw@mail.gmail.com>
	<CACh7GpH2YDr2LBgnoxmNSwrufryzYwXkuo6uTk3-reRGCx6t8w@mail.gmail.com>
	<CAJHLa0Ocs5foyROiVgB=xOj1CvE9fpKm8YJweWOYDuUzFw47+w@mail.gmail.com>
Message-ID: <20140302180839.GQ3180@nl.grid.coop>

I'm asking for how to DEVELOP THE CODE so I can trade between two block 
chains, and then I'm going to start trading cats and dogs and bits.

Somewhere in trying to figure out the design spec we got caught up in existential
concern about 'globally knowable and accurate price history', and I'm telling you
it doesn't matter.

I'm the customer and the developer, someone give me a clear design document to
trade between two chains and I can write it, and then we can debate improvements.
 

On Sat, Mar 01, 2014 at 01:33:25PM -0500, Jeff Garzik wrote:
> This is not bitcoin-philosophy, it's bitcoin-development.  Existential
> philosophy belongs on IRC or the forums.
> 
> 
> On Sat, Mar 1, 2014 at 1:28 PM, Mark Friedenbach <mark at monetize.io> wrote:
> > Only if you view bitcoin as no more than a payment network.
> >
> > On Mar 1, 2014 10:24 AM, "Jeff Garzik" <jgarzik at bitpay.com> wrote:
> >>
> >> This is wandering far off-topic for this mailing list.
> >>
> >> On Sat, Mar 1, 2014 at 12:45 PM, Troy Benjegerdes <hozer at hozed.org> wrote:
> >> >> > You can make the same argument against Bitcoin itself you know...
> >> >> >
> >> >> > A Bitmessage-like network would be trivial to front-run via a sybil
> >> >> > attack. It's the fundemental problem with marketplaces - the data
> >> >> > they're trying to publish has to be public.
> >> >>
> >> >> I don't see the Bitcoin analogy...
> >> >> Anyway, I still don't think the seller cares, if he sells at the price
> >> >> he was asking, what would he care about "front running" those parallel
> >> >> networks.
> >> >> I've seen many street markets without "public information" and they
> >> >> work just well.
> >> >
> >> > The spot price for ammonia fertilizer, refined gasoline at terminals,
> >> > and price of tea in china are not 'public information', yet these are
> >> > some of the largest traded commodities in the world, far exceeding
> >> > the drop in the bucket that all cryptocoin transactions make.
> >> >
> >> > I'd further argue that the *actual* price of corn (cash bid price at
> >> > elevators and ethanol plants) is not public information either. There
> >> > is a great deal of money traded in collecting and then distributing the
> >> > 'cleared price' information. Have a look at
> >> >
> >> > http://www.interquote.com/template.cfm?navgroup=aboutlist&urlcode=12&view=1
> >> >
> >> >
> >> >> >> I don't think this will be a tragedy, because like we discussed on
> >> >> >> IRC, I don't think the primary goal of markets is price discovery,
> >> >> >> but
> >> >> >> trade itself.
> >> >> >>
> >> >> >> About historic data, the actual trades are always public, and some
> >> >> >> kind of "archivers" could collect and maintain old orders for
> >> >> >> historic
> >> >> >> bid and asks, etc.
> >> >> >
> >> >> > And again, how do you know that record is honest? Fact is without
> >> >> > proof-of-publication you just don't.
> >> >>
> >> >> Well, the trades that appeared in the chain actually occurred.
> >> >> Buying to yourself at fake prices? Be careful, the miner could just
> >> >> separate the order and fill it himself. Or anyone paying a higher fee,
> >> >> for that matter.
> >> >
> >> > You just made my long-term strategic argument for investing in my own
> >> > mining hardware so I can be sure to trade reliably.
> >> >
> >> >> Again, you haven't addressed why the seller cares more about "accurate
> >> >> historic market data" than just his own fees and sell.
> >> >>
> >> >> > You mean a reverse nLockTime that makes a transaction invalid after a
> >> >> > certain amount of time - that's dangerous in a reorg unfortunately as
> >> >> > it
> >> >> > can make transactions permenantly invalid.
> >> >
> >> > People who take money from buyers and sellers care most about 'accurate
> >> > historic market data'. I just want to exchange my corn for e85,
> >> > fertilizer,
> >> > and electricity, and audit the code that runs accounting for the
> >> > exchange.
> >> >
> >> > I really don't give a shit if there is 'accurate historic market data'
> >> > as
> >> > long as **MY** personal trade data is accurate and I got a good enough
> >> > price,
> >> > and I know who I'm dealing with.
> >> >
> >> > I know someone smarter than me and with more money, market leverage, and
> >> > political connections **WILL** game the system and distort the market
> >> > data
> >> > history so they can take more money from buyers and sellers without
> >> > actually
> >> > doing some usefull market function.
> >> >
> >> > As long as use buyers and sellers can see the code, and have a good eye
> >> > for
> >> > knowing when someone's pushing the market around, we can just put our
> >> > orders
> >> > in and relieve some speculators of their money.
> >> >
> >> > Just get me working code for cross-chain trades, and we'll work on the
> >> > accurate historic data problem later.
> >> >
> >> >
> >> > ----------------------------------------------------------------------------
> >> > Troy Benjegerdes                 'da hozer'
> >> > hozer at hozed.org
> >> > 7 elements      earth::water::air::fire::mind::spirit::soul
> >> > grid.coop
> >> >
> >> >       Never pick a fight with someone who buys ink by the barrel,
> >> >          nor try buy a hacker who makes money by the megahash
> >> >
> >> >
> >> >
> >> > ------------------------------------------------------------------------------
> >> > Flow-based real-time traffic analytics software. Cisco certified tool.
> >> > Monitor traffic, SLAs, QoS, Medianet, WAAS etc. with NetFlow Analyzer
> >> > Customize your own dashboards, set traffic alerts and generate reports.
> >> > Network behavioral analysis & security monitoring. All-in-one tool.
> >> >
> >> > http://pubads.g.doubleclick.net/gampad/clk?id=126839071&iu=/4140/ostg.clktrk
> >> > _______________________________________________
> >> > Bitcoin-development mailing list
> >> > Bitcoin-development at lists.sourceforge.net
> >> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> >>
> >>
> >>
> >> --
> >> Jeff Garzik
> >> Bitcoin core developer and open source evangelist
> >> BitPay, Inc.      https://bitpay.com/
> >>
> >>
> >> ------------------------------------------------------------------------------
> >> Flow-based real-time traffic analytics software. Cisco certified tool.
> >> Monitor traffic, SLAs, QoS, Medianet, WAAS etc. with NetFlow Analyzer
> >> Customize your own dashboards, set traffic alerts and generate reports.
> >> Network behavioral analysis & security monitoring. All-in-one tool.
> >>
> >> http://pubads.g.doubleclick.net/gampad/clk?id=126839071&iu=/4140/ostg.clktrk
> >> _______________________________________________
> >> Bitcoin-development mailing list
> >> Bitcoin-development at lists.sourceforge.net
> >> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 
> 
> 
> -- 
> Jeff Garzik
> Bitcoin core developer and open source evangelist
> BitPay, Inc.      https://bitpay.com/

-- 
----------------------------------------------------------------------------
Troy Benjegerdes                 'da hozer'                  hozer at hozed.org
7 elements      earth::water::air::fire::mind::spirit::soul        grid.coop

      Never pick a fight with someone who buys ink by the barrel,
         nor try buy a hacker who makes money by the megahash




From hozer at hozed.org  Sun Mar  2 18:18:18 2014
From: hozer at hozed.org (Troy Benjegerdes)
Date: Sun, 2 Mar 2014 12:18:18 -0600
Subject: [Bitcoin-development] Positive and negative feedback on
 certificate validation errors
In-Reply-To: <op.xb05iptvyldrnw@laptop-air>
References: <op.xb05iptvyldrnw@laptop-air>
Message-ID: <20140302181818.GR3180@nl.grid.coop>

On Fri, Feb 28, 2014 at 10:26:39PM -0800, Jeremy Spilman wrote:
> We currently have subtle positive feedback of a signed payment request in  
> the form of the green background. Unsigned requests simply show up without  
> the green background, as well as requests which provide a certificate but  
> have a missing or invalid signature.

Are we talking a third-party 'root certificate'?

I don't quite see why a cryptographic currency that has the most widely 
deployed ECDSA public/private key infrastructure ever needs to use external
certificates. That seems like a significant reduction in security to pretend
that a 'signed' certificate is any good when it's pretty easy to buy a
compromised cert, or just hack the server its on.

If it's 'signed' by the ECDSA private key that you are sending the payment
to, by all means, make it bright green.

I mean if you want to make it expensive for small businesses to take secure
payments, why don't you add a native 'signing fee' extension and have a 
(more) transparent market for the price of perceived security, or at least
a compile time option so i can turn this nonsense off for my customers.


-- 
----------------------------------------------------------------------------
Troy Benjegerdes                 'da hozer'                  hozer at hozed.org
7 elements      earth::water::air::fire::mind::spirit::soul        grid.coop

      Never pick a fight with someone who buys ink by the barrel,
         nor try buy a hacker who makes money by the megahash




From fastest963 at gmail.com  Sun Mar  2 18:34:46 2014
From: fastest963 at gmail.com (James Hartig)
Date: Sun, 2 Mar 2014 13:34:46 -0500
Subject: [Bitcoin-development] 0.9.0 release candidate two
In-Reply-To: <CABsx9T3j8rmQzJTdWX5M2kk=V7J3i6SFgL5fPCOfL1m0hT_-wg@mail.gmail.com>
References: <CABsx9T3j8rmQzJTdWX5M2kk=V7J3i6SFgL5fPCOfL1m0hT_-wg@mail.gmail.com>
Message-ID: <CAM6j61t2mtXd-AvCUV3AFc2j2Z438o4C0P1NwuUR2H4Hz9eYqQ@mail.gmail.com>

Heads up... downloaded the linux tar.gz to my OVH box and got my server
terminated. Screenshot from the email:
http://cl.ly/image/3q0C2a3Y0T0V

They claimed I was attacking 88.198.199.140 over port 443.

Thanks,
--
James Hartig
Software Engineer @ Grooveshark.com
http://twitter.com/jameshartig





On Sun, Mar 2, 2014 at 8:54 AM, Gavin Andresen <gavinandresen at gmail.com>wrote:

> Please download and help test 0.9.0rc2; binaries are available from:
>    https://bitcoin.org/bin/0.9.0/test/
>
> If no serious bugs are found in this release candidate, it will be the
> final 0.9.0 release.
>
> Release notes (please help proofread/improve these, too):
> ---------------------------------------------------------------------------
>
> Bitcoin Core version 0.9.0rc2 is now available from:
>
>   https://bitcoin.org/bin/0.9.0/test/
>
> This is a release candidate for a new major version. A major version brings
> both new features and bug fixes.
>
> Please report bugs using the issue tracker at github:
>
>   https://github.com/bitcoin/bitcoin/issues
>
> How to Upgrade
> --------------
>
> If you are running an older version, shut it down. Wait until it has
> completely
> shut down (which might take a few minutes for older versions), uninstall
> all
> earlier versions of Bitcoin, then run the installer (on Windows) or just
> copy
> over /Applications/Bitcoin-Qt (on Mac) or bitcoind/bitcoin-qt (on Linux).
>
> If you are upgrading from version 0.7.2 or earlier, the first time you run
> 0.9.0 your blockchain files will be re-indexed, which will take anywhere
> from
> 30 minutes to several hours, depending on the speed of your machine.
>
> On Windows, do not forget to uninstall all earlier versions of the Bitcoin
> client first, especially if you are switching to the 64-bit version.
>
> Windows 64-bit installer
> -------------------------
>
> New in 0.9.0 is the Windows 64-bit version of the client. There have been
> frequent reports of users running out of virtual memory on 32-bit systems
> during the initial sync. Because of this it is recommended to install the
> 64-bit version if your system supports it.
>
> NOTE: Release candidate 2 windows binaries are not code-signed; use pgp
> and the SHA256SUMS.asc file to make sure your binaries are correct.
> The final 0.9.0 release Windows setup.exe binaries will be code-signed.
>
> OSX 10.5 / 32-bit no longer supported
> -------------------------------------
>
> 0.9.0 drops support for older Macs. The minimum requirements are now
> a 64-bit-capable CPU running OSX 10.6 or later.
>
> Rebranding to Bitcoin Core
> ---------------------------
>
> To reduce confusion between Bitcoin-the-network and Bitcoin-the-software we
> have renamed the reference client to Bitcoin Core.
>
> Autotools build system
> -----------------------
>
> For 0.9.0 we switched to an autotools-based build system instead of
> individual
> (q)makefiles.
>
> Using the standard ?./autogen.sh; ./configure; make? to build Bitcoin-Qt
> and
> bitcoind makes it easier for experienced open source developers to
> contribute
> to the project.
>
> Be sure to check doc/build-*.md for your platform before building from
> source.
>
> Bitcoin-cli
> -------------
>
> Another change in the 0.9 release is moving away from the bitcoind
> executable
> functioning both as a server and as a RPC client. The RPC client
> functionality
> (?tell the running bitcoin daemon to do THIS?) was split into a separate
> executable, 'bitcoin-cli'. The RPC client code will eventually be removed
> from
> bitcoind, but will be kept for backwards compatibility for a release or
> two.
>
> `walletpassphrase` RPC
> -----------------------
>
> The behavior of the `walletpassphrase` RPC when the wallet is already
> unlocked
> has changed between 0.8 and 0.9.
>
> The 0.8 behavior of `walletpassphrase` is to fail when the wallet is
> already unlocked:
>
>     > walletpassphrase 1000
>     walletunlocktime = now + 1000
>     > walletpassphrase 10
>     Error: Wallet is already unlocked (old unlock time stays)
>
> The new behavior of `walletpassphrase` is to set a new unlock time
> overriding
> the old one:
>
>     > walletpassphrase 1000
>     walletunlocktime = now + 1000
>     > walletpassphrase 10
>     walletunlocktime = now + 10 (overriding the old unlock time)
>
> Transaction malleability-related fixes
> --------------------------------------
>
> This release contains a few fixes for transaction id malleability issues:
>
> - -nospendzeroconfchange command-line option, to avoid spending
>   zero-confirmation change
> - IsStandard() transaction rules tightened to prevent relaying and mining
> of
>   mutated transactions
> - Additional information in listtransactions/gettransaction output to
>   report wallet transactions that conflict with each other because
>   they spend the same outputs.
> - Bug fixes to the getbalance/listaccounts RPC commands, which would report
>   incorrect balances for double-spent (or mutated) transactions.
> - New option: -zapwallettxes to rebuild the wallet's transaction
> information
>
> Transaction Fees
> ----------------
>
> This release drops the default fee required to relay transactions across
> the
> network to 0.01mBTC per kilobyte. Note that getting a transaction relayed
> across the network does NOT guarantee that the transaction will be
> accepted by a miner and included in a block, and the default fee accepted
> by miners remains 0.1mBTC per kilobyte.
>
> As in previous releases, the relay fee may be changed with the
> -minrelaytxfee
> command-line option, and miners may change the default minimum fee they
> accept
> with the -mintxfee command-line option.
>
> 0.9.0rc2 Release notes
> =======================
>
> RPC:
>
> - New notion of 'conflicted' transactions, reported as
>   confirmations: -1
> - 'listreceivedbyaddress' now provides tx ids
> - Add raw transaction hex to 'gettransaction' output
> - Updated help and tests for 'getreceivedby(account|address)'
> - In 'getblock', accept 2nd 'verbose' parameter, similar to
> getrawtransaction,
>   but defaulting to 1 for backward compatibility
> - Add 'verifychain', to verify chain database at runtime
> - Add 'dumpwallet' and 'importwallet' RPCs
> - 'keypoolrefill' gains optional size parameter
> - Add 'getbestblockhash', to return tip of best chain
> - Add 'chainwork' (the total work done by all blocks since the genesis
> block)
>   to 'getblock' output
> - Make RPC password resistant to timing attacks
> - Clarify help messages and add examples
> - Add 'getrawchangeaddress' call for raw transaction change destinations
> - Reject insanely high fees by default in 'sendrawtransaction'
> - Add RPC call 'decodescript' to decode a hex-encoded transaction script
> - Make 'validateaddress' provide redeemScript
> - Add 'getnetworkhashps' to get the calculated network hashrate
> - New RPC 'ping' command to request ping, new 'pingtime' and 'pingwait'
> fields
>   in 'getpeerinfo' output
> - Adding new 'addrlocal' field to 'getpeerinfo' output
> - Add verbose boolean to 'getrawmempool'
> - Add rpc command 'getunconfirmedbalance' to obtain total unconfirmed
> balance
> - Explicitly ensure that wallet is unlocked in `importprivkey`
> - Add check for valid keys in `importprivkey`
>
> Command-line options:
>
> - New option: -nospendzeroconfchange to never spend unconfirmed change
> outputs
> - New option: -zapwallettxes to rebuild the wallet's transaction
> information
> - Rename option '-tor' to '-onion' to better reflect what it does
> - Add '-disablewallet' mode to let bitcoind run entirely without wallet
> (when
>   built with wallet)
> - Update default '-rpcsslciphers' to include TLSv1.2
> - make '-logtimestamps' default on and rework help-message
> - RPC client option: '-rpcwait', to wait for server start
> - Remove '-logtodebugger'
> - Allow `-noserver` with bitcoind
>
> Block-chain handling and storage:
>
> - Update leveldb to 1.15
> - Check for correct genesis (prevent cases where a datadir from the wrong
>   network is accidentally loaded)
> - Allow txindex to be removed and add a reindex dialog
> - Log aborted block database rebuilds
> - Store orphan blocks in serialized form, to save memory
> - Limit the number of orphan blocks in memory to 750
> - Fix non-standard disconnected transactions causing mempool orphans
> - Add a new checkpoint at block 279,000
>
> Wallet:
>
> - Bug fixes and new regression tests to correctly compute
>   the balance of wallets containing double-spent (or mutated) transactions
> - Store key creation time. Calculate whole-wallet birthday.
> - Optimize rescan to skip blocks prior to birthday
> - Let user select wallet file with -wallet=foo.dat
> - Consider generated coins mature at 101 instead of 120 blocks
> - Improve wallet load time
> - Don't count txins for priority to encourage sweeping
> - Don't create empty transactions when reading a corrupted wallet
> - Fix rescan to start from beginning after importprivkey
> - Only create signatures with low S values.
>
> Mining:
>
> - Increase default -blockmaxsize/prioritysize to 750K/50K
> - 'getblocktemplate' does not require a key to create a block template
>
> Protocol and network:
>
> - Drop the fee required to relay a transaction to 0.01mBTC per kilobyte
> - Send tx relay flag with version
> - New 'reject' P2P message (BIP 0061, see
> https://gist.github.com/gavinandresen/7079034 for draft)
> - Dump addresses every 15 minutes instead of 10 seconds
> - Relay OP_RETURN data TxOut as standard transaction type
> - Remove CENT-output free transaction rule when relaying
> - Lower maximum size for free transaction creation
> - Send multiple inv messages if mempool.size > MAX_INV_SZ
> - Split MIN_PROTO_VERSION into INIT_PROTO_VERSION and
> MIN_PEER_PROTO_VERSION
> - Do not treat fFromMe transaction differently when broadcasting
> - Process received messages one at a time without sleeping between messages
> - Improve logging of failed connections
> - Bump protocol version to 70002
> - Add some additional logging to give extra network insight
> - Added new DNS seed from bitcoinstats.com
>
> Validation:
>
> - Log reason for non-standard transaction rejection
> - Prune provably-unspendable outputs, and adapt consistency check for it.
> - Detect any sufficiently long fork and add a warning
> - Call the -alertnotify script when we see a long or invalid fork
> - Fix multi-block reorg transaction resurrection
> - Reject non-canonically-encoded serialization sizes
> - Reject dust amounts during validation
> - Accept nLockTime transactions that finalize in the next block
>
> Build system:
>
> - Switch to autotools-based build system
> - Build without wallet by passing `--disable-wallet` to configure, this
> removes
>   the BerkeleyDB dependency
> - Upgrade gitian dependencies (libpng, libz, libupnpc, boost, openssl) to
> more
>   recent versions
> - Windows 64-bit build support
> - Solaris compatibility fixes
> - Check integrity of gitian input source tarballs
> - Enable full GCC Stack-smashing protection for all OSes
>
> GUI:
>
> - Switch to Qt 5.2.0 for Windows build
> - Add payment request (BIP 0070) support
> - Improve options dialog
> - Show transaction fee in new send confirmation dialog
> - Add total balance in overview page
> - Allow user to choose data directory on first start, when data directory
> is
>   missing, or when the -choosedatadir option is passed
> - Save and restore window positions
> - Add vout index to transaction id in transactions details dialog
> - Add network traffic graph in debug window
> - Add open URI dialog
> - Add Coin Control Features
> - Improve receive coins workflow: make the 'Receive' tab into a form to
> request
>   payments, and move historical address list functionality to File menu.
> - Rebrand to `Bitcoin Core`
> - Move initialization/shutdown to a thread. This prevents ?Not responding?
>   messages during startup. Also show a window during shutdown.
> - Don't regenerate autostart link on every client startup
> - Show and store message of normal bitcoin:URI
> - Fix richtext detection hang issue on very old Qt versions
> - osx: Make use of the 10.8+ user notification center to display growl like
>        notifications
> - osx: Added NSHighResolutionCapable flag to Info.plist for better font
>        rendering on Retina displays.
> - osx: Fix bitcoin-qt startup crash when clicking dock icon
> - linux: Fix Gnome bitcoin: URI handler
>
> Miscellaneous:
>
> - Add Linux script (contrib/qos/tc.sh) to limit outgoing bandwidth
> - Add '-regtest' mode, similar to testnet but private with instant block
>   generation with 'setgenerate' RPC.
> - Add 'linearize.py' script to contrib, for creating bootstrap.dat
> - Add separate bitcoin-cli client
>
> Credits
> --------
>
> Thanks to everyone who contributed to this release:
>
> - Andrey
> - Ashley Holman
> - b6393ce9-d324-4fe1-996b-acf82dbc3d53
> - bitsofproof
> - Brandon Dahler
> - Calvin Tam
> - Christian Decker
> - Christopher Latham
> - Chuck
> - coblee
> - constantined
> - Cory Fields
> - Cozz Lovan
> - Daniel Larimer
> - David Hill
> - Dmitry Smirnov
> - Drak
> - Eric Lombrozo
> - fanquake
> - fcicq
> - Florin
> - frewil
> - Gavin Andresen
> - Gregory Maxwell
> - gubatron
> - Guillermo C?spedes Tab?rez
> - Haakon Nilsen
> - HaltingState
> - Han Lin Yap
> - harry
> - Ian Kelling
> - Jeff Garzik
> - Johnathan Corgan
> - Jonas Schnelli
> - Josh Lehan
> - Josh Triplett
> - Julian Langschaedel
> - Kangmo
> - Lake Denman
> - Luke Dashjr
> - Mark Friedenbach
> - Matt Corallo
> - Michael Bauer
> - Michael Ford
> - Michagogo
> - Midnight Magic
> - Mike Hearn
> - Nils Schneider
> - Noel Tiernan
> - Olivier Langlois
> - patrick s
> - Patrick Strateman
> - Peter Todd
> - phantomcircuit
> - phelixbtc
> - Philip Kaufmann
> - Pieter Wuille
> - Rav3nPL
> - regergregregerrge
> - Robert Backhaus
> - Roman Mindalev
> - Rune K. Svendsen
> - Ryan Niebur
> - Scott Ellis
> - Scott Willeke
> - Sergey Kazenyuk
> - Shawn Wilkinson
> - Sined
> - sje
> - Subo1978
> - super3
> - Tamas Blummer
> - theuni
> - Thomas Holenstein
> - Timon Rapp
> - Timothy Stranex
> - Vaclav Vobornik
> - vhf / victor felder
> - Vinnie Falco
> - Warren Togami
> - Wil Bown
> - Wladimir J. van der Laan
>
>
>
> ------------------------------------------------------------------------------
> Flow-based real-time traffic analytics software. Cisco certified tool.
> Monitor traffic, SLAs, QoS, Medianet, WAAS etc. with NetFlow Analyzer
> Customize your own dashboards, set traffic alerts and generate reports.
> Network behavioral analysis & security monitoring. All-in-one tool.
>
> http://pubads.g.doubleclick.net/gampad/clk?id=126839071&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140302/2604d884/attachment.html>

From jtimon at monetize.io  Sun Mar  2 19:03:06 2014
From: jtimon at monetize.io (=?ISO-8859-1?Q?Jorge_Tim=F3n?=)
Date: Sun, 2 Mar 2014 20:03:06 +0100
Subject: [Bitcoin-development] Decentralized digital asset exchange with
 honest pricing and market depth
In-Reply-To: <20140302180839.GQ3180@nl.grid.coop>
References: <20140211175919.GV3180@nl.grid.coop> <20140214052159.GF31437@savin>
	<20140217054751.GY3180@nl.grid.coop>
	<CAC1+kJNTq2sMbORAU-HBSpTVE3ohzsxHrxXw9JOXZp5ux32Gtw@mail.gmail.com>
	<20140228013719.GA5786@savin>
	<CAC1+kJPL0NpzihMUfuOvEaE8LoKZehS0PbXFCVMu4_N5MJCJfA@mail.gmail.com>
	<20140301174513.GP3180@nl.grid.coop>
	<CAJHLa0NMbeVneL3oYkuSUYXgoJYsEjQk_QFuzKZizYWfQnpWvw@mail.gmail.com>
	<CACh7GpH2YDr2LBgnoxmNSwrufryzYwXkuo6uTk3-reRGCx6t8w@mail.gmail.com>
	<CAJHLa0Ocs5foyROiVgB=xOj1CvE9fpKm8YJweWOYDuUzFw47+w@mail.gmail.com>
	<20140302180839.GQ3180@nl.grid.coop>
Message-ID: <CAC1+kJOKWwGo5t3BT5mU6N=sU39jY-pac-BFZ3h7pomLkmSb9g@mail.gmail.com>

Again, the two best ways are here:

https://en.bitcoin.it/wiki/Contracts#Example_5:_Trading_across_chains
https://bitcointalk.org/index.php?topic=321228

But this is off-topic, Peter wasn't talking about cross-chain trade.


On 3/2/14, Troy Benjegerdes <hozer at hozed.org> wrote:
> I'm asking for how to DEVELOP THE CODE so I can trade between two block
> chains, and then I'm going to start trading cats and dogs and bits.
>
> Somewhere in trying to figure out the design spec we got caught up in
> existential
> concern about 'globally knowable and accurate price history', and I'm
> telling you
> it doesn't matter.
>
> I'm the customer and the developer, someone give me a clear design document
> to
> trade between two chains and I can write it, and then we can debate
> improvements.
>
>
> On Sat, Mar 01, 2014 at 01:33:25PM -0500, Jeff Garzik wrote:
>> This is not bitcoin-philosophy, it's bitcoin-development.  Existential
>> philosophy belongs on IRC or the forums.
>>
>>
>> On Sat, Mar 1, 2014 at 1:28 PM, Mark Friedenbach <mark at monetize.io>
>> wrote:
>> > Only if you view bitcoin as no more than a payment network.
>> >
>> > On Mar 1, 2014 10:24 AM, "Jeff Garzik" <jgarzik at bitpay.com> wrote:
>> >>
>> >> This is wandering far off-topic for this mailing list.
>> >>
>> >> On Sat, Mar 1, 2014 at 12:45 PM, Troy Benjegerdes <hozer at hozed.org>
>> >> wrote:
>> >> >> > You can make the same argument against Bitcoin itself you know...
>> >> >> >
>> >> >> > A Bitmessage-like network would be trivial to front-run via a
>> >> >> > sybil
>> >> >> > attack. It's the fundemental problem with marketplaces - the data
>> >> >> > they're trying to publish has to be public.
>> >> >>
>> >> >> I don't see the Bitcoin analogy...
>> >> >> Anyway, I still don't think the seller cares, if he sells at the
>> >> >> price
>> >> >> he was asking, what would he care about "front running" those
>> >> >> parallel
>> >> >> networks.
>> >> >> I've seen many street markets without "public information" and they
>> >> >> work just well.
>> >> >
>> >> > The spot price for ammonia fertilizer, refined gasoline at
>> >> > terminals,
>> >> > and price of tea in china are not 'public information', yet these
>> >> > are
>> >> > some of the largest traded commodities in the world, far exceeding
>> >> > the drop in the bucket that all cryptocoin transactions make.
>> >> >
>> >> > I'd further argue that the *actual* price of corn (cash bid price at
>> >> > elevators and ethanol plants) is not public information either.
>> >> > There
>> >> > is a great deal of money traded in collecting and then distributing
>> >> > the
>> >> > 'cleared price' information. Have a look at
>> >> >
>> >> > http://www.interquote.com/template.cfm?navgroup=aboutlist&urlcode=12&view=1
>> >> >
>> >> >
>> >> >> >> I don't think this will be a tragedy, because like we discussed
>> >> >> >> on
>> >> >> >> IRC, I don't think the primary goal of markets is price
>> >> >> >> discovery,
>> >> >> >> but
>> >> >> >> trade itself.
>> >> >> >>
>> >> >> >> About historic data, the actual trades are always public, and
>> >> >> >> some
>> >> >> >> kind of "archivers" could collect and maintain old orders for
>> >> >> >> historic
>> >> >> >> bid and asks, etc.
>> >> >> >
>> >> >> > And again, how do you know that record is honest? Fact is without
>> >> >> > proof-of-publication you just don't.
>> >> >>
>> >> >> Well, the trades that appeared in the chain actually occurred.
>> >> >> Buying to yourself at fake prices? Be careful, the miner could just
>> >> >> separate the order and fill it himself. Or anyone paying a higher
>> >> >> fee,
>> >> >> for that matter.
>> >> >
>> >> > You just made my long-term strategic argument for investing in my
>> >> > own
>> >> > mining hardware so I can be sure to trade reliably.
>> >> >
>> >> >> Again, you haven't addressed why the seller cares more about
>> >> >> "accurate
>> >> >> historic market data" than just his own fees and sell.
>> >> >>
>> >> >> > You mean a reverse nLockTime that makes a transaction invalid
>> >> >> > after a
>> >> >> > certain amount of time - that's dangerous in a reorg unfortunately
>> >> >> > as
>> >> >> > it
>> >> >> > can make transactions permenantly invalid.
>> >> >
>> >> > People who take money from buyers and sellers care most about
>> >> > 'accurate
>> >> > historic market data'. I just want to exchange my corn for e85,
>> >> > fertilizer,
>> >> > and electricity, and audit the code that runs accounting for the
>> >> > exchange.
>> >> >
>> >> > I really don't give a shit if there is 'accurate historic market
>> >> > data'
>> >> > as
>> >> > long as **MY** personal trade data is accurate and I got a good
>> >> > enough
>> >> > price,
>> >> > and I know who I'm dealing with.
>> >> >
>> >> > I know someone smarter than me and with more money, market leverage,
>> >> > and
>> >> > political connections **WILL** game the system and distort the
>> >> > market
>> >> > data
>> >> > history so they can take more money from buyers and sellers without
>> >> > actually
>> >> > doing some usefull market function.
>> >> >
>> >> > As long as use buyers and sellers can see the code, and have a good
>> >> > eye
>> >> > for
>> >> > knowing when someone's pushing the market around, we can just put
>> >> > our
>> >> > orders
>> >> > in and relieve some speculators of their money.
>> >> >
>> >> > Just get me working code for cross-chain trades, and we'll work on
>> >> > the
>> >> > accurate historic data problem later.
>> >> >
>> >> >
>> >> > ----------------------------------------------------------------------------
>> >> > Troy Benjegerdes                 'da hozer'
>> >> > hozer at hozed.org
>> >> > 7 elements      earth::water::air::fire::mind::spirit::soul
>> >> > grid.coop
>> >> >
>> >> >       Never pick a fight with someone who buys ink by the barrel,
>> >> >          nor try buy a hacker who makes money by the megahash
>> >> >
>> >> >
>> >> >
>> >> > ------------------------------------------------------------------------------
>> >> > Flow-based real-time traffic analytics software. Cisco certified
>> >> > tool.
>> >> > Monitor traffic, SLAs, QoS, Medianet, WAAS etc. with NetFlow
>> >> > Analyzer
>> >> > Customize your own dashboards, set traffic alerts and generate
>> >> > reports.
>> >> > Network behavioral analysis & security monitoring. All-in-one tool.
>> >> >
>> >> > http://pubads.g.doubleclick.net/gampad/clk?id=126839071&iu=/4140/ostg.clktrk
>> >> > _______________________________________________
>> >> > Bitcoin-development mailing list
>> >> > Bitcoin-development at lists.sourceforge.net
>> >> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>> >>
>> >>
>> >>
>> >> --
>> >> Jeff Garzik
>> >> Bitcoin core developer and open source evangelist
>> >> BitPay, Inc.      https://bitpay.com/
>> >>
>> >>
>> >> ------------------------------------------------------------------------------
>> >> Flow-based real-time traffic analytics software. Cisco certified tool.
>> >> Monitor traffic, SLAs, QoS, Medianet, WAAS etc. with NetFlow Analyzer
>> >> Customize your own dashboards, set traffic alerts and generate
>> >> reports.
>> >> Network behavioral analysis & security monitoring. All-in-one tool.
>> >>
>> >> http://pubads.g.doubleclick.net/gampad/clk?id=126839071&iu=/4140/ostg.clktrk
>> >> _______________________________________________
>> >> Bitcoin-development mailing list
>> >> Bitcoin-development at lists.sourceforge.net
>> >> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>
>>
>>
>> --
>> Jeff Garzik
>> Bitcoin core developer and open source evangelist
>> BitPay, Inc.      https://bitpay.com/
>
> --
> ----------------------------------------------------------------------------
> Troy Benjegerdes                 'da hozer'
> hozer at hozed.org
> 7 elements      earth::water::air::fire::mind::spirit::soul
> grid.coop
>
>       Never pick a fight with someone who buys ink by the barrel,
>          nor try buy a hacker who makes money by the megahash
>
>
> ------------------------------------------------------------------------------
> Flow-based real-time traffic analytics software. Cisco certified tool.
> Monitor traffic, SLAs, QoS, Medianet, WAAS etc. with NetFlow Analyzer
> Customize your own dashboards, set traffic alerts and generate reports.
> Network behavioral analysis & security monitoring. All-in-one tool.
> http://pubads.g.doubleclick.net/gampad/clk?id=126839071&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>


-- 
Jorge Tim?n

http://freico.in/



From tom at tomgeller.com  Sun Mar  2 20:10:09 2014
From: tom at tomgeller.com (Tom Geller)
Date: Sun, 2 Mar 2014 15:10:09 -0500
Subject: [Bitcoin-development] Procedure for non-tech contributions
In-Reply-To: <mailman.41250.1393785335.2207.bitcoin-development@lists.sourceforge.net>
References: <mailman.41250.1393785335.2207.bitcoin-development@lists.sourceforge.net>
Message-ID: <BCF42CA2-D68C-452C-9D98-E410E71B66EF@tomgeller.com>

Hey, folks. Sorry if this is documented somewhere -- if so, just point me at it. I couldn't find it, though.

I'm a (non-developer) writer with experience in open-source communities, and I'd like to contribute with writing/editing/marketing. What's the procedure? Is there someone in charge of that area?

Two examples:

1) Gavin recently asked for proofreading of 0.9.0rc2, but it was unclear how to send the changes. (There are many possibilities, some better than others. Git? Google Docs with revisioning? Microsoft Word with Track Changes? The Bitcoin wiki?)

2) The page at https://en.bitcoin.it/wiki/BitcoinPayment says that "the wiki receiving wallet (for the wiki itself) is also MtGox". Umm, I rather doubt that. :-P But I'm not sure what the current info is, or whom to alert.

Off-list replies welcome. Thanks,

---
          Tom Geller  *  Oberlin, Ohio  *  415-317-1805
           Writer/Presenter * http://www.tomgeller.com
         articles, marketing, videos, user guides, books





From pete at petertodd.org  Sun Mar  2 20:40:29 2014
From: pete at petertodd.org (Peter Todd)
Date: Sun, 2 Mar 2014 15:40:29 -0500
Subject: [Bitcoin-development] Procedure for non-tech contributions
In-Reply-To: <BCF42CA2-D68C-452C-9D98-E410E71B66EF@tomgeller.com>
References: <mailman.41250.1393785335.2207.bitcoin-development@lists.sourceforge.net>
	<BCF42CA2-D68C-452C-9D98-E410E71B66EF@tomgeller.com>
Message-ID: <20140302204029.GA21339@tilt>

On Sun, Mar 02, 2014 at 03:10:09PM -0500, Tom Geller wrote:
> Hey, folks. Sorry if this is documented somewhere -- if so, just point me at it. I couldn't find it, though.
> 
> I'm a (non-developer) writer with experience in open-source communities, and I'd like to contribute with writing/editing/marketing. What's the procedure? Is there someone in charge of that area?
> 
> Two examples:
> 
> 1) Gavin recently asked for proofreading of 0.9.0rc2, but it was unclear how to send the changes. (There are many possibilities, some better than others. Git? Google Docs with revisioning? Microsoft Word with Track Changes? The Bitcoin wiki?)

I proof-read rc1 and simply submitted my changes via pull-req:

    https://github.com/bitcoin/bitcoin/pull/3642

I'd say to encourage that method. If someone doesn't know how to use
git, yet still wants to proof-read, just send us a text-file with all
your corrections applied. We've got the tools to diff those changes
ourselves; no fancy software is required.


> 2) The page at https://en.bitcoin.it/wiki/BitcoinPayment says that "the wiki receiving wallet (for the wiki itself) is also MtGox". Umm, I rather doubt that. :-P But I'm not sure what the current info is, or whom to alert.

MtGox does host the bitcoin wiki, so yes, the funds probably do go to a
wallet held by MtGox in some fashion.

-- 
'peter'[:-1]@petertodd.org
000000000000000f9102d27cfd61ea9e8bb324593593ca3ce6ba53153ff251b3
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 490 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140302/94cc186a/attachment.sig>

From laanwj at gmail.com  Sun Mar  2 20:56:06 2014
From: laanwj at gmail.com (Wladimir)
Date: Sun, 2 Mar 2014 21:56:06 +0100
Subject: [Bitcoin-development] 0.9.0 release candidate two
In-Reply-To: <CAM6j61t2mtXd-AvCUV3AFc2j2Z438o4C0P1NwuUR2H4Hz9eYqQ@mail.gmail.com>
References: <CABsx9T3j8rmQzJTdWX5M2kk=V7J3i6SFgL5fPCOfL1m0hT_-wg@mail.gmail.com>
	<CAM6j61t2mtXd-AvCUV3AFc2j2Z438o4C0P1NwuUR2H4Hz9eYqQ@mail.gmail.com>
Message-ID: <CA+s+GJAKJHHK31wzjrAJVdb6Rw8WRVc6b4eEjWrj0GxXH=aCnQ@mail.gmail.com>

On Sun, Mar 2, 2014 at 7:34 PM, James Hartig <fastest963 at gmail.com> wrote:

> Heads up... downloaded the linux tar.gz to my OVH box and got my server
> terminated. Screenshot from the email:
> http://cl.ly/image/3q0C2a3Y0T0V
>
> They claimed I was attacking 88.198.199.140 over port 443.
>

Sounds very unlikely that bitcoind would connect to port 443, let alone
'attack' anything.

Anything in debug.log regarding that IP?

Wladimir
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140302/bc9e544a/attachment.html>

From fastest963 at gmail.com  Sun Mar  2 20:59:43 2014
From: fastest963 at gmail.com (James Hartig)
Date: Sun, 2 Mar 2014 15:59:43 -0500
Subject: [Bitcoin-development] 0.9.0 release candidate two
In-Reply-To: <CA+s+GJAKJHHK31wzjrAJVdb6Rw8WRVc6b4eEjWrj0GxXH=aCnQ@mail.gmail.com>
References: <CABsx9T3j8rmQzJTdWX5M2kk=V7J3i6SFgL5fPCOfL1m0hT_-wg@mail.gmail.com>
	<CAM6j61t2mtXd-AvCUV3AFc2j2Z438o4C0P1NwuUR2H4Hz9eYqQ@mail.gmail.com>
	<CA+s+GJAKJHHK31wzjrAJVdb6Rw8WRVc6b4eEjWrj0GxXH=aCnQ@mail.gmail.com>
Message-ID: <CAM6j61u46e4TGNPUJH1oMg7imKTuSafupzMVWjZPGtuY0a0fFQ@mail.gmail.com>

Didn't mean that bitcoind was connecting over port 443. I didn't even get a
chance to compile. I was literally just finished downloading the tar.gz
file when my server was terminated.

Still trying to convince them I wasn't attacking anyone so they can
re-enable the server.

Thanks,
--
James Hartig
Software Engineer @ Grooveshark.com
http://twitter.com/jameshartig





On Sun, Mar 2, 2014 at 3:56 PM, Wladimir <laanwj at gmail.com> wrote:

>
> On Sun, Mar 2, 2014 at 7:34 PM, James Hartig <fastest963 at gmail.com> wrote:
>
>> Heads up... downloaded the linux tar.gz to my OVH box and got my server
>> terminated. Screenshot from the email:
>> http://cl.ly/image/3q0C2a3Y0T0V
>>
>> They claimed I was attacking 88.198.199.140 over port 443.
>>
>
> Sounds very unlikely that bitcoind would connect to port 443, let alone
> 'attack' anything.
>
> Anything in debug.log regarding that IP?
>
> Wladimir
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140302/c3b35489/attachment.html>

From decker.christian at gmail.com  Sun Mar  2 21:11:01 2014
From: decker.christian at gmail.com (Christian Decker)
Date: Sun, 2 Mar 2014 22:11:01 +0100
Subject: [Bitcoin-development] 0.9.0 release candidate two
In-Reply-To: <CA+s+GJAKJHHK31wzjrAJVdb6Rw8WRVc6b4eEjWrj0GxXH=aCnQ@mail.gmail.com>
References: <CABsx9T3j8rmQzJTdWX5M2kk=V7J3i6SFgL5fPCOfL1m0hT_-wg@mail.gmail.com>
	<CAM6j61t2mtXd-AvCUV3AFc2j2Z438o4C0P1NwuUR2H4Hz9eYqQ@mail.gmail.com>
	<CA+s+GJAKJHHK31wzjrAJVdb6Rw8WRVc6b4eEjWrj0GxXH=aCnQ@mail.gmail.com>
Message-ID: <CALxbBHWCzJo-G3Y+Lsd8g5Q-MdXg6Xk_1m0GZfz-v4oyAzETyQ@mail.gmail.com>

The domain bitcoin.org resolves to that IP address. Could it be some
update check together with a circular redirect? That could at least
explain the large number of connection attempts.
--
Christian Decker


On Sun, Mar 2, 2014 at 9:56 PM, Wladimir <laanwj at gmail.com> wrote:
>
> On Sun, Mar 2, 2014 at 7:34 PM, James Hartig <fastest963 at gmail.com> wrote:
>>
>> Heads up... downloaded the linux tar.gz to my OVH box and got my server
>> terminated. Screenshot from the email:
>> http://cl.ly/image/3q0C2a3Y0T0V
>>
>> They claimed I was attacking 88.198.199.140 over port 443.
>
>
> Sounds very unlikely that bitcoind would connect to port 443, let alone
> 'attack' anything.
>
> Anything in debug.log regarding that IP?
>
> Wladimir
>
>
> ------------------------------------------------------------------------------
> Flow-based real-time traffic analytics software. Cisco certified tool.
> Monitor traffic, SLAs, QoS, Medianet, WAAS etc. with NetFlow Analyzer
> Customize your own dashboards, set traffic alerts and generate reports.
> Network behavioral analysis & security monitoring. All-in-one tool.
> http://pubads.g.doubleclick.net/gampad/clk?id=126839071&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>



From drak at zikula.org  Sun Mar  2 22:11:25 2014
From: drak at zikula.org (Drak)
Date: Sun, 2 Mar 2014 22:11:25 +0000
Subject: [Bitcoin-development] Procedure for non-tech contributions
In-Reply-To: <20140302204029.GA21339@tilt>
References: <mailman.41250.1393785335.2207.bitcoin-development@lists.sourceforge.net>
	<BCF42CA2-D68C-452C-9D98-E410E71B66EF@tomgeller.com>
	<20140302204029.GA21339@tilt>
Message-ID: <CANAnSg0a+1agr+L6a0WhUz1oB__3ZMFM8SLBaRZxQnuv6D9DyA@mail.gmail.com>

On 2 March 2014 20:40, Peter Todd <pete at petertodd.org> wrote:

> I proof-read rc1 and simply submitted my changes via pull-req:
>
>     https://github.com/bitcoin/bitcoin/pull/3642
>
> I'd say to encourage that method. If someone doesn't know how to use
> git, yet still wants to proof-read, just send us a text-file with all
> your corrections applied. We've got the tools to diff those changes
> ourselves; no fancy software is required.


Actually, this is unnecessary since github allows editing of files directly
on the site and the it will submit as a pull request. You can even update
by visiting your fork (it creates this automatically and a topic branch)
and make more edits and it will add to your PR. There is basically no
barrier for non techy people to contribute.

Drak
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140302/3e12d3e3/attachment.html>

From tom at tomgeller.com  Sun Mar  2 23:02:14 2014
From: tom at tomgeller.com (Tom Geller)
Date: Sun, 2 Mar 2014 18:02:14 -0500
Subject: [Bitcoin-development] Procedure for non-tech contributions
In-Reply-To: <CANAnSg0a+1agr+L6a0WhUz1oB__3ZMFM8SLBaRZxQnuv6D9DyA@mail.gmail.com>
References: <mailman.41250.1393785335.2207.bitcoin-development@lists.sourceforge.net>
	<BCF42CA2-D68C-452C-9D98-E410E71B66EF@tomgeller.com>
	<20140302204029.GA21339@tilt>
	<CANAnSg0a+1agr+L6a0WhUz1oB__3ZMFM8SLBaRZxQnuv6D9DyA@mail.gmail.com>
Message-ID: <E2C84BD6-CA8D-41D3-8C1E-BCCF67087F7F@tomgeller.com>

Peter Todd <pete at petertodd.org> wrote:
>> I proof-read rc1 and simply submitted my changes via pull-req:
>> 
>>     https://github.com/bitcoin/bitcoin/pull/3642

Drak responded:
> Actually, this is unnecessary since github allows editing of files directly on the site and the it will submit as a pull request. You can even update by visiting your fork (it creates this automatically and a topic branch) and make more edits and it will add to your PR. There is basically no barrier for non techy people to contribute.

Ooo, I like this. I *can* use git, but would love to be able to avoid it -- as would most non-technical contributors.

Anyway, this particular solution doesn't appear to be possible in this case, as the file isn't at https://github.com/bitcoin/bitcoin/tree/0.9.0/doc/release-notes , and I don't believe I could copy it to the repository without going the whole git route. Suggestions welcome, here or privately.

Peter writes:
> MtGox does host the bitcoin wiki, so yes, the funds probably do go to a wallet held by MtGox in some fashion.

The foolishness of sending a payment to a Mt. Gox-held wallet -- which is required to edit the wiki -- strikes me as a pressing issue. If I understand it correctly, this is a hard blocker that'll stop *all* new contributors. Further, I registered for the wiki and never got my confirmation email. Methinks the whole thing is broken. :(

Again, please to redirect me if this is inappropriate for this list. (I'm new here.) Cheers,

---
          Tom Geller  *  Oberlin, Ohio  *  415-317-1805
           Writer/Presenter * http://www.tomgeller.com
         articles, marketing, videos, user guides, books









From kevinsisco61784 at gmail.com  Mon Mar  3 03:34:27 2014
From: kevinsisco61784 at gmail.com (Kevin)
Date: Sun, 02 Mar 2014 22:34:27 -0500
Subject: [Bitcoin-development] New to this list
Message-ID: <5313F843.2090302@gmail.com>

Hello.  I am a developer and I wish to contribute to bitcoin.  Where is 
the best place to start?

-- 
Kevin




From will.yager at gmail.com  Mon Mar  3 03:45:10 2014
From: will.yager at gmail.com (William Yager)
Date: Sun, 2 Mar 2014 21:45:10 -0600
Subject: [Bitcoin-development] New to this list
In-Reply-To: <5313F843.2090302@gmail.com>
References: <5313F843.2090302@gmail.com>
Message-ID: <7D3FD2B1-781E-4174-AD93-17C9C6AB6CCE@gmail.com>

On Mar 2, 2014, at 21:34, Kevin <kevinsisco61784 at gmail.com> wrote:

> Hello.  I am a developer and I wish to contribute to bitcoin.  Where is 
> the best place to start?
> 
> -- 
> Kevin



Reading and learning the reference client?s source code, or doing the same for any number of non-reference-client Bitcoin projects.

Will


-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 495 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140302/997c3241/attachment.sig>

From luke at dashjr.org  Mon Mar  3 06:04:44 2014
From: luke at dashjr.org (Luke-Jr)
Date: Mon, 3 Mar 2014 06:04:44 +0000
Subject: [Bitcoin-development] Procedure for non-tech contributions
In-Reply-To: <E2C84BD6-CA8D-41D3-8C1E-BCCF67087F7F@tomgeller.com>
References: <mailman.41250.1393785335.2207.bitcoin-development@lists.sourceforge.net>
	<CANAnSg0a+1agr+L6a0WhUz1oB__3ZMFM8SLBaRZxQnuv6D9DyA@mail.gmail.com>
	<E2C84BD6-CA8D-41D3-8C1E-BCCF67087F7F@tomgeller.com>
Message-ID: <201403030604.46324.luke@dashjr.org>

On Sunday, March 02, 2014 11:02:14 PM Tom Geller wrote:
> Peter writes:
> > MtGox does host the bitcoin wiki, so yes, the funds probably do go to a
> > wallet held by MtGox in some fashion.
> 
> The foolishness of sending a payment to a Mt. Gox-held wallet -- which is
> required to edit the wiki -- strikes me as a pressing issue. If I
> understand it correctly, this is a hard blocker that'll stop *all* new
> contributors. Further, I registered for the wiki and never got my
> confirmation email. Methinks the whole thing is broken. :(

We've been working on moving the wiki to new hosting, but it isn't a very high 
priority (at least for MtGox). PM SomeoneWeird on IRC, as he is currently 
handling manually approving new accounts for editing.

Luke



From luke at dashjr.org  Mon Mar  3 06:09:01 2014
From: luke at dashjr.org (Luke-Jr)
Date: Mon, 3 Mar 2014 06:09:01 +0000
Subject: [Bitcoin-development] New to this list
In-Reply-To: <5313F843.2090302@gmail.com>
References: <5313F843.2090302@gmail.com>
Message-ID: <201403030609.02303.luke@dashjr.org>

On Monday, March 03, 2014 3:34:27 AM Kevin wrote:
> Hello.  I am a developer and I wish to contribute to bitcoin.  Where is
> the best place to start?

Unit tests. This will be valuable to the projects and also help you learn how 
things work.



From laanwj at gmail.com  Mon Mar  3 07:56:55 2014
From: laanwj at gmail.com (Wladimir)
Date: Mon, 3 Mar 2014 08:56:55 +0100
Subject: [Bitcoin-development] Procedure for non-tech contributions
In-Reply-To: <E2C84BD6-CA8D-41D3-8C1E-BCCF67087F7F@tomgeller.com>
References: <mailman.41250.1393785335.2207.bitcoin-development@lists.sourceforge.net>
	<BCF42CA2-D68C-452C-9D98-E410E71B66EF@tomgeller.com>
	<20140302204029.GA21339@tilt>
	<CANAnSg0a+1agr+L6a0WhUz1oB__3ZMFM8SLBaRZxQnuv6D9DyA@mail.gmail.com>
	<E2C84BD6-CA8D-41D3-8C1E-BCCF67087F7F@tomgeller.com>
Message-ID: <CA+s+GJC20-vKrkPhBdvHMQ5U_ocuFv_AYciPTYCexhRLsggUig@mail.gmail.com>

On Mon, Mar 3, 2014 at 12:02 AM, Tom Geller <tom at tomgeller.com> wrote:

> Anyway, this particular solution doesn't appear to be possible in this
> case, as the file isn't at
> https://github.com/bitcoin/bitcoin/tree/0.9.0/doc/release-notes , and I
> don't believe I could copy it to the repository without going the whole git
> route. Suggestions welcome, here or privately.
>

It's not entirely trivial as you have to make sure you're editing on the
0.9 branch not the master branch, but can be done like this:

- Go to https://github.com/bitcoin/bitcoin/blob/0.9.0/doc/release-notes.md
- Click "edit"
- Make your changes and add a commit message describing the change, usually
something like 'doc: Add missing foowidget to release notes'.

Wladimir
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140303/e36aef3a/attachment.html>

From odinn.cyberguerrilla at riseup.net  Mon Mar  3 09:59:08 2014
From: odinn.cyberguerrilla at riseup.net (Odinn Cyberguerrilla)
Date: Mon, 3 Mar 2014 01:59:08 -0800
Subject: [Bitcoin-development] Procedure for non-tech contributions
In-Reply-To: <BCF42CA2-D68C-452C-9D98-E410E71B66EF@tomgeller.com>
References: <mailman.41250.1393785335.2207.bitcoin-development@lists.sourceforge.net>
	<BCF42CA2-D68C-452C-9D98-E410E71B66EF@tomgeller.com>
Message-ID: <60dff41888c26ef7623fec4872d860ac.squirrel@fruiteater.riseup.net>

Hi, you may want to check this out:

http://www.reddit.com/r/Bitcoin/comments/1rh2h0/developers_core_developers_contributors/

Cheers,

-Odinn
 http://abis.io

> Hey, folks. Sorry if this is documented somewhere -- if so, just point me
> at it. I couldn't find it, though.
>
> I'm a (non-developer) writer with experience in open-source communities,
> and I'd like to contribute with writing/editing/marketing. What's the
> procedure? Is there someone in charge of that area?
>
> Two examples:
>
> 1) Gavin recently asked for proofreading of 0.9.0rc2, but it was unclear
> how to send the changes. (There are many possibilities, some better than
> others. Git? Google Docs with revisioning? Microsoft Word with Track
> Changes? The Bitcoin wiki?)
>
> 2) The page at https://en.bitcoin.it/wiki/BitcoinPayment says that "the
> wiki receiving wallet (for the wiki itself) is also MtGox". Umm, I rather
> doubt that. :-P But I'm not sure what the current info is, or whom to
> alert.
>
> Off-list replies welcome. Thanks,
>
> ---
>           Tom Geller  *  Oberlin, Ohio  *  415-317-1805
>            Writer/Presenter * http://www.tomgeller.com
>          articles, marketing, videos, user guides, books
>
>
>
> ------------------------------------------------------------------------------
> Flow-based real-time traffic analytics software. Cisco certified tool.
> Monitor traffic, SLAs, QoS, Medianet, WAAS etc. with NetFlow Analyzer
> Customize your own dashboards, set traffic alerts and generate reports.
> Network behavioral analysis & security monitoring. All-in-one tool.
> http://pubads.g.doubleclick.net/gampad/clk?id=126839071&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>





From drak at zikula.org  Mon Mar  3 12:39:36 2014
From: drak at zikula.org (Drak)
Date: Mon, 3 Mar 2014 12:39:36 +0000
Subject: [Bitcoin-development] Payment Protocol Hash Comments
In-Reply-To: <CANEZrP3owLtLnBHZ4vEBYcdkQ0WtpDDQ8CXK+92oNd1rgaEZyg@mail.gmail.com>
References: <op.xb05iptvyldrnw@laptop-air> <op.xb2352ezyldrnw@laptop-air>
	<CANEZrP22SF4bD2pA3MyNmAojUmtZ20r=eL2Lgt=Fa4ZJyG=5SA@mail.gmail.com>
	<CANAnSg1fwkzXebbCMEf6XeGD0SG+ny=vKW-2nC_40yhkn1LVkg@mail.gmail.com>
	<CANEZrP3owLtLnBHZ4vEBYcdkQ0WtpDDQ8CXK+92oNd1rgaEZyg@mail.gmail.com>
Message-ID: <CANAnSg2VsKaqPTckf45DemP0KxC05MZS++c7BP7MRL18f3YWzA@mail.gmail.com>

On 2 March 2014 10:39, Mike Hearn <mike at plan99.net> wrote:

> I'm just repeating the rationale Gavin gave me for adding this to the spec
> last year when he was implementing it. Perhaps it only applied to some
> versions of PHP or something like that.
>

OK, but certainly now, SHA-2 is available as standard in PHP and has been
since PHP 5.1.2 as part of the hash() function. You can see from usage
stats that means practically every installation
http://w3techs.com/technologies/details/pl-php/5/all is PHP 5.2 and above.

Unless there is some other compelling reason, I would suggest removing
SHA-1 from the specification.

Drak
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140303/620472ea/attachment.html>

From tom at tomgeller.com  Mon Mar  3 18:46:26 2014
From: tom at tomgeller.com (Tom Geller)
Date: Mon, 3 Mar 2014 13:46:26 -0500
Subject: [Bitcoin-development] Procedure for non-tech contributions
In-Reply-To: <mailman.41744.1393833438.2178.bitcoin-development@lists.sourceforge.net>
References: <mailman.41744.1393833438.2178.bitcoin-development@lists.sourceforge.net>
Message-ID: <05EE0D18-C42A-4DCD-A3A3-18CD0B64A386@tomgeller.com>

Thanks to everyone with advice re: editing text on github, and Mt. Gox' control of the wiki. Regarding the latter, "SerajewelKS" and "gmaxwell" in IRC/bitcoin confirmed that fixes are underway, but didn't give specifics. I'll wait.

Regarding text editing, special thanks to Wladimir for the simplest solution:

> - Go to https://github.com/bitcoin/bitcoin/blob/0.9.0/doc/release-notes.md
> - Click "edit"
> - Make your changes and add a commit message describing the change, usually something like 'doc: Add missing foowidget to release notes'.

I'll try to make time to go over the 0.9.0rc2 text soon. Cheers,

---
          Tom Geller  *  Oberlin, Ohio  *  415-317-1805
           Writer/Presenter * http://www.tomgeller.com
         articles, marketing, videos, user guides, books





From tom at tomgeller.com  Mon Mar  3 19:13:20 2014
From: tom at tomgeller.com (Tom Geller)
Date: Mon, 3 Mar 2014 14:13:20 -0500
Subject: [Bitcoin-development] Procedure for non-tech contributions
In-Reply-To: <05EE0D18-C42A-4DCD-A3A3-18CD0B64A386@tomgeller.com>
References: <mailman.41744.1393833438.2178.bitcoin-development@lists.sourceforge.net>
	<05EE0D18-C42A-4DCD-A3A3-18CD0B64A386@tomgeller.com>
Message-ID: <65F7B0E8-5DAA-49E3-B284-9086D426F0D9@tomgeller.com>

FYI, I made my edits to the release notes of 0.9.0rc2; the pull request is at https://github.com/bitcoin/bitcoin/pull/3787. I gladly welcome corrections as needed.

First contribution! :)

Cheers,

---
          Tom Geller  *  Oberlin, Ohio  *  415-317-1805
           Writer/Presenter * http://www.tomgeller.com
         articles, marketing, videos, user guides, books




From tom at tomgeller.com  Mon Mar  3 19:40:33 2014
From: tom at tomgeller.com (Tom Geller)
Date: Mon, 3 Mar 2014 14:40:33 -0500
Subject: [Bitcoin-development] Procedure for non-tech contributions
In-Reply-To: <65F7B0E8-5DAA-49E3-B284-9086D426F0D9@tomgeller.com>
References: <mailman.41744.1393833438.2178.bitcoin-development@lists.sourceforge.net>
	<05EE0D18-C42A-4DCD-A3A3-18CD0B64A386@tomgeller.com>
	<65F7B0E8-5DAA-49E3-B284-9086D426F0D9@tomgeller.com>
Message-ID: <D7CC04BF-5FCE-4525-AAAB-FDE30F8FE66D@tomgeller.com>

On Mar 3, 2014, at 2:13 PM, Tom Geller wrote:

> FYI, I made my edits to the release notes of 0.9.0rc2; the pull request is at https://github.com/bitcoin/bitcoin/pull/3787. I gladly welcome corrections as needed.

It failed testing. I assume I'll get emails as others add comments; please contact me privately if it doesn't, and you're willing to help this n00b. Thanks, 

---
          Tom Geller  *  Oberlin, Ohio  *  415-317-1805
           Writer/Presenter * http://www.tomgeller.com
         articles, marketing, videos, user guides, books









From mike at plan99.net  Mon Mar  3 21:18:43 2014
From: mike at plan99.net (Mike Hearn)
Date: Mon, 3 Mar 2014 22:18:43 +0100
Subject: [Bitcoin-development] Procedure for non-tech contributions
In-Reply-To: <D7CC04BF-5FCE-4525-AAAB-FDE30F8FE66D@tomgeller.com>
References: <mailman.41744.1393833438.2178.bitcoin-development@lists.sourceforge.net>
	<05EE0D18-C42A-4DCD-A3A3-18CD0B64A386@tomgeller.com>
	<65F7B0E8-5DAA-49E3-B284-9086D426F0D9@tomgeller.com>
	<D7CC04BF-5FCE-4525-AAAB-FDE30F8FE66D@tomgeller.com>
Message-ID: <CANEZrP0YjzUHRJfsoWeWdkOPYkTekEOKtW+sOaU110-q1b8xxg@mail.gmail.com>

Hey Tom,

Thanks for getting involved! It's great to see someone who would like to
focus on docs.

One project I've been thinking about recently is a "Bitcoin Developer
Network" subsection of our website. Right now bitcoin.org is entirely
consumer focused. And as you noted, the wiki is undergoing some kind of
heart attack - it's not an ideal medium for professional docs anyway.

So it's too hard to learn how to work with Bitcoin as a developer, and we
could really benefit from professionally curated web content. We have a
great web dev in the form of Saivann, who recently got some sponsorship
from the Foundation to spend time on the website, so I'm hoping that if we
find people to produce the content then he can with the visual design and
we could create something really special.

If you're interested in this let me know.


On Mon, Mar 3, 2014 at 8:40 PM, Tom Geller <tom at tomgeller.com> wrote:

> On Mar 3, 2014, at 2:13 PM, Tom Geller wrote:
>
> > FYI, I made my edits to the release notes of 0.9.0rc2; the pull request
> is at https://github.com/bitcoin/bitcoin/pull/3787. I gladly welcome
> corrections as needed.
>
> It failed testing. I assume I'll get emails as others add comments; please
> contact me privately if it doesn't, and you're willing to help this n00b.
> Thanks,
>
> ---
>           Tom Geller  *  Oberlin, Ohio  *  415-317-1805
>            Writer/Presenter * http://www.tomgeller.com
>          articles, marketing, videos, user guides, books
>
>
>
>
>
>
>
>
> ------------------------------------------------------------------------------
> Subversion Kills Productivity. Get off Subversion & Make the Move to
> Perforce.
> With Perforce, you get hassle-free workflows. Merge that actually works.
> Faster operations. Version large binaries.  Built-in WAN optimization and
> the
> freedom to use Git, Perforce or both. Make the move to Perforce.
>
> http://pubads.g.doubleclick.net/gampad/clk?id=122218951&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140303/31939639/attachment.html>

From ed at realitykeys.com  Tue Mar  4 02:59:48 2014
From: ed at realitykeys.com (Edmund Edgar)
Date: Tue, 4 Mar 2014 11:59:48 +0900
Subject: [Bitcoin-development] Is this a safe thing to be doing with ECC
	addition? (Oracle protocol)
Message-ID: <CA+su7OWD8dyPLK_AHZdXJ-zeJ81CsLFrKkZo+L-byfLWYsKBPw@mail.gmail.com>

Some people may have seen my service Reality Keys, which can perform a role
a bit like an External State Oracle as described previously by Mike Hearn
and others. (I like to think of it as a Certificate Authority for
propositions, doing for facts what Verisign do for identities.) You
register a possible outcome with us, we publish a public key for "yes" and
another for "no", and once the outcome happens or fails to happen, we
publish the appropriate private key.

A few people have been asking for advice on the best way to use our keys to
make m-of-n contracts, where each party locks up their stake in a
transaction, then the winner gets their private key from Reality Keys and
uses it to release the funds. Peter Todd suggested what seems like a very
nice way to do this without needing non-standard transactions or refund
transactions. I've had a go at implementing it and it seems to work, but I
don't know enough about this to distinguish the ECC bit of it from magic,
so I'm wondering if people who do understand it could comment on whether
it's a safe thing to be doing.

What I'm trying to do here is to combine the public key of each party with
the public key of the outcome they're representing, eg I make a public key
with:
 <alice-pub> + <reality-key-yes-pub>
...and another with:
 <bob-pub> + <reality-key-no-pub>

That goes into a 1/2 P2SH address (in the simplest possible case), which is
spendable by one of Alice or Bob after the outcome occurs with either:
 <alice-priv> + <reality-key-yes-priv>
...or
 <bob-priv> + <reality-key-no-priv>

I'm making the transaction with add_pubkeys, then spending it with
add_privkeys, both from:
https://github.com/vbuterin/pybitcointools/blob/master/pybitcointools/main.py#L173

What's worrying my superstitious mind is that knowing <reality-key-no-pub>
before he has to produce <bob-pub>, I'm wondering if there's something Bob
could do with <bob-pub> to intentionally weaken the resulting (<bob-pub> +
<reality-key-no-pub>) so that he could sign a transaction with it without
needing to know <reality-key-no-priv>.

My example script (and specifically the bit that's scaring me) is here:
https://github.com/edmundedgar/realitykeys-examples/blob/master/realitykeysdemo.py#L247

PS. I hope I'm not too far off-topic. Peter Todd suggested it might be
worth talking about here as it potentially has implications for other
protocols. If people prefer to respond at bitcointalk instead, we've been
discussing it here:
https://bitcointalk.org/index.php?topic=260898.60

-- 
Edmund Edgar
Founder, Social Minds Inc (KK)
Twitter: @edmundedgar
Linked In: edmundedgar
Skype: edmundedgar
http://www.socialminds.jp

Reality Keys
@realitykeys
ed at realitykeys.com
https://www.realitykeys.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140304/868b6814/attachment.html>

From odinn.cyberguerrilla at riseup.net  Tue Mar  4 05:07:45 2014
From: odinn.cyberguerrilla at riseup.net (Odinn Cyberguerrilla)
Date: Mon, 3 Mar 2014 21:07:45 -0800
Subject: [Bitcoin-development] Is this a safe thing to be doing with ECC
 addition? (Oracle protocol)
In-Reply-To: <CA+su7OWD8dyPLK_AHZdXJ-zeJ81CsLFrKkZo+L-byfLWYsKBPw@mail.gmail.com>
References: <CA+su7OWD8dyPLK_AHZdXJ-zeJ81CsLFrKkZo+L-byfLWYsKBPw@mail.gmail.com>
Message-ID: <89bcba571af745c3dbcc68baddf5126f.squirrel@fulvetta.riseup.net>

Nothing is safe.

Take risks.  Engage one trouble at a time.

Perform unexpected actions.

Observe the results.

Rinse and repeat.

Ignore the lions.  They too shall pass.

"Do not sleep under a roof. Carry no money or food. Go alone to places
frightening to the common brand of men. Become a criminal of purpose. Be
put in jail, and extricate yourself by your own wisdom."

-- Miyamoto Musashi (Niten Ichi-ry?)



> Some people may have seen my service Reality Keys, which can perform a
> role
> a bit like an External State Oracle as described previously by Mike Hearn
> and others. (I like to think of it as a Certificate Authority for
> propositions, doing for facts what Verisign do for identities.) You
> register a possible outcome with us, we publish a public key for "yes" and
> another for "no", and once the outcome happens or fails to happen, we
> publish the appropriate private key.
>
> A few people have been asking for advice on the best way to use our keys
> to
> make m-of-n contracts, where each party locks up their stake in a
> transaction, then the winner gets their private key from Reality Keys and
> uses it to release the funds. Peter Todd suggested what seems like a very
> nice way to do this without needing non-standard transactions or refund
> transactions. I've had a go at implementing it and it seems to work, but I
> don't know enough about this to distinguish the ECC bit of it from magic,
> so I'm wondering if people who do understand it could comment on whether
> it's a safe thing to be doing.
>
> What I'm trying to do here is to combine the public key of each party with
> the public key of the outcome they're representing, eg I make a public key
> with:
>  <alice-pub> + <reality-key-yes-pub>
> ...and another with:
>  <bob-pub> + <reality-key-no-pub>
>
> That goes into a 1/2 P2SH address (in the simplest possible case), which
> is
> spendable by one of Alice or Bob after the outcome occurs with either:
>  <alice-priv> + <reality-key-yes-priv>
> ...or
>  <bob-priv> + <reality-key-no-priv>
>
> I'm making the transaction with add_pubkeys, then spending it with
> add_privkeys, both from:
> https://github.com/vbuterin/pybitcointools/blob/master/pybitcointools/main.py#L173
>
> What's worrying my superstitious mind is that knowing <reality-key-no-pub>
> before he has to produce <bob-pub>, I'm wondering if there's something Bob
> could do with <bob-pub> to intentionally weaken the resulting (<bob-pub> +
> <reality-key-no-pub>) so that he could sign a transaction with it without
> needing to know <reality-key-no-priv>.
>
> My example script (and specifically the bit that's scaring me) is here:
> https://github.com/edmundedgar/realitykeys-examples/blob/master/realitykeysdemo.py#L247
>
> PS. I hope I'm not too far off-topic. Peter Todd suggested it might be
> worth talking about here as it potentially has implications for other
> protocols. If people prefer to respond at bitcointalk instead, we've been
> discussing it here:
> https://bitcointalk.org/index.php?topic=260898.60
>
> --
> Edmund Edgar
> Founder, Social Minds Inc (KK)
> Twitter: @edmundedgar
> Linked In: edmundedgar
> Skype: edmundedgar
> http://www.socialminds.jp
>
> Reality Keys
> @realitykeys
> ed at realitykeys.com
> https://www.realitykeys.com
> ------------------------------------------------------------------------------
> Subversion Kills Productivity. Get off Subversion & Make the Move to
> Perforce.
> With Perforce, you get hassle-free workflows. Merge that actually works.
> Faster operations. Version large binaries.  Built-in WAN optimization and
> the
> freedom to use Git, Perforce or both. Make the move to Perforce.
> http://pubads.g.doubleclick.net/gampad/clk?id=122218951&iu=/4140/ostg.clktrk_______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>





From tom at tomgeller.com  Tue Mar  4 19:10:08 2014
From: tom at tomgeller.com (Tom Geller)
Date: Tue, 4 Mar 2014 14:10:08 -0500
Subject: [Bitcoin-development] Procedure for non-tech contributions
In-Reply-To: <CANEZrP0YjzUHRJfsoWeWdkOPYkTekEOKtW+sOaU110-q1b8xxg@mail.gmail.com>
References: <mailman.41744.1393833438.2178.bitcoin-development@lists.sourceforge.net>
	<05EE0D18-C42A-4DCD-A3A3-18CD0B64A386@tomgeller.com>
	<65F7B0E8-5DAA-49E3-B284-9086D426F0D9@tomgeller.com>
	<D7CC04BF-5FCE-4525-AAAB-FDE30F8FE66D@tomgeller.com>
	<CANEZrP0YjzUHRJfsoWeWdkOPYkTekEOKtW+sOaU110-q1b8xxg@mail.gmail.com>
Message-ID: <05F49C13-FDBC-47D9-BEA6-DD3BA0CA5179@tomgeller.com>

I'm taking this private. Thanks again to all for your help getting me involved!

---
         Tom Geller  *  Oberlin, Ohio  *  415-317-1805
          Writer/Presenter * http://www.tomgeller.com
        articles, marketing, videos, user guides, books





On Mar 3, 2014, at 4:18 PM, Mike Hearn wrote:

> Hey Tom,
> 
> Thanks for getting involved! It's great to see someone who would like to focus on docs.
> 
> One project I've been thinking about recently is a "Bitcoin Developer Network" subsection of our website. Right now bitcoin.org is entirely consumer focused. And as you noted, the wiki is undergoing some kind of heart attack - it's not an ideal medium for professional docs anyway.
> 
> So it's too hard to learn how to work with Bitcoin as a developer, and we could really benefit from professionally curated web content. We have a great web dev in the form of Saivann, who recently got some sponsorship from the Foundation to spend time on the website, so I'm hoping that if we find people to produce the content then he can with the visual design and we could create something really special.
> 
> If you're interested in this let me know.

[snip remainder of thread]


From mike at plan99.net  Wed Mar  5 10:18:41 2014
From: mike at plan99.net (Mike Hearn)
Date: Wed, 5 Mar 2014 11:18:41 +0100
Subject: [Bitcoin-development] BIP70 proposed changes
In-Reply-To: <5303B110.70603@bitpay.com>
References: <le05ca$qn5$1@ger.gmane.org>
	<5303B110.70603@bitpay.com>
Message-ID: <CANEZrP3mUnU9h20V_Ss_FH0md91PnKhUTKmuM_8rPPuZuvjdJA@mail.gmail.com>

>
> On an unrelated note, X.509 is a terrible standard that should be
> abandoned as quickly as possible. BitPay is working on a new standard
> based on bitcoin-like addresses for authentication. It would be great if
> we could work with the community to establish a complete, decentralized
> authentication protocol. The sooner we can evolve beyond X.509 the better.


Because this is such a common sentiment, I wrote a couple of articles on
the matter.

The first is about why BIP 70 uses the SSL PKI and an examination of the
most commonly proposed alternative ideas:

   https://medium.com/p/b64cf5912aa7

... including the web of trust, using bitcoin addresses/the block chain,
allowing multiple certs, trust-on-first-use and (for SSL only)
perspectives/convergence.

The second is a summary of some of the most famous crypto-usability
research papers published in the past 10-15 years. They cover SSL and PGP.
If you're interested in designing alternatives, reading these papers would
be a good place to start:

    https://medium.com/p/d04ea6a2c771

There's a book from O'Reilly called Security & Usability that contains 34
papers and essays. It's very good:

   http://shop.oreilly.com/product/9780596008277.do
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140305/544be4ef/attachment.html>

From mike at plan99.net  Wed Mar  5 12:49:22 2014
From: mike at plan99.net (Mike Hearn)
Date: Wed, 5 Mar 2014 13:49:22 +0100
Subject: [Bitcoin-development] New side channel attack that can recover
	Bitcoin keys
Message-ID: <CANEZrP25N7W_MeZin_pyVQP5pC8bt5yqJzTXt_tN1P6kWb5i2w@mail.gmail.com>

A new practical technique has been published that can recover secp256k1
private keys after observing OpenSSL calculate as little as 200 signatures:

http://eprint.iacr.org/2014/161.pdf

This attack is based on the FLUSH+RELOAD technique published last year. It
works by observing L3 CPU cache timings and forcing cache line flushes
using the clflush opcode. As a result, it is applicable to any x86
environment where an attacker may be able to run on the same hardware i.e.
virtualised hosting environments where keys are being reused.

I am not currently aware of any efforts to make OpenSSL's secp256k1
implementation completely side channel free in all aspects. Also,
unfortunately many people have reimplemented ECDSA themselves and even if
OpenSSL gets fixed, the custom implementations probably won't.

So, IMHO this is a sign for hot wallet users to start walking (but not
running) towards the exits of these shared cloud services:  it doesn't feel
safe to sign transactions on these platforms, so hot wallets should be
managed by dedicated hardware. Of course other parts of the service, like
the website, are less sensitive and can still run in the cloud. I doubt the
researchers will release their code to do the side channel attack and it's
rather complex to reimplement, so this gives some time for mitigation.
Unfortunately the huge sums being held in some "bitbank" style hot wallets
mean that attackers are well motivated to pull off even quite complex
attacks.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140305/174ed1d2/attachment.html>

From pieter.wuille at gmail.com  Wed Mar  5 12:56:05 2014
From: pieter.wuille at gmail.com (Pieter Wuille)
Date: Wed, 5 Mar 2014 13:56:05 +0100
Subject: [Bitcoin-development] New side channel attack that can recover
 Bitcoin keys
In-Reply-To: <CANEZrP25N7W_MeZin_pyVQP5pC8bt5yqJzTXt_tN1P6kWb5i2w@mail.gmail.com>
References: <CANEZrP25N7W_MeZin_pyVQP5pC8bt5yqJzTXt_tN1P6kWb5i2w@mail.gmail.com>
Message-ID: <CAPg+sBgRn_hOVzTRwvtYaLEKmJR9Lfb-WDsA4eh9+FfAv9+Q5Q@mail.gmail.com>

On Wed, Mar 5, 2014 at 1:49 PM, Mike Hearn <mike at plan99.net> wrote:
> I am not currently aware of any efforts to make OpenSSL's secp256k1
> implementation completely side channel free in all aspects. Also,
> unfortunately many people have reimplemented ECDSA themselves and even if
> OpenSSL gets fixed, the custom implementations probably won't.

As far as I know, judging from the implementation, there is hardly any
effort to try to prevent timing attacks.

-- 
Pieter



From jeanpaulkogelman at me.com  Wed Mar  5 13:18:31 2014
From: jeanpaulkogelman at me.com (Jean-Paul Kogelman)
Date: Wed, 05 Mar 2014 21:18:31 +0800
Subject: [Bitcoin-development] New side channel attack that can recover
 Bitcoin keys
In-Reply-To: <CAPg+sBgRn_hOVzTRwvtYaLEKmJR9Lfb-WDsA4eh9+FfAv9+Q5Q@mail.gmail.com>
References: <CANEZrP25N7W_MeZin_pyVQP5pC8bt5yqJzTXt_tN1P6kWb5i2w@mail.gmail.com>
	<CAPg+sBgRn_hOVzTRwvtYaLEKmJR9Lfb-WDsA4eh9+FfAv9+Q5Q@mail.gmail.com>
Message-ID: <B8414072-3C87-46BE-82DA-B372927300AA@me.com>



> On Mar 5, 2014, at 8:56 PM, Pieter Wuille <pieter.wuille at gmail.com> wrote:
> 
>> On Wed, Mar 5, 2014 at 1:49 PM, Mike Hearn <mike at plan99.net> wrote:
>> I am not currently aware of any efforts to make OpenSSL's secp256k1
>> implementation completely side channel free in all aspects. Also,
>> unfortunately many people have reimplemented ECDSA themselves and even if
>> OpenSSL gets fixed, the custom implementations probably won't.
> 
> As far as I know, judging from the implementation, there is hardly any
> effort to try to prevent timing attacks.
> 

Is it safe to assume that this is also true for your secp256k1 implementation?

jp


> -- 
> Pieter
> 
> ------------------------------------------------------------------------------
> Subversion Kills Productivity. Get off Subversion & Make the Move to Perforce.
> With Perforce, you get hassle-free workflows. Merge that actually works. 
> Faster operations. Version large binaries.  Built-in WAN optimization and the
> freedom to use Git, Perforce or both. Make the move to Perforce.
> http://pubads.g.doubleclick.net/gampad/clk?id=122218951&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development



From pieter.wuille at gmail.com  Wed Mar  5 14:04:41 2014
From: pieter.wuille at gmail.com (Pieter Wuille)
Date: Wed, 5 Mar 2014 15:04:41 +0100
Subject: [Bitcoin-development] New side channel attack that can recover
 Bitcoin keys
In-Reply-To: <B8414072-3C87-46BE-82DA-B372927300AA@me.com>
References: <CANEZrP25N7W_MeZin_pyVQP5pC8bt5yqJzTXt_tN1P6kWb5i2w@mail.gmail.com>
	<CAPg+sBgRn_hOVzTRwvtYaLEKmJR9Lfb-WDsA4eh9+FfAv9+Q5Q@mail.gmail.com>
	<B8414072-3C87-46BE-82DA-B372927300AA@me.com>
Message-ID: <CAPg+sBgR1Ycaf5g1TCs7=ok2YSxoNhTJcAFdnO8o4BK47vavWg@mail.gmail.com>

On Wed, Mar 5, 2014 at 2:18 PM, Jean-Paul Kogelman
<jeanpaulkogelman at me.com> wrote:
>> As far as I know, judging from the implementation, there is hardly any
>> effort to try to prevent timing attacks.
>>
>
> Is it safe to assume that this is also true for your secp256k1 implementation?

I've done some preliminary work on making it leak less, but it's by no
means guaranteed to be constant time either (so better assume it is
not).

-- 
Pieter



From kevinsisco61784 at gmail.com  Wed Mar  5 16:21:52 2014
From: kevinsisco61784 at gmail.com (Kevin)
Date: Wed, 05 Mar 2014 11:21:52 -0500
Subject: [Bitcoin-development] New side channel attack that can recover
 Bitcoin keys
In-Reply-To: <CANEZrP25N7W_MeZin_pyVQP5pC8bt5yqJzTXt_tN1P6kWb5i2w@mail.gmail.com>
References: <CANEZrP25N7W_MeZin_pyVQP5pC8bt5yqJzTXt_tN1P6kWb5i2w@mail.gmail.com>
Message-ID: <53174F20.10207@gmail.com>

On 3/5/2014 7:49 AM, Mike Hearn wrote:
> A new practical technique has been published that can recover 
> secp256k1 private keys after observing OpenSSL calculate as little as 
> 200 signatures:
>
> http://eprint.iacr.org/2014/161.pdf
>
> This attack is based on the FLUSH+RELOAD technique published last 
> year. It works by observing L3 CPU cache timings and forcing cache 
> line flushes using the clflush opcode. As a result, it is applicable 
> to any x86 environment where an attacker may be able to run on the 
> same hardware i.e. virtualised hosting environments where keys are 
> being reused.
>
> I am not currently aware of any efforts to make OpenSSL's secp256k1 
> implementation completely side channel free in all aspects. Also, 
> unfortunately many people have reimplemented ECDSA themselves and even 
> if OpenSSL gets fixed, the custom implementations probably won't.
>
> So, IMHO this is a sign for hot wallet users to start walking (but not 
> running) towards the exits of these shared cloud services:  it doesn't 
> feel safe to sign transactions on these platforms, so hot wallets 
> should be managed by dedicated hardware. Of course other parts of the 
> service, like the website, are less sensitive and can still run in the 
> cloud. I doubt the researchers will release their code to do the side 
> channel attack and it's rather complex to reimplement, so this gives 
> some time for mitigation. Unfortunately the huge sums being held in 
> some "bitbank" style hot wallets mean that attackers are well 
> motivated to pull off even quite complex attacks.
>
>
> ------------------------------------------------------------------------------
> Subversion Kills Productivity. Get off Subversion & Make the Move to Perforce.
> With Perforce, you get hassle-free workflows. Merge that actually works.
> Faster operations. Version large binaries.  Built-in WAN optimization and the
> freedom to use Git, Perforce or both. Make the move to Perforce.
> http://pubads.g.doubleclick.net/gampad/clk?id=122218951&iu=/4140/ostg.clktrk
>
>
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
How can we patch this issue?


-- 
Kevin

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140305/64ceb7da/attachment.html>

From pete at petertodd.org  Wed Mar  5 19:39:10 2014
From: pete at petertodd.org (Peter Todd)
Date: Wed, 5 Mar 2014 14:39:10 -0500
Subject: [Bitcoin-development] New side channel attack that can recover
 Bitcoin keys
In-Reply-To: <53174F20.10207@gmail.com>
References: <CANEZrP25N7W_MeZin_pyVQP5pC8bt5yqJzTXt_tN1P6kWb5i2w@mail.gmail.com>
	<53174F20.10207@gmail.com>
Message-ID: <20140305193910.GA24917@tilt>

On Wed, Mar 05, 2014 at 11:21:52AM -0500, Kevin wrote:
> On 3/5/2014 7:49 AM, Mike Hearn wrote:
> >A new practical technique has been published that can recover
> >secp256k1 private keys after observing OpenSSL calculate as little
> >as 200 signatures:
>
> How can we patch this issue?

If you're following good practices you're not particularly vulneable to
it, if at all, even if you make use of shared hosting. First of all you
shouldn't be re-using addresses, which means you won't be passing that
~200 sig threshold.

More important though is you shouldn't be using single factor Bitcoin
addresses. Use n-of-m multisig instead and architect your system such
that that every transaction that happens in your service has to be
authorized by both the "online" server(s) that host your website as well
as a second "hardened" server with an extremely limited interface
between it and the online server. The hardened second factor *should*
use a separate codebase, ideally even a second language, to authenticate
actions that withdraw funds or generate new addresses based on data
given to it by the online server. In the best case your customers are
PGP-signing requests so you can verify their intent independently and
cryptographically on both servers. Mircea Popescu's MPEx exchange is an
example of this model, although I don't think they're doing any multisig
stuff. Failing that you can at least use the second server to do things
like limit losses by flagging higher-than-expected withdrawl volumes and
unusual events.

Since this second-factor server only deals with business logic - not the
website - you can certainly find a secure hosting arrangement for it
with physical control. I recommend you stick the machine in your
apartment and use tor + hidden services to connect to it from your VM
instances.

Note too that even if all you're doing is accepting Bitcoins from
customers, perhaps in exchange for goods, all of the above *still*
applies modulo the fact that the payment protocol is very incomplete.


With P2SH (finally!) supported in all the major Bitcoin wallets there
simply is no excuse not to have such an architecture other than lazyness
and transaction fees; if you fall into the latter category you're
business may very well be wiped out anyway by increased fees.

-- 
'peter'[:-1]@petertodd.org
000000000000000f9102d27cfd61ea9e8bb324593593ca3ce6ba53153ff251b3
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 490 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140305/f42ea4b1/attachment.sig>

From gmaxwell at gmail.com  Wed Mar  5 19:51:25 2014
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Wed, 5 Mar 2014 11:51:25 -0800
Subject: [Bitcoin-development] New side channel attack that can recover
 Bitcoin keys
In-Reply-To: <20140305193910.GA24917@tilt>
References: <CANEZrP25N7W_MeZin_pyVQP5pC8bt5yqJzTXt_tN1P6kWb5i2w@mail.gmail.com>
	<53174F20.10207@gmail.com> <20140305193910.GA24917@tilt>
Message-ID: <CAAS2fgR+q4fDs3JfX9az8b17Dk7VKjC3SxYja-2spwU-kM74fA@mail.gmail.com>

On Wed, Mar 5, 2014 at 11:39 AM, Peter Todd <pete at petertodd.org> wrote:
> If you're following good practices you're not particularly vulneable to
> it, if at all, even if you make use of shared hosting. First of all you
> shouldn't be re-using addresses, which means you won't be passing that
> ~200 sig threshold.
>
> More important though is you shouldn't be using single factor Bitcoin
> addresses. Use n-of-m multisig instead and architect your system such

Both of these things have long been promoted as virtuous in part
because they increase robustness against this sort of thing.

But while I don't disagree with these things the reality is that many
people do not follow either of these piece of advice and following
them requires behavioral changes that will not be adopted quickly...
so I don't think that advice is especially useful.

And even if it were?, good security involves defense in depth, so
adding on top of them things like side-channel resistant signing is
important.

I haven't had a chance to sit down and think through it completely but
I believe oleganza's recent blind signature scheme for ECDSA may be
helpful (http://oleganza.com/blind-ecdsa-draft-v2.pdf):

The idea is that instead of (or in addition to? belt and suspenders)
making the signing constant time, you use the blinding scheme to first
locally blind the private key and point being signed, then sign, then
unblind.  This way even if you are reusing a key every signing
operation is handling different private data... and the only point
where unblinded private data is handled is a simple scalar addition.



From pete at petertodd.org  Wed Mar  5 20:32:22 2014
From: pete at petertodd.org (Peter Todd)
Date: Wed, 5 Mar 2014 15:32:22 -0500
Subject: [Bitcoin-development] New side channel attack that can recover
 Bitcoin keys
In-Reply-To: <CAAS2fgR+q4fDs3JfX9az8b17Dk7VKjC3SxYja-2spwU-kM74fA@mail.gmail.com>
References: <CANEZrP25N7W_MeZin_pyVQP5pC8bt5yqJzTXt_tN1P6kWb5i2w@mail.gmail.com>
	<53174F20.10207@gmail.com> <20140305193910.GA24917@tilt>
	<CAAS2fgR+q4fDs3JfX9az8b17Dk7VKjC3SxYja-2spwU-kM74fA@mail.gmail.com>
Message-ID: <20140305203222.GD24917@tilt>

On Wed, Mar 05, 2014 at 11:51:25AM -0800, Gregory Maxwell wrote:
> On Wed, Mar 5, 2014 at 11:39 AM, Peter Todd <pete at petertodd.org> wrote:
> > If you're following good practices you're not particularly vulneable to
> > it, if at all, even if you make use of shared hosting. First of all you
> > shouldn't be re-using addresses, which means you won't be passing that
> > ~200 sig threshold.
> >
> > More important though is you shouldn't be using single factor Bitcoin
> > addresses. Use n-of-m multisig instead and architect your system such
> 
> Both of these things have long been promoted as virtuous in part
> because they increase robustness against this sort of thing.
> 
> But while I don't disagree with these things the reality is that many
> people do not follow either of these piece of advice and following
> them requires behavioral changes that will not be adopted quickly...
> so I don't think that advice is especially useful.
> 
> And even if it were?, good security involves defense in depth, so
> adding on top of them things like side-channel resistant signing is
> important.
> 
> I haven't had a chance to sit down and think through it completely but
> I believe oleganza's recent blind signature scheme for ECDSA may be
> helpful (http://oleganza.com/blind-ecdsa-draft-v2.pdf):
> 
> The idea is that instead of (or in addition to? belt and suspenders)
> making the signing constant time, you use the blinding scheme to first
> locally blind the private key and point being signed, then sign, then
> unblind.  This way even if you are reusing a key every signing
> operation is handling different private data... and the only point
> where unblinded private data is handled is a simple scalar addition.

That's nice, but I wrote my advice to show people how even if they don't
know any crypto beyond what the "black boxes" do - the absolute minimum
you need to know to write any Bitcoin software - you can still defend
yourself against that attack and many others.

Point is you can architect systems that remain secure even when parts of
them fail, and you don't need any special cryptographic background to do
so - any competent programmer can.

Meanwhile, if you're not willing to take those simple steps, the Bitcoin
community damn well should look down on your amateur efforts, e.g.
Coinbase and EasyWallet.

-- 
'peter'[:-1]@petertodd.org
000000000000000f9102d27cfd61ea9e8bb324593593ca3ce6ba53153ff251b3
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 490 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140305/ab65b44f/attachment.sig>

From gmaxwell at gmail.com  Wed Mar  5 20:54:04 2014
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Wed, 5 Mar 2014 12:54:04 -0800
Subject: [Bitcoin-development] New side channel attack that can recover
 Bitcoin keys
In-Reply-To: <20140305203222.GD24917@tilt>
References: <CANEZrP25N7W_MeZin_pyVQP5pC8bt5yqJzTXt_tN1P6kWb5i2w@mail.gmail.com>
	<53174F20.10207@gmail.com> <20140305193910.GA24917@tilt>
	<CAAS2fgR+q4fDs3JfX9az8b17Dk7VKjC3SxYja-2spwU-kM74fA@mail.gmail.com>
	<20140305203222.GD24917@tilt>
Message-ID: <CAAS2fgRTuOaSbTqnCOp=783gLCeh7ZU0FWbxzMS6pe8WKPTcLQ@mail.gmail.com>

On Wed, Mar 5, 2014 at 12:32 PM, Peter Todd <pete at petertodd.org> wrote:
> That's nice, but I wrote my advice to show people how even if they don't
> know any crypto beyond what the "black boxes" do - the absolute minimum
> you need to know to write any Bitcoin software - you can still defend
> yourself against that attack and many others.

But it's still incomplete.

Say you have an address? used only once!? with a txout with a lot of value.

Someone starts paying you small amounts to that address over and over
again. You haven't asked them to, they're just doing it.

Do you ignore the funds?? maybe tell some customer that was ignorantly
paying you over and over again to a single address "sorry, those are
my rules: I only acknowledge the first payment, those funds are
lost!".

No, of course not.  You spend the darn coins and if you're on a shared
host perhaps you disclose a private key.

The probability of an attack actually going on is low enough compared
to the cost of spending the coins in that case that even someone with
good knoweldge of the risks will choose to do so.

So absolutely, not reusing addresses massively increases your safety
and limits losses when there is theft. But it isn't enough alone. (Nor
is smarter signing, considering complex software like this has bugs
and its hard to be confident that something is side channel free? esp
when you allow attacker interference).



From elombrozo at gmail.com  Wed Mar  5 21:31:01 2014
From: elombrozo at gmail.com (Eric Lombrozo)
Date: Wed, 5 Mar 2014 13:31:01 -0800
Subject: [Bitcoin-development] New side channel attack that can recover
	Bitcoin keys
In-Reply-To: <CANEZrP25N7W_MeZin_pyVQP5pC8bt5yqJzTXt_tN1P6kWb5i2w@mail.gmail.com>
References: <CANEZrP25N7W_MeZin_pyVQP5pC8bt5yqJzTXt_tN1P6kWb5i2w@mail.gmail.com>
Message-ID: <0720C223-E9DD-4E76-AD6F-0308CA5B5289@gmail.com>

If we don't mind sacrificing some performance when signing, there's a fairly simple way to implement a constant-time constant-cache-access-pattern secp256k1.
It is based on the idea of branchless implementations of the field and group operations.

Multiprecision arithmetic can be implemented branch-free by assuming fixed sized limbs and always performing dummy carry operations even when they aren't needed.

The most critical field operation that could potentially leak data is the modular inverse. Again, if we don't mind a slow implementation, a simple constant-time implementation involves exponentiation by the field modulus minus two - which is a known constant.

As for group operations in secp256k1, the main sources of leaks are the branchings that exist in typical implementations as well as optimizations for special inputs,
i.e. http://en.wikibooks.org/wiki/Cryptography/Prime_Curve/Jacobian_Coordinates
To avoid leaking any information, we can use the most general operation, Point Addition, in the following way:

Always carry through the full point addition algorithm even if we get POINT_AT_INFINITY. Also, always carry through the POINT_DOUBLE operation even on unequal inputs. Store the three possible results (POINT_ADDITION, POINT_AT_INFINITY, and POINT_DOUBLE) and then do a branchless conditional swap with the output location as a final step.

Branchless swaps can be performed using bitwise operations such as the examples here: https://github.com/CodeShark/cmp/blob/master/src/constant-time.h

--------------

In the case of bitcoin, signature verification is where performance optimization is really helpful - and here there are no risks of sidechannel leaks, so we can go ahead and use the most optimal implementations. But for signing, the amount of throughput required is generally not that large and constant-time implementations will be more than adequate on typical hardware.

-Eric Lombrozo

On Mar 5, 2014, at 4:49 AM, Mike Hearn <mike at plan99.net> wrote:

> A new practical technique has been published that can recover secp256k1 private keys after observing OpenSSL calculate as little as 200 signatures:
> 
> http://eprint.iacr.org/2014/161.pdf
> 
> This attack is based on the FLUSH+RELOAD technique published last year. It works by observing L3 CPU cache timings and forcing cache line flushes using the clflush opcode. As a result, it is applicable to any x86 environment where an attacker may be able to run on the same hardware i.e. virtualised hosting environments where keys are being reused.
> 
> I am not currently aware of any efforts to make OpenSSL's secp256k1 implementation completely side channel free in all aspects. Also, unfortunately many people have reimplemented ECDSA themselves and even if OpenSSL gets fixed, the custom implementations probably won't. 
> 
> So, IMHO this is a sign for hot wallet users to start walking (but not running) towards the exits of these shared cloud services:  it doesn't feel safe to sign transactions on these platforms, so hot wallets should be managed by dedicated hardware. Of course other parts of the service, like the website, are less sensitive and can still run in the cloud. I doubt the researchers will release their code to do the side channel attack and it's rather complex to reimplement, so this gives some time for mitigation. Unfortunately the huge sums being held in some "bitbank" style hot wallets mean that attackers are well motivated to pull off even quite complex attacks.
> ------------------------------------------------------------------------------
> Subversion Kills Productivity. Get off Subversion & Make the Move to Perforce.
> With Perforce, you get hassle-free workflows. Merge that actually works. 
> Faster operations. Version large binaries.  Built-in WAN optimization and the
> freedom to use Git, Perforce or both. Make the move to Perforce.
> http://pubads.g.doubleclick.net/gampad/clk?id=122218951&iu=/4140/ostg.clktrk_______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140305/cd3b088f/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 801 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140305/cd3b088f/attachment.sig>

From gmaxwell at gmail.com  Wed Mar  5 21:44:30 2014
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Wed, 5 Mar 2014 13:44:30 -0800
Subject: [Bitcoin-development] New side channel attack that can recover
 Bitcoin keys
In-Reply-To: <0720C223-E9DD-4E76-AD6F-0308CA5B5289@gmail.com>
References: <CANEZrP25N7W_MeZin_pyVQP5pC8bt5yqJzTXt_tN1P6kWb5i2w@mail.gmail.com>
	<0720C223-E9DD-4E76-AD6F-0308CA5B5289@gmail.com>
Message-ID: <CAAS2fgTGDzPFDP=ii08VXcXYpWr2akYWxqJCNHW-ABuN=ESc8A@mail.gmail.com>

On Wed, Mar 5, 2014 at 1:31 PM, Eric Lombrozo <elombrozo at gmail.com> wrote:
> If we don't mind sacrificing some performance when signing, there's a fairly
> simple way to implement a constant-time constant-cache-access-pattern
> secp256k1.
> It is based on the idea of branchless implementations of the field and group
> operations.

Do take care that branchless doesn't mean side-channel free: On
non-trivial hardware you must have uniform memory accesses too.

(and that itself isn't enough for sidechannel freeness against an
attacker that can do power analysis... then you star worrying about
the internal structure your primitive adders and the hamming weight of
your numbers, and needing to build hardware that uses differential
logic, and yuck yuck yuck:  This is why you still shouldn't reuse
addresses, and why a blinding approach may still be sensible, even if
you believe your implementation is hardened against side-channels)



From elombrozo at gmail.com  Wed Mar  5 22:14:20 2014
From: elombrozo at gmail.com (Eric Lombrozo)
Date: Wed, 5 Mar 2014 14:14:20 -0800
Subject: [Bitcoin-development] New side channel attack that can recover
	Bitcoin keys
In-Reply-To: <CAAS2fgTGDzPFDP=ii08VXcXYpWr2akYWxqJCNHW-ABuN=ESc8A@mail.gmail.com>
References: <CANEZrP25N7W_MeZin_pyVQP5pC8bt5yqJzTXt_tN1P6kWb5i2w@mail.gmail.com>
	<0720C223-E9DD-4E76-AD6F-0308CA5B5289@gmail.com>
	<CAAS2fgTGDzPFDP=ii08VXcXYpWr2akYWxqJCNHW-ABuN=ESc8A@mail.gmail.com>
Message-ID: <7E50E1D6-3A9F-419B-B01E-50C6DE044E0F@gmail.com>

Everything you say is true.

However, branchless does reduce the attack surface considerably - if nothing else, it significantly ups the difficulty of an attack for a relatively low cost in program complexity, and that might still make it worth doing.

As for uniform memory access, if we avoided any kind of heap allocation, wouldn't we avoid such issues?

Anyhow, without having gone into the full details of this particular attack, it seems the main attack point is differences in how squaring and multiplication (in the case of field exponentiation) or doubling and point addition (in the case of ECDSA) are performed. I believe using a branchless implementation where each phase of the operation executes the exact same code and accesses the exact same stack frames would not be vulnerable to FLUSH+RELOAD.

"To be able to recover the sequence of point additions and doublings, the spy program should distinguish
between consecutive doubling operations and must be able to order them with respect to point additions.
Our spy program achieves this by setting the time slot to less than half the length of the group operations.
With the selected curve, group add operations take 7,928 cycles on average, while group double operation
take 7,601 cycles. Setting the time slot to 3,000 cycles ensures that there is an empty time slot within any
group operation, allowing our spy to correctly distinguish consecutive doubles"

The approach I've suggested makes doubling operations indistinguishable from point additions from the perspective of cache access.

On Mar 5, 2014, at 1:44 PM, Gregory Maxwell <gmaxwell at gmail.com> wrote:

> On Wed, Mar 5, 2014 at 1:31 PM, Eric Lombrozo <elombrozo at gmail.com> wrote:
>> If we don't mind sacrificing some performance when signing, there's a fairly
>> simple way to implement a constant-time constant-cache-access-pattern
>> secp256k1.
>> It is based on the idea of branchless implementations of the field and group
>> operations.
> 
> Do take care that branchless doesn't mean side-channel free: On
> non-trivial hardware you must have uniform memory accesses too.
> 
> (and that itself isn't enough for sidechannel freeness against an
> attacker that can do power analysis... then you star worrying about
> the internal structure your primitive adders and the hamming weight of
> your numbers, and needing to build hardware that uses differential
> logic, and yuck yuck yuck:  This is why you still shouldn't reuse
> addresses, and why a blinding approach may still be sensible, even if
> you believe your implementation is hardened against side-channels)

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 801 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140305/c62ea6e7/attachment.sig>

From kevinsisco61784 at gmail.com  Wed Mar  5 22:17:54 2014
From: kevinsisco61784 at gmail.com (Kevin)
Date: Wed, 05 Mar 2014 17:17:54 -0500
Subject: [Bitcoin-development] Process for getting a patch aproved?
Message-ID: <5317A292.2030102@gmail.com>

Hello.  How would I submit a patch?  Could it be sent through the list 
as an attachment?

-- 
Kevin




From fastest963 at gmail.com  Wed Mar  5 22:17:54 2014
From: fastest963 at gmail.com (James Hartig)
Date: Wed, 5 Mar 2014 17:17:54 -0500
Subject: [Bitcoin-development] New side channel attack that can recover
 Bitcoin keys
In-Reply-To: <20140305193910.GA24917@tilt>
References: <CANEZrP25N7W_MeZin_pyVQP5pC8bt5yqJzTXt_tN1P6kWb5i2w@mail.gmail.com>
	<53174F20.10207@gmail.com> <20140305193910.GA24917@tilt>
Message-ID: <CAM6j61uj9RL0FpOyhQ8U8ucuA=iUJ=ANK7tGAyAeFUZ2fXK5CA@mail.gmail.com>

On Wed, Mar 5, 2014 at 2:39 PM, Peter Todd <pete at petertodd.org> wrote:
> More important though is you shouldn't be using single factor Bitcoin
> addresses. Use n-of-m multisig instead and architect your system such
> that that every transaction that happens in your service has to be
> authorized by both the "online" server(s) that host your website as well
> as a second "hardened" server with an extremely limited interface
> between it and the online server.

This adds a very minor amount of security, if any, if someone manages to
hack into your "hot wallet" server they can just initiate a non-multisig
transaction and still steal all your bitcoins in that wallet. You can't
give the argument that the RPC API is password protected because the
password is stored in plain-text in the config so all someone has to do is
first grep for the file. There doesn't appear to be a way to force ALL
outgoing transactions to be multisig and even if there was one, would you
be able to force one of the addresses to be the "hardened" server? That
still wouldn't prevent anyone from just stopping bitcoind, changing the
config, then restarting it.

Unless you're using your own custom wallet software there doesn't seem to
be any sufficient way to prevent someone from stealing all your money once
they have access to your server. Other software, like MySQL has access
controls so I can prevent ALTERs, DROPs, DELETEs, etc for all "live"
accounts limiting the scope of any attack if they manage to get into the
server. Maybe this is beyond the scope of bitcoind, not sure.

Thanks,
--
James Hartig
Software Engineer @ Grooveshark.com
http://twitter.com/jameshartig
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140305/cb5a68a9/attachment.html>

From gmaxwell at gmail.com  Wed Mar  5 22:25:02 2014
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Wed, 5 Mar 2014 14:25:02 -0800
Subject: [Bitcoin-development] New side channel attack that can recover
 Bitcoin keys
In-Reply-To: <7E50E1D6-3A9F-419B-B01E-50C6DE044E0F@gmail.com>
References: <CANEZrP25N7W_MeZin_pyVQP5pC8bt5yqJzTXt_tN1P6kWb5i2w@mail.gmail.com>
	<0720C223-E9DD-4E76-AD6F-0308CA5B5289@gmail.com>
	<CAAS2fgTGDzPFDP=ii08VXcXYpWr2akYWxqJCNHW-ABuN=ESc8A@mail.gmail.com>
	<7E50E1D6-3A9F-419B-B01E-50C6DE044E0F@gmail.com>
Message-ID: <CAAS2fgScLKgq8_V0oVpvP1gYAKxiyVNGVWA86XfecSmPqsMKUg@mail.gmail.com>

On Wed, Mar 5, 2014 at 2:14 PM, Eric Lombrozo <elombrozo at gmail.com> wrote:
> Everything you say is true.
>
> However, branchless does reduce the attack surface considerably - if nothing else, it significantly ups the difficulty of an attack for a relatively low cost in program complexity, and that might still make it worth doing.

Absolutely. I believe these things are worth doing.

My comment on it being insufficient was only that "my signer is
branchless" doesn't make other defense measures (avoiding reuse,
multsig with multiple devices, not sharing hardware, etc.)
unimportant.

> As for uniform memory access, if we avoided any kind of heap allocation, wouldn't we avoid such issues?

No. At a minimum to hide a memory timing side-channel you must perform
no data dependent loads (e.g. no operation where an offset into memory
is calculated). A strategy for this is to always load the same values,
but then mask out the ones you didn't intend to read... even that I'd
worry about on sufficiently advanced hardware, since I would very much
not be surprised if the processor was able to determine that the load
had no effect and eliminate it! :) )

Maybe in practice if your data dependencies end up only picking around
in the same cache-line it doesn't actually matter... but it's hard to
be sure, and unclear when a future optimization in the rest of the
system might leave it exposed again.

(In particular, you can't generally write timing sign-channel immune
code in C (or other high level language) because the compiler is
freely permitted to optimize things in a way that break the property.
... It may be _unlikely_ for it to do this, but its permitted? and
will actually do so in some cases?, so you cannot be completely sure
unless you check and freeze the toolchain)

> Anyhow, without having gone into the full details of this particular attack, it seems the main attack point is differences in how squaring and multiplication (in the case of field exponentiation) or doubling and point addition (in the case of ECDSA) are performed. I believe using a branchless implementation where each phase of the operation executes the exact same code and accesses the exact same stack frames would not be vulnerable to FLUSH+RELOAD.

I wouldn't be surprised.



From elombrozo at gmail.com  Wed Mar  5 22:26:31 2014
From: elombrozo at gmail.com (Eric Lombrozo)
Date: Wed, 5 Mar 2014 14:26:31 -0800
Subject: [Bitcoin-development] New side channel attack that can recover
	Bitcoin keys
In-Reply-To: <CAM6j61uj9RL0FpOyhQ8U8ucuA=iUJ=ANK7tGAyAeFUZ2fXK5CA@mail.gmail.com>
References: <CANEZrP25N7W_MeZin_pyVQP5pC8bt5yqJzTXt_tN1P6kWb5i2w@mail.gmail.com>
	<53174F20.10207@gmail.com> <20140305193910.GA24917@tilt>
	<CAM6j61uj9RL0FpOyhQ8U8ucuA=iUJ=ANK7tGAyAeFUZ2fXK5CA@mail.gmail.com>
Message-ID: <C334895E-8AA1-47FC-81B2-9BB487351B92@gmail.com>

Oh, I absolutely agree that this type of attack is NOT the weakest link in security. There are MANY far easier targets in bitcoind and typical use scenarios of it. If we want to dramatically improve the security of a typical bitcoin wallet, the FLUSH+RELOAD attack is probably not where our efforts would be best rewarded trying to prevent.

However, this thread IS about this particular attack vector - and my suggestion IS specific to this thread.

-Eric Lombrozo


On Mar 5, 2014, at 2:17 PM, James Hartig <fastest963 at gmail.com> wrote:

> On Wed, Mar 5, 2014 at 2:39 PM, Peter Todd <pete at petertodd.org> wrote:
> > More important though is you shouldn't be using single factor Bitcoin
> > addresses. Use n-of-m multisig instead and architect your system such
> > that that every transaction that happens in your service has to be
> > authorized by both the "online" server(s) that host your website as well
> > as a second "hardened" server with an extremely limited interface
> > between it and the online server.
> 
> This adds a very minor amount of security, if any, if someone manages to hack into your "hot wallet" server they can just initiate a non-multisig transaction and still steal all your bitcoins in that wallet. You can't give the argument that the RPC API is password protected because the password is stored in plain-text in the config so all someone has to do is first grep for the file. There doesn't appear to be a way to force ALL outgoing transactions to be multisig and even if there was one, would you be able to force one of the addresses to be the "hardened" server? That still wouldn't prevent anyone from just stopping bitcoind, changing the config, then restarting it.
> 
> Unless you're using your own custom wallet software there doesn't seem to be any sufficient way to prevent someone from stealing all your money once they have access to your server. Other software, like MySQL has access controls so I can prevent ALTERs, DROPs, DELETEs, etc for all "live" accounts limiting the scope of any attack if they manage to get into the server. Maybe this is beyond the scope of bitcoind, not sure.
> 
> Thanks,
> --
> James Hartig
> Software Engineer @ Grooveshark.com
> http://twitter.com/jameshartig
> ------------------------------------------------------------------------------
> Subversion Kills Productivity. Get off Subversion & Make the Move to Perforce.
> With Perforce, you get hassle-free workflows. Merge that actually works. 
> Faster operations. Version large binaries.  Built-in WAN optimization and the
> freedom to use Git, Perforce or both. Make the move to Perforce.
> http://pubads.g.doubleclick.net/gampad/clk?id=122218951&iu=/4140/ostg.clktrk_______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140305/72a1223e/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 801 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140305/72a1223e/attachment.sig>

From gmaxwell at gmail.com  Wed Mar  5 22:27:13 2014
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Wed, 5 Mar 2014 14:27:13 -0800
Subject: [Bitcoin-development] Process for getting a patch aproved?
In-Reply-To: <5317A292.2030102@gmail.com>
References: <5317A292.2030102@gmail.com>
Message-ID: <CAAS2fgRBb8c-8ghQEJj9Sq+4Ai9LkQ2CU_fZV7dXUHHG+-=dDA@mail.gmail.com>

On Wed, Mar 5, 2014 at 2:17 PM, Kevin <kevinsisco61784 at gmail.com> wrote:
> Hello.  How would I submit a patch?  Could it be sent through the list
> as an attachment?

To the reference software?  Normally you'd open a github account and
submit there.

Though if for some reason you can't? though its strongly preferred?
sending a git-format-patch via email might be an acceptable fallback.



From odinn.cyberguerrilla at riseup.net  Thu Mar  6 07:02:51 2014
From: odinn.cyberguerrilla at riseup.net (Odinn Cyberguerrilla)
Date: Wed, 5 Mar 2014 23:02:51 -0800
Subject: [Bitcoin-development] New side channel attack that can recover
 Bitcoin keys
In-Reply-To: <20140305193910.GA24917@tilt>
References: <CANEZrP25N7W_MeZin_pyVQP5pC8bt5yqJzTXt_tN1P6kWb5i2w@mail.gmail.com>
	<53174F20.10207@gmail.com> <20140305193910.GA24917@tilt>
Message-ID: <2f64c4dbc080d876a68e4b12b31ad612.squirrel@fulvetta.riseup.net>

One wonders also re. bitmessage, though that may not be relevant to this
particular list.

> On Wed, Mar 05, 2014 at 11:21:52AM -0500, Kevin wrote:
>> On 3/5/2014 7:49 AM, Mike Hearn wrote:
>> >A new practical technique has been published that can recover
>> >secp256k1 private keys after observing OpenSSL calculate as little
>> >as 200 signatures:
>>
>> How can we patch this issue?
>
> If you're following good practices you're not particularly vulneable to
> it, if at all, even if you make use of shared hosting. First of all you
> shouldn't be re-using addresses, which means you won't be passing that
> ~200 sig threshold.
>
> More important though is you shouldn't be using single factor Bitcoin
> addresses. Use n-of-m multisig instead and architect your system such
> that that every transaction that happens in your service has to be
> authorized by both the "online" server(s) that host your website as well
> as a second "hardened" server with an extremely limited interface
> between it and the online server. The hardened second factor *should*
> use a separate codebase, ideally even a second language, to authenticate
> actions that withdraw funds or generate new addresses based on data
> given to it by the online server. In the best case your customers are
> PGP-signing requests so you can verify their intent independently and
> cryptographically on both servers. Mircea Popescu's MPEx exchange is an
> example of this model, although I don't think they're doing any multisig
> stuff. Failing that you can at least use the second server to do things
> like limit losses by flagging higher-than-expected withdrawl volumes and
> unusual events.
>
> Since this second-factor server only deals with business logic - not the
> website - you can certainly find a secure hosting arrangement for it
> with physical control. I recommend you stick the machine in your
> apartment and use tor + hidden services to connect to it from your VM
> instances.
>
> Note too that even if all you're doing is accepting Bitcoins from
> customers, perhaps in exchange for goods, all of the above *still*
> applies modulo the fact that the payment protocol is very incomplete.
>
>
> With P2SH (finally!) supported in all the major Bitcoin wallets there
> simply is no excuse not to have such an architecture other than lazyness
> and transaction fees; if you fall into the latter category you're
> business may very well be wiped out anyway by increased fees.
>
> --
> 'peter'[:-1]@petertodd.org
> 000000000000000f9102d27cfd61ea9e8bb324593593ca3ce6ba53153ff251b3
> ------------------------------------------------------------------------------
> Subversion Kills Productivity. Get off Subversion & Make the Move to
> Perforce.
> With Perforce, you get hassle-free workflows. Merge that actually works.
> Faster operations. Version large binaries.  Built-in WAN optimization and
> the
> freedom to use Git, Perforce or both. Make the move to Perforce.
> http://pubads.g.doubleclick.net/gampad/clk?id=122218951&iu=/4140/ostg.clktrk_______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>





From laanwj at gmail.com  Thu Mar  6 07:56:30 2014
From: laanwj at gmail.com (Wladimir)
Date: Thu, 6 Mar 2014 08:56:30 +0100
Subject: [Bitcoin-development] Process for getting a patch aproved?
In-Reply-To: <5317A292.2030102@gmail.com>
References: <5317A292.2030102@gmail.com>
Message-ID: <CA+s+GJA7V1hGRxYr0f7a8hPEnY-+AqeTPZVQ6WzOLCo-n6ayLg@mail.gmail.com>

On Wed, Mar 5, 2014 at 11:17 PM, Kevin <kevinsisco61784 at gmail.com> wrote:

> Hello.  How would I submit a patch?  Could it be sent through the list
> as an attachment?
>

You can, but as reviewing can take a while, the github model works better
for this project.

In my experience people lose track of patches sent to mailing lists, at
least when posted to github there will be a nagging 'issue' appearing until
it is either merged or closed otherwise.

If it concerns a proposed protocol change do discuss it on the mailing
list, as people building other implementations read here and not on github.

Wladimir
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140306/0265788c/attachment.html>

From mike at plan99.net  Thu Mar  6 08:38:40 2014
From: mike at plan99.net (Mike Hearn)
Date: Thu, 6 Mar 2014 09:38:40 +0100
Subject: [Bitcoin-development] New side channel attack that can recover
 Bitcoin keys
In-Reply-To: <CAAS2fgScLKgq8_V0oVpvP1gYAKxiyVNGVWA86XfecSmPqsMKUg@mail.gmail.com>
References: <CANEZrP25N7W_MeZin_pyVQP5pC8bt5yqJzTXt_tN1P6kWb5i2w@mail.gmail.com>
	<0720C223-E9DD-4E76-AD6F-0308CA5B5289@gmail.com>
	<CAAS2fgTGDzPFDP=ii08VXcXYpWr2akYWxqJCNHW-ABuN=ESc8A@mail.gmail.com>
	<7E50E1D6-3A9F-419B-B01E-50C6DE044E0F@gmail.com>
	<CAAS2fgScLKgq8_V0oVpvP1gYAKxiyVNGVWA86XfecSmPqsMKUg@mail.gmail.com>
Message-ID: <CANEZrP1+=JY0RGEMvm9iL09L-tZAWqsSOOwFaroYUKkWumx+xg@mail.gmail.com>

I'm wondering about whether (don't laugh) moving signing into the kernel
and then using the MTRRs to disable caching entirely for a small scratch
region of memory would also work. You could then disable pre-emption and
prevent anything on the same core from interrupting or timing the signing
operation.

However I suspect just making a hardened secp256k1 signer implementation in
userspace would be of similar difficulty, in which case it  would naturally
be preferable.


On Wed, Mar 5, 2014 at 11:25 PM, Gregory Maxwell <gmaxwell at gmail.com> wrote:

> On Wed, Mar 5, 2014 at 2:14 PM, Eric Lombrozo <elombrozo at gmail.com> wrote:
> > Everything you say is true.
> >
> > However, branchless does reduce the attack surface considerably - if
> nothing else, it significantly ups the difficulty of an attack for a
> relatively low cost in program complexity, and that might still make it
> worth doing.
>
> Absolutely. I believe these things are worth doing.
>
> My comment on it being insufficient was only that "my signer is
> branchless" doesn't make other defense measures (avoiding reuse,
> multsig with multiple devices, not sharing hardware, etc.)
> unimportant.
>
> > As for uniform memory access, if we avoided any kind of heap allocation,
> wouldn't we avoid such issues?
>
> No. At a minimum to hide a memory timing side-channel you must perform
> no data dependent loads (e.g. no operation where an offset into memory
> is calculated). A strategy for this is to always load the same values,
> but then mask out the ones you didn't intend to read... even that I'd
> worry about on sufficiently advanced hardware, since I would very much
> not be surprised if the processor was able to determine that the load
> had no effect and eliminate it! :) )
>
> Maybe in practice if your data dependencies end up only picking around
> in the same cache-line it doesn't actually matter... but it's hard to
> be sure, and unclear when a future optimization in the rest of the
> system might leave it exposed again.
>
> (In particular, you can't generally write timing sign-channel immune
> code in C (or other high level language) because the compiler is
> freely permitted to optimize things in a way that break the property.
> ... It may be _unlikely_ for it to do this, but its permitted? and
> will actually do so in some cases?, so you cannot be completely sure
> unless you check and freeze the toolchain)
>
> > Anyhow, without having gone into the full details of this particular
> attack, it seems the main attack point is differences in how squaring and
> multiplication (in the case of field exponentiation) or doubling and point
> addition (in the case of ECDSA) are performed. I believe using a branchless
> implementation where each phase of the operation executes the exact same
> code and accesses the exact same stack frames would not be vulnerable to
> FLUSH+RELOAD.
>
> I wouldn't be surprised.
>
>
> ------------------------------------------------------------------------------
> Subversion Kills Productivity. Get off Subversion & Make the Move to
> Perforce.
> With Perforce, you get hassle-free workflows. Merge that actually works.
> Faster operations. Version large binaries.  Built-in WAN optimization and
> the
> freedom to use Git, Perforce or both. Make the move to Perforce.
>
> http://pubads.g.doubleclick.net/gampad/clk?id=122218951&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140306/6d66fa81/attachment.html>

From mike at plan99.net  Thu Mar  6 09:45:31 2014
From: mike at plan99.net (Mike Hearn)
Date: Thu, 6 Mar 2014 10:45:31 +0100
Subject: [Bitcoin-development] Instant / contactless payments
Message-ID: <CANEZrP3w9c_UX3dd+7LdWNXCEwjnAG+bYWxqKYo_fzakWQu=Bg@mail.gmail.com>

I just did my first contactless nfc payment with a MasterCard. It worked
very well and was quite delightful - definitely want to be doing more of
these in future. I think people will come to expect this kind of
no-friction payment experience and Bitcoin will need to match it, so here
are some notes on what's involved.

There are two aspects that can be implemented independently of each other:

1) The physical/NFC layer.
2) The risk analysis layer.

A contactless payment needs two things to work: one is a VERY fast, low
latency communication between payment device (phone in our case) and
terminal. I couldn't find actual latency specs yet but it felt like using
an Oyster card, which aims for <400msec.

The other is that obviously the payment device has to decide to sign the
transaction without any user interaction, i.e. the payment is at low risk
of being unintentional. If you nail this it can be used for one-click web
payments too.

Andreas already did some work on embedding full blown payment requests into
an NFC tag, but I think we need to switch this to being a packet based
protocol (via ISO-DEP), otherwise you can't submit the Payment/tx messages
back via NFC as well. This isn't a very complicated task and would make a
fun project for a newbie who has Android and knows some Java. The resulting
ISO-DEP protocol can be turned into a BIP without too much trouble.

The risk analysis is the more complicated part. The real value
Visa/MasterCard provide with NFC payments is not so much the tech (the
clever part is the batteryless nature of the cards rather than the
crypto/comms), but the fact that merchants are all verified and can be
fined or evicted if they abuse the system and try to steal money. Bitcoin
doesn't have anything like that.

I think we have a few options to make it safe:

1) Require some very lightweight user confirmation, like pressing the power
button to reach the lock screen and only allowing small payments. The
combination of physical proximity and pressing the power button is probably
good enough for now to avoid problems. Someone should try it out and see
how it feels.

2) Have some kind of semi-centralised merchant verification/approval
programs, like what the card networks do. The easiest way to start would be
to piggyback on the work BitPay/Coinbase do and just auto-sign if payment
amount is <X mBTC and the payment is via one of these processors. But this
is hardly in the spirit of Bitcoin and is generally unsatisfying.

3) Have some kind of decentralised reputation network. I spent some time
thinking about this, but it rapidly became very complicated and feels like
an entirely separate project that should stand alone from Bitcoin itself.
Perhaps rather than try to make a global system, social data could be
exchanged (using some fancy privacy preserving protocols?) so if your
friends have decided to trust seller X, your phone automatically trusts
them too.

4) Have the touch trigger a delayed payment and the phone tries to attract
attention to itself so the user can cancel. This way if someone tries to
swipe money out of your pocket by getting up close on a subway or
something, you have a chance to cancel. But it's quite hard for a small
device to reliably attract attention quickly and it opens up the merchant
to fraud where the user pays, leaves and then cancels the payment.
Especially it'd be useless for things like mass transit. So I think such a
system would have to be opt-in by the seller.

5) A combination of all the above.

To get the very fast light feel the actual contact period has to be quite
short, so I bet we'd need to optimise the bootup process of the Android
wallet app. Right now it does slow things like deserialising giant protocol
buffers and is just generally not optimised for startup time. Loading the
wallet, reading the payment request over NFC, checking the cert signatures,
making the trust decision, calculating a transaction, signing it, sending
it back to the recipient all in under 400 msec would be a tough (but fun)
programming challenge. Some of the steps can be parallelised and modern
phones are mostly multicore.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140306/0d93269c/attachment.html>

From natanael.l at gmail.com  Thu Mar  6 10:00:14 2014
From: natanael.l at gmail.com (Natanael)
Date: Thu, 6 Mar 2014 11:00:14 +0100
Subject: [Bitcoin-development] New side channel attack that can recover
 Bitcoin keys
In-Reply-To: <CANEZrP1+=JY0RGEMvm9iL09L-tZAWqsSOOwFaroYUKkWumx+xg@mail.gmail.com>
References: <CANEZrP25N7W_MeZin_pyVQP5pC8bt5yqJzTXt_tN1P6kWb5i2w@mail.gmail.com>
	<0720C223-E9DD-4E76-AD6F-0308CA5B5289@gmail.com>
	<CAAS2fgTGDzPFDP=ii08VXcXYpWr2akYWxqJCNHW-ABuN=ESc8A@mail.gmail.com>
	<7E50E1D6-3A9F-419B-B01E-50C6DE044E0F@gmail.com>
	<CAAS2fgScLKgq8_V0oVpvP1gYAKxiyVNGVWA86XfecSmPqsMKUg@mail.gmail.com>
	<CANEZrP1+=JY0RGEMvm9iL09L-tZAWqsSOOwFaroYUKkWumx+xg@mail.gmail.com>
Message-ID: <CAAt2M19R_97aXs9rwo8UY5PE7DwHZDT12esPhz76M1EOdGrrdQ@mail.gmail.com>

You've heard of TRESOR?

No, not Trezor.

https://en.wikipedia.org/wiki/TRESOR

Signing on the CPU, without touching RAM.

- Sent from my phone
Den 6 mar 2014 09:41 skrev "Mike Hearn" <mike at plan99.net>:

> I'm wondering about whether (don't laugh) moving signing into the kernel
> and then using the MTRRs to disable caching entirely for a small scratch
> region of memory would also work. You could then disable pre-emption and
> prevent anything on the same core from interrupting or timing the signing
> operation.
>
> However I suspect just making a hardened secp256k1 signer implementation
> in userspace would be of similar difficulty, in which case it  would
> naturally be preferable.
>
>
> On Wed, Mar 5, 2014 at 11:25 PM, Gregory Maxwell <gmaxwell at gmail.com>wrote:
>
>> On Wed, Mar 5, 2014 at 2:14 PM, Eric Lombrozo <elombrozo at gmail.com>
>> wrote:
>> > Everything you say is true.
>> >
>> > However, branchless does reduce the attack surface considerably - if
>> nothing else, it significantly ups the difficulty of an attack for a
>> relatively low cost in program complexity, and that might still make it
>> worth doing.
>>
>> Absolutely. I believe these things are worth doing.
>>
>> My comment on it being insufficient was only that "my signer is
>> branchless" doesn't make other defense measures (avoiding reuse,
>> multsig with multiple devices, not sharing hardware, etc.)
>> unimportant.
>>
>> > As for uniform memory access, if we avoided any kind of heap
>> allocation, wouldn't we avoid such issues?
>>
>> No. At a minimum to hide a memory timing side-channel you must perform
>> no data dependent loads (e.g. no operation where an offset into memory
>> is calculated). A strategy for this is to always load the same values,
>> but then mask out the ones you didn't intend to read... even that I'd
>> worry about on sufficiently advanced hardware, since I would very much
>> not be surprised if the processor was able to determine that the load
>> had no effect and eliminate it! :) )
>>
>> Maybe in practice if your data dependencies end up only picking around
>> in the same cache-line it doesn't actually matter... but it's hard to
>> be sure, and unclear when a future optimization in the rest of the
>> system might leave it exposed again.
>>
>> (In particular, you can't generally write timing sign-channel immune
>> code in C (or other high level language) because the compiler is
>> freely permitted to optimize things in a way that break the property.
>> ... It may be _unlikely_ for it to do this, but its permitted? and
>> will actually do so in some cases?, so you cannot be completely sure
>> unless you check and freeze the toolchain)
>>
>> > Anyhow, without having gone into the full details of this particular
>> attack, it seems the main attack point is differences in how squaring and
>> multiplication (in the case of field exponentiation) or doubling and point
>> addition (in the case of ECDSA) are performed. I believe using a branchless
>> implementation where each phase of the operation executes the exact same
>> code and accesses the exact same stack frames would not be vulnerable to
>> FLUSH+RELOAD.
>>
>> I wouldn't be surprised.
>>
>>
>> ------------------------------------------------------------------------------
>> Subversion Kills Productivity. Get off Subversion & Make the Move to
>> Perforce.
>> With Perforce, you get hassle-free workflows. Merge that actually works.
>> Faster operations. Version large binaries.  Built-in WAN optimization and
>> the
>> freedom to use Git, Perforce or both. Make the move to Perforce.
>>
>> http://pubads.g.doubleclick.net/gampad/clk?id=122218951&iu=/4140/ostg.clktrk
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>
>
>
>
> ------------------------------------------------------------------------------
> Subversion Kills Productivity. Get off Subversion & Make the Move to
> Perforce.
> With Perforce, you get hassle-free workflows. Merge that actually works.
> Faster operations. Version large binaries.  Built-in WAN optimization and
> the
> freedom to use Git, Perforce or both. Make the move to Perforce.
>
> http://pubads.g.doubleclick.net/gampad/clk?id=122218951&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140306/0e7136db/attachment.html>

From andreas at schildbach.de  Thu Mar  6 11:26:20 2014
From: andreas at schildbach.de (Andreas Schildbach)
Date: Thu, 06 Mar 2014 12:26:20 +0100
Subject: [Bitcoin-development] Instant / contactless payments
In-Reply-To: <CANEZrP3w9c_UX3dd+7LdWNXCEwjnAG+bYWxqKYo_fzakWQu=Bg@mail.gmail.com>
References: <CANEZrP3w9c_UX3dd+7LdWNXCEwjnAG+bYWxqKYo_fzakWQu=Bg@mail.gmail.com>
Message-ID: <lf9m0e$q7t$1@ger.gmane.org>

I'm not sure if iso-dep is the way to go here. Afaik as soon as you pick
up the phone the connection breaks. It's ok if some people decide to let
the app do risk analysis, but you cannot force it onto users by picking
a protocol that cannot deal with manual verification. Users should
always have the choice to verify their payment without time pressure and
by holding the device of their choice at their individual viewing distance.

Besides, how do you plan to risk-analyse the memo field?

In current phone implementations, the screen must be on already for NFC
to be active. Also it must be unlocked, although I certainly hope future
OSes will allow payment apps on the lock screen, just like they allow
music players.

> To get the very fast light feel the actual contact period has to be
> quite short, so I bet we'd need to optimise the bootup process of the
> Android wallet app.

It's already very short if you can do without Android Beam, e.g. on
Android 2.3. I'd say <200 ms for an BIP21 payment request. Bootup of the
app and everything else happens after -- no need to continue contact.
Indeed most of the bootup time goes into loading complex wallets. Our
long standing plans to clean up the wallet and archieve transactions
should help. Also, if Bitcoin catches on the app will just stay in memory.

The most obvious optimization to speed up signature checking is to make
it lazy. The user can already inspect the payment while signatures are
being checked. Even transaction signing could already happen in advance,
if it can be made sure that no signed transaction "escapes" the dialog
without the users consent.

Even the current ~10 second roundtrip is a huge improvement to the
status quo. I recently tried to buy a subway ticket and it took me 7
full minutes (just for the payment process)!





From carterd at gmail.com  Thu Mar  6 12:23:40 2014
From: carterd at gmail.com (Dan Carter)
Date: Thu, 06 Mar 2014 04:23:40 -0800
Subject: [Bitcoin-development] Stealth Addresses
In-Reply-To: <20140106120338.GA14918@savin>
References: <20140106120338.GA14918@savin>
Message-ID: <531868CC.807@gmail.com>

I think stealth addresses combined with zk-snarks would obviate the need 
for CoinJoin.  zk-snarks could be used to hide the coin's value and 
stealth addresses could be used to hide the recipient for payments and 
even mined coins.  More info on zero-knowledge snarks:

http://cs.tau.ac.il/~tromer/papers/vnsnark-20131230.pdf
http://cs.tau.ac.il/~tromer/papers/csnark-20131007.pdf

Start with a mined coin: generate a coin secret, create a coinbase 
transaction with an output to your stealth address and send 
hash(coin-secret + reward-value) + encrypt(coin-secret + reward-value) 
where only the recipient (you) can decrypt. (The reward value is known 
publicly but just assume it isn't here for generality). You also embed 
the 0.2KB zk-snark proof + 3KB verifying key that the hash result is in 
fact SHA256(coin-secret + reward-value), where your private witnesses 
are (coin-secret, reward-value).

Now you could split a coin into as many pieces as you want in a single 
transaction and send to multiple recipients, some pieces go to yourself 
(change) and others to the payee, every piece would have a different 
recipient address thanks to stealth addresses, and all values hidden 
thanks to zk-snarks.

So lets say you want to split the mined coin into two new ones.  You 
create a transaction where the input redeems the mined coin using mined 
tx out + your stealth address, and there are two new coins as outputs to 
your own stealth address each having: hash(new-coin-secret + 
new-hidden-value) + encrypt(new-coin-secret + new-hidden-value).  You 
also embed the zk-snark proof that the two new hidden values add up to 
the original hidden value, and that the two new hash results are in fact 
SHA256(new-coin-secret + new-hidden-value), where your private witnesses 
are (original-coin-secret, original-hidden-value, new-coin-secrets, 
new-hidden-values).

If you want to merge two coins into one it's just a split backwards, two 
inputs one output, zk-snark proof that two original hidden values add up 
to the new hidden value and that the new hash result is 
SHA256(new-coin-secret + new-hidden-value).

If you want to transfer ownership of a coin then just redeem at input, 
and output same as mined coin except using recipient stealth address 
(which is a public key) to encrypt(coin-secret + hidden-value).

- Dan



On 2014-01-06 4:03 AM, Peter Todd wrote:
> * Abstract
>
> A Stealth Address is a new type of Bitcoin address and related
> scriptPubKey/transaction generation scheme that allowers payees to
> publish a single, fixed, address that payors can send funds efficiently,
> privately, reliably and non-interactively. Payors do not learn what
> other payments have been made to the stealth address, and third-parties
> learn nothing at all. (both subject to an adjustable anonymity set)




From mike at plan99.net  Thu Mar  6 13:44:26 2014
From: mike at plan99.net (Mike Hearn)
Date: Thu, 6 Mar 2014 14:44:26 +0100
Subject: [Bitcoin-development] Instant / contactless payments
In-Reply-To: <lf9m0e$q7t$1@ger.gmane.org>
References: <CANEZrP3w9c_UX3dd+7LdWNXCEwjnAG+bYWxqKYo_fzakWQu=Bg@mail.gmail.com>
	<lf9m0e$q7t$1@ger.gmane.org>
Message-ID: <CANEZrP2GbnsqQANGKMW_5FAugppGJEksaB=Tf8Xu1nRLy3z9yg@mail.gmail.com>

On Thu, Mar 6, 2014 at 12:26 PM, Andreas Schildbach
<andreas at schildbach.de>wrote:

> I'm not sure if iso-dep is the way to go here. Afaik as soon as you pick
> up the phone the connection breaks.


If the phone isn't willing to immediately authorise then it'd have to fall
back to HTTPS or Bluetooth as normal.


> Besides, how do you plan to risk-analyse the memo field?
>

I guess only the amount and destination are relevant for risk analysis.


> It's already very short if you can do without Android Beam, e.g. on
> Android 2.3.


I think IsoDep based protocols must bypass Beam - when I scan my e-passport
there's no beam animation.


> The most obvious optimization to speed up signature checking is to make
> it lazy. The user can already inspect the payment while signatures are
> being checked.


Well, for <400msec there can't be any user interaction. But checking
signatures on the payment request and constructing and signing the inputs
can all be done in parallel - you should be able to max out every core, at
least for a brief moment.


> Even the current ~10 second roundtrip is a huge improvement to the
> status quo. I recently tried to buy a subway ticket and it took me 7
> full minutes (just for the payment process)!


Then that subway kind of sucks ;) Have you been to London and used Oyster?
I think the capital wouldn't work at all without the low latency Oyster
cards. The tube would have stopped scaling some time ago.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140306/f3881a64/attachment.html>

From boydb at midnightdesign.ws  Thu Mar  6 14:20:17 2014
From: boydb at midnightdesign.ws (Brooks Boyd)
Date: Thu, 6 Mar 2014 08:20:17 -0600
Subject: [Bitcoin-development] Instant / contactless payments
In-Reply-To: <CANEZrP3w9c_UX3dd+7LdWNXCEwjnAG+bYWxqKYo_fzakWQu=Bg@mail.gmail.com>
References: <CANEZrP3w9c_UX3dd+7LdWNXCEwjnAG+bYWxqKYo_fzakWQu=Bg@mail.gmail.com>
Message-ID: <CANg-TZBv0zT6PywWJwug0DtzhQkXeE+9nMY14xKAfCysGfgkFg@mail.gmail.com>

On Mar 6, 2014 3:47 AM, "Mike Hearn" <mike at plan99.net> wrote:
>
> I just did my first contactless nfc payment with a MasterCard. It worked
very well and was quite delightful - definitely want to be doing more of
these in future. I think people will come to expect this kind of
no-friction payment experience and Bitcoin will need to match it, so here
are some notes on what's involved.
>
> 3) Have some kind of decentralised reputation network. I spent some time
thinking about this, but it rapidly became very complicated and feels like
an entirely separate project that should stand alone from Bitcoin itself.
Perhaps rather than try to make a global system, social data could be
exchanged (using some fancy privacy preserving protocols?) so if your
friends have decided to trust seller X, your phone automatically trusts
them too.

A reputation network might be an interesting idea, or several different
networks with different curators (to prevent complete centralization), like
how the US credit score system has three main companies who track your
score. Something like a GPG ring of trust, with addresses signing other
addresses would work well, if some sort of Stealth address or HD wallet
root was the identity gaining the reputation, then address re-use wouldn't
have to be mandatory.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140306/566df540/attachment.html>

From alexykot at gmail.com  Thu Mar  6 14:39:52 2014
From: alexykot at gmail.com (Alex Kotenko)
Date: Thu, 6 Mar 2014 14:39:52 +0000
Subject: [Bitcoin-development] Instant / contactless payments
In-Reply-To: <CANEZrP3w9c_UX3dd+7LdWNXCEwjnAG+bYWxqKYo_fzakWQu=Bg@mail.gmail.com>
References: <CANEZrP3w9c_UX3dd+7LdWNXCEwjnAG+bYWxqKYo_fzakWQu=Bg@mail.gmail.com>
Message-ID: <CALDj+BZE1KtMGpMH3UHtxjN2vXxu39o_hAWPdg==KLsWpe1zqA@mail.gmail.com>

Hi Mike


Not sure if you've seen it, but here is how we do NFC right now
http://www.youtube.com/watch?v=DGOMIG9JUY8 with XBTerminal.
For now this is just an NDEF URI message with Bitcoin URI inside, and then
transaction itself propagated to the network by the phone using it's own
Internet connection. Far not ideal, but even this is supported only by
Andreas' Wallet, so we cannot move ahead alot really until other wallets
will have some support in this area.
As you see - it's taking just few seconds, most of which is manual payment
confirmation. Btw, ignore my first screen tap, where I'm selecting wallets
- it's an unlikely thing to happen IRL to have several wallets installed at
the same time.

?Also, I think many people may not know about Oyster cards, so this might
need little bit of explanation. And btw, have you been to London lately?
Oyster readers now accept contactless cards directly along with Oyster
cards itself. I wonder if eventually in future we could add bitcoin support
into that system directly, without hardware replacements.

I cannot put much into the actual protocol discussion, but I'm happy to
provide feedback on the side of actual POS implementation needed and
testbase if required.

Have an ?idea - it's a good thing to cap confirmationless payments, but the
actual cap value definition can be tricky considering Bitcoin volatility.
Inless you want to tie it to some external price definition thirdparty
service it could be tied to transaction fees. I mean - if with Bitcoin v0.9
transaction fees will become really floating, and it should eventually
reach equilibrium that will reflect some real world value. Probably a tiny
value, but probably also rather stable value. So confirmationless payment
cap may be defined as <current_average_transaction_fee>x10000.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140306/38cc0863/attachment.html>

From andreas at schildbach.de  Thu Mar  6 14:51:09 2014
From: andreas at schildbach.de (Andreas Schildbach)
Date: Thu, 06 Mar 2014 15:51:09 +0100
Subject: [Bitcoin-development] Instant / contactless payments
In-Reply-To: <CANEZrP2GbnsqQANGKMW_5FAugppGJEksaB=Tf8Xu1nRLy3z9yg@mail.gmail.com>
References: <CANEZrP3w9c_UX3dd+7LdWNXCEwjnAG+bYWxqKYo_fzakWQu=Bg@mail.gmail.com>	<lf9m0e$q7t$1@ger.gmane.org>
	<CANEZrP2GbnsqQANGKMW_5FAugppGJEksaB=Tf8Xu1nRLy3z9yg@mail.gmail.com>
Message-ID: <lfa20f$i2k$1@ger.gmane.org>

On 03/06/2014 02:44 PM, Mike Hearn wrote:

>     I'm not sure if iso-dep is the way to go here. Afaik as soon as you pick
>     up the phone the connection breaks.
> 
> If the phone isn't willing to immediately authorise then it'd have to
> fall back to HTTPS or Bluetooth as normal.

Ok, that would be an option.

>     Besides, how do you plan to risk-analyse the memo field?
> 
> I guess only the amount and destination are relevant for risk analysis.

The memo field (and its logical evolution, an invoice) also needs to be
verified, since its part of the contract. Imagine sitting in a
restaurant and you're being presented the bill, most people will do a
quick scan of the meals and drinks consumed (and non-malignant errors
are frequent in that business).

>     It's already very short if you can do without Android Beam, e.g. on
>     Android 2.3.
> 
> I think IsoDep based protocols must bypass Beam - when I scan my
> e-passport there's no beam animation.

Everything except Beam bypasses Beam (-:  Beam is an Android-specific
protocol. I assume it would also be possible to write an own NDEF
implementation on top of the low level NFC APIs. I want to try as soon
as I have a second NFC-capable phone, preferably Android 4.4.

>     Even the current ~10 second roundtrip is a huge improvement to the
>     status quo. I recently tried to buy a subway ticket and it took me 7
>     full minutes (just for the payment process)!
> 
> Then that subway kind of sucks ;)

You can't really blame the subway for a broken payment process.

> Have you been to London and used Oyster?

Yes, it was a complete disaster. Obtaining a ticket took even longer --
ca. 45 minutes. Boarding the train took some additional seconds,
compared to no overhead in Germany where we simply don't have any gates.

On top of that, you walk more (in tunnels) than you get driven around,
get tracked on each movement and if you want to get your (monetary)
change, you need to wait for another 45 minutes.

The upside is, when going by public transport in England I always feel
like Mr. Freeman in City 17  (-:





From andreas at schildbach.de  Thu Mar  6 16:46:53 2014
From: andreas at schildbach.de (Andreas Schildbach)
Date: Thu, 06 Mar 2014 17:46:53 +0100
Subject: [Bitcoin-development] Instant / contactless payments
In-Reply-To: <CALDj+BZE1KtMGpMH3UHtxjN2vXxu39o_hAWPdg==KLsWpe1zqA@mail.gmail.com>
References: <CANEZrP3w9c_UX3dd+7LdWNXCEwjnAG+bYWxqKYo_fzakWQu=Bg@mail.gmail.com>
	<CALDj+BZE1KtMGpMH3UHtxjN2vXxu39o_hAWPdg==KLsWpe1zqA@mail.gmail.com>
Message-ID: <lfa8pf$ckc$1@ger.gmane.org>

> Not sure if you've seen it, but here is how we do NFC right
> now http://www.youtube.com/watch?v=DGOMIG9JUY8 with XBTerminal. 

Thanks for the video! It's always good to see these things in action so
you can start believing in it.

> For now this is just an NDEF URI message with Bitcoin URI inside, and
> then transaction itself propagated to the network by the phone using
> it's own Internet connection. Far not ideal, but even this is supported
> only by Andreas' Wallet, so we cannot move ahead alot really until other
> wallets will have some support in this area.

Supporting Bluetooth is optional in the sense that if a wallet should
not support it, you will still receive the transaction via the P2P
network. So I'd say definately go for Bluetooth.

> As you see - it's taking just few seconds, most of which is manual
> payment confirmation.

I wonder about the receipt step -- are you generating a PDF on device
and sending it via NFC? This is something that could be supported by the
BIP70 payment protocol. We should try to avoid the second tap, its not
intuitive.

> And btw, have you been to London
> lately? Oyster readers now accept contactless cards directly along with
> Oyster cards itself.

Contactless cards? Last I was to London, the Oyster card was already
contactless. Have there ever been magnet-strip-based Oyster cards?

> I wonder if eventually in future we could add
> bitcoin support into that system directly, without hardware replacements.

Neat thought (-:





From mike at plan99.net  Thu Mar  6 16:52:20 2014
From: mike at plan99.net (Mike Hearn)
Date: Thu, 6 Mar 2014 17:52:20 +0100
Subject: [Bitcoin-development] Instant / contactless payments
In-Reply-To: <lfa8pf$ckc$1@ger.gmane.org>
References: <CANEZrP3w9c_UX3dd+7LdWNXCEwjnAG+bYWxqKYo_fzakWQu=Bg@mail.gmail.com>
	<CALDj+BZE1KtMGpMH3UHtxjN2vXxu39o_hAWPdg==KLsWpe1zqA@mail.gmail.com>
	<lfa8pf$ckc$1@ger.gmane.org>
Message-ID: <CANEZrP0HXEOMg3Q_eaTz05T82JwH39sGq3Gu2gkc7A+PPUh=4w@mail.gmail.com>

>
> I wonder about the receipt step -- are you generating a PDF on device
> and sending it via NFC? This is something that could be supported by the
> BIP70 payment protocol. We should try to avoid the second tap, its not
> intuitive.
>

Together, the signed PaymentRequest and the transactions in the block chain
should act like a receipt: it's proof you requested payment in a certain
way, and I satisfied that payment. So it's proof of payment and the memo
field can describe what I bought.


> Contactless cards? Last I was to London, the Oyster card was already
> contactless. Have there ever been magnet-strip-based Oyster cards?
>

He means, contactless credit cards can be used too. No need to enroll for
Oyster specifically. I guess in the long run Oyster and its equivalents in
other cities (octopus etc) will be phased out.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140306/e870034c/attachment.html>

From andreas at schildbach.de  Thu Mar  6 16:55:53 2014
From: andreas at schildbach.de (Andreas Schildbach)
Date: Thu, 06 Mar 2014 17:55:53 +0100
Subject: [Bitcoin-development] Instant / contactless payments, IsoDep
In-Reply-To: <lfa20f$i2k$1@ger.gmane.org>
References: <CANEZrP3w9c_UX3dd+7LdWNXCEwjnAG+bYWxqKYo_fzakWQu=Bg@mail.gmail.com>	<lf9m0e$q7t$1@ger.gmane.org>	<CANEZrP2GbnsqQANGKMW_5FAugppGJEksaB=Tf8Xu1nRLy3z9yg@mail.gmail.com>
	<lfa20f$i2k$1@ger.gmane.org>
Message-ID: <lfa9ab$k1c$1@ger.gmane.org>

On 03/06/2014 03:51 PM, Andreas Schildbach wrote:

>>     I'm not sure if iso-dep is the way to go here. Afaik as soon as you pick
>>     up the phone the connection breaks.
>>
>> If the phone isn't willing to immediately authorise then it'd have to
>> fall back to HTTPS or Bluetooth as normal.
> 
> Ok, that would be an option.

One of the first things to explore is if its possible to dispatch
different isodep applications to different apps. I know you can add an
intent filter matching action=android.nfc.action.TECH_DISCOVERED and a
custom "tech filter" android.nfc.tech.IsoDep. However, as long as there
is no mime type or similar concept, apps will always fight for access to
IsoDep endpoints. We will want to avoid that situation.






From mike at plan99.net  Thu Mar  6 17:00:05 2014
From: mike at plan99.net (Mike Hearn)
Date: Thu, 6 Mar 2014 18:00:05 +0100
Subject: [Bitcoin-development] Instant / contactless payments, IsoDep
In-Reply-To: <lfa9ab$k1c$1@ger.gmane.org>
References: <CANEZrP3w9c_UX3dd+7LdWNXCEwjnAG+bYWxqKYo_fzakWQu=Bg@mail.gmail.com>
	<lf9m0e$q7t$1@ger.gmane.org>
	<CANEZrP2GbnsqQANGKMW_5FAugppGJEksaB=Tf8Xu1nRLy3z9yg@mail.gmail.com>
	<lfa20f$i2k$1@ger.gmane.org> <lfa9ab$k1c$1@ger.gmane.org>
Message-ID: <CANEZrP2dsaOG9SpSr3SF48ErpRhFzxCACqA-t0wt6r1QaiZSvw@mail.gmail.com>

I think maybe the way you do it is to have a NDEF tag that triggers the
app, and then that starts an IsoDep protocol once opened. I *think*.


On Thu, Mar 6, 2014 at 5:55 PM, Andreas Schildbach <andreas at schildbach.de>wrote:

> On 03/06/2014 03:51 PM, Andreas Schildbach wrote:
>
> >>     I'm not sure if iso-dep is the way to go here. Afaik as soon as you
> pick
> >>     up the phone the connection breaks.
> >>
> >> If the phone isn't willing to immediately authorise then it'd have to
> >> fall back to HTTPS or Bluetooth as normal.
> >
> > Ok, that would be an option.
>
> One of the first things to explore is if its possible to dispatch
> different isodep applications to different apps. I know you can add an
> intent filter matching action=android.nfc.action.TECH_DISCOVERED and a
> custom "tech filter" android.nfc.tech.IsoDep. However, as long as there
> is no mime type or similar concept, apps will always fight for access to
> IsoDep endpoints. We will want to avoid that situation.
>
>
>
>
>
> ------------------------------------------------------------------------------
> Subversion Kills Productivity. Get off Subversion & Make the Move to
> Perforce.
> With Perforce, you get hassle-free workflows. Merge that actually works.
> Faster operations. Version large binaries.  Built-in WAN optimization and
> the
> freedom to use Git, Perforce or both. Make the move to Perforce.
>
> http://pubads.g.doubleclick.net/gampad/clk?id=122218951&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140306/142a76ba/attachment.html>

From mike at plan99.net  Thu Mar  6 17:03:27 2014
From: mike at plan99.net (Mike Hearn)
Date: Thu, 6 Mar 2014 18:03:27 +0100
Subject: [Bitcoin-development] Instant / contactless payments
In-Reply-To: <CALDj+BZE1KtMGpMH3UHtxjN2vXxu39o_hAWPdg==KLsWpe1zqA@mail.gmail.com>
References: <CANEZrP3w9c_UX3dd+7LdWNXCEwjnAG+bYWxqKYo_fzakWQu=Bg@mail.gmail.com>
	<CALDj+BZE1KtMGpMH3UHtxjN2vXxu39o_hAWPdg==KLsWpe1zqA@mail.gmail.com>
Message-ID: <CANEZrP1Rwk6BnY79+RWontgK7Q1AFu3B191uJ1d80xAhaG1AgA@mail.gmail.com>

Thanks Alex!

About the video - I'm curious how your device is better than just a regular
tablet. Could you give us the elevator pitch? :)

On Thu, Mar 6, 2014 at 3:39 PM, Alex Kotenko <alexykot at gmail.com> wrote:

> I mean - if with Bitcoin v0.9 transaction fees will become really
> floating, and it should eventually reach equilibrium that will reflect some
> real world value. Probably a tiny value, but probably also rather stable
> value. So confirmationless payment cap may be defined as
> <current_average_transaction_fee>x10000.
>

I guess fees will wander up and down depending on system load rather than
real world value - but maybe you're right. That said, all wallets sync
exchange rates automatically already.

In some Star Trek future, perhaps we would want Bitcoin to be independent
of other value units. But I'm not convinced such a world will ever exist.
Arguably, a stable currency would slowly become worth more over time in
line with economic growth. But then for stable prices you would need
something like a fake currency that was "backed by" (really: represented
by) a basket of goods. Otherwise over time your rent would go up in real
terms, for good real reason.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140306/608da23e/attachment.html>

From mike at plan99.net  Thu Mar  6 17:07:18 2014
From: mike at plan99.net (Mike Hearn)
Date: Thu, 6 Mar 2014 18:07:18 +0100
Subject: [Bitcoin-development] Instant / contactless payments
In-Reply-To: <CANg-TZBv0zT6PywWJwug0DtzhQkXeE+9nMY14xKAfCysGfgkFg@mail.gmail.com>
References: <CANEZrP3w9c_UX3dd+7LdWNXCEwjnAG+bYWxqKYo_fzakWQu=Bg@mail.gmail.com>
	<CANg-TZBv0zT6PywWJwug0DtzhQkXeE+9nMY14xKAfCysGfgkFg@mail.gmail.com>
Message-ID: <CANEZrP38p5O+GJ0AsFUHzfuXpR=Z0m2YCZiOy0nFd8jZFuE64A@mail.gmail.com>

>
> if some sort of Stealth address or HD wallet root was the identity gaining
> the reputation, then address re-use wouldn't have to be mandatory.
>
The identity would be the X.520 name in the signing cert that signed the
payment request. It doesn't have to be a difficult to obtain cert. It could
even be self signed for this use case, but then you lose the security
benefits and a key rotation would delete your reputation, so in practice I
think most people would want the reputation to accrue to the name itself.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140306/862d156e/attachment.html>

From alexykot at gmail.com  Thu Mar  6 18:03:20 2014
From: alexykot at gmail.com (Alex Kotenko)
Date: Thu, 6 Mar 2014 18:03:20 +0000
Subject: [Bitcoin-development] Instant / contactless payments
In-Reply-To: <lfa8pf$ckc$1@ger.gmane.org>
References: <CANEZrP3w9c_UX3dd+7LdWNXCEwjnAG+bYWxqKYo_fzakWQu=Bg@mail.gmail.com>
	<CALDj+BZE1KtMGpMH3UHtxjN2vXxu39o_hAWPdg==KLsWpe1zqA@mail.gmail.com>
	<lfa8pf$ckc$1@ger.gmane.org>
Message-ID: <CALDj+Bbe_rCfAoA1PDX5AXSvhYauObYh7Y6nAD3EbhfHX7exQg@mail.gmail.com>

2014-03-06 16:46 GMT+00:00 Andreas Schildbach <andreas at schildbach.de>:

> Supporting Bluetooth is optional in the sense that if a wallet should
> not support it, you will still receive the transaction via the P2P
> network. So I'd say definately go for Bluetooth.
>
?Yes, it's part of the? plan. Just again - I need to make sure we support
all major wallets. And no other wallets actually support NFC by now, not
talking about bluetooth. So I imagine we will decide and implement together
some solution here, both on the wallet and POS sides, but I will have to
keep URI method and even QR codes for backwards compatibility, and wait for
other main wallets to accept innovations before we will be able to
completely switch to it.
As I said earlier - bluetooth support for my POS is not a problem, we can
plug it in easily and make it work. Support among all hardware/software and
polished user experience - this is a main thing here really.

 I wonder about the receipt step -- are you generating a PDF on device

>  and sending it via NFC? This is something that could be supported by the
> BIP70 payment protocol. We should try to avoid the second tap, its not
> intuitive.
>
?No, I'm generating it on server and sending only URL via NFC. I think this
area will change before we launch in production. Ideally I want ?the device
to be completely autonomous, controlled on site by the merchant, probably
with an app on his phone. But right now we have a backend server that gives
merchant a dashboard with device configuration control, transactions
history, daily reconciliation data and copies of receipts. So the PDF is
sent from that server.

?We should avoid second ?tap ideally, but we need to make sure receipts and
payment proofs are usable and understandable for both payers and payees.
Right now a paperless PDF-only process is already a huge leap ahead
comparing to numerous paper receipts printed for each transaction by
existing POS systems.
Implementing proof of payment based on BIP70 payment request+transaction in
the blockchain+memo will require even bigger shift in the merchant's view
on how business runs. Also it will need additional software on his side to
actually be able to view and confirm these proofs of payment. In theory -
yes, BIP70 will create a way to implement proof of payment. In practice in
real life right now I don't see it viable, it will take time to adopt and
few intermediary steps like PDF based paperless process I've implemented.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140306/a287f682/attachment.html>

From boydb at midnightdesign.ws  Thu Mar  6 18:08:51 2014
From: boydb at midnightdesign.ws (Brooks Boyd)
Date: Thu, 6 Mar 2014 12:08:51 -0600
Subject: [Bitcoin-development] Instant / contactless payments
In-Reply-To: <CANEZrP38p5O+GJ0AsFUHzfuXpR=Z0m2YCZiOy0nFd8jZFuE64A@mail.gmail.com>
References: <CANEZrP3w9c_UX3dd+7LdWNXCEwjnAG+bYWxqKYo_fzakWQu=Bg@mail.gmail.com>
	<CANg-TZBv0zT6PywWJwug0DtzhQkXeE+9nMY14xKAfCysGfgkFg@mail.gmail.com>
	<CANEZrP38p5O+GJ0AsFUHzfuXpR=Z0m2YCZiOy0nFd8jZFuE64A@mail.gmail.com>
Message-ID: <CANg-TZBoafXj6AiNGiT63BfX3iJYo5P3Vdmvxi+RuCODcrh0+w@mail.gmail.com>

On Thu, Mar 6, 2014 at 11:07 AM, Mike Hearn <mike at plan99.net> wrote:

> if some sort of Stealth address or HD wallet root was the identity gaining
>> the reputation, then address re-use wouldn't have to be mandatory.
>>
> The identity would be the X.520 name in the signing cert that signed the
> payment request. It doesn't have to be a difficult to obtain cert. It could
> even be self signed for this use case, but then you lose the security
> benefits and a key rotation would delete your reputation, so in practice I
> think most people would want the reputation to accrue to the name itself.
>

That makes sense, to have self-signed certificates as a basic start, but
then is it possible to have a Bitcoin user (address) add reputation/sign
such a certificate, rather than having a central signing authority? If
there was a way for a Bitcoin user to provide feedback on a payment (ECDSA
signature from one of the addresses involved in the payment, signing an
identifier of the payment and a feedback score) such that any user can add
to the reputation with just the Bitcoin infrastructure, without having to
learn X.500 certificate signing on top of EC signatures? If there was a
standard structure for a message to be EC-signed with your Bitcoin client,
and then a distributed store of those signed messages, could that form a
reputation score?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140306/3f35eb4a/attachment.html>

From mike at plan99.net  Thu Mar  6 18:12:01 2014
From: mike at plan99.net (Mike Hearn)
Date: Thu, 6 Mar 2014 19:12:01 +0100
Subject: [Bitcoin-development] Instant / contactless payments
In-Reply-To: <CANg-TZBoafXj6AiNGiT63BfX3iJYo5P3Vdmvxi+RuCODcrh0+w@mail.gmail.com>
References: <CANEZrP3w9c_UX3dd+7LdWNXCEwjnAG+bYWxqKYo_fzakWQu=Bg@mail.gmail.com>
	<CANg-TZBv0zT6PywWJwug0DtzhQkXeE+9nMY14xKAfCysGfgkFg@mail.gmail.com>
	<CANEZrP38p5O+GJ0AsFUHzfuXpR=Z0m2YCZiOy0nFd8jZFuE64A@mail.gmail.com>
	<CANg-TZBoafXj6AiNGiT63BfX3iJYo5P3Vdmvxi+RuCODcrh0+w@mail.gmail.com>
Message-ID: <CANEZrP3pD2c-UFUZZAJAXBFTynx5Vusdw7As6O3RYuix3mMXDA@mail.gmail.com>

>
> If there was a way for a Bitcoin user to provide feedback on a payment
> (ECDSA signature from one of the addresses involved in the payment, signing
> an identifier of the payment and a feedback score)
>

Well now you're getting into the area that I said "rapidly got very
complicated".

Define bitcoin user? What stops me paying myself to accrue positive
reputation? Etc.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140306/83e811cd/attachment.html>

From boydb at midnightdesign.ws  Thu Mar  6 18:20:24 2014
From: boydb at midnightdesign.ws (Brooks Boyd)
Date: Thu, 6 Mar 2014 12:20:24 -0600
Subject: [Bitcoin-development] Instant / contactless payments
In-Reply-To: <CANEZrP3pD2c-UFUZZAJAXBFTynx5Vusdw7As6O3RYuix3mMXDA@mail.gmail.com>
References: <CANEZrP3w9c_UX3dd+7LdWNXCEwjnAG+bYWxqKYo_fzakWQu=Bg@mail.gmail.com>
	<CANg-TZBv0zT6PywWJwug0DtzhQkXeE+9nMY14xKAfCysGfgkFg@mail.gmail.com>
	<CANEZrP38p5O+GJ0AsFUHzfuXpR=Z0m2YCZiOy0nFd8jZFuE64A@mail.gmail.com>
	<CANg-TZBoafXj6AiNGiT63BfX3iJYo5P3Vdmvxi+RuCODcrh0+w@mail.gmail.com>
	<CANEZrP3pD2c-UFUZZAJAXBFTynx5Vusdw7As6O3RYuix3mMXDA@mail.gmail.com>
Message-ID: <CANg-TZCAriYNbcA90YxKy6fRaioJ=0E18EcxAm0A6DssWkRrnw@mail.gmail.com>

On Thu, Mar 6, 2014 at 12:12 PM, Mike Hearn <mike at plan99.net> wrote:

> If there was a way for a Bitcoin user to provide feedback on a payment
>> (ECDSA signature from one of the addresses involved in the payment, signing
>> an identifier of the payment and a feedback score)
>>
>
> Well now you're getting into the area that I said "rapidly got very
> complicated".
>
> Define bitcoin user? What stops me paying myself to accrue positive
> reputation? Etc.
>

Yes, I could see how that could get hairy; it would also need some ability
to rate those giving the feedback, such that if you generate a whole bunch
of payments to yourself, those payees don't have reputation on their own,
so their review of you as a payer isn't weighted that highly. Then you have
that ring-of-trust possibility where Alice thinks Eve is bad, so the fact
that Eve thinks Bob is good doesn't impact Alice. But if Carol thinks Eve
is good, Carol thinks Bob is good too, so Bob's reputation is different
based on who's asking, and it's the responsibility of the individual
members to maintain their own good/bad user lists. Would you think that's a
good thing or a bad thing to give the individual players that level of
control/responsibility?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140306/be0073a8/attachment.html>

From mike at plan99.net  Thu Mar  6 18:24:04 2014
From: mike at plan99.net (Mike Hearn)
Date: Thu, 6 Mar 2014 19:24:04 +0100
Subject: [Bitcoin-development] Instant / contactless payments
In-Reply-To: <CANg-TZCAriYNbcA90YxKy6fRaioJ=0E18EcxAm0A6DssWkRrnw@mail.gmail.com>
References: <CANEZrP3w9c_UX3dd+7LdWNXCEwjnAG+bYWxqKYo_fzakWQu=Bg@mail.gmail.com>
	<CANg-TZBv0zT6PywWJwug0DtzhQkXeE+9nMY14xKAfCysGfgkFg@mail.gmail.com>
	<CANEZrP38p5O+GJ0AsFUHzfuXpR=Z0m2YCZiOy0nFd8jZFuE64A@mail.gmail.com>
	<CANg-TZBoafXj6AiNGiT63BfX3iJYo5P3Vdmvxi+RuCODcrh0+w@mail.gmail.com>
	<CANEZrP3pD2c-UFUZZAJAXBFTynx5Vusdw7As6O3RYuix3mMXDA@mail.gmail.com>
	<CANg-TZCAriYNbcA90YxKy6fRaioJ=0E18EcxAm0A6DssWkRrnw@mail.gmail.com>
Message-ID: <CANEZrP3DGOO_3pzew+EbcH+YcegbhSXjbTpKsp_vy6UZ2REDWw@mail.gmail.com>

>
> it's the responsibility of the individual members to maintain their own
> good/bad user lists. Would you think that's a good thing or a bad thing to
> give the individual players that level of control/responsibility?
>

If it's explicit, I think it's a non starter and nobody will bother with
it, especially not just for instant payments.

If it's just a case of "link your wallet with your Facebook account" and
requires no more effort than that, some people might, but of course the
user experience would be rather random. Hey why did that guy in front of me
get instant payments and I had to confirm even though we bought the same
things?

I'm not a big fan of UX's that appear totally random to the user.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140306/3b53d97e/attachment.html>

From alexykot at gmail.com  Thu Mar  6 18:49:06 2014
From: alexykot at gmail.com (Alex Kotenko)
Date: Thu, 6 Mar 2014 18:49:06 +0000
Subject: [Bitcoin-development] Instant / contactless payments
In-Reply-To: <CANEZrP1Rwk6BnY79+RWontgK7Q1AFu3B191uJ1d80xAhaG1AgA@mail.gmail.com>
References: <CANEZrP3w9c_UX3dd+7LdWNXCEwjnAG+bYWxqKYo_fzakWQu=Bg@mail.gmail.com>
	<CALDj+BZE1KtMGpMH3UHtxjN2vXxu39o_hAWPdg==KLsWpe1zqA@mail.gmail.com>
	<CANEZrP1Rwk6BnY79+RWontgK7Q1AFu3B191uJ1d80xAhaG1AgA@mail.gmail.com>
Message-ID: <CALDj+BYHrDdX0rGu=YQ3u-xOg8dsc0V2W69YTjZJZqMot6pt=Q@mail.gmail.com>

2014-03-06 17:03 GMT+00:00 Mike Hearn <mike at plan99.net>:

> About the video - I'm curious how your device is better than just a
> regular tablet. Could you give us the elevator pitch? :)


sure, here:
- tougher than phone/tablet. Phone dropped on the tiled floor is likely to
die instantly. Our device is designed to survive everyday intense use and
drops on the floor also.
- cheaper than phone/tablet. Usual phone/tablet costs few hundred bucks,
our device on mass scale will be definitely cheaper than that. Maybe a
noname chinese tablet will match on price, but then again what about
reliability?
- simpler than phone/tablet. Phone app needs some basic understanding to
operate. Cheap cashier employees hired by small corner shops might find
this a challenge.
- safer than phone/tablet. No option to install random apps on it. And no
temptation to steal it from the counter.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140306/c800007f/attachment.html>

From swansontec at gmail.com  Thu Mar  6 22:38:40 2014
From: swansontec at gmail.com (William Swanson)
Date: Thu, 6 Mar 2014 14:38:40 -0800
Subject: [Bitcoin-development] bip-0021 and bip-0072 ambiguities & mistakes
Message-ID: <CABjHNoQQUu0WDdgFHAe4FEGmO8JmjvwAfpCwcrL7wGsHiVDjog@mail.gmail.com>

Hello,
I am attempting to write a parser for bip-0021 URI's, including
support for the new bip-0072 payment parameters. My goal is absolute
correctness. Unfortunately, these BIP's have a few ambiguities and
mistakes which ought to be corrected.

First, I would like to point out that internet RFC 3986 governs the
general syntax for URI's. It obsoletes RFC 1738 and various other
early RFC's. Since RFC 3986 came out in 2005, I think we can agree
that any bitcoin URI scheme should use this and not the earlier ones.

Unfortunately, bip-0021 never actually mentions RFC 3986, which is a
big omission. Even worse, bip-0072 explicitly refers to RFC 1738,
which is obsolete. This is a problem, since the old, obsolete standard
requires more escapes than are actually necessary. Updating bip-0072
to refer to RFC 3986 instead would allow shorter, more readable
bitcoin URI's (things like slashes in payment addresses wouldn't need
to be escaped).

Secondly, neither of the bip's describe what to do with international
characters. I doubt anybody wants to limit the "label" and "message"
parameters to 7-bit ASCII, so a character encoding needs to be
defined. RFC reccomends that all new URI schemes use UTF-8 as their
encoding, which is perfectly reasonable. The bip-0021 standard just
needs to actually say so.

Finally, there is an error in the bip-0021 BNF grammar, which never
mentions the '&' separator between query elements.

What is the procedure for getting these BIP's corrected? Submit a pull
request with the changes? Hopefully we can all agree that these fixes
are useful and necessary.

-William

P.S. The bitcoin-qt client uses QUrl to parse bitcoin uri's, and that
is based on RFC 3986. Thus, the bitcoin-qt client is probably already
implementing these suggestions.



From mike at plan99.net  Thu Mar  6 22:59:46 2014
From: mike at plan99.net (Mike Hearn)
Date: Thu, 6 Mar 2014 23:59:46 +0100
Subject: [Bitcoin-development] bip-0021 and bip-0072 ambiguities &
	mistakes
In-Reply-To: <CABjHNoQQUu0WDdgFHAe4FEGmO8JmjvwAfpCwcrL7wGsHiVDjog@mail.gmail.com>
References: <CABjHNoQQUu0WDdgFHAe4FEGmO8JmjvwAfpCwcrL7wGsHiVDjog@mail.gmail.com>
Message-ID: <CANEZrP1dSTbq==fjspaE0ktBMwhwOz2ByLDTiaOy_E2mS7_Wyw@mail.gmail.com>

Yes please, pull req would be great! I also noticed that escaping doesn't
seem to be necessary, and the resultant de-escaped QRcodes are certainly
much nicer! Thanks!
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140306/a3273152/attachment.html>

From swansontec at gmail.com  Fri Mar  7 02:16:14 2014
From: swansontec at gmail.com (William Swanson)
Date: Thu, 6 Mar 2014 18:16:14 -0800
Subject: [Bitcoin-development] bip-0021 and bip-0072 ambiguities &
	mistakes
In-Reply-To: <CANEZrP1dSTbq==fjspaE0ktBMwhwOz2ByLDTiaOy_E2mS7_Wyw@mail.gmail.com>
References: <CABjHNoQQUu0WDdgFHAe4FEGmO8JmjvwAfpCwcrL7wGsHiVDjog@mail.gmail.com>
	<CANEZrP1dSTbq==fjspaE0ktBMwhwOz2ByLDTiaOy_E2mS7_Wyw@mail.gmail.com>
Message-ID: <CABjHNoTMZLi7pNw16U4CX9njg+0CAq1AakE-QSzLQEgF0cTN9A@mail.gmail.com>

On Thu, Mar 6, 2014 at 2:59 PM, Mike Hearn <mike at plan99.net> wrote:
> Yes please, pull req would be great! I also noticed that escaping doesn't
> seem to be necessary, and the resultant de-escaped QRcodes are certainly
> much nicer! Thanks!

All right, I have submitted the pull request. Hopefully, the specified
behavior now corresponds more closely to what the bitcoin-qt client is
actually doing, and to what the RFC recommends.

-William



From andreas at schildbach.de  Fri Mar  7 08:45:43 2014
From: andreas at schildbach.de (Andreas Schildbach)
Date: Fri, 07 Mar 2014 09:45:43 +0100
Subject: [Bitcoin-development] Instant / contactless payments, IsoDep
In-Reply-To: <CANEZrP2dsaOG9SpSr3SF48ErpRhFzxCACqA-t0wt6r1QaiZSvw@mail.gmail.com>
References: <CANEZrP3w9c_UX3dd+7LdWNXCEwjnAG+bYWxqKYo_fzakWQu=Bg@mail.gmail.com>	<lf9m0e$q7t$1@ger.gmane.org>	<CANEZrP2GbnsqQANGKMW_5FAugppGJEksaB=Tf8Xu1nRLy3z9yg@mail.gmail.com>	<lfa20f$i2k$1@ger.gmane.org>
	<lfa9ab$k1c$1@ger.gmane.org>
	<CANEZrP2dsaOG9SpSr3SF48ErpRhFzxCACqA-t0wt6r1QaiZSvw@mail.gmail.com>
Message-ID: <lfc0v9$mu2$1@ger.gmane.org>

I doubt that this is possible (with the Android API). But I'll try.


On 03/06/2014 06:00 PM, Mike Hearn wrote:
> I think maybe the way you do it is to have a NDEF tag that triggers the
> app, and then that starts an IsoDep protocol once opened. I *think*.
> 
> 
> On Thu, Mar 6, 2014 at 5:55 PM, Andreas Schildbach
> <andreas at schildbach.de <mailto:andreas at schildbach.de>> wrote:
> 
>     On 03/06/2014 03:51 PM, Andreas Schildbach wrote:
> 
>     >>     I'm not sure if iso-dep is the way to go here. Afaik as soon
>     as you pick
>     >>     up the phone the connection breaks.
>     >>
>     >> If the phone isn't willing to immediately authorise then it'd have to
>     >> fall back to HTTPS or Bluetooth as normal.
>     >
>     > Ok, that would be an option.
> 
>     One of the first things to explore is if its possible to dispatch
>     different isodep applications to different apps. I know you can add an
>     intent filter matching action=android.nfc.action.TECH_DISCOVERED and a
>     custom "tech filter" android.nfc.tech.IsoDep. However, as long as there
>     is no mime type or similar concept, apps will always fight for access to
>     IsoDep endpoints. We will want to avoid that situation.
> 
> 
> 
> 
>     ------------------------------------------------------------------------------
>     Subversion Kills Productivity. Get off Subversion & Make the Move to
>     Perforce.
>     With Perforce, you get hassle-free workflows. Merge that actually works.
>     Faster operations. Version large binaries.  Built-in WAN
>     optimization and the
>     freedom to use Git, Perforce or both. Make the move to Perforce.
>     http://pubads.g.doubleclick.net/gampad/clk?id=122218951&iu=/4140/ostg.clktrk
>     _______________________________________________
>     Bitcoin-development mailing list
>     Bitcoin-development at lists.sourceforge.net
>     <mailto:Bitcoin-development at lists.sourceforge.net>
>     https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 
> 
> 
> 
> ------------------------------------------------------------------------------
> Subversion Kills Productivity. Get off Subversion & Make the Move to Perforce.
> With Perforce, you get hassle-free workflows. Merge that actually works. 
> Faster operations. Version large binaries.  Built-in WAN optimization and the
> freedom to use Git, Perforce or both. Make the move to Perforce.
> http://pubads.g.doubleclick.net/gampad/clk?id=122218951&iu=/4140/ostg.clktrk
> 
> 
> 
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 





From andreas at schildbach.de  Fri Mar  7 08:59:43 2014
From: andreas at schildbach.de (Andreas Schildbach)
Date: Fri, 07 Mar 2014 09:59:43 +0100
Subject: [Bitcoin-development] Instant / contactless payments
In-Reply-To: <CALDj+Bbe_rCfAoA1PDX5AXSvhYauObYh7Y6nAD3EbhfHX7exQg@mail.gmail.com>
References: <CANEZrP3w9c_UX3dd+7LdWNXCEwjnAG+bYWxqKYo_fzakWQu=Bg@mail.gmail.com>	<CALDj+BZE1KtMGpMH3UHtxjN2vXxu39o_hAWPdg==KLsWpe1zqA@mail.gmail.com>	<lfa8pf$ckc$1@ger.gmane.org>
	<CALDj+Bbe_rCfAoA1PDX5AXSvhYauObYh7Y6nAD3EbhfHX7exQg@mail.gmail.com>
Message-ID: <lfc1ph$1dg$1@ger.gmane.org>

On 03/06/2014 07:03 PM, Alex Kotenko wrote:

>     Supporting Bluetooth is optional in the sense that if a wallet should
>     not support it, you will still receive the transaction via the P2P
>     network. So I'd say definately go for Bluetooth.
> 
> ?Yes, it's part of the? plan. Just again - I need to make sure we
> support all major wallets. And no other wallets actually support NFC by
> now, not talking about bluetooth. So I imagine we will decide and
> implement together some solution here, both on the wallet and POS sides,
> but I will have to keep URI method and even QR codes for backwards
> compatibility, and wait for other main wallets to accept innovations
> before we will be able to completely switch to it.
> As I said earlier - bluetooth support for my POS is not a problem, we
> can plug it in easily and make it work. Support among all
> hardware/software and polished user experience - this is a main thing
> here really.

Sure, take all the time you need.

All I wanted to say is you don't need to break Bitcoin URI compatibility
in order to support direct payments via Bluetooth. It's simply an
add-on, both in the BIP21 and the BIP70 cases.




From johannes at zweng.at  Fri Mar  7 09:26:03 2014
From: johannes at zweng.at (Johannes Zweng)
Date: Fri, 7 Mar 2014 10:26:03 +0100
Subject: [Bitcoin-development] Instant / contactless payments
In-Reply-To: <lf9m0e$q7t$1@ger.gmane.org>
References: <CANEZrP3w9c_UX3dd+7LdWNXCEwjnAG+bYWxqKYo_fzakWQu=Bg@mail.gmail.com>
	<lf9m0e$q7t$1@ger.gmane.org>
Message-ID: <CAJoe_wFeyFvxbd2nSD2yztJ_qjRQ=AKZj8pBOXs-ChKKbaZeuQ@mail.gmail.com>

2014-03-06 12:26 GMT+01:00 Andreas Schildbach <andreas at schildbach.de>:


> In current phone implementations, the screen must be on already for NFC
> to be active. Also it must be unlocked, although I certainly hope future
> OSes will allow payment apps on the lock screen, just like they allow
> music players.


Just a small input to this point:
On Android 4.4 the new host card emulation (HCE) feature (aka: the phone
emulates a ISO-DEP Smartcard and processes ISO7816-4 APDU commands like a
Smartcard would do) only works when the display is on, but even when the
screen is locked (can be changed with "android:requireDeviceUnlock" in
Manifest). See here for detailled specification:
http://developer.android.com/guide/topics/connectivity/nfc/hce.html

Using the HCE API on Android 4.4 also has the beauty that any app that
registers itself for HCE and sets its category to CATEGORY_PAYMENT in the
Manifest automatically shows up in Adroid's system settings under "Tap &
Pay" (where a user would expect payment applications).
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140307/a4a84190/attachment.html>

From mike at plan99.net  Fri Mar  7 10:00:21 2014
From: mike at plan99.net (Mike Hearn)
Date: Fri, 7 Mar 2014 11:00:21 +0100
Subject: [Bitcoin-development] Instant / contactless payments
In-Reply-To: <CAJoe_wFeyFvxbd2nSD2yztJ_qjRQ=AKZj8pBOXs-ChKKbaZeuQ@mail.gmail.com>
References: <CANEZrP3w9c_UX3dd+7LdWNXCEwjnAG+bYWxqKYo_fzakWQu=Bg@mail.gmail.com>
	<lf9m0e$q7t$1@ger.gmane.org>
	<CAJoe_wFeyFvxbd2nSD2yztJ_qjRQ=AKZj8pBOXs-ChKKbaZeuQ@mail.gmail.com>
Message-ID: <CANEZrP3r3Xtv1BDK3k5u40xqa7WZn2G5NB6+-YGEbey60Wezgw@mail.gmail.com>

HCE is a bit scary. It's like the card companies tried the secure element
thing, decided the security was too hard and were like "screw it, let's
just use regular apps after all". Not that we're any better :)

At any rate, Bitcoin doesn't have any need to emulate smartcards as we
don't have any pre-existing infrastructure. We can just use a regular
non-smarcard-emulation ISO-DEP protocol. The new UI in Android 4.4 provides
some way to choose the default payment app, but I think it's only intended
to disambiguate between credit card providers. Everything else gets dumped
into CATEGORY_OTHER and I dunno what happens if you have multiple Bitcoin
wallet apps doing the same thing. Worst case, we can add some
disambiguation code on top, inside the apps themselves.



On Fri, Mar 7, 2014 at 10:26 AM, Johannes Zweng <johannes at zweng.at> wrote:

>
> 2014-03-06 12:26 GMT+01:00 Andreas Schildbach <andreas at schildbach.de>:
>
>
>
>> In current phone implementations, the screen must be on already for NFC
>> to be active. Also it must be unlocked, although I certainly hope future
>> OSes will allow payment apps on the lock screen, just like they allow
>> music players.
>
>
> Just a small input to this point:
> On Android 4.4 the new host card emulation (HCE) feature (aka: the phone
> emulates a ISO-DEP Smartcard and processes ISO7816-4 APDU commands like a
> Smartcard would do) only works when the display is on, but even when the
> screen is locked (can be changed with "android:requireDeviceUnlock" in
> Manifest). See here for detailled specification:
> http://developer.android.com/guide/topics/connectivity/nfc/hce.html
>
> Using the HCE API on Android 4.4 also has the beauty that any app that
> registers itself for HCE and sets its category to CATEGORY_PAYMENT in the
> Manifest automatically shows up in Adroid's system settings under "Tap &
> Pay" (where a user would expect payment applications).
>
>
>
>
> ------------------------------------------------------------------------------
> Subversion Kills Productivity. Get off Subversion & Make the Move to
> Perforce.
> With Perforce, you get hassle-free workflows. Merge that actually works.
> Faster operations. Version large binaries.  Built-in WAN optimization and
> the
> freedom to use Git, Perforce or both. Make the move to Perforce.
>
> http://pubads.g.doubleclick.net/gampad/clk?id=122218951&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140307/49ed8d6b/attachment.html>

From andreas at schildbach.de  Fri Mar  7 10:23:28 2014
From: andreas at schildbach.de (Andreas Schildbach)
Date: Fri, 07 Mar 2014 11:23:28 +0100
Subject: [Bitcoin-development] Instant / contactless payments
In-Reply-To: <CAJoe_wFeyFvxbd2nSD2yztJ_qjRQ=AKZj8pBOXs-ChKKbaZeuQ@mail.gmail.com>
References: <CANEZrP3w9c_UX3dd+7LdWNXCEwjnAG+bYWxqKYo_fzakWQu=Bg@mail.gmail.com>	<lf9m0e$q7t$1@ger.gmane.org>
	<CAJoe_wFeyFvxbd2nSD2yztJ_qjRQ=AKZj8pBOXs-ChKKbaZeuQ@mail.gmail.com>
Message-ID: <lfc6mi$qth$1@ger.gmane.org>

On 03/07/2014 10:26 AM, Johannes Zweng wrote:

>     In current phone implementations, the screen must be on already for NFC
>     to be active. Also it must be unlocked, although I certainly hope future
>     OSes will allow payment apps on the lock screen, just like they allow
>     music players.
> 
> Just a small input to this point:
> On Android 4.4 the new host card emulation (HCE) feature (aka: the phone
> emulates a ISO-DEP Smartcard and processes ISO7816-4 APDU commands like
> a Smartcard would do) only works when the display is on, but even when
> the screen is locked (can be changed with "android:requireDeviceUnlock"
> in Manifest). See here for detailled
> specification: http://developer.android.com/guide/topics/connectivity/nfc/hce.html
> 
> Using the HCE API on Android 4.4 also has the beauty that any app that
> registers itself for HCE and sets its category to CATEGORY_PAYMENT in
> the Manifest automatically shows up in Adroid's system settings under
> "Tap & Pay" (where a user would expect payment applications).

Thanks for the pointer! Good to hear there is finally a decent
documentation for HCE.

Good news: HCE offers the required dispatch ability -- they call it AID
(Application ID).

Bad news: It seems - at least CATEGORY_PAYMENT - very credit card centric.

HCE seems to cover only the payer side. I wonder if there is also an API
for "reader emulation" which we would need for apps to support the payee
side.

Since Android 4.4 market penetration is quite far off, I suggest we
focus on the already established NFC payment protocol(s) for now, it
works pretty well. I will investigate into IsoDep and HCE and see if we
can make it enhance usability.

Interesting side note: They recommend messages transmitted via NFC to
not exceed 1 KB in order for a snappy experience. This (again) questions
usage of bulky X.509 certificates in our payment request messages.
Bitcoin Wallet currently does not sign payment requests, so I could not
try how it would feel.





From mike at plan99.net  Fri Mar  7 11:01:15 2014
From: mike at plan99.net (Mike Hearn)
Date: Fri, 7 Mar 2014 12:01:15 +0100
Subject: [Bitcoin-development] Instant / contactless payments
In-Reply-To: <lfc6mi$qth$1@ger.gmane.org>
References: <CANEZrP3w9c_UX3dd+7LdWNXCEwjnAG+bYWxqKYo_fzakWQu=Bg@mail.gmail.com>
	<lf9m0e$q7t$1@ger.gmane.org>
	<CAJoe_wFeyFvxbd2nSD2yztJ_qjRQ=AKZj8pBOXs-ChKKbaZeuQ@mail.gmail.com>
	<lfc6mi$qth$1@ger.gmane.org>
Message-ID: <CANEZrP3sQWqjpt2vMS8paQvWM=Fn=jPkEOk9g_ZukM3Ouhkw=A@mail.gmail.com>

>
> Interesting side note: They recommend messages transmitted via NFC to
> not exceed 1 KB in order for a snappy experience. This (again) questions
> usage of bulky X.509 certificates in our payment request messages.
> Bitcoin Wallet currently does not sign payment requests, so I could not
> try how it would feel.


I think you could just put a signed PaymentRequest into an NFC tag and try
reading it from that. It's the same underlying radio tech so the transfer
speeds should be similar, I'd think.

Common X.509 certs are bigger than they need to be for sure, but a lot of
the bulk comes from the use of RSA rather than ECC. An RSA signature alone
can be 256 bytes! There's nothing that states you have to use RSA for
certificates and ECC certs are out there (Google uses one), but I think
they are harder to get hold of. I guess over time SSL will migrate to
mostly ECC (secp256r1) based certs.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140307/5b262a28/attachment.html>

From johannes at zweng.at  Fri Mar  7 12:00:33 2014
From: johannes at zweng.at (Johannes Zweng)
Date: Fri, 7 Mar 2014 13:00:33 +0100
Subject: [Bitcoin-development] Instant / contactless payments
In-Reply-To: <lfc6mi$qth$1@ger.gmane.org>
References: <CANEZrP3w9c_UX3dd+7LdWNXCEwjnAG+bYWxqKYo_fzakWQu=Bg@mail.gmail.com>
	<lf9m0e$q7t$1@ger.gmane.org>
	<CAJoe_wFeyFvxbd2nSD2yztJ_qjRQ=AKZj8pBOXs-ChKKbaZeuQ@mail.gmail.com>
	<lfc6mi$qth$1@ger.gmane.org>
Message-ID: <CAJoe_wGgLDh_pk6fntsKrYjXczZv-X5PLth7Y2B2s=oPuFz6AQ@mail.gmail.com>

2014-03-07 11:23 GMT+01:00 Andreas Schildbach <andreas at schildbach.de>:


> Good news: HCE offers the required dispatch ability -- they call it AID
> (Application ID).
>

Yes, that's also something adopted from the existing Smartcard world.
Existing smartcards can contain different payment applications (for example
in Germany the "Maestro" and the "Geldkarte" application on the same card).
So the terminal can actively request one specific application within the
Smartcard.

But as Mike correctly said, we have no pre-existing infrastructure to
support. So decisions should only be based on what makes sense for the
future.


Bad news: It seems - at least CATEGORY_PAYMENT - very credit card centric.
>

I'm not sure about this. I've built several HCE test apps and tested them
with readers (and other phones used as reader) but I did not notice any
difference to using CATEGORY_OTHER (besides that the apps using
CATEGORY_PAYMENT appear in KitKat's new shiny "Tap & Pay" menu).


HCE seems to cover only the payer side. I wonder if there is also an API
> for "reader emulation" which we would need for apps to support the payee
> side.
>

You are free to implement whatever protocol you want. On the reader side
you simply do a IseDep "connect()" and send your commands with
"transceive()" (
https://developer.android.com/reference/android/nfc/tech/IsoDep.html#transceive(byte[])).
After sending the initial ISO 7816-4 "SELECT APPLICATION" command (see here
for some ISO 7816-4 doc:
http://www.cardwerk.com/smartcards/smartcard_standard_ISO7816-4_6_basic_interindustry_commands.aspx#chap6_11)
which triggers Android HCE routing mechanism to route all following PDUs to
your HCE app, you are free to send whatever you want.

Anything you send with "transceve()" on the sender side, will be received
within your HCE application in the "processCommandApdu" method:
https://developer.android.com/reference/android/nfc/cardemulation/HostApduService.html#processCommandApdu(byte[],
android.os.Bundle)

The only limitation is that you have a strict request/response model. The
reader terminal (or the reading phone) sends a request, the HCE phone sends
a response.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140307/c8eeac9b/attachment.html>

From joel.kaartinen at gmail.com  Fri Mar  7 18:07:57 2014
From: joel.kaartinen at gmail.com (Joel Kaartinen)
Date: Fri, 07 Mar 2014 20:07:57 +0200
Subject: [Bitcoin-development] Instant / contactless payments
In-Reply-To: <CANg-TZBv0zT6PywWJwug0DtzhQkXeE+9nMY14xKAfCysGfgkFg@mail.gmail.com>
References: <CANEZrP3w9c_UX3dd+7LdWNXCEwjnAG+bYWxqKYo_fzakWQu=Bg@mail.gmail.com>
	<CANg-TZBv0zT6PywWJwug0DtzhQkXeE+9nMY14xKAfCysGfgkFg@mail.gmail.com>
Message-ID: <531A0AFD.5010702@gmail.com>

I think a reputation network is more complicated than is needed for
this. This can be solved by the market.

What is needed is a simple method for each individual user to mark
certain merchant as trusted. For example, if your device gets an
untrusted payment request, it'll make a small sound, light up the screen
and ask the user to authorize the payment. The user then has the choice
of adding the merchant to trust list, authorizing just a single
transaction or not paying (and perhaps adding to the user's publicly
shared untrusted list?).

This way, even lacking a trust architecture, only the first payment to a
merchant needs to take several seconds. If trust is granted, the next
payments will be swift.

The lack of chargebacks presents a clear risk to the customer, though,
so a need for a third party that can keep the merchants honest exists.
This opens up markets for transaction insurance companies. Even though
bitcoin transactions are final, if a transaction insurance company
offers to cover your losses in the event of fraudulent charge, the risk
is practically eliminated.

Such an insurance company would have a strong incentive to make sure the
merchants they insure for behave. Otherwise they'll suffer the losses. I
think this would result in an equally trustworthy but more decentralized
system than with credit cards.

- Joel

On 06.03.2014 16:20, Brooks Boyd wrote:
>
>
> On Mar 6, 2014 3:47 AM, "Mike Hearn" <mike at plan99.net
> <mailto:mike at plan99.net>> wrote:
> >
> > I just did my first contactless nfc payment with a MasterCard. It
> worked very well and was quite delightful - definitely want to be
> doing more of these in future. I think people will come to expect this
> kind of no-friction payment experience and Bitcoin will need to match
> it, so here are some notes on what's involved.
> >
> > 3) Have some kind of decentralised reputation network. I spent some
> time thinking about this, but it rapidly became very complicated and
> feels like an entirely separate project that should stand alone from
> Bitcoin itself. Perhaps rather than try to make a global system,
> social data could be exchanged (using some fancy privacy preserving
> protocols?) so if your friends have decided to trust seller X, your
> phone automatically trusts them too.
>
> A reputation network might be an interesting idea, or several
> different networks with different curators (to prevent complete
> centralization), like how the US credit score system has three main
> companies who track your score. Something like a GPG ring of trust,
> with addresses signing other addresses would work well, if some sort
> of Stealth address or HD wallet root was the identity gaining the
> reputation, then address re-use wouldn't have to be mandatory.
>
>
>
> ------------------------------------------------------------------------------
> Subversion Kills Productivity. Get off Subversion & Make the Move to Perforce.
> With Perforce, you get hassle-free workflows. Merge that actually works. 
> Faster operations. Version large binaries.  Built-in WAN optimization and the
> freedom to use Git, Perforce or both. Make the move to Perforce.
> http://pubads.g.doubleclick.net/gampad/clk?id=122218951&iu=/4140/ostg.clktrk
>
>
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140307/335b10cd/attachment.html>

From hozer at hozed.org  Fri Mar  7 19:08:04 2014
From: hozer at hozed.org (Troy Benjegerdes)
Date: Fri, 7 Mar 2014 13:08:04 -0600
Subject: [Bitcoin-development] Instant / contactless payments
In-Reply-To: <CANEZrP3w9c_UX3dd+7LdWNXCEwjnAG+bYWxqKYo_fzakWQu=Bg@mail.gmail.com>
References: <CANEZrP3w9c_UX3dd+7LdWNXCEwjnAG+bYWxqKYo_fzakWQu=Bg@mail.gmail.com>
Message-ID: <20140307190804.GV3180@nl.grid.coop>

On Thu, Mar 06, 2014 at 10:45:31AM +0100, Mike Hearn wrote:
> I just did my first contactless nfc payment with a MasterCard. It worked
> very well and was quite delightful - definitely want to be doing more of
> these in future. I think people will come to expect this kind of
> no-friction payment experience and Bitcoin will need to match it, so here
> are some notes on what's involved.
> 
> There are two aspects that can be implemented independently of each other:
> 
> 1) The physical/NFC layer.
> 2) The risk analysis layer.
> 
> A contactless payment needs two things to work: one is a VERY fast, low
> latency communication between payment device (phone in our case) and
> terminal. I couldn't find actual latency specs yet but it felt like using
> an Oyster card, which aims for <400msec.

What matters more than the latency is the *variability*. I would spec this
system for no less than 200ms, and no more than 250ms to be 'standard'.

> ..... so I bet we'd need to optimise the bootup process of the Android
> wallet app. Right now it does slow things like deserialising giant protocol
> buffers and is just generally not optimised for startup time. Loading the
> wallet, reading the payment request over NFC, checking the cert signatures,
> making the trust decision, calculating a transaction, signing it, sending
> it back to the recipient all in under 400 msec would be a tough (but fun)
> programming challenge. Some of the steps can be parallelised and modern
> phones are mostly multicore.

If you have to invoke a java/ios/etc app you are never going to be consistent,
however if you have a GPL linux kernel module (like I proposed for my still
hypothetical 7coin), you should have no trouble meeting those specs. 

I'd like to be able to load my java app, tell it to put $50 on my 'instant'/nfc
wallet, and then let the kernel module spend out the $50 whenever the phone 
gets swiped by somehting.

If you do this right, every device has a well-known payment address for it's
'instant' wallet, and it should be trivial for merchants to just look at the
blockchain and confirm the instant wallet has a sufficient balance to cover
the transaction.

One more comment... having a bitcoin payment application 'check certs' seems
like a great way to ensure that Visa maintains their market share. 

If it's my phone, and I press the hardware payment button, and I only put 
$50 on it, I frankly don't care if there's a cert or not. The last thing I
want is a 'certificate validation error' when I'm trying to buy a soda.

----------------------------------------------------------------------------
Troy Benjegerdes                 'da hozer'                  hozer at hozed.org
7 elements      earth::water::air::fire::mind::spirit::soul        grid.coop

      Never pick a fight with someone who buys ink by the barrel,
         nor try buy a hacker who makes money by the megahash




From ed at realitykeys.com  Sat Mar  8 06:55:18 2014
From: ed at realitykeys.com (Edmund Edgar)
Date: Sat, 8 Mar 2014 15:55:18 +0900
Subject: [Bitcoin-development] Is this a safe thing to be doing with ECC
 addition? (Oracle protocol)
Message-ID: <CA+su7OUMgeWgkMFAmmMEpW3eN=cvU47MKt51idDrmCWEiCb+VQ@mail.gmail.com>

On 4 March 2014 14:07, Odinn Cyberguerrilla <odinn.cyberguerrilla at riseup.net
> wrote:

> Nothing is safe.
>

This is true. To rephrase, imagine I gave you an ECC public key <ed_pub>,
you gave me back a public key <odinn_pub> of your own devising, then I paid
some money to the address resulting from add_pubkeys(<ed_pub>,<odinn_pub>)
[1]. Can anyone either:

a) Think of a way that Odinn could make an <odinn_pub> such that they could
spend the resulting money without having <ed_priv>.
b) Opine, somewhat knowledgeably, that this probably wouldn't be an easy
thing to do, and they wouldn't be alarmed to see people running software
that did this kind of thing.

[1]
https://github.com/vbuterin/pybitcointools/blob/master/pybitcointools/main.py#L173

-- 
Edmund Edgar
Founder, Social Minds Inc (KK)
Twitter: @edmundedgar
Linked In: edmundedgar
Skype: edmundedgar
http://www.socialminds.jp

Reality Keys
@realitykeys
ed at realitykeys.com
https://www.realitykeys.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140308/5bc2b0c7/attachment.html>

From etotheipi at gmail.com  Sat Mar  8 08:10:40 2014
From: etotheipi at gmail.com (Alan Reiner)
Date: Sat, 08 Mar 2014 03:10:40 -0500
Subject: [Bitcoin-development] Is this a safe thing to be doing with ECC
 addition? (Oracle protocol)
In-Reply-To: <CA+su7OUMgeWgkMFAmmMEpW3eN=cvU47MKt51idDrmCWEiCb+VQ@mail.gmail.com>
References: <CA+su7OUMgeWgkMFAmmMEpW3eN=cvU47MKt51idDrmCWEiCb+VQ@mail.gmail.com>
Message-ID: <531AD080.40501@gmail.com>

On 03/08/2014 01:55 AM, Edmund Edgar wrote:
> On 4 March 2014 14:07, Odinn Cyberguerrilla
> <odinn.cyberguerrilla at riseup.net
> <mailto:odinn.cyberguerrilla at riseup.net>> wrote:
>
>     Nothing is safe.
>
>
> This is true. To rephrase, imagine I gave you an ECC public key
> <ed_pub>, you gave me back a public key <odinn_pub> of your own
> devising, then I paid some money to the address resulting from
> add_pubkeys(<ed_pub>,<odinn_pub>) [1]. Can anyone either:
>
> a) Think of a way that Odinn could make an <odinn_pub> such that they
> could spend the resulting money without having <ed_priv>.
> b) Opine, somewhat knowledgeably, that this probably wouldn't be an
> easy thing to do, and they wouldn't be alarmed to see people running
> software that did this kind of thing.
>
> [1] https://github.com/vbuterin/pybitcointools/blob/master/pybitcointools/main.py#L173

Consider that I see your public key <a_pub> before I create and send you
my public key <b_pub>.

I create a new keypair, <c_pub> with <c_priv> which I know (it can be
any arbitrary key pair).  But I don't give you <c_pub>, I give you 
<b_pub> = <c_pub> minus <a_pub> (which I can do because I've seen
<a_pub> before doing this). 

Sure, I don't know the private key for <b_pub>, but it doesn't matter...
because what

<b_pub> + <a_pub> = <c_pub> (mine)

You have no way to detect this condition, because you don't know what
c_pub/c_priv I created, so you can only detect this after it's too late
(after I abuse the private key)

-Alan
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140308/7cfbe3a0/attachment.html>

From ed at realitykeys.com  Sat Mar  8 08:51:37 2014
From: ed at realitykeys.com (Edmund Edgar)
Date: Sat, 8 Mar 2014 17:51:37 +0900
Subject: [Bitcoin-development] Is this a safe thing to be doing with ECC
 addition? (Oracle protocol)
In-Reply-To: <531AD080.40501@gmail.com>
References: <CA+su7OUMgeWgkMFAmmMEpW3eN=cvU47MKt51idDrmCWEiCb+VQ@mail.gmail.com>
	<531AD080.40501@gmail.com>
Message-ID: <CA+su7OWx9jrgUJrOH=tg1968vr1G1w7yXjgaRSyYJ0zRBjwpqg@mail.gmail.com>

On 8 March 2014 17:10, Alan Reiner <etotheipi at gmail.com> wrote:


> I create a new keypair, <c_pub> with <c_priv> which I know (it can be any
> arbitrary key pair).  But I don't give you <c_pub>, I give you  <b_pub> =
> <c_pub> minus <a_pub> (which I can do because I've seen <a_pub> before
> doing this).
>
> Sure, I don't know the private key for <b_pub>, but it doesn't matter...
> because what
>
> <b_pub> + <a_pub> = <c_pub> (mine)
>
> You have no way to detect this condition, because you don't know what
> c_pub/c_priv I created, so you can only detect this after it's too late
> (after I abuse the private key)
>

Thanks Alan and Forrest, that makes sense. So to salvage the situation in
the original case, we have to make sure the parties exchange their public
keys first, before they're allowed to see the public keys they'll be
combining them with.

-- 
-- 
Edmund Edgar
Founder, Social Minds Inc (KK)
Twitter: @edmundedgar
Linked In: edmundedgar
Skype: edmundedgar
http://www.socialminds.jp

Reality Keys
@realitykeys
ed at realitykeys.com
https://www.realitykeys.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140308/ef8e3571/attachment.html>

From jan at uos.de  Sat Mar  8 08:52:42 2014
From: jan at uos.de (Jan Vornberger)
Date: Sat, 8 Mar 2014 09:52:42 +0100
Subject: [Bitcoin-development] Instant / contactless payments
In-Reply-To: <CALDj+BZE1KtMGpMH3UHtxjN2vXxu39o_hAWPdg==KLsWpe1zqA@mail.gmail.com>
References: <CANEZrP3w9c_UX3dd+7LdWNXCEwjnAG+bYWxqKYo_fzakWQu=Bg@mail.gmail.com>
	<CALDj+BZE1KtMGpMH3UHtxjN2vXxu39o_hAWPdg==KLsWpe1zqA@mail.gmail.com>
Message-ID: <20140308085242.GA5727@odo.localdomain>

On Thu, Mar 06, 2014 at 02:39:52PM +0000, Alex Kotenko wrote:
> Not sure if you've seen it, but here is how we do NFC right now
> http://www.youtube.com/watch?v=DGOMIG9JUY8 with XBTerminal.

Very interesting, thanks for sharing! Are the two devices on the same
wifi network in the demo? In my experience transaction propagation
through the Bitcoin network takes a couple of seconds longer on average,
so I'm surprised it's that fast here.

You probably share this view, but I just wanted to repeat, that from my
experiments, I think that sending the transaction only over the Bitcoin
network should be a rarely-used fallback. It usually takes a little
longer than you would like for a POS solution and every so often you
don't get the transaction at all until the next block. And then what do
you do? Maybe you would need to ask the customer to pay again, to get
things done now, and put the previous transaction in some kind of refund
mode, where - when you finally get it - you send it back somewhere. But
it's really a problematic corner case - but yet it will happen
occasionally with network-only propagation.

In the context of this discussion, I would also like to share a video of
a prototype system:

  https://www.youtube.com/watch?v=mguRpvf3aMc

Here shown is the (currently no longer working) Bridgewalker client, but
it is also fully compatible with Andreas' wallet. The client picks up
the payment details via NFC (as a Bitcoin URI - could and should be
updated to use payment protocol) and transmits a copy of the transaction
via Bluetooth (using the simple convention first implemented by
Andreas). One optimization I did in the Bridgewalker client is, that it
already opens the Bluetooth connection when presenting the user with the
confirmation dialog. This results in a little additional speed-up, as
the connection is already "warmed up", when the user confirms. All code
of this prototype is open source, as is the Bridgewalker client.

>From my testing, I can say that NFC for getting the payment details +
Bluetooth for transmitting the transaction back works well. I'm a bit
skeptical about using NFC also for the back-channel, but maybe for cases
where there is no additional user confirmation it could work.

One problem with Bluetooth I see is, that it seems to be mostly turned
off by users and many seem to perceive it as "insecure", to have it
active, as a result of earlier Bluetooth hacks. So I'm not sure if that
will turn out to be a problem for usability when rolled-out in practice.



From joel.kaartinen at gmail.com  Sat Mar  8 10:37:30 2014
From: joel.kaartinen at gmail.com (Joel Kaartinen)
Date: Sat, 08 Mar 2014 12:37:30 +0200
Subject: [Bitcoin-development] Is this a safe thing to be doing with ECC
 addition? (Oracle protocol)
In-Reply-To: <CA+su7OWx9jrgUJrOH=tg1968vr1G1w7yXjgaRSyYJ0zRBjwpqg@mail.gmail.com>
References: <CA+su7OUMgeWgkMFAmmMEpW3eN=cvU47MKt51idDrmCWEiCb+VQ@mail.gmail.com>
	<531AD080.40501@gmail.com>
	<CA+su7OWx9jrgUJrOH=tg1968vr1G1w7yXjgaRSyYJ0zRBjwpqg@mail.gmail.com>
Message-ID: <531AF2EA.50904@gmail.com>

If both parties insist on seeing a hash of the other party's public key
before they'll show their own public key, they can be sure that the
public key is not chosen based on the public key they themselves presented.

Although, I have to wonder, why not just use multisig?

- Joel

On 08.03.2014 10:51, Edmund Edgar wrote:
> On 8 March 2014 17:10, Alan Reiner <etotheipi at gmail.com
> <mailto:etotheipi at gmail.com>> wrote:
>  
>
>     I create a new keypair, <c_pub> with <c_priv> which I know (it can
>     be any arbitrary key pair).  But I don't give you <c_pub>, I give
>     you  <b_pub> = <c_pub> minus <a_pub> (which I can do because I've
>     seen <a_pub> before doing this). 
>
>     Sure, I don't know the private key for <b_pub>, but it doesn't
>     matter... because what
>
>     <b_pub> + <a_pub> = <c_pub> (mine)
>
>     You have no way to detect this condition, because you don't know
>     what c_pub/c_priv I created, so you can only detect this after
>     it's too late (after I abuse the private key)
>
>
> Thanks Alan and Forrest, that makes sense. So to salvage the situation
> in the original case, we have to make sure the parties exchange their
> public keys first, before they're allowed to see the public keys
> they'll be combining them with. 
>
> -- 
> -- 
> Edmund Edgar
> Founder, Social Minds Inc (KK)
> Twitter: @edmundedgar
> Linked In: edmundedgar
> Skype: edmundedgar
> http://www.socialminds.jp
>
> Reality Keys
> @realitykeys
> ed at realitykeys.com <mailto:ed at realitykeys.com>
> https://www.realitykeys.com
>
>
> ------------------------------------------------------------------------------
> Subversion Kills Productivity. Get off Subversion & Make the Move to Perforce.
> With Perforce, you get hassle-free workflows. Merge that actually works. 
> Faster operations. Version large binaries.  Built-in WAN optimization and the
> freedom to use Git, Perforce or both. Make the move to Perforce.
> http://pubads.g.doubleclick.net/gampad/clk?id=122218951&iu=/4140/ostg.clktrk
>
>
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140308/a1e71327/attachment.html>

From adam at cypherspace.org  Sat Mar  8 17:41:01 2014
From: adam at cypherspace.org (Adam Back)
Date: Sat, 8 Mar 2014 09:41:01 -0800
Subject: [Bitcoin-development] Is this a safe thing to be doing with ECC
 addition? (Oracle protocol)
In-Reply-To: <531AF2EA.50904@gmail.com>
References: <CA+su7OUMgeWgkMFAmmMEpW3eN=cvU47MKt51idDrmCWEiCb+VQ@mail.gmail.com>
	<531AD080.40501@gmail.com>
	<CA+su7OWx9jrgUJrOH=tg1968vr1G1w7yXjgaRSyYJ0zRBjwpqg@mail.gmail.com>
	<531AF2EA.50904@gmail.com>
Message-ID: <20140308174101.GA21902@netbook.cypherspace.org>

Also the other limitation for ECDSA is that there is no known protocol to
create a signture with a+b (where keys P=aG, Q=bG, R=P+Q=(a+b)G). without
either a sending its private key to b or viceversa (or both to a third
party).

With Schnorr sigs you can do it, but the k^-1 term in ECDSA makes a (secure)
direct multiparty signature quite difficult.

ps probably only 1 party needs to hash their key

P=aG      
            H(P) ->

		<- Q=bG

	   P ->

Adam

On Sat, Mar 08, 2014 at 12:37:30PM +0200, Joel Kaartinen wrote:
>   If both parties insist on seeing a hash of the other party's public key
>   before they'll show their own public key, they can be sure that the
>   public key is not chosen based on the public key they themselves
>   presented.



From natanael.l at gmail.com  Sat Mar  8 18:15:47 2014
From: natanael.l at gmail.com (Natanael)
Date: Sat, 8 Mar 2014 19:15:47 +0100
Subject: [Bitcoin-development] Is this a safe thing to be doing with ECC
 addition? (Oracle protocol)
In-Reply-To: <20140308174101.GA21902@netbook.cypherspace.org>
References: <CA+su7OUMgeWgkMFAmmMEpW3eN=cvU47MKt51idDrmCWEiCb+VQ@mail.gmail.com>
	<531AD080.40501@gmail.com>
	<CA+su7OWx9jrgUJrOH=tg1968vr1G1w7yXjgaRSyYJ0zRBjwpqg@mail.gmail.com>
	<531AF2EA.50904@gmail.com>
	<20140308174101.GA21902@netbook.cypherspace.org>
Message-ID: <CAAt2M18Jcfo8nFBM+PppkWhmWhF4bd3fpRL2--=jZw4We1-kPw@mail.gmail.com>

You can always use a secure multiparty computation algorithm to do it.

https://en.wikipedia.org/wiki/Secure_multi-party_computation

But those aren't the fastest algorithms in the world, and usually both
participants needs to be online at the same time. I guess most people would
prefer a two-step algorithm that can be performed asynchronously.

- Sent from my phone
Den 8 mar 2014 18:44 skrev "Adam Back" <adam at cypherspace.org>:

> Also the other limitation for ECDSA is that there is no known protocol to
> create a signture with a+b (where keys P=aG, Q=bG, R=P+Q=(a+b)G). without
> either a sending its private key to b or viceversa (or both to a third
> party).
>
> With Schnorr sigs you can do it, but the k^-1 term in ECDSA makes a
> (secure)
> direct multiparty signature quite difficult.
>
> ps probably only 1 party needs to hash their key
>
> P=aG
>             H(P) ->
>
>                 <- Q=bG
>
>            P ->
>
> Adam
>
> On Sat, Mar 08, 2014 at 12:37:30PM +0200, Joel Kaartinen wrote:
> >   If both parties insist on seeing a hash of the other party's public key
> >   before they'll show their own public key, they can be sure that the
> >   public key is not chosen based on the public key they themselves
> >   presented.
>
>
> ------------------------------------------------------------------------------
> Subversion Kills Productivity. Get off Subversion & Make the Move to
> Perforce.
> With Perforce, you get hassle-free workflows. Merge that actually works.
> Faster operations. Version large binaries.  Built-in WAN optimization and
> the
> freedom to use Git, Perforce or both. Make the move to Perforce.
>
> http://pubads.g.doubleclick.net/gampad/clk?id=122218951&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140308/7bff5314/attachment.html>

From andreas at schildbach.de  Sat Mar  8 19:08:32 2014
From: andreas at schildbach.de (Andreas Schildbach)
Date: Sat, 08 Mar 2014 20:08:32 +0100
Subject: [Bitcoin-development] New IRC name: aschildbach
Message-ID: <lffpr2$v0r$1@ger.gmane.org>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

I just renamed myself on IRC (freenode) to aschildbach. The old name
was Goonie. I will most likely only use the new name from now on, at
least for Bitcoin-related purposes (-:
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.14 (GNU/Linux)

iEYEARECAAYFAlMbarAACgkQymYr4YuHemCjRwCgmjiod+yXeUg5Mtn83k9pXY9U
rfAAoMxBaNL0e+BuGSXWDCrAtb+77w69
=UhVB
-----END PGP SIGNATURE-----




From gustav.simonsson at gmail.com  Sat Mar  8 19:29:15 2014
From: gustav.simonsson at gmail.com (Gustav Simonsson)
Date: Sat, 8 Mar 2014 20:29:15 +0100
Subject: [Bitcoin-development] New side channel attack that can recover
 Bitcoin keys
In-Reply-To: <CANEZrP1+=JY0RGEMvm9iL09L-tZAWqsSOOwFaroYUKkWumx+xg@mail.gmail.com>
References: <CANEZrP25N7W_MeZin_pyVQP5pC8bt5yqJzTXt_tN1P6kWb5i2w@mail.gmail.com>
	<0720C223-E9DD-4E76-AD6F-0308CA5B5289@gmail.com>
	<CAAS2fgTGDzPFDP=ii08VXcXYpWr2akYWxqJCNHW-ABuN=ESc8A@mail.gmail.com>
	<7E50E1D6-3A9F-419B-B01E-50C6DE044E0F@gmail.com>
	<CAAS2fgScLKgq8_V0oVpvP1gYAKxiyVNGVWA86XfecSmPqsMKUg@mail.gmail.com>
	<CANEZrP1+=JY0RGEMvm9iL09L-tZAWqsSOOwFaroYUKkWumx+xg@mail.gmail.com>
Message-ID: <CANeYco-Zno1xAETTFoYA12K2TAqJN9u+ttEEuNgATjcLuUek+w@mail.gmail.com>

While there is no mention of virtualization in the side-channel article,
the FLUSH+RELOAD paper [1] mentions virtualization and claims the clflush
instruction works not only towards processes on the same OS, but also
against processes in a separate guest OS if executed on the host OS (type 2
hypervisor) [2]. It also works if executed from within another guest OS
(though that reduces the efficiency of the attack) [3].

Both the authors [4] and Vulnerability Note VU#976534 [5] claim disabling
hypervisor memory page de-duplication prevents the attack. This could
perhaps be a first step for bitcoin companies running their software on
shared hosts; demand their allocated instances to be on hosts with this
disabled. Question is how common it is for virtualization providers to
offer that as an option.

TRESOR is is only applicable if running in a non-virtualized OS [6].

While TRESOR only implements AES, it seems it could work for ECDSA as well,
as they use the four x86 debug registers to fit a 256 bit privkey [7] for
the entire machine uptime, and then use other registers when doing the
actual AES ops. They use the Intel AES-NI instruction set though, and since
there is no corresponding instruction set for EC extra work would be
required to manually implement EC math in assembler.

They actually do what Mike Hearn mentioned and disable preemption in Linux
(their code runs in kernel space; they patched the kernel) to ensure
atomicity. Not only do they manage to protect against memory attacks (and
RAM/cache timing attacks) from other processes running on the same host,
but even from root on the same host (from userland, the debug registers are
only accessible through ptrace, which they patched, and they also disabled
LKM & KMEM).

One could imagine different levels of TRESOR-like ECDSA with different
tradeoffs of complexity vs security. For example, if one is fine with
keeping the privkey(s) in RAM but want to avoid cache timing attacks, the
signing could be implemented as a userspace program holding key(s) in RAM
together with a kernel module providing a syscall for signing. Signing is
then run with preemption using only x86 registers for intermediate data and
then using e.g. movntps [8] to write to RAM without data being cached. The
benefit of this compared with the full TRESOR approach is that it would not
require a patched kernel, only a kernel module. It would also be simpler to
implement compared to keeping the privkey in the debug registers for the
entire machine uptime, especially if multiple privkeys are used. It would
not protect against root though, since an adversary getting root could load
their own kernel module and read the registers.

To handle multiple keys (maybe as one-time-use) and get full TRESOR
benefits, one could perhaps (with the original TRESOR approach, i.e. with
patched kernel) store a BIP 0032 starting string / seed + counter in the
debug registers and have the atomic kernel code generate new keys and do
the signing.

Cheers,
Gustav Simonsson

1. http://eprint.iacr.org/2013/448.pdf
2. Page 1 of [1]
3. page 5 of [1]
4. page 8 (end of conclusions section) of [1]
5. http://www.kb.cert.org/vuls/id/976534
6. page 8, "3.2 Hardware compatibility",
https://www.usenix.org/legacy/event/sec11/tech/full_papers/Muller.pdf
7. page 3, "2.2 Key Management" of [6]
8. page 1041 of
http://www.intel.com/content/dam/www/public/us/en/documents/manuals/64-ia-32-architectures-software-developer-manual-325462.pdf



On Thu, Mar 6, 2014 at 9:38 AM, Mike Hearn <mike at plan99.net> wrote:

> I'm wondering about whether (don't laugh) moving signing into the kernel
> and then using the MTRRs to disable caching entirely for a small scratch
> region of memory would also work. You could then disable pre-emption and
> prevent anything on the same core from interrupting or timing the signing
> operation.
>
> However I suspect just making a hardened secp256k1 signer implementation
> in userspace would be of similar difficulty, in which case it  would
> naturally be preferable.
>
>
> On Wed, Mar 5, 2014 at 11:25 PM, Gregory Maxwell <gmaxwell at gmail.com>wrote:
>
>> On Wed, Mar 5, 2014 at 2:14 PM, Eric Lombrozo <elombrozo at gmail.com>
>> wrote:
>> > Everything you say is true.
>> >
>> > However, branchless does reduce the attack surface considerably - if
>> nothing else, it significantly ups the difficulty of an attack for a
>> relatively low cost in program complexity, and that might still make it
>> worth doing.
>>
>> Absolutely. I believe these things are worth doing.
>>
>> My comment on it being insufficient was only that "my signer is
>> branchless" doesn't make other defense measures (avoiding reuse,
>> multsig with multiple devices, not sharing hardware, etc.)
>> unimportant.
>>
>> > As for uniform memory access, if we avoided any kind of heap
>> allocation, wouldn't we avoid such issues?
>>
>> No. At a minimum to hide a memory timing side-channel you must perform
>> no data dependent loads (e.g. no operation where an offset into memory
>> is calculated). A strategy for this is to always load the same values,
>> but then mask out the ones you didn't intend to read... even that I'd
>> worry about on sufficiently advanced hardware, since I would very much
>> not be surprised if the processor was able to determine that the load
>> had no effect and eliminate it! :) )
>>
>> Maybe in practice if your data dependencies end up only picking around
>> in the same cache-line it doesn't actually matter... but it's hard to
>> be sure, and unclear when a future optimization in the rest of the
>> system might leave it exposed again.
>>
>> (In particular, you can't generally write timing sign-channel immune
>> code in C (or other high level language) because the compiler is
>> freely permitted to optimize things in a way that break the property.
>> ... It may be _unlikely_ for it to do this, but its permitted-- and
>> will actually do so in some cases--, so you cannot be completely sure
>> unless you check and freeze the toolchain)
>>
>> > Anyhow, without having gone into the full details of this particular
>> attack, it seems the main attack point is differences in how squaring and
>> multiplication (in the case of field exponentiation) or doubling and point
>> addition (in the case of ECDSA) are performed. I believe using a branchless
>> implementation where each phase of the operation executes the exact same
>> code and accesses the exact same stack frames would not be vulnerable to
>> FLUSH+RELOAD.
>>
>> I wouldn't be surprised.
>>
>>
>> ------------------------------------------------------------------------------
>> Subversion Kills Productivity. Get off Subversion & Make the Move to
>> Perforce.
>> With Perforce, you get hassle-free workflows. Merge that actually works.
>> Faster operations. Version large binaries.  Built-in WAN optimization and
>> the
>> freedom to use Git, Perforce or both. Make the move to Perforce.
>>
>> http://pubads.g.doubleclick.net/gampad/clk?id=122218951&iu=/4140/ostg.clktrk
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>
>
>
>
> ------------------------------------------------------------------------------
> Subversion Kills Productivity. Get off Subversion & Make the Move to
> Perforce.
> With Perforce, you get hassle-free workflows. Merge that actually works.
> Faster operations. Version large binaries.  Built-in WAN optimization and
> the
> freedom to use Git, Perforce or both. Make the move to Perforce.
>
> http://pubads.g.doubleclick.net/gampad/clk?id=122218951&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140308/71b3ea80/attachment.html>

From luke at dashjr.org  Sat Mar  8 19:34:10 2014
From: luke at dashjr.org (Luke-Jr)
Date: Sat, 8 Mar 2014 19:34:10 +0000
Subject: [Bitcoin-development] New side channel attack that can recover
	Bitcoin keys
In-Reply-To: <53174F20.10207@gmail.com>
References: <CANEZrP25N7W_MeZin_pyVQP5pC8bt5yqJzTXt_tN1P6kWb5i2w@mail.gmail.com>
	<53174F20.10207@gmail.com>
Message-ID: <201403081934.12035.luke@dashjr.org>

On Wednesday, March 05, 2014 4:21:52 PM Kevin wrote:
> How can we patch this issue?

No need, it is not an issue for Bitcoin.

Properly used, there is only ever one signature per public key.

Luke



From etotheipi at gmail.com  Sat Mar  8 20:30:19 2014
From: etotheipi at gmail.com (Alan Reiner)
Date: Sat, 08 Mar 2014 15:30:19 -0500
Subject: [Bitcoin-development] Is this a safe thing to be doing with ECC
 addition? (Oracle protocol)
In-Reply-To: <CA+su7OWx9jrgUJrOH=tg1968vr1G1w7yXjgaRSyYJ0zRBjwpqg@mail.gmail.com>
References: <CA+su7OUMgeWgkMFAmmMEpW3eN=cvU47MKt51idDrmCWEiCb+VQ@mail.gmail.com>	<531AD080.40501@gmail.com>
	<CA+su7OWx9jrgUJrOH=tg1968vr1G1w7yXjgaRSyYJ0zRBjwpqg@mail.gmail.com>
Message-ID: <531B7DDB.30507@gmail.com>

Note that one of the reasons why this is insecure is because EC point
addition is invertible.  EC-scalar multiplication is not, thus why EC
Diffie-Hellman is secure even when this timing asymmetry exists.

A good cryptosystem doesn't have strange restrictions, like "your public
key can only be public sometimes, but needs to protected like your
private key other times."  If you have to worry about things like that,
you're doing it wrong :)  And why we always recommend sticking to
well-known, well-studied operations.

-Alan


On 03/08/2014 03:51 AM, Edmund Edgar wrote:
> On 8 March 2014 17:10, Alan Reiner <etotheipi at gmail.com
> <mailto:etotheipi at gmail.com>> wrote:
>  
>
>     I create a new keypair, <c_pub> with <c_priv> which I know (it can
>     be any arbitrary key pair).  But I don't give you <c_pub>, I give
>     you  <b_pub> = <c_pub> minus <a_pub> (which I can do because I've
>     seen <a_pub> before doing this). 
>
>     Sure, I don't know the private key for <b_pub>, but it doesn't
>     matter... because what
>
>     <b_pub> + <a_pub> = <c_pub> (mine)
>
>     You have no way to detect this condition, because you don't know
>     what c_pub/c_priv I created, so you can only detect this after
>     it's too late (after I abuse the private key)
>
>
> Thanks Alan and Forrest, that makes sense. So to salvage the situation
> in the original case, we have to make sure the parties exchange their
> public keys first, before they're allowed to see the public keys
> they'll be combining them with. 
>
> -- 
> -- 
> Edmund Edgar
> Founder, Social Minds Inc (KK)
> Twitter: @edmundedgar
> Linked In: edmundedgar
> Skype: edmundedgar
> http://www.socialminds.jp
>
> Reality Keys
> @realitykeys
> ed at realitykeys.com <mailto:ed at realitykeys.com>
> https://www.realitykeys.com
>
>
> ------------------------------------------------------------------------------
> Subversion Kills Productivity. Get off Subversion & Make the Move to Perforce.
> With Perforce, you get hassle-free workflows. Merge that actually works. 
> Faster operations. Version large binaries.  Built-in WAN optimization and the
> freedom to use Git, Perforce or both. Make the move to Perforce.
> http://pubads.g.doubleclick.net/gampad/clk?id=122218951&iu=/4140/ostg.clktrk
>
>
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140308/5fcca4b8/attachment.html>

From tom at tomgeller.com  Sat Mar  8 20:59:49 2014
From: tom at tomgeller.com (Tom Geller)
Date: Sat, 8 Mar 2014 15:59:49 -0500
Subject: [Bitcoin-development] Bitcoin wiki is down
Message-ID: <02674AC7-3229-4A23-90A8-7858098B6D06@tomgeller.com>

Just an FYI: The Bitcoin wiki (https://en.bitcoin.it) is down.

Is there a communication procedure or point person for such things?

---
          Tom Geller  *  Oberlin, Ohio  *  415-317-1805
           Writer/Presenter * http://www.tomgeller.com
         articles, marketing, videos, user guides, books








From etotheipi at gmail.com  Sat Mar  8 23:13:10 2014
From: etotheipi at gmail.com (Alan Reiner)
Date: Sat, 08 Mar 2014 18:13:10 -0500
Subject: [Bitcoin-development] Is this a safe thing to be doing with ECC
 addition? (Oracle protocol)
In-Reply-To: <531AF2EA.50904@gmail.com>
References: <CA+su7OUMgeWgkMFAmmMEpW3eN=cvU47MKt51idDrmCWEiCb+VQ@mail.gmail.com>	<531AD080.40501@gmail.com>	<CA+su7OWx9jrgUJrOH=tg1968vr1G1w7yXjgaRSyYJ0zRBjwpqg@mail.gmail.com>
	<531AF2EA.50904@gmail.com>
Message-ID: <531BA406.4070900@gmail.com>

Note that one of the reasons why this is insecure is because EC point
addition is invertible.  EC-scalar multiplication is not, thus why EC
Diffie-Hellman is secure even when this asymmetry exists.

A good cryptosystem doesn't have strange restrictions, like "your public
key can only be public sometimes, but needs to protected like your
private key other times."  If you have to worry about things like that,
you're doing it wrong :)

-Alan


On 03/08/2014 05:37 AM, Joel Kaartinen wrote:
> If both parties insist on seeing a hash of the other party's public
> key before they'll show their own public key, they can be sure that
> the public key is not chosen based on the public key they themselves
> presented.
>
> Although, I have to wonder, why not just use multisig?
>
> - Joel
>
> On 08.03.2014 10:51, Edmund Edgar wrote:
>> On 8 March 2014 17:10, Alan Reiner <etotheipi at gmail.com
>> <mailto:etotheipi at gmail.com>> wrote:
>>  
>>
>>     I create a new keypair, <c_pub> with <c_priv> which I know (it
>>     can be any arbitrary key pair).  But I don't give you <c_pub>, I
>>     give you  <b_pub> = <c_pub> minus <a_pub> (which I can do because
>>     I've seen <a_pub> before doing this). 
>>
>>     Sure, I don't know the private key for <b_pub>, but it doesn't
>>     matter... because what
>>
>>     <b_pub> + <a_pub> = <c_pub> (mine)
>>
>>     You have no way to detect this condition, because you don't know
>>     what c_pub/c_priv I created, so you can only detect this after
>>     it's too late (after I abuse the private key)
>>
>>
>> Thanks Alan and Forrest, that makes sense. So to salvage the
>> situation in the original case, we have to make sure the parties
>> exchange their public keys first, before they're allowed to see the
>> public keys they'll be combining them with. 
>>
>> -- 
>> -- 
>> Edmund Edgar
>> Founder, Social Minds Inc (KK)
>> Twitter: @edmundedgar
>> Linked In: edmundedgar
>> Skype: edmundedgar
>> http://www.socialminds.jp
>>
>> Reality Keys
>> @realitykeys
>> ed at realitykeys.com <mailto:ed at realitykeys.com>
>> https://www.realitykeys.com
>>
>>
>> ------------------------------------------------------------------------------
>> Subversion Kills Productivity. Get off Subversion & Make the Move to Perforce.
>> With Perforce, you get hassle-free workflows. Merge that actually works. 
>> Faster operations. Version large binaries.  Built-in WAN optimization and the
>> freedom to use Git, Perforce or both. Make the move to Perforce.
>> http://pubads.g.doubleclick.net/gampad/clk?id=122218951&iu=/4140/ostg.clktrk
>>
>>
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
>
> ------------------------------------------------------------------------------
> Subversion Kills Productivity. Get off Subversion & Make the Move to Perforce.
> With Perforce, you get hassle-free workflows. Merge that actually works. 
> Faster operations. Version large binaries.  Built-in WAN optimization and the
> freedom to use Git, Perforce or both. Make the move to Perforce.
> http://pubads.g.doubleclick.net/gampad/clk?id=122218951&iu=/4140/ostg.clktrk
>
>
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140308/eb6e7e08/attachment.html>

From gmaxwell at gmail.com  Sat Mar  8 23:13:33 2014
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Sat, 8 Mar 2014 15:13:33 -0800
Subject: [Bitcoin-development] Bitcoin wiki is down
In-Reply-To: <02674AC7-3229-4A23-90A8-7858098B6D06@tomgeller.com>
References: <02674AC7-3229-4A23-90A8-7858098B6D06@tomgeller.com>
Message-ID: <CAAS2fgSWb1N9NMS9fSOyap1phjAh0JebpfPT15rCOWV51FPrtw@mail.gmail.com>

On Sat, Mar 8, 2014 at 12:59 PM, Tom Geller <tom at tomgeller.com> wrote:
> Just an FYI: The Bitcoin wiki (https://en.bitcoin.it) is down.
>
> Is there a communication procedure or point person for such things?

This works.  The wiki is in the process of changing control/operation.
Nothing to fear.



From gmaxwell at gmail.com  Sun Mar  9 01:57:46 2014
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Sat, 8 Mar 2014 17:57:46 -0800
Subject: [Bitcoin-development] New side channel attack that can recover
 Bitcoin keys
In-Reply-To: <201403081934.12035.luke@dashjr.org>
References: <CANEZrP25N7W_MeZin_pyVQP5pC8bt5yqJzTXt_tN1P6kWb5i2w@mail.gmail.com>
	<53174F20.10207@gmail.com> <201403081934.12035.luke@dashjr.org>
Message-ID: <CAAS2fgTAwsXBZ-guU32KC4RL0ZKwmqW-TqqDS=qswSb88mgRMA@mail.gmail.com>

On Sat, Mar 8, 2014 at 11:34 AM, Luke-Jr <luke at dashjr.org> wrote:
> On Wednesday, March 05, 2014 4:21:52 PM Kevin wrote:
>> How can we patch this issue?
> No need, it is not an issue for Bitcoin.
> Properly used, there is only ever one signature per public key.

Security shouldn't depend on perfect use.  There are many things that
result in multiple key use: Bitcoin address authentication (something
which the pool you created uses!), someone spamming you with multiple
payments to a common address which you didn't solicit (what, are you
just going to ignore the extra coins?), ... or just practical
considerations? I note the mining pool you founded continually pays a
single address for 'fall back' payments when it can't pay in the
coinbase transact, I know you consider that a bug, but its the reality
today.

Most security issues aren't the result of one problem but several
problems combined, so it's important to make each layer strong even if
the strength shouldn't be important due to proper use in other layers.

Fortunately, libsecp256k1 has a nearly constant time/constant memory
access multiply for signing which should reduce exposure substantially
(and is generally built in a way that reduces vulnerabilities).



From alexykot at gmail.com  Mon Mar 10 15:09:00 2014
From: alexykot at gmail.com (Alex Kotenko)
Date: Mon, 10 Mar 2014 15:09:00 +0000
Subject: [Bitcoin-development] Instant / contactless payments
In-Reply-To: <20140308085242.GA5727@odo.localdomain>
References: <CANEZrP3w9c_UX3dd+7LdWNXCEwjnAG+bYWxqKYo_fzakWQu=Bg@mail.gmail.com>
	<CALDj+BZE1KtMGpMH3UHtxjN2vXxu39o_hAWPdg==KLsWpe1zqA@mail.gmail.com>
	<20140308085242.GA5727@odo.localdomain>
Message-ID: <CALDj+BYoYy8LWTgguj7FnrGMHuA5hgFdcFenBTdcxMuOwJ+tdA@mail.gmail.com>

2014-03-08 8:52 GMT+00:00 Jan Vornberger <jan at uos.de>:
??

> On Thu, Mar 06, 2014 at 02:39:52PM +0000, Alex Kotenko wrote:
> > Not sure if you've seen it, but here is how we do NFC right now
> > http://www.youtube.com/watch?v=DGOMIG9JUY8 with XBTerminal.
>
> Very interesting, thanks for sharing! Are the two devices on the same
> wifi network in the demo? In my experience transaction propagation
> through the Bitcoin network takes a couple of seconds longer on average,
> so I'm surprised it's that fast here.
>
No, devices on this video are not on the same network, and even if they
would - I cannot control what ??remote hosts my phone would connect to, so
transaction may anyway travel around the globe before coming to the POS
even if they would be on one LAN.
As for transaction times - I'd say it varies. ?From my extensive testing
most of transactions usually come through within 2-5 seconds, but roughly
one in ten transactions may take more time, sometimes much more time.


You probably share this view, but I just wanted to repeat, that from my
> experiments, I think that sending the transaction only over the Bitcoin
> network should be a rarely-used fallback. It usually takes a little
> longer than you would like for a POS solution and every so often you
> don't get the transaction at all until the next block. And then what do
> you do? Maybe you would need to ask the customer to pay again, to get
> things done now, and put the previous transaction in some kind of refund
> mode, where - when you finally get it - you send it back somewhere. But
> it's really a problematic corner case - but yet it will happen
> occasionally with network-only propagation.
>
?Yes, ?I'm certain about that we need to switch to BIP70 asap. As I said
earlier - support among the wallets is the biggest problem here really.
Only Andreas' Wallet supports it right now AFAIK, and even in there it's
only as "LABS feature", so will be turned off for most of users.


In the context of this discussion, I would also like to share a video of
> a prototype system:
>
>   https://www.youtube.com/watch?v=mguRpvf3aMc
>
> Here shown is the (currently no longer working) Bridgewalker client, but
> it is also fully compatible with Andreas' wallet. The client picks up
> the payment details via NFC (as a Bitcoin URI - could and should be
> updated to use payment protocol) and transmits a copy of the transaction
> via Bluetooth (using the simple convention first implemented by
> Andreas). One optimization I did in the Bridgewalker client is, that it
> already opens the Bluetooth connection when presenting the user with the
> confirmation dialog. This results in a little additional speed-up, as
> the connection is already "warmed up", when the user confirms. All code
> of this prototype is open source, as is the Bridgewalker client.
>
Yes, I've seen this demonstration, I think it was on reddit about two
month?? ago. Looks interesting, but by that time most of my client software
was already done, so I couldn't really use this.



> >From my testing, I can say that NFC for getting the payment details +
> Bluetooth for transmitting the transaction back works well. I'm a bit
> skeptical about using NFC also for the back-channel, but maybe for cases
> where there is no additional user confirmation it could work.

?NFC
?as ?
back channel
?definitely ?
will not work
?. Mike proposed something ?like a threshold to define minimal amount
available for spending without confirmation, but I don't see this thing
becoming widely used any time soon, and before that we will need to have
"confirm" button tap.


One problem with Bluetooth I see is, that it seems to be mostly turned
> off by users and many seem to perceive it as "insecure", to have it
> active, as a result of earlier Bluetooth hacks. So I'm not sure if that
> will turn out to be a problem for usability when rolled-out in practice.
>
Yes, this is a problem, I think bluetooth is offline on many devices, and
keeping it on all the time will harm security (if not real security, then
at least perceived by users) and also harm battery life, which will be seen
as huge problem by the users.
?Would be great to be ?able to control BT state automatically from within
the wallet app with user permission given once on installation time, but
not sure if it's possible in Android.



>
> ------------------------------------------------------------------------------
> Subversion Kills Productivity. Get off Subversion & Make the Move to
> Perforce.
> With Perforce, you get hassle-free workflows. Merge that actually works.
> Faster operations. Version large binaries.  Built-in WAN optimization and
> the
> freedom to use Git, Perforce or both. Make the move to Perforce.
>
> http://pubads.g.doubleclick.net/gampad/clk?id=122218951&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140310/3d2ced81/attachment.html>

From mike at plan99.net  Mon Mar 10 16:04:02 2014
From: mike at plan99.net (Mike Hearn)
Date: Mon, 10 Mar 2014 17:04:02 +0100
Subject: [Bitcoin-development] Instant / contactless payments
In-Reply-To: <CANEZrP3w9c_UX3dd+7LdWNXCEwjnAG+bYWxqKYo_fzakWQu=Bg@mail.gmail.com>
References: <CANEZrP3w9c_UX3dd+7LdWNXCEwjnAG+bYWxqKYo_fzakWQu=Bg@mail.gmail.com>
Message-ID: <CANEZrP11WDsQD4KFfd8Fi4zfXKRM9vVZkZ-oznMJvjY=5=A31A@mail.gmail.com>

>
> I just did my first contactless nfc payment with a MasterCard. It worked
> very well and was quite delightful - definitely want to be doing more of
> these in future.
>

A bit more competitive intelligence - turns out that the experience isn't
quite so good after all. After trying a few more times to use contactless
payments, I found it has a ~75% failure rate based on my usage.

By far the biggest problem is also the most predictable - it's very common
here for merchants to require minimum payment sizes before they'll accept
credit cards, often quite high, like 20 CHF or more. But the PIN-less mode
only works for payments below a certain threshold, I haven't quite figured
out what it is yet, but in the UK it's 20 GBP so maybe it's about 30 CHF.
So there turns out to be an incredibly thin price range in which the simple
touch-to-pay system actually works. Most of the time, either they:

a) Reject cards entirely because the payment is too small
b) Don't have the right hardware, or the hardware just mysteriously fails
to work.
c) Require a PIN because the payment is too large

I'm sure Bitcoin can do better than this.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140310/50aa9765/attachment.html>

From jeanpaulkogelman at me.com  Mon Mar 10 16:14:10 2014
From: jeanpaulkogelman at me.com (Jean-Paul Kogelman)
Date: Mon, 10 Mar 2014 09:14:10 -0700
Subject: [Bitcoin-development] Instant / contactless payments
In-Reply-To: <CANEZrP11WDsQD4KFfd8Fi4zfXKRM9vVZkZ-oznMJvjY=5=A31A@mail.gmail.com>
References: <CANEZrP3w9c_UX3dd+7LdWNXCEwjnAG+bYWxqKYo_fzakWQu=Bg@mail.gmail.com>
	<CANEZrP11WDsQD4KFfd8Fi4zfXKRM9vVZkZ-oznMJvjY=5=A31A@mail.gmail.com>
Message-ID: <EFDD07B8-F2C3-4676-B038-469E7BC08802@me.com>


Just to add some more numbers, in Canada, the maximum is $50 and I've used it for transactions of $5, even less.

I use it every day to pay for breakfast and it works through my wallet, even with multiple NFC enabled cards in there (though not overlapping). The experience is quite smooth; simply tap my wallet on the POS and a few seconds later it's approved.

jp

On Mar 10, 2014, at 9:04 AM, Mike Hearn <mike at plan99.net> wrote:

>> I just did my first contactless nfc payment with a MasterCard. It worked very well and was quite delightful - definitely want to be doing more of these in future.
> 
> A bit more competitive intelligence - turns out that the experience isn't quite so good after all. After trying a few more times to use contactless payments, I found it has a ~75% failure rate based on my usage.
> 
> By far the biggest problem is also the most predictable - it's very common here for merchants to require minimum payment sizes before they'll accept credit cards, often quite high, like 20 CHF or more. But the PIN-less mode only works for payments below a certain threshold, I haven't quite figured out what it is yet, but in the UK it's 20 GBP so maybe it's about 30 CHF. So there turns out to be an incredibly thin price range in which the simple touch-to-pay system actually works. Most of the time, either they:
> 
> a) Reject cards entirely because the payment is too small
> b) Don't have the right hardware, or the hardware just mysteriously fails to work.
> c) Require a PIN because the payment is too large
> 
> I'm sure Bitcoin can do better than this.
> 
> ------------------------------------------------------------------------------
> Learn Graph Databases - Download FREE O'Reilly Book
> "Graph Databases" is the definitive new guide to graph databases and their
> applications. Written by three acclaimed leaders in the field,
> this first edition is now available. Download your free book today!
> http://p.sf.net/sfu/13534_NeoTech
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140310/936d80e9/attachment.html>

From alexykot at gmail.com  Mon Mar 10 16:27:12 2014
From: alexykot at gmail.com (Alex Kotenko)
Date: Mon, 10 Mar 2014 16:27:12 +0000
Subject: [Bitcoin-development] Instant / contactless payments
In-Reply-To: <EFDD07B8-F2C3-4676-B038-469E7BC08802@me.com>
References: <CANEZrP3w9c_UX3dd+7LdWNXCEwjnAG+bYWxqKYo_fzakWQu=Bg@mail.gmail.com>
	<CANEZrP11WDsQD4KFfd8Fi4zfXKRM9vVZkZ-oznMJvjY=5=A31A@mail.gmail.com>
	<EFDD07B8-F2C3-4676-B038-469E7BC08802@me.com>
Message-ID: <CALDj+BbhydEyQUWu+qo=tcu6K10Tosb=rvXnZ+SPmPJRQXuAHQ@mail.gmail.com>

It heavily depends on where you use it. Here in UK any card payments are
often limited to minimum of ?5 in small shops that have heavy transaction
fees burden and low margins. Big networks with more resources often let you
pay as little as you want by card, and they more often have NFC enabled POS
devices.
So it's not an NFC or POS limit, but a business decision for these small
merchants. Bitcoin can address this issue for sure, but this doesn't
concern NFC.
??


2014-03-10 16:14 GMT+00:00 Jean-Paul Kogelman <jeanpaulkogelman at me.com>:

>
> Just to add some more numbers, in Canada, the maximum is $50 and I've used
> it for transactions of $5, even less.
>
> I use it every day to pay for breakfast and it works through my wallet,
> even with multiple NFC enabled cards in there (though not overlapping). The
> experience is quite smooth; simply tap my wallet on the POS and a few
> seconds later it's approved.
>
> jp
>
> On Mar 10, 2014, at 9:04 AM, Mike Hearn <mike at plan99.net> wrote:
>
> I just did my first contactless nfc payment with a MasterCard. It worked
>> very well and was quite delightful - definitely want to be doing more of
>> these in future.
>>
>
> A bit more competitive intelligence - turns out that the experience isn't
> quite so good after all. After trying a few more times to use contactless
> payments, I found it has a ~75% failure rate based on my usage.
>
> By far the biggest problem is also the most predictable - it's very common
> here for merchants to require minimum payment sizes before they'll accept
> credit cards, often quite high, like 20 CHF or more. But the PIN-less mode
> only works for payments below a certain threshold, I haven't quite figured
> out what it is yet, but in the UK it's 20 GBP so maybe it's about 30 CHF.
> So there turns out to be an incredibly thin price range in which the simple
> touch-to-pay system actually works. Most of the time, either they:
>
> a) Reject cards entirely because the payment is too small
> b) Don't have the right hardware, or the hardware just mysteriously fails
> to work.
> c) Require a PIN because the payment is too large
>
> I'm sure Bitcoin can do better than this.
>
>
> ------------------------------------------------------------------------------
> Learn Graph Databases - Download FREE O'Reilly Book
> "Graph Databases" is the definitive new guide to graph databases and their
> applications. Written by three acclaimed leaders in the field,
> this first edition is now available. Download your free book today!
> http://p.sf.net/sfu/13534_NeoTech
>
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
>
> ------------------------------------------------------------------------------
> Learn Graph Databases - Download FREE O'Reilly Book
> "Graph Databases" is the definitive new guide to graph databases and their
> applications. Written by three acclaimed leaders in the field,
> this first edition is now available. Download your free book today!
> http://p.sf.net/sfu/13534_NeoTech
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140310/049dfc3a/attachment.html>

From drak at zikula.org  Mon Mar 10 17:39:03 2014
From: drak at zikula.org (Drak)
Date: Mon, 10 Mar 2014 17:39:03 +0000
Subject: [Bitcoin-development] Multisign payment protocol?
Message-ID: <CANAnSg3Bt0e7CfUcJXe96xhU6nqif9ey_vurZMZkSa9OHjHStw@mail.gmail.com>

I was wondering if there would be merit in a kind of BIP for a payment
protocol using multisig?

Currently, setting up a multisig is quite a feat. Users have to exchange
public keys, work out how to get the public keys from their addresses. If
one of the parties are not savvy enough, an malicious party could easily be
setup that was 2 of 3 instead of 2 of 2 where the malicious party generates
the multisig address+script and thus be able to run off with funds anyway.

It's also terribly complex to generate and keep track of. There's been a
nice attempt at creating an browser interface at coinb.in/multisig but it
still lacks the kind of ease with created by the payment protocol. If there
was a BIP then it would go a long way to aiding future usability of
multisig wallet implementations.

What are your thoughts?

Drak
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140310/0b5ecd92/attachment.html>

From gavinandresen at gmail.com  Mon Mar 10 17:49:04 2014
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Mon, 10 Mar 2014 13:49:04 -0400
Subject: [Bitcoin-development] Multisign payment protocol?
In-Reply-To: <CANAnSg3Bt0e7CfUcJXe96xhU6nqif9ey_vurZMZkSa9OHjHStw@mail.gmail.com>
References: <CANAnSg3Bt0e7CfUcJXe96xhU6nqif9ey_vurZMZkSa9OHjHStw@mail.gmail.com>
Message-ID: <CABsx9T0SMi6Gp4JY=CpHxLEu5pVkvDmnug7PsY7m_dvtT7khzg@mail.gmail.com>

In my experience, best process for standardizing something is:

1) Somebody has a great idea
2) They implement it
3) Everybody agrees, "Great idea!" and they copy it.
4) Idea gets refined by the people copying it.
5) It gets standardized.

Mutisig wallets are at step 2 right now. BIP is step 5, in my humble
opinion...




On Mon, Mar 10, 2014 at 1:39 PM, Drak <drak at zikula.org> wrote:

> I was wondering if there would be merit in a kind of BIP for a payment
> protocol using multisig?
>
> Currently, setting up a multisig is quite a feat. Users have to exchange
> public keys, work out how to get the public keys from their addresses. If
> one of the parties are not savvy enough, an malicious party could easily be
> setup that was 2 of 3 instead of 2 of 2 where the malicious party generates
> the multisig address+script and thus be able to run off with funds anyway.
>
> It's also terribly complex to generate and keep track of. There's been a
> nice attempt at creating an browser interface at coinb.in/multisig but it
> still lacks the kind of ease with created by the payment protocol. If there
> was a BIP then it would go a long way to aiding future usability of
> multisig wallet implementations.
>
> What are your thoughts?
>
> Drak
>
>
> ------------------------------------------------------------------------------
> Learn Graph Databases - Download FREE O'Reilly Book
> "Graph Databases" is the definitive new guide to graph databases and their
> applications. Written by three acclaimed leaders in the field,
> this first edition is now available. Download your free book today!
> http://p.sf.net/sfu/13534_NeoTech
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>


-- 
--
Gavin Andresen
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140310/b72ac2aa/attachment.html>

From mike at plan99.net  Mon Mar 10 17:50:12 2014
From: mike at plan99.net (Mike Hearn)
Date: Mon, 10 Mar 2014 18:50:12 +0100
Subject: [Bitcoin-development] Multisign payment protocol?
In-Reply-To: <CANAnSg3Bt0e7CfUcJXe96xhU6nqif9ey_vurZMZkSa9OHjHStw@mail.gmail.com>
References: <CANAnSg3Bt0e7CfUcJXe96xhU6nqif9ey_vurZMZkSa9OHjHStw@mail.gmail.com>
Message-ID: <CANEZrP3Tg=WAnpfV4FSznk_x9JR0wT_z5dT6XZzpQY+yMaKpBw@mail.gmail.com>

No, this doesn't make any sense. Multisig outputs are a tool you use to
build helpful features, not a feature in and of themselves.

By all means create a nice protocol, implementation and BIP for something
like:

- Creation of multi-user money pools for managing an organisations funds
- Dispute mediated transactions
- Watchdog services that provide a third party risk analysis of transactions
- Micropayment channels (actually me and Matt already did this, sans BIP)

but trying to do just "multisig" won't work well.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140310/15a41f5c/attachment.html>

From etotheipi at gmail.com  Mon Mar 10 18:01:28 2014
From: etotheipi at gmail.com (Alan Reiner)
Date: Mon, 10 Mar 2014 14:01:28 -0400
Subject: [Bitcoin-development] Multisign payment protocol?
In-Reply-To: <CABsx9T0SMi6Gp4JY=CpHxLEu5pVkvDmnug7PsY7m_dvtT7khzg@mail.gmail.com>
References: <CANAnSg3Bt0e7CfUcJXe96xhU6nqif9ey_vurZMZkSa9OHjHStw@mail.gmail.com>
	<CABsx9T0SMi6Gp4JY=CpHxLEu5pVkvDmnug7PsY7m_dvtT7khzg@mail.gmail.com>
Message-ID: <531DFDF8.80008@gmail.com>

Then of course I tried to do this with BIP 10 
<https://github.com/bitcoin/bips/blob/master/bip-0010.mediawiki> when
Armory implemented offline-transactions two years ago.  I got some
positive feedback, but no one wanted to help improve it, etc.  I guess
nobody else was doing it and/or cared at the time.  So I continue to use
BIP 10 even though it's pretty crappy.  I wanted it to be useful for
multisig, too, but it has some deficiencies there (it was done when
Armory was extremely young and OP_EVAL was still on the table).

However, with all this activity, we should start thinking about that and
discussing it.  Otherwise, I'll just do my own thing again and probably
end up with something that fits my own needs, but not anyone else's. 
Really though, multisig shouldn't require all the same app to work.

-Alan


On 03/10/2014 01:49 PM, Gavin Andresen wrote:
> In my experience, best process for standardizing something is:
>
> 1) Somebody has a great idea
> 2) They implement it
> 3) Everybody agrees, "Great idea!" and they copy it.
> 4) Idea gets refined by the people copying it.
> 5) It gets standardized.
>
> Mutisig wallets are at step 2 right now. BIP is step 5, in my humble
> opinion...
>
>
>
>
> On Mon, Mar 10, 2014 at 1:39 PM, Drak <drak at zikula.org
> <mailto:drak at zikula.org>> wrote:
>
>     I was wondering if there would be merit in a kind of BIP for a
>     payment protocol using multisig?
>
>     Currently, setting up a multisig is quite a feat. Users have to
>     exchange public keys, work out how to get the public keys from
>     their addresses. If one of the parties are not savvy enough, an
>     malicious party could easily be setup that was 2 of 3 instead of 2
>     of 2 where the malicious party generates the multisig
>     address+script and thus be able to run off with funds anyway.
>
>     It's also terribly complex to generate and keep track of. There's
>     been a nice attempt at creating an browser interface at
>     coinb.in/multisig <http://coinb.in/multisig> but it still lacks
>     the kind of ease with created by the payment protocol. If there
>     was a BIP then it would go a long way to aiding future usability
>     of multisig wallet implementations.
>
>     What are your thoughts?
>
>     Drak
>
>     ------------------------------------------------------------------------------
>     Learn Graph Databases - Download FREE O'Reilly Book
>     "Graph Databases" is the definitive new guide to graph databases
>     and their
>     applications. Written by three acclaimed leaders in the field,
>     this first edition is now available. Download your free book today!
>     http://p.sf.net/sfu/13534_NeoTech
>     _______________________________________________
>     Bitcoin-development mailing list
>     Bitcoin-development at lists.sourceforge.net
>     <mailto:Bitcoin-development at lists.sourceforge.net>
>     https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
>
>
> -- 
> --
> Gavin Andresen
>
>
> ------------------------------------------------------------------------------
> Learn Graph Databases - Download FREE O'Reilly Book
> "Graph Databases" is the definitive new guide to graph databases and their
> applications. Written by three acclaimed leaders in the field,
> this first edition is now available. Download your free book today!
> http://p.sf.net/sfu/13534_NeoTech
>
>
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140310/2e157654/attachment.html>

From jgarzik at bitpay.com  Mon Mar 10 18:12:49 2014
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Mon, 10 Mar 2014 14:12:49 -0400
Subject: [Bitcoin-development] Multisign payment protocol?
In-Reply-To: <CANAnSg3Bt0e7CfUcJXe96xhU6nqif9ey_vurZMZkSa9OHjHStw@mail.gmail.com>
References: <CANAnSg3Bt0e7CfUcJXe96xhU6nqif9ey_vurZMZkSa9OHjHStw@mail.gmail.com>
Message-ID: <CAJHLa0PNW9FP7btMphLK+GxKo5u0Seiw5tbV_dT6ghg9YjH4yQ@mail.gmail.com>

Payment protocol currently supports payments to multi-sig addresses.

In general, almost all wallet software sucks RE multisig.  Just try
any of these actions in Bitcoin-Qt or another wallet:
* obtain a public key you control, given a bitcoin address
* easily share public keys
* easily share partially signed transactions
* build a P2SH multisig address from public keys, reliably.  Right
now, participants have no idea about pubkey order, leading various N
possible P2SH addresses, given a list of public keys.  Reproducing the
P2SH address is harder than it should be.
* track "partially controlled" balance (balance of coins of which you
may sign at least 1 of N)
* support for remote oracles and services that provide 1-of-N signatures
etc.




On Mon, Mar 10, 2014 at 1:39 PM, Drak <drak at zikula.org> wrote:
> I was wondering if there would be merit in a kind of BIP for a payment
> protocol using multisig?
>
> Currently, setting up a multisig is quite a feat. Users have to exchange
> public keys, work out how to get the public keys from their addresses. If
> one of the parties are not savvy enough, an malicious party could easily be
> setup that was 2 of 3 instead of 2 of 2 where the malicious party generates
> the multisig address+script and thus be able to run off with funds anyway.
>
> It's also terribly complex to generate and keep track of. There's been a
> nice attempt at creating an browser interface at coinb.in/multisig but it
> still lacks the kind of ease with created by the payment protocol. If there
> was a BIP then it would go a long way to aiding future usability of multisig
> wallet implementations.
>
> What are your thoughts?
>
> Drak
>
> ------------------------------------------------------------------------------
> Learn Graph Databases - Download FREE O'Reilly Book
> "Graph Databases" is the definitive new guide to graph databases and their
> applications. Written by three acclaimed leaders in the field,
> this first edition is now available. Download your free book today!
> http://p.sf.net/sfu/13534_NeoTech
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>



-- 
Jeff Garzik
Bitcoin core developer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From andreas at schildbach.de  Mon Mar 10 19:28:53 2014
From: andreas at schildbach.de (Andreas Schildbach)
Date: Mon, 10 Mar 2014 20:28:53 +0100
Subject: [Bitcoin-development] Instant / contactless payments
In-Reply-To: <CALDj+BYoYy8LWTgguj7FnrGMHuA5hgFdcFenBTdcxMuOwJ+tdA@mail.gmail.com>
References: <CANEZrP3w9c_UX3dd+7LdWNXCEwjnAG+bYWxqKYo_fzakWQu=Bg@mail.gmail.com>	<CALDj+BZE1KtMGpMH3UHtxjN2vXxu39o_hAWPdg==KLsWpe1zqA@mail.gmail.com>	<20140308085242.GA5727@odo.localdomain>
	<CALDj+BYoYy8LWTgguj7FnrGMHuA5hgFdcFenBTdcxMuOwJ+tdA@mail.gmail.com>
Message-ID: <lfl3p6$na3$1@ger.gmane.org>

On 03/10/2014 04:09 PM, Alex Kotenko wrote:

> ?Yes, ?I'm certain about that we need to switch to BIP70 asap. As I said
> earlier - support among the wallets is the biggest problem here really.
> Only Andreas' Wallet supports it right now AFAIK, and even in there it's
> only as "LABS feature", so will be turned off for most of users.

Just a small clarification here. Bitcoin Wallet supports the customer
side of the protocol since 2011, without any "Labs enabling"! This means
you've got an install base of half a million devices that you can
interoperate with. Sure, a lot of users will have Bluetooth switched
off. The UI flow to enable it while paying is pretty smooth though.

The merchant side used to have the Labs enabling but this is gone since
a few weeks.





From alexykot at gmail.com  Mon Mar 10 19:47:55 2014
From: alexykot at gmail.com (Alex Kotenko)
Date: Mon, 10 Mar 2014 19:47:55 +0000
Subject: [Bitcoin-development] Instant / contactless payments
In-Reply-To: <lfl3p6$na3$1@ger.gmane.org>
References: <CANEZrP3w9c_UX3dd+7LdWNXCEwjnAG+bYWxqKYo_fzakWQu=Bg@mail.gmail.com>
	<CALDj+BZE1KtMGpMH3UHtxjN2vXxu39o_hAWPdg==KLsWpe1zqA@mail.gmail.com>
	<20140308085242.GA5727@odo.localdomain>
	<CALDj+BYoYy8LWTgguj7FnrGMHuA5hgFdcFenBTdcxMuOwJ+tdA@mail.gmail.com>
	<lfl3p6$na3$1@ger.gmane.org>
Message-ID: <CALDj+BZ1onYCfP6bZnBdTNtFiLWK_jVSbtcQ3t5rptV+M3CWBQ@mail.gmail.com>

Ah, I see, so it's only payee who has to enable it, payer side is on by
default. Then fine, situation is better than I thought. We'll look at
implementing BIP70 asap.

Best regards,
Alex Kotenko


2014-03-10 19:28 GMT+00:00 Andreas Schildbach <andreas at schildbach.de>:

> On 03/10/2014 04:09 PM, Alex Kotenko wrote:
>
> > ?Yes, ?I'm certain about that we need to switch to BIP70 asap. As I said
> > earlier - support among the wallets is the biggest problem here really.
> > Only Andreas' Wallet supports it right now AFAIK, and even in there it's
> > only as "LABS feature", so will be turned off for most of users.
>
> Just a small clarification here. Bitcoin Wallet supports the customer
> side of the protocol since 2011, without any "Labs enabling"! This means
> you've got an install base of half a million devices that you can
> interoperate with. Sure, a lot of users will have Bluetooth switched
> off. The UI flow to enable it while paying is pretty smooth though.
>
> The merchant side used to have the Labs enabling but this is gone since
> a few weeks.
>
>
>
>
> ------------------------------------------------------------------------------
> Learn Graph Databases - Download FREE O'Reilly Book
> "Graph Databases" is the definitive new guide to graph databases and their
> applications. Written by three acclaimed leaders in the field,
> this first edition is now available. Download your free book today!
> http://p.sf.net/sfu/13534_NeoTech
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140310/9051f674/attachment.html>

From etotheipi at gmail.com  Tue Mar 11 00:09:56 2014
From: etotheipi at gmail.com (Alan Reiner)
Date: Mon, 10 Mar 2014 20:09:56 -0400
Subject: [Bitcoin-development] Multisign payment protocol?
In-Reply-To: <531E52FE.5090107@jerviss.org>
References: <CANAnSg3Bt0e7CfUcJXe96xhU6nqif9ey_vurZMZkSa9OHjHStw@mail.gmail.com>	<CABsx9T0SMi6Gp4JY=CpHxLEu5pVkvDmnug7PsY7m_dvtT7khzg@mail.gmail.com>
	<531DFDF8.80008@gmail.com> <531E52FE.5090107@jerviss.org>
Message-ID: <531E5454.1030601@gmail.com>

As far as I'm concerned, the way forward is to scrap BIP 10 and build up
something new that is flexible and extensible.  Also, my understanding
is that there may be room in the payment protocol for this stuff though
I'm not sure if it is really adapted well to all the steps: exchanging
public keys, creating multi-sig/P2SH addresses, proposing multi-sig
spends, bundling meta-data needed for lite/offline nodes, aggregating
signatures, and any other details.

When I start multisig integration into Armory (very soon!) I'll write a
list of requirements for the new format/process and post it here for a
wider discussion.  Certainly, if the payment protocol can already handle
all this, that would be awesome.

-Alan


On 03/10/2014 08:04 PM, kjj wrote:
> I was trying to use bip10 for multisig and coinjoin, but there was a
> problem with it.  I'll have to look back at my notes, but I thought I
> sent you a message about it.  And then real life swallowed my bitcoin
> time...
>
> I think the bottom line was that it would be useful in the generic
> case with just one minor change.  If there is interest, and it sounds
> like there just may be, I can dust off my notes and see where I left
> it.  Probably should do it soon before someone implements it in PB or XML.
>
> Alan Reiner wrote:
>> Then of course I tried to do this with BIP 10 
>> <https://github.com/bitcoin/bips/blob/master/bip-0010.mediawiki> when
>> Armory implemented offline-transactions two years ago.  I got some
>> positive feedback, but no one wanted to help improve it, etc.  I
>> guess nobody else was doing it and/or cared at the time.  So I
>> continue to use BIP 10 even though it's pretty crappy.  I wanted it
>> to be useful for multisig, too, but it has some deficiencies there
>> (it was done when Armory was extremely young and OP_EVAL was still on
>> the table).
>>
>> However, with all this activity, we should start thinking about that
>> and discussing it.  Otherwise, I'll just do my own thing again and
>> probably end up with something that fits my own needs, but not anyone
>> else's.  Really though, multisig shouldn't require all the same app
>> to work.
>>
>> -Alan
>>
>>
>> On 03/10/2014 01:49 PM, Gavin Andresen wrote:
>>> In my experience, best process for standardizing something is:
>>>
>>> 1) Somebody has a great idea
>>> 2) They implement it
>>> 3) Everybody agrees, "Great idea!" and they copy it.
>>> 4) Idea gets refined by the people copying it.
>>> 5) It gets standardized.
>>>
>>> Mutisig wallets are at step 2 right now. BIP is step 5, in my humble
>>> opinion...
>>>
>>>
>>>
>>>
>>> On Mon, Mar 10, 2014 at 1:39 PM, Drak <drak at zikula.org
>>> <mailto:drak at zikula.org>> wrote:
>>>
>>>     I was wondering if there would be merit in a kind of BIP for a
>>>     payment protocol using multisig?
>>>
>>>     Currently, setting up a multisig is quite a feat. Users have to
>>>     exchange public keys, work out how to get the public keys from
>>>     their addresses. If one of the parties are not savvy enough, an
>>>     malicious party could easily be setup that was 2 of 3 instead of
>>>     2 of 2 where the malicious party generates the multisig
>>>     address+script and thus be able to run off with funds anyway.
>>>
>>>     It's also terribly complex to generate and keep track of.
>>>     There's been a nice attempt at creating an browser interface at
>>>     coinb.in/multisig <http://coinb.in/multisig> but it still lacks
>>>     the kind of ease with created by the payment protocol. If there
>>>     was a BIP then it would go a long way to aiding future usability
>>>     of multisig wallet implementations.
>>>
>>>     What are your thoughts?
>>>
>>>     Drak
>>>
>>>     ------------------------------------------------------------------------------
>>>     Learn Graph Databases - Download FREE O'Reilly Book
>>>     "Graph Databases" is the definitive new guide to graph databases
>>>     and their
>>>     applications. Written by three acclaimed leaders in the field,
>>>     this first edition is now available. Download your free book today!
>>>     http://p.sf.net/sfu/13534_NeoTech
>>>     _______________________________________________
>>>     Bitcoin-development mailing list
>>>     Bitcoin-development at lists.sourceforge.net
>>>     <mailto:Bitcoin-development at lists.sourceforge.net>
>>>     https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>>
>>>
>>>
>>>
>>> -- 
>>> --
>>> Gavin Andresen
>>>
>>>
>>> ------------------------------------------------------------------------------
>>> Learn Graph Databases - Download FREE O'Reilly Book
>>> "Graph Databases" is the definitive new guide to graph databases and their
>>> applications. Written by three acclaimed leaders in the field,
>>> this first edition is now available. Download your free book today!
>>> http://p.sf.net/sfu/13534_NeoTech
>>>
>>>
>>> _______________________________________________
>>> Bitcoin-development mailing list
>>> Bitcoin-development at lists.sourceforge.net
>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>
>>
>>
>> ------------------------------------------------------------------------------
>> Learn Graph Databases - Download FREE O'Reilly Book
>> "Graph Databases" is the definitive new guide to graph databases and their
>> applications. Written by three acclaimed leaders in the field,
>> this first edition is now available. Download your free book today!
>> http://p.sf.net/sfu/13534_NeoTech
>>
>>
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140310/0f32ee9e/attachment.html>

From jgarzik at bitpay.com  Tue Mar 11 00:14:56 2014
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Mon, 10 Mar 2014 20:14:56 -0400
Subject: [Bitcoin-development] Multisign payment protocol?
In-Reply-To: <531E5454.1030601@gmail.com>
References: <CANAnSg3Bt0e7CfUcJXe96xhU6nqif9ey_vurZMZkSa9OHjHStw@mail.gmail.com>
	<CABsx9T0SMi6Gp4JY=CpHxLEu5pVkvDmnug7PsY7m_dvtT7khzg@mail.gmail.com>
	<531DFDF8.80008@gmail.com> <531E52FE.5090107@jerviss.org>
	<531E5454.1030601@gmail.com>
Message-ID: <CAJHLa0NZkzQQvMxgCJAJGT=Yn6vrVNK8Bg7RAfAjctpnrfg5zA@mail.gmail.com>

All of that only melds with the payment protocol under an extremely
expansive definition of "payment."  The payment protocol is really
geared towards a direct one-to-one relationship.

We can make the payment protocol do all this, if you squeeze and push
and try reall hard; it is mainly a question of protocol design and
intended usage:  is PP intended to be, ultimately, an expansive,
universal protocol for gossiping with other parties about bitcoin
transactions in a not-flood-fill manner?




On Mon, Mar 10, 2014 at 8:09 PM, Alan Reiner <etotheipi at gmail.com> wrote:
> As far as I'm concerned, the way forward is to scrap BIP 10 and build up
> something new that is flexible and extensible.  Also, my understanding is
> that there may be room in the payment protocol for this stuff though I'm not
> sure if it is really adapted well to all the steps: exchanging public keys,
> creating multi-sig/P2SH addresses, proposing multi-sig spends, bundling
> meta-data needed for lite/offline nodes, aggregating signatures, and any
> other details.
>
> When I start multisig integration into Armory (very soon!) I'll write a list
> of requirements for the new format/process and post it here for a wider
> discussion.  Certainly, if the payment protocol can already handle all this,
> that would be awesome.
>
> -Alan
>
>
> On 03/10/2014 08:04 PM, kjj wrote:
>
> I was trying to use bip10 for multisig and coinjoin, but there was a problem
> with it.  I'll have to look back at my notes, but I thought I sent you a
> message about it.  And then real life swallowed my bitcoin time...
>
> I think the bottom line was that it would be useful in the generic case with
> just one minor change.  If there is interest, and it sounds like there just
> may be, I can dust off my notes and see where I left it.  Probably should do
> it soon before someone implements it in PB or XML.
>
> Alan Reiner wrote:
>
> Then of course I tried to do this with BIP 10  when Armory implemented
> offline-transactions two years ago.  I got some positive feedback, but no
> one wanted to help improve it, etc.  I guess nobody else was doing it and/or
> cared at the time.  So I continue to use BIP 10 even though it's pretty
> crappy.  I wanted it to be useful for multisig, too, but it has some
> deficiencies there (it was done when Armory was extremely young and OP_EVAL
> was still on the table).
>
> However, with all this activity, we should start thinking about that and
> discussing it.  Otherwise, I'll just do my own thing again and probably end
> up with something that fits my own needs, but not anyone else's.  Really
> though, multisig shouldn't require all the same app to work.
>
> -Alan
>
>
> On 03/10/2014 01:49 PM, Gavin Andresen wrote:
>
> In my experience, best process for standardizing something is:
>
> 1) Somebody has a great idea
> 2) They implement it
> 3) Everybody agrees, "Great idea!" and they copy it.
> 4) Idea gets refined by the people copying it.
> 5) It gets standardized.
>
> Mutisig wallets are at step 2 right now. BIP is step 5, in my humble
> opinion...
>
>
>
>
> On Mon, Mar 10, 2014 at 1:39 PM, Drak <drak at zikula.org> wrote:
>>
>> I was wondering if there would be merit in a kind of BIP for a payment
>> protocol using multisig?
>>
>> Currently, setting up a multisig is quite a feat. Users have to exchange
>> public keys, work out how to get the public keys from their addresses. If
>> one of the parties are not savvy enough, an malicious party could easily be
>> setup that was 2 of 3 instead of 2 of 2 where the malicious party generates
>> the multisig address+script and thus be able to run off with funds anyway.
>>
>> It's also terribly complex to generate and keep track of. There's been a
>> nice attempt at creating an browser interface at coinb.in/multisig but it
>> still lacks the kind of ease with created by the payment protocol. If there
>> was a BIP then it would go a long way to aiding future usability of multisig
>> wallet implementations.
>>
>> What are your thoughts?
>>
>> Drak
>>
>>
>> ------------------------------------------------------------------------------
>> Learn Graph Databases - Download FREE O'Reilly Book
>> "Graph Databases" is the definitive new guide to graph databases and their
>> applications. Written by three acclaimed leaders in the field,
>> this first edition is now available. Download your free book today!
>> http://p.sf.net/sfu/13534_NeoTech
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>
>
>
>
> --
> --
> Gavin Andresen
>
>
> ------------------------------------------------------------------------------
> Learn Graph Databases - Download FREE O'Reilly Book
> "Graph Databases" is the definitive new guide to graph databases and their
> applications. Written by three acclaimed leaders in the field,
> this first edition is now available. Download your free book today!
> http://p.sf.net/sfu/13534_NeoTech
>
>
>
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
>
>
> ------------------------------------------------------------------------------
> Learn Graph Databases - Download FREE O'Reilly Book
> "Graph Databases" is the definitive new guide to graph databases and their
> applications. Written by three acclaimed leaders in the field,
> this first edition is now available. Download your free book today!
> http://p.sf.net/sfu/13534_NeoTech
>
>
>
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
>
>
> ------------------------------------------------------------------------------
> Learn Graph Databases - Download FREE O'Reilly Book
> "Graph Databases" is the definitive new guide to graph databases and their
> applications. Written by three acclaimed leaders in the field,
> this first edition is now available. Download your free book today!
> http://p.sf.net/sfu/13534_NeoTech
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>



-- 
Jeff Garzik
Bitcoin core developer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From bitcoin-devel at jerviss.org  Tue Mar 11 00:04:14 2014
From: bitcoin-devel at jerviss.org (kjj)
Date: Mon, 10 Mar 2014 19:04:14 -0500
Subject: [Bitcoin-development] Multisign payment protocol?
In-Reply-To: <531DFDF8.80008@gmail.com>
References: <CANAnSg3Bt0e7CfUcJXe96xhU6nqif9ey_vurZMZkSa9OHjHStw@mail.gmail.com>	<CABsx9T0SMi6Gp4JY=CpHxLEu5pVkvDmnug7PsY7m_dvtT7khzg@mail.gmail.com>
	<531DFDF8.80008@gmail.com>
Message-ID: <531E52FE.5090107@jerviss.org>

I was trying to use bip10 for multisig and coinjoin, but there was a 
problem with it.  I'll have to look back at my notes, but I thought I 
sent you a message about it. And then real life swallowed my bitcoin time...

I think the bottom line was that it would be useful in the generic case 
with just one minor change.  If there is interest, and it sounds like 
there just may be, I can dust off my notes and see where I left it.  
Probably should do it soon before someone implements it in PB or XML.

Alan Reiner wrote:
> Then of course I tried to do this with BIP 10 
> <https://github.com/bitcoin/bips/blob/master/bip-0010.mediawiki> when 
> Armory implemented offline-transactions two years ago.  I got some 
> positive feedback, but no one wanted to help improve it, etc.  I guess 
> nobody else was doing it and/or cared at the time.  So I continue to 
> use BIP 10 even though it's pretty crappy.  I wanted it to be useful 
> for multisig, too, but it has some deficiencies there (it was done 
> when Armory was extremely young and OP_EVAL was still on the table).
>
> However, with all this activity, we should start thinking about that 
> and discussing it.  Otherwise, I'll just do my own thing again and 
> probably end up with something that fits my own needs, but not anyone 
> else's.  Really though, multisig shouldn't require all the same app to 
> work.
>
> -Alan
>
>
> On 03/10/2014 01:49 PM, Gavin Andresen wrote:
>> In my experience, best process for standardizing something is:
>>
>> 1) Somebody has a great idea
>> 2) They implement it
>> 3) Everybody agrees, "Great idea!" and they copy it.
>> 4) Idea gets refined by the people copying it.
>> 5) It gets standardized.
>>
>> Mutisig wallets are at step 2 right now. BIP is step 5, in my humble 
>> opinion...
>>
>>
>>
>>
>> On Mon, Mar 10, 2014 at 1:39 PM, Drak <drak at zikula.org 
>> <mailto:drak at zikula.org>> wrote:
>>
>>     I was wondering if there would be merit in a kind of BIP for a
>>     payment protocol using multisig?
>>
>>     Currently, setting up a multisig is quite a feat. Users have to
>>     exchange public keys, work out how to get the public keys from
>>     their addresses. If one of the parties are not savvy enough, an
>>     malicious party could easily be setup that was 2 of 3 instead of
>>     2 of 2 where the malicious party generates the multisig
>>     address+script and thus be able to run off with funds anyway.
>>
>>     It's also terribly complex to generate and keep track of. There's
>>     been a nice attempt at creating an browser interface at
>>     coinb.in/multisig <http://coinb.in/multisig> but it still lacks
>>     the kind of ease with created by the payment protocol. If there
>>     was a BIP then it would go a long way to aiding future usability
>>     of multisig wallet implementations.
>>
>>     What are your thoughts?
>>
>>     Drak
>>
>>     ------------------------------------------------------------------------------
>>     Learn Graph Databases - Download FREE O'Reilly Book
>>     "Graph Databases" is the definitive new guide to graph databases
>>     and their
>>     applications. Written by three acclaimed leaders in the field,
>>     this first edition is now available. Download your free book today!
>>     http://p.sf.net/sfu/13534_NeoTech
>>     _______________________________________________
>>     Bitcoin-development mailing list
>>     Bitcoin-development at lists.sourceforge.net
>>     <mailto:Bitcoin-development at lists.sourceforge.net>
>>     https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>
>>
>>
>>
>> -- 
>> --
>> Gavin Andresen
>>
>>
>> ------------------------------------------------------------------------------
>> Learn Graph Databases - Download FREE O'Reilly Book
>> "Graph Databases" is the definitive new guide to graph databases and their
>> applications. Written by three acclaimed leaders in the field,
>> this first edition is now available. Download your free book today!
>> http://p.sf.net/sfu/13534_NeoTech
>>
>>
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
>
> ------------------------------------------------------------------------------
> Learn Graph Databases - Download FREE O'Reilly Book
> "Graph Databases" is the definitive new guide to graph databases and their
> applications. Written by three acclaimed leaders in the field,
> this first edition is now available. Download your free book today!
> http://p.sf.net/sfu/13534_NeoTech
>
>
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140310/7a45e78c/attachment.html>

From gavinandresen at gmail.com  Tue Mar 11 01:15:28 2014
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Mon, 10 Mar 2014 21:15:28 -0400
Subject: [Bitcoin-development] Multisign payment protocol?
In-Reply-To: <CAJHLa0NZkzQQvMxgCJAJGT=Yn6vrVNK8Bg7RAfAjctpnrfg5zA@mail.gmail.com>
References: <CANAnSg3Bt0e7CfUcJXe96xhU6nqif9ey_vurZMZkSa9OHjHStw@mail.gmail.com>
	<CABsx9T0SMi6Gp4JY=CpHxLEu5pVkvDmnug7PsY7m_dvtT7khzg@mail.gmail.com>
	<531DFDF8.80008@gmail.com> <531E52FE.5090107@jerviss.org>
	<531E5454.1030601@gmail.com>
	<CAJHLa0NZkzQQvMxgCJAJGT=Yn6vrVNK8Bg7RAfAjctpnrfg5zA@mail.gmail.com>
Message-ID: <CABsx9T3eViYDsEmLm7ceimJNwci3mCOxWoVnVZHrqp7pDmm0+g@mail.gmail.com>

Multisig is orthogonal to the payment protocol (but payment protocol is
needed first).

There need to be protocols for:

a) Establishing multisig wallets of various sorts. See:
  https://moqups.com/gavinandresen/no8mzUDB/
  https://moqups.com/gavinandresen/no8mzUDB/p:ab18547e0
... etc.  for a UI mock-up.
  There needs to be some protocol so all participants in a multisig wallet
contribute keys (actually, we should just assume everybody uses BIP32 HD
public keys so we get privacy from the start).

Multi-person shared wallets, escrows, and "wallet protection service"
wallets (which might be protected with two-factor authentication) are
different use cases and probably use slightly different protocols (and will
probably need different BIPs eventually).


b) Gathering signatures for a multisig spend. Here is where the payment
protocol is useful; the PaymentRequest message should be passed around so
all participants know what is being paid for, and maybe a partially-signed
Payment message is where the signatures are gathered (or maybe the
signatures are sent separately and one of the participants creates and
submits the Payment and gets the PaymentACK... "to be designed").
  See:
    https://moqups.com/gavinandresen/no8mzUDB/p:a7e81be96
    https://moqups.com/gavinandresen/no8mzUDB/p:af7339204
... for UI mock-up for the multi-person-spend case.

And maybe a protocol for "I don't want to be part of this multisig any more
/ I lost control of my private key don't trust me in this multisig any
more".



On Mon, Mar 10, 2014 at 8:14 PM, Jeff Garzik <jgarzik at bitpay.com> wrote:

> All of that only melds with the payment protocol under an extremely
> expansive definition of "payment."  The payment protocol is really
> geared towards a direct one-to-one relationship....



>
>
--
Gavin Andresen
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140310/1ce818ae/attachment.html>

From drak at zikula.org  Tue Mar 11 11:43:20 2014
From: drak at zikula.org (Drak)
Date: Tue, 11 Mar 2014 11:43:20 +0000
Subject: [Bitcoin-development] Multisign payment protocol?
In-Reply-To: <CABsx9T3eViYDsEmLm7ceimJNwci3mCOxWoVnVZHrqp7pDmm0+g@mail.gmail.com>
References: <CANAnSg3Bt0e7CfUcJXe96xhU6nqif9ey_vurZMZkSa9OHjHStw@mail.gmail.com>
	<CABsx9T0SMi6Gp4JY=CpHxLEu5pVkvDmnug7PsY7m_dvtT7khzg@mail.gmail.com>
	<531DFDF8.80008@gmail.com> <531E52FE.5090107@jerviss.org>
	<531E5454.1030601@gmail.com>
	<CAJHLa0NZkzQQvMxgCJAJGT=Yn6vrVNK8Bg7RAfAjctpnrfg5zA@mail.gmail.com>
	<CABsx9T3eViYDsEmLm7ceimJNwci3mCOxWoVnVZHrqp7pDmm0+g@mail.gmail.com>
Message-ID: <CANAnSg2kzPF0886PsQW8chzsWi6Urp+=-x+9bbv8Mv6hmpvBPw@mail.gmail.com>

Gavin,

You have pretty much nailed my intent in both respects. This sets up a way
to negotiate the address and abstract away the nasty details of finding
public keys from bitcoin addresses, and provides a nice clean way for
redemption abstracting away the long strings of hex.

For redemption, I think as each party signs the tx if the script returns
true, it would be acceptable to just go right ahead and broadcast it, or
maybe as you suggest all signatures go back to the initiating party and
they do the final work.

I very much like the idea of assuming each party uses HD wallets, that
certainly simplifies things greatly. I also like the use of email addresses
as a negotiation medium, but I also wonder if this could be made agnostic
in any BIP proposal so it could work with other communication mediums like
bitmessage for example (just forward thinking anonymity a little).

I definitely think there is a need for a protocol because multisig,
regardless of the application has two technically involved steps:
negotiation of an address, and redemption of any subsequently encumbered
funds. A protocol would enable different wallet implementations to
participate in such a transaction and make wide-spread use much more likely
and possible.

Drak


On 11 March 2014 01:15, Gavin Andresen <gavinandresen at gmail.com> wrote:

> Multisig is orthogonal to the payment protocol (but payment protocol is
> needed first).
>
> There need to be protocols for:
>
> a) Establishing multisig wallets of various sorts. See:
>   https://moqups.com/gavinandresen/no8mzUDB/
>   https://moqups.com/gavinandresen/no8mzUDB/p:ab18547e0
> ... etc.  for a UI mock-up.
>   There needs to be some protocol so all participants in a multisig wallet
> contribute keys (actually, we should just assume everybody uses BIP32 HD
> public keys so we get privacy from the start).
>
> Multi-person shared wallets, escrows, and "wallet protection service"
> wallets (which might be protected with two-factor authentication) are
> different use cases and probably use slightly different protocols (and will
> probably need different BIPs eventually).
>
>
> b) Gathering signatures for a multisig spend. Here is where the payment
> protocol is useful; the PaymentRequest message should be passed around so
> all participants know what is being paid for, and maybe a partially-signed
> Payment message is where the signatures are gathered (or maybe the
> signatures are sent separately and one of the participants creates and
> submits the Payment and gets the PaymentACK... "to be designed").
>   See:
>     https://moqups.com/gavinandresen/no8mzUDB/p:a7e81be96
>     https://moqups.com/gavinandresen/no8mzUDB/p:af7339204
> ... for UI mock-up for the multi-person-spend case.
>
> And maybe a protocol for "I don't want to be part of this multisig any
> more / I lost control of my private key don't trust me in this multisig any
> more".
>
>
>
> On Mon, Mar 10, 2014 at 8:14 PM, Jeff Garzik <jgarzik at bitpay.com> wrote:
>
>> All of that only melds with the payment protocol under an extremely
>> expansive definition of "payment."  The payment protocol is really
>> geared towards a direct one-to-one relationship....
>
>
>
>>
>>
> --
> Gavin Andresen
>
>
> ------------------------------------------------------------------------------
> Learn Graph Databases - Download FREE O'Reilly Book
> "Graph Databases" is the definitive new guide to graph databases and their
> applications. Written by three acclaimed leaders in the field,
> this first edition is now available. Download your free book today!
> http://p.sf.net/sfu/13534_NeoTech
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140311/5b55c4d3/attachment.html>

From jgarzik at bitpay.com  Tue Mar 11 12:38:55 2014
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Tue, 11 Mar 2014 08:38:55 -0400
Subject: [Bitcoin-development] Multisign payment protocol?
In-Reply-To: <CANAnSg2kzPF0886PsQW8chzsWi6Urp+=-x+9bbv8Mv6hmpvBPw@mail.gmail.com>
References: <CANAnSg3Bt0e7CfUcJXe96xhU6nqif9ey_vurZMZkSa9OHjHStw@mail.gmail.com>
	<CABsx9T0SMi6Gp4JY=CpHxLEu5pVkvDmnug7PsY7m_dvtT7khzg@mail.gmail.com>
	<531DFDF8.80008@gmail.com> <531E52FE.5090107@jerviss.org>
	<531E5454.1030601@gmail.com>
	<CAJHLa0NZkzQQvMxgCJAJGT=Yn6vrVNK8Bg7RAfAjctpnrfg5zA@mail.gmail.com>
	<CABsx9T3eViYDsEmLm7ceimJNwci3mCOxWoVnVZHrqp7pDmm0+g@mail.gmail.com>
	<CANAnSg2kzPF0886PsQW8chzsWi6Urp+=-x+9bbv8Mv6hmpvBPw@mail.gmail.com>
Message-ID: <CAJHLa0Mu2kiv3CCme7BPwzWtT++PNLQ2aAKdLyA8LFTtXEg9fg@mail.gmail.com>

On Tue, Mar 11, 2014 at 7:43 AM, Drak <drak at zikula.org> wrote:
> I very much like the idea of assuming each party uses HD wallets, that
> certainly simplifies things greatly.

It also assumes a reality different from our current one.

-- 
Jeff Garzik
Bitcoin core developer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From gavinandresen at gmail.com  Tue Mar 11 13:51:36 2014
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Tue, 11 Mar 2014 09:51:36 -0400
Subject: [Bitcoin-development] Multisign payment protocol?
In-Reply-To: <CAJHLa0Mu2kiv3CCme7BPwzWtT++PNLQ2aAKdLyA8LFTtXEg9fg@mail.gmail.com>
References: <CANAnSg3Bt0e7CfUcJXe96xhU6nqif9ey_vurZMZkSa9OHjHStw@mail.gmail.com>
	<CABsx9T0SMi6Gp4JY=CpHxLEu5pVkvDmnug7PsY7m_dvtT7khzg@mail.gmail.com>
	<531DFDF8.80008@gmail.com> <531E52FE.5090107@jerviss.org>
	<531E5454.1030601@gmail.com>
	<CAJHLa0NZkzQQvMxgCJAJGT=Yn6vrVNK8Bg7RAfAjctpnrfg5zA@mail.gmail.com>
	<CABsx9T3eViYDsEmLm7ceimJNwci3mCOxWoVnVZHrqp7pDmm0+g@mail.gmail.com>
	<CANAnSg2kzPF0886PsQW8chzsWi6Urp+=-x+9bbv8Mv6hmpvBPw@mail.gmail.com>
	<CAJHLa0Mu2kiv3CCme7BPwzWtT++PNLQ2aAKdLyA8LFTtXEg9fg@mail.gmail.com>
Message-ID: <CABsx9T0Lvg84qFVRbc7Ef4vZEQj9eO7Jhup5PTRLLeuJFvXi-w@mail.gmail.com>

On Tue, Mar 11, 2014 at 8:38 AM, Jeff Garzik <jgarzik at bitpay.com> wrote:

> On Tue, Mar 11, 2014 at 7:43 AM, Drak <drak at zikula.org> wrote:
> > I very much like the idea of assuming each party uses HD wallets, that
> > certainly simplifies things greatly.
>
> It also assumes a reality different from our current one.
>

Multisig wallets are a different reality from our current one, so when we
move to that new reality we should do it correctly from the beginning.

-- 
--
Gavin Andrese
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140311/b7b38273/attachment.html>

From jgarzik at bitpay.com  Tue Mar 11 14:13:48 2014
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Tue, 11 Mar 2014 10:13:48 -0400
Subject: [Bitcoin-development] Multisign payment protocol?
In-Reply-To: <CABsx9T0Lvg84qFVRbc7Ef4vZEQj9eO7Jhup5PTRLLeuJFvXi-w@mail.gmail.com>
References: <CANAnSg3Bt0e7CfUcJXe96xhU6nqif9ey_vurZMZkSa9OHjHStw@mail.gmail.com>
	<CABsx9T0SMi6Gp4JY=CpHxLEu5pVkvDmnug7PsY7m_dvtT7khzg@mail.gmail.com>
	<531DFDF8.80008@gmail.com> <531E52FE.5090107@jerviss.org>
	<531E5454.1030601@gmail.com>
	<CAJHLa0NZkzQQvMxgCJAJGT=Yn6vrVNK8Bg7RAfAjctpnrfg5zA@mail.gmail.com>
	<CABsx9T3eViYDsEmLm7ceimJNwci3mCOxWoVnVZHrqp7pDmm0+g@mail.gmail.com>
	<CANAnSg2kzPF0886PsQW8chzsWi6Urp+=-x+9bbv8Mv6hmpvBPw@mail.gmail.com>
	<CAJHLa0Mu2kiv3CCme7BPwzWtT++PNLQ2aAKdLyA8LFTtXEg9fg@mail.gmail.com>
	<CABsx9T0Lvg84qFVRbc7Ef4vZEQj9eO7Jhup5PTRLLeuJFvXi-w@mail.gmail.com>
Message-ID: <CAJHLa0Mn2_OKDH_XUXfz49hPWGdCN0gs6S3wbtc=qHkg+sJ2Xw@mail.gmail.com>

Sure, but I don't see wallets being able to _assume_ _remote_ parties
have an HD wallet for a long, long time.  Interoperability common
sense implies the environment will be heterogenous, perhaps forever,
invalidating assume-each-party-uses-HD logic.

On Tue, Mar 11, 2014 at 9:51 AM, Gavin Andresen <gavinandresen at gmail.com> wrote:
> On Tue, Mar 11, 2014 at 8:38 AM, Jeff Garzik <jgarzik at bitpay.com> wrote:
>>
>> On Tue, Mar 11, 2014 at 7:43 AM, Drak <drak at zikula.org> wrote:
>> > I very much like the idea of assuming each party uses HD wallets, that
>> > certainly simplifies things greatly.
>>
>> It also assumes a reality different from our current one.
>
>
> Multisig wallets are a different reality from our current one, so when we
> move to that new reality we should do it correctly from the beginning.
>
> --
> --
> Gavin Andrese



-- 
Jeff Garzik
Bitcoin core developer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From gavinandresen at gmail.com  Tue Mar 11 14:23:32 2014
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Tue, 11 Mar 2014 10:23:32 -0400
Subject: [Bitcoin-development] Multisign payment protocol?
In-Reply-To: <CAJHLa0Mn2_OKDH_XUXfz49hPWGdCN0gs6S3wbtc=qHkg+sJ2Xw@mail.gmail.com>
References: <CANAnSg3Bt0e7CfUcJXe96xhU6nqif9ey_vurZMZkSa9OHjHStw@mail.gmail.com>
	<CABsx9T0SMi6Gp4JY=CpHxLEu5pVkvDmnug7PsY7m_dvtT7khzg@mail.gmail.com>
	<531DFDF8.80008@gmail.com> <531E52FE.5090107@jerviss.org>
	<531E5454.1030601@gmail.com>
	<CAJHLa0NZkzQQvMxgCJAJGT=Yn6vrVNK8Bg7RAfAjctpnrfg5zA@mail.gmail.com>
	<CABsx9T3eViYDsEmLm7ceimJNwci3mCOxWoVnVZHrqp7pDmm0+g@mail.gmail.com>
	<CANAnSg2kzPF0886PsQW8chzsWi6Urp+=-x+9bbv8Mv6hmpvBPw@mail.gmail.com>
	<CAJHLa0Mu2kiv3CCme7BPwzWtT++PNLQ2aAKdLyA8LFTtXEg9fg@mail.gmail.com>
	<CABsx9T0Lvg84qFVRbc7Ef4vZEQj9eO7Jhup5PTRLLeuJFvXi-w@mail.gmail.com>
	<CAJHLa0Mn2_OKDH_XUXfz49hPWGdCN0gs6S3wbtc=qHkg+sJ2Xw@mail.gmail.com>
Message-ID: <CABsx9T3fKBCFd7d-yP-0WgN2TBwN8Es=hZqxPBnThESKz1jLvA@mail.gmail.com>

On Tue, Mar 11, 2014 at 10:13 AM, Jeff Garzik <jgarzik at bitpay.com> wrote:

> Sure, but I don't see wallets being able to _assume_ _remote_ parties
> have an HD wallet for a long, long time.  Interoperability common
> sense implies the environment will be heterogenous, perhaps forever,
> invalidating assume-each-party-uses-HD logic.


If the remote party is one of the parties involved in a multisig, and
speaks the "Lets set up a multisig wallet together / Lets spend from a
multisig" protocols, then it should be perfectly reasonable to assume that
they're HD-capable.

Remote parties paying into a multisig, or receiving funds from a multisig,
don't have to support it (that's what P2SH gives us).

-- 
--
Gavin Andresen
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140311/2aba3b81/attachment.html>

From jgarzik at bitpay.com  Tue Mar 11 14:34:50 2014
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Tue, 11 Mar 2014 10:34:50 -0400
Subject: [Bitcoin-development] Multisign payment protocol?
In-Reply-To: <CABsx9T3fKBCFd7d-yP-0WgN2TBwN8Es=hZqxPBnThESKz1jLvA@mail.gmail.com>
References: <CANAnSg3Bt0e7CfUcJXe96xhU6nqif9ey_vurZMZkSa9OHjHStw@mail.gmail.com>
	<CABsx9T0SMi6Gp4JY=CpHxLEu5pVkvDmnug7PsY7m_dvtT7khzg@mail.gmail.com>
	<531DFDF8.80008@gmail.com> <531E52FE.5090107@jerviss.org>
	<531E5454.1030601@gmail.com>
	<CAJHLa0NZkzQQvMxgCJAJGT=Yn6vrVNK8Bg7RAfAjctpnrfg5zA@mail.gmail.com>
	<CABsx9T3eViYDsEmLm7ceimJNwci3mCOxWoVnVZHrqp7pDmm0+g@mail.gmail.com>
	<CANAnSg2kzPF0886PsQW8chzsWi6Urp+=-x+9bbv8Mv6hmpvBPw@mail.gmail.com>
	<CAJHLa0Mu2kiv3CCme7BPwzWtT++PNLQ2aAKdLyA8LFTtXEg9fg@mail.gmail.com>
	<CABsx9T0Lvg84qFVRbc7Ef4vZEQj9eO7Jhup5PTRLLeuJFvXi-w@mail.gmail.com>
	<CAJHLa0Mn2_OKDH_XUXfz49hPWGdCN0gs6S3wbtc=qHkg+sJ2Xw@mail.gmail.com>
	<CABsx9T3fKBCFd7d-yP-0WgN2TBwN8Es=hZqxPBnThESKz1jLvA@mail.gmail.com>
Message-ID: <CAJHLa0NsD1cHNMqLT2vjbu_4NDES5RjqNraCvPW0bp6Kc=7FhQ@mail.gmail.com>

On Tue, Mar 11, 2014 at 10:23 AM, Gavin Andresen
<gavinandresen at gmail.com> wrote:
> If the remote party is one of the parties involved in a multisig, and speaks
> the "Lets set up a multisig wallet together / Lets spend from a multisig"
> protocols, then it should be perfectly reasonable to assume that they're
> HD-capable.

Disagree.  It is an unnecessary restriction.  People are already
writing and starting to deploy multisig wallets in the field, that do
not match this assumption.

In general, HD is really cool, but even the barest amount of
infrastructure is lacking.  Popular libraries and the reference client
all lack support.  Building a protocol that assumes HD is optimistic
at this stage.

-- 
Jeff Garzik
Bitcoin core developer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From jgarzik at bitpay.com  Tue Mar 11 14:44:28 2014
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Tue, 11 Mar 2014 10:44:28 -0400
Subject: [Bitcoin-development] Multisign payment protocol?
In-Reply-To: <CABsx9T3fKBCFd7d-yP-0WgN2TBwN8Es=hZqxPBnThESKz1jLvA@mail.gmail.com>
References: <CANAnSg3Bt0e7CfUcJXe96xhU6nqif9ey_vurZMZkSa9OHjHStw@mail.gmail.com>
	<CABsx9T0SMi6Gp4JY=CpHxLEu5pVkvDmnug7PsY7m_dvtT7khzg@mail.gmail.com>
	<531DFDF8.80008@gmail.com> <531E52FE.5090107@jerviss.org>
	<531E5454.1030601@gmail.com>
	<CAJHLa0NZkzQQvMxgCJAJGT=Yn6vrVNK8Bg7RAfAjctpnrfg5zA@mail.gmail.com>
	<CABsx9T3eViYDsEmLm7ceimJNwci3mCOxWoVnVZHrqp7pDmm0+g@mail.gmail.com>
	<CANAnSg2kzPF0886PsQW8chzsWi6Urp+=-x+9bbv8Mv6hmpvBPw@mail.gmail.com>
	<CAJHLa0Mu2kiv3CCme7BPwzWtT++PNLQ2aAKdLyA8LFTtXEg9fg@mail.gmail.com>
	<CABsx9T0Lvg84qFVRbc7Ef4vZEQj9eO7Jhup5PTRLLeuJFvXi-w@mail.gmail.com>
	<CAJHLa0Mn2_OKDH_XUXfz49hPWGdCN0gs6S3wbtc=qHkg+sJ2Xw@mail.gmail.com>
	<CABsx9T3fKBCFd7d-yP-0WgN2TBwN8Es=hZqxPBnThESKz1jLvA@mail.gmail.com>
Message-ID: <CAJHLa0NHKWqXMd23Fr46adGinQmjcLRxyBB-Ra9tJwu4Ein7GA@mail.gmail.com>

(#include <rant.h>)

Right now, HD is hot air.  Let us end the pie-in-the-sky assumptions
about how HD will save the day, with zero code to back it up.  Bitcoin
Wallet purportedly fails to rotate addresses, a privacy ugly, because
of this Waiting For Godot situation.  An attempt to add a simple,
stateless RPC stalled because we are all Waiting For Godot, also:
https://github.com/bitcoin/bitcoin/pull/3520

Until the major user wallets and bitcoind have -basic- HD support, it
is premature to build anything on top of HD.  We really have no clue
at this juncture how difficult will be the HD rollout.

-- 
Jeff Garzik
Bitcoin core developer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From g.rowe at froot.co.uk  Tue Mar 11 14:53:39 2014
From: g.rowe at froot.co.uk (Gary Rowe)
Date: Tue, 11 Mar 2014 14:53:39 +0000
Subject: [Bitcoin-development] Multisign payment protocol?
In-Reply-To: <CAJHLa0NHKWqXMd23Fr46adGinQmjcLRxyBB-Ra9tJwu4Ein7GA@mail.gmail.com>
References: <CANAnSg3Bt0e7CfUcJXe96xhU6nqif9ey_vurZMZkSa9OHjHStw@mail.gmail.com>
	<CABsx9T0SMi6Gp4JY=CpHxLEu5pVkvDmnug7PsY7m_dvtT7khzg@mail.gmail.com>
	<531DFDF8.80008@gmail.com> <531E52FE.5090107@jerviss.org>
	<531E5454.1030601@gmail.com>
	<CAJHLa0NZkzQQvMxgCJAJGT=Yn6vrVNK8Bg7RAfAjctpnrfg5zA@mail.gmail.com>
	<CABsx9T3eViYDsEmLm7ceimJNwci3mCOxWoVnVZHrqp7pDmm0+g@mail.gmail.com>
	<CANAnSg2kzPF0886PsQW8chzsWi6Urp+=-x+9bbv8Mv6hmpvBPw@mail.gmail.com>
	<CAJHLa0Mu2kiv3CCme7BPwzWtT++PNLQ2aAKdLyA8LFTtXEg9fg@mail.gmail.com>
	<CABsx9T0Lvg84qFVRbc7Ef4vZEQj9eO7Jhup5PTRLLeuJFvXi-w@mail.gmail.com>
	<CAJHLa0Mn2_OKDH_XUXfz49hPWGdCN0gs6S3wbtc=qHkg+sJ2Xw@mail.gmail.com>
	<CABsx9T3fKBCFd7d-yP-0WgN2TBwN8Es=hZqxPBnThESKz1jLvA@mail.gmail.com>
	<CAJHLa0NHKWqXMd23Fr46adGinQmjcLRxyBB-Ra9tJwu4Ein7GA@mail.gmail.com>
Message-ID: <CAKm8k+3Eohr9OtA+tSp9nXuQpxfiAwC6R61zZWSB3WMAxCZ=Vw@mail.gmail.com>

Speaking from the MultiBit perspective, all future protocol development
(with the exception of critical security and network compatibility fixes)
will be put into a HD wallet. Over time we want to see "MultiBit Classic"
gracefully retire and be fully superseded.

Right now, HD is not out there but there is a lot of work going on between
wallet developers to harmonise on HD implementation through BIP32/39. The
result of that work should see a significant migration away from random
private keys.

Thus it would appear likely that by the time this protocol sees widespread
use the presence of HD is likely to be rising fast or possibly dominant.

At MultiBit we anticipate a release of HD code within 2 months, with
private beta occurring within weeks. Trezor and Electrum may be earlier
than this. As far as I am aware both Hive and Haskoin are committed to HD.

If anyone wants early access to the alpha code, let me know and I'll make
the arrangements.


On 11 March 2014 14:44, Jeff Garzik <jgarzik at bitpay.com> wrote:

> (#include <rant.h>)
>
> Right now, HD is hot air.  Let us end the pie-in-the-sky assumptions
> about how HD will save the day, with zero code to back it up.  Bitcoin
> Wallet purportedly fails to rotate addresses, a privacy ugly, because
> of this Waiting For Godot situation.  An attempt to add a simple,
> stateless RPC stalled because we are all Waiting For Godot, also:
> https://github.com/bitcoin/bitcoin/pull/3520
>
> Until the major user wallets and bitcoind have -basic- HD support, it
> is premature to build anything on top of HD.  We really have no clue
> at this juncture how difficult will be the HD rollout.
>
> --
> Jeff Garzik
> Bitcoin core developer and open source evangelist
> BitPay, Inc.      https://bitpay.com/
>
>
> ------------------------------------------------------------------------------
> Learn Graph Databases - Download FREE O'Reilly Book
> "Graph Databases" is the definitive new guide to graph databases and their
> applications. Written by three acclaimed leaders in the field,
> this first edition is now available. Download your free book today!
> http://p.sf.net/sfu/13534_NeoTech
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140311/bc37f8d9/attachment.html>

From mike at plan99.net  Tue Mar 11 15:18:50 2014
From: mike at plan99.net (Mike Hearn)
Date: Tue, 11 Mar 2014 16:18:50 +0100
Subject: [Bitcoin-development] Multisign payment protocol?
In-Reply-To: <CAKm8k+3Eohr9OtA+tSp9nXuQpxfiAwC6R61zZWSB3WMAxCZ=Vw@mail.gmail.com>
References: <CANAnSg3Bt0e7CfUcJXe96xhU6nqif9ey_vurZMZkSa9OHjHStw@mail.gmail.com>
	<CABsx9T0SMi6Gp4JY=CpHxLEu5pVkvDmnug7PsY7m_dvtT7khzg@mail.gmail.com>
	<531DFDF8.80008@gmail.com> <531E52FE.5090107@jerviss.org>
	<531E5454.1030601@gmail.com>
	<CAJHLa0NZkzQQvMxgCJAJGT=Yn6vrVNK8Bg7RAfAjctpnrfg5zA@mail.gmail.com>
	<CABsx9T3eViYDsEmLm7ceimJNwci3mCOxWoVnVZHrqp7pDmm0+g@mail.gmail.com>
	<CANAnSg2kzPF0886PsQW8chzsWi6Urp+=-x+9bbv8Mv6hmpvBPw@mail.gmail.com>
	<CAJHLa0Mu2kiv3CCme7BPwzWtT++PNLQ2aAKdLyA8LFTtXEg9fg@mail.gmail.com>
	<CABsx9T0Lvg84qFVRbc7Ef4vZEQj9eO7Jhup5PTRLLeuJFvXi-w@mail.gmail.com>
	<CAJHLa0Mn2_OKDH_XUXfz49hPWGdCN0gs6S3wbtc=qHkg+sJ2Xw@mail.gmail.com>
	<CABsx9T3fKBCFd7d-yP-0WgN2TBwN8Es=hZqxPBnThESKz1jLvA@mail.gmail.com>
	<CAJHLa0NHKWqXMd23Fr46adGinQmjcLRxyBB-Ra9tJwu4Ein7GA@mail.gmail.com>
	<CAKm8k+3Eohr9OtA+tSp9nXuQpxfiAwC6R61zZWSB3WMAxCZ=Vw@mail.gmail.com>
Message-ID: <CANEZrP2U_mpGSnVMr6ZBTtVPUmnKRBcEaehHXyN67WmLxLuBjw@mail.gmail.com>

You can follow HDW progress in bitcoinj on this branch:

  https://github.com/bitcoinj/bitcoinj/commits/keychain

I've been working on it for a couple of months now. Electrum (Thomas V) is
also making good progress, and Trezor already uses HD wallets. I think most
popular end user wallets except blockchain.info and Bitcoin Core will
support HDW soon enough.

At any rate, as Gavin said already, the best way to make a feature you want
happen is just to write it. Devrandom is already working on a watchdog
service, as is another group (TrustedCoin), and that's an obvious use for
multisig/p2sh. They have API's already, it's just a case of standardising
them once we get more experience.




On Tue, Mar 11, 2014 at 3:53 PM, Gary Rowe <g.rowe at froot.co.uk> wrote:

> Speaking from the MultiBit perspective, all future protocol development
> (with the exception of critical security and network compatibility fixes)
> will be put into a HD wallet. Over time we want to see "MultiBit Classic"
> gracefully retire and be fully superseded.
>
> Right now, HD is not out there but there is a lot of work going on between
> wallet developers to harmonise on HD implementation through BIP32/39. The
> result of that work should see a significant migration away from random
> private keys.
>
> Thus it would appear likely that by the time this protocol sees widespread
> use the presence of HD is likely to be rising fast or possibly dominant.
>
> At MultiBit we anticipate a release of HD code within 2 months, with
> private beta occurring within weeks. Trezor and Electrum may be earlier
> than this. As far as I am aware both Hive and Haskoin are committed to HD.
>
> If anyone wants early access to the alpha code, let me know and I'll make
> the arrangements.
>
>
> On 11 March 2014 14:44, Jeff Garzik <jgarzik at bitpay.com> wrote:
>
>> (#include <rant.h>)
>>
>> Right now, HD is hot air.  Let us end the pie-in-the-sky assumptions
>> about how HD will save the day, with zero code to back it up.  Bitcoin
>> Wallet purportedly fails to rotate addresses, a privacy ugly, because
>> of this Waiting For Godot situation.  An attempt to add a simple,
>> stateless RPC stalled because we are all Waiting For Godot, also:
>> https://github.com/bitcoin/bitcoin/pull/3520
>>
>> Until the major user wallets and bitcoind have -basic- HD support, it
>> is premature to build anything on top of HD.  We really have no clue
>> at this juncture how difficult will be the HD rollout.
>>
>> --
>> Jeff Garzik
>> Bitcoin core developer and open source evangelist
>> BitPay, Inc.      https://bitpay.com/
>>
>>
>> ------------------------------------------------------------------------------
>> Learn Graph Databases - Download FREE O'Reilly Book
>> "Graph Databases" is the definitive new guide to graph databases and their
>> applications. Written by three acclaimed leaders in the field,
>> this first edition is now available. Download your free book today!
>> http://p.sf.net/sfu/13534_NeoTech
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>
>
>
>
> ------------------------------------------------------------------------------
> Learn Graph Databases - Download FREE O'Reilly Book
> "Graph Databases" is the definitive new guide to graph databases and their
> applications. Written by three acclaimed leaders in the field,
> this first edition is now available. Download your free book today!
> http://p.sf.net/sfu/13534_NeoTech
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140311/80c7821c/attachment.html>

From thomasv1 at gmx.de  Tue Mar 11 15:37:42 2014
From: thomasv1 at gmx.de (Thomas Voegtlin)
Date: Tue, 11 Mar 2014 16:37:42 +0100
Subject: [Bitcoin-development] Multisign payment protocol?
In-Reply-To: <CAKm8k+3Eohr9OtA+tSp9nXuQpxfiAwC6R61zZWSB3WMAxCZ=Vw@mail.gmail.com>
References: <CANAnSg3Bt0e7CfUcJXe96xhU6nqif9ey_vurZMZkSa9OHjHStw@mail.gmail.com>	<CABsx9T0SMi6Gp4JY=CpHxLEu5pVkvDmnug7PsY7m_dvtT7khzg@mail.gmail.com>	<531DFDF8.80008@gmail.com>
	<531E52FE.5090107@jerviss.org>	<531E5454.1030601@gmail.com>	<CAJHLa0NZkzQQvMxgCJAJGT=Yn6vrVNK8Bg7RAfAjctpnrfg5zA@mail.gmail.com>	<CABsx9T3eViYDsEmLm7ceimJNwci3mCOxWoVnVZHrqp7pDmm0+g@mail.gmail.com>	<CANAnSg2kzPF0886PsQW8chzsWi6Urp+=-x+9bbv8Mv6hmpvBPw@mail.gmail.com>	<CAJHLa0Mu2kiv3CCme7BPwzWtT++PNLQ2aAKdLyA8LFTtXEg9fg@mail.gmail.com>	<CABsx9T0Lvg84qFVRbc7Ef4vZEQj9eO7Jhup5PTRLLeuJFvXi-w@mail.gmail.com>	<CAJHLa0Mn2_OKDH_XUXfz49hPWGdCN0gs6S3wbtc=qHkg+sJ2Xw@mail.gmail.com>	<CABsx9T3fKBCFd7d-yP-0WgN2TBwN8Es=hZqxPBnThESKz1jLvA@mail.gmail.com>	<CAJHLa0NHKWqXMd23Fr46adGinQmjcLRxyBB-Ra9tJwu4Ein7GA@mail.gmail.com>
	<CAKm8k+3Eohr9OtA+tSp9nXuQpxfiAwC6R61zZWSB3WMAxCZ=Vw@mail.gmail.com>
Message-ID: <531F2DC6.3050502@gmx.de>


> Trezor and Electrum may be earlier than this.

Sorry for not joining the discussion earlier.

I have postponed the release of bip32 features in Electrum due to 
ongoing discussions with Trezor and bitcoinj developers.
I planned to post a summary in a separate thread, but this info is also 
relevant for this thread, so I'm posting here.
(sorry if this is a bit offtopic, though)

I plan to create a 2-factor authentication service that uses p2sh 
addresses in Electrum.
All addresses are derived from the wallet root seed, and should be 
recoverable from it.
(of course this departs from scenarios where master keys are generated 
independently;
my opinion is that both should be possible)

So, when the user activates 2fa protection, the root private key is 
deleted from their hard drive, as well as the
master private key of one of the branches used to create p2sh addresses 
(which is sent to a remote server).

See this (fairly old) description here for more details: 
https://bitcointalk.org/index.php?topic=274182.0

Since I still want to be able to generate 1of1 accounts after the 2fa 
protection is activated,
1of 1 accounts should not be generated directly from the root of the tree.
Thus, an extra level must be inserted in the tree.

For example, 1of1 addresses can be derived as follows:

m/reserved'/n'

where n is the account index, and "reserved" is an index that indicates 
the type of address.
(0 would be reserved for 1of1 addresses)

slush suggested that another layer of derivation would be useful, in 
order to use wallets
with altcoins on the same seed. This lead to this type of derivation:

m/coin'/reserved'/n'

where "coin" would be 0 for Bitcoin, and "reserved" would be 0 for 1of1 
addresses

Thomas




From c1.sf-bitcoin at niftybox.net  Tue Mar 11 17:11:48 2014
From: c1.sf-bitcoin at niftybox.net (Miron)
Date: Tue, 11 Mar 2014 10:11:48 -0700
Subject: [Bitcoin-development] Multisign payment protocol?
In-Reply-To: <CANEZrP2U_mpGSnVMr6ZBTtVPUmnKRBcEaehHXyN67WmLxLuBjw@mail.gmail.com>
References: <CANAnSg3Bt0e7CfUcJXe96xhU6nqif9ey_vurZMZkSa9OHjHStw@mail.gmail.com>
	<CABsx9T0SMi6Gp4JY=CpHxLEu5pVkvDmnug7PsY7m_dvtT7khzg@mail.gmail.com>
	<531DFDF8.80008@gmail.com> <531E52FE.5090107@jerviss.org>
	<531E5454.1030601@gmail.com>
	<CAJHLa0NZkzQQvMxgCJAJGT=Yn6vrVNK8Bg7RAfAjctpnrfg5zA@mail.gmail.com>
	<CABsx9T3eViYDsEmLm7ceimJNwci3mCOxWoVnVZHrqp7pDmm0+g@mail.gmail.com>
	<CANAnSg2kzPF0886PsQW8chzsWi6Urp+=-x+9bbv8Mv6hmpvBPw@mail.gmail.com>
	<CAJHLa0Mu2kiv3CCme7BPwzWtT++PNLQ2aAKdLyA8LFTtXEg9fg@mail.gmail.com>
	<CABsx9T0Lvg84qFVRbc7Ef4vZEQj9eO7Jhup5PTRLLeuJFvXi-w@mail.gmail.com>
	<CAJHLa0Mn2_OKDH_XUXfz49hPWGdCN0gs6S3wbtc=qHkg+sJ2Xw@mail.gmail.com>
	<CABsx9T3fKBCFd7d-yP-0WgN2TBwN8Es=hZqxPBnThESKz1jLvA@mail.gmail.com>
	<CAJHLa0NHKWqXMd23Fr46adGinQmjcLRxyBB-Ra9tJwu4Ein7GA@mail.gmail.com>
	<CAKm8k+3Eohr9OtA+tSp9nXuQpxfiAwC6R61zZWSB3WMAxCZ=Vw@mail.gmail.com>
	<CANEZrP2U_mpGSnVMr6ZBTtVPUmnKRBcEaehHXyN67WmLxLuBjw@mail.gmail.com>
Message-ID: <1394557907.9025.125.camel@mimiz>

On Tue, 2014-03-11 at 16:18 +0100, Mike Hearn wrote:
> You can follow HDW progress in bitcoinj on this branch:
> 
> 
>   https://github.com/bitcoinj/bitcoinj/commits/keychain
> 
>    
> I've been working on it for a couple of months now. Electrum (Thomas
> V) is also making good progress, and Trezor already uses HD wallets. I
> think most popular end user wallets except blockchain.info and Bitcoin
> Core will support HDW soon enough.

Interestingly, Blockchain's android wallet is based on Android Wallet /
bitcoinj.  So with HD in bitcoinj we would get Multibit, Android Wallet
(Andreas Schildbach's) and remove one roadblock to Blockchain going HD.
Electrum HD seems more or less ready.  So I'm optimistic that we'll see
a pretty fast transition to HD for the majority of the user base.

HD is important for some multisig flows, including the watchdog type
where you want to detect change going back to the wallet.

> 
> At any rate, as Gavin said already, the best way to make a feature you
> want happen is just to write it. Devrandom is already working on a
> watchdog service, as is another group (TrustedCoin), and that's an
> obvious use for multisig/p2sh. They have API's already, it's just a
> case of standardising them once we get more experience.

We have a proposed flow for watchdog type multisig
here:

https://cryptocorp.co/technology.htm

and a reference implementation off the Electrum 2.0 branch.

It actually works just like a regular spend from a UX point of view,
unless the watchdog decides that it needs a second factor for a risky
transaction.  With a risky transaction, the user just gets a
callback or enters an OTP.

-- 
Miron





From odinn.cyberguerrilla at riseup.net  Tue Mar 11 17:41:44 2014
From: odinn.cyberguerrilla at riseup.net (Odinn Cyberguerrilla)
Date: Tue, 11 Mar 2014 10:41:44 -0700
Subject: [Bitcoin-development] Multisign payment protocol?
In-Reply-To: <CABsx9T0Lvg84qFVRbc7Ef4vZEQj9eO7Jhup5PTRLLeuJFvXi-w@mail.gmail.com>
References: <CANAnSg3Bt0e7CfUcJXe96xhU6nqif9ey_vurZMZkSa9OHjHStw@mail.gmail.com>
	<CABsx9T0SMi6Gp4JY=CpHxLEu5pVkvDmnug7PsY7m_dvtT7khzg@mail.gmail.com>
	<531DFDF8.80008@gmail.com> <531E52FE.5090107@jerviss.org>
	<531E5454.1030601@gmail.com>
	<CAJHLa0NZkzQQvMxgCJAJGT=Yn6vrVNK8Bg7RAfAjctpnrfg5zA@mail.gmail.com>
	<CABsx9T3eViYDsEmLm7ceimJNwci3mCOxWoVnVZHrqp7pDmm0+g@mail.gmail.com>
	<CANAnSg2kzPF0886PsQW8chzsWi6Urp+=-x+9bbv8Mv6hmpvBPw@mail.gmail.com>
	<CAJHLa0Mu2kiv3CCme7BPwzWtT++PNLQ2aAKdLyA8LFTtXEg9fg@mail.gmail.com>
	<CABsx9T0Lvg84qFVRbc7Ef4vZEQj9eO7Jhup5PTRLLeuJFvXi-w@mail.gmail.com>
Message-ID: <4fca6b510dd57d2f92affeb988d2ee5d.squirrel@fulvetta.riseup.net>

Hello,

I wanted to just add a very brief note to this discussion, that presently
for multisignature creation and management (new transaction etc) I've been
using this: https://coinb.in/multisig/

There were some initial bumps in the road but they were worked out,

see full thread more or less beginning from here:

https://bitcointalk.org/index.php?topic=390046.msg4687868#msg4687868

Curious as to what wallets actually support multisig / P2SH at this point?
Unsure.  Am assuming more than previously.



> On Tue, Mar 11, 2014 at 8:38 AM, Jeff Garzik <jgarzik at bitpay.com> wrote:
>
>> On Tue, Mar 11, 2014 at 7:43 AM, Drak <drak at zikula.org> wrote:
>> > I very much like the idea of assuming each party uses HD wallets, that
>> > certainly simplifies things greatly.
>>
>> It also assumes a reality different from our current one.
>>
>
> Multisig wallets are a different reality from our current one, so when we
> move to that new reality we should do it correctly from the beginning.
>
> --
> --
> Gavin Andrese
> ------------------------------------------------------------------------------
> Learn Graph Databases - Download FREE O'Reilly Book
> "Graph Databases" is the definitive new guide to graph databases and their
> applications. Written by three acclaimed leaders in the field,
> this first edition is now available. Download your free book today!
> http://p.sf.net/sfu/13534_NeoTech_______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>





From pete at petertodd.org  Tue Mar 11 21:12:45 2014
From: pete at petertodd.org (Peter Todd)
Date: Tue, 11 Mar 2014 17:12:45 -0400
Subject: [Bitcoin-development] Multisign payment protocol?
In-Reply-To: <CAJHLa0Mn2_OKDH_XUXfz49hPWGdCN0gs6S3wbtc=qHkg+sJ2Xw@mail.gmail.com>
References: <CABsx9T0SMi6Gp4JY=CpHxLEu5pVkvDmnug7PsY7m_dvtT7khzg@mail.gmail.com>
	<531DFDF8.80008@gmail.com> <531E52FE.5090107@jerviss.org>
	<531E5454.1030601@gmail.com>
	<CAJHLa0NZkzQQvMxgCJAJGT=Yn6vrVNK8Bg7RAfAjctpnrfg5zA@mail.gmail.com>
	<CABsx9T3eViYDsEmLm7ceimJNwci3mCOxWoVnVZHrqp7pDmm0+g@mail.gmail.com>
	<CANAnSg2kzPF0886PsQW8chzsWi6Urp+=-x+9bbv8Mv6hmpvBPw@mail.gmail.com>
	<CAJHLa0Mu2kiv3CCme7BPwzWtT++PNLQ2aAKdLyA8LFTtXEg9fg@mail.gmail.com>
	<CABsx9T0Lvg84qFVRbc7Ef4vZEQj9eO7Jhup5PTRLLeuJFvXi-w@mail.gmail.com>
	<CAJHLa0Mn2_OKDH_XUXfz49hPWGdCN0gs6S3wbtc=qHkg+sJ2Xw@mail.gmail.com>
Message-ID: <20140311211245.GA31523@savin>

On Tue, Mar 11, 2014 at 10:13:48AM -0400, Jeff Garzik wrote:
> Sure, but I don't see wallets being able to _assume_ _remote_ parties
> have an HD wallet for a long, long time.  Interoperability common
> sense implies the environment will be heterogenous, perhaps forever,
> invalidating assume-each-party-uses-HD logic.

Maybe never: you can implement a wallet that uses stealth addresses for
change, and doing appears to be advantageous in some scenarious with
regard to privacy.

-- 
'peter'[:-1]@petertodd.org
00000000000000a636d318d7384d2891c788af10e50b8d1e27b64df847f9117b
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 685 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140311/cb72c940/attachment.sig>

From root at xeno-genesis.com  Wed Mar 12 00:29:09 2014
From: root at xeno-genesis.com (Jean-Pierre Rupp)
Date: Wed, 12 Mar 2014 00:29:09 +0000
Subject: [Bitcoin-development] Multisign payment protocol?
In-Reply-To: <4fca6b510dd57d2f92affeb988d2ee5d.squirrel@fulvetta.riseup.net>
References: <CANAnSg3Bt0e7CfUcJXe96xhU6nqif9ey_vurZMZkSa9OHjHStw@mail.gmail.com>	<CABsx9T0SMi6Gp4JY=CpHxLEu5pVkvDmnug7PsY7m_dvtT7khzg@mail.gmail.com>	<531DFDF8.80008@gmail.com>
	<531E52FE.5090107@jerviss.org>	<531E5454.1030601@gmail.com>	<CAJHLa0NZkzQQvMxgCJAJGT=Yn6vrVNK8Bg7RAfAjctpnrfg5zA@mail.gmail.com>	<CABsx9T3eViYDsEmLm7ceimJNwci3mCOxWoVnVZHrqp7pDmm0+g@mail.gmail.com>	<CANAnSg2kzPF0886PsQW8chzsWi6Urp+=-x+9bbv8Mv6hmpvBPw@mail.gmail.com>	<CAJHLa0Mu2kiv3CCme7BPwzWtT++PNLQ2aAKdLyA8LFTtXEg9fg@mail.gmail.com>	<CABsx9T0Lvg84qFVRbc7Ef4vZEQj9eO7Jhup5PTRLLeuJFvXi-w@mail.gmail.com>
	<4fca6b510dd57d2f92affeb988d2ee5d.squirrel@fulvetta.riseup.net>
Message-ID: <531FAA55.2020108@xeno-genesis.com>

Hello people,

We are working on some of this stuff. We had some very early draft on
how we envisioned multisig happening. It is all implemented in Haskoin
available as multiple repositories in Github. I am happy to see this
gathering momentum.

Our multisig system uses BIP-0032 HD wallets, and there will soon be
BIP-0039 support for keys compatibility.

Our wallet uses synced trees rooted at the extended pubkeys of the
participants. Currently we are sorting public keys in the scripts to
avoid ambiguity.

Download haskoin-wallet:

cabal install haskoin-wallet

Check out the hw command (installed in ~/.cabal/bin/hw). Use importtx to
bring transactions into the wallet. You must initialize first with a
seed and create an account. It supports both regular and multisig accounts.

Perhaps this can lead to interesting discussions on key exchange, and
the appropriate handling of wallet metadata. I?d love to work on a
proper standard that could lead us to compatible implementations.

This document explains how we do it now:

http://haskoin.com/~xeno/hd-multisig-wallet.html

Cheers!

-- 
Be Happy :)

-------------- next part --------------
A non-text attachment was scrubbed...
Name: 0xFF4BF34C.asc
Type: application/pgp-keys
Size: 20270 bytes
Desc: not available
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140312/86dc878d/attachment.bin>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: 0xFF4BF34C.asc
Type: application/pgp-keys
Size: 20269 bytes
Desc: not available
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140312/86dc878d/attachment-0001.bin>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 901 bytes
Desc: OpenPGP digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140312/86dc878d/attachment.sig>

From etotheipi at gmail.com  Wed Mar 12 02:35:52 2014
From: etotheipi at gmail.com (Alan Reiner)
Date: Tue, 11 Mar 2014 22:35:52 -0400
Subject: [Bitcoin-development] Multisign payment protocol?
In-Reply-To: <531FAA55.2020108@xeno-genesis.com>
References: <CANAnSg3Bt0e7CfUcJXe96xhU6nqif9ey_vurZMZkSa9OHjHStw@mail.gmail.com>	<CABsx9T0SMi6Gp4JY=CpHxLEu5pVkvDmnug7PsY7m_dvtT7khzg@mail.gmail.com>	<531DFDF8.80008@gmail.com>	<531E52FE.5090107@jerviss.org>	<531E5454.1030601@gmail.com>	<CAJHLa0NZkzQQvMxgCJAJGT=Yn6vrVNK8Bg7RAfAjctpnrfg5zA@mail.gmail.com>	<CABsx9T3eViYDsEmLm7ceimJNwci3mCOxWoVnVZHrqp7pDmm0+g@mail.gmail.com>	<CANAnSg2kzPF0886PsQW8chzsWi6Urp+=-x+9bbv8Mv6hmpvBPw@mail.gmail.com>	<CAJHLa0Mu2kiv3CCme7BPwzWtT++PNLQ2aAKdLyA8LFTtXEg9fg@mail.gmail.com>	<CABsx9T0Lvg84qFVRbc7Ef4vZEQj9eO7Jhup5PTRLLeuJFvXi-w@mail.gmail.com>	<4fca6b510dd57d2f92affeb988d2ee5d.squirrel@fulvetta.riseup.net>
	<531FAA55.2020108@xeno-genesis.com>
Message-ID: <531FC808.7060709@gmail.com>

I might as well throw in a word about Armory.  After our next release in
a couple weeks, we will be going full-speed at new wallets and BIP32
integration.  Just like Jean-Pierre mentioned, we'll be using parallel
trees to generate P2SH addresses after sorting the keys
lexicographically.  We plan to introduce the concept of a wallet
"bundle" (that name is far from concrete... I'd love a better word). 
All wallets in a bundle are protected by the same backup, and stored in
the same file.  The default behavior will be use new branches in the
same BIP32 tree when a user creates a new "wallet", though we will allow
multiple bundles in advanced and expert usermode (which is needed to
have watching-only wallets from a different seed created from an offline
computer).

However, we do plan to allow separate parties to create
multisig-intended wallets with public parts that can be exported and
combined with other users.  We feel this is critical, as it allows for
linked wallets in which there was never a single-point of failure from
key-generation to signing.  This is especially important for contexts
where employees may be handling a company's Bitcoins wallets.

On this topic, I have gotten a lot of inquiries into BIP 38 and 39.  I
was not clear whether those BIPs were worth prioritizing ... i.e. is
there a general consensus from a variety of wallet developers that they
should be supported?  Rather, I'm happy to start prioritizing them if
others do too, but I haven't spent much time trying to understand them
to even know if they're mature, yet.

-Alan


On 03/11/2014 08:29 PM, Jean-Pierre Rupp wrote:
> Hello people,
>
> We are working on some of this stuff. We had some very early draft on
> how we envisioned multisig happening. It is all implemented in Haskoin
> available as multiple repositories in Github. I am happy to see this
> gathering momentum.
>
> Our multisig system uses BIP-0032 HD wallets, and there will soon be
> BIP-0039 support for keys compatibility.
>
> Our wallet uses synced trees rooted at the extended pubkeys of the
> participants. Currently we are sorting public keys in the scripts to
> avoid ambiguity.
>
> Download haskoin-wallet:
>
> cabal install haskoin-wallet
>
> Check out the hw command (installed in ~/.cabal/bin/hw). Use importtx to
> bring transactions into the wallet. You must initialize first with a
> seed and create an account. It supports both regular and multisig accounts.
>
> Perhaps this can lead to interesting discussions on key exchange, and
> the appropriate handling of wallet metadata. I?d love to work on a
> proper standard that could lead us to compatible implementations.
>
> This document explains how we do it now:
>
> http://haskoin.com/~xeno/hd-multisig-wallet.html
>
> Cheers!
>
>
>
> ------------------------------------------------------------------------------
> Learn Graph Databases - Download FREE O'Reilly Book
> "Graph Databases" is the definitive new guide to graph databases and their
> applications. Written by three acclaimed leaders in the field,
> this first edition is now available. Download your free book today!
> http://p.sf.net/sfu/13534_NeoTech
>
>
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140311/ed33704b/attachment.html>

From elombrozo at gmail.com  Wed Mar 12 02:48:13 2014
From: elombrozo at gmail.com (Eric Lombrozo)
Date: Tue, 11 Mar 2014 19:48:13 -0700
Subject: [Bitcoin-development] Multisign payment protocol?
In-Reply-To: <531FC808.7060709@gmail.com>
References: <CANAnSg3Bt0e7CfUcJXe96xhU6nqif9ey_vurZMZkSa9OHjHStw@mail.gmail.com>	<CABsx9T0SMi6Gp4JY=CpHxLEu5pVkvDmnug7PsY7m_dvtT7khzg@mail.gmail.com>	<531DFDF8.80008@gmail.com>	<531E52FE.5090107@jerviss.org>	<531E5454.1030601@gmail.com>	<CAJHLa0NZkzQQvMxgCJAJGT=Yn6vrVNK8Bg7RAfAjctpnrfg5zA@mail.gmail.com>	<CABsx9T3eViYDsEmLm7ceimJNwci3mCOxWoVnVZHrqp7pDmm0+g@mail.gmail.com>	<CANAnSg2kzPF0886PsQW8chzsWi6Urp+=-x+9bbv8Mv6hmpvBPw@mail.gmail.com>	<CAJHLa0Mu2kiv3CCme7BPwzWtT++PNLQ2aAKdLyA8LFTtXEg9fg@mail.gmail.com>	<CABsx9T0Lvg84qFVRbc7Ef4vZEQj9eO7Jhup5PTRLLeuJFvXi-w@mail.gmail.com>	<4fca6b510dd57d2f92affeb988d2ee5d.squirrel@fulvetta.riseup.net>
	<531FAA55.2020108@xeno-genesis.com> <531FC808.7060709@gmail.com>
Message-ID: <9A6499BC-E546-45CC-A7EF-5182FC86052D@gmail.com>

Ciphrex CoinVault (https://ciphrex.com) is currently using parallel trees with lexicographic sorting of keys.

CoinVault is also using a partially signed transaction format whereby 0-length placeholders are used for missing signatures in the transaction scripts. Once all the required signatures to satisfy the policy are present, the remaining zero-length placeholders are removed so the transaction can be broadcast to the network. These partially signed transactions can be shared with other parties to an account or other signing devices for the purpose of requesting additional signatures.

-Eric


On Mar 11, 2014, at 7:35 PM, Alan Reiner <etotheipi at gmail.com> wrote:

> I might as well throw in a word about Armory.  After our next release in a couple weeks, we will be going full-speed at new wallets and BIP32 integration.  Just like Jean-Pierre mentioned, we'll be using parallel trees to generate P2SH addresses after sorting the keys lexicographically.  We plan to introduce the concept of a wallet "bundle" (that name is far from concrete... I'd love a better word).  All wallets in a bundle are protected by the same backup, and stored in the same file.  The default behavior will be use new branches in the same BIP32 tree when a user creates a new "wallet", though we will allow multiple bundles in advanced and expert usermode (which is needed to have watching-only wallets from a different seed created from an offline computer).
> 
> However, we do plan to allow separate parties to create multisig-intended wallets with public parts that can be exported and combined with other users.  We feel this is critical, as it allows for linked wallets in which there was never a single-point of failure from key-generation to signing.  This is especially important for contexts where employees may be handling a company's Bitcoins wallets.
> 
> On this topic, I have gotten a lot of inquiries into BIP 38 and 39.  I was not clear whether those BIPs were worth prioritizing ... i.e. is there a general consensus from a variety of wallet developers that they should be supported?  Rather, I'm happy to start prioritizing them if others do too, but I haven't spent much time trying to understand them to even know if they're mature, yet.
> 
> -Alan
> 
> 
> On 03/11/2014 08:29 PM, Jean-Pierre Rupp wrote:
>> Hello people,
>> 
>> We are working on some of this stuff. We had some very early draft on
>> how we envisioned multisig happening. It is all implemented in Haskoin
>> available as multiple repositories in Github. I am happy to see this
>> gathering momentum.
>> 
>> Our multisig system uses BIP-0032 HD wallets, and there will soon be
>> BIP-0039 support for keys compatibility.
>> 
>> Our wallet uses synced trees rooted at the extended pubkeys of the
>> participants. Currently we are sorting public keys in the scripts to
>> avoid ambiguity.
>> 
>> Download haskoin-wallet:
>> 
>> cabal install haskoin-wallet
>> 
>> Check out the hw command (installed in ~/.cabal/bin/hw). Use importtx to
>> bring transactions into the wallet. You must initialize first with a
>> seed and create an account. It supports both regular and multisig accounts.
>> 
>> Perhaps this can lead to interesting discussions on key exchange, and
>> the appropriate handling of wallet metadata. I?d love to work on a
>> proper standard that could lead us to compatible implementations.
>> 
>> This document explains how we do it now:
>> 
>> http://haskoin.com/~xeno/hd-multisig-wallet.html
>> 
>> Cheers!
>> 
>> 
>> 
>> ------------------------------------------------------------------------------
>> Learn Graph Databases - Download FREE O'Reilly Book
>> "Graph Databases" is the definitive new guide to graph databases and their
>> applications. Written by three acclaimed leaders in the field,
>> this first edition is now available. Download your free book today!
>> http://p.sf.net/sfu/13534_NeoTech
>> 
>> 
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 
> ------------------------------------------------------------------------------
> Learn Graph Databases - Download FREE O'Reilly Book
> "Graph Databases" is the definitive new guide to graph databases and their
> applications. Written by three acclaimed leaders in the field,
> this first edition is now available. Download your free book today!
> http://p.sf.net/sfu/13534_NeoTech_______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140311/d91af01e/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 801 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140311/d91af01e/attachment.sig>

From pete at petertodd.org  Wed Mar 12 09:44:24 2014
From: pete at petertodd.org (Peter Todd)
Date: Wed, 12 Mar 2014 05:44:24 -0400
Subject: [Bitcoin-development] New side channel attack that can recover
 Bitcoin keys
In-Reply-To: <CAAS2fgRTuOaSbTqnCOp=783gLCeh7ZU0FWbxzMS6pe8WKPTcLQ@mail.gmail.com>
References: <CANEZrP25N7W_MeZin_pyVQP5pC8bt5yqJzTXt_tN1P6kWb5i2w@mail.gmail.com>
	<53174F20.10207@gmail.com> <20140305193910.GA24917@tilt>
	<CAAS2fgR+q4fDs3JfX9az8b17Dk7VKjC3SxYja-2spwU-kM74fA@mail.gmail.com>
	<20140305203222.GD24917@tilt>
	<CAAS2fgRTuOaSbTqnCOp=783gLCeh7ZU0FWbxzMS6pe8WKPTcLQ@mail.gmail.com>
Message-ID: <20140312094424.GD15281@savin>

On Wed, Mar 05, 2014 at 12:54:04PM -0800, Gregory Maxwell wrote:
> On Wed, Mar 5, 2014 at 12:32 PM, Peter Todd <pete at petertodd.org> wrote:
> > That's nice, but I wrote my advice to show people how even if they don't
> > know any crypto beyond what the "black boxes" do - the absolute minimum
> > you need to know to write any Bitcoin software - you can still defend
> > yourself against that attack and many others.
> 
> But it's still incomplete.
> 
> Say you have an address? used only once!? with a txout with a lot of value.
> 
> Someone starts paying you small amounts to that address over and over
> again. You haven't asked them to, they're just doing it.
> 
> Do you ignore the funds?? maybe tell some customer that was ignorantly
> paying you over and over again to a single address "sorry, those are
> my rules: I only acknowledge the first payment, those funds are
> lost!".
> 
> No, of course not.  You spend the darn coins and if you're on a shared
> host perhaps you disclose a private key.
> 
> The probability of an attack actually going on is low enough compared
> to the cost of spending the coins in that case that even someone with
> good knoweldge of the risks will choose to do so.
> 
> So absolutely, not reusing addresses massively increases your safety
> and limits losses when there is theft. But it isn't enough alone. (Nor
> is smarter signing, considering complex software like this has bugs
> and its hard to be confident that something is side channel free? esp
> when you allow attacker interference).

I think you're misunderstanding me: I'm assuming one of the n parties
signing transactions in my multi-factor authentication scheme is
uncompromised - much easier to do when it's a low-bandwidth box sitting
in a secure location.

Not re-using keys is nice too of course, and while not perfect - your
above scenario - certainely helps limit losses.

-- 
'peter'[:-1]@petertodd.org
0000000000000000afcad9265e8b44bf1171a08165c09b329fab2893bf13ec69
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 685 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140312/5cbcef28/attachment.sig>

From mike at plan99.net  Wed Mar 12 09:48:01 2014
From: mike at plan99.net (Mike Hearn)
Date: Wed, 12 Mar 2014 10:48:01 +0100
Subject: [Bitcoin-development] Multisign payment protocol?
In-Reply-To: <9A6499BC-E546-45CC-A7EF-5182FC86052D@gmail.com>
References: <CANAnSg3Bt0e7CfUcJXe96xhU6nqif9ey_vurZMZkSa9OHjHStw@mail.gmail.com>	<CABsx9T0SMi6Gp4JY=CpHxLEu5pVkvDmnug7PsY7m_dvtT7khzg@mail.gmail.com>	<531DFDF8.80008@gmail.com>	<531E52FE.5090107@jerviss.org>	<531E5454.1030601@gmail.com>	<CAJHLa0NZkzQQvMxgCJAJGT=Yn6vrVNK8Bg7RAfAjctpnrfg5zA@mail.gmail.com>	<CABsx9T3eViYDsEmLm7ceimJNwci3mCOxWoVnVZHrqp7pDmm0+g@mail.gmail.com>	<CANAnSg2kzPF0886PsQW8chzsWi6Urp+=-x+9bbv8Mv6hmpvBPw@mail.gmail.com>	<CAJHLa0Mu2kiv3CCme7BPwzWtT++PNLQ2aAKdLyA8LFTtXEg9fg@mail.gmail.com>	<CABsx9T0Lvg84qFVRbc7Ef4vZEQj9eO7Jhup5PTRLLeuJFvXi-w@mail.gmail.com>	<4fca6b510dd57d2f92affeb988d2ee5d.squirrel@fulvetta.riseup.net>	<531FAA55.2020108@xeno-genesis.com>
	<531FC808.7060709@gmail.com>
	<9A6499BC-E546-45CC-A7EF-5182FC86052D@gmail.com>
Message-ID: <53202D51.8010008@plan99.net>

Good to see so much activity! But please do remember, there's more to 
"multisig" than just keys - you need the whole user experience to be 
planned out and specced for fully interoperable implementations.

For the "group account for an organisation" feature, you don't really 
want to expose end users to the notion of a key. Historically this has 
just led to confusion (and an ugly visual explosion of padlocks and 
small metal objects :) It'd be much better for the UI to be designed in 
terms of people, perhaps with a bit of social network integration to 
avoid having to set up profiles, and then a "group spend" feature would 
behind the scenes rendezvous with the others and swap signatures around, 
etc.  So for interop, you'd need to define all the rendezvous protocols 
as well.
> CoinVault is also using a partially signed transaction format whereby 
> 0-length placeholders are used for missing signatures in the 
> transaction scripts.
I don't know how you are implementing this/what framework you're using, 
but I suggest using placeholders that are the length of an actual 
expected signature, at least when forming the transaction. This is what 
bitcoinj will do because otherwise you could end up miscalculating the 
fee, which is based on the final size. See TransactionSignature.dummy() 
<http://plan99.net/%7Emike/bitcoinj/0.11/com/google/bitcoin/crypto/TransactionSignature.html#dummy%28%29> 
in the API.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140312/257756f4/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/pkcs7-signature
Size: 5971 bytes
Desc: S/MIME Cryptographic Signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140312/257756f4/attachment.p7s>

From jeanpaulkogelman at me.com  Wed Mar 12 03:17:50 2014
From: jeanpaulkogelman at me.com (Jean-Paul Kogelman)
Date: Tue, 11 Mar 2014 20:17:50 -0700
Subject: [Bitcoin-development] [RFC] Proposal: Base58 encoded HD Wallet
 root key with optional encryption
In-Reply-To: <682B9F30-7DDC-4A9D-886E-5454D5F45665@me.com>
References: <CANEZrP37a=EH+1P47opH0E-1TG9ozgw_1NzecJpRRJsMaZRLOw@mail.gmail.com>
	<81f77484-3ca9-40a7-a999-884260b26be5@me.com>
	<CAAS2fgSyegH8y1dYcijCSPLsC54mxeSNsN+3FQVDo5R9tWwAwQ@mail.gmail.com>
	<BF62F0D0-1D13-4F19-A8F6-F588F3060A64@me.com>
	<682B9F30-7DDC-4A9D-886E-5454D5F45665@me.com>
Message-ID: <A6F382CD-01F7-47DF-84F4-20F81BB64259@me.com>

Hi everyone,

We've been hard at work updating the spec to include features that were requested. We've removed the Scrypt dependency that was present in the initial drafts, added new KDFs, added plausible deniability and have a reference implementation.


Kind regards,


Jean-Paul Kogelman


---

Recent changes:

15-02-2014 - Updated wording of various parts.
06-02-2014 - Added Will Yager's implementation as reference.
05-02-2014 - Changed prefix to 2 bytes, 'RK' and 'rk' for clear version and encrypted version respectively.
05-02-2014 - Added entropy field to encrypted version, moved KDF field from prefix into entropy field.
05-02-2014 - Changed computation of H to use PBKDF2-HMAC-SHA512 instead of Scrypt.
05-02-2014 - Changed checksum field to bloom field in encrypted version. Now supports 2 passwords.
27-12-2013 - Added some clarifications such as password character set (UTF-8) and endianness of fields.
26-12-2013 - Changed checksum to double SHA256 of private key, added 3rd party KDF support.
01-10-2013 - Expanded the salt to be prefix + date + checksum and renamed 'master seed' to 'root key'.
24-07-2013 - Added user selectable KDF + parameters, encoded in the prefix.
22-07-2013 - Added 2 byte creation date field, as a result, the prefix is expanded to 3 bytes.


BIP: 
Title: Base58 encoded HD Wallet root key with optional encryption
Author: Jean-Paul Kogelman
Status: Draft
Type: Informational
Created: 18-07-2013

Abstract

This proposal describes a method for encoding and optionally encrypting a Bitcoin Hierarchical Deterministic (HD) Wallet root key. Encoded root keys are intended for use on paper wallets. Each string contains all the information needed to verify and reconstitute an HD wallet except for the optional passphrases. The encrypted version uses salting and a user selectable key derivation function (KDF) + parameters to resist brute-force attacks at varying degrees and optionally a second password for plausible deniability.

The method provides two encoding methodologies in 3 lengths each (16, 32 and 64 byte root keys). One is a clear version of the root key with verification information for integrity checking and the other is an encrypted representation.

Additionally a 2 byte compressed date field is present to limit the block chain rescan on wallet import.


Motivation

The extended private keys proposed in BIP 0032 are long, fixed length records and don't offer any form of security. The root key used to generate the HD wallet is typically shorter than the extended master private key that results from it. 

A compact representation of the root key is easier to handle and a 2-factor version of the root key record allows for safe storage and the creation of paper wallets by 3rd parties. The KDF and its parameters are user selectable, allowing for a varying level of resistance against brute force attacks. This proposal currently defines 5 sets of parameters with room for 27 more that can be defined at a later date. Implementors are advised to contact the author with new KDF proposals.

Copyright

This proposal is hereby placed in the public domain.

Rationale

User story: As a Bitcoin user who uses HD wallets, I would like the ability to store my wallet root key in a compact form as a paper wallet.

User story: As a Bitcoin user who uses HD wallets, I would like the ability to have a 3rd party create a paper wallet with my root key in it, without having access to the funds stored in the wallet.

User story: As a Bitcoin user who uses HD wallets, I would like the ability to choose the strength of the root key depending on my security requirements and how I wish to store it. 

User story: As a Bitcoin user who uses HD wallets, I would like the ability to import a root key into a simplified payment verification (SPV) client without having to redownload the entire block chain, but rater a limited range, to find associated transactions.

User story: As a Bitcoin user who uses HD wallets, I would like to choose the KDF and its parameters that is used to hash the passphrase that protects my root key to fit my security needs and available processing power. 

User story: As a Bitcoin user who uses HD wallets, I would like to outsource the KDF computation to a 3rd party with more processing power.

User story: As a Bitcoin user who uses HD wallets, I would like to have a second password that can decrypt a second root key.

Specification

This proposal makes use of the following functions and definitions:

All input/output text is to be UTF-8 encoded

AES256Encrypt, AES256Decrypt: The AES block cipher, applied in ECB mode.

SHA256, SHA512: The hash algorithms of the same name. 

HMAC-SHA512: The HMAC message authentication code algorithm, using SHA512 as the hash function

PBKDF2-HMAC-SHA512: The PBKDF2 key derivation algorithm, described in PKCS #5 v2.0 and RFC 2898, using HMAC-SHA512 as the pseudorandom function

Scrypt: The key stretching algorithm of the same name

Base58Check: The textual data encoding frequently used by various Bitcoin-related systems

"Root Key": The 16/32/64 byte value encoded in the wallet. This value is used to derive the private keys for addresses in the Bitcoin Wallet

"Master Key": The primary Bitcoin private key, which is derived from the Root Key

"||" refers to concatenation, not the logical OR operation

"G", "N": Constants defined as part of the secp256k1 elliptic curve. G is an elliptic curve point, and N is a large positive integer.

Prefix

The Base58Check representation of the wallet will start with "RK" (Root Key) if the wallet is unencrypted, and will start with "rk" if the wallet is encrypted.

Proposed specification

Unencrypted wallet:

Prefixes:
0x28C1: 16 byte root key, no encryption. 24 byte total length
0x4AC5: 32 byte root key, no encryption. 40 byte total length
0xFBB3: 64 byte root key, no encryption. 72 byte total length

These are constant bytes that appear at the beginning of the Base58Check-encoded record, and their presence causes the resulting string to have a predictable prefix.

"date" is a 2-byte, little endian field containing the number of weeks since jan 1st 2013. It is used to optimize blockchain scan upon wallet import.

"checksum" is the first 4 bytes of SHA256(SHA256(master_secret)), where master_secret is the "Master Secret Key (IL)" from the BIP32 specification. In other words, "checksum"=SHA256(SHA256(HMAC-SHA512("Bitcoin seed", root_key)[0:32]))[0:4].

"root_key" is the 16/32/64 byte root key used for the HD wallet

In summary, the clear wallet looks like this:
[prefix, 2 bytes][date, 2 bytes][checksum, 4 bytes][root_key, 16/32/64 bytes]

Range in Base58Check encoding for clear 16 byte root key (prefix RK):
Minimum value: RK52zvuD3xRhwto8JDTonxhru6awsFfNqKCTmT (based on 0x28 0xC1 plus twenty-two 0x00's)
Maximum value: RKCsfF9RpLnrxo1kp2o7mfWYeAV1NNYxWSMRym (based on 0x28 0xC1 plus twenty-two 0xFF's)

Range in Base58Check encoding for clear 32 byte root key (prefix RK):
Minimum value: RK15fXAj9BEMooghtx2gY5YrSh23LYKS8mZnaz8oYf1EDnqAwtAADGMVUDHG (based on 0x4A 0xC5 plus thirty-eight 0x00's)
Maximum value: RK5MUEoFU24QARcsX5HR2ieCjem468hDeQm4J2aH5zsCVJXUCGn6nsVQEFhN (based on 0x4A 0xC5 plus thirty-eight 0xFF's)

Range in Base58Check encoding for clear 64 byte root key (prefix RK):
Minimum value: RK1uXsCQAKqaa2s7YBDeaLS2KTqZcNjjQSgdSfDv4fqGkTw8KBfZ2ND4Cp7vHdzhjJ2C2Jtf4CwgScRnXvpzuQT2W4Vj2SgCyfBgpTzF (based on 0xFB 0xB3 plus seventy 0x00's)
Maximum value: RK3B9TMn55dey3an1oHpwB81FPZboakivYtqFvCaeknPzPK4iTvoFKzxVWKcD9YfJwjkyS36bqnSqjibUurcQ7J2EsQww5zPpJNzqjkw (based on 0xFB 0xB3 plus seventy 0xFF's)


Encrypted wallet:

Prefixes:

0xF83F: 16 byte root key, encrypted. 26 byte total length
0x6731: 32 byte root key, encrypted. 43 byte total length
0x4EB4: 64 byte root key, encrypted. 76 byte total length

These are constant bytes that appear at the beginning of the Base58Check-encoded record, and their presence causes the resulting string to have a predictable prefix.

"date" is a 2-byte, little endian field containing the number of weeks since jan 1st 2013. It is used to optimize blockchain scan upon wallet import. The maximum value of 0xFFFF results in: jan 1st 3269

"entropy" is a 2/3/4 byte (corresponding to whether the key is 16/32/64 bytes) field. The first five bits contain the KDF type, and all other bits contain random data. This is used as a salt to make cracking the wallet password harder.

"bloom_filter" is a 4 byte little-endian field containing a bloom filter to check that the user entered their password correctly.

"encrypted_root_key" is the 16/32/64 byte encrypted root key used for the HD wallet

In summary, the encrypted wallet looks like this:
[prefix, 2 bytes][date, 2 bytes][entropy, 2/3/4 bytes][bloom_filter, 4 bytes][encrypted_root_key, 16/32/64 bytes]


Range in Base58Check encoding for encrypted 16 byte root key (prefix rk):
Minimum value: rk2V4R2ys91WigNPL5nots6a97rfMnwTkPAb2XgNo (based on 0xF8 0x3F plus twenty-four 0x00's)
Maximum value: rk57mv9oertBLsHfncAvqnbetCBdNS1gFHQaFsD3p (based on 0xF8 0x3F plus twenty-four 0xFF's)

Range in Base58Check encoding for encrypted 32 byte root key (prefix rk):
Minimum value: rk1CYsqKjsbXa7uvncEaW4XSeVzcpq1U9yDMxd2cWwfkGf1FMjENaVThYpLRNwqo (based on 0x67 0x31 plus fourty-one 0x00's)
Maximum value: rk7Xw5b6fidaCk489LhaiMqHkZo7RYGTmzvJY9A5joxe8KXAn8BC66cmQPYYYvy8 (based on 0x67 0x31 plus fourty-one 0xFF's)

Range in Base58Check encoding for encrypted 64 byte root key (prefix rk):
Minimum value: rk48BmQWeQbATSXbP5U6XVsXRJTs4Ea1TVZBbHLPPsboCFyxDj2Jaz2JAJno97hq6dq2bANLuWydY8QSZgKVGhPRZazXt1swPXwzVLw1QnVAz (based on 0x4E 0xB4 plus seventy-four 0x00's)
Maximum value: rkCRtT9R9kuAapCaLQFif5uo8gUrjgKsvYmGGTpX2ZTjTfwe9M7A6KezTh7f4FDxfZFVbHypodMNnNdmWYb8mzTokHXVR1u7KicrLLFFu7GJW (based on 0x4E 0xB4 plus seventy-four 0xFF's)


Encoding of KDF + parameters:

A number of KDF functions are available, to accommodate a wide range of possible use cases. The KDFs are defined as follows:

ID	KDF	Parameters
0x00	scrypt	n = 2^14, r = 8, p = 8
0x01	scrypt	n = 2^16, r = 16, p = 16
0x02	scrypt	n = 2^18, r = 16, p = 16
0x08	PBKDF2-HMAC-SHA512	iterations = 216
0x09	PBKDF2-HMAC-SHA512	iterations = 221

All other possible values (3-7 and 10-31) are reserved.

Please note that KDFs 1 and 2 will probably not run on mobile devices. KDFs 8 and 9 are very memory efficient.

Generation of date:

The purpose of the date field is to make scanning the blockchain for transactions to/from this wallet faster. The date *must* be on or before the date of the first transaction to/from the wallet. If the date is unknown (e.g. on an embedded device) or the user does not wish to reveal the wallet creation date, this field can be set to zero (which may incur a performance penalty for the wallet software). When importing, it is advised to start scanning from a few days before the encoded date. The date field is a little-endian integer containing the number of weeks, rounded down, since Jan 1st 2013. 

Examples: 

sep 18th 2013 - jan 1st 2013 =  260 days =  37 weeks 1 day = rounded down becomes 0x0025
mar  3rd 2027 - jan 1st 2013 = 5174 days = 739 weeks 1 day = rounded down becomes 0x02E3

Derivation of Master Key from Root Key (please see BIP 0032 for a full description of HD wallets):

1. Take 16/32/64 byte Root Key. Call it S
2. Calculate I = HMAC-SHA512(key = "Bitcoin seed", msg = S)
3. Let IL = I[0:32]. IL is the Master Key
4. If IL is 0 or IL >= N, where N is the curve order of Secp256k1 (the elliptic curve used by Bitcoin), the Root Key is invalid and a new one should be chosen.

Encryption:

Let "passphrase" be the user's chosen passphrase
Let "fake_passphrase" be the user's chosen second passphrase, or a randomly generated string if the user chose not to use a second passphrase
Let "KDF" be the chosen key derivation function
Let "root_key" be the 16/32/64 byte Root Key

1. Create the correct "Prefix" and "Date" field
2. Create the random "Entropy" field and encode the KDF number in the top 5 bits
3. Let "salt" = Prefix || Date || Entropy
4. Calculate "preH" = HMAC-SHA512(key = salt, msg = passphrase)
5. Calculate "strongH" = KDF(msg = preH, salt = preH, output_len = 64) This step can be outsourced to a 3rd party, if desired.
6. Calculate "postH" = HMAC-SHA512(key = passphrase, msg = salt)
7. Calculate "H" = PBKDF-HMAC-SHA512(msg = postH, salt = strongH, iterations = 210, output_len = len(root_key) + 32)
8. Calculate "whitened_key" = root_key XOR H[0:len(root_key)]
9. Calculate "encrypted_key" = AES256Encrypt(message = whitened_key, key = HR), where HR is the last 32 bytes of H
10. Calculate "fake_key" by decrypting encrypted_key with fake_passphrase
11. Calculate "bloom_filter", containing root_key and fake_key. See the "Bloom Filter" section for more info.

encrypted_wallet = Prefix || Date || Entropy || bloom_filter || encrypted_key

Decryption of Root Key:

Let "passphrase" be the passphrase provided by the user

1. Extract "Prefix", "Date", "Entropy", "bloom_filter", and "encrypted_key" from the encrypted wallet
2. Determine the correct KDF from the top 5 bits of Entropy.
3. Let "salt" = Prefix || Date || Entropy
4. Perform steps 4 through 7 of Encryption to derive "H"
5. Calculate "whitened_key" = AES256Decrypt(message = encrypted_key, key = HR), where HR is the last 32 bytes of H
6. Calculate "root_key" = whitened_key XOR H[0:len(whitened_key)]
7. Verify that root_key is a member of bloom_filter

Bloom Filter:

The Bloom Filter is a data structure that allows us to check, within a range of probability, whether or not some piece of data has been added to it. In this case, we want to make sure that the user entered their password correctly, so we're checking that the decrypted root_key corresponds to the one that was added to the bloom filter when the wallet was created.

Bloom Filter Creation:

1. Let "bloom_filter" be an empty (set to all zeros) 32-bit, little-endian integer
2. To add an element "X" to bloom_filter, 
3. Calculate "E" = SHA256(SHA256(HMAC-SHA512("Bitcoin seed", X)[0:32]))[0:11]. Note, this corresponds to the same algorithm used as a checksum for un-encrypted wallets. It also corresponds to the double-SHA of the Master Key.
4. For each of the 11 bytes in E (call each byte "B"):
4a.   calculate "N" = B & 0x1F. N will range from 0 to 31. Set the Nth bit in bloom_filter to 1

You can add more items to the bloom filter, if desired. However, the filter parameters are optimized for 2 items (one "real" password/wallet, and one "fake" password/wallet). Please note that adding more items will drastically increase the chance of a false positive when entering a password. The chance of a password similar to a correct password passing the filter becomes more likely. This will generate a different Root Key and not the original one the user intended to decrypt.

Bloom Filter Verification:

Let "X" be some item
Let "bloom_filter" be the Bloom Filter you want to check if X belongs to

1. Calculate "x_only_filter", which is a Bloom Filter with X added to it
2. Ensure that any bit that is set in x_only_filter is also set in bloom_filter (i.e. x_only_filter & bloom_filter == x_only_filter)
3. If all bits set in x_only_filter are also set in bloom_filter, you know X is probably a member of bloom_filter. If not, X is definitely *not* a member of bloom_filter.

Suggestions for implementers of proposal with alt-chains

This proposal is network and coin agnostic (so long as the coin in question uses SECP256K1 ECC). Alt-coin implementors are advised to change the prefixes so that encoded root keys do not start with ?RK" or ?rk?.

Reference implementation

Python reference implementation: https://github.com/wyager/Encrypted-HD-wallet

Acknowledgements

Will Yager for the Python reference implementation and rewording of parts of this specification.
Mike Caldwell for BIP 0038, which this proposal borrows heavily from.

See Also

BIP 0032 Hierarchical Deterministic Wallets: https://en.bitcoin.it/wiki/BIP_0032
BIP 0038 Passphrase-protected private key: https://en.bitcoin.it/wiki/BIP_0038

Test vectors

The primary password will always decrypt the same root key, regardless of KDF selection, however, the secondary password will generate a different root key for every KDF.

Test 1:

Root Key	000102030405060708090a0b0c0d0e0f
Creation	04-02-2014
Clear	RK6nEaou4eFQC4SfrHtdh9jpnEme4K9dt2jBmG
Password	Satoshi
Public Address	15mKKb2eos1hWa6tisdPwwDC1a5J1y9nma
Private extended key	xprv9s21ZrQH143K3QTDL4LXw2F7HEK3wJUD2nW2nRk4stbPy6cq3jPPqjiChkVvvNKmPGJxWUtg6LnF5kejMRNNU3TGtRBeJgk33yuGBxrMPHi
Public extended key	xpub661MyMwAqRbcFtXgS5sYJABqqG9YLmC4Q1Rdap9gSE8NqtwybGhePY2gZ29ESFjqJoCu1Rupje8YtGqsefD265TMg7usUDFdp6W1EGMcet8
Second password	Alpaca
Encrypted (KDF0)	rk354bXH1JsXTwWmuvRskFWoeUX8hMjQiseNM7wj6
Public Address	1Ndr6DnQm5EefVhTdKjXC3vH5qGRa1FCng
Private extended key	xprv9s21ZrQH143K3TxQaa6hd8mPR9Bw2ue1H5TMjUYuUEPEDUTxK7PZ191poMob8zbU5hsckCQoBFYtQZzbgxtYz1acbLmFQtjcbWSYhQ7kSZE
Public extended key	xpub661MyMwAqRbcFx2sgbdhzGi7yB2RSNMreJNxXrxX2ZvD6Go6rehoYwLJecVAuhHhMPSuMStnLHbzQ4CCyPqbVyLP4F2SmiLTcE3oicmA81M
Encrypted (KDF1)	rk354bq4dXW8VB67XSZzQdVLFJFz64v1Dh1i12VTY
Public Address	12cbi9vTjpZ8RjinLc2fJp1iDkL96xMQoe
Private extended key	xprv9s21ZrQH143K4JxBYKwi5dGE59G4vtRGLiyinEPxMdgYdPe6UqMrgJneacME8JQuoskvEzEZ1vnHwW8i1h4Mwm5wj5BUPJWf764QfkkvFAQ
Public extended key	xpub661MyMwAqRbcGo2eeMUiSmCxdB6ZLM97hwuKacoZuyDXWByF2Ng7E778RrYidat9n9Ht5cYrdS4gwVBA2g8VHAro7b4Gbvo2NKTLP9STuvP
Encrypted (KDF8)	rk354dUN5yrKvrMQRneKJvdJFf77WDJw5ZfeeRt4H
Public Address	14z6Vm4TRxd9ueasFahwBxYJ8jfhwhX4bt
Private extended key	xprv9s21ZrQH143K2AaodGyHvDBQFrFcDdHVJj15zqJUkU1wuLS5kFxgE9rGBvh8rAUeenfhhwC91efxn8kHbhKGeTaQkkyGFvbKiAuLcx8t8qP
Public extended key	xpub661MyMwAqRbcEefGjJWJHM88ot66d61LfwvgoDi6JoYvn8mEHoGvmxAk3DfcWWuDBqMUmPoXA28pa2uMnQFxKQe21Df5uQAGADCpcdZHAGe
Encrypted (KDF9)	rk354dedikaytYJ7D4btpcVfGuakfixf5yj2SnTcX
Public Address	17tzY2huzjbcRNV7e7BshxQ8UPrZhznBgn
Private extended key	xprv9s21ZrQH143K3Xt1wRGXFZ6D76dGLyGTWxvPv1QhkRcyPCbi6kM7WJG9dH6X9UMmzoTwoix3BsnzKf7ZkkpinPw8hyGaNLWzmcbemJVUWTj
Public extended key	xpub661MyMwAqRbcG1xV3SoXch2wf8TkkRzJtBqziPpKJm9xFzvreHfN46adUXfeFiVokTrKsBvK3zBgDJcUThjDtXAZ2dw9SYg74YMFjENB4aa

Test 2:

Root Key	7f0ad7d595be13e6fe4cf1fa0fbb6ae9c26c5d9b09920709414982b6363d5844
Creation	04-02-2014
Clear	RK22qqMb3CozsQfTTbSVsLEgXcjekut99SuSHn6urU4vWxjiQneHWVYabWgv
Password	Nakamoto
Public Address	1A54ECavJaJAoLGqqNrPd9Y3cvSvkL2Roz
Private extended key	xprv9s21ZrQH143K3f9hMVvcbY4EX4CfxsEtc6C5BMkZtgGpTGpxAscoq7SLSAcL6k5dxaZ9s4SChrtfSFoKpijuwAnhuPn76eva6W8bDr118t3
Public extended key	xpub661MyMwAqRbcG9EATXTcxfzy563ANKxjyK7fykABT1ooL5A6iQw4NukpHShDxYgeso4NHscFmqcVEtdUt61c8RCf7FqXK9z6sgfkQvYBQPP
Second password	hunter2
Encrypted (KDF0)	rk2cMHki73WbrYgo7XK9kSr6CGBPsMjU3uZf3f3qxCv4QoGy63DkBoGJKhPdvUtp
Public Address	16UCUo31Y7qDMWSs68FBAW759X4K3PZ9kN
Private extended key	xprv9s21ZrQH143K2dojoDyxmK7SLnyqSvn56oysqu2Ctf24Rdux6JFLReRgcH5KAM1GxCTVxjpc13Mh18kSmYqUep5EkbDvQJfEEVeLZXhyuYj
Public extended key	xpub661MyMwAqRbcF7tCuFWy8T4AtppKrPVvU2uUeHRpSzZ3JSF6dqZaySkATZEZWFcAMxqhD7oTdcaufofFy1WGLF7U21rztvTv6qmGrPq7s2W
Encrypted (KDF1)	rk2cMJ1KizRTPbBv8zaECpcQEY66SiZcfM2yAuCpdjDbJsdgZu9xdoFDpGuTVRYe
Public Address	15PXuaVAiU2fEEAsUjxWYHtzoM4D6FaC5F
Private extended key	xprv9s21ZrQH143K35ajB7SFjQJAzrmGbAJyp7iBYxhB3DcY9CC8XW5GkAHXDe2HXG6hUS3iquPbGAPuZygXm43BgYamWxiDN5sFm7w12db4uvU
Public extended key	xpub661MyMwAqRbcFZfCH8yG6YEuYtbkzd2qBLdnMM6nbZ9X1zXH53PXHxc14vcMHtfJRGTZVgj2gz8sc6sUuYoFub9HaBzkfaxguH4Byqo9NhK
Encrypted (KDF8)	rk2cMNSiQsAATQ19Y12nhGuL2uksZVASxNXAdjqrU3KaVcLH71No442sH1YvcwDL
Public Address	13jQ3pnGznGNTC2LVxJz1m27opav8WPVvH
Private extended key	xprv9s21ZrQH143K3aA9djUAAX1ASAcdqtuHEXmypDNd8gNy5PH4nm7y4QrieVdw7iQgA46LCJJAxdcN4qrP87Tp8XzJQbw7aeH3LPK8G7Zj6YT
Public extended key	xpub661MyMwAqRbcG4Ecjm1AXewtzCT8FMd8bkhacbnEh1uwxBcDLJSDcDBCVnvvrsENPhxpCZ3FYVokSvwfJJFVU9KF3ctQQJp229pgcFLavKJ
Encrypted (KDF9)	rk2cMPALytexkDuxm6QREojvgzoKcgKNeURPXDTVzPdZmbfzM2R3RX75Qqu4Yk5r
Public Address	1NBQsYC1vhfbkEoiPWmUb1QN36cCsMxcti
Private extended key	xprv9s21ZrQH143K4X6wJWAQbDawhqb2DaQT7mjbPhqNBHmspzrD1J5kcnb5syHr9LQggN3PtmvkjbMVs4zgTyjWmqKS4ix7J92z59cvbkF5W1s
Public extended key	xpub661MyMwAqRbcH1BQQXhQxMXgFsRWd38JUzfCC6EyjdJrhoBMYqQ1AauZjGev413kscEPLn4s3XmiDoL1pevGUKACx5ZhhPHvujKaVpe5TRt

Test 3:

Root Key	fffcf9f6f3f0edeae7e4e1dedbd8d5d2cfccc9c6c3c0bdbab7b4b1aeaba8a5a29f9c999693908d8 a8784817e7b7875726f6c696663605d5a5754514e4b484542
Creation	04-02-2014
Clear	RK2BvY13FUD6bX25tA7XDyfAn7zbXSL8pR6TRE3EHZZ8qBm9qEyZRih8x1XhhcZwjcTfpe1Qjydn4KU dia8Wf1NshUusP1D38i88MLU9
Password	Vires In Numeris
Public Address	1JEoxevbLLG8cVqeoGKQiAwoWbNYSUyYjg
Private extended key	xprv9s21ZrQH143K31xYSDQpPDxsXRTUcvj2iNHm5NUtrGiGG5e2DtALGdso3pGz6ssrdK4PFmM8NSpSBHNqPqm55Qn3LqFtT2emdEXVYsCzC2U
Public extended key	xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB
Second password	Quis Custodiet Ipsos Custodes?
Encrypted (KDF0)	rk5ySVmNtFzgWZFXAehk6Akvf5PanApA5Y12arynxXZF7Lhc1YqaudukJFngEBXkpc4RGqqkM3ZW4RjE7HwhWTB5Uxi7pXy7vuKouQuZZzoTP
Public Address	1AbB8okTm3SgcHnqKskQFfBd1MndDq1G75
Private extended key	xprv9s21ZrQH143K4PUz4iSDMmUE9uovNGnZE6jZdKPDqozk8nBHBk3FRXo3tJEt4TFfo7Tkhnc9TAzUFvg7hsg7M1SddHF6nX9bBw9Tn968Aki
Public extended key	xpub661MyMwAqRbcGsZTAjyDiuQxhweQmjWQbKfARhnqQ9Xj1aWRjHMVyL7XjaDV9SNrb7S8YvGtTGUkrRLS3kTDbRKRq26khyJDyKDuquaBqRM
Encrypted (KDF1)	rk5ySWZriEipJWKyL6X8Rd86cgKn9qgGC7C4QYLVCjhyuBZiKXezzf6vjyJBXtFmP1f4qzaAAP5baRhKP4yCGo6LAU9keJCvRXoU77SUNmg1o
Public Address	1Fzh1NoMtYUBAoKQ2Lsb6rA81bKFfNx2az
Private extended key	xprv9s21ZrQH143K4KmLN9WLjPsVmKgVXPUfAScqkGeifQpTeXFw2X4ijfWNMDMtu4qfbbHZ69VSLcCMiGLHSLaQQY7Rb3PzHMRLLqVN6mjrGHP
Public extended key	xpub661MyMwAqRbcGoqoUB3M6XpEKMWyvrCWXfYSYf4LDkMSXKb5a4NyHTprCW3JAJ66rn947iM9iyzUoS4CSXhsDZyuaks5hueT9wtDSdm91ga
Encrypted (KDF8)	rk5ySbwggFoh8MZ1CnxqSeKwzag9ifrECtToowiRYKRgcueyMGX39yBGwxbY7ExKeTSmCRHokToThN8pxYWA9WQKrouVuatCMjcvX8PZ16tPf
Public Address	1AiALvRHrWwjViJn5Q6oki4qVZ5p7SepfB
Private extended key	xprv9s21ZrQH143K3CHptaD7aNZBUAYhjmCe5ceDLttwqKoQ3F73DRHNrSAVphAX2okZDWK82Eznf4bpmv9qjHZ7nzQjv2qNqXV8YwCWQEw2jiA
Public extended key	xpub661MyMwAqRbcFgNHzbk7wWVv2CPC9DvVSqZp9HJZPfLNv3SBkxbdQEUyfwf9rtzBwBvKTV2WDejdPupDmihidJmDTTgXpar3r48kNiGhEzC
Encrypted (KDF9)	rk5ySd2iHrVJ1CZ86Pyt6zerNzzBHfZo2rcBAX4MKNzX7doCZnNpBMc3pPf6igTCnk796isqtaEdcfagrN8Pced9VAtENVBtpugBLnjiGd28h
Public Address	1Gazv3FH8oDxUUzgrRmWL14X3oBY5myDdQ
Private extended key	xprv9s21ZrQH143K3YMD7T6LoFVGttrMKj9jxGAxfCv3pv6ZQfWcuBV5pqdcjyooGrqa8NeraYUuiTWJSWuz4fVMiCuEK8tWggZ6yMZZK7xLBkx
Public extended key	xpub661MyMwAqRbcG2RgDUdMAPS1SvgqjBsbKV6ZTbKfPFdYHTqmSioLNdx6bH6v4uA4MWygDxbDDbVGPCurrTm5RwMnh14jEaswhA6nFK1bFd2

Test 4:

Root Key	6ca4a27ac660c683340f59353b1375a9
Creation	04-02-2014
Clear	RK6nEmXZj2nqgtCVWk3s7Suvz2XtWrdhDPpJqS
Password	???
Public Address	1JVncPbsdB2s4zHim3VdAWNkZ8JANBZ1U9
Private extended key	xprv9s21ZrQH143K3mJ4upPSDfXdA34yNjem6PSsXT63vm8dq8ikUJv4iiTD3PrSKtdGZXFVD689z5T7knXo55BjcHS2WL3Syp2DbGgnbgxw2QA
Public extended key	xpub661MyMwAqRbcGFNY1qvSaoUMi4uTnCNcTcNUKqVfV6fchw3u1rEKGWmgtfUMRKLgUHNZ7dfsh8Ys6SLwUojZqScFBQL3dFGF3QywNLJVZ2o
Second password	Bitcoin
Encrypted (KDF0)	rk354bYQBax15mmBSLTpaVuLRb9nDuaVbEseqBWpG
Public Address	1AGXnLksHQgovEyQvj8kY9QtFV2x8D1Nm
Private extended key	xprv9s21ZrQH143K3BMoPfivq74do9mxCnKRTZHWScTvVyrxGtCNvGd8bCZJk1Npwnds3ghiy4TTwmwtbSkpzTFcqLup57AWqm3NvRr6sNs7ZVt
Public extended key	xpub661MyMwAqRbcFfSGVhFwCF1NMBcScF3GpnD7EzsY4KPw9gXXTowP8zsnbJTDhU9o9Sj9M63Qx6bZhZ7gS6AzNjNehPUbqdhc6th1VA1FGVg
Encrypted (KDF1)	rk354bi6JiGeb5suvydsNtTosocEbpWcjoK7VL9Xv
Public Address	1DkoSDVN7aYZnGe3wUCXAjqc3cXT9oiHhG
Private extended key	xprv9s21ZrQH143K2Su2mQR7u6pweA8kwv4y3bKkvUeJUanC4eT7VVp64VxNH5uzwY12wE315rZMMf5XJQLcNLPBF7zcgoFv29UM3R9ctDqdshr
Public extended key	xpub661MyMwAqRbcEvyVsRx8GEmgCByFMNnpQpFMis3v2vKAwSnG338LcJGr8NDyhCcF7QV65cmybwrhCkYre87pkG3NCpckbc2itaJknWnwGGX
Encrypted (KDF8)	rk354dLtDHN3mPNSFABTNrhKmweKPZ55LJ31EM3k6
Public Address	1QShZTrKPJPBcstuYX5JKRHPs1HUtD7y8
Private extended key	xprv9s21ZrQH143K43FPi9awkCScXaAY4mEJje4PhS5uk2R67QU6p7bHXbvwgRdcwU9xZozYZ9hqfjm6ccAbGgU5eN4fp7uMY59MGq8swJVQPKW
Public extended key	xpub661MyMwAqRbcGXKrpB7x7LPM5c12UDxA6ryzVpVXJMx4zCoFMeuY5QFRXfg1tnVaP3Fv1tmhoV8jrRG29Gip9FwW7j3vGLNneaMepS1QuHP
Encrypted (KDF9)	rk354diEYQb4EdNjyosAZGNAB8L1spefWdz7RmZfX
Public Address	1NLVhK8AQn7p2edvTtFJgTz6itrBeHZ4Wa
Private extended key	xprv9s21ZrQH143K2stwSFWe4rPabNH1k1EVwQKwr7poayVZNPJup716aWVjDBVRVRh8gSgZhTP4uiaNuCkFbXXJCbDSnmvwNbnCuvQqHDDj7Ew
Public extended key	xpub661MyMwAqRbcFMyQYH3eRzLK9Q7W9TxMJdFYeWER9K2YFBe4MeKM8JpD4RrrKNRrTMT9T7FvDbvWhzAXT68HxuyZGJ9BkC6G3ZiMjj1UT76

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140311/fba653b4/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 842 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140311/fba653b4/attachment.sig>

From stick at gk2.sk  Wed Mar 12 13:11:58 2014
From: stick at gk2.sk (Pavol Rusnak)
Date: Wed, 12 Mar 2014 14:11:58 +0100
Subject: [Bitcoin-development] [RFC] Proposal: Base58 encoded HD Wallet
 root key with optional encryption
In-Reply-To: <A6F382CD-01F7-47DF-84F4-20F81BB64259@me.com>
References: <CANEZrP37a=EH+1P47opH0E-1TG9ozgw_1NzecJpRRJsMaZRLOw@mail.gmail.com>	<81f77484-3ca9-40a7-a999-884260b26be5@me.com>	<CAAS2fgSyegH8y1dYcijCSPLsC54mxeSNsN+3FQVDo5R9tWwAwQ@mail.gmail.com>	<BF62F0D0-1D13-4F19-A8F6-F588F3060A64@me.com>	<682B9F30-7DDC-4A9D-886E-5454D5F45665@me.com>
	<A6F382CD-01F7-47DF-84F4-20F81BB64259@me.com>
Message-ID: <53205D1E.1000100@gk2.sk>

On 03/12/2014 04:17 AM, Jean-Paul Kogelman wrote:
> We've been hard at work updating the spec to include features that were requested. We've removed the Scrypt dependency that was present in the initial drafts, added new KDFs, added plausible deniability and have a reference implementation.

Are you aware of BIP-0039?

https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki



-- 
Best Regards / S pozdravom,

Pavol Rusnak <stick at gk2.sk>



From jgarzik at bitpay.com  Wed Mar 12 15:35:45 2014
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Wed, 12 Mar 2014 11:35:45 -0400
Subject: [Bitcoin-development] Multisign payment protocol?
In-Reply-To: <53202D51.8010008@plan99.net>
References: <CANAnSg3Bt0e7CfUcJXe96xhU6nqif9ey_vurZMZkSa9OHjHStw@mail.gmail.com>
	<CABsx9T0SMi6Gp4JY=CpHxLEu5pVkvDmnug7PsY7m_dvtT7khzg@mail.gmail.com>
	<531DFDF8.80008@gmail.com> <531E52FE.5090107@jerviss.org>
	<531E5454.1030601@gmail.com>
	<CAJHLa0NZkzQQvMxgCJAJGT=Yn6vrVNK8Bg7RAfAjctpnrfg5zA@mail.gmail.com>
	<CABsx9T3eViYDsEmLm7ceimJNwci3mCOxWoVnVZHrqp7pDmm0+g@mail.gmail.com>
	<CANAnSg2kzPF0886PsQW8chzsWi6Urp+=-x+9bbv8Mv6hmpvBPw@mail.gmail.com>
	<CAJHLa0Mu2kiv3CCme7BPwzWtT++PNLQ2aAKdLyA8LFTtXEg9fg@mail.gmail.com>
	<CABsx9T0Lvg84qFVRbc7Ef4vZEQj9eO7Jhup5PTRLLeuJFvXi-w@mail.gmail.com>
	<4fca6b510dd57d2f92affeb988d2ee5d.squirrel@fulvetta.riseup.net>
	<531FAA55.2020108@xeno-genesis.com> <531FC808.7060709@gmail.com>
	<9A6499BC-E546-45CC-A7EF-5182FC86052D@gmail.com>
	<53202D51.8010008@plan99.net>
Message-ID: <CAJHLa0OuXyEz6gcq_dQKmGjJQf3cJjFyzjb38RCB3E6-wMLJ0g@mail.gmail.com>

On Wed, Mar 12, 2014 at 5:48 AM, Mike Hearn <mike at plan99.net> wrote:
> CoinVault is also using a partially signed transaction format whereby
> 0-length placeholders are used for missing signatures in the transaction
> scripts.
>
> I don't know how you are implementing this/what framework you're using, but
> I suggest using placeholders that are the length of an actual expected
> signature, at least when forming the transaction. This is what bitcoinj will
> do because otherwise you could end up miscalculating the fee, which is based
> on the final size. See TransactionSignature.dummy() in the API.

The zero-length placeholder is not a new invention.

This is what bitcoind produces and expects by default, for a partially
signed transaction.

-- 
Jeff Garzik
Bitcoin core developer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From jeanpaulkogelman at me.com  Wed Mar 12 15:45:50 2014
From: jeanpaulkogelman at me.com (Jean-Paul Kogelman)
Date: Wed, 12 Mar 2014 08:45:50 -0700
Subject: [Bitcoin-development] [RFC] Proposal: Base58 encoded HD Wallet
 root key with optional encryption
In-Reply-To: <53205D1E.1000100@gk2.sk>
References: <CANEZrP37a=EH+1P47opH0E-1TG9ozgw_1NzecJpRRJsMaZRLOw@mail.gmail.com>
	<81f77484-3ca9-40a7-a999-884260b26be5@me.com>
	<CAAS2fgSyegH8y1dYcijCSPLsC54mxeSNsN+3FQVDo5R9tWwAwQ@mail.gmail.com>
	<BF62F0D0-1D13-4F19-A8F6-F588F3060A64@me.com>
	<682B9F30-7DDC-4A9D-886E-5454D5F45665@me.com>
	<A6F382CD-01F7-47DF-84F4-20F81BB64259@me.com> <53205D1E.1000100@gk2.sk>
Message-ID: <E3C05DB6-D182-43B1-A6F6-128734D933F9@me.com>


On Mar 12, 2014, at 6:11 AM, Pavol Rusnak <stick at gk2.sk> wrote:

> On 03/12/2014 04:17 AM, Jean-Paul Kogelman wrote:
>> We've been hard at work updating the spec to include features that were requested. We've removed the Scrypt dependency that was present in the initial drafts, added new KDFs, added plausible deniability and have a reference implementation.
> 
> Are you aware of BIP-0039?
> 
> https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki
> 
> 

Yes I am. There are some differences between BIP 39 and my proposal though. 

- BIP 39 offers an easy list of words, no gnarly string of case sensitive letters and numbers.
- BIP 39 only offers one fixed length of entropy, always 12 words, no option to increase or decrease the length.
- BIP 39 doesn't have a genesis date field, so no optimization during blockchain rescan.
- BIP 39 doesn't have password typo detection. No easy way to recover a password if you know most of it.
- BIP 39 does not have a user selectable KDF, only 2048 round PBKDF2-HMAC-SHA512. 
- BIP 39 can't outsource the KDF computation to a 3rd party.
- BIP 39 wallet implementors can use their own word lists, breaking cross wallet compatibility.


jp
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 842 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140312/0e89e648/attachment.sig>

From stick at gk2.sk  Wed Mar 12 15:55:02 2014
From: stick at gk2.sk (Pavol Rusnak)
Date: Wed, 12 Mar 2014 16:55:02 +0100
Subject: [Bitcoin-development] [RFC] Proposal: Base58 encoded HD Wallet
 root key with optional encryption
In-Reply-To: <E3C05DB6-D182-43B1-A6F6-128734D933F9@me.com>
References: <CANEZrP37a=EH+1P47opH0E-1TG9ozgw_1NzecJpRRJsMaZRLOw@mail.gmail.com>
	<81f77484-3ca9-40a7-a999-884260b26be5@me.com>
	<CAAS2fgSyegH8y1dYcijCSPLsC54mxeSNsN+3FQVDo5R9tWwAwQ@mail.gmail.com>
	<BF62F0D0-1D13-4F19-A8F6-F588F3060A64@me.com>
	<682B9F30-7DDC-4A9D-886E-5454D5F45665@me.com>
	<A6F382CD-01F7-47DF-84F4-20F81BB64259@me.com>
	<53205D1E.1000100@gk2.sk>
	<E3C05DB6-D182-43B1-A6F6-128734D933F9@me.com>
Message-ID: <53208356.7010209@gk2.sk>

On 03/12/2014 04:45 PM, Jean-Paul Kogelman wrote:
> Yes I am. There are some differences between BIP 39 and my proposal though. 
> 
> - BIP 39 offers an easy list of words, no gnarly string of case sensitive letters and numbers.

Which is better IMO. I can't imagine anyone writing down a long Base58
encoded string.

> - BIP 39 only offers one fixed length of entropy, always 12 words, no option to increase or decrease the length.

Not true, BIP39 supports 12/18/24 words (= 128/192/256 bits of entropy).

> - BIP 39 doesn't have a genesis date field, so no optimization during blockchain rescan.

This is nice addition, indeed. But we needed to limit the data as
possible in order not to increase the number of words needed to be noted
down.

> - BIP 39 doesn't have password typo detection. No easy way to recover a password if you know most of it.

It has a detection. Not correction though.

> - BIP 39 does not have a user selectable KDF, only 2048 round PBKDF2-HMAC-SHA512. 
> - BIP 39 can't outsource the KDF computation to a 3rd party.

True, but having one or two solid options are better than having
gazillions of possible options.

> - BIP 39 wallet implementors can use their own word lists, breaking cross wallet compatibility.

True, but they are encouraged to use the list provided. Possibility to
outsource KDF outside of your "standard" breaks much more compatibility
than this.

-- 
Best Regards / S pozdravom,

Pavol Rusnak <stick at gk2.sk>



From mike at plan99.net  Wed Mar 12 16:02:52 2014
From: mike at plan99.net (Mike Hearn)
Date: Wed, 12 Mar 2014 17:02:52 +0100
Subject: [Bitcoin-development] Multisign payment protocol?
In-Reply-To: <CAJHLa0OuXyEz6gcq_dQKmGjJQf3cJjFyzjb38RCB3E6-wMLJ0g@mail.gmail.com>
References: <CANAnSg3Bt0e7CfUcJXe96xhU6nqif9ey_vurZMZkSa9OHjHStw@mail.gmail.com>
	<CABsx9T0SMi6Gp4JY=CpHxLEu5pVkvDmnug7PsY7m_dvtT7khzg@mail.gmail.com>
	<531DFDF8.80008@gmail.com> <531E52FE.5090107@jerviss.org>
	<531E5454.1030601@gmail.com>
	<CAJHLa0NZkzQQvMxgCJAJGT=Yn6vrVNK8Bg7RAfAjctpnrfg5zA@mail.gmail.com>
	<CABsx9T3eViYDsEmLm7ceimJNwci3mCOxWoVnVZHrqp7pDmm0+g@mail.gmail.com>
	<CANAnSg2kzPF0886PsQW8chzsWi6Urp+=-x+9bbv8Mv6hmpvBPw@mail.gmail.com>
	<CAJHLa0Mu2kiv3CCme7BPwzWtT++PNLQ2aAKdLyA8LFTtXEg9fg@mail.gmail.com>
	<CABsx9T0Lvg84qFVRbc7Ef4vZEQj9eO7Jhup5PTRLLeuJFvXi-w@mail.gmail.com>
	<4fca6b510dd57d2f92affeb988d2ee5d.squirrel@fulvetta.riseup.net>
	<531FAA55.2020108@xeno-genesis.com> <531FC808.7060709@gmail.com>
	<9A6499BC-E546-45CC-A7EF-5182FC86052D@gmail.com>
	<53202D51.8010008@plan99.net>
	<CAJHLa0OuXyEz6gcq_dQKmGjJQf3cJjFyzjb38RCB3E6-wMLJ0g@mail.gmail.com>
Message-ID: <CANEZrP2Lr0Do8dPXAvRPkZU0Hk4UBt=CjgXSSKbopawoq8NjgA@mail.gmail.com>

>
> This is what bitcoind produces and expects by default, for a partially
> signed transaction.


What happens if the act of filling out the signature pushes the transaction
into a higher fee level?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140312/ce19655f/attachment.html>

From drak at zikula.org  Wed Mar 12 16:09:11 2014
From: drak at zikula.org (Drak)
Date: Wed, 12 Mar 2014 16:09:11 +0000
Subject: [Bitcoin-development] Multisign payment protocol?
In-Reply-To: <CANEZrP2Lr0Do8dPXAvRPkZU0Hk4UBt=CjgXSSKbopawoq8NjgA@mail.gmail.com>
References: <CANAnSg3Bt0e7CfUcJXe96xhU6nqif9ey_vurZMZkSa9OHjHStw@mail.gmail.com>
	<CABsx9T0SMi6Gp4JY=CpHxLEu5pVkvDmnug7PsY7m_dvtT7khzg@mail.gmail.com>
	<531DFDF8.80008@gmail.com> <531E52FE.5090107@jerviss.org>
	<531E5454.1030601@gmail.com>
	<CAJHLa0NZkzQQvMxgCJAJGT=Yn6vrVNK8Bg7RAfAjctpnrfg5zA@mail.gmail.com>
	<CABsx9T3eViYDsEmLm7ceimJNwci3mCOxWoVnVZHrqp7pDmm0+g@mail.gmail.com>
	<CANAnSg2kzPF0886PsQW8chzsWi6Urp+=-x+9bbv8Mv6hmpvBPw@mail.gmail.com>
	<CAJHLa0Mu2kiv3CCme7BPwzWtT++PNLQ2aAKdLyA8LFTtXEg9fg@mail.gmail.com>
	<CABsx9T0Lvg84qFVRbc7Ef4vZEQj9eO7Jhup5PTRLLeuJFvXi-w@mail.gmail.com>
	<4fca6b510dd57d2f92affeb988d2ee5d.squirrel@fulvetta.riseup.net>
	<531FAA55.2020108@xeno-genesis.com> <531FC808.7060709@gmail.com>
	<9A6499BC-E546-45CC-A7EF-5182FC86052D@gmail.com>
	<53202D51.8010008@plan99.net>
	<CAJHLa0OuXyEz6gcq_dQKmGjJQf3cJjFyzjb38RCB3E6-wMLJ0g@mail.gmail.com>
	<CANEZrP2Lr0Do8dPXAvRPkZU0Hk4UBt=CjgXSSKbopawoq8NjgA@mail.gmail.com>
Message-ID: <CANAnSg22Hmip6n7VvftODO9zoRghDdnPoJtxJrc55Jt_ccnG0Q@mail.gmail.com>

On 12 March 2014 16:02, Mike Hearn <mike at plan99.net> wrote:

> This is what bitcoind produces and expects by default, for a partially
>> signed transaction.
>
>
> What happens if the act of filling out the signature pushes the
> transaction into a higher fee level?
>

Can this be calculated in advance knowing the initial transaction size and
the number of signatures required? Should be quite easy to make an
estimation from that? It's probably more of an implementation detail
though...

Drak
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140312/b876e8cb/attachment.html>

From mike at plan99.net  Wed Mar 12 16:14:25 2014
From: mike at plan99.net (Mike Hearn)
Date: Wed, 12 Mar 2014 17:14:25 +0100
Subject: [Bitcoin-development] Multisign payment protocol?
In-Reply-To: <CANAnSg22Hmip6n7VvftODO9zoRghDdnPoJtxJrc55Jt_ccnG0Q@mail.gmail.com>
References: <CANAnSg3Bt0e7CfUcJXe96xhU6nqif9ey_vurZMZkSa9OHjHStw@mail.gmail.com>
	<CABsx9T0SMi6Gp4JY=CpHxLEu5pVkvDmnug7PsY7m_dvtT7khzg@mail.gmail.com>
	<531DFDF8.80008@gmail.com> <531E52FE.5090107@jerviss.org>
	<531E5454.1030601@gmail.com>
	<CAJHLa0NZkzQQvMxgCJAJGT=Yn6vrVNK8Bg7RAfAjctpnrfg5zA@mail.gmail.com>
	<CABsx9T3eViYDsEmLm7ceimJNwci3mCOxWoVnVZHrqp7pDmm0+g@mail.gmail.com>
	<CANAnSg2kzPF0886PsQW8chzsWi6Urp+=-x+9bbv8Mv6hmpvBPw@mail.gmail.com>
	<CAJHLa0Mu2kiv3CCme7BPwzWtT++PNLQ2aAKdLyA8LFTtXEg9fg@mail.gmail.com>
	<CABsx9T0Lvg84qFVRbc7Ef4vZEQj9eO7Jhup5PTRLLeuJFvXi-w@mail.gmail.com>
	<4fca6b510dd57d2f92affeb988d2ee5d.squirrel@fulvetta.riseup.net>
	<531FAA55.2020108@xeno-genesis.com> <531FC808.7060709@gmail.com>
	<9A6499BC-E546-45CC-A7EF-5182FC86052D@gmail.com>
	<53202D51.8010008@plan99.net>
	<CAJHLa0OuXyEz6gcq_dQKmGjJQf3cJjFyzjb38RCB3E6-wMLJ0g@mail.gmail.com>
	<CANEZrP2Lr0Do8dPXAvRPkZU0Hk4UBt=CjgXSSKbopawoq8NjgA@mail.gmail.com>
	<CANAnSg22Hmip6n7VvftODO9zoRghDdnPoJtxJrc55Jt_ccnG0Q@mail.gmail.com>
Message-ID: <CANEZrP1rfHzSrkWGeuNB07Gy9OBj9a+AfY7deQgJzg4TX_QMMg@mail.gmail.com>

>
> Can this be calculated in advance knowing the initial transaction size and
> the number of signatures required?
>

Sure of course. You assume each signature to be placed in the tx is 73
bytes. Not very hard, but if the tx you get back from the API doesn't
contain such a 73-byte sentinel value then it's harder to be sure that this
part was done correctly.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140312/ef758ce4/attachment.html>

From pete at petertodd.org  Wed Mar 12 16:24:58 2014
From: pete at petertodd.org (Peter Todd)
Date: Wed, 12 Mar 2014 12:24:58 -0400
Subject: [Bitcoin-development] Multisign payment protocol?
In-Reply-To: <CANEZrP1rfHzSrkWGeuNB07Gy9OBj9a+AfY7deQgJzg4TX_QMMg@mail.gmail.com>
References: <CABsx9T0Lvg84qFVRbc7Ef4vZEQj9eO7Jhup5PTRLLeuJFvXi-w@mail.gmail.com>
	<4fca6b510dd57d2f92affeb988d2ee5d.squirrel@fulvetta.riseup.net>
	<531FAA55.2020108@xeno-genesis.com> <531FC808.7060709@gmail.com>
	<9A6499BC-E546-45CC-A7EF-5182FC86052D@gmail.com>
	<53202D51.8010008@plan99.net>
	<CAJHLa0OuXyEz6gcq_dQKmGjJQf3cJjFyzjb38RCB3E6-wMLJ0g@mail.gmail.com>
	<CANEZrP2Lr0Do8dPXAvRPkZU0Hk4UBt=CjgXSSKbopawoq8NjgA@mail.gmail.com>
	<CANAnSg22Hmip6n7VvftODO9zoRghDdnPoJtxJrc55Jt_ccnG0Q@mail.gmail.com>
	<CANEZrP1rfHzSrkWGeuNB07Gy9OBj9a+AfY7deQgJzg4TX_QMMg@mail.gmail.com>
Message-ID: <20140312162458.GA2337@savin>

On Wed, Mar 12, 2014 at 05:14:25PM +0100, Mike Hearn wrote:
> >
> > Can this be calculated in advance knowing the initial transaction size and
> > the number of signatures required?
> >
> 
> Sure of course. You assume each signature to be placed in the tx is 73
> bytes. Not very hard, but if the tx you get back from the API doesn't
> contain such a 73-byte sentinel value then it's harder to be sure that this
> part was done correctly.

Multisig signing is an example of untrusted input from an adversary;
this is a good example where you'd be better off just handling it
correctly rather than trying to "make it easier". (although handling it
correctly may include internally converting every not-yet-signed dummy
signature into a 73 bytes pushdata prior to calculating the size)

-- 
'peter'[:-1]@petertodd.org
0000000000000000e18643801741dc70db6fda175230012b0f697024218cd9ef
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 685 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140312/9677d48c/attachment.sig>

From jgarzik at bitpay.com  Wed Mar 12 16:33:12 2014
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Wed, 12 Mar 2014 12:33:12 -0400
Subject: [Bitcoin-development] Multisign payment protocol?
In-Reply-To: <CANEZrP2Lr0Do8dPXAvRPkZU0Hk4UBt=CjgXSSKbopawoq8NjgA@mail.gmail.com>
References: <CANAnSg3Bt0e7CfUcJXe96xhU6nqif9ey_vurZMZkSa9OHjHStw@mail.gmail.com>
	<CABsx9T0SMi6Gp4JY=CpHxLEu5pVkvDmnug7PsY7m_dvtT7khzg@mail.gmail.com>
	<531DFDF8.80008@gmail.com> <531E52FE.5090107@jerviss.org>
	<531E5454.1030601@gmail.com>
	<CAJHLa0NZkzQQvMxgCJAJGT=Yn6vrVNK8Bg7RAfAjctpnrfg5zA@mail.gmail.com>
	<CABsx9T3eViYDsEmLm7ceimJNwci3mCOxWoVnVZHrqp7pDmm0+g@mail.gmail.com>
	<CANAnSg2kzPF0886PsQW8chzsWi6Urp+=-x+9bbv8Mv6hmpvBPw@mail.gmail.com>
	<CAJHLa0Mu2kiv3CCme7BPwzWtT++PNLQ2aAKdLyA8LFTtXEg9fg@mail.gmail.com>
	<CABsx9T0Lvg84qFVRbc7Ef4vZEQj9eO7Jhup5PTRLLeuJFvXi-w@mail.gmail.com>
	<4fca6b510dd57d2f92affeb988d2ee5d.squirrel@fulvetta.riseup.net>
	<531FAA55.2020108@xeno-genesis.com> <531FC808.7060709@gmail.com>
	<9A6499BC-E546-45CC-A7EF-5182FC86052D@gmail.com>
	<53202D51.8010008@plan99.net>
	<CAJHLa0OuXyEz6gcq_dQKmGjJQf3cJjFyzjb38RCB3E6-wMLJ0g@mail.gmail.com>
	<CANEZrP2Lr0Do8dPXAvRPkZU0Hk4UBt=CjgXSSKbopawoq8NjgA@mail.gmail.com>
Message-ID: <CAJHLa0OG4y_+7=z8_nuejHSynw+2CU9fzVGhAet3g0d3BoGCpg@mail.gmail.com>

On Wed, Mar 12, 2014 at 12:02 PM, Mike Hearn <mike at plan99.net> wrote:
>> This is what bitcoind produces and expects by default, for a partially
>> signed transaction.

> What happens if the act of filling out the signature pushes the transaction
> into a higher fee level?

Partially signed and multisig transactions within bitcoind go through
the raw transaction API, which does absolutely nothing if the sig
pushes the TX to a higher fee level.

-- 
Jeff Garzik
Bitcoin core developer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From mike at plan99.net  Wed Mar 12 16:41:33 2014
From: mike at plan99.net (Mike Hearn)
Date: Wed, 12 Mar 2014 17:41:33 +0100
Subject: [Bitcoin-development] Multisign payment protocol?
In-Reply-To: <CAJHLa0OG4y_+7=z8_nuejHSynw+2CU9fzVGhAet3g0d3BoGCpg@mail.gmail.com>
References: <CANAnSg3Bt0e7CfUcJXe96xhU6nqif9ey_vurZMZkSa9OHjHStw@mail.gmail.com>
	<CABsx9T0SMi6Gp4JY=CpHxLEu5pVkvDmnug7PsY7m_dvtT7khzg@mail.gmail.com>
	<531DFDF8.80008@gmail.com> <531E52FE.5090107@jerviss.org>
	<531E5454.1030601@gmail.com>
	<CAJHLa0NZkzQQvMxgCJAJGT=Yn6vrVNK8Bg7RAfAjctpnrfg5zA@mail.gmail.com>
	<CABsx9T3eViYDsEmLm7ceimJNwci3mCOxWoVnVZHrqp7pDmm0+g@mail.gmail.com>
	<CANAnSg2kzPF0886PsQW8chzsWi6Urp+=-x+9bbv8Mv6hmpvBPw@mail.gmail.com>
	<CAJHLa0Mu2kiv3CCme7BPwzWtT++PNLQ2aAKdLyA8LFTtXEg9fg@mail.gmail.com>
	<CABsx9T0Lvg84qFVRbc7Ef4vZEQj9eO7Jhup5PTRLLeuJFvXi-w@mail.gmail.com>
	<4fca6b510dd57d2f92affeb988d2ee5d.squirrel@fulvetta.riseup.net>
	<531FAA55.2020108@xeno-genesis.com> <531FC808.7060709@gmail.com>
	<9A6499BC-E546-45CC-A7EF-5182FC86052D@gmail.com>
	<53202D51.8010008@plan99.net>
	<CAJHLa0OuXyEz6gcq_dQKmGjJQf3cJjFyzjb38RCB3E6-wMLJ0g@mail.gmail.com>
	<CANEZrP2Lr0Do8dPXAvRPkZU0Hk4UBt=CjgXSSKbopawoq8NjgA@mail.gmail.com>
	<CAJHLa0OG4y_+7=z8_nuejHSynw+2CU9fzVGhAet3g0d3BoGCpg@mail.gmail.com>
Message-ID: <CANEZrP02L2GsPSKFTncwvn95FpEz-LFysro4-Z+f25eRcENL8w@mail.gmail.com>

>
> Partially signed and multisig transactions within bitcoind go through
> the raw transaction API, which does absolutely nothing if the sig
> pushes the TX to a higher fee level.


Well, we'll have to make sure this is carefully and loudly documented in
the new developer part of the website that's being worked on. Because this
seems like a recipe for people writing flaky apps. In practice it would
seem like you need to implement the fee loop in your own app:

1) Create tx with an estimated fee level
2) Add signatures
3) Submit. If REJECT for too low fees, increment, go to 1 and try again.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140312/d3156729/attachment.html>

From pete at petertodd.org  Wed Mar 12 16:47:50 2014
From: pete at petertodd.org (Peter Todd)
Date: Wed, 12 Mar 2014 12:47:50 -0400
Subject: [Bitcoin-development] Multisign payment protocol?
In-Reply-To: <CANEZrP02L2GsPSKFTncwvn95FpEz-LFysro4-Z+f25eRcENL8w@mail.gmail.com>
References: <CABsx9T0Lvg84qFVRbc7Ef4vZEQj9eO7Jhup5PTRLLeuJFvXi-w@mail.gmail.com>
	<4fca6b510dd57d2f92affeb988d2ee5d.squirrel@fulvetta.riseup.net>
	<531FAA55.2020108@xeno-genesis.com> <531FC808.7060709@gmail.com>
	<9A6499BC-E546-45CC-A7EF-5182FC86052D@gmail.com>
	<53202D51.8010008@plan99.net>
	<CAJHLa0OuXyEz6gcq_dQKmGjJQf3cJjFyzjb38RCB3E6-wMLJ0g@mail.gmail.com>
	<CANEZrP2Lr0Do8dPXAvRPkZU0Hk4UBt=CjgXSSKbopawoq8NjgA@mail.gmail.com>
	<CAJHLa0OG4y_+7=z8_nuejHSynw+2CU9fzVGhAet3g0d3BoGCpg@mail.gmail.com>
	<CANEZrP02L2GsPSKFTncwvn95FpEz-LFysro4-Z+f25eRcENL8w@mail.gmail.com>
Message-ID: <20140312164750.GA8199@savin>

On Wed, Mar 12, 2014 at 05:41:33PM +0100, Mike Hearn wrote:
> >
> > Partially signed and multisig transactions within bitcoind go through
> > the raw transaction API, which does absolutely nothing if the sig
> > pushes the TX to a higher fee level.
> 
> 
> Well, we'll have to make sure this is carefully and loudly documented in
> the new developer part of the website that's being worked on. Because this
> seems like a recipe for people writing flaky apps. In practice it would
> seem like you need to implement the fee loop in your own app:
> 
> 1) Create tx with an estimated fee level
> 2) Add signatures
> 3) Submit. If REJECT for too low fees, increment, go to 1 and try again.

Why?

It's the raw transaction API and Bitcoin Core wallet. What should be
carefully and loudly documented is the simple advice "Don't use to hold
customer funds; use Bitcoinj or something instead." followed by a
warning that SPV isn't secure enough for a business unless you run your
own full node.

The raw transaction API has no support to handle fees at all.

-- 
'peter'[:-1]@petertodd.org
00000000000000008aebcc3db3f73302ba290392eb783c509c5c7c4dd3971136
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 685 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140312/e0fd8170/attachment.sig>

From g.rowe at froot.co.uk  Wed Mar 12 16:49:09 2014
From: g.rowe at froot.co.uk (Gary Rowe)
Date: Wed, 12 Mar 2014 16:49:09 +0000
Subject: [Bitcoin-development] [RFC] Proposal: Base58 encoded HD Wallet
 root key with optional encryption
In-Reply-To: <53208356.7010209@gk2.sk>
References: <CANEZrP37a=EH+1P47opH0E-1TG9ozgw_1NzecJpRRJsMaZRLOw@mail.gmail.com>
	<81f77484-3ca9-40a7-a999-884260b26be5@me.com>
	<CAAS2fgSyegH8y1dYcijCSPLsC54mxeSNsN+3FQVDo5R9tWwAwQ@mail.gmail.com>
	<BF62F0D0-1D13-4F19-A8F6-F588F3060A64@me.com>
	<682B9F30-7DDC-4A9D-886E-5454D5F45665@me.com>
	<A6F382CD-01F7-47DF-84F4-20F81BB64259@me.com>
	<53205D1E.1000100@gk2.sk>
	<E3C05DB6-D182-43B1-A6F6-128734D933F9@me.com>
	<53208356.7010209@gk2.sk>
Message-ID: <CAKm8k+3bbhN=Kf2thvtakA7EGcTHDn1ssQm-+Fwf3hAAQmndTQ@mail.gmail.com>

Jean-Paul, it may be worth noting that the BIP39 word list is integrated
into Bitcoinj so will likely become the de facto standard for Android,
Trezor web and several desktop wallets. Anyone deviating from that word
list would likely find themselves in an isolated pocket.

Regarding the timestamp, MultiBit HD uses a simple timestamp of "number of
days since midnight of Bitcoin genesis block in UTC with modulo 97 checksum
appended". Thus a new seed generated on 27 January 2014 would have
"1850/01" as its checksum. When creating a new wallet the users are tested
that they have written the timestamp down along with the associated
12/18/24 words.

Modulo 97 was chosen since it catches about 99% of errors.


On 12 March 2014 15:55, Pavol Rusnak <stick at gk2.sk> wrote:

> On 03/12/2014 04:45 PM, Jean-Paul Kogelman wrote:
> > Yes I am. There are some differences between BIP 39 and my proposal
> though.
> >
> > - BIP 39 offers an easy list of words, no gnarly string of case
> sensitive letters and numbers.
>
> Which is better IMO. I can't imagine anyone writing down a long Base58
> encoded string.
>
> > - BIP 39 only offers one fixed length of entropy, always 12 words, no
> option to increase or decrease the length.
>
> Not true, BIP39 supports 12/18/24 words (= 128/192/256 bits of entropy).
>
> > - BIP 39 doesn't have a genesis date field, so no optimization during
> blockchain rescan.
>
> This is nice addition, indeed. But we needed to limit the data as
> possible in order not to increase the number of words needed to be noted
> down.
>
> > - BIP 39 doesn't have password typo detection. No easy way to recover a
> password if you know most of it.
>
> It has a detection. Not correction though.
>
> > - BIP 39 does not have a user selectable KDF, only 2048 round
> PBKDF2-HMAC-SHA512.
> > - BIP 39 can't outsource the KDF computation to a 3rd party.
>
> True, but having one or two solid options are better than having
> gazillions of possible options.
>
> > - BIP 39 wallet implementors can use their own word lists, breaking
> cross wallet compatibility.
>
> True, but they are encouraged to use the list provided. Possibility to
> outsource KDF outside of your "standard" breaks much more compatibility
> than this.
>
> --
> Best Regards / S pozdravom,
>
> Pavol Rusnak <stick at gk2.sk>
>
>
> ------------------------------------------------------------------------------
> Learn Graph Databases - Download FREE O'Reilly Book
> "Graph Databases" is the definitive new guide to graph databases and their
> applications. Written by three acclaimed leaders in the field,
> this first edition is now available. Download your free book today!
> http://p.sf.net/sfu/13534_NeoTech
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140312/f5fb6f0d/attachment.html>

From jgarzik at bitpay.com  Wed Mar 12 16:57:28 2014
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Wed, 12 Mar 2014 12:57:28 -0400
Subject: [Bitcoin-development] Multisign payment protocol?
In-Reply-To: <CANEZrP02L2GsPSKFTncwvn95FpEz-LFysro4-Z+f25eRcENL8w@mail.gmail.com>
References: <CANAnSg3Bt0e7CfUcJXe96xhU6nqif9ey_vurZMZkSa9OHjHStw@mail.gmail.com>
	<CABsx9T0SMi6Gp4JY=CpHxLEu5pVkvDmnug7PsY7m_dvtT7khzg@mail.gmail.com>
	<531DFDF8.80008@gmail.com> <531E52FE.5090107@jerviss.org>
	<531E5454.1030601@gmail.com>
	<CAJHLa0NZkzQQvMxgCJAJGT=Yn6vrVNK8Bg7RAfAjctpnrfg5zA@mail.gmail.com>
	<CABsx9T3eViYDsEmLm7ceimJNwci3mCOxWoVnVZHrqp7pDmm0+g@mail.gmail.com>
	<CANAnSg2kzPF0886PsQW8chzsWi6Urp+=-x+9bbv8Mv6hmpvBPw@mail.gmail.com>
	<CAJHLa0Mu2kiv3CCme7BPwzWtT++PNLQ2aAKdLyA8LFTtXEg9fg@mail.gmail.com>
	<CABsx9T0Lvg84qFVRbc7Ef4vZEQj9eO7Jhup5PTRLLeuJFvXi-w@mail.gmail.com>
	<4fca6b510dd57d2f92affeb988d2ee5d.squirrel@fulvetta.riseup.net>
	<531FAA55.2020108@xeno-genesis.com> <531FC808.7060709@gmail.com>
	<9A6499BC-E546-45CC-A7EF-5182FC86052D@gmail.com>
	<53202D51.8010008@plan99.net>
	<CAJHLa0OuXyEz6gcq_dQKmGjJQf3cJjFyzjb38RCB3E6-wMLJ0g@mail.gmail.com>
	<CANEZrP2Lr0Do8dPXAvRPkZU0Hk4UBt=CjgXSSKbopawoq8NjgA@mail.gmail.com>
	<CAJHLa0OG4y_+7=z8_nuejHSynw+2CU9fzVGhAet3g0d3BoGCpg@mail.gmail.com>
	<CANEZrP02L2GsPSKFTncwvn95FpEz-LFysro4-Z+f25eRcENL8w@mail.gmail.com>
Message-ID: <CAJHLa0MqArbLGiELJEnyccc3amsS5p3c2+S1nvUKNSLax0w1yA@mail.gmail.com>

On Wed, Mar 12, 2014 at 12:41 PM, Mike Hearn <mike at plan99.net> wrote:
>> Partially signed and multisig transactions within bitcoind go through
>> the raw transaction API, which does absolutely nothing if the sig
>> pushes the TX to a higher fee level.
>
>
> Well, we'll have to make sure this is carefully and loudly documented in the
> new developer part of the website that's being worked on. Because this seems
> like a recipe for people writing flaky apps. In practice it would seem like
> you need to implement the fee loop in your own app:

It's the raw transaction API.  If you break something, you get to keep
both pieces.

On a related note, sipa has proposed a more useful raw transaction API
call, that figures out fees, change and other details:
https://github.com/bitcoin/bitcoin/issues/3794

-- 
Jeff Garzik
Bitcoin core developer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From ryan at bitpay.com  Wed Mar 12 17:10:36 2014
From: ryan at bitpay.com (Ryan X. Charles)
Date: Wed, 12 Mar 2014 13:10:36 -0400
Subject: [Bitcoin-development] sorting public keys for p2sh multisig
	transactions
Message-ID: <5320950C.5050107@bitpay.com>

For a p2sh multisig transaction, the serialized script looks like this:

m [pubkey] ... [pubkey] n OP_CHECKMULTISIG

The p2sh address is the hash of this script. The public keys can come in
any order, but the hash depends on the order. If you have a list of
public keys, to which address do you send your money? We need a standard
way of sorting the public keys so that the address generated is always
the same for the same public keys and m.

There are two kinds of public keys: compressed and uncompressed.
Uncompressed are longer than compressed.

There are a few obvious ways we could sort the public keys: as strings,
as big endian numbers, as little endian numbers.

The difference is this. Suppose one public key is 59234 (uncompressed),
and the other is 6903 (compressed). If we sort these as strings, then
6903 > 59234. But if we sort them as big endian numbers, then 6903 is
really 06903, and then 06903 < 59234. So it makes a critical difference.
Sorting as little endian is yet another option that is not the same as
the other two.

I noticed Alan Reiner's comment in an earlier message:

"Just like Jean-Pierre mentioned, we'll be using parallel
trees to generate P2SH addresses after sorting the keys
lexicographically."

It sounds like "lexicographically" probably means sorting as strings. I
have made an implementation of public key sorting in javascript where I
sort them as big endian numbers and fill in the 0s. IMO, the simpler
method is to sort them as strings, which has a simpler implementation
since it doesn't require filling in 0s first. However, I don't actually
care what method we use so long as everyone in the bitcoin world uses
the same standard. Which is the best way to sort public keys?

-- 
Ryan X. Charles
Software Engineer, BitPay
-------------- next part --------------
A non-text attachment was scrubbed...
Name: 0xA11B4DDE.asc
Type: application/pgp-keys
Size: 5627 bytes
Desc: not available
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140312/15ec41e6/attachment.bin>

From will.yager at gmail.com  Wed Mar 12 18:00:58 2014
From: will.yager at gmail.com (William Yager)
Date: Wed, 12 Mar 2014 13:00:58 -0500
Subject: [Bitcoin-development] [RFC] Proposal: Base58 encoded HD Wallet
 root key with optional encryption
In-Reply-To: <CAKm8k+3bbhN=Kf2thvtakA7EGcTHDn1ssQm-+Fwf3hAAQmndTQ@mail.gmail.com>
References: <CANEZrP37a=EH+1P47opH0E-1TG9ozgw_1NzecJpRRJsMaZRLOw@mail.gmail.com>
	<81f77484-3ca9-40a7-a999-884260b26be5@me.com>
	<CAAS2fgSyegH8y1dYcijCSPLsC54mxeSNsN+3FQVDo5R9tWwAwQ@mail.gmail.com>
	<BF62F0D0-1D13-4F19-A8F6-F588F3060A64@me.com>
	<682B9F30-7DDC-4A9D-886E-5454D5F45665@me.com>
	<A6F382CD-01F7-47DF-84F4-20F81BB64259@me.com>
	<53205D1E.1000100@gk2.sk>
	<E3C05DB6-D182-43B1-A6F6-128734D933F9@me.com>
	<53208356.7010209@gk2.sk>
	<CAKm8k+3bbhN=Kf2thvtakA7EGcTHDn1ssQm-+Fwf3hAAQmndTQ@mail.gmail.com>
Message-ID: <CAG8oi1OURpch-FBAgDcO-W-JxOaTk7CE98VtM+kuheXZk5rfTw@mail.gmail.com>

This spec offers a lot of benefits over BIP 0038:

* Multiple KDFs (I think the chosen list is reasonable and fits all
required use cases)
* Multiple seed lengths
* Explicit BIP 0032 support
* Creation date field
* Plausible deniability (via the multiple-password mechanism)

I don't think it makes any sense to compare this to BIP 0039. BIP 0039 is
for key import/export, but it doesn't deal with anything like encryption,
wallet creation date, etc. The use cases are completely different.

I don't think we should let BIP 0039 (which is perfectly good for its
intended use case) hold us back from improving on BIP 0038 (which is also
good, but could use some changes).

Will




On Wed, Mar 12, 2014 at 11:49 AM, Gary Rowe <g.rowe at froot.co.uk> wrote:

> Jean-Paul, it may be worth noting that the BIP39 word list is integrated
> into Bitcoinj so will likely become the de facto standard for Android,
> Trezor web and several desktop wallets. Anyone deviating from that word
> list would likely find themselves in an isolated pocket.
>
> Regarding the timestamp, MultiBit HD uses a simple timestamp of "number of
> days since midnight of Bitcoin genesis block in UTC with modulo 97 checksum
> appended". Thus a new seed generated on 27 January 2014 would have
> "1850/01" as its checksum. When creating a new wallet the users are tested
> that they have written the timestamp down along with the associated
> 12/18/24 words.
>
> Modulo 97 was chosen since it catches about 99% of errors.
>
>
> On 12 March 2014 15:55, Pavol Rusnak <stick at gk2.sk> wrote:
>
>> On 03/12/2014 04:45 PM, Jean-Paul Kogelman wrote:
>> > Yes I am. There are some differences between BIP 39 and my proposal
>> though.
>> >
>> > - BIP 39 offers an easy list of words, no gnarly string of case
>> sensitive letters and numbers.
>>
>> Which is better IMO. I can't imagine anyone writing down a long Base58
>> encoded string.
>>
>> > - BIP 39 only offers one fixed length of entropy, always 12 words, no
>> option to increase or decrease the length.
>>
>> Not true, BIP39 supports 12/18/24 words (= 128/192/256 bits of entropy).
>>
>> > - BIP 39 doesn't have a genesis date field, so no optimization during
>> blockchain rescan.
>>
>> This is nice addition, indeed. But we needed to limit the data as
>> possible in order not to increase the number of words needed to be noted
>> down.
>>
>> > - BIP 39 doesn't have password typo detection. No easy way to recover a
>> password if you know most of it.
>>
>> It has a detection. Not correction though.
>>
>> > - BIP 39 does not have a user selectable KDF, only 2048 round
>> PBKDF2-HMAC-SHA512.
>> > - BIP 39 can't outsource the KDF computation to a 3rd party.
>>
>> True, but having one or two solid options are better than having
>> gazillions of possible options.
>>
>> > - BIP 39 wallet implementors can use their own word lists, breaking
>> cross wallet compatibility.
>>
>> True, but they are encouraged to use the list provided. Possibility to
>> outsource KDF outside of your "standard" breaks much more compatibility
>> than this.
>>
>> --
>> Best Regards / S pozdravom,
>>
>> Pavol Rusnak <stick at gk2.sk>
>>
>>
>> ------------------------------------------------------------------------------
>> Learn Graph Databases - Download FREE O'Reilly Book
>> "Graph Databases" is the definitive new guide to graph databases and their
>> applications. Written by three acclaimed leaders in the field,
>> this first edition is now available. Download your free book today!
>> http://p.sf.net/sfu/13534_NeoTech
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>
>
>
>
> ------------------------------------------------------------------------------
> Learn Graph Databases - Download FREE O'Reilly Book
> "Graph Databases" is the definitive new guide to graph databases and their
> applications. Written by three acclaimed leaders in the field,
> this first edition is now available. Download your free book today!
> http://p.sf.net/sfu/13534_NeoTech
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140312/95b8706a/attachment.html>

From jeanpaulkogelman at me.com  Wed Mar 12 19:26:39 2014
From: jeanpaulkogelman at me.com (Jean-Paul Kogelman)
Date: Wed, 12 Mar 2014 19:26:39 +0000 (GMT)
Subject: [Bitcoin-development] [RFC] Proposal: Base58 encoded HD Wallet
 root key with optional encryption
In-Reply-To: <53208356.7010209@gk2.sk>
Message-ID: <44fcb02b-3784-45a6-816a-312c78d940cd@me.com>



On Mar 12, 2014, at 08:55 AM, Pavol Rusnak <stick at gk2.sk> wrote:

On 03/12/2014 04:45 PM, Jean-Paul Kogelman wrote:
Yes I am. There are some differences between BIP 39 and my proposal though.
- BIP 39 offers an easy list of words, no gnarly string of case sensitive letters and numbers.

Which is better IMO. I can't imagine anyone writing down a long Base58
encoded string.
?
That depends on your use case. A list of words is totally fine for someone to write down, a long string of case sensitive letters is easier to put into a QR code.


- BIP 39 only offers one fixed length of entropy, always 12 words, no option to increase or decrease the length.

Not true, BIP39 supports 12/18/24 words (= 128/192/256 bits of entropy).
?
I stand corrected.


- BIP 39 doesn't have a genesis date field, so no optimization during blockchain rescan.

This is nice addition, indeed. But we needed to limit the data as
possible in order not to increase the number of words needed to be noted
down.
?
My proposal didn't have this either initially, but it was deemed an essential feature for SPV clients.


- BIP 39 doesn't have password typo detection. No easy way to recover a password if you know most of it.

It has a detection. Not correction though.
?
If I understand the code correctly (and please correct me if I'm wrong), the validation only happens on the mnemonic list, not on the password:

"Described method also provides plausible deniability, because every passphrase generates a valid seed (and thus deterministic wallet) but only the correct one will make the desired wallet available"

So upon entering a password with a typo, the user will not be notified of an error, but be presented with a wallet balance of 0, after the blockchain has been scanned. I'm sorry, but that's not the kind of experience I would want to present to my users.


- BIP 39 does not have a user selectable KDF, only 2048 round PBKDF2-HMAC-SHA512.
- BIP 39 can't outsource the KDF computation to a 3rd party.

True, but having one or two solid options are better than having
gazillions of possible options.
?
5 defined KDFs out of a possible 32 is hardly "gazillions".

- BIP 39 wallet implementors can use their own word lists, breaking cross wallet compatibility.

True, but they are encouraged to use the list provided. Possibility to
outsource KDF outside of your "standard" breaks much more compatibility
than this.
?
Would you care to elaborate how optional outsourcing of the KDF breaks compatibility?

jp

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140312/c685124f/attachment.html>

From travis.johanssen at gmail.com  Wed Mar 12 19:30:49 2014
From: travis.johanssen at gmail.com (Travis Johansen)
Date: Wed, 12 Mar 2014 13:30:49 -0600
Subject: [Bitcoin-development] zapwallettxes problem and wallet DB ordering
Message-ID: <CAOyr6f1b94DFsmP6XeZ0KRaJSf0KQboOO_X1Au_e3EgiaN68dw@mail.gmail.com>

Most of the issue seems to be because of
CWalletDB::ReorderTransactions. After applying zapwallettxes, I
noticed that listtransactions was no longer listing new transactions.
After further investigation, new tx records were being given a low
nOrderPos number while old acentry records were high enough that they
were being ordered at the end of listtransactions all the time. My
theory is that after the malleability attacks, the wallet DB got
filled with dead transactions that were removed by zapwallettxes, then
somehow ReorderTransactions got invoked and reset nOrderPosNext. This
left the acentry records with high nOrderPos and the new transactions
being added near the beginning.

I believe this is due to two issues:

1. ReorderTransactions only collects the acentry records from "":

    ListAccountCreditDebit("", acentries);

   which should probably be:

    ListAccountCreditDebit("*", acentries);

2. ReorderTransactions seems to try too hard to maintain previous
ordering and likely fails. Or at least it did after I applied the fix
above. Would it not be better to just reorder the records with:

    for (TxItems::iterator it = txByTime.begin(); it != txByTime.end(); ++it)
    {
        CWalletTx *const pwtx = (*it).second.first;
        CAccountingEntry *const pacentry = (*it).second.second;
        int64_t& nOrderPos = (pwtx != 0) ? pwtx->nOrderPos :
pacentry->nOrderPos;

        nOrderPos = ++nOrderPosNext;
        if (pwtx)
        {
            if (!WriteTx(pwtx->GetHash(), *pwtx))
              return DB_LOAD_FAIL;
        }
        else
            if (!WriteAccountingEntry(pacentry->nEntryNo, *pacentry))
              return DB_LOAD_FAIL;
    }

    if (!WriteOrderPosNext(nOrderPosNext))
        return DB_LOAD_FAIL;

   Perhaps I'm missing something here but this seems to be a better
solution given the simplicity of the ordering system.

Unsurprisingly, applying the two fixes (and hacking one entry to an
nOrderPos of -1 to trigger ReorderTransactions) corrects the ordering
in my wallet DB. Or at least I think it does. Does anyone know why
this might be a bad idea? I'm new to the code and would like to know
if I'm potentially breaking something else.



From jeanpaulkogelman at me.com  Wed Mar 12 19:35:23 2014
From: jeanpaulkogelman at me.com (Jean-Paul Kogelman)
Date: Wed, 12 Mar 2014 19:35:23 +0000 (GMT)
Subject: [Bitcoin-development] [RFC] Proposal: Base58 encoded HD Wallet
 root key with optional encryption
In-Reply-To: <CAKm8k+3bbhN=Kf2thvtakA7EGcTHDn1ssQm-+Fwf3hAAQmndTQ@mail.gmail.com>
Message-ID: <8349e85f-838a-4d93-9302-48b12af03940@me.com>



On Mar 12, 2014, at 09:49 AM, Gary Rowe <g.rowe at froot.co.uk> wrote:

Jean-Paul, it may be worth noting that the BIP39 word list is integrated into Bitcoinj so will likely become the de facto standard for Android, Trezor web and several desktop wallets. Anyone deviating from that word list would likely find themselves in an isolated pocket.

Regarding the timestamp, MultiBit HD uses a simple timestamp of "number of days since midnight of Bitcoin genesis block in UTC with modulo 97 checksum appended". Thus a new seed generated on 27 January 2014 would have "1850/01" as its checksum.
?
I'm a bit confused, are you changing the way the checksum is calculated, or fudging the input seed to produce a specific checksum? Or is checksum in this case another value calculated over the mnemonic list?


When creating a new wallet the users are tested that they have written the timestamp down along with the associated 12/18/24 words.

So this is specific to MultiBit HD? Wouldn't it be better to include this into the BIP??

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140312/98bf75f9/attachment.html>

From g.rowe at froot.co.uk  Wed Mar 12 19:41:06 2014
From: g.rowe at froot.co.uk (Gary Rowe)
Date: Wed, 12 Mar 2014 19:41:06 +0000
Subject: [Bitcoin-development] [RFC] Proposal: Base58 encoded HD Wallet
 root key with optional encryption
In-Reply-To: <8349e85f-838a-4d93-9302-48b12af03940@me.com>
References: <CAKm8k+3bbhN=Kf2thvtakA7EGcTHDn1ssQm-+Fwf3hAAQmndTQ@mail.gmail.com>
	<8349e85f-838a-4d93-9302-48b12af03940@me.com>
Message-ID: <CAKm8k+3Luteocn_CFRjU=sxe+iEU7zbXFhxJLOSVApn4CzAfbQ@mail.gmail.com>

This is purely a MultiBit HD thing. Nothing to do with the BIP, unless the
wider community felt that it would be generally useful.

It has nothing to do with internal word list checking and is purely an
additional check to reduce the blockchain search load for SPV clients when
restoring wallets.


On 12 March 2014 19:35, Jean-Paul Kogelman <jeanpaulkogelman at me.com> wrote:

>
>
> On Mar 12, 2014, at 09:49 AM, Gary Rowe <g.rowe at froot.co.uk> wrote:
>
> Jean-Paul, it may be worth noting that the BIP39 word list is integrated
> into Bitcoinj so will likely become the de facto standard for Android,
> Trezor web and several desktop wallets. Anyone deviating from that word
> list would likely find themselves in an isolated pocket.
>
> Regarding the timestamp, MultiBit HD uses a simple timestamp of "number of
> days since midnight of Bitcoin genesis block in UTC with modulo 97 checksum
> appended". Thus a new seed generated on 27 January 2014 would have
> "1850/01" as its checksum.
>
>
> I'm a bit confused, are you changing the way the checksum is calculated,
> or fudging the input seed to produce a specific checksum? Or is checksum in
> this case another value calculated over the mnemonic list?
>
>
> When creating a new wallet the users are tested that they have written the
> timestamp down along with the associated 12/18/24 words.
>
>
> So this is specific to MultiBit HD? Wouldn't it be better to include this
> into the BIP?
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140312/389055f9/attachment.html>

From c1.sf-bitcoin at niftybox.net  Wed Mar 12 19:42:44 2014
From: c1.sf-bitcoin at niftybox.net (devrandom)
Date: Wed, 12 Mar 2014 12:42:44 -0700
Subject: [Bitcoin-development] sorting public keys for p2sh multisig
 transactions
In-Reply-To: <5320950C.5050107@bitpay.com>
References: <5320950C.5050107@bitpay.com>
Message-ID: <1394653364.19819.224.camel@mimiz>

Hi Ryan,

Probably the most neutral way to go about this is to lexicographically
sort by encoded representation bytes.  In java, that would be
ECPoint.getEncoded.

This is what we currently do in our watchdog Oracle.

On Wed, 2014-03-12 at 13:10 -0400, Ryan X. Charles wrote:
> For a p2sh multisig transaction, the serialized script looks like this:
> 
> m [pubkey] ... [pubkey] n OP_CHECKMULTISIG
> 
> The p2sh address is the hash of this script. The public keys can come in
> any order, but the hash depends on the order. If you have a list of
> public keys, to which address do you send your money? We need a standard
> way of sorting the public keys so that the address generated is always
> the same for the same public keys and m.
> 
> There are two kinds of public keys: compressed and uncompressed.
> Uncompressed are longer than compressed.
> 
> There are a few obvious ways we could sort the public keys: as strings,
> as big endian numbers, as little endian numbers.
> 
> The difference is this. Suppose one public key is 59234 (uncompressed),
> and the other is 6903 (compressed). If we sort these as strings, then
> 6903 > 59234. But if we sort them as big endian numbers, then 6903 is
> really 06903, and then 06903 < 59234. So it makes a critical difference.
> Sorting as little endian is yet another option that is not the same as
> the other two.
> 
> I noticed Alan Reiner's comment in an earlier message:
> 
> "Just like Jean-Pierre mentioned, we'll be using parallel
> trees to generate P2SH addresses after sorting the keys
> lexicographically."
> 
> It sounds like "lexicographically" probably means sorting as strings. I
> have made an implementation of public key sorting in javascript where I
> sort them as big endian numbers and fill in the 0s. IMO, the simpler
> method is to sort them as strings, which has a simpler implementation
> since it doesn't require filling in 0s first. However, I don't actually
> care what method we use so long as everyone in the bitcoin world uses
> the same standard. Which is the best way to sort public keys?
> 
> ------------------------------------------------------------------------------
> Learn Graph Databases - Download FREE O'Reilly Book
> "Graph Databases" is the definitive new guide to graph databases and their
> applications. Written by three acclaimed leaders in the field,
> this first edition is now available. Download your free book today!
> http://p.sf.net/sfu/13534_NeoTech
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development





From stick at gk2.sk  Wed Mar 12 19:39:29 2014
From: stick at gk2.sk (Pavol Rusnak)
Date: Wed, 12 Mar 2014 20:39:29 +0100
Subject: [Bitcoin-development] [RFC] Proposal: Base58 encoded HD Wallet
 root key with optional encryption
In-Reply-To: <44fcb02b-3784-45a6-816a-312c78d940cd@me.com>
References: <44fcb02b-3784-45a6-816a-312c78d940cd@me.com>
Message-ID: <5320B7F1.8060701@gk2.sk>

On 03/12/2014 08:26 PM, Jean-Paul Kogelman wrote:
> So upon entering a password with a typo, the user will not be notified of an 
> error, but be presented with a wallet balance of 0, after the blockchain has 
> been scanned. I'm sorry, but that's not the kind of experience I would want to 
> present to my users.

Sure, you can have either plausible deniability or typo checking, not
both at the same time.

> Would you care to elaborate how optional outsourcing of the KDF breaks 
> compatibility?

I'm afraid one would end up with code generated in one client that is
unusable in a different client, because the client's developer thought
that using fancier algorithm instead of the proposed ones was a good idea.


-- 
Best Regards / S pozdravom,

Pavol Rusnak <stick at gk2.sk>



From will.yager at gmail.com  Wed Mar 12 19:55:39 2014
From: will.yager at gmail.com (William Yager)
Date: Wed, 12 Mar 2014 14:55:39 -0500
Subject: [Bitcoin-development] [RFC] Proposal: Base58 encoded HD Wallet
 root key with optional encryption
In-Reply-To: <5320B7F1.8060701@gk2.sk>
References: <44fcb02b-3784-45a6-816a-312c78d940cd@me.com>
	<5320B7F1.8060701@gk2.sk>
Message-ID: <CAG8oi1M_jnn9vzHjN5h+0x-dYEKudgJ-DEqOKrdv-sCDaFV3NA@mail.gmail.com>

On Wed, Mar 12, 2014 at 2:39 PM, Pavol Rusnak <stick at gk2.sk> wrote:

> On 03/12/2014 08:26 PM, Jean-Paul Kogelman wrote:
> > So upon entering a password with a typo, the user will not be notified
> of an
> > error, but be presented with a wallet balance of 0, after the blockchain
> has
> > been scanned. I'm sorry, but that's not the kind of experience I would
> want to
> > present to my users.
>
> Sure, you can have either plausible deniability or typo checking, not
> both at the same time.
>
>
The proposed BIP uses a bloom filter, so it has both plausible deniability *and
*typo checking. The bloom filter is optimized for two elements and will
catch something like 99.9975% of typos, despite allowing two different
passwords.

> Would you care to elaborate how optional outsourcing of the KDF breaks
> > compatibility?
>
> I'm afraid one would end up with code generated in one client that is
> unusable in a different client, because the client's developer thought
> that using fancier algorithm instead of the proposed ones was a good idea.
>
>
This is clearly in violation of the spec. You could argue this about
anything in Bitcoin. What if a developer decided to replace SHA256 with
SHA3 in their implementation of a Bitcoin client? Obviously this would
cause issues.

Will
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140312/46fa5b6b/attachment.html>

From stick at gk2.sk  Wed Mar 12 20:04:33 2014
From: stick at gk2.sk (Pavol Rusnak)
Date: Wed, 12 Mar 2014 21:04:33 +0100
Subject: [Bitcoin-development] [RFC] Proposal: Base58 encoded HD Wallet
 root key with optional encryption
In-Reply-To: <CAG8oi1M_jnn9vzHjN5h+0x-dYEKudgJ-DEqOKrdv-sCDaFV3NA@mail.gmail.com>
References: <44fcb02b-3784-45a6-816a-312c78d940cd@me.com>	<5320B7F1.8060701@gk2.sk>
	<CAG8oi1M_jnn9vzHjN5h+0x-dYEKudgJ-DEqOKrdv-sCDaFV3NA@mail.gmail.com>
Message-ID: <5320BDD1.50001@gk2.sk>

On 03/12/2014 08:55 PM, William Yager wrote:
> The proposed BIP uses a bloom filter, so it has both plausible deniability *and
> *typo checking. The bloom filter is optimized for two elements and will
> catch something like 99.9975% of typos, despite allowing two different
> passwords.

Ok, I see. So the spec allows one real and one fake password. That is
something I don't consider plausible deniability. I am not saying that
this solution is wrong, I find it quite interesting, but it's not
plausible deniability. ;-)

>> I'm afraid one would end up with code generated in one client that is
>> unusable in a different client, because the client's developer thought
>> that using fancier algorithm instead of the proposed ones was a good idea.
>>
>>
> This is clearly in violation of the spec. 

Ah, I misunderstood. I thought that outsourcing the KDF means allowing
the 3rd party to use any KDF instead of the specified ones. What would
be the reason to outsource if this is not possible, anyway?

-- 
Best Regards / S pozdravom,

Pavol Rusnak <stick at gk2.sk>



From will.yager at gmail.com  Wed Mar 12 20:10:27 2014
From: will.yager at gmail.com (William Yager)
Date: Wed, 12 Mar 2014 15:10:27 -0500
Subject: [Bitcoin-development] [RFC] Proposal: Base58 encoded HD Wallet
 root key with optional encryption
In-Reply-To: <5320BDD1.50001@gk2.sk>
References: <44fcb02b-3784-45a6-816a-312c78d940cd@me.com>
	<5320B7F1.8060701@gk2.sk>
	<CAG8oi1M_jnn9vzHjN5h+0x-dYEKudgJ-DEqOKrdv-sCDaFV3NA@mail.gmail.com>
	<5320BDD1.50001@gk2.sk>
Message-ID: <CAG8oi1PhrmCqciECGKNa+DPp3Q_NrHP=79xxzOTkCJ655b4HXg@mail.gmail.com>

On Wed, Mar 12, 2014 at 3:04 PM, Pavol Rusnak <stick at gk2.sk> wrote:

> On 03/12/2014 08:55 PM, William Yager wrote:
> > The proposed BIP uses a bloom filter, so it has both plausible
> deniability *and
> > *typo checking. The bloom filter is optimized for two elements and will
> > catch something like 99.9975% of typos, despite allowing two different
> > passwords.
>
> Ok, I see. So the spec allows one real and one fake password. That is
> something I don't consider plausible deniability. I am not saying that
> this solution is wrong, I find it quite interesting, but it's not
> plausible deniability. ;-)
>

It's a little more nuanced than that. There are *always* at least two
passwords. If the user doesn't want a second password, a random one is
generated for them. A wallet with two known encryption keys and only one
known encryption key are indistinguishable. If compelled to decrypt, there
is no way to prove that the user actually knows a second password.


>
> >> I'm afraid one would end up with code generated in one client that is
> >> unusable in a different client, because the client's developer thought
> >> that using fancier algorithm instead of the proposed ones was a good
> idea.
> >>
> >>
> > This is clearly in violation of the spec.
>
> Ah, I misunderstood. I thought that outsourcing the KDF means allowing
> the 3rd party to use any KDF instead of the specified ones. What would
> be the reason to outsource if this is not possible, anyway?
>
>
Yes, the "outsourcing" terminology is a little confusing. The idea is this:
You have a little device, like a Trezor. It has very little RAM and very
little CPU power. However, you want to use a powerful key-stretching
algorithm (like the maximum Scrypt KDF defined in the spec). One way to
implement this is to allow semi-trusted devices (like desktop PCs) to do
all the "heavy lifting". The way the spec is defined, it is easy to have a
more powerful device do all the tough key stretching work without
significantly compromising the security of the wallet.

Will
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140312/437c157a/attachment.html>

From stick at gk2.sk  Wed Mar 12 20:24:27 2014
From: stick at gk2.sk (Pavol Rusnak)
Date: Wed, 12 Mar 2014 21:24:27 +0100
Subject: [Bitcoin-development] [RFC] Proposal: Base58 encoded HD Wallet
 root key with optional encryption
In-Reply-To: <CAG8oi1PhrmCqciECGKNa+DPp3Q_NrHP=79xxzOTkCJ655b4HXg@mail.gmail.com>
References: <44fcb02b-3784-45a6-816a-312c78d940cd@me.com>	<5320B7F1.8060701@gk2.sk>	<CAG8oi1M_jnn9vzHjN5h+0x-dYEKudgJ-DEqOKrdv-sCDaFV3NA@mail.gmail.com>	<5320BDD1.50001@gk2.sk>
	<CAG8oi1PhrmCqciECGKNa+DPp3Q_NrHP=79xxzOTkCJ655b4HXg@mail.gmail.com>
Message-ID: <5320C27B.8090205@gk2.sk>

On 03/12/2014 09:10 PM, William Yager wrote:
> implement this is to allow semi-trusted devices (like desktop PCs) to do
> all the "heavy lifting". The way the spec is defined, it is easy to have a
> more powerful device do all the tough key stretching work without
> significantly compromising the security of the wallet.

By disclosing "preH" to compromised computer (between steps 4 and 5) you
make further steps 5-9 quite less important.

Too bad you started to work on spec just recently. :-/

-- 
Best Regards / S pozdravom,

Pavol Rusnak <stick at gk2.sk>



From will.yager at gmail.com  Wed Mar 12 20:37:35 2014
From: will.yager at gmail.com (William Yager)
Date: Wed, 12 Mar 2014 15:37:35 -0500
Subject: [Bitcoin-development] [RFC] Proposal: Base58 encoded HD Wallet
 root key with optional encryption
In-Reply-To: <5320C27B.8090205@gk2.sk>
References: <44fcb02b-3784-45a6-816a-312c78d940cd@me.com>
	<5320B7F1.8060701@gk2.sk>
	<CAG8oi1M_jnn9vzHjN5h+0x-dYEKudgJ-DEqOKrdv-sCDaFV3NA@mail.gmail.com>
	<5320BDD1.50001@gk2.sk>
	<CAG8oi1PhrmCqciECGKNa+DPp3Q_NrHP=79xxzOTkCJ655b4HXg@mail.gmail.com>
	<5320C27B.8090205@gk2.sk>
Message-ID: <CAG8oi1OAYRgaMtoT8pMGNrcLomz9+dgi-7WKN285F0U4=LJSmQ@mail.gmail.com>

On Wed, Mar 12, 2014 at 3:24 PM, Pavol Rusnak <stick at gk2.sk> wrote:

> On 03/12/2014 09:10 PM, William Yager wrote:
> > implement this is to allow semi-trusted devices (like desktop PCs) to do
> > all the "heavy lifting". The way the spec is defined, it is easy to have
> a
> > more powerful device do all the tough key stretching work without
> > significantly compromising the security of the wallet.
>
> By disclosing "preH" to compromised computer (between steps 4 and 5) you
> make further steps 5-9 quite less important.
>
>
Yes, that was my chief complaint as well. A compromised computer removes
most of the extra security offered by key stretching (should you choose to
outsource the bulk of your key stretching).

However, I think we have a good compromise, which is the inclusion of a
number of PBKDF2-HMAC-SHA512 based KDFs. For anyone who doesn't want to
trust any external device, but also wants to use memory-contrained devices
(that group of people includes me), PBKDF2-HMAC-SHA512 is very easy to
implement even on devices that only have a few kB of RAM, and even though
our number of rounds is very aggressive (2^16 and 2^21), it will still run
in reasonable time even on very slow embedded ARM processors.

Will
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140312/7fa33c79/attachment.html>

From stick at gk2.sk  Wed Mar 12 20:42:47 2014
From: stick at gk2.sk (Pavol Rusnak)
Date: Wed, 12 Mar 2014 21:42:47 +0100
Subject: [Bitcoin-development] [RFC] Proposal: Base58 encoded HD Wallet
 root key with optional encryption
In-Reply-To: <CAG8oi1OAYRgaMtoT8pMGNrcLomz9+dgi-7WKN285F0U4=LJSmQ@mail.gmail.com>
References: <44fcb02b-3784-45a6-816a-312c78d940cd@me.com>	<5320B7F1.8060701@gk2.sk>	<CAG8oi1M_jnn9vzHjN5h+0x-dYEKudgJ-DEqOKrdv-sCDaFV3NA@mail.gmail.com>	<5320BDD1.50001@gk2.sk>	<CAG8oi1PhrmCqciECGKNa+DPp3Q_NrHP=79xxzOTkCJ655b4HXg@mail.gmail.com>	<5320C27B.8090205@gk2.sk>
	<CAG8oi1OAYRgaMtoT8pMGNrcLomz9+dgi-7WKN285F0U4=LJSmQ@mail.gmail.com>
Message-ID: <5320C6C7.9040602@gk2.sk>

On 03/12/2014 09:37 PM, William Yager wrote:
> (that group of people includes me), PBKDF2-HMAC-SHA512 is very easy to
> implement even on devices that only have a few kB of RAM, and even though
> our number of rounds is very aggressive (2^16 and 2^21), it will still run
> in reasonable time even on very slow embedded ARM processors.

To give you some numbers: TREZOR (120MHz ARM) does 1024 rounds of
PBKDF2-HMAC-SHA512 in around 1 second.

So 2^16 is around one minute, 2^21 is around half an hour.

-- 
Best Regards / S pozdravom,

Pavol Rusnak <stick at gk2.sk>



From will.yager at gmail.com  Wed Mar 12 20:49:43 2014
From: will.yager at gmail.com (William Yager)
Date: Wed, 12 Mar 2014 15:49:43 -0500
Subject: [Bitcoin-development] [RFC] Proposal: Base58 encoded HD Wallet
 root key with optional encryption
In-Reply-To: <5320C6C7.9040602@gk2.sk>
References: <44fcb02b-3784-45a6-816a-312c78d940cd@me.com>
	<5320B7F1.8060701@gk2.sk>
	<CAG8oi1M_jnn9vzHjN5h+0x-dYEKudgJ-DEqOKrdv-sCDaFV3NA@mail.gmail.com>
	<5320BDD1.50001@gk2.sk>
	<CAG8oi1PhrmCqciECGKNa+DPp3Q_NrHP=79xxzOTkCJ655b4HXg@mail.gmail.com>
	<5320C27B.8090205@gk2.sk>
	<CAG8oi1OAYRgaMtoT8pMGNrcLomz9+dgi-7WKN285F0U4=LJSmQ@mail.gmail.com>
	<5320C6C7.9040602@gk2.sk>
Message-ID: <CAG8oi1Mac8TozHaVQF_BWLFp_EdA_VF3aEs1aALhA3Wpvmfusw@mail.gmail.com>

On Wed, Mar 12, 2014 at 3:42 PM, Pavol Rusnak <stick at gk2.sk> wrote:

> On 03/12/2014 09:37 PM, William Yager wrote:
> > (that group of people includes me), PBKDF2-HMAC-SHA512 is very easy to
> > implement even on devices that only have a few kB of RAM, and even though
> > our number of rounds is very aggressive (2^16 and 2^21), it will still
> run
> > in reasonable time even on very slow embedded ARM processors.
>
> To give you some numbers: TREZOR (120MHz ARM) does 1024 rounds of
> PBKDF2-HMAC-SHA512 in around 1 second.
>
> So 2^16 is around one minute, 2^21 is around half an hour.
>
>
Precisely. And since the target of this BIP is generally storage wallets
(just like BIP 0038), we figured these were reasonable time scales for
encryption/decryption on slow devices.

Let's say you're implementing a Raspberry Pi based cold wallet printer.
Having the user wait 10 seconds to several minutes is not unreasonable for
a one-time activity, especially when at least this much time is used to
generate entropy, print the wallet, etc.

The same goes for phones. If you're importing a heavily encrypted wallet
into your device, the user won't mind waiting a few seconds or even a few
minutes.

Plus, as an added bonus, the amount of time it will take to encrypt/decrypt
is highly deterministic, so it's easy to add a nice progress bar to a UI.

Will
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140312/4bd9b204/attachment.html>

From jeanpaulkogelman at me.com  Wed Mar 12 21:08:33 2014
From: jeanpaulkogelman at me.com (Jean-Paul Kogelman)
Date: Wed, 12 Mar 2014 21:08:33 +0000 (GMT)
Subject: [Bitcoin-development] [RFC] Proposal: Base58 encoded HD Wallet
 root key with optional encryption
In-Reply-To: <5320C27B.8090205@gk2.sk>
Message-ID: <994afcd1-798d-452a-850c-02b5ce393dd3@me.com>



On Mar 12, 2014, at 01:24 PM, Pavol Rusnak <stick at gk2.sk> wrote:

On 03/12/2014 09:10 PM, William Yager wrote:
implement this is to allow semi-trusted devices (like desktop PCs) to do
all the "heavy lifting". The way the spec is defined, it is easy to have a
more powerful device do all the tough key stretching work without
significantly compromising the security of the wallet.

By disclosing "preH" to compromised computer (between steps 4 and 5) you
make further steps 5-9 quite less important.
?
Agreed, this is a valid concern. This could possibly allow a 3rd party to crack the password, but then again, they would not gain access to any key material. So yes, you could expose your password, but your key would still be safe.

If people feel strongly about this vulnerability, we can revisit step 4 and adjust it to make password recovery more expensive.

jp
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140312/d6e4f9ca/attachment.html>

From will.yager at gmail.com  Wed Mar 12 21:15:01 2014
From: will.yager at gmail.com (William Yager)
Date: Wed, 12 Mar 2014 16:15:01 -0500
Subject: [Bitcoin-development] [RFC] Proposal: Base58 encoded HD Wallet
 root key with optional encryption
In-Reply-To: <994afcd1-798d-452a-850c-02b5ce393dd3@me.com>
References: <5320C27B.8090205@gk2.sk>
	<994afcd1-798d-452a-850c-02b5ce393dd3@me.com>
Message-ID: <CAG8oi1MrYqe_sW--ppBZaw6gjKE1YY-oy_VgwcoF-bk=jaEMiA@mail.gmail.com>

On Wed, Mar 12, 2014 at 4:08 PM, Jean-Paul Kogelman <jeanpaulkogelman at me.com
> wrote:

>
> Agreed, this is a valid concern. This could possibly allow a 3rd party to
> crack the password, but then again, they would not gain access to any key
> material. So yes, you could expose your password, but your key would still
> be safe.
>
> If people feel strongly about this vulnerability, we can revisit step 4
> and adjust it to make password recovery more expensive.
>
>
Just to clarify on J.P.'s comments:

*If* you choose to outsource StrongH calculation, and *If* that machine is
compromised, then the security of your password is reduced to a single
round of salted PBKDF2-HMAC-SHA512. Your private key remains on the trusted
device, no matter what.

Regrettable, but not catastrophic.

Will
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140312/1929a5bc/attachment.html>

From laanwj at gmail.com  Thu Mar 13 11:11:52 2014
From: laanwj at gmail.com (Wladimir)
Date: Thu, 13 Mar 2014 12:11:52 +0100
Subject: [Bitcoin-development] 0.9.0rc3 tagged
Message-ID: <CA+s+GJBVsnjQhip8k=r-HYj6T6S4A3ov04LFwMHKMGWwMyO5jQ@mail.gmail.com>

Haven't seen any message about this on the mailing list yet, so FYI:
0.9.0rc3 has been tagged.

The significant change compared to rc2 is that the mining code fee policy
now matches relay fee policy.

Also a rare crash in the wallet code was fixed.

There are some further small build system, documentation and GUI changes.

Please start your gitian builds.

Wladimir
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140313/fe6ba3c9/attachment.html>

From gavinandresen at gmail.com  Thu Mar 13 12:25:32 2014
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Thu, 13 Mar 2014 08:25:32 -0400
Subject: [Bitcoin-development] 0.9.0rc3 tagged
In-Reply-To: <CA+s+GJBVsnjQhip8k=r-HYj6T6S4A3ov04LFwMHKMGWwMyO5jQ@mail.gmail.com>
References: <CA+s+GJBVsnjQhip8k=r-HYj6T6S4A3ov04LFwMHKMGWwMyO5jQ@mail.gmail.com>
Message-ID: <CABsx9T3_fOWaeyuK1LqO=vbkiSDHK0toH-aBaBCW5-tzivNR8A@mail.gmail.com>

Binaries for 0.9.0rc3 are available at:

    https://bitcoin.org/bin/0.9.0/test/

Please help sanity test.

We will also need more 'gitian builders' for the final 0.9.0 release
(Wladimir and I are the only builders so far for the rc3 binaries), so if
you are running Linux or OSX and are willing to help please start up those
virtual machines and start building dependencies.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140313/bb76052e/attachment.html>

From jgarzik at bitpay.com  Thu Mar 13 12:56:01 2014
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Thu, 13 Mar 2014 08:56:01 -0400
Subject: [Bitcoin-development] moving the default display to mbtc
In-Reply-To: <EE02A310-8604-4811-B2D0-FC32C72C20F3@grabhive.com>
References: <CAKaEYhK4oXH3hB7uS3=AEkA6r0VB5OYyTua+LOP18rq+rYajHg@mail.gmail.com>
	<52852C2D.9020103@gmail.com> <52853D8A.6010501@monetize.io>
	<CAJHLa0M6CkoDbD6FFixf9-mmhug7DvehSWCJ+EHWVxUDuwNiBg@mail.gmail.com>
	<EE02A310-8604-4811-B2D0-FC32C72C20F3@grabhive.com>
Message-ID: <CAJHLa0OMcTCgGESi-F4jT2NA3FyCeMYbD_52j47t3keEYBfK8g@mail.gmail.com>

Resurrecting this topic.  Bitcoin Wallet moved to mBTC several weeks
ago, which was disappointing -- it sounded like the consensus was
uBTC, and moving to uBTC later --which will happen-- may result in
additional user confusion, thanks to yet another decimal place
transition.



On Sun, Nov 17, 2013 at 9:28 PM, Wendell <w at grabhive.com> wrote:
> We're with uBTC too. Been waiting for the signal to do this, let's do it right after the fee system is improved.
>
> -wendell
>
> grabhive.com | twitter.com/hivewallet | gpg: 6C0C9411
>
> On Nov 15, 2013, at 6:03 AM, Jeff Garzik wrote:
>
>> Go straight to uBTC. Humans and existing computer systems handle numbers to
>> the left of the decimals just fine (HK Dollars, Yen). The opposite is
>> untrue (QuickBooks really does not like 3+ decimal places).
>



-- 
Jeff Garzik
Bitcoin core developer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From g.rowe at froot.co.uk  Thu Mar 13 13:29:46 2014
From: g.rowe at froot.co.uk (Gary Rowe)
Date: Thu, 13 Mar 2014 13:29:46 +0000
Subject: [Bitcoin-development] moving the default display to mbtc
In-Reply-To: <CAJHLa0OMcTCgGESi-F4jT2NA3FyCeMYbD_52j47t3keEYBfK8g@mail.gmail.com>
References: <CAKaEYhK4oXH3hB7uS3=AEkA6r0VB5OYyTua+LOP18rq+rYajHg@mail.gmail.com>
	<52852C2D.9020103@gmail.com> <52853D8A.6010501@monetize.io>
	<CAJHLa0M6CkoDbD6FFixf9-mmhug7DvehSWCJ+EHWVxUDuwNiBg@mail.gmail.com>
	<EE02A310-8604-4811-B2D0-FC32C72C20F3@grabhive.com>
	<CAJHLa0OMcTCgGESi-F4jT2NA3FyCeMYbD_52j47t3keEYBfK8g@mail.gmail.com>
Message-ID: <CAKm8k+3J9Po4xQn9LhTQrnrGCvG36-kLCjWPX4kmd-c7h+LujA@mail.gmail.com>

The MultiBit HD view is that this is a locale-sensitive presentation issue.
As a result we offer a simple configuration panel giving pretty much every
possible combination: icon, m+icon,  ?+icon, BTC, mBTC,  ?BTC, XBT,
mXBT,  ?XBT, sat along
with settings for leading/trailing symbol, commas, spaces and points. This
allows anyone to customise to meet their own needs beyond the offered
default.

We apply the NIST guidelines for representation of SI unit symbols (i.e no
conversion to native language, no RTL giving icon+m etc).

Right now MultiBit HD is configured to use m+icon taken from the Font
Awesome icon set. However reading earlier posts it seems that ?+icon is
more sensible.

Let us know what you'd like.

Links:
m+icon screenshot: http://imgur.com/a/WCDoG
Font Awesome icon: http://fortawesome.github.io/Font-Awesome/icon/btc/
NIST SI guidelines: http://physics.nist.gov/Pubs/SP811/sec07.html


On 13 March 2014 12:56, Jeff Garzik <jgarzik at bitpay.com> wrote:

> Resurrecting this topic.  Bitcoin Wallet moved to mBTC several weeks
> ago, which was disappointing -- it sounded like the consensus was
> uBTC, and moving to uBTC later --which will happen-- may result in
> additional user confusion, thanks to yet another decimal place
> transition.
>
>
>
> On Sun, Nov 17, 2013 at 9:28 PM, Wendell <w at grabhive.com> wrote:
> > We're with uBTC too. Been waiting for the signal to do this, let's do it
> right after the fee system is improved.
> >
> > -wendell
> >
> > grabhive.com | twitter.com/hivewallet | gpg: 6C0C9411
> >
> > On Nov 15, 2013, at 6:03 AM, Jeff Garzik wrote:
> >
> >> Go straight to uBTC. Humans and existing computer systems handle
> numbers to
> >> the left of the decimals just fine (HK Dollars, Yen). The opposite is
> >> untrue (QuickBooks really does not like 3+ decimal places).
> >
>
>
>
> --
> Jeff Garzik
> Bitcoin core developer and open source evangelist
> BitPay, Inc.      https://bitpay.com/
>
>
> ------------------------------------------------------------------------------
> Learn Graph Databases - Download FREE O'Reilly Book
> "Graph Databases" is the definitive new guide to graph databases and their
> applications. Written by three acclaimed leaders in the field,
> this first edition is now available. Download your free book today!
> http://p.sf.net/sfu/13534_NeoTech
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140313/1eeb631f/attachment.html>

From mike at plan99.net  Thu Mar 13 13:31:24 2014
From: mike at plan99.net (Mike Hearn)
Date: Thu, 13 Mar 2014 14:31:24 +0100
Subject: [Bitcoin-development] moving the default display to mbtc
In-Reply-To: <CAKm8k+3J9Po4xQn9LhTQrnrGCvG36-kLCjWPX4kmd-c7h+LujA@mail.gmail.com>
References: <CAKaEYhK4oXH3hB7uS3=AEkA6r0VB5OYyTua+LOP18rq+rYajHg@mail.gmail.com>
	<52852C2D.9020103@gmail.com> <52853D8A.6010501@monetize.io>
	<CAJHLa0M6CkoDbD6FFixf9-mmhug7DvehSWCJ+EHWVxUDuwNiBg@mail.gmail.com>
	<EE02A310-8604-4811-B2D0-FC32C72C20F3@grabhive.com>
	<CAJHLa0OMcTCgGESi-F4jT2NA3FyCeMYbD_52j47t3keEYBfK8g@mail.gmail.com>
	<CAKm8k+3J9Po4xQn9LhTQrnrGCvG36-kLCjWPX4kmd-c7h+LujA@mail.gmail.com>
Message-ID: <CANEZrP1VbQPapKJCLcE0+vpK0xac6D6JxRGKdagPVchfZjpUmQ@mail.gmail.com>

The standard has become mBTC and that's what was adopted. It's too late to
try and sway this on a mailing list thread now.


On Thu, Mar 13, 2014 at 2:29 PM, Gary Rowe <g.rowe at froot.co.uk> wrote:

> The MultiBit HD view is that this is a locale-sensitive presentation
> issue. As a result we offer a simple configuration panel giving pretty much
> every possible combination: icon, m+icon,  ?+icon, BTC, mBTC,  ?BTC, XBT,
> mXBT,  ?XBT, sat along with settings for leading/trailing symbol, commas,
> spaces and points. This allows anyone to customise to meet their own needs
> beyond the offered default.
>
> We apply the NIST guidelines for representation of SI unit symbols (i.e no
> conversion to native language, no RTL giving icon+m etc).
>
> Right now MultiBit HD is configured to use m+icon taken from the Font
> Awesome icon set. However reading earlier posts it seems that ?+icon is
> more sensible.
>
> Let us know what you'd like.
>
> Links:
> m+icon screenshot: http://imgur.com/a/WCDoG
> Font Awesome icon: http://fortawesome.github.io/Font-Awesome/icon/btc/
> NIST SI guidelines: http://physics.nist.gov/Pubs/SP811/sec07.html
>
>
> On 13 March 2014 12:56, Jeff Garzik <jgarzik at bitpay.com> wrote:
>
>> Resurrecting this topic.  Bitcoin Wallet moved to mBTC several weeks
>> ago, which was disappointing -- it sounded like the consensus was
>> uBTC, and moving to uBTC later --which will happen-- may result in
>> additional user confusion, thanks to yet another decimal place
>> transition.
>>
>>
>>
>> On Sun, Nov 17, 2013 at 9:28 PM, Wendell <w at grabhive.com> wrote:
>> > We're with uBTC too. Been waiting for the signal to do this, let's do
>> it right after the fee system is improved.
>> >
>> > -wendell
>> >
>> > grabhive.com | twitter.com/hivewallet | gpg: 6C0C9411
>> >
>> > On Nov 15, 2013, at 6:03 AM, Jeff Garzik wrote:
>> >
>> >> Go straight to uBTC. Humans and existing computer systems handle
>> numbers to
>> >> the left of the decimals just fine (HK Dollars, Yen). The opposite is
>> >> untrue (QuickBooks really does not like 3+ decimal places).
>> >
>>
>>
>>
>> --
>> Jeff Garzik
>> Bitcoin core developer and open source evangelist
>> BitPay, Inc.      https://bitpay.com/
>>
>>
>> ------------------------------------------------------------------------------
>> Learn Graph Databases - Download FREE O'Reilly Book
>> "Graph Databases" is the definitive new guide to graph databases and their
>> applications. Written by three acclaimed leaders in the field,
>> this first edition is now available. Download your free book today!
>> http://p.sf.net/sfu/13534_NeoTech
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>
>
>
>
> ------------------------------------------------------------------------------
> Learn Graph Databases - Download FREE O'Reilly Book
> "Graph Databases" is the definitive new guide to graph databases and their
> applications. Written by three acclaimed leaders in the field,
> this first edition is now available. Download your free book today!
> http://p.sf.net/sfu/13534_NeoTech
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140313/e80d4e59/attachment.html>

From laanwj at gmail.com  Thu Mar 13 13:34:19 2014
From: laanwj at gmail.com (Wladimir)
Date: Thu, 13 Mar 2014 14:34:19 +0100
Subject: [Bitcoin-development] moving the default display to mbtc
In-Reply-To: <CAJHLa0OMcTCgGESi-F4jT2NA3FyCeMYbD_52j47t3keEYBfK8g@mail.gmail.com>
References: <CAKaEYhK4oXH3hB7uS3=AEkA6r0VB5OYyTua+LOP18rq+rYajHg@mail.gmail.com>
	<52852C2D.9020103@gmail.com> <52853D8A.6010501@monetize.io>
	<CAJHLa0M6CkoDbD6FFixf9-mmhug7DvehSWCJ+EHWVxUDuwNiBg@mail.gmail.com>
	<EE02A310-8604-4811-B2D0-FC32C72C20F3@grabhive.com>
	<CAJHLa0OMcTCgGESi-F4jT2NA3FyCeMYbD_52j47t3keEYBfK8g@mail.gmail.com>
Message-ID: <CA+s+GJBSGPBQWWYR1NYSc2E4Y1BWAn8zf7xsu4wQ1O8cA8OWbw@mail.gmail.com>

On Thu, Mar 13, 2014 at 1:56 PM, Jeff Garzik <jgarzik at bitpay.com> wrote:

> Resurrecting this topic.  Bitcoin Wallet moved to mBTC several weeks
> ago, which was disappointing -- it sounded like the consensus was
> uBTC, and moving to uBTC later --which will happen-- may result in
> additional user confusion, thanks to yet another decimal place
> transition.
>

I've kind of given up getting any consensus about this, or even getting
people to care.

Everyone agrees that a decimal shift would be good, but it's the same
boring shed painting discussion every time on how many decimals. In the end
nothing happens.

I can't really blame Andreas for finally taking action and making the
change to mBTC. People in the community are familiar with mBTC because some
exchanges and price sites used mBTC (at least for a while when >$1000),
also mBTC seems to be catching on on reddit etc.

Moving to muBTC (which in itself would be better because it is the final
unit change ever needed without hardfork) would require more coordinated
education effort.

Wladimir
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140313/ff0ee5e1/attachment.html>

From andreas at schildbach.de  Thu Mar 13 13:40:12 2014
From: andreas at schildbach.de (Andreas Schildbach)
Date: Thu, 13 Mar 2014 14:40:12 +0100
Subject: [Bitcoin-development] moving the default display to mbtc
In-Reply-To: <CANEZrP1VbQPapKJCLcE0+vpK0xac6D6JxRGKdagPVchfZjpUmQ@mail.gmail.com>
References: <CAKaEYhK4oXH3hB7uS3=AEkA6r0VB5OYyTua+LOP18rq+rYajHg@mail.gmail.com>	<52852C2D.9020103@gmail.com>
	<52853D8A.6010501@monetize.io>	<CAJHLa0M6CkoDbD6FFixf9-mmhug7DvehSWCJ+EHWVxUDuwNiBg@mail.gmail.com>	<EE02A310-8604-4811-B2D0-FC32C72C20F3@grabhive.com>	<CAJHLa0OMcTCgGESi-F4jT2NA3FyCeMYbD_52j47t3keEYBfK8g@mail.gmail.com>	<CAKm8k+3J9Po4xQn9LhTQrnrGCvG36-kLCjWPX4kmd-c7h+LujA@mail.gmail.com>
	<CANEZrP1VbQPapKJCLcE0+vpK0xac6D6JxRGKdagPVchfZjpUmQ@mail.gmail.com>
Message-ID: <lfscfd$3cs$1@ger.gmane.org>

Indeed. And users were crying for mBTC. Nobody was asking for ?BTC.

I must admit I was not aware if this thread. I just watched other
wallets and at some point decided its time to switch to mBTC.


On 03/13/2014 02:31 PM, Mike Hearn wrote:
> The standard has become mBTC and that's what was adopted. It's too late
> to try and sway this on a mailing list thread now.
> 
> 
> On Thu, Mar 13, 2014 at 2:29 PM, Gary Rowe <g.rowe at froot.co.uk
> <mailto:g.rowe at froot.co.uk>> wrote:
> 
>     The MultiBit HD view is that this is a locale-sensitive presentation
>     issue. As a result we offer a simple configuration panel giving
>     pretty much every possible combination: icon, m+icon,  ?+icon, BTC,
>     mBTC,  ?BTC, XBT, mXBT,  ?XBT, sat along with settings for
>     leading/trailing symbol, commas, spaces and points. This allows
>     anyone to customise to meet their own needs beyond the offered default. 
> 
>     We apply the NIST guidelines for representation of SI unit symbols
>     (i.e no conversion to native language, no RTL giving icon+m etc).
> 
>     Right now MultiBit HD is configured to use m+icon taken from the
>     Font Awesome icon set. However reading earlier posts it seems
>     that ?+icon is more sensible. 
> 
>     Let us know what you'd like.
> 
>     Links:
>     m+icon screenshot: http://imgur.com/a/WCDoG
>     Font Awesome icon: http://fortawesome.github.io/Font-Awesome/icon/btc/
>     NIST SI guidelines: http://physics.nist.gov/Pubs/SP811/sec07.html
> 
> 
>     On 13 March 2014 12:56, Jeff Garzik <jgarzik at bitpay.com
>     <mailto:jgarzik at bitpay.com>> wrote:
> 
>         Resurrecting this topic.  Bitcoin Wallet moved to mBTC several weeks
>         ago, which was disappointing -- it sounded like the consensus was
>         uBTC, and moving to uBTC later --which will happen-- may result in
>         additional user confusion, thanks to yet another decimal place
>         transition.
> 
> 
> 
>         On Sun, Nov 17, 2013 at 9:28 PM, Wendell <w at grabhive.com
>         <mailto:w at grabhive.com>> wrote:
>         > We're with uBTC too. Been waiting for the signal to do this,
>         let's do it right after the fee system is improved.
>         >
>         > -wendell
>         >
>         > grabhive.com <http://grabhive.com> | twitter.com/hivewallet
>         <http://twitter.com/hivewallet> | gpg: 6C0C9411
>         >
>         > On Nov 15, 2013, at 6:03 AM, Jeff Garzik wrote:
>         >
>         >> Go straight to uBTC. Humans and existing computer systems
>         handle numbers to
>         >> the left of the decimals just fine (HK Dollars, Yen). The
>         opposite is
>         >> untrue (QuickBooks really does not like 3+ decimal places).
>         >
> 
> 
> 
>         --
>         Jeff Garzik
>         Bitcoin core developer and open source evangelist
>         BitPay, Inc.      https://bitpay.com/
> 
>         ------------------------------------------------------------------------------
>         Learn Graph Databases - Download FREE O'Reilly Book
>         "Graph Databases" is the definitive new guide to graph databases
>         and their
>         applications. Written by three acclaimed leaders in the field,
>         this first edition is now available. Download your free book today!
>         http://p.sf.net/sfu/13534_NeoTech
>         _______________________________________________
>         Bitcoin-development mailing list
>         Bitcoin-development at lists.sourceforge.net
>         <mailto:Bitcoin-development at lists.sourceforge.net>
>         https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 
> 
> 
>     ------------------------------------------------------------------------------
>     Learn Graph Databases - Download FREE O'Reilly Book
>     "Graph Databases" is the definitive new guide to graph databases and
>     their
>     applications. Written by three acclaimed leaders in the field,
>     this first edition is now available. Download your free book today!
>     http://p.sf.net/sfu/13534_NeoTech
>     _______________________________________________
>     Bitcoin-development mailing list
>     Bitcoin-development at lists.sourceforge.net
>     <mailto:Bitcoin-development at lists.sourceforge.net>
>     https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 
> 
> 
> 
> ------------------------------------------------------------------------------
> Learn Graph Databases - Download FREE O'Reilly Book
> "Graph Databases" is the definitive new guide to graph databases and their
> applications. Written by three acclaimed leaders in the field,
> this first edition is now available. Download your free book today!
> http://p.sf.net/sfu/13534_NeoTech
> 
> 
> 
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 





From jgarzik at bitpay.com  Thu Mar 13 13:45:54 2014
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Thu, 13 Mar 2014 09:45:54 -0400
Subject: [Bitcoin-development] moving the default display to mbtc
In-Reply-To: <CA+s+GJBSGPBQWWYR1NYSc2E4Y1BWAn8zf7xsu4wQ1O8cA8OWbw@mail.gmail.com>
References: <CAKaEYhK4oXH3hB7uS3=AEkA6r0VB5OYyTua+LOP18rq+rYajHg@mail.gmail.com>
	<52852C2D.9020103@gmail.com> <52853D8A.6010501@monetize.io>
	<CAJHLa0M6CkoDbD6FFixf9-mmhug7DvehSWCJ+EHWVxUDuwNiBg@mail.gmail.com>
	<EE02A310-8604-4811-B2D0-FC32C72C20F3@grabhive.com>
	<CAJHLa0OMcTCgGESi-F4jT2NA3FyCeMYbD_52j47t3keEYBfK8g@mail.gmail.com>
	<CA+s+GJBSGPBQWWYR1NYSc2E4Y1BWAn8zf7xsu4wQ1O8cA8OWbw@mail.gmail.com>
Message-ID: <CAJHLa0NEEppHg_Lmi_Oxnz_gPSHZPfQpeg+-8MrvFYDmdM83-g@mail.gmail.com>

<vendor hat: on>

Based on this seeming consensus, BitPay was headed towards uBTC
internally, and hoped to coordinate messaging and rollout with others
in the community.  Ah well, proceed apace, and Bitcoin Wallet will
catch up, I suppose.

Multiple unit changes negatively impact users, but we are already there :/


On Thu, Mar 13, 2014 at 9:34 AM, Wladimir <laanwj at gmail.com> wrote:
>
> On Thu, Mar 13, 2014 at 1:56 PM, Jeff Garzik <jgarzik at bitpay.com> wrote:
>>
>> Resurrecting this topic.  Bitcoin Wallet moved to mBTC several weeks
>> ago, which was disappointing -- it sounded like the consensus was
>> uBTC, and moving to uBTC later --which will happen-- may result in
>> additional user confusion, thanks to yet another decimal place
>> transition.
>
>
> I've kind of given up getting any consensus about this, or even getting
> people to care.
>
> Everyone agrees that a decimal shift would be good, but it's the same boring
> shed painting discussion every time on how many decimals. In the end nothing
> happens.
>
> I can't really blame Andreas for finally taking action and making the change
> to mBTC. People in the community are familiar with mBTC because some
> exchanges and price sites used mBTC (at least for a while when >$1000), also
> mBTC seems to be catching on on reddit etc.
>
> Moving to muBTC (which in itself would be better because it is the final
> unit change ever needed without hardfork) would require more coordinated
> education effort.
>
> Wladimir



-- 
Jeff Garzik
Bitcoin core developer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From mike at plan99.net  Thu Mar 13 13:53:29 2014
From: mike at plan99.net (Mike Hearn)
Date: Thu, 13 Mar 2014 14:53:29 +0100
Subject: [Bitcoin-development] moving the default display to mbtc
In-Reply-To: <CAJHLa0NEEppHg_Lmi_Oxnz_gPSHZPfQpeg+-8MrvFYDmdM83-g@mail.gmail.com>
References: <CAKaEYhK4oXH3hB7uS3=AEkA6r0VB5OYyTua+LOP18rq+rYajHg@mail.gmail.com>
	<52852C2D.9020103@gmail.com> <52853D8A.6010501@monetize.io>
	<CAJHLa0M6CkoDbD6FFixf9-mmhug7DvehSWCJ+EHWVxUDuwNiBg@mail.gmail.com>
	<EE02A310-8604-4811-B2D0-FC32C72C20F3@grabhive.com>
	<CAJHLa0OMcTCgGESi-F4jT2NA3FyCeMYbD_52j47t3keEYBfK8g@mail.gmail.com>
	<CA+s+GJBSGPBQWWYR1NYSc2E4Y1BWAn8zf7xsu4wQ1O8cA8OWbw@mail.gmail.com>
	<CAJHLa0NEEppHg_Lmi_Oxnz_gPSHZPfQpeg+-8MrvFYDmdM83-g@mail.gmail.com>
Message-ID: <CANEZrP2O4hDBiCNvO1oV5X7OtnQ4xVDD=RtozQY8ESRHgXQu9w@mail.gmail.com>

BitPay should use mBTC as well. Unless you can point to any major wallets,
exchanges or price watching sites that use uBTC by default?

I think it is highly optimistic to assume we'll need another 1000x shift
any time soon. By now Bitcoin isn't obscure anymore. Lots of people have
heard about it. Getting from $1 to $1000 was amazing, but it was possible
through huge media coverage. Getting from $1000 to $1,000,000 would take
massive adoption of the kind Bitcoin isn't ready for yet.



On Thu, Mar 13, 2014 at 2:45 PM, Jeff Garzik <jgarzik at bitpay.com> wrote:

> <vendor hat: on>
>
> Based on this seeming consensus, BitPay was headed towards uBTC
> internally, and hoped to coordinate messaging and rollout with others
> in the community.  Ah well, proceed apace, and Bitcoin Wallet will
> catch up, I suppose.
>
> Multiple unit changes negatively impact users, but we are already there :/
>
>
> On Thu, Mar 13, 2014 at 9:34 AM, Wladimir <laanwj at gmail.com> wrote:
> >
> > On Thu, Mar 13, 2014 at 1:56 PM, Jeff Garzik <jgarzik at bitpay.com> wrote:
> >>
> >> Resurrecting this topic.  Bitcoin Wallet moved to mBTC several weeks
> >> ago, which was disappointing -- it sounded like the consensus was
> >> uBTC, and moving to uBTC later --which will happen-- may result in
> >> additional user confusion, thanks to yet another decimal place
> >> transition.
> >
> >
> > I've kind of given up getting any consensus about this, or even getting
> > people to care.
> >
> > Everyone agrees that a decimal shift would be good, but it's the same
> boring
> > shed painting discussion every time on how many decimals. In the end
> nothing
> > happens.
> >
> > I can't really blame Andreas for finally taking action and making the
> change
> > to mBTC. People in the community are familiar with mBTC because some
> > exchanges and price sites used mBTC (at least for a while when >$1000),
> also
> > mBTC seems to be catching on on reddit etc.
> >
> > Moving to muBTC (which in itself would be better because it is the final
> > unit change ever needed without hardfork) would require more coordinated
> > education effort.
> >
> > Wladimir
>
>
>
> --
> Jeff Garzik
> Bitcoin core developer and open source evangelist
> BitPay, Inc.      https://bitpay.com/
>
>
> ------------------------------------------------------------------------------
> Learn Graph Databases - Download FREE O'Reilly Book
> "Graph Databases" is the definitive new guide to graph databases and their
> applications. Written by three acclaimed leaders in the field,
> this first edition is now available. Download your free book today!
> http://p.sf.net/sfu/13534_NeoTech
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140313/a782ced9/attachment.html>

From jgarzik at bitpay.com  Thu Mar 13 14:32:06 2014
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Thu, 13 Mar 2014 10:32:06 -0400
Subject: [Bitcoin-development] moving the default display to mbtc
In-Reply-To: <CANEZrP2O4hDBiCNvO1oV5X7OtnQ4xVDD=RtozQY8ESRHgXQu9w@mail.gmail.com>
References: <CAKaEYhK4oXH3hB7uS3=AEkA6r0VB5OYyTua+LOP18rq+rYajHg@mail.gmail.com>
	<52852C2D.9020103@gmail.com> <52853D8A.6010501@monetize.io>
	<CAJHLa0M6CkoDbD6FFixf9-mmhug7DvehSWCJ+EHWVxUDuwNiBg@mail.gmail.com>
	<EE02A310-8604-4811-B2D0-FC32C72C20F3@grabhive.com>
	<CAJHLa0OMcTCgGESi-F4jT2NA3FyCeMYbD_52j47t3keEYBfK8g@mail.gmail.com>
	<CA+s+GJBSGPBQWWYR1NYSc2E4Y1BWAn8zf7xsu4wQ1O8cA8OWbw@mail.gmail.com>
	<CAJHLa0NEEppHg_Lmi_Oxnz_gPSHZPfQpeg+-8MrvFYDmdM83-g@mail.gmail.com>
	<CANEZrP2O4hDBiCNvO1oV5X7OtnQ4xVDD=RtozQY8ESRHgXQu9w@mail.gmail.com>
Message-ID: <CAJHLa0PB-V+KgEr5uCj+mceESggp8G4MmLGHHpz2UD_R_w-zfQ@mail.gmail.com>

On Thu, Mar 13, 2014 at 9:53 AM, Mike Hearn <mike at plan99.net> wrote:
> BitPay should use mBTC as well. Unless you can point to any major wallets,
> exchanges or price watching sites that use uBTC by default?
>
> I think it is highly optimistic to assume we'll need another 1000x shift any
> time soon. By now Bitcoin isn't obscure anymore. Lots of people have heard

Such hand-wavy, data-free logic is precisely why community
coordination is preferred to random apps making random decisions in
this manner.

mBTC is problematic because you do not need 1000x shift in value to
produce annoyances for major accounting packages that are hard-limited
to two decimal places.  Further, spreadsheets hide information if
formatting is configured naively -- that is, if formatting is
configured for bitcoin the way it is configured for other currencies.

Fundamentally, more than two decimal places tends to violate the
Principle Of Least Astonishment with many humans, and as a result,
popular software systems have been written with that assumption.

-- 
Jeff Garzik
Bitcoin core developer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From seanmcmahon18 at gmail.com  Thu Mar 13 15:02:23 2014
From: seanmcmahon18 at gmail.com (Sean Mc)
Date: Thu, 13 Mar 2014 15:02:23 +0000
Subject: [Bitcoin-development] seanmcmahon18@gmail.com
Message-ID: <CAO7pequ5MEe7H=Dssbz3xhDFF3z90M7m-xG-To0qH_eCq8dHjw@mail.gmail.com>


-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140313/67e4fbd5/attachment.html>

From tamas at bitsofproof.com  Thu Mar 13 15:17:13 2014
From: tamas at bitsofproof.com (Tamas Blummer)
Date: Thu, 13 Mar 2014 16:17:13 +0100
Subject: [Bitcoin-development] moving the default display to mbtc
In-Reply-To: <mailman.271337.1390426426.2210.bitcoin-development@lists.sourceforge.net>
References: <mailman.271337.1390426426.2210.bitcoin-development@lists.sourceforge.net>
Message-ID: <2BCCC3C2-50FE-444F-9F51-D69181B7FDB0@bitsofproof.com>

Jeff's arguments are understood and supported by those who worked in finance.

Existing financial applications have often problems dealing with more than 2 decimals.
People who work in finance are used to two decimals.

Neither systems nor people in finance have a problem with large numbers though.

For above practical reasons I am also for moving to a unit that equals 100 satoshi.
I heard the name bit for it which I like.

Regards,

Tam?s Blummer
Founder, CEO
Bits of Proof
http://bitsofproof.com

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140313/a8226de1/attachment.html>

From ctpacia at gmail.com  Thu Mar 13 15:37:56 2014
From: ctpacia at gmail.com (Chris Pacia)
Date: Thu, 13 Mar 2014 11:37:56 -0400
Subject: [Bitcoin-development] moving the default display to mbtc
In-Reply-To: <2BCCC3C2-50FE-444F-9F51-D69181B7FDB0@bitsofproof.com>
References: <mailman.271337.1390426426.2210.bitcoin-development@lists.sourceforge.net>
	<2BCCC3C2-50FE-444F-9F51-D69181B7FDB0@bitsofproof.com>
Message-ID: <CAB+qUq4yRd-ugC-FWxYsGbwQCARBP1kNbz5c+fT55qcxY4kvHA@mail.gmail.com>

I second the name 'bit' for ?BTC.
On Mar 13, 2014 11:19 AM, "Tamas Blummer" <tamas at bitsofproof.com> wrote:

> Jeff's arguments are understood and supported by those who worked in
> finance.
>
> Existing financial applications have often problems dealing with more than
> 2 decimals.
> People who work in finance are used to two decimals.
>
> Neither systems nor people in finance have a problem with large numbers
> though.
>
> For above practical reasons I am also for moving to a unit that equals 100
> satoshi.
> I heard the name bit for it which I like.
>
> Regards,
>
> Tam?s Blummer
> Founder, CEO
> Bits of Proof
> http://bitsofproof.com
>
>
>
> ------------------------------------------------------------------------------
> Learn Graph Databases - Download FREE O'Reilly Book
> "Graph Databases" is the definitive new guide to graph databases and their
> applications. Written by three acclaimed leaders in the field,
> this first edition is now available. Download your free book today!
> http://p.sf.net/sfu/13534_NeoTech
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140313/2d59a175/attachment.html>

From mike at plan99.net  Thu Mar 13 15:50:14 2014
From: mike at plan99.net (Mike Hearn)
Date: Thu, 13 Mar 2014 16:50:14 +0100
Subject: [Bitcoin-development] moving the default display to mbtc
In-Reply-To: <CAJHLa0PB-V+KgEr5uCj+mceESggp8G4MmLGHHpz2UD_R_w-zfQ@mail.gmail.com>
References: <CAKaEYhK4oXH3hB7uS3=AEkA6r0VB5OYyTua+LOP18rq+rYajHg@mail.gmail.com>
	<52852C2D.9020103@gmail.com> <52853D8A.6010501@monetize.io>
	<CAJHLa0M6CkoDbD6FFixf9-mmhug7DvehSWCJ+EHWVxUDuwNiBg@mail.gmail.com>
	<EE02A310-8604-4811-B2D0-FC32C72C20F3@grabhive.com>
	<CAJHLa0OMcTCgGESi-F4jT2NA3FyCeMYbD_52j47t3keEYBfK8g@mail.gmail.com>
	<CA+s+GJBSGPBQWWYR1NYSc2E4Y1BWAn8zf7xsu4wQ1O8cA8OWbw@mail.gmail.com>
	<CAJHLa0NEEppHg_Lmi_Oxnz_gPSHZPfQpeg+-8MrvFYDmdM83-g@mail.gmail.com>
	<CANEZrP2O4hDBiCNvO1oV5X7OtnQ4xVDD=RtozQY8ESRHgXQu9w@mail.gmail.com>
	<CAJHLa0PB-V+KgEr5uCj+mceESggp8G4MmLGHHpz2UD_R_w-zfQ@mail.gmail.com>
Message-ID: <CANEZrP1sJKGP5A82HbUU+v3oTsc5=U5Gq4Z5TrJ4=2FXLZq4yQ@mail.gmail.com>

On Thu, Mar 13, 2014 at 3:32 PM, Jeff Garzik <jgarzik at bitpay.com> wrote:

> Such hand-wavy, data-free logic is precisely why community
> coordination is preferred to random apps making random decisions in
> this manner.
>

That ship sailed months ago. If you wanted a big push for uBTC, then would
have been the time. Though given that it'd have made lots of normal
balances incredibly huge, perhaps it's a good thing that didn't happen.
Also "milli" is a unit people encounter in daily life whereas micro isn't.
Is it milli / micro / nano or milli / nano / micro? I bet a lot of people
would get that wrong.

If you have to export to financial packages that can't handle fractional
pennies, then by all means represent prices in whatever units you like for
that purpose, but in software designed for ordinary people in everyday life
mBTC is a pretty good fit.

Besides, fractional pennies crop up in existing currencies too (the famous
Verizon Math episode showed this), so if a financial package insists on
rounding to 2dp then I guess it may sometimes do the wrong thing in some
business cases already.

Fundamentally, more than two decimal places tends to violate the
> Principle Of Least Astonishment with many humans, and as a result,
> popular software systems have been written with that assumption.


Lots of people use currencies that don't have any fractional components at
all ! So perhaps all prices should be denominated in satoshis to ensure
that they're not surprised :)

The (number) line has to be drawn somewhere. Wallets are free to suppress
more than 2dp of precision and actually Andreas' app lets you choose your
preferred precision. So I think in the end it won't matter a whole lot, if
the defaults end up being wrong people can change them until wallet authors
catch up.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140313/70575f0a/attachment.html>

From etotheipi at gmail.com  Thu Mar 13 16:14:20 2014
From: etotheipi at gmail.com (Alan Reiner)
Date: Thu, 13 Mar 2014 12:14:20 -0400
Subject: [Bitcoin-development] moving the default display to mbtc
In-Reply-To: <CAJHLa0PB-V+KgEr5uCj+mceESggp8G4MmLGHHpz2UD_R_w-zfQ@mail.gmail.com>
References: <CAKaEYhK4oXH3hB7uS3=AEkA6r0VB5OYyTua+LOP18rq+rYajHg@mail.gmail.com>	<52852C2D.9020103@gmail.com>
	<52853D8A.6010501@monetize.io>	<CAJHLa0M6CkoDbD6FFixf9-mmhug7DvehSWCJ+EHWVxUDuwNiBg@mail.gmail.com>	<EE02A310-8604-4811-B2D0-FC32C72C20F3@grabhive.com>	<CAJHLa0OMcTCgGESi-F4jT2NA3FyCeMYbD_52j47t3keEYBfK8g@mail.gmail.com>	<CA+s+GJBSGPBQWWYR1NYSc2E4Y1BWAn8zf7xsu4wQ1O8cA8OWbw@mail.gmail.com>	<CAJHLa0NEEppHg_Lmi_Oxnz_gPSHZPfQpeg+-8MrvFYDmdM83-g@mail.gmail.com>	<CANEZrP2O4hDBiCNvO1oV5X7OtnQ4xVDD=RtozQY8ESRHgXQu9w@mail.gmail.com>
	<CAJHLa0PB-V+KgEr5uCj+mceESggp8G4MmLGHHpz2UD_R_w-zfQ@mail.gmail.com>
Message-ID: <5321D95C.2070402@gmail.com>

On 03/13/2014 10:32 AM, Jeff Garzik wrote:
> On Thu, Mar 13, 2014 at 9:53 AM, Mike Hearn <mike at plan99.net> wrote:
>> BitPay should use mBTC as well. Unless you can point to any major wallets,
>> exchanges or price watching sites that use uBTC by default?
>>
>> I think it is highly optimistic to assume we'll need another 1000x shift any
>> time soon. By now Bitcoin isn't obscure anymore. Lots of people have heard
> Such hand-wavy, data-free logic is precisely why community
> coordination is preferred to random apps making random decisions in
> this manner.
>
> mBTC is problematic because you do not need 1000x shift in value to
> produce annoyances for major accounting packages that are hard-limited
> to two decimal places.  Further, spreadsheets hide information if
> formatting is configured naively -- that is, if formatting is
> configured for bitcoin the way it is configured for other currencies.
>
> Fundamentally, more than two decimal places tends to violate the
> Principle Of Least Astonishment with many humans, and as a result,
> popular software systems have been written with that assumption.
>

I whole-heartedly agree with Jeff.  micro-BTC was the way to go to end
user confusion and make things easier for software systems which are
designed to handle money (i.e. two decimal places).  I also echo the
sentiment about people being able to handle large numbers well. 

We've been working with Marty Zigman who's creating a Bitcoin plugin for
NetSuite accounting platform, and he was already forced to switch
micro-BTC long ago for exactly the reasons described above.  I think the
system will track up to 3 decimal places without causing all sorts of
heartache and automatic rounding.

Of course, as Mike said, this ship may have already sailed, but if
there's any way to revisit this, I'm there.  We're just about to do
another Armory release and could support this very easily.



From hozer at hozed.org  Thu Mar 13 16:17:53 2014
From: hozer at hozed.org (Troy Benjegerdes)
Date: Thu, 13 Mar 2014 11:17:53 -0500
Subject: [Bitcoin-development] moving the default display to mbtc
In-Reply-To: <CANEZrP1sJKGP5A82HbUU+v3oTsc5=U5Gq4Z5TrJ4=2FXLZq4yQ@mail.gmail.com>
References: <52852C2D.9020103@gmail.com> <52853D8A.6010501@monetize.io>
	<CAJHLa0M6CkoDbD6FFixf9-mmhug7DvehSWCJ+EHWVxUDuwNiBg@mail.gmail.com>
	<EE02A310-8604-4811-B2D0-FC32C72C20F3@grabhive.com>
	<CAJHLa0OMcTCgGESi-F4jT2NA3FyCeMYbD_52j47t3keEYBfK8g@mail.gmail.com>
	<CA+s+GJBSGPBQWWYR1NYSc2E4Y1BWAn8zf7xsu4wQ1O8cA8OWbw@mail.gmail.com>
	<CAJHLa0NEEppHg_Lmi_Oxnz_gPSHZPfQpeg+-8MrvFYDmdM83-g@mail.gmail.com>
	<CANEZrP2O4hDBiCNvO1oV5X7OtnQ4xVDD=RtozQY8ESRHgXQu9w@mail.gmail.com>
	<CAJHLa0PB-V+KgEr5uCj+mceESggp8G4MmLGHHpz2UD_R_w-zfQ@mail.gmail.com>
	<CANEZrP1sJKGP5A82HbUU+v3oTsc5=U5Gq4Z5TrJ4=2FXLZq4yQ@mail.gmail.com>
Message-ID: <20140313161753.GX3180@nl.grid.coop>

On Thu, Mar 13, 2014 at 04:50:14PM +0100, Mike Hearn wrote:
> On Thu, Mar 13, 2014 at 3:32 PM, Jeff Garzik <jgarzik at bitpay.com> wrote:
> 
> > Such hand-wavy, data-free logic is precisely why community
> > coordination is preferred to random apps making random decisions in
> > this manner.
> >
> 
> That ship sailed months ago. If you wanted a big push for uBTC, then would
> have been the time. Though given that it'd have made lots of normal
> balances incredibly huge, perhaps it's a good thing that didn't happen.
> Also "milli" is a unit people encounter in daily life whereas micro isn't.
> Is it milli / micro / nano or milli / nano / micro? I bet a lot of people
> would get that wrong.

I think the ship of hand-wavy, data-free logic sailed with 
'money supply == 21 million', so why not enjoy the ride? If we care about
real people and real use cases, then let's talk about indexing the money 
supply to some blockchain-observable value and add demurrage instead of 
of bikeshedding the color of the latest coat of paint.

> 
> If you have to export to financial packages that can't handle fractional
> pennies, then by all means represent prices in whatever units you like for
> that purpose, but in software designed for ordinary people in everyday life
> mBTC is a pretty good fit.
> 
> Besides, fractional pennies crop up in existing currencies too (the famous
> Verizon Math episode showed this), so if a financial package insists on
> rounding to 2dp then I guess it may sometimes do the wrong thing in some
> business cases already.
> 
> Fundamentally, more than two decimal places tends to violate the
> > Principle Of Least Astonishment with many humans, and as a result,
> > popular software systems have been written with that assumption.
> 
> 
> Lots of people use currencies that don't have any fractional components at
> all ! So perhaps all prices should be denominated in satoshis to ensure
> that they're not surprised :)

I'm surprised every time I pull up to a gas pump and the price is 3.249999
per gallon. But I don't really care what the price is, as long as there's 
an e85 pump. If I could pay at the pump with bitcoin, I wouldn't even look
at the price, I'd only care if my tank got filled up or if I have to drive
slower to get better mileage.

Hell, I'd have an app that would tell me what gas station to go to that got
me the best miles per bitcoin based on where I actually wanted to go.



From hozer at hozed.org  Thu Mar 13 16:08:50 2014
From: hozer at hozed.org (Troy Benjegerdes)
Date: Thu, 13 Mar 2014 11:08:50 -0500
Subject: [Bitcoin-development] moving the default display to mbtc
In-Reply-To: <CAJHLa0NEEppHg_Lmi_Oxnz_gPSHZPfQpeg+-8MrvFYDmdM83-g@mail.gmail.com>
References: <CAKaEYhK4oXH3hB7uS3=AEkA6r0VB5OYyTua+LOP18rq+rYajHg@mail.gmail.com>
	<52852C2D.9020103@gmail.com> <52853D8A.6010501@monetize.io>
	<CAJHLa0M6CkoDbD6FFixf9-mmhug7DvehSWCJ+EHWVxUDuwNiBg@mail.gmail.com>
	<EE02A310-8604-4811-B2D0-FC32C72C20F3@grabhive.com>
	<CAJHLa0OMcTCgGESi-F4jT2NA3FyCeMYbD_52j47t3keEYBfK8g@mail.gmail.com>
	<CA+s+GJBSGPBQWWYR1NYSc2E4Y1BWAn8zf7xsu4wQ1O8cA8OWbw@mail.gmail.com>
	<CAJHLa0NEEppHg_Lmi_Oxnz_gPSHZPfQpeg+-8MrvFYDmdM83-g@mail.gmail.com>
Message-ID: <20140313160850.GW3180@nl.grid.coop>

<cynic hat: on>

Every volatility bump messes up expectations of what a bitcoin is worth,
so why are we bikeshedding uBTC vs mBTC? Just be done with it and do mBTC
now, and plan uBTC for just after the next price spike to $10KUSD or whatever, 
and then plan on rolling back to mBTC when the price crashes from altcoin
money supply inflation competition.


On Thu, Mar 13, 2014 at 09:45:54AM -0400, Jeff Garzik wrote:
> <vendor hat: on>
> 
> Based on this seeming consensus, BitPay was headed towards uBTC
> internally, and hoped to coordinate messaging and rollout with others
> in the community.  Ah well, proceed apace, and Bitcoin Wallet will
> catch up, I suppose.
> 
> Multiple unit changes negatively impact users, but we are already there :/
> 
> 
> On Thu, Mar 13, 2014 at 9:34 AM, Wladimir <laanwj at gmail.com> wrote:
> >
> > On Thu, Mar 13, 2014 at 1:56 PM, Jeff Garzik <jgarzik at bitpay.com> wrote:
> >>
> >> Resurrecting this topic.  Bitcoin Wallet moved to mBTC several weeks
> >> ago, which was disappointing -- it sounded like the consensus was
> >> uBTC, and moving to uBTC later --which will happen-- may result in
> >> additional user confusion, thanks to yet another decimal place
> >> transition.
> >
> >
> > I've kind of given up getting any consensus about this, or even getting
> > people to care.
> >
> > Everyone agrees that a decimal shift would be good, but it's the same boring
> > shed painting discussion every time on how many decimals. In the end nothing
> > happens.
> >
> > I can't really blame Andreas for finally taking action and making the change
> > to mBTC. People in the community are familiar with mBTC because some
> > exchanges and price sites used mBTC (at least for a while when >$1000), also
> > mBTC seems to be catching on on reddit etc.
> >
> > Moving to muBTC (which in itself would be better because it is the final
> > unit change ever needed without hardfork) would require more coordinated
> > education effort.
> >
> > Wladimir
> 
> 
> 
> -- 
> Jeff Garzik
> Bitcoin core developer and open source evangelist
> BitPay, Inc.      https://bitpay.com/
> 
> ------------------------------------------------------------------------------
> Learn Graph Databases - Download FREE O'Reilly Book
> "Graph Databases" is the definitive new guide to graph databases and their
> applications. Written by three acclaimed leaders in the field,
> this first edition is now available. Download your free book today!
> http://p.sf.net/sfu/13534_NeoTech
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development

-- 
----------------------------------------------------------------------------
Troy Benjegerdes                 'da hozer'                  hozer at hozed.org
7 elements      earth::water::air::fire::mind::spirit::soul        grid.coop

      Never pick a fight with someone who buys ink by the barrel,
         nor try buy a hacker who makes money by the megahash




From tamas at bitsofproof.com  Thu Mar 13 16:23:07 2014
From: tamas at bitsofproof.com (Tamas Blummer)
Date: Thu, 13 Mar 2014 17:23:07 +0100
Subject: [Bitcoin-development] moving the default display to mbtc
In-Reply-To: <5321D95C.2070402@gmail.com>
References: <CAKaEYhK4oXH3hB7uS3=AEkA6r0VB5OYyTua+LOP18rq+rYajHg@mail.gmail.com>	<52852C2D.9020103@gmail.com>
	<52853D8A.6010501@monetize.io>	<CAJHLa0M6CkoDbD6FFixf9-mmhug7DvehSWCJ+EHWVxUDuwNiBg@mail.gmail.com>	<EE02A310-8604-4811-B2D0-FC32C72C20F3@grabhive.com>	<CAJHLa0OMcTCgGESi-F4jT2NA3FyCeMYbD_52j47t3keEYBfK8g@mail.gmail.com>	<CA+s+GJBSGPBQWWYR1NYSc2E4Y1BWAn8zf7xsu4wQ1O8cA8OWbw@mail.gmail.com>	<CAJHLa0NEEppHg_Lmi_Oxnz_gPSHZPfQpeg+-8MrvFYDmdM83-g@mail.gmail.com>	<CANEZrP2O4hDBiCNvO1oV5X7OtnQ4xVDD=RtozQY8ESRHgXQu9w@mail.gmail.com>
	<CAJHLa0PB-V+KgEr5uCj+mceESggp8G4MmLGHHpz2UD_R_w-zfQ@mail.gmail.com>
	<5321D95C.2070402@gmail.com>
Message-ID: <9A0252C4-1C70-446A-9F88-D53BADCD11E7@bitsofproof.com>


On 13.03.2014, at 17:14, Alan Reiner <etotheipi at gmail.com> wrote:

> We've been working with Marty Zigman who's creating a Bitcoin plugin for
> NetSuite accounting platform, and he was already forced to switch
> micro-BTC long ago for exactly the reasons described above.  I think the
> system will track up to 3 decimal places without causing all sorts of
> heartache and automatic rounding.
> 
> Of course, as Mike said, this ship may have already sailed, but if
> there's any way to revisit this, I'm there.  We're just about to do
> another Armory release and could support this very easily.
> 

Not suprised that people dealing with real world finance problems 
and people who are not engineers come to the same conclusion. 
Welcome Alan!

Why not add 'bit' as an option or even default to Armory?

Regards,

Tamas Blummer
Founder, CEO
Bits of Proof
http://bitsofproof.com

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140313/3594aaa8/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 495 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140313/3594aaa8/attachment.sig>

From jgarzik at bitpay.com  Thu Mar 13 16:29:03 2014
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Thu, 13 Mar 2014 12:29:03 -0400
Subject: [Bitcoin-development] moving the default display to mbtc
In-Reply-To: <5321D95C.2070402@gmail.com>
References: <CAKaEYhK4oXH3hB7uS3=AEkA6r0VB5OYyTua+LOP18rq+rYajHg@mail.gmail.com>
	<52852C2D.9020103@gmail.com> <52853D8A.6010501@monetize.io>
	<CAJHLa0M6CkoDbD6FFixf9-mmhug7DvehSWCJ+EHWVxUDuwNiBg@mail.gmail.com>
	<EE02A310-8604-4811-B2D0-FC32C72C20F3@grabhive.com>
	<CAJHLa0OMcTCgGESi-F4jT2NA3FyCeMYbD_52j47t3keEYBfK8g@mail.gmail.com>
	<CA+s+GJBSGPBQWWYR1NYSc2E4Y1BWAn8zf7xsu4wQ1O8cA8OWbw@mail.gmail.com>
	<CAJHLa0NEEppHg_Lmi_Oxnz_gPSHZPfQpeg+-8MrvFYDmdM83-g@mail.gmail.com>
	<CANEZrP2O4hDBiCNvO1oV5X7OtnQ4xVDD=RtozQY8ESRHgXQu9w@mail.gmail.com>
	<CAJHLa0PB-V+KgEr5uCj+mceESggp8G4MmLGHHpz2UD_R_w-zfQ@mail.gmail.com>
	<5321D95C.2070402@gmail.com>
Message-ID: <CAJHLa0MrLGDVO7LFpUSb+LCxNjKebQQ7UHSwyWPYwzWw5WcbAw@mail.gmail.com>

On Thu, Mar 13, 2014 at 12:14 PM, Alan Reiner <etotheipi at gmail.com> wrote:
> Of course, as Mike said, this ship may have already sailed, but if
> there's any way to revisit this, I'm there.  We're just about to do
> another Armory release and could support this very easily.

mBTC now just means the issue -will- be revisited in the future.  Just
a question of when, not if.

People and software in various nations handle big numbers for small
values (e.g. Yen) just fine.
People and software do -not- handle extra decimal places well, field
experience shows.

<vendor hat: on>  To roll out QuickBooks support --without converting
any numbers, a key financial attribute-- mBTC is simply insufficient
today, not in the future.

I also argue that it is a security risk, as follows:  To support
accounting packages limited to 2 decimal places, decimal point
conversion must be performed.  This produces a situation where your
accounting system shows numbers that do not visually match the numbers
in the bitcoin software.  That, in turn, making auditing more
difficult, particularly for outsiders.

Shipping with mBTC defaults was decidedly unwise, considering that --
like BTC -- it fails to solve existing, known problems that uBTC can
solve, and considering the inevitable mBTC->uBTC switch.

-- 
Jeff Garzik
Bitcoin core developer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From tamas at bitsofproof.com  Thu Mar 13 16:30:20 2014
From: tamas at bitsofproof.com (Tamas Blummer)
Date: Thu, 13 Mar 2014 17:30:20 +0100
Subject: [Bitcoin-development] moving the default display to mbtc
In-Reply-To: <20140313160850.GW3180@nl.grid.coop>
References: <CAKaEYhK4oXH3hB7uS3=AEkA6r0VB5OYyTua+LOP18rq+rYajHg@mail.gmail.com>
	<52852C2D.9020103@gmail.com> <52853D8A.6010501@monetize.io>
	<CAJHLa0M6CkoDbD6FFixf9-mmhug7DvehSWCJ+EHWVxUDuwNiBg@mail.gmail.com>
	<EE02A310-8604-4811-B2D0-FC32C72C20F3@grabhive.com>
	<CAJHLa0OMcTCgGESi-F4jT2NA3FyCeMYbD_52j47t3keEYBfK8g@mail.gmail.com>
	<CA+s+GJBSGPBQWWYR1NYSc2E4Y1BWAn8zf7xsu4wQ1O8cA8OWbw@mail.gmail.com>
	<CAJHLa0NEEppHg_Lmi_Oxnz_gPSHZPfQpeg+-8MrvFYDmdM83-g@mail.gmail.com>
	<20140313160850.GW3180@nl.grid.coop>
Message-ID: <8931534D-CED6-406C-AA68-20A681723283@bitsofproof.com>

BTW, its not like this would be the first time this was raised, instead the "ship left" while ignoring arguments.

The idea of is up there for votes since March 2013 https://bitcointalk.org/index.php?topic=149150.0
and received the most votes. 

I remembered this last time on this list here:

http://sourceforge.net/p/bitcoin/mailman/message/31640769/

Regards,

Tamas Blummer
Founder, CEO
Bits of Proof
http://bitsofproof.com

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 495 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140313/97375e0e/attachment.sig>

From melvincarvalho at gmail.com  Thu Mar 13 16:39:00 2014
From: melvincarvalho at gmail.com (Melvin Carvalho)
Date: Thu, 13 Mar 2014 17:39:00 +0100
Subject: [Bitcoin-development] moving the default display to mbtc
In-Reply-To: <CANEZrP1sJKGP5A82HbUU+v3oTsc5=U5Gq4Z5TrJ4=2FXLZq4yQ@mail.gmail.com>
References: <CAKaEYhK4oXH3hB7uS3=AEkA6r0VB5OYyTua+LOP18rq+rYajHg@mail.gmail.com>
	<52852C2D.9020103@gmail.com> <52853D8A.6010501@monetize.io>
	<CAJHLa0M6CkoDbD6FFixf9-mmhug7DvehSWCJ+EHWVxUDuwNiBg@mail.gmail.com>
	<EE02A310-8604-4811-B2D0-FC32C72C20F3@grabhive.com>
	<CAJHLa0OMcTCgGESi-F4jT2NA3FyCeMYbD_52j47t3keEYBfK8g@mail.gmail.com>
	<CA+s+GJBSGPBQWWYR1NYSc2E4Y1BWAn8zf7xsu4wQ1O8cA8OWbw@mail.gmail.com>
	<CAJHLa0NEEppHg_Lmi_Oxnz_gPSHZPfQpeg+-8MrvFYDmdM83-g@mail.gmail.com>
	<CANEZrP2O4hDBiCNvO1oV5X7OtnQ4xVDD=RtozQY8ESRHgXQu9w@mail.gmail.com>
	<CAJHLa0PB-V+KgEr5uCj+mceESggp8G4MmLGHHpz2UD_R_w-zfQ@mail.gmail.com>
	<CANEZrP1sJKGP5A82HbUU+v3oTsc5=U5Gq4Z5TrJ4=2FXLZq4yQ@mail.gmail.com>
Message-ID: <CAKaEYh+Z4J7_xm2+RueV9DCy+MCPmjbkmAYVUjRHEhNa4jf9QQ@mail.gmail.com>

On 13 March 2014 16:50, Mike Hearn <mike at plan99.net> wrote:

> On Thu, Mar 13, 2014 at 3:32 PM, Jeff Garzik <jgarzik at bitpay.com> wrote:
>
>> Such hand-wavy, data-free logic is precisely why community
>> coordination is preferred to random apps making random decisions in
>> this manner.
>>
>
> That ship sailed months ago. If you wanted a big push for uBTC, then would
> have been the time. Though given that it'd have made lots of normal
> balances incredibly huge, perhaps it's a good thing that didn't happen.
> Also "milli" is a unit people encounter in daily life whereas micro isn't.
> Is it milli / micro / nano or milli / nano / micro? I bet a lot of people
> would get that wrong.
>
> If you have to export to financial packages that can't handle fractional
> pennies, then by all means represent prices in whatever units you like for
> that purpose, but in software designed for ordinary people in everyday life
> mBTC is a pretty good fit.
>
> Besides, fractional pennies crop up in existing currencies too (the famous
> Verizon Math episode showed this), so if a financial package insists on
> rounding to 2dp then I guess it may sometimes do the wrong thing in some
> business cases already.
>
> Fundamentally, more than two decimal places tends to violate the
>> Principle Of Least Astonishment with many humans, and as a result,
>> popular software systems have been written with that assumption.
>
>
> Lots of people use currencies that don't have any fractional components at
> all ! So perhaps all prices should be denominated in satoshis to ensure
> that they're not surprised :)
>
> The (number) line has to be drawn somewhere. Wallets are free to suppress
> more than 2dp of precision and actually Andreas' app lets you choose your
> preferred precision. So I think in the end it won't matter a whole lot, if
> the defaults end up being wrong people can change them until wallet authors
> catch up.
>

+1 agree with Mike on everything

A couple of points:

1. bitcoinity already switched to mbtc aka millitbits (
https://en.bitcoin.it/wiki/MilliBit ) and it was positively recieved, they
got quite a few donations

2. If you watch Gavin's talk at the CFR he suggests the community comes to
a consensus through implementations rather than top down decision making
(If I understood correctly)

I think it's up to wallet maintainers whether to switch the default.



>
>
> ------------------------------------------------------------------------------
> Learn Graph Databases - Download FREE O'Reilly Book
> "Graph Databases" is the definitive new guide to graph databases and their
> applications. Written by three acclaimed leaders in the field,
> this first edition is now available. Download your free book today!
> http://p.sf.net/sfu/13534_NeoTech
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140313/8d9f087b/attachment.html>

From allen.piscitello at gmail.com  Thu Mar 13 16:55:58 2014
From: allen.piscitello at gmail.com (Allen Piscitello)
Date: Thu, 13 Mar 2014 11:55:58 -0500
Subject: [Bitcoin-development] moving the default display to mbtc
In-Reply-To: <CAKaEYh+Z4J7_xm2+RueV9DCy+MCPmjbkmAYVUjRHEhNa4jf9QQ@mail.gmail.com>
References: <CAKaEYhK4oXH3hB7uS3=AEkA6r0VB5OYyTua+LOP18rq+rYajHg@mail.gmail.com>
	<52852C2D.9020103@gmail.com> <52853D8A.6010501@monetize.io>
	<CAJHLa0M6CkoDbD6FFixf9-mmhug7DvehSWCJ+EHWVxUDuwNiBg@mail.gmail.com>
	<EE02A310-8604-4811-B2D0-FC32C72C20F3@grabhive.com>
	<CAJHLa0OMcTCgGESi-F4jT2NA3FyCeMYbD_52j47t3keEYBfK8g@mail.gmail.com>
	<CA+s+GJBSGPBQWWYR1NYSc2E4Y1BWAn8zf7xsu4wQ1O8cA8OWbw@mail.gmail.com>
	<CAJHLa0NEEppHg_Lmi_Oxnz_gPSHZPfQpeg+-8MrvFYDmdM83-g@mail.gmail.com>
	<CANEZrP2O4hDBiCNvO1oV5X7OtnQ4xVDD=RtozQY8ESRHgXQu9w@mail.gmail.com>
	<CAJHLa0PB-V+KgEr5uCj+mceESggp8G4MmLGHHpz2UD_R_w-zfQ@mail.gmail.com>
	<CANEZrP1sJKGP5A82HbUU+v3oTsc5=U5Gq4Z5TrJ4=2FXLZq4yQ@mail.gmail.com>
	<CAKaEYh+Z4J7_xm2+RueV9DCy+MCPmjbkmAYVUjRHEhNa4jf9QQ@mail.gmail.com>
Message-ID: <CAJfRnm5Q-XvPLBh1iznXZNT+b=wTkhcPoExVUgK8=oL58ahRkQ@mail.gmail.com>

Mike is making an assumption that is not necessary, which is the price of
the most commonly used unit should be between is $.50 and $1000.  The issue
to revisit or not shouldn't require $1,000,000 Bitcoin price.  Typing a ton
of decimals is incredibly annoying.  Doing the mental math in my head is
annoying.  Even if a cup of coffee costs 3.12345 mBTC, that's a lot more
annoying than 3123.45 uBTC.

The points that people liked mBTC better than BTC doesn't mean anything
when comparing uBTC to mBTC.  Many people just stopped thinking at the mBTC
level, do not understand the implications involved in switching to uBTC, or
even considered uBTC.  The idea that we can just poll what people want to
give them the ideal experience is also flawed, in that users often don't
know what they want until they have it in front of them.

There is basically no downside to uBTC, except a few places already
switched to mBTC.  For exchanges, which are dealing with decimals since
they will do BTC/USD rather than the opposite, it might make sense for them
to continue to use mBTC or BTC.  For wallets and prices for users,
especially when there are large decimals since the price is still based on
more stable currencies, then converted to Bitcoin, let's switch to what is
easiest.

I haven't seen a single good argument for keeping it in mBTC (other than
some people already did it).  On the other hand, I've seen numerous great
reasons for switching to uBTC.

My two cents.


On Thu, Mar 13, 2014 at 11:39 AM, Melvin Carvalho
<melvincarvalho at gmail.com>wrote:

>
>
>
> On 13 March 2014 16:50, Mike Hearn <mike at plan99.net> wrote:
>
>> On Thu, Mar 13, 2014 at 3:32 PM, Jeff Garzik <jgarzik at bitpay.com> wrote:
>>
>>> Such hand-wavy, data-free logic is precisely why community
>>> coordination is preferred to random apps making random decisions in
>>> this manner.
>>>
>>
>> That ship sailed months ago. If you wanted a big push for uBTC, then
>> would have been the time. Though given that it'd have made lots of normal
>> balances incredibly huge, perhaps it's a good thing that didn't happen.
>> Also "milli" is a unit people encounter in daily life whereas micro isn't.
>> Is it milli / micro / nano or milli / nano / micro? I bet a lot of people
>> would get that wrong.
>>
>> If you have to export to financial packages that can't handle fractional
>> pennies, then by all means represent prices in whatever units you like for
>> that purpose, but in software designed for ordinary people in everyday life
>> mBTC is a pretty good fit.
>>
>> Besides, fractional pennies crop up in existing currencies too (the
>> famous Verizon Math episode showed this), so if a financial package insists
>> on rounding to 2dp then I guess it may sometimes do the wrong thing in some
>> business cases already.
>>
>> Fundamentally, more than two decimal places tends to violate the
>>> Principle Of Least Astonishment with many humans, and as a result,
>>> popular software systems have been written with that assumption.
>>
>>
>> Lots of people use currencies that don't have any fractional components
>> at all ! So perhaps all prices should be denominated in satoshis to ensure
>> that they're not surprised :)
>>
>> The (number) line has to be drawn somewhere. Wallets are free to suppress
>> more than 2dp of precision and actually Andreas' app lets you choose your
>> preferred precision. So I think in the end it won't matter a whole lot, if
>> the defaults end up being wrong people can change them until wallet authors
>> catch up.
>>
>
> +1 agree with Mike on everything
>
> A couple of points:
>
> 1. bitcoinity already switched to mbtc aka millitbits (
> https://en.bitcoin.it/wiki/MilliBit ) and it was positively recieved,
> they got quite a few donations
>
> 2. If you watch Gavin's talk at the CFR he suggests the community comes to
> a consensus through implementations rather than top down decision making
> (If I understood correctly)
>
> I think it's up to wallet maintainers whether to switch the default.
>
>
>
>>
>>
>> ------------------------------------------------------------------------------
>> Learn Graph Databases - Download FREE O'Reilly Book
>> "Graph Databases" is the definitive new guide to graph databases and their
>> applications. Written by three acclaimed leaders in the field,
>> this first edition is now available. Download your free book today!
>> http://p.sf.net/sfu/13534_NeoTech
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>
>>
>
>
> ------------------------------------------------------------------------------
> Learn Graph Databases - Download FREE O'Reilly Book
> "Graph Databases" is the definitive new guide to graph databases and their
> applications. Written by three acclaimed leaders in the field,
> this first edition is now available. Download your free book today!
> http://p.sf.net/sfu/13534_NeoTech
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140313/81bbaea1/attachment.html>

From mike at plan99.net  Thu Mar 13 17:13:11 2014
From: mike at plan99.net (Mike Hearn)
Date: Thu, 13 Mar 2014 18:13:11 +0100
Subject: [Bitcoin-development] moving the default display to mbtc
In-Reply-To: <CAJfRnm5Q-XvPLBh1iznXZNT+b=wTkhcPoExVUgK8=oL58ahRkQ@mail.gmail.com>
References: <CAKaEYhK4oXH3hB7uS3=AEkA6r0VB5OYyTua+LOP18rq+rYajHg@mail.gmail.com>
	<52852C2D.9020103@gmail.com> <52853D8A.6010501@monetize.io>
	<CAJHLa0M6CkoDbD6FFixf9-mmhug7DvehSWCJ+EHWVxUDuwNiBg@mail.gmail.com>
	<EE02A310-8604-4811-B2D0-FC32C72C20F3@grabhive.com>
	<CAJHLa0OMcTCgGESi-F4jT2NA3FyCeMYbD_52j47t3keEYBfK8g@mail.gmail.com>
	<CA+s+GJBSGPBQWWYR1NYSc2E4Y1BWAn8zf7xsu4wQ1O8cA8OWbw@mail.gmail.com>
	<CAJHLa0NEEppHg_Lmi_Oxnz_gPSHZPfQpeg+-8MrvFYDmdM83-g@mail.gmail.com>
	<CANEZrP2O4hDBiCNvO1oV5X7OtnQ4xVDD=RtozQY8ESRHgXQu9w@mail.gmail.com>
	<CAJHLa0PB-V+KgEr5uCj+mceESggp8G4MmLGHHpz2UD_R_w-zfQ@mail.gmail.com>
	<CANEZrP1sJKGP5A82HbUU+v3oTsc5=U5Gq4Z5TrJ4=2FXLZq4yQ@mail.gmail.com>
	<CAKaEYh+Z4J7_xm2+RueV9DCy+MCPmjbkmAYVUjRHEhNa4jf9QQ@mail.gmail.com>
	<CAJfRnm5Q-XvPLBh1iznXZNT+b=wTkhcPoExVUgK8=oL58ahRkQ@mail.gmail.com>
Message-ID: <CANEZrP3dcWOJGyjNkvjPXAPM16NvG8v80JLUa9N5eTWjSbhkFQ@mail.gmail.com>

>
> Even if a cup of coffee costs 3.12345 mBTC, that's a lot more annoying
> than 3123.45 uBTC.
>

This is subjective though. To me the first price looks like the price of a
cup of coffee (or I just mentally double it). The second looks like the
price of an expensive holiday.

If users really find this so terrible, merchants have a simple solution: do
the rounding before presenting the price. Then the price looks like "3.12
mBTC" which is sort of what I'd expect it to look like. But some wallets
already make digits >2dp smaller so visually you can get precision whilst
still looking similar to what you might expect (this is what Bitcoin Wallet
does).


> I haven't seen a single good argument for keeping it in mBTC (other than
> some people already did it).
>

That's the good argument!
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140313/33379c7b/attachment.html>

From mark at monetize.io  Thu Mar 13 17:18:51 2014
From: mark at monetize.io (Mark Friedenbach)
Date: Thu, 13 Mar 2014 10:18:51 -0700
Subject: [Bitcoin-development] moving the default display to mbtc
In-Reply-To: <CAJHLa0MrLGDVO7LFpUSb+LCxNjKebQQ7UHSwyWPYwzWw5WcbAw@mail.gmail.com>
References: <CAKaEYhK4oXH3hB7uS3=AEkA6r0VB5OYyTua+LOP18rq+rYajHg@mail.gmail.com>	<52852C2D.9020103@gmail.com>
	<52853D8A.6010501@monetize.io>	<CAJHLa0M6CkoDbD6FFixf9-mmhug7DvehSWCJ+EHWVxUDuwNiBg@mail.gmail.com>	<EE02A310-8604-4811-B2D0-FC32C72C20F3@grabhive.com>	<CAJHLa0OMcTCgGESi-F4jT2NA3FyCeMYbD_52j47t3keEYBfK8g@mail.gmail.com>	<CA+s+GJBSGPBQWWYR1NYSc2E4Y1BWAn8zf7xsu4wQ1O8cA8OWbw@mail.gmail.com>	<CAJHLa0NEEppHg_Lmi_Oxnz_gPSHZPfQpeg+-8MrvFYDmdM83-g@mail.gmail.com>	<CANEZrP2O4hDBiCNvO1oV5X7OtnQ4xVDD=RtozQY8ESRHgXQu9w@mail.gmail.com>	<CAJHLa0PB-V+KgEr5uCj+mceESggp8G4MmLGHHpz2UD_R_w-zfQ@mail.gmail.com>	<5321D95C.2070402@gmail.com>
	<CAJHLa0MrLGDVO7LFpUSb+LCxNjKebQQ7UHSwyWPYwzWw5WcbAw@mail.gmail.com>
Message-ID: <5321E87B.8050908@monetize.io>

This ship may have already sailed, but...

Using milli- and micro- notation for currency units is also not very
well supported. Last time this thread was active, I believe there was a
suggestion to use 1 XBT == 1 uBTC. This would bring us completely within
the realm of supported behavior in accounting applications.

On 03/13/2014 09:29 AM, Jeff Garzik wrote:
> On Thu, Mar 13, 2014 at 12:14 PM, Alan Reiner <etotheipi at gmail.com> wrote:
>> Of course, as Mike said, this ship may have already sailed, but if
>> there's any way to revisit this, I'm there.  We're just about to do
>> another Armory release and could support this very easily.
> 
> mBTC now just means the issue -will- be revisited in the future.  Just
> a question of when, not if.
> 
> People and software in various nations handle big numbers for small
> values (e.g. Yen) just fine.
> People and software do -not- handle extra decimal places well, field
> experience shows.
> 
> <vendor hat: on>  To roll out QuickBooks support --without converting
> any numbers, a key financial attribute-- mBTC is simply insufficient
> today, not in the future.
> 
> I also argue that it is a security risk, as follows:  To support
> accounting packages limited to 2 decimal places, decimal point
> conversion must be performed.  This produces a situation where your
> accounting system shows numbers that do not visually match the numbers
> in the bitcoin software.  That, in turn, making auditing more
> difficult, particularly for outsiders.
> 
> Shipping with mBTC defaults was decidedly unwise, considering that --
> like BTC -- it fails to solve existing, known problems that uBTC can
> solve, and considering the inevitable mBTC->uBTC switch.
> 



From jgarzik at bitpay.com  Thu Mar 13 17:21:52 2014
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Thu, 13 Mar 2014 13:21:52 -0400
Subject: [Bitcoin-development] moving the default display to mbtc
In-Reply-To: <5321E87B.8050908@monetize.io>
References: <CAKaEYhK4oXH3hB7uS3=AEkA6r0VB5OYyTua+LOP18rq+rYajHg@mail.gmail.com>
	<52852C2D.9020103@gmail.com> <52853D8A.6010501@monetize.io>
	<CAJHLa0M6CkoDbD6FFixf9-mmhug7DvehSWCJ+EHWVxUDuwNiBg@mail.gmail.com>
	<EE02A310-8604-4811-B2D0-FC32C72C20F3@grabhive.com>
	<CAJHLa0OMcTCgGESi-F4jT2NA3FyCeMYbD_52j47t3keEYBfK8g@mail.gmail.com>
	<CA+s+GJBSGPBQWWYR1NYSc2E4Y1BWAn8zf7xsu4wQ1O8cA8OWbw@mail.gmail.com>
	<CAJHLa0NEEppHg_Lmi_Oxnz_gPSHZPfQpeg+-8MrvFYDmdM83-g@mail.gmail.com>
	<CANEZrP2O4hDBiCNvO1oV5X7OtnQ4xVDD=RtozQY8ESRHgXQu9w@mail.gmail.com>
	<CAJHLa0PB-V+KgEr5uCj+mceESggp8G4MmLGHHpz2UD_R_w-zfQ@mail.gmail.com>
	<5321D95C.2070402@gmail.com>
	<CAJHLa0MrLGDVO7LFpUSb+LCxNjKebQQ7UHSwyWPYwzWw5WcbAw@mail.gmail.com>
	<5321E87B.8050908@monetize.io>
Message-ID: <CAJHLa0NHTR3ZmTxQFeORZ_EqHcxfK+eBVsRf_A-tKA+PsjXJjw@mail.gmail.com>

On Thu, Mar 13, 2014 at 1:18 PM, Mark Friedenbach <mark at monetize.io> wrote:
> Using milli- and micro- notation for currency units is also not very
> well supported. Last time this thread was active, I believe there was a
> suggestion to use 1 XBT == 1 uBTC. This would bring us completely within
> the realm of supported behavior in accounting applications.

Yes.  That was in Tamas's recursive link, and also brought up on
github by jcorgan.  +1

-- 
Jeff Garzik
Bitcoin core developer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From allen.piscitello at gmail.com  Thu Mar 13 17:23:44 2014
From: allen.piscitello at gmail.com (Allen Piscitello)
Date: Thu, 13 Mar 2014 12:23:44 -0500
Subject: [Bitcoin-development] moving the default display to mbtc
In-Reply-To: <CANEZrP3dcWOJGyjNkvjPXAPM16NvG8v80JLUa9N5eTWjSbhkFQ@mail.gmail.com>
References: <CAKaEYhK4oXH3hB7uS3=AEkA6r0VB5OYyTua+LOP18rq+rYajHg@mail.gmail.com>
	<52852C2D.9020103@gmail.com> <52853D8A.6010501@monetize.io>
	<CAJHLa0M6CkoDbD6FFixf9-mmhug7DvehSWCJ+EHWVxUDuwNiBg@mail.gmail.com>
	<EE02A310-8604-4811-B2D0-FC32C72C20F3@grabhive.com>
	<CAJHLa0OMcTCgGESi-F4jT2NA3FyCeMYbD_52j47t3keEYBfK8g@mail.gmail.com>
	<CA+s+GJBSGPBQWWYR1NYSc2E4Y1BWAn8zf7xsu4wQ1O8cA8OWbw@mail.gmail.com>
	<CAJHLa0NEEppHg_Lmi_Oxnz_gPSHZPfQpeg+-8MrvFYDmdM83-g@mail.gmail.com>
	<CANEZrP2O4hDBiCNvO1oV5X7OtnQ4xVDD=RtozQY8ESRHgXQu9w@mail.gmail.com>
	<CAJHLa0PB-V+KgEr5uCj+mceESggp8G4MmLGHHpz2UD_R_w-zfQ@mail.gmail.com>
	<CANEZrP1sJKGP5A82HbUU+v3oTsc5=U5Gq4Z5TrJ4=2FXLZq4yQ@mail.gmail.com>
	<CAKaEYh+Z4J7_xm2+RueV9DCy+MCPmjbkmAYVUjRHEhNa4jf9QQ@mail.gmail.com>
	<CAJfRnm5Q-XvPLBh1iznXZNT+b=wTkhcPoExVUgK8=oL58ahRkQ@mail.gmail.com>
	<CANEZrP3dcWOJGyjNkvjPXAPM16NvG8v80JLUa9N5eTWjSbhkFQ@mail.gmail.com>
Message-ID: <CAJfRnm61i=Ob31V0Bd8LC7xg_j_wyedVMENJZKhpVqykLACMMQ@mail.gmail.com>

It certainly is not subjective, in that people are far more used to dealing
with whole numbers than decimals.  Try reading the first one, then reading
the second one.  Tell those numbers to someone else, have them write it
down, and see how many people screw up the first vs. the second.  This has
nothing to do with whether it "looks expensive".  There are reasons for
wanting the numbers to be higher as well, as evidenced by the number of
Dogecoin enthusiasts who like "having more", even if it doesn't matter.
 That part gets more subjective, but still favors micros in most cases.
 Sure, 3000 may sound like a lot, but if you have a lot more, it's all a
different scale.

If the argument is for keeping things based on what is already done, why
even switch to millis?  After all, everyone is used to full Bitcoins, why
even change to millis?  Whatever your arguments are there, for switching
base bitcoins to millis, try to see why they fail at micros (other than the
subjective argument that I'm used to decimal units of currency being worth
a cup of coffee, even though numerous people all over the world don't have
that conditioning).


On Thu, Mar 13, 2014 at 12:13 PM, Mike Hearn <mike at plan99.net> wrote:

> Even if a cup of coffee costs 3.12345 mBTC, that's a lot more annoying
>> than 3123.45 uBTC.
>>
>
> This is subjective though. To me the first price looks like the price of a
> cup of coffee (or I just mentally double it). The second looks like the
> price of an expensive holiday.
>
> If users really find this so terrible, merchants have a simple solution:
> do the rounding before presenting the price. Then the price looks like
> "3.12 mBTC" which is sort of what I'd expect it to look like. But some
> wallets already make digits >2dp smaller so visually you can get precision
> whilst still looking similar to what you might expect (this is what Bitcoin
> Wallet does).
>
>
>> I haven't seen a single good argument for keeping it in mBTC (other than
>> some people already did it).
>>
>
> That's the good argument!
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140313/447f16cf/attachment.html>

From mike at plan99.net  Thu Mar 13 17:24:25 2014
From: mike at plan99.net (Mike Hearn)
Date: Thu, 13 Mar 2014 18:24:25 +0100
Subject: [Bitcoin-development] moving the default display to mbtc
In-Reply-To: <5321E87B.8050908@monetize.io>
References: <CAKaEYhK4oXH3hB7uS3=AEkA6r0VB5OYyTua+LOP18rq+rYajHg@mail.gmail.com>
	<52852C2D.9020103@gmail.com> <52853D8A.6010501@monetize.io>
	<CAJHLa0M6CkoDbD6FFixf9-mmhug7DvehSWCJ+EHWVxUDuwNiBg@mail.gmail.com>
	<EE02A310-8604-4811-B2D0-FC32C72C20F3@grabhive.com>
	<CAJHLa0OMcTCgGESi-F4jT2NA3FyCeMYbD_52j47t3keEYBfK8g@mail.gmail.com>
	<CA+s+GJBSGPBQWWYR1NYSc2E4Y1BWAn8zf7xsu4wQ1O8cA8OWbw@mail.gmail.com>
	<CAJHLa0NEEppHg_Lmi_Oxnz_gPSHZPfQpeg+-8MrvFYDmdM83-g@mail.gmail.com>
	<CANEZrP2O4hDBiCNvO1oV5X7OtnQ4xVDD=RtozQY8ESRHgXQu9w@mail.gmail.com>
	<CAJHLa0PB-V+KgEr5uCj+mceESggp8G4MmLGHHpz2UD_R_w-zfQ@mail.gmail.com>
	<5321D95C.2070402@gmail.com>
	<CAJHLa0MrLGDVO7LFpUSb+LCxNjKebQQ7UHSwyWPYwzWw5WcbAw@mail.gmail.com>
	<5321E87B.8050908@monetize.io>
Message-ID: <CANEZrP1v01LtSLF5FGEGprT2XZhryzC8QkvDrbFUv1Px1VgHoQ@mail.gmail.com>

>
> Using milli- and micro- notation for currency units is also not very
> well supported. Last time this thread was active, I believe there was a
> suggestion to use 1 XBT == 1 uBTC.


Unfortunately I think some people already started using XBT to mean the
same as BTC (another ship that sailed: somehow Bhutan will have to live
with it). So if some software started to redefine it to mean something
else, that seems like a recipe for accidentally sending far too much or too
little money by mistake.

The whole area of symbols, denominations etc is a confusing mess right now,
it opens up the potential for mistakes and makes Bitcoin look
unprofessional. Part of the reason I don't want us to revisit this at the
moment is we need to grab onto any consistency we can get. People want to
think in terms of a single unit. BTC vs mBTC is already bad enough, it'd be
easy to miss the denomination and do some sums wrong. Introducing a third
unit, especially one that skips the intervening nanoBTC, seems like a way
to make mistakes even more common!
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140313/1238dc0f/attachment.html>

From etotheipi at gmail.com  Thu Mar 13 17:36:09 2014
From: etotheipi at gmail.com (Alan Reiner)
Date: Thu, 13 Mar 2014 13:36:09 -0400
Subject: [Bitcoin-development] moving the default display to mbtc
In-Reply-To: <CANEZrP1v01LtSLF5FGEGprT2XZhryzC8QkvDrbFUv1Px1VgHoQ@mail.gmail.com>
References: <CAKaEYhK4oXH3hB7uS3=AEkA6r0VB5OYyTua+LOP18rq+rYajHg@mail.gmail.com>	<52852C2D.9020103@gmail.com>
	<52853D8A.6010501@monetize.io>	<CAJHLa0M6CkoDbD6FFixf9-mmhug7DvehSWCJ+EHWVxUDuwNiBg@mail.gmail.com>	<EE02A310-8604-4811-B2D0-FC32C72C20F3@grabhive.com>	<CAJHLa0OMcTCgGESi-F4jT2NA3FyCeMYbD_52j47t3keEYBfK8g@mail.gmail.com>	<CA+s+GJBSGPBQWWYR1NYSc2E4Y1BWAn8zf7xsu4wQ1O8cA8OWbw@mail.gmail.com>	<CAJHLa0NEEppHg_Lmi_Oxnz_gPSHZPfQpeg+-8MrvFYDmdM83-g@mail.gmail.com>	<CANEZrP2O4hDBiCNvO1oV5X7OtnQ4xVDD=RtozQY8ESRHgXQu9w@mail.gmail.com>	<CAJHLa0PB-V+KgEr5uCj+mceESggp8G4MmLGHHpz2UD_R_w-zfQ@mail.gmail.com>	<5321D95C.2070402@gmail.com>	<CAJHLa0MrLGDVO7LFpUSb+LCxNjKebQQ7UHSwyWPYwzWw5WcbAw@mail.gmail.com>	<5321E87B.8050908@monetize.io>
	<CANEZrP1v01LtSLF5FGEGprT2XZhryzC8QkvDrbFUv1Px1VgHoQ@mail.gmail.com>
Message-ID: <5321EC89.6020300@gmail.com>


On 03/13/2014 01:24 PM, Mike Hearn wrote:
>
>     Using milli- and micro- notation for currency units is also not very
>     well supported. Last time this thread was active, I believe there
>     was a
>     suggestion to use 1 XBT == 1 uBTC.
>
>
> Unfortunately I think some people already started using XBT to mean
> the same as BTC (another ship that sailed: somehow Bhutan will have to
> live with it). So if some software started to redefine it to mean
> something else, that seems like a recipe for accidentally sending far
> too much or too little money by mistake.
>

There is also the benefit that if someone screws up BTC and uBTC, it's
likely to fail.  Most people don't have 1e6 times as much money in their
wallet as they attempted to send in a single transaction.  Similarly,
sending one-millionth of what you meant to is likely invalid or below
the dust limit. 

Well it looks like the consensus is to do it, instead of talking about
it.  I'm going to make sure we get uBTC into the next Armory release. 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140313/be24b2d1/attachment.html>

From laanwj at gmail.com  Thu Mar 13 17:43:26 2014
From: laanwj at gmail.com (Wladimir)
Date: Thu, 13 Mar 2014 18:43:26 +0100
Subject: [Bitcoin-development] moving the default display to mbtc
In-Reply-To: <5321EC89.6020300@gmail.com>
References: <CAKaEYhK4oXH3hB7uS3=AEkA6r0VB5OYyTua+LOP18rq+rYajHg@mail.gmail.com>
	<52852C2D.9020103@gmail.com> <52853D8A.6010501@monetize.io>
	<CAJHLa0M6CkoDbD6FFixf9-mmhug7DvehSWCJ+EHWVxUDuwNiBg@mail.gmail.com>
	<EE02A310-8604-4811-B2D0-FC32C72C20F3@grabhive.com>
	<CAJHLa0OMcTCgGESi-F4jT2NA3FyCeMYbD_52j47t3keEYBfK8g@mail.gmail.com>
	<CA+s+GJBSGPBQWWYR1NYSc2E4Y1BWAn8zf7xsu4wQ1O8cA8OWbw@mail.gmail.com>
	<CAJHLa0NEEppHg_Lmi_Oxnz_gPSHZPfQpeg+-8MrvFYDmdM83-g@mail.gmail.com>
	<CANEZrP2O4hDBiCNvO1oV5X7OtnQ4xVDD=RtozQY8ESRHgXQu9w@mail.gmail.com>
	<CAJHLa0PB-V+KgEr5uCj+mceESggp8G4MmLGHHpz2UD_R_w-zfQ@mail.gmail.com>
	<5321D95C.2070402@gmail.com>
	<CAJHLa0MrLGDVO7LFpUSb+LCxNjKebQQ7UHSwyWPYwzWw5WcbAw@mail.gmail.com>
	<5321E87B.8050908@monetize.io>
	<CANEZrP1v01LtSLF5FGEGprT2XZhryzC8QkvDrbFUv1Px1VgHoQ@mail.gmail.com>
	<5321EC89.6020300@gmail.com>
Message-ID: <CA+s+GJAJLJfTymA45QpGNpoJJAf-UF8LugRhfWUTZXD=v=Xyrw@mail.gmail.com>

On Thu, Mar 13, 2014 at 6:36 PM, Alan Reiner <etotheipi at gmail.com> wrote:

>
> On 03/13/2014 01:24 PM, Mike Hearn wrote:
> Well it looks like the consensus is to do it, instead of talking about
> it.  I'm going to make sure we get uBTC into the next Armory release.
>

As default?

If so, only for new installs? Or will all current users automatically be
switched over?

Wladimir
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140313/80e3f13d/attachment.html>

From slush at centrum.cz  Thu Mar 13 16:37:02 2014
From: slush at centrum.cz (slush)
Date: Thu, 13 Mar 2014 17:37:02 +0100
Subject: [Bitcoin-development] moving the default display to mbtc
In-Reply-To: <8931534D-CED6-406C-AA68-20A681723283@bitsofproof.com>
References: <CAKaEYhK4oXH3hB7uS3=AEkA6r0VB5OYyTua+LOP18rq+rYajHg@mail.gmail.com>
	<52852C2D.9020103@gmail.com> <52853D8A.6010501@monetize.io>
	<CAJHLa0M6CkoDbD6FFixf9-mmhug7DvehSWCJ+EHWVxUDuwNiBg@mail.gmail.com>
	<EE02A310-8604-4811-B2D0-FC32C72C20F3@grabhive.com>
	<CAJHLa0OMcTCgGESi-F4jT2NA3FyCeMYbD_52j47t3keEYBfK8g@mail.gmail.com>
	<CA+s+GJBSGPBQWWYR1NYSc2E4Y1BWAn8zf7xsu4wQ1O8cA8OWbw@mail.gmail.com>
	<CAJHLa0NEEppHg_Lmi_Oxnz_gPSHZPfQpeg+-8MrvFYDmdM83-g@mail.gmail.com>
	<20140313160850.GW3180@nl.grid.coop>
	<8931534D-CED6-406C-AA68-20A681723283@bitsofproof.com>
Message-ID: <CAJna-HhvgM9JmxF+G+FhZYT663DhkNxgdaQuGh-KPCExOoTLbA@mail.gmail.com>

Internal accounting in satoshis.
Display based on locale.

Problem solved.


On Thu, Mar 13, 2014 at 5:30 PM, Tamas Blummer <tamas at bitsofproof.com>wrote:

> BTW, its not like this would be the first time this was raised, instead
> the "ship left" while ignoring arguments.
>
> The idea of is up there for votes since March 2013
> https://bitcointalk.org/index.php?topic=149150.0
> and received the most votes.
>
> I remembered this last time on this list here:
>
> http://sourceforge.net/p/bitcoin/mailman/message/31640769/
>
> Regards,
>
> Tamas Blummer
> Founder, CEO
> Bits of Proof
> http://bitsofproof.com
>
>
>
> ------------------------------------------------------------------------------
> Learn Graph Databases - Download FREE O'Reilly Book
> "Graph Databases" is the definitive new guide to graph databases and their
> applications. Written by three acclaimed leaders in the field,
> this first edition is now available. Download your free book today!
> http://p.sf.net/sfu/13534_NeoTech
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140313/bdd70ddb/attachment.html>

From luke at dashjr.org  Thu Mar 13 17:48:17 2014
From: luke at dashjr.org (Luke-Jr)
Date: Thu, 13 Mar 2014 17:48:17 +0000
Subject: [Bitcoin-development] moving the default display to mbtc
In-Reply-To: <CAJna-HhvgM9JmxF+G+FhZYT663DhkNxgdaQuGh-KPCExOoTLbA@mail.gmail.com>
References: <CAKaEYhK4oXH3hB7uS3=AEkA6r0VB5OYyTua+LOP18rq+rYajHg@mail.gmail.com>
	<8931534D-CED6-406C-AA68-20A681723283@bitsofproof.com>
	<CAJna-HhvgM9JmxF+G+FhZYT663DhkNxgdaQuGh-KPCExOoTLbA@mail.gmail.com>
Message-ID: <201403131748.18738.luke@dashjr.org>

On Thursday, March 13, 2014 4:37:02 PM slush wrote:
> Display based on locale.

Please don't bring locale into this. Bitcoin has always been intentionally 
locale-independent (hence BTC using xxx,xxx,xxx.xx format even in locales 
which swap the commas and periods). Localising display makes different locales 
more or less incompatible at a human level, even if they use the same 
blockchain.

Luke



From mike at plan99.net  Thu Mar 13 17:51:12 2014
From: mike at plan99.net (Mike Hearn)
Date: Thu, 13 Mar 2014 18:51:12 +0100
Subject: [Bitcoin-development] moving the default display to mbtc
In-Reply-To: <5321EC89.6020300@gmail.com>
References: <CAKaEYhK4oXH3hB7uS3=AEkA6r0VB5OYyTua+LOP18rq+rYajHg@mail.gmail.com>
	<52852C2D.9020103@gmail.com> <52853D8A.6010501@monetize.io>
	<CAJHLa0M6CkoDbD6FFixf9-mmhug7DvehSWCJ+EHWVxUDuwNiBg@mail.gmail.com>
	<EE02A310-8604-4811-B2D0-FC32C72C20F3@grabhive.com>
	<CAJHLa0OMcTCgGESi-F4jT2NA3FyCeMYbD_52j47t3keEYBfK8g@mail.gmail.com>
	<CA+s+GJBSGPBQWWYR1NYSc2E4Y1BWAn8zf7xsu4wQ1O8cA8OWbw@mail.gmail.com>
	<CAJHLa0NEEppHg_Lmi_Oxnz_gPSHZPfQpeg+-8MrvFYDmdM83-g@mail.gmail.com>
	<CANEZrP2O4hDBiCNvO1oV5X7OtnQ4xVDD=RtozQY8ESRHgXQu9w@mail.gmail.com>
	<CAJHLa0PB-V+KgEr5uCj+mceESggp8G4MmLGHHpz2UD_R_w-zfQ@mail.gmail.com>
	<5321D95C.2070402@gmail.com>
	<CAJHLa0MrLGDVO7LFpUSb+LCxNjKebQQ7UHSwyWPYwzWw5WcbAw@mail.gmail.com>
	<5321E87B.8050908@monetize.io>
	<CANEZrP1v01LtSLF5FGEGprT2XZhryzC8QkvDrbFUv1Px1VgHoQ@mail.gmail.com>
	<5321EC89.6020300@gmail.com>
Message-ID: <CANEZrP3cw6VV7YMsr1+TvKEws_rHRyS=DMxZiMcaHKBb_QZxmg@mail.gmail.com>

>
> Well it looks like the consensus is to do it, instead of talking about
> it.  I'm going to make sure we get uBTC into the next Armory release.
>

Hmm - be careful with the word "consensus" here. A bunch of people on a
mailing list does not make consensus ;)

If you survey other wallets, you'll find most already switched to mBTC,
that it took some effort to do so (look at the size of the patches for
instance) and that probably, nobody is super-keen to change again so soon.
So uBTC would make you different to most of the other wallets and services
in wide usage.

If Armory wants to do that, that's no problem, maybe it will be a
competitive advantage - just saying, don't quote this thread as indicating
some kind of community consensus.

Wallets and services that are using mBTC (that I know of)

blockchain.info
MultiBit
Bitcoin Wallet (Android)
Hive
Bitcoinity
KnC Wallet (defaults to BTC but can be switched to mBTC in settings, uBTC
not an option)
Mullvad
btcstore.eu

Doing a google search for [bitcoin "mBTC"] and [bitcoin "uBTC"], the former
has a bunch of sites and services with prices in mBTC. The latter only has
faucets, as far as I can tell, which sort of makes sense.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140313/17fbe703/attachment.html>

From etotheipi at gmail.com  Thu Mar 13 17:58:05 2014
From: etotheipi at gmail.com (Alan Reiner)
Date: Thu, 13 Mar 2014 13:58:05 -0400
Subject: [Bitcoin-development] moving the default display to mbtc
In-Reply-To: <CANEZrP3cw6VV7YMsr1+TvKEws_rHRyS=DMxZiMcaHKBb_QZxmg@mail.gmail.com>
References: <CAKaEYhK4oXH3hB7uS3=AEkA6r0VB5OYyTua+LOP18rq+rYajHg@mail.gmail.com>	<52852C2D.9020103@gmail.com>	<52853D8A.6010501@monetize.io>	<CAJHLa0M6CkoDbD6FFixf9-mmhug7DvehSWCJ+EHWVxUDuwNiBg@mail.gmail.com>	<EE02A310-8604-4811-B2D0-FC32C72C20F3@grabhive.com>	<CAJHLa0OMcTCgGESi-F4jT2NA3FyCeMYbD_52j47t3keEYBfK8g@mail.gmail.com>	<CA+s+GJBSGPBQWWYR1NYSc2E4Y1BWAn8zf7xsu4wQ1O8cA8OWbw@mail.gmail.com>	<CAJHLa0NEEppHg_Lmi_Oxnz_gPSHZPfQpeg+-8MrvFYDmdM83-g@mail.gmail.com>	<CANEZrP2O4hDBiCNvO1oV5X7OtnQ4xVDD=RtozQY8ESRHgXQu9w@mail.gmail.com>	<CAJHLa0PB-V+KgEr5uCj+mceESggp8G4MmLGHHpz2UD_R_w-zfQ@mail.gmail.com>	<5321D95C.2070402@gmail.com>	<CAJHLa0MrLGDVO7LFpUSb+LCxNjKebQQ7UHSwyWPYwzWw5WcbAw@mail.gmail.com>	<5321E87B.8050908@monetize.io>	<CANEZrP1v01LtSLF5FGEGprT2XZhryzC8QkvDrbFUv1Px1VgHoQ@mail.gmail.com>	<5321EC89.6020300@gmail.com>
	<CANEZrP3cw6VV7YMsr1+TvKEws_rHRyS=DMxZiMcaHKBb_QZxmg@mail.gmail.com>
Message-ID: <5321F1AD.9020609@gmail.com>



On 03/13/2014 01:51 PM, Mike Hearn wrote:
>
>     Well it looks like the consensus is to do it, instead of talking
>     about it.  I'm going to make sure we get uBTC into the next Armory
>     release.
>
>
> Hmm - be careful with the word "consensus" here. A bunch of people on
> a mailing list does not make consensus ;)
>
> If you survey other wallets, you'll find most already switched to
> mBTC, that it took some effort to do so (look at the size of the
> patches for instance) and that probably, nobody is super-keen to
> change again so soon. So uBTC would make you different to most of the
> other wallets and services in wide usage. 
>
> If Armory wants to do that, that's no problem, maybe it will be a
> competitive advantage - just saying, don't quote this thread as
> indicating some kind of community consensus.
>
> Wallets and services that are using mBTC (that I know of)
>
> blockchain.info <http://blockchain.info>
> MultiBit
> Bitcoin Wallet (Android)
> Hive
> Bitcoinity
> KnC Wallet (defaults to BTC but can be switched to mBTC in settings,
> uBTC not an option)
> Mullvad
> btcstore.eu <http://btcstore.eu>
>
> Doing a google search for [bitcoin "mBTC"] and [bitcoin "uBTC"], the
> former has a bunch of sites and services with prices in mBTC. The
> latter only has faucets, as far as I can tell, which sort of makes sense.

I actually was not aware that so many had already switched to mBTC.   I
guess it shows how much I use other wallets. 

You misunderstood my "consensus" comment.   I was simply stating the
"consensus" of debating on the mailing list endlessly is not as
effective as doing it.  Thus I was just going to do it and see who
follows.  But that also assumed there was not a critical mass who'd
already switched -- I must admit I'm not so confident anymore...

I am/so strongly opposed //to mBTC /compared to uBTC, I was ready to
take a small leap of faith (with associated risks), to help push the
"consensus".  Of course it would still remain configurable, but the
default will make a big difference.

-Alan
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140313/d0586965/attachment.html>

From jtimon at monetize.io  Thu Mar 13 18:23:04 2014
From: jtimon at monetize.io (=?ISO-8859-1?Q?Jorge_Tim=F3n?=)
Date: Thu, 13 Mar 2014 11:23:04 -0700
Subject: [Bitcoin-development] moving the default display to mbtc
In-Reply-To: <20140313160850.GW3180@nl.grid.coop>
References: <CAKaEYhK4oXH3hB7uS3=AEkA6r0VB5OYyTua+LOP18rq+rYajHg@mail.gmail.com>
	<52852C2D.9020103@gmail.com> <52853D8A.6010501@monetize.io>
	<CAJHLa0M6CkoDbD6FFixf9-mmhug7DvehSWCJ+EHWVxUDuwNiBg@mail.gmail.com>
	<EE02A310-8604-4811-B2D0-FC32C72C20F3@grabhive.com>
	<CAJHLa0OMcTCgGESi-F4jT2NA3FyCeMYbD_52j47t3keEYBfK8g@mail.gmail.com>
	<CA+s+GJBSGPBQWWYR1NYSc2E4Y1BWAn8zf7xsu4wQ1O8cA8OWbw@mail.gmail.com>
	<CAJHLa0NEEppHg_Lmi_Oxnz_gPSHZPfQpeg+-8MrvFYDmdM83-g@mail.gmail.com>
	<20140313160850.GW3180@nl.grid.coop>
Message-ID: <CAC1+kJOQfhFaMs34STGOeqbmHdv6bVis7o57BcF3=XYudNw_Lg@mail.gmail.com>

On 3/13/14, Troy Benjegerdes <hozer at hozed.org> wrote:
> <cynic hat: on>
>
> Every volatility bump messes up expectations of what a bitcoin is worth,
> so why are we bikeshedding uBTC vs mBTC? Just be done with it and do mBTC
> now, and plan uBTC for just after the next price spike to $10KUSD or
> whatever,
> and then plan on rolling back to mBTC when the price crashes from altcoin
> money supply inflation competition.

No, even if bitcoin crashes to 1 usd you don't need to change back to
BTC, you can keep the existing-accounting-tools friendly micro. That's
the whole point, having "one true only unit change". You would only
need to change it if there was a sub-satoshi hardfork, which doesn't
seem necessary anytime soon.

On 3/13/14, Mike Hearn <mike at plan99.net> wrote:
> I think it is highly optimistic to assume we'll need another 1000x shift
> any time soon. By now Bitcoin isn't obscure anymore. Lots of people have
> heard about it. Getting from $1 to $1000 was amazing, but it was possible
> through huge media coverage. Getting from $1000 to $1,000,000 would take
> massive adoption of the kind Bitcoin isn't ready for yet.

We shouldn't make any assumptions about the future price of bitcoin to
make the decision.

On 3/13/14, Mike Hearn <mike at plan99.net> wrote:
>>
>> Even if a cup of coffee costs 3.12345 mBTC, that's a lot more annoying
>> than 3123.45 uBTC.
>>
>
> This is subjective though. To me the first price looks like the price of a
> cup of coffee (or I just mentally double it). The second looks like the
> price of an expensive holiday.

This sounds very US-centric to me. Aren't you thinking in usd?

It won't look like an expensive holiday to, say, someone used to Viet
Nam Dong (VND), Uzbekistani Som (UZS) or Mongolian Tugrik (MNT).

http://coinmill.com/BTC_calculator.html#BTC= 0.00312345


"People seem to like mBTC" is just an ad populum fallacy: millions of
flies can actually be wrong. Also you haven't showed them micros,
maybe they like it too.

So the only valid argument I've heard in favor of mBTC so far is "some
wallets/services are doing it wrong already".



From mike at plan99.net  Thu Mar 13 18:29:40 2014
From: mike at plan99.net (Mike Hearn)
Date: Thu, 13 Mar 2014 19:29:40 +0100
Subject: [Bitcoin-development] moving the default display to mbtc
In-Reply-To: <CAC1+kJOQfhFaMs34STGOeqbmHdv6bVis7o57BcF3=XYudNw_Lg@mail.gmail.com>
References: <CAKaEYhK4oXH3hB7uS3=AEkA6r0VB5OYyTua+LOP18rq+rYajHg@mail.gmail.com>
	<52852C2D.9020103@gmail.com> <52853D8A.6010501@monetize.io>
	<CAJHLa0M6CkoDbD6FFixf9-mmhug7DvehSWCJ+EHWVxUDuwNiBg@mail.gmail.com>
	<EE02A310-8604-4811-B2D0-FC32C72C20F3@grabhive.com>
	<CAJHLa0OMcTCgGESi-F4jT2NA3FyCeMYbD_52j47t3keEYBfK8g@mail.gmail.com>
	<CA+s+GJBSGPBQWWYR1NYSc2E4Y1BWAn8zf7xsu4wQ1O8cA8OWbw@mail.gmail.com>
	<CAJHLa0NEEppHg_Lmi_Oxnz_gPSHZPfQpeg+-8MrvFYDmdM83-g@mail.gmail.com>
	<20140313160850.GW3180@nl.grid.coop>
	<CAC1+kJOQfhFaMs34STGOeqbmHdv6bVis7o57BcF3=XYudNw_Lg@mail.gmail.com>
Message-ID: <CANEZrP1CtsXV7m=qpJ1px1cQw9C7AkDYXe7Op8gQqg2+VK3mYA@mail.gmail.com>

>
> You would only need to change it if there was a sub-satoshi hardfork,
> which doesn't seem necessary anytime soon.
>

+

We shouldn't make any assumptions about the future price of bitcoin to make
> the decision.
>

Hmmm ;) Didn't you just make an assumption about the future price?


> This sounds very US-centric to me. Aren't you thinking in usd?
>

The currencies I'm familiar with are CHF, USD, EUR and GBP, which all have
roughly similar values. I guess such currencies make up the bulk of the
Bitcoin userbase at the moment.


> "People seem to like mBTC" is just an ad populum fallacy: millions of
> flies can actually be wrong. Also you haven't showed them micros,
> maybe they like it too.


Saying "it's already popular and would take work to change" is not really a
fallacy now, is it?

But anyway, this is getting silly. You don't have to convince me. Go visit
all the services I listed above, plus all the ones I didn't find in my five
minutes of searching, and convince them they're wrong like the flies and
switching is the best use of their time :o
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140313/b9f41466/attachment.html>

From bendavenport at gmail.com  Thu Mar 13 18:51:14 2014
From: bendavenport at gmail.com (Ben Davenport)
Date: Thu, 13 Mar 2014 11:51:14 -0700
Subject: [Bitcoin-development] moving the default display to mbtc
In-Reply-To: <CANEZrP1CtsXV7m=qpJ1px1cQw9C7AkDYXe7Op8gQqg2+VK3mYA@mail.gmail.com>
References: <CAKaEYhK4oXH3hB7uS3=AEkA6r0VB5OYyTua+LOP18rq+rYajHg@mail.gmail.com>
	<52852C2D.9020103@gmail.com> <52853D8A.6010501@monetize.io>
	<CAJHLa0M6CkoDbD6FFixf9-mmhug7DvehSWCJ+EHWVxUDuwNiBg@mail.gmail.com>
	<EE02A310-8604-4811-B2D0-FC32C72C20F3@grabhive.com>
	<CAJHLa0OMcTCgGESi-F4jT2NA3FyCeMYbD_52j47t3keEYBfK8g@mail.gmail.com>
	<CA+s+GJBSGPBQWWYR1NYSc2E4Y1BWAn8zf7xsu4wQ1O8cA8OWbw@mail.gmail.com>
	<CAJHLa0NEEppHg_Lmi_Oxnz_gPSHZPfQpeg+-8MrvFYDmdM83-g@mail.gmail.com>
	<20140313160850.GW3180@nl.grid.coop>
	<CAC1+kJOQfhFaMs34STGOeqbmHdv6bVis7o57BcF3=XYudNw_Lg@mail.gmail.com>
	<CANEZrP1CtsXV7m=qpJ1px1cQw9C7AkDYXe7Op8gQqg2+VK3mYA@mail.gmail.com>
Message-ID: <CALimQCXCjkBc7QbsLgM-q7pth4nhZ8e8m60epgkBhcJUf=kbZg@mail.gmail.com>

Another vote in support of uBTC. I made my position clear in May of last
year. Since then, Dogecoin has essentially PROVEN the psychological value
of a low-valued large-balance currency.

(From: https://bitcointalk.org/index.php?topic=220322.msg2334059#msg2334059)

"The whole unit change seems so disruptive and difficult to coordinate now
-- do we really want to have to deal with another one later when there are
way more people to try to coordinate? I really think we should look to the
endgame and figure out where we want to be.

"I'd propose moving to uB (micro-bitcoin = 1e-6) as the standard unit now
and forever. For now, it can be referred to as uB or uBTC, but over time,
once it's ubiquitous, it should just be called a bitcoin. Because the
smallest unit is the satoshi (1e-8), this means uB-denominated prices would
get 2 decimal places maximum, which is the most that any consumer wants to
deal with anyway.

"At the same time, I'd propose inverting the exchange rate, so instead of
quoting uB/USD = .00013, it would be quoted as USD/uB = 7692. This is
exactly the same way Yen are quoted relative to USD (USDJPY = 100.66), and
is also the same way other private virtual currencies such as WoW gold are
quoted."





On Thu, Mar 13, 2014 at 11:29 AM, Mike Hearn <mike at plan99.net> wrote:

> You would only need to change it if there was a sub-satoshi hardfork,
>> which doesn't seem necessary anytime soon.
>>
>
> +
>
> We shouldn't make any assumptions about the future price of bitcoin to
>> make the decision.
>>
>
> Hmmm ;) Didn't you just make an assumption about the future price?
>
>
>> This sounds very US-centric to me. Aren't you thinking in usd?
>>
>
> The currencies I'm familiar with are CHF, USD, EUR and GBP, which all have
> roughly similar values. I guess such currencies make up the bulk of the
> Bitcoin userbase at the moment.
>
>
>> "People seem to like mBTC" is just an ad populum fallacy: millions of
>> flies can actually be wrong. Also you haven't showed them micros,
>> maybe they like it too.
>
>
> Saying "it's already popular and would take work to change" is not really
> a fallacy now, is it?
>
> But anyway, this is getting silly. You don't have to convince me. Go visit
> all the services I listed above, plus all the ones I didn't find in my five
> minutes of searching, and convince them they're wrong like the flies and
> switching is the best use of their time :o
>
>
> ------------------------------------------------------------------------------
> Learn Graph Databases - Download FREE O'Reilly Book
> "Graph Databases" is the definitive new guide to graph databases and their
> applications. Written by three acclaimed leaders in the field,
> this first edition is now available. Download your free book today!
> http://p.sf.net/sfu/13534_NeoTech
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140313/9a96164a/attachment.html>

From drak at zikula.org  Thu Mar 13 19:26:42 2014
From: drak at zikula.org (Drak)
Date: Thu, 13 Mar 2014 19:26:42 +0000
Subject: [Bitcoin-development] moving the default display to mbtc
In-Reply-To: <CAJHLa0MrLGDVO7LFpUSb+LCxNjKebQQ7UHSwyWPYwzWw5WcbAw@mail.gmail.com>
References: <CAKaEYhK4oXH3hB7uS3=AEkA6r0VB5OYyTua+LOP18rq+rYajHg@mail.gmail.com>
	<52852C2D.9020103@gmail.com> <52853D8A.6010501@monetize.io>
	<CAJHLa0M6CkoDbD6FFixf9-mmhug7DvehSWCJ+EHWVxUDuwNiBg@mail.gmail.com>
	<EE02A310-8604-4811-B2D0-FC32C72C20F3@grabhive.com>
	<CAJHLa0OMcTCgGESi-F4jT2NA3FyCeMYbD_52j47t3keEYBfK8g@mail.gmail.com>
	<CA+s+GJBSGPBQWWYR1NYSc2E4Y1BWAn8zf7xsu4wQ1O8cA8OWbw@mail.gmail.com>
	<CAJHLa0NEEppHg_Lmi_Oxnz_gPSHZPfQpeg+-8MrvFYDmdM83-g@mail.gmail.com>
	<CANEZrP2O4hDBiCNvO1oV5X7OtnQ4xVDD=RtozQY8ESRHgXQu9w@mail.gmail.com>
	<CAJHLa0PB-V+KgEr5uCj+mceESggp8G4MmLGHHpz2UD_R_w-zfQ@mail.gmail.com>
	<5321D95C.2070402@gmail.com>
	<CAJHLa0MrLGDVO7LFpUSb+LCxNjKebQQ7UHSwyWPYwzWw5WcbAw@mail.gmail.com>
Message-ID: <CANAnSg2ajK=pb-fBBvonzW2Ed+8f+5TtaE7XcfNh_71Xyk2O=A@mail.gmail.com>

I agree with you Jeff. The unit switch needs to happen once and once only,
but that is exactly why I said the defaults really need to change in
Bitcoin-Qt since that is still the main reference implementation and it
will influence others.

Bitpay could also take the lead here and make the switch to their defaults.
That would greatly assist the uBTC movement.

Regardless of what anyone says, Bitcoin-Qt is still the main reference
implementation and the best way to encourage a change in the community at
large is for the default units to be changed here. Core devs can surely
garner enough consensus among themselves to accept and merge a PR to that
effect. That will send a message, more than anything else that can be done.

My two satoshi.

Drak


On 13 March 2014 16:29, Jeff Garzik <jgarzik at bitpay.com> wrote:

> On Thu, Mar 13, 2014 at 12:14 PM, Alan Reiner <etotheipi at gmail.com> wrote:
> > Of course, as Mike said, this ship may have already sailed, but if
> > there's any way to revisit this, I'm there.  We're just about to do
> > another Armory release and could support this very easily.
>
> mBTC now just means the issue -will- be revisited in the future.  Just
> a question of when, not if.
>
> People and software in various nations handle big numbers for small
> values (e.g. Yen) just fine.
> People and software do -not- handle extra decimal places well, field
> experience shows.
>
> <vendor hat: on>  To roll out QuickBooks support --without converting
> any numbers, a key financial attribute-- mBTC is simply insufficient
> today, not in the future.
>
> I also argue that it is a security risk, as follows:  To support
> accounting packages limited to 2 decimal places, decimal point
> conversion must be performed.  This produces a situation where your
> accounting system shows numbers that do not visually match the numbers
> in the bitcoin software.  That, in turn, making auditing more
> difficult, particularly for outsiders.
>
> Shipping with mBTC defaults was decidedly unwise, considering that --
> like BTC -- it fails to solve existing, known problems that uBTC can
> solve, and considering the inevitable mBTC->uBTC switch.
>
> --
> Jeff Garzik
> Bitcoin core developer and open source evangelist
> BitPay, Inc.      https://bitpay.com/
>
>
> ------------------------------------------------------------------------------
> Learn Graph Databases - Download FREE O'Reilly Book
> "Graph Databases" is the definitive new guide to graph databases and their
> applications. Written by three acclaimed leaders in the field,
> this first edition is now available. Download your free book today!
> http://p.sf.net/sfu/13534_NeoTech
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140313/ed4f62d7/attachment.html>

From jgarzik at bitpay.com  Thu Mar 13 19:38:17 2014
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Thu, 13 Mar 2014 15:38:17 -0400
Subject: [Bitcoin-development] moving the default display to mbtc
In-Reply-To: <CANEZrP1VbQPapKJCLcE0+vpK0xac6D6JxRGKdagPVchfZjpUmQ@mail.gmail.com>
References: <CAKaEYhK4oXH3hB7uS3=AEkA6r0VB5OYyTua+LOP18rq+rYajHg@mail.gmail.com>
	<52852C2D.9020103@gmail.com> <52853D8A.6010501@monetize.io>
	<CAJHLa0M6CkoDbD6FFixf9-mmhug7DvehSWCJ+EHWVxUDuwNiBg@mail.gmail.com>
	<EE02A310-8604-4811-B2D0-FC32C72C20F3@grabhive.com>
	<CAJHLa0OMcTCgGESi-F4jT2NA3FyCeMYbD_52j47t3keEYBfK8g@mail.gmail.com>
	<CAKm8k+3J9Po4xQn9LhTQrnrGCvG36-kLCjWPX4kmd-c7h+LujA@mail.gmail.com>
	<CANEZrP1VbQPapKJCLcE0+vpK0xac6D6JxRGKdagPVchfZjpUmQ@mail.gmail.com>
Message-ID: <CAJHLa0PsB6BtYSfN=X1En5iyyfJh5MnuLQgh-6O+6+dO78d29w@mail.gmail.com>

On Thu, Mar 13, 2014 at 9:31 AM, Mike Hearn <mike at plan99.net> wrote:
> The standard has become mBTC and that's what was adopted. It's too late to
> try and sway this on a mailing list thread now.

Just saying that doesn't make it so, nor does it make it a good idea.

-- 
Jeff Garzik
Bitcoin core developer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From jtimon at monetize.io  Fri Mar 14 00:34:15 2014
From: jtimon at monetize.io (=?ISO-8859-1?Q?Jorge_Tim=F3n?=)
Date: Thu, 13 Mar 2014 17:34:15 -0700
Subject: [Bitcoin-development] moving the default display to mbtc
In-Reply-To: <CANEZrP1CtsXV7m=qpJ1px1cQw9C7AkDYXe7Op8gQqg2+VK3mYA@mail.gmail.com>
References: <CAKaEYhK4oXH3hB7uS3=AEkA6r0VB5OYyTua+LOP18rq+rYajHg@mail.gmail.com>
	<52852C2D.9020103@gmail.com> <52853D8A.6010501@monetize.io>
	<CAJHLa0M6CkoDbD6FFixf9-mmhug7DvehSWCJ+EHWVxUDuwNiBg@mail.gmail.com>
	<EE02A310-8604-4811-B2D0-FC32C72C20F3@grabhive.com>
	<CAJHLa0OMcTCgGESi-F4jT2NA3FyCeMYbD_52j47t3keEYBfK8g@mail.gmail.com>
	<CA+s+GJBSGPBQWWYR1NYSc2E4Y1BWAn8zf7xsu4wQ1O8cA8OWbw@mail.gmail.com>
	<CAJHLa0NEEppHg_Lmi_Oxnz_gPSHZPfQpeg+-8MrvFYDmdM83-g@mail.gmail.com>
	<20140313160850.GW3180@nl.grid.coop>
	<CAC1+kJOQfhFaMs34STGOeqbmHdv6bVis7o57BcF3=XYudNw_Lg@mail.gmail.com>
	<CANEZrP1CtsXV7m=qpJ1px1cQw9C7AkDYXe7Op8gQqg2+VK3mYA@mail.gmail.com>
Message-ID: <CAC1+kJPF17cWEc9J1cEeyBerQvfrHVEXy7L8VUs+Mz7TpWW4eg@mail.gmail.com>

On 3/13/14, Mike Hearn <mike at plan99.net> wrote:
>>
>> You would only need to change it if there was a sub-satoshi hardfork,
>> which doesn't seem necessary anytime soon.
>>
>
> +
>
> We shouldn't make any assumptions about the future price of bitcoin to make
>> the decision.
>>
>
> Hmmm ;) Didn't you just make an assumption about the future price?

You can just remove my assertion about the likeliness of the need of
sub-satoshis and the main claim still stands.

> The currencies I'm familiar with are CHF, USD, EUR and GBP, which all have
> roughly similar values. I guess such currencies make up the bulk of the
> Bitcoin userbase at the moment.

Fair enough, not US-centric but western-centric then.
In any case the "3000 micros will look like expensive" claim is still
very relative.

>> "People seem to like mBTC" is just an ad populum fallacy: millions of
>> flies can actually be wrong. Also you haven't showed them micros,
>> maybe they like it too.
>
>
> Saying "it's already popular and would take work to change" is not really a
> fallacy now, is it?

No, it's not. That's what I said the current adoption by some wallets
and services was the only valid argument immediately after dismantling
the actual fallacy.
Did you missed that last sentence or are you intentionally using a
straw man argument?

In summary, yes, that's point is valid, I'm not saying it isn't. I
just wanted to keep us away from the rest argument but pointing out
they are not logic.
I repeat, that's the ONLY valid argument I've heard so far.



From slashdevnull at hotmail.com  Fri Mar 14 01:26:19 2014
From: slashdevnull at hotmail.com (Un Ix)
Date: Fri, 14 Mar 2014 09:26:19 +0800
Subject: [Bitcoin-development] moving the default display to mbtc
In-Reply-To: <20140313160850.GW3180@nl.grid.coop>
References: <CAKaEYhK4oXH3hB7uS3=AEkA6r0VB5OYyTua+LOP18rq+rYajHg@mail.gmail.com>
	<52852C2D.9020103@gmail.com> <52853D8A.6010501@monetize.io>
	<CAJHLa0M6CkoDbD6FFixf9-mmhug7DvehSWCJ+EHWVxUDuwNiBg@mail.gmail.com>
	<EE02A310-8604-4811-B2D0-FC32C72C20F3@grabhive.com>
	<CAJHLa0OMcTCgGESi-F4jT2NA3FyCeMYbD_52j47t3keEYBfK8g@mail.gmail.com>
	<CA+s+GJBSGPBQWWYR1NYSc2E4Y1BWAn8zf7xsu4wQ1O8cA8OWbw@mail.gmail.com>
	<CAJHLa0NEEppHg_Lmi_Oxnz_gPSHZPfQpeg+-8MrvFYDmdM83-g@mail.gmail.com>
	<20140313160850.GW3180@nl.grid.coop>
Message-ID: <BLU402-EAS32370CF56D38C1F37520D4CC6700@phx.gbl>

Second this comment.

A change like this so soon after mt gox debacle would be one more sign of bitcoins 'instability' for skeptics and average folk who read only headlines.

In general, it seems some people are looking to try and change the publics mental price of BTC which is more of a non-technical challenge. 

Gavin

> On 14/03/2014, at 12:21 am, "Troy Benjegerdes" <hozer at hozed.org> wrote:
> 
> <cynic hat: on>
> 
> Every volatility bump messes up expectations of what a bitcoin is worth,
> so why are we bikeshedding uBTC vs mBTC? Just be done with it and do mBTC
> now, and plan uBTC for just after the next price spike to $10KUSD or whatever, 
> and then plan on rolling back to mBTC when the price crashes from altcoin
> money supply inflation competition.
> 
> 
>> On Thu, Mar 13, 2014 at 09:45:54AM -0400, Jeff Garzik wrote:
>> <vendor hat: on>
>> 
>> Based on this seeming consensus, BitPay was headed towards uBTC
>> internally, and hoped to coordinate messaging and rollout with others
>> in the community.  Ah well, proceed apace, and Bitcoin Wallet will
>> catch up, I suppose.
>> 
>> Multiple unit changes negatively impact users, but we are already there :/
>> 
>> 
>>> On Thu, Mar 13, 2014 at 9:34 AM, Wladimir <laanwj at gmail.com> wrote:
>>> 
>>>> On Thu, Mar 13, 2014 at 1:56 PM, Jeff Garzik <jgarzik at bitpay.com> wrote:
>>>> 
>>>> Resurrecting this topic.  Bitcoin Wallet moved to mBTC several weeks
>>>> ago, which was disappointing -- it sounded like the consensus was
>>>> uBTC, and moving to uBTC later --which will happen-- may result in
>>>> additional user confusion, thanks to yet another decimal place
>>>> transition.
>>> 
>>> 
>>> I've kind of given up getting any consensus about this, or even getting
>>> people to care.
>>> 
>>> Everyone agrees that a decimal shift would be good, but it's the same boring
>>> shed painting discussion every time on how many decimals. In the end nothing
>>> happens.
>>> 
>>> I can't really blame Andreas for finally taking action and making the change
>>> to mBTC. People in the community are familiar with mBTC because some
>>> exchanges and price sites used mBTC (at least for a while when >$1000), also
>>> mBTC seems to be catching on on reddit etc.
>>> 
>>> Moving to muBTC (which in itself would be better because it is the final
>>> unit change ever needed without hardfork) would require more coordinated
>>> education effort.
>>> 
>>> Wladimir
>> 
>> 
>> 
>> -- 
>> Jeff Garzik
>> Bitcoin core developer and open source evangelist
>> BitPay, Inc.      https://bitpay.com/
>> 
>> ------------------------------------------------------------------------------
>> Learn Graph Databases - Download FREE O'Reilly Book
>> "Graph Databases" is the definitive new guide to graph databases and their
>> applications. Written by three acclaimed leaders in the field,
>> this first edition is now available. Download your free book today!
>> http://p.sf.net/sfu/13534_NeoTech
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 
> -- 
> ----------------------------------------------------------------------------
> Troy Benjegerdes                 'da hozer'                  hozer at hozed.org
> 7 elements      earth::water::air::fire::mind::spirit::soul        grid.coop
> 
>      Never pick a fight with someone who buys ink by the barrel,
>         nor try buy a hacker who makes money by the megahash
> 
> 
> ------------------------------------------------------------------------------
> Learn Graph Databases - Download FREE O'Reilly Book
> "Graph Databases" is the definitive new guide to graph databases and their
> applications. Written by three acclaimed leaders in the field,
> this first edition is now available. Download your free book today!
> http://p.sf.net/sfu/13534_NeoTech
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development



From jack.scott.public at gmail.com  Fri Mar 14 02:38:42 2014
From: jack.scott.public at gmail.com (Jack Scott)
Date: Thu, 13 Mar 2014 19:38:42 -0700
Subject: [Bitcoin-development] Physical key / edge detection software and
	PIN to generate private key
Message-ID: <CAMPt2UN=ySXRP04cB+Cx3frF0u9F2yWoHCVZsvz5VG=ZEaZJCw@mail.gmail.com>

BIP: XX
Title: Physical key / edge detection software and PIN to generate a Bitcoin
private key
Author: Jack Scott
Status: Idea
Type: Standard Track
Created: 13-3-2014

Abstract:
A method is proposed to generate a Bitcoin private key by using a physical
key in conjunction with image recognition software and a PIN.  Use edge
detection software applied to incoming video feed to convert the shape of a
physical key into an equation that describes the key.  The hash of the
key's equation plus a user generated five digit pin can then be used to
create a Bitcoin private key.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140313/f24ce696/attachment.html>

From laanwj at gmail.com  Fri Mar 14 03:19:56 2014
From: laanwj at gmail.com (Wladimir)
Date: Fri, 14 Mar 2014 04:19:56 +0100
Subject: [Bitcoin-development] Physical key / edge detection software
 and PIN to generate private key
In-Reply-To: <CAMPt2UN=ySXRP04cB+Cx3frF0u9F2yWoHCVZsvz5VG=ZEaZJCw@mail.gmail.com>
References: <CAMPt2UN=ySXRP04cB+Cx3frF0u9F2yWoHCVZsvz5VG=ZEaZJCw@mail.gmail.com>
Message-ID: <CA+s+GJB5bh3W1kkNQ78Xyds+o4x84eDc=OUFFb3gzZzDrEC+ag@mail.gmail.com>

On Fri, Mar 14, 2014 at 3:38 AM, Jack Scott <jack.scott.public at gmail.com>wrote:

> A method is proposed to generate a Bitcoin private key by using a physical
> key in conjunction with image recognition software and a PIN.  Use edge
> detection software applied to incoming video feed to convert the shape of a
> physical key into an equation that describes the key.  The hash of the
> key's equation plus a user generated five digit pin can then be used to
> create a Bitcoin private key.
>

Some practical nits:

- Physical keys are vulnerable to photography-based reproduction attacks.
That gets even worse if you use them to identify to a digital system as you
can leave out the tiresome manual reproduction step.

- The output from computer vision algorithms is notoriously noisy. If you
use that as input for hashing a private key, it may become hard/impossible
to reproduce (also, physical objects may deform over time).

Wladimir
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140314/7fca85eb/attachment.html>

From andreas at schildbach.de  Fri Mar 14 14:05:25 2014
From: andreas at schildbach.de (Andreas Schildbach)
Date: Fri, 14 Mar 2014 15:05:25 +0100
Subject: [Bitcoin-development] moving the default display to mbtc
In-Reply-To: <lfscfd$3cs$1@ger.gmane.org>
References: <CAKaEYhK4oXH3hB7uS3=AEkA6r0VB5OYyTua+LOP18rq+rYajHg@mail.gmail.com>	<52852C2D.9020103@gmail.com>	<52853D8A.6010501@monetize.io>	<CAJHLa0M6CkoDbD6FFixf9-mmhug7DvehSWCJ+EHWVxUDuwNiBg@mail.gmail.com>	<EE02A310-8604-4811-B2D0-FC32C72C20F3@grabhive.com>	<CAJHLa0OMcTCgGESi-F4jT2NA3FyCeMYbD_52j47t3keEYBfK8g@mail.gmail.com>	<CAKm8k+3J9Po4xQn9LhTQrnrGCvG36-kLCjWPX4kmd-c7h+LujA@mail.gmail.com>	<CANEZrP1VbQPapKJCLcE0+vpK0xac6D6JxRGKdagPVchfZjpUmQ@mail.gmail.com>
	<lfscfd$3cs$1@ger.gmane.org>
Message-ID: <lfv2an$iv3$1@ger.gmane.org>

btw. None of Bitcoin Wallet's users complained about confusion because
of the mBTC switch. In contrast, I get many mails and questions if
exchange rates happen to differ by >10%.

I suspect nobody looks at the Bitcoin price. It's the amount in local
currency that matters to the users.


On 03/13/2014 02:40 PM, Andreas Schildbach wrote:
> Indeed. And users were crying for mBTC. Nobody was asking for ?BTC.
> 
> I must admit I was not aware if this thread. I just watched other
> wallets and at some point decided its time to switch to mBTC.
> 
> 
> On 03/13/2014 02:31 PM, Mike Hearn wrote:
>> The standard has become mBTC and that's what was adopted. It's too late
>> to try and sway this on a mailing list thread now.
>>
>>
>> On Thu, Mar 13, 2014 at 2:29 PM, Gary Rowe <g.rowe at froot.co.uk
>> <mailto:g.rowe at froot.co.uk>> wrote:
>>
>>     The MultiBit HD view is that this is a locale-sensitive presentation
>>     issue. As a result we offer a simple configuration panel giving
>>     pretty much every possible combination: icon, m+icon,  ?+icon, BTC,
>>     mBTC,  ?BTC, XBT, mXBT,  ?XBT, sat along with settings for
>>     leading/trailing symbol, commas, spaces and points. This allows
>>     anyone to customise to meet their own needs beyond the offered default. 
>>
>>     We apply the NIST guidelines for representation of SI unit symbols
>>     (i.e no conversion to native language, no RTL giving icon+m etc).
>>
>>     Right now MultiBit HD is configured to use m+icon taken from the
>>     Font Awesome icon set. However reading earlier posts it seems
>>     that ?+icon is more sensible. 
>>
>>     Let us know what you'd like.
>>
>>     Links:
>>     m+icon screenshot: http://imgur.com/a/WCDoG
>>     Font Awesome icon: http://fortawesome.github.io/Font-Awesome/icon/btc/
>>     NIST SI guidelines: http://physics.nist.gov/Pubs/SP811/sec07.html
>>
>>
>>     On 13 March 2014 12:56, Jeff Garzik <jgarzik at bitpay.com
>>     <mailto:jgarzik at bitpay.com>> wrote:
>>
>>         Resurrecting this topic.  Bitcoin Wallet moved to mBTC several weeks
>>         ago, which was disappointing -- it sounded like the consensus was
>>         uBTC, and moving to uBTC later --which will happen-- may result in
>>         additional user confusion, thanks to yet another decimal place
>>         transition.
>>
>>
>>
>>         On Sun, Nov 17, 2013 at 9:28 PM, Wendell <w at grabhive.com
>>         <mailto:w at grabhive.com>> wrote:
>>         > We're with uBTC too. Been waiting for the signal to do this,
>>         let's do it right after the fee system is improved.
>>         >
>>         > -wendell
>>         >
>>         > grabhive.com <http://grabhive.com> | twitter.com/hivewallet
>>         <http://twitter.com/hivewallet> | gpg: 6C0C9411
>>         >
>>         > On Nov 15, 2013, at 6:03 AM, Jeff Garzik wrote:
>>         >
>>         >> Go straight to uBTC. Humans and existing computer systems
>>         handle numbers to
>>         >> the left of the decimals just fine (HK Dollars, Yen). The
>>         opposite is
>>         >> untrue (QuickBooks really does not like 3+ decimal places).
>>         >
>>
>>
>>
>>         --
>>         Jeff Garzik
>>         Bitcoin core developer and open source evangelist
>>         BitPay, Inc.      https://bitpay.com/
>>
>>         ------------------------------------------------------------------------------
>>         Learn Graph Databases - Download FREE O'Reilly Book
>>         "Graph Databases" is the definitive new guide to graph databases
>>         and their
>>         applications. Written by three acclaimed leaders in the field,
>>         this first edition is now available. Download your free book today!
>>         http://p.sf.net/sfu/13534_NeoTech
>>         _______________________________________________
>>         Bitcoin-development mailing list
>>         Bitcoin-development at lists.sourceforge.net
>>         <mailto:Bitcoin-development at lists.sourceforge.net>
>>         https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>
>>
>>
>>     ------------------------------------------------------------------------------
>>     Learn Graph Databases - Download FREE O'Reilly Book
>>     "Graph Databases" is the definitive new guide to graph databases and
>>     their
>>     applications. Written by three acclaimed leaders in the field,
>>     this first edition is now available. Download your free book today!
>>     http://p.sf.net/sfu/13534_NeoTech
>>     _______________________________________________
>>     Bitcoin-development mailing list
>>     Bitcoin-development at lists.sourceforge.net
>>     <mailto:Bitcoin-development at lists.sourceforge.net>
>>     https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>
>>
>>
>>
>> ------------------------------------------------------------------------------
>> Learn Graph Databases - Download FREE O'Reilly Book
>> "Graph Databases" is the definitive new guide to graph databases and their
>> applications. Written by three acclaimed leaders in the field,
>> this first edition is now available. Download your free book today!
>> http://p.sf.net/sfu/13534_NeoTech
>>
>>
>>
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>
> 
> 
> 
> ------------------------------------------------------------------------------
> Learn Graph Databases - Download FREE O'Reilly Book
> "Graph Databases" is the definitive new guide to graph databases and their
> applications. Written by three acclaimed leaders in the field,
> this first edition is now available. Download your free book today!
> http://p.sf.net/sfu/13534_NeoTech
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 





From tamas at bitsofproof.com  Fri Mar 14 14:14:15 2014
From: tamas at bitsofproof.com (Tamas Blummer)
Date: Fri, 14 Mar 2014 15:14:15 +0100
Subject: [Bitcoin-development] moving the default display to mbtc
In-Reply-To: <lfv2an$iv3$1@ger.gmane.org>
References: <CAKaEYhK4oXH3hB7uS3=AEkA6r0VB5OYyTua+LOP18rq+rYajHg@mail.gmail.com>	<52852C2D.9020103@gmail.com>	<52853D8A.6010501@monetize.io>	<CAJHLa0M6CkoDbD6FFixf9-mmhug7DvehSWCJ+EHWVxUDuwNiBg@mail.gmail.com>	<EE02A310-8604-4811-B2D0-FC32C72C20F3@grabhive.com>	<CAJHLa0OMcTCgGESi-F4jT2NA3FyCeMYbD_52j47t3keEYBfK8g@mail.gmail.com>	<CAKm8k+3J9Po4xQn9LhTQrnrGCvG36-kLCjWPX4kmd-c7h+LujA@mail.gmail.com>	<CANEZrP1VbQPapKJCLcE0+vpK0xac6D6JxRGKdagPVchfZjpUmQ@mail.gmail.com>
	<lfscfd$3cs$1@ger.gmane.org> <lfv2an$iv3$1@ger.gmane.org>
Message-ID: <362072F0-1EA8-4474-AE26-4691C852A22C@bitsofproof.com>

You give them a hard to interpret thing like mBTC and then wonder why
they rather look at local currency. Because the choices you gave them are bad.

I think Bitcoin would have a better chance to be percieved as a currency
of its own if it had prices and fractions like currencies do. 

3.558 mBTC or 0.003578 BTC will never be as accepted as 3558 bits would be.


Tamas Blummer
Bits of Proof

On 14.03.2014, at 15:05, Andreas Schildbach <andreas at schildbach.de> wrote:

> btw. None of Bitcoin Wallet's users complained about confusion because
> of the mBTC switch. In contrast, I get many mails and questions if
> exchange rates happen to differ by >10%.
> 
> I suspect nobody looks at the Bitcoin price. It's the amount in local
> currency that matters to the users.
> 
> 
> On 03/13/2014 02:40 PM, Andreas Schildbach wrote:
>> Indeed. And users were crying for mBTC. Nobody was asking for ?BTC.
>> 
>> I must admit I was not aware if this thread. I just watched other
>> wallets and at some point decided its time to switch to mBTC.
>> 
>> 
>> On 03/13/2014 02:31 PM, Mike Hearn wrote:
>>> The standard has become mBTC and that's what was adopted. It's too late
>>> to try and sway this on a mailing list thread now.
>>> 
>>> 
>>> On Thu, Mar 13, 2014 at 2:29 PM, Gary Rowe <g.rowe at froot.co.uk
>>> <mailto:g.rowe at froot.co.uk>> wrote:
>>> 
>>>    The MultiBit HD view is that this is a locale-sensitive presentation
>>>    issue. As a result we offer a simple configuration panel giving
>>>    pretty much every possible combination: icon, m+icon,  ?+icon, BTC,
>>>    mBTC,  ?BTC, XBT, mXBT,  ?XBT, sat along with settings for
>>>    leading/trailing symbol, commas, spaces and points. This allows
>>>    anyone to customise to meet their own needs beyond the offered default. 
>>> 
>>>    We apply the NIST guidelines for representation of SI unit symbols
>>>    (i.e no conversion to native language, no RTL giving icon+m etc).
>>> 
>>>    Right now MultiBit HD is configured to use m+icon taken from the
>>>    Font Awesome icon set. However reading earlier posts it seems
>>>    that ?+icon is more sensible. 
>>> 
>>>    Let us know what you'd like.
>>> 
>>>    Links:
>>>    m+icon screenshot: http://imgur.com/a/WCDoG
>>>    Font Awesome icon: http://fortawesome.github.io/Font-Awesome/icon/btc/
>>>    NIST SI guidelines: http://physics.nist.gov/Pubs/SP811/sec07.html
>>> 
>>> 
>>>    On 13 March 2014 12:56, Jeff Garzik <jgarzik at bitpay.com
>>>    <mailto:jgarzik at bitpay.com>> wrote:
>>> 
>>>        Resurrecting this topic.  Bitcoin Wallet moved to mBTC several weeks
>>>        ago, which was disappointing -- it sounded like the consensus was
>>>        uBTC, and moving to uBTC later --which will happen-- may result in
>>>        additional user confusion, thanks to yet another decimal place
>>>        transition.
>>> 
>>> 
>>> 
>>>        On Sun, Nov 17, 2013 at 9:28 PM, Wendell <w at grabhive.com
>>>        <mailto:w at grabhive.com>> wrote:
>>>> We're with uBTC too. Been waiting for the signal to do this,
>>>        let's do it right after the fee system is improved.
>>>> 
>>>> -wendell
>>>> 
>>>> grabhive.com <http://grabhive.com> | twitter.com/hivewallet
>>>        <http://twitter.com/hivewallet> | gpg: 6C0C9411
>>>> 
>>>> On Nov 15, 2013, at 6:03 AM, Jeff Garzik wrote:
>>>> 
>>>>> Go straight to uBTC. Humans and existing computer systems
>>>        handle numbers to
>>>>> the left of the decimals just fine (HK Dollars, Yen). The
>>>        opposite is
>>>>> untrue (QuickBooks really does not like 3+ decimal places).
>>>> 
>>> 
>>> 
>>> 
>>>        --
>>>        Jeff Garzik
>>>        Bitcoin core developer and open source evangelist
>>>        BitPay, Inc.      https://bitpay.com/
>>> 
>>>        ------------------------------------------------------------------------------
>>>        Learn Graph Databases - Download FREE O'Reilly Book
>>>        "Graph Databases" is the definitive new guide to graph databases
>>>        and their
>>>        applications. Written by three acclaimed leaders in the field,
>>>        this first edition is now available. Download your free book today!
>>>        http://p.sf.net/sfu/13534_NeoTech
>>>        _______________________________________________
>>>        Bitcoin-development mailing list
>>>        Bitcoin-development at lists.sourceforge.net
>>>        <mailto:Bitcoin-development at lists.sourceforge.net>
>>>        https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>> 
>>> 
>>> 
>>>    ------------------------------------------------------------------------------
>>>    Learn Graph Databases - Download FREE O'Reilly Book
>>>    "Graph Databases" is the definitive new guide to graph databases and
>>>    their
>>>    applications. Written by three acclaimed leaders in the field,
>>>    this first edition is now available. Download your free book today!
>>>    http://p.sf.net/sfu/13534_NeoTech
>>>    _______________________________________________
>>>    Bitcoin-development mailing list
>>>    Bitcoin-development at lists.sourceforge.net
>>>    <mailto:Bitcoin-development at lists.sourceforge.net>
>>>    https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>> 
>>> 
>>> 
>>> 
>>> ------------------------------------------------------------------------------
>>> Learn Graph Databases - Download FREE O'Reilly Book
>>> "Graph Databases" is the definitive new guide to graph databases and their
>>> applications. Written by three acclaimed leaders in the field,
>>> this first edition is now available. Download your free book today!
>>> http://p.sf.net/sfu/13534_NeoTech
>>> 
>>> 
>>> 
>>> _______________________________________________
>>> Bitcoin-development mailing list
>>> Bitcoin-development at lists.sourceforge.net
>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>> 
>> 
>> 
>> 
>> ------------------------------------------------------------------------------
>> Learn Graph Databases - Download FREE O'Reilly Book
>> "Graph Databases" is the definitive new guide to graph databases and their
>> applications. Written by three acclaimed leaders in the field,
>> this first edition is now available. Download your free book today!
>> http://p.sf.net/sfu/13534_NeoTech
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>> 
> 
> 
> 
> ------------------------------------------------------------------------------
> Learn Graph Databases - Download FREE O'Reilly Book
> "Graph Databases" is the definitive new guide to graph databases and their
> applications. Written by three acclaimed leaders in the field,
> this first edition is now available. Download your free book today!
> http://p.sf.net/sfu/13534_NeoTech
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 495 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140314/bb5a622e/attachment.sig>

From andreas at schildbach.de  Fri Mar 14 14:49:40 2014
From: andreas at schildbach.de (Andreas Schildbach)
Date: Fri, 14 Mar 2014 15:49:40 +0100
Subject: [Bitcoin-development] moving the default display to mbtc
In-Reply-To: <362072F0-1EA8-4474-AE26-4691C852A22C@bitsofproof.com>
References: <CAKaEYhK4oXH3hB7uS3=AEkA6r0VB5OYyTua+LOP18rq+rYajHg@mail.gmail.com>	<52852C2D.9020103@gmail.com>	<52853D8A.6010501@monetize.io>	<CAJHLa0M6CkoDbD6FFixf9-mmhug7DvehSWCJ+EHWVxUDuwNiBg@mail.gmail.com>	<EE02A310-8604-4811-B2D0-FC32C72C20F3@grabhive.com>	<CAJHLa0OMcTCgGESi-F4jT2NA3FyCeMYbD_52j47t3keEYBfK8g@mail.gmail.com>	<CAKm8k+3J9Po4xQn9LhTQrnrGCvG36-kLCjWPX4kmd-c7h+LujA@mail.gmail.com>	<CANEZrP1VbQPapKJCLcE0+vpK0xac6D6JxRGKdagPVchfZjpUmQ@mail.gmail.com>	<lfscfd$3cs$1@ger.gmane.org>
	<lfv2an$iv3$1@ger.gmane.org>
	<362072F0-1EA8-4474-AE26-4691C852A22C@bitsofproof.com>
Message-ID: <lfv4tm$lpg$1@ger.gmane.org>

How much do you pay for an Espresso in your local currency?

At least for the Euro and the Dollar, mBTC 3.56 is very close to what
people would expect. Certainly more familiar than ?BTC 3558 or BTC
0.003578.

Anyway, I was just sharing real-world experience: nobody is confused.


On 03/14/2014 03:14 PM, Tamas Blummer wrote:
> You give them a hard to interpret thing like mBTC and then wonder
> why they rather look at local currency. Because the choices you
> gave them are bad.
> 
> I think Bitcoin would have a better chance to be percieved as a
> currency of its own if it had prices and fractions like currencies
> do.
> 
> 3.558 mBTC or 0.003578 BTC will never be as accepted as 3558 bits
> would be.
> 
> 
> Tamas Blummer Bits of Proof
> 
> On 14.03.2014, at 15:05, Andreas Schildbach <andreas at schildbach.de>
> wrote:
> 
>> btw. None of Bitcoin Wallet's users complained about confusion
>> because of the mBTC switch. In contrast, I get many mails and
>> questions if exchange rates happen to differ by >10%.
>> 
>> I suspect nobody looks at the Bitcoin price. It's the amount in
>> local currency that matters to the users.
>> 
>> 
>> On 03/13/2014 02:40 PM, Andreas Schildbach wrote:
>>> Indeed. And users were crying for mBTC. Nobody was asking for
>>> ?BTC.
>>> 
>>> I must admit I was not aware if this thread. I just watched
>>> other wallets and at some point decided its time to switch to
>>> mBTC.
>>> 
>>> 
>>> On 03/13/2014 02:31 PM, Mike Hearn wrote:
>>>> The standard has become mBTC and that's what was adopted.
>>>> It's too late to try and sway this on a mailing list thread
>>>> now.
>>>> 
>>>> 
>>>> On Thu, Mar 13, 2014 at 2:29 PM, Gary Rowe
>>>> <g.rowe at froot.co.uk <mailto:g.rowe at froot.co.uk>> wrote:
>>>> 
>>>> The MultiBit HD view is that this is a locale-sensitive
>>>> presentation issue. As a result we offer a simple
>>>> configuration panel giving pretty much every possible
>>>> combination: icon, m+icon,  ?+icon, BTC, mBTC,  ?BTC, XBT,
>>>> mXBT,  ?XBT, sat along with settings for leading/trailing
>>>> symbol, commas, spaces and points. This allows anyone to
>>>> customise to meet their own needs beyond the offered default.
>>>> 
>>>> 
>>>> We apply the NIST guidelines for representation of SI unit
>>>> symbols (i.e no conversion to native language, no RTL giving
>>>> icon+m etc).
>>>> 
>>>> Right now MultiBit HD is configured to use m+icon taken from
>>>> the Font Awesome icon set. However reading earlier posts it
>>>> seems that ?+icon is more sensible.
>>>> 
>>>> Let us know what you'd like.
>>>> 
>>>> Links: m+icon screenshot: http://imgur.com/a/WCDoG Font
>>>> Awesome icon:
>>>> http://fortawesome.github.io/Font-Awesome/icon/btc/ NIST SI
>>>> guidelines: http://physics.nist.gov/Pubs/SP811/sec07.html
>>>> 
>>>> 
>>>> On 13 March 2014 12:56, Jeff Garzik <jgarzik at bitpay.com 
>>>> <mailto:jgarzik at bitpay.com>> wrote:
>>>> 
>>>> Resurrecting this topic.  Bitcoin Wallet moved to mBTC
>>>> several weeks ago, which was disappointing -- it sounded like
>>>> the consensus was uBTC, and moving to uBTC later --which will
>>>> happen-- may result in additional user confusion, thanks to
>>>> yet another decimal place transition.
>>>> 
>>>> 
>>>> 
>>>> On Sun, Nov 17, 2013 at 9:28 PM, Wendell <w at grabhive.com 
>>>> <mailto:w at grabhive.com>> wrote:
>>>>> We're with uBTC too. Been waiting for the signal to do
>>>>> this,
>>>> let's do it right after the fee system is improved.
>>>>> 
>>>>> -wendell
>>>>> 
>>>>> grabhive.com <http://grabhive.com> |
>>>>> twitter.com/hivewallet
>>>> <http://twitter.com/hivewallet> | gpg: 6C0C9411
>>>>> 
>>>>> On Nov 15, 2013, at 6:03 AM, Jeff Garzik wrote:
>>>>> 
>>>>>> Go straight to uBTC. Humans and existing computer
>>>>>> systems
>>>> handle numbers to
>>>>>> the left of the decimals just fine (HK Dollars, Yen).
>>>>>> The
>>>> opposite is
>>>>>> untrue (QuickBooks really does not like 3+ decimal
>>>>>> places).
>>>>> 
>>>> 
>>>> 
>>>> 
>>>> -- Jeff Garzik Bitcoin core developer and open source
>>>> evangelist BitPay, Inc.      https://bitpay.com/
>>>> 
>>>> ------------------------------------------------------------------------------
>>>>
>>>> 
Learn Graph Databases - Download FREE O'Reilly Book
>>>> "Graph Databases" is the definitive new guide to graph
>>>> databases and their applications. Written by three acclaimed
>>>> leaders in the field, this first edition is now available.
>>>> Download your free book today! 
>>>> http://p.sf.net/sfu/13534_NeoTech 
>>>> _______________________________________________ 
>>>> Bitcoin-development mailing list 
>>>> Bitcoin-development at lists.sourceforge.net 
>>>> <mailto:Bitcoin-development at lists.sourceforge.net> 
>>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>>>
>>>>
>>>>
>>>>
>>>> 
------------------------------------------------------------------------------
>>>> Learn Graph Databases - Download FREE O'Reilly Book "Graph
>>>> Databases" is the definitive new guide to graph databases
>>>> and their applications. Written by three acclaimed leaders in
>>>> the field, this first edition is now available. Download your
>>>> free book today! http://p.sf.net/sfu/13534_NeoTech 
>>>> _______________________________________________ 
>>>> Bitcoin-development mailing list 
>>>> Bitcoin-development at lists.sourceforge.net 
>>>> <mailto:Bitcoin-development at lists.sourceforge.net> 
>>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>>>
>>>>
>>>>
>>>>
>>>>
>>>> 
------------------------------------------------------------------------------
>>>> Learn Graph Databases - Download FREE O'Reilly Book "Graph
>>>> Databases" is the definitive new guide to graph databases and
>>>> their applications. Written by three acclaimed leaders in the
>>>> field, this first edition is now available. Download your
>>>> free book today! http://p.sf.net/sfu/13534_NeoTech
>>>> 
>>>> 
>>>> 
>>>> _______________________________________________ 
>>>> Bitcoin-development mailing list 
>>>> Bitcoin-development at lists.sourceforge.net 
>>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>>>
>>>
>>>
>>>
>>>
>>>> 
------------------------------------------------------------------------------
>>> Learn Graph Databases - Download FREE O'Reilly Book "Graph
>>> Databases" is the definitive new guide to graph databases and
>>> their applications. Written by three acclaimed leaders in the
>>> field, this first edition is now available. Download your free
>>> book today! http://p.sf.net/sfu/13534_NeoTech 
>>> _______________________________________________ 
>>> Bitcoin-development mailing list 
>>> Bitcoin-development at lists.sourceforge.net 
>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>>
>>
>>
>>
>>
>>> 
------------------------------------------------------------------------------
>> Learn Graph Databases - Download FREE O'Reilly Book "Graph
>> Databases" is the definitive new guide to graph databases and
>> their applications. Written by three acclaimed leaders in the
>> field, this first edition is now available. Download your free
>> book today! http://p.sf.net/sfu/13534_NeoTech 
>> _______________________________________________ 
>> Bitcoin-development mailing list 
>> Bitcoin-development at lists.sourceforge.net 
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 
> 
> 
> ------------------------------------------------------------------------------
>
> 
Learn Graph Databases - Download FREE O'Reilly Book
> "Graph Databases" is the definitive new guide to graph databases
> and their applications. Written by three acclaimed leaders in the
> field, this first edition is now available. Download your free book
> today! http://p.sf.net/sfu/13534_NeoTech
> 
> 
> 
> _______________________________________________ Bitcoin-development
> mailing list Bitcoin-development at lists.sourceforge.net 
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 





From roy at gnomon.org.uk  Fri Mar 14 14:18:47 2014
From: roy at gnomon.org.uk (Roy Badami)
Date: Fri, 14 Mar 2014 14:18:47 +0000
Subject: [Bitcoin-development] moving the default display to mbtc
In-Reply-To: <lfv2an$iv3$1@ger.gmane.org>
References: <CAKaEYhK4oXH3hB7uS3=AEkA6r0VB5OYyTua+LOP18rq+rYajHg@mail.gmail.com>
	<52852C2D.9020103@gmail.com> <52853D8A.6010501@monetize.io>
	<CAJHLa0M6CkoDbD6FFixf9-mmhug7DvehSWCJ+EHWVxUDuwNiBg@mail.gmail.com>
	<EE02A310-8604-4811-B2D0-FC32C72C20F3@grabhive.com>
	<CAJHLa0OMcTCgGESi-F4jT2NA3FyCeMYbD_52j47t3keEYBfK8g@mail.gmail.com>
	<CAKm8k+3J9Po4xQn9LhTQrnrGCvG36-kLCjWPX4kmd-c7h+LujA@mail.gmail.com>
	<CANEZrP1VbQPapKJCLcE0+vpK0xac6D6JxRGKdagPVchfZjpUmQ@mail.gmail.com>
	<lfscfd$3cs$1@ger.gmane.org> <lfv2an$iv3$1@ger.gmane.org>
Message-ID: <20140314141846.GX88006@giles.gnomon.org.uk>

On Fri, Mar 14, 2014 at 03:05:25PM +0100, Andreas Schildbach wrote:
> btw. None of Bitcoin Wallet's users complained about confusion because
> of the mBTC switch. In contrast, I get many mails and questions if
> exchange rates happen to differ by >10%.

At the moment, I imagine the vast majority of Bitcoin users are
familliar with SI units and know what milli- and micro- mean.

I doubt that is true of the general population, though.

roy



From tamas at bitsofproof.com  Fri Mar 14 14:57:37 2014
From: tamas at bitsofproof.com (Tamas Blummer)
Date: Fri, 14 Mar 2014 15:57:37 +0100
Subject: [Bitcoin-development] moving the default display to mbtc
In-Reply-To: <lfv4tm$lpg$1@ger.gmane.org>
References: <CAKaEYhK4oXH3hB7uS3=AEkA6r0VB5OYyTua+LOP18rq+rYajHg@mail.gmail.com>	<52852C2D.9020103@gmail.com>	<52853D8A.6010501@monetize.io>	<CAJHLa0M6CkoDbD6FFixf9-mmhug7DvehSWCJ+EHWVxUDuwNiBg@mail.gmail.com>	<EE02A310-8604-4811-B2D0-FC32C72C20F3@grabhive.com>	<CAJHLa0OMcTCgGESi-F4jT2NA3FyCeMYbD_52j47t3keEYBfK8g@mail.gmail.com>	<CAKm8k+3J9Po4xQn9LhTQrnrGCvG36-kLCjWPX4kmd-c7h+LujA@mail.gmail.com>	<CANEZrP1VbQPapKJCLcE0+vpK0xac6D6JxRGKdagPVchfZjpUmQ@mail.gmail.com>	<lfscfd$3cs$1@ger.gmane.org>
	<lfv2an$iv3$1@ger.gmane.org>
	<362072F0-1EA8-4474-AE26-4691C852A22C@bitsofproof.com>
	<lfv4tm$lpg$1@ger.gmane.org>
Message-ID: <A1A0E432-3E76-429C-AADF-083A0041C34B@bitsofproof.com>

you miss the point Andreas. It is not about the magnitude but about
the form of a price.

A number with no decimals or with two decimals is percieved as a
price in some currency. 

A number with more than two decimals is just not percieved as a price
but as a geeky something that you rather convert to local currency.

Tamas Blummer
Bits of Proof

On 14.03.2014, at 15:49, Andreas Schildbach <andreas at schildbach.de> wrote:

> How much do you pay for an Espresso in your local currency?
> 
> At least for the Euro and the Dollar, mBTC 3.56 is very close to what
> people would expect. Certainly more familiar than ?BTC 3558 or BTC
> 0.003578.
> 
> Anyway, I was just sharing real-world experience: nobody is confused.
> 
> 
> On 03/14/2014 03:14 PM, Tamas Blummer wrote:
>> You give them a hard to interpret thing like mBTC and then wonder
>> why they rather look at local currency. Because the choices you
>> gave them are bad.
>> 
>> I think Bitcoin would have a better chance to be percieved as a
>> currency of its own if it had prices and fractions like currencies
>> do.
>> 
>> 3.558 mBTC or 0.003578 BTC will never be as accepted as 3558 bits
>> would be.
>> 
>> 
>> Tamas Blummer Bits of Proof
>> 
>> On 14.03.2014, at 15:05, Andreas Schildbach <andreas at schildbach.de>
>> wrote:
>> 
>>> btw. None of Bitcoin Wallet's users complained about confusion
>>> because of the mBTC switch. In contrast, I get many mails and
>>> questions if exchange rates happen to differ by >10%.
>>> 
>>> I suspect nobody looks at the Bitcoin price. It's the amount in
>>> local currency that matters to the users.
>>> 
>>> 
>>> On 03/13/2014 02:40 PM, Andreas Schildbach wrote:
>>>> Indeed. And users were crying for mBTC. Nobody was asking for
>>>> ?BTC.
>>>> 
>>>> I must admit I was not aware if this thread. I just watched
>>>> other wallets and at some point decided its time to switch to
>>>> mBTC.
>>>> 
>>>> 
>>>> On 03/13/2014 02:31 PM, Mike Hearn wrote:
>>>>> The standard has become mBTC and that's what was adopted.
>>>>> It's too late to try and sway this on a mailing list thread
>>>>> now.
>>>>> 
>>>>> 
>>>>> On Thu, Mar 13, 2014 at 2:29 PM, Gary Rowe
>>>>> <g.rowe at froot.co.uk <mailto:g.rowe at froot.co.uk>> wrote:
>>>>> 
>>>>> The MultiBit HD view is that this is a locale-sensitive
>>>>> presentation issue. As a result we offer a simple
>>>>> configuration panel giving pretty much every possible
>>>>> combination: icon, m+icon,  ?+icon, BTC, mBTC,  ?BTC, XBT,
>>>>> mXBT,  ?XBT, sat along with settings for leading/trailing
>>>>> symbol, commas, spaces and points. This allows anyone to
>>>>> customise to meet their own needs beyond the offered default.
>>>>> 
>>>>> 
>>>>> We apply the NIST guidelines for representation of SI unit
>>>>> symbols (i.e no conversion to native language, no RTL giving
>>>>> icon+m etc).
>>>>> 
>>>>> Right now MultiBit HD is configured to use m+icon taken from
>>>>> the Font Awesome icon set. However reading earlier posts it
>>>>> seems that ?+icon is more sensible.
>>>>> 
>>>>> Let us know what you'd like.
>>>>> 
>>>>> Links: m+icon screenshot: http://imgur.com/a/WCDoG Font
>>>>> Awesome icon:
>>>>> http://fortawesome.github.io/Font-Awesome/icon/btc/ NIST SI
>>>>> guidelines: http://physics.nist.gov/Pubs/SP811/sec07.html
>>>>> 
>>>>> 
>>>>> On 13 March 2014 12:56, Jeff Garzik <jgarzik at bitpay.com 
>>>>> <mailto:jgarzik at bitpay.com>> wrote:
>>>>> 
>>>>> Resurrecting this topic.  Bitcoin Wallet moved to mBTC
>>>>> several weeks ago, which was disappointing -- it sounded like
>>>>> the consensus was uBTC, and moving to uBTC later --which will
>>>>> happen-- may result in additional user confusion, thanks to
>>>>> yet another decimal place transition.
>>>>> 
>>>>> 
>>>>> 
>>>>> On Sun, Nov 17, 2013 at 9:28 PM, Wendell <w at grabhive.com 
>>>>> <mailto:w at grabhive.com>> wrote:
>>>>>> We're with uBTC too. Been waiting for the signal to do
>>>>>> this,
>>>>> let's do it right after the fee system is improved.
>>>>>> 
>>>>>> -wendell
>>>>>> 
>>>>>> grabhive.com <http://grabhive.com> |
>>>>>> twitter.com/hivewallet
>>>>> <http://twitter.com/hivewallet> | gpg: 6C0C9411
>>>>>> 
>>>>>> On Nov 15, 2013, at 6:03 AM, Jeff Garzik wrote:
>>>>>> 
>>>>>>> Go straight to uBTC. Humans and existing computer
>>>>>>> systems
>>>>> handle numbers to
>>>>>>> the left of the decimals just fine (HK Dollars, Yen).
>>>>>>> The
>>>>> opposite is
>>>>>>> untrue (QuickBooks really does not like 3+ decimal
>>>>>>> places).
>>>>>> 
>>>>> 
>>>>> 
>>>>> 
>>>>> -- Jeff Garzik Bitcoin core developer and open source
>>>>> evangelist BitPay, Inc.      https://bitpay.com/
>>>>> 
>>>>> ------------------------------------------------------------------------------
>>>>> 
>>>>> 
> Learn Graph Databases - Download FREE O'Reilly Book
>>>>> "Graph Databases" is the definitive new guide to graph
>>>>> databases and their applications. Written by three acclaimed
>>>>> leaders in the field, this first edition is now available.
>>>>> Download your free book today! 
>>>>> http://p.sf.net/sfu/13534_NeoTech 
>>>>> _______________________________________________ 
>>>>> Bitcoin-development mailing list 
>>>>> Bitcoin-development at lists.sourceforge.net 
>>>>> <mailto:Bitcoin-development at lists.sourceforge.net> 
>>>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>>>> 
>>>>> 
>>>>> 
>>>>> 
>>>>> 
> ------------------------------------------------------------------------------
>>>>> Learn Graph Databases - Download FREE O'Reilly Book "Graph
>>>>> Databases" is the definitive new guide to graph databases
>>>>> and their applications. Written by three acclaimed leaders in
>>>>> the field, this first edition is now available. Download your
>>>>> free book today! http://p.sf.net/sfu/13534_NeoTech 
>>>>> _______________________________________________ 
>>>>> Bitcoin-development mailing list 
>>>>> Bitcoin-development at lists.sourceforge.net 
>>>>> <mailto:Bitcoin-development at lists.sourceforge.net> 
>>>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>>>> 
>>>>> 
>>>>> 
>>>>> 
>>>>> 
>>>>> 
> ------------------------------------------------------------------------------
>>>>> Learn Graph Databases - Download FREE O'Reilly Book "Graph
>>>>> Databases" is the definitive new guide to graph databases and
>>>>> their applications. Written by three acclaimed leaders in the
>>>>> field, this first edition is now available. Download your
>>>>> free book today! http://p.sf.net/sfu/13534_NeoTech
>>>>> 
>>>>> 
>>>>> 
>>>>> _______________________________________________ 
>>>>> Bitcoin-development mailing list 
>>>>> Bitcoin-development at lists.sourceforge.net 
>>>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>>>> 
>>>> 
>>>> 
>>>> 
>>>> 
>>>>> 
> ------------------------------------------------------------------------------
>>>> Learn Graph Databases - Download FREE O'Reilly Book "Graph
>>>> Databases" is the definitive new guide to graph databases and
>>>> their applications. Written by three acclaimed leaders in the
>>>> field, this first edition is now available. Download your free
>>>> book today! http://p.sf.net/sfu/13534_NeoTech 
>>>> _______________________________________________ 
>>>> Bitcoin-development mailing list 
>>>> Bitcoin-development at lists.sourceforge.net 
>>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>>> 
>>> 
>>> 
>>> 
>>> 
>>>> 
> ------------------------------------------------------------------------------
>>> Learn Graph Databases - Download FREE O'Reilly Book "Graph
>>> Databases" is the definitive new guide to graph databases and
>>> their applications. Written by three acclaimed leaders in the
>>> field, this first edition is now available. Download your free
>>> book today! http://p.sf.net/sfu/13534_NeoTech 
>>> _______________________________________________ 
>>> Bitcoin-development mailing list 
>>> Bitcoin-development at lists.sourceforge.net 
>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>> 
>> 
>> 
>> ------------------------------------------------------------------------------
>> 
>> 
> Learn Graph Databases - Download FREE O'Reilly Book
>> "Graph Databases" is the definitive new guide to graph databases
>> and their applications. Written by three acclaimed leaders in the
>> field, this first edition is now available. Download your free book
>> today! http://p.sf.net/sfu/13534_NeoTech
>> 
>> 
>> 
>> _______________________________________________ Bitcoin-development
>> mailing list Bitcoin-development at lists.sourceforge.net 
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>> 
> 
> 
> 
> ------------------------------------------------------------------------------
> Learn Graph Databases - Download FREE O'Reilly Book
> "Graph Databases" is the definitive new guide to graph databases and their
> applications. Written by three acclaimed leaders in the field,
> this first edition is now available. Download your free book today!
> http://p.sf.net/sfu/13534_NeoTech
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140314/1777aac4/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 495 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140314/1777aac4/attachment.sig>

From andreas at schildbach.de  Fri Mar 14 15:02:59 2014
From: andreas at schildbach.de (Andreas Schildbach)
Date: Fri, 14 Mar 2014 16:02:59 +0100
Subject: [Bitcoin-development] moving the default display to mbtc
In-Reply-To: <A1A0E432-3E76-429C-AADF-083A0041C34B@bitsofproof.com>
References: <CAKaEYhK4oXH3hB7uS3=AEkA6r0VB5OYyTua+LOP18rq+rYajHg@mail.gmail.com>	<52852C2D.9020103@gmail.com>	<52853D8A.6010501@monetize.io>	<CAJHLa0M6CkoDbD6FFixf9-mmhug7DvehSWCJ+EHWVxUDuwNiBg@mail.gmail.com>	<EE02A310-8604-4811-B2D0-FC32C72C20F3@grabhive.com>	<CAJHLa0OMcTCgGESi-F4jT2NA3FyCeMYbD_52j47t3keEYBfK8g@mail.gmail.com>	<CAKm8k+3J9Po4xQn9LhTQrnrGCvG36-kLCjWPX4kmd-c7h+LujA@mail.gmail.com>	<CANEZrP1VbQPapKJCLcE0+vpK0xac6D6JxRGKdagPVchfZjpUmQ@mail.gmail.com>	<lfscfd$3cs$1@ger.gmane.org>	<lfv2an$iv3$1@ger.gmane.org>	<362072F0-1EA8-4474-AE26-4691C852A22C@bitsofproof.com>	<lfv4tm$lpg$1@ger.gmane.org>
	<A1A0E432-3E76-429C-AADF-083A0041C34B@bitsofproof.com>
Message-ID: <lfv5ml$vl8$1@ger.gmane.org>

By that definition 3.56 is a price. Maybe I misunderstood you and you're
lobbying for mBTC?


On 03/14/2014 03:57 PM, Tamas Blummer wrote:
> you miss the point Andreas. It is not about the magnitude but about
> the form of a price.
> 
> A number with no decimals or with two decimals is percieved as a
> price in some currency. 
> 
> A number with more than two decimals is just not percieved as a price
> but as a geeky something that you rather convert to local currency.
> 
> Tamas Blummer
> Bits of Proof
> 
> On 14.03.2014, at 15:49, Andreas Schildbach <andreas at schildbach.de
> <mailto:andreas at schildbach.de>> wrote:
> 
>> How much do you pay for an Espresso in your local currency?
>>
>> At least for the Euro and the Dollar, mBTC 3.56 is very close to what
>> people would expect. Certainly more familiar than ?BTC 3558 or BTC
>> 0.003578.
>>
>> Anyway, I was just sharing real-world experience: nobody is confused.
>>
>>
>> On 03/14/2014 03:14 PM, Tamas Blummer wrote:
>>> You give them a hard to interpret thing like mBTC and then wonder
>>> why they rather look at local currency. Because the choices you
>>> gave them are bad.
>>>
>>> I think Bitcoin would have a better chance to be percieved as a
>>> currency of its own if it had prices and fractions like currencies
>>> do.
>>>
>>> 3.558 mBTC or 0.003578 BTC will never be as accepted as 3558 bits
>>> would be.
>>>
>>>
>>> Tamas Blummer Bits of Proof
>>>
>>> On 14.03.2014, at 15:05, Andreas Schildbach <andreas at schildbach.de
>>> <mailto:andreas at schildbach.de>>
>>> wrote:
>>>
>>>> btw. None of Bitcoin Wallet's users complained about confusion
>>>> because of the mBTC switch. In contrast, I get many mails and
>>>> questions if exchange rates happen to differ by >10%.
>>>>
>>>> I suspect nobody looks at the Bitcoin price. It's the amount in
>>>> local currency that matters to the users.
>>>>
>>>>
>>>> On 03/13/2014 02:40 PM, Andreas Schildbach wrote:
>>>>> Indeed. And users were crying for mBTC. Nobody was asking for
>>>>> ?BTC.
>>>>>
>>>>> I must admit I was not aware if this thread. I just watched
>>>>> other wallets and at some point decided its time to switch to
>>>>> mBTC.
>>>>>
>>>>>
>>>>> On 03/13/2014 02:31 PM, Mike Hearn wrote:
>>>>>> The standard has become mBTC and that's what was adopted.
>>>>>> It's too late to try and sway this on a mailing list thread
>>>>>> now.
>>>>>>
>>>>>>
>>>>>> On Thu, Mar 13, 2014 at 2:29 PM, Gary Rowe
>>>>>> <g.rowe at froot.co.uk <mailto:g.rowe at froot.co.uk>
>>>>>> <mailto:g.rowe at froot.co.uk>> wrote:
>>>>>>
>>>>>> The MultiBit HD view is that this is a locale-sensitive
>>>>>> presentation issue. As a result we offer a simple
>>>>>> configuration panel giving pretty much every possible
>>>>>> combination: icon, m+icon,  ?+icon, BTC, mBTC,  ?BTC, XBT,
>>>>>> mXBT,  ?XBT, sat along with settings for leading/trailing
>>>>>> symbol, commas, spaces and points. This allows anyone to
>>>>>> customise to meet their own needs beyond the offered default.
>>>>>>
>>>>>>
>>>>>> We apply the NIST guidelines for representation of SI unit
>>>>>> symbols (i.e no conversion to native language, no RTL giving
>>>>>> icon+m etc).
>>>>>>
>>>>>> Right now MultiBit HD is configured to use m+icon taken from
>>>>>> the Font Awesome icon set. However reading earlier posts it
>>>>>> seems that ?+icon is more sensible.
>>>>>>
>>>>>> Let us know what you'd like.
>>>>>>
>>>>>> Links: m+icon screenshot: http://imgur.com/a/WCDoG Font
>>>>>> Awesome icon:
>>>>>> http://fortawesome.github.io/Font-Awesome/icon/btc/ NIST SI
>>>>>> guidelines: http://physics.nist.gov/Pubs/SP811/sec07.html
>>>>>>
>>>>>>
>>>>>> On 13 March 2014 12:56, Jeff Garzik <jgarzik at bitpay.com
>>>>>> <mailto:jgarzik at bitpay.com>
>>>>>> <mailto:jgarzik at bitpay.com>> wrote:
>>>>>>
>>>>>> Resurrecting this topic.  Bitcoin Wallet moved to mBTC
>>>>>> several weeks ago, which was disappointing -- it sounded like
>>>>>> the consensus was uBTC, and moving to uBTC later --which will
>>>>>> happen-- may result in additional user confusion, thanks to
>>>>>> yet another decimal place transition.





From me.thejackson4 at gmail.com  Fri Mar 14 15:10:09 2014
From: me.thejackson4 at gmail.com (Tyler)
Date: Fri, 14 Mar 2014 11:10:09 -0400
Subject: [Bitcoin-development] moving the default display to mbtc
In-Reply-To: <362072F0-1EA8-4474-AE26-4691C852A22C@bitsofproof.com>
References: <CAKaEYhK4oXH3hB7uS3=AEkA6r0VB5OYyTua+LOP18rq+rYajHg@mail.gmail.com>
	<52852C2D.9020103@gmail.com> <52853D8A.6010501@monetize.io>
	<CAJHLa0M6CkoDbD6FFixf9-mmhug7DvehSWCJ+EHWVxUDuwNiBg@mail.gmail.com>
	<EE02A310-8604-4811-B2D0-FC32C72C20F3@grabhive.com>
	<CAJHLa0OMcTCgGESi-F4jT2NA3FyCeMYbD_52j47t3keEYBfK8g@mail.gmail.com>
	<CAKm8k+3J9Po4xQn9LhTQrnrGCvG36-kLCjWPX4kmd-c7h+LujA@mail.gmail.com>
	<CANEZrP1VbQPapKJCLcE0+vpK0xac6D6JxRGKdagPVchfZjpUmQ@mail.gmail.com>
	<lfscfd$3cs$1@ger.gmane.org> <lfv2an$iv3$1@ger.gmane.org>
	<362072F0-1EA8-4474-AE26-4691C852A22C@bitsofproof.com>
Message-ID: <CACnwoLJFv=B8qZ4BPjenGyMKZrv1Q9u0+Attd9ZXfVoL_sv8XA@mail.gmail.com>

>You give them a hard to interpret thing like mBTC and then wonder why
>they rather look at local currency. Because the choices you gave them are
bad.

I don't think this is particularly true. The options people are given are
all good in this case and all have their merits. The reason people are
converting to fiat using the exchange rates is because right now the
exchanges define its value. People have no intuitive idea that a loaf of
bread cost X BTC. This isn't going to change anytime soon.

In my opinion it doesn't really matter what denomination you use.  If we
switched to micro we would have 3 extra digits we would be working with on
a daily basis which have very little significance. But thats just a western
point of view and people could adapt.

The real problems are that millibitcoin and microbitcoin are hard to say
loud and the both start with 'm' not too many people have a mu key on their
keyboard. Even Bitcoin is not nice to say. it has two very hard sounds
together in the middle of the word.

It would be far easier if we had a system like one ham is 1000 bits, one
bacon is 1000 hams.

Clearly a ridiculous example but try saying and you'll realize how much
easier it is to describe things not that they are clearly differentiable
words that are easy to say.

I like bits as the lowest one. But its not something you can decide. The
common names will have to develop naturally and in all likelihood will
differ between regions (I know I know we must keep it standardized but what
might be easy to say in North America probably isn't as easy elsewhere.)

So give people the options (Let them transact on their own terms). I would
say restrict it to BTC milli and micro in the settings that will help nudge
people towards even different regions simply having different names for the
same quantity as opposed to some place having 10 hams as a pixie.


On 14 March 2014 10:14, Tamas Blummer <tamas at bitsofproof.com> wrote:

> You give them a hard to interpret thing like mBTC and then wonder why
> they rather look at local currency. Because the choices you gave them are
> bad.
>
> I think Bitcoin would have a better chance to be percieved as a currency
> of its own if it had prices and fractions like currencies do.
>
> 3.558 mBTC or 0.003578 BTC will never be as accepted as 3558 bits would be.
>
>
> Tamas Blummer
> Bits of Proof
>
> On 14.03.2014, at 15:05, Andreas Schildbach <andreas at schildbach.de> wrote:
>
> > btw. None of Bitcoin Wallet's users complained about confusion because
> > of the mBTC switch. In contrast, I get many mails and questions if
> > exchange rates happen to differ by >10%.
> >
> > I suspect nobody looks at the Bitcoin price. It's the amount in local
> > currency that matters to the users.
> >
> >
> > On 03/13/2014 02:40 PM, Andreas Schildbach wrote:
> >> Indeed. And users were crying for mBTC. Nobody was asking for ?BTC.
> >>
> >> I must admit I was not aware if this thread. I just watched other
> >> wallets and at some point decided its time to switch to mBTC.
> >>
> >>
> >> On 03/13/2014 02:31 PM, Mike Hearn wrote:
> >>> The standard has become mBTC and that's what was adopted. It's too late
> >>> to try and sway this on a mailing list thread now.
> >>>
> >>>
> >>> On Thu, Mar 13, 2014 at 2:29 PM, Gary Rowe <g.rowe at froot.co.uk
> >>> <mailto:g.rowe at froot.co.uk>> wrote:
> >>>
> >>>    The MultiBit HD view is that this is a locale-sensitive presentation
> >>>    issue. As a result we offer a simple configuration panel giving
> >>>    pretty much every possible combination: icon, m+icon,  ?+icon, BTC,
> >>>    mBTC,  ?BTC, XBT, mXBT,  ?XBT, sat along with settings for
> >>>    leading/trailing symbol, commas, spaces and points. This allows
> >>>    anyone to customise to meet their own needs beyond the offered
> default.
> >>>
> >>>    We apply the NIST guidelines for representation of SI unit symbols
> >>>    (i.e no conversion to native language, no RTL giving icon+m etc).
> >>>
> >>>    Right now MultiBit HD is configured to use m+icon taken from the
> >>>    Font Awesome icon set. However reading earlier posts it seems
> >>>    that ?+icon is more sensible.
> >>>
> >>>    Let us know what you'd like.
> >>>
> >>>    Links:
> >>>    m+icon screenshot: http://imgur.com/a/WCDoG
> >>>    Font Awesome icon:
> http://fortawesome.github.io/Font-Awesome/icon/btc/
> >>>    NIST SI guidelines: http://physics.nist.gov/Pubs/SP811/sec07.html
> >>>
> >>>
> >>>    On 13 March 2014 12:56, Jeff Garzik <jgarzik at bitpay.com
> >>>    <mailto:jgarzik at bitpay.com>> wrote:
> >>>
> >>>        Resurrecting this topic.  Bitcoin Wallet moved to mBTC several
> weeks
> >>>        ago, which was disappointing -- it sounded like the consensus
> was
> >>>        uBTC, and moving to uBTC later --which will happen-- may result
> in
> >>>        additional user confusion, thanks to yet another decimal place
> >>>        transition.
> >>>
> >>>
> >>>
> >>>        On Sun, Nov 17, 2013 at 9:28 PM, Wendell <w at grabhive.com
> >>>        <mailto:w at grabhive.com>> wrote:
> >>>> We're with uBTC too. Been waiting for the signal to do this,
> >>>        let's do it right after the fee system is improved.
> >>>>
> >>>> -wendell
> >>>>
> >>>> grabhive.com <http://grabhive.com> | twitter.com/hivewallet
> >>>        <http://twitter.com/hivewallet> | gpg: 6C0C9411
> >>>>
> >>>> On Nov 15, 2013, at 6:03 AM, Jeff Garzik wrote:
> >>>>
> >>>>> Go straight to uBTC. Humans and existing computer systems
> >>>        handle numbers to
> >>>>> the left of the decimals just fine (HK Dollars, Yen). The
> >>>        opposite is
> >>>>> untrue (QuickBooks really does not like 3+ decimal places).
> >>>>
> >>>
> >>>
> >>>
> >>>        --
> >>>        Jeff Garzik
> >>>        Bitcoin core developer and open source evangelist
> >>>        BitPay, Inc.      https://bitpay.com/
> >>>
> >>>
>  ------------------------------------------------------------------------------
> >>>        Learn Graph Databases - Download FREE O'Reilly Book
> >>>        "Graph Databases" is the definitive new guide to graph databases
> >>>        and their
> >>>        applications. Written by three acclaimed leaders in the field,
> >>>        this first edition is now available. Download your free book
> today!
> >>>        http://p.sf.net/sfu/13534_NeoTech
> >>>        _______________________________________________
> >>>        Bitcoin-development mailing list
> >>>        Bitcoin-development at lists.sourceforge.net
> >>>        <mailto:Bitcoin-development at lists.sourceforge.net>
> >>>
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> >>>
> >>>
> >>>
> >>>
>  ------------------------------------------------------------------------------
> >>>    Learn Graph Databases - Download FREE O'Reilly Book
> >>>    "Graph Databases" is the definitive new guide to graph databases and
> >>>    their
> >>>    applications. Written by three acclaimed leaders in the field,
> >>>    this first edition is now available. Download your free book today!
> >>>    http://p.sf.net/sfu/13534_NeoTech
> >>>    _______________________________________________
> >>>    Bitcoin-development mailing list
> >>>    Bitcoin-development at lists.sourceforge.net
> >>>    <mailto:Bitcoin-development at lists.sourceforge.net>
> >>>    https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> >>>
> >>>
> >>>
> >>>
> >>>
> ------------------------------------------------------------------------------
> >>> Learn Graph Databases - Download FREE O'Reilly Book
> >>> "Graph Databases" is the definitive new guide to graph databases and
> their
> >>> applications. Written by three acclaimed leaders in the field,
> >>> this first edition is now available. Download your free book today!
> >>> http://p.sf.net/sfu/13534_NeoTech
> >>>
> >>>
> >>>
> >>> _______________________________________________
> >>> Bitcoin-development mailing list
> >>> Bitcoin-development at lists.sourceforge.net
> >>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> >>>
> >>
> >>
> >>
> >>
> ------------------------------------------------------------------------------
> >> Learn Graph Databases - Download FREE O'Reilly Book
> >> "Graph Databases" is the definitive new guide to graph databases and
> their
> >> applications. Written by three acclaimed leaders in the field,
> >> this first edition is now available. Download your free book today!
> >> http://p.sf.net/sfu/13534_NeoTech
> >> _______________________________________________
> >> Bitcoin-development mailing list
> >> Bitcoin-development at lists.sourceforge.net
> >> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> >>
> >
> >
> >
> >
> ------------------------------------------------------------------------------
> > Learn Graph Databases - Download FREE O'Reilly Book
> > "Graph Databases" is the definitive new guide to graph databases and
> their
> > applications. Written by three acclaimed leaders in the field,
> > this first edition is now available. Download your free book today!
> > http://p.sf.net/sfu/13534_NeoTech
> > _______________________________________________
> > Bitcoin-development mailing list
> > Bitcoin-development at lists.sourceforge.net
> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
>
> ------------------------------------------------------------------------------
> Learn Graph Databases - Download FREE O'Reilly Book
> "Graph Databases" is the definitive new guide to graph databases and their
> applications. Written by three acclaimed leaders in the field,
> this first edition is now available. Download your free book today!
> http://p.sf.net/sfu/13534_NeoTech
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>


-- 
Tyler Jackson
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140314/a867efc9/attachment.html>

From tamas at bitsofproof.com  Fri Mar 14 15:12:45 2014
From: tamas at bitsofproof.com (Tamas Blummer)
Date: Fri, 14 Mar 2014 16:12:45 +0100
Subject: [Bitcoin-development] moving the default display to mbtc
In-Reply-To: <lfv5ml$vl8$1@ger.gmane.org>
References: <CAKaEYhK4oXH3hB7uS3=AEkA6r0VB5OYyTua+LOP18rq+rYajHg@mail.gmail.com>	<52852C2D.9020103@gmail.com>	<52853D8A.6010501@monetize.io>	<CAJHLa0M6CkoDbD6FFixf9-mmhug7DvehSWCJ+EHWVxUDuwNiBg@mail.gmail.com>	<EE02A310-8604-4811-B2D0-FC32C72C20F3@grabhive.com>	<CAJHLa0OMcTCgGESi-F4jT2NA3FyCeMYbD_52j47t3keEYBfK8g@mail.gmail.com>	<CAKm8k+3J9Po4xQn9LhTQrnrGCvG36-kLCjWPX4kmd-c7h+LujA@mail.gmail.com>	<CANEZrP1VbQPapKJCLcE0+vpK0xac6D6JxRGKdagPVchfZjpUmQ@mail.gmail.com>	<lfscfd$3cs$1@ger.gmane.org>	<lfv2an$iv3$1@ger.gmane.org>	<362072F0-1EA8-4474-AE26-4691C852A22C@bitsofproof.com>	<lfv4tm$lpg$1@ger.gmane.org>
	<A1A0E432-3E76-429C-AADF-083A0041C34B@bitsofproof.com>
	<lfv5ml$vl8$1@ger.gmane.org>
Message-ID: <A34BC75F-5077-48B9-AB5A-225437838BC2@bitsofproof.com>

I think you want to misunderstand me Andreas.

It is astonishing arrogance to define the units because we in Bitcoin are used to
some wierd notation and ignore that the vast majority of population and 
 financial software in existence does not have a notion of prices
with more than two decimals.

With 1 bit = 100 satoshi, we would solve this problem for good. 
Instead mBTC is a confusing step in-between.

Tamas Blummer
http://bitsofproof.com

On 14.03.2014, at 16:02, Andreas Schildbach <andreas at schildbach.de> wrote:

> By that definition 3.56 is a price. Maybe I misunderstood you and you're
> lobbying for mBTC?
> 
> 
> On 03/14/2014 03:57 PM, Tamas Blummer wrote:
>> you miss the point Andreas. It is not about the magnitude but about
>> the form of a price.
>> 
>> A number with no decimals or with two decimals is percieved as a
>> price in some currency. 
>> 
>> A number with more than two decimals is just not percieved as a price
>> but as a geeky something that you rather convert to local currency.
>> 
>> Tamas Blummer
>> Bits of Proof
>> 
>> On 14.03.2014, at 15:49, Andreas Schildbach <andreas at schildbach.de
>> <mailto:andreas at schildbach.de>> wrote:
>> 
>>> How much do you pay for an Espresso in your local currency?
>>> 
>>> At least for the Euro and the Dollar, mBTC 3.56 is very close to what
>>> people would expect. Certainly more familiar than ?BTC 3558 or BTC
>>> 0.003578.
>>> 
>>> Anyway, I was just sharing real-world experience: nobody is confused.
>>> 
>>> 
>>> On 03/14/2014 03:14 PM, Tamas Blummer wrote:
>>>> You give them a hard to interpret thing like mBTC and then wonder
>>>> why they rather look at local currency. Because the choices you
>>>> gave them are bad.
>>>> 
>>>> I think Bitcoin would have a better chance to be percieved as a
>>>> currency of its own if it had prices and fractions like currencies
>>>> do.
>>>> 
>>>> 3.558 mBTC or 0.003578 BTC will never be as accepted as 3558 bits
>>>> would be.
>>>> 
>>>> 
>>>> Tamas Blummer Bits of Proof
>>>> 
>>>> On 14.03.2014, at 15:05, Andreas Schildbach <andreas at schildbach.de
>>>> <mailto:andreas at schildbach.de>>
>>>> wrote:
>>>> 
>>>>> btw. None of Bitcoin Wallet's users complained about confusion
>>>>> because of the mBTC switch. In contrast, I get many mails and
>>>>> questions if exchange rates happen to differ by >10%.
>>>>> 
>>>>> I suspect nobody looks at the Bitcoin price. It's the amount in
>>>>> local currency that matters to the users.
>>>>> 
>>>>> 
>>>>> On 03/13/2014 02:40 PM, Andreas Schildbach wrote:
>>>>>> Indeed. And users were crying for mBTC. Nobody was asking for
>>>>>> ?BTC.
>>>>>> 
>>>>>> I must admit I was not aware if this thread. I just watched
>>>>>> other wallets and at some point decided its time to switch to
>>>>>> mBTC.
>>>>>> 
>>>>>> 
>>>>>> On 03/13/2014 02:31 PM, Mike Hearn wrote:
>>>>>>> The standard has become mBTC and that's what was adopted.
>>>>>>> It's too late to try and sway this on a mailing list thread
>>>>>>> now.
>>>>>>> 
>>>>>>> 
>>>>>>> On Thu, Mar 13, 2014 at 2:29 PM, Gary Rowe
>>>>>>> <g.rowe at froot.co.uk <mailto:g.rowe at froot.co.uk>
>>>>>>> <mailto:g.rowe at froot.co.uk>> wrote:
>>>>>>> 
>>>>>>> The MultiBit HD view is that this is a locale-sensitive
>>>>>>> presentation issue. As a result we offer a simple
>>>>>>> configuration panel giving pretty much every possible
>>>>>>> combination: icon, m+icon,  ?+icon, BTC, mBTC,  ?BTC, XBT,
>>>>>>> mXBT,  ?XBT, sat along with settings for leading/trailing
>>>>>>> symbol, commas, spaces and points. This allows anyone to
>>>>>>> customise to meet their own needs beyond the offered default.
>>>>>>> 
>>>>>>> 
>>>>>>> We apply the NIST guidelines for representation of SI unit
>>>>>>> symbols (i.e no conversion to native language, no RTL giving
>>>>>>> icon+m etc).
>>>>>>> 
>>>>>>> Right now MultiBit HD is configured to use m+icon taken from
>>>>>>> the Font Awesome icon set. However reading earlier posts it
>>>>>>> seems that ?+icon is more sensible.
>>>>>>> 
>>>>>>> Let us know what you'd like.
>>>>>>> 
>>>>>>> Links: m+icon screenshot: http://imgur.com/a/WCDoG Font
>>>>>>> Awesome icon:
>>>>>>> http://fortawesome.github.io/Font-Awesome/icon/btc/ NIST SI
>>>>>>> guidelines: http://physics.nist.gov/Pubs/SP811/sec07.html
>>>>>>> 
>>>>>>> 
>>>>>>> On 13 March 2014 12:56, Jeff Garzik <jgarzik at bitpay.com
>>>>>>> <mailto:jgarzik at bitpay.com>
>>>>>>> <mailto:jgarzik at bitpay.com>> wrote:
>>>>>>> 
>>>>>>> Resurrecting this topic.  Bitcoin Wallet moved to mBTC
>>>>>>> several weeks ago, which was disappointing -- it sounded like
>>>>>>> the consensus was uBTC, and moving to uBTC later --which will
>>>>>>> happen-- may result in additional user confusion, thanks to
>>>>>>> yet another decimal place transition.
> 
> 
> 
> ------------------------------------------------------------------------------
> Learn Graph Databases - Download FREE O'Reilly Book
> "Graph Databases" is the definitive new guide to graph databases and their
> applications. Written by three acclaimed leaders in the field,
> this first edition is now available. Download your free book today!
> http://p.sf.net/sfu/13534_NeoTech
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140314/605b143c/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 495 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140314/605b143c/attachment.sig>

From andreas at schildbach.de  Fri Mar 14 15:30:00 2014
From: andreas at schildbach.de (Andreas Schildbach)
Date: Fri, 14 Mar 2014 16:30:00 +0100
Subject: [Bitcoin-development] moving the default display to mbtc
In-Reply-To: <A34BC75F-5077-48B9-AB5A-225437838BC2@bitsofproof.com>
References: <CAKaEYhK4oXH3hB7uS3=AEkA6r0VB5OYyTua+LOP18rq+rYajHg@mail.gmail.com>	<52852C2D.9020103@gmail.com>	<52853D8A.6010501@monetize.io>	<CAJHLa0M6CkoDbD6FFixf9-mmhug7DvehSWCJ+EHWVxUDuwNiBg@mail.gmail.com>	<EE02A310-8604-4811-B2D0-FC32C72C20F3@grabhive.com>	<CAJHLa0OMcTCgGESi-F4jT2NA3FyCeMYbD_52j47t3keEYBfK8g@mail.gmail.com>	<CAKm8k+3J9Po4xQn9LhTQrnrGCvG36-kLCjWPX4kmd-c7h+LujA@mail.gmail.com>	<CANEZrP1VbQPapKJCLcE0+vpK0xac6D6JxRGKdagPVchfZjpUmQ@mail.gmail.com>	<lfscfd$3cs$1@ger.gmane.org>	<lfv2an$iv3$1@ger.gmane.org>	<362072F0-1EA8-4474-AE26-4691C852A22C@bitsofproof.com>	<lfv4tm$lpg$1@ger.gmane.org>	<A1A0E432-3E76-429C-AADF-083A0041C34B@bitsofproof.com>	<lfv5ml$vl8$1@ger.gmane.org>
	<A34BC75F-5077-48B9-AB5A-225437838BC2@bitsofproof.com>
Message-ID: <lfv799$lsa$1@ger.gmane.org>

I don't know about financial software.

I really don't get what you mean by weird notation? Bitcoin Wallet is
made for ordinary users. They are used to real-world prices like EUR
1.63 / USD 2.26 (that would be the Espresso example). How can mBTC 3.56
be weird to these people?

Granted, there are exceptions, like in Japan. Maybe those would be
better served with ?BTC as default. Maybe. Up to now, outside of this
mailing list nobody requested ?BTC. Then again, Japanese userbase is
tiny compared to US.


On 03/14/2014 04:12 PM, Tamas Blummer wrote:
> I think you want to misunderstand me Andreas.
> 
> It is astonishing arrogance to define the units because we in Bitcoin
> are used to
> some wierd notation and ignore that the vast majority of population and 
>  financial software in existence does not have a notion of prices
> with more than two decimals.
> 
> With 1 bit = 100 satoshi, we would solve this problem for good. 
> Instead mBTC is a confusing step in-between.
> 
> Tamas Blummer
> http://bitsofproof.com
> 
> On 14.03.2014, at 16:02, Andreas Schildbach <andreas at schildbach.de
> <mailto:andreas at schildbach.de>> wrote:
> 
>> By that definition 3.56 is a price. Maybe I misunderstood you and you're
>> lobbying for mBTC?
>>
>>
>> On 03/14/2014 03:57 PM, Tamas Blummer wrote:
>>> you miss the point Andreas. It is not about the magnitude but about
>>> the form of a price.
>>>
>>> A number with no decimals or with two decimals is percieved as a
>>> price in some currency.
>>>
>>> A number with more than two decimals is just not percieved as a price
>>> but as a geeky something that you rather convert to local currency.
>>>
>>> Tamas Blummer
>>> Bits of Proof
>>>
>>> On 14.03.2014, at 15:49, Andreas Schildbach <andreas at schildbach.de
>>> <mailto:andreas at schildbach.de>
>>> <mailto:andreas at schildbach.de>> wrote:
>>>
>>>> How much do you pay for an Espresso in your local currency?
>>>>
>>>> At least for the Euro and the Dollar, mBTC 3.56 is very close to what
>>>> people would expect. Certainly more familiar than ?BTC 3558 or BTC
>>>> 0.003578.
>>>>
>>>> Anyway, I was just sharing real-world experience: nobody is confused.
>>>>
>>>>
>>>> On 03/14/2014 03:14 PM, Tamas Blummer wrote:
>>>>> You give them a hard to interpret thing like mBTC and then wonder
>>>>> why they rather look at local currency. Because the choices you
>>>>> gave them are bad.
>>>>>
>>>>> I think Bitcoin would have a better chance to be percieved as a
>>>>> currency of its own if it had prices and fractions like currencies
>>>>> do.
>>>>>
>>>>> 3.558 mBTC or 0.003578 BTC will never be as accepted as 3558 bits
>>>>> would be.
>>>>>
>>>>>
>>>>> Tamas Blummer Bits of Proof
>>>>>
>>>>> On 14.03.2014, at 15:05, Andreas Schildbach <andreas at schildbach.de
>>>>> <mailto:andreas at schildbach.de>
>>>>> <mailto:andreas at schildbach.de>>
>>>>> wrote:
>>>>>
>>>>>> btw. None of Bitcoin Wallet's users complained about confusion
>>>>>> because of the mBTC switch. In contrast, I get many mails and
>>>>>> questions if exchange rates happen to differ by >10%.
>>>>>>
>>>>>> I suspect nobody looks at the Bitcoin price. It's the amount in
>>>>>> local currency that matters to the users.
>>>>>>
>>>>>>
>>>>>> On 03/13/2014 02:40 PM, Andreas Schildbach wrote:
>>>>>>> Indeed. And users were crying for mBTC. Nobody was asking for
>>>>>>> ?BTC.
>>>>>>>
>>>>>>> I must admit I was not aware if this thread. I just watched
>>>>>>> other wallets and at some point decided its time to switch to
>>>>>>> mBTC.
>>>>>>>
>>>>>>>
>>>>>>> On 03/13/2014 02:31 PM, Mike Hearn wrote:
>>>>>>>> The standard has become mBTC and that's what was adopted.
>>>>>>>> It's too late to try and sway this on a mailing list thread
>>>>>>>> now.
>>>>>>>>
>>>>>>>>
>>>>>>>> On Thu, Mar 13, 2014 at 2:29 PM, Gary Rowe
>>>>>>>> <g.rowe at froot.co.uk <mailto:g.rowe at froot.co.uk>
>>>>>>>> <mailto:g.rowe at froot.co.uk>
>>>>>>>> <mailto:g.rowe at froot.co.uk>> wrote:
>>>>>>>>
>>>>>>>> The MultiBit HD view is that this is a locale-sensitive
>>>>>>>> presentation issue. As a result we offer a simple
>>>>>>>> configuration panel giving pretty much every possible
>>>>>>>> combination: icon, m+icon,  ?+icon, BTC, mBTC,  ?BTC, XBT,
>>>>>>>> mXBT,  ?XBT, sat along with settings for leading/trailing
>>>>>>>> symbol, commas, spaces and points. This allows anyone to
>>>>>>>> customise to meet their own needs beyond the offered default.
>>>>>>>>
>>>>>>>>
>>>>>>>> We apply the NIST guidelines for representation of SI unit
>>>>>>>> symbols (i.e no conversion to native language, no RTL giving
>>>>>>>> icon+m etc).
>>>>>>>>
>>>>>>>> Right now MultiBit HD is configured to use m+icon taken from
>>>>>>>> the Font Awesome icon set. However reading earlier posts it
>>>>>>>> seems that ?+icon is more sensible.
>>>>>>>>
>>>>>>>> Let us know what you'd like.
>>>>>>>>
>>>>>>>> Links: m+icon screenshot: http://imgur.com/a/WCDoG Font
>>>>>>>> Awesome icon:
>>>>>>>> http://fortawesome.github.io/Font-Awesome/icon/btc/ NIST SI
>>>>>>>> guidelines: http://physics.nist.gov/Pubs/SP811/sec07.html
>>>>>>>>
>>>>>>>>
>>>>>>>> On 13 March 2014 12:56, Jeff Garzik <jgarzik at bitpay.com
>>>>>>>> <mailto:jgarzik at bitpay.com>
>>>>>>>> <mailto:jgarzik at bitpay.com>
>>>>>>>> <mailto:jgarzik at bitpay.com>> wrote:
>>>>>>>>
>>>>>>>> Resurrecting this topic.  Bitcoin Wallet moved to mBTC
>>>>>>>> several weeks ago, which was disappointing -- it sounded like
>>>>>>>> the consensus was uBTC, and moving to uBTC later --which will
>>>>>>>> happen-- may result in additional user confusion, thanks to
>>>>>>>> yet another decimal place transition.
>>
>>
>>
>> ------------------------------------------------------------------------------
>> Learn Graph Databases - Download FREE O'Reilly Book
>> "Graph Databases" is the definitive new guide to graph databases and their
>> applications. Written by three acclaimed leaders in the field,
>> this first edition is now available. Download your free book today!
>> http://p.sf.net/sfu/13534_NeoTech
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 
> 
> 
> ------------------------------------------------------------------------------
> Learn Graph Databases - Download FREE O'Reilly Book
> "Graph Databases" is the definitive new guide to graph databases and their
> applications. Written by three acclaimed leaders in the field,
> this first edition is now available. Download your free book today!
> http://p.sf.net/sfu/13534_NeoTech
> 
> 
> 
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 





From mike at plan99.net  Fri Mar 14 15:32:55 2014
From: mike at plan99.net (Mike Hearn)
Date: Fri, 14 Mar 2014 16:32:55 +0100
Subject: [Bitcoin-development] moving the default display to mbtc
In-Reply-To: <lfv5ml$vl8$1@ger.gmane.org>
References: <CAKaEYhK4oXH3hB7uS3=AEkA6r0VB5OYyTua+LOP18rq+rYajHg@mail.gmail.com>
	<52852C2D.9020103@gmail.com> <52853D8A.6010501@monetize.io>
	<CAJHLa0M6CkoDbD6FFixf9-mmhug7DvehSWCJ+EHWVxUDuwNiBg@mail.gmail.com>
	<EE02A310-8604-4811-B2D0-FC32C72C20F3@grabhive.com>
	<CAJHLa0OMcTCgGESi-F4jT2NA3FyCeMYbD_52j47t3keEYBfK8g@mail.gmail.com>
	<CAKm8k+3J9Po4xQn9LhTQrnrGCvG36-kLCjWPX4kmd-c7h+LujA@mail.gmail.com>
	<CANEZrP1VbQPapKJCLcE0+vpK0xac6D6JxRGKdagPVchfZjpUmQ@mail.gmail.com>
	<lfscfd$3cs$1@ger.gmane.org> <lfv2an$iv3$1@ger.gmane.org>
	<362072F0-1EA8-4474-AE26-4691C852A22C@bitsofproof.com>
	<lfv4tm$lpg$1@ger.gmane.org>
	<A1A0E432-3E76-429C-AADF-083A0041C34B@bitsofproof.com>
	<lfv5ml$vl8$1@ger.gmane.org>
Message-ID: <CANEZrP2AtfkiNG4--8rF8C73N=Hf_UR+9DzPAWESSfu95KCwiw@mail.gmail.com>

The issue here is that most people are producing prices in BTC by just
multiplying through the spot rate with full precision. Obviously if you
converted dollar prices to Euro prices with the same technique, you'd also
end up with lots of numbers after the decimal point, but in the real world
nobody actually does this. They always "prettify" the price.

This practice often annoys people because they feel like they get short
changed. The most notorious example is Apple which likes (liked?) to charge
99 cents per iTunes song in the USA, and 99 pennies per song in the UK,
despite that the British pound is worth a lot more than the dollar. It
should be more like 60 pence.

Nothing stops BitPay rounding the mBTC price to look more natural, but
right now it's not common practice.


On Fri, Mar 14, 2014 at 4:02 PM, Andreas Schildbach
<andreas at schildbach.de>wrote:

> By that definition 3.56 is a price. Maybe I misunderstood you and you're
> lobbying for mBTC?
>
>
> On 03/14/2014 03:57 PM, Tamas Blummer wrote:
> > you miss the point Andreas. It is not about the magnitude but about
> > the form of a price.
> >
> > A number with no decimals or with two decimals is percieved as a
> > price in some currency.
> >
> > A number with more than two decimals is just not percieved as a price
> > but as a geeky something that you rather convert to local currency.
> >
> > Tamas Blummer
> > Bits of Proof
> >
> > On 14.03.2014, at 15:49, Andreas Schildbach <andreas at schildbach.de
> > <mailto:andreas at schildbach.de>> wrote:
> >
> >> How much do you pay for an Espresso in your local currency?
> >>
> >> At least for the Euro and the Dollar, mBTC 3.56 is very close to what
> >> people would expect. Certainly more familiar than ?BTC 3558 or BTC
> >> 0.003578.
> >>
> >> Anyway, I was just sharing real-world experience: nobody is confused.
> >>
> >>
> >> On 03/14/2014 03:14 PM, Tamas Blummer wrote:
> >>> You give them a hard to interpret thing like mBTC and then wonder
> >>> why they rather look at local currency. Because the choices you
> >>> gave them are bad.
> >>>
> >>> I think Bitcoin would have a better chance to be percieved as a
> >>> currency of its own if it had prices and fractions like currencies
> >>> do.
> >>>
> >>> 3.558 mBTC or 0.003578 BTC will never be as accepted as 3558 bits
> >>> would be.
> >>>
> >>>
> >>> Tamas Blummer Bits of Proof
> >>>
> >>> On 14.03.2014, at 15:05, Andreas Schildbach <andreas at schildbach.de
> >>> <mailto:andreas at schildbach.de>>
> >>> wrote:
> >>>
> >>>> btw. None of Bitcoin Wallet's users complained about confusion
> >>>> because of the mBTC switch. In contrast, I get many mails and
> >>>> questions if exchange rates happen to differ by >10%.
> >>>>
> >>>> I suspect nobody looks at the Bitcoin price. It's the amount in
> >>>> local currency that matters to the users.
> >>>>
> >>>>
> >>>> On 03/13/2014 02:40 PM, Andreas Schildbach wrote:
> >>>>> Indeed. And users were crying for mBTC. Nobody was asking for
> >>>>> ?BTC.
> >>>>>
> >>>>> I must admit I was not aware if this thread. I just watched
> >>>>> other wallets and at some point decided its time to switch to
> >>>>> mBTC.
> >>>>>
> >>>>>
> >>>>> On 03/13/2014 02:31 PM, Mike Hearn wrote:
> >>>>>> The standard has become mBTC and that's what was adopted.
> >>>>>> It's too late to try and sway this on a mailing list thread
> >>>>>> now.
> >>>>>>
> >>>>>>
> >>>>>> On Thu, Mar 13, 2014 at 2:29 PM, Gary Rowe
> >>>>>> <g.rowe at froot.co.uk <mailto:g.rowe at froot.co.uk>
> >>>>>> <mailto:g.rowe at froot.co.uk>> wrote:
> >>>>>>
> >>>>>> The MultiBit HD view is that this is a locale-sensitive
> >>>>>> presentation issue. As a result we offer a simple
> >>>>>> configuration panel giving pretty much every possible
> >>>>>> combination: icon, m+icon,  ?+icon, BTC, mBTC,  ?BTC, XBT,
> >>>>>> mXBT,  ?XBT, sat along with settings for leading/trailing
> >>>>>> symbol, commas, spaces and points. This allows anyone to
> >>>>>> customise to meet their own needs beyond the offered default.
> >>>>>>
> >>>>>>
> >>>>>> We apply the NIST guidelines for representation of SI unit
> >>>>>> symbols (i.e no conversion to native language, no RTL giving
> >>>>>> icon+m etc).
> >>>>>>
> >>>>>> Right now MultiBit HD is configured to use m+icon taken from
> >>>>>> the Font Awesome icon set. However reading earlier posts it
> >>>>>> seems that ?+icon is more sensible.
> >>>>>>
> >>>>>> Let us know what you'd like.
> >>>>>>
> >>>>>> Links: m+icon screenshot: http://imgur.com/a/WCDoG Font
> >>>>>> Awesome icon:
> >>>>>> http://fortawesome.github.io/Font-Awesome/icon/btc/ NIST SI
> >>>>>> guidelines: http://physics.nist.gov/Pubs/SP811/sec07.html
> >>>>>>
> >>>>>>
> >>>>>> On 13 March 2014 12:56, Jeff Garzik <jgarzik at bitpay.com
> >>>>>> <mailto:jgarzik at bitpay.com>
> >>>>>> <mailto:jgarzik at bitpay.com>> wrote:
> >>>>>>
> >>>>>> Resurrecting this topic.  Bitcoin Wallet moved to mBTC
> >>>>>> several weeks ago, which was disappointing -- it sounded like
> >>>>>> the consensus was uBTC, and moving to uBTC later --which will
> >>>>>> happen-- may result in additional user confusion, thanks to
> >>>>>> yet another decimal place transition.
>
>
>
>
> ------------------------------------------------------------------------------
> Learn Graph Databases - Download FREE O'Reilly Book
> "Graph Databases" is the definitive new guide to graph databases and their
> applications. Written by three acclaimed leaders in the field,
> this first edition is now available. Download your free book today!
> http://p.sf.net/sfu/13534_NeoTech
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140314/0a34753f/attachment.html>

From andreas at schildbach.de  Fri Mar 14 15:56:23 2014
From: andreas at schildbach.de (Andreas Schildbach)
Date: Fri, 14 Mar 2014 16:56:23 +0100
Subject: [Bitcoin-development] moving the default display to mbtc
In-Reply-To: <CANEZrP2AtfkiNG4--8rF8C73N=Hf_UR+9DzPAWESSfu95KCwiw@mail.gmail.com>
References: <CAKaEYhK4oXH3hB7uS3=AEkA6r0VB5OYyTua+LOP18rq+rYajHg@mail.gmail.com>	<52852C2D.9020103@gmail.com>
	<52853D8A.6010501@monetize.io>	<CAJHLa0M6CkoDbD6FFixf9-mmhug7DvehSWCJ+EHWVxUDuwNiBg@mail.gmail.com>	<EE02A310-8604-4811-B2D0-FC32C72C20F3@grabhive.com>	<CAJHLa0OMcTCgGESi-F4jT2NA3FyCeMYbD_52j47t3keEYBfK8g@mail.gmail.com>	<CAKm8k+3J9Po4xQn9LhTQrnrGCvG36-kLCjWPX4kmd-c7h+LujA@mail.gmail.com>	<CANEZrP1VbQPapKJCLcE0+vpK0xac6D6JxRGKdagPVchfZjpUmQ@mail.gmail.com>	<lfscfd$3cs$1@ger.gmane.org>
	<lfv2an$iv3$1@ger.gmane.org>	<362072F0-1EA8-4474-AE26-4691C852A22C@bitsofproof.com>	<lfv4tm$lpg$1@ger.gmane.org>	<A1A0E432-3E76-429C-AADF-083A0041C34B@bitsofproof.com>	<lfv5ml$vl8$1@ger.gmane.org>
	<CANEZrP2AtfkiNG4--8rF8C73N=Hf_UR+9DzPAWESSfu95KCwiw@mail.gmail.com>
Message-ID: <lfv8qp$a2v$1@ger.gmane.org>

Indeed, rounding is the obvious easy fix. Bitcoin Wallet rounds all
amounts except if you type amounts with a higher precision.


On 03/14/2014 04:32 PM, Mike Hearn wrote:
> The issue here is that most people are producing prices in BTC by just
> multiplying through the spot rate with full precision. Obviously if you
> converted dollar prices to Euro prices with the same technique, you'd
> also end up with lots of numbers after the decimal point, but in the
> real world nobody actually does this. They always "prettify" the price.
> 
> This practice often annoys people because they feel like they get short
> changed. The most notorious example is Apple which likes (liked?) to
> charge 99 cents per iTunes song in the USA, and 99 pennies per song in
> the UK, despite that the British pound is worth a lot more than the
> dollar. It should be more like 60 pence.
> 
> Nothing stops BitPay rounding the mBTC price to look more natural, but
> right now it's not common practice.
> 
> 
> On Fri, Mar 14, 2014 at 4:02 PM, Andreas Schildbach
> <andreas at schildbach.de <mailto:andreas at schildbach.de>> wrote:
> 
>     By that definition 3.56 is a price. Maybe I misunderstood you and you're
>     lobbying for mBTC?
> 
> 
>     On 03/14/2014 03:57 PM, Tamas Blummer wrote:
>     > you miss the point Andreas. It is not about the magnitude but about
>     > the form of a price.
>     >
>     > A number with no decimals or with two decimals is percieved as a
>     > price in some currency.
>     >
>     > A number with more than two decimals is just not percieved as a price
>     > but as a geeky something that you rather convert to local currency.
>     >
>     > Tamas Blummer
>     > Bits of Proof
>     >
>     > On 14.03.2014, at 15:49, Andreas Schildbach <andreas at schildbach.de
>     <mailto:andreas at schildbach.de>
>     > <mailto:andreas at schildbach.de <mailto:andreas at schildbach.de>>> wrote:
>     >
>     >> How much do you pay for an Espresso in your local currency?
>     >>
>     >> At least for the Euro and the Dollar, mBTC 3.56 is very close to what
>     >> people would expect. Certainly more familiar than ?BTC 3558 or BTC
>     >> 0.003578.
>     >>
>     >> Anyway, I was just sharing real-world experience: nobody is confused.
>     >>
>     >>
>     >> On 03/14/2014 03:14 PM, Tamas Blummer wrote:
>     >>> You give them a hard to interpret thing like mBTC and then wonder
>     >>> why they rather look at local currency. Because the choices you
>     >>> gave them are bad.
>     >>>
>     >>> I think Bitcoin would have a better chance to be percieved as a
>     >>> currency of its own if it had prices and fractions like currencies
>     >>> do.
>     >>>
>     >>> 3.558 mBTC or 0.003578 BTC will never be as accepted as 3558 bits
>     >>> would be.
>     >>>
>     >>>
>     >>> Tamas Blummer Bits of Proof
>     >>>
>     >>> On 14.03.2014, at 15:05, Andreas Schildbach
>     <andreas at schildbach.de <mailto:andreas at schildbach.de>
>     >>> <mailto:andreas at schildbach.de <mailto:andreas at schildbach.de>>>
>     >>> wrote:
>     >>>
>     >>>> btw. None of Bitcoin Wallet's users complained about confusion
>     >>>> because of the mBTC switch. In contrast, I get many mails and
>     >>>> questions if exchange rates happen to differ by >10%.
>     >>>>
>     >>>> I suspect nobody looks at the Bitcoin price. It's the amount in
>     >>>> local currency that matters to the users.
>     >>>>
>     >>>>
>     >>>> On 03/13/2014 02:40 PM, Andreas Schildbach wrote:
>     >>>>> Indeed. And users were crying for mBTC. Nobody was asking for
>     >>>>> ?BTC.
>     >>>>>
>     >>>>> I must admit I was not aware if this thread. I just watched
>     >>>>> other wallets and at some point decided its time to switch to
>     >>>>> mBTC.
>     >>>>>
>     >>>>>
>     >>>>> On 03/13/2014 02:31 PM, Mike Hearn wrote:
>     >>>>>> The standard has become mBTC and that's what was adopted.
>     >>>>>> It's too late to try and sway this on a mailing list thread
>     >>>>>> now.
>     >>>>>>
>     >>>>>>
>     >>>>>> On Thu, Mar 13, 2014 at 2:29 PM, Gary Rowe
>     >>>>>> <g.rowe at froot.co.uk <mailto:g.rowe at froot.co.uk>
>     <mailto:g.rowe at froot.co.uk <mailto:g.rowe at froot.co.uk>>
>     >>>>>> <mailto:g.rowe at froot.co.uk <mailto:g.rowe at froot.co.uk>>> wrote:
>     >>>>>>
>     >>>>>> The MultiBit HD view is that this is a locale-sensitive
>     >>>>>> presentation issue. As a result we offer a simple
>     >>>>>> configuration panel giving pretty much every possible
>     >>>>>> combination: icon, m+icon,  ?+icon, BTC, mBTC,  ?BTC, XBT,
>     >>>>>> mXBT,  ?XBT, sat along with settings for leading/trailing
>     >>>>>> symbol, commas, spaces and points. This allows anyone to
>     >>>>>> customise to meet their own needs beyond the offered default.
>     >>>>>>
>     >>>>>>
>     >>>>>> We apply the NIST guidelines for representation of SI unit
>     >>>>>> symbols (i.e no conversion to native language, no RTL giving
>     >>>>>> icon+m etc).
>     >>>>>>
>     >>>>>> Right now MultiBit HD is configured to use m+icon taken from
>     >>>>>> the Font Awesome icon set. However reading earlier posts it
>     >>>>>> seems that ?+icon is more sensible.
>     >>>>>>
>     >>>>>> Let us know what you'd like.
>     >>>>>>
>     >>>>>> Links: m+icon screenshot: http://imgur.com/a/WCDoG Font
>     >>>>>> Awesome icon:
>     >>>>>> http://fortawesome.github.io/Font-Awesome/icon/btc/ NIST SI
>     >>>>>> guidelines: http://physics.nist.gov/Pubs/SP811/sec07.html
>     >>>>>>
>     >>>>>>
>     >>>>>> On 13 March 2014 12:56, Jeff Garzik <jgarzik at bitpay.com
>     <mailto:jgarzik at bitpay.com>
>     >>>>>> <mailto:jgarzik at bitpay.com <mailto:jgarzik at bitpay.com>>
>     >>>>>> <mailto:jgarzik at bitpay.com <mailto:jgarzik at bitpay.com>>> wrote:
>     >>>>>>
>     >>>>>> Resurrecting this topic.  Bitcoin Wallet moved to mBTC
>     >>>>>> several weeks ago, which was disappointing -- it sounded like
>     >>>>>> the consensus was uBTC, and moving to uBTC later --which will
>     >>>>>> happen-- may result in additional user confusion, thanks to
>     >>>>>> yet another decimal place transition.
> 
> 
> 
>     ------------------------------------------------------------------------------
>     Learn Graph Databases - Download FREE O'Reilly Book
>     "Graph Databases" is the definitive new guide to graph databases and
>     their
>     applications. Written by three acclaimed leaders in the field,
>     this first edition is now available. Download your free book today!
>     http://p.sf.net/sfu/13534_NeoTech
>     _______________________________________________
>     Bitcoin-development mailing list
>     Bitcoin-development at lists.sourceforge.net
>     <mailto:Bitcoin-development at lists.sourceforge.net>
>     https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 
> 
> 
> 
> ------------------------------------------------------------------------------
> Learn Graph Databases - Download FREE O'Reilly Book
> "Graph Databases" is the definitive new guide to graph databases and their
> applications. Written by three acclaimed leaders in the field,
> this first edition is now available. Download your free book today!
> http://p.sf.net/sfu/13534_NeoTech
> 
> 
> 
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 





From mark at monetize.io  Fri Mar 14 16:01:33 2014
From: mark at monetize.io (Mark Friedenbach)
Date: Fri, 14 Mar 2014 09:01:33 -0700
Subject: [Bitcoin-development] moving the default display to mbtc
In-Reply-To: <lfv4tm$lpg$1@ger.gmane.org>
References: <CAKaEYhK4oXH3hB7uS3=AEkA6r0VB5OYyTua+LOP18rq+rYajHg@mail.gmail.com>	<52852C2D.9020103@gmail.com>	<52853D8A.6010501@monetize.io>	<CAJHLa0M6CkoDbD6FFixf9-mmhug7DvehSWCJ+EHWVxUDuwNiBg@mail.gmail.com>	<EE02A310-8604-4811-B2D0-FC32C72C20F3@grabhive.com>	<CAJHLa0OMcTCgGESi-F4jT2NA3FyCeMYbD_52j47t3keEYBfK8g@mail.gmail.com>	<CAKm8k+3J9Po4xQn9LhTQrnrGCvG36-kLCjWPX4kmd-c7h+LujA@mail.gmail.com>	<CANEZrP1VbQPapKJCLcE0+vpK0xac6D6JxRGKdagPVchfZjpUmQ@mail.gmail.com>	<lfscfd$3cs$1@ger.gmane.org>	<lfv2an$iv3$1@ger.gmane.org>	<362072F0-1EA8-4474-AE26-4691C852A22C@bitsofproof.com>
	<lfv4tm$lpg$1@ger.gmane.org>
Message-ID: <532327DD.7030005@monetize.io>

A cup of coffee in Tokyo costs about 55 yen. You see similar magnitude
numbers in both Chinas, Thailand, and other economically important East
Asian countries. Expect to pay hundreds of rupees in India, or thousands
of rupees in Indonesia.

This concept that money should have low, single digits for everyday
prices is not just Western-centric, it's English-centric. An expresso in
Rome would have cost you a few (tens of?) thousand lira in recent
memory. It was pegging of the Euro to the U.S. dollar that brought
European states in line with the English-speaking world (who themselves
trace lineage to the pound sterling).

No, there is no culturally-neutral common standards for currency and
pricing. But there are ill-advised, ill-informed "standards" in
accounting software that we nevertheless must live with. These software
packages do not handle more than two decimal places gracefully. That
gives technical justifications for moving to either uBTC or accounting
in Satoshis directly. An argument for uBTC is that it retains alignment
with the existing kBTC/BTC/mBTC/uBTC conventions.

However another limitation of these accounting software practices is
that they do not always handle SI notation very well, particularly
sub-unit prefixes. By relabeling uBTC to be a new three-digit symbol
(XBT, XBC, IBT, NBC, or whatever--I really don't care), we are now fully
compliant with any software accounting package out there.

We are still very, very early in the adoption period. These are changes
that could be made now simply by a few big players and/or the bitcoin
foundation changing their practice and their users following suit.

On 03/14/2014 07:49 AM, Andreas Schildbach wrote:
> How much do you pay for an Espresso in your local currency?
> 
> At least for the Euro and the Dollar, mBTC 3.56 is very close to what
> people would expect. Certainly more familiar than ?BTC 3558 or BTC
> 0.003578.
> 
> Anyway, I was just sharing real-world experience: nobody is confused.
> 
> 
> On 03/14/2014 03:14 PM, Tamas Blummer wrote:
>> You give them a hard to interpret thing like mBTC and then wonder
>> why they rather look at local currency. Because the choices you
>> gave them are bad.
>>
>> I think Bitcoin would have a better chance to be percieved as a
>> currency of its own if it had prices and fractions like currencies
>> do.
>>
>> 3.558 mBTC or 0.003578 BTC will never be as accepted as 3558 bits
>> would be.
>>
>>
>> Tamas Blummer Bits of Proof
>>
>> On 14.03.2014, at 15:05, Andreas Schildbach <andreas at schildbach.de>
>> wrote:
>>
>>> btw. None of Bitcoin Wallet's users complained about confusion
>>> because of the mBTC switch. In contrast, I get many mails and
>>> questions if exchange rates happen to differ by >10%.
>>>
>>> I suspect nobody looks at the Bitcoin price. It's the amount in
>>> local currency that matters to the users.
>>>
>>>
>>> On 03/13/2014 02:40 PM, Andreas Schildbach wrote:
>>>> Indeed. And users were crying for mBTC. Nobody was asking for
>>>> ?BTC.
>>>>
>>>> I must admit I was not aware if this thread. I just watched
>>>> other wallets and at some point decided its time to switch to
>>>> mBTC.
>>>>
>>>>
>>>> On 03/13/2014 02:31 PM, Mike Hearn wrote:
>>>>> The standard has become mBTC and that's what was adopted.
>>>>> It's too late to try and sway this on a mailing list thread
>>>>> now.
>>>>>
>>>>>
>>>>> On Thu, Mar 13, 2014 at 2:29 PM, Gary Rowe
>>>>> <g.rowe at froot.co.uk <mailto:g.rowe at froot.co.uk>> wrote:
>>>>>
>>>>> The MultiBit HD view is that this is a locale-sensitive
>>>>> presentation issue. As a result we offer a simple
>>>>> configuration panel giving pretty much every possible
>>>>> combination: icon, m+icon,  ?+icon, BTC, mBTC,  ?BTC, XBT,
>>>>> mXBT,  ?XBT, sat along with settings for leading/trailing
>>>>> symbol, commas, spaces and points. This allows anyone to
>>>>> customise to meet their own needs beyond the offered default.
>>>>>
>>>>>
>>>>> We apply the NIST guidelines for representation of SI unit
>>>>> symbols (i.e no conversion to native language, no RTL giving
>>>>> icon+m etc).
>>>>>
>>>>> Right now MultiBit HD is configured to use m+icon taken from
>>>>> the Font Awesome icon set. However reading earlier posts it
>>>>> seems that ?+icon is more sensible.
>>>>>
>>>>> Let us know what you'd like.
>>>>>
>>>>> Links: m+icon screenshot: http://imgur.com/a/WCDoG Font
>>>>> Awesome icon:
>>>>> http://fortawesome.github.io/Font-Awesome/icon/btc/ NIST SI
>>>>> guidelines: http://physics.nist.gov/Pubs/SP811/sec07.html
>>>>>
>>>>>
>>>>> On 13 March 2014 12:56, Jeff Garzik <jgarzik at bitpay.com 
>>>>> <mailto:jgarzik at bitpay.com>> wrote:
>>>>>
>>>>> Resurrecting this topic.  Bitcoin Wallet moved to mBTC
>>>>> several weeks ago, which was disappointing -- it sounded like
>>>>> the consensus was uBTC, and moving to uBTC later --which will
>>>>> happen-- may result in additional user confusion, thanks to
>>>>> yet another decimal place transition.
>>>>>
>>>>>
>>>>>
>>>>> On Sun, Nov 17, 2013 at 9:28 PM, Wendell <w at grabhive.com 
>>>>> <mailto:w at grabhive.com>> wrote:
>>>>>> We're with uBTC too. Been waiting for the signal to do
>>>>>> this,
>>>>> let's do it right after the fee system is improved.
>>>>>>
>>>>>> -wendell
>>>>>>
>>>>>> grabhive.com <http://grabhive.com> |
>>>>>> twitter.com/hivewallet
>>>>> <http://twitter.com/hivewallet> | gpg: 6C0C9411
>>>>>>
>>>>>> On Nov 15, 2013, at 6:03 AM, Jeff Garzik wrote:
>>>>>>
>>>>>>> Go straight to uBTC. Humans and existing computer
>>>>>>> systems
>>>>> handle numbers to
>>>>>>> the left of the decimals just fine (HK Dollars, Yen).
>>>>>>> The
>>>>> opposite is
>>>>>>> untrue (QuickBooks really does not like 3+ decimal
>>>>>>> places).
>>>>>>
>>>>>
>>>>>
>>>>>
>>>>> -- Jeff Garzik Bitcoin core developer and open source
>>>>> evangelist BitPay, Inc.      https://bitpay.com/
>>>>>
>>>>> ------------------------------------------------------------------------------
>>>>>
>>>>>
> Learn Graph Databases - Download FREE O'Reilly Book
>>>>> "Graph Databases" is the definitive new guide to graph
>>>>> databases and their applications. Written by three acclaimed
>>>>> leaders in the field, this first edition is now available.
>>>>> Download your free book today! 
>>>>> http://p.sf.net/sfu/13534_NeoTech 
>>>>> _______________________________________________ 
>>>>> Bitcoin-development mailing list 
>>>>> Bitcoin-development at lists.sourceforge.net 
>>>>> <mailto:Bitcoin-development at lists.sourceforge.net> 
>>>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>>>>
>>>>>
>>>>>
>>>>>
>>>>>
> ------------------------------------------------------------------------------
>>>>> Learn Graph Databases - Download FREE O'Reilly Book "Graph
>>>>> Databases" is the definitive new guide to graph databases
>>>>> and their applications. Written by three acclaimed leaders in
>>>>> the field, this first edition is now available. Download your
>>>>> free book today! http://p.sf.net/sfu/13534_NeoTech 
>>>>> _______________________________________________ 
>>>>> Bitcoin-development mailing list 
>>>>> Bitcoin-development at lists.sourceforge.net 
>>>>> <mailto:Bitcoin-development at lists.sourceforge.net> 
>>>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>>>>
>>>>>
>>>>>
>>>>>
>>>>>
>>>>>
> ------------------------------------------------------------------------------
>>>>> Learn Graph Databases - Download FREE O'Reilly Book "Graph
>>>>> Databases" is the definitive new guide to graph databases and
>>>>> their applications. Written by three acclaimed leaders in the
>>>>> field, this first edition is now available. Download your
>>>>> free book today! http://p.sf.net/sfu/13534_NeoTech
>>>>>
>>>>>
>>>>>
>>>>> _______________________________________________ 
>>>>> Bitcoin-development mailing list 
>>>>> Bitcoin-development at lists.sourceforge.net 
>>>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>>>>
>>>>
>>>>
>>>>
>>>>
>>>>>
> ------------------------------------------------------------------------------
>>>> Learn Graph Databases - Download FREE O'Reilly Book "Graph
>>>> Databases" is the definitive new guide to graph databases and
>>>> their applications. Written by three acclaimed leaders in the
>>>> field, this first edition is now available. Download your free
>>>> book today! http://p.sf.net/sfu/13534_NeoTech 
>>>> _______________________________________________ 
>>>> Bitcoin-development mailing list 
>>>> Bitcoin-development at lists.sourceforge.net 
>>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>>>
>>>
>>>
>>>
>>>
>>>>
> ------------------------------------------------------------------------------
>>> Learn Graph Databases - Download FREE O'Reilly Book "Graph
>>> Databases" is the definitive new guide to graph databases and
>>> their applications. Written by three acclaimed leaders in the
>>> field, this first edition is now available. Download your free
>>> book today! http://p.sf.net/sfu/13534_NeoTech 
>>> _______________________________________________ 
>>> Bitcoin-development mailing list 
>>> Bitcoin-development at lists.sourceforge.net 
>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>
>>
>>
>> ------------------------------------------------------------------------------
>>
>>
> Learn Graph Databases - Download FREE O'Reilly Book
>> "Graph Databases" is the definitive new guide to graph databases
>> and their applications. Written by three acclaimed leaders in the
>> field, this first edition is now available. Download your free book
>> today! http://p.sf.net/sfu/13534_NeoTech
>>
>>
>>
>> _______________________________________________ Bitcoin-development
>> mailing list Bitcoin-development at lists.sourceforge.net 
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>
> 
> 
> 
> ------------------------------------------------------------------------------
> Learn Graph Databases - Download FREE O'Reilly Book
> "Graph Databases" is the definitive new guide to graph databases and their
> applications. Written by three acclaimed leaders in the field,
> this first edition is now available. Download your free book today!
> http://p.sf.net/sfu/13534_NeoTech
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 



From morcos at gmail.com  Fri Mar 14 16:15:30 2014
From: morcos at gmail.com (Alex Morcos)
Date: Fri, 14 Mar 2014 12:15:30 -0400
Subject: [Bitcoin-development] moving the default display to mbtc
In-Reply-To: <532327DD.7030005@monetize.io>
References: <CAKaEYhK4oXH3hB7uS3=AEkA6r0VB5OYyTua+LOP18rq+rYajHg@mail.gmail.com>
	<52852C2D.9020103@gmail.com> <52853D8A.6010501@monetize.io>
	<CAJHLa0M6CkoDbD6FFixf9-mmhug7DvehSWCJ+EHWVxUDuwNiBg@mail.gmail.com>
	<EE02A310-8604-4811-B2D0-FC32C72C20F3@grabhive.com>
	<CAJHLa0OMcTCgGESi-F4jT2NA3FyCeMYbD_52j47t3keEYBfK8g@mail.gmail.com>
	<CAKm8k+3J9Po4xQn9LhTQrnrGCvG36-kLCjWPX4kmd-c7h+LujA@mail.gmail.com>
	<CANEZrP1VbQPapKJCLcE0+vpK0xac6D6JxRGKdagPVchfZjpUmQ@mail.gmail.com>
	<lfscfd$3cs$1@ger.gmane.org> <lfv2an$iv3$1@ger.gmane.org>
	<362072F0-1EA8-4474-AE26-4691C852A22C@bitsofproof.com>
	<lfv4tm$lpg$1@ger.gmane.org> <532327DD.7030005@monetize.io>
Message-ID: <CAPWm=eWW25cL+F6NJTuQrmy_U2GNSpNEY6dn0CwfgkcO=RQyzw@mail.gmail.com>

I think Mark makes some good arguments.
I realize this would only add to the confusion, but...
What if we did relabel 100 satoshis to be some new kind of unit ("bit" or
whatever else), with a proper 3 letter code, and then from a user
standpoint, where people are using mBTC, they could switch to using Kbits
(ok thats obviously bad, but you get the idea) at the same nominal price.
 But accounting backends and so forth would operate in the "bit" base unit
with 2 decimals of precision.




On Fri, Mar 14, 2014 at 12:01 PM, Mark Friedenbach <mark at monetize.io> wrote:

> A cup of coffee in Tokyo costs about 55 yen. You see similar magnitude
> numbers in both Chinas, Thailand, and other economically important East
> Asian countries. Expect to pay hundreds of rupees in India, or thousands
> of rupees in Indonesia.
>
> This concept that money should have low, single digits for everyday
> prices is not just Western-centric, it's English-centric. An expresso in
> Rome would have cost you a few (tens of?) thousand lira in recent
> memory. It was pegging of the Euro to the U.S. dollar that brought
> European states in line with the English-speaking world (who themselves
> trace lineage to the pound sterling).
>
> No, there is no culturally-neutral common standards for currency and
> pricing. But there are ill-advised, ill-informed "standards" in
> accounting software that we nevertheless must live with. These software
> packages do not handle more than two decimal places gracefully. That
> gives technical justifications for moving to either uBTC or accounting
> in Satoshis directly. An argument for uBTC is that it retains alignment
> with the existing kBTC/BTC/mBTC/uBTC conventions.
>
> However another limitation of these accounting software practices is
> that they do not always handle SI notation very well, particularly
> sub-unit prefixes. By relabeling uBTC to be a new three-digit symbol
> (XBT, XBC, IBT, NBC, or whatever--I really don't care), we are now fully
> compliant with any software accounting package out there.
>
> We are still very, very early in the adoption period. These are changes
> that could be made now simply by a few big players and/or the bitcoin
> foundation changing their practice and their users following suit.
>
> On 03/14/2014 07:49 AM, Andreas Schildbach wrote:
> > How much do you pay for an Espresso in your local currency?
> >
> > At least for the Euro and the Dollar, mBTC 3.56 is very close to what
> > people would expect. Certainly more familiar than ?BTC 3558 or BTC
> > 0.003578.
> >
> > Anyway, I was just sharing real-world experience: nobody is confused.
> >
> >
> > On 03/14/2014 03:14 PM, Tamas Blummer wrote:
> >> You give them a hard to interpret thing like mBTC and then wonder
> >> why they rather look at local currency. Because the choices you
> >> gave them are bad.
> >>
> >> I think Bitcoin would have a better chance to be percieved as a
> >> currency of its own if it had prices and fractions like currencies
> >> do.
> >>
> >> 3.558 mBTC or 0.003578 BTC will never be as accepted as 3558 bits
> >> would be.
> >>
> >>
> >> Tamas Blummer Bits of Proof
> >>
> >> On 14.03.2014, at 15:05, Andreas Schildbach <andreas at schildbach.de>
> >> wrote:
> >>
> >>> btw. None of Bitcoin Wallet's users complained about confusion
> >>> because of the mBTC switch. In contrast, I get many mails and
> >>> questions if exchange rates happen to differ by >10%.
> >>>
> >>> I suspect nobody looks at the Bitcoin price. It's the amount in
> >>> local currency that matters to the users.
> >>>
> >>>
> >>> On 03/13/2014 02:40 PM, Andreas Schildbach wrote:
> >>>> Indeed. And users were crying for mBTC. Nobody was asking for
> >>>> ?BTC.
> >>>>
> >>>> I must admit I was not aware if this thread. I just watched
> >>>> other wallets and at some point decided its time to switch to
> >>>> mBTC.
> >>>>
> >>>>
> >>>> On 03/13/2014 02:31 PM, Mike Hearn wrote:
> >>>>> The standard has become mBTC and that's what was adopted.
> >>>>> It's too late to try and sway this on a mailing list thread
> >>>>> now.
> >>>>>
> >>>>>
> >>>>> On Thu, Mar 13, 2014 at 2:29 PM, Gary Rowe
> >>>>> <g.rowe at froot.co.uk <mailto:g.rowe at froot.co.uk>> wrote:
> >>>>>
> >>>>> The MultiBit HD view is that this is a locale-sensitive
> >>>>> presentation issue. As a result we offer a simple
> >>>>> configuration panel giving pretty much every possible
> >>>>> combination: icon, m+icon,  ?+icon, BTC, mBTC,  ?BTC, XBT,
> >>>>> mXBT,  ?XBT, sat along with settings for leading/trailing
> >>>>> symbol, commas, spaces and points. This allows anyone to
> >>>>> customise to meet their own needs beyond the offered default.
> >>>>>
> >>>>>
> >>>>> We apply the NIST guidelines for representation of SI unit
> >>>>> symbols (i.e no conversion to native language, no RTL giving
> >>>>> icon+m etc).
> >>>>>
> >>>>> Right now MultiBit HD is configured to use m+icon taken from
> >>>>> the Font Awesome icon set. However reading earlier posts it
> >>>>> seems that ?+icon is more sensible.
> >>>>>
> >>>>> Let us know what you'd like.
> >>>>>
> >>>>> Links: m+icon screenshot: http://imgur.com/a/WCDoG Font
> >>>>> Awesome icon:
> >>>>> http://fortawesome.github.io/Font-Awesome/icon/btc/ NIST SI
> >>>>> guidelines: http://physics.nist.gov/Pubs/SP811/sec07.html
> >>>>>
> >>>>>
> >>>>> On 13 March 2014 12:56, Jeff Garzik <jgarzik at bitpay.com
> >>>>> <mailto:jgarzik at bitpay.com>> wrote:
> >>>>>
> >>>>> Resurrecting this topic.  Bitcoin Wallet moved to mBTC
> >>>>> several weeks ago, which was disappointing -- it sounded like
> >>>>> the consensus was uBTC, and moving to uBTC later --which will
> >>>>> happen-- may result in additional user confusion, thanks to
> >>>>> yet another decimal place transition.
> >>>>>
> >>>>>
> >>>>>
> >>>>> On Sun, Nov 17, 2013 at 9:28 PM, Wendell <w at grabhive.com
> >>>>> <mailto:w at grabhive.com>> wrote:
> >>>>>> We're with uBTC too. Been waiting for the signal to do
> >>>>>> this,
> >>>>> let's do it right after the fee system is improved.
> >>>>>>
> >>>>>> -wendell
> >>>>>>
> >>>>>> grabhive.com <http://grabhive.com> |
> >>>>>> twitter.com/hivewallet
> >>>>> <http://twitter.com/hivewallet> | gpg: 6C0C9411
> >>>>>>
> >>>>>> On Nov 15, 2013, at 6:03 AM, Jeff Garzik wrote:
> >>>>>>
> >>>>>>> Go straight to uBTC. Humans and existing computer
> >>>>>>> systems
> >>>>> handle numbers to
> >>>>>>> the left of the decimals just fine (HK Dollars, Yen).
> >>>>>>> The
> >>>>> opposite is
> >>>>>>> untrue (QuickBooks really does not like 3+ decimal
> >>>>>>> places).
> >>>>>>
> >>>>>
> >>>>>
> >>>>>
> >>>>> -- Jeff Garzik Bitcoin core developer and open source
> >>>>> evangelist BitPay, Inc.      https://bitpay.com/
> >>>>>
> >>>>>
> ------------------------------------------------------------------------------
> >>>>>
> >>>>>
> > Learn Graph Databases - Download FREE O'Reilly Book
> >>>>> "Graph Databases" is the definitive new guide to graph
> >>>>> databases and their applications. Written by three acclaimed
> >>>>> leaders in the field, this first edition is now available.
> >>>>> Download your free book today!
> >>>>> http://p.sf.net/sfu/13534_NeoTech
> >>>>> _______________________________________________
> >>>>> Bitcoin-development mailing list
> >>>>> Bitcoin-development at lists.sourceforge.net
> >>>>> <mailto:Bitcoin-development at lists.sourceforge.net>
> >>>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> >>>>>
> >>>>>
> >>>>>
> >>>>>
> >>>>>
> >
> ------------------------------------------------------------------------------
> >>>>> Learn Graph Databases - Download FREE O'Reilly Book "Graph
> >>>>> Databases" is the definitive new guide to graph databases
> >>>>> and their applications. Written by three acclaimed leaders in
> >>>>> the field, this first edition is now available. Download your
> >>>>> free book today! http://p.sf.net/sfu/13534_NeoTech
> >>>>> _______________________________________________
> >>>>> Bitcoin-development mailing list
> >>>>> Bitcoin-development at lists.sourceforge.net
> >>>>> <mailto:Bitcoin-development at lists.sourceforge.net>
> >>>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> >>>>>
> >>>>>
> >>>>>
> >>>>>
> >>>>>
> >>>>>
> >
> ------------------------------------------------------------------------------
> >>>>> Learn Graph Databases - Download FREE O'Reilly Book "Graph
> >>>>> Databases" is the definitive new guide to graph databases and
> >>>>> their applications. Written by three acclaimed leaders in the
> >>>>> field, this first edition is now available. Download your
> >>>>> free book today! http://p.sf.net/sfu/13534_NeoTech
> >>>>>
> >>>>>
> >>>>>
> >>>>> _______________________________________________
> >>>>> Bitcoin-development mailing list
> >>>>> Bitcoin-development at lists.sourceforge.net
> >>>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> >>>>>
> >>>>
> >>>>
> >>>>
> >>>>
> >>>>>
> >
> ------------------------------------------------------------------------------
> >>>> Learn Graph Databases - Download FREE O'Reilly Book "Graph
> >>>> Databases" is the definitive new guide to graph databases and
> >>>> their applications. Written by three acclaimed leaders in the
> >>>> field, this first edition is now available. Download your free
> >>>> book today! http://p.sf.net/sfu/13534_NeoTech
> >>>> _______________________________________________
> >>>> Bitcoin-development mailing list
> >>>> Bitcoin-development at lists.sourceforge.net
> >>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> >>>>
> >>>
> >>>
> >>>
> >>>
> >>>>
> >
> ------------------------------------------------------------------------------
> >>> Learn Graph Databases - Download FREE O'Reilly Book "Graph
> >>> Databases" is the definitive new guide to graph databases and
> >>> their applications. Written by three acclaimed leaders in the
> >>> field, this first edition is now available. Download your free
> >>> book today! http://p.sf.net/sfu/13534_NeoTech
> >>> _______________________________________________
> >>> Bitcoin-development mailing list
> >>> Bitcoin-development at lists.sourceforge.net
> >>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> >>
> >>
> >>
> >>
> ------------------------------------------------------------------------------
> >>
> >>
> > Learn Graph Databases - Download FREE O'Reilly Book
> >> "Graph Databases" is the definitive new guide to graph databases
> >> and their applications. Written by three acclaimed leaders in the
> >> field, this first edition is now available. Download your free book
> >> today! http://p.sf.net/sfu/13534_NeoTech
> >>
> >>
> >>
> >> _______________________________________________ Bitcoin-development
> >> mailing list Bitcoin-development at lists.sourceforge.net
> >> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> >>
> >
> >
> >
> >
> ------------------------------------------------------------------------------
> > Learn Graph Databases - Download FREE O'Reilly Book
> > "Graph Databases" is the definitive new guide to graph databases and
> their
> > applications. Written by three acclaimed leaders in the field,
> > this first edition is now available. Download your free book today!
> > http://p.sf.net/sfu/13534_NeoTech
> > _______________________________________________
> > Bitcoin-development mailing list
> > Bitcoin-development at lists.sourceforge.net
> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> >
>
>
> ------------------------------------------------------------------------------
> Learn Graph Databases - Download FREE O'Reilly Book
> "Graph Databases" is the definitive new guide to graph databases and their
> applications. Written by three acclaimed leaders in the field,
> this first edition is now available. Download your free book today!
> http://p.sf.net/sfu/13534_NeoTech
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140314/b6d600bc/attachment.html>

From gvroom at gmail.com  Fri Mar 14 16:25:56 2014
From: gvroom at gmail.com (Andrew Smith)
Date: Fri, 14 Mar 2014 13:55:56 -0230
Subject: [Bitcoin-development] moving the default display to mbtc
Message-ID: <CAOAgPMALQV3D_Y_oKJY4CQ7V00kUQX_AShJ9_ELjOq9P=i0ZuA@mail.gmail.com>

Well, not sure I wanted to subscribe the mbtc vs ubtc list... its a
default, not a big deal.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140314/0dbd9adb/attachment.html>

From ricardojdfilipe at gmail.com  Fri Mar 14 16:51:14 2014
From: ricardojdfilipe at gmail.com (Ricardo Filipe)
Date: Fri, 14 Mar 2014 16:51:14 +0000
Subject: [Bitcoin-development] moving the default display to mbtc
In-Reply-To: <CAPWm=eWW25cL+F6NJTuQrmy_U2GNSpNEY6dn0CwfgkcO=RQyzw@mail.gmail.com>
References: <CAKaEYhK4oXH3hB7uS3=AEkA6r0VB5OYyTua+LOP18rq+rYajHg@mail.gmail.com>
	<52852C2D.9020103@gmail.com> <52853D8A.6010501@monetize.io>
	<CAJHLa0M6CkoDbD6FFixf9-mmhug7DvehSWCJ+EHWVxUDuwNiBg@mail.gmail.com>
	<EE02A310-8604-4811-B2D0-FC32C72C20F3@grabhive.com>
	<CAJHLa0OMcTCgGESi-F4jT2NA3FyCeMYbD_52j47t3keEYBfK8g@mail.gmail.com>
	<CAKm8k+3J9Po4xQn9LhTQrnrGCvG36-kLCjWPX4kmd-c7h+LujA@mail.gmail.com>
	<CANEZrP1VbQPapKJCLcE0+vpK0xac6D6JxRGKdagPVchfZjpUmQ@mail.gmail.com>
	<lfscfd$3cs$1@ger.gmane.org> <lfv2an$iv3$1@ger.gmane.org>
	<362072F0-1EA8-4474-AE26-4691C852A22C@bitsofproof.com>
	<lfv4tm$lpg$1@ger.gmane.org> <532327DD.7030005@monetize.io>
	<CAPWm=eWW25cL+F6NJTuQrmy_U2GNSpNEY6dn0CwfgkcO=RQyzw@mail.gmail.com>
Message-ID: <CALC81CNf0sP0K3yF+_Ku9fcU4B7bPu9Dpm4P768sqXp2gUuCdA@mail.gmail.com>

so much discussion for a visual update...

make this a user experiment:
-give the user the possibility to use BTC/mBTC/uMTC
-retrieve the results after some time
-make the default the most used option


2014-03-14 16:15 GMT+00:00 Alex Morcos <morcos at gmail.com>:
> I think Mark makes some good arguments.
> I realize this would only add to the confusion, but...
> What if we did relabel 100 satoshis to be some new kind of unit ("bit" or
> whatever else), with a proper 3 letter code, and then from a user
> standpoint, where people are using mBTC, they could switch to using Kbits
> (ok thats obviously bad, but you get the idea) at the same nominal price.
> But accounting backends and so forth would operate in the "bit" base unit
> with 2 decimals of precision.
>
>
>
>
> On Fri, Mar 14, 2014 at 12:01 PM, Mark Friedenbach <mark at monetize.io> wrote:
>>
>> A cup of coffee in Tokyo costs about 55 yen. You see similar magnitude
>> numbers in both Chinas, Thailand, and other economically important East
>> Asian countries. Expect to pay hundreds of rupees in India, or thousands
>> of rupees in Indonesia.
>>
>> This concept that money should have low, single digits for everyday
>> prices is not just Western-centric, it's English-centric. An expresso in
>> Rome would have cost you a few (tens of?) thousand lira in recent
>> memory. It was pegging of the Euro to the U.S. dollar that brought
>> European states in line with the English-speaking world (who themselves
>> trace lineage to the pound sterling).
>>
>> No, there is no culturally-neutral common standards for currency and
>> pricing. But there are ill-advised, ill-informed "standards" in
>> accounting software that we nevertheless must live with. These software
>> packages do not handle more than two decimal places gracefully. That
>> gives technical justifications for moving to either uBTC or accounting
>> in Satoshis directly. An argument for uBTC is that it retains alignment
>> with the existing kBTC/BTC/mBTC/uBTC conventions.
>>
>> However another limitation of these accounting software practices is
>> that they do not always handle SI notation very well, particularly
>> sub-unit prefixes. By relabeling uBTC to be a new three-digit symbol
>> (XBT, XBC, IBT, NBC, or whatever--I really don't care), we are now fully
>> compliant with any software accounting package out there.
>>
>> We are still very, very early in the adoption period. These are changes
>> that could be made now simply by a few big players and/or the bitcoin
>> foundation changing their practice and their users following suit.
>>
>> On 03/14/2014 07:49 AM, Andreas Schildbach wrote:
>> > How much do you pay for an Espresso in your local currency?
>> >
>> > At least for the Euro and the Dollar, mBTC 3.56 is very close to what
>> > people would expect. Certainly more familiar than ?BTC 3558 or BTC
>> > 0.003578.
>> >
>> > Anyway, I was just sharing real-world experience: nobody is confused.
>> >
>> >
>> > On 03/14/2014 03:14 PM, Tamas Blummer wrote:
>> >> You give them a hard to interpret thing like mBTC and then wonder
>> >> why they rather look at local currency. Because the choices you
>> >> gave them are bad.
>> >>
>> >> I think Bitcoin would have a better chance to be percieved as a
>> >> currency of its own if it had prices and fractions like currencies
>> >> do.
>> >>
>> >> 3.558 mBTC or 0.003578 BTC will never be as accepted as 3558 bits
>> >> would be.
>> >>
>> >>
>> >> Tamas Blummer Bits of Proof
>> >>
>> >> On 14.03.2014, at 15:05, Andreas Schildbach <andreas at schildbach.de>
>> >> wrote:
>> >>
>> >>> btw. None of Bitcoin Wallet's users complained about confusion
>> >>> because of the mBTC switch. In contrast, I get many mails and
>> >>> questions if exchange rates happen to differ by >10%.
>> >>>
>> >>> I suspect nobody looks at the Bitcoin price. It's the amount in
>> >>> local currency that matters to the users.
>> >>>
>> >>>
>> >>> On 03/13/2014 02:40 PM, Andreas Schildbach wrote:
>> >>>> Indeed. And users were crying for mBTC. Nobody was asking for
>> >>>> ?BTC.
>> >>>>
>> >>>> I must admit I was not aware if this thread. I just watched
>> >>>> other wallets and at some point decided its time to switch to
>> >>>> mBTC.
>> >>>>
>> >>>>
>> >>>> On 03/13/2014 02:31 PM, Mike Hearn wrote:
>> >>>>> The standard has become mBTC and that's what was adopted.
>> >>>>> It's too late to try and sway this on a mailing list thread
>> >>>>> now.
>> >>>>>
>> >>>>>
>> >>>>> On Thu, Mar 13, 2014 at 2:29 PM, Gary Rowe
>> >>>>> <g.rowe at froot.co.uk <mailto:g.rowe at froot.co.uk>> wrote:
>> >>>>>
>> >>>>> The MultiBit HD view is that this is a locale-sensitive
>> >>>>> presentation issue. As a result we offer a simple
>> >>>>> configuration panel giving pretty much every possible
>> >>>>> combination: icon, m+icon,  ?+icon, BTC, mBTC,  ?BTC, XBT,
>> >>>>> mXBT,  ?XBT, sat along with settings for leading/trailing
>> >>>>> symbol, commas, spaces and points. This allows anyone to
>> >>>>> customise to meet their own needs beyond the offered default.
>> >>>>>
>> >>>>>
>> >>>>> We apply the NIST guidelines for representation of SI unit
>> >>>>> symbols (i.e no conversion to native language, no RTL giving
>> >>>>> icon+m etc).
>> >>>>>
>> >>>>> Right now MultiBit HD is configured to use m+icon taken from
>> >>>>> the Font Awesome icon set. However reading earlier posts it
>> >>>>> seems that ?+icon is more sensible.
>> >>>>>
>> >>>>> Let us know what you'd like.
>> >>>>>
>> >>>>> Links: m+icon screenshot: http://imgur.com/a/WCDoG Font
>> >>>>> Awesome icon:
>> >>>>> http://fortawesome.github.io/Font-Awesome/icon/btc/ NIST SI
>> >>>>> guidelines: http://physics.nist.gov/Pubs/SP811/sec07.html
>> >>>>>
>> >>>>>
>> >>>>> On 13 March 2014 12:56, Jeff Garzik <jgarzik at bitpay.com
>> >>>>> <mailto:jgarzik at bitpay.com>> wrote:
>> >>>>>
>> >>>>> Resurrecting this topic.  Bitcoin Wallet moved to mBTC
>> >>>>> several weeks ago, which was disappointing -- it sounded like
>> >>>>> the consensus was uBTC, and moving to uBTC later --which will
>> >>>>> happen-- may result in additional user confusion, thanks to
>> >>>>> yet another decimal place transition.
>> >>>>>
>> >>>>>
>> >>>>>
>> >>>>> On Sun, Nov 17, 2013 at 9:28 PM, Wendell <w at grabhive.com
>> >>>>> <mailto:w at grabhive.com>> wrote:
>> >>>>>> We're with uBTC too. Been waiting for the signal to do
>> >>>>>> this,
>> >>>>> let's do it right after the fee system is improved.
>> >>>>>>
>> >>>>>> -wendell
>> >>>>>>
>> >>>>>> grabhive.com <http://grabhive.com> |
>> >>>>>> twitter.com/hivewallet
>> >>>>> <http://twitter.com/hivewallet> | gpg: 6C0C9411
>> >>>>>>
>> >>>>>> On Nov 15, 2013, at 6:03 AM, Jeff Garzik wrote:
>> >>>>>>
>> >>>>>>> Go straight to uBTC. Humans and existing computer
>> >>>>>>> systems
>> >>>>> handle numbers to
>> >>>>>>> the left of the decimals just fine (HK Dollars, Yen).
>> >>>>>>> The
>> >>>>> opposite is
>> >>>>>>> untrue (QuickBooks really does not like 3+ decimal
>> >>>>>>> places).
>> >>>>>>
>> >>>>>
>> >>>>>
>> >>>>>
>> >>>>> -- Jeff Garzik Bitcoin core developer and open source
>> >>>>> evangelist BitPay, Inc.      https://bitpay.com/
>> >>>>>
>> >>>>>
>> >>>>> ------------------------------------------------------------------------------
>> >>>>>
>> >>>>>
>> > Learn Graph Databases - Download FREE O'Reilly Book
>> >>>>> "Graph Databases" is the definitive new guide to graph
>> >>>>> databases and their applications. Written by three acclaimed
>> >>>>> leaders in the field, this first edition is now available.
>> >>>>> Download your free book today!
>> >>>>> http://p.sf.net/sfu/13534_NeoTech
>> >>>>> _______________________________________________
>> >>>>> Bitcoin-development mailing list
>> >>>>> Bitcoin-development at lists.sourceforge.net
>> >>>>> <mailto:Bitcoin-development at lists.sourceforge.net>
>> >>>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>> >>>>>
>> >>>>>
>> >>>>>
>> >>>>>
>> >>>>>
>> >
>> > ------------------------------------------------------------------------------
>> >>>>> Learn Graph Databases - Download FREE O'Reilly Book "Graph
>> >>>>> Databases" is the definitive new guide to graph databases
>> >>>>> and their applications. Written by three acclaimed leaders in
>> >>>>> the field, this first edition is now available. Download your
>> >>>>> free book today! http://p.sf.net/sfu/13534_NeoTech
>> >>>>> _______________________________________________
>> >>>>> Bitcoin-development mailing list
>> >>>>> Bitcoin-development at lists.sourceforge.net
>> >>>>> <mailto:Bitcoin-development at lists.sourceforge.net>
>> >>>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>> >>>>>
>> >>>>>
>> >>>>>
>> >>>>>
>> >>>>>
>> >>>>>
>> >
>> > ------------------------------------------------------------------------------
>> >>>>> Learn Graph Databases - Download FREE O'Reilly Book "Graph
>> >>>>> Databases" is the definitive new guide to graph databases and
>> >>>>> their applications. Written by three acclaimed leaders in the
>> >>>>> field, this first edition is now available. Download your
>> >>>>> free book today! http://p.sf.net/sfu/13534_NeoTech
>> >>>>>
>> >>>>>
>> >>>>>
>> >>>>> _______________________________________________
>> >>>>> Bitcoin-development mailing list
>> >>>>> Bitcoin-development at lists.sourceforge.net
>> >>>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>> >>>>>
>> >>>>
>> >>>>
>> >>>>
>> >>>>
>> >>>>>
>> >
>> > ------------------------------------------------------------------------------
>> >>>> Learn Graph Databases - Download FREE O'Reilly Book "Graph
>> >>>> Databases" is the definitive new guide to graph databases and
>> >>>> their applications. Written by three acclaimed leaders in the
>> >>>> field, this first edition is now available. Download your free
>> >>>> book today! http://p.sf.net/sfu/13534_NeoTech
>> >>>> _______________________________________________
>> >>>> Bitcoin-development mailing list
>> >>>> Bitcoin-development at lists.sourceforge.net
>> >>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>> >>>>
>> >>>
>> >>>
>> >>>
>> >>>
>> >>>>
>> >
>> > ------------------------------------------------------------------------------
>> >>> Learn Graph Databases - Download FREE O'Reilly Book "Graph
>> >>> Databases" is the definitive new guide to graph databases and
>> >>> their applications. Written by three acclaimed leaders in the
>> >>> field, this first edition is now available. Download your free
>> >>> book today! http://p.sf.net/sfu/13534_NeoTech
>> >>> _______________________________________________
>> >>> Bitcoin-development mailing list
>> >>> Bitcoin-development at lists.sourceforge.net
>> >>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>> >>
>> >>
>> >>
>> >>
>> >> ------------------------------------------------------------------------------
>> >>
>> >>
>> > Learn Graph Databases - Download FREE O'Reilly Book
>> >> "Graph Databases" is the definitive new guide to graph databases
>> >> and their applications. Written by three acclaimed leaders in the
>> >> field, this first edition is now available. Download your free book
>> >> today! http://p.sf.net/sfu/13534_NeoTech
>> >>
>> >>
>> >>
>> >> _______________________________________________ Bitcoin-development
>> >> mailing list Bitcoin-development at lists.sourceforge.net
>> >> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>> >>
>> >
>> >
>> >
>> >
>> > ------------------------------------------------------------------------------
>> > Learn Graph Databases - Download FREE O'Reilly Book
>> > "Graph Databases" is the definitive new guide to graph databases and
>> > their
>> > applications. Written by three acclaimed leaders in the field,
>> > this first edition is now available. Download your free book today!
>> > http://p.sf.net/sfu/13534_NeoTech
>> > _______________________________________________
>> > Bitcoin-development mailing list
>> > Bitcoin-development at lists.sourceforge.net
>> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>> >
>>
>>
>> ------------------------------------------------------------------------------
>> Learn Graph Databases - Download FREE O'Reilly Book
>> "Graph Databases" is the definitive new guide to graph databases and their
>> applications. Written by three acclaimed leaders in the field,
>> this first edition is now available. Download your free book today!
>> http://p.sf.net/sfu/13534_NeoTech
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
>
> ------------------------------------------------------------------------------
> Learn Graph Databases - Download FREE O'Reilly Book
> "Graph Databases" is the definitive new guide to graph databases and their
> applications. Written by three acclaimed leaders in the field,
> this first edition is now available. Download your free book today!
> http://p.sf.net/sfu/13534_NeoTech
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>



From allen.piscitello at gmail.com  Fri Mar 14 16:58:39 2014
From: allen.piscitello at gmail.com (Allen Piscitello)
Date: Fri, 14 Mar 2014 11:58:39 -0500
Subject: [Bitcoin-development] moving the default display to mbtc
In-Reply-To: <CALC81CNf0sP0K3yF+_Ku9fcU4B7bPu9Dpm4P768sqXp2gUuCdA@mail.gmail.com>
References: <CAKaEYhK4oXH3hB7uS3=AEkA6r0VB5OYyTua+LOP18rq+rYajHg@mail.gmail.com>
	<52852C2D.9020103@gmail.com> <52853D8A.6010501@monetize.io>
	<CAJHLa0M6CkoDbD6FFixf9-mmhug7DvehSWCJ+EHWVxUDuwNiBg@mail.gmail.com>
	<EE02A310-8604-4811-B2D0-FC32C72C20F3@grabhive.com>
	<CAJHLa0OMcTCgGESi-F4jT2NA3FyCeMYbD_52j47t3keEYBfK8g@mail.gmail.com>
	<CAKm8k+3J9Po4xQn9LhTQrnrGCvG36-kLCjWPX4kmd-c7h+LujA@mail.gmail.com>
	<CANEZrP1VbQPapKJCLcE0+vpK0xac6D6JxRGKdagPVchfZjpUmQ@mail.gmail.com>
	<lfscfd$3cs$1@ger.gmane.org> <lfv2an$iv3$1@ger.gmane.org>
	<362072F0-1EA8-4474-AE26-4691C852A22C@bitsofproof.com>
	<lfv4tm$lpg$1@ger.gmane.org> <532327DD.7030005@monetize.io>
	<CAPWm=eWW25cL+F6NJTuQrmy_U2GNSpNEY6dn0CwfgkcO=RQyzw@mail.gmail.com>
	<CALC81CNf0sP0K3yF+_Ku9fcU4B7bPu9Dpm4P768sqXp2gUuCdA@mail.gmail.com>
Message-ID: <CAJfRnm5RGjQyCqLD7aMwynT51tGaowF+Lyu=T69-P0nr019wkQ@mail.gmail.com>

Fairly useless experiment, since the vast majority of users will almost
always stay at the default.  The winner will always be whatever was
selected as the default initially.  This might work if the default was
randomly chosen, and you see what actually annoyed users enough to switch
off of it most often.


On Fri, Mar 14, 2014 at 11:51 AM, Ricardo Filipe
<ricardojdfilipe at gmail.com>wrote:

> so much discussion for a visual update...
>
> make this a user experiment:
> -give the user the possibility to use BTC/mBTC/uMTC
> -retrieve the results after some time
> -make the default the most used option
>
>
> 2014-03-14 16:15 GMT+00:00 Alex Morcos <morcos at gmail.com>:
> > I think Mark makes some good arguments.
> > I realize this would only add to the confusion, but...
> > What if we did relabel 100 satoshis to be some new kind of unit ("bit" or
> > whatever else), with a proper 3 letter code, and then from a user
> > standpoint, where people are using mBTC, they could switch to using Kbits
> > (ok thats obviously bad, but you get the idea) at the same nominal price.
> > But accounting backends and so forth would operate in the "bit" base unit
> > with 2 decimals of precision.
> >
> >
> >
> >
> > On Fri, Mar 14, 2014 at 12:01 PM, Mark Friedenbach <mark at monetize.io>
> wrote:
> >>
> >> A cup of coffee in Tokyo costs about 55 yen. You see similar magnitude
> >> numbers in both Chinas, Thailand, and other economically important East
> >> Asian countries. Expect to pay hundreds of rupees in India, or thousands
> >> of rupees in Indonesia.
> >>
> >> This concept that money should have low, single digits for everyday
> >> prices is not just Western-centric, it's English-centric. An expresso in
> >> Rome would have cost you a few (tens of?) thousand lira in recent
> >> memory. It was pegging of the Euro to the U.S. dollar that brought
> >> European states in line with the English-speaking world (who themselves
> >> trace lineage to the pound sterling).
> >>
> >> No, there is no culturally-neutral common standards for currency and
> >> pricing. But there are ill-advised, ill-informed "standards" in
> >> accounting software that we nevertheless must live with. These software
> >> packages do not handle more than two decimal places gracefully. That
> >> gives technical justifications for moving to either uBTC or accounting
> >> in Satoshis directly. An argument for uBTC is that it retains alignment
> >> with the existing kBTC/BTC/mBTC/uBTC conventions.
> >>
> >> However another limitation of these accounting software practices is
> >> that they do not always handle SI notation very well, particularly
> >> sub-unit prefixes. By relabeling uBTC to be a new three-digit symbol
> >> (XBT, XBC, IBT, NBC, or whatever--I really don't care), we are now fully
> >> compliant with any software accounting package out there.
> >>
> >> We are still very, very early in the adoption period. These are changes
> >> that could be made now simply by a few big players and/or the bitcoin
> >> foundation changing their practice and their users following suit.
> >>
> >> On 03/14/2014 07:49 AM, Andreas Schildbach wrote:
> >> > How much do you pay for an Espresso in your local currency?
> >> >
> >> > At least for the Euro and the Dollar, mBTC 3.56 is very close to what
> >> > people would expect. Certainly more familiar than ?BTC 3558 or BTC
> >> > 0.003578.
> >> >
> >> > Anyway, I was just sharing real-world experience: nobody is confused.
> >> >
> >> >
> >> > On 03/14/2014 03:14 PM, Tamas Blummer wrote:
> >> >> You give them a hard to interpret thing like mBTC and then wonder
> >> >> why they rather look at local currency. Because the choices you
> >> >> gave them are bad.
> >> >>
> >> >> I think Bitcoin would have a better chance to be percieved as a
> >> >> currency of its own if it had prices and fractions like currencies
> >> >> do.
> >> >>
> >> >> 3.558 mBTC or 0.003578 BTC will never be as accepted as 3558 bits
> >> >> would be.
> >> >>
> >> >>
> >> >> Tamas Blummer Bits of Proof
> >> >>
> >> >> On 14.03.2014, at 15:05, Andreas Schildbach <andreas at schildbach.de>
> >> >> wrote:
> >> >>
> >> >>> btw. None of Bitcoin Wallet's users complained about confusion
> >> >>> because of the mBTC switch. In contrast, I get many mails and
> >> >>> questions if exchange rates happen to differ by >10%.
> >> >>>
> >> >>> I suspect nobody looks at the Bitcoin price. It's the amount in
> >> >>> local currency that matters to the users.
> >> >>>
> >> >>>
> >> >>> On 03/13/2014 02:40 PM, Andreas Schildbach wrote:
> >> >>>> Indeed. And users were crying for mBTC. Nobody was asking for
> >> >>>> ?BTC.
> >> >>>>
> >> >>>> I must admit I was not aware if this thread. I just watched
> >> >>>> other wallets and at some point decided its time to switch to
> >> >>>> mBTC.
> >> >>>>
> >> >>>>
> >> >>>> On 03/13/2014 02:31 PM, Mike Hearn wrote:
> >> >>>>> The standard has become mBTC and that's what was adopted.
> >> >>>>> It's too late to try and sway this on a mailing list thread
> >> >>>>> now.
> >> >>>>>
> >> >>>>>
> >> >>>>> On Thu, Mar 13, 2014 at 2:29 PM, Gary Rowe
> >> >>>>> <g.rowe at froot.co.uk <mailto:g.rowe at froot.co.uk>> wrote:
> >> >>>>>
> >> >>>>> The MultiBit HD view is that this is a locale-sensitive
> >> >>>>> presentation issue. As a result we offer a simple
> >> >>>>> configuration panel giving pretty much every possible
> >> >>>>> combination: icon, m+icon,  ?+icon, BTC, mBTC,  ?BTC, XBT,
> >> >>>>> mXBT,  ?XBT, sat along with settings for leading/trailing
> >> >>>>> symbol, commas, spaces and points. This allows anyone to
> >> >>>>> customise to meet their own needs beyond the offered default.
> >> >>>>>
> >> >>>>>
> >> >>>>> We apply the NIST guidelines for representation of SI unit
> >> >>>>> symbols (i.e no conversion to native language, no RTL giving
> >> >>>>> icon+m etc).
> >> >>>>>
> >> >>>>> Right now MultiBit HD is configured to use m+icon taken from
> >> >>>>> the Font Awesome icon set. However reading earlier posts it
> >> >>>>> seems that ?+icon is more sensible.
> >> >>>>>
> >> >>>>> Let us know what you'd like.
> >> >>>>>
> >> >>>>> Links: m+icon screenshot: http://imgur.com/a/WCDoG Font
> >> >>>>> Awesome icon:
> >> >>>>> http://fortawesome.github.io/Font-Awesome/icon/btc/ NIST SI
> >> >>>>> guidelines: http://physics.nist.gov/Pubs/SP811/sec07.html
> >> >>>>>
> >> >>>>>
> >> >>>>> On 13 March 2014 12:56, Jeff Garzik <jgarzik at bitpay.com
> >> >>>>> <mailto:jgarzik at bitpay.com>> wrote:
> >> >>>>>
> >> >>>>> Resurrecting this topic.  Bitcoin Wallet moved to mBTC
> >> >>>>> several weeks ago, which was disappointing -- it sounded like
> >> >>>>> the consensus was uBTC, and moving to uBTC later --which will
> >> >>>>> happen-- may result in additional user confusion, thanks to
> >> >>>>> yet another decimal place transition.
> >> >>>>>
> >> >>>>>
> >> >>>>>
> >> >>>>> On Sun, Nov 17, 2013 at 9:28 PM, Wendell <w at grabhive.com
> >> >>>>> <mailto:w at grabhive.com>> wrote:
> >> >>>>>> We're with uBTC too. Been waiting for the signal to do
> >> >>>>>> this,
> >> >>>>> let's do it right after the fee system is improved.
> >> >>>>>>
> >> >>>>>> -wendell
> >> >>>>>>
> >> >>>>>> grabhive.com <http://grabhive.com> |
> >> >>>>>> twitter.com/hivewallet
> >> >>>>> <http://twitter.com/hivewallet> | gpg: 6C0C9411
> >> >>>>>>
> >> >>>>>> On Nov 15, 2013, at 6:03 AM, Jeff Garzik wrote:
> >> >>>>>>
> >> >>>>>>> Go straight to uBTC. Humans and existing computer
> >> >>>>>>> systems
> >> >>>>> handle numbers to
> >> >>>>>>> the left of the decimals just fine (HK Dollars, Yen).
> >> >>>>>>> The
> >> >>>>> opposite is
> >> >>>>>>> untrue (QuickBooks really does not like 3+ decimal
> >> >>>>>>> places).
> >> >>>>>>
> >> >>>>>
> >> >>>>>
> >> >>>>>
> >> >>>>> -- Jeff Garzik Bitcoin core developer and open source
> >> >>>>> evangelist BitPay, Inc.      https://bitpay.com/
> >> >>>>>
> >> >>>>>
> >> >>>>>
> ------------------------------------------------------------------------------
> >> >>>>>
> >> >>>>>
> >> > Learn Graph Databases - Download FREE O'Reilly Book
> >> >>>>> "Graph Databases" is the definitive new guide to graph
> >> >>>>> databases and their applications. Written by three acclaimed
> >> >>>>> leaders in the field, this first edition is now available.
> >> >>>>> Download your free book today!
> >> >>>>> http://p.sf.net/sfu/13534_NeoTech
> >> >>>>> _______________________________________________
> >> >>>>> Bitcoin-development mailing list
> >> >>>>> Bitcoin-development at lists.sourceforge.net
> >> >>>>> <mailto:Bitcoin-development at lists.sourceforge.net>
> >> >>>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> >> >>>>>
> >> >>>>>
> >> >>>>>
> >> >>>>>
> >> >>>>>
> >> >
> >> >
> ------------------------------------------------------------------------------
> >> >>>>> Learn Graph Databases - Download FREE O'Reilly Book "Graph
> >> >>>>> Databases" is the definitive new guide to graph databases
> >> >>>>> and their applications. Written by three acclaimed leaders in
> >> >>>>> the field, this first edition is now available. Download your
> >> >>>>> free book today! http://p.sf.net/sfu/13534_NeoTech
> >> >>>>> _______________________________________________
> >> >>>>> Bitcoin-development mailing list
> >> >>>>> Bitcoin-development at lists.sourceforge.net
> >> >>>>> <mailto:Bitcoin-development at lists.sourceforge.net>
> >> >>>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> >> >>>>>
> >> >>>>>
> >> >>>>>
> >> >>>>>
> >> >>>>>
> >> >>>>>
> >> >
> >> >
> ------------------------------------------------------------------------------
> >> >>>>> Learn Graph Databases - Download FREE O'Reilly Book "Graph
> >> >>>>> Databases" is the definitive new guide to graph databases and
> >> >>>>> their applications. Written by three acclaimed leaders in the
> >> >>>>> field, this first edition is now available. Download your
> >> >>>>> free book today! http://p.sf.net/sfu/13534_NeoTech
> >> >>>>>
> >> >>>>>
> >> >>>>>
> >> >>>>> _______________________________________________
> >> >>>>> Bitcoin-development mailing list
> >> >>>>> Bitcoin-development at lists.sourceforge.net
> >> >>>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> >> >>>>>
> >> >>>>
> >> >>>>
> >> >>>>
> >> >>>>
> >> >>>>>
> >> >
> >> >
> ------------------------------------------------------------------------------
> >> >>>> Learn Graph Databases - Download FREE O'Reilly Book "Graph
> >> >>>> Databases" is the definitive new guide to graph databases and
> >> >>>> their applications. Written by three acclaimed leaders in the
> >> >>>> field, this first edition is now available. Download your free
> >> >>>> book today! http://p.sf.net/sfu/13534_NeoTech
> >> >>>> _______________________________________________
> >> >>>> Bitcoin-development mailing list
> >> >>>> Bitcoin-development at lists.sourceforge.net
> >> >>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> >> >>>>
> >> >>>
> >> >>>
> >> >>>
> >> >>>
> >> >>>>
> >> >
> >> >
> ------------------------------------------------------------------------------
> >> >>> Learn Graph Databases - Download FREE O'Reilly Book "Graph
> >> >>> Databases" is the definitive new guide to graph databases and
> >> >>> their applications. Written by three acclaimed leaders in the
> >> >>> field, this first edition is now available. Download your free
> >> >>> book today! http://p.sf.net/sfu/13534_NeoTech
> >> >>> _______________________________________________
> >> >>> Bitcoin-development mailing list
> >> >>> Bitcoin-development at lists.sourceforge.net
> >> >>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> >> >>
> >> >>
> >> >>
> >> >>
> >> >>
> ------------------------------------------------------------------------------
> >> >>
> >> >>
> >> > Learn Graph Databases - Download FREE O'Reilly Book
> >> >> "Graph Databases" is the definitive new guide to graph databases
> >> >> and their applications. Written by three acclaimed leaders in the
> >> >> field, this first edition is now available. Download your free book
> >> >> today! http://p.sf.net/sfu/13534_NeoTech
> >> >>
> >> >>
> >> >>
> >> >> _______________________________________________ Bitcoin-development
> >> >> mailing list Bitcoin-development at lists.sourceforge.net
> >> >> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> >> >>
> >> >
> >> >
> >> >
> >> >
> >> >
> ------------------------------------------------------------------------------
> >> > Learn Graph Databases - Download FREE O'Reilly Book
> >> > "Graph Databases" is the definitive new guide to graph databases and
> >> > their
> >> > applications. Written by three acclaimed leaders in the field,
> >> > this first edition is now available. Download your free book today!
> >> > http://p.sf.net/sfu/13534_NeoTech
> >> > _______________________________________________
> >> > Bitcoin-development mailing list
> >> > Bitcoin-development at lists.sourceforge.net
> >> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> >> >
> >>
> >>
> >>
> ------------------------------------------------------------------------------
> >> Learn Graph Databases - Download FREE O'Reilly Book
> >> "Graph Databases" is the definitive new guide to graph databases and
> their
> >> applications. Written by three acclaimed leaders in the field,
> >> this first edition is now available. Download your free book today!
> >> http://p.sf.net/sfu/13534_NeoTech
> >> _______________________________________________
> >> Bitcoin-development mailing list
> >> Bitcoin-development at lists.sourceforge.net
> >> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> >
> >
> >
> >
> ------------------------------------------------------------------------------
> > Learn Graph Databases - Download FREE O'Reilly Book
> > "Graph Databases" is the definitive new guide to graph databases and
> their
> > applications. Written by three acclaimed leaders in the field,
> > this first edition is now available. Download your free book today!
> > http://p.sf.net/sfu/13534_NeoTech
> > _______________________________________________
> > Bitcoin-development mailing list
> > Bitcoin-development at lists.sourceforge.net
> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> >
>
>
> ------------------------------------------------------------------------------
> Learn Graph Databases - Download FREE O'Reilly Book
> "Graph Databases" is the definitive new guide to graph databases and their
> applications. Written by three acclaimed leaders in the field,
> this first edition is now available. Download your free book today!
> http://p.sf.net/sfu/13534_NeoTech
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140314/32c3a2d7/attachment.html>

From vv01f at riseup.net  Fri Mar 14 17:14:05 2014
From: vv01f at riseup.net (vv01f)
Date: Fri, 14 Mar 2014 18:14:05 +0100
Subject: [Bitcoin-development] moving the default display to mbtc
In-Reply-To: <CAC1+kJPF17cWEc9J1cEeyBerQvfrHVEXy7L8VUs+Mz7TpWW4eg@mail.gmail.com>
References: <CAKaEYhK4oXH3hB7uS3=AEkA6r0VB5OYyTua+LOP18rq+rYajHg@mail.gmail.com>
	<52852C2D.9020103@gmail.com> <52853D8A.6010501@monetize.io>
	<CAJHLa0M6CkoDbD6FFixf9-mmhug7DvehSWCJ+EHWVxUDuwNiBg@mail.gmail.com>
	<EE02A310-8604-4811-B2D0-FC32C72C20F3@grabhive.com>
	<CAJHLa0OMcTCgGESi-F4jT2NA3FyCeMYbD_52j47t3keEYBfK8g@mail.gmail.com>
	<CA+s+GJBSGPBQWWYR1NYSc2E4Y1BWAn8zf7xsu4wQ1O8cA8OWbw@mail.gmail.com>
	<CAJHLa0NEEppHg_Lmi_Oxnz_gPSHZPfQpeg+-8MrvFYDmdM83-g@mail.gmail.com>
	<20140313160850.GW3180@nl.grid.coop>
	<CAC1+kJOQfhFaMs34STGOeqbmHdv6bVis7o57BcF3=XYudNw_Lg@mail.gmail.com>
	<CANEZrP1CtsXV7m=qpJ1px1cQw9C7AkDYXe7Op8gQqg2+VK3mYA@mail.gmail.com>
	<CAC1+kJPF17cWEc9J1cEeyBerQvfrHVEXy7L8VUs+Mz7TpWW4eg@mail.gmail.com>
Message-ID: <532338DD.4050901@riseup.net>

I think
* if we change to mBTC because your state currencys price for bitcoin
make this a valid option we will change again in future
* users do not like changes
* we should keep a good standard

A good standard should be
* built on standards (e.g. SI)
* backed by best practice: never force the user to take an option he
cannot change
* do not make changes without users permission
* take care of users at fault when entering 5.967 ot should be pointed
out before sending that e.g.
the sw understood 5967.000 000 00 BTC
instead of 5.967 000 00 BTC
because the user failed to use the correct delimiter.

For now a good standard is
* simply bitcoin as BTC with eight decimal places
or could be
* uBTC as SI prefix, probably using XBT as a symbol for compatibility
with other software
* satoshis (w. SI prefixes if numbers are to big) for regions where
decimal places in prices are uncommon

So I'd prefer:
Make the choice transparent to users and set a standard that the user
alway should be empowered to use all available decimal places.
And there should be a set of official test-cases for wallet software and
the desired behavior.



From boydb at midnightdesign.ws  Fri Mar 14 17:49:19 2014
From: boydb at midnightdesign.ws (Brooks Boyd)
Date: Fri, 14 Mar 2014 12:49:19 -0500
Subject: [Bitcoin-development] Physical key / edge detection software
 and PIN to generate private key
In-Reply-To: <CAMPt2UN=ySXRP04cB+Cx3frF0u9F2yWoHCVZsvz5VG=ZEaZJCw@mail.gmail.com>
References: <CAMPt2UN=ySXRP04cB+Cx3frF0u9F2yWoHCVZsvz5VG=ZEaZJCw@mail.gmail.com>
Message-ID: <CANg-TZB3snv+ny5NdwMic_NtSbMCvt_=qSViJHXeTsdU2Qnygg@mail.gmail.com>

On Thu, Mar 13, 2014 at 9:38 PM, Jack Scott <jack.scott.public at gmail.com>wrote:

> BIP: XX
> Title: Physical key / edge detection software and PIN to generate a
> Bitcoin private key
> Author: Jack Scott
> Status: Idea
> Type: Standard Track
> Created: 13-3-2014
>
> Abstract:
> A method is proposed to generate a Bitcoin private key by using a physical
> key in conjunction with image recognition software and a PIN.  Use edge
> detection software applied to incoming video feed to convert the shape of a
> physical key into an equation that describes the key.  The hash of the
> key's equation plus a user generated five digit pin can then be used to
> create a Bitcoin private key.
>
>
Interesting idea, though as Wladimir mentioned, a real-world "key" is much
less secure than a Bitcoin/PGP "key", though in this case, I could see your
physical/visual "key" being any complex, high-contrast image (like a Motion
Tracking Target: https://www.google.com/search?q=tracking+markers&tbm=isch),
if just using edge-detection (a high-contrast image would help make
low-light or out-of-focus shots still able to be detected), though like a
QR-code, it should probably have calibration markers in the corners to
specify orientation (would help decoding a skewed or rotated image) and the
standard should enforce some minimum level of complexity to prevent really
simple and easy-to-reproduce/steal keys .

Though if you're getting to that level of complexity, you might as well
just have a QR code of the private key.

Brooks
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140314/8a14c327/attachment.html>

From natanael.l at gmail.com  Fri Mar 14 20:13:18 2014
From: natanael.l at gmail.com (Natanael)
Date: Fri, 14 Mar 2014 21:13:18 +0100
Subject: [Bitcoin-development] moving the default display to mbtc
In-Reply-To: <532338DD.4050901@riseup.net>
References: <CAKaEYhK4oXH3hB7uS3=AEkA6r0VB5OYyTua+LOP18rq+rYajHg@mail.gmail.com>
	<52852C2D.9020103@gmail.com> <52853D8A.6010501@monetize.io>
	<CAJHLa0M6CkoDbD6FFixf9-mmhug7DvehSWCJ+EHWVxUDuwNiBg@mail.gmail.com>
	<EE02A310-8604-4811-B2D0-FC32C72C20F3@grabhive.com>
	<CAJHLa0OMcTCgGESi-F4jT2NA3FyCeMYbD_52j47t3keEYBfK8g@mail.gmail.com>
	<CA+s+GJBSGPBQWWYR1NYSc2E4Y1BWAn8zf7xsu4wQ1O8cA8OWbw@mail.gmail.com>
	<CAJHLa0NEEppHg_Lmi_Oxnz_gPSHZPfQpeg+-8MrvFYDmdM83-g@mail.gmail.com>
	<20140313160850.GW3180@nl.grid.coop>
	<CAC1+kJOQfhFaMs34STGOeqbmHdv6bVis7o57BcF3=XYudNw_Lg@mail.gmail.com>
	<CANEZrP1CtsXV7m=qpJ1px1cQw9C7AkDYXe7Op8gQqg2+VK3mYA@mail.gmail.com>
	<CAC1+kJPF17cWEc9J1cEeyBerQvfrHVEXy7L8VUs+Mz7TpWW4eg@mail.gmail.com>
	<532338DD.4050901@riseup.net>
Message-ID: <CAAt2M197HHXxa8iDLc_pS3y5hsyckG-Z_G_dQ_dGxXO4pFJcsw@mail.gmail.com>

Regarding (ISO standards) currency symbols, XBT is already used as
equivalent to 1 Bitcoin in numerous places, and XBC is taken and BT*
belongs to Bhutan (and X** is already the default for non-national currency
common items of trade), so IMHO we should define something like XUB as
microbitcoins so we can have a symbol that doesn't require changing any
existing systems and that can be standardized globally. Then those with
accounting software that needs to deal with something that has two decimals
maximum without losing precision can use that while following well defined
standards. And those who don't like large numbers can still chose to show
mBTC.

- Sent from my phone
Den 14 mar 2014 18:18 skrev "vv01f" <vv01f at riseup.net>:

> I think
> * if we change to mBTC because your state currencys price for bitcoin
> make this a valid option we will change again in future
> * users do not like changes
> * we should keep a good standard
>
> A good standard should be
> * built on standards (e.g. SI)
> * backed by best practice: never force the user to take an option he
> cannot change
> * do not make changes without users permission
> * take care of users at fault when entering 5.967 ot should be pointed
> out before sending that e.g.
> the sw understood 5967.000 000 00 BTC
> instead of 5.967 000 00 BTC
> because the user failed to use the correct delimiter.
>
> For now a good standard is
> * simply bitcoin as BTC with eight decimal places
> or could be
> * uBTC as SI prefix, probably using XBT as a symbol for compatibility
> with other software
> * satoshis (w. SI prefixes if numbers are to big) for regions where
> decimal places in prices are uncommon
>
> So I'd prefer:
> Make the choice transparent to users and set a standard that the user
> alway should be empowered to use all available decimal places.
> And there should be a set of official test-cases for wallet software and
> the desired behavior.
>
>
> ------------------------------------------------------------------------------
> Learn Graph Databases - Download FREE O'Reilly Book
> "Graph Databases" is the definitive new guide to graph databases and their
> applications. Written by three acclaimed leaders in the field,
> this first edition is now available. Download your free book today!
> http://p.sf.net/sfu/13534_NeoTech
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140314/563f1dde/attachment.html>

From odinn.cyberguerrilla at riseup.net  Fri Mar 14 21:56:11 2014
From: odinn.cyberguerrilla at riseup.net (Odinn Cyberguerrilla)
Date: Fri, 14 Mar 2014 14:56:11 -0700
Subject: [Bitcoin-development] moving the default display to mbtc
In-Reply-To: <CAJHLa0OMcTCgGESi-F4jT2NA3FyCeMYbD_52j47t3keEYBfK8g@mail.gmail.com>
References: <CAKaEYhK4oXH3hB7uS3=AEkA6r0VB5OYyTua+LOP18rq+rYajHg@mail.gmail.com>
	<52852C2D.9020103@gmail.com> <52853D8A.6010501@monetize.io>
	<CAJHLa0M6CkoDbD6FFixf9-mmhug7DvehSWCJ+EHWVxUDuwNiBg@mail.gmail.com>
	<EE02A310-8604-4811-B2D0-FC32C72C20F3@grabhive.com>
	<CAJHLa0OMcTCgGESi-F4jT2NA3FyCeMYbD_52j47t3keEYBfK8g@mail.gmail.com>
Message-ID: <272c4ca07f30d794b3f88137eebc2412.squirrel@fulvetta.riseup.net>

Hello,

I see a lot of talk on this topic and get the senst that it is focused on
default display only regarding the mBTC / uBTC questions.  However, if the
focus is broader, involving whether or how to express other currencies or
moving further along to what that might even mean (since many people have
different ideas about what a currency is) perhaps there is another issue
to open, or a process BIP to address how to display other concepts, for
example:

other currencies

microdonations

etc.

I sense however that may be outside the scope of this thread, so I'll just
stop here and try to read samples of the other stuff going on here.

-Odinn
http://abis.io

> Resurrecting this topic.  Bitcoin Wallet moved to mBTC several weeks
> ago, which was disappointing -- it sounded like the consensus was
> uBTC, and moving to uBTC later --which will happen-- may result in
> additional user confusion, thanks to yet another decimal place
> transition.
>
>
>
> On Sun, Nov 17, 2013 at 9:28 PM, Wendell <w at grabhive.com> wrote:
>> We're with uBTC too. Been waiting for the signal to do this, let's do it
>> right after the fee system is improved.
>>
>> -wendell
>>
>> grabhive.com | twitter.com/hivewallet | gpg: 6C0C9411
>>
>> On Nov 15, 2013, at 6:03 AM, Jeff Garzik wrote:
>>
>>> Go straight to uBTC. Humans and existing computer systems handle
>>> numbers to
>>> the left of the decimals just fine (HK Dollars, Yen). The opposite is
>>> untrue (QuickBooks really does not like 3+ decimal places).
>>
>
>
>
> --
> Jeff Garzik
> Bitcoin core developer and open source evangelist
> BitPay, Inc.      https://bitpay.com/
>
> ------------------------------------------------------------------------------
> Learn Graph Databases - Download FREE O'Reilly Book
> "Graph Databases" is the definitive new guide to graph databases and their
> applications. Written by three acclaimed leaders in the field,
> this first edition is now available. Download your free book today!
> http://p.sf.net/sfu/13534_NeoTech
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>





From pete at petertodd.org  Sat Mar 15 13:43:40 2014
From: pete at petertodd.org (Peter Todd)
Date: Sat, 15 Mar 2014 09:43:40 -0400
Subject: [Bitcoin-development] python-bitcoinlib v0.1 release - a low-level
 Python2/3 interface to the Bitcoin protocol
Message-ID: <20140315134340.GA12937@savin>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256

I noticed that the ngccbase Colored Coin client(1) added a
python-bitcoinlib dependency, specifically my fork. In addition there is
also now a rudementary python-bitcoinlib package in archlinux.

So with that in mind I'm releasing v0.1, perhaps somewhat arbitrarily:

    https://github.com/petertodd/python-bitcoinlib/tree/v0.1

This Python2/3 library provides an easy interface to the bitcoin data
structures and protocol. The approach is low-level and "ground up", with
a focus on providing tools to manipulate the internals of how Bitcoin
works in a Pythonic way, without straying far from the Bitcoin Core
implementation.

The current status of the library as of v0.1 is that the support for
data-structures related to transactions, scripting, addresses, and keys
are all quite usable and the API is probably not going to change that
much. Bitcoin Core RPC support is included and automatically converts
the JSON to/from Python objects when appropriate.  EvalScript(),
VerifyScript(), and SignatureHash() are all functional and pass all the
Bitcoin Core unittests, as well as a few that are still yet to be
merged.(2) You'll find some examples for signing pay2script-hash and
p2sh txouts in the examples/ directory; I personally used the
transaction signing functionality to make up a set of unittests related
to OP_CODESEPARATOR and FindAndDelete() recently. Finally my dust-b-gone
script(3) is another good example, specifically of the RPC
functionality.

I personally haven't had any need for the p2p network related code for
some time, so I'm sure it's not in a good state and it lacks unittests;
Bloom filters for one are missing the merkle-block support to actually
make them useful. But the RPC support makes up for that for many uses.

This release and others in the future are signed by my PGP key, as well
as every publicly pushed commit. You can verify the key via WoT, my
bitcointalk account, signing history in the Bitcoin Core repo, and
mailing list records among other sources.

Disclaimer: This is alpha code in a language not known for type-safety.
            I wouldn't personally use python-bitcoinlib for anything
            other than experiments and neither should you.

1) https://github.com/bitcoinx/ngcccbase
2) https://github.com/bitcoin/bitcoin/pull/3861
3) https://github.com/petertodd/dust-b-gone

- -- 
'peter'[:-1]@petertodd.org
000000000000000097649e8d66395b3cb4527263409adf628c76cc56af0434fe
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.14 (GNU/Linux)

iQGrBAEBCACVBQJTJFkFXhSAAAAAABUAQGJsb2NraGFzaEBiaXRjb2luLm9yZzAw
MDAwMDAwMDAwMDAwMDA3OGEyNGUxNTBlNTc2ZGVjZWUyYWQzMGNhMmE2YTRhMmM3
NGVkYmJkNjM2NDViNjcvFIAAAAAAFQARcGthLWFkZHJlc3NAZ251cGcub3JncGV0
ZUBwZXRlcnRvZC5vcmcACgkQJIFAPaXwkftZiwgAk8YVN9t76tKIKcWKyrGgv8yk
UZGZkkrowED0lyhMXfmviezeWhjvHZgQrwha2hAuik36WEBN1jnv9wuJ6g9tnxGY
PyG8n1SV2rtQ/QIJyL6wOuqL3UZi6d6IdZ/udVmyGwz+XhE89AwitR0++MvxkPNv
i9R3Gw5Z1CnS2W0jGpAT88k3q3pqEzbYutP/FaylL2+6MuSUGwHUoY8dqcRkwkw1
eIrd2W33x4NvuxYPLnHR64uE0B8KoreZOyyskMdeMsKtZNflkfgfMiD10xnw2PGx
z8S42wPbrI5ZYLL1OLdRfuKMdQ4qOyF4jfV+QRZWQ5t5Qh1akVWmz7ffFHGo0Q==
=k1pi
-----END PGP SIGNATURE-----



From pete at petertodd.org  Sat Mar 15 14:34:14 2014
From: pete at petertodd.org (Peter Todd)
Date: Sat, 15 Mar 2014 10:34:14 -0400
Subject: [Bitcoin-development] python-bitcoinlib v0.1 release - a
 low-level Python2/3 interface to the Bitcoin protocol
In-Reply-To: <20140315134340.GA12937@savin>
References: <20140315134340.GA12937@savin>
Message-ID: <20140315143414.GA5308@savin>

On Sat, Mar 15, 2014 at 09:43:40AM -0400, Peter Todd wrote:
> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA256
> 
> I noticed that the ngccbase Colored Coin client(1) added a
> python-bitcoinlib dependency, specifically my fork. In addition there is
> also now a rudementary python-bitcoinlib package in archlinux.

Also, for those who don't know the history of python-bitcoinlib, credit
where credit is due: my fork is based on Jeff Garzik's implementation(1)
and the bulk of the code structure is his work, modulo "pythonizing"
that I have done.

1) https://github.com/jgarzik/python-bitcoinlib

-- 
'peter'[:-1]@petertodd.org
000000000000000090aa23d86521312897686912946b38e93a71a98a8c287d4a
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 685 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140315/81b3fba5/attachment.sig>

From jgarzik at bitpay.com  Sat Mar 15 16:47:00 2014
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Sat, 15 Mar 2014 12:47:00 -0400
Subject: [Bitcoin-development] python-bitcoinlib v0.1 release - a
 low-level Python2/3 interface to the Bitcoin protocol
In-Reply-To: <20140315143414.GA5308@savin>
References: <20140315134340.GA12937@savin> <20140315143414.GA5308@savin>
Message-ID: <CAJHLa0OyS=mwD=9buthJ_AWKwybtNaRw1t-xPU6rG2FB9awA=w@mail.gmail.com>

Thanks -- though credit is really due to ArtForz, who kicked off this
project with his half-a-node: http://pastebin.com/ZSM7iHZw

On Sat, Mar 15, 2014 at 10:34 AM, Peter Todd <pete at petertodd.org> wrote:
> On Sat, Mar 15, 2014 at 09:43:40AM -0400, Peter Todd wrote:
>> -----BEGIN PGP SIGNED MESSAGE-----
>> Hash: SHA256
>>
>> I noticed that the ngccbase Colored Coin client(1) added a
>> python-bitcoinlib dependency, specifically my fork. In addition there is
>> also now a rudementary python-bitcoinlib package in archlinux.
>
> Also, for those who don't know the history of python-bitcoinlib, credit
> where credit is due: my fork is based on Jeff Garzik's implementation(1)
> and the bulk of the code structure is his work, modulo "pythonizing"
> that I have done.
>
> 1) https://github.com/jgarzik/python-bitcoinlib
>
> --
> 'peter'[:-1]@petertodd.org
> 000000000000000090aa23d86521312897686912946b38e93a71a98a8c287d4a



-- 
Jeff Garzik
Bitcoin core developer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From jgarzik at bitpay.com  Sat Mar 15 16:47:53 2014
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Sat, 15 Mar 2014 12:47:53 -0400
Subject: [Bitcoin-development] python-bitcoinlib v0.1 release - a
 low-level Python2/3 interface to the Bitcoin protocol
In-Reply-To: <20140315134340.GA12937@savin>
References: <20140315134340.GA12937@savin>
Message-ID: <CAJHLa0PDkOBHpwWPqy1HTwWRscSDQY2Vs8fmEghZAMTUzJtmMA@mail.gmail.com>

Sounds great.  I'm glad to see this with a more active maintainer.
Maintaining -three- client libs was a bit much for me.

On Sat, Mar 15, 2014 at 9:43 AM, Peter Todd <pete at petertodd.org> wrote:
> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA256
>
> I noticed that the ngccbase Colored Coin client(1) added a
> python-bitcoinlib dependency, specifically my fork. In addition there is
> also now a rudementary python-bitcoinlib package in archlinux.
>
> So with that in mind I'm releasing v0.1, perhaps somewhat arbitrarily:
>
>     https://github.com/petertodd/python-bitcoinlib/tree/v0.1
>
> This Python2/3 library provides an easy interface to the bitcoin data
> structures and protocol. The approach is low-level and "ground up", with
> a focus on providing tools to manipulate the internals of how Bitcoin
> works in a Pythonic way, without straying far from the Bitcoin Core
> implementation.
>
> The current status of the library as of v0.1 is that the support for
> data-structures related to transactions, scripting, addresses, and keys
> are all quite usable and the API is probably not going to change that
> much. Bitcoin Core RPC support is included and automatically converts
> the JSON to/from Python objects when appropriate.  EvalScript(),
> VerifyScript(), and SignatureHash() are all functional and pass all the
> Bitcoin Core unittests, as well as a few that are still yet to be
> merged.(2) You'll find some examples for signing pay2script-hash and
> p2sh txouts in the examples/ directory; I personally used the
> transaction signing functionality to make up a set of unittests related
> to OP_CODESEPARATOR and FindAndDelete() recently. Finally my dust-b-gone
> script(3) is another good example, specifically of the RPC
> functionality.
>
> I personally haven't had any need for the p2p network related code for
> some time, so I'm sure it's not in a good state and it lacks unittests;
> Bloom filters for one are missing the merkle-block support to actually
> make them useful. But the RPC support makes up for that for many uses.
>
> This release and others in the future are signed by my PGP key, as well
> as every publicly pushed commit. You can verify the key via WoT, my
> bitcointalk account, signing history in the Bitcoin Core repo, and
> mailing list records among other sources.
>
> Disclaimer: This is alpha code in a language not known for type-safety.
>             I wouldn't personally use python-bitcoinlib for anything
>             other than experiments and neither should you.
>
> 1) https://github.com/bitcoinx/ngcccbase
> 2) https://github.com/bitcoin/bitcoin/pull/3861
> 3) https://github.com/petertodd/dust-b-gone
>
> - --
> 'peter'[:-1]@petertodd.org
> 000000000000000097649e8d66395b3cb4527263409adf628c76cc56af0434fe
> -----BEGIN PGP SIGNATURE-----
> Version: GnuPG v1.4.14 (GNU/Linux)
>
> iQGrBAEBCACVBQJTJFkFXhSAAAAAABUAQGJsb2NraGFzaEBiaXRjb2luLm9yZzAw
> MDAwMDAwMDAwMDAwMDA3OGEyNGUxNTBlNTc2ZGVjZWUyYWQzMGNhMmE2YTRhMmM3
> NGVkYmJkNjM2NDViNjcvFIAAAAAAFQARcGthLWFkZHJlc3NAZ251cGcub3JncGV0
> ZUBwZXRlcnRvZC5vcmcACgkQJIFAPaXwkftZiwgAk8YVN9t76tKIKcWKyrGgv8yk
> UZGZkkrowED0lyhMXfmviezeWhjvHZgQrwha2hAuik36WEBN1jnv9wuJ6g9tnxGY
> PyG8n1SV2rtQ/QIJyL6wOuqL3UZi6d6IdZ/udVmyGwz+XhE89AwitR0++MvxkPNv
> i9R3Gw5Z1CnS2W0jGpAT88k3q3pqEzbYutP/FaylL2+6MuSUGwHUoY8dqcRkwkw1
> eIrd2W33x4NvuxYPLnHR64uE0B8KoreZOyyskMdeMsKtZNflkfgfMiD10xnw2PGx
> z8S42wPbrI5ZYLL1OLdRfuKMdQ4qOyF4jfV+QRZWQ5t5Qh1akVWmz7ffFHGo0Q==
> =k1pi
> -----END PGP SIGNATURE-----



-- 
Jeff Garzik
Bitcoin core developer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From jgarzik at bitpay.com  Sat Mar 15 17:21:36 2014
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Sat, 15 Mar 2014 13:21:36 -0400
Subject: [Bitcoin-development] python-bitcoinlib v0.1 release - a
 low-level Python2/3 interface to the Bitcoin protocol
In-Reply-To: <CANAnSg00ofpESqm4EoJ4gde5HpajLb2dukvK8yO80bK2AMwnAw@mail.gmail.com>
References: <20140315134340.GA12937@savin>
	<CAJHLa0PDkOBHpwWPqy1HTwWRscSDQY2Vs8fmEghZAMTUzJtmMA@mail.gmail.com>
	<CANAnSg00ofpESqm4EoJ4gde5HpajLb2dukvK8yO80bK2AMwnAw@mail.gmail.com>
Message-ID: <CAJHLa0O=eNeFAUjxE8ve2W27Pyi7XHgAnC_8CCqGPwrcC+iXXA@mail.gmail.com>

I am happy to do whatever makes the new maintainer and users most
happy.  That includes giving the new maintainer commit privs in my
repo.


On Sat, Mar 15, 2014 at 1:12 PM, Drak <drak at zikula.org> wrote:
> Would it make sense to pull that stuff in and add Peter with commit access
> since your repo is top of the fork tree.
>
> Drak
>
>
> On 15 March 2014 16:47, Jeff Garzik <jgarzik at bitpay.com> wrote:
>>
>> Sounds great.  I'm glad to see this with a more active maintainer.
>> Maintaining -three- client libs was a bit much for me.
>>
>> On Sat, Mar 15, 2014 at 9:43 AM, Peter Todd <pete at petertodd.org> wrote:
>> > -----BEGIN PGP SIGNED MESSAGE-----
>> > Hash: SHA256
>> >
>> > I noticed that the ngccbase Colored Coin client(1) added a
>> > python-bitcoinlib dependency, specifically my fork. In addition there is
>> > also now a rudementary python-bitcoinlib package in archlinux.
>> >
>> > So with that in mind I'm releasing v0.1, perhaps somewhat arbitrarily:
>> >
>> >     https://github.com/petertodd/python-bitcoinlib/tree/v0.1
>> >
>> > This Python2/3 library provides an easy interface to the bitcoin data
>> > structures and protocol. The approach is low-level and "ground up", with
>> > a focus on providing tools to manipulate the internals of how Bitcoin
>> > works in a Pythonic way, without straying far from the Bitcoin Core
>> > implementation.
>> >
>> > The current status of the library as of v0.1 is that the support for
>> > data-structures related to transactions, scripting, addresses, and keys
>> > are all quite usable and the API is probably not going to change that
>> > much. Bitcoin Core RPC support is included and automatically converts
>> > the JSON to/from Python objects when appropriate.  EvalScript(),
>> > VerifyScript(), and SignatureHash() are all functional and pass all the
>> > Bitcoin Core unittests, as well as a few that are still yet to be
>> > merged.(2) You'll find some examples for signing pay2script-hash and
>> > p2sh txouts in the examples/ directory; I personally used the
>> > transaction signing functionality to make up a set of unittests related
>> > to OP_CODESEPARATOR and FindAndDelete() recently. Finally my dust-b-gone
>> > script(3) is another good example, specifically of the RPC
>> > functionality.
>> >
>> > I personally haven't had any need for the p2p network related code for
>> > some time, so I'm sure it's not in a good state and it lacks unittests;
>> > Bloom filters for one are missing the merkle-block support to actually
>> > make them useful. But the RPC support makes up for that for many uses.
>> >
>> > This release and others in the future are signed by my PGP key, as well
>> > as every publicly pushed commit. You can verify the key via WoT, my
>> > bitcointalk account, signing history in the Bitcoin Core repo, and
>> > mailing list records among other sources.
>> >
>> > Disclaimer: This is alpha code in a language not known for type-safety.
>> >             I wouldn't personally use python-bitcoinlib for anything
>> >             other than experiments and neither should you.
>> >
>> > 1) https://github.com/bitcoinx/ngcccbase
>> > 2) https://github.com/bitcoin/bitcoin/pull/3861
>> > 3) https://github.com/petertodd/dust-b-gone
>> >
>> > - --
>> > 'peter'[:-1]@petertodd.org
>> > 000000000000000097649e8d66395b3cb4527263409adf628c76cc56af0434fe
>> > -----BEGIN PGP SIGNATURE-----
>> > Version: GnuPG v1.4.14 (GNU/Linux)
>> >
>> > iQGrBAEBCACVBQJTJFkFXhSAAAAAABUAQGJsb2NraGFzaEBiaXRjb2luLm9yZzAw
>> > MDAwMDAwMDAwMDAwMDA3OGEyNGUxNTBlNTc2ZGVjZWUyYWQzMGNhMmE2YTRhMmM3
>> > NGVkYmJkNjM2NDViNjcvFIAAAAAAFQARcGthLWFkZHJlc3NAZ251cGcub3JncGV0
>> > ZUBwZXRlcnRvZC5vcmcACgkQJIFAPaXwkftZiwgAk8YVN9t76tKIKcWKyrGgv8yk
>> > UZGZkkrowED0lyhMXfmviezeWhjvHZgQrwha2hAuik36WEBN1jnv9wuJ6g9tnxGY
>> > PyG8n1SV2rtQ/QIJyL6wOuqL3UZi6d6IdZ/udVmyGwz+XhE89AwitR0++MvxkPNv
>> > i9R3Gw5Z1CnS2W0jGpAT88k3q3pqEzbYutP/FaylL2+6MuSUGwHUoY8dqcRkwkw1
>> > eIrd2W33x4NvuxYPLnHR64uE0B8KoreZOyyskMdeMsKtZNflkfgfMiD10xnw2PGx
>> > z8S42wPbrI5ZYLL1OLdRfuKMdQ4qOyF4jfV+QRZWQ5t5Qh1akVWmz7ffFHGo0Q==
>> > =k1pi
>> > -----END PGP SIGNATURE-----
>>
>>
>>
>> --
>> Jeff Garzik
>> Bitcoin core developer and open source evangelist
>> BitPay, Inc.      https://bitpay.com/
>>
>>
>> ------------------------------------------------------------------------------
>> Learn Graph Databases - Download FREE O'Reilly Book
>> "Graph Databases" is the definitive new guide to graph databases and their
>> applications. Written by three acclaimed leaders in the field,
>> this first edition is now available. Download your free book today!
>> http://p.sf.net/sfu/13534_NeoTech
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>



-- 
Jeff Garzik
Bitcoin core developer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From pete at petertodd.org  Sat Mar 15 17:22:54 2014
From: pete at petertodd.org (Peter Todd)
Date: Sat, 15 Mar 2014 13:22:54 -0400
Subject: [Bitcoin-development] python-bitcoinlib v0.1 release - a
 low-level Python2/3 interface to the Bitcoin protocol
In-Reply-To: <CANAnSg00ofpESqm4EoJ4gde5HpajLb2dukvK8yO80bK2AMwnAw@mail.gmail.com>
References: <20140315134340.GA12937@savin>
	<CAJHLa0PDkOBHpwWPqy1HTwWRscSDQY2Vs8fmEghZAMTUzJtmMA@mail.gmail.com>
	<CANAnSg00ofpESqm4EoJ4gde5HpajLb2dukvK8yO80bK2AMwnAw@mail.gmail.com>
Message-ID: <20140315172254.GA18318@savin>

On Sat, Mar 15, 2014 at 05:12:42PM +0000, Drak wrote:
> Would it make sense to pull that stuff in and add Peter with commit access
> since your repo is top of the fork tree.

I've noticed it looks like people actually using my 'pythonize' code
have been linking directly to my tree in things like documentation and
build scripts, so the URL is probably not a problem.

I did open a pull-req on the bitcoin.org repo to change that URL
however: https://github.com/bitcoin/bitcoin.org/pull/346

-- 
'peter'[:-1]@petertodd.org
0000000000000000ef4a047ecc7077b7855626b9c9bf07e528e0c6ace2da30a8
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 685 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140315/b1940acd/attachment.sig>

From drak at zikula.org  Sat Mar 15 17:12:42 2014
From: drak at zikula.org (Drak)
Date: Sat, 15 Mar 2014 17:12:42 +0000
Subject: [Bitcoin-development] python-bitcoinlib v0.1 release - a
 low-level Python2/3 interface to the Bitcoin protocol
In-Reply-To: <CAJHLa0PDkOBHpwWPqy1HTwWRscSDQY2Vs8fmEghZAMTUzJtmMA@mail.gmail.com>
References: <20140315134340.GA12937@savin>
	<CAJHLa0PDkOBHpwWPqy1HTwWRscSDQY2Vs8fmEghZAMTUzJtmMA@mail.gmail.com>
Message-ID: <CANAnSg00ofpESqm4EoJ4gde5HpajLb2dukvK8yO80bK2AMwnAw@mail.gmail.com>

Would it make sense to pull that stuff in and add Peter with commit access
since your repo is top of the fork tree.

Drak


On 15 March 2014 16:47, Jeff Garzik <jgarzik at bitpay.com> wrote:

> Sounds great.  I'm glad to see this with a more active maintainer.
> Maintaining -three- client libs was a bit much for me.
>
> On Sat, Mar 15, 2014 at 9:43 AM, Peter Todd <pete at petertodd.org> wrote:
> > -----BEGIN PGP SIGNED MESSAGE-----
> > Hash: SHA256
> >
> > I noticed that the ngccbase Colored Coin client(1) added a
> > python-bitcoinlib dependency, specifically my fork. In addition there is
> > also now a rudementary python-bitcoinlib package in archlinux.
> >
> > So with that in mind I'm releasing v0.1, perhaps somewhat arbitrarily:
> >
> >     https://github.com/petertodd/python-bitcoinlib/tree/v0.1
> >
> > This Python2/3 library provides an easy interface to the bitcoin data
> > structures and protocol. The approach is low-level and "ground up", with
> > a focus on providing tools to manipulate the internals of how Bitcoin
> > works in a Pythonic way, without straying far from the Bitcoin Core
> > implementation.
> >
> > The current status of the library as of v0.1 is that the support for
> > data-structures related to transactions, scripting, addresses, and keys
> > are all quite usable and the API is probably not going to change that
> > much. Bitcoin Core RPC support is included and automatically converts
> > the JSON to/from Python objects when appropriate.  EvalScript(),
> > VerifyScript(), and SignatureHash() are all functional and pass all the
> > Bitcoin Core unittests, as well as a few that are still yet to be
> > merged.(2) You'll find some examples for signing pay2script-hash and
> > p2sh txouts in the examples/ directory; I personally used the
> > transaction signing functionality to make up a set of unittests related
> > to OP_CODESEPARATOR and FindAndDelete() recently. Finally my dust-b-gone
> > script(3) is another good example, specifically of the RPC
> > functionality.
> >
> > I personally haven't had any need for the p2p network related code for
> > some time, so I'm sure it's not in a good state and it lacks unittests;
> > Bloom filters for one are missing the merkle-block support to actually
> > make them useful. But the RPC support makes up for that for many uses.
> >
> > This release and others in the future are signed by my PGP key, as well
> > as every publicly pushed commit. You can verify the key via WoT, my
> > bitcointalk account, signing history in the Bitcoin Core repo, and
> > mailing list records among other sources.
> >
> > Disclaimer: This is alpha code in a language not known for type-safety.
> >             I wouldn't personally use python-bitcoinlib for anything
> >             other than experiments and neither should you.
> >
> > 1) https://github.com/bitcoinx/ngcccbase
> > 2) https://github.com/bitcoin/bitcoin/pull/3861
> > 3) https://github.com/petertodd/dust-b-gone
> >
> > - --
> > 'peter'[:-1]@petertodd.org
> > 000000000000000097649e8d66395b3cb4527263409adf628c76cc56af0434fe
> > -----BEGIN PGP SIGNATURE-----
> > Version: GnuPG v1.4.14 (GNU/Linux)
> >
> > iQGrBAEBCACVBQJTJFkFXhSAAAAAABUAQGJsb2NraGFzaEBiaXRjb2luLm9yZzAw
> > MDAwMDAwMDAwMDAwMDA3OGEyNGUxNTBlNTc2ZGVjZWUyYWQzMGNhMmE2YTRhMmM3
> > NGVkYmJkNjM2NDViNjcvFIAAAAAAFQARcGthLWFkZHJlc3NAZ251cGcub3JncGV0
> > ZUBwZXRlcnRvZC5vcmcACgkQJIFAPaXwkftZiwgAk8YVN9t76tKIKcWKyrGgv8yk
> > UZGZkkrowED0lyhMXfmviezeWhjvHZgQrwha2hAuik36WEBN1jnv9wuJ6g9tnxGY
> > PyG8n1SV2rtQ/QIJyL6wOuqL3UZi6d6IdZ/udVmyGwz+XhE89AwitR0++MvxkPNv
> > i9R3Gw5Z1CnS2W0jGpAT88k3q3pqEzbYutP/FaylL2+6MuSUGwHUoY8dqcRkwkw1
> > eIrd2W33x4NvuxYPLnHR64uE0B8KoreZOyyskMdeMsKtZNflkfgfMiD10xnw2PGx
> > z8S42wPbrI5ZYLL1OLdRfuKMdQ4qOyF4jfV+QRZWQ5t5Qh1akVWmz7ffFHGo0Q==
> > =k1pi
> > -----END PGP SIGNATURE-----
>
>
>
> --
> Jeff Garzik
> Bitcoin core developer and open source evangelist
> BitPay, Inc.      https://bitpay.com/
>
>
> ------------------------------------------------------------------------------
> Learn Graph Databases - Download FREE O'Reilly Book
> "Graph Databases" is the definitive new guide to graph databases and their
> applications. Written by three acclaimed leaders in the field,
> this first edition is now available. Download your free book today!
> http://p.sf.net/sfu/13534_NeoTech
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140315/ba78b661/attachment.html>

From drak at zikula.org  Sat Mar 15 18:04:37 2014
From: drak at zikula.org (Drak)
Date: Sat, 15 Mar 2014 18:04:37 +0000
Subject: [Bitcoin-development] python-bitcoinlib v0.1 release - a
 low-level Python2/3 interface to the Bitcoin protocol
In-Reply-To: <20140315172254.GA18318@savin>
References: <20140315134340.GA12937@savin>
	<CAJHLa0PDkOBHpwWPqy1HTwWRscSDQY2Vs8fmEghZAMTUzJtmMA@mail.gmail.com>
	<CANAnSg00ofpESqm4EoJ4gde5HpajLb2dukvK8yO80bK2AMwnAw@mail.gmail.com>
	<20140315172254.GA18318@savin>
Message-ID: <CANAnSg0GYk3fRoj-7FZsoWGUw3+2drwaOKWC1UgywfFAgi6gGA@mail.gmail.com>

Yes. I think the problem is your fork has been under more development and
upstream has stalled. The problem with this is it becomes unclear which
repo is the main one as it really has become a fork and of course then
development really does fork properly which is a shame because it doesn't
nurture community contributions around the project which is really
important.

Drak



On 15 March 2014 17:22, Peter Todd <pete at petertodd.org> wrote:

> On Sat, Mar 15, 2014 at 05:12:42PM +0000, Drak wrote:
> > Would it make sense to pull that stuff in and add Peter with commit
> access
> > since your repo is top of the fork tree.
>
> I've noticed it looks like people actually using my 'pythonize' code
> have been linking directly to my tree in things like documentation and
> build scripts, so the URL is probably not a problem.
>
> I did open a pull-req on the bitcoin.org repo to change that URL
> however: https://github.com/bitcoin/bitcoin.org/pull/346
>
> --
> 'peter'[:-1]@petertodd.org
> 0000000000000000ef4a047ecc7077b7855626b9c9bf07e528e0c6ace2da30a8
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140315/c00ca7df/attachment.html>

From sam at samtheham.org  Sun Mar 16 07:04:13 2014
From: sam at samtheham.org (Sam Michaels)
Date: Sun, 16 Mar 2014 02:04:13 -0500
Subject: [Bitcoin-development] External IP Address
Message-ID: <CAHLiGBPJbpeX887irHYWgWquRv8QTBBR7s4gNZ8KE9y3ZAwJnA@mail.gmail.com>

Hello devs.

I was poking around in the code for a small project and I came across the
function GetMyExternalIP() in net.cpp.  The comment says you'd like to
phase out the current method.

I threw together exactly what was asked in the comments: it's a site that
has PHP echo the IP address.  Additionally, it captures the IP, user agent,
and time for analysis (a client with the same IP and user agent just
updates the entry).

The site for the client is: ip.bitcheck.us.  It does a quick search for
"Mozilla" in the user agent to redirect browers that go there.

The following information is sent:

---
GET / HTTP/1.1
Host: ip.bitcheck.us
User-Agent: /Satoshi:0.8.6/
Connection: close
---

And following is received:

---
HTTP/1.1 200 OK
Date: Sun, 16 Mar 2014 05:31:51 GMT
Server: Apache mod_fcgid/2.3.10-dev
X-Powered-By: Satoshi v1.0
X-Client-Update: yes
Content-Length: 9
Connection: close
Content-Type: text/html

127.0.0.1
---

You can look for X-Client-Update to see if the check in was logged.  Other
information can be passed in the header, too.

Errors are trapped so that it will always display the IP address and any
error information is contained in the headers.

Hope you find this useful.

Sam
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140316/8acf5218/attachment.html>

From laanwj at gmail.com  Sun Mar 16 10:22:25 2014
From: laanwj at gmail.com (Wladimir)
Date: Sun, 16 Mar 2014 11:22:25 +0100
Subject: [Bitcoin-development] External IP Address
In-Reply-To: <CAHLiGBPJbpeX887irHYWgWquRv8QTBBR7s4gNZ8KE9y3ZAwJnA@mail.gmail.com>
References: <CAHLiGBPJbpeX887irHYWgWquRv8QTBBR7s4gNZ8KE9y3ZAwJnA@mail.gmail.com>
Message-ID: <CA+s+GJAiJTiuO-FC5cLSBi9qBAnd+HoZDdkNrJH3hGAO8hCsPQ@mail.gmail.com>

Sam,

On Sun, Mar 16, 2014 at 8:04 AM, Sam Michaels <sam at samtheham.org> wrote:

> You can look for X-Client-Update to see if the check in was logged.  Other
> information can be passed in the header, too.
>
> Errors are trapped so that it will always display the IP address and any
> error information is contained in the headers.
>
> Hope you find this useful.
>

Thanks for your effort.

However the current idea is to phase out reliance on centralized external
services completely in favor of peer-based address detection.

See https://github.com/bitcoin/bitcoin/pull/3461

Wladimir
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140316/cbd99de9/attachment.html>

From thomasv1 at gmx.de  Sun Mar 16 13:24:43 2014
From: thomasv1 at gmx.de (Thomas Voegtlin)
Date: Sun, 16 Mar 2014 14:24:43 +0100
Subject: [Bitcoin-development] Electrum 1.9.8 release
Message-ID: <5325A61B.6050802@gmx.de>

I am happy to announce the release of Electrum 1.9.8.
This release includes some features initially planned for version 2.0.

Packages are available on https://electrum.org/download.html (signed by me)
Binaries for windows and mac will be available in the coming days

enjoy

Thomas
-----------------------

RELEASE NOTES

# Release 1.9.8

(This release includes features initially planned for version 2.0)

* Electrum servers were upgraded to version 0.9. The new server stores
   a Patrica tree of all UTXOs, an idea proposed by Alan Reiner in the
   bitcointalk forum. This property allows the client to directly
   request the balance of any address. The new commands are:
      1. getaddressbalance <address>
      2. getaddressunspent <address>
      3. getutxoaddress <txid> <pos>

* In addition, two commands for message encryption were added:
      1. encrypt <pubkey> <message>
      2. decrypt <pubkey> <message>

   The encryption algorithm is ECIES, and code was was borrowed from
   https://github.com/jackjack-jj/jeeq.  In order to know the public
   key corresponding to a Bitcoin address in your wallet, you can use
   the 'getpubkeys' command. The 'decrypt' command assumes that the
   wallet has the private key corresponding to the public key passed as
   argument.

* The encrypt and decrypt functions are available in the Qt GUI (from
   the menubar, or right click on one of your addresses if you want to
   use its public key).

* Command-line commands that require a connection to the network spawn
   a daemon, that remains connected and handles subsequent
   commands. The daemon terminates itself if it remains unused for more
   than one minute. The purpose of this is to make scripting more
   efficient. For example, a bash script using many electrum commands
   will open only one connection.




From spameden at gmail.com  Sun Mar 16 13:31:31 2014
From: spameden at gmail.com (spameden)
Date: Sun, 16 Mar 2014 17:31:31 +0400
Subject: [Bitcoin-development] mailing list to get news ONLY about new
	releases
Message-ID: <CAHCALeyT9oRZCPGbOcHJLai5k-ga8VrpaXL_1YmgFs2knik4jw@mail.gmail.com>

Hi everyone.

Is there a mailing list where I can get only notifications about NEW
releases of bitcoin-qt client?

So far I've found only RSS subscription here:
https://bitcoin.org/en/rss/releases.rss

RSS is not convinient at all for me..

Many thanks.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140316/f489aa54/attachment.html>

From gmaxwell at gmail.com  Sun Mar 16 13:54:49 2014
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Sun, 16 Mar 2014 06:54:49 -0700
Subject: [Bitcoin-development] Electrum 1.9.8 release
In-Reply-To: <5325A61B.6050802@gmx.de>
References: <5325A61B.6050802@gmx.de>
Message-ID: <CAAS2fgR766pjD43bZawuJH9VQ7S0dQRGY9HetOuj9HR3Pk=1_A@mail.gmail.com>

On Sun, Mar 16, 2014 at 6:24 AM, Thomas Voegtlin <thomasv1 at gmx.de> wrote:
>    The encryption algorithm is ECIES, and code was was borrowed from
>    https://github.com/jackjack-jj/jeeq.  In order to know the public
>    key corresponding to a Bitcoin address in your wallet, you can use
>    the 'getpubkeys' command. The 'decrypt' command assumes that the
>    wallet has the private key corresponding to the public key passed as
>    argument.

The cryptosystem in that repository appears to be insecure in several
ways and is not actually implementing ECIES.

The most important of which is that instead of using a
cryptographically strong mac tied to the ephemeral secret it uses a
trivial 16 bit check value.  This means that that I can decode an
arbitrary message encrypted to a third person if they allow me to make
no more than 65536 queries to a decryption oracle to decrypt some
other message.

Also, in the event that a random query to a decryption oracle yields a
result (1:2^16 times) the result directly reveals the ECDH value
because it is only additively combined with the message value. If the
implementation does not check if the nonce point is on the curve (an
easy implementation mistake) the result can yield a point on the twist
instead of the curve which is far more vulnerable to recovery of the
private key.  ECIES uses a KDF instead of using the ECDH result
directly to avoid this.

There may be other problems (or mitigating factors) as it was very
hard for me to follow what it was actually doing.

(The particular implementation has a number of other issues, like
apparently not using a cryptographically strong RNG for its EC nonce..
but I assume you didn't copy that particular flaw)



From thomasv1 at gmx.de  Sun Mar 16 14:31:24 2014
From: thomasv1 at gmx.de (Thomas Voegtlin)
Date: Sun, 16 Mar 2014 15:31:24 +0100
Subject: [Bitcoin-development] Electrum 1.9.8 release
In-Reply-To: <CAAS2fgR766pjD43bZawuJH9VQ7S0dQRGY9HetOuj9HR3Pk=1_A@mail.gmail.com>
References: <5325A61B.6050802@gmx.de>
	<CAAS2fgR766pjD43bZawuJH9VQ7S0dQRGY9HetOuj9HR3Pk=1_A@mail.gmail.com>
Message-ID: <5325B5BC.3030501@gmx.de>

thanks for your feedback!

I was not aware that that implementation was flawed.
I will see how I can fix that code and get back to you.

Thomas



Le 16/03/2014 14:54, Gregory Maxwell a ?crit :
> On Sun, Mar 16, 2014 at 6:24 AM, Thomas Voegtlin <thomasv1 at gmx.de> wrote:
>>     The encryption algorithm is ECIES, and code was was borrowed from
>>     https://github.com/jackjack-jj/jeeq.  In order to know the public
>>     key corresponding to a Bitcoin address in your wallet, you can use
>>     the 'getpubkeys' command. The 'decrypt' command assumes that the
>>     wallet has the private key corresponding to the public key passed as
>>     argument.
> The cryptosystem in that repository appears to be insecure in several
> ways and is not actually implementing ECIES.
>
> The most important of which is that instead of using a
> cryptographically strong mac tied to the ephemeral secret it uses a
> trivial 16 bit check value.  This means that that I can decode an
> arbitrary message encrypted to a third person if they allow me to make
> no more than 65536 queries to a decryption oracle to decrypt some
> other message.
>
> Also, in the event that a random query to a decryption oracle yields a
> result (1:2^16 times) the result directly reveals the ECDH value
> because it is only additively combined with the message value. If the
> implementation does not check if the nonce point is on the curve (an
> easy implementation mistake) the result can yield a point on the twist
> instead of the curve which is far more vulnerable to recovery of the
> private key.  ECIES uses a KDF instead of using the ECDH result
> directly to avoid this.
>
> There may be other problems (or mitigating factors) as it was very
> hard for me to follow what it was actually doing.
>
> (The particular implementation has a number of other issues, like
> apparently not using a cryptographically strong RNG for its EC nonce..
> but I assume you didn't copy that particular flaw)




From gmaxwell at gmail.com  Sun Mar 16 14:39:11 2014
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Sun, 16 Mar 2014 07:39:11 -0700
Subject: [Bitcoin-development] Electrum 1.9.8 release
In-Reply-To: <5325B5BC.3030501@gmx.de>
References: <5325A61B.6050802@gmx.de>
	<CAAS2fgR766pjD43bZawuJH9VQ7S0dQRGY9HetOuj9HR3Pk=1_A@mail.gmail.com>
	<5325B5BC.3030501@gmx.de>
Message-ID: <CAAS2fgQfrnBt3oVNOX4OPJ-3dM+77WMkFDhU-NFBUGEwWSFz-w@mail.gmail.com>

On Sun, Mar 16, 2014 at 7:31 AM, Thomas Voegtlin <thomasv1 at gmx.de> wrote:
> thanks for your feedback!
>
> I was not aware that that implementation was flawed.
> I will see how I can fix that code and get back to you.

It also leaks on the order of 7 bits of data about the message per
message chunk.  I'm also think it's likely that there are some
messages which are just incorrectly decrypted.   ... it's really
screwy and suspect.



From thomasv1 at gmx.de  Sun Mar 16 15:48:21 2014
From: thomasv1 at gmx.de (Thomas Voegtlin)
Date: Sun, 16 Mar 2014 16:48:21 +0100
Subject: [Bitcoin-development] Electrum 1.9.8 release
In-Reply-To: <CAAS2fgQfrnBt3oVNOX4OPJ-3dM+77WMkFDhU-NFBUGEwWSFz-w@mail.gmail.com>
References: <5325A61B.6050802@gmx.de>	<CAAS2fgR766pjD43bZawuJH9VQ7S0dQRGY9HetOuj9HR3Pk=1_A@mail.gmail.com>	<5325B5BC.3030501@gmx.de>
	<CAAS2fgQfrnBt3oVNOX4OPJ-3dM+77WMkFDhU-NFBUGEwWSFz-w@mail.gmail.com>
Message-ID: <5325C7C5.3070802@gmx.de>

Thanks again for having a look.

Given these problems, I have decided to remove
the encryption methods from the current release.
I retagged 1.9.8 and updated the packages.

Thomas



Le 16/03/2014 15:39, Gregory Maxwell a ?crit :
> On Sun, Mar 16, 2014 at 7:31 AM, Thomas Voegtlin <thomasv1 at gmx.de> wrote:
>> thanks for your feedback!
>>
>> I was not aware that that implementation was flawed.
>> I will see how I can fix that code and get back to you.
> It also leaks on the order of 7 bits of data about the message per
> message chunk.  I'm also think it's likely that there are some
> messages which are just incorrectly decrypted.   ... it's really
> screwy and suspect.




From adam at cypherspace.org  Sun Mar 16 22:58:19 2014
From: adam at cypherspace.org (Adam Back)
Date: Sun, 16 Mar 2014 15:58:19 -0700
Subject: [Bitcoin-development] 2-way pegging (Re: is there a way to do
	bitcoin-staging?)
In-Reply-To: <20131014180807.GA32082@netbook.cypherspace.org>
References: <20130519132359.GA12366@netbook.cypherspace.org>
	<CAMGNxUsGRyYWepSn4on+V9CJAj0J8oSXndo36OrrCyMhvKnoxA@mail.gmail.com>
	<5199C3DE.901@gmail.com>
	<20131014180807.GA32082@netbook.cypherspace.org>
Message-ID: <20140316225819.GA19846@netbook.cypherspace.org>

So an update on 1-way pegging (aka bitcoin staging, explained in quoted text
at bottom): it turns out secure 2-way pegging is also possible (with some
bitcoin change to help support it).  The interesting thing is this allows
interoperability in terms of being able to move bitcoin into and out of a
side chain.  The side chains may have some different parameters, or
experimental things people might want to come up with (subject to some
minimum compatibility at the level of being able to produce an SPV proof of
a given form).

At the time of the 1-way peg discussion I considered 2-way peg as desirable
and it seemed plausible with bitcoin changes, but the motivation for 1-way
peg was to make it less risky to make changes on bitcoin, so that seemed
like a catch-22 loop.  Also in the 2-way peg thought experiment I had not
realized how simple it was to still impose a security firewall in the 2-way
peg also.


So Greg Maxwell proposed in Dec last year a practically compact way to do
2-way pegging using SPV proofs.  And also provided a simple argument of how
this can provide a security firewall.  (Security firewall means the impact
of security bugs on the side-chain is limited to the people with coins in
it; bitcoin holders who did not use it are unaffected). [1]

How it works:

1. to maintain the 21m coins promise, you start a side-chain with no
in-chain mining subsidy, all bitcoin creation happens on bitcoin chain (as
with 1-way peg).  Reach a reasonable hash rate.  (Other semantics than 1:1
peg should be possible, but this is the base case).

2. you move coins to the side-chain by spending them to a fancy script,
which suspends them, and allows them to be reanimated by the production of
an SPV proof of burn on the side-chain.

3. the side-chain has no mining reward, but it allows you to mint coins at
no mining cost by providing an SPV proof that the coin has been suspended as
in 2 on bitcoin.  The SPV proof must be buried significantly before being
used to reduce risk of reorganization.  The side-chain is an SPV client to
the bitcoin network, and so maintains a view of the bitcoin hash chain (but
not the block data).

4. the bitcoin chain is firewalled from security bugs on the side chain,
because bitcoin imposes the rule that no more coins can be reanimated than
are currently suspend (with respect to a given chain).

5. to simplify what they hypothetical bitcoin change would need to consider
and understand, after a coin is reanimated there is a maturity period
imposed (say same as fresh mined coins).  During the maturity period the
reanimation script allows a fraud proof to spend the coins back.  A fraud
bounty fee (equal to the reanimate fee) can be offered by the mover to
incentivize side-chain full nodes to watch reanimations and search for fraud
proofs.

6. a fraud proof is an SPV proof with a longer chain showing that the proof
of burn was orphaned.

There are a few options to compress the SPV proof, via Fiat-Shamir transform
to provide a compact proof of amount work contained in a merkle tree of
proofs of work (as proposed by Fabien Coelho link on
http://hashcash.org/papers/) with params like 90% of work is proven.  But
better is something Greg proposed based on skip-lists organized in a tree,
where 'lucky' proofs of work are used to skip back further.  (Recalling that
if you search for a 64-bit leading-0 proof-of-work, half the time you get a
65-bit, quarter 66-bit etc.)  With this mechanism you can accurately
prove the amount of proof of work in a compressed tree (rather than ~90%).


Apart from pegging from bitcoin to a side-chain, if a private chain is made
with same rules to the side-chain it becomes possible with some
modifications to the above algorithm to peg the side-chain to a private
chain.  Private chain meaning a chain with the same format but signature of
single server in place of hashing, and timestamping of the block signatures
in the mined side chain.  And then reactive security on top of that by full
nodes/auditors trying to find fraud proofs (rewrites of history relative to
side-chain mined time-stamp or approved double-spends).  The reaction is to
publish a fraud proof and move coins back to the side chain, and then
regroup on a new server.  (Open transactions has this audit + reactive model
but as far as I know does it via escrow, eg the voting pools for k of n
escrow of the assets on the private server.) I also proposed the same
reactive audit model but for auditable namespaces [4].

Private chains add some possiblity for higher scaling, while retaining
bitcoin security properties.  (You need to add the ability for a user to
unilaterally move his coins to the side-chain they came from in event the
chain server refuses to process transactions involving them.  This appears
to be possible if you have compatible formats on the private chain and
side-chain).


This pegging discussion involved a number of #bitcoin-wizards, Greg Maxwell,
Matt Corallo, Pieter Wuille, Jorge Timon, Mark Freidenbach, Luke Dashjr. 
The 2-way peg seems to have first been described by Greg.  Greg thought of
2-way pegging in the context of ZK-SNARKS and the coinwitness thread [2]. 
(As a ZK-SNARK could compactly prove full validation of a side chain rules).

There was also something seemingly similar sounding but not described in
detail by Alex Mizrahi in the context of color coins in this post [3].

Adam

[1] http://download.wpsoftware.net/bitcoin/wizards/2013-12-18.txt
[2] https://bitcointalk.org/index.php?topic=277389.40
[3] https://bitcointalk.org/index.php?topic=277389.msg4167554#msg4167554
[4] http://www.cypherspace.org/p2p/auditable-namespace.html

On Mon, Oct 14, 2013 at 08:08:07PM +0200, Adam Back wrote:
>Coming back to the staging idea, maybe this is a realistic model that could
>work.  The objective being to provide a way for bitcoin to move to a live
>beta and stable being worked on in parallel like fedora vs RHEL or odd/even
>linux kernel versions.
>
>Development runs in parallel on bitcoin 1.x beta (betacoin) and bitcoin 0.x
>stable and leap-frogs as beta becomes stable after testing.
>
>Its a live beta, meaning real value, real contracts.  But we dont want it to
>be an alt-coin with a floating value exactly, we want it to be bitcoin, but
>the bleeding edge bitcoin so we want to respect the 21 million coin limit,
>and allow coins to move between bitcoin and betacoin with some necessary
>security related restrictions.
>
>There is no mining reward on the betacoin network (can be merge mined for
>security), and the way you opt to move a bitcoin into the betacoin network
>is to mark it as transferred in some UTXO recognized way.  It cant be
>reanimated, its dead.  (eg spend to a specific recognized invalid address on
>the bitcoin network).  In this way its not really a destruction, but a move,
>moving the coin from bitcoin to betacoin network.
>
>This respects the 21 million coin cap, and avoids betacoin bugs flowing back
>and affecting bitcoin security or value-store properties.  Users may buy or
>swap betacoin for bitcoin to facilitate moving money back from betacoin to
>bitcoin.  However that is market priced so the bitcoin network is security
>insulated from beta.  A significant security bug in beta would cause a
>market freeze, until it is rectified.
>
>The cost of a betacoin is capped at one BTC because no one will pay more
>than one bitcoin for a betacoin because they could alternatively move their
>own coin.  The reverse is market priced.
>
>Once bitcoin beta stabalizes, eg say year or two type of time-frame, a
>decision is reached to promote 1.0 beta to 2.0 stable, the remaining
>bitcoins can be moved, and the old network switched off, with mining past a
>flag day moving to the betacoin.
>
>During the beta period betacoin is NOT an alpha, people can rely on it and
>use it in anger for real value transactions.  eg if it enables more script
>features, or coin coloring, scalabity tweaks etc people can use it. 
>Probably for large value store they are always going to prefer
>bitcoin-stable, but applications that need the coloring features, or
>advanced scripting etc can go ahead and beta.
>
>Bitcoin-stable may pull validated changes and merge them, as a way to pull
>in any features needed in the shorter term and benefit from the betacoin
>validation.  (Testing isnt as much validation as real-money at stake
>survivability).
>
>The arguments are I think that:
>
>- it allows faster development allowing bitcoin to progress features faster,
>
>- it avoids mindshare dilution if alternatively an alt-coin with a hit
>  missing feature takes off;
>
>- it concentrates such useful-feature alt activities into one OPEN source
>  and OPEN control foundation mediated area (rather than suspected land
>  grabs on colored fees or such like bitcoin respun as a business model
>  things),
>
>- maybe gets the developers that would've been working on their pet
>  alt-coin, or their startup alt-coin to work together putting more
>  developers, testers and resources onto something with open control (open
>  source does not necessarily mean that much) and bitcoin mindshare
>  branding, its STILL bitcoin, its just the beta network.
>
>- it respects the 21 million limit, starting new mining races probably
>  dillutes the artificial scarcity semantic
>
>- while insulating bitcoin from betacoin security defects (I dont mean
>  betacoin as a testnet, it should have prudent rigorous testing like
>  bitcoin, just the very act of adding a feature creates risk that bitcoin
>  stable can be hesitant to take).
>
>Probably the main issue as always is more (trustable) very high caliber
>testers and developers.  Maybe if the alt-coin minded startups and
>developers donate their time to bitcoin-beta (or bitcoin-stable) for the
>bits they are missing, we'll get more hands to work on something of reusable
>value to humanity, in parallel with their startup's objectives and as a way
>for them to get their needed features, while giving back to the bitcoin
>community, and helping bitcoin progress faster.
>
>Maybe bitcoin foundation could ask for BTC donations to hire more developers
>and testers full time.  $1.5b of stored value should be interested to safe
>guard their value store, and develop the transaction features.
>
>Adam
>
>On Mon, May 20, 2013 at 02:34:06AM -0400, Alan Reiner wrote:
>>  This is exactly what I was planning to do with the
>>  inappropriately-named "Ultimate Blockchain Compression".  [...]
>>
>>  For it to really work, it's gotta be part of the mainnet validation
>>  rules, but no way it can be evaluated realistically without some kind of
>>  "staging".
>
>>  On 5/19/2013 11:08 AM, Peter Vessenes wrote:
>>
>>  I think this is a very interesting idea. As Bitcoiners, we often stuff
>>  things into the 'alt chain' bucket in our heads; I wonder if this idea
>>  works better as a curing period, essentially an extended version of the
>>  current 100 block wait for mined coins.



From jtimon at monetize.io  Sun Mar 16 23:22:32 2014
From: jtimon at monetize.io (=?ISO-8859-1?Q?Jorge_Tim=F3n?=)
Date: Sun, 16 Mar 2014 16:22:32 -0700
Subject: [Bitcoin-development] 2-way pegging (Re: is there a way to do
	bitcoin-staging?)
In-Reply-To: <20140316225819.GA19846@netbook.cypherspace.org>
References: <20130519132359.GA12366@netbook.cypherspace.org>
	<CAMGNxUsGRyYWepSn4on+V9CJAj0J8oSXndo36OrrCyMhvKnoxA@mail.gmail.com>
	<5199C3DE.901@gmail.com>
	<20131014180807.GA32082@netbook.cypherspace.org>
	<20140316225819.GA19846@netbook.cypherspace.org>
Message-ID: <CAC1+kJOFa8=dXthyWTj5oJN=vkXYvqeKmmr+yG=GM8TFnU_Y6Q@mail.gmail.com>

Some comments.

On 3/16/14, Adam Back <adam at cypherspace.org> wrote:
> 6. a fraud proof is an SPV proof with a longer chain showing that the proof
> of burn was orphaned.

As discussed, "reorg proof" it's a more appropriate term since the
reorg can happen without any fraud. It also prevents the term from
being confused with the fraud proof that auditors (full nodes that
can't create blocks) produce for private chains.

> Apart from pegging from bitcoin to a side-chain, if a private chain is made
> with same rules to the side-chain it becomes possible with some
> modifications to the above algorithm to peg the side-chain to a private
> chain.  Private chain meaning a chain with the same format but signature of
> single server in place of hashing, and timestamping of the block signatures
> in the mined side chain.  And then reactive security on top of that by full
> nodes/auditors trying to find fraud proofs (rewrites of history relative to
> side-chain mined time-stamp or approved double-spends).  The reaction is to
> publish a fraud proof and move coins back to the side chain, and then
> regroup on a new server.  (Open transactions has this audit + reactive
> model
> but as far as I know does it via escrow, eg the voting pools for k of n
> escrow of the assets on the private server.) I also proposed the same
> reactive audit model but for auditable namespaces [4].
>
> Private chains add some possiblity for higher scaling, while retaining
> bitcoin security properties.  (You need to add the ability for a user to
> unilaterally move his coins to the side-chain they came from in event the
> chain server refuses to process transactions involving them.  This appears
> to be possible if you have compatible formats on the private chain and
> side-chain).

In this case you can't require a side chain proof of burn to move back
to the side chain or the funds could be locked by the dishonest
private chain operator (accountant in freimarkets[1] terminology). By
allowing unilateral withdrawals, you impose on the private chain the
task of observing the side chain looking for double-spends, censoring
those transactions or maybe updating its committed utxo when it has
proofs that the coins have been withdrawn.

[1] http://freico.in/docs/freimarkets.pdf
https://github.com/jtimon/freimarkets/blob/master/doc/freimarkets_specs.org#private-ledgers

-- 
Jorge Tim?n

http://freico.in/



From gmaxwell at gmail.com  Mon Mar 17 15:55:41 2014
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Mon, 17 Mar 2014 08:55:41 -0700
Subject: [Bitcoin-development] 2-way pegging (Re: is there a way to do
	bitcoin-staging?)
In-Reply-To: <20140316225819.GA19846@netbook.cypherspace.org>
References: <20130519132359.GA12366@netbook.cypherspace.org>
	<CAMGNxUsGRyYWepSn4on+V9CJAj0J8oSXndo36OrrCyMhvKnoxA@mail.gmail.com>
	<5199C3DE.901@gmail.com>
	<20131014180807.GA32082@netbook.cypherspace.org>
	<20140316225819.GA19846@netbook.cypherspace.org>
Message-ID: <CAAS2fgRk6LaT8RACnM+f612JmUPPO04sJD02SMGvOz=LKzGJsA@mail.gmail.com>

On Sun, Mar 16, 2014 at 3:58 PM, Adam Back <adam at cypherspace.org> wrote:
> 2. you move coins to the side-chain by spending them to a fancy script,
> which suspends them, and allows them to be reanimated by the production of
> an SPV proof of burn on the side-chain.

One point to note here is that the if the whole move and quieting
period stuff sounds
cumbersome? thats because it is. Even with the best efficiency optimizations the
security requirements result in somewhat large and slow transactions?
and thats totally fine!

A key point here is that normally someone who needs to use coins on one chain or
the other can use fast atomic cross-chain transactions[1][2] and not
bother with the
slow direct movement across. The cross chain swapping, however, requires an
(untrusted) counterparty on the other chain, while the 2-way peg migrations can
be performed alone in order to provide liquidity and balance demand.


[1] https://en.bitcoin.it/wiki/Contracts#Example_5:_Trading_across_chains
(Hm the citation there is weird, that predates TierNolan's post)
[2] https://bitcointalk.org/index.php?topic=321228.0
CoinSwap: Transaction graph disjoint trustless trading
(private version)



From mark at monetize.io  Mon Mar 17 17:24:46 2014
From: mark at monetize.io (Mark Friedenbach)
Date: Mon, 17 Mar 2014 10:24:46 -0700
Subject: [Bitcoin-development] Compact SPV proofs via block header
	commitments
Message-ID: <53272FDE.6090602@monetize.io>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

==Abstract==

In simple payment verification (SPV) proofs it is currently necessary
that every intervening block header be provided between two blocks in
order to establish both connectivity and proof of work. By committing to
a hash tree of past block headers in each block, these back references
can be exploited to demonstrate in logarithmic space that an elided
sequence of block headers actually represents the claimed work. This is
particularly useful in the construction of 2-way pegging between chains,
and as an efficiency optimization for SPV clients and headers-first
synchronization.

==Overview==

The miner of a block is allowed to choose some subset of the block
history which it creates direct links back to. These links include the
block hash, height, and work distance from the new block, and are
organized into a hash tree structure. The root of this hash tree is
committed to the coinbase string, or some other identifiable position in
the block. Bitcoin is soft-forked to include verification of the
accuracy of the contents of this structure - if present - as a
validation rule.

When constructing an SPV proof, the prover is allowed to choose
back-links from this structure whose relative work distance is less than
or equal to the apparent work of the proof-of-work which contains the
back-link structure. Apparent work in this context means the expected
work that would be required to meet or exceed the actual block hash.
Since back-links can only be used if the apparent work is greater than
or equal to the distance back, constructing such a fraudulent proof is
expected to require just as much or more work as recreating the
underlying sequence of blocks.

The result is skip list structure where "lucky" proofs of work are used
to skip back further than a single block (recall that if you search for
a 64-bit leading-0 proof of work, half the time you get 65 leading-0's,
a quarter of those cases have 66 leading-0's, and so on). When
constructing very long proofs, the solver will follow links back to the
nearest lucky block, then use the back-links contained within that block
to skip back to a prior lucky block, and so on until it reaches a block
which points directly to the desired target block. Given the
distribution of "lucky" blocks, it is expected that such compact proofs
require revelation of log2 N links in order to prove the work required
to build a chain of length N.

==Back link selection==

In fully general form, this compact SPV proof scheme works no matter the
back-links chosen by miners, so long as they are either revealed or
selected in a deterministic way such that full nodes can check their
validity. In choosing which back-links to include, the primary trade-off
is that more back-links results in better connectivity, whereas a
limited number of links results in smaller tree structures and therefore
fewer hashes.

At one extreme you can commit to every single header in the entire
history of the block chain, by building an incremental data structure
such as a binary heap. Such a structure would require log N storage per
chain and log N hash operations per block update, where N is the total
number of blocks in the chain. The root hash of this structure is then
committed to the block chain in a known location.

At the other extreme one could allow the miner instead to commit
whatever back-links he or she desires, and force these the hash tree
structure to be revealed prior to block validation. This allows the
miner to be selective in choosing back-links which provide the most
value, although there is not yet a clearly optimal mechanism for
choosing these links.

This is an area which requires more research with the purpose of
determining the best structure for the hash tree of block header
commitments, and the selection of back-links.

==Use cases==

For SPV clients, a client that has just come online could quickly
ascertain which block represents the most work, and retrieve compact
proofs-of-inclusion for its transactions without having to download
every intervening block header. This further eliminates the need for
checkpoints in an SPV client as it can instead obtain very compact
proofs back to the genesis block instead of the most recent checkpoint,
at a comparable cost. Similar optimizations apply to the initial stages
of headers-first synchronization of full nodes.

Assuming the availability of (U)TxO hash-tree commitments, a compact SPV
proof would allow a mobile client to very quickly fast-forward to the
current most-work block from which it could then query the spend status
of its wallet outputs.

For merged-mined or slow proof-of-work side chains, the savings from
not including every intervening block header could be very significant
in bandwidth and processing time.

Compact SPV proofs allow side chains or private accounting servers to
experiment with very short block intervals without having a detrimental
effect on SPV proof sizes, as the compact proofs scale logarithmically
with the number of blocks.

Finally the most important and driving use case: symmetrical two-way
pegging between bitcoin and side-chains is made efficient enough to be
reduced to practice by the availability of compact SPV proofs[1]. The
compact SPV proofs allow both the necessary proofs-of-spend and
proofs-of-reorg to fit within current blockchain size limitations, and
provide incentives for keeping this data out of the block chain until it
is absolutely necessary.

==References==

This specific compact SPV proof proposal arose from pegging discussion
involving a number of people #bitcoin-wizards: Greg Maxwell, Matt
Corallo, Pieter Wuille, Luke-Jr, Jorge Timon, and Mark Friedenbach. It
is believed that the first explanation of this general idea is due to
Andrew Miller in his 7 Aug 2012 forum post titled "The High-Value-Hash
Highway"[2].

[1]http://sourceforge.net/p/bitcoin/mailman/message/32108143/
[2]https://bitcointalk.org/index.php?topic=98986.0
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.14 (GNU/Linux)
Comment: GPGTools - http://gpgtools.org
Comment: Using GnuPG with Thunderbird - http://www.enigmail.net/

iQIcBAEBAgAGBQJTJy/eAAoJEAdzVfsmodw4zC4P/izBRTutwypwQ70TxPxxHYfH
I4QOpf+MgWHxrD+DKKyqkC2icgUBQz96K1vEhA86PrmK8DITs5yGHLSw7CEF/rlG
hZErVY65IpowPt+JnlwOqHcqaoJ277s+4qpd/D9F7L1ROAMUDzzonf7V1Znr/fax
lL4b8whfUI5jeRQby/tMiGPUB/1YJcbGmFccTW9gkGWMvoqZiiXcW7ZKuLrq5tbW
RFIsrSt7rv3D0Cp2Fiyaxnryr2F0QOTqahHLn50+585eHpVFrA9A5T6xiBcEMzlQ
l5cHRZb+lVIktWuYomBiqWljPLo5qercVDrehIq9FFSYuJqzudNx9ZXrpF1ZR4in
UfZvlYqMFO/ZOTG33JWeeMonKlVwfHH2WreggzSq/JD/cH8dUj63A266Gaf6cl83
vEfhgVBDTXZnl5H9Z7wymja6R9m9Eo/Xf+GwRV4vyx1b9gcZXML4Zm4bTp4EXFHA
StBGrYKmMpEb/gguk/hxJLsm0i9pVaQpMC0u3kClHTA5o0IFF9F5+mVjOb59HlDX
AQx96TSwJzhl0l0jcxYye8bXmZFJvpzpsKRPwNISllLEagjplwK2Ub8q5du27lH5
R2qukcso6N5weGggUu1f7NrqcBALdz4E80SSpwu4YtJ6wdI4zsypaq4leqbSRSKh
/hLKeOV5fEGNmwTtrDmN
=j9cm
-----END PGP SIGNATURE-----



From gavinandresen at gmail.com  Wed Mar 19 13:26:15 2014
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Wed, 19 Mar 2014 09:26:15 -0400
Subject: [Bitcoin-development] Bitcoin Core version 0.9.0 released
Message-ID: <CABsx9T3wa-ZnkDrYfeHYEy4UftgE+Bwcco2tR0Yn7KqtXHBrAg@mail.gmail.com>

Bitcoin Core version 0.9.0 is now available from:

  https://bitcoin.org/bin/0.9.0/

This is a release candidate for a new major version. A major version brings
both new features and bug fixes.

Please report bugs using the issue tracker at github:

  https://github.com/bitcoin/bitcoin/issues

How to Upgrade
--------------

If you are running an older version, shut it down. Wait until it has
completely
shut down (which might take a few minutes for older versions), uninstall all
earlier versions of Bitcoin, then run the installer (on Windows) or just
copy
over /Applications/Bitcoin-Qt (on Mac) or bitcoind/bitcoin-qt (on Linux).

If you are upgrading from version 0.7.2 or earlier, the first time you run
0.9.0 your blockchain files will be re-indexed, which will take anywhere
from
30 minutes to several hours, depending on the speed of your machine.

On Windows, do not forget to uninstall all earlier versions of the Bitcoin
client first, especially if you are switching to the 64-bit version.

Windows 64-bit installer
-------------------------

New in 0.9.0 is the Windows 64-bit version of the client. There have been
frequent reports of users running out of virtual memory on 32-bit systems
during the initial sync. Because of this it is recommended to install the
64-bit version if your system supports it.

NOTE: Release candidate 2 Windows binaries are not code-signed; use PGP
and the SHA256SUMS.asc file to make sure your binaries are correct.
In the final 0.9.0 release, Windows setup.exe binaries will be code-signed.

OSX 10.5 / 32-bit no longer supported
-------------------------------------

0.9.0 drops support for older Macs. The minimum requirements are now:
* A 64-bit-capable CPU (see http://support.apple.com/kb/ht3696);
* Mac OS 10.6 or later (see https://support.apple.com/kb/ht1633).

Downgrading warnings
--------------------

The 'chainstate' for this release is not always compatible with previous
releases, so if you run 0.9 and then decide to switch back to a
0.8.x release you might get a blockchain validation error when starting the
old release (due to 'pruned outputs' being omitted from the index of
unspent transaction outputs).

Running the old release with the -reindex option will rebuild the chainstate
data structures and correct the problem.

Also, the first time you run a 0.8.x release on a 0.9 wallet it will rescan
the blockchain for missing spent coins, which will take a long time (tens
of minutes on a typical machine).

Rebranding to Bitcoin Core
---------------------------

To reduce confusion between Bitcoin-the-network and Bitcoin-the-software we
have renamed the reference client to Bitcoin Core.

Autotools build system
-----------------------

For 0.9.0 we switched to an autotools-based build system instead of
individual
(q)makefiles.

Using the standard "./autogen.sh; ./configure; make" to build Bitcoin-Qt and
bitcoind makes it easier for experienced open source developers to
contribute
to the project.

Be sure to check doc/build-*.md for your platform before building from
source.

Bitcoin-cli
-------------

Another change in the 0.9 release is moving away from the bitcoind
executable
functioning both as a server and as a RPC client. The RPC client
functionality
("tell the running bitcoin daemon to do THIS") was split into a separate
executable, 'bitcoin-cli'. The RPC client code will eventually be removed
from
bitcoind, but will be kept for backwards compatibility for a release or two.

`walletpassphrase` RPC
-----------------------

The behavior of the `walletpassphrase` RPC when the wallet is already
unlocked
has changed between 0.8 and 0.9.

The 0.8 behavior of `walletpassphrase` is to fail when the wallet is
already unlocked:

    > walletpassphrase 1000
    walletunlocktime = now + 1000
    > walletpassphrase 10
    Error: Wallet is already unlocked (old unlock time stays)

The new behavior of `walletpassphrase` is to set a new unlock time
overriding
the old one:

    > walletpassphrase 1000
    walletunlocktime = now + 1000
    > walletpassphrase 10
    walletunlocktime = now + 10 (overriding the old unlock time)

Transaction malleability-related fixes
--------------------------------------

This release contains a few fixes for transaction ID (TXID) malleability
issues:

- -nospendzeroconfchange command-line option, to avoid spending
  zero-confirmation change
- IsStandard() transaction rules tightened to prevent relaying and mining of
  mutated transactions
- Additional information in listtransactions/gettransaction output to
  report wallet transactions that conflict with each other because
  they spend the same outputs.
- Bug fixes to the getbalance/listaccounts RPC commands, which would report
  incorrect balances for double-spent (or mutated) transactions.
- New option: -zapwallettxes to rebuild the wallet's transaction information

Transaction Fees
----------------

This release drops the default fee required to relay transactions across the
network and for miners to consider the transaction in their blocks to
0.01mBTC per kilobyte.

Note that getting a transaction relayed across the network does NOT
guarantee
that the transaction will be accepted by a miner; by default, miners fill
their blocks with 50 kilobytes of high-priority transactions, and then with
700 kilobytes of the highest-fee-per-kilobyte transactions.

The minimum relay/mining fee-per-kilobyte may be changed with the
minrelaytxfee option. Note that previous releases incorrectly used
the mintxfee setting to determine which low-priority transactions should
be considered for inclusion in blocks.

The wallet code still uses a default fee for low-priority transactions of
0.1mBTC per kilobyte. During periods of heavy transaction volume, even this
fee may not be enough to get transactions confirmed quickly; the mintxfee
option may be used to override the default.

0.9.0 Release notes
=======================

RPC:

- New notion of 'conflicted' transactions, reported as confirmations: -1
- 'listreceivedbyaddress' now provides tx ids
- Add raw transaction hex to 'gettransaction' output
- Updated help and tests for 'getreceivedby(account|address)'
- In 'getblock', accept 2nd 'verbose' parameter, similar to
getrawtransaction,
  but defaulting to 1 for backward compatibility
- Add 'verifychain', to verify chain database at runtime
- Add 'dumpwallet' and 'importwallet' RPCs
- 'keypoolrefill' gains optional size parameter
- Add 'getbestblockhash', to return tip of best chain
- Add 'chainwork' (the total work done by all blocks since the genesis
block)
  to 'getblock' output
- Make RPC password resistant to timing attacks
- Clarify help messages and add examples
- Add 'getrawchangeaddress' call for raw transaction change destinations
- Reject insanely high fees by default in 'sendrawtransaction'
- Add RPC call 'decodescript' to decode a hex-encoded transaction script
- Make 'validateaddress' provide redeemScript
- Add 'getnetworkhashps' to get the calculated network hashrate
- New RPC 'ping' command to request ping, new 'pingtime' and 'pingwait'
fields
  in 'getpeerinfo' output
- Adding new 'addrlocal' field to 'getpeerinfo' output
- Add verbose boolean to 'getrawmempool'
- Add rpc command 'getunconfirmedbalance' to obtain total unconfirmed
balance
- Explicitly ensure that wallet is unlocked in `importprivkey`
- Add check for valid keys in `importprivkey`

Command-line options:

- New option: -nospendzeroconfchange to never spend unconfirmed change
outputs
- New option: -zapwallettxes to rebuild the wallet's transaction information
- Rename option '-tor' to '-onion' to better reflect what it does
- Add '-disablewallet' mode to let bitcoind run entirely without wallet
(when
  built with wallet)
- Update default '-rpcsslciphers' to include TLSv1.2
- make '-logtimestamps' default on and rework help-message
- RPC client option: '-rpcwait', to wait for server start
- Remove '-logtodebugger'
- Allow `-noserver` with bitcoind

Block-chain handling and storage:

- Update leveldb to 1.15
- Check for correct genesis (prevent cases where a datadir from the wrong
  network is accidentally loaded)
- Allow txindex to be removed and add a reindex dialog
- Log aborted block database rebuilds
- Store orphan blocks in serialized form, to save memory
- Limit the number of orphan blocks in memory to 750
- Fix non-standard disconnected transactions causing mempool orphans
- Add a new checkpoint at block 279,000

Wallet:

- Bug fixes and new regression tests to correctly compute
  the balance of wallets containing double-spent (or mutated) transactions
- Store key creation time. Calculate whole-wallet birthday.
- Optimize rescan to skip blocks prior to birthday
- Let user select wallet file with -wallet=foo.dat
- Consider generated coins mature at 101 instead of 120 blocks
- Improve wallet load time
- Don't count txins for priority to encourage sweeping
- Don't create empty transactions when reading a corrupted wallet
- Fix rescan to start from beginning after importprivkey
- Only create signatures with low S values

Mining:

- Increase default -blockmaxsize/prioritysize to 750K/50K
- 'getblocktemplate' does not require a key to create a block template
- Mining code fee policy now matches relay fee policy

Protocol and network:

- Drop the fee required to relay a transaction to 0.01mBTC per kilobyte
- Send tx relay flag with version
- New 'reject' P2P message (BIP 0061, see
  https://gist.github.com/gavinandresen/7079034 for draft)
- Dump addresses every 15 minutes instead of 10 seconds
- Relay OP_RETURN data TxOut as standard transaction type
- Remove CENT-output free transaction rule when relaying
- Lower maximum size for free transaction creation
- Send multiple inv messages if mempool.size > MAX_INV_SZ
- Split MIN_PROTO_VERSION into INIT_PROTO_VERSION and MIN_PEER_PROTO_VERSION
- Do not treat fFromMe transaction differently when broadcasting
- Process received messages one at a time without sleeping between messages
- Improve logging of failed connections
- Bump protocol version to 70002
- Add some additional logging to give extra network insight
- Added new DNS seed from bitcoinstats.com

Validation:

- Log reason for non-standard transaction rejection
- Prune provably-unspendable outputs, and adapt consistency check for it.
- Detect any sufficiently long fork and add a warning
- Call the -alertnotify script when we see a long or invalid fork
- Fix multi-block reorg transaction resurrection
- Reject non-canonically-encoded serialization sizes
- Reject dust amounts during validation
- Accept nLockTime transactions that finalize in the next block

Build system:

- Switch to autotools-based build system
- Build without wallet by passing `--disable-wallet` to configure, this
  removes the BerkeleyDB dependency
- Upgrade gitian dependencies (libpng, libz, libupnpc, boost, openssl) to
more
  recent versions
- Windows 64-bit build support
- Solaris compatibility fixes
- Check integrity of gitian input source tarballs
- Enable full GCC Stack-smashing protection for all OSes

GUI:

- Switch to Qt 5.2.0 for Windows build
- Add payment request (BIP 0070) support
- Improve options dialog
- Show transaction fee in new send confirmation dialog
- Add total balance in overview page
- Allow user to choose data directory on first start, when data directory is
  missing, or when the -choosedatadir option is passed
- Save and restore window positions
- Add vout index to transaction id in transactions details dialog
- Add network traffic graph in debug window
- Add open URI dialog
- Add Coin Control Features
- Improve receive coins workflow: make the 'Receive' tab into a form to
request
  payments, and move historical address list functionality to File menu.
- Rebrand to `Bitcoin Core`
- Move initialization/shutdown to a thread. This prevents "Not responding"
  messages during startup. Also show a window during shutdown.
- Don't regenerate autostart link on every client startup
- Show and store message of normal bitcoin:URI
- Fix richtext detection hang issue on very old Qt versions
- OS X: Make use of the 10.8+ user notification center to display
Growl-like
  notifications
- OS X: Added NSHighResolutionCapable flag to Info.plist for better font
  rendering on Retina displays.
- OS X: Fix bitcoin-qt startup crash when clicking dock icon
- Linux: Fix Gnome bitcoin: URI handler

Miscellaneous:

- Add Linux script (contrib/qos/tc.sh) to limit outgoing bandwidth
- Add '-regtest' mode, similar to testnet but private with instant block
  generation with 'setgenerate' RPC.
- Add 'linearize.py' script to contrib, for creating bootstrap.dat
- Add separate bitcoin-cli client

Credits
--------

Thanks to everyone who contributed to this release:

- Andrey
- Ashley Holman
- b6393ce9-d324-4fe1-996b-acf82dbc3d53
- bitsofproof
- Brandon Dahler
- Calvin Tam
- Christian Decker
- Christian von Roques
- Christopher Latham
- Chuck
- coblee
- constantined
- Cory Fields
- Cozz Lovan
- daniel
- Daniel Larimer
- David Hill
- Dmitry Smirnov
- Drak
- Eric Lombrozo
- fanquake
- fcicq
- Florin
- frewil
- Gavin Andresen
- Gregory Maxwell
- gubatron
- Guillermo C?spedes Tab?rez
- Haakon Nilsen
- HaltingState
- Han Lin Yap
- harry
- Ian Kelling
- Jeff Garzik
- Johnathan Corgan
- Jonas Schnelli
- Josh Lehan
- Josh Triplett
- Julian Langschaedel
- Kangmo
- Lake Denman
- Luke Dashjr
- Mark Friedenbach
- Matt Corallo
- Michael Bauer
- Michael Ford
- Michagogo
- Midnight Magic
- Mike Hearn
- Nils Schneider
- Noel Tiernan
- Olivier Langlois
- patrick s
- Patrick Strateman
- paveljanik
- Peter Todd
- phantomcircuit
- phelixbtc
- Philip Kaufmann
- Pieter Wuille
- Rav3nPL
- R E Broadley
- regergregregerrge
- Robert Backhaus
- Roman Mindalev
- Rune K. Svendsen
- Ryan Niebur
- Scott Ellis
- Scott Willeke
- Sergey Kazenyuk
- Shawn Wilkinson
- Sined
- sje
- Subo1978
- super3
- Tamas Blummer
- theuni
- Thomas Holenstein
- Timon Rapp
- Timothy Stranex
- Tom Geller
- Torstein Huseb?
- Vaclav Vobornik
- vhf / victor felder
- Vinnie Falco
- Warren Togami
- Wil Bown
- Wladimir J. van der Laan
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140319/3570598d/attachment.html>

From gubatron at gmail.com  Wed Mar 19 17:27:08 2014
From: gubatron at gmail.com (Angel Leon)
Date: Wed, 19 Mar 2014 13:27:08 -0400
Subject: [Bitcoin-development] [QT] how to disable block verification for
	faster UI testing?
Message-ID: <CADZB0_aSpu7v0bVV6Po0RonobGVreWTLN7Mya687PbP2t_-oZg@mail.gmail.com>

the command line options mention a -checklevel  parameter.
I've been passing 0 assuming there'd be little to no verification, but it's
happened a few times that when I open the official binary (while not doing
development) there's some sort of database corruption and Bitcoin-Qt needs
to reindex blocks on disk, a process that can take probably a whole day.

how do you guys develop the UI and avoid these issues?

Cheers,
Angel

http://twitter.com/gubatron
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140319/7a70d8e5/attachment.html>

From laanwj at gmail.com  Wed Mar 19 18:22:55 2014
From: laanwj at gmail.com (Wladimir)
Date: Wed, 19 Mar 2014 19:22:55 +0100
Subject: [Bitcoin-development] [QT] how to disable block verification
 for faster UI testing?
In-Reply-To: <CADZB0_aSpu7v0bVV6Po0RonobGVreWTLN7Mya687PbP2t_-oZg@mail.gmail.com>
References: <CADZB0_aSpu7v0bVV6Po0RonobGVreWTLN7Mya687PbP2t_-oZg@mail.gmail.com>
Message-ID: <CA+s+GJDZGS5Mm-hcZ8r6OevEGvULH67HOG99TeCRX7cMoeyf7A@mail.gmail.com>

On Wed, Mar 19, 2014 at 6:27 PM, Angel Leon <gubatron at gmail.com> wrote:

> the command line options mention a -checklevel  parameter.
> I've been passing 0 assuming there'd be little to no verification, but
> it's happened a few times that when I open the official binary (while not
> doing development) there's some sort of database corruption and Bitcoin-Qt
> needs to reindex blocks on disk, a process that can take probably a whole
> day.
>
> how do you guys develop the UI and avoid these issues?
>

In general I do very little with the database while developing the UI. I
have various seperate bitcoin data directories (both testnet and mainnet)
to try things out. Before doing something risky I just make a copy.

These days I also do a lot of development with -regtest, as it allows
quickly setting up test scenarios.

What are you trying to test specifically? The progress bar while reindexing?

If you have database problems are you perhaps switching between 0.8.x and
0.9.x with the same directory? In that case see the downgrading warning
here: https://bitcoin.org/bin/0.9.0/README.txt .

Wladimir
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140319/6f920807/attachment.html>

From gubatron at gmail.com  Wed Mar 19 18:36:31 2014
From: gubatron at gmail.com (Angel Leon)
Date: Wed, 19 Mar 2014 14:36:31 -0400
Subject: [Bitcoin-development] [QT] how to disable block verification
 for faster UI testing?
In-Reply-To: <CA+s+GJDZGS5Mm-hcZ8r6OevEGvULH67HOG99TeCRX7cMoeyf7A@mail.gmail.com>
References: <CADZB0_aSpu7v0bVV6Po0RonobGVreWTLN7Mya687PbP2t_-oZg@mail.gmail.com>
	<CA+s+GJDZGS5Mm-hcZ8r6OevEGvULH67HOG99TeCRX7cMoeyf7A@mail.gmail.com>
Message-ID: <CADZB0_byfS8_8qZ+w-GGBzFYCdeD+v+YGWVVg5dx5bRcxWHZWg@mail.gmail.com>

"If you have database problems are you perhaps switching between 0.8.x and
0.9.x with the same directory?"
I think that may have been the issue.

Maybe now that I have a 0.9.0 official binary, when I switch to the source
builds I won't have the issue.

However, I think I'll do what you do and have separate bitcoin data
directories, that's probably the best.

not trying to test anything specifically, just codign, building, launching
over and over, would like to make the startup of the Qt client faster.

http://twitter.com/gubatron


On Wed, Mar 19, 2014 at 2:22 PM, Wladimir <laanwj at gmail.com> wrote:

>
> On Wed, Mar 19, 2014 at 6:27 PM, Angel Leon <gubatron at gmail.com> wrote:
>
>> the command line options mention a -checklevel  parameter.
>> I've been passing 0 assuming there'd be little to no verification, but
>> it's happened a few times that when I open the official binary (while not
>> doing development) there's some sort of database corruption and Bitcoin-Qt
>> needs to reindex blocks on disk, a process that can take probably a whole
>> day.
>>
>> how do you guys develop the UI and avoid these issues?
>>
>
> In general I do very little with the database while developing the UI. I
> have various seperate bitcoin data directories (both testnet and mainnet)
> to try things out. Before doing something risky I just make a copy.
>
> These days I also do a lot of development with -regtest, as it allows
> quickly setting up test scenarios.
>
> What are you trying to test specifically? The progress bar while
> reindexing?
>
> If you have database problems are you perhaps switching between 0.8.x and
> 0.9.x with the same directory? In that case see the downgrading warning
> here: https://bitcoin.org/bin/0.9.0/README.txt .
>
> Wladimir
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140319/0908e03b/attachment.html>

From jcea at jcea.es  Wed Mar 19 18:28:58 2014
From: jcea at jcea.es (Jesus Cea)
Date: Wed, 19 Mar 2014 19:28:58 +0100
Subject: [Bitcoin-development] HEADS UP: Bitcoin 0.9.0 doesn't work on old
	Linux
Message-ID: <5329E1EA.7090504@jcea.es>

I just upgraded to Bitcoin 0.9.0 and I got this:

"""
$ ./bitcoind
./bitcoind: /lib/libc.so.6: version `GLIBC_2.15' not found (required by
./bitcoind)
./bitcoind: /lib/libc.so.6: version `GLIBC_2.14' not found (required by
./bitcoind)

$ ./bitcoin-qt
./bitcoin-qt: /lib/libc.so.6: version `GLIBC_2.15' not found (required
by ./bitcoin-qt)
./bitcoin-qt: /lib/libc.so.6: version `GLIBC_2.14' not found (required
by ./bitcoin-qt)
"""

Sniff.

Red Hat Enterprise Linux uses glibc 2.12.

-- 
Jes?s Cea Avi?n                         _/_/      _/_/_/        _/_/_/
jcea at jcea.es - http://www.jcea.es/     _/_/    _/_/  _/_/    _/_/  _/_/
Twitter: @jcea                        _/_/    _/_/          _/_/_/_/_/
jabber / xmpp:jcea at jabber.org  _/_/  _/_/    _/_/          _/_/  _/_/
"Things are not so easy"      _/_/  _/_/    _/_/  _/_/    _/_/  _/_/
"My name is Dump, Core Dump"   _/_/_/        _/_/_/      _/_/  _/_/
"El amor es poner tu felicidad en la felicidad de otro" - Leibniz

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 538 bytes
Desc: OpenPGP digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140319/4f62e0e6/attachment.sig>

From laanwj at gmail.com  Wed Mar 19 18:57:47 2014
From: laanwj at gmail.com (Wladimir)
Date: Wed, 19 Mar 2014 19:57:47 +0100
Subject: [Bitcoin-development] HEADS UP: Bitcoin 0.9.0 doesn't work on
	old Linux
In-Reply-To: <5329E1EA.7090504@jcea.es>
References: <5329E1EA.7090504@jcea.es>
Message-ID: <CA+s+GJC2gofAmhvhQcSwRj1S4cocgpH=Df4tZu2_8vqrQa=EJw@mail.gmail.com>

On Wed, Mar 19, 2014 at 7:28 PM, Jesus Cea <jcea at jcea.es> wrote:

> I just upgraded to Bitcoin 0.9.0 and I got this:
>
> """
> $ ./bitcoind
> ./bitcoind: /lib/libc.so.6: version `GLIBC_2.15' not found (required by
> ./bitcoind)
> ./bitcoind: /lib/libc.so.6: version `GLIBC_2.14' not found (required by
> ./bitcoind)
>
> $ ./bitcoin-qt
> ./bitcoin-qt: /lib/libc.so.6: version `GLIBC_2.15' not found (required
> by ./bitcoin-qt)
> ./bitcoin-qt: /lib/libc.so.6: version `GLIBC_2.14' not found (required
> by ./bitcoin-qt)
> """
>

This a a known issue: https://github.com/bitcoin/bitcoin/issues/3803

Wladimir
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140319/0b1f44c9/attachment.html>

From brent.shambaugh at gmail.com  Wed Mar 19 21:23:20 2014
From: brent.shambaugh at gmail.com (Brent Shambaugh)
Date: Wed, 19 Mar 2014 16:23:20 -0500
Subject: [Bitcoin-development] Bitcoin for W3C Payments Workshop, March 24-25
Message-ID: <CACvcBVrOgN+NSX7rKgq2aZtgi7r-MKsX=f36OcftnH1LeSPRow@mail.gmail.com>

Hello Bitcoiners,

I have been working on some use cases for the W3C payments workshop. I'd
like to include Bitcoin, but I might not have the time:

Here is what I have:

https://www.w3.org/community/webpayments/wiki/WebPaymentsMobileUseCases

Which is editable with a w3c username and password. Just be a member of the
webpayments community group: http://www.w3.org/community/webpayments/

More formally you can submit a pull request to:

https://github.com/w3c-webmob/payments-use-cases

-------------

Due to discussions with others am attempting to apply the following
template:


Name: name of the solution
Use Cases: Key use cases for the solution
Regions and currencies: Any SDKs or APIs which are available to developers

with the following things to consider (for use cases):
(1) add real money to the service
(2) buy a physical good in the real wold (e.g., a cup of coffee)
(3) pay for physical service (e.g., gym membership)?
(4) convert virtual money back into paper money
(5) transfer money from one person to another (even if the second person is
not signed up for the service)?
(6) buy product online
(7) resolve disputes?
(8) view transactions?
(9) secure the wallet
(10) etc.

Thanks for your time and have a great day!

-Brent Shambaugh
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140319/e0ce0658/attachment.html>

From odinn.cyberguerrilla at riseup.net  Thu Mar 20 01:41:50 2014
From: odinn.cyberguerrilla at riseup.net (Odinn Cyberguerrilla)
Date: Wed, 19 Mar 2014 18:41:50 -0700
Subject: [Bitcoin-development] Bitcoin for W3C Payments Workshop,
 March 24-25
In-Reply-To: <CACvcBVrOgN+NSX7rKgq2aZtgi7r-MKsX=f36OcftnH1LeSPRow@mail.gmail.com>
References: <CACvcBVrOgN+NSX7rKgq2aZtgi7r-MKsX=f36OcftnH1LeSPRow@mail.gmail.com>
Message-ID: <c32ff09f8e9c7a6c94fb3d92ae5b0231.squirrel@fulvetta.riseup.net>

I wish to state that I fundamentally disagree with this proposal of use
cases for W3C payments workshop.  Please read my following explanation and
then do what you will:

At one time I was invited to join the Web Payments conference calls.  I
considered it and then declined due to the very CLAs that Brent mentioned
in the message that started this thread.

I was trying to remember the language that I objected to relating to the
W3C CLA.  Found it: https://web-payments.org/minutes/ As mentioned, I was
offered to join these calls but I declined due to, in part, the following:
Upon review of  the page at  web-payments.org, I noticed that it provides
a means to connect with web payments group by teleconference.  However,
there is an agreement that the site would require me to accept merely to
join the teleconference and collaborate with others in the web payments
group.  I would say "unfortunately," but in my case I will say
fortunately, I don't agree with the required agreement as shown here at
http://www.w3.org/community/about/agreements/cla/ which is shown as
follows at https://web-payments.org/minutes/ "There are no costs
associated with joining the group or limitations on who may join the
teleconference as long as they agree to the Web Payments community "

Some of the things I don't like about the proposed agreement /
"requirement" are fundamental.  At the core, it should be understood that
collaborative efforts, or teleconferences involving innovators who strive
to develop concepts for eventual development of a social good, for
example, should not be subject to a "requirement" that anyone agree to a
license in relation to their participation or contribution.  Such
"requirements" inhibit innovation and free thought.  For example, the web
payments group provides that in order for me to participate, I must first
"agree to license my Essential Claims under the W3C CLA RF Licensing
Requirements" and numerous other requirements.

Although I was interested in some sort of collaboration with the Web
Payments Community Group, these CLAs - lengthy, burdensome, and in my
personal view, highly dubious and potentially restricting with respect to
innovation and free thought - caused me to reconsider, and thus I will not
be entering into web or telephone conferences or related collaborations
with the W3C / Web Payments folks until such time as they remove these
burdensome requirements which are applied merely to join a call.?

> Hello Bitcoiners,
>
> I have been working on some use cases for the W3C payments workshop. I'd
> like to include Bitcoin, but I might not have the time:
>
> Here is what I have:
>
> https://www.w3.org/community/webpayments/wiki/WebPaymentsMobileUseCases
>
> Which is editable with a w3c username and password. Just be a member of
> the
> webpayments community group: http://www.w3.org/community/webpayments/
>
> More formally you can submit a pull request to:
>
> https://github.com/w3c-webmob/payments-use-cases
>
> -------------
>
> Due to discussions with others am attempting to apply the following
> template:
>
>
> Name: name of the solution
> Use Cases: Key use cases for the solution
> Regions and currencies: Any SDKs or APIs which are available to developers
>
> with the following things to consider (for use cases):
> (1) add real money to the service
> (2) buy a physical good in the real wold (e.g., a cup of coffee)
> (3) pay for physical service (e.g., gym membership)?
> (4) convert virtual money back into paper money
> (5) transfer money from one person to another (even if the second person
> is
> not signed up for the service)?
> (6) buy product online
> (7) resolve disputes?
> (8) view transactions?
> (9) secure the wallet
> (10) etc.
>
> Thanks for your time and have a great day!
>
> -Brent Shambaugh
> ------------------------------------------------------------------------------
> Learn Graph Databases - Download FREE O'Reilly Book
> "Graph Databases" is the definitive new guide to graph databases and their
> applications. Written by three acclaimed leaders in the field,
> this first edition is now available. Download your free book today!
> http://p.sf.net/sfu/13534_NeoTech_______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>





From melvincarvalho at gmail.com  Thu Mar 20 02:03:09 2014
From: melvincarvalho at gmail.com (Melvin Carvalho)
Date: Thu, 20 Mar 2014 03:03:09 +0100
Subject: [Bitcoin-development] Bitcoin for W3C Payments Workshop,
	March 24-25
In-Reply-To: <c32ff09f8e9c7a6c94fb3d92ae5b0231.squirrel@fulvetta.riseup.net>
References: <CACvcBVrOgN+NSX7rKgq2aZtgi7r-MKsX=f36OcftnH1LeSPRow@mail.gmail.com>
	<c32ff09f8e9c7a6c94fb3d92ae5b0231.squirrel@fulvetta.riseup.net>
Message-ID: <CAKaEYhKcPGHwA+4K8QkSe-yjOna=eGJi3v4P0xmLHNW_H4i8Ew@mail.gmail.com>

On 20 March 2014 02:41, Odinn Cyberguerrilla <
odinn.cyberguerrilla at riseup.net> wrote:

> I wish to state that I fundamentally disagree with this proposal of use
> cases for W3C payments workshop.  Please read my following explanation and
> then do what you will:
>
> At one time I was invited to join the Web Payments conference calls.  I
> considered it and then declined due to the very CLAs that Brent mentioned
> in the message that started this thread.
>
> I was trying to remember the language that I objected to relating to the
> W3C CLA.  Found it: https://web-payments.org/minutes/ As mentioned, I was
> offered to join these calls but I declined due to, in part, the following:
> Upon review of  the page at  web-payments.org, I noticed that it provides
> a means to connect with web payments group by teleconference.  However,
> there is an agreement that the site would require me to accept merely to
> join the teleconference and collaborate with others in the web payments
> group.  I would say "unfortunately," but in my case I will say
> fortunately, I don't agree with the required agreement as shown here at
> http://www.w3.org/community/about/agreements/cla/ which is shown as
> follows at https://web-payments.org/minutes/ "There are no costs
> associated with joining the group or limitations on who may join the
> teleconference as long as they agree to the Web Payments community "
>
> Some of the things I don't like about the proposed agreement /
> "requirement" are fundamental.  At the core, it should be understood that
> collaborative efforts, or teleconferences involving innovators who strive
> to develop concepts for eventual development of a social good, for
> example, should not be subject to a "requirement" that anyone agree to a
> license in relation to their participation or contribution.  Such
> "requirements" inhibit innovation and free thought.  For example, the web
> payments group provides that in order for me to participate, I must first
> "agree to license my Essential Claims under the W3C CLA RF Licensing
> Requirements" and numerous other requirements.
>
> Although I was interested in some sort of collaboration with the Web
> Payments Community Group, these CLAs - lengthy, burdensome, and in my
> personal view, highly dubious and potentially restricting with respect to
> innovation and free thought - caused me to reconsider, and thus I will not
> be entering into web or telephone conferences or related collaborations
> with the W3C / Web Payments folks until such time as they remove these
> burdensome requirements which are applied merely to join a call.
>

Fair point, but you need to understand that all specs created by the W3C
are committed to be royalty free.  That's why there's a CLA, but I can
totally see if you or your employer feels uncomfortable with that.  You
might have the best possible interests, but not everyone may be as honest.

Personally, have participated as an unaffiliated volunteer and hobbyist at
the W3C for a few years, I've never seen an issue with this.  In fact, I'm
really happy that they have a bullet proof intellectual property framework
that guarantees all my contributions will never be encumbered by patents or
be charged royalties for.


>
> > Hello Bitcoiners,
> >
> > I have been working on some use cases for the W3C payments workshop. I'd
> > like to include Bitcoin, but I might not have the time:
> >
> > Here is what I have:
> >
> > https://www.w3.org/community/webpayments/wiki/WebPaymentsMobileUseCases
> >
> > Which is editable with a w3c username and password. Just be a member of
> > the
> > webpayments community group: http://www.w3.org/community/webpayments/
> >
> > More formally you can submit a pull request to:
> >
> > https://github.com/w3c-webmob/payments-use-cases
> >
> > -------------
> >
> > Due to discussions with others am attempting to apply the following
> > template:
> >
> >
> > Name: name of the solution
> > Use Cases: Key use cases for the solution
> > Regions and currencies: Any SDKs or APIs which are available to
> developers
> >
> > with the following things to consider (for use cases):
> > (1) add real money to the service
> > (2) buy a physical good in the real wold (e.g., a cup of coffee)
> > (3) pay for physical service (e.g., gym membership)?
> > (4) convert virtual money back into paper money
> > (5) transfer money from one person to another (even if the second person
> > is
> > not signed up for the service)?
> > (6) buy product online
> > (7) resolve disputes?
> > (8) view transactions?
> > (9) secure the wallet
> > (10) etc.
> >
> > Thanks for your time and have a great day!
> >
> > -Brent Shambaugh
> >
> ------------------------------------------------------------------------------
> > Learn Graph Databases - Download FREE O'Reilly Book
> > "Graph Databases" is the definitive new guide to graph databases and
> their
> > applications. Written by three acclaimed leaders in the field,
> > this first edition is now available. Download your free book today!
> >
> http://p.sf.net/sfu/13534_NeoTech_______________________________________________
> > Bitcoin-development mailing list
> > Bitcoin-development at lists.sourceforge.net
> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> >
>
>
>
>
> ------------------------------------------------------------------------------
> Learn Graph Databases - Download FREE O'Reilly Book
> "Graph Databases" is the definitive new guide to graph databases and their
> applications. Written by three acclaimed leaders in the field,
> this first edition is now available. Download your free book today!
> http://p.sf.net/sfu/13534_NeoTech
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140320/75b1eebc/attachment.html>

From alexykot at gmail.com  Thu Mar 20 02:22:19 2014
From: alexykot at gmail.com (Alex Kotenko)
Date: Thu, 20 Mar 2014 02:22:19 +0000
Subject: [Bitcoin-development] Payment Protocol for Face-to-face Payments
In-Reply-To: <CANEZrP3nQfvDArKTRgje0Cus4G2JD_zpxSjA3fXfxM2TNAP80Q@mail.gmail.com>
References: <lc5hmg$1jh$1@ger.gmane.org> <leuunm$tjk$1@ger.gmane.org>
	<CANEZrP3nQfvDArKTRgje0Cus4G2JD_zpxSjA3fXfxM2TNAP80Q@mail.gmail.com>
Message-ID: <CALDj+BafD+6KTNcYDBEu5gNPzYozSkiC-JCxrY-PzXL2DYBRsw@mail.gmail.com>

Hi Andreas


I'm implementing support for BIP70 in my POS at the moment, and I've just
realized that with options you're proposing usecase I'm looking for is not
covered.

Right now, before BIP70, I'm sending BIP21 URI via NFC or QR code, and I
need to still be able to use it for backwards compatibility. But at the
same time I want to be able to support BIP70. And also I want to avoid
using external servers, the concept of my POS is that everything is
happening between just payer's phone and payee's POS device. This means
that BIP72 HTTP(S) link inside Bitcoin URI is not suitable for me.

You're also offering an option to include Base43 encoded PR body right
inside the Bitcoin URI, but in a way that is not backwards compatible with
BIP21.

In the end this all means that there is no way for me to at the same time
keep backwards compatibility with all wallets not supporting NFC and BIP70
(all other wallets right now), and keep things inside POS without need for
external servers.

I understand your intention behind base43 encoding and noncompatible URI -
you want to make most possible use of QR codes. But I wonder - did you
compare this base43 to base64 encoded request in a binary QR code format?
How much do we actually win in total bytes capacity at a price of
noncompatibility and increased complexity?

And also maybe we can extend BIP72 to include encoded payment request in
the URL directly in a backwards compatible way?


Best regards,
Alex Kotenko


2014-03-02 11:50 GMT+00:00 Mike Hearn <mike at plan99.net>:

> Thanks Andreas.
>
> For BIP standardisation, I think the VIEW intent seems like an obvious
> one. Bluetooth support probably should come later if/when we put
> encryption/auth on the RFCOMM link (probably SSL).
>
>
> ------------------------------------------------------------------------------
> Flow-based real-time traffic analytics software. Cisco certified tool.
> Monitor traffic, SLAs, QoS, Medianet, WAAS etc. with NetFlow Analyzer
> Customize your own dashboards, set traffic alerts and generate reports.
> Network behavioral analysis & security monitoring. All-in-one tool.
>
> http://pubads.g.doubleclick.net/gampad/clk?id=126839071&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140320/bc8cc362/attachment.html>

From jgarzik at bitpay.com  Thu Mar 20 03:31:36 2014
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Wed, 19 Mar 2014 23:31:36 -0400
Subject: [Bitcoin-development] Payment Protocol for Face-to-face Payments
In-Reply-To: <CALDj+BafD+6KTNcYDBEu5gNPzYozSkiC-JCxrY-PzXL2DYBRsw@mail.gmail.com>
References: <lc5hmg$1jh$1@ger.gmane.org> <leuunm$tjk$1@ger.gmane.org>
	<CANEZrP3nQfvDArKTRgje0Cus4G2JD_zpxSjA3fXfxM2TNAP80Q@mail.gmail.com>
	<CALDj+BafD+6KTNcYDBEu5gNPzYozSkiC-JCxrY-PzXL2DYBRsw@mail.gmail.com>
Message-ID: <CAJHLa0N4J_Z907+D0ENSNKfNAW2N=7Jf4JzSCO=SU558GtGTzA@mail.gmail.com>

Take a look at BIP 73:
https://github.com/bitcoin/bips/blob/master/bip-0073.mediawiki




On Wed, Mar 19, 2014 at 10:22 PM, Alex Kotenko <alexykot at gmail.com> wrote:

> Hi Andreas
>
>
> I'm implementing support for BIP70 in my POS at the moment, and I've just
> realized that with options you're proposing usecase I'm looking for is not
> covered.
>
> Right now, before BIP70, I'm sending BIP21 URI via NFC or QR code, and I
> need to still be able to use it for backwards compatibility. But at the
> same time I want to be able to support BIP70. And also I want to avoid
> using external servers, the concept of my POS is that everything is
> happening between just payer's phone and payee's POS device. This means
> that BIP72 HTTP(S) link inside Bitcoin URI is not suitable for me.
>
> You're also offering an option to include Base43 encoded PR body right
> inside the Bitcoin URI, but in a way that is not backwards compatible with
> BIP21.
>
> In the end this all means that there is no way for me to at the same time
> keep backwards compatibility with all wallets not supporting NFC and BIP70
> (all other wallets right now), and keep things inside POS without need for
> external servers.
>
> I understand your intention behind base43 encoding and noncompatible URI -
> you want to make most possible use of QR codes. But I wonder - did you
> compare this base43 to base64 encoded request in a binary QR code format?
> How much do we actually win in total bytes capacity at a price of
> noncompatibility and increased complexity?
>
> And also maybe we can extend BIP72 to include encoded payment request in
> the URL directly in a backwards compatible way?
>
>
> Best regards,
> Alex Kotenko
>
>
> 2014-03-02 11:50 GMT+00:00 Mike Hearn <mike at plan99.net>:
>
>>  Thanks Andreas.
>>
>> For BIP standardisation, I think the VIEW intent seems like an obvious
>> one. Bluetooth support probably should come later if/when we put
>> encryption/auth on the RFCOMM link (probably SSL).
>>
>>
>> ------------------------------------------------------------------------------
>> Flow-based real-time traffic analytics software. Cisco certified tool.
>> Monitor traffic, SLAs, QoS, Medianet, WAAS etc. with NetFlow Analyzer
>> Customize your own dashboards, set traffic alerts and generate reports.
>> Network behavioral analysis & security monitoring. All-in-one tool.
>>
>> http://pubads.g.doubleclick.net/gampad/clk?id=126839071&iu=/4140/ostg.clktrk
>>
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>
>>
>
>
> ------------------------------------------------------------------------------
> Learn Graph Databases - Download FREE O'Reilly Book
> "Graph Databases" is the definitive new guide to graph databases and their
> applications. Written by three acclaimed leaders in the field,
> this first edition is now available. Download your free book today!
> http://p.sf.net/sfu/13534_NeoTech
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>


-- 
Jeff Garzik
Bitcoin core developer and open source evangelist
BitPay, Inc.      https://bitpay.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140319/d93fa9b0/attachment.html>

From andreas at schildbach.de  Thu Mar 20 08:08:45 2014
From: andreas at schildbach.de (Andreas Schildbach)
Date: Thu, 20 Mar 2014 09:08:45 +0100
Subject: [Bitcoin-development] Payment Protocol for Face-to-face Payments
In-Reply-To: <CALDj+BafD+6KTNcYDBEu5gNPzYozSkiC-JCxrY-PzXL2DYBRsw@mail.gmail.com>
References: <lc5hmg$1jh$1@ger.gmane.org>
	<leuunm$tjk$1@ger.gmane.org>	<CANEZrP3nQfvDArKTRgje0Cus4G2JD_zpxSjA3fXfxM2TNAP80Q@mail.gmail.com>
	<CALDj+BafD+6KTNcYDBEu5gNPzYozSkiC-JCxrY-PzXL2DYBRsw@mail.gmail.com>
Message-ID: <lge7lv$3mf$1@ger.gmane.org>

On 03/20/2014 03:22 AM, Alex Kotenko wrote:
> Right now, before BIP70, I'm sending BIP21 URI via NFC or QR code, and I
> need to still be able to use it for backwards compatibility. But at the
> same time I want to be able to support BIP70. And also I want to avoid
> using external servers, the concept of my POS is that everything is
> happening between just payer's phone and payee's POS device. This means
> that BIP72 HTTP(S) link inside Bitcoin URI is not suitable for me.

We could use Bluetooth in the "r" parameter, not unlike we use Bluetooth
in the payment_url. However, since multiple devices could access your
machine at the same time, we need some for of adressibility of different
payment requests. Something like
"bt:<btmac>-<random_id_of_payment_request>".

> You're also offering an option to include Base43 encoded PR body right
> inside the Bitcoin URI, but in a way that is not backwards compatible
> with BIP21.

Well, do we need to be compatible? If the dev community decides Base43
PR QR's (or whatever other self-contained format) is the way to go, we
just implement, roll it out and use it.

> I understand your intention behind base43 encoding and noncompatible URI
> - you want to make most possible use of QR codes. But I wonder - did you
> compare this base43 to base64 encoded request in a binary QR code
> format? How much do we actually win in total bytes capacity at a price
> of noncompatibility and increased complexity?

Alphanumeric QR codes have an alphabet of 45 chars, of which I am using
43. I skipped Space and '%' because they're not allowed in URIs. When I
invented the Base43 format back in 2011, wanted it to be URI compatible
so we can use the Android intent dispatcher.

If we let go of the URI requirement, we can use binary QR codes as well.
This means users will always have to manually start their Bitcoin app
first. (Also, there is an implementation issue with the ZXing scanner
I'm using, it returns Strings rather than a byte array so it will choke
on \0 characters.)

> And also maybe we can extend BIP72 to include encoded payment request in
> the URL directly in a backwards compatible way?

I took this into consideration. It would be space inefficient.

The Base58-encoded address from BIP21 forces the QR code into binary
mode. Still you can't encode the payment request extension (probably an
URL parameter) as binary because it needs to stay compatible to the URI
standard (RFC 3986). You could use one of the Base64 variants for the PR
in this case, but still it would be inefficient.





From andreas at schildbach.de  Thu Mar 20 08:09:39 2014
From: andreas at schildbach.de (Andreas Schildbach)
Date: Thu, 20 Mar 2014 09:09:39 +0100
Subject: [Bitcoin-development] Payment Protocol for Face-to-face Payments
In-Reply-To: <CAJHLa0N4J_Z907+D0ENSNKfNAW2N=7Jf4JzSCO=SU558GtGTzA@mail.gmail.com>
References: <lc5hmg$1jh$1@ger.gmane.org>
	<leuunm$tjk$1@ger.gmane.org>	<CANEZrP3nQfvDArKTRgje0Cus4G2JD_zpxSjA3fXfxM2TNAP80Q@mail.gmail.com>	<CALDj+BafD+6KTNcYDBEu5gNPzYozSkiC-JCxrY-PzXL2DYBRsw@mail.gmail.com>
	<CAJHLa0N4J_Z907+D0ENSNKfNAW2N=7Jf4JzSCO=SU558GtGTzA@mail.gmail.com>
Message-ID: <lge7nk$3mf$2@ger.gmane.org>

Afaik, BIP73 needs an external server (the web server).


On 03/20/2014 04:31 AM, Jeff Garzik wrote:
> Take a look at BIP 73:
> https://github.com/bitcoin/bips/blob/master/bip-0073.mediawiki
> 
> 
> 
> 
> On Wed, Mar 19, 2014 at 10:22 PM, Alex Kotenko <alexykot at gmail.com
> <mailto:alexykot at gmail.com>> wrote:
> 
>     Hi Andreas
> 
> 
>     I'm implementing support for BIP70 in my POS at the moment, and I've
>     just realized that with options you're proposing usecase I'm looking
>     for is not covered.
> 
>     Right now, before BIP70, I'm sending BIP21 URI via NFC or QR code,
>     and I need to still be able to use it for backwards compatibility.
>     But at the same time I want to be able to support BIP70. And also I
>     want to avoid using external servers, the concept of my POS is that
>     everything is happening between just payer's phone and payee's POS
>     device. This means that BIP72 HTTP(S) link inside Bitcoin URI is not
>     suitable for me. 
> 
>     You're also offering an option to include Base43 encoded PR body
>     right inside the Bitcoin URI, but in a way that is not backwards
>     compatible with BIP21. 
> 
>     In the end this all means that there is no way for me to at the same
>     time keep backwards compatibility with all wallets not supporting
>     NFC and BIP70 (all other wallets right now), and keep things inside
>     POS without need for external servers. 
> 
>     I understand your intention behind base43 encoding and noncompatible
>     URI - you want to make most possible use of QR codes. But I wonder -
>     did you compare this base43 to base64 encoded request in a binary QR
>     code format? How much do we actually win in total bytes capacity at
>     a price of noncompatibility and increased complexity?
> 
>     And also maybe we can extend BIP72 to include encoded payment
>     request in the URL directly in a backwards compatible way?
> 
> 
>     Best regards, 
>     Alex Kotenko
> 
> 
>     2014-03-02 11:50 GMT+00:00 Mike Hearn <mike at plan99.net
>     <mailto:mike at plan99.net>>:
> 
>         Thanks Andreas.
> 
>         For BIP standardisation, I think the VIEW intent seems like an
>         obvious one. Bluetooth support probably should come later
>         if/when we put encryption/auth on the RFCOMM link (probably SSL).
> 
>         ------------------------------------------------------------------------------
>         Flow-based real-time traffic analytics software. Cisco certified
>         tool.
>         Monitor traffic, SLAs, QoS, Medianet, WAAS etc. with NetFlow
>         Analyzer
>         Customize your own dashboards, set traffic alerts and generate
>         reports.
>         Network behavioral analysis & security monitoring. All-in-one tool.
>         http://pubads.g.doubleclick.net/gampad/clk?id=126839071&iu=/4140/ostg.clktrk
> 
>         _______________________________________________
>         Bitcoin-development mailing list
>         Bitcoin-development at lists.sourceforge.net
>         <mailto:Bitcoin-development at lists.sourceforge.net>
>         https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 
> 
> 
>     ------------------------------------------------------------------------------
>     Learn Graph Databases - Download FREE O'Reilly Book
>     "Graph Databases" is the definitive new guide to graph databases and
>     their
>     applications. Written by three acclaimed leaders in the field,
>     this first edition is now available. Download your free book today!
>     http://p.sf.net/sfu/13534_NeoTech
>     _______________________________________________
>     Bitcoin-development mailing list
>     Bitcoin-development at lists.sourceforge.net
>     <mailto:Bitcoin-development at lists.sourceforge.net>
>     https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 
> 
> 
> 
> -- 
> Jeff Garzik
> Bitcoin core developer and open source evangelist
> BitPay, Inc.      https://bitpay.com/
> 
> 
> ------------------------------------------------------------------------------
> Learn Graph Databases - Download FREE O'Reilly Book
> "Graph Databases" is the definitive new guide to graph databases and their
> applications. Written by three acclaimed leaders in the field,
> this first edition is now available. Download your free book today!
> http://p.sf.net/sfu/13534_NeoTech
> 
> 
> 
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 





From mike at plan99.net  Thu Mar 20 10:36:09 2014
From: mike at plan99.net (Mike Hearn)
Date: Thu, 20 Mar 2014 11:36:09 +0100
Subject: [Bitcoin-development] Payment Protocol for Face-to-face Payments
In-Reply-To: <lge7nk$3mf$2@ger.gmane.org>
References: <lc5hmg$1jh$1@ger.gmane.org> <leuunm$tjk$1@ger.gmane.org>
	<CANEZrP3nQfvDArKTRgje0Cus4G2JD_zpxSjA3fXfxM2TNAP80Q@mail.gmail.com>
	<CALDj+BafD+6KTNcYDBEu5gNPzYozSkiC-JCxrY-PzXL2DYBRsw@mail.gmail.com>
	<CAJHLa0N4J_Z907+D0ENSNKfNAW2N=7Jf4JzSCO=SU558GtGTzA@mail.gmail.com>
	<lge7nk$3mf$2@ger.gmane.org>
Message-ID: <CANEZrP0J849oDvMWjf8LWi0xj44Q8DaUwDip5_smVBMNgeQ3mw@mail.gmail.com>

Encoding entire payment requests into qrcodes is definitely not the way to
go. They can already be large when signed and we're just at the start of
adding features.

Finishing off and standardising the bluetooth support is the way to go
(r=bt:mac). Andreas' app already has some support for this I believe, so
Alex you could prototype with that, but we need to:

1) Add an encryption/auth layer on top, because it runs over RFCOMM
sockets. The authentication would require proof of owning the Bitcoin key
that's in the address part of the URI (which is needed for backwards compat
anyway).

2) Write a BIP for it and make sure it's interoperable

For the auth layer we could either use SSL and then just ignore the server
certificate and require signing of the session public key with the Bitcoin
key, which should be easy to code up but is rather heavy on the air, or
roll a custom lightweight thing where we just do a basic ECDH, with the
servers key being the same as the address key. But rolling such protocols
is subtle and I guess it'd need to be reviewed by people familiar with such
things.

This feels like a good opportunity to grow the community - perhaps we can
find a volunteer in the forums who enjoys crypto.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140320/ad3cb0fd/attachment.html>

From adam at cypherspace.org  Thu Mar 20 12:12:21 2014
From: adam at cypherspace.org (Adam Back)
Date: Thu, 20 Mar 2014 13:12:21 +0100
Subject: [Bitcoin-development] Payment Protocol for Face-to-face Payments
In-Reply-To: <CANEZrP0J849oDvMWjf8LWi0xj44Q8DaUwDip5_smVBMNgeQ3mw@mail.gmail.com>
References: <lc5hmg$1jh$1@ger.gmane.org> <leuunm$tjk$1@ger.gmane.org>
	<CANEZrP3nQfvDArKTRgje0Cus4G2JD_zpxSjA3fXfxM2TNAP80Q@mail.gmail.com>
	<CALDj+BafD+6KTNcYDBEu5gNPzYozSkiC-JCxrY-PzXL2DYBRsw@mail.gmail.com>
	<CAJHLa0N4J_Z907+D0ENSNKfNAW2N=7Jf4JzSCO=SU558GtGTzA@mail.gmail.com>
	<lge7nk$3mf$2@ger.gmane.org>
	<CANEZrP0J849oDvMWjf8LWi0xj44Q8DaUwDip5_smVBMNgeQ3mw@mail.gmail.com>
Message-ID: <20140320121221.GA25052@netbook.cypherspace.org>

Whats a sensible limit on practical/convenient QR code size?

How much of the payment protocol message size comes from use of x509?

(Just exploring what the options are).

Adam

On Thu, Mar 20, 2014 at 11:36:09AM +0100, Mike Hearn wrote:
>   Encoding entire payment requests into qrcodes is definitely not the way
>   to go. They can already be large when signed and we're just at the
>   start of adding features.
>   Finishing off and standardising the bluetooth support is the way to go
>   (r=bt:mac). Andreas' app already has some support for this I believe,
>   so Alex you could prototype with that, but we need to:
>   1) Add an encryption/auth layer on top, because it runs over RFCOMM
>   sockets. The authentication would require proof of owning the Bitcoin
>   key that's in the address part of the URI (which is needed for
>   backwards compat anyway).
>   2) Write a BIP for it and make sure it's interoperable
>   For the auth layer we could either use SSL and then just ignore the
>   server certificate and require signing of the session public key with
>   the Bitcoin key, which should be easy to code up but is rather heavy on
>   the air, or roll a custom lightweight thing where we just do a basic
>   ECDH, with the servers key being the same as the address key. But
>   rolling such protocols is subtle and I guess it'd need to be reviewed
>   by people familiar with such things.
>   This feels like a good opportunity to grow the community - perhaps we
>   can find a volunteer in the forums who enjoys crypto.



From mike at plan99.net  Thu Mar 20 12:20:20 2014
From: mike at plan99.net (Mike Hearn)
Date: Thu, 20 Mar 2014 13:20:20 +0100
Subject: [Bitcoin-development] Payment Protocol for Face-to-face Payments
In-Reply-To: <20140320121221.GA25052@netbook.cypherspace.org>
References: <lc5hmg$1jh$1@ger.gmane.org> <leuunm$tjk$1@ger.gmane.org>
	<CANEZrP3nQfvDArKTRgje0Cus4G2JD_zpxSjA3fXfxM2TNAP80Q@mail.gmail.com>
	<CALDj+BafD+6KTNcYDBEu5gNPzYozSkiC-JCxrY-PzXL2DYBRsw@mail.gmail.com>
	<CAJHLa0N4J_Z907+D0ENSNKfNAW2N=7Jf4JzSCO=SU558GtGTzA@mail.gmail.com>
	<lge7nk$3mf$2@ger.gmane.org>
	<CANEZrP0J849oDvMWjf8LWi0xj44Q8DaUwDip5_smVBMNgeQ3mw@mail.gmail.com>
	<20140320121221.GA25052@netbook.cypherspace.org>
Message-ID: <CANEZrP30auwsdGy=HKYbawajOJ8Beu8VwVPn+ZM16L2LCZY7iw@mail.gmail.com>

Very, very limited. The more data you stuff in them, the less reliable and
slower scanning becomes. A URL is about the limit of what's practically
achievable. Even with that, BitPay have been complaining about the
increased character length from adding the https url to download the
payment request (though not escaping reduces character count by a lot and
is valid).

X.509 is extremely bloated, partly due to the number of features it
supports, partly due to its history but mostly due to the widespread use of
RSA which generates giant keys and signatures. Of course you can get ECC
certs as well, but in practice most merchants don't seem to use them yet.
There's no way you can fit a cert chain into a QR code.

However, this is no big deal, because for the serverless PoS device case
Alex cares about you need a backchannel to submit the transaction and
refund address anyway, so Bluetooth is already useful/required. Downloading
the payment request via it as well as uploading the response is not a big
change and - as mentioned - already implemented by Andreas and myself some
time ago.



On Thu, Mar 20, 2014 at 1:12 PM, Adam Back <adam at cypherspace.org> wrote:

> Whats a sensible limit on practical/convenient QR code size?
>
> How much of the payment protocol message size comes from use of x509?
>
> (Just exploring what the options are).
>
> Adam
>
>
> On Thu, Mar 20, 2014 at 11:36:09AM +0100, Mike Hearn wrote:
>
>>   Encoding entire payment requests into qrcodes is definitely not the way
>>   to go. They can already be large when signed and we're just at the
>>   start of adding features.
>>   Finishing off and standardising the bluetooth support is the way to go
>>   (r=bt:mac). Andreas' app already has some support for this I believe,
>>   so Alex you could prototype with that, but we need to:
>>   1) Add an encryption/auth layer on top, because it runs over RFCOMM
>>   sockets. The authentication would require proof of owning the Bitcoin
>>   key that's in the address part of the URI (which is needed for
>>   backwards compat anyway).
>>   2) Write a BIP for it and make sure it's interoperable
>>   For the auth layer we could either use SSL and then just ignore the
>>   server certificate and require signing of the session public key with
>>   the Bitcoin key, which should be easy to code up but is rather heavy on
>>   the air, or roll a custom lightweight thing where we just do a basic
>>   ECDH, with the servers key being the same as the address key. But
>>   rolling such protocols is subtle and I guess it'd need to be reviewed
>>   by people familiar with such things.
>>   This feels like a good opportunity to grow the community - perhaps we
>>   can find a volunteer in the forums who enjoys crypto.
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140320/d9962f3d/attachment.html>

From alexykot at gmail.com  Thu Mar 20 16:14:27 2014
From: alexykot at gmail.com (Alex Kotenko)
Date: Thu, 20 Mar 2014 16:14:27 +0000
Subject: [Bitcoin-development] Payment Protocol for Face-to-face Payments
In-Reply-To: <lge7lv$3mf$1@ger.gmane.org>
References: <lc5hmg$1jh$1@ger.gmane.org> <leuunm$tjk$1@ger.gmane.org>
	<CANEZrP3nQfvDArKTRgje0Cus4G2JD_zpxSjA3fXfxM2TNAP80Q@mail.gmail.com>
	<CALDj+BafD+6KTNcYDBEu5gNPzYozSkiC-JCxrY-PzXL2DYBRsw@mail.gmail.com>
	<lge7lv$3mf$1@ger.gmane.org>
Message-ID: <CALDj+BZRsXnU5w=1B+01PDfMPY-7zqU3GP_52vr9wknEdTJ59Q@mail.gmail.com>

2014-03-20 8:08 GMT+00:00 Andreas Schildbach <andreas at schildbach.de>:

> On 03/20/2014 03:22 AM, Alex Kotenko wrote:
> > Right now, before BIP70, I'm sending BIP21 URI via NFC or QR code, and I
> > need to still be able to use it for backwards compatibility. But at the
> > same time I want to be able to support BIP70. And also I want to avoid
> > using external servers, the concept of my POS is that everything is
> > happening between just payer's phone and payee's POS device. This means
> > that BIP72 HTTP(S) link inside Bitcoin URI is not suitable for me.
>
> We could use Bluetooth in the "r" parameter, not unlike we use Bluetooth
> in the payment_url. However, since multiple devices could access your
> machine at the same time, we need some for of adressibility of different
> payment requests. Something like
> "bt:<btmac>-
> ??
> <random_id_of_payment_request>".

?I guess this would be best option?. I'm also worried about potential QR
code capacity, since as I imagine we can encounter device that has your
Wallet installed and bluetooth enabled, but no NFC available, so we will
have to operate via onscreen QR codes + bluetooth.
Hmm, if we're inventing an URI for bluetooth, I'd rather follow existing
URI's patterns. BT is strictly point-to-point connection, so BT MAC should
be considered as server address, and payment request ID can be considered
as request path. Probably "bt:<bt-mac>/?<random_id_of_payment_request>"
would be more usual and easily understandable.
Really I don't think my PoS will now support multiple simultaneous
payments, but it's good to have this thing in place for the time I will
need it.
I wonder how complex it would be to implement HTTP-over-Bluetooth. Not like
I'm willing to do that now, but HTTP is well known and proven to be quite
good for tasks like this, so in theory it would be handy to have such
capacities in here.



>  > You're also offering an option to include Base43 encoded PR body right
> > inside the Bitcoin URI, but in a way that is not backwards compatible
> > with BIP21.
>
> Well, do we need to be compatible? If the dev community decides Base43
> PR QR's (or whatever other self-contained format) is the way to go, we
> just implement, roll it out and use it.
>
My PoS needs to be compatible with BIP21, as when I'm presenting QR code or
sending NFC message - I have no way to tell what wallet/phone is ??on the
accepting side, so I have to be compatible to existing widely supported
technologies.


> I understand your intention behind base43 encoding and noncompatible URI
> > - you want to make most possible use of QR codes. But I wonder - did you
> > compare this base43 to base64 encoded request in a binary QR code
> > format? How much do we actually win in total bytes capacity at a price
> > of noncompatibility and increased complexity?
>
> Alphanumeric QR codes have an alphabet of 45 chars, of which I am using
> 43. I skipped Space and '%' because they're not allowed in URIs. When I
> invented the Base43 format back in 2011, wanted it to be URI compatible
> so we can use the Android intent dispatcher.
>
> If we let go of the URI requirement, we can use binary QR codes as well.
> This means users will always have to manually start their Bitcoin app
> first. (Also, there is an implementation issue with the ZXing scanner
> I'm using, it returns Strings rather than a byte array so it will choke
> on \0 characters.)
>


> > And also maybe we can extend BIP72 to include encoded payment request in
> > the URL directly in a backwards compatible way?
>
> I took this into consideration. It would be space inefficient.
>
> The Base58-encoded address from BIP21 forces the QR code into binary
> mode. Still you can't encode the payment request extension (probably an
> URL parameter) as binary because it needs to stay compatible to the URI
> standard (RFC 3986). You could use one of the Base64 variants for the PR
> in this case, but still it would be inefficient.

?Well, yes, it would be less efficient than base43. But did you calculate
how much less? ?It's a compatible and already widely used way and loosing
compatibility needs to have serious reasons, so would be great to know
exact figures here.

I can find out base64 size, but I don't have a working base43
implementation (since the only existing is in Java, and I don't speak it).
Can you give me a sample uncompressed PR file of moderate size and a base43
encoded version of it? And I'll convert it into base64 and compare.



------------------------------------------------------------------------------
> Learn Graph Databases - Download FREE O'Reilly Book
> "Graph Databases" is the definitive new guide to graph databases and their
> applications. Written by three acclaimed leaders in the field,
> this first edition is now available. Download your free book today!
> http://p.sf.net/sfu/13534_NeoTech
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140320/748182e6/attachment.html>

From jgarzik at bitpay.com  Thu Mar 20 17:31:44 2014
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Thu, 20 Mar 2014 13:31:44 -0400
Subject: [Bitcoin-development] Payment Protocol for Face-to-face Payments
In-Reply-To: <20140320121221.GA25052@netbook.cypherspace.org>
References: <lc5hmg$1jh$1@ger.gmane.org> <leuunm$tjk$1@ger.gmane.org>
	<CANEZrP3nQfvDArKTRgje0Cus4G2JD_zpxSjA3fXfxM2TNAP80Q@mail.gmail.com>
	<CALDj+BafD+6KTNcYDBEu5gNPzYozSkiC-JCxrY-PzXL2DYBRsw@mail.gmail.com>
	<CAJHLa0N4J_Z907+D0ENSNKfNAW2N=7Jf4JzSCO=SU558GtGTzA@mail.gmail.com>
	<lge7nk$3mf$2@ger.gmane.org>
	<CANEZrP0J849oDvMWjf8LWi0xj44Q8DaUwDip5_smVBMNgeQ3mw@mail.gmail.com>
	<20140320121221.GA25052@netbook.cypherspace.org>
Message-ID: <CAJHLa0NeFdXzioQrmK6iKzr85pL3vvTAQH2_vKM3M+T+ZWYjgQ@mail.gmail.com>

On Thu, Mar 20, 2014 at 8:12 AM, Adam Back <adam at cypherspace.org> wrote:
> Whats a sensible limit on practical/convenient QR code size?

Extremely limited.  Preferably under 100 bytes.  You will see
increasingly poor operating in varying light conditions, such as
paying via QR code on a printed receipt in a pub at night.  That was
one of the motivations for BIP 73.


On Thu, Mar 20, 2014 at 4:09 AM, Andreas Schildbach
<andreas at schildbach.de> wrote:
> Afaik, BIP73 needs an external server (the web server).

Yes.  Internet connectivity is not a rarity these days.  Near-field
web servers also work fine.

-- 
Jeff Garzik
Bitcoin core developer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From alexykot at gmail.com  Thu Mar 20 17:42:26 2014
From: alexykot at gmail.com (Alex Kotenko)
Date: Thu, 20 Mar 2014 17:42:26 +0000
Subject: [Bitcoin-development] Payment Protocol for Face-to-face Payments
In-Reply-To: <CAJHLa0NeFdXzioQrmK6iKzr85pL3vvTAQH2_vKM3M+T+ZWYjgQ@mail.gmail.com>
References: <lc5hmg$1jh$1@ger.gmane.org> <leuunm$tjk$1@ger.gmane.org>
	<CANEZrP3nQfvDArKTRgje0Cus4G2JD_zpxSjA3fXfxM2TNAP80Q@mail.gmail.com>
	<CALDj+BafD+6KTNcYDBEu5gNPzYozSkiC-JCxrY-PzXL2DYBRsw@mail.gmail.com>
	<CAJHLa0N4J_Z907+D0ENSNKfNAW2N=7Jf4JzSCO=SU558GtGTzA@mail.gmail.com>
	<lge7nk$3mf$2@ger.gmane.org>
	<CANEZrP0J849oDvMWjf8LWi0xj44Q8DaUwDip5_smVBMNgeQ3mw@mail.gmail.com>
	<20140320121221.GA25052@netbook.cypherspace.org>
	<CAJHLa0NeFdXzioQrmK6iKzr85pL3vvTAQH2_vKM3M+T+ZWYjgQ@mail.gmail.com>
Message-ID: <CALDj+BbF5=L88n6VvDt=ctnr+_1730L3RN+3nb2N3AW3RLESRg@mail.gmail.com>

2014-03-20 17:31 GMT+00:00 Jeff Garzik <jgarzik at bitpay.com>:

> On Thu, Mar 20, 2014 at 8:12 AM, Adam Back <adam at cypherspace.org> wrote:
> > Whats a sensible limit on practical/convenient QR code size?
>
> Extremely limited.  Preferably under 100 bytes.  You will see
> increasingly poor operating in varying light conditions, such as
> paying via QR code on a printed receipt in a pub at night.  That was
> one of the motivations for BIP 73.
>
?Hmm, in this case I think base43 discussion is irrelevant. Even with best
space utilization we can get ?we will not be able to fit in anything bigger
than a smallest unsigned payment certificate. And that is not so useful. So
probably we should stick with BIP73 approach and bluetooth URI scheme we're
inventing.



>
>
> On Thu, Mar 20, 2014 at 4:09 AM, Andreas Schildbach
> <andreas at schildbach.de> wrote:
> > Afaik, BIP73 needs an external server (the web server).
>
> Yes.  Internet connectivity is not a rarity these days.  Near-field
> web servers also work fine.
>
> --
> Jeff Garzik
> Bitcoin core developer and open source evangelist
> BitPay, Inc.      https://bitpay.com/
>
>
> ------------------------------------------------------------------------------
> Learn Graph Databases - Download FREE O'Reilly Book
> "Graph Databases" is the definitive new guide to graph databases and their
> applications. Written by three acclaimed leaders in the field,
> this first edition is now available. Download your free book today!
> http://p.sf.net/sfu/13534_NeoTech
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140320/f588a88a/attachment.html>

From jgarzik at bitpay.com  Thu Mar 20 18:01:48 2014
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Thu, 20 Mar 2014 14:01:48 -0400
Subject: [Bitcoin-development] Payment Protocol for Face-to-face Payments
In-Reply-To: <CALDj+BbF5=L88n6VvDt=ctnr+_1730L3RN+3nb2N3AW3RLESRg@mail.gmail.com>
References: <lc5hmg$1jh$1@ger.gmane.org> <leuunm$tjk$1@ger.gmane.org>
	<CANEZrP3nQfvDArKTRgje0Cus4G2JD_zpxSjA3fXfxM2TNAP80Q@mail.gmail.com>
	<CALDj+BafD+6KTNcYDBEu5gNPzYozSkiC-JCxrY-PzXL2DYBRsw@mail.gmail.com>
	<CAJHLa0N4J_Z907+D0ENSNKfNAW2N=7Jf4JzSCO=SU558GtGTzA@mail.gmail.com>
	<lge7nk$3mf$2@ger.gmane.org>
	<CANEZrP0J849oDvMWjf8LWi0xj44Q8DaUwDip5_smVBMNgeQ3mw@mail.gmail.com>
	<20140320121221.GA25052@netbook.cypherspace.org>
	<CAJHLa0NeFdXzioQrmK6iKzr85pL3vvTAQH2_vKM3M+T+ZWYjgQ@mail.gmail.com>
	<CALDj+BbF5=L88n6VvDt=ctnr+_1730L3RN+3nb2N3AW3RLESRg@mail.gmail.com>
Message-ID: <CAJHLa0PmXiOvdNiAcgPOQG0dNzqRUY9u+T5zLSaToJ1Qm_-j2w@mail.gmail.com>

It really depends on the physical, real world size of the QR code.

If you have a big screen, and security permits displaying a larger QR
code, you can afford more bytes.  If you are displaying a tiny postage
stamp 1-2cm in size, the practical byte limit is very low.

Ideally, you test your QR codes in real world conditions, before
picking the best path.



On Thu, Mar 20, 2014 at 1:42 PM, Alex Kotenko <alexykot at gmail.com> wrote:
> 2014-03-20 17:31 GMT+00:00 Jeff Garzik <jgarzik at bitpay.com>:
>>
>> On Thu, Mar 20, 2014 at 8:12 AM, Adam Back <adam at cypherspace.org> wrote:
>> > Whats a sensible limit on practical/convenient QR code size?
>>
>> Extremely limited.  Preferably under 100 bytes.  You will see
>> increasingly poor operating in varying light conditions, such as
>> paying via QR code on a printed receipt in a pub at night.  That was
>> one of the motivations for BIP 73.
>
> Hmm, in this case I think base43 discussion is irrelevant. Even with best
> space utilization we can get we will not be able to fit in anything bigger
> than a smallest unsigned payment certificate. And that is not so useful. So
> probably we should stick with BIP73 approach and bluetooth URI scheme we're
> inventing.
>
>
>>
>>
>>
>> On Thu, Mar 20, 2014 at 4:09 AM, Andreas Schildbach
>> <andreas at schildbach.de> wrote:
>> > Afaik, BIP73 needs an external server (the web server).
>>
>> Yes.  Internet connectivity is not a rarity these days.  Near-field
>> web servers also work fine.
>>
>> --
>> Jeff Garzik
>> Bitcoin core developer and open source evangelist
>> BitPay, Inc.      https://bitpay.com/
>>
>>
>> ------------------------------------------------------------------------------
>> Learn Graph Databases - Download FREE O'Reilly Book
>> "Graph Databases" is the definitive new guide to graph databases and their
>> applications. Written by three acclaimed leaders in the field,
>> this first edition is now available. Download your free book today!
>> http://p.sf.net/sfu/13534_NeoTech
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>



-- 
Jeff Garzik
Bitcoin core developer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From alexykot at gmail.com  Thu Mar 20 18:20:36 2014
From: alexykot at gmail.com (Alex Kotenko)
Date: Thu, 20 Mar 2014 18:20:36 +0000
Subject: [Bitcoin-development] Payment Protocol for Face-to-face Payments
In-Reply-To: <CANEZrP0J849oDvMWjf8LWi0xj44Q8DaUwDip5_smVBMNgeQ3mw@mail.gmail.com>
References: <lc5hmg$1jh$1@ger.gmane.org> <leuunm$tjk$1@ger.gmane.org>
	<CANEZrP3nQfvDArKTRgje0Cus4G2JD_zpxSjA3fXfxM2TNAP80Q@mail.gmail.com>
	<CALDj+BafD+6KTNcYDBEu5gNPzYozSkiC-JCxrY-PzXL2DYBRsw@mail.gmail.com>
	<CAJHLa0N4J_Z907+D0ENSNKfNAW2N=7Jf4JzSCO=SU558GtGTzA@mail.gmail.com>
	<lge7nk$3mf$2@ger.gmane.org>
	<CANEZrP0J849oDvMWjf8LWi0xj44Q8DaUwDip5_smVBMNgeQ3mw@mail.gmail.com>
Message-ID: <CALDj+BZJ0rSKuDHdbL7ANN0Vtaa3-KGYgusqMDzzB-CUxjMz7g@mail.gmail.com>

Hmm, is there any other way to do it? Can we provide a signed payment
request and verify the sign on receiving side and this way protect from
bluetooth MitM attack? Quick googling showed that SSL over bluetooth isn't
a very well developed area, and my own skills are not enough to quickly
implement a reliable secure solution here.


2014-03-20 10:36 GMT+00:00 Mike Hearn <mike at plan99.net>:

> Encoding entire payment requests into qrcodes is definitely not the way to
> go. They can already be large when signed and we're just at the start of
> adding features.
>
> Finishing off and standardising the bluetooth support is the way to go
> (r=bt:mac). Andreas' app already has some support for this I believe, so
> Alex you could prototype with that, but we need to:
>
> 1) Add an encryption/auth layer on top, because it runs over RFCOMM
> sockets. The authentication would require proof of owning the Bitcoin key
> that's in the address part of the URI (which is needed for backwards compat
> anyway).
>
> 2) Write a BIP for it and make sure it's interoperable
>
> For the auth layer we could either use SSL and then just ignore the server
> certificate and require signing of the session public key with the Bitcoin
> key, which should be easy to code up but is rather heavy on the air, or
> roll a custom lightweight thing where we just do a basic ECDH, with the
> servers key being the same as the address key. But rolling such protocols
> is subtle and I guess it'd need to be reviewed by people familiar with such
> things.
>
> This feels like a good opportunity to grow the community - perhaps we can
> find a volunteer in the forums who enjoys crypto.
>
>
> ------------------------------------------------------------------------------
> Learn Graph Databases - Download FREE O'Reilly Book
> "Graph Databases" is the definitive new guide to graph databases and their
> applications. Written by three acclaimed leaders in the field,
> this first edition is now available. Download your free book today!
> http://p.sf.net/sfu/13534_NeoTech
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140320/83e79cbf/attachment.html>

From mike at plan99.net  Thu Mar 20 18:31:27 2014
From: mike at plan99.net (Mike Hearn)
Date: Thu, 20 Mar 2014 19:31:27 +0100
Subject: [Bitcoin-development] Payment Protocol for Face-to-face Payments
In-Reply-To: <CALDj+BZJ0rSKuDHdbL7ANN0Vtaa3-KGYgusqMDzzB-CUxjMz7g@mail.gmail.com>
References: <lc5hmg$1jh$1@ger.gmane.org> <leuunm$tjk$1@ger.gmane.org>
	<CANEZrP3nQfvDArKTRgje0Cus4G2JD_zpxSjA3fXfxM2TNAP80Q@mail.gmail.com>
	<CALDj+BafD+6KTNcYDBEu5gNPzYozSkiC-JCxrY-PzXL2DYBRsw@mail.gmail.com>
	<CAJHLa0N4J_Z907+D0ENSNKfNAW2N=7Jf4JzSCO=SU558GtGTzA@mail.gmail.com>
	<lge7nk$3mf$2@ger.gmane.org>
	<CANEZrP0J849oDvMWjf8LWi0xj44Q8DaUwDip5_smVBMNgeQ3mw@mail.gmail.com>
	<CALDj+BZJ0rSKuDHdbL7ANN0Vtaa3-KGYgusqMDzzB-CUxjMz7g@mail.gmail.com>
Message-ID: <CANEZrP3szn=oQS+ZuqSzjUoSAjtkyPxPWJFaU1vDW43dRNVeNQ@mail.gmail.com>

With Java, in theory, you can use SSLSocketFactory.createSocket(btsocket,
address, 1234, true) to wrap a bluetooth socket in SSL. However I have not
tried it.

For now, just prototype and build your product without the security. We can
find someone to experiment with this, if you don't want to .

Bluetooth needs encryption and MACs as well as signing to be secure,
because there could be radio MITM. Yes, this overlaps somewhat with the PKI
signing in BIP70, but not entirely - you might want to serve unsigned
payment requests, but still have confidentiality and authenticity for a
local face to face transaction. The signing and encryption does different
things.


On Thu, Mar 20, 2014 at 7:20 PM, Alex Kotenko <alexykot at gmail.com> wrote:

> Hmm, is there any other way to do it? Can we provide a signed payment
> request and verify the sign on receiving side and this way protect from
> bluetooth MitM attack? Quick googling showed that SSL over bluetooth isn't
> a very well developed area, and my own skills are not enough to quickly
> implement a reliable secure solution here.
>
>
> 2014-03-20 10:36 GMT+00:00 Mike Hearn <mike at plan99.net>:
>
>> Encoding entire payment requests into qrcodes is definitely not the way
>> to go. They can already be large when signed and we're just at the start of
>> adding features.
>>
>> Finishing off and standardising the bluetooth support is the way to go
>> (r=bt:mac). Andreas' app already has some support for this I believe, so
>> Alex you could prototype with that, but we need to:
>>
>> 1) Add an encryption/auth layer on top, because it runs over RFCOMM
>> sockets. The authentication would require proof of owning the Bitcoin key
>> that's in the address part of the URI (which is needed for backwards compat
>> anyway).
>>
>> 2) Write a BIP for it and make sure it's interoperable
>>
>> For the auth layer we could either use SSL and then just ignore the
>> server certificate and require signing of the session public key with the
>> Bitcoin key, which should be easy to code up but is rather heavy on the
>> air, or roll a custom lightweight thing where we just do a basic ECDH, with
>> the servers key being the same as the address key. But rolling such
>> protocols is subtle and I guess it'd need to be reviewed by people familiar
>> with such things.
>>
>> This feels like a good opportunity to grow the community - perhaps we can
>> find a volunteer in the forums who enjoys crypto.
>>
>>
>> ------------------------------------------------------------------------------
>> Learn Graph Databases - Download FREE O'Reilly Book
>> "Graph Databases" is the definitive new guide to graph databases and their
>> applications. Written by three acclaimed leaders in the field,
>> this first edition is now available. Download your free book today!
>> http://p.sf.net/sfu/13534_NeoTech
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140320/6e2defd4/attachment.html>

From alexykot at gmail.com  Thu Mar 20 18:50:02 2014
From: alexykot at gmail.com (Alex Kotenko)
Date: Thu, 20 Mar 2014 18:50:02 +0000
Subject: [Bitcoin-development] Payment Protocol for Face-to-face Payments
In-Reply-To: <CANEZrP3szn=oQS+ZuqSzjUoSAjtkyPxPWJFaU1vDW43dRNVeNQ@mail.gmail.com>
References: <lc5hmg$1jh$1@ger.gmane.org> <leuunm$tjk$1@ger.gmane.org>
	<CANEZrP3nQfvDArKTRgje0Cus4G2JD_zpxSjA3fXfxM2TNAP80Q@mail.gmail.com>
	<CALDj+BafD+6KTNcYDBEu5gNPzYozSkiC-JCxrY-PzXL2DYBRsw@mail.gmail.com>
	<CAJHLa0N4J_Z907+D0ENSNKfNAW2N=7Jf4JzSCO=SU558GtGTzA@mail.gmail.com>
	<lge7nk$3mf$2@ger.gmane.org>
	<CANEZrP0J849oDvMWjf8LWi0xj44Q8DaUwDip5_smVBMNgeQ3mw@mail.gmail.com>
	<CALDj+BZJ0rSKuDHdbL7ANN0Vtaa3-KGYgusqMDzzB-CUxjMz7g@mail.gmail.com>
	<CANEZrP3szn=oQS+ZuqSzjUoSAjtkyPxPWJFaU1vDW43dRNVeNQ@mail.gmail.com>
Message-ID: <CALDj+BYAJ=vJcrW4gthTdcrhVux-XBeh3r-SSxzxd0FAdnk4cw@mail.gmail.com>

We'll see how it will go, maybe I will get to implement this somewhere soon.

Yes, I'm thinking exactly about radio MitM attacks possible with bluetooth.
I'll also look into using PKI inside the PoS for the merchant. It would be
great user experience if we would be able to provide a signed payment
request with human recognizable merchant identity name in the way you
described much earlier in Bitcoin 0.9 FAQ. ?


2014-03-20 18:31 GMT+00:00 Mike Hearn <mike at plan99.net>:

> With Java, in theory, you can use SSLSocketFactory.createSocket(btsocket,
> address, 1234, true) to wrap a bluetooth socket in SSL. However I have not
> tried it.
>
> For now, just prototype and build your product without the security. We
> can find someone to experiment with this, if you don't want to .
>
> Bluetooth needs encryption and MACs as well as signing to be secure,
> because there could be radio MITM. Yes, this overlaps somewhat with the PKI
> signing in BIP70, but not entirely - you might want to serve unsigned
> payment requests, but still have confidentiality and authenticity for a
> local face to face transaction. The signing and encryption does different
> things.
>
>
> On Thu, Mar 20, 2014 at 7:20 PM, Alex Kotenko <alexykot at gmail.com> wrote:
>
>> Hmm, is there any other way to do it? Can we provide a signed payment
>> request and verify the sign on receiving side and this way protect from
>> bluetooth MitM attack? Quick googling showed that SSL over bluetooth isn't
>> a very well developed area, and my own skills are not enough to quickly
>> implement a reliable secure solution here.
>>
>>
>> 2014-03-20 10:36 GMT+00:00 Mike Hearn <mike at plan99.net>:
>>
>>> Encoding entire payment requests into qrcodes is definitely not the way
>>> to go. They can already be large when signed and we're just at the start of
>>> adding features.
>>>
>>> Finishing off and standardising the bluetooth support is the way to go
>>> (r=bt:mac). Andreas' app already has some support for this I believe, so
>>> Alex you could prototype with that, but we need to:
>>>
>>> 1) Add an encryption/auth layer on top, because it runs over RFCOMM
>>> sockets. The authentication would require proof of owning the Bitcoin key
>>> that's in the address part of the URI (which is needed for backwards compat
>>> anyway).
>>>
>>> 2) Write a BIP for it and make sure it's interoperable
>>>
>>> For the auth layer we could either use SSL and then just ignore the
>>> server certificate and require signing of the session public key with the
>>> Bitcoin key, which should be easy to code up but is rather heavy on the
>>> air, or roll a custom lightweight thing where we just do a basic ECDH, with
>>> the servers key being the same as the address key. But rolling such
>>> protocols is subtle and I guess it'd need to be reviewed by people familiar
>>> with such things.
>>>
>>> This feels like a good opportunity to grow the community - perhaps we
>>> can find a volunteer in the forums who enjoys crypto.
>>>
>>>
>>> ------------------------------------------------------------------------------
>>> Learn Graph Databases - Download FREE O'Reilly Book
>>> "Graph Databases" is the definitive new guide to graph databases and
>>> their
>>> applications. Written by three acclaimed leaders in the field,
>>> this first edition is now available. Download your free book today!
>>> http://p.sf.net/sfu/13534_NeoTech
>>> _______________________________________________
>>> Bitcoin-development mailing list
>>> Bitcoin-development at lists.sourceforge.net
>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>>
>>>
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140320/018d3730/attachment.html>

From roy at gnomon.org.uk  Thu Mar 20 21:52:08 2014
From: roy at gnomon.org.uk (Roy Badami)
Date: Thu, 20 Mar 2014 21:52:08 +0000
Subject: [Bitcoin-development] Payment Protocol for Face-to-face Payments
In-Reply-To: <CANEZrP3szn=oQS+ZuqSzjUoSAjtkyPxPWJFaU1vDW43dRNVeNQ@mail.gmail.com>
References: <lc5hmg$1jh$1@ger.gmane.org> <leuunm$tjk$1@ger.gmane.org>
	<CANEZrP3nQfvDArKTRgje0Cus4G2JD_zpxSjA3fXfxM2TNAP80Q@mail.gmail.com>
	<CALDj+BafD+6KTNcYDBEu5gNPzYozSkiC-JCxrY-PzXL2DYBRsw@mail.gmail.com>
	<CAJHLa0N4J_Z907+D0ENSNKfNAW2N=7Jf4JzSCO=SU558GtGTzA@mail.gmail.com>
	<lge7nk$3mf$2@ger.gmane.org>
	<CANEZrP0J849oDvMWjf8LWi0xj44Q8DaUwDip5_smVBMNgeQ3mw@mail.gmail.com>
	<CALDj+BZJ0rSKuDHdbL7ANN0Vtaa3-KGYgusqMDzzB-CUxjMz7g@mail.gmail.com>
	<CANEZrP3szn=oQS+ZuqSzjUoSAjtkyPxPWJFaU1vDW43dRNVeNQ@mail.gmail.com>
Message-ID: <20140320215208.GC88006@giles.gnomon.org.uk>

On Thu, Mar 20, 2014 at 07:31:27PM +0100, Mike Hearn wrote:

> Yes, this overlaps somewhat with the PKI signing in BIP70, but not
> entirely - you might want to serve unsigned payment requests, but
> still have confidentiality and authenticity for a local face to face
> transaction. The signing and encryption does different things

I'm not sure if this what you're getting at, but in a common
face-to-face scenario, it really doesn't overlap so much (in that the
PKI in BIP70 isn't really helpful).

It's not unusual, in a face-to-face transaction at a bricks-and-mortar
establishment, that you know neither the legal name of the entity
running the establishment, nor any electronic identifier (domain name,
email address) that might be presented to you in an X.509 certificate,
even if such a certificate is presented in the PaymentRequest.

In many cases I want/need to simply be assured that I am paying "the
person/organisation which operates that machine behind the counter,
right there".

In many ways I'll miss the simplicity of BIP21 QR codes for
face-to-face transactions - because in this use case the payment
protocol complicates (and in many cases weakens) the assurance that
you really are paying the entity that prepared the QR code.

roy



From mike at plan99.net  Thu Mar 20 23:02:44 2014
From: mike at plan99.net (Mike Hearn)
Date: Fri, 21 Mar 2014 00:02:44 +0100
Subject: [Bitcoin-development] Payment Protocol for Face-to-face Payments
In-Reply-To: <20140320215208.GC88006@giles.gnomon.org.uk>
References: <lc5hmg$1jh$1@ger.gmane.org> <leuunm$tjk$1@ger.gmane.org>
	<CANEZrP3nQfvDArKTRgje0Cus4G2JD_zpxSjA3fXfxM2TNAP80Q@mail.gmail.com>
	<CALDj+BafD+6KTNcYDBEu5gNPzYozSkiC-JCxrY-PzXL2DYBRsw@mail.gmail.com>
	<CAJHLa0N4J_Z907+D0ENSNKfNAW2N=7Jf4JzSCO=SU558GtGTzA@mail.gmail.com>
	<lge7nk$3mf$2@ger.gmane.org>
	<CANEZrP0J849oDvMWjf8LWi0xj44Q8DaUwDip5_smVBMNgeQ3mw@mail.gmail.com>
	<CALDj+BZJ0rSKuDHdbL7ANN0Vtaa3-KGYgusqMDzzB-CUxjMz7g@mail.gmail.com>
	<CANEZrP3szn=oQS+ZuqSzjUoSAjtkyPxPWJFaU1vDW43dRNVeNQ@mail.gmail.com>
	<20140320215208.GC88006@giles.gnomon.org.uk>
Message-ID: <CANEZrP3kHRJ6U-O_Jgei4U6s9GyQGvB_p5ChtcHJEkYR0wWPvQ@mail.gmail.com>

>
> It's not unusual, in a face-to-face transaction at a bricks-and-mortar
> establishment, that you know neither the legal name of the entity
> running the establishment


I'd hope that people can get certs for their actual business name, but
sometimes it does differ yes.

However remember that signing in BIP70 is about more than just security,
though that's the driving factor. It's also needed for things like dispute
mediation, receipts, etc.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140321/afec1ced/attachment.html>

From chris.dcosta at meek.io  Fri Mar 21 09:11:59 2014
From: chris.dcosta at meek.io (Chris D'Costa)
Date: Fri, 21 Mar 2014 10:11:59 +0100
Subject: [Bitcoin-development] Post to list request
Message-ID: <A48AEA3A-D4B2-4600-927C-3F642B366078@meek.io>

Hello 

I wonder if I could be granted access to post to the dev list. My project is the Meek hardware wallet, and we are working on a solution to avoid MITM attacks when communicating a pay-to information over a non-secure transport mechanism. 

Regards

Chris


From andreas at schildbach.de  Fri Mar 21 09:47:03 2014
From: andreas at schildbach.de (Andreas Schildbach)
Date: Fri, 21 Mar 2014 10:47:03 +0100
Subject: [Bitcoin-development] Payment Protocol for Face-to-face Payments
In-Reply-To: <CALDj+BZRsXnU5w=1B+01PDfMPY-7zqU3GP_52vr9wknEdTJ59Q@mail.gmail.com>
References: <lc5hmg$1jh$1@ger.gmane.org>
	<leuunm$tjk$1@ger.gmane.org>	<CANEZrP3nQfvDArKTRgje0Cus4G2JD_zpxSjA3fXfxM2TNAP80Q@mail.gmail.com>	<CALDj+BafD+6KTNcYDBEu5gNPzYozSkiC-JCxrY-PzXL2DYBRsw@mail.gmail.com>	<lge7lv$3mf$1@ger.gmane.org>
	<CALDj+BZRsXnU5w=1B+01PDfMPY-7zqU3GP_52vr9wknEdTJ59Q@mail.gmail.com>
Message-ID: <lgh1q8$1dc$1@ger.gmane.org>

On 03/20/2014 05:14 PM, Alex Kotenko wrote:

> Hmm, if we're inventing an URI for bluetooth, I'd rather follow existing
> URI's patterns. BT is strictly point-to-point connection, so BT MAC
> should be considered as server address, and payment request ID can be
> considered as request path. Probably "bt:<bt-mac>/?
> <random_id_of_payment_request>" would be more usual and easily
> understandable.

Agreed. I used the dash because I feared a slash would need to be
escaped if used in an URL parameter.

> I wonder how complex it would be to implement HTTP-over-Bluetooth. Not
> like I'm willing to do that now, but HTTP is well known and proven to be
> quite good for tasks like this, so in theory it would be handy to have
> such capacities in here.

Thought of that as well. On the other hand, HTTP might be overkill and
we inherit its potential downsides as well.

>     Well, do we need to be compatible? If the dev community decides Base43
>     PR QR's (or whatever other self-contained format) is the way to go, we
>     just implement, roll it out and use it.
> 
> My PoS needs to be compatible with BIP21, as when I'm presenting QR code
> or sending NFC message - I have no way to tell what wallet/phone is ??on
> the accepting side, so I have to be compatible to existing widely
> supported technologies.

Agreed. All I wanted to say support for QR is still small enough that we
might be able to switch to an incompatible standard. If we're determined
that is.

> ?Well, yes, it would be less efficient than base43. But did you
> calculate how much less? ?It's a compatible and already widely used way
> and loosing compatibility needs to have serious reasons, so would be
> great to know exact figures here.

Base 64 via binary QR:   64 chars / 256 chars
                         ==> 6 bit / 8 bit = 0.75

Base 43 via alphanum QR: 43 chars / 45 chars
                         ==> 5.43 bit / 5.49 bit = 0.99

That would be efficiency in terms of PR data size vs. amount space used
in a QR code. Of course, the visual QR encoding also plays a role, for
example its size is increased in discrete steps.





From andreas at schildbach.de  Fri Mar 21 10:25:59 2014
From: andreas at schildbach.de (Andreas Schildbach)
Date: Fri, 21 Mar 2014 11:25:59 +0100
Subject: [Bitcoin-development] Payment Protocol for Face-to-face Payments
In-Reply-To: <20140320121221.GA25052@netbook.cypherspace.org>
References: <lc5hmg$1jh$1@ger.gmane.org>
	<leuunm$tjk$1@ger.gmane.org>	<CANEZrP3nQfvDArKTRgje0Cus4G2JD_zpxSjA3fXfxM2TNAP80Q@mail.gmail.com>	<CALDj+BafD+6KTNcYDBEu5gNPzYozSkiC-JCxrY-PzXL2DYBRsw@mail.gmail.com>	<CAJHLa0N4J_Z907+D0ENSNKfNAW2N=7Jf4JzSCO=SU558GtGTzA@mail.gmail.com>	<lge7nk$3mf$2@ger.gmane.org>	<CANEZrP0J849oDvMWjf8LWi0xj44Q8DaUwDip5_smVBMNgeQ3mw@mail.gmail.com>
	<20140320121221.GA25052@netbook.cypherspace.org>
Message-ID: <lgh438$tnn$1@ger.gmane.org>

On 03/20/2014 01:12 PM, Adam Back wrote:

> Whats a sensible limit on practical/convenient QR code size?

Technically 3 KB. In my experience codes above 1.5 KB become impossible
to scan (ZXing scanner, 3 years ago). You will want to stay below 500
bytes for convenient scanning. That said, I'm convinced there is a lot
of room for scanning improvements.

> How much of the payment protocol message size comes from use of x509?

As said in the OP, a minimal PR uses 50 bytes. X.509 seems to put about
4000 bytes on top of that.

As you can see, we have quite some room for improvements to PR payload
(PaymentDetails). X.509 certification will probably not be possible via
QR, at least not until specialized CA's will issue space-efficient certs
(using ECDSA?).





From andreas at schildbach.de  Fri Mar 21 10:28:22 2014
From: andreas at schildbach.de (Andreas Schildbach)
Date: Fri, 21 Mar 2014 11:28:22 +0100
Subject: [Bitcoin-development] Payment Protocol for Face-to-face Payments
In-Reply-To: <CAJHLa0NeFdXzioQrmK6iKzr85pL3vvTAQH2_vKM3M+T+ZWYjgQ@mail.gmail.com>
References: <lc5hmg$1jh$1@ger.gmane.org>
	<leuunm$tjk$1@ger.gmane.org>	<CANEZrP3nQfvDArKTRgje0Cus4G2JD_zpxSjA3fXfxM2TNAP80Q@mail.gmail.com>	<CALDj+BafD+6KTNcYDBEu5gNPzYozSkiC-JCxrY-PzXL2DYBRsw@mail.gmail.com>	<CAJHLa0N4J_Z907+D0ENSNKfNAW2N=7Jf4JzSCO=SU558GtGTzA@mail.gmail.com>	<lge7nk$3mf$2@ger.gmane.org>	<CANEZrP0J849oDvMWjf8LWi0xj44Q8DaUwDip5_smVBMNgeQ3mw@mail.gmail.com>	<20140320121221.GA25052@netbook.cypherspace.org>
	<CAJHLa0NeFdXzioQrmK6iKzr85pL3vvTAQH2_vKM3M+T+ZWYjgQ@mail.gmail.com>
Message-ID: <lgh47n$tnn$2@ger.gmane.org>

On 03/20/2014 06:31 PM, Jeff Garzik wrote:

>> Afaik, BIP73 needs an external server (the web server).
> 
> Yes.  Internet connectivity is not a rarity these days.  Near-field
> web servers also work fine.

Unfortunately it still is. At least here in Germany.






From andreas at schildbach.de  Fri Mar 21 10:43:27 2014
From: andreas at schildbach.de (Andreas Schildbach)
Date: Fri, 21 Mar 2014 11:43:27 +0100
Subject: [Bitcoin-development] Payment Protocol for Face-to-face Payments
In-Reply-To: <20140320215208.GC88006@giles.gnomon.org.uk>
References: <lc5hmg$1jh$1@ger.gmane.org>
	<leuunm$tjk$1@ger.gmane.org>	<CANEZrP3nQfvDArKTRgje0Cus4G2JD_zpxSjA3fXfxM2TNAP80Q@mail.gmail.com>	<CALDj+BafD+6KTNcYDBEu5gNPzYozSkiC-JCxrY-PzXL2DYBRsw@mail.gmail.com>	<CAJHLa0N4J_Z907+D0ENSNKfNAW2N=7Jf4JzSCO=SU558GtGTzA@mail.gmail.com>	<lge7nk$3mf$2@ger.gmane.org>	<CANEZrP0J849oDvMWjf8LWi0xj44Q8DaUwDip5_smVBMNgeQ3mw@mail.gmail.com>	<CALDj+BZJ0rSKuDHdbL7ANN0Vtaa3-KGYgusqMDzzB-CUxjMz7g@mail.gmail.com>	<CANEZrP3szn=oQS+ZuqSzjUoSAjtkyPxPWJFaU1vDW43dRNVeNQ@mail.gmail.com>
	<20140320215208.GC88006@giles.gnomon.org.uk>
Message-ID: <lgh540$9e5$1@ger.gmane.org>

+1

I couldn't do a better job at describing my motivation behind trying to
stuff payment requests into QR codes.


On 03/20/2014 10:52 PM, Roy Badami wrote:
> On Thu, Mar 20, 2014 at 07:31:27PM +0100, Mike Hearn wrote:
> 
>> Yes, this overlaps somewhat with the PKI signing in BIP70, but not
>> entirely - you might want to serve unsigned payment requests, but
>> still have confidentiality and authenticity for a local face to face
>> transaction. The signing and encryption does different things
> 
> I'm not sure if this what you're getting at, but in a common
> face-to-face scenario, it really doesn't overlap so much (in that the
> PKI in BIP70 isn't really helpful).
> 
> It's not unusual, in a face-to-face transaction at a bricks-and-mortar
> establishment, that you know neither the legal name of the entity
> running the establishment, nor any electronic identifier (domain name,
> email address) that might be presented to you in an X.509 certificate,
> even if such a certificate is presented in the PaymentRequest.
> 
> In many cases I want/need to simply be assured that I am paying "the
> person/organisation which operates that machine behind the counter,
> right there".
> 
> In many ways I'll miss the simplicity of BIP21 QR codes for
> face-to-face transactions - because in this use case the payment
> protocol complicates (and in many cases weakens) the assurance that
> you really are paying the entity that prepared the QR code.
> 
> roy
> 
> ------------------------------------------------------------------------------
> Learn Graph Databases - Download FREE O'Reilly Book
> "Graph Databases" is the definitive new guide to graph databases and their
> applications. Written by three acclaimed leaders in the field,
> this first edition is now available. Download your free book today!
> http://p.sf.net/sfu/13534_NeoTech
> 





From andreas at schildbach.de  Fri Mar 21 10:58:32 2014
From: andreas at schildbach.de (Andreas Schildbach)
Date: Fri, 21 Mar 2014 11:58:32 +0100
Subject: [Bitcoin-development] Post to list request
In-Reply-To: <A48AEA3A-D4B2-4600-927C-3F642B366078@meek.io>
References: <A48AEA3A-D4B2-4600-927C-3F642B366078@meek.io>
Message-ID: <lgh609$ili$1@ger.gmane.org>

Access granted. Welcome! (-:


On 03/21/2014 10:11 AM, Chris D'Costa wrote:
> Hello 
> 
> I wonder if I could be granted access to post to the dev list. My project is the Meek hardware wallet, and we are working on a solution to avoid MITM attacks when communicating a pay-to information over a non-secure transport mechanism. 
> 
> Regards
> 
> Chris
> ------------------------------------------------------------------------------
> Learn Graph Databases - Download FREE O'Reilly Book
> "Graph Databases" is the definitive new guide to graph databases and their
> applications. Written by three acclaimed leaders in the field,
> this first edition is now available. Download your free book today!
> http://p.sf.net/sfu/13534_NeoTech
> 





From adam at cypherspace.org  Fri Mar 21 10:59:06 2014
From: adam at cypherspace.org (Adam Back)
Date: Fri, 21 Mar 2014 11:59:06 +0100
Subject: [Bitcoin-development] Payment Protocol for Face-to-face Payments
In-Reply-To: <lgh438$tnn$1@ger.gmane.org>
References: <lc5hmg$1jh$1@ger.gmane.org> <leuunm$tjk$1@ger.gmane.org>
	<CANEZrP3nQfvDArKTRgje0Cus4G2JD_zpxSjA3fXfxM2TNAP80Q@mail.gmail.com>
	<CALDj+BafD+6KTNcYDBEu5gNPzYozSkiC-JCxrY-PzXL2DYBRsw@mail.gmail.com>
	<CAJHLa0N4J_Z907+D0ENSNKfNAW2N=7Jf4JzSCO=SU558GtGTzA@mail.gmail.com>
	<lge7nk$3mf$2@ger.gmane.org>
	<CANEZrP0J849oDvMWjf8LWi0xj44Q8DaUwDip5_smVBMNgeQ3mw@mail.gmail.com>
	<20140320121221.GA25052@netbook.cypherspace.org>
	<lgh438$tnn$1@ger.gmane.org>
Message-ID: <20140321105906.GA1725@netbook.cypherspace.org>

Maybe its time to explore raw ECDSA signed message based certs.

btw I dont think its quite 4kB.  eg bitpay's looks to be about 1.5kB in der
format.  And they contain a 2048-bit RSA server key, and 2048-bit RSA
signatures (256byte each right there = 512bytes).  And even 2048 is weaker
than 256-bit ECDSA.

Adam

On Fri, Mar 21, 2014 at 11:25:59AM +0100, Andreas Schildbach wrote:
>On 03/20/2014 01:12 PM, Adam Back wrote:
>
>> Whats a sensible limit on practical/convenient QR code size?
>
>Technically 3 KB. In my experience codes above 1.5 KB become impossible
>to scan (ZXing scanner, 3 years ago). You will want to stay below 500
>bytes for convenient scanning. That said, I'm convinced there is a lot
>of room for scanning improvements.
>
>> How much of the payment protocol message size comes from use of x509?
>
>As said in the OP, a minimal PR uses 50 bytes. X.509 seems to put about
>4000 bytes on top of that.
>
>As you can see, we have quite some room for improvements to PR payload
>(PaymentDetails). X.509 certification will probably not be possible via
>QR, at least not until specialized CA's will issue space-efficient certs
>(using ECDSA?).



From mike at plan99.net  Fri Mar 21 11:08:08 2014
From: mike at plan99.net (Mike Hearn)
Date: Fri, 21 Mar 2014 12:08:08 +0100
Subject: [Bitcoin-development] Payment Protocol for Face-to-face Payments
In-Reply-To: <20140321105906.GA1725@netbook.cypherspace.org>
References: <lc5hmg$1jh$1@ger.gmane.org> <leuunm$tjk$1@ger.gmane.org>
	<CANEZrP3nQfvDArKTRgje0Cus4G2JD_zpxSjA3fXfxM2TNAP80Q@mail.gmail.com>
	<CALDj+BafD+6KTNcYDBEu5gNPzYozSkiC-JCxrY-PzXL2DYBRsw@mail.gmail.com>
	<CAJHLa0N4J_Z907+D0ENSNKfNAW2N=7Jf4JzSCO=SU558GtGTzA@mail.gmail.com>
	<lge7nk$3mf$2@ger.gmane.org>
	<CANEZrP0J849oDvMWjf8LWi0xj44Q8DaUwDip5_smVBMNgeQ3mw@mail.gmail.com>
	<20140320121221.GA25052@netbook.cypherspace.org>
	<lgh438$tnn$1@ger.gmane.org>
	<20140321105906.GA1725@netbook.cypherspace.org>
Message-ID: <CANEZrP2bG_r08vYDZZY4Hg6M+tZFzyQj7SVQ1syZwgv=+F=DqQ@mail.gmail.com>

On Fri, Mar 21, 2014 at 11:59 AM, Adam Back <adam at cypherspace.org> wrote:

> Maybe its time to explore raw ECDSA signed message based certs.
>

If you want to create and run a new CA, by all means. But I bet you don't.
So we're stuck with the current system for now.


> btw I dont think its quite 4kB.  eg bitpay's looks to be about 1.5kB in der
> format.  And they contain a 2048-bit RSA server key, and 2048-bit RSA
> signatures (256byte each right there = 512bytes).  And even 2048 is weaker
> than 256-bit ECDSA.


But you have to chain up to the root.

The only reason more certs aren't ECC is backwards compatibility. Some old
browsers don't know how to handle them. It wasn't so long ago that Fedora
and Android were deleting ECC code from upstream libraries before shipping
them, either for patent reasons for disk space saving measures.

But it's possible to get ECC certs if you want. For example, Entrust is
starting to sell them:

http://www.entrust.net/ecc-certs/index.htm

But their intermediate cert is still RSA. My understanding is that ECC
roots for many CA's have been submitted and are now included, but of course
"give up compatibility with lots of users" vs "save a bit of cpu time and a
handful of bytes" is no real competition so it will be a long time until
most websites are using ECC certs.

Regardless, it's all irrelevant. Who knows when we might want to add
another feature that uses some bytes into PaymentRequests. Stuffing them
into a QR code will never make much sense IMO - it's far more sensible to
just use Bluetooth where the data size constraints are so much easier.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140321/a4fc4e27/attachment.html>

From mike at plan99.net  Fri Mar 21 11:09:33 2014
From: mike at plan99.net (Mike Hearn)
Date: Fri, 21 Mar 2014 12:09:33 +0100
Subject: [Bitcoin-development] Post to list request
In-Reply-To: <lgh609$ili$1@ger.gmane.org>
References: <A48AEA3A-D4B2-4600-927C-3F642B366078@meek.io>
	<lgh609$ili$1@ger.gmane.org>
Message-ID: <CANEZrP1Hv3PJy6zuJ=e8xvLJMnagEHh40c-vO=y0TcqZ7uv_Yg@mail.gmail.com>

Sounds very relevant to what we were just discussing on the other thread,
about securing Bluetooth connections and BIP70.


On Fri, Mar 21, 2014 at 11:58 AM, Andreas Schildbach
<andreas at schildbach.de>wrote:

> Access granted. Welcome! (-:
>
>
> On 03/21/2014 10:11 AM, Chris D'Costa wrote:
> > Hello
> >
> > I wonder if I could be granted access to post to the dev list. My
> project is the Meek hardware wallet, and we are working on a solution to
> avoid MITM attacks when communicating a pay-to information over a
> non-secure transport mechanism.
> >
> > Regards
> >
> > Chris
> >
> ------------------------------------------------------------------------------
> > Learn Graph Databases - Download FREE O'Reilly Book
> > "Graph Databases" is the definitive new guide to graph databases and
> their
> > applications. Written by three acclaimed leaders in the field,
> > this first edition is now available. Download your free book today!
> > http://p.sf.net/sfu/13534_NeoTech
> >
>
>
>
>
> ------------------------------------------------------------------------------
> Learn Graph Databases - Download FREE O'Reilly Book
> "Graph Databases" is the definitive new guide to graph databases and their
> applications. Written by three acclaimed leaders in the field,
> this first edition is now available. Download your free book today!
> http://p.sf.net/sfu/13534_NeoTech
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140321/7d58203b/attachment.html>

From mike at plan99.net  Fri Mar 21 11:33:57 2014
From: mike at plan99.net (Mike Hearn)
Date: Fri, 21 Mar 2014 12:33:57 +0100
Subject: [Bitcoin-development] Payment Protocol for Face-to-face Payments
In-Reply-To: <CANEZrP2bG_r08vYDZZY4Hg6M+tZFzyQj7SVQ1syZwgv=+F=DqQ@mail.gmail.com>
References: <lc5hmg$1jh$1@ger.gmane.org> <leuunm$tjk$1@ger.gmane.org>
	<CANEZrP3nQfvDArKTRgje0Cus4G2JD_zpxSjA3fXfxM2TNAP80Q@mail.gmail.com>
	<CALDj+BafD+6KTNcYDBEu5gNPzYozSkiC-JCxrY-PzXL2DYBRsw@mail.gmail.com>
	<CAJHLa0N4J_Z907+D0ENSNKfNAW2N=7Jf4JzSCO=SU558GtGTzA@mail.gmail.com>
	<lge7nk$3mf$2@ger.gmane.org>
	<CANEZrP0J849oDvMWjf8LWi0xj44Q8DaUwDip5_smVBMNgeQ3mw@mail.gmail.com>
	<20140320121221.GA25052@netbook.cypherspace.org>
	<lgh438$tnn$1@ger.gmane.org>
	<20140321105906.GA1725@netbook.cypherspace.org>
	<CANEZrP2bG_r08vYDZZY4Hg6M+tZFzyQj7SVQ1syZwgv=+F=DqQ@mail.gmail.com>
Message-ID: <CANEZrP1=69DsDoBC6DmD+ZfwV2nEW2JcJbDy4PHoUYxbQYNzeg@mail.gmail.com>

Oh, one other reason I found - apparently RIM, at least in the past, has
been telling CA's that they need to pay mad bux for the Certicom ECC
patents. So that's another reason why most certs are still using RSA.


On Fri, Mar 21, 2014 at 12:08 PM, Mike Hearn <mike at plan99.net> wrote:

> On Fri, Mar 21, 2014 at 11:59 AM, Adam Back <adam at cypherspace.org> wrote:
>
>> Maybe its time to explore raw ECDSA signed message based certs.
>>
>
> If you want to create and run a new CA, by all means. But I bet you don't.
> So we're stuck with the current system for now.
>
>
>> btw I dont think its quite 4kB.  eg bitpay's looks to be about 1.5kB in
>> der
>> format.  And they contain a 2048-bit RSA server key, and 2048-bit RSA
>> signatures (256byte each right there = 512bytes).  And even 2048 is weaker
>> than 256-bit ECDSA.
>
>
> But you have to chain up to the root.
>
> The only reason more certs aren't ECC is backwards compatibility. Some old
> browsers don't know how to handle them. It wasn't so long ago that Fedora
> and Android were deleting ECC code from upstream libraries before shipping
> them, either for patent reasons for disk space saving measures.
>
> But it's possible to get ECC certs if you want. For example, Entrust is
> starting to sell them:
>
> http://www.entrust.net/ecc-certs/index.htm
>
> But their intermediate cert is still RSA. My understanding is that ECC
> roots for many CA's have been submitted and are now included, but of course
> "give up compatibility with lots of users" vs "save a bit of cpu time and a
> handful of bytes" is no real competition so it will be a long time until
> most websites are using ECC certs.
>
> Regardless, it's all irrelevant. Who knows when we might want to add
> another feature that uses some bytes into PaymentRequests. Stuffing them
> into a QR code will never make much sense IMO - it's far more sensible to
> just use Bluetooth where the data size constraints are so much easier.
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140321/4938b65f/attachment.html>

From adam at cypherspace.org  Fri Mar 21 12:25:42 2014
From: adam at cypherspace.org (Adam Back)
Date: Fri, 21 Mar 2014 13:25:42 +0100
Subject: [Bitcoin-development] Payment Protocol for Face-to-face Payments
In-Reply-To: <CANEZrP1=69DsDoBC6DmD+ZfwV2nEW2JcJbDy4PHoUYxbQYNzeg@mail.gmail.com>
References: <CANEZrP3nQfvDArKTRgje0Cus4G2JD_zpxSjA3fXfxM2TNAP80Q@mail.gmail.com>
	<CALDj+BafD+6KTNcYDBEu5gNPzYozSkiC-JCxrY-PzXL2DYBRsw@mail.gmail.com>
	<CAJHLa0N4J_Z907+D0ENSNKfNAW2N=7Jf4JzSCO=SU558GtGTzA@mail.gmail.com>
	<lge7nk$3mf$2@ger.gmane.org>
	<CANEZrP0J849oDvMWjf8LWi0xj44Q8DaUwDip5_smVBMNgeQ3mw@mail.gmail.com>
	<20140320121221.GA25052@netbook.cypherspace.org>
	<lgh438$tnn$1@ger.gmane.org>
	<20140321105906.GA1725@netbook.cypherspace.org>
	<CANEZrP2bG_r08vYDZZY4Hg6M+tZFzyQj7SVQ1syZwgv=+F=DqQ@mail.gmail.com>
	<CANEZrP1=69DsDoBC6DmD+ZfwV2nEW2JcJbDy4PHoUYxbQYNzeg@mail.gmail.com>
Message-ID: <20140321122542.GA2686@netbook.cypherspace.org>

According to Bernstein it's patent FUD (expired, ancient and solid prior
art).

http://lists.randombit.net/pipermail/cryptography/2013-August/005126.html

Adam

On Fri, Mar 21, 2014 at 12:33:57PM +0100, Mike Hearn wrote:
>   Oh, one other reason I found - apparently RIM, at least in the past,
>   has been telling CA's that they need to pay mad bux for the Certicom
>   ECC patents. So that's another reason why most certs are still using
>   RSA.



From mike at plan99.net  Fri Mar 21 13:07:31 2014
From: mike at plan99.net (Mike Hearn)
Date: Fri, 21 Mar 2014 14:07:31 +0100
Subject: [Bitcoin-development] Payment Protocol for Face-to-face Payments
In-Reply-To: <20140321122542.GA2686@netbook.cypherspace.org>
References: <CANEZrP3nQfvDArKTRgje0Cus4G2JD_zpxSjA3fXfxM2TNAP80Q@mail.gmail.com>
	<CALDj+BafD+6KTNcYDBEu5gNPzYozSkiC-JCxrY-PzXL2DYBRsw@mail.gmail.com>
	<CAJHLa0N4J_Z907+D0ENSNKfNAW2N=7Jf4JzSCO=SU558GtGTzA@mail.gmail.com>
	<lge7nk$3mf$2@ger.gmane.org>
	<CANEZrP0J849oDvMWjf8LWi0xj44Q8DaUwDip5_smVBMNgeQ3mw@mail.gmail.com>
	<20140320121221.GA25052@netbook.cypherspace.org>
	<lgh438$tnn$1@ger.gmane.org>
	<20140321105906.GA1725@netbook.cypherspace.org>
	<CANEZrP2bG_r08vYDZZY4Hg6M+tZFzyQj7SVQ1syZwgv=+F=DqQ@mail.gmail.com>
	<CANEZrP1=69DsDoBC6DmD+ZfwV2nEW2JcJbDy4PHoUYxbQYNzeg@mail.gmail.com>
	<20140321122542.GA2686@netbook.cypherspace.org>
Message-ID: <CANEZrP2ohPfyZ_u9boS_3MEgE67-hW3GgpWc8xxdOeh9EKQP9g@mail.gmail.com>

Maybe so, but given the relatively minor advantages of ECC certs I can see
why a CA might not want to take any risks. They are sitting ducks for
patent trolls.

I think ECC will still happen, though we end up back into NSA fear
territory thanks to the stupid way secp256r1 was defined. *Hopefully* there's
no back door.


On Fri, Mar 21, 2014 at 1:25 PM, Adam Back <adam at cypherspace.org> wrote:

> According to Bernstein it's patent FUD (expired, ancient and solid prior
> art).
>
> http://lists.randombit.net/pipermail/cryptography/2013-August/005126.html
>
> Adam
>
>
> On Fri, Mar 21, 2014 at 12:33:57PM +0100, Mike Hearn wrote:
>
>>   Oh, one other reason I found - apparently RIM, at least in the past,
>>   has been telling CA's that they need to pay mad bux for the Certicom
>>   ECC patents. So that's another reason why most certs are still using
>>   RSA.
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140321/802d380b/attachment.html>

From alexykot at gmail.com  Fri Mar 21 13:54:25 2014
From: alexykot at gmail.com (Alex Kotenko)
Date: Fri, 21 Mar 2014 13:54:25 +0000
Subject: [Bitcoin-development] Payment Protocol for Face-to-face Payments
In-Reply-To: <lgh1q8$1dc$1@ger.gmane.org>
References: <lc5hmg$1jh$1@ger.gmane.org> <leuunm$tjk$1@ger.gmane.org>
	<CANEZrP3nQfvDArKTRgje0Cus4G2JD_zpxSjA3fXfxM2TNAP80Q@mail.gmail.com>
	<CALDj+BafD+6KTNcYDBEu5gNPzYozSkiC-JCxrY-PzXL2DYBRsw@mail.gmail.com>
	<lge7lv$3mf$1@ger.gmane.org>
	<CALDj+BZRsXnU5w=1B+01PDfMPY-7zqU3GP_52vr9wknEdTJ59Q@mail.gmail.com>
	<lgh1q8$1dc$1@ger.gmane.org>
Message-ID: <CALDj+Bb=CR1pL0Ze1M6k22wfQM1bL6-w+EyipJQWc1OHhAY0rg@mail.gmail.com>

2014-03-21 9:47 GMT+00:00 Andreas Schildbach <andreas at schildbach.de>:

> On 03/20/2014 05:14 PM, Alex Kotenko wrote:
>
> > Hmm, if we're inventing an URI for bluetooth, I'd rather follow existing
> > URI's patterns. BT is strictly point-to-point connection, so BT MAC
> > should be considered as server address, and payment request ID can be
> > considered as request path. Probably "bt:<bt-mac>/?
> > <random_id_of_payment_request>" would be more usual and easily
> > understandable.
>
> Agreed. I used the dash because I feared a slash would need to be
> escaped if used in an URL parameter.
>
?It will need to be ?escaped, but HTTP URLs used in BIP72 have it already,
so don't see why we should bother.



> > I wonder how complex it would be to implement HTTP-over-Bluetooth. Not
> > like I'm willing to do that now, but HTTP is well known and proven to be
> > quite good for tasks like this, so in theory it would be handy to have
> > such capacities in here.
>
> Thought of that as well. On the other hand, HTTP might be overkill and
> we inherit its potential downsides as well.
>
?It definitely is an overkill. Don't think we should do it now unless we
will see later during implementation that we really have to.



> >     Well, do we need to be compatible? If the dev community decides
> Base43
> >     PR QR's (or whatever other self-contained format) is the way to go,
> we
> >     just implement, roll it out and use it.
> >
> > My PoS needs to be compatible with BIP21, as when I'm presenting QR code
> > or sending NFC message - I have no way to tell what wallet/phone is ??on
> > the accepting side, so I have to be compatible to existing widely
> > supported technologies.
>
> Agreed. All I wanted to say support for QR is still small enough that we
> might be able to switch to an incompatible standard. If we're determined
> that is.

Ok. Btw, I've tested ?QR possibilities on my PoS screen, in binary mode
it's limited to about 600 chars, so really I can include only unsigned and
rather short payment request. Signed requests longer than few hundred bytes
will not work.



> > ?Well, yes, it would be less efficient than base43. But did you
> > calculate how much less? ?It's a compatible and already widely used way
> > and loosing compatibility needs to have serious reasons, so would be
> > great to know exact figures here.
>
> Base 64 via binary QR:   64 chars / 256 chars
>                          ==> 6 bit / 8 bit = 0.75
>
> Base 43 via alphanum QR: 43 chars / 45 chars
>                          ==> 5.43 bit / 5.49 bit = 0.99
>
> That would be efficiency in terms of PR data size vs. amount space used
> in a QR code. Of course, the visual QR encoding also plays a role, for
> example its size is increased in discrete steps.
>
Ok, so base43-aphanum is winning about a quarter of capacity against
base64-binary. I probably will skip this anyway and go with bluetooth URI
scheme we've just agreed + old style payments over p2p network as fallback.
So no payment requests in QR codes at all from my side.




>
>
>
>
> ------------------------------------------------------------------------------
> Learn Graph Databases - Download FREE O'Reilly Book
> "Graph Databases" is the definitive new guide to graph databases and their
> applications. Written by three acclaimed leaders in the field,
> this first edition is now available. Download your free book today!
> http://p.sf.net/sfu/13534_NeoTech
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140321/e73d4f4a/attachment.html>

From alexykot at gmail.com  Fri Mar 21 13:59:28 2014
From: alexykot at gmail.com (Alex Kotenko)
Date: Fri, 21 Mar 2014 13:59:28 +0000
Subject: [Bitcoin-development] Payment Protocol for Face-to-face Payments
In-Reply-To: <lgh47n$tnn$2@ger.gmane.org>
References: <lc5hmg$1jh$1@ger.gmane.org> <leuunm$tjk$1@ger.gmane.org>
	<CANEZrP3nQfvDArKTRgje0Cus4G2JD_zpxSjA3fXfxM2TNAP80Q@mail.gmail.com>
	<CALDj+BafD+6KTNcYDBEu5gNPzYozSkiC-JCxrY-PzXL2DYBRsw@mail.gmail.com>
	<CAJHLa0N4J_Z907+D0ENSNKfNAW2N=7Jf4JzSCO=SU558GtGTzA@mail.gmail.com>
	<lge7nk$3mf$2@ger.gmane.org>
	<CANEZrP0J849oDvMWjf8LWi0xj44Q8DaUwDip5_smVBMNgeQ3mw@mail.gmail.com>
	<20140320121221.GA25052@netbook.cypherspace.org>
	<CAJHLa0NeFdXzioQrmK6iKzr85pL3vvTAQH2_vKM3M+T+ZWYjgQ@mail.gmail.com>
	<lgh47n$tnn$2@ger.gmane.org>
Message-ID: <CALDj+BbX+ejz+diWDGFJUyOLR6+GnbDyiiNpmEbHybNBj=jL7A@mail.gmail.com>

2014-03-21 10:28 GMT+00:00 Andreas Schildbach <andreas at schildbach.de>:

> On 03/20/2014 06:31 PM, Jeff Garzik wrote:
>
> >> Afaik, BIP73 needs an external server (the web server).
> >
> > Yes.  Internet connectivity is not a rarity these days.  Near-field
> > web servers also work fine.
>
> Unfortunately it still is. At least here in Germany.

Yes, it is a problem. Even in the middle of London you often can get into
situation when cellphone network connectivity is not good enough for quick
and reliable payment. Basement pubs, old buildings with thick walls,
overcrowded places with overloaded radio environment. We should not rely on
mobile connectivity in things like making payments.



>


>
>
>
>
> ------------------------------------------------------------------------------
> Learn Graph Databases - Download FREE O'Reilly Book
> "Graph Databases" is the definitive new guide to graph databases and their
> applications. Written by three acclaimed leaders in the field,
> this first edition is now available. Download your free book today!
> http://p.sf.net/sfu/13534_NeoTech
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140321/6bbc9e09/attachment.html>

From andreas at schildbach.de  Fri Mar 21 14:51:42 2014
From: andreas at schildbach.de (Andreas Schildbach)
Date: Fri, 21 Mar 2014 15:51:42 +0100
Subject: [Bitcoin-development] Payment Protocol for Face-to-face Payments
In-Reply-To: <CALDj+Bb=CR1pL0Ze1M6k22wfQM1bL6-w+EyipJQWc1OHhAY0rg@mail.gmail.com>
References: <lc5hmg$1jh$1@ger.gmane.org>
	<leuunm$tjk$1@ger.gmane.org>	<CANEZrP3nQfvDArKTRgje0Cus4G2JD_zpxSjA3fXfxM2TNAP80Q@mail.gmail.com>	<CALDj+BafD+6KTNcYDBEu5gNPzYozSkiC-JCxrY-PzXL2DYBRsw@mail.gmail.com>	<lge7lv$3mf$1@ger.gmane.org>	<CALDj+BZRsXnU5w=1B+01PDfMPY-7zqU3GP_52vr9wknEdTJ59Q@mail.gmail.com>	<lgh1q8$1dc$1@ger.gmane.org>
	<CALDj+Bb=CR1pL0Ze1M6k22wfQM1bL6-w+EyipJQWc1OHhAY0rg@mail.gmail.com>
Message-ID: <lghjle$2er$1@ger.gmane.org>

>     > Hmm, if we're inventing an URI for bluetooth, I'd rather follow
>     existing
>     > URI's patterns. BT is strictly point-to-point connection, so BT MAC
>     > should be considered as server address, and payment request ID
can be
>     > considered as request path. Probably "bt:<bt-mac>/?
>     > <random_id_of_payment_request>" would be more usual and easily
>     > understandable.
>
>     Agreed. I used the dash because I feared a slash would need to be
>     escaped if used in an URL parameter.
>
> ?It will need to be ?escaped, but HTTP URLs used in BIP72 have it
> already, so don't see why we should bother.

Quoting from RFC 3986, Section 3.4. Query:  "The characters slash ("/")
and question mark ("?") may represent data within the query component."

> Ok. Btw, I've tested ?QR possibilities on my PoS screen, in binary mode
> it's limited to about 600 chars, so really I can include only unsigned
> and rather short payment request. Signed requests longer than few
> hundred bytes will not work.

Thanks for testing this. It would be interesting to know what device and
software you used for scanning. But anyway, it falls into the same
ballpark as my tests.

> I probably will skip this anyway and go with bluetooth
> URI scheme we've just agreed + old style payments over p2p network as
> fallback. So no payment requests in QR codes at all from my side.

So BIP72 with a BT URI in the 'r' parameter?




From andreas at schildbach.de  Fri Mar 21 15:20:40 2014
From: andreas at schildbach.de (Andreas Schildbach)
Date: Fri, 21 Mar 2014 16:20:40 +0100
Subject: [Bitcoin-development] Payment Protocol for Face-to-face Payments
In-Reply-To: <CALDj+Bb=CR1pL0Ze1M6k22wfQM1bL6-w+EyipJQWc1OHhAY0rg@mail.gmail.com>
References: <lc5hmg$1jh$1@ger.gmane.org>
	<leuunm$tjk$1@ger.gmane.org>	<CANEZrP3nQfvDArKTRgje0Cus4G2JD_zpxSjA3fXfxM2TNAP80Q@mail.gmail.com>	<CALDj+BafD+6KTNcYDBEu5gNPzYozSkiC-JCxrY-PzXL2DYBRsw@mail.gmail.com>	<lge7lv$3mf$1@ger.gmane.org>	<CALDj+BZRsXnU5w=1B+01PDfMPY-7zqU3GP_52vr9wknEdTJ59Q@mail.gmail.com>	<lgh1q8$1dc$1@ger.gmane.org>
	<CALDj+Bb=CR1pL0Ze1M6k22wfQM1bL6-w+EyipJQWc1OHhAY0rg@mail.gmail.com>
Message-ID: <lghlbp$pef$1@ger.gmane.org>

On 03/21/2014 02:54 PM, Alex Kotenko wrote:

>     > I wonder how complex it would be to implement HTTP-over-Bluetooth. Not
>     > like I'm willing to do that now, but HTTP is well known and proven
>     to be
>     > quite good for tasks like this, so in theory it would be handy to have
>     > such capacities in here.
> 
>     Thought of that as well. On the other hand, HTTP might be overkill and
>     we inherit its potential downsides as well.
> 
> ?It definitely is an overkill. Don't think we should do it now unless we
> will see later during implementation that we really have to.

Btw. we could also consider SPDY. I'm not sure about the advantages, but
its probably quicker and leaner.






From mike at plan99.net  Fri Mar 21 15:24:24 2014
From: mike at plan99.net (Mike Hearn)
Date: Fri, 21 Mar 2014 16:24:24 +0100
Subject: [Bitcoin-development] Payment Protocol for Face-to-face Payments
In-Reply-To: <lghlbp$pef$1@ger.gmane.org>
References: <lc5hmg$1jh$1@ger.gmane.org> <leuunm$tjk$1@ger.gmane.org>
	<CANEZrP3nQfvDArKTRgje0Cus4G2JD_zpxSjA3fXfxM2TNAP80Q@mail.gmail.com>
	<CALDj+BafD+6KTNcYDBEu5gNPzYozSkiC-JCxrY-PzXL2DYBRsw@mail.gmail.com>
	<lge7lv$3mf$1@ger.gmane.org>
	<CALDj+BZRsXnU5w=1B+01PDfMPY-7zqU3GP_52vr9wknEdTJ59Q@mail.gmail.com>
	<lgh1q8$1dc$1@ger.gmane.org>
	<CALDj+Bb=CR1pL0Ze1M6k22wfQM1bL6-w+EyipJQWc1OHhAY0rg@mail.gmail.com>
	<lghlbp$pef$1@ger.gmane.org>
Message-ID: <CANEZrP3t1t2+qgE6fPR3zQ=x5c=XU+mnJEazcT=HOWu91KnxUg@mail.gmail.com>

SPDY requires SSL and is even more complex than HTTP.

Really, the current protocol we've got (length prefixed protobufs) is just
fine except for the lack of encryption/authentication. For that you need to
do ECDH to establish a shared AES session key, and MAC each packet. Like I
said, it's not entirely trivial which is why it's worth trying SSL too, but
it's also not a massive effort.


On Fri, Mar 21, 2014 at 4:20 PM, Andreas Schildbach
<andreas at schildbach.de>wrote:

> On 03/21/2014 02:54 PM, Alex Kotenko wrote:
>
> >     > I wonder how complex it would be to implement HTTP-over-Bluetooth.
> Not
> >     > like I'm willing to do that now, but HTTP is well known and proven
> >     to be
> >     > quite good for tasks like this, so in theory it would be handy to
> have
> >     > such capacities in here.
> >
> >     Thought of that as well. On the other hand, HTTP might be overkill
> and
> >     we inherit its potential downsides as well.
> >
> > ?It definitely is an overkill. Don't think we should do it now unless we
> > will see later during implementation that we really have to.
>
> Btw. we could also consider SPDY. I'm not sure about the advantages, but
> its probably quicker and leaner.
>
>
>
>
>
> ------------------------------------------------------------------------------
> Learn Graph Databases - Download FREE O'Reilly Book
> "Graph Databases" is the definitive new guide to graph databases and their
> applications. Written by three acclaimed leaders in the field,
> this first edition is now available. Download your free book today!
> http://p.sf.net/sfu/13534_NeoTech
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140321/dc8080b3/attachment.html>

From alexykot at gmail.com  Fri Mar 21 15:38:17 2014
From: alexykot at gmail.com (Alex Kotenko)
Date: Fri, 21 Mar 2014 15:38:17 +0000
Subject: [Bitcoin-development] Payment Protocol for Face-to-face Payments
In-Reply-To: <lghjle$2er$1@ger.gmane.org>
References: <lc5hmg$1jh$1@ger.gmane.org> <leuunm$tjk$1@ger.gmane.org>
	<CANEZrP3nQfvDArKTRgje0Cus4G2JD_zpxSjA3fXfxM2TNAP80Q@mail.gmail.com>
	<CALDj+BafD+6KTNcYDBEu5gNPzYozSkiC-JCxrY-PzXL2DYBRsw@mail.gmail.com>
	<lge7lv$3mf$1@ger.gmane.org>
	<CALDj+BZRsXnU5w=1B+01PDfMPY-7zqU3GP_52vr9wknEdTJ59Q@mail.gmail.com>
	<lgh1q8$1dc$1@ger.gmane.org>
	<CALDj+Bb=CR1pL0Ze1M6k22wfQM1bL6-w+EyipJQWc1OHhAY0rg@mail.gmail.com>
	<lghjle$2er$1@ger.gmane.org>
Message-ID: <CALDj+Ba3WKdLYkmjHSgepmwXYv-QhB0K5d4HKSykY93XpnVPxQ@mail.gmail.com>

2014-03-21 14:51 GMT+00:00 Andreas Schildbach <andreas at schildbach.de>:
>
> Quoting from RFC 3986, Section 3.4. Query:  "The characters slash ("/")
> and question mark ("?") may represent data within the query component."
>
Ok.??


So BIP72 with a BT URI in the 'r' parameter?

Yes.??
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140321/7b851dbb/attachment.html>

From micaroni at walltime.info  Sat Mar 22 04:57:00 2014
From: micaroni at walltime.info (Felipe Micaroni Lalli)
Date: Sat, 22 Mar 2014 01:57:00 -0300
Subject: [Bitcoin-development] Transifex administration
Message-ID: <1299CD29-F039-4B76-AA2F-79F51214CF8E@walltime.info>

G'day great devs,

How can I gain status of maintainer, admin or / and reviewer in https://www.transifex.com/organization/bitcoin/dashboard ?

I'd like to set the description, project logo and whatever is missing on Bitcoin project inside Transifex. I believe if it is better configured it can attract more contributors. Of course my English is not perfect how you can see, but surely I'll copy the description from wiki, source code docs and other fonts written in native English. The logo I'll set the official one.

Also, I want to be able to make review in Portuguese BR. Unapologetically my Portuguese is perfect, I studied the grammar several years and I am native speaker. I've been contributing in Portuguese BR and yesterday I completed the 35% missing translations.

Thank you so much in advance,


Felipe Micaroni Lalli

Walltime - https://walltime.info
Bitcoin Paranoid Android developer
PGP ID: 0x4c0afccfed5cde14 - ED5CDE14
BTC: 1LipeR1AjHL6gwE7WQECW4a2H4tuqm768N

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 842 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140322/0caca22f/attachment.sig>

From pete at petertodd.org  Sat Mar 22 08:47:02 2014
From: pete at petertodd.org (Peter Todd)
Date: Sat, 22 Mar 2014 04:47:02 -0400
Subject: [Bitcoin-development] Handling miner adoption gracefully for
 embedded consensus systems via double-spending/replace-by-fee
Message-ID: <20140322084702.GA13436@savin>

There's been a lot of recent hoopla over proof-of-publication, with the
OP_RETURN <data> length getting reduced to a rather useless 40 bytes at
the last minute prior to the 0.9 release. Secondly I noticed a
overlooked security flaw in that OP_CHECKMULTISIG sigops weren't taken
into account, making it possible to broadcast unminable transactions and
bloat mempools.(1) My suggestion was to just ditch bare OP_CHECKMULTISIG
outputs given that the sigops limit and the way they use up a fixed 20
sigops per op makes them hard to do fee calculations for. They also make
it easy to bloat the UTXO set, potentially a bad thing. This would of
course require things using them to change. Currently that's just
Counterparty, so I gave them the heads up in my email.

To make a long story short, it was soon suggested that Bitcoin Core be
forked - the software, not the protocol - and miners encouraged to
support it. This isn't actually as trivial as it sounds, as you need to
add some anti-DoS stuff to deal with the fact that the hashing power
mining the transations you are relaying may be quite small. The second
issue is you need to add preferential peering, so the nodes in the
network with a broader idea of what is a "allowed" transaction can find
each other. (likely with a new service flag) It'd be a good time to
implement replace-by-fee, partly for its anti-DoS properties.

Which leaves us with a practical question: How do you gracefully handle
a switchover? First of all I suggest that proof-of-publication
applications adopt format flexibility, similar to how Mastercoin can
encode its data in pay-to-pubkeyhash, bare multisig, or op_return
outputs. Given the possibility of bare multisig going away, I'd suggest
that P2SH multisig scriptSig encoding be added as well. Note that a
really good implementation of all this is actually format agnostic, and
will let PUSHDATA's used for encoding data be specified arbitrarily. I
wrote up some code to do so awhile back as an experiment. It used the
LSB's of the nValue field in the txouts to specify what was and wasn't
data, along with some stenographic encryption of data and nValue. I'd be
happy to dig that up if anyone is interested.

All these methods have some overhead compared to just using OP_RETURN
and thus cost more. So I suggest you have your software simultaneously
double-spend the inputs to any proof-of-publication transaction with a
second transaction that just makes use of efficient OP_RETURN. That
second one can go to more enlightened miners. Only one or the other will
get mined of course and the cost to publish data will be proportional to
the relative % of hashing power in the two camps.

Finally I'll be writing something more detailed soon about why
proof-of-publication is essential and miners would be smart to support
it. But the tl;dr: of it is if you need proof-of-publication for what
your system does you're much more secure if you're embedded within
Bitcoin rather than alongside of it. There's a lot of very bad advise
getting thrown around lately for things like Mastercoin, Counterparty,
and for that matter, Colored Coins, to use a separate PoW blockchain or
a merge-mined one. The fact is if you go with pure PoW, you risk getting
attacked while your still growing, and if you go for merge-mined PoW,
the attacker can do so for free. We've got a real-world example of the
former with Twister, among many others, usually resulting in a switch to
a centralized checkpointing scheme. For the latter we have Coiledcoin,
an alt that made the mistake of using SHA256 merge-mining and got killed
off early at birth with a zero-cost 51% attack. There is of course a
censorship risk to going the embedded route, but at least we know that
for the forseeable future doing so will require explicit blacklists,
something most people here are against.

To MSC, XCP and others: Now I'm not going to say you shouldn't take
advice from people who call your finance 2.0 systems scams, or maybe if
they're nice, indistinguishable from a scam. But when you do, you should
think for yourself before just trusting that some authority figure has
your best interests in mind.


1) Yes, this was responsibly disclosed to the security mailing list. It
   was revealed to the public a few hours later on the -dev IRC channel
   without a fix.

-- 
'peter'[:-1]@petertodd.org
00000000000000009065ab15f4a036e9ec13d2e788e0ede69472e0ec396b097f
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 685 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140322/a6b454c7/attachment.sig>

From jtimon at monetize.io  Sat Mar 22 13:53:41 2014
From: jtimon at monetize.io (=?ISO-8859-1?Q?Jorge_Tim=F3n?=)
Date: Sat, 22 Mar 2014 14:53:41 +0100
Subject: [Bitcoin-development] Handling miner adoption gracefully for
 embedded consensus systems via double-spending/replace-by-fee
In-Reply-To: <20140322084702.GA13436@savin>
References: <20140322084702.GA13436@savin>
Message-ID: <CAC1+kJNh=7yhmAdFHFv9VBJOOMhen6nwr=U9peG2J_7EovPqxA@mail.gmail.com>

On 3/22/14, Peter Todd <pete at petertodd.org> wrote:
> There's been a lot of recent hoopla over proof-of-publication, with the
> OP_RETURN <data> length getting reduced to a rather useless 40 bytes at
> the last minute prior to the 0.9 release.


I'm not against about miners accepting transactions that have longer
data  in non-utxo polluting OP_RETURN than whatever is specified as
standard by the reference implementation, maybe it should be risen in
standard but I think it was assumed that the most common case would be
to include the root hash of some "merklized" structure.
My only argument against non-validated proof of publication is that in
the long run it will be very expensive since they will have to compete
with transactions that actually use the utxo, a feature that is more
valuable. But that's mostly speculation and doesn't imply the need for
any action against it. I would strongly opposed to against a
limitation on OP_RETURN at the protocol level (other than the block
size limit itself, that is) and wouldn't mind if they're removed from
isStandard. I didn't payed much attention to that and honestly I don't
care enough.
Maybe this encourages miners to adopt their own policies, which could
be good for things like replace-by-fee, the rational policy for
miners, which I strongly support (combined with game theory can
provide "instant" transactions as you pointed out in another thread).

Maybe the right approach to keep improving modularity and implement
different and configurable mining policies.

> All these methods have some overhead compared to just using OP_RETURN
> and thus cost more.

I thought the consensus was that op_return was the right way to put
non-validated data in the chain, but limiting it in standard policies
doesn't seem consistent with that.

> Finally I'll be writing something more detailed soon about why
> proof-of-publication is essential and miners would be smart to support
> it. But the tl;dr: of it is if you need proof-of-publication for what
> your system does you're much more secure if you're embedded within
> Bitcoin rather than alongside of it. There's a lot of very bad advise
> getting thrown around lately for things like Mastercoin, Counterparty,
> and for that matter, Colored Coins, to use a separate PoW blockchain or
> a merge-mined one. The fact is if you go with pure PoW, you risk getting
> attacked while your still growing, and if you go for merge-mined PoW,
> the attacker can do so for free. We've got a real-world example of the
> former with Twister, among many others, usually resulting in a switch to
> a centralized checkpointing scheme. For the latter we have Coiledcoin,
> an alt that made the mistake of using SHA256 merge-mining and got killed
> off early at birth with a zero-cost 51% attack. There is of course a
> censorship risk to going the embedded route, but at least we know that
> for the forseeable future doing so will require explicit blacklists,
> something most people here are against.

The "proof of publication vs separate chain" discussion is orthogonal
to the "merged mining vs independent chain" one.
If I remember correctly, last time you admitted after my example that
merged mining was comparatively better than a separate chain, that it
was economically harder to attack. I guess ecological arguments won't
help here, but you're confusing people developing independent chains
and thus pushing them to a less secure (apart from more wasteful
setup) system design.
Coiledcoin just proofs that merged mining may not be the best way to
bootstrap a currency, but you can also start separated and then switch
to merged mining once you have sufficient independent support.
As far as I can tell twister doesn't have a realistic reward mechanism
for miners so the incentives are broken before considering merged
mining.
Proof of work is irreversible and it's a good thing to share it.
Thanks Satoshi for proposing this great idea of merged mining and
thanks vinced for a first implementation with a data structure that
can be improved.

Peter Todd, I don't think you're being responsible or wise saying
nonsense like "merged mined chains can be attacked for free" and I
suggest that you prove your claims by attacking namecoin "for free",
please, enlighten us, how that's done?
It should be easier with the scamcoin ixcoin, with a much lower
subsidy to miners so I don't feel bad about the suggestion if your
"free attack" somehow works (certainly using some magic I don't know
about).

-- 
Jorge Tim?n

http://freico.in/



From hozer at hozed.org  Sat Mar 22 15:08:36 2014
From: hozer at hozed.org (Troy Benjegerdes)
Date: Sat, 22 Mar 2014 10:08:36 -0500
Subject: [Bitcoin-development] Handling miner adoption gracefully for
 embedded consensus systems via double-spending/replace-by-fee
In-Reply-To: <20140322084702.GA13436@savin>
References: <20140322084702.GA13436@savin>
Message-ID: <20140322150836.GG3180@nl.grid.coop>

On Sat, Mar 22, 2014 at 04:47:02AM -0400, Peter Todd wrote:
> There's been a lot of recent hoopla over proof-of-publication, with the
> OP_RETURN <data> length getting reduced to a rather useless 40 bytes at
> the last minute prior to the 0.9 release. Secondly I noticed a
> overlooked security flaw in that OP_CHECKMULTISIG sigops weren't taken
> into account, making it possible to broadcast unminable transactions and
> bloat mempools.(1) My suggestion was to just ditch bare OP_CHECKMULTISIG
> outputs given that the sigops limit and the way they use up a fixed 20
> sigops per op makes them hard to do fee calculations for. They also make
> it easy to bloat the UTXO set, potentially a bad thing. This would of
> course require things using them to change. Currently that's just
> Counterparty, so I gave them the heads up in my email.

I've spend some time looking at the Datacoin code, and I've come to the 
conclusion the next copycatcoin I release will have an explicit 'data' 
field with something like 169 bytes (a bakers dozen squared), which will 
add 1 byte to each transaction if unused, and provide a small, but usable
data field for proof of publication. As a new coin, I can also do a
hardfork that increases the data size limit much easier if there is a
compelling reason to make it bigger.

I think this will prove to be a much more reliable infrastructure for 
proof of publication than various hacks to overcome 40 byte limits with
Bitcoin.

I am disclosing this here so the bitcoin 1% has plenty of time to evaluate
the market risk they face from the 40 byte limit, and put some pressure to
implement some of the alternatives Todd proposes.

-- 
----------------------------------------------------------------------------
Troy Benjegerdes                 'da hozer'                  hozer at hozed.org
7 elements      earth::water::air::fire::mind::spirit::soul        grid.coop

      Never pick a fight with someone who buys ink by the barrel,
         nor try buy a hacker who makes money by the megahash




From jgarzik at bitpay.com  Sat Mar 22 16:35:43 2014
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Sat, 22 Mar 2014 12:35:43 -0400
Subject: [Bitcoin-development] Payment Protocol for Face-to-face Payments
In-Reply-To: <CALDj+BbX+ejz+diWDGFJUyOLR6+GnbDyiiNpmEbHybNBj=jL7A@mail.gmail.com>
References: <lc5hmg$1jh$1@ger.gmane.org> <leuunm$tjk$1@ger.gmane.org>
	<CANEZrP3nQfvDArKTRgje0Cus4G2JD_zpxSjA3fXfxM2TNAP80Q@mail.gmail.com>
	<CALDj+BafD+6KTNcYDBEu5gNPzYozSkiC-JCxrY-PzXL2DYBRsw@mail.gmail.com>
	<CAJHLa0N4J_Z907+D0ENSNKfNAW2N=7Jf4JzSCO=SU558GtGTzA@mail.gmail.com>
	<lge7nk$3mf$2@ger.gmane.org>
	<CANEZrP0J849oDvMWjf8LWi0xj44Q8DaUwDip5_smVBMNgeQ3mw@mail.gmail.com>
	<20140320121221.GA25052@netbook.cypherspace.org>
	<CAJHLa0NeFdXzioQrmK6iKzr85pL3vvTAQH2_vKM3M+T+ZWYjgQ@mail.gmail.com>
	<lgh47n$tnn$2@ger.gmane.org>
	<CALDj+BbX+ejz+diWDGFJUyOLR6+GnbDyiiNpmEbHybNBj=jL7A@mail.gmail.com>
Message-ID: <CAJHLa0OK1vRiqoHDNYrbO9fNTa8tcY9dMsJ5fC0qpsHS80zvbg@mail.gmail.com>

Let's not pull out silly examples.  Of course you can find locations
that lack Internet.

Those locations are completely unsuitable to bitcoin transactions,
since the receiver cannot verify double-spending or anything else
about the transaction.


On Fri, Mar 21, 2014 at 9:59 AM, Alex Kotenko <alexykot at gmail.com> wrote:
> 2014-03-21 10:28 GMT+00:00 Andreas Schildbach <andreas at schildbach.de>:
>>
>> On 03/20/2014 06:31 PM, Jeff Garzik wrote:
>>
>> >> Afaik, BIP73 needs an external server (the web server).
>> >
>> > Yes.  Internet connectivity is not a rarity these days.  Near-field
>> > web servers also work fine.
>>
>> Unfortunately it still is. At least here in Germany.
>
> Yes, it is a problem. Even in the middle of London you often can get into
> situation when cellphone network connectivity is not good enough for quick
> and reliable payment. Basement pubs, old buildings with thick walls,
> overcrowded places with overloaded radio environment. We should not rely on
> mobile connectivity in things like making payments.
>
>
>>
>>
>>
>>
>>
>>
>>
>>
>> ------------------------------------------------------------------------------
>> Learn Graph Databases - Download FREE O'Reilly Book
>> "Graph Databases" is the definitive new guide to graph databases and their
>> applications. Written by three acclaimed leaders in the field,
>> this first edition is now available. Download your free book today!
>> http://p.sf.net/sfu/13534_NeoTech
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
>
> ------------------------------------------------------------------------------
> Learn Graph Databases - Download FREE O'Reilly Book
> "Graph Databases" is the definitive new guide to graph databases and their
> applications. Written by three acclaimed leaders in the field,
> this first edition is now available. Download your free book today!
> http://p.sf.net/sfu/13534_NeoTech
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>



-- 
Jeff Garzik
Bitcoin core developer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From mike at plan99.net  Sat Mar 22 16:45:03 2014
From: mike at plan99.net (Mike Hearn)
Date: Sat, 22 Mar 2014 17:45:03 +0100
Subject: [Bitcoin-development] Payment Protocol for Face-to-face Payments
In-Reply-To: <CAJHLa0OK1vRiqoHDNYrbO9fNTa8tcY9dMsJ5fC0qpsHS80zvbg@mail.gmail.com>
References: <lc5hmg$1jh$1@ger.gmane.org> <leuunm$tjk$1@ger.gmane.org>
	<CANEZrP3nQfvDArKTRgje0Cus4G2JD_zpxSjA3fXfxM2TNAP80Q@mail.gmail.com>
	<CALDj+BafD+6KTNcYDBEu5gNPzYozSkiC-JCxrY-PzXL2DYBRsw@mail.gmail.com>
	<CAJHLa0N4J_Z907+D0ENSNKfNAW2N=7Jf4JzSCO=SU558GtGTzA@mail.gmail.com>
	<lge7nk$3mf$2@ger.gmane.org>
	<CANEZrP0J849oDvMWjf8LWi0xj44Q8DaUwDip5_smVBMNgeQ3mw@mail.gmail.com>
	<20140320121221.GA25052@netbook.cypherspace.org>
	<CAJHLa0NeFdXzioQrmK6iKzr85pL3vvTAQH2_vKM3M+T+ZWYjgQ@mail.gmail.com>
	<lgh47n$tnn$2@ger.gmane.org>
	<CALDj+BbX+ejz+diWDGFJUyOLR6+GnbDyiiNpmEbHybNBj=jL7A@mail.gmail.com>
	<CAJHLa0OK1vRiqoHDNYrbO9fNTa8tcY9dMsJ5fC0qpsHS80zvbg@mail.gmail.com>
Message-ID: <CANEZrP12=cR0uWf5F_hZDwjRxMyn-DXi2n=RrYeCzXe8-Fktfg@mail.gmail.com>

>
> Those locations are completely unsuitable to bitcoin transactions,
> since the receiver cannot verify double-spending or anything else
> about the transaction.


The usual issue is that they lack internet *for some customers*. The place
may well have private wifi or hardwired connections that work. Even mobile
networks may vary so some customers will have mobile connectivity and
others won't.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140322/817f967d/attachment.html>

From mike at plan99.net  Sat Mar 22 17:03:03 2014
From: mike at plan99.net (Mike Hearn)
Date: Sat, 22 Mar 2014 18:03:03 +0100
Subject: [Bitcoin-development] Fake PGP key for Gavin
Message-ID: <CANEZrP0NeDetSLXjtWnCaYYjYcdhsa=ne=a6NJOnvEp8yr7YaA@mail.gmail.com>

In case you didn't see this yet,

http://gavintech.blogspot.ch/2014/03/it-aint-me-ive-got-pgp-imposter.html

If you're using PGP to verify Bitcoin downloads, it's very important that
you check you are using the right key. Someone seems to be creating fake
PGP keys that are used to sign popular pieces of crypto software, probably
to make a MITM attack (e.g. from an intelligence agency) seem more
legitimate.

I think the Mac DMG's of Core are signed for Gatekeeper, but do we codesign
the Windows binaries? If not it'd be a good idea, if only because AV
scanners learn key reputations to reduce false positives. Of course this is
not a panacea, and Linux unfortunately does not support X.509 code signing,
but having extra signing can't really hurt.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140322/c95184e6/attachment.html>

From mark at monetize.io  Sat Mar 22 17:04:30 2014
From: mark at monetize.io (Mark Friedenbach)
Date: Sat, 22 Mar 2014 10:04:30 -0700
Subject: [Bitcoin-development] Handling miner adoption gracefully for
 embedded consensus systems via double-spending/replace-by-fee
In-Reply-To: <20140322150836.GG3180@nl.grid.coop>
References: <20140322084702.GA13436@savin> <20140322150836.GG3180@nl.grid.coop>
Message-ID: <532DC29E.4080304@monetize.io>

Please, by all means: ignore our well-reasoned arguments about
externalized storage and validation cost and alternative solutions.
Please re-discover how proof of publication doesn't require burdening
the network with silly extra data that must be transmitted, kept, and
validated from now until the heat death of the universe. Your failure
will make my meager bitcoin holdings all the more valuable! As despite
persistent assertions to the contrary, making quality software freely
available at zero cost does not pay well, even in finance. You will not
find core developers in the Bitcoin 1%.

Please feel free to flame me back, but off-list. This is for *bitcoin*
development.

On 03/22/2014 08:08 AM, Troy Benjegerdes wrote:
> On Sat, Mar 22, 2014 at 04:47:02AM -0400, Peter Todd wrote:
>> There's been a lot of recent hoopla over proof-of-publication, with the
>> OP_RETURN <data> length getting reduced to a rather useless 40 bytes at
>> the last minute prior to the 0.9 release. Secondly I noticed a
>> overlooked security flaw in that OP_CHECKMULTISIG sigops weren't taken
>> into account, making it possible to broadcast unminable transactions and
>> bloat mempools.(1) My suggestion was to just ditch bare OP_CHECKMULTISIG
>> outputs given that the sigops limit and the way they use up a fixed 20
>> sigops per op makes them hard to do fee calculations for. They also make
>> it easy to bloat the UTXO set, potentially a bad thing. This would of
>> course require things using them to change. Currently that's just
>> Counterparty, so I gave them the heads up in my email.
> 
> I've spend some time looking at the Datacoin code, and I've come to the 
> conclusion the next copycatcoin I release will have an explicit 'data' 
> field with something like 169 bytes (a bakers dozen squared), which will 
> add 1 byte to each transaction if unused, and provide a small, but usable
> data field for proof of publication. As a new coin, I can also do a
> hardfork that increases the data size limit much easier if there is a
> compelling reason to make it bigger.
> 
> I think this will prove to be a much more reliable infrastructure for 
> proof of publication than various hacks to overcome 40 byte limits with
> Bitcoin.
> 
> I am disclosing this here so the bitcoin 1% has plenty of time to evaluate
> the market risk they face from the 40 byte limit, and put some pressure to
> implement some of the alternatives Todd proposes.
> 



From mark at monetize.io  Sat Mar 22 16:55:18 2014
From: mark at monetize.io (Mark Friedenbach)
Date: Sat, 22 Mar 2014 09:55:18 -0700
Subject: [Bitcoin-development] Payment Protocol for Face-to-face Payments
In-Reply-To: <CAJHLa0OK1vRiqoHDNYrbO9fNTa8tcY9dMsJ5fC0qpsHS80zvbg@mail.gmail.com>
References: <lc5hmg$1jh$1@ger.gmane.org>
	<leuunm$tjk$1@ger.gmane.org>	<CANEZrP3nQfvDArKTRgje0Cus4G2JD_zpxSjA3fXfxM2TNAP80Q@mail.gmail.com>	<CALDj+BafD+6KTNcYDBEu5gNPzYozSkiC-JCxrY-PzXL2DYBRsw@mail.gmail.com>	<CAJHLa0N4J_Z907+D0ENSNKfNAW2N=7Jf4JzSCO=SU558GtGTzA@mail.gmail.com>	<lge7nk$3mf$2@ger.gmane.org>	<CANEZrP0J849oDvMWjf8LWi0xj44Q8DaUwDip5_smVBMNgeQ3mw@mail.gmail.com>	<20140320121221.GA25052@netbook.cypherspace.org>	<CAJHLa0NeFdXzioQrmK6iKzr85pL3vvTAQH2_vKM3M+T+ZWYjgQ@mail.gmail.com>	<lgh47n$tnn$2@ger.gmane.org>	<CALDj+BbX+ejz+diWDGFJUyOLR6+GnbDyiiNpmEbHybNBj=jL7A@mail.gmail.com>
	<CAJHLa0OK1vRiqoHDNYrbO9fNTa8tcY9dMsJ5fC0qpsHS80zvbg@mail.gmail.com>
Message-ID: <532DC076.4060007@monetize.io>

Jeff, there are *plenty* of places that lack local Internet access for
one or both participants.

Obviously making the case where both participants lack access to the
bitcoin network is difficult to secure, but not impossible (e.g. use a
telephany-based system to connect to a centralized double-spend
database, as VISA does).

I expect the case where one participant has Internet access (the
merchant) and the other does not to be very, very common. The majority
of transactions I do on a daily basis are like this, and I live in
Silicon Valley!

On 03/22/2014 09:35 AM, Jeff Garzik wrote:
> Let's not pull out silly examples.  Of course you can find locations
> that lack Internet.
> 
> Those locations are completely unsuitable to bitcoin transactions,
> since the receiver cannot verify double-spending or anything else
> about the transaction.



From jgarzik at bitpay.com  Sat Mar 22 17:24:43 2014
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Sat, 22 Mar 2014 13:24:43 -0400
Subject: [Bitcoin-development] Payment Protocol for Face-to-face Payments
In-Reply-To: <532DC076.4060007@monetize.io>
References: <lc5hmg$1jh$1@ger.gmane.org> <leuunm$tjk$1@ger.gmane.org>
	<CANEZrP3nQfvDArKTRgje0Cus4G2JD_zpxSjA3fXfxM2TNAP80Q@mail.gmail.com>
	<CALDj+BafD+6KTNcYDBEu5gNPzYozSkiC-JCxrY-PzXL2DYBRsw@mail.gmail.com>
	<CAJHLa0N4J_Z907+D0ENSNKfNAW2N=7Jf4JzSCO=SU558GtGTzA@mail.gmail.com>
	<lge7nk$3mf$2@ger.gmane.org>
	<CANEZrP0J849oDvMWjf8LWi0xj44Q8DaUwDip5_smVBMNgeQ3mw@mail.gmail.com>
	<20140320121221.GA25052@netbook.cypherspace.org>
	<CAJHLa0NeFdXzioQrmK6iKzr85pL3vvTAQH2_vKM3M+T+ZWYjgQ@mail.gmail.com>
	<lgh47n$tnn$2@ger.gmane.org>
	<CALDj+BbX+ejz+diWDGFJUyOLR6+GnbDyiiNpmEbHybNBj=jL7A@mail.gmail.com>
	<CAJHLa0OK1vRiqoHDNYrbO9fNTa8tcY9dMsJ5fC0qpsHS80zvbg@mail.gmail.com>
	<532DC076.4060007@monetize.io>
Message-ID: <CAJHLa0NtpFnvWLNa=poOKho-wH7gXevNj=WfAaoWFxDMCSCZrw@mail.gmail.com>

One participant, yes.  Two participants lacking net would require a
serious revisit of BIP 70's security assumptions and some design, at a
minimum.

On Sat, Mar 22, 2014 at 12:55 PM, Mark Friedenbach <mark at monetize.io> wrote:
> Jeff, there are *plenty* of places that lack local Internet access for
> one or both participants.
>
> Obviously making the case where both participants lack access to the
> bitcoin network is difficult to secure, but not impossible (e.g. use a
> telephany-based system to connect to a centralized double-spend
> database, as VISA does).
>
> I expect the case where one participant has Internet access (the
> merchant) and the other does not to be very, very common. The majority
> of transactions I do on a daily basis are like this, and I live in
> Silicon Valley!
>
> On 03/22/2014 09:35 AM, Jeff Garzik wrote:
>> Let's not pull out silly examples.  Of course you can find locations
>> that lack Internet.
>>
>> Those locations are completely unsuitable to bitcoin transactions,
>> since the receiver cannot verify double-spending or anything else
>> about the transaction.
>
> ------------------------------------------------------------------------------
> Learn Graph Databases - Download FREE O'Reilly Book
> "Graph Databases" is the definitive new guide to graph databases and their
> applications. Written by three acclaimed leaders in the field,
> this first edition is now available. Download your free book today!
> http://p.sf.net/sfu/13534_NeoTech
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development



-- 
Jeff Garzik
Bitcoin core developer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From mike at plan99.net  Sat Mar 22 17:30:03 2014
From: mike at plan99.net (Mike Hearn)
Date: Sat, 22 Mar 2014 18:30:03 +0100
Subject: [Bitcoin-development] Payment Protocol for Face-to-face Payments
In-Reply-To: <CAJHLa0NtpFnvWLNa=poOKho-wH7gXevNj=WfAaoWFxDMCSCZrw@mail.gmail.com>
References: <lc5hmg$1jh$1@ger.gmane.org> <leuunm$tjk$1@ger.gmane.org>
	<CANEZrP3nQfvDArKTRgje0Cus4G2JD_zpxSjA3fXfxM2TNAP80Q@mail.gmail.com>
	<CALDj+BafD+6KTNcYDBEu5gNPzYozSkiC-JCxrY-PzXL2DYBRsw@mail.gmail.com>
	<CAJHLa0N4J_Z907+D0ENSNKfNAW2N=7Jf4JzSCO=SU558GtGTzA@mail.gmail.com>
	<lge7nk$3mf$2@ger.gmane.org>
	<CANEZrP0J849oDvMWjf8LWi0xj44Q8DaUwDip5_smVBMNgeQ3mw@mail.gmail.com>
	<20140320121221.GA25052@netbook.cypherspace.org>
	<CAJHLa0NeFdXzioQrmK6iKzr85pL3vvTAQH2_vKM3M+T+ZWYjgQ@mail.gmail.com>
	<lgh47n$tnn$2@ger.gmane.org>
	<CALDj+BbX+ejz+diWDGFJUyOLR6+GnbDyiiNpmEbHybNBj=jL7A@mail.gmail.com>
	<CAJHLa0OK1vRiqoHDNYrbO9fNTa8tcY9dMsJ5fC0qpsHS80zvbg@mail.gmail.com>
	<532DC076.4060007@monetize.io>
	<CAJHLa0NtpFnvWLNa=poOKho-wH7gXevNj=WfAaoWFxDMCSCZrw@mail.gmail.com>
Message-ID: <CANEZrP1=i6eYaJq3JWbQhofrkLExt9ZKEy-Vuq6q48n+UWKWjw@mail.gmail.com>

I think it's mostly a UI issue. The recipient needs to understand that what
he received is nothing more than an IOU that can be revoked at any time. If
the UI makes it clear and the user trusts the sender, no problem. BIP70
would work as before.


On Sat, Mar 22, 2014 at 6:24 PM, Jeff Garzik <jgarzik at bitpay.com> wrote:

> One participant, yes.  Two participants lacking net would require a
> serious revisit of BIP 70's security assumptions and some design, at a
> minimum.
>
> On Sat, Mar 22, 2014 at 12:55 PM, Mark Friedenbach <mark at monetize.io>
> wrote:
> > Jeff, there are *plenty* of places that lack local Internet access for
> > one or both participants.
> >
> > Obviously making the case where both participants lack access to the
> > bitcoin network is difficult to secure, but not impossible (e.g. use a
> > telephany-based system to connect to a centralized double-spend
> > database, as VISA does).
> >
> > I expect the case where one participant has Internet access (the
> > merchant) and the other does not to be very, very common. The majority
> > of transactions I do on a daily basis are like this, and I live in
> > Silicon Valley!
> >
> > On 03/22/2014 09:35 AM, Jeff Garzik wrote:
> >> Let's not pull out silly examples.  Of course you can find locations
> >> that lack Internet.
> >>
> >> Those locations are completely unsuitable to bitcoin transactions,
> >> since the receiver cannot verify double-spending or anything else
> >> about the transaction.
> >
> >
> ------------------------------------------------------------------------------
> > Learn Graph Databases - Download FREE O'Reilly Book
> > "Graph Databases" is the definitive new guide to graph databases and
> their
> > applications. Written by three acclaimed leaders in the field,
> > this first edition is now available. Download your free book today!
> > http://p.sf.net/sfu/13534_NeoTech
> > _______________________________________________
> > Bitcoin-development mailing list
> > Bitcoin-development at lists.sourceforge.net
> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
>
> --
> Jeff Garzik
> Bitcoin core developer and open source evangelist
> BitPay, Inc.      https://bitpay.com/
>
>
> ------------------------------------------------------------------------------
> Learn Graph Databases - Download FREE O'Reilly Book
> "Graph Databases" is the definitive new guide to graph databases and their
> applications. Written by three acclaimed leaders in the field,
> this first edition is now available. Download your free book today!
> http://p.sf.net/sfu/13534_NeoTech
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140322/dd188d63/attachment.html>

From gavinandresen at gmail.com  Sat Mar 22 17:33:02 2014
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Sat, 22 Mar 2014 13:33:02 -0400
Subject: [Bitcoin-development] Fake PGP key for Gavin
In-Reply-To: <CANEZrP0NeDetSLXjtWnCaYYjYcdhsa=ne=a6NJOnvEp8yr7YaA@mail.gmail.com>
References: <CANEZrP0NeDetSLXjtWnCaYYjYcdhsa=ne=a6NJOnvEp8yr7YaA@mail.gmail.com>
Message-ID: <CABsx9T0en45JX1dJqvHTfydYKo2r5m7CsV2ycp+xaiuw4GB8zg@mail.gmail.com>

On Sat, Mar 22, 2014 at 1:03 PM, Mike Hearn <mike at plan99.net> wrote:

> do we codesign the Windows binaries?


Yes, the -setup.exe installers are Authenticode (or whatever Microsoft is
calling that these days) code-signed.

-- 
--
Gavin Andresen
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140322/c5ac3e26/attachment.html>

From pete at petertodd.org  Sat Mar 22 18:21:53 2014
From: pete at petertodd.org (Peter Todd)
Date: Sat, 22 Mar 2014 14:21:53 -0400
Subject: [Bitcoin-development] Fake PGP key for Gavin
In-Reply-To: <CANEZrP0NeDetSLXjtWnCaYYjYcdhsa=ne=a6NJOnvEp8yr7YaA@mail.gmail.com>
References: <CANEZrP0NeDetSLXjtWnCaYYjYcdhsa=ne=a6NJOnvEp8yr7YaA@mail.gmail.com>
Message-ID: <20140322182153.GC21728@savin>

On Sat, Mar 22, 2014 at 06:03:03PM +0100, Mike Hearn wrote:
> In case you didn't see this yet,
> 
> http://gavintech.blogspot.ch/2014/03/it-aint-me-ive-got-pgp-imposter.html
> 
> If you're using PGP to verify Bitcoin downloads, it's very important that
> you check you are using the right key. Someone seems to be creating fake
> PGP keys that are used to sign popular pieces of crypto software, probably
> to make a MITM attack (e.g. from an intelligence agency) seem more
> legitimate.

Note that Bitcoin source and binary downloads are protected by both the
PGP WoT and the certificate authority PKI system. The binaries are
hosted on bitcoin.org, which is https and protected by a the PKI system,
and the source code is hosted on github, again, https protected. A MITM
attack would need to compromise the PKI system as well, at least
provided users aren't fooled into downloading over http.

-- 
'peter'[:-1]@petertodd.org
0000000000000000657de91df7a64d25adfd3ff117bc30d00f5aa3065894f4a5
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 685 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140322/ac41c6e2/attachment.sig>

From pete at petertodd.org  Sat Mar 22 19:08:25 2014
From: pete at petertodd.org (Peter Todd)
Date: Sat, 22 Mar 2014 15:08:25 -0400
Subject: [Bitcoin-development] Handling miner adoption gracefully for
 embedded consensus systems via double-spending/replace-by-fee
In-Reply-To: <20140322150836.GG3180@nl.grid.coop>
References: <20140322084702.GA13436@savin> <20140322150836.GG3180@nl.grid.coop>
Message-ID: <20140322190825.GB6047@savin>

On Sat, Mar 22, 2014 at 10:08:36AM -0500, Troy Benjegerdes wrote:
> On Sat, Mar 22, 2014 at 04:47:02AM -0400, Peter Todd wrote:
> > There's been a lot of recent hoopla over proof-of-publication, with the
> > OP_RETURN <data> length getting reduced to a rather useless 40 bytes at
> > the last minute prior to the 0.9 release. Secondly I noticed a
> > overlooked security flaw in that OP_CHECKMULTISIG sigops weren't taken
> > into account, making it possible to broadcast unminable transactions and
> > bloat mempools.(1) My suggestion was to just ditch bare OP_CHECKMULTISIG
> > outputs given that the sigops limit and the way they use up a fixed 20
> > sigops per op makes them hard to do fee calculations for. They also make
> > it easy to bloat the UTXO set, potentially a bad thing. This would of
> > course require things using them to change. Currently that's just
> > Counterparty, so I gave them the heads up in my email.
> 
> I've spend some time looking at the Datacoin code, and I've come to the 
> conclusion the next copycatcoin I release will have an explicit 'data' 
> field with something like 169 bytes (a bakers dozen squared), which will 
> add 1 byte to each transaction if unused, and provide a small, but usable
> data field for proof of publication. As a new coin, I can also do a
> hardfork that increases the data size limit much easier if there is a
> compelling reason to make it bigger.
> 
> I think this will prove to be a much more reliable infrastructure for 
> proof of publication than various hacks to overcome 40 byte limits with
> Bitcoin.
> 
> I am disclosing this here so the bitcoin 1% has plenty of time to evaluate
> the market risk they face from the 40 byte limit, and put some pressure to
> implement some of the alternatives Todd proposes.

Lol! Granted, I guess I should "disclose" that I'm working on tree
chains, which just improve the scalability of blockchains directly. I'm
think tree-chains could be implemented as a soft-fork; if applied to
Bitcoin the datacoin 1% might face market risk.  :P

-- 
'peter'[:-1]@petertodd.org
0000000000000000bbcc531d48bea8d67597e275b5abcff18e18f46266723e91
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 685 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140322/fad79c8c/attachment.sig>

From pete at petertodd.org  Sat Mar 22 19:34:35 2014
From: pete at petertodd.org (Peter Todd)
Date: Sat, 22 Mar 2014 15:34:35 -0400
Subject: [Bitcoin-development] Handling miner adoption gracefully for
 embedded consensus systems via double-spending/replace-by-fee
In-Reply-To: <CAC1+kJNh=7yhmAdFHFv9VBJOOMhen6nwr=U9peG2J_7EovPqxA@mail.gmail.com>
References: <20140322084702.GA13436@savin>
	<CAC1+kJNh=7yhmAdFHFv9VBJOOMhen6nwr=U9peG2J_7EovPqxA@mail.gmail.com>
Message-ID: <20140322193435.GC6047@savin>

On Sat, Mar 22, 2014 at 02:53:41PM +0100, Jorge Tim?n wrote:
> On 3/22/14, Peter Todd <pete at petertodd.org> wrote:
> > There's been a lot of recent hoopla over proof-of-publication, with the
> > OP_RETURN <data> length getting reduced to a rather useless 40 bytes at
> > the last minute prior to the 0.9 release.
> 
> 
> I'm not against about miners accepting transactions that have longer
> data  in non-utxo polluting OP_RETURN than whatever is specified as
> standard by the reference implementation, maybe it should be risen in
> standard but I think it was assumed that the most common case would be
> to include the root hash of some "merklized" structure.
> My only argument against non-validated proof of publication is that in
> the long run it will be very expensive since they will have to compete
> with transactions that actually use the utxo, a feature that is more
> valuable. But that's mostly speculation and doesn't imply the need for

Well remember that my thinking re: UTXO is that we need to move to a
system like TXO commitments where storing the entirety of the UTXO set
for all eternity is *not* required. Of course, that doesn't necessarily
mean you can't have the advantages of UTXO commitments, but they need to
be limited in some reasonable way so that long-term storage requirements
do not grow without bound unreasonably. For example, having TXO
commitments with a bounded size committed UTXO set seems reasonable; old
UTXO's can be dropped from the bounded sized set, but can still be spent
via the underlying TXO commitment mechanism.

> any action against it. I would strongly opposed to against a
> limitation on OP_RETURN at the protocol level (other than the block
> size limit itself, that is) and wouldn't mind if they're removed from
> isStandard. I didn't payed much attention to that and honestly I don't
> care enough.
>
> Maybe this encourages miners to adopt their own policies, which could
> be good for things like replace-by-fee, the rational policy for
> miners, which I strongly support (combined with game theory can
> provide "instant" transactions as you pointed out in another thread).
> 
> Maybe the right approach to keep improving modularity and implement
> different and configurable mining policies.

Like I said the real issue is making it easy to get those !IsStandard()
transactions to the miners who are interested in them. The service bit
flag I proposed + preferential peering - reserve, say, 50% of your
peering slots for nodes advertising non-std tx relaying - is simple
enough, but it is vulnerable to sybil attacks if done naively.

> > All these methods have some overhead compared to just using OP_RETURN
> > and thus cost more.
> 
> I thought the consensus was that op_return was the right way to put
> non-validated data in the chain, but limiting it in standard policies
> doesn't seem consistent with that.

Right, but there's also a lot of the community who thinks
proof-of-publication applications are bad and should be discouraged. I
argued before that the way OP_RETURN was being deployed didn't actually
give any reason to use it vs. other data encoding methods.

Unfortunately underlying all this is a real ignorance about how Bitcoin
actually works and what proof-of-publication actually is:

    14-03-20.log:12:47 < gavinandresen> jgarzik: RE: mastercoin/OP_RETURN:
    what's the current thinking on Best Way To Do It?  Seems if I was to do
    it I'd just embed 20-byte RIPEMD160 hashes in OP_RETURN, and fetch the
    real data from a DHT or website (or any-of-several websites).
    Blockchain as reference ledger, not as data storage.

> Peter Todd, I don't think you're being responsible or wise saying
> nonsense like "merged mined chains can be attacked for free" and I
> suggest that you prove your claims by attacking namecoin "for free",
> please, enlighten us, how that's done?

I think we're just going to have to agree to disagree on our
interpretations of the economics with regard to attacking merge-mined
chains. Myself, I'm very, very wary of systems that have poor security
against economically irrational attackers regardless of how good the
security is, in theory, against economically rational ones.

Again, what it comes down to in the end is that when I'm advising
Mastercoin, Counterparty, Colored Coins, etc. on how they should design
their systems I know that if they do proof-of-publication on the Bitcoin
blockchain, it may cost a bit more money than possible alternatives per
transaction, but the security is very well understood and robust. Fact
is, these applications can certainly afford to pay the higher
transaction fees - they're far from the least economically valuable use
of Blockchain space. Meanwhile the alternatives have, at best, much more
dubious security properties and at worse no security at all.
(announce/commit sacrifices is a great example of this, and very easy to
understand)

-- 
'peter'[:-1]@petertodd.org
0000000000000000bbcc531d48bea8d67597e275b5abcff18e18f46266723e91
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 685 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140322/bd3215c5/attachment.sig>

From jtimon at monetize.io  Sat Mar 22 20:12:20 2014
From: jtimon at monetize.io (=?ISO-8859-1?Q?Jorge_Tim=F3n?=)
Date: Sat, 22 Mar 2014 21:12:20 +0100
Subject: [Bitcoin-development] Handling miner adoption gracefully for
 embedded consensus systems via double-spending/replace-by-fee
In-Reply-To: <20140322193435.GC6047@savin>
References: <20140322084702.GA13436@savin>
	<CAC1+kJNh=7yhmAdFHFv9VBJOOMhen6nwr=U9peG2J_7EovPqxA@mail.gmail.com>
	<20140322193435.GC6047@savin>
Message-ID: <CAC1+kJNOuCpUPDiaBNR40T12W3MwUXpXp+PCTLhHyQwyc+8BqA@mail.gmail.com>

On 3/22/14, Peter Todd <pete at petertodd.org> wrote:
> Well remember that my thinking re: UTXO is that we need to move to a
> system like TXO commitments where storing the entirety of the UTXO set
> for all eternity is *not* required. Of course, that doesn't necessarily
> mean you can't have the advantages of UTXO commitments, but they need to
> be limited in some reasonable way so that long-term storage requirements
> do not grow without bound unreasonably. For example, having TXO
> commitments with a bounded size committed UTXO set seems reasonable; old
> UTXO's can be dropped from the bounded sized set, but can still be spent
> via the underlying TXO commitment mechanism.

Although not having to download the whole blockchain to operate a
trust-less full node is theoretically possible it is not clear that
they will work in practice or would be accepted, and we certainly
don't have that now.
So I don't think future potential theoretical scalability improvements
are solid arguments in favor of supporting proof of publication now.

> Like I said the real issue is making it easy to get those !IsStandard()
> transactions to the miners who are interested in them. The service bit
> flag I proposed + preferential peering - reserve, say, 50% of your
> peering slots for nodes advertising non-std tx relaying - is simple
> enough, but it is vulnerable to sybil attacks if done naively.

My point is that this seems relevant to competing mining policies in general.

> Right, but there's also a lot of the community who thinks
> proof-of-publication applications are bad and should be discouraged. I
> argued before that the way OP_RETURN was being deployed didn't actually
> give any reason to use it vs. other data encoding methods.
>
> Unfortunately underlying all this is a real ignorance about how Bitcoin
> actually works and what proof-of-publication actually is:

I understand that proof of publication is not the same thing as
regular timestamping, but requiring permanent storage in the
blockchain is not the only way you can implement proof of publication.
Mark Friedenbach proposes this:

Store hashes, or a hash root, and soft-fork that blocks are only
accepted if (a) the data tree is provided, or (b) sufficient work is
built on it and/or sufficient time has passed

This way full nodes can ignore the published data until is sufficiently buried.

> I think we're just going to have to agree to disagree on our
> interpretations of the economics with regard to attacking merge-mined
> chains. Myself, I'm very, very wary of systems that have poor security
> against economically irrational attackers regardless of how good the
> security is, in theory, against economically rational ones.

The attacker was of course economically irrational in my previous
example for which you didn't have any complain. So I think we can
agree that a merged mined separated chain is more secure than a
non-merged mined separated chain and that attacking a merged mined
chain is not free.
By not being clear on this you're indirectly promoting non-merged
mined altchains as a better option than merged mined altchains, which
is what I don't think is responsible on your part.

> Again, what it comes down to in the end is that when I'm advising
> Mastercoin, Counterparty, Colored Coins, etc. on how they should design
> their systems I know that if they do proof-of-publication on the Bitcoin
> blockchain, it may cost a bit more money than possible alternatives per
> transaction, but the security is very well understood and robust. Fact
> is, these applications can certainly afford to pay the higher
> transaction fees - they're far from the least economically valuable use
> of Blockchain space. Meanwhile the alternatives have, at best, much more
> dubious security properties and at worse no security at all.
> (announce/commit sacrifices is a great example of this, and very easy to
> understand)

I agree that we disagree on additional non-validated data in the main
chain vs merged mined chains as the best way to implement additional
features.
But please, you don't need to spread and maintain existing myths about
merged mining to make your case. If you insist on doing it I will
start to think that the honesty of your arguments is not something
important to you, and you just prefer to try to get people on your
side by any means, which would be very disappointing.



From bitcoin at olivere.de  Sun Mar 23 00:59:50 2014
From: bitcoin at olivere.de (Oliver Egginger)
Date: Sun, 23 Mar 2014 01:59:50 +0100
Subject: [Bitcoin-development] Fake PGP key for Gavin
In-Reply-To: <CANEZrP0NeDetSLXjtWnCaYYjYcdhsa=ne=a6NJOnvEp8yr7YaA@mail.gmail.com>
References: <CANEZrP0NeDetSLXjtWnCaYYjYcdhsa=ne=a6NJOnvEp8yr7YaA@mail.gmail.com>
Message-ID: <532E3206.3090005@olivere.de>

Am 22.03.2014 18:03, schrieb Mike Hearn:
> In case you didn't see this yet,
> 
> http://gavintech.blogspot.ch/2014/03/it-aint-me-ive-got-pgp-imposter.html
> 
> If you're using PGP to verify Bitcoin downloads, it's very important
> that you check you are using the right key. Someone seems to be creating
> fake PGP keys that are used to sign popular pieces of crypto software,
> probably to make a MITM attack (e.g. from an intelligence agency) seem
> more legitimate.

>From the user's perspective: In the beginning I found it difficult to
find the keys. At last I have made this side for documentation:

https://www.olivere.de/blog/archives/2013/06/02/install_bitcoin_client/

Okay, is outdated meanwhile ...

Normally people fetch the keys by key-id from a well known key server.
Not because they are paranoid, but because it is the most convenient
method under Linux.

A Google search for Gavin+Andresen+gpg brings me herein:

http://sourceforge.net/p/bitcoin/mailman/message/30551147/

Key-Id?

Nevertheless, I'm glad that you guys signed anything. That makes me
sleep better. I really check this.

- oliver

GPG: https://olivere.de/gpg



From alexykot at gmail.com  Sun Mar 23 03:47:35 2014
From: alexykot at gmail.com (Alex Kotenko)
Date: Sun, 23 Mar 2014 03:47:35 +0000
Subject: [Bitcoin-development] Payment Protocol for Face-to-face Payments
In-Reply-To: <CANEZrP1=i6eYaJq3JWbQhofrkLExt9ZKEy-Vuq6q48n+UWKWjw@mail.gmail.com>
References: <lc5hmg$1jh$1@ger.gmane.org> <leuunm$tjk$1@ger.gmane.org>
	<CANEZrP3nQfvDArKTRgje0Cus4G2JD_zpxSjA3fXfxM2TNAP80Q@mail.gmail.com>
	<CALDj+BafD+6KTNcYDBEu5gNPzYozSkiC-JCxrY-PzXL2DYBRsw@mail.gmail.com>
	<CAJHLa0N4J_Z907+D0ENSNKfNAW2N=7Jf4JzSCO=SU558GtGTzA@mail.gmail.com>
	<lge7nk$3mf$2@ger.gmane.org>
	<CANEZrP0J849oDvMWjf8LWi0xj44Q8DaUwDip5_smVBMNgeQ3mw@mail.gmail.com>
	<20140320121221.GA25052@netbook.cypherspace.org>
	<CAJHLa0NeFdXzioQrmK6iKzr85pL3vvTAQH2_vKM3M+T+ZWYjgQ@mail.gmail.com>
	<lgh47n$tnn$2@ger.gmane.org>
	<CALDj+BbX+ejz+diWDGFJUyOLR6+GnbDyiiNpmEbHybNBj=jL7A@mail.gmail.com>
	<CAJHLa0OK1vRiqoHDNYrbO9fNTa8tcY9dMsJ5fC0qpsHS80zvbg@mail.gmail.com>
	<532DC076.4060007@monetize.io>
	<CAJHLa0NtpFnvWLNa=poOKho-wH7gXevNj=WfAaoWFxDMCSCZrw@mail.gmail.com>
	<CANEZrP1=i6eYaJq3JWbQhofrkLExt9ZKEy-Vuq6q48n+UWKWjw@mail.gmail.com>
Message-ID: <CALDj+BZpBx1bKis-RGxt9q8vnJ4Ds4a=-LmAS_gHCEgGOeBMfw@mail.gmail.com>

I know that general approach to interaction design in Bitcoin assumes
minimal to no difference between payer and payee, and generally I agree
with this approach.
However, for the sake of my PoS development this assumption is wrong by
default, as PoS is a specialized hardware, and one who cared to buy and
install it is probably not in the same situation as the other party that
didn't care to by anything dedicated.

In short - from PoS point of view there is a customer and a merchant. And
my goal is to make thing work in assumption of fast and reliable connection
on merchant side and no connection requirement at all from customer side.

I didn't put a silly example, as of my experience there are really a lot of
places where cellphone connection isn't good enough for reliable Bitcoin
operation. However, if we're talking about merchant establishments - we can
hope for private local WiFi or wired connection on PoS side, so PoS
internet connection shouldn't be an issue. So this is the use case I'm
designing around and this is why bluetooth based BIP70 implementation is
important for me.

I partly agree with Mike on user interface and IOU idea, but I have no
intention to implement anything like that right now.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140323/de4912b2/attachment.html>

From hozer at hozed.org  Sun Mar 23 22:12:21 2014
From: hozer at hozed.org (Troy Benjegerdes)
Date: Sun, 23 Mar 2014 17:12:21 -0500
Subject: [Bitcoin-development] Fake PGP key for Gavin
In-Reply-To: <CANEZrP0NeDetSLXjtWnCaYYjYcdhsa=ne=a6NJOnvEp8yr7YaA@mail.gmail.com>
References: <CANEZrP0NeDetSLXjtWnCaYYjYcdhsa=ne=a6NJOnvEp8yr7YaA@mail.gmail.com>
Message-ID: <20140323221221.GK3180@nl.grid.coop>

On Sat, Mar 22, 2014 at 06:03:03PM +0100, Mike Hearn wrote:
> In case you didn't see this yet,
> 
> http://gavintech.blogspot.ch/2014/03/it-aint-me-ive-got-pgp-imposter.html
> 
> If you're using PGP to verify Bitcoin downloads, it's very important that
> you check you are using the right key. Someone seems to be creating fake
> PGP keys that are used to sign popular pieces of crypto software, probably
> to make a MITM attack (e.g. from an intelligence agency) seem more
> legitimate.

I find it more likely that fake PGP keys are from corporate industrial 
espionage and/or organized crime outfits. Intelligence agencies will stick
to compromised X509, network cards, and binary code blobs.

Besides, why would an intelligence agency want your bitcoin when they can 
just intercept ASIC miners and make their own?
 
> I think the Mac DMG's of Core are signed for Gatekeeper, but do we codesign
> the Windows binaries? If not it'd be a good idea, if only because AV
> scanners learn key reputations to reduce false positives. Of course this is
> not a panacea, and Linux unfortunately does not support X.509 code signing,
> but having extra signing can't really hurt.

Uhhmm, real operating system use package managers with PGP instead of pre-
compromised X.509 nonsense. https://wiki.debian.org/SecureApt


-- 
----------------------------------------------------------------------------
Troy Benjegerdes                 'da hozer'                  hozer at hozed.org
7 elements      earth::water::air::fire::mind::spirit::soul        grid.coop

      Never pick a fight with someone who buys ink by the barrel,
         nor try buy a hacker who makes money by the megahash




From hozer at hozed.org  Sun Mar 23 22:37:52 2014
From: hozer at hozed.org (Troy Benjegerdes)
Date: Sun, 23 Mar 2014 17:37:52 -0500
Subject: [Bitcoin-development] Handling miner adoption gracefully for
 embedded consensus systems via double-spending/replace-by-fee
In-Reply-To: <20140322190825.GB6047@savin>
References: <20140322084702.GA13436@savin> <20140322150836.GG3180@nl.grid.coop>
	<20140322190825.GB6047@savin>
Message-ID: <20140323223752.GL3180@nl.grid.coop>

On Sat, Mar 22, 2014 at 03:08:25PM -0400, Peter Todd wrote:
> On Sat, Mar 22, 2014 at 10:08:36AM -0500, Troy Benjegerdes wrote:
> > On Sat, Mar 22, 2014 at 04:47:02AM -0400, Peter Todd wrote:
> > > There's been a lot of recent hoopla over proof-of-publication, with the
> > > OP_RETURN <data> length getting reduced to a rather useless 40 bytes at
> > > the last minute prior to the 0.9 release. Secondly I noticed a
> > > overlooked security flaw in that OP_CHECKMULTISIG sigops weren't taken
> > > into account, making it possible to broadcast unminable transactions and
> > > bloat mempools.(1) My suggestion was to just ditch bare OP_CHECKMULTISIG
> > > outputs given that the sigops limit and the way they use up a fixed 20
> > > sigops per op makes them hard to do fee calculations for. They also make
> > > it easy to bloat the UTXO set, potentially a bad thing. This would of
> > > course require things using them to change. Currently that's just
> > > Counterparty, so I gave them the heads up in my email.
> > 
> > I've spend some time looking at the Datacoin code, and I've come to the 
> > conclusion the next copycatcoin I release will have an explicit 'data' 
> > field with something like 169 bytes (a bakers dozen squared), which will 
> > add 1 byte to each transaction if unused, and provide a small, but usable
> > data field for proof of publication. As a new coin, I can also do a
> > hardfork that increases the data size limit much easier if there is a
> > compelling reason to make it bigger.
> > 
> > I think this will prove to be a much more reliable infrastructure for 
> > proof of publication than various hacks to overcome 40 byte limits with
> > Bitcoin.
> > 
> > I am disclosing this here so the bitcoin 1% has plenty of time to evaluate
> > the market risk they face from the 40 byte limit, and put some pressure to
> > implement some of the alternatives Todd proposes.
> 
> Lol! Granted, I guess I should "disclose" that I'm working on tree
> chains, which just improve the scalability of blockchains directly. I'm
> think tree-chains could be implemented as a soft-fork; if applied to
> Bitcoin the datacoin 1% might face market risk.  :P

Soft-fork tree chains with reasonable data/memo/annotation storage would be
extremely interesting. The important question, however, is how does one 
build a *business* around such a thing, including getting paid as a developer.

What I find extremely relevant to the **bitcoin-dev** list are discussions
about how to motivate the people who own the hashrate and bulk of the coins
(aka, the bitcoin 1%) to PAY DEVELOPERS, and thus it is good marketing FOR
BITCOIN DEVELOPERS to remind the people who profit from our efforts they need
to make it profitable for developers to work on bitcoin.

If it's more profitable for innovative developers to premine and release
$NEWCOIN-blockchain than it is to work on Bitcoin-blockchain, is that a valid
discussion for this list? Or do you just want to stick your heads in the sand
while VC's look to disrupt Bitcoin?



From hozer at hozed.org  Sun Mar 23 23:17:37 2014
From: hozer at hozed.org (Troy Benjegerdes)
Date: Sun, 23 Mar 2014 18:17:37 -0500
Subject: [Bitcoin-development] Handling miner adoption gracefully for
 embedded consensus systems via double-spending/replace-by-fee
In-Reply-To: <CAC1+kJNOuCpUPDiaBNR40T12W3MwUXpXp+PCTLhHyQwyc+8BqA@mail.gmail.com>
References: <20140322084702.GA13436@savin>
	<CAC1+kJNh=7yhmAdFHFv9VBJOOMhen6nwr=U9peG2J_7EovPqxA@mail.gmail.com>
	<20140322193435.GC6047@savin>
	<CAC1+kJNOuCpUPDiaBNR40T12W3MwUXpXp+PCTLhHyQwyc+8BqA@mail.gmail.com>
Message-ID: <20140323231737.GM3180@nl.grid.coop>

> > Right, but there's also a lot of the community who thinks
> > proof-of-publication applications are bad and should be discouraged. I
> > argued before that the way OP_RETURN was being deployed didn't actually
> > give any reason to use it vs. other data encoding methods.
> >
> > Unfortunately underlying all this is a real ignorance about how Bitcoin
> > actually works and what proof-of-publication actually is:
> 
> I understand that proof of publication is not the same thing as
> regular timestamping, but requiring permanent storage in the
> blockchain is not the only way you can implement proof of publication.
> Mark Friedenbach proposes this:
> 
> Store hashes, or a hash root, and soft-fork that blocks are only
> accepted if (a) the data tree is provided, or (b) sufficient work is
> built on it and/or sufficient time has passed
> 
> This way full nodes can ignore the published data until is sufficiently buried.
> 
> > I think we're just going to have to agree to disagree on our
> > interpretations of the economics with regard to attacking merge-mined
> > chains. Myself, I'm very, very wary of systems that have poor security
> > against economically irrational attackers regardless of how good the
> > security is, in theory, against economically rational ones.
> 
> The attacker was of course economically irrational in my previous
> example for which you didn't have any complain. So I think we can
> agree that a merged mined separated chain is more secure than a
> non-merged mined separated chain and that attacking a merged mined
> chain is not free.
> By not being clear on this you're indirectly promoting non-merged
> mined altchains as a better option than merged mined altchains, which
> is what I don't think is responsible on your part.
> 

I can't speak for Peter, but *I* am currently of the opinion that non-merged
mined altchains using memory-hard proof-of-work are a far better option than
sha-256 merged-mined altchains. This is not a popular position on this list,
and I would like to respectfully disagree, but still collaborate on all the
other things where bitcoin-core *is* the best-in-class code available.

A truly 'distributed' system must support multiple alchains, and multiple 
proof-of-work hash algorithms, and probably support proof-of-stake as well.

If sha-256 is the only game in town the only advantage over the federal
reserve is I can at least audit the code that controls the money supply,
but it's not in any way distributed if the hash power is concentrated
among 5-10 major pools and 5-10 sha-256 asic vendors.

I find it very irresponsible for Bitcoiners to on one hand extol the virtues
of distributed systems and then in the same message claim any discussion
about alternate chains as 'off-topic'.

If bitcoin-core is for *distributed systems*, then all the different altcoins
with different hash algorithms should be viable topics for discussion.

----------------------------------------------------------------------------
Troy Benjegerdes                 'da hozer'                  hozer at hozed.org
7 elements      earth::water::air::fire::mind::spirit::soul        grid.coop

      Never pick a fight with someone who buys ink by the barrel,
         nor try buy a hacker who makes money by the megahash




From mark at monetize.io  Sun Mar 23 23:53:48 2014
From: mark at monetize.io (Mark Friedenbach)
Date: Sun, 23 Mar 2014 16:53:48 -0700
Subject: [Bitcoin-development] Handling miner adoption gracefully for
 embedded consensus systems via double-spending/replace-by-fee
In-Reply-To: <20140323231737.GM3180@nl.grid.coop>
References: <20140322084702.GA13436@savin>	<CAC1+kJNh=7yhmAdFHFv9VBJOOMhen6nwr=U9peG2J_7EovPqxA@mail.gmail.com>	<20140322193435.GC6047@savin>	<CAC1+kJNOuCpUPDiaBNR40T12W3MwUXpXp+PCTLhHyQwyc+8BqA@mail.gmail.com>
	<20140323231737.GM3180@nl.grid.coop>
Message-ID: <532F740C.9010800@monetize.io>

This isn't distributed-systems-development, it is bitcoin-development.
Discussion over chain parameters is a fine thing to have among people
who are interested in that sort of thing. But not here.

On 03/23/2014 04:17 PM, Troy Benjegerdes wrote:
> I find it very irresponsible for Bitcoiners to on one hand extol the virtues
> of distributed systems and then in the same message claim any discussion
> about alternate chains as 'off-topic'.
> 
> If bitcoin-core is for *distributed systems*, then all the different altcoins
> with different hash algorithms should be viable topics for discussion.



From hozer at hozed.org  Mon Mar 24 20:34:03 2014
From: hozer at hozed.org (Troy Benjegerdes)
Date: Mon, 24 Mar 2014 15:34:03 -0500
Subject: [Bitcoin-development] Handling miner adoption gracefully for
 embedded consensus systems via double-spending/replace-by-fee
In-Reply-To: <532F740C.9010800@monetize.io>
References: <20140322084702.GA13436@savin>
	<CAC1+kJNh=7yhmAdFHFv9VBJOOMhen6nwr=U9peG2J_7EovPqxA@mail.gmail.com>
	<20140322193435.GC6047@savin>
	<CAC1+kJNOuCpUPDiaBNR40T12W3MwUXpXp+PCTLhHyQwyc+8BqA@mail.gmail.com>
	<20140323231737.GM3180@nl.grid.coop> <532F740C.9010800@monetize.io>
Message-ID: <20140324203403.GR3180@nl.grid.coop>

I think that's fair, so long as we limit bitcoin-development discussion to
issues that are relevant to the owners of the hashrate and companies that
pay developer salaries.

What I'm asking for is some honesty that Bitcoin is a centralized system
and to stop arguing technical points on the altar of distributed/decentralized
whatever. It's pretty clear if you want decentralized you should go with 
altchains.

I'm here because I want to sell corn for bitcoin, and I believe it will be
more profitable for me to do that with a bitcoin-blockchain-based system
in which I have the capability to audit the code that executes the trade.


On Sun, Mar 23, 2014 at 04:53:48PM -0700, Mark Friedenbach wrote:
> This isn't distributed-systems-development, it is bitcoin-development.
> Discussion over chain parameters is a fine thing to have among people
> who are interested in that sort of thing. But not here.
> 
> On 03/23/2014 04:17 PM, Troy Benjegerdes wrote:
> > I find it very irresponsible for Bitcoiners to on one hand extol the virtues
> > of distributed systems and then in the same message claim any discussion
> > about alternate chains as 'off-topic'.
> > 
> > If bitcoin-core is for *distributed systems*, then all the different altcoins
> > with different hash algorithms should be viable topics for discussion.




From drwho at virtadpt.net  Mon Mar 24 19:44:24 2014
From: drwho at virtadpt.net (The Doctor)
Date: Mon, 24 Mar 2014 12:44:24 -0700
Subject: [Bitcoin-development] Fake PGP key for Gavin
In-Reply-To: <20140323221221.GK3180@nl.grid.coop>
References: <CANEZrP0NeDetSLXjtWnCaYYjYcdhsa=ne=a6NJOnvEp8yr7YaA@mail.gmail.com>
	<20140323221221.GK3180@nl.grid.coop>
Message-ID: <53308B18.4070602@virtadpt.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512

On 03/23/2014 03:12 PM, Troy Benjegerdes wrote:

> I find it more likely that fake PGP keys are from corporate
> industrial espionage and/or organized crime outfits. Intelligence
> agencies will stick to compromised X509, network cards, and binary
> code blobs.

We're seeing the same thing happen to a couple of developers active in
the censorship circumvention problem space as well (though it's not
for the first time it's happened).

> Besides, why would an intelligence agency want your bitcoin when
> they can just intercept ASIC miners and make their own?

Perhaps they have other motives for attempting a cybil attack against
developers than trying to acquire Bitcoins.  Say, by making it easier
to subtitute alternate versions which are instrumented to make the
users easier to spy upon and later take down?

- -- 
The Doctor [412/724/301/703] [ZS]
Developer, Project Byzantium: http://project-byzantium.org/

PGP: 0x807B17C1 / 7960 1CDC 85C9 0B63 8D9F  DD89 3BD8 FF2B 807B 17C1
WWW: https://drwho.virtadpt.net/

"The enemies know the system. The allies do not." --Jay Jacobs

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2.0.22 (GNU/Linux)
Comment: Using GnuPG with Thunderbird - http://www.enigmail.net/

iEYEAREKAAYFAlMwixgACgkQO9j/K4B7F8FQEACfQG8+5rYDuJd+6P50Bgc8RRfU
Q28AoNdyUbR2k05wTka30OcUUQNK5FcN
=IeMU
-----END PGP SIGNATURE-----



From mark at monetize.io  Mon Mar 24 20:57:14 2014
From: mark at monetize.io (Mark Friedenbach)
Date: Mon, 24 Mar 2014 13:57:14 -0700
Subject: [Bitcoin-development] Handling miner adoption gracefully for
 embedded consensus systems via double-spending/replace-by-fee
In-Reply-To: <20140324203403.GR3180@nl.grid.coop>
References: <20140322084702.GA13436@savin>
	<CAC1+kJNh=7yhmAdFHFv9VBJOOMhen6nwr=U9peG2J_7EovPqxA@mail.gmail.com>
	<20140322193435.GC6047@savin>
	<CAC1+kJNOuCpUPDiaBNR40T12W3MwUXpXp+PCTLhHyQwyc+8BqA@mail.gmail.com>
	<20140323231737.GM3180@nl.grid.coop> <532F740C.9010800@monetize.io>
	<20140324203403.GR3180@nl.grid.coop>
Message-ID: <53309C2A.4040406@monetize.io>

On 03/24/2014 01:34 PM, Troy Benjegerdes wrote:
> I'm here because I want to sell corn for bitcoin, and I believe it will be
> more profitable for me to do that with a bitcoin-blockchain-based system
> in which I have the capability to audit the code that executes the trade.

A discussion over such a system would be on-topic. Indeed I have made my
own proposals for systems with that capability in the past:

http://sourceforge.net/p/bitcoin/mailman/message/31322676/

There's no reason to invoke alts however. There are ways where this can
be done within the bitcoin ecosystem, using bitcoins:

http://sourceforge.net/p/bitcoin/mailman/message/32108143/

> I think that's fair, so long as we limit bitcoin-development discussion to
> issues that are relevant to the owners of the hashrate and companies that
> pay developer salaries.
> 
> What I'm asking for is some honesty that Bitcoin is a centralized system
> and to stop arguing technical points on the altar of distributed/decentralized
> whatever. It's pretty clear if you want decentralized you should go with 
> altchains.

Bitcoin is not a centralized system, and neither is its development. I
don't even know how to respond to that. Bringing up altchains is a total
red herring.

This is *bitcoin*-development. Please don't make it have to become a
moderated mailing list.



From luke at dashjr.org  Mon Mar 24 21:17:13 2014
From: luke at dashjr.org (Luke-Jr)
Date: Mon, 24 Mar 2014 21:17:13 +0000
Subject: [Bitcoin-development] Handling miner adoption gracefully for
	embedded consensus systems via double-spending/replace-by-fee
In-Reply-To: <20140322084702.GA13436@savin>
References: <20140322084702.GA13436@savin>
Message-ID: <201403242117.14474.luke@dashjr.org>

On Saturday, March 22, 2014 8:47:02 AM Peter Todd wrote:
> To make a long story short, it was soon suggested that Bitcoin Core be
> forked - the software, not the protocol - and miners encouraged to
> support it.

There's been at least one public miner-oriented fork of Bitcoin Core since 0.7 
or earlier. Miners still running vanilla Bitcoin Core are neglecting their 
duty to the community. That being said, the more forks, the better for 
decentralisation.

Luke



From pete at petertodd.org  Tue Mar 25 12:28:51 2014
From: pete at petertodd.org (Peter Todd)
Date: Tue, 25 Mar 2014 08:28:51 -0400
Subject: [Bitcoin-development] Tree-chains preliminary summary
In-Reply-To: <532DE7E6.4050304@monetize.io>
References: <20140322084702.GA13436@savin> <20140322150836.GG3180@nl.grid.coop>
	<20140322190825.GB6047@savin> <532DE7E6.4050304@monetize.io>
Message-ID: <20140325122851.GA9818@savin>

On Sat, Mar 22, 2014 at 12:43:34PM -0700, Mark Friedenbach wrote:
> Btw, any chance we could get a summary description of tree-chains
> posted to bitcoin-development?

Sure:

Introduction
============

Bitcoin doesn't scale. There's a lot of issues at hand here, but the
most fundemental of them is that to create a block you need to update
the state of the UTXO set, and the way Bitcoin is designed means that
updating that state requires bandwidth equal to all the transaction
volume to keep up with the changes to what set. Long story short, we get
O(n^2) scaling, which is just plain infeasible.

So let's split up the transaction volume so every individual miner only
needs to keep up with some portion. In a rough sense that's what
alt-coins do - all the tipping microtransactions on Doge never have to
hit the Bitcoin blockchain for instance, reducing pressure on the
latter. But moving value between chains is inconvenient; right now
moving value requires trusted third parties. Two-way atomic chain
transfers does help here, but as recent discussions on the topic showed
there's all sorts of edge cases with reorganizations that are tricky to
handle; at worst they could lead to inflation.

So what's the underlying issue there? The chains are too independent.
Even with merge-mining there's no real link between one chain and
another with regard to the order of transactions. Secondly merge-mining
suffers from 51% attacks if the chain being merge-mined doesn't have a
majority of total hashing power... which kinda defeats the point if
we're worried about miner scalability.


Blocks and the TXO set as a binary radix tree
=============================================

So how can we do better? Start with the "big picture" idea and take the
linear blockchain and turn it into a tree:

           ?????????????????
       ?????????       ?????????
     ?????   ?????   ?????   ?????
    ??? ??? ??? ??? ??? ??? ??? ???

Obviously if we could somehow split up the UTXO set such that individual
miners/full nodes only had to deal with subsets of this tree we could
significantly reduce the bandwidth that any one miner would need to
process. Every transaction output would get a unique identifier, say
txoutid=H(txout) and we put those outputs in blocks appropriately.

We can't just wave a magic wand and say that every block has the above
structure and all miners co-ordinate to generate all blocks in one go.
Instead we'll do something akin to merge mining. Start with a linear
blockchain with ten blocks. Arrows indicate hashing:

    a0 ? a1 ? a2 ? a3 ? a4 ? a5 ? a6 ? a7 ? a8 ? a9

The following data structure could be the block header in this scheme.
We'll simplify things a bit and make up our own; obviously with some
more effort the standard Satoshi structures can be used too:

    struct BlockHeader:
        uint256 prevBlockHash
        uint256 blockContentsHash
        uint256 target
        uint256 nonce
        uint time

For now we'll say this is a pure-proof-of-publication chain, so our
block contents are very simple:

    struct BlockContents:
        uint256 merkleRoot

As usual the PoW is valid if H(blockHeader) < blockHeader.target. Every
block creates new txouts, and the union of all such txouts is the txout
set. As shown previously(1) this basic proof-of-publication
functionality is sufficient to build a crypto-currency even without
actually validating the contents of the so-called transaction outputs.

The scalability of this sucks, so let's add two more chains below the
root to start forming a tree. For fairness we'll only allow miners to
either mine a, a+b, or a+c; attempting to mine a block with both the b
and c chains simultaneously is not allowed.

    struct BlockContents:
        uint256 childBlockHash # may be null
        bool childSide # left or right
        uint256 merkleRoot

Furthermore we shard the TXO space by defining txoid = H(txout) and
allowing any txout in chain a, and only txouts with LSB=0 in b, LSB=1 in
c; the beginning of a binary radix tree. With some variance thrown in we
get the following:

       b0 ?? b1 ????? b2 ? b3 ? b4 ? b5 ? b6 ? b7 ? b8
                     ?                        ?
    a0 ? a1 ? a2 ? a3 ?????? a4 ? a5 ? a6 ? a7 ? a8
           ?    ?              ?         ?         ?
       c0 ? c1 ? c2 ? c3 ?????? c4 ? c5 ? c6 ?????? c7


We now have three different versions of the TXO set: ?a, ?a + ?b, and
?a+?c. Each of these versions is consistent in that for a given txoutid
prefix we can achieve consensus over the contents of the TXO set. Of
course, this definition is recursive:

    a0 ? a1 ? a2 ? a3 ?????? a4 ? a5 ? a6 ? a7 ? a8
           ?    ?              ?         ?         ?
       c0 ? c1 ? c2 ? c3 ?????? c4 ? c5 ? c6 ?????? c7
               ?         ?         ?    ?              ?
           d0 ? d1 ?????? d2 ?????? d3 ? d4 ??? d5 ???? d6

Unicode unfortunately lacks 3D box drawing at present, so I've only
shown left-sided child chains.


Herding the child-chains
========================

If all we were doing was publishing data, this would suffice. But what
if we want to syncronize our actions? For instance, we may want a new
txout to only be published in one chain if the corresponding txout in
another is marked spent. What we want is a reasonable rule for
child-chains to be invalidated when their parents are invalidated so as
to co-ordinate actions across distant child chains by relying on the
existance of their parents.

We start by removing the per-chain difficulties, leaving only a single
master proof-of-work target. Solutions less than target itself are
considered valid in the root chain, less than the target << 1 in the
root's children, << 2 in the children's children etc. In children that
means the header no longer contains a time, nonce, or target; the values
in the root block header are used instead:

    struct ChildBlockHeader:
        uint256 prevChildBlockHash
        uint256 blockContentsHash

For a given chain we always choose the one with the most total work. But
to get our ordering primitive we'll add a second, somewhat brutal, rule:
Parent always wins.

We achieve this moving the child block header into the parent block
itself:

    struct BlockContents:
       ChildBlockHeader childHeader # may be null (zeroed out)
       bool childSide # left or right
       bytes txout

Let's look at how this works. We start with a parent and a child chain:

    a0 ? a1 ? a2 ? a3
           ?         ?
       b0 ? b1 ? b2 ? b3 ? b4 ? b5

First there is the obvious scenario where the parent chain is
reorganized. Here our node learns of a2 ? a3' ? a4':

                 ? a3' ? a4'
    a0 ? a1 ? a2 ? a3 ? X
           ?         ?
       b0 ? b1 ? b2 ? b3 ? X

Block a3 is killed, resulting in the orphaning of b3, b4, and b5:

    a0 ? a1 ? a2 ? a3' ? a4'
           ?
       b0 ? b1 ? b2

The second case is when a parent has a conflicting idea about what the
child chian is. Here our node receives block a5, which has a conflicting
idea of what child b2 is:

    a0 ? a1 ? a2 ? a3' ? a4' ? a5
           ?                     ?
       b0 ? b1 ?????????????????? b2'
               ? b2 ? X

As the parent always wins, even multiple blocks can get killed off this
way:


    a0 ? a1 ? a2 ? a3 ? a4
           ?
       b0 ? b1 ? b2 ? b3 ? b4 ? b5 ? b6 ? b7

to:

    a0 ? a1 ? a2 ? a3 ? a4 ? a5
           ?                   ?
       b0 ? b1 ???????????????? b2'
               ? b2 ? b3 ? b4 ? b5 ? X

This behavior is easier to understand if you say instead that the node
learned about block b2', which had more total work than b2 as the sum
total of work done in the parent chain in blocks specifying the that
particular child chain is considered before comparing the total work
done in only the child chain.

It's important to remember that the parent blockchain has and validates
both childrens' block headers; it is not possible to mine a block with
an invalid secret of child headers. For instance with the following:

    a0 ? a1 ? a2 ? a3 ? a4
           ?         ?    ?
       b0 ? b1 ? b2 ? b3 ? b4 ? b5 ? b6 ? b7

I can't mine block a5 that says following b2 is b2' in an attempt to
kill off b2 through b7.


Token transfer with tree-chains
===============================

How can we make use of this? Lets start with a simple discrete token
transfer system. Transactions are simply:

    struct Transaction:
        uint256 prevTxHash
        script prevPubKey
        script scriptSig
        uint256 scriptPubKeyHash

We'll say transactions go in the tree-chain according to their
prevTxHash, with the depth in the tree equal to the depth of the
previous output. This means that you can prove an output was created by
the existance of that transaction in the block with prefix matching
H(tx.prevTxHash), and you can prove the transaction output is unspent by
the non-existance of a transaction in the block with prefix matching
H(tx).

With our above re-organization rule everything is consistent too: if
block b_i contains tx1, then the corresponding block c_j can contain a
valid tx2 spending tx1 provided that c_j depends on a_p and there is a
path from a_p to b_(i+k). Here's an example, starting with tx1 in c2:

       b0 ?????? b1
                ?
    a0 ? a1 ? a2
           ?
       c0 ? c1 ? c2

Block b2 below can't yet contain tx2 because there is no path:

       b0 ?????? b1 ? b2
                ?
    a0 ? a1 ? a2
           ?
       c0 ? c1 ? c2

However now c3 is found, whose PoW solution was also valid for a3:

       b0 ?????? b1 ? b2
                ?
    a0 ? a1 ? a2 ? a3
           ?         ?
       c0 ? c1 ? c2 ? c3

Now b3 can contain tx2, as b3 will also attempt to create a4, which
depends on a3:

       b0 ?????? b1 ? b2 ? b3
                ?
    a0 ? a1 ? a2 ? a3
           ?         ?
       c0 ? c1 ? c2 ? c3

Now that a3 exists, block c2 can only be killed if a3 is, which would
also kill b3 and thus destroy tx2.


Proving transaction output validity in a token transfer system
==============================================================

How cheap is it to prove the entire history of a token is valid from
genesis?  Perhaps surprisingly, without any cryptographic moon-math the
cost is only linear!

Remember that a transaction in a given chain has committed to the chain
that it can be spent in. If Alice is to prove to Bob that the output she
gave him is valid, she simply needs to prove that for every transaction
in the histroy of the token the token was created, remained unspent,
then finally was spent. Proving a token remained unspent between blocks
b_n and b_m is trivially possible in linear size. Once the token is
spent nothing about blocks beyond b_m is required. Even if miners do not
validate transactions at all the proof size remains linear provided
blocks themselves have a maximum size - at worst the proof contains some
invalid transactions that can be shown to be false spends.

While certainly inconvenient, it is interesting how such a simple system
appears to in theory scale to unlimited numbers of transactions and with
an appropriate exchange rate move unlimited amounts of value. A possible
model would be for the the tokens themselves to have power of two
values, and be split and combined as required.


The lost data problem
=====================

There is however a catch: What happens when blocks get lost? Parent
blocks only contain their childrens' headers, not the block contents.
At some point the difficulty of producing a block will drop sufficiently
for malicious or accidental data loss to be possible. With the "parent
chain wins" rule it must be possible to recover from that event for
mining on the child to continue.

Concretely, suppose you have tx1 in block c2, which can be spent on
chain b. The contents of chain a is known to you, but the full contents
of chain b are unavailable:

        b0 ? b1      (b)  (b)
           ?         ?    ?
    a0 ? a1 ? a2 ? a3 ? a4 ? a5
                ?              ?
       c0 ? c1 ? c2 ? c3 ? c4 ? c5

Blocks a3 and a4 are known to have children on b, but the contents of
those children are unavailable. We can define some ratio of unknown to
known blocks that must be proven for the proof to be valid. Here we
show a 1:1 ratio:

                ???????????????
        b0 ? b1      (b)  (b)   b2 ? b3 ? b4 ? b5 ? b6 ? b7
           ?         ?    ?         ?         ?    ?
    a0 ? a1 ? a2 ? a3 ? a4 ? a5 ? a6 ? a7 ? a8 ? a9
                ?              ?         ?
       c0 ? c1 ? c2 ? c3 ? c4 ? c5 ? c6 ? c7 ? c8 ? c9


The proof of now shows that while a3 and a4 has b-side blocks, by the
time you reach b6 those two lost blocks were in the minority. Of course
a real system needs to be careful that mining blocks and then discarding
them isn't a profitably way to create coins out of thin air - ratios
well in excess of 1:1 are likely to be required.


Challenge-response resolution
=============================

Another idea is to say if the parent blockchain's contents are known we
can insert a challenge into it specifying that a particular child block
be published verbatim in the parent. Once the challenge is published
further parent blocks may not reference that children on that side until
either the desired block is re-republished or some timeout is reached.
If the timeout is reached, mining backtracks to some previously known
child specified in the challenge. In the typical case the block is known
to a majority of miners, and is published, essentially allowing new
miners to force the existing ones to "cough up" blocks they aren't
publishing and allow the new ones to continue mining. (obviously some
care needs to be taken with regard to incentives here)

While an attractive idea, this is our first foray into moon math.
Suppose such a challenge was issued in block a2, asking for the contents
of b1 to be published. Meanwhile tx1 is created in block c3, and can
only be spent on a b-side chain:

        b0 ? b1
           ?
    a0 ? a1 ? (a2) ? a3
                       ?
         c0 ? c1 ? c2 ? c3

The miners of the b-chain can violate the protocol by mining a4/b1',
where b1' appears to contain valid transaction tx2:


        b0 ? b1              b1'
           ?                ?
    a0 ? a1 ? (a2) ? a3 ? a4
                       ?
         c0 ? c1 ? c2 ? c3

A proof of tx2 as valid payment would entirely miss fact that the
challenge was published and thus not know that b1' was invalid. While
I'm sure the reader can come up with all kinds of complex and fragile
way of proving fraud to cause chain a to be somehow re-organized, what
we really want is some sub-linear proof of honest computation.  Without
getting into details, this is probably possible via some flavor of
sub-linear moon-math proof-of-execution. But this paper is too long
already to start getting snarky.


Beyond token transfer systems
=============================

We can extend our simple one txin, one txout token transfer transactions
with merkle (sum) trees. Here's a rough sketch of the concept:

    input #1??   ??output #1
             ?? ??
    input #2??? ???output #2
              ???
    input #3??? ???output #3
             ?? ??
    input #4??   ??output #4

Where previously a transaction committed to a specific transaction
output, we can make our transactions commit to a merkle-sum-tree of
transaction outputs. To then redeem a transaction output you prove that
enough prior outputs were spend to add up to the new output's value. The
entire process can happen incrementally without any specific
co-operation between miners on different parts of the chain, and inputs
and outputs can come from any depth in the tree provided that care is
taken to ensure that reorganization is not profitable.

Like the token transfer system proving a given output is valid has cost
linear with history. However we can improve on that using
non-interactive proof techniques. For instance in the linear token
transfer example the history only needs to be proven to a point where
the transaction fees are higher than the value of the output. (easiest
where the work required to spend a txout of a given value is well
defined) A similar approach can be easily taken with the
directed-acyclic-graph of mutliple-input-output transactions. Secondly
non-interactive proof techniques can also be used, again out of the
scope of this already long preliminary paper.


1) "Disentangling Crypto-Coin Mining: Timestamping,
   Proof-of-Publication, and Validation",
   http://www.mail-archive.com/bitcoin-development%40lists.sourceforge.net/msg03307.html

-- 
'peter'[:-1]@petertodd.org
00000000000000002fd949770524eea54446adb70603a90a4c493d345f890e04
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 685 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140325/5368d5f1/attachment.sig>

From gavin at bitcoinfoundation.org  Tue Mar 25 12:45:00 2014
From: gavin at bitcoinfoundation.org (Gavin Andresen)
Date: Tue, 25 Mar 2014 08:45:00 -0400
Subject: [Bitcoin-development] Tree-chains preliminary summary
In-Reply-To: <20140325122851.GA9818@savin>
References: <20140322084702.GA13436@savin> <20140322150836.GG3180@nl.grid.coop>
	<20140322190825.GB6047@savin> <532DE7E6.4050304@monetize.io>
	<20140325122851.GA9818@savin>
Message-ID: <CABsx9T149f9of9+sYMFazAxtRi=ZJrpA1B41buERD3+j7NGKmg@mail.gmail.com>

On Tue, Mar 25, 2014 at 8:28 AM, Peter Todd <pete at petertodd.org> wrote:

> Bitcoin doesn't scale. There's a lot of issues at hand here, but the
> most fundemental of them is that to create a block you need to update
> the state of the UTXO set, and the way Bitcoin is designed means that
> updating that state requires bandwidth equal to all the transaction
> volume to keep up with the changes to what set. Long story short, we get
> O(n^2) scaling, which is just plain infeasible.
>

We have a fundamental disagreement here.

If you go back and read Satoshi's original thoughts on scaling, it is clear
that he imagined tens of thousands of mining nodes and hundreds of millions
of lightweight SPV users.

Scaling is a problem if every person is a fully validating node; then,
indeed, you get an O(n^2) problem.  Which can be solved by extending some
tentative trust to your peers, but lets put all those possible solutions
aside.

Given tens of thousands of fully validating nodes, you get O(m*n), where m
is the number of fully validating peers and is a large constant (10s of
thousands).

We don't know how large m can or will be; we have only just started to
scale up.

"Bitcoin doesn't scale" is pure FUD. It might not scale in exactly the way
you want, but it WILL scale.

-- 
--
Gavin Andresen
Chief Scientist, Bitcoin Foundation
https://www.bitcoinfoundation.org/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140325/5c1439bf/attachment.html>

From pete at petertodd.org  Tue Mar 25 12:50:58 2014
From: pete at petertodd.org (Peter Todd)
Date: Tue, 25 Mar 2014 08:50:58 -0400
Subject: [Bitcoin-development] Tree-chains preliminary summary
In-Reply-To: <20140325122851.GA9818@savin>
References: <20140322084702.GA13436@savin> <20140322150836.GG3180@nl.grid.coop>
	<20140322190825.GB6047@savin> <532DE7E6.4050304@monetize.io>
	<20140325122851.GA9818@savin>
Message-ID: <20140325125058.GA7929@savin>

On Tue, Mar 25, 2014 at 08:28:51AM -0400, Peter Todd wrote:
> On Sat, Mar 22, 2014 at 12:43:34PM -0700, Mark Friedenbach wrote:
> > Btw, any chance we could get a summary description of tree-chains
> > posted to bitcoin-development?
> 
> Sure:
> 
> Introduction
> ============

BTW for those whose email clients have problems with unicode:

http://www.mail-archive.com/bitcoin-development at lists.sourceforge.net/msg04388.html

Also, I was in a bit of a rush - catching a flight - and know I should
have cited a few things, including, but not limited to, various peoples'
work on chain-to-chain transfers and SPV proofs.

-- 
'peter'[:-1]@petertodd.org
00000000000000005f3189269d2c39711d6a340a617267d72f95848a9ab8e7ba
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 685 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140325/4d014a37/attachment.sig>

From hozer at hozed.org  Tue Mar 25 13:39:25 2014
From: hozer at hozed.org (Troy Benjegerdes)
Date: Tue, 25 Mar 2014 08:39:25 -0500
Subject: [Bitcoin-development] New side channel attack that can recover
 Bitcoin keys
In-Reply-To: <CAAt2M19R_97aXs9rwo8UY5PE7DwHZDT12esPhz76M1EOdGrrdQ@mail.gmail.com>
References: <CANEZrP25N7W_MeZin_pyVQP5pC8bt5yqJzTXt_tN1P6kWb5i2w@mail.gmail.com>
	<0720C223-E9DD-4E76-AD6F-0308CA5B5289@gmail.com>
	<CAAS2fgTGDzPFDP=ii08VXcXYpWr2akYWxqJCNHW-ABuN=ESc8A@mail.gmail.com>
	<7E50E1D6-3A9F-419B-B01E-50C6DE044E0F@gmail.com>
	<CAAS2fgScLKgq8_V0oVpvP1gYAKxiyVNGVWA86XfecSmPqsMKUg@mail.gmail.com>
	<CANEZrP1+=JY0RGEMvm9iL09L-tZAWqsSOOwFaroYUKkWumx+xg@mail.gmail.com>
	<CAAt2M19R_97aXs9rwo8UY5PE7DwHZDT12esPhz76M1EOdGrrdQ@mail.gmail.com>
Message-ID: <20140325133925.GW3180@nl.grid.coop>

This *could* be a useful feature, but only if it's generalizable to
other processor architectures, and **in particular** has an implementation
using dedicated silicon that has a **public** open-source hardware layout,
so you can X-ray the chip, and confirm with a thermal imager that yes, the
encryption code is actually running where you think it's running.

I was *almost* convinced that the 'new key per address' was a good idea
to mitigate ECDSA side channel attacks. Now, however, I find it quite 
plausible that intelligence agencies are promoting 'new key per transaction'
as a way to make sure all your keys are leaked all over RAM and the nearby
electromagnetic spectrum with side channels intentionally embedded in
commodity hardware.

If you want to convince me otherwise, then help me crowdfund an open-source
hardware Bitcoin ASIC that does the crypto and stores your private keys. 

I expect the 'new key per transaction' crowd will be in for a rude awakening
when they finally understand the silicon area cost to do this securely.

Conclusion: Not only is 'de-prioritizing address re-use' BAD privacy, it 
provides a social engineering/key leakage attack vector where someone can
track you down from the EMF generated by your bitcoin wallet when they send
you money.

If you think otherwise, let's build some ficking open-source hardware and 
find out how much silicon this will cost.

Although it's probably more profitable to just build a bitcoin wallet 
detector and keep your mouth shut.

On Thu, Mar 06, 2014 at 11:00:14AM +0100, Natanael wrote:
> You've heard of TRESOR?
> 
> No, not Trezor.
> 
> https://en.wikipedia.org/wiki/TRESOR
> 
> Signing on the CPU, without touching RAM.
> 
> - Sent from my phone
> Den 6 mar 2014 09:41 skrev "Mike Hearn" <mike at plan99.net>:
> 
> > I'm wondering about whether (don't laugh) moving signing into the kernel
> > and then using the MTRRs to disable caching entirely for a small scratch
> > region of memory would also work. You could then disable pre-emption and
> > prevent anything on the same core from interrupting or timing the signing
> > operation.
> >
> > However I suspect just making a hardened secp256k1 signer implementation
> > in userspace would be of similar difficulty, in which case it  would
> > naturally be preferable.
> >
> >
> > On Wed, Mar 5, 2014 at 11:25 PM, Gregory Maxwell <gmaxwell at gmail.com>wrote:
> >
> >> On Wed, Mar 5, 2014 at 2:14 PM, Eric Lombrozo <elombrozo at gmail.com>
> >> wrote:
> >> > Everything you say is true.
> >> >
> >> > However, branchless does reduce the attack surface considerably - if
> >> nothing else, it significantly ups the difficulty of an attack for a
> >> relatively low cost in program complexity, and that might still make it
> >> worth doing.
> >>
> >> Absolutely. I believe these things are worth doing.
> >>
> >> My comment on it being insufficient was only that "my signer is
> >> branchless" doesn't make other defense measures (avoiding reuse,
> >> multsig with multiple devices, not sharing hardware, etc.)
> >> unimportant.
> >>
> >> > As for uniform memory access, if we avoided any kind of heap
> >> allocation, wouldn't we avoid such issues?
> >>
> >> No. At a minimum to hide a memory timing side-channel you must perform
> >> no data dependent loads (e.g. no operation where an offset into memory
> >> is calculated). A strategy for this is to always load the same values,
> >> but then mask out the ones you didn't intend to read... even that I'd
> >> worry about on sufficiently advanced hardware, since I would very much
> >> not be surprised if the processor was able to determine that the load
> >> had no effect and eliminate it! :) )
> >>
> >> Maybe in practice if your data dependencies end up only picking around
> >> in the same cache-line it doesn't actually matter... but it's hard to
> >> be sure, and unclear when a future optimization in the rest of the
> >> system might leave it exposed again.
> >>
> >> (In particular, you can't generally write timing sign-channel immune
> >> code in C (or other high level language) because the compiler is
> >> freely permitted to optimize things in a way that break the property.
> >> ... It may be _unlikely_ for it to do this, but its permitted? and
> >> will actually do so in some cases?, so you cannot be completely sure
> >> unless you check and freeze the toolchain)
> >>
> >> > Anyhow, without having gone into the full details of this particular
> >> attack, it seems the main attack point is differences in how squaring and
> >> multiplication (in the case of field exponentiation) or doubling and point
> >> addition (in the case of ECDSA) are performed. I believe using a branchless
> >> implementation where each phase of the operation executes the exact same
> >> code and accesses the exact same stack frames would not be vulnerable to
> >> FLUSH+RELOAD.
> >>
> >> I wouldn't be surprised.
> >>
> >>
> >> ------------------------------------------------------------------------------
> >> Subversion Kills Productivity. Get off Subversion & Make the Move to
> >> Perforce.
> >> With Perforce, you get hassle-free workflows. Merge that actually works.
> >> Faster operations. Version large binaries.  Built-in WAN optimization and
> >> the
> >> freedom to use Git, Perforce or both. Make the move to Perforce.
> >>
> >> http://pubads.g.doubleclick.net/gampad/clk?id=122218951&iu=/4140/ostg.clktrk
> >> _______________________________________________
> >> Bitcoin-development mailing list
> >> Bitcoin-development at lists.sourceforge.net
> >> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> >>
> >
> >
> >
> > ------------------------------------------------------------------------------
> > Subversion Kills Productivity. Get off Subversion & Make the Move to
> > Perforce.
> > With Perforce, you get hassle-free workflows. Merge that actually works.
> > Faster operations. Version large binaries.  Built-in WAN optimization and
> > the
> > freedom to use Git, Perforce or both. Make the move to Perforce.
> >
> > http://pubads.g.doubleclick.net/gampad/clk?id=122218951&iu=/4140/ostg.clktrk
> > _______________________________________________
> > Bitcoin-development mailing list
> > Bitcoin-development at lists.sourceforge.net
> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> >
> >

> ------------------------------------------------------------------------------
> Subversion Kills Productivity. Get off Subversion & Make the Move to Perforce.
> With Perforce, you get hassle-free workflows. Merge that actually works. 
> Faster operations. Version large binaries.  Built-in WAN optimization and the
> freedom to use Git, Perforce or both. Make the move to Perforce.
> http://pubads.g.doubleclick.net/gampad/clk?id=122218951&iu=/4140/ostg.clktrk

> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development


-- 
----------------------------------------------------------------------------
Troy Benjegerdes                 'da hozer'                  hozer at hozed.org
7 elements      earth::water::air::fire::mind::spirit::soul        grid.coop

      Never pick a fight with someone who buys ink by the barrel,
         nor try buy a hacker who makes money by the megahash




From pete at petertodd.org  Tue Mar 25 13:49:18 2014
From: pete at petertodd.org (Peter Todd)
Date: Tue, 25 Mar 2014 09:49:18 -0400
Subject: [Bitcoin-development] Tree-chains preliminary summary
In-Reply-To: <CABsx9T149f9of9+sYMFazAxtRi=ZJrpA1B41buERD3+j7NGKmg@mail.gmail.com>
References: <20140322084702.GA13436@savin> <20140322150836.GG3180@nl.grid.coop>
	<20140322190825.GB6047@savin> <532DE7E6.4050304@monetize.io>
	<20140325122851.GA9818@savin>
	<CABsx9T149f9of9+sYMFazAxtRi=ZJrpA1B41buERD3+j7NGKmg@mail.gmail.com>
Message-ID: <20140325134918.GB7929@savin>

On Tue, Mar 25, 2014 at 08:45:00AM -0400, Gavin Andresen wrote:
> On Tue, Mar 25, 2014 at 8:28 AM, Peter Todd <pete at petertodd.org> wrote:
> 
> > Bitcoin doesn't scale. There's a lot of issues at hand here, but the
> > most fundemental of them is that to create a block you need to update
> > the state of the UTXO set, and the way Bitcoin is designed means that
> > updating that state requires bandwidth equal to all the transaction
> > volume to keep up with the changes to what set. Long story short, we get
> > O(n^2) scaling, which is just plain infeasible.
> >
> 
> We have a fundamental disagreement here.
> 
> If you go back and read Satoshi's original thoughts on scaling, it is clear
> that he imagined tens of thousands of mining nodes and hundreds of millions
> of lightweight SPV users.

Yeah, about that...

https://blockchain.info/pools

For someone with 'Chief Scientist' as their job title, I'm surprised you
think so little of hard evidence and so much of idol worshipping.


P.S. A year or so ago you complained that if I cared so much about
decentralization, I should make P2Pool better. Your homework: What do
tree-chains and Andrew Miller's non-outsourcable puzzles(1) have to do
with that? What about the cube-square law? And why don't I think TXO
commitments solve the blocksize problem?

1) https://bitcointalk.org/index.php?topic=309073.0;all

-- 
'peter'[:-1]@petertodd.org
000000000000000020366a15799010ae0432be831c197e06b19133028a9aa6f3
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 685 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140325/067aed8a/attachment.sig>

From gavinandresen at gmail.com  Tue Mar 25 13:50:02 2014
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Tue, 25 Mar 2014 09:50:02 -0400
Subject: [Bitcoin-development] New side channel attack that can recover
 Bitcoin keys
In-Reply-To: <20140325133925.GW3180@nl.grid.coop>
References: <CANEZrP25N7W_MeZin_pyVQP5pC8bt5yqJzTXt_tN1P6kWb5i2w@mail.gmail.com>
	<0720C223-E9DD-4E76-AD6F-0308CA5B5289@gmail.com>
	<CAAS2fgTGDzPFDP=ii08VXcXYpWr2akYWxqJCNHW-ABuN=ESc8A@mail.gmail.com>
	<7E50E1D6-3A9F-419B-B01E-50C6DE044E0F@gmail.com>
	<CAAS2fgScLKgq8_V0oVpvP1gYAKxiyVNGVWA86XfecSmPqsMKUg@mail.gmail.com>
	<CANEZrP1+=JY0RGEMvm9iL09L-tZAWqsSOOwFaroYUKkWumx+xg@mail.gmail.com>
	<CAAt2M19R_97aXs9rwo8UY5PE7DwHZDT12esPhz76M1EOdGrrdQ@mail.gmail.com>
	<20140325133925.GW3180@nl.grid.coop>
Message-ID: <CABsx9T0TEPLEUAf3q2jLJL5+2S9K8DuFRXkUz3cFTrTO4=MfWQ@mail.gmail.com>

Y'all are getting deep into tinfoil-wearing-hat-conspiracy-theory territory.

If you are worried about the NSA compromising your hardware or software,
then use multisig transactions and
sign on diverse hardware/software stacks. Generate the multiple private
keys on different hardware/software
stacks, too.

Or, in other words, eliminate the single point of failure and you will
mitigate whole families of possible attacks,
from "NSA compromised the hardware random number generator in my CPU" to
"NSA is listening to EMF
radiation coming from my dedicated server in my data center" to the much
more likely "data center employee
is tricked into letting somebody have access to my dedicated server."

-- 
--
Gavin Andresen
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140325/b9e8b67a/attachment.html>

From mike at plan99.net  Tue Mar 25 15:20:05 2014
From: mike at plan99.net (Mike Hearn)
Date: Tue, 25 Mar 2014 16:20:05 +0100
Subject: [Bitcoin-development] Tree-chains preliminary summary
In-Reply-To: <20140325134918.GB7929@savin>
References: <20140322084702.GA13436@savin> <20140322150836.GG3180@nl.grid.coop>
	<20140322190825.GB6047@savin> <532DE7E6.4050304@monetize.io>
	<20140325122851.GA9818@savin>
	<CABsx9T149f9of9+sYMFazAxtRi=ZJrpA1B41buERD3+j7NGKmg@mail.gmail.com>
	<20140325134918.GB7929@savin>
Message-ID: <CANEZrP16pR0pJmZaD5JgCHf9WKjcMAxyuNz2iieuOE6G9E0KkA@mail.gmail.com>

A few months ago I had a conversation with an executive at a Bitcoin
company, and I suggested their developers should get involved with the
development list. I was told that they are all subscribed but refuse to
post. Puzzled, I asked why, maybe the process isn't clear or we didn't talk
about what they were interested in? No, it's because in that executives
words "They see how Peter Todd shoots people down in flames and want
nothing to do with that".

Peter, you were named explicitly as the source of the problem. Your
immediate knee-jerk reaction to anyone who disagrees with you is making
this forum aggressive and ugly - it puts other people off from
contributing. For what it's worth, if I were the moderator of this list I
would have banned you a long time ago because I value a friendly atmosphere
more than your "insights", which are often deeply suspect (as in this case).

Besides, ground up redesigns of Bitcoin like what you propose are more
appropriate for bitcointalk. So please take it there.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140325/fae160ae/attachment.html>

From pete at petertodd.org  Tue Mar 25 16:47:46 2014
From: pete at petertodd.org (Peter Todd)
Date: Tue, 25 Mar 2014 12:47:46 -0400
Subject: [Bitcoin-development] Tree-chains preliminary summary
In-Reply-To: <CANEZrP16pR0pJmZaD5JgCHf9WKjcMAxyuNz2iieuOE6G9E0KkA@mail.gmail.com>
References: <20140322084702.GA13436@savin> <20140322150836.GG3180@nl.grid.coop>
	<20140322190825.GB6047@savin> <532DE7E6.4050304@monetize.io>
	<20140325122851.GA9818@savin>
	<CABsx9T149f9of9+sYMFazAxtRi=ZJrpA1B41buERD3+j7NGKmg@mail.gmail.com>
	<20140325134918.GB7929@savin>
	<CANEZrP16pR0pJmZaD5JgCHf9WKjcMAxyuNz2iieuOE6G9E0KkA@mail.gmail.com>
Message-ID: <0eba07b6-ef9a-4115-8233-92f0203e434d@email.android.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256

For the record, tree chains is designed to be a soft-fork upgrade to bitcoin, at least if we can get the economics to work out. Assuming it does, you would do this by defining bitcoin itself to be the top level chain, and carrying what appear to be anyone can spend txouts from block to block so that transaction outputs can be created when funds are redeemed in the top block chain from children lower in the tree. Very similar ideas as the chain to chain stuff via spv proofs that Mark and Adam were talking about here earlier, although I think the order and reorganisation guarantees is a big advantage over their unsynched chain model. Most of the other ideas are identical, and they deserve credit.

I'm on the currency design panel at the Princeton Bitcoin Research Conference this week - tree chains will be discussed informally if not on the panel itself.

Regarding cryptocurrency research related posts, the feedback I've gotten has always been quite positive. You are in the minority as far as I can tell, and anyway the volume of such posts is a small part of the total list volume.


As for the rest of your email, doctor, heal thyself. Gavin's constant namecalling of legit and well accepted scaling concerns as FUD has irritated many people for over a year now,  among many other things. Statements similar to what you claim are said about me are also often said to me about you and Gavin.

But anyway, reply off list please.

On 25 March 2014 11:20:05 GMT-04:00, Mike Hearn <mike at plan99.net> wrote:
>A few months ago I had a conversation with an executive at a Bitcoin
>company, and I suggested their developers should get involved with the
>development list. I was told that they are all subscribed but refuse to
>post. Puzzled, I asked why, maybe the process isn't clear or we didn't
>talk
>about what they were interested in? No, it's because in that executives
>words "They see how Peter Todd shoots people down in flames and want
>nothing to do with that".
>
>Peter, you were named explicitly as the source of the problem. Your
>immediate knee-jerk reaction to anyone who disagrees with you is making
>this forum aggressive and ugly - it puts other people off from
>contributing. For what it's worth, if I were the moderator of this list
>I
>would have banned you a long time ago because I value a friendly
>atmosphere
>more than your "insights", which are often deeply suspect (as in this
>case).
>
>Besides, ground up redesigns of Bitcoin like what you propose are more
>appropriate for bitcointalk. So please take it there.
-----BEGIN PGP SIGNATURE-----
Version: APG v1.0.9

iQFQBAEBCAA6BQJTMbMyMxxQZXRlciBUb2RkIChsb3cgc2VjdXJpdHkga2V5KSA8
cGV0ZUBwZXRlcnRvZGQub3JnPgAKCRAZnIM7qOfwheooB/9pKwUKLni8ZBPfe7qQ
e3dTTWXeottw1dOT1iUDvk2VVRe0ou38UZhqVQTr9KL3sf6OKsijwb7mgPdoSolA
ZJ30mPk68KPMdmESfDeXvl8l/hdXCdI1mHmeAcUwirH85eVc9olBL5AKOpfIFtPx
ReagvnMVy5nWguGnRNq4O3A5G7BBcFWnIhTjj656Hsqywf0j2l9P+JcgSpHhOupF
q/v6Ybeae5UJHmINMA9Mw5isZT1uFGDxYPoG6xvz0/O/gaPVTXNQiQJa9rq9v0wp
+EQEF5br+wN1VmBQOYV+6ig5Ttz4s4i+tCyVIZPF5HKmipBuK+mtDT81dqxRqh7q
dF86
=37x3
-----END PGP SIGNATURE-----




From jgarzik at bitpay.com  Tue Mar 25 17:37:00 2014
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Tue, 25 Mar 2014 13:37:00 -0400
Subject: [Bitcoin-development] Tree-chains preliminary summary
In-Reply-To: <20140325134918.GB7929@savin>
References: <20140322084702.GA13436@savin> <20140322150836.GG3180@nl.grid.coop>
	<20140322190825.GB6047@savin> <532DE7E6.4050304@monetize.io>
	<20140325122851.GA9818@savin>
	<CABsx9T149f9of9+sYMFazAxtRi=ZJrpA1B41buERD3+j7NGKmg@mail.gmail.com>
	<20140325134918.GB7929@savin>
Message-ID: <CAJHLa0PR8v2FobPUsO73BKpvBZ3M2Zsx1F9SVGVb6TKv6zsjWw@mail.gmail.com>

On Tue, Mar 25, 2014 at 9:49 AM, Peter Todd <pete at petertodd.org> wrote:
> For someone with 'Chief Scientist' as their job title, I'm surprised you
> think so little of hard evidence and so much of idol worshipping.

Peter, take this unprofessional, personal crap off-list.

Mike's anecdote of hostility is not an isolated one.  Just today, a
bitcore developer commented on "Peter Todd's ..apocalyptic vision
and... negative view on bitcoin" which turned off some other
developers from participating more interactively.

As I commented on IRC, open source projects are no strangers to people
who simultaneously (a) make useful contributions and (b) turn
potential contributors away with an abrasive or hostile attitude
toward others.  It's an unsolved problem in OSS, that I saw for 15+
years in the Linux kernel community.

For this list, as Mike suggested on IRC, introducing an openly stated
moderation policy may be the one route.

-- 
Jeff Garzik
Bitcoin core developer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From etotheipi at gmail.com  Tue Mar 25 18:02:03 2014
From: etotheipi at gmail.com (Alan Reiner)
Date: Tue, 25 Mar 2014 14:02:03 -0400
Subject: [Bitcoin-development] Tree-chains preliminary summary
In-Reply-To: <CAJHLa0PR8v2FobPUsO73BKpvBZ3M2Zsx1F9SVGVb6TKv6zsjWw@mail.gmail.com>
References: <20140322084702.GA13436@savin>
	<20140322150836.GG3180@nl.grid.coop>	<20140322190825.GB6047@savin>
	<532DE7E6.4050304@monetize.io>	<20140325122851.GA9818@savin>	<CABsx9T149f9of9+sYMFazAxtRi=ZJrpA1B41buERD3+j7NGKmg@mail.gmail.com>	<20140325134918.GB7929@savin>
	<CAJHLa0PR8v2FobPUsO73BKpvBZ3M2Zsx1F9SVGVb6TKv6zsjWw@mail.gmail.com>
Message-ID: <5331C49B.2000709@gmail.com>

I would echo the need for some kind of moderation. 

I believe Peter Todd is an extremely intelligent individual, who has a
lot to offer the Bitcoin community.  He has a firm grasp of a lot of
really deep Bitcoin concepts and his *technical* insight is generally
positive.  Technically.  But the way he communicates on this list is
*extremely* corrosive and breeds hostility.  It makes it a scary place
to discuss things, with frequent, public ridicule of everything posted. 

I agree that I would rather have a friendly environment to discuss
technicals, even if it means losing additional technical insight. 
People who would explicitly insult other contributors intelligence and
character on a public list should be subject to some kind of negative
reinforcement.   Maybe there's solutions other than outright banning.

-Alan



On 03/25/2014 01:37 PM, Jeff Garzik wrote:
> On Tue, Mar 25, 2014 at 9:49 AM, Peter Todd <pete at petertodd.org> wrote:
>> For someone with 'Chief Scientist' as their job title, I'm surprised you
>> think so little of hard evidence and so much of idol worshipping.
> Peter, take this unprofessional, personal crap off-list.
>
> Mike's anecdote of hostility is not an isolated one.  Just today, a
> bitcore developer commented on "Peter Todd's ..apocalyptic vision
> and... negative view on bitcoin" which turned off some other
> developers from participating more interactively.
>
> As I commented on IRC, open source projects are no strangers to people
> who simultaneously (a) make useful contributions and (b) turn
> potential contributors away with an abrasive or hostile attitude
> toward others.  It's an unsolved problem in OSS, that I saw for 15+
> years in the Linux kernel community.
>
> For this list, as Mike suggested on IRC, introducing an openly stated
> moderation policy may be the one route.
>




From slush at centrum.cz  Tue Mar 25 18:13:36 2014
From: slush at centrum.cz (slush)
Date: Tue, 25 Mar 2014 19:13:36 +0100
Subject: [Bitcoin-development] Tree-chains preliminary summary
In-Reply-To: <5331C49B.2000709@gmail.com>
References: <20140322084702.GA13436@savin> <20140322150836.GG3180@nl.grid.coop>
	<20140322190825.GB6047@savin> <532DE7E6.4050304@monetize.io>
	<20140325122851.GA9818@savin>
	<CABsx9T149f9of9+sYMFazAxtRi=ZJrpA1B41buERD3+j7NGKmg@mail.gmail.com>
	<20140325134918.GB7929@savin>
	<CAJHLa0PR8v2FobPUsO73BKpvBZ3M2Zsx1F9SVGVb6TKv6zsjWw@mail.gmail.com>
	<5331C49B.2000709@gmail.com>
Message-ID: <CAJna-HhL7StCb9pwKC22V3GZeDUEOBGaY6tCvv-Jk=5WOuek4Q@mail.gmail.com>

I fully agree, please keep friendly environment on this list. Btw I also
met people who were making fun about Peter's reactions on bitcoin-dev.

slush


On Tue, Mar 25, 2014 at 7:02 PM, Alan Reiner <etotheipi at gmail.com> wrote:

> I would echo the need for some kind of moderation.
>
> I believe Peter Todd is an extremely intelligent individual, who has a
> lot to offer the Bitcoin community.  He has a firm grasp of a lot of
> really deep Bitcoin concepts and his *technical* insight is generally
> positive.  Technically.  But the way he communicates on this list is
> *extremely* corrosive and breeds hostility.  It makes it a scary place
> to discuss things, with frequent, public ridicule of everything posted.
>
> I agree that I would rather have a friendly environment to discuss
> technicals, even if it means losing additional technical insight.
> People who would explicitly insult other contributors intelligence and
> character on a public list should be subject to some kind of negative
> reinforcement.   Maybe there's solutions other than outright banning.
>
> -Alan
>
>
>
> On 03/25/2014 01:37 PM, Jeff Garzik wrote:
> > On Tue, Mar 25, 2014 at 9:49 AM, Peter Todd <pete at petertodd.org> wrote:
> >> For someone with 'Chief Scientist' as their job title, I'm surprised you
> >> think so little of hard evidence and so much of idol worshipping.
> > Peter, take this unprofessional, personal crap off-list.
> >
> > Mike's anecdote of hostility is not an isolated one.  Just today, a
> > bitcore developer commented on "Peter Todd's ..apocalyptic vision
> > and... negative view on bitcoin" which turned off some other
> > developers from participating more interactively.
> >
> > As I commented on IRC, open source projects are no strangers to people
> > who simultaneously (a) make useful contributions and (b) turn
> > potential contributors away with an abrasive or hostile attitude
> > toward others.  It's an unsolved problem in OSS, that I saw for 15+
> > years in the Linux kernel community.
> >
> > For this list, as Mike suggested on IRC, introducing an openly stated
> > moderation policy may be the one route.
> >
>
>
>
> ------------------------------------------------------------------------------
> Learn Graph Databases - Download FREE O'Reilly Book
> "Graph Databases" is the definitive new guide to graph databases and their
> applications. Written by three acclaimed leaders in the field,
> this first edition is now available. Download your free book today!
> http://p.sf.net/sfu/13534_NeoTech
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140325/5e203215/attachment.html>

From pete at petertodd.org  Tue Mar 25 19:47:15 2014
From: pete at petertodd.org (Peter Todd)
Date: Tue, 25 Mar 2014 15:47:15 -0400
Subject: [Bitcoin-development] Tree-chains preliminary summary
In-Reply-To: <CAJna-HhL7StCb9pwKC22V3GZeDUEOBGaY6tCvv-Jk=5WOuek4Q@mail.gmail.com>
References: <20140322084702.GA13436@savin> <20140322150836.GG3180@nl.grid.coop>
	<20140322190825.GB6047@savin> <532DE7E6.4050304@monetize.io>
	<20140325122851.GA9818@savin>
	<CABsx9T149f9of9+sYMFazAxtRi=ZJrpA1B41buERD3+j7NGKmg@mail.gmail.com>
	<20140325134918.GB7929@savin>
	<CAJHLa0PR8v2FobPUsO73BKpvBZ3M2Zsx1F9SVGVb6TKv6zsjWw@mail.gmail.com>
	<5331C49B.2000709@gmail.com>
	<CAJna-HhL7StCb9pwKC22V3GZeDUEOBGaY6tCvv-Jk=5WOuek4Q@mail.gmail.com>
Message-ID: <9e0d85b1-a9a3-4198-b048-63359e871eb1@email.android.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256

OK, deal. You guys stop calling my concerns FUD, accusing me of having ulterior motives, etc. and I'll pay the same respect to you.


On 25 March 2014 14:13:36 GMT-04:00, slush <slush at centrum.cz> wrote:
>I fully agree, please keep friendly environment on this list. Btw I
>also
>met people who were making fun about Peter's reactions on bitcoin-dev.
>
>slush
>
>
>On Tue, Mar 25, 2014 at 7:02 PM, Alan Reiner <etotheipi at gmail.com>
>wrote:
>
>> I would echo the need for some kind of moderation.
>>
>> I believe Peter Todd is an extremely intelligent individual, who has
>a
>> lot to offer the Bitcoin community.  He has a firm grasp of a lot of
>> really deep Bitcoin concepts and his *technical* insight is generally
>> positive.  Technically.  But the way he communicates on this list is
>> *extremely* corrosive and breeds hostility.  It makes it a scary
>place
>> to discuss things, with frequent, public ridicule of everything
>posted.
>>
>> I agree that I would rather have a friendly environment to discuss
>> technicals, even if it means losing additional technical insight.
>> People who would explicitly insult other contributors intelligence
>and
>> character on a public list should be subject to some kind of negative
>> reinforcement.   Maybe there's solutions other than outright banning.
>>
>> -Alan
>>
>>
>>
>> On 03/25/2014 01:37 PM, Jeff Garzik wrote:
>> > On Tue, Mar 25, 2014 at 9:49 AM, Peter Todd <pete at petertodd.org>
>wrote:
>> >> For someone with 'Chief Scientist' as their job title, I'm
>surprised you
>> >> think so little of hard evidence and so much of idol worshipping.
>> > Peter, take this unprofessional, personal crap off-list.
>> >
>> > Mike's anecdote of hostility is not an isolated one.  Just today, a
>> > bitcore developer commented on "Peter Todd's ..apocalyptic vision
>> > and... negative view on bitcoin" which turned off some other
>> > developers from participating more interactively.
>> >
>> > As I commented on IRC, open source projects are no strangers to
>people
>> > who simultaneously (a) make useful contributions and (b) turn
>> > potential contributors away with an abrasive or hostile attitude
>> > toward others.  It's an unsolved problem in OSS, that I saw for 15+
>> > years in the Linux kernel community.
>> >
>> > For this list, as Mike suggested on IRC, introducing an openly
>stated
>> > moderation policy may be the one route.
>> >
>>
>>
>>
>>
>------------------------------------------------------------------------------
>> Learn Graph Databases - Download FREE O'Reilly Book
>> "Graph Databases" is the definitive new guide to graph databases and
>their
>> applications. Written by three acclaimed leaders in the field,
>> this first edition is now available. Download your free book today!
>> http://p.sf.net/sfu/13534_NeoTech
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>
>
>
>------------------------------------------------------------------------
>
>------------------------------------------------------------------------------
>Learn Graph Databases - Download FREE O'Reilly Book
>"Graph Databases" is the definitive new guide to graph databases and
>their
>applications. Written by three acclaimed leaders in the field,
>this first edition is now available. Download your free book today!
>http://p.sf.net/sfu/13534_NeoTech
>
>------------------------------------------------------------------------
>
>_______________________________________________
>Bitcoin-development mailing list
>Bitcoin-development at lists.sourceforge.net
>https://lists.sourceforge.net/lists/listinfo/bitcoin-development
-----BEGIN PGP SIGNATURE-----
Version: APG v1.0.9

iQFQBAEBCAA6BQJTMd1DMxxQZXRlciBUb2RkIChsb3cgc2VjdXJpdHkga2V5KSA8
cGV0ZUBwZXRlcnRvZGQub3JnPgAKCRAZnIM7qOfwhb89B/98Tb0Xncho+1cbja1K
R9xYOKPhWU5EIuPr7zbpuQxufuM8hZsyFSo/ptnQnJ8EAJ2GvUUEnE2vDDjvqqJm
vy5URtOwKc6ztBDrjtWToKCgBwpJTektWrJMu2FQaO5CV/4sHhVM4By8BoDvCNLt
xeN7BccjvlDZ+2ggRaYt4P/QKctEyt9qZrdDmIsNxUa+bLzplHoqdoQMjQ2CUcUA
T+/Lq7MH+vROJXqx7d3JSsZAQ59evQDyorvCrxNgfVbB7j10t1zr5r5viWUEDtZ5
/9DAP92vpSCokmKWfSlysHbC4KEqWglWka7aSBLXmAVrJeFxJRojsLQbCKUUFrG0
IigO
=91oy
-----END PGP SIGNATURE-----




From ricardojdfilipe at gmail.com  Tue Mar 25 20:40:40 2014
From: ricardojdfilipe at gmail.com (Ricardo Filipe)
Date: Tue, 25 Mar 2014 20:40:40 +0000
Subject: [Bitcoin-development] Tree-chains preliminary summary
In-Reply-To: <20140325134918.GB7929@savin>
References: <20140322084702.GA13436@savin> <20140322150836.GG3180@nl.grid.coop>
	<20140322190825.GB6047@savin> <532DE7E6.4050304@monetize.io>
	<20140325122851.GA9818@savin>
	<CABsx9T149f9of9+sYMFazAxtRi=ZJrpA1B41buERD3+j7NGKmg@mail.gmail.com>
	<20140325134918.GB7929@savin>
Message-ID: <CALC81CPrzRPsMcw2CLOFhDJx8We_cUQ7OW1OnkoDvLz4Uum_Cw@mail.gmail.com>

2014-03-25 13:49 GMT+00:00 Peter Todd <pete at petertodd.org>:
> On Tue, Mar 25, 2014 at 08:45:00AM -0400, Gavin Andresen wrote:
>> On Tue, Mar 25, 2014 at 8:28 AM, Peter Todd <pete at petertodd.org> wrote:
>>
>> > Bitcoin doesn't scale. There's a lot of issues at hand here, but the
>> > most fundemental of them is that to create a block you need to update
>> > the state of the UTXO set, and the way Bitcoin is designed means that
>> > updating that state requires bandwidth equal to all the transaction
>> > volume to keep up with the changes to what set. Long story short, we get
>> > O(n^2) scaling, which is just plain infeasible.
>> >
>>
>> We have a fundamental disagreement here.
>>
>> If you go back and read Satoshi's original thoughts on scaling, it is clear
>> that he imagined tens of thousands of mining nodes and hundreds of millions
>> of lightweight SPV users.
>
> Yeah, about that...
>
> https://blockchain.info/pools
>

On-topic:
This argument is quite the fallacy. The only reason we have that few
pools is because each of their miners doesn't find it feasible to mine
"on their own". if you count the individual miners on those pools you
will get to the scale Gavin was trying to point out.

Nevertheless i think that is just a minor disagreement, since tree
chains help decentralization.

> For someone with 'Chief Scientist' as their job title, I'm surprised you
> think so little of hard evidence and so much of idol worshipping.
>
>
> P.S. A year or so ago you complained that if I cared so much about
> decentralization, I should make P2Pool better. Your homework: What do
> tree-chains and Andrew Miller's non-outsourcable puzzles(1) have to do
> with that? What about the cube-square law? And why don't I think TXO
> commitments solve the blocksize problem?
>
> 1) https://bitcointalk.org/index.php?topic=309073.0;all
>
> --
> 'peter'[:-1]@petertodd.org
> 000000000000000020366a15799010ae0432be831c197e06b19133028a9aa6f3
>
> ------------------------------------------------------------------------------
> Learn Graph Databases - Download FREE O'Reilly Book
> "Graph Databases" is the definitive new guide to graph databases and their
> applications. Written by three acclaimed leaders in the field,
> this first edition is now available. Download your free book today!
> http://p.sf.net/sfu/13534_NeoTech
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>



From mark at monetize.io  Tue Mar 25 21:03:57 2014
From: mark at monetize.io (Mark Friedenbach)
Date: Tue, 25 Mar 2014 14:03:57 -0700
Subject: [Bitcoin-development] Tree-chains preliminary summary
In-Reply-To: <20140325122851.GA9818@savin>
References: <20140322084702.GA13436@savin> <20140322150836.GG3180@nl.grid.coop>
	<20140322190825.GB6047@savin> <532DE7E6.4050304@monetize.io>
	<20140325122851.GA9818@savin>
Message-ID: <5331EF3D.4000504@monetize.io>

I'm afraid I'm going to be the jerk that requested more details and then
only nitpicks seemingly minor points in your introduction. But its
because I need more time to digest the contents of your proposal. Until
then:

> But moving value between chains is inconvenient; right now moving
> value requires trusted third parties. Two-way atomic chain transfers
> does help here, but as recent discussions on the topic showed there's
> all sorts of edge cases with reorganizations that are tricky to 
> handle; at worst they could lead to inflation.

This isn't true. The re-org issue is fairly handled in the 2-way pegging
scheme that Greg Maxwell developed and Adam Back described a week ago on
this list. Depending on the implementation it could even be configurable
by the person performing the peg too - allowing the transfer to specify
the confirmation depth required during the quieting period in order to
protect against re-orgs up to a sufficient depth. I think this is worked
out quite well with sufficient enumeration of edge cases, and I don't
think they are particularly tricky to handle or lead to money-losing
situations under the explicit security assumptions.

More importantly, to your last point there is absolutely no way this
scheme can lead to inflation. The worst that could happen is theft of
coins willingly put into the pegging pool. But in no way is it possible
to inflate the coin supply.

I will look at your proposal in more depth. But I also think you should
give 2-way pegging a fair shake as pegging to side chains and private
accounting servers may eliminate the need.



From hozer at hozed.org  Tue Mar 25 21:41:17 2014
From: hozer at hozed.org (Troy Benjegerdes)
Date: Tue, 25 Mar 2014 16:41:17 -0500
Subject: [Bitcoin-development] Tree-chains preliminary summary
In-Reply-To: <9e0d85b1-a9a3-4198-b048-63359e871eb1@email.android.com>
References: <20140322150836.GG3180@nl.grid.coop> <20140322190825.GB6047@savin>
	<532DE7E6.4050304@monetize.io> <20140325122851.GA9818@savin>
	<CABsx9T149f9of9+sYMFazAxtRi=ZJrpA1B41buERD3+j7NGKmg@mail.gmail.com>
	<20140325134918.GB7929@savin>
	<CAJHLa0PR8v2FobPUsO73BKpvBZ3M2Zsx1F9SVGVb6TKv6zsjWw@mail.gmail.com>
	<5331C49B.2000709@gmail.com>
	<CAJna-HhL7StCb9pwKC22V3GZeDUEOBGaY6tCvv-Jk=5WOuek4Q@mail.gmail.com>
	<9e0d85b1-a9a3-4198-b048-63359e871eb1@email.android.com>
Message-ID: <20140325214117.GY3180@nl.grid.coop>

Peter,

I think you and I both know there is WAAYY to much MONEY to be taken
from naive end-users by the companies that employ people who call
your concerns FUD.

And for everyone else, I want to apologize in advance for anything
I might happen to say that might be abrasive, arrogant, angry, or 
'in need of moderation'. So for those who do not wish to hear or 
read such things, delete my message now.

===================
disclaimer: strong language follows
===================





What the fuck Groupthink?
committee for GROUPTHINKPROFIT?

I'd rather have Peter Todd calling some developers idiots on the 
list than some fucking idiots who get paid way to fucking much 
calling 'end-users' stupid for believing MtGox. Hell, I was one
of these idiots that fell for a marketing scam by a company that
had a good story.


But here is the damn point. The Excecutive who was whining about 
how his devs won't show up should probably consider hiring people
who make VOCAL points on the mailing list. Or maybe he should 
consider that his developers might know his business model is
shit and if they DID say something, it would be CLEAR to the 
world that only an idiot would use their companies services, and
kill the company.

Would you rather hear of vulnerabilities and scaling limits on 
bitcoin-development, or would you rather hear about them by a 
chorus of "They got hacked, their code must suck", but AFTER 
the fact.

It seems to be an unfortunate fact of life that sleazy people
take a shitload of money from nice people. Moderate Peter and
I into oblivion at your own risk. Wouldn't you rather have us
pointing out obvious flaws than ignoring shit?

... But just remember, your employers probably make more money
by ignoring shit....

On Tue, Mar 25, 2014 at 03:47:15PM -0400, Peter Todd wrote:
> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA256
> 
> OK, deal. You guys stop calling my concerns FUD, accusing me of having ulterior motives, etc. and I'll pay the same respect to you.
> 
> 
> On 25 March 2014 14:13:36 GMT-04:00, slush <slush at centrum.cz> wrote:
> >I fully agree, please keep friendly environment on this list. Btw I
> >also
> >met people who were making fun about Peter's reactions on bitcoin-dev.
> >
> >slush
> >
> >
> >On Tue, Mar 25, 2014 at 7:02 PM, Alan Reiner <etotheipi at gmail.com>
> >wrote:
> >
> >> I would echo the need for some kind of moderation.
> >>
> >> I believe Peter Todd is an extremely intelligent individual, who has
> >a
> >> lot to offer the Bitcoin community.  He has a firm grasp of a lot of
> >> really deep Bitcoin concepts and his *technical* insight is generally
> >> positive.  Technically.  But the way he communicates on this list is
> >> *extremely* corrosive and breeds hostility.  It makes it a scary
> >place
> >> to discuss things, with frequent, public ridicule of everything
> >posted.
> >>
> >> I agree that I would rather have a friendly environment to discuss
> >> technicals, even if it means losing additional technical insight.
> >> People who would explicitly insult other contributors intelligence
> >and
> >> character on a public list should be subject to some kind of negative
> >> reinforcement.   Maybe there's solutions other than outright banning.
> >>
> >> -Alan
> >>
> >>
> >>
> >> On 03/25/2014 01:37 PM, Jeff Garzik wrote:
> >> > On Tue, Mar 25, 2014 at 9:49 AM, Peter Todd <pete at petertodd.org>
> >wrote:
> >> >> For someone with 'Chief Scientist' as their job title, I'm
> >surprised you
> >> >> think so little of hard evidence and so much of idol worshipping.
> >> > Peter, take this unprofessional, personal crap off-list.
> >> >
> >> > Mike's anecdote of hostility is not an isolated one.  Just today, a
> >> > bitcore developer commented on "Peter Todd's ..apocalyptic vision
> >> > and... negative view on bitcoin" which turned off some other
> >> > developers from participating more interactively.
> >> >
> >> > As I commented on IRC, open source projects are no strangers to
> >people
> >> > who simultaneously (a) make useful contributions and (b) turn
> >> > potential contributors away with an abrasive or hostile attitude
> >> > toward others.  It's an unsolved problem in OSS, that I saw for 15+
> >> > years in the Linux kernel community.
> >> >
> >> > For this list, as Mike suggested on IRC, introducing an openly
> >stated
> >> > moderation policy may be the one route.
> >> >
> >>
> >>
> >>
> >>
> >------------------------------------------------------------------------------
> >> Learn Graph Databases - Download FREE O'Reilly Book
> >> "Graph Databases" is the definitive new guide to graph databases and
> >their
> >> applications. Written by three acclaimed leaders in the field,
> >> this first edition is now available. Download your free book today!
> >> http://p.sf.net/sfu/13534_NeoTech
> >> _______________________________________________
> >> Bitcoin-development mailing list
> >> Bitcoin-development at lists.sourceforge.net
> >> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> >>
> >
> >
> >------------------------------------------------------------------------
> >
> >------------------------------------------------------------------------------
> >Learn Graph Databases - Download FREE O'Reilly Book
> >"Graph Databases" is the definitive new guide to graph databases and
> >their
> >applications. Written by three acclaimed leaders in the field,
> >this first edition is now available. Download your free book today!
> >http://p.sf.net/sfu/13534_NeoTech
> >
> >------------------------------------------------------------------------
> >
> >_______________________________________________
> >Bitcoin-development mailing list
> >Bitcoin-development at lists.sourceforge.net
> >https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> -----BEGIN PGP SIGNATURE-----
> Version: APG v1.0.9
> 
> iQFQBAEBCAA6BQJTMd1DMxxQZXRlciBUb2RkIChsb3cgc2VjdXJpdHkga2V5KSA8
> cGV0ZUBwZXRlcnRvZGQub3JnPgAKCRAZnIM7qOfwhb89B/98Tb0Xncho+1cbja1K
> R9xYOKPhWU5EIuPr7zbpuQxufuM8hZsyFSo/ptnQnJ8EAJ2GvUUEnE2vDDjvqqJm
> vy5URtOwKc6ztBDrjtWToKCgBwpJTektWrJMu2FQaO5CV/4sHhVM4By8BoDvCNLt
> xeN7BccjvlDZ+2ggRaYt4P/QKctEyt9qZrdDmIsNxUa+bLzplHoqdoQMjQ2CUcUA
> T+/Lq7MH+vROJXqx7d3JSsZAQ59evQDyorvCrxNgfVbB7j10t1zr5r5viWUEDtZ5
> /9DAP92vpSCokmKWfSlysHbC4KEqWglWka7aSBLXmAVrJeFxJRojsLQbCKUUFrG0
> IigO
> =91oy
> -----END PGP SIGNATURE-----
> 
> 
> ------------------------------------------------------------------------------
> Learn Graph Databases - Download FREE O'Reilly Book
> "Graph Databases" is the definitive new guide to graph databases and their
> applications. Written by three acclaimed leaders in the field,
> this first edition is now available. Download your free book today!
> http://p.sf.net/sfu/13534_NeoTech
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development

-- 
----------------------------------------------------------------------------
Troy Benjegerdes                 'da hozer'                  hozer at hozed.org
7 elements      earth::water::air::fire::mind::spirit::soul        grid.coop

      Never pick a fight with someone who buys ink by the barrel,
         nor try buy a hacker who makes money by the megahash




From hozer at hozed.org  Tue Mar 25 22:00:02 2014
From: hozer at hozed.org (Troy Benjegerdes)
Date: Tue, 25 Mar 2014 17:00:02 -0500
Subject: [Bitcoin-development] Tree-chains preliminary summary
In-Reply-To: <CALC81CPrzRPsMcw2CLOFhDJx8We_cUQ7OW1OnkoDvLz4Uum_Cw@mail.gmail.com>
References: <20140322084702.GA13436@savin> <20140322150836.GG3180@nl.grid.coop>
	<20140322190825.GB6047@savin> <532DE7E6.4050304@monetize.io>
	<20140325122851.GA9818@savin>
	<CABsx9T149f9of9+sYMFazAxtRi=ZJrpA1B41buERD3+j7NGKmg@mail.gmail.com>
	<20140325134918.GB7929@savin>
	<CALC81CPrzRPsMcw2CLOFhDJx8We_cUQ7OW1OnkoDvLz4Uum_Cw@mail.gmail.com>
Message-ID: <20140325220002.GZ3180@nl.grid.coop>

On Tue, Mar 25, 2014 at 08:40:40PM +0000, Ricardo Filipe wrote:
> 2014-03-25 13:49 GMT+00:00 Peter Todd <pete at petertodd.org>:
> > On Tue, Mar 25, 2014 at 08:45:00AM -0400, Gavin Andresen wrote:
> >> On Tue, Mar 25, 2014 at 8:28 AM, Peter Todd <pete at petertodd.org> wrote:
> >>
> >> > Bitcoin doesn't scale. There's a lot of issues at hand here, but the
> >> > most fundemental of them is that to create a block you need to update
> >> > the state of the UTXO set, and the way Bitcoin is designed means that
> >> > updating that state requires bandwidth equal to all the transaction
> >> > volume to keep up with the changes to what set. Long story short, we get
> >> > O(n^2) scaling, which is just plain infeasible.
> >> >
> >>
> >> We have a fundamental disagreement here.
> >>
> >> If you go back and read Satoshi's original thoughts on scaling, it is clear
> >> that he imagined tens of thousands of mining nodes and hundreds of millions
> >> of lightweight SPV users.
> >
> > Yeah, about that...
> >
> > https://blockchain.info/pools
> >
> 
> On-topic:
> This argument is quite the fallacy. The only reason we have that few
> pools is because each of their miners doesn't find it feasible to mine
> "on their own". if you count the individual miners on those pools you
> will get to the scale Gavin was trying to point out.
> 
> Nevertheless i think that is just a minor disagreement, since tree
> chains help decentralization.

I think is actually a major fundamental disagreement, and opinions
tend to correlate strongly with salary considerations.

"It is difficult to get a man to understand something, when his salary
depends upon his not understanding it!" -- Upton Sinclair

Let us either agree to disagree, or get on with moderating this list 
so that only sensible salaried discussions can take place.



From pete at petertodd.org  Tue Mar 25 22:05:07 2014
From: pete at petertodd.org (Peter Todd)
Date: Tue, 25 Mar 2014 18:05:07 -0400
Subject: [Bitcoin-development] Privacy-Protecting Proof of Reserves without
 the Moon-Math and without the backup angst
Message-ID: <20140325220507.GB4846@tilt>

Introduction
------------

In the wake of the Mt. Gox debacle merkle-sum-trees for
proof-of-reserve(1) have been getting attention again. A serious
objection to using them is exchange privacy as the merkle-sum-tree
inherently reveals the sum total of all deposits held by a given
service. A second, lesser, consideration is the privacy of the users'
balances, as changes to those balances are reflected in the tree and
various levels of aggregate information can be extracted from the
solvency proofs. For instance consider how an attacker who had knowledge
of a few balance changes to a particular user's account - perhaps
because that attacker had deposited funds themselves - could then
corrolate those balance changes with changes in merkle path proofs to
determine an upper bound on the victim's total balance. With some effort
and/or luck that upper bound could be even improved to the exact account
balance by obtaining a solvency proof from an account adjacent to the
victim's account.

Real or imagined the privacy problems with merkle-sum-trees pose a
barrier to adoption. Jesse from the exchange Kraken stated recently(2)
on reddit:

    This is asking a lot of an exchange, and I don't think information
    is worth the price you're paying in security and privacy. Your
    interests would be better served by a private auditor's report.

While there has been much discussion recently on #bitcoin-wizards and
other places about applying advanced cryptographic techniques - so
called "Moon Math" - generate zero-knowledge-proofs of blinded account
sum trees so as to not leak any information, these techniques all suffer
from implementation complexity. Fortunately private proof-of-solvency
without moon math is possible without significant increase in
complexity.


Objectives
----------

First let's look at what exactly it is that our proof-of-solvency is
supposed to achieve. For expediency we'll refer to the third-parties
proving solvency as 'banks' and start with the big picture:

0) No more banks stealing everyone's money!

Of course, since the banks have the private keys to the bitcoins in
question the best we can actually do is much weaker:

1) Prove that at some point in the past, the bank had access to a
   private key that can be used to spend unspent txout(s) that still
   exists now.

Note how the bank may have since lost that key! But objective #1 isn't
good enough by itself; we also need to:

2) Prove that those txout(s) have no been re-used in any other proof of
   solvency or ownership.

Most discussions about merkle-sum-trees miss this critical point. To see
why it matters, consider the example of BigBank. They have a very simple
proof-of-solvency scheme where they simply allocate one address per
customer, holding at least their entire balance. To prove their solvency
to Alice they simply sign a message:

    $ btc verifymessage 13pPCfupiDhWadEXTZDnqSHm5Cy2rdUDho \
      ID6Wk3SDsg3os4cSWRtG13lODY84zoVYpfEC2Y4kfHqGqqZV9hy1xD5yRKCyjL0II3UwPirEVKxm5meJ3VVDW/0= \
      "Hi Alice"

    true

Alice checks that the txouts with that address sum up to at least as
many Bitcoins as her balance, sees that it does, and is satisfied
BigBank is solvent.

Meanwhile LittleBank is running short of funds, so they decide to
"borrow" some from BigBank. One of their customers, Bob, asks for a
proof-of-solvency for his balance, and LittleBank happily obliges:

    $ btc verifymessage 13pPCfupiDhWadEXTZDnqSHm5Cy2rdUDho \
      H9af7wCdJrVIPG5Z0qrSviwAsElPkGw9v5FrUBAdaBtpeEtP/G8UdwN6KxKOytqyU7ObzcQs3qa6urHceZIXDg4= \
      "Hi Bob"

    true

It's rather unlikely that Alice and Bob will compare notes so this
reuse-fraud goes undetected.


Solving txout reuse-fraud with per-txout commitments
----------------------------------------------------

By committing the txout to one and only one purpose we can ensure that
they can't be reused for more than one proof-of-solvency. Take the
following scriptPubKey:

    H("bigbank.com") DROP <pubkey> CHECKSIG

LittleBank in our above example can't reuse that txout as it is
obviously not committed to them. The additional data is kinda ugly and
lacks privacy but can be replaced with the same math used in BIP32 HD
wallet derivation:

    <pubkey + H(domain)*G> CHECKSIG

or in the multisig case:

    n <pubkey_1 + H(domain)*G> ... <pubkey_m + H(domain)*G> m CHECKMULTISIG

The "domain" must be provably globally unique; the URL of the third-party
would be appropriate in most cases. A simple random UUID is *not*
sufficient as there is no good way to be sure that these UUIDs have not
been reused.


Internal reuse-fraud
--------------------

Suppose BigBank gains a second customer, Bob. After depositing some
funds he asks for a proof-of-solvency. BigBank has since added
anti-reuse-fraud to their very simple one-address-per-customer scheme:

    $ btc verifymessage 1HHuBBExHYqPwfgmKiBEHAGFSaLSdVayh5 \
      H6IJztw/QM4WjbtHl51WFo5L8rXn5aONZZvpQIo/8ORz7Yx0puLD68Z2WOCmAEvFQfpz0wYSX3D28RhevYBexpQ= \
      "Hi Bob"

    true

Bob then goes and verifies that the address 1HHuBBE was derived from the
domain "bigbank.com", and finally verifies that the funds held at that
address are sufficient to cover his balance.

Alice does the same thing:

    $ btc verifymessage 1HHuBBExHYqPwfgmKiBEHAGFSaLSdVayh5 \
      H5Z1LEwagAx7s1Kj21sy98/i6/DEZpyyGDfauDVfwOUE2ewsuHqSAE1txRi5VltBs5zVoMExxMw/m4JAyXBSa+s= \
      "Hi Alice"

    true

Note that the addresses are the same! Again, BigBank has committed
re-use fraud, this time internal to the service. In our simplistic
example of one address per customer the domain the funds are committed
to could be extended to include Alice and Bob's usernames or email
addresses. Again, most discussions of merkle-sum-trees gloss over this
important point, and assume that "somehow" the bank will publish the
merkle root publicly, e.g. at a URL.


Merkle-sum-forests for proof-of-solvency
----------------------------------------

Rather than having a single massive tree for all accounts we can instead
use a forrest of merkle-sum-trees, each committed to by a single txout.
The leaves of that tree are still the hash of a customer ID and nonce,
and a balance. However now the root of the tree and the bank domain is
committed to in a txout. To prove solvency the bank gives the customer
multiple merkle-paths that together sum up to the total balance held on
their behalf. Both internal and external reuse-fraud are impossible as
the funds are committed to the customer in question on the blockchain.
Privacy is protected for both the exchange and the customer. The former
because there is no need to reveal total holdings. The latter by
splitting up the holdings among multiple tree - in many cases a given
tree might only have one or two customers funds committed by it as well.

However the requirement to actually make a transaction to change the
balances committed to is inconvenient, potentially expensive, and makes
the so-called "cold storage" warmer.


Indirect merkle-sum-forest solvency proofs
------------------------------------------

By adding indirection we can get the privacy of the merkle-sum-forest
approach without the requirement of creating blockchain transactions on
every proof. Simply stated, if the above merkle-sum-forest is just
committing to arbitrary nonces, we can create a second, ordered,
merklized binary radix tree whose keys are those nonces, and whose
values are what customers have been assigned to the funds committed to
by the txouts associated with the nonces. Proving to the customer their
funds are backed by actual Bitcoins is then a matter of given them a
list of nonce inclusion proofs, as well as the merkle-paths proving
those nonces lead to actual blockchain funds. Since the lookup tree is
ordered each nonce may only be assigned to one specific customer.

Lets look at this in detail with BigBank as the exchange, and Alice and
Bob as the customers. For clarity we'll use OP_DROP as before. We'll say
BigBank has one txout:

    <h1> DROP <pubkey1> CHECKSIG

Where h1 commits to (v1,H(n1 | 'BigBank')), (v2, H(n2 | 'BigBank')),
(v3, H(n3 | BigBank)) with v's being values and n's being nonces.
Alices's total balance is equal to v1+v2, and Bob's equal to v3, so she
creates nonce->customer radix tree mapping n1->Alice, n2->Alice, and
n3->Chalie. She publishes the root of this tree publicly and
non-repudatably.

BigBank's proof for Bob is now the two following subproofs:

    Merkle path proving that n3 in nonce->customer tree
    Merkle sum path proving that v3 allocated in txout

For Alice the proof is as above, except for n1,v1 and n2,v2.


Practical Considerations
------------------------

1) Customers request deposit addresses, but the exchange doesn't know in
   advance how much they are going to deposit. Those addresses should
   commit values and nonces for use in the solvency proof, so we need to
   define a merkle-sum-tree that operates on relative amounts rather
   than absolute.

2) We'd rather not have to spend a txout just to "make change" when a
   customer's balance changes internally. Thus rather than, say, a
   simple binary of two value decomposition in a txout, consider making
   available duplicate values. Q) What's optimal here? Real world data
   would help.


Deterministic nonces and backups
--------------------------------

There needs to be care taken in how nonces are generated - losing a
nonce can mean losing the ability to spend the txout. What should be
done is for the merkle-sum-trees per txout be generated deterministicly
using "sufficient" sub values to allocate change... Which leads to a
curious final conclusion: we can in reality skip the actual
merkle-sum-trees, so to speak, and derive the actual nonces committed to
in the nonce->customer tree from some deterministic splitting algorithm
and the globally unique txout, specifically H("nonce" | txid:n).
Essentially the nonce->customer mapping is actually a "part of a
txout"->customer mapping, where every txout value is split into
convenient-sized change. We still get the privacy we want, because the
customer-containing tree is not a merkle-sum tree, and we completely
prevent fraudulent reuse, and we don't risk losing coins in the event of
a backup failure as all txout scriptPubKeys can be regenerated
deterministicly from a seed.


Future work
-----------

Implement this.


References
----------

1) https://iwilcox.me.uk/2014/proving-bitcoin-reserves
2) http://www.reddit.com/r/Bitcoin/comments/1yk4nv/please_ask_your_favorite_exchange_to_prove_that/cflqtn0
3) Homomorphic Payment Addresses and the Pay-to-Contract Protocol,
   Ilja Gerhardt, Timo Hanke, 13 Dec 2012


Copyright
---------

This document is placed in the public domain.

-- 
'peter'[:-1]@petertodd.org
000000000000000039d6ffee2cd4a4162ad9bdb665abeb5f916af96dbd0b83f9
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 665 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140325/e21dd655/attachment.sig>

From hozer at hozed.org  Tue Mar 25 22:10:54 2014
From: hozer at hozed.org (Troy Benjegerdes)
Date: Tue, 25 Mar 2014 17:10:54 -0500
Subject: [Bitcoin-development] Handling miner adoption gracefully for
 embedded consensus systems via double-spending/replace-by-fee
In-Reply-To: <53309C2A.4040406@monetize.io>
References: <20140322084702.GA13436@savin>
	<CAC1+kJNh=7yhmAdFHFv9VBJOOMhen6nwr=U9peG2J_7EovPqxA@mail.gmail.com>
	<20140322193435.GC6047@savin>
	<CAC1+kJNOuCpUPDiaBNR40T12W3MwUXpXp+PCTLhHyQwyc+8BqA@mail.gmail.com>
	<20140323231737.GM3180@nl.grid.coop> <532F740C.9010800@monetize.io>
	<20140324203403.GR3180@nl.grid.coop> <53309C2A.4040406@monetize.io>
Message-ID: <20140325221054.GA3180@nl.grid.coop>

On Mon, Mar 24, 2014 at 01:57:14PM -0700, Mark Friedenbach wrote:
> On 03/24/2014 01:34 PM, Troy Benjegerdes wrote:
> > I'm here because I want to sell corn for bitcoin, and I believe it will be
> > more profitable for me to do that with a bitcoin-blockchain-based system
> > in which I have the capability to audit the code that executes the trade.
> 
> A discussion over such a system would be on-topic. Indeed I have made my
> own proposals for systems with that capability in the past:
> 
> http://sourceforge.net/p/bitcoin/mailman/message/31322676/
> 
> There's no reason to invoke alts however. There are ways where this can
> be done within the bitcoin ecosystem, using bitcoins:
> 
> http://sourceforge.net/p/bitcoin/mailman/message/32108143/
> 
> > I think that's fair, so long as we limit bitcoin-development discussion to
> > issues that are relevant to the owners of the hashrate and companies that
> > pay developer salaries.
> > 
> > What I'm asking for is some honesty that Bitcoin is a centralized system
> > and to stop arguing technical points on the altar of distributed/decentralized
> > whatever. It's pretty clear if you want decentralized you should go with 
> > altchains.
> 
> Bitcoin is not a centralized system, and neither is its development. I
> don't even know how to respond to that. Bringing up altchains is a total
> red herring.
> 
> This is *bitcoin*-development. Please don't make it have to become a
> moderated mailing list.

When I can pick up a miner at Best Buy and pay it off in 9 months I'll 
agree with you that bitcoin *might* be decentralized. Maybe there's a 
chance this *will* happen eventually, but right now we have a couple of
mining cartels that control most of the hashrate.

There are plenty of interesting alt-hash-chains for which mass produced,
general purpose (or gpgpu-purpose) hardware exists and is in high volume
mass production.





From gmaxwell at gmail.com  Tue Mar 25 22:34:31 2014
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Tue, 25 Mar 2014 15:34:31 -0700
Subject: [Bitcoin-development] Tree-chains preliminary summary
In-Reply-To: <5331EF3D.4000504@monetize.io>
References: <20140322084702.GA13436@savin> <20140322150836.GG3180@nl.grid.coop>
	<20140322190825.GB6047@savin> <532DE7E6.4050304@monetize.io>
	<20140325122851.GA9818@savin> <5331EF3D.4000504@monetize.io>
Message-ID: <CAAS2fgTovm7OtFFqdRYWDw5KxV+r5WD598JPnG5ydMYAs_gQWg@mail.gmail.com>

On Tue, Mar 25, 2014 at 2:03 PM, Mark Friedenbach <mark at monetize.io> wrote:
> More importantly, to your last point there is absolutely no way this
> scheme can lead to inflation. The worst that could happen is theft of
> coins willingly put into the pegging pool. But in no way is it possible
> to inflate the coin supply.

I don't think it would be entirely unfair to describe one of the
possible ways a secondary coin becoming unbacked can play out as
inflation? after all, people have described altcoins as inflation. In
the worst case its no _worse_ inflation, I think, than an altcoin is?
however.

> I will look at your proposal in more depth. But I also think you should
> give 2-way pegging a fair shake as pegging to side chains and private
> accounting servers may eliminate the need.

I think that chain geometries which improve the scale/decentralization
trade-off are complementary. If PT's ideas here do amount to something
that gives better scaling without ugly compromise I believe it would
still be useful no matter how well the 2-way peg stuff works simply
because scaling and decenteralization are both good things which we
would pretty much always want more of...



From bitcoin-devel at jerviss.org  Wed Mar 26 01:09:01 2014
From: bitcoin-devel at jerviss.org (kjj)
Date: Tue, 25 Mar 2014 20:09:01 -0500
Subject: [Bitcoin-development] Handling miner adoption gracefully for
 embedded consensus systems via double-spending/replace-by-fee
In-Reply-To: <20140325221054.GA3180@nl.grid.coop>
References: <20140322084702.GA13436@savin>	<CAC1+kJNh=7yhmAdFHFv9VBJOOMhen6nwr=U9peG2J_7EovPqxA@mail.gmail.com>	<20140322193435.GC6047@savin>	<CAC1+kJNOuCpUPDiaBNR40T12W3MwUXpXp+PCTLhHyQwyc+8BqA@mail.gmail.com>	<20140323231737.GM3180@nl.grid.coop>
	<532F740C.9010800@monetize.io>	<20140324203403.GR3180@nl.grid.coop>
	<53309C2A.4040406@monetize.io> <20140325221054.GA3180@nl.grid.coop>
Message-ID: <533228AD.6090909@jerviss.org>

Troy Benjegerdes wrote:
> Mark Friedenbach wrote:
>> Bitcoin is not a centralized system, and neither is its development. I
>> don't even know how to respond to that. Bringing up altchains is a total
>> red herring.
>>
>> This is *bitcoin*-development. Please don't make it have to become a
>> moderated mailing list.
> When I can pick up a miner at Best Buy and pay it off in 9 months I'll
> agree with you that bitcoin *might* be decentralized. Maybe there's a
> chance this *will* happen eventually, but right now we have a couple of
> mining cartels that control most of the hashrate.
>
> There are plenty of interesting alt-hash-chains for which mass produced,
> general purpose (or gpgpu-purpose) hardware exists and is in high volume
> mass production.
Decentralized doesn't mean "everyone is doing it", it means "no one can 
stop you from doing it".  Observe bitcoin development.  A few people do 
the bulk of the work, a bunch more people (like me) do work ranging from 
minor to trivial, and millions do nothing.  And yet, it is still totally 
decentralized because no one can stop anyone from making whatever 
changes they want.

So it is also with mining.  The world overall may make it impractical, 
perhaps even foolish, for you to fire up your CPU and mine solo, but no 
one is stopping you, and more to the point, no one is capable of 
stopping you.  There is no center from which you must ask permission.

On moderation, I note that moderation can also be done in a 
decentralized fashion.  I offer this long overdue example:

:0
* ^From.*hozer at hozed.org
/dev/null



From pete at petertodd.org  Wed Mar 26 10:48:52 2014
From: pete at petertodd.org (Peter Todd)
Date: Wed, 26 Mar 2014 06:48:52 -0400
Subject: [Bitcoin-development] Tree-chains preliminary summary
In-Reply-To: <CAAS2fgTovm7OtFFqdRYWDw5KxV+r5WD598JPnG5ydMYAs_gQWg@mail.gmail.com>
	<5331EF3D.4000504@monetize.io>
Message-ID: <20140326104852.GB26997@tilt>

On Tue, Mar 25, 2014 at 02:03:57PM -0700, Mark Friedenbach wrote:
> > But moving value between chains is inconvenient; right now moving
> > value requires trusted third parties. Two-way atomic chain transfers
> > does help here, but as recent discussions on the topic showed there's
> > all sorts of edge cases with reorganizations that are tricky to 
> > handle; at worst they could lead to inflation.
> 
> This isn't true. The re-org issue is fairly handled in the 2-way pegging
> scheme that Greg Maxwell developed and Adam Back described a week ago on
> this list. Depending on the implementation it could even be configurable
> by the person performing the peg too - allowing the transfer to specify
> the confirmation depth required during the quieting period in order to
> protect against re-orgs up to a sufficient depth. I think this is worked
> out quite well with sufficient enumeration of edge cases, and I don't
> think they are particularly tricky to handle or lead to money-losing
> situations under the explicit security assumptions.
> 
> More importantly, to your last point there is absolutely no way this
> scheme can lead to inflation. The worst that could happen is theft of
> coins willingly put into the pegging pool. But in no way is it possible
> to inflate the coin supply.

I see your point, but gmaxwell accurately guesses below that when I'm
talking about inflation, I'm including the inflation of the alt too.
With tree-chains that's particularly obvious as the scheme doesn't try
to privilege one chain over another beyond parent-child relationships.


Incidentally, I understand that the pegged chains are meant to be
merge-mined. To me this seems problematic and cheap to attack. Consider
a merge-mined zerocoin sidechain: Can you profit from depositing some
coins, taking them out again, then reorging the zerocoin chain to undo
that withdrawl on the zerocoin side, and performing it all over again?
It'd be easy to drain the pegging pool that way, and with merge-mining
there's no inherent cost to you to do so. Not unique to zerocoin either
of course, just in that case who actually double-spent is unknowable.

> I will look at your proposal in more depth. But I also think you should
> give 2-way pegging a fair shake as pegging to side chains and private
> accounting servers may eliminate the need.

Well I'll certainly raid 2-way pegging for ideas. :) I think the big
difference between the two is how I'd like to see tree-chains reduce
dependence on miner validation - ideally miners wouldn't validate at all
if the efficiency can be regained with ZK-SNARKS or something. Dropping
validation from mining could also avoid the problem of how in Bitcoin
there is no explicit mechanism that actually forces miners to validate
the chain. Not unlike gmaxwell's "firedrill" ideas, you would be able to
"firedrill" clients at any point by just mining some invalid garage.

(not to say miners would certainly not do validation - you still want to
be able to pay them transaction fees, but in that case they're doing the
validation only for themselves)


On Tue, Mar 25, 2014 at 03:34:31PM -0700, Gregory Maxwell wrote:
> On Tue, Mar 25, 2014 at 2:03 PM, Mark Friedenbach <mark at monetize.io> wrote:
> > More importantly, to your last point there is absolutely no way this
> > scheme can lead to inflation. The worst that could happen is theft of
> > coins willingly put into the pegging pool. But in no way is it possible
> > to inflate the coin supply.
> 
> I don't think it would be entirely unfair to describe one of the
> possible ways a secondary coin becoming unbacked can play out as
> inflation? after all, people have described altcoins as inflation. In
> the worst case its no _worse_ inflation, I think, than an altcoin is?
> however.

Yup, and in the tree-chains model, every single chain is, from that
perspective, an altcoin.

-- 
'peter'[:-1]@petertodd.org
0000000000000000f4f5ba334791a4102917e4d3f22f6ad7f2c4f15d97307fe2
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 665 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140326/bf85169b/attachment.sig>

From pete at petertodd.org  Wed Mar 26 10:58:02 2014
From: pete at petertodd.org (Peter Todd)
Date: Wed, 26 Mar 2014 06:58:02 -0400
Subject: [Bitcoin-development] Tree-chains preliminary summary
In-Reply-To: <CALC81CPrzRPsMcw2CLOFhDJx8We_cUQ7OW1OnkoDvLz4Uum_Cw@mail.gmail.com>
References: <20140322084702.GA13436@savin> <20140322150836.GG3180@nl.grid.coop>
	<20140322190825.GB6047@savin> <532DE7E6.4050304@monetize.io>
	<20140325122851.GA9818@savin>
	<CABsx9T149f9of9+sYMFazAxtRi=ZJrpA1B41buERD3+j7NGKmg@mail.gmail.com>
	<20140325134918.GB7929@savin>
	<CALC81CPrzRPsMcw2CLOFhDJx8We_cUQ7OW1OnkoDvLz4Uum_Cw@mail.gmail.com>
Message-ID: <20140326105802.GC26997@tilt>

On Tue, Mar 25, 2014 at 08:40:40PM +0000, Ricardo Filipe wrote:
> 2014-03-25 13:49 GMT+00:00 Peter Todd <pete at petertodd.org>:
> > On Tue, Mar 25, 2014 at 08:45:00AM -0400, Gavin Andresen wrote:
> >> On Tue, Mar 25, 2014 at 8:28 AM, Peter Todd <pete at petertodd.org> wrote:
> >>
> >> > Bitcoin doesn't scale. There's a lot of issues at hand here, but the
> >> > most fundemental of them is that to create a block you need to update
> >> > the state of the UTXO set, and the way Bitcoin is designed means that
> >> > updating that state requires bandwidth equal to all the transaction
> >> > volume to keep up with the changes to what set. Long story short, we get
> >> > O(n^2) scaling, which is just plain infeasible.
> >> >
> >>
> >> We have a fundamental disagreement here.
> >>
> >> If you go back and read Satoshi's original thoughts on scaling, it is clear
> >> that he imagined tens of thousands of mining nodes and hundreds of millions
> >> of lightweight SPV users.
> >
> > Yeah, about that...
> >
> > https://blockchain.info/pools
> >
> 
> On-topic:
> This argument is quite the fallacy. The only reason we have that few
> pools is because each of their miners doesn't find it feasible to mine
> "on their own". if you count the individual miners on those pools you
> will get to the scale Gavin was trying to point out.

Yeah, that's part of my fundemental disagreement with him: I draw a
sharp line between mining - the act of validating and constructing new
blocks - and hashing - the act of solving proof-of-work problems. The
latter definitely has incentives to decentralize due to simple physics:
it's cheaper per unit hashing power to get rid of a small amount of
waste heat than a large amount. The former requires a full node, and
that full node is a fixed cost overhead related to the number of
transactions per second. Any fixed cost overhead discourages
decentralization, and encourages centralization.

> Nevertheless i think that is just a minor disagreement, since tree
> chains help decentralization.

Yup. Quite importantly, the model is for any one miner to be able to
fully participate at the same level as any other miner by mining some
section of the tree. As your reward is linked to blocks mined, there
will always be some level at which you are mining blocks at a reasonably
low variance and you don't need to join a pool to achieve that low
varience. Equally your resources to keep up with that part of the tree
can be made reasonably low, and that cost only grows at the log of the
total transaction volume.

-- 
'peter'[:-1]@petertodd.org
0000000000000000f4f5ba334791a4102917e4d3f22f6ad7f2c4f15d97307fe2
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 665 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140326/c336d5ee/attachment.sig>

From mike at plan99.net  Wed Mar 26 13:07:10 2014
From: mike at plan99.net (Mike Hearn)
Date: Wed, 26 Mar 2014 14:07:10 +0100
Subject: [Bitcoin-development] Sudden temporary drop in reachable nodes?
Message-ID: <CANEZrP2HuZc_5E0o5T6DUOvmFr8qmYrhPC9S-VAhJWmA=CbtDA@mail.gmail.com>

Hey Addy,

I am seeing a big drop in reachable nodes on
http://getaddr.bitnodes.io/dashboard/ starting from about March 25th 7:20pm
and coming back 9:35pm. Is this a glitch in the monitoring system or did
some real network event happen then?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140326/fcc49608/attachment.html>

From ayeowch at gmail.com  Wed Mar 26 20:10:56 2014
From: ayeowch at gmail.com (Addy Yeow)
Date: Thu, 27 Mar 2014 07:10:56 +1100
Subject: [Bitcoin-development] Sudden temporary drop in reachable nodes?
In-Reply-To: <CANEZrP2HuZc_5E0o5T6DUOvmFr8qmYrhPC9S-VAhJWmA=CbtDA@mail.gmail.com>
References: <CANEZrP2HuZc_5E0o5T6DUOvmFr8qmYrhPC9S-VAhJWmA=CbtDA@mail.gmail.com>
Message-ID: <CAA3bHnzvOj7yjgLJ_fsZN1f1Mjp+QTE_=iaC=O_V1KTii79Y3w@mail.gmail.com>

Hi Mike,

That was because I had to restart the crawler for update. This disconnects
the crawler from all reachable nodes temporarily and it will take about 15
minutes (3 snapshots) before the crawler stabilize again. I will look into
annotating these drops with a note.

Cheers,
Addy


On Thu, Mar 27, 2014 at 12:07 AM, Mike Hearn <mike at plan99.net> wrote:

> Hey Addy,
>
> I am seeing a big drop in reachable nodes on
> http://getaddr.bitnodes.io/dashboard/ starting from about March 25th
> 7:20pm and coming back 9:35pm. Is this a glitch in the monitoring system or
> did some real network event happen then?
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140327/77d802c0/attachment.html>

From mike at plan99.net  Wed Mar 26 20:49:39 2014
From: mike at plan99.net (Mike Hearn)
Date: Wed, 26 Mar 2014 21:49:39 +0100
Subject: [Bitcoin-development] New BIP32 structure
Message-ID: <CANEZrP2hbBVGqytmXR1rAcVama4ONnR586Se-Ch=dsxOzy2O4w@mail.gmail.com>

Myself, Thomas V (Electrum) and Marek (Trezor) got together to make sure
our BIP32 wallet structures would be compatible - and I discovered that
only I was planning to use the default structure.

Because I'm hopeful that we can get a lot of interoperability between
wallets with regards to importing 12-words paper wallets, we brainstormed
to find a structure acceptable to everyone and ended up with:

  /m/cointype/reserved'/account'/change/n

The extra levels require some explanation:

   - cointype:  This is zero for Bitcoin. This is here to support two
   things, one is supporting alt coins based off the same root seed. Right now
   nobody seemed very bothered about alt coins but sometimes feature requests
   do come in for this. Arguably there is no need and alt coins could just use
   the same keys as Bitcoin, but it may help avoid confusion if they don't.

   More usefully, cointype can distinguish between keys intended for things
   like multisig outputs, e.g. for watchdog services. This means if your
   wallet does not know about the extra protocol layers involved in this, it
   can still import the "raw" money and it will just ignore/not see the keys
   used in more complex transactions.

   - reserved is for "other stuff". I actually don't recall why we ended up
   with this. It may have been intended to split out multisig outputs etc from
   cointype. Marek, Thomas?

   - account is for keeping essentially wallets-within-a-wallet to avoid
   mixing of coins. If you want that.

   - change is 0 for receiving addresses, 1 for change addresses.

   - n is the actual key index

For bitcoinj we're targeting a deliberately limited feature set for hdw v1
so I would just set the first three values all to zero and that is a
perfectly fine way to be compatible.

The goal here is that the same seed can be written down once, and meet all
the users needs, whilst still allowing some drift between what wallets
support.

Pieter made the I think valid point that you can't really encode how keys
are meant to be used into just an HDW hierarchy and normally you'd need
some metadata as well. However, I feel interop between wallets is more
important than arriving at the most perfect possible arrangement, which
feels a little like bikeshedding, so I'm happy to just go with the flow on
this one.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140326/ed7506b1/attachment.html>

From roy at gnomon.org.uk  Wed Mar 26 22:48:26 2014
From: roy at gnomon.org.uk (Roy Badami)
Date: Wed, 26 Mar 2014 22:48:26 +0000
Subject: [Bitcoin-development] Payment Protocol for Face-to-face Payments
In-Reply-To: <CANEZrP3kHRJ6U-O_Jgei4U6s9GyQGvB_p5ChtcHJEkYR0wWPvQ@mail.gmail.com>
References: <leuunm$tjk$1@ger.gmane.org>
	<CANEZrP3nQfvDArKTRgje0Cus4G2JD_zpxSjA3fXfxM2TNAP80Q@mail.gmail.com>
	<CALDj+BafD+6KTNcYDBEu5gNPzYozSkiC-JCxrY-PzXL2DYBRsw@mail.gmail.com>
	<CAJHLa0N4J_Z907+D0ENSNKfNAW2N=7Jf4JzSCO=SU558GtGTzA@mail.gmail.com>
	<lge7nk$3mf$2@ger.gmane.org>
	<CANEZrP0J849oDvMWjf8LWi0xj44Q8DaUwDip5_smVBMNgeQ3mw@mail.gmail.com>
	<CALDj+BZJ0rSKuDHdbL7ANN0Vtaa3-KGYgusqMDzzB-CUxjMz7g@mail.gmail.com>
	<CANEZrP3szn=oQS+ZuqSzjUoSAjtkyPxPWJFaU1vDW43dRNVeNQ@mail.gmail.com>
	<20140320215208.GC88006@giles.gnomon.org.uk>
	<CANEZrP3kHRJ6U-O_Jgei4U6s9GyQGvB_p5ChtcHJEkYR0wWPvQ@mail.gmail.com>
Message-ID: <20140326224826.GE62995@giles.gnomon.org.uk>

On Fri, Mar 21, 2014 at 12:02:44AM +0100, Mike Hearn wrote:
> >
> > It's not unusual, in a face-to-face transaction at a bricks-and-mortar
> > establishment, that you know neither the legal name of the entity
> > running the establishment
> 
> 
> I'd hope that people can get certs for their actual business name, but
> sometimes it does differ yes.

The actual example I was thinking of is that of traditional British
pubs.  Often a company will own several pubs - however the pubs
themselves will typically have individual traditional pub names.  The
name of the company might not be at all prominently advertised in the
pubs.

Traders at music festivals are another example that comes to mind (they
often accept credit cards if they sell higher value items so why not
Bitcoin?)  In this example there often are no clearly advertised
business names - at least, that the customer will be aware of.

roy



From mike at plan99.net  Wed Mar 26 22:56:57 2014
From: mike at plan99.net (Mike Hearn)
Date: Wed, 26 Mar 2014 23:56:57 +0100
Subject: [Bitcoin-development] Payment Protocol for Face-to-face Payments
In-Reply-To: <20140326224826.GE62995@giles.gnomon.org.uk>
References: <leuunm$tjk$1@ger.gmane.org>
	<CANEZrP3nQfvDArKTRgje0Cus4G2JD_zpxSjA3fXfxM2TNAP80Q@mail.gmail.com>
	<CALDj+BafD+6KTNcYDBEu5gNPzYozSkiC-JCxrY-PzXL2DYBRsw@mail.gmail.com>
	<CAJHLa0N4J_Z907+D0ENSNKfNAW2N=7Jf4JzSCO=SU558GtGTzA@mail.gmail.com>
	<lge7nk$3mf$2@ger.gmane.org>
	<CANEZrP0J849oDvMWjf8LWi0xj44Q8DaUwDip5_smVBMNgeQ3mw@mail.gmail.com>
	<CALDj+BZJ0rSKuDHdbL7ANN0Vtaa3-KGYgusqMDzzB-CUxjMz7g@mail.gmail.com>
	<CANEZrP3szn=oQS+ZuqSzjUoSAjtkyPxPWJFaU1vDW43dRNVeNQ@mail.gmail.com>
	<20140320215208.GC88006@giles.gnomon.org.uk>
	<CANEZrP3kHRJ6U-O_Jgei4U6s9GyQGvB_p5ChtcHJEkYR0wWPvQ@mail.gmail.com>
	<20140326224826.GE62995@giles.gnomon.org.uk>
Message-ID: <CANEZrP2HtJsOf5zOsPz32U=Jot7U9k80yEu=hj5uMPkRC+WGsQ@mail.gmail.com>

Yeah, for those cases we'd need to think of something else. That gets into
the realm of creating our own infrastructure though ...
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140326/d11a9f65/attachment.html>

From andreas at schildbach.de  Wed Mar 26 23:20:49 2014
From: andreas at schildbach.de (Andreas Schildbach)
Date: Thu, 27 Mar 2014 00:20:49 +0100
Subject: [Bitcoin-development] Payment Protocol for Face-to-face Payments
In-Reply-To: <CANEZrP2HtJsOf5zOsPz32U=Jot7U9k80yEu=hj5uMPkRC+WGsQ@mail.gmail.com>
References: <leuunm$tjk$1@ger.gmane.org>	<CANEZrP3nQfvDArKTRgje0Cus4G2JD_zpxSjA3fXfxM2TNAP80Q@mail.gmail.com>	<CALDj+BafD+6KTNcYDBEu5gNPzYozSkiC-JCxrY-PzXL2DYBRsw@mail.gmail.com>	<CAJHLa0N4J_Z907+D0ENSNKfNAW2N=7Jf4JzSCO=SU558GtGTzA@mail.gmail.com>	<lge7nk$3mf$2@ger.gmane.org>	<CANEZrP0J849oDvMWjf8LWi0xj44Q8DaUwDip5_smVBMNgeQ3mw@mail.gmail.com>	<CALDj+BZJ0rSKuDHdbL7ANN0Vtaa3-KGYgusqMDzzB-CUxjMz7g@mail.gmail.com>	<CANEZrP3szn=oQS+ZuqSzjUoSAjtkyPxPWJFaU1vDW43dRNVeNQ@mail.gmail.com>	<20140320215208.GC88006@giles.gnomon.org.uk>	<CANEZrP3kHRJ6U-O_Jgei4U6s9GyQGvB_p5ChtcHJEkYR0wWPvQ@mail.gmail.com>	<20140326224826.GE62995@giles.gnomon.org.uk>
	<CANEZrP2HtJsOf5zOsPz32U=Jot7U9k80yEu=hj5uMPkRC+WGsQ@mail.gmail.com>
Message-ID: <lgvnc2$eu4$1@ger.gmane.org>

But these cases are the norm, rather than the exception. Of all these
places I spend my money at during the day I hardly ever know their
official name. I'm thinking in terms of "bakery", "indian restaurant" or
"snack vending machine".

In Germany usually businesses are named like the people that run it.
That usually just one or two random family names plus the legal form of
the company.


On 03/26/2014 11:56 PM, Mike Hearn wrote:
> Yeah, for those cases we'd need to think of something else. That gets
> into the realm of creating our own infrastructure though ...
> 
> 
> ------------------------------------------------------------------------------
> 
> 
> 
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 





From andreas at schildbach.de  Wed Mar 26 23:37:46 2014
From: andreas at schildbach.de (Andreas Schildbach)
Date: Thu, 27 Mar 2014 00:37:46 +0100
Subject: [Bitcoin-development] New BIP32 structure
In-Reply-To: <CANEZrP2hbBVGqytmXR1rAcVama4ONnR586Se-Ch=dsxOzy2O4w@mail.gmail.com>
References: <CANEZrP2hbBVGqytmXR1rAcVama4ONnR586Se-Ch=dsxOzy2O4w@mail.gmail.com>
Message-ID: <lgvobr$q44$1@ger.gmane.org>

Thanks for starting the discussion on finding a better structure.

For me, the most important thing is either we're 100% interoperable or
0%. There should not be anything inbetween, as users will delete seeds
without knowing there is still money in them on another implementation.
I heard from multiple sources that using this standard some wallets will
only see a subset of the addresses/keys of some other wallets.
Implementation differences can always happen (and should addresses as
bugs), but I think its unacceptable that this source of issues is by design.

I suggest we agree on an even simpler least common denominator and
wallets that want to implement some feature on top of that can do but
are encouraged to pick a totally different "cointype". I guess that
would mean removing reserved and account.

I'm still thinking it might be a good idea to have a separate chain for
"refunds". Refunds will be rarely used and thus need a much slower
moving window than receiving addresses or change.


On 03/26/2014 09:49 PM, Mike Hearn wrote:
> Myself, Thomas V (Electrum) and Marek (Trezor) got together to make sure
> our BIP32 wallet structures would be compatible - and I discovered that
> only I was planning to use the default structure.
> 
> Because I'm hopeful that we can get a lot of interoperability between
> wallets with regards to importing 12-words paper wallets, we
> brainstormed to find a structure acceptable to everyone and ended up with:
> 
>   /m/cointype/reserved'/account'/change/n
> 
> The extra levels require some explanation:
> 
>   * cointype:  This is zero for Bitcoin. This is here to support two
>     things, one is supporting alt coins based off the same root seed.
>     Right now nobody seemed very bothered about alt coins but sometimes
>     feature requests do come in for this. Arguably there is no need and
>     alt coins could just use the same keys as Bitcoin, but it may help
>     avoid confusion if they don't.
> 
>     More usefully, cointype can distinguish between keys intended for
>     things like multisig outputs, e.g. for watchdog services. This means
>     if your wallet does not know about the extra protocol layers
>     involved in this, it can still import the "raw" money and it will
>     just ignore/not see the keys used in more complex transactions.
> 
>   * reserved is for "other stuff". I actually don't recall why we ended
>     up with this. It may have been intended to split out multisig
>     outputs etc from cointype. Marek, Thomas?
> 
>   * account is for keeping essentially wallets-within-a-wallet to avoid
>     mixing of coins. If you want that.
> 
>   * change is 0 for receiving addresses, 1 for change addresses.
> 
>   * n is the actual key index
> 
> For bitcoinj we're targeting a deliberately limited feature set for hdw
> v1 so I would just set the first three values all to zero and that is a
> perfectly fine way to be compatible.
> 
> The goal here is that the same seed can be written down once, and meet
> all the users needs, whilst still allowing some drift between what
> wallets support.
> 
> Pieter made the I think valid point that you can't really encode how
> keys are meant to be used into just an HDW hierarchy and normally you'd
> need some metadata as well. However, I feel interop between wallets is
> more important than arriving at the most perfect possible arrangement,
> which feels a little like bikeshedding, so I'm happy to just go with the
> flow on this one.
> 
> 
> 
> ------------------------------------------------------------------------------
> 
> 
> 
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 





From etotheipi at gmail.com  Thu Mar 27 01:01:40 2014
From: etotheipi at gmail.com (Alan Reiner)
Date: Wed, 26 Mar 2014 21:01:40 -0400
Subject: [Bitcoin-development] New BIP32 structure
In-Reply-To: <lgvobr$q44$1@ger.gmane.org>
References: <CANEZrP2hbBVGqytmXR1rAcVama4ONnR586Se-Ch=dsxOzy2O4w@mail.gmail.com>
	<lgvobr$q44$1@ger.gmane.org>
Message-ID: <53337874.7010300@gmail.com>

This might be tangential, but the comment about "refund" chains reminded
me.  Armory will be implementing multi-sig/linked wallets where a each
device has a parallel HDW branch and produces P2SH addresses.  For those
types of wallets, I plan to allocate two chains /per signing
authority/.  If you have a shared 2-of-2 wallet split between your phone
and your spouse's phone, your phone would distribute addresses on P2SH
chain 0 and generate change addresses on P2SH chain 1.  Your spouse's
phone would use chains 2 and 3.

So if you and your spouse switch to a new app that supports M-of-N
linked wallets, it should search for coin history along the first 2*N
chains.
-Alan



On 03/26/2014 07:37 PM, Andreas Schildbach wrote:
> Thanks for starting the discussion on finding a better structure.
>
> For me, the most important thing is either we're 100% interoperable or
> 0%. There should not be anything inbetween, as users will delete seeds
> without knowing there is still money in them on another implementation.
> I heard from multiple sources that using this standard some wallets will
> only see a subset of the addresses/keys of some other wallets.
> Implementation differences can always happen (and should addresses as
> bugs), but I think its unacceptable that this source of issues is by design.
>
> I suggest we agree on an even simpler least common denominator and
> wallets that want to implement some feature on top of that can do but
> are encouraged to pick a totally different "cointype". I guess that
> would mean removing reserved and account.
>
> I'm still thinking it might be a good idea to have a separate chain for
> "refunds". Refunds will be rarely used and thus need a much slower
> moving window than receiving addresses or change.
>
>
> On 03/26/2014 09:49 PM, Mike Hearn wrote:
>> Myself, Thomas V (Electrum) and Marek (Trezor) got together to make sure
>> our BIP32 wallet structures would be compatible - and I discovered that
>> only I was planning to use the default structure.
>>
>> Because I'm hopeful that we can get a lot of interoperability between
>> wallets with regards to importing 12-words paper wallets, we
>> brainstormed to find a structure acceptable to everyone and ended up with:
>>
>>   /m/cointype/reserved'/account'/change/n
>>
>> The extra levels require some explanation:
>>
>>   * cointype:  This is zero for Bitcoin. This is here to support two
>>     things, one is supporting alt coins based off the same root seed.
>>     Right now nobody seemed very bothered about alt coins but sometimes
>>     feature requests do come in for this. Arguably there is no need and
>>     alt coins could just use the same keys as Bitcoin, but it may help
>>     avoid confusion if they don't.
>>
>>     More usefully, cointype can distinguish between keys intended for
>>     things like multisig outputs, e.g. for watchdog services. This means
>>     if your wallet does not know about the extra protocol layers
>>     involved in this, it can still import the "raw" money and it will
>>     just ignore/not see the keys used in more complex transactions.
>>
>>   * reserved is for "other stuff". I actually don't recall why we ended
>>     up with this. It may have been intended to split out multisig
>>     outputs etc from cointype. Marek, Thomas?
>>
>>   * account is for keeping essentially wallets-within-a-wallet to avoid
>>     mixing of coins. If you want that.
>>
>>   * change is 0 for receiving addresses, 1 for change addresses.
>>
>>   * n is the actual key index
>>
>> For bitcoinj we're targeting a deliberately limited feature set for hdw
>> v1 so I would just set the first three values all to zero and that is a
>> perfectly fine way to be compatible.
>>
>> The goal here is that the same seed can be written down once, and meet
>> all the users needs, whilst still allowing some drift between what
>> wallets support.
>>
>> Pieter made the I think valid point that you can't really encode how
>> keys are meant to be used into just an HDW hierarchy and normally you'd
>> need some metadata as well. However, I feel interop between wallets is
>> more important than arriving at the most perfect possible arrangement,
>> which feels a little like bikeshedding, so I'm happy to just go with the
>> flow on this one.
>>
>>
>>
>> ------------------------------------------------------------------------------
>>
>>
>>
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>
>
>
> ------------------------------------------------------------------------------
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140326/35055a7c/attachment.html>

From allen.piscitello at gmail.com  Thu Mar 27 01:13:16 2014
From: allen.piscitello at gmail.com (Allen Piscitello)
Date: Wed, 26 Mar 2014 20:13:16 -0500
Subject: [Bitcoin-development] New BIP32 structure
In-Reply-To: <CANEZrP2hbBVGqytmXR1rAcVama4ONnR586Se-Ch=dsxOzy2O4w@mail.gmail.com>
References: <CANEZrP2hbBVGqytmXR1rAcVama4ONnR586Se-Ch=dsxOzy2O4w@mail.gmail.com>
Message-ID: <CAJfRnm7XCZ39t5E1DZvavgtgMPtPCc7RUDpLjgK73vtAEtxJ9w@mail.gmail.com>

For every branch (say multiple accounts), how would a new wallet be able to
know how many sequence items to scan?  It seems like not only do you need
to have standard rules for the hierarchy, but how the usage can be
detected.  The other scanning seems pretty straightforward.  For accounts,
it seems like you could have a situation where you want to initially set up
10 different accounts, but only account #10 gets any transactions.  If a
new wallet was trying to scan with this seed, it would have to know to keep
scanning each account until it found the account.  The user would have to
be responsible for knowing how many accounts there are, or some rules would
need to be in place to not allow creating accounts until earlier accounts
can be proven to have existed in the blockchain.  Or I am missing something.

-Allen

On Wed, Mar 26, 2014 at 3:49 PM, Mike Hearn <mike at plan99.net> wrote:

> Myself, Thomas V (Electrum) and Marek (Trezor) got together to make sure
> our BIP32 wallet structures would be compatible - and I discovered that
> only I was planning to use the default structure.
>
> Because I'm hopeful that we can get a lot of interoperability between
> wallets with regards to importing 12-words paper wallets, we brainstormed
> to find a structure acceptable to everyone and ended up with:
>
>   /m/cointype/reserved'/account'/change/n
>
> The extra levels require some explanation:
>
>    - cointype:  This is zero for Bitcoin. This is here to support two
>    things, one is supporting alt coins based off the same root seed. Right now
>    nobody seemed very bothered about alt coins but sometimes feature requests
>    do come in for this. Arguably there is no need and alt coins could just use
>    the same keys as Bitcoin, but it may help avoid confusion if they don't.
>
>    More usefully, cointype can distinguish between keys intended for
>    things like multisig outputs, e.g. for watchdog services. This means if
>    your wallet does not know about the extra protocol layers involved in this,
>    it can still import the "raw" money and it will just ignore/not see the
>    keys used in more complex transactions.
>
>    - reserved is for "other stuff". I actually don't recall why we ended
>    up with this. It may have been intended to split out multisig outputs etc
>    from cointype. Marek, Thomas?
>
>    - account is for keeping essentially wallets-within-a-wallet to avoid
>    mixing of coins. If you want that.
>
>    - change is 0 for receiving addresses, 1 for change addresses.
>
>    - n is the actual key index
>
> For bitcoinj we're targeting a deliberately limited feature set for hdw v1
> so I would just set the first three values all to zero and that is a
> perfectly fine way to be compatible.
>
> The goal here is that the same seed can be written down once, and meet all
> the users needs, whilst still allowing some drift between what wallets
> support.
>
> Pieter made the I think valid point that you can't really encode how keys
> are meant to be used into just an HDW hierarchy and normally you'd need
> some metadata as well. However, I feel interop between wallets is more
> important than arriving at the most perfect possible arrangement, which
> feels a little like bikeshedding, so I'm happy to just go with the flow on
> this one.
>
>
>
> ------------------------------------------------------------------------------
>
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140326/48a94563/attachment.html>

From hozer at hozed.org  Thu Mar 27 05:34:46 2014
From: hozer at hozed.org (Troy Benjegerdes)
Date: Thu, 27 Mar 2014 00:34:46 -0500
Subject: [Bitcoin-development] New BIP32 structure
In-Reply-To: <CANEZrP2hbBVGqytmXR1rAcVama4ONnR586Se-Ch=dsxOzy2O4w@mail.gmail.com>
References: <CANEZrP2hbBVGqytmXR1rAcVama4ONnR586Se-Ch=dsxOzy2O4w@mail.gmail.com>
Message-ID: <20140327053446.GB3180@nl.grid.coop>

On Wed, Mar 26, 2014 at 09:49:39PM +0100, Mike Hearn wrote:
> Myself, Thomas V (Electrum) and Marek (Trezor) got together to make sure
> our BIP32 wallet structures would be compatible - and I discovered that
> only I was planning to use the default structure.
> 
> Because I'm hopeful that we can get a lot of interoperability between
> wallets with regards to importing 12-words paper wallets, we brainstormed
> to find a structure acceptable to everyone and ended up with:
> 
>   /m/cointype/reserved'/account'/change/n
> 
> The extra levels require some explanation:
> 
>    - cointype:  This is zero for Bitcoin. This is here to support two
>    things, one is supporting alt coins based off the same root seed. Right now
>    nobody seemed very bothered about alt coins but sometimes feature requests
>    do come in for this. Arguably there is no need and alt coins could just use
>    the same keys as Bitcoin, but it may help avoid confusion if they don't.

Using the same keys across different altcoins seems like an exceedingly bad opsec
practice. Cointype is critical, as well as having a predictable and deterministic
mapping of alt coins to Cointype.

What should I be using for Catcoin, for instance? the CAT symbol all the 
exchanges use, or do we set up a 'registry', or some other mechanism?

I'd venture to guess the altcoin market is, or soon will be larger in US
dollar value trade volume than Bitcoin, so *some* of us are quite bothered
by the wailing and gnashing of teeth that occurs on this list at mere thought
of such heresy.


-- 
----------------------------------------------------------------------------
Troy Benjegerdes                 'da hozer'                  hozer at hozed.org
7 elements      earth::water::air::fire::mind::spirit::soul        grid.coop

      Never pick a fight with someone who buys ink by the barrel,
         nor try buy a hacker who makes money by the megahash




From mike at belshe.com  Thu Mar 27 06:15:50 2014
From: mike at belshe.com (Mike Belshe)
Date: Wed, 26 Mar 2014 23:15:50 -0700
Subject: [Bitcoin-development] New BIP32 structure
In-Reply-To: <53337874.7010300@gmail.com>
References: <CANEZrP2hbBVGqytmXR1rAcVama4ONnR586Se-Ch=dsxOzy2O4w@mail.gmail.com>
	<lgvobr$q44$1@ger.gmane.org> <53337874.7010300@gmail.com>
Message-ID: <CABaLYCs0JzNaik8abLu-qeDgRZDu75_oeUGG3SgrQs02U=xvxA@mail.gmail.com>

On Wed, Mar 26, 2014 at 6:01 PM, Alan Reiner <etotheipi at gmail.com> wrote:

>  This might be tangential, but the comment about "refund" chains reminded
> me.  Armory will be implementing multi-sig/linked wallets where a each
> device has a parallel HDW branch and produces P2SH addresses.  For those
> types of wallets, I plan to allocate two chains *per signing authority*.
> If you have a shared 2-of-2 wallet split between your phone and your
> spouse's phone, your phone would distribute addresses on P2SH chain 0 and
> generate change addresses on P2SH chain 1.  Your spouse's phone would use
> chains 2 and 3.
>
> So if you and your spouse switch to a new app that supports M-of-N linked
> wallets, it should search for coin history along the first 2*N chains.
>

In general with multisig, we should probably discourage using a common root
keychain for multiple keys in the same P2SH address.  The reason is because
if you have the single, root private key, you can sign them all. This
generally goes against the point of multisig - which was trying to
introduce a system which had multiple keys required to unlock :-)

For the BitGo BIP32 implementation we are doing the following:
   - users create 2 extended keys
   - bitgo creates 1 extended key for that user
   - the user can create any number of separate branches (accounts) of P2SH
addresses from those extended keys.
   - change/public addresses are generated from the 0/1 branches
   - new addresses are generated from there.
   - each time a new change address is generated, all 3 keys in the P2SH
are rotated.  This makes it so that for any chain depth *i* of the P2SH
address, we're using the *i*th key in each keychain.  For privacy reasons,
we don't need to rotate all keys.  But I think it makes management simpler
and probably more ready for interop.

So the paths in a user's keychain look exactly like BIP32's layout:
     m/<AccountIndex>/<ExternalOrInternal>/<AddressIndex>

Another issue unique to P2SH addresses is order of the keys. There has been
talk in this list of how to sort them.  While sorting is simplifying for
interop if you never use new change addresses, I believe sorting makes
wallet management more difficult when BIP32 is introduced.

Specifically, imagine a P2SH address with keys held by Bob, Charlie, and
Dana.  If you sort the pubkeys, then with each BIP32 chain, the order of
the keys could be different.  By maintaining key order, we always know
which of the pubkeys belongs to which user without having to do any lookups.

Obviously this can all be calculated too.  But the sorting seems gratuitous
to me - it adds complexity but offers little value.  On the other hand, it
can be really handy to know that key #0 for this address is always Bob's
key, regardless of how deep the chaining goes.

Mike



>
> -Alan
>
>
>
>
> On 03/26/2014 07:37 PM, Andreas Schildbach wrote:
>
> Thanks for starting the discussion on finding a better structure.
>
> For me, the most important thing is either we're 100% interoperable or
> 0%. There should not be anything inbetween, as users will delete seeds
> without knowing there is still money in them on another implementation.
> I heard from multiple sources that using this standard some wallets will
> only see a subset of the addresses/keys of some other wallets.
> Implementation differences can always happen (and should addresses as
> bugs), but I think its unacceptable that this source of issues is by design.
>
> I suggest we agree on an even simpler least common denominator and
> wallets that want to implement some feature on top of that can do but
> are encouraged to pick a totally different "cointype". I guess that
> would mean removing reserved and account.
>
> I'm still thinking it might be a good idea to have a separate chain for
> "refunds". Refunds will be rarely used and thus need a much slower
> moving window than receiving addresses or change.
>
>
> On 03/26/2014 09:49 PM, Mike Hearn wrote:
>
>  Myself, Thomas V (Electrum) and Marek (Trezor) got together to make sure
> our BIP32 wallet structures would be compatible - and I discovered that
> only I was planning to use the default structure.
>
> Because I'm hopeful that we can get a lot of interoperability between
> wallets with regards to importing 12-words paper wallets, we
> brainstormed to find a structure acceptable to everyone and ended up with:
>
>   /m/cointype/reserved'/account'/change/n
>
> The extra levels require some explanation:
>
>   * cointype:  This is zero for Bitcoin. This is here to support two
>     things, one is supporting alt coins based off the same root seed.
>     Right now nobody seemed very bothered about alt coins but sometimes
>     feature requests do come in for this. Arguably there is no need and
>     alt coins could just use the same keys as Bitcoin, but it may help
>     avoid confusion if they don't.
>
>     More usefully, cointype can distinguish between keys intended for
>     things like multisig outputs, e.g. for watchdog services. This means
>     if your wallet does not know about the extra protocol layers
>     involved in this, it can still import the "raw" money and it will
>     just ignore/not see the keys used in more complex transactions.
>
>   * reserved is for "other stuff". I actually don't recall why we ended
>     up with this. It may have been intended to split out multisig
>     outputs etc from cointype. Marek, Thomas?
>
>   * account is for keeping essentially wallets-within-a-wallet to avoid
>     mixing of coins. If you want that.
>
>   * change is 0 for receiving addresses, 1 for change addresses.
>
>   * n is the actual key index
>
> For bitcoinj we're targeting a deliberately limited feature set for hdw
> v1 so I would just set the first three values all to zero and that is a
> perfectly fine way to be compatible.
>
> The goal here is that the same seed can be written down once, and meet
> all the users needs, whilst still allowing some drift between what
> wallets support.
>
> Pieter made the I think valid point that you can't really encode how
> keys are meant to be used into just an HDW hierarchy and normally you'd
> need some metadata as well. However, I feel interop between wallets is
> more important than arriving at the most perfect possible arrangement,
> which feels a little like bikeshedding, so I'm happy to just go with the
> flow on this one.
>
>
>
> ------------------------------------------------------------------------------
>
>
>
> _______________________________________________
> Bitcoin-development mailing listBitcoin-development at lists.sourceforge.nethttps://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>  ------------------------------------------------------------------------------
> _______________________________________________
> Bitcoin-development mailing listBitcoin-development at lists.sourceforge.nethttps://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
>
>
> ------------------------------------------------------------------------------
>
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140326/3f6fcb3b/attachment.html>

From tamas at bitsofproof.com  Thu Mar 27 07:09:06 2014
From: tamas at bitsofproof.com (Tamas Blummer)
Date: Thu, 27 Mar 2014 08:09:06 +0100
Subject: [Bitcoin-development] New BIP32 structure
In-Reply-To: <CANEZrP2hbBVGqytmXR1rAcVama4ONnR586Se-Ch=dsxOzy2O4w@mail.gmail.com>
References: <CANEZrP2hbBVGqytmXR1rAcVama4ONnR586Se-Ch=dsxOzy2O4w@mail.gmail.com>
Message-ID: <F2C8C044-EF92-4CCE-9235-28CA7FCE3526@bitsofproof.com>

We had a similar meeting with Andreas Schildbach (Android Bitcoin Wallet), Jan Moller, Andreas  Petersson (Mycelium), Thomas V (Electrum), Tamas Blummer, Tamas Bartfai (Bits of Proof)
at the Inside Bitcoin Conference in Berlin.

I remember that there were different opinions on how to use a hierarchy and it did seem to me they could eventually be "standardized" for the retail customer but definitelly not for corporate use,
where hierarchy will certainly map to organisational hierarchy or cost centres.

A notable suggestion was to instead of building a directory of magic numbers (like 0 for Bitcoin, 1 for Litecoin etc) use a hash of the word "Bitcoin", "Litecoin", "Dogecoin", so collosion is unlikely and
cetral directory is not needed.

Regards,

Tamas Blummer
http://bitsofproof.com

On 26.03.2014, at 21:49, Mike Hearn <mike at plan99.net> wrote:

> Myself, Thomas V (Electrum) and Marek (Trezor) got together to make sure our BIP32 wallet structures would be compatible - and I discovered that only I was planning to use the default structure.
> 
> Because I'm hopeful that we can get a lot of interoperability between wallets with regards to importing 12-words paper wallets, we brainstormed to find a structure acceptable to everyone and ended up with:
> 
>   /m/cointype/reserved'/account'/change/n
> 
> The extra levels require some explanation:
> cointype:  This is zero for Bitcoin. This is here to support two things, one is supporting alt coins based off the same root seed. Right now nobody seemed very bothered about alt coins but sometimes feature requests do come in for this. Arguably there is no need and alt coins could just use the same keys as Bitcoin, but it may help avoid confusion if they don't.
> 
> More usefully, cointype can distinguish between keys intended for things like multisig outputs, e.g. for watchdog services. This means if your wallet does not know about the extra protocol layers involved in this, it can still import the "raw" money and it will just ignore/not see the keys used in more complex transactions.
> 
> reserved is for "other stuff". I actually don't recall why we ended up with this. It may have been intended to split out multisig outputs etc from cointype. Marek, Thomas?
> 
> account is for keeping essentially wallets-within-a-wallet to avoid mixing of coins. If you want that.
> 
> change is 0 for receiving addresses, 1 for change addresses.
> 
> n is the actual key index
> For bitcoinj we're targeting a deliberately limited feature set for hdw v1 so I would just set the first three values all to zero and that is a perfectly fine way to be compatible.
> 
> The goal here is that the same seed can be written down once, and meet all the users needs, whilst still allowing some drift between what wallets support.
> 
> Pieter made the I think valid point that you can't really encode how keys are meant to be used into just an HDW hierarchy and normally you'd need some metadata as well. However, I feel interop between wallets is more important than arriving at the most perfect possible arrangement, which feels a little like bikeshedding, so I'm happy to just go with the flow on this one.
> 
> ------------------------------------------------------------------------------
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140327/6c47bae7/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 495 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140327/6c47bae7/attachment.sig>

From mike at plan99.net  Thu Mar 27 09:42:19 2014
From: mike at plan99.net (Mike Hearn)
Date: Thu, 27 Mar 2014 10:42:19 +0100
Subject: [Bitcoin-development] New BIP32 structure
In-Reply-To: <F2C8C044-EF92-4CCE-9235-28CA7FCE3526@bitsofproof.com>
References: <CANEZrP2hbBVGqytmXR1rAcVama4ONnR586Se-Ch=dsxOzy2O4w@mail.gmail.com>
	<F2C8C044-EF92-4CCE-9235-28CA7FCE3526@bitsofproof.com>
Message-ID: <CANEZrP0t6E5tKk_jcApwa+o4-qBg9uyRnePGarZXeLDxcKS+Rg@mail.gmail.com>

At this point I'm not sure how much further work people want to do on this:
I got the impression that Trezor will ship soon, and Thomas V seemed
satisfied too. I'm not sure we can get all wallets to be fully
interoperable given the flexibility inherent in BIP32 and people's
differing use cases.

Andreas: good point but I really hope nobody ever deletes a seed after all
this work we put in to make backups so easy! I'm not sure we can really
stop it anyway: not unless we make the seed a full blown data structure
with hints to other apps that they should refuse to load it. And it's a bit
late for that now.



On Thu, Mar 27, 2014 at 8:09 AM, Tamas Blummer <tamas at bitsofproof.com>wrote:

> We had a similar meeting with Andreas Schildbach (Android Bitcoin Wallet),
> Jan Moller, Andreas  Petersson (Mycelium), Thomas V (Electrum), Tamas
> Blummer, Tamas Bartfai (Bits of Proof)
> at the Inside Bitcoin Conference in Berlin.
>
> I remember that there were different opinions on how to use a hierarchy
> and it did seem to me they could eventually be "standardized" for the
> retail customer but definitelly not for corporate use,
> where hierarchy will certainly map to organisational hierarchy or cost
> centres.
>
> A notable suggestion was to instead of building a directory of magic
> numbers (like 0 for Bitcoin, 1 for Litecoin etc) use a hash of the word
> "Bitcoin", "Litecoin", "Dogecoin", so collosion is unlikely and
> cetral directory is not needed.
>
> Regards,
>
> Tamas Blummer
> http://bitsofproof.com
>
> On 26.03.2014, at 21:49, Mike Hearn <mike at plan99.net> wrote:
>
> Myself, Thomas V (Electrum) and Marek (Trezor) got together to make sure
> our BIP32 wallet structures would be compatible - and I discovered that
> only I was planning to use the default structure.
>
> Because I'm hopeful that we can get a lot of interoperability between
> wallets with regards to importing 12-words paper wallets, we brainstormed
> to find a structure acceptable to everyone and ended up with:
>
>   /m/cointype/reserved'/account'/change/n
>
> The extra levels require some explanation:
>
>    - cointype:  This is zero for Bitcoin. This is here to support two
>    things, one is supporting alt coins based off the same root seed. Right now
>    nobody seemed very bothered about alt coins but sometimes feature requests
>    do come in for this. Arguably there is no need and alt coins could just use
>    the same keys as Bitcoin, but it may help avoid confusion if they don't.
>
>    More usefully, cointype can distinguish between keys intended for
>    things like multisig outputs, e.g. for watchdog services. This means if
>    your wallet does not know about the extra protocol layers involved in this,
>    it can still import the "raw" money and it will just ignore/not see the
>    keys used in more complex transactions.
>
>    - reserved is for "other stuff". I actually don't recall why we ended
>    up with this. It may have been intended to split out multisig outputs etc
>    from cointype. Marek, Thomas?
>
>    - account is for keeping essentially wallets-within-a-wallet to avoid
>    mixing of coins. If you want that.
>
>    - change is 0 for receiving addresses, 1 for change addresses.
>
>    - n is the actual key index
>
> For bitcoinj we're targeting a deliberately limited feature set for hdw v1
> so I would just set the first three values all to zero and that is a
> perfectly fine way to be compatible.
>
> The goal here is that the same seed can be written down once, and meet all
> the users needs, whilst still allowing some drift between what wallets
> support.
>
> Pieter made the I think valid point that you can't really encode how keys
> are meant to be used into just an HDW hierarchy and normally you'd need
> some metadata as well. However, I feel interop between wallets is more
> important than arriving at the most perfect possible arrangement, which
> feels a little like bikeshedding, so I'm happy to just go with the flow on
> this one.
>
>
> ------------------------------------------------------------------------------
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140327/29aa93a8/attachment.html>

From mike at plan99.net  Thu Mar 27 10:08:22 2014
From: mike at plan99.net (Mike Hearn)
Date: Thu, 27 Mar 2014 11:08:22 +0100
Subject: [Bitcoin-development] Payment Protocol for Face-to-face Payments
In-Reply-To: <lgvnc2$eu4$1@ger.gmane.org>
References: <leuunm$tjk$1@ger.gmane.org>
	<CANEZrP3nQfvDArKTRgje0Cus4G2JD_zpxSjA3fXfxM2TNAP80Q@mail.gmail.com>
	<CALDj+BafD+6KTNcYDBEu5gNPzYozSkiC-JCxrY-PzXL2DYBRsw@mail.gmail.com>
	<CAJHLa0N4J_Z907+D0ENSNKfNAW2N=7Jf4JzSCO=SU558GtGTzA@mail.gmail.com>
	<lge7nk$3mf$2@ger.gmane.org>
	<CANEZrP0J849oDvMWjf8LWi0xj44Q8DaUwDip5_smVBMNgeQ3mw@mail.gmail.com>
	<CALDj+BZJ0rSKuDHdbL7ANN0Vtaa3-KGYgusqMDzzB-CUxjMz7g@mail.gmail.com>
	<CANEZrP3szn=oQS+ZuqSzjUoSAjtkyPxPWJFaU1vDW43dRNVeNQ@mail.gmail.com>
	<20140320215208.GC88006@giles.gnomon.org.uk>
	<CANEZrP3kHRJ6U-O_Jgei4U6s9GyQGvB_p5ChtcHJEkYR0wWPvQ@mail.gmail.com>
	<20140326224826.GE62995@giles.gnomon.org.uk>
	<CANEZrP2HtJsOf5zOsPz32U=Jot7U9k80yEu=hj5uMPkRC+WGsQ@mail.gmail.com>
	<lgvnc2$eu4$1@ger.gmane.org>
Message-ID: <CANEZrP1==hL1mW6SWV0qXUMVVx7U_HUXtorpb7qVK2R4mOfzbg@mail.gmail.com>

>
> But these cases are the norm, rather than the exception.
>

Well, you're lucky, you live in Berlin. Most of the payments I make with
Bitcoin are online, to websites. So this will differ between people.

I wonder how critical it is. Let's say you are paying for a meal. In your
head the place you're at is just "the little Indian restaurant on the
corner". In the companies register and therefore certificate it's something
like "Singh Food GmbH". That's probably good enough to prevent shenanigans.
Even if there's a virus on your phone, it can't really replace the cert
with a random stolen one, otherwise your meal could show up like "IronCore
Steel Inc" or something that's obviously bogus. It'd have to be an
incredibly smart virus that knew how to substitute one name for a different
one, from a large library of stolen identities, such that the swap seemed
plausible. That sounds very hard, certainly too hard to bother with for
stealing restaurant fees.

And if a waiter at the restaurant is corrupt and they replace the cert with
one that's for their own 1-man business "BP-Gupta" or something, OK, you
might pay the wrong person by mistake. But eventually the corrupt waiter
will be discovered and then someone will have proof of what they did. It's
FAR more likely they'd just strip the signature entirely and try to
convince you the restaurant doesn't use BIP70 at all.

Still, if we want to fix this, one approach I was thinking about is to have
a super-cheesy CA just for us that issues certs with addresses in them, for
any name you ask for. That is, if you say you want a cert for "Shamrock
Irish Pub, Wollishofen, Zurich, CH" then it either sends a postcard to that
address with a code to check ownership of the address, or it checks
ownership of the place on Google Maps (which does the same postcard trick
but for free!).

That doesn't work for vending machines, but perhaps we just don't care
about those. If a MITM steals your lunch money, boo hoo.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140327/f46de8de/attachment.html>

From thomasv1 at gmx.de  Thu Mar 27 10:57:42 2014
From: thomasv1 at gmx.de (Thomas Voegtlin)
Date: Thu, 27 Mar 2014 11:57:42 +0100
Subject: [Bitcoin-development] New BIP32 structure
In-Reply-To: <lgvobr$q44$1@ger.gmane.org>
References: <CANEZrP2hbBVGqytmXR1rAcVama4ONnR586Se-Ch=dsxOzy2O4w@mail.gmail.com>
	<lgvobr$q44$1@ger.gmane.org>
Message-ID: <53340426.4040208@gmx.de>


Le 27/03/2014 00:37, Andreas Schildbach a ?crit :
> Thanks for starting the discussion on finding a better structure.
>
> For me, the most important thing is either we're 100% interoperable or
> 0%. There should not be anything inbetween, as users will delete seeds
> without knowing there is still money in them on another implementation.

I believe you have a good point here: we should not advertise wallets as
compatible if they are not 100% compatible.

One issue that I have is bandwidth: Electrum (and mycelium) cannot
watch as many addresses as they want, because this will create too
much traffic on the servers. (especially when servers send utxo merkle
proofs for each address, which is not the case yet, but is planned)

For this reason Electrum imposes a constraint on the number of virgin
addresses provided to the user. Although the current strategy used by
Electrum can certainly be improved, it will not scale up to having every
client watching thousands of addresses.

This constraint is not so important for bloom-filter clients. So I guess 
that
it makes sense for Multibit to provide hundreds, or even thousands of 
virgin
addresses to the user, regardless of how they are used. Such a wallet will
in general not be recoverable in Electrum, unless the user "helps" the
recovery procedure. (or the seed has metadata telling the software that
this is a Multibit wallet). So we have a problem here, if we advertise 
these
wallets as compatible.

My opinion, as far as Electrum is concerned, is that merchant accounts
should behave differently from regular user accounts: While merchants
need to generate an unlimited number of receiving addresses, it is also
acceptable for them to have a slightly more complex wallet recovery 
procedure
(for example, the wallet might show an option to "search for more 
addresses",
and it might not need to watch "old" addresses anymore)

OTOH, I don't think we can ask regular users to do this, not only 
because it
adds complexity to the wallet recovery procedure (which makes it scarier),
but also because we want fully automated synchronization between different
instances of a wallet, using only no other source of information than 
the blockchain.

The first versions of Electrum allowed users to set the "gap limit" 
parameter
in their GUI preferences, but I removed it from GUI after I realized it 
was a bad
idea (users messed with it and did not understand what happened..)

With bloom filter clients I guess the distinction between these two use 
cases
is not really necessary, because watching addresses is cheap. So it 
would be
good to hear what you and Mike think about this problem. If you decide 
to let
the user create hundreds of unused addresses (and I think it perfectly 
makes
sense for you), then I guess it would be better for Electrum to give up on
compatibility, rather than running the risk of seeing only a subset of 
addresses.
Another option is to handle these seeds as "merchant" accounts.




> I heard from multiple sources that using this standard some wallets will
> only see a subset of the addresses/keys of some other wallets.
> Implementation differences can always happen (and should addresses as
> bugs), but I think its unacceptable that this source of issues is by design.
>
> I suggest we agree on an even simpler least common denominator and
> wallets that want to implement some feature on top of that can do but
> are encouraged to pick a totally different "cointype". I guess that
> would mean removing reserved and account.

>
> I'm still thinking it might be a good idea to have a separate chain for
> "refunds". Refunds will be rarely used and thus need a much slower
> moving window than receiving addresses or change.
>
>
> On 03/26/2014 09:49 PM, Mike Hearn wrote:
>> Myself, Thomas V (Electrum) and Marek (Trezor) got together to make sure
>> our BIP32 wallet structures would be compatible - and I discovered that
>> only I was planning to use the default structure.
>>
>> Because I'm hopeful that we can get a lot of interoperability between
>> wallets with regards to importing 12-words paper wallets, we
>> brainstormed to find a structure acceptable to everyone and ended up with:
>>
>>    /m/cointype/reserved'/account'/change/n
>>
>> The extra levels require some explanation:
>>
>>    * cointype:  This is zero for Bitcoin. This is here to support two
>>      things, one is supporting alt coins based off the same root seed.
>>      Right now nobody seemed very bothered about alt coins but sometimes
>>      feature requests do come in for this. Arguably there is no need and
>>      alt coins could just use the same keys as Bitcoin, but it may help
>>      avoid confusion if they don't.
>>
>>      More usefully, cointype can distinguish between keys intended for
>>      things like multisig outputs, e.g. for watchdog services. This means
>>      if your wallet does not know about the extra protocol layers
>>      involved in this, it can still import the "raw" money and it will
>>      just ignore/not see the keys used in more complex transactions.
>>
>>    * reserved is for "other stuff". I actually don't recall why we ended
>>      up with this. It may have been intended to split out multisig
>>      outputs etc from cointype. Marek, Thomas?
>>
>>    * account is for keeping essentially wallets-within-a-wallet to avoid
>>      mixing of coins. If you want that.
>>
>>    * change is 0 for receiving addresses, 1 for change addresses.
>>
>>    * n is the actual key index
>>
>> For bitcoinj we're targeting a deliberately limited feature set for hdw
>> v1 so I would just set the first three values all to zero and that is a
>> perfectly fine way to be compatible.
>>
>> The goal here is that the same seed can be written down once, and meet
>> all the users needs, whilst still allowing some drift between what
>> wallets support.
>>
>> Pieter made the I think valid point that you can't really encode how
>> keys are meant to be used into just an HDW hierarchy and normally you'd
>> need some metadata as well. However, I feel interop between wallets is
>> more important than arriving at the most perfect possible arrangement,
>> which feels a little like bikeshedding, so I'm happy to just go with the
>> flow on this one.
>>
>>
>>
>> ------------------------------------------------------------------------------
>>
>>
>>
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>
>
>
> ------------------------------------------------------------------------------
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>




From thomasv1 at gmx.de  Thu Mar 27 11:20:57 2014
From: thomasv1 at gmx.de (Thomas Voegtlin)
Date: Thu, 27 Mar 2014 12:20:57 +0100
Subject: [Bitcoin-development] New BIP32 structure
In-Reply-To: <CANEZrP2hbBVGqytmXR1rAcVama4ONnR586Se-Ch=dsxOzy2O4w@mail.gmail.com>
References: <CANEZrP2hbBVGqytmXR1rAcVama4ONnR586Se-Ch=dsxOzy2O4w@mail.gmail.com>
Message-ID: <53340999.807@gmx.de>



Le 26/03/2014 21:49, Mike Hearn a ?crit :
>
>   * reserved is for "other stuff". I actually don't recall why we ended
>     up with this. It may have been intended to split out multisig
>     outputs etc from cointype. Marek, Thomas?
>


yes, this was intended to create multisig addresses from the same seed.
cointype was proposed after that.



From stick at gk2.sk  Thu Mar 27 11:35:15 2014
From: stick at gk2.sk (Pavol Rusnak)
Date: Thu, 27 Mar 2014 12:35:15 +0100
Subject: [Bitcoin-development] New BIP32 structure
In-Reply-To: <F2C8C044-EF92-4CCE-9235-28CA7FCE3526@bitsofproof.com>
References: <CANEZrP2hbBVGqytmXR1rAcVama4ONnR586Se-Ch=dsxOzy2O4w@mail.gmail.com>
	<F2C8C044-EF92-4CCE-9235-28CA7FCE3526@bitsofproof.com>
Message-ID: <53340CF3.8020704@gk2.sk>

On 03/27/2014 08:09 AM, Tamas Blummer wrote:
> A notable suggestion was to instead of building a directory of magic numbers (like 0 for Bitcoin, 1 for Litecoin etc) use a hash of the word "Bitcoin", "Litecoin", "Dogecoin", so collosion is unlikely and
> cetral directory is not needed.

Nice idea, but keep in mind that you are hashing into 2^32 space, so
collisions will occur, unfortunately and we'll end up with directory
again :-/

Even if they did not occur you would need to keep up the registry of
names anyway (is it Peercoin or PPCoin, Testnet or TestNet ...)?

-- 
Best Regards / S pozdravom,

Pavol Rusnak <stick at gk2.sk>



From stick at gk2.sk  Thu Mar 27 11:36:43 2014
From: stick at gk2.sk (Pavol Rusnak)
Date: Thu, 27 Mar 2014 12:36:43 +0100
Subject: [Bitcoin-development] New BIP32 structure
In-Reply-To: <CANEZrP2hbBVGqytmXR1rAcVama4ONnR586Se-Ch=dsxOzy2O4w@mail.gmail.com>
References: <CANEZrP2hbBVGqytmXR1rAcVama4ONnR586Se-Ch=dsxOzy2O4w@mail.gmail.com>
Message-ID: <53340D4B.3030304@gk2.sk>

On 03/26/2014 09:49 PM, Mike Hearn wrote:
>    - cointype:  This is zero for Bitcoin. This is here to support two
>    things, one is supporting alt coins based off the same root seed. Right now
>    nobody seemed very bothered about alt coins but sometimes feature requests

There is one "altcoin" that is pretty important even today and it is
Testnet.

-- 
Best Regards / S pozdravom,

Pavol Rusnak <stick at gk2.sk>



From mike at plan99.net  Thu Mar 27 11:39:21 2014
From: mike at plan99.net (Mike Hearn)
Date: Thu, 27 Mar 2014 12:39:21 +0100
Subject: [Bitcoin-development] New BIP32 structure
In-Reply-To: <53340426.4040208@gmx.de>
References: <CANEZrP2hbBVGqytmXR1rAcVama4ONnR586Se-Ch=dsxOzy2O4w@mail.gmail.com>
	<lgvobr$q44$1@ger.gmane.org> <53340426.4040208@gmx.de>
Message-ID: <CANEZrP1v7ZCmhhoHmuXXXvKwAV1_0a02Vkf9z4nQGNfAbZBM=A@mail.gmail.com>

>
> One issue that I have is bandwidth: Electrum (and mycelium) cannot
> watch as many addresses as they want, because this will create too
> much traffic on the servers. (especially when servers send utxo merkle
> proofs for each address, which is not the case yet, but is planned)
>

This is surprising and the first time I've heard about this. Surely your
constraint is CPU or disk seeks? Addresses are small, I find it hard to
believe that clients uploading them is a big drain, and mostly addresses
that are in the lookahead region won't have any hits and so won't result in
any downloads?

This constraint is not so important for bloom-filter clients.


Bloom filters are a neat way to encode addresses and keys but they don't
magically let clients save bandwidth. A smaller filter results in less
upload bandwidth but more download (from the wallets perspective). So I'm
worried if you think this will be an issue for your clients: I haven't
investigated bandwidth usage deeply yet, perhaps I should.

FWIW the current bitcoinj HDW alpha preview pre-gens 100 addresses on both
receive and change branches. But I'm not sure what the right setting is.

We also have to consider latency. The simplest implementation from a
wallets POV is to step through each transaction in the block chain one at a
time, and each time you see an address that is yours, calculate the next
ones in the chain. But that would be fantastically slow, so we must instead
pre-generate a larger lookahead region and request more data in one batch.
Then you have to recover if that batch ends up using all the pre-genned
addresses. It's just painful.


> My opinion, as far as Electrum is concerned, is that merchant accounts
> should behave differently from regular user accounts: While merchants
> need to generate an unlimited number of receiving addresses, it is also
> acceptable for them to have a slightly more complex wallet recovery
> procedure
>

Maybe. I dislike any distinction between users and merchants though. I
don't think it's really safe to assume merchants are more sophisticated
than end users.


> but also because we want fully automated synchronization between different
> instances of a wallet, using only no other source of information than
> the blockchain.
>

I think such synchronization won't be possible as we keep adding features,
because the block chain cannot sync all the relevant data. For instance
Electrum already has a label sync feature. Other wallets need to compete
with that, somehow, so we need to build a way to do cross-device wallet
sync with non-chain data.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140327/41aaeab9/attachment.html>

From thomasv1 at gmx.de  Thu Mar 27 12:06:34 2014
From: thomasv1 at gmx.de (Thomas Voegtlin)
Date: Thu, 27 Mar 2014 13:06:34 +0100
Subject: [Bitcoin-development] New BIP32 structure
In-Reply-To: <CAJna-HhmFya+3W67qQt0wMhW=B4vJvwdkr-5WnU+KEaKq7uaUA@mail.gmail.com>
References: <CANEZrP2hbBVGqytmXR1rAcVama4ONnR586Se-Ch=dsxOzy2O4w@mail.gmail.com>
	<53340999.807@gmx.de>
	<CAJna-HhmFya+3W67qQt0wMhW=B4vJvwdkr-5WnU+KEaKq7uaUA@mail.gmail.com>
Message-ID: <5334144A.9040600@gmx.de>



Le 27/03/2014 12:30, Marek Palatinus a ?crit :
> Ah, I forget to two things, which should be into the BIP as well:
>
> a) Gap factor for addresses; as Thomas mentioned, although some software
> can watch almost unlimited amount of unused addresses, this is serious
> concern for lightweight or server-based wallets like Electrum or
> myTREZOR. myTREZOR currently uses gap factor 10, which is (from my
> experience so far) quite sane for most of users.


Yes, I was planning to increase the number of available unused addresses 
to 10 or 20 in the bip32 version of Electrum.

Related to this, here is another idea I would like to submit:

Instead of using a "gap limit" (maximal number of consecutive unused 
addresses), I think we should get rid of the topology, and simply count 
the number of unused addresses since the beginning of the sequence. 
Indeed, the topology of the sequence of addresses is of no interest to 
the user. Users often misinterpret "gap limit" as the "number of unused 
addresses available", so I think we should just give them what they want 
:) This is easier to understand, and it makes things more predictable, 
because the wallet will always display the same number of unused 
addresses (except when it is waiting for confirmations).




From mike at plan99.net  Thu Mar 27 12:28:49 2014
From: mike at plan99.net (Mike Hearn)
Date: Thu, 27 Mar 2014 13:28:49 +0100
Subject: [Bitcoin-development] New BIP32 structure
In-Reply-To: <5334144A.9040600@gmx.de>
References: <CANEZrP2hbBVGqytmXR1rAcVama4ONnR586Se-Ch=dsxOzy2O4w@mail.gmail.com>
	<53340999.807@gmx.de>
	<CAJna-HhmFya+3W67qQt0wMhW=B4vJvwdkr-5WnU+KEaKq7uaUA@mail.gmail.com>
	<5334144A.9040600@gmx.de>
Message-ID: <CANEZrP37dO53Jp2rXpPqO3eMd6AWamtXaReq0arMfC=uY2aFUA@mail.gmail.com>

By the way, I just noticed that greenaddress.it is creating seeds that have
24 words instead of 12. Does anyone know what's up with that? They claim to
be using BIP32 wallets so I wanted to see if they were using the default
structure and if so, whether bitcoinj was compatible with it (before I
switch to the one discussed here). But it seems we fall at the first hurdle
...


On Thu, Mar 27, 2014 at 1:06 PM, Thomas Voegtlin <thomasv1 at gmx.de> wrote:

>
>
> Le 27/03/2014 12:30, Marek Palatinus a ?crit :
> > Ah, I forget to two things, which should be into the BIP as well:
> >
> > a) Gap factor for addresses; as Thomas mentioned, although some software
> > can watch almost unlimited amount of unused addresses, this is serious
> > concern for lightweight or server-based wallets like Electrum or
> > myTREZOR. myTREZOR currently uses gap factor 10, which is (from my
> > experience so far) quite sane for most of users.
>
>
> Yes, I was planning to increase the number of available unused addresses
> to 10 or 20 in the bip32 version of Electrum.
>
> Related to this, here is another idea I would like to submit:
>
> Instead of using a "gap limit" (maximal number of consecutive unused
> addresses), I think we should get rid of the topology, and simply count
> the number of unused addresses since the beginning of the sequence.
> Indeed, the topology of the sequence of addresses is of no interest to
> the user. Users often misinterpret "gap limit" as the "number of unused
> addresses available", so I think we should just give them what they want
> :) This is easier to understand, and it makes things more predictable,
> because the wallet will always display the same number of unused
> addresses (except when it is waiting for confirmations).
>
>
>
> ------------------------------------------------------------------------------
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140327/4dc427dd/attachment.html>

From mike at plan99.net  Thu Mar 27 12:49:37 2014
From: mike at plan99.net (Mike Hearn)
Date: Thu, 27 Mar 2014 13:49:37 +0100
Subject: [Bitcoin-development] New BIP32 structure
In-Reply-To: <CANEZrP37dO53Jp2rXpPqO3eMd6AWamtXaReq0arMfC=uY2aFUA@mail.gmail.com>
References: <CANEZrP2hbBVGqytmXR1rAcVama4ONnR586Se-Ch=dsxOzy2O4w@mail.gmail.com>
	<53340999.807@gmx.de>
	<CAJna-HhmFya+3W67qQt0wMhW=B4vJvwdkr-5WnU+KEaKq7uaUA@mail.gmail.com>
	<5334144A.9040600@gmx.de>
	<CANEZrP37dO53Jp2rXpPqO3eMd6AWamtXaReq0arMfC=uY2aFUA@mail.gmail.com>
Message-ID: <CANEZrP21X_Uk+_XWN6y2tgiup07Xd12bZZoFfnheG_Lz-ipbPQ@mail.gmail.com>

Ah, BIP32 allows for a range of entropy sizes and it so happens that they
picked 256 bits instead of 128 bits.

I'd have thought that there is a right answer for this. 2^128 should not be
brute forceable, and longer sizes have a cost in terms of making the seeds
harder to write down on paper. So should this be a degree of freedom?


On Thu, Mar 27, 2014 at 1:28 PM, Mike Hearn <mike at plan99.net> wrote:

> By the way, I just noticed that greenaddress.it is creating seeds that
> have 24 words instead of 12. Does anyone know what's up with that? They
> claim to be using BIP32 wallets so I wanted to see if they were using the
> default structure and if so, whether bitcoinj was compatible with it
> (before I switch to the one discussed here). But it seems we fall at the
> first hurdle ...
>
>
> On Thu, Mar 27, 2014 at 1:06 PM, Thomas Voegtlin <thomasv1 at gmx.de> wrote:
>
>>
>>
>> Le 27/03/2014 12:30, Marek Palatinus a ?crit :
>> > Ah, I forget to two things, which should be into the BIP as well:
>> >
>> > a) Gap factor for addresses; as Thomas mentioned, although some software
>> > can watch almost unlimited amount of unused addresses, this is serious
>> > concern for lightweight or server-based wallets like Electrum or
>> > myTREZOR. myTREZOR currently uses gap factor 10, which is (from my
>> > experience so far) quite sane for most of users.
>>
>>
>> Yes, I was planning to increase the number of available unused addresses
>> to 10 or 20 in the bip32 version of Electrum.
>>
>> Related to this, here is another idea I would like to submit:
>>
>> Instead of using a "gap limit" (maximal number of consecutive unused
>> addresses), I think we should get rid of the topology, and simply count
>> the number of unused addresses since the beginning of the sequence.
>> Indeed, the topology of the sequence of addresses is of no interest to
>> the user. Users often misinterpret "gap limit" as the "number of unused
>> addresses available", so I think we should just give them what they want
>> :) This is easier to understand, and it makes things more predictable,
>> because the wallet will always display the same number of unused
>> addresses (except when it is waiting for confirmations).
>>
>>
>>
>> ------------------------------------------------------------------------------
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140327/2aa515be/attachment.html>

From ematiu at gmail.com  Thu Mar 27 13:07:23 2014
From: ematiu at gmail.com (Matias Alejo Garcia)
Date: Thu, 27 Mar 2014 10:07:23 -0300
Subject: [Bitcoin-development] New BIP32 structure
In-Reply-To: <CANEZrP37dO53Jp2rXpPqO3eMd6AWamtXaReq0arMfC=uY2aFUA@mail.gmail.com>
References: <CANEZrP2hbBVGqytmXR1rAcVama4ONnR586Se-Ch=dsxOzy2O4w@mail.gmail.com>
	<53340999.807@gmx.de>
	<CAJna-HhmFya+3W67qQt0wMhW=B4vJvwdkr-5WnU+KEaKq7uaUA@mail.gmail.com>
	<5334144A.9040600@gmx.de>
	<CANEZrP37dO53Jp2rXpPqO3eMd6AWamtXaReq0arMfC=uY2aFUA@mail.gmail.com>
Message-ID: <CA+vKqYegtXZ5cLsWo1hOsqaexNRtwL-mm6u=D0rpD--VQJSRtg@mail.gmail.com>

On Thu, Mar 27, 2014 at 9:28 AM, Mike Hearn <mike at plan99.net> wrote:
> By the way, I just noticed that greenaddress.it is creating seeds that have 24
> words instead of 12. Does anyone know what's up with that? They claim to be
> using BIP32 wallets so I wanted to see if they were using the default structure
> and if so, whether bitcoinj was compatible with it (before I switch to the one
> discussed here). But it seems we fall at the first hurdle ...
>

They replied this on reddit: "Good question! We use 256-bit BIP39
seeds for our 512-bit extended HD wallet keypairs, as advised by
BIP32. We are aware that 128 is considered ok in Electrum but we
wanted to follow BIP32 spec, in particular because we are working with
hardware wallets that have been design with BIP32 in mind and wanted
to avoid any incompatibility issue."

http://www.reddit.com/r/Bitcoin/comments/20puhg/while_blockchaininfo_is_down_what_about_testing/cg5mr54


BTW, thanks for starting this thread. I am with the bitcore team,
working on a new multisig only wallet (Cosign).

The schema originally proposed be Mike (/m/cointype/reserved'/account'/change/n
) seems flexible enough for our needs. I wonder, tough, if we can
agree also on a format to exchange the tips (n) of each branch on the
tree when the user export/backup the wallet, as  Allen suggested.


On Wed, Mar 26, 2014 at 8:37 PM, Andreas Schildbach
<andreas at schildbach.de> wrote:
> For me, the most important thing is either we're 100% interoperable or
> 0%. There should not be anything inbetween, as users will delete seeds
> without knowing there is still money in them on another implementation.

Is the ideal schema that the user should be able to use two different
wallets at the same time? Does a wallet need to assume that derivate
keys could had been used already? That seems complicated. Maybe we
could add a  /(hash of the wallet name)/ on the BIP32 path.


--
matias



-- 
Mat?as Alejo Garcia
Skype/Twitter: @ematiu
Roads? Where we're going, we don't need roads!



From thomas.kerin at gmail.com  Thu Mar 27 13:12:07 2014
From: thomas.kerin at gmail.com (Thomas Kerin)
Date: Thu, 27 Mar 2014 13:12:07 +0000
Subject: [Bitcoin-development] New BIP32 structure
In-Reply-To: <CANEZrP21X_Uk+_XWN6y2tgiup07Xd12bZZoFfnheG_Lz-ipbPQ@mail.gmail.com>
References: <CANEZrP2hbBVGqytmXR1rAcVama4ONnR586Se-Ch=dsxOzy2O4w@mail.gmail.com>
	<53340999.807@gmx.de>
	<CAJna-HhmFya+3W67qQt0wMhW=B4vJvwdkr-5WnU+KEaKq7uaUA@mail.gmail.com>
	<5334144A.9040600@gmx.de>
	<CANEZrP37dO53Jp2rXpPqO3eMd6AWamtXaReq0arMfC=uY2aFUA@mail.gmail.com>
	<CANEZrP21X_Uk+_XWN6y2tgiup07Xd12bZZoFfnheG_Lz-ipbPQ@mail.gmail.com>
Message-ID: <CAHv+tb5gYKEtbwxwwBGWk-M98kGnjGw3ffNQAaLQz=hb8BTaDg@mail.gmail.com>

Isn't the length of the seed arbitrary anyway? Once decoded using whatever
mnemonic implementation (electrums, or BIP0039) the bytestream is
immediately passed to HMAC-SHA256 to generate the master key. No matter
what your initial entropy is, it would be hashed anyway.


On Thu, Mar 27, 2014 at 12:49 PM, Mike Hearn <mike at plan99.net> wrote:

> Ah, BIP32 allows for a range of entropy sizes and it so happens that they
> picked 256 bits instead of 128 bits.
>
> I'd have thought that there is a right answer for this. 2^128 should not
> be brute forceable, and longer sizes have a cost in terms of making the
> seeds harder to write down on paper. So should this be a degree of freedom?
>
>
> On Thu, Mar 27, 2014 at 1:28 PM, Mike Hearn <mike at plan99.net> wrote:
>
>> By the way, I just noticed that greenaddress.it is creating seeds that
>> have 24 words instead of 12. Does anyone know what's up with that? They
>> claim to be using BIP32 wallets so I wanted to see if they were using the
>> default structure and if so, whether bitcoinj was compatible with it
>> (before I switch to the one discussed here). But it seems we fall at the
>> first hurdle ...
>>
>>
>> On Thu, Mar 27, 2014 at 1:06 PM, Thomas Voegtlin <thomasv1 at gmx.de> wrote:
>>
>>>
>>>
>>> Le 27/03/2014 12:30, Marek Palatinus a ?crit :
>>> > Ah, I forget to two things, which should be into the BIP as well:
>>> >
>>> > a) Gap factor for addresses; as Thomas mentioned, although some
>>> software
>>> > can watch almost unlimited amount of unused addresses, this is serious
>>> > concern for lightweight or server-based wallets like Electrum or
>>> > myTREZOR. myTREZOR currently uses gap factor 10, which is (from my
>>> > experience so far) quite sane for most of users.
>>>
>>>
>>> Yes, I was planning to increase the number of available unused addresses
>>> to 10 or 20 in the bip32 version of Electrum.
>>>
>>> Related to this, here is another idea I would like to submit:
>>>
>>> Instead of using a "gap limit" (maximal number of consecutive unused
>>> addresses), I think we should get rid of the topology, and simply count
>>> the number of unused addresses since the beginning of the sequence.
>>> Indeed, the topology of the sequence of addresses is of no interest to
>>> the user. Users often misinterpret "gap limit" as the "number of unused
>>> addresses available", so I think we should just give them what they want
>>> :) This is easier to understand, and it makes things more predictable,
>>> because the wallet will always display the same number of unused
>>> addresses (except when it is waiting for confirmations).
>>>
>>>
>>>
>>> ------------------------------------------------------------------------------
>>> _______________________________________________
>>> Bitcoin-development mailing list
>>> Bitcoin-development at lists.sourceforge.net
>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>>
>>
>>
>
>
> ------------------------------------------------------------------------------
>
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140327/1de2fe0e/attachment.html>

From mike at plan99.net  Thu Mar 27 13:19:54 2014
From: mike at plan99.net (Mike Hearn)
Date: Thu, 27 Mar 2014 14:19:54 +0100
Subject: [Bitcoin-development] New BIP32 structure
In-Reply-To: <CAHv+tb5gYKEtbwxwwBGWk-M98kGnjGw3ffNQAaLQz=hb8BTaDg@mail.gmail.com>
References: <CANEZrP2hbBVGqytmXR1rAcVama4ONnR586Se-Ch=dsxOzy2O4w@mail.gmail.com>
	<53340999.807@gmx.de>
	<CAJna-HhmFya+3W67qQt0wMhW=B4vJvwdkr-5WnU+KEaKq7uaUA@mail.gmail.com>
	<5334144A.9040600@gmx.de>
	<CANEZrP37dO53Jp2rXpPqO3eMd6AWamtXaReq0arMfC=uY2aFUA@mail.gmail.com>
	<CANEZrP21X_Uk+_XWN6y2tgiup07Xd12bZZoFfnheG_Lz-ipbPQ@mail.gmail.com>
	<CAHv+tb5gYKEtbwxwwBGWk-M98kGnjGw3ffNQAaLQz=hb8BTaDg@mail.gmail.com>
Message-ID: <CANEZrP1F=cPrMevBd7sFrezWpL5BJ7b-ngJny0J7D19M7GgoNA@mail.gmail.com>

Obviously, SHA256 can't magically generate more entropy out of nothing, it
just stretches whatever is put in. If your seed was only 32 bits then
hashing wouldn't save you: every possible private key could easily be
calculated in advance.


On Thu, Mar 27, 2014 at 2:12 PM, Thomas Kerin <thomas.kerin at gmail.com>wrote:

> Isn't the length of the seed arbitrary anyway? Once decoded using whatever
> mnemonic implementation (electrums, or BIP0039) the bytestream is
> immediately passed to HMAC-SHA256 to generate the master key. No matter
> what your initial entropy is, it would be hashed anyway.
>
>
> On Thu, Mar 27, 2014 at 12:49 PM, Mike Hearn <mike at plan99.net> wrote:
>
>> Ah, BIP32 allows for a range of entropy sizes and it so happens that they
>> picked 256 bits instead of 128 bits.
>>
>> I'd have thought that there is a right answer for this. 2^128 should not
>> be brute forceable, and longer sizes have a cost in terms of making the
>> seeds harder to write down on paper. So should this be a degree of freedom?
>>
>>
>> On Thu, Mar 27, 2014 at 1:28 PM, Mike Hearn <mike at plan99.net> wrote:
>>
>>> By the way, I just noticed that greenaddress.it is creating seeds that
>>> have 24 words instead of 12. Does anyone know what's up with that? They
>>> claim to be using BIP32 wallets so I wanted to see if they were using the
>>> default structure and if so, whether bitcoinj was compatible with it
>>> (before I switch to the one discussed here). But it seems we fall at the
>>> first hurdle ...
>>>
>>>
>>> On Thu, Mar 27, 2014 at 1:06 PM, Thomas Voegtlin <thomasv1 at gmx.de>wrote:
>>>
>>>>
>>>>
>>>> Le 27/03/2014 12:30, Marek Palatinus a ?crit :
>>>> > Ah, I forget to two things, which should be into the BIP as well:
>>>> >
>>>> > a) Gap factor for addresses; as Thomas mentioned, although some
>>>> software
>>>> > can watch almost unlimited amount of unused addresses, this is serious
>>>> > concern for lightweight or server-based wallets like Electrum or
>>>> > myTREZOR. myTREZOR currently uses gap factor 10, which is (from my
>>>> > experience so far) quite sane for most of users.
>>>>
>>>>
>>>> Yes, I was planning to increase the number of available unused addresses
>>>> to 10 or 20 in the bip32 version of Electrum.
>>>>
>>>> Related to this, here is another idea I would like to submit:
>>>>
>>>> Instead of using a "gap limit" (maximal number of consecutive unused
>>>> addresses), I think we should get rid of the topology, and simply count
>>>> the number of unused addresses since the beginning of the sequence.
>>>> Indeed, the topology of the sequence of addresses is of no interest to
>>>> the user. Users often misinterpret "gap limit" as the "number of unused
>>>> addresses available", so I think we should just give them what they want
>>>> :) This is easier to understand, and it makes things more predictable,
>>>> because the wallet will always display the same number of unused
>>>> addresses (except when it is waiting for confirmations).
>>>>
>>>>
>>>>
>>>> ------------------------------------------------------------------------------
>>>> _______________________________________________
>>>> Bitcoin-development mailing list
>>>> Bitcoin-development at lists.sourceforge.net
>>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>>>
>>>
>>>
>>
>>
>> ------------------------------------------------------------------------------
>>
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140327/2c5954bd/attachment.html>

From thomasv1 at gmx.de  Thu Mar 27 13:30:18 2014
From: thomasv1 at gmx.de (Thomas Voegtlin)
Date: Thu, 27 Mar 2014 14:30:18 +0100
Subject: [Bitcoin-development] New BIP32 structure
In-Reply-To: <CANEZrP1v7ZCmhhoHmuXXXvKwAV1_0a02Vkf9z4nQGNfAbZBM=A@mail.gmail.com>
References: <CANEZrP2hbBVGqytmXR1rAcVama4ONnR586Se-Ch=dsxOzy2O4w@mail.gmail.com>	<lgvobr$q44$1@ger.gmane.org>	<53340426.4040208@gmx.de>
	<CANEZrP1v7ZCmhhoHmuXXXvKwAV1_0a02Vkf9z4nQGNfAbZBM=A@mail.gmail.com>
Message-ID: <533427EA.5010300@gmx.de>



Le 27/03/2014 12:39, Mike Hearn a ?crit :
>     One issue that I have is bandwidth: Electrum (and mycelium) cannot
>     watch as many addresses as they want, because this will create too
>     much traffic on the servers. (especially when servers send utxo merkle
>     proofs for each address, which is not the case yet, but is planned)
>
>
> This is surprising and the first time I've heard about this. Surely your
> constraint is CPU or disk seeks? Addresses are small, I find it hard to
> believe that clients uploading them is a big drain, and mostly addresses
> that are in the lookahead region won't have any hits and so won't result
> in any downloads?


To be honest, I have not carried out a comprehensive examination of 
server performance. What I can see is that Electrum servers are often 
slowed down when a wallet with a large number (thousands) of addresses 
shows up, and this is caused by disk seeks (especially on my slow VPS).

The master branch of electrum-server is also quite wasteful in terms of 
CPU, because it uses client threads. I have another branch that uses a 
socket poller, but that branch is not widely deployed yet.

I reckon that I might have been a bit too conservative, in setting the 
number of unused receiving addresses watched by Electrum clients (until 
now, the default "gap limit" has always been 5). The reason is that, if 
I increase that number, then there is no way to go back to a smaller 
value, because it needs to be compatible with all previously released 
versions. However, Electrum servers performance has improved over time, 
so I guess it could safely be raised to 20 (see previous post to slush).

In terms of bandwidth, I am referring to my Android version of Electrum. 
When it runs on a 3G connection, it sometimes takes up to 1 minute to 
synchronize (with a wallet that has hundreds of addresses). However, I 
have not checked if this was caused by addresses or block headers.



>
>     This constraint is not so important for bloom-filter clients.
>
>
> Bloom filters are a neat way to encode addresses and keys but they don't
> magically let clients save bandwidth. A smaller filter results in less
> upload bandwidth but more download (from the wallets perspective). So
> I'm worried if you think this will be an issue for your clients: I
> haven't investigated bandwidth usage deeply yet, perhaps I should.
>
> FWIW the current bitcoinj HDW alpha preview pre-gens 100 addresses on
> both receive and change branches. But I'm not sure what the right
> setting is.


Heh, may I suggest 20 in the receive branch?

For the change branch, there is no need to watch a large number of 
unused addresses, because the wallet should try to fill all the gaps in 
the sequence of change.

(Electrum does that. It also watches 3 unused addresses at the end of 
that sequence, in order to cope with possible blockchain reorgs causing 
gaps. As an extra safety, it also waits for 3 confirmations before using 
a new change address, which sometimes results in address reuse, but I 
guess a smarter strategy could avoid that).



>
> We also have to consider latency. The simplest implementation from a
> wallets POV is to step through each transaction in the block chain one
> at a time, and each time you see an address that is yours, calculate the
> next ones in the chain. But that would be fantastically slow, so we must
> instead pre-generate a larger lookahead region and request more data in
> one batch. Then you have to recover if that batch ends up using all the
> pre-genned addresses. It's just painful.



>
>     My opinion, as far as Electrum is concerned, is that merchant accounts
>     should behave differently from regular user accounts: While merchants
>     need to generate an unlimited number of receiving addresses, it is also
>     acceptable for them to have a slightly more complex wallet recovery
>     procedure
>
>
> Maybe. I dislike any distinction between users and merchants though. I
> don't think it's really safe to assume merchants are more sophisticated
> than end users.

well, it depends what we mean by "merchant". I was thinking more of a 
website running a script, rather than a brick and mortar ice cream 
seller. :)


>
>     but also because we want fully automated synchronization between
>     different
>     instances of a wallet, using only no other source of information than
>     the blockchain.
>
>
> I think such synchronization won't be possible as we keep adding
> features, because the block chain cannot sync all the relevant data. For
> instance Electrum already has a label sync feature. Other wallets need
> to compete with that, somehow, so we need to build a way to do
> cross-device wallet sync with non-chain data.

Oh, I was not referring to label sync, but only to the synchronization 
of the list of addresses in the wallet. Label sync is an Electrum plugin 
that relies on a centralized server. Using a third party server is 
acceptable in that case, IMO, because you will not lose your coins if 
the server fails.




From vv01f at riseup.net  Thu Mar 27 13:31:53 2014
From: vv01f at riseup.net (vv01f)
Date: Thu, 27 Mar 2014 14:31:53 +0100
Subject: [Bitcoin-development] Payment Protocol for Face-to-face Payments
In-Reply-To: <CANEZrP1==hL1mW6SWV0qXUMVVx7U_HUXtorpb7qVK2R4mOfzbg@mail.gmail.com>
References: <leuunm$tjk$1@ger.gmane.org>
	<CANEZrP3nQfvDArKTRgje0Cus4G2JD_zpxSjA3fXfxM2TNAP80Q@mail.gmail.com>
	<CALDj+BafD+6KTNcYDBEu5gNPzYozSkiC-JCxrY-PzXL2DYBRsw@mail.gmail.com>
	<CAJHLa0N4J_Z907+D0ENSNKfNAW2N=7Jf4JzSCO=SU558GtGTzA@mail.gmail.com>
	<lge7nk$3mf$2@ger.gmane.org>
	<CANEZrP0J849oDvMWjf8LWi0xj44Q8DaUwDip5_smVBMNgeQ3mw@mail.gmail.com>
	<CALDj+BZJ0rSKuDHdbL7ANN0Vtaa3-KGYgusqMDzzB-CUxjMz7g@mail.gmail.com>
	<CANEZrP3szn=oQS+ZuqSzjUoSAjtkyPxPWJFaU1vDW43dRNVeNQ@mail.gmail.com>
	<20140320215208.GC88006@giles.gnomon.org.uk>
	<CANEZrP3kHRJ6U-O_Jgei4U6s9GyQGvB_p5ChtcHJEkYR0wWPvQ@mail.gmail.com>
	<20140326224826.GE62995@giles.gnomon.org.uk>
	<CANEZrP2HtJsOf5zOsPz32U=Jot7U9k80yEu=hj5uMPkRC+WGsQ@mail.gmail.com>
	<lgvnc2$eu4$1@ger.gmane.org>
	<CANEZrP1==hL1mW6SWV0qXUMVVx7U_HUXtorpb7qVK2R4mOfzbg@mail.gmail.com>
Message-ID: <A1269E16-63BC-44D5-B460-D793D45587AD@riseup.net>

Companies can have a Cert with their name via CAcert. It requires some work though to get assured as an organisation.
Did you already think about what CA is to be trusted or do users need to do that. The least good decision in my POV would be to accept OS/browser built in CAs only.

Am 27.03.2014 um 11:08 schrieb Mike Hearn <mike at plan99.net>:

>> But these cases are the norm, rather than the exception.
> 
> Well, you're lucky, you live in Berlin. Most of the payments I make with Bitcoin are online, to websites. So this will differ between people.
> 
> I wonder how critical it is. Let's say you are paying for a meal. In your head the place you're at is just "the little Indian restaurant on the corner". In the companies register and therefore certificate it's something like "Singh Food GmbH". That's probably good enough to prevent shenanigans. Even if there's a virus on your phone, it can't really replace the cert with a random stolen one, otherwise your meal could show up like "IronCore Steel Inc" or something that's obviously bogus. It'd have to be an incredibly smart virus that knew how to substitute one name for a different one, from a large library of stolen identities, such that the swap seemed plausible. That sounds very hard, certainly too hard to bother with for stealing restaurant fees.
> 
> And if a waiter at the restaurant is corrupt and they replace the cert with one that's for their own 1-man business "BP-Gupta" or something, OK, you might pay the wrong person by mistake. But eventually the corrupt waiter will be discovered and then someone will have proof of what they did. It's FAR more likely they'd just strip the signature entirely and try to convince you the restaurant doesn't use BIP70 at all.
> 
> Still, if we want to fix this, one approach I was thinking about is to have a super-cheesy CA just for us that issues certs with addresses in them, for any name you ask for. That is, if you say you want a cert for "Shamrock Irish Pub, Wollishofen, Zurich, CH" then it either sends a postcard to that address with a code to check ownership of the address, or it checks ownership of the place on Google Maps (which does the same postcard trick but for free!).
> 
> That doesn't work for vending machines, but perhaps we just don't care about those. If a MITM steals your lunch money, boo hoo.
> 
> ------------------------------------------------------------------------------
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140327/5d27c649/attachment.html>

From mike at plan99.net  Thu Mar 27 13:38:36 2014
From: mike at plan99.net (Mike Hearn)
Date: Thu, 27 Mar 2014 14:38:36 +0100
Subject: [Bitcoin-development] New BIP32 structure
In-Reply-To: <533427EA.5010300@gmx.de>
References: <CANEZrP2hbBVGqytmXR1rAcVama4ONnR586Se-Ch=dsxOzy2O4w@mail.gmail.com>
	<lgvobr$q44$1@ger.gmane.org> <53340426.4040208@gmx.de>
	<CANEZrP1v7ZCmhhoHmuXXXvKwAV1_0a02Vkf9z4nQGNfAbZBM=A@mail.gmail.com>
	<533427EA.5010300@gmx.de>
Message-ID: <CANEZrP2stoAD7s9o=rjAH30PaMb3vuf5py_TGhcOftSHnR=Oyg@mail.gmail.com>

>
> To be honest, I have not carried out a comprehensive examination of
> server performance. What I can see is that Electrum servers are often
> slowed down when a wallet with a large number (thousands) of addresses
> shows up, and this is caused by disk seeks (especially on my slow VPS).
>

Yes that sounds more like what I expected.


> In terms of bandwidth, I am referring to my Android version of Electrum.
> When it runs on a 3G connection, it sometimes takes up to 1 minute to
> synchronize (with a wallet that has hundreds of addresses). However, I
> have not checked if this was caused by addresses or block headers.
>

An address is 160 bits. (1000 * 160) / 8 / 1024 = 19.5 kilobytes of data
which 3G should be able to transfer in <1 second easily. Of course the
encoding may not be optimal. But if it is, I suspect the issue is elsewhere.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140327/70f4cdce/attachment.html>

From stick at gk2.sk  Thu Mar 27 13:44:30 2014
From: stick at gk2.sk (Pavol Rusnak)
Date: Thu, 27 Mar 2014 14:44:30 +0100
Subject: [Bitcoin-development] New BIP32 structure
In-Reply-To: <5334144A.9040600@gmx.de>
References: <CANEZrP2hbBVGqytmXR1rAcVama4ONnR586Se-Ch=dsxOzy2O4w@mail.gmail.com>	<53340999.807@gmx.de>	<CAJna-HhmFya+3W67qQt0wMhW=B4vJvwdkr-5WnU+KEaKq7uaUA@mail.gmail.com>
	<5334144A.9040600@gmx.de>
Message-ID: <53342B3E.3050404@gk2.sk>

On 03/27/2014 01:06 PM, Thomas Voegtlin wrote:
> Yes, I was planning to increase the number of available unused addresses 
> to 10 or 20 in the bip32 version of Electrum.

Also, we'd need to specify a "gap limit" for accounts as well. In TREZOR
we currently use 0, which means that the scan will stop as soon as we
hit first account with no transaction history (meaning that its first
X=10 addresses are unused).

-- 
Best Regards / S pozdravom,

Pavol Rusnak <stick at gk2.sk>



From thomasv1 at gmx.de  Thu Mar 27 13:49:32 2014
From: thomasv1 at gmx.de (Thomas Voegtlin)
Date: Thu, 27 Mar 2014 14:49:32 +0100
Subject: [Bitcoin-development] New BIP32 structure
In-Reply-To: <CANEZrP21X_Uk+_XWN6y2tgiup07Xd12bZZoFfnheG_Lz-ipbPQ@mail.gmail.com>
References: <CANEZrP2hbBVGqytmXR1rAcVama4ONnR586Se-Ch=dsxOzy2O4w@mail.gmail.com>	<53340999.807@gmx.de>	<CAJna-HhmFya+3W67qQt0wMhW=B4vJvwdkr-5WnU+KEaKq7uaUA@mail.gmail.com>	<5334144A.9040600@gmx.de>	<CANEZrP37dO53Jp2rXpPqO3eMd6AWamtXaReq0arMfC=uY2aFUA@mail.gmail.com>
	<CANEZrP21X_Uk+_XWN6y2tgiup07Xd12bZZoFfnheG_Lz-ipbPQ@mail.gmail.com>
Message-ID: <53342C6C.2060006@gmx.de>



Le 27/03/2014 13:49, Mike Hearn a ?crit :
> Ah, BIP32 allows for a range of entropy sizes and it so happens that
> they picked 256 bits instead of 128 bits.
>
> I'd have thought that there is a right answer for this. 2^128 should not
> be brute forceable, and longer sizes have a cost in terms of making the
> seeds harder to write down on paper. So should this be a degree of freedom?
>


Here is what I understand:

2^128 iterations is not brute forcable today, and will not be for the 
foreseeable future.

An EC pubkey of length n can be forced in approximately 2^(n/2) 
iterations (see http://ecc-challenge.info/) Thus, Bitcoin pubkeys, which 
are 256 bits, would require 2^128 iterations. This is why unused 
addresses (160 bits hash) are better protected than already used ones.

However, people tend to believe that a public key of size n requires 2^n 
iterations. This belief might have been spread by this popular image:
https://bitcointalk.org/index.php?topic=508880.msg5616146#msg5616146




From thomasv1 at gmx.de  Thu Mar 27 13:53:35 2014
From: thomasv1 at gmx.de (Thomas Voegtlin)
Date: Thu, 27 Mar 2014 14:53:35 +0100
Subject: [Bitcoin-development] New BIP32 structure
In-Reply-To: <53342B3E.3050404@gk2.sk>
References: <CANEZrP2hbBVGqytmXR1rAcVama4ONnR586Se-Ch=dsxOzy2O4w@mail.gmail.com>	<53340999.807@gmx.de>	<CAJna-HhmFya+3W67qQt0wMhW=B4vJvwdkr-5WnU+KEaKq7uaUA@mail.gmail.com>
	<5334144A.9040600@gmx.de> <53342B3E.3050404@gk2.sk>
Message-ID: <53342D5F.7090309@gmx.de>



Le 27/03/2014 14:44, Pavol Rusnak a ?crit :
> On 03/27/2014 01:06 PM, Thomas Voegtlin wrote:
>> Yes, I was planning to increase the number of available unused addresses
>> to 10 or 20 in the bip32 version of Electrum.
>
> Also, we'd need to specify a "gap limit" for accounts as well. In TREZOR
> we currently use 0, which means that the scan will stop as soon as we
> hit first account with no transaction history (meaning that its first
> X=10 addresses are unused).
>

I agree with that. I was planning to do the same (no gap)

Note: Maybe we could just look at the first address of each account, 
instead of the first 10 ?




From jim618 at fastmail.co.uk  Thu Mar 27 13:58:19 2014
From: jim618 at fastmail.co.uk (Jim)
Date: Thu, 27 Mar 2014 13:58:19 +0000
Subject: [Bitcoin-development] New BIP32 structure
In-Reply-To: <53342C6C.2060006@gmx.de>
References: <CANEZrP2hbBVGqytmXR1rAcVama4ONnR586Se-Ch=dsxOzy2O4w@mail.gmail.com>
	<53340999.807@gmx.de>
	<CAJna-HhmFya+3W67qQt0wMhW=B4vJvwdkr-5WnU+KEaKq7uaUA@mail.gmail.com>
	<5334144A.9040600@gmx.de>
	<CANEZrP37dO53Jp2rXpPqO3eMd6AWamtXaReq0arMfC=uY2aFUA@mail.gmail.com>
	<CANEZrP21X_Uk+_XWN6y2tgiup07Xd12bZZoFfnheG_Lz-ipbPQ@mail.gmail.com>
	<53342C6C.2060006@gmx.de>
Message-ID: <1395928699.5369.99593201.1CFF9238@webmail.messagingengine.com>

Good to hear the bip32 wallet structure is _so_ close to being standardised.
For MultiBit HD, we have put in support for 12/18/24 words but have the UI 'suggest' to use 12.
You can see this on the wallet creation wizard Gary recently blogged about:
https://multibit.org/blog/2014/03/26/multibit-hd-welcome-wizard.html

There's a little combo for the seed length, with 12 as the default.


@Thomas. You mention gaps. We are creating new addresses on the UI in a panel marked 'Request' where the user also types in a QR code label and a note to themselves. This gets stored away as a first class 'PaymentRequest'. The UI 'suggests' that each address is used once. There will be some gaps (where the payment request is never paid) but we aren't bulk creating addresses. I am hoping this shouldn't cause Electrum a problem.

We are also storing a timestamp (the number of days since the genesis block) to help wallet restore but that is SPV specific.


On Thu, Mar 27, 2014, at 01:49 PM, Thomas Voegtlin wrote:
> 
> 
> Le 27/03/2014 13:49, Mike Hearn a ?crit :
IP32 allows for a range of entropy sizes and it so happens that
> > they picked 256 bits instead of 128 bits.
> >
> > I'd have thought that there is a right answer for this. 2^128 should not
> > be brute forceable, and longer sizes have a cost in terms of making the
> > seeds harder to write down on paper. So should this be a degree of freedom?
> >
> 
> 
> Here is what I understand:
> 
> 2^128 iterations is not brute forcable today, and will not be for the 
> foreseeable future.
> 
> An EC pubkey of length n can be forced in approximately 2^(n/2) 
> iterations (see http://ecc-challenge.info/) Thus, Bitcoin pubkeys, which 
> are 256 bits, would require 2^128 iterations. This is why unused 
> addresses (160 bits hash) are better protected than already used ones.
> 
> However, people tend to believe that a public key of size n requires 2^n 
> iterations. This belief might have been spread by this popular image:
> https://bitcointalk.org/index.php?topic=508880.msg5616146#msg5616146
> 
> 
> ------------------------------------------------------------------------------
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development


-- 
http://bitcoin-solutions.co.uk



From stick at gk2.sk  Thu Mar 27 14:03:23 2014
From: stick at gk2.sk (Pavol Rusnak)
Date: Thu, 27 Mar 2014 15:03:23 +0100
Subject: [Bitcoin-development] New BIP32 structure
In-Reply-To: <53342D5F.7090309@gmx.de>
References: <CANEZrP2hbBVGqytmXR1rAcVama4ONnR586Se-Ch=dsxOzy2O4w@mail.gmail.com>	<53340999.807@gmx.de>	<CAJna-HhmFya+3W67qQt0wMhW=B4vJvwdkr-5WnU+KEaKq7uaUA@mail.gmail.com>	<5334144A.9040600@gmx.de>
	<53342B3E.3050404@gk2.sk> <53342D5F.7090309@gmx.de>
Message-ID: <53342FAB.6040803@gk2.sk>

On 03/27/2014 02:53 PM, Thomas Voegtlin wrote:
> Note: Maybe we could just look at the first address of each account, 
> instead of the first 10 ?

This is a possible optimization, but it adds unnecessary logic. Also it
does not decrease the number of required requests between a client and a
server (e.g. when backend sends responses in "bulks" of 10 addresses or
more).


-- 
Best Regards / S pozdravom,

Pavol Rusnak <stick at gk2.sk>



From mike at plan99.net  Thu Mar 27 14:20:32 2014
From: mike at plan99.net (Mike Hearn)
Date: Thu, 27 Mar 2014 15:20:32 +0100
Subject: [Bitcoin-development] New BIP32 structure
In-Reply-To: <1395928699.5369.99593201.1CFF9238@webmail.messagingengine.com>
References: <CANEZrP2hbBVGqytmXR1rAcVama4ONnR586Se-Ch=dsxOzy2O4w@mail.gmail.com>
	<53340999.807@gmx.de>
	<CAJna-HhmFya+3W67qQt0wMhW=B4vJvwdkr-5WnU+KEaKq7uaUA@mail.gmail.com>
	<5334144A.9040600@gmx.de>
	<CANEZrP37dO53Jp2rXpPqO3eMd6AWamtXaReq0arMfC=uY2aFUA@mail.gmail.com>
	<CANEZrP21X_Uk+_XWN6y2tgiup07Xd12bZZoFfnheG_Lz-ipbPQ@mail.gmail.com>
	<53342C6C.2060006@gmx.de>
	<1395928699.5369.99593201.1CFF9238@webmail.messagingengine.com>
Message-ID: <CANEZrP22Ta7LEgjNLjufs5skA1RaSB+mivqcMHj0iJBNNjZL3Q@mail.gmail.com>

For SPV wallets it's more complicated. There must always be a large
lookahead window for latency reasons. We can't query the entire database
because we don't know how far ahead the user is. So we have to assume there
might be a lot of transaction traffic and create a large window, to reduce
the chances that we run out whilst syncing and have to abort/restart the
sync after resetting the Bloom filter.

If you have a full db index then you can calculate some addresses, query,
if they all get hits, calculate some more, requery, etc. It's a bit simpler.


On Thu, Mar 27, 2014 at 2:58 PM, Jim <jim618 at fastmail.co.uk> wrote:

> Good to hear the bip32 wallet structure is _so_ close to being
> standardised.
> For MultiBit HD, we have put in support for 12/18/24 words but have the UI
> 'suggest' to use 12.
> You can see this on the wallet creation wizard Gary recently blogged about:
> https://multibit.org/blog/2014/03/26/multibit-hd-welcome-wizard.html
>
> There's a little combo for the seed length, with 12 as the default.
>
>
> @Thomas. You mention gaps. We are creating new addresses on the UI in a
> panel marked 'Request' where the user also types in a QR code label and a
> note to themselves. This gets stored away as a first class
> 'PaymentRequest'. The UI 'suggests' that each address is used once. There
> will be some gaps (where the payment request is never paid) but we aren't
> bulk creating addresses. I am hoping this shouldn't cause Electrum a
> problem.
>
> We are also storing a timestamp (the number of days since the genesis
> block) to help wallet restore but that is SPV specific.
>
>
> On Thu, Mar 27, 2014, at 01:49 PM, Thomas Voegtlin wrote:
> >
> >
> > Le 27/03/2014 13:49, Mike Hearn a ?crit :
> IP32 allows for a range of entropy sizes and it so happens that
> > > they picked 256 bits instead of 128 bits.
> > >
> > > I'd have thought that there is a right answer for this. 2^128 should
> not
> > > be brute forceable, and longer sizes have a cost in terms of making the
> > > seeds harder to write down on paper. So should this be a degree of
> freedom?
> > >
> >
> >
> > Here is what I understand:
> >
> > 2^128 iterations is not brute forcable today, and will not be for the
> > foreseeable future.
> >
> > An EC pubkey of length n can be forced in approximately 2^(n/2)
> > iterations (see http://ecc-challenge.info/) Thus, Bitcoin pubkeys, which
> > are 256 bits, would require 2^128 iterations. This is why unused
> > addresses (160 bits hash) are better protected than already used ones.
> >
> > However, people tend to believe that a public key of size n requires 2^n
> > iterations. This belief might have been spread by this popular image:
> > https://bitcointalk.org/index.php?topic=508880.msg5616146#msg5616146
> >
> >
> >
> ------------------------------------------------------------------------------
> > _______________________________________________
> > Bitcoin-development mailing list
> > Bitcoin-development at lists.sourceforge.net
> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
> --
> http://bitcoin-solutions.co.uk
>
>
> ------------------------------------------------------------------------------
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140327/0df83769/attachment.html>

From thomasv1 at gmx.de  Thu Mar 27 15:04:31 2014
From: thomasv1 at gmx.de (Thomas Voegtlin)
Date: Thu, 27 Mar 2014 16:04:31 +0100
Subject: [Bitcoin-development] New BIP32 structure
In-Reply-To: <CAJna-HitjJbL9TnfxTY=+TvfaeNvZM6aPWmNYmHUCwmw6V8PUg@mail.gmail.com>
References: <CANEZrP2hbBVGqytmXR1rAcVama4ONnR586Se-Ch=dsxOzy2O4w@mail.gmail.com>
	<53340999.807@gmx.de>
	<CAJna-HhmFya+3W67qQt0wMhW=B4vJvwdkr-5WnU+KEaKq7uaUA@mail.gmail.com>
	<5334144A.9040600@gmx.de>
	<CAJna-HitjJbL9TnfxTY=+TvfaeNvZM6aPWmNYmHUCwmw6V8PUg@mail.gmail.com>
Message-ID: <53343DFF.2070406@gmx.de>

>
>     Related to this, here is another idea I would like to submit:
>
>     Instead of using a "gap limit" (maximal number of consecutive unused
>     addresses), I think we should get rid of the topology, and simply count
>     the number of unused addresses since the beginning of the sequence.
>     Indeed, the topology of the sequence of addresses is of no interest to
>     the user. Users often misinterpret "gap limit" as the "number of unused
>     addresses available", so I think we should just give them what they want
>     :) This is easier to understand, and it makes things more predictable,
>     because the wallet will always display the same number of unused
>     addresses (except when it is waiting for confirmations).
>
>
> I'm not convinced that it is either simpler to implement nor simpler to
> understand. I considering every "account" as completely independent
> structure (except that it has been derived from master seed). Because of
> this, I don't see a reason why number of generated addresses in one
> account should affect available addresses of other account.


Sorry if I was not clear, but no, I was not proposing that... I propose 
to count the number of unused addresses in each account, independently.

Here is an explanation with pictures:

Currently, Electrum does this:

x = used address
o = unused address

x x x o o x x x x o o o o o
       |           ????????? 5 unused addresses at the end (gap limit =5)
      existing gap, size 2

Case 1:
Suppose the user decides to use the 4th address starting from the end:
x x x o o x x x x x o o o o

After 3 confirmations, Electrum will create one extra address:
x x x o o x x x x x o o o o o
                     ????????? 5 final address (one new)

Case 2:
The user, who understands nothing about topology, decides to use the 
final address:
x x x o o x x x x o o o o x

After 3 confirmations, Electrum will create 5 new addresses:
x x x o o x x x x o o o o x o o o o o
                     |        ????????? 5 new addresses
                  new gap (size 4)


You see that this leads to a number of newly created addresses that 
depends on the address picked by the user. This is the behaviour that I 
want to fix. I think it is bad for two reasons: First, because it is 
unpredictable (I had a user who set his gap limit to 100, and then was 
systematically using the last address of the list, ending up with a lot 
of wasted addresses). Second, because the worst case scenario (case 2) 
creates large gaps, which are less robust to blockchain reorgs than in 
case 1. A reorg in case 1, where the last tx is cancelled will create no 
gap. A reorg in case 2 can result in a gap that is larger than the limit 
(5), if another transaction uses the final addresses. (this is why 
Electrum has to wait for a few confirmations before adding addresses)


So, what I propose is to always have a constant number of unused 
addresses in each account, instead of something that depends on the 
topology. (this number can be 10 or 20, I don't mind, but I guess Mike 
might prefer 20...)




From hozer at hozed.org  Thu Mar 27 15:17:58 2014
From: hozer at hozed.org (Troy Benjegerdes)
Date: Thu, 27 Mar 2014 10:17:58 -0500
Subject: [Bitcoin-development] New BIP32 structure
In-Reply-To: <53342C6C.2060006@gmx.de>
References: <CANEZrP2hbBVGqytmXR1rAcVama4ONnR586Se-Ch=dsxOzy2O4w@mail.gmail.com>
	<53340999.807@gmx.de>
	<CAJna-HhmFya+3W67qQt0wMhW=B4vJvwdkr-5WnU+KEaKq7uaUA@mail.gmail.com>
	<5334144A.9040600@gmx.de>
	<CANEZrP37dO53Jp2rXpPqO3eMd6AWamtXaReq0arMfC=uY2aFUA@mail.gmail.com>
	<CANEZrP21X_Uk+_XWN6y2tgiup07Xd12bZZoFfnheG_Lz-ipbPQ@mail.gmail.com>
	<53342C6C.2060006@gmx.de>
Message-ID: <20140327151758.GE3180@nl.grid.coop>

On Thu, Mar 27, 2014 at 02:49:32PM +0100, Thomas Voegtlin wrote:
> 
> 
> Le 27/03/2014 13:49, Mike Hearn a ?crit :
> > Ah, BIP32 allows for a range of entropy sizes and it so happens that
> > they picked 256 bits instead of 128 bits.
> >
> > I'd have thought that there is a right answer for this. 2^128 should not
> > be brute forceable, and longer sizes have a cost in terms of making the
> > seeds harder to write down on paper. So should this be a degree of freedom?
> >
> 
> 
> Here is what I understand:
> 
> 2^128 iterations is not brute forcable today, and will not be for the 
> foreseeable future.

I foresee 2^128 being brute forceable in 20-25 years. See below.
 
> An EC pubkey of length n can be forced in approximately 2^(n/2) 
> iterations (see http://ecc-challenge.info/) Thus, Bitcoin pubkeys, which 
> are 256 bits, would require 2^128 iterations. This is why unused 
> addresses (160 bits hash) are better protected than already used ones.
> 
> However, people tend to believe that a public key of size n requires 2^n 
> iterations. This belief might have been spread by this popular image:
> https://bitcointalk.org/index.php?topic=508880.msg5616146#msg5616146

So I assume this image is using the Landauer principle for minimum 
energy ( http://en.wikipedia.org/wiki/Landauer%27s_principle ), however
it is unknown (to me at least) if a reversible computing ecdsa forcing
algorithm could be implemented. (this may or may not be a quantum
computing device)

Let's suppose for a moment you could, and get a million times better 
than the Landauer pinciple limit of 2.85 zJ per bit, so we have total
energy to cycle through 128 bits of address space of:

units "2**128 * 2.85zJ / 1e6" "megawatt*hours"
        * 269.39021

An attacker with a sub-Landauer limit/1e6  cracker would need a lot of
silicon area, and a couple of hours energy from a large wind farm, and
could siphon that energy out in a rural area without anyone noticing 
anything other than a few shipping containers and that the wind turbines
are running more on windy days.

If we go back to just Landauer limit, and assume a 10MW system that 
runs 24x7 (much like the NCSA Blue Waters Cray machine), we need:
(please check my math, or point out any stupid assumptions I've made)

units "2**128 * 2.85zJ / 10 megawatts" " years"
        * 3073.1914

Or 3000 years. Well that still sounds pretty safe. How about 250MW?
units "2**128 * 2.85zJ / 250 megawatts" " years"
        * 122.92766

Now I'm starting to get worried, because when I started computing, it
was on an 8-bit CPU that was measured in thousand operations-per-second.
In 1996 the largest supercomputer in the world was ASCII Red, with an
amazing 1 trillion floating-point operations per second. This morning
I have a 1-2 Teraflop water-cooled graphics processor sitting next to
me warming the room.

I expect in 5-10 years we'll have silicon with 256 bit registers that
may be able to do thousands or millions of ECDSA calculations per
second per computation unit.

So if you stop hearing from me here, it's because I found a better 
mailing list, or a got a contract to develop and ECDSA cracker, in 
which case you probably won't hear from me again until I have a talk
at DEFCON showing it off.


-- Troy Benjegerdes



From jgarzik at bitpay.com  Thu Mar 27 15:43:09 2014
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Thu, 27 Mar 2014 11:43:09 -0400
Subject: [Bitcoin-development] New BIP32 structure
In-Reply-To: <F2C8C044-EF92-4CCE-9235-28CA7FCE3526@bitsofproof.com>
References: <CANEZrP2hbBVGqytmXR1rAcVama4ONnR586Se-Ch=dsxOzy2O4w@mail.gmail.com>
	<F2C8C044-EF92-4CCE-9235-28CA7FCE3526@bitsofproof.com>
Message-ID: <CAJHLa0PPAsBLgsy0vgPpUp=UzeR_fWUEzFb5+xtmODEk4MGPVQ@mail.gmail.com>

On Thu, Mar 27, 2014 at 3:09 AM, Tamas Blummer <tamas at bitsofproof.com> wrote:
> A notable suggestion was to instead of building a directory of magic numbers
> (like 0 for Bitcoin, 1 for Litecoin etc) use a hash of the word "Bitcoin",
> "Litecoin", "Dogecoin", so collosion is unlikely and
> cetral directory is not needed.

+1 good idea

-- 
Jeff Garzik
Bitcoin core developer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From allen.piscitello at gmail.com  Thu Mar 27 15:57:51 2014
From: allen.piscitello at gmail.com (Allen Piscitello)
Date: Thu, 27 Mar 2014 10:57:51 -0500
Subject: [Bitcoin-development] New BIP32 structure
In-Reply-To: <CAJHLa0PPAsBLgsy0vgPpUp=UzeR_fWUEzFb5+xtmODEk4MGPVQ@mail.gmail.com>
References: <CANEZrP2hbBVGqytmXR1rAcVama4ONnR586Se-Ch=dsxOzy2O4w@mail.gmail.com>
	<F2C8C044-EF92-4CCE-9235-28CA7FCE3526@bitsofproof.com>
	<CAJHLa0PPAsBLgsy0vgPpUp=UzeR_fWUEzFb5+xtmODEk4MGPVQ@mail.gmail.com>
Message-ID: <CAJfRnm7V6fgcj=TMfa2ZTYWOKtE5aoUT1xnVtKUSyriB=6cagQ@mail.gmail.com>

Don't most of these coins have a magic number already assigned that is
unique? (0xD9B4BEF9 for Bitcoin, 0x0709110B for Testnet, FBC0XB6DB for
Litecoin, etc...).  This seems like a good candidate for identifying coins,
and also supports Testnet cases well.  Maybe there are some alts without
such a magic number that might prevent that?

-Allen


On Thu, Mar 27, 2014 at 10:43 AM, Jeff Garzik <jgarzik at bitpay.com> wrote:

> On Thu, Mar 27, 2014 at 3:09 AM, Tamas Blummer <tamas at bitsofproof.com>
> wrote:
> > A notable suggestion was to instead of building a directory of magic
> numbers
> > (like 0 for Bitcoin, 1 for Litecoin etc) use a hash of the word
> "Bitcoin",
> > "Litecoin", "Dogecoin", so collosion is unlikely and
> > cetral directory is not needed.
>
> +1 good idea
>
> --
> Jeff Garzik
> Bitcoin core developer and open source evangelist
> BitPay, Inc.      https://bitpay.com/
>
>
> ------------------------------------------------------------------------------
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140327/acb6e25e/attachment.html>

From stick at gk2.sk  Thu Mar 27 16:06:20 2014
From: stick at gk2.sk (Pavol Rusnak)
Date: Thu, 27 Mar 2014 17:06:20 +0100
Subject: [Bitcoin-development] New BIP32 structure
In-Reply-To: <CAJfRnm7V6fgcj=TMfa2ZTYWOKtE5aoUT1xnVtKUSyriB=6cagQ@mail.gmail.com>
References: <CANEZrP2hbBVGqytmXR1rAcVama4ONnR586Se-Ch=dsxOzy2O4w@mail.gmail.com>	<F2C8C044-EF92-4CCE-9235-28CA7FCE3526@bitsofproof.com>	<CAJHLa0PPAsBLgsy0vgPpUp=UzeR_fWUEzFb5+xtmODEk4MGPVQ@mail.gmail.com>
	<CAJfRnm7V6fgcj=TMfa2ZTYWOKtE5aoUT1xnVtKUSyriB=6cagQ@mail.gmail.com>
Message-ID: <53344C7C.7020407@gk2.sk>

On 03/27/2014 04:57 PM, Allen Piscitello wrote:
> Don't most of these coins have a magic number already assigned that is
> unique? (0xD9B4BEF9 for Bitcoin, 0x0709110B for Testnet, FBC0XB6DB for
> Litecoin, etc...).  This seems like a good candidate for identifying coins,
> and also supports Testnet cases well.  Maybe there are some alts without
> such a magic number that might prevent that?

That magic number is something I find very unfortunate and superflous in
BIP-32 design. Its only purpose is to distinguish BIP-32 trees for
various altcoins, but it doesn't make sense at all once you start
storing various altcoins in the same tree using the proposed
/m/cointype/reserved'/account'/change/n scheme.

I would love to see that removed from BIP-32 and use always
0x0488B21E/0x0488ADE4 (xpub/xpriv), but that is for different discussion
I guess.

-- 
Best Regards / S pozdravom,

Pavol Rusnak <stick at gk2.sk>



From tamas at bitsofproof.com  Thu Mar 27 16:07:26 2014
From: tamas at bitsofproof.com (Tamas Blummer)
Date: Thu, 27 Mar 2014 17:07:26 +0100
Subject: [Bitcoin-development] New BIP32 structure
In-Reply-To: <CAJfRnm7V6fgcj=TMfa2ZTYWOKtE5aoUT1xnVtKUSyriB=6cagQ@mail.gmail.com>
References: <CANEZrP2hbBVGqytmXR1rAcVama4ONnR586Se-Ch=dsxOzy2O4w@mail.gmail.com>
	<F2C8C044-EF92-4CCE-9235-28CA7FCE3526@bitsofproof.com>
	<CAJHLa0PPAsBLgsy0vgPpUp=UzeR_fWUEzFb5+xtmODEk4MGPVQ@mail.gmail.com>
	<CAJfRnm7V6fgcj=TMfa2ZTYWOKtE5aoUT1xnVtKUSyriB=6cagQ@mail.gmail.com>
Message-ID: <CD13EDB5-D21A-49ED-8E93-3DAA5686C020@bitsofproof.com>

I think not all alts (will) have magic numbers, at least not those defined e.g. with colored coins on top of an other chain.

Also note that the index should have MSB cleared as it would otherwise indicate private derivation. 

Regards,

Tamas Blummer
http://bitsofproof.com

On 27.03.2014, at 16:57, Allen Piscitello <allen.piscitello at gmail.com> wrote:

> Don't most of these coins have a magic number already assigned that is unique? (0xD9B4BEF9 for Bitcoin, 0x0709110B for Testnet, FBC0XB6DB for Litecoin, etc...).  This seems like a good candidate for identifying coins, and also supports Testnet cases well.  Maybe there are some alts without such a magic number that might prevent that?
> 
> -Allen
> 
> 
> On Thu, Mar 27, 2014 at 10:43 AM, Jeff Garzik <jgarzik at bitpay.com> wrote:
> On Thu, Mar 27, 2014 at 3:09 AM, Tamas Blummer <tamas at bitsofproof.com> wrote:
> > A notable suggestion was to instead of building a directory of magic numbers
> > (like 0 for Bitcoin, 1 for Litecoin etc) use a hash of the word "Bitcoin",
> > "Litecoin", "Dogecoin", so collosion is unlikely and
> > cetral directory is not needed.
> 
> +1 good idea
> 
> --
> Jeff Garzik
> Bitcoin core developer and open source evangelist
> BitPay, Inc.      https://bitpay.com/
> 
> ------------------------------------------------------------------------------
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140327/1242a957/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 495 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140327/1242a957/attachment.sig>

From allen.piscitello at gmail.com  Thu Mar 27 16:13:46 2014
From: allen.piscitello at gmail.com (Allen Piscitello)
Date: Thu, 27 Mar 2014 11:13:46 -0500
Subject: [Bitcoin-development] New BIP32 structure
In-Reply-To: <53344C7C.7020407@gk2.sk>
References: <CANEZrP2hbBVGqytmXR1rAcVama4ONnR586Se-Ch=dsxOzy2O4w@mail.gmail.com>
	<F2C8C044-EF92-4CCE-9235-28CA7FCE3526@bitsofproof.com>
	<CAJHLa0PPAsBLgsy0vgPpUp=UzeR_fWUEzFb5+xtmODEk4MGPVQ@mail.gmail.com>
	<CAJfRnm7V6fgcj=TMfa2ZTYWOKtE5aoUT1xnVtKUSyriB=6cagQ@mail.gmail.com>
	<53344C7C.7020407@gk2.sk>
Message-ID: <CAJfRnm79ho7anNZCPmMgDOaYBZkS0jez8Xcrh7GJHRJFheJB8Q@mail.gmail.com>

The idea was to use the magic number as the source for cointype.  If it's
too big, as Tamas showed, perhaps a hash of it, and for coins without a
magic number, a hash of their name (or some unique identifier).

That being said, I agree with Andreas that something that is 90%
inter-operable seems very dangerous and will give people false expectations
when they miss the corner cases.  If the structure isn't going to be shared
completely and have all support shared, having it completely incompatible
along with a mechanism for converting part of it to another wallet seems
superior.  The worst types of losses will occur when someone tests out
something with a limited use case, sees that it appears to work, makes
dangerous assumptions, then gets burned when it's too late.

-Allen


On Thu, Mar 27, 2014 at 11:06 AM, Pavol Rusnak <stick at gk2.sk> wrote:

> On 03/27/2014 04:57 PM, Allen Piscitello wrote:
> > Don't most of these coins have a magic number already assigned that is
> > unique? (0xD9B4BEF9 for Bitcoin, 0x0709110B for Testnet, FBC0XB6DB for
> > Litecoin, etc...).  This seems like a good candidate for identifying
> coins,
> > and also supports Testnet cases well.  Maybe there are some alts without
> > such a magic number that might prevent that?
>
> That magic number is something I find very unfortunate and superflous in
> BIP-32 design. Its only purpose is to distinguish BIP-32 trees for
> various altcoins, but it doesn't make sense at all once you start
> storing various altcoins in the same tree using the proposed
> /m/cointype/reserved'/account'/change/n scheme.
>
> I would love to see that removed from BIP-32 and use always
> 0x0488B21E/0x0488ADE4 (xpub/xpriv), but that is for different discussion
> I guess.
>
> --
> Best Regards / S pozdravom,
>
> Pavol Rusnak <stick at gk2.sk>
>
>
> ------------------------------------------------------------------------------
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140327/e7aa5555/attachment.html>

From pieter.wuille at gmail.com  Thu Mar 27 16:14:05 2014
From: pieter.wuille at gmail.com (Pieter Wuille)
Date: Thu, 27 Mar 2014 17:14:05 +0100
Subject: [Bitcoin-development] New BIP32 structure
In-Reply-To: <CAJfRnm7V6fgcj=TMfa2ZTYWOKtE5aoUT1xnVtKUSyriB=6cagQ@mail.gmail.com>
References: <CANEZrP2hbBVGqytmXR1rAcVama4ONnR586Se-Ch=dsxOzy2O4w@mail.gmail.com>
	<F2C8C044-EF92-4CCE-9235-28CA7FCE3526@bitsofproof.com>
	<CAJHLa0PPAsBLgsy0vgPpUp=UzeR_fWUEzFb5+xtmODEk4MGPVQ@mail.gmail.com>
	<CAJfRnm7V6fgcj=TMfa2ZTYWOKtE5aoUT1xnVtKUSyriB=6cagQ@mail.gmail.com>
Message-ID: <CAPg+sBjwf1TcK1CGKVKFzYbV-78j8t-pav7=PEgG7Yqi6-yE7A@mail.gmail.com>

Just chiming in...

I'm not opposed to a more generic default key tree, but we need to
standardize this soon I believe. There are already existing code bases
that implement BIP32 wallets (and more are popping up...); just using
a separate one will result in lots of incompibilities.

That said, I'm not convinced about the extra layers. The "cointype" in
my opinion isn't necessary inside the derivation. There is already
support (4 bytes!) for magic bytes in the serialized form. Inside
applications/p2p it should always be known to which chain it applies,
and outside of that you shouldn't transfer raw keys. Maybe seeds need
some marker, but that's a separate case anyway. Mainnet and testnet
have specified magics here already - alts can define what they want
imho.

A 'reserved' field for future extensions may be useful, but as already
suggested by Mike, I don't believe we can encode how key chains are to
be used inside the derivation structure anyway. The most basic case
(not losing money in a wallet without special structure) can perhaps
be supported with just "the blockchain is your wallet", but I don't
believe this principle can scale to more advanced uses anyway, and you
need metadata in the wallet to deal with it.

In my view, your wallet just has a bunch of chains, and each chain
gets used for a particular purpose, fixing how the derivation beneath
it works. Either that is as a wallet, as part of a pair of multisig
keys, as a recurring payment receiver, ... or more complex things.
Some of these will require extra layers beneath, but that is
application specific. You would import a chain into your (advanced)
wallet with a particular extpub/extpriv code, and some metadata on how
to use it. Serialization formats for such designated extra uses sounds
better to me than trying to fit it into the derivation structure.

-- 
Pieter


On Thu, Mar 27, 2014 at 4:57 PM, Allen Piscitello
<allen.piscitello at gmail.com> wrote:
> Don't most of these coins have a magic number already assigned that is
> unique? (0xD9B4BEF9 for Bitcoin, 0x0709110B for Testnet, FBC0XB6DB for
> Litecoin, etc...).  This seems like a good candidate for identifying coins,
> and also supports Testnet cases well.  Maybe there are some alts without
> such a magic number that might prevent that?
>
> -Allen
>
>
> On Thu, Mar 27, 2014 at 10:43 AM, Jeff Garzik <jgarzik at bitpay.com> wrote:
>>
>> On Thu, Mar 27, 2014 at 3:09 AM, Tamas Blummer <tamas at bitsofproof.com>
>> wrote:
>> > A notable suggestion was to instead of building a directory of magic
>> > numbers
>> > (like 0 for Bitcoin, 1 for Litecoin etc) use a hash of the word
>> > "Bitcoin",
>> > "Litecoin", "Dogecoin", so collosion is unlikely and
>> > cetral directory is not needed.
>>
>> +1 good idea
>>
>> --
>> Jeff Garzik
>> Bitcoin core developer and open source evangelist
>> BitPay, Inc.      https://bitpay.com/
>>
>>
>> ------------------------------------------------------------------------------
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
>
> ------------------------------------------------------------------------------
>
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>



From jtimon at monetize.io  Thu Mar 27 16:14:04 2014
From: jtimon at monetize.io (=?ISO-8859-1?Q?Jorge_Tim=F3n?=)
Date: Thu, 27 Mar 2014 17:14:04 +0100
Subject: [Bitcoin-development] Tree-chains preliminary summary
In-Reply-To: <CAAS2fgTovm7OtFFqdRYWDw5KxV+r5WD598JPnG5ydMYAs_gQWg@mail.gmail.com>
References: <20140322084702.GA13436@savin> <20140322150836.GG3180@nl.grid.coop>
	<20140322190825.GB6047@savin> <532DE7E6.4050304@monetize.io>
	<20140325122851.GA9818@savin> <5331EF3D.4000504@monetize.io>
	<CAAS2fgTovm7OtFFqdRYWDw5KxV+r5WD598JPnG5ydMYAs_gQWg@mail.gmail.com>
Message-ID: <CAC1+kJMkiVLEnHKibWbaCdtEwCE30M4SPM96H6Nq7kZey-_4eg@mail.gmail.com>

I'll make sure I understand your proposal better before commenting
much on it, but at a first glance, I don't see how it is incompatible
with 2 way peg and merged mining itself.
Why wouldn't you want merged mining for the root of your tree?
A miner could only chose a leaf block at a time, but it could merged
mine with other leafs in other independent trees.
Anyway, I'll better comment on the 2 way peg and merged mining issues
raised so far.

On 3/25/14, Gregory Maxwell <gmaxwell at gmail.com> wrote:
> On Tue, Mar 25, 2014 at 2:03 PM, Mark Friedenbach <mark at monetize.io> wrote:
>> More importantly, to your last point there is absolutely no way this
>> scheme can lead to inflation. The worst that could happen is theft of
>> coins willingly put into the pegging pool. But in no way is it possible
>> to inflate the coin supply.
>
> I don't think it would be entirely unfair to describe one of the
> possible ways a secondary coin becoming unbacked can play out as
> inflation-- after all, people have described altcoins as inflation. In
> the worst case its no _worse_ inflation, I think, than an altcoin is--
> however.

I think that's an obscure corner case that is not likely going to ever
be implemented.
If you produce real inflation there will likely be a "bank run".
If you're going to implement something equivalent to demurrage you
should call it demurrage instead of inflation.
And that's only for the pegged coin in the side chain: BITCOINS IN THE
MAIN CHAIN WILL NEVER BE INFLATED USING 2P2.

So I think it's less confusing if we just say that 2-way peg can't
produce inflation in general, and leave "unless you explicitly
introduce an inflation mechanism" as a probably unnecessary
clarification.

> I see your point, but gmaxwell accurately guesses below that when I'm
> talking about inflation, I'm including the inflation of the alt too.

You don't need inflation on the side chain. You don't need to create
another currency to create another chain with different and maybe
experimental features, that's the whole point.

With merged mining, you're adding up the different created seigniorage
subsidies to the same fire to share the heat.
With 2-way peg, you don't even need to create a new p2p currency with
a seigniorage to burn on hashes or be accused of "pre-mining" as the
more ecological alternative in existence.
Your chain can secure itself on fees, just like bitcoin in the future.
Merged mining will help, but it's not the panacea and you will need to
reward miners because that's what your security ultimately depends on.
This is mostly about not burning the world, it may not be as
interesting to you as improving bitcoin's scalability but you're not
doing anyone a favor by presenting both concepts as being
incompatible, not even yourself.

> With tree-chains that's particularly obvious as the scheme doesn't try
> to privilege one chain over another beyond parent-child relationships.

If I understand it correctly, all the utxo nodes in the tree implement
the same rules so doesn't seem suitable to solve the same problems.
I understand that merged mining IS NOT a solution to scalability on
its own, having 10 independent 1MB blocks is no worse than 1 10MB
block in terms of performance vs centralization.
But maybe it's possible to have a 10 GB sharded side-chain (your
proposal) that it's merged mined with the main chain and where the
currency of the side-chain comes from.
So merged mining could help solve the scalability problem indirectly.
And 2-way peg could be a useful previous step for your proposal to be
deployed "on production", with real bitcoins without forcing all
bitcoin users to take the associated risks, only the people who opt
in.

> Incidentally, I understand that the pegged chains are meant to be
> merge-mined.

2 way peg doesn't require merged mining but it is assumed that merged
mining will be used since it provides more security than independent
mining.
I thought you agreed with this and your claim was just that merged
mining is less secure than "embedded consensus", something I have
never denied, my complain against "embedded consensus" is that it
doesn't seem to scale (with Bitcoin as it is today) and can't offer
many features that a hardfork merged mined chain could offer (like
those explained on our freimarkets proposal).
But since you're implying again that "merged mining is superior to
independent mining" is generally false, I invite you again to
dismantle my example

http://sourceforge.net/p/bitcoin/mailman/message/31806950/

or to prove your hypothesis that "is free to attack merged mining
chains" by attacking namecoin for free. Either one will serve, my
you're not responding to any of the suggestions.
Instead, you're saying that "people defending merged mining assume
that attackers are economically rational". I think you're referring to
me and it's false.
Of course the attacker doesn't need to be economically rational. For
some unknown reason he's attacking a chain, without questioning the
rationality of the attack, I just sum costs, including opportunity
costs, because costs are all what proof of work security is about.
Please, do one of the two before continuing your merged mining
defamation campaign.

> merge-mined. To me this seems problematic and cheap to attack. Consider
> a merge-mined zerocoin sidechain: Can you profit from depositing some
> coins, taking them out again, then reorging the zerocoin chain to undo
> that withdrawl on the zerocoin side, and performing it all over again?

That's what the quieting periods are for.
After the widrawal, the coins are blocked until they reach maturity or
someone else provides a reorg proof invalidating the withdrawal.

> It'd be easy to drain the pegging pool that way, and with merge-mining
> there's no inherent cost to you to do so. Not unique to zerocoin either
> of course, just in that case who actually double-spent is unknowable.

We could talk about this in the 2-way peg thread, but anyway...
Let's say 80% of bitcoin miners also mine Zerocoin.
Let's say zerocoin's reward ZR is 1% of Bitcoin's Reward BR
Let's say "megahash" hashes 40% of Bitcoin's mining and is our attacker.
Previously megahash rented its hardware for 0.41 BR for each GHash/s,
because that was the market price at the time.
Now it will mine bitcoin and attack zerocoin, so it will recover 0.4
BR, leaving the costs of the attack at 0.01 BR per GHash/s (assuming
it doesn't rent additional hardware, which could also do).
Since it controls 40% of Bitcoins hashing, it controls approximately
50% of zerocoin hashing.
So megahash tries to withdraw AR coins (attack reward) and then double spend.
>From block N in zerocoin (ZN), it starts building an alternative
chain that doesn't reveal with the double spend.
After X blocks, he publishes a withdraw on zerocoin.
To collect coins from the pegged pool on bitcoin's chain, he provides
a proof that a chain including the withdraw with length at least X +
ZM (maturity in zerocoin)
To access those funds, he will have to wait BM (Bitcoin maturity)
blocks in main chain during which anyone can recover the funds to the
pegged pool in exchange of a fee that megahash has to provide itself,
by providing a chain with the same root, more work and in which the
committed utxo doesn't include the withdrawal transaction.
So with merged mining, megahash has been spending 0.01 BR per GHash/s
from block ZN to block ZN + X + ZM and the attack will still likely
fail unless it is willing to also censor all reorg proofs in the main
chain, otherwise it will has to start again when such a proof appears.

Without merged mining and maintaining the rewards, the numbers would
be practically the same, with the difference that the attacker could
sacrifice its bitcoin income (there's no reason to do it with merged
mining) to attack the independent chain more brutally (40% of bitcoin
would be 4000% of the independent chain instead of 50% like in the example).

Anyway the particular situation in which a single entity controls 40%
of the hashing power should be rare. That's potentially dangerous for
bitcoin and although changing the hashing algorithm would be painful
and risky, I would be terribly scared of that happening if I was that
entity. Letting my percentage of hash rate dilute as others grow would
definitely be part of my plan.

Although this is again completely orthogonal to the merged mining or
not discussion, hashing algorithms are often mixed in the discussions
against merged mining. If you had to introduce that hashing algorithm
hardfork change you will probably chose something with similar
properties than those of SHA256, like being easy to implement
specialized hardware for it. You could even chose a memory-hard
algorithm if you want to promote ASIC production centralization, but
you can't chose an "anti-ASIC" algorithm because those don't exist.
It is well known that any information machine that can be built with
software can also be built with specialized hardware and viceversa.
Sadly that kind of fallacy is often used to justify the ecological
crime that starting a new chain with no plans of doing merged mining
represents.

But as said this is orthogonal to sharded chains, 2 way peg and
merged mining, which are also only indirectly related with each other.

> Well I'll certainly raid 2-way pegging for ideas. :) I think the big
> difference between the two is how I'd like to see tree-chains reduce
> dependence on miner validation - ideally miners wouldn't validate at all
> if the efficiency can be regained with ZK-SNARKS or something. Dropping
> validation from mining could also avoid the problem of how in Bitcoin
> there is no explicit mechanism that actually forces miners to validate
> the chain. Not unlike gmaxwell's "firedrill" ideas, you would be able to
> "firedrill" clients at any point by just mining some invalid garage.

Yes, snarks could do wonders. For 2-way peg too, SPV proofs could
become full proofs and headers compression could probably improve a
lot as well.
But let's find out everything that can be done without snarks first.

> (not to say miners would certainly not do validation - you still want to
> be able to pay them transaction fees, but in that case they're doing the
> validation only for themselves)

Mhmm, if miners don't validate, they risk to mine on top of
invalid blocks. Are you saying they don't care about that?



From stick at gk2.sk  Thu Mar 27 16:21:12 2014
From: stick at gk2.sk (Pavol Rusnak)
Date: Thu, 27 Mar 2014 17:21:12 +0100
Subject: [Bitcoin-development] New BIP32 structure
In-Reply-To: <CAPg+sBjwf1TcK1CGKVKFzYbV-78j8t-pav7=PEgG7Yqi6-yE7A@mail.gmail.com>
References: <CANEZrP2hbBVGqytmXR1rAcVama4ONnR586Se-Ch=dsxOzy2O4w@mail.gmail.com>	<F2C8C044-EF92-4CCE-9235-28CA7FCE3526@bitsofproof.com>	<CAJHLa0PPAsBLgsy0vgPpUp=UzeR_fWUEzFb5+xtmODEk4MGPVQ@mail.gmail.com>	<CAJfRnm7V6fgcj=TMfa2ZTYWOKtE5aoUT1xnVtKUSyriB=6cagQ@mail.gmail.com>
	<CAPg+sBjwf1TcK1CGKVKFzYbV-78j8t-pav7=PEgG7Yqi6-yE7A@mail.gmail.com>
Message-ID: <53344FF8.7030204@gk2.sk>

On 03/27/2014 05:14 PM, Pieter Wuille wrote:
> That said, I'm not convinced about the extra layers. The "cointype" in
> my opinion isn't necessary inside the derivation. There is already
> support (4 bytes!) for magic bytes in the serialized form. Inside

Cointype in path is for separation purposes, not for identification.

-- 
Best Regards / S pozdravom,

Pavol Rusnak <stick at gk2.sk>



From pieter.wuille at gmail.com  Thu Mar 27 16:28:23 2014
From: pieter.wuille at gmail.com (Pieter Wuille)
Date: Thu, 27 Mar 2014 17:28:23 +0100
Subject: [Bitcoin-development] New BIP32 structure
In-Reply-To: <53344FF8.7030204@gk2.sk>
References: <CANEZrP2hbBVGqytmXR1rAcVama4ONnR586Se-Ch=dsxOzy2O4w@mail.gmail.com>
	<F2C8C044-EF92-4CCE-9235-28CA7FCE3526@bitsofproof.com>
	<CAJHLa0PPAsBLgsy0vgPpUp=UzeR_fWUEzFb5+xtmODEk4MGPVQ@mail.gmail.com>
	<CAJfRnm7V6fgcj=TMfa2ZTYWOKtE5aoUT1xnVtKUSyriB=6cagQ@mail.gmail.com>
	<CAPg+sBjwf1TcK1CGKVKFzYbV-78j8t-pav7=PEgG7Yqi6-yE7A@mail.gmail.com>
	<53344FF8.7030204@gk2.sk>
Message-ID: <CAPg+sBhbx5vy_hewAkFPaiXHzSMNH0qLhEYGjPmQMjR5StP-tw@mail.gmail.com>

On Thu, Mar 27, 2014 at 5:21 PM, Pavol Rusnak <stick at gk2.sk> wrote:
> Cointype in path is for separation purposes, not for identification.

I don't understand what that gains you.

-- 
Pieter



From allen.piscitello at gmail.com  Thu Mar 27 17:49:44 2014
From: allen.piscitello at gmail.com (Allen Piscitello)
Date: Thu, 27 Mar 2014 12:49:44 -0500
Subject: [Bitcoin-development] New BIP32 structure
In-Reply-To: <CAPg+sBhbx5vy_hewAkFPaiXHzSMNH0qLhEYGjPmQMjR5StP-tw@mail.gmail.com>
References: <CANEZrP2hbBVGqytmXR1rAcVama4ONnR586Se-Ch=dsxOzy2O4w@mail.gmail.com>
	<F2C8C044-EF92-4CCE-9235-28CA7FCE3526@bitsofproof.com>
	<CAJHLa0PPAsBLgsy0vgPpUp=UzeR_fWUEzFb5+xtmODEk4MGPVQ@mail.gmail.com>
	<CAJfRnm7V6fgcj=TMfa2ZTYWOKtE5aoUT1xnVtKUSyriB=6cagQ@mail.gmail.com>
	<CAPg+sBjwf1TcK1CGKVKFzYbV-78j8t-pav7=PEgG7Yqi6-yE7A@mail.gmail.com>
	<53344FF8.7030204@gk2.sk>
	<CAPg+sBhbx5vy_hewAkFPaiXHzSMNH0qLhEYGjPmQMjR5StP-tw@mail.gmail.com>
Message-ID: <CAJfRnm7Leu7+e6XPm7RRa8SBZXZGycaRbEktVTE2FkGrPjq4vg@mail.gmail.com>

The benefit I see is avoiding reuse of keys between coins while not having
each wallet implementation have to know about each coin in order to scan
for transactions.  Wallet X supports Doge and Bitcoin.  If both used a
shared sequence of keys, say the first two end up Bitcoin, then 10 Doge,
then some more Bitcoin.  If you took this seed to Wallet Y, which only
supports Bitcoin (either the wallet's support or what is installed on the
system it's being used), it will see a gap of 10 addresses, and presume no
more scanning with a 5 gap limit.  The alternative is to reuse keys for
each coin.

It also seems like a solution might be to only expect interoperability on a
single sequence, and provide backups of each final sequence to use between
different wallet implementations.  This allows flexibility in hierarchies
depending on needs and support of wallet, but allows sharing.  The short
seed would only be useful for the same wallet, but sharing between wallets
would use the longer keys.  That will give predictable behavior for users
(although less friendly) and lead to less errors.

-Allen


On Thu, Mar 27, 2014 at 11:28 AM, Pieter Wuille <pieter.wuille at gmail.com>wrote:

> On Thu, Mar 27, 2014 at 5:21 PM, Pavol Rusnak <stick at gk2.sk> wrote:
> > Cointype in path is for separation purposes, not for identification.
>
> I don't understand what that gains you.
>
> --
> Pieter
>
>
> ------------------------------------------------------------------------------
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140327/0e05360a/attachment.html>

From mike at plan99.net  Fri Mar 28 11:07:04 2014
From: mike at plan99.net (Mike Hearn)
Date: Fri, 28 Mar 2014 12:07:04 +0100
Subject: [Bitcoin-development] BIP 70 refund field
Message-ID: <CANEZrP0AwR3WgHfwYWcrC9Z_MHPDwymWXAQwp7D8XZ+o2FsK8g@mail.gmail.com>

Modern devices like smartphones and tablets do not have swap files. This
design is chosen to ensure responsive, fluid UI that can avoid blocking on
disk regardless of how much multi-tasking is done, but it creates ripples
that impact everything else.

One implication of this is that on these devices, we cannot store all keys
or transactions in memory forever. BIP 70 has an expiry field for
PaymentRequests that we can use to allow us to eventually stop loading
those keys into RAM - at that point payments to those keys would no longer
be recognised. But there's no equivalent for refund addresses.

More generally, though we re-used the output structure to define the
refund, we didn't (for some reason that I forgot) reuse PaymentDetails,
even though the payment details for a refund are indeed PaymentDetails.

Though I am loathe to go back and redesign this part of BIP 70 so soon
after we shipped v1, it seems to me like the refund feature may be hard to
implement on phones if there's no time limit for when you can receive a
refund. Otherwise a wallet has to be looking out for refunds for payments
you may have made years ago. So perhaps we should add a new refund field
that embeds a PaymentDetails structure instead of being just a list of
outputs.

We could try and solve this problem some other way purely internally, by
doing a kind of wallet-specific swapping process in which things like Bloom
filters are calculated without all keys in them being held in memory at
once (perhaps caching filters for old parts of the key chain on disk), so
you can have "infinite" wallets, but eventually the huge Bloom filters that
would result would hurt efficiency in other ways. So key expiry seems
pretty fundamental to scalability.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140328/9b190fa7/attachment.html>

From andreas at schildbach.de  Fri Mar 28 11:25:53 2014
From: andreas at schildbach.de (Andreas Schildbach)
Date: Fri, 28 Mar 2014 12:25:53 +0100
Subject: [Bitcoin-development] BIP 70 refund field
In-Reply-To: <CANEZrP0AwR3WgHfwYWcrC9Z_MHPDwymWXAQwp7D8XZ+o2FsK8g@mail.gmail.com>
References: <CANEZrP0AwR3WgHfwYWcrC9Z_MHPDwymWXAQwp7D8XZ+o2FsK8g@mail.gmail.com>
Message-ID: <lh3m7i$v18$1@ger.gmane.org>

I see the problem.

However, I don't see how PaymentDetails can be an answer. None of the
fields (other than outputs and network) can be known in advance (at the
time of the initial payment).

You're probably aiming for an expires field? How would you refund a
payment after expiry? Note its not your choice wether to refund a
payment -- it can be ordered by a court years after the payment happened.

Btw. another problem is that the refund address is currently unprotected.


On 03/28/2014 12:07 PM, Mike Hearn wrote:
> Modern devices like smartphones and tablets do not have swap files. This
> design is chosen to ensure responsive, fluid UI that can avoid blocking
> on disk regardless of how much multi-tasking is done, but it creates
> ripples that impact everything else.
> 
> One implication of this is that on these devices, we cannot store all
> keys or transactions in memory forever. BIP 70 has an expiry field for
> PaymentRequests that we can use to allow us to eventually stop loading
> those keys into RAM - at that point payments to those keys would no
> longer be recognised. But there's no equivalent for refund addresses.
> 
> More generally, though we re-used the output structure to define the
> refund, we didn't (for some reason that I forgot) reuse PaymentDetails,
> even though the payment details for a refund are indeed PaymentDetails.
> 
> Though I am loathe to go back and redesign this part of BIP 70 so soon
> after we shipped v1, it seems to me like the refund feature may be hard
> to implement on phones if there's no time limit for when you can receive
> a refund. Otherwise a wallet has to be looking out for refunds for
> payments you may have made years ago. So perhaps we should add a new
> refund field that embeds a PaymentDetails structure instead of being
> just a list of outputs.
> 
> We could try and solve this problem some other way purely internally, by
> doing a kind of wallet-specific swapping process in which things like
> Bloom filters are calculated without all keys in them being held in
> memory at once (perhaps caching filters for old parts of the key chain
> on disk), so you can have "infinite" wallets, but eventually the huge
> Bloom filters that would result would hurt efficiency in other ways. So
> key expiry seems pretty fundamental to scalability.
> 
> 
> 
> 
> ------------------------------------------------------------------------------
> 
> 
> 
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 





From tamas at bitsofproof.com  Fri Mar 28 11:30:39 2014
From: tamas at bitsofproof.com (Tamas Blummer)
Date: Fri, 28 Mar 2014 12:30:39 +0100
Subject: [Bitcoin-development] BIP 70 refund field
In-Reply-To: <CANEZrP0AwR3WgHfwYWcrC9Z_MHPDwymWXAQwp7D8XZ+o2FsK8g@mail.gmail.com>
References: <CANEZrP0AwR3WgHfwYWcrC9Z_MHPDwymWXAQwp7D8XZ+o2FsK8g@mail.gmail.com>
Message-ID: <612FFAAD-14FF-4261-927D-BD2E0F287257@bitsofproof.com>

Instead of a payment request and refund, businesses would actually need a payment channel, that once established allows for multiple payments back and forth between counterparties.

One might have a number of open channels until the business relationship is assumed. The customer might decide to close the channel explicitelly once he does no longer expect a payment. 

Regards,

Tam?s Blummer
http://bitsofproof.com

On 28.03.2014, at 12:07, Mike Hearn <mike at plan99.net> wrote:

> Modern devices like smartphones and tablets do not have swap files. This design is chosen to ensure responsive, fluid UI that can avoid blocking on disk regardless of how much multi-tasking is done, but it creates ripples that impact everything else.
> 
> One implication of this is that on these devices, we cannot store all keys or transactions in memory forever. BIP 70 has an expiry field for PaymentRequests that we can use to allow us to eventually stop loading those keys into RAM - at that point payments to those keys would no longer be recognised. But there's no equivalent for refund addresses.
> 
> More generally, though we re-used the output structure to define the refund, we didn't (for some reason that I forgot) reuse PaymentDetails, even though the payment details for a refund are indeed PaymentDetails.
> 
> Though I am loathe to go back and redesign this part of BIP 70 so soon after we shipped v1, it seems to me like the refund feature may be hard to implement on phones if there's no time limit for when you can receive a refund. Otherwise a wallet has to be looking out for refunds for payments you may have made years ago. So perhaps we should add a new refund field that embeds a PaymentDetails structure instead of being just a list of outputs.
> 
> We could try and solve this problem some other way purely internally, by doing a kind of wallet-specific swapping process in which things like Bloom filters are calculated without all keys in them being held in memory at once (perhaps caching filters for old parts of the key chain on disk), so you can have "infinite" wallets, but eventually the huge Bloom filters that would result would hurt efficiency in other ways. So key expiry seems pretty fundamental to scalability.
> 
> 
> ------------------------------------------------------------------------------
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140328/0b3f63c9/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 495 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140328/0b3f63c9/attachment.sig>

From mike at plan99.net  Fri Mar 28 11:31:35 2014
From: mike at plan99.net (Mike Hearn)
Date: Fri, 28 Mar 2014 12:31:35 +0100
Subject: [Bitcoin-development] BIP 70 refund field
In-Reply-To: <lh3m7i$v18$1@ger.gmane.org>
References: <CANEZrP0AwR3WgHfwYWcrC9Z_MHPDwymWXAQwp7D8XZ+o2FsK8g@mail.gmail.com>
	<lh3m7i$v18$1@ger.gmane.org>
Message-ID: <CANEZrP3zBFs=JpJi6eazTvrTaRX6XCJLu-zrraE6bezYW7b9pQ@mail.gmail.com>

On Fri, Mar 28, 2014 at 12:25 PM, Andreas Schildbach
<andreas at schildbach.de>wrote:

> However, I don't see how PaymentDetails can be an answer. None of the
> fields (other than outputs and network) can be known in advance (at the
> time of the initial payment).
>

You don't need all the fields indeed, but they're mostly optional (except
time). So for the refund you'd fill out:

outputs (same as today)
time
expiry_time

You're probably aiming for an expires field? How would you refund a
> payment after expiry?
>

It'd have to be ad-hoc at that point. OK, you don't get the nice UI that
the refund field provides. Oh well. It should be rare to get refunds very
very late after the purchase.


> Btw. another problem is that the refund address is currently unprotected.
>

Yes indeed as is the rest of the Payment structure. We talked about signing
it with one of the keys that's signing the Bitcoin transaction as well. But
it seems like a bit overkill. Usually it'll be submitted over HTTPS or a
(secured!) Bluetooth channel though so tampering with it should not be
possible.

However this does raise the question of whether a refund should be a full
blown PaymentRequest with optional PKI signing. Normally, I think, a seller
does not know or care about the identity of a buyer for refunds, outside of
their own tracking system.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140328/e3ec4be5/attachment.html>

From laanwj at gmail.com  Fri Mar 28 11:38:51 2014
From: laanwj at gmail.com (Wladimir)
Date: Fri, 28 Mar 2014 12:38:51 +0100
Subject: [Bitcoin-development] BIP 70 refund field
In-Reply-To: <lh3m7i$v18$1@ger.gmane.org>
References: <CANEZrP0AwR3WgHfwYWcrC9Z_MHPDwymWXAQwp7D8XZ+o2FsK8g@mail.gmail.com>
	<lh3m7i$v18$1@ger.gmane.org>
Message-ID: <CA+s+GJCf9o6VEky=JXgrG8v39hyQtPz71yuftF_jyp0bX9WHsA@mail.gmail.com>

On Fri, Mar 28, 2014 at 12:25 PM, Andreas Schildbach
<andreas at schildbach.de>wrote:

> I see the problem.
>
> However, I don't see how PaymentDetails can be an answer. None of the
> fields (other than outputs and network) can be known in advance (at the
> time of the initial payment).
>
> You're probably aiming for an expires field? How would you refund a
> payment after expiry? Note its not your choice wether to refund a
> payment -- it can be ordered by a court years after the payment happened.
>

Communication between the merchant and buyer would be needed in this case.

I'd say that would be not unreasonable if something is to be refunded after
a year or more. After all, people may have moved, bank accounts changed,
even outside the bitcoin world.

It should probably not be accepted to set a very low expiration time for
the refund address, like <3 months, as it's as bad as not providing a
refund address at all and brings back all the pre-BIP70 confusion.

Wladimir
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140328/330c229c/attachment.html>

From tamas at bitsofproof.com  Fri Mar 28 11:45:03 2014
From: tamas at bitsofproof.com (Tamas Blummer)
Date: Fri, 28 Mar 2014 12:45:03 +0100
Subject: [Bitcoin-development] BIP 70 refund field
In-Reply-To: <CA+s+GJCf9o6VEky=JXgrG8v39hyQtPz71yuftF_jyp0bX9WHsA@mail.gmail.com>
References: <CANEZrP0AwR3WgHfwYWcrC9Z_MHPDwymWXAQwp7D8XZ+o2FsK8g@mail.gmail.com>
	<lh3m7i$v18$1@ger.gmane.org>
	<CA+s+GJCf9o6VEky=JXgrG8v39hyQtPz71yuftF_jyp0bX9WHsA@mail.gmail.com>
Message-ID: <122FC5AD-2117-4CAF-817F-45B00F57D549@bitsofproof.com>

Yes, you begin to see that the payment protocol, as is has a too narrow scope of a web cart - customer, and does not even fit that.

It is not about payment requests but about business relationships. We need a protocol that deals with that concept instead of individual requests,
so we really get out of the hell of addresses. Business relationships are terminated by the parties at their own and not bey algorithms and timeouts.

Regards,

Tamas Blummer
http://bitsofproof.com

On 28.03.2014, at 12:38, Wladimir <laanwj at gmail.com> wrote:

> 
> On Fri, Mar 28, 2014 at 12:25 PM, Andreas Schildbach <andreas at schildbach.de> wrote:
> I see the problem.
> 
> However, I don't see how PaymentDetails can be an answer. None of the
> fields (other than outputs and network) can be known in advance (at the
> time of the initial payment).
> 
> You're probably aiming for an expires field? How would you refund a
> payment after expiry? Note its not your choice wether to refund a
> payment -- it can be ordered by a court years after the payment happened.
> 
> Communication between the merchant and buyer would be needed in this case.
> 
> I'd say that would be not unreasonable if something is to be refunded after a year or more. After all, people may have moved, bank accounts changed, even outside the bitcoin world.
> 
> It should probably not be accepted to set a very low expiration time for the refund address, like <3 months, as it's as bad as not providing a refund address at all and brings back all the pre-BIP70 confusion.
> 
> Wladimir
> 
> ------------------------------------------------------------------------------
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140328/9fd03d99/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 495 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140328/9fd03d99/attachment.sig>

From mike at plan99.net  Fri Mar 28 11:46:53 2014
From: mike at plan99.net (Mike Hearn)
Date: Fri, 28 Mar 2014 12:46:53 +0100
Subject: [Bitcoin-development] BIP 70 refund field
In-Reply-To: <122FC5AD-2117-4CAF-817F-45B00F57D549@bitsofproof.com>
References: <CANEZrP0AwR3WgHfwYWcrC9Z_MHPDwymWXAQwp7D8XZ+o2FsK8g@mail.gmail.com>
	<lh3m7i$v18$1@ger.gmane.org>
	<CA+s+GJCf9o6VEky=JXgrG8v39hyQtPz71yuftF_jyp0bX9WHsA@mail.gmail.com>
	<122FC5AD-2117-4CAF-817F-45B00F57D549@bitsofproof.com>
Message-ID: <CANEZrP30UsWsBJ-pzb=LQP-MB+PDE0buRdRbuUiOJxANLF9cpw@mail.gmail.com>

I don't want to manage a "business relationship" with every shop I buy
something from. That's way too much effort. There can certainly be cases
where a more complicated relationship is created by bootstrapping off
BIP70, perhaps with an extension, but nailing the ordinary buyer-to-seller
relationship seems like a good scope for BIP70 for now.


On Fri, Mar 28, 2014 at 12:45 PM, Tamas Blummer <tamas at bitsofproof.com>wrote:

> Yes, you begin to see that the payment protocol, as is has a too narrow
> scope of a web cart - customer, and does not even fit that.
>
> It is not about payment requests but about business relationships. We need
> a protocol that deals with that concept instead of individual requests,
> so we really get out of the hell of addresses. Business relationships are
> terminated by the parties at their own and not bey algorithms and timeouts.
>
> Regards,
>
> Tamas Blummer
> http://bitsofproof.com
>
> On 28.03.2014, at 12:38, Wladimir <laanwj at gmail.com> wrote:
>
>
> On Fri, Mar 28, 2014 at 12:25 PM, Andreas Schildbach <
> andreas at schildbach.de> wrote:
>
>> I see the problem.
>>
>> However, I don't see how PaymentDetails can be an answer. None of the
>> fields (other than outputs and network) can be known in advance (at the
>> time of the initial payment).
>>
>> You're probably aiming for an expires field? How would you refund a
>> payment after expiry? Note its not your choice wether to refund a
>> payment -- it can be ordered by a court years after the payment happened.
>>
>
> Communication between the merchant and buyer would be needed in this case.
>
> I'd say that would be not unreasonable if something is to be refunded
> after a year or more. After all, people may have moved, bank accounts
> changed, even outside the bitcoin world.
>
> It should probably not be accepted to set a very low expiration time for
> the refund address, like <3 months, as it's as bad as not providing a
> refund address at all and brings back all the pre-BIP70 confusion.
>
> Wladimir
>
>
> ------------------------------------------------------------------------------
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
>
>
> ------------------------------------------------------------------------------
>
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140328/ac302555/attachment.html>

From tamas at bitsofproof.com  Fri Mar 28 11:54:31 2014
From: tamas at bitsofproof.com (Tamas Blummer)
Date: Fri, 28 Mar 2014 12:54:31 +0100
Subject: [Bitcoin-development] BIP 70 refund field
In-Reply-To: <CANEZrP30UsWsBJ-pzb=LQP-MB+PDE0buRdRbuUiOJxANLF9cpw@mail.gmail.com>
References: <CANEZrP0AwR3WgHfwYWcrC9Z_MHPDwymWXAQwp7D8XZ+o2FsK8g@mail.gmail.com>
	<lh3m7i$v18$1@ger.gmane.org>
	<CA+s+GJCf9o6VEky=JXgrG8v39hyQtPz71yuftF_jyp0bX9WHsA@mail.gmail.com>
	<122FC5AD-2117-4CAF-817F-45B00F57D549@bitsofproof.com>
	<CANEZrP30UsWsBJ-pzb=LQP-MB+PDE0buRdRbuUiOJxANLF9cpw@mail.gmail.com>
Message-ID: <48ED312A-A1F9-4081-9718-04DD45804313@bitsofproof.com>


On 28.03.2014, at 12:46, Mike Hearn <mike at plan99.net> wrote:

> I don't want to manage a "business relationship" with every shop I buy something from. That's way too much effort. There can certainly be cases where a more complicated relationship is created by bootstrapping off BIP70, perhaps with an extension, but nailing the ordinary buyer-to-seller relationship seems like a good scope for BIP70 for now.
> 

It is not more effort than an auto remembered call-in phone number. You delete if you do not care. The difference however is that it would be a clean protocol for repeated payments in both directions for whatever reason, where "refund" is and "payment" are not special compared to "1st installment", "overpayed back" or "tip"  or whatever extra charge arises later.


> 
> On Fri, Mar 28, 2014 at 12:45 PM, Tamas Blummer <tamas at bitsofproof.com> wrote:
> Yes, you begin to see that the payment protocol, as is has a too narrow scope of a web cart - customer, and does not even fit that.
> 
> It is not about payment requests but about business relationships. We need a protocol that deals with that concept instead of individual requests,
> so we really get out of the hell of addresses. Business relationships are terminated by the parties at their own and not bey algorithms and timeouts.
> 
> Regards,
> 
> Tamas Blummer
> http://bitsofproof.com
> istinfo/bitcoin-development
> 
> 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140328/77731fc6/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 495 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140328/77731fc6/attachment.sig>

From mike at plan99.net  Fri Mar 28 12:27:18 2014
From: mike at plan99.net (Mike Hearn)
Date: Fri, 28 Mar 2014 13:27:18 +0100
Subject: [Bitcoin-development] BIP 70 refund field
In-Reply-To: <48ED312A-A1F9-4081-9718-04DD45804313@bitsofproof.com>
References: <CANEZrP0AwR3WgHfwYWcrC9Z_MHPDwymWXAQwp7D8XZ+o2FsK8g@mail.gmail.com>
	<lh3m7i$v18$1@ger.gmane.org>
	<CA+s+GJCf9o6VEky=JXgrG8v39hyQtPz71yuftF_jyp0bX9WHsA@mail.gmail.com>
	<122FC5AD-2117-4CAF-817F-45B00F57D549@bitsofproof.com>
	<CANEZrP30UsWsBJ-pzb=LQP-MB+PDE0buRdRbuUiOJxANLF9cpw@mail.gmail.com>
	<48ED312A-A1F9-4081-9718-04DD45804313@bitsofproof.com>
Message-ID: <CANEZrP3mEWq-kfZb_HdW53K=gAhY=660mRq6+unGV4XppVQimw@mail.gmail.com>

>
> It is not more effort than an auto remembered call-in phone number. You
> delete if you do not care. The difference however is that it would be a
> clean protocol for repeated payments in both directions for whatever
> reason, where "refund" is and "payment" are not special compared to "1st
> installment", "overpayed back" or "tip"  or whatever extra charge arises
> later.
>

I think that'd be too abstract. The purpose of the refund field is that so
if/when you receive a payment there, the wallet UI can do something
intelligent, like show you in your transactions list that a certain payment
was refunded using language the user will understand. If it's modelled at
the protocol level without that then it makes producing good UI's harder.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140328/2bde42f3/attachment.html>

From tamas at bitsofproof.com  Fri Mar 28 12:55:57 2014
From: tamas at bitsofproof.com (Tamas Blummer)
Date: Fri, 28 Mar 2014 13:55:57 +0100
Subject: [Bitcoin-development] BIP 70 refund field
In-Reply-To: <CANEZrP3mEWq-kfZb_HdW53K=gAhY=660mRq6+unGV4XppVQimw@mail.gmail.com>
References: <CANEZrP0AwR3WgHfwYWcrC9Z_MHPDwymWXAQwp7D8XZ+o2FsK8g@mail.gmail.com>
	<lh3m7i$v18$1@ger.gmane.org>
	<CA+s+GJCf9o6VEky=JXgrG8v39hyQtPz71yuftF_jyp0bX9WHsA@mail.gmail.com>
	<122FC5AD-2117-4CAF-817F-45B00F57D549@bitsofproof.com>
	<CANEZrP30UsWsBJ-pzb=LQP-MB+PDE0buRdRbuUiOJxANLF9cpw@mail.gmail.com>
	<48ED312A-A1F9-4081-9718-04DD45804313@bitsofproof.com>
	<CANEZrP3mEWq-kfZb_HdW53K=gAhY=660mRq6+unGV4XppVQimw@mail.gmail.com>
Message-ID: <47379042-C1B6-4E22-8FF7-4EE9FDC095AC@bitsofproof.com>

On 28.03.2014, at 13:27, Mike Hearn <mike at plan99.net> wrote:

> It is not more effort than an auto remembered call-in phone number. You delete if you do not care. The difference however is that it would be a clean protocol for repeated payments in both directions for whatever reason, where "refund" is and "payment" are not special compared to "1st installment", "overpayed back" or "tip"  or whatever extra charge arises later.
> 
> I think that'd be too abstract. The purpose of the refund field is that so if/when you receive a payment there, the wallet UI can do something intelligent, like show you in your transactions list that a certain payment was refunded using language the user will understand. If it's modelled at the protocol level without that then it makes producing good UI's harder.

What is too abstract in a contact list ? If the payment comes with a tag like refund the UI could display as such and if it comes with e.g. VAT then that. 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140328/f0e320ee/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 495 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140328/f0e320ee/attachment.sig>

From mike at plan99.net  Fri Mar 28 13:00:27 2014
From: mike at plan99.net (Mike Hearn)
Date: Fri, 28 Mar 2014 14:00:27 +0100
Subject: [Bitcoin-development] BIP 70 refund field
In-Reply-To: <47379042-C1B6-4E22-8FF7-4EE9FDC095AC@bitsofproof.com>
References: <CANEZrP0AwR3WgHfwYWcrC9Z_MHPDwymWXAQwp7D8XZ+o2FsK8g@mail.gmail.com>
	<lh3m7i$v18$1@ger.gmane.org>
	<CA+s+GJCf9o6VEky=JXgrG8v39hyQtPz71yuftF_jyp0bX9WHsA@mail.gmail.com>
	<122FC5AD-2117-4CAF-817F-45B00F57D549@bitsofproof.com>
	<CANEZrP30UsWsBJ-pzb=LQP-MB+PDE0buRdRbuUiOJxANLF9cpw@mail.gmail.com>
	<48ED312A-A1F9-4081-9718-04DD45804313@bitsofproof.com>
	<CANEZrP3mEWq-kfZb_HdW53K=gAhY=660mRq6+unGV4XppVQimw@mail.gmail.com>
	<47379042-C1B6-4E22-8FF7-4EE9FDC095AC@bitsofproof.com>
Message-ID: <CANEZrP3xcRrPsR+nCDAWgTaXg=ADGH1KjrwgLew7V2eC9ghexg@mail.gmail.com>

>
> What is too abstract in a contact list ? If the payment comes with a tag
> like refund the UI could display as such and if it comes with e.g. VAT then
> that.
>

How is this any different? The tag in this case is the address and the
payment is being delivered by the block chain (direct submission for
user->merchant is easier than merchant->user) so we can't stuff extra data
anywhere else. Then the UI knows it was a refund payment and not for
anything else.

I don't see the relevance of VAT here.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140328/e99c3d41/attachment.html>

From tamas at bitsofproof.com  Fri Mar 28 13:09:34 2014
From: tamas at bitsofproof.com (Tamas Blummer)
Date: Fri, 28 Mar 2014 14:09:34 +0100
Subject: [Bitcoin-development] BIP 70 refund field
In-Reply-To: <CANEZrP3xcRrPsR+nCDAWgTaXg=ADGH1KjrwgLew7V2eC9ghexg@mail.gmail.com>
References: <CANEZrP0AwR3WgHfwYWcrC9Z_MHPDwymWXAQwp7D8XZ+o2FsK8g@mail.gmail.com>
	<lh3m7i$v18$1@ger.gmane.org>
	<CA+s+GJCf9o6VEky=JXgrG8v39hyQtPz71yuftF_jyp0bX9WHsA@mail.gmail.com>
	<122FC5AD-2117-4CAF-817F-45B00F57D549@bitsofproof.com>
	<CANEZrP30UsWsBJ-pzb=LQP-MB+PDE0buRdRbuUiOJxANLF9cpw@mail.gmail.com>
	<48ED312A-A1F9-4081-9718-04DD45804313@bitsofproof.com>
	<CANEZrP3mEWq-kfZb_HdW53K=gAhY=660mRq6+unGV4XppVQimw@mail.gmail.com>
	<47379042-C1B6-4E22-8FF7-4EE9FDC095AC@bitsofproof.com>
	<CANEZrP3xcRrPsR+nCDAWgTaXg=ADGH1KjrwgLew7V2eC9ghexg@mail.gmail.com>
Message-ID: <5223FF53-CDA4-419D-A4B0-204DC3441626@bitsofproof.com>

On 28.03.2014, at 14:00, Mike Hearn <mike at plan99.net> wrote:

> What is too abstract in a contact list ? If the payment comes with a tag like refund the UI could display as such and if it comes with e.g. VAT then that. 
> 
> How is this any different? The tag in this case is the address and the payment is being delivered by the block chain (direct submission for user->merchant is easier than merchant->user) so we can't stuff extra data anywhere else. Then the UI knows it was a refund payment and not for anything else.
> 

The difference is the concept of setting up a channel that allows both parties to create valid addresses of the other by exchanging some kind of master keys. The initial handshake with the protocol would agree on tags of individual address indexes if used. The wallets would have to observe those agreed inidices and evtl. extend range. Payments could go back and forth. Either party might delete the channel information and stop observing keys as soon as he does no longer expect a payment from the other. This would be an explicit operation, like deleting a contact.

> I don't see the relevance of VAT here.

It was an example label. I would not be suprised if with widespread use of payments some government would require VAT collected separately. It is just a guess and has no weight in my prior arguments. 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140328/2d5aca1a/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 495 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140328/2d5aca1a/attachment.sig>

From tamas at bitsofproof.com  Fri Mar 28 13:18:10 2014
From: tamas at bitsofproof.com (Tamas Blummer)
Date: Fri, 28 Mar 2014 14:18:10 +0100
Subject: [Bitcoin-development] BIP 70 refund field
In-Reply-To: <612FFAAD-14FF-4261-927D-BD2E0F287257@bitsofproof.com>
References: <CANEZrP0AwR3WgHfwYWcrC9Z_MHPDwymWXAQwp7D8XZ+o2FsK8g@mail.gmail.com>
	<612FFAAD-14FF-4261-927D-BD2E0F287257@bitsofproof.com>
Message-ID: <D7D06593-1987-490A-8DCD-21922E022E39@bitsofproof.com>

May I ask how the current payment protocol is supposed to handle salaries? I hope you do not assume the employee creates a payment request, since he does not
even calculate the amount. There you go where a channel I described is definitelly needed.

Tamas Blummer
http://bitsofproof.com

On 28.03.2014, at 12:30, Tamas Blummer <tamas at bitsofproof.com> wrote:

> Instead of a payment request and refund, businesses would actually need a payment channel, that once established allows for multiple payments back and forth between counterparties.
> 
> One might have a number of open channels until the business relationship is assumed. The customer might decide to close the channel explicitelly once he does no longer expect a payment. 
> 
> Regards,
> 
> Tam?s Blummer
> http://bitsofproof.com
> 
> On 28.03.2014, at 12:07, Mike Hearn <mike at plan99.net> wrote:
> 
>> Modern devices like smartphones and tablets do not have swap files. This design is chosen to ensure responsive, fluid UI that can avoid blocking on disk regardless of how much multi-tasking is done, but it creates ripples that impact everything else.
>> 
>> One implication of this is that on these devices, we cannot store all keys or transactions in memory forever. BIP 70 has an expiry field for PaymentRequests that we can use to allow us to eventually stop loading those keys into RAM - at that point payments to those keys would no longer be recognised. But there's no equivalent for refund addresses.
>> 
>> More generally, though we re-used the output structure to define the refund, we didn't (for some reason that I forgot) reuse PaymentDetails, even though the payment details for a refund are indeed PaymentDetails.
>> 
>> Though I am loathe to go back and redesign this part of BIP 70 so soon after we shipped v1, it seems to me like the refund feature may be hard to implement on phones if there's no time limit for when you can receive a refund. Otherwise a wallet has to be looking out for refunds for payments you may have made years ago. So perhaps we should add a new refund field that embeds a PaymentDetails structure instead of being just a list of outputs.
>> 
>> We could try and solve this problem some other way purely internally, by doing a kind of wallet-specific swapping process in which things like Bloom filters are calculated without all keys in them being held in memory at once (perhaps caching filters for old parts of the key chain on disk), so you can have "infinite" wallets, but eventually the huge Bloom filters that would result would hurt efficiency in other ways. So key expiry seems pretty fundamental to scalability.
>> 
>> 
>> ------------------------------------------------------------------------------
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140328/77dcc289/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 495 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140328/77dcc289/attachment.sig>

From gavinandresen at gmail.com  Fri Mar 28 14:01:11 2014
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Fri, 28 Mar 2014 10:01:11 -0400
Subject: [Bitcoin-development] BIP 70 refund field
In-Reply-To: <D7D06593-1987-490A-8DCD-21922E022E39@bitsofproof.com>
References: <CANEZrP0AwR3WgHfwYWcrC9Z_MHPDwymWXAQwp7D8XZ+o2FsK8g@mail.gmail.com>
	<612FFAAD-14FF-4261-927D-BD2E0F287257@bitsofproof.com>
	<D7D06593-1987-490A-8DCD-21922E022E39@bitsofproof.com>
Message-ID: <CABsx9T1POJ3KTqSz_c=SdYTg=EKWa9jqjOpHPZoMoPGXozsvJA@mail.gmail.com>

On Fri, Mar 28, 2014 at 9:18 AM, Tamas Blummer <tamas at bitsofproof.com>wrote:

> May I ask how the current payment protocol is supposed to handle salaries?
>

It doesn't.

"walk before you run" and all that; lets see what problems we run into with
the minimal payment protocol we have now (like refund outputs you have to
remember forever) before we create an insurmountable set of problems by
trying to solve everything we can think of all at once.

-- 
--
Gavin Andresen
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140328/88d9c789/attachment.html>

From mike at plan99.net  Fri Mar 28 14:06:31 2014
From: mike at plan99.net (Mike Hearn)
Date: Fri, 28 Mar 2014 15:06:31 +0100
Subject: [Bitcoin-development] BIP 70 refund field
In-Reply-To: <CABsx9T1POJ3KTqSz_c=SdYTg=EKWa9jqjOpHPZoMoPGXozsvJA@mail.gmail.com>
References: <CANEZrP0AwR3WgHfwYWcrC9Z_MHPDwymWXAQwp7D8XZ+o2FsK8g@mail.gmail.com>
	<612FFAAD-14FF-4261-927D-BD2E0F287257@bitsofproof.com>
	<D7D06593-1987-490A-8DCD-21922E022E39@bitsofproof.com>
	<CABsx9T1POJ3KTqSz_c=SdYTg=EKWa9jqjOpHPZoMoPGXozsvJA@mail.gmail.com>
Message-ID: <CANEZrP3BzGBcAgeppqbyYX4CcAH2ZVn+_-YUdCJRgSzBagOCpA@mail.gmail.com>

Yeah. Though there's actually a proposal for recurring payments from the
KillBill folks. I keep bugging BitPay to review it but it seems they're
lagging behind there, so perhaps we should just move ahead with that
candidate extension.


On Fri, Mar 28, 2014 at 3:01 PM, Gavin Andresen <gavinandresen at gmail.com>wrote:

> On Fri, Mar 28, 2014 at 9:18 AM, Tamas Blummer <tamas at bitsofproof.com>wrote:
>
>> May I ask how the current payment protocol is supposed to handle salaries?
>>
>
> It doesn't.
>
> "walk before you run" and all that; lets see what problems we run into
> with the minimal payment protocol we have now (like refund outputs you have
> to remember forever) before we create an insurmountable set of problems by
> trying to solve everything we can think of all at once.
>
> --
> --
> Gavin Andresen
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140328/0936e4ad/attachment.html>

From tamas at bitsofproof.com  Fri Mar 28 14:27:35 2014
From: tamas at bitsofproof.com (Tamas Blummer)
Date: Fri, 28 Mar 2014 15:27:35 +0100
Subject: [Bitcoin-development] BIP 70 refund field
In-Reply-To: <CABsx9T1POJ3KTqSz_c=SdYTg=EKWa9jqjOpHPZoMoPGXozsvJA@mail.gmail.com>
References: <CANEZrP0AwR3WgHfwYWcrC9Z_MHPDwymWXAQwp7D8XZ+o2FsK8g@mail.gmail.com>
	<612FFAAD-14FF-4261-927D-BD2E0F287257@bitsofproof.com>
	<D7D06593-1987-490A-8DCD-21922E022E39@bitsofproof.com>
	<CABsx9T1POJ3KTqSz_c=SdYTg=EKWa9jqjOpHPZoMoPGXozsvJA@mail.gmail.com>
Message-ID: <85A1792C-502E-4AC6-B8BC-A10C8FC1917F@bitsofproof.com>

I have nothing against incremental development. This will however not pick up until it offers some incremental benefit compared to current payment processor solutions, 
such as e.g.

1. Symmetrical. One can also offer a payment.
2. Aggregating and Netting. Handle multiple installments and/or net with previous cash flows.
3. More secure. One has a check not only on the payment address (which already has one with https:// in the web shop scenario it is currently able support) but not on the refund.


On 28.03.2014, at 15:01, Gavin Andresen <gavinandresen at gmail.com> wrote:

> On Fri, Mar 28, 2014 at 9:18 AM, Tamas Blummer <tamas at bitsofproof.com> wrote:
> May I ask how the current payment protocol is supposed to handle salaries?
> 
> It doesn't.
> 
> "walk before you run" and all that; lets see what problems we run into with the minimal payment protocol we have now (like refund outputs you have to remember forever) before we create an insurmountable set of problems by trying to solve everything we can think of all at once.
> 
> -- 
> --
> Gavin Andresen

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140328/19ae087e/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 495 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140328/19ae087e/attachment.sig>

From hozer at hozed.org  Fri Mar 28 15:10:30 2014
From: hozer at hozed.org (Troy Benjegerdes)
Date: Fri, 28 Mar 2014 10:10:30 -0500
Subject: [Bitcoin-development] Tree-chains preliminary summary
In-Reply-To: <CAC1+kJMkiVLEnHKibWbaCdtEwCE30M4SPM96H6Nq7kZey-_4eg@mail.gmail.com>
References: <20140322084702.GA13436@savin> <20140322150836.GG3180@nl.grid.coop>
	<20140322190825.GB6047@savin> <532DE7E6.4050304@monetize.io>
	<20140325122851.GA9818@savin> <5331EF3D.4000504@monetize.io>
	<CAAS2fgTovm7OtFFqdRYWDw5KxV+r5WD598JPnG5ydMYAs_gQWg@mail.gmail.com>
	<CAC1+kJMkiVLEnHKibWbaCdtEwCE30M4SPM96H6Nq7kZey-_4eg@mail.gmail.com>
Message-ID: <20140328151030.GJ3180@nl.grid.coop>

> Anyway the particular situation in which a single entity controls 40%
> of the hashing power should be rare. That's potentially dangerous for
> bitcoin and although changing the hashing algorithm would be painful
> and risky, I would be terribly scared of that happening if I was that
> entity. Letting my percentage of hash rate dilute as others grow would
> definitely be part of my plan.

I think *your* plan is an ecologically and socially rational plan. My 
observations of irrational responses on this list lead me to believe
there is a single entity (which may be a cartel) which *effectively*
controls between 30% and 50% of the sha-256 hashing power and is quite
terrified of any alternative, and attempts to purchase, consume, or 
eliminate any entities that might dilute it's controlled hash rate or
pose a risk of switching to a new algorithm.

We must have a system in which 1 to 10% of the hashrate can provide a
reasonable check-and-balance and competitive pressure to 90% of the
hash rate, or it's going to be fundamentally unstable, and we will
just re-create 'to big to fail' all over again.
 
> Although this is again completely orthogonal to the merged mining or
> not discussion, hashing algorithms are often mixed in the discussions
> against merged mining. If you had to introduce that hashing algorithm
> hardfork change you will probably chose something with similar
> properties than those of SHA256, like being easy to implement
> specialized hardware for it. You could even chose a memory-hard
> algorithm if you want to promote ASIC production centralization, but
> you can't chose an "anti-ASIC" algorithm because those don't exist.
> It is well known that any information machine that can be built with
> software can also be built with specialized hardware and viceversa.
> Sadly that kind of fallacy is often used to justify the ecological
> crime that starting a new chain with no plans of doing merged mining
> represents.

You speak of ecological crime without proposing any mechanism in which 
the ecologically correct thing is also the economically rational thing.

If I could get real-time MISO market pricing for wind energy, I could 
do this http://grid.coop/smartgridcmp-long.png and run a mining farm
on my farm.

I would like to propose we collaborate on developing secure mechanism
to audit energy sources for miners on a new chain called 'Ecocoin' in
which the block reward is proportional to how much energy the owner
of the newly generated block reward personally harvested from renewable
sources.

The reward curve will have to be calibrated and adjusted to minimize
the over all costs and fraud risk of auditing the energy input sources.


-- 
----------------------------------------------------------------------------
Troy Benjegerdes                 'da hozer'                  hozer at hozed.org
7 elements      earth::water::air::fire::mind::spirit::soul        grid.coop

      Never pick a fight with someone who buys ink by the barrel,
         nor try buy a hacker who makes money by the megahash




From mike at plan99.net  Fri Mar 28 15:23:10 2014
From: mike at plan99.net (Mike Hearn)
Date: Fri, 28 Mar 2014 16:23:10 +0100
Subject: [Bitcoin-development] BIP 70 refund field
In-Reply-To: <85A1792C-502E-4AC6-B8BC-A10C8FC1917F@bitsofproof.com>
References: <CANEZrP0AwR3WgHfwYWcrC9Z_MHPDwymWXAQwp7D8XZ+o2FsK8g@mail.gmail.com>
	<612FFAAD-14FF-4261-927D-BD2E0F287257@bitsofproof.com>
	<D7D06593-1987-490A-8DCD-21922E022E39@bitsofproof.com>
	<CABsx9T1POJ3KTqSz_c=SdYTg=EKWa9jqjOpHPZoMoPGXozsvJA@mail.gmail.com>
	<85A1792C-502E-4AC6-B8BC-A10C8FC1917F@bitsofproof.com>
Message-ID: <CANEZrP26+hWJaFYkZ2oUKhr9FQ03CXCdvt8V1Mm4mGJaPCy2Hw@mail.gmail.com>

So I take it BOPShop won't be supporting BIP70 then? :(


On Fri, Mar 28, 2014 at 3:27 PM, Tamas Blummer <tamas at bitsofproof.com>wrote:

> I have nothing against incremental development. This will however not pick
> up until it offers some incremental benefit compared to current payment
> processor solutions,
> such as e.g.
>
> 1. Symmetrical. One can also offer a payment.
> 2. Aggregating and Netting. Handle multiple installments and/or net with
> previous cash flows.
> 3. More secure. One has a check not only on the payment address (which
> already has one with https:// in the web shop scenario it is currently
> able support) but not on the refund.
>
>
> On 28.03.2014, at 15:01, Gavin Andresen <gavinandresen at gmail.com> wrote:
>
> On Fri, Mar 28, 2014 at 9:18 AM, Tamas Blummer <tamas at bitsofproof.com>wrote:
>
>> May I ask how the current payment protocol is supposed to handle salaries?
>>
>
> It doesn't.
>
> "walk before you run" and all that; lets see what problems we run into
> with the minimal payment protocol we have now (like refund outputs you have
> to remember forever) before we create an insurmountable set of problems by
> trying to solve everything we can think of all at once.
>
> --
> --
> Gavin Andresen
>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140328/a23dd348/attachment.html>

From tamas at bitsofproof.com  Fri Mar 28 15:26:57 2014
From: tamas at bitsofproof.com (Tamas Blummer)
Date: Fri, 28 Mar 2014 16:26:57 +0100
Subject: [Bitcoin-development] BIP 70 refund field
In-Reply-To: <CANEZrP26+hWJaFYkZ2oUKhr9FQ03CXCdvt8V1Mm4mGJaPCy2Hw@mail.gmail.com>
References: <CANEZrP0AwR3WgHfwYWcrC9Z_MHPDwymWXAQwp7D8XZ+o2FsK8g@mail.gmail.com>
	<612FFAAD-14FF-4261-927D-BD2E0F287257@bitsofproof.com>
	<D7D06593-1987-490A-8DCD-21922E022E39@bitsofproof.com>
	<CABsx9T1POJ3KTqSz_c=SdYTg=EKWa9jqjOpHPZoMoPGXozsvJA@mail.gmail.com>
	<85A1792C-502E-4AC6-B8BC-A10C8FC1917F@bitsofproof.com>
	<CANEZrP26+hWJaFYkZ2oUKhr9FQ03CXCdvt8V1Mm4mGJaPCy2Hw@mail.gmail.com>
Message-ID: <C3A3E8C1-CBAB-4FF7-8944-BE65B41BBDD9@bitsofproof.com>

On 28.03.2014, at 16:23, Mike Hearn <mike at plan99.net> wrote:
> So I take it BOPShop won't be supporting BIP70 then? :(
> 

Supporting BIP70 by BitPay or BopShop is a cake since it does no more then they did without it.
I am not in opposition but see no reason to be enthusiastic about it. I will once the spec goes
further than what was possible before.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 495 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140328/236c5059/attachment.sig>

From slush at centrum.cz  Fri Mar 28 14:59:47 2014
From: slush at centrum.cz (slush)
Date: Fri, 28 Mar 2014 15:59:47 +0100
Subject: [Bitcoin-development] New BIP32 structure
In-Reply-To: <CAPg+sBhbx5vy_hewAkFPaiXHzSMNH0qLhEYGjPmQMjR5StP-tw@mail.gmail.com>
References: <CANEZrP2hbBVGqytmXR1rAcVama4ONnR586Se-Ch=dsxOzy2O4w@mail.gmail.com>
	<F2C8C044-EF92-4CCE-9235-28CA7FCE3526@bitsofproof.com>
	<CAJHLa0PPAsBLgsy0vgPpUp=UzeR_fWUEzFb5+xtmODEk4MGPVQ@mail.gmail.com>
	<CAJfRnm7V6fgcj=TMfa2ZTYWOKtE5aoUT1xnVtKUSyriB=6cagQ@mail.gmail.com>
	<CAPg+sBjwf1TcK1CGKVKFzYbV-78j8t-pav7=PEgG7Yqi6-yE7A@mail.gmail.com>
	<53344FF8.7030204@gk2.sk>
	<CAPg+sBhbx5vy_hewAkFPaiXHzSMNH0qLhEYGjPmQMjR5StP-tw@mail.gmail.com>
Message-ID: <CAJna-Hi0JnrF2_rUx0rGkdnsuCoaD01e3Gobpn+QqbL=D1Uivg@mail.gmail.com>

I agree that 'version' field of bip32 is not necessary and xpriv/xpub
should be enough for all cases; there's actually no need to use different
BIP32 roots for different altcoins.

I'm happily using one xpub for Bitcoin/Testnet/Litecoin at once, and by
having the "cointype" distinction in the bip32 path itself, I'm sure that I
don't reuse the same pubkey across blockchains which may be a privacy issue
otherwise.

Marek


On Thu, Mar 27, 2014 at 5:28 PM, Pieter Wuille <pieter.wuille at gmail.com>wrote:

> On Thu, Mar 27, 2014 at 5:21 PM, Pavol Rusnak <stick at gk2.sk> wrote:
> > Cointype in path is for separation purposes, not for identification.
>
> I don't understand what that gains you.
>
> --
> Pieter
>
>
> ------------------------------------------------------------------------------
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140328/8b081833/attachment.html>

From mike at plan99.net  Fri Mar 28 16:34:59 2014
From: mike at plan99.net (Mike Hearn)
Date: Fri, 28 Mar 2014 17:34:59 +0100
Subject: [Bitcoin-development] BIP 70 refund field
In-Reply-To: <C3A3E8C1-CBAB-4FF7-8944-BE65B41BBDD9@bitsofproof.com>
References: <CANEZrP0AwR3WgHfwYWcrC9Z_MHPDwymWXAQwp7D8XZ+o2FsK8g@mail.gmail.com>
	<612FFAAD-14FF-4261-927D-BD2E0F287257@bitsofproof.com>
	<D7D06593-1987-490A-8DCD-21922E022E39@bitsofproof.com>
	<CABsx9T1POJ3KTqSz_c=SdYTg=EKWa9jqjOpHPZoMoPGXozsvJA@mail.gmail.com>
	<85A1792C-502E-4AC6-B8BC-A10C8FC1917F@bitsofproof.com>
	<CANEZrP26+hWJaFYkZ2oUKhr9FQ03CXCdvt8V1Mm4mGJaPCy2Hw@mail.gmail.com>
	<C3A3E8C1-CBAB-4FF7-8944-BE65B41BBDD9@bitsofproof.com>
Message-ID: <CANEZrP1suCiiJEctAZ4FXMvNXsg8p1avS2CY3yJ8W=_MTBBTig@mail.gmail.com>

>
> Supporting BIP70 by BitPay or BopShop is a cake since it does no more then
> they did without it.
> I am not in opposition but see no reason to be enthusiastic about it. I
> will once the spec goes
> further than what was possible before.
>

So, if e.g. Trezor ships a firmware update that uses BIP70 to present
signed payment identities on the screen, would you support it then?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140328/08b946b1/attachment.html>

From tamas at bitsofproof.com  Fri Mar 28 16:45:40 2014
From: tamas at bitsofproof.com (Tamas Blummer)
Date: Fri, 28 Mar 2014 17:45:40 +0100
Subject: [Bitcoin-development] BIP 70 refund field
In-Reply-To: <CANEZrP1suCiiJEctAZ4FXMvNXsg8p1avS2CY3yJ8W=_MTBBTig@mail.gmail.com>
References: <CANEZrP0AwR3WgHfwYWcrC9Z_MHPDwymWXAQwp7D8XZ+o2FsK8g@mail.gmail.com>
	<612FFAAD-14FF-4261-927D-BD2E0F287257@bitsofproof.com>
	<D7D06593-1987-490A-8DCD-21922E022E39@bitsofproof.com>
	<CABsx9T1POJ3KTqSz_c=SdYTg=EKWa9jqjOpHPZoMoPGXozsvJA@mail.gmail.com>
	<85A1792C-502E-4AC6-B8BC-A10C8FC1917F@bitsofproof.com>
	<CANEZrP26+hWJaFYkZ2oUKhr9FQ03CXCdvt8V1Mm4mGJaPCy2Hw@mail.gmail.com>
	<C3A3E8C1-CBAB-4FF7-8944-BE65B41BBDD9@bitsofproof.com>
	<CANEZrP1suCiiJEctAZ4FXMvNXsg8p1avS2CY3yJ8W=_MTBBTig@mail.gmail.com>
Message-ID: <295BFE86-52F6-4664-91B1-78FDCACA2EEC@bitsofproof.com>


On 28.03.2014, at 17:34, Mike Hearn <mike at plan99.net> wrote:
> Supporting BIP70 by BitPay or BopShop is a cake since it does no more then they did without it.
> I am not in opposition but see no reason to be enthusiastic about it. I will once the spec goes
> further than what was possible before.
> 
> So, if e.g. Trezor ships a firmware update that uses BIP70 to present signed payment identities on the screen, would you support it then?

Yes that would be neat and I would not want to spoil the show. I wish the established identity could be re-used though to send and much more.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140328/c823ed30/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 495 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140328/c823ed30/attachment.sig>

From andreas at schildbach.de  Fri Mar 28 16:59:52 2014
From: andreas at schildbach.de (Andreas Schildbach)
Date: Fri, 28 Mar 2014 17:59:52 +0100
Subject: [Bitcoin-development] BIP 70 refund field
In-Reply-To: <CANEZrP3zBFs=JpJi6eazTvrTaRX6XCJLu-zrraE6bezYW7b9pQ@mail.gmail.com>
References: <CANEZrP0AwR3WgHfwYWcrC9Z_MHPDwymWXAQwp7D8XZ+o2FsK8g@mail.gmail.com>	<lh3m7i$v18$1@ger.gmane.org>
	<CANEZrP3zBFs=JpJi6eazTvrTaRX6XCJLu-zrraE6bezYW7b9pQ@mail.gmail.com>
Message-ID: <lh49pp$4bc$1@ger.gmane.org>

Ok, why don't fix this in the spec for now, by defining a fixed expiry
time. In the EU, most products are covered by a 2 years warranty, so it
seems appropriate to pick 2.5 years (30 months) -- allowing for some
time to ship the product back and forth.


On 03/28/2014 12:31 PM, Mike Hearn wrote:
> On Fri, Mar 28, 2014 at 12:25 PM, Andreas Schildbach
> <andreas at schildbach.de <mailto:andreas at schildbach.de>> wrote:
> 
>     However, I don't see how PaymentDetails can be an answer. None of the
>     fields (other than outputs and network) can be known in advance (at the
>     time of the initial payment).
> 
> 
> You don't need all the fields indeed, but they're mostly optional
> (except time). So for the refund you'd fill out:
> 
> outputs (same as today)
> time
> expiry_time
> 
>     You're probably aiming for an expires field? How would you refund a
>     payment after expiry?
> 
> 
> It'd have to be ad-hoc at that point. OK, you don't get the nice UI that
> the refund field provides. Oh well. It should be rare to get refunds
> very very late after the purchase.
>  
> 
>     Btw. another problem is that the refund address is currently
>     unprotected.
> 
> 
> Yes indeed as is the rest of the Payment structure. We talked about
> signing it with one of the keys that's signing the Bitcoin transaction
> as well. But it seems like a bit overkill. Usually it'll be submitted
> over HTTPS or a (secured!) Bluetooth channel though so tampering with it
> should not be possible.
> 
> However this does raise the question of whether a refund should be a
> full blown PaymentRequest with optional PKI signing. Normally, I think,
> a seller does not know or care about the identity of a buyer for
> refunds, outside of their own tracking system.
> 
> 
> ------------------------------------------------------------------------------
> 
> 
> 
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 





From mike at plan99.net  Fri Mar 28 18:19:03 2014
From: mike at plan99.net (Mike Hearn)
Date: Fri, 28 Mar 2014 19:19:03 +0100
Subject: [Bitcoin-development] BIP 70 refund field
In-Reply-To: <lh49pp$4bc$1@ger.gmane.org>
References: <CANEZrP0AwR3WgHfwYWcrC9Z_MHPDwymWXAQwp7D8XZ+o2FsK8g@mail.gmail.com>	<lh3m7i$v18$1@ger.gmane.org>	<CANEZrP3zBFs=JpJi6eazTvrTaRX6XCJLu-zrraE6bezYW7b9pQ@mail.gmail.com>
	<lh49pp$4bc$1@ger.gmane.org>
Message-ID: <5335BD17.6050408@plan99.net>

On 28/03/2014 17:59, Andreas Schildbach wrote:
> Ok, why don't fix this in the spec for now, by defining a fixed expiry
> time. In the EU, most products are covered by a 2 years warranty, so it
> seems appropriate to pick 2.5 years (30 months) -- allowing for some
> time to ship the product back and forth.
Yeah I was thinking something like that on the walk home. But 2 years is
a long time. Do we have enough RAM for that? Plus warranties usually
result in the defective goods being replaced rather than a monetary
refund, right?

But adjusting the spec so there's a fixed time limit, and allowing a
future version of the protocol to make it configurable, does indeed feel
like the right way to go.

-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/pkcs7-signature
Size: 5971 bytes
Desc: S/MIME Cryptographic Signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140328/66e42ad9/attachment.p7s>

From andreas at schildbach.de  Fri Mar 28 20:56:57 2014
From: andreas at schildbach.de (Andreas Schildbach)
Date: Fri, 28 Mar 2014 21:56:57 +0100
Subject: [Bitcoin-development] BIP 70 refund field
In-Reply-To: <5335BD17.6050408@plan99.net>
References: <CANEZrP0AwR3WgHfwYWcrC9Z_MHPDwymWXAQwp7D8XZ+o2FsK8g@mail.gmail.com>	<lh3m7i$v18$1@ger.gmane.org>	<CANEZrP3zBFs=JpJi6eazTvrTaRX6XCJLu-zrraE6bezYW7b9pQ@mail.gmail.com>	<lh49pp$4bc$1@ger.gmane.org>
	<5335BD17.6050408@plan99.net>
Message-ID: <lh4nma$h3e$1@ger.gmane.org>

On 03/28/2014 07:19 PM, Mike Hearn wrote:

>> Ok, why don't fix this in the spec for now, by defining a fixed expiry
>> time. In the EU, most products are covered by a 2 years warranty, so it
>> seems appropriate to pick 2.5 years (30 months) -- allowing for some
>> time to ship the product back and forth.
>
> Yeah I was thinking something like that on the walk home. But 2 years is
> a long time. Do we have enough RAM for that?

It depends on usage stats, script size, etc...

> Plus warranties usually
> result in the defective goods being replaced rather than a monetary
> refund, right?

Usually yes. The next smaller "unit of time" in Germany would be two
weeks, the so-called "Fernabsatzgesetz". It allows you to send back
mail-orders and usually you want the money back. Don't know if that made
it into EU law or how it applies to other countries.






From justusranvier at gmail.com  Fri Mar 28 21:40:11 2014
From: justusranvier at gmail.com (Justus Ranvier)
Date: Fri, 28 Mar 2014 21:40:11 +0000
Subject: [Bitcoin-development] BIP 70 and OP_RETURN
Message-ID: <5335EC3B.6070605@silicon>

The description of the Output message states that the payment request
can specify any standard TxOut script, and that OP_RETURN is a standard
transaction type that would imply the ability to specify OP_RETURN
outputs in BIP 70 payment requests.

If the creator of a payment request wanted the sender to include a small
amount of data as an OP_RETURN output, how would they specify this?

-- 
Support online privacy by using email encryption whenever possible.
Learn how here: http://www.youtube.com/watch?v=bakOKJFtB-k
-------------- next part --------------
A non-text attachment was scrubbed...
Name: 0x1B438BF4.asc
Type: application/pgp-keys
Size: 21191 bytes
Desc: not available
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140328/b5b42f1e/attachment.bin>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 555 bytes
Desc: OpenPGP digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140328/b5b42f1e/attachment.sig>

From bip at mattwhitlock.name  Sat Mar 29 08:05:17 2014
From: bip at mattwhitlock.name (Matt Whitlock)
Date: Sat, 29 Mar 2014 04:05:17 -0400
Subject: [Bitcoin-development] Presenting a BIP for Shamir's Secret Sharing
	of Bitcoin private keys
Message-ID: <1878927.J1e3zZmtIP@crushinator>

Abstract: A method is described for dividing a Bitcoin private key into shares in a manner such that the key can be reconstituted from any sufficiently large subset of the shares but such that individually the shares do not reveal any information about the key. This method is commonly known as Shamir's Secret Sharing Scheme. Additionally, an encoding methodology is proposed to standardize transmission and storage of shares.

Complete BIP: https://github.com/whitslack/btctool/blob/bip/bip-xxxx.mediawiki

I am looking to have this BIP assigned a number and added to the bitcoin/bips repository. I invite any comments, questions, or suggestions.



From tamas at bitsofproof.com  Sat Mar 29 08:34:25 2014
From: tamas at bitsofproof.com (Tamas Blummer)
Date: Sat, 29 Mar 2014 09:34:25 +0100
Subject: [Bitcoin-development] Presenting a BIP for Shamir's Secret
	Sharing of Bitcoin private keys
In-Reply-To: <1878927.J1e3zZmtIP@crushinator>
References: <1878927.J1e3zZmtIP@crushinator>
Message-ID: <44EBAC86-71C4-4380-8131-EE604A0E6D74@bitsofproof.com>

Great stuff Matt!

I have an implementation of Shamir's Secret Sharing here: https://github.com/bitsofproof/bop-bitcoin-client-misc/blob/master/src/main/java/com/bitsofproof/supernode/misc/ShamirsSecretSharing.java

What was missing was nice serialization. Thanks a lot for defining and starting the process.

 I will shortly adapt my code and check your test vectors.

Regards,

Tamas Blummer
http://bitsofproof.com

On 29.03.2014, at 09:05, Matt Whitlock <bip at mattwhitlock.name> wrote:

> Abstract: A method is described for dividing a Bitcoin private key into shares in a manner such that the key can be reconstituted from any sufficiently large subset of the shares but such that individually the shares do not reveal any information about the key. This method is commonly known as Shamir's Secret Sharing Scheme. Additionally, an encoding methodology is proposed to standardize transmission and storage of shares.
> 
> Complete BIP: https://github.com/whitslack/btctool/blob/bip/bip-xxxx.mediawiki
> 
> I am looking to have this BIP assigned a number and added to the bitcoin/bips repository. I invite any comments, questions, or suggestions.
> 
> ------------------------------------------------------------------------------
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140329/8a7b3715/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 495 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140329/8a7b3715/attachment.sig>

From tamas at bitsofproof.com  Sat Mar 29 08:44:53 2014
From: tamas at bitsofproof.com (Tamas Blummer)
Date: Sat, 29 Mar 2014 09:44:53 +0100
Subject: [Bitcoin-development] Presenting a BIP for Shamir's Secret
	Sharing of Bitcoin private keys
In-Reply-To: <1878927.J1e3zZmtIP@crushinator>
References: <1878927.J1e3zZmtIP@crushinator>
Message-ID: <AA48C372-6735-40E4-A8AF-264576F86BB1@bitsofproof.com>

Hi Matt,

I used Shamir's Secret Sharing to decompose a seed for a BIP32 master key, that is I think more future relevant than a single key.
Therefore suggest to adapt the BIP for a length used there typically 16 or 32 bytes and have a magic code to indicate its use as key vs. seed.

Regards,

Tamas Blummer
http://bitsofproof.com

On 29.03.2014, at 09:05, Matt Whitlock <bip at mattwhitlock.name> wrote:

> Abstract: A method is described for dividing a Bitcoin private key into shares in a manner such that the key can be reconstituted from any sufficiently large subset of the shares but such that individually the shares do not reveal any information about the key. This method is commonly known as Shamir's Secret Sharing Scheme. Additionally, an encoding methodology is proposed to standardize transmission and storage of shares.
> 
> Complete BIP: https://github.com/whitslack/btctool/blob/bip/bip-xxxx.mediawiki
> 
> I am looking to have this BIP assigned a number and added to the bitcoin/bips repository. I invite any comments, questions, or suggestions.
> 
> ------------------------------------------------------------------------------
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140329/954dee5e/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 495 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140329/954dee5e/attachment.sig>

From bip at mattwhitlock.name  Sat Mar 29 08:54:03 2014
From: bip at mattwhitlock.name (Matt Whitlock)
Date: Sat, 29 Mar 2014 04:54:03 -0400
Subject: [Bitcoin-development] Presenting a BIP for Shamir's Secret
	Sharing of Bitcoin private keys
In-Reply-To: <1533279.gyh3J7MHJl@crushinator>
References: <1878927.J1e3zZmtIP@crushinator>
	<AA48C372-6735-40E4-A8AF-264576F86BB1@bitsofproof.com>
	<1533279.gyh3J7MHJl@crushinator>
Message-ID: <2145458.TrR70lbmIh@crushinator>

On Saturday, 29 March 2014, at 4:51 am, Matt Whitlock wrote:
> On Saturday, 29 March 2014, at 9:44 am, Tamas Blummer wrote:
> > I used Shamir's Secret Sharing to decompose a seed for a BIP32 master key, that is I think more future relevant than a single key.
> > Therefore suggest to adapt the BIP for a length used there typically 16 or 32 bytes and have a magic code to indicate its use as key vs. seed.
> 
> Master keys of 32 bytes would work as-is, as ordinary private keys are also 32 bytes. Secrets of other lengths could be supported if the function that generates a[i] from a[i-1] (which is presently SHA-256) were replaced with a function having parameterized output length, such as scrypt.

Actually, secrets with value greater than secp256k1_N cannot be supported because the modular arithmetic would destroy them. But any secret smaller than 256 bits would be fine.



From bip at mattwhitlock.name  Sat Mar 29 08:51:09 2014
From: bip at mattwhitlock.name (Matt Whitlock)
Date: Sat, 29 Mar 2014 04:51:09 -0400
Subject: [Bitcoin-development] Presenting a BIP for Shamir's Secret
	Sharing of Bitcoin private keys
In-Reply-To: <AA48C372-6735-40E4-A8AF-264576F86BB1@bitsofproof.com>
References: <1878927.J1e3zZmtIP@crushinator>
	<AA48C372-6735-40E4-A8AF-264576F86BB1@bitsofproof.com>
Message-ID: <1533279.gyh3J7MHJl@crushinator>

On Saturday, 29 March 2014, at 9:44 am, Tamas Blummer wrote:
> I used Shamir's Secret Sharing to decompose a seed for a BIP32 master key, that is I think more future relevant than a single key.
> Therefore suggest to adapt the BIP for a length used there typically 16 or 32 bytes and have a magic code to indicate its use as key vs. seed.

Master keys of 32 bytes would work as-is, as ordinary private keys are also 32 bytes. Secrets of other lengths could be supported if the function that generates a[i] from a[i-1] (which is presently SHA-256) were replaced with a function having parameterized output length, such as scrypt.

Base58Check encodings of shares for secrets of lengths other than 32 bytes would have prefixes other than "SS", but that's not a huge concern. I suspect 32 bytes would be the most common secret length anyway, wouldn't you?



From chris at beams.io  Sat Mar 29 09:21:16 2014
From: chris at beams.io (Chris Beams)
Date: Sat, 29 Mar 2014 10:21:16 +0100
Subject: [Bitcoin-development] Presenting a BIP for Shamir's Secret
	Sharing of Bitcoin private keys
In-Reply-To: <1878927.J1e3zZmtIP@crushinator>
References: <1878927.J1e3zZmtIP@crushinator>
Message-ID: <22007B81-4578-4565-A6DD-73DFEB6A09B4@beams.io>

Matt, could you expand on use cases for which you see Shamir's Secret Sharing as the best tool for the job? In particular, when do you see that it would be superior to simply going with multisig in the first place? Perhaps you see these as complimentary approaches, toward defense in depth? In any case, the Motivation and Rationale sections of the BIP in its current form are silent on these questions.

On Mar 29, 2014, at 9:05 AM, Matt Whitlock <bip at mattwhitlock.name> wrote:

> Abstract: A method is described for dividing a Bitcoin private key into shares in a manner such that the key can be reconstituted from any sufficiently large subset of the shares but such that individually the shares do not reveal any information about the key. This method is commonly known as Shamir's Secret Sharing Scheme. Additionally, an encoding methodology is proposed to standardize transmission and storage of shares.
> 
> Complete BIP: https://github.com/whitslack/btctool/blob/bip/bip-xxxx.mediawiki
> 
> I am looking to have this BIP assigned a number and added to the bitcoin/bips repository. I invite any comments, questions, or suggestions.
> 
> ------------------------------------------------------------------------------
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 841 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140329/7d13e0ea/attachment.sig>

From chris at beams.io  Sat Mar 29 09:08:47 2014
From: chris at beams.io (Chris Beams)
Date: Sat, 29 Mar 2014 10:08:47 +0100
Subject: [Bitcoin-development] Presenting a BIP for Shamir's Secret
	Sharing of Bitcoin private keys
In-Reply-To: <1878927.J1e3zZmtIP@crushinator>
References: <1878927.J1e3zZmtIP@crushinator>
Message-ID: <83BBF97F-290E-4CF9-B062-92445ED35F27@beams.io>

Matt, could you expand on use cases for which you see Shamir's Secret Sharing Scheme as the best tool for the job? In particular, when do you see that it would be superior to simply going with multisig in the first place? Perhaps you see these as complimentary approaches, toward defense-in-depth? In any case, the Motivation and Rationale sections of the BIP in its current form are silent on these questions.

On Mar 29, 2014, at 9:05 AM, Matt Whitlock <bip at mattwhitlock.name> wrote:

> Abstract: A method is described for dividing a Bitcoin private key into shares in a manner such that the key can be reconstituted from any sufficiently large subset of the shares but such that individually the shares do not reveal any information about the key. This method is commonly known as Shamir's Secret Sharing Scheme. Additionally, an encoding methodology is proposed to standardize transmission and storage of shares.
> 
> Complete BIP: https://github.com/whitslack/btctool/blob/bip/bip-xxxx.mediawiki
> 
> I am looking to have this BIP assigned a number and added to the bitcoin/bips repository. I invite any comments, questions, or suggestions.
> 
> ------------------------------------------------------------------------------
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 841 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140329/f9a99d19/attachment.sig>

From roy at gnomon.org.uk  Sat Mar 29 09:27:22 2014
From: roy at gnomon.org.uk (Roy Badami)
Date: Sat, 29 Mar 2014 09:27:22 +0000
Subject: [Bitcoin-development] BIP 70 refund field
In-Reply-To: <lh4nma$h3e$1@ger.gmane.org>
References: <CANEZrP0AwR3WgHfwYWcrC9Z_MHPDwymWXAQwp7D8XZ+o2FsK8g@mail.gmail.com>
	<lh3m7i$v18$1@ger.gmane.org>
	<CANEZrP3zBFs=JpJi6eazTvrTaRX6XCJLu-zrraE6bezYW7b9pQ@mail.gmail.com>
	<lh49pp$4bc$1@ger.gmane.org> <5335BD17.6050408@plan99.net>
	<lh4nma$h3e$1@ger.gmane.org>
Message-ID: <20140329092721.GG62995@giles.gnomon.org.uk>

On Fri, Mar 28, 2014 at 09:56:57PM +0100, Andreas Schildbach wrote:
> On 03/28/2014 07:19 PM, Mike Hearn wrote:
> 
> >> Ok, why don't fix this in the spec for now, by defining a fixed expiry
> >> time. In the EU, most products are covered by a 2 years warranty, so it
> >> seems appropriate to pick 2.5 years (30 months) -- allowing for some
> >> time to ship the product back and forth.
> >
> > Yeah I was thinking something like that on the walk home. But 2 years is
> > a long time. Do we have enough RAM for that?
> 
> It depends on usage stats, script size, etc...
> 
> > Plus warranties usually
> > result in the defective goods being replaced rather than a monetary
> > refund, right?
> 
> Usually yes. The next smaller "unit of time" in Germany would be two
> weeks, the so-called "Fernabsatzgesetz". It allows you to send back
> mail-orders and usually you want the money back. Don't know if that made
> it into EU law or how it applies to other countries.

It's EU law, but the Distance Selling Directive only says "at least
seven days", so the exact period probably varies by country (in the UK
it is 7 days).

But the clock only starts ticking when you receive the goods, and the
Distance Selling Directive allows the supplier 30 days "to execute the
order" (I *think* the 30 days always has to include shipping, because
for consumer contracts title doesn't pass until the goods are
delivered, so the order wouldn't be considered complete until then).

So I think latest possible deadline for returning the goods for refund
could be up to 30 days to execute the order plus "at least 7 days"
(with some countries allowing more).  Plus, conceivably, shipping
time, if some member states have chosen to interpret the 30 day
execution differently.

So I think this adds up to "a couple of months, give or take".  In
practice, though, even a couple of months is a bit on the short time.
What if the goods are delayed.  How many people have had miner orders
outstanding for the best part of a year?

roy




From bip at mattwhitlock.name  Sat Mar 29 09:31:12 2014
From: bip at mattwhitlock.name (Matt Whitlock)
Date: Sat, 29 Mar 2014 05:31:12 -0400
Subject: [Bitcoin-development] Presenting a BIP for Shamir's Secret
	Sharing of Bitcoin private keys
In-Reply-To: <83BBF97F-290E-4CF9-B062-92445ED35F27@beams.io>
References: <1878927.J1e3zZmtIP@crushinator>
	<83BBF97F-290E-4CF9-B062-92445ED35F27@beams.io>
Message-ID: <2161958.W1q2MCGbqG@crushinator>

On Saturday, 29 March 2014, at 10:08 am, Chris Beams wrote:
> Matt, could you expand on use cases for which you see Shamir's Secret Sharing Scheme as the best tool for the job? In particular, when do you see that it would be superior to simply going with multisig in the first place? Perhaps you see these as complimentary approaches, toward defense-in-depth? In any case, the Motivation and Rationale sections of the BIP in its current form are silent on these questions.

Okay, yes, I will address these questions.



From bip at mattwhitlock.name  Sat Mar 29 11:16:34 2014
From: bip at mattwhitlock.name (Matt Whitlock)
Date: Sat, 29 Mar 2014 07:16:34 -0400
Subject: [Bitcoin-development] Presenting a BIP for Shamir's Secret
	Sharing of Bitcoin private keys
In-Reply-To: <83BBF97F-290E-4CF9-B062-92445ED35F27@beams.io>
References: <1878927.J1e3zZmtIP@crushinator>
	<83BBF97F-290E-4CF9-B062-92445ED35F27@beams.io>
Message-ID: <1701792.nYQmSeReja@crushinator>

On Saturday, 29 March 2014, at 10:08 am, Chris Beams wrote:
> Matt, could you expand on use cases for which you see Shamir's Secret Sharing Scheme as the best tool for the job? In particular, when do you see that it would be superior to simply going with multisig in the first place? Perhaps you see these as complimentary approaches, toward defense-in-depth? In any case, the Motivation and Rationale sections of the BIP in its current form are silent on these questions.

I have added two new sections to address your questions.

https://github.com/whitslack/btctool/blob/bip/bip-xxxx.mediawiki



From chris at beams.io  Sat Mar 29 11:54:27 2014
From: chris at beams.io (Chris Beams)
Date: Sat, 29 Mar 2014 12:54:27 +0100
Subject: [Bitcoin-development] Presenting a BIP for Shamir's Secret
	Sharing of Bitcoin private keys
In-Reply-To: <1701792.nYQmSeReja@crushinator>
References: <1878927.J1e3zZmtIP@crushinator>
	<83BBF97F-290E-4CF9-B062-92445ED35F27@beams.io>
	<1701792.nYQmSeReja@crushinator>
Message-ID: <CA0DE0F6-C5B9-4BC4-9F79-D98C89A159F4@beams.io>

Enlightening; thanks, Matt. And apologies to the list for my earlier inadvertent double-post.

On Mar 29, 2014, at 12:16 PM, Matt Whitlock <bip at mattwhitlock.name> wrote:

> On Saturday, 29 March 2014, at 10:08 am, Chris Beams wrote:
>> Matt, could you expand on use cases for which you see Shamir's Secret Sharing Scheme as the best tool for the job? In particular, when do you see that it would be superior to simply going with multisig in the first place? Perhaps you see these as complimentary approaches, toward defense-in-depth? In any case, the Motivation and Rationale sections of the BIP in its current form are silent on these questions.
> 
> I have added two new sections to address your questions.
> 
> https://github.com/whitslack/btctool/blob/bip/bip-xxxx.mediawiki

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 841 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140329/6d447c6b/attachment.sig>

From jgarzik at bitpay.com  Sat Mar 29 13:27:36 2014
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Sat, 29 Mar 2014 09:27:36 -0400
Subject: [Bitcoin-development] Presenting a BIP for Shamir's Secret
 Sharing of Bitcoin private keys
In-Reply-To: <CA0DE0F6-C5B9-4BC4-9F79-D98C89A159F4@beams.io>
References: <1878927.J1e3zZmtIP@crushinator>
	<83BBF97F-290E-4CF9-B062-92445ED35F27@beams.io>
	<1701792.nYQmSeReja@crushinator>
	<CA0DE0F6-C5B9-4BC4-9F79-D98C89A159F4@beams.io>
Message-ID: <CAJHLa0N0YCHfBeDq+QLqK3ZVWD-rAx85MXvX4OBqSoQqgCXm2w@mail.gmail.com>

The comparison with multisig fails to mention that multi-signature
transactions explicitly define security at the transaction level.
This permits fine-grained specificity of what a key holder may
approve.

Shamir is much more coarse-grained.  You reconstitute a private key,
which may then be used to control anything that key controls.  Thus,
in addition to Shamir itself, you need policies such as "no key
reuse."

My first impression of Shamir many moons ago was "cool!" but that's
since been tempered by thinking through the use cases.  Shamir has a
higher D.I.Y. factor, with a correspondingly larger surface of
things-that-could-go-wrong, IMO.

(None of this implies making an informational BIP lacks value; I'm all
for an informational BIP)




On Sat, Mar 29, 2014 at 7:54 AM, Chris Beams <chris at beams.io> wrote:
> Enlightening; thanks, Matt. And apologies to the list for my earlier inadvertent double-post.
>
> On Mar 29, 2014, at 12:16 PM, Matt Whitlock <bip at mattwhitlock.name> wrote:
>
>> On Saturday, 29 March 2014, at 10:08 am, Chris Beams wrote:
>>> Matt, could you expand on use cases for which you see Shamir's Secret Sharing Scheme as the best tool for the job? In particular, when do you see that it would be superior to simply going with multisig in the first place? Perhaps you see these as complimentary approaches, toward defense-in-depth? In any case, the Motivation and Rationale sections of the BIP in its current form are silent on these questions.
>>
>> I have added two new sections to address your questions.
>>
>> https://github.com/whitslack/btctool/blob/bip/bip-xxxx.mediawiki
>
>
> ------------------------------------------------------------------------------
>
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>



-- 
Jeff Garzik
Bitcoin core developer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From mike at plan99.net  Sat Mar 29 13:29:47 2014
From: mike at plan99.net (Mike Hearn)
Date: Sat, 29 Mar 2014 14:29:47 +0100
Subject: [Bitcoin-development] BIP 70 refund field
In-Reply-To: <20140329092721.GG62995@giles.gnomon.org.uk>
References: <CANEZrP0AwR3WgHfwYWcrC9Z_MHPDwymWXAQwp7D8XZ+o2FsK8g@mail.gmail.com>
	<lh3m7i$v18$1@ger.gmane.org>
	<CANEZrP3zBFs=JpJi6eazTvrTaRX6XCJLu-zrraE6bezYW7b9pQ@mail.gmail.com>
	<lh49pp$4bc$1@ger.gmane.org> <5335BD17.6050408@plan99.net>
	<lh4nma$h3e$1@ger.gmane.org>
	<20140329092721.GG62995@giles.gnomon.org.uk>
Message-ID: <CANEZrP3+-kJiO+pCAdEGtzebcR65eAnTjuFQgQPbzAmh6v-WyQ@mail.gmail.com>

So how about we say two months? That way it's easy for merchants to comply
with the EU DSD and we keep RAM usage in check until we come up with a more
sophisticated refund scheme.

There's another issue with BIP 70 and refunds that I noticed. The
PaymentRequest doesn't specify whether refunds are possible. So wallets
have to either never submit refund data, or always submit it even if it
makes no sense. Because setting things up to get refunds has a non-zero
cost for the sender, it'd help if we could optimise it away for merchants
that simply refuse to issue refunds for whatever reason.



On Sat, Mar 29, 2014 at 10:27 AM, Roy Badami <roy at gnomon.org.uk> wrote:

> On Fri, Mar 28, 2014 at 09:56:57PM +0100, Andreas Schildbach wrote:
> > On 03/28/2014 07:19 PM, Mike Hearn wrote:
> >
> > >> Ok, why don't fix this in the spec for now, by defining a fixed expiry
> > >> time. In the EU, most products are covered by a 2 years warranty, so
> it
> > >> seems appropriate to pick 2.5 years (30 months) -- allowing for some
> > >> time to ship the product back and forth.
> > >
> > > Yeah I was thinking something like that on the walk home. But 2 years
> is
> > > a long time. Do we have enough RAM for that?
> >
> > It depends on usage stats, script size, etc...
> >
> > > Plus warranties usually
> > > result in the defective goods being replaced rather than a monetary
> > > refund, right?
> >
> > Usually yes. The next smaller "unit of time" in Germany would be two
> > weeks, the so-called "Fernabsatzgesetz". It allows you to send back
> > mail-orders and usually you want the money back. Don't know if that made
> > it into EU law or how it applies to other countries.
>
> It's EU law, but the Distance Selling Directive only says "at least
> seven days", so the exact period probably varies by country (in the UK
> it is 7 days).
>
> But the clock only starts ticking when you receive the goods, and the
> Distance Selling Directive allows the supplier 30 days "to execute the
> order" (I *think* the 30 days always has to include shipping, because
> for consumer contracts title doesn't pass until the goods are
> delivered, so the order wouldn't be considered complete until then).
>
> So I think latest possible deadline for returning the goods for refund
> could be up to 30 days to execute the order plus "at least 7 days"
> (with some countries allowing more).  Plus, conceivably, shipping
> time, if some member states have chosen to interpret the 30 day
> execution differently.
>
> So I think this adds up to "a couple of months, give or take".  In
> practice, though, even a couple of months is a bit on the short time.
> What if the goods are delayed.  How many people have had miner orders
> outstanding for the best part of a year?
>
> roy
>
>
>
> ------------------------------------------------------------------------------
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140329/6ebb0510/attachment.html>

From mike at plan99.net  Sat Mar 29 13:30:47 2014
From: mike at plan99.net (Mike Hearn)
Date: Sat, 29 Mar 2014 14:30:47 +0100
Subject: [Bitcoin-development] BIP 70 and OP_RETURN
In-Reply-To: <5335EC3B.6070605@silicon>
References: <5335EC3B.6070605@silicon>
Message-ID: <CANEZrP3wXZVzZ+9r6o2dDm6d+zPqs4NSeomH8eapXadxS-aMKg@mail.gmail.com>

They would just encode the OP_RETURN script into an Output structure. I'm
not sure about the question - you seem to give the answer yourself in the
first paragraph?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140329/900626a1/attachment.html>

From mike at plan99.net  Sat Mar 29 13:36:07 2014
From: mike at plan99.net (Mike Hearn)
Date: Sat, 29 Mar 2014 14:36:07 +0100
Subject: [Bitcoin-development] Presenting a BIP for Shamir's Secret
 Sharing of Bitcoin private keys
In-Reply-To: <CAJHLa0N0YCHfBeDq+QLqK3ZVWD-rAx85MXvX4OBqSoQqgCXm2w@mail.gmail.com>
References: <1878927.J1e3zZmtIP@crushinator>
	<83BBF97F-290E-4CF9-B062-92445ED35F27@beams.io>
	<1701792.nYQmSeReja@crushinator>
	<CA0DE0F6-C5B9-4BC4-9F79-D98C89A159F4@beams.io>
	<CAJHLa0N0YCHfBeDq+QLqK3ZVWD-rAx85MXvX4OBqSoQqgCXm2w@mail.gmail.com>
Message-ID: <CANEZrP0WAMGV_ki3+9eFPaLQQVS7BJQ1c1c7KDuQatTeun-VwA@mail.gmail.com>

Right - the explanation in the BIP about the board of  directors is IMO a
little misleading. The problem is with splitting a private key is that at
some point, *someone* has to get the full private key back and they can
then just remember the private key to undo the system. CHECKMULTISIG avoids
this.

I can imagine that there may be occasional uses for splitting a wallet seed
like this, like for higher security cold wallets, but I suspect an ongoing
shared account like a corporate account is still best off using
CHECKMULTISIG or the n-of-m ECDSA threshold scheme proposed by Ali et al.


On Sat, Mar 29, 2014 at 2:27 PM, Jeff Garzik <jgarzik at bitpay.com> wrote:

> The comparison with multisig fails to mention that multi-signature
> transactions explicitly define security at the transaction level.
> This permits fine-grained specificity of what a key holder may
> approve.
>
> Shamir is much more coarse-grained.  You reconstitute a private key,
> which may then be used to control anything that key controls.  Thus,
> in addition to Shamir itself, you need policies such as "no key
> reuse."
>
> My first impression of Shamir many moons ago was "cool!" but that's
> since been tempered by thinking through the use cases.  Shamir has a
> higher D.I.Y. factor, with a correspondingly larger surface of
> things-that-could-go-wrong, IMO.
>
> (None of this implies making an informational BIP lacks value; I'm all
> for an informational BIP)
>
>
>
>
> On Sat, Mar 29, 2014 at 7:54 AM, Chris Beams <chris at beams.io> wrote:
> > Enlightening; thanks, Matt. And apologies to the list for my earlier
> inadvertent double-post.
> >
> > On Mar 29, 2014, at 12:16 PM, Matt Whitlock <bip at mattwhitlock.name>
> wrote:
> >
> >> On Saturday, 29 March 2014, at 10:08 am, Chris Beams wrote:
> >>> Matt, could you expand on use cases for which you see Shamir's Secret
> Sharing Scheme as the best tool for the job? In particular, when do you see
> that it would be superior to simply going with multisig in the first place?
> Perhaps you see these as complimentary approaches, toward defense-in-depth?
> In any case, the Motivation and Rationale sections of the BIP in its
> current form are silent on these questions.
> >>
> >> I have added two new sections to address your questions.
> >>
> >> https://github.com/whitslack/btctool/blob/bip/bip-xxxx.mediawiki
> >
> >
> >
> ------------------------------------------------------------------------------
> >
> > _______________________________________________
> > Bitcoin-development mailing list
> > Bitcoin-development at lists.sourceforge.net
> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> >
>
>
>
> --
> Jeff Garzik
> Bitcoin core developer and open source evangelist
> BitPay, Inc.      https://bitpay.com/
>
>
> ------------------------------------------------------------------------------
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140329/2bdbbda6/attachment.html>

From tamas at bitsofproof.com  Sat Mar 29 13:38:53 2014
From: tamas at bitsofproof.com (Tamas Blummer)
Date: Sat, 29 Mar 2014 14:38:53 +0100
Subject: [Bitcoin-development] Presenting a BIP for Shamir's Secret
	Sharing of Bitcoin private keys
In-Reply-To: <CANEZrP0WAMGV_ki3+9eFPaLQQVS7BJQ1c1c7KDuQatTeun-VwA@mail.gmail.com>
References: <1878927.J1e3zZmtIP@crushinator>
	<83BBF97F-290E-4CF9-B062-92445ED35F27@beams.io>
	<1701792.nYQmSeReja@crushinator>
	<CA0DE0F6-C5B9-4BC4-9F79-D98C89A159F4@beams.io>
	<CAJHLa0N0YCHfBeDq+QLqK3ZVWD-rAx85MXvX4OBqSoQqgCXm2w@mail.gmail.com>
	<CANEZrP0WAMGV_ki3+9eFPaLQQVS7BJQ1c1c7KDuQatTeun-VwA@mail.gmail.com>
Message-ID: <7AB025F4-3C78-4E8E-B57D-2D5348CF95B1@bitsofproof.com>


This is why my motivation is rather secure backup, not multisig. Instead of storing encrypted seed in one location and the passphrase for it in an other location, one can just store two shares in two places.


> Right - the explanation in the BIP about the board of  directors is IMO a little misleading. The problem is with splitting a private key is that at some point, someone has to get the full private key back and they can then just remember the private key to undo the system. CHECKMULTISIG avoids this.
> 
> I can imagine that there may be occasional uses for splitting a wallet seed like this, like for higher security cold wallets, but I suspect an ongoing shared account like a corporate account is still best off using CHECKMULTISIG or the n-of-m ECDSA threshold scheme proposed by Ali et al.
> 
> 
> On Sat, Mar 29, 2014 at 2:27 PM, Jeff Garzik <jgarzik at bitpay.com> wrote:
> The comparison with multisig fails to mention that multi-signature
> transactions explicitly define security at the transaction level.
> This permits fine-grained specificity of what a key holder may
> approve.
> 
> Shamir is much more coarse-grained.  You reconstitute a private key,
> which may then be used to control anything that key controls.  Thus,
> in addition to Shamir itself, you need policies such as "no key
> reuse."
> 
> My first impression of Shamir many moons ago was "cool!" but that's
> since been tempered by thinking through the use cases.  Shamir has a
> higher D.I.Y. factor, with a correspondingly larger surface of
> things-that-could-go-wrong, IMO.
> 
> (None of this implies making an informational BIP lacks value; I'm all
> for an informational BIP)
> 
> 
> 
> 
> On Sat, Mar 29, 2014 at 7:54 AM, Chris Beams <chris at beams.io> wrote:
> > Enlightening; thanks, Matt. And apologies to the list for my earlier inadvertent double-post.
> >
> > On Mar 29, 2014, at 12:16 PM, Matt Whitlock <bip at mattwhitlock.name> wrote:
> >
> >> On Saturday, 29 March 2014, at 10:08 am, Chris Beams wrote:
> >>> Matt, could you expand on use cases for which you see Shamir's Secret Sharing Scheme as the best tool for the job? In particular, when do you see that it would be superior to simply going with multisig in the first place? Perhaps you see these as complimentary approaches, toward defense-in-depth? In any case, the Motivation and Rationale sections of the BIP in its current form are silent on these questions.
> >>
> >> I have added two new sections to address your questions.
> >>
> >> https://github.com/whitslack/btctool/blob/bip/bip-xxxx.mediawiki
> >
> >
> > ------------------------------------------------------------------------------
> >
> > _______________________________________________
> > Bitcoin-development mailing list
> > Bitcoin-development at lists.sourceforge.net
> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> >
> 
> 
> 
> --
> Jeff Garzik
> Bitcoin core developer and open source evangelist
> BitPay, Inc.      https://bitpay.com/
> 
> ------------------------------------------------------------------------------
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 
> ------------------------------------------------------------------------------
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140329/6c333492/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 495 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140329/6c333492/attachment.sig>

From bip at mattwhitlock.name  Sat Mar 29 14:10:38 2014
From: bip at mattwhitlock.name (Matt Whitlock)
Date: Sat, 29 Mar 2014 10:10:38 -0400
Subject: [Bitcoin-development] Presenting a BIP for Shamir's Secret
	Sharing of Bitcoin private keys
In-Reply-To: <CANEZrP0WAMGV_ki3+9eFPaLQQVS7BJQ1c1c7KDuQatTeun-VwA@mail.gmail.com>
References: <1878927.J1e3zZmtIP@crushinator>
	<CAJHLa0N0YCHfBeDq+QLqK3ZVWD-rAx85MXvX4OBqSoQqgCXm2w@mail.gmail.com>
	<CANEZrP0WAMGV_ki3+9eFPaLQQVS7BJQ1c1c7KDuQatTeun-VwA@mail.gmail.com>
Message-ID: <1894130.91FUH3Vu6n@crushinator>

On Saturday, 29 March 2014, at 2:36 pm, Mike Hearn wrote:
> Right - the explanation in the BIP about the board of  directors is IMO a
> little misleading. The problem is with splitting a private key is that at
> some point, *someone* has to get the full private key back and they can
> then just remember the private key to undo the system. CHECKMULTISIG avoids
> this.

The implication is that every director would want to retain the board's private key for himself but also would want to prevent every other director from successfully retaining the private key for himself, leading to a perpetual stalemate in which no director ever gets to retain the private key.

> I can imagine that there may be occasional uses for splitting a wallet seed
> like this, like for higher security cold wallets, but I suspect an ongoing
> shared account like a corporate account is still best off using
> CHECKMULTISIG or the n-of-m ECDSA threshold scheme proposed by Ali et al.

Multisig does not allow for the topology I described. Say the board has seven directors, meaning the majority threshold is four. This means the organization needs the consent of six individuals in order to sign a transaction: the president, the CFO, and any four of the board members. A 6-of-9 multisig would not accomplish the same policy, as then any six board members could successfully sign a transaction without the consent of the president or CFO. Of course the multi-signature scheme could be expanded to allow for hierarchical threshold topologies, or Shamir's Secret Sharing can be used to distribute keys at the second level (and further, if desired).



From jgarzik at bitpay.com  Sat Mar 29 14:19:20 2014
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Sat, 29 Mar 2014 10:19:20 -0400
Subject: [Bitcoin-development] Presenting a BIP for Shamir's Secret
 Sharing of Bitcoin private keys
In-Reply-To: <1894130.91FUH3Vu6n@crushinator>
References: <1878927.J1e3zZmtIP@crushinator>
	<CAJHLa0N0YCHfBeDq+QLqK3ZVWD-rAx85MXvX4OBqSoQqgCXm2w@mail.gmail.com>
	<CANEZrP0WAMGV_ki3+9eFPaLQQVS7BJQ1c1c7KDuQatTeun-VwA@mail.gmail.com>
	<1894130.91FUH3Vu6n@crushinator>
Message-ID: <CAJHLa0NMNiX34r2AEUU9e2wRnYQ00tCpLVnQfGwN1YwdT5LHLA@mail.gmail.com>

On Sat, Mar 29, 2014 at 10:10 AM, Matt Whitlock <bip at mattwhitlock.name> wrote:
> Multisig does not allow for the topology I described. Say the board has seven directors, meaning the majority threshold is four. This means the organization needs the consent of six individuals in order to sign a transaction: the president, the CFO, and any four of the board members. A 6-of-9 multisig would not accomplish the same policy, as then any six board members could successfully sign a transaction without the consent of the president or CFO. Of course the multi-signature scheme could be expanded to allow for hierarchical threshold topologies, or Shamir's Secret Sharing can be used to distribute keys at the second level (and further, if desired).

Disagree with "does not allow"  Review bitcoin's script language.

Bitcoin script can handle the use case you describe.  Add conditionals
to the bitcoin script, OP_IF etc.  You can do 'multisig AND multisig'
type boolean logic entirely in script, and be far more flexible than a
single CHECKMULTISIG affords.

-- 
Jeff Garzik
Bitcoin core developer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From wbl at uchicago.edu  Sat Mar 29 14:28:20 2014
From: wbl at uchicago.edu (Watson Ladd)
Date: Sat, 29 Mar 2014 10:28:20 -0400
Subject: [Bitcoin-development] Presenting a BIP for Shamir's Secret
 Sharing of Bitcoin private keys
In-Reply-To: <1894130.91FUH3Vu6n@crushinator>
References: <1878927.J1e3zZmtIP@crushinator>
	<CAJHLa0N0YCHfBeDq+QLqK3ZVWD-rAx85MXvX4OBqSoQqgCXm2w@mail.gmail.com>
	<CANEZrP0WAMGV_ki3+9eFPaLQQVS7BJQ1c1c7KDuQatTeun-VwA@mail.gmail.com>
	<1894130.91FUH3Vu6n@crushinator>
Message-ID: <CACsn0cn8cFn79dMi7M3uALE5KDFJOzxK4PdFyRR8j56FygnQZg@mail.gmail.com>

On Sat, Mar 29, 2014 at 10:10 AM, Matt Whitlock <bip at mattwhitlock.name> wrote:
> On Saturday, 29 March 2014, at 2:36 pm, Mike Hearn wrote:
>> Right - the explanation in the BIP about the board of  directors is IMO a
>> little misleading. The problem is with splitting a private key is that at
>> some point, *someone* has to get the full private key back and they can
>> then just remember the private key to undo the system. CHECKMULTISIG avoids
>> this.
>
> The implication is that every director would want to retain the board's private key for himself but also would want to prevent every other director from successfully retaining the private key for himself, leading to a perpetual stalemate in which no director ever gets to retain the private key.

This is not the case: one can use MPC techniques to compute a
signature from shares without reconstructing the private key. There is
a paper on this for bitcoin, but I don't know where it is.

>
>> I can imagine that there may be occasional uses for splitting a wallet seed
>> like this, like for higher security cold wallets, but I suspect an ongoing
>> shared account like a corporate account is still best off using
>> CHECKMULTISIG or the n-of-m ECDSA threshold scheme proposed by Ali et al.
>
> Multisig does not allow for the topology I described. Say the board has seven directors, meaning the majority threshold is four. This means the organization needs the consent of six individuals in order to sign a transaction: the president, the CFO, and any four of the board members. A 6-of-9 multisig would not accomplish the same policy, as then any six board members could successfully sign a transaction without the consent of the president or CFO. Of course the multi-signature scheme could be expanded to allow for hierarchical threshold topologies, or Shamir's Secret Sharing can be used to distribute keys at the second level (and further, if desired).
>
> ------------------------------------------------------------------------------
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development



-- 
"Those who would give up Essential Liberty to purchase a little
Temporary Safety deserve neither  Liberty nor Safety."
-- Benjamin Franklin



From gmaxwell at gmail.com  Sat Mar 29 14:36:58 2014
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Sat, 29 Mar 2014 07:36:58 -0700
Subject: [Bitcoin-development] Presenting a BIP for Shamir's Secret
 Sharing of Bitcoin private keys
In-Reply-To: <CACsn0cn8cFn79dMi7M3uALE5KDFJOzxK4PdFyRR8j56FygnQZg@mail.gmail.com>
References: <1878927.J1e3zZmtIP@crushinator>
	<CAJHLa0N0YCHfBeDq+QLqK3ZVWD-rAx85MXvX4OBqSoQqgCXm2w@mail.gmail.com>
	<CANEZrP0WAMGV_ki3+9eFPaLQQVS7BJQ1c1c7KDuQatTeun-VwA@mail.gmail.com>
	<1894130.91FUH3Vu6n@crushinator>
	<CACsn0cn8cFn79dMi7M3uALE5KDFJOzxK4PdFyRR8j56FygnQZg@mail.gmail.com>
Message-ID: <CAAS2fgRCuQ+WtaMOr45cPh6bFmajweSAfPJse85Rh3bYjtdE3Q@mail.gmail.com>

On Sat, Mar 29, 2014 at 7:28 AM, Watson Ladd <wbl at uchicago.edu> wrote:
> This is not the case: one can use MPC techniques to compute a
> signature from shares without reconstructing the private key. There is
> a paper on this for bitcoin, but I don't know where it is.

Practically speaking you cannot unless the technique used is one
carefully selected to make it possible. This proposal isn't such a
scheme I beleieve, however,  and I think I'd strongly prefer that we
BIP standardize a formulation which also has this property.

The paper you want is
http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.67.9913

There will soon be a paper coming out from some princeton folks about
refining that and applying it to Bitcoin.

You can use the secret sharing from threshold ecdsa in the
not-super-useful way where you just recombine the private key and
sign... but you can also use it to compute a secret shared signature
and then interpolate back the signature... avoiding the need for any
trusted device in holding the signature.



From bip at mattwhitlock.name  Sat Mar 29 14:55:54 2014
From: bip at mattwhitlock.name (Matt Whitlock)
Date: Sat, 29 Mar 2014 10:55:54 -0400
Subject: [Bitcoin-development] Presenting a BIP for Shamir's Secret
	Sharing of Bitcoin private keys
In-Reply-To: <CAJHLa0NMNiX34r2AEUU9e2wRnYQ00tCpLVnQfGwN1YwdT5LHLA@mail.gmail.com>
References: <1878927.J1e3zZmtIP@crushinator> <1894130.91FUH3Vu6n@crushinator>
	<CAJHLa0NMNiX34r2AEUU9e2wRnYQ00tCpLVnQfGwN1YwdT5LHLA@mail.gmail.com>
Message-ID: <4113697.13qtlTpVUA@crushinator>

On Saturday, 29 March 2014, at 10:19 am, Jeff Garzik wrote:
> On Sat, Mar 29, 2014 at 10:10 AM, Matt Whitlock <bip at mattwhitlock.name> wrote:
> > Multisig does not allow for the topology I described. Say the board has seven directors, meaning the majority threshold is four. This means the organization needs the consent of six individuals in order to sign a transaction: the president, the CFO, and any four of the board members. A 6-of-9 multisig would not accomplish the same policy, as then any six board members could successfully sign a transaction without the consent of the president or CFO. Of course the multi-signature scheme could be expanded to allow for hierarchical threshold topologies, or Shamir's Secret Sharing can be used to distribute keys at the second level (and further, if desired).
> 
> Disagree with "does not allow"  Review bitcoin's script language.
> 
> Bitcoin script can handle the use case you describe.  Add conditionals
> to the bitcoin script, OP_IF etc.  You can do 'multisig AND multisig'
> type boolean logic entirely in script, and be far more flexible than a
> single CHECKMULTISIG affords.

Depends on your definition of "can." Bitcoin's scripting language is awesome, but it's mostly useless due to the requirement that scripts match one of a select few "standard" templates in order to be allowed to propagate across the network and be mined into blocks. I really hate IsStandard and wish it would die.



From bip at mattwhitlock.name  Sat Mar 29 15:01:45 2014
From: bip at mattwhitlock.name (Matt Whitlock)
Date: Sat, 29 Mar 2014 11:01:45 -0400
Subject: [Bitcoin-development] Presenting a BIP for Shamir's Secret
	Sharing of Bitcoin private keys
In-Reply-To: <CAAS2fgRCuQ+WtaMOr45cPh6bFmajweSAfPJse85Rh3bYjtdE3Q@mail.gmail.com>
References: <1878927.J1e3zZmtIP@crushinator>
	<CACsn0cn8cFn79dMi7M3uALE5KDFJOzxK4PdFyRR8j56FygnQZg@mail.gmail.com>
	<CAAS2fgRCuQ+WtaMOr45cPh6bFmajweSAfPJse85Rh3bYjtdE3Q@mail.gmail.com>
Message-ID: <2288723.8YLNJJXu0j@crushinator>

On Saturday, 29 March 2014, at 7:36 am, Gregory Maxwell wrote:
> On Sat, Mar 29, 2014 at 7:28 AM, Watson Ladd <wbl at uchicago.edu> wrote:
> > This is not the case: one can use MPC techniques to compute a
> > signature from shares without reconstructing the private key. There is
> > a paper on this for bitcoin, but I don't know where it is.
> 
> Practically speaking you cannot unless the technique used is one
> carefully selected to make it possible. This proposal isn't such a
> scheme I beleieve, however,  and I think I'd strongly prefer that we
> BIP standardize a formulation which also has this property.

I too would prefer that, but I do not believe there exists a method for computing a traditional signature from decomposed private key shares. Unless I'm mistaken, the composed signature has a different formula and requires a different verification algorithm from the ECDSA signatures we're using today. Thus, such a scheme would require a change to the Bitcoin scripting language. I specifically did not want to address that in my BIP because changes like that take too long. I am aiming to be useful in the present.



From justusranvier at gmail.com  Sat Mar 29 15:02:22 2014
From: justusranvier at gmail.com (Justus Ranvier)
Date: Sat, 29 Mar 2014 15:02:22 +0000
Subject: [Bitcoin-development] BIP 70 and OP_RETURN
In-Reply-To: <CANEZrP3wXZVzZ+9r6o2dDm6d+zPqs4NSeomH8eapXadxS-aMKg@mail.gmail.com>
References: <5335EC3B.6070605@silicon>
	<CANEZrP3wXZVzZ+9r6o2dDm6d+zPqs4NSeomH8eapXadxS-aMKg@mail.gmail.com>
Message-ID: <5336E07E.5040309@gmail.com>

On 03/29/2014 01:30 PM, Mike Hearn wrote:
> They would just encode the OP_RETURN script into an Output structure. I'm
> not sure about the question - you seem to give the answer yourself in the
> first paragraph?
> 

I guess what I was asking is whether or not all BIP70 compatible clients
will support the creation of all standard output types, including
OP_RETURN outputs.

-- 
Support online privacy by using email encryption whenever possible.
Learn how here: http://www.youtube.com/watch?v=bakOKJFtB-k
-------------- next part --------------
A non-text attachment was scrubbed...
Name: 0x1B438BF4.asc
Type: application/pgp-keys
Size: 21191 bytes
Desc: not available
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140329/2744deda/attachment.bin>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 555 bytes
Desc: OpenPGP digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140329/2744deda/attachment.sig>

From mike at plan99.net  Sat Mar 29 15:04:52 2014
From: mike at plan99.net (Mike Hearn)
Date: Sat, 29 Mar 2014 16:04:52 +0100
Subject: [Bitcoin-development] Presenting a BIP for Shamir's Secret
 Sharing of Bitcoin private keys
In-Reply-To: <4113697.13qtlTpVUA@crushinator>
References: <1878927.J1e3zZmtIP@crushinator> <1894130.91FUH3Vu6n@crushinator>
	<CAJHLa0NMNiX34r2AEUU9e2wRnYQ00tCpLVnQfGwN1YwdT5LHLA@mail.gmail.com>
	<4113697.13qtlTpVUA@crushinator>
Message-ID: <CANEZrP3H6sNfpwVMXMNS9C7gji-A4s0_Q5C-LaEwZ+5uKSMZ1A@mail.gmail.com>

Nobody is exactly thrilled by IsStandard, but it's not a deal-killer. If
you have a use for a new type of script it can be added, and people do
upgrade:

http://getaddr.bitnodes.io/dashboard/chart/?days=30

As you can see the 0.9 rollout is going OK. If a new script type had been
made standard for 0.9 like OP_RETURN was, I'm guessing it'll only be
another month or so and it'll be quite usable.


On Sat, Mar 29, 2014 at 3:55 PM, Matt Whitlock <bip at mattwhitlock.name>wrote:

> On Saturday, 29 March 2014, at 10:19 am, Jeff Garzik wrote:
> > On Sat, Mar 29, 2014 at 10:10 AM, Matt Whitlock <bip at mattwhitlock.name>
> wrote:
> > > Multisig does not allow for the topology I described. Say the board
> has seven directors, meaning the majority threshold is four. This means the
> organization needs the consent of six individuals in order to sign a
> transaction: the president, the CFO, and any four of the board members. A
> 6-of-9 multisig would not accomplish the same policy, as then any six board
> members could successfully sign a transaction without the consent of the
> president or CFO. Of course the multi-signature scheme could be expanded to
> allow for hierarchical threshold topologies, or Shamir's Secret Sharing can
> be used to distribute keys at the second level (and further, if desired).
> >
> > Disagree with "does not allow"  Review bitcoin's script language.
> >
> > Bitcoin script can handle the use case you describe.  Add conditionals
> > to the bitcoin script, OP_IF etc.  You can do 'multisig AND multisig'
> > type boolean logic entirely in script, and be far more flexible than a
> > single CHECKMULTISIG affords.
>
> Depends on your definition of "can." Bitcoin's scripting language is
> awesome, but it's mostly useless due to the requirement that scripts match
> one of a select few "standard" templates in order to be allowed to
> propagate across the network and be mined into blocks. I really hate
> IsStandard and wish it would die.
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140329/a39febd9/attachment.html>

From mike at plan99.net  Sat Mar 29 15:06:04 2014
From: mike at plan99.net (Mike Hearn)
Date: Sat, 29 Mar 2014 16:06:04 +0100
Subject: [Bitcoin-development] BIP 70 and OP_RETURN
In-Reply-To: <5336E07E.5040309@gmail.com>
References: <5335EC3B.6070605@silicon>
	<CANEZrP3wXZVzZ+9r6o2dDm6d+zPqs4NSeomH8eapXadxS-aMKg@mail.gmail.com>
	<5336E07E.5040309@gmail.com>
Message-ID: <CANEZrP1tP6K=jerN-w4B=DhzAUwn+Jvdsv1UyX8kZkuQx-1+3g@mail.gmail.com>

They should do. If they don't they're not spec compliant. I'm not sure what
they actually do though. Currently only Bitcoin Core and Android Bitcoin
Wallet implement BIP 70 so you can just create such a request and then try
it out and see what happens.


On Sat, Mar 29, 2014 at 4:02 PM, Justus Ranvier <justusranvier at gmail.com>wrote:

> On 03/29/2014 01:30 PM, Mike Hearn wrote:
> > They would just encode the OP_RETURN script into an Output structure. I'm
> > not sure about the question - you seem to give the answer yourself in the
> > first paragraph?
> >
>
> I guess what I was asking is whether or not all BIP70 compatible clients
> will support the creation of all standard output types, including
> OP_RETURN outputs.
>
> --
> Support online privacy by using email encryption whenever possible.
> Learn how here: http://www.youtube.com/watch?v=bakOKJFtB-k
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140329/4cf79140/attachment.html>

From bip at mattwhitlock.name  Sat Mar 29 15:44:05 2014
From: bip at mattwhitlock.name (Matt Whitlock)
Date: Sat, 29 Mar 2014 11:44:05 -0400
Subject: [Bitcoin-development] Presenting a BIP for Shamir's Secret
	Sharing of Bitcoin private keys
In-Reply-To: <CACsn0ckScTWG4YxNCscxvtdsmcUkxtR2Gi-rdBs2HCkirPz5rA@mail.gmail.com>
References: <CACsn0ckScTWG4YxNCscxvtdsmcUkxtR2Gi-rdBs2HCkirPz5rA@mail.gmail.com>
Message-ID: <4906130.DUyjhm1C93@crushinator>

On Saturday, 29 March 2014, at 11:08 am, Watson Ladd wrote:
> https://freedom-to-tinker.com/blog/stevenag/new-research-better-wallet-security-for-bitcoin/

Thanks. This is great, although it makes some critical references to an ACM paper for which no URL is provided, and thus I cannot implement it.

A distributed ECDSA notwithstanding, we still need a way to decompose a BIP32 master seed into shares. I am envisioning a scenario in which I might meet my sudden and untimely demise, and I wish to allow my beneficiaries to reconstruct my wallet's master seed after my death. I would like to distribute seed shares to each of my beneficiaries and some close friends, such that some subset of the shares must be joined together to reconstitute my master seed. Shamir's Secret Sharing Scheme is perfect for this use case. I am presently working on extending my draft BIP so that it also applies to BIP32 master seeds of various sizes.



From bip at mattwhitlock.name  Sat Mar 29 16:54:11 2014
From: bip at mattwhitlock.name (Matt Whitlock)
Date: Sat, 29 Mar 2014 12:54:11 -0400
Subject: [Bitcoin-development] Presenting a BIP for Shamir's Secret
	Sharing of Bitcoin private keys
In-Reply-To: <AA48C372-6735-40E4-A8AF-264576F86BB1@bitsofproof.com>
References: <1878927.J1e3zZmtIP@crushinator>
	<AA48C372-6735-40E4-A8AF-264576F86BB1@bitsofproof.com>
Message-ID: <4676777.MQU5AqByQt@crushinator>

On Saturday, 29 March 2014, at 9:44 am, Tamas Blummer wrote:
> I used Shamir's Secret Sharing to decompose a seed for a BIP32 master key, that is I think more future relevant than a single key.
> Therefore suggest to adapt the BIP for a length used there typically 16 or 32 bytes and have a magic code to indicate its use as key vs. seed.

I have expanded the BIP so that it additionally applies to BIP32 master seeds of sizes 128, 256, and 512 bits.

https://github.com/whitslack/btctool/blob/bip/bip-xxxx.mediawiki

The most significant change versus the previous version is how the coefficients of the polynomials are constructed. Previously they were SHA-256 digests. Now they are SHA-512 digests, modulo a prime number that is selected depending on the size of the secret.



From etotheipi at gmail.com  Sat Mar 29 16:59:19 2014
From: etotheipi at gmail.com (Alan Reiner)
Date: Sat, 29 Mar 2014 12:59:19 -0400
Subject: [Bitcoin-development] Presenting a BIP for Shamir's Secret
 Sharing of Bitcoin private keys
In-Reply-To: <4906130.DUyjhm1C93@crushinator>
References: <CACsn0ckScTWG4YxNCscxvtdsmcUkxtR2Gi-rdBs2HCkirPz5rA@mail.gmail.com>
	<4906130.DUyjhm1C93@crushinator>
Message-ID: <5336FBE7.7030209@gmail.com>


Armory has had "Fragmented Backups" for over a year, now.  Advanced
users love it.  Though, I would say it's kind of difficult to
standardize the way I did it since I was able to implement all the
finite field math with recursion, list comprehensions and python
arbitrary-big-integers in about 100 lines.  I'm not sure how "portable"
it is to other languages.  There's obviously better ways to do it, but I
didn't need a better way, because I don't need to support fragmentation
above M=8 and this was 100% sufficient for it.  And I was the only one
doing it, so there was no one to be compatible with.

I won't lie, there's a lot of work that goes into making an interface
that makes this feature "usable."  The user needs clear ways to identify
which fragments are associated with which wallet, and which fragments
are compatible with each other.  They need a way to save some fragments
to file, print them, or simply write them down.  They need a way to
re-enter fragment, reject duplicates, identify errors, etc.  Without it,
the math fails silently, and you end up restoring a different wallet.   
And they need a way to test that it all works.   Armory did all this,
but it was no trivial task.  Including an interface that will test up to
50 subsets of make sure the math produces the same values every time
(which still is not sufficient for some users, who won't be satisified
til they see they're wallet actually restored from fragments.

Also I put the secret in the highest-order coefficient of the
polynomial, and made sure that the other coefficients were
deterministic.  This meant that if print out an M-of-N wallet, I can
later print out an M-of-(N+1) wallet and the first N fragments will be
the same.  I'm not sure how many users would trust this, but we felt it
was important in case a user needs to export some fragments, even if
they don't increase N.

You might consider loading Armory in offline mode, create a wallet, and
then do a fragmented backup to see how we did it.  I am extremely
satisfied with the interface, but it's most definitely an "advanced"
tool.  But so is Armory ... which made it a good fit.  But it might not
be for everyone.

-Alan



On 03/29/2014 11:44 AM, Matt Whitlock wrote:
> On Saturday, 29 March 2014, at 11:08 am, Watson Ladd wrote:
>> https://freedom-to-tinker.com/blog/stevenag/new-research-better-wallet-security-for-bitcoin/
> Thanks. This is great, although it makes some critical references to an ACM paper for which no URL is provided, and thus I cannot implement it.
>
> A distributed ECDSA notwithstanding, we still need a way to decompose a BIP32 master seed into shares. I am envisioning a scenario in which I might meet my sudden and untimely demise, and I wish to allow my beneficiaries to reconstruct my wallet's master seed after my death. I would like to distribute seed shares to each of my beneficiaries and some close friends, such that some subset of the shares must be joined together to reconstitute my master seed. Shamir's Secret Sharing Scheme is perfect for this use case. I am presently working on extending my draft BIP so that it also applies to BIP32 master seeds of various sizes.
>
> ------------------------------------------------------------------------------
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development




From bip at mattwhitlock.name  Sat Mar 29 17:19:29 2014
From: bip at mattwhitlock.name (Matt Whitlock)
Date: Sat, 29 Mar 2014 13:19:29 -0400
Subject: [Bitcoin-development] Presenting a BIP for Shamir's Secret
	Sharing of Bitcoin private keys
In-Reply-To: <5336FBE7.7030209@gmail.com>
References: <CACsn0ckScTWG4YxNCscxvtdsmcUkxtR2Gi-rdBs2HCkirPz5rA@mail.gmail.com>
	<4906130.DUyjhm1C93@crushinator> <5336FBE7.7030209@gmail.com>
Message-ID: <15872432.k8h0hUxqlf@crushinator>

On Saturday, 29 March 2014, at 12:59 pm, Alan Reiner wrote:
> I won't lie, there's a lot of work that goes into making an interface
> that makes this feature "usable."  The user needs clear ways to identify
> which fragments are associated with which wallet, and which fragments
> are compatible with each other.

The same is true of the multiple private keys involved in a multi-signature addresses.

> They need a way to save some fragments
> to file, print them, or simply write them down.

I proposed a share encoding scheme for exactly this purpose.

> They need a way to
> re-enter fragment, reject duplicates, identify errors, etc.  Without it,
> the math fails silently, and you end up restoring a different wallet.

I intentionally omitted the parameter M (minimum subset size) from the shares because including it would give an adversary a vital piece of information. Likewise, including any kind of information that would allow a determination of whether the secret has been correctly reconstituted would give an adversary too much information. Failing silently when given incorrect shares or an insufficient number of shares is intentional.

> Also I put the secret in the highest-order coefficient of the
> polynomial,

Does it make any difference which coefficient holds the secret? It's convenient to put it in the lowest-order coefficient to simply the recovery code.

> and made sure that the other coefficients were
> deterministic.  This meant that if print out an M-of-N wallet, I can
> later print out an M-of-(N+1) wallet and the first N fragments will be
> the same.  I'm not sure how many users would trust this, but we felt it
> was important in case a user needs to export some fragments, even if
> they don't increase N.

My BIP likewise deterministically chooses the coefficients so that the shares of a secret are consistent across all runs of the algorithm having the same M. As I'm sure you're aware, N (the number of shares to output) plays no part in the calculation and merely controls how many times the outermost loop is executed. My BIP doesn't even mention this parameter.



From roy at gnomon.org.uk  Sat Mar 29 17:28:16 2014
From: roy at gnomon.org.uk (Roy Badami)
Date: Sat, 29 Mar 2014 17:28:16 +0000
Subject: [Bitcoin-development] Presenting a BIP for Shamir's Secret
 Sharing of Bitcoin private keys
In-Reply-To: <5336FBE7.7030209@gmail.com>
References: <CACsn0ckScTWG4YxNCscxvtdsmcUkxtR2Gi-rdBs2HCkirPz5rA@mail.gmail.com>
	<4906130.DUyjhm1C93@crushinator> <5336FBE7.7030209@gmail.com>
Message-ID: <20140329172815.GH62995@giles.gnomon.org.uk>

Right now there are also people simply taking base58-encoded private
keys and running them through ssss-split.

It has a lot going for it, since it can easily be reassembled on any
Linux machine without special software (B Poettering's Linux command
line SSSS implementation[1] seems to be included in most Linux distros).

roy

[1] http://point-at-infinity.org/ssss/

On Sat, Mar 29, 2014 at 12:59:19PM -0400, Alan Reiner wrote:
> 
> Armory has had "Fragmented Backups" for over a year, now.  Advanced
> users love it.  Though, I would say it's kind of difficult to
> standardize the way I did it since I was able to implement all the
> finite field math with recursion, list comprehensions and python
> arbitrary-big-integers in about 100 lines.  I'm not sure how "portable"
> it is to other languages.  There's obviously better ways to do it, but I
> didn't need a better way, because I don't need to support fragmentation
> above M=8 and this was 100% sufficient for it.  And I was the only one
> doing it, so there was no one to be compatible with.
> 
> I won't lie, there's a lot of work that goes into making an interface
> that makes this feature "usable."  The user needs clear ways to identify
> which fragments are associated with which wallet, and which fragments
> are compatible with each other.  They need a way to save some fragments
> to file, print them, or simply write them down.  They need a way to
> re-enter fragment, reject duplicates, identify errors, etc.  Without it,
> the math fails silently, and you end up restoring a different wallet.   
> And they need a way to test that it all works.   Armory did all this,
> but it was no trivial task.  Including an interface that will test up to
> 50 subsets of make sure the math produces the same values every time
> (which still is not sufficient for some users, who won't be satisified
> til they see they're wallet actually restored from fragments.
> 
> Also I put the secret in the highest-order coefficient of the
> polynomial, and made sure that the other coefficients were
> deterministic.  This meant that if print out an M-of-N wallet, I can
> later print out an M-of-(N+1) wallet and the first N fragments will be
> the same.  I'm not sure how many users would trust this, but we felt it
> was important in case a user needs to export some fragments, even if
> they don't increase N.
> 
> You might consider loading Armory in offline mode, create a wallet, and
> then do a fragmented backup to see how we did it.  I am extremely
> satisfied with the interface, but it's most definitely an "advanced"
> tool.  But so is Armory ... which made it a good fit.  But it might not
> be for everyone.
> 
> -Alan
> 
> 
> 
> On 03/29/2014 11:44 AM, Matt Whitlock wrote:
> > On Saturday, 29 March 2014, at 11:08 am, Watson Ladd wrote:
> >> https://freedom-to-tinker.com/blog/stevenag/new-research-better-wallet-security-for-bitcoin/
> > Thanks. This is great, although it makes some critical references to an ACM paper for which no URL is provided, and thus I cannot implement it.
> >
> > A distributed ECDSA notwithstanding, we still need a way to decompose a BIP32 master seed into shares. I am envisioning a scenario in which I might meet my sudden and untimely demise, and I wish to allow my beneficiaries to reconstruct my wallet's master seed after my death. I would like to distribute seed shares to each of my beneficiaries and some close friends, such that some subset of the shares must be joined together to reconstitute my master seed. Shamir's Secret Sharing Scheme is perfect for this use case. I am presently working on extending my draft BIP so that it also applies to BIP32 master seeds of various sizes.
> >
> > ------------------------------------------------------------------------------
> > _______________________________________________
> > Bitcoin-development mailing list
> > Bitcoin-development at lists.sourceforge.net
> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 
> 
> ------------------------------------------------------------------------------
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 



From c1.sf-bitcoin at niftybox.net  Sat Mar 29 17:28:56 2014
From: c1.sf-bitcoin at niftybox.net (devrandom)
Date: Sat, 29 Mar 2014 10:28:56 -0700
Subject: [Bitcoin-development] Presenting a BIP for Shamir's Secret
 Sharing of Bitcoin private keys
In-Reply-To: <4906130.DUyjhm1C93@crushinator>
References: <CACsn0ckScTWG4YxNCscxvtdsmcUkxtR2Gi-rdBs2HCkirPz5rA@mail.gmail.com>
	<4906130.DUyjhm1C93@crushinator>
Message-ID: <1396114136.27001.1.camel@mimiz>


On Sat, 2014-03-29 at 11:44 -0400, Matt Whitlock wrote:
> On Saturday, 29 March 2014, at 11:08 am, Watson Ladd wrote:
> > https://freedom-to-tinker.com/blog/stevenag/new-research-better-wallet-security-for-bitcoin/
> 
> Thanks. This is great, although it makes some critical references to an
> ACM paper for which no URL is provided, and thus I cannot implement it.
> 
> A distributed ECDSA notwithstanding, we still need a way to decompose a
> BIP32 master seed into shares. I am envisioning a scenario in which I

It would seem that threshold ECDSA with keys derived from separate seeds
has better security properties than one seed that is then split up.  The
main thing is that there is no single point of attack in the generation
or signing.

> might meet my sudden and untimely demise, and I wish to allow my
> beneficiaries to reconstruct my wallet's master seed after my death. I
> would like to distribute seed shares to each of my beneficiaries and
> some close friends, such that some subset of the shares must be joined
> together to reconstitute my master seed. Shamir's Secret Sharing Scheme
> is perfect for this use case. I am presently working on extending my
> draft BIP so that it also applies to BIP32 master seeds of various
> sizes.
> 
> ------------------------------------------------------------------------------
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development

-- 
--
Miron / devrandom



-- 
--
Miron / devrandom






From tamas at bitsofproof.com  Sat Mar 29 17:37:44 2014
From: tamas at bitsofproof.com (Tamas Blummer)
Date: Sat, 29 Mar 2014 18:37:44 +0100
Subject: [Bitcoin-development] Presenting a BIP for Shamir's Secret
	Sharing of Bitcoin private keys
In-Reply-To: <4676777.MQU5AqByQt@crushinator>
References: <1878927.J1e3zZmtIP@crushinator>
	<AA48C372-6735-40E4-A8AF-264576F86BB1@bitsofproof.com>
	<4676777.MQU5AqByQt@crushinator>
Message-ID: <2F5F0459-B7D7-438C-A617-D116402F02BE@bitsofproof.com>

I had Matt's answer already, see below, but then I recognized that the group was not cc:-d, so I repeat:

It would help on the user interface to include into individual shares:

1. Number of shares needed
2. A few bytes fingerprint of the secret so shares that likely belong together can be identified.

I wonder how others weight security vs. usability in these questions.

Regards,

Tamas Blummer
http://bitsofproof.com

On Saturday, 29 March 2014, at 6:22 pm, Tamas Blummer wrote:
> It might make sense to store the number of shares needed. I know it is not needed by math, but could help on user interface to say,
> you need x more shares..

I intentionally omitted that information because it's a security risk. If an adversary gains control of one share and can see exactly how many more shares he needs, he may be able to plan a better attack. If he is clueless about how many shares he needs, then he may not be able to execute an attack at all because he may not know whether his information about what shares exist and where is complete.

On 29.03.2014, at 17:54, Matt Whitlock <bip at mattwhitlock.name> wrote:

> On Saturday, 29 March 2014, at 9:44 am, Tamas Blummer wrote:
>> I used Shamir's Secret Sharing to decompose a seed for a BIP32 master key, that is I think more future relevant than a single key.
>> Therefore suggest to adapt the BIP for a length used there typically 16 or 32 bytes and have a magic code to indicate its use as key vs. seed.
> 
> I have expanded the BIP so that it additionally applies to BIP32 master seeds of sizes 128, 256, and 512 bits.
> 
> https://github.com/whitslack/btctool/blob/bip/bip-xxxx.mediawiki
> 
> The most significant change versus the previous version is how the coefficients of the polynomials are constructed. Previously they were SHA-256 digests. Now they are SHA-512 digests, modulo a prime number that is selected depending on the size of the secret.
> 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140329/7d985b90/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 495 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140329/7d985b90/attachment.sig>

From bip at mattwhitlock.name  Sat Mar 29 17:38:10 2014
From: bip at mattwhitlock.name (Matt Whitlock)
Date: Sat, 29 Mar 2014 13:38:10 -0400
Subject: [Bitcoin-development] Presenting a BIP for Shamir's Secret
	Sharing of Bitcoin private keys
In-Reply-To: <1396113933.8809.91.camel@mimiz>
References: <CACsn0ckScTWG4YxNCscxvtdsmcUkxtR2Gi-rdBs2HCkirPz5rA@mail.gmail.com>
	<4906130.DUyjhm1C93@crushinator> <1396113933.8809.91.camel@mimiz>
Message-ID: <3760502.BsfnhHlzm1@crushinator>

On Saturday, 29 March 2014, at 10:25 am, Dev Random wrote:
> On Sat, 2014-03-29 at 11:44 -0400, Matt Whitlock wrote:
> > On Saturday, 29 March 2014, at 11:08 am, Watson Ladd wrote:
> > > https://freedom-to-tinker.com/blog/stevenag/new-research-better-wallet-security-for-bitcoin/
> > 
> > Thanks. This is great, although it makes some critical references to an
> > ACM paper for which no URL is provided, and thus I cannot implement it.
> > 
> > A distributed ECDSA notwithstanding, we still need a way to decompose a
> > BIP32 master seed into shares. I am envisioning a scenario in which I
> 
> It would seem that threshold ECDSA with keys derived from separate seeds
> has better security properties than one seed that is then split up.  The
> main thing is that there is no single point of attack in the generation
> or signing.

No contest here. But can threshold ECDSA work with BIP32? In other words, can a threshold ECDSA public key be generated from separate, precomputed private keys, or can it only be generated interactively? Maybe the BIP32 master seeds have to be generated interactively, and then all sets of corresponding derived keys are valid signing groups?

Threshold ECDSA certainly sounds nice, but is anyone working on a BIP for it? I would take it on myself, but I don't understand it well enough yet, and publicly available information on it seems lacking. I proposed this Shamir Secret Sharing BIP as an easily understood, easily implemented measure that we can use today, with no changes to existing Bitcoin software. It's low-hanging fruit.



From bip at mattwhitlock.name  Sat Mar 29 17:42:01 2014
From: bip at mattwhitlock.name (Matt Whitlock)
Date: Sat, 29 Mar 2014 13:42:01 -0400
Subject: [Bitcoin-development] Presenting a BIP for Shamir's Secret
	Sharing of Bitcoin private keys
In-Reply-To: <20140329172815.GH62995@giles.gnomon.org.uk>
References: <CACsn0ckScTWG4YxNCscxvtdsmcUkxtR2Gi-rdBs2HCkirPz5rA@mail.gmail.com>
	<5336FBE7.7030209@gmail.com>
	<20140329172815.GH62995@giles.gnomon.org.uk>
Message-ID: <8171920.tjDNGQmgQK@crushinator>

On Saturday, 29 March 2014, at 5:28 pm, Roy Badami wrote:
> Right now there are also people simply taking base58-encoded private
> keys and running them through ssss-split.
> 
> It has a lot going for it, since it can easily be reassembled on any
> Linux machine without special software (B Poettering's Linux command
> line SSSS implementation[1] seems to be included in most Linux distros).
> 
> roy
> 
> [1] http://point-at-infinity.org/ssss/

Respectfully, it's also possible to take a base58-encoded private key and run it through GPG, which is included in most Linux distros. But yet we have BIP38.



From gmaxwell at gmail.com  Sat Mar 29 17:46:41 2014
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Sat, 29 Mar 2014 10:46:41 -0700
Subject: [Bitcoin-development] Presenting a BIP for Shamir's Secret
 Sharing of Bitcoin private keys
In-Reply-To: <3760502.BsfnhHlzm1@crushinator>
References: <CACsn0ckScTWG4YxNCscxvtdsmcUkxtR2Gi-rdBs2HCkirPz5rA@mail.gmail.com>
	<4906130.DUyjhm1C93@crushinator> <1396113933.8809.91.camel@mimiz>
	<3760502.BsfnhHlzm1@crushinator>
Message-ID: <CAAS2fgTVo_j9NkDdHBw8mEDjw6i7yY2_Y5-Z=Yer7WUi0ZySQw@mail.gmail.com>

On Sat, Mar 29, 2014 at 10:38 AM, Matt Whitlock <bip at mattwhitlock.name> wrote:
> But can threshold ECDSA work with BIP32?

Yes.

>In other words, can a threshold ECDSA public key be generated from separate, precomputed private keys,
No.

> can it only be generated interactively?

Yes.

But see the first question.  Basically you can do an interactive step
to generate a master pubkey and then use BIP32 non-hardened derivation
to build thresholded children.

On Sat, Mar 29, 2014 at 10:42 AM, Matt Whitlock <bip at mattwhitlock.name> wrote:
> Respectfully, it's also possible to take a base58-encoded private key and run it through GPG, which is included in most Linux distros. But yet we have BIP38.

BIP38 is a bad example (because it was created without public
discussion due to a technical snafu).

In this case I don't see anything wrong with specifying secret
sharing, but I think? if possible? it should be carefully constructed
so that the same polynomials and interpolation code can be used for
threshold signatures (when encoding compatible data).

If it requires entirely different code than the code for threshold
signing it might as well be a file generic tool like SSSS.



From c1.sf-bitcoin at niftybox.net  Sat Mar 29 17:48:25 2014
From: c1.sf-bitcoin at niftybox.net (devrandom)
Date: Sat, 29 Mar 2014 10:48:25 -0700
Subject: [Bitcoin-development] Presenting a BIP for Shamir's Secret
 Sharing of Bitcoin private keys
In-Reply-To: <3760502.BsfnhHlzm1@crushinator>
References: <CACsn0ckScTWG4YxNCscxvtdsmcUkxtR2Gi-rdBs2HCkirPz5rA@mail.gmail.com>
	<4906130.DUyjhm1C93@crushinator> <1396113933.8809.91.camel@mimiz>
	<3760502.BsfnhHlzm1@crushinator>
Message-ID: <1396115305.27001.8.camel@mimiz>

On Sat, 2014-03-29 at 13:38 -0400, Matt Whitlock wrote:
> On Saturday, 29 March 2014, at 10:25 am, Dev Random wrote:
> > On Sat, 2014-03-29 at 11:44 -0400, Matt Whitlock wrote:
> > > On Saturday, 29 March 2014, at 11:08 am, Watson Ladd wrote:
> > > > https://freedom-to-tinker.com/blog/stevenag/new-research-better-wallet-security-for-bitcoin/
> > > 
> > > Thanks. This is great, although it makes some critical references to an
> > > ACM paper for which no URL is provided, and thus I cannot implement it.
> > > 
> > > A distributed ECDSA notwithstanding, we still need a way to decompose a
> > > BIP32 master seed into shares. I am envisioning a scenario in which I
> > 
> > It would seem that threshold ECDSA with keys derived from separate seeds
> > has better security properties than one seed that is then split up.  The
> > main thing is that there is no single point of attack in the generation
> > or signing.
> 
> No contest here. But can threshold ECDSA work with BIP32? In other
> words, can a threshold ECDSA public key be generated from separate,
> precomputed private keys, or can it only be generated interactively?
> Maybe the BIP32 master seeds have to be generated interactively, and
> then all sets of corresponding derived keys are valid signing groups?

That's a good point. In the paper, they have a deterministic wallet
scheme in section 3.3.  It is non-interactive, so that's good.  On the
other hand, it's not BIP32, so that adds complexity.

> 
> Threshold ECDSA certainly sounds nice, but is anyone working on a BIP
> for it? I would take it on myself, but I don't understand it well
> enough yet, and publicly available information on it seems lacking. I
> proposed this Shamir Secret Sharing BIP as an easily understood, easily
> implemented measure that we can use today, with no changes to existing
> Bitcoin software. It's low-hanging fruit.

Good points, although multisig is catching on quickly in the ecosystem.
AFAIK, all production wallets can send to p2sh addresses.

-- 
Miron / devrandom






From bip at mattwhitlock.name  Sat Mar 29 17:51:10 2014
From: bip at mattwhitlock.name (Matt Whitlock)
Date: Sat, 29 Mar 2014 13:51:10 -0400
Subject: [Bitcoin-development] Presenting a BIP for Shamir's Secret
	Sharing of Bitcoin private keys
In-Reply-To: <1396115305.27001.8.camel@mimiz>
References: <CACsn0ckScTWG4YxNCscxvtdsmcUkxtR2Gi-rdBs2HCkirPz5rA@mail.gmail.com>
	<3760502.BsfnhHlzm1@crushinator> <1396115305.27001.8.camel@mimiz>
Message-ID: <3907269.Xk0HfD5vm0@crushinator>

On Saturday, 29 March 2014, at 10:48 am, devrandom wrote:
> On Sat, 2014-03-29 at 13:38 -0400, Matt Whitlock wrote:
> > Threshold ECDSA certainly sounds nice, but is anyone working on a BIP
> > for it? I would take it on myself, but I don't understand it well
> > enough yet, and publicly available information on it seems lacking. I
> > proposed this Shamir Secret Sharing BIP as an easily understood, easily
> > implemented measure that we can use today, with no changes to existing
> > Bitcoin software. It's low-hanging fruit.
> 
> Good points, although multisig is catching on quickly in the ecosystem.
> AFAIK, all production wallets can send to p2sh addresses.

As far as I know, Blockchain.info wallets still can't send to P2SH addresses. This was a *major* roadblock in the Bitcoin project that I've been working on for the past several months, and it was the impetus for my creating this Shamir Secret Sharing implementation in the first place.



From roy at gnomon.org.uk  Sat Mar 29 17:51:30 2014
From: roy at gnomon.org.uk (Roy Badami)
Date: Sat, 29 Mar 2014 17:51:30 +0000
Subject: [Bitcoin-development] Presenting a BIP for Shamir's Secret
 Sharing of Bitcoin private keys
In-Reply-To: <8171920.tjDNGQmgQK@crushinator>
References: <CACsn0ckScTWG4YxNCscxvtdsmcUkxtR2Gi-rdBs2HCkirPz5rA@mail.gmail.com>
	<5336FBE7.7030209@gmail.com>
	<20140329172815.GH62995@giles.gnomon.org.uk>
	<8171920.tjDNGQmgQK@crushinator>
Message-ID: <20140329175130.GI62995@giles.gnomon.org.uk>

On Sat, Mar 29, 2014 at 01:42:01PM -0400, Matt Whitlock wrote:
> On Saturday, 29 March 2014, at 5:28 pm, Roy Badami wrote:
> > Right now there are also people simply taking base58-encoded private
> > keys and running them through ssss-split.
> > 
> > It has a lot going for it, since it can easily be reassembled on any
> > Linux machine without special software (B Poettering's Linux command
> > line SSSS implementation[1] seems to be included in most Linux distros).
> > 
> > roy
> > 
> > [1] http://point-at-infinity.org/ssss/
> 
> Respectfully, it's also possible to take a base58-encoded private key and run it through GPG, which is included in most Linux distros. But yet we have BIP38.

And yet, how many wallets can import BIP38 keys?  If someone gave me
one I would have no idea what software (if any) can understand it (nor
would I have any idea how to generate one in the first place).

Anyway, I'm not arguing against standardising these things - if people
are going to implement this then of course it's beneficial that they
implement it compatibly.  It was just a simple observation - make of
it what you will.

roy





From etotheipi at gmail.com  Sat Mar 29 17:52:20 2014
From: etotheipi at gmail.com (Alan Reiner)
Date: Sat, 29 Mar 2014 13:52:20 -0400
Subject: [Bitcoin-development] Presenting a BIP for Shamir's Secret
 Sharing of Bitcoin private keys
In-Reply-To: <15872432.k8h0hUxqlf@crushinator>
References: <CACsn0ckScTWG4YxNCscxvtdsmcUkxtR2Gi-rdBs2HCkirPz5rA@mail.gmail.com>
	<4906130.DUyjhm1C93@crushinator> <5336FBE7.7030209@gmail.com>
	<15872432.k8h0hUxqlf@crushinator>
Message-ID: <53370854.5050303@gmail.com>

On 03/29/2014 01:19 PM, Matt Whitlock wrote:
> I intentionally omitted the parameter M (minimum subset size) from the shares because including it would give an adversary a vital piece of information. Likewise, including any kind of information that would allow a determination of whether the secret has been correctly reconstituted would give an adversary too much information. Failing silently when given incorrect shares or an insufficient number of shares is intentional.

I do not believe this is a good tradeoff.  It's basically obfuscation of
something that is already considered secure at the expense of
usability.  It's much more important to me that the user understands
what is in their hands (or their family members after they get hit by a
bus), than to obfuscate the parameters of the secret sharing to provide
a tiny disadvantage to an adversary who gets ahold of one. 

The fact that it fails silently is really all downside, not a benefit. 
If I have enough fragments, I can reconstruct the seed and see that it
produces addresses with money.  If not, I know I need more fragments. 
I'm much more concerned about my family having all the info they need to
recover the money, than an attacker knowing that he needs two more
fragments instead of which are well-secured anyway.





From c1.sf-bitcoin at niftybox.net  Sat Mar 29 17:56:52 2014
From: c1.sf-bitcoin at niftybox.net (devrandom)
Date: Sat, 29 Mar 2014 10:56:52 -0700
Subject: [Bitcoin-development] Presenting a BIP for Shamir's Secret
 Sharing of Bitcoin private keys
In-Reply-To: <3907269.Xk0HfD5vm0@crushinator>
References: <CACsn0ckScTWG4YxNCscxvtdsmcUkxtR2Gi-rdBs2HCkirPz5rA@mail.gmail.com>
	<3760502.BsfnhHlzm1@crushinator> <1396115305.27001.8.camel@mimiz>
	<3907269.Xk0HfD5vm0@crushinator>
Message-ID: <1396115812.27001.11.camel@mimiz>

On Sat, 2014-03-29 at 13:51 -0400, Matt Whitlock wrote:
> On Saturday, 29 March 2014, at 10:48 am, devrandom wrote:
> > On Sat, 2014-03-29 at 13:38 -0400, Matt Whitlock wrote:
> > > Threshold ECDSA certainly sounds nice, but is anyone working on a BIP
> > > for it? I would take it on myself, but I don't understand it well
> > > enough yet, and publicly available information on it seems lacking. I
> > > proposed this Shamir Secret Sharing BIP as an easily understood, easily
> > > implemented measure that we can use today, with no changes to existing
> > > Bitcoin software. It's low-hanging fruit.
> > 
> > Good points, although multisig is catching on quickly in the ecosystem.
> > AFAIK, all production wallets can send to p2sh addresses.
> 
> As far as I know, Blockchain.info wallets still can't send to P2SH
> addresses. This was a *major* roadblock in the Bitcoin project that
> I've been working on for the past several months, and it was the
> impetus for my creating this Shamir Secret Sharing implementation in
> the first place.

That was true until they merged in my pull request a month ago ;)

https://github.com/blockchain/My-Wallet/pull/59

 
--
Miron / devrandom






From bip at mattwhitlock.name  Sat Mar 29 18:00:15 2014
From: bip at mattwhitlock.name (Matt Whitlock)
Date: Sat, 29 Mar 2014 14:00:15 -0400
Subject: [Bitcoin-development] Presenting a BIP for Shamir's Secret
	Sharing of Bitcoin private keys
In-Reply-To: <53370854.5050303@gmail.com>
References: <CACsn0ckScTWG4YxNCscxvtdsmcUkxtR2Gi-rdBs2HCkirPz5rA@mail.gmail.com>
	<15872432.k8h0hUxqlf@crushinator> <53370854.5050303@gmail.com>
Message-ID: <2135731.4HGHfZWzo5@crushinator>

On Saturday, 29 March 2014, at 1:52 pm, Alan Reiner wrote:
> On 03/29/2014 01:19 PM, Matt Whitlock wrote:
> > I intentionally omitted the parameter M (minimum subset size) from the shares because including it would give an adversary a vital piece of information. Likewise, including any kind of information that would allow a determination of whether the secret has been correctly reconstituted would give an adversary too much information. Failing silently when given incorrect shares or an insufficient number of shares is intentional.
> 
> I do not believe this is a good tradeoff.  It's basically obfuscation of
> something that is already considered secure at the expense of
> usability.  It's much more important to me that the user understands
> what is in their hands (or their family members after they get hit by a
> bus), than to obfuscate the parameters of the secret sharing to provide
> a tiny disadvantage to an adversary who gets ahold of one. 
> 
> The fact that it fails silently is really all downside, not a benefit. 
> If I have enough fragments, I can reconstruct the seed and see that it
> produces addresses with money.  If not, I know I need more fragments. 
> I'm much more concerned about my family having all the info they need to
> recover the money, than an attacker knowing that he needs two more
> fragments instead of which are well-secured anyway.

For what it's worth, ssss also omits from the shares any information about the threshold. It will happily return a garbage secret if too few shares are combined. (And actually, it will happily return a garbage secret if too *many* shares are combined, too. My implementation does not have that problem.)



From etotheipi at gmail.com  Sat Mar 29 18:08:17 2014
From: etotheipi at gmail.com (Alan Reiner)
Date: Sat, 29 Mar 2014 14:08:17 -0400
Subject: [Bitcoin-development] Presenting a BIP for Shamir's Secret
 Sharing of Bitcoin private keys
In-Reply-To: <2135731.4HGHfZWzo5@crushinator>
References: <CACsn0ckScTWG4YxNCscxvtdsmcUkxtR2Gi-rdBs2HCkirPz5rA@mail.gmail.com>
	<15872432.k8h0hUxqlf@crushinator> <53370854.5050303@gmail.com>
	<2135731.4HGHfZWzo5@crushinator>
Message-ID: <53370C11.7040109@gmail.com>


On 03/29/2014 02:00 PM, Matt Whitlock wrote:
> On Saturday, 29 March 2014, at 1:52 pm, Alan Reiner wrote:
>> On 03/29/2014 01:19 PM, Matt Whitlock wrote:
>>> I intentionally omitted the parameter M (minimum subset size) from the shares because including it would give an adversary a vital piece of information. Likewise, including any kind of information that would allow a determination of whether the secret has been correctly reconstituted would give an adversary too much information. Failing silently when given incorrect shares or an insufficient number of shares is intentional.
>> I do not believe this is a good tradeoff.  It's basically obfuscation of
>> something that is already considered secure at the expense of
>> usability.  It's much more important to me that the user understands
>> what is in their hands (or their family members after they get hit by a
>> bus), than to obfuscate the parameters of the secret sharing to provide
>> a tiny disadvantage to an adversary who gets ahold of one. 
>>
>> The fact that it fails silently is really all downside, not a benefit. 
>> If I have enough fragments, I can reconstruct the seed and see that it
>> produces addresses with money.  If not, I know I need more fragments. 
>> I'm much more concerned about my family having all the info they need to
>> recover the money, than an attacker knowing that he needs two more
>> fragments instead of which are well-secured anyway.
> For what it's worth, ssss also omits from the shares any information about the threshold. It will happily return a garbage secret if too few shares are combined. (And actually, it will happily return a garbage secret if too *many* shares are combined, too. My implementation does not have that problem.)

Regardless of how SSSS does it, I believe that obfuscating that
information is bad news from a usability perspective.  Undoubtedly,
users will make lots of backups of lots of wallets and think they
remember the M-parameter but don't.  They will accidentally mix in some
3-of-5 fragments with their 2-of-4 not realizing they are incompatible,
or not able to distinguish them.   Or they'll distribute too many
thinking the threshold is higher and end up insecure, or possibly not
have enough fragments to restore their wallet thinking the M-value was
lower than it actually was.   

I just don't see the value in adding such complexity for the benefit of
obfuscating information an attacker might be able to figure out anyway
(most backups will be 2-of-N or 3-of-N) and can't act on anyway (because
he doesn't know where the other frags are and they are actually in
safe-deposit boxes)






From bip at mattwhitlock.name  Sat Mar 29 18:10:54 2014
From: bip at mattwhitlock.name (Matt Whitlock)
Date: Sat, 29 Mar 2014 14:10:54 -0400
Subject: [Bitcoin-development] Presenting a BIP for Shamir's Secret
	Sharing of Bitcoin private keys
In-Reply-To: <53370C11.7040109@gmail.com>
References: <CACsn0ckScTWG4YxNCscxvtdsmcUkxtR2Gi-rdBs2HCkirPz5rA@mail.gmail.com>
	<2135731.4HGHfZWzo5@crushinator> <53370C11.7040109@gmail.com>
Message-ID: <1701822.mCYDUGhe8d@crushinator>

On Saturday, 29 March 2014, at 2:08 pm, Alan Reiner wrote:
> Regardless of how SSSS does it, I believe that obfuscating that
> information is bad news from a usability perspective.  Undoubtedly,
> users will make lots of backups of lots of wallets and think they
> remember the M-parameter but don't.  They will accidentally mix in some
> 3-of-5 fragments with their 2-of-4 not realizing they are incompatible,
> or not able to distinguish them.   Or they'll distribute too many
> thinking the threshold is higher and end up insecure, or possibly not
> have enough fragments to restore their wallet thinking the M-value was
> lower than it actually was.   
> 
> I just don't see the value in adding such complexity for the benefit of
> obfuscating information an attacker might be able to figure out anyway
> (most backups will be 2-of-N or 3-of-N) and can't act on anyway (because
> he doesn't know where the other frags are and they are actually in
> safe-deposit boxes)

Okay, you've convinced me. However, it looks like the consensus here is that my BIP is unneeded, so I'm not sure it would be worth the effort for me to improve it with your suggestions.



From tamas at bitsofproof.com  Sat Mar 29 18:16:28 2014
From: tamas at bitsofproof.com (Tamas Blummer)
Date: Sat, 29 Mar 2014 19:16:28 +0100
Subject: [Bitcoin-development] Presenting a BIP for Shamir's Secret
	Sharing of Bitcoin private keys
In-Reply-To: <53370854.5050303@gmail.com>
References: <CACsn0ckScTWG4YxNCscxvtdsmcUkxtR2Gi-rdBs2HCkirPz5rA@mail.gmail.com>
	<4906130.DUyjhm1C93@crushinator> <5336FBE7.7030209@gmail.com>
	<15872432.k8h0hUxqlf@crushinator> <53370854.5050303@gmail.com>
Message-ID: <19FE9882-7FC2-4518-BD50-8818B059271B@bitsofproof.com>

I also think that we can add usability features if the underlying secret remains well protected.
I do not think there is any reason to assume that the knowledge of the degree of the polynomial, would aid an attacker.

Similarly a fingerprint of the secret if it is unrelated to the hash used in the polinomyal should leak no useful information,

The length of such fingerpring (say 4 bytes) and the degree (1 byte) does not seem a big overhead for me.

Remember that the biggest obstacle of Bitcoin is usability not security.

Regards,

Tamas Blummer
http://bitsofproof.com

On 29.03.2014, at 18:52, Alan Reiner <etotheipi at gmail.com> wrote:

> On 03/29/2014 01:19 PM, Matt Whitlock wrote:
>> I intentionally omitted the parameter M (minimum subset size) from the shares because including it would give an adversary a vital piece of information. Likewise, including any kind of information that would allow a determination of whether the secret has been correctly reconstituted would give an adversary too much information. Failing silently when given incorrect shares or an insufficient number of shares is intentional.
> 
> I do not believe this is a good tradeoff.  It's basically obfuscation of
> something that is already considered secure at the expense of
> usability.  It's much more important to me that the user understands
> what is in their hands (or their family members after they get hit by a
> bus), than to obfuscate the parameters of the secret sharing to provide
> a tiny disadvantage to an adversary who gets ahold of one. 
> 
> The fact that it fails silently is really all downside, not a benefit. 
> If I have enough fragments, I can reconstruct the seed and see that it
> produces addresses with money.  If not, I know I need more fragments. 
> I'm much more concerned about my family having all the info they need to
> recover the money, than an attacker knowing that he needs two more
> fragments instead of which are well-secured anyway.
> 
> 
> 
> ------------------------------------------------------------------------------
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140329/ad76bea3/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 495 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140329/ad76bea3/attachment.sig>

From etotheipi at gmail.com  Sat Mar 29 18:41:17 2014
From: etotheipi at gmail.com (Alan Reiner)
Date: Sat, 29 Mar 2014 14:41:17 -0400
Subject: [Bitcoin-development] Presenting a BIP for Shamir's Secret
 Sharing of Bitcoin private keys
In-Reply-To: <19FE9882-7FC2-4518-BD50-8818B059271B@bitsofproof.com>
References: <CACsn0ckScTWG4YxNCscxvtdsmcUkxtR2Gi-rdBs2HCkirPz5rA@mail.gmail.com>
	<4906130.DUyjhm1C93@crushinator> <5336FBE7.7030209@gmail.com>
	<15872432.k8h0hUxqlf@crushinator> <53370854.5050303@gmail.com>
	<19FE9882-7FC2-4518-BD50-8818B059271B@bitsofproof.com>
Message-ID: <533713CD.3070403@gmail.com>

Armory does exactly this: it defines the "Fragment ID" as the first few
bytes of the hash of the root pubKey + M-parameter, converted to
base58.  Then it explains to the user "All fragments with the same
fragment ID are compatible" (which only works if you use deterministic
coefficients).  Each fragment is then labeled with "[FragID]-#1",
"[FragID]-#2", etc.  It became quite useful for organizing the fragments
and documenting how I was distributing them, especially if I had printed
or saved the same fragment twice by accident.



On 03/29/2014 02:16 PM, Tamas Blummer wrote:
> I also think that we can add usability features if the underlying
> secret remains well protected.
> I do not think there is any reason to assume that the knowledge of the
> degree of the polynomial, would aid an attacker.
>
> Similarly a fingerprint of the secret if it is unrelated to the hash
> used in the polinomyal should leak no useful information,
>
> The length of such fingerpring (say 4 bytes) and the degree (1 byte)
> does not seem a big overhead for me.
>
> Remember that the biggest obstacle of Bitcoin is usability not security.
>
> Regards,
>
> Tamas Blummer
> http://bitsofproof.com
>
> On 29.03.2014, at 18:52, Alan Reiner <etotheipi at gmail.com
> <mailto:etotheipi at gmail.com>> wrote:
>
>> On 03/29/2014 01:19 PM, Matt Whitlock wrote:
>>> I intentionally omitted the parameter M (minimum subset size) from
>>> the shares because including it would give an adversary a vital
>>> piece of information. Likewise, including any kind of information
>>> that would allow a determination of whether the secret has been
>>> correctly reconstituted would give an adversary too much
>>> information. Failing silently when given incorrect shares or an
>>> insufficient number of shares is intentional.
>>
>> I do not believe this is a good tradeoff.  It's basically obfuscation of
>> something that is already considered secure at the expense of
>> usability.  It's much more important to me that the user understands
>> what is in their hands (or their family members after they get hit by a
>> bus), than to obfuscate the parameters of the secret sharing to provide
>> a tiny disadvantage to an adversary who gets ahold of one.
>>
>> The fact that it fails silently is really all downside, not a benefit.
>> If I have enough fragments, I can reconstruct the seed and see that it
>> produces addresses with money.  If not, I know I need more fragments.
>> I'm much more concerned about my family having all the info they need to
>> recover the money, than an attacker knowing that he needs two more
>> fragments instead of which are well-secured anyway.
>>
>>
>>
>> ------------------------------------------------------------------------------
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> <mailto:Bitcoin-development at lists.sourceforge.net>
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>
>

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140329/8e874f60/attachment.html>

From natanael.l at gmail.com  Sat Mar 29 19:34:27 2014
From: natanael.l at gmail.com (Natanael)
Date: Sat, 29 Mar 2014 20:34:27 +0100
Subject: [Bitcoin-development] Presenting a BIP for Shamir's Secret
 Sharing of Bitcoin private keys
In-Reply-To: <CAAt2M18j7bGDsKouVw+e4j+FMiJ4vK6-sx+nrkwHyiKLqiH7Jg@mail.gmail.com>
References: <CACsn0ckScTWG4YxNCscxvtdsmcUkxtR2Gi-rdBs2HCkirPz5rA@mail.gmail.com>
	<2135731.4HGHfZWzo5@crushinator> <53370C11.7040109@gmail.com>
	<1701822.mCYDUGhe8d@crushinator>
	<CAAt2M18j7bGDsKouVw+e4j+FMiJ4vK6-sx+nrkwHyiKLqiH7Jg@mail.gmail.com>
Message-ID: <CAAt2M18bDAPHm_=+UjRe4x5wMRbd=xfLrhLtWbktceHxmn3_Zw@mail.gmail.com>

Den 29 mar 2014 19:15 skrev "Matt Whitlock" <bip at mattwhitlock.name>:
>
> On Saturday, 29 March 2014, at 2:08 pm, Alan Reiner wrote:
> > Regardless of how SSSS does it, I believe that obfuscating that
> > information is bad news from a usability perspective.  Undoubtedly,
> > users will make lots of backups of lots of wallets and think they
> > remember the M-parameter but don't.  They will accidentally mix in some
> > 3-of-5 fragments with their 2-of-4 not realizing they are incompatible,
> > or not able to distinguish them.   Or they'll distribute too many
> > thinking the threshold is higher and end up insecure, or possibly not
> > have enough fragments to restore their wallet thinking the M-value was
> > lower than it actually was.
> >
> > I just don't see the value in adding such complexity for the benefit of
> > obfuscating information an attacker might be able to figure out anyway
> > (most backups will be 2-of-N or 3-of-N) and can't act on anyway (because
> > he doesn't know where the other frags are and they are actually in
> > safe-deposit boxes)
>
> Okay, you've convinced me. However, it looks like the consensus here is
that my BIP is unneeded, so I'm not sure it would be worth the effort for
me to improve it with your suggestions.

I think it should be made an option (with the default being that the
threshold is given and verification is applied. There could certainly be a
few cases where the threshold is set high, you maybe don't have access to a
great enough variety of hiding spots or secure enough hiding spots, and you
want deter an attempt to find all the shares (with the idea being that the
risk of detection would be too high, in particular when you use tamper
evident seals). But for the majority it would be better to find a few
different safeboxes to put the shares in and rely on physical security.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140329/d96201a7/attachment.html>

From justusranvier at gmail.com  Sat Mar 29 19:42:59 2014
From: justusranvier at gmail.com (Justus Ranvier)
Date: Sat, 29 Mar 2014 19:42:59 +0000
Subject: [Bitcoin-development] Best practices for dust remining
Message-ID: <53372243.20106@silicon>

Suppose am m-of-n multisig wallet receives a bunch of dust deposits due
to somebody advertising the Olympics, or any other reason, and the users
of the wallet don't want the few satoshis involved.

What is the best way to allow all these dust outputs to be re-mined in
order to clean up the utxo set, keeping in mind the scripts may include
large values of n?

-- 
Support online privacy by using email encryption whenever possible.
Learn how here: http://www.youtube.com/watch?v=bakOKJFtB-k
-------------- next part --------------
A non-text attachment was scrubbed...
Name: 0x1B438BF4.asc
Type: application/pgp-keys
Size: 21191 bytes
Desc: not available
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140329/f87dea40/attachment.bin>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 555 bytes
Desc: OpenPGP digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140329/f87dea40/attachment.sig>

From tamas at bitsofproof.com  Sat Mar 29 19:49:23 2014
From: tamas at bitsofproof.com (Tamas Blummer)
Date: Sat, 29 Mar 2014 20:49:23 +0100
Subject: [Bitcoin-development] Presenting a BIP for Shamir's Secret
	Sharing of Bitcoin private keys
In-Reply-To: <CAAS2fgTVo_j9NkDdHBw8mEDjw6i7yY2_Y5-Z=Yer7WUi0ZySQw@mail.gmail.com>
References: <CACsn0ckScTWG4YxNCscxvtdsmcUkxtR2Gi-rdBs2HCkirPz5rA@mail.gmail.com>
	<4906130.DUyjhm1C93@crushinator> <1396113933.8809.91.camel@mimiz>
	<3760502.BsfnhHlzm1@crushinator>
	<CAAS2fgTVo_j9NkDdHBw8mEDjw6i7yY2_Y5-Z=Yer7WUi0ZySQw@mail.gmail.com>
Message-ID: <C8A29130-8456-472D-91BF-6231825FAD5C@bitsofproof.com>

On 29.03.2014, at 18:46, Gregory Maxwell <gmaxwell at gmail.com> wrote:
> In this case I don't see anything wrong with specifying secret
> sharing, but I think? if possible? it should be carefully constructed
> so that the same polynomials and interpolation code can be used for
> threshold signatures (when encoding compatible data).

The paper http://www.cs.princeton.edu/~stevenag/bitcoin_threshold_signatures.pdf
does not mention anything special about the polynomial to use other than:
 "random polynomial f of degree t - 1 such that d = f(0)"

Do you have reasons to assume that there is more to this? Since this is compatible
with Matt's proposal.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140329/83b9bfba/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 495 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140329/83b9bfba/attachment.sig>

From justusranvier at gmail.com  Sat Mar 29 19:59:01 2014
From: justusranvier at gmail.com (Justus Ranvier)
Date: Sat, 29 Mar 2014 19:59:01 +0000
Subject: [Bitcoin-development] Dust recycling
In-Reply-To: <3dfcdc$g3rb2n@ironport9.mayo.edu>
References: <mailman.85219.1396122262.2178.bitcoin-development@lists.sourceforge.net>
	<3dfcdc$g3rb2n@ironport9.mayo.edu>
Message-ID: <53372605.7010405@gmail.com>

On 03/29/2014 07:55 PM, Goss, Brian C., M.D. wrote:
> Could you collect the dust into a transaction with no outputs (thus making it all tx fees) or putting in to an anyone can spend tx?
> 
> The large number of signatures (for large n) would make the tx size large...but, if enough dust were out there, it might be worth propagating to a pools hash power. 

What would make it easier is if there was a standard output type for
sending the entire transaction to miner fees, that would make even large
transactions propagate that would normally be dropped by fee/kB rules.

-- 
Support online privacy by using email encryption whenever possible.
Learn how here: http://www.youtube.com/watch?v=bakOKJFtB-k
-------------- next part --------------
A non-text attachment was scrubbed...
Name: 0x1B438BF4.asc
Type: application/pgp-keys
Size: 21191 bytes
Desc: not available
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140329/90e12506/attachment.bin>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 555 bytes
Desc: OpenPGP digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140329/90e12506/attachment.sig>

From gmaxwell at gmail.com  Sat Mar 29 20:05:05 2014
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Sat, 29 Mar 2014 13:05:05 -0700
Subject: [Bitcoin-development] Dust recycling
In-Reply-To: <53372605.7010405@gmail.com>
References: <mailman.85219.1396122262.2178.bitcoin-development@lists.sourceforge.net>
	<3dfcdc$g3rb2n@ironport9.mayo.edu> <53372605.7010405@gmail.com>
Message-ID: <CAAS2fgTi8CetE44tBetbwrPNy=NWH79imSiivYKshxxb_J6h=Q@mail.gmail.com>

On Sat, Mar 29, 2014 at 12:59 PM, Justus Ranvier
<justusranvier at gmail.com> wrote:
> What would make it easier is if there was a standard output type for
> sending the entire transaction to miner fees,

Hm. maybe it could be called a "return operator" or something like that? :)

> that would make even large
> transactions propagate that would normally be dropped by fee/kB rules.

Use dust-b-gone and make it someone elses problem to get it relayed. :)



From mark at monetize.io  Sat Mar 29 20:10:00 2014
From: mark at monetize.io (Mark Friedenbach)
Date: Sat, 29 Mar 2014 13:10:00 -0700
Subject: [Bitcoin-development] Best practices for dust remining
In-Reply-To: <53372243.20106@silicon>
References: <53372243.20106@silicon>
Message-ID: <CACh7GpE8kEaT5UZtx4eACM1W0Y_x1=ozasaXktpxBtEWfBuy3A@mail.gmail.com>

NONE|ANYONECANPAY. This is what dust-be-gone does.
On Mar 29, 2014 12:46 PM, "Justus Ranvier" <justusranvier at gmail.com> wrote:

> Suppose am m-of-n multisig wallet receives a bunch of dust deposits due
> to somebody advertising the Olympics, or any other reason, and the users
> of the wallet don't want the few satoshis involved.
>
> What is the best way to allow all these dust outputs to be re-mined in
> order to clean up the utxo set, keeping in mind the scripts may include
> large values of n?
>
> --
> Support online privacy by using email encryption whenever possible.
> Learn how here: http://www.youtube.com/watch?v=bakOKJFtB-k
>
>
> ------------------------------------------------------------------------------
>
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140329/1ad49c7f/attachment.html>

From justusranvier at gmail.com  Sat Mar 29 20:20:36 2014
From: justusranvier at gmail.com (Justus Ranvier)
Date: Sat, 29 Mar 2014 20:20:36 +0000
Subject: [Bitcoin-development] Dust recycling
In-Reply-To: <CAAS2fgTi8CetE44tBetbwrPNy=NWH79imSiivYKshxxb_J6h=Q@mail.gmail.com>
References: <mailman.85219.1396122262.2178.bitcoin-development@lists.sourceforge.net>	<3dfcdc$g3rb2n@ironport9.mayo.edu>	<53372605.7010405@gmail.com>
	<CAAS2fgTi8CetE44tBetbwrPNy=NWH79imSiivYKshxxb_J6h=Q@mail.gmail.com>
Message-ID: <53372B14.3050901@gmail.com>

On 03/29/2014 08:05 PM, Gregory Maxwell wrote:
> Use dust-b-gone and make it someone elses problem to get it relayed. :)
> 

That's a sub-optimal solution, as it introduces a third party. What if
his server goes down?

An universal solution is preferable.

-- 
Support online privacy by using email encryption whenever possible.
Learn how here: http://www.youtube.com/watch?v=bakOKJFtB-k
-------------- next part --------------
A non-text attachment was scrubbed...
Name: 0x1B438BF4.asc
Type: application/pgp-keys
Size: 21191 bytes
Desc: not available
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140329/59b6356f/attachment.bin>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 555 bytes
Desc: OpenPGP digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140329/59b6356f/attachment.sig>

From gmaxwell at gmail.com  Sat Mar 29 20:33:13 2014
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Sat, 29 Mar 2014 13:33:13 -0700
Subject: [Bitcoin-development] Dust recycling
In-Reply-To: <53372B14.3050901@gmail.com>
References: <mailman.85219.1396122262.2178.bitcoin-development@lists.sourceforge.net>
	<3dfcdc$g3rb2n@ironport9.mayo.edu> <53372605.7010405@gmail.com>
	<CAAS2fgTi8CetE44tBetbwrPNy=NWH79imSiivYKshxxb_J6h=Q@mail.gmail.com>
	<53372B14.3050901@gmail.com>
Message-ID: <CAAS2fgRAErVJJN8gAuNnBpgGjBx2U+0_sVwC351u7qvYvbpdfg@mail.gmail.com>

On Sat, Mar 29, 2014 at 1:20 PM, Justus Ranvier <justusranvier at gmail.com> wrote:
> On 03/29/2014 08:05 PM, Gregory Maxwell wrote:
>> Use dust-b-gone and make it someone elses problem to get it relayed. :)
> That's a sub-optimal solution, as it introduces a third party. What if
> his server goes down?
> An universal solution is preferable.

Then start the server yourself. There is no replacement for
aggregating multiple bits of dust in single transactions. Other ways
are less efficient.

You can already OP_RETURN to include your dust, but miners aren't
going to automatically take that over transactions paying more in
terms of fee/byte.



From andreas at schildbach.de  Sun Mar 30 17:21:26 2014
From: andreas at schildbach.de (Andreas Schildbach)
Date: Sun, 30 Mar 2014 19:21:26 +0200
Subject: [Bitcoin-development] BIP 70 refund field
In-Reply-To: <CANEZrP3+-kJiO+pCAdEGtzebcR65eAnTjuFQgQPbzAmh6v-WyQ@mail.gmail.com>
References: <CANEZrP0AwR3WgHfwYWcrC9Z_MHPDwymWXAQwp7D8XZ+o2FsK8g@mail.gmail.com>	<lh3m7i$v18$1@ger.gmane.org>	<CANEZrP3zBFs=JpJi6eazTvrTaRX6XCJLu-zrraE6bezYW7b9pQ@mail.gmail.com>	<lh49pp$4bc$1@ger.gmane.org>
	<5335BD17.6050408@plan99.net>	<lh4nma$h3e$1@ger.gmane.org>	<20140329092721.GG62995@giles.gnomon.org.uk>
	<CANEZrP3+-kJiO+pCAdEGtzebcR65eAnTjuFQgQPbzAmh6v-WyQ@mail.gmail.com>
Message-ID: <lh9jqm$q77$1@ger.gmane.org>

I'd prefer 3 months to 2 just because a quarter of year is a more common
timespan.

But of course its just paint shedding, so 2 sounds good for me too (-:


On 03/29/2014 02:29 PM, Mike Hearn wrote:
> So how about we say two months? That way it's easy for merchants to
> comply with the EU DSD and we keep RAM usage in check until we come up
> with a more sophisticated refund scheme.
> 
> There's another issue with BIP 70 and refunds that I noticed. The
> PaymentRequest doesn't specify whether refunds are possible. So wallets
> have to either never submit refund data, or always submit it even if it
> makes no sense. Because setting things up to get refunds has a non-zero
> cost for the sender, it'd help if we could optimise it away for
> merchants that simply refuse to issue refunds for whatever reason.
> 
> 
> 
> On Sat, Mar 29, 2014 at 10:27 AM, Roy Badami <roy at gnomon.org.uk
> <mailto:roy at gnomon.org.uk>> wrote:
> 
>     On Fri, Mar 28, 2014 at 09:56:57PM +0100, Andreas Schildbach wrote:
>     > On 03/28/2014 07:19 PM, Mike Hearn wrote:
>     >
>     > >> Ok, why don't fix this in the spec for now, by defining a fixed
>     expiry
>     > >> time. In the EU, most products are covered by a 2 years
>     warranty, so it
>     > >> seems appropriate to pick 2.5 years (30 months) -- allowing for
>     some
>     > >> time to ship the product back and forth.
>     > >
>     > > Yeah I was thinking something like that on the walk home. But 2
>     years is
>     > > a long time. Do we have enough RAM for that?
>     >
>     > It depends on usage stats, script size, etc...
>     >
>     > > Plus warranties usually
>     > > result in the defective goods being replaced rather than a monetary
>     > > refund, right?
>     >
>     > Usually yes. The next smaller "unit of time" in Germany would be two
>     > weeks, the so-called "Fernabsatzgesetz". It allows you to send back
>     > mail-orders and usually you want the money back. Don't know if
>     that made
>     > it into EU law or how it applies to other countries.
> 
>     It's EU law, but the Distance Selling Directive only says "at least
>     seven days", so the exact period probably varies by country (in the UK
>     it is 7 days).
> 
>     But the clock only starts ticking when you receive the goods, and the
>     Distance Selling Directive allows the supplier 30 days "to execute the
>     order" (I *think* the 30 days always has to include shipping, because
>     for consumer contracts title doesn't pass until the goods are
>     delivered, so the order wouldn't be considered complete until then).
> 
>     So I think latest possible deadline for returning the goods for refund
>     could be up to 30 days to execute the order plus "at least 7 days"
>     (with some countries allowing more).  Plus, conceivably, shipping
>     time, if some member states have chosen to interpret the 30 day
>     execution differently.
> 
>     So I think this adds up to "a couple of months, give or take".  In
>     practice, though, even a couple of months is a bit on the short time.
>     What if the goods are delayed.  How many people have had miner orders
>     outstanding for the best part of a year?
> 
>     roy
> 
> 
>     ------------------------------------------------------------------------------
>     _______________________________________________
>     Bitcoin-development mailing list
>     Bitcoin-development at lists.sourceforge.net
>     <mailto:Bitcoin-development at lists.sourceforge.net>
>     https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 
> 
> 
> 
> ------------------------------------------------------------------------------
> 
> 
> 
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 





From c1.sf-bitcoin at niftybox.net  Sun Mar 30 20:12:01 2014
From: c1.sf-bitcoin at niftybox.net (devrandom)
Date: Sun, 30 Mar 2014 13:12:01 -0700
Subject: [Bitcoin-development] Securing hardware wallets
Message-ID: <1396210321.27001.39.camel@mimiz>

I would like to solicit feedback on a whitepaper I wrote about securing
hardware wallets even if the hardware or software is compromised.  Let's
consider turning this into a BIP.

Abstract: With wide adoption hardware wallets present a very tempting
target. Once enough wealth is controlled by a specific hardware wallet
model, attacking the supply chain of the wallet becomes attractive.
Malware could be inserted in hardware or software. The random seed could
be generated in a way that is predictable to the attacker or the seed
could be leaked.

The paper describes a way for a "Warden" computer to manage a hardware
wallet in a way that protects the resulting private keys from
compromise.

https://github.com/devrandom/btc-papers/blob/master/hardware-wallet-security.md

-- 
Miron / devrandom






From laanwj at gmail.com  Mon Mar 31 08:07:53 2014
From: laanwj at gmail.com (Wladimir)
Date: Mon, 31 Mar 2014 10:07:53 +0200
Subject: [Bitcoin-development] Anyone using bitcoind that needs RPC bound to
	interface? [testing needed]
Message-ID: <CA+s+GJDHBZVYdN_KWdLm9-dBa6mJb2y1=sqZ=nAeJbOjQXN_kg@mail.gmail.com>

A while ago I created a patch to make it possible to bind the RPC port to a
specific address or even multiple address/port pairs.

https://github.com/bitcoin/bitcoin/pull/3695

I'm fairly confident that it works, but it cannot hurt if some people that
need this functionality tested it before merge. Test results from normal
setups as well as weird corner cases (IPv4+IPv6, VPNs, ...) are welcome.

Regards,
Wladimir
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140331/6e664d9c/attachment.html>

From pete at petertodd.org  Mon Mar 31 09:23:09 2014
From: pete at petertodd.org (Peter Todd)
Date: Mon, 31 Mar 2014 11:23:09 +0200
Subject: [Bitcoin-development] BIP 70 refund field
In-Reply-To: <CANEZrP0AwR3WgHfwYWcrC9Z_MHPDwymWXAQwp7D8XZ+o2FsK8g@mail.gmail.com>
References: <CANEZrP0AwR3WgHfwYWcrC9Z_MHPDwymWXAQwp7D8XZ+o2FsK8g@mail.gmail.com>
Message-ID: <20140331092309.GA19482@tilt>

On Fri, Mar 28, 2014 at 12:07:04PM +0100, Mike Hearn wrote:
> Though I am loathe to go back and redesign this part of BIP 70 so soon
> after we shipped v1, it seems to me like the refund feature may be hard to
> implement on phones if there's no time limit for when you can receive a
> refund. Otherwise a wallet has to be looking out for refunds for payments
> you may have made years ago. So perhaps we should add a new refund field
> that embeds a PaymentDetails structure instead of being just a list of
> outputs.
> 
> We could try and solve this problem some other way purely internally, by
> doing a kind of wallet-specific swapping process in which things like Bloom
> filters are calculated without all keys in them being held in memory at
> once (perhaps caching filters for old parts of the key chain on disk), so
> you can have "infinite" wallets, but eventually the huge Bloom filters that
> would result would hurt efficiency in other ways. So key expiry seems
> pretty fundamental to scalability.

One of the main goals of steath addresses is actually scalability. In
particular in the refund address case you would use stealth addresses
with a per-order UUID so that refunds can be detected cheaply by just
scanning for payments to your (single) stealth address, then when those
payments are detected, check the UUID against a on-disk database. A
64-bit "UUID" is probably fine, although unfortunately with OP_RETURN
quite unexpectedly dropped to 40 bytes the standard needs to change;
might have to compromise on privacy and re-use a txin pubkey to make
things fit.

-- 
'peter'[:-1]@petertodd.org
0000000000000000f4f5ba334791a4102917e4d3f22f6ad7f2c4f15d97307fe2
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 665 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140331/9c53067e/attachment.sig>

From vv01f at riseup.net  Mon Mar 31 10:21:03 2014
From: vv01f at riseup.net (vv01f)
Date: Mon, 31 Mar 2014 12:21:03 +0200
Subject: [Bitcoin-development] secure assigned bitcoin address directory
Message-ID: <5339418F.1050800@riseup.net>

Some users on bitcointalk[0] would like to have their vanity addresses
available for others easily to find and verify the ownership over a kind
of WoT. Right now they sign their own addresses and quote them in the
forums.
As I pointed out there already the centralized storage in the forums is
not secury anyhow and signed messages could be swapped easily with the
next hack of the forums.

Is that use case taken care of in any plans already?

I thought about abusing pgp keyservers but that would suit for single
vanity addresses only.
It seems webfinger could be part of a solution where servers of a
business can tell and proof you if a specific address is owned by them.

[0] https://bitcointalk.org/index.php?topic=502538
[1] https://bitcointalk.org/index.php?topic=505095

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 897 bytes
Desc: OpenPGP digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140331/9ec544af/attachment.sig>

From natanael.l at gmail.com  Mon Mar 31 10:49:14 2014
From: natanael.l at gmail.com (Natanael)
Date: Mon, 31 Mar 2014 12:49:14 +0200
Subject: [Bitcoin-development] secure assigned bitcoin address directory
In-Reply-To: <5339418F.1050800@riseup.net>
References: <5339418F.1050800@riseup.net>
Message-ID: <CAAt2M19HNUjr2OET5YjOB9YQKptOtVAmcPXWwoaxPHVTLOMYbg@mail.gmail.com>

Does't BIP70 cover this already via Certificate Authorities?

On Mon, Mar 31, 2014 at 12:21 PM, vv01f <vv01f at riseup.net> wrote:
> Some users on bitcointalk[0] would like to have their vanity addresses
> available for others easily to find and verify the ownership over a kind
> of WoT. Right now they sign their own addresses and quote them in the
> forums.
> As I pointed out there already the centralized storage in the forums is
> not secury anyhow and signed messages could be swapped easily with the
> next hack of the forums.
>
> Is that use case taken care of in any plans already?
>
> I thought about abusing pgp keyservers but that would suit for single
> vanity addresses only.
> It seems webfinger could be part of a solution where servers of a
> business can tell and proof you if a specific address is owned by them.
>
> [0] https://bitcointalk.org/index.php?topic=502538
> [1] https://bitcointalk.org/index.php?topic=505095
>
>
> ------------------------------------------------------------------------------
>
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>



From pete at petertodd.org  Mon Mar 31 11:21:14 2014
From: pete at petertodd.org (Peter Todd)
Date: Mon, 31 Mar 2014 13:21:14 +0200
Subject: [Bitcoin-development] secure assigned bitcoin address directory
In-Reply-To: <CAAt2M19HNUjr2OET5YjOB9YQKptOtVAmcPXWwoaxPHVTLOMYbg@mail.gmail.com>
	<5339418F.1050800@riseup.net>
Message-ID: <20140331112114.GB30139@tilt>

On Mon, Mar 31, 2014 at 12:21:03PM +0200, vv01f wrote:
> Some users on bitcointalk[0] would like to have their vanity addresses
> available for others easily to find and verify the ownership over a kind
> of WoT. Right now they sign their own addresses and quote them in the
> forums.
> As I pointed out there already the centralized storage in the forums is
> not secury anyhow and signed messages could be swapped easily with the
> next hack of the forums.
> 
> Is that use case taken care of in any plans already?
> 
> I thought about abusing pgp keyservers but that would suit for single
> vanity addresses only.
> It seems webfinger could be part of a solution where servers of a
> business can tell and proof you if a specific address is owned by them.

Good timing! I'm at a hackathon right now working with a group to come
up with a standard for adding Bitcoin addresses to OpenPGP keys. You're
correct in thinking that doing so with standard Bitcoin addresses is a
privacy problem, however we can also define new types of Bitcoin
addresses that address the privacy issue; stealth addresses can handle
the case where you want to pay someone without a formal payment request,
and integrating OpenPGP into the payment protocol handles the scenario
where you want to send or pay to a formal payment request.


On Mon, Mar 31, 2014 at 12:49:14PM +0200, Natanael wrote:
> Does't BIP70 cover this already via Certificate Authorities?

Incidentally on my todo list is to come up for a reasonable standard for
taking X.509 certificates and using them to sign OpenPGP user IDs.
Essentially the certificate authority is then making the statement that
a keypair is authorized to sign on behalf of a domain-name, and in turn
that keypair signs that the email address on the user ID is correct.
It's a best of both worlds option in the same spirit of keybase.io

-- 
'peter'[:-1]@petertodd.org
0000000000000000f4f5ba334791a4102917e4d3f22f6ad7f2c4f15d97307fe2
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 665 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140331/6994a7da/attachment.sig>

From chris.dcosta at meek.io  Mon Mar 31 11:14:49 2014
From: chris.dcosta at meek.io (Chris D'Costa)
Date: Mon, 31 Mar 2014 13:14:49 +0200
Subject: [Bitcoin-development] secure assigned bitcoin address directory
In-Reply-To: <5339418F.1050800@riseup.net>
References: <5339418F.1050800@riseup.net>
Message-ID: <51C10069-5C3B-462A-9184-669ABC6CD9D0@meek.io>

Security of transmission of person-to-person pay-to addresses is one of the use cases that we are addressing on our hardware wallet. 

I have yet to finish the paper but in a nutshell it uses a decentralised ledger of, what we refer to as, "device keys". 

These keys are not related in any way to the Bitcoin keys, (which is why I'm hesitating about discussing it here) neither do they even attempt to identify the human owner if the device. But they do have a specific use case and that is to provide "advanced knowledge" of a publickey that can be used for encrypting a message to an intended recipient, without the requirement for a third-party CA, and more importantly without prior dialogue. We think it is this that would allow you to communicate a pay-to address to someone without seeing them in a secure way.

As I understand it the BlockChain uses "time" bought through proof of work to establish a version of the truth, we are using time in the reverse sense : advanced knowledge of all pubkeys. Indeed all devices could easily check their own record to identify problems on the ledger.

There is of course more to this, but I like to refer to the "distributed ledger of device keys" as the "Web-of-trust re-imagined" although that isn't strictly true.

Ok there you have it. The cat is out of the bag, feel free to give feedback, I have to finish the paper, apologies if it is not a topic for this list.

Regards

Chris D'Costa


> On 31 Mar 2014, at 12:21, vv01f <vv01f at riseup.net> wrote:
> 
> Some users on bitcointalk[0] would like to have their vanity addresses
> available for others easily to find and verify the ownership over a kind
> of WoT. Right now they sign their own addresses and quote them in the
> forums.
> As I pointed out there already the centralized storage in the forums is
> not secury anyhow and signed messages could be swapped easily with the
> next hack of the forums.
> 
> Is that use case taken care of in any plans already?
> 
> I thought about abusing pgp keyservers but that would suit for single
> vanity addresses only.
> It seems webfinger could be part of a solution where servers of a
> business can tell and proof you if a specific address is owned by them.
> 
> [0] https://bitcointalk.org/index.php?topic=502538
> [1] https://bitcointalk.org/index.php?topic=505095
> 
> ------------------------------------------------------------------------------
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development



From natanael.l at gmail.com  Mon Mar 31 11:46:49 2014
From: natanael.l at gmail.com (Natanael)
Date: Mon, 31 Mar 2014 13:46:49 +0200
Subject: [Bitcoin-development] secure assigned bitcoin address directory
In-Reply-To: <51C10069-5C3B-462A-9184-669ABC6CD9D0@meek.io>
References: <5339418F.1050800@riseup.net>
	<51C10069-5C3B-462A-9184-669ABC6CD9D0@meek.io>
Message-ID: <CAAt2M1-ACsJewKnhnPQqn8L7L54WzDyRAjfiGv7eB2LvL_p0Sw@mail.gmail.com>

This sounds like Namecoin. You can already register profiles with it,
including keypairs. onename.io is a web-based client you can use to
register on the Namecoin blockchain.

On Mon, Mar 31, 2014 at 1:14 PM, Chris D'Costa <chris.dcosta at meek.io> wrote:
> Security of transmission of person-to-person pay-to addresses is one of the use cases that we are addressing on our hardware wallet.
>
> I have yet to finish the paper but in a nutshell it uses a decentralised ledger of, what we refer to as, "device keys".
>
> These keys are not related in any way to the Bitcoin keys, (which is why I'm hesitating about discussing it here) neither do they even attempt to identify the human owner if the device. But they do have a specific use case and that is to provide "advanced knowledge" of a publickey that can be used for encrypting a message to an intended recipient, without the requirement for a third-party CA, and more importantly without prior dialogue. We think it is this that would allow you to communicate a pay-to address to someone without seeing them in a secure way.
>
> As I understand it the BlockChain uses "time" bought through proof of work to establish a version of the truth, we are using time in the reverse sense : advanced knowledge of all pubkeys. Indeed all devices could easily check their own record to identify problems on the ledger.
>
> There is of course more to this, but I like to refer to the "distributed ledger of device keys" as the "Web-of-trust re-imagined" although that isn't strictly true.
>
> Ok there you have it. The cat is out of the bag, feel free to give feedback, I have to finish the paper, apologies if it is not a topic for this list.
>
> Regards
>
> Chris D'Costa
>
>
>> On 31 Mar 2014, at 12:21, vv01f <vv01f at riseup.net> wrote:
>>
>> Some users on bitcointalk[0] would like to have their vanity addresses
>> available for others easily to find and verify the ownership over a kind
>> of WoT. Right now they sign their own addresses and quote them in the
>> forums.
>> As I pointed out there already the centralized storage in the forums is
>> not secury anyhow and signed messages could be swapped easily with the
>> next hack of the forums.
>>
>> Is that use case taken care of in any plans already?
>>
>> I thought about abusing pgp keyservers but that would suit for single
>> vanity addresses only.
>> It seems webfinger could be part of a solution where servers of a
>> business can tell and proof you if a specific address is owned by them.
>>
>> [0] https://bitcointalk.org/index.php?topic=502538
>> [1] https://bitcointalk.org/index.php?topic=505095
>>
>> ------------------------------------------------------------------------------
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
> ------------------------------------------------------------------------------
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development



From chris.dcosta at meek.io  Mon Mar 31 16:53:34 2014
From: chris.dcosta at meek.io (Chris D'Costa)
Date: Mon, 31 Mar 2014 18:53:34 +0200
Subject: [Bitcoin-development] secure assigned bitcoin address directory
In-Reply-To: <CAAt2M1-ACsJewKnhnPQqn8L7L54WzDyRAjfiGv7eB2LvL_p0Sw@mail.gmail.com>
References: <5339418F.1050800@riseup.net>
	<51C10069-5C3B-462A-9184-669ABC6CD9D0@meek.io>
	<CAAt2M1-ACsJewKnhnPQqn8L7L54WzDyRAjfiGv7eB2LvL_p0Sw@mail.gmail.com>
Message-ID: <4304E924-B4B1-4B9B-B551-FC1B02777D5D@meek.io>

The idea was not to register profiles or any human identity, or associate it with any other identity directly. Neither was it to have a massive BlockChain, or use proof of work. In this case proof of work is detrimental to security - you want as many people to know about your keys as quickly as possible. I want to add that this implies a shadow p2p network.

Also it's just a point if view, but I thought it better not to have any specific link to a person's identity, or their Bitcoin "identity" by which I mean no connection to their public addresses. The device keys are not meant to be a permanent identity or to store encrypted data either (think what happens if the device changes hands), so the use case is only to establish secure communications, and to verify signatures whilst still in use by the owner. A new owner would need to establish a new device key - again this is in the details and probably more specific to the project.

Regards

Chris D'Costa




> On 31 Mar 2014, at 13:46, Natanael <natanael.l at gmail.com> wrote:
> 
> This sounds like Namecoin. You can already register profiles with it,
> including keypairs. onename.io is a web-based client you can use to
> register on the Namecoin blockchain.
> 
>> On Mon, Mar 31, 2014 at 1:14 PM, Chris D'Costa <chris.dcosta at meek.io> wrote:
>> Security of transmission of person-to-person pay-to addresses is one of the use cases that we are addressing on our hardware wallet.
>> 
>> I have yet to finish the paper but in a nutshell it uses a decentralised ledger of, what we refer to as, "device keys".
>> 
>> These keys are not related in any way to the Bitcoin keys, (which is why I'm hesitating about discussing it here) neither do they even attempt to identify the human owner if the device. But they do have a specific use case and that is to provide "advanced knowledge" of a publickey that can be used for encrypting a message to an intended recipient, without the requirement for a third-party CA, and more importantly without prior dialogue. We think it is this that would allow you to communicate a pay-to address to someone without seeing them in a secure way.
>> 
>> As I understand it the BlockChain uses "time" bought through proof of work to establish a version of the truth, we are using time in the reverse sense : advanced knowledge of all pubkeys. Indeed all devices could easily check their own record to identify problems on the ledger.
>> 
>> There is of course more to this, but I like to refer to the "distributed ledger of device keys" as the "Web-of-trust re-imagined" although that isn't strictly true.
>> 
>> Ok there you have it. The cat is out of the bag, feel free to give feedback, I have to finish the paper, apologies if it is not a topic for this list.
>> 
>> Regards
>> 
>> Chris D'Costa
>> 
>> 
>>> On 31 Mar 2014, at 12:21, vv01f <vv01f at riseup.net> wrote:
>>> 
>>> Some users on bitcointalk[0] would like to have their vanity addresses
>>> available for others easily to find and verify the ownership over a kind
>>> of WoT. Right now they sign their own addresses and quote them in the
>>> forums.
>>> As I pointed out there already the centralized storage in the forums is
>>> not secury anyhow and signed messages could be swapped easily with the
>>> next hack of the forums.
>>> 
>>> Is that use case taken care of in any plans already?
>>> 
>>> I thought about abusing pgp keyservers but that would suit for single
>>> vanity addresses only.
>>> It seems webfinger could be part of a solution where servers of a
>>> business can tell and proof you if a specific address is owned by them.
>>> 
>>> [0] https://bitcointalk.org/index.php?topic=502538
>>> [1] https://bitcointalk.org/index.php?topic=505095
>>> 
>>> ------------------------------------------------------------------------------
>>> _______________________________________________
>>> Bitcoin-development mailing list
>>> Bitcoin-development at lists.sourceforge.net
>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>> 
>> ------------------------------------------------------------------------------
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development



From jgarzik at bitpay.com  Mon Mar 31 17:07:46 2014
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Mon, 31 Mar 2014 13:07:46 -0400
Subject: [Bitcoin-development] secure assigned bitcoin address directory
In-Reply-To: <5339418F.1050800@riseup.net>
References: <5339418F.1050800@riseup.net>
Message-ID: <CAJHLa0M8ryBpaPF7aoqZdyrw4NsKizdVPkdy+DsWfPjWVyzadA@mail.gmail.com>

namecoin + SIN[1] or namecoin + PGP identity.

[1] https://en.bitcoin.it/wiki/Identity_protocol_v1

On Mon, Mar 31, 2014 at 6:21 AM, vv01f <vv01f at riseup.net> wrote:
> Some users on bitcointalk[0] would like to have their vanity addresses
> available for others easily to find and verify the ownership over a kind
> of WoT. Right now they sign their own addresses and quote them in the
> forums.
> As I pointed out there already the centralized storage in the forums is
> not secury anyhow and signed messages could be swapped easily with the
> next hack of the forums.
>
> Is that use case taken care of in any plans already?
>
> I thought about abusing pgp keyservers but that would suit for single
> vanity addresses only.
> It seems webfinger could be part of a solution where servers of a
> business can tell and proof you if a specific address is owned by them.
>
> [0] https://bitcointalk.org/index.php?topic=502538
> [1] https://bitcointalk.org/index.php?topic=505095
>
>
> ------------------------------------------------------------------------------
>
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>



-- 
Jeff Garzik
Bitcoin core developer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From roy at gnomon.org.uk  Mon Mar 31 18:57:51 2014
From: roy at gnomon.org.uk (Roy Badami)
Date: Mon, 31 Mar 2014 19:57:51 +0100
Subject: [Bitcoin-development] secure assigned bitcoin address directory
In-Reply-To: <CAJHLa0M8ryBpaPF7aoqZdyrw4NsKizdVPkdy+DsWfPjWVyzadA@mail.gmail.com>
References: <5339418F.1050800@riseup.net>
	<CAJHLa0M8ryBpaPF7aoqZdyrw4NsKizdVPkdy+DsWfPjWVyzadA@mail.gmail.com>
Message-ID: <20140331185751.GD59714@giles.gnomon.org.uk>

On Mon, Mar 31, 2014 at 01:07:46PM -0400, Jeff Garzik wrote:
> namecoin + SIN[1] or namecoin + PGP identity.

Is namecoin actively maintained these days?

roy





