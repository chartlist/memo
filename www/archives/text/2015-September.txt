From milly at bitcoins.info  Tue Sep  1 00:02:15 2015
From: milly at bitcoins.info (Milly Bitcoin)
Date: Mon, 31 Aug 2015 20:02:15 -0400
Subject: [bitcoin-dev] Your Gmaxwell exchange
In-Reply-To: <a02ace48700ff443b8904f14b23486c4@cock.li>
References: <602b978abcedd92fbed85f305d9d7bfe@cock.li>
	<55E4B8C9.5030606@openbitcoinprivacyproject.org>
	<e786da226b8e9cfaad335454b299ffd5@cock.li>
	<CAJfRnm4kwHkBLUUOmfzViUwsdAf3LYSTruvHw9+-RbgxSMHLRg@mail.gmail.com>
	<91e79f981126ebe62e30df26e0c7ec50@cock.li>
	<55E4CD16.3010508@openbitcoinprivacyproject.org>
	<a02ace48700ff443b8904f14b23486c4@cock.li>
Message-ID: <55E4EB07.1040305@bitcoins.info>

  > Bitcoin is a decentralized currency which allows any person the
> ability to transact in a way that does not require specific trust in
> any particular party.

Bitcoin is only a partial solution to the Byzantine general problem. 
Users do need to trust that things such as mining and development 
systems work as intended.  Once the user trusts those systems only then 
is the state of the ledger trustless.  Just because the state of ledger 
is decentralized due to mining that does not automatically mean 
everything associated with Bitcoin is "decentralized."  (Some people 
actually claim reddit is decentralized because users can vote.  That 
would mean the US government is also decentralized since there are 
elections but i don't think most people would agree with that definition.)

Centralized and decentralized system are not intrinsically good or bad. 
  Each one has it use cases just like a hammer and a screw driver. 
Claiming otherwise is treating Bitcoin a as religion rather than a 
technology.

Russ


From hurricanewarn1 at aol.com  Tue Sep  1 00:26:17 2015
From: hurricanewarn1 at aol.com (hurricanewarn1 at aol.com)
Date: Mon, 31 Aug 2015 20:26:17 -0400
Subject: [bitcoin-dev] AT&T has effectively banned Bitcoin nodes by closing
 port 8333 via a hidden firewall in the cable box
Message-ID: <14f864c1631-3abb-a855@webprd-a67.mail.aol.com>

I have been struggling to get port 8333 open all year, I gave up and was using blockchain for months despite a strong desire to stay on Bitcoin Core, but now the issue has reached critical mass since I'm using the python Bitcoin server module. I have literally spent my entire day trying to open 8333, I thoroughly made sure it was open on the router and computer and it's still closed. Strangely enough I got it open for 30 seconds once today but something closed it immediately.

After hours of phone calls and messaging AT&T finally told me the truth of what was going on, and only because I noticed it myself and demanded an answer. The internet is being routed through a DVR/cable box, and they confirmed the DVR also has a firewall. To make this even more absurd they refused to turn the firewall off because it is their equipment. So effectively they can firewall any port they want even if the customer asks them not to, in the unlikely event the customer figures it out.

Perhaps this is the driving force behind the inexplicable and massive decline in Bitcoin nodes. Bitcoin is being censored by the ISPs themselves, and they won't even tell you that. I had to get in touch with headquarters and threaten to rip it out of the wall to get a proper answer. 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150831/a9145edf/attachment.html>

From milly at bitcoins.info  Tue Sep  1 01:04:59 2015
From: milly at bitcoins.info (Milly Bitcoin)
Date: Mon, 31 Aug 2015 21:04:59 -0400
Subject: [bitcoin-dev] AT&T has effectively banned Bitcoin nodes by
 closing port 8333 via a hidden firewall in the cable box
In-Reply-To: <14f864c1631-3abb-a855@webprd-a67.mail.aol.com>
References: <14f864c1631-3abb-a855@webprd-a67.mail.aol.com>
Message-ID: <55E4F9BB.5070902@bitcoins.info>

> I have been struggling to get port 8333 open all year,
>
> After hours of phone calls and messaging AT&T finally told me the truth
> of what was going on,

I went through this Comcast involving another port.  When they blocked 
the port I asked them the reason (I referenced their privacy policy that 
they are supposed to disclose my account info to me).  they told me it 
didn't matter what their privacy policy said, they weren't going to tell 
me.  I then showed up in federal court and testified as to what they 
were doing.  It was a class action lawsuit against them for people who 
tried to get refunds over bandwidth throttling and I was one of members 
of the class.

In any event the solution for me was to get a business account rather 
than a residential account.  You get a gateway that you can configure 
yourself and you can turn off the firewall.  As far as I can tell no 
ports are blocked like residential accounts.  The cost was an extra 
$10/month (unless you get other options like fixed IP and/or increased 
bandwidth).  maybe you can get the data from bitnodes.io to see if any 
ISP is blocking nodes.  Maybe stats could be posted based on ISP.  I 
have been running a node through that account for awhile now 
https://getaddr.bitnodes.io/nodes/70.90.2.18-8333/

Russ



From james.hilliard1 at gmail.com  Tue Sep  1 01:16:31 2015
From: james.hilliard1 at gmail.com (James Hilliard)
Date: Mon, 31 Aug 2015 20:16:31 -0500
Subject: [bitcoin-dev] AT&T has effectively banned Bitcoin nodes by
 closing port 8333 via a hidden firewall in the cable box
In-Reply-To: <14f864c1631-3abb-a855@webprd-a67.mail.aol.com>
References: <14f864c1631-3abb-a855@webprd-a67.mail.aol.com>
Message-ID: <CADvTj4rRVf89zU8dLROhyGopJNg2vLDg-9oviOLye_VcvuAy7A@mail.gmail.com>

You should tell AT&T that you want the DVR/cable box put into what is
usually referred to as "bridge mode" or sometimes "true bridge mode"
depending on your ISP and then use your own router, look under
"Bridged Mode" at the bottom of this page for AT&T
http://www.att.com/gen/general?pid=23697 . You want your own router to
have the external IP, if it does not it is not configured correctly.
In general one should never use a router provided by their ISP for
anything other than modem functionality since it is typically only the
ISP that can change the firmware on it, it also makes troubleshooting
problems like this more difficult.

On Mon, Aug 31, 2015 at 7:26 PM, Zach G via bitcoin-dev
<bitcoin-dev at lists.linuxfoundation.org> wrote:
> I have been struggling to get port 8333 open all year, I gave up and was
> using blockchain for months despite a strong desire to stay on Bitcoin Core,
> but now the issue has reached critical mass since I'm using the python
> Bitcoin server module. I have literally spent my entire day trying to open
> 8333, I thoroughly made sure it was open on the router and computer and it's
> still closed. Strangely enough I got it open for 30 seconds once today but
> something closed it immediately.
>
> After hours of phone calls and messaging AT&T finally told me the truth of
> what was going on, and only because I noticed it myself and demanded an
> answer. The internet is being routed through a DVR/cable box, and they
> confirmed the DVR also has a firewall. To make this even more absurd they
> refused to turn the firewall off because it is their equipment. So
> effectively they can firewall any port they want even if the customer asks
> them not to, in the unlikely event the customer figures it out.
>
> Perhaps this is the driving force behind the inexplicable and massive
> decline in Bitcoin nodes. Bitcoin is being censored by the ISPs themselves,
> and they won't even tell you that. I had to get in touch with headquarters
> and threaten to rip it out of the wall to get a proper answer.
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>

From olinzodd at gmail.com  Tue Sep  1 01:21:08 2015
From: olinzodd at gmail.com (William Miller)
Date: Mon, 31 Aug 2015 21:21:08 -0400
Subject: [bitcoin-dev] Message: 5
Message-ID: <004601d0e454$7bd225e0$737671a0$@gmail.com>


Message: 5
Date: Mon, 31 Aug 2015 20:26:17 -0400
From: hurricanewarn1 at aol.com
To: bitcoin-dev at lists.linuxfoundation.org
Subject: [bitcoin-dev] AT&T has effectively banned Bitcoin nodes by
	closing port 8333 via a hidden firewall in the cable box
Message-ID: <14f864c1631-3abb-a855 at webprd-a67.mail.aol.com>
Content-Type: text/plain; charset="utf-8"

I have been struggling to get port 8333 open all year, I gave up and was
using blockchain for months despite a strong desire to stay on Bitcoin Core,
but now the issue has reached critical mass since I'm using the python
Bitcoin server module. I have literally spent my entire day trying to open
8333, I thoroughly made sure it was open on the router and computer and it's
still closed. Strangely enough I got it open for 30 seconds once today but
something closed it immediately.

After hours of phone calls and messaging AT&T finally told me the truth of
what was going on, and only because I noticed it myself and demanded an
answer. The internet is being routed through a DVR/cable box, and they
confirmed the DVR also has a firewall. To make this even more absurd they
refused to turn the firewall off because it is their equipment. So
effectively they can firewall any port they want even if the customer asks
them not to, in the unlikely event the customer figures it out.

Perhaps this is the driving force behind the inexplicable and massive
decline in Bitcoin nodes. Bitcoin is being censored by the ISPs themselves,
and they won't even tell you that. I had to get in touch with headquarters
and threaten to rip it out of the wall to get a proper answer.


I am grateful that, as of this current moment, Time Warner doesn't seem to
mind. I am aware of what you're saying, because a friend had me look at
their AT&T system one day, and I discovered all their equipment is now
running over IP. I was not aware, however, that they wouldn't unblock a
port.

I run a bitcoin node, miners ,all sort of other stuff (like Video, etc.) and
it runs pretty good, even with me myself having everything 'double
firewalled'. Time Warner seems the way to go!


From peter_r at gmx.com  Tue Sep  1 02:16:22 2015
From: peter_r at gmx.com (Peter R)
Date: Mon, 31 Aug 2015 19:16:22 -0700
Subject: [bitcoin-dev] Let's kill Bitcoin Core and allow the green shoots of
	a garden of new implementations to grow from its fertile ashes
In-Reply-To: <55E4E7AA.6010905@sky-ip.org>
References: <602b978abcedd92fbed85f305d9d7bfe@cock.li>
	<55E4B8C9.5030606@openbitcoinprivacyproject.org>
	<e786da226b8e9cfaad335454b299ffd5@cock.li>
	<CAJfRnm4kwHkBLUUOmfzViUwsdAf3LYSTruvHw9+-RbgxSMHLRg@mail.gmail.com>
	<5A3D7824-F1E3-421B-A32A-0EF21DD215BD@gmx.com>
	<55E4E7AA.6010905@sky-ip.org>
Message-ID: <CC252814-9AF6-4A28-926E-EE83C517E440@gmx.com>

I agree, s7r, that Bitcoin Core represents the most stable code base.  To create multiple implementations, other groups would fork Bitcoin Core similar to what Bitcoin XT did.  We could have:

- Bitcoin-A (XT)
- Bitcoin-B (Blockstream)
- Bitcoin-C (promoting BIP100)
- Bitcoin-D
- etc.

Innovation from any development group would be freely integrated by any other development group, if desired.  Of course, each group would have a very strong incentive to remain fork-wise compatible with the other implementations.  

In fact, this just gave me a great idea!  Since Wladimir has stated that he will not integrate a forking change into Core without Core Dev consensus, I suggest we work together to never reach consensus with Bitcoin Core.  This will provide impetus for new implementations to fork from Core (like XT did) and implement whatever scaling solution they deem best.  The users will then select the winning solution simply based on the code they choose to run.  The other implementations will then rush to make compatible changes in order to keep their dwindling user bases.  

This is the decentralized spirit of Bitcoin in action.  Creative destruction.  Consensus formed simply by the code that gets run.  

Let's kill Bitcoin Core and allow the green shoots of a garden of new implementations to grow from its fertile ashes.  

Sincerely,
Peter R


On 2015-08-31, at 4:47 PM, s7r <s7r at sky-ip.org> wrote:

> Signed PGP part
> Decentralization depends on the context and does not have a definition
> in a form that it was demanded... I can confirm we have people in our
> community which do understand decentralization, and quite good
> actually, just there is no definition if the form demanded.
> 
> It is known that ~90% (at least of the nodes accepting incoming
> connections) are running Bitcoin Core software. This does not mean
> that Bitcoin is somehow less decentralized. Bitcoin Core is open
> source, it has many contributors from all over the world and there are
> many pull requests - most of them do get merged if you check the
> commit history. It is widely used because the quality of the code is 5
> stars. There are other implementations as well, they are just not
> widely used. This does not mean one is not free to write his own
> implementation of the Bitcoin protocol (assuming he follows the
> consensus rules of the network). The biggest problem is convincing
> users to adopt that implementation, which is a normal thing which
> happens in general, not only related to software implementations.
> 
> The problem is there is no other implementation out there which comes
> near the quality of the code in Bitcoin Core. I am actually eager to
> try other implementations as well, but something serious, because
> Bitcoin itself is a payment protocol not something to play with.
> 
> This is the reason why a lot of developers contribute to Bitcoin Core
> rather than writing their own implementation. This only makes Bitcoin
> Core stronger, better, and obviously the result is that it has
> majority in the ecosystem for good reasons. If I'm experienced in a
> certain segment related to software developing, I am better of in
> contributing to Bitcoin Core just with the part I know instead of
> writing from scratch my own implementation.
> 
> On 9/1/2015 2:32 AM, Peter R via bitcoin-dev wrote:
> > On 2015-08-31, at 2:24 PM, Allen Piscitello via bitcoin-dev
> > <bitcoin-dev at lists.linuxfoundation.org
> > <mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:
> >
> >> Even so, *decentralization is a means to an end* - not an
> >> end-goal. It is essential for Bitcoin to be a useful alternative,
> >> of course.
> >
> > I agree.  What about decentralization in development?  Gavin
> > recently said that he wants to "get to the point where there will
> > be multiple robust implementations of the core protocol."
> >
> > When I look at this image (https://i.imgur.com/zivHJvY.gif)
> > illustrating centralization in nodes, mining and development, the
> > biggest source of concern for me is the 85% node share around
> > Bitcoin Core.  With this level of centralization, it may be
> > possible in the future for a group of coders to prevent important
> > changes from being made in a timely fashion (e.g., should their
> > interests no longer align with those of the larger Bitcoin
> > community).
> >
> > It is my opinion, then, that we should support multiple
> > implementations of the Bitcoin protocol, working to reduce the
> > network's dependency on Core.
> >
> > Best regards, Peter R
> >
> 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150831/14b56b5b/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 496 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150831/14b56b5b/attachment.sig>

From gmaxwell at gmail.com  Tue Sep  1 02:25:08 2015
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Tue, 1 Sep 2015 02:25:08 +0000
Subject: [bitcoin-dev] Let's kill Bitcoin Core and allow the green
 shoots of a garden of new implementations to grow from its fertile ashes
In-Reply-To: <CC252814-9AF6-4A28-926E-EE83C517E440@gmx.com>
References: <602b978abcedd92fbed85f305d9d7bfe@cock.li>
	<55E4B8C9.5030606@openbitcoinprivacyproject.org>
	<e786da226b8e9cfaad335454b299ffd5@cock.li>
	<CAJfRnm4kwHkBLUUOmfzViUwsdAf3LYSTruvHw9+-RbgxSMHLRg@mail.gmail.com>
	<5A3D7824-F1E3-421B-A32A-0EF21DD215BD@gmx.com>
	<55E4E7AA.6010905@sky-ip.org>
	<CC252814-9AF6-4A28-926E-EE83C517E440@gmx.com>
Message-ID: <CAAS2fgRdhET8+9JS6n7TzWgkoTCWasNU+HKiE7g91CkL3_wCaw@mail.gmail.com>

On Tue, Sep 1, 2015 at 2:16 AM, Peter R via bitcoin-dev
<bitcoin-dev at lists.linuxfoundation.org> wrote:
> - Bitcoin-B (Blockstream)

Blockstream currently has no interest in maintaining a separate
implementation of Bitcoin.

At this time I believe doing so would have significantly negative
value; especially in light of the current climate where people are
conflating a tremendously destructive bifurcation of the Bitcoin
ledger with mere (and far more boring) alternative implementations.

From opetruzel at gmail.com  Tue Sep  1 02:30:44 2015
From: opetruzel at gmail.com (Oliver Petruzel)
Date: Mon, 31 Aug 2015 22:30:44 -0400
Subject: [bitcoin-dev] Your Gmaxwell exchange
In-Reply-To: <CAKuKjyUpJOMdDCjGmo1tYc6sA3r69VAXpvzhMJ7EZSHtb9C9Sw@mail.gmail.com>
References: <CAEgR2PFB3h_8fr=d8HegRSD0XdooimhFKtLR4vKr2QXv+EwBfQ@mail.gmail.com>
	<AD284610-4F40-445C-A074-CC94EDFFCBA8@gmx.com>
	<CAAS2fgRs5NVM2nHKNXbgMJa51tDq-6ZBc6XfaScyP45UPWTW_g@mail.gmail.com>
	<5CC48639-11D0-4682-BF82-443286C8E58D@gmx.com>
	<CAAS2fgShF=2vtPrKtXmdA454s_xpJbxSB0SFBsstniHB8WtGzQ@mail.gmail.com>
	<CAKuKjyUpJOMdDCjGmo1tYc6sA3r69VAXpvzhMJ7EZSHtb9C9Sw@mail.gmail.com>
Message-ID: <CALhpmH2yH1csM8=sodLN5bdSm-hhoWsNVxHPHHsGRYUqFEzHVQ@mail.gmail.com>

>>>I would be OK with $100 transaction fee

Unless you're relying upon some hypothetical hyper-inflation of the USD,
how does one accept or justify such fees given the title (and intentions)
of Satoshi's own white paper and corresponding software?

I believe the key words "cash system" must be kept in mind throughout all
of these discussions and developments, or else we risk turning Bitcoin into
something other than cash.

Bitcoin will no longer be a P2P cash system if the fees make transactions
prohibitively expensive for all but the wealthiest of individuals and
corporations.

I understand that a careful balance must be struck between (measurable?)
decentralization and Bitcoin's use as an actual cash system; however, those
who are willing to annihilate the latter to maintain ONLY the former must
at least be honest with everyone that they really don't care if Bitcoin
becomes something entirely different than Satoshi's original invention and
intention.

Call it a necessary transformation or reinvention, and by a new name, if
you will; because, with exorbitant fees, it may no longer be accurate or
appropriate to call it Bitcoin: A Peer-to-peer Electronic CASH System.

Respectfully,
Oliver
On Aug 30, 2015 2:38 AM, "Adam Ritter via bitcoin-dev" <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> I don't really see any problem with the paper:
> All it states is that having the assumption that miners don't
> centralize, transaction fees don't go to zero even without the
> blocksize limit. I think we can accept this as a nice academic
> research, and I believe that it's true.
> Still, it doesn't have anything that is practical for me as an user of
> the Bitcoin network (I use it for storing long-term purchase value, as
> most of the people who I know): it doesn't help me if I still need to
> pay transaction fees after the blocksize limit is gone. My (and other
> users') main concern is about centralization, which has nothing to do
> with transaction fees. I would be OK with $100 transaction fee as
> well, as long as the network is fair and secure (which comes from
> decentralization).
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150831/d557c458/attachment-0001.html>

From pete at petertodd.org  Tue Sep  1 06:54:42 2015
From: pete at petertodd.org (Peter Todd)
Date: Tue, 1 Sep 2015 02:54:42 -0400
Subject: [bitcoin-dev] Short review of previously-proposed exotic
 SIGHASH types
In-Reply-To: <CABaSBazLWrmd=iKj2sM61cfU==U4zQq95auQLbbnv4HbO_H=QQ@mail.gmail.com>
References: <CABaSBazLWrmd=iKj2sM61cfU==U4zQq95auQLbbnv4HbO_H=QQ@mail.gmail.com>
Message-ID: <20150901065441.GH30364@muck>

On Sun, Aug 30, 2015 at 01:56:34PM -0500, Bryan Bishop via bitcoin-dev wrote:
> Here is a short review of previously-proposed and exotic SIGHASH types.
> 
> SIGHASH_MULTIPLE
> Similarly, petertodd has asked for a SIGHASH_DONT_SIGN_TXID before to
> make OP_CODESEPARATOR more useful.

There's also my "meta sighash" idea of using code to build up the
signature with OP_CODESEPARATOR:

http://www.mail-archive.com/bitcoin-development at lists.sourceforge.net/msg07384.html

-- 
'peter'[:-1]@petertodd.org
000000000000000010b552c5f5c18705ccb1b21c550c08872089f89076840d6d
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 650 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150901/d9db07d0/attachment.sig>

From odinn.cyberguerrilla at riseup.net  Tue Sep  1 07:16:47 2015
From: odinn.cyberguerrilla at riseup.net (odinn)
Date: Tue, 01 Sep 2015 07:16:47 +0000
Subject: [bitcoin-dev] AT&T has effectively banned Bitcoin nodes by
 closing port 8333 via a hidden firewall in the cable box
In-Reply-To: <14f864c1631-3abb-a855@webprd-a67.mail.aol.com>
References: <14f864c1631-3abb-a855@webprd-a67.mail.aol.com>
Message-ID: <55E550DF.80806@riseup.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512

Another note on this subject to add to the stuff people have already
mentioned...

If you have the AT&T landline but don't use AT&T's standard internet /
tv (what they call Uverse) offering - that is, if you prefer to use
some local internet provider - you are probably better off (in terms
of avoiding not only this sort of blockage/censorship but as well,
potentially getting a better privacy policy that isn't going to be
like AT&T's long-term data retention).  You can check directly with
the various local small ISPs to see what their policies are
specifically on ports and whatnot.

Ideally your ISP should let you:

port forward to SOMEPORTNUMBER for tcp and udp

(above may or may not be helpful for some if you are using
decentralized markets)

have port 8333 open

(above is for bitcoin of course)

Supposing you have FTTN because you are paying a local ISP for
internet service, and that local ISP has contracted with AT&T to be
able to provide service in an area where old-style DSL has been phased
out, thus your local ISP is essentially providing you AT&T FTTN.
(FTTN is Fiber to the Node, FTTN-BP is FTTN Bonded Pair).  Even if a
local ISP has its own privacy policy posted which is different from
AT&T, everything is subject to AT&T data retention because the FTTN.
So get yourself a VPN (or set up your own) for your connection. Tor
will run through the VPN.

General observations - TWC stores your IP and other stuffs for 6
months or longer.  Same for Comcast.  Verizon retains your stuffs for
18 month minimum, probably longer though. Qwest/Century, 1 year.
Cox, 6 months.  AT&T retains for longer than a year.  This is just
what they are telling you, the reality is it's probably longer due to
stuff like this:
https://www.lawfareblog.com/odni-and-doj-release-last-section-215-collec
tion-order









Zach G via bitcoin-dev:
> I have been struggling to get port 8333 open all year, I gave up
> and was using blockchain for months despite a strong desire to stay
> on Bitcoin Core, but now the issue has reached critical mass since
> I'm using the python Bitcoin server module. I have literally spent
> my entire day trying to open 8333, I thoroughly made sure it was
> open on the router and computer and it's still closed. Strangely
> enough I got it open for 30 seconds once today but something closed
> it immediately.
> 
> After hours of phone calls and messaging AT&T finally told me the
> truth of what was going on, and only because I noticed it myself
> and demanded an answer. The internet is being routed through a
> DVR/cable box, and they confirmed the DVR also has a firewall. To
> make this even more absurd they refused to turn the firewall off
> because it is their equipment. So effectively they can firewall any
> port they want even if the customer asks them not to, in the
> unlikely event the customer figures it out.
> 
> Perhaps this is the driving force behind the inexplicable and
> massive decline in Bitcoin nodes. Bitcoin is being censored by the
> ISPs themselves, and they won't even tell you that. I had to get in
> touch with headquarters and threaten to rip it out of the wall to
> get a proper answer.
> 
> 
> 
> _______________________________________________ bitcoin-dev mailing
> list bitcoin-dev at lists.linuxfoundation.org 
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> 

- -- 
http://abis.io ~
"a protocol concept to enable decentralization
and expansion of a giving economy, and a new social good"
https://keybase.io/odinn
-----BEGIN PGP SIGNATURE-----

iQEcBAEBCgAGBQJV5VDeAAoJEGxwq/inSG8CvkIH/jy4Vo+My3xeBdvFQmxkJWyQ
U5mv2zWEvBYw71Xy1EDzQY1AhEBmatUU1eu2AbOqXdUR4511FxCNzFmTxy6roEiz
EehBkvXNbBCbEzLRisjxuQw34OKM+xfieCqE1mzJok2uSdLMMQLcbWL1/k3/OmS5
9O9z/wMXqU1Jc19MTK+vF1Lz5ilnRn3hEbTaCN3ivYnYFa0DpBH9r0Y07UcoJ6Wr
ui/x0sSSuupAGzOkZ75HQ8yeQXckeAu6TB3/jE8QEqNUmAJkmR8eK4ofXZWFrIjy
mOKeQL4c+jRQnTR8pt+y89g2QIpzFoHaV5T+WvQuC1t8xNOrxLgYFXWgl0dhoYE=
=UCLC
-----END PGP SIGNATURE-----

From pete at petertodd.org  Tue Sep  1 07:56:14 2015
From: pete at petertodd.org (Peter Todd)
Date: Tue, 1 Sep 2015 03:56:14 -0400
Subject: [bitcoin-dev] ERRATA CORRIGE + Short Theorem
In-Reply-To: <CAEgR2PE35K6kt1sZ0iDu2Y9vv+6+Omgg_n4n3gtMggYuE3YD-g@mail.gmail.com>
References: <CAEgR2PE35K6kt1sZ0iDu2Y9vv+6+Omgg_n4n3gtMggYuE3YD-g@mail.gmail.com>
Message-ID: <20150901075613.GD17380@muck>

On Sun, Aug 30, 2015 at 10:01:00PM +0200, Daniele Pinna via bitcoin-dev wrote:
> Since my longer post seems to be caught in moderator purgatory I will
> rehash its results into this much smaller message. I apologize for the
> spamming.
> 
> I present a theorem whose thesis is obvious to many.
> 
> *THESIS: All hashrates* *h' > h generate a revenue per unit of hash v' >
> v. *
> 
> Let us absurdly[1] assume that an optimal hashrate *h* exists where the
> average revenue for each hash in service is maximized. This will result
> from perpetually mining blocks of size *q,* is *v. *All larger hashrates *h'
> > h* will generate an average revenue per hash *v' < v*(effectively the
> conclusion of my paper) due to the higher orphan risk carried from having
> to mine blocks of size *q' > q*. Leading from Peter's model and my
> analysis, the origin of this balance lies in the fact that larger miners
> must somehow be forced to mine larger blocks which in turn carry a larger
> orphan risk.
> 
> What happens if a large miner *h'* chooses not to mine his optimal block
> size *q' *in favor of a seemingly "sub-optimal" block size* q*?
> Since he mines a block of identical size as the smaller miner, they will
> both carry identical orphan risks[2], and win identical
> amounts*R+M(q)* whenever
> they successfully mine a block. Since the larger miner can statistically
> expect to win *h'/h* more blocks than the smaller miner, they will each
> earn an identical revenue per unit of hash *R+M(q)/h*.
> 
> This however directly contradicts the assumption that an optimal hashrate
> exists beyond which the revenue per unit of hash *v' < v*if  *h' > h. *
> *Q.E.D *
> 
> This theorem in turn implies the following corollary:
> 
> *COROLLARY: **The marginal profit curve is a monotonically increasing of
> miner hashrate.*
> 
> This simple theorem, suggested implicitly by Gmaxwell disproves any and all
> conclusions of my work. Most importantly, centralization pressures will
> always be present.

FWIW I did a quick math proof along those lines awhile back too using
some basic first-year math, again proving that larger miners earn more
money per unit hashing power:

http://www.mail-archive.com/bitcoin-development at lists.sourceforge.net/msg03272.html

-- 
'peter'[:-1]@petertodd.org
000000000000000010b552c5f5c18705ccb1b21c550c08872089f89076840d6d
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 650 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150901/83359699/attachment.sig>

From peter_r at gmx.com  Tue Sep  1 08:06:30 2015
From: peter_r at gmx.com (Peter R)
Date: Tue, 1 Sep 2015 01:06:30 -0700
Subject: [bitcoin-dev] ERRATA CORRIGE + Short Theorem
In-Reply-To: <20150901075613.GD17380@muck>
References: <CAEgR2PE35K6kt1sZ0iDu2Y9vv+6+Omgg_n4n3gtMggYuE3YD-g@mail.gmail.com>
	<20150901075613.GD17380@muck>
Message-ID: <7E54183F-DDBD-4EFB-828B-841350A80E33@gmx.com>

On 2015-09-01, at 12:56 AM, Peter Todd via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote
> 
> FWIW I did a quick math proof along those lines awhile back too using
> some basic first-year math, again proving that larger miners earn more
> money per unit hashing power:
> 
> http://www.mail-archive.com/bitcoin-development at lists.sourceforge.net/msg03272.html

I don't believe anyone is arguing otherwise.  Miners with a larger fraction of the network hash rate, h/H, have a theoretical advantage, all other variables in the miner's profitability equation held constant.  

Dpinna originally claimed (unless I'm mistaken) that his paper showed that this advantage decreased as the block reward diminished or as the total fees increased.  This didn't seem unreasonable to me, although I never checked the math.  

Best regards,
Peter


 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150901/85a88dc1/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 496 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150901/85a88dc1/attachment.sig>

From adam at cypherspace.org  Tue Sep  1 08:42:51 2015
From: adam at cypherspace.org (Adam Back)
Date: Tue, 1 Sep 2015 01:42:51 -0700
Subject: [bitcoin-dev] Let's kill Bitcoin Core and allow the green
 shoots of a garden of new implementations to grow from its fertile ashes
In-Reply-To: <CC252814-9AF6-4A28-926E-EE83C517E440@gmx.com>
References: <602b978abcedd92fbed85f305d9d7bfe@cock.li>
	<55E4B8C9.5030606@openbitcoinprivacyproject.org>
	<e786da226b8e9cfaad335454b299ffd5@cock.li>
	<CAJfRnm4kwHkBLUUOmfzViUwsdAf3LYSTruvHw9+-RbgxSMHLRg@mail.gmail.com>
	<5A3D7824-F1E3-421B-A32A-0EF21DD215BD@gmx.com>
	<55E4E7AA.6010905@sky-ip.org>
	<CC252814-9AF6-4A28-926E-EE83C517E440@gmx.com>
Message-ID: <CALqxMTFKDmQnFZimJPttyDdyOHbc_ffs-vV7XDwwJLLu=UPVfA@mail.gmail.com>

Peter this seems to be a not well thought through course of action,
fun though it maybe informally or philosophically or to tweak various
peoples sensibilities.

Bitcoin is a consensus system that does not work if there are
incompatible versions of consensus code competing on the network.
This is why work is underway on libconsensus so we can see diversity
of implementation without the risk of incompatibility arising by
software defect.  It has proven quite hard to match independent
consensus implementations bit for bit against an adaptive adversary
looking for inconsistencies in interpretation.

In terms of protocol updates it is more constructive therefore that
people with a technical interest analyse and validate others proposals
via testing, or make their own proposals so that we can arrive at a
well validated upgrade mechanism that everyone upgrades to in a
coordinated fashion.

Previous intentional upgrades to bitcoin have been
backwards-compatible (via soft-fork which can be secured reasonably
using a miner vote trigger and temporary SPV security for those who
not yet upgraded) but the current topic of a throughput increase is
non-backwards-compatible (via a hard-fork), and the way to minimise
risk of such an upgrade is for everyone to try to upgrade well in
advance of an agreed upgrade schedule, and to be all upgrading to the
*same* consensus rule change.

Encouraging nodes or miners to "vote" by running a range of different
consensus rules isnt really constructive I feel - it alarms people who
understand the risks, sets things on a path that have to be fixed
while in flight by obvious implication, and isnt collaborative - so it
risks being a politicising suggestion on what should be a purely
technical topic of choosing the best approach, where it is best to
strive to keep things non-emotive and professional and technically
focussed.  Such calls are offending the technical sensibilities of
people who understand the risks.

Anyway lets try to keep things constructive and focus on analysing proposals.

Adam

On 31 August 2015 at 19:16, Peter R via bitcoin-dev
<bitcoin-dev at lists.linuxfoundation.org> wrote:
> I agree, s7r, that Bitcoin Core represents the most stable code base.  To
> create multiple implementations, other groups would fork Bitcoin Core
> similar to what Bitcoin XT did.  We could have:
>
> - Bitcoin-A (XT)
> - Bitcoin-B (Blockstream)
> - Bitcoin-C (promoting BIP100)
> - Bitcoin-D
> - etc.
>
> Innovation from any development group would be freely integrated by any
> other development group, if desired.  Of course, each group would have a
> very strong incentive to remain fork-wise compatible with the other
> implementations.
>
> In fact, this just gave me a great idea!  Since Wladimir has stated that he
> will not integrate a forking change into Core without Core Dev consensus, I
> suggest we work together to never reach consensus with Bitcoin Core.  This
> will provide impetus for new implementations to fork from Core (like XT did)
> and implement whatever scaling solution they deem best.  The users will then
> select the winning solution simply based on the code they choose to run.
> The other implementations will then rush to make compatible changes in order
> to keep their dwindling user bases.
>
> This is the decentralized spirit of Bitcoin in action.  Creative
> destruction.  Consensus formed simply by the code that gets run.
>
> Let's kill Bitcoin Core and allow the green shoots of a garden of new
> implementations to grow from its fertile ashes.

From daniele.pinna at gmail.com  Tue Sep  1 08:52:46 2015
From: daniele.pinna at gmail.com (Daniele Pinna)
Date: Tue, 1 Sep 2015 10:52:46 +0200
Subject: [bitcoin-dev] ERRATA CORRIGE + Short Theorem
In-Reply-To: <7E54183F-DDBD-4EFB-828B-841350A80E33@gmx.com>
References: <CAEgR2PE35K6kt1sZ0iDu2Y9vv+6+Omgg_n4n3gtMggYuE3YD-g@mail.gmail.com>
	<20150901075613.GD17380@muck>
	<7E54183F-DDBD-4EFB-828B-841350A80E33@gmx.com>
Message-ID: <CAEgR2PFcPgUmfBNhqXBQdPD_O_24sMDmsX23+qsuzsU92KZS6A@mail.gmail.com>

My paper did show that the advantage decreased with the block reward.
However, in that limit, it also seemed to imply that a network state would
appear where the revenue per unit hash decreased with increasing hashrate
which should be impossible as just discussed.

In a followup email, I showed how the origin of this effect stems from the
orphaning factor used which doesn't preserve the full network revenue per
unit block. This led me to correct my assertions by pointing out that our
miner profit equations seemed to be just lower bounds to the miner's true
expected profit. As such, just because the *lower bound* on the revenue per
unit hash advantage decreases with the block reward, this doesn't
necessarily imply that the *real* revenue per unit hash advantage does also.

I suspect that the orphaning factor used, independently of the specific
form of the block relay time, is incorrect or incomplete as stated.

Best,
Daniele

Daniele Pinna, Ph.D

On Tue, Sep 1, 2015 at 10:06 AM, Peter R <peter_r at gmx.com> wrote:

> On 2015-09-01, at 12:56 AM, Peter Todd via bitcoin-dev <
> bitcoin-dev at lists.linuxfoundation.org> wrote
>
>
> FWIW I did a quick math proof along those lines awhile back too using
> some basic first-year math, again proving that larger miners earn more
> money per unit hashing power:
>
>
> http://www.mail-archive.com/bitcoin-development at lists.sourceforge.net/msg03272.html
>
>
> I don't believe anyone is arguing otherwise.  Miners with a larger
> fraction of the network hash rate, *h*/*H*, have a theoretical advantage,
> all other variables in the miner's profitability equation held constant.
>
> Dpinna originally claimed (unless I'm mistaken) that his paper showed that
> this advantage *decreased* as the block reward diminished or as the total
> fees increased.  This didn't seem unreasonable to me, although I never
> checked the math.
>
> Best regards,
> Peter
>
>
>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150901/352b7446/attachment.html>

From jtimon at jtimon.cc  Tue Sep  1 09:25:03 2015
From: jtimon at jtimon.cc (=?UTF-8?B?Sm9yZ2UgVGltw7Nu?=)
Date: Tue, 1 Sep 2015 11:25:03 +0200
Subject: [bitcoin-dev] Your Gmaxwell exchange
In-Reply-To: <55E4CD16.3010508@openbitcoinprivacyproject.org>
References: <602b978abcedd92fbed85f305d9d7bfe@cock.li>
	<55E4B8C9.5030606@openbitcoinprivacyproject.org>
	<e786da226b8e9cfaad335454b299ffd5@cock.li>
	<CAJfRnm4kwHkBLUUOmfzViUwsdAf3LYSTruvHw9+-RbgxSMHLRg@mail.gmail.com>
	<91e79f981126ebe62e30df26e0c7ec50@cock.li>
	<55E4CD16.3010508@openbitcoinprivacyproject.org>
Message-ID: <CABm2gDqu_swZ7auR3jXkoQnbJ6AHEoz7+e8ev7VSdKynMj74iw@mail.gmail.com>

On Aug 31, 2015 3:01 PM, "Justus Ranvier via bitcoin-dev" <
bitcoin-dev at lists.linuxfoundation.org> wrote:
> You keep using the word "decentralized" without explaining (and most
> likely, understanding) what it means.

I believe he explained very well what he meant by decentralized, please
stop suggesting he doesn't understand his own thoughts: it is extremely
irritating.

> You say:
>
> > a system without the trust of third parties to process electronic
payments
>
> What does it mean to use a decentralized network instead of a trusted
> third party to process electronic payments? What undesirable actions can
> a trusted third party perform that a decentralized network can not
perform?

For starters, a third party (or a recuded group of miners controlling the
majority of the hashrate) can censor transactions. It doesn't matter how
benevolent that party is: it can be forced to do it by the laws of its
jurisdiction.

If you don't care about this, I suggest you start a new system without
expensive proof of work, you can replace it with block signing (it can
still be multisig). It is already coded, just fork the alpha or the
blocksigning branch in elementsProject (github).
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150901/39e5d2ff/attachment.html>

From chris.dcosta at meek.io  Tue Sep  1 10:16:04 2015
From: chris.dcosta at meek.io (Chris D'Costa)
Date: Tue, 1 Sep 2015 12:16:04 +0200
Subject: [bitcoin-dev] Let's kill Bitcoin Core and allow the green
 shoots of a garden of new implementations to grow from its fertile ashes
In-Reply-To: <CALqxMTFKDmQnFZimJPttyDdyOHbc_ffs-vV7XDwwJLLu=UPVfA@mail.gmail.com>
References: <602b978abcedd92fbed85f305d9d7bfe@cock.li>
	<55E4B8C9.5030606@openbitcoinprivacyproject.org>
	<e786da226b8e9cfaad335454b299ffd5@cock.li>
	<CAJfRnm4kwHkBLUUOmfzViUwsdAf3LYSTruvHw9+-RbgxSMHLRg@mail.gmail.com>
	<5A3D7824-F1E3-421B-A32A-0EF21DD215BD@gmx.com>
	<55E4E7AA.6010905@sky-ip.org>
	<CC252814-9AF6-4A28-926E-EE83C517E440@gmx.com>
	<CALqxMTFKDmQnFZimJPttyDdyOHbc_ffs-vV7XDwwJLLu=UPVfA@mail.gmail.com>
Message-ID: <CAC0TF=mL1RpN5Gt75mYrVppe4gqUaK9VTHFR9uZq8N5FXv-nTQ@mail.gmail.com>

I think the "Kill King Bitcoin - Long Live the King" call is somewhat
inevitable, and we should expect this to happen from time-to-time, now that
the cat is out of the bag.

However, I fully agree with Adam that livenet is probably not the place to
play this game, and I'm also not convinced that testnet is either.

I often wondered if there is any appetite for a no-holds-barred, anything
goes, bitcoin fork that would allow for the kind of valuable
experimentation that Peter R is suggesting? This is a different concept
than an alt-coin because it would be undoubtedly unstable until consensus
is reached - and that is the whole idea. It hopefully would inform future
decisions about what gets rolled into Core. One problem I see with doing
this, is the lack of incentive.

Chris

On 1 September 2015 at 10:42, Adam Back via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> Peter this seems to be a not well thought through course of action,
> fun though it maybe informally or philosophically or to tweak various
> peoples sensibilities.
>
> Bitcoin is a consensus system that does not work if there are
> incompatible versions of consensus code competing on the network.
> This is why work is underway on libconsensus so we can see diversity
> of implementation without the risk of incompatibility arising by
> software defect.  It has proven quite hard to match independent
> consensus implementations bit for bit against an adaptive adversary
> looking for inconsistencies in interpretation.
>
> In terms of protocol updates it is more constructive therefore that
> people with a technical interest analyse and validate others proposals
> via testing, or make their own proposals so that we can arrive at a
> well validated upgrade mechanism that everyone upgrades to in a
> coordinated fashion.
>
> Previous intentional upgrades to bitcoin have been
> backwards-compatible (via soft-fork which can be secured reasonably
> using a miner vote trigger and temporary SPV security for those who
> not yet upgraded) but the current topic of a throughput increase is
> non-backwards-compatible (via a hard-fork), and the way to minimise
> risk of such an upgrade is for everyone to try to upgrade well in
> advance of an agreed upgrade schedule, and to be all upgrading to the
> *same* consensus rule change.
>
> Encouraging nodes or miners to "vote" by running a range of different
> consensus rules isnt really constructive I feel - it alarms people who
> understand the risks, sets things on a path that have to be fixed
> while in flight by obvious implication, and isnt collaborative - so it
> risks being a politicising suggestion on what should be a purely
> technical topic of choosing the best approach, where it is best to
> strive to keep things non-emotive and professional and technically
> focussed.  Such calls are offending the technical sensibilities of
> people who understand the risks.
>
> Anyway lets try to keep things constructive and focus on analysing
> proposals.
>
> Adam
>
> On 31 August 2015 at 19:16, Peter R via bitcoin-dev
> <bitcoin-dev at lists.linuxfoundation.org> wrote:
> > I agree, s7r, that Bitcoin Core represents the most stable code base.  To
> > create multiple implementations, other groups would fork Bitcoin Core
> > similar to what Bitcoin XT did.  We could have:
> >
> > - Bitcoin-A (XT)
> > - Bitcoin-B (Blockstream)
> > - Bitcoin-C (promoting BIP100)
> > - Bitcoin-D
> > - etc.
> >
> > Innovation from any development group would be freely integrated by any
> > other development group, if desired.  Of course, each group would have a
> > very strong incentive to remain fork-wise compatible with the other
> > implementations.
> >
> > In fact, this just gave me a great idea!  Since Wladimir has stated that
> he
> > will not integrate a forking change into Core without Core Dev
> consensus, I
> > suggest we work together to never reach consensus with Bitcoin Core.
> This
> > will provide impetus for new implementations to fork from Core (like XT
> did)
> > and implement whatever scaling solution they deem best.  The users will
> then
> > select the winning solution simply based on the code they choose to run.
> > The other implementations will then rush to make compatible changes in
> order
> > to keep their dwindling user bases.
> >
> > This is the decentralized spirit of Bitcoin in action.  Creative
> > destruction.  Consensus formed simply by the code that gets run.
> >
> > Let's kill Bitcoin Core and allow the green shoots of a garden of new
> > implementations to grow from its fertile ashes.
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150901/8d5ffbbb/attachment.html>

From monarch at cock.li  Tue Sep  1 11:11:12 2015
From: monarch at cock.li (Monarch)
Date: Tue, 01 Sep 2015 11:11:12 +0000
Subject: [bitcoin-dev] Your Gmaxwell exchange
In-Reply-To: <5A3D7824-F1E3-421B-A32A-0EF21DD215BD@gmx.com>
References: <602b978abcedd92fbed85f305d9d7bfe@cock.li>
	<55E4B8C9.5030606@openbitcoinprivacyproject.org>
	<e786da226b8e9cfaad335454b299ffd5@cock.li>
	<CAJfRnm4kwHkBLUUOmfzViUwsdAf3LYSTruvHw9+-RbgxSMHLRg@mail.gmail.com>
	<5A3D7824-F1E3-421B-A32A-0EF21DD215BD@gmx.com>
Message-ID: <5b7c2ba6e785e59595c2ee9a4596f097@cock.li>

On 2015-08-31 23:32, Peter R wrote:
> On 2015-08-31, at 2:24 PM, Allen Piscitello via bitcoin-dev
> <bitcoin-dev at lists.linuxfoundation.org> wrote:
> 

> It is my opinion, then, that we should support multiple
> implementations of the Bitcoin protocol, working to reduce the
> network's dependency on Core.
> 

That would be incredibly foolish given the history, where even heroic
attempts at making consensus compatible re-implementations have ended
rather poorly.  bitcoin-ruby and btcd have collectively had numerous
consensus failures, some only recently found by fuzzing the scripting
environment.  There are more failures than publicly disclosed, and
almost any failure can be leveraged to split the network and steal
money.   Ethereum attempted to create four clients, written to a
defined specification, and even with all the money in the world has
managed to have numerous consensus failures due to misunderstanding or
implementation.


> I agree. What about decentralization in development? Gavin recently
> said that he wants to "get to the point where there will be multiple
> robust implementations of the core protocol."
> 

Gavin clearly hasn't kept up with the ridiculousness of that task.

From monarch at cock.li  Tue Sep  1 11:20:37 2015
From: monarch at cock.li (Monarch)
Date: Tue, 01 Sep 2015 11:20:37 +0000
Subject: [bitcoin-dev] Let's kill Bitcoin Core and allow the green
 shoots of a garden of new implementations to grow from its fertile ashes
In-Reply-To: <CAC0TF=mL1RpN5Gt75mYrVppe4gqUaK9VTHFR9uZq8N5FXv-nTQ@mail.gmail.com>
References: <602b978abcedd92fbed85f305d9d7bfe@cock.li>
	<55E4B8C9.5030606@openbitcoinprivacyproject.org>
	<e786da226b8e9cfaad335454b299ffd5@cock.li>
	<CAJfRnm4kwHkBLUUOmfzViUwsdAf3LYSTruvHw9+-RbgxSMHLRg@mail.gmail.com>
	<5A3D7824-F1E3-421B-A32A-0EF21DD215BD@gmx.com>
	<55E4E7AA.6010905@sky-ip.org>
	<CC252814-9AF6-4A28-926E-EE83C517E440@gmx.com>
	<CALqxMTFKDmQnFZimJPttyDdyOHbc_ffs-vV7XDwwJLLu=UPVfA@mail.gmail.com>
	<CAC0TF=mL1RpN5Gt75mYrVppe4gqUaK9VTHFR9uZq8N5FXv-nTQ@mail.gmail.com>
Message-ID: <e5cb7483234a5b402a47e74fd673906d@cock.li>

On 2015-09-01 10:16, Chris D'Costa via bitcoin-dev wrote:
> However, I fully agree with Adam that livenet is probably not the
> place to play this game, and I'm also not convinced that testnet is
> either.?
> 
> I often wondered if there is any appetite for a no-holds-barred,
> anything goes, bitcoin fork that would allow for the kind of valuable
> experimentation that Peter R is suggesting? This is a different
> concept than an alt-coin because it would be undoubtedly unstable
> until consensus is reached - and that is the whole idea. It hopefully
> would inform future decisions about what gets rolled into Core. One
> problem I see with doing this, is the lack of incentive.
> 

You are describing the essence of sidechains.  You might want to check
out Elements Alpha, which has some outrageous experimental changes to
transaction structure.  It's a technical Bitcoin sandbox which doesn't
require launching yet another altcoin.

From monarch at cock.li  Tue Sep  1 11:44:04 2015
From: monarch at cock.li (Monarch)
Date: Tue, 01 Sep 2015 11:44:04 +0000
Subject: [bitcoin-dev] Your Gmaxwell exchange
In-Reply-To: <55E4E7AA.6010905@sky-ip.org>
References: <602b978abcedd92fbed85f305d9d7bfe@cock.li>
	<55E4B8C9.5030606@openbitcoinprivacyproject.org>
	<e786da226b8e9cfaad335454b299ffd5@cock.li>
	<CAJfRnm4kwHkBLUUOmfzViUwsdAf3LYSTruvHw9+-RbgxSMHLRg@mail.gmail.com>
	<5A3D7824-F1E3-421B-A32A-0EF21DD215BD@gmx.com>
	<55E4E7AA.6010905@sky-ip.org>
Message-ID: <4ed6151886030c9daddcb8fd2dca5d76@cock.li>

On 2015-08-31 23:47, s7r via bitcoin-dev wrote:
> The problem is there is no other implementation out there which comes
> near the quality of the code in Bitcoin Core. I am actually eager to
> try other implementations as well, but something serious, because
> Bitcoin itself is a payment protocol not something to play with.
> 

I don't think code quality is of a particular problem in alternate
implementations, the difficulty of getting it right is simply
astronomical.  If you attempt to re-implement just transaction
signature verification you run into edge cases remarkably quickly,
most use of Bitcoin today barely scratches the surface of what was
added to Bitcoin for future expansion.

https://jonasnick.github.io/blog/2015/05/09/fuzzing-bitcoin-consensus/



From laanwj at gmail.com  Tue Sep  1 12:24:37 2015
From: laanwj at gmail.com (Wladimir)
Date: Tue, 1 Sep 2015 14:24:37 +0200
Subject: [bitcoin-dev] Let's kill Bitcoin Core and allow the green
 shoots of a garden of new implementations to grow from its fertile ashes
In-Reply-To: <CC252814-9AF6-4A28-926E-EE83C517E440@gmx.com>
References: <602b978abcedd92fbed85f305d9d7bfe@cock.li>
	<55E4B8C9.5030606@openbitcoinprivacyproject.org>
	<e786da226b8e9cfaad335454b299ffd5@cock.li>
	<CAJfRnm4kwHkBLUUOmfzViUwsdAf3LYSTruvHw9+-RbgxSMHLRg@mail.gmail.com>
	<5A3D7824-F1E3-421B-A32A-0EF21DD215BD@gmx.com>
	<55E4E7AA.6010905@sky-ip.org>
	<CC252814-9AF6-4A28-926E-EE83C517E440@gmx.com>
Message-ID: <CA+s+GJCuFSUDvQ8bBRAtQT2mMPmLoRD9wXuiJZW3A4jKaVXVhQ@mail.gmail.com>

On Tue, Sep 1, 2015 at 4:16 AM, Peter R via bitcoin-dev
<bitcoin-dev at lists.linuxfoundation.org> wrote:
> I agree, s7r, that Bitcoin Core represents the most stable code base.  To

What about the people that like stability, that appreciate bitcoin as
a "digital gold", and like all this 'excitement' like a hole in the
head?

Instead of creating hardforks and all the drama around it I'd
encourage to do your experiments on sidechains, or altcoins. Forks of
the bitcoin chain wil needlessly confuse matters, especially if they
all gain their share of users. In theory an hardfork would be no
different than an altcoin with shared history, but without proper
measures "crosstalk" between forks of the same chain can make for a
messy separation.
(A fact often ignored, because those proposing forks assume they can
just run over people on the other side of the fork by sake of their
popularity)

Also please don't confuse alternative implementations of the node
software - btcd, obelisk, etc - that try to implement the consensus
rules as faithfully as they can, or even use bitcoin core's consensus
code directly - with deliberate rule changes as done in bitcoin XT.
The former can cause an accidental fork (which will probably be
repaired), the latter exist to split off their chain.

Wladimir

From ahmedzsales18 at gmail.com  Tue Sep  1 13:30:17 2015
From: ahmedzsales18 at gmail.com (Ahmed Zsales)
Date: Tue, 1 Sep 2015 14:30:17 +0100
Subject: [bitcoin-dev]  Open Block Chain Licence, BIP[xxxx] Draft
Message-ID: <CADr=VrRT2tdN0jjkZ7HjjeyqonrHG=j+uh8m1L2nhew7c1gnng@mail.gmail.com>

Hello,

We believe the network requires a block chain licence to supplement the
existing MIT Licence which we believe only covers the core reference client
software.

Replacing or amending the existing MIT Licence is beyond the scope of this
draft BIP.

Rationale and details of our draft BIP for discussion and evaluation are
here:

https://drive.google.com/file/d/0BwEbhrQ4ELzBMVFxajNZa2hzMTg/view?usp=sharing

Regards,

Ahmed
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150901/06343931/attachment.html>

From milly at bitcoins.info  Tue Sep  1 13:43:20 2015
From: milly at bitcoins.info (Milly Bitcoin)
Date: Tue, 1 Sep 2015 09:43:20 -0400
Subject: [bitcoin-dev] Open Block Chain Licence, BIP[xxxx] Draft
In-Reply-To: <CADr=VrRT2tdN0jjkZ7HjjeyqonrHG=j+uh8m1L2nhew7c1gnng@mail.gmail.com>
References: <CADr=VrRT2tdN0jjkZ7HjjeyqonrHG=j+uh8m1L2nhew7c1gnng@mail.gmail.com>
Message-ID: <55E5AB78.3080901@bitcoins.info>

> We believe the network requires a block chain licence to supplement the
> existing MIT Licence which we believe only covers the core reference
> client software.

I suggest talking to a lawyer first.  To have a license you need an 
entity that holds the license.  What entity actually holds the MIT 
license?  There is a copyright notice on the Core Client that claims the 
license is held by the developers.  It that the main core developers, 
anyone who has ever submitted an accepted pull request, or something 
else?  I don't think there is any kind of valid license on the software 
to begin with.  Just posting a notice does not make it true just like 
all those "terms of use" web notices are generally not valid contracts 
(see "click wrap vs. "browser wrap" discussions).

What entity would actually hold a "blockchain license" and who decides 
who would hold the license?  If the developers decide there should be a 
license that means the developers own the blockchain and I don't think 
that is consistent with what is going on here.

Russ



From kanzure at gmail.com  Tue Sep  1 13:50:17 2015
From: kanzure at gmail.com (Bryan Bishop)
Date: Tue, 1 Sep 2015 08:50:17 -0500
Subject: [bitcoin-dev] Open Block Chain Licence, BIP[xxxx] Draft
In-Reply-To: <CADr=VrRT2tdN0jjkZ7HjjeyqonrHG=j+uh8m1L2nhew7c1gnng@mail.gmail.com>
References: <CADr=VrRT2tdN0jjkZ7HjjeyqonrHG=j+uh8m1L2nhew7c1gnng@mail.gmail.com>
Message-ID: <CABaSBawtAn5YCSngPcawVkUcGKNvMJvCTbwrQzZFywdv=zptMQ@mail.gmail.com>

On Tue, Sep 1, 2015 at 8:30 AM, Ahmed Zsales via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> We believe the network requires a block chain licence


Here is a previous discussion of this topic (2012):
https://bitcointalk.org/index.php?topic=117663.0

- Bryan
http://heybryan.org/
1 512 203 0507
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150901/5e6b4926/attachment.html>

From marcopon at gmail.com  Tue Sep  1 14:33:59 2015
From: marcopon at gmail.com (Marco Pontello)
Date: Tue, 1 Sep 2015 16:33:59 +0200
Subject: [bitcoin-dev] RFC - BIP: URI scheme for Blockchain exploration
In-Reply-To: <mrsscu$9oo$1@ger.gmane.org>
References: <CAE0pACLMcMzHkA=vEx+fiEmq7FA1bXDc4t_hQ+955=r=62V5=g@mail.gmail.com>
	<CF21152C-15FA-421C-B369-A9A7DB59865F@ricmoo.com>
	<mrsscu$9oo$1@ger.gmane.org>
Message-ID: <CAE0pACJJ00xgUTujPygj7gEfTrHO2bgi4hZLpSZp9irT_GLnsg@mail.gmail.com>

That surely make sense.
A URI like that perfectly readable, unambiguous and simple enough.

And nice to see a Wallet developer showing interest for this! :)

On Sat, Aug 29, 2015 at 8:07 PM, Andreas Schildbach via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> On 08/29/2015 06:31 PM, Richard Moore via bitcoin-dev wrote:
>
> > I like the idea of having a standard for this, that all explorers (and
> > even core, eventually) would understand.
> >
> > I would recommend 2 changes though. First, using a real URI scheme,
> > blockchain:// so that we can just use normal URL parsing libraries. The
> > bitcoin: thing leads to additional code to mutate it into a proper URI
> > before passing it to URL parsing. And I think it would be fine to
> > include the type looking up. For example:
> >
> >
> blockchain://blockhash/00000000000000001003e880d500968d51157f210c632e08a652af3576600198
> >
> blockchain://txid/3b95a766d7a99b87188d6875c8484cb2b310b78459b7816d4dfc3f0f7e04281a
> > blockchain://block/189000
> > blockchain://address/1RicMooMWxqKczuRCa5D2dnJaUEn9ZJyn
>
> Good thinking! It might make sense to look at the existing de-facto
> standard (e.g. blockexplorer.com, blockchain.info):
>
> /tx/ for transactions
> /block/ for blocks, supports both hash or height
> /address/ for address
>
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>



-- 
Try the Online TrID File Identifier
http://mark0.net/onlinetrid.aspx
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150901/0b36091b/attachment.html>

From dkbryant at gmail.com  Tue Sep  1 14:44:44 2015
From: dkbryant at gmail.com (Dan Bryant)
Date: Tue, 1 Sep 2015 09:44:44 -0500
Subject: [bitcoin-dev] AT&T has effectively banned Bitcoin nodes by
 closing port 8333 via a hidden firewall in the cable box
In-Reply-To: <55E550DF.80806@riseup.net>
References: <14f864c1631-3abb-a855@webprd-a67.mail.aol.com>
	<55E550DF.80806@riseup.net>
Message-ID: <CAAUFj11p0J9YGwAc93mw62TeqtG3j3G8GbcCg4auSMxYrK5bUw@mail.gmail.com>

Keep in mind... Legal or Not, many ISPs (Comcast for example) prohibit
offering up network services (which a full node would supply) from
your residence.

I checked AT&T's TOS and they have a carve-out on equipment that is scary

http://www.att.com/legal/terms.internetAttTermsOfService.html

>Regardless of whether the equipment used to access your Service (modem, gateway, etc.) is owned by you or AT&T, AT&T reserves the right to manage such equipment for the duration of your Service, and retains exclusive rights to data generated by the equipment. Neither you nor a third party may change, interfere with, or block access to equipment data or settings.

AT&T seams to imply they implicitly have Admin rights to all
"equipment" that connects to their network.  Clearly an overreach that
needs to be clarified, but there it is.

As for Comcast, they simply forbid network "services" that serve
anyone off-premise.

http://www.xfinity.com/Corporate/Customers/Policies/HighSpeedInternetAUP.html

> [MAY NOT] use or run dedicated, stand-alone equipment or servers from the Premises that provide network
content or any other services to anyone outside of your Premises local
area network (?Premises
LAN?), also commonly referred to as public services or servers.
Examples of prohibited
equipment and servers include, but are not limited to, email, web
hosting, file sharing, and proxy
services and servers

Technically, P2P is prohibited in the Comcast TOS, or at least by my
reading.  I realize that Comcast with deny this tooth and nail, but if
they ever want to exercise the prohibition, it is clearly spelled out
in their TOS

My recommendation is to file a complaint with the FCC to bring up your
issue as well as any overreach they spell out in the AUP or TOS.

As for me... I simply subscribed to a VPN.  That gives me both privacy
(to a degree) and flexibility to open or close whatever ports I want.

On Tue, Sep 1, 2015 at 2:16 AM, odinn via bitcoin-dev
<bitcoin-dev at lists.linuxfoundation.org> wrote:
> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA512
>
> Another note on this subject to add to the stuff people have already
> mentioned...
>
> If you have the AT&T landline but don't use AT&T's standard internet /
> tv (what they call Uverse) offering - that is, if you prefer to use
> some local internet provider - you are probably better off (in terms
> of avoiding not only this sort of blockage/censorship but as well,
> potentially getting a better privacy policy that isn't going to be
> like AT&T's long-term data retention).  You can check directly with
> the various local small ISPs to see what their policies are
> specifically on ports and whatnot.
>
> Ideally your ISP should let you:
>
> port forward to SOMEPORTNUMBER for tcp and udp
>
> (above may or may not be helpful for some if you are using
> decentralized markets)
>
> have port 8333 open
>
> (above is for bitcoin of course)
>
> Supposing you have FTTN because you are paying a local ISP for
> internet service, and that local ISP has contracted with AT&T to be
> able to provide service in an area where old-style DSL has been phased
> out, thus your local ISP is essentially providing you AT&T FTTN.
> (FTTN is Fiber to the Node, FTTN-BP is FTTN Bonded Pair).  Even if a
> local ISP has its own privacy policy posted which is different from
> AT&T, everything is subject to AT&T data retention because the FTTN.
> So get yourself a VPN (or set up your own) for your connection. Tor
> will run through the VPN.
>
> General observations - TWC stores your IP and other stuffs for 6
> months or longer.  Same for Comcast.  Verizon retains your stuffs for
> 18 month minimum, probably longer though. Qwest/Century, 1 year.
> Cox, 6 months.  AT&T retains for longer than a year.  This is just
> what they are telling you, the reality is it's probably longer due to
> stuff like this:
> https://www.lawfareblog.com/odni-and-doj-release-last-section-215-collec
> tion-order
>
>
>
>
>
>
>
>
>
> Zach G via bitcoin-dev:
>> I have been struggling to get port 8333 open all year, I gave up
>> and was using blockchain for months despite a strong desire to stay
>> on Bitcoin Core, but now the issue has reached critical mass since
>> I'm using the python Bitcoin server module. I have literally spent
>> my entire day trying to open 8333, I thoroughly made sure it was
>> open on the router and computer and it's still closed. Strangely
>> enough I got it open for 30 seconds once today but something closed
>> it immediately.
>>
>> After hours of phone calls and messaging AT&T finally told me the
>> truth of what was going on, and only because I noticed it myself
>> and demanded an answer. The internet is being routed through a
>> DVR/cable box, and they confirmed the DVR also has a firewall. To
>> make this even more absurd they refused to turn the firewall off
>> because it is their equipment. So effectively they can firewall any
>> port they want even if the customer asks them not to, in the
>> unlikely event the customer figures it out.
>>
>> Perhaps this is the driving force behind the inexplicable and
>> massive decline in Bitcoin nodes. Bitcoin is being censored by the
>> ISPs themselves, and they won't even tell you that. I had to get in
>> touch with headquarters and threaten to rip it out of the wall to
>> get a proper answer.
>>
>>
>>
>> _______________________________________________ bitcoin-dev mailing
>> list bitcoin-dev at lists.linuxfoundation.org
>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>
>
> - --
> http://abis.io ~
> "a protocol concept to enable decentralization
> and expansion of a giving economy, and a new social good"
> https://keybase.io/odinn
> -----BEGIN PGP SIGNATURE-----
>
> iQEcBAEBCgAGBQJV5VDeAAoJEGxwq/inSG8CvkIH/jy4Vo+My3xeBdvFQmxkJWyQ
> U5mv2zWEvBYw71Xy1EDzQY1AhEBmatUU1eu2AbOqXdUR4511FxCNzFmTxy6roEiz
> EehBkvXNbBCbEzLRisjxuQw34OKM+xfieCqE1mzJok2uSdLMMQLcbWL1/k3/OmS5
> 9O9z/wMXqU1Jc19MTK+vF1Lz5ilnRn3hEbTaCN3ivYnYFa0DpBH9r0Y07UcoJ6Wr
> ui/x0sSSuupAGzOkZ75HQ8yeQXckeAu6TB3/jE8QEqNUmAJkmR8eK4ofXZWFrIjy
> mOKeQL4c+jRQnTR8pt+y89g2QIpzFoHaV5T+WvQuC1t8xNOrxLgYFXWgl0dhoYE=
> =UCLC
> -----END PGP SIGNATURE-----
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev

From marcopon at gmail.com  Tue Sep  1 14:49:47 2015
From: marcopon at gmail.com (Marco Pontello)
Date: Tue, 1 Sep 2015 16:49:47 +0200
Subject: [bitcoin-dev] RFC - BIP: URI scheme for Blockchain exploration
In-Reply-To: <CABm2gDpC55dsr4GNAUabgnOeXcNTrgHSAtM7Jqfp0_QUfjXmoQ@mail.gmail.com>
References: <CAE0pACLMcMzHkA=vEx+fiEmq7FA1bXDc4t_hQ+955=r=62V5=g@mail.gmail.com>
	<CF21152C-15FA-421C-B369-A9A7DB59865F@ricmoo.com>
	<CADJgMztaJHDrz0+7KLouwZMCz--Za6-2pitmjjYVHG+nJjrG=Q@mail.gmail.com>
	<2509151.XgrrNGsCxR@crushinator>
	<CABm2gDpC55dsr4GNAUabgnOeXcNTrgHSAtM7Jqfp0_QUfjXmoQ@mail.gmail.com>
Message-ID: <CAE0pAC+32rhWdBL+WbPANy0rd+eh-XsPQy-u3OHUxS0ku7eN-Q@mail.gmail.com>

On Sat, Aug 29, 2015 at 10:10 PM, Jorge Tim?n <
bitcoin-dev at lists.linuxfoundation.org> wrote:

>
> I would really prefer chain=<chainID> over network=<chainPetnameStr>
> By chainID I mean the hash of the genesis block, see
>
> https://github.com/jtimon/bitcoin/commit/3191d5e8e75687a27cf466b7a4c70bdc04809d39
> I'm completely fine with doing that using an optional parameter (for
> backwards compatibility).
>

I see that using the genesis block hash would be the perfectly rigorous way
to do it, but what do you think about the possibility of letting also use
the name constants, as a simple / more relaxed alternative? That would
spare a source lookup just to write a correct reference to a tx, maybe in a
forum or a post.

So a reference to a certain tx could be either:

blockchain://tx/ca26cedeb9cbc94e030891578e0d2b688a28902114f6ad2f24ecd3918f76c17f

blockchain://tx/ca26cedeb9cbc94e030891578e0d2b688a28902114f6ad2f24ecd3918f76c17f?chain=000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f

blockchain://ca26cedeb9cbc94e030891578e0d2b688a28902114f6ad2f24ecd3918f76c17f?chain=main

(or a different element name maybe)

-- 
Try the Online TrID File Identifier
http://mark0.net/onlinetrid.aspx
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150901/68c31b7b/attachment.html>

From marcopon at gmail.com  Tue Sep  1 14:51:52 2015
From: marcopon at gmail.com (Marco Pontello)
Date: Tue, 1 Sep 2015 16:51:52 +0200
Subject: [bitcoin-dev] RFC - BIP: URI scheme for Blockchain exploration
In-Reply-To: <3F757B30-70CA-464F-9879-84C275DB62C7@ricmoo.com>
References: <CAE0pACLMcMzHkA=vEx+fiEmq7FA1bXDc4t_hQ+955=r=62V5=g@mail.gmail.com>
	<CF21152C-15FA-421C-B369-A9A7DB59865F@ricmoo.com>
	<CADJgMztaJHDrz0+7KLouwZMCz--Za6-2pitmjjYVHG+nJjrG=Q@mail.gmail.com>
	<3F757B30-70CA-464F-9879-84C275DB62C7@ricmoo.com>
Message-ID: <CAE0pACJDEHqoLR7=Nyfury-QooLrt_HoaqifE1Ujz_V-2z4_BQ@mail.gmail.com>

On Sat, Aug 29, 2015 at 9:28 PM, Richard Moore <me at ricmoo.com> wrote:

> Yes! Good point, network should be encoded. Not sure I like this format
> yet, but what if it was part of the authority, like block:testnet. Like
> http uses port 80 by default, you could have block by default refer to
> block:mainnet.
>
> Eg.
>
> blockchain://tx:testnet3/3b95a766d7a99b87188d6875c8484cb2b310b78459b7816d4dfc3f0f7e04281a
>
> I will read the RFC over more thoroughly tomorrow to get an idea of what
> types of things make more or less sense.


Like this option too!


-- 
Try the Online TrID File Identifier
http://mark0.net/onlinetrid.aspx
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150901/ff752f04/attachment.html>

From ahmedzsales18 at gmail.com  Tue Sep  1 15:11:27 2015
From: ahmedzsales18 at gmail.com (Ahmed Zsales)
Date: Tue, 1 Sep 2015 16:11:27 +0100
Subject: [bitcoin-dev] Open Block Chain Licence, BIP[xxxx] Draft
In-Reply-To: <CABaSBawtAn5YCSngPcawVkUcGKNvMJvCTbwrQzZFywdv=zptMQ@mail.gmail.com>
References: <CADr=VrRT2tdN0jjkZ7HjjeyqonrHG=j+uh8m1L2nhew7c1gnng@mail.gmail.com>
	<CABaSBawtAn5YCSngPcawVkUcGKNvMJvCTbwrQzZFywdv=zptMQ@mail.gmail.com>
Message-ID: <CADr=VrTQMqqKJJdZJ2tdCixM+nx-W_F+AHqrqrDrmqD+_sLaYA@mail.gmail.com>

Thank you. We hadn't seen that before.  It is an interesting discussion.

We did think about including some references to protections for private
keys while they remained in your control and you could prove as much. In
theory it should be no different to dropping money on the floor. The money
still belongs to you, even if someone else comes along and finds it. The
onus of proof is on you as the owner to demonstrate private keys are yours,
but you also need the goodwill of the person finding the money.

However, this raised a number of issues including whether finding private
keys attached to coins and moving the funds constituted theft, in which
case there are already criminal protections if you are able to track the
coins to an individual. We decided not to include anything specific in the
draft licence to keep it simple, relying instead on the generic definitions
of rights to *private transaction data* of which private keys would come
under.

Regards,

Ahmed



On Tue, Sep 1, 2015 at 2:50 PM, Bryan Bishop <kanzure at gmail.com> wrote:

> On Tue, Sep 1, 2015 at 8:30 AM, Ahmed Zsales via bitcoin-dev <
> bitcoin-dev at lists.linuxfoundation.org> wrote:
>
>> We believe the network requires a block chain licence
>
>
> Here is a previous discussion of this topic (2012):
> https://bitcointalk.org/index.php?topic=117663.0
>
> - Bryan
> http://heybryan.org/
> 1 512 203 0507
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150901/da927d62/attachment.html>

From kristovatlas.lists at gmail.com  Tue Sep  1 15:50:35 2015
From: kristovatlas.lists at gmail.com (Kristov Atlas)
Date: Tue, 1 Sep 2015 11:50:35 -0400
Subject: [bitcoin-dev] push tx fuzzing
Message-ID: <CAGH37S+daPddzwo1bJ0sPs3RfLOE63TPkCrc-X6qhNw7nu6=Xg@mail.gmail.com>

I am interested in finding or writing a fuzzer for push tx APIs. I did not
find one after a brief search. Has anyone found otherwise, or is she in the
process of writing one?

If not, what features would people recommend for a new push tx fuzzer?

Endpoints I would like to test include:

https://live.blockcypher.com/btc-testnet/pushtx/

https://insight.bitpay.com/tx/send

https://blockchain.info/pushtx

https://coinb.in/#broadcast

https://btc.blockr.io/tx/push

https://chain.localbitcoins.com/tx/send


The fuzzer should be able to send random data, invalid characters, etc. but
also fuzz particular aspects of the transaction format such as malformed
P2SH and P2PKH transactions, fields such as lock time, size, # inputs,
version number, vin size, etc. It should also be able to fuzz a variety of
valid and invalid script formats using odd op codes, changing the order of
op codes, etc.


If anyone has recommendations about how such a fuzzer should be structured,
please let me know.


Finally, if you are interested in collaborating, please contact me via
private message.


Thanks!

Kristov
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150901/4cd15068/attachment.html>

From davec at conformal.com  Tue Sep  1 15:59:24 2015
From: davec at conformal.com (Dave Collins)
Date: Tue, 01 Sep 2015 10:59:24 -0500
Subject: [bitcoin-dev] Your Gmaxwell exchange
In-Reply-To: <5b7c2ba6e785e59595c2ee9a4596f097@cock.li>
References: <602b978abcedd92fbed85f305d9d7bfe@cock.li>	<55E4B8C9.5030606@openbitcoinprivacyproject.org>	<e786da226b8e9cfaad335454b299ffd5@cock.li>	<CAJfRnm4kwHkBLUUOmfzViUwsdAf3LYSTruvHw9+-RbgxSMHLRg@mail.gmail.com>	<5A3D7824-F1E3-421B-A32A-0EF21DD215BD@gmx.com>
	<5b7c2ba6e785e59595c2ee9a4596f097@cock.li>
Message-ID: <55E5CB5C.2020405@conformal.com>

I'd be interested to know about these supposed btcd mainnet forks that
have occurred due to a consensus failure since it came out of alpha.
I'll go ahead and save you some research time - there hasn't been one.
I'm not claiming there will never be one as that would be just as
foolish as claiming Bitcoin Core won't have any more either.

As you alluded to, there was a _potential_ instance found due to fuzzing
which prompted a thorough audit of the code base.  It was fixed before
any problems occurred and resulted in improved test coverage in Bitcoin
Core as well.

On the other hand, Bitcoin Core has had actual forks on mainnet during
the same period.  I'm not casting stones at Bitcoin Core here, because
as I've said many times, none of us are perfect.  No matter how careful
everyone is, it is bound to happen from time to time.

Until this community decides to get serious about facing the reality
that an infrastructure built on a single implementation with no real
disaster prevention measures for unintentional incompatibilities between
different versions of that implementation is incredibly fragile, there
will continue to be more unintentional hard forks regardless of the
existence of alternative implementations.

It has not ended poorly by any means.  It has already led to several
improvements such as improved test coverage and more robust and modular
code.


On 9/1/2015 6:11 AM, Monarch via bitcoin-dev wrote:
> That would be incredibly foolish given the history, where even heroic
> attempts at making consensus compatible re-implementations have ended
> rather poorly.  bitcoin-ruby and btcd have collectively had numerous
> consensus failures, some only recently found by fuzzing the scripting
> environment.  There are more failures than publicly disclosed, and
> almost any failure can be leveraged to split the network and steal
> money.   Ethereum attempted to create four clients, written to a
> defined specification, and even with all the money in the world has
> managed to have numerous consensus failures due to misunderstanding or
> implementation.

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 834 bytes
Desc: OpenPGP digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150901/573cb2a5/attachment-0001.sig>

From natanael.l at gmail.com  Tue Sep  1 16:05:50 2015
From: natanael.l at gmail.com (Natanael)
Date: Tue, 1 Sep 2015 18:05:50 +0200
Subject: [bitcoin-dev] Open Block Chain Licence, BIP[xxxx] Draft
In-Reply-To: <CADr=VrRT2tdN0jjkZ7HjjeyqonrHG=j+uh8m1L2nhew7c1gnng@mail.gmail.com>
References: <CADr=VrRT2tdN0jjkZ7HjjeyqonrHG=j+uh8m1L2nhew7c1gnng@mail.gmail.com>
Message-ID: <CAAt2M1_xj2XN4TE2P0JQ-nN0vavjyWkxnhdvobZetdQLoPx8ZQ@mail.gmail.com>

Creative Commons Zero, if anything at all.

It essentially emulates public domain in jurisdictions that do not
officially have a public domain.

- Sent from my tablet
Den 1 sep 2015 15:30 skrev "Ahmed Zsales via bitcoin-dev" <
bitcoin-dev at lists.linuxfoundation.org>:

> Hello,
>
> We believe the network requires a block chain licence to supplement the
> existing MIT Licence which we believe only covers the core reference client
> software.
>
> Replacing or amending the existing MIT Licence is beyond the scope of this
> draft BIP.
>
> Rationale and details of our draft BIP for discussion and evaluation are
> here:
>
>
> https://drive.google.com/file/d/0BwEbhrQ4ELzBMVFxajNZa2hzMTg/view?usp=sharing
>
> Regards,
>
> Ahmed
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150901/2d1ba353/attachment.html>

From danny.thorpe at gmail.com  Tue Sep  1 16:12:42 2015
From: danny.thorpe at gmail.com (Danny Thorpe)
Date: Tue, 1 Sep 2015 09:12:42 -0700
Subject: [bitcoin-dev] RFC - BIP: URI scheme for Blockchain exploration
In-Reply-To: <CABm2gDpC55dsr4GNAUabgnOeXcNTrgHSAtM7Jqfp0_QUfjXmoQ@mail.gmail.com>
References: <CAE0pACLMcMzHkA=vEx+fiEmq7FA1bXDc4t_hQ+955=r=62V5=g@mail.gmail.com>
	<CF21152C-15FA-421C-B369-A9A7DB59865F@ricmoo.com>
	<CADJgMztaJHDrz0+7KLouwZMCz--Za6-2pitmjjYVHG+nJjrG=Q@mail.gmail.com>
	<2509151.XgrrNGsCxR@crushinator>
	<CABm2gDpC55dsr4GNAUabgnOeXcNTrgHSAtM7Jqfp0_QUfjXmoQ@mail.gmail.com>
Message-ID: <CAJN5wHVdneuRv6Vpf4q3d=mqwu2HkNeJwFhoqPHFiQcatt4RSg@mail.gmail.com>

Rather than using an inhumanly long hex string from the genesis hash to
distinguish between mainnet and testnet, why not use the network magic
bytes instead? Much shorter, just as distinct.

I'd still prefer a common network name mapping for the sake of humanity.
Few bitcoin library implementations use the same string names for mainnet
and testnet. This BIP could simply define one string name alias for each
supported network and leave mapping to local lingo to the implementors.

-Danny

On Sat, Aug 29, 2015 at 1:10 PM, Jorge Tim?n <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> On Sat, Aug 29, 2015 at 9:01 PM, Matt Whitlock via bitcoin-dev
> <bitcoin-dev at lists.linuxfoundation.org> wrote:
> > That's still not right, since "mainnet" and "testnet" are not host names.
> >
> > You'd have to do something like:
> >
> >
> blockchain:?network=testnet&txid=3b95a766d7a99b87188d6875c8484cb2b310b78459b7816d4dfc3f0f7e04281a
>
> I would really prefer chain=<chainID> over network=<chainPetnameStr>
> By chainID I mean the hash of the genesis block, see
>
> https://github.com/jtimon/bitcoin/commit/3191d5e8e75687a27cf466b7a4c70bdc04809d39
> I'm completely fine with doing that using an optional parameter (for
> backwards compatibility).
>
> I agree with Andreas Schildbach that respecting the most commonly used
> schemes is desirable.
> So my preference would be:
>
>
> /tx/3b95a766d7a99b87188d6875c8484cb2b310b78459b7816d4dfc3f0f7e04281a?chain=000000000933ea01ad0ee984209779baaec3ced90fa3f408719526f8d77f4943
>
> (a tx in testnet)
>
>
> /block/00000000000000000b0d504d142ac8bdd1a2721d19f423a8146d0d6de882167b?chain=000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f
>
> (a block in bitcoin's mainnet)
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150901/bd5d758c/attachment.html>

From monarch at cock.li  Tue Sep  1 16:51:54 2015
From: monarch at cock.li (Monarch)
Date: Tue, 01 Sep 2015 16:51:54 +0000
Subject: [bitcoin-dev] Your Gmaxwell exchange
In-Reply-To: <55E5CB5C.2020405@conformal.com>
References: "\"<602b978abcedd92fbed85f305d9d7bfe@cock.li>	<55E4B8C9.5030606@openbitcoinprivacyproject.org>	<e786da226b8e9cfaad335454b299ffd5@cock.li>"
	<CAJfRnm4kwHkBLUUOmfzViUwsdAf3LYSTruvHw9+-RbgxSMHLRg@mail.gmail.com>"
	<5A3D7824-F1E3-421B-A32A-0EF21DD215BD@gmx.com>
	<5b7c2ba6e785e59595c2ee9a4596f097@cock.li>
	<55E5CB5C.2020405@conformal.com>
Message-ID: <67820b46cdcb549aac36b9496b19b6b0@cock.li>

On 2015-09-01 15:59, Dave Collins via bitcoin-dev wrote:
> I'd be interested to know about these supposed btcd mainnet forks that
> have occurred due to a consensus failure since it came out of alpha.
> I'll go ahead and save you some research time - there hasn't been one.
> I'm not claiming there will never be one as that would be just as
> foolish as claiming Bitcoin Core won't have any more either.
> 

For the purposes of the conversation this was only brought up to re-
enforce my claim that this is outrageously difficult software
development, irrespective of the quality of the code being produced in
alternate implementations.  Sorry if that came across as an attack
against your software in particular, it wasn't intended.


> On the other hand, Bitcoin Core has had actual forks on mainnet during
> the same period.  I'm not casting stones at Bitcoin Core here, because
> as I've said many times, none of us are perfect.  No matter how careful
> everyone is, it is bound to happen from time to time.
> 

The point I was trying to make is that this is simply a hard
development situation to be working in, we don't know what behavior is
inferred by the use of CPP and even more so OpenSSL (as the DER
encoding consensus failure made abundantly clear).  There's almost
certainly more problems lying around given how generally dusty a lot
of the transaction environment is, it's very easy to get off the
beaten track with Bitcoin script.


From monarch at cock.li  Tue Sep  1 16:59:15 2015
From: monarch at cock.li (Monarch)
Date: Tue, 01 Sep 2015 16:59:15 +0000
Subject: [bitcoin-dev] push tx fuzzing
In-Reply-To: <CAGH37S+daPddzwo1bJ0sPs3RfLOE63TPkCrc-X6qhNw7nu6=Xg@mail.gmail.com>
References: <CAGH37S+daPddzwo1bJ0sPs3RfLOE63TPkCrc-X6qhNw7nu6=Xg@mail.gmail.com>
Message-ID: <e5c1d53a1387dce141d30c9eee6ee2ce@cock.li>

On 2015-09-01 15:50, Kristov Atlas via bitcoin-dev wrote:
> I am interested in finding or writing a fuzzer for push tx APIs. I did
> not find one after a brief search. Has anyone found otherwise, or is
> she in the process of writing one?
> 

https://github.com/jonasnick/bitcoinconsensus_testcases

https://jonasnick.github.io/blog/2015/05/09/fuzzing-bitcoin-consensus/

The only implementations with any significant network presence are
btcd and Bitcoin Core, fuzzing them should be sufficient if these
services are doing validation of transactions using one of the two.
For example two of the ones you have linked are based in Insight,
which uses Bitcoin Core for validation.  If they aren't validating
transactions before broadcast they won't make it more than a single
hop through the P2P the network so they are of minimum concern.


From luke at dashjr.org  Tue Sep  1 17:39:34 2015
From: luke at dashjr.org (Luke Dashjr)
Date: Tue, 1 Sep 2015 17:39:34 +0000
Subject: [bitcoin-dev] Open Block Chain Licence, BIP[xxxx] Draft
In-Reply-To: <CADr=VrRT2tdN0jjkZ7HjjeyqonrHG=j+uh8m1L2nhew7c1gnng@mail.gmail.com>
References: <CADr=VrRT2tdN0jjkZ7HjjeyqonrHG=j+uh8m1L2nhew7c1gnng@mail.gmail.com>
Message-ID: <201509011739.35472.luke@dashjr.org>

On Tuesday, September 01, 2015 1:30:17 PM Ahmed Zsales via bitcoin-dev wrote:
> Rationale and details of our draft BIP for discussion and evaluation are
> here:
> 
> https://drive.google.com/file/d/0BwEbhrQ4ELzBMVFxajNZa2hzMTg/view?usp=shari
> ng

BIPs should be in MediaWiki-compatible markdown format, not PDF.

Thanks,

Luke

From laanwj at gmail.com  Tue Sep  1 18:03:34 2015
From: laanwj at gmail.com (Wladimir J. van der Laan)
Date: Tue, 1 Sep 2015 20:03:34 +0200
Subject: [bitcoin-dev] push tx fuzzing
In-Reply-To: <e5c1d53a1387dce141d30c9eee6ee2ce@cock.li>
References: <CAGH37S+daPddzwo1bJ0sPs3RfLOE63TPkCrc-X6qhNw7nu6=Xg@mail.gmail.com>
	<e5c1d53a1387dce141d30c9eee6ee2ce@cock.li>
Message-ID: <20150901180333.GA3914@amethyst.visucore.com>

On Tue, Sep 01, 2015 at 04:59:15PM +0000, Monarch via bitcoin-dev wrote:

> which uses Bitcoin Core for validation.  If they aren't validating
> transactions before broadcast they won't make it more than a single
> hop through the P2P the network so they are of minimum concern.

blockchain.info had some problems here for a while. They were not using a full validating node underneath:

- Signatures were not verified properly. This resulted in some panic when it looked like (on their site) a massive number of very old coins were being spent.

- They were relaying loose coinbase transactions. This caused them to be instantly banned from nodes they were connected to.

So there's certainly some scope for fun with fuzzing those APIs.

Wladimir


From btcdrak at gmail.com  Tue Sep  1 18:12:13 2015
From: btcdrak at gmail.com (Btc Drak)
Date: Tue, 1 Sep 2015 19:12:13 +0100
Subject: [bitcoin-dev] Open Block Chain Licence, BIP[xxxx] Draft
In-Reply-To: <CADr=VrRT2tdN0jjkZ7HjjeyqonrHG=j+uh8m1L2nhew7c1gnng@mail.gmail.com>
References: <CADr=VrRT2tdN0jjkZ7HjjeyqonrHG=j+uh8m1L2nhew7c1gnng@mail.gmail.com>
Message-ID: <CADJgMztScEsDEy277Jksy2RckbpzeRw6RbQzyVrdkjJSS=hHPA@mail.gmail.com>

Without commenting on your proposal at all, the general problem with
licensing after the fact is you require the permission of every
copyright holder in order to make the change.



On Tue, Sep 1, 2015 at 2:30 PM, Ahmed Zsales via bitcoin-dev
<bitcoin-dev at lists.linuxfoundation.org> wrote:
> Hello,
>
> We believe the network requires a block chain licence to supplement the
> existing MIT Licence which we believe only covers the core reference client
> software.
>
> Replacing or amending the existing MIT Licence is beyond the scope of this
> draft BIP.
>
> Rationale and details of our draft BIP for discussion and evaluation are
> here:
>
> https://drive.google.com/file/d/0BwEbhrQ4ELzBMVFxajNZa2hzMTg/view?usp=sharing
>
> Regards,
>
> Ahmed
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>

From manuelaraoz at gmail.com  Tue Sep  1 18:22:51 2015
From: manuelaraoz at gmail.com (=?UTF-8?Q?Manuel_Ar=C3=A1oz?=)
Date: Tue, 1 Sep 2015 15:22:51 -0300
Subject: [bitcoin-dev] push tx fuzzing
In-Reply-To: <20150901180333.GA3914@amethyst.visucore.com>
References: <CAGH37S+daPddzwo1bJ0sPs3RfLOE63TPkCrc-X6qhNw7nu6=Xg@mail.gmail.com>
	<e5c1d53a1387dce141d30c9eee6ee2ce@cock.li>
	<20150901180333.GA3914@amethyst.visucore.com>
Message-ID: <CABQSq2RgdrFyHw36k96FDL+uFCRuEedTLWUrXM+VtrYY_Ng8fg@mail.gmail.com>

Interesting project, Kristov. Two more ideas for fuzzing bitcoin txs:
- random bit flipping from valid txs
- random tx script generators:
  - from a grammar
  - from a stochastic grammar
  - from a random sequence of opcodes

I've made some really small experiments on fuzzing in the past [1][2], and
I'm interested in helping out.

Best,
Manuel

[1] https://github.com/maraoz/json-fuzzer
[2] https://github.com/maraoz/bitcoin-fuzzer

On Tue, Sep 1, 2015 at 3:03 PM, Wladimir J. van der Laan via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> On Tue, Sep 01, 2015 at 04:59:15PM +0000, Monarch via bitcoin-dev wrote:
>
> > which uses Bitcoin Core for validation.  If they aren't validating
> > transactions before broadcast they won't make it more than a single
> > hop through the P2P the network so they are of minimum concern.
>
> blockchain.info had some problems here for a while. They were not using a
> full validating node underneath:
>
> - Signatures were not verified properly. This resulted in some panic when
> it looked like (on their site) a massive number of very old coins were
> being spent.
>
> - They were relaying loose coinbase transactions. This caused them to be
> instantly banned from nodes they were connected to.
>
> So there's certainly some scope for fun with fuzzing those APIs.
>
> Wladimir
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150901/95e7353c/attachment.html>

From eric at voskuil.org  Tue Sep  1 18:37:18 2015
From: eric at voskuil.org (Eric Voskuil)
Date: Tue, 01 Sep 2015 11:37:18 -0700
Subject: [bitcoin-dev] Your Gmaxwell exchange
In-Reply-To: <67820b46cdcb549aac36b9496b19b6b0@cock.li>
References: "\"<602b978abcedd92fbed85f305d9d7bfe@cock.li>	<55E4B8C9.5030606@openbitcoinprivacyproject.org>	<e786da226b8e9cfaad335454b299ffd5@cock.li>"	<CAJfRnm4kwHkBLUUOmfzViUwsdAf3LYSTruvHw9+-RbgxSMHLRg@mail.gmail.com>"	<5A3D7824-F1E3-421B-A32A-0EF21DD215BD@gmx.com>	<5b7c2ba6e785e59595c2ee9a4596f097@cock.li>	<55E5CB5C.2020405@conformal.com>
	<67820b46cdcb549aac36b9496b19b6b0@cock.li>
Message-ID: <55E5F05E.9060409@voskuil.org>

On 09/01/2015 09:51 AM, Monarch via bitcoin-dev wrote:
> On 2015-09-01 15:59, Dave Collins via bitcoin-dev wrote:
>> I'd be interested to know about these supposed btcd mainnet forks that
>> have occurred due to a consensus failure since it came out of alpha.
>> I'll go ahead and save you some research time - there hasn't been one.
>> I'm not claiming there will never be one as that would be just as
>> foolish as claiming Bitcoin Core won't have any more either.
>
> For the purposes of the conversation this was only brought up to re-
> enforce my claim that this is outrageously difficult software
> development, irrespective of the quality of the code being produced in
> alternate implementations.  Sorry if that came across as an attack
> against your software in particular, it wasn't intended.

Whether intended or otherwise this is an attack on the idea of
decentralized bitcoin development. The option to fork or roll your own
is open source, not decentralization. Decentralization requires
*actually doing so*. One step down that path, even for a fork, is a
major commitment.

Common consensus check code is now available in several bitcoin
implementations. The claim that this is outrageously difficult is
misleading. It's just engineering work that needs to get done if Bitcoin
is to survive.

>> On the other hand, Bitcoin Core has had actual forks on mainnet during
>> the same period.  I'm not casting stones at Bitcoin Core here, because
>> as I've said many times, none of us are perfect.  No matter how careful
>> everyone is, it is bound to happen from time to time.
> 
> The point I was trying to make is that this is simply a hard
> development situation to be working in, we don't know what behavior is
> inferred by the use of CPP and even more so OpenSSL (as the DER
> encoding consensus failure made abundantly clear).  There's almost
> certainly more problems lying around given how generally dusty a lot
> of the transaction environment is, it's very easy to get off the
> beaten track with Bitcoin script.

These are issues that affect the satoshi client as much as other
implementations, and therefore don't support your premise.

e

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 473 bytes
Desc: OpenPGP digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150901/2be9abde/attachment.sig>

From ahmedzsales18 at gmail.com  Tue Sep  1 19:36:59 2015
From: ahmedzsales18 at gmail.com (Ahmed Zsales)
Date: Tue, 1 Sep 2015 20:36:59 +0100
Subject: [bitcoin-dev] Open Block Chain Licence, BIP[xxxx] Draft
In-Reply-To: <CADJgMztScEsDEy277Jksy2RckbpzeRw6RbQzyVrdkjJSS=hHPA@mail.gmail.com>
References: <CADr=VrRT2tdN0jjkZ7HjjeyqonrHG=j+uh8m1L2nhew7c1gnng@mail.gmail.com>
	<CADJgMztScEsDEy277Jksy2RckbpzeRw6RbQzyVrdkjJSS=hHPA@mail.gmail.com>
Message-ID: <CADr=VrQ42Gqv7fUFVpaburw0=08SNXb0TUCBWd3arREbpdfCkA@mail.gmail.com>

That is a very good point.

We considered whether data existing before a licence change would be
covered, but we hadn't factored the potential need for gaining permissions
for a change to be considered effective.

We have proposed that miners be the main beneficiaries of licensing and
there is a consideration on whether they should vote to adopt the new
terms. While not the preferred route, that would overcome any issues to
what is an otherwise honest 'error and omission.' There doesn't seem to be
anyone who could claim to have suffered any economic losses so this may not
be an issue. It merits further investigation.

The block chain is in perpetual change, so the sooner a change is agreed
upon, if at all, the more data it will cover without any reservations. At
any rate, we believe the changes would be considered effective on a
retrospective basis.


On Tue, Sep 1, 2015 at 7:12 PM, Btc Drak <btcdrak at gmail.com> wrote:

> Without commenting on your proposal at all, the general problem with
> licensing after the fact is you require the permission of every
> copyright holder in order to make the change.
>
>
>
> On Tue, Sep 1, 2015 at 2:30 PM, Ahmed Zsales via bitcoin-dev
> <bitcoin-dev at lists.linuxfoundation.org> wrote:
> > Hello,
> >
> > We believe the network requires a block chain licence to supplement the
> > existing MIT Licence which we believe only covers the core reference
> client
> > software.
> >
> > Replacing or amending the existing MIT Licence is beyond the scope of
> this
> > draft BIP.
> >
> > Rationale and details of our draft BIP for discussion and evaluation are
> > here:
> >
> >
> https://drive.google.com/file/d/0BwEbhrQ4ELzBMVFxajNZa2hzMTg/view?usp=sharing
> >
> > Regards,
> >
> > Ahmed
> >
> > _______________________________________________
> > bitcoin-dev mailing list
> > bitcoin-dev at lists.linuxfoundation.org
> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> >
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150901/0cccdded/attachment.html>

From monarch at cock.li  Tue Sep  1 20:08:37 2015
From: monarch at cock.li (Monarch)
Date: Tue, 01 Sep 2015 20:08:37 +0000
Subject: [bitcoin-dev] Your Gmaxwell exchange
In-Reply-To: <55E5F05E.9060409@voskuil.org>
References: "\"\\\"\\\\\\\"<602b978abcedd92fbed85f305d9d7bfe@cock.li>	<55E4B8C9.5030606@openbitcoinprivacyproject.org>	<e786da226b8e9cfaad335454b299ffd5@cock.li>\\\"	<CAJfRnm4kwHkBLUUOmfzViUwsdAf3LYSTruvHw9+-RbgxSMHLRg@mail.gmail.com>\\\"	<5A3D7824-F1E3-421B-A32A-0EF21DD215BD@gmx.com>	<5b7c2ba6e785e59595c2ee9a4596f097@cock.li>	<55E5CB5C.2020405@conformal.com>"
	<67820b46cdcb549aac36b9496b19b6b0@cock.li>"
	<55E5F05E.9060409@voskuil.org>
Message-ID: <ec50844ebf2109364e87af0ab1a623af@cock.li>

On 2015-09-01 18:37, Eric Voskuil wrote:
> Whether intended or otherwise this is an attack on the idea of
> decentralized bitcoin development. The option to fork or roll your own
> is open source, not decentralization. Decentralization requires
> *actually doing so*. One step down that path, even for a fork, is a
> major commitment.
> 
> Common consensus check code is now available in several bitcoin
> implementations. The claim that this is outrageously difficult is
> misleading. It's just engineering work that needs to get done if 
> Bitcoin
> is to survive.
> 

There's no requirement for there to be multiple interpretations of the
consensus code, this is why libbitcoinconsensus exists.  Why do you
think Bitcoins survival is predicated on reimplementation?


> These are issues that affect the satoshi client as much as other
> implementations, and therefore don't support your premise.
> 

I'm aware that these problems apply to Bitcoin Core.

From laanwj at gmail.com  Tue Sep  1 20:29:39 2015
From: laanwj at gmail.com (Wladimir J. van der Laan)
Date: Tue, 1 Sep 2015 22:29:39 +0200
Subject: [bitcoin-dev] Your Gmaxwell exchange
In-Reply-To: <55E4A32F.9080908@openbitcoinprivacyproject.org>
References: <CAEgR2PFB3h_8fr=d8HegRSD0XdooimhFKtLR4vKr2QXv+EwBfQ@mail.gmail.com>
	<AD284610-4F40-445C-A074-CC94EDFFCBA8@gmx.com>
	<CAAS2fgRs5NVM2nHKNXbgMJa51tDq-6ZBc6XfaScyP45UPWTW_g@mail.gmail.com>
	<5CC48639-11D0-4682-BF82-443286C8E58D@gmx.com>
	<CAAS2fgShF=2vtPrKtXmdA454s_xpJbxSB0SFBsstniHB8WtGzQ@mail.gmail.com>
	<CAKuKjyUpJOMdDCjGmo1tYc6sA3r69VAXpvzhMJ7EZSHtb9C9Sw@mail.gmail.com>
	<55E4A32F.9080908@openbitcoinprivacyproject.org>
Message-ID: <20150901202938.GA4286@amethyst.visucore.com>

On Mon, Aug 31, 2015 at 01:55:43PM -0500, Justus Ranvier via bitcoin-dev wrote:

> * They should own their bitcoins, meaning that they retain exclusive
> control over their balances. Even more precisely, the network must
> always honour the conditions of the scripts associated with unspent outputs.
> 
> * Their fraction of the Bitcoin ledger must not be diluted.
> 
> * When they decide to spend their coins, they will be able to do so
> without requiring permission from a third party.

All of these properties are contingent on the system being decentralized. Asking random end-users if they care if bitcoin is decentralized is like asking random people if they care if their drinking water is dihydrogen monoxide.

Both miner and full node over-centralization could result in

- Permission requirements to submit transactions (miners can be pressured to adhere to KYC rules)

- Transactions being reversed without consent (reorgs by the miner cartel)

- ...even dilution of their fraction of their ledger (if changing the rules becomes normal, I'm sure some smoothtalker could come up with arguments to raise the 21M cap. Another option would be to force the remaining people that are able to run full nodes to comply)

Bitcoin's properties don't come from magic. All its attractive properties are derived from decentralization, on spreading responsibility as widely globally as possible. Without that, it's just an inefficient ledger database.

Wladimir

From bip at mattwhitlock.name  Tue Sep  1 21:16:37 2015
From: bip at mattwhitlock.name (Matt Whitlock)
Date: Tue, 01 Sep 2015 17:16:37 -0400
Subject: [bitcoin-dev] RFC - BIP: URI scheme for Blockchain exploration
In-Reply-To: <CAE0pAC+32rhWdBL+WbPANy0rd+eh-XsPQy-u3OHUxS0ku7eN-Q@mail.gmail.com>
References: <CAE0pACLMcMzHkA=vEx+fiEmq7FA1bXDc4t_hQ+955=r=62V5=g@mail.gmail.com>
	<CABm2gDpC55dsr4GNAUabgnOeXcNTrgHSAtM7Jqfp0_QUfjXmoQ@mail.gmail.com>
	<CAE0pAC+32rhWdBL+WbPANy0rd+eh-XsPQy-u3OHUxS0ku7eN-Q@mail.gmail.com>
Message-ID: <5546682.RnG4VcateO@crushinator>

Isn't this all backward? The "authority" component of the URL should identify the chain, and the "path" component should identify the particular block, tx, or address in that chain.

So instead of:

blockchain://tx/ca26cedeb9cbc94e030891578e0d2b688a28902114f6ad2f24ecd3918f76c17f?chain=000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f

It should be:

blockchain://000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f/tx/ca26cedeb9cbc94e030891578e0d2b688a28902114f6ad2f24ecd3918f76c17f

And I would agree with allowing well-known chains to register a name, to be used as an alternative to the literal, hash syntax:

blockchain://bitcoin/tx/ca26cedeb9cbc94e030891578e0d2b688a28902114f6ad2f24ecd3918f76c17f


On Tuesday, 1 September 2015, at 4:49 pm, Marco Pontello wrote:
> On Sat, Aug 29, 2015 at 10:10 PM, Jorge Tim?n <
> bitcoin-dev at lists.linuxfoundation.org> wrote:
> 
> >
> > I would really prefer chain=<chainID> over network=<chainPetnameStr>
> > By chainID I mean the hash of the genesis block, see
> >
> > https://github.com/jtimon/bitcoin/commit/3191d5e8e75687a27cf466b7a4c70bdc04809d39
> > I'm completely fine with doing that using an optional parameter (for
> > backwards compatibility).
> >
> 
> I see that using the genesis block hash would be the perfectly rigorous way
> to do it, but what do you think about the possibility of letting also use
> the name constants, as a simple / more relaxed alternative? That would
> spare a source lookup just to write a correct reference to a tx, maybe in a
> forum or a post.
> 
> So a reference to a certain tx could be either:
> 
> blockchain://tx/ca26cedeb9cbc94e030891578e0d2b688a28902114f6ad2f24ecd3918f76c17f
> 
> blockchain://tx/ca26cedeb9cbc94e030891578e0d2b688a28902114f6ad2f24ecd3918f76c17f?chain=000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f
> 
> blockchain://ca26cedeb9cbc94e030891578e0d2b688a28902114f6ad2f24ecd3918f76c17f?chain=main
> 
> (or a different element name maybe)
> 
> -- 
> Try the Online TrID File Identifier
> http://mark0.net/onlinetrid.aspx

From eordano at gmail.com  Tue Sep  1 21:25:59 2015
From: eordano at gmail.com (Esteban Ordano)
Date: Tue, 1 Sep 2015 18:25:59 -0300
Subject: [bitcoin-dev] RFC - BIP: URI scheme for Blockchain exploration
In-Reply-To: <5546682.RnG4VcateO@crushinator>
References: <CAE0pACLMcMzHkA=vEx+fiEmq7FA1bXDc4t_hQ+955=r=62V5=g@mail.gmail.com>
	<CABm2gDpC55dsr4GNAUabgnOeXcNTrgHSAtM7Jqfp0_QUfjXmoQ@mail.gmail.com>
	<CAE0pAC+32rhWdBL+WbPANy0rd+eh-XsPQy-u3OHUxS0ku7eN-Q@mail.gmail.com>
	<5546682.RnG4VcateO@crushinator>
Message-ID: <CALp1fU=yF0EJHq1heLx5jSFCQfzL3YsH+gZgWmcWjjOTE6K_-w@mail.gmail.com>

Slightly relevant: standardization of http queries to blockchain explorers.
It's not just about URLs, it's about the query body and response.
https://github.com/common-blockchain

On Tue, Sep 1, 2015 at 6:16 PM, Matt Whitlock via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> Isn't this all backward? The "authority" component of the URL should
> identify the chain, and the "path" component should identify the particular
> block, tx, or address in that chain.
>
> So instead of:
>
>
> blockchain://tx/ca26cedeb9cbc94e030891578e0d2b688a28902114f6ad2f24ecd3918f76c17f?chain=000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f
>
> It should be:
>
>
> blockchain://000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f/tx/ca26cedeb9cbc94e030891578e0d2b688a28902114f6ad2f24ecd3918f76c17f
>
> And I would agree with allowing well-known chains to register a name, to
> be used as an alternative to the literal, hash syntax:
>
>
> blockchain://bitcoin/tx/ca26cedeb9cbc94e030891578e0d2b688a28902114f6ad2f24ecd3918f76c17f
>
>
> On Tuesday, 1 September 2015, at 4:49 pm, Marco Pontello wrote:
> > On Sat, Aug 29, 2015 at 10:10 PM, Jorge Tim?n <
> > bitcoin-dev at lists.linuxfoundation.org> wrote:
> >
> > >
> > > I would really prefer chain=<chainID> over network=<chainPetnameStr>
> > > By chainID I mean the hash of the genesis block, see
> > >
> > >
> https://github.com/jtimon/bitcoin/commit/3191d5e8e75687a27cf466b7a4c70bdc04809d39
> > > I'm completely fine with doing that using an optional parameter (for
> > > backwards compatibility).
> > >
> >
> > I see that using the genesis block hash would be the perfectly rigorous
> way
> > to do it, but what do you think about the possibility of letting also use
> > the name constants, as a simple / more relaxed alternative? That would
> > spare a source lookup just to write a correct reference to a tx, maybe
> in a
> > forum or a post.
> >
> > So a reference to a certain tx could be either:
> >
> >
> blockchain://tx/ca26cedeb9cbc94e030891578e0d2b688a28902114f6ad2f24ecd3918f76c17f
> >
> >
> blockchain://tx/ca26cedeb9cbc94e030891578e0d2b688a28902114f6ad2f24ecd3918f76c17f?chain=000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f
> >
> >
> blockchain://ca26cedeb9cbc94e030891578e0d2b688a28902114f6ad2f24ecd3918f76c17f?chain=main
> >
> > (or a different element name maybe)
> >
> > --
> > Try the Online TrID File Identifier
> > http://mark0.net/onlinetrid.aspx
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150901/d3ce3853/attachment.html>

From milly at bitcoins.info  Tue Sep  1 21:36:36 2015
From: milly at bitcoins.info (Milly Bitcoin)
Date: Tue, 1 Sep 2015 17:36:36 -0400
Subject: [bitcoin-dev] Open Block Chain Licence, BIP[xxxx] Draft
In-Reply-To: <CADr=VrQ42Gqv7fUFVpaburw0=08SNXb0TUCBWd3arREbpdfCkA@mail.gmail.com>
References: <CADr=VrRT2tdN0jjkZ7HjjeyqonrHG=j+uh8m1L2nhew7c1gnng@mail.gmail.com>
	<CADJgMztScEsDEy277Jksy2RckbpzeRw6RbQzyVrdkjJSS=hHPA@mail.gmail.com>
	<CADr=VrQ42Gqv7fUFVpaburw0=08SNXb0TUCBWd3arREbpdfCkA@mail.gmail.com>
Message-ID: <55E61A64.2030609@bitcoins.info>

> We considered whether data existing before a licence change would be
> covered, but we hadn't factored the potential need for gaining
> permissions for a change to be considered effective.
>
> We have proposed that miners be the main beneficiaries of licensing and
> there is a consideration on whether they should vote to adopt the new
> terms. While not the preferred route, that would overcome any issues to
> what is an otherwise honest 'error and omission.' There doesn't seem to
> be anyone who could claim to have suffered any economic losses so this
> may not be an issue. It merits further investigation.

Like I said, you need to talk to a lawyer.  What exactly would be the 
purpose of any license?  How can someone be a "beneficiary" to a license 
when you can't even explain who holds the license to begin with?  How do 
they "benefit?"  I don't see any purpose to putting a license on the 
Core software or the blockchain because nobody can explain who actually 
holds the license and there is no mechanism to enforce any license and 
there is no revenue to be shared.  The whole discussion makes no sense.

Russ



From marcopon at gmail.com  Tue Sep  1 21:38:58 2015
From: marcopon at gmail.com (Marco Pontello)
Date: Tue, 1 Sep 2015 23:38:58 +0200
Subject: [bitcoin-dev] RFC - BIP: URI scheme for Blockchain exploration
In-Reply-To: <5546682.RnG4VcateO@crushinator>
References: <CAE0pACLMcMzHkA=vEx+fiEmq7FA1bXDc4t_hQ+955=r=62V5=g@mail.gmail.com>
	<CABm2gDpC55dsr4GNAUabgnOeXcNTrgHSAtM7Jqfp0_QUfjXmoQ@mail.gmail.com>
	<CAE0pAC+32rhWdBL+WbPANy0rd+eh-XsPQy-u3OHUxS0ku7eN-Q@mail.gmail.com>
	<5546682.RnG4VcateO@crushinator>
Message-ID: <CAE0pACLQZC9Tuggwerah4LruVTfFpbOnvo0oKj4EYU8yJ9VXuQ@mail.gmail.com>

I see your point. But I personally like that the chain part could be
optional, given that the vast majority of the references in the end will be
to Bitcoin main net.

On Tue, Sep 1, 2015 at 11:16 PM, Matt Whitlock <bip at mattwhitlock.name>
wrote:

> Isn't this all backward? The "authority" component of the URL should
> identify the chain, and the "path" component should identify the particular
> block, tx, or address in that chain.
>
> So instead of:
>
>
> blockchain://tx/ca26cedeb9cbc94e030891578e0d2b688a28902114f6ad2f24ecd3918f76c17f?chain=000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f
>
> It should be:
>
>
> blockchain://000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f/tx/ca26cedeb9cbc94e030891578e0d2b688a28902114f6ad2f24ecd3918f76c17f
>
> And I would agree with allowing well-known chains to register a name, to
> be used as an alternative to the literal, hash syntax:
>
>
> blockchain://bitcoin/tx/ca26cedeb9cbc94e030891578e0d2b688a28902114f6ad2f24ecd3918f76c17f
>
>
> On Tuesday, 1 September 2015, at 4:49 pm, Marco Pontello wrote:
> > On Sat, Aug 29, 2015 at 10:10 PM, Jorge Tim?n <
> > bitcoin-dev at lists.linuxfoundation.org> wrote:
> >
> > >
> > > I would really prefer chain=<chainID> over network=<chainPetnameStr>
> > > By chainID I mean the hash of the genesis block, see
> > >
> > >
> https://github.com/jtimon/bitcoin/commit/3191d5e8e75687a27cf466b7a4c70bdc04809d39
> > > I'm completely fine with doing that using an optional parameter (for
> > > backwards compatibility).
> > >
> >
> > I see that using the genesis block hash would be the perfectly rigorous
> way
> > to do it, but what do you think about the possibility of letting also use
> > the name constants, as a simple / more relaxed alternative? That would
> > spare a source lookup just to write a correct reference to a tx, maybe
> in a
> > forum or a post.
> >
> > So a reference to a certain tx could be either:
> >
> >
> blockchain://tx/ca26cedeb9cbc94e030891578e0d2b688a28902114f6ad2f24ecd3918f76c17f
> >
> >
> blockchain://tx/ca26cedeb9cbc94e030891578e0d2b688a28902114f6ad2f24ecd3918f76c17f?chain=000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f
> >
> >
> blockchain://ca26cedeb9cbc94e030891578e0d2b688a28902114f6ad2f24ecd3918f76c17f?chain=main
> >
> > (or a different element name maybe)
> >
> > --
> > Try the Online TrID File Identifier
> > http://mark0.net/onlinetrid.aspx
>



-- 
Try the Online TrID File Identifier
http://mark0.net/onlinetrid.aspx
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150901/fa329e12/attachment.html>

From bip at mattwhitlock.name  Tue Sep  1 21:42:09 2015
From: bip at mattwhitlock.name (Matt Whitlock)
Date: Tue, 01 Sep 2015 17:42:09 -0400
Subject: [bitcoin-dev] RFC - BIP: URI scheme for Blockchain exploration
In-Reply-To: <CAE0pACLQZC9Tuggwerah4LruVTfFpbOnvo0oKj4EYU8yJ9VXuQ@mail.gmail.com>
References: <CAE0pACLMcMzHkA=vEx+fiEmq7FA1bXDc4t_hQ+955=r=62V5=g@mail.gmail.com>
	<5546682.RnG4VcateO@crushinator>
	<CAE0pACLQZC9Tuggwerah4LruVTfFpbOnvo0oKj4EYU8yJ9VXuQ@mail.gmail.com>
Message-ID: <1842396.ZYjkpCDfSt@crushinator>

The authority part in a URI is optional.

blockchain:/tx/ca26cedeb9cbc94e030891578e0d2b688a28902114f6ad2f24ecd3918f76c17f

Notice the lack of a double-slash.


On Tuesday, 1 September 2015, at 11:38 pm, Marco Pontello wrote:
> I see your point. But I personally like that the chain part could be
> optional, given that the vast majority of the references in the end will be
> to Bitcoin main net.
> 
> On Tue, Sep 1, 2015 at 11:16 PM, Matt Whitlock <bip at mattwhitlock.name>
> wrote:
> 
> > Isn't this all backward? The "authority" component of the URL should
> > identify the chain, and the "path" component should identify the particular
> > block, tx, or address in that chain.
> >
> > So instead of:
> >
> >
> > blockchain://tx/ca26cedeb9cbc94e030891578e0d2b688a28902114f6ad2f24ecd3918f76c17f?chain=000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f
> >
> > It should be:
> >
> >
> > blockchain://000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f/tx/ca26cedeb9cbc94e030891578e0d2b688a28902114f6ad2f24ecd3918f76c17f
> >
> > And I would agree with allowing well-known chains to register a name, to
> > be used as an alternative to the literal, hash syntax:
> >
> >
> > blockchain://bitcoin/tx/ca26cedeb9cbc94e030891578e0d2b688a28902114f6ad2f24ecd3918f76c17f
> >
> >
> > On Tuesday, 1 September 2015, at 4:49 pm, Marco Pontello wrote:
> > > On Sat, Aug 29, 2015 at 10:10 PM, Jorge Tim?n <
> > > bitcoin-dev at lists.linuxfoundation.org> wrote:
> > >
> > > >
> > > > I would really prefer chain=<chainID> over network=<chainPetnameStr>
> > > > By chainID I mean the hash of the genesis block, see
> > > >
> > > >
> > https://github.com/jtimon/bitcoin/commit/3191d5e8e75687a27cf466b7a4c70bdc04809d39
> > > > I'm completely fine with doing that using an optional parameter (for
> > > > backwards compatibility).
> > > >
> > >
> > > I see that using the genesis block hash would be the perfectly rigorous
> > way
> > > to do it, but what do you think about the possibility of letting also use
> > > the name constants, as a simple / more relaxed alternative? That would
> > > spare a source lookup just to write a correct reference to a tx, maybe
> > in a
> > > forum or a post.
> > >
> > > So a reference to a certain tx could be either:
> > >
> > >
> > blockchain://tx/ca26cedeb9cbc94e030891578e0d2b688a28902114f6ad2f24ecd3918f76c17f
> > >
> > >
> > blockchain://tx/ca26cedeb9cbc94e030891578e0d2b688a28902114f6ad2f24ecd3918f76c17f?chain=000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f
> > >
> > >
> > blockchain://ca26cedeb9cbc94e030891578e0d2b688a28902114f6ad2f24ecd3918f76c17f?chain=main
> > >
> > > (or a different element name maybe)
> > >
> > > --
> > > Try the Online TrID File Identifier
> > > http://mark0.net/onlinetrid.aspx
> >
> 
> 
> 
> -- 
> Try the Online TrID File Identifier
> http://mark0.net/onlinetrid.aspx

From marcopon at gmail.com  Tue Sep  1 21:43:39 2015
From: marcopon at gmail.com (Marco Pontello)
Date: Tue, 1 Sep 2015 23:43:39 +0200
Subject: [bitcoin-dev] RFC - BIP: URI scheme for Blockchain exploration
In-Reply-To: <1842396.ZYjkpCDfSt@crushinator>
References: <CAE0pACLMcMzHkA=vEx+fiEmq7FA1bXDc4t_hQ+955=r=62V5=g@mail.gmail.com>
	<5546682.RnG4VcateO@crushinator>
	<CAE0pACLQZC9Tuggwerah4LruVTfFpbOnvo0oKj4EYU8yJ9VXuQ@mail.gmail.com>
	<1842396.ZYjkpCDfSt@crushinator>
Message-ID: <CAE0pACJqdCVLbz5UNCSqO11YCMV97ejoBAC6PRXFz=mFJQH6rA@mail.gmail.com>

Oh, my bad! Right, sounds pretty good to me then.

On Tue, Sep 1, 2015 at 11:42 PM, Matt Whitlock <bip at mattwhitlock.name>
wrote:

> The authority part in a URI is optional.
>
>
> blockchain:/tx/ca26cedeb9cbc94e030891578e0d2b688a28902114f6ad2f24ecd3918f76c17f
>
> Notice the lack of a double-slash.
>
>
> On Tuesday, 1 September 2015, at 11:38 pm, Marco Pontello wrote:
> > I see your point. But I personally like that the chain part could be
> > optional, given that the vast majority of the references in the end will
> be
> > to Bitcoin main net.
> >
> > On Tue, Sep 1, 2015 at 11:16 PM, Matt Whitlock <bip at mattwhitlock.name>
> > wrote:
> >
> > > Isn't this all backward? The "authority" component of the URL should
> > > identify the chain, and the "path" component should identify the
> particular
> > > block, tx, or address in that chain.
> > >
> > > So instead of:
> > >
> > >
> > >
> blockchain://tx/ca26cedeb9cbc94e030891578e0d2b688a28902114f6ad2f24ecd3918f76c17f?chain=000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f
> > >
> > > It should be:
> > >
> > >
> > >
> blockchain://000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f/tx/ca26cedeb9cbc94e030891578e0d2b688a28902114f6ad2f24ecd3918f76c17f
> > >
> > > And I would agree with allowing well-known chains to register a name,
> to
> > > be used as an alternative to the literal, hash syntax:
> > >
> > >
> > >
> blockchain://bitcoin/tx/ca26cedeb9cbc94e030891578e0d2b688a28902114f6ad2f24ecd3918f76c17f
> > >
> > >
> > > On Tuesday, 1 September 2015, at 4:49 pm, Marco Pontello wrote:
> > > > On Sat, Aug 29, 2015 at 10:10 PM, Jorge Tim?n <
> > > > bitcoin-dev at lists.linuxfoundation.org> wrote:
> > > >
> > > > >
> > > > > I would really prefer chain=<chainID> over
> network=<chainPetnameStr>
> > > > > By chainID I mean the hash of the genesis block, see
> > > > >
> > > > >
> > >
> https://github.com/jtimon/bitcoin/commit/3191d5e8e75687a27cf466b7a4c70bdc04809d39
> > > > > I'm completely fine with doing that using an optional parameter
> (for
> > > > > backwards compatibility).
> > > > >
> > > >
> > > > I see that using the genesis block hash would be the perfectly
> rigorous
> > > way
> > > > to do it, but what do you think about the possibility of letting
> also use
> > > > the name constants, as a simple / more relaxed alternative? That
> would
> > > > spare a source lookup just to write a correct reference to a tx,
> maybe
> > > in a
> > > > forum or a post.
> > > >
> > > > So a reference to a certain tx could be either:
> > > >
> > > >
> > >
> blockchain://tx/ca26cedeb9cbc94e030891578e0d2b688a28902114f6ad2f24ecd3918f76c17f
> > > >
> > > >
> > >
> blockchain://tx/ca26cedeb9cbc94e030891578e0d2b688a28902114f6ad2f24ecd3918f76c17f?chain=000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f
> > > >
> > > >
> > >
> blockchain://ca26cedeb9cbc94e030891578e0d2b688a28902114f6ad2f24ecd3918f76c17f?chain=main
> > > >
> > > > (or a different element name maybe)
> > > >
> > > > --
> > > > Try the Online TrID File Identifier
> > > > http://mark0.net/onlinetrid.aspx
> > >
> >
> >
> >
> > --
> > Try the Online TrID File Identifier
> > http://mark0.net/onlinetrid.aspx
>



-- 
Try the Online TrID File Identifier
http://mark0.net/onlinetrid.aspx
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150901/1e897ea9/attachment.html>

From laanwj at gmail.com  Tue Sep  1 21:51:25 2015
From: laanwj at gmail.com (Wladimir J. van der Laan)
Date: Tue, 1 Sep 2015 23:51:25 +0200
Subject: [bitcoin-dev] Open Block Chain Licence, BIP[xxxx] Draft
In-Reply-To: <CADr=VrRT2tdN0jjkZ7HjjeyqonrHG=j+uh8m1L2nhew7c1gnng@mail.gmail.com>
References: <CADr=VrRT2tdN0jjkZ7HjjeyqonrHG=j+uh8m1L2nhew7c1gnng@mail.gmail.com>
Message-ID: <20150901215124.GA4870@amethyst.visucore.com>

On Tue, Sep 01, 2015 at 02:30:17PM +0100, Ahmed Zsales via bitcoin-dev wrote:
> Hello,
> 
> We believe the network requires a block chain licence to supplement the
> existing MIT Licence which we believe only covers the core reference client
> software.

As long as it's an open system, one can't require a specific license for everything added to the chain.

You could of course make the BIP advisory, but I'm not sure what that would help. You still wouldn't have any certainty what license the contents of block #XXXX would be under.

Wladimir

From ahmedzsales18 at gmail.com  Tue Sep  1 22:02:36 2015
From: ahmedzsales18 at gmail.com (Ahmed Zsales)
Date: Tue, 1 Sep 2015 23:02:36 +0100
Subject: [bitcoin-dev] Open Block Chain Licence, BIP[xxxx] Draft
In-Reply-To: <55E61A64.2030609@bitcoins.info>
References: <CADr=VrRT2tdN0jjkZ7HjjeyqonrHG=j+uh8m1L2nhew7c1gnng@mail.gmail.com>
	<CADJgMztScEsDEy277Jksy2RckbpzeRw6RbQzyVrdkjJSS=hHPA@mail.gmail.com>
	<CADr=VrQ42Gqv7fUFVpaburw0=08SNXb0TUCBWd3arREbpdfCkA@mail.gmail.com>
	<55E61A64.2030609@bitcoins.info>
Message-ID: <CADr=VrQeQ2=Htcen-oJrJWWhf5aQ8-cjYK28ic1UWNFWMf2nDQ@mail.gmail.com>

Russ,

The general points and questions you have raised are covered in the draft
BIP:

https://drive.google.com/file/d/0BwEbhrQ4ELzBMVFxajNZa2hzMTg/view?usp=sharing

Regards,

Ahmed

On Tue, Sep 1, 2015 at 10:36 PM, Milly Bitcoin via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> We considered whether data existing before a licence change would be
>> covered, but we hadn't factored the potential need for gaining
>> permissions for a change to be considered effective.
>>
>> We have proposed that miners be the main beneficiaries of licensing and
>> there is a consideration on whether they should vote to adopt the new
>> terms. While not the preferred route, that would overcome any issues to
>> what is an otherwise honest 'error and omission.' There doesn't seem to
>> be anyone who could claim to have suffered any economic losses so this
>> may not be an issue. It merits further investigation.
>>
>
> Like I said, you need to talk to a lawyer.  What exactly would be the
> purpose of any license?  How can someone be a "beneficiary" to a license
> when you can't even explain who holds the license to begin with?  How do
> they "benefit?"  I don't see any purpose to putting a license on the Core
> software or the blockchain because nobody can explain who actually holds
> the license and there is no mechanism to enforce any license and there is
> no revenue to be shared.  The whole discussion makes no sense.
>
> Russ
>
>
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150901/4ffe6be7/attachment.html>

From btcdrak at gmail.com  Tue Sep  1 22:02:52 2015
From: btcdrak at gmail.com (Btc Drak)
Date: Tue, 1 Sep 2015 23:02:52 +0100
Subject: [bitcoin-dev] Open Block Chain Licence, BIP[xxxx] Draft
In-Reply-To: <CADr=VrQ42Gqv7fUFVpaburw0=08SNXb0TUCBWd3arREbpdfCkA@mail.gmail.com>
References: <CADr=VrRT2tdN0jjkZ7HjjeyqonrHG=j+uh8m1L2nhew7c1gnng@mail.gmail.com>
	<CADJgMztScEsDEy277Jksy2RckbpzeRw6RbQzyVrdkjJSS=hHPA@mail.gmail.com>
	<CADr=VrQ42Gqv7fUFVpaburw0=08SNXb0TUCBWd3arREbpdfCkA@mail.gmail.com>
Message-ID: <CADJgMzvBCiHJo++zrZtA4XuMnNd8D8fHEiS4E2OfoKm4j8sY1w@mail.gmail.com>

I think it gets worse. Who are the copyright owners (if this actually
applies). You've got people publishing transaction messages, you've
got miners reproducing them and publishing blocks. Who are all the
parties involved? Then to take pedantry to the next level, does a
miner have permission to republish messages? How do you know? What if
the messages are reproducing others copyright/licensed material? It's
not possible to license someone else's work. There are plenty rabbit
holes to go down with this train of thought.

On Tue, Sep 1, 2015 at 8:36 PM, Ahmed Zsales via bitcoin-dev
<bitcoin-dev at lists.linuxfoundation.org> wrote:
> That is a very good point.
>
> We considered whether data existing before a licence change would be
> covered, but we hadn't factored the potential need for gaining permissions
> for a change to be considered effective.
>
> We have proposed that miners be the main beneficiaries of licensing and
> there is a consideration on whether they should vote to adopt the new terms.
> While not the preferred route, that would overcome any issues to what is an
> otherwise honest 'error and omission.' There doesn't seem to be anyone who
> could claim to have suffered any economic losses so this may not be an
> issue. It merits further investigation.
>
> The block chain is in perpetual change, so the sooner a change is agreed
> upon, if at all, the more data it will cover without any reservations. At
> any rate, we believe the changes would be considered effective on a
> retrospective basis.
>
>
> On Tue, Sep 1, 2015 at 7:12 PM, Btc Drak <btcdrak at gmail.com> wrote:
>>
>> Without commenting on your proposal at all, the general problem with
>> licensing after the fact is you require the permission of every
>> copyright holder in order to make the change.
>>
>>
>>
>> On Tue, Sep 1, 2015 at 2:30 PM, Ahmed Zsales via bitcoin-dev
>> <bitcoin-dev at lists.linuxfoundation.org> wrote:
>> > Hello,
>> >
>> > We believe the network requires a block chain licence to supplement the
>> > existing MIT Licence which we believe only covers the core reference
>> > client
>> > software.
>> >
>> > Replacing or amending the existing MIT Licence is beyond the scope of
>> > this
>> > draft BIP.
>> >
>> > Rationale and details of our draft BIP for discussion and evaluation are
>> > here:
>> >
>> >
>> > https://drive.google.com/file/d/0BwEbhrQ4ELzBMVFxajNZa2hzMTg/view?usp=sharing
>> >
>> > Regards,
>> >
>> > Ahmed
>> >
>> > _______________________________________________
>> > bitcoin-dev mailing list
>> > bitcoin-dev at lists.linuxfoundation.org
>> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>> >
>
>
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>

From s7r at sky-ip.org  Tue Sep  1 22:06:35 2015
From: s7r at sky-ip.org (s7r)
Date: Wed, 2 Sep 2015 01:06:35 +0300
Subject: [bitcoin-dev] Let's kill Bitcoin Core and allow the green
 shoots of a garden of new implementations to grow from its fertile ashes
In-Reply-To: <CC252814-9AF6-4A28-926E-EE83C517E440@gmx.com>
References: <602b978abcedd92fbed85f305d9d7bfe@cock.li>
	<55E4B8C9.5030606@openbitcoinprivacyproject.org>
	<e786da226b8e9cfaad335454b299ffd5@cock.li>
	<CAJfRnm4kwHkBLUUOmfzViUwsdAf3LYSTruvHw9+-RbgxSMHLRg@mail.gmail.com>
	<5A3D7824-F1E3-421B-A32A-0EF21DD215BD@gmx.com>
	<55E4E7AA.6010905@sky-ip.org>
	<CC252814-9AF6-4A28-926E-EE83C517E440@gmx.com>
Message-ID: <55E6216B.8080803@sky-ip.org>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256

That would be very wrong and cause a lot of problems and 'political
chaos' without solving at least one (technical) problem in exchange.

Bitcoin Core is a good quality code. It is open source and free.
Anyone can contribute and submit small changes, improvements.
Controversial changes are not easily merged not because the
maintainers do not want, but because they represent a threat to the
entire ecosystem, one way or the other. We have to very carefully
balance the gains and the risks. If we try to never reach a consensus
on purpose, this will only cause instability, and a possible result
could be that we will end up having many more weaker implementations
running in the network, decreasing the security overall and for everyone.

While I do agree with some of your points of view and I am happy to
see you advocate for 'more decentralization', please let me point you
in a better direction (I think): there is a much bigger problem than >
~90% of the full nodes running Bitcoin Core software - it is
*centralized mining (e.g. a lot of hashing power behind a single full
mining node)*.

On 9/1/2015 5:16 AM, Peter R wrote:
> I agree, s7r, that Bitcoin Core represents the most stable code
> base. To create multiple implementations, other groups would fork
> Bitcoin Core similar to what Bitcoin XT did.  We could have:
> 
> - Bitcoin-A (XT) - Bitcoin-B (Blockstream) - Bitcoin-C (promoting
> BIP100) - Bitcoin-D - etc.
> 
> Innovation from any development group would be freely integrated by
> any other development group, if desired.  Of course, each group
> would have a very strong incentive to remain fork-wise compatible
> with the other implementations.
> 
> In fact, this just gave me a great idea!  Since Wladimir has stated
> that he will not integrate a forking change into Core without Core
> Dev consensus, *I suggest we work together to never reach consensus
> with Bitcoin Core.  *This will provide impetus for new
> implementations to fork from Core (like XT did) and implement
> whatever scaling solution they deem best.  The users will then
> select the winning solution simply based on the code they choose to
> run.  The other implementations will then rush to make compatible
> changes in order to keep their dwindling user bases.
> 
> This is the decentralized spirit of Bitcoin in action.  Creative 
> destruction.  Consensus formed simply by the code that gets run.
> 
> *Let's kill Bitcoin Core and allow the green shoots of a garden of 
> new implementations to grow from its fertile ashes.  *
> 
> Sincerely, Peter R
> 
> 
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2.0.22 (MingW32)

iQEcBAEBCAAGBQJV5iFqAAoJEIN/pSyBJlsRMvIH/RiE8BhlXPbNOQW01HBJTBOD
3H4bgaZoXuxSq2B1F4zKa/FvKJKtq7BGR3hLEj5tascqZTE2YsksRqmEednFNvbL
XOliCjees6nI/oz/aYFuz9rFoKH4cxA7bJmbvieqGSOqDt7rtClaO2JzBycilngS
F5pVGjKlprprTn4XUS8R40rfYVFbYyxaMnWBOnkgEpEAbtEvNRcASSW4HQoxuGRL
6E8mzp8f23zAv6ENxKEfQoIf5SBBfYf8v2xV+YY9JcFjwh4MAQ7zFazsChh83D42
eI01jfuh58f0DS6qGmjb++N+a/mbgmQhIC4yV4iRZKiIHp9o2xKlSv4NyEJIHlM=
=JnYI
-----END PGP SIGNATURE-----

From ahmedzsales18 at gmail.com  Tue Sep  1 22:11:56 2015
From: ahmedzsales18 at gmail.com (Ahmed Zsales)
Date: Tue, 1 Sep 2015 23:11:56 +0100
Subject: [bitcoin-dev] Open Block Chain Licence, BIP[xxxx] Draft
In-Reply-To: <CADJgMzvBCiHJo++zrZtA4XuMnNd8D8fHEiS4E2OfoKm4j8sY1w@mail.gmail.com>
References: <CADr=VrRT2tdN0jjkZ7HjjeyqonrHG=j+uh8m1L2nhew7c1gnng@mail.gmail.com>
	<CADJgMztScEsDEy277Jksy2RckbpzeRw6RbQzyVrdkjJSS=hHPA@mail.gmail.com>
	<CADr=VrQ42Gqv7fUFVpaburw0=08SNXb0TUCBWd3arREbpdfCkA@mail.gmail.com>
	<CADJgMzvBCiHJo++zrZtA4XuMnNd8D8fHEiS4E2OfoKm4j8sY1w@mail.gmail.com>
Message-ID: <CADr=VrTAUdfOOYzY8b7OGWphzcwTbJAE7M860ZajmGt1tVpzLA@mail.gmail.com>

To avoid repetition, we have actually covered the general points and
questions you have raised in the draft BIP, which includes a draft licence
to assist discussions:

https://drive.google.com/file/d/0BwEbhrQ4ELzBMVFxajNZa2hzMTg/view?usp=sharing

Regards,

Ahmed

On Tue, Sep 1, 2015 at 11:02 PM, Btc Drak <btcdrak at gmail.com> wrote:

> I think it gets worse. Who are the copyright owners (if this actually
> applies). You've got people publishing transaction messages, you've
> got miners reproducing them and publishing blocks. Who are all the
> parties involved? Then to take pedantry to the next level, does a
> miner have permission to republish messages? How do you know? What if
> the messages are reproducing others copyright/licensed material? It's
> not possible to license someone else's work. There are plenty rabbit
> holes to go down with this train of thought.
>
> On Tue, Sep 1, 2015 at 8:36 PM, Ahmed Zsales via bitcoin-dev
> <bitcoin-dev at lists.linuxfoundation.org> wrote:
> > That is a very good point.
> >
> > We considered whether data existing before a licence change would be
> > covered, but we hadn't factored the potential need for gaining
> permissions
> > for a change to be considered effective.
> >
> > We have proposed that miners be the main beneficiaries of licensing and
> > there is a consideration on whether they should vote to adopt the new
> terms.
> > While not the preferred route, that would overcome any issues to what is
> an
> > otherwise honest 'error and omission.' There doesn't seem to be anyone
> who
> > could claim to have suffered any economic losses so this may not be an
> > issue. It merits further investigation.
> >
> > The block chain is in perpetual change, so the sooner a change is agreed
> > upon, if at all, the more data it will cover without any reservations. At
> > any rate, we believe the changes would be considered effective on a
> > retrospective basis.
> >
> >
> > On Tue, Sep 1, 2015 at 7:12 PM, Btc Drak <btcdrak at gmail.com> wrote:
> >>
> >> Without commenting on your proposal at all, the general problem with
> >> licensing after the fact is you require the permission of every
> >> copyright holder in order to make the change.
> >>
> >>
> >>
> >> On Tue, Sep 1, 2015 at 2:30 PM, Ahmed Zsales via bitcoin-dev
> >> <bitcoin-dev at lists.linuxfoundation.org> wrote:
> >> > Hello,
> >> >
> >> > We believe the network requires a block chain licence to supplement
> the
> >> > existing MIT Licence which we believe only covers the core reference
> >> > client
> >> > software.
> >> >
> >> > Replacing or amending the existing MIT Licence is beyond the scope of
> >> > this
> >> > draft BIP.
> >> >
> >> > Rationale and details of our draft BIP for discussion and evaluation
> are
> >> > here:
> >> >
> >> >
> >> >
> https://drive.google.com/file/d/0BwEbhrQ4ELzBMVFxajNZa2hzMTg/view?usp=sharing
> >> >
> >> > Regards,
> >> >
> >> > Ahmed
> >> >
> >> > _______________________________________________
> >> > bitcoin-dev mailing list
> >> > bitcoin-dev at lists.linuxfoundation.org
> >> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> >> >
> >
> >
> >
> > _______________________________________________
> > bitcoin-dev mailing list
> > bitcoin-dev at lists.linuxfoundation.org
> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> >
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150901/605b71cf/attachment.html>

From natanael.l at gmail.com  Tue Sep  1 22:20:59 2015
From: natanael.l at gmail.com (Natanael)
Date: Wed, 2 Sep 2015 00:20:59 +0200
Subject: [bitcoin-dev] Open Block Chain Licence, BIP[xxxx] Draft
In-Reply-To: <CADJgMzvBCiHJo++zrZtA4XuMnNd8D8fHEiS4E2OfoKm4j8sY1w@mail.gmail.com>
References: <CADr=VrRT2tdN0jjkZ7HjjeyqonrHG=j+uh8m1L2nhew7c1gnng@mail.gmail.com>
	<CADJgMztScEsDEy277Jksy2RckbpzeRw6RbQzyVrdkjJSS=hHPA@mail.gmail.com>
	<CADr=VrQ42Gqv7fUFVpaburw0=08SNXb0TUCBWd3arREbpdfCkA@mail.gmail.com>
	<CADJgMzvBCiHJo++zrZtA4XuMnNd8D8fHEiS4E2OfoKm4j8sY1w@mail.gmail.com>
Message-ID: <CAAt2M1_qSs9UJ+sqjnvvmx7X29THW1jOFF4DjDbfzLLb+zSRTg@mail.gmail.com>

Den 2 sep 2015 00:03 skrev "Btc Drak via bitcoin-dev" <
bitcoin-dev at lists.linuxfoundation.org>:
>
> I think it gets worse. Who are the copyright owners (if this actually
> applies). You've got people publishing transaction messages, you've
> got miners reproducing them and publishing blocks. Who are all the
> parties involved? Then to take pedantry to the next level, does a
> miner have permission to republish messages? How do you know? What if
> the messages are reproducing others copyright/licensed material? It's
> not possible to license someone else's work. There are plenty rabbit
> holes to go down with this train of thought.

Worse yet - transaction malleability creates derative works with multiple
copyright holders (the original one, plus the author of the modification).
Is that even legal to do? What to do if a miner unknowingly accepts an
illegally modified transaction in a block? And can he who modified it ALSO
sue anybody replicating the block for infringement?

Better just put everything in public domain, or the closest thing to it you
can get. Copyright in the blockchain is essentially the DVDCSS illegal
prime mess all over again, but in a P2P network.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150902/9dcf77bc/attachment.html>

From ahmedzsales18 at gmail.com  Tue Sep  1 22:28:28 2015
From: ahmedzsales18 at gmail.com (Ahmed Zsales)
Date: Tue, 1 Sep 2015 23:28:28 +0100
Subject: [bitcoin-dev] Open Block Chain Licence, BIP[xxxx] Draft
In-Reply-To: <CAAt2M1_qSs9UJ+sqjnvvmx7X29THW1jOFF4DjDbfzLLb+zSRTg@mail.gmail.com>
References: <CADr=VrRT2tdN0jjkZ7HjjeyqonrHG=j+uh8m1L2nhew7c1gnng@mail.gmail.com>
	<CADJgMztScEsDEy277Jksy2RckbpzeRw6RbQzyVrdkjJSS=hHPA@mail.gmail.com>
	<CADr=VrQ42Gqv7fUFVpaburw0=08SNXb0TUCBWd3arREbpdfCkA@mail.gmail.com>
	<CADJgMzvBCiHJo++zrZtA4XuMnNd8D8fHEiS4E2OfoKm4j8sY1w@mail.gmail.com>
	<CAAt2M1_qSs9UJ+sqjnvvmx7X29THW1jOFF4DjDbfzLLb+zSRTg@mail.gmail.com>
Message-ID: <CADr=VrRbZXJ=6Z4AKHzYiC4hv90z=Gb+HUgN-o1KhTGPegN2pw@mail.gmail.com>

Your points are interesting, but they are covered:

https://drive.google.com/file/d/0BwEbhrQ4ELzBMVFxajNZa2hzMTg/view?usp=sharing

Your general point: "Better just put everything in public domain" is the
reason why Bitcoin works, but taken to the extreme it is an argument
against attempts to obfuscate transaction ownership.

Regards,

Ahmed

On Tue, Sep 1, 2015 at 11:20 PM, Natanael <natanael.l at gmail.com> wrote:

>
> Den 2 sep 2015 00:03 skrev "Btc Drak via bitcoin-dev" <
> bitcoin-dev at lists.linuxfoundation.org>:
> >
> > I think it gets worse. Who are the copyright owners (if this actually
> > applies). You've got people publishing transaction messages, you've
> > got miners reproducing them and publishing blocks. Who are all the
> > parties involved? Then to take pedantry to the next level, does a
> > miner have permission to republish messages? How do you know? What if
> > the messages are reproducing others copyright/licensed material? It's
> > not possible to license someone else's work. There are plenty rabbit
> > holes to go down with this train of thought.
>
> Worse yet - transaction malleability creates derative works with multiple
> copyright holders (the original one, plus the author of the modification).
> Is that even legal to do? What to do if a miner unknowingly accepts an
> illegally modified transaction in a block? And can he who modified it ALSO
> sue anybody replicating the block for infringement?
>
> Better just put everything in public domain, or the closest thing to it
> you can get. Copyright in the blockchain is essentially the DVDCSS illegal
> prime mess all over again, but in a P2P network.
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150901/1be425e9/attachment.html>

From milly at bitcoins.info  Tue Sep  1 22:42:39 2015
From: milly at bitcoins.info (Milly Bitcoin)
Date: Tue, 1 Sep 2015 18:42:39 -0400
Subject: [bitcoin-dev] Open Block Chain Licence, BIP[xxxx] Draft
In-Reply-To: <CADr=VrQeQ2=Htcen-oJrJWWhf5aQ8-cjYK28ic1UWNFWMf2nDQ@mail.gmail.com>
References: <CADr=VrRT2tdN0jjkZ7HjjeyqonrHG=j+uh8m1L2nhew7c1gnng@mail.gmail.com>
	<CADJgMztScEsDEy277Jksy2RckbpzeRw6RbQzyVrdkjJSS=hHPA@mail.gmail.com>
	<CADr=VrQ42Gqv7fUFVpaburw0=08SNXb0TUCBWd3arREbpdfCkA@mail.gmail.com>
	<55E61A64.2030609@bitcoins.info>
	<CADr=VrQeQ2=Htcen-oJrJWWhf5aQ8-cjYK28ic1UWNFWMf2nDQ@mail.gmail.com>
Message-ID: <55E629DF.3030407@bitcoins.info>

> The general points and questions you have raised are covered in the
> draft BIP:

No, the BIP makes some weird statements that don't really make sense.

Number one rule here:  To put a license on something you have to own it 
in the first place.

Let's say for the sake of argument that Miners own the copyright on a 
block they find (as pointed out something like does not normally get 
copyright protection but let's just pretend).  Then the miner can charge 
a fee for any public block explorer that wants to display the block at 
their web site.  They could also try to collect a fee from anyone who 
distributes it (like Bitcoin users using p2p to distribute the 
blockchain).  A copyright is about protecting revenue.  Is there some 
other purpose of putting a license on intellectual property?

Also, it is not up to you, or anyone else, to come up with the form of a 
license to control data owned by someone else.  How can you force miners 
  or users to use any specific license that you come up with?

There are a number of other weird statements that really don't make any 
kind of sense:

"In the USA, for example, these attributes confer legal protections for 
databases which have been ruled upon by the courts."  I have no idea 
what this means or what court cases you are referring to.

"The Bitcoin Core Miners" is not an identifiable entity and cannot own 
intellectual property rights.  What is the purpose of you putting a 
notice that some unidentifiable entity has some sort of rights over the 
blockchain data?  You are not that entity and neither are the 
developers.  If there are rights it is up to miners to come up with 
their license.

"[users] own the rights to their individual transactions through 
cryptograph security."  I have no idea what this means.  It is certainly 
not intellectual property rights of anything I am familiar with.  Once 
again, if the users do have intellectual rights then someone else cannot 
dictate the terms of the license.  They could charge a fee for miners 
publishing their transaction data.

Russ



From jtimon at jtimon.cc  Tue Sep  1 22:46:46 2015
From: jtimon at jtimon.cc (=?UTF-8?B?Sm9yZ2UgVGltw7Nu?=)
Date: Wed, 2 Sep 2015 00:46:46 +0200
Subject: [bitcoin-dev] RFC - BIP: URI scheme for Blockchain exploration
In-Reply-To: <5546682.RnG4VcateO@crushinator>
References: <CAE0pACLMcMzHkA=vEx+fiEmq7FA1bXDc4t_hQ+955=r=62V5=g@mail.gmail.com>
	<CABm2gDpC55dsr4GNAUabgnOeXcNTrgHSAtM7Jqfp0_QUfjXmoQ@mail.gmail.com>
	<CAE0pAC+32rhWdBL+WbPANy0rd+eh-XsPQy-u3OHUxS0ku7eN-Q@mail.gmail.com>
	<5546682.RnG4VcateO@crushinator>
Message-ID: <CABm2gDrhh1cSJAVwBQ4meKyjzp4EU_U0feJHJPd=qoC7iojeAw@mail.gmail.com>

On Tue, Sep 1, 2015 at 4:49 PM, Marco Pontello <marcopon at gmail.com> wrote:
>
> On Sat, Aug 29, 2015 at 10:10 PM, Jorge Tim?n
> <bitcoin-dev at lists.linuxfoundation.org> wrote:
>>
>>
>> I would really prefer chain=<chainID> over network=<chainPetnameStr>
>> By chainID I mean the hash of the genesis block, see
>>
>> https://github.com/jtimon/bitcoin/commit/3191d5e8e75687a27cf466b7a4c70bdc04809d39
>> I'm completely fine with doing that using an optional parameter (for
>> backwards compatibility).
>
>
> I see that using the genesis block hash would be the perfectly rigorous way
> to do it, but what do you think about the possibility of letting also use
> the name constants, as a simple / more relaxed alternative? That would spare
> a source lookup just to write a correct reference to a tx, maybe in a forum
> or a post.
>
> So a reference to a certain tx could be either:
>
> blockchain://tx/ca26cedeb9cbc94e030891578e0d2b688a28902114f6ad2f24ecd3918f76c17f

I'm fine with each explorer using whatever chain they prefer as default.

> blockchain://tx/ca26cedeb9cbc94e030891578e0d2b688a28902114f6ad2f24ecd3918f76c17f?chain=000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f
>
> blockchain://ca26cedeb9cbc94e030891578e0d2b688a28902114f6ad2f24ecd3918f76c17f?chain=main
>
> (or a different element name maybe)

It would need to be a different argument, for example chainPetName.

On Tue, Sep 1, 2015 at 11:16 PM, Matt Whitlock <bip at mattwhitlock.name> wrote:
> And I would agree with allowing well-known chains to register a name, to be used as an alternative to the literal, hash syntax:
>
> blockchain://bitcoin/tx/ca26cedeb9cbc94e030891578e0d2b688a28902114f6ad2f24ecd3918f76c17f

But who is the central authority that registers the mnemonic names?
That's why I say petname, because no dictionary of supported chains
should be considered universally accepted and thus it will always be
just a local registry.
If we're chainPetName is supported, there should be an additional call
to query that local list. For example:

blockchain:/chains

JSON response:

{ "main": "000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f",
  "test": "000000000933ea01ad0ee984209779baaec3ced90fa3f408719526f8d77f4943",
  "regtest": "0f9188f13cb7b2c71f2a335e3a4fc328bf5beb436012afca590b1a11466e2206"}

It may be problematic when too many chains are supported. For example,
#6382 introduces std::numeric_limits<uint64_t>::max() new chains.

On Tue, Sep 1, 2015 at 6:12 PM, Danny Thorpe <danny.thorpe at gmail.com> wrote:
> Rather than using an inhumanly long hex string from the genesis hash to
> distinguish between mainnet and testnet, why not use the network magic bytes
> instead? Much shorter, just as distinct.

Obviously 4 bytes is not "as distinct" as 32 bytes. In #6382,
std::numeric_limits<uint64_t>::max() new chains share the same magic
bytes.
And again, there's no central authority to register unique magic
bytes. In contrast, producing a unique genesis block is trivial (look
how I produced std::numeric_limits<uint64_t>::max() new unique genesis
blocks in #6382).

> I'd still prefer a common network name mapping for the sake of humanity. Few
> bitcoin library implementations use the same string names for mainnet and
> testnet. This BIP could simply define one string name alias for each
> supported network and leave mapping to local lingo to the implementors.

There's many altcoins that call "testnet" to their own testnet. In
Bitcoin itself, we've been using "testnet" to refer to the original
testnet, testnet2 and testnet3.
But again, the main issue is that we don't want a central authority to
register unique unique and memorable chain name strings.

Relevant links:

https://en.wikipedia.org/wiki/Zooko%27s_triangle
http://www.skyhunter.com/marcs/petnames/IntroPetNames.html

From btcdrak at gmail.com  Tue Sep  1 22:47:10 2015
From: btcdrak at gmail.com (Btc Drak)
Date: Tue, 1 Sep 2015 23:47:10 +0100
Subject: [bitcoin-dev] Open Block Chain Licence, BIP[xxxx] Draft
In-Reply-To: <CADr=VrTAUdfOOYzY8b7OGWphzcwTbJAE7M860ZajmGt1tVpzLA@mail.gmail.com>
References: <CADr=VrRT2tdN0jjkZ7HjjeyqonrHG=j+uh8m1L2nhew7c1gnng@mail.gmail.com>
	<CADJgMztScEsDEy277Jksy2RckbpzeRw6RbQzyVrdkjJSS=hHPA@mail.gmail.com>
	<CADr=VrQ42Gqv7fUFVpaburw0=08SNXb0TUCBWd3arREbpdfCkA@mail.gmail.com>
	<CADJgMzvBCiHJo++zrZtA4XuMnNd8D8fHEiS4E2OfoKm4j8sY1w@mail.gmail.com>
	<CADr=VrTAUdfOOYzY8b7OGWphzcwTbJAE7M860ZajmGt1tVpzLA@mail.gmail.com>
Message-ID: <CADJgMzsRCTyGgP2=vn-9VMnYt3HxZL4ocR5abyKAZ81vmnbC5w@mail.gmail.com>

I have read the proposal. I think you missed my point: every existing
transaction author would be required to agree to your proposals for
them to be legal, and that's clearly impossible. You'd also need every
single miner who published a block. You're much better taking the line
that actually, the data is public domain and unrestricted based on
various assumptions.

You make some assumptions that transaction authors use Bitcoin Core to
"contract with the network", but in fact transactions are written and
broadcast by a number of means, arguably very few are created by
Bitcoin Core these days. How exactly do you expect to get a legally
binding agreement from all future transaction authors agreeing to your
terms? How would you prove Alice agreed 10 years later? If it was a
proprietary system like Paypal who can force you to agree or close
your account, the Bitcoin protocol is permissionless and anyone can
author a transaction using any means they like, not just Bitcoin Core.
So again I come back to the point your proposal would have to get
permission from all existing authors, and all future authors to work.

Overall I think the proposal is trying to fix something that doesn't
need fixing and get into a quagmire in the process. In fact, I see it
as an impossible task.

On Tue, Sep 1, 2015 at 11:11 PM, Ahmed Zsales <ahmedzsales18 at gmail.com> wrote:
> To avoid repetition, we have actually covered the general points and
> questions you have raised in the draft BIP, which includes a draft licence
> to assist discussions:
>
> https://drive.google.com/file/d/0BwEbhrQ4ELzBMVFxajNZa2hzMTg/view?usp=sharing
>
> Regards,
>
> Ahmed
>
> On Tue, Sep 1, 2015 at 11:02 PM, Btc Drak <btcdrak at gmail.com> wrote:
>>
>> I think it gets worse. Who are the copyright owners (if this actually
>> applies). You've got people publishing transaction messages, you've
>> got miners reproducing them and publishing blocks. Who are all the
>> parties involved? Then to take pedantry to the next level, does a
>> miner have permission to republish messages? How do you know? What if
>> the messages are reproducing others copyright/licensed material? It's
>> not possible to license someone else's work. There are plenty rabbit
>> holes to go down with this train of thought.
>>
>> On Tue, Sep 1, 2015 at 8:36 PM, Ahmed Zsales via bitcoin-dev
>> <bitcoin-dev at lists.linuxfoundation.org> wrote:
>> > That is a very good point.
>> >
>> > We considered whether data existing before a licence change would be
>> > covered, but we hadn't factored the potential need for gaining
>> > permissions
>> > for a change to be considered effective.
>> >
>> > We have proposed that miners be the main beneficiaries of licensing and
>> > there is a consideration on whether they should vote to adopt the new
>> > terms.
>> > While not the preferred route, that would overcome any issues to what is
>> > an
>> > otherwise honest 'error and omission.' There doesn't seem to be anyone
>> > who
>> > could claim to have suffered any economic losses so this may not be an
>> > issue. It merits further investigation.
>> >
>> > The block chain is in perpetual change, so the sooner a change is agreed
>> > upon, if at all, the more data it will cover without any reservations.
>> > At
>> > any rate, we believe the changes would be considered effective on a
>> > retrospective basis.
>> >
>> >
>> > On Tue, Sep 1, 2015 at 7:12 PM, Btc Drak <btcdrak at gmail.com> wrote:
>> >>
>> >> Without commenting on your proposal at all, the general problem with
>> >> licensing after the fact is you require the permission of every
>> >> copyright holder in order to make the change.
>> >>
>> >>
>> >>
>> >> On Tue, Sep 1, 2015 at 2:30 PM, Ahmed Zsales via bitcoin-dev
>> >> <bitcoin-dev at lists.linuxfoundation.org> wrote:
>> >> > Hello,
>> >> >
>> >> > We believe the network requires a block chain licence to supplement
>> >> > the
>> >> > existing MIT Licence which we believe only covers the core reference
>> >> > client
>> >> > software.
>> >> >
>> >> > Replacing or amending the existing MIT Licence is beyond the scope of
>> >> > this
>> >> > draft BIP.
>> >> >
>> >> > Rationale and details of our draft BIP for discussion and evaluation
>> >> > are
>> >> > here:
>> >> >
>> >> >
>> >> >
>> >> > https://drive.google.com/file/d/0BwEbhrQ4ELzBMVFxajNZa2hzMTg/view?usp=sharing
>> >> >
>> >> > Regards,
>> >> >
>> >> > Ahmed
>> >> >
>> >> > _______________________________________________
>> >> > bitcoin-dev mailing list
>> >> > bitcoin-dev at lists.linuxfoundation.org
>> >> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>> >> >
>> >
>> >
>> >
>> > _______________________________________________
>> > bitcoin-dev mailing list
>> > bitcoin-dev at lists.linuxfoundation.org
>> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>> >
>
>

From btcdrak at gmail.com  Tue Sep  1 22:56:32 2015
From: btcdrak at gmail.com (Btc Drak)
Date: Tue, 1 Sep 2015 23:56:32 +0100
Subject: [bitcoin-dev] RFC - BIP: URI scheme for Blockchain exploration
In-Reply-To: <CABm2gDqNQEcm5CWE8Rb0p1NGk=9bzjeSh6DD84=qvJ9kk+uFYw@mail.gmail.com>
References: <CAE0pACLMcMzHkA=vEx+fiEmq7FA1bXDc4t_hQ+955=r=62V5=g@mail.gmail.com>
	<CF21152C-15FA-421C-B369-A9A7DB59865F@ricmoo.com>
	<CADJgMztaJHDrz0+7KLouwZMCz--Za6-2pitmjjYVHG+nJjrG=Q@mail.gmail.com>
	<2509151.XgrrNGsCxR@crushinator>
	<CABm2gDpC55dsr4GNAUabgnOeXcNTrgHSAtM7Jqfp0_QUfjXmoQ@mail.gmail.com>
	<CAFzgq-xvwZ+O0iLLAZoTWKMSaHAt+ZRyBe6dBdnLFEQYj=xVDg@mail.gmail.com>
	<CABm2gDqNQEcm5CWE8Rb0p1NGk=9bzjeSh6DD84=qvJ9kk+uFYw@mail.gmail.com>
Message-ID: <CADJgMzuNzO+J7yEUwdEq7jZV=GBhEp65LZp+_vDEdpxzmkNx6Q@mail.gmail.com>

On Sun, Aug 30, 2015 at 3:20 AM, Jorge Tim?n
<bitcoin-dev at lists.linuxfoundation.org> wrote:
>> Some altcoins (LTC and FTC for example) have the same genesis block hash.
>
> That's obviously a design mistake in FTC, but it's not unsolvable. FTC could
> move their genesis block to the next block (or the first one that is not
> identical to LTC's).
>
> Bitcoin and all its test chains have different genesis blocks, so I'm not
> sure FTC should be a concern for a BIP anyway...

That's a very sweeping generalisation indeed. Why should two chains
have to have a separate genesis? It's cleaner, but it's certainly not
a necessity. You cant exclude this case just because it doesn't fit
your concept of neat and tidy. Other BIP proposals that account for
alternative chains do not rely on the genesis hash, but instead an
identifier. Why should it be any different here? How would you account
for a world with XTCoin and Bitcoin which would also share the same
genesis hash, but clearly not be the same coin.

When I brought up the issue originally, I deliberately steered away
from altchains choosing to focus on networks like mainnet, testnet
because I think it's easier to repurpose a protocol for an altcoin
than it is to make the proposal work for all cases. Take the payment
protocol for example. The BIP specifies a URI with bitcoin: well it's
just as easy to repurpose that for litecoin: etc than adding something
like ?cointype=litecoin, so that was my reason for not mentioning
altcoins at all.

If the proposal is made to account for altcoins, genesis hash is
definitely not desirable, or at least not genesis hash in isolation,
and if that's the case, better to have an identifier.

From btcdrak at gmail.com  Tue Sep  1 22:59:36 2015
From: btcdrak at gmail.com (Btc Drak)
Date: Tue, 1 Sep 2015 23:59:36 +0100
Subject: [bitcoin-dev] RFC - BIP: URI scheme for Blockchain exploration
In-Reply-To: <CAJN5wHVdneuRv6Vpf4q3d=mqwu2HkNeJwFhoqPHFiQcatt4RSg@mail.gmail.com>
References: <CAE0pACLMcMzHkA=vEx+fiEmq7FA1bXDc4t_hQ+955=r=62V5=g@mail.gmail.com>
	<CF21152C-15FA-421C-B369-A9A7DB59865F@ricmoo.com>
	<CADJgMztaJHDrz0+7KLouwZMCz--Za6-2pitmjjYVHG+nJjrG=Q@mail.gmail.com>
	<2509151.XgrrNGsCxR@crushinator>
	<CABm2gDpC55dsr4GNAUabgnOeXcNTrgHSAtM7Jqfp0_QUfjXmoQ@mail.gmail.com>
	<CAJN5wHVdneuRv6Vpf4q3d=mqwu2HkNeJwFhoqPHFiQcatt4RSg@mail.gmail.com>
Message-ID: <CADJgMzuK6YpLyFQ1BnHuWi4GyoqOgnuaA7T3odukpB=Hh3pTgQ@mail.gmail.com>

On Tue, Sep 1, 2015 at 5:12 PM, Danny Thorpe via bitcoin-dev
<bitcoin-dev at lists.linuxfoundation.org> wrote:
> Rather than using an inhumanly long hex string from the genesis hash to
> distinguish between mainnet and testnet, why not use the network magic bytes
> instead? Much shorter, just as distinct.

There's nothing stopping two coins having the same magic bytes, but
communicating on separate ports.

> I'd still prefer a common network name mapping for the sake of humanity. Few
> bitcoin library implementations use the same string names for mainnet and
> testnet. This BIP could simply define one string name alias for each
> supported network and leave mapping to local lingo to the implementors.

The only sane way to me see to have cointype like BIP44.
See https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki#coin-type

From ahmedzsales18 at gmail.com  Tue Sep  1 23:21:30 2015
From: ahmedzsales18 at gmail.com (Ahmed Zsales)
Date: Wed, 2 Sep 2015 00:21:30 +0100
Subject: [bitcoin-dev] Open Block Chain Licence, BIP[xxxx] Draft
In-Reply-To: <55E629DF.3030407@bitcoins.info>
References: <CADr=VrRT2tdN0jjkZ7HjjeyqonrHG=j+uh8m1L2nhew7c1gnng@mail.gmail.com>
	<CADJgMztScEsDEy277Jksy2RckbpzeRw6RbQzyVrdkjJSS=hHPA@mail.gmail.com>
	<CADr=VrQ42Gqv7fUFVpaburw0=08SNXb0TUCBWd3arREbpdfCkA@mail.gmail.com>
	<55E61A64.2030609@bitcoins.info>
	<CADr=VrQeQ2=Htcen-oJrJWWhf5aQ8-cjYK28ic1UWNFWMf2nDQ@mail.gmail.com>
	<55E629DF.3030407@bitcoins.info>
Message-ID: <CADr=VrTfn+02nAOY8+i11haoWis4UHQ8WZB=qKrkmLE8YEkKMQ@mail.gmail.com>

This is good feedback. Thank you.

Very briefly:

> "To put a license on something you have to own it in the first place." ##
The block chain is a database. There are laws to protect databases. We have
suggested who might be best placed to be assigned rights to the block chain
and more importantly why.

> "A copyright is about protecting revenue" ## Not always. It can also be
about saying you have a right to something and you give up those rights.
There are likely to be many examples where this could be applied, for
example - if you transact with someone and government agencies develop the
means to reveal your transaction, a licence gives protections which might
otherwise not be there in the absence of a licence. The MIT licence does
something similar - the Core developers give up their rights to revenue
from the software. Not wishing to go down rabbit hole, why not just remove
the MIT licence?

> "it is not up to you, or anyone else, to come up with the form of a
license to control data owned by someone else." ## It is up to us to
produce some guidance and context to assist with the BIP discussion
process. If anyone else has any suggestions on wording or access to legal
advice, that will be helpful.

> "Then the miner can charge a fee for any public block explorer that wants
to display the block at their web site" ## I would oppose any wording that
attempted to do anything of the sort. Bitcoin works because the block chain
is in the public domain. We have included references to royalty free use of
the data.

> "If there are rights it is up to miners to come up with their license."
## The original reference client did everything. A block chain licence was
probably not envisioned. Mining has taken a different path from that which
was intended. Nevertheless, one needs to start somewhere. The proposal to
assign rights to miners is just that, a proposal.

I would just like to labour the point that users pay to use the network,
but they have no defined rights, anywhere.

Regards,

Ahmed

On Tue, Sep 1, 2015 at 11:42 PM, Milly Bitcoin via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> The general points and questions you have raised are covered in the
>> draft BIP:
>>
>
> No, the BIP makes some weird statements that don't really make sense.
>
> Number one rule here:  To put a license on something you have to own it in
> the first place.
>
> Let's say for the sake of argument that Miners own the copyright on a
> block they find (as pointed out something like does not normally get
> copyright protection but let's just pretend).  Then the miner can charge a
> fee for any public block explorer that wants to display the block at their
> web site.  They could also try to collect a fee from anyone who distributes
> it (like Bitcoin users using p2p to distribute the blockchain).  A
> copyright is about protecting revenue.  Is there some other purpose of
> putting a license on intellectual property?
>
> Also, it is not up to you, or anyone else, to come up with the form of a
> license to control data owned by someone else.  How can you force miners
> or users to use any specific license that you come up with?
>
> There are a number of other weird statements that really don't make any
> kind of sense:
>
> "In the USA, for example, these attributes confer legal protections for
> databases which have been ruled upon by the courts."  I have no idea what
> this means or what court cases you are referring to.
>
> "The Bitcoin Core Miners" is not an identifiable entity and cannot own
> intellectual property rights.  What is the purpose of you putting a notice
> that some unidentifiable entity has some sort of rights over the blockchain
> data?  You are not that entity and neither are the developers.  If there
> are rights it is up to miners to come up with their license.
>
> "[users] own the rights to their individual transactions through
> cryptograph security."  I have no idea what this means.  It is certainly
> not intellectual property rights of anything I am familiar with.  Once
> again, if the users do have intellectual rights then someone else cannot
> dictate the terms of the license.  They could charge a fee for miners
> publishing their transaction data.
>
>
> Russ
>
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150902/5298429e/attachment-0001.html>

From bip at mattwhitlock.name  Tue Sep  1 23:25:33 2015
From: bip at mattwhitlock.name (Matt Whitlock)
Date: Tue, 01 Sep 2015 19:25:33 -0400
Subject: [bitcoin-dev] RFC - BIP: URI scheme for Blockchain exploration
In-Reply-To: <CABm2gDrhh1cSJAVwBQ4meKyjzp4EU_U0feJHJPd=qoC7iojeAw@mail.gmail.com>
References: <CAE0pACLMcMzHkA=vEx+fiEmq7FA1bXDc4t_hQ+955=r=62V5=g@mail.gmail.com>
	<5546682.RnG4VcateO@crushinator>
	<CABm2gDrhh1cSJAVwBQ4meKyjzp4EU_U0feJHJPd=qoC7iojeAw@mail.gmail.com>
Message-ID: <15195064.VOvyqMpVpY@crushinator>

On Wednesday, 2 September 2015, at 12:46 am, Jorge Tim?n wrote:
> But again, the main issue is that we don't want a central authority to
> register unique unique and memorable chain name strings.

Why not? There's a central registry of MIME types. And there's a central registry of TCP/UDP port number assignments. The BIP describing the "blockchain" URI scheme is published by a central authority. For cases where assigning names to numbers is uncontroversial, central authorities don't cause any problems.

From hurricanewarn1 at aol.com  Tue Sep  1 23:39:43 2015
From: hurricanewarn1 at aol.com (hurricanewarn1 at aol.com)
Date: Tue, 1 Sep 2015 19:39:43 -0400
Subject: [bitcoin-dev] Open Block Chain Licence, BIP[xxxx] Draft
In-Reply-To: <CADr=VrRT2tdN0jjkZ7HjjeyqonrHG=j+uh8m1L2nhew7c1gnng@mail.gmail.com>
References: <CADr=VrRT2tdN0jjkZ7HjjeyqonrHG=j+uh8m1L2nhew7c1gnng@mail.gmail.com>
Message-ID: <14f8b47cd5b-1774-e482@webprd-a78.mail.aol.com>


 The only reason someone would want to make a license is so they can sue/threaten people for not following the license rules. At best this is pointless since Bitcoin cannot be controlled, and at worst it will result in a group of people using coercion against the community to gain profits. 
 
 There is no legal ground for anyone to make a Bitcoin license, it simply wouldn't stand in court. Not even the MIT license is valid or meaningful. But I wouldn't be surprised if people tried scaring people with a license even if they knew it was invalid.
    
    
    It's actually disgusting that you wrote what people are allowed and not allowed to do with Bitcoin. Pure centralization ideology. Maybe go work for the government and make regulations instead of trying to centralize one of the only de-centralized things left on the planet.
    
   
    

 

 

-----Original Message-----
From: Ahmed Zsales via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org>
To: Bitcoin Dev <bitcoin-dev at lists.linuxfoundation.org>
Sent: Tue, Sep 1, 2015 9:30 am
Subject: [bitcoin-dev]  Open Block Chain Licence, BIP[xxxx] Draft


 
Hello,  
   
  
  
We believe the network requires a block chain licence to supplement the existing MIT Licence which we believe only covers the core reference client software.  
  
   
  
  
Replacing or amending the existing MIT Licence is beyond the scope of this draft BIP.  
  
   
  
  
Rationale and details of our draft BIP for discussion and evaluation are here:  
  
   
  
  
   https://drive.google.com/file/d/0BwEbhrQ4ELzBMVFxajNZa2hzMTg/view?usp=sharing   
  
  
   
  
  
Regards,  
  
   
  
  
Ahmed  
 
 

_______________________________________________
bitcoin-dev mailing
list
bitcoin-dev at lists.linuxfoundation.org
https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev

 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150901/fe5d4286/attachment.html>

From milly at bitcoins.info  Tue Sep  1 23:40:56 2015
From: milly at bitcoins.info (Milly Bitcoin)
Date: Tue, 1 Sep 2015 19:40:56 -0400
Subject: [bitcoin-dev] Open Block Chain Licence, BIP[xxxx] Draft
In-Reply-To: <CADr=VrTfn+02nAOY8+i11haoWis4UHQ8WZB=qKrkmLE8YEkKMQ@mail.gmail.com>
References: <CADr=VrRT2tdN0jjkZ7HjjeyqonrHG=j+uh8m1L2nhew7c1gnng@mail.gmail.com>
	<CADJgMztScEsDEy277Jksy2RckbpzeRw6RbQzyVrdkjJSS=hHPA@mail.gmail.com>
	<CADr=VrQ42Gqv7fUFVpaburw0=08SNXb0TUCBWd3arREbpdfCkA@mail.gmail.com>
	<55E61A64.2030609@bitcoins.info>
	<CADr=VrQeQ2=Htcen-oJrJWWhf5aQ8-cjYK28ic1UWNFWMf2nDQ@mail.gmail.com>
	<55E629DF.3030407@bitcoins.info>
	<CADr=VrTfn+02nAOY8+i11haoWis4UHQ8WZB=qKrkmLE8YEkKMQ@mail.gmail.com>
Message-ID: <55E63788.3070409@bitcoins.info>

> I would just like to labour the point that users pay to use the network,
> but they have no defined rights, anywhere.

That is an interesting point.  That is a feature of Bitcoin, not a bug. 
  If the user did have rights to sue someone then the system would not 
be decentralized.  User rights = someone else has a liability for 
violating those rights.

As it is now a user would have the right to sue all the miners, node 
operators, and developers collectively.  Of course that is not realistic 
which is the way a decentralized system should be.  If you want to try 
to define specific entities that have liability then they must be in 
control or otherwise they would not be liable.

Russ







From jtimon at jtimon.cc  Tue Sep  1 23:57:16 2015
From: jtimon at jtimon.cc (=?UTF-8?B?Sm9yZ2UgVGltw7Nu?=)
Date: Wed, 2 Sep 2015 01:57:16 +0200
Subject: [bitcoin-dev] RFC - BIP: URI scheme for Blockchain exploration
In-Reply-To: <CADJgMzuK6YpLyFQ1BnHuWi4GyoqOgnuaA7T3odukpB=Hh3pTgQ@mail.gmail.com>
References: <CAE0pACLMcMzHkA=vEx+fiEmq7FA1bXDc4t_hQ+955=r=62V5=g@mail.gmail.com>
	<CF21152C-15FA-421C-B369-A9A7DB59865F@ricmoo.com>
	<CADJgMztaJHDrz0+7KLouwZMCz--Za6-2pitmjjYVHG+nJjrG=Q@mail.gmail.com>
	<2509151.XgrrNGsCxR@crushinator>
	<CABm2gDpC55dsr4GNAUabgnOeXcNTrgHSAtM7Jqfp0_QUfjXmoQ@mail.gmail.com>
	<CAJN5wHVdneuRv6Vpf4q3d=mqwu2HkNeJwFhoqPHFiQcatt4RSg@mail.gmail.com>
	<CADJgMzuK6YpLyFQ1BnHuWi4GyoqOgnuaA7T3odukpB=Hh3pTgQ@mail.gmail.com>
Message-ID: <CABm2gDrcZM8TH7__ViSgJ0Sr94SP_Yg4L8SLTqtto5JnCq95ow@mail.gmail.com>

On Wed, Sep 2, 2015 at 12:56 AM, Btc Drak <btcdrak at gmail.com> wrote:
> When I brought up the issue originally, I deliberately steered away
> from altchains choosing to focus on networks like mainnet, testnet
> because I think it's easier to repurpose a protocol for an altcoin
> than it is to make the proposal work for all cases. Take the payment
> protocol for example. The BIP specifies a URI with bitcoin: well it's
> just as easy to repurpose that for litecoin: etc than adding something
> like ?cointype=litecoin, so that was my reason for not mentioning
> altcoins at all.
>
> If the proposal is made to account for altcoins, genesis hash is
> definitely not desirable, or at least not genesis hash in isolation,
> and if that's the case, better to have an identifier

I agree. That's why we don't need to account for altchains other than
testchains (ie sidechains and altcoins).



> On Sun, Aug 30, 2015 at 3:20 AM, Jorge Tim?n
> <bitcoin-dev at lists.linuxfoundation.org> wrote:
>>> Some altcoins (LTC and FTC for example) have the same genesis block hash.
>>
>> That's obviously a design mistake in FTC, but it's not unsolvable. FTC could
>> move their genesis block to the next block (or the first one that is not
>> identical to LTC's).
>>
>> Bitcoin and all its test chains have different genesis blocks, so I'm not
>> sure FTC should be a concern for a BIP anyway...
>
> That's a very sweeping generalisation indeed. Why should two chains
> have to have a separate genesis? It's cleaner, but it's certainly not
> a necessity. You cant exclude this case just because it doesn't fit
> your concept of neat and tidy. Other BIP proposals that account for
> alternative chains do not rely on the genesis hash, but instead an
> identifier. Why should it be any different here?

On Wed, Sep 2, 2015 at 12:59 AM, Btc Drak <btcdrak at gmail.com> wrote:
> The only sane way to me see to have cointype like BIP44.
> See https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki#coin-type

We can do it the right way from now on (and as you say altcoins can
trivially adapt to this).
Sorry for having missed bip44 for review but that section is horrible
in my opinion (see the links above). And it seems to be incompatible
with bip001 which says are immutable once accepted (assuming that
document is expected to be the central registry of registered chains).

> How would you account
> for a world with XTCoin and Bitcoin which would also share the same
> genesis hash, but clearly not be the same coin.

Schism hardforks are explicitly renouncing to reach consensus with all
previous users. You're intentionally divorcing 2 chains, and you can
do that without confusing users.
In BIP99 the recommended deployment path for a schism fork is to
simply use the nHeight for activation.
The 95% miner's upgrade confirmation is not used here (like in
uncontroversial hardforks and softforks) because you don't necessarily
expect all miners to move to your side of the schism (and you don't
want to wait for them, specially if it's an "anti-miner" hardfork).
To avoid confusing users, you can define a new "genesis block" to use
for the chain ID, for example, 1000 blocks before the activation
height.
The same applies for potentially pre-mined altcoins that haven't had
the decency/competency of even changing the string in pszTimestamp.
For example, FTC, coins generated with coingen (Matt Corallo or the
current owner may want to correct me on this point) or elements alpha
(https://github.com/ElementsProject/elements/blob/alpha/src/chainparams.cpp#L115).
Fortunately alpha has a unique chain ID because it was changing both
the block and transaction serialization formats anyway. But hopefully
we will fix that for beta and later sidechains.
All chains that want a unique chain ID can have it retroactively. At
worst, they may need to use the hash of a block that is not the
genesis block.
In other words, they may need to move their "genesis checkpoint" upwards.
Terminology may make things more clear. We can replace:

"The chain ID is the hash of the genesis block"

with

"The chain ID is the hash of the genesis checkpoint".

If we want a unique chain ID we can have it: it just cannot be
memorable at the same time.
And each chain and implementation can start using them (in addition to
petname -> chain ID local dictionaries) at any point in time: this is
retroactively (and obviously forwards) compatible.
There can be many competing registries for the name -> chainID
dictionaries (maybe one of them based on namecoin?) but bitcoin/bips
shouldn't maintain one.

From hurricanewarn1 at aol.com  Wed Sep  2 07:20:35 2015
From: hurricanewarn1 at aol.com (hurricanewarn1 at aol.com)
Date: Wed, 2 Sep 2015 03:20:35 -0400
Subject: [bitcoin-dev] AT&T has effectively banned Bitcoin nodes via
 utilizing private subnets.
In-Reply-To: <55E550DF.80806@riseup.net>
Message-ID: <14f8cedbe64-1774-f22b@webprd-a78.mail.aol.com>


 I was about to buy a VPS for Bitcoin, but I really do need Bitcoin Core for business reasons so I didn't give up. I once again thoroughly went through my computer and made sure there was nothing blocking 8333, a couple useful tools are CurrPorts and TCPView. I went through the router to make sure there was no block of port 8333. I researched everything thoroughly and was sure these were the right settings, but Bitcoin was still getting throttled every second and stuck in sys_sent, and python kept saying the target was rejecting the connection.

I finally stumbled upon subnet settings, and saw that I had a private subnet, one of the few IPs that are private on earth ( https://www.arin.net/knowledge/address_filters.html ). Uverse put all their customers on a private subnet by default. This made my computer not only hidden but unroutable for any computer on the Bitcoin network. That alone is enough to totally stop Bitcoin connections on any port, but they made it even crazier by generating a dynamic IP that changes all the time, so public IP was meaningless for my computer. 

I switched over to a public subnet, and right there was a checkbox to allow incoming connections. My static IP showed for a minute then became dynamic/hidden again without me even touching anything. The final roadblock was AT&T charges $15-30/month for a public static IP, which is obviously insane and actually one could argue that violates their own terms of service. So the router was still ignoring my public IP settings simply because I wasn't paying for a public IP, and intentionally changing the settings back. I asked for a free public IP and there was no response for awhile.

I found this article on cryptocoinnews while working out: https://www.cryptocoinsnews.com/isps-intentionally-blocking-bitcoin/ It's based on the first email I sent, and was displayed prominently on their front page. I posted a tweet publicly about it which referenced AT&T ( https://twitter.com/turtlehurricane/status/638930065980551168 ) and believe it or not I had a static public IP and port 8333 was open about 1 minute later. I don't know if it was a coincidence cause I already messaged them to please do that an hour before, or if that article and tweet spurred them to action. The timing was so ridiculous I think it's the latter. Without twitter I probably wouldn't have succeeded, the technicians on twitter actually answered all my questions 24/7 unlike phone technicians which were clueless and trying to sell me a subscription for connection services help. And shout out to cryptocoinnews for making this public. 

So to clarify, it appears AT&T has not blocked port 8333 itself, but rather effectively blocked all ports via the private subnet, which makes the computer hidden and unroutable for incoming peers. Although this severely limits functionality and cripples the ability to run a full node and many other programs it is understandable, since it just about 100% prevents hackers from getting in, since they can't even see your computer. What isn't understandable is that AT&T technicians did not inform me about this until I changed the settings myself, despite the fact it is a very obvious cause of ports being blocked. It's probably just ignorance since AT&T has so many complex network settings it's hard to keep track of, although I have a suspicion that someone in their command chain is withholding information in an attempt to make them buy a $15/month connection service, and once they buy that another $15-30/month is needed to get the static IP.

As far as I know there is no easy to find info on the internet about private subnets crippling the ability to use Bitcoin. I believe this needs to be explicitly said in instructions for running a full node, maybe it wasn't a problem in 2009 but now it is a major issue. On default settings Bitcoin is 100% blocked, and most people do not have the time or motivation to fix this. I talked to at least 10 AT&T technicians and worked on it 2-3 days straight, did not receive the right answer until I found it myself, although they certainly gave me some useful clues about how the network works.

I am very happy that AT&T fixed it, since other ISPs like Comcast appeared even worse. I openly talked with them about Bitcoin and they showed no prejudice, might've actually made them more willing to help me cause otherwise they would think I'm a hacker.

tl;dr The good news is anyone with AT&T can be a full node by getting a public static IP, the bad news is almost no one will figure this out unless we as a community make it well known. I guarantee node numbers will improve if this information is spread to everyone. Database size and computing expenditures is simply not the reason people don't run full nodes, it's because their ISP has made it just about impossible without shelling out nearly 100% more money per month. If you don't pay the fee AT&T would never tell you about the private subnet, at least based on my experience.


-----Original Message-----
From: odinn <odinn.cyberguerrilla at riseup.net>
To: hurricanewarn1 <hurricanewarn1 at aol.com>; bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org>
Sent: Tue, Sep 1, 2015 3:16 am
Subject: Re: [bitcoin-dev] AT&T has effectively banned Bitcoin nodes by closing port 8333 via a hidden firewall in the cable box


-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512

Another note on this subject
to add to the stuff people have already
mentioned...

If you have the AT&T
landline but don't use AT&T's standard internet /
tv (what they call Uverse)
offering - that is, if you prefer to use
some local internet provider - you are
probably better off (in terms
of avoiding not only this sort of
blockage/censorship but as well,
potentially getting a better privacy policy
that isn't going to be
like AT&T's long-term data retention).  You can check
directly with
the various local small ISPs to see what their policies
are
specifically on ports and whatnot.

Ideally your ISP should let
you:

port forward to SOMEPORTNUMBER for tcp and udp

(above may or may not
be helpful for some if you are using
decentralized markets)

have port 8333
open

(above is for bitcoin of course)

Supposing you have FTTN because you
are paying a local ISP for
internet service, and that local ISP has contracted
with AT&T to be
able to provide service in an area where old-style DSL has been
phased
out, thus your local ISP is essentially providing you AT&T FTTN.
(FTTN
is Fiber to the Node, FTTN-BP is FTTN Bonded Pair).  Even if a
local ISP has
its own privacy policy posted which is different from
AT&T, everything is
subject to AT&T data retention because the FTTN.
So get yourself a VPN (or set
up your own) for your connection. Tor
will run through the VPN.

General
observations - TWC stores your IP and other stuffs for 6
months or longer. 
Same for Comcast.  Verizon retains your stuffs for
18 month minimum, probably
longer though. Qwest/Century, 1 year.
Cox, 6 months.  AT&T retains for longer
than a year.  This is just
what they are telling you, the reality is it's
probably longer due to
stuff like
this:
https://www.lawfareblog.com/odni-and-doj-release-last-section-215-collec
tion-order









Zach
G via bitcoin-dev:
> I have been struggling to get port 8333 open all year, I
gave up
> and was using blockchain for months despite a strong desire to
stay
> on Bitcoin Core, but now the issue has reached critical mass since
>
I'm using the python Bitcoin server module. I have literally spent
> my entire
day trying to open 8333, I thoroughly made sure it was
> open on the router and
computer and it's still closed. Strangely
> enough I got it open for 30 seconds
once today but something closed
> it immediately.
> 
> After hours of phone
calls and messaging AT&T finally told me the
> truth of what was going on, and
only because I noticed it myself
> and demanded an answer. The internet is
being routed through a
> DVR/cable box, and they confirmed the DVR also has a
firewall. To
> make this even more absurd they refused to turn the firewall
off
> because it is their equipment. So effectively they can firewall any
>
port they want even if the customer asks them not to, in the
> unlikely event
the customer figures it out.
> 
> Perhaps this is the driving force behind the
inexplicable and
> massive decline in Bitcoin nodes. Bitcoin is being censored
by the
> ISPs themselves, and they won't even tell you that. I had to get in
>
touch with headquarters and threaten to rip it out of the wall to
> get a
proper answer.
> 
> 
> 
> _______________________________________________
bitcoin-dev mailing
> list bitcoin-dev at lists.linuxfoundation.org 
>
https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> 

- --

http://abis.io ~
"a protocol concept to enable decentralization
and
expansion of a giving economy, and a new social
good"
https://keybase.io/odinn
-----BEGIN PGP
SIGNATURE-----

iQEcBAEBCgAGBQJV5VDeAAoJEGxwq/inSG8CvkIH/jy4Vo+My3xeBdvFQmxkJWyQ
U5mv2zWEvBYw71Xy1EDzQY1AhEBmatUU1eu2AbOqXdUR4511FxCNzFmTxy6roEiz
EehBkvXNbBCbEzLRisjxuQw34OKM+xfieCqE1mzJok2uSdLMMQLcbWL1/k3/OmS5
9O9z/wMXqU1Jc19MTK+vF1Lz5ilnRn3hEbTaCN3ivYnYFa0DpBH9r0Y07UcoJ6Wr
ui/x0sSSuupAGzOkZ75HQ8yeQXckeAu6TB3/jE8QEqNUmAJkmR8eK4ofXZWFrIjy
mOKeQL4c+jRQnTR8pt+y89g2QIpzFoHaV5T+WvQuC1t8xNOrxLgYFXWgl0dhoYE=
=UCLC
-----END
PGP SIGNATURE-----

 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150902/4ec5e5ed/attachment-0001.html>

From wtogami at gmail.com  Wed Sep  2 08:56:30 2015
From: wtogami at gmail.com (Warren Togami Jr.)
Date: Wed, 2 Sep 2015 01:56:30 -0700
Subject: [bitcoin-dev] Open Block Chain Licence, BIP[xxxx] Draft
In-Reply-To: <CADr=VrRT2tdN0jjkZ7HjjeyqonrHG=j+uh8m1L2nhew7c1gnng@mail.gmail.com>
References: <CADr=VrRT2tdN0jjkZ7HjjeyqonrHG=j+uh8m1L2nhew7c1gnng@mail.gmail.com>
Message-ID: <CAEz79Po2S0VS0xEvzciLq4w7bLMuLF3Kyr0H5h+jWeYZW1QSpQ@mail.gmail.com>

I am skeptical that any license for the blockchain itself is needed because
of the possibility that the blockchain is not entitled to copyright
protection.  While I am not a lawyer, I have stared hard at the copyright
doctrine of the U.S. in multiple law school Intellectual Property courses
and during my previous career in Open Source Software where copyright
matters a great deal.

As each owner of a
> coin makes a transfer by digitally signing a hash of the previous
> transaction along with the
> new owner?s public key, the block chain is a perpetual compilation of
> unique data.
> *It is therefore compiled in a creative and non-obvious way.* In the USA,
> for example, these
> attributes confer legal protections for databases which have been ruled
> upon by the courts.


This portion of your paper I believe is not true and requires citations if
you want to be convincing.  Is it truly "creative and non-obvious"?  My
understanding under at least U.S. law, the blockchain may not be entitled
to copyright protection because a compilation created in a mechanical
manner is not a creative work of a human.

I suppose a transaction could contain a "creative" element if it contains
arbitrary bytes of a message or clever script.  For the most part though
most of what you call "digitally signing a hash of the previous transaction
along with the new owner?s public key" is purely the result of a mechanical
process and really is not creative.  Furthermore, even if that output were
"non-obvious", obviousness has nothing to do with copyrightability.

Your license is correct in intent in attempting to exclude from the royalty
free grant works within the blockchain that themselves may be subject to
copyright of third parties.  The elements within the blockchain may be
entitled individually to copyright if they are in any way a creative work
of a human, but as a compilation I am doubtful the blockchain itself is
entitled to copyright.

I understand copyright with respect to databases can be different under
other jurisdictions.  Your paper mentions the European database law that is
indeed different from the U.S.  Your paper is incomplete in scholarly and
legal citations.  I myself and we as a community don't know enough.  I
suppose this topic merits further study.

Warren Togami

On Tue, Sep 1, 2015 at 6:30 AM, Ahmed Zsales via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> Hello,
>
> We believe the network requires a block chain licence to supplement the
> existing MIT Licence which we believe only covers the core reference client
> software.
>
> Replacing or amending the existing MIT Licence is beyond the scope of this
> draft BIP.
>
> Rationale and details of our draft BIP for discussion and evaluation are
> here:
>
>
> https://drive.google.com/file/d/0BwEbhrQ4ELzBMVFxajNZa2hzMTg/view?usp=sharing
>
> Regards,
>
> Ahmed
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150902/f96f29e5/attachment.html>

From hurricanewarn1 at aol.com  Wed Sep  2 09:20:24 2015
From: hurricanewarn1 at aol.com (hurricanewarn1 at aol.com)
Date: Wed, 2 Sep 2015 05:20:24 -0400
Subject: [bitcoin-dev] AT&T has effectively banned Bitcoin nodes via
 utilizing private subnets.
In-Reply-To: <2156992.EaWDNESINK@crushinator>
Message-ID: <14f8d5b7332-1774-f3bd@webprd-a78.mail.aol.com>

First off I couldn't synch the wallet, it said no block source available and there was zero connections. Bitcoin was literally getting thottled every second. It would not even allow the connection to get block source. EVERY port was blocked, making exceptions in the router firewall did nothing. I was forced to use Blockchain.info which is a major security risk.

Secondly, I am developing a program using Bitcoin Python modules, so I login to my computer like it's a server and it was flat out rejecting the connection. I could not run any code until this got fixed, and of course needed the block source to even do anything. 

If Bitcoin Core worked but 8333 was blocked I would not be emailing the list. Bitcoin Core was crippled and unusable due to the AT&T settings, and they tried hard to get me to buy monthly subscriptions to get the answer. This makes it likely that Bitcoin Core is unusable for most AT&T customers and other ISPs, hence the massive node decline. I'm sure this disrupts alot of other people besides Bitcoiners too, hence the monthly subscriptions geared towards people who can't figure out their connection situation.

AT&T literally blocked access to static IP if you don't buy one, so it wasn't a normal network setup. Unfortunately the same security used to stop hackers and viruses stops Bitcoin too, so this is probably the settings for almost every router in the country. Nodes are in fact declining worldwide, down 15% in the past year alone. Community needs to speak up and also educate before this gets completely out of control. https://getaddr.bitnodes.io/dashboard/?days=365 6,000 nodes is pathetic as it is and it's constantly declining.
 

 

-----Original Message-----
From: Matt Whitlock <bip at mattwhitlock.name>
To: hurricanewarn1 <hurricanewarn1 at aol.com>
Sent: Wed, Sep 2, 2015 4:32 am
Subject: Re: [bitcoin-dev] AT&T has effectively banned Bitcoin nodes via utilizing private subnets.


Respectfully, what the heck are you talking about? Practically every home LAN
runs on a private subnet. My own desktop computer has the IP address
192.168.1.34, which is in a private subnet. This doesn't prevent my Bitcoin Core
node from making outbound connections to other nodes. Moreover, almost all home
Internet connections in the world run on dynamically assigned IP addresses.
Again, this does not cause any problems for connecting outbound to other Bitcoin
nodes. It's true that your node can't accept incoming connections unless you
forward port 8333 on your router to your computer, but you don't need to be able
to accept incoming connections to participate in the Bitcoin network.


On
Wednesday, 2 September 2015, at 3:20 am, Zach G via bitcoin-dev wrote:
> 
>  I
was about to buy a VPS for Bitcoin, but I really do need Bitcoin Core for
business reasons so I didn't give up. I once again thoroughly went through my
computer and made sure there was nothing blocking 8333, a couple useful tools
are CurrPorts and TCPView. I went through the router to make sure there was no
block of port 8333. I researched everything thoroughly and was sure these were
the right settings, but Bitcoin was still getting throttled every second and
stuck in sys_sent, and python kept saying the target was rejecting the
connection.
> 
> I finally stumbled upon subnet settings, and saw that I had a
private subnet, one of the few IPs that are private on earth (
https://www.arin.net/knowledge/address_filters.html ). Uverse put all their
customers on a private subnet by default. This made my computer not only hidden
but unroutable for any computer on the Bitcoin network. That alone is enough to
totally stop Bitcoin connections on any port, but they made it even crazier by
generating a dynamic IP that changes all the time, so public IP was meaningless
for my computer. 
> 
> I switched over to a public subnet, and right there was
a checkbox to allow incoming connections. My static IP showed for a minute then
became dynamic/hidden again without me even touching anything. The final
roadblock was AT&T charges $15-30/month for a public static IP, which is
obviously insane and actually one could argue that violates their own terms of
service. So the router was still ignoring my public IP settings simply because I
wasn't paying for a public IP, and intentionally changing the settings back. I
asked for a free public IP and there was no response for awhile.
> 
> I found
this article on cryptocoinnews while working out:
https://www.cryptocoinsnews.com/isps-intentionally-blocking-bitcoin/ It's based
on the first email I sent, and was displayed prominently on their front page. I
posted a tweet publicly about it which referenced AT&T (
https://twitter.com/turtlehurricane/status/638930065980551168 ) and believe it
or not I had a static public IP and port 8333 was open about 1 minute later. I
don't know if it was a coincidence cause I already messaged them to please do
that an hour before, or if that article and tweet spurred them to action. The
timing was so ridiculous I think it's the latter. Without twitter I probably
wouldn't have succeeded, the technicians on twitter actually answered all my
questions 24/7 unlike phone technicians which were clueless and trying to sell
me a subscription for connection services help. And shout out to cryptocoinnews
for making this public. 
> 
> So to clarify, it appears AT&T has not blocked
port 8333 itself, but rather effectively blocked all ports via the private
subnet, which makes the computer hidden and unroutable for incoming peers.
Although this severely limits functionality and cripples the ability to run a
full node and many other programs it is understandable, since it just about 100%
prevents hackers from getting in, since they can't even see your computer. What
isn't understandable is that AT&T technicians did not inform me about this until
I changed the settings myself, despite the fact it is a very obvious cause of
ports being blocked. It's probably just ignorance since AT&T has so many complex
network settings it's hard to keep track of, although I have a suspicion that
someone in their command chain is withholding information in an attempt to make
them buy a $15/month connection service, and once they buy that another
$15-30/month is needed to get the static IP.
> 
> As far as I know there is no
easy to find info on the internet about private subnets crippling the ability to
use Bitcoin. I believe this needs to be explicitly said in instructions for
running a full node, maybe it wasn't a problem in 2009 but now it is a major
issue. On default settings Bitcoin is 100% blocked, and most people do not have
the time or motivation to fix this. I talked to at least 10 AT&T technicians and
worked on it 2-3 days straight, did not receive the right answer until I found
it myself, although they certainly gave me some useful clues about how the
network works.
> 
> I am very happy that AT&T fixed it, since other ISPs like
Comcast appeared even worse. I openly talked with them about Bitcoin and they
showed no prejudice, might've actually made them more willing to help me cause
otherwise they would think I'm a hacker.
> 
> tl;dr The good news is anyone
with AT&T can be a full node by getting a public static IP, the bad news is
almost no one will figure this out unless we as a community make it well known.
I guarantee node numbers will improve if this information is spread to everyone.
Database size and computing expenditures is simply not the reason people don't
run full nodes, it's because their ISP has made it just about impossible without
shelling out nearly 100% more money per month. If you don't pay the fee AT&T
would never tell you about the private subnet, at least based on my
experience.
> 
> 
> -----Original Message-----
> From: odinn
<odinn.cyberguerrilla at riseup.net>
> To: hurricanewarn1
<hurricanewarn1 at aol.com>; bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org>
>
Sent: Tue, Sep 1, 2015 3:16 am
> Subject: Re: [bitcoin-dev] AT&T has
effectively banned Bitcoin nodes by closing port 8333 via a hidden firewall in
the cable box
> 
> 
> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA512
>

> Another note on this subject
> to add to the stuff people have already
>
mentioned...
> 
> If you have the AT&T
> landline but don't use AT&T's
standard internet /
> tv (what they call Uverse)
> offering - that is, if you
prefer to use
> some local internet provider - you are
> probably better off
(in terms
> of avoiding not only this sort of
> blockage/censorship but as
well,
> potentially getting a better privacy policy
> that isn't going to
be
> like AT&T's long-term data retention).  You can check
> directly with
>
the various local small ISPs to see what their policies
> are
> specifically
on ports and whatnot.
> 
> Ideally your ISP should let
> you:
> 
> port
forward to SOMEPORTNUMBER for tcp and udp
> 
> (above may or may not
> be
helpful for some if you are using
> decentralized markets)
> 
> have port
8333
> open
> 
> (above is for bitcoin of course)
> 
> Supposing you have
FTTN because you
> are paying a local ISP for
> internet service, and that
local ISP has contracted
> with AT&T to be
> able to provide service in an
area where old-style DSL has been
> phased
> out, thus your local ISP is
essentially providing you AT&T FTTN.
> (FTTN
> is Fiber to the Node, FTTN-BP
is FTTN Bonded Pair).  Even if a
> local ISP has
> its own privacy policy
posted which is different from
> AT&T, everything is
> subject to AT&T data
retention because the FTTN.
> So get yourself a VPN (or set
> up your own) for
your connection. Tor
> will run through the VPN.
> 
> General
> observations
- TWC stores your IP and other stuffs for 6
> months or longer. 
> Same for
Comcast.  Verizon retains your stuffs for
> 18 month minimum, probably
>
longer though. Qwest/Century, 1 year.
> Cox, 6 months.  AT&T retains for
longer
> than a year.  This is just
> what they are telling you, the reality
is it's
> probably longer due to
> stuff like
> this:
>
https://www.lawfareblog.com/odni-and-doj-release-last-section-215-collec
>
tion-order
> 
> 
> 
> 
> 
> 
> 
> 
> 
> Zach
> G via bitcoin-dev:
>
> I have been struggling to get port 8333 open all year, I
> gave up
> > and
was using blockchain for months despite a strong desire to
> stay
> > on
Bitcoin Core, but now the issue has reached critical mass since
> >
> I'm
using the python Bitcoin server module. I have literally spent
> > my entire
>
day trying to open 8333, I thoroughly made sure it was
> > open on the router
and
> computer and it's still closed. Strangely
> > enough I got it open for
30 seconds
> once today but something closed
> > it immediately.
> > 
> >
After hours of phone
> calls and messaging AT&T finally told me the
> > truth
of what was going on, and
> only because I noticed it myself
> > and demanded
an answer. The internet is
> being routed through a
> > DVR/cable box, and
they confirmed the DVR also has a
> firewall. To
> > make this even more
absurd they refused to turn the firewall
> off
> > because it is their
equipment. So effectively they can firewall any
> >
> port they want even if
the customer asks them not to, in the
> > unlikely event
> the customer
figures it out.
> > 
> > Perhaps this is the driving force behind the
>
inexplicable and
> > massive decline in Bitcoin nodes. Bitcoin is being
censored
> by the
> > ISPs themselves, and they won't even tell you that. I
had to get in
> >
> touch with headquarters and threaten to rip it out of the
wall to
> > get a
> proper answer.
> > 
> > 
> > 
> >
_______________________________________________
> bitcoin-dev mailing
> > list
bitcoin-dev at lists.linuxfoundation.org 
> >
>
https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> > 
> 
> -
--
> 
> http://abis.io ~
> "a protocol concept to enable decentralization
>
and
> expansion of a giving economy, and a new social
> good"
>
https://keybase.io/odinn
> -----BEGIN PGP
> SIGNATURE-----
> 
>
iQEcBAEBCgAGBQJV5VDeAAoJEGxwq/inSG8CvkIH/jy4Vo+My3xeBdvFQmxkJWyQ
>
U5mv2zWEvBYw71Xy1EDzQY1AhEBmatUU1eu2AbOqXdUR4511FxCNzFmTxy6roEiz
>
EehBkvXNbBCbEzLRisjxuQw34OKM+xfieCqE1mzJok2uSdLMMQLcbWL1/k3/OmS5
>
9O9z/wMXqU1Jc19MTK+vF1Lz5ilnRn3hEbTaCN3ivYnYFa0DpBH9r0Y07UcoJ6Wr
>
ui/x0sSSuupAGzOkZ75HQ8yeQXckeAu6TB3/jE8QEqNUmAJkmR8eK4ofXZWFrIjy
>
mOKeQL4c+jRQnTR8pt+y89g2QIpzFoHaV5T+WvQuC1t8xNOrxLgYFXWgl0dhoYE=
> =UCLC
>
-----END
> PGP SIGNATURE-----
> 
>  

 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150902/acbda28d/attachment-0001.html>

From hurricanewarn1 at aol.com  Wed Sep  2 13:44:53 2015
From: hurricanewarn1 at aol.com (hurricanewarn1 at aol.com)
Date: Wed, 2 Sep 2015 09:44:53 -0400
Subject: [bitcoin-dev] AT&T has effectively banned Bitcoin nodes via
 utilizing private subnets.
In-Reply-To: <1954364.4gG0cHmrlB@crushinator>
Message-ID: <14f8e4d93c5-1774-fc36@webprd-a78.mail.aol.com>

42 in the whole world, and I'm one of them. Clearly that is a problem, do you even know about AT&T or are you in another country? Cause that statement is utterly ridiculous given the fact there are hundreds of millions of people using AT&T. I was simply sharing my knowledge on this issue since it poses a threat to the health of the bitcoin network, no need for personal attacks. 

None of my accusations were false, there is a firewall in the DVR that is uncontrolled and all ports are blocked via private subnets and no fixed public IP allowed unless you pay. I confirmed every one of these details with AT&T technicians or I wouldn't be saying them.

 

 

 

-----Original Message-----
From: Matt Whitlock <bip at mattwhitlock.name>
To: hurricanewarn1 <hurricanewarn1 at aol.com>
Sent: Wed, Sep 2, 2015 5:34 am
Subject: Re: [bitcoin-dev] AT&T has effectively banned Bitcoin nodes via utilizing private subnets.


According to BitNodes, 42 Bitcoin nodes are running on AT&T's
network:

https://getaddr.bitnodes.io/nodes/?q=AT%26T

So I'm thinking
there's nothing wrong with AT&T's default network configuration.

Frankly, the
things you've been writing strongly suggest that you aren't very knowledgeable
about computer networking. Instead of jumping right into making wild accusations
about AT&T, you probably should find someone knowledgeable to verify your
claims.


On Wednesday, 2 September 2015, at 5:20 am, Zach G via bitcoin-dev
wrote:
> First off I couldn't synch the wallet, it said no block source
available and there was zero connections. Bitcoin was literally getting thottled
every second. It would not even allow the connection to get block source. EVERY
port was blocked, making exceptions in the router firewall did nothing. I was
forced to use Blockchain.info which is a major security risk.
> 
> Secondly, I
am developing a program using Bitcoin Python modules, so I login to my computer
like it's a server and it was flat out rejecting the connection. I could not run
any code until this got fixed, and of course needed the block source to even do
anything. 
> 
> If Bitcoin Core worked but 8333 was blocked I would not be
emailing the list. Bitcoin Core was crippled and unusable due to the AT&T
settings, and they tried hard to get me to buy monthly subscriptions to get the
answer. This makes it likely that Bitcoin Core is unusable for most AT&T
customers and other ISPs, hence the massive node decline. I'm sure this disrupts
alot of other people besides Bitcoiners too, hence the monthly subscriptions
geared towards people who can't figure out their connection situation.
> 
>
AT&T literally blocked access to static IP if you don't buy one, so it wasn't a
normal network setup. Unfortunately the same security used to stop hackers and
viruses stops Bitcoin too, so this is probably the settings for almost every
router in the country. Nodes are in fact declining worldwide, down 15% in the
past year alone. Community needs to speak up and also educate before this gets
completely out of control. https://getaddr.bitnodes.io/dashboard/?days=365 6,000
nodes is pathetic as it is and it's constantly declining.
>  
> 
>  
> 
>
-----Original Message-----
> From: Matt Whitlock <bip at mattwhitlock.name>
> To:
hurricanewarn1 <hurricanewarn1 at aol.com>
> Sent: Wed, Sep 2, 2015 4:32 am
>
Subject: Re: [bitcoin-dev] AT&T has effectively banned Bitcoin nodes via
utilizing private subnets.
> 
> 
> Respectfully, what the heck are you
talking about? Practically every home LAN
> runs on a private subnet. My own
desktop computer has the IP address
> 192.168.1.34, which is in a private
subnet. This doesn't prevent my Bitcoin Core
> node from making outbound
connections to other nodes. Moreover, almost all home
> Internet connections in
the world run on dynamically assigned IP addresses.
> Again, this does not
cause any problems for connecting outbound to other Bitcoin
> nodes. It's true
that your node can't accept incoming connections unless you
> forward port 8333
on your router to your computer, but you don't need to be able
> to accept
incoming connections to participate in the Bitcoin network.
> 
> 
> On
>
Wednesday, 2 September 2015, at 3:20 am, Zach G via bitcoin-dev wrote:
> > 
>
>  I
> was about to buy a VPS for Bitcoin, but I really do need Bitcoin Core
for
> business reasons so I didn't give up. I once again thoroughly went
through my
> computer and made sure there was nothing blocking 8333, a couple
useful tools
> are CurrPorts and TCPView. I went through the router to make
sure there was no
> block of port 8333. I researched everything thoroughly and
was sure these were
> the right settings, but Bitcoin was still getting
throttled every second and
> stuck in sys_sent, and python kept saying the
target was rejecting the
> connection.
> > 
> > I finally stumbled upon
subnet settings, and saw that I had a
> private subnet, one of the few IPs that
are private on earth (
> https://www.arin.net/knowledge/address_filters.html ).
Uverse put all their
> customers on a private subnet by default. This made my
computer not only hidden
> but unroutable for any computer on the Bitcoin
network. That alone is enough to
> totally stop Bitcoin connections on any
port, but they made it even crazier by
> generating a dynamic IP that changes
all the time, so public IP was meaningless
> for my computer. 
> > 
> > I
switched over to a public subnet, and right there was
> a checkbox to allow
incoming connections. My static IP showed for a minute then
> became
dynamic/hidden again without me even touching anything. The final
> roadblock
was AT&T charges $15-30/month for a public static IP, which is
> obviously
insane and actually one could argue that violates their own terms of
> service.
So the router was still ignoring my public IP settings simply because I
>
wasn't paying for a public IP, and intentionally changing the settings back.
I
> asked for a free public IP and there was no response for awhile.
> > 
> >
I found
> this article on cryptocoinnews while working out:
>
https://www.cryptocoinsnews.com/isps-intentionally-blocking-bitcoin/ It's
based
> on the first email I sent, and was displayed prominently on their front
page. I
> posted a tweet publicly about it which referenced AT&T (
>
https://twitter.com/turtlehurricane/status/638930065980551168 ) and believe
it
> or not I had a static public IP and port 8333 was open about 1 minute
later. I
> don't know if it was a coincidence cause I already messaged them to
please do
> that an hour before, or if that article and tweet spurred them to
action. The
> timing was so ridiculous I think it's the latter. Without twitter
I probably
> wouldn't have succeeded, the technicians on twitter actually
answered all my
> questions 24/7 unlike phone technicians which were clueless
and trying to sell
> me a subscription for connection services help. And shout
out to cryptocoinnews
> for making this public. 
> > 
> > So to clarify, it
appears AT&T has not blocked
> port 8333 itself, but rather effectively blocked
all ports via the private
> subnet, which makes the computer hidden and
unroutable for incoming peers.
> Although this severely limits functionality
and cripples the ability to run a
> full node and many other programs it is
understandable, since it just about 100%
> prevents hackers from getting in,
since they can't even see your computer. What
> isn't understandable is that
AT&T technicians did not inform me about this until
> I changed the settings
myself, despite the fact it is a very obvious cause of
> ports being blocked.
It's probably just ignorance since AT&T has so many complex
> network settings
it's hard to keep track of, although I have a suspicion that
> someone in their
command chain is withholding information in an attempt to make
> them buy a
$15/month connection service, and once they buy that another
> $15-30/month is
needed to get the static IP.
> > 
> > As far as I know there is no
> easy to
find info on the internet about private subnets crippling the ability to
> use
Bitcoin. I believe this needs to be explicitly said in instructions for
>
running a full node, maybe it wasn't a problem in 2009 but now it is a major
>
issue. On default settings Bitcoin is 100% blocked, and most people do not
have
> the time or motivation to fix this. I talked to at least 10 AT&T
technicians and
> worked on it 2-3 days straight, did not receive the right
answer until I found
> it myself, although they certainly gave me some useful
clues about how the
> network works.
> > 
> > I am very happy that AT&T fixed
it, since other ISPs like
> Comcast appeared even worse. I openly talked with
them about Bitcoin and they
> showed no prejudice, might've actually made them
more willing to help me cause
> otherwise they would think I'm a hacker.
> >

> > tl;dr The good news is anyone
> with AT&T can be a full node by getting a
public static IP, the bad news is
> almost no one will figure this out unless
we as a community make it well known.
> I guarantee node numbers will improve
if this information is spread to everyone.
> Database size and computing
expenditures is simply not the reason people don't
> run full nodes, it's
because their ISP has made it just about impossible without
> shelling out
nearly 100% more money per month. If you don't pay the fee AT&T
> would never
tell you about the private subnet, at least based on my
> experience.
> > 
>
> 
> > -----Original Message-----
> > From: odinn
>
<odinn.cyberguerrilla at riseup.net>
> > To: hurricanewarn1
>
<hurricanewarn1 at aol.com>; bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org>
>
>
> Sent: Tue, Sep 1, 2015 3:16 am
> > Subject: Re: [bitcoin-dev] AT&T has
>
effectively banned Bitcoin nodes by closing port 8333 via a hidden firewall
in
> the cable box
> > 
> > 
> > -----BEGIN PGP SIGNED MESSAGE-----
> >
Hash: SHA512
> >
> 
> > Another note on this subject
> > to add to the stuff
people have already
> >
> mentioned...
> > 
> > If you have the AT&T
> >
landline but don't use AT&T's
> standard internet /
> > tv (what they call
Uverse)
> > offering - that is, if you
> prefer to use
> > some local
internet provider - you are
> > probably better off
> (in terms
> > of
avoiding not only this sort of
> > blockage/censorship but as
> well,
> >
potentially getting a better privacy policy
> > that isn't going to
> be
> >
like AT&T's long-term data retention).  You can check
> > directly with
> >
>
the various local small ISPs to see what their policies
> > are
> >
specifically
> on ports and whatnot.
> > 
> > Ideally your ISP should let
>
> you:
> > 
> > port
> forward to SOMEPORTNUMBER for tcp and udp
> > 
> >
(above may or may not
> > be
> helpful for some if you are using
> >
decentralized markets)
> > 
> > have port
> 8333
> > open
> > 
> > (above
is for bitcoin of course)
> > 
> > Supposing you have
> FTTN because you
> >
are paying a local ISP for
> > internet service, and that
> local ISP has
contracted
> > with AT&T to be
> > able to provide service in an
> area where
old-style DSL has been
> > phased
> > out, thus your local ISP is
>
essentially providing you AT&T FTTN.
> > (FTTN
> > is Fiber to the Node,
FTTN-BP
> is FTTN Bonded Pair).  Even if a
> > local ISP has
> > its own
privacy policy
> posted which is different from
> > AT&T, everything is
> >
subject to AT&T data
> retention because the FTTN.
> > So get yourself a VPN
(or set
> > up your own) for
> your connection. Tor
> > will run through the
VPN.
> > 
> > General
> > observations
> - TWC stores your IP and other
stuffs for 6
> > months or longer. 
> > Same for
> Comcast.  Verizon retains
your stuffs for
> > 18 month minimum, probably
> >
> longer though.
Qwest/Century, 1 year.
> > Cox, 6 months.  AT&T retains for
> longer
> > than
a year.  This is just
> > what they are telling you, the reality
> is it's
>
> probably longer due to
> > stuff like
> > this:
> >
>
https://www.lawfareblog.com/odni-and-doj-release-last-section-215-collec
> >
>
tion-order
> > 
> > 
> > 
> > 
> > 
> > 
> > 
> > 
> > 
> > Zach
> >
G via bitcoin-dev:
> >
> > I have been struggling to get port 8333 open all
year, I
> > gave up
> > > and
> was using blockchain for months despite a
strong desire to
> > stay
> > > on
> Bitcoin Core, but now the issue has
reached critical mass since
> > >
> > I'm
> using the python Bitcoin server
module. I have literally spent
> > > my entire
> >
> day trying to open 8333,
I thoroughly made sure it was
> > > open on the router
> and
> > computer and
it's still closed. Strangely
> > > enough I got it open for
> 30 seconds
> >
once today but something closed
> > > it immediately.
> > > 
> > >
> After
hours of phone
> > calls and messaging AT&T finally told me the
> > > truth
>
of what was going on, and
> > only because I noticed it myself
> > > and
demanded
> an answer. The internet is
> > being routed through a
> > >
DVR/cable box, and
> they confirmed the DVR also has a
> > firewall. To
> > >
make this even more
> absurd they refused to turn the firewall
> > off
> > >
because it is their
> equipment. So effectively they can firewall any
> > >
>
> port they want even if
> the customer asks them not to, in the
> > >
unlikely event
> > the customer
> figures it out.
> > > 
> > > Perhaps this
is the driving force behind the
> >
> inexplicable and
> > > massive decline
in Bitcoin nodes. Bitcoin is being
> censored
> > by the
> > > ISPs
themselves, and they won't even tell you that. I
> had to get in
> > >
> >
touch with headquarters and threaten to rip it out of the
> wall to
> > > get
a
> > proper answer.
> > > 
> > > 
> > > 
> > >
>
_______________________________________________
> > bitcoin-dev mailing
> > >
list
> bitcoin-dev at lists.linuxfoundation.org 
> > >
> >
>
https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> > > 
> > 
>
> -
> --
> > 
> > http://abis.io ~
> > "a protocol concept to enable
decentralization
> >
> and
> > expansion of a giving economy, and a new
social
> > good"
> >
> https://keybase.io/odinn
> > -----BEGIN PGP
> >
SIGNATURE-----
> > 
> >
>
iQEcBAEBCgAGBQJV5VDeAAoJEGxwq/inSG8CvkIH/jy4Vo+My3xeBdvFQmxkJWyQ
> >
>
U5mv2zWEvBYw71Xy1EDzQY1AhEBmatUU1eu2AbOqXdUR4511FxCNzFmTxy6roEiz
> >
>
EehBkvXNbBCbEzLRisjxuQw34OKM+xfieCqE1mzJok2uSdLMMQLcbWL1/k3/OmS5
> >
>
9O9z/wMXqU1Jc19MTK+vF1Lz5ilnRn3hEbTaCN3ivYnYFa0DpBH9r0Y07UcoJ6Wr
> >
>
ui/x0sSSuupAGzOkZ75HQ8yeQXckeAu6TB3/jE8QEqNUmAJkmR8eK4ofXZWFrIjy
> >
>
mOKeQL4c+jRQnTR8pt+y89g2QIpzFoHaV5T+WvQuC1t8xNOrxLgYFXWgl0dhoYE=
> > =UCLC
>
>
> -----END
> > PGP SIGNATURE-----
> > 
> >  
> 
>  

 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150902/960fffea/attachment-0001.html>

From justus at openbitcoinprivacyproject.org  Wed Sep  2 18:51:08 2015
From: justus at openbitcoinprivacyproject.org (Justus Ranvier)
Date: Wed, 2 Sep 2015 13:51:08 -0500
Subject: [bitcoin-dev] Your Gmaxwell exchange
In-Reply-To: <20150901202938.GA4286@amethyst.visucore.com>
References: <CAEgR2PFB3h_8fr=d8HegRSD0XdooimhFKtLR4vKr2QXv+EwBfQ@mail.gmail.com>
	<AD284610-4F40-445C-A074-CC94EDFFCBA8@gmx.com>
	<CAAS2fgRs5NVM2nHKNXbgMJa51tDq-6ZBc6XfaScyP45UPWTW_g@mail.gmail.com>
	<5CC48639-11D0-4682-BF82-443286C8E58D@gmx.com>
	<CAAS2fgShF=2vtPrKtXmdA454s_xpJbxSB0SFBsstniHB8WtGzQ@mail.gmail.com>
	<CAKuKjyUpJOMdDCjGmo1tYc6sA3r69VAXpvzhMJ7EZSHtb9C9Sw@mail.gmail.com>
	<55E4A32F.9080908@openbitcoinprivacyproject.org>
	<20150901202938.GA4286@amethyst.visucore.com>
Message-ID: <55E7451C.3010704@openbitcoinprivacyproject.org>

On 09/01/2015 03:29 PM, Wladimir J. van der Laan wrote:
> On Mon, Aug 31, 2015 at 01:55:43PM -0500, Justus Ranvier via bitcoin-dev wrote:
> 
>> * They should own their bitcoins, meaning that they retain exclusive
>> control over their balances. Even more precisely, the network must
>> always honour the conditions of the scripts associated with unspent outputs.
>>
>> * Their fraction of the Bitcoin ledger must not be diluted.
>>
>> * When they decide to spend their coins, they will be able to do so
>> without requiring permission from a third party.
> 
> All of these properties are contingent on the system being decentralized.

That is not true, unless you are using a definition of the word
"decentralized" which is so broad as to convey no information whatsoever.

Saying that Bitcoin's security depends on decentralization is like
saying that a bridge's structural integrity depends on good materials.

Statements like that convey zero relevant information. Potential users
of a bridge want to know about the maximum working load of the bridge,
and under which conditions it is safe to use. At what wind speed should
the bridge be closed? Is it ok to keep using it after a magnitude 4
earthquake, or should it be closed for inspection?

Repeatedly asserting that bridges need to be made of good materials as
an alternative to answering those kinds of questions would be easily
recognized as useless in that context, but for some reason people seem
to accept it in this one.


-- 
Justus Ranvier
Open Bitcoin Privacy Project
http://www.openbitcoinprivacyproject.org/
justus at openbitcoinprivacyproject.org
E7AD 8215 8497 3673 6D9E 61C4 2A5F DA70 EAD9 E623
-------------- next part --------------
A non-text attachment was scrubbed...
Name: 0xEAD9E623.asc
Type: application/pgp-keys
Size: 18381 bytes
Desc: not available
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150902/d0a332af/attachment.bin>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 801 bytes
Desc: OpenPGP digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150902/d0a332af/attachment.sig>

From bip at mattwhitlock.name  Wed Sep  2 19:21:48 2015
From: bip at mattwhitlock.name (Matt Whitlock)
Date: Wed, 02 Sep 2015 15:21:48 -0400
Subject: [bitcoin-dev] AT&T has effectively banned Bitcoin nodes via
	utilizing private subnets.
In-Reply-To: <14f8e4d93c5-1774-fc36@webprd-a78.mail.aol.com>
References: <14f8e4d93c5-1774-fc36@webprd-a78.mail.aol.com>
Message-ID: <2439331.T3Lg2rgENG@crushinator>

I've been trying to keep our discussion off-list because it is off-topic, but you keep adding the list back on in your replies.

http://steamforge.net/wiki/images/2/29/Settings-Firewall-Advanced.png

Settings > Firewall > Advanced Configuration > Outbound Protocol Control > All Other Protocols

That's all you had to do.


On Wednesday, 2 September 2015, at 9:44 am, Zach G via bitcoin-dev wrote:
> 42 in the whole world, and I'm one of them. Clearly that is a problem, do you even know about AT&T or are you in another country? Cause that statement is utterly ridiculous given the fact there are hundreds of millions of people using AT&T. I was simply sharing my knowledge on this issue since it poses a threat to the health of the bitcoin network, no need for personal attacks. 
> 
> None of my accusations were false, there is a firewall in the DVR that is uncontrolled and all ports are blocked via private subnets and no fixed public IP allowed unless you pay. I confirmed every one of these details with AT&T technicians or I wouldn't be saying them.
> 
>  
> 
>  
> 
>  
> 
> -----Original Message-----
> From: Matt Whitlock <bip at mattwhitlock.name>
> To: hurricanewarn1 <hurricanewarn1 at aol.com>
> Sent: Wed, Sep 2, 2015 5:34 am
> Subject: Re: [bitcoin-dev] AT&T has effectively banned Bitcoin nodes via utilizing private subnets.
> 
> 
> According to BitNodes, 42 Bitcoin nodes are running on AT&T's
> network:
> 
> https://getaddr.bitnodes.io/nodes/?q=AT%26T
> 
> So I'm thinking
> there's nothing wrong with AT&T's default network configuration.
> 
> Frankly, the
> things you've been writing strongly suggest that you aren't very knowledgeable
> about computer networking. Instead of jumping right into making wild accusations
> about AT&T, you probably should find someone knowledgeable to verify your
> claims.
> 
> 
> On Wednesday, 2 September 2015, at 5:20 am, Zach G via bitcoin-dev
> wrote:
> > First off I couldn't synch the wallet, it said no block source
> available and there was zero connections. Bitcoin was literally getting thottled
> every second. It would not even allow the connection to get block source. EVERY
> port was blocked, making exceptions in the router firewall did nothing. I was
> forced to use Blockchain.info which is a major security risk.
> > 
> > Secondly, I
> am developing a program using Bitcoin Python modules, so I login to my computer
> like it's a server and it was flat out rejecting the connection. I could not run
> any code until this got fixed, and of course needed the block source to even do
> anything. 
> > 
> > If Bitcoin Core worked but 8333 was blocked I would not be
> emailing the list. Bitcoin Core was crippled and unusable due to the AT&T
> settings, and they tried hard to get me to buy monthly subscriptions to get the
> answer. This makes it likely that Bitcoin Core is unusable for most AT&T
> customers and other ISPs, hence the massive node decline. I'm sure this disrupts
> alot of other people besides Bitcoiners too, hence the monthly subscriptions
> geared towards people who can't figure out their connection situation.
> > 
> >
> AT&T literally blocked access to static IP if you don't buy one, so it wasn't a
> normal network setup. Unfortunately the same security used to stop hackers and
> viruses stops Bitcoin too, so this is probably the settings for almost every
> router in the country. Nodes are in fact declining worldwide, down 15% in the
> past year alone. Community needs to speak up and also educate before this gets
> completely out of control. https://getaddr.bitnodes.io/dashboard/?days=365 6,000
> nodes is pathetic as it is and it's constantly declining.

From ahmedzsales18 at gmail.com  Wed Sep  2 20:28:53 2015
From: ahmedzsales18 at gmail.com (Ahmed Zsales)
Date: Wed, 2 Sep 2015 21:28:53 +0100
Subject: [bitcoin-dev] Open Block Chain Licence, BIP[xxxx] Draft
In-Reply-To: <CAEz79Po2S0VS0xEvzciLq4w7bLMuLF3Kyr0H5h+jWeYZW1QSpQ@mail.gmail.com>
References: <CADr=VrRT2tdN0jjkZ7HjjeyqonrHG=j+uh8m1L2nhew7c1gnng@mail.gmail.com>
	<CAEz79Po2S0VS0xEvzciLq4w7bLMuLF3Kyr0H5h+jWeYZW1QSpQ@mail.gmail.com>
Message-ID: <CADr=VrRhCeVidt_M2y8JpTHj++jZqpqjg_4f1K1rgm9FMxjhnA@mail.gmail.com>

Thanks Warren, very good feedback.

To avoid taking up too much of everyone's time at this point, I
think Wladimir's suggestion of placing this in a BIP advisory box for a
while is a good one. We did indicate that this might take a while to
gestate.

It is probably for us to do some further investigations and possibly engage
some input from a few miners.  We don't want to play at being lawyer, but
our review does point towards this being something worth coming back to.

In terms of citation, we did reference a case called *Feist*. We also found
some general database protection details which are relevant to the USA, if
you need any bed time reading:

http://copyright.gov/reports/dbase.html

For now, thanks to everyone for feedback and comments.

Regards,

Ahmed

On Wed, Sep 2, 2015 at 9:56 AM, Warren Togami Jr. via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> I am skeptical that any license for the blockchain itself is needed
> because of the possibility that the blockchain is not entitled to copyright
> protection.  While I am not a lawyer, I have stared hard at the copyright
> doctrine of the U.S. in multiple law school Intellectual Property courses
> and during my previous career in Open Source Software where copyright
> matters a great deal.
>
> As each owner of a
>> coin makes a transfer by digitally signing a hash of the previous
>> transaction along with the
>> new owner?s public key, the block chain is a perpetual compilation of
>> unique data.
>> *It is therefore compiled in a creative and non-obvious way.* In the
>> USA, for example, these
>> attributes confer legal protections for databases which have been ruled
>> upon by the courts.
>
>
> This portion of your paper I believe is not true and requires citations if
> you want to be convincing.  Is it truly "creative and non-obvious"?  My
> understanding under at least U.S. law, the blockchain may not be entitled
> to copyright protection because a compilation created in a mechanical
> manner is not a creative work of a human.
>
> I suppose a transaction could contain a "creative" element if it contains
> arbitrary bytes of a message or clever script.  For the most part though
> most of what you call "digitally signing a hash of the previous transaction
> along with the new owner?s public key" is purely the result of a mechanical
> process and really is not creative.  Furthermore, even if that output were
> "non-obvious", obviousness has nothing to do with copyrightability.
>
> Your license is correct in intent in attempting to exclude from the
> royalty free grant works within the blockchain that themselves may be
> subject to copyright of third parties.  The elements within the blockchain
> may be entitled individually to copyright if they are in any way a creative
> work of a human, but as a compilation I am doubtful the blockchain itself
> is entitled to copyright.
>
> I understand copyright with respect to databases can be different under
> other jurisdictions.  Your paper mentions the European database law that is
> indeed different from the U.S.  Your paper is incomplete in scholarly and
> legal citations.  I myself and we as a community don't know enough.  I
> suppose this topic merits further study.
>
> Warren Togami
>
> On Tue, Sep 1, 2015 at 6:30 AM, Ahmed Zsales via bitcoin-dev <
> bitcoin-dev at lists.linuxfoundation.org> wrote:
>
>> Hello,
>>
>> We believe the network requires a block chain licence to supplement the
>> existing MIT Licence which we believe only covers the core reference client
>> software.
>>
>> Replacing or amending the existing MIT Licence is beyond the scope of
>> this draft BIP.
>>
>> Rationale and details of our draft BIP for discussion and evaluation are
>> here:
>>
>>
>> https://drive.google.com/file/d/0BwEbhrQ4ELzBMVFxajNZa2hzMTg/view?usp=sharing
>>
>> Regards,
>>
>> Ahmed
>>
>> _______________________________________________
>> bitcoin-dev mailing list
>> bitcoin-dev at lists.linuxfoundation.org
>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>
>>
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150902/e322b19b/attachment.html>

From hurricanewarn1 at aol.com  Wed Sep  2 20:31:05 2015
From: hurricanewarn1 at aol.com (hurricanewarn1 at aol.com)
Date: Wed, 2 Sep 2015 16:31:05 -0400
Subject: [bitcoin-dev] AT&T has effectively banned Bitcoin nodes via
 utilizing private subnets.
In-Reply-To: <2439331.T3Lg2rgENG@crushinator>
Message-ID: <14f8fc177d4-1774-117a9@webprd-a78.mail.aol.com>

When you assume you make an ass out of you and me. That page doesn't even exist in my router, I don't have 2wire. The router I have is the one everyone is getting from uverse.

Literally everything you said is incorrect. It is completely on topic as it pertains to Bitcoin Core functionality, 42 connections is nothing, and that's not how you fix it. If you're gonna call me out for being wrong at least be correct! I spent a lot of time fixing this and the info is useful cause this problem happens to a lot of people, so why obfuscate it with this nonsense. 

AT&T u-verse as it is now is near impossible for bitcoin nodes, 42 in the world is absolutely pathetic considering they are among the top 2 ISPs in the USA. Thanks for proving my point.

 

 

-----Original Message-----
From: Matt Whitlock <bip at mattwhitlock.name>
To: hurricanewarn1 <hurricanewarn1 at aol.com>
Cc: bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org>
Sent: Wed, Sep 2, 2015 3:21 pm
Subject: Re: [bitcoin-dev] AT&T has effectively banned Bitcoin nodes via utilizing private subnets.


I've been trying to keep our discussion off-list because it is off-topic, but
you keep adding the list back on in your
replies.

http://steamforge.net/wiki/images/2/29/Settings-Firewall-Advanced.png

Settings
> Firewall > Advanced Configuration > Outbound Protocol Control > All Other
Protocols

That's all you had to do.


On Wednesday, 2 September 2015, at
9:44 am, Zach G via bitcoin-dev wrote:
> 42 in the whole world, and I'm one of
them. Clearly that is a problem, do you even know about AT&T or are you in
another country? Cause that statement is utterly ridiculous given the fact there
are hundreds of millions of people using AT&T. I was simply sharing my knowledge
on this issue since it poses a threat to the health of the bitcoin network, no
need for personal attacks. 
> 
> None of my accusations were false, there is a
firewall in the DVR that is uncontrolled and all ports are blocked via private
subnets and no fixed public IP allowed unless you pay. I confirmed every one of
these details with AT&T technicians or I wouldn't be saying them.
> 
>  
>

>  
> 
>  
> 
> -----Original Message-----
> From: Matt Whitlock
<bip at mattwhitlock.name>
> To: hurricanewarn1 <hurricanewarn1 at aol.com>
> Sent:
Wed, Sep 2, 2015 5:34 am
> Subject: Re: [bitcoin-dev] AT&T has effectively
banned Bitcoin nodes via utilizing private subnets.
> 
> 
> According to
BitNodes, 42 Bitcoin nodes are running on AT&T's
> network:
> 
>
https://getaddr.bitnodes.io/nodes/?q=AT%26T
> 
> So I'm thinking
> there's
nothing wrong with AT&T's default network configuration.
> 
> Frankly, the
>
things you've been writing strongly suggest that you aren't very
knowledgeable
> about computer networking. Instead of jumping right into making
wild accusations
> about AT&T, you probably should find someone knowledgeable
to verify your
> claims.
> 
> 
> On Wednesday, 2 September 2015, at 5:20 am,
Zach G via bitcoin-dev
> wrote:
> > First off I couldn't synch the wallet, it
said no block source
> available and there was zero connections. Bitcoin was
literally getting thottled
> every second. It would not even allow the
connection to get block source. EVERY
> port was blocked, making exceptions in
the router firewall did nothing. I was
> forced to use Blockchain.info which is
a major security risk.
> > 
> > Secondly, I
> am developing a program using
Bitcoin Python modules, so I login to my computer
> like it's a server and it
was flat out rejecting the connection. I could not run
> any code until this
got fixed, and of course needed the block source to even do
> anything. 
> >

> > If Bitcoin Core worked but 8333 was blocked I would not be
> emailing the
list. Bitcoin Core was crippled and unusable due to the AT&T
> settings, and
they tried hard to get me to buy monthly subscriptions to get the
> answer.
This makes it likely that Bitcoin Core is unusable for most AT&T
> customers
and other ISPs, hence the massive node decline. I'm sure this disrupts
> alot
of other people besides Bitcoiners too, hence the monthly subscriptions
>
geared towards people who can't figure out their connection situation.
> > 
>
>
> AT&T literally blocked access to static IP if you don't buy one, so it
wasn't a
> normal network setup. Unfortunately the same security used to stop
hackers and
> viruses stops Bitcoin too, so this is probably the settings for
almost every
> router in the country. Nodes are in fact declining worldwide,
down 15% in the
> past year alone. Community needs to speak up and also educate
before this gets
> completely out of control.
https://getaddr.bitnodes.io/dashboard/?days=365 6,000
> nodes is pathetic as it
is and it's constantly declining.

 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150902/df785a6e/attachment.html>

From milly at bitcoins.info  Wed Sep  2 20:58:38 2015
From: milly at bitcoins.info (Milly Bitcoin)
Date: Wed, 2 Sep 2015 16:58:38 -0400
Subject: [bitcoin-dev] Open Block Chain Licence, BIP[xxxx] Draft
In-Reply-To: <CADr=VrRhCeVidt_M2y8JpTHj++jZqpqjg_4f1K1rgm9FMxjhnA@mail.gmail.com>
References: <CADr=VrRT2tdN0jjkZ7HjjeyqonrHG=j+uh8m1L2nhew7c1gnng@mail.gmail.com>
	<CAEz79Po2S0VS0xEvzciLq4w7bLMuLF3Kyr0H5h+jWeYZW1QSpQ@mail.gmail.com>
	<CADr=VrRhCeVidt_M2y8JpTHj++jZqpqjg_4f1K1rgm9FMxjhnA@mail.gmail.com>
Message-ID: <55E762FE.9060904@bitcoins.info>

>We don't want to play at being
> lawyer, but our review does point towards this being something worth
> coming back to.
>
> In terms of citation, we did reference a case called /Feist/.

I don't see how you can possibly conclude this effort is worth any 
additional time.  The legal reference is:  Feist Publications, Inc., v. 
Rural Telephone Service Co., 499 U.S. 340 (1991).  The court ruled that 
Rural's directory was nothing more than an alphabetic list of all 
subscribers to its service, which it was required to compile under law, 
and that no creative expression was involved. The fact that Rural spent 
considerable time and money collecting the data was irrelevant to 
copyright law, and Rural's copyright claim was dismissed.

If some entity puts a copyright notice, demands a license, signs 
software with a certificate, claims developers or miners are some legal 
entity, etc. then those entities are setting themselves up to be sued or 
prosecuted (whether legitimately or not).  There is no benefit to 
claiming such ownership or authority or issuing any license because 
nobody is going to enforce anything and they don't even have that 
authority anyway.  A 5-minute talk with an IP lawyer should confirm that 
... but you sound like you are not going to do that.  Bitcoin certainly 
attracts quite a number of completely irrational people.

Russ




From jgarzik at gmail.com  Wed Sep  2 23:51:52 2015
From: jgarzik at gmail.com (Jeff Garzik)
Date: Wed, 2 Sep 2015 19:51:52 -0400
Subject: [bitcoin-dev] BIP 100 repo
Message-ID: <CADm_WcZpOxLJdxENe=GXqrp17C-Q2karunOvzegGz-NQ2b_AEg@mail.gmail.com>

Opened a repo containing the full text of BIP 100 discussion document, in
markdown format.

The BIP 100 formal spec will be checked in here as well, before submitting
to upstream bips.git repo.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150902/3380d204/attachment.html>

From jgarzik at gmail.com  Wed Sep  2 23:58:54 2015
From: jgarzik at gmail.com (Jeff Garzik)
Date: Wed, 2 Sep 2015 19:58:54 -0400
Subject: [bitcoin-dev] BIP 100 repo
In-Reply-To: <CADm_WcZpOxLJdxENe=GXqrp17C-Q2karunOvzegGz-NQ2b_AEg@mail.gmail.com>
References: <CADm_WcZpOxLJdxENe=GXqrp17C-Q2karunOvzegGz-NQ2b_AEg@mail.gmail.com>
Message-ID: <CADm_WcZEbAe_+VXxS1eMKQ1SM3KiJwVDS50-GtfUPw-Mdd5O2w@mail.gmail.com>

Oops, link paste fail.

The repo: https://github.com/jgarzik/bip100


On Wed, Sep 2, 2015 at 7:51 PM, Jeff Garzik <jgarzik at gmail.com> wrote:

> Opened a repo containing the full text of BIP 100 discussion document, in
> markdown format.
>
> The BIP 100 formal spec will be checked in here as well, before submitting
> to upstream bips.git repo.
>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150902/2b394143/attachment.html>

From luke at dashjr.org  Thu Sep  3 00:17:42 2015
From: luke at dashjr.org (Luke Dashjr)
Date: Thu, 3 Sep 2015 00:17:42 +0000
Subject: [bitcoin-dev] BIP 100 repo
In-Reply-To: <CADm_WcZEbAe_+VXxS1eMKQ1SM3KiJwVDS50-GtfUPw-Mdd5O2w@mail.gmail.com>
References: <CADm_WcZpOxLJdxENe=GXqrp17C-Q2karunOvzegGz-NQ2b_AEg@mail.gmail.com>
	<CADm_WcZEbAe_+VXxS1eMKQ1SM3KiJwVDS50-GtfUPw-Mdd5O2w@mail.gmail.com>
Message-ID: <201509030017.43036.luke@dashjr.org>

On Wednesday, September 02, 2015 11:58:54 PM Jeff Garzik via bitcoin-dev 
wrote:
> The repo: https://github.com/jgarzik/bip100

What is the purpose of the newly added 1 MB floor? It seems clear from the 
current information available that 1 MB is presently too high for the limit, 
and it is entirely one-sided to only allow increases when decreases are much 
more likely to be needed in the short term.

Must the new size limit votes use 11 bytes of coinbase? Why not just use a 
numeric value pushed after height? Since this is a hardfork, I suggest 
increasing the coinbase length to allow for 100 bytes *in addition* to the 
pushed height and size-vote.

I suggest combining 2 & 4 into a single rule lifting the 1 MB limit to 32 MB 
(or whatever value is deemed appropriate) to make it clear that the limit 
remains a part of the consensus protocol and p2p protocol limits are not to 
have an effect on consensus rules.

Furthermore, I suggest modifying the voting to require 50% to set the limit 
floor. This has the effect of merely coordinating what miners can already 
effectively do today by rejecting blocks larger than some collusion-
determined limit.

Thoughts?

Luke

From jgarzik at gmail.com  Thu Sep  3 03:33:29 2015
From: jgarzik at gmail.com (Jeff Garzik)
Date: Wed, 2 Sep 2015 23:33:29 -0400
Subject: [bitcoin-dev] BIP 100 specification
Message-ID: <CADm_WcZyK6LUcuKqSEuR-q0hTZOC3EdJsqY1HrS_ow0knDY=7A@mail.gmail.com>

BIP 100 initial public draft:
https://github.com/jgarzik/bip100/blob/master/bip-0100.mediawiki

Emphasis on "initial"  This is a starting point for the usual open source
feedback/iteration cycle, not an endpoint that Must Be This Way.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150902/0c11c03f/attachment.html>

From jgarzik at gmail.com  Thu Sep  3 03:38:33 2015
From: jgarzik at gmail.com (Jeff Garzik)
Date: Wed, 2 Sep 2015 23:38:33 -0400
Subject: [bitcoin-dev] BIP 100 repo
In-Reply-To: <201509030017.43036.luke@dashjr.org>
References: <CADm_WcZpOxLJdxENe=GXqrp17C-Q2karunOvzegGz-NQ2b_AEg@mail.gmail.com>
	<CADm_WcZEbAe_+VXxS1eMKQ1SM3KiJwVDS50-GtfUPw-Mdd5O2w@mail.gmail.com>
	<201509030017.43036.luke@dashjr.org>
Message-ID: <CADm_WcapYX+4wqd+6JLALt9FLJif8EL3v4dmuGHO5rnhTHpJSw@mail.gmail.com>

Luke,

- Definitely agree with most of your suggestions on the practical side;
several clarification could be made.
- The power to decrease the hard limit appears riskier long term in my
analysis.  This is mitigated somewhat by the ease at which miners may
locally or collectively lower the block size at any time, without a vote.


On Wed, Sep 2, 2015 at 8:17 PM, Luke Dashjr <luke at dashjr.org> wrote:

> On Wednesday, September 02, 2015 11:58:54 PM Jeff Garzik via bitcoin-dev
> wrote:
> > The repo: https://github.com/jgarzik/bip100
>
> What is the purpose of the newly added 1 MB floor? It seems clear from the
> current information available that 1 MB is presently too high for the
> limit,
> and it is entirely one-sided to only allow increases when decreases are
> much
> more likely to be needed in the short term.
>
> Must the new size limit votes use 11 bytes of coinbase? Why not just use a
> numeric value pushed after height? Since this is a hardfork, I suggest
> increasing the coinbase length to allow for 100 bytes *in addition* to the
> pushed height and size-vote.
>
> I suggest combining 2 & 4 into a single rule lifting the 1 MB limit to 32
> MB
> (or whatever value is deemed appropriate) to make it clear that the limit
> remains a part of the consensus protocol and p2p protocol limits are not to
> have an effect on consensus rules.
>
> Furthermore, I suggest modifying the voting to require 50% to set the limit
> floor. This has the effect of merely coordinating what miners can already
> effectively do today by rejecting blocks larger than some collusion-
> determined limit.
>
> Thoughts?
>
> Luke
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150902/a238869a/attachment.html>

From jgarzik at gmail.com  Thu Sep  3 04:05:11 2015
From: jgarzik at gmail.com (Jeff Garzik)
Date: Thu, 3 Sep 2015 00:05:11 -0400
Subject: [bitcoin-dev] block size - pay with difficulty
Message-ID: <CADm_Wcb+5Xo3HS-FNUYtCapVpYfVvUS_fxpU0Q=TZHJW1=iAFQ@mail.gmail.com>

Schemes proposing to pay with difficulty / hashpower to change block size
should be avoided.  The miners incentive has always been fairly
straightforward - it is rational to deploy new hashpower as soon as you can
get it online.  Introducing the concepts of (a) requiring out-of-band
collusion to change block size and/or (b) requiring miners to have idle
hashpower on hand to change block size are both unrealistic and potentially
corrosive.  That potentially makes the block size - and therefore fee
market - too close, too sensitive to the wild vagaries of the mining chip
market.

Pay-to-future-miner has neutral, forward looking incentives worth
researching.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150903/c3b89058/attachment.html>

From jgarzik at gmail.com  Thu Sep  3 04:09:25 2015
From: jgarzik at gmail.com (Jeff Garzik)
Date: Thu, 3 Sep 2015 00:09:25 -0400
Subject: [bitcoin-dev] BIP 100 repo
In-Reply-To: <201509030017.43036.luke@dashjr.org>
References: <CADm_WcZpOxLJdxENe=GXqrp17C-Q2karunOvzegGz-NQ2b_AEg@mail.gmail.com>
	<CADm_WcZEbAe_+VXxS1eMKQ1SM3KiJwVDS50-GtfUPw-Mdd5O2w@mail.gmail.com>
	<201509030017.43036.luke@dashjr.org>
Message-ID: <CADm_WcawXU3b5g_kuUCKxHQ2YVRPmVh6g33qWDWqdw-X4tSE7Q@mail.gmail.com>

Oh, and answering your question about the 1M:  It is a safety rail.  It can
perform no worse on the low end than the current system.  Eliminates
unlikely scenarios that squeeze users.


On Wed, Sep 2, 2015 at 8:17 PM, Luke Dashjr <luke at dashjr.org> wrote:

> On Wednesday, September 02, 2015 11:58:54 PM Jeff Garzik via bitcoin-dev
> wrote:
> > The repo: https://github.com/jgarzik/bip100
>
> What is the purpose of the newly added 1 MB floor? It seems clear from the
> current information available that 1 MB is presently too high for the
> limit,
> and it is entirely one-sided to only allow increases when decreases are
> much
> more likely to be needed in the short term.
>
> Must the new size limit votes use 11 bytes of coinbase? Why not just use a
> numeric value pushed after height? Since this is a hardfork, I suggest
> increasing the coinbase length to allow for 100 bytes *in addition* to the
> pushed height and size-vote.
>
> I suggest combining 2 & 4 into a single rule lifting the 1 MB limit to 32
> MB
> (or whatever value is deemed appropriate) to make it clear that the limit
> remains a part of the consensus protocol and p2p protocol limits are not to
> have an effect on consensus rules.
>
> Furthermore, I suggest modifying the voting to require 50% to set the limit
> floor. This has the effect of merely coordinating what miners can already
> effectively do today by rejecting blocks larger than some collusion-
> determined limit.
>
> Thoughts?
>
> Luke
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150903/133d57d9/attachment-0001.html>

From dscotese at litmocracy.com  Thu Sep  3 04:45:38 2015
From: dscotese at litmocracy.com (Dave Scotese)
Date: Wed, 2 Sep 2015 21:45:38 -0700
Subject: [bitcoin-dev] BIP 100 specification
In-Reply-To: <CADm_WcZyK6LUcuKqSEuR-q0hTZOC3EdJsqY1HrS_ow0knDY=7A@mail.gmail.com>
References: <CADm_WcZyK6LUcuKqSEuR-q0hTZOC3EdJsqY1HrS_ow0knDY=7A@mail.gmail.com>
Message-ID: <CAGLBAhdcuWNVzw4AOoe+2m7-TJEi=dXBL702rbrp28E3V9bLvQ@mail.gmail.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

I suggest revising these items for clarity (and I'm guessing on the first
one)

    Calculate hardLimit by examining the coinbase scriptSig votes of the
previous 12,000 blocks, and taking the 20th percentile.
    A new hardLimit may not increase or decrease by more than 1.2x beyond
the prior hardLimit.

to:

    The new hardLimit is calculated by sorting the coinbase scriptSig votes
of the last 12,000 blocks from lowest to highest and using the vote of the
2400th block.
    If the vote of the 2400th block is a change of less than 20%, use it as
the new hardLimit.  Otherwise, change the hardLimit to be closer to that
vote, to either 120% or 80% of the current hardLimit.

I don't understand #5, 75% rule.  Shouldn't invalid version 4 blocks always
be rejected?

notplato
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2

iQEcBAEBAgAGBQJV58/5AAoJEL8dSijmIbHt16IH/0jAr3v1HjWW7N1awNxeAABs
GIvOFYuZAcPkZvWZQc4JRAppglqeBfYqWl2gpyywSBK1SXjsY8zdo3t7xAK/IJfB
05hnv1GGutG3dLTzJBEXaPx62SLukepC1pzEH7rlwWvVuE9zcRqVE1eGbBEUjA9c
sGPr0z9BNeLoTbllyl3Jndz9N2Vnd6bBTxRgBlfkm/Y5ovc+GhyKZyX3Pdmj5Pga
E6foOsvqNXQJqPl8WCODsnfPSshyb7YRNFrBB9A+tpjvj4UMc8PxOpL6IX/nJpOt
jlfRoKVw2YBEodvda+9P6S54GlGFazyHhwJ11F5YCNnWW1bKoQrqJU6ofgmyxMM=
=QWra
-----END PGP SIGNATURE-----


On Wed, Sep 2, 2015 at 8:33 PM, Jeff Garzik via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> BIP 100 initial public draft:
> https://github.com/jgarzik/bip100/blob/master/bip-0100.mediawiki
>
> Emphasis on "initial"  This is a starting point for the usual open source
> feedback/iteration cycle, not an endpoint that Must Be This Way.
>
>
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
>


-- 
I like to provide some work at no charge to prove my value. Do you need a
techie?
I own Litmocracy <http://www.litmocracy.com> and Meme Racing
<http://www.memeracing.net> (in alpha).
I'm the webmaster for The Voluntaryist <http://www.voluntaryist.com> which
now accepts Bitcoin.
I also code for The Dollar Vigilante <http://dollarvigilante.com/>.
"He ought to find it more profitable to play by the rules" - Satoshi
Nakamoto
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150902/f858063b/attachment.html>

From benjamin.l.cordes at gmail.com  Thu Sep  3 04:55:17 2015
From: benjamin.l.cordes at gmail.com (Benjamin)
Date: Thu, 3 Sep 2015 05:55:17 +0100
Subject: [bitcoin-dev] BIP 100 repo
In-Reply-To: <CADm_WcawXU3b5g_kuUCKxHQ2YVRPmVh6g33qWDWqdw-X4tSE7Q@mail.gmail.com>
References: <CADm_WcZpOxLJdxENe=GXqrp17C-Q2karunOvzegGz-NQ2b_AEg@mail.gmail.com>
	<CADm_WcZEbAe_+VXxS1eMKQ1SM3KiJwVDS50-GtfUPw-Mdd5O2w@mail.gmail.com>
	<201509030017.43036.luke@dashjr.org>
	<CADm_WcawXU3b5g_kuUCKxHQ2YVRPmVh6g33qWDWqdw-X4tSE7Q@mail.gmail.com>
Message-ID: <CAOoPuRZLHGhmbu1a0NeDZDaFmUFf=yP3_k8jTawcRbhztyWT9w@mail.gmail.com>

I would be helpful to describe what is meant by "votes". As far as I
understand this would be a semi-automatic process - nodes encode values
which in turn are hardcoded in software, or is this completely automated
without any intervention at all? Is there the possibility that nodes decide
by encode votes, but somehow this decision is not adhered to? Is 4. a 51%
rule?

Under 2. it might make sense to specify values in the range (1MB steps
e.g.). The number of options could have an effect. For example if the vote
has 4 possible values or 32 possible values can make a difference in
outcomes.

With regards to 1. Bitcoin does not have a fee market, although I agree
that might be a good goal. There is no price-determination of fees and no
definition of quality of service. A fee market would entail some matching
of demand and supply to establish a price. Users would adjust fee to win a
transaction slow in a deterministic way. However currently the user has no
way of knowing what effect a fee might have. So this would necessarily
include some kind pricing-mechanism with actual commitments. Bitcoin as a
system is quite far away from such a capability. It would mean Bitcoin is
capable of adapting to how it is used. For example that would allow to
shift transactions from high demand period to low demand period. I'm not
aware of any proposal to make an actual functioning fee market in Bitcoin
(or even the conceptual primitives).



On Thu, Sep 3, 2015 at 5:09 AM, Jeff Garzik via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> Oh, and answering your question about the 1M:  It is a safety rail.  It
> can perform no worse on the low end than the current system.  Eliminates
> unlikely scenarios that squeeze users.
>
>
> On Wed, Sep 2, 2015 at 8:17 PM, Luke Dashjr <luke at dashjr.org> wrote:
>
>> On Wednesday, September 02, 2015 11:58:54 PM Jeff Garzik via bitcoin-dev
>> wrote:
>> > The repo: https://github.com/jgarzik/bip100
>>
>> What is the purpose of the newly added 1 MB floor? It seems clear from the
>> current information available that 1 MB is presently too high for the
>> limit,
>> and it is entirely one-sided to only allow increases when decreases are
>> much
>> more likely to be needed in the short term.
>>
>> Must the new size limit votes use 11 bytes of coinbase? Why not just use a
>> numeric value pushed after height? Since this is a hardfork, I suggest
>> increasing the coinbase length to allow for 100 bytes *in addition* to the
>> pushed height and size-vote.
>>
>> I suggest combining 2 & 4 into a single rule lifting the 1 MB limit to 32
>> MB
>> (or whatever value is deemed appropriate) to make it clear that the limit
>> remains a part of the consensus protocol and p2p protocol limits are not
>> to
>> have an effect on consensus rules.
>>
>> Furthermore, I suggest modifying the voting to require 50% to set the
>> limit
>> floor. This has the effect of merely coordinating what miners can already
>> effectively do today by rejecting blocks larger than some collusion-
>> determined limit.
>>
>> Thoughts?
>>
>> Luke
>>
>
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150903/218cbfe4/attachment.html>

From jl2012 at xbt.hk  Thu Sep  3 04:55:35 2015
From: jl2012 at xbt.hk (jl2012 at xbt.hk)
Date: Thu, 03 Sep 2015 00:55:35 -0400
Subject: [bitcoin-dev] block size - pay with difficulty
In-Reply-To: <CADm_Wcb+5Xo3HS-FNUYtCapVpYfVvUS_fxpU0Q=TZHJW1=iAFQ@mail.gmail.com>
References: <CADm_Wcb+5Xo3HS-FNUYtCapVpYfVvUS_fxpU0Q=TZHJW1=iAFQ@mail.gmail.com>
Message-ID: <d15669b6ce3dbc89dff6c907a5749034@xbt.hk>

Jeff Garzik via bitcoin-dev ? 2015-09-03 00:05 ??:
> Schemes proposing to pay with difficulty / hashpower to change block
> size should be avoided.  The miners incentive has always been fairly
> straightforward - it is rational to deploy new hashpower as soon as
> you can get it online.  Introducing the concepts of (a) requiring
> out-of-band collusion to change block size and/or (b) requiring miners
> to have idle hashpower on hand to change block size are both
> unrealistic and potentially corrosive.  That potentially makes the
> block size - and therefore fee market - too close, too sensitive to
> the wild vagaries of the mining chip market.
> 
> Pay-to-future-miner has neutral, forward looking incentives worth
> researching.
> 
> 
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev

Ref: 
https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-August/010723.html

I explained here why pay with difficulty is bad for everyone: miners and 
users, and described the use of OP_CLTV for pay-to-future-miner

However, a general problem of pay-to-increase-block-size scheme is it 
indirectly sets a minimal tx fee, which could be difficult and 
arbitrary, and is against competition



From odinn.cyberguerrilla at riseup.net  Thu Sep  3 06:41:20 2015
From: odinn.cyberguerrilla at riseup.net (odinn)
Date: Thu, 03 Sep 2015 06:41:20 +0000
Subject: [bitcoin-dev] BIP 100 repo
In-Reply-To: <CADm_WcZEbAe_+VXxS1eMKQ1SM3KiJwVDS50-GtfUPw-Mdd5O2w@mail.gmail.com>
References: <CADm_WcZpOxLJdxENe=GXqrp17C-Q2karunOvzegGz-NQ2b_AEg@mail.gmail.com>
	<CADm_WcZEbAe_+VXxS1eMKQ1SM3KiJwVDS50-GtfUPw-Mdd5O2w@mail.gmail.com>
Message-ID: <55E7EB90.3010509@riseup.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512

Excellent - thank you.

Jeff Garzik via bitcoin-dev:
> Oops, link paste fail.
> 
> The repo: https://github.com/jgarzik/bip100
> 
> 
> On Wed, Sep 2, 2015 at 7:51 PM, Jeff Garzik <jgarzik at gmail.com>
> wrote:
> 
>> Opened a repo containing the full text of BIP 100 discussion
>> document, in markdown format.
>> 
>> The BIP 100 formal spec will be checked in here as well, before
>> submitting to upstream bips.git repo.
>> 
>> 
>> 
> 
> 
> 
> _______________________________________________ bitcoin-dev mailing
> list bitcoin-dev at lists.linuxfoundation.org 
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> 

- -- 
http://abis.io ~
"a protocol concept to enable decentralization
and expansion of a giving economy, and a new social good"
https://keybase.io/odinn
-----BEGIN PGP SIGNATURE-----

iQEbBAEBCgAGBQJV5+uQAAoJEGxwq/inSG8CVBUH9A5GtIj3pLxZRlX0oDxSbIWJ
2830HURoeb40ShBlhbzO1nHiJtPhRPWqByZETQcuElBagMPreSKI5VZxJ1xaNOI3
o6yo9ujeLNlge1j53TOq8uQCXKnwrVsjS3yQkXlo+IX+Vihin5c/D4Xn9y97OqwQ
CixVswCJrrRrGHj6YaFsfAx+epaJ/aT4djoB0XjH9PKJI5b0cPGSBDipHbuVn3nd
FZidPAS/hHI0Sw3k0EHtYudjBXBbMi2hCad37asrg2cIF/sFbCA/BSkpuIi5agzY
50Wp8xm3gd4WWjEn/svhw2AIgH7R/1Yk2/qFImob5iXMm7sU1OUMHD325kN2dg==
=7a0Z
-----END PGP SIGNATURE-----

From gmaxwell at gmail.com  Thu Sep  3 06:57:44 2015
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Thu, 3 Sep 2015 06:57:44 +0000
Subject: [bitcoin-dev] block size - pay with difficulty
In-Reply-To: <CADm_Wcb+5Xo3HS-FNUYtCapVpYfVvUS_fxpU0Q=TZHJW1=iAFQ@mail.gmail.com>
References: <CADm_Wcb+5Xo3HS-FNUYtCapVpYfVvUS_fxpU0Q=TZHJW1=iAFQ@mail.gmail.com>
Message-ID: <CAAS2fgQOi0amBnPK8Ac3iGDN9CP-mLW6o0ncYdSAOAaqSboejg@mail.gmail.com>

On Thu, Sep 3, 2015 at 4:05 AM, Jeff Garzik via bitcoin-dev
<bitcoin-dev at lists.linuxfoundation.org> wrote:
> (b) requiring miners to have idle
> hashpower on hand to change block size are both unrealistic and potentially

I really cannot figure out how you could characterize pay with
difficty has in any way involving idle hashpower.

Can you walk me through this?

From jl2012 at xbt.hk  Thu Sep  3 07:57:09 2015
From: jl2012 at xbt.hk (jl2012 at xbt.hk)
Date: Thu, 03 Sep 2015 03:57:09 -0400
Subject: [bitcoin-dev] BIP 100 specification
In-Reply-To: <CADm_WcZyK6LUcuKqSEuR-q0hTZOC3EdJsqY1HrS_ow0knDY=7A@mail.gmail.com>
References: <CADm_WcZyK6LUcuKqSEuR-q0hTZOC3EdJsqY1HrS_ow0knDY=7A@mail.gmail.com>
Message-ID: <e54e93e519d776262f9c0f4ae23f54fb@xbt.hk>

 

Some comments:

 	* The 75% rule is meaningless here. Since this is a pure relaxation of
rules, there is no such thing as "invalid version 4 blocks"

	* 

The implication threshold is unclear. Is it 95% or 80%?

 	* Softfork requires a very high threshold (95%) to "attack" the
original fork. This makes sure that unupgraded client will only see the
new fork.
 	* In the case of hardfork, however, the new fork is unable to attack
the original fork, and unupgraded client will never see the new fork.
The initiation of a hardfork should be based on its acceptance by the
economic majority, not miner support. 95% is an overkill and may
probably never accomplished. I strongly prefer a 80% threshold rather
than 95%.

 	* As I've pointed out, using 20-percentile rather than median creates
an incentive to 51% attack the uncooperative minority.
https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-August/010690.html

Having said that, I don't have a strong feeling about the use of
20-percentile as threshold to increase the block size. That means the
block size is increased only when most miners agree, which sounds ok to
me. 

However, using 20-percentile as threshold to DECREASE the block size
could be very dangerous. Consider that the block size has been stable at
8MB for a few years. Everyone are happy with that. An attacker would
just need to acquire 21% of mining power to break the status quo and
send us all the way to 1MB. The only way to stop such attempt is to 51%
attack the attacker. That'd be really ugly. 

For technical and ethical reasons, I believe the thresholds for increase
and decrease must be symmetrical: increase the block size when the
x-percentile is bigger than the current size, decrease the block size
when the (100-x)-percentile is smaller than the current size. The
overall effect is: the block size remains unchanged unless 80% of miners
agree to. 

 	* Please consider the use of "hardfork bit" to signify the hardfork:

https://www.reddit.com/r/bitcoin_devlist/comments/3ekhg2/bip_draft_hardfork_bit_jl2012_at_xbthk_jul_23_2015/


https://github.com/jl2012/bips/blob/master/hardforkbit.mediawiki 

 	* Or, alternatively, please combine the hardfork with a softfork. I'm
rewriting the specification as follow (changes underlined):

 	* Replace static 1M block size hard limit with a floating limit
("hardLimit").

	* 

hardLimit floats within the range 1-32M, inclusive.

	* 

Initial value of hardLimit is 1M, preserving current system.
 	* Changing hardLimit is accomplished by encoding a proposed value
within a block's coinbase scriptSig.

 	* Votes refer to a byte value, encoded within the pattern "/BVd+/"
Example: /BV8000000/ votes for 8,000,000 byte hardLimit. If there is
more than one match with with pattern, the first match is counted.
 	* Absent/invalid votes and votes below minimum cap (1M) are counted as
1M votes. Votes above the maximum cap (32M) are counted as 32M votes.
 	* A new hardLimit is calculated at each difficult adjustment period
(2016 blocks), and applies to the next 2016 blocks.
 	* Calculate hardLimit by examining the coinbase scriptSig votes of the
previous 12,000 blocks, and taking the 20th percentile and 80th
percentile.
 	* New hardLimit is the median of the followings:

 	* min(current hardLimit * 1.2, 20-percentile)
 	* max(current hardLimit / 1.2, 80-percentile)
 	* current hardLimit

 	* version 4 block: the coinbase of a version 4 block must match this
pattern: "/BVd+/"
 	* 70% rule: If 8,400 of the last 12,000 blocks are version 4 or
greater, reject invalid version 4 blocks. (testnet4: 501 of last 1000)
 	* 80% rule ("Point of no return"): If 9,600 of the last 12,000 blocks
are version 4 or greater, reject all version <= 3 blocks. (testnet4: 750
of last 1000)
 	* Block version number is calculated after masking out high 16 bits
(final bit count TBD by versionBits outcome).

Jeff Garzik via bitcoin-dev ? 2015-09-02 23:33 ??:
> BIP 100 initial public draft:
> https://github.com/jgarzik/bip100/blob/master/bip-0100.mediawiki [1]
> 
> Emphasis on "initial" This is a starting point for the usual open
> source feedback/iteration cycle, not an endpoint that Must Be This
> Way.
> 
> 
> 
> Links:
> ------
> [1] https://github.com/jgarzik/bip100/blob/master/bip-0100.mediawiki
> 
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev

 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150903/9bfb6c46/attachment.html>

From btcdrak at gmail.com  Thu Sep  3 11:20:08 2015
From: btcdrak at gmail.com (Btc Drak)
Date: Thu, 3 Sep 2015 12:20:08 +0100
Subject: [bitcoin-dev] BIP 100 specification
In-Reply-To: <e54e93e519d776262f9c0f4ae23f54fb@xbt.hk>
References: <CADm_WcZyK6LUcuKqSEuR-q0hTZOC3EdJsqY1HrS_ow0knDY=7A@mail.gmail.com>
	<e54e93e519d776262f9c0f4ae23f54fb@xbt.hk>
Message-ID: <CADJgMzuWNNvMf6f9N0h0swAUATyAm4Y9Qu+ya33cEA1WB++sRg@mail.gmail.com>

We should avoid discussing actual hard fork/softfork deployment
methodologies when discussing blocksize proposals because deployment
is a separate issue. As a recent case in point, look at how BIP65
(CHECKLOCKTIMEVERIFY) specifically avoided the issue of how to deploy.
That lead to a focused discussion of the functionality and relatively
quick inclusion.

Deployment really is a separate issue than the mechanics of how BIP100
will function after activation.

On Thu, Sep 3, 2015 at 8:57 AM, jl2012 via bitcoin-dev
<bitcoin-dev at lists.linuxfoundation.org> wrote:
> Some comments:
>
> The 75% rule is meaningless here. Since this is a pure relaxation of rules,
> there is no such thing as "invalid version 4 blocks"
>
> The implication threshold is unclear. Is it 95% or 80%?
>
> Softfork requires a very high threshold (95%) to "attack" the original fork.
> This makes sure that unupgraded client will only see the new fork.
> In the case of hardfork, however, the new fork is unable to attack the
> original fork, and unupgraded client will never see the new fork. The
> initiation of a hardfork should be based on its acceptance by the economic
> majority, not miner support. 95% is an overkill and may probably never
> accomplished. I strongly prefer a 80% threshold rather than 95%.
>
> As I've pointed out, using 20-percentile rather than median creates an
> incentive to 51% attack the uncooperative minority.
> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-August/010690.html
>
> Having said that, I don't have a strong feeling about the use of
> 20-percentile as threshold to increase the block size. That means the block
> size is increased only when most miners agree, which sounds ok to me.
>
> However, using 20-percentile as threshold to DECREASE the block size could
> be very dangerous. Consider that the block size has been stable at 8MB for a
> few years. Everyone are happy with that. An attacker would just need to
> acquire 21% of mining power to break the status quo and send us all the way
> to 1MB. The only way to stop such attempt is to 51% attack the attacker.
> That'd be really ugly.
>
> For technical and ethical reasons, I believe the thresholds for increase and
> decrease must be symmetrical: increase the block size when the x-percentile
> is bigger than the current size, decrease the block size when the
> (100-x)-percentile is smaller than the current size. The overall effect is:
> the block size remains unchanged unless 80% of miners agree to.
>
> Please consider the use of "hardfork bit" to signify the hardfork:
>
> https://www.reddit.com/r/bitcoin_devlist/comments/3ekhg2/bip_draft_hardfork_bit_jl2012_at_xbthk_jul_23_2015/
>
> https://github.com/jl2012/bips/blob/master/hardforkbit.mediawiki
>
> Or, alternatively, please combine the hardfork with a softfork. I'm
> rewriting the specification as follow (changes underlined):
>
> Replace static 1M block size hard limit with a floating limit ("hardLimit").
>
> hardLimit floats within the range 1-32M, inclusive.
>
> Initial value of hardLimit is 1M, preserving current system.
>
> Changing hardLimit is accomplished by encoding a proposed value within a
> block's coinbase scriptSig.
>
> Votes refer to a byte value, encoded within the pattern "/BV\d+/" Example:
> /BV8000000/ votes for 8,000,000 byte hardLimit. If there is more than one
> match with with pattern, the first match is counted.
> Absent/invalid votes and votes below minimum cap (1M) are counted as 1M
> votes. Votes above the maximum cap (32M) are counted as 32M votes.
> A new hardLimit is calculated at each difficult adjustment period (2016
> blocks), and applies to the next 2016 blocks.
> Calculate hardLimit by examining the coinbase scriptSig votes of the
> previous 12,000 blocks, and taking the 20th percentile and 80th percentile.
> New hardLimit is the median of the followings:
>
> min(current hardLimit * 1.2, 20-percentile)
> max(current hardLimit / 1.2, 80-percentile)
> current hardLimit
>
> version 4 block: the coinbase of a version 4 block must match this pattern:
> "/BV\d+/"
> 70% rule: If 8,400 of the last 12,000 blocks are version 4 or greater,
> reject invalid version 4 blocks. (testnet4: 501 of last 1000)
> 80% rule ("Point of no return"): If 9,600 of the last 12,000 blocks are
> version 4 or greater, reject all version <= 3 blocks. (testnet4: 750 of last
> 1000)
> Block version number is calculated after masking out high 16 bits (final bit
> count TBD by versionBits outcome).
>
> Jeff Garzik via bitcoin-dev ? 2015-09-02 23:33 ??:
>> BIP 100 initial public draft:
>> https://github.com/jgarzik/bip100/blob/master/bip-0100.mediawiki [1]
>>
>> Emphasis on "initial"  This is a starting point for the usual open
>> source feedback/iteration cycle, not an endpoint that Must Be This
>> Way.
>>
>>
>>
>> Links:
>> ------
>> [1] https://github.com/jgarzik/bip100/blob/master/bip-0100.mediawiki
>>
>> _______________________________________________
>> bitcoin-dev mailing list
>> bitcoin-dev at lists.linuxfoundation.org
>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>

From tier.nolan at gmail.com  Thu Sep  3 11:59:01 2015
From: tier.nolan at gmail.com (Tier Nolan)
Date: Thu, 3 Sep 2015 12:59:01 +0100
Subject: [bitcoin-dev] BIP 100 specification
In-Reply-To: <e54e93e519d776262f9c0f4ae23f54fb@xbt.hk>
References: <CADm_WcZyK6LUcuKqSEuR-q0hTZOC3EdJsqY1HrS_ow0knDY=7A@mail.gmail.com>
	<e54e93e519d776262f9c0f4ae23f54fb@xbt.hk>
Message-ID: <CAE-z3OVd6+ncvJBwusSbcMTG6xaRxsboH3ru_zQXpbu2wW_Zng@mail.gmail.com>

On Thu, Sep 3, 2015 at 8:57 AM, jl2012 via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

>
>    1.
>
>    hardLimit floats within the range 1-32M, inclusive.
>
>
>
Does the 32MB limit actually still exist anywhere in the code?  In effect,
it is re-instating a legacy limitation.

The message size limit is to minimize the storage required per peer.  If a
32MB block size is required, then each network input buffer must be at
least 32MB. This makes it harder for a node to support a large number of
peers.

There is no reason why a single message is used for each block.  Using the
merkleblock message (or a different dedicated message), it would be
possible to send messages which only contain part of a block and have a
limited maximum size.

This would allow receiving parts of a block from multiple sources.

This is a separate issue but should be considered if moving past 32MB block
sizes (or maybe as a later protocol change).


>
>    1. Changing hardLimit is accomplished by encoding a proposed value
>    within a block's coinbase scriptSig.
>       1. Votes refer to a byte value, encoded within the pattern
>       "/BV\d+/" Example: /BV8000000/ votes for 8,000,000 byte hardLimit. If
>       there is more than one match with with pattern, the first match is counted.
>
> Is there a need for byte resolution?  Using MB resolution would use up
much fewer bytes in the coinbase.

Even with the +/- 20% rule, miners could vote for the nearest MB.  Once the
block size exceeds 5MB, then there is enough resolution anyway.


>    1. Absent/invalid votes and votes below minimum cap (1M) are counted
>       as 1M votes. Votes above the maximum cap (32M) are counted as 32M votes.
>
>
I think abstains should count for the status quo.  Votes which are out of
range should be clamped.

Having said that, if core supports the change, then most miners will
probably vote one way or another.

> New hardLimit is the median of the followings:
> min(current hardLimit * 1.2, 20-percentile)
> max(current hardLimit / 1.2, 80-percentile)
> current hardLimit

I think this is unclear, though mathematically exact.

Sort the votes for the last 12,000 blocks from lowest to highest.

Blocks which don't have a vote are considered a vote for the status quo.

Votes are limited to +/- 20% of the current value.  Votes that are out of
range are considered to vote for the nearest in range value.

The raise value is defined as the vote for the 2400th highest block (20th
percentile).
The lower value  is defined as the vote for the 9600th highest block (80th
percentile).

If the raise value is higher than the status quo, then the new limit is set
to the raise value.
If the lower value is lower than the status quo, then the new limit is set
to the lower value.
Otherwise, the size limit is unchanged.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150903/765fb2ef/attachment-0001.html>

From jgarzik at gmail.com  Thu Sep  3 14:18:56 2015
From: jgarzik at gmail.com (Jeff Garzik)
Date: Thu, 3 Sep 2015 10:18:56 -0400
Subject: [bitcoin-dev] block size - pay with difficulty
In-Reply-To: <d15669b6ce3dbc89dff6c907a5749034@xbt.hk>
References: <CADm_Wcb+5Xo3HS-FNUYtCapVpYfVvUS_fxpU0Q=TZHJW1=iAFQ@mail.gmail.com>
	<d15669b6ce3dbc89dff6c907a5749034@xbt.hk>
Message-ID: <CADm_WcbudZs6_bYfDkQ2XgqvPEMRN4ONnmz45Wz45E06bpGOrQ@mail.gmail.com>

Thanks for the link.  I readily admit only having given pay-to-future-miner
a little bit of thought.  Not convinced it sets a minimal tx fee in all
cases.


On Thu, Sep 3, 2015 at 12:55 AM, <jl2012 at xbt.hk> wrote:

> Jeff Garzik via bitcoin-dev ? 2015-09-03 00:05 ??:
>
>> Schemes proposing to pay with difficulty / hashpower to change block
>> size should be avoided.  The miners incentive has always been fairly
>> straightforward - it is rational to deploy new hashpower as soon as
>> you can get it online.  Introducing the concepts of (a) requiring
>> out-of-band collusion to change block size and/or (b) requiring miners
>> to have idle hashpower on hand to change block size are both
>> unrealistic and potentially corrosive.  That potentially makes the
>> block size - and therefore fee market - too close, too sensitive to
>> the wild vagaries of the mining chip market.
>>
>> Pay-to-future-miner has neutral, forward looking incentives worth
>> researching.
>>
>>
>> _______________________________________________
>> bitcoin-dev mailing list
>> bitcoin-dev at lists.linuxfoundation.org
>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>
>
> Ref:
> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-August/010723.html
>
> I explained here why pay with difficulty is bad for everyone: miners and
> users, and described the use of OP_CLTV for pay-to-future-miner
>
> However, a general problem of pay-to-increase-block-size scheme is it
> indirectly sets a minimal tx fee, which could be difficult and arbitrary,
> and is against competition
>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150903/28c494e3/attachment.html>

From jgarzik at gmail.com  Thu Sep  3 14:31:31 2015
From: jgarzik at gmail.com (Jeff Garzik)
Date: Thu, 3 Sep 2015 10:31:31 -0400
Subject: [bitcoin-dev] block size - pay with difficulty
In-Reply-To: <CAAS2fgQOi0amBnPK8Ac3iGDN9CP-mLW6o0ncYdSAOAaqSboejg@mail.gmail.com>
References: <CADm_Wcb+5Xo3HS-FNUYtCapVpYfVvUS_fxpU0Q=TZHJW1=iAFQ@mail.gmail.com>
	<CAAS2fgQOi0amBnPK8Ac3iGDN9CP-mLW6o0ncYdSAOAaqSboejg@mail.gmail.com>
Message-ID: <CADm_WcYS-zbNFQJ5EPqqkQ5NhgoQNQAgs-SaF_ZZr0QCNFA3_w@mail.gmail.com>

It's written as 'a' and/or 'b'.  If you don't have idle hashpower, then
paying with difficulty requires some amount of collusion ('a')

Any miner paying with a higher difficulty either needs idle hashpower, or
self-increase their own difficulty at the possible *opportunity cost* of
losing an entire block's income to another miner who doesn't care about
changing the block size.  The potential loss does not economically
compensate for size increase gains in most cases, when you consider the
variability of blocks (they come in bursts and pauses) and the fee income
that would be associated.

Miners have more to lose paying with diff than they gain -- unless the
entire network colludes out-of-band with ~90% certainty, by collectively
agreeing to increase the block period by collectively agreeing with
pay-with-diff until the globally desired block size is reached.  At that
level of collusion, we can create far more simple schemes to increase block
size.

Pay-with-diff will either not get used, or lead to radical short term block
size (and thus fee) volatility.  It is complex & difficult for all players
to reason, and a Rational game theory choice can be to avoid
paying-for-diff even when the network desperately needs an upgrade.






On Thu, Sep 3, 2015 at 2:57 AM, Gregory Maxwell <gmaxwell at gmail.com> wrote:

> On Thu, Sep 3, 2015 at 4:05 AM, Jeff Garzik via bitcoin-dev
> <bitcoin-dev at lists.linuxfoundation.org> wrote:
> > (b) requiring miners to have idle
> > hashpower on hand to change block size are both unrealistic and
> potentially
>
> I really cannot figure out how you could characterize pay with
> difficty has in any way involving idle hashpower.
>
> Can you walk me through this?
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150903/78c0bac7/attachment.html>

From jgarzik at gmail.com  Thu Sep  3 14:34:02 2015
From: jgarzik at gmail.com (Jeff Garzik)
Date: Thu, 3 Sep 2015 10:34:02 -0400
Subject: [bitcoin-dev] BIP 100 specification
In-Reply-To: <CADJgMzuWNNvMf6f9N0h0swAUATyAm4Y9Qu+ya33cEA1WB++sRg@mail.gmail.com>
References: <CADm_WcZyK6LUcuKqSEuR-q0hTZOC3EdJsqY1HrS_ow0knDY=7A@mail.gmail.com>
	<e54e93e519d776262f9c0f4ae23f54fb@xbt.hk>
	<CADJgMzuWNNvMf6f9N0h0swAUATyAm4Y9Qu+ya33cEA1WB++sRg@mail.gmail.com>
Message-ID: <CADm_WcbVRQMFHU0pS7hi99=Ey3Pu3t6pViaPG-KpHF40w69N6A@mail.gmail.com>

A discussion of rolling out BIP 100 will not be avoided :)

It is a hard fork; it would be silly to elide discussion of these key
issues.

I don't get the community's recent interest in avoiding certain topics.



On Thu, Sep 3, 2015 at 7:20 AM, Btc Drak <btcdrak at gmail.com> wrote:

> We should avoid discussing actual hard fork/softfork deployment
> methodologies when discussing blocksize proposals because deployment
> is a separate issue. As a recent case in point, look at how BIP65
> (CHECKLOCKTIMEVERIFY) specifically avoided the issue of how to deploy.
> That lead to a focused discussion of the functionality and relatively
> quick inclusion.
>
> Deployment really is a separate issue than the mechanics of how BIP100
> will function after activation.
>
> On Thu, Sep 3, 2015 at 8:57 AM, jl2012 via bitcoin-dev
> <bitcoin-dev at lists.linuxfoundation.org> wrote:
> > Some comments:
> >
> > The 75% rule is meaningless here. Since this is a pure relaxation of
> rules,
> > there is no such thing as "invalid version 4 blocks"
> >
> > The implication threshold is unclear. Is it 95% or 80%?
> >
> > Softfork requires a very high threshold (95%) to "attack" the original
> fork.
> > This makes sure that unupgraded client will only see the new fork.
> > In the case of hardfork, however, the new fork is unable to attack the
> > original fork, and unupgraded client will never see the new fork. The
> > initiation of a hardfork should be based on its acceptance by the
> economic
> > majority, not miner support. 95% is an overkill and may probably never
> > accomplished. I strongly prefer a 80% threshold rather than 95%.
> >
> > As I've pointed out, using 20-percentile rather than median creates an
> > incentive to 51% attack the uncooperative minority.
> >
> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-August/010690.html
> >
> > Having said that, I don't have a strong feeling about the use of
> > 20-percentile as threshold to increase the block size. That means the
> block
> > size is increased only when most miners agree, which sounds ok to me.
> >
> > However, using 20-percentile as threshold to DECREASE the block size
> could
> > be very dangerous. Consider that the block size has been stable at 8MB
> for a
> > few years. Everyone are happy with that. An attacker would just need to
> > acquire 21% of mining power to break the status quo and send us all the
> way
> > to 1MB. The only way to stop such attempt is to 51% attack the attacker.
> > That'd be really ugly.
> >
> > For technical and ethical reasons, I believe the thresholds for increase
> and
> > decrease must be symmetrical: increase the block size when the
> x-percentile
> > is bigger than the current size, decrease the block size when the
> > (100-x)-percentile is smaller than the current size. The overall effect
> is:
> > the block size remains unchanged unless 80% of miners agree to.
> >
> > Please consider the use of "hardfork bit" to signify the hardfork:
> >
> >
> https://www.reddit.com/r/bitcoin_devlist/comments/3ekhg2/bip_draft_hardfork_bit_jl2012_at_xbthk_jul_23_2015/
> >
> > https://github.com/jl2012/bips/blob/master/hardforkbit.mediawiki
> >
> > Or, alternatively, please combine the hardfork with a softfork. I'm
> > rewriting the specification as follow (changes underlined):
> >
> > Replace static 1M block size hard limit with a floating limit
> ("hardLimit").
> >
> > hardLimit floats within the range 1-32M, inclusive.
> >
> > Initial value of hardLimit is 1M, preserving current system.
> >
> > Changing hardLimit is accomplished by encoding a proposed value within a
> > block's coinbase scriptSig.
> >
> > Votes refer to a byte value, encoded within the pattern "/BV\d+/"
> Example:
> > /BV8000000/ votes for 8,000,000 byte hardLimit. If there is more than one
> > match with with pattern, the first match is counted.
> > Absent/invalid votes and votes below minimum cap (1M) are counted as 1M
> > votes. Votes above the maximum cap (32M) are counted as 32M votes.
> > A new hardLimit is calculated at each difficult adjustment period (2016
> > blocks), and applies to the next 2016 blocks.
> > Calculate hardLimit by examining the coinbase scriptSig votes of the
> > previous 12,000 blocks, and taking the 20th percentile and 80th
> percentile.
> > New hardLimit is the median of the followings:
> >
> > min(current hardLimit * 1.2, 20-percentile)
> > max(current hardLimit / 1.2, 80-percentile)
> > current hardLimit
> >
> > version 4 block: the coinbase of a version 4 block must match this
> pattern:
> > "/BV\d+/"
> > 70% rule: If 8,400 of the last 12,000 blocks are version 4 or greater,
> > reject invalid version 4 blocks. (testnet4: 501 of last 1000)
> > 80% rule ("Point of no return"): If 9,600 of the last 12,000 blocks are
> > version 4 or greater, reject all version <= 3 blocks. (testnet4: 750 of
> last
> > 1000)
> > Block version number is calculated after masking out high 16 bits (final
> bit
> > count TBD by versionBits outcome).
> >
> > Jeff Garzik via bitcoin-dev ? 2015-09-02 23:33 ??:
> >> BIP 100 initial public draft:
> >> https://github.com/jgarzik/bip100/blob/master/bip-0100.mediawiki [1]
> >>
> >> Emphasis on "initial"  This is a starting point for the usual open
> >> source feedback/iteration cycle, not an endpoint that Must Be This
> >> Way.
> >>
> >>
> >>
> >> Links:
> >> ------
> >> [1] https://github.com/jgarzik/bip100/blob/master/bip-0100.mediawiki
> >>
> >> _______________________________________________
> >> bitcoin-dev mailing list
> >> bitcoin-dev at lists.linuxfoundation.org
> >> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> >
> >
> > _______________________________________________
> > bitcoin-dev mailing list
> > bitcoin-dev at lists.linuxfoundation.org
> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> >
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150903/43c07e6d/attachment-0001.html>

From jgarzik at gmail.com  Thu Sep  3 14:35:56 2015
From: jgarzik at gmail.com (Jeff Garzik)
Date: Thu, 3 Sep 2015 10:35:56 -0400
Subject: [bitcoin-dev] BIP 100 specification
In-Reply-To: <e54e93e519d776262f9c0f4ae23f54fb@xbt.hk>
References: <CADm_WcZyK6LUcuKqSEuR-q0hTZOC3EdJsqY1HrS_ow0knDY=7A@mail.gmail.com>
	<e54e93e519d776262f9c0f4ae23f54fb@xbt.hk>
Message-ID: <CADm_WcYZ3mDzRrRax5j+RmjhV9xQd3_NuV-hPVOBh2p+HpxbQQ@mail.gmail.com>

Thanks - several good suggestions, including some in common.  Will comment
& revise today.

Currently in "collecting" mode, to avoid duplicative comments in multiple
locales.



On Thu, Sep 3, 2015 at 3:57 AM, <jl2012 at xbt.hk> wrote:

> Some comments:
>
>
>    - The 75% rule is meaningless here. Since this is a pure relaxation of
>    rules, there is no such thing as "invalid version 4 blocks"
>
>
>    -
>
>    The implication threshold is unclear. Is it 95% or 80%?
>
>    - Softfork requires a very high threshold (95%) to "attack" the
>       original fork. This makes sure that unupgraded client will only see the new
>       fork.
>       - In the case of hardfork, however, the new fork is unable to
>       attack the original fork, and unupgraded client will never see the new
>       fork. The initiation of a hardfork should be based on its acceptance by the
>       economic majority, not miner support. 95% is an overkill and may probably
>       never accomplished. I strongly prefer a 80% threshold rather than 95%.
>
>
>    - As I've pointed out, using 20-percentile rather than median creates
>    an incentive to 51% attack the uncooperative minority.
>    https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-August/010690.html
>
> Having said that, I don't have a strong feeling about the use of
> 20-percentile as threshold to increase the block size. That means the block
> size is increased only when most miners agree, which sounds ok to me.
>
> However, using 20-percentile as threshold to DECREASE the block size could
> be very dangerous. Consider that the block size has been stable at 8MB for
> a few years. Everyone are happy with that. An attacker would just need to
> acquire 21% of mining power to break the status quo and send us all the way
> to 1MB. The only way to stop such attempt is to 51% attack the attacker.
> That'd be really ugly.
>
> For technical and ethical reasons, I believe the thresholds for increase
> and decrease must be symmetrical: increase the block size when the
> x-percentile is bigger than the current size, decrease the block size when
> the (100-x)-percentile is smaller than the current size. The overall effect
> is: the block size remains unchanged unless 80% of miners agree to.
>
>    - Please consider the use of "hardfork bit" to signify the hardfork:
>
>
> https://www.reddit.com/r/bitcoin_devlist/comments/3ekhg2/bip_draft_hardfork_bit_jl2012_at_xbthk_jul_23_2015/
>
> https://github.com/jl2012/bips/blob/master/hardforkbit.mediawiki
>
>    - Or, alternatively, please combine the hardfork with a softfork. I'm
>    rewriting the specification as follow (changes underlined):
>
>
>    1. Replace static 1M block size hard limit with a floating limit
>    ("hardLimit").
>    2.
>
>    hardLimit floats within the range 1-32M, inclusive.
>
>    3.
>
>    Initial value of hardLimit is 1M, preserving current system.
>
>    4. Changing hardLimit is accomplished by encoding a proposed value
>    within a block's coinbase scriptSig.
>       1. Votes refer to a byte value, encoded within the pattern
>       "/BV\d+/" Example: /BV8000000/ votes for 8,000,000 byte hardLimit. If
>       there is more than one match with with pattern, the first match is counted.
>       2. Absent/invalid votes and votes below minimum cap (1M) are
>       counted as 1M votes. Votes above the maximum cap (32M) are counted as 32M
>       votes.
>       3. A new hardLimit is calculated at each difficult adjustment
>       period (2016 blocks), and applies to the next 2016 blocks.
>       4. Calculate hardLimit by examining the coinbase scriptSig votes of
>       the previous 12,000 blocks, and taking the 20th percentile and 80th
>       percentile.
>       5. New hardLimit is the median of the followings:
>          1. min(current hardLimit * 1.2, 20-percentile)
>          2. max(current hardLimit / 1.2, 80-percentile)
>          3. current hardLimit
>       5. version 4 block: the coinbase of a version 4 block must match
>    this pattern: "/BV\d+/"
>    6. 70% rule: If 8,400 of the last 12,000 blocks are version 4 or
>    greater, reject invalid version 4 blocks. (testnet4: 501 of last 1000)
>    7. 80% rule ("Point of no return"): If 9,600 of the last 12,000 blocks
>    are version 4 or greater, reject all version <= 3 blocks. (testnet4: 750 of
>    last 1000)
>    8. Block version number is calculated after masking out high 16 bits
>    (final bit count TBD by versionBits outcome).
>
> Jeff Garzik via bitcoin-dev ? 2015-09-02 23:33 ??:
> > BIP 100 initial public draft:
> > https://github.com/jgarzik/bip100/blob/master/bip-0100.mediawiki [1]
> >
> > Emphasis on "initial"  This is a starting point for the usual open
> > source feedback/iteration cycle, not an endpoint that Must Be This
> > Way.
> >
> >
> >
> > Links:
> > ------
> > [1] https://github.com/jgarzik/bip100/blob/master/bip-0100.mediawiki
> >
> > _______________________________________________
> > bitcoin-dev mailing list
> > bitcoin-dev at lists.linuxfoundation.org
> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150903/2be39ef3/attachment.html>

From jgarzik at gmail.com  Thu Sep  3 14:40:37 2015
From: jgarzik at gmail.com (Jeff Garzik)
Date: Thu, 3 Sep 2015 10:40:37 -0400
Subject: [bitcoin-dev] block size - pay with difficulty
In-Reply-To: <CADm_WcYS-zbNFQJ5EPqqkQ5NhgoQNQAgs-SaF_ZZr0QCNFA3_w@mail.gmail.com>
References: <CADm_Wcb+5Xo3HS-FNUYtCapVpYfVvUS_fxpU0Q=TZHJW1=iAFQ@mail.gmail.com>
	<CAAS2fgQOi0amBnPK8Ac3iGDN9CP-mLW6o0ncYdSAOAaqSboejg@mail.gmail.com>
	<CADm_WcYS-zbNFQJ5EPqqkQ5NhgoQNQAgs-SaF_ZZr0QCNFA3_w@mail.gmail.com>
Message-ID: <CADm_WcYwErO1Av_DkMecATQEMFKL7TNZc1Nbs88k-yEKN2vbsQ@mail.gmail.com>

Expanding on pay-with-diff and volatility (closing comment),

Users and miners will have significant difficulty creating and/or
predicting a stable block size (and fee environment) with pay-with-diff
across the months.  The ability of businesses to plan is low.  Chaos and
unpredictability are bad in general for markets and systems.  Thus the
binary conclusion of "not get used" or "volatility"






On Thu, Sep 3, 2015 at 10:31 AM, Jeff Garzik <jgarzik at gmail.com> wrote:

> It's written as 'a' and/or 'b'.  If you don't have idle hashpower, then
> paying with difficulty requires some amount of collusion ('a')
>
> Any miner paying with a higher difficulty either needs idle hashpower, or
> self-increase their own difficulty at the possible *opportunity cost* of
> losing an entire block's income to another miner who doesn't care about
> changing the block size.  The potential loss does not economically
> compensate for size increase gains in most cases, when you consider the
> variability of blocks (they come in bursts and pauses) and the fee income
> that would be associated.
>
> Miners have more to lose paying with diff than they gain -- unless the
> entire network colludes out-of-band with ~90% certainty, by collectively
> agreeing to increase the block period by collectively agreeing with
> pay-with-diff until the globally desired block size is reached.  At that
> level of collusion, we can create far more simple schemes to increase block
> size.
>
> Pay-with-diff will either not get used, or lead to radical short term
> block size (and thus fee) volatility.  It is complex & difficult for all
> players to reason, and a Rational game theory choice can be to avoid
> paying-for-diff even when the network desperately needs an upgrade.
>
>
>
>
>
>
> On Thu, Sep 3, 2015 at 2:57 AM, Gregory Maxwell <gmaxwell at gmail.com>
> wrote:
>
>> On Thu, Sep 3, 2015 at 4:05 AM, Jeff Garzik via bitcoin-dev
>> <bitcoin-dev at lists.linuxfoundation.org> wrote:
>> > (b) requiring miners to have idle
>> > hashpower on hand to change block size are both unrealistic and
>> potentially
>>
>> I really cannot figure out how you could characterize pay with
>> difficty has in any way involving idle hashpower.
>>
>> Can you walk me through this?
>>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150903/1b1284e9/attachment.html>

From btcdrak at gmail.com  Thu Sep  3 15:58:04 2015
From: btcdrak at gmail.com (Btc Drak)
Date: Thu, 3 Sep 2015 16:58:04 +0100
Subject: [bitcoin-dev] BIP 100 specification
In-Reply-To: <CADm_WcbVRQMFHU0pS7hi99=Ey3Pu3t6pViaPG-KpHF40w69N6A@mail.gmail.com>
References: <CADm_WcZyK6LUcuKqSEuR-q0hTZOC3EdJsqY1HrS_ow0knDY=7A@mail.gmail.com>
	<e54e93e519d776262f9c0f4ae23f54fb@xbt.hk>
	<CADJgMzuWNNvMf6f9N0h0swAUATyAm4Y9Qu+ya33cEA1WB++sRg@mail.gmail.com>
	<CADm_WcbVRQMFHU0pS7hi99=Ey3Pu3t6pViaPG-KpHF40w69N6A@mail.gmail.com>
Message-ID: <CADJgMzsXrrY+-OHzUmnaDmFkqvDr29eHuwOvovSnUwjVnOiZOQ@mail.gmail.com>

On Thu, Sep 3, 2015 at 3:34 PM, Jeff Garzik <jgarzik at gmail.com> wrote:
> A discussion of rolling out BIP 100 will not be avoided :)
>
> It is a hard fork; it would be silly to elide discussion of these key
> issues.
>
> I don't get the community's recent interest in avoiding certain topics.

It's not a matter of avoiding the subject, it's a whole separate
discussion and in the interests of efficient discussion, it is best
done separately. There's a whole BIP dedicated to the discussion of
consensus forks which you should probably give some input in also,
BIP99 [1]

Once we come to an agreement and can say "here's what we're doing
about blocksize, it will be X, or we'll raise by this algo", then we
can discuss the best way to implement the hard fork.

[1] https://github.com/bitcoin/bips/pull/181


>
>
>
> On Thu, Sep 3, 2015 at 7:20 AM, Btc Drak <btcdrak at gmail.com> wrote:
>>
>> We should avoid discussing actual hard fork/softfork deployment
>> methodologies when discussing blocksize proposals because deployment
>> is a separate issue. As a recent case in point, look at how BIP65
>> (CHECKLOCKTIMEVERIFY) specifically avoided the issue of how to deploy.
>> That lead to a focused discussion of the functionality and relatively
>> quick inclusion.
>>
>> Deployment really is a separate issue than the mechanics of how BIP100
>> will function after activation.
>>
>> On Thu, Sep 3, 2015 at 8:57 AM, jl2012 via bitcoin-dev
>> <bitcoin-dev at lists.linuxfoundation.org> wrote:
>> > Some comments:
>> >
>> > The 75% rule is meaningless here. Since this is a pure relaxation of
>> > rules,
>> > there is no such thing as "invalid version 4 blocks"
>> >
>> > The implication threshold is unclear. Is it 95% or 80%?
>> >
>> > Softfork requires a very high threshold (95%) to "attack" the original
>> > fork.
>> > This makes sure that unupgraded client will only see the new fork.
>> > In the case of hardfork, however, the new fork is unable to attack the
>> > original fork, and unupgraded client will never see the new fork. The
>> > initiation of a hardfork should be based on its acceptance by the
>> > economic
>> > majority, not miner support. 95% is an overkill and may probably never
>> > accomplished. I strongly prefer a 80% threshold rather than 95%.
>> >
>> > As I've pointed out, using 20-percentile rather than median creates an
>> > incentive to 51% attack the uncooperative minority.
>> >
>> > https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-August/010690.html
>> >
>> > Having said that, I don't have a strong feeling about the use of
>> > 20-percentile as threshold to increase the block size. That means the
>> > block
>> > size is increased only when most miners agree, which sounds ok to me.
>> >
>> > However, using 20-percentile as threshold to DECREASE the block size
>> > could
>> > be very dangerous. Consider that the block size has been stable at 8MB
>> > for a
>> > few years. Everyone are happy with that. An attacker would just need to
>> > acquire 21% of mining power to break the status quo and send us all the
>> > way
>> > to 1MB. The only way to stop such attempt is to 51% attack the attacker.
>> > That'd be really ugly.
>> >
>> > For technical and ethical reasons, I believe the thresholds for increase
>> > and
>> > decrease must be symmetrical: increase the block size when the
>> > x-percentile
>> > is bigger than the current size, decrease the block size when the
>> > (100-x)-percentile is smaller than the current size. The overall effect
>> > is:
>> > the block size remains unchanged unless 80% of miners agree to.
>> >
>> > Please consider the use of "hardfork bit" to signify the hardfork:
>> >
>> >
>> > https://www.reddit.com/r/bitcoin_devlist/comments/3ekhg2/bip_draft_hardfork_bit_jl2012_at_xbthk_jul_23_2015/
>> >
>> > https://github.com/jl2012/bips/blob/master/hardforkbit.mediawiki
>> >
>> > Or, alternatively, please combine the hardfork with a softfork. I'm
>> > rewriting the specification as follow (changes underlined):
>> >
>> > Replace static 1M block size hard limit with a floating limit
>> > ("hardLimit").
>> >
>> > hardLimit floats within the range 1-32M, inclusive.
>> >
>> > Initial value of hardLimit is 1M, preserving current system.
>> >
>> > Changing hardLimit is accomplished by encoding a proposed value within a
>> > block's coinbase scriptSig.
>> >
>> > Votes refer to a byte value, encoded within the pattern "/BV\d+/"
>> > Example:
>> > /BV8000000/ votes for 8,000,000 byte hardLimit. If there is more than
>> > one
>> > match with with pattern, the first match is counted.
>> > Absent/invalid votes and votes below minimum cap (1M) are counted as 1M
>> > votes. Votes above the maximum cap (32M) are counted as 32M votes.
>> > A new hardLimit is calculated at each difficult adjustment period (2016
>> > blocks), and applies to the next 2016 blocks.
>> > Calculate hardLimit by examining the coinbase scriptSig votes of the
>> > previous 12,000 blocks, and taking the 20th percentile and 80th
>> > percentile.
>> > New hardLimit is the median of the followings:
>> >
>> > min(current hardLimit * 1.2, 20-percentile)
>> > max(current hardLimit / 1.2, 80-percentile)
>> > current hardLimit
>> >
>> > version 4 block: the coinbase of a version 4 block must match this
>> > pattern:
>> > "/BV\d+/"
>> > 70% rule: If 8,400 of the last 12,000 blocks are version 4 or greater,
>> > reject invalid version 4 blocks. (testnet4: 501 of last 1000)
>> > 80% rule ("Point of no return"): If 9,600 of the last 12,000 blocks are
>> > version 4 or greater, reject all version <= 3 blocks. (testnet4: 750 of
>> > last
>> > 1000)
>> > Block version number is calculated after masking out high 16 bits (final
>> > bit
>> > count TBD by versionBits outcome).
>> >
>> > Jeff Garzik via bitcoin-dev ? 2015-09-02 23:33 ??:
>> >> BIP 100 initial public draft:
>> >> https://github.com/jgarzik/bip100/blob/master/bip-0100.mediawiki [1]
>> >>
>> >> Emphasis on "initial"  This is a starting point for the usual open
>> >> source feedback/iteration cycle, not an endpoint that Must Be This
>> >> Way.
>> >>
>> >>
>> >>
>> >> Links:
>> >> ------
>> >> [1] https://github.com/jgarzik/bip100/blob/master/bip-0100.mediawiki
>> >>
>> >> _______________________________________________
>> >> bitcoin-dev mailing list
>> >> bitcoin-dev at lists.linuxfoundation.org
>> >> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>> >
>> >
>> > _______________________________________________
>> > bitcoin-dev mailing list
>> > bitcoin-dev at lists.linuxfoundation.org
>> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>> >
>
>

From jtimon at jtimon.cc  Thu Sep  3 16:13:34 2015
From: jtimon at jtimon.cc (=?UTF-8?B?Sm9yZ2UgVGltw7Nu?=)
Date: Thu, 3 Sep 2015 18:13:34 +0200
Subject: [bitcoin-dev] BIP 100 specification
In-Reply-To: <CADJgMzsXrrY+-OHzUmnaDmFkqvDr29eHuwOvovSnUwjVnOiZOQ@mail.gmail.com>
References: <CADm_WcZyK6LUcuKqSEuR-q0hTZOC3EdJsqY1HrS_ow0knDY=7A@mail.gmail.com>
	<e54e93e519d776262f9c0f4ae23f54fb@xbt.hk>
	<CADJgMzuWNNvMf6f9N0h0swAUATyAm4Y9Qu+ya33cEA1WB++sRg@mail.gmail.com>
	<CADm_WcbVRQMFHU0pS7hi99=Ey3Pu3t6pViaPG-KpHF40w69N6A@mail.gmail.com>
	<CADJgMzsXrrY+-OHzUmnaDmFkqvDr29eHuwOvovSnUwjVnOiZOQ@mail.gmail.com>
Message-ID: <CABm2gDqY5=2WB4D1E-r9QfEBbreYPzq7dou9SYH3HCLzfpKLPg@mail.gmail.com>

On Sep 3, 2015 5:58 PM, "Btc Drak via bitcoin-dev" <
bitcoin-dev at lists.linuxfoundation.org> wrote:
>
> On Thu, Sep 3, 2015 at 3:34 PM, Jeff Garzik <jgarzik at gmail.com> wrote:
> > A discussion of rolling out BIP 100 will not be avoided :)
> >
> > It is a hard fork; it would be silly to elide discussion of these key
> > issues.
> >
> > I don't get the community's recent interest in avoiding certain topics.
>
> It's not a matter of avoiding the subject, it's a whole separate
> discussion and in the interests of efficient discussion, it is best
> done separately. There's a whole BIP dedicated to the discussion of
> consensus forks which you should probably give some input in also,
> BIP99 [1]
>
> Once we come to an agreement and can say "here's what we're doing
> about blocksize, it will be X, or we'll raise by this algo", then we
> can discuss the best way to implement the hard fork.
>
> [1] https://github.com/bitcoin/bips/pull/181

In fact, that discussion can happen in parallel. But it is more efficient
to do so in one place instead of in each of the 5+ hardfork proposals
(bip99 itself has a hardfork proposal with its code ready).
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150903/a11ae3c3/attachment.html>

From jl2012 at xbt.hk  Thu Sep  3 16:32:15 2015
From: jl2012 at xbt.hk (jl2012 at xbt.hk)
Date: Thu, 03 Sep 2015 12:32:15 -0400
Subject: [bitcoin-dev] BIP 100 specification
In-Reply-To: <CAE-z3OVd6+ncvJBwusSbcMTG6xaRxsboH3ru_zQXpbu2wW_Zng@mail.gmail.com>
References: <CADm_WcZyK6LUcuKqSEuR-q0hTZOC3EdJsqY1HrS_ow0knDY=7A@mail.gmail.com>
	<e54e93e519d776262f9c0f4ae23f54fb@xbt.hk>
	<CAE-z3OVd6+ncvJBwusSbcMTG6xaRxsboH3ru_zQXpbu2wW_Zng@mail.gmail.com>
Message-ID: <301aa5f682f8aa408b9f6f4618095fe2@xbt.hk>

1. I think there is no need to have resolution at byte level, while 
resolution at MB level is not enough. kB would be a better choice.

2. In my specification a v4 block without a vote is invalid, so there is 
no need to consider absent or invalid votes

3. We should allow miners to explicitly vote for the status quo, so they 
don't need to change the coinbase vote every time the size is changed. 
They may indicate it by /BV/ in the coinbase, and we should look for the 
first "/BVd*/" instead of "/BVd+/"

4. Alternatively, miners may vote in different styles: /BV1234567/, 
/BV1500K/, /BV3M/. The first one means 1.234567MB, the second one is 
1.5MB, the last one is 3MB. The pattern is "/BV(\d+[KM]?)?/"

Tier Nolan via bitcoin-dev ? 2015-09-03 07:59 ??:
> On Thu, Sep 3, 2015 at 8:57 AM, jl2012 via bitcoin-dev
> <bitcoin-dev at lists.linuxfoundation.org> wrote:
> 
>> *
>> 
>> hardLimit floats within the range 1-32M, inclusive.
> 
> Does the 32MB limit actually still exist anywhere in the code?  In
> effect, it is re-instating a legacy limitation.
> 
> The message size limit is to minimize the storage required per peer.
> If a 32MB block size is required, then each network input buffer must
> be at least 32MB. This makes it harder for a node to support a large
> number of peers.
> 
> There is no reason why a single message is used for each block.  Using
> the merkleblock message (or a different dedicated message), it would
> be possible to send messages which only contain part of a block and
> have a limited maximum size.
> 
> This would allow receiving parts of a block from multiple sources.
> 
> This is a separate issue but should be considered if moving past 32MB
> block sizes (or maybe as a later protocol change).
> 
>> * Changing hardLimit is accomplished by encoding a proposed value
>> within a block's coinbase scriptSig.
>> 
>> * Votes refer to a byte value, encoded within the pattern "/BVd+/"
>> Example: /BV8000000/ votes for 8,000,000 byte hardLimit. If there is
>> more than one match with with pattern, the first match is counted.
> 
> Is there a need for byte resolution?  Using MB resolution would use up
> much fewer bytes in the coinbase.
> 
> Even with the +/- 20% rule, miners could vote for the nearest MB.
> Once the block size exceeds 5MB, then there is enough resolution
> anyway.
> 
>> * Absent/invalid votes and votes below minimum cap (1M) are
>> counted as 1M votes. Votes above the maximum cap (32M) are counted
>> as 32M votes.
> 
> I think abstains should count for the status quo.  Votes which are out
> of range should be clamped.
> 
> Having said that, if core supports the change, then most miners will
> probably vote one way or another.
> 
>> New hardLimit is the median of the followings:
>> min(current hardLimit * 1.2, 20-percentile)
>> max(current hardLimit / 1.2, 80-percentile)
>> current hardLimit
> 
> I think this is unclear, though mathematically exact.
> 
> Sort the votes for the last 12,000 blocks from lowest to highest.
> 
> Blocks which don't have a vote are considered a vote for the status
> quo.
> 
> Votes are limited to +/- 20% of the current value.  Votes that are out
> of range are considered to vote for the nearest in range value.
> 
> The raise value is defined as the vote for the 2400th highest block
> (20th percentile).
> 
> The lower value  is defined as the vote for the 9600th highest block
> (80th percentile).
> 
> If the raise value is higher than the status quo, then the new limit
> is set to the raise value.
> 
> If the lower value is lower than the status quo, then the new limit is
> set to the lower value.
> 
> Otherwise, the size limit is unchanged.
> 
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev


From jgarzik at gmail.com  Thu Sep  3 16:35:23 2015
From: jgarzik at gmail.com (Jeff Garzik)
Date: Thu, 3 Sep 2015 12:35:23 -0400
Subject: [bitcoin-dev] BIP 100 specification
In-Reply-To: <301aa5f682f8aa408b9f6f4618095fe2@xbt.hk>
References: <CADm_WcZyK6LUcuKqSEuR-q0hTZOC3EdJsqY1HrS_ow0knDY=7A@mail.gmail.com>
	<e54e93e519d776262f9c0f4ae23f54fb@xbt.hk>
	<CAE-z3OVd6+ncvJBwusSbcMTG6xaRxsboH3ru_zQXpbu2wW_Zng@mail.gmail.com>
	<301aa5f682f8aa408b9f6f4618095fe2@xbt.hk>
Message-ID: <CADm_WcaJYogJWeQ0kkADgYMS7=H9f60Y4thr_XT-thROyYfg2w@mail.gmail.com>

Take a look at the latest update:

- swiped Tier Nolan verbiage, which I agree was usefully more clear
- added 'M' suffix and removed 'V' from coinbase scriptSig


On Thu, Sep 3, 2015 at 12:32 PM, jl2012 via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> 1. I think there is no need to have resolution at byte level, while
> resolution at MB level is not enough. kB would be a better choice.
>
> 2. In my specification a v4 block without a vote is invalid, so there is
> no need to consider absent or invalid votes
>
> 3. We should allow miners to explicitly vote for the status quo, so they
> don't need to change the coinbase vote every time the size is changed. They
> may indicate it by /BV/ in the coinbase, and we should look for the first
> "/BVd*/" instead of "/BVd+/"
>
> 4. Alternatively, miners may vote in different styles: /BV1234567/,
> /BV1500K/, /BV3M/. The first one means 1.234567MB, the second one is 1.5MB,
> the last one is 3MB. The pattern is "/BV(\d+[KM]?)?/"
>
> Tier Nolan via bitcoin-dev ? 2015-09-03 07:59 ??:
>
>> On Thu, Sep 3, 2015 at 8:57 AM, jl2012 via bitcoin-dev
>> <bitcoin-dev at lists.linuxfoundation.org> wrote:
>>
>> *
>>>
>>> hardLimit floats within the range 1-32M, inclusive.
>>>
>>
>> Does the 32MB limit actually still exist anywhere in the code?  In
>> effect, it is re-instating a legacy limitation.
>>
>> The message size limit is to minimize the storage required per peer.
>> If a 32MB block size is required, then each network input buffer must
>> be at least 32MB. This makes it harder for a node to support a large
>> number of peers.
>>
>> There is no reason why a single message is used for each block.  Using
>> the merkleblock message (or a different dedicated message), it would
>> be possible to send messages which only contain part of a block and
>> have a limited maximum size.
>>
>> This would allow receiving parts of a block from multiple sources.
>>
>> This is a separate issue but should be considered if moving past 32MB
>> block sizes (or maybe as a later protocol change).
>>
>> * Changing hardLimit is accomplished by encoding a proposed value
>>> within a block's coinbase scriptSig.
>>>
>>> * Votes refer to a byte value, encoded within the pattern "/BVd+/"
>>> Example: /BV8000000/ votes for 8,000,000 byte hardLimit. If there is
>>> more than one match with with pattern, the first match is counted.
>>>
>>
>> Is there a need for byte resolution?  Using MB resolution would use up
>> much fewer bytes in the coinbase.
>>
>> Even with the +/- 20% rule, miners could vote for the nearest MB.
>> Once the block size exceeds 5MB, then there is enough resolution
>> anyway.
>>
>> * Absent/invalid votes and votes below minimum cap (1M) are
>>>
>>> counted as 1M votes. Votes above the maximum cap (32M) are counted
>>> as 32M votes.
>>>
>>
>> I think abstains should count for the status quo.  Votes which are out
>> of range should be clamped.
>>
>> Having said that, if core supports the change, then most miners will
>> probably vote one way or another.
>>
>> New hardLimit is the median of the followings:
>>> min(current hardLimit * 1.2, 20-percentile)
>>> max(current hardLimit / 1.2, 80-percentile)
>>> current hardLimit
>>>
>>
>> I think this is unclear, though mathematically exact.
>>
>> Sort the votes for the last 12,000 blocks from lowest to highest.
>>
>> Blocks which don't have a vote are considered a vote for the status
>> quo.
>>
>> Votes are limited to +/- 20% of the current value.  Votes that are out
>> of range are considered to vote for the nearest in range value.
>>
>> The raise value is defined as the vote for the 2400th highest block
>> (20th percentile).
>>
>> The lower value  is defined as the vote for the 9600th highest block
>> (80th percentile).
>>
>> If the raise value is higher than the status quo, then the new limit
>> is set to the raise value.
>>
>> If the lower value is lower than the status quo, then the new limit is
>> set to the lower value.
>>
>> Otherwise, the size limit is unchanged.
>>
>> _______________________________________________
>> bitcoin-dev mailing list
>> bitcoin-dev at lists.linuxfoundation.org
>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150903/6babfaa4/attachment.html>

From btcdrak at gmail.com  Thu Sep  3 17:32:09 2015
From: btcdrak at gmail.com (Btc Drak)
Date: Thu, 3 Sep 2015 18:32:09 +0100
Subject: [bitcoin-dev] BIP 100 specification
In-Reply-To: <CADm_WcaJYogJWeQ0kkADgYMS7=H9f60Y4thr_XT-thROyYfg2w@mail.gmail.com>
References: <CADm_WcZyK6LUcuKqSEuR-q0hTZOC3EdJsqY1HrS_ow0knDY=7A@mail.gmail.com>
	<e54e93e519d776262f9c0f4ae23f54fb@xbt.hk>
	<CAE-z3OVd6+ncvJBwusSbcMTG6xaRxsboH3ru_zQXpbu2wW_Zng@mail.gmail.com>
	<301aa5f682f8aa408b9f6f4618095fe2@xbt.hk>
	<CADm_WcaJYogJWeQ0kkADgYMS7=H9f60Y4thr_XT-thROyYfg2w@mail.gmail.com>
Message-ID: <CADJgMzuTJZxj7BWoEKD51OM=V200EfEimWM2Tkix7+zkCWcE0w@mail.gmail.com>

Just use a 4-byte unsigned integer where the integer is the size in
bytes. It's concise and less complex (and less complex to implement).
There's no need for human readable strings here.

On Thu, Sep 3, 2015 at 5:35 PM, Jeff Garzik via bitcoin-dev
<bitcoin-dev at lists.linuxfoundation.org> wrote:
> Take a look at the latest update:
>
> - swiped Tier Nolan verbiage, which I agree was usefully more clear
> - added 'M' suffix and removed 'V' from coinbase scriptSig
>
>
> On Thu, Sep 3, 2015 at 12:32 PM, jl2012 via bitcoin-dev
> <bitcoin-dev at lists.linuxfoundation.org> wrote:
>>
>> 1. I think there is no need to have resolution at byte level, while
>> resolution at MB level is not enough. kB would be a better choice.
>>
>> 2. In my specification a v4 block without a vote is invalid, so there is
>> no need to consider absent or invalid votes
>>
>> 3. We should allow miners to explicitly vote for the status quo, so they
>> don't need to change the coinbase vote every time the size is changed. They
>> may indicate it by /BV/ in the coinbase, and we should look for the first
>> "/BVd*/" instead of "/BVd+/"
>>
>> 4. Alternatively, miners may vote in different styles: /BV1234567/,
>> /BV1500K/, /BV3M/. The first one means 1.234567MB, the second one is 1.5MB,
>> the last one is 3MB. The pattern is "/BV(\d+[KM]?)?/"
>>
>> Tier Nolan via bitcoin-dev ? 2015-09-03 07:59 ??:
>>>
>>> On Thu, Sep 3, 2015 at 8:57 AM, jl2012 via bitcoin-dev
>>> <bitcoin-dev at lists.linuxfoundation.org> wrote:
>>>
>>>> *
>>>>
>>>> hardLimit floats within the range 1-32M, inclusive.
>>>
>>>
>>> Does the 32MB limit actually still exist anywhere in the code?  In
>>> effect, it is re-instating a legacy limitation.
>>>
>>> The message size limit is to minimize the storage required per peer.
>>> If a 32MB block size is required, then each network input buffer must
>>> be at least 32MB. This makes it harder for a node to support a large
>>> number of peers.
>>>
>>> There is no reason why a single message is used for each block.  Using
>>> the merkleblock message (or a different dedicated message), it would
>>> be possible to send messages which only contain part of a block and
>>> have a limited maximum size.
>>>
>>> This would allow receiving parts of a block from multiple sources.
>>>
>>> This is a separate issue but should be considered if moving past 32MB
>>> block sizes (or maybe as a later protocol change).
>>>
>>>> * Changing hardLimit is accomplished by encoding a proposed value
>>>> within a block's coinbase scriptSig.
>>>>
>>>> * Votes refer to a byte value, encoded within the pattern "/BVd+/"
>>>> Example: /BV8000000/ votes for 8,000,000 byte hardLimit. If there is
>>>> more than one match with with pattern, the first match is counted.
>>>
>>>
>>> Is there a need for byte resolution?  Using MB resolution would use up
>>> much fewer bytes in the coinbase.
>>>
>>> Even with the +/- 20% rule, miners could vote for the nearest MB.
>>> Once the block size exceeds 5MB, then there is enough resolution
>>> anyway.
>>>
>>>> * Absent/invalid votes and votes below minimum cap (1M) are
>>>>
>>>> counted as 1M votes. Votes above the maximum cap (32M) are counted
>>>> as 32M votes.
>>>
>>>
>>> I think abstains should count for the status quo.  Votes which are out
>>> of range should be clamped.
>>>
>>> Having said that, if core supports the change, then most miners will
>>> probably vote one way or another.
>>>
>>>> New hardLimit is the median of the followings:
>>>> min(current hardLimit * 1.2, 20-percentile)
>>>> max(current hardLimit / 1.2, 80-percentile)
>>>> current hardLimit
>>>
>>>
>>> I think this is unclear, though mathematically exact.
>>>
>>> Sort the votes for the last 12,000 blocks from lowest to highest.
>>>
>>> Blocks which don't have a vote are considered a vote for the status
>>> quo.
>>>
>>> Votes are limited to +/- 20% of the current value.  Votes that are out
>>> of range are considered to vote for the nearest in range value.
>>>
>>> The raise value is defined as the vote for the 2400th highest block
>>> (20th percentile).
>>>
>>> The lower value  is defined as the vote for the 9600th highest block
>>> (80th percentile).
>>>
>>> If the raise value is higher than the status quo, then the new limit
>>> is set to the raise value.
>>>
>>> If the lower value is lower than the status quo, then the new limit is
>>> set to the lower value.
>>>
>>> Otherwise, the size limit is unchanged.
>>>
>>> _______________________________________________
>>> bitcoin-dev mailing list
>>> bitcoin-dev at lists.linuxfoundation.org
>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>
>>
>> _______________________________________________
>> bitcoin-dev mailing list
>> bitcoin-dev at lists.linuxfoundation.org
>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
>
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>

From pete at petertodd.org  Thu Sep  3 17:52:55 2015
From: pete at petertodd.org (Peter Todd)
Date: Thu, 3 Sep 2015 13:52:55 -0400
Subject: [bitcoin-dev] BIP 100 specification
In-Reply-To: <CADJgMzuTJZxj7BWoEKD51OM=V200EfEimWM2Tkix7+zkCWcE0w@mail.gmail.com>
References: <CADm_WcZyK6LUcuKqSEuR-q0hTZOC3EdJsqY1HrS_ow0knDY=7A@mail.gmail.com>
	<e54e93e519d776262f9c0f4ae23f54fb@xbt.hk>
	<CAE-z3OVd6+ncvJBwusSbcMTG6xaRxsboH3ru_zQXpbu2wW_Zng@mail.gmail.com>
	<301aa5f682f8aa408b9f6f4618095fe2@xbt.hk>
	<CADm_WcaJYogJWeQ0kkADgYMS7=H9f60Y4thr_XT-thROyYfg2w@mail.gmail.com>
	<CADJgMzuTJZxj7BWoEKD51OM=V200EfEimWM2Tkix7+zkCWcE0w@mail.gmail.com>
Message-ID: <20150903175255.GB9647@muck>

On Thu, Sep 03, 2015 at 06:32:09PM +0100, Btc Drak via bitcoin-dev wrote:
> Just use a 4-byte unsigned integer where the integer is the size in
> bytes. It's concise and less complex (and less complex to implement).
> There's no need for human readable strings here.

Solid NACK on making string parsers part of the consensus critical
codebase. (WTF?)

-- 
'peter'[:-1]@petertodd.org
00000000000000000c69430beea18c71be1d34114d7e1d4023dd1ffe1d9bc7f0
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 650 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150903/9c4c10ba/attachment.sig>

From gmaxwell at gmail.com  Thu Sep  3 17:57:48 2015
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Thu, 3 Sep 2015 17:57:48 +0000
Subject: [bitcoin-dev] block size - pay with difficulty
In-Reply-To: <CADm_WcYwErO1Av_DkMecATQEMFKL7TNZc1Nbs88k-yEKN2vbsQ@mail.gmail.com>
References: <CADm_Wcb+5Xo3HS-FNUYtCapVpYfVvUS_fxpU0Q=TZHJW1=iAFQ@mail.gmail.com>
	<CAAS2fgQOi0amBnPK8Ac3iGDN9CP-mLW6o0ncYdSAOAaqSboejg@mail.gmail.com>
	<CADm_WcYS-zbNFQJ5EPqqkQ5NhgoQNQAgs-SaF_ZZr0QCNFA3_w@mail.gmail.com>
	<CADm_WcYwErO1Av_DkMecATQEMFKL7TNZc1Nbs88k-yEKN2vbsQ@mail.gmail.com>
Message-ID: <CAAS2fgS=sBYscxa+xzi6d2h61HxgeRfdaTj55ospc3oKYgKOXg@mail.gmail.com>

On Thu, Sep 3, 2015 at 2:40 PM, Jeff Garzik <jgarzik at gmail.com> wrote:
> Expanding on pay-with-diff and volatility (closing comment),
>
> Users and miners will have significant difficulty creating and/or predicting
> a stable block size (and fee environment) with pay-with-diff across the
> months.  The ability of businesses to plan is low.  Chaos and
> unpredictability are bad in general for markets and systems.  Thus the
> binary conclusion of "not get used" or "volatility"

Sorry, I'm still not following.  I agree that predictability is important.

I don't follow where unpredictability is coming from here. Most (all?)
of the difficulty based adjustments had small limits on the difficulty
change that wouldn't have substantially changed the interblock times
relative to orphaning.

> It's written as 'a' and/or 'b'.  If you don't have idle hashpower, then paying with difficulty requires some amount of collusion ('a')
> Any miner paying with a higher difficulty either needs idle hashpower, or self-increase their own difficulty at the possible opportunity cost of losing an entire block's income to another miner who doesn't care about changing the block size.  The potential loss does not economically compensate for size increase gains in most cases, when you consider the variability of blocks (they come in bursts and pauses) and the fee income that would be associated

What the schemes propose is blocksize that increases fast with
difficulty over a narrow window. The result is that your odds of
producing a block are slightly reduced but the block you produce if
you do is more profitable: but only if there is a good supply of
transactions which pay real fees compariable to the ones you're
already taking.  The same trade-off exists at the moment with respect
to orphaning risk and miners still produce large blocks, producing a
larger block means a greater chance you're not successful (due to
orphaning) but you have a greater utility.  The orphing mediated risk
is fragile and can be traded off for centeralization advantage or by
miners bypassing validation, issues which at least so far we have no
reason to believe exist for size mediated schemes.

As you know, mining is not a race (ignoring edge effects with
orphaning/propagation time). Increasing difficulty does not put you at
an expected return disavantage compared to other miners so long as the
income increases at least proportionally (otherwise pooling with low
diff shares would be an astronomically losing proposition :)!).

Pay-for-size schemes have been successfully used in some altcoins
without the effects you're suggesting.

From jtimon at jtimon.cc  Thu Sep  3 18:23:45 2015
From: jtimon at jtimon.cc (=?UTF-8?B?Sm9yZ2UgVGltw7Nu?=)
Date: Thu, 3 Sep 2015 20:23:45 +0200
Subject: [bitcoin-dev] block size - pay with difficulty
In-Reply-To: <CAAS2fgS=sBYscxa+xzi6d2h61HxgeRfdaTj55ospc3oKYgKOXg@mail.gmail.com>
References: <CADm_Wcb+5Xo3HS-FNUYtCapVpYfVvUS_fxpU0Q=TZHJW1=iAFQ@mail.gmail.com>
	<CAAS2fgQOi0amBnPK8Ac3iGDN9CP-mLW6o0ncYdSAOAaqSboejg@mail.gmail.com>
	<CADm_WcYS-zbNFQJ5EPqqkQ5NhgoQNQAgs-SaF_ZZr0QCNFA3_w@mail.gmail.com>
	<CADm_WcYwErO1Av_DkMecATQEMFKL7TNZc1Nbs88k-yEKN2vbsQ@mail.gmail.com>
	<CAAS2fgS=sBYscxa+xzi6d2h61HxgeRfdaTj55ospc3oKYgKOXg@mail.gmail.com>
Message-ID: <CABm2gDof7evMp0HM1m1NdBPkR02kAcWp9Y3U=T1AvJxLCgNz6Q@mail.gmail.com>

Greg, I believe Jeff is focusing on BtcDrak's proposal (
https://gist.github.com/btcdrak/1c3a323100a912b605b5 ) where the
increased nBits are used to vote for the block size to raise
permanently ( or until it gets voted down).
His arguments don't seem to apply to your original proposal (where the
size is only increased for that block).


On Thu, Sep 3, 2015 at 7:57 PM, Gregory Maxwell via bitcoin-dev
<bitcoin-dev at lists.linuxfoundation.org> wrote:
> On Thu, Sep 3, 2015 at 2:40 PM, Jeff Garzik <jgarzik at gmail.com> wrote:
>> Expanding on pay-with-diff and volatility (closing comment),
>>
>> Users and miners will have significant difficulty creating and/or predicting
>> a stable block size (and fee environment) with pay-with-diff across the
>> months.  The ability of businesses to plan is low.  Chaos and
>> unpredictability are bad in general for markets and systems.  Thus the
>> binary conclusion of "not get used" or "volatility"
>
> Sorry, I'm still not following.  I agree that predictability is important.
>
> I don't follow where unpredictability is coming from here. Most (all?)
> of the difficulty based adjustments had small limits on the difficulty
> change that wouldn't have substantially changed the interblock times
> relative to orphaning.
>
>> It's written as 'a' and/or 'b'.  If you don't have idle hashpower, then paying with difficulty requires some amount of collusion ('a')
>> Any miner paying with a higher difficulty either needs idle hashpower, or self-increase their own difficulty at the possible opportunity cost of losing an entire block's income to another miner who doesn't care about changing the block size.  The potential loss does not economically compensate for size increase gains in most cases, when you consider the variability of blocks (they come in bursts and pauses) and the fee income that would be associated
>
> What the schemes propose is blocksize that increases fast with
> difficulty over a narrow window. The result is that your odds of
> producing a block are slightly reduced but the block you produce if
> you do is more profitable: but only if there is a good supply of
> transactions which pay real fees compariable to the ones you're
> already taking.  The same trade-off exists at the moment with respect
> to orphaning risk and miners still produce large blocks, producing a
> larger block means a greater chance you're not successful (due to
> orphaning) but you have a greater utility.  The orphing mediated risk
> is fragile and can be traded off for centeralization advantage or by
> miners bypassing validation, issues which at least so far we have no
> reason to believe exist for size mediated schemes.
>
> As you know, mining is not a race (ignoring edge effects with
> orphaning/propagation time). Increasing difficulty does not put you at
> an expected return disavantage compared to other miners so long as the
> income increases at least proportionally (otherwise pooling with low
> diff shares would be an astronomically losing proposition :)!).
>
> Pay-for-size schemes have been successfully used in some altcoins
> without the effects you're suggesting.
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev

From tomh at thinlink.com  Thu Sep  3 18:23:11 2015
From: tomh at thinlink.com (Tom Harding)
Date: Thu, 3 Sep 2015 11:23:11 -0700
Subject: [bitcoin-dev] block size - pay with difficulty
In-Reply-To: <CADm_Wcb+5Xo3HS-FNUYtCapVpYfVvUS_fxpU0Q=TZHJW1=iAFQ@mail.gmail.com>
References: <CADm_Wcb+5Xo3HS-FNUYtCapVpYfVvUS_fxpU0Q=TZHJW1=iAFQ@mail.gmail.com>
Message-ID: <55E8900F.4050007@thinlink.com>

On 9/2/2015 9:05 PM, Jeff Garzik via bitcoin-dev wrote:
> Schemes proposing to pay with difficulty / hashpower to change block 
> size should be avoided.  The miners incentive has always been fairly 
> straightforward - it is rational to deploy new hashpower as soon as 
> you can get it online.  Introducing the concepts of (a) requiring 
> out-of-band collusion to change block size and/or (b) requiring miners 
> to have idle hashpower on hand to change block size are both 
> unrealistic and potentially corrosive.  That potentially makes the 
> block size - and therefore fee market - too close, too sensitive to 
> the wild vagaries of the mining chip market.
>
> Pay-to-future-miner has neutral, forward looking incentives worth 
> researching.
>

Another market dependency is even more direct.

Blocksize that can be bought with either difficulty or bitcoin has 
incentives whose strength (though not direction) is subject to the 
exchange rate.  Hence those incentives are subject to the whims of fiat 
holders, who can push the exchange rate around.


From jl2012 at xbt.hk  Thu Sep  3 18:24:26 2015
From: jl2012 at xbt.hk (jl2012 at xbt.hk)
Date: Thu, 03 Sep 2015 14:24:26 -0400
Subject: [bitcoin-dev] block size - pay with difficulty
In-Reply-To: <CADm_WcbudZs6_bYfDkQ2XgqvPEMRN4ONnmz45Wz45E06bpGOrQ@mail.gmail.com>
References: <CADm_Wcb+5Xo3HS-FNUYtCapVpYfVvUS_fxpU0Q=TZHJW1=iAFQ@mail.gmail.com>
	<d15669b6ce3dbc89dff6c907a5749034@xbt.hk>
	<CADm_WcbudZs6_bYfDkQ2XgqvPEMRN4ONnmz45Wz45E06bpGOrQ@mail.gmail.com>
Message-ID: <9b65f18ed100177a0f887c0a31f3f0b8@xbt.hk>

Assuming that:
1. The current block size is 1MB
2. The block reward for a full block is 25.5BTC including tx fee
3. Miner is required to pay x% of reward penalty if he is trying to 
increase the size of the next block by x%

If a miner wants to increase the block size by 1 byte, the block size 
has to increase by 0.0001%, and the penalty will be 0.0000255BTC/byte. 
For a typical 230byte tx that'd be 0.005865BTC, or 1.35USD at current 
rate. This is the effective minimum tx fee.



Jeff Garzik ? 2015-09-03 10:18 ??:
> Thanks for the link.  I readily admit only having given
> pay-to-future-miner a little bit of thought.  Not convinced it sets a
> minimal tx fee in all cases.
> 
> On Thu, Sep 3, 2015 at 12:55 AM, <jl2012 at xbt.hk> wrote:
> 
>> Jeff Garzik via bitcoin-dev ? 2015-09-03 00:05 ??:
>> 
>>> Schemes proposing to pay with difficulty / hashpower to change
>>> block
>>> size should be avoided. The miners incentive has always been
>>> fairly
>>> straightforward - it is rational to deploy new hashpower as soon
>>> as
>>> you can get it online. Introducing the concepts of (a) requiring
>>> out-of-band collusion to change block size and/or (b) requiring
>>> miners
>>> to have idle hashpower on hand to change block size are both
>>> unrealistic and potentially corrosive. That potentially makes
>>> the
>>> block size - and therefore fee market - too close, too sensitive
>>> to
>>> the wild vagaries of the mining chip market.
>>> 
>>> Pay-to-future-miner has neutral, forward looking incentives worth
>>> researching.
>>> 
>>> _______________________________________________
>>> bitcoin-dev mailing list
>>> bitcoin-dev at lists.linuxfoundation.org
>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>> [1]
>> 
>> Ref:
>> 
> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-August/010723.html
>> [2]
>> 
>> I explained here why pay with difficulty is bad for everyone:
>> miners and users, and described the use of OP_CLTV for
>> pay-to-future-miner
>> 
>> However, a general problem of pay-to-increase-block-size scheme is
>> it indirectly sets a minimal tx fee, which could be difficult and
>> arbitrary, and is against competition
> 
> 
> 
> Links:
> ------
> [1] https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> [2]
> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-August/010723.html


From btcdrak at gmail.com  Thu Sep  3 18:28:52 2015
From: btcdrak at gmail.com (Btc Drak)
Date: Thu, 3 Sep 2015 19:28:52 +0100
Subject: [bitcoin-dev] block size - pay with difficulty
In-Reply-To: <CABm2gDof7evMp0HM1m1NdBPkR02kAcWp9Y3U=T1AvJxLCgNz6Q@mail.gmail.com>
References: <CADm_Wcb+5Xo3HS-FNUYtCapVpYfVvUS_fxpU0Q=TZHJW1=iAFQ@mail.gmail.com>
	<CAAS2fgQOi0amBnPK8Ac3iGDN9CP-mLW6o0ncYdSAOAaqSboejg@mail.gmail.com>
	<CADm_WcYS-zbNFQJ5EPqqkQ5NhgoQNQAgs-SaF_ZZr0QCNFA3_w@mail.gmail.com>
	<CADm_WcYwErO1Av_DkMecATQEMFKL7TNZc1Nbs88k-yEKN2vbsQ@mail.gmail.com>
	<CAAS2fgS=sBYscxa+xzi6d2h61HxgeRfdaTj55ospc3oKYgKOXg@mail.gmail.com>
	<CABm2gDof7evMp0HM1m1NdBPkR02kAcWp9Y3U=T1AvJxLCgNz6Q@mail.gmail.com>
Message-ID: <CADJgMzuHJ=sf_ztmaEimN=p=tr-YCkSVa=NvbeqS_mUG34E-vA@mail.gmail.com>

Maybe Jeff can clarify but my communications with him seemed to imply
he didn't think any kind of difficulty penalty scheme is workable. I
strongly dispute that assertion.

On Thu, Sep 3, 2015 at 7:23 PM, Jorge Tim?n
<bitcoin-dev at lists.linuxfoundation.org> wrote:
> Greg, I believe Jeff is focusing on BtcDrak's proposal (
> https://gist.github.com/btcdrak/1c3a323100a912b605b5 ) where the
> increased nBits are used to vote for the block size to raise
> permanently ( or until it gets voted down).
> His arguments don't seem to apply to your original proposal (where the
> size is only increased for that block).
>
>
> On Thu, Sep 3, 2015 at 7:57 PM, Gregory Maxwell via bitcoin-dev
> <bitcoin-dev at lists.linuxfoundation.org> wrote:
>> On Thu, Sep 3, 2015 at 2:40 PM, Jeff Garzik <jgarzik at gmail.com> wrote:
>>> Expanding on pay-with-diff and volatility (closing comment),
>>>
>>> Users and miners will have significant difficulty creating and/or predicting
>>> a stable block size (and fee environment) with pay-with-diff across the
>>> months.  The ability of businesses to plan is low.  Chaos and
>>> unpredictability are bad in general for markets and systems.  Thus the
>>> binary conclusion of "not get used" or "volatility"
>>
>> Sorry, I'm still not following.  I agree that predictability is important.
>>
>> I don't follow where unpredictability is coming from here. Most (all?)
>> of the difficulty based adjustments had small limits on the difficulty
>> change that wouldn't have substantially changed the interblock times
>> relative to orphaning.
>>
>>> It's written as 'a' and/or 'b'.  If you don't have idle hashpower, then paying with difficulty requires some amount of collusion ('a')
>>> Any miner paying with a higher difficulty either needs idle hashpower, or self-increase their own difficulty at the possible opportunity cost of losing an entire block's income to another miner who doesn't care about changing the block size.  The potential loss does not economically compensate for size increase gains in most cases, when you consider the variability of blocks (they come in bursts and pauses) and the fee income that would be associated
>>
>> What the schemes propose is blocksize that increases fast with
>> difficulty over a narrow window. The result is that your odds of
>> producing a block are slightly reduced but the block you produce if
>> you do is more profitable: but only if there is a good supply of
>> transactions which pay real fees compariable to the ones you're
>> already taking.  The same trade-off exists at the moment with respect
>> to orphaning risk and miners still produce large blocks, producing a
>> larger block means a greater chance you're not successful (due to
>> orphaning) but you have a greater utility.  The orphing mediated risk
>> is fragile and can be traded off for centeralization advantage or by
>> miners bypassing validation, issues which at least so far we have no
>> reason to believe exist for size mediated schemes.
>>
>> As you know, mining is not a race (ignoring edge effects with
>> orphaning/propagation time). Increasing difficulty does not put you at
>> an expected return disavantage compared to other miners so long as the
>> income increases at least proportionally (otherwise pooling with low
>> diff shares would be an astronomically losing proposition :)!).
>>
>> Pay-for-size schemes have been successfully used in some altcoins
>> without the effects you're suggesting.
>> _______________________________________________
>> bitcoin-dev mailing list
>> bitcoin-dev at lists.linuxfoundation.org
>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev

From gmaxwell at gmail.com  Thu Sep  3 19:17:07 2015
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Thu, 3 Sep 2015 19:17:07 +0000
Subject: [bitcoin-dev] block size - pay with difficulty
In-Reply-To: <CABm2gDof7evMp0HM1m1NdBPkR02kAcWp9Y3U=T1AvJxLCgNz6Q@mail.gmail.com>
References: <CADm_Wcb+5Xo3HS-FNUYtCapVpYfVvUS_fxpU0Q=TZHJW1=iAFQ@mail.gmail.com>
	<CAAS2fgQOi0amBnPK8Ac3iGDN9CP-mLW6o0ncYdSAOAaqSboejg@mail.gmail.com>
	<CADm_WcYS-zbNFQJ5EPqqkQ5NhgoQNQAgs-SaF_ZZr0QCNFA3_w@mail.gmail.com>
	<CADm_WcYwErO1Av_DkMecATQEMFKL7TNZc1Nbs88k-yEKN2vbsQ@mail.gmail.com>
	<CAAS2fgS=sBYscxa+xzi6d2h61HxgeRfdaTj55ospc3oKYgKOXg@mail.gmail.com>
	<CABm2gDof7evMp0HM1m1NdBPkR02kAcWp9Y3U=T1AvJxLCgNz6Q@mail.gmail.com>
Message-ID: <CAAS2fgR6KzaHHoVuy_NMQhp4dxvz4GRCVUCKHi_wu8qjMLe_Jg@mail.gmail.com>

On Thu, Sep 3, 2015 at 6:23 PM, Jorge Tim?n <jtimon at jtimon.cc> wrote:
> Greg, I believe Jeff is focusing on BtcDrak's proposal (
> https://gist.github.com/btcdrak/1c3a323100a912b605b5 ) where the
> increased nBits are used to vote for the block size to raise
> permanently ( or until it gets voted down).
> His arguments don't seem to apply to your original proposal (where the
> size is only increased for that block).

Ah, that would clarify things for me me.

Please everyone try to speak specifically enough to catch details like that.

From simon at bitcartel.com  Thu Sep  3 19:40:54 2015
From: simon at bitcartel.com (Simon Liu)
Date: Thu, 03 Sep 2015 12:40:54 -0700
Subject: [bitcoin-dev] BIP 100 specification
In-Reply-To: <CADm_WcZyK6LUcuKqSEuR-q0hTZOC3EdJsqY1HrS_ow0knDY=7A@mail.gmail.com>
References: <CADm_WcZyK6LUcuKqSEuR-q0hTZOC3EdJsqY1HrS_ow0knDY=7A@mail.gmail.com>
Message-ID: <55E8A246.7030102@bitcartel.com>

Hi Jeff,

Thoughts on this part of the proposal:

"Absent/invalid votes are counted as votes for the current hardLimit.
Out of range votes are counted as the nearest in-range value."

1. Why should an absent vote be considered a vote for the status quo?  A
non-voter should have zero impact on the result.

2. Why should out of range votes be counted?  They're an invalid vote, a
spoiled ballot as such, and thus it would be better if they were discarded.

Regards,
Simon


On 09/02/2015 08:33 PM, Jeff Garzik via bitcoin-dev wrote:
> BIP 100 initial public
> draft: https://github.com/jgarzik/bip100/blob/master/bip-0100.mediawiki
> 
> Emphasis on "initial"  This is a starting point for the usual open
> source feedback/iteration cycle, not an endpoint that Must Be This Way.
> 
> 
> 
> 
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> 

From opetruzel at gmail.com  Thu Sep  3 20:15:58 2015
From: opetruzel at gmail.com (Oliver Petruzel)
Date: Thu, 3 Sep 2015 16:15:58 -0400
Subject: [bitcoin-dev] BIP 100 specification
In-Reply-To: <55E8A246.7030102@bitcartel.com>
References: <CADm_WcZyK6LUcuKqSEuR-q0hTZOC3EdJsqY1HrS_ow0knDY=7A@mail.gmail.com>
	<55E8A246.7030102@bitcartel.com>
Message-ID: <CALhpmH0POEpJtAXPZdo92onCoiRFx6EwvNs=xpy-49_jRXgBHw@mail.gmail.com>

I agree with Simon's sentiments for question #1, and was actually going to
pose the same question. Non-votes seem like they may poison the well
mathematically, and counting them anyway seems to encourage a lack of
participation at a time when miners really need to be very much involved.
Since we're handing them even more control over the ecosystem with this
BIP, it would be nice to ensure they (all miners) seriously consider their
impact and role on a regular basis.

I'm curious why we couldn't/shouldn't simply drop the non-votes. (There may
be a great reason that I can't think of, but it's eluding me... LOL)

That said, I don't see any issue with counting votes from outside of the
range as the maximum/minimum accordingly (Simon's question #2). In fact,
such votes would be very interesting (worthy of further discussion) if they
begin to lean heavily in either direction.

V/r,
Oliver
On Sep 3, 2015 3:41 PM, "Simon Liu via bitcoin-dev" <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> Hi Jeff,
>
> Thoughts on this part of the proposal:
>
> "Absent/invalid votes are counted as votes for the current hardLimit.
> Out of range votes are counted as the nearest in-range value."
>
> 1. Why should an absent vote be considered a vote for the status quo?  A
> non-voter should have zero impact on the result.
>
> 2. Why should out of range votes be counted?  They're an invalid vote, a
> spoiled ballot as such, and thus it would be better if they were discarded.
>
> Regards,
> Simon
>
>
> On 09/02/2015 08:33 PM, Jeff Garzik via bitcoin-dev wrote:
> > BIP 100 initial public
> > draft: https://github.com/jgarzik/bip100/blob/master/bip-0100.mediawiki
> >
> > Emphasis on "initial"  This is a starting point for the usual open
> > source feedback/iteration cycle, not an endpoint that Must Be This Way.
> >
> >
> >
> >
> > _______________________________________________
> > bitcoin-dev mailing list
> > bitcoin-dev at lists.linuxfoundation.org
> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> >
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150903/1ab14fff/attachment.html>

From dscotese at litmocracy.com  Thu Sep  3 20:34:54 2015
From: dscotese at litmocracy.com (Dave Scotese)
Date: Thu, 3 Sep 2015 13:34:54 -0700
Subject: [bitcoin-dev] BIP 100 specification
In-Reply-To: <CALhpmH0POEpJtAXPZdo92onCoiRFx6EwvNs=xpy-49_jRXgBHw@mail.gmail.com>
References: <CADm_WcZyK6LUcuKqSEuR-q0hTZOC3EdJsqY1HrS_ow0knDY=7A@mail.gmail.com>
	<55E8A246.7030102@bitcartel.com>
	<CALhpmH0POEpJtAXPZdo92onCoiRFx6EwvNs=xpy-49_jRXgBHw@mail.gmail.com>
Message-ID: <CAGLBAhfUky0=5KoUcNxUV0N-jayHAx1Y+Ri3GdvrtMNSZA8tjg@mail.gmail.com>

I have seen "1M" mean 1,000,000 bytes as well as 1,048,576bytes and
1,024,000 bytes.  I believe the best policy is to use "megabyte" to mean
2^20 (1,048,576) bytes.  Kb always means 1024 bytes, even when a lot people
round it, so I like the K spec best.  I also see value in having human
readable data.  The spec should nail down these details.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150903/0a8d6507/attachment.html>

From jimsmit at Safe-mail.net  Thu Sep  3 20:16:03 2015
From: jimsmit at Safe-mail.net (jimsmit at Safe-mail.net)
Date: Thu, 3 Sep 2015 16:16:03 -0400
Subject: [bitcoin-dev] Adhoc Bitcoin Network
Message-ID: <N1R-ZxjN-sA-21@Safe-mail.net>

Hi,

Is there a feature in Bitcoin that supports adhoc networks, that merge their work into the main Blockchain at some point?


Thanks,
Jim

From gmaxwell at gmail.com  Thu Sep  3 23:18:08 2015
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Thu, 3 Sep 2015 23:18:08 +0000
Subject: [bitcoin-dev] Proposed minor change to BIP 01 to use a PR for
	request assignment
Message-ID: <CAAS2fgR4iGshOgsammWQ93yD0GsckUgroX-sb7mDE7XuQb5k3g@mail.gmail.com>

The process in BIP01 was written when we used a different solution for
storing and presenting BIPs.

I'm thinking of suggesting that the number request process be changed
to opening a pull req with BIP text with no number (e.g. just using
the authors name and an index as the number) as the mechenism to
request number assignment.

Is there any reason that anyone would find this objectionable?

(Please do not respond to this message with anything but a strictly
directed answer to that question, start a new thread for a different
subject. Thanks!)

From btcdrak at gmail.com  Thu Sep  3 23:45:13 2015
From: btcdrak at gmail.com (Btc Drak)
Date: Fri, 4 Sep 2015 00:45:13 +0100
Subject: [bitcoin-dev] Proposed minor change to BIP 01 to use a PR for
 request assignment
In-Reply-To: <CAAS2fgR4iGshOgsammWQ93yD0GsckUgroX-sb7mDE7XuQb5k3g@mail.gmail.com>
References: <CAAS2fgR4iGshOgsammWQ93yD0GsckUgroX-sb7mDE7XuQb5k3g@mail.gmail.com>
Message-ID: <CADJgMzvQ2g7Sr3w3_iDCY4WhZ3RuMWdmYOwib6+b4FSbB5LguA@mail.gmail.com>

It's a good idea. It would remove friction from the process and
assignment is auditable to boot, something I've had difficulty with in
the past. Almost every time I see a BIP number I would wonder, is that
self-assigned (and thus invalid) or has it been assigned by the BIP
editor.

On Fri, Sep 4, 2015 at 12:18 AM, Gregory Maxwell via bitcoin-dev
<bitcoin-dev at lists.linuxfoundation.org> wrote:
> The process in BIP01 was written when we used a different solution for
> storing and presenting BIPs.
>
> I'm thinking of suggesting that the number request process be changed
> to opening a pull req with BIP text with no number (e.g. just using
> the authors name and an index as the number) as the mechenism to
> request number assignment.
>
> Is there any reason that anyone would find this objectionable?
>
> (Please do not respond to this message with anything but a strictly
> directed answer to that question, start a new thread for a different
> subject. Thanks!)
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev

From kanzure at gmail.com  Fri Sep  4 00:02:10 2015
From: kanzure at gmail.com (Bryan Bishop)
Date: Thu, 3 Sep 2015 19:02:10 -0500
Subject: [bitcoin-dev] Multi-chain payment channel nodes
Message-ID: <CABaSBaz_-uL1+NSPT7r+VGGDA5axyHoNTa0+Ae_U4sTiPbmW1w@mail.gmail.com>

Here is a brief overview of a way to use something like the lightning
network, or another multi-hop payment channel network, to handle more
transactions per second.

These ideas were mentioned yesterday in #bitcoin-wizards and my email
does not significantly elaborate on any of it (search for
"cross-chain"):
http://gnusha.org/bitcoin-wizards/2015-09-01.log
http://gnusha.org/bitcoin-wizards/2015-09-02.log

Mailing list discussion of this can be found at [6] and on the forum at [7].

Summary
=======

Payment channel network nodes could operate on multiple chains or
ledgers, especially if those ledgers are 2-way-peg compatible with
BTC. Payment network users may have a variety of different preferences
about security models or fees or any other number of system
properties, and this method can be more accomodating than only
offering mainnet UTXOs.

Terminology
===========

During the IRC monologue I was using the word "hub" and "cross-chain
hubs" to describe a payment channel network node. Rusty Russell later
brought to my attention a good argument from Joseph Poon to prefer to
call them nodes, namely that "hub" implies centralization which isn't
really necessary to implicate in these designs. So I'll stick with
"node".

Vague requirements and scenario speculation
===========================================

- bip70-like payment-channel-compatible wallet-to-wallet communication
protocol; useful for sender and receiver to negotiate how payment
should be routed over the payment channel network.

- assume existence of other ledgers with working 2-way-peg.

- lightning network[1], amiko pay[2], or some other payment channel
network with multi-hop payment routing

- (at least some) payment channel nodes which access more than one
blockchain or ledger system

- can be more than two chains or ledgers that the node opens channels
on or operate on (octoledger nodes?)

- node can eventually setup 2-way-pegs through moxiebox code embedded
in some opcode for a specification of an alternative federated ledger
(just kidding, there be dragons here)

Implication: Chain or ledger UTXO ambivalence
=============================================

The sender (receiver) doesn't need to be concerned with which chain
the receiver (sender) wishes to transact with, as long as both parties
have wallets that can communicate with each other for fee negotiation
while payment channel routing happens.

Implication: UTXO preferences informed by fee pressures
=======================================================

An earlier identified implication by others has been that transaction
fee trends may influence when payment channel users choose to settle
on the main chain, because fees may be too high to make the tradeoffs
worthwhile for the user.

Transaction fee pressure on the bitcoin mainnet chain may influence
receivers, otherwise busy negotiating their payment channel payments,
to negotiate receipt of their UTXOs on alternative chains which might
be charging lower fees. Users that wish to settle to a ledger for a
lower fee can do so without paying for main chain transaction
prioritization.

(Concerns about market exchange rate of BTC even with the presence of
2-way-pegs could be alleviated by multi-chain nodes that practice
arbitrage. However, perhaps the financial markets will not bother
assigning different values to BTC-compatible UTXOs on different
sidechains? High mainnet fees may be reflected in market price
differences, maybe....)

Minor lightning network protocol change
=======================================

Add chain parameter to onion routing protocol message. Receipt of this
message was acknowledged by Rusty Russell yesterday. However, this
change alone may be insufficient to enable this described usage. Also
while I hope that onion routing continues to be the direction there's
no guarantee of course.

Other: Centralized ledgers
==========================

Centralized ledger operators, such as companies running spot
exchanges, could run payment channel nodes, allowing their users to
deposit and withdraw funds "immediately" subject to whether the
service provider is operating anything resembling a hot wallet. A
centralized ledger operator could be considered a valid multi-chain
destination in the above-mentioned imaginary lightning-compatible
payment protocol. Payment channel network programmers should not be
burdened with a thousand different standards for this ability, and
instead there should be an attempt at general compatibility, although
trustless implementations should be preferred if available.

Luke-Jr mentions that the same (currently imaginary) payment protocol
could also provide for user-to-user transfers on the same centralized
services, skipping the payment channels entirely.

Other
=====

Here are some things that I have been meaning to look at, but haven't looked at:

- can we do probabilistic payments[3][4] over payment channels? does
it require all payments to be probabilistic payments?

- is lightning network + multi-chain compatible with terminating on a
chain like zerocash? or inside coinjoin/coinshuffle schemes? mixing
implications?

- are payment channel networks compatible with confidential
transactions[5], and what about in the multi-chain regime?

- should work if 2-way-peg between multiple assets on same chain, like
in elements alpha?

References
==========

[1] http://lightning.network/lightning-network-paper.pdf

[2] https://github.com/cornwarecjp/amiko-pay

[3] http://lists.linuxfoundation.org/pipermail/bitcoin-dev/2013-May/002564.html

[4] https://bitcointalk.org/index.php?topic=62558.0

[5] https://bitcointalk.org/index.php?topic=1085273.0

[6] http://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-August/010797.html

[7] https://bitcointalk.org/index.php?topic=1170303.0

- Bryan
http://heybryan.org/
1 512 203 0507

From luke at dashjr.org  Fri Sep  4 00:06:05 2015
From: luke at dashjr.org (Luke Dashjr)
Date: Fri, 4 Sep 2015 00:06:05 +0000
Subject: [bitcoin-dev] RFC: HD Bitmessage address derivation based on
	BIP-43
In-Reply-To: <CAHabJ+N3Tr5FtStH6Msmj3d8EsvjeTEV6FhSEiizLVs=5ZvCfw@mail.gmail.com>
References: <CAHabJ+N3Tr5FtStH6Msmj3d8EsvjeTEV6FhSEiizLVs=5ZvCfw@mail.gmail.com>
Message-ID: <201509040006.06430.luke@dashjr.org>

On Tuesday, June 30, 2015 5:53:05 PM Justus Ranvier wrote:
> Monetas has developed a Bitmessage address derivation method from an
> HD seed based on BIP-43.
> 
> https://github.com/monetas/bips/blob/bitmessage/bip-bm01.mediawiki
>
> We're proposing this as a BIP per the BIP-43 recommendation in order
> to reserve a purpose code.

Bitmessage is not Bitcoin, thus this falls outside the scope of the BIP 
process. Since BIP 43 is still a draft, I propose modifying it to refer non-
Bitcoin purpose codes to the SLIP repository:
    https://doc.satoshilabs.com/slips/

Luke

From metamarc at metamarket.biz  Thu Sep  3 23:54:17 2015
From: metamarc at metamarket.biz (Marc D. Wood)
Date: Thu, 3 Sep 2015 19:54:17 -0400
Subject: [bitcoin-dev] Alpha release of METAmarket available for download
 NOW for Windows and Linux. Come help us test a new standard in P2P
 e-commerce!
Message-ID: <0e2c52435c55ca2424ef85c4993d3aeb.squirrel@server151.web-hosting.com>

I'm pleased to announce the newest contender in the field of decentralized
e-commerce. 100% P2P and 100% customize-able. Using METAmarket, you can
create your own market where you make the rules. Open to all or Private?
Wholesale or retail? Moderated or unmoderated? Clearnet or Darknet? You
are in complete control of your local market. There are always people
looking for cheap and easy ways to trade and METAmarket uses a zero-fee
approach. All funds are secure from theft or exit scams using a P2P
Bitcoin multisig escrow between buyer and seller ONLY. (NO third parties!)
METAmarket is built directly on top of the Bitcoin and Bitmessage
reference clients, keeping security as priority #1. The future of
e-commerce under your control. The future of e-commerce is METAmarket.

http://www.notbeinggoverned.com/metamarket-whitepaper/

https://bitcointalk.org/index.php?topic=1044827.0

http://metamarket.biz/



From marcopon at gmail.com  Fri Sep  4 00:17:47 2015
From: marcopon at gmail.com (Marco Pontello)
Date: Fri, 4 Sep 2015 02:17:47 +0200
Subject: [bitcoin-dev] Proposed minor change to BIP 01 to use a PR for
 request assignment
In-Reply-To: <CAAS2fgR4iGshOgsammWQ93yD0GsckUgroX-sb7mDE7XuQb5k3g@mail.gmail.com>
References: <CAAS2fgR4iGshOgsammWQ93yD0GsckUgroX-sb7mDE7XuQb5k3g@mail.gmail.com>
Message-ID: <CAE0pACJ0nihnwXKovQ4mJb6+ctNdzfPu_RE=y1ThmyqCZd-8gg@mail.gmail.com>

None that I can see.
In fact I was just about to ask for some details about this part of the
process, so this come just at the right time.

On Fri, Sep 4, 2015 at 1:18 AM, Gregory Maxwell via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> The process in BIP01 was written when we used a different solution for
> storing and presenting BIPs.
>
> I'm thinking of suggesting that the number request process be changed
> to opening a pull req with BIP text with no number (e.g. just using
> the authors name and an index as the number) as the mechenism to
> request number assignment.
>
> Is there any reason that anyone would find this objectionable?
>
> (Please do not respond to this message with anything but a strictly
> directed answer to that question, start a new thread for a different
> subject. Thanks!)
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>



-- 
Try the Online TrID File Identifier
http://mark0.net/onlinetrid.aspx
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150904/ba32510a/attachment.html>

From gmaxwell at gmail.com  Fri Sep  4 00:24:18 2015
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Fri, 4 Sep 2015 00:24:18 +0000
Subject: [bitcoin-dev] Proposed minor change to BIP 01 to use a PR for
 request assignment
In-Reply-To: <CAE0pACJ0nihnwXKovQ4mJb6+ctNdzfPu_RE=y1ThmyqCZd-8gg@mail.gmail.com>
References: <CAAS2fgR4iGshOgsammWQ93yD0GsckUgroX-sb7mDE7XuQb5k3g@mail.gmail.com>
	<CAE0pACJ0nihnwXKovQ4mJb6+ctNdzfPu_RE=y1ThmyqCZd-8gg@mail.gmail.com>
Message-ID: <CAAS2fgQxAYABeHqB9O6Xa_5f_JtHtXUKJpJ27oSZd6bC1ge5pg@mail.gmail.com>

On Fri, Sep 4, 2015 at 12:17 AM, Marco Pontello <marcopon at gmail.com> wrote:
> None that I can see.
> In fact I was just about to ask for some details about this part of the
> process, so this come just at the right time.

We used to have a WIKI page for all the BIP stuff and that worked
better IMO, the use of git(hub) for it was a step forward in a number
of ways but made the number assignment part an odd duck. We should
have fixed it then, but it wasn't obvious (enough) that it needed
fixing at the time. Live and learn.

From theandychase at gmail.com  Fri Sep  4 00:30:50 2015
From: theandychase at gmail.com (Andy Chase)
Date: Thu, 3 Sep 2015 17:30:50 -0700
Subject: [bitcoin-dev] [BIP/Draft] BIP Acceptance Process
Message-ID: <64B72DF6-BE37-4624-ADAA-CE28C14A4227@gmail.com>

Here?s a BIP. I wrote the BIP mostly to stir the pot on ideas of governance, but I?m moderately serious about it. This is set in Markdown for readability, but here?s the BIP-0001 Medawiki version: https://gist.github.com/andychase/dddb83c294295879308b <https://gist.github.com/andychase/dddb83c294295879308b>


  Title: BIP Acceptance Process
  Author: Andy Chase
  Status: Draft
  Type: Process
  Created: 2015-08-31

Abstract
========

The current process for accepting a BIP is not clearly defined. While
BIP-0001 defines the process for writing and submitting a Bitcoin
improvement proposal to the community it does not specify the precise
method for which BIPs are considered accepted or rejected.

This proposal sets up a method for determining BIP acceptance.

This BIP has two parts:

-   It sets up a process which a BIP goes through for comments
  and acceptance.
  -   The Process is:
      -   BIP Draft
      -   Submitted for comments (2 weeks)
      -   Waiting on opinion (two weeks)
      -   Accepted or Deferred
-   It sets up committees for reviewing comments and indicating
  acceptance under precise conditions.
  -   Committees are authorized groups that represent client authors,
      miners, merchants, and users (each as a segment). Each one must
      represent at least 1% stake in the Bitcoin ecosystem.

BIP acceptance is defined as at least 70% of the represented percentage
stake in 3 out of the 4 Bitcoin segments.

Copyright
=========

This document is placed into the public domain.

Motivation
==========

BIPs represent important improvements to Bitcoin infrastructure, and in
order to foster continued innovation, the BIP process must have clearly
defined stages and acceptance acknowledgement.

Rationale
=========

A committee system is used to organize the essential concerns of each
segment of the Bitcoin ecosystem. Although each segment may have many
different viewpoints on each BIP, in order to seek a decisive yes/no on
a BIP, a representational authoritative structure is sought. This
structure should be fluid, allowing people to move away from committees
that do not reflect their views and should be re-validated on each BIP
evaluation.

Weaknesses
==========

Each committee submits a declaration including their claim to represent
a certain percentage of the Bitcoin ecosystem in some way. Though
guidelines are given, it's up to each committee to prove their stake,
and it's up to the reader of the opinions to decide if a BIP was truly
accepted or rejected.

The author doesn't believe this is a problem because a BIP cannot be
forced on client authors, miners, merchants, or users. Ultimately this
BIP is a tool for determining whether a BIP is overwhelmingly accepted.
If one committee's validity claim becomes the factor that decides
whether the BIP will succeed or fail, this process simply didn't return
a clear answer and the BIP should be considered deferred.

Process
=======

-   **Submit for Comments.** The first BIP champion named in the
  proposal can call a "submit for comments" at any time by posting to
  the [Dev Mailing
  List](https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev>)
  mailling with the BIP number and a statement that the champion
  intends to immediately submit the BIP for comments.
  -   The BIP must have been assigned BIP-number (i.e. been approved
      by the BIP editor) to be submitted for comments.
-   **Comments.**
  -   After a BIP has been submitted for comments, a two-week waiting
      period begins in which the community should transition from
      making suggestions about a proposal to publishing their opinions
      or concerns on the proposal.
-   **Reported Opinions.**
  -   After the waiting period has past, committees must submit a
      summary of the comments which they have received from their
      represented communities.
  -   The deadline for this opinion is four weeks after the BIP was
      submitted for comments.
  -   Committees cannot reverse their decision after the deadline, but
      at their request may flag their decision as "likely to change if
      another submit for comments is called". Committees can change
      their decision if a resubmit is called.
  -   Opinions must include:
      -   One of the following statements: "Intend to accept", "Intent
          to implement", "Decline to accept", "Intend to accept, but
          decline to implement".
      -   If rejected, the opinion must cite clear and specific
          reasons for rejecting including a checklist for what must
          happen or be change for their committee to accept
          the proposal.
      -   If accepted, the committee must list why they accepted the
          proposal and also include concerns they have or what about
          the BIP that, if things changed, would cause the committee
          to likely reverse their decision if another submit for
          comments was called.
-   **Accepted.**
  -   If at least 70% of the represented percentage stake in 3 out of
      4 segments accept a proposal, a BIP is considered accepted.
      -   If a committee fails to submit an opinion, consider the
          opinion "Decline to accept".
  -   The BIP cannot be substantially changed at this point, but can
      be replaced. Minor changes or clarifications are allowed but
      must be recorded in the document.
-   **Deferred.**
  -   The acceptance test above is not met, a BIP is sent back
      into suggestions.
  -   BIP can be modified and re-submitted for a comments no sooner
      than two months after the date of the previous submit for
      comments is called.
  -   A BIP is marked rejected after two failed submission attempts. A
      rejected BIP can still be modified and re-submitted.

Committees
==========

**BIP Committees.**

-   BIP Committees are representational structures that represent
  critical segments of the Bitcoin ecosystem.
-   Each committee must prove and maintain a clear claim that they
  represent at least 1% of the Bitcoin ecosystem in some form.
  -   If an organization or community does not meet that requirement,
      it should conglomerate itself with other communities and
      organizations so that it does.
-   The segments that committees can be based around are:
  -   Bitcoin software
  -   Merchants/services/payment processors
  -   Mining operators
  -   User communities
-   A person may be represented by any number of segments, but a
  committee cannot re-use the same resource as another committee in
  the same segment.

-   **Committee Declarations.** At any point, a Committee Declaration
  can be posted.
-   This Declaration contain details about:
  -   The segment the Committee is representing
  -   Who the committee claim to represent and it's compositional
      makeup (if made up of multiple miner orgs, user orgs, companies,
      clients, etc).
  -   Proof of claim and minimum 1% stake via:
      -   Software: proof of ownership and user base (Min 1% of
          Bitcoin userbase)
      -   Merchant: proof of economic activity (Min 1% of Bitcoin
          economic activity)
      -   Mining: proof of work (Min 1% of Hashpower)
      -   For a user organization, auditable signatures qualifies for
          a valid committee (Min 1% of Bitcoin userbase)
  -   Who is running the committee, their names and roles
  -   How represented members can submit comments to the committee
  -   A code of conduct and code of ethics which the committee
      promises to abide by
-   A committee declaration is accepted if:
  -   The declaration includes all of the required elements
  -   The stake is considered valid
-   Committee validation is considered when considering the results of
  opinions submitted by committee on a BIP. A committee must have met
  the required stake percentage before a BIP is submitted for
  comments, and have maintained that stake until a valid opinion
  is submitted.
  -   Committees can dissolve at any time or submit a declaration at
      any time
  -   Declaration must have been submitted no later than the third day
      following a BIP's request for comments to be eligible for
      inclusion in a BIP

BIP Process Management Role
===========================

BIPs, Opinions, and Committee Declaration must be public at all times.

A BIP Process Manager should be chosen who is in charge of:

-   Declaring where and how BIPs, Opinions, and Committee Declaration
  should be posted and updated officially.
-   Maintaining the security and authenticity of BIPs, Opinions, and
  Committee Declarations
-   Publishing advisory documents about what kinds of proof of stakes
  are valid and what kinds should be rejected.
-   Naming a series of successors for the roles of the BIP Process
  Manager and BIP Editor (BIP-001) as needed.

Conditions for activation
=========================

In order for this process BIP to become active, it must succeed by its
own rules. At least a 4% sample of the Bitcoin community must be
represented, with at least one committee in each segment included. Once
at least one committee has submitted a declaration, a request for
comments will be called and the process should be completed from there.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150903/79dda43f/attachment-0001.html>

From luke at dashjr.org  Fri Sep  4 00:41:07 2015
From: luke at dashjr.org (Luke Dashjr)
Date: Fri, 4 Sep 2015 00:41:07 +0000
Subject: [bitcoin-dev] [BIP/Draft] BIP Acceptance Process
In-Reply-To: <64B72DF6-BE37-4624-ADAA-CE28C14A4227@gmail.com>
References: <64B72DF6-BE37-4624-ADAA-CE28C14A4227@gmail.com>
Message-ID: <201509040041.07948.luke@dashjr.org>

On Friday, September 04, 2015 12:30:50 AM Andy Chase via bitcoin-dev wrote:
> Here's a BIP. I wrote the BIP mostly to stir the pot on ideas of
> governance, but I?m moderately serious about it.

Sigh. There is *no governance at all*. Any such a BIP like this needs to 
document the natural forces involved in real-world acceptance, not try to lay 
down "rules" that people are expected to follow.

For hardforks, that means economic consensus. For softforks, miner majority. 
For basically anything else, real-world implementation and use (by any 
significant quantity of people).

Luke

From kanzure at gmail.com  Fri Sep  4 00:43:15 2015
From: kanzure at gmail.com (Bryan Bishop)
Date: Thu, 3 Sep 2015 19:43:15 -0500
Subject: [bitcoin-dev] [BIP/Draft] BIP Acceptance Process
In-Reply-To: <64B72DF6-BE37-4624-ADAA-CE28C14A4227@gmail.com>
References: <64B72DF6-BE37-4624-ADAA-CE28C14A4227@gmail.com>
Message-ID: <CABaSBaw7hM2qmuR6Z6USy5=V9NGeCPKmHHuVOH=vexDk7kY8OA@mail.gmail.com>

On Thu, Sep 3, 2015 at 7:30 PM, Andy Chase via bitcoin-dev
<bitcoin-dev at lists.linuxfoundation.org> wrote:
> I wrote the BIP mostly to stir the pot on ideas of governance

Some quick comments:

I have some objects that I am not ready to put into words, but I do
think there are easily some major objections to committee design. If I
vanish and never respond with my objections, perhaps there's an IETF
RFC about this already....

Something that may mitigate my possible objections would be some
mandatory requirement about ecosystem echo-chambers making many
attempts and efforts at steelman representations of alternative
viewpoints. Understanding objections at a fundamental level, enough to
make strong steelman statements, is very important to ensure that the
competing opinions are not censored from consideration. Pathological
integration and internalization of these steelman arguments can be
very useful, even if the process looks unusual.

Your process does not have to replace any particular BIP process
as-is, but rather could be an alternative that proceeds on its own
perhaps indefinitely without replacement. I don't think too many BIP
processes are necessarily incompatible except by namespace collision.

https://gist.github.com/andychase/dddb83c294295879308b#gistcomment-1566432

- Bryan
http://heybryan.org/
1 512 203 0507

From theandychase at gmail.com  Fri Sep  4 00:52:06 2015
From: theandychase at gmail.com (Andy Chase)
Date: Thu, 3 Sep 2015 17:52:06 -0700
Subject: [bitcoin-dev] [BIP/Draft] BIP Acceptance Process
In-Reply-To: <201509040041.07948.luke@dashjr.org>
References: <64B72DF6-BE37-4624-ADAA-CE28C14A4227@gmail.com>
	<201509040041.07948.luke@dashjr.org>
Message-ID: <CAAxp-m97sGnFkpVF-vHcg0AQpUsNMV0wESmafg40F6p23pKOwg@mail.gmail.com>

> Any such a BIP like this needs to
> document the natural forces involved in real-world acceptance, not try to
lay
> down "rules" that people are expected to follow.

That's my goal: to take the hodgepodge of we already use for acceptance,
and apply rules that allow true acceptance to be identified in a clearer
way.

If people don't follow the "rules" then the system simply won't work, this
is mentioned in the last section.

On Thu, Sep 3, 2015 at 5:41 PM, Luke Dashjr <luke at dashjr.org> wrote:

> On Friday, September 04, 2015 12:30:50 AM Andy Chase via bitcoin-dev wrote:
> > Here's a BIP. I wrote the BIP mostly to stir the pot on ideas of
> > governance, but I?m moderately serious about it.
>
> Sigh. There is *no governance at all*. Any such a BIP like this needs to
> document the natural forces involved in real-world acceptance, not try to
> lay
> down "rules" that people are expected to follow.
>
> For hardforks, that means economic consensus. For softforks, miner
> majority.
> For basically anything else, real-world implementation and use (by any
> significant quantity of people).
>
> Luke
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150903/1f4e33fd/attachment.html>

From pete at petertodd.org  Fri Sep  4 03:50:45 2015
From: pete at petertodd.org (Peter Todd)
Date: Thu, 3 Sep 2015 23:50:45 -0400
Subject: [bitcoin-dev] BIP 100 specification
In-Reply-To: <CAGLBAhfUky0=5KoUcNxUV0N-jayHAx1Y+Ri3GdvrtMNSZA8tjg@mail.gmail.com>
References: <CADm_WcZyK6LUcuKqSEuR-q0hTZOC3EdJsqY1HrS_ow0knDY=7A@mail.gmail.com>
	<55E8A246.7030102@bitcartel.com>
	<CALhpmH0POEpJtAXPZdo92onCoiRFx6EwvNs=xpy-49_jRXgBHw@mail.gmail.com>
	<CAGLBAhfUky0=5KoUcNxUV0N-jayHAx1Y+Ri3GdvrtMNSZA8tjg@mail.gmail.com>
Message-ID: <20150904035045.GA9821@muck>

On Thu, Sep 03, 2015 at 01:34:54PM -0700, Dave Scotese via bitcoin-dev wrote:
> I have seen "1M" mean 1,000,000 bytes as well as 1,048,576bytes and
> 1,024,000 bytes.  I believe the best policy is to use "megabyte" to mean
> 2^20 (1,048,576) bytes.  Kb always means 1024 bytes, even when a lot people
> round it, so I like the K spec best.  I also see value in having human
> readable data.  The spec should nail down these details.

The IEC standard is to use the prefix MiB for 2^20 bytes:

https://en.wikipedia.org/wiki/Binary_prefix

-- 
'peter'[:-1]@petertodd.org
000000000000000010f9e95aff6454fedb9d0a4b92a4108e9449c507936f9f18
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 650 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150903/8dd12b93/attachment.sig>

From theandychase at gmail.com  Fri Sep  4 04:40:56 2015
From: theandychase at gmail.com (Andy Chase)
Date: Thu, 3 Sep 2015 21:40:56 -0700
Subject: [bitcoin-dev] [BIP/Draft] BIP Acceptance Process
In-Reply-To: <CABaSBaw7hM2qmuR6Z6USy5=V9NGeCPKmHHuVOH=vexDk7kY8OA@mail.gmail.com>
References: <64B72DF6-BE37-4624-ADAA-CE28C14A4227@gmail.com>
	<CABaSBaw7hM2qmuR6Z6USy5=V9NGeCPKmHHuVOH=vexDk7kY8OA@mail.gmail.com>
Message-ID: <CAAxp-m_vo5vJEemR_hRX3hNcUPveA6EHn-ZFMJo8ke59E6BrKw@mail.gmail.com>

As posted:

**Enforcement/Organization** I agree with your comments. I don't believe in
setting up an organization to manage this process (would be too much power
and not really needed because the internet is pretty good at information
sharing). Therefore, I designed it around the assumption that participation
is voluntary. This means that it's hard to enforce rules like forcing
groups to see the other side. Groupthink/Echo chambers is real and is bad
but it's hard to change human nature.

In regards to enforcement, I believe that the best approach would be to
motivate committees to produce the best opinion they can (and also proof of
stake, another weak point in this proposal), as the better they can do this
the more likely the community will accept their opinion as valid and
important.

Indeed, I believe that without an organization managing the process, it's
up to each individual reader of each BIP/Opinions set to make the decision
on whether or not there is clear and true community acceptance.

----

**Committee versus another approach**

Pros of using Committees:

* Committees are used today in many fields with a range of success. Lots of
previous work to work off of here, history is established.
* Many segments already have committee-like structures (Merchants produce
shared signed documents, miners often represent themselves, User groups
have representatives like voting on subreddit moderators, Core Devs have
Core Devs)
* Committees can filter a range of opinions down to a yes/no
* Committees have real people that can be talked to, contacted, etc.
* Much easier to proof stake in a range (People generally accept the
Bitcoin Core has 70-90% of the market share) vs someone trying to proof
they make up (.000001% of the Bitcoin user-base)
* Committees have some stability, encourages experience and expertise
(Committee members can be knowledgeable in their area and adequately
understand BIPs)

Cons:

* Fear of committees working in the dark, censoring opinions (i.e. "Dark
smokey room of fat cats") (Possible solution: make committee power fluid
i.e. easily abandon-able: miners can change pools, users can change client
forks, change merchants, users can re-group, encourage transparency)
* More centralized, centralization of power (generally bad) (Possible
solution: encourage smaller committees)
* Centralization pressure (groups may seek to consolidate to gain power)
(Possible solution: Segmentation)
* Encourages groupthink, political maneuvers, turns good people into
politicians, mud-tossing

**Another possible approach: micro votes**

Pros:

* Each user can represent themselves, no censorship
* People feel more involved and empowered

Cons:

* How to prove and prevent manipulation?
* Only motivated people will contribute. Motivated people may be motivated
for bad reasons.


On Thu, Sep 3, 2015 at 5:43 PM, Bryan Bishop <kanzure at gmail.com> wrote:

> On Thu, Sep 3, 2015 at 7:30 PM, Andy Chase via bitcoin-dev
> <bitcoin-dev at lists.linuxfoundation.org> wrote:
> > I wrote the BIP mostly to stir the pot on ideas of governance
>
> Some quick comments:
>
> I have some objects that I am not ready to put into words, but I do
> think there are easily some major objections to committee design. If I
> vanish and never respond with my objections, perhaps there's an IETF
> RFC about this already....
>
> Something that may mitigate my possible objections would be some
> mandatory requirement about ecosystem echo-chambers making many
> attempts and efforts at steelman representations of alternative
> viewpoints. Understanding objections at a fundamental level, enough to
> make strong steelman statements, is very important to ensure that the
> competing opinions are not censored from consideration. Pathological
> integration and internalization of these steelman arguments can be
> very useful, even if the process looks unusual.
>
> Your process does not have to replace any particular BIP process
> as-is, but rather could be an alternative that proceeds on its own
> perhaps indefinitely without replacement. I don't think too many BIP
> processes are necessarily incompatible except by namespace collision.
>
> https://gist.github.com/andychase/dddb83c294295879308b#gistcomment-1566432
>
> - Bryan
> http://heybryan.org/
> 1 512 203 0507
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150903/77939aff/attachment-0001.html>

From theandychase at gmail.com  Fri Sep  4 07:53:48 2015
From: theandychase at gmail.com (Andy Chase)
Date: Fri, 4 Sep 2015 00:53:48 -0700
Subject: [bitcoin-dev] BIP 100 specification
In-Reply-To: <CAE-z3OVd6+ncvJBwusSbcMTG6xaRxsboH3ru_zQXpbu2wW_Zng@mail.gmail.com>
References: <CADm_WcZyK6LUcuKqSEuR-q0hTZOC3EdJsqY1HrS_ow0knDY=7A@mail.gmail.com>
	<e54e93e519d776262f9c0f4ae23f54fb@xbt.hk>
	<CAE-z3OVd6+ncvJBwusSbcMTG6xaRxsboH3ru_zQXpbu2wW_Zng@mail.gmail.com>
Message-ID: <CAAxp-m93s5qDrs+1OHeSog+9=HV=XKs14Vs3jf4RdqSR9tA8xQ@mail.gmail.com>

The 32Mb limit is here:
https://github.com/bitcoin/bitcoin/blob/master/src/serialize.h#L25

It's to keep the message size small enough that messages can be serialized
in memory.

Jeff if you decide to lift the 32MB limit (you really should, unless your
plan is to potentially hard force another Blocksize discussion again which
might be okay). I suggest having the 32MB ceiling auto-raise according to a
exponential factor (1.5?) starting 1 year from now.

Basically hard limit ceiling 2016-2017: 32 MB
Hard limit ceiling 2018+: 32*((currentYear-2018)*1.5) MB

The factor could be 2 like BIP-101 but I imagine you will want to be more
conservative. The delay time could also be longer if you think it will take
longer to fix the message size issue across all implementations.


On Thu, Sep 3, 2015 at 4:59 AM, Tier Nolan via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

>
>
> On Thu, Sep 3, 2015 at 8:57 AM, jl2012 via bitcoin-dev <
> bitcoin-dev at lists.linuxfoundation.org> wrote:
>
>>
>>    1.
>>
>>    hardLimit floats within the range 1-32M, inclusive.
>>
>>
>>
> Does the 32MB limit actually still exist anywhere in the code?  In effect,
> it is re-instating a legacy limitation.
>
> The message size limit is to minimize the storage required per peer.  If a
> 32MB block size is required, then each network input buffer must be at
> least 32MB. This makes it harder for a node to support a large number of
> peers.
>
> There is no reason why a single message is used for each block.  Using the
> merkleblock message (or a different dedicated message), it would be
> possible to send messages which only contain part of a block and have a
> limited maximum size.
>
> This would allow receiving parts of a block from multiple sources.
>
> This is a separate issue but should be considered if moving past 32MB
> block sizes (or maybe as a later protocol change).
>
>
>>
>>    1. Changing hardLimit is accomplished by encoding a proposed value
>>    within a block's coinbase scriptSig.
>>       1. Votes refer to a byte value, encoded within the pattern
>>       "/BV\d+/" Example: /BV8000000/ votes for 8,000,000 byte hardLimit. If
>>       there is more than one match with with pattern, the first match is counted.
>>
>> Is there a need for byte resolution?  Using MB resolution would use up
> much fewer bytes in the coinbase.
>
> Even with the +/- 20% rule, miners could vote for the nearest MB.  Once
> the block size exceeds 5MB, then there is enough resolution anyway.
>
>
>>    1. Absent/invalid votes and votes below minimum cap (1M) are counted
>>       as 1M votes. Votes above the maximum cap (32M) are counted as 32M votes.
>>
>>
> I think abstains should count for the status quo.  Votes which are out of
> range should be clamped.
>
> Having said that, if core supports the change, then most miners will
> probably vote one way or another.
>
> > New hardLimit is the median of the followings:
> > min(current hardLimit * 1.2, 20-percentile)
> > max(current hardLimit / 1.2, 80-percentile)
> > current hardLimit
>
> I think this is unclear, though mathematically exact.
>
> Sort the votes for the last 12,000 blocks from lowest to highest.
>
> Blocks which don't have a vote are considered a vote for the status quo.
>
> Votes are limited to +/- 20% of the current value.  Votes that are out of
> range are considered to vote for the nearest in range value.
>
> The raise value is defined as the vote for the 2400th highest block (20th
> percentile).
> The lower value  is defined as the vote for the 9600th highest block (80th
> percentile).
>
> If the raise value is higher than the status quo, then the new limit is
> set to the raise value.
> If the lower value is lower than the status quo, then the new limit is set
> to the lower value.
> Otherwise, the size limit is unchanged.
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150904/7a2ee899/attachment.html>

From hurricanewarn1 at aol.com  Fri Sep  4 09:55:33 2015
From: hurricanewarn1 at aol.com (hurricanewarn1 at aol.com)
Date: Fri, 4 Sep 2015 05:55:33 -0400
Subject: [bitcoin-dev] AT&T/ISPs making Bitcoin Core near impossible to use
 as a full node via hidden private dynamic IPs,
 not by specifically blocking 8333 or Bitcoin as stated in original email
In-Reply-To: <2439331.T3Lg2rgENG@crushinator>
Message-ID: <14f97c85622-1774-173a8@webprd-a78.mail.aol.com>

I sent out an email after 48 hours of dealing with trying to open up my ports for Bitcoin, I was quite frustrated and angry since I had to call like 10 times and I was making zero progress. Most of the AT&T people didn't give me any helpful clues on how to fix the situation. The original email described how there is a firewall in the DVR, and I thought it was blocking the ports. It is true there is a uncontrollable firewall in the DVR, it is false this blocks 8333.

The actual problem is due to AT&T Uverse customers being forced to use a private dynamic IP, the IP is literally hidden from the internet, so it isn't possible to send any requests at it. It will literally ignore pings across all ports. So the solution is to switch to public static IP and make sure you allow incoming traffic. 

It's not so simple though, AT&T will not let you have a public static IP without paying. I've had my router reset 10 times today by AT&T (probably automatically) and it comes back with a private dynamic IP. Then I have to reset it to use public IP and that lasts less than an hour. It literally went from open to closed while typing this email... the IP address went from public to private dynamic. 

https://i.gyazo.com/3c732687fc3d21acb7d62f6d0e23a346.png

This is making using Bitcoin Core almost impossible. I'm at least getting some synch now but maybe a few days of blocks the entire day, cause I can't sit here all day with the computer and keep fixing it.

The proof is in the pudding, there are 37 nodes using AT&T in the ENTIRE world. AT&T is a massive ISP so this is strong evidence that using Bitcoin Core as a full node on AT&T is extremely difficult and actually just about impossible.

https://i.gyazo.com/90beebe056f5fc338165e8d200536c06.png

The other big ISPs have pathetic numbers also due to the same sort've things that AT&T does, but at least Comcast has 400 nodes. AT&T is much harder to use than any other ISP I've dealt with when it comes to Bitcoin Core.

I apologize for sending out the wrong info the first time, although it is still worth noting the DVR firewall is out of your control, which might be a problem if not now then in the future. In any case AT&T has effectively blocked full nodes for Bitcoin Core via the private subnet, and the disability to change it to public without paying $15 more per month, and buying a $15 connection service so they will give you that info (if you dont pay the connection 'specialists' hang up on you). 

It is important to note this is not Bitcoin specific, but effects every program that depends on freely open ports. I don't think AT&T has anything against Bitcoin, it's just their security settings and policies have disabled Bitcoin Core for most customers. Also important to note this isn't a problem specific to AT&T, all the big ISPs are doing similar things. I believe the changes in ISP protocol are the main driving force behind the massive decline in Bitcoin nodes. Another big factor is firewalls, most people can't even remove the firewalls enough to open ports at will. The community needs to educate people on how to use Bitcoin Core when facing these intensifying security measures, or the decline of node numbers will continue.

 

 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150904/ea4a48e8/attachment.html>

From buzz at spacedout.nl  Fri Sep  4 13:47:41 2015
From: buzz at spacedout.nl (Bastiaan van den Berg)
Date: Fri, 4 Sep 2015 15:47:41 +0200
Subject: [bitcoin-dev] AT&T/ISPs making Bitcoin Core near impossible to
 use as a full node via hidden private dynamic IPs,
 not by specifically blocking 8333 or Bitcoin as stated in original email
In-Reply-To: <14f97c85622-1774-173a8@webprd-a78.mail.aol.com>
References: <2439331.T3Lg2rgENG@crushinator>
	<14f97c85622-1774-173a8@webprd-a78.mail.aol.com>
Message-ID: <CACLj26JFHNV5c-N-BVSL==hO5tEtF6K29iaWpSz1aKe+ouCCEQ@mail.gmail.com>

On Fri, Sep 4, 2015 at 11:55 AM, Zach G via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> It's not so simple though, AT&T will not let you have a public static IP
> without paying.


Not sure, but, what part of bitcoin development are you addressing in this
email?

--
buZz
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150904/26c78fef/attachment.html>

From pete at petertodd.org  Fri Sep  4 15:24:42 2015
From: pete at petertodd.org (Peter Todd)
Date: Fri, 4 Sep 2015 11:24:42 -0400
Subject: [bitcoin-dev] Proposed minor change to BIP 01 to use a PR for
 request assignment
In-Reply-To: <CAAS2fgR4iGshOgsammWQ93yD0GsckUgroX-sb7mDE7XuQb5k3g@mail.gmail.com>
References: <CAAS2fgR4iGshOgsammWQ93yD0GsckUgroX-sb7mDE7XuQb5k3g@mail.gmail.com>
Message-ID: <20150904152441.GC7589@muck>

On Thu, Sep 03, 2015 at 11:18:08PM +0000, Gregory Maxwell via bitcoin-dev wrote:
> The process in BIP01 was written when we used a different solution for
> storing and presenting BIPs.
> 
> I'm thinking of suggesting that the number request process be changed
> to opening a pull req with BIP text with no number (e.g. just using
> the authors name and an index as the number) as the mechenism to
> request number assignment.
> 
> Is there any reason that anyone would find this objectionable?
> 
> (Please do not respond to this message with anything but a strictly
> directed answer to that question, start a new thread for a different
> subject. Thanks!)

ACK

-- 
'peter'[:-1]@petertodd.org
000000000000000010f9e95aff6454fedb9d0a4b92a4108e9449c507936f9f18
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 650 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150904/fdf04575/attachment.sig>

From simon at bitcartel.com  Fri Sep  4 15:37:33 2015
From: simon at bitcartel.com (Simon Liu)
Date: Fri, 04 Sep 2015 08:37:33 -0700
Subject: [bitcoin-dev] BIP 100 specification
In-Reply-To: <CAAxp-m93s5qDrs+1OHeSog+9=HV=XKs14Vs3jf4RdqSR9tA8xQ@mail.gmail.com>
References: <CADm_WcZyK6LUcuKqSEuR-q0hTZOC3EdJsqY1HrS_ow0knDY=7A@mail.gmail.com>	<e54e93e519d776262f9c0f4ae23f54fb@xbt.hk>	<CAE-z3OVd6+ncvJBwusSbcMTG6xaRxsboH3ru_zQXpbu2wW_Zng@mail.gmail.com>
	<CAAxp-m93s5qDrs+1OHeSog+9=HV=XKs14Vs3jf4RdqSR9tA8xQ@mail.gmail.com>
Message-ID: <55E9BABD.7080505@bitcartel.com>

Maybe grab some code from BIP101 ?  It permits block messages > 2MB,
while retaining the current limit of 2 MB imposed on other network
messages.  The 32 MB limit was patched a few months ago.

Links to code:

https://www.reddit.com/r/bitcoinxt/comments/3in5mm/psa_correction_to_btcchina_letter_which_states/



On 09/04/2015 12:53 AM, Andy Chase via bitcoin-dev wrote:
> The 32Mb limit is
> here: https://github.com/bitcoin/bitcoin/blob/master/src/serialize.h#L25
> 
> It's to keep the message size small enough that messages can be
> serialized in memory.
> 
> Jeff if you decide to lift the 32MB limit (you really should, unless
> your plan is to potentially hard force another Blocksize discussion
> again which might be okay). I suggest having the 32MB ceiling auto-raise
> according to a exponential factor (1.5?) starting 1 year from now.
> 
> Basically hard limit ceiling 2016-2017: 32 MB
> Hard limit ceiling 2018+: 32*((currentYear-2018)*1.5) MB
> 
> The factor could be 2 like BIP-101 but I imagine you will want to be
> more conservative. The delay time could also be longer if you think it
> will take longer to fix the message size issue across all implementations.
> 

From btcdrak at gmail.com  Fri Sep  4 15:40:26 2015
From: btcdrak at gmail.com (Btc Drak)
Date: Fri, 4 Sep 2015 16:40:26 +0100
Subject: [bitcoin-dev] BIP 100 specification
In-Reply-To: <55E9BABD.7080505@bitcartel.com>
References: <CADm_WcZyK6LUcuKqSEuR-q0hTZOC3EdJsqY1HrS_ow0knDY=7A@mail.gmail.com>
	<e54e93e519d776262f9c0f4ae23f54fb@xbt.hk>
	<CAE-z3OVd6+ncvJBwusSbcMTG6xaRxsboH3ru_zQXpbu2wW_Zng@mail.gmail.com>
	<CAAxp-m93s5qDrs+1OHeSog+9=HV=XKs14Vs3jf4RdqSR9tA8xQ@mail.gmail.com>
	<55E9BABD.7080505@bitcartel.com>
Message-ID: <CADJgMzvM4ZfjktS9KwbtJ52x5Ea75OXy9c_ngTCXyAw7uDyB1g@mail.gmail.com>

If you read between the lines of what was recently changed and why
(reducing to 2MB), it seems reasonable to assume BIP101's allowance
opens up some of the attack vector again.

On Fri, Sep 4, 2015 at 4:37 PM, Simon Liu via bitcoin-dev
<bitcoin-dev at lists.linuxfoundation.org> wrote:
> Maybe grab some code from BIP101 ?  It permits block messages > 2MB,
> while retaining the current limit of 2 MB imposed on other network
> messages.  The 32 MB limit was patched a few months ago.
>
> Links to code:
>
> https://www.reddit.com/r/bitcoinxt/comments/3in5mm/psa_correction_to_btcchina_letter_which_states/
>
>
>
> On 09/04/2015 12:53 AM, Andy Chase via bitcoin-dev wrote:
>> The 32Mb limit is
>> here: https://github.com/bitcoin/bitcoin/blob/master/src/serialize.h#L25
>>
>> It's to keep the message size small enough that messages can be
>> serialized in memory.
>>
>> Jeff if you decide to lift the 32MB limit (you really should, unless
>> your plan is to potentially hard force another Blocksize discussion
>> again which might be okay). I suggest having the 32MB ceiling auto-raise
>> according to a exponential factor (1.5?) starting 1 year from now.
>>
>> Basically hard limit ceiling 2016-2017: 32 MB
>> Hard limit ceiling 2018+: 32*((currentYear-2018)*1.5) MB
>>
>> The factor could be 2 like BIP-101 but I imagine you will want to be
>> more conservative. The delay time could also be longer if you think it
>> will take longer to fix the message size issue across all implementations.
>>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev

From doug at bitcoinarmory.com  Fri Sep  4 15:33:21 2015
From: doug at bitcoinarmory.com (Douglas Roark)
Date: Fri, 4 Sep 2015 11:33:21 -0400
Subject: [bitcoin-dev] Proposed minor change to BIP 01 to use a PR for
 request assignment
In-Reply-To: <CAAS2fgR4iGshOgsammWQ93yD0GsckUgroX-sb7mDE7XuQb5k3g@mail.gmail.com>
References: <CAAS2fgR4iGshOgsammWQ93yD0GsckUgroX-sb7mDE7XuQb5k3g@mail.gmail.com>
Message-ID: <55E9B9C1.6050607@bitcoinarmory.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512

ACK

- -- 
- ---
Douglas Roark
Senior Developer
Armory Technologies, Inc.
doug at bitcoinarmory.com
PGP key ID: 92ADC0D7
-----BEGIN PGP SIGNATURE-----
Version: GnuPG/MacGPG2 v2
Comment: GPGTools - https://gpgtools.org

iQIcBAEBCgAGBQJV6bnBAAoJEGybVGGSrcDXoDAQAJyfypOpGjTQZFR4BAbJzOJ0
vbHv2QjBcf8/FJ7BxLyZYyIzwBBfYyacm69fETKgo2JyzfhFb3KsF7M0lsggBKRT
R5DFr6GRDXTC1p7L7II3U6oGRQ3yHbxvMyep/6CyJYGaEfdnlTinxYsb4WlFIiPh
ZMr9CH+hLHUb4s3Re5/Wl6RNz83ZNeJSAO5o2Iv/2+GCF3Iyh8UfADzDrnMOuWKE
6URhNVvCHvsxYgS/00QN8MW2Dn3txCrUEag10hJ59wlkWRDA26wHosB3m5w/arbO
3OzAkthrkImTYTCusX+Mcitvldc8J88YQD4kNOJvc472j0TTaksl/ubAvDUx1hon
aHdQqb/6A+kxhsvHox0BmUmoqDiAGsVPVJinCDVG8QRUDMVbVIhRgPLK5p9ND/Ab
B0Nm5zZgtyPnGUrY6Ci22xHmeJKcGVmYMudYEkwOOMK8x0AcnDifMu4NjWxxFwIN
Q1CSLuF7FGuAEenO9v/oZklLWrTZ4ewA4pM5uaYtTQHc3AD+Jg3/ZcmHQxDlSQMJ
EiaB5rvLXwvlLthDOtr3gEG+8f08KWl0eJijrhd6UQCvEsMje19LAXxuU49u2A3C
l1T2XzxPquGC1FfrWCwY+/pGsOaH7eNnCBBnBZGBuXWt3pFL2C0OVWPa3J9ZYj26
PYHDKl1eYP4trWGGY/T2
=G5PZ
-----END PGP SIGNATURE-----

From justus at openbitcoinprivacyproject.org  Fri Sep  4 17:48:48 2015
From: justus at openbitcoinprivacyproject.org (Justus Ranvier)
Date: Fri, 4 Sep 2015 12:48:48 -0500
Subject: [bitcoin-dev] RFC: HD Bitmessage address derivation based on
 BIP-43
In-Reply-To: <201509040006.06430.luke@dashjr.org>
References: <CAHabJ+N3Tr5FtStH6Msmj3d8EsvjeTEV6FhSEiizLVs=5ZvCfw@mail.gmail.com>
	<201509040006.06430.luke@dashjr.org>
Message-ID: <55E9D980.5020901@openbitcoinprivacyproject.org>

On 09/03/2015 07:06 PM, Luke Dashjr via bitcoin-dev wrote:
> Since BIP 43 is still a draft, I propose modifying it to refer non-
> Bitcoin purpose codes to the SLIP repository:
>     https://doc.satoshilabs.com/slips/

What benefit is created by delegating the BIP-43 namespace management to
that company in particular?

BIP-43 as it is currently composed provides the convenient feature of
purpose codes matching the BIP number. Moving purpose codes to a
separate namespace add complexity to its usage for no discernible benefit.

-- 
Justus Ranvier
Open Bitcoin Privacy Project
http://www.openbitcoinprivacyproject.org/
justus at openbitcoinprivacyproject.org
E7AD 8215 8497 3673 6D9E 61C4 2A5F DA70 EAD9 E623
-------------- next part --------------
A non-text attachment was scrubbed...
Name: 0xEAD9E623.asc
Type: application/pgp-keys
Size: 18381 bytes
Desc: not available
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150904/ade4f0f3/attachment-0001.bin>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 801 bytes
Desc: OpenPGP digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150904/ade4f0f3/attachment-0001.sig>

From luke at dashjr.org  Fri Sep  4 18:21:15 2015
From: luke at dashjr.org (Luke Dashjr)
Date: Fri, 4 Sep 2015 18:21:15 +0000
Subject: [bitcoin-dev] RFC: HD Bitmessage address derivation based on
	BIP-43
In-Reply-To: <55E9D980.5020901@openbitcoinprivacyproject.org>
References: <CAHabJ+N3Tr5FtStH6Msmj3d8EsvjeTEV6FhSEiizLVs=5ZvCfw@mail.gmail.com>
	<201509040006.06430.luke@dashjr.org>
	<55E9D980.5020901@openbitcoinprivacyproject.org>
Message-ID: <201509041821.16309.luke@dashjr.org>

On Friday, September 04, 2015 5:48:48 PM Justus Ranvier wrote:
> On 09/03/2015 07:06 PM, Luke Dashjr via bitcoin-dev wrote:
> > Since BIP 43 is still a draft, I propose modifying it to refer non-
> > 
> > Bitcoin purpose codes to the SLIP repository:
> >     https://doc.satoshilabs.com/slips/
> 
> What benefit is created by delegating the BIP-43 namespace management to
> that company in particular?

Feel free to create a company-independent repository instead.
Although I don't think SLIPs are intended to be biased toward their company.

> BIP-43 as it is currently composed provides the convenient feature of
> purpose codes matching the BIP number. Moving purpose codes to a
> separate namespace add complexity to its usage for no discernible benefit.

This is not Bitcoin's problem... Polluting the BIP repository with N non-
Bitcoin related specifications would be.

Luke

From justus at openbitcoinprivacyproject.org  Fri Sep  4 18:25:16 2015
From: justus at openbitcoinprivacyproject.org (Justus Ranvier)
Date: Fri, 4 Sep 2015 13:25:16 -0500
Subject: [bitcoin-dev] RFC: HD Bitmessage address derivation based on
 BIP-43
In-Reply-To: <201509041821.16309.luke@dashjr.org>
References: <CAHabJ+N3Tr5FtStH6Msmj3d8EsvjeTEV6FhSEiizLVs=5ZvCfw@mail.gmail.com>
	<201509040006.06430.luke@dashjr.org>
	<55E9D980.5020901@openbitcoinprivacyproject.org>
	<201509041821.16309.luke@dashjr.org>
Message-ID: <55E9E20C.70807@openbitcoinprivacyproject.org>

On 09/04/2015 01:21 PM, Luke Dashjr wrote:
> This is not Bitcoin's problem... Polluting the BIP repository with N non-
> Bitcoin related specifications would be.

HD generation of keypairs from a single seed for many non-conflicting
uses is a valuable and useful technique.

Intentionally making a useful technology less useful because assigning
non-colliding numbers is too hard is a strange approach to software
engineering.

-- 
Justus Ranvier
Open Bitcoin Privacy Project
http://www.openbitcoinprivacyproject.org/
justus at openbitcoinprivacyproject.org
E7AD 8215 8497 3673 6D9E 61C4 2A5F DA70 EAD9 E623
-------------- next part --------------
A non-text attachment was scrubbed...
Name: 0xEAD9E623.asc
Type: application/pgp-keys
Size: 18381 bytes
Desc: not available
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150904/ba5265b3/attachment.bin>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 801 bytes
Desc: OpenPGP digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150904/ba5265b3/attachment.sig>

From elombrozo at gmail.com  Fri Sep  4 18:41:52 2015
From: elombrozo at gmail.com (Eric Lombrozo)
Date: Fri, 04 Sep 2015 18:41:52 +0000
Subject: [bitcoin-dev] Proposed minor change to BIP 01 to use a PR for
 request assignment
In-Reply-To: <CAAS2fgR4iGshOgsammWQ93yD0GsckUgroX-sb7mDE7XuQb5k3g@mail.gmail.com>
Message-ID: <em4118a7e8-3bd6-45e8-bce1-6c7c2d57e254@platinum>

I think it's a reasonable approach. Once the number is assigned, the 
change is made and the pull request is updated.

Only thing is it would be nice to be able to indicate which pull 
requests are number requests and which pull requests are ready for 
merging. Perhaps we should make a special label for number requests.

- Eric

------ Original Message ------
From: "Gregory Maxwell via bitcoin-dev" 
<bitcoin-dev at lists.linuxfoundation.org>
To: "Bitcoin Dev" <bitcoin-dev at lists.linuxfoundation.org>
Sent: 9/3/2015 4:18:08 PM
Subject: [bitcoin-dev] Proposed minor change to BIP 01 to use a PR for 
request assignment

>The process in BIP01 was written when we used a different solution for
>storing and presenting BIPs.
>
>I'm thinking of suggesting that the number request process be changed
>to opening a pull req with BIP text with no number (e.g. just using
>the authors name and an index as the number) as the mechenism to
>request number assignment.
>
>Is there any reason that anyone would find this objectionable?
>
>(Please do not respond to this message with anything but a strictly
>directed answer to that question, start a new thread for a different
>subject. Thanks!)
>_______________________________________________
>bitcoin-dev mailing list
>bitcoin-dev at lists.linuxfoundation.org
>https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev


From btcdrak at gmail.com  Fri Sep  4 19:20:58 2015
From: btcdrak at gmail.com (Btc Drak)
Date: Fri, 4 Sep 2015 20:20:58 +0100
Subject: [bitcoin-dev] [BIP/Draft] BIP Acceptance Process
In-Reply-To: <CAAxp-m_vo5vJEemR_hRX3hNcUPveA6EHn-ZFMJo8ke59E6BrKw@mail.gmail.com>
References: <64B72DF6-BE37-4624-ADAA-CE28C14A4227@gmail.com>
	<CABaSBaw7hM2qmuR6Z6USy5=V9NGeCPKmHHuVOH=vexDk7kY8OA@mail.gmail.com>
	<CAAxp-m_vo5vJEemR_hRX3hNcUPveA6EHn-ZFMJo8ke59E6BrKw@mail.gmail.com>
Message-ID: <CADJgMzvanj41Dfa4kQsq5SVvt-Zeee2SOfD3Uws-FpBQsyZsqg@mail.gmail.com>

I'm rather perplexed about this proposal. What exactly is wrong with
the existing BIPs process? I mean, it seems to me anyone can publish a
BIP pretty easily in the BIPs repository. There doesnt seems to be any
real barrier to entry whatsoever. I know there have been all manner of
aspersions, but having just written two BIPs there was no friction at
all.

Whether the ecosystem adopts a BIP is another question of course, but
that's out of scope of the BIPs project anyhow. Take BIP101
controversial as it gets, but it's there. Whether Bitcoin implementers
implement it is another kettle of fish and a matter for each project
to decide. It's absolutely NOT the realm of the BIPs project itself.
Bitcoin Core does not make any consensus critical changes with a BIP.
Where one seeks to establish certain standards, say for privacy, a BIP
would be appropriate so the ecosystem can harmonise methodology across
the board.

The status of a BIP is not really determined by anyone, it's by
adoption - that's where consensus happens. There's a little legroom
around this but I'm not entirely sure what you are trying to solve.
Yes the process is loose, but is it broken? There have been a flood of
BIPs added recently with zero bureaucracy or friction.

BIP0001 is the BIP that defines the BIP process. Interestingly enough
the only BIP that might be controversial is in fact a BIP to change
the way BIPs are handled!

So I'd really prefer to start this conversation with a breakdown of
what you think is broken first before tackling what may or may not
need fixing. I would be very cautious bringing "administrative"
burdens to the process or evicting common sense from the proceedings.
Much of the debates around consensus building seem to negate the
importance of common sense and the simple fact that "it's obvious when
you see it".

I'm sure there can be improvements, but for me personally, I need to
see what is broken before I can make any judgement on a potential way
forward, and if it's not broken, we should leave it alone.


On Fri, Sep 4, 2015 at 5:40 AM, Andy Chase via bitcoin-dev
<bitcoin-dev at lists.linuxfoundation.org> wrote:
> As posted:
>
> **Enforcement/Organization** I agree with your comments. I don't believe in
> setting up an organization to manage this process (would be too much power
> and not really needed because the internet is pretty good at information
> sharing). Therefore, I designed it around the assumption that participation
> is voluntary. This means that it's hard to enforce rules like forcing groups
> to see the other side. Groupthink/Echo chambers is real and is bad but it's
> hard to change human nature.
>
> In regards to enforcement, I believe that the best approach would be to
> motivate committees to produce the best opinion they can (and also proof of
> stake, another weak point in this proposal), as the better they can do this
> the more likely the community will accept their opinion as valid and
> important.
>
> Indeed, I believe that without an organization managing the process, it's up
> to each individual reader of each BIP/Opinions set to make the decision on
> whether or not there is clear and true community acceptance.
>
> ----
>
> **Committee versus another approach**
>
> Pros of using Committees:
>
> * Committees are used today in many fields with a range of success. Lots of
> previous work to work off of here, history is established.
> * Many segments already have committee-like structures (Merchants produce
> shared signed documents, miners often represent themselves, User groups have
> representatives like voting on subreddit moderators, Core Devs have Core
> Devs)
> * Committees can filter a range of opinions down to a yes/no
> * Committees have real people that can be talked to, contacted, etc.
> * Much easier to proof stake in a range (People generally accept the Bitcoin
> Core has 70-90% of the market share) vs someone trying to proof they make up
> (.000001% of the Bitcoin user-base)
> * Committees have some stability, encourages experience and expertise
> (Committee members can be knowledgeable in their area and adequately
> understand BIPs)
>
> Cons:
>
> * Fear of committees working in the dark, censoring opinions (i.e. "Dark
> smokey room of fat cats") (Possible solution: make committee power fluid
> i.e. easily abandon-able: miners can change pools, users can change client
> forks, change merchants, users can re-group, encourage transparency)
> * More centralized, centralization of power (generally bad) (Possible
> solution: encourage smaller committees)
> * Centralization pressure (groups may seek to consolidate to gain power)
> (Possible solution: Segmentation)
> * Encourages groupthink, political maneuvers, turns good people into
> politicians, mud-tossing
>
> **Another possible approach: micro votes**
>
> Pros:
>
> * Each user can represent themselves, no censorship
> * People feel more involved and empowered
>
> Cons:
>
> * How to prove and prevent manipulation?
> * Only motivated people will contribute. Motivated people may be motivated
> for bad reasons.
>
>
> On Thu, Sep 3, 2015 at 5:43 PM, Bryan Bishop <kanzure at gmail.com> wrote:
>>
>> On Thu, Sep 3, 2015 at 7:30 PM, Andy Chase via bitcoin-dev
>> <bitcoin-dev at lists.linuxfoundation.org> wrote:
>> > I wrote the BIP mostly to stir the pot on ideas of governance
>>
>> Some quick comments:
>>
>> I have some objects that I am not ready to put into words, but I do
>> think there are easily some major objections to committee design. If I
>> vanish and never respond with my objections, perhaps there's an IETF
>> RFC about this already....
>>
>> Something that may mitigate my possible objections would be some
>> mandatory requirement about ecosystem echo-chambers making many
>> attempts and efforts at steelman representations of alternative
>> viewpoints. Understanding objections at a fundamental level, enough to
>> make strong steelman statements, is very important to ensure that the
>> competing opinions are not censored from consideration. Pathological
>> integration and internalization of these steelman arguments can be
>> very useful, even if the process looks unusual.
>>
>> Your process does not have to replace any particular BIP process
>> as-is, but rather could be an alternative that proceeds on its own
>> perhaps indefinitely without replacement. I don't think too many BIP
>> processes are necessarily incompatible except by namespace collision.
>>
>> https://gist.github.com/andychase/dddb83c294295879308b#gistcomment-1566432
>>
>> - Bryan
>> http://heybryan.org/
>> 1 512 203 0507
>
>
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>

From theandychase at gmail.com  Fri Sep  4 20:13:18 2015
From: theandychase at gmail.com (Andy Chase)
Date: Fri, 4 Sep 2015 13:13:18 -0700
Subject: [bitcoin-dev] [BIP/Draft] BIP Acceptance Process
In-Reply-To: <CADJgMzvanj41Dfa4kQsq5SVvt-Zeee2SOfD3Uws-FpBQsyZsqg@mail.gmail.com>
References: <64B72DF6-BE37-4624-ADAA-CE28C14A4227@gmail.com>
	<CABaSBaw7hM2qmuR6Z6USy5=V9NGeCPKmHHuVOH=vexDk7kY8OA@mail.gmail.com>
	<CAAxp-m_vo5vJEemR_hRX3hNcUPveA6EHn-ZFMJo8ke59E6BrKw@mail.gmail.com>
	<CADJgMzvanj41Dfa4kQsq5SVvt-Zeee2SOfD3Uws-FpBQsyZsqg@mail.gmail.com>
Message-ID: <CAAxp-m_EmMbVBqQK9ijoe+n0dAs726TaBX5m1Wgzsv-m1KHdfQ@mail.gmail.com>

Thanks for your thoughts.

My proposal isn't perfect for sure. There's likely much better ways to do
it. But to be clear what I'm trying to solve is basically this:

Who makes high-level Bitcoin decisions? Miners, client devs, merchants, or
users? Let's set up a system where everyone has a say and clear acceptance
can be reached.

---

My motivation for writing this proposal is stated right at the start:
> "The current process for accepting a BIP is not clearly defined. While
BIP-0001 defines the process for writing and submitting a Bitcoin
Improvement Proposal to the community it does not specify the precise
method for which BIPs are considered accepted or rejected."

BIPs are considered "accepted" right now based on an undefined system,
quite honestly. Btc Drak: What's the system for accepting a BIP? Words like
"consensus" come up but they aren't defined. My goal is to define a system
that makes finding "consensus" (I like the word "acceptance" better) in a
clear and fair way.

I.e. what's broken?

* Being sure that a proposal is widely accepted or rejected
* Preventing deadlock (i.e. one person's weak objections preventing
acceptance)
* Receiving feedback from important segments like user groups,
merchants/exchanges, etc. in a systematic and clear way instead of going
and forth or having "oracles" on technical advisory boards.

> Yes the process is loose, but is it broken?

Yes/No. Work gets done with the current process. Work can get done with
this process. The goal is for this process is to be safer/clearer/better
defined way.

> There have been a flood of
> BIPs added recently with zero bureaucracy or friction.

As we move forward, we want to balance the powers in such a way that we may
want to pause a bit before we accept each proposal. 2 weeks for comments +
2 weeks for opinions will slow things down, but it shouldn't stall
meaningful work. I used 4 weeks for the process with the understanding that
most proposals are clear and easily acceptable. Controversial proposals
will likely need more time and thus will likely have be submitted at least
twice to discover a clear response.

"Accepting" a BIP means just that: It's accepted. What's acceptance mean?
This proposal provides an answer.

Client implementations, users, miners, and merchants can feel safe
implementing and using a feature that has clear acceptance. This process
isn't meant to force anything on client implementors, users, miners, or
merchants.

On Fri, Sep 4, 2015 at 12:20 PM, Btc Drak <btcdrak at gmail.com> wrote:

> I'm rather perplexed about this proposal. What exactly is wrong with
> the existing BIPs process? I mean, it seems to me anyone can publish a
> BIP pretty easily in the BIPs repository. There doesnt seems to be any
> real barrier to entry whatsoever. I know there have been all manner of
> aspersions, but having just written two BIPs there was no friction at
> all.
>
> Whether the ecosystem adopts a BIP is another question of course, but
> that's out of scope of the BIPs project anyhow. Take BIP101
> controversial as it gets, but it's there. Whether Bitcoin implementers
> implement it is another kettle of fish and a matter for each project
> to decide. It's absolutely NOT the realm of the BIPs project itself.
> Bitcoin Core does not make any consensus critical changes with a BIP.
> Where one seeks to establish certain standards, say for privacy, a BIP
> would be appropriate so the ecosystem can harmonise methodology across
> the board.
>
> The status of a BIP is not really determined by anyone, it's by
> adoption - that's where consensus happens. There's a little legroom
> around this but I'm not entirely sure what you are trying to solve.
> Yes the process is loose, but is it broken? There have been a flood of
> BIPs added recently with zero bureaucracy or friction.
>
> BIP0001 is the BIP that defines the BIP process. Interestingly enough
> the only BIP that might be controversial is in fact a BIP to change
> the way BIPs are handled!
>
> So I'd really prefer to start this conversation with a breakdown of
> what you think is broken first before tackling what may or may not
> need fixing. I would be very cautious bringing "administrative"
> burdens to the process or evicting common sense from the proceedings.
> Much of the debates around consensus building seem to negate the
> importance of common sense and the simple fact that "it's obvious when
> you see it".
>
> I'm sure there can be improvements, but for me personally, I need to
> see what is broken before I can make any judgement on a potential way
> forward, and if it's not broken, we should leave it alone.
>
>
> On Fri, Sep 4, 2015 at 5:40 AM, Andy Chase via bitcoin-dev
> <bitcoin-dev at lists.linuxfoundation.org> wrote:
> > As posted:
> >
> > **Enforcement/Organization** I agree with your comments. I don't believe
> in
> > setting up an organization to manage this process (would be too much
> power
> > and not really needed because the internet is pretty good at information
> > sharing). Therefore, I designed it around the assumption that
> participation
> > is voluntary. This means that it's hard to enforce rules like forcing
> groups
> > to see the other side. Groupthink/Echo chambers is real and is bad but
> it's
> > hard to change human nature.
> >
> > In regards to enforcement, I believe that the best approach would be to
> > motivate committees to produce the best opinion they can (and also proof
> of
> > stake, another weak point in this proposal), as the better they can do
> this
> > the more likely the community will accept their opinion as valid and
> > important.
> >
> > Indeed, I believe that without an organization managing the process,
> it's up
> > to each individual reader of each BIP/Opinions set to make the decision
> on
> > whether or not there is clear and true community acceptance.
> >
> > ----
> >
> > **Committee versus another approach**
> >
> > Pros of using Committees:
> >
> > * Committees are used today in many fields with a range of success. Lots
> of
> > previous work to work off of here, history is established.
> > * Many segments already have committee-like structures (Merchants produce
> > shared signed documents, miners often represent themselves, User groups
> have
> > representatives like voting on subreddit moderators, Core Devs have Core
> > Devs)
> > * Committees can filter a range of opinions down to a yes/no
> > * Committees have real people that can be talked to, contacted, etc.
> > * Much easier to proof stake in a range (People generally accept the
> Bitcoin
> > Core has 70-90% of the market share) vs someone trying to proof they
> make up
> > (.000001% of the Bitcoin user-base)
> > * Committees have some stability, encourages experience and expertise
> > (Committee members can be knowledgeable in their area and adequately
> > understand BIPs)
> >
> > Cons:
> >
> > * Fear of committees working in the dark, censoring opinions (i.e. "Dark
> > smokey room of fat cats") (Possible solution: make committee power fluid
> > i.e. easily abandon-able: miners can change pools, users can change
> client
> > forks, change merchants, users can re-group, encourage transparency)
> > * More centralized, centralization of power (generally bad) (Possible
> > solution: encourage smaller committees)
> > * Centralization pressure (groups may seek to consolidate to gain power)
> > (Possible solution: Segmentation)
> > * Encourages groupthink, political maneuvers, turns good people into
> > politicians, mud-tossing
> >
> > **Another possible approach: micro votes**
> >
> > Pros:
> >
> > * Each user can represent themselves, no censorship
> > * People feel more involved and empowered
> >
> > Cons:
> >
> > * How to prove and prevent manipulation?
> > * Only motivated people will contribute. Motivated people may be
> motivated
> > for bad reasons.
> >
> >
> > On Thu, Sep 3, 2015 at 5:43 PM, Bryan Bishop <kanzure at gmail.com> wrote:
> >>
> >> On Thu, Sep 3, 2015 at 7:30 PM, Andy Chase via bitcoin-dev
> >> <bitcoin-dev at lists.linuxfoundation.org> wrote:
> >> > I wrote the BIP mostly to stir the pot on ideas of governance
> >>
> >> Some quick comments:
> >>
> >> I have some objects that I am not ready to put into words, but I do
> >> think there are easily some major objections to committee design. If I
> >> vanish and never respond with my objections, perhaps there's an IETF
> >> RFC about this already....
> >>
> >> Something that may mitigate my possible objections would be some
> >> mandatory requirement about ecosystem echo-chambers making many
> >> attempts and efforts at steelman representations of alternative
> >> viewpoints. Understanding objections at a fundamental level, enough to
> >> make strong steelman statements, is very important to ensure that the
> >> competing opinions are not censored from consideration. Pathological
> >> integration and internalization of these steelman arguments can be
> >> very useful, even if the process looks unusual.
> >>
> >> Your process does not have to replace any particular BIP process
> >> as-is, but rather could be an alternative that proceeds on its own
> >> perhaps indefinitely without replacement. I don't think too many BIP
> >> processes are necessarily incompatible except by namespace collision.
> >>
> >>
> https://gist.github.com/andychase/dddb83c294295879308b#gistcomment-1566432
> >>
> >> - Bryan
> >> http://heybryan.org/
> >> 1 512 203 0507
> >
> >
> >
> > _______________________________________________
> > bitcoin-dev mailing list
> > bitcoin-dev at lists.linuxfoundation.org
> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> >
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150904/1cc7ed2b/attachment-0001.html>

From pete at petertodd.org  Fri Sep  4 20:31:44 2015
From: pete at petertodd.org (Peter Todd)
Date: Fri, 4 Sep 2015 16:31:44 -0400
Subject: [bitcoin-dev] [BIP/Draft] BIP Acceptance Process
In-Reply-To: <CAAxp-m_EmMbVBqQK9ijoe+n0dAs726TaBX5m1Wgzsv-m1KHdfQ@mail.gmail.com>
References: <64B72DF6-BE37-4624-ADAA-CE28C14A4227@gmail.com>
	<CABaSBaw7hM2qmuR6Z6USy5=V9NGeCPKmHHuVOH=vexDk7kY8OA@mail.gmail.com>
	<CAAxp-m_vo5vJEemR_hRX3hNcUPveA6EHn-ZFMJo8ke59E6BrKw@mail.gmail.com>
	<CADJgMzvanj41Dfa4kQsq5SVvt-Zeee2SOfD3Uws-FpBQsyZsqg@mail.gmail.com>
	<CAAxp-m_EmMbVBqQK9ijoe+n0dAs726TaBX5m1Wgzsv-m1KHdfQ@mail.gmail.com>
Message-ID: <20150904203144.GB463@muck>

On Fri, Sep 04, 2015 at 01:13:18PM -0700, Andy Chase via bitcoin-dev wrote:
> Thanks for your thoughts.
> 
> My proposal isn't perfect for sure. There's likely much better ways to do
> it. But to be clear what I'm trying to solve is basically this:
> 
> Who makes high-level Bitcoin decisions? Miners, client devs, merchants, or
> users? Let's set up a system where everyone has a say and clear acceptance
> can be reached.

It depends on a case-by-case basis.

E.g. for soft-forks miners can do what they want with little ability for
other parties to have a say. For non-consensus-related standards - e.g.
address formats - it's quite possible for a BIP to be "accepted" even if
only a small group of users use the standard. For hard-forks almost
everyone is involved, though who can stop a fork isn't as well defined.

IMO trying to "set up a system" in that kind of environment is silly,
and likely to be a bureaucratic waste of time. Let the market decide, as
has happened previously. If you're idea isn't getting acceptance, do a
better job of convincing the people who need to adopt it that it is a
good idea.

No amount of words on paper will change the fact that we can't force
people to run software they don't want to run. The entire formal part of
the BIP process is simply a convenience so we have clear, short, numbers
that we can refer to when discussing ideas and standards. The rest of
the process - e.g. what Adam Back and others have been referring to when
attempting to dissuade Hearn and Andresen - is by definition always
going to be a fuzzy, situation-specific, and generally undefined
process.

Or put another way, even if you did create your proposed process, the
first time those committees "approved" a BIP that relevant stakeholders
disagreed with, you'd find out pretty quickly that "clear acceptance" of
your 4% sample would fall apart the moment the other 96% realized what a
tiny minority was intending to do. Particularly if it was one of the
inhernet cases where the underlying math means a particular group - like
miners - has the ability to override what another group wants out of
Bitcoin.

-- 
'peter'[:-1]@petertodd.org
000000000000000010f9e95aff6454fedb9d0a4b92a4108e9449c507936f9f18
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 650 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150904/eee44cae/attachment.sig>

From mjbecze at gmail.com  Fri Sep  4 20:42:51 2015
From: mjbecze at gmail.com (Martin Becze)
Date: Fri, 4 Sep 2015 20:42:51 +0000
Subject: [bitcoin-dev] [BIP/Draft] BIP Acceptance Process
In-Reply-To: <20150904203144.GB463@muck>
References: <64B72DF6-BE37-4624-ADAA-CE28C14A4227@gmail.com>
	<CABaSBaw7hM2qmuR6Z6USy5=V9NGeCPKmHHuVOH=vexDk7kY8OA@mail.gmail.com>
	<CAAxp-m_vo5vJEemR_hRX3hNcUPveA6EHn-ZFMJo8ke59E6BrKw@mail.gmail.com>
	<CADJgMzvanj41Dfa4kQsq5SVvt-Zeee2SOfD3Uws-FpBQsyZsqg@mail.gmail.com>
	<CAAxp-m_EmMbVBqQK9ijoe+n0dAs726TaBX5m1Wgzsv-m1KHdfQ@mail.gmail.com>
	<20150904203144.GB463@muck>
Message-ID: <CALz06g6YGCfnR0V2+jP1pWVXGj9-=hZRz9QHX5mzoz08P1ynKw@mail.gmail.com>

>> Let the market decide
How about Futarchy?

On Fri, Sep 4, 2015 at 8:31 PM, Peter Todd via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> On Fri, Sep 04, 2015 at 01:13:18PM -0700, Andy Chase via bitcoin-dev wrote:
> > Thanks for your thoughts.
> >
> > My proposal isn't perfect for sure. There's likely much better ways to do
> > it. But to be clear what I'm trying to solve is basically this:
> >
> > Who makes high-level Bitcoin decisions? Miners, client devs, merchants,
> or
> > users? Let's set up a system where everyone has a say and clear
> acceptance
> > can be reached.
>
> It depends on a case-by-case basis.
>
> E.g. for soft-forks miners can do what they want with little ability for
> other parties to have a say. For non-consensus-related standards - e.g.
> address formats - it's quite possible for a BIP to be "accepted" even if
> only a small group of users use the standard. For hard-forks almost
> everyone is involved, though who can stop a fork isn't as well defined.
>
> IMO trying to "set up a system" in that kind of environment is silly,
> and likely to be a bureaucratic waste of time. Let the market decide, as
> has happened previously. If you're idea isn't getting acceptance, do a
> better job of convincing the people who need to adopt it that it is a
> good idea.
>
> No amount of words on paper will change the fact that we can't force
> people to run software they don't want to run. The entire formal part of
> the BIP process is simply a convenience so we have clear, short, numbers
> that we can refer to when discussing ideas and standards. The rest of
> the process - e.g. what Adam Back and others have been referring to when
> attempting to dissuade Hearn and Andresen - is by definition always
> going to be a fuzzy, situation-specific, and generally undefined
> process.
>
> Or put another way, even if you did create your proposed process, the
> first time those committees "approved" a BIP that relevant stakeholders
> disagreed with, you'd find out pretty quickly that "clear acceptance" of
> your 4% sample would fall apart the moment the other 96% realized what a
> tiny minority was intending to do. Particularly if it was one of the
> inhernet cases where the underlying math means a particular group - like
> miners - has the ability to override what another group wants out of
> Bitcoin.
>
> --
> 'peter'[:-1]@petertodd.org
> 000000000000000010f9e95aff6454fedb9d0a4b92a4108e9449c507936f9f18
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150904/7d75cc66/attachment.html>

From luke at dashjr.org  Fri Sep  4 21:01:09 2015
From: luke at dashjr.org (Luke Dashjr)
Date: Fri, 4 Sep 2015 21:01:09 +0000
Subject: [bitcoin-dev] [BIP/Draft] BIP Acceptance Process
In-Reply-To: <CAAxp-m_EmMbVBqQK9ijoe+n0dAs726TaBX5m1Wgzsv-m1KHdfQ@mail.gmail.com>
References: <64B72DF6-BE37-4624-ADAA-CE28C14A4227@gmail.com>
	<CADJgMzvanj41Dfa4kQsq5SVvt-Zeee2SOfD3Uws-FpBQsyZsqg@mail.gmail.com>
	<CAAxp-m_EmMbVBqQK9ijoe+n0dAs726TaBX5m1Wgzsv-m1KHdfQ@mail.gmail.com>
Message-ID: <201509042101.11839.luke@dashjr.org>

On Friday, September 04, 2015 8:13:18 PM Andy Chase via bitcoin-dev wrote:
> Who makes high-level Bitcoin decisions? Miners, client devs, merchants, or
> users? Let's set up a system where everyone has a say and clear acceptance
> can be reached.

For hardforks (removing consensus rules), economic consensus: people who 
accept payment in bitcoins weighted by their actual volume of such payments. 
A supermajority subset may arguably be sufficient for some hardforks (which 
don't violate Bitcoin's social contract) since they can effectively compel 
the remaining economy to comply.

For softforks (adding consensus rules), a majority of miners: they can "51% 
attack" miners who don't go along with it.

Anything else does not necessarily need universal agreement, so are 
completely up to the whim of individual software projects. If someone doesn't 
like a decision in Core (for example), they can safely fork the code. If any 
significant amount of people use their fork, then the BIP is accepted whether 
or not Core later adopts it.

Note this "system" is really describing a lack of a system - that is, what 
naturally must happen for changes to occur. Softforks have a relatively 
mature technical method for measuring support and deploying (which I believe 
someone else is already working on a BIP describing), but the same thing is 
impractical for hardforks. Some formal way to measure actual economic 
acceptance seems like a good idea to study, but it needs to be reasonably 
accurate so as to not change the outcome from its natural/necessary result.

Luke

From milly at bitcoins.info  Fri Sep  4 21:05:02 2015
From: milly at bitcoins.info (Milly Bitcoin)
Date: Fri, 4 Sep 2015 17:05:02 -0400
Subject: [bitcoin-dev] [BIP/Draft] BIP Acceptance Process
In-Reply-To: <20150904203144.GB463@muck>
References: <64B72DF6-BE37-4624-ADAA-CE28C14A4227@gmail.com>
	<CABaSBaw7hM2qmuR6Z6USy5=V9NGeCPKmHHuVOH=vexDk7kY8OA@mail.gmail.com>
	<CAAxp-m_vo5vJEemR_hRX3hNcUPveA6EHn-ZFMJo8ke59E6BrKw@mail.gmail.com>
	<CADJgMzvanj41Dfa4kQsq5SVvt-Zeee2SOfD3Uws-FpBQsyZsqg@mail.gmail.com>
	<CAAxp-m_EmMbVBqQK9ijoe+n0dAs726TaBX5m1Wgzsv-m1KHdfQ@mail.gmail.com>
	<20150904203144.GB463@muck>
Message-ID: <55EA077E.5090102@bitcoins.info>

> IMO trying to "set up a system" in that kind of environment is silly,

The first step is to define the system that is currently in place. 
There is a system in place but it is just close to the vest and 
sometimes not discussed in public.  This works when Bitcoin has a small 
number of stakeholder but does not work well as other parties with 
diverse interests get involved.  You can't expect major players to 
invest large sums when the process is controlled by a tiny group of 
people where some of those people have rather unusual opinions about 
things and limited experience outside of technical areas within Bitcoin.

You just don't have enough experience in working on large projects to 
understand the benefits of the proposal discussed.  I suggest you look 
into into and get some experience instead of posting rants that 
highlight your inexperience.  What is silly is using a process that 
involves hyperbolic twitter and reddit posts.

Basically such a process does not replace the analysis that is done now, 
it just makes it transparent and attempts to make it consistent so there 
is not all this confusion over comparing apples and oranges.  Here is 
link that discusses some of the benefits and limitations of doing this: 
  http://www.jakeman.com.au/media/whats-right-with-risk-matrices.

Russ



From theandychase at gmail.com  Fri Sep  4 21:36:42 2015
From: theandychase at gmail.com (Andy Chase)
Date: Fri, 4 Sep 2015 14:36:42 -0700
Subject: [bitcoin-dev] [BIP/Draft] BIP Acceptance Process
In-Reply-To: <201509042101.11839.luke@dashjr.org>
References: <64B72DF6-BE37-4624-ADAA-CE28C14A4227@gmail.com>
	<CADJgMzvanj41Dfa4kQsq5SVvt-Zeee2SOfD3Uws-FpBQsyZsqg@mail.gmail.com>
	<CAAxp-m_EmMbVBqQK9ijoe+n0dAs726TaBX5m1Wgzsv-m1KHdfQ@mail.gmail.com>
	<201509042101.11839.luke@dashjr.org>
Message-ID: <CAAxp-m8pgvHqUcmjCt6W5uscgb9ErtiTHdR0-nKU6OVdCE7rXA@mail.gmail.com>

I understand your concerns. What kinds of changes do you think should go
through a process like this? Just hard forks?

I was thinking that an advantage of making all BIPs use this process is
that it makes it familiar and well used. Kinda like a muscle grows stronger
with use. If only hard forks go through the process then there's the risk
that the process has to be spun up whenever they happen which might cause
confusion.

Another reason I was thinking is that even small, local changes, it doesn't
hurt to have a few more people take a look at it and approve it.

The bureaucracy only applies to BIPs, not PRs. There's only been 18
approved/final/accepted BIPs in 4 years since BIP-0001. That's only about
~5 per year. I get that bureaucracy is often a waste of time, but I just
don't think every second counts for these things.

On Fri, Sep 4, 2015 at 2:01 PM, Luke Dashjr <luke at dashjr.org> wrote:

> On Friday, September 04, 2015 8:13:18 PM Andy Chase via bitcoin-dev wrote:
> > Who makes high-level Bitcoin decisions? Miners, client devs, merchants,
> or
> > users? Let's set up a system where everyone has a say and clear
> acceptance
> > can be reached.
>
> For hardforks (removing consensus rules), economic consensus: people who
> accept payment in bitcoins weighted by their actual volume of such
> payments.
> A supermajority subset may arguably be sufficient for some hardforks (which
> don't violate Bitcoin's social contract) since they can effectively compel
> the remaining economy to comply.
>
> For softforks (adding consensus rules), a majority of miners: they can "51%
> attack" miners who don't go along with it.
>
> Anything else does not necessarily need universal agreement, so are
> completely up to the whim of individual software projects. If someone
> doesn't
> like a decision in Core (for example), they can safely fork the code. If
> any
> significant amount of people use their fork, then the BIP is accepted
> whether
> or not Core later adopts it.
>
> Note this "system" is really describing a lack of a system - that is, what
> naturally must happen for changes to occur. Softforks have a relatively
> mature technical method for measuring support and deploying (which I
> believe
> someone else is already working on a BIP describing), but the same thing is
> impractical for hardforks. Some formal way to measure actual economic
> acceptance seems like a good idea to study, but it needs to be reasonably
> accurate so as to not change the outcome from its natural/necessary result.
>
> Luke
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150904/31c3d750/attachment-0001.html>

From luke at dashjr.org  Fri Sep  4 21:45:32 2015
From: luke at dashjr.org (Luke Dashjr)
Date: Fri, 4 Sep 2015 21:45:32 +0000
Subject: [bitcoin-dev] [BIP/Draft] BIP Acceptance Process
In-Reply-To: <CAAxp-m8pgvHqUcmjCt6W5uscgb9ErtiTHdR0-nKU6OVdCE7rXA@mail.gmail.com>
References: <64B72DF6-BE37-4624-ADAA-CE28C14A4227@gmail.com>
	<201509042101.11839.luke@dashjr.org>
	<CAAxp-m8pgvHqUcmjCt6W5uscgb9ErtiTHdR0-nKU6OVdCE7rXA@mail.gmail.com>
Message-ID: <201509042145.34410.luke@dashjr.org>

On Friday, September 04, 2015 9:36:42 PM Andy Chase wrote:
> I understand your concerns. What kinds of changes do you think should go
> through a process like this? Just hard forks?

The process loses meaning if it doesn't reflect reality. So only hardforks 
should go through the hardfork process; only softforks through the softfork 
process; etc. Trying to make one-size-fits-all just means de facto accepted 
BIPs wouldn't be recognised as such because nobody cares to meet the higher 
requirements.

Luke

From jtimon at jtimon.cc  Sat Sep  5 11:17:52 2015
From: jtimon at jtimon.cc (=?UTF-8?B?Sm9yZ2UgVGltw7Nu?=)
Date: Sat, 5 Sep 2015 13:17:52 +0200
Subject: [bitcoin-dev] RFC: HD Bitmessage address derivation based on
	BIP-43
In-Reply-To: <55E9D980.5020901@openbitcoinprivacyproject.org>
References: <CAHabJ+N3Tr5FtStH6Msmj3d8EsvjeTEV6FhSEiizLVs=5ZvCfw@mail.gmail.com>
	<201509040006.06430.luke@dashjr.org>
	<55E9D980.5020901@openbitcoinprivacyproject.org>
Message-ID: <CABm2gDo7w9mSEDZ2Qf4i79HpgOQQjr2+Cyif4xbt=TKyDkvPdg@mail.gmail.com>

On Sep 4, 2015 7:56 PM, "Justus Ranvier via bitcoin-dev" <
bitcoin-dev at lists.linuxfoundation.org> wrote:
>
> On 09/03/2015 07:06 PM, Luke Dashjr via bitcoin-dev wrote:
> > Since BIP 43 is still a draft, I propose modifying it to refer non-
> > Bitcoin purpose codes to the SLIP repository:
> >     https://doc.satoshilabs.com/slips/
>
> What benefit is created by delegating the BIP-43 namespace management to
> that company in particular?
>
> BIP-43 as it is currently composed provides the convenient feature of
> purpose codes matching the BIP number. Moving purpose codes to a
> separate namespace add complexity to its usage for no discernible benefit.
The "namespace" defined in BIP43 is acceptable. BIP44's is not:

https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki#Registered_coin_types

It defines a centralized registry controlld by a single company instead of
having a way for different companies (or p2p chains like namecoin?) to
maintain competing registries.

Even better, it could use a code deterministically generated from the chain
ID (the hash of the genesis block), completely removing the need for a
registry in the first place.

> --
> Justus Ranvier
> Open Bitcoin Privacy Project
> http://www.openbitcoinprivacyproject.org/
> justus at openbitcoinprivacyproject.org
> E7AD 8215 8497 3673 6D9E 61C4 2A5F DA70 EAD9 E623
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150905/7a1c309d/attachment.html>

From ken.shirriff at gmail.com  Sat Sep  5 14:11:27 2015
From: ken.shirriff at gmail.com (Ken Shirriff)
Date: Sat, 5 Sep 2015 07:11:27 -0700
Subject: [bitcoin-dev] Proposal to add the bitcoin symbol to Unicode
Message-ID: <CALBHtZzHeDy-6Ar+DWUb8hFG4kJcg9+x4Y=TUEiQr3-rbgannw@mail.gmail.com>

Use of the bitcoin symbol in text is inconvenient, because the bitcoin
symbol isn't in the Unicode standard. To fix this, I've written a proposal
to have the common B-with-vertical-bars bitcoin symbol added to Unicode.
I've successfully proposed a new character for Unicode before, so I'm
familiar with the process and think this has a good chance of succeeding.
The proposal is at http://righto.com/bitcoin-unicode.pdf

I received a suggestion to run this proposal by the bitcoin-dev group, so I
hope this email is appropriate here. Endorsement by Bitcoin developers will
help the Unicode Committee realize the importance of adding this symbol, so
please let me know if you support this proposal.

Thanks,
Ken
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150905/cb453472/attachment.html>

From bitdev at theochino.com  Sat Sep  5 14:26:19 2015
From: bitdev at theochino.com (Theo Chino)
Date: Sat, 5 Sep 2015 16:26:19 +0200
Subject: [bitcoin-dev] Proposal to add the bitcoin symbol to Unicode
In-Reply-To: <CALBHtZzHeDy-6Ar+DWUb8hFG4kJcg9+x4Y=TUEiQr3-rbgannw@mail.gmail.com>
References: <CALBHtZzHeDy-6Ar+DWUb8hFG4kJcg9+x4Y=TUEiQr3-rbgannw@mail.gmail.com>
Message-ID: <CAFh0iXOKv8E2W9M-+LZea=9io+eoCQAPFSHs7RFjm_Cdn0qjBQ@mail.gmail.com>

Ken,

What do I do to second and join you ?

Theo Chino
New York

On Sat, Sep 5, 2015 at 4:11 PM, Ken Shirriff via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> Use of the bitcoin symbol in text is inconvenient, because the bitcoin
> symbol isn't in the Unicode standard. To fix this, I've written a proposal
> to have the common B-with-vertical-bars bitcoin symbol added to Unicode.
> I've successfully proposed a new character for Unicode before, so I'm
> familiar with the process and think this has a good chance of succeeding.
> The proposal is at http://righto.com/bitcoin-unicode.pdf
>
> I received a suggestion to run this proposal by the bitcoin-dev group, so
> I hope this email is appropriate here. Endorsement by Bitcoin developers
> will help the Unicode Committee realize the importance of adding this
> symbol, so please let me know if you support this proposal.
>
> Thanks,
> Ken
>
>
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150905/55a53a0f/attachment.html>

From me at ricmoo.com  Sat Sep  5 14:58:18 2015
From: me at ricmoo.com (Richard Moore)
Date: Sat, 5 Sep 2015 10:58:18 -0400
Subject: [bitcoin-dev] Proposal to add the bitcoin symbol to Unicode
In-Reply-To: <CALBHtZzHeDy-6Ar+DWUb8hFG4kJcg9+x4Y=TUEiQr3-rbgannw@mail.gmail.com>
References: <CALBHtZzHeDy-6Ar+DWUb8hFG4kJcg9+x4Y=TUEiQr3-rbgannw@mail.gmail.com>
Message-ID: <6027DB2B-8240-4C12-9FA5-FEB37556BD22@ricmoo.com>

This might also be a useful page to look at:

https://en.bitcoin.it/wiki/Bitcoin_symbol

RicMoo

Sent from my self-aware iPhone

.???`?.??.???`?.??.???`?.??.???`?.??.???`?.?><(((?>

Richard Moore ~ Founder
Genetic Mistakes Software Inc.
phone: (778) 882-6125
email: ricmoo at geneticmistakes.com
www: http://GeneticMistakes.com

> On Sep 5, 2015, at 10:11 AM, Ken Shirriff via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:
> 
> Use of the bitcoin symbol in text is inconvenient, because the bitcoin symbol isn't in the Unicode standard. To fix this, I've written a proposal to have the common B-with-vertical-bars bitcoin symbol added to Unicode. I've successfully proposed a new character for Unicode before, so I'm familiar with the process and think this has a good chance of succeeding. The proposal is at http://righto.com/bitcoin-unicode.pdf
> 
> I received a suggestion to run this proposal by the bitcoin-dev group, so I hope this email is appropriate here. Endorsement by Bitcoin developers will help the Unicode Committee realize the importance of adding this symbol, so please let me know if you support this proposal. 
> 
> Thanks,
> Ken
> 
> 
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150905/ad8ba582/attachment.html>

From christophe.biocca at gmail.com  Sat Sep  5 16:48:41 2015
From: christophe.biocca at gmail.com (Christophe Biocca)
Date: Sat, 5 Sep 2015 12:48:41 -0400
Subject: [bitcoin-dev] RFC: HD Bitmessage address derivation based on
	BIP-43
In-Reply-To: <CABm2gDo7w9mSEDZ2Qf4i79HpgOQQjr2+Cyif4xbt=TKyDkvPdg@mail.gmail.com>
References: <CAHabJ+N3Tr5FtStH6Msmj3d8EsvjeTEV6FhSEiizLVs=5ZvCfw@mail.gmail.com>
	<201509040006.06430.luke@dashjr.org>
	<55E9D980.5020901@openbitcoinprivacyproject.org>
	<CABm2gDo7w9mSEDZ2Qf4i79HpgOQQjr2+Cyif4xbt=TKyDkvPdg@mail.gmail.com>
Message-ID: <CANOOu=9Wn3kVC8eVQWLhMZpDKyVQ5Aus1=b-TsY=Ce9oud0xHg@mail.gmail.com>

I will point out that the current situation is not an accident:
https://github.com/bitcoin/bips/pulls?utf8=%E2%9C%93&q=44 is a great
place to get some context for what happened. I believe you can also
find the other half of this discussion on the mailing list archives.

The cointypes being simple integers was how the code worked as shipped
(in the trezor), so changing the semantics after the fact wasn't a
possibility.

The BIP repository didn't want to constantly deal with updates
unrelated to Bitcoin proper, so a decision was made to move that part
of the standard to a repository willing to handle it.

On 5 September 2015 at 07:17, Jorge Tim?n
<bitcoin-dev at lists.linuxfoundation.org> wrote:
>
> On Sep 4, 2015 7:56 PM, "Justus Ranvier via bitcoin-dev"
> <bitcoin-dev at lists.linuxfoundation.org> wrote:
>>
>> On 09/03/2015 07:06 PM, Luke Dashjr via bitcoin-dev wrote:
>> > Since BIP 43 is still a draft, I propose modifying it to refer non-
>> > Bitcoin purpose codes to the SLIP repository:
>> >     https://doc.satoshilabs.com/slips/
>>
>> What benefit is created by delegating the BIP-43 namespace management to
>> that company in particular?
>>
>> BIP-43 as it is currently composed provides the convenient feature of
>> purpose codes matching the BIP number. Moving purpose codes to a
>> separate namespace add complexity to its usage for no discernible benefit.
> The "namespace" defined in BIP43 is acceptable. BIP44's is not:
>
> https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki#Registered_coin_types
>
> It defines a centralized registry controlld by a single company instead of
> having a way for different companies (or p2p chains like namecoin?) to
> maintain competing registries.
>
> Even better, it could use a code deterministically generated from the chain
> ID (the hash of the genesis block), completely removing the need for a
> registry in the first place.
>
>> --
>> Justus Ranvier
>> Open Bitcoin Privacy Project
>> http://www.openbitcoinprivacyproject.org/
>> justus at openbitcoinprivacyproject.org
>> E7AD 8215 8497 3673 6D9E 61C4 2A5F DA70 EAD9 E623
>>
>> _______________________________________________
>> bitcoin-dev mailing list
>> bitcoin-dev at lists.linuxfoundation.org
>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>
>
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>

From linuxperia at gmx.ch  Sat Sep  5 17:54:55 2015
From: linuxperia at gmx.ch (LinuXperia)
Date: Sat, 5 Sep 2015 19:54:55 +0200
Subject: [bitcoin-dev] Problem compiling bitcoin-core
Message-ID: <55EB2C6F.2030100@gmx.ch>

Hi.

I am trying to compile bitcoin core on my ubuntu Linux machine as follow:

./autogen.sh

./configure 
CPPFLAGS="-I/media/linuxperia/mydata/Projects/bitcoi/depends/x86_64-unknown-linux-gnu/include/ 
-O2" 
LDFLAGS="-L/media/linuxperia/mydata/Projects/bitcoin/depends/x86_64-unknown-linux-gnu/lib/" 
--without-gui

make

but i am getting always this Build Error message here!
What i am doing wrong ?
How can i fix this build problem so i am able to run the Bitcoin-core 
Node on my Machine ?

Thanks in advance for your helpful solution tips!

    CXXLD    bitcoind
libbitcoin_server.a(libbitcoin_server_a-init.o): In function 
`boost::filesystem::path::path<boost::filesystem::directory_entry>(boost::filesystem::directory_entry 
const&, 
boost::enable_if<boost::filesystem::path_traits::is_pathable<boost::decay<boost::filesystem::directory_entry>::type>, 
void>::type*)':
/media/linuxperia/mydata/Projects/bitcoin/depends/x86_64-unknown-linux-gnu/include/boost/filesystem/path.hpp:140: 
undefined reference to 
`boost::filesystem::path_traits::dispatch(boost::filesystem::directory_entry 
const&, std::__cxx11::basic_string<char, std::char_traits<char>, 
std::allocator<char> >&)'
libbitcoin_util.a(libbitcoin_util_a-util.o): In function `GetNumCores()':
/media/linuxperia/mydata/Projects/bitcoin/src/util.cpp:825: undefined 
reference to `boost::thread::physical_concurrency()'
libbitcoin_util.a(libbitcoin_util_a-util.o): In function 
`boost::program_options::detail::basic_config_file_iterator<char>::getline(std::__cxx11::basic_string<char, 
std::char_traits<char>, std::allocator<char> >&)':
/media/linuxperia/mydata/Projects/bitcoin/depends/x86_64-unknown-linux-gnu/include/boost/program_options/detail/config_file.hpp:161: 
undefined reference to 
`boost::program_options::to_internal(std::__cxx11::basic_string<char, 
std::char_traits<char>, std::allocator<char> > const&)'
libbitcoin_util.a(libbitcoin_util_a-util.o): In function 
`boost::program_options::detail::basic_config_file_iterator<char>::basic_config_file_iterator(std::istream&, 
std::set<std::__cxx11::basic_string<char, std::char_traits<char>, 
std::allocator<char> >, std::less<std::__cxx11::basic_string<char, 
std::char_traits<char>, std::allocator<char> > >, 
std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, 
std::allocator<char> > > > const&, bool)':
/media/linuxperia/mydata/Projects/bitcoin/depends/x86_64-unknown-linux-gnu/include/boost/program_options/detail/config_file.hpp:145: 
undefined reference to 
`boost::program_options::detail::common_config_file_iterator::common_config_file_iterator(std::set<std::__cxx11::basic_string<char, 
std::char_traits<char>, std::allocator<char> >, 
std::less<std::__cxx11::basic_string<char, std::char_traits<char>, 
std::allocator<char> > >, 
std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, 
std::allocator<char> > > > const&, bool)'
libbitcoin_wallet.a(libbitcoin_wallet_a-walletdb.o): In function 
`boost::filesystem::copy_file(boost::filesystem::path const&, 
boost::filesystem::path const&, boost::filesystem::copy_option::enum_type)':
/media/linuxperia/mydata/Projects/bitcoin/depends/x86_64-unknown-linux-gnu/include/boost/filesystem/operations.hpp:497: 
undefined reference to 
`boost::filesystem::detail::copy_file(boost::filesystem::path const&, 
boost::filesystem::path const&, boost::filesystem::detail::copy_option, 
boost::system::error_code*)'
collect2: error: ld returned 1 exit status
Makefile:2620: recipe for target 'bitcoind' failed
make[2]: *** [bitcoind] Error 1
make[2]: Leaving directory '/media/linuxperia/mydata/Projects/bitcoin/src'
Makefile:6559: recipe for target 'all-recursive' failed
make[1]: *** [all-recursive] Error 1
make[1]: Leaving directory '/media/linuxperia/mydata/Projects/bitcoin/src'
Makefile:626: recipe for target 'all-recursive' failed
make: *** [all-recursive] Error 1


From andreas at schildbach.de  Sat Sep  5 18:48:57 2015
From: andreas at schildbach.de (Andreas Schildbach)
Date: Sat, 5 Sep 2015 20:48:57 +0200
Subject: [bitcoin-dev] Proposal to add the bitcoin symbol to Unicode
In-Reply-To: <CALBHtZzHeDy-6Ar+DWUb8hFG4kJcg9+x4Y=TUEiQr3-rbgannw@mail.gmail.com>
References: <CALBHtZzHeDy-6Ar+DWUb8hFG4kJcg9+x4Y=TUEiQr3-rbgannw@mail.gmail.com>
Message-ID: <msfdep$91h$1@ger.gmane.org>

Very cool! Thanks for tackling this.


On 09/05/2015 04:11 PM, Ken Shirriff via bitcoin-dev wrote:
> Use of the bitcoin symbol in text is inconvenient, because the bitcoin
> symbol isn't in the Unicode standard. To fix this, I've written a
> proposal to have the common B-with-vertical-bars bitcoin symbol added to
> Unicode. I've successfully proposed a new character for Unicode before,
> so I'm familiar with the process and think this has a good chance of
> succeeding. The proposal is at http://righto.com/bitcoin-unicode.pdf
> 
> I received a suggestion to run this proposal by the bitcoin-dev group,
> so I hope this email is appropriate here. Endorsement by Bitcoin
> developers will help the Unicode Committee realize the importance of
> adding this symbol, so please let me know if you support this proposal. 
> 
> Thanks,
> Ken
> 
> 
> 
> 
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> 



From theandychase at gmail.com  Sat Sep  5 21:19:51 2015
From: theandychase at gmail.com (Andy Chase)
Date: Sat, 5 Sep 2015 14:19:51 -0700
Subject: [bitcoin-dev] [BIP/Draft] BIP Acceptance Process
In-Reply-To: <201509042145.34410.luke@dashjr.org>
References: <64B72DF6-BE37-4624-ADAA-CE28C14A4227@gmail.com>
	<201509042101.11839.luke@dashjr.org>
	<CAAxp-m8pgvHqUcmjCt6W5uscgb9ErtiTHdR0-nKU6OVdCE7rXA@mail.gmail.com>
	<201509042145.34410.luke@dashjr.org>
Message-ID: <CAAxp-m8JW-WOCem6a4RmBk7HOV3cCc02r5r=BkEDyUBu84u4=A@mail.gmail.com>

Okay for sure yeah writing another proposal that reflects the current state
of affairs as people see it might provide some interesting perspective on
this proposal. I would welcome that.

Greg: With no other direct comments appearing to be inbound I'd like to
move forward with this one and get a number assigned to it. Thanks!

Thanks to all for the discussion!

On Fri, Sep 4, 2015 at 2:45 PM, Luke Dashjr <luke at dashjr.org> wrote:

> On Friday, September 04, 2015 9:36:42 PM Andy Chase wrote:
> > I understand your concerns. What kinds of changes do you think should go
> > through a process like this? Just hard forks?
>
> The process loses meaning if it doesn't reflect reality. So only hardforks
> should go through the hardfork process; only softforks through the softfork
> process; etc. Trying to make one-size-fits-all just means de facto accepted
> BIPs wouldn't be recognised as such because nobody cares to meet the higher
> requirements.
>
> Luke
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150905/9e4999b0/attachment.html>

From jtimon at jtimon.cc  Sun Sep  6 02:09:52 2015
From: jtimon at jtimon.cc (=?UTF-8?B?Sm9yZ2UgVGltw7Nu?=)
Date: Sun, 6 Sep 2015 04:09:52 +0200
Subject: [bitcoin-dev] RFC: HD Bitmessage address derivation based on
	BIP-43
In-Reply-To: <CANOOu=9Wn3kVC8eVQWLhMZpDKyVQ5Aus1=b-TsY=Ce9oud0xHg@mail.gmail.com>
References: <CAHabJ+N3Tr5FtStH6Msmj3d8EsvjeTEV6FhSEiizLVs=5ZvCfw@mail.gmail.com>
	<201509040006.06430.luke@dashjr.org>
	<55E9D980.5020901@openbitcoinprivacyproject.org>
	<CABm2gDo7w9mSEDZ2Qf4i79HpgOQQjr2+Cyif4xbt=TKyDkvPdg@mail.gmail.com>
	<CANOOu=9Wn3kVC8eVQWLhMZpDKyVQ5Aus1=b-TsY=Ce9oud0xHg@mail.gmail.com>
Message-ID: <CABm2gDorG0_e_1wZ6CNafA6LqDF89-M_FNt35Uik-pBCssoL4Q@mail.gmail.com>

On Sat, Sep 5, 2015 at 6:48 PM, Christophe Biocca
<christophe.biocca at gmail.com> wrote:
> I will point out that the current situation is not an accident:
> https://github.com/bitcoin/bips/pulls?utf8=%E2%9C%93&q=44 is a great
> place to get some context for what happened. I believe you can also
> find the other half of this discussion on the mailing list archives.
>
> The cointypes being simple integers was how the code worked as shipped
> (in the trezor), so changing the semantics after the fact wasn't a
> possibility.
>
> The BIP repository didn't want to constantly deal with updates
> unrelated to Bitcoin proper, so a decision was made to move that part
> of the standard to a repository willing to handle it.

This is in fact useful. The centralized registries themselves are fine
provided that we don't rely on having only one of them or in them
having the same values for the same chains.
Trezor can maintain its own too.
Future versions of Trezor could support full chain IDs instead of
these integers (or keep using these integers forever, whatever they
chose to do).

On Sat, Sep 5, 2015 at 7:03 PM, Luke Dashjr <luke at dashjr.org> wrote:
> On Saturday, September 05, 2015 11:17:52 AM Jorge Tim?n via bitcoin-dev wrote:
>> The "namespace" defined in BIP43 is acceptable. BIP44's is not:
>>
>> https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki#Registered_c
>> oin_types
>>
>> It defines a centralized registry controlld by a single company instead of
>> having a way for different companies (or p2p chains like namecoin?) to
>> maintain competing registries.
>>
>> Even better, it could use a code deterministically generated from the chain
>> ID (the hash of the genesis block), completely removing the need for a
>> registry in the first place.
>
> No, because different chains may very well use the same genesis block.

Can you read my reasoning here?
http://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-September/010861.html
What I propose is retro-compatible, even for carelessly designed
chains (that allowed pre-mining) like FTC.
And provides securely unique IDs that don't require a centralized registry.

Maybe I should start a Chain IDs BIP...

From theandychase at gmail.com  Sun Sep  6 20:44:56 2015
From: theandychase at gmail.com (Andy Chase)
Date: Sun, 6 Sep 2015 13:44:56 -0700
Subject: [bitcoin-dev] [BIP/Draft] BIP Acceptance Process
In-Reply-To: <CAHv+tb5ksyZKp5jLvmzFbD2vBOUrWn6ps80ODECVRqYj8m=PZA@mail.gmail.com>
References: <64B72DF6-BE37-4624-ADAA-CE28C14A4227@gmail.com>
	<201509042101.11839.luke@dashjr.org>
	<CAAxp-m8pgvHqUcmjCt6W5uscgb9ErtiTHdR0-nKU6OVdCE7rXA@mail.gmail.com>
	<201509042145.34410.luke@dashjr.org>
	<CAAxp-m8JW-WOCem6a4RmBk7HOV3cCc02r5r=BkEDyUBu84u4=A@mail.gmail.com>
	<CAHv+tb5ksyZKp5jLvmzFbD2vBOUrWn6ps80ODECVRqYj8m=PZA@mail.gmail.com>
Message-ID: <CAAxp-m-TYga4RuhZ+Nv2rgrBAcpYPntSXtrwj95Q=p+uF=324w@mail.gmail.com>

Dang you are right Thomas! I'm just pretty excited about this proposal and
sparking a discussion on this issue.

Here's some updates and thoughts:

   - Luke said: "BIPs wouldn't be recognised as such because nobody cares
   to meet the higher requirements"
      - Possibly true, but maybe not! I think people like having a say
      especially people with a lot of money on the line or those who are really
      passionate about Bitcoin
      - One counter example, I emailed all the sponsors of the workshop
      conference about their stance in regards to scalability going into the
      workshop and I got a 47% response rate (with 21% responding with
a concrete
      answer). See here:
      https://www.reddit.com/r/bitcoinxt/comments/3isqmf/which_of_the_scaling_bitcoin_conference_sponsors/cujg3vc
      - One example that agrees with you, I talked to the #bitcoin-assets
      community and they seemed very against participating in future
BIPs or even
      allowing discussion with people outside their community:
      http://pastebin.com/H5WeNwu3
   - I'm seeking a historian or political science expert to assist me in
   this area. If you guys know any I'd be glad to talk to them about working
   with them.
   - Many people are complaining about the stake part, and are worried
   about the ambiguity. I firmly believe that proof of stake is a poor voting
   mechanism because it gives the most power to those that have a lot of
   money.
      - I think proof of stake might work for merchants to prove they have
      a decent economic stake if they sign with a well-known cold
wallet address,
      but I agree with someone that said merchants may be hesitant about doing
      that.


On Sun, Sep 6, 2015 at 6:36 AM, Thomas Kerin <thomas.kerin at gmail.com> wrote:

> Normally allocation comes after about 2 weeks or so, not 2 days!
> On 5 Sep 2015 10:20 pm, "Andy Chase via bitcoin-dev" <
> bitcoin-dev at lists.linuxfoundation.org> wrote:
>
>> Okay for sure yeah writing another proposal that reflects the current
>> state of affairs as people see it might provide some interesting
>> perspective on this proposal. I would welcome that.
>>
>> Greg: With no other direct comments appearing to be inbound I'd like to
>> move forward with this one and get a number assigned to it. Thanks!
>>
>> Thanks to all for the discussion!
>>
>> On Fri, Sep 4, 2015 at 2:45 PM, Luke Dashjr <luke at dashjr.org> wrote:
>>
>>> On Friday, September 04, 2015 9:36:42 PM Andy Chase wrote:
>>> > I understand your concerns. What kinds of changes do you think should
>>> go
>>> > through a process like this? Just hard forks?
>>>
>>> The process loses meaning if it doesn't reflect reality. So only
>>> hardforks
>>> should go through the hardfork process; only softforks through the
>>> softfork
>>> process; etc. Trying to make one-size-fits-all just means de facto
>>> accepted
>>> BIPs wouldn't be recognised as such because nobody cares to meet the
>>> higher
>>> requirements.
>>>
>>> Luke
>>>
>>
>>
>> _______________________________________________
>> bitcoin-dev mailing list
>> bitcoin-dev at lists.linuxfoundation.org
>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>
>>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150906/574ed608/attachment.html>

From pete at petertodd.org  Sun Sep  6 23:26:54 2015
From: pete at petertodd.org (Peter Todd)
Date: Sun, 6 Sep 2015 19:26:54 -0400
Subject: [bitcoin-dev] Proposal to add the bitcoin symbol to Unicode
In-Reply-To: <CALBHtZzHeDy-6Ar+DWUb8hFG4kJcg9+x4Y=TUEiQr3-rbgannw@mail.gmail.com>
References: <CALBHtZzHeDy-6Ar+DWUb8hFG4kJcg9+x4Y=TUEiQr3-rbgannw@mail.gmail.com>
Message-ID: <20150906232654.GF10728@muck>

On Sat, Sep 05, 2015 at 07:11:27AM -0700, Ken Shirriff via bitcoin-dev wrote:
> Use of the bitcoin symbol in text is inconvenient, because the bitcoin
> symbol isn't in the Unicode standard. To fix this, I've written a proposal
> to have the common B-with-vertical-bars bitcoin symbol added to Unicode.
> I've successfully proposed a new character for Unicode before, so I'm
> familiar with the process and think this has a good chance of succeeding.
> The proposal is at http://righto.com/bitcoin-unicode.pdf
> 
> I received a suggestion to run this proposal by the bitcoin-dev group, so I
> hope this email is appropriate here. Endorsement by Bitcoin developers will
> help the Unicode Committee realize the importance of adding this symbol, so
> please let me know if you support this proposal.

ACK

-- 
'peter'[:-1]@petertodd.org
000000000000000010f9e95aff6454fedb9d0a4b92a4108e9449c507936f9f18
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 650 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150906/03c9a08f/attachment.sig>

From pete at petertodd.org  Mon Sep  7 00:43:24 2015
From: pete at petertodd.org (Peter Todd)
Date: Sun, 6 Sep 2015 20:43:24 -0400
Subject: [bitcoin-dev] python-bitcoinlib-v0.5.0rc1 - OpenSSL crashes on OSX
 and Arch Linux should be fixed
Message-ID: <20150907004324.GC21260@muck>

https://github.com/petertodd/python-bitcoinlib/tree/python-bitcoinlib-v0.5.0rc1

FWIW if you've been experienceing OpenSSL related crashes on OSX or Arch
Linux this release should fix your issues. I don't have any way of
testing this myself, so if I could get some confirmation that this new
release candidate fixes things that'd be really helpful!


Other release notes:

v0.5.0
======

Major fix: Fixed OpenSSL related crashes on OSX and Arch Linux. Big thanks to
everyone who helped fix this!

Breaking API changes:

* Proxy no longer has ``__getattr__`` to support arbitrary methods. Use
  RawProxy or Proxy.call instead. This allows new wrappers to be added safely.
  See docstrings for details.

New features:

* New RPC calls: getbestblockhash, getblockcount, getmininginfo
* Signing and verification of Bitcoin Core compatible messages. (w/ pubkey recovery)
* Tox tests
* Sphinx docs

Notable bugfixes:

* getinfo() now works where disablewallet=1

-- 
'peter'[:-1]@petertodd.org
000000000000000010f9e95aff6454fedb9d0a4b92a4108e9449c507936f9f18
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 650 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150906/bb595f91/attachment.sig>

From theandychase at gmail.com  Mon Sep  7 02:17:32 2015
From: theandychase at gmail.com (Andy Chase)
Date: Sun, 6 Sep 2015 19:17:32 -0700
Subject: [bitcoin-dev] [BIP/Draft] BIP Realistic Acceptance Process
Message-ID: <05FB4991-E8E8-4F04-9D40-9D359B5EF00E@gmail.com>

Mediawiki formatted documented: https://gist.github.com/andychase/dadbfbb145de934d8e1c

??

    Title: BIP Realistic Acceptance Process
    Author: Andy Chase 
    Status: Draft 
    Type: Process 
    Created: 2015-09-06

Abstract
========

The current process for accepting a BIP is not clearly defined. While
BIP-0001 defines the process for writing and submitting a Bitcoin
improvement proposal to the community it does not specify the precise
method for which BIPs are considered accepted or rejected.

This proposal documents the current method for which BIPs are accepted
or rejected.

Due to the large number of BIPs and the different processes that were
followed, this BIP is specifically based around the acceptance process
of BIP-0064. This was picked because it picks up a lot of the edge cases
that BIPs often have.

Motivation
==========

The primary motivation of this document is to allow for a discussion on
a realistic and acceptable BIP acceptance procedure. There has been a
quite few calls for documenting and using the current "realistic" method
for BIP acceptance:

Luke Jr.

> Any such a BIP like this needs to document the natural forces involved
> in real-world acceptance \[...\] it needs to be reasonably accurate so
> as to not change the outcome from its natural/necessary result.

Btc Drak

> I'm rather perplexed about \[another acceptance\] proposal. What
> exactly is wrong with the existing BIPs process?

Peter Todd

> IMO trying to "set up a system" in that kind of environment is silly,
> and likely to be a bureaucratic waste of time.

Adam Back

> The development process is to improve Bitcoin, not to randomly
> redefine it on a whim of one guy's opinion, nor the devs opinion.

Copyright
=========

This document is placed into the public domain.

Process
=======

This game works best with at least 3 people and a basic familiarity with
the BIP process.

-   Story: You are a confident software superstar who has worked at
    Hooli and has taken up a passion for Bitcoin. You've realized that
    you need a specific protocol in Bitcoin core for an application you
    are working on. You've been funded a lot of money for this project
    so you don't really have any option but to try to put it into the
    core protocol.
-   Rules:
    -   Each turn counts as a day
    -   You can prevent anyone from taking a drink at any time by
        handing them a buck, looking into their eyes and saying "we are
        the future of Bitcoin"
    -   If you can't remember a word replace it with the word
        "consensus"
    -   If try to take a drink but are out, you must try to explain what
        a "fork" is to the person on your left in the most complicated
        way possible.
-   Start:
    -   Take a turn drawing up your implementation (draw a picture
        of something)
    -   Hand the "implementation" to the person on your left who writes
        down words explaining the picture in the abstract using
        big words. Hand it back. This is your BIP Draft.
        -   Roll die, number rolled is the number of required elements
            from BIP-0001 that you included in your BIP draft
            -   take a drink for each element you included
            -   If you rolled a 6 oops you didn't include a
                copyright declaration. Nothing happens.
    -   Submit for comments on mailing list
        -   For three turns, receive criticism. Each turn:
            -   Someone says your proposal is trash! take a drink and
                roll a die:
                -   If 1-2: Smash your hand on the table with your other
                    hand and take out the pain on the person to your
                    right who is criticizing your proposal. Take a drink
                    to ease the pain.
                -   If 3-4: Make an ad hominem statement about the
                    person on the right. Look them in the eye and take a
                    smug sip.
                -   If 5-6: Ignore it. Do nothing.
        -   Finish your drink if you get any positive remarks or
            constructive feedback about your BIP (in other words don't
            finish your drink).
    -   Submit draft pull request to bitcoin/bip.
        -   Story: Congrats! This represents an important milestone in
            the BIP process. You put in the effort to get the BIP draft
            vetted and you are ready to perform the janitorial task of
            publicly submitting your BIP into the official BIP repo for
            the world to see and refer to. The road ahead won't be easy,
            there's rules to obey and guidelines to follow. Think this
            will be quick and painless? Think again, a bit of short
            sidedness or a forgotten rebase will cost you time, and time
            is money.
        -   Setup (1 turn):
            -   Take a drink and roll a 6 sided die. Now self-assign a
                BIP number based on that. Say: "I'm not sure what the
                process is for picking a number, so I just grabbed one
                that's free." Take a drink if the number was taken.
            -   Flip coin. If tails take a drink and argue about
                following procedures: Say: "Seems like a timesink
                to me".
            -   Roll 6 sided die. If you get a 7, BIP editor reads your
                BIP and makes editorial suggestions.
            -   Flip a coin: If heads you will be asked to submit a
                change to the index readme as well. If so drown your
                misery by finishing your drink.
        -   Maintainence. Each day:
            -   Roll die. If 6:
                -   If you were asked to submit a change to the index
                    readme: flip a coin. If heads, your merge commit has
                    conflicts and you will be asked to rebase. If tails
                    continue:
                -   Did you receive any sort of comment in the last 2
                    days?
                    -   If so do nothing
                    -   If not, your BIP draft was merged! Celebrate!
                        Finish your drink.
            -   Flip coin. If heads take a drink as you received
                comments about implementation-level issues in the high
                level draft. Person to your right must say to you: "not
                a fixed size type? And why does the signed-ness not
                match the BIP?"
                -   You must now stealth fix issues in the background,
                    squashing history. Do not answer the question with
                    an explanation but instead remain positive. Say:
                    "Good catch, thanks!"
                -   Roll die. Take a stealth sip for each commit you
                    squashed
            -   Repeat until merged.
    -   Submit pull request with implementation
        -   Story: Amazing! Not only are you a brilliant writer and
            communicator, you happen to be a software engineer as well.
            Truely a the right combination of ethics and ethos in
            your genetics. Now you get to submit your change to see if
            it's a good fit for inclusion into Bitcoin core.
        -   Setup (1 turn)
            -   Flip a coin. If you get either heads or tails that means
                you didn't include any unit tests. Take a drink.
        -   Maintenance (3 turns):
            -   (1 turn) Peter found a DDoS vulnerability in your code.
                Take a drink of shame and say: "I don't think the attack
                you have in mind works."
            -   (1 turn) Someone says you haven't tested this patch
                enough yet. Take a test drink and say: "I attempted to
                write unit tests for this, but Core has no
                infrastructure for building test chains"
            -   (1 turn) Roll a dice. You can either take that many sips
                or insult the person on your right that many times. The
                person on your left may assist with the insults. Insults
                must be one of:
                -   "that would complicate the implementation
                    considerably"
                -   "You are welcome to implement such an upgrade in a
                    future patch, if you like"
                -   "You're making assumptions about the design without
                    understanding it."
                -   "Your second statement is nonsensical."
                -   "This patch is what it is. If you'd like it to be
                    better feel free to contribute code to make it so."
    -   Roll die. If 1-5 your patch was never merged. If 6 your patch
        was merged but then reverted. Finish your drink if
        this happened.
    -   Hard fork
        -   Story: Fantastic! You've gone through the BIP draft process
            and now its time to shift from the PR (pull request) process
            to the PR (public relations) process. You goal is now to
            convince everyone to join a client with your patch in it. If
            you get 70% (the economic supermajority) to join your patch
            you win the game. To signify they've joined your client,
            take their BIP document.
            -   You have to get 100% if you are playing with 5 or less
                people
        -   Setup (1 turn)
            -   Pick a reddit username. Flip a coin. If heads the person
                on your left makes up a name for you. If tails use your
                real name. Your profile picture is a strange picture you
                of a much younger age. Everyone must now refer to you by
                your reddit name prefixed but "u/" like so: "u slash
                sloppy lizard, it's your turn".
        -   Controversy (each day):
            -   Roll a die:
                -   If 1: Make a blog post about how your client is
                    the best. Make up a headline and say it. Everyone
                    must thumbs up or thumbs down. Those who thumbs down
                    must take a drink. Roll a die and that number from
                    the left looping around joins your client (only if
                    their thumb was up, you can join your own client).
                -   If 2: Announce a new community without censorship.
                    Anyone can finish their drink to censor this action.
                    If not censored, roll a die to see who joins (same
                    rules as 1)
                -   If 3: You make a silly beer joke on twitter. Take
                    a drink. No one joins.
                -   If 4: Point to the roof! Last one to point mined one
                    of your blocks and has to join your client. They
                    must also take a drink and say (begrudgingly): "to
                    the moon".
                -   If 5: Someone incites Fear, Uncertainty, & Doubt
                    about your client. Everyone is now scared of you.
                    First one to look you in the eyes has to join your
                    client and take a drink. Lasts only until your
                    next turn.
                -   If 6: Ask someone to join your client. They
                    must accept. Both take a drink of friendship.


From karra.etc at gmail.com  Mon Sep  7 08:58:48 2015
From: karra.etc at gmail.com (Sriram Karra)
Date: Mon, 7 Sep 2015 14:28:48 +0530
Subject: [bitcoin-dev] Problem compiling bitcoin-core
In-Reply-To: <55EB2C6F.2030100@gmx.ch>
References: <55EB2C6F.2030100@gmx.ch>
Message-ID: <CAFkt3UPHa0PdhPMNt1FHqLnyGQqJ1Uhw+qK0QQLLZ3qid7rZ9Q@mail.gmail.com>

Your problem is it cannot find your Boost libs. Why exactly are you trying
to build with a custom lib directory?



On Sat, Sep 5, 2015 at 11:24 PM, LinuXperia via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> Hi.
>
> I am trying to compile bitcoin core on my ubuntu Linux machine as follow:
>
> ./autogen.sh
>
> ./configure
> CPPFLAGS="-I/media/linuxperia/mydata/Projects/bitcoi/depends/x86_64-unknown-linux-gnu/include/
> -O2"
> LDFLAGS="-L/media/linuxperia/mydata/Projects/bitcoin/depends/x86_64-unknown-linux-gnu/lib/"
> --without-gui
>
> make
>
> but i am getting always this Build Error message here!
> What i am doing wrong ?
> How can i fix this build problem so i am able to run the Bitcoin-core Node
> on my Machine ?
>
> Thanks in advance for your helpful solution tips!
>
>    CXXLD    bitcoind
> libbitcoin_server.a(libbitcoin_server_a-init.o): In function
> `boost::filesystem::path::path<boost::filesystem::directory_entry>(boost::filesystem::directory_entry
> const&,
> boost::enable_if<boost::filesystem::path_traits::is_pathable<boost::decay<boost::filesystem::directory_entry>::type>,
> void>::type*)':
> /media/linuxperia/mydata/Projects/bitcoin/depends/x86_64-unknown-linux-gnu/include/boost/filesystem/path.hpp:140:
> undefined reference to
> `boost::filesystem::path_traits::dispatch(boost::filesystem::directory_entry
> const&, std::__cxx11::basic_string<char, std::char_traits<char>,
> std::allocator<char> >&)'
> libbitcoin_util.a(libbitcoin_util_a-util.o): In function `GetNumCores()':
> /media/linuxperia/mydata/Projects/bitcoin/src/util.cpp:825: undefined
> reference to `boost::thread::physical_concurrency()'
> libbitcoin_util.a(libbitcoin_util_a-util.o): In function
> `boost::program_options::detail::basic_config_file_iterator<char>::getline(std::__cxx11::basic_string<char,
> std::char_traits<char>, std::allocator<char> >&)':
> /media/linuxperia/mydata/Projects/bitcoin/depends/x86_64-unknown-linux-gnu/include/boost/program_options/detail/config_file.hpp:161:
> undefined reference to
> `boost::program_options::to_internal(std::__cxx11::basic_string<char,
> std::char_traits<char>, std::allocator<char> > const&)'
> libbitcoin_util.a(libbitcoin_util_a-util.o): In function
> `boost::program_options::detail::basic_config_file_iterator<char>::basic_config_file_iterator(std::istream&,
> std::set<std::__cxx11::basic_string<char, std::char_traits<char>,
> std::allocator<char> >, std::less<std::__cxx11::basic_string<char,
> std::char_traits<char>, std::allocator<char> > >,
> std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>,
> std::allocator<char> > > > const&, bool)':
> /media/linuxperia/mydata/Projects/bitcoin/depends/x86_64-unknown-linux-gnu/include/boost/program_options/detail/config_file.hpp:145:
> undefined reference to
> `boost::program_options::detail::common_config_file_iterator::common_config_file_iterator(std::set<std::__cxx11::basic_string<char,
> std::char_traits<char>, std::allocator<char> >,
> std::less<std::__cxx11::basic_string<char, std::char_traits<char>,
> std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char,
> std::char_traits<char>, std::allocator<char> > > > const&, bool)'
> libbitcoin_wallet.a(libbitcoin_wallet_a-walletdb.o): In function
> `boost::filesystem::copy_file(boost::filesystem::path const&,
> boost::filesystem::path const&, boost::filesystem::copy_option::enum_type)':
> /media/linuxperia/mydata/Projects/bitcoin/depends/x86_64-unknown-linux-gnu/include/boost/filesystem/operations.hpp:497:
> undefined reference to
> `boost::filesystem::detail::copy_file(boost::filesystem::path const&,
> boost::filesystem::path const&, boost::filesystem::detail::copy_option,
> boost::system::error_code*)'
> collect2: error: ld returned 1 exit status
> Makefile:2620: recipe for target 'bitcoind' failed
> make[2]: *** [bitcoind] Error 1
> make[2]: Leaving directory '/media/linuxperia/mydata/Projects/bitcoin/src'
> Makefile:6559: recipe for target 'all-recursive' failed
> make[1]: *** [all-recursive] Error 1
> make[1]: Leaving directory '/media/linuxperia/mydata/Projects/bitcoin/src'
> Makefile:626: recipe for target 'all-recursive' failed
> make: *** [all-recursive] Error 1
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150907/d7a00b09/attachment.html>

From btcdrak at gmail.com  Mon Sep  7 10:26:26 2015
From: btcdrak at gmail.com (Btc Drak)
Date: Mon, 7 Sep 2015 11:26:26 +0100
Subject: [bitcoin-dev] Problem compiling bitcoin-core
In-Reply-To: <CAFkt3UPHa0PdhPMNt1FHqLnyGQqJ1Uhw+qK0QQLLZ3qid7rZ9Q@mail.gmail.com>
References: <55EB2C6F.2030100@gmx.ch>
	<CAFkt3UPHa0PdhPMNt1FHqLnyGQqJ1Uhw+qK0QQLLZ3qid7rZ9Q@mail.gmail.com>
Message-ID: <CADJgMzuqSQqs7p0JBC_U0GRN9z_RY-mvy5fDxYttbDZhFzieLg@mail.gmail.com>

I mailed the solution privately, but for the record he was using the
wrong build option which should have been --with-gui=no

On Mon, Sep 7, 2015 at 9:58 AM, Sriram Karra via bitcoin-dev
<bitcoin-dev at lists.linuxfoundation.org> wrote:
> Your problem is it cannot find your Boost libs. Why exactly are you trying
> to build with a custom lib directory?
>
>
>
> On Sat, Sep 5, 2015 at 11:24 PM, LinuXperia via bitcoin-dev
> <bitcoin-dev at lists.linuxfoundation.org> wrote:
>>
>> Hi.
>>
>> I am trying to compile bitcoin core on my ubuntu Linux machine as follow:
>>
>> ./autogen.sh
>>
>> ./configure
>> CPPFLAGS="-I/media/linuxperia/mydata/Projects/bitcoi/depends/x86_64-unknown-linux-gnu/include/
>> -O2"
>> LDFLAGS="-L/media/linuxperia/mydata/Projects/bitcoin/depends/x86_64-unknown-linux-gnu/lib/"
>> --without-gui
>>
>> make
>>
>> but i am getting always this Build Error message here!
>> What i am doing wrong ?
>> How can i fix this build problem so i am able to run the Bitcoin-core Node
>> on my Machine ?
>>
>> Thanks in advance for your helpful solution tips!
>>
>>    CXXLD    bitcoind
>> libbitcoin_server.a(libbitcoin_server_a-init.o): In function
>> `boost::filesystem::path::path<boost::filesystem::directory_entry>(boost::filesystem::directory_entry
>> const&,
>> boost::enable_if<boost::filesystem::path_traits::is_pathable<boost::decay<boost::filesystem::directory_entry>::type>,
>> void>::type*)':
>>
>> /media/linuxperia/mydata/Projects/bitcoin/depends/x86_64-unknown-linux-gnu/include/boost/filesystem/path.hpp:140:
>> undefined reference to
>> `boost::filesystem::path_traits::dispatch(boost::filesystem::directory_entry
>> const&, std::__cxx11::basic_string<char, std::char_traits<char>,
>> std::allocator<char> >&)'
>> libbitcoin_util.a(libbitcoin_util_a-util.o): In function `GetNumCores()':
>> /media/linuxperia/mydata/Projects/bitcoin/src/util.cpp:825: undefined
>> reference to `boost::thread::physical_concurrency()'
>> libbitcoin_util.a(libbitcoin_util_a-util.o): In function
>> `boost::program_options::detail::basic_config_file_iterator<char>::getline(std::__cxx11::basic_string<char,
>> std::char_traits<char>, std::allocator<char> >&)':
>>
>> /media/linuxperia/mydata/Projects/bitcoin/depends/x86_64-unknown-linux-gnu/include/boost/program_options/detail/config_file.hpp:161:
>> undefined reference to
>> `boost::program_options::to_internal(std::__cxx11::basic_string<char,
>> std::char_traits<char>, std::allocator<char> > const&)'
>> libbitcoin_util.a(libbitcoin_util_a-util.o): In function
>> `boost::program_options::detail::basic_config_file_iterator<char>::basic_config_file_iterator(std::istream&,
>> std::set<std::__cxx11::basic_string<char, std::char_traits<char>,
>> std::allocator<char> >, std::less<std::__cxx11::basic_string<char,
>> std::char_traits<char>, std::allocator<char> > >,
>> std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>,
>> std::allocator<char> > > > const&, bool)':
>>
>> /media/linuxperia/mydata/Projects/bitcoin/depends/x86_64-unknown-linux-gnu/include/boost/program_options/detail/config_file.hpp:145:
>> undefined reference to
>> `boost::program_options::detail::common_config_file_iterator::common_config_file_iterator(std::set<std::__cxx11::basic_string<char,
>> std::char_traits<char>, std::allocator<char> >,
>> std::less<std::__cxx11::basic_string<char, std::char_traits<char>,
>> std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char,
>> std::char_traits<char>, std::allocator<char> > > > const&, bool)'
>> libbitcoin_wallet.a(libbitcoin_wallet_a-walletdb.o): In function
>> `boost::filesystem::copy_file(boost::filesystem::path const&,
>> boost::filesystem::path const&, boost::filesystem::copy_option::enum_type)':
>>
>> /media/linuxperia/mydata/Projects/bitcoin/depends/x86_64-unknown-linux-gnu/include/boost/filesystem/operations.hpp:497:
>> undefined reference to
>> `boost::filesystem::detail::copy_file(boost::filesystem::path const&,
>> boost::filesystem::path const&, boost::filesystem::detail::copy_option,
>> boost::system::error_code*)'
>> collect2: error: ld returned 1 exit status
>> Makefile:2620: recipe for target 'bitcoind' failed
>> make[2]: *** [bitcoind] Error 1
>> make[2]: Leaving directory '/media/linuxperia/mydata/Projects/bitcoin/src'
>> Makefile:6559: recipe for target 'all-recursive' failed
>> make[1]: *** [all-recursive] Error 1
>> make[1]: Leaving directory '/media/linuxperia/mydata/Projects/bitcoin/src'
>> Makefile:626: recipe for target 'all-recursive' failed
>> make: *** [all-recursive] Error 1
>>
>> _______________________________________________
>> bitcoin-dev mailing list
>> bitcoin-dev at lists.linuxfoundation.org
>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
>
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>

From linuxperia at gmx.ch  Mon Sep  7 18:35:31 2015
From: linuxperia at gmx.ch (LinuXperia)
Date: Mon, 7 Sep 2015 20:35:31 +0200
Subject: [bitcoin-dev] Problem compiling bitcoin-core
In-Reply-To: <CAFkt3UPHa0PdhPMNt1FHqLnyGQqJ1Uhw+qK0QQLLZ3qid7rZ9Q@mail.gmail.com>
References: <55EB2C6F.2030100@gmx.ch>
	<CAFkt3UPHa0PdhPMNt1FHqLnyGQqJ1Uhw+qK0QQLLZ3qid7rZ9Q@mail.gmail.com>
Message-ID: <55EDD8F3.6010203@gmx.ch>

Am 07.09.2015 um 10:58 schrieb Sriram Karra:
> Your problem is it cannot find your Boost libs. Why exactly are you trying
> to build with a custom lib directory?
>

Hi Sriram !

Thank you very much for your Reply !

Yes you are right.

I did not had the right Configuration Options.

BTC Drake and ChinaTinte contacted me yesterday direct off the Mailing 
List after i posted the mail here and helped me to solve the Problem.

I got bitcoin-core finally builded from sources and running.

Big Compliments to everyone especially also to all the bitcoin developers.

Have all a nice Day.
Greetings LinuXperia


From btcdrak at gmail.com  Mon Sep  7 19:37:06 2015
From: btcdrak at gmail.com (Btc Drak)
Date: Mon, 7 Sep 2015 20:37:06 +0100
Subject: [bitcoin-dev] [BIP/Draft] BIP Acceptance Process
In-Reply-To: <CAAxp-m_EmMbVBqQK9ijoe+n0dAs726TaBX5m1Wgzsv-m1KHdfQ@mail.gmail.com>
References: <64B72DF6-BE37-4624-ADAA-CE28C14A4227@gmail.com>
	<CABaSBaw7hM2qmuR6Z6USy5=V9NGeCPKmHHuVOH=vexDk7kY8OA@mail.gmail.com>
	<CAAxp-m_vo5vJEemR_hRX3hNcUPveA6EHn-ZFMJo8ke59E6BrKw@mail.gmail.com>
	<CADJgMzvanj41Dfa4kQsq5SVvt-Zeee2SOfD3Uws-FpBQsyZsqg@mail.gmail.com>
	<CAAxp-m_EmMbVBqQK9ijoe+n0dAs726TaBX5m1Wgzsv-m1KHdfQ@mail.gmail.com>
Message-ID: <CADJgMzuRy_Fbv2UaJ4EZzh8DHhYYixu=k6_Z=sKtNJ9SsLTdyQ@mail.gmail.com>

Sorry not to reply earlier. I have a rather long post. I've split it
into two sections, one explaining the background and secondly talking
very specifically about your proposal and possible areas to look at.

I think there's a key misunderstanding about BIPs and "who decides
what in Bitcoin". A BIP usually defines some problem and a solutions
or helps communicate proposals to the technical community. They are
sort of mini white papers on specific topics often with reference
implementations attached. They may be consensus critical, or not. The
process for getting a BIP published is fairly loose in that it really
just requires some discussion and relevance to Bitcoin regardless of
whether the proposal is something that would be accepted or used by
others in the ecosystem. The BIP editor is obviously going to filter
out obvious nonesense and that shouldn't be controversial but obvious
when you see it.

You need to separate out the idea of BIPs as is, and implementations
of BIPs in Bitcoin software (like Bitcoin Core).

Take BIP64 for example. It's a proposal that adds a service to nodes
allowing anyone to query the UTXO set on the p2p network. Bitcoin Core
as a project has not implemented it but was instead implemented in XT
and is utilised by Lighthouse. So the BIP specification is there in
the BIPs repository. As far as the bitcoin ecosystem goes, only
Bitcoin XT and lighthouse utilise it so far.

BIP101 is another example, but one of a consensus critical proposal
that would change the Bitcoin protocol (i.e. requires a hard fork). It
was adopted by only the XT project and so far no other software. At
the time of writing miners have chosen not to run implementations of
BIP101.

You can see the BIPs authoring and publishing process is a separate
issue entirely to the implementation and acceptance by the Bitcoin
ecosystem.

For non-consensus critical proposals like BIP64, or maybe one relating
to privacy (how to order transaction output for example), you could
judge acceptance of the proposal by the number of software projects
that implement the proposal, and the number of users it impacts. If a
proposal is utilised by many projects, but not the few projects that
have the majority of users, one could not claim wide acceptance.

For consensus critical proposals like BIP66 (Strict DER encoding) this
BIP was implemented in at least two bitcoin software implementations.
Over 95% of miners adopted the proposal over a 4.5 month period. The
BIP became de facto accepted, and in fact, once 95% lock-in was
achieved, the BIP became Final by rights that the consensus rules for
the Bitcoin network had changed.

In the case of consensus critical proposals like that, you can only
write proposals, implement it in software and hope they are adopted.

Now where does the confusion arise? Well, Bitcoin Core is the de facto
reference implementation by virtue of having the largest technical
contributor base and the widest userbase of any Bitcoin full node
implementation. This is where I believe, the community get stuck in
their assumptions and is so obvious it may have been overlooked.

Consensus rule changes to Bitcoin Core are always documented as BIPs
so the exact details can be picked up by other software implementers
(if they so desire). Take CHECKLOCKTIMEVERIFY a new widely anticipated
opcode. The proposal implemented in Bitcoin Core and eventually
merged. Peter also authored BIP65 (required because without it, his
proposal could not be considered for Bitcoin Core).

It is not that BIP65 was somehow "accepted", in fact, as it stands,
BIP65 is still just a draft because while there is a BIP and a
reference implementation in Bitcoin Core, the consensus changes to the
Bitcoin protocol have not been proposed to the community (through a
soft fork), and thus acceptance is still only a possibility (although
acceptance is extremely likely because service providers are literally
chomping at the bit waiting for deployment).

Also I would like to note that it's only an internal rule of Bitcoin
Core that consensus rule changes require a formal BIP. It is not a
requirement laid down from the BIP gods. BIPs simply serve as a way to
communicate ideas and proposals. The community at large will decide if
a BIP becomes widely adopted or not. Of course, Bitcoin Core has a
major influence on this because they have the largest user base. It is
relevant to say the large userbase is not just a historical artefact
by virtue of being the first Bitcoin implementation. Bitcoin Core is
widely trusted by commercial users because of the high developer
count, wide technical expertise and relative security given knowing
that they will be supported with security and maintenance releases.

YOUR PROPOSAL

Getting back to your specific proposal. It seems to focus more on
getting BIPs accepted in the sense of published and missed the wider
picture. As I have detailed, getting published isnt a problem. Anyone
can make a proposal, so long as it's not obviously off topic or
nonsensical, there is no grounds to refuse to publish it.

Any part of your proposal which seems to infer governance of Bitcoin
is misplaced because it's not the place of BIPs. The Bitcoin Core
project is not the BIPs project and their rules are their own. They
are one implementation, and very influential one yes, but, not the one
true implementation to rule them all.

Where I do think the BIP-1 text falls down is with the workflow of
ACCEPTED/REJECTED because it does not really define who is accepting
and rejecting what and misses much of the reality of the process in
the real world. Given the purpose of BIPs is a formal way to
communicate technical proposals to the bitcoin community (i.e.
implementers and protocol consumers) the work flow needs to be
adjusted.

Anyone can submit a proposal and the state of the proposal can be
DRAFT or WITHDRAWN but draft here is confusing. Draft would suggest
it's a work in progress, but the proposal is "complete" when the
proposer is happy with the final text. Downstream implementers should
not attempt to write code (in my opinion) until the proposal has been
finalised by the authors. Only the author has the right to say when
their proposal is finished.

The states of Accepted / Rejected are easy for consensus critical
changes, especially once versionbits softforking is enacted and
proposals will have a timeout associated. Certainly for deployed
proposals you could say the proposal is "active" or better still
"pending approval". However "accepted" and "rejected" is difficult for
say privacy standards because how can you gauge or measure it. As I
said earlier, you might have a lot of small projects implementing some
privacy standards, but if the major wallets dont, and thus the
majority of users, how would you gauge it?

Something is a standard only when it becomes a standard by virtue of
having become a standard :)

"Replaced" is an easy state, when another proposal supercedes and
replaces an older one. Again the wording could be better here.
"deprecated" would also be appropriate in some circumstances.

I'm not making a concrete proposal, I'm just highlighting where BIP-1
sort of falls apart because of an incongruence with the workflow
states and what actually happens in real life.

Local to the BIPs project, I do think the BIPs editor, and guidelines
try to filter proposals by raising the bar: i.e. requiring proposal to
be polished through peer review before they are formally published as
draft BIPs. Though this process an author would a) get most of his
details right first time, and b) have some relative confidence his/her
idea was useful and withdraw any obvious bad proposals themselves. An
author may still decide, despite many objections from their peers they
want to proceed with publishing and nothing should stop them providing
it's relevant to the Bitcoin space. Peer review pressure is likely to
act as the best filtering mechanism in this case anyway (no-one would
want to be seen as an ass right?). Personally speaking, I felt quite
nervous proposing my own blocksize ideas. I sought opinions in private
first and had it been widely decried would probably not have pursued
it any further.

So in summary, I think some aspects of BIP-1 could do with polishing
as I have detailed, specially around the "workflow states" but not to
introduce any committees to the process, but where possible to extract
state from the real state of the BIP in the real world. In fact, this
is my direct argument against any forms of committee, in that the
state of a BIP is determined by factors outside of any particular
individual's or groups' purview.

On Fri, Sep 4, 2015 at 9:13 PM, Andy Chase <theandychase at gmail.com> wrote:
> Thanks for your thoughts.
>
> My proposal isn't perfect for sure. There's likely much better ways to do
> it. But to be clear what I'm trying to solve is basically this:
>
> Who makes high-level Bitcoin decisions? Miners, client devs, merchants, or
> users? Let's set up a system where everyone has a say and clear acceptance
> can be reached.
>
> ---
>
> My motivation for writing this proposal is stated right at the start:
>> "The current process for accepting a BIP is not clearly defined. While
>> BIP-0001 defines the process for writing and submitting a Bitcoin
>> Improvement Proposal to the community it does not specify the precise method
>> for which BIPs are considered accepted or rejected."
>
> BIPs are considered "accepted" right now based on an undefined system, quite
> honestly. Btc Drak: What's the system for accepting a BIP? Words like
> "consensus" come up but they aren't defined. My goal is to define a system
> that makes finding "consensus" (I like the word "acceptance" better) in a
> clear and fair way.
>
> I.e. what's broken?
>
> * Being sure that a proposal is widely accepted or rejected
> * Preventing deadlock (i.e. one person's weak objections preventing
> acceptance)
> * Receiving feedback from important segments like user groups,
> merchants/exchanges, etc. in a systematic and clear way instead of going and
> forth or having "oracles" on technical advisory boards.
>
>> Yes the process is loose, but is it broken?
>
> Yes/No. Work gets done with the current process. Work can get done with this
> process. The goal is for this process is to be safer/clearer/better defined
> way.
>
>> There have been a flood of
>> BIPs added recently with zero bureaucracy or friction.
>
> As we move forward, we want to balance the powers in such a way that we may
> want to pause a bit before we accept each proposal. 2 weeks for comments + 2
> weeks for opinions will slow things down, but it shouldn't stall meaningful
> work. I used 4 weeks for the process with the understanding that most
> proposals are clear and easily acceptable. Controversial proposals will
> likely need more time and thus will likely have be submitted at least twice
> to discover a clear response.
>
> "Accepting" a BIP means just that: It's accepted. What's acceptance mean?
> This proposal provides an answer.
>
> Client implementations, users, miners, and merchants can feel safe
> implementing and using a feature that has clear acceptance. This process
> isn't meant to force anything on client implementors, users, miners, or
> merchants.
>
> On Fri, Sep 4, 2015 at 12:20 PM, Btc Drak <btcdrak at gmail.com> wrote:
>>
>> I'm rather perplexed about this proposal. What exactly is wrong with
>> the existing BIPs process? I mean, it seems to me anyone can publish a
>> BIP pretty easily in the BIPs repository. There doesnt seems to be any
>> real barrier to entry whatsoever. I know there have been all manner of
>> aspersions, but having just written two BIPs there was no friction at
>> all.
>>
>> Whether the ecosystem adopts a BIP is another question of course, but
>> that's out of scope of the BIPs project anyhow. Take BIP101
>> controversial as it gets, but it's there. Whether Bitcoin implementers
>> implement it is another kettle of fish and a matter for each project
>> to decide. It's absolutely NOT the realm of the BIPs project itself.
>> Bitcoin Core does not make any consensus critical changes with a BIP.
>> Where one seeks to establish certain standards, say for privacy, a BIP
>> would be appropriate so the ecosystem can harmonise methodology across
>> the board.
>>
>> The status of a BIP is not really determined by anyone, it's by
>> adoption - that's where consensus happens. There's a little legroom
>> around this but I'm not entirely sure what you are trying to solve.
>> Yes the process is loose, but is it broken? There have been a flood of
>> BIPs added recently with zero bureaucracy or friction.
>>
>> BIP0001 is the BIP that defines the BIP process. Interestingly enough
>> the only BIP that might be controversial is in fact a BIP to change
>> the way BIPs are handled!
>>
>> So I'd really prefer to start this conversation with a breakdown of
>> what you think is broken first before tackling what may or may not
>> need fixing. I would be very cautious bringing "administrative"
>> burdens to the process or evicting common sense from the proceedings.
>> Much of the debates around consensus building seem to negate the
>> importance of common sense and the simple fact that "it's obvious when
>> you see it".
>>
>> I'm sure there can be improvements, but for me personally, I need to
>> see what is broken before I can make any judgement on a potential way
>> forward, and if it's not broken, we should leave it alone.
>>
>>
>> On Fri, Sep 4, 2015 at 5:40 AM, Andy Chase via bitcoin-dev
>> <bitcoin-dev at lists.linuxfoundation.org> wrote:
>> > As posted:
>> >
>> > **Enforcement/Organization** I agree with your comments. I don't believe
>> > in
>> > setting up an organization to manage this process (would be too much
>> > power
>> > and not really needed because the internet is pretty good at information
>> > sharing). Therefore, I designed it around the assumption that
>> > participation
>> > is voluntary. This means that it's hard to enforce rules like forcing
>> > groups
>> > to see the other side. Groupthink/Echo chambers is real and is bad but
>> > it's
>> > hard to change human nature.
>> >
>> > In regards to enforcement, I believe that the best approach would be to
>> > motivate committees to produce the best opinion they can (and also proof
>> > of
>> > stake, another weak point in this proposal), as the better they can do
>> > this
>> > the more likely the community will accept their opinion as valid and
>> > important.
>> >
>> > Indeed, I believe that without an organization managing the process,
>> > it's up
>> > to each individual reader of each BIP/Opinions set to make the decision
>> > on
>> > whether or not there is clear and true community acceptance.
>> >
>> > ----
>> >
>> > **Committee versus another approach**
>> >
>> > Pros of using Committees:
>> >
>> > * Committees are used today in many fields with a range of success. Lots
>> > of
>> > previous work to work off of here, history is established.
>> > * Many segments already have committee-like structures (Merchants
>> > produce
>> > shared signed documents, miners often represent themselves, User groups
>> > have
>> > representatives like voting on subreddit moderators, Core Devs have Core
>> > Devs)
>> > * Committees can filter a range of opinions down to a yes/no
>> > * Committees have real people that can be talked to, contacted, etc.
>> > * Much easier to proof stake in a range (People generally accept the
>> > Bitcoin
>> > Core has 70-90% of the market share) vs someone trying to proof they
>> > make up
>> > (.000001% of the Bitcoin user-base)
>> > * Committees have some stability, encourages experience and expertise
>> > (Committee members can be knowledgeable in their area and adequately
>> > understand BIPs)
>> >
>> > Cons:
>> >
>> > * Fear of committees working in the dark, censoring opinions (i.e. "Dark
>> > smokey room of fat cats") (Possible solution: make committee power fluid
>> > i.e. easily abandon-able: miners can change pools, users can change
>> > client
>> > forks, change merchants, users can re-group, encourage transparency)
>> > * More centralized, centralization of power (generally bad) (Possible
>> > solution: encourage smaller committees)
>> > * Centralization pressure (groups may seek to consolidate to gain power)
>> > (Possible solution: Segmentation)
>> > * Encourages groupthink, political maneuvers, turns good people into
>> > politicians, mud-tossing
>> >
>> > **Another possible approach: micro votes**
>> >
>> > Pros:
>> >
>> > * Each user can represent themselves, no censorship
>> > * People feel more involved and empowered
>> >
>> > Cons:
>> >
>> > * How to prove and prevent manipulation?
>> > * Only motivated people will contribute. Motivated people may be
>> > motivated
>> > for bad reasons.
>> >
>> >
>> > On Thu, Sep 3, 2015 at 5:43 PM, Bryan Bishop <kanzure at gmail.com> wrote:
>> >>
>> >> On Thu, Sep 3, 2015 at 7:30 PM, Andy Chase via bitcoin-dev
>> >> <bitcoin-dev at lists.linuxfoundation.org> wrote:
>> >> > I wrote the BIP mostly to stir the pot on ideas of governance
>> >>
>> >> Some quick comments:
>> >>
>> >> I have some objects that I am not ready to put into words, but I do
>> >> think there are easily some major objections to committee design. If I
>> >> vanish and never respond with my objections, perhaps there's an IETF
>> >> RFC about this already....
>> >>
>> >> Something that may mitigate my possible objections would be some
>> >> mandatory requirement about ecosystem echo-chambers making many
>> >> attempts and efforts at steelman representations of alternative
>> >> viewpoints. Understanding objections at a fundamental level, enough to
>> >> make strong steelman statements, is very important to ensure that the
>> >> competing opinions are not censored from consideration. Pathological
>> >> integration and internalization of these steelman arguments can be
>> >> very useful, even if the process looks unusual.
>> >>
>> >> Your process does not have to replace any particular BIP process
>> >> as-is, but rather could be an alternative that proceeds on its own
>> >> perhaps indefinitely without replacement. I don't think too many BIP
>> >> processes are necessarily incompatible except by namespace collision.
>> >>
>> >>
>> >> https://gist.github.com/andychase/dddb83c294295879308b#gistcomment-1566432
>> >>
>> >> - Bryan
>> >> http://heybryan.org/
>> >> 1 512 203 0507
>> >
>> >
>> >
>> > _______________________________________________
>> > bitcoin-dev mailing list
>> > bitcoin-dev at lists.linuxfoundation.org
>> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>> >
>
>

From washington.sanchez at gmail.com  Tue Sep  8 07:45:16 2015
From: washington.sanchez at gmail.com (Washington Sanchez)
Date: Tue, 8 Sep 2015 17:45:16 +1000
Subject: [bitcoin-dev] Dynamic limit to the block size - BIP draft discussion
Message-ID: <CAG0bcYzzg4yeQvd27PZu5Fqv1ULS3cKeQHaRZ2zPcM3OASw1cg@mail.gmail.com>

Hi everyone,

I know many of us feel that the last thing the Bitcoin community needs is
another BIP related to the block size, but after a lot of reading and
commenting, I'd like to throw this idea out there.

I've already written it up as a BIP and would like some constructive
feedback/suggestions/alternatives related to some of the variables in my
specification:


Dynamic limit to the block size
=======================

The goal is to dynamically increase the maximum block size conservatively,
but allow meaningful relief to transaction volume pressure in response to
true market demand. The specification follows:

- Every 4032 blocks (~4 weeks), the maximum block size will be increased by
10% *IF* a minimum of 2000 blocks has a size >= 60% of the maximum block
size at that time
  + This calculates to theoretically 13 increases per year
- The maximum block size can only ever be increased, not decreased

For example, if this rule were to be instituted January 1st 2016, with a
present maximum block size 1 MB, the limit would be increased to 1.1 MB on
January 29th 2016. The theoretical maximum block size at the end of 2016
would be ~3.45 MB, assuming all 13 increases are triggered.

As the maximum block size rises, so the cost of artificially triggering an
increase in the maximum block size.


Regards,
Wash


-------------------------------------------
*Dr Washington Y. Sanchez <http://onename.com/drwasho>*
Co-founder, OB1 <http://ob1.io>
Core developer of OpenBazaar <https://openbazaar.org>
@drwasho <https://twitter.com/drwasho>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150908/f9e714da/attachment.html>

From btcdrak at gmail.com  Tue Sep  8 08:49:31 2015
From: btcdrak at gmail.com (Btc Drak)
Date: Tue, 8 Sep 2015 09:49:31 +0100
Subject: [bitcoin-dev] Dynamic limit to the block size - BIP draft
	discussion
In-Reply-To: <CAG0bcYzzg4yeQvd27PZu5Fqv1ULS3cKeQHaRZ2zPcM3OASw1cg@mail.gmail.com>
References: <CAG0bcYzzg4yeQvd27PZu5Fqv1ULS3cKeQHaRZ2zPcM3OASw1cg@mail.gmail.com>
Message-ID: <CADJgMztJx1cBFhNOwMgBHJGPmBNPqsTdQbCCjFBmDBSBfTMMUg@mail.gmail.com>

> but allow meaningful relief to transaction volume pressure in response to true market demand

If blocksize can only increase then it's like a market that only goes
up which is unrealistic. Transaction will volume ebb and flow
significantly. Some people have been looking at transaction volume
charts over time and all they can see is an exponential curve which
they think will go on forever, yet nothing goes up forever and it will
go through significant trend cycles (like everything does). If you
dont want to hurt the fee market, the blocksize has to be elastic and
allow contraction as well as expansion.

On Tue, Sep 8, 2015 at 8:45 AM, Washington Sanchez via bitcoin-dev
<bitcoin-dev at lists.linuxfoundation.org> wrote:
> Hi everyone,
>
> I know many of us feel that the last thing the Bitcoin community needs is
> another BIP related to the block size, but after a lot of reading and
> commenting, I'd like to throw this idea out there.
>
> I've already written it up as a BIP and would like some constructive
> feedback/suggestions/alternatives related to some of the variables in my
> specification:
>
>
> Dynamic limit to the block size
> =======================
>
> The goal is to dynamically increase the maximum block size conservatively,
> but allow meaningful relief to transaction volume pressure in response to
> true market demand. The specification follows:
>
> - Every 4032 blocks (~4 weeks), the maximum block size will be increased by
> 10% *IF* a minimum of 2000 blocks has a size >= 60% of the maximum block
> size at that time
>   + This calculates to theoretically 13 increases per year
> - The maximum block size can only ever be increased, not decreased
>
> For example, if this rule were to be instituted January 1st 2016, with a
> present maximum block size 1 MB, the limit would be increased to 1.1 MB on
> January 29th 2016. The theoretical maximum block size at the end of 2016
> would be ~3.45 MB, assuming all 13 increases are triggered.
>
> As the maximum block size rises, so the cost of artificially triggering an
> increase in the maximum block size.
>
>
> Regards,
> Wash
>
>
> -------------------------------------------
> Dr Washington Y. Sanchez
> Co-founder, OB1
> Core developer of OpenBazaar
> @drwasho
>
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>

From ibrightly at gmail.com  Tue Sep  8 12:28:56 2015
From: ibrightly at gmail.com (Ivan Brightly)
Date: Tue, 8 Sep 2015 08:28:56 -0400
Subject: [bitcoin-dev] Dynamic limit to the block size - BIP draft
	discussion
In-Reply-To: <CADJgMztJx1cBFhNOwMgBHJGPmBNPqsTdQbCCjFBmDBSBfTMMUg@mail.gmail.com>
References: <CAG0bcYzzg4yeQvd27PZu5Fqv1ULS3cKeQHaRZ2zPcM3OASw1cg@mail.gmail.com>
	<CADJgMztJx1cBFhNOwMgBHJGPmBNPqsTdQbCCjFBmDBSBfTMMUg@mail.gmail.com>
Message-ID: <CAAre=yRawFU_WMdE+ReemscYD33ez1PF6VhU2FmWo2fAEcw_Xw@mail.gmail.com>

This is true, but miners already control block size through soft caps.
Miners are fully capable of producing smaller blocks regardless of the max
block limit, with or without collusion. Arguably, there is no need to ever
reduce the max block size unless technology advances for some reason
reverse course - aka, WW3 takes a toll on the internet and the average
bandwidth available halves. The likelihood of significant technology
contraction in the near future seems rather unlikely and is more broadly
problematic for society than bitcoin specifically.

The only reason for reducing the max block limit other than technology
availability is if you think that this is what will produce the fee market,
which is back to an economic discussion - not a technology scaling
discussion.

On Tue, Sep 8, 2015 at 4:49 AM, Btc Drak via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> > but allow meaningful relief to transaction volume pressure in response
> to true market demand
>
> If blocksize can only increase then it's like a market that only goes
> up which is unrealistic. Transaction will volume ebb and flow
> significantly. Some people have been looking at transaction volume
> charts over time and all they can see is an exponential curve which
> they think will go on forever, yet nothing goes up forever and it will
> go through significant trend cycles (like everything does). If you
> dont want to hurt the fee market, the blocksize has to be elastic and
> allow contraction as well as expansion.
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150908/a1ce797b/attachment.html>

From adam at cypherspace.org  Tue Sep  8 13:13:16 2015
From: adam at cypherspace.org (Adam Back)
Date: Tue, 8 Sep 2015 14:13:16 +0100
Subject: [bitcoin-dev] Dynamic limit to the block size - BIP draft
	discussion
In-Reply-To: <CAAre=yRawFU_WMdE+ReemscYD33ez1PF6VhU2FmWo2fAEcw_Xw@mail.gmail.com>
References: <CAG0bcYzzg4yeQvd27PZu5Fqv1ULS3cKeQHaRZ2zPcM3OASw1cg@mail.gmail.com>
	<CADJgMztJx1cBFhNOwMgBHJGPmBNPqsTdQbCCjFBmDBSBfTMMUg@mail.gmail.com>
	<CAAre=yRawFU_WMdE+ReemscYD33ez1PF6VhU2FmWo2fAEcw_Xw@mail.gmail.com>
Message-ID: <CALqxMTERUFEFgJ4quz2dWLRw9fD3DkBp-6RO4cuvdBGV2MSyhw@mail.gmail.com>

The maximum block-size is one that can be filled at zero-cost by
miners, and so allows some kinds of amplification of selfish-mining
related attacks.

Adam


On 8 September 2015 at 13:28, Ivan Brightly via bitcoin-dev
<bitcoin-dev at lists.linuxfoundation.org> wrote:
> This is true, but miners already control block size through soft caps.
> Miners are fully capable of producing smaller blocks regardless of the max
> block limit, with or without collusion. Arguably, there is no need to ever
> reduce the max block size unless technology advances for some reason reverse
> course - aka, WW3 takes a toll on the internet and the average bandwidth
> available halves. The likelihood of significant technology contraction in
> the near future seems rather unlikely and is more broadly problematic for
> society than bitcoin specifically.
>
> The only reason for reducing the max block limit other than technology
> availability is if you think that this is what will produce the fee market,
> which is back to an economic discussion - not a technology scaling
> discussion.
>
> On Tue, Sep 8, 2015 at 4:49 AM, Btc Drak via bitcoin-dev
> <bitcoin-dev at lists.linuxfoundation.org> wrote:
>>
>> > but allow meaningful relief to transaction volume pressure in response
>> > to true market demand
>>
>> If blocksize can only increase then it's like a market that only goes
>> up which is unrealistic. Transaction will volume ebb and flow
>> significantly. Some people have been looking at transaction volume
>> charts over time and all they can see is an exponential curve which
>> they think will go on forever, yet nothing goes up forever and it will
>> go through significant trend cycles (like everything does). If you
>> dont want to hurt the fee market, the blocksize has to be elastic and
>> allow contraction as well as expansion.
>
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>

From ibrightly at gmail.com  Tue Sep  8 13:52:00 2015
From: ibrightly at gmail.com (Ivan Brightly)
Date: Tue, 8 Sep 2015 09:52:00 -0400
Subject: [bitcoin-dev] Dynamic limit to the block size - BIP draft
	discussion
In-Reply-To: <CALqxMTERUFEFgJ4quz2dWLRw9fD3DkBp-6RO4cuvdBGV2MSyhw@mail.gmail.com>
References: <CAG0bcYzzg4yeQvd27PZu5Fqv1ULS3cKeQHaRZ2zPcM3OASw1cg@mail.gmail.com>
	<CADJgMztJx1cBFhNOwMgBHJGPmBNPqsTdQbCCjFBmDBSBfTMMUg@mail.gmail.com>
	<CAAre=yRawFU_WMdE+ReemscYD33ez1PF6VhU2FmWo2fAEcw_Xw@mail.gmail.com>
	<CALqxMTERUFEFgJ4quz2dWLRw9fD3DkBp-6RO4cuvdBGV2MSyhw@mail.gmail.com>
Message-ID: <CAAre=yTP07HQZesCgyAVQ9UqyJ98UhLLa8cTPNi7F+e6Ht05fg@mail.gmail.com>

Agreed. For this reason, the scaling BIPs which don't allow for easy gaming
such as BIP101, your proposal or Pieter's are preferable for their
predictability and simplicity. Changing the fundamental rules for Bitcoin
is supposed to be hard - why give this power up to a subsection of the
ecosystem in order to make it easier to change or game?

On Tue, Sep 8, 2015 at 9:13 AM, Adam Back <adam at cypherspace.org> wrote:

> The maximum block-size is one that can be filled at zero-cost by
> miners, and so allows some kinds of amplification of selfish-mining
> related attacks.
>
> Adam
>
>
> On 8 September 2015 at 13:28, Ivan Brightly via bitcoin-dev
> <bitcoin-dev at lists.linuxfoundation.org> wrote:
> > This is true, but miners already control block size through soft caps.
> > Miners are fully capable of producing smaller blocks regardless of the
> max
> > block limit, with or without collusion. Arguably, there is no need to
> ever
> > reduce the max block size unless technology advances for some reason
> reverse
> > course - aka, WW3 takes a toll on the internet and the average bandwidth
> > available halves. The likelihood of significant technology contraction in
> > the near future seems rather unlikely and is more broadly problematic for
> > society than bitcoin specifically.
> >
> > The only reason for reducing the max block limit other than technology
> > availability is if you think that this is what will produce the fee
> market,
> > which is back to an economic discussion - not a technology scaling
> > discussion.
> >
> > On Tue, Sep 8, 2015 at 4:49 AM, Btc Drak via bitcoin-dev
> > <bitcoin-dev at lists.linuxfoundation.org> wrote:
> >>
> >> > but allow meaningful relief to transaction volume pressure in response
> >> > to true market demand
> >>
> >> If blocksize can only increase then it's like a market that only goes
> >> up which is unrealistic. Transaction will volume ebb and flow
> >> significantly. Some people have been looking at transaction volume
> >> charts over time and all they can see is an exponential curve which
> >> they think will go on forever, yet nothing goes up forever and it will
> >> go through significant trend cycles (like everything does). If you
> >> dont want to hurt the fee market, the blocksize has to be elastic and
> >> allow contraction as well as expansion.
> >
> >
> > _______________________________________________
> > bitcoin-dev mailing list
> > bitcoin-dev at lists.linuxfoundation.org
> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> >
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150908/8c49c772/attachment-0001.html>

From washington.sanchez at gmail.com  Tue Sep  8 14:02:51 2015
From: washington.sanchez at gmail.com (Washington Sanchez)
Date: Wed, 9 Sep 2015 00:02:51 +1000
Subject: [bitcoin-dev] Dynamic limit to the block size - BIP draft
	discussion
In-Reply-To: <CALqxMTERUFEFgJ4quz2dWLRw9fD3DkBp-6RO4cuvdBGV2MSyhw@mail.gmail.com>
References: <CAG0bcYzzg4yeQvd27PZu5Fqv1ULS3cKeQHaRZ2zPcM3OASw1cg@mail.gmail.com>
	<CADJgMztJx1cBFhNOwMgBHJGPmBNPqsTdQbCCjFBmDBSBfTMMUg@mail.gmail.com>
	<CAAre=yRawFU_WMdE+ReemscYD33ez1PF6VhU2FmWo2fAEcw_Xw@mail.gmail.com>
	<CALqxMTERUFEFgJ4quz2dWLRw9fD3DkBp-6RO4cuvdBGV2MSyhw@mail.gmail.com>
Message-ID: <CAG0bcYzBCsg9xNLGmu4S=PEPjtbd2iBLH52ryswbkRM23OqquA@mail.gmail.com>

>
> The maximum block-size is one that can be filled at zero-cost by
> miners, and so allows some kinds of amplification of selfish-mining
> related attacks


A selfish mining attack would have to be performed for at least 2000 blocks
over a period of 4 weeks in order to achieve a meager 10% increase in the
block size.

If there goal is to simply drive up fees to gain acceptance into the block,
we're in exactly the same position we are in today (as in nothing stops a
miner from doing this).
If the goal is to increase the block size to push out smaller miners,
they'll have to perform this attack over the course of years and destroy
any economic incentives they have for mining in the first place.

 why give this power up to a subsection of the ecosystem in order to make
> it easier to change or game


Well this same could be said for developers trying to predict what the
appropriate block size should be over the next 20 years... it's a hallmark
to a group of bankers trying to predict the appropriate interest rate for
the entire economy. Just as it is impossible to predict the appropriate
hash rate to secure the network, so it goes for the block size. Both need
to adjust dynamically to the scale/adoption of the network.

On Tue, Sep 8, 2015 at 11:13 PM, Adam Back <adam at cypherspace.org> wrote:

> The maximum block-size is one that can be filled at zero-cost by
> miners, and so allows some kinds of amplification of selfish-mining
> related attacks.
>
> Adam
>
>
> On 8 September 2015 at 13:28, Ivan Brightly via bitcoin-dev
> <bitcoin-dev at lists.linuxfoundation.org> wrote:
> > This is true, but miners already control block size through soft caps.
> > Miners are fully capable of producing smaller blocks regardless of the
> max
> > block limit, with or without collusion. Arguably, there is no need to
> ever
> > reduce the max block size unless technology advances for some reason
> reverse
> > course - aka, WW3 takes a toll on the internet and the average bandwidth
> > available halves. The likelihood of significant technology contraction in
> > the near future seems rather unlikely and is more broadly problematic for
> > society than bitcoin specifically.
> >
> > The only reason for reducing the max block limit other than technology
> > availability is if you think that this is what will produce the fee
> market,
> > which is back to an economic discussion - not a technology scaling
> > discussion.
> >
> > On Tue, Sep 8, 2015 at 4:49 AM, Btc Drak via bitcoin-dev
> > <bitcoin-dev at lists.linuxfoundation.org> wrote:
> >>
> >> > but allow meaningful relief to transaction volume pressure in response
> >> > to true market demand
> >>
> >> If blocksize can only increase then it's like a market that only goes
> >> up which is unrealistic. Transaction will volume ebb and flow
> >> significantly. Some people have been looking at transaction volume
> >> charts over time and all they can see is an exponential curve which
> >> they think will go on forever, yet nothing goes up forever and it will
> >> go through significant trend cycles (like everything does). If you
> >> dont want to hurt the fee market, the blocksize has to be elastic and
> >> allow contraction as well as expansion.
> >
> >
> > _______________________________________________
> > bitcoin-dev mailing list
> > bitcoin-dev at lists.linuxfoundation.org
> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> >
>



-- 
-------------------------------------------
*Dr Washington Y. Sanchez <http://onename.com/drwasho>*
Co-founder, OB1 <http://ob1.io>
Core developer of OpenBazaar <https://openbazaar.org>
@drwasho <https://twitter.com/drwasho>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150909/1d1a8aa2/attachment.html>

From adam at cypherspace.org  Tue Sep  8 14:18:03 2015
From: adam at cypherspace.org (Adam Back)
Date: Tue, 8 Sep 2015 15:18:03 +0100
Subject: [bitcoin-dev] Dynamic limit to the block size - BIP draft
	discussion
In-Reply-To: <CAG0bcYzBCsg9xNLGmu4S=PEPjtbd2iBLH52ryswbkRM23OqquA@mail.gmail.com>
References: <CAG0bcYzzg4yeQvd27PZu5Fqv1ULS3cKeQHaRZ2zPcM3OASw1cg@mail.gmail.com>
	<CADJgMztJx1cBFhNOwMgBHJGPmBNPqsTdQbCCjFBmDBSBfTMMUg@mail.gmail.com>
	<CAAre=yRawFU_WMdE+ReemscYD33ez1PF6VhU2FmWo2fAEcw_Xw@mail.gmail.com>
	<CALqxMTERUFEFgJ4quz2dWLRw9fD3DkBp-6RO4cuvdBGV2MSyhw@mail.gmail.com>
	<CAG0bcYzBCsg9xNLGmu4S=PEPjtbd2iBLH52ryswbkRM23OqquA@mail.gmail.com>
Message-ID: <CALqxMTFQhFusR5jkEMvRdxDVLZPzWSW5hUHpXoON-K-+xJjpNA@mail.gmail.com>

> A selfish mining attack would have to be performed for at least 2000 blocks over a period of 4 weeks in order to achieve a meager 10% increase in the block size.

You seem to be analysing a different attack - I mean that if someone
has enough hashrate to do a selfish mining attack, then setting up a
system that has no means to reduce block-size risks that at a point
where there is excess block-size they can use that free transaction
space to amplify selfish mining instead of collecting transaction
fees.

Adam

From washington.sanchez at gmail.com  Tue Sep  8 15:10:54 2015
From: washington.sanchez at gmail.com (Washington Sanchez)
Date: Wed, 9 Sep 2015 01:10:54 +1000
Subject: [bitcoin-dev] Dynamic limit to the block size - BIP draft
	discussion
In-Reply-To: <CALqxMTFQhFusR5jkEMvRdxDVLZPzWSW5hUHpXoON-K-+xJjpNA@mail.gmail.com>
References: <CAG0bcYzzg4yeQvd27PZu5Fqv1ULS3cKeQHaRZ2zPcM3OASw1cg@mail.gmail.com>
	<CADJgMztJx1cBFhNOwMgBHJGPmBNPqsTdQbCCjFBmDBSBfTMMUg@mail.gmail.com>
	<CAAre=yRawFU_WMdE+ReemscYD33ez1PF6VhU2FmWo2fAEcw_Xw@mail.gmail.com>
	<CALqxMTERUFEFgJ4quz2dWLRw9fD3DkBp-6RO4cuvdBGV2MSyhw@mail.gmail.com>
	<CAG0bcYzBCsg9xNLGmu4S=PEPjtbd2iBLH52ryswbkRM23OqquA@mail.gmail.com>
	<CALqxMTFQhFusR5jkEMvRdxDVLZPzWSW5hUHpXoON-K-+xJjpNA@mail.gmail.com>
Message-ID: <CAG0bcYw=k_z82buUQ_kApmPgSenNy6FEsdXotLaS4Gn-kZbrKg@mail.gmail.com>

1) It's not really clear to me how that would work, but assuming it does
then it will go into a basket of attacks that are possible but unlikely due
to the economic disincentives to do so.

2) That said, is the Achilles heal of this proposal the lack of a mechanism
to lower the block size?

3) Let me put it another way, I've read that both Gavin and yourself are
favorable to a dynamic limit on the block size. In your view, what is
missing from this proposal, or what variables should be adjusted, to get
the rules to a place where you and other Core developers would seriously
consider it?

On Wed, Sep 9, 2015 at 12:18 AM, Adam Back <adam at cypherspace.org> wrote:

> > A selfish mining attack would have to be performed for at least 2000
> blocks over a period of 4 weeks in order to achieve a meager 10% increase
> in the block size.
>
> You seem to be analysing a different attack - I mean that if someone
> has enough hashrate to do a selfish mining attack, then setting up a
> system that has no means to reduce block-size risks that at a point
> where there is excess block-size they can use that free transaction
> space to amplify selfish mining instead of collecting transaction
> fees.
>
> Adam
>



-- 
-------------------------------------------
*Dr Washington Y. Sanchez <http://onename.com/drwasho>*
Co-founder, OB1 <http://ob1.io>
Core developer of OpenBazaar <https://openbazaar.org>
@drwasho <https://twitter.com/drwasho>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150909/e308be60/attachment.html>

From andrew.johnson83 at gmail.com  Tue Sep  8 16:46:33 2015
From: andrew.johnson83 at gmail.com (Andrew Johnson)
Date: Tue, 8 Sep 2015 11:46:33 -0500
Subject: [bitcoin-dev] Dynamic limit to the block size - BIP draft
	discussion
In-Reply-To: <CAG0bcYw=k_z82buUQ_kApmPgSenNy6FEsdXotLaS4Gn-kZbrKg@mail.gmail.com>
References: <CAG0bcYzzg4yeQvd27PZu5Fqv1ULS3cKeQHaRZ2zPcM3OASw1cg@mail.gmail.com>
	<CADJgMztJx1cBFhNOwMgBHJGPmBNPqsTdQbCCjFBmDBSBfTMMUg@mail.gmail.com>
	<CAAre=yRawFU_WMdE+ReemscYD33ez1PF6VhU2FmWo2fAEcw_Xw@mail.gmail.com>
	<CALqxMTERUFEFgJ4quz2dWLRw9fD3DkBp-6RO4cuvdBGV2MSyhw@mail.gmail.com>
	<CAG0bcYzBCsg9xNLGmu4S=PEPjtbd2iBLH52ryswbkRM23OqquA@mail.gmail.com>
	<CALqxMTFQhFusR5jkEMvRdxDVLZPzWSW5hUHpXoON-K-+xJjpNA@mail.gmail.com>
	<CAG0bcYw=k_z82buUQ_kApmPgSenNy6FEsdXotLaS4Gn-kZbrKg@mail.gmail.com>
Message-ID: <CAAy62_JeG=_8sOgcgZNZSPHJYo8WxOkOHHkxCv6ZKjeRkbxujw@mail.gmail.com>

I rather like this idea, I like that we're taking block scaling back to a
technical method rather than political.  BIP100 is frightening to me as it
gives a disproportionate amount of power to the miners, who can already
control their own blocksize with a soft cap.  It also seems silly to worry
about a selfish mining attack if you're going to institute a miner vote
that an entity with that much hashrate can noticeably influence anyway.

101 is better but is still attempting to make a guess as to technological
progression quite far into the future.  And then when we do finally hit 8GB
we will need yet another hard fork if we need to go bigger(or we may need
to do it earlier if the increase schedule isn't aggressive enough).  And
who knows how large the ecosystem may be at that time, a hard fork may be
an undertaking of truly epic proportions due to the sheer number of devices
and embedded firmware that operates on the block chain.

I've done no math on this(posting from mobile) but something similar to
this would be reasonable, I think.  Unbounded growth, as Adam points out,
is also undesirable.

Every 4032 blocks (~4 weeks), the maximum block size will be decreased by
10% *IF* a minimum of 2500 blocks has a size <= 40% of the maximum block
size at that time.

This requires a larger threshold to be crossed to move downwards, that way
we hopefully aren't oscillating back and forth constantly.  I'll try to do
some blockchain research sometime this week and either back my plucked from
the air numbers or change them.

Andrew Johnson
On Sep 8, 2015 10:11 AM, "Washington Sanchez via bitcoin-dev" <
bitcoin-dev at lists.linuxfoundation.org> wrote:

>
> 1) It's not really clear to me how that would work, but assuming it does
> then it will go into a basket of attacks that are possible but unlikely due
> to the economic disincentives to do so.
>
> 2) That said, is the Achilles heal of this proposal the lack of a
> mechanism to lower the block size?
>
> 3) Let me put it another way, I've read that both Gavin and yourself are
> favorable to a dynamic limit on the block size. In your view, what is
> missing from this proposal, or what variables should be adjusted, to get
> the rules to a place where you and other Core developers would seriously
> consider it?
>
> On Wed, Sep 9, 2015 at 12:18 AM, Adam Back <adam at cypherspace.org> wrote:
>
>> > A selfish mining attack would have to be performed for at least 2000
>> blocks over a period of 4 weeks in order to achieve a meager 10% increase
>> in the block size.
>>
>> You seem to be analysing a different attack - I mean that if someone
>> has enough hashrate to do a selfish mining attack, then setting up a
>> system that has no means to reduce block-size risks that at a point
>> where there is excess block-size they can use that free transaction
>> space to amplify selfish mining instead of collecting transaction
>> fees.
>>
>> Adam
>>
>
>
>
> --
> -------------------------------------------
> *Dr Washington Y. Sanchez <http://onename.com/drwasho>*
> Co-founder, OB1 <http://ob1.io>
> Core developer of OpenBazaar <https://openbazaar.org>
> @drwasho <https://twitter.com/drwasho>
>
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150908/e4e2989e/attachment-0001.html>

From gavinandresen at gmail.com  Tue Sep  8 17:04:16 2015
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Tue, 8 Sep 2015 13:04:16 -0400
Subject: [bitcoin-dev] Dynamic limit to the block size - BIP draft
	discussion
In-Reply-To: <CAG0bcYw=k_z82buUQ_kApmPgSenNy6FEsdXotLaS4Gn-kZbrKg@mail.gmail.com>
References: <CAG0bcYzzg4yeQvd27PZu5Fqv1ULS3cKeQHaRZ2zPcM3OASw1cg@mail.gmail.com>
	<CADJgMztJx1cBFhNOwMgBHJGPmBNPqsTdQbCCjFBmDBSBfTMMUg@mail.gmail.com>
	<CAAre=yRawFU_WMdE+ReemscYD33ez1PF6VhU2FmWo2fAEcw_Xw@mail.gmail.com>
	<CALqxMTERUFEFgJ4quz2dWLRw9fD3DkBp-6RO4cuvdBGV2MSyhw@mail.gmail.com>
	<CAG0bcYzBCsg9xNLGmu4S=PEPjtbd2iBLH52ryswbkRM23OqquA@mail.gmail.com>
	<CALqxMTFQhFusR5jkEMvRdxDVLZPzWSW5hUHpXoON-K-+xJjpNA@mail.gmail.com>
	<CAG0bcYw=k_z82buUQ_kApmPgSenNy6FEsdXotLaS4Gn-kZbrKg@mail.gmail.com>
Message-ID: <CABsx9T1a5kbtw=SQrdXyp32LF7gA9LMShPMYEefP4arb6SQcHw@mail.gmail.com>

>
> 3) Let me put it another way, I've read that both Gavin and yourself are
> favorable to a dynamic limit on the block size. In your view, what is
> missing from this proposal, or what variables should be adjusted, to get
> the rules to a place where you and other Core developers would seriously
> consider it?
>

I'm not clear on what problem(s) you're trying to solve.

If you want blocks to be at least 60% full, then just specify a simple rule
like "maximum block size is 1.0/0.6 = 1.666 times the average block size
over the last N blocks (applied at every block or every 2016 blocks or
whatever, details don't really matter)".

If you want an upper limit on growth, then just implement a simple rule
like "Absolute maximum block size is 1 megabyte in 2016, 3.45 megabytes in
2017, and increases by a maximum of 3.45 times every year."

If you want me to take your proposal seriously, you need to justify why 60%
full is a good answer (and why we need a centralized decision on how full
blocks "should" be), and why 3.45 times-per-year is a good answer for
maximum growth (and, again, why we need a centralized decision on that).

-- 
--
Gavin Andresen
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150908/a47462eb/attachment.html>

From danny.thorpe at gmail.com  Tue Sep  8 20:28:41 2015
From: danny.thorpe at gmail.com (Danny Thorpe)
Date: Tue, 8 Sep 2015 13:28:41 -0700
Subject: [bitcoin-dev] Proposal to add the bitcoin symbol to Unicode
In-Reply-To: <CALBHtZzHeDy-6Ar+DWUb8hFG4kJcg9+x4Y=TUEiQr3-rbgannw@mail.gmail.com>
References: <CALBHtZzHeDy-6Ar+DWUb8hFG4kJcg9+x4Y=TUEiQr3-rbgannw@mail.gmail.com>
Message-ID: <CAJN5wHV=o0_tdsKg1DwhwKcD4_uNffETYDb+Rzuy66hdoFybtw@mail.gmail.com>

What of this prior effort, proposing B-with-horizontal-bar (?)?
http://bitcoinsymbol.org/

They argue that B-with-2-vertical-bars is easily confused with the Thai
Bhat currency symbol, which is a B with a single vertical bar.

I'm not terribly fond of the B-with-horizontal-bar as a symbol, but it does
have the advantage that it is already in the Unicode glyph set, already
available on most Unicode enabled devices.

-Danny

On Sat, Sep 5, 2015 at 7:11 AM, Ken Shirriff via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> Use of the bitcoin symbol in text is inconvenient, because the bitcoin
> symbol isn't in the Unicode standard. To fix this, I've written a proposal
> to have the common B-with-vertical-bars bitcoin symbol added to Unicode.
> I've successfully proposed a new character for Unicode before, so I'm
> familiar with the process and think this has a good chance of succeeding.
> The proposal is at http://righto.com/bitcoin-unicode.pdf
>
> I received a suggestion to run this proposal by the bitcoin-dev group, so
> I hope this email is appropriate here. Endorsement by Bitcoin developers
> will help the Unicode Committee realize the importance of adding this
> symbol, so please let me know if you support this proposal.
>
> Thanks,
> Ken
>
>
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150908/1b167716/attachment.html>

From ken.shirriff at gmail.com  Tue Sep  8 21:05:07 2015
From: ken.shirriff at gmail.com (Ken Shirriff)
Date: Tue, 8 Sep 2015 14:05:07 -0700
Subject: [bitcoin-dev] Proposal to add the bitcoin symbol to Unicode
In-Reply-To: <CAJN5wHV=o0_tdsKg1DwhwKcD4_uNffETYDb+Rzuy66hdoFybtw@mail.gmail.com>
References: <CALBHtZzHeDy-6Ar+DWUb8hFG4kJcg9+x4Y=TUEiQr3-rbgannw@mail.gmail.com>
	<CAJN5wHV=o0_tdsKg1DwhwKcD4_uNffETYDb+Rzuy66hdoFybtw@mail.gmail.com>
Message-ID: <CALBHtZzjJrhg-uEBBRdVapEpyQWdoRUt+dj1sHxD+VrA2ESs4Q@mail.gmail.com>

On Tue, Sep 8, 2015 at 1:28 PM, Danny Thorpe <danny.thorpe at gmail.com> wrote:

> What of this prior effort, proposing B-with-horizontal-bar (?)?
> http://bitcoinsymbol.org/
>
> They argue that B-with-2-vertical-bars is easily confused with the Thai
> Bhat currency symbol, which is a B with a single vertical bar.
>

Actually that page argues that using the Thai Bhat currency symbol *for*
Bitcoin causes confusion. From the page you linked to:

The Thai Baht (? <https://en.wikipedia.org/wiki/Thai_baht>) is sometimes
used to represent Bitcoin, but this certainly raises a problem of
differenciation between the Thai Baht and Bitcoin.

Their main motivation for using the horizontal-bar ? (which they admit is a
hack) is they consider adding a character to Unicode to be a "really long
and complicated process". My view is that adding the bitcoin sign to
Unicode avoids confusion with the Thai Baht, avoids hacks such as ?, and
lets everyone use the standard symbol. Hopefully it won't be a really long
and complicated process...

Ken


> I'm not terribly fond of the B-with-horizontal-bar as a symbol, but it
> does have the advantage that it is already in the Unicode glyph set,
> already available on most Unicode enabled devices.
>
> -Danny
>
> On Sat, Sep 5, 2015 at 7:11 AM, Ken Shirriff via bitcoin-dev <
> bitcoin-dev at lists.linuxfoundation.org> wrote:
>
>> Use of the bitcoin symbol in text is inconvenient, because the bitcoin
>> symbol isn't in the Unicode standard. To fix this, I've written a proposal
>> to have the common B-with-vertical-bars bitcoin symbol added to Unicode.
>> I've successfully proposed a new character for Unicode before, so I'm
>> familiar with the process and think this has a good chance of succeeding.
>> The proposal is at http://righto.com/bitcoin-unicode.pdf
>>
>> I received a suggestion to run this proposal by the bitcoin-dev group, so
>> I hope this email is appropriate here. Endorsement by Bitcoin developers
>> will help the Unicode Committee realize the importance of adding this
>> symbol, so please let me know if you support this proposal.
>>
>> Thanks,
>> Ken
>>
>>
>>
>> _______________________________________________
>> bitcoin-dev mailing list
>> bitcoin-dev at lists.linuxfoundation.org
>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150908/22f61cf9/attachment.html>

From washington.sanchez at gmail.com  Tue Sep  8 23:11:49 2015
From: washington.sanchez at gmail.com (Washington Sanchez)
Date: Wed, 9 Sep 2015 09:11:49 +1000
Subject: [bitcoin-dev] Dynamic limit to the block size - BIP draft
	discussion
In-Reply-To: <CABsx9T1a5kbtw=SQrdXyp32LF7gA9LMShPMYEefP4arb6SQcHw@mail.gmail.com>
References: <CAG0bcYzzg4yeQvd27PZu5Fqv1ULS3cKeQHaRZ2zPcM3OASw1cg@mail.gmail.com>
	<CADJgMztJx1cBFhNOwMgBHJGPmBNPqsTdQbCCjFBmDBSBfTMMUg@mail.gmail.com>
	<CAAre=yRawFU_WMdE+ReemscYD33ez1PF6VhU2FmWo2fAEcw_Xw@mail.gmail.com>
	<CALqxMTERUFEFgJ4quz2dWLRw9fD3DkBp-6RO4cuvdBGV2MSyhw@mail.gmail.com>
	<CAG0bcYzBCsg9xNLGmu4S=PEPjtbd2iBLH52ryswbkRM23OqquA@mail.gmail.com>
	<CALqxMTFQhFusR5jkEMvRdxDVLZPzWSW5hUHpXoON-K-+xJjpNA@mail.gmail.com>
	<CAG0bcYw=k_z82buUQ_kApmPgSenNy6FEsdXotLaS4Gn-kZbrKg@mail.gmail.com>
	<CABsx9T1a5kbtw=SQrdXyp32LF7gA9LMShPMYEefP4arb6SQcHw@mail.gmail.com>
Message-ID: <CAG0bcYyQT-B6xoL3DpLQgvZfkqrmbajscFgywPhUsPF71XwVBA@mail.gmail.com>

>
> If you want me to take your proposal seriously, you need to justify why
> 60% full is a good answer
>

Sure thing Gavin.

If you want blocks to be at least 60% full...


First off, I do not want blocks to be at least 60% full, so let me try and
explain where I got this number from

   - The idea of this parameter is set a *triggering level* for an increase
   in the block size
   - The triggering level is the point where a reasonable medium-term trend
   can be observed. That trend is an increase in the transaction volume that,
   left unchecked, would fill up blocks.
   - Determining the appropriate triggering level is difficult, and it
   consists of 3 parameters:
      1. Evaluation period
         - *Period of time where you check to see if the conditions to
         trigger a raise the block size are true *
         - Ideally you want an increase to occur in response to a real
         increase of transaction volume from the market, and not some
short term
         spam attack.
         - Too short, spam attacks can be used to trigger multiple
         increases (at least early on). Too long, the block size
doesn't increase
         fast enough to transaction demand.
         - I selected a period of *4032 blocks*
         2. Capacity
         - *The capacity level that a majority of blocks would demonstrate
         in order to trigger a block size increase*
         - The capacity level, in tandem with the evaluation period and
         threshold level, needs to reflect an underlying trend towards filling
         blocks.
         - If the capacity level is too low, block size increases can be
         triggered prematurely. If the capacity level is too high, the
network could
         be unnecessarily jammed with the transactions before an
increase can kick
         in.
         - I selected a capacity level of *60%*.
      3. Threshold
         - *The number of blocks during the evaluation period that are
         above the capacity level in order to trigger a block size increase.*
         - If blocks are getting larger than 60% over a 4032 block period,
         how many reflect a market-driven increase transaction volume?
         - If the threshold is too low, increases could be triggered
         artificially or prematurely. If the threshold is too high,
the easier it
         gets for 1-2 mining pools to prevent any increases in the
block size or the
         block size doesn't respond fast enough to a real increase in
transaction
         volume.
         - I selected a threshold of *2000 blocks or ~50%*.
      - So in my proposal, if 2000+ nodes have a block size >= 60%, this is
   an indication that real transaction volume has increased and we're
   approaching a time where block could be filled to capacity without an
   increase. The block size increase, 10%, is triggered.

A centralized decision, presumably by Satoshi, was made on the parameters
that alter the target difficulty, rather than attempt to forecast hash
rates based on his CPU power. He allowed the system to scale to a level
where real market demand would take it. I believe the same approach should
be replicated for the block size. The trick of course is settling on the
right variables. I hope this proposal is a good way to do that.

*Some additional calculations*

Block sizes for each year are *theoretical maximums* if ALL trigger points
are activated in my proposal (unlikely, but anyway).
These calculations assume zero transactions are taken off-chain by third
party processors or the LN, and no efficiency improvements.

   - 2015
      - 1 MB/block
      - 2 tps (conservative factor, also carried on below)
      - 0.17 million tx/day
   - 2016
      - 3.45 MB/block
      - 7 tps
      - 0.6 million tx/day
   - 2017
      - 12 MB/block
      - 24 tps
      - 2 million tx/day
   - 2018
      - 41 MB/block
      - 82 tps
      - 7 million tx/day
   - 2019
      - 142 MB/block
      - 284 tps
      - 25 million tx/day
   - 2020
      - 490 MB/block
      - 980 tps
      - 85 million tx/day

By way of comparison, Alipay (payment processor for the Alibaba Group's
ecosystem) processes 30 million escrow transactions per day. This gives us
at least 4-5 years to reach the present day transaction processing capacity
of 1 corporation... in reality it will take a little longer as I doubt all
block size triggers will be activated. This also gives us at least 4-5
years to develop efficiency improvements within the protocol, develop the
LN to take many of these transactions off-chain, and network infrastructure
to be significantly improved (and anything else this ecosystem can come up
with).

(let me know if any of these calculations are off)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150909/05e85994/attachment-0001.html>

From tomh at thinlink.com  Wed Sep  9 03:27:22 2015
From: tomh at thinlink.com (Tom Harding)
Date: Tue, 8 Sep 2015 20:27:22 -0700
Subject: [bitcoin-dev] Adjusted difficulty depending on relative
	blocksize
In-Reply-To: <D727CEA8-7206-4D0A-9815-672C92F73353@me.com>
References: <09C8843E-8379-404D-8357-05BDB1F749C1@me.com>
	<CAJS_LCWRagQ40c28SGetxeHxnk8FqY3y_X0OxfqaiLbd25dSGg@mail.gmail.com>
	<A6B32C22-4006-434E-9B89-D7C99B5743A8@me.com>
	<116B26BD-D8E8-4AFD-A619-2EAC348DA5E6@me.com>
	<CALqxMTGHiQ_EBfquF8T82H6doueaH04DTmGY9wf5nVhD0kcMgg@mail.gmail.com>
	<D727CEA8-7206-4D0A-9815-672C92F73353@me.com>
Message-ID: <55EFA71A.1080102@thinlink.com>


There is another concern regarding "flexcap" that was not discussed.

A change to difficulty in response to anything BUT observed block
production rate unavoidably changes the money supply schedule, unless
you also change the reward, and in that case you've still changed the
timing even if not the average rate.


On 8/14/2015 8:14 AM, Jakob R?nnb?ck via bitcoin-dev wrote:
> Ah, there we go. I should have dug deeper into the mailing list
>
> Thanks
>
> /jakob
>
>> 14 aug 2015 kl. 17:03 skrev Adam Back <adam at cypherspace.org>:
>>
>> There is a proposal that relates to this, see the flexcap proposal by
>> Greg Maxwell & Mark Friedenbach, it was discussed on the list back in
>> May:
>>
>> http://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-May/008017.html
>>
>> and http://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-May/008038.html
>>
>> Adam
>


From washington.sanchez at gmail.com  Wed Sep  9 13:10:43 2015
From: washington.sanchez at gmail.com (Washington Sanchez)
Date: Wed, 9 Sep 2015 23:10:43 +1000
Subject: [bitcoin-dev] Dynamic limit to the block size - BIP draft
	discussion
In-Reply-To: <CAG0bcYyQT-B6xoL3DpLQgvZfkqrmbajscFgywPhUsPF71XwVBA@mail.gmail.com>
References: <CAG0bcYzzg4yeQvd27PZu5Fqv1ULS3cKeQHaRZ2zPcM3OASw1cg@mail.gmail.com>
	<CADJgMztJx1cBFhNOwMgBHJGPmBNPqsTdQbCCjFBmDBSBfTMMUg@mail.gmail.com>
	<CAAre=yRawFU_WMdE+ReemscYD33ez1PF6VhU2FmWo2fAEcw_Xw@mail.gmail.com>
	<CALqxMTERUFEFgJ4quz2dWLRw9fD3DkBp-6RO4cuvdBGV2MSyhw@mail.gmail.com>
	<CAG0bcYzBCsg9xNLGmu4S=PEPjtbd2iBLH52ryswbkRM23OqquA@mail.gmail.com>
	<CALqxMTFQhFusR5jkEMvRdxDVLZPzWSW5hUHpXoON-K-+xJjpNA@mail.gmail.com>
	<CAG0bcYw=k_z82buUQ_kApmPgSenNy6FEsdXotLaS4Gn-kZbrKg@mail.gmail.com>
	<CABsx9T1a5kbtw=SQrdXyp32LF7gA9LMShPMYEefP4arb6SQcHw@mail.gmail.com>
	<CAG0bcYyQT-B6xoL3DpLQgvZfkqrmbajscFgywPhUsPF71XwVBA@mail.gmail.com>
Message-ID: <CAG0bcYybcBADdPs6uUoZjmCcPzpjduyv6znSaTD-cJeLA78n1Q@mail.gmail.com>

Errata + clarity (in bold):
>
>
>    - So in my proposal, if 2000+ *blocks *have a size >= 60% *of the
>    current limit*, this is an indication that real transaction volume has
>    increased and we're approaching a time where block could be filled to
>    capacity without an increase. The block size increase, 10%, is triggered.
>
>
On Wed, Sep 9, 2015 at 9:11 AM, Washington Sanchez <
washington.sanchez at gmail.com> wrote:

> If you want me to take your proposal seriously, you need to justify why
>> 60% full is a good answer
>>
>
> Sure thing Gavin.
>
> If you want blocks to be at least 60% full...
>
>
> First off, I do not want blocks to be at least 60% full, so let me try and
> explain where I got this number from
>
>    - The idea of this parameter is set a *triggering level* for an
>    increase in the block size
>    - The triggering level is the point where a reasonable medium-term
>    trend can be observed. That trend is an increase in the transaction volume
>    that, left unchecked, would fill up blocks.
>    - Determining the appropriate triggering level is difficult, and it
>    consists of 3 parameters:
>       1. Evaluation period
>          - *Period of time where you check to see if the conditions to
>          trigger a raise the block size are true *
>          - Ideally you want an increase to occur in response to a real
>          increase of transaction volume from the market, and not some short term
>          spam attack.
>          - Too short, spam attacks can be used to trigger multiple
>          increases (at least early on). Too long, the block size doesn't increase
>          fast enough to transaction demand.
>          - I selected a period of *4032 blocks*
>          2. Capacity
>          - *The capacity level that a majority of blocks
>          would demonstrate in order to trigger a block size increase*
>          - The capacity level, in tandem with the evaluation period and
>          threshold level, needs to reflect an underlying trend towards filling
>          blocks.
>          - If the capacity level is too low, block size increases can be
>          triggered prematurely. If the capacity level is too high, the network could
>          be unnecessarily jammed with the transactions before an increase can kick
>          in.
>          - I selected a capacity level of *60%*.
>       3. Threshold
>          - *The number of blocks during the evaluation period that are
>          above the capacity level in order to trigger a block size increase.*
>          - If blocks are getting larger than 60% over a 4032 block
>          period, how many reflect a market-driven increase transaction volume?
>          - If the threshold is too low, increases could be triggered
>          artificially or prematurely. If the threshold is too high, the easier it
>          gets for 1-2 mining pools to prevent any increases in the block size or the
>          block size doesn't respond fast enough to a real increase in transaction
>          volume.
>          - I selected a threshold of *2000 blocks or ~50%*.
>       - So in my proposal, if 2000+ nodes have a block size >= 60%, this
>    is an indication that real transaction volume has increased and we're
>    approaching a time where block could be filled to capacity without an
>    increase. The block size increase, 10%, is triggered.
>
> A centralized decision, presumably by Satoshi, was made on the parameters
> that alter the target difficulty, rather than attempt to forecast hash
> rates based on his CPU power. He allowed the system to scale to a level
> where real market demand would take it. I believe the same approach should
> be replicated for the block size. The trick of course is settling on the
> right variables. I hope this proposal is a good way to do that.
>
> *Some additional calculations*
>
> Block sizes for each year are *theoretical maximums* if ALL trigger
> points are activated in my proposal (unlikely, but anyway).
> These calculations assume zero transactions are taken off-chain by third
> party processors or the LN, and no efficiency improvements.
>
>    - 2015
>       - 1 MB/block
>       - 2 tps (conservative factor, also carried on below)
>       - 0.17 million tx/day
>    - 2016
>       - 3.45 MB/block
>       - 7 tps
>       - 0.6 million tx/day
>    - 2017
>       - 12 MB/block
>       - 24 tps
>       - 2 million tx/day
>    - 2018
>       - 41 MB/block
>       - 82 tps
>       - 7 million tx/day
>    - 2019
>       - 142 MB/block
>       - 284 tps
>       - 25 million tx/day
>    - 2020
>       - 490 MB/block
>       - 980 tps
>       - 85 million tx/day
>
> By way of comparison, Alipay (payment processor for the Alibaba Group's
> ecosystem) processes 30 million escrow transactions per day. This gives us
> at least 4-5 years to reach the present day transaction processing capacity
> of 1 corporation... in reality it will take a little longer as I doubt all
> block size triggers will be activated. This also gives us at least 4-5
> years to develop efficiency improvements within the protocol, develop the
> LN to take many of these transactions off-chain, and network infrastructure
> to be significantly improved (and anything else this ecosystem can come up
> with).
>
> (let me know if any of these calculations are off)
>
>


-- 
-------------------------------------------
*Dr Washington Y. Sanchez <http://onename.com/drwasho>*
Co-founder, OB1 <http://ob1.io>
Core developer of OpenBazaar <https://openbazaar.org>
@drwasho <https://twitter.com/drwasho>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150909/fcc85792/attachment.html>

From marcel at jamin.net  Wed Sep  9 07:55:44 2015
From: marcel at jamin.net (Marcel Jamin)
Date: Wed, 9 Sep 2015 09:55:44 +0200
Subject: [bitcoin-dev] Yet another blocklimit proposal / compromise
Message-ID: <CAAUq485B5AoTpRBzf0=KFm-k58Zoz+ns-Y7BXc3JwG87VsDo+g@mail.gmail.com>

I propose to:

a) assess what blocklimit is currently technically possible without driving
up costs of running a node up too much. Most systems currently running a
fullnode probably have some capacity left.

b) set the determined blocklimit at the next reward halving

c) then double the blocksize limit at every halving thereafter up to a
hardlimit of 8GB.

Reasoning:

Doubling every four years will stay within expected technological growth.
Cisco's VNI forecast predicts a 2.1-fold increase in global average fixed
broadand speed from 2014 to 2019. Nielsen's law, which looks more at the
power user (probably more fitting) is even more optimistic with +50% per
year.

This proposal can be considered a compromise between Pieter's and Gavin's
proposals. While the growth rate is more or less what Pieter proposes, it
includes an initial increase to kickstart the growth. If we start with 8MB,
which seems to be popular among miners, we would reach 8GB in 2056 (as
opposed to 2036 in BIP101). The start date (ca. mid 2016) is also a
compromise between Pieter's 01/2017 and Gavin's 01/2016.

It's simple, predictable and IMHO elegant -- block subsidy halves,
blocksize limit doubles.

It might make sense to update the limit more often in between, though.
Either completely linearly based on a block's timestamp like in BIP101, or
for example for each difficulty period.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150909/4e5271e9/attachment.html>

From jtimon at jtimon.cc  Wed Sep  9 18:51:37 2015
From: jtimon at jtimon.cc (=?UTF-8?B?Sm9yZ2UgVGltw7Nu?=)
Date: Wed, 9 Sep 2015 20:51:37 +0200
Subject: [bitcoin-dev] Yet another blocklimit proposal / compromise
In-Reply-To: <CAAUq485B5AoTpRBzf0=KFm-k58Zoz+ns-Y7BXc3JwG87VsDo+g@mail.gmail.com>
References: <CAAUq485B5AoTpRBzf0=KFm-k58Zoz+ns-Y7BXc3JwG87VsDo+g@mail.gmail.com>
Message-ID: <CABm2gDrsnVEkcq2CPwK4fcJpwHj6ouTSRnk4U2bMBOPvjRuD_w@mail.gmail.com>

On Sep 9, 2015 8:36 PM, "Marcel Jamin via bitcoin-dev" <
bitcoin-dev at lists.linuxfoundation.org> wrote:
>
> I propose to:
>
> a) assess what blocklimit is currently technically possible without
driving up costs of running a node up too much. Most systems currently
running a fullnode probably have some capacity left.

What about the risk of further increasing mining centralization?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150909/10fb939b/attachment-0001.html>

From wtogami at gmail.com  Wed Sep  9 18:59:19 2015
From: wtogami at gmail.com (Warren Togami Jr.)
Date: Wed, 9 Sep 2015 11:59:19 -0700
Subject: [bitcoin-dev] Adjusted difficulty depending on relative
	blocksize
In-Reply-To: <55EFA71A.1080102@thinlink.com>
References: <09C8843E-8379-404D-8357-05BDB1F749C1@me.com>
	<CAJS_LCWRagQ40c28SGetxeHxnk8FqY3y_X0OxfqaiLbd25dSGg@mail.gmail.com>
	<A6B32C22-4006-434E-9B89-D7C99B5743A8@me.com>
	<116B26BD-D8E8-4AFD-A619-2EAC348DA5E6@me.com>
	<CALqxMTGHiQ_EBfquF8T82H6doueaH04DTmGY9wf5nVhD0kcMgg@mail.gmail.com>
	<D727CEA8-7206-4D0A-9815-672C92F73353@me.com>
	<55EFA71A.1080102@thinlink.com>
Message-ID: <CAEz79PrV0OOZ+V-YLP4bTyfaHhbMqrP6TAyu-Lt27_guA+wMzg@mail.gmail.com>

Does it really change the schedule when the next difficulty retarget
readjusts to an average of 10 minutes again?

On Tue, Sep 8, 2015 at 8:27 PM, Tom Harding via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

>
> There is another concern regarding "flexcap" that was not discussed.
>
> A change to difficulty in response to anything BUT observed block
> production rate unavoidably changes the money supply schedule, unless
> you also change the reward, and in that case you've still changed the
> timing even if not the average rate.
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150909/1641325f/attachment.html>

From marcel at jamin.net  Wed Sep  9 19:00:55 2015
From: marcel at jamin.net (Marcel Jamin)
Date: Wed, 9 Sep 2015 21:00:55 +0200
Subject: [bitcoin-dev] Yet another blocklimit proposal / compromise
In-Reply-To: <CABm2gDrsnVEkcq2CPwK4fcJpwHj6ouTSRnk4U2bMBOPvjRuD_w@mail.gmail.com>
References: <CAAUq485B5AoTpRBzf0=KFm-k58Zoz+ns-Y7BXc3JwG87VsDo+g@mail.gmail.com>
	<CABm2gDrsnVEkcq2CPwK4fcJpwHj6ouTSRnk4U2bMBOPvjRuD_w@mail.gmail.com>
Message-ID: <CAAUq486GxLw25TW2SV6d8vCCdhY5SEjfdAPCOhV6ta+hoyJY5Q@mail.gmail.com>

I think the overlap of people who want to run a serious mining operation
and people who are unable to afford a slightly above average internet
connection is infinitesimally small.

2015-09-09 20:51 GMT+02:00 Jorge Tim?n <jtimon at jtimon.cc>:

>
> On Sep 9, 2015 8:36 PM, "Marcel Jamin via bitcoin-dev" <
> bitcoin-dev at lists.linuxfoundation.org> wrote:
> >
> > I propose to:
> >
> > a) assess what blocklimit is currently technically possible without
> driving up costs of running a node up too much. Most systems currently
> running a fullnode probably have some capacity left.
>
> What about the risk of further increasing mining centralization?
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150909/67a529ec/attachment.html>

From tomh at thinlink.com  Wed Sep  9 19:53:10 2015
From: tomh at thinlink.com (Tom Harding)
Date: Wed, 9 Sep 2015 12:53:10 -0700
Subject: [bitcoin-dev] Adjusted difficulty depending on relative
	blocksize
In-Reply-To: <CAEz79PrV0OOZ+V-YLP4bTyfaHhbMqrP6TAyu-Lt27_guA+wMzg@mail.gmail.com>
References: <09C8843E-8379-404D-8357-05BDB1F749C1@me.com>
	<CAJS_LCWRagQ40c28SGetxeHxnk8FqY3y_X0OxfqaiLbd25dSGg@mail.gmail.com>
	<A6B32C22-4006-434E-9B89-D7C99B5743A8@me.com>
	<116B26BD-D8E8-4AFD-A619-2EAC348DA5E6@me.com>
	<CALqxMTGHiQ_EBfquF8T82H6doueaH04DTmGY9wf5nVhD0kcMgg@mail.gmail.com>
	<D727CEA8-7206-4D0A-9815-672C92F73353@me.com>
	<55EFA71A.1080102@thinlink.com>
	<CAEz79PrV0OOZ+V-YLP4bTyfaHhbMqrP6TAyu-Lt27_guA+wMzg@mail.gmail.com>
Message-ID: <55F08E26.9000200@thinlink.com>


Well let's see.  All else being equal, if everybody uses difficulty to 
buy big blocks during retarget interval 0, blocks and therefore money 
issuance is slower during that interval.  Then, the retargeting causes 
it to be faster during interval 1.  Subsidy got shifted from the 
calendar period corresponding to interval 0, to interval 1.

If you change the reward, you can lower the time-frame of the effect to 
the order of a single block interval, but there is still an effect.

These schemes do not avoid the need for a hard cap, and there are new 
rules for the size of the allowed adjustment, in addition to the main 
rule relating difficulty to block size.  So it seems they generally have 
more complexity than the other blocksize schemes being considered.


On 9/9/2015 11:59 AM, Warren Togami Jr. via bitcoin-dev wrote:
> Does it really change the schedule when the next difficulty retarget 
> readjusts to an average of 10 minutes again?
>
> On Tue, Sep 8, 2015 at 8:27 PM, Tom Harding via bitcoin-dev 
> <bitcoin-dev at lists.linuxfoundation.org 
> <mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:
>
>
>     There is another concern regarding "flexcap" that was not discussed.
>
>     A change to difficulty in response to anything BUT observed block
>     production rate unavoidably changes the money supply schedule, unless
>     you also change the reward, and in that case you've still changed the
>     timing even if not the average rate.
>
>
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150909/6df72c5a/attachment.html>

From theandychase at gmail.com  Thu Sep 10 01:21:41 2015
From: theandychase at gmail.com (Andy Chase)
Date: Wed, 9 Sep 2015 18:21:41 -0700
Subject: [bitcoin-dev] [BIP/Draft] BIP Acceptance Process
In-Reply-To: <CADJgMzuRy_Fbv2UaJ4EZzh8DHhYYixu=k6_Z=sKtNJ9SsLTdyQ@mail.gmail.com>
References: <64B72DF6-BE37-4624-ADAA-CE28C14A4227@gmail.com>
	<CABaSBaw7hM2qmuR6Z6USy5=V9NGeCPKmHHuVOH=vexDk7kY8OA@mail.gmail.com>
	<CAAxp-m_vo5vJEemR_hRX3hNcUPveA6EHn-ZFMJo8ke59E6BrKw@mail.gmail.com>
	<CADJgMzvanj41Dfa4kQsq5SVvt-Zeee2SOfD3Uws-FpBQsyZsqg@mail.gmail.com>
	<CAAxp-m_EmMbVBqQK9ijoe+n0dAs726TaBX5m1Wgzsv-m1KHdfQ@mail.gmail.com>
	<CADJgMzuRy_Fbv2UaJ4EZzh8DHhYYixu=k6_Z=sKtNJ9SsLTdyQ@mail.gmail.com>
Message-ID: <CAAxp-m9Umz4kQQL64UCYGY8Z1PSeM0jpMCa-R064OCMqNJ1nKA@mail.gmail.com>

Thanks for your response BTC Drak, I will attempt to summarize your
points and respond to them:

* Some BIPs are not consensus critical -- True, see my response to Luke
* BIPs do not imply usage -- This I covered in my paper.
* Acceptance can be defined by actual use -- That's one way of doing it

> Getting back to your specific proposal. It seems to focus more on
> getting BIPs accepted in the sense of published

Wildly incorrect. My BIP had nothing to do with getting published. The
first words you can read in my proposal are as follows:

> The current process for accepting a BIP is not clearly defined. While BIP-0001 defines the process for writing and submitting a Bitcoin Improvement Proposal to the community it does not specify the precise method for which BIPs are considered accepted or rejected. This proposal sets up a method for determining BIP acceptance.

* but the proposal is "complete" when the proposer is happy with the final text.

This would be a cool inclusion. That is the intent of my "Submit for
comments" process.

---

Overall your post seemed to miss the point of my proposal, but that's
likely my fault for poor wording. I'm trying to develop a process of
coming to "consensus" i.e. gathering feedback and reducing opinions
down to a yes/no should this BIP happen or should we find a better
solution.

Importantly, it's not client specific. It's just a way of saying "hey
everyone, here's a problem and solution that a lot of people agree on"
or "hey everyone, here's a problem and solution that has a few
problems with it"

It's true that even if a "BIP" is "accepted" by my proposal it still
may not actually happen (this is mentioned in my proposal), and I
believe that's healthy. We can't force a change on anyone nor should
we.

---

Since so many people are missing the actual problem I'm solving,
here's another way of wording it: A BIP is proposed and goes through
the process. A PR is submitted that matches the BIP perfectly, and is
submitted and vetted. Should wladimir merge it?

My process isn't perfect solution that would make it so we could
replace wladimir with a wladBot. But it's a tool we can use for
gathering meaningful information to help guide that decision. Waiting
on all objections to be handled works okay so far but won't work
forever.


On Mon, Sep 7, 2015 at 12:37 PM, Btc Drak <btcdrak at gmail.com> wrote:
>
> Sorry not to reply earlier. I have a rather long post. I've split it
> into two sections, one explaining the background and secondly talking
> very specifically about your proposal and possible areas to look at.
>
> I think there's a key misunderstanding about BIPs and "who decides
> what in Bitcoin". A BIP usually defines some problem and a solutions
> or helps communicate proposals to the technical community. They are
> sort of mini white papers on specific topics often with reference
> implementations attached. They may be consensus critical, or not. The
> process for getting a BIP published is fairly loose in that it really
> just requires some discussion and relevance to Bitcoin regardless of
> whether the proposal is something that would be accepted or used by
> others in the ecosystem. The BIP editor is obviously going to filter
> out obvious nonesense and that shouldn't be controversial but obvious
> when you see it.
>
> You need to separate out the idea of BIPs as is, and implementations
> of BIPs in Bitcoin software (like Bitcoin Core).
>
> Take BIP64 for example. It's a proposal that adds a service to nodes
> allowing anyone to query the UTXO set on the p2p network. Bitcoin Core
> as a project has not implemented it but was instead implemented in XT
> and is utilised by Lighthouse. So the BIP specification is there in
> the BIPs repository. As far as the bitcoin ecosystem goes, only
> Bitcoin XT and lighthouse utilise it so far.
>
> BIP101 is another example, but one of a consensus critical proposal
> that would change the Bitcoin protocol (i.e. requires a hard fork). It
> was adopted by only the XT project and so far no other software. At
> the time of writing miners have chosen not to run implementations of
> BIP101.
>
> You can see the BIPs authoring and publishing process is a separate
> issue entirely to the implementation and acceptance by the Bitcoin
> ecosystem.
>
> For non-consensus critical proposals like BIP64, or maybe one relating
> to privacy (how to order transaction output for example), you could
> judge acceptance of the proposal by the number of software projects
> that implement the proposal, and the number of users it impacts. If a
> proposal is utilised by many projects, but not the few projects that
> have the majority of users, one could not claim wide acceptance.
>
> For consensus critical proposals like BIP66 (Strict DER encoding) this
> BIP was implemented in at least two bitcoin software implementations.
> Over 95% of miners adopted the proposal over a 4.5 month period. The
> BIP became de facto accepted, and in fact, once 95% lock-in was
> achieved, the BIP became Final by rights that the consensus rules for
> the Bitcoin network had changed.
>
> In the case of consensus critical proposals like that, you can only
> write proposals, implement it in software and hope they are adopted.
>
> Now where does the confusion arise? Well, Bitcoin Core is the de facto
> reference implementation by virtue of having the largest technical
> contributor base and the widest userbase of any Bitcoin full node
> implementation. This is where I believe, the community get stuck in
> their assumptions and is so obvious it may have been overlooked.
>
> Consensus rule changes to Bitcoin Core are always documented as BIPs
> so the exact details can be picked up by other software implementers
> (if they so desire). Take CHECKLOCKTIMEVERIFY a new widely anticipated
> opcode. The proposal implemented in Bitcoin Core and eventually
> merged. Peter also authored BIP65 (required because without it, his
> proposal could not be considered for Bitcoin Core).
>
> It is not that BIP65 was somehow "accepted", in fact, as it stands,
> BIP65 is still just a draft because while there is a BIP and a
> reference implementation in Bitcoin Core, the consensus changes to the
> Bitcoin protocol have not been proposed to the community (through a
> soft fork), and thus acceptance is still only a possibility (although
> acceptance is extremely likely because service providers are literally
> chomping at the bit waiting for deployment).
>
> Also I would like to note that it's only an internal rule of Bitcoin
> Core that consensus rule changes require a formal BIP. It is not a
> requirement laid down from the BIP gods. BIPs simply serve as a way to
> communicate ideas and proposals. The community at large will decide if
> a BIP becomes widely adopted or not. Of course, Bitcoin Core has a
> major influence on this because they have the largest user base. It is
> relevant to say the large userbase is not just a historical artefact
> by virtue of being the first Bitcoin implementation. Bitcoin Core is
> widely trusted by commercial users because of the high developer
> count, wide technical expertise and relative security given knowing
> that they will be supported with security and maintenance releases.
>
> YOUR PROPOSAL
>
> Getting back to your specific proposal. It seems to focus more on
> getting BIPs accepted in the sense of published and missed the wider
> picture. As I have detailed, getting published isnt a problem. Anyone
> can make a proposal, so long as it's not obviously off topic or
> nonsensical, there is no grounds to refuse to publish it.
>
> Any part of your proposal which seems to infer governance of Bitcoin
> is misplaced because it's not the place of BIPs. The Bitcoin Core
> project is not the BIPs project and their rules are their own. They
> are one implementation, and very influential one yes, but, not the one
> true implementation to rule them all.
>
> Where I do think the BIP-1 text falls down is with the workflow of
> ACCEPTED/REJECTED because it does not really define who is accepting
> and rejecting what and misses much of the reality of the process in
> the real world. Given the purpose of BIPs is a formal way to
> communicate technical proposals to the bitcoin community (i.e.
> implementers and protocol consumers) the work flow needs to be
> adjusted.
>
> Anyone can submit a proposal and the state of the proposal can be
> DRAFT or WITHDRAWN but draft here is confusing. Draft would suggest
> it's a work in progress, but the proposal is "complete" when the
> proposer is happy with the final text. Downstream implementers should
> not attempt to write code (in my opinion) until the proposal has been
> finalised by the authors. Only the author has the right to say when
> their proposal is finished.
>
> The states of Accepted / Rejected are easy for consensus critical
> changes, especially once versionbits softforking is enacted and
> proposals will have a timeout associated. Certainly for deployed
> proposals you could say the proposal is "active" or better still
> "pending approval". However "accepted" and "rejected" is difficult for
> say privacy standards because how can you gauge or measure it. As I
> said earlier, you might have a lot of small projects implementing some
> privacy standards, but if the major wallets dont, and thus the
> majority of users, how would you gauge it?
>
> Something is a standard only when it becomes a standard by virtue of
> having become a standard :)
>
> "Replaced" is an easy state, when another proposal supercedes and
> replaces an older one. Again the wording could be better here.
> "deprecated" would also be appropriate in some circumstances.
>
> I'm not making a concrete proposal, I'm just highlighting where BIP-1
> sort of falls apart because of an incongruence with the workflow
> states and what actually happens in real life.
>
> Local to the BIPs project, I do think the BIPs editor, and guidelines
> try to filter proposals by raising the bar: i.e. requiring proposal to
> be polished through peer review before they are formally published as
> draft BIPs. Though this process an author would a) get most of his
> details right first time, and b) have some relative confidence his/her
> idea was useful and withdraw any obvious bad proposals themselves. An
> author may still decide, despite many objections from their peers they
> want to proceed with publishing and nothing should stop them providing
> it's relevant to the Bitcoin space. Peer review pressure is likely to
> act as the best filtering mechanism in this case anyway (no-one would
> want to be seen as an ass right?). Personally speaking, I felt quite
> nervous proposing my own blocksize ideas. I sought opinions in private
> first and had it been widely decried would probably not have pursued
> it any further.
>
> So in summary, I think some aspects of BIP-1 could do with polishing
> as I have detailed, specially around the "workflow states" but not to
> introduce any committees to the process, but where possible to extract
> state from the real state of the BIP in the real world. In fact, this
> is my direct argument against any forms of committee, in that the
> state of a BIP is determined by factors outside of any particular
> individual's or groups' purview.
>

From jl2012 at xbt.hk  Thu Sep 10 17:18:52 2015
From: jl2012 at xbt.hk (jl2012 at xbt.hk)
Date: Thu, 10 Sep 2015 13:18:52 -0400
Subject: [bitcoin-dev] =?utf-8?q?MAST_with_OP=5FEVAL_and_OP=5FCAT?=
Message-ID: <282c2912327370d30a0d341dcf1a6499@xbt.hk>

Inspired by Pieter's Tree Signatures, I believe Merkleized Abstract 
Syntax Trees (MAST) could be implemented with only OP_CAT and OP_EVAL 
(BIP12).

The idea is very simple. Using a similar example in Pieter's paper,

scriptSig = <sig> <serialized sub-script 10> Z1 0 1 1 X6 1 K9 0 
<serialized script>
scriptPubKey = DUP HASH160 <hash serialized script> EQUALVERIFY EVAL
serialized script = 8 PICK SHA256 (SWAP IF SWAP ENDIF CAT SHA256)*4 <R> 
EQUALVERIFY EVAL

This will run the 10-th sub-script, when there are 11 sub-scripts in the 
MAST

I think this is the easiest way to enable MAST since the reference 
implementation for BIP12 is already there. We could enable OP_CAT only 
inside OP_EVAL so this will be a pure softfork.

Ref:
Tree Signatures: https://blockstream.com/2015/08/24/treesignatures/
BIP12: https://github.com/bitcoin/bips/blob/master/bip-0012.mediawiki

From adam at cypherspace.org  Thu Sep 10 17:48:42 2015
From: adam at cypherspace.org (Adam Back)
Date: Thu, 10 Sep 2015 18:48:42 +0100
Subject: [bitcoin-dev] Bitcoin threat modelling thread
In-Reply-To: <CALqxMTEbRPsDLm=YkkEZWND6PnnWhS7DF5JNJdOF_AhsUPW1Ww@mail.gmail.com>
References: <CALqxMTEbRPsDLm=YkkEZWND6PnnWhS7DF5JNJdOF_AhsUPW1Ww@mail.gmail.com>
Message-ID: <CALqxMTE-+YdjXCqmecsS5gOQ-zXCQq3qh_27wry1CHhWHj_Omw@mail.gmail.com>

Hi

Came across this
https://groups.google.com/forum/m/#!topic/bitcoin-xt/zbPwfDf7UoQ useful
thread discussing Bitcoin threat modelling may reach wider audience on this
list.

Text from Mike Hearn:

 think the next stage is to build a threat model for Bitcoin.

This mail starts with background. If you already know what a threat model
is you can skip to the last section where I propose a first draft, as the
starting point for discussion.


An intro to threat modelling

In security engineering, a threat model
<https://en.wikipedia.org/wiki/Threat_model> is a document that informally
specifies:

Which adversaries (enemies) do you care about?What can they do?Why do they
want to attack you?As a result: what threats do they pose?How do you
prioritise these threats?

Establishing a threat model is an important part of any security
engineering project. In the early days of secure computing, threat
modelling hadn't been invented and as a result projects frequently hit the
following problem:

Every threat looked equally serious, so it became impossible to prioritise

Almost anything could become a threat, if you squinted right

So usability, performance, code maintainability etc were sacrificed over
and over to try and defend against absurd or very unlikely threats just
because someone identified one, in an endless race

The resulting product sucked and nobody used it, thus protecting people
from no threats at all

PGP is a good example of this problem in action.

Making good threat models isn't easy (see The Economist article,New Threat
Model Army
<http://www.economist.com/blogs/babbage/2013/11/internet-after-snowden>).
It can be controversial, because a threat model involves accepting that you
can't win all the time - there will exist adversaries that you
realistically cannot beat. Writing them down and not worrying about them
anymore liberates you to focus on other threats you might do a better job
at, or to work on usability, or features, or other things that users might
actually care about more.

You can make your threat model too weak, so it doesn't encompass real
threats your users are likely to encounter. But a much more common problem
is making the model too strong: including *too many* different kinds of
threats. Strangely, this can make your product *less* secure rather than
more.

One reason is that with too many threats in your model, you can lose your
ability to prioritise: every threat seems equally important even if perhaps
really they aren't, and then you can waste time solving "threats" that are
absurd or incredibly unlikely.

Even worse, once people add things in to a threat model they hate taking
them out, because it'd imply that previous efforts were wasted.

The Tor threat model

A good example of this is Tor. As you my know I have kind of a love/hate
relationship with Tor. It's a useful thing, but I often feel they could do
things differently.

The <https://www.torproject.org/about/overview.html.en#stayinganonymous>Tor
<https://www.torproject.org/about/overview.html.en#stayinganonymous>
project
<https://www.torproject.org/about/overview.html.en#stayinganonymous>*does
<https://www.torproject.org/about/overview.html.en#stayinganonymous>* have
a threat model
<https://www.torproject.org/about/overview.html.en#stayinganonymous>, and
it is a very strong one. Tor tries to protect you against adversaries that
care about very small leaks of application level data, like a browser
reporting your screen size, because it sees its mission as making all
traffic look identical, rather than just hiding your IP address. As a
consequence of this threat model Tor is meant to be used with apps that are
specifically "Torified", like their Tor Browser which is based on Firefox.
If a user takes the obvious approach of just downloading and running the
Tor Browser Bundle, their iTunes traffic won't be anonymised. The rationale
is it's useless to route traffic of random apps via Tor because even if
that hides the IP address, the apps might leak private data anyway as they
weren't designed for it.

This threat model has a couple of consequences:

It's extremely easy to think you're hiding your IP address when in fact you
aren't, due to using or accidentally running non-Torified apps.

The Tor Browser is based on Firefox. When Chrome came along it had a
clearly superior security architecture, because it was sandboxed, but the
Tor project had made a big investment in customising Firefox to anonymise
things like screen sizes. They didn't want to redo all that work.

The end result of this is that Tor's adversaries discovered they could just
break Tor completely by hacking the web browser, as Firefox is the least
secure browser and yet it's the one the Tor project recommends. The Snowden
files contain a bunch of references to this.

Interestingly, the Tor threat model explicitly *excludes* the NSA because
it can observe the whole network (it is the so-called "global passive
adversary"). Tor does this because they want to support low latency web
browsing, and nobody knows how to do that fast enough when your adversary
can watch the traffic between all Tor nodes. So they just exclude such
enemies from their threat model and that is why Tor is possible.

But even more interestingly, it turned out that their threat model
assumptions weren't quite correct. The NSA/GCHQ should, in theory, be able
to totally deanonymise Tor. But in practice they can't. When the time
finally came the 5 Eyes agencies attacked Tor by hacking the web browser,
not by exploiting their global observation abilities.

Tor has competitors - the commercial VPN providers. They have a rather
different threat model, where they explicitly don't care about application
level attacks like web sites looking at your screen size. They *only* care
about hiding your IP address. As a result their products work for every
app, and users can easily use Chrome or any other secure web browser.
Additionally they only add one hop of latency because the VPN provider does
not include itself in the threat model.

This solves for a different set of adversaries, but for many users it's
actually a more appropriate set and as a result VPNs are vastly more
popular than Tor is.

So to recap, we should build a threat model for Bitcoin because:

We have limited manpower and therefore must prioritise, sometimes brutally

Without a model anything can be a threat, so changes that are obvious or
look like technical no-brainers can get shot down due to the risk of absurd
or ridiculous attacks. This happens in Bitcoin Core *a lot*.

It will bring more formality and rigour to our thinking about security.



Proposed model

This is *a suggestion only*. I expect vigorous debate and for some people
to want a different (probably stronger) model. Models are just documents so
they can always be tweaked later, there's no need for v1 to be perfect.

OK. Adversaries I think we should care about in version 1, in priority
order:

Rational individuals and small groups, motivated by profit.

The "global passive adversary" as defined by the
<https://tools.ietf.org/html/rfc7624>IETF
<https://tools.ietf.org/html/rfc7624>, motivated by a desire to map Bitcoin
transactions to people in bulk.

And that's it.

*The GPA*

The "global passive adversary" can mean intelligence agencies *but only
sometimes*. Specifically, it assumes they only watch and they don't
actively interfere. This assumption is of course not entirely valid - IAs
do sometimes engage in active attacks. My suggested threat model doesn't
include that activity because (1) it's hard to do anything about it and (2)
they much prefer to stay stealthy anyway.

Of course, in the Bitcoin system, there may be other GPAs. Anyone who
watches the block chain can potentially be such an adversary. Note the
careful wording: you have to be doing deanonymization *in bulk* to be an
in-scope adversary. This is to avoid including block explorers that have
notes features, people who build lists of well known addresses etc. We
can't stop people doing that: it's up to Bitcoin users to avoid telling the
world which transactions are theirs. It also excludes exchanges that are
trying to monitor transactions going in and out of their platform for
compliance purposes: they are not attempting to do this for the entire
system, therefore, they are not adversaries in this threat model.

*Individuals and small groups*

They are assumed to have hacking skills that are considered good by the
standards of ordinary hackers - they are not script kiddies. However they
are also not state-level hackers: they do not have an endless bag of zero
days that can exploit any imaginable device.

These attackers are motivated by profit. An attack that yields only
worthless pieces of data is not interesting to these adversaries: they want
to monetise. Attacks that involve some incredibly convoluted process to
turn data into money is also uninteresting: we assume a level of
rationality that means they'll ignore attacks with very poor effort/reward
ratios.

*Examples*

Here are some examples of attackers that would be in-scope for this threat
model:

? A hacker who is attempting to steal the contents of your Bitcoin wallet

? A mugger at a conference who is trying to identify rich targets to beat up

? A business owner who is attempting to discover the revenue of his
competitor

? A government attempting to build a map of every Bitcoin transaction to
people

? Someone attempting to profit off a quick market panic by short selling
BTC and then DoSing the network

.... and would not be in scope .....

? An actor who learns IP addresses of people using Bitcoin (reason: not
profitable, mere fact of use is not enough to build a GPA map)

? A short seller who needs to successfully root a specific, well run server
to cause problems (reason: without zero days it's hard to attack a fully
patched and locked down machine)

? A bitcoin exchange that demands proof of where your money came from
(reason: not global adversary)

? A government who wants to shut down Bitcoin globally (reason: active
state adversary, can't realistically stop this as they can always mine a
bogus chain)

? A government who wants to shut down Bitcoin in their own territory
(reason: active state adversary, can just find and arrest anyone
advertising BTC acceptance)

? A developer who wants to turn the block chain into a file sharing network
(reason: not rational, the resulting product would be terrible)

? A random individual learning the balance of wallets on random IP
addresses (reason: can't monetise with any reasonable effort)

.... and could be argued either way .....

? A developer who wants to use the block chain for timestamping lots of
data (can be seen as "motivated by profit", OTOH, actual threat is pretty
low)

? A miner who constantly tries to mine zero sized blocks or constantly
double spends against high profile merchants (can be seen as "motivated by
profit" but also not rational behaviour as it'd tank the price of BTC)

Obviously this stuff is subjective. We can argue about what "rational"
means for miners, for instance.

The goal of the model is not to be 100% accurate or a perfect prediction of
the future. It's just there to help people prioritise development efforts.
Should I work on *this* new feature or addressing *that* threat? A threat
model can help you decide whether it's worth it. People can still choose to
work on threats that are outside of this model if they want to, and we can
also choose to ignore threats that might be inside it, if the cost/benefit
ratio is really bad.

The exclusion of many types of government adversary might be controversial.
It's for practical reasons: governments have lots of very effective ways to
interfere with Bitcoin that we can't do anything about, like bank
blockades, and so far most of them seem to be taking a wait-and-see stance
anyway.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150910/76e85360/attachment-0001.html>

From d.dehueck at gmail.com  Thu Sep 10 21:12:29 2015
From: d.dehueck at gmail.com (essofluffy .)
Date: Thu, 10 Sep 2015 16:12:29 -0500
Subject: [bitcoin-dev] Named Bitcoin Addresses
Message-ID: <CAK8x=ZUhYQXGsrxZGDMQtXu80zqrejVnb01w=8s38-HF0VLXqA@mail.gmail.com>

Hi Everyone,

An issue I'm sure everyone here is familiar with is the problem concerning
the fact that Bitcoin addresses are too complex to memorize and share.
Current Bitcoin addresses can be very intimidating to new users. As Bitcoin
grows it's necessary to provide a much more user friendly experience to the
end user. I think that having the capability to assign a unique name to a
Bitcoin address is in the best interest of Bitcoin and it's users.
I've recently come up with a method for assigning a unique name to a
specific Bitcoin address. I'm looking to get some feedback/criticism on
this method that I have detailed below.

Let?s run through Bob and Alice transacting with a Named Bitcoin Address.
Bob wants to collect a payment from Alice for a service/good he is selling,
but Alice wants to pay from her home computer where she securely keeps all
her Bitcoin. So now Bob needs to give Alice his Bitcoin address and because
Bob is using a Named Bitcoin Address and a supported wallet he can give her
an easy to memorize and hard to mess up address. Bob?s address is simply
?SendBitcoinsToBob? which can easily be written down or memorized. Now
Alice can go home send the Bitcoin from her own supported wallet and be
positive that she sent it to Bob.

Let?s look at how Bob?s supported wallet made that address.

First Bob let?s his wallet know that he wants to create a new address. In
response, his wallet simply asks him what he wants that address to be
named. Bob then enters ?SendBitcoinsToBob? as his preferred address name.
The wallet then let?s Bob know if his preferred address name is available.
If it?s available the name is broadcasted to the network and ready to use.

Now let?s get a little more technical.

When Bob inputs his preferred address name the client has to make sure this
name hasn?t been taken or else who knows where Alice will be sending her
Bitcoins. The client does this by referencing a downloaded ?directory? of
names chosen by people using this system. This directory of names are
transactions sent to an address without a private key (but still viewable
on the blockchain) with the name appended to the transactions as an
OP_RETURN output. These transactions are downloaded or indexed, depending
on whether or not the wallet contains the full Blockchain or is an SPV
wallet. Because of such a large amount of possible address names a binary
search method is used to search through all this data efficiently. The
names could be sorted in two ways, the first being the first character and
the second being the total length of the name (I will being exploring
additional methods to make this process more efficient). So now that Bob?s
client has verified that the name has not been taken and is valid (valid
meaning it's under 35 bytes long and only using chars 0-9 and a-z) it sends
a transaction of 1 satoshi and a small fee to the address without a private
key as talked about earlier. The transaction's OP_RETURN output consists of
two parts. The implementation version of this method (up to 8 characters)
and the name itself (up to 32 characters). Once the transaction is
broadcasted to the network and confirmed the name is ready to be used.

Let?s look at how Alice?s supported wallet sends her Bitcoin to Bob?s Named
Bitcoin Address.

When Alice enters in Bob?s address, ?SendBitcoinsToBob? Alice?s client
references the same ?directory? as Bob only on her device and searches for
the OP_RETURN output of ?SendBitcoinsToBob? using a very similar binary
search method as used for the verification of the availability of an
address name. If a name isn?t found the client would simply return an
error. If the name is found then the client will pull the information of
that transaction and use the address it was sent from as the address to
send the Bitcoin to.

Essentially what this idea describes is a method to assign a name to a
Bitcoin address in a way that is completely verifiable and independent of a
third party.

Please ask your questions and provide feedback.

- Devin
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150910/ee0e603c/attachment.html>

From mark at friedenbach.org  Thu Sep 10 21:32:37 2015
From: mark at friedenbach.org (Mark Friedenbach)
Date: Thu, 10 Sep 2015 14:32:37 -0700
Subject: [bitcoin-dev] Named Bitcoin Addresses
In-Reply-To: <CAK8x=ZUhYQXGsrxZGDMQtXu80zqrejVnb01w=8s38-HF0VLXqA@mail.gmail.com>
References: <CAK8x=ZUhYQXGsrxZGDMQtXu80zqrejVnb01w=8s38-HF0VLXqA@mail.gmail.com>
Message-ID: <CAOG=w-vsp6Oxx3WsjVoQ9xO41SqgUMw97h0Ba1jSd9s=KZL6wQ@mail.gmail.com>

Are you aware of the payment protocol?
On Sep 10, 2015 2:12 PM, "essofluffy . via bitcoin-dev" <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> Hi Everyone,
>
> An issue I'm sure everyone here is familiar with is the problem concerning
> the fact that Bitcoin addresses are too complex to memorize and share.
> Current Bitcoin addresses can be very intimidating to new users. As Bitcoin
> grows it's necessary to provide a much more user friendly experience to the
> end user. I think that having the capability to assign a unique name to a
> Bitcoin address is in the best interest of Bitcoin and it's users.
> I've recently come up with a method for assigning a unique name to a
> specific Bitcoin address. I'm looking to get some feedback/criticism on
> this method that I have detailed below.
>
> Let?s run through Bob and Alice transacting with a Named Bitcoin Address.
> Bob wants to collect a payment from Alice for a service/good he is
> selling, but Alice wants to pay from her home computer where she securely
> keeps all her Bitcoin. So now Bob needs to give Alice his Bitcoin address
> and because Bob is using a Named Bitcoin Address and a supported wallet he
> can give her an easy to memorize and hard to mess up address. Bob?s address
> is simply ?SendBitcoinsToBob? which can easily be written down or
> memorized. Now Alice can go home send the Bitcoin from her own supported
> wallet and be positive that she sent it to Bob.
>
> Let?s look at how Bob?s supported wallet made that address.
>
> First Bob let?s his wallet know that he wants to create a new address. In
> response, his wallet simply asks him what he wants that address to be
> named. Bob then enters ?SendBitcoinsToBob? as his preferred address name.
> The wallet then let?s Bob know if his preferred address name is available.
> If it?s available the name is broadcasted to the network and ready to use.
>
> Now let?s get a little more technical.
>
> When Bob inputs his preferred address name the client has to make sure
> this name hasn?t been taken or else who knows where Alice will be sending
> her Bitcoins. The client does this by referencing a downloaded ?directory?
> of names chosen by people using this system. This directory of names are
> transactions sent to an address without a private key (but still viewable
> on the blockchain) with the name appended to the transactions as an
> OP_RETURN output. These transactions are downloaded or indexed, depending
> on whether or not the wallet contains the full Blockchain or is an SPV
> wallet. Because of such a large amount of possible address names a binary
> search method is used to search through all this data efficiently. The
> names could be sorted in two ways, the first being the first character and
> the second being the total length of the name (I will being exploring
> additional methods to make this process more efficient). So now that Bob?s
> client has verified that the name has not been taken and is valid (valid
> meaning it's under 35 bytes long and only using chars 0-9 and a-z) it sends
> a transaction of 1 satoshi and a small fee to the address without a private
> key as talked about earlier. The transaction's OP_RETURN output consists of
> two parts. The implementation version of this method (up to 8 characters)
> and the name itself (up to 32 characters). Once the transaction is
> broadcasted to the network and confirmed the name is ready to be used.
>
> Let?s look at how Alice?s supported wallet sends her Bitcoin to Bob?s
> Named Bitcoin Address.
>
> When Alice enters in Bob?s address, ?SendBitcoinsToBob? Alice?s client
> references the same ?directory? as Bob only on her device and searches for
> the OP_RETURN output of ?SendBitcoinsToBob? using a very similar binary
> search method as used for the verification of the availability of an
> address name. If a name isn?t found the client would simply return an
> error. If the name is found then the client will pull the information of
> that transaction and use the address it was sent from as the address to
> send the Bitcoin to.
>
> Essentially what this idea describes is a method to assign a name to a
> Bitcoin address in a way that is completely verifiable and independent of a
> third party.
>
> Please ask your questions and provide feedback.
>
> - Devin
>
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150910/85ca26b6/attachment.html>

From theandychase at gmail.com  Fri Sep 11 09:43:54 2015
From: theandychase at gmail.com (Andy Chase)
Date: Fri, 11 Sep 2015 02:43:54 -0700
Subject: [bitcoin-dev] Named Bitcoin Addresses
In-Reply-To: <CAOG=w-vsp6Oxx3WsjVoQ9xO41SqgUMw97h0Ba1jSd9s=KZL6wQ@mail.gmail.com>
References: <CAK8x=ZUhYQXGsrxZGDMQtXu80zqrejVnb01w=8s38-HF0VLXqA@mail.gmail.com>
	<CAOG=w-vsp6Oxx3WsjVoQ9xO41SqgUMw97h0Ba1jSd9s=KZL6wQ@mail.gmail.com>
Message-ID: <CAAxp-m9upffFeuf_SQM2OzSh=Jf-8QX3Rie6w73s0yLPMirGTA@mail.gmail.com>

What's some more information about the "memorizing and sharing" use
case? In most cases if you wanted someone to send you money you'd send
them a payment request via email (or just send them your address).

There's a bunch of solutions to your problem listed here:
https://github.com/bitcoin/bips/blob/master/bip-0015.mediawiki
But sending a payment request via BIP-70 is the "best practice":
https://github.com/bitcoin/bips/blob/master/bip-0070.mediawiki

On Thu, Sep 10, 2015 at 2:32 PM, Mark Friedenbach via bitcoin-dev
<bitcoin-dev at lists.linuxfoundation.org> wrote:
> Are you aware of the payment protocol?
>
> On Sep 10, 2015 2:12 PM, "essofluffy . via bitcoin-dev"
> <bitcoin-dev at lists.linuxfoundation.org> wrote:
>>
>> Hi Everyone,
>>
>> An issue I'm sure everyone here is familiar with is the problem concerning
>> the fact that Bitcoin addresses are too complex to memorize and share.
>> Current Bitcoin addresses can be very intimidating to new users. As Bitcoin
>> grows it's necessary to provide a much more user friendly experience to the
>> end user. I think that having the capability to assign a unique name to a
>> Bitcoin address is in the best interest of Bitcoin and it's users.
>> I've recently come up with a method for assigning a unique name to a
>> specific Bitcoin address. I'm looking to get some feedback/criticism on this
>> method that I have detailed below.
>>
>> Let?s run through Bob and Alice transacting with a Named Bitcoin Address.
>> Bob wants to collect a payment from Alice for a service/good he is
>> selling, but Alice wants to pay from her home computer where she securely
>> keeps all her Bitcoin. So now Bob needs to give Alice his Bitcoin address
>> and because Bob is using a Named Bitcoin Address and a supported wallet he
>> can give her an easy to memorize and hard to mess up address. Bob?s address
>> is simply ?SendBitcoinsToBob? which can easily be written down or memorized.
>> Now Alice can go home send the Bitcoin from her own supported wallet and be
>> positive that she sent it to Bob.
>>
>> Let?s look at how Bob?s supported wallet made that address.
>>
>> First Bob let?s his wallet know that he wants to create a new address. In
>> response, his wallet simply asks him what he wants that address to be named.
>> Bob then enters ?SendBitcoinsToBob? as his preferred address name. The
>> wallet then let?s Bob know if his preferred address name is available. If
>> it?s available the name is broadcasted to the network and ready to use.
>>
>> Now let?s get a little more technical.
>>
>> When Bob inputs his preferred address name the client has to make sure
>> this name hasn?t been taken or else who knows where Alice will be sending
>> her Bitcoins. The client does this by referencing a downloaded ?directory?
>> of names chosen by people using this system. This directory of names are
>> transactions sent to an address without a private key (but still viewable on
>> the blockchain) with the name appended to the transactions as an OP_RETURN
>> output. These transactions are downloaded or indexed, depending on whether
>> or not the wallet contains the full Blockchain or is an SPV wallet. Because
>> of such a large amount of possible address names a binary search method is
>> used to search through all this data efficiently. The names could be sorted
>> in two ways, the first being the first character and the second being the
>> total length of the name (I will being exploring additional methods to make
>> this process more efficient). So now that Bob?s client has verified that the
>> name has not been taken and is valid (valid meaning it's under 35 bytes long
>> and only using chars 0-9 and a-z) it sends a transaction of 1 satoshi and a
>> small fee to the address without a private key as talked about earlier. The
>> transaction's OP_RETURN output consists of two parts. The implementation
>> version of this method (up to 8 characters) and the name itself (up to 32
>> characters). Once the transaction is broadcasted to the network and
>> confirmed the name is ready to be used.
>>
>> Let?s look at how Alice?s supported wallet sends her Bitcoin to Bob?s
>> Named Bitcoin Address.
>>
>> When Alice enters in Bob?s address, ?SendBitcoinsToBob? Alice?s client
>> references the same ?directory? as Bob only on her device and searches for
>> the OP_RETURN output of ?SendBitcoinsToBob? using a very similar binary
>> search method as used for the verification of the availability of an address
>> name. If a name isn?t found the client would simply return an error. If the
>> name is found then the client will pull the information of that transaction
>> and use the address it was sent from as the address to send the Bitcoin to.
>>
>> Essentially what this idea describes is a method to assign a name to a
>> Bitcoin address in a way that is completely verifiable and independent of a
>> third party.
>>
>> Please ask your questions and provide feedback.
>>
>> - Devin
>>
>>
>> _______________________________________________
>> bitcoin-dev mailing list
>> bitcoin-dev at lists.linuxfoundation.org
>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>

From bob_bitcoin at mcelrath.org  Fri Sep 11 14:21:00 2015
From: bob_bitcoin at mcelrath.org (Bob McElrath)
Date: Fri, 11 Sep 2015 14:21:00 +0000
Subject: [bitcoin-dev] Three Challenges for Scaling Bitcoin
Message-ID: <20150911142100.GG21292@mcelrath.org>

I will be unable to attend the Scaling Bitcoin conference this weekend, but I
wrote down a few thoughts, to hopefully move us past this block size debate and
onto something more constructive:

    http://blog.sldx.com/three-challenges-for-scaling-bitcoin/

Comments/criticism welcome.

--
Cheers, Bob McElrath

"For every complex problem, there is a solution that is simple, neat, and wrong."
    -- H. L. Mencken 


From kristovatlas.lists at gmail.com  Fri Sep 11 15:13:18 2015
From: kristovatlas.lists at gmail.com (Kristov Atlas)
Date: Fri, 11 Sep 2015 11:13:18 -0400
Subject: [bitcoin-dev] Named Bitcoin Addresses
In-Reply-To: <CAOG=w-vsp6Oxx3WsjVoQ9xO41SqgUMw97h0Ba1jSd9s=KZL6wQ@mail.gmail.com>
References: <CAK8x=ZUhYQXGsrxZGDMQtXu80zqrejVnb01w=8s38-HF0VLXqA@mail.gmail.com>
	<CAOG=w-vsp6Oxx3WsjVoQ9xO41SqgUMw97h0Ba1jSd9s=KZL6wQ@mail.gmail.com>
Message-ID: <CAGH37SKyw6hoJaL2bOHChFikW6R9T49rXxL=hCgjndjyuVAwLA@mail.gmail.com>

I applaud your brainstorming efforts! :) But I dislike just about
everything about this proposal.

Bitcoin addresses should never be reused, for privacy and security reasons
documented extensively online.

I definitely do not want my computer to maintain a registry of every
address in the world any more than I want to maintain a list of all email
addresses, web addresses, etc. This cannot be scaled and is wasteful since
most participants in the network don't need to transact.

If we need naming conventions, I'd rather see a name registry system
off-chain attached to bip47 reusable payment codes.

-Kr
On Sep 10, 2015 5:32 PM, "Mark Friedenbach via bitcoin-dev" <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> Are you aware of the payment protocol?
> On Sep 10, 2015 2:12 PM, "essofluffy . via bitcoin-dev" <
> bitcoin-dev at lists.linuxfoundation.org> wrote:
>
>> Hi Everyone,
>>
>> An issue I'm sure everyone here is familiar with is the problem
>> concerning the fact that Bitcoin addresses are too complex to memorize and
>> share. Current Bitcoin addresses can be very intimidating to new users. As
>> Bitcoin grows it's necessary to provide a much more user friendly
>> experience to the end user. I think that having the capability to assign a
>> unique name to a Bitcoin address is in the best interest of Bitcoin and
>> it's users.
>> I've recently come up with a method for assigning a unique name to a
>> specific Bitcoin address. I'm looking to get some feedback/criticism on
>> this method that I have detailed below.
>>
>> Let?s run through Bob and Alice transacting with a Named Bitcoin Address.
>> Bob wants to collect a payment from Alice for a service/good he is
>> selling, but Alice wants to pay from her home computer where she securely
>> keeps all her Bitcoin. So now Bob needs to give Alice his Bitcoin address
>> and because Bob is using a Named Bitcoin Address and a supported wallet he
>> can give her an easy to memorize and hard to mess up address. Bob?s address
>> is simply ?SendBitcoinsToBob? which can easily be written down or
>> memorized. Now Alice can go home send the Bitcoin from her own supported
>> wallet and be positive that she sent it to Bob.
>>
>> Let?s look at how Bob?s supported wallet made that address.
>>
>> First Bob let?s his wallet know that he wants to create a new address. In
>> response, his wallet simply asks him what he wants that address to be
>> named. Bob then enters ?SendBitcoinsToBob? as his preferred address name.
>> The wallet then let?s Bob know if his preferred address name is available.
>> If it?s available the name is broadcasted to the network and ready to use.
>>
>> Now let?s get a little more technical.
>>
>> When Bob inputs his preferred address name the client has to make sure
>> this name hasn?t been taken or else who knows where Alice will be sending
>> her Bitcoins. The client does this by referencing a downloaded ?directory?
>> of names chosen by people using this system. This directory of names are
>> transactions sent to an address without a private key (but still viewable
>> on the blockchain) with the name appended to the transactions as an
>> OP_RETURN output. These transactions are downloaded or indexed, depending
>> on whether or not the wallet contains the full Blockchain or is an SPV
>> wallet. Because of such a large amount of possible address names a binary
>> search method is used to search through all this data efficiently. The
>> names could be sorted in two ways, the first being the first character and
>> the second being the total length of the name (I will being exploring
>> additional methods to make this process more efficient). So now that Bob?s
>> client has verified that the name has not been taken and is valid (valid
>> meaning it's under 35 bytes long and only using chars 0-9 and a-z) it sends
>> a transaction of 1 satoshi and a small fee to the address without a private
>> key as talked about earlier. The transaction's OP_RETURN output consists of
>> two parts. The implementation version of this method (up to 8 characters)
>> and the name itself (up to 32 characters). Once the transaction is
>> broadcasted to the network and confirmed the name is ready to be used.
>>
>> Let?s look at how Alice?s supported wallet sends her Bitcoin to Bob?s
>> Named Bitcoin Address.
>>
>> When Alice enters in Bob?s address, ?SendBitcoinsToBob? Alice?s client
>> references the same ?directory? as Bob only on her device and searches for
>> the OP_RETURN output of ?SendBitcoinsToBob? using a very similar binary
>> search method as used for the verification of the availability of an
>> address name. If a name isn?t found the client would simply return an
>> error. If the name is found then the client will pull the information of
>> that transaction and use the address it was sent from as the address to
>> send the Bitcoin to.
>>
>> Essentially what this idea describes is a method to assign a name to a
>> Bitcoin address in a way that is completely verifiable and independent of a
>> third party.
>>
>> Please ask your questions and provide feedback.
>>
>> - Devin
>>
>>
>> _______________________________________________
>> bitcoin-dev mailing list
>> bitcoin-dev at lists.linuxfoundation.org
>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>
>>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150911/6ce236b5/attachment.html>

From jtimon at jtimon.cc  Fri Sep 11 16:22:26 2015
From: jtimon at jtimon.cc (=?UTF-8?B?Sm9yZ2UgVGltw7Nu?=)
Date: Fri, 11 Sep 2015 18:22:26 +0200
Subject: [bitcoin-dev] Yet another blocklimit proposal / compromise
In-Reply-To: <CAAUq486GxLw25TW2SV6d8vCCdhY5SEjfdAPCOhV6ta+hoyJY5Q@mail.gmail.com>
References: <CAAUq485B5AoTpRBzf0=KFm-k58Zoz+ns-Y7BXc3JwG87VsDo+g@mail.gmail.com>
	<CABm2gDrsnVEkcq2CPwK4fcJpwHj6ouTSRnk4U2bMBOPvjRuD_w@mail.gmail.com>
	<CAAUq486GxLw25TW2SV6d8vCCdhY5SEjfdAPCOhV6ta+hoyJY5Q@mail.gmail.com>
Message-ID: <CABm2gDqArkYxJmQfPKTjPjRQUHXjEjHb+8UUe54RNr6sHiUhKA@mail.gmail.com>

Unfortunately the relation between block maximum size and mining
centralization is much more complex than that.
On Sep 9, 2015 3:00 PM, "Marcel Jamin" <marcel at jamin.net> wrote:

> I think the overlap of people who want to run a serious mining operation
> and people who are unable to afford a slightly above average internet
> connection is infinitesimally small.
>
> 2015-09-09 20:51 GMT+02:00 Jorge Tim?n <jtimon at jtimon.cc>:
>
>>
>> On Sep 9, 2015 8:36 PM, "Marcel Jamin via bitcoin-dev" <
>> bitcoin-dev at lists.linuxfoundation.org> wrote:
>> >
>> > I propose to:
>> >
>> > a) assess what blocklimit is currently technically possible without
>> driving up costs of running a node up too much. Most systems currently
>> running a fullnode probably have some capacity left.
>>
>> What about the risk of further increasing mining centralization?
>>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150911/dd9b57ab/attachment.html>

From dscotese at litmocracy.com  Fri Sep 11 16:27:25 2015
From: dscotese at litmocracy.com (Dave Scotese)
Date: Fri, 11 Sep 2015 09:27:25 -0700
Subject: [bitcoin-dev] Bitcoin Days Destroyed as block selection heuristic
Message-ID: <CAGLBAhd11-_LNJ-ba6NXmWBXz=yb+pFTmf9tHAgFW_m6S5jnfw@mail.gmail.com>

Rather than (promising to, and when they don't actually, at least
pretending to) use the first-seen block, I propose that a more
sophisticated method of choosing which of two block solutions to accept.
Essentially, a miner receiving two solutions at the same height would
compute a weighted sum of bitcoin-days-destroyed (transactions received
earlier get higher weights) of whatever transactions are in a block *and
also* were in the miner's mempool *before* the first solution arrived.
Whichever block has more wins.

This strategy avoids allowing miners to use private transactions to mess
with the blockchain.  It also makes an empty block far less attractive
because it is easily replaced, all the way until the next block locks it
in.  Any block-selection heuristic can be gamed, but I believe that using a
weighted sum of BTCDD is harder to game than using block propagation timing.

I asked Can Bitcoin Days Destroyed be a better resolution mechanism for
competing blocks?
<http://bitcoin.stackexchange.com/questions/39226/can-bitcoin-days-destroyed-be-a-better-resolution-mechanism-for-competing-blocks>
on the stackexchange bitcoin site in order to collect objections to and
problems with this idea, and have not found any that I haven't addressed.
The best objection is that *maybe* empty blocks and selfish mining are
either good for bitcoin, or else they are so minimally bad that no effort
ought to be expended in preventing them.

If anyone here thinks this is a good idea, and no one can offer reasons
it's a bad idea, I will probably start working on an implementation.  I'm
really slow though, so ping me if it looks like fun to you.

notplato
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150911/3ecf1dff/attachment-0001.html>

From jtimon at jtimon.cc  Fri Sep 11 16:32:44 2015
From: jtimon at jtimon.cc (=?UTF-8?B?Sm9yZ2UgVGltw7Nu?=)
Date: Fri, 11 Sep 2015 18:32:44 +0200
Subject: [bitcoin-dev] Bitcoin Days Destroyed as block selection
	heuristic
In-Reply-To: <CAGLBAhd11-_LNJ-ba6NXmWBXz=yb+pFTmf9tHAgFW_m6S5jnfw@mail.gmail.com>
References: <CAGLBAhd11-_LNJ-ba6NXmWBXz=yb+pFTmf9tHAgFW_m6S5jnfw@mail.gmail.com>
Message-ID: <CABm2gDpsJdSDTyvTGNSZXX1+UyAHxTB=ODuy6bJvMj3A9BqhqQ@mail.gmail.com>

On Sep 11, 2015 12:27 PM, "Dave Scotese via bitcoin-dev" <
bitcoin-dev at lists.linuxfoundation.org> wrote:
>
> Rather than (promising to, and when they don't actually, at least
pretending to) use the first-seen block, I propose that a more
sophisticated method of choosing which of two block solutions to accept.

There's already a criterion to chose: the one with more work (in valid
blocks) on top of it.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150911/4844c5c9/attachment.html>

From adam at cypherspace.org  Fri Sep 11 16:47:22 2015
From: adam at cypherspace.org (Adam Back)
Date: Fri, 11 Sep 2015 12:47:22 -0400
Subject: [bitcoin-dev] Yet another blocklimit proposal / compromise
In-Reply-To: <CAAUq486GxLw25TW2SV6d8vCCdhY5SEjfdAPCOhV6ta+hoyJY5Q@mail.gmail.com>
References: <CAAUq485B5AoTpRBzf0=KFm-k58Zoz+ns-Y7BXc3JwG87VsDo+g@mail.gmail.com>
	<CABm2gDrsnVEkcq2CPwK4fcJpwHj6ouTSRnk4U2bMBOPvjRuD_w@mail.gmail.com>
	<CAAUq486GxLw25TW2SV6d8vCCdhY5SEjfdAPCOhV6ta+hoyJY5Q@mail.gmail.com>
Message-ID: <CALqxMTF5BxdeWm1PBBNwWm41o8Y3bMvgSyDm2_CE73ibXnnwiw@mail.gmail.com>

Bitcoin security depends on the enforcement of consensus rules which
is done by economically dependent full nodes.  This is distinct from
miners fullnodes, and balances miners interests, otherwise SPV nodes
and decentralisation of policy would tend degrade, I think.  Therefore
it is important that it be reasonably convenient to run full nodes for
decentralisation security.

Also you may want to read this summary of Bitcoin decentralisation by Mark:

https://www.reddit.com/r/Bitcoin/comments/3h7eei/greg_luke_adam_if_xt_takes_over_and_wins_the/cu53eq3

I think you maybe misunderstanding what the Chinese miners said also,
about 8MB, that was a cap on the maximum they felt they could handle
with current network infrastructure.

I had proposed 2-4-8MB growing over a 4 year time frame with 2MB once
the hard-fork is upgraded by everyone in the network.  (I dont
consider miner triggers, as with soft-fork upgrades, to be an
appropriate roll out mechanism because it is more important that
economically dependent full nodes upgrade, though it can be useful to
know that miners also have upgraded to a reasonable extent to avoid a
temporary hashrate drop off affecting security).

Adam

On 9 September 2015 at 15:00, Marcel Jamin via bitcoin-dev
<bitcoin-dev at lists.linuxfoundation.org> wrote:
> I think the overlap of people who want to run a serious mining operation and
> people who are unable to afford a slightly above average internet connection
> is infinitesimally small.
>
> 2015-09-09 20:51 GMT+02:00 Jorge Tim?n <jtimon at jtimon.cc>:
>>
>>
>> On Sep 9, 2015 8:36 PM, "Marcel Jamin via bitcoin-dev"
>> <bitcoin-dev at lists.linuxfoundation.org> wrote:
>> >
>> > I propose to:
>> >
>> > a) assess what blocklimit is currently technically possible without
>> > driving up costs of running a node up too much. Most systems currently
>> > running a fullnode probably have some capacity left.
>>
>> What about the risk of further increasing mining centralization?
>
>
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>

From christophe.biocca at gmail.com  Fri Sep 11 17:18:10 2015
From: christophe.biocca at gmail.com (Christophe Biocca)
Date: Fri, 11 Sep 2015 13:18:10 -0400
Subject: [bitcoin-dev] Bitcoin Days Destroyed as block selection
	heuristic
In-Reply-To: <CABm2gDpsJdSDTyvTGNSZXX1+UyAHxTB=ODuy6bJvMj3A9BqhqQ@mail.gmail.com>
References: <CAGLBAhd11-_LNJ-ba6NXmWBXz=yb+pFTmf9tHAgFW_m6S5jnfw@mail.gmail.com>
	<CABm2gDpsJdSDTyvTGNSZXX1+UyAHxTB=ODuy6bJvMj3A9BqhqQ@mail.gmail.com>
Message-ID: <CANOOu=8jT++mX_pTHrEnryJqiw3C+J3mWKL27dEkQh=rO0q_Cg@mail.gmail.com>

It's pretty obvious that Dave is suggesting an alternate tie-breaker:

> It also makes an empty block far less attractive because it is easily replaced, all the way until the next block locks it in.

I do see a problem with the proposal. Right now, when a miner sees a
new block with the most work and there are no ties, it is always a
good idea to build on top of it (unless they're in the middle of
building a private chain, or other pathological cases).

With this new heuristic (assuming it is actually followed by a good
chunk of people), a miner can reasonably know whether or not they can
safely mine a sibling of the block instead. When enough widely
propagated transactions exist, and the block to orphan is small,
there's minimal risk in mining a sibling block instead of a child
block (the only extra risk is in someone else mining a child block
right around the time we suceed in mining a siblish block, where we'll
definitely be orphaned instead of ~50% of the time).

Because the risk can be measured and is sometimes very small, it will
then be profitable for a miner to orphan a small non-empty block and
double-spend some confirmed transactions whenever the block confirming
them is easily replaced. This lowers the security of 1-conf
transactions.

Mind you, that risk doesn't apply if we prefer non-empty blocks to
empty blocks and leave it at that, or only switch if the new block
doesn't double spend transactions in the old one, so it's a fixable
issue.

On 11 September 2015 at 12:32, Jorge Tim?n
<bitcoin-dev at lists.linuxfoundation.org> wrote:
>
> On Sep 11, 2015 12:27 PM, "Dave Scotese via bitcoin-dev"
> <bitcoin-dev at lists.linuxfoundation.org> wrote:
>>
>> Rather than (promising to, and when they don't actually, at least
>> pretending to) use the first-seen block, I propose that a more sophisticated
>> method of choosing which of two block solutions to accept.
>
> There's already a criterion to chose: the one with more work (in valid
> blocks) on top of it.
>
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>

From marcel at jamin.net  Fri Sep 11 17:54:17 2015
From: marcel at jamin.net (Marcel Jamin)
Date: Fri, 11 Sep 2015 19:54:17 +0200
Subject: [bitcoin-dev] Yet another blocklimit proposal / compromise
In-Reply-To: <CALqxMTF5BxdeWm1PBBNwWm41o8Y3bMvgSyDm2_CE73ibXnnwiw@mail.gmail.com>
References: <CAAUq485B5AoTpRBzf0=KFm-k58Zoz+ns-Y7BXc3JwG87VsDo+g@mail.gmail.com>
	<CABm2gDrsnVEkcq2CPwK4fcJpwHj6ouTSRnk4U2bMBOPvjRuD_w@mail.gmail.com>
	<CAAUq486GxLw25TW2SV6d8vCCdhY5SEjfdAPCOhV6ta+hoyJY5Q@mail.gmail.com>
	<CALqxMTF5BxdeWm1PBBNwWm41o8Y3bMvgSyDm2_CE73ibXnnwiw@mail.gmail.com>
Message-ID: <CAAUq484fRauFkiaTRc5GE7ZNVEqX_b7-JaSx5_tJeOp=Cjb=jQ@mail.gmail.com>

> Therefore it is important that it be reasonably convenient to run full
nodes for decentralisation security.

Yes, and I'm suggesting to define what "reasonably convenient" is in 2016.
Most likely node operators have more than a little headroom for larger
blocks. If you just use more of the processing power / storage / bandwidth
you very likely already paid for then there is no increase in costs.

> I think you maybe misunderstanding what the Chinese miners said also, about
8MB, that was a cap on the maximum they felt they could handle with current
network infrastructure.

And what they felt "remained fair to all to all miners and node operators
worldwide." Increasing network connection requirements might even decrease
mining centralization right now.



2015-09-11 18:47 GMT+02:00 Adam Back <adam at cypherspace.org>:

> Bitcoin security depends on the enforcement of consensus rules which
> is done by economically dependent full nodes.  This is distinct from
> miners fullnodes, and balances miners interests, otherwise SPV nodes
> and decentralisation of policy would tend degrade, I think.  Therefore
> it is important that it be reasonably convenient to run full nodes for
> decentralisation security.
>
> Also you may want to read this summary of Bitcoin decentralisation by Mark:
>
>
> https://www.reddit.com/r/Bitcoin/comments/3h7eei/greg_luke_adam_if_xt_takes_over_and_wins_the/cu53eq3
>
> I think you maybe misunderstanding what the Chinese miners said also,
> about 8MB, that was a cap on the maximum they felt they could handle
> with current network infrastructure.
>
> I had proposed 2-4-8MB growing over a 4 year time frame with 2MB once
> the hard-fork is upgraded by everyone in the network.  (I dont
> consider miner triggers, as with soft-fork upgrades, to be an
> appropriate roll out mechanism because it is more important that
> economically dependent full nodes upgrade, though it can be useful to
> know that miners also have upgraded to a reasonable extent to avoid a
> temporary hashrate drop off affecting security).
>
> Adam
>
> On 9 September 2015 at 15:00, Marcel Jamin via bitcoin-dev
> <bitcoin-dev at lists.linuxfoundation.org> wrote:
> > I think the overlap of people who want to run a serious mining operation
> and
> > people who are unable to afford a slightly above average internet
> connection
> > is infinitesimally small.
> >
> > 2015-09-09 20:51 GMT+02:00 Jorge Tim?n <jtimon at jtimon.cc>:
> >>
> >>
> >> On Sep 9, 2015 8:36 PM, "Marcel Jamin via bitcoin-dev"
> >> <bitcoin-dev at lists.linuxfoundation.org> wrote:
> >> >
> >> > I propose to:
> >> >
> >> > a) assess what blocklimit is currently technically possible without
> >> > driving up costs of running a node up too much. Most systems currently
> >> > running a fullnode probably have some capacity left.
> >>
> >> What about the risk of further increasing mining centralization?
> >
> >
> >
> > _______________________________________________
> > bitcoin-dev mailing list
> > bitcoin-dev at lists.linuxfoundation.org
> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> >
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150911/e31daa59/attachment.html>

From jtimon at jtimon.cc  Fri Sep 11 18:17:19 2015
From: jtimon at jtimon.cc (=?UTF-8?B?Sm9yZ2UgVGltw7Nu?=)
Date: Fri, 11 Sep 2015 20:17:19 +0200
Subject: [bitcoin-dev] Yet another blocklimit proposal / compromise
In-Reply-To: <CAAUq484fRauFkiaTRc5GE7ZNVEqX_b7-JaSx5_tJeOp=Cjb=jQ@mail.gmail.com>
References: <CAAUq485B5AoTpRBzf0=KFm-k58Zoz+ns-Y7BXc3JwG87VsDo+g@mail.gmail.com>
	<CABm2gDrsnVEkcq2CPwK4fcJpwHj6ouTSRnk4U2bMBOPvjRuD_w@mail.gmail.com>
	<CAAUq486GxLw25TW2SV6d8vCCdhY5SEjfdAPCOhV6ta+hoyJY5Q@mail.gmail.com>
	<CALqxMTF5BxdeWm1PBBNwWm41o8Y3bMvgSyDm2_CE73ibXnnwiw@mail.gmail.com>
	<CAAUq484fRauFkiaTRc5GE7ZNVEqX_b7-JaSx5_tJeOp=Cjb=jQ@mail.gmail.com>
Message-ID: <CABm2gDoi63+7uJ0tWXYnNXBrg93pZ7b=-NABDLJTWSxvOsxewg@mail.gmail.com>

On Sep 11, 2015 1:54 PM, "Marcel Jamin" <marcel at jamin.net> wrote:
> And what they felt "remained fair to all to all miners and node operators
worldwide." Increasing network connection requirements might even decrease
mining centralization right now.

No. People seem to think "Chinese have slow connections? Screw them, free
competition."
But not being well connected with the other miners is not a problem for the
Chinese miners (who are the hashrate majority), it's a problem for the rest
of the miners!!
It's not about being well connected to the "global internet", it's about
being well connected to the hashrate majority.

> 2015-09-11 18:47 GMT+02:00 Adam Back <adam at cypherspace.org>:
>>
>> Bitcoin security depends on the enforcement of consensus rules which
>> is done by economically dependent full nodes.  This is distinct from
>> miners fullnodes, and balances miners interests, otherwise SPV nodes
>> and decentralisation of policy would tend degrade, I think.  Therefore
>> it is important that it be reasonably convenient to run full nodes for
>> decentralisation security.
>>
>> Also you may want to read this summary of Bitcoin decentralisation by
Mark:
>>
>>
https://www.reddit.com/r/Bitcoin/comments/3h7eei/greg_luke_adam_if_xt_takes_over_and_wins_the/cu53eq3
>>
>> I think you maybe misunderstanding what the Chinese miners said also,
>> about 8MB, that was a cap on the maximum they felt they could handle
>> with current network infrastructure.
>>
>> I had proposed 2-4-8MB growing over a 4 year time frame with 2MB once
>> the hard-fork is upgraded by everyone in the network.  (I dont
>> consider miner triggers, as with soft-fork upgrades, to be an
>> appropriate roll out mechanism because it is more important that
>> economically dependent full nodes upgrade, though it can be useful to
>> know that miners also have upgraded to a reasonable extent to avoid a
>> temporary hashrate drop off affecting security).
>>
>> Adam
>>
>> On 9 September 2015 at 15:00, Marcel Jamin via bitcoin-dev
>> <bitcoin-dev at lists.linuxfoundation.org> wrote:
>> > I think the overlap of people who want to run a serious mining
operation and
>> > people who are unable to afford a slightly above average internet
connection
>> > is infinitesimally small.
>> >
>> > 2015-09-09 20:51 GMT+02:00 Jorge Tim?n <jtimon at jtimon.cc>:
>> >>
>> >>
>> >> On Sep 9, 2015 8:36 PM, "Marcel Jamin via bitcoin-dev"
>> >> <bitcoin-dev at lists.linuxfoundation.org> wrote:
>> >> >
>> >> > I propose to:
>> >> >
>> >> > a) assess what blocklimit is currently technically possible without
>> >> > driving up costs of running a node up too much. Most systems
currently
>> >> > running a fullnode probably have some capacity left.
>> >>
>> >> What about the risk of further increasing mining centralization?
>> >
>> >
>> >
>> > _______________________________________________
>> > bitcoin-dev mailing list
>> > bitcoin-dev at lists.linuxfoundation.org
>> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>> >
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150911/8e6153d2/attachment-0001.html>

From jtimon at jtimon.cc  Fri Sep 11 18:37:34 2015
From: jtimon at jtimon.cc (=?UTF-8?B?Sm9yZ2UgVGltw7Nu?=)
Date: Fri, 11 Sep 2015 20:37:34 +0200
Subject: [bitcoin-dev] Bitcoin Days Destroyed as block selection
	heuristic
In-Reply-To: <CANOOu=8jT++mX_pTHrEnryJqiw3C+J3mWKL27dEkQh=rO0q_Cg@mail.gmail.com>
References: <CAGLBAhd11-_LNJ-ba6NXmWBXz=yb+pFTmf9tHAgFW_m6S5jnfw@mail.gmail.com>
	<CABm2gDpsJdSDTyvTGNSZXX1+UyAHxTB=ODuy6bJvMj3A9BqhqQ@mail.gmail.com>
	<CANOOu=8jT++mX_pTHrEnryJqiw3C+J3mWKL27dEkQh=rO0q_Cg@mail.gmail.com>
Message-ID: <CABm2gDoCecK1jk6i_bZMTRCTQUseXYugi5ntykMimzns_dxFug@mail.gmail.com>

On Sep 11, 2015 1:18 PM, "Christophe Biocca" <christophe.biocca at gmail.com>
wrote:
>
> It's pretty obvious that Dave is suggesting an alternate tie-breaker:

I thought he was proposing a new consesnsus rule. I see, this would be just
a policy validation that everybody would be free to ignore (like the "first
seen" spend conflict tx replacement policy).

I don't see how miners would benefit from running this policy so I would
not expect them to run it in the long run (like the "first seen" spend
conflict tx replacement policy).
If miners don't use it, I don't see how users can benefit from running that
policy themselves.
They will still have to keep waiting some block confirmation to
exponentially reduce the chances of a successful double-spend attack with
each new confirmation (as explained in the bitcoin white paper).

> Mind you, that risk doesn't apply if we prefer non-empty blocks to
> empty blocks and leave it at that, or only switch if the new block
> doesn't double spend transactions in the old one, so it's a fixable
> issue.

How do you know which of 2 blocks with the same height is "newer"?

> On 11 September 2015 at 12:32, Jorge Tim?n
> <bitcoin-dev at lists.linuxfoundation.org> wrote:
> >
> > On Sep 11, 2015 12:27 PM, "Dave Scotese via bitcoin-dev"
> > <bitcoin-dev at lists.linuxfoundation.org> wrote:
> >>
> >> Rather than (promising to, and when they don't actually, at least
> >> pretending to) use the first-seen block, I propose that a more
sophisticated
> >> method of choosing which of two block solutions to accept.
> >
> > There's already a criterion to chose: the one with more work (in valid
> > blocks) on top of it.
> >
> >
> > _______________________________________________
> > bitcoin-dev mailing list
> > bitcoin-dev at lists.linuxfoundation.org
> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> >
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150911/953bcc1b/attachment.html>

From christophe.biocca at gmail.com  Fri Sep 11 19:06:43 2015
From: christophe.biocca at gmail.com (Christophe Biocca)
Date: Fri, 11 Sep 2015 15:06:43 -0400
Subject: [bitcoin-dev] Bitcoin Days Destroyed as block selection
	heuristic
In-Reply-To: <CABm2gDoCecK1jk6i_bZMTRCTQUseXYugi5ntykMimzns_dxFug@mail.gmail.com>
References: <CAGLBAhd11-_LNJ-ba6NXmWBXz=yb+pFTmf9tHAgFW_m6S5jnfw@mail.gmail.com>
	<CABm2gDpsJdSDTyvTGNSZXX1+UyAHxTB=ODuy6bJvMj3A9BqhqQ@mail.gmail.com>
	<CANOOu=8jT++mX_pTHrEnryJqiw3C+J3mWKL27dEkQh=rO0q_Cg@mail.gmail.com>
	<CABm2gDoCecK1jk6i_bZMTRCTQUseXYugi5ntykMimzns_dxFug@mail.gmail.com>
Message-ID: <CANOOu=_fX6buYhLz0hB0Swzu8MpgMx6UudFZfF4sJ_Cd4SVo5A@mail.gmail.com>

> How do you know which of 2 blocks with the same height is "newer"?

>From the particular node's perspective. I'm aware there is no
possibility of consistent global ordering.

Dave's code is about switching blocks (instead of continuing on the
existing one), and, in that context, "old" means the first sibling the
node saw, and "new" is any subsequent block. I will disambiguate this
in the future, because I'm clearly confusing at least 1 person.

> I don't see how miners would benefit from running this policy so I would not expect them to run it in the long run (like the "first seen" spend conflict tx replacement policy).

There's always a default, and if miners don't have any overriding
reason to change, they'll likely stick to it. Which is why Dave
started his statement with:

> Rather than (promising to, and when they don't actually, at least pretending to) use the first-seen block

Clearly recognizing that any changed logic is non-binding.

On 11 September 2015 at 14:37, Jorge Tim?n <jtimon at jtimon.cc> wrote:
>
> On Sep 11, 2015 1:18 PM, "Christophe Biocca" <christophe.biocca at gmail.com>
> wrote:
>>
>> It's pretty obvious that Dave is suggesting an alternate tie-breaker:
>
> I thought he was proposing a new consesnsus rule. I see, this would be just
> a policy validation that everybody would be free to ignore (like the "first
> seen" spend conflict tx replacement policy).
>
> I don't see how miners would benefit from running this policy so I would not
> expect them to run it in the long run (like the "first seen" spend conflict
> tx replacement policy).
> If miners don't use it, I don't see how users can benefit from running that
> policy themselves.
> They will still have to keep waiting some block confirmation to
> exponentially reduce the chances of a successful double-spend attack with
> each new confirmation (as explained in the bitcoin white paper).
>
>> Mind you, that risk doesn't apply if we prefer non-empty blocks to
>> empty blocks and leave it at that, or only switch if the new block
>> doesn't double spend transactions in the old one, so it's a fixable
>> issue.
>
> How do you know which of 2 blocks with the same height is "newer"?
>
>> On 11 September 2015 at 12:32, Jorge Tim?n
>> <bitcoin-dev at lists.linuxfoundation.org> wrote:
>> >
>> > On Sep 11, 2015 12:27 PM, "Dave Scotese via bitcoin-dev"
>> > <bitcoin-dev at lists.linuxfoundation.org> wrote:
>> >>
>> >> Rather than (promising to, and when they don't actually, at least
>> >> pretending to) use the first-seen block, I propose that a more
>> >> sophisticated
>> >> method of choosing which of two block solutions to accept.
>> >
>> > There's already a criterion to chose: the one with more work (in valid
>> > blocks) on top of it.
>> >
>> >
>> > _______________________________________________
>> > bitcoin-dev mailing list
>> > bitcoin-dev at lists.linuxfoundation.org
>> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>> >

From dscotese at litmocracy.com  Fri Sep 11 19:26:20 2015
From: dscotese at litmocracy.com (Dave Scotese)
Date: Fri, 11 Sep 2015 12:26:20 -0700
Subject: [bitcoin-dev] Bitcoin Days Destroyed as block selection
	heuristic
In-Reply-To: <CABm2gDoCecK1jk6i_bZMTRCTQUseXYugi5ntykMimzns_dxFug@mail.gmail.com>
References: <CAGLBAhd11-_LNJ-ba6NXmWBXz=yb+pFTmf9tHAgFW_m6S5jnfw@mail.gmail.com>
	<CABm2gDpsJdSDTyvTGNSZXX1+UyAHxTB=ODuy6bJvMj3A9BqhqQ@mail.gmail.com>
	<CANOOu=8jT++mX_pTHrEnryJqiw3C+J3mWKL27dEkQh=rO0q_Cg@mail.gmail.com>
	<CABm2gDoCecK1jk6i_bZMTRCTQUseXYugi5ntykMimzns_dxFug@mail.gmail.com>
Message-ID: <CAGLBAhdjTYEXZWRU6gouLgUjerWF3i_L4Sj5QrAcfwmFfEgDAw@mail.gmail.com>

Yes, this proposal is a policy that everyone would be free to ignore.  I
should have introduced the situation in which this *unenforceable* policy
makes sense to me.  Here it is:

Every miner is listening for valid block solutions but might receive two
valid blocks and then they have to decide which one to use.  Choosing the
one you saw first is the default behavior.  In that situation, we'd all
like everyone to choose the same block.  I propose that a better heuristic
than "first seen" is to compare the BTCDD, *but only of transactions you
already have in your mempool*, and

*weight the BTCDD so that txns you got earlier are more important.*
The heuristic is most useful when the two blocks are received within a
small window of time, opting for the first-seen rule otherwise.  I assume
many miners have an idea of how long it takes for anyone's new block to get
across the network, and more specifically, the range of times it takes for
new solutions to get to themselves.  During this little time window, the
chances are 50/50 that they'll choose the right block.  If the default
behavior were to use BTCDD during that time window (one second? I have no
idea!), then the chances would be significantly better.

I think Jorge is right that it doesn't benefit miners.  It doesn't hurt
them either, unless they are trying to do selfish mining.  Well, it
benefits them in terms of increased bitcoin stability by A) making it
easier for clients to decide which block is valid when they see two
competing with each other, B) motivating miners to add transactions instead
of mining empty blocks, C) severely decreasing the utility of any global
private network of nodes intended to spread selfishly-mined blocks, and D)
motivating miners to stay well-connected so that they get transactions
quickly.

I sent this to the list because it is only useful if it is set as default
behavior since most miners leave the defaults alone, and the benefits don't
materialize unless a majority follows the policy.

On Fri, Sep 11, 2015 at 11:37 AM, Jorge Tim?n <jtimon at jtimon.cc> wrote:

>
> On Sep 11, 2015 1:18 PM, "Christophe Biocca" <christophe.biocca at gmail.com>
> wrote:
> >
> > It's pretty obvious that Dave is suggesting an alternate tie-breaker:
>
> I thought he was proposing a new consesnsus rule. I see, this would be
> just a policy validation that everybody would be free to ignore (like the
> "first seen" spend conflict tx replacement policy).
>
> I don't see how miners would benefit from running this policy so I would
> not expect them to run it in the long run (like the "first seen" spend
> conflict tx replacement policy).
> If miners don't use it, I don't see how users can benefit from running
> that policy themselves.
> They will still have to keep waiting some block confirmation to
> exponentially reduce the chances of a successful double-spend attack with
> each new confirmation (as explained in the bitcoin white paper).
>
> > Mind you, that risk doesn't apply if we prefer non-empty blocks to
> > empty blocks and leave it at that, or only switch if the new block
> > doesn't double spend transactions in the old one, so it's a fixable
> > issue.
>
> How do you know which of 2 blocks with the same height is "newer"?
>
> > On 11 September 2015 at 12:32, Jorge Tim?n
> > <bitcoin-dev at lists.linuxfoundation.org> wrote:
> > >
> > > On Sep 11, 2015 12:27 PM, "Dave Scotese via bitcoin-dev"
> > > <bitcoin-dev at lists.linuxfoundation.org> wrote:
> > >>
> > >> Rather than (promising to, and when they don't actually, at least
> > >> pretending to) use the first-seen block, I propose that a more
> sophisticated
> > >> method of choosing which of two block solutions to accept.
> > >
> > > There's already a criterion to chose: the one with more work (in valid
> > > blocks) on top of it.
> > >
> > >
> > > _______________________________________________
> > > bitcoin-dev mailing list
> > > bitcoin-dev at lists.linuxfoundation.org
> > > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> > >
>



-- 
I like to provide some work at no charge to prove my value. Do you need a
techie?
I own Litmocracy <http://www.litmocracy.com> and Meme Racing
<http://www.memeracing.net> (in alpha).
I'm the webmaster for The Voluntaryist <http://www.voluntaryist.com> which
now accepts Bitcoin.
I also code for The Dollar Vigilante <http://dollarvigilante.com/>.
"He ought to find it more profitable to play by the rules" - Satoshi
Nakamoto
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150911/5d843513/attachment.html>

From vincent.truong at procabiak.com  Fri Sep 11 22:21:33 2015
From: vincent.truong at procabiak.com (Vincent Truong)
Date: Sat, 12 Sep 2015 08:21:33 +1000
Subject: [bitcoin-dev] Bitcoin Days Destroyed as block selection
	heuristic
In-Reply-To: <CAGLBAhdjTYEXZWRU6gouLgUjerWF3i_L4Sj5QrAcfwmFfEgDAw@mail.gmail.com>
References: <CAGLBAhd11-_LNJ-ba6NXmWBXz=yb+pFTmf9tHAgFW_m6S5jnfw@mail.gmail.com>
	<CABm2gDpsJdSDTyvTGNSZXX1+UyAHxTB=ODuy6bJvMj3A9BqhqQ@mail.gmail.com>
	<CANOOu=8jT++mX_pTHrEnryJqiw3C+J3mWKL27dEkQh=rO0q_Cg@mail.gmail.com>
	<CABm2gDoCecK1jk6i_bZMTRCTQUseXYugi5ntykMimzns_dxFug@mail.gmail.com>
	<CAGLBAhdjTYEXZWRU6gouLgUjerWF3i_L4Sj5QrAcfwmFfEgDAw@mail.gmail.com>
Message-ID: <CACrzPe=kDVJHDMgyuFvVcPf1FbfzLbDYFKxzaxtdWnvkJ=HpLQ@mail.gmail.com>

Would this alter the way txns will be prioritised in order to try to win?
You would always pick txns with the best BTCDD to maximize your chances of
being the block to build on.

I see this as potentially being a bad outcome for bitcoin's fungibility.
On Sep 12, 2015 5:26 AM, "Dave Scotese via bitcoin-dev" <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> Yes, this proposal is a policy that everyone would be free to ignore.  I
> should have introduced the situation in which this *unenforceable* policy
> makes sense to me.  Here it is:
>
> Every miner is listening for valid block solutions but might receive two
> valid blocks and then they have to decide which one to use.  Choosing the
> one you saw first is the default behavior.  In that situation, we'd all
> like everyone to choose the same block.  I propose that a better heuristic
> than "first seen" is to compare the BTCDD, *but only of transactions you
> already have in your mempool*, and
>
> *weight the BTCDD so that txns you got earlier are more important.*
> The heuristic is most useful when the two blocks are received within a
> small window of time, opting for the first-seen rule otherwise.  I assume
> many miners have an idea of how long it takes for anyone's new block to get
> across the network, and more specifically, the range of times it takes for
> new solutions to get to themselves.  During this little time window, the
> chances are 50/50 that they'll choose the right block.  If the default
> behavior were to use BTCDD during that time window (one second? I have no
> idea!), then the chances would be significantly better.
>
> I think Jorge is right that it doesn't benefit miners.  It doesn't hurt
> them either, unless they are trying to do selfish mining.  Well, it
> benefits them in terms of increased bitcoin stability by A) making it
> easier for clients to decide which block is valid when they see two
> competing with each other, B) motivating miners to add transactions instead
> of mining empty blocks, C) severely decreasing the utility of any global
> private network of nodes intended to spread selfishly-mined blocks, and D)
> motivating miners to stay well-connected so that they get transactions
> quickly.
>
> I sent this to the list because it is only useful if it is set as default
> behavior since most miners leave the defaults alone, and the benefits don't
> materialize unless a majority follows the policy.
>
> On Fri, Sep 11, 2015 at 11:37 AM, Jorge Tim?n <jtimon at jtimon.cc> wrote:
>
>>
>> On Sep 11, 2015 1:18 PM, "Christophe Biocca" <christophe.biocca at gmail.com>
>> wrote:
>> >
>> > It's pretty obvious that Dave is suggesting an alternate tie-breaker:
>>
>> I thought he was proposing a new consesnsus rule. I see, this would be
>> just a policy validation that everybody would be free to ignore (like the
>> "first seen" spend conflict tx replacement policy).
>>
>> I don't see how miners would benefit from running this policy so I would
>> not expect them to run it in the long run (like the "first seen" spend
>> conflict tx replacement policy).
>> If miners don't use it, I don't see how users can benefit from running
>> that policy themselves.
>> They will still have to keep waiting some block confirmation to
>> exponentially reduce the chances of a successful double-spend attack with
>> each new confirmation (as explained in the bitcoin white paper).
>>
>> > Mind you, that risk doesn't apply if we prefer non-empty blocks to
>> > empty blocks and leave it at that, or only switch if the new block
>> > doesn't double spend transactions in the old one, so it's a fixable
>> > issue.
>>
>> How do you know which of 2 blocks with the same height is "newer"?
>>
>> > On 11 September 2015 at 12:32, Jorge Tim?n
>> > <bitcoin-dev at lists.linuxfoundation.org> wrote:
>> > >
>> > > On Sep 11, 2015 12:27 PM, "Dave Scotese via bitcoin-dev"
>> > > <bitcoin-dev at lists.linuxfoundation.org> wrote:
>> > >>
>> > >> Rather than (promising to, and when they don't actually, at least
>> > >> pretending to) use the first-seen block, I propose that a more
>> sophisticated
>> > >> method of choosing which of two block solutions to accept.
>> > >
>> > > There's already a criterion to chose: the one with more work (in valid
>> > > blocks) on top of it.
>> > >
>> > >
>> > > _______________________________________________
>> > > bitcoin-dev mailing list
>> > > bitcoin-dev at lists.linuxfoundation.org
>> > > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>> > >
>>
>
>
>
> --
> I like to provide some work at no charge to prove my value. Do you need a
> techie?
> I own Litmocracy <http://www.litmocracy.com> and Meme Racing
> <http://www.memeracing.net> (in alpha).
> I'm the webmaster for The Voluntaryist <http://www.voluntaryist.com>
> which now accepts Bitcoin.
> I also code for The Dollar Vigilante <http://dollarvigilante.com/>.
> "He ought to find it more profitable to play by the rules" - Satoshi
> Nakamoto
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150912/222cba76/attachment-0001.html>

From me at ricmoo.com  Sat Sep 12 05:38:53 2015
From: me at ricmoo.com (Richard Moore)
Date: Sat, 12 Sep 2015 01:38:53 -0400
Subject: [bitcoin-dev] Stealth Address Idea (special-less)
Message-ID: <71A8E490-14C5-49F1-8E08-75C0A754B5BB@ricmoo.com>

Hey all,

I am throwing out an idea I?ve been toying with, for feedback and if it seems like an idea worth pursuing, possibly a BIP number.

The goal is to make straight forward stealth address that are SPV friendly and easy to support in software without too much special goop.

I?ve got working code at https://github.com/ricmoo/sandbox/tree/master/stealth, and here are some example transactions on the block chain:

Target Public Key: 029ed06e396761c24416cf7323ed4f1cb29763ee9e2b0fccae347d6a2a3eaecbf5
Target Public Key [tentative] Encoding (this is what you would give away): 59KkSZsVE7vErdqo8m5gtNoez44CbdwJQ5cSM1AAARzN19vkJ6NU

Revocable Payment made: b4ad20cad4cc2fcbbec09bc071dfe8c4a4b1e8e57d1e56bf51947445cfc6c7af
Irrevocable Payment made: f600643a1d32152117be0d9c652a86dc6182d2dab3be53340739395f524cd95c
Cleared out all funds from stealth address: 58eb0fdab108c7add74835466251ffe5c51c7f4cec149f06daf0435d43d9ce55


Idea overview:

There are 2 modes of operation, revocable and irrevocable payments. Revocable payments result in both parties knowing the private key, allowing for a certain level of plausible deniability when the funds are swept, as to whether the funds were actually sent or were revoked? You could imagine WikiLeaks stating they will not claim donations for 1-3 months after receiving them; if the funds are claimed after 1.5 months, did the sender actually send funds? The other option is irrevocable, where only the receiver can claim the funds (allowing them to leave them in that address until they need to be spent).

The basic idea is (the above code above gets into the nitty gritty), to send to targetPublicKey:
Given the UTXO set of inputs into a transaction, choose one at random, senderUtxo
Use ECDH(targetPublicKey, senderUtxo.privateKey) as sharedSecret
For revocable payments, you are done; use sharedSecret as your privateKey, compute the address
For irrevocable payments, create a sharedPrivateKey from the bytes of sharedSecret, use ECC addition (or would multiplication make more sense? advantages?) on the public key of sharedPrivateKey and the targetPublicKey. The receiver can then use ECC addition (or multiplication) on the sharedPrivateKey and the targetPrivateKey to generate the coresponding privateKey.

The SPV-able part, is lightly discussed in the top of stealth.js, but I haven?t played with bloom filters enough and the idea is still all too fresh in my head; the general idea is to make a 1-of-2 multisig where the first is the resulting stealth address, and the second is something (anything) that looks like a valid public key, but will match a bloom filter (given a tweak that is generated deterministically from the targetPublicKey) and matches the targetPublicKey. Again, I need much more feedback on this.

Thanks,
RicMoo

.???`?.??.???`?.??.???`?.??.???`?.??.???`?.?><(((?>

Richard Moore ~ Founder
Genetic Mistakes Software inc.
phone: (778) 882-6125
email: ricmoo at geneticmistakes.com <mailto:ricmoo at geneticmistakes.com>
www: http://GeneticMistakes.com <http://geneticmistakes.com/>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150912/385fc6f2/attachment.html>

From dscotese at litmocracy.com  Sat Sep 12 18:55:03 2015
From: dscotese at litmocracy.com (Dave Scotese)
Date: Sat, 12 Sep 2015 11:55:03 -0700
Subject: [bitcoin-dev] Bitcoin Days Destroyed as block selection
	heuristic
In-Reply-To: <CACrzPe=kDVJHDMgyuFvVcPf1FbfzLbDYFKxzaxtdWnvkJ=HpLQ@mail.gmail.com>
References: <CAGLBAhd11-_LNJ-ba6NXmWBXz=yb+pFTmf9tHAgFW_m6S5jnfw@mail.gmail.com>
	<CABm2gDpsJdSDTyvTGNSZXX1+UyAHxTB=ODuy6bJvMj3A9BqhqQ@mail.gmail.com>
	<CANOOu=8jT++mX_pTHrEnryJqiw3C+J3mWKL27dEkQh=rO0q_Cg@mail.gmail.com>
	<CABm2gDoCecK1jk6i_bZMTRCTQUseXYugi5ntykMimzns_dxFug@mail.gmail.com>
	<CAGLBAhdjTYEXZWRU6gouLgUjerWF3i_L4Sj5QrAcfwmFfEgDAw@mail.gmail.com>
	<CACrzPe=kDVJHDMgyuFvVcPf1FbfzLbDYFKxzaxtdWnvkJ=HpLQ@mail.gmail.com>
Message-ID: <CAGLBAhfPckVHgTRXYck2xiS79CMyJdHZ4ej0_fGr=RchbrP5dA@mail.gmail.com>

>
> From the Bitcoin wiki page on transaction fees
> <https://en.bitcoin.it/wiki/Transaction_fees#Technical_info>:
>
> Transaction priority is calculated as a value-weighted sum of input age,
> divided by transaction size in bytes: priority =
> sum(input_value_in_base_units * input_age)/size_in_bytes
>
If I read that correctly, that is directly proportional to BTCDD, so
whatever effect concerns you has already been built into the code.

On Fri, Sep 11, 2015 at 3:21 PM, Vincent Truong <
vincent.truong at procabiak.com> wrote:

> Would this alter the way txns will be prioritised in order to try to win?
> You would always pick txns with the best BTCDD to maximize your chances of
> being the block to build on.
>
> I see this as potentially being a bad outcome for bitcoin's fungibility.
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150912/3d8a53d4/attachment.html>

From theandychase at gmail.com  Sat Sep 12 23:50:32 2015
From: theandychase at gmail.com (Andy Chase)
Date: Sat, 12 Sep 2015 16:50:32 -0700
Subject: [bitcoin-dev] [BIP/Draft] BIP Acceptance Process
In-Reply-To: <CAAxp-m9Umz4kQQL64UCYGY8Z1PSeM0jpMCa-R064OCMqNJ1nKA@mail.gmail.com>
References: <64B72DF6-BE37-4624-ADAA-CE28C14A4227@gmail.com>
	<CABaSBaw7hM2qmuR6Z6USy5=V9NGeCPKmHHuVOH=vexDk7kY8OA@mail.gmail.com>
	<CAAxp-m_vo5vJEemR_hRX3hNcUPveA6EHn-ZFMJo8ke59E6BrKw@mail.gmail.com>
	<CADJgMzvanj41Dfa4kQsq5SVvt-Zeee2SOfD3Uws-FpBQsyZsqg@mail.gmail.com>
	<CAAxp-m_EmMbVBqQK9ijoe+n0dAs726TaBX5m1Wgzsv-m1KHdfQ@mail.gmail.com>
	<CADJgMzuRy_Fbv2UaJ4EZzh8DHhYYixu=k6_Z=sKtNJ9SsLTdyQ@mail.gmail.com>
	<CAAxp-m9Umz4kQQL64UCYGY8Z1PSeM0jpMCa-R064OCMqNJ1nKA@mail.gmail.com>
Message-ID: <CAAxp-m-dMP4ri1zeoguYiSdHa87Q9yOdLOsN1SJutys4s_X=3g@mail.gmail.com>

Wanted to throw up here some feedback I got off-list. Source:
http://bitco.in/forum/threads/bitcoinxt-dispute-resolution-etc.36/#post-602

==== [1] ====

> Interesting.
>
> I like your idea that people can form representational groups which then collectively votes ("committees"). Basically an individual can delegate his vote to one, but take it away at any time. This allows one person to do the detail work on behalf of others.
>
> I think that your 2 week then 2 week process is too constrained. I would propose that the groups have 2 weeks to respond, then an indetermine time occurs where the BIP author can work to resolve the open questions by corresponding directly with the groups. Then 2 week final arguments and voting.
>
> I think a clear definition of what "accepted" means would be important. I think that "accepted" should mean that the master github branch, and relevant project releases should incorporate the BIP as soon as reasonably possible after a branch is created that passes security and code competence checks. In other words, the "YES" votes may have to implement the BIP or pay to have it implemented.
>
> I think that you need to clearly define how the different groups prove their stake, and perhaps specify maximum ratios. That is, you can't have 100 committees with 99 merchant processors and 1 miner.

==== [2] ====

Timeline
--------

that's an important point. I've gotten that echoed from a few people
now. I was thinking that a re-submit could be called if more time is
needed but I think your method of allowing the author to have control
over the pace makes a lot of sense.

What does accepted mean? "Accepted" is the hardest thing to grasp in
this paper. There's just no way to force client authors, users, and
miners, to integrate and use a change, even if one is accepted by my
process. I.e. I'm trying to define what "accepted" even means, but
maybe I should use different words that don't have baggage. Like my
process could indicate "community greenlight" and client authors who
refuse to follow "community greenlight" can do so, but they are going
against the wishes of the community and that becomes obvious. Other
client others (like btcd) might follow the greenlight recommendation
instead and users are free to switch to that. Then there could also be
"community redlight", and "no decision reached" in which there was
conflicting views.

If I go this route, I could use the word "accepted" to mean something
like "appears in the longest fork", or "is in use by multiple clients,
merchants, & users" (for things like urls that aren't
blockchain-related).

How to prove stake?
--------------------

"How groups prove their stake" is the hard question that has to be
addressed in this proposal or any. I've pushed forward several
recommendations but there's no perfect solution that everyone will
accept. For users, in the comments I suggested a "community sample"
method that requires that only a random few people in a group to give
up their privacy.

Ratios
------


The "accepted" or "greenlit" standard in my proposal is defined as:
least 70% of the represented percentage stake in 3 out of the 4
Bitcoin segments. It's true that it seems weird to have 1 group in a
segment by itself (seems like too much power), you have to recall that
committees can consist of several groups that have agreed to act
together. If the 1 miner group had conflicts they'd separate to make
public both their views.

I'm interested in if you think that definition should be changed or if
you are worried about those risks.

==== [3] ====

> What does accepted mean?
> ------------------------
>
> I like your "community greenlight" idea to cover how BIPs apply to the larger community of wallet providers. However, I also think that there should be stronger language applied to the Bitcoin Core or Bitcoin XT (if a XIP is submitted). That language should make it absolutely clear that committers can't revert or refuse to commit a change that implements the "greenlighted" BIP just because they don't agree with it.
>
> How to prove stake?
> -------------------
>
> I think we need to nail this down (even if imperfectly) to make this BIP real. Personally, I think that there should be at least one way to anonymously vote (say by owning coins). But I don't feel that there's any need to preserve anonymity for the other stakeholders. In fact, for some groups I think it would be bad to allow anonymous voters. If you own a bunch of coins, or prove massive mining capacity, there can be no doubt that you are incentivized to vote for what is best for bitcoin. But some vocal forum writer, speaker or professor might not care about Bitcoin's ultimate success, or be a paid shill or sockpuppet. But requiring identity at least these people are putting a little bit of their personal reputation behind their comments. Of course, companies already disclose their identities so no problem there.
>
> But how do we choose which indirect stakeholders (companies, etc) get a vote? All I can think is that coin owners vote that this company is in fact important... this would be a once every 5 years or something vote not something you can give or take away every time a BIP is proposed.
>
> Ratios
> ------
>
> Somehow I missed that in your doc. Your proposal seems ok, although it may be hard to get consensus at those levels. And honestly I think that miners have too much power already -- I think that Bitcoin should be optimizing itself for users not for infrastructure. At the same time, I hope that miners realize that their business model requires consumer users (vs corporate users like bank 2 bank) so will probably vote what they believe is best for consumers..

On Wed, Sep 9, 2015 at 6:21 PM, Andy Chase <theandychase at gmail.com> wrote:
> Thanks for your response BTC Drak, I will attempt to summarize your
> points and respond to them:
>
> * Some BIPs are not consensus critical -- True, see my response to Luke
> * BIPs do not imply usage -- This I covered in my paper.
> * Acceptance can be defined by actual use -- That's one way of doing it
>
>> Getting back to your specific proposal. It seems to focus more on
>> getting BIPs accepted in the sense of published
>
> Wildly incorrect. My BIP had nothing to do with getting published. The
> first words you can read in my proposal are as follows:
>
>> The current process for accepting a BIP is not clearly defined. While BIP-0001 defines the process for writing and submitting a Bitcoin Improvement Proposal to the community it does not specify the precise method for which BIPs are considered accepted or rejected. This proposal sets up a method for determining BIP acceptance.
>
> * but the proposal is "complete" when the proposer is happy with the final text.
>
> This would be a cool inclusion. That is the intent of my "Submit for
> comments" process.
>
> ---
>
> Overall your post seemed to miss the point of my proposal, but that's
> likely my fault for poor wording. I'm trying to develop a process of
> coming to "consensus" i.e. gathering feedback and reducing opinions
> down to a yes/no should this BIP happen or should we find a better
> solution.
>
> Importantly, it's not client specific. It's just a way of saying "hey
> everyone, here's a problem and solution that a lot of people agree on"
> or "hey everyone, here's a problem and solution that has a few
> problems with it"
>
> It's true that even if a "BIP" is "accepted" by my proposal it still
> may not actually happen (this is mentioned in my proposal), and I
> believe that's healthy. We can't force a change on anyone nor should
> we.
>
> ---
>
> Since so many people are missing the actual problem I'm solving,
> here's another way of wording it: A BIP is proposed and goes through
> the process. A PR is submitted that matches the BIP perfectly, and is
> submitted and vetted. Should wladimir merge it?
>
> My process isn't perfect solution that would make it so we could
> replace wladimir with a wladBot. But it's a tool we can use for
> gathering meaningful information to help guide that decision. Waiting
> on all objections to be handled works okay so far but won't work
> forever.
>
>
> On Mon, Sep 7, 2015 at 12:37 PM, Btc Drak <btcdrak at gmail.com> wrote:
>>
>> Sorry not to reply earlier. I have a rather long post. I've split it
>> into two sections, one explaining the background and secondly talking
>> very specifically about your proposal and possible areas to look at.
>>
>> I think there's a key misunderstanding about BIPs and "who decides
>> what in Bitcoin". A BIP usually defines some problem and a solutions
>> or helps communicate proposals to the technical community. They are
>> sort of mini white papers on specific topics often with reference
>> implementations attached. They may be consensus critical, or not. The
>> process for getting a BIP published is fairly loose in that it really
>> just requires some discussion and relevance to Bitcoin regardless of
>> whether the proposal is something that would be accepted or used by
>> others in the ecosystem. The BIP editor is obviously going to filter
>> out obvious nonesense and that shouldn't be controversial but obvious
>> when you see it.
>>
>> You need to separate out the idea of BIPs as is, and implementations
>> of BIPs in Bitcoin software (like Bitcoin Core).
>>
>> Take BIP64 for example. It's a proposal that adds a service to nodes
>> allowing anyone to query the UTXO set on the p2p network. Bitcoin Core
>> as a project has not implemented it but was instead implemented in XT
>> and is utilised by Lighthouse. So the BIP specification is there in
>> the BIPs repository. As far as the bitcoin ecosystem goes, only
>> Bitcoin XT and lighthouse utilise it so far.
>>
>> BIP101 is another example, but one of a consensus critical proposal
>> that would change the Bitcoin protocol (i.e. requires a hard fork). It
>> was adopted by only the XT project and so far no other software. At
>> the time of writing miners have chosen not to run implementations of
>> BIP101.
>>
>> You can see the BIPs authoring and publishing process is a separate
>> issue entirely to the implementation and acceptance by the Bitcoin
>> ecosystem.
>>
>> For non-consensus critical proposals like BIP64, or maybe one relating
>> to privacy (how to order transaction output for example), you could
>> judge acceptance of the proposal by the number of software projects
>> that implement the proposal, and the number of users it impacts. If a
>> proposal is utilised by many projects, but not the few projects that
>> have the majority of users, one could not claim wide acceptance.
>>
>> For consensus critical proposals like BIP66 (Strict DER encoding) this
>> BIP was implemented in at least two bitcoin software implementations.
>> Over 95% of miners adopted the proposal over a 4.5 month period. The
>> BIP became de facto accepted, and in fact, once 95% lock-in was
>> achieved, the BIP became Final by rights that the consensus rules for
>> the Bitcoin network had changed.
>>
>> In the case of consensus critical proposals like that, you can only
>> write proposals, implement it in software and hope they are adopted.
>>
>> Now where does the confusion arise? Well, Bitcoin Core is the de facto
>> reference implementation by virtue of having the largest technical
>> contributor base and the widest userbase of any Bitcoin full node
>> implementation. This is where I believe, the community get stuck in
>> their assumptions and is so obvious it may have been overlooked.
>>
>> Consensus rule changes to Bitcoin Core are always documented as BIPs
>> so the exact details can be picked up by other software implementers
>> (if they so desire). Take CHECKLOCKTIMEVERIFY a new widely anticipated
>> opcode. The proposal implemented in Bitcoin Core and eventually
>> merged. Peter also authored BIP65 (required because without it, his
>> proposal could not be considered for Bitcoin Core).
>>
>> It is not that BIP65 was somehow "accepted", in fact, as it stands,
>> BIP65 is still just a draft because while there is a BIP and a
>> reference implementation in Bitcoin Core, the consensus changes to the
>> Bitcoin protocol have not been proposed to the community (through a
>> soft fork), and thus acceptance is still only a possibility (although
>> acceptance is extremely likely because service providers are literally
>> chomping at the bit waiting for deployment).
>>
>> Also I would like to note that it's only an internal rule of Bitcoin
>> Core that consensus rule changes require a formal BIP. It is not a
>> requirement laid down from the BIP gods. BIPs simply serve as a way to
>> communicate ideas and proposals. The community at large will decide if
>> a BIP becomes widely adopted or not. Of course, Bitcoin Core has a
>> major influence on this because they have the largest user base. It is
>> relevant to say the large userbase is not just a historical artefact
>> by virtue of being the first Bitcoin implementation. Bitcoin Core is
>> widely trusted by commercial users because of the high developer
>> count, wide technical expertise and relative security given knowing
>> that they will be supported with security and maintenance releases.
>>
>> YOUR PROPOSAL
>>
>> Getting back to your specific proposal. It seems to focus more on
>> getting BIPs accepted in the sense of published and missed the wider
>> picture. As I have detailed, getting published isnt a problem. Anyone
>> can make a proposal, so long as it's not obviously off topic or
>> nonsensical, there is no grounds to refuse to publish it.
>>
>> Any part of your proposal which seems to infer governance of Bitcoin
>> is misplaced because it's not the place of BIPs. The Bitcoin Core
>> project is not the BIPs project and their rules are their own. They
>> are one implementation, and very influential one yes, but, not the one
>> true implementation to rule them all.
>>
>> Where I do think the BIP-1 text falls down is with the workflow of
>> ACCEPTED/REJECTED because it does not really define who is accepting
>> and rejecting what and misses much of the reality of the process in
>> the real world. Given the purpose of BIPs is a formal way to
>> communicate technical proposals to the bitcoin community (i.e.
>> implementers and protocol consumers) the work flow needs to be
>> adjusted.
>>
>> Anyone can submit a proposal and the state of the proposal can be
>> DRAFT or WITHDRAWN but draft here is confusing. Draft would suggest
>> it's a work in progress, but the proposal is "complete" when the
>> proposer is happy with the final text. Downstream implementers should
>> not attempt to write code (in my opinion) until the proposal has been
>> finalised by the authors. Only the author has the right to say when
>> their proposal is finished.
>>
>> The states of Accepted / Rejected are easy for consensus critical
>> changes, especially once versionbits softforking is enacted and
>> proposals will have a timeout associated. Certainly for deployed
>> proposals you could say the proposal is "active" or better still
>> "pending approval". However "accepted" and "rejected" is difficult for
>> say privacy standards because how can you gauge or measure it. As I
>> said earlier, you might have a lot of small projects implementing some
>> privacy standards, but if the major wallets dont, and thus the
>> majority of users, how would you gauge it?
>>
>> Something is a standard only when it becomes a standard by virtue of
>> having become a standard :)
>>
>> "Replaced" is an easy state, when another proposal supercedes and
>> replaces an older one. Again the wording could be better here.
>> "deprecated" would also be appropriate in some circumstances.
>>
>> I'm not making a concrete proposal, I'm just highlighting where BIP-1
>> sort of falls apart because of an incongruence with the workflow
>> states and what actually happens in real life.
>>
>> Local to the BIPs project, I do think the BIPs editor, and guidelines
>> try to filter proposals by raising the bar: i.e. requiring proposal to
>> be polished through peer review before they are formally published as
>> draft BIPs. Though this process an author would a) get most of his
>> details right first time, and b) have some relative confidence his/her
>> idea was useful and withdraw any obvious bad proposals themselves. An
>> author may still decide, despite many objections from their peers they
>> want to proceed with publishing and nothing should stop them providing
>> it's relevant to the Bitcoin space. Peer review pressure is likely to
>> act as the best filtering mechanism in this case anyway (no-one would
>> want to be seen as an ass right?). Personally speaking, I felt quite
>> nervous proposing my own blocksize ideas. I sought opinions in private
>> first and had it been widely decried would probably not have pursued
>> it any further.
>>
>> So in summary, I think some aspects of BIP-1 could do with polishing
>> as I have detailed, specially around the "workflow states" but not to
>> introduce any committees to the process, but where possible to extract
>> state from the real state of the BIP in the real world. In fact, this
>> is my direct argument against any forms of committee, in that the
>> state of a BIP is determined by factors outside of any particular
>> individual's or groups' purview.
>>

From rusty at rustcorp.com.au  Sun Sep 13 18:56:01 2015
From: rusty at rustcorp.com.au (Rusty Russell)
Date: Mon, 14 Sep 2015 04:26:01 +0930
Subject: [bitcoin-dev] [BIP Proposal] Version bits with timeout and delay.
Message-ID: <87mvwqb132.fsf@rustcorp.com.au>

Hi all,

Those who've seen the original versionbits bip, this adds:
   1) Percentage checking only on retarget period boundaries.
   2) 1 retarget period between 95% and activation.
   3) A stronger suggestion for timeout value selection.

https://gist.github.com/rustyrussell/47eb08093373f71f87de

And pasted below, de-formatted a little.

Thanks,
Rusty.

  BIP: ??
  Title: Version bits with timeout and delay
  Author: Pieter Wuille <pieter.wuille at gmail.com>, Peter Todd <pete at petertodd.org>, Greg Maxwell <greg at xiph.org>, Rusty Russell <rusty at rustcorp.com.au>
  Status: Draft
  Type: Informational Track
  Created: 2015-10-04

==Abstract==

This document specifies a proposed change to the semantics of the 'version' field in Bitcoin blocks, allowing multiple backward-compatible changes (further called called "soft forks") being deployed in parallel. It relies on interpreting the version field as a bit vector, where each bit can be used to track an independent change. These are tallied each retarget period. Once the consensus change succeeds or times out, there is a "fallow" pause after which the bit can be reused for later changes.

==Motivation==

BIP 34 introduced a mechanism for doing soft-forking changes without predefined flag timestamp (or flag block height), instead relying on measuring miner support indicated by a higher version number in block headers. As it relies on comparing version numbers as integers however, it only supports one single change being rolled out at once, requiring coordination between proposals, and does not allow for permanent rejection: as long as one soft fork is not fully rolled out, no future one can be scheduled.

In addition, BIP 34 made the integer comparison (nVersion >= 2) a consensus rule after its 95% threshold was reached, removing 2^31 +2 values from the set of valid version numbers (all negative numbers, as nVersion is interpreted as a signed integer, as well as 0 and 1). This indicates another downside this approach: every upgrade permanently restricts the set of allowed nVersion field values. This approach was later reused in BIP 66, which further removed nVersion = 2 as valid option. As will be shown further, this is unnecessary. 

==Specification==

===Mechanism===

'''Bit flags'''
We are permitting several independent soft forks to be deployed in parallel. For each, a bit B is chosen from the set {0,1,2,...,28}, which is not currently in use for any other ongoing soft fork. Miners signal intent to enforce the new rules associated with the proposed soft fork by setting bit 1<sup>B</sup> in nVersion to 1 in their blocks.

'''High bits'''
The highest 3 bits are set to 001, so the range of actually possible nVersion values is [0x20000000...0x3FFFFFFF], inclusive. This leaves two future upgrades for different mechanisms (top bits 010 and 011), while complying to the constraints set by BIP34 and BIP66. Having more than 29 available bits for parallel soft forks does not add anything anyway, as the (nVersion >= 3) requirement already makes that impossible.

'''States'''
With every softfork proposal we associate a state BState, which begins
at ''defined'', and can be ''locked-in'', ''activated'',
or ''failed''.  Transitions are considered after each
retarget period.

'''Soft Fork Support'''
Software which supports the change should begin by setting B in all blocks
mined until it is resolved.

 if (BState == defined) {
     SetBInBlock();
 }

'''Success: Lock-in Threshold'''
If bit B is set in 1916 (1512 on testnet) or more of the 2016 blocks
within a retarget period, it is considered ''locked-in''.  Miners should
stop setting bit B.

 if (NextBlockHeight % 2016 == 0) {
    if (BState == defined && Previous2016BlocksCountB() >= 1916) {
        BState = locked-in;
        BActiveHeight = NextBlockHeight + 2016;
    }
 }

'''Success: Activation Delay'''
The consensus rules related to ''locked-in'' soft fork will be enforced in
the second retarget period; ie. there is a one retarget period in
which the remaining 5% can upgrade.  At the that activation block and
after, the bit B may be reused for a different soft fork.

 if (BState == locked-in && NextBlockHeight == BActiveHeight) {
    BState = activated;
    ApplyRulesForBFromNextBlock();
    /* B can be reused, immediately */
 }

'''Failure: Timeout'''
A soft fork proposal should include a ''timeout''.  This is measured
as the beginning of a calendar year as per this table (suggested
three years from drafting the soft fork proposal):

Timeout Year    >= Seconds              Timeout Year    >= Seconds
2018            1514764800              2026            1767225600
2019            1546300800              2027            1798761600
2020            1577836800              2028            1830297600
2021            1609459200              2029            1861920000
2022            1640995200              2030            1893456000
2023            1672531200              2031            1924992000
2024            1704067200              2032            1956528000
2025            1735689600              2033            1988150400

If the soft fork still not ''locked-in'' and the
GetMedianTimePast() of a block following a retarget period is at or
past this timeout, miners should cease setting this bit.

 if (NextBlockHeight % 2016 == 0) {
    if (BState == defined && GetMedianTimePast(nextblock) >= BFinalYear) {
         BState = failed;
    }
 }

After another retarget period (to allow detection of buggy miners),
the bit may be reused.

'''Warning system'''
To support upgrade warnings, an extra "unknown upgrade" is tracked, using the "implicit bit" mask = (block.nVersion & ~expectedVersion) != 0. Mask will be non-zero whenever an unexpected bit is set in nVersion.  Whenever lock-in for the unknown upgrade is detected, the software should warn loudly about the upcoming soft fork.  It should warn even more loudly after the next retarget period.

'''Forks'''
It should be noted that the states are maintained along block chain
branches, but may need recomputation when a reorganization happens.

===Support for future changes===

The mechanism described above is very generic, and variations are possible for future soft forks. Here are some ideas that can be taken into account.

'''Modified thresholds'''
The 95% threshold (based on in BIP 34) does not have to be maintained for eternity, but changes should take the effect on the warning system into account. In particular, having a lock-in threshold that is incompatible with the one used for the warning system may have long-term effects, as the warning system cannot rely on a permanently detectable condition anymore.

'''Conflicting soft forks'''
At some point, two mutually exclusive soft forks may be proposed. The naive way to deal with this is to never create software that implements both, but that is a making a bet that at least one side is guaranteed to lose. Better would be to encode "soft fork X cannot be locked-in" as consensus rule for the conflicting soft fork - allowing software that supports both, but can never trigger conflicting changes.

'''Multi-stage soft forks'''
Soft forks right now are typically treated as booleans: they go from an inactive to an active state in blocks. Perhaps at some point there is demand for a change that has a larger number of stages, with additional validation rules that get enabled one by one. The above mechanism can be adapted to support this, by interpreting a combination of bits as an integer, rather than as isolated bits. The warning system is compatible with this, as (nVersion & ~nExpectedVersion) will always be non-zero for increasing integers.

== Rationale ==

The failure timeout allows eventual reuse of bits even if a soft fork was
never activated, so it's clear that the new use of the bit refers to a
new BIP.  It's deliberately very course grained, to take into account
reasonable development and deployment delays.  There are unlikely to be
enough failed proposals to cause a bit shortage.

The fallow period at the conclusion of a soft fork attempt allows some
detection of buggy clients, and allows time for warnings and software
upgrades for successful soft forks.

From ithkuil at gmail.com  Mon Sep 14 01:46:57 2015
From: ithkuil at gmail.com (Jason Livesay)
Date: Mon, 14 Sep 2015 01:46:57 +0000
Subject: [bitcoin-dev] Quick Bitcoin/Pre-Christmas modest blocksize max
	increase
Message-ID: <CAORTeX=4pCAwnPSkLRb4w0vh116ZtTKJfq-RkeU69Fp67CwinQ@mail.gmail.com>

After studying the issues I believe that the situation warrants a
short-term modest blockchain increase.  Somewhere between 2mb-5mb, whatever
the community will swallow.  I recommend that happen before the winter
shopping rush.

Then, because of the fundamental technical limitations of scaling, a new
system needs to be adopted for fast transactions.  To maintain momentum
etc., the new system ultimately settles with traditional bitcoins.

In order to keep the existing brand momentum, network, and business
investment, I believe the smoothest path forward is to build a new,
additional system re-using the bitcoin name.  I suggest this new system
come packaged with the bitcoin core client and be referred to as
QuickBitcoin or qbtc or something similar.  As far as the public is
concerned it could simply continue to be called bitcoin.  The system will
work on top of traditional bitcoins but have a mechanism for more/faster
transactions.  Exactly what mechanism doesn't have to be perfect, it just
needs to be reasonably secure/useful and something that the community will
accept.

I believe this is the best way to scale bitcoin while maintaining the
strength of its existing network,  community, and branding.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150914/11b8f27b/attachment.html>

From admin at glados.cc  Mon Sep 14 15:13:08 2015
From: admin at glados.cc (gladoscc)
Date: Tue, 15 Sep 2015 01:13:08 +1000
Subject: [bitcoin-dev] Quick Bitcoin/Pre-Christmas modest blocksize max
	increase
In-Reply-To: <CAORTeX=4pCAwnPSkLRb4w0vh116ZtTKJfq-RkeU69Fp67CwinQ@mail.gmail.com>
References: <CAORTeX=4pCAwnPSkLRb4w0vh116ZtTKJfq-RkeU69Fp67CwinQ@mail.gmail.com>
Message-ID: <CAL7-sS2HG2zbFqfzboe3LHhthwtBzZSR3pMtPikx-8fL8XD4sA@mail.gmail.com>

I appreciate your interest in Bitcoin, but I trust that you understand your
proposal adds nothing to the current discussion and recommend you read more
emails from this mailing list.
On 14/09/2015 11:47 am, "Jason Livesay via bitcoin-dev" <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> After studying the issues I believe that the situation warrants a
> short-term modest blockchain increase.  Somewhere between 2mb-5mb, whatever
> the community will swallow.  I recommend that happen before the winter
> shopping rush.
>
> Then, because of the fundamental technical limitations of scaling, a new
> system needs to be adopted for fast transactions.  To maintain momentum
> etc., the new system ultimately settles with traditional bitcoins.
>
> In order to keep the existing brand momentum, network, and business
> investment, I believe the smoothest path forward is to build a new,
> additional system re-using the bitcoin name.  I suggest this new system
> come packaged with the bitcoin core client and be referred to as
> QuickBitcoin or qbtc or something similar.  As far as the public is
> concerned it could simply continue to be called bitcoin.  The system will
> work on top of traditional bitcoins but have a mechanism for more/faster
> transactions.  Exactly what mechanism doesn't have to be perfect, it just
> needs to be reasonably secure/useful and something that the community will
> accept.
>
> I believe this is the best way to scale bitcoin while maintaining the
> strength of its existing network,  community, and branding.
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150915/95fe131b/attachment.html>

From arthur at bitcoin-fr.io  Mon Sep 14 18:57:01 2015
From: arthur at bitcoin-fr.io (Arthur - bitcoin-fr.io)
Date: Mon, 14 Sep 2015 18:57:01 +0000
Subject: [bitcoin-dev] URI scheme for signing and verifying messages
Message-ID: <c5f5105e2d5b9cc1873f84cb0b172285@rainloop.aaawop.com>

Hi,I realized that there isn't any way to ask for a signature (or to verify a message) as easily you can do when requesting a payment using a bitcoin URI scheme (BIP0021).I think a URI scheme to use the signing tools in bitcoin core might be useful, and with a proper consensus it could become available in most bitcoin clients who already support message signing/verifying and payment url (or QRCode) and enable new uses of bitcoin signatures.A way to gain proper consensus is going through a BIP, so that's why I'm here: to present my idea publicly before going any further (draft BIP and reference implementation).Some thoughts?- like BIP0021: "Bitcoin clients MUST NOT act on URIs without getting the user's authorization." so signing requires the user to manually approve the process?- it could use the same URI scheme than BIP0021 with an additional parameter (ex: signaction=) or use another one like BIP121 (ex: btcsig:)PS : I'll also post a topic in "Development & Technical Discussion" section on Bitcointalk
?--Arthur Bouquet
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150914/c6f3afb9/attachment.html>

From eric at voskuil.org  Mon Sep 14 19:54:39 2015
From: eric at voskuil.org (Eric Voskuil)
Date: Mon, 14 Sep 2015 12:54:39 -0700
Subject: [bitcoin-dev] BIP-38 issue and altchain support
Message-ID: <55F725FF.8030507@voskuil.org>

In the integration of BIP-38 into libbitcoin we ran into two issues.

First, the scenario that justifies the "confirmation code" is flawed. We
have implemented full support for this, but have also marked it as
deprecated.

I am seeking counter arguments, in case there is some scenario that we
haven't imagined where it might be useful. Details here:

[TLDR: the confirmation code cannot prove anything about the owner's
ability to spend from the public-key/address that it confirms.]

https://github.com/libbitcoin/libbitcoin/wiki/BIP38-Security-Considerations

Second, BIP-38 envisions altchain integration but doesn't specify it. We
have implemented the capability, documented here:

[TLDR: incorporate the payment address version into the last byte of the
encoded encrypted key prefixes, with backward compatibility]

https://github.com/libbitcoin/libbitcoin/wiki/Altchain-Encrypted-Private-Keys

If there is sufficient support I'll write up a Proposal that modifies
BIP-38.

Thanks to Neill Miller for the libbitcoin and bx BIP-38 pull requests.

e

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 473 bytes
Desc: OpenPGP digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150914/0b841467/attachment-0001.sig>

From thomas.kerin at gmail.com  Mon Sep 14 23:51:27 2015
From: thomas.kerin at gmail.com (Thomas Kerin)
Date: Tue, 15 Sep 2015 00:51:27 +0100
Subject: [bitcoin-dev] URI scheme for signing and verifying messages
In-Reply-To: <c5f5105e2d5b9cc1873f84cb0b172285@rainloop.aaawop.com>
References: <c5f5105e2d5b9cc1873f84cb0b172285@rainloop.aaawop.com>
Message-ID: <CAHv+tb5ym=bEdGGAYGqKqNXfVCESmt924i+vajavprnBrbhvbg@mail.gmail.com>

I think it would be more akin to bip70. I have a similar proposal, largely
already written up around this. I'm very interested in having this for
multi signature wallets.
On 14 Sep 2015 8:06 pm, "Arthur - bitcoin-fr.io via bitcoin-dev" <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> Hi,
> I realized that there isn't any way to ask for a signature (or to verify a
> message) as easily you can do when requesting a payment using a bitcoin URI
> scheme (BIP0021).
> I think a URI scheme to use the signing tools in bitcoin core might be
> useful, and with a proper consensus it could become available in most
> bitcoin clients who already support message signing/verifying and payment
> url (or QRCode) and enable new uses of bitcoin signatures.
> A way to gain proper consensus is going through a BIP, so that's why I'm
> here: to present my idea publicly before going any further (draft BIP and
> reference implementation).
> Some thoughts
>  - like BIP0021: "Bitcoin clients MUST NOT act on URIs without getting the
> user's authorization." so signing requires the user to manually approve the
> process
>  - it could use the same URI scheme than BIP0021 with an additional
> parameter (ex: signaction=<verify/sign>) or use another one like BIP121
> (ex: btcsig:)
> PS : I'll also post a topic in "Development & Technical Discussion"
> section on Bitcointalk
>
> --
> Arthur Bouquet
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150915/bef6bd06/attachment.html>

From luke at dashjr.org  Tue Sep 15 04:03:40 2015
From: luke at dashjr.org (Luke Dashjr)
Date: Tue, 15 Sep 2015 04:03:40 +0000
Subject: [bitcoin-dev] URI scheme for signing and verifying messages
In-Reply-To: <c5f5105e2d5b9cc1873f84cb0b172285@rainloop.aaawop.com>
References: <c5f5105e2d5b9cc1873f84cb0b172285@rainloop.aaawop.com>
Message-ID: <201509150403.40909.luke@dashjr.org>

On Monday, September 14, 2015 6:57:01 PM Arthur - bitcoin-fr.io via bitcoin-
dev wrote:
> Hi,I realized that there isn't any way to ask for a signature (or to verify
> a message) as easily you can do when requesting a payment using a bitcoin
> URI scheme (BIP0021).I think a URI scheme to use the signing tools in
> bitcoin core might be useful, and with a proper consensus it could become
> available in most bitcoin clients who already support message
> signing/verifying and payment url (or QRCode) and enable new uses of
> bitcoin signatures.A way to gain proper consensus is going through a BIP,
> so that's why I'm here: to present my idea publicly before going any
> further (draft BIP and reference implementation).Some thoughts - like
> BIP0021: "Bitcoin clients MUST NOT act on URIs without getting the user's
> authorization." so signing requires the user to manually approve the
> process - it could use the same URI scheme than BIP0021 with an additional
> parameter (ex: signaction=) or use another one like BIP121 (ex: btcsig:)PS
> : I'll also post a topic in "Development & Technical Discussion" section
> on Bitcointalk --Arthur Bouquet

I think probably the whole signed message thing needs to be rethought. The 
most common "uses" today seem to be insecure cases that it doesn't actually 
work in: people trying to prove ownership of bitcoins and/or that they sent 
bitcoins (current signed messages can do neither). Ideally, whatever the new 
method is should also avoid using the same key as for signing transactions, 
since the public key is technically private information. Furthermore, since 
addresses are semi-deprecated (by the payment protocol), I'm not sure it 
makes sense to do this without designing an entire authentication system, 
which may be rather complex.

Luke

From jgarzik at gmail.com  Tue Sep 15 04:10:37 2015
From: jgarzik at gmail.com (Jeff Garzik)
Date: Tue, 15 Sep 2015 00:10:37 -0400
Subject: [bitcoin-dev] libconsensus and bitcoin development process
Message-ID: <CADm_WcY8Vy+k+5BaBS+jV6D6tmSXrok8rAxoPxxKOzUhyPWgMg@mail.gmail.com>

[collating a private mail and a github issue comment, moving it to a
better forum]

On libconsensus
---------------
In general there exists the reasonable goal to move consensus state
and code to a specific, separate lib.

To someone not closely reviewing the seemingly endless stream of
libconsensus refactoring PRs, the 10,000 foot view is that there is a
rather random stream of refactors that proceed in fits and starts
without apparent plan or end other than a one sentence "isolate
consensus state and code" summary.

I am hoping that
* There is some plan
* We will not see a five year stream of random consensus code movement
patches causing lots of downstream developer headaches.

I read every code change in every pull request that comes into
github/bitcoin/bitcoin with three exceptions:
* consensus code movement changes - too big, too chaotic, too
frequent, too unfocused, laziness guarantees others will inevitably
ACK it without me.
* some non-code changes (docs)
* ignore 80% of the Qt changes

As with any sort of refactoring, they are easy to prove correct, easy
to reason, and therefore quick and easy to ACK and merge.

Refactors however have a very real negative impact.
bitcoin/bitcoin.git is not only the source tree in the universe.
Software engineers at home, at startups, and at major companies are
maintaining branches of their own.

It is very very easy to fall into a trap where a project is merging
lots of cosmetic changes and not seeing the downstream ripple effects.
Several people complained to me at the conference about all the code
movement changes breaking their own work, causing them to stay on
older versions of bitcoin due to the effort required to rebase to each
new release version - and I share those complaints.

Complex code changes with longer development cycles than simple code
movement patches keep breaking.  It is very frustrating, and causes
folks to get trapped between a rock and a hard place:
- Trying to push non-trivial changes upstream is difficult, for normal
and reasonable reasons (big important changes need review etc.).
- Maintaining non-trivial changes out of tree is also painful, for the
aforementioned reasons.

Reasonable work languishes in constant-rebase hell, and incentivizes
against keeping up with the latest tree.


Aside from the refactor, libconsensus appears to be engineering in the
dark.  Where is any sort of plan?  I have low standards - a photo of a
whiteboard or youtube clip will do.

The general goal is good.   But we must not stray into unfocused
engineering for a non-existent future library user.

The higher priority must be given to having a source code base that
maximizes the collective developers' ability to maintain The Router --
the core bitcoin full node P2P engine.

I recommend time-based bursts of code movement changes.  See below;
for example, just submit & merge code movement changes on the first
week of every 2nd month.  Code movement changes are easy to create
from scratch once a concrete goal is known.  The coding part is
trivial and takes no time.

As we saw in the Linux kernel - battle lessons hard learned - code
movement and refactors have often unseen negative impact on downstream
developers working on more complicated changes that have more positive
impact to our developers and users.


On Bitcoin development release cycles & process
------------------------------------------------------------------

As I've outlined in the past, the Linux kernel maintenance phases
address some of these problems.  The merge window into git master
opens for 1 week, a very chaotic week full of merging (and rebasing),
and then the merge window closes.  Several weeks follow as the "dust
settles" -- testing, bug fixing, moving in parallel OOB with
not-yet-ready development.  Release candidates follow, then the
release, then the cycle repeats.

IMO a merge window approach fixes some of the issues with refactoring,
as well as introduces some useful -developer discipline- into the
development process.  Bitcoin Core still needs rapid iteration --
another failing of the current project -- and so something of a more
rapid pace is needed:
- 1st week of each month, merge changes.  Lots of rebasing during this week.
- remaining days of the month, test, bug fix
- release at end of month

If changes are not ready for merging, then so be it, they wait until
next month's release.  Some releases have major features, some
releases are completely boring and offer little of note.  That is the
nature of time-based development iteration.  It's like dollar cost
averaging, a bit.


And frankly, I would like to close all github pull requests that are
not ready to merge That Week.  I'm as guilty of this as any, but that
stuff just languishes.  Excluding a certain category of obvious-crap,
pull requests tend to default to a state of either (a) rapid merging,
(b) months-long issues/projects, (c) limbo.

Under a more time-based approach, a better pull request process would be to
* Only open pull requests if it's a bug fix, or the merge window is
open and the change is ready to be merged in the developer's opinion.
* Developers CC bitcoin-dev list to discuss Bitcoin Core-bound projects
* Developers maintain and publish projects via their own git trees
* Pull requests should be closed if unmerged after 7 days, unless it
is an important bug fix etc.

The problem with projects like libconsensus is that they can get
unfocused and open ended.  Code movement changes in particular are
cheap to generate.  It is low developer cost for the developer to
iterate all the way to the end state, see what that looks like, and
see if people like it.  That end state is not something you would
merge all in one go.  I would likely stash that tree, and then start
again, seek the most optimal and least disruptive set of refactors,
and generate and merge those into bitcoin/bitcoin.git in a time-based,
paced manner.  Announce the pace ahead of time - "cosmetic stuff that
breaks your patches will be merged 1st week of every second month"

To underscore, the higher priority must be given to having a source
code base and disciplined development process that maximizes the
collective developers' ability to maintain The Router that maintains
most of our network.

Modularity, refactoring, cleaning up grotty code generates a deep
seated happiness in many engineers.  Field experience however shows
refactoring is a never ending process which sometimes gets in the way
of More Important Work.

From btcdrak at gmail.com  Tue Sep 15 09:55:34 2015
From: btcdrak at gmail.com (Btc Drak)
Date: Tue, 15 Sep 2015 10:55:34 +0100
Subject: [bitcoin-dev] libconsensus and bitcoin development process
In-Reply-To: <CADm_WcY8Vy+k+5BaBS+jV6D6tmSXrok8rAxoPxxKOzUhyPWgMg@mail.gmail.com>
References: <CADm_WcY8Vy+k+5BaBS+jV6D6tmSXrok8rAxoPxxKOzUhyPWgMg@mail.gmail.com>
Message-ID: <CADJgMzvSUTrPZa0mQvBsQaYkMN3NPXVB_Ay6RJNivq-agUoUww@mail.gmail.com>

I also share a lot of Jeff's concerns about refactoring and have voiced
them several times on IRC and in private to Jorge, Wladamir and Greg. I
meant to do a write up but never got around to it. Jeff has quite
eloquently stated the various problems. I would like to share my thoughts
on the matter because we really do need to come up with a plan on how this
issue is dealt with.

Obviously, Bitcoin Core is quite tightly coupled at the moment and
definitely needs extensive modularisation. Such work will inevitably
require lots of bulk code moves and then finer refactoring. However, it
requires proper planning because there are lots of effects and consequences
for other people contributing to Core and also downstream projects relying
on Core:

1. Refactoring often causes other pull requests to diverge and require
rebasing. Continual refactoring can put PRs in "rebase hell" and puts a big
stress on contributors (many of whom are part time).

2. Version to version, Bitcoin Core changes significantly in structure. 0.9
to 0.10 is unrecognisable. 0.10 to 0.11 is even more so. This makes makes
it hard to follow release to release and the net result is less people
upgrade (especially think of miners trying to keep their patch sets working
while trying not to disrupt or risk their mining operations).

3. Continual refactoring increases risk: we're human, and mistakes will
slip through peer review. This is especially concerning with consensus
critical code and this makes it difficult to merge such refactoring often,
which of course exacerbates the problem.

The net negative consequence is it is harder to contribute to Core, harder
for the Core maintainers to merge and harder for downstream/dependent
projects/implementations to keep up.

Suggested Way Forward
---------------------------------

With the understanding that refactored code by definition must not change
behaviour. There are three major kinds of refactoring:

1. code moves (e.g. separating concerns into different files);
2. code style;
3. structural optimisation and consolidation (reducing LOC, separating
concerns, encapsulation etc).

Code moves(1) and CS(2) are easy to peer review and merge quickly. The
third kind(3) requires deeper analysis to ensure that while the code
changed, the behaviour (including any bugs) did not.

We must resist all temptation to fix bugs or tack on minor fixes and tweaks
during refactoring: pull requests should only be refactoring only, with no
net change to behaviour. Keeping discipline makes it much easier to verify
and peer review and this faster to merge.

With respect to Code moves and CS, I believe we should have a "refactoring
fortnight" where we so the bulk of code move-only refactoring plus CS where
necessary. This is by fat the most disruptive kind of change because it
widely affects other PRs mergeability. We should aim to get most of this
done in one go, so that it's not happening in dribs and drabs over months
and many releases. Once done, it gives everyone a good idea to the overall
new structure and where one can expect to find things in the future. The
idea here is to help orientation and not have to continuously hunt for
where things have moved to.

To be clear, I am strongly suggesting code move-only refactoring PRs not be
mixed with anything else. Same for CS changes. This makes the PRs extremely
easy to vet and thus quick to merge.

Towards this end, maybe there should be an IRC meeting to agree the initial
moves, then someone who has the stomach for it can get on and do it -
during that time, we do not merge anything else. We need to bite the bullet
and break the back out of code moves.

With regards to CS, I think we do need to get CS right, because a continual
dribble of CS changes also makes diffs between releases less easy to
follow. Much of CS checking can be automated by the continuous integration
so authors can get it right easily. It can be just like a Travis check.

With respect to the 3rd kind of refactoring, we need to set some standards
and goals and aim for some kind of consistency. Refactoring needs to fulfil
certain goals and criterion otherwise contributors will always find a
reason to fiddle over and over forever. Obvious targets here can be things
like proper encapsulation and separation of concerns.

Overall, refactoring should be merged quickly, but only on a schedule so it
doesn't cause major disruption to others.

Obviously the third kind of refactoring more complex and time consuming and
will need to occur over time, but it should happen in defined steps. As
Jeff said, one week a month, or maybe one month a release. In any case,
refactoring changes should be quickly accepted or rejected by the project
maintainer and not left hanging.

Finally, refactoring should *always* be uncontroversial because essentially
functionality is not changing. If functionality changes (e.g. you try to
sneak in a big fix or feature tweak "because it's small") the PR should be
rejected outright. Additionally, if we break down refactoring into the
three kinds stated above, peer review will be much more straightforward.



On Tue, Sep 15, 2015 at 5:10 AM, Jeff Garzik via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> [collating a private mail and a github issue comment, moving it to a
> better forum]
>
> On libconsensus
> ---------------
> In general there exists the reasonable goal to move consensus state
> and code to a specific, separate lib.
>
> To someone not closely reviewing the seemingly endless stream of
> libconsensus refactoring PRs, the 10,000 foot view is that there is a
> rather random stream of refactors that proceed in fits and starts
> without apparent plan or end other than a one sentence "isolate
> consensus state and code" summary.
>
> I am hoping that
> * There is some plan
> * We will not see a five year stream of random consensus code movement
> patches causing lots of downstream developer headaches.
>
> I read every code change in every pull request that comes into
> github/bitcoin/bitcoin with three exceptions:
> * consensus code movement changes - too big, too chaotic, too
> frequent, too unfocused, laziness guarantees others will inevitably
> ACK it without me.
> * some non-code changes (docs)
> * ignore 80% of the Qt changes
>
> As with any sort of refactoring, they are easy to prove correct, easy
> to reason, and therefore quick and easy to ACK and merge.
>
> Refactors however have a very real negative impact.
> bitcoin/bitcoin.git is not only the source tree in the universe.
> Software engineers at home, at startups, and at major companies are
> maintaining branches of their own.
>
> It is very very easy to fall into a trap where a project is merging
> lots of cosmetic changes and not seeing the downstream ripple effects.
> Several people complained to me at the conference about all the code
> movement changes breaking their own work, causing them to stay on
> older versions of bitcoin due to the effort required to rebase to each
> new release version - and I share those complaints.
>
> Complex code changes with longer development cycles than simple code
> movement patches keep breaking.  It is very frustrating, and causes
> folks to get trapped between a rock and a hard place:
> - Trying to push non-trivial changes upstream is difficult, for normal
> and reasonable reasons (big important changes need review etc.).
> - Maintaining non-trivial changes out of tree is also painful, for the
> aforementioned reasons.
>
> Reasonable work languishes in constant-rebase hell, and incentivizes
> against keeping up with the latest tree.
>
>
> Aside from the refactor, libconsensus appears to be engineering in the
> dark.  Where is any sort of plan?  I have low standards - a photo of a
> whiteboard or youtube clip will do.
>
> The general goal is good.   But we must not stray into unfocused
> engineering for a non-existent future library user.
>
> The higher priority must be given to having a source code base that
> maximizes the collective developers' ability to maintain The Router --
> the core bitcoin full node P2P engine.
>
> I recommend time-based bursts of code movement changes.  See below;
> for example, just submit & merge code movement changes on the first
> week of every 2nd month.  Code movement changes are easy to create
> from scratch once a concrete goal is known.  The coding part is
> trivial and takes no time.
>
> As we saw in the Linux kernel - battle lessons hard learned - code
> movement and refactors have often unseen negative impact on downstream
> developers working on more complicated changes that have more positive
> impact to our developers and users.
>
>
> On Bitcoin development release cycles & process
> ------------------------------------------------------------------
>
> As I've outlined in the past, the Linux kernel maintenance phases
> address some of these problems.  The merge window into git master
> opens for 1 week, a very chaotic week full of merging (and rebasing),
> and then the merge window closes.  Several weeks follow as the "dust
> settles" -- testing, bug fixing, moving in parallel OOB with
> not-yet-ready development.  Release candidates follow, then the
> release, then the cycle repeats.
>
> IMO a merge window approach fixes some of the issues with refactoring,
> as well as introduces some useful -developer discipline- into the
> development process.  Bitcoin Core still needs rapid iteration --
> another failing of the current project -- and so something of a more
> rapid pace is needed:
> - 1st week of each month, merge changes.  Lots of rebasing during this
> week.
> - remaining days of the month, test, bug fix
> - release at end of month
>
> If changes are not ready for merging, then so be it, they wait until
> next month's release.  Some releases have major features, some
> releases are completely boring and offer little of note.  That is the
> nature of time-based development iteration.  It's like dollar cost
> averaging, a bit.
>
>
> And frankly, I would like to close all github pull requests that are
> not ready to merge That Week.  I'm as guilty of this as any, but that
> stuff just languishes.  Excluding a certain category of obvious-crap,
> pull requests tend to default to a state of either (a) rapid merging,
> (b) months-long issues/projects, (c) limbo.
>
> Under a more time-based approach, a better pull request process would be to
> * Only open pull requests if it's a bug fix, or the merge window is
> open and the change is ready to be merged in the developer's opinion.
> * Developers CC bitcoin-dev list to discuss Bitcoin Core-bound projects
> * Developers maintain and publish projects via their own git trees
> * Pull requests should be closed if unmerged after 7 days, unless it
> is an important bug fix etc.
>
> The problem with projects like libconsensus is that they can get
> unfocused and open ended.  Code movement changes in particular are
> cheap to generate.  It is low developer cost for the developer to
> iterate all the way to the end state, see what that looks like, and
> see if people like it.  That end state is not something you would
> merge all in one go.  I would likely stash that tree, and then start
> again, seek the most optimal and least disruptive set of refactors,
> and generate and merge those into bitcoin/bitcoin.git in a time-based,
> paced manner.  Announce the pace ahead of time - "cosmetic stuff that
> breaks your patches will be merged 1st week of every second month"
>
> To underscore, the higher priority must be given to having a source
> code base and disciplined development process that maximizes the
> collective developers' ability to maintain The Router that maintains
> most of our network.
>
> Modularity, refactoring, cleaning up grotty code generates a deep
> seated happiness in many engineers.  Field experience however shows
> refactoring is a never ending process which sometimes gets in the way
> of More Important Work.
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150915/93989145/attachment-0001.html>

From arthur at bitcoin-fr.io  Tue Sep 15 10:49:36 2015
From: arthur at bitcoin-fr.io (Arthur - bitcoin-fr.io)
Date: Tue, 15 Sep 2015 10:49:36 +0000
Subject: [bitcoin-dev] URI scheme for signing and verifying messages
In-Reply-To: <201509150403.40909.luke@dashjr.org>
References: <201509150403.40909.luke@dashjr.org>
	<c5f5105e2d5b9cc1873f84cb0b172285@rainloop.aaawop.com>
Message-ID: <15ce53e7feabef3c9a40c5d3df9ff283@rainloop.aaawop.com>

September 15 2015 6:04 AM, "Luke Dashjr" <luke at dashjr.org> wrote:
> I think probably the whole signed message thing needs to be rethought. The
> most common "uses" today seem to be insecure cases that it doesn't actually
> work in: people trying to prove ownership of bitcoins and/or that they sent
> bitcoins (current signed messages can do neither). Ideally, whatever the new
> method is should also avoid using the same key as for signing transactions,
> since the public key is technically private information. Furthermore, since
> addresses are semi-deprecated (by the payment protocol), I'm not sure it
> makes sense to do this without designing an entire authentication system,
> which may be rather complex.
> 
> Luke

My proposal is about the current signing process (which exists event it it's not perfect) but it could also work with a new signing message system tomorrow. It more about give users an easier way to access existing tools than the "sign message thing" itself.

BTW I'm aware of privacy issues, but could you elaborate on why the use case your are referring to doesn't actually work?
Here are a use of bitcoin signatures ( https://bitcointalk.org/index.php?topic=497545.0 ) to speak about a real case.

--
Arthur

From john at sci.ph  Tue Sep 15 11:10:54 2015
From: john at sci.ph (John Bailon)
Date: Tue, 15 Sep 2015 19:10:54 +0800
Subject: [bitcoin-dev] Instant exchange rates URI scheme
Message-ID: <CA+Y+xvT6Qn0zNT4=vKgyQBwF4n3m+bRp=F7zq2CtwK+dQAmgzg@mail.gmail.com>

 Hello,

I'd like to propose a BIP for a standard URI scheme to allow wallet
operators that implement instant exchange or pegging to other currencies,
cryptocurrencies or asset classes to allow for interoperable communications
of rates and other pertinent information.

The idea is to include in the wallet address as parameters information that
supplements the presentation of a proposed transaction.

For example, a wallet operator that instantly exchanges bitcoin to gold
would present a wallet address as follows:
bitcoin:1JohnxNT6jRzhu3H1wgVFbSGKmHP4EUjUV?currency=xau&rate=0.2084&expires=1458432000

Wherein:
<currency> :  the currency, cryptocurrency or asset that the transaction
will end up as encoded in ISO 4217 if applicable.
<rate> : the bitcoin to <currency> rate as dictated by receiving wallet
<expires> : unix timestamp of when the rate loses validity

This would allow the sending wallet the ability to present up-to-date
exchange rates. When, for example, a wallet operator that pegs to the USD
scans the address above, it would be able to present to the user the
following information:

1. USD to XAU rate
2. How much XAU will be received by the address
3. How long before the rates expires


Thoughts?


Regards,
John
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150915/d7589516/attachment.html>

From luke at dashjr.org  Tue Sep 15 12:08:57 2015
From: luke at dashjr.org (Luke Dashjr)
Date: Tue, 15 Sep 2015 12:08:57 +0000
Subject: [bitcoin-dev] URI scheme for signing and verifying messages
In-Reply-To: <15ce53e7feabef3c9a40c5d3df9ff283@rainloop.aaawop.com>
References: <201509150403.40909.luke@dashjr.org>
	<c5f5105e2d5b9cc1873f84cb0b172285@rainloop.aaawop.com>
	<15ce53e7feabef3c9a40c5d3df9ff283@rainloop.aaawop.com>
Message-ID: <201509151208.58326.luke@dashjr.org>

On Tuesday, September 15, 2015 10:49:36 AM Arthur - bitcoin-fr.io wrote:
> September 15 2015 6:04 AM, "Luke Dashjr" <luke at dashjr.org> wrote:
> > I think probably the whole signed message thing needs to be rethought.
> > The most common "uses" today seem to be insecure cases that it doesn't
> > actually work in: people trying to prove ownership of bitcoins and/or
> > that they sent bitcoins (current signed messages can do neither).
> > Ideally, whatever the new method is should also avoid using the same key
> > as for signing transactions, since the public key is technically private
> > information. Furthermore, since addresses are semi-deprecated (by the
> > payment protocol), I'm not sure it makes sense to do this without
> > designing an entire authentication system, which may be rather complex.
> > 
> > Luke
> 
> My proposal is about the current signing process (which exists event it
> it's not perfect) but it could also work with a new signing message system
> tomorrow. It more about give users an easier way to access existing tools
> than the "sign message thing" itself.

One of my concerns is that making the existing signatures even easier will 
cause incompatible uses to become more prolific and accepted, increasing the 
overall risk. Hence my recommendation to satisfy these clearly-existing use 
cases with a safe signature *first*.

> BTW I'm aware of privacy issues, but could you elaborate on why the use
> case your are referring to doesn't actually work?

The signed message proves that the person who *receives* payment with the 
address agrees to a given message/contract.

It is therefore appropriate and a best practice for web wallet providers 
(inherent problems with webwallets aside) to allow users to sign messages 
with their deposit addresses. When bitcoins are received by this address, the 
transaction creates a low-level UTXO representing the bitcoins *in the 
wallet*, but this UTXO is not associated with the address itself. Therefore, 
it is entirely possible that this UTXO remains unspent/valid on the 
blockchain even after the user in question has spent their entire balance at 
the webwallet and therefore such a signature proves only that they once 
received the payment, but *not* that they presently still have the bitcoins 
received.

Furthermore, it is proper for the UTXO to be redeemed at a low-level by the 
wallet when an entirely unrelated user is sending a transaction. In such a 
circumstance, the original recipient of the bitcoins would still be able to 
sign a message, even though they have nothing to do with nor any right to the 
goods/services purchased with the transaction redeeming that UTXO.

> Here are a use of
> bitcoin signatures ( https://bitcointalk.org/index.php?topic=497545.0 ) to
> speak about a real case.

Yes, there are a few good use cases for the current signed messages, but they 
appear to be a minority at the moment. I suspect implementing any URI-based 
signing would actually make them more difficult as well, since it is 
additional code on the requester's part.

Luke

From gubatron at gmail.com  Tue Sep 15 12:48:35 2015
From: gubatron at gmail.com (Angel Leon)
Date: Tue, 15 Sep 2015 08:48:35 -0400
Subject: [bitcoin-dev] Instant exchange rates URI scheme
In-Reply-To: <CA+Y+xvT6Qn0zNT4=vKgyQBwF4n3m+bRp=F7zq2CtwK+dQAmgzg@mail.gmail.com>
References: <CA+Y+xvT6Qn0zNT4=vKgyQBwF4n3m+bRp=F7zq2CtwK+dQAmgzg@mail.gmail.com>
Message-ID: <CADZB0_ZLAFUYSghfNi5t=cM1+Lv8dxdh-BaRAFNTt9AH30Z8-Q@mail.gmail.com>

might want to specify there that the rate being sent is out of USD.

http://twitter.com/gubatron

On Tue, Sep 15, 2015 at 7:10 AM, John Bailon via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> Hello,
>
> I'd like to propose a BIP for a standard URI scheme to allow wallet
> operators that implement instant exchange or pegging to other currencies,
> cryptocurrencies or asset classes to allow for interoperable communications
> of rates and other pertinent information.
>
> The idea is to include in the wallet address as parameters information
> that supplements the presentation of a proposed transaction.
>
> For example, a wallet operator that instantly exchanges bitcoin to gold
> would present a wallet address as follows:
>
> bitcoin:1JohnxNT6jRzhu3H1wgVFbSGKmHP4EUjUV?currency=xau&rate=0.2084&expires=1458432000
>
> Wherein:
> <currency> :  the currency, cryptocurrency or asset that the transaction
> will end up as encoded in ISO 4217 if applicable.
> <rate> : the bitcoin to <currency> rate as dictated by receiving wallet
> <expires> : unix timestamp of when the rate loses validity
>
> This would allow the sending wallet the ability to present up-to-date
> exchange rates. When, for example, a wallet operator that pegs to the USD
> scans the address above, it would be able to present to the user the
> following information:
>
> 1. USD to XAU rate
> 2. How much XAU will be received by the address
> 3. How long before the rates expires
>
>
> Thoughts?
>
>
> Regards,
> John
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150915/246bc9b0/attachment.html>

From john at sci.ph  Tue Sep 15 12:56:27 2015
From: john at sci.ph (John Bailon)
Date: Tue, 15 Sep 2015 05:56:27 -0700 (PDT)
Subject: [bitcoin-dev] Instant exchange rates URI scheme
In-Reply-To: <CADZB0_ZLAFUYSghfNi5t=cM1+Lv8dxdh-BaRAFNTt9AH30Z8-Q@mail.gmail.com>
References: <CADZB0_ZLAFUYSghfNi5t=cM1+Lv8dxdh-BaRAFNTt9AH30Z8-Q@mail.gmail.com>
Message-ID: <1442321787241.25b10266@Nodemailer>

Wouldn't need to. The <rate> is of BTC to <currency>. BTC is the intermediary currency, as is basically how it becomes in this "payment rails" method.

To the receiver, it wouldn't matter what currency the transaction came from.

On Tue, Sep 15, 2015 at 8:48 PM, Angel Leon <gubatron at gmail.com> wrote:

> might want to specify there that the rate being sent is out of USD.
> http://twitter.com/gubatron
> On Tue, Sep 15, 2015 at 7:10 AM, John Bailon via bitcoin-dev <
> bitcoin-dev at lists.linuxfoundation.org> wrote:
>> Hello,
>>
>> I'd like to propose a BIP for a standard URI scheme to allow wallet
>> operators that implement instant exchange or pegging to other currencies,
>> cryptocurrencies or asset classes to allow for interoperable communications
>> of rates and other pertinent information.
>>
>> The idea is to include in the wallet address as parameters information
>> that supplements the presentation of a proposed transaction.
>>
>> For example, a wallet operator that instantly exchanges bitcoin to gold
>> would present a wallet address as follows:
>>
>> bitcoin:1JohnxNT6jRzhu3H1wgVFbSGKmHP4EUjUV?currency=xau&rate=0.2084&expires=1458432000
>>
>> Wherein:
>> <currency> :  the currency, cryptocurrency or asset that the transaction
>> will end up as encoded in ISO 4217 if applicable.
>> <rate> : the bitcoin to <currency> rate as dictated by receiving wallet
>> <expires> : unix timestamp of when the rate loses validity
>>
>> This would allow the sending wallet the ability to present up-to-date
>> exchange rates. When, for example, a wallet operator that pegs to the USD
>> scans the address above, it would be able to present to the user the
>> following information:
>>
>> 1. USD to XAU rate
>> 2. How much XAU will be received by the address
>> 3. How long before the rates expires
>>
>>
>> Thoughts?
>>
>>
>> Regards,
>> John
>>
>> _______________________________________________
>> bitcoin-dev mailing list
>> bitcoin-dev at lists.linuxfoundation.org
>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>
>>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150915/e632b30d/attachment-0001.html>

From arthur at bitcoin-fr.io  Tue Sep 15 13:21:56 2015
From: arthur at bitcoin-fr.io (Arthur - bitcoin-fr.io)
Date: Tue, 15 Sep 2015 13:21:56 +0000
Subject: [bitcoin-dev] URI scheme for signing and verifying messages
In-Reply-To: <201509151208.58326.luke@dashjr.org>
References: <201509151208.58326.luke@dashjr.org>
	<201509150403.40909.luke@dashjr.org>
	<c5f5105e2d5b9cc1873f84cb0b172285@rainloop.aaawop.com>
	<15ce53e7feabef3c9a40c5d3df9ff283@rainloop.aaawop.com>
Message-ID: <e11d23636bee1bfc73e89b375c2844ac@rainloop.aaawop.com>

September 15 2015 2:10 PM, "Luke Dashjr" <luke at dashjr.org> wrote:
> On Tuesday, September 15, 2015 10:49:36 AM Arthur - bitcoin-fr.io wrote:
> 
>> September 15 2015 6:04 AM, "Luke Dashjr" <luke at dashjr.org> wrote:
>>> I think probably the whole signed message thing needs to be rethought.
>>> The most common "uses" today seem to be insecure cases that it doesn't
>>> actually work in: people trying to prove ownership of bitcoins and/or
>>> that they sent bitcoins (current signed messages can do neither).
>>> Ideally, whatever the new method is should also avoid using the same key
>>> as for signing transactions, since the public key is technically private
>>> information. Furthermore, since addresses are semi-deprecated (by the
>>> payment protocol), I'm not sure it makes sense to do this without
>>> designing an entire authentication system, which may be rather complex.
>>> 
>>> Luke
>> 
>> My proposal is about the current signing process (which exists event it
>> it's not perfect) but it could also work with a new signing message system
>> tomorrow. It more about give users an easier way to access existing tools
>> than the "sign message thing" itself.
> 
> One of my concerns is that making the existing signatures even easier will
> cause incompatible uses to become more prolific and accepted, increasing the
> overall risk. Hence my recommendation to satisfy these clearly-existing use
> cases with a safe signature *first*.
> 

Ideally yes, but it will take some time to make a new signature system.
I could also propose a URI scheme that will work with a future implementation but be compatible with the current one explaining its limitations (ex: sigversion=1 to use the current system, default value is sigversion=2 which won't work until a new system is developped).

>> BTW I'm aware of privacy issues, but could you elaborate on why the use
>> case your are referring to doesn't actually work?
> 
> The signed message proves that the person who *receives* payment with the
> address agrees to a given message/contract.
> 
> It is therefore appropriate and a best practice for web wallet providers
> (inherent problems with webwallets aside) to allow users to sign messages
> with their deposit addresses. When bitcoins are received by this address, the
> transaction creates a low-level UTXO representing the bitcoins *in the
> wallet*, but this UTXO is not associated with the address itself. Therefore,
> it is entirely possible that this UTXO remains unspent/valid on the
> blockchain even after the user in question has spent their entire balance at
> the webwallet and therefore such a signature proves only that they once
> received the payment, but *not* that they presently still have the bitcoins
> received.
> 
> Furthermore, it is proper for the UTXO to be redeemed at a low-level by the
> wallet when an entirely unrelated user is sending a transaction. In such a
> circumstance, the original recipient of the bitcoins would still be able to
> sign a message, even though they have nothing to do with nor any right to the
> goods/services purchased with the transaction redeeming that UTXO.
> 
>> Here are a use of
>> bitcoin signatures ( https://bitcointalk.org/index.php?topic=497545.0 ) to
>> speak about a real case.
> 
> Yes, there are a few good use cases for the current signed messages, but they
> appear to be a minority at the moment. I suspect implementing any URI-based
> signing would actually make them more difficult as well, since it is
> additional code on the requester's part.

Ok,thx for your answer, I actually agree with you up until the last sentence. (if not I wouldn't propose this URI scheme :-)

--
Arthur

From thomas.kerin at gmail.com  Tue Sep 15 14:40:44 2015
From: thomas.kerin at gmail.com (Thomas Kerin)
Date: Tue, 15 Sep 2015 15:40:44 +0100
Subject: [bitcoin-dev] Instant exchange rates URI scheme
In-Reply-To: <CA+Y+xvT6Qn0zNT4=vKgyQBwF4n3m+bRp=F7zq2CtwK+dQAmgzg@mail.gmail.com>
References: <CA+Y+xvT6Qn0zNT4=vKgyQBwF4n3m+bRp=F7zq2CtwK+dQAmgzg@mail.gmail.com>
Message-ID: <CAHv+tb7LPz4PiTu9JLLMbKu_i5U3LytRDmAeDLtV+-7ps+CPXA@mail.gmail.com>

Something very similar was posted not too long ago.

Long and sort of it is, there is no point in saying you priced in GBP, etc,
because it can vary from exchange to exchange.

To be honest, adding more things to consider at checkout time confuses
things; why not just specify the amount of Bitcoin you wish to be paid?
On 15 Sep 2015 11:11 am, "John Bailon via bitcoin-dev" <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> Hello,
>
> I'd like to propose a BIP for a standard URI scheme to allow wallet
> operators that implement instant exchange or pegging to other currencies,
> cryptocurrencies or asset classes to allow for interoperable communications
> of rates and other pertinent information.
>
> The idea is to include in the wallet address as parameters information
> that supplements the presentation of a proposed transaction.
>
> For example, a wallet operator that instantly exchanges bitcoin to gold
> would present a wallet address as follows:
>
> bitcoin:1JohnxNT6jRzhu3H1wgVFbSGKmHP4EUjUV?currency=xau&rate=0.2084&expires=1458432000
>
> Wherein:
> <currency> :  the currency, cryptocurrency or asset that the transaction
> will end up as encoded in ISO 4217 if applicable.
> <rate> : the bitcoin to <currency> rate as dictated by receiving wallet
> <expires> : unix timestamp of when the rate loses validity
>
> This would allow the sending wallet the ability to present up-to-date
> exchange rates. When, for example, a wallet operator that pegs to the USD
> scans the address above, it would be able to present to the user the
> following information:
>
> 1. USD to XAU rate
> 2. How much XAU will be received by the address
> 3. How long before the rates expires
>
>
> Thoughts?
>
>
> Regards,
> John
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150915/7a45e450/attachment.html>

From john at sci.ph  Tue Sep 15 15:02:57 2015
From: john at sci.ph (John Bailon)
Date: Tue, 15 Sep 2015 08:02:57 -0700 (PDT)
Subject: [bitcoin-dev] Instant exchange rates URI scheme
In-Reply-To: <CAHv+tb7LPz4PiTu9JLLMbKu_i5U3LytRDmAeDLtV+-7ps+CPXA@mail.gmail.com>
References: <CAHv+tb7LPz4PiTu9JLLMbKu_i5U3LytRDmAeDLtV+-7ps+CPXA@mail.gmail.com>
Message-ID: <1442329377422.86a9d355@Nodemailer>

This scheme would mostly be beneficial to end users of instant exchange wallets and would be implemented by the operators. None of the parameters would be filled up by the user by hand. It's more of enabling different wallet operators to communicate with each other and to be able to present to their end users the rates they are getting when sending from their pegged wallet to another pegged wallet. Abstracting bitcoin rates from both end users.?




To illustrate, imagine Alice who has a USD wallet wants to send JPY 10,000 to Bob who has a JPY pegged wallet.?




Alice's wallet scans Bob's wallet which tells Alice's wallet the following info:

1. Bob's BTC address

2. Bob's wallet currency is JPY

3. Bob's wallet operator is pricing BTC 1 at JPY?27,779 for the next 5 minutes.?





With these info, Alice's wallet can already derive the following:





Alice needs to send?0.35998416 BTC to send JPY 10,000. Alice's wallet can also show how much?0.35998416 BTC is in USD, which is USD 83.27. Alice's wallet can present it as follows;





"You are sending JPY 10,000 for USD 83.27 to Bob's wallet."

On Tue, Sep 15, 2015 at 10:40 PM, Thomas Kerin <thomas.kerin at gmail.com>
wrote:

> Something very similar was posted not too long ago.
> Long and sort of it is, there is no point in saying you priced in GBP, etc,
> because it can vary from exchange to exchange.
> To be honest, adding more things to consider at checkout time confuses
> things; why not just specify the amount of Bitcoin you wish to be paid?
> On 15 Sep 2015 11:11 am, "John Bailon via bitcoin-dev" <
> bitcoin-dev at lists.linuxfoundation.org> wrote:
>> Hello,
>>
>> I'd like to propose a BIP for a standard URI scheme to allow wallet
>> operators that implement instant exchange or pegging to other currencies,
>> cryptocurrencies or asset classes to allow for interoperable communications
>> of rates and other pertinent information.
>>
>> The idea is to include in the wallet address as parameters information
>> that supplements the presentation of a proposed transaction.
>>
>> For example, a wallet operator that instantly exchanges bitcoin to gold
>> would present a wallet address as follows:
>>
>> bitcoin:1JohnxNT6jRzhu3H1wgVFbSGKmHP4EUjUV?currency=xau&rate=0.2084&expires=1458432000
>>
>> Wherein:
>> <currency> :  the currency, cryptocurrency or asset that the transaction
>> will end up as encoded in ISO 4217 if applicable.
>> <rate> : the bitcoin to <currency> rate as dictated by receiving wallet
>> <expires> : unix timestamp of when the rate loses validity
>>
>> This would allow the sending wallet the ability to present up-to-date
>> exchange rates. When, for example, a wallet operator that pegs to the USD
>> scans the address above, it would be able to present to the user the
>> following information:
>>
>> 1. USD to XAU rate
>> 2. How much XAU will be received by the address
>> 3. How long before the rates expires
>>
>>
>> Thoughts?
>>
>>
>> Regards,
>> John
>>
>> _______________________________________________
>> bitcoin-dev mailing list
>> bitcoin-dev at lists.linuxfoundation.org
>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>
>>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150915/cc6163fa/attachment.html>

From jgarzik at gmail.com  Tue Sep 15 15:26:50 2015
From: jgarzik at gmail.com (Jeff Garzik)
Date: Tue, 15 Sep 2015 11:26:50 -0400
Subject: [bitcoin-dev] libconsensus and bitcoin development process
In-Reply-To: <CADJgMzvSUTrPZa0mQvBsQaYkMN3NPXVB_Ay6RJNivq-agUoUww@mail.gmail.com>
References: <CADm_WcY8Vy+k+5BaBS+jV6D6tmSXrok8rAxoPxxKOzUhyPWgMg@mail.gmail.com>
	<CADJgMzvSUTrPZa0mQvBsQaYkMN3NPXVB_Ay6RJNivq-agUoUww@mail.gmail.com>
Message-ID: <CADm_WcafXgg5xpQjE8uSfp-2y59XRaCUr9w5yNEoVo6GygYzZw@mail.gmail.com>

Drak,

I would say that the refactoring does actually fulfill some conditions you
mention:
- move-only is almost always clearly separated out
- the refactoring is not controversial _in minimis_ - meaning, the
individual pull request is not controversial.

The problem comes with the impact of an unfocused stream of refactors to
key code.

For example, there is much less long term developer impact if refactoring
were _accelerated_, scheduled to be performed in a one-week sprint.  There
is a lot of breakage, yes, but after that week the average level of
downstream patch breakage is significantly lower.  A "rip the band-aid off
quickly rather than slowly" approach.




On Tue, Sep 15, 2015 at 5:55 AM, Btc Drak <btcdrak at gmail.com> wrote:

> I also share a lot of Jeff's concerns about refactoring and have voiced
> them several times on IRC and in private to Jorge, Wladamir and Greg. I
> meant to do a write up but never got around to it. Jeff has quite
> eloquently stated the various problems. I would like to share my thoughts
> on the matter because we really do need to come up with a plan on how this
> issue is dealt with.
>
> Obviously, Bitcoin Core is quite tightly coupled at the moment and
> definitely needs extensive modularisation. Such work will inevitably
> require lots of bulk code moves and then finer refactoring. However, it
> requires proper planning because there are lots of effects and consequences
> for other people contributing to Core and also downstream projects relying
> on Core:
>
> 1. Refactoring often causes other pull requests to diverge and require
> rebasing. Continual refactoring can put PRs in "rebase hell" and puts a big
> stress on contributors (many of whom are part time).
>
> 2. Version to version, Bitcoin Core changes significantly in structure.
> 0.9 to 0.10 is unrecognisable. 0.10 to 0.11 is even more so. This makes
> makes it hard to follow release to release and the net result is less
> people upgrade (especially think of miners trying to keep their patch sets
> working while trying not to disrupt or risk their mining operations).
>
> 3. Continual refactoring increases risk: we're human, and mistakes will
> slip through peer review. This is especially concerning with consensus
> critical code and this makes it difficult to merge such refactoring often,
> which of course exacerbates the problem.
>
> The net negative consequence is it is harder to contribute to Core, harder
> for the Core maintainers to merge and harder for downstream/dependent
> projects/implementations to keep up.
>
> Suggested Way Forward
> ---------------------------------
>
> With the understanding that refactored code by definition must not change
> behaviour. There are three major kinds of refactoring:
>
> 1. code moves (e.g. separating concerns into different files);
> 2. code style;
> 3. structural optimisation and consolidation (reducing LOC, separating
> concerns, encapsulation etc).
>
> Code moves(1) and CS(2) are easy to peer review and merge quickly. The
> third kind(3) requires deeper analysis to ensure that while the code
> changed, the behaviour (including any bugs) did not.
>
> We must resist all temptation to fix bugs or tack on minor fixes and
> tweaks during refactoring: pull requests should only be refactoring only,
> with no net change to behaviour. Keeping discipline makes it much easier to
> verify and peer review and this faster to merge.
>
> With respect to Code moves and CS, I believe we should have a "refactoring
> fortnight" where we so the bulk of code move-only refactoring plus CS where
> necessary. This is by fat the most disruptive kind of change because it
> widely affects other PRs mergeability. We should aim to get most of this
> done in one go, so that it's not happening in dribs and drabs over months
> and many releases. Once done, it gives everyone a good idea to the overall
> new structure and where one can expect to find things in the future. The
> idea here is to help orientation and not have to continuously hunt for
> where things have moved to.
>
> To be clear, I am strongly suggesting code move-only refactoring PRs not
> be mixed with anything else. Same for CS changes. This makes the PRs
> extremely easy to vet and thus quick to merge.
>
> Towards this end, maybe there should be an IRC meeting to agree the
> initial moves, then someone who has the stomach for it can get on and do it
> - during that time, we do not merge anything else. We need to bite the
> bullet and break the back out of code moves.
>
> With regards to CS, I think we do need to get CS right, because a
> continual dribble of CS changes also makes diffs between releases less easy
> to follow. Much of CS checking can be automated by the continuous
> integration so authors can get it right easily. It can be just like a
> Travis check.
>
> With respect to the 3rd kind of refactoring, we need to set some standards
> and goals and aim for some kind of consistency. Refactoring needs to fulfil
> certain goals and criterion otherwise contributors will always find a
> reason to fiddle over and over forever. Obvious targets here can be things
> like proper encapsulation and separation of concerns.
>
> Overall, refactoring should be merged quickly, but only on a schedule so
> it doesn't cause major disruption to others.
>
> Obviously the third kind of refactoring more complex and time consuming
> and will need to occur over time, but it should happen in defined steps. As
> Jeff said, one week a month, or maybe one month a release. In any case,
> refactoring changes should be quickly accepted or rejected by the project
> maintainer and not left hanging.
>
> Finally, refactoring should *always* be uncontroversial because
> essentially functionality is not changing. If functionality changes (e.g.
> you try to sneak in a big fix or feature tweak "because it's small") the PR
> should be rejected outright. Additionally, if we break down refactoring
> into the three kinds stated above, peer review will be much more
> straightforward.
>
>
>
> On Tue, Sep 15, 2015 at 5:10 AM, Jeff Garzik via bitcoin-dev <
> bitcoin-dev at lists.linuxfoundation.org> wrote:
>
>> [collating a private mail and a github issue comment, moving it to a
>> better forum]
>>
>> On libconsensus
>> ---------------
>> In general there exists the reasonable goal to move consensus state
>> and code to a specific, separate lib.
>>
>> To someone not closely reviewing the seemingly endless stream of
>> libconsensus refactoring PRs, the 10,000 foot view is that there is a
>> rather random stream of refactors that proceed in fits and starts
>> without apparent plan or end other than a one sentence "isolate
>> consensus state and code" summary.
>>
>> I am hoping that
>> * There is some plan
>> * We will not see a five year stream of random consensus code movement
>> patches causing lots of downstream developer headaches.
>>
>> I read every code change in every pull request that comes into
>> github/bitcoin/bitcoin with three exceptions:
>> * consensus code movement changes - too big, too chaotic, too
>> frequent, too unfocused, laziness guarantees others will inevitably
>> ACK it without me.
>> * some non-code changes (docs)
>> * ignore 80% of the Qt changes
>>
>> As with any sort of refactoring, they are easy to prove correct, easy
>> to reason, and therefore quick and easy to ACK and merge.
>>
>> Refactors however have a very real negative impact.
>> bitcoin/bitcoin.git is not only the source tree in the universe.
>> Software engineers at home, at startups, and at major companies are
>> maintaining branches of their own.
>>
>> It is very very easy to fall into a trap where a project is merging
>> lots of cosmetic changes and not seeing the downstream ripple effects.
>> Several people complained to me at the conference about all the code
>> movement changes breaking their own work, causing them to stay on
>> older versions of bitcoin due to the effort required to rebase to each
>> new release version - and I share those complaints.
>>
>> Complex code changes with longer development cycles than simple code
>> movement patches keep breaking.  It is very frustrating, and causes
>> folks to get trapped between a rock and a hard place:
>> - Trying to push non-trivial changes upstream is difficult, for normal
>> and reasonable reasons (big important changes need review etc.).
>> - Maintaining non-trivial changes out of tree is also painful, for the
>> aforementioned reasons.
>>
>> Reasonable work languishes in constant-rebase hell, and incentivizes
>> against keeping up with the latest tree.
>>
>>
>> Aside from the refactor, libconsensus appears to be engineering in the
>> dark.  Where is any sort of plan?  I have low standards - a photo of a
>> whiteboard or youtube clip will do.
>>
>> The general goal is good.   But we must not stray into unfocused
>> engineering for a non-existent future library user.
>>
>> The higher priority must be given to having a source code base that
>> maximizes the collective developers' ability to maintain The Router --
>> the core bitcoin full node P2P engine.
>>
>> I recommend time-based bursts of code movement changes.  See below;
>> for example, just submit & merge code movement changes on the first
>> week of every 2nd month.  Code movement changes are easy to create
>> from scratch once a concrete goal is known.  The coding part is
>> trivial and takes no time.
>>
>> As we saw in the Linux kernel - battle lessons hard learned - code
>> movement and refactors have often unseen negative impact on downstream
>> developers working on more complicated changes that have more positive
>> impact to our developers and users.
>>
>>
>> On Bitcoin development release cycles & process
>> ------------------------------------------------------------------
>>
>> As I've outlined in the past, the Linux kernel maintenance phases
>> address some of these problems.  The merge window into git master
>> opens for 1 week, a very chaotic week full of merging (and rebasing),
>> and then the merge window closes.  Several weeks follow as the "dust
>> settles" -- testing, bug fixing, moving in parallel OOB with
>> not-yet-ready development.  Release candidates follow, then the
>> release, then the cycle repeats.
>>
>> IMO a merge window approach fixes some of the issues with refactoring,
>> as well as introduces some useful -developer discipline- into the
>> development process.  Bitcoin Core still needs rapid iteration --
>> another failing of the current project -- and so something of a more
>> rapid pace is needed:
>> - 1st week of each month, merge changes.  Lots of rebasing during this
>> week.
>> - remaining days of the month, test, bug fix
>> - release at end of month
>>
>> If changes are not ready for merging, then so be it, they wait until
>> next month's release.  Some releases have major features, some
>> releases are completely boring and offer little of note.  That is the
>> nature of time-based development iteration.  It's like dollar cost
>> averaging, a bit.
>>
>>
>> And frankly, I would like to close all github pull requests that are
>> not ready to merge That Week.  I'm as guilty of this as any, but that
>> stuff just languishes.  Excluding a certain category of obvious-crap,
>> pull requests tend to default to a state of either (a) rapid merging,
>> (b) months-long issues/projects, (c) limbo.
>>
>> Under a more time-based approach, a better pull request process would be
>> to
>> * Only open pull requests if it's a bug fix, or the merge window is
>> open and the change is ready to be merged in the developer's opinion.
>> * Developers CC bitcoin-dev list to discuss Bitcoin Core-bound projects
>> * Developers maintain and publish projects via their own git trees
>> * Pull requests should be closed if unmerged after 7 days, unless it
>> is an important bug fix etc.
>>
>> The problem with projects like libconsensus is that they can get
>> unfocused and open ended.  Code movement changes in particular are
>> cheap to generate.  It is low developer cost for the developer to
>> iterate all the way to the end state, see what that looks like, and
>> see if people like it.  That end state is not something you would
>> merge all in one go.  I would likely stash that tree, and then start
>> again, seek the most optimal and least disruptive set of refactors,
>> and generate and merge those into bitcoin/bitcoin.git in a time-based,
>> paced manner.  Announce the pace ahead of time - "cosmetic stuff that
>> breaks your patches will be merged 1st week of every second month"
>>
>> To underscore, the higher priority must be given to having a source
>> code base and disciplined development process that maximizes the
>> collective developers' ability to maintain The Router that maintains
>> most of our network.
>>
>> Modularity, refactoring, cleaning up grotty code generates a deep
>> seated happiness in many engineers.  Field experience however shows
>> refactoring is a never ending process which sometimes gets in the way
>> of More Important Work.
>> _______________________________________________
>> bitcoin-dev mailing list
>> bitcoin-dev at lists.linuxfoundation.org
>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150915/3f2f6d55/attachment-0001.html>

From elombrozo at gmail.com  Tue Sep 15 16:00:11 2015
From: elombrozo at gmail.com (Eric Lombrozo)
Date: Tue, 15 Sep 2015 12:00:11 -0400
Subject: [bitcoin-dev] libconsensus and bitcoin development process
In-Reply-To: <CADm_WcafXgg5xpQjE8uSfp-2y59XRaCUr9w5yNEoVo6GygYzZw@mail.gmail.com>
References: <CADm_WcY8Vy+k+5BaBS+jV6D6tmSXrok8rAxoPxxKOzUhyPWgMg@mail.gmail.com>
	<CADJgMzvSUTrPZa0mQvBsQaYkMN3NPXVB_Ay6RJNivq-agUoUww@mail.gmail.com>
	<CADm_WcafXgg5xpQjE8uSfp-2y59XRaCUr9w5yNEoVo6GygYzZw@mail.gmail.com>
Message-ID: <6F3F39FB-10A4-469B-8B90-4113A822AB1A@gmail.com>

I basically agree with what has been said here.

Refactoring efforts should be well-coordinated. Their short-term impact can be quite disruptive, although if done correctly, longer-term they make it even easier for downstream developers to add and merge changes.

By scheduling move-only changes, others can avoid making PRs immediately prior to or during these changes (which ironically involve considerable disruption to PRs while changing nothing for endusers). Furthermore, it would be useful to document the changes in ways that help other developers rebase properly.

On September 15, 2015 11:26:50 AM EDT, Jeff Garzik via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:
>Drak,
>
>I would say that the refactoring does actually fulfill some conditions
>you
>mention:
>- move-only is almost always clearly separated out
>- the refactoring is not controversial _in minimis_ - meaning, the
>individual pull request is not controversial.
>
>The problem comes with the impact of an unfocused stream of refactors
>to
>key code.
>
>For example, there is much less long term developer impact if
>refactoring
>were _accelerated_, scheduled to be performed in a one-week sprint. 
>There
>is a lot of breakage, yes, but after that week the average level of
>downstream patch breakage is significantly lower.  A "rip the band-aid
>off
>quickly rather than slowly" approach.
>
>
>
>
>On Tue, Sep 15, 2015 at 5:55 AM, Btc Drak <btcdrak at gmail.com> wrote:
>
>> I also share a lot of Jeff's concerns about refactoring and have
>voiced
>> them several times on IRC and in private to Jorge, Wladamir and Greg.
>I
>> meant to do a write up but never got around to it. Jeff has quite
>> eloquently stated the various problems. I would like to share my
>thoughts
>> on the matter because we really do need to come up with a plan on how
>this
>> issue is dealt with.
>>
>> Obviously, Bitcoin Core is quite tightly coupled at the moment and
>> definitely needs extensive modularisation. Such work will inevitably
>> require lots of bulk code moves and then finer refactoring. However,
>it
>> requires proper planning because there are lots of effects and
>consequences
>> for other people contributing to Core and also downstream projects
>relying
>> on Core:
>>
>> 1. Refactoring often causes other pull requests to diverge and
>require
>> rebasing. Continual refactoring can put PRs in "rebase hell" and puts
>a big
>> stress on contributors (many of whom are part time).
>>
>> 2. Version to version, Bitcoin Core changes significantly in
>structure.
>> 0.9 to 0.10 is unrecognisable. 0.10 to 0.11 is even more so. This
>makes
>> makes it hard to follow release to release and the net result is less
>> people upgrade (especially think of miners trying to keep their patch
>sets
>> working while trying not to disrupt or risk their mining operations).
>>
>> 3. Continual refactoring increases risk: we're human, and mistakes
>will
>> slip through peer review. This is especially concerning with
>consensus
>> critical code and this makes it difficult to merge such refactoring
>often,
>> which of course exacerbates the problem.
>>
>> The net negative consequence is it is harder to contribute to Core,
>harder
>> for the Core maintainers to merge and harder for downstream/dependent
>> projects/implementations to keep up.
>>
>> Suggested Way Forward
>> ---------------------------------
>>
>> With the understanding that refactored code by definition must not
>change
>> behaviour. There are three major kinds of refactoring:
>>
>> 1. code moves (e.g. separating concerns into different files);
>> 2. code style;
>> 3. structural optimisation and consolidation (reducing LOC,
>separating
>> concerns, encapsulation etc).
>>
>> Code moves(1) and CS(2) are easy to peer review and merge quickly.
>The
>> third kind(3) requires deeper analysis to ensure that while the code
>> changed, the behaviour (including any bugs) did not.
>>
>> We must resist all temptation to fix bugs or tack on minor fixes and
>> tweaks during refactoring: pull requests should only be refactoring
>only,
>> with no net change to behaviour. Keeping discipline makes it much
>easier to
>> verify and peer review and this faster to merge.
>>
>> With respect to Code moves and CS, I believe we should have a
>"refactoring
>> fortnight" where we so the bulk of code move-only refactoring plus CS
>where
>> necessary. This is by fat the most disruptive kind of change because
>it
>> widely affects other PRs mergeability. We should aim to get most of
>this
>> done in one go, so that it's not happening in dribs and drabs over
>months
>> and many releases. Once done, it gives everyone a good idea to the
>overall
>> new structure and where one can expect to find things in the future.
>The
>> idea here is to help orientation and not have to continuously hunt
>for
>> where things have moved to.
>>
>> To be clear, I am strongly suggesting code move-only refactoring PRs
>not
>> be mixed with anything else. Same for CS changes. This makes the PRs
>> extremely easy to vet and thus quick to merge.
>>
>> Towards this end, maybe there should be an IRC meeting to agree the
>> initial moves, then someone who has the stomach for it can get on and
>do it
>> - during that time, we do not merge anything else. We need to bite
>the
>> bullet and break the back out of code moves.
>>
>> With regards to CS, I think we do need to get CS right, because a
>> continual dribble of CS changes also makes diffs between releases
>less easy
>> to follow. Much of CS checking can be automated by the continuous
>> integration so authors can get it right easily. It can be just like a
>> Travis check.
>>
>> With respect to the 3rd kind of refactoring, we need to set some
>standards
>> and goals and aim for some kind of consistency. Refactoring needs to
>fulfil
>> certain goals and criterion otherwise contributors will always find a
>> reason to fiddle over and over forever. Obvious targets here can be
>things
>> like proper encapsulation and separation of concerns.
>>
>> Overall, refactoring should be merged quickly, but only on a schedule
>so
>> it doesn't cause major disruption to others.
>>
>> Obviously the third kind of refactoring more complex and time
>consuming
>> and will need to occur over time, but it should happen in defined
>steps. As
>> Jeff said, one week a month, or maybe one month a release. In any
>case,
>> refactoring changes should be quickly accepted or rejected by the
>project
>> maintainer and not left hanging.
>>
>> Finally, refactoring should *always* be uncontroversial because
>> essentially functionality is not changing. If functionality changes
>(e.g.
>> you try to sneak in a big fix or feature tweak "because it's small")
>the PR
>> should be rejected outright. Additionally, if we break down
>refactoring
>> into the three kinds stated above, peer review will be much more
>> straightforward.
>>
>>
>>
>> On Tue, Sep 15, 2015 at 5:10 AM, Jeff Garzik via bitcoin-dev <
>> bitcoin-dev at lists.linuxfoundation.org> wrote:
>>
>>> [collating a private mail and a github issue comment, moving it to a
>>> better forum]
>>>
>>> On libconsensus
>>> ---------------
>>> In general there exists the reasonable goal to move consensus state
>>> and code to a specific, separate lib.
>>>
>>> To someone not closely reviewing the seemingly endless stream of
>>> libconsensus refactoring PRs, the 10,000 foot view is that there is
>a
>>> rather random stream of refactors that proceed in fits and starts
>>> without apparent plan or end other than a one sentence "isolate
>>> consensus state and code" summary.
>>>
>>> I am hoping that
>>> * There is some plan
>>> * We will not see a five year stream of random consensus code
>movement
>>> patches causing lots of downstream developer headaches.
>>>
>>> I read every code change in every pull request that comes into
>>> github/bitcoin/bitcoin with three exceptions:
>>> * consensus code movement changes - too big, too chaotic, too
>>> frequent, too unfocused, laziness guarantees others will inevitably
>>> ACK it without me.
>>> * some non-code changes (docs)
>>> * ignore 80% of the Qt changes
>>>
>>> As with any sort of refactoring, they are easy to prove correct,
>easy
>>> to reason, and therefore quick and easy to ACK and merge.
>>>
>>> Refactors however have a very real negative impact.
>>> bitcoin/bitcoin.git is not only the source tree in the universe.
>>> Software engineers at home, at startups, and at major companies are
>>> maintaining branches of their own.
>>>
>>> It is very very easy to fall into a trap where a project is merging
>>> lots of cosmetic changes and not seeing the downstream ripple
>effects.
>>> Several people complained to me at the conference about all the code
>>> movement changes breaking their own work, causing them to stay on
>>> older versions of bitcoin due to the effort required to rebase to
>each
>>> new release version - and I share those complaints.
>>>
>>> Complex code changes with longer development cycles than simple code
>>> movement patches keep breaking.  It is very frustrating, and causes
>>> folks to get trapped between a rock and a hard place:
>>> - Trying to push non-trivial changes upstream is difficult, for
>normal
>>> and reasonable reasons (big important changes need review etc.).
>>> - Maintaining non-trivial changes out of tree is also painful, for
>the
>>> aforementioned reasons.
>>>
>>> Reasonable work languishes in constant-rebase hell, and incentivizes
>>> against keeping up with the latest tree.
>>>
>>>
>>> Aside from the refactor, libconsensus appears to be engineering in
>the
>>> dark.  Where is any sort of plan?  I have low standards - a photo of
>a
>>> whiteboard or youtube clip will do.
>>>
>>> The general goal is good.   But we must not stray into unfocused
>>> engineering for a non-existent future library user.
>>>
>>> The higher priority must be given to having a source code base that
>>> maximizes the collective developers' ability to maintain The Router
>--
>>> the core bitcoin full node P2P engine.
>>>
>>> I recommend time-based bursts of code movement changes.  See below;
>>> for example, just submit & merge code movement changes on the first
>>> week of every 2nd month.  Code movement changes are easy to create
>>> from scratch once a concrete goal is known.  The coding part is
>>> trivial and takes no time.
>>>
>>> As we saw in the Linux kernel - battle lessons hard learned - code
>>> movement and refactors have often unseen negative impact on
>downstream
>>> developers working on more complicated changes that have more
>positive
>>> impact to our developers and users.
>>>
>>>
>>> On Bitcoin development release cycles & process
>>> ------------------------------------------------------------------
>>>
>>> As I've outlined in the past, the Linux kernel maintenance phases
>>> address some of these problems.  The merge window into git master
>>> opens for 1 week, a very chaotic week full of merging (and
>rebasing),
>>> and then the merge window closes.  Several weeks follow as the "dust
>>> settles" -- testing, bug fixing, moving in parallel OOB with
>>> not-yet-ready development.  Release candidates follow, then the
>>> release, then the cycle repeats.
>>>
>>> IMO a merge window approach fixes some of the issues with
>refactoring,
>>> as well as introduces some useful -developer discipline- into the
>>> development process.  Bitcoin Core still needs rapid iteration --
>>> another failing of the current project -- and so something of a more
>>> rapid pace is needed:
>>> - 1st week of each month, merge changes.  Lots of rebasing during
>this
>>> week.
>>> - remaining days of the month, test, bug fix
>>> - release at end of month
>>>
>>> If changes are not ready for merging, then so be it, they wait until
>>> next month's release.  Some releases have major features, some
>>> releases are completely boring and offer little of note.  That is
>the
>>> nature of time-based development iteration.  It's like dollar cost
>>> averaging, a bit.
>>>
>>>
>>> And frankly, I would like to close all github pull requests that are
>>> not ready to merge That Week.  I'm as guilty of this as any, but
>that
>>> stuff just languishes.  Excluding a certain category of
>obvious-crap,
>>> pull requests tend to default to a state of either (a) rapid
>merging,
>>> (b) months-long issues/projects, (c) limbo.
>>>
>>> Under a more time-based approach, a better pull request process
>would be
>>> to
>>> * Only open pull requests if it's a bug fix, or the merge window is
>>> open and the change is ready to be merged in the developer's
>opinion.
>>> * Developers CC bitcoin-dev list to discuss Bitcoin Core-bound
>projects
>>> * Developers maintain and publish projects via their own git trees
>>> * Pull requests should be closed if unmerged after 7 days, unless it
>>> is an important bug fix etc.
>>>
>>> The problem with projects like libconsensus is that they can get
>>> unfocused and open ended.  Code movement changes in particular are
>>> cheap to generate.  It is low developer cost for the developer to
>>> iterate all the way to the end state, see what that looks like, and
>>> see if people like it.  That end state is not something you would
>>> merge all in one go.  I would likely stash that tree, and then start
>>> again, seek the most optimal and least disruptive set of refactors,
>>> and generate and merge those into bitcoin/bitcoin.git in a
>time-based,
>>> paced manner.  Announce the pace ahead of time - "cosmetic stuff
>that
>>> breaks your patches will be merged 1st week of every second month"
>>>
>>> To underscore, the higher priority must be given to having a source
>>> code base and disciplined development process that maximizes the
>>> collective developers' ability to maintain The Router that maintains
>>> most of our network.
>>>
>>> Modularity, refactoring, cleaning up grotty code generates a deep
>>> seated happiness in many engineers.  Field experience however shows
>>> refactoring is a never ending process which sometimes gets in the
>way
>>> of More Important Work.
>>> _______________________________________________
>>> bitcoin-dev mailing list
>>> bitcoin-dev at lists.linuxfoundation.org
>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>>
>>
>>
>
>
>------------------------------------------------------------------------
>
>_______________________________________________
>bitcoin-dev mailing list
>bitcoin-dev at lists.linuxfoundation.org
>https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev

-- 
Sent from my Android device with K-9 Mail. Please excuse my brevity.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150915/428dad3f/attachment-0001.html>

From btcdrak at gmail.com  Tue Sep 15 18:26:50 2015
From: btcdrak at gmail.com (Btc Drak)
Date: Tue, 15 Sep 2015 19:26:50 +0100
Subject: [bitcoin-dev] libconsensus and bitcoin development process
In-Reply-To: <CADm_WcafXgg5xpQjE8uSfp-2y59XRaCUr9w5yNEoVo6GygYzZw@mail.gmail.com>
References: <CADm_WcY8Vy+k+5BaBS+jV6D6tmSXrok8rAxoPxxKOzUhyPWgMg@mail.gmail.com>
	<CADJgMzvSUTrPZa0mQvBsQaYkMN3NPXVB_Ay6RJNivq-agUoUww@mail.gmail.com>
	<CADm_WcafXgg5xpQjE8uSfp-2y59XRaCUr9w5yNEoVo6GygYzZw@mail.gmail.com>
Message-ID: <CADJgMzuha2mA7VgmtdgsYmK8c0121MiEi52nKMNB0VPqFYNk4g@mail.gmail.com>

On Tue, Sep 15, 2015 at 4:26 PM, Jeff Garzik <jgarzik at gmail.com> wrote:

> The problem comes with the impact of an unfocused stream of refactors to
> key code.
>
> For example, there is much less long term developer impact if refactoring
> were _accelerated_, scheduled to be performed in a one-week sprint.  There
> is a lot of breakage, yes, but after that week the average level of
> downstream patch breakage is significantly lower.  A "rip the band-aid off
> quickly rather than slowly" approach.
>

My sentiments exactly...
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150915/578098d2/attachment.html>

From sergio.d.lerner at gmail.com  Wed Sep 16 04:37:42 2015
From: sergio.d.lerner at gmail.com (Sergio Demian Lerner)
Date: Wed, 16 Sep 2015 01:37:42 -0300
Subject: [bitcoin-dev] Proof of unique blockchain storage revised
Message-ID: <CAKzdR-rsgtAhiRwZtj8H8sCZaxz30Srki6SmcR7k-67ff1NyqA@mail.gmail.com>

One possible way to incentivize the existence of more Bitcoin network nodes
is by paying peers when they provide data in the blokcchain. One of the
problems is that it is not easy to tell if the peer is really providing a
useful service by storing the blockchain or it is just relying the request
to some other peers as a proxy.

In this post I review the use of asymmetric-time functions to be able to
prove unique (IP-tied) blockchain storage and propose improvements to make
it fully practical.

Full post here:
https://bitslog.wordpress.com/2015/09/16/proof-of-unique-blockchain-storage-revised/

Best regards, Sergio.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150916/4d9dfc3c/attachment.html>

From moonpunter at gmail.com  Wed Sep 16 11:23:52 2015
From: moonpunter at gmail.com (phm)
Date: Wed, 16 Sep 2015 06:23:52 -0500
Subject: [bitcoin-dev] Quick Bitcoin/Pre-Christmas modest blocksize max
 increase
In-Reply-To: <CAORTeX=4pCAwnPSkLRb4w0vh116ZtTKJfq-RkeU69Fp67CwinQ@mail.gmail.com>
References: <CAORTeX=4pCAwnPSkLRb4w0vh116ZtTKJfq-RkeU69Fp67CwinQ@mail.gmail.com>
Message-ID: <55F95148.5050504@gmail.com>

Jason Livesay via bitcoin-dev wrote:
> In order to keep the existing brand momentum, network, and business
> investment, 
These are precisely the issues that the Bitcoin Development team SHOULD
NOT concern themselves with as they are not technical in nature.
> I believe the smoothest path forward is to build a new, additional
> system re-using the bitcoin name.  I suggest this new system come
> packaged with the bitcoin core client and be referred to as
> QuickBitcoin or qbtc or something similar.  As far as the public is
> concerned it could simply continue to be called bitcoin.  The system
> will work on top of traditional bitcoins but have a mechanism for
> more/faster transactions.  Exactly what mechanism doesn't have to be
> perfect, it just needs to be reasonably secure/useful and something
> that the community will accept. 
A few members of the development team have already begun doing something
along these lines but its future does not look promising.

I do not see any indication that this Christmas will be any more or less
busy than last Christmas. Correct me if I'm wrong, but retail spending
as a whole still makes up only a small percentage of Bitcoin transactions.

phm
http://phm.link


From btcdrak at gmail.com  Wed Sep 16 15:53:08 2015
From: btcdrak at gmail.com (Btc Drak)
Date: Wed, 16 Sep 2015 16:53:08 +0100
Subject: [bitcoin-dev] [BIP Proposal] Version bits with timeout and
	delay.
In-Reply-To: <87mvwqb132.fsf@rustcorp.com.au>
References: <87mvwqb132.fsf@rustcorp.com.au>
Message-ID: <CADJgMztpJ2+GHMoHdP0Zt27BWBhVX1LaKO+CEP=q0rvoimgNSw@mail.gmail.com>

Rusty,

I think you've covered all the issues discussed now. +1 for submitting to
BIPs repo to get an official number.

Are you planning to write the implementation?



On Sun, Sep 13, 2015 at 7:56 PM, Rusty Russell via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> Hi all,
>
> Those who've seen the original versionbits bip, this adds:
>    1) Percentage checking only on retarget period boundaries.
>    2) 1 retarget period between 95% and activation.
>    3) A stronger suggestion for timeout value selection.
>
> https://gist.github.com/rustyrussell/47eb08093373f71f87de
>
> And pasted below, de-formatted a little.
>
> Thanks,
> Rusty.
>
>   BIP: ??
>   Title: Version bits with timeout and delay
>   Author: Pieter Wuille <pieter.wuille at gmail.com>, Peter Todd <
> pete at petertodd.org>, Greg Maxwell <greg at xiph.org>, Rusty Russell <
> rusty at rustcorp.com.au>
>   Status: Draft
>   Type: Informational Track
>   Created: 2015-10-04
>
> ==Abstract==
>
> This document specifies a proposed change to the semantics of the
> 'version' field in Bitcoin blocks, allowing multiple backward-compatible
> changes (further called called "soft forks") being deployed in parallel. It
> relies on interpreting the version field as a bit vector, where each bit
> can be used to track an independent change. These are tallied each retarget
> period. Once the consensus change succeeds or times out, there is a
> "fallow" pause after which the bit can be reused for later changes.
>
> ==Motivation==
>
> BIP 34 introduced a mechanism for doing soft-forking changes without
> predefined flag timestamp (or flag block height), instead relying on
> measuring miner support indicated by a higher version number in block
> headers. As it relies on comparing version numbers as integers however, it
> only supports one single change being rolled out at once, requiring
> coordination between proposals, and does not allow for permanent rejection:
> as long as one soft fork is not fully rolled out, no future one can be
> scheduled.
>
> In addition, BIP 34 made the integer comparison (nVersion >= 2) a
> consensus rule after its 95% threshold was reached, removing 2^31 +2 values
> from the set of valid version numbers (all negative numbers, as nVersion is
> interpreted as a signed integer, as well as 0 and 1). This indicates
> another downside this approach: every upgrade permanently restricts the set
> of allowed nVersion field values. This approach was later reused in BIP 66,
> which further removed nVersion = 2 as valid option. As will be shown
> further, this is unnecessary.
>
> ==Specification==
>
> ===Mechanism===
>
> '''Bit flags'''
> We are permitting several independent soft forks to be deployed in
> parallel. For each, a bit B is chosen from the set {0,1,2,...,28}, which is
> not currently in use for any other ongoing soft fork. Miners signal intent
> to enforce the new rules associated with the proposed soft fork by setting
> bit 1<sup>B</sup> in nVersion to 1 in their blocks.
>
> '''High bits'''
> The highest 3 bits are set to 001, so the range of actually possible
> nVersion values is [0x20000000...0x3FFFFFFF], inclusive. This leaves two
> future upgrades for different mechanisms (top bits 010 and 011), while
> complying to the constraints set by BIP34 and BIP66. Having more than 29
> available bits for parallel soft forks does not add anything anyway, as the
> (nVersion >= 3) requirement already makes that impossible.
>
> '''States'''
> With every softfork proposal we associate a state BState, which begins
> at ''defined'', and can be ''locked-in'', ''activated'',
> or ''failed''.  Transitions are considered after each
> retarget period.
>
> '''Soft Fork Support'''
> Software which supports the change should begin by setting B in all blocks
> mined until it is resolved.
>
>  if (BState == defined) {
>      SetBInBlock();
>  }
>
> '''Success: Lock-in Threshold'''
> If bit B is set in 1916 (1512 on testnet) or more of the 2016 blocks
> within a retarget period, it is considered ''locked-in''.  Miners should
> stop setting bit B.
>
>  if (NextBlockHeight % 2016 == 0) {
>     if (BState == defined && Previous2016BlocksCountB() >= 1916) {
>         BState = locked-in;
>         BActiveHeight = NextBlockHeight + 2016;
>     }
>  }
>
> '''Success: Activation Delay'''
> The consensus rules related to ''locked-in'' soft fork will be enforced in
> the second retarget period; ie. there is a one retarget period in
> which the remaining 5% can upgrade.  At the that activation block and
> after, the bit B may be reused for a different soft fork.
>
>  if (BState == locked-in && NextBlockHeight == BActiveHeight) {
>     BState = activated;
>     ApplyRulesForBFromNextBlock();
>     /* B can be reused, immediately */
>  }
>
> '''Failure: Timeout'''
> A soft fork proposal should include a ''timeout''.  This is measured
> as the beginning of a calendar year as per this table (suggested
> three years from drafting the soft fork proposal):
>
> Timeout Year    >= Seconds              Timeout Year    >= Seconds
> 2018            1514764800              2026            1767225600
> 2019            1546300800              2027            1798761600
> 2020            1577836800              2028            1830297600
> 2021            1609459200              2029            1861920000
> 2022            1640995200              2030            1893456000
> 2023            1672531200              2031            1924992000
> 2024            1704067200              2032            1956528000
> 2025            1735689600              2033            1988150400
>
> If the soft fork still not ''locked-in'' and the
> GetMedianTimePast() of a block following a retarget period is at or
> past this timeout, miners should cease setting this bit.
>
>  if (NextBlockHeight % 2016 == 0) {
>     if (BState == defined && GetMedianTimePast(nextblock) >= BFinalYear) {
>          BState = failed;
>     }
>  }
>
> After another retarget period (to allow detection of buggy miners),
> the bit may be reused.
>
> '''Warning system'''
> To support upgrade warnings, an extra "unknown upgrade" is tracked, using
> the "implicit bit" mask = (block.nVersion & ~expectedVersion) != 0. Mask
> will be non-zero whenever an unexpected bit is set in nVersion.  Whenever
> lock-in for the unknown upgrade is detected, the software should warn
> loudly about the upcoming soft fork.  It should warn even more loudly after
> the next retarget period.
>
> '''Forks'''
> It should be noted that the states are maintained along block chain
> branches, but may need recomputation when a reorganization happens.
>
> ===Support for future changes===
>
> The mechanism described above is very generic, and variations are possible
> for future soft forks. Here are some ideas that can be taken into account.
>
> '''Modified thresholds'''
> The 95% threshold (based on in BIP 34) does not have to be maintained for
> eternity, but changes should take the effect on the warning system into
> account. In particular, having a lock-in threshold that is incompatible
> with the one used for the warning system may have long-term effects, as the
> warning system cannot rely on a permanently detectable condition anymore.
>
> '''Conflicting soft forks'''
> At some point, two mutually exclusive soft forks may be proposed. The
> naive way to deal with this is to never create software that implements
> both, but that is a making a bet that at least one side is guaranteed to
> lose. Better would be to encode "soft fork X cannot be locked-in" as
> consensus rule for the conflicting soft fork - allowing software that
> supports both, but can never trigger conflicting changes.
>
> '''Multi-stage soft forks'''
> Soft forks right now are typically treated as booleans: they go from an
> inactive to an active state in blocks. Perhaps at some point there is
> demand for a change that has a larger number of stages, with additional
> validation rules that get enabled one by one. The above mechanism can be
> adapted to support this, by interpreting a combination of bits as an
> integer, rather than as isolated bits. The warning system is compatible
> with this, as (nVersion & ~nExpectedVersion) will always be non-zero for
> increasing integers.
>
> == Rationale ==
>
> The failure timeout allows eventual reuse of bits even if a soft fork was
> never activated, so it's clear that the new use of the bit refers to a
> new BIP.  It's deliberately very course grained, to take into account
> reasonable development and deployment delays.  There are unlikely to be
> enough failed proposals to cause a bit shortage.
>
> The fallow period at the conclusion of a soft fork attempt allows some
> detection of buggy clients, and allows time for warnings and software
> upgrades for successful soft forks.
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150916/c96d62e3/attachment-0001.html>

From tier.nolan at gmail.com  Wed Sep 16 17:53:20 2015
From: tier.nolan at gmail.com (Tier Nolan)
Date: Wed, 16 Sep 2015 18:53:20 +0100
Subject: [bitcoin-dev] [BIP Proposal] Version bits with timeout and
	delay.
In-Reply-To: <87mvwqb132.fsf@rustcorp.com.au>
References: <87mvwqb132.fsf@rustcorp.com.au>
Message-ID: <CAE-z3OWLteNyBWuYSkYLZNteOGjDch_fViOV2kpWCaZkXsbu4w@mail.gmail.com>

On Sun, Sep 13, 2015 at 7:56 PM, Rusty Russell via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> '''States'''
> With every softfork proposal we associate a state BState, which begins
> at ''defined'', and can be ''locked-in'', ''activated'',
> or ''failed''.  Transitions are considered after each
> retarget period.
>

I think the 75% rule should be maintained.  It confirms that miners who are
setting the bit are actually creating blocks that meet the new rule (though
it doesn't check if they are enforcing it).

What is the reason for aligning the updated to the difficulty window?


*defined*
Miners set bit
If 75% of blocks of last 2016 have bit set, goto tentative


*tentative*
Miners set bit
Reject blocks that have bit set that don't follow new rule
If 95% of blocks of last 2016 have bit set, goto locked-in


*locked-in*

Point of no return
Miners still set bit
Reject blocks that have bit set that don't follow new rule
After 2016 blocks goto notice


*activated*

Miners don't set bit for at least 10080 blocks
Reject blocks that don't follow new rule

'''Failure: Timeout'''
> A soft fork proposal should include a ''timeout''.
>

I think counting in blocks is easier to be exact here.

If two bits were allocated per proposal, then miners could vote against
forks to recover the bits.  If 25% of the miners vote against, then that
kills it.

In the rationale, it would be useful to discuss effects on SPV clients and
buggy miners.

SPV clients should be recommended to actually monitor the version field.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150916/37241dd5/attachment.html>

From rusty at rustcorp.com.au  Wed Sep 16 20:19:22 2015
From: rusty at rustcorp.com.au (Rusty Russell)
Date: Thu, 17 Sep 2015 05:49:22 +0930
Subject: [bitcoin-dev] [BIP Proposal] Version bits with timeout and
	delay.
In-Reply-To: <CAE-z3OWLteNyBWuYSkYLZNteOGjDch_fViOV2kpWCaZkXsbu4w@mail.gmail.com>
References: <87mvwqb132.fsf@rustcorp.com.au>
	<CAE-z3OWLteNyBWuYSkYLZNteOGjDch_fViOV2kpWCaZkXsbu4w@mail.gmail.com>
Message-ID: <87r3lyjewl.fsf@rustcorp.com.au>

Tier Nolan via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org>
writes:
> On Sun, Sep 13, 2015 at 7:56 PM, Rusty Russell via bitcoin-dev <
> bitcoin-dev at lists.linuxfoundation.org> wrote:
>
>> '''States'''
>> With every softfork proposal we associate a state BState, which begins
>> at ''defined'', and can be ''locked-in'', ''activated'',
>> or ''failed''.  Transitions are considered after each
>> retarget period.
>>
>
> I think the 75% rule should be maintained.  It confirms that miners who are
> setting the bit are actually creating blocks that meet the new rule (though
> it doesn't check if they are enforcing it).

I couldn't see a use for it, since partial enforcement of a soft fork is
pretty useless.

Your point about checking that miners are actually doing it is true,
though all stuff being forked in in future will be nonstandard AFAICT.

I bias towards simplicity for this.

> What is the reason for aligning the updated to the difficulty window?

Miners already have that date in their calendar, so prefer to anchor to
that.

> *defined*
> Miners set bit
> If 75% of blocks of last 2016 have bit set, goto tentative
>
>
> *tentative*
> Miners set bit
> Reject blocks that have bit set that don't follow new rule
> If 95% of blocks of last 2016 have bit set, goto locked-in
>
>
> *locked-in*
>
> Point of no return
> Miners still set bit
> Reject blocks that have bit set that don't follow new rule
> After 2016 blocks goto notice

OK, *that* variant makes perfect sense, and is no more complex, AFAICT.

So, there's two weeks to detect bad implementations, then you everyone
stops setting the bit, for later reuse by another BIP.

> I think counting in blocks is easier to be exact here.

Easier for code, but harder for BIP authors.

> If two bits were allocated per proposal, then miners could vote against
> forks to recover the bits.  If 25% of the miners vote against, then that
> kills it.

You need a timeout: an ancient (non-mining, thus undetectable) node
should never fork itself off the network because someone reused a failed
BIP bit.

> In the rationale, it would be useful to discuss effects on SPV clients and
> buggy miners.
>
> SPV clients should be recommended to actually monitor the version field.

SPV clients don't experience a security change when a soft fork occurs?
They're already trusting miners.

Greg pointed out that soft forks tend to get accompanied by block forks
across activation, but SPV clients should *definitely* be taking those
into account whenever they happen, right?

Thanks!
Rusty.

From jtimon at jtimon.cc  Wed Sep 16 20:27:33 2015
From: jtimon at jtimon.cc (=?UTF-8?B?Sm9yZ2UgVGltw7Nu?=)
Date: Wed, 16 Sep 2015 22:27:33 +0200
Subject: [bitcoin-dev] [BIP Proposal] Version bits with timeout and
	delay.
In-Reply-To: <87r3lyjewl.fsf@rustcorp.com.au>
References: <87mvwqb132.fsf@rustcorp.com.au>
	<CAE-z3OWLteNyBWuYSkYLZNteOGjDch_fViOV2kpWCaZkXsbu4w@mail.gmail.com>
	<87r3lyjewl.fsf@rustcorp.com.au>
Message-ID: <CABm2gDqh=Dv2Ygctg+jEt61N_nJDRBMqdZypSPtmfM2QrY4AYQ@mail.gmail.com>

For enforcing new restrictions on your own blocks (thus at the policy
level, not consensus) you don't need to wait for 75%. You can do it from
the start (this way all miners setting the bit will enforce the new
restrictions.
On Sep 16, 2015 4:20 PM, "Rusty Russell via bitcoin-dev" <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> Tier Nolan via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org>
> writes:
> > On Sun, Sep 13, 2015 at 7:56 PM, Rusty Russell via bitcoin-dev <
> > bitcoin-dev at lists.linuxfoundation.org> wrote:
> >
> >> '''States'''
> >> With every softfork proposal we associate a state BState, which begins
> >> at ''defined'', and can be ''locked-in'', ''activated'',
> >> or ''failed''.  Transitions are considered after each
> >> retarget period.
> >>
> >
> > I think the 75% rule should be maintained.  It confirms that miners who
> are
> > setting the bit are actually creating blocks that meet the new rule
> (though
> > it doesn't check if they are enforcing it).
>
> I couldn't see a use for it, since partial enforcement of a soft fork is
> pretty useless.
>
> Your point about checking that miners are actually doing it is true,
> though all stuff being forked in in future will be nonstandard AFAICT.
>
> I bias towards simplicity for this.
>
> > What is the reason for aligning the updated to the difficulty window?
>
> Miners already have that date in their calendar, so prefer to anchor to
> that.
>
> > *defined*
> > Miners set bit
> > If 75% of blocks of last 2016 have bit set, goto tentative
> >
> >
> > *tentative*
> > Miners set bit
> > Reject blocks that have bit set that don't follow new rule
> > If 95% of blocks of last 2016 have bit set, goto locked-in
> >
> >
> > *locked-in*
> >
> > Point of no return
> > Miners still set bit
> > Reject blocks that have bit set that don't follow new rule
> > After 2016 blocks goto notice
>
> OK, *that* variant makes perfect sense, and is no more complex, AFAICT.
>
> So, there's two weeks to detect bad implementations, then you everyone
> stops setting the bit, for later reuse by another BIP.
>
> > I think counting in blocks is easier to be exact here.
>
> Easier for code, but harder for BIP authors.
>
> > If two bits were allocated per proposal, then miners could vote against
> > forks to recover the bits.  If 25% of the miners vote against, then that
> > kills it.
>
> You need a timeout: an ancient (non-mining, thus undetectable) node
> should never fork itself off the network because someone reused a failed
> BIP bit.
>
> > In the rationale, it would be useful to discuss effects on SPV clients
> and
> > buggy miners.
> >
> > SPV clients should be recommended to actually monitor the version field.
>
> SPV clients don't experience a security change when a soft fork occurs?
> They're already trusting miners.
>
> Greg pointed out that soft forks tend to get accompanied by block forks
> across activation, but SPV clients should *definitely* be taking those
> into account whenever they happen, right?
>
> Thanks!
> Rusty.
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150916/2fd0dd04/attachment.html>

From tier.nolan at gmail.com  Wed Sep 16 20:30:27 2015
From: tier.nolan at gmail.com (Tier Nolan)
Date: Wed, 16 Sep 2015 21:30:27 +0100
Subject: [bitcoin-dev] [BIP Proposal] Version bits with timeout and
	delay.
In-Reply-To: <87r3lyjewl.fsf@rustcorp.com.au>
References: <87mvwqb132.fsf@rustcorp.com.au>
	<CAE-z3OWLteNyBWuYSkYLZNteOGjDch_fViOV2kpWCaZkXsbu4w@mail.gmail.com>
	<87r3lyjewl.fsf@rustcorp.com.au>
Message-ID: <CAE-z3OW6BKHfx=wS9AYqb4+Ems6xM+SDqBKgGbNkXfPwuPqn8A@mail.gmail.com>

On Wed, Sep 16, 2015 at 9:19 PM, Rusty Russell <rusty at rustcorp.com.au>
wrote:

> I couldn't see a use for it, since partial enforcement of a soft fork is
> pretty useless.
>

It isn't useful for actually using the feature, but some miners might set
the bit but not actually create blocks that comply with the new rule.

This would cause their blocks to be orphaned until they fixed it.

OK, *that* variant makes perfect sense, and is no more complex, AFAICT.
>
> So, there's two weeks to detect bad implementations, then you everyone
> stops setting the bit, for later reuse by another BIP.
>

It could be more than two weeks if the support stays between 80% and 90%
for a while.

75%+ checks that blocks with the bit set follow the rule.

95%+ enters lock-in and has the same rules as 75%+, but is irreversible at
that point.


> You need a timeout: an ancient (non-mining, thus undetectable) node
> should never fork itself off the network because someone reused a failed
> BIP bit.
>

I meant if the 2nd bit was part of the BIP.  One of the 2 bits is "FOR" and
the other is "AGAINST".  If against hits 25%, then it is deemed a failure.

The 2nd bit wouldn't be used normally.  This means that proposals can be
killed quickly if they are obviously going to fail.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150916/c60f2225/attachment.html>

From tier.nolan at gmail.com  Wed Sep 16 20:32:16 2015
From: tier.nolan at gmail.com (Tier Nolan)
Date: Wed, 16 Sep 2015 21:32:16 +0100
Subject: [bitcoin-dev] [BIP Proposal] Version bits with timeout and
	delay.
In-Reply-To: <CABm2gDqh=Dv2Ygctg+jEt61N_nJDRBMqdZypSPtmfM2QrY4AYQ@mail.gmail.com>
References: <87mvwqb132.fsf@rustcorp.com.au>
	<CAE-z3OWLteNyBWuYSkYLZNteOGjDch_fViOV2kpWCaZkXsbu4w@mail.gmail.com>
	<87r3lyjewl.fsf@rustcorp.com.au>
	<CABm2gDqh=Dv2Ygctg+jEt61N_nJDRBMqdZypSPtmfM2QrY4AYQ@mail.gmail.com>
Message-ID: <CAE-z3OXATJ6HGKqU=vxc8k-yCMAMwXiWQJxvO3D_O256_ZODtw@mail.gmail.com>

On Wed, Sep 16, 2015 at 9:27 PM, Jorge Tim?n <jtimon at jtimon.cc> wrote:

> For enforcing new restrictions on your own blocks (thus at the policy
> level, not consensus) you don't need to wait for 75%. You can do it from
> the start (this way all miners setting the bit will enforce the new
> restrictions.
>
At 75%, you have a pretty solid super-majority.

You can safely reject blocks that have the bit set but are invalid
according to the new rule (as long as everyone who sets the bit does it
too).
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150916/d701990e/attachment-0001.html>

From jtimon at jtimon.cc  Wed Sep 16 20:38:20 2015
From: jtimon at jtimon.cc (=?UTF-8?B?Sm9yZ2UgVGltw7Nu?=)
Date: Wed, 16 Sep 2015 22:38:20 +0200
Subject: [bitcoin-dev] [BIP Proposal] Version bits with timeout and
	delay.
In-Reply-To: <CAE-z3OXATJ6HGKqU=vxc8k-yCMAMwXiWQJxvO3D_O256_ZODtw@mail.gmail.com>
References: <87mvwqb132.fsf@rustcorp.com.au>
	<CAE-z3OWLteNyBWuYSkYLZNteOGjDch_fViOV2kpWCaZkXsbu4w@mail.gmail.com>
	<87r3lyjewl.fsf@rustcorp.com.au>
	<CABm2gDqh=Dv2Ygctg+jEt61N_nJDRBMqdZypSPtmfM2QrY4AYQ@mail.gmail.com>
	<CAE-z3OXATJ6HGKqU=vxc8k-yCMAMwXiWQJxvO3D_O256_ZODtw@mail.gmail.com>
Message-ID: <CABm2gDppFsTbh3JtdJkAkV_GzKFYAOLiEmtQPCgS9O6b7eWFuw@mail.gmail.com>

No, 95% is safer and will produce less orphaned blocks.
0%is fine to do it in your own blocks.

I agree on using height vs time. Rusty, what do you mean by being easier
for bip writers? How is writing "block x" any harder than writing "date y".
On Sep 16, 2015 4:32 PM, "Tier Nolan via bitcoin-dev" <
bitcoin-dev at lists.linuxfoundation.org> wrote:

>
>
> On Wed, Sep 16, 2015 at 9:27 PM, Jorge Tim?n <jtimon at jtimon.cc> wrote:
>
>> For enforcing new restrictions on your own blocks (thus at the policy
>> level, not consensus) you don't need to wait for 75%. You can do it from
>> the start (this way all miners setting the bit will enforce the new
>> restrictions.
>>
> At 75%, you have a pretty solid super-majority.
>
> You can safely reject blocks that have the bit set but are invalid
> according to the new rule (as long as everyone who sets the bit does it
> too).
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150916/2eb2025c/attachment.html>

From tier.nolan at gmail.com  Wed Sep 16 20:48:57 2015
From: tier.nolan at gmail.com (Tier Nolan)
Date: Wed, 16 Sep 2015 21:48:57 +0100
Subject: [bitcoin-dev] [BIP Proposal] Version bits with timeout and
	delay.
In-Reply-To: <CABm2gDppFsTbh3JtdJkAkV_GzKFYAOLiEmtQPCgS9O6b7eWFuw@mail.gmail.com>
References: <87mvwqb132.fsf@rustcorp.com.au>
	<CAE-z3OWLteNyBWuYSkYLZNteOGjDch_fViOV2kpWCaZkXsbu4w@mail.gmail.com>
	<87r3lyjewl.fsf@rustcorp.com.au>
	<CABm2gDqh=Dv2Ygctg+jEt61N_nJDRBMqdZypSPtmfM2QrY4AYQ@mail.gmail.com>
	<CAE-z3OXATJ6HGKqU=vxc8k-yCMAMwXiWQJxvO3D_O256_ZODtw@mail.gmail.com>
	<CABm2gDppFsTbh3JtdJkAkV_GzKFYAOLiEmtQPCgS9O6b7eWFuw@mail.gmail.com>
Message-ID: <CAE-z3OXbUhsyzd=8hxzFAST9rEQyTg9whn+CMh92S0FMdLH4ug@mail.gmail.com>

On Wed, Sep 16, 2015 at 9:38 PM, Jorge Tim?n <jtimon at jtimon.cc> wrote:

> No, 95% is safer and will produce less orphaned blocks.
>
The point of the 75% is just as a test run.  Enforcement wouldn't happen
until 95%.

At 75%, if someone sets the bit, then they should be creating valid blocks
(under the rule).
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150916/855e71c0/attachment.html>

From jtimon at jtimon.cc  Wed Sep 16 20:54:56 2015
From: jtimon at jtimon.cc (=?UTF-8?B?Sm9yZ2UgVGltw7Nu?=)
Date: Wed, 16 Sep 2015 22:54:56 +0200
Subject: [bitcoin-dev] [BIP Proposal] Version bits with timeout and
	delay.
In-Reply-To: <CAE-z3OXbUhsyzd=8hxzFAST9rEQyTg9whn+CMh92S0FMdLH4ug@mail.gmail.com>
References: <87mvwqb132.fsf@rustcorp.com.au>
	<CAE-z3OWLteNyBWuYSkYLZNteOGjDch_fViOV2kpWCaZkXsbu4w@mail.gmail.com>
	<87r3lyjewl.fsf@rustcorp.com.au>
	<CABm2gDqh=Dv2Ygctg+jEt61N_nJDRBMqdZypSPtmfM2QrY4AYQ@mail.gmail.com>
	<CAE-z3OXATJ6HGKqU=vxc8k-yCMAMwXiWQJxvO3D_O256_ZODtw@mail.gmail.com>
	<CABm2gDppFsTbh3JtdJkAkV_GzKFYAOLiEmtQPCgS9O6b7eWFuw@mail.gmail.com>
	<CAE-z3OXbUhsyzd=8hxzFAST9rEQyTg9whn+CMh92S0FMdLH4ug@mail.gmail.com>
Message-ID: <CABm2gDo4f6bpJeobwRyoukKw9t=ApuRtHMYWpWFXjv9=K7aFyA@mail.gmail.com>

On Sep 16, 2015 4:49 PM, "Tier Nolan via bitcoin-dev" <
bitcoin-dev at lists.linuxfoundation.org> wrote:
>
>
>
> On Wed, Sep 16, 2015 at 9:38 PM, Jorge Tim?n <jtimon at jtimon.cc> wrote:
>>
>> No, 95% is safer and will produce less orphaned blocks.
>
> The point of the 75% is just as a test run.  Enforcement wouldn't happen
until 95%.
>
> At 75%, if someone sets the bit, then they should be creating valid
blocks (under the rule).

You shouldn't rely on that, some may start applying the restrictions in
their own blocks at 0% and others only at 90%. Until it becomes a consensus
rule it is just part of the standard policy (and we shouldn't rely on nodes
following the standard policy).
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150916/0756bd20/attachment.html>

From tier.nolan at gmail.com  Wed Sep 16 20:57:42 2015
From: tier.nolan at gmail.com (Tier Nolan)
Date: Wed, 16 Sep 2015 21:57:42 +0100
Subject: [bitcoin-dev] [BIP Proposal] Version bits with timeout and
	delay.
In-Reply-To: <CABm2gDo4f6bpJeobwRyoukKw9t=ApuRtHMYWpWFXjv9=K7aFyA@mail.gmail.com>
References: <87mvwqb132.fsf@rustcorp.com.au>
	<CAE-z3OWLteNyBWuYSkYLZNteOGjDch_fViOV2kpWCaZkXsbu4w@mail.gmail.com>
	<87r3lyjewl.fsf@rustcorp.com.au>
	<CABm2gDqh=Dv2Ygctg+jEt61N_nJDRBMqdZypSPtmfM2QrY4AYQ@mail.gmail.com>
	<CAE-z3OXATJ6HGKqU=vxc8k-yCMAMwXiWQJxvO3D_O256_ZODtw@mail.gmail.com>
	<CABm2gDppFsTbh3JtdJkAkV_GzKFYAOLiEmtQPCgS9O6b7eWFuw@mail.gmail.com>
	<CAE-z3OXbUhsyzd=8hxzFAST9rEQyTg9whn+CMh92S0FMdLH4ug@mail.gmail.com>
	<CABm2gDo4f6bpJeobwRyoukKw9t=ApuRtHMYWpWFXjv9=K7aFyA@mail.gmail.com>
Message-ID: <CAE-z3OUyNpmG5uhSCExf39zmmB-b9xDrn+gkp3UFeg7M3G8E5g@mail.gmail.com>

On Wed, Sep 16, 2015 at 9:54 PM, Jorge Tim?n <jtimon at jtimon.cc> wrote:

>
> On Sep 16, 2015 4:49 PM, "Tier Nolan via bitcoin-dev" <
> bitcoin-dev at lists.linuxfoundation.org> wrote:
> > At 75%, if someone sets the bit, then they should be creating valid
> blocks (under the rule).
>
> You shouldn't rely on that, some may start applying the restrictions in
> their own blocks at 0% and others only at 90%. Until it becomes a consensus
> rule it is just part of the standard policy (and we shouldn't rely on nodes
> following the standard policy).
>

It would be a consensus rule.  If >75% of the blocks in the last 2016
window have the bit set, then reject all blocks that have the bit set and
fail to meet the rule.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150916/530b12d1/attachment.html>

From jtimon at jtimon.cc  Wed Sep 16 21:03:43 2015
From: jtimon at jtimon.cc (=?UTF-8?B?Sm9yZ2UgVGltw7Nu?=)
Date: Wed, 16 Sep 2015 23:03:43 +0200
Subject: [bitcoin-dev] [BIP Proposal] Version bits with timeout and
	delay.
In-Reply-To: <CAE-z3OUyNpmG5uhSCExf39zmmB-b9xDrn+gkp3UFeg7M3G8E5g@mail.gmail.com>
References: <87mvwqb132.fsf@rustcorp.com.au>
	<CAE-z3OWLteNyBWuYSkYLZNteOGjDch_fViOV2kpWCaZkXsbu4w@mail.gmail.com>
	<87r3lyjewl.fsf@rustcorp.com.au>
	<CABm2gDqh=Dv2Ygctg+jEt61N_nJDRBMqdZypSPtmfM2QrY4AYQ@mail.gmail.com>
	<CAE-z3OXATJ6HGKqU=vxc8k-yCMAMwXiWQJxvO3D_O256_ZODtw@mail.gmail.com>
	<CABm2gDppFsTbh3JtdJkAkV_GzKFYAOLiEmtQPCgS9O6b7eWFuw@mail.gmail.com>
	<CAE-z3OXbUhsyzd=8hxzFAST9rEQyTg9whn+CMh92S0FMdLH4ug@mail.gmail.com>
	<CABm2gDo4f6bpJeobwRyoukKw9t=ApuRtHMYWpWFXjv9=K7aFyA@mail.gmail.com>
	<CAE-z3OUyNpmG5uhSCExf39zmmB-b9xDrn+gkp3UFeg7M3G8E5g@mail.gmail.com>
Message-ID: <CABm2gDphLRQ6huhxvcx1YvbsmaBHA_sk6MEZF+hgdxoC472P+w@mail.gmail.com>

I understand your proposal, but I don't see what it accomplishes compared
to applying the new rule from the start (in your own blocks) and wait for
95% for consensus activation (which is my preference and it's much simpler
to implement).
What are the disadvantages of my approach? What are the advantages of yours?
On Sep 16, 2015 4:57 PM, "Tier Nolan via bitcoin-dev" <
bitcoin-dev at lists.linuxfoundation.org> wrote:

>
>
> On Wed, Sep 16, 2015 at 9:54 PM, Jorge Tim?n <jtimon at jtimon.cc> wrote:
>
>>
>> On Sep 16, 2015 4:49 PM, "Tier Nolan via bitcoin-dev" <
>> bitcoin-dev at lists.linuxfoundation.org> wrote:
>> > At 75%, if someone sets the bit, then they should be creating valid
>> blocks (under the rule).
>>
>> You shouldn't rely on that, some may start applying the restrictions in
>> their own blocks at 0% and others only at 90%. Until it becomes a consensus
>> rule it is just part of the standard policy (and we shouldn't rely on nodes
>> following the standard policy).
>>
>
> It would be a consensus rule.  If >75% of the blocks in the last 2016
> window have the bit set, then reject all blocks that have the bit set and
> fail to meet the rule.
>
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150916/8b4bf287/attachment-0001.html>

From jgarzik at gmail.com  Wed Sep 16 21:32:04 2015
From: jgarzik at gmail.com (Jeff Garzik)
Date: Wed, 16 Sep 2015 17:32:04 -0400
Subject: [bitcoin-dev] Scaling Bitcoin conference micro-report
Message-ID: <CADm_WcaLKqhR=WcJ5B52Q9SAAa+AdZY6Kz5OCQVUc_RQm6e9gg@mail.gmail.com>

During Scaling Bitcoin, Bitcoin Core committers and notable contributors
got together and chatted about where a "greatest common denominator" type
consensus might be.  The following is a without-attribution (Chatham House)
summary.  This is my own personal summary of the chat; any errors are my
own; this is _not_ a consensus statement or anything formal.

- Background (pre-conference, was on public IRC): "net-utxo", calculating
transaction size within block by applying a delta to transaction size based
on the amount of data added, or removed, from the UTXO set.  Fee is then
evaluated after the delta is applied.  This aligns user incentives with
UTXO resource usage/cost.  Original idea by gmaxwell (and others??).

- Many interested or at least willing to accept a "short term bump", a hard
fork to modify block size limit regime to be cost-based via "net-utxo"
rather than a simple static hard limit.  2-4-8 and 17%/year were debated
and seemed "in range" with what might work as a short term bump - net after
applying the new cost metric.

- Hard fork method:  Leaning towards "if (timestamp > X)" flag day hard
fork Y months in the future.  Set high bit in version, resulting in a
negative number, to more cleanly fork away.  "miner advisement" - miners,
as they've done recently, signal non-binding (Bitcoin Core does not examine
the value) engineering readiness for a hard fork via coinbase moniker.
Some fork cancellation method is useful, if unsuccessful after Z time
elapses.

- As discussed publicly elsewhere, other forks may be signaled via setting
a bit in version, and then triggering a fork'ing change once a threshold is
reached.

Chat participants are invited to reply to this message with their own
corrections and comments and summary in their view.

For the wider community, take this as one of many "inputs" described at
Scaling Bitcoin.  Over the next few months developers and the community
should evaluate everything discussed and work towards some concrete
proposal(s) that are implemented, tested and simulated in December in Hong
Kong.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150916/b53805a1/attachment.html>

From lf-lists at mattcorallo.com  Wed Sep 16 21:51:57 2015
From: lf-lists at mattcorallo.com (Matt Corallo)
Date: Wed, 16 Sep 2015 21:51:57 +0000
Subject: [bitcoin-dev] Scaling Bitcoin conference micro-report
In-Reply-To: <CADm_WcaLKqhR=WcJ5B52Q9SAAa+AdZY6Kz5OCQVUc_RQm6e9gg@mail.gmail.com>
References: <CADm_WcaLKqhR=WcJ5B52Q9SAAa+AdZY6Kz5OCQVUc_RQm6e9gg@mail.gmail.com>
Message-ID: <55F9E47D.50507@mattcorallo.com>

I only have one "correction", included inline.

On 09/16/15 21:32, Jeff Garzik via bitcoin-dev wrote:
> 
> During Scaling Bitcoin, Bitcoin Core committers and notable contributors
> got together and chatted about where a "greatest common denominator"
> type consensus might be.  The following is a without-attribution
> (Chatham House) summary.  This is my own personal summary of the chat;
> any errors are my own; this is _not_ a consensus statement or anything
> formal.
> 
> - Background (pre-conference, was on public IRC): "net-utxo",
> calculating transaction size within block by applying a delta to
> transaction size based on the amount of data added, or removed, from the
> UTXO set.  Fee is then evaluated after the delta is applied.  This
> aligns user incentives with UTXO resource usage/cost.  Original idea by
> gmaxwell (and others??).
> 
> - Many interested or at least willing to accept a "short term bump", a
> hard fork to modify block size limit regime to be cost-based via
> "net-utxo" rather than a simple static hard limit.  2-4-8 and 17%/year
> were debated and seemed "in range" with what might work as a short term
> bump - net after applying the new cost metric.

I would be careful to point out that hard numbers were deliberately NOT
discussed. Though some general things were thrown out, they were not
extensively discussed nor agreed to. I personally think 2-4 is "in
range", though 8 maybe not so much. Of course it depends on exactly how
the non-blocksize limit accounting/adjusting is done.

Still, the "greatest common denominator" agreement did not seem to be
agreeing to an increase which continues over time, but which instead
limits itself to a set, smooth increase for X time and then requires a
second hardfork if there is agreement on a need for more blocksize at
that point.


> - Hard fork method:  Leaning towards "if (timestamp > X)" flag day hard
> fork Y months in the future.  Set high bit in version, resulting in a
> negative number, to more cleanly fork away.  "miner advisement" -
> miners, as they've done recently, signal non-binding (Bitcoin Core does
> not examine the value) engineering readiness for a hard fork via
> coinbase moniker.  Some fork cancellation method is useful, if
> unsuccessful after Z time elapses.
> 
> - As discussed publicly elsewhere, other forks may be signaled via
> setting a bit in version, and then triggering a fork'ing change once a
> threshold is reached.
> 
> Chat participants are invited to reply to this message with their own
> corrections and comments and summary in their view.
> 
> For the wider community, take this as one of many "inputs" described at
> Scaling Bitcoin.  Over the next few months developers and the community
> should evaluate everything discussed and work towards some concrete
> proposal(s) that are implemented, tested and simulated in December in
> Hong Kong.

From pete at petertodd.org  Wed Sep 16 22:29:28 2015
From: pete at petertodd.org (Peter Todd)
Date: Wed, 16 Sep 2015 18:29:28 -0400
Subject: [bitcoin-dev] libconsensus and bitcoin development process
In-Reply-To: <CADm_WcY8Vy+k+5BaBS+jV6D6tmSXrok8rAxoPxxKOzUhyPWgMg@mail.gmail.com>
References: <CADm_WcY8Vy+k+5BaBS+jV6D6tmSXrok8rAxoPxxKOzUhyPWgMg@mail.gmail.com>
Message-ID: <20150916222928.GC32688@muck>

On Tue, Sep 15, 2015 at 12:10:37AM -0400, Jeff Garzik via bitcoin-dev wrote:
> Refactors however have a very real negative impact.
> bitcoin/bitcoin.git is not only the source tree in the universe.
> Software engineers at home, at startups, and at major companies are
> maintaining branches of their own.

Incidentally, it'd help if we got some insight into why those branches
are being maintained; what features are in those branches that Bitcoin
Core doesn't have?

I've run into a number of cases where companies were maintaining forks
of Bitcoin Core unnecessarily, where a different, loosely coupled,
architecture could do what they needed to do without including the new
logic in the codebase itself.

-- 
'peter'[:-1]@petertodd.org
000000000000000013137b1bd77e352d28fa36309be1c821180eda408bcb745c
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 650 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150916/107d673c/attachment.sig>

From btcdrak at gmail.com  Wed Sep 16 22:40:06 2015
From: btcdrak at gmail.com (Btc Drak)
Date: Wed, 16 Sep 2015 23:40:06 +0100
Subject: [bitcoin-dev] [BIP-draft] CHECKSEQUENCEVERIFY - An opcode for
 relative locktime
In-Reply-To: <CAOG=w-tuFtX2t+0FVfkoObw_a9-7j4LwX87YJU1n7adYu=DMdQ@mail.gmail.com>
References: <CADJgMztgE_GkbrsP7zCEHNPA3P6T=aSFfhkcN-q=gVhWP0vKXg@mail.gmail.com>
	<CADJgMzv8G3EqLBwEYRHJZ+fO_Jwzy0koi2pJ_iNRkXmoVarGcg@mail.gmail.com>
	<CABm2gDod9z6ksgaCv86qFCyKLTQSL3+oNns+__5H77hVhs05DQ@mail.gmail.com>
	<CAOG=w-sbOcaogkic2i4A5eZnBQ79LUibsGy0dyKyvQg53ktY1Q@mail.gmail.com>
	<55DA6470.9040301@thinlink.com>
	<CAAS2fgQKQpHu-nC1uSrigDx2JLUt64p-LqidVmiuULDE0MJCFQ@mail.gmail.com>
	<CABm2gDqW7OGuyZ1BTTeeivDf9wFVsAK9AaGYm8XWwLb2O2Lb+g@mail.gmail.com>
	<CAOG=w-ubk3nPfxy25Hd6kPeehf7vnYD5chksLWU5wU2t=jL5TA@mail.gmail.com>
	<CAOG=w-to4Vrx4ykKJTy5EAyN4GZd6Q=G5FzqZH-5J3Thz_VNpQ@mail.gmail.com>
	<CAOG=w-tuFtX2t+0FVfkoObw_a9-7j4LwX87YJU1n7adYu=DMdQ@mail.gmail.com>
Message-ID: <CADJgMzsPrg7VhTQC8aCvcQ3yAN8rtt+Qv_yfrCKMqOALpGPVyg@mail.gmail.com>

Where do we stand now on which sequencenumbers variation to use? We really
should make a decision now.

On Fri, Aug 28, 2015 at 12:32 AM, Mark Friedenbach via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> So I've created 2 new repositories with changed rules regarding
> sequencenumbers:
>
> https://github.com/maaku/bitcoin/tree/sequencenumbers2
>
> This repository inverts (un-inverts?) the sequence number. nSequence=1
> means 1 block relative lock-height. nSequence=LOCKTIME_THRESHOLD means 1
> second relative lock-height. nSequence>=0x80000000 (most significant bit
> set) is not interpreted as a relative lock-time.
>
> https://github.com/maaku/bitcoin/tree/sequencenumbers3
>
> This repository not only inverts the sequence number, but also interprets
> it as a fixed-point number. This allows up to 5 year relative lock times
> using blocks as units, and saves 12 low-order bits for future use. Or, up
> to about 2 year relative lock times using seconds as units, and saves 4
> bits for future use without second-level granularity. More bits could be
> recovered from time-based locktimes by choosing a higher granularity (a
> soft-fork change if done correctly).
>
> On Tue, Aug 25, 2015 at 3:08 PM, Mark Friedenbach <mark at friedenbach.org>
> wrote:
>
>> To follow up on this, let's say that you want to be able to have up to 1
>> year relative lock-times. This choice is somewhat arbitrary and what I
>> would like some input on, but I'll come back to this point.
>>
>>  * 1 bit is necessary to enable/disable relative lock-time.
>>
>>  * 1 bit is necessary to indicate whether seconds vs blocks as the unit
>> of measurement.
>>
>>  * 1 year of time with 1-second granularity requires 25 bits. However
>> since blocks occur at approximately 10 minute intervals on average, having
>> a relative lock-time significantly less than this interval doesn't make
>> much sense. A granularity of 256 seconds would be greater than the Nyquist
>> frequency and requires only 17 bits.
>>
>>  * 1 year of blocks with 1-block granularity requires 16 bits.
>>
>> So time-based relative lock time requires about 19 bits, and block-based
>> relative lock-time requires about 18 bits. That leaves 13 or 14 bits for
>> other uses.
>>
>> Assuming a maximum of 1-year relative lock-times. But what is an
>> appropriate maximum to choose? The use cases I have considered have only
>> had lock times on the order of a few days to a month or so. However I would
>> feel uncomfortable going less than a year for a hard maximum, and am having
>> trouble thinking of any use case that would require more than a year of
>> lock-time. Can anyone else think of a use case that requires >1yr relative
>> lock-time?
>>
>> TL;DR
>>
>> On Sun, Aug 23, 2015 at 7:37 PM, Mark Friedenbach <mark at friedenbach.org>
>> wrote:
>>
>>> A power of 2 would be far more efficient here. The key question is how
>>> long of a relative block time do you need? Figure out what the maximum
>>> should be ( I don't know what that would be, any ideas?) and then see how
>>> many bits you have left over.
>>> On Aug 23, 2015 7:23 PM, "Jorge Tim?n" <
>>> bitcoin-dev at lists.linuxfoundation.org> wrote:
>>>
>>>> On Mon, Aug 24, 2015 at 3:01 AM, Gregory Maxwell via bitcoin-dev
>>>> <bitcoin-dev at lists.linuxfoundation.org> wrote:
>>>> > Seperately, to Mark and Btcdrank: Adding an extra wrinkel to the
>>>> > discussion has any thought been given to represent one block with more
>>>> > than one increment?  This would leave additional space for future
>>>> > signaling, or allow, for example, higher resolution numbers for a
>>>> > sharechain commitement.
>>>>
>>>> No, I don't think anybody thought about this. I just explained this to
>>>> Pieter using "for example, 10 instead of 1".
>>>> He suggested 600 increments so that it is more similar to timestamps.
>>>> _______________________________________________
>>>> bitcoin-dev mailing list
>>>> bitcoin-dev at lists.linuxfoundation.org
>>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>>>
>>>
>>
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150916/bfdc2567/attachment-0001.html>

From elombrozo at gmail.com  Wed Sep 16 22:52:09 2015
From: elombrozo at gmail.com (Eric Lombrozo)
Date: Wed, 16 Sep 2015 18:52:09 -0400
Subject: [bitcoin-dev] [BIP Proposal] Version bits with timeout
	and	delay.
In-Reply-To: <CABm2gDphLRQ6huhxvcx1YvbsmaBHA_sk6MEZF+hgdxoC472P+w@mail.gmail.com>
References: <87mvwqb132.fsf@rustcorp.com.au>
	<CAE-z3OWLteNyBWuYSkYLZNteOGjDch_fViOV2kpWCaZkXsbu4w@mail.gmail.com>
	<87r3lyjewl.fsf@rustcorp.com.au>
	<CABm2gDqh=Dv2Ygctg+jEt61N_nJDRBMqdZypSPtmfM2QrY4AYQ@mail.gmail.com>
	<CAE-z3OXATJ6HGKqU=vxc8k-yCMAMwXiWQJxvO3D_O256_ZODtw@mail.gmail.com>
	<CABm2gDppFsTbh3JtdJkAkV_GzKFYAOLiEmtQPCgS9O6b7eWFuw@mail.gmail.com>
	<CAE-z3OXbUhsyzd=8hxzFAST9rEQyTg9whn+CMh92S0FMdLH4ug@mail.gmail.com>
	<CABm2gDo4f6bpJeobwRyoukKw9t=ApuRtHMYWpWFXjv9=K7aFyA@mail.gmail.com>
	<CAE-z3OUyNpmG5uhSCExf39zmmB-b9xDrn+gkp3UFeg7M3G8E5g@mail.gmail.com>
	<CABm2gDphLRQ6huhxvcx1YvbsmaBHA_sk6MEZF+hgdxoC472P+w@mail.gmail.com>
Message-ID: <CDB1F26E-FE26-44F3-9A86-CDAE33A51B8B@gmail.com>

The exact numbers (95% vs. 75% etc) don't need to be completely specified to start working on an implementation. What really matters for now is defining the states and trigger mechanisms. I'd rather we not argue over the optimal values for supermajority requirement at this point.

On September 16, 2015 5:03:43 PM EDT, "Jorge Tim?n via bitcoin-dev" <bitcoin-dev at lists.linuxfoundation.org> wrote:
>I understand your proposal, but I don't see what it accomplishes
>compared
>to applying the new rule from the start (in your own blocks) and wait
>for
>95% for consensus activation (which is my preference and it's much
>simpler
>to implement).
>What are the disadvantages of my approach? What are the advantages of
>yours?
>On Sep 16, 2015 4:57 PM, "Tier Nolan via bitcoin-dev" <
>bitcoin-dev at lists.linuxfoundation.org> wrote:
>
>>
>>
>> On Wed, Sep 16, 2015 at 9:54 PM, Jorge Tim?n <jtimon at jtimon.cc>
>wrote:
>>
>>>
>>> On Sep 16, 2015 4:49 PM, "Tier Nolan via bitcoin-dev" <
>>> bitcoin-dev at lists.linuxfoundation.org> wrote:
>>> > At 75%, if someone sets the bit, then they should be creating
>valid
>>> blocks (under the rule).
>>>
>>> You shouldn't rely on that, some may start applying the restrictions
>in
>>> their own blocks at 0% and others only at 90%. Until it becomes a
>consensus
>>> rule it is just part of the standard policy (and we shouldn't rely
>on nodes
>>> following the standard policy).
>>>
>>
>> It would be a consensus rule.  If >75% of the blocks in the last 2016
>> window have the bit set, then reject all blocks that have the bit set
>and
>> fail to meet the rule.
>>
>>
>> _______________________________________________
>> bitcoin-dev mailing list
>> bitcoin-dev at lists.linuxfoundation.org
>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>
>>
>
>
>------------------------------------------------------------------------
>
>_______________________________________________
>bitcoin-dev mailing list
>bitcoin-dev at lists.linuxfoundation.org
>https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev

-- 
Sent from my Android device with K-9 Mail. Please excuse my brevity.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150916/d29bd9ce/attachment.html>

From elombrozo at gmail.com  Wed Sep 16 23:23:18 2015
From: elombrozo at gmail.com (Eric Lombrozo)
Date: Wed, 16 Sep 2015 19:23:18 -0400
Subject: [bitcoin-dev] [BIP-draft] CHECKSEQUENCEVERIFY - An opcode for
	relative locktime
In-Reply-To: <CADJgMzsPrg7VhTQC8aCvcQ3yAN8rtt+Qv_yfrCKMqOALpGPVyg@mail.gmail.com>
References: <CADJgMztgE_GkbrsP7zCEHNPA3P6T=aSFfhkcN-q=gVhWP0vKXg@mail.gmail.com>
	<CADJgMzv8G3EqLBwEYRHJZ+fO_Jwzy0koi2pJ_iNRkXmoVarGcg@mail.gmail.com>
	<CABm2gDod9z6ksgaCv86qFCyKLTQSL3+oNns+__5H77hVhs05DQ@mail.gmail.com>
	<CAOG=w-sbOcaogkic2i4A5eZnBQ79LUibsGy0dyKyvQg53ktY1Q@mail.gmail.com>
	<55DA6470.9040301@thinlink.com>
	<CAAS2fgQKQpHu-nC1uSrigDx2JLUt64p-LqidVmiuULDE0MJCFQ@mail.gmail.com>
	<CABm2gDqW7OGuyZ1BTTeeivDf9wFVsAK9AaGYm8XWwLb2O2Lb+g@mail.gmail.com>
	<CAOG=w-ubk3nPfxy25Hd6kPeehf7vnYD5chksLWU5wU2t=jL5TA@mail.gmail.com>
	<CAOG=w-to4Vrx4ykKJTy5EAyN4GZd6Q=G5FzqZH-5J3Thz_VNpQ@mail.gmail.com>
	<CAOG=w-tuFtX2t+0FVfkoObw_a9-7j4LwX87YJU1n7adYu=DMdQ@mail.gmail.com>
	<CADJgMzsPrg7VhTQC8aCvcQ3yAN8rtt+Qv_yfrCKMqOALpGPVyg@mail.gmail.com>
Message-ID: <4E3B7469-1018-4649-8DF1-6597F82774F1@gmail.com>

I'd rather replace the whole nSequence thing with an explicit relative locktime with clear semantics...but I'm not going to fight this one too much.

On September 16, 2015 6:40:06 PM EDT, Btc Drak via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:
>Where do we stand now on which sequencenumbers variation to use? We
>really
>should make a decision now.
>
>On Fri, Aug 28, 2015 at 12:32 AM, Mark Friedenbach via bitcoin-dev <
>bitcoin-dev at lists.linuxfoundation.org> wrote:
>
>> So I've created 2 new repositories with changed rules regarding
>> sequencenumbers:
>>
>> https://github.com/maaku/bitcoin/tree/sequencenumbers2
>>
>> This repository inverts (un-inverts?) the sequence number.
>nSequence=1
>> means 1 block relative lock-height. nSequence=LOCKTIME_THRESHOLD
>means 1
>> second relative lock-height. nSequence>=0x80000000 (most significant
>bit
>> set) is not interpreted as a relative lock-time.
>>
>> https://github.com/maaku/bitcoin/tree/sequencenumbers3
>>
>> This repository not only inverts the sequence number, but also
>interprets
>> it as a fixed-point number. This allows up to 5 year relative lock
>times
>> using blocks as units, and saves 12 low-order bits for future use.
>Or, up
>> to about 2 year relative lock times using seconds as units, and saves
>4
>> bits for future use without second-level granularity. More bits could
>be
>> recovered from time-based locktimes by choosing a higher granularity
>(a
>> soft-fork change if done correctly).
>>
>> On Tue, Aug 25, 2015 at 3:08 PM, Mark Friedenbach
><mark at friedenbach.org>
>> wrote:
>>
>>> To follow up on this, let's say that you want to be able to have up
>to 1
>>> year relative lock-times. This choice is somewhat arbitrary and what
>I
>>> would like some input on, but I'll come back to this point.
>>>
>>>  * 1 bit is necessary to enable/disable relative lock-time.
>>>
>>>  * 1 bit is necessary to indicate whether seconds vs blocks as the
>unit
>>> of measurement.
>>>
>>>  * 1 year of time with 1-second granularity requires 25 bits.
>However
>>> since blocks occur at approximately 10 minute intervals on average,
>having
>>> a relative lock-time significantly less than this interval doesn't
>make
>>> much sense. A granularity of 256 seconds would be greater than the
>Nyquist
>>> frequency and requires only 17 bits.
>>>
>>>  * 1 year of blocks with 1-block granularity requires 16 bits.
>>>
>>> So time-based relative lock time requires about 19 bits, and
>block-based
>>> relative lock-time requires about 18 bits. That leaves 13 or 14 bits
>for
>>> other uses.
>>>
>>> Assuming a maximum of 1-year relative lock-times. But what is an
>>> appropriate maximum to choose? The use cases I have considered have
>only
>>> had lock times on the order of a few days to a month or so. However
>I would
>>> feel uncomfortable going less than a year for a hard maximum, and am
>having
>>> trouble thinking of any use case that would require more than a year
>of
>>> lock-time. Can anyone else think of a use case that requires >1yr
>relative
>>> lock-time?
>>>
>>> TL;DR
>>>
>>> On Sun, Aug 23, 2015 at 7:37 PM, Mark Friedenbach
><mark at friedenbach.org>
>>> wrote:
>>>
>>>> A power of 2 would be far more efficient here. The key question is
>how
>>>> long of a relative block time do you need? Figure out what the
>maximum
>>>> should be ( I don't know what that would be, any ideas?) and then
>see how
>>>> many bits you have left over.
>>>> On Aug 23, 2015 7:23 PM, "Jorge Tim?n" <
>>>> bitcoin-dev at lists.linuxfoundation.org> wrote:
>>>>
>>>>> On Mon, Aug 24, 2015 at 3:01 AM, Gregory Maxwell via bitcoin-dev
>>>>> <bitcoin-dev at lists.linuxfoundation.org> wrote:
>>>>> > Seperately, to Mark and Btcdrank: Adding an extra wrinkel to the
>>>>> > discussion has any thought been given to represent one block
>with more
>>>>> > than one increment?  This would leave additional space for
>future
>>>>> > signaling, or allow, for example, higher resolution numbers for
>a
>>>>> > sharechain commitement.
>>>>>
>>>>> No, I don't think anybody thought about this. I just explained
>this to
>>>>> Pieter using "for example, 10 instead of 1".
>>>>> He suggested 600 increments so that it is more similar to
>timestamps.
>>>>> _______________________________________________
>>>>> bitcoin-dev mailing list
>>>>> bitcoin-dev at lists.linuxfoundation.org
>>>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>>>>
>>>>
>>>
>>
>> _______________________________________________
>> bitcoin-dev mailing list
>> bitcoin-dev at lists.linuxfoundation.org
>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>
>>
>
>
>------------------------------------------------------------------------
>
>_______________________________________________
>bitcoin-dev mailing list
>bitcoin-dev at lists.linuxfoundation.org
>https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev

-- 
Sent from my Android device with K-9 Mail. Please excuse my brevity.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150916/6256d65f/attachment.html>

From mark at friedenbach.org  Thu Sep 17 04:23:41 2015
From: mark at friedenbach.org (Mark Friedenbach)
Date: Thu, 17 Sep 2015 00:23:41 -0400
Subject: [bitcoin-dev] [BIP-draft] CHECKSEQUENCEVERIFY - An opcode for
 relative locktime
In-Reply-To: <4E3B7469-1018-4649-8DF1-6597F82774F1@gmail.com>
References: <CADJgMztgE_GkbrsP7zCEHNPA3P6T=aSFfhkcN-q=gVhWP0vKXg@mail.gmail.com>
	<CADJgMzv8G3EqLBwEYRHJZ+fO_Jwzy0koi2pJ_iNRkXmoVarGcg@mail.gmail.com>
	<CABm2gDod9z6ksgaCv86qFCyKLTQSL3+oNns+__5H77hVhs05DQ@mail.gmail.com>
	<CAOG=w-sbOcaogkic2i4A5eZnBQ79LUibsGy0dyKyvQg53ktY1Q@mail.gmail.com>
	<55DA6470.9040301@thinlink.com>
	<CAAS2fgQKQpHu-nC1uSrigDx2JLUt64p-LqidVmiuULDE0MJCFQ@mail.gmail.com>
	<CABm2gDqW7OGuyZ1BTTeeivDf9wFVsAK9AaGYm8XWwLb2O2Lb+g@mail.gmail.com>
	<CAOG=w-ubk3nPfxy25Hd6kPeehf7vnYD5chksLWU5wU2t=jL5TA@mail.gmail.com>
	<CAOG=w-to4Vrx4ykKJTy5EAyN4GZd6Q=G5FzqZH-5J3Thz_VNpQ@mail.gmail.com>
	<CAOG=w-tuFtX2t+0FVfkoObw_a9-7j4LwX87YJU1n7adYu=DMdQ@mail.gmail.com>
	<CADJgMzsPrg7VhTQC8aCvcQ3yAN8rtt+Qv_yfrCKMqOALpGPVyg@mail.gmail.com>
	<4E3B7469-1018-4649-8DF1-6597F82774F1@gmail.com>
Message-ID: <CAOG=w-u2b9BTNyAxdzEnOxazr1Gc_Yrf5CxCfrjeJi39NV=cgQ@mail.gmail.com>

Eric, that would be, I think, my sequencenumbers2 branch in which nSequence
is an explicit relative lock-time field (unless the most significant bit is
set). That has absolutely clear semantics. You should comment on #6312
where this is being discussed.

On Wed, Sep 16, 2015 at 7:23 PM, Eric Lombrozo <elombrozo at gmail.com> wrote:

> I'd rather replace the whole nSequence thing with an explicit relative
> locktime with clear semantics...but I'm not going to fight this one too
> much.
>
>
> On September 16, 2015 6:40:06 PM EDT, Btc Drak via bitcoin-dev <
> bitcoin-dev at lists.linuxfoundation.org> wrote:
>>
>> Where do we stand now on which sequencenumbers variation to use? We
>> really should make a decision now.
>>
>> On Fri, Aug 28, 2015 at 12:32 AM, Mark Friedenbach via bitcoin-dev <
>> bitcoin-dev at lists.linuxfoundation.org> wrote:
>>
>>> So I've created 2 new repositories with changed rules regarding
>>> sequencenumbers:
>>>
>>> https://github.com/maaku/bitcoin/tree/sequencenumbers2
>>>
>>> This repository inverts (un-inverts?) the sequence number. nSequence=1
>>> means 1 block relative lock-height. nSequence=LOCKTIME_THRESHOLD means 1
>>> second relative lock-height. nSequence>=0x80000000 (most significant bit
>>> set) is not interpreted as a relative lock-time.
>>>
>>> https://github.com/maaku/bitcoin/tree/sequencenumbers3
>>>
>>> This repository not only inverts the sequence number, but also
>>> interprets it as a fixed-point number. This allows up to 5 year relative
>>> lock times using blocks as units, and saves 12 low-order bits for future
>>> use. Or, up to about 2 year relative lock times using seconds as units, and
>>> saves 4 bits for future use without second-level granularity. More bits
>>> could be recovered from time-based locktimes by choosing a higher
>>> granularity (a soft-fork change if done correctly).
>>>
>>> On Tue, Aug 25, 2015 at 3:08 PM, Mark Friedenbach <mark at friedenbach.org>
>>> wrote:
>>>
>>>> To follow up on this, let's say that you want to be able to have up to
>>>> 1 year relative lock-times. This choice is somewhat arbitrary and what I
>>>> would like some input on, but I'll come back to this point.
>>>>
>>>>  * 1 bit is necessary to enable/disable relative lock-time.
>>>>
>>>>  * 1 bit is necessary to indicate whether seconds vs blocks as the unit
>>>> of measurement.
>>>>
>>>>  * 1 year of time with 1-second granularity requires 25 bits. However
>>>> since blocks occur at approximately 10 minute intervals on average, having
>>>> a relative lock-time significantly less than this interval doesn't make
>>>> much sense. A granularity of 256 seconds would be greater than the Nyquist
>>>> frequency and requires only 17 bits.
>>>>
>>>>  * 1 year of blocks with 1-block granularity requires 16 bits.
>>>>
>>>> So time-based relative lock time requires about 19 bits, and
>>>> block-based relative lock-time requires about 18 bits. That leaves 13 or 14
>>>> bits for other uses.
>>>>
>>>> Assuming a maximum of 1-year relative lock-times. But what is an
>>>> appropriate maximum to choose? The use cases I have considered have only
>>>> had lock times on the order of a few days to a month or so. However I would
>>>> feel uncomfortable going less than a year for a hard maximum, and am having
>>>> trouble thinking of any use case that would require more than a year of
>>>> lock-time. Can anyone else think of a use case that requires >1yr relative
>>>> lock-time?
>>>>
>>>> TL;DR
>>>>
>>>> On Sun, Aug 23, 2015 at 7:37 PM, Mark Friedenbach <mark at friedenbach.org
>>>> > wrote:
>>>>
>>>>> A power of 2 would be far more efficient here. The key question is how
>>>>> long of a relative block time do you need? Figure out what the maximum
>>>>> should be ( I don't know what that would be, any ideas?) and then see how
>>>>> many bits you have left over.
>>>>> On Aug 23, 2015 7:23 PM, "Jorge Tim?n" <
>>>>> bitcoin-dev at lists.linuxfoundation.org> wrote:
>>>>>
>>>>>> On Mon, Aug 24, 2015 at 3:01 AM, Gregory Maxwell via bitcoin-dev
>>>>>> <bitcoin-dev at lists.linuxfoundation.org> wrote:
>>>>>> > Seperately, to Mark and Btcdrank: Adding an extra wrinkel to the
>>>>>> > discussion has any thought been given to represent one block with
>>>>>> more
>>>>>> > than one increment?  This would leave additional space for future
>>>>>> > signaling, or allow, for example, higher resolution numbers for a
>>>>>> > sharechain commitement.
>>>>>>
>>>>>> No, I don't think anybody thought about this. I just explained this to
>>>>>> Pieter using "for example, 10 instead of 1".
>>>>>> He suggested 600 increments so that it is more similar to timestamps.
>>>>>> _______________________________________________
>>>>>> bitcoin-dev mailing list
>>>>>> bitcoin-dev at lists.linuxfoundation.org
>>>>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>>>>>
>>>>>
>>>>
>>>
>>> _______________________________________________
>>> bitcoin-dev mailing list
>>> bitcoin-dev at lists.linuxfoundation.org
>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>>
>>>
>> ------------------------------
>>
>> bitcoin-dev mailing list
>> bitcoin-dev at lists.linuxfoundation.org
>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>
>>
> --
> Sent from my Android device with K-9 Mail. Please excuse my brevity.
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150917/2a787e07/attachment-0001.html>

From jl2012 at xbt.hk  Thu Sep 17 07:43:02 2015
From: jl2012 at xbt.hk (jl2012 at xbt.hk)
Date: Thu, 17 Sep 2015 03:43:02 -0400
Subject: [bitcoin-dev] [BIP-draft] CHECKSEQUENCEVERIFY - An opcode for
 relative locktime
In-Reply-To: <CAOG=w-tuFtX2t+0FVfkoObw_a9-7j4LwX87YJU1n7adYu=DMdQ@mail.gmail.com>
References: <CADJgMztgE_GkbrsP7zCEHNPA3P6T=aSFfhkcN-q=gVhWP0vKXg@mail.gmail.com>
	<CADJgMzv8G3EqLBwEYRHJZ+fO_Jwzy0koi2pJ_iNRkXmoVarGcg@mail.gmail.com>
	<CABm2gDod9z6ksgaCv86qFCyKLTQSL3+oNns+__5H77hVhs05DQ@mail.gmail.com>
	<CAOG=w-sbOcaogkic2i4A5eZnBQ79LUibsGy0dyKyvQg53ktY1Q@mail.gmail.com>
	<55DA6470.9040301@thinlink.com>
	<CAAS2fgQKQpHu-nC1uSrigDx2JLUt64p-LqidVmiuULDE0MJCFQ@mail.gmail.com>
	<CABm2gDqW7OGuyZ1BTTeeivDf9wFVsAK9AaGYm8XWwLb2O2Lb+g@mail.gmail.com>
	<CAOG=w-ubk3nPfxy25Hd6kPeehf7vnYD5chksLWU5wU2t=jL5TA@mail.gmail.com>
	<CAOG=w-to4Vrx4ykKJTy5EAyN4GZd6Q=G5FzqZH-5J3Thz_VNpQ@mail.gmail.com>
	<CAOG=w-tuFtX2t+0FVfkoObw_a9-7j4LwX87YJU1n7adYu=DMdQ@mail.gmail.com>
Message-ID: <52804bf0fb44a77efb3610e6bdf978e4@xbt.hk>

How many years of relative lock time do we need? It really depends why 
we need a relative lock time in the first place, what what does it offer 
in addition to CHECKLOCKTIMEVERIFY. The only case I know is when the 
confirmation taking too long, CLTV may expire before the tx is 
confirmed. For use case like this, 1 year of relative lock time is much 
more than enough, since Bitcoin is basically worthless if it takes 
months to confirm a tx with a reasonable fee.

Is there any other use case of CSV that is irreplaceable by CLTV? There 
is only one example in the BIP CSV draft.

For the timebased relative lock time, 256 seconds of granularity is more 
than enough since the block interval is 600s. Although it is not 
impossible to reduce the block interval in the future, that will be a 
hardfork anyway and we may just hardfork BIP68/CSV at the same time.



Mark Friedenbach via bitcoin-dev ? 2015-08-27 19:32 ??:
> So I've created 2 new repositories with changed rules regarding
> sequencenumbers:
> 
> https://github.com/maaku/bitcoin/tree/sequencenumbers2 [2]
> 
> This repository inverts (un-inverts?) the sequence number. nSequence=1
> means 1 block relative lock-height. nSequence=LOCKTIME_THRESHOLD means
> 1 second relative lock-height. nSequence>=0x80000000 (most significant
> bit set) is not interpreted as a relative lock-time.
> 
> https://github.com/maaku/bitcoin/tree/sequencenumbers3 [3]
> 
> This repository not only inverts the sequence number, but also
> interprets it as a fixed-point number. This allows up to 5 year
> relative lock times using blocks as units, and saves 12 low-order bits
> for future use. Or, up to about 2 year relative lock times using
> seconds as units, and saves 4 bits for future use without second-level
> granularity. More bits could be recovered from time-based locktimes by
> choosing a higher granularity (a soft-fork change if done correctly).
> 
> On Tue, Aug 25, 2015 at 3:08 PM, Mark Friedenbach
> <mark at friedenbach.org> wrote:
> 
>> To follow up on this, let's say that you want to be able to have up
>> to 1 year relative lock-times. This choice is somewhat arbitrary and
>> what I would like some input on, but I'll come back to this point.
>> 
>> * 1 bit is necessary to enable/disable relative lock-time.
>> 
>> * 1 bit is necessary to indicate whether seconds vs blocks as the
>> unit of measurement.
>> 
>> * 1 year of time with 1-second granularity requires 25 bits.
>> However since blocks occur at approximately 10 minute intervals on
>> average, having a relative lock-time significantly less than this
>> interval doesn't make much sense. A granularity of 256 seconds would
>> be greater than the Nyquist frequency and requires only 17 bits.
>> 
>> * 1 year of blocks with 1-block granularity requires 16 bits.
>> 
>> So time-based relative lock time requires about 19 bits, and
>> block-based relative lock-time requires about 18 bits. That leaves
>> 13 or 14 bits for other uses.
>> 
>> Assuming a maximum of 1-year relative lock-times. But what is an
>> appropriate maximum to choose? The use cases I have considered have
>> only had lock times on the order of a few days to a month or so.
>> However I would feel uncomfortable going less than a year for a hard
>> maximum, and am having trouble thinking of any use case that would
>> require more than a year of lock-time. Can anyone else think of a
>> use case that requires >1yr relative lock-time?
>> 
>> TL;DR
>> 
>> On Sun, Aug 23, 2015 at 7:37 PM, Mark Friedenbach
>> <mark at friedenbach.org> wrote:
>> 
>> A power of 2 would be far more efficient here. The key question is
>> how long of a relative block time do you need? Figure out what the
>> maximum should be ( I don't know what that would be, any ideas?) and
>> then see how many bits you have left over.
>> 
>> On Aug 23, 2015 7:23 PM, "Jorge Tim?n"
>> <bitcoin-dev at lists.linuxfoundation.org> wrote:
>> On Mon, Aug 24, 2015 at 3:01 AM, Gregory Maxwell via bitcoin-dev
>> <bitcoin-dev at lists.linuxfoundation.org> wrote:
>>> Seperately, to Mark and Btcdrank: Adding an extra wrinkel to the
>>> discussion has any thought been given to represent one block with
>> more
>>> than one increment? This would leave additional space for future
>>> signaling, or allow, for example, higher resolution numbers for a
>>> sharechain commitement.
>> 
>> No, I don't think anybody thought about this. I just explained this
>> to
>> Pieter using "for example, 10 instead of 1".
>> He suggested 600 increments so that it is more similar to
>> timestamps.
>> _______________________________________________
>> bitcoin-dev mailing list
>> bitcoin-dev at lists.linuxfoundation.org
>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev [1]
> 
> 
> 
> Links:
> ------
> [1] https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> [2] https://github.com/maaku/bitcoin/tree/sequencenumbers2
> [3] https://github.com/maaku/bitcoin/tree/sequencenumbers3
> 
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev


From tier.nolan at gmail.com  Thu Sep 17 10:38:29 2015
From: tier.nolan at gmail.com (Tier Nolan)
Date: Thu, 17 Sep 2015 11:38:29 +0100
Subject: [bitcoin-dev] [BIP Proposal] Version bits with timeout and
	delay.
In-Reply-To: <CDB1F26E-FE26-44F3-9A86-CDAE33A51B8B@gmail.com>
References: <87mvwqb132.fsf@rustcorp.com.au>
	<CAE-z3OWLteNyBWuYSkYLZNteOGjDch_fViOV2kpWCaZkXsbu4w@mail.gmail.com>
	<87r3lyjewl.fsf@rustcorp.com.au>
	<CABm2gDqh=Dv2Ygctg+jEt61N_nJDRBMqdZypSPtmfM2QrY4AYQ@mail.gmail.com>
	<CAE-z3OXATJ6HGKqU=vxc8k-yCMAMwXiWQJxvO3D_O256_ZODtw@mail.gmail.com>
	<CABm2gDppFsTbh3JtdJkAkV_GzKFYAOLiEmtQPCgS9O6b7eWFuw@mail.gmail.com>
	<CAE-z3OXbUhsyzd=8hxzFAST9rEQyTg9whn+CMh92S0FMdLH4ug@mail.gmail.com>
	<CABm2gDo4f6bpJeobwRyoukKw9t=ApuRtHMYWpWFXjv9=K7aFyA@mail.gmail.com>
	<CAE-z3OUyNpmG5uhSCExf39zmmB-b9xDrn+gkp3UFeg7M3G8E5g@mail.gmail.com>
	<CABm2gDphLRQ6huhxvcx1YvbsmaBHA_sk6MEZF+hgdxoC472P+w@mail.gmail.com>
	<CDB1F26E-FE26-44F3-9A86-CDAE33A51B8B@gmail.com>
Message-ID: <CAE-z3OWu7HgHh=8nAZMfJaekL03HHXvHrkRBho=aBAoRtHR9Eg@mail.gmail.com>

On Wed, Sep 16, 2015 at 11:52 PM, Eric Lombrozo <elombrozo at gmail.com> wrote:

> The exact numbers (95% vs. 75% etc) don't need to be completely specified
> to start working on an implementation. What really matters for now is
> defining the states and trigger mechanisms. I'd rather we not argue over
> the optimal values for supermajority requirement at this point.
>

The discussion was about what each state means, not the thresholds
exactly.  I agree that can be set later.

On Wed, Sep 16, 2015 at 10:03 PM, Jorge Tim?n <jtimon at jtimon.cc> wrote:

> I understand your proposal, but I don't see what it accomplishes compared
to applying the new rule from the start (in your own blocks)

> and wait for 95% for consensus activation (which is my preference and
it's much simpler to implement).
> What are the disadvantages of my approach? What are the advantages of
yours?
I agree that miners should apply the rule from the start in their own
blocks.


*defined*
Miners set bit
Miners apply rule to their own blocks
If 75% of blocks of last 2016 have bit set, goto tentative


*tentative*
Miners set bit
Miners apply rule to their own blocks
Miners enforce rule in blocks with bit set (reject invalid blocks)
If 95% of blocks of last 2016 have bit set, goto locked-in


*locked-in*

Point of no return
Miners set bit
Miners apply rule to their own blocks
Miners enforce rule in blocks with bit set (reject invalid blocks)
After 2016 blocks goto activated


*activated*

Miners don't set bit
Reject any block that has the bit set for 10080 blocks (10 diff periods)
Reject blocks that don't follow new rule

The advantage of enforcing the rule when 75% is reached (but only for
blocks with the bit set) is that miners get early notification that they
have implemented the rule incorrectly.    They might produce blocks that
they think are fine, but which aren't.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150917/10045fa6/attachment.html>

From jtimon at jtimon.cc  Thu Sep 17 13:59:43 2015
From: jtimon at jtimon.cc (=?UTF-8?B?Sm9yZ2UgVGltw7Nu?=)
Date: Thu, 17 Sep 2015 15:59:43 +0200
Subject: [bitcoin-dev] [BIP Proposal] Version bits with timeout and
	delay.
In-Reply-To: <CAE-z3OWu7HgHh=8nAZMfJaekL03HHXvHrkRBho=aBAoRtHR9Eg@mail.gmail.com>
References: <87mvwqb132.fsf@rustcorp.com.au>
	<CAE-z3OWLteNyBWuYSkYLZNteOGjDch_fViOV2kpWCaZkXsbu4w@mail.gmail.com>
	<87r3lyjewl.fsf@rustcorp.com.au>
	<CABm2gDqh=Dv2Ygctg+jEt61N_nJDRBMqdZypSPtmfM2QrY4AYQ@mail.gmail.com>
	<CAE-z3OXATJ6HGKqU=vxc8k-yCMAMwXiWQJxvO3D_O256_ZODtw@mail.gmail.com>
	<CABm2gDppFsTbh3JtdJkAkV_GzKFYAOLiEmtQPCgS9O6b7eWFuw@mail.gmail.com>
	<CAE-z3OXbUhsyzd=8hxzFAST9rEQyTg9whn+CMh92S0FMdLH4ug@mail.gmail.com>
	<CABm2gDo4f6bpJeobwRyoukKw9t=ApuRtHMYWpWFXjv9=K7aFyA@mail.gmail.com>
	<CAE-z3OUyNpmG5uhSCExf39zmmB-b9xDrn+gkp3UFeg7M3G8E5g@mail.gmail.com>
	<CABm2gDphLRQ6huhxvcx1YvbsmaBHA_sk6MEZF+hgdxoC472P+w@mail.gmail.com>
	<CDB1F26E-FE26-44F3-9A86-CDAE33A51B8B@gmail.com>
	<CAE-z3OWu7HgHh=8nAZMfJaekL03HHXvHrkRBho=aBAoRtHR9Eg@mail.gmail.com>
Message-ID: <CABm2gDr=cfXZgA8HUik-8eSS8QgcB1mndJnvNrK8-NcY6yjPYw@mail.gmail.com>

On Thu, Sep 17, 2015 at 12:38 PM, Tier Nolan via bitcoin-dev
<bitcoin-dev at lists.linuxfoundation.org> wrote:
> The advantage of enforcing the rule when 75% is reached (but only for blocks
> with the bit set) is that miners get early notification that they have
> implemented the rule incorrectly.    They might produce blocks that they
> think are fine, but which aren't.

I'm still unconvinced, but thanks, this is what I was asking for.

From bitcoin at upalc.com  Thu Sep 17 17:49:47 2015
From: bitcoin at upalc.com (Upal Chakraborty)
Date: Thu, 17 Sep 2015 23:19:47 +0530
Subject: [bitcoin-dev] BIP 106 : Graphs Required
Message-ID: <CAED3CWjwOszaFQart02hVRvbmC4L_+J7CDz5cx6-8aaLZ5hgWg@mail.gmail.com>

Hello,

First of all, I'm not sure if it is the right place to ask for such help.
But, I thought, someone might just help out.

I'm looking for two graphs to analyze the effectiveness of BIP 106, which
can be found at
https://github.com/bitcoin/bips/blob/master/bip-0106.mediawiki.
Blockchain.info currently provides a graph plotting the historical data of
block size for each block, which can be found at...

https://blockchain.info/charts/avg-block-size?timespan=all&showDataPoints=false&daysAverageString=1&show_header=true&scale=0&address=

I need two similar graphs plotting max block size cap against each block,
calculated as per my two proposals in BIP 106. Is it possible for anyone to
provide these two graphs assuming max block size cap for block 1 was 1mb ?

Thanks & Regards,
Upal Chakraborty
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150917/e1f248e6/attachment.html>

From jl2012 at xbt.hk  Thu Sep 17 18:41:39 2015
From: jl2012 at xbt.hk (jl2012 at xbt.hk)
Date: Thu, 17 Sep 2015 14:41:39 -0400
Subject: [bitcoin-dev] Fill-or-kill transaction
Message-ID: <a50b82c156c805a284386d80a42cc926@xbt.hk>

Fill-or-kill tx is not a new idea and is discussed in the Scaling 
Bitcoin workshop. In Satoshi's implementation of nLockTime, a huge range 
of timestamp (from 1970 to 2009) is wasted. By exploiting this unused 
range and with compromise in the time resolution, a fill-or-kill system 
could be built with a softfork.

-----------
Two new parameters, nLockTime2 and nKillTime are defined:

nLockTime2 (Range: 0-1,853,010)
0: Tx could be confirmed at or after block 420,000
1: Tx could be confirmed at or after block 420,004
.
.
719,999: Tx could be confirmed at or after block 3,299,996 (about 55 
years from now)
720,000: Tx could be confirmed if the median time-past >= 1,474,562,048 
(2016-09-22)
720,001: Tx could be confirmed if the median time-past >= 1,474,564,096 
(2016-09-22)
.
.
1,853,010 (max): Tx could be confirmed if the median time-past >= 
3,794,966,528 (2090-04-04)

nKillTime (Range: 0-2047)
if nLockTime2 < 720,000, the tx could be confirmed at or before block 
(nLockTime2 + nKillTime * 4)
if nLockTime2 >= 720,000, the tx could be confirmed if the median 
time-past <= (nLockTime2 - 720,001 + nKillTime) * 2048

Finally, nLockTime = 500,000,000 + nKillTime + nLockTime2 * 2048

Setting a bit flag in tx nVersion will activate the new rules.

The resolution is 4 blocks or 2048s (34m)
The maximum confirmation window is 8188 blocks (56.9 days) or 
16,769,024s (48.5 days)

For example:
With nLockTime2 = 20 and nKillTime = 100, a tx could be confirmed only 
between block 420,080 and 420,480
With nLockTime2 = 730,000 and nKillTime = 1000, a tx could be confirmed 
only between median time-past of 1,495,042,048 and 1,497,090,048

----------------
Why is this a softfork?

Remember this formula: nLockTime = 500,000,000 + nKillTime + nLockTime2 
* 2048

For height based nLockTime2 (<= 719,999)

For nLockTime2 = 0 and nKillTime = 0, nLockTime = 500,000,000, which 
means the tx could be confirmed after 1970-01-01 with the original lock 
time rule. As the new rule does not allow confirmation until block 
420,000, it's clearly a softfork.

It is not difficult to see that the growth of nLockTime will never catch 
up nLockTime2.

At nLockTime2 = 719,999 and nKillTime = 2047, nLockTime = 1,974,559,999, 
which means 2016-09-22. However, the new rule will not allow 
confirmation until block 3,299,996 which is decades to go



For time based nLockTime2 (> 720,000)

For nLockTime2 = 720,000 and nKillTime = 0, nLockTime = 1,974,560,000, 
which means the tx could be confirmed after median time-past 
1,474,560,000 (assuming BIP113). However, the new rule will not allow 
confirmation until 1,474,562,048, therefore a soft fork.

For nLockTime2 = 720,000 and nKillTime = 2047, nLockTime = 
1,974,562,047, which could be confirmed at 1,474,562,047. Again, the new 
rule will not allow confirmation until 1,474,562,048. The 1 second 
difference makes it a soft fork.

Actually, for every nLockTime2 value >= 720,000, the lock time with the 
new rule must be 1-2048 seconds later than the original rule.

For nLockTime2 = 1,853,010 and nKillTime = 2047, nLockTime = 
4,294,966,527, which is the highest possible value with the 32-bit 
nLockTime

----------------
User's perspective:

A user wants his tx either filled or killed in about 3 hours. He will 
set a time-based nLockTime2 according to the current median time-past, 
and set nKillTime = 5

A user wants his tx get confirmed in the block 630000, the first block 
with reward below 10BTC. He is willing to pay high fee but don't want it 
gets into another block. He will set nLockTime2 = 210,000 and nKillTime 
= 0

----------------
OP_CLTV

Time-based OP_CLTV could be upgraded to support time-based nLockTime2. 
However, height-based OP_CLTV is not compatible with nLockTime2. To 
spend a height-based OP_CLTV output, user must use the original 
nLockTime.

We may need a new OP_CLTV2 which could verify both nLockTime and 
nLockTime2

----------------
55 years after?

The height-based nLockTime2 will overflow in 55 years. It is very likely 
a hard fork will happen to implement a better fill-or-kill system. If 
not, we could reboot everything with another tx nVersion for another 55 
years.



From mark at friedenbach.org  Thu Sep 17 19:07:34 2015
From: mark at friedenbach.org (Mark Friedenbach)
Date: Thu, 17 Sep 2015 15:07:34 -0400
Subject: [bitcoin-dev] Fill-or-kill transaction
In-Reply-To: <a50b82c156c805a284386d80a42cc926@xbt.hk>
References: <a50b82c156c805a284386d80a42cc926@xbt.hk>
Message-ID: <CAOG=w-vGqsAcw5vdY8SaGVe4Q6XX1J=GCsZftWgjES_N_5c2pA@mail.gmail.com>

Note that this violates present assumptions about transaction validity,
unless a constraint also exists that any output of such an expiry block is
not spent for at least 100 blocks.

Do you have a clean way of ensuring this?

On Thu, Sep 17, 2015 at 2:41 PM, jl2012 via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> Fill-or-kill tx is not a new idea and is discussed in the Scaling Bitcoin
> workshop. In Satoshi's implementation of nLockTime, a huge range of
> timestamp (from 1970 to 2009) is wasted. By exploiting this unused range
> and with compromise in the time resolution, a fill-or-kill system could be
> built with a softfork.
>
> -----------
> Two new parameters, nLockTime2 and nKillTime are defined:
>
> nLockTime2 (Range: 0-1,853,010)
> 0: Tx could be confirmed at or after block 420,000
> 1: Tx could be confirmed at or after block 420,004
> .
> .
> 719,999: Tx could be confirmed at or after block 3,299,996 (about 55 years
> from now)
> 720,000: Tx could be confirmed if the median time-past >= 1,474,562,048
> (2016-09-22)
> 720,001: Tx could be confirmed if the median time-past >= 1,474,564,096
> (2016-09-22)
> .
> .
> 1,853,010 (max): Tx could be confirmed if the median time-past >=
> 3,794,966,528 (2090-04-04)
>
> nKillTime (Range: 0-2047)
> if nLockTime2 < 720,000, the tx could be confirmed at or before block
> (nLockTime2 + nKillTime * 4)
> if nLockTime2 >= 720,000, the tx could be confirmed if the median
> time-past <= (nLockTime2 - 720,001 + nKillTime) * 2048
>
> Finally, nLockTime = 500,000,000 + nKillTime + nLockTime2 * 2048
>
> Setting a bit flag in tx nVersion will activate the new rules.
>
> The resolution is 4 blocks or 2048s (34m)
> The maximum confirmation window is 8188 blocks (56.9 days) or 16,769,024s
> (48.5 days)
>
> For example:
> With nLockTime2 = 20 and nKillTime = 100, a tx could be confirmed only
> between block 420,080 and 420,480
> With nLockTime2 = 730,000 and nKillTime = 1000, a tx could be confirmed
> only between median time-past of 1,495,042,048 and 1,497,090,048
>
> ----------------
> Why is this a softfork?
>
> Remember this formula: nLockTime = 500,000,000 + nKillTime + nLockTime2 *
> 2048
>
> For height based nLockTime2 (<= 719,999)
>
> For nLockTime2 = 0 and nKillTime = 0, nLockTime = 500,000,000, which means
> the tx could be confirmed after 1970-01-01 with the original lock time
> rule. As the new rule does not allow confirmation until block 420,000, it's
> clearly a softfork.
>
> It is not difficult to see that the growth of nLockTime will never catch
> up nLockTime2.
>
> At nLockTime2 = 719,999 and nKillTime = 2047, nLockTime = 1,974,559,999,
> which means 2016-09-22. However, the new rule will not allow confirmation
> until block 3,299,996 which is decades to go
>
>
>
> For time based nLockTime2 (> 720,000)
>
> For nLockTime2 = 720,000 and nKillTime = 0, nLockTime = 1,974,560,000,
> which means the tx could be confirmed after median time-past 1,474,560,000
> (assuming BIP113). However, the new rule will not allow confirmation until
> 1,474,562,048, therefore a soft fork.
>
> For nLockTime2 = 720,000 and nKillTime = 2047, nLockTime = 1,974,562,047,
> which could be confirmed at 1,474,562,047. Again, the new rule will not
> allow confirmation until 1,474,562,048. The 1 second difference makes it a
> soft fork.
>
> Actually, for every nLockTime2 value >= 720,000, the lock time with the
> new rule must be 1-2048 seconds later than the original rule.
>
> For nLockTime2 = 1,853,010 and nKillTime = 2047, nLockTime =
> 4,294,966,527, which is the highest possible value with the 32-bit nLockTime
>
> ----------------
> User's perspective:
>
> A user wants his tx either filled or killed in about 3 hours. He will set
> a time-based nLockTime2 according to the current median time-past, and set
> nKillTime = 5
>
> A user wants his tx get confirmed in the block 630000, the first block
> with reward below 10BTC. He is willing to pay high fee but don't want it
> gets into another block. He will set nLockTime2 = 210,000 and nKillTime = 0
>
> ----------------
> OP_CLTV
>
> Time-based OP_CLTV could be upgraded to support time-based nLockTime2.
> However, height-based OP_CLTV is not compatible with nLockTime2. To spend a
> height-based OP_CLTV output, user must use the original nLockTime.
>
> We may need a new OP_CLTV2 which could verify both nLockTime and nLockTime2
>
> ----------------
> 55 years after?
>
> The height-based nLockTime2 will overflow in 55 years. It is very likely a
> hard fork will happen to implement a better fill-or-kill system. If not, we
> could reboot everything with another tx nVersion for another 55 years.
>
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150917/78f51514/attachment.html>

From btcdrak at gmail.com  Thu Sep 17 19:12:08 2015
From: btcdrak at gmail.com (Btc Drak)
Date: Thu, 17 Sep 2015 20:12:08 +0100
Subject: [bitcoin-dev] Fill-or-kill transaction
In-Reply-To: <a50b82c156c805a284386d80a42cc926@xbt.hk>
References: <a50b82c156c805a284386d80a42cc926@xbt.hk>
Message-ID: <CADJgMzusBukiU1AFgm3k0C-oiSVvsHfV1Jk0E01KOQyGieJbsA@mail.gmail.com>

Forgive me if I have missed the exact use-case, but this seems overly
complex. Surely fill-or-kill refers to getting a transaction confirmed
within a few confirms or to drop the tx from the mempool so it wont be
considered for inclusion anymore. As such, you could just repurpose a small
range of nLocktime such that a TX will be accepted into mempool for a
specific period before expiring.

On Thu, Sep 17, 2015 at 7:41 PM, jl2012 via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> Fill-or-kill tx is not a new idea and is discussed in the Scaling Bitcoin
> workshop. In Satoshi's implementation of nLockTime, a huge range of
> timestamp (from 1970 to 2009) is wasted. By exploiting this unused range
> and with compromise in the time resolution, a fill-or-kill system could be
> built with a softfork.
>
> -----------
> Two new parameters, nLockTime2 and nKillTime are defined:
>
> nLockTime2 (Range: 0-1,853,010)
> 0: Tx could be confirmed at or after block 420,000
> 1: Tx could be confirmed at or after block 420,004
> .
> .
> 719,999: Tx could be confirmed at or after block 3,299,996 (about 55 years
> from now)
> 720,000: Tx could be confirmed if the median time-past >= 1,474,562,048
> (2016-09-22)
> 720,001: Tx could be confirmed if the median time-past >= 1,474,564,096
> (2016-09-22)
> .
> .
> 1,853,010 (max): Tx could be confirmed if the median time-past >=
> 3,794,966,528 (2090-04-04)
>
> nKillTime (Range: 0-2047)
> if nLockTime2 < 720,000, the tx could be confirmed at or before block
> (nLockTime2 + nKillTime * 4)
> if nLockTime2 >= 720,000, the tx could be confirmed if the median
> time-past <= (nLockTime2 - 720,001 + nKillTime) * 2048
>
> Finally, nLockTime = 500,000,000 + nKillTime + nLockTime2 * 2048
>
> Setting a bit flag in tx nVersion will activate the new rules.
>
> The resolution is 4 blocks or 2048s (34m)
> The maximum confirmation window is 8188 blocks (56.9 days) or 16,769,024s
> (48.5 days)
>
> For example:
> With nLockTime2 = 20 and nKillTime = 100, a tx could be confirmed only
> between block 420,080 and 420,480
> With nLockTime2 = 730,000 and nKillTime = 1000, a tx could be confirmed
> only between median time-past of 1,495,042,048 and 1,497,090,048
>
> ----------------
> Why is this a softfork?
>
> Remember this formula: nLockTime = 500,000,000 + nKillTime + nLockTime2 *
> 2048
>
> For height based nLockTime2 (<= 719,999)
>
> For nLockTime2 = 0 and nKillTime = 0, nLockTime = 500,000,000, which means
> the tx could be confirmed after 1970-01-01 with the original lock time
> rule. As the new rule does not allow confirmation until block 420,000, it's
> clearly a softfork.
>
> It is not difficult to see that the growth of nLockTime will never catch
> up nLockTime2.
>
> At nLockTime2 = 719,999 and nKillTime = 2047, nLockTime = 1,974,559,999,
> which means 2016-09-22. However, the new rule will not allow confirmation
> until block 3,299,996 which is decades to go
>
>
>
> For time based nLockTime2 (> 720,000)
>
> For nLockTime2 = 720,000 and nKillTime = 0, nLockTime = 1,974,560,000,
> which means the tx could be confirmed after median time-past 1,474,560,000
> (assuming BIP113). However, the new rule will not allow confirmation until
> 1,474,562,048, therefore a soft fork.
>
> For nLockTime2 = 720,000 and nKillTime = 2047, nLockTime = 1,974,562,047,
> which could be confirmed at 1,474,562,047. Again, the new rule will not
> allow confirmation until 1,474,562,048. The 1 second difference makes it a
> soft fork.
>
> Actually, for every nLockTime2 value >= 720,000, the lock time with the
> new rule must be 1-2048 seconds later than the original rule.
>
> For nLockTime2 = 1,853,010 and nKillTime = 2047, nLockTime =
> 4,294,966,527, which is the highest possible value with the 32-bit nLockTime
>
> ----------------
> User's perspective:
>
> A user wants his tx either filled or killed in about 3 hours. He will set
> a time-based nLockTime2 according to the current median time-past, and set
> nKillTime = 5
>
> A user wants his tx get confirmed in the block 630000, the first block
> with reward below 10BTC. He is willing to pay high fee but don't want it
> gets into another block. He will set nLockTime2 = 210,000 and nKillTime = 0
>
> ----------------
> OP_CLTV
>
> Time-based OP_CLTV could be upgraded to support time-based nLockTime2.
> However, height-based OP_CLTV is not compatible with nLockTime2. To spend a
> height-based OP_CLTV output, user must use the original nLockTime.
>
> We may need a new OP_CLTV2 which could verify both nLockTime and nLockTime2
>
> ----------------
> 55 years after?
>
> The height-based nLockTime2 will overflow in 55 years. It is very likely a
> hard fork will happen to implement a better fill-or-kill system. If not, we
> could reboot everything with another tx nVersion for another 55 years.
>
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150917/13bdb4db/attachment.html>

From jtimon at jtimon.cc  Thu Sep 17 19:14:38 2015
From: jtimon at jtimon.cc (=?UTF-8?B?Sm9yZ2UgVGltw7Nu?=)
Date: Thu, 17 Sep 2015 21:14:38 +0200
Subject: [bitcoin-dev] Fill-or-kill transaction
In-Reply-To: <CAOG=w-vGqsAcw5vdY8SaGVe4Q6XX1J=GCsZftWgjES_N_5c2pA@mail.gmail.com>
References: <a50b82c156c805a284386d80a42cc926@xbt.hk>
	<CAOG=w-vGqsAcw5vdY8SaGVe4Q6XX1J=GCsZftWgjES_N_5c2pA@mail.gmail.com>
Message-ID: <CABm2gDp_afyqskEV8QmO43=-6R_2OJm36GVQxcQO_3ao2jC1gw@mail.gmail.com>

Fill or kill us normally used for trades and I think it can be confusing.
Previous times this has been discussed it has been discussed under
nExpiryTime or op_height (which enables expiration), for example, in the
freimarkets white paper.

As Mark points out this can be made safe by requiring that all the outputs
of a transaction that can expire have op_maturity/csv/rcltv of 100. That
makes them as reorg-safe as coinbase transactions. Unfortunately this
doesn't play very well with p2sh...
On Sep 17, 2015 3:08 PM, "Mark Friedenbach via bitcoin-dev" <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> Note that this violates present assumptions about transaction validity,
> unless a constraint also exists that any output of such an expiry block is
> not spent for at least 100 blocks.
>
> Do you have a clean way of ensuring this?
>
> On Thu, Sep 17, 2015 at 2:41 PM, jl2012 via bitcoin-dev <
> bitcoin-dev at lists.linuxfoundation.org> wrote:
>
>> Fill-or-kill tx is not a new idea and is discussed in the Scaling Bitcoin
>> workshop. In Satoshi's implementation of nLockTime, a huge range of
>> timestamp (from 1970 to 2009) is wasted. By exploiting this unused range
>> and with compromise in the time resolution, a fill-or-kill system could be
>> built with a softfork.
>>
>> -----------
>> Two new parameters, nLockTime2 and nKillTime are defined:
>>
>> nLockTime2 (Range: 0-1,853,010)
>> 0: Tx could be confirmed at or after block 420,000
>> 1: Tx could be confirmed at or after block 420,004
>> .
>> .
>> 719,999: Tx could be confirmed at or after block 3,299,996 (about 55
>> years from now)
>> 720,000: Tx could be confirmed if the median time-past >= 1,474,562,048
>> (2016-09-22)
>> 720,001: Tx could be confirmed if the median time-past >= 1,474,564,096
>> (2016-09-22)
>> .
>> .
>> 1,853,010 (max): Tx could be confirmed if the median time-past >=
>> 3,794,966,528 (2090-04-04)
>>
>> nKillTime (Range: 0-2047)
>> if nLockTime2 < 720,000, the tx could be confirmed at or before block
>> (nLockTime2 + nKillTime * 4)
>> if nLockTime2 >= 720,000, the tx could be confirmed if the median
>> time-past <= (nLockTime2 - 720,001 + nKillTime) * 2048
>>
>> Finally, nLockTime = 500,000,000 + nKillTime + nLockTime2 * 2048
>>
>> Setting a bit flag in tx nVersion will activate the new rules.
>>
>> The resolution is 4 blocks or 2048s (34m)
>> The maximum confirmation window is 8188 blocks (56.9 days) or 16,769,024s
>> (48.5 days)
>>
>> For example:
>> With nLockTime2 = 20 and nKillTime = 100, a tx could be confirmed only
>> between block 420,080 and 420,480
>> With nLockTime2 = 730,000 and nKillTime = 1000, a tx could be confirmed
>> only between median time-past of 1,495,042,048 and 1,497,090,048
>>
>> ----------------
>> Why is this a softfork?
>>
>> Remember this formula: nLockTime = 500,000,000 + nKillTime + nLockTime2 *
>> 2048
>>
>> For height based nLockTime2 (<= 719,999)
>>
>> For nLockTime2 = 0 and nKillTime = 0, nLockTime = 500,000,000, which
>> means the tx could be confirmed after 1970-01-01 with the original lock
>> time rule. As the new rule does not allow confirmation until block 420,000,
>> it's clearly a softfork.
>>
>> It is not difficult to see that the growth of nLockTime will never catch
>> up nLockTime2.
>>
>> At nLockTime2 = 719,999 and nKillTime = 2047, nLockTime = 1,974,559,999,
>> which means 2016-09-22. However, the new rule will not allow confirmation
>> until block 3,299,996 which is decades to go
>>
>>
>>
>> For time based nLockTime2 (> 720,000)
>>
>> For nLockTime2 = 720,000 and nKillTime = 0, nLockTime = 1,974,560,000,
>> which means the tx could be confirmed after median time-past 1,474,560,000
>> (assuming BIP113). However, the new rule will not allow confirmation until
>> 1,474,562,048, therefore a soft fork.
>>
>> For nLockTime2 = 720,000 and nKillTime = 2047, nLockTime = 1,974,562,047,
>> which could be confirmed at 1,474,562,047. Again, the new rule will not
>> allow confirmation until 1,474,562,048. The 1 second difference makes it a
>> soft fork.
>>
>> Actually, for every nLockTime2 value >= 720,000, the lock time with the
>> new rule must be 1-2048 seconds later than the original rule.
>>
>> For nLockTime2 = 1,853,010 and nKillTime = 2047, nLockTime =
>> 4,294,966,527, which is the highest possible value with the 32-bit nLockTime
>>
>> ----------------
>> User's perspective:
>>
>> A user wants his tx either filled or killed in about 3 hours. He will set
>> a time-based nLockTime2 according to the current median time-past, and set
>> nKillTime = 5
>>
>> A user wants his tx get confirmed in the block 630000, the first block
>> with reward below 10BTC. He is willing to pay high fee but don't want it
>> gets into another block. He will set nLockTime2 = 210,000 and nKillTime = 0
>>
>> ----------------
>> OP_CLTV
>>
>> Time-based OP_CLTV could be upgraded to support time-based nLockTime2.
>> However, height-based OP_CLTV is not compatible with nLockTime2. To spend a
>> height-based OP_CLTV output, user must use the original nLockTime.
>>
>> We may need a new OP_CLTV2 which could verify both nLockTime and
>> nLockTime2
>>
>> ----------------
>> 55 years after?
>>
>> The height-based nLockTime2 will overflow in 55 years. It is very likely
>> a hard fork will happen to implement a better fill-or-kill system. If not,
>> we could reboot everything with another tx nVersion for another 55 years.
>>
>>
>> _______________________________________________
>> bitcoin-dev mailing list
>> bitcoin-dev at lists.linuxfoundation.org
>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>
>
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150917/3db9f191/attachment-0001.html>

From 1240902 at gmail.com  Thu Sep 17 22:33:19 2015
From: 1240902 at gmail.com (Chun Wang)
Date: Fri, 18 Sep 2015 06:33:19 +0800
Subject: [bitcoin-dev] Fill-or-kill transaction
In-Reply-To: <a50b82c156c805a284386d80a42cc926@xbt.hk>
References: <a50b82c156c805a284386d80a42cc926@xbt.hk>
Message-ID: <CAFzgq-xgBsMwQb7-yXj6UFov2LMzPP5LSQjTSG1fpW9-k+ZctQ@mail.gmail.com>

We are currently using nLockTime for share info and nSequence for
extranonce2. I have carefully reviewed the reference implementation of
BIP68 and it should be compatible, but this proposal may break the
implementation unless it does not affect coinbase transactions.

On Fri, Sep 18, 2015 at 2:41 AM, jl2012 via bitcoin-dev
<bitcoin-dev at lists.linuxfoundation.org> wrote:
> Fill-or-kill tx is not a new idea and is discussed in the Scaling Bitcoin
> workshop. In Satoshi's implementation of nLockTime, a huge range of
> timestamp (from 1970 to 2009) is wasted. By exploiting this unused range and
> with compromise in the time resolution, a fill-or-kill system could be built
> with a softfork.
>
> -----------
> Two new parameters, nLockTime2 and nKillTime are defined:
>
> nLockTime2 (Range: 0-1,853,010)
> 0: Tx could be confirmed at or after block 420,000
> 1: Tx could be confirmed at or after block 420,004
> .
> .
> 719,999: Tx could be confirmed at or after block 3,299,996 (about 55 years
> from now)
> 720,000: Tx could be confirmed if the median time-past >= 1,474,562,048
> (2016-09-22)
> 720,001: Tx could be confirmed if the median time-past >= 1,474,564,096
> (2016-09-22)
> .
> .
> 1,853,010 (max): Tx could be confirmed if the median time-past >=
> 3,794,966,528 (2090-04-04)
>
> nKillTime (Range: 0-2047)
> if nLockTime2 < 720,000, the tx could be confirmed at or before block
> (nLockTime2 + nKillTime * 4)
> if nLockTime2 >= 720,000, the tx could be confirmed if the median time-past
> <= (nLockTime2 - 720,001 + nKillTime) * 2048
>
> Finally, nLockTime = 500,000,000 + nKillTime + nLockTime2 * 2048
>
> Setting a bit flag in tx nVersion will activate the new rules.
>
> The resolution is 4 blocks or 2048s (34m)
> The maximum confirmation window is 8188 blocks (56.9 days) or 16,769,024s
> (48.5 days)
>
> For example:
> With nLockTime2 = 20 and nKillTime = 100, a tx could be confirmed only
> between block 420,080 and 420,480
> With nLockTime2 = 730,000 and nKillTime = 1000, a tx could be confirmed only
> between median time-past of 1,495,042,048 and 1,497,090,048
>
> ----------------
> Why is this a softfork?
>
> Remember this formula: nLockTime = 500,000,000 + nKillTime + nLockTime2 *
> 2048
>
> For height based nLockTime2 (<= 719,999)
>
> For nLockTime2 = 0 and nKillTime = 0, nLockTime = 500,000,000, which means
> the tx could be confirmed after 1970-01-01 with the original lock time rule.
> As the new rule does not allow confirmation until block 420,000, it's
> clearly a softfork.
>
> It is not difficult to see that the growth of nLockTime will never catch up
> nLockTime2.
>
> At nLockTime2 = 719,999 and nKillTime = 2047, nLockTime = 1,974,559,999,
> which means 2016-09-22. However, the new rule will not allow confirmation
> until block 3,299,996 which is decades to go
>
>
>
> For time based nLockTime2 (> 720,000)
>
> For nLockTime2 = 720,000 and nKillTime = 0, nLockTime = 1,974,560,000, which
> means the tx could be confirmed after median time-past 1,474,560,000
> (assuming BIP113). However, the new rule will not allow confirmation until
> 1,474,562,048, therefore a soft fork.
>
> For nLockTime2 = 720,000 and nKillTime = 2047, nLockTime = 1,974,562,047,
> which could be confirmed at 1,474,562,047. Again, the new rule will not
> allow confirmation until 1,474,562,048. The 1 second difference makes it a
> soft fork.
>
> Actually, for every nLockTime2 value >= 720,000, the lock time with the new
> rule must be 1-2048 seconds later than the original rule.
>
> For nLockTime2 = 1,853,010 and nKillTime = 2047, nLockTime = 4,294,966,527,
> which is the highest possible value with the 32-bit nLockTime
>
> ----------------
> User's perspective:
>
> A user wants his tx either filled or killed in about 3 hours. He will set a
> time-based nLockTime2 according to the current median time-past, and set
> nKillTime = 5
>
> A user wants his tx get confirmed in the block 630000, the first block with
> reward below 10BTC. He is willing to pay high fee but don't want it gets
> into another block. He will set nLockTime2 = 210,000 and nKillTime = 0
>
> ----------------
> OP_CLTV
>
> Time-based OP_CLTV could be upgraded to support time-based nLockTime2.
> However, height-based OP_CLTV is not compatible with nLockTime2. To spend a
> height-based OP_CLTV output, user must use the original nLockTime.
>
> We may need a new OP_CLTV2 which could verify both nLockTime and nLockTime2
>
> ----------------
> 55 years after?
>
> The height-based nLockTime2 will overflow in 55 years. It is very likely a
> hard fork will happen to implement a better fill-or-kill system. If not, we
> could reboot everything with another tx nVersion for another 55 years.
>
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev

From pete at petertodd.org  Thu Sep 17 22:44:05 2015
From: pete at petertodd.org (Peter Todd)
Date: Thu, 17 Sep 2015 22:44:05 +0000
Subject: [bitcoin-dev] Fill-or-kill transaction
In-Reply-To: <CABm2gDp_afyqskEV8QmO43=-6R_2OJm36GVQxcQO_3ao2jC1gw@mail.gmail.com>
References: <a50b82c156c805a284386d80a42cc926@xbt.hk>
	<CAOG=w-vGqsAcw5vdY8SaGVe4Q6XX1J=GCsZftWgjES_N_5c2pA@mail.gmail.com>
	<CABm2gDp_afyqskEV8QmO43=-6R_2OJm36GVQxcQO_3ao2jC1gw@mail.gmail.com>
Message-ID: <C9A1D16E-03F7-4860-8E9B-32A98E06CE49@petertodd.org>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512



On 17 September 2015 12:14:38 GMT-07:00, "Jorge Tim?n via bitcoin-dev" <bitcoin-dev at lists.linuxfoundation.org> wrote:
>Fill or kill us normally used for trades and I think it can be
>confusing.
>Previous times this has been discussed it has been discussed under
>nExpiryTime or op_height (which enables expiration), for example, in
>the
>freimarkets white paper.
>
>As Mark points out this can be made safe by requiring that all the
>outputs
>of a transaction that can expire have op_maturity/csv/rcltv of 100.
>That
>makes them as reorg-safe as coinbase transactions. Unfortunately this
>doesn't play very well with p2sh...

Why wouldn't that work with p2sh? It can be implemented by a "treat like Coinbase" flag in the UTXO set, set when the output is created.
-----BEGIN PGP SIGNATURE-----

iQE9BAEBCgAnIBxQZXRlciBUb2RkIDxwZXRlQHBldGVydG9kZC5vcmc+BQJV+0Ip
AAoJEMCF8hzn9Lncz4MIAIQpz7tKbmjEuETX6BnPatJ50I+kS6CQ4eE+e1irXpbb
OCMe0A2TGzw9G5t7DgMU1lCcbcbuqOxMOrHYXuGsGkpVtRrLFbkS/F9vCS2RJT0w
kRkL2ecN8riAjh1lUUgY1CEgVyhkwh6Rw1ZALu3Ba2tISysMfXjAW1GiLHlgxP7g
xD6zS0OTTokG/7+s1hGK2Nd4q/ZHnfOO1JgiBzrykGNq4enp7nRhiZKhnc/0ILJA
3WAsAMI14ZUxs95onjey7J3100tZBetYr14jzLRvf+w1klBNSvcen9dr+VhdyXYk
MPMOwuUtq4OI1vt3HDoMjNFT6olg0gTxzWe8Grn96S4=
=pP3Q
-----END PGP SIGNATURE-----


From laanwj at gmail.com  Fri Sep 18 00:07:20 2015
From: laanwj at gmail.com (Wladimir J. van der Laan)
Date: Fri, 18 Sep 2015 02:07:20 +0200
Subject: [bitcoin-dev] libconsensus and bitcoin development process
In-Reply-To: <20150916222928.GC32688@muck>
References: <CADm_WcY8Vy+k+5BaBS+jV6D6tmSXrok8rAxoPxxKOzUhyPWgMg@mail.gmail.com>
	<20150916222928.GC32688@muck>
Message-ID: <20150918000718.GA5251@amethyst.visucore.com>

On Wed, Sep 16, 2015 at 06:29:28PM -0400, Peter Todd via bitcoin-dev wrote:

> I've run into a number of cases where companies were maintaining forks
> of Bitcoin Core unnecessarily, where a different, loosely coupled,
> architecture could do what they needed to do without including the new
> logic in the codebase itself.

This is the same point I have been making to Jeff privately.

Refactors are a means to an end: a more modular, reusable and maintainable codebase. This goal is that new functionality can be plugged in more easily, and rebase work for e.g. functionality built on top can go down, not up, if it just hooks into well-defined interfaces here and there.

Although there has been a lot of progress, bitcoind's design is still too monolithic. To add a more involved feature, like say a new index over the block chain data, code needs to be touched all over the place. This change interacts with all other functionality, potentially breaking the base node functionality - risk for users that do NOT use the functionality. This increases risk and review time.

- *If possible* functionality should be built without changing bitcoind's code at all. An external process should be able to keep up to date with the chain, notice reorgs, and process block data accordingly. If bitcoind's interface does not allow that, or it is too difficult, that is what should be fixed. 
- *if not possible* then a change should at least touch the code in as few places as possible, and integrate with e.g. signal notification.

To name an example of it done right, IMO: Monero's 'simplewallet'. It is a command-line utility wallet that communicates with the node software, and remembers where it was in the chain, and processes changes to the chain state since its last invocation when it 'refreshes'. 
What is nice is that one can run an arbitary number of simplewallets against one node daemon, and unlike bitcoind's wallet it doesn't need to run as always-on daemon itself. It can be invoked when the user wants to do something with the wallet, or see if there are new transactions.

An index could be implemented entirely externally in a similar way, while still fully handling reorgs.

What one needs for that, I think, is a library that communicate with the node, and which offers functionality abstractly be similar to 'git pull': give me the tree path from my current known tip to the best tip, and supply the block hashes (and block data) along the way. 

My long-term vision of bitcoind is a P2P node with validation and blockchain store, with a couple of data sources that can be subscribed to or pulled from.

Wladimir

From laanwj at gmail.com  Fri Sep 18 01:07:10 2015
From: laanwj at gmail.com (Wladimir J. van der Laan)
Date: Fri, 18 Sep 2015 03:07:10 +0200
Subject: [bitcoin-dev] Weekly development meetings on IRC
Message-ID: <20150918010709.GB5251@amethyst.visucore.com>

Hello,

At Monday's code sprint we had a good idea to schedule a regular developer meeting in #bitcoin-dev.

Attendance is of course voluntary, but it may be good to have a time that many people are expected to be present and current issues can be discussed.

Any preference for days/times?

What about e.g. every week 15:00-16:00 UTC on Thursday?

Wladimir

From morcos at gmail.com  Fri Sep 18 02:56:17 2015
From: morcos at gmail.com (Alex Morcos)
Date: Thu, 17 Sep 2015 22:56:17 -0400
Subject: [bitcoin-dev] Weekly development meetings on IRC
In-Reply-To: <20150918010709.GB5251@amethyst.visucore.com>
References: <20150918010709.GB5251@amethyst.visucore.com>
Message-ID: <CAPWm=eX_kK0KjTuPgLo_L-_4YGnw9Gnk3ObUbaZ19SsYMzFEnQ@mail.gmail.com>

+1
sounds good to me!



On Thu, Sep 17, 2015 at 9:07 PM, Wladimir J. van der Laan via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> Hello,
>
> At Monday's code sprint we had a good idea to schedule a regular developer
> meeting in #bitcoin-dev.
>
> Attendance is of course voluntary, but it may be good to have a time that
> many people are expected to be present and current issues can be discussed.
>
> Any preference for days/times?
>
> What about e.g. every week 15:00-16:00 UTC on Thursday?
>
> Wladimir
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150917/074771ec/attachment.html>

From jl2012 at xbt.hk  Fri Sep 18 03:27:54 2015
From: jl2012 at xbt.hk (jl2012 at xbt.hk)
Date: Thu, 17 Sep 2015 23:27:54 -0400
Subject: [bitcoin-dev] Fill-or-kill transaction
In-Reply-To: <C9A1D16E-03F7-4860-8E9B-32A98E06CE49@petertodd.org>
References: <a50b82c156c805a284386d80a42cc926@xbt.hk>
	<CAOG=w-vGqsAcw5vdY8SaGVe4Q6XX1J=GCsZftWgjES_N_5c2pA@mail.gmail.com>
	<CABm2gDp_afyqskEV8QmO43=-6R_2OJm36GVQxcQO_3ao2jC1gw@mail.gmail.com>
	<C9A1D16E-03F7-4860-8E9B-32A98E06CE49@petertodd.org>
Message-ID: <014345a983eabf243d9ce127de0dff7c@xbt.hk>

Peter Todd via bitcoin-dev ? 2015-09-17 18:44 ??:

> It can be implemented by a "treat like Coinbase" flag in the
> UTXO set, set when the output is created.

I think this is the cleanest way to implement the maturity requirement. 
I understand why we need maturity, However, requiring 100 block maturity 
will unfortunately make the system much less appealing since the 
recipient may not like it. A fill-or-kill tx may still be used as the 
initial funding tx to the Lightning Network, as long as the counterparty 
is willing to take the extra risk.

Actually, a fill-or-kill tx is slight safer than a coinbase tx, 
depending on the difference between the absolute kill time and actual 
confirmation time. In a re-org, an orphaned coinbase tx is permanently 
invalidated and has no hope to be included again. However, an orphaned 
fill-or-kill tx may still be confirmed by another miner. If there is 
still a few days until the absolute kill time, a fill-or-kill tx is 
basically as safe as a normal tx.

With possibility of re-org and unpredictable block interval in mind, 
height-based fill-or-kill is not very useful since it is difficult for 
users to determine the actual kill time. If we could abolish the idea of 
height-based fill-or-kill, the resolution of time-based fill-or-kill 
might be improved.


------------------------------------

Chun Wang ? 2015-09-17 18:33 ??:
> We are currently using nLockTime for share info and nSequence for
> extranonce2. I have carefully reviewed the reference implementation of
> BIP68 and it should be compatible, but this proposal may break the
> implementation unless it does not affect coinbase transactions.
> 

The fill-or-kill system is totally optional, using a bit flag in tx 
nVersion to indicate. Everything should be fine unless you are also 
messing with the nVersion


-------------------------------------

Btc Drak ? 2015-09-17 15:12 ??:
> Forgive me if I have missed the exact use-case, but this seems overly
> complex. Surely fill-or-kill refers to getting a transaction confirmed
> within a few confirms or to drop the tx from the mempool so it wont be
> considered for inclusion anymore. As such, you could just repurpose a
> small range of nLocktime such that a TX will be accepted into mempool
> for a specific period before expiring.

What I'm describing is to implement fill-or-kill as consensus rule. 
Certainly, we could implement it at the P2P network level: everything is 
the same as I described, but the nLockTime2 and nKillTime are for 
reference only and tx validity depends only on the nLockTime. Benevolent 
miners should drop the tx after the suggested kill time but there is no 
guarantee


-------------------------------------

I made a mistake in this example:

> A user wants his tx get confirmed in the block 630000, the first block
> with reward below 10BTC. He is willing to pay high fee but don't want
> it gets into another block. He will set nLockTime2 = 210,000 and
> nKillTime = 0

The correct nLockTime2 for this example should be 210000/4 = 52500

From pete at petertodd.org  Fri Sep 18 04:19:09 2015
From: pete at petertodd.org (Peter Todd)
Date: Fri, 18 Sep 2015 04:19:09 +0000
Subject: [bitcoin-dev] Weekly development meetings on IRC
In-Reply-To: <CAPWm=eX_kK0KjTuPgLo_L-_4YGnw9Gnk3ObUbaZ19SsYMzFEnQ@mail.gmail.com>
References: <20150918010709.GB5251@amethyst.visucore.com>
	<CAPWm=eX_kK0KjTuPgLo_L-_4YGnw9Gnk3ObUbaZ19SsYMzFEnQ@mail.gmail.com>
Message-ID: <4C7E7329-819E-4C28-AFB2-A002D83485AD@petertodd.org>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512



On 17 September 2015 19:56:17 GMT-07:00, Alex Morcos via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:
>+1
>sounds good to me!

+2

My schedule is chaotic, but I'll try to attend.
-----BEGIN PGP SIGNATURE-----

iQE9BAEBCgAnIBxQZXRlciBUb2RkIDxwZXRlQHBldGVydG9kZC5vcmc+BQJV+5Cr
AAoJEMCF8hzn9Lncz4MH/Rx7HDZ0eob6PWnA9zB0He2AvhJwhWsgfGZvj8C1CCHS
Q8JmtcVmaq8fcNFLIb3r/aN/cZxKiY/9pbceHe2/l8cYDH6VUsLUear/bjDOaBL5
h76jIswFcr54ifjrwXIvHC98x9NeezcbvkFNOgxRWrgFO28saxgq78lOHp8g5mZ9
sL6/nBLqadCH59c5ieJHATyb8nR2qSZRj3fGUuuI9nQnQMkmSEV09URNr7LBgRAE
suR09jsLXrHcME7XAryw9pl6w/Fuh+Ygcpij8eLsf+uLvr/vzkBPpthr0h9jg3Np
Jtm0mpgMsNg+p2koQbhHWYa5E+dzIEXoVURFm0y+H5Y=
=/ZFP
-----END PGP SIGNATURE-----


From mark at friedenbach.org  Fri Sep 18 04:30:37 2015
From: mark at friedenbach.org (Mark Friedenbach)
Date: Fri, 18 Sep 2015 00:30:37 -0400
Subject: [bitcoin-dev] Weekly development meetings on IRC
In-Reply-To: <20150918010709.GB5251@amethyst.visucore.com>
References: <20150918010709.GB5251@amethyst.visucore.com>
Message-ID: <CAOG=w-tEhK=zqZmERpmK9PD2qAO3=cb6ciTqH8EOykpr5TC26A@mail.gmail.com>

I am unlikely to attend at that time, but there is no time that will fit
everybody's schedules. I approve of the idea and look forward to reading
the logs.

On Thu, Sep 17, 2015 at 9:07 PM, Wladimir J. van der Laan via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> Hello,
>
> At Monday's code sprint we had a good idea to schedule a regular developer
> meeting in #bitcoin-dev.
>
> Attendance is of course voluntary, but it may be good to have a time that
> many people are expected to be present and current issues can be discussed.
>
> Any preference for days/times?
>
> What about e.g. every week 15:00-16:00 UTC on Thursday?
>
> Wladimir
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150918/095b3f02/attachment.html>

From luke at dashjr.org  Fri Sep 18 04:57:14 2015
From: luke at dashjr.org (Luke Dashjr)
Date: Fri, 18 Sep 2015 04:57:14 +0000
Subject: [bitcoin-dev] Weekly development meetings on IRC
In-Reply-To: <20150918010709.GB5251@amethyst.visucore.com>
References: <20150918010709.GB5251@amethyst.visucore.com>
Message-ID: <201509180457.15635.luke@dashjr.org>

On Friday, September 18, 2015 1:07:10 AM Wladimir J. van der Laan via 
bitcoin-dev wrote:
> At Monday's code sprint we had a good idea to schedule a regular developer
> meeting in #bitcoin-dev.
> 
> Attendance is of course voluntary, but it may be good to have a time that
> many people are expected to be present and current issues can be
> discussed.

I think it's important to make a point that these meetings are for 
discussions, and explicitly never decisions, to avoid a repeat of the P2SH 
events when people have to miss it.

> Any preference for days/times?
> 
> What about e.g. every week 15:00-16:00 UTC on Thursday?

I think I would prefer a bit later, but I could probably make this work. 
Probably should try to make it more practical for California devs though, 
since there are a number of them.

Luke

From mark at friedenbach.org  Fri Sep 18 05:55:55 2015
From: mark at friedenbach.org (Mark Friedenbach)
Date: Fri, 18 Sep 2015 01:55:55 -0400
Subject: [bitcoin-dev] Scaling Bitcoin conference micro-report
In-Reply-To: <55F9E47D.50507@mattcorallo.com>
References: <CADm_WcaLKqhR=WcJ5B52Q9SAAa+AdZY6Kz5OCQVUc_RQm6e9gg@mail.gmail.com>
	<55F9E47D.50507@mattcorallo.com>
Message-ID: <CAOG=w-t2ZYQbx8+mG5FX8vzgAC_tb8A6KMABmudHQbrquEqX-Q@mail.gmail.com>

Correction of a correction, in-line:

On Wed, Sep 16, 2015 at 5:51 PM, Matt Corallo via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> > - Many interested or at least willing to accept a "short term bump", a
> > hard fork to modify block size limit regime to be cost-based via
> > "net-utxo" rather than a simple static hard limit.  2-4-8 and 17%/year
> > were debated and seemed "in range" with what might work as a short term
> > bump - net after applying the new cost metric.
>
> I would be careful to point out that hard numbers were deliberately NOT
> discussed. Though some general things were thrown out, they were not
> extensively discussed nor agreed to. I personally think 2-4 is "in
> range", though 8 maybe not so much. Of course it depends on exactly how
> the non-blocksize limit accounting/adjusting is done.
>
> Still, the "greatest common denominator" agreement did not seem to be
> agreeing to an increase which continues over time, but which instead
> limits itself to a set, smooth increase for X time and then requires a
> second hardfork if there is agreement on a need for more blocksize at
> that point.
>

Perhaps it is accurate to say that there wasn't consensus at all except
that (1) we think we can work together on resolving this impasse (yay!),
and (2) it is conceivable that changing from block size to some other
metric might provide the basis for a compromise on near-term numbers.

As an example, I do not think the net-UTXO metric provides any benefit with
respect to scalability, and in some ways makes the situation worse (even
though it helpfully solves an unrelated problem of spammy dust outputs).
But there are other possible metrics and I maintain hope that data will
show the benefit of another metric or other metrics combined with net-UTXO
in a way that will allow us to reach consensus.

As a further example, I also am quite concerned about 2-4-8MB with either
block size or net-UTXO as the base metric. As you say, it depends on how
the non-blocksize limit accounting/adjusting is done... But if a metric
were chosen that addressed my concerns (worst case propagation and
validation time), then I could be in favor of an initial bump that allowed
a larger number of typical transactions in a block.

But where I really need to disagree is on the requirement for a 2nd hard
fork. I will go on record as being definitively against this. While being
conservative with respect to exponentials, I would very much like to make
sure that there is a long-term growth curve as part of any proposal. I am
willing to accept a hard-fork if the adopted plan is too conservative, but
I do not want to be kicking the can down the road to a scheduled 2nd hard
fork that absolutely must occur. That, I feel, could be a more dangerous
outcome than an exponential that outlasts conservative historical trends.

I commend Jeff for writing a Chatham-rules summary of the outcome of some
hallway conversations that occurred. On the whole I think his summary does
represent the majority view of the opinions expressed by core developers at
the workshop. I will caution though that on nearly every issue there were
those expressed disagreement but did not fight the issue, and those who
said nothing and left unpolled opinions. Nevertheless this summary is
informative as it feeds forwards into the design of proposals that will be
made prior to the Hong Kong workshop in December, in order that they have a
higher likelihood of success.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150918/ddd28331/attachment.html>

From btcdrak at gmail.com  Fri Sep 18 06:42:42 2015
From: btcdrak at gmail.com (Btc Drak)
Date: Fri, 18 Sep 2015 07:42:42 +0100
Subject: [bitcoin-dev] Fill-or-kill transaction
In-Reply-To: <014345a983eabf243d9ce127de0dff7c@xbt.hk>
References: <a50b82c156c805a284386d80a42cc926@xbt.hk>
	<CAOG=w-vGqsAcw5vdY8SaGVe4Q6XX1J=GCsZftWgjES_N_5c2pA@mail.gmail.com>
	<CABm2gDp_afyqskEV8QmO43=-6R_2OJm36GVQxcQO_3ao2jC1gw@mail.gmail.com>
	<C9A1D16E-03F7-4860-8E9B-32A98E06CE49@petertodd.org>
	<014345a983eabf243d9ce127de0dff7c@xbt.hk>
Message-ID: <CADJgMzupLGVKfHnkAwJYUeAe-XHKtc0o7d8G3-2N1Ls5orfS=Q@mail.gmail.com>

On Fri, Sep 18, 2015 at 4:27 AM, jl2012 via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> Btc Drak ? 2015-09-17 15:12 ??:
>
>> Forgive me if I have missed the exact use-case, but this seems overly
>> complex. Surely fill-or-kill refers to getting a transaction confirmed
>> within a few confirms or to drop the tx from the mempool so it wont be
>> considered for inclusion anymore. As such, you could just repurpose a
>> small range of nLocktime such that a TX will be accepted into mempool
>> for a specific period before expiring.
>>
>
> What I'm describing is to implement fill-or-kill as consensus rule.
> Certainly, we could implement it at the P2P network level: everything is
> the same as I described, but the nLockTime2 and nKillTime are for reference
> only and tx validity depends only on the nLockTime. Benevolent miners
> should drop the tx after the suggested kill time but there is no guarantee
>

Sure, you can make the scheme I describe consensus based by adding the rule
tx is not valid to mine after expiry: this still keeps the simplicity I
described.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150918/d28eff3f/attachment-0001.html>

From dev at jonasschnelli.ch  Fri Sep 18 07:04:58 2015
From: dev at jonasschnelli.ch (Jonas Schnelli)
Date: Fri, 18 Sep 2015 09:04:58 +0200
Subject: [bitcoin-dev] Weekly development meetings on IRC
In-Reply-To: <201509180457.15635.luke@dashjr.org>
References: <20150918010709.GB5251@amethyst.visucore.com>
	<201509180457.15635.luke@dashjr.org>
Message-ID: <55FBB79A.1060504@jonasschnelli.ch>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256

> On Friday, September 18, 2015 1:07:10 AM Wladimir J. van der Laan
> via bitcoin-dev wrote:
>> At Monday's code sprint we had a good idea to schedule a regular
>> developer meeting in #bitcoin-dev.
>> 
>> Attendance is of course voluntary, but it may be good to have a
>> time that many people are expected to be present and current
>> issues can be discussed.
> 
> I think it's important to make a point that these meetings are for
>  discussions, and explicitly never decisions, to avoid a repeat of
> the P2SH events when people have to miss it.
> 
>> Any preference for days/times?
>> 
>> What about e.g. every week 15:00-16:00 UTC on Thursday?

+1 for the weekly IRC meetings.

For time and date maybe a Doodle could help:
http://doodle.com/poll/cihug53sa8u4h2in#table


- ---
jonas
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2

iQIcBAEBCAAGBQJV+7eaAAoJECnUvLZBb1PsESgQAIQnHDe7owv3OzMvxwupzGaD
IkTsRtCTSntIb75Wb/KYc0y1L3ilSENRTfZ4nNc4QquqTstkhjU5t+u9T3Mak4D3
2/5AOiJhV6OLYav1SC7uSJh0B4halnZlTwclU7NOvmnkg40DUpNxmEbf+RvUZup3
J0EQFxIuhtjIz0HfZTvw6wmstrP3+UJZTbM5fg0FO3TpgmGybAUoQ3eWgRa7v/gR
OUxnAV//Mus2O80/Z+c5KycZ1Dqc/iN7cQsQFt7kEIK0epkJhkTjoRrW9MyQW04d
1jv7d0mjEJt+2EiC8UuwpaW2eFmeFnGR0pL4UCY1QsDzGENyHKNbrVg26v1AzIbB
SNEYN1+fmsXQYosY5t0Z887Ij+u4/GLHciimh5z7fbI5VB1Ng6Wl84maVmP5Zb3L
MHtkIqQ00RX7GIXUp5+u7eKOO0pH9S08tqo5Ag6ceynJ2lh4Wr8BCNghHzH+ybNJ
NG3BaSkQmjxnWjW3XplaYyxz6E4qJ8id7qH4s0iaNKchAfXiCaBtbcMfljlyBSn/
UbzHJk5jlWZEVpxmiMRctFxusk6GI4P+0eRTJrkffskLEjImUN93A8hOLs5Dy+gI
mm/PZKT2S2qKKa6dlI2kpyPZuRbN7+WSi/FwI0YsUDGl+IoDSqTX7WqRY8cY40ji
rUgzYTw3Won3BcjHTe9y
=JsXj
-----END PGP SIGNATURE-----

From elombrozo at gmail.com  Fri Sep 18 08:20:54 2015
From: elombrozo at gmail.com (Eric Lombrozo)
Date: Fri, 18 Sep 2015 01:20:54 -0700
Subject: [bitcoin-dev] Weekly development meetings on IRC
In-Reply-To: <55FBB79A.1060504@jonasschnelli.ch>
References: <20150918010709.GB5251@amethyst.visucore.com>
	<201509180457.15635.luke@dashjr.org>
	<55FBB79A.1060504@jonasschnelli.ch>
Message-ID: <0E200A95-ECF4-4588-B0CE-003269C7850C@gmail.com>

I love the weekly meeting idea...but timezones might be an issue.

My general preference would be afternoons to late evenings pacific time, but that translates to late night/early morning for those in europe.

On September 18, 2015 12:04:58 AM PDT, Jonas Schnelli via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:
>-----BEGIN PGP SIGNED MESSAGE-----
>Hash: SHA256
>
>> On Friday, September 18, 2015 1:07:10 AM Wladimir J. van der Laan
>> via bitcoin-dev wrote:
>>> At Monday's code sprint we had a good idea to schedule a regular
>>> developer meeting in #bitcoin-dev.
>>> 
>>> Attendance is of course voluntary, but it may be good to have a
>>> time that many people are expected to be present and current
>>> issues can be discussed.
>> 
>> I think it's important to make a point that these meetings are for
>>  discussions, and explicitly never decisions, to avoid a repeat of
>> the P2SH events when people have to miss it.
>> 
>>> Any preference for days/times?
>>> 
>>> What about e.g. every week 15:00-16:00 UTC on Thursday?
>
>+1 for the weekly IRC meetings.
>
>For time and date maybe a Doodle could help:
>http://doodle.com/poll/cihug53sa8u4h2in#table
>
>
>- ---
>jonas
>-----BEGIN PGP SIGNATURE-----
>Version: GnuPG v2
>
>iQIcBAEBCAAGBQJV+7eaAAoJECnUvLZBb1PsESgQAIQnHDe7owv3OzMvxwupzGaD
>IkTsRtCTSntIb75Wb/KYc0y1L3ilSENRTfZ4nNc4QquqTstkhjU5t+u9T3Mak4D3
>2/5AOiJhV6OLYav1SC7uSJh0B4halnZlTwclU7NOvmnkg40DUpNxmEbf+RvUZup3
>J0EQFxIuhtjIz0HfZTvw6wmstrP3+UJZTbM5fg0FO3TpgmGybAUoQ3eWgRa7v/gR
>OUxnAV//Mus2O80/Z+c5KycZ1Dqc/iN7cQsQFt7kEIK0epkJhkTjoRrW9MyQW04d
>1jv7d0mjEJt+2EiC8UuwpaW2eFmeFnGR0pL4UCY1QsDzGENyHKNbrVg26v1AzIbB
>SNEYN1+fmsXQYosY5t0Z887Ij+u4/GLHciimh5z7fbI5VB1Ng6Wl84maVmP5Zb3L
>MHtkIqQ00RX7GIXUp5+u7eKOO0pH9S08tqo5Ag6ceynJ2lh4Wr8BCNghHzH+ybNJ
>NG3BaSkQmjxnWjW3XplaYyxz6E4qJ8id7qH4s0iaNKchAfXiCaBtbcMfljlyBSn/
>UbzHJk5jlWZEVpxmiMRctFxusk6GI4P+0eRTJrkffskLEjImUN93A8hOLs5Dy+gI
>mm/PZKT2S2qKKa6dlI2kpyPZuRbN7+WSi/FwI0YsUDGl+IoDSqTX7WqRY8cY40ji
>rUgzYTw3Won3BcjHTe9y
>=JsXj
>-----END PGP SIGNATURE-----
>_______________________________________________
>bitcoin-dev mailing list
>bitcoin-dev at lists.linuxfoundation.org
>https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev

-- 
Sent from my Android device with K-9 Mail. Please excuse my brevity.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150918/7eecad48/attachment.html>

From elombrozo at gmail.com  Fri Sep 18 08:42:53 2015
From: elombrozo at gmail.com (Eric Lombrozo)
Date: Fri, 18 Sep 2015 01:42:53 -0700
Subject: [bitcoin-dev] libconsensus and bitcoin development process
In-Reply-To: <20150918000718.GA5251@amethyst.visucore.com>
References: <CADm_WcY8Vy+k+5BaBS+jV6D6tmSXrok8rAxoPxxKOzUhyPWgMg@mail.gmail.com>
	<20150916222928.GC32688@muck>
	<20150918000718.GA5251@amethyst.visucore.com>
Message-ID: <3CADECE8-7A02-4247-99FD-380FFC332BC7@gmail.com>

You're aware that my entire stack was built around this model and I've even built a fully fledged desktop GUI, multisig account manager, and servers supporting pull and event subscription atop it, right?

On September 17, 2015 5:07:20 PM PDT, "Wladimir J. van der Laan via bitcoin-dev" <bitcoin-dev at lists.linuxfoundation.org> wrote:
>On Wed, Sep 16, 2015 at 06:29:28PM -0400, Peter Todd via bitcoin-dev
>wrote:
>
>> I've run into a number of cases where companies were maintaining
>forks
>> of Bitcoin Core unnecessarily, where a different, loosely coupled,
>> architecture could do what they needed to do without including the
>new
>> logic in the codebase itself.
>
>This is the same point I have been making to Jeff privately.
>
>Refactors are a means to an end: a more modular, reusable and
>maintainable codebase. This goal is that new functionality can be
>plugged in more easily, and rebase work for e.g. functionality built on
>top can go down, not up, if it just hooks into well-defined interfaces
>here and there.
>
>Although there has been a lot of progress, bitcoind's design is still
>too monolithic. To add a more involved feature, like say a new index
>over the block chain data, code needs to be touched all over the place.
>This change interacts with all other functionality, potentially
>breaking the base node functionality - risk for users that do NOT use
>the functionality. This increases risk and review time.
>
>- *If possible* functionality should be built without changing
>bitcoind's code at all. An external process should be able to keep up
>to date with the chain, notice reorgs, and process block data
>accordingly. If bitcoind's interface does not allow that, or it is too
>difficult, that is what should be fixed. 
>- *if not possible* then a change should at least touch the code in as
>few places as possible, and integrate with e.g. signal notification.
>
>To name an example of it done right, IMO: Monero's 'simplewallet'. It
>is a command-line utility wallet that communicates with the node
>software, and remembers where it was in the chain, and processes
>changes to the chain state since its last invocation when it
>'refreshes'. 
>What is nice is that one can run an arbitary number of simplewallets
>against one node daemon, and unlike bitcoind's wallet it doesn't need
>to run as always-on daemon itself. It can be invoked when the user
>wants to do something with the wallet, or see if there are new
>transactions.
>
>An index could be implemented entirely externally in a similar way,
>while still fully handling reorgs.
>
>What one needs for that, I think, is a library that communicate with
>the node, and which offers functionality abstractly be similar to 'git
>pull': give me the tree path from my current known tip to the best tip,
>and supply the block hashes (and block data) along the way. 
>
>My long-term vision of bitcoind is a P2P node with validation and
>blockchain store, with a couple of data sources that can be subscribed
>to or pulled from.
>
>Wladimir
>_______________________________________________
>bitcoin-dev mailing list
>bitcoin-dev at lists.linuxfoundation.org
>https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev

-- 
Sent from my Android device with K-9 Mail. Please excuse my brevity.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150918/138066de/attachment.html>

From jl2012 at xbt.hk  Fri Sep 18 09:12:27 2015
From: jl2012 at xbt.hk (jl2012 at xbt.hk)
Date: Fri, 18 Sep 2015 05:12:27 -0400
Subject: [bitcoin-dev] Fill-or-kill transaction
In-Reply-To: <CADJgMzupLGVKfHnkAwJYUeAe-XHKtc0o7d8G3-2N1Ls5orfS=Q@mail.gmail.com>
References: <a50b82c156c805a284386d80a42cc926@xbt.hk>
	<CAOG=w-vGqsAcw5vdY8SaGVe4Q6XX1J=GCsZftWgjES_N_5c2pA@mail.gmail.com>
	<CABm2gDp_afyqskEV8QmO43=-6R_2OJm36GVQxcQO_3ao2jC1gw@mail.gmail.com>
	<C9A1D16E-03F7-4860-8E9B-32A98E06CE49@petertodd.org>
	<014345a983eabf243d9ce127de0dff7c@xbt.hk>
	<CADJgMzupLGVKfHnkAwJYUeAe-XHKtc0o7d8G3-2N1Ls5orfS=Q@mail.gmail.com>
Message-ID: <bc31c9283aa0ae5a1bcb6dedaff8b23d@xbt.hk>

Btc Drak ? 2015-09-18 02:42 ??:
> On Fri, Sep 18, 2015 at 4:27 AM, jl2012 via bitcoin-dev
> <bitcoin-dev at lists.linuxfoundation.org> wrote:
> 
>> Btc Drak ? 2015-09-17 15:12 ??:
>> 
>>> Forgive me if I have missed the exact use-case, but this seems
>>> overly
>>> complex. Surely fill-or-kill refers to getting a transaction
>>> confirmed
>>> within a few confirms or to drop the tx from the mempool so it
>>> wont be
>>> considered for inclusion anymore. As such, you could just
>>> repurpose a
>>> small range of nLocktime such that a TX will be accepted into
>>> mempool
>>> for a specific period before expiring.
>> 
>> What I'm describing is to implement fill-or-kill as consensus rule.
>> Certainly, we could implement it at the P2P network level:
>> everything is the same as I described, but the nLockTime2 and
>> nKillTime are for reference only and tx validity depends only on the
>> nLockTime. Benevolent miners should drop the tx after the suggested
>> kill time but there is no guarantee
> 
> Sure, you can make the scheme I describe consensus based by adding the
> rule tx is not valid to mine after expiry: this still keeps the
> simplicity I described.

If you simply redefine a range of unused nLockTime as nKillTime, users 
will be constrained to use either nLockTime or nKillTime, but not both 
in the same tx.

If we are willing to scarify a large range of tx nVersion, say 
10-15bits, the nKillTime data could be embedded there.

Another option is nSequence, which will allow per-input nKillTime and 
nLockTime.

The cleanest way, of course, is a hardfork to add a new nKillTime field 
to the tx so people could use nLockTime and nKillTime in parallel.



From jtimon at jtimon.cc  Fri Sep 18 13:08:30 2015
From: jtimon at jtimon.cc (=?UTF-8?B?Sm9yZ2UgVGltw7Nu?=)
Date: Fri, 18 Sep 2015 15:08:30 +0200
Subject: [bitcoin-dev] Fill-or-kill transaction
In-Reply-To: <C9A1D16E-03F7-4860-8E9B-32A98E06CE49@petertodd.org>
References: <a50b82c156c805a284386d80a42cc926@xbt.hk>
	<CAOG=w-vGqsAcw5vdY8SaGVe4Q6XX1J=GCsZftWgjES_N_5c2pA@mail.gmail.com>
	<CABm2gDp_afyqskEV8QmO43=-6R_2OJm36GVQxcQO_3ao2jC1gw@mail.gmail.com>
	<C9A1D16E-03F7-4860-8E9B-32A98E06CE49@petertodd.org>
Message-ID: <CABm2gDroAU7ovq_qEOw6sCTYM+a7cYHAAkjM5uL6ajPH9aDmHQ@mail.gmail.com>

On Sep 17, 2015 6:48 PM, "Peter Todd" <pete at petertodd.org> wrote:
>
> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA512
>
>
>
> On 17 September 2015 12:14:38 GMT-07:00, "Jorge Tim?n via bitcoin-dev" <
bitcoin-dev at lists.linuxfoundation.org> wrote:
> >Fill or kill us normally used for trades and I think it can be
> >confusing.
> >Previous times this has been discussed it has been discussed under
> >nExpiryTime or op_height (which enables expiration), for example, in
> >the
> >freimarkets white paper.
> >
> >As Mark points out this can be made safe by requiring that all the
> >outputs
> >of a transaction that can expire have op_maturity/csv/rcltv of 100.
> >That
> >makes them as reorg-safe as coinbase transactions. Unfortunately this
> >doesn't play very well with p2sh...
>
> Why wouldn't that work with p2sh? It can be implemented by a "treat like
Coinbase" flag in the UTXO set, set when the output is created.

I said require all scrptPubkeys to have op_maturity/rcltv/csv 100+, but
yeah, that would work.

Regarding nKillTime, please call it nExpiryTime. And instead of fill or
kill transactions, ttansactions that expire. It is not only more accurate
(ie fill or kill is for market orders that complete in their full amount
now or are cancelled, not for transfers) and it is the term we have been
using for years.

Reinventing the wheel by changing its name it's something we do often (for
example, rcltv was op_maturity in February 2014 and was "reinvented" as
rcltv recently. This makes it harder for people to learn and follow up.
Please don't insist in fok, that's for market orders and works differently
than expiries. Expiry is the old name and it's also much more accurate.

>
> iQE9BAEBCgAnIBxQZXRlciBUb2RkIDxwZXRlQHBldGVydG9kZC5vcmc+BQJV+0Ip
> AAoJEMCF8hzn9Lncz4MIAIQpz7tKbmjEuETX6BnPatJ50I+kS6CQ4eE+e1irXpbb
> OCMe0A2TGzw9G5t7DgMU1lCcbcbuqOxMOrHYXuGsGkpVtRrLFbkS/F9vCS2RJT0w
> kRkL2ecN8riAjh1lUUgY1CEgVyhkwh6Rw1ZALu3Ba2tISysMfXjAW1GiLHlgxP7g
> xD6zS0OTTokG/7+s1hGK2Nd4q/ZHnfOO1JgiBzrykGNq4enp7nRhiZKhnc/0ILJA
> 3WAsAMI14ZUxs95onjey7J3100tZBetYr14jzLRvf+w1klBNSvcen9dr+VhdyXYk
> MPMOwuUtq4OI1vt3HDoMjNFT6olg0gTxzWe8Grn96S4=
> =pP3Q
> -----END PGP SIGNATURE-----
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150918/b761932c/attachment-0001.html>

From hearn at vinumeris.com  Fri Sep 18 16:22:09 2015
From: hearn at vinumeris.com (Mike Hearn)
Date: Fri, 18 Sep 2015 17:22:09 +0100
Subject: [bitcoin-dev] libconsensus and bitcoin development process
In-Reply-To: <20150918000718.GA5251@amethyst.visucore.com>
References: <CADm_WcY8Vy+k+5BaBS+jV6D6tmSXrok8rAxoPxxKOzUhyPWgMg@mail.gmail.com>
	<20150916222928.GC32688@muck>
	<20150918000718.GA5251@amethyst.visucore.com>
Message-ID: <CA+w+GKTD02XvaFaZaJmdmOgyER8SeQyqNrpnXyj8fJDMHUDPOA@mail.gmail.com>

>
> What one needs for that, I think, is a library that communicate with the
> node, and which offers functionality abstractly be similar to 'git pull':
> give me the tree path from my current known tip to the best tip, and supply
> the block hashes (and block data) along the way.
>

This is exactly what SPV libraries like bitcoinj do: they know how to build
a block locator, request the blocks forward from the common branch point,
and handle re-orgs onto whatever the current best chain are by downloading
data from a full node.

If your official position is people should all use bitcoinj to do things
like build extra indexes, then great. Send them our way. It already knows
how to calculate a UTXO set indexed by address.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150918/af7e248f/attachment.html>

From dscotese at litmocracy.com  Fri Sep 18 17:10:08 2015
From: dscotese at litmocracy.com (Dave Scotese)
Date: Fri, 18 Sep 2015 10:10:08 -0700
Subject: [bitcoin-dev] Scaling Bitcoin conference micro-report
In-Reply-To: <CAOG=w-t2ZYQbx8+mG5FX8vzgAC_tb8A6KMABmudHQbrquEqX-Q@mail.gmail.com>
References: <CADm_WcaLKqhR=WcJ5B52Q9SAAa+AdZY6Kz5OCQVUc_RQm6e9gg@mail.gmail.com>
	<55F9E47D.50507@mattcorallo.com>
	<CAOG=w-t2ZYQbx8+mG5FX8vzgAC_tb8A6KMABmudHQbrquEqX-Q@mail.gmail.com>
Message-ID: <CAGLBAheJyK60m2Y9wP=VvGQOsbqjBDMOEn00fKrKad+MmE4M1A@mail.gmail.com>

"But if a metric were chosen that addressed my concerns (worst case
propagation and validation time), then I could be in favor of an initial
bump that allowed a larger number of typical transactions in a block."

+1.  A ratio is much more valuable than a simple metric.  It seems clearly
difficult to identify a reasonable limit to block size, but the ratio
between any one of several possible metrics and bytes in a block would work
well and may already have a very good reasonable expected range.

I like BTCDaysDestroyed (BTCDD) best.  If it might be time consuming to
compute, then it need only be computed for all blocks less than or equal in
size to the average size of the largest 200 or so blocks in the previous
difficulty period.  To exceed that limit, a miner would have to ensure that
the block has enough BTCDD per byte.  "Enough" could be hardcoded in each
release, or if it's simple enough, use the ratio as computed over all the
blocks in the previous difficulty period as the lower limit.

notplato

On Thu, Sep 17, 2015 at 10:55 PM, Mark Friedenbach via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> Correction of a correction, in-line:
>
> On Wed, Sep 16, 2015 at 5:51 PM, Matt Corallo via bitcoin-dev <
> bitcoin-dev at lists.linuxfoundation.org> wrote:
>
>> > - Many interested or at least willing to accept a "short term bump", a
>> > hard fork to modify block size limit regime to be cost-based via
>> > "net-utxo" rather than a simple static hard limit.  2-4-8 and 17%/year
>> > were debated and seemed "in range" with what might work as a short term
>> > bump - net after applying the new cost metric.
>>
>> I would be careful to point out that hard numbers were deliberately NOT
>> discussed. Though some general things were thrown out, they were not
>> extensively discussed nor agreed to. I personally think 2-4 is "in
>> range", though 8 maybe not so much. Of course it depends on exactly how
>> the non-blocksize limit accounting/adjusting is done.
>>
>> Still, the "greatest common denominator" agreement did not seem to be
>> agreeing to an increase which continues over time, but which instead
>> limits itself to a set, smooth increase for X time and then requires a
>> second hardfork if there is agreement on a need for more blocksize at
>> that point.
>>
>
> Perhaps it is accurate to say that there wasn't consensus at all except
> that (1) we think we can work together on resolving this impasse (yay!),
> and (2) it is conceivable that changing from block size to some other
> metric might provide the basis for a compromise on near-term numbers.
>
> As an example, I do not think the net-UTXO metric provides any benefit
> with respect to scalability, and in some ways makes the situation worse
> (even though it helpfully solves an unrelated problem of spammy dust
> outputs). But there are other possible metrics and I maintain hope that
> data will show the benefit of another metric or other metrics combined with
> net-UTXO in a way that will allow us to reach consensus.
>
> As a further example, I also am quite concerned about 2-4-8MB with either
> block size or net-UTXO as the base metric. As you say, it depends on how
> the non-blocksize limit accounting/adjusting is done... But if a metric
> were chosen that addressed my concerns (worst case propagation and
> validation time), then I could be in favor of an initial bump that allowed
> a larger number of typical transactions in a block.
>
> But where I really need to disagree is on the requirement for a 2nd hard
> fork. I will go on record as being definitively against this. While being
> conservative with respect to exponentials, I would very much like to make
> sure that there is a long-term growth curve as part of any proposal. I am
> willing to accept a hard-fork if the adopted plan is too conservative, but
> I do not want to be kicking the can down the road to a scheduled 2nd hard
> fork that absolutely must occur. That, I feel, could be a more dangerous
> outcome than an exponential that outlasts conservative historical trends.
>
> I commend Jeff for writing a Chatham-rules summary of the outcome of some
> hallway conversations that occurred. On the whole I think his summary does
> represent the majority view of the opinions expressed by core developers at
> the workshop. I will caution though that on nearly every issue there were
> those expressed disagreement but did not fight the issue, and those who
> said nothing and left unpolled opinions. Nevertheless this summary is
> informative as it feeds forwards into the design of proposals that will be
> made prior to the Hong Kong workshop in December, in order that they have a
> higher likelihood of success.
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
>


-- 
I like to provide some work at no charge to prove my value. Do you need a
techie?
I own Litmocracy <http://www.litmocracy.com> and Meme Racing
<http://www.memeracing.net> (in alpha).
I'm the webmaster for The Voluntaryist <http://www.voluntaryist.com> which
now accepts Bitcoin.
I also code for The Dollar Vigilante <http://dollarvigilante.com/>.
"He ought to find it more profitable to play by the rules" - Satoshi
Nakamoto
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150918/5700f8e2/attachment.html>

From elombrozo at gmail.com  Fri Sep 18 17:28:08 2015
From: elombrozo at gmail.com (Eric Lombrozo)
Date: Fri, 18 Sep 2015 10:28:08 -0700
Subject: [bitcoin-dev] Scaling Bitcoin conference micro-report
In-Reply-To: <CAGLBAheJyK60m2Y9wP=VvGQOsbqjBDMOEn00fKrKad+MmE4M1A@mail.gmail.com>
References: <CADm_WcaLKqhR=WcJ5B52Q9SAAa+AdZY6Kz5OCQVUc_RQm6e9gg@mail.gmail.com>
	<55F9E47D.50507@mattcorallo.com>
	<CAOG=w-t2ZYQbx8+mG5FX8vzgAC_tb8A6KMABmudHQbrquEqX-Q@mail.gmail.com>
	<CAGLBAheJyK60m2Y9wP=VvGQOsbqjBDMOEn00fKrKad+MmE4M1A@mail.gmail.com>
Message-ID: <E0F25109-EBEE-479E-80B2-A535BCB27C30@gmail.com>

To be quite frank, I'm a little disappointed we've fallen back on arguing over numbers pulled out of a hat rather than discussing far more fundamental issues such as the dev process generally, consensus building, and our basic understanding of what Bitcoin really is, its strengths and weaknesses, where it shows most promise, and communicating a more unified vision to the industry and the public.

On September 18, 2015 10:10:08 AM PDT, Dave Scotese via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:
>"But if a metric were chosen that addressed my concerns (worst case
>propagation and validation time), then I could be in favor of an
>initial
>bump that allowed a larger number of typical transactions in a block."
>
>+1.  A ratio is much more valuable than a simple metric.  It seems
>clearly
>difficult to identify a reasonable limit to block size, but the ratio
>between any one of several possible metrics and bytes in a block would
>work
>well and may already have a very good reasonable expected range.
>
>I like BTCDaysDestroyed (BTCDD) best.  If it might be time consuming to
>compute, then it need only be computed for all blocks less than or
>equal in
>size to the average size of the largest 200 or so blocks in the
>previous
>difficulty period.  To exceed that limit, a miner would have to ensure
>that
>the block has enough BTCDD per byte.  "Enough" could be hardcoded in
>each
>release, or if it's simple enough, use the ratio as computed over all
>the
>blocks in the previous difficulty period as the lower limit.
>
>notplato
>
>On Thu, Sep 17, 2015 at 10:55 PM, Mark Friedenbach via bitcoin-dev <
>bitcoin-dev at lists.linuxfoundation.org> wrote:
>
>> Correction of a correction, in-line:
>>
>> On Wed, Sep 16, 2015 at 5:51 PM, Matt Corallo via bitcoin-dev <
>> bitcoin-dev at lists.linuxfoundation.org> wrote:
>>
>>> > - Many interested or at least willing to accept a "short term
>bump", a
>>> > hard fork to modify block size limit regime to be cost-based via
>>> > "net-utxo" rather than a simple static hard limit.  2-4-8 and
>17%/year
>>> > were debated and seemed "in range" with what might work as a short
>term
>>> > bump - net after applying the new cost metric.
>>>
>>> I would be careful to point out that hard numbers were deliberately
>NOT
>>> discussed. Though some general things were thrown out, they were not
>>> extensively discussed nor agreed to. I personally think 2-4 is "in
>>> range", though 8 maybe not so much. Of course it depends on exactly
>how
>>> the non-blocksize limit accounting/adjusting is done.
>>>
>>> Still, the "greatest common denominator" agreement did not seem to
>be
>>> agreeing to an increase which continues over time, but which instead
>>> limits itself to a set, smooth increase for X time and then requires
>a
>>> second hardfork if there is agreement on a need for more blocksize
>at
>>> that point.
>>>
>>
>> Perhaps it is accurate to say that there wasn't consensus at all
>except
>> that (1) we think we can work together on resolving this impasse
>(yay!),
>> and (2) it is conceivable that changing from block size to some other
>> metric might provide the basis for a compromise on near-term numbers.
>>
>> As an example, I do not think the net-UTXO metric provides any
>benefit
>> with respect to scalability, and in some ways makes the situation
>worse
>> (even though it helpfully solves an unrelated problem of spammy dust
>> outputs). But there are other possible metrics and I maintain hope
>that
>> data will show the benefit of another metric or other metrics
>combined with
>> net-UTXO in a way that will allow us to reach consensus.
>>
>> As a further example, I also am quite concerned about 2-4-8MB with
>either
>> block size or net-UTXO as the base metric. As you say, it depends on
>how
>> the non-blocksize limit accounting/adjusting is done... But if a
>metric
>> were chosen that addressed my concerns (worst case propagation and
>> validation time), then I could be in favor of an initial bump that
>allowed
>> a larger number of typical transactions in a block.
>>
>> But where I really need to disagree is on the requirement for a 2nd
>hard
>> fork. I will go on record as being definitively against this. While
>being
>> conservative with respect to exponentials, I would very much like to
>make
>> sure that there is a long-term growth curve as part of any proposal.
>I am
>> willing to accept a hard-fork if the adopted plan is too
>conservative, but
>> I do not want to be kicking the can down the road to a scheduled 2nd
>hard
>> fork that absolutely must occur. That, I feel, could be a more
>dangerous
>> outcome than an exponential that outlasts conservative historical
>trends.
>>
>> I commend Jeff for writing a Chatham-rules summary of the outcome of
>some
>> hallway conversations that occurred. On the whole I think his summary
>does
>> represent the majority view of the opinions expressed by core
>developers at
>> the workshop. I will caution though that on nearly every issue there
>were
>> those expressed disagreement but did not fight the issue, and those
>who
>> said nothing and left unpolled opinions. Nevertheless this summary is
>> informative as it feeds forwards into the design of proposals that
>will be
>> made prior to the Hong Kong workshop in December, in order that they
>have a
>> higher likelihood of success.
>>
>> _______________________________________________
>> bitcoin-dev mailing list
>> bitcoin-dev at lists.linuxfoundation.org
>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>
>>
>
>
>-- 
>I like to provide some work at no charge to prove my value. Do you need
>a
>techie?
>I own Litmocracy <http://www.litmocracy.com> and Meme Racing
><http://www.memeracing.net> (in alpha).
>I'm the webmaster for The Voluntaryist <http://www.voluntaryist.com>
>which
>now accepts Bitcoin.
>I also code for The Dollar Vigilante <http://dollarvigilante.com/>.
>"He ought to find it more profitable to play by the rules" - Satoshi
>Nakamoto
>
>
>------------------------------------------------------------------------
>
>_______________________________________________
>bitcoin-dev mailing list
>bitcoin-dev at lists.linuxfoundation.org
>https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev

-- 
Sent from my Android device with K-9 Mail. Please excuse my brevity.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150918/e1bb9ba2/attachment-0001.html>

From runesvend at gmail.com  Fri Sep 18 19:05:37 2015
From: runesvend at gmail.com (=?utf-8?Q?Rune_Kj=C3=A6r_Svendsen?=)
Date: Fri, 18 Sep 2015 21:05:37 +0200
Subject: [bitcoin-dev] Hash of UTXO set as consensus-critical
Message-ID: <5D55F6EC-801B-4607-882F-B76CF57298B1@gmail.com>

Currently, when a new node wants to join the network, it needs to retrieve the entire blockchain history, starting from January 2009 and up until now, in order to derive a UTXO set that it can verify new blocks/transactions against. With a blockchain size of 40GB and a UTXO size of around 1GB, the extra bandwidth required is significant, and will keep increasing indefinitely. If a newly mined block were to include the UTXO set hash of the chain up until the previous block ? the hash of the UTXO set on top of which this block builds ? then new nodes, who want to know whether a transaction is valid, would be able to acquire the UTXO set in a trustless manner, by only verifying proof-of-work headers, and knowing that a block with an invalid UTXO set hash would be rejected.

I?m not talking about calculating a complicated tree structure from the UTXO set, which would put further burden on already burdened Bitcoin Core nodes. We simply include the hash of the current UTXO set in a newly created block, such that the transactions in the new block build *on top* of the UTXO set whose hash is specified. This actually alleviates Bitcoin Core nodes, as it will now become possible for nodes without the entire blockchain to answer SPV queries (by retrieving the UTXO set trustlessly and using this to answer queries). It also saves bandwidth for Bitcore Core nodes, who only need to send roughly 1GB of data, in order to synchronise a node, rather than 40GB+. I will continue to run a full Bitcoin Core node, saving the entire blockchain history, but it shouldn?t be a requirement to hold the entire transaction history in order to start verifying new transactions.

As far as I can see, this also forces miners to actually maintain an UTXO set, rather than just build on top of the chain with the most proof-of-work. Producing a UTXO set and verifying a block against a chain is the same thing, so by including the hash of the UTXO set we force miners to verify the block that they want to build on top of.

Am I missing something obvious, because as far as I can see, this solves the problem of quadratic time complexity for initial sync: http://www.youtube.com/watch?v=TgjrS-BPWDQ&t=2h02m12s

The only added step to verifying a block is to hash the UTXO set. So it does require additional computation, but most modern CPUs have a SHA256 throughput of around 500 MB/s, which means it takes only two seconds to hash the UTXO set. And this can be improved further (GPUs can do 2-3 GB/s). A small sacrifice for the added ease of initial syncing, in my opinion.

/Rune

From patrick.strateman at gmail.com  Fri Sep 18 19:43:13 2015
From: patrick.strateman at gmail.com (Patrick Strateman)
Date: Fri, 18 Sep 2015 12:43:13 -0700
Subject: [bitcoin-dev] Hash of UTXO set as consensus-critical
In-Reply-To: <5D55F6EC-801B-4607-882F-B76CF57298B1@gmail.com>
References: <5D55F6EC-801B-4607-882F-B76CF57298B1@gmail.com>
Message-ID: <55FC6951.9010704@gmail.com>

Full nodes using UTXO set commitments is a change to the bitcoin
security model.

Currently an attacker with >50% of the network hashrate can rewrite history.

If full nodes rely on UTXO set commitments such an attacker could create
an infinite number of bitcoins (as in many times more than the current
21 million bitcoin limit).

Before we consider mechanisms for UTXO set commitments, we should
seriously discuss whether the security model reduction is reasonable.

On 09/18/2015 12:05 PM, Rune Kj?r Svendsen via bitcoin-dev wrote:
> Currently, when a new node wants to join the network, it needs to retrieve the entire blockchain history, starting from January 2009 and up until now, in order to derive a UTXO set that it can verify new blocks/transactions against. With a blockchain size of 40GB and a UTXO size of around 1GB, the extra bandwidth required is significant, and will keep increasing indefinitely. If a newly mined block were to include the UTXO set hash of the chain up until the previous block ? the hash of the UTXO set on top of which this block builds ? then new nodes, who want to know whether a transaction is valid, would be able to acquire the UTXO set in a trustless manner, by only verifying proof-of-work headers, and knowing that a block with an invalid UTXO set hash would be rejected.
>
> I?m not talking about calculating a complicated tree structure from the UTXO set, which would put further burden on already burdened Bitcoin Core nodes. We simply include the hash of the current UTXO set in a newly created block, such that the transactions in the new block build *on top* of the UTXO set whose hash is specified. This actually alleviates Bitcoin Core nodes, as it will now become possible for nodes without the entire blockchain to answer SPV queries (by retrieving the UTXO set trustlessly and using this to answer queries). It also saves bandwidth for Bitcore Core nodes, who only need to send roughly 1GB of data, in order to synchronise a node, rather than 40GB+. I will continue to run a full Bitcoin Core node, saving the entire blockchain history, but it shouldn?t be a requirement to hold the entire transaction history in order to start verifying new transactions.
>
> As far as I can see, this also forces miners to actually maintain an UTXO set, rather than just build on top of the chain with the most proof-of-work. Producing a UTXO set and verifying a block against a chain is the same thing, so by including the hash of the UTXO set we force miners to verify the block that they want to build on top of.
>
> Am I missing something obvious, because as far as I can see, this solves the problem of quadratic time complexity for initial sync: http://www.youtube.com/watch?v=TgjrS-BPWDQ&t=2h02m12s
>
> The only added step to verifying a block is to hash the UTXO set. So it does require additional computation, but most modern CPUs have a SHA256 throughput of around 500 MB/s, which means it takes only two seconds to hash the UTXO set. And this can be improved further (GPUs can do 2-3 GB/s). A small sacrifice for the added ease of initial syncing, in my opinion.
>
> /Rune
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev



From lf-lists at mattcorallo.com  Fri Sep 18 20:06:23 2015
From: lf-lists at mattcorallo.com (Matt Corallo)
Date: Fri, 18 Sep 2015 20:06:23 +0000
Subject: [bitcoin-dev] Scaling Bitcoin conference micro-report
In-Reply-To: <CAOG=w-t2ZYQbx8+mG5FX8vzgAC_tb8A6KMABmudHQbrquEqX-Q@mail.gmail.com>
References: <CADm_WcaLKqhR=WcJ5B52Q9SAAa+AdZY6Kz5OCQVUc_RQm6e9gg@mail.gmail.com>
	<55F9E47D.50507@mattcorallo.com>
	<CAOG=w-t2ZYQbx8+mG5FX8vzgAC_tb8A6KMABmudHQbrquEqX-Q@mail.gmail.com>
Message-ID: <55FC6EBF.9090504@mattcorallo.com>

I did not intend to imply that there was agreement on a desire to
schedule a second hardfork. My wording may have been a bit too loose.
Instead, I believe there was much agreement that doing a short-term
hardfork now, with many agreeing that a second would hopefully be
entirely unnecessary/impossible, while others thought that a second
would be necessary and would have to happen. While this may set up a
similar controversy again in several years, I think everyone agreed that
we cannot predict the future and I, personally, think none of us should
be committing to a viewpoint for what should be done at that time.

Personally, I think it is also critical that there be no messaging that
people should rely on or assume there will be a future increase after a
short-term bump (which I also do not believe people should be relying on
now).

Matt

On 09/18/15 05:55, Mark Friedenbach wrote:
> Correction of a correction, in-line:
> 
> On Wed, Sep 16, 2015 at 5:51 PM, Matt Corallo via bitcoin-dev
> <bitcoin-dev at lists.linuxfoundation.org
> <mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:
> 
>     > - Many interested or at least willing to accept a "short term bump", a
>     > hard fork to modify block size limit regime to be cost-based via
>     > "net-utxo" rather than a simple static hard limit.  2-4-8 and 17%/year
>     > were debated and seemed "in range" with what might work as a short term
>     > bump - net after applying the new cost metric.
> 
>     I would be careful to point out that hard numbers were deliberately NOT
>     discussed. Though some general things were thrown out, they were not
>     extensively discussed nor agreed to. I personally think 2-4 is "in
>     range", though 8 maybe not so much. Of course it depends on exactly how
>     the non-blocksize limit accounting/adjusting is done.
> 
>     Still, the "greatest common denominator" agreement did not seem to be
>     agreeing to an increase which continues over time, but which instead
>     limits itself to a set, smooth increase for X time and then requires a
>     second hardfork if there is agreement on a need for more blocksize at
>     that point.
> 
> 
> Perhaps it is accurate to say that there wasn't consensus at all except
> that (1) we think we can work together on resolving this impasse (yay!),
> and (2) it is conceivable that changing from block size to some other
> metric might provide the basis for a compromise on near-term numbers.
> 
> As an example, I do not think the net-UTXO metric provides any benefit
> with respect to scalability, and in some ways makes the situation worse
> (even though it helpfully solves an unrelated problem of spammy dust
> outputs). But there are other possible metrics and I maintain hope that
> data will show the benefit of another metric or other metrics combined
> with net-UTXO in a way that will allow us to reach consensus.
> 
> As a further example, I also am quite concerned about 2-4-8MB with
> either block size or net-UTXO as the base metric. As you say, it depends
> on how the non-blocksize limit accounting/adjusting is done... But if a
> metric were chosen that addressed my concerns (worst case propagation
> and validation time), then I could be in favor of an initial bump that
> allowed a larger number of typical transactions in a block.
> 
> But where I really need to disagree is on the requirement for a 2nd hard
> fork. I will go on record as being definitively against this. While
> being conservative with respect to exponentials, I would very much like
> to make sure that there is a long-term growth curve as part of any
> proposal. I am willing to accept a hard-fork if the adopted plan is too
> conservative, but I do not want to be kicking the can down the road to a
> scheduled 2nd hard fork that absolutely must occur. That, I feel, could
> be a more dangerous outcome than an exponential that outlasts
> conservative historical trends.
> 
> I commend Jeff for writing a Chatham-rules summary of the outcome of
> some hallway conversations that occurred. On the whole I think his
> summary does represent the majority view of the opinions expressed by
> core developers at the workshop. I will caution though that on nearly
> every issue there were those expressed disagreement but did not fight
> the issue, and those who said nothing and left unpolled opinions.
> Nevertheless this summary is informative as it feeds forwards into the
> design of proposals that will be made prior to the Hong Kong workshop in
> December, in order that they have a higher likelihood of success.

From morcos at gmail.com  Fri Sep 18 20:07:25 2015
From: morcos at gmail.com (Alex Morcos)
Date: Fri, 18 Sep 2015 16:07:25 -0400
Subject: [bitcoin-dev] Hash of UTXO set as consensus-critical
In-Reply-To: <55FC6951.9010704@gmail.com>
References: <5D55F6EC-801B-4607-882F-B76CF57298B1@gmail.com>
	<55FC6951.9010704@gmail.com>
Message-ID: <CAPWm=eWrnA9em725uR-56+r7uc752+C-6Ke-UcRXj__DBbwqYw@mail.gmail.com>

I guess I always assumed that UTXO set commitments were an alternative
security model (between SPV and full-node), not that they would cause the
existing security model to be deprecated.


On Fri, Sep 18, 2015 at 3:43 PM, Patrick Strateman via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> Full nodes using UTXO set commitments is a change to the bitcoin
> security model.
>
> Currently an attacker with >50% of the network hashrate can rewrite
> history.
>
> If full nodes rely on UTXO set commitments such an attacker could create
> an infinite number of bitcoins (as in many times more than the current
> 21 million bitcoin limit).
>
> Before we consider mechanisms for UTXO set commitments, we should
> seriously discuss whether the security model reduction is reasonable.
>
> On 09/18/2015 12:05 PM, Rune Kj?r Svendsen via bitcoin-dev wrote:
> > Currently, when a new node wants to join the network, it needs to
> retrieve the entire blockchain history, starting from January 2009 and up
> until now, in order to derive a UTXO set that it can verify new
> blocks/transactions against. With a blockchain size of 40GB and a UTXO size
> of around 1GB, the extra bandwidth required is significant, and will keep
> increasing indefinitely. If a newly mined block were to include the UTXO
> set hash of the chain up until the previous block ? the hash of the UTXO
> set on top of which this block builds ? then new nodes, who want to know
> whether a transaction is valid, would be able to acquire the UTXO set in a
> trustless manner, by only verifying proof-of-work headers, and knowing that
> a block with an invalid UTXO set hash would be rejected.
> >
> > I?m not talking about calculating a complicated tree structure from the
> UTXO set, which would put further burden on already burdened Bitcoin Core
> nodes. We simply include the hash of the current UTXO set in a newly
> created block, such that the transactions in the new block build *on top*
> of the UTXO set whose hash is specified. This actually alleviates Bitcoin
> Core nodes, as it will now become possible for nodes without the entire
> blockchain to answer SPV queries (by retrieving the UTXO set trustlessly
> and using this to answer queries). It also saves bandwidth for Bitcore Core
> nodes, who only need to send roughly 1GB of data, in order to synchronise a
> node, rather than 40GB+. I will continue to run a full Bitcoin Core node,
> saving the entire blockchain history, but it shouldn?t be a requirement to
> hold the entire transaction history in order to start verifying new
> transactions.
> >
> > As far as I can see, this also forces miners to actually maintain an
> UTXO set, rather than just build on top of the chain with the most
> proof-of-work. Producing a UTXO set and verifying a block against a chain
> is the same thing, so by including the hash of the UTXO set we force miners
> to verify the block that they want to build on top of.
> >
> > Am I missing something obvious, because as far as I can see, this solves
> the problem of quadratic time complexity for initial sync:
> http://www.youtube.com/watch?v=TgjrS-BPWDQ&t=2h02m12s
> >
> > The only added step to verifying a block is to hash the UTXO set. So it
> does require additional computation, but most modern CPUs have a SHA256
> throughput of around 500 MB/s, which means it takes only two seconds to
> hash the UTXO set. And this can be improved further (GPUs can do 2-3 GB/s).
> A small sacrifice for the added ease of initial syncing, in my opinion.
> >
> > /Rune
> > _______________________________________________
> > bitcoin-dev mailing list
> > bitcoin-dev at lists.linuxfoundation.org
> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150918/b0e1a5b4/attachment-0001.html>

From lf-lists at mattcorallo.com  Fri Sep 18 20:11:33 2015
From: lf-lists at mattcorallo.com (Matt Corallo)
Date: Fri, 18 Sep 2015 20:11:33 +0000
Subject: [bitcoin-dev] Hash of UTXO set as consensus-critical
In-Reply-To: <CAPWm=eWrnA9em725uR-56+r7uc752+C-6Ke-UcRXj__DBbwqYw@mail.gmail.com>
References: <5D55F6EC-801B-4607-882F-B76CF57298B1@gmail.com>
	<55FC6951.9010704@gmail.com>
	<CAPWm=eWrnA9em725uR-56+r7uc752+C-6Ke-UcRXj__DBbwqYw@mail.gmail.com>
Message-ID: <55FC6FF5.7090400@mattcorallo.com>

I believe the discussion here is on improving initial-sync time by
simply skipping initial-sync and getting a committed-to utxo set. This
is obviously a new security model in between SPV and full-node (I would
call it SPV with future validation). Still, I'm not convinced it buys us
anything, we really should just tweak Bitcoin Core to do spv mode at
startup and validate backwards in the background. I think this would
alleviate most of the concerns raised, given the chain growth is not
entirely unreasonable going forward.

On 09/18/15 20:07, Alex Morcos via bitcoin-dev wrote:
> I guess I always assumed that UTXO set commitments were an alternative
> security model (between SPV and full-node), not that they would cause
> the existing security model to be deprecated.
> 
> 
> On Fri, Sep 18, 2015 at 3:43 PM, Patrick Strateman via bitcoin-dev
> <bitcoin-dev at lists.linuxfoundation.org
> <mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:
> 
>     Full nodes using UTXO set commitments is a change to the bitcoin
>     security model.
> 
>     Currently an attacker with >50% of the network hashrate can rewrite
>     history.
> 
>     If full nodes rely on UTXO set commitments such an attacker could create
>     an infinite number of bitcoins (as in many times more than the current
>     21 million bitcoin limit).
> 
>     Before we consider mechanisms for UTXO set commitments, we should
>     seriously discuss whether the security model reduction is reasonable.
> 
>     On 09/18/2015 12:05 PM, Rune Kj?r Svendsen via bitcoin-dev wrote:
>     > Currently, when a new node wants to join the network, it needs to
>     retrieve the entire blockchain history, starting from January 2009
>     and up until now, in order to derive a UTXO set that it can verify
>     new blocks/transactions against. With a blockchain size of 40GB and
>     a UTXO size of around 1GB, the extra bandwidth required is
>     significant, and will keep increasing indefinitely. If a newly mined
>     block were to include the UTXO set hash of the chain up until the
>     previous block ? the hash of the UTXO set on top of which this block
>     builds ? then new nodes, who want to know whether a transaction is
>     valid, would be able to acquire the UTXO set in a trustless manner,
>     by only verifying proof-of-work headers, and knowing that a block
>     with an invalid UTXO set hash would be rejected.
>     >
>     > I?m not talking about calculating a complicated tree structure
>     from the UTXO set, which would put further burden on already
>     burdened Bitcoin Core nodes. We simply include the hash of the
>     current UTXO set in a newly created block, such that the
>     transactions in the new block build *on top* of the UTXO set whose
>     hash is specified. This actually alleviates Bitcoin Core nodes, as
>     it will now become possible for nodes without the entire blockchain
>     to answer SPV queries (by retrieving the UTXO set trustlessly and
>     using this to answer queries). It also saves bandwidth for Bitcore
>     Core nodes, who only need to send roughly 1GB of data, in order to
>     synchronise a node, rather than 40GB+. I will continue to run a full
>     Bitcoin Core node, saving the entire blockchain history, but it
>     shouldn?t be a requirement to hold the entire transaction history in
>     order to start verifying new transactions.
>     >
>     > As far as I can see, this also forces miners to actually maintain
>     an UTXO set, rather than just build on top of the chain with the
>     most proof-of-work. Producing a UTXO set and verifying a block
>     against a chain is the same thing, so by including the hash of the
>     UTXO set we force miners to verify the block that they want to build
>     on top of.
>     >
>     > Am I missing something obvious, because as far as I can see, this
>     solves the problem of quadratic time complexity for initial sync:
>     http://www.youtube.com/watch?v=TgjrS-BPWDQ&t=2h02m12s
>     >
>     > The only added step to verifying a block is to hash the UTXO set.
>     So it does require additional computation, but most modern CPUs have
>     a SHA256 throughput of around 500 MB/s, which means it takes only
>     two seconds to hash the UTXO set. And this can be improved further
>     (GPUs can do 2-3 GB/s). A small sacrifice for the added ease of
>     initial syncing, in my opinion.
>     >
>     > /Rune
>     > _______________________________________________
>     > bitcoin-dev mailing list
>     > bitcoin-dev at lists.linuxfoundation.org
>     <mailto:bitcoin-dev at lists.linuxfoundation.org>
>     > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> 
> 
>     _______________________________________________
>     bitcoin-dev mailing list
>     bitcoin-dev at lists.linuxfoundation.org
>     <mailto:bitcoin-dev at lists.linuxfoundation.org>
>     https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> 
> 
> 
> 
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> 

From lf-lists at mattcorallo.com  Fri Sep 18 20:14:29 2015
From: lf-lists at mattcorallo.com (Matt Corallo)
Date: Fri, 18 Sep 2015 20:14:29 +0000
Subject: [bitcoin-dev] Weekly development meetings on IRC
In-Reply-To: <20150918010709.GB5251@amethyst.visucore.com>
References: <20150918010709.GB5251@amethyst.visucore.com>
Message-ID: <55FC70A5.9080603@mattcorallo.com>

Generally in favor, but for practical purposes can we select a timezone
that is available in Google Calendar? It appears it does not directly
support UTC...

On 09/18/15 01:07, Wladimir J. van der Laan via bitcoin-dev wrote:
> Hello,
> 
> At Monday's code sprint we had a good idea to schedule a regular developer meeting in #bitcoin-dev.
> 
> Attendance is of course voluntary, but it may be good to have a time that many people are expected to be present and current issues can be discussed.
> 
> Any preference for days/times?
> 
> What about e.g. every week 15:00-16:00 UTC on Thursday?
> 
> Wladimir
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> 

From runesvend at gmail.com  Fri Sep 18 20:17:40 2015
From: runesvend at gmail.com (=?utf-8?Q?Rune_Kj=C3=A6r_Svendsen?=)
Date: Fri, 18 Sep 2015 22:17:40 +0200
Subject: [bitcoin-dev] Hash of UTXO set as consensus-critical
In-Reply-To: <55FC6951.9010704@gmail.com>
References: <5D55F6EC-801B-4607-882F-B76CF57298B1@gmail.com>
	<55FC6951.9010704@gmail.com>
Message-ID: <A16FDC0B-877F-47F1-A631-77F46251BB07@gmail.com>

There are a couple of points I?d like to address.

Firstly, yes, >50% attacks are a problem for Bitcoin. Bitcoin does not function if the majority of mining power is dishonest. There is no way around that. It?s how proof-of-work functions. And if we lose proof-of-work, we lose Bitcoin.

Secondly, I?m not suggesting that UTXO set hashes *replace* block hashes, or even that it should be in the block header (probably in the coinbase somewhere). I suggest it as an *addition* to the existing consensus rules. Full nodes can still verify the chain with the added step of hashing the UTXO set for every block. Of course, this can easily be deferred to after proof-of-work has been verified already, such that no work is wasted. Unless a 51% attack is in effect. But I argue that this is a moot point, since Bitcoin is useless anyway under such circumstances.

Lastly, I?m not suggesting miners discard the blockchain history. A miner has an incentive to be absolutely sure that the chain he?s building on is the right one. If he?s wrong, he loses money/income. There?s simply no reason for a professional miner *not* to do the full initial sync, which only needs to be done once. Non-miners, who just want to check the balance of their wallet, however, really don?t need to retrieve information about Hal Finney sending bitcoins to Satoshi in 2010. In any case, this practice isn?t sustainable.

In the end, it isn?t possible to control whether a miner verifies the entire blockchain anyway (anyone can send the UTXO set over the wire). Not letting the proof-of-work cover the UTXO hash doesn?t solve this problem, it only makes it impossible to know whether a given UTXO set is the one that the majority is mining on without retrieving the entire blockchain, and doing the verification yourself. People can choose to skip that regardless of what we do.

Furthermore, all nodes have the option of deciding which level of security they want. We?re not lessening security of the protocol, we?re strengthening the security of something that?s already possible to do (build on top of an unverified blockchain), but we?d rather want that people not do.

/Rune


> On 18 Sep 2015, at 21:43, Patrick Strateman via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:
> 
> Full nodes using UTXO set commitments is a change to the bitcoin
> security model.
> 
> Currently an attacker with >50% of the network hashrate can rewrite history.
> 
> If full nodes rely on UTXO set commitments such an attacker could create
> an infinite number of bitcoins (as in many times more than the current
> 21 million bitcoin limit).
> 
> Before we consider mechanisms for UTXO set commitments, we should
> seriously discuss whether the security model reduction is reasonable.
> 
> On 09/18/2015 12:05 PM, Rune Kj?r Svendsen via bitcoin-dev wrote:
>> Currently, when a new node wants to join the network, it needs to retrieve the entire blockchain history, starting from January 2009 and up until now, in order to derive a UTXO set that it can verify new blocks/transactions against. With a blockchain size of 40GB and a UTXO size of around 1GB, the extra bandwidth required is significant, and will keep increasing indefinitely. If a newly mined block were to include the UTXO set hash of the chain up until the previous block ? the hash of the UTXO set on top of which this block builds ? then new nodes, who want to know whether a transaction is valid, would be able to acquire the UTXO set in a trustless manner, by only verifying proof-of-work headers, and knowing that a block with an invalid UTXO set hash would be rejected.
>> 
>> I?m not talking about calculating a complicated tree structure from the UTXO set, which would put further burden on already burdened Bitcoin Core nodes. We simply include the hash of the current UTXO set in a newly created block, such that the transactions in the new block build *on top* of the UTXO set whose hash is specified. This actually alleviates Bitcoin Core nodes, as it will now become possible for nodes without the entire blockchain to answer SPV queries (by retrieving the UTXO set trustlessly and using this to answer queries). It also saves bandwidth for Bitcore Core nodes, who only need to send roughly 1GB of data, in order to synchronise a node, rather than 40GB+. I will continue to run a full Bitcoin Core node, saving the entire blockchain history, but it shouldn?t be a requirement to hold the entire transaction history in order to start verifying new transactions.
>> 
>> As far as I can see, this also forces miners to actually maintain an UTXO set, rather than just build on top of the chain with the most proof-of-work. Producing a UTXO set and verifying a block against a chain is the same thing, so by including the hash of the UTXO set we force miners to verify the block that they want to build on top of.
>> 
>> Am I missing something obvious, because as far as I can see, this solves the problem of quadratic time complexity for initial sync: http://www.youtube.com/watch?v=TgjrS-BPWDQ&t=2h02m12s
>> 
>> The only added step to verifying a block is to hash the UTXO set. So it does require additional computation, but most modern CPUs have a SHA256 throughput of around 500 MB/s, which means it takes only two seconds to hash the UTXO set. And this can be improved further (GPUs can do 2-3 GB/s). A small sacrifice for the added ease of initial syncing, in my opinion.
>> 
>> /Rune
>> _______________________________________________
>> bitcoin-dev mailing list
>> bitcoin-dev at lists.linuxfoundation.org
>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> 
> 
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev


From btcdrak at gmail.com  Fri Sep 18 20:24:50 2015
From: btcdrak at gmail.com (Btc Drak)
Date: Fri, 18 Sep 2015 21:24:50 +0100
Subject: [bitcoin-dev] Weekly development meetings on IRC
In-Reply-To: <55FC70A5.9080603@mattcorallo.com>
References: <20150918010709.GB5251@amethyst.visucore.com>
	<55FC70A5.9080603@mattcorallo.com>
Message-ID: <CADJgMzsuBrXT1qOAScu+fv_A7Du1XrFoix8nSO14qXj2YD4KtQ@mail.gmail.com>

Google calendar is localised, so it doesn't matter. The problem with
quoting UTC anyway it the meeting times are going to change for those that
observe DST. It would be much better to quote an actual timezone of an
actual area so it will remain constant, like 1700 CEST, or 0900AM PDT for
example. Otherwise when the clocks change, what was a convenient meeting
time will become inconvenient for some.

On Fri, Sep 18, 2015 at 9:14 PM, Matt Corallo via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> Generally in favor, but for practical purposes can we select a timezone
> that is available in Google Calendar? It appears it does not directly
> support UTC...
>
> On 09/18/15 01:07, Wladimir J. van der Laan via bitcoin-dev wrote:
> > Hello,
> >
> > At Monday's code sprint we had a good idea to schedule a regular
> developer meeting in #bitcoin-dev.
> >
> > Attendance is of course voluntary, but it may be good to have a time
> that many people are expected to be present and current issues can be
> discussed.
> >
> > Any preference for days/times?
> >
> > What about e.g. every week 15:00-16:00 UTC on Thursday?
> >
> > Wladimir
> > _______________________________________________
> > bitcoin-dev mailing list
> > bitcoin-dev at lists.linuxfoundation.org
> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> >
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150918/c4455a41/attachment.html>

From lf-lists at mattcorallo.com  Fri Sep 18 20:27:00 2015
From: lf-lists at mattcorallo.com (Matt Corallo)
Date: Fri, 18 Sep 2015 20:27:00 +0000
Subject: [bitcoin-dev] Weekly development meetings on IRC
In-Reply-To: <CADJgMzsuBrXT1qOAScu+fv_A7Du1XrFoix8nSO14qXj2YD4KtQ@mail.gmail.com>
References: <20150918010709.GB5251@amethyst.visucore.com>
	<55FC70A5.9080603@mattcorallo.com>
	<CADJgMzsuBrXT1qOAScu+fv_A7Du1XrFoix8nSO14qXj2YD4KtQ@mail.gmail.com>
Message-ID: <55FC7394.4060901@mattcorallo.com>

Google Calendar is localized, but has an option to change the timezone
of an event, it just doesnt have UTC in its options. So, yes, we should
use something that observes DST in roughly the same way as everyone else
- CEST/PDT/EST/etc.

On 09/18/15 20:24, Btc Drak wrote:
> Google calendar is localised, so it doesn't matter. The problem with
> quoting UTC anyway it the meeting times are going to change for those
> that observe DST. It would be much better to quote an actual timezone of
> an actual area so it will remain constant, like 1700 CEST, or 0900AM PDT
> for example. Otherwise when the clocks change, what was a convenient
> meeting time will become inconvenient for some.
> 
> On Fri, Sep 18, 2015 at 9:14 PM, Matt Corallo via bitcoin-dev
> <bitcoin-dev at lists.linuxfoundation.org
> <mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:
> 
>     Generally in favor, but for practical purposes can we select a timezone
>     that is available in Google Calendar? It appears it does not directly
>     support UTC...
> 
>     On 09/18/15 01:07, Wladimir J. van der Laan via bitcoin-dev wrote:
>     > Hello,
>     >
>     > At Monday's code sprint we had a good idea to schedule a regular
>     developer meeting in #bitcoin-dev.
>     >
>     > Attendance is of course voluntary, but it may be good to have a
>     time that many people are expected to be present and current issues
>     can be discussed.
>     >
>     > Any preference for days/times?
>     >
>     > What about e.g. every week 15:00-16:00 UTC on Thursday?
>     >
>     > Wladimir
>     > _______________________________________________
>     > bitcoin-dev mailing list
>     > bitcoin-dev at lists.linuxfoundation.org
>     <mailto:bitcoin-dev at lists.linuxfoundation.org>
>     > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>     >
>     _______________________________________________
>     bitcoin-dev mailing list
>     bitcoin-dev at lists.linuxfoundation.org
>     <mailto:bitcoin-dev at lists.linuxfoundation.org>
>     https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> 
> 

From jp at eeqj.com  Fri Sep 18 20:30:23 2015
From: jp at eeqj.com (Jeffrey Paul)
Date: Fri, 18 Sep 2015 22:30:23 +0200
Subject: [bitcoin-dev] Weekly development meetings on IRC
In-Reply-To: <55FC7394.4060901@mattcorallo.com>
References: <20150918010709.GB5251@amethyst.visucore.com>
	<55FC70A5.9080603@mattcorallo.com>
	<CADJgMzsuBrXT1qOAScu+fv_A7Du1XrFoix8nSO14qXj2YD4KtQ@mail.gmail.com>
	<55FC7394.4060901@mattcorallo.com>
Message-ID: <3A2A1AC7-2003-4EBC-BE64-BA409071E7CF@eeqj.com>


> On 18 Sep 2015, at 22:27, Matt Corallo via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:
> 
> Google Calendar is localized, but has an option to change the timezone
> of an event, it just doesnt have UTC in its options. So, yes, we should
> use something that observes DST in roughly the same way as everyone else
> - CEST/PDT/EST/etc.

According to this post, it is possible to configure Google Calendar to show an additional time zone to your localized one, and GMT/UTC is indeed in the list.

    https://productforums.google.com/forum/#!topic/calendar/y6uaiAdZrIg

-jp

--
Jeffrey Paul                                                      EEQJ
jp at eeqj.com                                           https://eeqj.com
+1-800-403-1126 (America)                  +1-312-361-0355 (Worldwide)
5539 AD00 DE4C 42F3 AFE1                      1575 0524 43F4 DF2A 55C2


From gmaxwell at gmail.com  Fri Sep 18 20:31:28 2015
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Fri, 18 Sep 2015 20:31:28 +0000
Subject: [bitcoin-dev] Weekly development meetings on IRC
In-Reply-To: <55FC7394.4060901@mattcorallo.com>
References: <20150918010709.GB5251@amethyst.visucore.com>
	<55FC70A5.9080603@mattcorallo.com>
	<CADJgMzsuBrXT1qOAScu+fv_A7Du1XrFoix8nSO14qXj2YD4KtQ@mail.gmail.com>
	<55FC7394.4060901@mattcorallo.com>
Message-ID: <CAAS2fgR59+iFjg5n6des50rJCA8vkRAvjKC3QgRjiYSyy-bA9A@mail.gmail.com>

On Fri, Sep 18, 2015 at 8:27 PM, Matt Corallo via bitcoin-dev
<bitcoin-dev at lists.linuxfoundation.org> wrote:
> Google Calendar is localized, but has an option to change the timezone
> of an event, it just doesnt have UTC in its options. So, yes, we should
> use something that observes DST in roughly the same way as everyone else
> - CEST/PDT/EST/etc.

uh. There is fairly little global consistency in DST usage. Lots of
places do dst on different dates.

So if it's in some DST timezone it's likely to move twice each change
for some subset of the people who do it.

E.g. europe and US end DST one week apart.

From btcdrak at gmail.com  Fri Sep 18 20:34:59 2015
From: btcdrak at gmail.com (Btc Drak)
Date: Fri, 18 Sep 2015 21:34:59 +0100
Subject: [bitcoin-dev] Weekly development meetings on IRC
In-Reply-To: <CAAS2fgR59+iFjg5n6des50rJCA8vkRAvjKC3QgRjiYSyy-bA9A@mail.gmail.com>
References: <20150918010709.GB5251@amethyst.visucore.com>
	<55FC70A5.9080603@mattcorallo.com>
	<CADJgMzsuBrXT1qOAScu+fv_A7Du1XrFoix8nSO14qXj2YD4KtQ@mail.gmail.com>
	<55FC7394.4060901@mattcorallo.com>
	<CAAS2fgR59+iFjg5n6des50rJCA8vkRAvjKC3QgRjiYSyy-bA9A@mail.gmail.com>
Message-ID: <CADJgMzvcR8O1pQDFVAp2Ndu-a7-VoCtckcPSogQvMUqa6a55bA@mail.gmail.com>

Urgh... Can we hardfork time? It's clearly in need of an upgrade...

On Fri, Sep 18, 2015 at 9:31 PM, Gregory Maxwell <gmaxwell at gmail.com> wrote:

> On Fri, Sep 18, 2015 at 8:27 PM, Matt Corallo via bitcoin-dev
> <bitcoin-dev at lists.linuxfoundation.org> wrote:
> > Google Calendar is localized, but has an option to change the timezone
> > of an event, it just doesnt have UTC in its options. So, yes, we should
> > use something that observes DST in roughly the same way as everyone else
> > - CEST/PDT/EST/etc.
>
> uh. There is fairly little global consistency in DST usage. Lots of
> places do dst on different dates.
>
> So if it's in some DST timezone it's likely to move twice each change
> for some subset of the people who do it.
>
> E.g. europe and US end DST one week apart.
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150918/09bbdbe3/attachment.html>

From jtimon at jtimon.cc  Fri Sep 18 20:37:05 2015
From: jtimon at jtimon.cc (=?UTF-8?B?Sm9yZ2UgVGltw7Nu?=)
Date: Fri, 18 Sep 2015 22:37:05 +0200
Subject: [bitcoin-dev] Hash of UTXO set as consensus-critical
In-Reply-To: <A16FDC0B-877F-47F1-A631-77F46251BB07@gmail.com>
References: <5D55F6EC-801B-4607-882F-B76CF57298B1@gmail.com>
	<55FC6951.9010704@gmail.com>
	<A16FDC0B-877F-47F1-A631-77F46251BB07@gmail.com>
Message-ID: <CABm2gDrQm8-vQi6YBx9xh4GanJi-ZfiJpSW8nghvGeoLsuDVsw@mail.gmail.com>

Well, with utxo commitments at some point maybe is enough to validate the
full headers history but only the last 5 years of ttansaction history
(assuming utxo commitments are buried 5 years worth of blocks in the past).
This scales much better than validating the full history and if we get a 5
year reorg something is going really wrong anyway...
Maybe after validating the last 5 years you also want to validate the rest
of the history backards to get the "fully-full node" security.
Of course 5 years it's just an arbitrary number: 2 or maybe even 1 would
probably be secure enough for most people. I've referred to this idea as
"hard checkpoints" or "moving the genesis block forward" in the past.
On Sep 18, 2015 4:18 PM, "Rune Kj?r Svendsen" <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> There are a couple of points I?d like to address.
>
> Firstly, yes, >50% attacks are a problem for Bitcoin. Bitcoin does not
> function if the majority of mining power is dishonest. There is no way
> around that. It?s how proof-of-work functions. And if we lose
> proof-of-work, we lose Bitcoin.
>
> Secondly, I?m not suggesting that UTXO set hashes *replace* block hashes,
> or even that it should be in the block header (probably in the coinbase
> somewhere). I suggest it as an *addition* to the existing consensus rules.
> Full nodes can still verify the chain with the added step of hashing the
> UTXO set for every block. Of course, this can easily be deferred to after
> proof-of-work has been verified already, such that no work is wasted.
> Unless a 51% attack is in effect. But I argue that this is a moot point,
> since Bitcoin is useless anyway under such circumstances.
>
> Lastly, I?m not suggesting miners discard the blockchain history. A miner
> has an incentive to be absolutely sure that the chain he?s building on is
> the right one. If he?s wrong, he loses money/income. There?s simply no
> reason for a professional miner *not* to do the full initial sync, which
> only needs to be done once. Non-miners, who just want to check the balance
> of their wallet, however, really don?t need to retrieve information about
> Hal Finney sending bitcoins to Satoshi in 2010. In any case, this practice
> isn?t sustainable.
>
> In the end, it isn?t possible to control whether a miner verifies the
> entire blockchain anyway (anyone can send the UTXO set over the wire). Not
> letting the proof-of-work cover the UTXO hash doesn?t solve this problem,
> it only makes it impossible to know whether a given UTXO set is the one
> that the majority is mining on without retrieving the entire blockchain,
> and doing the verification yourself. People can choose to skip that
> regardless of what we do.
>
> Furthermore, all nodes have the option of deciding which level of security
> they want. We?re not lessening security of the protocol, we?re
> strengthening the security of something that?s already possible to do
> (build on top of an unverified blockchain), but we?d rather want that
> people not do.
>
> /Rune
>
>
> > On 18 Sep 2015, at 21:43, Patrick Strateman via bitcoin-dev <
> bitcoin-dev at lists.linuxfoundation.org> wrote:
> >
> > Full nodes using UTXO set commitments is a change to the bitcoin
> > security model.
> >
> > Currently an attacker with >50% of the network hashrate can rewrite
> history.
> >
> > If full nodes rely on UTXO set commitments such an attacker could create
> > an infinite number of bitcoins (as in many times more than the current
> > 21 million bitcoin limit).
> >
> > Before we consider mechanisms for UTXO set commitments, we should
> > seriously discuss whether the security model reduction is reasonable.
> >
> > On 09/18/2015 12:05 PM, Rune Kj?r Svendsen via bitcoin-dev wrote:
> >> Currently, when a new node wants to join the network, it needs to
> retrieve the entire blockchain history, starting from January 2009 and up
> until now, in order to derive a UTXO set that it can verify new
> blocks/transactions against. With a blockchain size of 40GB and a UTXO size
> of around 1GB, the extra bandwidth required is significant, and will keep
> increasing indefinitely. If a newly mined block were to include the UTXO
> set hash of the chain up until the previous block ? the hash of the UTXO
> set on top of which this block builds ? then new nodes, who want to know
> whether a transaction is valid, would be able to acquire the UTXO set in a
> trustless manner, by only verifying proof-of-work headers, and knowing that
> a block with an invalid UTXO set hash would be rejected.
> >>
> >> I?m not talking about calculating a complicated tree structure from the
> UTXO set, which would put further burden on already burdened Bitcoin Core
> nodes. We simply include the hash of the current UTXO set in a newly
> created block, such that the transactions in the new block build *on top*
> of the UTXO set whose hash is specified. This actually alleviates Bitcoin
> Core nodes, as it will now become possible for nodes without the entire
> blockchain to answer SPV queries (by retrieving the UTXO set trustlessly
> and using this to answer queries). It also saves bandwidth for Bitcore Core
> nodes, who only need to send roughly 1GB of data, in order to synchronise a
> node, rather than 40GB+. I will continue to run a full Bitcoin Core node,
> saving the entire blockchain history, but it shouldn?t be a requirement to
> hold the entire transaction history in order to start verifying new
> transactions.
> >>
> >> As far as I can see, this also forces miners to actually maintain an
> UTXO set, rather than just build on top of the chain with the most
> proof-of-work. Producing a UTXO set and verifying a block against a chain
> is the same thing, so by including the hash of the UTXO set we force miners
> to verify the block that they want to build on top of.
> >>
> >> Am I missing something obvious, because as far as I can see, this
> solves the problem of quadratic time complexity for initial sync:
> http://www.youtube.com/watch?v=TgjrS-BPWDQ&t=2h02m12s
> >>
> >> The only added step to verifying a block is to hash the UTXO set. So it
> does require additional computation, but most modern CPUs have a SHA256
> throughput of around 500 MB/s, which means it takes only two seconds to
> hash the UTXO set. And this can be improved further (GPUs can do 2-3 GB/s).
> A small sacrifice for the added ease of initial syncing, in my opinion.
> >>
> >> /Rune
> >> _______________________________________________
> >> bitcoin-dev mailing list
> >> bitcoin-dev at lists.linuxfoundation.org
> >> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> >
> >
> > _______________________________________________
> > bitcoin-dev mailing list
> > bitcoin-dev at lists.linuxfoundation.org
> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150918/a57078f8/attachment-0001.html>

From jtimon at jtimon.cc  Fri Sep 18 20:38:06 2015
From: jtimon at jtimon.cc (=?UTF-8?B?Sm9yZ2UgVGltw7Nu?=)
Date: Fri, 18 Sep 2015 22:38:06 +0200
Subject: [bitcoin-dev] Hash of UTXO set as consensus-critical
In-Reply-To: <CABm2gDrQm8-vQi6YBx9xh4GanJi-ZfiJpSW8nghvGeoLsuDVsw@mail.gmail.com>
References: <5D55F6EC-801B-4607-882F-B76CF57298B1@gmail.com>
	<55FC6951.9010704@gmail.com>
	<A16FDC0B-877F-47F1-A631-77F46251BB07@gmail.com>
	<CABm2gDrQm8-vQi6YBx9xh4GanJi-ZfiJpSW8nghvGeoLsuDVsw@mail.gmail.com>
Message-ID: <CABm2gDp-=Z0UHQ=7BnC8P_XJ3XCpU4n_L6kx6tfVovRmsGjFaw@mail.gmail.com>

s/move the genesis block forward/move your genesis checkpoint forward/
On Sep 18, 2015 4:37 PM, "Jorge Tim?n" <jtimon at jtimon.cc> wrote:

> Well, with utxo commitments at some point maybe is enough to validate the
> full headers history but only the last 5 years of ttansaction history
> (assuming utxo commitments are buried 5 years worth of blocks in the past).
> This scales much better than validating the full history and if we get a 5
> year reorg something is going really wrong anyway...
> Maybe after validating the last 5 years you also want to validate the rest
> of the history backards to get the "fully-full node" security.
> Of course 5 years it's just an arbitrary number: 2 or maybe even 1 would
> probably be secure enough for most people. I've referred to this idea as
> "hard checkpoints" or "moving the genesis block forward" in the past.
> On Sep 18, 2015 4:18 PM, "Rune Kj?r Svendsen" <
> bitcoin-dev at lists.linuxfoundation.org> wrote:
>
>> There are a couple of points I?d like to address.
>>
>> Firstly, yes, >50% attacks are a problem for Bitcoin. Bitcoin does not
>> function if the majority of mining power is dishonest. There is no way
>> around that. It?s how proof-of-work functions. And if we lose
>> proof-of-work, we lose Bitcoin.
>>
>> Secondly, I?m not suggesting that UTXO set hashes *replace* block hashes,
>> or even that it should be in the block header (probably in the coinbase
>> somewhere). I suggest it as an *addition* to the existing consensus rules.
>> Full nodes can still verify the chain with the added step of hashing the
>> UTXO set for every block. Of course, this can easily be deferred to after
>> proof-of-work has been verified already, such that no work is wasted.
>> Unless a 51% attack is in effect. But I argue that this is a moot point,
>> since Bitcoin is useless anyway under such circumstances.
>>
>> Lastly, I?m not suggesting miners discard the blockchain history. A miner
>> has an incentive to be absolutely sure that the chain he?s building on is
>> the right one. If he?s wrong, he loses money/income. There?s simply no
>> reason for a professional miner *not* to do the full initial sync, which
>> only needs to be done once. Non-miners, who just want to check the balance
>> of their wallet, however, really don?t need to retrieve information about
>> Hal Finney sending bitcoins to Satoshi in 2010. In any case, this practice
>> isn?t sustainable.
>>
>> In the end, it isn?t possible to control whether a miner verifies the
>> entire blockchain anyway (anyone can send the UTXO set over the wire). Not
>> letting the proof-of-work cover the UTXO hash doesn?t solve this problem,
>> it only makes it impossible to know whether a given UTXO set is the one
>> that the majority is mining on without retrieving the entire blockchain,
>> and doing the verification yourself. People can choose to skip that
>> regardless of what we do.
>>
>> Furthermore, all nodes have the option of deciding which level of
>> security they want. We?re not lessening security of the protocol, we?re
>> strengthening the security of something that?s already possible to do
>> (build on top of an unverified blockchain), but we?d rather want that
>> people not do.
>>
>> /Rune
>>
>>
>> > On 18 Sep 2015, at 21:43, Patrick Strateman via bitcoin-dev <
>> bitcoin-dev at lists.linuxfoundation.org> wrote:
>> >
>> > Full nodes using UTXO set commitments is a change to the bitcoin
>> > security model.
>> >
>> > Currently an attacker with >50% of the network hashrate can rewrite
>> history.
>> >
>> > If full nodes rely on UTXO set commitments such an attacker could create
>> > an infinite number of bitcoins (as in many times more than the current
>> > 21 million bitcoin limit).
>> >
>> > Before we consider mechanisms for UTXO set commitments, we should
>> > seriously discuss whether the security model reduction is reasonable.
>> >
>> > On 09/18/2015 12:05 PM, Rune Kj?r Svendsen via bitcoin-dev wrote:
>> >> Currently, when a new node wants to join the network, it needs to
>> retrieve the entire blockchain history, starting from January 2009 and up
>> until now, in order to derive a UTXO set that it can verify new
>> blocks/transactions against. With a blockchain size of 40GB and a UTXO size
>> of around 1GB, the extra bandwidth required is significant, and will keep
>> increasing indefinitely. If a newly mined block were to include the UTXO
>> set hash of the chain up until the previous block ? the hash of the UTXO
>> set on top of which this block builds ? then new nodes, who want to know
>> whether a transaction is valid, would be able to acquire the UTXO set in a
>> trustless manner, by only verifying proof-of-work headers, and knowing that
>> a block with an invalid UTXO set hash would be rejected.
>> >>
>> >> I?m not talking about calculating a complicated tree structure from
>> the UTXO set, which would put further burden on already burdened Bitcoin
>> Core nodes. We simply include the hash of the current UTXO set in a newly
>> created block, such that the transactions in the new block build *on top*
>> of the UTXO set whose hash is specified. This actually alleviates Bitcoin
>> Core nodes, as it will now become possible for nodes without the entire
>> blockchain to answer SPV queries (by retrieving the UTXO set trustlessly
>> and using this to answer queries). It also saves bandwidth for Bitcore Core
>> nodes, who only need to send roughly 1GB of data, in order to synchronise a
>> node, rather than 40GB+. I will continue to run a full Bitcoin Core node,
>> saving the entire blockchain history, but it shouldn?t be a requirement to
>> hold the entire transaction history in order to start verifying new
>> transactions.
>> >>
>> >> As far as I can see, this also forces miners to actually maintain an
>> UTXO set, rather than just build on top of the chain with the most
>> proof-of-work. Producing a UTXO set and verifying a block against a chain
>> is the same thing, so by including the hash of the UTXO set we force miners
>> to verify the block that they want to build on top of.
>> >>
>> >> Am I missing something obvious, because as far as I can see, this
>> solves the problem of quadratic time complexity for initial sync:
>> http://www.youtube.com/watch?v=TgjrS-BPWDQ&t=2h02m12s
>> >>
>> >> The only added step to verifying a block is to hash the UTXO set. So
>> it does require additional computation, but most modern CPUs have a SHA256
>> throughput of around 500 MB/s, which means it takes only two seconds to
>> hash the UTXO set. And this can be improved further (GPUs can do 2-3 GB/s).
>> A small sacrifice for the added ease of initial syncing, in my opinion.
>> >>
>> >> /Rune
>> >> _______________________________________________
>> >> bitcoin-dev mailing list
>> >> bitcoin-dev at lists.linuxfoundation.org
>> >> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>> >
>> >
>> > _______________________________________________
>> > bitcoin-dev mailing list
>> > bitcoin-dev at lists.linuxfoundation.org
>> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>
>> _______________________________________________
>> bitcoin-dev mailing list
>> bitcoin-dev at lists.linuxfoundation.org
>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150918/45701f72/attachment.html>

From lf-lists at mattcorallo.com  Fri Sep 18 20:36:41 2015
From: lf-lists at mattcorallo.com (Matt Corallo)
Date: Fri, 18 Sep 2015 20:36:41 +0000
Subject: [bitcoin-dev] Weekly development meetings on IRC
In-Reply-To: <CAAS2fgR59+iFjg5n6des50rJCA8vkRAvjKC3QgRjiYSyy-bA9A@mail.gmail.com>
References: <20150918010709.GB5251@amethyst.visucore.com>
	<55FC70A5.9080603@mattcorallo.com>
	<CADJgMzsuBrXT1qOAScu+fv_A7Du1XrFoix8nSO14qXj2YD4KtQ@mail.gmail.com>
	<55FC7394.4060901@mattcorallo.com>
	<CAAS2fgR59+iFjg5n6des50rJCA8vkRAvjKC3QgRjiYSyy-bA9A@mail.gmail.com>
Message-ID: <8F9BCA09-1658-4E0D-BE82-BB9EEA08270E@mattcorallo.com>

Yes, I'm aware, however they are closer to each other than UTC is to either :p.

On September 18, 2015 4:31:28 PM EDT, Gregory Maxwell <gmaxwell at gmail.com> wrote:
>On Fri, Sep 18, 2015 at 8:27 PM, Matt Corallo via bitcoin-dev
><bitcoin-dev at lists.linuxfoundation.org> wrote:
>> Google Calendar is localized, but has an option to change the
>timezone
>> of an event, it just doesnt have UTC in its options. So, yes, we
>should
>> use something that observes DST in roughly the same way as everyone
>else
>> - CEST/PDT/EST/etc.
>
>uh. There is fairly little global consistency in DST usage. Lots of
>places do dst on different dates.
>
>So if it's in some DST timezone it's likely to move twice each change
>for some subset of the people who do it.
>
>E.g. europe and US end DST one week apart.


From lf-lists at mattcorallo.com  Fri Sep 18 20:34:43 2015
From: lf-lists at mattcorallo.com (Matt Corallo)
Date: Fri, 18 Sep 2015 20:34:43 +0000
Subject: [bitcoin-dev] Weekly development meetings on IRC
In-Reply-To: <3A2A1AC7-2003-4EBC-BE64-BA409071E7CF@eeqj.com>
References: <20150918010709.GB5251@amethyst.visucore.com>
	<55FC70A5.9080603@mattcorallo.com>
	<CADJgMzsuBrXT1qOAScu+fv_A7Du1XrFoix8nSO14qXj2YD4KtQ@mail.gmail.com>
	<55FC7394.4060901@mattcorallo.com>
	<3A2A1AC7-2003-4EBC-BE64-BA409071E7CF@eeqj.com>
Message-ID: <9A66D3E7-CA0E-400A-B45E-0ADB0F83DC6E@mattcorallo.com>

I believe that is out of date. I see neither UTC nor GMT on the website nor on Android.

Matt

On September 18, 2015 4:30:23 PM EDT, Jeffrey Paul <jp at eeqj.com> wrote:
>
>> On 18 Sep 2015, at 22:27, Matt Corallo via bitcoin-dev
><bitcoin-dev at lists.linuxfoundation.org> wrote:
>> 
>> Google Calendar is localized, but has an option to change the
>timezone
>> of an event, it just doesnt have UTC in its options. So, yes, we
>should
>> use something that observes DST in roughly the same way as everyone
>else
>> - CEST/PDT/EST/etc.
>
>According to this post, it is possible to configure Google Calendar to
>show an additional time zone to your localized one, and GMT/UTC is
>indeed in the list.
>
>    https://productforums.google.com/forum/#!topic/calendar/y6uaiAdZrIg
>
>-jp
>
>--
>Jeffrey Paul                                                      EEQJ
>jp at eeqj.com                                           https://eeqj.com
>+1-800-403-1126 (America)                  +1-312-361-0355 (Worldwide)
>5539 AD00 DE4C 42F3 AFE1                      1575 0524 43F4 DF2A 55C2


From luke at dashjr.org  Fri Sep 18 21:50:33 2015
From: luke at dashjr.org (Luke Dashjr)
Date: Fri, 18 Sep 2015 21:50:33 +0000
Subject: [bitcoin-dev] Weekly development meetings on IRC
In-Reply-To: <CADJgMzsuBrXT1qOAScu+fv_A7Du1XrFoix8nSO14qXj2YD4KtQ@mail.gmail.com>
References: <20150918010709.GB5251@amethyst.visucore.com>
	<55FC70A5.9080603@mattcorallo.com>
	<CADJgMzsuBrXT1qOAScu+fv_A7Du1XrFoix8nSO14qXj2YD4KtQ@mail.gmail.com>
Message-ID: <201509182150.34756.luke@dashjr.org>

On Friday, September 18, 2015 8:24:50 PM Btc Drak via bitcoin-dev wrote:
> Google calendar is localised, so it doesn't matter. The problem with
> quoting UTC anyway it the meeting times are going to change for those that
> observe DST. It would be much better to quote an actual timezone of an
> actual area so it will remain constant, like 1700 CEST, or 0900AM PDT for
> example. Otherwise when the clocks change, what was a convenient meeting
> time will become inconvenient for some.

Not everyone does crazy clock-changing. Using such a time system for 
scheduling seems to inconvenience the wrong position. (although perhaps 
arguably better since most people probably use DST) :p

(Aside, if Google Calendar can't support standard UTC, that sounds like an 
argument against using Google Calendar...)

> Urgh... Can we hardfork time? It's clearly in need of an upgrade...

Tonal time works nice and consistently. :D

Luke

From luke at dashjr.org  Fri Sep 18 21:50:04 2015
From: luke at dashjr.org (Luke Dashjr)
Date: Fri, 18 Sep 2015 21:50:04 +0000
Subject: [bitcoin-dev] Weekly development meetings on IRC
In-Reply-To: <CADJgMzsuBrXT1qOAScu+fv_A7Du1XrFoix8nSO14qXj2YD4KtQ@mail.gmail.com>
References: <20150918010709.GB5251@amethyst.visucore.com>
	<55FC70A5.9080603@mattcorallo.com>
	<CADJgMzsuBrXT1qOAScu+fv_A7Du1XrFoix8nSO14qXj2YD4KtQ@mail.gmail.com>
Message-ID: <201509182150.06275.luke@dashjr.org>

On Friday, September 18, 2015 8:24:50 PM Btc Drak via bitcoin-dev wrote:
> Google calendar is localised, so it doesn't matter. The problem with
> quoting UTC anyway it the meeting times are going to change for those that
> observe DST. It would be much better to quote an actual timezone of an
> actual area so it will remain constant, like 1700 CEST, or 0900AM PDT for
> example. Otherwise when the clocks change, what was a convenient meeting
> time will become inconvenient for some.

Not everyone does crazy clock-changing. Using such a time system for 
scheduling seems to inconvenience the wrong position. (although perhaps 
arguably better since most people probably use DST) :p

(Aside, if Google Calendar can't support standard UTC, that sounds like an 
argument against using Google Calendar...)

> Urgh... Can we hardfork time? It's clearly in need of an upgrade...

Tonal time works nice any consistently. :D

Luke

From truthcoin at gmail.com  Fri Sep 18 22:15:07 2015
From: truthcoin at gmail.com (Paul Sztorc)
Date: Fri, 18 Sep 2015 18:15:07 -0400
Subject: [bitcoin-dev] Improving Blocksize Communication Through Markets
In-Reply-To: <CAOG=w-t2ZYQbx8+mG5FX8vzgAC_tb8A6KMABmudHQbrquEqX-Q@mail.gmail.com>
References: <CADm_WcaLKqhR=WcJ5B52Q9SAAa+AdZY6Kz5OCQVUc_RQm6e9gg@mail.gmail.com>
	<55F9E47D.50507@mattcorallo.com>
	<CAOG=w-t2ZYQbx8+mG5FX8vzgAC_tb8A6KMABmudHQbrquEqX-Q@mail.gmail.com>
Message-ID: <55FC8CEB.9070508@gmail.com>

Dear List,

1. Are you sick of hearing about THE BLOCKSIZE?
2. Do you feel that long-settled blocksize issues are coming up again
and again, resulting in duplicated work and communications burnout?
3. Do you feel that, while scalability is important and all, people
should just shut up about it already so that you can talk about X
Feature that you actually spent your time on?
4. Do you ever stop and think: How much *money* was spent for everyone
to travel to Montreal, stay at their hotels, and to rent the conference
venue and broadcasting accommodations? Shouldn't there be a way of just
*purchasing* the information we wanted more directly?
5. Do you feel that the inherent subjectivity of the conversation
encourages ?political maneuvers? such as character assassination,
reduction of complex issues to minimal (two) unrepresentative ?parties?,
and harassment / threats of violence (for the ?greater good?)?

As I presented at the Montreal Conference, there is a way to
substantially improve the discussion. Would you believe that Hal Finney
himself advocated it just seven short years ago?

I happen to know it back-to-front, and the (simple) pieces are already
coded into my own more-complex project Truthcoin.

You could wait for me to hack the pieces together myself (which might
take a long time), or you, a competent/fast C++ developer familiar with
Bitcoin and/or Sidechain-Elements, could talk to me for 30 minutes, and
(depending on your skill level) bang it out in, probably, one weekend.

More details are on the project page ( http://bitcoinblocksize.com/ ),
some technical details are in the Github README.

I have also created a Slack:
https://blocksize-markets.slack.com/messages/general/

Sincerely,
Paul
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150918/7718057d/attachment.html>

From vincent.truong at procabiak.com  Fri Sep 18 22:22:35 2015
From: vincent.truong at procabiak.com (Vincent Truong)
Date: Sat, 19 Sep 2015 08:22:35 +1000
Subject: [bitcoin-dev] Hash of UTXO set as consensus-critical
In-Reply-To: <CABm2gDp-=Z0UHQ=7BnC8P_XJ3XCpU4n_L6kx6tfVovRmsGjFaw@mail.gmail.com>
References: <5D55F6EC-801B-4607-882F-B76CF57298B1@gmail.com>
	<55FC6951.9010704@gmail.com>
	<A16FDC0B-877F-47F1-A631-77F46251BB07@gmail.com>
	<CABm2gDrQm8-vQi6YBx9xh4GanJi-ZfiJpSW8nghvGeoLsuDVsw@mail.gmail.com>
	<CABm2gDp-=Z0UHQ=7BnC8P_XJ3XCpU4n_L6kx6tfVovRmsGjFaw@mail.gmail.com>
Message-ID: <CACrzPemS5x4pXBjsXJJU2Te9a=t7fOZmepV41Boy73pod_6PmQ@mail.gmail.com>

This way lets us protect from 51% overwrites for a whole year:

1. Hash utxo set as is today, H1, and store it in a block.
2. At the same time, store a copy of the utxo set for H1 on disk, D1
3. After 1 year, create D2, then wait for H2 (if a fork happens then
recreate D2 and see which wins)
4. The block with H2 must hash on top of H1
4. Blocks before H1 can be safely pruned by the network, only keeping D1
for reference/validation, plus blocks the node wants to keep (data/colored
coins)
5. After 1 year, repeat for H3.
7. D1 can also be dropped after a few days once D3 is up, since the H1
securing D1 would have been pruned with H3's usage of D2 by then.

This reduces the security model from 'always secure' to 'secure, as of last
year'. An attacker will need to have hidden hashing power to overwrite a
years worth of blocks. Which I think would be hard enough.

The attacker can also try to undo a freshly built Hn, but because we can
build Dn first and wait for Hn, the nodes should be expecting the same
hash. They also serve as automated checkpoints to prevent them from
overwriting all of it.
On Sep 19, 2015 6:38 AM, "Jorge Tim?n" <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> s/move the genesis block forward/move your genesis checkpoint forward/
> On Sep 18, 2015 4:37 PM, "Jorge Tim?n" <jtimon at jtimon.cc> wrote:
>
>> Well, with utxo commitments at some point maybe is enough to validate the
>> full headers history but only the last 5 years of ttansaction history
>> (assuming utxo commitments are buried 5 years worth of blocks in the past).
>> This scales much better than validating the full history and if we get a 5
>> year reorg something is going really wrong anyway...
>> Maybe after validating the last 5 years you also want to validate the
>> rest of the history backards to get the "fully-full node" security.
>> Of course 5 years it's just an arbitrary number: 2 or maybe even 1 would
>> probably be secure enough for most people. I've referred to this idea as
>> "hard checkpoints" or "moving the genesis block forward" in the past.
>> On Sep 18, 2015 4:18 PM, "Rune Kj?r Svendsen" <
>> bitcoin-dev at lists.linuxfoundation.org> wrote:
>>
>>> There are a couple of points I?d like to address.
>>>
>>> Firstly, yes, >50% attacks are a problem for Bitcoin. Bitcoin does not
>>> function if the majority of mining power is dishonest. There is no way
>>> around that. It?s how proof-of-work functions. And if we lose
>>> proof-of-work, we lose Bitcoin.
>>>
>>> Secondly, I?m not suggesting that UTXO set hashes *replace* block
>>> hashes, or even that it should be in the block header (probably in the
>>> coinbase somewhere). I suggest it as an *addition* to the existing
>>> consensus rules. Full nodes can still verify the chain with the added step
>>> of hashing the UTXO set for every block. Of course, this can easily be
>>> deferred to after proof-of-work has been verified already, such that no
>>> work is wasted. Unless a 51% attack is in effect. But I argue that this is
>>> a moot point, since Bitcoin is useless anyway under such circumstances.
>>>
>>> Lastly, I?m not suggesting miners discard the blockchain history. A
>>> miner has an incentive to be absolutely sure that the chain he?s building
>>> on is the right one. If he?s wrong, he loses money/income. There?s simply
>>> no reason for a professional miner *not* to do the full initial sync, which
>>> only needs to be done once. Non-miners, who just want to check the balance
>>> of their wallet, however, really don?t need to retrieve information about
>>> Hal Finney sending bitcoins to Satoshi in 2010. In any case, this practice
>>> isn?t sustainable.
>>>
>>> In the end, it isn?t possible to control whether a miner verifies the
>>> entire blockchain anyway (anyone can send the UTXO set over the wire). Not
>>> letting the proof-of-work cover the UTXO hash doesn?t solve this problem,
>>> it only makes it impossible to know whether a given UTXO set is the one
>>> that the majority is mining on without retrieving the entire blockchain,
>>> and doing the verification yourself. People can choose to skip that
>>> regardless of what we do.
>>>
>>> Furthermore, all nodes have the option of deciding which level of
>>> security they want. We?re not lessening security of the protocol, we?re
>>> strengthening the security of something that?s already possible to do
>>> (build on top of an unverified blockchain), but we?d rather want that
>>> people not do.
>>>
>>> /Rune
>>>
>>>
>>> > On 18 Sep 2015, at 21:43, Patrick Strateman via bitcoin-dev <
>>> bitcoin-dev at lists.linuxfoundation.org> wrote:
>>> >
>>> > Full nodes using UTXO set commitments is a change to the bitcoin
>>> > security model.
>>> >
>>> > Currently an attacker with >50% of the network hashrate can rewrite
>>> history.
>>> >
>>> > If full nodes rely on UTXO set commitments such an attacker could
>>> create
>>> > an infinite number of bitcoins (as in many times more than the current
>>> > 21 million bitcoin limit).
>>> >
>>> > Before we consider mechanisms for UTXO set commitments, we should
>>> > seriously discuss whether the security model reduction is reasonable.
>>> >
>>> > On 09/18/2015 12:05 PM, Rune Kj?r Svendsen via bitcoin-dev wrote:
>>> >> Currently, when a new node wants to join the network, it needs to
>>> retrieve the entire blockchain history, starting from January 2009 and up
>>> until now, in order to derive a UTXO set that it can verify new
>>> blocks/transactions against. With a blockchain size of 40GB and a UTXO size
>>> of around 1GB, the extra bandwidth required is significant, and will keep
>>> increasing indefinitely. If a newly mined block were to include the UTXO
>>> set hash of the chain up until the previous block ? the hash of the UTXO
>>> set on top of which this block builds ? then new nodes, who want to know
>>> whether a transaction is valid, would be able to acquire the UTXO set in a
>>> trustless manner, by only verifying proof-of-work headers, and knowing that
>>> a block with an invalid UTXO set hash would be rejected.
>>> >>
>>> >> I?m not talking about calculating a complicated tree structure from
>>> the UTXO set, which would put further burden on already burdened Bitcoin
>>> Core nodes. We simply include the hash of the current UTXO set in a newly
>>> created block, such that the transactions in the new block build *on top*
>>> of the UTXO set whose hash is specified. This actually alleviates Bitcoin
>>> Core nodes, as it will now become possible for nodes without the entire
>>> blockchain to answer SPV queries (by retrieving the UTXO set trustlessly
>>> and using this to answer queries). It also saves bandwidth for Bitcore Core
>>> nodes, who only need to send roughly 1GB of data, in order to synchronise a
>>> node, rather than 40GB+. I will continue to run a full Bitcoin Core node,
>>> saving the entire blockchain history, but it shouldn?t be a requirement to
>>> hold the entire transaction history in order to start verifying new
>>> transactions.
>>> >>
>>> >> As far as I can see, this also forces miners to actually maintain an
>>> UTXO set, rather than just build on top of the chain with the most
>>> proof-of-work. Producing a UTXO set and verifying a block against a chain
>>> is the same thing, so by including the hash of the UTXO set we force miners
>>> to verify the block that they want to build on top of.
>>> >>
>>> >> Am I missing something obvious, because as far as I can see, this
>>> solves the problem of quadratic time complexity for initial sync:
>>> http://www.youtube.com/watch?v=TgjrS-BPWDQ&t=2h02m12s
>>> >>
>>> >> The only added step to verifying a block is to hash the UTXO set. So
>>> it does require additional computation, but most modern CPUs have a SHA256
>>> throughput of around 500 MB/s, which means it takes only two seconds to
>>> hash the UTXO set. And this can be improved further (GPUs can do 2-3 GB/s).
>>> A small sacrifice for the added ease of initial syncing, in my opinion.
>>> >>
>>> >> /Rune
>>> >> _______________________________________________
>>> >> bitcoin-dev mailing list
>>> >> bitcoin-dev at lists.linuxfoundation.org
>>> >> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>> >
>>> >
>>> > _______________________________________________
>>> > bitcoin-dev mailing list
>>> > bitcoin-dev at lists.linuxfoundation.org
>>> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>>
>>> _______________________________________________
>>> bitcoin-dev mailing list
>>> bitcoin-dev at lists.linuxfoundation.org
>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>>
>>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150919/91e1268c/attachment-0001.html>

From hearn at vinumeris.com  Fri Sep 18 22:33:33 2015
From: hearn at vinumeris.com (Mike Hearn)
Date: Fri, 18 Sep 2015 23:33:33 +0100
Subject: [bitcoin-dev] Scaling Bitcoin conference micro-report
In-Reply-To: <55FC6EBF.9090504@mattcorallo.com>
References: <CADm_WcaLKqhR=WcJ5B52Q9SAAa+AdZY6Kz5OCQVUc_RQm6e9gg@mail.gmail.com>
	<55F9E47D.50507@mattcorallo.com>
	<CAOG=w-t2ZYQbx8+mG5FX8vzgAC_tb8A6KMABmudHQbrquEqX-Q@mail.gmail.com>
	<55FC6EBF.9090504@mattcorallo.com>
Message-ID: <CA+w+GKSK42DjSKqpWj9=s=catGox-n5+AWjh=Mg5=nRpxsf4HQ@mail.gmail.com>

Any change that results in this happening all over again in a few years
does not have consensus.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150918/04e0e9b6/attachment.html>

From rusty at rustcorp.com.au  Thu Sep 17 22:00:27 2015
From: rusty at rustcorp.com.au (Rusty Russell)
Date: Fri, 18 Sep 2015 07:30:27 +0930
Subject: [bitcoin-dev] [BIP Proposal] Version bits with timeout and
	delay.
In-Reply-To: <CABm2gDppFsTbh3JtdJkAkV_GzKFYAOLiEmtQPCgS9O6b7eWFuw@mail.gmail.com>
References: <87mvwqb132.fsf@rustcorp.com.au>
	<CAE-z3OWLteNyBWuYSkYLZNteOGjDch_fViOV2kpWCaZkXsbu4w@mail.gmail.com>
	<87r3lyjewl.fsf@rustcorp.com.au>
	<CABm2gDqh=Dv2Ygctg+jEt61N_nJDRBMqdZypSPtmfM2QrY4AYQ@mail.gmail.com>
	<CAE-z3OXATJ6HGKqU=vxc8k-yCMAMwXiWQJxvO3D_O256_ZODtw@mail.gmail.com>
	<CABm2gDppFsTbh3JtdJkAkV_GzKFYAOLiEmtQPCgS9O6b7eWFuw@mail.gmail.com>
Message-ID: <87eghwiu4k.fsf@rustcorp.com.au>

Jorge Tim?n via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> writes:
> I agree on using height vs time. Rusty, what do you mean by being easier
> for bip writers? How is writing "block x" any harder than writing "date y".

Three years from drafting is reasonable.  How many blocks is that?  Hmm,
better make it 6 years of blocks just in case we have a hash race.

Deployment speed is measured in months, not blocks.  It's hard enough to
guess without adding another variable.

Cheers,
Rusty.

From rusty at rustcorp.com.au  Thu Sep 17 21:57:51 2015
From: rusty at rustcorp.com.au (Rusty Russell)
Date: Fri, 18 Sep 2015 07:27:51 +0930
Subject: [bitcoin-dev] [BIP Proposal] Version bits with timeout and
	delay.
In-Reply-To: <CAE-z3OWu7HgHh=8nAZMfJaekL03HHXvHrkRBho=aBAoRtHR9Eg@mail.gmail.com>
References: <87mvwqb132.fsf@rustcorp.com.au>
	<CAE-z3OWLteNyBWuYSkYLZNteOGjDch_fViOV2kpWCaZkXsbu4w@mail.gmail.com>
	<87r3lyjewl.fsf@rustcorp.com.au>
	<CABm2gDqh=Dv2Ygctg+jEt61N_nJDRBMqdZypSPtmfM2QrY4AYQ@mail.gmail.com>
	<CAE-z3OXATJ6HGKqU=vxc8k-yCMAMwXiWQJxvO3D_O256_ZODtw@mail.gmail.com>
	<CABm2gDppFsTbh3JtdJkAkV_GzKFYAOLiEmtQPCgS9O6b7eWFuw@mail.gmail.com>
	<CAE-z3OXbUhsyzd=8hxzFAST9rEQyTg9whn+CMh92S0FMdLH4ug@mail.gmail.com>
	<CABm2gDo4f6bpJeobwRyoukKw9t=ApuRtHMYWpWFXjv9=K7aFyA@mail.gmail.com>
	<CAE-z3OUyNpmG5uhSCExf39zmmB-b9xDrn+gkp3UFeg7M3G8E5g@mail.gmail.com>
	<CABm2gDphLRQ6huhxvcx1YvbsmaBHA_sk6MEZF+hgdxoC472P+w@mail.gmail.com>
	<CDB1F26E-FE26-44F3-9A86-CDAE33A51B8B@gmail.com>
	<CAE-z3OWu7HgHh=8nAZMfJaekL03HHXvHrkRBho=aBAoRtHR9Eg@mail.gmail.com>
Message-ID: <87h9msiu8w.fsf@rustcorp.com.au>

Tier Nolan via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org>
writes:
> The advantage of enforcing the rule when 75% is reached (but only for
> blocks with the bit set) is that miners get early notification that they
> have implemented the rule incorrectly.    They might produce blocks that
> they think are fine, but which aren't.

Indeed.  There are three believable failure possibilties:

1) You don't implement the rule at all, and don't set the bit.
2) You implement it and set bit, but think some valid block is invalid.
3) You implement it and set bit, but think some invalid block is valid.

#1 is by far the most common, and the proposal is designed so they
*always* get ~2 weeks warning before those drop to SPV security.

Assuming the mining majority isn't buggy (otherwise, it's arguably not a
bug but a feature!) #2 is the worst case: some miners fork off and don't
rejoin.

So there is a slight advantage in doing this early: those buggy miners
no longer contribute to the 95% threshold.  But that's outweighed IMHO
by:

1) We would need another delay at 75% so #1 nodes can upgrade.

2) The new feature won't be exercised much before impliciation, since
   it's useless before then, so it might not find bugs anyway.

In conclusion, I'm not convinced by the extra complexity.

Cheers,
Rusty.

From rusty at rustcorp.com.au  Fri Sep 18 01:21:19 2015
From: rusty at rustcorp.com.au (Rusty Russell)
Date: Fri, 18 Sep 2015 10:51:19 +0930
Subject: [bitcoin-dev] [BIP-draft] CHECKSEQUENCEVERIFY - An opcode for
	relative locktime
In-Reply-To: <CAOG=w-u2b9BTNyAxdzEnOxazr1Gc_Yrf5CxCfrjeJi39NV=cgQ@mail.gmail.com>
References: <CADJgMztgE_GkbrsP7zCEHNPA3P6T=aSFfhkcN-q=gVhWP0vKXg@mail.gmail.com>
	<CADJgMzv8G3EqLBwEYRHJZ+fO_Jwzy0koi2pJ_iNRkXmoVarGcg@mail.gmail.com>
	<CABm2gDod9z6ksgaCv86qFCyKLTQSL3+oNns+__5H77hVhs05DQ@mail.gmail.com>
	<CAOG=w-sbOcaogkic2i4A5eZnBQ79LUibsGy0dyKyvQg53ktY1Q@mail.gmail.com>
	<55DA6470.9040301@thinlink.com>
	<CAAS2fgQKQpHu-nC1uSrigDx2JLUt64p-LqidVmiuULDE0MJCFQ@mail.gmail.com>
	<CABm2gDqW7OGuyZ1BTTeeivDf9wFVsAK9AaGYm8XWwLb2O2Lb+g@mail.gmail.com>
	<CAOG=w-ubk3nPfxy25Hd6kPeehf7vnYD5chksLWU5wU2t=jL5TA@mail.gmail.com>
	<CAOG=w-to4Vrx4ykKJTy5EAyN4GZd6Q=G5FzqZH-5J3Thz_VNpQ@mail.gmail.com>
	<CAOG=w-tuFtX2t+0FVfkoObw_a9-7j4LwX87YJU1n7adYu=DMdQ@mail.gmail.com>
	<CADJgMzsPrg7VhTQC8aCvcQ3yAN8rtt+Qv_yfrCKMqOALpGPVyg@mail.gmail.com>
	<4E3B7469-1018-4649-8DF1-6597F82774F1@gmail.com>
	<CAOG=w-u2b9BTNyAxdzEnOxazr1Gc_Yrf5CxCfrjeJi39NV=cgQ@mail.gmail.com>
Message-ID: <876138ikts.fsf@rustcorp.com.au>

Mark Friedenbach via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org>
writes:
> Eric, that would be, I think, my sequencenumbers2 branch in which nSequence
> is an explicit relative lock-time field (unless the most significant bit is
> set). That has absolutely clear semantics. You should comment on #6312
> where this is being discussed.

Indeed.  Simplicity wins.  We have half the number space left for the
future, too.  If people are paranoid, reserve the top *two* bits.

Thanks,
Rusty.

From rusty at rustcorp.com.au  Fri Sep 18 01:19:05 2015
From: rusty at rustcorp.com.au (Rusty Russell)
Date: Fri, 18 Sep 2015 10:49:05 +0930
Subject: [bitcoin-dev] [BIP Proposal] Version bits with timeout and
	delay.
In-Reply-To: <CAE-z3OW6BKHfx=wS9AYqb4+Ems6xM+SDqBKgGbNkXfPwuPqn8A@mail.gmail.com>
References: <87mvwqb132.fsf@rustcorp.com.au>
	<CAE-z3OWLteNyBWuYSkYLZNteOGjDch_fViOV2kpWCaZkXsbu4w@mail.gmail.com>
	<87r3lyjewl.fsf@rustcorp.com.au>
	<CAE-z3OW6BKHfx=wS9AYqb4+Ems6xM+SDqBKgGbNkXfPwuPqn8A@mail.gmail.com>
Message-ID: <878u84ikxi.fsf@rustcorp.com.au>

Tier Nolan via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> writes:
> On Wed, Sep 16, 2015 at 9:19 PM, Rusty Russell <rusty at rustcorp.com.au>
> wrote:
>> You need a timeout: an ancient (non-mining, thus undetectable) node
>> should never fork itself off the network because someone reused a failed
>> BIP bit.
>>
>
> I meant if the 2nd bit was part of the BIP.  One of the 2 bits is "FOR" and
> the other is "AGAINST".  If against hits 25%, then it is deemed a failure.
>
> The 2nd bit wouldn't be used normally.  This means that proposals can be
> killed quickly if they are obviously going to fail.

This could be added if we approach one failed soft fork every 5 weeks,
I guess (or it could be just for specific soft forks).

Cheers,
Rusty.

From dscotese at litmocracy.com  Fri Sep 18 23:29:42 2015
From: dscotese at litmocracy.com (Dave Scotese)
Date: Fri, 18 Sep 2015 16:29:42 -0700
Subject: [bitcoin-dev] Weekly development meetings on IRC
In-Reply-To: <201509182150.06275.luke@dashjr.org>
References: <20150918010709.GB5251@amethyst.visucore.com>
	<55FC70A5.9080603@mattcorallo.com>
	<CADJgMzsuBrXT1qOAScu+fv_A7Du1XrFoix8nSO14qXj2YD4KtQ@mail.gmail.com>
	<201509182150.06275.luke@dashjr.org>
Message-ID: <CAGLBAhcT0GkvKA0_d95=3XARng5aL2DQ-HFwtFWLvEJbry+VzA@mail.gmail.com>

I am in a timezone that uses DST (currently PDT), but I would like us to
use a timezone that does NOT use DST.  It will be nice to have something
that reflects the seasonal patterns like my own body does.  I hate the time
change in both ways.

On Fri, Sep 18, 2015 at 2:50 PM, Luke Dashjr via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> On Friday, September 18, 2015 8:24:50 PM Btc Drak via bitcoin-dev wrote:
> > Google calendar is localised, so it doesn't matter. The problem with
> > quoting UTC anyway it the meeting times are going to change for those
> that
> > observe DST. It would be much better to quote an actual timezone of an
> > actual area so it will remain constant, like 1700 CEST, or 0900AM PDT for
> > example. Otherwise when the clocks change, what was a convenient meeting
> > time will become inconvenient for some.
>
> Not everyone does crazy clock-changing. Using such a time system for
> scheduling seems to inconvenience the wrong position. (although perhaps
> arguably better since most people probably use DST) :p
>
> (Aside, if Google Calendar can't support standard UTC, that sounds like an
> argument against using Google Calendar...)
>
> > Urgh... Can we hardfork time? It's clearly in need of an upgrade...
>
> Tonal time works nice any consistently. :D
>
> Luke
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>



-- 
I like to provide some work at no charge to prove my value. Do you need a
techie?
I own Litmocracy <http://www.litmocracy.com> and Meme Racing
<http://www.memeracing.net> (in alpha).
I'm the webmaster for The Voluntaryist <http://www.voluntaryist.com> which
now accepts Bitcoin.
I also code for The Dollar Vigilante <http://dollarvigilante.com/>.
"He ought to find it more profitable to play by the rules" - Satoshi
Nakamoto
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150918/3727a8c0/attachment.html>

From pete at petertodd.org  Sat Sep 19 01:47:10 2015
From: pete at petertodd.org (Peter Todd)
Date: Fri, 18 Sep 2015 18:47:10 -0700
Subject: [bitcoin-dev] Scaling Bitcoin conference micro-report
In-Reply-To: <55FC6EBF.9090504@mattcorallo.com>
References: <CADm_WcaLKqhR=WcJ5B52Q9SAAa+AdZY6Kz5OCQVUc_RQm6e9gg@mail.gmail.com>
	<55F9E47D.50507@mattcorallo.com>
	<CAOG=w-t2ZYQbx8+mG5FX8vzgAC_tb8A6KMABmudHQbrquEqX-Q@mail.gmail.com>
	<55FC6EBF.9090504@mattcorallo.com>
Message-ID: <20150919014710.GD22598@muck>

On Fri, Sep 18, 2015 at 08:06:23PM +0000, Matt Corallo via bitcoin-dev wrote:
> I did not intend to imply that there was agreement on a desire to
> schedule a second hardfork. My wording may have been a bit too loose.
> Instead, I believe there was much agreement that doing a short-term
> hardfork now, with many agreeing that a second would hopefully be
> entirely unnecessary/impossible, while others thought that a second
> would be necessary and would have to happen. While this may set up a
> similar controversy again in several years, I think everyone agreed that
> we cannot predict the future and I, personally, think none of us should
> be committing to a viewpoint for what should be done at that time.
> 
> Personally, I think it is also critical that there be no messaging that
> people should rely on or assume there will be a future increase after a
> short-term bump (which I also do not believe people should be relying on
> now).

Agreed!

We still seem to be in a possition where there is fundemental
disagreements about the threat model we should design for, and
ultimately, what we want Bitcoin to be. For instance, yesterday I was on
a blocksize panel, and Valery Vavilov - CEO of the ASIC manufacturer and
miner BitFury - stated that he thought we needed to setup a system of
large, high-bandwidth, high-powered, Bitcoin nodes at institutions such
as universities and large companies to allow the Bitcoin blocksize to be
raised multiple orders of magnitude. (e.g. hundreds of megabytes, or
even multiple gigabytes) In discussion with him he seemed to expect that
we'd have just a few hundred Bitcoin nodes at most, with SPV being the
standard way of using Bitcoin.

While to many of us that sounds crazy, if you're threat model assumes
Bitcoin is a legal/regulated service provided by a highly trusted mining
community it's a reasonable design. Mike Hearn recently posted his
threat model, which specifically argues we should assume governments are
not a threat. (and Hearn has previously argued that the design of
Bitcoin assumes a majority of miners are "honest" rather than merely
economically rational) Similarly Gavin Andresen was also on that panel,
and stated that he believes the idea that Bitcoin has O(n^2) scaling is
wrong, implying he doesn't think a large % of the Bitcoin user base will
continue to run fully validating nodes. (note that there are other
possibilities he could be referring to here, although again with
different security assumptions and/or unproven tech)

The main objection I raised during the committer/contributor discussions
to the idea of a "short term bump" was messaging. I think it's fair to
say that nearly all the support for a small blocksize increase stemmed
from the (perceived) need to give Bitcoin users and Bitcoin
infrastructure some more time to adapt to a world where the blocksize
does not grow sufficiently to meet demand, resulting in higher
transaction fees and the practical requirement to use the Bitcoin
blockchain more efficiently. (or of course the development of genuinely
scalable blockchain technology) With that in mind, it's important that
we properly communicate that fact, or as Hearn replied, we'll run into
the same problem all over again in a few years, but with even less
safety margin in the system.

My second objection was one of science. Any bump should be accompanied
by some kind of model describing scientifically what we were trying to
achieve and where the numbers chosen came from. For instance, Pieter
Wuille's BIP103 proposes 17% per year based on a bandwidth growth model,
the assumption that bandwidth is the bottleneck we're trying to keep
constant, and the design criteria to keep centralization roughly
constant. (all else being equal) Sure there's lots of potential flaws in
that proposal, but the _message_ that we're basing it on science rather
than political "horse-trading" is very important.

As for the disagreements, it's quite likely that we can't come to
genuine consensus in the fact of those fundemental disagreements about
what Bitcoin should be. I don't have any good way to resolve that, and
I'm open to suggestions!

-- 
'peter'[:-1]@petertodd.org
000000000000000000da942d1651d405c157821a3fa55bd0c11cd9b39321e574
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 650 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150918/d4413b8f/attachment-0001.sig>

From luke at dashjr.org  Sat Sep 19 02:01:00 2015
From: luke at dashjr.org (Luke Dashjr)
Date: Sat, 19 Sep 2015 02:01:00 +0000
Subject: [bitcoin-dev] Fill-or-kill transaction
In-Reply-To: <CABm2gDp_afyqskEV8QmO43=-6R_2OJm36GVQxcQO_3ao2jC1gw@mail.gmail.com>
References: <a50b82c156c805a284386d80a42cc926@xbt.hk>
	<CAOG=w-vGqsAcw5vdY8SaGVe4Q6XX1J=GCsZftWgjES_N_5c2pA@mail.gmail.com>
	<CABm2gDp_afyqskEV8QmO43=-6R_2OJm36GVQxcQO_3ao2jC1gw@mail.gmail.com>
Message-ID: <201509190201.01455.luke@dashjr.org>

On Thursday, September 17, 2015 7:14:38 PM Jorge Tim?n via bitcoin-dev wrote:
> As Mark points out this can be made safe by requiring that all the outputs
> of a transaction that can expire have op_maturity/csv/rcltv of 100. That
> makes them as reorg-safe as coinbase transactions.

Not quite as safe. Remember that mined bitcoins have not only a 100-block 
maturity requirement, but *also* are expensive to generate.
Mere OP_CHECKMATURITYVERIFY (aka rcltv) has no cost to use...

Luke

From justus at openbitcoinprivacyproject.org  Sat Sep 19 02:30:13 2015
From: justus at openbitcoinprivacyproject.org (Justus Ranvier)
Date: Fri, 18 Sep 2015 21:30:13 -0500
Subject: [bitcoin-dev] Hash of UTXO set as consensus-critical
In-Reply-To: <A16FDC0B-877F-47F1-A631-77F46251BB07@gmail.com>
References: <5D55F6EC-801B-4607-882F-B76CF57298B1@gmail.com>
	<55FC6951.9010704@gmail.com>
	<A16FDC0B-877F-47F1-A631-77F46251BB07@gmail.com>
Message-ID: <55FCC8B5.9070906@openbitcoinprivacyproject.org>

On 18/09/15 15:17, Rune Kj?r Svendsen via bitcoin-dev wrote:
> Bitcoin does not function if the majority of mining power is dishonest. There is no way around that. It?s how proof-of-work functions.


None of those statements are true.

If a majority of Bitcoin miners are mining invalid blocks, then they
aren't Bitcoin miners any more and are no longer relevant to the Bitcoin
consensus.

There does exist a problem that light clients aren't always able to tell
the difference between chains that are valid and chains that are not
valid, but it's is possible to create simple proofs that would do so:

https://gist.github.com/justusranvier/451616fa4697b5f25f60


If those changes would be implemented, then any node that knew a chain
was invalid could produce a compact proof that anyone else in the
network could verify, regardless of how much proof of work was used to
create the invalid chain.

Committed UTXO sets would need safe to rely upon if a similar set of
proofs that a particular set was invalid existed.

-- 
Justus Ranvier
Open Bitcoin Privacy Project
http://www.openbitcoinprivacyproject.org/
justus at openbitcoinprivacyproject.org
E7AD 8215 8497 3673 6D9E 61C4 2A5F DA70 EAD9 E623
-------------- next part --------------
A non-text attachment was scrubbed...
Name: 0xEAD9E623.asc
Type: application/pgp-keys
Size: 18442 bytes
Desc: not available
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150918/69ac0ec4/attachment.bin>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 801 bytes
Desc: OpenPGP digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150918/69ac0ec4/attachment.sig>

From jtimon at jtimon.cc  Sat Sep 19 05:04:45 2015
From: jtimon at jtimon.cc (=?UTF-8?B?Sm9yZ2UgVGltw7Nu?=)
Date: Sat, 19 Sep 2015 07:04:45 +0200
Subject: [bitcoin-dev] [BIP Proposal] Version bits with timeout and
	delay.
In-Reply-To: <87eghwiu4k.fsf@rustcorp.com.au>
References: <87mvwqb132.fsf@rustcorp.com.au>
	<CAE-z3OWLteNyBWuYSkYLZNteOGjDch_fViOV2kpWCaZkXsbu4w@mail.gmail.com>
	<87r3lyjewl.fsf@rustcorp.com.au>
	<CABm2gDqh=Dv2Ygctg+jEt61N_nJDRBMqdZypSPtmfM2QrY4AYQ@mail.gmail.com>
	<CAE-z3OXATJ6HGKqU=vxc8k-yCMAMwXiWQJxvO3D_O256_ZODtw@mail.gmail.com>
	<CABm2gDppFsTbh3JtdJkAkV_GzKFYAOLiEmtQPCgS9O6b7eWFuw@mail.gmail.com>
	<87eghwiu4k.fsf@rustcorp.com.au>
Message-ID: <CABm2gDrLGHHn96JVpUX3kHcW0qx2fieAaYydb5EC_SGh=2hEFQ@mail.gmail.com>

I disagree with the importance of this concern and old soft/hardforks will
replace this activation mechanism with height, so that's an argument in
favor of using the height from the start. This is "being discussed" in a
thread branched from bip99's discussion.
Anyway, is this proposing to use the block time or the median block time?
For some hardforks/softforks the block time complicates the implementation
(ie in acceptToMemoryPool) as discussed in the mentioned thread.
On Sep 19, 2015 1:24 AM, "Rusty Russell" <rusty at rustcorp.com.au> wrote:

> Jorge Tim?n via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org>
> writes:
> > I agree on using height vs time. Rusty, what do you mean by being easier
> > for bip writers? How is writing "block x" any harder than writing "date
> y".
>
> Three years from drafting is reasonable.  How many blocks is that?  Hmm,
> better make it 6 years of blocks just in case we have a hash race.
>
> Deployment speed is measured in months, not blocks.  It's hard enough to
> guess without adding another variable.
>
> Cheers,
> Rusty.
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150919/f7220d48/attachment-0001.html>

From jtimon at jtimon.cc  Sat Sep 19 05:09:23 2015
From: jtimon at jtimon.cc (=?UTF-8?B?Sm9yZ2UgVGltw7Nu?=)
Date: Sat, 19 Sep 2015 07:09:23 +0200
Subject: [bitcoin-dev] Fill-or-kill transaction
In-Reply-To: <201509190201.01455.luke@dashjr.org>
References: <a50b82c156c805a284386d80a42cc926@xbt.hk>
	<CAOG=w-vGqsAcw5vdY8SaGVe4Q6XX1J=GCsZftWgjES_N_5c2pA@mail.gmail.com>
	<CABm2gDp_afyqskEV8QmO43=-6R_2OJm36GVQxcQO_3ao2jC1gw@mail.gmail.com>
	<201509190201.01455.luke@dashjr.org>
Message-ID: <CABm2gDo0XBXL7SNwZmXJJKQO6-MmCtmwcFJat-bkp6_8Ue4Y3A@mail.gmail.com>

How them being expensive to generate make them less likely to be reorged?
Would an op_return output used as a nonce to make the hash of the
transaction contain some proof of work make the non-coinbase expirable
transaction more secure against reorgs?
I'm afraid your point is irrelevant.
On Sep 19, 2015 4:01 AM, "Luke Dashjr" <luke at dashjr.org> wrote:

> On Thursday, September 17, 2015 7:14:38 PM Jorge Tim?n via bitcoin-dev
> wrote:
> > As Mark points out this can be made safe by requiring that all the
> outputs
> > of a transaction that can expire have op_maturity/csv/rcltv of 100. That
> > makes them as reorg-safe as coinbase transactions.
>
> Not quite as safe. Remember that mined bitcoins have not only a 100-block
> maturity requirement, but *also* are expensive to generate.
> Mere OP_CHECKMATURITYVERIFY (aka rcltv) has no cost to use...
>
> Luke
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150919/e2484b34/attachment.html>

From nxtchg at hush.com  Sat Sep 19 06:06:39 2015
From: nxtchg at hush.com (NxtChg)
Date: Sat, 19 Sep 2015 09:06:39 +0300
Subject: [bitcoin-dev] Scaling Bitcoin conference micro-report
In-Reply-To: <20150919014710.GD22598@muck>
References: <CADm_WcaLKqhR=WcJ5B52Q9SAAa+AdZY6Kz5OCQVUc_RQm6e9gg@mail.gmail.com>
	<55F9E47D.50507@mattcorallo.com>
	<CAOG=w-t2ZYQbx8+mG5FX8vzgAC_tb8A6KMABmudHQbrquEqX-Q@mail.gmail.com>
	<55FC6EBF.9090504@mattcorallo.com> <20150919014710.GD22598@muck> 
Message-ID: <20150919060639.A775A404B9@smtp.hushmail.com>


>While to many of us that sounds crazy, if you're threat model assumes
>Bitcoin is a legal/regulated service provided by a highly trusted mining
>community it's a reasonable design.

There is a large, grey area all the way to "legal/regulated service provided by a highly trusted mining community".

Painting the worst looking picture is either a defect in thinking or intentional FUD.


> Mike Hearn recently posted his threat model, which specifically argues we
> should assume governments are not a threat.

There are two ways to fight governments:

1. either you become too big to close, so political repercussions become unacceptable

2. or you become too tiny to hunt, in which case you are much better off with a specialized alt-coin, designed specifically for that purpose.


From eric at voskuil.org  Sat Sep 19 06:56:55 2015
From: eric at voskuil.org (Eric Voskuil)
Date: Fri, 18 Sep 2015 23:56:55 -0700
Subject: [bitcoin-dev] Scaling Bitcoin conference micro-report
In-Reply-To: <20150919060639.A775A404B9@smtp.hushmail.com>
References: <CADm_WcaLKqhR=WcJ5B52Q9SAAa+AdZY6Kz5OCQVUc_RQm6e9gg@mail.gmail.com>	<55F9E47D.50507@mattcorallo.com>	<CAOG=w-t2ZYQbx8+mG5FX8vzgAC_tb8A6KMABmudHQbrquEqX-Q@mail.gmail.com>	<55FC6EBF.9090504@mattcorallo.com>
	<20150919014710.GD22598@muck>
	<20150919060639.A775A404B9@smtp.hushmail.com>
Message-ID: <55FD0737.1080008@voskuil.org>

On 09/18/2015 11:06 PM, NxtChg via bitcoin-dev wrote:
>> While to many of us that sounds crazy, if you're threat model assumes
>> Bitcoin is a legal/regulated service provided by a highly trusted
>> mining community it's a reasonable design.
>
> There is a large, grey area all the way to "legal/regulated service
> provided by a highly trusted mining community". Painting the worst
> looking picture is either a defect in thinking or intentional FUD.

The state is the threat in the Bitcoin threat model. You comments below
acknowledge it. The assumption of hostile state actors is the only
rational starting point. That which is regulated (and regulatable) in
Bitcoin is the attack surface.

While of course there are various degrees of weakness, the reference to
"legal/regulated service provided by a highly trusted mining" as the
threat is by no means irrational or misdirecting. This threat represents
the difference between Bitcoin and Fedcoin.

I found Mike's threat model downright disturbing. All benefits of
Bitcoin arise from its resistance to this threat. Anyone investor in
this space should be paying attention... the apparent benefits of
Bitcoin will vaporize with regulation.

>> Mike Hearn recently posted his threat model, which specifically
>> argues we should assume governments are not a threat.
>
> There are two ways to fight governments:
>
> 1. either you become too big to close, so political repercussions
> become unacceptable

This is extremely naive. At a minimum, getting popular/successful (and
regulated) is the formula for regulatory capture.

> 2. or you become too tiny to hunt, in which case you are much better
> off with a specialized alt-coin, designed specifically for that
> purpose.

I assume you are referring some marginal and largely irrelevant effort.

False dichotomy.

[cross-posted to libbitcoin]

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 473 bytes
Desc: OpenPGP digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150918/ca1214fd/attachment.sig>

From nxtchg at hush.com  Sat Sep 19 07:27:14 2015
From: nxtchg at hush.com (NxtChg)
Date: Sat, 19 Sep 2015 10:27:14 +0300
Subject: [bitcoin-dev] Scaling Bitcoin conference micro-report
In-Reply-To: <55FD0737.1080008@voskuil.org>
References: <CADm_WcaLKqhR=WcJ5B52Q9SAAa+AdZY6Kz5OCQVUc_RQm6e9gg@mail.gmail.com>
	<55F9E47D.50507@mattcorallo.com>
	<CAOG=w-t2ZYQbx8+mG5FX8vzgAC_tb8A6KMABmudHQbrquEqX-Q@mail.gmail.com>
	<55FC6EBF.9090504@mattcorallo.com> <20150919014710.GD22598@muck>
	<20150919060639.A775A404B9@smtp.hushmail.com>
	<55FD0737.1080008@voskuil.org> 
Message-ID: <20150919072714.D3349404B9@smtp.hushmail.com>


>The state is the threat in the Bitcoin threat model. You comments below
>acknowledge it. The assumption of hostile state actors is the only
>rational starting point. That which is regulated (and regulatable) 
>in Bitcoin is the attack surface.

I think, you just proved my point. If your goal is to shrink the attack surface as much as possible,
you are better off being a marginalized alt-coin.


>This threat represents the difference between Bitcoin and Fedcoin.

_This_ is the false dichotomy. There's a range of coins between DarkCoin and FedCoin.


>This is extremely naive. At a minimum, getting popular/successful (and regulated) is the formula for regulatory capture.

Let me give you an example.

Suppose you are a regular guy, say Peter Todd, and you are faced with 10 policemen in anti-riot gear.

You can fight them in two ways:

1. become stronger, so you could provide an adequate response, either by turning into Hulk or by getting another 30-50 Peter Todds.

2. lose some fat, learn a few parkour tricks and move around mostly by night behind dumpsters.

The worst you can fare is just being Peter Todd with a backpack and an expensive camera on his neck, wandering around the city in daylight.


Your vision of Bitcoin is the most vulnerable to government attacks.


From eric at voskuil.org  Sat Sep 19 07:39:14 2015
From: eric at voskuil.org (Eric Voskuil)
Date: Sat, 19 Sep 2015 00:39:14 -0700
Subject: [bitcoin-dev] Scaling Bitcoin conference micro-report
In-Reply-To: <20150919072714.D3349404B9@smtp.hushmail.com>
References: <CADm_WcaLKqhR=WcJ5B52Q9SAAa+AdZY6Kz5OCQVUc_RQm6e9gg@mail.gmail.com>
	<55F9E47D.50507@mattcorallo.com>
	<CAOG=w-t2ZYQbx8+mG5FX8vzgAC_tb8A6KMABmudHQbrquEqX-Q@mail.gmail.com>
	<55FC6EBF.9090504@mattcorallo.com> <20150919014710.GD22598@muck>
	<20150919060639.A775A404B9@smtp.hushmail.com>
	<55FD0737.1080008@voskuil.org>
	<20150919072714.D3349404B9@smtp.hushmail.com>
Message-ID: <55FD1122.5030107@voskuil.org>

On 09/19/2015 12:27 AM, NxtChg wrote:
>> This is extremely naive. At a minimum, getting popular/successful (and regulated) is the formula for regulatory capture.
> 
> Let me give you an example.
> 
> Suppose you are a regular guy, say Peter Todd, and you are faced with 10 policemen in anti-riot gear.
> 
> You can fight them in two ways:
> 
> 1. become stronger, so you could provide an adequate response, either by turning into Hulk or by getting another 30-50 Peter Todds.

Your vision of censorship resistance is to become such a strong central
authority that you can resist it in direct physical confrontation. If
you succeed at this, you are the threat.

> 2. lose some fat, learn a few parkour tricks and move around mostly by night behind dumpsters.

And your alternative is to lurk in dark corners.


The inability to see another option is the inability to understand what
Satoshi created.

e

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 473 bytes
Desc: OpenPGP digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150919/5262f3ce/attachment.sig>

From nxtchg at hush.com  Sat Sep 19 07:57:58 2015
From: nxtchg at hush.com (NxtChg)
Date: Sat, 19 Sep 2015 10:57:58 +0300
Subject: [bitcoin-dev] Scaling Bitcoin conference micro-report
In-Reply-To: <55FD1122.5030107@voskuil.org>
References: <CADm_WcaLKqhR=WcJ5B52Q9SAAa+AdZY6Kz5OCQVUc_RQm6e9gg@mail.gmail.com>
	<55F9E47D.50507@mattcorallo.com>
	<CAOG=w-t2ZYQbx8+mG5FX8vzgAC_tb8A6KMABmudHQbrquEqX-Q@mail.gmail.com>
	<55FC6EBF.9090504@mattcorallo.com> <20150919014710.GD22598@muck>
	<20150919060639.A775A404B9@smtp.hushmail.com>
	<55FD0737.1080008@voskuil.org>
	<20150919072714.D3349404B9@smtp.hushmail.com>
	<55FD1122.5030107@voskuil.org> 
Message-ID: <20150919075758.820CC404B9@smtp.hushmail.com>


>Your vision of censorship resistance is to become such a strong 
>central authority that you can resist it in direct physical confrontation. 
>If you succeed at this, you are the threat.

My vision is a strong _decentralized_ system, which is:

  a) too important to close,

  b) able to provide adequate response to governments, like EFF or Google do.

Having a substantial attack surface and, at the same time, not having significant power is the worst fighting strategy.

It's the "Peter Todd vs 10 cops" scenario.


>The inability to see another option is the inability to understand what Satoshi created.

So your closing remark is basically, "you're too stupid to understand"?

I'll take it.


From eric at voskuil.org  Sat Sep 19 08:52:43 2015
From: eric at voskuil.org (Eric Voskuil)
Date: Sat, 19 Sep 2015 01:52:43 -0700
Subject: [bitcoin-dev] Scaling Bitcoin conference micro-report
In-Reply-To: <20150919075758.820CC404B9@smtp.hushmail.com>
References: <CADm_WcaLKqhR=WcJ5B52Q9SAAa+AdZY6Kz5OCQVUc_RQm6e9gg@mail.gmail.com>
	<55F9E47D.50507@mattcorallo.com>
	<CAOG=w-t2ZYQbx8+mG5FX8vzgAC_tb8A6KMABmudHQbrquEqX-Q@mail.gmail.com>
	<55FC6EBF.9090504@mattcorallo.com> <20150919014710.GD22598@muck>
	<20150919060639.A775A404B9@smtp.hushmail.com>
	<55FD0737.1080008@voskuil.org>
	<20150919072714.D3349404B9@smtp.hushmail.com>
	<55FD1122.5030107@voskuil.org>
	<20150919075758.820CC404B9@smtp.hushmail.com>
Message-ID: <55FD225B.1050402@voskuil.org>

On 09/19/2015 12:57 AM, NxtChg wrote:>
>> Your vision of censorship resistance is to become such a strong
>> central authority that you can resist it in direct physical
>> confrontation. If you succeed at this, you are the threat.
>
> My vision is a strong _decentralized_ system, which is:
>
>   a) too important to close,

Your argument is that the state is not a threat to a system designed to
deprive the state of seigniorage, because the state will see that system
as too important?

Bitcoin cannot be both decentralized and reliant on being, "too
important to close". If it can be closed there is insufficient
decentralization.

I was concerned that this was going off topic for a technical forum.
However this is the central technical issue of Bitcoin. If one does not
understand the threat then one cannot model it or design systems to
defend against it. On the other hand, this is unfortunately not new
territory, so I'll leave it at this, which is also not news to most of us...


>   b) able to provide adequate response to governments, like EFF or
Google do.

"The National Security Agency paid millions of dollars to cover the
costs of major internet companies involved in the Prism surveillance
program after a court ruled that some of the agency's activities were
unconstitutional, according to top-secret material passed to the Guardian.

The technology companies, which the NSA says includes Google..."

http://www.theguardian.com/world/2013/aug/23/nsa-prism-costs-tech-companies-paid

e

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 473 bytes
Desc: OpenPGP digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150919/9fb0d870/attachment.sig>

From nxtchg at hush.com  Sat Sep 19 13:32:55 2015
From: nxtchg at hush.com (NxtChg)
Date: Sat, 19 Sep 2015 16:32:55 +0300
Subject: [bitcoin-dev] Scaling Bitcoin conference micro-report
In-Reply-To: <55FD225B.1050402@voskuil.org>
References: <CADm_WcaLKqhR=WcJ5B52Q9SAAa+AdZY6Kz5OCQVUc_RQm6e9gg@mail.gmail.com>
	<55F9E47D.50507@mattcorallo.com>
	<CAOG=w-t2ZYQbx8+mG5FX8vzgAC_tb8A6KMABmudHQbrquEqX-Q@mail.gmail.com>
	<55FC6EBF.9090504@mattcorallo.com> <20150919014710.GD22598@muck>
	<20150919060639.A775A404B9@smtp.hushmail.com>
	<55FD0737.1080008@voskuil.org>
	<20150919072714.D3349404B9@smtp.hushmail.com>
	<55FD1122.5030107@voskuil.org>
	<20150919075758.820CC404B9@smtp.hushmail.com>
	<55FD225B.1050402@voskuil.org> 
Message-ID: <20150919133256.085D2404B9@smtp.hushmail.com>

>Your argument is that the state is not a threat to a system 
>designed to deprive the state of seigniorage, because the state will see that 
>system as too important?

Well, if you look at governments from the point of youtube illuminati videos, then, yeah, I guess my position would seem a bit off.

But in that case no threat model or small blocks are gonna save you. As history shows, even if you go as deep as Dread Pirate Roberts, you will eventually be caught and prosecuted.

So start building SilkRoadCoin, which only works via TOR, has ASIC-resistant algorithm and 10 Kb blocks. Then you might have a tiny chance.

Most of us subscribed to a global "electronic cash system" and we intend to continue using Bitcoin for that.


From tomh at thinlink.com  Sat Sep 19 15:31:38 2015
From: tomh at thinlink.com (Tom Harding)
Date: Sat, 19 Sep 2015 08:31:38 -0700
Subject: [bitcoin-dev] Fill-or-kill transaction
In-Reply-To: <014345a983eabf243d9ce127de0dff7c@xbt.hk>
References: <a50b82c156c805a284386d80a42cc926@xbt.hk>
	<CAOG=w-vGqsAcw5vdY8SaGVe4Q6XX1J=GCsZftWgjES_N_5c2pA@mail.gmail.com>
	<CABm2gDp_afyqskEV8QmO43=-6R_2OJm36GVQxcQO_3ao2jC1gw@mail.gmail.com>
	<C9A1D16E-03F7-4860-8E9B-32A98E06CE49@petertodd.org>
	<014345a983eabf243d9ce127de0dff7c@xbt.hk>
Message-ID: <55FD7FDA.1010808@thinlink.com>

On 9/17/2015 8:27 PM, jl2012 via bitcoin-dev wrote:
> However, requiring 100 block maturity will unfortunately make the
> system much less appealing since the recipient may not like it.

The maturity requirement can be dropped if the expiration height is more
that 100 blocks after inclusion height.



From runesvend at gmail.com  Sat Sep 19 15:45:49 2015
From: runesvend at gmail.com (=?utf-8?Q?Rune_Kj=C3=A6r_Svendsen?=)
Date: Sat, 19 Sep 2015 17:45:49 +0200
Subject: [bitcoin-dev] Hash of UTXO set as consensus-critical
In-Reply-To: <55FCC8B5.9070906@openbitcoinprivacyproject.org>
References: <5D55F6EC-801B-4607-882F-B76CF57298B1@gmail.com>
	<55FC6951.9010704@gmail.com>
	<A16FDC0B-877F-47F1-A631-77F46251BB07@gmail.com>
	<55FCC8B5.9070906@openbitcoinprivacyproject.org>
Message-ID: <4424FA4D-C84F-43DD-BA7F-BAC2D570A373@gmail.com>

We need to distinguish between two different things here:

1) A 51% attack, where the majority of mining power is *malicious* (hence ?attack?)

and

2) A fork that exists because of a disagreement in the network, with total mining power split in two camps, each camp mining peacefully on their own chain

These are two very different scenarios.

Some claim that including the UTXO set hash in the block creates a vulnerability where miners can include the wrong UTXO hash, and mine on that, but this is only possible if a 51% attack is in effect. And if a 51% attack is in effect, it?s a moot point, because Bitcoin is useless anyway, because that 51% malicious mining power could just as well be used for mining empty blocks on top of the official chain. Or blocks containing randomly generated transactions, without confirming any legitimate transactions. This is why we say that a majority of honest miners is a hard requirement for Bitcoin. A majority of dishonest miners can only be circumvented through centralisation, and then we don?t have Bitcoin any longer.

Scenario 2 is unproblematic regardless of whether we include the UTXO hash in the block (and make it consensus-critical) or not, since the majority mining power on either chain isn?t malicious.

It is correct that if you?re a full node, and a 51% attack is in effect, you are able to verify that miners are honest (ie. you know whether a 51% attack is in effect or not). But this doesn?t change the fact that the Bitcoin network is unreliable, at best, when a majority of mining power is used for malicious purposes.



/Rune


> On 19 Sep 2015, at 04:30, Justus Ranvier via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:
> 
> On 18/09/15 15:17, Rune Kj?r Svendsen via bitcoin-dev wrote:
>> Bitcoin does not function if the majority of mining power is dishonest. There is no way around that. It?s how proof-of-work functions.
> 
> 
> None of those statements are true.
> 
> If a majority of Bitcoin miners are mining invalid blocks, then they
> aren't Bitcoin miners any more and are no longer relevant to the Bitcoin
> consensus.
> 
> There does exist a problem that light clients aren't always able to tell
> the difference between chains that are valid and chains that are not
> valid, but it's is possible to create simple proofs that would do so:
> 
> https://gist.github.com/justusranvier/451616fa4697b5f25f60
> 
> 
> If those changes would be implemented, then any node that knew a chain
> was invalid could produce a compact proof that anyone else in the
> network could verify, regardless of how much proof of work was used to
> create the invalid chain.
> 
> Committed UTXO sets would need safe to rely upon if a similar set of
> proofs that a particular set was invalid existed.
> 
> -- 
> Justus Ranvier
> Open Bitcoin Privacy Project
> http://www.openbitcoinprivacyproject.org/
> justus at openbitcoinprivacyproject.org
> E7AD 8215 8497 3673 6D9E 61C4 2A5F DA70 EAD9 E623
> <0xEAD9E623.asc>_______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev


From cipher.anthem at gmx.com  Sat Sep 19 16:03:44 2015
From: cipher.anthem at gmx.com (cipher anthem)
Date: Sat, 19 Sep 2015 18:03:44 +0200
Subject: [bitcoin-dev] Scaling Bitcoin conference micro-report
In-Reply-To: <CA+w+GKSK42DjSKqpWj9=s=catGox-n5+AWjh=Mg5=nRpxsf4HQ@mail.gmail.com>
References: <CADm_WcaLKqhR=WcJ5B52Q9SAAa+AdZY6Kz5OCQVUc_RQm6e9gg@mail.gmail.com>
	<55F9E47D.50507@mattcorallo.com>
	<CAOG=w-t2ZYQbx8+mG5FX8vzgAC_tb8A6KMABmudHQbrquEqX-Q@mail.gmail.com>
	<55FC6EBF.9090504@mattcorallo.com>,
	<CA+w+GKSK42DjSKqpWj9=s=catGox-n5+AWjh=Mg5=nRpxsf4HQ@mail.gmail.com>
Message-ID: <trinity-83bd9372-08bc-4c3e-812f-206ed3322913-1442678624612@3capp-mailcom-bs16>

An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150919/16da38ec/attachment.html>

From justus at openbitcoinprivacyproject.org  Sat Sep 19 17:19:11 2015
From: justus at openbitcoinprivacyproject.org (Justus Ranvier)
Date: Sat, 19 Sep 2015 12:19:11 -0500
Subject: [bitcoin-dev] Hash of UTXO set as consensus-critical
In-Reply-To: <4424FA4D-C84F-43DD-BA7F-BAC2D570A373@gmail.com>
References: <5D55F6EC-801B-4607-882F-B76CF57298B1@gmail.com>
	<55FC6951.9010704@gmail.com>
	<A16FDC0B-877F-47F1-A631-77F46251BB07@gmail.com>
	<55FCC8B5.9070906@openbitcoinprivacyproject.org>
	<4424FA4D-C84F-43DD-BA7F-BAC2D570A373@gmail.com>
Message-ID: <55FD990F.8060102@openbitcoinprivacyproject.org>

On 19/09/15 10:45, Rune Kj?r Svendsen wrote:
> We need to distinguish between two different things here:
> 
> 1) A 51% attack, where the majority of mining power is *malicious* (hence ?attack?)

What does "malicious" mean?

In other words, If miner A is mining honestly, and miner B is mining
maliciously, what are some of the possible difference in their behaviour
we would observe?


-- 
Justus Ranvier
Open Bitcoin Privacy Project
http://www.openbitcoinprivacyproject.org/
justus at openbitcoinprivacyproject.org
E7AD 8215 8497 3673 6D9E 61C4 2A5F DA70 EAD9 E623
-------------- next part --------------
A non-text attachment was scrubbed...
Name: 0xEAD9E623.asc
Type: application/pgp-keys
Size: 18442 bytes
Desc: not available
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150919/c934b9de/attachment-0001.bin>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 801 bytes
Desc: OpenPGP digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150919/c934b9de/attachment-0001.sig>

From runesvend at gmail.com  Sat Sep 19 20:11:08 2015
From: runesvend at gmail.com (Rune K. Svendsen)
Date: Sat, 19 Sep 2015 22:11:08 +0200
Subject: [bitcoin-dev] Hash of UTXO set as consensus-critical
In-Reply-To: <55FD990F.8060102@openbitcoinprivacyproject.org>
References: <5D55F6EC-801B-4607-882F-B76CF57298B1@gmail.com>
	<55FC6951.9010704@gmail.com>
	<A16FDC0B-877F-47F1-A631-77F46251BB07@gmail.com>
	<55FCC8B5.9070906@openbitcoinprivacyproject.org>
	<4424FA4D-C84F-43DD-BA7F-BAC2D570A373@gmail.com>
	<55FD990F.8060102@openbitcoinprivacyproject.org>
Message-ID: <F59E7FFD-D4C7-45D3-8224-4C1D62D8AAB6@gmail.com>

An honest miner is a miner that supports the network by building on top of the best valid chain. A malicious miner is one who wants to disrupt the Bitcoin network, not support it, for example by executing a 51% attack which mines empty blocks on top of the best chain.


/Rune

> Den 19/09/2015 kl. 19.19 skrev Justus Ranvier <justus at openbitcoinprivacyproject.org>:
> 
>> On 19/09/15 10:45, Rune Kj?r Svendsen wrote:
>> We need to distinguish between two different things here:
>> 
>> 1) A 51% attack, where the majority of mining power is *malicious* (hence ?attack?)
> 
> What does "malicious" mean?
> 
> In other words, If miner A is mining honestly, and miner B is mining
> maliciously, what are some of the possible difference in their behaviour
> we would observe?
> 
> 
> -- 
> Justus Ranvier
> Open Bitcoin Privacy Project
> http://www.openbitcoinprivacyproject.org/
> justus at openbitcoinprivacyproject.org
> E7AD 8215 8497 3673 6D9E 61C4 2A5F DA70 EAD9 E623
> <0xEAD9E623.asc>

From hearn at vinumeris.com  Sat Sep 19 20:43:32 2015
From: hearn at vinumeris.com (Mike Hearn)
Date: Sat, 19 Sep 2015 21:43:32 +0100
Subject: [bitcoin-dev] Scaling Bitcoin conference micro-report
In-Reply-To: <trinity-83bd9372-08bc-4c3e-812f-206ed3322913-1442678624612@3capp-mailcom-bs16>
References: <CADm_WcaLKqhR=WcJ5B52Q9SAAa+AdZY6Kz5OCQVUc_RQm6e9gg@mail.gmail.com>
	<55F9E47D.50507@mattcorallo.com>
	<CAOG=w-t2ZYQbx8+mG5FX8vzgAC_tb8A6KMABmudHQbrquEqX-Q@mail.gmail.com>
	<55FC6EBF.9090504@mattcorallo.com>
	<CA+w+GKSK42DjSKqpWj9=s=catGox-n5+AWjh=Mg5=nRpxsf4HQ@mail.gmail.com>
	<trinity-83bd9372-08bc-4c3e-812f-206ed3322913-1442678624612@3capp-mailcom-bs16>
Message-ID: <CA+w+GKRYVbck1rfAAVcxkG8FwoSK93ZSjL0xTBd87J1Xs1Dmuw@mail.gmail.com>

>
> Let me get this straight. You start this whole debate with a "kick the can
> down the road" proposal to increase the block size to 20MB, which obviously
> would require another hard fork in the future, but if someone else proposes
> a similar "kicka the can" proposal you will outright reject it?
>

Which part of "in the next few years" was unclear?

This seems to be a persistent problem in the block size debates: the
assumption that there are only two numbers, zero and infinity.

BIP101 tops out at 8 gigabyte blocks, which would represent extremely high
transaction rates compared to today. *If* Bitcoin ever became so popular,
it would be a long way in the future, and many things could have happened:

   1. Bitcoin may have become as irrelevant as the Commodore 64 is.
   2. We may have invented upgrades that make Bitcoin 100x more efficient
   than today.
   3. Hardware may have improved so much that it no longer matters.
   4. The world may have been devastated by nuclear war and nobody gives a
   shit about internet currencies anymore, because there is no internet.

It's silly to ignore the time dimension in these decisions. Bitcoin will
not last forever: even if it becomes very successful it will one day it
will be replaced by something better, so it does not have to handle
infinite usage.

But hey, as you bring it up, I'd have been happy with no upper limit at
all. There's nothing magic about 8 gigabytes. I go along with BIP 101
because it is still the only proposal that is both reasonable and
implemented, and I'm willing to compromise.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150919/ecf4ffe4/attachment.html>

From hearn at vinumeris.com  Sat Sep 19 20:57:40 2015
From: hearn at vinumeris.com (Mike Hearn)
Date: Sat, 19 Sep 2015 21:57:40 +0100
Subject: [bitcoin-dev] Scaling Bitcoin conference micro-report
In-Reply-To: <55FD225B.1050402@voskuil.org>
References: <CADm_WcaLKqhR=WcJ5B52Q9SAAa+AdZY6Kz5OCQVUc_RQm6e9gg@mail.gmail.com>
	<55F9E47D.50507@mattcorallo.com>
	<CAOG=w-t2ZYQbx8+mG5FX8vzgAC_tb8A6KMABmudHQbrquEqX-Q@mail.gmail.com>
	<55FC6EBF.9090504@mattcorallo.com> <20150919014710.GD22598@muck>
	<20150919060639.A775A404B9@smtp.hushmail.com>
	<55FD0737.1080008@voskuil.org>
	<20150919072714.D3349404B9@smtp.hushmail.com>
	<55FD1122.5030107@voskuil.org>
	<20150919075758.820CC404B9@smtp.hushmail.com>
	<55FD225B.1050402@voskuil.org>
Message-ID: <CA+w+GKQK=aouA_05-GaypgZ9waF5OOF3xWn=V5ih6Mz08s37DA@mail.gmail.com>

>
> Your argument is that the state is not a threat to a system designed to
> deprive the state of seigniorage, because the state will see that system
> as too important?
>

And so we get to one of the hearts of the debate.

The axiom upon which you and NxtChg disagree is this: he/she believes
governments can crush Bitcoin if they want regardless of how decentralised
it is, and you don't.

If one believes governments have the power to end Bitcoin no matter what,
then the only true protection comes from popularity. Governments find it
hard to ban things that are wildly popular with their voters. This is the
Uber approach: grow fast, annoy governments, but be popular enough that
banning you is politically risky.

If you don't believe that governments can end Bitcoin because of
decentralisation, then the opposite conclusion is logical: growth can be
dangerous because stateless money will be inherently opposed by the state,
therefore if growth == less decentralisation, growth increases the risk of
state shutdown.

I don't think we have to choose between decentralisation and growth
actually - computers are just amazingly fast. But that's irrelevant here.

The point is, your disagreement is summed up by your statement:


> Bitcoin cannot be both decentralized and reliant on being, "too important
> to close". If it can be closed there is insufficient decentralization.
>

I believe this statement is wrong because governments can shut down Bitcoin
at any point regardless of its level of decentralisation. This is true
because:

   - Most governments can easily spend enough money to do a 51% attack,
   especially if they can compel chip fabs to cooperate for free. This attack
   works regardless of how decentralised Bitcoin is.

   - Any government can end Bitcoin usage in its territory by jailing
   anyone who advertises acceptance/trading of bitcoins, or prices in BTC.
   Because merchants *must* advertise in order to alert customers that
   trades in BTC are possible, this is an attack which is unsolvable. If
   ordinary people can find such merchants so can government agents.

It may appear that trade cannot be suppressed because merchants can all
become anonymous too, a la Silk Road. However, if use of Bitcoin is banned
then it becomes impossible to convert coins into local currency as that
requires cooperation of banks ..... making it useless for even anonymous
merchants. An outlaw currency is useless even to outlaws.

Because Bitcoin's existence ultimately relies on government cooperation and
acceptance, the best way to ensure its survival is growth. Lots of it.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150919/67222559/attachment.html>

From moonpunter at gmail.com  Sat Sep 19 21:53:21 2015
From: moonpunter at gmail.com (phm)
Date: Sat, 19 Sep 2015 16:53:21 -0500
Subject: [bitcoin-dev] Scaling Bitcoin conference micro-report
In-Reply-To: <CA+w+GKQK=aouA_05-GaypgZ9waF5OOF3xWn=V5ih6Mz08s37DA@mail.gmail.com>
References: <CADm_WcaLKqhR=WcJ5B52Q9SAAa+AdZY6Kz5OCQVUc_RQm6e9gg@mail.gmail.com>
	<55F9E47D.50507@mattcorallo.com>
	<CAOG=w-t2ZYQbx8+mG5FX8vzgAC_tb8A6KMABmudHQbrquEqX-Q@mail.gmail.com>
	<55FC6EBF.9090504@mattcorallo.com> <20150919014710.GD22598@muck>
	<20150919060639.A775A404B9@smtp.hushmail.com>
	<55FD0737.1080008@voskuil.org>
	<20150919072714.D3349404B9@smtp.hushmail.com>
	<55FD1122.5030107@voskuil.org>
	<20150919075758.820CC404B9@smtp.hushmail.com>
	<55FD225B.1050402@voskuil.org>
	<CA+w+GKQK=aouA_05-GaypgZ9waF5OOF3xWn=V5ih6Mz08s37DA@mail.gmail.com>
Message-ID: <55FDD951.9010709@gmail.com>

Mike Hearn via bitcoin-dev wrote:
> Governments find it hard to ban things that are wildly popular with
> their voters. This is the Uber approach: grow fast, annoy governments,
> but be popular enough that banning you is politically risky.
Governments do not find it hard to ban things that threaten their
authority, least of all their authority to control money, and they also
do not find it hard to ban things which are popular. I'm sure the
millions of people with felony drug charges for the possession of
marijuana, a plant, understand this better than you appear to. Also, in
the US, despite overwhelming resistance on a broad scale, legislation
continues to be presented which would violate the 2nd amendment right to
keep and bear arms.

Bitcoin does not enjoy nearly the popularity that marijuana and guns do,
and likely never may. But even if it did, the government can be relied
on to outlaw it once it understands the true extent to which Bitcoin can
undermine its ability to control stores of value. A mining network that
anyone can contribute to would enable Bitcoin to stay alive in spite of
this, much like torrents have enabled people to continue pirating music
regardless of how many websites have been taken down.
>
> If you don't believe that governments can end Bitcoin because of
> decentralisation, then the opposite conclusion is logical: growth can
> be dangerous because stateless money will be inherently opposed by the
> state, therefore if growth == less decentralisation, growth increases
> the risk of state shutdown.
I think there's a difference between natural growth and the kind of
growth that's being proposed by bank-backed start-ups and pro-censorship
entities.
>
> I don't think we have to choose between decentralisation and growth
> actually - computers are just amazingly fast. But that's irrelevant here.
>
> The point is, your disagreement is summed up by your statement:
>  
>
>     Bitcoin cannot be both decentralized and reliant on being,
>     "too important to close". If it can be closed there is
>     insufficient decentralization.
>
>
> I believe this statement is wrong because governments can shut down
> Bitcoin at any point regardless of its level of decentralisation. This
> is true because:
>
>   * Most governments can easily spend enough money to do a 51% attack,
>     especially if they can compel chip fabs to cooperate for free.
>     This attack works regardless of how decentralised Bitcoin is.
>
>   * Any government can end Bitcoin usage in its territory by jailing
>     anyone who advertises acceptance/trading of bitcoins, or prices in
>     BTC. Because merchants /must/ advertise in order to alert
>     customers that trades in BTC are possible, this is an attack which
>     is unsolvable. If ordinary people can find such merchants so can
>     government agents.
>
> It may appear that trade cannot be suppressed because merchants can
> all become anonymous too, a la Silk Road. However, if use of Bitcoin
> is banned then it becomes impossible to convert coins into local
> currency as that requires cooperation of banks ..... making it useless
> for even anonymous merchants. An outlaw currency is useless even to
> outlaws.
A ban on Bitcoin would lead to a rise in p2p markets. The government is
an inefficient sinkhole at its very best and it has never successfully
eradicated anything.



From dscotese at litmocracy.com  Sun Sep 20 00:48:19 2015
From: dscotese at litmocracy.com (Dave Scotese)
Date: Sat, 19 Sep 2015 17:48:19 -0700
Subject: [bitcoin-dev] Hash of UTXO set as consensus-critical
In-Reply-To: <F59E7FFD-D4C7-45D3-8224-4C1D62D8AAB6@gmail.com>
References: <5D55F6EC-801B-4607-882F-B76CF57298B1@gmail.com>
	<55FC6951.9010704@gmail.com>
	<A16FDC0B-877F-47F1-A631-77F46251BB07@gmail.com>
	<55FCC8B5.9070906@openbitcoinprivacyproject.org>
	<4424FA4D-C84F-43DD-BA7F-BAC2D570A373@gmail.com>
	<55FD990F.8060102@openbitcoinprivacyproject.org>
	<F59E7FFD-D4C7-45D3-8224-4C1D62D8AAB6@gmail.com>
Message-ID: <CAGLBAhetQ0A39ca=DKH=V0pYoeKyXG08t6GWSZzDx9f+fO9Mdg@mail.gmail.com>

It seems there should be a practical limit to the size of a re-org - I mean
a practical limit that is smaller than the current height.  Vincent's
proposal suggests that a year's worth of blocks is such a practical limit.
I agree.  There are probably lower limits that are practical too, but I
like an entire year just to be conservative.  As Vincent points out, "An
attacker will need to have hidden hashing power to overwrite a years worth
of blocks."

TL;DR for the rest of this: Txns that lose confirmations from a reorg and
then show up in the mempool but not in any of the next few blocks indicate
malicious mining.

I see a blind spot here.  We are seeing the rule that says the longest
chain is the valid chain as impossible to break, but it isn't.  We broke it
to fix the BerkelyDB problem.  The code itself would have prevented us from
doing that IF 51% of the hashpower had been used to build on the wrong
chain, but it wasn't.

Justus' question about what malicious means is key here.  The blind spot is
a bit more complex than just viewing the longest chain as impossible to
break except with more than 51% of the hash power.  The blind spot is our
inability to distinguish between malicious blocks and honest blocks.

Rune suggests that empty blocks indicate malice.  I like that (which is why
I advocate using BitcoinDaysDestroyed to decide between blocks at the same
height that appear at nearly the same time, rather than first-seen).  There
are other methods we can use to distinguish between malicious blocks and
honest ones.  I'm inventing one right now, but I'm sure better ones can be
found.

Here's mine: Once a transaction has been confirmed, its originator
generally takes on the responsibility of re-broadcasting it if it gets
re-org'd out of its confirmation(s).  Many mempools will see that
re-broadcast, *if it happens*.  Any malice in a 51% attack would come in
the form of failing to include such transactions.  If we have a history of
orphaned blocks, then we can check to see which ones have been included in
non-orphaned blocks since they got reorg'd out.  Such transactions should
be top-priority after a reorg, even if they have zero fees.  When there is
a transaction that doesn't appear in a new block within a couple hours of a
reorg, that indicates dishonesty, usually in the sender (but that could be
negligence), but possibly in the miner.  Looking at the mempool would
determine which, wouldn't it?

notplato

On Sat, Sep 19, 2015 at 1:11 PM, Rune K. Svendsen via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> An honest miner is a miner that supports the network by building on top of
> the best valid chain. A malicious miner is one who wants to disrupt the
> Bitcoin network, not support it, for example by executing a 51% attack
> which mines empty blocks on top of the best chain.
>
>
> /Rune
>
> > Den 19/09/2015 kl. 19.19 skrev Justus Ranvier <
> justus at openbitcoinprivacyproject.org>:
> >
> >> On 19/09/15 10:45, Rune Kj?r Svendsen wrote:
> >> We need to distinguish between two different things here:
> >>
> >> 1) A 51% attack, where the majority of mining power is *malicious*
> (hence ?attack?)
> >
> > What does "malicious" mean?
> >
> > In other words, If miner A is mining honestly, and miner B is mining
> > maliciously, what are some of the possible difference in their behaviour
> > we would observe?
> >
> >
> > --
> > Justus Ranvier
> > Open Bitcoin Privacy Project
> > http://www.openbitcoinprivacyproject.org/
> > justus at openbitcoinprivacyproject.org
> > E7AD 8215 8497 3673 6D9E 61C4 2A5F DA70 EAD9 E623
> > <0xEAD9E623.asc>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>



-- 
I like to provide some work at no charge to prove my value. Do you need a
techie?
I own Litmocracy <http://www.litmocracy.com> and Meme Racing
<http://www.memeracing.net> (in alpha).
I'm the webmaster for The Voluntaryist <http://www.voluntaryist.com> which
now accepts Bitcoin.
I also code for The Dollar Vigilante <http://dollarvigilante.com/>.
"He ought to find it more profitable to play by the rules" - Satoshi
Nakamoto
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150919/43bfbb1d/attachment-0001.html>

From dscotese at litmocracy.com  Sun Sep 20 01:26:48 2015
From: dscotese at litmocracy.com (Dave Scotese)
Date: Sat, 19 Sep 2015 18:26:48 -0700
Subject: [bitcoin-dev] Scaling Bitcoin conference micro-report
In-Reply-To: <55FDD951.9010709@gmail.com>
References: <CADm_WcaLKqhR=WcJ5B52Q9SAAa+AdZY6Kz5OCQVUc_RQm6e9gg@mail.gmail.com>
	<55F9E47D.50507@mattcorallo.com>
	<CAOG=w-t2ZYQbx8+mG5FX8vzgAC_tb8A6KMABmudHQbrquEqX-Q@mail.gmail.com>
	<55FC6EBF.9090504@mattcorallo.com> <20150919014710.GD22598@muck>
	<20150919060639.A775A404B9@smtp.hushmail.com>
	<55FD0737.1080008@voskuil.org>
	<20150919072714.D3349404B9@smtp.hushmail.com>
	<55FD1122.5030107@voskuil.org>
	<20150919075758.820CC404B9@smtp.hushmail.com>
	<55FD225B.1050402@voskuil.org>
	<CA+w+GKQK=aouA_05-GaypgZ9waF5OOF3xWn=V5ih6Mz08s37DA@mail.gmail.com>
	<55FDD951.9010709@gmail.com>
Message-ID: <CAGLBAhc2MnEXE9L6DTfKY_3dDodTg=_jvd-xCVd82D1Zqzhivg@mail.gmail.com>

phm got most of this, but...

On Sat, Sep 19, 2015 at 2:53 PM, phm via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> Mike Hearn via bitcoin-dev wrote:
>
> >
> >   * Most governments can easily spend enough money to do a 51% attack,
> >     especially if they can compel chip fabs to cooperate for free.
> >     This attack works regardless of how decentralised Bitcoin is.
> >
> >   * Any government can end Bitcoin usage in its territory by jailing
> >     anyone who advertises acceptance/trading of bitcoins, or prices in
> >     BTC. Because merchants /must/ advertise in order to alert
> >     customers that trades in BTC are possible, this is an attack which
> >     is unsolvable. If ordinary people can find such merchants so can
> >     government agents.
> >
>
Pot is used as money, and they do jail people for it, but it doesn't have
the effect to which you refer. It has the opposite effect, partially
because it enriches suppliers.

The 51% attack is a good point, but they would be taking a huge risk.
Ideas don't die, just people.  For example, they got Ross Ulbricht, not DPR.

Government is the group of people that does things that are not acceptable
if anyone else does them, and that is because people cheer for them when
they do those things, rather than pointing out that they are not
acceptable.  The movie "The Deep Web" shows how bitcoin helps to turn this
misfortune around.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150919/02521925/attachment.html>

From milly at bitcoins.info  Sun Sep 20 02:18:54 2015
From: milly at bitcoins.info (Milly Bitcoin)
Date: Sat, 19 Sep 2015 22:18:54 -0400
Subject: [bitcoin-dev] Scaling Bitcoin conference micro-report
In-Reply-To: <CAGLBAhc2MnEXE9L6DTfKY_3dDodTg=_jvd-xCVd82D1Zqzhivg@mail.gmail.com>
References: <CADm_WcaLKqhR=WcJ5B52Q9SAAa+AdZY6Kz5OCQVUc_RQm6e9gg@mail.gmail.com>
	<55F9E47D.50507@mattcorallo.com>
	<CAOG=w-t2ZYQbx8+mG5FX8vzgAC_tb8A6KMABmudHQbrquEqX-Q@mail.gmail.com>
	<55FC6EBF.9090504@mattcorallo.com> <20150919014710.GD22598@muck>
	<20150919060639.A775A404B9@smtp.hushmail.com>
	<55FD0737.1080008@voskuil.org>
	<20150919072714.D3349404B9@smtp.hushmail.com>
	<55FD1122.5030107@voskuil.org>
	<20150919075758.820CC404B9@smtp.hushmail.com>
	<55FD225B.1050402@voskuil.org>
	<CA+w+GKQK=aouA_05-GaypgZ9waF5OOF3xWn=V5ih6Mz08s37DA@mail.gmail.com>
	<55FDD951.9010709@gmail.com>
	<CAGLBAhc2MnEXE9L6DTfKY_3dDodTg=_jvd-xCVd82D1Zqzhivg@mail.gmail.com>
Message-ID: <55FE178E.80501@bitcoins.info>

> Government is the group of people that does things ...

Governments (note the plural) are a collection of entities made up of 
people that do all sorts of things both good and bad.  Attaching your 
political agenda to Bitcoin with the hopes people will agree with it 
after using Bitcoin is not a viable plan to promote your agenda nor is 
it a plan for mass adoption.

Russ


From nxtchg at hush.com  Sun Sep 20 09:18:21 2015
From: nxtchg at hush.com (NxtChg)
Date: Sun, 20 Sep 2015 12:18:21 +0300
Subject: [bitcoin-dev] Scaling Bitcoin conference micro-report
In-Reply-To: <55FDD951.9010709@gmail.com>
References: <CADm_WcaLKqhR=WcJ5B52Q9SAAa+AdZY6Kz5OCQVUc_RQm6e9gg@mail.gmail.com>
	<55F9E47D.50507@mattcorallo.com>
	<CAOG=w-t2ZYQbx8+mG5FX8vzgAC_tb8A6KMABmudHQbrquEqX-Q@mail.gmail.com>
	<55FC6EBF.9090504@mattcorallo.com> <20150919014710.GD22598@muck>
	<20150919060639.A775A404B9@smtp.hushmail.com>
	<55FD0737.1080008@voskuil.org>
	<20150919072714.D3349404B9@smtp.hushmail.com>
	<55FD1122.5030107@voskuil.org>
	<20150919075758.820CC404B9@smtp.hushmail.com>
	<55FD225B.1050402@voskuil.org>
	<CA+w+GKQK=aouA_05-GaypgZ9waF5OOF3xWn=V5ih6Mz08s37DA@mail.gmail.com>
	<55FDD951.9010709@gmail.com> 
Message-ID: <20150920091822.2D4D8404BA@smtp.hushmail.com>


>Bitcoin does not enjoy nearly the popularity that marijuana and guns do,

Marijuana is an individual activity. Precisely the problem with Bitcoin you envision, where each one of us could be easily jailed.

Guns are quite different: they have NRA and judging by how successful it is at fending _any_ sort of gun control laws, it can very effectively counter-balance the government.

If Bitcoin had it's own NBitA, it would be in a much better position to defend itself than a bunch of individual users.


>A mining network that anyone can contribute to would enable Bitcoin to stay alive in spite of this

Again. Start building an alt-coin with ASIC-resistant algorithm then, it's much more important than the small blocks in your model.

And it must also have other features to support your fight: integrated darkcoin-style anonymity, only TOR as the protocol, etc.

Trying to use Bitcoin, which is overly-exposed, for this kind of fight is a pretty dumb idea.

You won't have the benefits of a small attack surface and you won't have the benefits of strength - the most vulnerable position.

Not to mention that many people simply don't share your vision of Bitcoin as a marginalized outlawed coin somewhere in the depths of TOR.

Looking at how enthusiastically people in smallblockistan promote the most vulnerable position, I'd say they are all agents of USG. 


From hearn at vinumeris.com  Sun Sep 20 09:25:03 2015
From: hearn at vinumeris.com (Mike Hearn)
Date: Sun, 20 Sep 2015 10:25:03 +0100
Subject: [bitcoin-dev] Scaling Bitcoin conference micro-report
In-Reply-To: <55FDD951.9010709@gmail.com>
References: <CADm_WcaLKqhR=WcJ5B52Q9SAAa+AdZY6Kz5OCQVUc_RQm6e9gg@mail.gmail.com>
	<55F9E47D.50507@mattcorallo.com>
	<CAOG=w-t2ZYQbx8+mG5FX8vzgAC_tb8A6KMABmudHQbrquEqX-Q@mail.gmail.com>
	<55FC6EBF.9090504@mattcorallo.com> <20150919014710.GD22598@muck>
	<20150919060639.A775A404B9@smtp.hushmail.com>
	<55FD0737.1080008@voskuil.org>
	<20150919072714.D3349404B9@smtp.hushmail.com>
	<55FD1122.5030107@voskuil.org>
	<20150919075758.820CC404B9@smtp.hushmail.com>
	<55FD225B.1050402@voskuil.org>
	<CA+w+GKQK=aouA_05-GaypgZ9waF5OOF3xWn=V5ih6Mz08s37DA@mail.gmail.com>
	<55FDD951.9010709@gmail.com>
Message-ID: <CA+w+GKQQKZpv0pT0gNL2maqu8HMB-D=1zGAniRg5qfJ53os=MA@mail.gmail.com>

>
> Also, in the US, despite overwhelming resistance on a broad scale,
> legislation continues to be presented which would violate the 2nd amendment
> right to keep and bear arms.


And yet the proposed legislation goes nowhere, and the USA continues to
stand alone in having the first world's weakest gun control laws.

You are just supporting my point with this example. Obama would like to
restrict guns, but can't, because they are too popular (in the USA).

The comparison to BitTorrent is likewise weak: governments hardly care
about piracy. They care enough to pass laws occasionally, but not enough to
put serious effort into enforcement. Wake me up when the USA establishes a
Copyright Enforcement Administration with the same budget and powers as the
DEA.

Internet based black markets exist only because governments tolerate them
(for now). A ban on Tor, Bitcoin or both would send them back to the
pre-2011 state where they were virtually non-existent. Governments tolerate
this sort of abuse only because they believe, I think correctly, that
Bitcoin can have great benefits for their ordinary voters and for now are
willing to let the tech industry experiment.

But for that state of affairs to continue, the benefits must actually
appear. That requires growth.

I think there's a difference between natural growth and the kind of growth
> that's being proposed by bank-backed start-ups and pro-censorship entities.
>

What difference? Are you saying the people who come to Bitcoin because of a
startup are somehow less "natural" than other users?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150920/52eca066/attachment.html>

From cryptocurrencies at quidecco.de  Sun Sep 20 11:41:52 2015
From: cryptocurrencies at quidecco.de (Isidor Zeuner)
Date: Sun, 20 Sep 2015 13:41:52 +0200 (CEST)
Subject: [bitcoin-dev] Improving Blocksize Communication Through Markets
In-Reply-To: <55FC8CEB.9070508@gmail.com>
References: <55FC8CEB.9070508@gmail.com>
	<CAOG=w-t2ZYQbx8+mG5FX8vzgAC_tb8A6KMABmudHQbrquEqX-Q@mail.gmail.com>
Message-ID: <20150920114152.988F2E6DCCA@quidecco.de>

Hi there,

replies in-line:

[...]
> 4. Do you ever stop and think: How much *money* was spent for everyone
> to travel to Montreal, stay at their hotels, and to rent the conference
> venue and broadcasting accommodations?

Not to mention that trying to solve a global issue with a conference
local to Montreal is a good example for _centralizing_ Bitcoin...

[...]
> More details are on the project page ( http://bitcoinblocksize.com/ ),
> some technical details are in the Github README.
>

I agree that letting the market decide is the way to go. But I
don't understand why we would want to have yet another
(side-)chain because of that. The market can already decide at the
point where _every_ Bitcoin user starts to discriminate the Bitcoins
he accepts between the client versions of the blocks where the
Bitcoins come from (and the corresponding BIPs where the version
numbers relate to). If a miner decides to follow a particular block
size policy against the will of the community, the market could
quickly rectify it when the miner realizes that no one accepts the
resulting coins anymore, leading to financial loss for the miner.

Best regards,

Isidor

From mark at friedenbach.org  Sun Sep 20 15:43:19 2015
From: mark at friedenbach.org (Mark Friedenbach)
Date: Sun, 20 Sep 2015 11:43:19 -0400
Subject: [bitcoin-dev] Scaling Bitcoin conference micro-report
In-Reply-To: <CA+w+GKQQKZpv0pT0gNL2maqu8HMB-D=1zGAniRg5qfJ53os=MA@mail.gmail.com>
References: <CADm_WcaLKqhR=WcJ5B52Q9SAAa+AdZY6Kz5OCQVUc_RQm6e9gg@mail.gmail.com>
	<55F9E47D.50507@mattcorallo.com>
	<CAOG=w-t2ZYQbx8+mG5FX8vzgAC_tb8A6KMABmudHQbrquEqX-Q@mail.gmail.com>
	<55FC6EBF.9090504@mattcorallo.com> <20150919014710.GD22598@muck>
	<20150919060639.A775A404B9@smtp.hushmail.com>
	<55FD0737.1080008@voskuil.org>
	<20150919072714.D3349404B9@smtp.hushmail.com>
	<55FD1122.5030107@voskuil.org>
	<20150919075758.820CC404B9@smtp.hushmail.com>
	<55FD225B.1050402@voskuil.org>
	<CA+w+GKQK=aouA_05-GaypgZ9waF5OOF3xWn=V5ih6Mz08s37DA@mail.gmail.com>
	<55FDD951.9010709@gmail.com>
	<CA+w+GKQQKZpv0pT0gNL2maqu8HMB-D=1zGAniRg5qfJ53os=MA@mail.gmail.com>
Message-ID: <CAOG=w-sBi50zj725BV1urLokF7+hxiQzvH5AAebUZ62_92nbLg@mail.gmail.com>

Replying to this specific email only because it is the most recent in my
mail client.

Does this conversation have to happen on-list? It seems to have wandered
incredibly far off-topic.

On Sun, Sep 20, 2015 at 5:25 AM, Mike Hearn via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> Also, in the US, despite overwhelming resistance on a broad scale,
>> legislation continues to be presented which would violate the 2nd amendment
>> right to keep and bear arms.
>
>
> And yet the proposed legislation goes nowhere, and the USA continues to
> stand alone in having the first world's weakest gun control laws.
>
> You are just supporting my point with this example. Obama would like to
> restrict guns, but can't, because they are too popular (in the USA).
>
> The comparison to BitTorrent is likewise weak: governments hardly care
> about piracy. They care enough to pass laws occasionally, but not enough to
> put serious effort into enforcement. Wake me up when the USA establishes a
> Copyright Enforcement Administration with the same budget and powers as the
> DEA.
>
> Internet based black markets exist only because governments tolerate them
> (for now). A ban on Tor, Bitcoin or both would send them back to the
> pre-2011 state where they were virtually non-existent. Governments tolerate
> this sort of abuse only because they believe, I think correctly, that
> Bitcoin can have great benefits for their ordinary voters and for now are
> willing to let the tech industry experiment.
>
> But for that state of affairs to continue, the benefits must actually
> appear. That requires growth.
>
> I think there's a difference between natural growth and the kind of growth
>> that's being proposed by bank-backed start-ups and pro-censorship entities.
>>
>
> What difference? Are you saying the people who come to Bitcoin because of
> a startup are somehow less "natural" than other users?
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150920/65ddbc70/attachment-0001.html>

From nxtchg at hush.com  Sun Sep 20 16:21:40 2015
From: nxtchg at hush.com (NxtChg)
Date: Sun, 20 Sep 2015 19:21:40 +0300
Subject: [bitcoin-dev] Scaling Bitcoin conference micro-report
In-Reply-To: <CAOG=w-sBi50zj725BV1urLokF7+hxiQzvH5AAebUZ62_92nbLg@mail.gmail.com>
References: <CADm_WcaLKqhR=WcJ5B52Q9SAAa+AdZY6Kz5OCQVUc_RQm6e9gg@mail.gmail.com>
	<55F9E47D.50507@mattcorallo.com>
	<CAOG=w-t2ZYQbx8+mG5FX8vzgAC_tb8A6KMABmudHQbrquEqX-Q@mail.gmail.com>
	<55FC6EBF.9090504@mattcorallo.com> <20150919014710.GD22598@muck>
	<20150919060639.A775A404B9@smtp.hushmail.com>
	<55FD0737.1080008@voskuil.org>
	<20150919072714.D3349404B9@smtp.hushmail.com>
	<55FD1122.5030107@voskuil.org>
	<20150919075758.820CC404B9@smtp.hushmail.com>
	<55FD225B.1050402@voskuil.org>
	<CA+w+GKQK=aouA_05-GaypgZ9waF5OOF3xWn=V5ih6Mz08s37DA@mail.gmail.com>
	<55FDD951.9010709@gmail.com>
	<CA+w+GKQQKZpv0pT0gNL2maqu8HMB-D=1zGAniRg5qfJ53os=MA@mail.gmail.com>
	<CAOG=w-sBi50zj725BV1urLokF7+hxiQzvH5AAebUZ62_92nbLg@mail.gmail.com>
Message-ID: <20150920162140.8B00D404BA@smtp.hushmail.com>


>Does this conversation have to happen on-list? It seems to have wandered incredibly far off-topic.

How is this off-topic? This a fundamental decision, from which all the other development decisions follow.

And apparently it's far from settled, with one part pulling in the direction of HideCoin and the other in the direction of PopCoin.

The block limit debate is a direct consequence of this fundamental disagreement.

Until this is settled, Bitcoin has no clear direction and developers cannot make effective decisions: it's hard to get anywhere when you don't know where you're going.

Even though this disagreement probably won't be resolved on this list, it's helpful to have this discussion for people to understand what the root problem is.


From milly at bitcoins.info  Sun Sep 20 16:34:29 2015
From: milly at bitcoins.info (Milly Bitcoin)
Date: Sun, 20 Sep 2015 12:34:29 -0400
Subject: [bitcoin-dev] Scaling Bitcoin conference micro-report
In-Reply-To: <20150920162140.8B00D404BA@smtp.hushmail.com>
References: <CADm_WcaLKqhR=WcJ5B52Q9SAAa+AdZY6Kz5OCQVUc_RQm6e9gg@mail.gmail.com>
	<55F9E47D.50507@mattcorallo.com>
	<CAOG=w-t2ZYQbx8+mG5FX8vzgAC_tb8A6KMABmudHQbrquEqX-Q@mail.gmail.com>
	<55FC6EBF.9090504@mattcorallo.com> <20150919014710.GD22598@muck>
	<20150919060639.A775A404B9@smtp.hushmail.com>
	<55FD0737.1080008@voskuil.org>
	<20150919072714.D3349404B9@smtp.hushmail.com>
	<55FD1122.5030107@voskuil.org>
	<20150919075758.820CC404B9@smtp.hushmail.com>
	<55FD225B.1050402@voskuil.org>
	<CA+w+GKQK=aouA_05-GaypgZ9waF5OOF3xWn=V5ih6Mz08s37DA@mail.gmail.com>
	<55FDD951.9010709@gmail.com>
	<CA+w+GKQQKZpv0pT0gNL2maqu8HMB-D=1zGAniRg5qfJ53os=MA@mail.gmail.com>
	<CAOG=w-sBi50zj725BV1urLokF7+hxiQzvH5AAebUZ62_92nbLg@mail.gmail.com>
	<20150920162140.8B00D404BA@smtp.hushmail.com>
Message-ID: <55FEE015.6000506@bitcoins.info>

> Until this is settled, Bitcoin has no clear direction and developers cannot make effective decisions:

How exactly do things set "settled" in this environment?

People looking at Bitcoin think a small group of developers and miners 
"control" these decisions.  Not sure if "control" is the right word but 
that is the perception.

Russ



From steven.pine at gmail.com  Sun Sep 20 20:23:28 2015
From: steven.pine at gmail.com (Steven Pine)
Date: Sun, 20 Sep 2015 16:23:28 -0400
Subject: [bitcoin-dev] Scaling Bitcoin conference micro-report
In-Reply-To: <55FEE015.6000506@bitcoins.info>
References: <CADm_WcaLKqhR=WcJ5B52Q9SAAa+AdZY6Kz5OCQVUc_RQm6e9gg@mail.gmail.com>
	<55F9E47D.50507@mattcorallo.com>
	<CAOG=w-t2ZYQbx8+mG5FX8vzgAC_tb8A6KMABmudHQbrquEqX-Q@mail.gmail.com>
	<55FC6EBF.9090504@mattcorallo.com> <20150919014710.GD22598@muck>
	<20150919060639.A775A404B9@smtp.hushmail.com>
	<55FD0737.1080008@voskuil.org>
	<20150919072714.D3349404B9@smtp.hushmail.com>
	<55FD1122.5030107@voskuil.org>
	<20150919075758.820CC404B9@smtp.hushmail.com>
	<55FD225B.1050402@voskuil.org>
	<CA+w+GKQK=aouA_05-GaypgZ9waF5OOF3xWn=V5ih6Mz08s37DA@mail.gmail.com>
	<55FDD951.9010709@gmail.com>
	<CA+w+GKQQKZpv0pT0gNL2maqu8HMB-D=1zGAniRg5qfJ53os=MA@mail.gmail.com>
	<CAOG=w-sBi50zj725BV1urLokF7+hxiQzvH5AAebUZ62_92nbLg@mail.gmail.com>
	<20150920162140.8B00D404BA@smtp.hushmail.com>
	<55FEE015.6000506@bitcoins.info>
Message-ID: <CAAjy6kCACMaW_7q8w2hOGizEoXGPiZvB0+je_3AW6=WxDv28Uw@mail.gmail.com>

It's amazing how foolish some people are to continue trusting governments
especially in light of recent history: a seemingly endless, Orwellian 'war
on terror', multiple regional conflicts often justified by fake evidence,
wholesale disregard of law and basic human covenants such as do not
torture, ubiquitous and secret global surveillance.

Anyone who doesn't consider governments the proper threat model is either a
shill or an idiot.
On Sep 20, 2015 12:34 PM, "Milly Bitcoin via bitcoin-dev" <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> Until this is settled, Bitcoin has no clear direction and developers
>> cannot make effective decisions:
>>
>
> How exactly do things set "settled" in this environment?
>
> People looking at Bitcoin think a small group of developers and miners
> "control" these decisions.  Not sure if "control" is the right word but
> that is the perception.
>
> Russ
>
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150920/47ac3c80/attachment.html>

From milly at bitcoins.info  Sun Sep 20 20:54:30 2015
From: milly at bitcoins.info (Milly Bitcoin)
Date: Sun, 20 Sep 2015 16:54:30 -0400
Subject: [bitcoin-dev] Scaling Bitcoin conference micro-report
In-Reply-To: <CAAjy6kCACMaW_7q8w2hOGizEoXGPiZvB0+je_3AW6=WxDv28Uw@mail.gmail.com>
References: <CADm_WcaLKqhR=WcJ5B52Q9SAAa+AdZY6Kz5OCQVUc_RQm6e9gg@mail.gmail.com>
	<55F9E47D.50507@mattcorallo.com>
	<CAOG=w-t2ZYQbx8+mG5FX8vzgAC_tb8A6KMABmudHQbrquEqX-Q@mail.gmail.com>
	<55FC6EBF.9090504@mattcorallo.com> <20150919014710.GD22598@muck>
	<20150919060639.A775A404B9@smtp.hushmail.com>
	<55FD0737.1080008@voskuil.org>
	<20150919072714.D3349404B9@smtp.hushmail.com>
	<55FD1122.5030107@voskuil.org>
	<20150919075758.820CC404B9@smtp.hushmail.com>
	<55FD225B.1050402@voskuil.org>
	<CA+w+GKQK=aouA_05-GaypgZ9waF5OOF3xWn=V5ih6Mz08s37DA@mail.gmail.com>
	<55FDD951.9010709@gmail.com>
	<CA+w+GKQQKZpv0pT0gNL2maqu8HMB-D=1zGAniRg5qfJ53os=MA@mail.gmail.com>
	<CAOG=w-sBi50zj725BV1urLokF7+hxiQzvH5AAebUZ62_92nbLg@mail.gmail.com>
	<20150920162140.8B00D404BA@smtp.hushmail.com>
	<55FEE015.6000506@bitcoins.info>
	<CAAjy6kCACMaW_7q8w2hOGizEoXGPiZvB0+je_3AW6=WxDv28Uw@mail.gmail.com>
Message-ID: <55FF1D06.7000301@bitcoins.info>

Your reply has nothing to do with my comment.  It looks like you just go 
around posting wing nut stuff without regard to what is being discussed. 
  A proper threat model considers all possible threats and looks at the 
probability of each.

Obviously from your comment you have no experience in threat models and 
limited education in general.


Russ


On 9/20/2015 4:23 PM, Steven Pine wrote:
> It's amazing how foolish some people are to continue trusting
> governments especially in light of recent history: a seemingly endless,
> Orwellian 'war on terror', multiple regional conflicts often justified
> by fake evidence, wholesale disregard of law and basic human covenants
> such as do not torture, ubiquitous and secret global surveillance.
>
> Anyone who doesn't consider governments the proper threat model is
> either a shill or an idiot.
>
> On Sep 20, 2015 12:34 PM, "Milly Bitcoin via bitcoin-dev"
> <bitcoin-dev at lists.linuxfoundation.org
> <mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:
>
>         Until this is settled, Bitcoin has no clear direction and
>         developers cannot make effective decisions:
>
>
>     How exactly do things set "settled" in this environment?
>
>     People looking at Bitcoin think a small group of developers and
>     miners "control" these decisions.  Not sure if "control" is the
>     right word but that is the perception.
>
>     Russ
>
>
>     _______________________________________________
>     bitcoin-dev mailing list
>     bitcoin-dev at lists.linuxfoundation.org
>     <mailto:bitcoin-dev at lists.linuxfoundation.org>
>     https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>



From rusty at rustcorp.com.au  Sun Sep 20 03:56:43 2015
From: rusty at rustcorp.com.au (Rusty Russell)
Date: Sun, 20 Sep 2015 13:26:43 +0930
Subject: [bitcoin-dev] [BIP Proposal] Version bits with timeout and
	delay.
In-Reply-To: <CABm2gDrLGHHn96JVpUX3kHcW0qx2fieAaYydb5EC_SGh=2hEFQ@mail.gmail.com>
References: <87mvwqb132.fsf@rustcorp.com.au>
	<CAE-z3OWLteNyBWuYSkYLZNteOGjDch_fViOV2kpWCaZkXsbu4w@mail.gmail.com>
	<87r3lyjewl.fsf@rustcorp.com.au>
	<CABm2gDqh=Dv2Ygctg+jEt61N_nJDRBMqdZypSPtmfM2QrY4AYQ@mail.gmail.com>
	<CAE-z3OXATJ6HGKqU=vxc8k-yCMAMwXiWQJxvO3D_O256_ZODtw@mail.gmail.com>
	<CABm2gDppFsTbh3JtdJkAkV_GzKFYAOLiEmtQPCgS9O6b7eWFuw@mail.gmail.com>
	<87eghwiu4k.fsf@rustcorp.com.au>
	<CABm2gDrLGHHn96JVpUX3kHcW0qx2fieAaYydb5EC_SGh=2hEFQ@mail.gmail.com>
Message-ID: <8737y9iw04.fsf@rustcorp.com.au>

Jorge Tim?n <jtimon at jtimon.cc> writes:
> I disagree with the importance of this concern and old soft/hardforks will
> replace this activation mechanism with height, so that's an argument in
> favor of using the height from the start. This is "being discussed" in a
> thread branched from bip99's discussion.

Thanks, I'll have to dig through bitcoin-dev and find it.

> Anyway, is this proposing to use the block time or the median block time?
> For some hardforks/softforks the block time complicates the implementation
> (ie in acceptToMemoryPool) as discussed in the mentioned thread.

BIP text is pretty clear that it's median block time.

This is only for timeout, not for soft fork rule change (which *is* 2016
blocks after 95% is reached).

Cheers,
Rusty.

From nxtchg at hush.com  Sun Sep 20 21:10:47 2015
From: nxtchg at hush.com (NxtChg)
Date: Mon, 21 Sep 2015 00:10:47 +0300
Subject: [bitcoin-dev] Scaling Bitcoin conference micro-report
In-Reply-To: <CAAjy6kCACMaW_7q8w2hOGizEoXGPiZvB0+je_3AW6=WxDv28Uw@mail.gmail.com>
References: <CADm_WcaLKqhR=WcJ5B52Q9SAAa+AdZY6Kz5OCQVUc_RQm6e9gg@mail.gmail.com>
	<55F9E47D.50507@mattcorallo.com>
	<CAOG=w-t2ZYQbx8+mG5FX8vzgAC_tb8A6KMABmudHQbrquEqX-Q@mail.gmail.com>
	<55FC6EBF.9090504@mattcorallo.com> <20150919014710.GD22598@muck>
	<20150919060639.A775A404B9@smtp.hushmail.com>
	<55FD0737.1080008@voskuil.org>
	<20150919072714.D3349404B9@smtp.hushmail.com>
	<55FD1122.5030107@voskuil.org>
	<20150919075758.820CC404B9@smtp.hushmail.com>
	<55FD225B.1050402@voskuil.org>
	<CA+w+GKQK=aouA_05-GaypgZ9waF5OOF3xWn=V5ih6Mz08s37DA@mail.gmail.com>
	<55FDD951.9010709@gmail.com>
	<CA+w+GKQQKZpv0pT0gNL2maqu8HMB-D=1zGAniRg5qfJ53os=MA@mail.gmail.com>
	<CAOG=w-sBi50zj725BV1urLokF7+hxiQzvH5AAebUZ62_92nbLg@mail.gmail.com>
	<20150920162140.8B00D404BA@smtp.hushmail.com>
	<55FEE015.6000506@bitcoins.info>
	<CAAjy6kCACMaW_7q8w2hOGizEoXGPiZvB0+je_3AW6=WxDv28Uw@mail.gmail.com>
Message-ID: <20150920211047.C40FD404BA@smtp.hushmail.com>


>Anyone who doesn't consider governments the proper threat model is either a shill or an idiot.

You meant to say "threat". This is what threat model is: https://en.wikipedia.org/wiki/Threat_model

Nobody here discounts governments as a threat.

As to the "proper threat model", you can't construct one since your attacker is essentially unbounded.

For example, any large government could easily obtain 51% of hash power and then only accept transactions from "certified services".


From steven.pine at gmail.com  Sun Sep 20 21:13:08 2015
From: steven.pine at gmail.com (Steven Pine)
Date: Sun, 20 Sep 2015 17:13:08 -0400
Subject: [bitcoin-dev] Scaling Bitcoin conference micro-report
In-Reply-To: <20150920211047.C40FD404BA@smtp.hushmail.com>
References: <CADm_WcaLKqhR=WcJ5B52Q9SAAa+AdZY6Kz5OCQVUc_RQm6e9gg@mail.gmail.com>
	<55F9E47D.50507@mattcorallo.com>
	<CAOG=w-t2ZYQbx8+mG5FX8vzgAC_tb8A6KMABmudHQbrquEqX-Q@mail.gmail.com>
	<55FC6EBF.9090504@mattcorallo.com> <20150919014710.GD22598@muck>
	<20150919060639.A775A404B9@smtp.hushmail.com>
	<55FD0737.1080008@voskuil.org>
	<20150919072714.D3349404B9@smtp.hushmail.com>
	<55FD1122.5030107@voskuil.org>
	<20150919075758.820CC404B9@smtp.hushmail.com>
	<55FD225B.1050402@voskuil.org>
	<CA+w+GKQK=aouA_05-GaypgZ9waF5OOF3xWn=V5ih6Mz08s37DA@mail.gmail.com>
	<55FDD951.9010709@gmail.com>
	<CA+w+GKQQKZpv0pT0gNL2maqu8HMB-D=1zGAniRg5qfJ53os=MA@mail.gmail.com>
	<CAOG=w-sBi50zj725BV1urLokF7+hxiQzvH5AAebUZ62_92nbLg@mail.gmail.com>
	<20150920162140.8B00D404BA@smtp.hushmail.com>
	<55FEE015.6000506@bitcoins.info>
	<CAAjy6kCACMaW_7q8w2hOGizEoXGPiZvB0+je_3AW6=WxDv28Uw@mail.gmail.com>
	<20150920211047.C40FD404BA@smtp.hushmail.com>
Message-ID: <CAAjy6kBkdn7MnMBVoQJ1oMZA2sMFzKH8HFZYqrsS5ALwFNgGxQ@mail.gmail.com>

That's a simple fallacy, historically governments even hegemons, fail, in
fact it would be odd to assert that a government will not fail, therefore
ascribing godlike and limitless powers to a government is again the view of
either a shill or someone untutored in history.

On Sun, Sep 20, 2015 at 5:10 PM, NxtChg <nxtchg at hush.com> wrote:

>
> >Anyone who doesn't consider governments the proper threat model is either
> a shill or an idiot.
>
> You meant to say "threat". This is what threat model is:
> https://en.wikipedia.org/wiki/Threat_model
>
> Nobody here discounts governments as a threat.
>
> As to the "proper threat model", you can't construct one since your
> attacker is essentially unbounded.
>
> For example, any large government could easily obtain 51% of hash power
> and then only accept transactions from "certified services".
>
>


-- 
Steven Pine
(510) 517-7075
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150920/23655cdc/attachment-0001.html>

From elombrozo at gmail.com  Sun Sep 20 21:16:36 2015
From: elombrozo at gmail.com (Eric Lombrozo)
Date: Sun, 20 Sep 2015 21:16:36 +0000
Subject: [bitcoin-dev] Scaling Bitcoin conference micro-report
In-Reply-To: <CAAjy6kCACMaW_7q8w2hOGizEoXGPiZvB0+je_3AW6=WxDv28Uw@mail.gmail.com>
Message-ID: <em486f0385-0177-4355-8479-5fb1fa0c489f@platinum>

Steven,

You make a decent point...but please try to keep the discourse civil. 
It's already hard enough trying to figure this stuff out without fanning 
more flames.

------ Original Message ------
From: "Steven Pine via bitcoin-dev" 
<bitcoin-dev at lists.linuxfoundation.org>
To: "Milly Bitcoin" <milly at bitcoins.info>
Cc: bitcoin-dev at lists.linuxfoundation.org
Sent: 9/20/2015 1:23:28 PM
Subject: Re: [bitcoin-dev] Scaling Bitcoin conference micro-report

>It's amazing how foolish some people are to continue trusting 
>governments especially in light of recent history: a seemingly endless, 
>Orwellian 'war on terror', multiple regional conflicts often justified 
>by fake evidence, wholesale disregard of law and basic human covenants 
>such as do not torture, ubiquitous and secret global surveillance.
>
>Anyone who doesn't consider governments the proper threat model is 
>either a shill or an idiot.
>
>On Sep 20, 2015 12:34 PM, "Milly Bitcoin via bitcoin-dev" 
><bitcoin-dev at lists.linuxfoundation.org> wrote:
>>>Until this is settled, Bitcoin has no clear direction and developers 
>>>cannot make effective decisions:
>>
>>How exactly do things set "settled" in this environment?
>>
>>People looking at Bitcoin think a small group of developers and miners 
>>"control" these decisions.  Not sure if "control" is the right word 
>>but that is the perception.
>>
>>Russ
>>
>>
>>_______________________________________________
>>bitcoin-dev mailing list
>>bitcoin-dev at lists.linuxfoundation.org
>>https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150920/bb9c4e1a/attachment.html>

From milly at bitcoins.info  Sun Sep 20 21:24:40 2015
From: milly at bitcoins.info (Milly Bitcoin)
Date: Sun, 20 Sep 2015 17:24:40 -0400
Subject: [bitcoin-dev] Scaling Bitcoin conference micro-report
In-Reply-To: <20150920211047.C40FD404BA@smtp.hushmail.com>
References: <CADm_WcaLKqhR=WcJ5B52Q9SAAa+AdZY6Kz5OCQVUc_RQm6e9gg@mail.gmail.com>
	<55F9E47D.50507@mattcorallo.com>
	<CAOG=w-t2ZYQbx8+mG5FX8vzgAC_tb8A6KMABmudHQbrquEqX-Q@mail.gmail.com>
	<55FC6EBF.9090504@mattcorallo.com> <20150919014710.GD22598@muck>
	<20150919060639.A775A404B9@smtp.hushmail.com>
	<55FD0737.1080008@voskuil.org>
	<20150919072714.D3349404B9@smtp.hushmail.com>
	<55FD1122.5030107@voskuil.org>
	<20150919075758.820CC404B9@smtp.hushmail.com>
	<55FD225B.1050402@voskuil.org>
	<CA+w+GKQK=aouA_05-GaypgZ9waF5OOF3xWn=V5ih6Mz08s37DA@mail.gmail.com>
	<55FDD951.9010709@gmail.com>
	<CA+w+GKQQKZpv0pT0gNL2maqu8HMB-D=1zGAniRg5qfJ53os=MA@mail.gmail.com>
	<CAOG=w-sBi50zj725BV1urLokF7+hxiQzvH5AAebUZ62_92nbLg@mail.gmail.com>
	<20150920162140.8B00D404BA@smtp.hushmail.com>
	<55FEE015.6000506@bitcoins.info>
	<CAAjy6kCACMaW_7q8w2hOGizEoXGPiZvB0+je_3AW6=WxDv28Uw@mail.gmail.com>
	<20150920211047.C40FD404BA@smtp.hushmail.com>
Message-ID: <55FF2418.8010205@bitcoins.info>

Threat models can be developed for things like threats from governments. 
  The idea in developing a model is to put in the context of other 
possible threats.  For example, someone with a few million to burn can 
easily crash the exchange rate or buy a couple core developers much 
easier and cheaper than doing a 51% attack.  These attacks can be done 
by governments and non-governments alike.  The people who consider 
threats from government and think everyone associated with Bitcoin is 
somehow "pure" are irrational cultists who have no business discussing 
threat models in the first place.

Russ



On 9/20/2015 5:10 PM, NxtChg via bitcoin-dev wrote:
>
>> Anyone who doesn't consider governments the proper threat model is either a shill or an idiot.
>
> You meant to say "threat". This is what threat model is: https://en.wikipedia.org/wiki/Threat_model
>
> Nobody here discounts governments as a threat.
>
> As to the "proper threat model", you can't construct one since your attacker is essentially unbounded.
>
> For example, any large government could easily obtain 51% of hash power and then only accept transactions from "certified services".
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>



From s7r at sky-ip.org  Sun Sep 20 21:33:38 2015
From: s7r at sky-ip.org (s7r)
Date: Mon, 21 Sep 2015 00:33:38 +0300
Subject: [bitcoin-dev] Scaling Bitcoin conference micro-report
In-Reply-To: <55FF1D06.7000301@bitcoins.info>
References: <CADm_WcaLKqhR=WcJ5B52Q9SAAa+AdZY6Kz5OCQVUc_RQm6e9gg@mail.gmail.com>
	<55F9E47D.50507@mattcorallo.com>
	<CAOG=w-t2ZYQbx8+mG5FX8vzgAC_tb8A6KMABmudHQbrquEqX-Q@mail.gmail.com>
	<55FC6EBF.9090504@mattcorallo.com> <20150919014710.GD22598@muck>
	<20150919060639.A775A404B9@smtp.hushmail.com>
	<55FD0737.1080008@voskuil.org>
	<20150919072714.D3349404B9@smtp.hushmail.com>
	<55FD1122.5030107@voskuil.org>
	<20150919075758.820CC404B9@smtp.hushmail.com>
	<55FD225B.1050402@voskuil.org>
	<CA+w+GKQK=aouA_05-GaypgZ9waF5OOF3xWn=V5ih6Mz08s37DA@mail.gmail.com>
	<55FDD951.9010709@gmail.com>
	<CA+w+GKQQKZpv0pT0gNL2maqu8HMB-D=1zGAniRg5qfJ53os=MA@mail.gmail.com>
	<CAOG=w-sBi50zj725BV1urLokF7+hxiQzvH5AAebUZ62_92nbLg@mail.gmail.com>
	<20150920162140.8B00D404BA@smtp.hushmail.com>
	<55FEE015.6000506@bitcoins.info>
	<CAAjy6kCACMaW_7q8w2hOGizEoXGPiZvB0+je_3AW6=WxDv28Uw@mail.gmail.com>
	<55FF1D06.7000301@bitcoins.info>
Message-ID: <55FF2632.2010804@sky-ip.org>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256

Nobody said anything about trusting the governments in the way such as
you describe.

No matter how much you want to disagree here, Mike Hearn is right on
some aspects. He only said that bitcoin needs to have larger user
base, more use cases, making it more popular and less likely to be
banned by the governments because of political reasons. He did not say
"let's trust the governments and centralize bitcoin, give them the
possibility to trace/seize/control people's bitcoins, own all the full
nodes or hashing power" or anything like this. So, I think he wants to
suggest "be smart and Play by the rules, follow your interest". The
general threat model for which we want to scale is: larger user base
(not necessarily by increasing the blocksize - just increase the
transactions per second using the best way from all points of view),
more use cases for simple people who only do basic stuff, more
popularity but all these without the possibility for some actor to
control more than he should (like a government agency). For example,
just a summary (among many others): it will always be impossible to
freeze anyone's coins, or take them without the party's consent, or
make it mandatory to tie bitcoin addresses / wallets to real world
identities.

If we think governments are the threat, it's bad. This is because they
can make bitcoin illegal, and no matter what you or I think, there
will _always_ be more people who follow the laws (even the immoral
ones) than people who don't. If it's illegal / banned in relevant
places/countries/continents, bitcoin will be useless. What good will
it be if you can only use it anonymously in a dark-web via Tor, and
you can't tell anyone you do it and can't exchange it to fiat or vice
versa? Bitcoin has to be legit, have normal use cases and be as
popular as possible. Don't think that if tomorrow some government bans
bitcoin there will be a revolution supporting freedom and free speech
and who had this terrible idea will be jailed forever - this will not
happen. What will happen is that users under that jurisdiction will
not use bitcoin any more, merchants from there will not accept bitcoin
any more and exchangers from there will disappear. If some of them
will remain to continue doing it as an outlaw, I assume their number
will be insignificant anyway. If we move towards crypto-anarchy where
we want to say "f*** the laws, f*** the government, f*** everything",
we already lost and this should not be the consensus here under any
circumstances. We, a few computer experts on this mail list using
bitcoin is not what it will make it strong. What will make it strong
is millions of human beings from all social classes and with various
occupations using it for whatever boring reason each one might have.

+1: An outlaw currency is useless even to outlaws.


> On 9/20/2015 4:23 PM, Steven Pine wrote:
>> It's amazing how foolish some people are to continue trusting 
>> governments especially in light of recent history: a seemingly
>> endless, Orwellian 'war on terror', multiple regional conflicts
>> often justified by fake evidence, wholesale disregard of law and
>> basic human covenants such as do not torture, ubiquitous and
>> secret global surveillance.
>> 
>> Anyone who doesn't consider governments the proper threat model
>> is either a shill or an idiot.
>> 
>> On Sep 20, 2015 12:34 PM, "Milly Bitcoin via bitcoin-dev" 
>> <bitcoin-dev at lists.linuxfoundation.org 
>> <mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:
>> 
>> Until this is settled, Bitcoin has no clear direction and 
>> developers cannot make effective decisions:
>> 
>> 
>> How exactly do things set "settled" in this environment?
>> 
>> People looking at Bitcoin think a small group of developers and 
>> miners "control" these decisions.  Not sure if "control" is the 
>> right word but that is the perception.
>> 
>> Russ
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2.0.22 (MingW32)

iQEcBAEBCAAGBQJV/yYyAAoJEIN/pSyBJlsRbagH/1mv0u+xUy2FhYhk07irH9Qd
+U/v7xOLfrzz8j7BzcqLAt3Jey0r00oWbLpay4EyhtoOjPFSFwXZ5Cz/2FChbTFO
kNFtrQpR9ioRAHslePzhIWl0Zl3qz6a7HzrYGl7hLZVJGmXdAncpGEZLpgjONggb
R+dbKipICkRCjuOWZkpULLVUEfTTdy7bkBTR33wVb7QxRhdJNdLtXc9E0xEWPwfy
AalDSu/nhg+VLjIW9NUGky8oqk1pqnHS8AkkAt0jLaemdWgLTzt6Ll4+w4GYaLrj
Ac2te3HXPwUzyq9xnoae5ESOU7MWzkzvyKQs35c4z03aLz2UxHjEL6o6K50leAw=
=43rd
-----END PGP SIGNATURE-----

From milly at bitcoins.info  Sun Sep 20 21:34:27 2015
From: milly at bitcoins.info (Milly Bitcoin)
Date: Sun, 20 Sep 2015 17:34:27 -0400
Subject: [bitcoin-dev] Scaling Bitcoin conference micro-report
In-Reply-To: <CAAjy6kBkdn7MnMBVoQJ1oMZA2sMFzKH8HFZYqrsS5ALwFNgGxQ@mail.gmail.com>
References: <CADm_WcaLKqhR=WcJ5B52Q9SAAa+AdZY6Kz5OCQVUc_RQm6e9gg@mail.gmail.com>
	<55F9E47D.50507@mattcorallo.com>
	<CAOG=w-t2ZYQbx8+mG5FX8vzgAC_tb8A6KMABmudHQbrquEqX-Q@mail.gmail.com>
	<55FC6EBF.9090504@mattcorallo.com> <20150919014710.GD22598@muck>
	<20150919060639.A775A404B9@smtp.hushmail.com>
	<55FD0737.1080008@voskuil.org>
	<20150919072714.D3349404B9@smtp.hushmail.com>
	<55FD1122.5030107@voskuil.org>
	<20150919075758.820CC404B9@smtp.hushmail.com>
	<55FD225B.1050402@voskuil.org>
	<CA+w+GKQK=aouA_05-GaypgZ9waF5OOF3xWn=V5ih6Mz08s37DA@mail.gmail.com>
	<55FDD951.9010709@gmail.com>
	<CA+w+GKQQKZpv0pT0gNL2maqu8HMB-D=1zGAniRg5qfJ53os=MA@mail.gmail.com>
	<CAOG=w-sBi50zj725BV1urLokF7+hxiQzvH5AAebUZ62_92nbLg@mail.gmail.com>
	<20150920162140.8B00D404BA@smtp.hushmail.com>
	<55FEE015.6000506@bitcoins.info>
	<CAAjy6kCACMaW_7q8w2hOGizEoXGPiZvB0+je_3AW6=WxDv28Uw@mail.gmail.com>
	<20150920211047.C40FD404BA@smtp.hushmail.com>
	<CAAjy6kBkdn7MnMBVoQJ1oMZA2sMFzKH8HFZYqrsS5ALwFNgGxQ@mail.gmail.com>
Message-ID: <55FF2663.2090200@bitcoins.info>

> therefore ascribing godlike and limitless powers to a government is
> again the view of either a shill or someone untutored in history.

Since nobody ever ascribed "godlike and limitless powers to a 
government" on this list your comment has no bearing on anything 
discussed here.  I am sure the whole world, except for a few 
underemployed gamers who discovered Bitcoin, are all untutored in history.

As for this thread, the question was how/when is a Bitcoin development 
issue considered "settled?"

Russ


From elombrozo at gmail.com  Sun Sep 20 21:45:04 2015
From: elombrozo at gmail.com (Eric Lombrozo)
Date: Sun, 20 Sep 2015 21:45:04 +0000
Subject: [bitcoin-dev] Scaling Bitcoin conference micro-report
In-Reply-To: <55FF2632.2010804@sky-ip.org>
Message-ID: <ema20a20ae-62b0-483b-90d4-a2cded334b2f@platinum>


------ Original Message ------
From: "s7r via bitcoin-dev" <bitcoin-dev at lists.linuxfoundation.org>
To: bitcoin-dev at lists.linuxfoundation.org
Sent: 9/20/2015 2:33:38 PM
Subject: Re: [bitcoin-dev] Scaling Bitcoin conference micro-report

>The general threat model for which we want to scale is: larger user 
>base
>(not necessarily by increasing the blocksize - just increase the
>transactions per second using the best way from all points of view),
>more use cases for simple people who only do basic stuff, more
>popularity but all these without the possibility for some actor to
>control more than he should (like a government agency).

Larger user base won't necessarily protect against governments if we 
still have chokepoints they can go after. Given that as a currency 
Bitcoin  currently represents a negligible portion of the world's 
economy, even growing the user base by some small factor is at best a 
token gesture in our fight against governmental threats. If governments 
successfully take down critical pieces of our network infrastructure, 
Bitcoin will fail and most people will continue doing business as usual 
(using fiat currency), most of them never even noticing anything 
noteworthy happened at all.

What we really need to grow is the number of nodes on the network that 
participate in its basic infrastructure - namely: miners, validators, 
etc...and the more centralized these activities become, the easier it 
will be for governments to clamp down.
>


From milly at bitcoins.info  Sun Sep 20 22:02:32 2015
From: milly at bitcoins.info (Milly Bitcoin)
Date: Sun, 20 Sep 2015 18:02:32 -0400
Subject: [bitcoin-dev] Scaling Bitcoin conference micro-report
In-Reply-To: <ema20a20ae-62b0-483b-90d4-a2cded334b2f@platinum>
References: <ema20a20ae-62b0-483b-90d4-a2cded334b2f@platinum>
Message-ID: <55FF2CF8.2010408@bitcoins.info>

> Larger user base won't necessarily protect against governments if we
> still have chokepoints they can go after.


Bitcoin will always have chokepoints governments can go after.  Hackers 
already targeted routers to divert mining traffic awhile back.  Bitcoin 
traffic is easily seen and blocked by ISP's.  It has already been 
pointed out that laws against merchants and exchanges cannot be defended 
against any other way than to have many people use the system.  (As a 
developer you, of course, did not mention the threat of having a tiny 
number of developers who have significant influence over Bitcoin.  It 
always amazes me the endless discussion over miners centralization and 
almost zero discussion of developer decentralization.)

Increasing the nodes by a factor of 2 or 3 or keeping the block size 
small to increase the diversity of miners by a few percent will have 
zero effect if those other government threats were to actually happen.

Russ



From elombrozo at gmail.com  Sun Sep 20 22:21:55 2015
From: elombrozo at gmail.com (Eric Lombrozo)
Date: Sun, 20 Sep 2015 22:21:55 +0000
Subject: [bitcoin-dev] Scaling Bitcoin conference micro-report
In-Reply-To: <55FF2CF8.2010408@bitcoins.info>
Message-ID: <eme6e53f4a-40c6-4b6f-8cf1-b2e8d9905e9d@platinum>



------ Original Message ------
From: "Milly Bitcoin via bitcoin-dev" 
<bitcoin-dev at lists.linuxfoundation.org>
To: bitcoin-dev at lists.linuxfoundation.org
Sent: 9/20/2015 3:02:32 PM
Subject: Re: [bitcoin-dev] Scaling Bitcoin conference micro-report

>>Larger user base won't necessarily protect against governments if we
>>still have chokepoints they can go after.
>
>
>Bitcoin will always have chokepoints governments can go after.  Hackers 
>already targeted routers to divert mining traffic awhile back.  Bitcoin 
>traffic is easily seen and blocked by ISP's.  It has already been 
>pointed out that laws against merchants and exchanges cannot be 
>defended against any other way than to have many people use the system.
Almost none of these merchants depend on Bitcoin in any significant way 
for revenue...and that's likely to remain the case for a good while. 
Merchants that have chosen to accept Bitcoin are typically using a 
handful of payment processors, again...chokepoints. And almost none of 
them are contributing any network resources back to Bitcoin.

Exchanges are indeed serious chokepoints. But increasing the number of 
users will probably have relatively little effect on this unless we also 
increase the number of exchanges and decentralize the exchanges. If all 
we had to do is increase the number of users, the same argument could be 
used to claim that banks would be less susceptible to governmental 
crackdowns if they just had more account holders.

Exchange decentralization is indeed another thing we must work towards - 
but that's probably beyond the scope of the more pressing issue which is 
building consensus in Bitcoin development.

>(As a developer you, of course, did not mention the threat of having a 
>tiny number of developers who have significant influence over Bitcoin.  
>It always amazes me the endless discussion over miners centralization 
>and almost zero discussion of developer decentralization.)
I've pointed out this weakness of Bitcoin *numerous* times. That I 
failed to mention it here does not mean it hasn't been discussed 
elsewhere. Some of us have also been actively working towards developing 
a more modular, layered architecture and better implementations that 
will afford greater decentralization in software development with less 
need for critical code reviews, less pushback from downstream developers 
who must continuously rebase, a better process for building consensus in 
the community, and simpler app migration.

>
>
>Increasing the nodes by a factor of 2 or 3 or keeping the block size 
>small to increase the diversity of miners by a few percent will have 
>zero effect if those other government threats were to actually happen.
>
We need to increase the basic infrastructure nodes by a factor much 
larger than 2 or 3...more like 100 or 1000...and it's entirely doable 
with properly aligned incentives.

>Russ
>
>
>_______________________________________________
>bitcoin-dev mailing list
>bitcoin-dev at lists.linuxfoundation.org
>https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev


From milly at bitcoins.info  Sun Sep 20 22:51:36 2015
From: milly at bitcoins.info (Milly Bitcoin)
Date: Sun, 20 Sep 2015 18:51:36 -0400
Subject: [bitcoin-dev] Scaling Bitcoin conference micro-report
In-Reply-To: <eme6e53f4a-40c6-4b6f-8cf1-b2e8d9905e9d@platinum>
References: <eme6e53f4a-40c6-4b6f-8cf1-b2e8d9905e9d@platinum>
Message-ID: <55FF3878.4060501@bitcoins.info>

>Some of us have also been actively working towards developing
> a more modular, layered architecture and better implementations that
> will afford greater decentralization in software development with less
> need for critical code reviews, less pushback from downstream developers
> who must continuously rebase, a better process for building consensus in
> the community, and simpler app migration.

It sounds more efficient but it is not clear to me that it would change 
the level of centralization of how the final decisions are made.

One threat to Bintcoin involves incentive for companies to hire 
developers.  The only reason is to change (or not change) Bitcoin Core 
so it is beneficial to their interests.  I am not sure anything can be 
done about that risk but it needs to be understood and considered and 
not just ignored.

> We need to increase the basic infrastructure nodes by a factor much
> larger than 2 or 3...more like 100 or 1000...and it's entirely doable
> with properly aligned incentives.

I assume that would mean fees that hike transaction fees and make 
Bitcoin more expensive?

Russ



From elombrozo at gmail.com  Sun Sep 20 23:11:33 2015
From: elombrozo at gmail.com (Eric Lombrozo)
Date: Sun, 20 Sep 2015 23:11:33 +0000
Subject: [bitcoin-dev] Scaling Bitcoin conference micro-report
In-Reply-To: <55FF3878.4060501@bitcoins.info>
Message-ID: <em36157ae1-7c4b-488f-88d6-5a8df930ef0f@platinum>



------ Original Message ------
From: "Milly Bitcoin via bitcoin-dev" 
<bitcoin-dev at lists.linuxfoundation.org>
To: bitcoin-dev at lists.linuxfoundation.org
Sent: 9/20/2015 3:51:36 PM
Subject: Re: [bitcoin-dev] Scaling Bitcoin conference micro-report

>>Some of us have also been actively working towards developing
>>a more modular, layered architecture and better implementations that
>>will afford greater decentralization in software development with less
>>need for critical code reviews, less pushback from downstream 
>>developers
>>who must continuously rebase, a better process for building consensus 
>>in
>>the community, and simpler app migration.
>
>It sounds more efficient but it is not clear to me that it would change 
>the level of centralization of how the final decisions are made.
>
>One threat to Bintcoin involves incentive for companies to hire 
>developers.  The only reason is to change (or not change) Bitcoin Core 
>so it is beneficial to their interests.  I am not sure anything can be 
>done about that risk but it needs to be understood and considered and 
>not just ignored.
Core development process and decentralized dev/community consensus 
building (in particular for consensus-critical changes) is at the top of 
my priorities as issues right now...and one that I'd love to discuss 
more in depth...but it probably deserves its own thread. The political 
angle seems very difficult right now while the systems architecture 
stuff seems a bit more tractable...and it seems that without 
architectural changes it will be extremely hard to decentralize 
development and easily bring large numbers of new developers in.

>
>>We need to increase the basic infrastructure nodes by a factor much
>>larger than 2 or 3...more like 100 or 1000...and it's entirely doable
>>with properly aligned incentives.
>
>I assume that would mean fees that hike transaction fees and make 
>Bitcoin more expensive?
>
Not necessarily. Right now we already pay around 3,600 bitcoins a day in 
inflationary subsidies, very little of which goes to the majority of 
critical infrastructure nodes and their operators. This is a problem 
with the current protocol design, one we'll hopefully be able to fix.

Having more core infrastructure nodes doesn't need to raise costs per 
transaction - but it will most likely require abandoning the current 
approach of having three basic node classes: miners (which tend towards 
centralized pools), full nodes (which must validate each of everyone's 
transaction and in return get paid nothing), and thin clients (which 
essentially amount to parasitic nodes that do not contribute any 
resources back to the network and must be subsidized).


From dscotese at litmocracy.com  Mon Sep 21 00:11:46 2015
From: dscotese at litmocracy.com (Dave Scotese)
Date: Sun, 20 Sep 2015 17:11:46 -0700
Subject: [bitcoin-dev] Scaling Bitcoin conference micro-report
In-Reply-To: <em36157ae1-7c4b-488f-88d6-5a8df930ef0f@platinum>
References: <55FF3878.4060501@bitcoins.info>
	<em36157ae1-7c4b-488f-88d6-5a8df930ef0f@platinum>
Message-ID: <CAGLBAhe+=Qf7zJXhjZAJBGirAQQ2XhG6Q=Deruo4VbRxkj7YPA@mail.gmail.com>

Mike wrote:
... Obama would like to restrict guns, but can't, because they are too
popular (in the USA).
... Governments tolerate this sort of abuse [black markets] only because
they believe, I think correctly, that Bitcoin can have great benefits for
their ordinary voters and for now are willing to let the tech industry
experiment.

Those two reasons must be recognized for their differences.  What does it
mean that something is "too popular" if the ultimate goal of government is
"great benefits for their ordinary voters"?  It means the government
assumes that some things are bad for people even though they are popular.
Crystal meth and heroin come to mind.  This is a natural concern of all
decent parents for their children, and the reason that cultures for
millennia have had rites of passage, wherein the child takes on the
responsibility of determining for him or her self whether or not a popular
thing provides great benefits.  That responsibility is the birthright of
every human being. Why is there an institution that usurps it?  How do the
people within that institution benefit from being part of it?

Some history to study and answer these questions includes:

   - The origination of public schooling as motivated by Johann Fichte's
   public letters to his king in response to Prussia's loss to Napolean at
   Jena.
   - Franz Oppenheimer's book, The State, tracing the origination of the
   idea of a state, or group of people who make up and enforce laws.
   - Carroll Quigley's history book, Tragedy and Hope.
   - Larken Rose's book, Kicking the Dragon.
   - The Republic, by Plato, but only once you understand those other books.
   - If you want a shortcut, John Taylor Gatto did a five-hour interview
   which is now titled "The Ultimate History Lesson with John Taylor Gatto."
   It is heavily sourced by its producer in case anyone wants to verify the
   information he provides.

I'm "notplato" for a reason.

notplato
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150920/540fc23e/attachment.html>

From corey3 at gmail.com  Mon Sep 21 05:04:54 2015
From: corey3 at gmail.com (Corey Haddad)
Date: Sun, 20 Sep 2015 22:04:54 -0700
Subject: [bitcoin-dev] Scaling Bitcoin conference micro-report
In-Reply-To: <CAGLBAhe+=Qf7zJXhjZAJBGirAQQ2XhG6Q=Deruo4VbRxkj7YPA@mail.gmail.com>
References: <55FF3878.4060501@bitcoins.info>
	<em36157ae1-7c4b-488f-88d6-5a8df930ef0f@platinum>
	<CAGLBAhe+=Qf7zJXhjZAJBGirAQQ2XhG6Q=Deruo4VbRxkj7YPA@mail.gmail.com>
Message-ID: <CAK_HAC8TUfLavLjUQTVLzeqf5qppbPASd_W-gkpUpNWqDayC0w@mail.gmail.com>

If it turns out that the blocksize divide is hinging on differing developer
views on the nature of the threat posed by governments, perhaps it would be
better to defer to people who specialize in that area.  There are plenty of
them operating in the Bitcoin space.  I am familiar with some of the United
States based policy people, such as Jerry Brito, Alex Fowler, Constance
Choi, Jim Harper, Patrick Murck, etc..  If they are not sure how to frame
their ideas as they relate to this debate, maybe the devs could pose some
questions for them to answer.  If the bitcoin policy people are not of
help, maybe we should turn to some political philosophers or something.

The main idea here is that if this is a politics question, please consider
you may be outside your area of expertise.


On Sun, Sep 20, 2015 at 5:11 PM, Dave Scotese via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> Mike wrote:
> ... Obama would like to restrict guns, but can't, because they are too
> popular (in the USA).
> ... Governments tolerate this sort of abuse [black markets] only because
> they believe, I think correctly, that Bitcoin can have great benefits for
> their ordinary voters and for now are willing to let the tech industry
> experiment.
>
> Those two reasons must be recognized for their differences.  What does it
> mean that something is "too popular" if the ultimate goal of government is
> "great benefits for their ordinary voters"?  It means the government
> assumes that some things are bad for people even though they are popular.
> Crystal meth and heroin come to mind.  This is a natural concern of all
> decent parents for their children, and the reason that cultures for
> millennia have had rites of passage, wherein the child takes on the
> responsibility of determining for him or her self whether or not a popular
> thing provides great benefits.  That responsibility is the birthright of
> every human being. Why is there an institution that usurps it?  How do the
> people within that institution benefit from being part of it?
>
> Some history to study and answer these questions includes:
>
>    - The origination of public schooling as motivated by Johann Fichte's
>    public letters to his king in response to Prussia's loss to Napolean at
>    Jena.
>    - Franz Oppenheimer's book, The State, tracing the origination of the
>    idea of a state, or group of people who make up and enforce laws.
>    - Carroll Quigley's history book, Tragedy and Hope.
>    - Larken Rose's book, Kicking the Dragon.
>    - The Republic, by Plato, but only once you understand those other
>    books.
>    - If you want a shortcut, John Taylor Gatto did a five-hour interview
>    which is now titled "The Ultimate History Lesson with John Taylor Gatto."
>    It is heavily sourced by its producer in case anyone wants to verify the
>    information he provides.
>
> I'm "notplato" for a reason.
>
> notplato
>
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150920/0e792cc4/attachment-0001.html>

From jtimon at jtimon.cc  Mon Sep 21 08:24:58 2015
From: jtimon at jtimon.cc (=?UTF-8?B?Sm9yZ2UgVGltw7Nu?=)
Date: Mon, 21 Sep 2015 10:24:58 +0200
Subject: [bitcoin-dev] [BIP Proposal] Version bits with timeout and
	delay.
In-Reply-To: <8737y9iw04.fsf@rustcorp.com.au>
References: <87mvwqb132.fsf@rustcorp.com.au>
	<CAE-z3OWLteNyBWuYSkYLZNteOGjDch_fViOV2kpWCaZkXsbu4w@mail.gmail.com>
	<87r3lyjewl.fsf@rustcorp.com.au>
	<CABm2gDqh=Dv2Ygctg+jEt61N_nJDRBMqdZypSPtmfM2QrY4AYQ@mail.gmail.com>
	<CAE-z3OXATJ6HGKqU=vxc8k-yCMAMwXiWQJxvO3D_O256_ZODtw@mail.gmail.com>
	<CABm2gDppFsTbh3JtdJkAkV_GzKFYAOLiEmtQPCgS9O6b7eWFuw@mail.gmail.com>
	<87eghwiu4k.fsf@rustcorp.com.au>
	<CABm2gDrLGHHn96JVpUX3kHcW0qx2fieAaYydb5EC_SGh=2hEFQ@mail.gmail.com>
	<8737y9iw04.fsf@rustcorp.com.au>
Message-ID: <CABm2gDoG19zz80jiwkzGQTpqw-gM06a_0FV2kS=u__DpUxCYhQ@mail.gmail.com>

On Sep 20, 2015 10:58 PM, "Rusty Russell" <rusty at rustcorp.com.au> wrote:
>
> Jorge Tim?n <jtimon at jtimon.cc> writes:
> > I disagree with the importance of this concern and old soft/hardforks
will
> > replace this activation mechanism with height, so that's an argument in
> > favor of using the height from the start. This is "being discussed" in a
> > thread branched from bip99's discussion.
>
> Thanks, I'll have to dig through bitcoin-dev and find it.

The initial thread is linked to from the BIP document (which is in the
bitcoin/bips PR).
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150921/2a2bb088/attachment.html>

From nxtchg at hush.com  Mon Sep 21 08:48:20 2015
From: nxtchg at hush.com (NxtChg)
Date: Mon, 21 Sep 2015 11:48:20 +0300
Subject: [bitcoin-dev] Scaling Bitcoin conference micro-report
In-Reply-To: <ema20a20ae-62b0-483b-90d4-a2cded334b2f@platinum>
References: <55FF2632.2010804@sky-ip.org>
	<ema20a20ae-62b0-483b-90d4-a2cded334b2f@platinum> 
Message-ID: <20150921084821.24D1E404BA@smtp.hushmail.com>


>Larger user base won't necessarily protect against governments if 
>we still have chokepoints they can go after.

This is the critical confusion about Bitcoin decentralization, which leads to this whole recent mess of shouting at each other.

Decentralization is _not_ a way to withstand an attack, if the government "goes after you".

Many people got this idea drilled into their heads in the previous years, that Bitcoin is a "movement" to fight governments, and decentralization is its main weapon.

They confuse Bitcoin and Anonymous.


>What we really need to grow is the number of nodes on the network 
>that participate in its basic infrastructure - namely: miners, validators, etc...

Absolutely. Nobody argues that we shouldn't care about decentralization.

But who's gonna pay for all this? What are the incentives?

We need Bitcoin to get much more popular for this to happen.


From hearn at vinumeris.com  Mon Sep 21 10:30:10 2015
From: hearn at vinumeris.com (Mike Hearn)
Date: Mon, 21 Sep 2015 11:30:10 +0100
Subject: [bitcoin-dev] Scaling Bitcoin conference micro-report
In-Reply-To: <CAOG=w-sBi50zj725BV1urLokF7+hxiQzvH5AAebUZ62_92nbLg@mail.gmail.com>
References: <CADm_WcaLKqhR=WcJ5B52Q9SAAa+AdZY6Kz5OCQVUc_RQm6e9gg@mail.gmail.com>
	<55F9E47D.50507@mattcorallo.com>
	<CAOG=w-t2ZYQbx8+mG5FX8vzgAC_tb8A6KMABmudHQbrquEqX-Q@mail.gmail.com>
	<55FC6EBF.9090504@mattcorallo.com> <20150919014710.GD22598@muck>
	<20150919060639.A775A404B9@smtp.hushmail.com>
	<55FD0737.1080008@voskuil.org>
	<20150919072714.D3349404B9@smtp.hushmail.com>
	<55FD1122.5030107@voskuil.org>
	<20150919075758.820CC404B9@smtp.hushmail.com>
	<55FD225B.1050402@voskuil.org>
	<CA+w+GKQK=aouA_05-GaypgZ9waF5OOF3xWn=V5ih6Mz08s37DA@mail.gmail.com>
	<55FDD951.9010709@gmail.com>
	<CA+w+GKQQKZpv0pT0gNL2maqu8HMB-D=1zGAniRg5qfJ53os=MA@mail.gmail.com>
	<CAOG=w-sBi50zj725BV1urLokF7+hxiQzvH5AAebUZ62_92nbLg@mail.gmail.com>
Message-ID: <CA+w+GKQY2nfdjc_nS2e28_sN6d+46AbGcZ9NQBQge_CTOD6Csg@mail.gmail.com>

>
> Does this conversation have to happen on-list? It seems to have wandered
> incredibly far off-topic.
>

I understand, it does seem off topic. But ..... what was the topic again?
All Jeff's mail and the followups seem to say is there was a meeting where
some people (unnamed) agreed to do something (unspecified) if the metric
used is modified (which doesn't change the fundamental issues).

So there isn't really much on-topic to discuss. If/when Wladimir starts a
thread, with a BIP, and says "this is how it's gonna be in Bitcoin Core",
then there will be things to discuss.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150921/4f6b5c5f/attachment.html>

From rusty at rustcorp.com.au  Mon Sep 21 10:34:06 2015
From: rusty at rustcorp.com.au (Rusty Russell)
Date: Mon, 21 Sep 2015 20:04:06 +0930
Subject: [bitcoin-dev] [BIP Proposal] Version bits with timeout and
	delay.
In-Reply-To: <CABm2gDoG19zz80jiwkzGQTpqw-gM06a_0FV2kS=u__DpUxCYhQ@mail.gmail.com>
References: <87mvwqb132.fsf@rustcorp.com.au>
	<CAE-z3OWLteNyBWuYSkYLZNteOGjDch_fViOV2kpWCaZkXsbu4w@mail.gmail.com>
	<87r3lyjewl.fsf@rustcorp.com.au>
	<CABm2gDqh=Dv2Ygctg+jEt61N_nJDRBMqdZypSPtmfM2QrY4AYQ@mail.gmail.com>
	<CAE-z3OXATJ6HGKqU=vxc8k-yCMAMwXiWQJxvO3D_O256_ZODtw@mail.gmail.com>
	<CABm2gDppFsTbh3JtdJkAkV_GzKFYAOLiEmtQPCgS9O6b7eWFuw@mail.gmail.com>
	<87eghwiu4k.fsf@rustcorp.com.au>
	<CABm2gDrLGHHn96JVpUX3kHcW0qx2fieAaYydb5EC_SGh=2hEFQ@mail.gmail.com>
	<8737y9iw04.fsf@rustcorp.com.au>
	<CABm2gDoG19zz80jiwkzGQTpqw-gM06a_0FV2kS=u__DpUxCYhQ@mail.gmail.com>
Message-ID: <877fnkysbl.fsf@rustcorp.com.au>

Jorge Tim?n <jtimon at jtimon.cc> writes:
> On Sep 20, 2015 10:58 PM, "Rusty Russell" <rusty at rustcorp.com.au> wrote:
>>
>> Jorge Tim?n <jtimon at jtimon.cc> writes:
>> > I disagree with the importance of this concern and old soft/hardforks
> will
>> > replace this activation mechanism with height, so that's an argument in
>> > favor of using the height from the start. This is "being discussed" in a
>> > thread branched from bip99's discussion.
>>
>> Thanks, I'll have to dig through bitcoin-dev and find it.
>
> The initial thread is linked to from the BIP document (which is in the
> bitcoin/bips PR).

Thanks, read and digested.

The good news is that timeout via GetMedianTimePast() doesn't have any
effect on "should I accept this to mempool", and seems pretty
uncontroversial.   Activation is by block number once vote hits 95%, so
that too is fairly simple to implement.

Cheers,
Rusty.

From milly at bitcoins.info  Mon Sep 21 11:45:41 2015
From: milly at bitcoins.info (Milly Bitcoin)
Date: Mon, 21 Sep 2015 07:45:41 -0400
Subject: [bitcoin-dev] Scaling Bitcoin conference micro-report
In-Reply-To: <CAK_HAC8TUfLavLjUQTVLzeqf5qppbPASd_W-gkpUpNWqDayC0w@mail.gmail.com>
References: <55FF3878.4060501@bitcoins.info>
	<em36157ae1-7c4b-488f-88d6-5a8df930ef0f@platinum>
	<CAGLBAhe+=Qf7zJXhjZAJBGirAQQ2XhG6Q=Deruo4VbRxkj7YPA@mail.gmail.com>
	<CAK_HAC8TUfLavLjUQTVLzeqf5qppbPASd_W-gkpUpNWqDayC0w@mail.gmail.com>
Message-ID: <55FFEDE5.6040508@bitcoins.info>

On 9/21/2015 1:04 AM, Corey Haddad via bitcoin-dev wrote:
 > If it turns out that the blocksize divide is hinging on differing
 > developer views on the nature of the threat posed by governments,
 > perhaps it would be better to defer to people who specialize in that
 > area.  ...
...
 > The main idea here is that if this is a politics question, please
 > consider you may be outside your area of expertise.


That is a great suggestion.  Jerry Brito is the number one guy to go to 
for this information.  You will find that many early Bitcoiners are 
completely clueless as to the motivations of regulators.  However, you 
still have the problem that some influential developers know Bitcoin but 
otherwise are completely ignorant.  They will go around claiming 
everyone who discusses regulation is a "statist" and so forth.  Some 
people on this list actually claimed I am "statist" simply by pointing 
out that governments do both good and bad things and that most people 
trust and depend on governments to a certain extent.  That is simply a 
fact, it does not support any agenda.

Another example are the developers who are going around claiming a 
stress test is a criminal action against those running nodes.  Such a 
claim brings all kinds of complicated legal questions about the 
liability of people running nodes.  Instead of contacting someone who 
researched the issue (such as Peter ?urda who ended up posting several 
sensible replies) the developer posted some hyperbolic article on Reddit 
which did nothing but promote misinformation.  On top of that it makes 
Bitcoiners look totally ridiculous.  One day they claim Bitcoin will 
collapse all these government institutions and the next day they want 
those same government institutions to arrest people for overflowing 
their memory pool.

One final issue about the conference ... the developers should not be 
accepting advertisers engaged in nefarious activities.  In particular 
BicoinTalk was accepted as an advertiser.  It is well known that site 
has promoted fake banks where many users lost money 
(CoinLeders/Inputs.io), illegal investments schemes where,any people 
lost funds (BLBSE) and whole host of questionable, illegal, immoral, and 
unethical activities.  Just because the guy who runs the site wrote a 
block explorer that does not mean the developers should blindly promote 
a highly questionable web site that damages Bitcoin's reputation.  The 
people running these events need to start acting responsibly.

Russ











From jl2012 at xbt.hk  Mon Sep 21 13:01:52 2015
From: jl2012 at xbt.hk (jl2012 at xbt.hk)
Date: Mon, 21 Sep 2015 09:01:52 -0400
Subject: [bitcoin-dev] Weekly development meetings on IRC
In-Reply-To: <CADJgMzvcR8O1pQDFVAp2Ndu-a7-VoCtckcPSogQvMUqa6a55bA@mail.gmail.com>
References: <20150918010709.GB5251@amethyst.visucore.com>
	<55FC70A5.9080603@mattcorallo.com>
	<CADJgMzsuBrXT1qOAScu+fv_A7Du1XrFoix8nSO14qXj2YD4KtQ@mail.gmail.com>
	<55FC7394.4060901@mattcorallo.com>
	<CAAS2fgR59+iFjg5n6des50rJCA8vkRAvjKC3QgRjiYSyy-bA9A@mail.gmail.com>
	<CADJgMzvcR8O1pQDFVAp2Ndu-a7-VoCtckcPSogQvMUqa6a55bA@mail.gmail.com>
Message-ID: <2e66cbd62135915d86318ce5e73788ab@xbt.hk>

It is possible to softfork. Just use Iceland time. Iceland time = UTC 
without DST

Btc Drak via bitcoin-dev ? 2015-09-18 16:34 ??:
> Urgh... Can we hardfork time? It's clearly in need of an upgrade...
> 
> On Fri, Sep 18, 2015 at 9:31 PM, Gregory Maxwell <gmaxwell at gmail.com>
> wrote:
> 
>> On Fri, Sep 18, 2015 at 8:27 PM, Matt Corallo via bitcoin-dev
>> <bitcoin-dev at lists.linuxfoundation.org> wrote:
>>> Google Calendar is localized, but has an option to change the
>> timezone
>>> of an event, it just doesnt have UTC in its options. So, yes, we
>> should
>>> use something that observes DST in roughly the same way as
>> everyone else
>>> - CEST/PDT/EST/etc.
>> 
>> uh. There is fairly little global consistency in DST usage. Lots of
>> places do dst on different dates.
>> 
>> So if it's in some DST timezone it's likely to move twice each
>> change
>> for some subset of the people who do it.
>> 
>> E.g. europe and US end DST one week apart.
> 
> 
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev


From laanwj at gmail.com  Mon Sep 21 13:29:15 2015
From: laanwj at gmail.com (Wladimir J. van der Laan)
Date: Mon, 21 Sep 2015 15:29:15 +0200
Subject: [bitcoin-dev] Weekly development meetings on IRC
In-Reply-To: <20150918010709.GB5251@amethyst.visucore.com>
References: <20150918010709.GB5251@amethyst.visucore.com>
Message-ID: <20150921132914.GA2702@amethyst.visucore.com>

On Fri, Sep 18, 2015 at 03:07:10AM +0200, Wladimir J. van der Laan wrote:
> Hello,
> 
> At Monday's code sprint we had a good idea to schedule a regular developer meeting in #bitcoin-dev.
> 
> Attendance is of course voluntary, but it may be good to have a time that many people are expected to be present and current issues can be discussed.
> 
> Any preference for days/times?
> 
> What about e.g. every week 15:00-16:00 UTC on Thursday?

>From Jonasschnelli's doodle ( http://doodle.com/poll/cihug53sa8u4h2in#table ) it appears that Thursday 19:00 UTC - 20:00 UTC is the most popular time.

I think scheduling the meeting in UTC (=Iceland time) makes sense internationally because different locales have different DST or no DST at all, so all in all that makes it more complex. It's true that this can make a convenient time less convenient half of the year, for some people, but I don't think there's a time that works for everyone anyway...

Wladimir

From kiwigb at yahoo.com  Mon Sep 21 13:51:29 2015
From: kiwigb at yahoo.com (gb)
Date: Mon, 21 Sep 2015 15:51:29 +0200
Subject: [bitcoin-dev] Weekly development meetings on IRC
In-Reply-To: <20150921132914.GA2702@amethyst.visucore.com>
References: <20150918010709.GB5251@amethyst.visucore.com>
	<20150921132914.GA2702@amethyst.visucore.com>
Message-ID: <1442843489.2507.10.camel@yahoo.com>


Although the planning for this a bit far along now, one consideration I
might add from experience on working with other transglobal IT projects
is the effect of timezones on local mood/alertness/awareness etc. The
guys at 9am pinging on their first coffee in the antipodes will be in a
different mindset than those at 21:00 in Europe, and this is
unavoidable. What is possible is to schedule the meeting every other
week at a time that is better for the "other" half, whoever that might
be. This comes at the cost of not having an exactly same time set every
week.

On Mon, 2015-09-21 at 15:29 +0200, Wladimir J. van der Laan via
bitcoin-dev wrote:
> On Fri, Sep 18, 2015 at 03:07:10AM +0200, Wladimir J. van der Laan wrote:
> > Hello,
> > 
> > At Monday's code sprint we had a good idea to schedule a regular developer meeting in #bitcoin-dev.
> > 
> > Attendance is of course voluntary, but it may be good to have a time that many people are expected to be present and current issues can be discussed.
> > 
> > Any preference for days/times?
> > 
> > What about e.g. every week 15:00-16:00 UTC on Thursday?
> 
> From Jonasschnelli's doodle ( http://doodle.com/poll/cihug53sa8u4h2in#table ) it appears that Thursday 19:00 UTC - 20:00 UTC is the most popular time.
> 
> I think scheduling the meeting in UTC (=Iceland time) makes sense internationally because different locales have different DST or no DST at all, so all in all that makes it more complex. It's true that this can make a convenient time less convenient half of the year, for some people, but I don't think there's a time that works for everyone anyway...
> 
> Wladimir
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev



From morcos at gmail.com  Mon Sep 21 15:02:20 2015
From: morcos at gmail.com (Alex Morcos)
Date: Mon, 21 Sep 2015 11:02:20 -0400
Subject: [bitcoin-dev] Proposed new policy for transactions that depend
 on other unconfirmed transactions
In-Reply-To: <CAJN5wHVzzo-dD6FFyaydEDm27HK2OkWxC0o0Pxcy-N9wTfv8Gw@mail.gmail.com>
References: <CAPWm=eWuvC8zYM_ipAnaQttKQQG2Vas6np_bAFkxG31eR5w=xQ@mail.gmail.com>
	<55D77A7F.40402@mattcorallo.com>
	<CAJN5wHVzzo-dD6FFyaydEDm27HK2OkWxC0o0Pxcy-N9wTfv8Gw@mail.gmail.com>
Message-ID: <CAPWm=eW-g9F5YZ9EdqXGzpzvs2mQJ8N5wKG15Ofz4cWGaHQ0BQ@mail.gmail.com>

Thanks for everyone's review.  These policy changes have been merged in to
master in 6654 <https://github.com/bitcoin/bitcoin/pull/6654>, which just
implements these limits and no mempool limiting yet.  The default ancestor
package size limit is 900kb not 1MB.

Yes I think these limits are generous, but they were designed to be as
generous as was computationally feasible so they were unobjectionable
(since the existing policy was no limits).  This does not preclude future
changes to policy that would reduce these limits.





On Fri, Aug 21, 2015 at 3:52 PM, Danny Thorpe <danny.thorpe at gmail.com>
wrote:

> The limits Alex proposed are generous (bordering on obscene!), but
> dropping that down to allowing only two levels of chained unconfirmed
> transactions is too tight.
>
> Use case: Brokered asset transfers may require sets of transactions with a
> dependency tree depth of 3 to be published together. ( N seller txs, 1
> broker bridge tx, M buyer txs )
>
> If the originally proposed depth limit of 100 does not provide a
> sufficient cap on memory consumption or loop/recursion depth, a depth limit
> of 10 would provide plenty of headroom for this 3 level use case and
> similar patterns.
>
> -Danny
>
> On Fri, Aug 21, 2015 at 12:22 PM, Matt Corallo via bitcoin-dev <
> bitcoin-dev at lists.linuxfoundation.org> wrote:
>
>> I dont see any problem with such limits. Though, hell, if you limited
>> entire tx dependency trees (ie transactions and all required unconfirmed
>> transactions for them) to something like 10 txn, maximum two levels
>> deep, I also wouldnt have a problem.
>>
>> Matt
>>
>> On 08/14/15 19:33, Alex Morcos via bitcoin-dev wrote:
>> > Hi everyone,
>> >
>> >
>> > I'd like to propose a new set of requirements as a policy on when to
>> > accept new transactions into the mempool and relay them.  This policy
>> > would affect transactions which have as inputs other transactions which
>> > are not yet confirmed in the blockchain.
>> >
>> > The motivation for this policy is 6470
>> > <https://github.com/bitcoin/bitcoin/pull/6470> which aims to limit the
>> > size of a mempool.  As discussed in that pull
>> > <https://github.com/bitcoin/bitcoin/pull/6470#issuecomment-125324736>,
>> > once the mempool is full a new transaction must be able to pay not only
>> > for the transaction it would evict, but any dependent transactions that
>> > would be removed from the mempool as well.  In order to make sure this
>> > is always feasible, I'm proposing 4 new policy limits.
>> >
>> > All limits are command line configurable.
>> >
>> > The first two limits are required to make sure no chain of transactions
>> > will be too large for the eviction code to handle:
>> >
>> > Max number of descendant txs : No transaction shall be accepted if it
>> > would cause another transaction in the mempool to have too many
>> > descendant transactions (all of which would have to be evicted if the
>> > ancestor transaction was evicted).  Default: 1000
>> >
>> > Max descendant size : No transaction shall be accepted if it would cause
>> > another transaction in the mempool to have the total size of all its
>> > descendant transactions be too great.  Default : maxmempool / 200  =
>> 2.5MB
>> >
>> > The third limit is required to make sure calculating the state required
>> > for sorting and limiting the mempool and enforcing the first 2 limits is
>> > computationally feasible:
>> >
>> > Max number of ancestor txs:  No transaction shall be accepted if it has
>> > too many ancestor transactions which are not yet confirmed (ie, in the
>> > mempool). Default: 100
>> >
>> > The fourth limit is required to maintain the pre existing policy goal
>> > that all transactions in the mempool should be mineable in the next
>> block.
>> >
>> > Max ancestor size: No transaction shall be accepted if the total size of
>> > all its unconfirmed ancestor transactions is too large.  Default: 1MB
>> >
>> > (All limits include the transaction itself.)
>> >
>> > For reference, these limits would have affected less than 2% of
>> > transactions entering the mempool in April or May of this year.  During
>> > the period of 7/6 through 7/14, while the network was under stress test,
>> > as many as 25% of the transactions would have been affected.
>> >
>> > The code to implement the descendant package tracking and new policy
>> > limits can be found in 6557
>> > <https://github.com/bitcoin/bitcoin/pull/6557> which is built off of
>> 6470.
>> >
>> > Thanks,
>> > Alex
>> >
>> >
>> >
>> > _______________________________________________
>> > bitcoin-dev mailing list
>> > bitcoin-dev at lists.linuxfoundation.org
>> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>> >
>> _______________________________________________
>> bitcoin-dev mailing list
>> bitcoin-dev at lists.linuxfoundation.org
>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150921/9c5e53e6/attachment.html>

From justus at openbitcoinprivacyproject.org  Mon Sep 21 17:15:12 2015
From: justus at openbitcoinprivacyproject.org (Justus Ranvier)
Date: Mon, 21 Sep 2015 12:15:12 -0500
Subject: [bitcoin-dev] Hash of UTXO set as consensus-critical
In-Reply-To: <F59E7FFD-D4C7-45D3-8224-4C1D62D8AAB6@gmail.com>
References: <5D55F6EC-801B-4607-882F-B76CF57298B1@gmail.com>
	<55FC6951.9010704@gmail.com>
	<A16FDC0B-877F-47F1-A631-77F46251BB07@gmail.com>
	<55FCC8B5.9070906@openbitcoinprivacyproject.org>
	<4424FA4D-C84F-43DD-BA7F-BAC2D570A373@gmail.com>
	<55FD990F.8060102@openbitcoinprivacyproject.org>
	<F59E7FFD-D4C7-45D3-8224-4C1D62D8AAB6@gmail.com>
Message-ID: <56003B20.1030504@openbitcoinprivacyproject.org>

On 19/09/15 15:11, Rune K. Svendsen wrote:
> An honest miner is a miner that supports the network by building on top of the best valid chain. A malicious miner is one who wants to disrupt the Bitcoin network, not support it, for example by executing a 51% attack which mines empty blocks on top of the best chain.

This isn't a particularly good definition.

"An honest miner is a miner that supports the network by building on top
of the best valid chain."

What is the "best valid chain"? The one with the most proof of work? The
one that meets some other definition of "best"?

"A malicious miner is one who wants to disrupt the Bitcoin network, not
support it"

This is a tautology, the equivalent of saying "a malicious miner is a
miner that is malicious" A true, but entirely useless, statement.

"for example by executing a 51% attack which mines empty blocks on top
of the best chain."

Again, you're begging the question with the word "attack", because
that's what you're supposed to demonstrate.

Apparently the difference between honest mining and malicious mining is
empty blocks? You've said in both cases the miners are extending the
"best valid chain". Is extending the best valid chain with an empty
block always a malicious act?

What's the significance of 51% in this definition? Is the same empty
block which extended the best valid chain honest if the miner who
produced it has 49% of the network hashing power and malicious if they
add a few more ASIC units?

-- 
Justus Ranvier
Open Bitcoin Privacy Project
http://www.openbitcoinprivacyproject.org/
justus at openbitcoinprivacyproject.org
E7AD 8215 8497 3673 6D9E 61C4 2A5F DA70 EAD9 E623
-------------- next part --------------
A non-text attachment was scrubbed...
Name: 0xEAD9E623.asc
Type: application/pgp-keys
Size: 18442 bytes
Desc: not available
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150921/1a8e96bd/attachment-0001.bin>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 801 bytes
Desc: OpenPGP digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150921/1a8e96bd/attachment-0001.sig>

From laanwj at gmail.com  Tue Sep 22 14:03:02 2015
From: laanwj at gmail.com (Wladimir J. van der Laan)
Date: Tue, 22 Sep 2015 16:03:02 +0200
Subject: [bitcoin-dev] Weekly development meetings on IRC
In-Reply-To: <1442843489.2507.10.camel@yahoo.com>
References: <20150918010709.GB5251@amethyst.visucore.com>
	<20150921132914.GA2702@amethyst.visucore.com>
	<1442843489.2507.10.camel@yahoo.com>
Message-ID: <20150922140259.GA958@amethyst.visucore.com>

On Mon, Sep 21, 2015 at 03:51:29PM +0200, gb wrote:
> 
> Although the planning for this a bit far along now, one consideration I
> might add from experience on working with other transglobal IT projects

Nah, we can always change the scheduling later... But let's first try it out with one time.

W

From laanwj at gmail.com  Tue Sep 22 14:36:29 2015
From: laanwj at gmail.com (Wladimir J. van der Laan)
Date: Tue, 22 Sep 2015 16:36:29 +0200
Subject: [bitcoin-dev] Weekly development meetings on IRC: schedule
Message-ID: <20150922143628.GB958@amethyst.visucore.com>

Hello,

There was overwhelming response that weekly IRC meetings are a good thing.

Thanks to the doodle site we were able to select a time slot that everyone (that voted) is available:

    Thursday 19:00-20:00 UTC, every week, starting September 24 (next Thursday)

I created a shared Google Calendar here:
https://www.google.com/calendar/embed?src=MTFwcXZkZ3BkOTlubGliZjliYTg2MXZ1OHNAZ3JvdXAuY2FsZW5kYXIuZ29vZ2xlLmNvbQ

The timezone of this calendar is Reykyavik (Iceland) which is UTC+0. However, you can use the button on the lower right to add the calendar to your own calendar, which will then show the meeting in your own timezone.

See you then,

Wladimir


From jtimon at jtimon.cc  Tue Sep 22 17:45:00 2015
From: jtimon at jtimon.cc (=?UTF-8?B?Sm9yZ2UgVGltw7Nu?=)
Date: Tue, 22 Sep 2015 19:45:00 +0200
Subject: [bitcoin-dev] Fill-or-kill transaction
In-Reply-To: <C9A1D16E-03F7-4860-8E9B-32A98E06CE49@petertodd.org>
References: <a50b82c156c805a284386d80a42cc926@xbt.hk>
	<CAOG=w-vGqsAcw5vdY8SaGVe4Q6XX1J=GCsZftWgjES_N_5c2pA@mail.gmail.com>
	<CABm2gDp_afyqskEV8QmO43=-6R_2OJm36GVQxcQO_3ao2jC1gw@mail.gmail.com>
	<C9A1D16E-03F7-4860-8E9B-32A98E06CE49@petertodd.org>
Message-ID: <CABm2gDrqLf_YmG9BtxfANkfbXpA_7sm79ZoG5cJHog0a2O=4BA@mail.gmail.com>

On Fri, Sep 18, 2015 at 12:44 AM, Peter Todd <pete at petertodd.org> wrote:
> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA512
>
>
>
> On 17 September 2015 12:14:38 GMT-07:00, "Jorge Tim?n via bitcoin-dev" <bitcoin-dev at lists.linuxfoundation.org> wrote:
>>Fill or kill us normally used for trades and I think it can be
>>confusing.
>>Previous times this has been discussed it has been discussed under
>>nExpiryTime or op_height (which enables expiration), for example, in
>>the
>>freimarkets white paper.
>>
>>As Mark points out this can be made safe by requiring that all the
>>outputs
>>of a transaction that can expire have op_maturity/csv/rcltv of 100.
>>That
>>makes them as reorg-safe as coinbase transactions. Unfortunately this
>>doesn't play very well with p2sh...
>
> Why wouldn't that work with p2sh? It can be implemented by a "treat like Coinbase" flag in the UTXO set, set when the output is created.

That would work. I was thinking about requiring OP_MATURITY 100 (or
greater than 100) in all the scriptPubKey's of the expiry transaction.

From jtimon at jtimon.cc  Tue Sep 22 18:12:41 2015
From: jtimon at jtimon.cc (=?UTF-8?B?Sm9yZ2UgVGltw7Nu?=)
Date: Tue, 22 Sep 2015 20:12:41 +0200
Subject: [bitcoin-dev] libconsensus and bitcoin development process
In-Reply-To: <CADm_WcY8Vy+k+5BaBS+jV6D6tmSXrok8rAxoPxxKOzUhyPWgMg@mail.gmail.com>
References: <CADm_WcY8Vy+k+5BaBS+jV6D6tmSXrok8rAxoPxxKOzUhyPWgMg@mail.gmail.com>
Message-ID: <CABm2gDoXa9ERY7iSsouxjypq1PwV_9HuBrtFQ_jrs5pGFst=KQ@mail.gmail.com>

On Tue, Sep 15, 2015 at 6:10 AM, Jeff Garzik via bitcoin-dev
<bitcoin-dev at lists.linuxfoundation.org> wrote:
> [collating a private mail and a github issue comment, moving it to a
> better forum]
>
> On libconsensus
> ---------------
> In general there exists the reasonable goal to move consensus state
> and code to a specific, separate lib.
>
> To someone not closely reviewing the seemingly endless stream of
> libconsensus refactoring PRs, the 10,000 foot view is that there is a
> rather random stream of refactors that proceed in fits and starts
> without apparent plan or end other than a one sentence "isolate
> consensus state and code" summary.
>
> I am hoping that
> * There is some plan
> * We will not see a five year stream of random consensus code movement
> patches causing lots of downstream developer headaches.
>
> I read every code change in every pull request that comes into
> github/bitcoin/bitcoin with three exceptions:
> * consensus code movement changes - too big, too chaotic, too
> frequent, too unfocused, laziness guarantees others will inevitably
> ACK it without me.
> * some non-code changes (docs)
> * ignore 80% of the Qt changes
>
> As with any sort of refactoring, they are easy to prove correct, easy
> to reason, and therefore quick and easy to ACK and merge.
>
> Refactors however have a very real negative impact.
> bitcoin/bitcoin.git is not only the source tree in the universe.
> Software engineers at home, at startups, and at major companies are
> maintaining branches of their own.
>
> It is very very easy to fall into a trap where a project is merging
> lots of cosmetic changes and not seeing the downstream ripple effects.
> Several people complained to me at the conference about all the code
> movement changes breaking their own work, causing them to stay on
> older versions of bitcoin due to the effort required to rebase to each
> new release version - and I share those complaints.
>
> Complex code changes with longer development cycles than simple code
> movement patches keep breaking.  It is very frustrating, and causes
> folks to get trapped between a rock and a hard place:
> - Trying to push non-trivial changes upstream is difficult, for normal
> and reasonable reasons (big important changes need review etc.).
> - Maintaining non-trivial changes out of tree is also painful, for the
> aforementioned reasons.
>
> Reasonable work languishes in constant-rebase hell, and incentivizes
> against keeping up with the latest tree.
>
>
> Aside from the refactor, libconsensus appears to be engineering in the
> dark.  Where is any sort of plan?  I have low standards - a photo of a
> whiteboard or youtube clip will do.

Just because you don't understand the changes proposed it doesn't mean
that they are random.
I may have done a poor job in communicating "my plan for libconsensus"
but I have tried many times and in many ways.
#bitcoin-dev logs show that I have not worked "in the dark" at all, on
the contrary, I've been very tenacious when asking for review and
opinions, to the point that several people (at least @laanwj and
@theuni have complained about their github inboxes being full of
"spam").
This is a relatively recent thread where I describe my plan:
http://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-July/009568.html
Not my first attempt on this list.

It is very frustrating that everybody seems to agree that separating
libconsensus is a priority to maximize the number of people that can
safely contribute to the project, but at the same time, nobody thinks
that reviewing the necessary refactors to do so is a priority.
I tried creating big PRs for people to see "the big picture" #5946 but
those were too many commits and nobody wanted to read it. Gavin asked
for an API.
So I tried a smaller step: exposing just VerifyHeader in libconsensus
and leave VerifyTx and VerifyBlock for later #5995
Again, this was "too big" and "a moving target". In the meantime I
always had smaller one-little-step PRs that were part of a longer
branch:

** [8/8] MERGED Consensus
- [X] Consensus: Decouple pow from chainparams #5812 [consensuspow]
- [X] MOVEONLY: Move constants and globals to consensus.h #5696
[consensus_policy0]
- [X] Chainparams: Refactor: Decouple IsSuperMajority from Params()
#5968 [params_consensus]
- [X] Remove redundant getter CChainParams::SubsidyHalvingInterval()
#5996 [params_subsidy]
- [X] Separate CValidationState from main #5669 [consensus]
- [X] Consensus: Decouple ContextualCheckBlockHeader from checkpoints
#5975 [consensus_checkpoints]
- [X] Separate Consensus::CheckTxInputs and GetSpendHeight in
CheckInputs #6061 [consensus_inputs]
- [X] Bugfix: Don't check the genesis block header before accepting it
#6299 [5975-quick-fix]
** [5/5] DELETED
*** DELETED Refactor: Create CCoinsViewEfficient interface for
CCoinsViewCache #5747 [coins]
*** DELETED Chainparams: Explicit Consensus::Params arg in consensus
functions #6024 [params_consensus2]
*** DELETED MOVEONLY: Move most of consensus functions (pre-block)
#6051 [consensus_moveonly] (depends on consensus-blocksize-0.12.99)
*** DELETED Consensus: Refactor: Separate CheckFinalTx from
main::IsFinalTx #6063 [consensus_finaltx]
*** DELETED Consensus: Refactor: Turn CBlockIndex::GetMedianTimePast
into independent function #6009 [consensus_mediantime]
*** DELETED Consensus: Adapt declarations of most obviously consensus
functions #6591 [consensus-params-0.12.99]
*** DELETED Consensus: Move blocksize and related parameters to
consensusparams ...without removing consensus/consensus.h [#6526
alternative] #6625 [consensus-blocksize-0.12.99]

After a while I stop rebasing the longer branches and just maintained
a few small consensus-related PRs at a time.

Now I consolidated 3 of them in

*** REVIEW Optimizations: Consensus: In AcceptToMemoryPool,
ConnectBlock, and CreateNewBlock #6445 [consensus-txinputs-0.12.99]

with the hope that it would be merged relatively fast.
After that it will be much simpler to start talking about potential C
APIs for VerifyHeader, VerifyTx and VerifyBlock; as well as separating
the library to a subtree.

I'm more than happy to answer any questions anyone may have about any
of the PRs or commits, until everybody interested is convinced that
there's nothing random in the proposed changes.
I'm also more than happy to get advice on how to better communicate my
plans and structure my PRs.

From jtimon at jtimon.cc  Tue Sep 22 18:36:14 2015
From: jtimon at jtimon.cc (=?UTF-8?B?Sm9yZ2UgVGltw7Nu?=)
Date: Tue, 22 Sep 2015 20:36:14 +0200
Subject: [bitcoin-dev] Long-term vision for bitcoind (was libconsensus and
 bitcoin development process)
Message-ID: <CABm2gDrx4uDVPFL_tWUsvh_cN6qV903WCmgpA_Kj9Deq+Q3yfA@mail.gmail.com>

On Fri, Sep 18, 2015 at 2:07 AM, Wladimir J. van der Laan via
bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:
> My long-term vision of bitcoind is a P2P node with validation and blockchain store, with a couple of data sources that can be subscribed to or pulled from.

I agree with this long term vision.
Here's how I think it could happen:

1) Libconsensus is completed and moved to a subtree (which has libsecp
as an internal subtree)

2) Bitcoind becomes a subtree of bitcoin-wallet (which has
bitcoin-wallet and bitcoin-qt)

Without aggressively changing it for this purpose, libconsensus should
tend to become C, like libsecp, which is better for proving
correctness.
Hopefully at some point it won't take much to move to C.

Upper layers should move to C++11

Don't focus on the git subtrees, the basic architecture is bitcoin-qt
on top of bitcoin-wallet, bitcoin-wallet on top of bitcoind (and
friends like bitcoin-cli and bitcoin-tx), bitcoind on top of
libconsensus on top of libsecp256k1.

I believe this would maximize the number of people who can safely
contribute to the project.
I also believe this is the architecture most contributors have in mind
for the long term, but I may be wrong about it.

Criticisms to this plan?

From dscotese at litmocracy.com  Tue Sep 22 23:49:11 2015
From: dscotese at litmocracy.com (Dave Scotese)
Date: Tue, 22 Sep 2015 16:49:11 -0700
Subject: [bitcoin-dev] libconsensus and bitcoin development process
In-Reply-To: <CABm2gDoXa9ERY7iSsouxjypq1PwV_9HuBrtFQ_jrs5pGFst=KQ@mail.gmail.com>
References: <CADm_WcY8Vy+k+5BaBS+jV6D6tmSXrok8rAxoPxxKOzUhyPWgMg@mail.gmail.com>
	<CABm2gDoXa9ERY7iSsouxjypq1PwV_9HuBrtFQ_jrs5pGFst=KQ@mail.gmail.com>
Message-ID: <CAGLBAhciSUZuKTcKmKFxy5O3Pmou=_-PG9Dk5m=y9p3TSBikAA@mail.gmail.com>

If I'm reading this situation correctly, Jeff is basically pointing out
that developers need more links (hooks, rungs, handholds, data points,
whatever you want to call them) so that they can see all the things his
email insinuated are missing (a plan, order, sense, etc.).  He didn't say
these things were missing, but that it kind of feels like it from the
10,000 foot view.

If you use Google to search the list, as in <<site:lists.linuxfoundation.org
libconsensus plan>> you DO NOT get the page Jorge gave.  He wrote that
page, so he had a good idea what to search for to find it again.  I just
want to recommend that when you describe the work you're doing on bitcoin,
imagine several different ways people might try to find this description in
the future and make them work.  In other words, Jorge could have put "A
plan for abstracting out libconsensus" in the email where he wrote "Here
are some things that need to happen first..."

Likewise, if Jeff had searched for <<site:lists.linuxfoundation.org
libconsensus plan>> (maybe he did, but he didn't list any results), he may
have found enough clues to see Jorge's overall plan.  The "site:" keyword
on Google fascinated me when I discovered it, so I let it inspire this
email :-)

Maybe someone can explain this if I have it wrong: A few people are able to
pull code into Bitcoin/bitcoin.  Isn't is possible that those few people
can agree to merge in a lot of refactor-hell PRs for those making the
requests, but postpone them to that one-week-per-month that someone
suggested?  The idea of letting that "hell" come in (predictable) waves is
excellent and I was hoping to see some agreement.  But I don't know who
those few are, so even if they all wrote "Yeah, we'll do that," I wouldn't
recognize that I got what I wanted.

notplato

On Tue, Sep 22, 2015 at 11:12 AM, Jorge Tim?n <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> On Tue, Sep 15, 2015 at 6:10 AM, Jeff Garzik via bitcoin-dev
> <bitcoin-dev at lists.linuxfoundation.org> wrote:
> > [collating a private mail and a github issue comment, moving it to a
> > better forum]
> >
> > On libconsensus
> > ---------------
> > In general there exists the reasonable goal to move consensus state
> > and code to a specific, separate lib.
> >
> > To someone not closely reviewing the seemingly endless stream of
> > libconsensus refactoring PRs, the 10,000 foot view is that there is a
> > rather random stream of refactors that proceed in fits and starts
> > without apparent plan or end other than a one sentence "isolate
> > consensus state and code" summary.
> >
> > I am hoping that
> > * There is some plan
> > * We will not see a five year stream of random consensus code movement
> > patches causing lots of downstream developer headaches.
> >
> > I read every code change in every pull request that comes into
> > github/bitcoin/bitcoin with three exceptions:
> > * consensus code movement changes - too big, too chaotic, too
> > frequent, too unfocused, laziness guarantees others will inevitably
> > ACK it without me.
> > * some non-code changes (docs)
> > * ignore 80% of the Qt changes
> >
> > As with any sort of refactoring, they are easy to prove correct, easy
> > to reason, and therefore quick and easy to ACK and merge.
> >
> > Refactors however have a very real negative impact.
> > bitcoin/bitcoin.git is not only the source tree in the universe.
> > Software engineers at home, at startups, and at major companies are
> > maintaining branches of their own.
> >
> > It is very very easy to fall into a trap where a project is merging
> > lots of cosmetic changes and not seeing the downstream ripple effects.
> > Several people complained to me at the conference about all the code
> > movement changes breaking their own work, causing them to stay on
> > older versions of bitcoin due to the effort required to rebase to each
> > new release version - and I share those complaints.
> >
> > Complex code changes with longer development cycles than simple code
> > movement patches keep breaking.  It is very frustrating, and causes
> > folks to get trapped between a rock and a hard place:
> > - Trying to push non-trivial changes upstream is difficult, for normal
> > and reasonable reasons (big important changes need review etc.).
> > - Maintaining non-trivial changes out of tree is also painful, for the
> > aforementioned reasons.
> >
> > Reasonable work languishes in constant-rebase hell, and incentivizes
> > against keeping up with the latest tree.
> >
> >
> > Aside from the refactor, libconsensus appears to be engineering in the
> > dark.  Where is any sort of plan?  I have low standards - a photo of a
> > whiteboard or youtube clip will do.
>
> Just because you don't understand the changes proposed it doesn't mean
> that they are random.
> I may have done a poor job in communicating "my plan for libconsensus"
> but I have tried many times and in many ways.
> #bitcoin-dev logs show that I have not worked "in the dark" at all, on
> the contrary, I've been very tenacious when asking for review and
> opinions, to the point that several people (at least @laanwj and
> @theuni have complained about their github inboxes being full of
> "spam").
> This is a relatively recent thread where I describe my plan:
>
> http://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-July/009568.html
> Not my first attempt on this list.
>
> It is very frustrating that everybody seems to agree that separating
> libconsensus is a priority to maximize the number of people that can
> safely contribute to the project, but at the same time, nobody thinks
> that reviewing the necessary refactors to do so is a priority.
> I tried creating big PRs for people to see "the big picture" #5946 but
> those were too many commits and nobody wanted to read it. Gavin asked
> for an API.
> So I tried a smaller step: exposing just VerifyHeader in libconsensus
> and leave VerifyTx and VerifyBlock for later #5995
> Again, this was "too big" and "a moving target". In the meantime I
> always had smaller one-little-step PRs that were part of a longer
> branch:
>
> ** [8/8] MERGED Consensus
> - [X] Consensus: Decouple pow from chainparams #5812 [consensuspow]
> - [X] MOVEONLY: Move constants and globals to consensus.h #5696
> [consensus_policy0]
> - [X] Chainparams: Refactor: Decouple IsSuperMajority from Params()
> #5968 [params_consensus]
> - [X] Remove redundant getter CChainParams::SubsidyHalvingInterval()
> #5996 [params_subsidy]
> - [X] Separate CValidationState from main #5669 [consensus]
> - [X] Consensus: Decouple ContextualCheckBlockHeader from checkpoints
> #5975 [consensus_checkpoints]
> - [X] Separate Consensus::CheckTxInputs and GetSpendHeight in
> CheckInputs #6061 [consensus_inputs]
> - [X] Bugfix: Don't check the genesis block header before accepting it
> #6299 [5975-quick-fix]
> ** [5/5] DELETED
> *** DELETED Refactor: Create CCoinsViewEfficient interface for
> CCoinsViewCache #5747 [coins]
> *** DELETED Chainparams: Explicit Consensus::Params arg in consensus
> functions #6024 [params_consensus2]
> *** DELETED MOVEONLY: Move most of consensus functions (pre-block)
> #6051 [consensus_moveonly] (depends on consensus-blocksize-0.12.99)
> *** DELETED Consensus: Refactor: Separate CheckFinalTx from
> main::IsFinalTx #6063 [consensus_finaltx]
> *** DELETED Consensus: Refactor: Turn CBlockIndex::GetMedianTimePast
> into independent function #6009 [consensus_mediantime]
> *** DELETED Consensus: Adapt declarations of most obviously consensus
> functions #6591 [consensus-params-0.12.99]
> *** DELETED Consensus: Move blocksize and related parameters to
> consensusparams ...without removing consensus/consensus.h [#6526
> alternative] #6625 [consensus-blocksize-0.12.99]
>
> After a while I stop rebasing the longer branches and just maintained
> a few small consensus-related PRs at a time.
>
> Now I consolidated 3 of them in
>
> *** REVIEW Optimizations: Consensus: In AcceptToMemoryPool,
> ConnectBlock, and CreateNewBlock #6445 [consensus-txinputs-0.12.99]
>
> with the hope that it would be merged relatively fast.
> After that it will be much simpler to start talking about potential C
> APIs for VerifyHeader, VerifyTx and VerifyBlock; as well as separating
> the library to a subtree.
>
> I'm more than happy to answer any questions anyone may have about any
> of the PRs or commits, until everybody interested is convinced that
> there's nothing random in the proposed changes.
> I'm also more than happy to get advice on how to better communicate my
> plans and structure my PRs.
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>



-- 
I like to provide some work at no charge to prove my value. Do you need a
techie?
I own Litmocracy <http://www.litmocracy.com> and Meme Racing
<http://www.memeracing.net> (in alpha).
I'm the webmaster for The Voluntaryist <http://www.voluntaryist.com> which
now accepts Bitcoin.
I also code for The Dollar Vigilante <http://dollarvigilante.com/>.
"He ought to find it more profitable to play by the rules" - Satoshi
Nakamoto
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150922/53c92cc5/attachment-0001.html>

From elombrozo at gmail.com  Wed Sep 23 00:07:22 2015
From: elombrozo at gmail.com (Eric Lombrozo)
Date: Wed, 23 Sep 2015 00:07:22 +0000
Subject: [bitcoin-dev] Long-term vision for bitcoind (was libconsensus
 and bitcoin development process)
In-Reply-To: <CABm2gDrx4uDVPFL_tWUsvh_cN6qV903WCmgpA_Kj9Deq+Q3yfA@mail.gmail.com>
Message-ID: <em9a15c95a-cdb0-451f-8b69-e73572a722d2@platinum>

Here's what I propose as a long-term plan:

1) libconsensus
==========
We should probably start by defining an API for libconsensus. It should 
support an abstract DB model, track chain state, provide query 
mechanisms for blocks and transactions with optional pruning and 
indexing, expose a subscription mechanism for events such as NEW_TIP, 
REORG, etc, and contain a script interpreter.

We can develop the library in parallel with Bitcoin Core without too 
much refactoring of Bitcoin Core itself...just moving pieces of Bitcoin 
Core's consensus code into the new library, tracking code movements to 
make merging easier. Yes, this is a bit ugly as it requires code 
duplication...but it will temporarily avoid much of the downstream 
pushback we're getting. The idea is that we can prove out the library 
with some simple projects, then start removing the consensus stuff from 
Bitcoin Core once we have greater acceptance of the library and better 
documentation.


2) peer services
==========
We develop a peer services library that performs the tasks of peer 
discovery and relay, with the ability to connect to appropriate peers 
and queue messages. It uses libconsensus for all validation 
functionality and as a datastore for the consensus state but maintains 
its own database for peer history and statistics. I believe Cory has 
been working on this already using libevent. I've already developed an 
async library for this as well.


3) API/RPC
=======
We provide high level calls and pub/sub mechanisms. ZMQ has been 
implemented and added already, but we could support other transports as 
well.


4) Wallet
======
The wallet is split out into a separate process that connects to the 
stack via the API/RPC layer.


- Eric

------ Original Message ------
From: "Jorge Tim?n" <bitcoin-dev at lists.linuxfoundation.org>
To: "Wladimir J. van der Laan" <laanwj at gmail.com>
Cc: "Bitcoin development mailing list" 
<bitcoin-dev at lists.linuxfoundation.org>
Sent: 9/22/2015 11:36:14 AM
Subject: [bitcoin-dev] Long-term vision for bitcoind (was libconsensus 
and bitcoin development process)

>On Fri, Sep 18, 2015 at 2:07 AM, Wladimir J. van der Laan via
>bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:
>>  My long-term vision of bitcoind is a P2P node with validation and 
>>blockchain store, with a couple of data sources that can be subscribed 
>>to or pulled from.
>
>I agree with this long term vision.
>Here's how I think it could happen:
>
>1) Libconsensus is completed and moved to a subtree (which has libsecp
>as an internal subtree)
>
>2) Bitcoind becomes a subtree of bitcoin-wallet (which has
>bitcoin-wallet and bitcoin-qt)
>
>Without aggressively changing it for this purpose, libconsensus should
>tend to become C, like libsecp, which is better for proving
>correctness.
>Hopefully at some point it won't take much to move to C.
>
>Upper layers should move to C++11
>
>Don't focus on the git subtrees, the basic architecture is bitcoin-qt
>on top of bitcoin-wallet, bitcoin-wallet on top of bitcoind (and
>friends like bitcoin-cli and bitcoin-tx), bitcoind on top of
>libconsensus on top of libsecp256k1.
>
>I believe this would maximize the number of people who can safely
>contribute to the project.
>I also believe this is the architecture most contributors have in mind
>for the long term, but I may be wrong about it.
>
>Criticisms to this plan?
>_______________________________________________
>bitcoin-dev mailing list
>bitcoin-dev at lists.linuxfoundation.org
>https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev


From elombrozo at gmail.com  Wed Sep 23 00:10:50 2015
From: elombrozo at gmail.com (Eric Lombrozo)
Date: Wed, 23 Sep 2015 00:10:50 +0000
Subject: [bitcoin-dev] Long-term vision for bitcoind (was libconsensus
 and bitcoin development process)
In-Reply-To: <em9a15c95a-cdb0-451f-8b69-e73572a722d2@platinum>
Message-ID: <em19621644-ea81-4030-bf85-0b3dbca635a7@platinum>

I should also add that the mempool should exist in (2). This way the 
peer services layer can manage all relay policy and mempool management.

------ Original Message ------
From: "Eric Lombrozo" <elombrozo at gmail.com>
To: "Jorge Tim?n" <jtimon at jtimon.cc>; "Wladimir J. van der Laan" 
<laanwj at gmail.com>
Cc: "Bitcoin development mailing list" 
<bitcoin-dev at lists.linuxfoundation.org>
Sent: 9/22/2015 5:07:22 PM
Subject: Re: [bitcoin-dev] Long-term vision for bitcoind (was 
libconsensus and bitcoin development process)

>Here's what I propose as a long-term plan:
>
>1) libconsensus
>==========
>We should probably start by defining an API for libconsensus. It should 
>support an abstract DB model, track chain state, provide query 
>mechanisms for blocks and transactions with optional pruning and 
>indexing, expose a subscription mechanism for events such as NEW_TIP, 
>REORG, etc, and contain a script interpreter.
>
>We can develop the library in parallel with Bitcoin Core without too 
>much refactoring of Bitcoin Core itself...just moving pieces of Bitcoin 
>Core's consensus code into the new library, tracking code movements to 
>make merging easier. Yes, this is a bit ugly as it requires code 
>duplication...but it will temporarily avoid much of the downstream 
>pushback we're getting. The idea is that we can prove out the library 
>with some simple projects, then start removing the consensus stuff from 
>Bitcoin Core once we have greater acceptance of the library and better 
>documentation.
>
>
>2) peer services
>==========
>We develop a peer services library that performs the tasks of peer 
>discovery and relay, with the ability to connect to appropriate peers 
>and queue messages. It uses libconsensus for all validation 
>functionality and as a datastore for the consensus state but maintains 
>its own database for peer history and statistics. I believe Cory has 
>been working on this already using libevent. I've already developed an 
>async library for this as well.
>
>
>3) API/RPC
>=======
>We provide high level calls and pub/sub mechanisms. ZMQ has been 
>implemented and added already, but we could support other transports as 
>well.
>
>
>4) Wallet
>======
>The wallet is split out into a separate process that connects to the 
>stack via the API/RPC layer.
>
>
>- Eric
>
>------ Original Message ------
>From: "Jorge Tim?n" <bitcoin-dev at lists.linuxfoundation.org>
>To: "Wladimir J. van der Laan" <laanwj at gmail.com>
>Cc: "Bitcoin development mailing list" 
><bitcoin-dev at lists.linuxfoundation.org>
>Sent: 9/22/2015 11:36:14 AM
>Subject: [bitcoin-dev] Long-term vision for bitcoind (was libconsensus 
>and bitcoin development process)
>
>>On Fri, Sep 18, 2015 at 2:07 AM, Wladimir J. van der Laan via
>>bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:
>>>  My long-term vision of bitcoind is a P2P node with validation and 
>>>blockchain store, with a couple of data sources that can be 
>>>subscribed to or pulled from.
>>
>>I agree with this long term vision.
>>Here's how I think it could happen:
>>
>>1) Libconsensus is completed and moved to a subtree (which has libsecp
>>as an internal subtree)
>>
>>2) Bitcoind becomes a subtree of bitcoin-wallet (which has
>>bitcoin-wallet and bitcoin-qt)
>>
>>Without aggressively changing it for this purpose, libconsensus should
>>tend to become C, like libsecp, which is better for proving
>>correctness.
>>Hopefully at some point it won't take much to move to C.
>>
>>Upper layers should move to C++11
>>
>>Don't focus on the git subtrees, the basic architecture is bitcoin-qt
>>on top of bitcoin-wallet, bitcoin-wallet on top of bitcoind (and
>>friends like bitcoin-cli and bitcoin-tx), bitcoind on top of
>>libconsensus on top of libsecp256k1.
>>
>>I believe this would maximize the number of people who can safely
>>contribute to the project.
>>I also believe this is the architecture most contributors have in mind
>>for the long term, but I may be wrong about it.
>>
>>Criticisms to this plan?
>>_______________________________________________
>>bitcoin-dev mailing list
>>bitcoin-dev at lists.linuxfoundation.org
>>https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev


From jl2012 at xbt.hk  Wed Sep 23 11:01:12 2015
From: jl2012 at xbt.hk (jl2012 at xbt.hk)
Date: Wed, 23 Sep 2015 07:01:12 -0400
Subject: [bitcoin-dev] Weekly development meetings on IRC: schedule
In-Reply-To: <20150922143628.GB958@amethyst.visucore.com>
References: <20150922143628.GB958@amethyst.visucore.com>
Message-ID: <f639adb573ed49c5755d63e6c0c0a58f@xbt.hk>

There could not be a worse timing than this for those in China (3-4am), 
Japan/Korea (4-5am), and Australia (3-6am depends on which part of the 
country). Maybe we have no dev in this part of the planet? Is there any 
chance to review the timing in a weekly or monthly basis (also with a 
doodle vote?)

Will there be any agenda published before the meetings? If I'm really 
interested in the topics, I'll have some reasons to get up in the middle 
of the night.

Wladimir J. van der Laan via bitcoin-dev ? 2015-09-22 10:36 ??:
> Hello,
> 
> There was overwhelming response that weekly IRC meetings are a good 
> thing.
> 
> Thanks to the doodle site we were able to select a time slot that
> everyone (that voted) is available:
> 
>     Thursday 19:00-20:00 UTC, every week, starting September 24 (next 
> Thursday)
> 
> I created a shared Google Calendar here:
> https://www.google.com/calendar/embed?src=MTFwcXZkZ3BkOTlubGliZjliYTg2MXZ1OHNAZ3JvdXAuY2FsZW5kYXIuZ29vZ2xlLmNvbQ
> 
> The timezone of this calendar is Reykyavik (Iceland) which is UTC+0.
> However, you can use the button on the lower right to add the calendar
> to your own calendar, which will then show the meeting in your own
> timezone.
> 
> See you then,
> 
> Wladimir
> 
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev


From btcdrak at gmail.com  Wed Sep 23 13:02:29 2015
From: btcdrak at gmail.com (Btc Drak)
Date: Wed, 23 Sep 2015 14:02:29 +0100
Subject: [bitcoin-dev] Weekly development meetings on IRC: schedule
In-Reply-To: <f639adb573ed49c5755d63e6c0c0a58f@xbt.hk>
References: <20150922143628.GB958@amethyst.visucore.com>
	<f639adb573ed49c5755d63e6c0c0a58f@xbt.hk>
Message-ID: <CADJgMzsDGy+noF0pVSrrr1S5BvOVwmb1-K2+UMTmuMK_GuLuMw@mail.gmail.com>

On Wed, Sep 23, 2015 at 12:01 PM, jl2012 via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:
>
> Will there be any agenda published before the meetings? If I'm really
> interested in the topics, I'll have some reasons to get up in the middle of
> the night.
>

The #bitcoin-dev IRC channel is logged at http://bitcoinstats.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150923/39e8b81b/attachment.html>

From vincent.truong at procabiak.com  Wed Sep 23 14:06:20 2015
From: vincent.truong at procabiak.com (Vincent Truong)
Date: Thu, 24 Sep 2015 00:06:20 +1000
Subject: [bitcoin-dev] Weekly development meetings on IRC: schedule
In-Reply-To: <f639adb573ed49c5755d63e6c0c0a58f@xbt.hk>
References: <20150922143628.GB958@amethyst.visucore.com>
	<f639adb573ed49c5755d63e6c0c0a58f@xbt.hk>
Message-ID: <CACrzPemxwp++qeQZTHjFYg+9eS+E-1PsCLyg047XgmeLAfEZUQ@mail.gmail.com>

All,

Current meeting time visualised globally.

http://everytimezone.com/#2015-9-24,420,4ia

jl,

I think I found a good compromise: if the US want to accommodate Asia and
willing to sacrifice preference, 23:00 to 00:00 UTC might work.

http://everytimezone.com/#2015-9-24,660,4ia

It isn't easy to grab everyone's preference and accommodate everyone, so
this might work in theory but people may not be free to show up. US should
be ok. UK can participate or catch some nice z. Asia will need a bit of
early bird time but it's not as crazy as 3am. AU also fits in there nicely.

A meeting like this once a month should be enough probably (say, do this on
the first week of the month, and run every other week on the main
schedule). But I don't know whether there are enough people in Asia/AU to
make it worth it. Asia/AU people, thoughts?
On Sep 23, 2015 9:01 PM, "jl2012 via bitcoin-dev" <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> There could not be a worse timing than this for those in China (3-4am),
> Japan/Korea (4-5am), and Australia (3-6am depends on which part of the
> country). Maybe we have no dev in this part of the planet? Is there any
> chance to review the timing in a weekly or monthly basis (also with a
> doodle vote?)
>
> Will there be any agenda published before the meetings? If I'm really
> interested in the topics, I'll have some reasons to get up in the middle of
> the night.
>
> Wladimir J. van der Laan via bitcoin-dev ? 2015-09-22 10:36 ??:
>
>> Hello,
>>
>> There was overwhelming response that weekly IRC meetings are a good thing.
>>
>> Thanks to the doodle site we were able to select a time slot that
>> everyone (that voted) is available:
>>
>>     Thursday 19:00-20:00 UTC, every week, starting September 24 (next
>> Thursday)
>>
>> I created a shared Google Calendar here:
>>
>> https://www.google.com/calendar/embed?src=MTFwcXZkZ3BkOTlubGliZjliYTg2MXZ1OHNAZ3JvdXAuY2FsZW5kYXIuZ29vZ2xlLmNvbQ
>>
>> The timezone of this calendar is Reykyavik (Iceland) which is UTC+0.
>> However, you can use the button on the lower right to add the calendar
>> to your own calendar, which will then show the meeting in your own
>> timezone.
>>
>> See you then,
>>
>> Wladimir
>>
>> _______________________________________________
>> bitcoin-dev mailing list
>> bitcoin-dev at lists.linuxfoundation.org
>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150924/41e7146a/attachment-0001.html>

From gavinandresen at gmail.com  Wed Sep 23 15:43:11 2015
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Wed, 23 Sep 2015 11:43:11 -0400
Subject: [bitcoin-dev] Weak block thoughts...
Message-ID: <CABsx9T2+dG0AE+MgKRAU97KhkHTU1MuxXuwHKv3BgpJswZ5vVg@mail.gmail.com>

I've been thinking about 'weak blocks' and SPV mining, and it seems to me
weak blocks will make things better, not worse, if we improve the mining
code a little bit.

First:  the idea of 'weak blocks' (hat tip to Rusty for the term) is for
miners to pre-announce blocks that they're working on, before they've
solved the proof-of-work puzzle. To prevent DoS attacks, assume that some
amount of proof-of-work is done (hence the term 'weak block') to rate-limit
how many 'weak block' messages are relayed across the network.


Today, miners are incentivized to start mining an empty block as soon as
they see a block with valid proof-of-work, because they want to spend as
little time as possible mining a not-best chain.

Imagine miners always pre-announce the blocks they're working on to their
peers, and peers validate those 'weak blocks' as quickly as they are able.

Because weak blocks are pre-validated, when a full-difficulty block based
on a previously announced weak block is found, block propagation should be
insanely fast-- basically, as fast as a single packet can be relayed across
the network the whole network could be mining on the new block.

I don't see any barrier to making accepting the full-difficulty block and
CreateNewBlock() insanely fast, and if those operations take just a
microsecond or three, miners will have an incentive to create blocks with
fee-paying transactions that weren't in the last block, rather than mining
empty blocks.

.................

A miner could try to avoid validation work by just taking a weak block
announced by somebody else, replacing the coinbase and re-computing the
merkle root, and then mining. They will be at a slight disadvantage to
fully validating miners, though, because they WOULD have to mine empty
blocks between the time a full block is found and a fully-validating miner
announced their next weak block.

.................

Weak block announcements are great for the network; they give transaction
creators a pretty good idea of whether or not their transactions are likely
to be confirmed in the next block. And if we're smart about implementing
them, they shouldn't increase bandwidth or CPU usage significantly, because
all the weak blocks at a given point in time are likely to contain the same
transactions.

-- 
--
Gavin Andresen
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150923/ca1bbeb5/attachment.html>

From kanzure at gmail.com  Wed Sep 23 16:07:08 2015
From: kanzure at gmail.com (Bryan Bishop)
Date: Wed, 23 Sep 2015 11:07:08 -0500
Subject: [bitcoin-dev] Weak block thoughts...
In-Reply-To: <CABsx9T2+dG0AE+MgKRAU97KhkHTU1MuxXuwHKv3BgpJswZ5vVg@mail.gmail.com>
References: <CABsx9T2+dG0AE+MgKRAU97KhkHTU1MuxXuwHKv3BgpJswZ5vVg@mail.gmail.com>
Message-ID: <CABaSBaxcDRzw0X7-fAfxPJyLcWxTHigpHuAPb4aNQ5zk5NoDCQ@mail.gmail.com>

On Wed, Sep 23, 2015 at 10:43 AM, Gavin Andresen via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> First:  the idea of 'weak blocks' (hat tip to Rusty for the term)


Here are some other "weak blocks" and "near blocks" proposals or mentions:
https://bitcointalk.org/index.php?topic=179598.0
http://lists.linuxfoundation.org/pipermail/bitcoin-dev/2013-July/002976.html
http://lists.linuxfoundation.org/pipermail/bitcoin-dev/2013-September/003275.html
https://bitcointalk.org/index.php?topic=673415.msg7658481#msg7658481
http://gnusha.org/bitcoin-wizards/2015-08-20.log

more recently:
http://gnusha.org/bitcoin-wizards/2015-09-20.log
http://diyhpl.us/wiki/transcripts/scalingbitcoin/roundgroup-roundup-1/
http://diyhpl.us/wiki/transcripts/scalingbitcoin/bitcoin-block-propagation-iblt-rusty-russell/

- Bryan
http://heybryan.org/
1 512 203 0507
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150923/451af1ac/attachment.html>

From btcdrak at gmail.com  Wed Sep 23 16:07:31 2015
From: btcdrak at gmail.com (Btc Drak)
Date: Wed, 23 Sep 2015 17:07:31 +0100
Subject: [bitcoin-dev] Weak block thoughts...
In-Reply-To: <CABsx9T2+dG0AE+MgKRAU97KhkHTU1MuxXuwHKv3BgpJswZ5vVg@mail.gmail.com>
References: <CABsx9T2+dG0AE+MgKRAU97KhkHTU1MuxXuwHKv3BgpJswZ5vVg@mail.gmail.com>
Message-ID: <CADJgMzt9xYdaVnvj96YicrcNGj_RWObKTFUsCeWUaP7Apnzwjw@mail.gmail.com>

For anyone who missed the discussions of weak blocks, here are the Scaling
Bitcoin's transcripts:

http://diyhpl.us/wiki/transcripts/scalingbitcoin/bitcoin-block-propagation-iblt-rusty-russell/

http://diyhpl.us/wiki/transcripts/scalingbitcoin/roundgroup-roundup-1/
(under Network Propagation).

On Wed, Sep 23, 2015 at 4:43 PM, Gavin Andresen via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> I've been thinking about 'weak blocks' and SPV mining, and it seems to me
> weak blocks will make things better, not worse, if we improve the mining
> code a little bit.
>
> First:  the idea of 'weak blocks' (hat tip to Rusty for the term) is for
> miners to pre-announce blocks that they're working on, before they've
> solved the proof-of-work puzzle. To prevent DoS attacks, assume that some
> amount of proof-of-work is done (hence the term 'weak block') to rate-limit
> how many 'weak block' messages are relayed across the network.
>
>
> Today, miners are incentivized to start mining an empty block as soon as
> they see a block with valid proof-of-work, because they want to spend as
> little time as possible mining a not-best chain.
>
> Imagine miners always pre-announce the blocks they're working on to their
> peers, and peers validate those 'weak blocks' as quickly as they are able.
>
> Because weak blocks are pre-validated, when a full-difficulty block based
> on a previously announced weak block is found, block propagation should be
> insanely fast-- basically, as fast as a single packet can be relayed across
> the network the whole network could be mining on the new block.
>
> I don't see any barrier to making accepting the full-difficulty block and
> CreateNewBlock() insanely fast, and if those operations take just a
> microsecond or three, miners will have an incentive to create blocks with
> fee-paying transactions that weren't in the last block, rather than mining
> empty blocks.
>
> .................
>
> A miner could try to avoid validation work by just taking a weak block
> announced by somebody else, replacing the coinbase and re-computing the
> merkle root, and then mining. They will be at a slight disadvantage to
> fully validating miners, though, because they WOULD have to mine empty
> blocks between the time a full block is found and a fully-validating miner
> announced their next weak block.
>
> .................
>
> Weak block announcements are great for the network; they give transaction
> creators a pretty good idea of whether or not their transactions are likely
> to be confirmed in the next block. And if we're smart about implementing
> them, they shouldn't increase bandwidth or CPU usage significantly, because
> all the weak blocks at a given point in time are likely to contain the same
> transactions.
>
> --
> --
> Gavin Andresen
>
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150923/1d2d6730/attachment.html>

From peter_r at gmx.com  Wed Sep 23 16:28:20 2015
From: peter_r at gmx.com (Peter R)
Date: Wed, 23 Sep 2015 09:28:20 -0700
Subject: [bitcoin-dev] Weak block thoughts...
In-Reply-To: <CABsx9T2+dG0AE+MgKRAU97KhkHTU1MuxXuwHKv3BgpJswZ5vVg@mail.gmail.com>
References: <CABsx9T2+dG0AE+MgKRAU97KhkHTU1MuxXuwHKv3BgpJswZ5vVg@mail.gmail.com>
Message-ID: <64D181DA-05F6-4636-8F44-0FA63B758947@gmx.com>

Hi Gavin,

One thing that's not clear to me is whether it is even necessary--from the perspective of the block size limit--to consider block propagation.  Bitcoin has been successfully operating unconstrained by the block size limit over its entire history (except for in the past few months)--block propagation never entered into the equation.  

Imagine that the limit were raised to significantly above the free market equilibrium block size Q*.  Mining pools and other miners would then have an incentive to work out schemes like "weak blocks," relay networks, IBLTs, etc., in order to reduce the risk of orphaning larger blocks (blocks with more fees that they'd like to produce if it were profitable).  

Shouldn't mining pools and miners be paying you guys for coding solutions that improve their profitability?   

Best regards,
Peter


On 2015-09-23, at 8:43 AM, Gavin Andresen via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:

> I've been thinking about 'weak blocks' and SPV mining, and it seems to me weak blocks will make things better, not worse, if we improve the mining code a little bit.
> 
> First:  the idea of 'weak blocks' (hat tip to Rusty for the term) is for miners to pre-announce blocks that they're working on, before they've solved the proof-of-work puzzle. To prevent DoS attacks, assume that some amount of proof-of-work is done (hence the term 'weak block') to rate-limit how many 'weak block' messages are relayed across the network.
> 
> 
> Today, miners are incentivized to start mining an empty block as soon as they see a block with valid proof-of-work, because they want to spend as little time as possible mining a not-best chain.
> 
> Imagine miners always pre-announce the blocks they're working on to their peers, and peers validate those 'weak blocks' as quickly as they are able.
> 
> Because weak blocks are pre-validated, when a full-difficulty block based on a previously announced weak block is found, block propagation should be insanely fast-- basically, as fast as a single packet can be relayed across the network the whole network could be mining on the new block.
> 
> I don't see any barrier to making accepting the full-difficulty block and CreateNewBlock() insanely fast, and if those operations take just a microsecond or three, miners will have an incentive to create blocks with fee-paying transactions that weren't in the last block, rather than mining empty blocks.
> 
> .................
> 
> A miner could try to avoid validation work by just taking a weak block announced by somebody else, replacing the coinbase and re-computing the merkle root, and then mining. They will be at a slight disadvantage to fully validating miners, though, because they WOULD have to mine empty blocks between the time a full block is found and a fully-validating miner announced their next weak block.
> 
> .................
> 
> Weak block announcements are great for the network; they give transaction creators a pretty good idea of whether or not their transactions are likely to be confirmed in the next block. And if we're smart about implementing them, they shouldn't increase bandwidth or CPU usage significantly, because all the weak blocks at a given point in time are likely to contain the same transactions.
> 
> -- 
> --
> Gavin Andresen
> 
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150923/7172a4da/attachment-0001.html>

From jtimon at jtimon.cc  Wed Sep 23 16:58:16 2015
From: jtimon at jtimon.cc (=?UTF-8?B?Sm9yZ2UgVGltw7Nu?=)
Date: Wed, 23 Sep 2015 18:58:16 +0200
Subject: [bitcoin-dev] libconsensus and bitcoin development process
In-Reply-To: <CABsx9T0dHxXzemxJN87mU59j4_KZ=zOdwxpXOUe-NhB0ENVMWw@mail.gmail.com>
References: <CADm_WcY8Vy+k+5BaBS+jV6D6tmSXrok8rAxoPxxKOzUhyPWgMg@mail.gmail.com>
	<CABm2gDoXa9ERY7iSsouxjypq1PwV_9HuBrtFQ_jrs5pGFst=KQ@mail.gmail.com>
	<CABsx9T0dHxXzemxJN87mU59j4_KZ=zOdwxpXOUe-NhB0ENVMWw@mail.gmail.com>
Message-ID: <CABm2gDofHuR-6A+BheaGYfHJ9_hjSScC+34nc6exkvAk3g=bHQ@mail.gmail.com>

On Tue, Sep 22, 2015 at 8:27 PM, Gavin Andresen <gavinandresen at gmail.com> wrote:
> You need to write a high-level overview document, explaining things like:
>
> + Who should use libconsensus

Separating the consensus code is extremely important for less risky
and wider contributions regardless of what is exposed.
But once a complete libconsensus is exposed, alternative
implementations should use it (SPV implementations may not use all of
it though) and Bitcoin Core should eventually use it through its API
as well.

> + What functionality it will provide, and what it won't

It will provide full consensus validation (verification) for the
following structures:

- Script (done, VerifyScript is already exposed)
- Block Headers
- Transactions
- Blocks (including headers and transactions)

The user of the library has to manage storage by itself. This library
will be stateless (apart from libsecp256k1's context) and won't
provide storage.
This library won't tell you which is the longest chain, the highest
level function is VerifyBlock() that just tells you whether a block is
valid or not.

> + How the API works (is it C++ ? C ? Is it stateless ? How is information
> sent to/from -- classes ? structs ? serialized data structures ? Are there
> callbacks ?  How are errors returned ?)

Like the existing libconsensus, a complete libconsensus will have a C API.
The concrete API of each function is to be determined. The exact
concrete way to expose CCoinsViewCache and CBlockIndex (which are not
stateless) will require some discussion.
My preference is using function pointers combined with structs but
there's several possibilities there.
Once the code is separated and the rest of the undesired dependencies
are eliminated, people will be able to propose concrete final APIs
with a few commits.

> + What functions are in the API ?

At the very least:

- VerifyScript
- VerifyHeader
- VerifyTx
- VerifyBlock

To allow users of the library to intertwine policy or DoS checks with
the full verification of a structure (like Bitcoin core does today), I
would also expose at least:

- CheckTransaction/Consensus::CheckTx
- Consensus::CheckTxInputs
- Consensus::CheckTxInputsScripts (doesn't exist yet in master)
- CheckBlockHeader
- ContextualCheckBlockHeader
- CheckBlock
- ContextualCheckBlock

> Nobody has time to wade through pull requests to try to figure all that out.

Nobody has the time to review a PR with the many commits necessary to
propose a final independently buildable and complete C API.
This is a work in progress and there's more people participating, not just me.
There's many possible roads that lead to Rome, but let's not allow
perfection be the enemy of walking the very first step.
Can we at least agree on most of the functions that are clearly
consensus critical and separate those so it's easy to build them
separately from main.cpp ?
Can we agree on some of the dependencies that are obviously undesired
and relatively easy to remove?

> On Tue, Sep 22, 2015 at 2:12 PM, Jorge Tim?n
> <bitcoin-dev at lists.linuxfoundation.org> wrote:
>>
>> On Tue, Sep 15, 2015 at 6:10 AM, Jeff Garzik via bitcoin-dev
>> <bitcoin-dev at lists.linuxfoundation.org> wrote:
>> > [collating a private mail and a github issue comment, moving it to a
>> > better forum]
>> >
>> > On libconsensus
>> > ---------------
>> > In general there exists the reasonable goal to move consensus state
>> > and code to a specific, separate lib.
>> >
>> > To someone not closely reviewing the seemingly endless stream of
>> > libconsensus refactoring PRs, the 10,000 foot view is that there is a
>> > rather random stream of refactors that proceed in fits and starts
>> > without apparent plan or end other than a one sentence "isolate
>> > consensus state and code" summary.
>> >
>> > I am hoping that
>> > * There is some plan
>> > * We will not see a five year stream of random consensus code movement
>> > patches causing lots of downstream developer headaches.
>> >
>> > I read every code change in every pull request that comes into
>> > github/bitcoin/bitcoin with three exceptions:
>> > * consensus code movement changes - too big, too chaotic, too
>> > frequent, too unfocused, laziness guarantees others will inevitably
>> > ACK it without me.
>> > * some non-code changes (docs)
>> > * ignore 80% of the Qt changes
>> >
>> > As with any sort of refactoring, they are easy to prove correct, easy
>> > to reason, and therefore quick and easy to ACK and merge.
>> >
>> > Refactors however have a very real negative impact.
>> > bitcoin/bitcoin.git is not only the source tree in the universe.
>> > Software engineers at home, at startups, and at major companies are
>> > maintaining branches of their own.
>> >
>> > It is very very easy to fall into a trap where a project is merging
>> > lots of cosmetic changes and not seeing the downstream ripple effects.
>> > Several people complained to me at the conference about all the code
>> > movement changes breaking their own work, causing them to stay on
>> > older versions of bitcoin due to the effort required to rebase to each
>> > new release version - and I share those complaints.
>> >
>> > Complex code changes with longer development cycles than simple code
>> > movement patches keep breaking.  It is very frustrating, and causes
>> > folks to get trapped between a rock and a hard place:
>> > - Trying to push non-trivial changes upstream is difficult, for normal
>> > and reasonable reasons (big important changes need review etc.).
>> > - Maintaining non-trivial changes out of tree is also painful, for the
>> > aforementioned reasons.
>> >
>> > Reasonable work languishes in constant-rebase hell, and incentivizes
>> > against keeping up with the latest tree.
>> >
>> >
>> > Aside from the refactor, libconsensus appears to be engineering in the
>> > dark.  Where is any sort of plan?  I have low standards - a photo of a
>> > whiteboard or youtube clip will do.
>>
>> Just because you don't understand the changes proposed it doesn't mean
>> that they are random.
>> I may have done a poor job in communicating "my plan for libconsensus"
>> but I have tried many times and in many ways.
>> #bitcoin-dev logs show that I have not worked "in the dark" at all, on
>> the contrary, I've been very tenacious when asking for review and
>> opinions, to the point that several people (at least @laanwj and
>> @theuni have complained about their github inboxes being full of
>> "spam").
>> This is a relatively recent thread where I describe my plan:
>>
>> http://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-July/009568.html
>> Not my first attempt on this list.
>>
>> It is very frustrating that everybody seems to agree that separating
>> libconsensus is a priority to maximize the number of people that can
>> safely contribute to the project, but at the same time, nobody thinks
>> that reviewing the necessary refactors to do so is a priority.
>> I tried creating big PRs for people to see "the big picture" #5946 but
>> those were too many commits and nobody wanted to read it. Gavin asked
>> for an API.
>> So I tried a smaller step: exposing just VerifyHeader in libconsensus
>> and leave VerifyTx and VerifyBlock for later #5995
>> Again, this was "too big" and "a moving target". In the meantime I
>> always had smaller one-little-step PRs that were part of a longer
>> branch:
>>
>> ** [8/8] MERGED Consensus
>> - [X] Consensus: Decouple pow from chainparams #5812 [consensuspow]
>> - [X] MOVEONLY: Move constants and globals to consensus.h #5696
>> [consensus_policy0]
>> - [X] Chainparams: Refactor: Decouple IsSuperMajority from Params()
>> #5968 [params_consensus]
>> - [X] Remove redundant getter CChainParams::SubsidyHalvingInterval()
>> #5996 [params_subsidy]
>> - [X] Separate CValidationState from main #5669 [consensus]
>> - [X] Consensus: Decouple ContextualCheckBlockHeader from checkpoints
>> #5975 [consensus_checkpoints]
>> - [X] Separate Consensus::CheckTxInputs and GetSpendHeight in
>> CheckInputs #6061 [consensus_inputs]
>> - [X] Bugfix: Don't check the genesis block header before accepting it
>> #6299 [5975-quick-fix]
>> ** [5/5] DELETED
>> *** DELETED Refactor: Create CCoinsViewEfficient interface for
>> CCoinsViewCache #5747 [coins]
>> *** DELETED Chainparams: Explicit Consensus::Params arg in consensus
>> functions #6024 [params_consensus2]
>> *** DELETED MOVEONLY: Move most of consensus functions (pre-block)
>> #6051 [consensus_moveonly] (depends on consensus-blocksize-0.12.99)
>> *** DELETED Consensus: Refactor: Separate CheckFinalTx from
>> main::IsFinalTx #6063 [consensus_finaltx]
>> *** DELETED Consensus: Refactor: Turn CBlockIndex::GetMedianTimePast
>> into independent function #6009 [consensus_mediantime]
>> *** DELETED Consensus: Adapt declarations of most obviously consensus
>> functions #6591 [consensus-params-0.12.99]
>> *** DELETED Consensus: Move blocksize and related parameters to
>> consensusparams ...without removing consensus/consensus.h [#6526
>> alternative] #6625 [consensus-blocksize-0.12.99]
>>
>> After a while I stop rebasing the longer branches and just maintained
>> a few small consensus-related PRs at a time.
>>
>> Now I consolidated 3 of them in
>>
>> *** REVIEW Optimizations: Consensus: In AcceptToMemoryPool,
>> ConnectBlock, and CreateNewBlock #6445 [consensus-txinputs-0.12.99]
>>
>> with the hope that it would be merged relatively fast.
>> After that it will be much simpler to start talking about potential C
>> APIs for VerifyHeader, VerifyTx and VerifyBlock; as well as separating
>> the library to a subtree.
>>
>> I'm more than happy to answer any questions anyone may have about any
>> of the PRs or commits, until everybody interested is convinced that
>> there's nothing random in the proposed changes.
>> I'm also more than happy to get advice on how to better communicate my
>> plans and structure my PRs.
>> _______________________________________________
>> bitcoin-dev mailing list
>> bitcoin-dev at lists.linuxfoundation.org
>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
>
>
>
> --
> --
> Gavin Andresen

From roy at osherove.com  Wed Sep 23 17:13:14 2015
From: roy at osherove.com (Roy Osherove)
Date: Wed, 23 Sep 2015 10:13:14 -0700
Subject: [bitcoin-dev] CI Build for Bitcoin - Some Basic Questions about
	Gitian and other stuff
Message-ID: <CAAMhxnzWTNMQVcziTx9f4AYE0rvi8y2JKbYRF5t_ds4esx=Jkw@mail.gmail.com>

Hi Folks.
I'm trying my hand at creating a reproducible build of my own for bitcoin
and bitcoin-XT, using TeamCity.
I believe it is the best way to learn something: To try to build it
yourself.
Here is what I think I know so far, and I would love corrections, plus
questions:

   1. Bitcoin is built continuously on travis-CI at
   https://travis-ci.org/bitcoin/bitcoin/
   2.  there are many flavors that are built, but I'm not sure if all of
   them are actually used/necessary. are they all needed, or just to "just in
   case"?
   3.  There is a gitian build file for bitcoin, but is anyone actually
   using it? are the bin files on bitcoin.org taken from that? or the
   travis ci builds? or some other place?
   4. Are there any things that people would love to have in the build that
   do not exist there today? perhaps I can help with that?

Here is what I have now: http://btcdev.osherove.com:8111/
It does not do the matrix build yet, but it's coming. I'm just wondering if
all the platforms need to be supported,and if gitian is truly required to
be used, or used in parallel, or at all..

Feedback appreciated.

-- 
Thanks,

Roy Osherove

   - *@RoyOsherove* <https://twitter.com/RoyOsherove>
   - Read my new book *Notes to a Software Team Leader
<http://TeamLeadSkills.com>*
   - Or *my new course* about Beautiful Builds <http://courses.osherove.com>
and Continuous Delivery
   - +1-201-256-5575
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150923/99a98bb2/attachment.html>

From mark at friedenbach.org  Wed Sep 23 17:18:14 2015
From: mark at friedenbach.org (Mark Friedenbach)
Date: Wed, 23 Sep 2015 10:18:14 -0700
Subject: [bitcoin-dev] CI Build for Bitcoin - Some Basic Questions about
 Gitian and other stuff
In-Reply-To: <CAAMhxnzWTNMQVcziTx9f4AYE0rvi8y2JKbYRF5t_ds4esx=Jkw@mail.gmail.com>
References: <CAAMhxnzWTNMQVcziTx9f4AYE0rvi8y2JKbYRF5t_ds4esx=Jkw@mail.gmail.com>
Message-ID: <CAOG=w-uzmC3-2vYbSYDwvDhhP0FyC72G2dBVuj83zBMhqrvGOA@mail.gmail.com>

The builds made by Travis are for the purpose of making sure that the
source code compiles and tests run successfully on all supported platforms.
The binaries are not used anywhere else because Travis is not a trusted
platform.

The binaries on bitcoin.org are built using the gitian process and signed
by a quorum of developers.

On Wed, Sep 23, 2015 at 10:13 AM, Roy Osherove via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> Hi Folks.
> I'm trying my hand at creating a reproducible build of my own for bitcoin
> and bitcoin-XT, using TeamCity.
> I believe it is the best way to learn something: To try to build it
> yourself.
> Here is what I think I know so far, and I would love corrections, plus
> questions:
>
>    1. Bitcoin is built continuously on travis-CI at
>    https://travis-ci.org/bitcoin/bitcoin/
>    2.  there are many flavors that are built, but I'm not sure if all of
>    them are actually used/necessary. are they all needed, or just to "just in
>    case"?
>    3.  There is a gitian build file for bitcoin, but is anyone actually
>    using it? are the bin files on bitcoin.org taken from that? or the
>    travis ci builds? or some other place?
>    4. Are there any things that people would love to have in the build
>    that do not exist there today? perhaps I can help with that?
>
> Here is what I have now: http://btcdev.osherove.com:8111/
> It does not do the matrix build yet, but it's coming. I'm just wondering
> if all the platforms need to be supported,and if gitian is truly required
> to be used, or used in parallel, or at all..
>
> Feedback appreciated.
>
> --
> Thanks,
>
> Roy Osherove
>
>    - *@RoyOsherove* <https://twitter.com/RoyOsherove>
>    - Read my new book *Notes to a Software Team Leader
> <http://TeamLeadSkills.com>*
>    - Or *my new course* about Beautiful Builds
> <http://courses.osherove.com> and Continuous Delivery
>    - +1-201-256-5575
>
>
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150923/a91bd297/attachment.html>

From jtimon at jtimon.cc  Wed Sep 23 17:28:06 2015
From: jtimon at jtimon.cc (=?UTF-8?B?Sm9yZ2UgVGltw7Nu?=)
Date: Wed, 23 Sep 2015 19:28:06 +0200
Subject: [bitcoin-dev] libconsensus and bitcoin development process
In-Reply-To: <CAGLBAhciSUZuKTcKmKFxy5O3Pmou=_-PG9Dk5m=y9p3TSBikAA@mail.gmail.com>
References: <CADm_WcY8Vy+k+5BaBS+jV6D6tmSXrok8rAxoPxxKOzUhyPWgMg@mail.gmail.com>
	<CABm2gDoXa9ERY7iSsouxjypq1PwV_9HuBrtFQ_jrs5pGFst=KQ@mail.gmail.com>
	<CAGLBAhciSUZuKTcKmKFxy5O3Pmou=_-PG9Dk5m=y9p3TSBikAA@mail.gmail.com>
Message-ID: <CABm2gDrPeiaC9znS+th_VrmFGk6v=yr=i0=PNDSS0AjvrPG6JQ@mail.gmail.com>

On Wed, Sep 23, 2015 at 1:49 AM, Dave Scotese <dscotese at litmocracy.com> wrote:
> If I'm reading this situation correctly, Jeff is basically pointing out that
> developers need more links (hooks, rungs, handholds, data points, whatever
> you want to call them) so that they can see all the things his email
> insinuated are missing (a plan, order, sense, etc.).  He didn't say these
> things were missing, but that it kind of feels like it from the 10,000 foot
> view.
>
> If you use Google to search the list, as in <<site:lists.linuxfoundation.org
> libconsensus plan>> you DO NOT get the page Jorge gave.  He wrote that page,
> so he had a good idea what to search for to find it again.  I just want to
> recommend that when you describe the work you're doing on bitcoin, imagine
> several different ways people might try to find this description in the
> future and make them work.  In other words, Jorge could have put "A plan for
> abstracting out libconsensus" in the email where he wrote "Here are some
> things that need to happen first..."
>
> Likewise, if Jeff had searched for <<site:lists.linuxfoundation.org
> libconsensus plan>> (maybe he did, but he didn't list any results), he may
> have found enough clues to see Jorge's overall plan.  The "site:" keyword on
> Google fascinated me when I discovered it, so I let it inspire this email
> :-)

My fault: https://github.com/bitcoin/bitcoin/issues/6714

> On Tue, Sep 22, 2015 at 11:12 AM, Jorge Tim?n
> <bitcoin-dev at lists.linuxfoundation.org> wrote:
>>
>> On Tue, Sep 15, 2015 at 6:10 AM, Jeff Garzik via bitcoin-dev
>> <bitcoin-dev at lists.linuxfoundation.org> wrote:
>> > [collating a private mail and a github issue comment, moving it to a
>> > better forum]
>> >
>> > On libconsensus
>> > ---------------
>> > In general there exists the reasonable goal to move consensus state
>> > and code to a specific, separate lib.
>> >
>> > To someone not closely reviewing the seemingly endless stream of
>> > libconsensus refactoring PRs, the 10,000 foot view is that there is a
>> > rather random stream of refactors that proceed in fits and starts
>> > without apparent plan or end other than a one sentence "isolate
>> > consensus state and code" summary.
>> >
>> > I am hoping that
>> > * There is some plan
>> > * We will not see a five year stream of random consensus code movement
>> > patches causing lots of downstream developer headaches.
>> >
>> > I read every code change in every pull request that comes into
>> > github/bitcoin/bitcoin with three exceptions:
>> > * consensus code movement changes - too big, too chaotic, too
>> > frequent, too unfocused, laziness guarantees others will inevitably
>> > ACK it without me.
>> > * some non-code changes (docs)
>> > * ignore 80% of the Qt changes
>> >
>> > As with any sort of refactoring, they are easy to prove correct, easy
>> > to reason, and therefore quick and easy to ACK and merge.
>> >
>> > Refactors however have a very real negative impact.
>> > bitcoin/bitcoin.git is not only the source tree in the universe.
>> > Software engineers at home, at startups, and at major companies are
>> > maintaining branches of their own.
>> >
>> > It is very very easy to fall into a trap where a project is merging
>> > lots of cosmetic changes and not seeing the downstream ripple effects.
>> > Several people complained to me at the conference about all the code
>> > movement changes breaking their own work, causing them to stay on
>> > older versions of bitcoin due to the effort required to rebase to each
>> > new release version - and I share those complaints.
>> >
>> > Complex code changes with longer development cycles than simple code
>> > movement patches keep breaking.  It is very frustrating, and causes
>> > folks to get trapped between a rock and a hard place:
>> > - Trying to push non-trivial changes upstream is difficult, for normal
>> > and reasonable reasons (big important changes need review etc.).
>> > - Maintaining non-trivial changes out of tree is also painful, for the
>> > aforementioned reasons.
>> >
>> > Reasonable work languishes in constant-rebase hell, and incentivizes
>> > against keeping up with the latest tree.
>> >
>> >
>> > Aside from the refactor, libconsensus appears to be engineering in the
>> > dark.  Where is any sort of plan?  I have low standards - a photo of a
>> > whiteboard or youtube clip will do.
>>
>> Just because you don't understand the changes proposed it doesn't mean
>> that they are random.
>> I may have done a poor job in communicating "my plan for libconsensus"
>> but I have tried many times and in many ways.
>> #bitcoin-dev logs show that I have not worked "in the dark" at all, on
>> the contrary, I've been very tenacious when asking for review and
>> opinions, to the point that several people (at least @laanwj and
>> @theuni have complained about their github inboxes being full of
>> "spam").
>> This is a relatively recent thread where I describe my plan:
>>
>> http://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-July/009568.html
>> Not my first attempt on this list.
>>
>> It is very frustrating that everybody seems to agree that separating
>> libconsensus is a priority to maximize the number of people that can
>> safely contribute to the project, but at the same time, nobody thinks
>> that reviewing the necessary refactors to do so is a priority.
>> I tried creating big PRs for people to see "the big picture" #5946 but
>> those were too many commits and nobody wanted to read it. Gavin asked
>> for an API.
>> So I tried a smaller step: exposing just VerifyHeader in libconsensus
>> and leave VerifyTx and VerifyBlock for later #5995
>> Again, this was "too big" and "a moving target". In the meantime I
>> always had smaller one-little-step PRs that were part of a longer
>> branch:
>>
>> ** [8/8] MERGED Consensus
>> - [X] Consensus: Decouple pow from chainparams #5812 [consensuspow]
>> - [X] MOVEONLY: Move constants and globals to consensus.h #5696
>> [consensus_policy0]
>> - [X] Chainparams: Refactor: Decouple IsSuperMajority from Params()
>> #5968 [params_consensus]
>> - [X] Remove redundant getter CChainParams::SubsidyHalvingInterval()
>> #5996 [params_subsidy]
>> - [X] Separate CValidationState from main #5669 [consensus]
>> - [X] Consensus: Decouple ContextualCheckBlockHeader from checkpoints
>> #5975 [consensus_checkpoints]
>> - [X] Separate Consensus::CheckTxInputs and GetSpendHeight in
>> CheckInputs #6061 [consensus_inputs]
>> - [X] Bugfix: Don't check the genesis block header before accepting it
>> #6299 [5975-quick-fix]
>> ** [5/5] DELETED
>> *** DELETED Refactor: Create CCoinsViewEfficient interface for
>> CCoinsViewCache #5747 [coins]
>> *** DELETED Chainparams: Explicit Consensus::Params arg in consensus
>> functions #6024 [params_consensus2]
>> *** DELETED MOVEONLY: Move most of consensus functions (pre-block)
>> #6051 [consensus_moveonly] (depends on consensus-blocksize-0.12.99)
>> *** DELETED Consensus: Refactor: Separate CheckFinalTx from
>> main::IsFinalTx #6063 [consensus_finaltx]
>> *** DELETED Consensus: Refactor: Turn CBlockIndex::GetMedianTimePast
>> into independent function #6009 [consensus_mediantime]
>> *** DELETED Consensus: Adapt declarations of most obviously consensus
>> functions #6591 [consensus-params-0.12.99]
>> *** DELETED Consensus: Move blocksize and related parameters to
>> consensusparams ...without removing consensus/consensus.h [#6526
>> alternative] #6625 [consensus-blocksize-0.12.99]
>>
>> After a while I stop rebasing the longer branches and just maintained
>> a few small consensus-related PRs at a time.
>>
>> Now I consolidated 3 of them in
>>
>> *** REVIEW Optimizations: Consensus: In AcceptToMemoryPool,
>> ConnectBlock, and CreateNewBlock #6445 [consensus-txinputs-0.12.99]
>>
>> with the hope that it would be merged relatively fast.
>> After that it will be much simpler to start talking about potential C
>> APIs for VerifyHeader, VerifyTx and VerifyBlock; as well as separating
>> the library to a subtree.
>>
>> I'm more than happy to answer any questions anyone may have about any
>> of the PRs or commits, until everybody interested is convinced that
>> there's nothing random in the proposed changes.
>> I'm also more than happy to get advice on how to better communicate my
>> plans and structure my PRs.
>> _______________________________________________
>> bitcoin-dev mailing list
>> bitcoin-dev at lists.linuxfoundation.org
>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
>
>
>
> --
> I like to provide some work at no charge to prove my value. Do you need a
> techie?
> I own Litmocracy and Meme Racing (in alpha).
> I'm the webmaster for The Voluntaryist which now accepts Bitcoin.
> I also code for The Dollar Vigilante.
> "He ought to find it more profitable to play by the rules" - Satoshi
> Nakamoto

From roy at osherove.com  Wed Sep 23 17:31:22 2015
From: roy at osherove.com (Roy Osherove)
Date: Wed, 23 Sep 2015 10:31:22 -0700
Subject: [bitcoin-dev] CI Build for Bitcoin - Some Basic Questions about
 Gitian and other stuff
In-Reply-To: <CAOG=w-uzmC3-2vYbSYDwvDhhP0FyC72G2dBVuj83zBMhqrvGOA@mail.gmail.com>
References: <CAAMhxnzWTNMQVcziTx9f4AYE0rvi8y2JKbYRF5t_ds4esx=Jkw@mail.gmail.com>
	<CAOG=w-uzmC3-2vYbSYDwvDhhP0FyC72G2dBVuj83zBMhqrvGOA@mail.gmail.com>
Message-ID: <CAAMhxnw8J8nZbWPBEA9HOfJH0iiWO3uvD_frJ089R1kcbhciSg@mail.gmail.com>

Thanks Mark.
Is there a public server where the gitian builds can be viewed?
Is there a public server that shows the quorum verifications or that shows
how to join in on the verification if such as thing is helpful?

On Wed, Sep 23, 2015 at 10:18 AM, Mark Friedenbach <mark at friedenbach.org>
wrote:

> The builds made by Travis are for the purpose of making sure that the
> source code compiles and tests run successfully on all supported platforms.
> The binaries are not used anywhere else because Travis is not a trusted
> platform.
>
> The binaries on bitcoin.org are built using the gitian process and signed
> by a quorum of developers.
>
> On Wed, Sep 23, 2015 at 10:13 AM, Roy Osherove via bitcoin-dev <
> bitcoin-dev at lists.linuxfoundation.org> wrote:
>
>> Hi Folks.
>> I'm trying my hand at creating a reproducible build of my own for bitcoin
>> and bitcoin-XT, using TeamCity.
>> I believe it is the best way to learn something: To try to build it
>> yourself.
>> Here is what I think I know so far, and I would love corrections, plus
>> questions:
>>
>>    1. Bitcoin is built continuously on travis-CI at
>>    https://travis-ci.org/bitcoin/bitcoin/
>>    2.  there are many flavors that are built, but I'm not sure if all of
>>    them are actually used/necessary. are they all needed, or just to "just in
>>    case"?
>>    3.  There is a gitian build file for bitcoin, but is anyone actually
>>    using it? are the bin files on bitcoin.org taken from that? or the
>>    travis ci builds? or some other place?
>>    4. Are there any things that people would love to have in the build
>>    that do not exist there today? perhaps I can help with that?
>>
>> Here is what I have now: http://btcdev.osherove.com:8111/
>> It does not do the matrix build yet, but it's coming. I'm just wondering
>> if all the platforms need to be supported,and if gitian is truly required
>> to be used, or used in parallel, or at all..
>>
>> Feedback appreciated.
>>
>> --
>> Thanks,
>>
>> Roy Osherove
>>
>>    - *@RoyOsherove* <https://twitter.com/RoyOsherove>
>>    - Read my new book *Notes to a Software Team Leader
>> <http://TeamLeadSkills.com>*
>>    - Or *my new course* about Beautiful Builds
>> <http://courses.osherove.com> and Continuous Delivery
>>    - +1-201-256-5575
>>
>>
>>
>> _______________________________________________
>> bitcoin-dev mailing list
>> bitcoin-dev at lists.linuxfoundation.org
>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>
>>
>


-- 
Thanks,

Roy Osherove

   - *@RoyOsherove* <https://twitter.com/RoyOsherove>
   - Read my new book *Notes to a Software Team Leader
<http://TeamLeadSkills.com>*
   - Or *my new course* about Beautiful Builds <http://courses.osherove.com>
and Continuous Delivery
   - +1-201-256-5575
    - Timezone: Eastern Standard Time (New York)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150923/2a3f1ef5/attachment.html>

From gavinandresen at gmail.com  Wed Sep 23 17:40:58 2015
From: gavinandresen at gmail.com (Gavin)
Date: Wed, 23 Sep 2015 13:40:58 -0400
Subject: [bitcoin-dev] Weak block thoughts...
In-Reply-To: <64D181DA-05F6-4636-8F44-0FA63B758947@gmx.com>
References: <CABsx9T2+dG0AE+MgKRAU97KhkHTU1MuxXuwHKv3BgpJswZ5vVg@mail.gmail.com>
	<64D181DA-05F6-4636-8F44-0FA63B758947@gmx.com>
Message-ID: <B23B8F73-149B-45AB-AFE6-90828A658074@gmail.com>


> On Sep 23, 2015, at 12:28 PM, Peter R <peter_r at gmx.com> wrote:
> 
> Hi Gavin,
> 
> One thing that's not clear to me is whether it is even necessary--from the perspective of the block size limit--to consider block propagation.  

I didn't mention the block size limit; weak blocks are a good idea no matter the limit.

As for miners paying for the work: lots of companies contributed to the Foundation, and will contribute to the DCI. When there are big, stable, profitable companies I think we'll see them task their developers to contribute code.

I think optimizing new block propagation is interesting and important, so I plan on working on it.



From peter_r at gmx.com  Wed Sep 23 17:49:04 2015
From: peter_r at gmx.com (Peter R)
Date: Wed, 23 Sep 2015 10:49:04 -0700
Subject: [bitcoin-dev] Weak block thoughts...
In-Reply-To: <B23B8F73-149B-45AB-AFE6-90828A658074@gmail.com>
References: <CABsx9T2+dG0AE+MgKRAU97KhkHTU1MuxXuwHKv3BgpJswZ5vVg@mail.gmail.com>
	<64D181DA-05F6-4636-8F44-0FA63B758947@gmx.com>
	<B23B8F73-149B-45AB-AFE6-90828A658074@gmail.com>
Message-ID: <EAEEAEDE-3595-4B2E-809B-2621DB7229F9@gmx.com>

Thanks for the reply, Gavin.  I agree on all points.  

Peter

From mark at friedenbach.org  Wed Sep 23 18:10:12 2015
From: mark at friedenbach.org (Mark Friedenbach)
Date: Wed, 23 Sep 2015 11:10:12 -0700
Subject: [bitcoin-dev] CI Build for Bitcoin - Some Basic Questions about
 Gitian and other stuff
In-Reply-To: <CAAMhxnw8J8nZbWPBEA9HOfJH0iiWO3uvD_frJ089R1kcbhciSg@mail.gmail.com>
References: <CAAMhxnzWTNMQVcziTx9f4AYE0rvi8y2JKbYRF5t_ds4esx=Jkw@mail.gmail.com>
	<CAOG=w-uzmC3-2vYbSYDwvDhhP0FyC72G2dBVuj83zBMhqrvGOA@mail.gmail.com>
	<CAAMhxnw8J8nZbWPBEA9HOfJH0iiWO3uvD_frJ089R1kcbhciSg@mail.gmail.com>
Message-ID: <CAOG=w-uCLHEMHkGz8TGEPuqs0AshX+c=xt2VciCF5qkVdoRn-A@mail.gmail.com>

Well the gitian builds are made available on bitcoin.org. If you mean a
build server where gitian builds are automatically done and made available,
well that rather defeats the point of gitian.

The quorum signatures are accumulated here:
https://github.com/bitcoin/gitian.sigs (it's a manual process).

On Wed, Sep 23, 2015 at 10:31 AM, Roy Osherove <roy at osherove.com> wrote:

> Thanks Mark.
> Is there a public server where the gitian builds can be viewed?
> Is there a public server that shows the quorum verifications or that shows
> how to join in on the verification if such as thing is helpful?
>
> On Wed, Sep 23, 2015 at 10:18 AM, Mark Friedenbach <mark at friedenbach.org>
> wrote:
>
>> The builds made by Travis are for the purpose of making sure that the
>> source code compiles and tests run successfully on all supported platforms.
>> The binaries are not used anywhere else because Travis is not a trusted
>> platform.
>>
>> The binaries on bitcoin.org are built using the gitian process and
>> signed by a quorum of developers.
>>
>> On Wed, Sep 23, 2015 at 10:13 AM, Roy Osherove via bitcoin-dev <
>> bitcoin-dev at lists.linuxfoundation.org> wrote:
>>
>>> Hi Folks.
>>> I'm trying my hand at creating a reproducible build of my own for
>>> bitcoin and bitcoin-XT, using TeamCity.
>>> I believe it is the best way to learn something: To try to build it
>>> yourself.
>>> Here is what I think I know so far, and I would love corrections, plus
>>> questions:
>>>
>>>    1. Bitcoin is built continuously on travis-CI at
>>>    https://travis-ci.org/bitcoin/bitcoin/
>>>    2.  there are many flavors that are built, but I'm not sure if all
>>>    of them are actually used/necessary. are they all needed, or just to "just
>>>    in case"?
>>>    3.  There is a gitian build file for bitcoin, but is anyone actually
>>>    using it? are the bin files on bitcoin.org taken from that? or the
>>>    travis ci builds? or some other place?
>>>    4. Are there any things that people would love to have in the build
>>>    that do not exist there today? perhaps I can help with that?
>>>
>>> Here is what I have now: http://btcdev.osherove.com:8111/
>>> It does not do the matrix build yet, but it's coming. I'm just wondering
>>> if all the platforms need to be supported,and if gitian is truly required
>>> to be used, or used in parallel, or at all..
>>>
>>> Feedback appreciated.
>>>
>>> --
>>> Thanks,
>>>
>>> Roy Osherove
>>>
>>>    - *@RoyOsherove* <https://twitter.com/RoyOsherove>
>>>    - Read my new book *Notes to a Software Team Leader
>>> <http://TeamLeadSkills.com>*
>>>    - Or *my new course* about Beautiful Builds
>>> <http://courses.osherove.com> and Continuous Delivery
>>>    - +1-201-256-5575
>>>
>>>
>>>
>>> _______________________________________________
>>> bitcoin-dev mailing list
>>> bitcoin-dev at lists.linuxfoundation.org
>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>>
>>>
>>
>
>
> --
> Thanks,
>
> Roy Osherove
>
>    - *@RoyOsherove* <https://twitter.com/RoyOsherove>
>    - Read my new book *Notes to a Software Team Leader
> <http://TeamLeadSkills.com>*
>    - Or *my new course* about Beautiful Builds
> <http://courses.osherove.com> and Continuous Delivery
>    - +1-201-256-5575
>     - Timezone: Eastern Standard Time (New York)
>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150923/3f931fdb/attachment-0001.html>

From tomh at thinlink.com  Wed Sep 23 18:33:25 2015
From: tomh at thinlink.com (Tom Harding)
Date: Wed, 23 Sep 2015 11:33:25 -0700
Subject: [bitcoin-dev] [BIP Proposal] Version bits with timeout and
	delay.
In-Reply-To: <87mvwqb132.fsf@rustcorp.com.au>
References: <87mvwqb132.fsf@rustcorp.com.au>
Message-ID: <5602F075.4000102@thinlink.com>

On 9/13/2015 11:56 AM, Rusty Russell via bitcoin-dev wrote:
> '''Success: Activation Delay'''
> The consensus rules related to ''locked-in'' soft fork will be enforced in
> the second retarget period; ie. there is a one retarget period in
> which the remaining 5% can upgrade.  At the that activation block and
> after, the bit B may be reused for a different soft fork.
>

Rather than a simple one-period delay, should there be a one-period 
"burn-in" to show sustained support of the threshold?  During this 
period, support must continuously remain above the threshold.  Any lapse 
resets to inactivated state.

With a simple delay, you can have the embarrassing situation where 
support falls off during the delay period and there is far below 
threshold support just moments prior to enforcement, but enforcement 
happens anyway.

BIP 101 has this problem too.



From tier.nolan at gmail.com  Wed Sep 23 18:48:38 2015
From: tier.nolan at gmail.com (Tier Nolan)
Date: Wed, 23 Sep 2015 19:48:38 +0100
Subject: [bitcoin-dev] Weak block thoughts...
In-Reply-To: <CABsx9T2+dG0AE+MgKRAU97KhkHTU1MuxXuwHKv3BgpJswZ5vVg@mail.gmail.com>
References: <CABsx9T2+dG0AE+MgKRAU97KhkHTU1MuxXuwHKv3BgpJswZ5vVg@mail.gmail.com>
Message-ID: <CAE-z3OXdMtu-G2JMYqmzhtJ0CMJh5Tj=zaYCXaGZtOR7h7rHsw@mail.gmail.com>

On Wed, Sep 23, 2015 at 4:43 PM, Gavin Andresen via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> Imagine miners always pre-announce the blocks they're working on to their
> peers, and peers validate those 'weak blocks' as quickly as they are able.
>
> Because weak blocks are pre-validated, when a full-difficulty block based
> on a previously announced weak block is found, block propagation should be
> insanely fast-- basically, as fast as a single packet can be relayed across
> the network the whole network could be mining on the new block.
>
> I don't see any barrier to making accepting the full-difficulty block and
> CreateNewBlock() insanely fast, and if those operations take just a
> microsecond or three, miners will have an incentive to create blocks with
> fee-paying transactions that weren't in the last block, rather than mining
> empty blocks.
>

You can create these blocks in advance too.

- receive weak block
- validate
- create child block

It becomes a pure array lookup to get the new header that builds on top of
that block.  The child blocks would need to be updated as the memory pool
changes though.


> A miner could try to avoid validation work by just taking a weak block
> announced by somebody else, replacing the coinbase and re-computing the
> merkle root, and then mining. They will be at a slight disadvantage to
> fully validating miners, though, because they WOULD have to mine empty
> blocks between the time a full block is found and a fully-validating miner
> announced their next weak block.
>

This also speeds up propagation for the miner.  The first weak block that
is broadcast could end up being copied by many other miners.

A miner who is copying a block could send coinbase + original header if he
hits a block.  Weak blocks that are just coinbase + header could have lower
POW requirements, since they use up much less bandwidth.

Miners would mostly copy other miners once they had verified their blocks.
The IBLT system works well here.  A miner could pick a weak block that is
close to what it actually wants to broadcast.


> Weak block announcements are great for the network; they give transaction
> creators a pretty good idea of whether or not their transactions are likely
> to be confirmed in the next block.
>

Aggregator nodes could offer a service to show/prove how many weak blocks
that the transaction has been accepted in.


> And if we're smart about implementing them, they shouldn't increase
> bandwidth or CPU usage significantly, because all the weak blocks at a
> given point in time are likely to contain the same transactions.
>

This assumes other compression systems for handling block propagation.

>
>
> --
> --
> Gavin Andresen
>
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150923/3004f4bf/attachment.html>

From gavinandresen at gmail.com  Wed Sep 23 19:01:55 2015
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Wed, 23 Sep 2015 15:01:55 -0400
Subject: [bitcoin-dev] [BIP Proposal] Version bits with timeout and
	delay.
In-Reply-To: <5602F075.4000102@thinlink.com>
References: <87mvwqb132.fsf@rustcorp.com.au>
	<5602F075.4000102@thinlink.com>
Message-ID: <CABsx9T3pFAbtOv78uwaoToHWRXQGwmHA_h8KR89X2HLxiose5g@mail.gmail.com>

I say keep it simple.

If the 75% threshold is hit, then support suddenly drops off below 50%,
"meh" -- there will be a big ruckus, everybody will freak out, and miners
will refuse to build big blocks because they'll worry that they'll get
orphaned.

Adding more complexity for a case that ain't gonna happen (and isn't a
disaster if it does) is a mistake, in my humble opinion.



On Wed, Sep 23, 2015 at 2:33 PM, Tom Harding via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> On 9/13/2015 11:56 AM, Rusty Russell via bitcoin-dev wrote:
>
>> '''Success: Activation Delay'''
>> The consensus rules related to ''locked-in'' soft fork will be enforced in
>> the second retarget period; ie. there is a one retarget period in
>> which the remaining 5% can upgrade.  At the that activation block and
>> after, the bit B may be reused for a different soft fork.
>>
>>
> Rather than a simple one-period delay, should there be a one-period
> "burn-in" to show sustained support of the threshold?  During this period,
> support must continuously remain above the threshold.  Any lapse resets to
> inactivated state.
>
> With a simple delay, you can have the embarrassing situation where support
> falls off during the delay period and there is far below threshold support
> just moments prior to enforcement, but enforcement happens anyway.
>
> BIP 101 has this problem too.
>
>
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>



-- 
--
Gavin Andresen
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150923/c8d94f63/attachment.html>

From gmaxwell at gmail.com  Wed Sep 23 19:24:06 2015
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Wed, 23 Sep 2015 19:24:06 +0000
Subject: [bitcoin-dev] Weak block thoughts...
In-Reply-To: <CABaSBaxcDRzw0X7-fAfxPJyLcWxTHigpHuAPb4aNQ5zk5NoDCQ@mail.gmail.com>
References: <CABsx9T2+dG0AE+MgKRAU97KhkHTU1MuxXuwHKv3BgpJswZ5vVg@mail.gmail.com>
	<CABaSBaxcDRzw0X7-fAfxPJyLcWxTHigpHuAPb4aNQ5zk5NoDCQ@mail.gmail.com>
Message-ID: <CAAS2fgTr-OuL3T6mXX-4xFC_LHnAiogTTcPMbcjsM7WtRisQEQ@mail.gmail.com>

On Wed, Sep 23, 2015 at 4:07 PM, Bryan Bishop via bitcoin-dev
<bitcoin-dev at lists.linuxfoundation.org> wrote:
> more recently:
> http://gnusha.org/bitcoin-wizards/2015-09-20.log
> http://diyhpl.us/wiki/transcripts/scalingbitcoin/roundgroup-roundup-1/
> http://diyhpl.us/wiki/transcripts/scalingbitcoin/bitcoin-block-propagation-iblt-rusty-russell/

See also my response to Peter R's paper that was republished to the
list at http://pastebin.com/jFgkk8M3
(See sections at "For example, imagine if miners only include
transactions that were previously committed" and especially "Miners
volutarily participate in a fast consensus mechenism which commits to
transactions")

On Wed, Sep 23, 2015 at 3:43 PM, Gavin Andresen via bitcoin-dev
<bitcoin-dev at lists.linuxfoundation.org> wrote:
> Imagine miners always pre-announce the blocks they're working on to their
> peers, and peers validate those 'weak blocks' as quickly as they are able.
>
> Because weak blocks are pre-validated, when a full-difficulty block based on
> a previously announced weak block is found, block propagation should be
> insanely fast--
[...]
> A miner could try to avoid validation work by just taking a weak block
> announced by somebody else, replacing the coinbase and re-computing the
> merkle root, and then mining. They will be at a slight disadvantage to fully

Take care, here-- if a scheme is used where e.g. the full solution had
to be exactly identical to a prior weak block then the result would be
making mining not progress free because bigger miners would have
disproportionately more access to the weak/strong one/two punch. I
think what you're thinking here is okay, but it wasn't clear to me if
you'd caught that particular potential issue.

Avoiding this is why I've always previously described this idea as
merged mined block DAG (with blocks of arbitrary strength) which are
always efficiently deferentially coded against prior state. A new
solution (regardless of who creates it) can still be efficiently
transmitted even if it differs in arbitrary ways (though the
efficiency is less the more different it is).

There is a cost to these schemes-- additional overhead from
communicating the efficiently encoded weak blocks. But participation
in this overhead is optional and doesn't impact the history.

I'm unsure of what approach to take for incentive compatibility
analysis. In the worst case this approach class has no better delays
(and higher bandwidth); but it doesn't seem to me to give rise to any
immediate incrementally strategic behavior (or at least none worse
than you'd get from just privately using the same scheme).

On Wed, Sep 23, 2015 at 4:28 PM, Peter R via bitcoin-dev
<bitcoin-dev at lists.linuxfoundation.org> wrote:
> Shouldn't mining pools and miners be paying you guys for coding solutions
> that improve their profitability?

The income to miners as a whole doesn't depend on these sorts of
optimizations, competitive advantages do... so better common open
infrastructure helps mostly in the case of putting propagation
disadvantaged miners on an equal playing field. You'll note that none
of them are exactly sharing their SPV mining source code right now....
in any case, there are simple, expedient, and low risk ways to improve
their equality in that respect: centralize (e.g. use bigger pools).

From roy at osherove.com  Wed Sep 23 20:54:22 2015
From: roy at osherove.com (Roy Osherove)
Date: Wed, 23 Sep 2015 13:54:22 -0700
Subject: [bitcoin-dev] CI Build for Bitcoin - Some Basic Questions about
 Gitian and other stuff
In-Reply-To: <CAOG=w-uCLHEMHkGz8TGEPuqs0AshX+c=xt2VciCF5qkVdoRn-A@mail.gmail.com>
References: <CAAMhxnzWTNMQVcziTx9f4AYE0rvi8y2JKbYRF5t_ds4esx=Jkw@mail.gmail.com>
	<CAOG=w-uzmC3-2vYbSYDwvDhhP0FyC72G2dBVuj83zBMhqrvGOA@mail.gmail.com>
	<CAAMhxnw8J8nZbWPBEA9HOfJH0iiWO3uvD_frJ089R1kcbhciSg@mail.gmail.com>
	<CAOG=w-uCLHEMHkGz8TGEPuqs0AshX+c=xt2VciCF5qkVdoRn-A@mail.gmail.com>
Message-ID: <CAAMhxnw8KQeeWD5gz3kLsdgObXSaiaPGpS6Pt=ufTLarcxp5Cg@mail.gmail.com>

So who physically manually uploads the gitian build to bitcoin.org?

On Wed, Sep 23, 2015 at 11:10 AM, Mark Friedenbach <mark at friedenbach.org>
wrote:

> Well the gitian builds are made available on bitcoin.org. If you mean a
> build server where gitian builds are automatically done and made available,
> well that rather defeats the point of gitian.
>
> The quorum signatures are accumulated here:
> https://github.com/bitcoin/gitian.sigs (it's a manual process).
>
> On Wed, Sep 23, 2015 at 10:31 AM, Roy Osherove <roy at osherove.com> wrote:
>
>> Thanks Mark.
>> Is there a public server where the gitian builds can be viewed?
>> Is there a public server that shows the quorum verifications or that
>> shows how to join in on the verification if such as thing is helpful?
>>
>> On Wed, Sep 23, 2015 at 10:18 AM, Mark Friedenbach <mark at friedenbach.org>
>> wrote:
>>
>>> The builds made by Travis are for the purpose of making sure that the
>>> source code compiles and tests run successfully on all supported platforms.
>>> The binaries are not used anywhere else because Travis is not a trusted
>>> platform.
>>>
>>> The binaries on bitcoin.org are built using the gitian process and
>>> signed by a quorum of developers.
>>>
>>> On Wed, Sep 23, 2015 at 10:13 AM, Roy Osherove via bitcoin-dev <
>>> bitcoin-dev at lists.linuxfoundation.org> wrote:
>>>
>>>> Hi Folks.
>>>> I'm trying my hand at creating a reproducible build of my own for
>>>> bitcoin and bitcoin-XT, using TeamCity.
>>>> I believe it is the best way to learn something: To try to build it
>>>> yourself.
>>>> Here is what I think I know so far, and I would love corrections, plus
>>>> questions:
>>>>
>>>>    1. Bitcoin is built continuously on travis-CI at
>>>>    https://travis-ci.org/bitcoin/bitcoin/
>>>>    2.  there are many flavors that are built, but I'm not sure if all
>>>>    of them are actually used/necessary. are they all needed, or just to "just
>>>>    in case"?
>>>>    3.  There is a gitian build file for bitcoin, but is anyone
>>>>    actually using it? are the bin files on bitcoin.org taken from
>>>>    that? or the travis ci builds? or some other place?
>>>>    4. Are there any things that people would love to have in the build
>>>>    that do not exist there today? perhaps I can help with that?
>>>>
>>>> Here is what I have now: http://btcdev.osherove.com:8111/
>>>> It does not do the matrix build yet, but it's coming. I'm just
>>>> wondering if all the platforms need to be supported,and if gitian is truly
>>>> required to be used, or used in parallel, or at all..
>>>>
>>>> Feedback appreciated.
>>>>
>>>> --
>>>> Thanks,
>>>>
>>>> Roy Osherove
>>>>
>>>>    - *@RoyOsherove* <https://twitter.com/RoyOsherove>
>>>>    - Read my new book *Notes to a Software Team Leader
>>>> <http://TeamLeadSkills.com>*
>>>>    - Or *my new course* about Beautiful Builds
>>>> <http://courses.osherove.com> and Continuous Delivery
>>>>    - +1-201-256-5575
>>>>
>>>>
>>>>
>>>> _______________________________________________
>>>> bitcoin-dev mailing list
>>>> bitcoin-dev at lists.linuxfoundation.org
>>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>>>
>>>>
>>>
>>
>>
>> --
>> Thanks,
>>
>> Roy Osherove
>>
>>    - *@RoyOsherove* <https://twitter.com/RoyOsherove>
>>    - Read my new book *Notes to a Software Team Leader
>> <http://TeamLeadSkills.com>*
>>    - Or *my new course* about Beautiful Builds
>> <http://courses.osherove.com> and Continuous Delivery
>>    - +1-201-256-5575
>>     - Timezone: Eastern Standard Time (New York)
>>
>>
>>
>


-- 
Thanks,

Roy Osherove

   - *@RoyOsherove* <https://twitter.com/RoyOsherove>
   - Read my new book *Notes to a Software Team Leader
<http://TeamLeadSkills.com>*
   - Or *my new course* about Beautiful Builds <http://courses.osherove.com>
and Continuous Delivery
   - +1-201-256-5575
    - Timezone: Eastern Standard Time (New York)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150923/700a2825/attachment-0001.html>

From gavinandresen at gmail.com  Wed Sep 23 21:37:25 2015
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Wed, 23 Sep 2015 17:37:25 -0400
Subject: [bitcoin-dev] Weak block thoughts...
In-Reply-To: <CAAS2fgTr-OuL3T6mXX-4xFC_LHnAiogTTcPMbcjsM7WtRisQEQ@mail.gmail.com>
References: <CABsx9T2+dG0AE+MgKRAU97KhkHTU1MuxXuwHKv3BgpJswZ5vVg@mail.gmail.com>
	<CABaSBaxcDRzw0X7-fAfxPJyLcWxTHigpHuAPb4aNQ5zk5NoDCQ@mail.gmail.com>
	<CAAS2fgTr-OuL3T6mXX-4xFC_LHnAiogTTcPMbcjsM7WtRisQEQ@mail.gmail.com>
Message-ID: <CABsx9T3NFRO5nw3z=jrs0Hu3caVNkkTTTb1ibqR7LMWsoou9RQ@mail.gmail.com>

On Wed, Sep 23, 2015 at 3:24 PM, Gregory Maxwell <gmaxwell at gmail.com> wrote:

> On Wed, Sep 23, 2015 at 3:43 PM, Gavin Andresen via bitcoin-dev
> <bitcoin-dev at lists.linuxfoundation.org> wrote:
> [...]
> > A miner could try to avoid validation work by just taking a weak block
> > announced by somebody else, replacing the coinbase and re-computing the
> > merkle root, and then mining. They will be at a slight disadvantage to
> fully
>
> Take care, here-- if a scheme is used where e.g. the full solution had
> to be exactly identical to a prior weak block then the result would be
> making mining not progress free because bigger miners would have
> disproportionately more access to the weak/strong one/two punch. I
> think what you're thinking here is okay, but it wasn't clear to me if
> you'd caught that particular potential issue.
>

I'm assuming the optimized protocol would be forward-error-coded (e.g.
using IBLTs)  and NOT require the full solution (or follow-on weak blocks)
to be exactly the same.


> Avoiding this is why I've always previously described this idea as
> merged mined block DAG (with blocks of arbitrary strength) which are
> always efficiently deferentially coded against prior state. A new
> solution (regardless of who creates it) can still be efficiently
> transmitted even if it differs in arbitrary ways (though the
> efficiency is less the more different it is).
>

Yup, although I don't get the 'merge mined' bit; the weak blocks are
ephemeral, probably purged out of memory as soon as a few full blocks are
found...


> I'm unsure of what approach to take for incentive compatibility
> analysis. In the worst case this approach class has no better delays
> (and higher bandwidth); but it doesn't seem to me to give rise to any
> immediate incrementally strategic behavior (or at least none worse
> than you'd get from just privately using the same scheme).
>

I don't see any incentive problems, either. Worst case is more miners
decide to skip validation and just mine a variation of the
highest-fee-paying weak block they've seen, but that's not a disaster--
invalid blocks will still get rejected by all the non-miners running full
nodes.

If we did see that behavior, I bet it would be a good strategy for a big
hashrate miner to dedicate some of their hashrate to announcing invalid
weak blocks; if you can get your lazy competitors to mine it, then you
win....

-- 
--
Gavin Andresen
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150923/4ef4ac54/attachment.html>

From j at toom.im  Wed Sep 23 22:16:14 2015
From: j at toom.im (Jonathan Toomim (Toomim Bros))
Date: Wed, 23 Sep 2015 15:16:14 -0700
Subject: [bitcoin-dev] Weak block thoughts...
In-Reply-To: <CABsx9T3NFRO5nw3z=jrs0Hu3caVNkkTTTb1ibqR7LMWsoou9RQ@mail.gmail.com>
References: <CABsx9T2+dG0AE+MgKRAU97KhkHTU1MuxXuwHKv3BgpJswZ5vVg@mail.gmail.com>
	<CABaSBaxcDRzw0X7-fAfxPJyLcWxTHigpHuAPb4aNQ5zk5NoDCQ@mail.gmail.com>
	<CAAS2fgTr-OuL3T6mXX-4xFC_LHnAiogTTcPMbcjsM7WtRisQEQ@mail.gmail.com>
	<CABsx9T3NFRO5nw3z=jrs0Hu3caVNkkTTTb1ibqR7LMWsoou9RQ@mail.gmail.com>
Message-ID: <03FF5567-DF6E-4242-B63F-D71D1E7E393F@toom.im>


On Sep 23, 2015, at 2:37 PM, Gavin Andresen via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:

> Take care, here-- if a scheme is used where e.g. the full solution had
> to be exactly identical to a prior weak block then the result would be
> making mining not progress free because bigger miners would have
> disproportionately more access to the weak/strong one/two punch. I
> think what you're thinking here is okay, but it wasn't clear to me if
> you'd caught that particular potential issue.
> 
> I'm assuming the optimized protocol would be forward-error-coded (e.g. using IBLTs)  and NOT require the full solution (or follow-on weak blocks) to be exactly the same.
> 

One possible improvement on this is to cache Merkle nodes/subtrees. When a weak block is created, nodes could cache the hashes for the Merkle nodes along with each node's children. A miner could then describe their block in terms of Merkle nodes (describing groups of 2^n transactions), which would give them the ability to copy e.g. 87.5% or 96.875% or whatever of their new block from someone else's weak block but with a few modifications (e.g. new transactions) in the remaining non-prespecified portion. This gives small miners the ability to trade off versatility (do I specify all of the transactions with my own Merkle structure?) versus propagation speed (do I copy all of my Merkle tree from another miner's weak block?) with all steps in between.

I've got a proposal for a block propagation protocol inspired by bittorrent applied to the Merkle tree instead of chunks of a file. Weak blocks would fit in with this blocktorrent protocol quite nicely by caching and pre-transmitting Merkle nodes. I don't want to hijack this thread, so I'll post it under a separate subject in an hour or so.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150923/3edaab92/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 496 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150923/3edaab92/attachment.sig>

From j at toom.im  Wed Sep 23 23:12:14 2015
From: j at toom.im (Jonathan Toomim (Toomim Bros))
Date: Wed, 23 Sep 2015 16:12:14 -0700
Subject: [bitcoin-dev] Torrent-style new-block propagation on Merkle trees
Message-ID: <36CE1B0F-3BE5-4DC3-8488-A57667256059@toom.im>



As I understand it, the current block propagation algorithm is this:

1. A node mines a block.
2. It notifies its peers that it has a new block with an inv. Typical nodes have 8 peers.
3. The peers respond that they have not seen it, and request the block with getdata [hash].
4. The node sends out the block in parallel to all 8 peers simultaneously. If the node's upstream bandwidth is limiting, then all peers will receive most of the block before any peer receives all of the block. The block is sent out as the small header followed by a list of transactions.
5. Once a peer completes the download, it verifies the block, then enters step 2.

(If I'm missing anything, please let me know.)

The main problem with this algorithm is that it requires a peer to have the full block before it does any uploading to other peers in the p2p mesh. This slows down block propagation to O( p ? log_p(n) ), where n is the number of peers in the mesh, and p is the number of peers transmitted to simultaneously.

It's like the Napster era of file-sharing. We can do much better than this. Bittorrent can be an example for us. Bittorrent splits the file to be shared into a bunch of chunks, and hashes each chunk. Downloaders (leeches) grab the list of hashes, then start requesting their peers for the chunks out-of-order. As each leech completes a chunk and verifies it against the hash, it begins to share those chunks with other leeches. Total propagation time for large files can be approximately equal to the transmission time for an FTP upload. Sometimes it's significantly slower, but often it's actually faster due to less bottlenecking on a single connection and better resistance to packet/connection loss. (This could be relevant for crossing the Chinese border, since the Great Firewall tends to produce random packet loss, especially on encrypted connections.)

Bitcoin uses a data structure for transactions with hashes built-in. We can use that in lieu of Bittorrent's file chunks.

A Bittorrent-inspired algorithm might be something like this:

0. (Optional steps to build a Merkle cache; described later)
1. A seed node mines a block.
2. It notifies its peers that it has a new block with an extended version of inv.
3. The leech peers request the block header.
4. The seed sends the block header. The leech code path splits into two.
5(a). The leeches verify the block header, including the PoW. If the header is valid,
6(a). They notify their peers that they have a header for an unverified new block with an extended version of inv, looping back to 2. above. If it is invalid, they abort thread (b).
5(b). The leeches request the Nth row (from the root) of the transaction Merkle tree, where N might typically be between 2 and 10. That corresponds to about 1/4th to 1/1024th of the transactions. The leeches also request a bitfield indicating which of the Merkle nodes the seed has leaves for. The seed supplies this (0xFFFF...).
6(b). The leeches calculate all parent node hashes in the Merkle tree, and verify that the root hash is as described in the header.
7. The leeches search their Merkle hash cache to see if they have the leaves (transaction hashes and/or transactions) for that node already.
8. The leeches send a bitfield request to the node indicating which Merkle nodes they want the leaves for.
9. The seed responds by sending leaves (either txn hashes or full transactions, depending on benchmark results) to the leeches in whatever order it decides is optimal for the network.
10. The leeches verify that the leaves hash into the ancestor node hashes that they already have.
11. The leeches begin sharing leaves with each other.
12. If the leaves are txn hashes, they check their cache for the actual transactions. If they are missing it, they request the txns with a getdata, or all of the txns they're missing (as a list) with a few batch getdatas.

The main feature of this algorithm is that a leech will begin to upload chunks of data as soon as it gets them and confirms both PoW and hash/data integrity instead of waiting for a fully copy with full verification.

This algorithm is more complicated than the existing algorithm, and won't always be better in performance. Because more round trip messages are required for negotiating the Merkle tree transfers, it will perform worse in situations where the bandwidth to ping latency ratio is high relative to the blocksize. Specifically, the minimum per-hop latency will likely be higher. This might be mitigated by reducing the number of round-trip messages needed to set up the blocktorrent by using larger and more complex inv-like and getdata-like messages that preemptively send some data (e.g. block headers). This would trade off latency for bandwidth overhead from larger duplicated inv messages. Depending on implementation quality, the latency for the smallest block size might be the same between algorithms, or it might be 300% higher for the torrent algorithm. For small blocks (perhaps < 100 kB), the blocktorrent algorithm will likely be slightly slower. For large blocks (e.g. 8 MB over 20 Mbps), I expect the blocktorrent algo will likely be around an order of magnitude faster in the worst case (adversarial) scenarios, in which none of the block's transactions are in the caches.

One of the big benefits of the blocktorrent algorithm is that it provides several obvious and straightforward points for bandwidth saving and optimization by caching transactions and reconstructing the transaction order. A cooperating miner can pre-announce Merkle subtrees with some of the transactions they are planning on including in the final block. Other miners who see those subtrees can compare the transactions in those subtrees to the transaction sets they are mining with, and can rearrange their block prototypes to use the same subtrees as much as possible. In the case of public pools supporting the getblocktemplate protocol, it might be possible to build Merkle subtree caches without the pool's help by having one or more nodes just scraping their getblocktemplate results. Even if some transactions are inserted or deleted, it may be possible to guess a lot of the tree based on the previous ordering.

Once a block header and the first few rows of the Merkle tree have been published, they will propagate through the whole network, at which time full nodes might even be able to guess parts of the tree by searching through their txn and Merkle node/subtree caches. That might be fun to think about, but probably not effective due to O(n^2) or worse scaling with transaction count. Might be able to make it work if the whole network cooperates on it, but there are probably more important things to do.

There are also a few other features of Bittorrent that would be useful here, like prioritizing uploads to different peers based on their upload capacity, and banning peers that submit data that doesn't hash to the right value. (It might be good if we could get Bram Cohen to help with the implementation.)

Another option is just to treat the block as a file and literally Bittorrent it, but I think that there should be enough benefits to integrating it with the existing bitcoin p2p connections and also with using bitcoind's transaction caches and Merkle tree caches to make a native implementation worthwhile. Also, Bittorrent itself was designed to optimize more for bandwidth than for latency, so we will have slightly different goals and tradeoffs during implementation.

One of the concerns that I initially had about this idea was that it would involve nodes forwarding unverified block data to other nodes. At first, I thought this might be useful for a rogue miner or node who wanted to quickly waste the whole network's bandwidth. However, in order to perform this attack, the rogue needs to construct a valid header with a valid PoW, but use a set of transactions that renders the block as a whole invalid in a manner that is difficult to detect without full verification. However, it will be difficult to design such an attack so that the damage in bandwidth used has a greater value than the 240 exahashes (and 25.1 BTC opportunity cost) associated with creating a valid header.

As I understand it, the O(1) IBLT approach requires that blocks follow strict rules (yet to be fully defined) about the transaction ordering. If these are not followed, then it turns into sending a list of txn hashes, and separately ensuring that all of the txns in the new block are already in the recipient's mempool. When mempools are very dissimilar, the IBLT approach performance degrades heavily and performance becomes worse than simply sending the raw block. This could occur if a node just joined the network, during chain reorgs, or due to malicious selfish miners. Also, if the mempool has a lot more transactions than are included in the block, the false positive rate for detecting whether a transaction already exists in another node's mempool might get high for otherwise reasonable bucket counts/sizes.

With the blocktorrent approach, the focus is on transmitting the list of hashes in a manner that propagates as quickly as possible while still allowing methods for reducing the total bandwidth needed. The blocktorrent algorithm does not really address how the actual transaction data will be obtained because, once the leech has the list of txn hashes, the standard Bitcoin p2p protocol can supply them in a parallelized and decentralized manner.



Thoughts?

-jtoomim

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150923/8e6e7243/attachment-0001.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 496 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150923/8e6e7243/attachment-0001.sig>

From gubatron at gmail.com  Thu Sep 24 00:31:27 2015
From: gubatron at gmail.com (Angel Leon)
Date: Wed, 23 Sep 2015 20:31:27 -0400
Subject: [bitcoin-dev] Torrent-style new-block propagation on Merkle
	trees
In-Reply-To: <36CE1B0F-3BE5-4DC3-8488-A57667256059@toom.im>
References: <36CE1B0F-3BE5-4DC3-8488-A57667256059@toom.im>
Message-ID: <CADZB0_ZCmWdj+mD5O-CR6a6w0RWZhgUL_TRu7Jzth=kvK504xw@mail.gmail.com>

has anybody ever submitted a patch using libtorrent's library for this
purpose?
would it make sense to create a torrent per confirmed valid block once it's
been truly added to the blockchain?

if we used libtorrent, I imagine the following to announce the new block on
libtorrent's DHT

(PSEUDO CODE)

// this is how you could announce yourself as a peer on the DHT holding a
block at a certain height.
// the announcement would include a TCP port to then request more
information about that block.
string peer_announcement_key = sha1_hasher("blockchain::bitcoin::block::" +
last_block_height_number).final();
session.dht_announce(peer_announcement_key, rpc_port, 0);

// then another peer looking for peers that might be seeding a block at N
height would:
sessoin.dht_get_peers(sha1_hasher("blockchain::bitcoin::block::" +
N_height).final());

// asynchronously you'd handle the responses by the XOR-nearest peers on
the DHT
// this search would be O(log n)
// you could then request from several of these guys what's the infohash
for the .torrent
// that's been created to seed the block at height N.

then you'd start the block download by building a magnet link out of the
infohash received for the block.
The download would be done directly to memory and then such byte array
would be serialized as a block
as it is done now, and you'd then announce yourself both on the
sha1(peer_announcement_key) and
on the infohash of the block you just downloaded, after you start seeding
it.

perhaps the block's torrent chunk sizes could be made optimal so that
chunks sent would perfectly match
tranactions, this way you could start building the blocks on the other end
as they're being downloaded from the swarm.


http://twitter.com/gubatron

On Wed, Sep 23, 2015 at 7:12 PM, Jonathan Toomim (Toomim Bros) via
bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:

>
>
> As I understand it, the current block propagation algorithm is this:
>
> 1. A node mines a block.
> 2. It notifies its peers that it has a new block with an *inv*. Typical
> nodes have 8 peers.
> 3. The peers respond that they have not seen it, and request the block
> with *getdata* [hash].
> 4. The node sends out the block in parallel to all 8 peers simultaneously.
> If the node's upstream bandwidth is limiting, then all peers will receive
> most of the block before any peer receives all of the block. The block is
> sent out as the small header followed by a list of transactions.
> 5. Once a peer completes the download, it verifies the block, then enters
> step 2.
>
> (If I'm missing anything, please let me know.)
>
> The main problem with this algorithm is that it requires a peer to have
> the full block before it does any uploading to other peers in the p2p mesh.
> This slows down block propagation to O( p ? log_p(n) ), where n is the
> number of peers in the mesh, and p is the number of peers transmitted to
> simultaneously.
>
> It's like the Napster era of file-sharing. We can do much better than
> this. Bittorrent can be an example for us. Bittorrent splits the file to be
> shared into a bunch of chunks, and hashes each chunk. Downloaders (leeches)
> grab the list of hashes, then start requesting their peers for the chunks
> out-of-order. As each leech completes a chunk and verifies it against the
> hash, it begins to share those chunks with other leeches. Total propagation
> time for large files can be approximately equal to the transmission time
> for an FTP upload. Sometimes it's significantly slower, but often it's
> actually faster due to less bottlenecking on a single connection and better
> resistance to packet/connection loss. (This could be relevant for crossing
> the Chinese border, since the Great Firewall tends to produce random packet
> loss, especially on encrypted connections.)
>
> Bitcoin uses a data structure for transactions with hashes built-in. We
> can use that in lieu of Bittorrent's file chunks.
>
> A Bittorrent-inspired algorithm might be something like this:
>
> 0. (Optional steps to build a Merkle cache; described later)
> 1. A seed node mines a block.
> 2. It notifies its peers that it has a new block with an extended version
> of *inv*.
> 3. The leech peers request the block header.
> 4. The seed sends the block header. The leech code path splits into two.
> 5(a). The leeches verify the block header, including the PoW. If the
> header is valid,
> 6(a). They notify their peers that they have a header for an unverified
> new block with an extended version of *inv*, looping back to 2. above. If
> it is invalid, they abort thread (b).
> 5(b). The leeches request the Nth row (from the root) of the transaction
> Merkle tree, where N might typically be between 2 and 10. That corresponds
> to about 1/4th to 1/1024th of the transactions. The leeches also request a
> bitfield indicating which of the Merkle nodes the seed has leaves for. The
> seed supplies this (0xFFFF...).
> 6(b). The leeches calculate all parent node hashes in the Merkle tree, and
> verify that the root hash is as described in the header.
> 7. The leeches search their Merkle hash cache to see if they have the
> leaves (transaction hashes and/or transactions) for that node already.
> 8. The leeches send a bitfield request to the node indicating which Merkle
> nodes they want the leaves for.
> 9. The seed responds by sending leaves (either txn hashes or full
> transactions, depending on benchmark results) to the leeches in whatever
> order it decides is optimal for the network.
> 10. The leeches verify that the leaves hash into the ancestor node hashes
> that they already have.
> 11. The leeches begin sharing leaves with each other.
> 12. If the leaves are txn hashes, they check their cache for the actual
> transactions. If they are missing it, they request the txns with a
> *getdata*, or all of the txns they're missing (as a list) with a few
> batch *getdata*s.
>
> The main feature of this algorithm is that a leech will begin to upload
> chunks of data as soon as it gets them and confirms both PoW and hash/data
> integrity instead of waiting for a fully copy with full verification.
>
> This algorithm is more complicated than the existing algorithm, and won't
> always be better in performance. Because more round trip messages are
> required for negotiating the Merkle tree transfers, it will perform worse
> in situations where the bandwidth to ping latency ratio is high relative to
> the blocksize. Specifically, the minimum per-hop latency will likely be
> higher. This might be mitigated by reducing the number of round-trip
> messages needed to set up the blocktorrent by using larger and more complex
> *inv*-like and *getdata*-like messages that preemptively send some data
> (e.g. block headers). This would trade off latency for bandwidth overhead
> from larger duplicated *inv* messages. Depending on implementation
> quality, the latency for the smallest block size might be the same between
> algorithms, or it might be 300% higher for the torrent algorithm. For small
> blocks (perhaps < 100 kB), the blocktorrent algorithm will likely be
> slightly slower. For large blocks (e.g. 8 MB over 20 Mbps), I expect the
> blocktorrent algo will likely be around an order of magnitude faster in the
> worst case (adversarial) scenarios, in which none of the block's
> transactions are in the caches.
>
> One of the big benefits of the blocktorrent algorithm is that it provides
> several obvious and straightforward points for bandwidth saving and
> optimization by caching transactions and reconstructing the transaction
> order. A cooperating miner can pre-announce Merkle subtrees with some of
> the transactions they are planning on including in the final block. Other
> miners who see those subtrees can compare the transactions in those
> subtrees to the transaction sets they are mining with, and can rearrange
> their block prototypes to use the same subtrees as much as possible. In the
> case of public pools supporting the *getblocktemplate* protocol, it might
> be possible to build Merkle subtree caches without the pool's help by
> having one or more nodes just scraping their *getblocktemplate* results.
> Even if some transactions are inserted or deleted, it may be possible to
> guess a lot of the tree based on the previous ordering.
>
> Once a block header and the first few rows of the Merkle tree have been
> published, they will propagate through the whole network, at which time
> full nodes might even be able to guess parts of the tree by searching
> through their txn and Merkle node/subtree caches. That might be fun to
> think about, but probably not effective due to O(n^2) or worse scaling with
> transaction count. Might be able to make it work if the whole network
> cooperates on it, but there are probably more important things to do.
>
> There are also a few other features of Bittorrent that would be useful
> here, like prioritizing uploads to different peers based on their upload
> capacity, and banning peers that submit data that doesn't hash to the right
> value. (It might be good if we could get Bram Cohen to help with the
> implementation.)
>
> Another option is just to treat the block as a file and literally
> Bittorrent it, but I think that there should be enough benefits to
> integrating it with the existing bitcoin p2p connections and also with
> using bitcoind's transaction caches and Merkle tree caches to make a native
> implementation worthwhile. Also, Bittorrent itself was designed to optimize
> more for bandwidth than for latency, so we will have slightly different
> goals and tradeoffs during implementation.
>
> One of the concerns that I initially had about this idea was that it would
> involve nodes forwarding unverified block data to other nodes. At first, I
> thought this might be useful for a rogue miner or node who wanted to
> quickly waste the whole network's bandwidth. However, in order to perform
> this attack, the rogue needs to construct a valid header with a valid PoW,
> but use a set of transactions that renders the block as a whole invalid in
> a manner that is difficult to detect without full verification. However, it
> will be difficult to design such an attack so that the damage in bandwidth
> used has a greater value than the 240 exahashes (and 25.1 BTC opportunity
> cost) associated with creating a valid header.
>
> As I understand it, the O(1) IBLT approach requires that blocks follow
> strict rules (yet to be fully defined) about the transaction ordering. If
> these are not followed, then it turns into sending a list of txn hashes,
> and separately ensuring that all of the txns in the new block are already
> in the recipient's mempool. When mempools are very dissimilar, the IBLT
> approach performance degrades heavily and performance becomes worse than
> simply sending the raw block. This could occur if a node just joined the
> network, during chain reorgs, or due to malicious selfish miners. Also, if
> the mempool has a lot more transactions than are included in the block, the
> false positive rate for detecting whether a transaction already exists in
> another node's mempool might get high for otherwise reasonable bucket
> counts/sizes.
>
> With the blocktorrent approach, the focus is on transmitting the list of
> hashes in a manner that propagates as quickly as possible while still
> allowing methods for reducing the total bandwidth needed. The blocktorrent
> algorithm does not really address how the actual transaction data will be
> obtained because, once the leech has the list of txn hashes, the standard
> Bitcoin p2p protocol can supply them in a parallelized and decentralized
> manner.
>
>
>
> Thoughts?
>
> -jtoomim
>
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150923/8065ee6a/attachment.html>

From rusty at rustcorp.com.au  Thu Sep 24 01:11:03 2015
From: rusty at rustcorp.com.au (Rusty Russell)
Date: Thu, 24 Sep 2015 10:41:03 +0930
Subject: [bitcoin-dev] Weak block thoughts...
In-Reply-To: <CABsx9T3NFRO5nw3z=jrs0Hu3caVNkkTTTb1ibqR7LMWsoou9RQ@mail.gmail.com>
References: <CABsx9T2+dG0AE+MgKRAU97KhkHTU1MuxXuwHKv3BgpJswZ5vVg@mail.gmail.com>
	<CABaSBaxcDRzw0X7-fAfxPJyLcWxTHigpHuAPb4aNQ5zk5NoDCQ@mail.gmail.com>
	<CAAS2fgTr-OuL3T6mXX-4xFC_LHnAiogTTcPMbcjsM7WtRisQEQ@mail.gmail.com>
	<CABsx9T3NFRO5nw3z=jrs0Hu3caVNkkTTTb1ibqR7LMWsoou9RQ@mail.gmail.com>
Message-ID: <87wpvg39lk.fsf@rustcorp.com.au>

Gavin Andresen via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org>
writes:
> I don't see any incentive problems, either. Worst case is more miners
> decide to skip validation and just mine a variation of the
> highest-fee-paying weak block they've seen, but that's not a disaster--
> invalid blocks will still get rejected by all the non-miners running full
> nodes.

That won't help SPV nodes, unfortunately.

> If we did see that behavior, I bet it would be a good strategy for a big
> hashrate miner to dedicate some of their hashrate to announcing invalid
> weak blocks; if you can get your lazy competitors to mine it, then you
> win....

We already see non-validating mining, but they do empty blocks.  This
just makes it more attractive in the future, since you can collect fees
too.

But I think it's clear we'll eventually need some UTXO commitment so
full nodes can tell SPV nodes about bad blocks.

Cheers,
Rusty.

From rusty at rustcorp.com.au  Thu Sep 24 01:32:34 2015
From: rusty at rustcorp.com.au (Rusty Russell)
Date: Thu, 24 Sep 2015 11:02:34 +0930
Subject: [bitcoin-dev] Weak block thoughts...
In-Reply-To: <CABsx9T2+dG0AE+MgKRAU97KhkHTU1MuxXuwHKv3BgpJswZ5vVg@mail.gmail.com>
References: <CABsx9T2+dG0AE+MgKRAU97KhkHTU1MuxXuwHKv3BgpJswZ5vVg@mail.gmail.com>
Message-ID: <87twqk38lp.fsf@rustcorp.com.au>

Gavin Andresen via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org>
writes:
> I've been thinking about 'weak blocks' and SPV mining, and it seems to me
> weak blocks will make things better, not worse, if we improve the mining
> code a little bit.
>
> First:  the idea of 'weak blocks' (hat tip to Rusty for the term) is for
> miners to pre-announce blocks that they're working on, before they've
> solved the proof-of-work puzzle. To prevent DoS attacks, assume that some
> amount of proof-of-work is done (hence the term 'weak block') to rate-limit
> how many 'weak block' messages are relayed across the network.
>
>
> Today, miners are incentivized to start mining an empty block as soon as
> they see a block with valid proof-of-work, because they want to spend as
> little time as possible mining a not-best chain.
>
> Imagine miners always pre-announce the blocks they're working on to their
> peers, and peers validate those 'weak blocks' as quickly as they are able.
>
> Because weak blocks are pre-validated, when a full-difficulty block based
> on a previously announced weak block is found, block propagation should be
> insanely fast-- basically, as fast as a single packet can be relayed across
> the network the whole network could be mining on the new block.

The bandwidth/latency argument is solid.  And if a block encodes to <
~3k, then we can just spray it to (some?) peers rather than using INV.

But validation is only trivially cachable if the delta to the previous
weak block is zero.  The "partially validated" cases need to be coded
with care (eg. total opcode constraints, tx order).

I was thinking as a first cut we do the opposite: don't validate weak
blocks at all (other than PoW), and just use them as a bandwidth
optimization.

Ambition is good though!

Chers,
Rusty.
PS.  Original idea came to me from Greg Maxwell; Peter Todd called it
     "near blocks" and extolled their virtues 2 years ago...

From tier.nolan at gmail.com  Thu Sep 24 08:52:34 2015
From: tier.nolan at gmail.com (Tier Nolan)
Date: Thu, 24 Sep 2015 09:52:34 +0100
Subject: [bitcoin-dev] Torrent-style new-block propagation on Merkle
	trees
In-Reply-To: <36CE1B0F-3BE5-4DC3-8488-A57667256059@toom.im>
References: <36CE1B0F-3BE5-4DC3-8488-A57667256059@toom.im>
Message-ID: <CAE-z3OV-1wziASBZ3moE9D2=bVVh7-RBwjMJAV=3LcanCzbN1w@mail.gmail.com>

On Thu, Sep 24, 2015 at 12:12 AM, Jonathan Toomim (Toomim Bros) via
bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:

>
>
> As I understand it, the current block propagation algorithm is this:
>
> 1. A node mines a block.
> 2. It notifies its peers that it has a new block with an *inv*. Typical
> nodes have 8 peers.
> 3. The peers respond that they have not seen it, and request the block
> with *getdata* [hash].
> 4. The node sends out the block in parallel to all 8 peers simultaneously.
> If the node's upstream bandwidth is limiting, then all peers will receive
> most of the block before any peer receives all of the block. The block is
> sent out as the small header followed by a list of transactions.
> 5. Once a peer completes the download, it verifies the block, then enters
> step 2.
>

Mining pools currently connect to the "fast relay network".  This is
optimised for fast block distribution.  It does no validation and is only
for low latency propagation.  The normal network is used as a fallback.

My understanding is that it works as follows:

Each miner runs a normal full node and a relay node on the same computer.

The full node tells the relay node whenever it receives a new transaction
via the inv message and the node requests the full transaction.

The relay node tells its relay peers that it knows about the transaction
(hash only) and its 4 byte key. This is not forwarded onwards, since the
relay peer only gets the hash of the transaction and doesn't do validation
anyway.  The key is just a 4 byte counter.

Each relay node keeps a mapping of txid to key for each of its peer.  There
is some garbage collection and entries are removed once the transaction is
included in a block (there might be a confirm threshold).

When a block is found, the local node sends it to the relay node.  The
relay node then forwards it to all of its peers in a compact form.

The block is sent as a list of keys for that peer and full transactions are
only sent for unknown transactions.

When a relay node receives a block, it just verifies the POW, checks that
it is new and recent.  It does not do tx validation.  It forwards the block
to its local full node, which does the validation.  Since the relay node is
on localhost, it never gets kicked due to sending invalid blocks.  This
prevents a DOS attack where you could send invalid blocks to the relay node
and cause the local full node to kick it.

If all the transactions are already known, then it can forward a block for
only 4 bytes per transactions.  I think it has an optimisation, so that is
compressed to 1 byte per tx.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150924/4144a8ea/attachment.html>

From dev at jonasschnelli.ch  Thu Sep 24 09:18:16 2015
From: dev at jonasschnelli.ch (Jonas Schnelli)
Date: Thu, 24 Sep 2015 11:18:16 +0200
Subject: [bitcoin-dev] CI Build for Bitcoin - Some Basic Questions about
 Gitian and other stuff
In-Reply-To: <CAAMhxnw8KQeeWD5gz3kLsdgObXSaiaPGpS6Pt=ufTLarcxp5Cg@mail.gmail.com>
References: <CAAMhxnzWTNMQVcziTx9f4AYE0rvi8y2JKbYRF5t_ds4esx=Jkw@mail.gmail.com>	<CAOG=w-uzmC3-2vYbSYDwvDhhP0FyC72G2dBVuj83zBMhqrvGOA@mail.gmail.com>	<CAAMhxnw8J8nZbWPBEA9HOfJH0iiWO3uvD_frJ089R1kcbhciSg@mail.gmail.com>	<CAOG=w-uCLHEMHkGz8TGEPuqs0AshX+c=xt2VciCF5qkVdoRn-A@mail.gmail.com>
	<CAAMhxnw8KQeeWD5gz3kLsdgObXSaiaPGpS6Pt=ufTLarcxp5Cg@mail.gmail.com>
Message-ID: <5603BFD8.2090608@jonasschnelli.ch>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256

Hi Roy

> So who physically manually uploads the gitian build to bitcoin.org 
> <http://bitcoin.org>?

It's done by the core devs (very likely the project maintainer).
I think it doesn't matter who did the upload to bitcoin.org.

What really would matter is ? if users deciding to run a pre-compiled
version of bitcoin-core ? that they verify the binary against the
available gitian sigs.

Signatur repository:
https://github.com/bitcoin/gitian.sigs

PGP Pubkeys (mostly also available over gpg key servers):
https://github.com/bitcoin/bitcoin/tree/master/contrib/gitian-downloader

Instruction available here:
https://www.reddit.com/r/Bitcoin/wiki/verifying_bitcoin_core


/jonas
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2

iQIcBAEBCAAGBQJWA7/YAAoJECnUvLZBb1PspoEQAKDs672Vn/EFEn02oYbo41Xi
tiHLpZMePiL1GV+XAQrqA91x5Q4RY2oJBmBzq2Bnllr+fm5zodcTP80lDyYeizb7
+2MPuoF8ICMYxUDJ3tz163Y4hHforFyMMHgr/NPXQcsMEEnEuAQIMxRFMqexhkn9
W/YVT2ow/5illYmZ9EAoSreaD+1ShVTxkZY2ltY79ZATTcVU85mEXau9Jv6qq4sN
jHCWAJYrsFQay4t42Pp4ciclz3A7W//OoFhwxUR2sNcDZ6NkOSnYOZSwMPM4uBAL
z1OpSWVOSQZeGXFOzEF07oyLaCVKm6ygND4IT7eFcvlrgXMIYE0bvzfqPymBArRJ
ZSKR0bmTkUsuw3NCcV23HF8yW+G/Y/SKPRl5n1AmmXppzklSSojDzDT3h2xKGNTd
DYoIQhwsNcm7sLlmHZa+VZ7peeCzdQ9z+OTG1ZDwDsFRBDY9kTbP2pD1tHEkEvxR
z2DJg8iP9V4ZUUFEuAdOOCInl1v+0RJu8DxWa6BZmLYJ/SVuKqSEZ0HYBqPOJOUO
4ct+NLyY7fNQurq0VzIjpZN9/L+SEePSIP4bFwOiGBJosUEHyS3VZ7JZZMOs5jxx
1GDI964Pi54Z/XPzV2+X1GjWLeReJ6WUznX7zv/LNER2yI6XQBw2w5/rmomI+ifl
vk5pfinRCIP3t6q+K0ge
=vP2n
-----END PGP SIGNATURE-----

From laanwj at gmail.com  Thu Sep 24 11:25:56 2015
From: laanwj at gmail.com (Wladimir J. van der Laan)
Date: Thu, 24 Sep 2015 13:25:56 +0200
Subject: [bitcoin-dev] Bitcoin Core 0.12.0 release schedule
Message-ID: <20150924112555.GA21355@amethyst.visucore.com>

Hello all,

The next major release of Bitcoin Core, 0.12.0 is planned for the end of the year. Let's propose a more detailed schedule:

2015-11-01
-----------
- Open Transifex translations for 0.12
- Soft translation string freeze (no large or unnecessary changes)
- Finalize and close translation for 0.10

2015-12-01
-----------
- Feature freeze
- Translation string freeze

In December at least I will probably not get much done code-wise (Scaling Bitcoin Hongkong, 32C3, end of year festivities, etc), and I'm sure I'm not the only one, so let's leave that for last pre-RC bugfixes and polishing.

2016-01-06
-----------
- Split off `0.12` branch from `master`
- Start RC cycle, tag and release `0.12.0rc1`
- Start merging for 0.13 on master branch

2016-02-01
-----------
- Release 0.12.0 final (aim)

Wladimir



From michabailey at gmail.com  Thu Sep 24 15:33:06 2015
From: michabailey at gmail.com (Micha Bailey)
Date: Thu, 24 Sep 2015 18:33:06 +0300
Subject: [bitcoin-dev] Weekly development meetings on IRC: schedule
In-Reply-To: <CACrzPemxwp++qeQZTHjFYg+9eS+E-1PsCLyg047XgmeLAfEZUQ@mail.gmail.com>
References: <20150922143628.GB958@amethyst.visucore.com>
	<f639adb573ed49c5755d63e6c0c0a58f@xbt.hk>
	<CACrzPemxwp++qeQZTHjFYg+9eS+E-1PsCLyg047XgmeLAfEZUQ@mail.gmail.com>
Message-ID: <CAAmoQf24n06EH3-=NPaCKZfg4Ckoh78Cs-zYNQNCSxAsr5WZXg@mail.gmail.com>

That's suboptimal for Europe etc., starting at midnight in the UK, 1 AM in
CET, 2 AM in EET (an hour earlier once DST ends).

On Wednesday, September 23, 2015, Vincent Truong via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> All,
>
> Current meeting time visualised globally.
>
> http://everytimezone.com/#2015-9-24,420,4ia
>
> jl,
>
> I think I found a good compromise: if the US want to accommodate Asia and
> willing to sacrifice preference, 23:00 to 00:00 UTC might work.
>
> http://everytimezone.com/#2015-9-24,660,4ia
>
> It isn't easy to grab everyone's preference and accommodate everyone, so
> this might work in theory but people may not be free to show up. US should
> be ok. UK can participate or catch some nice z. Asia will need a bit of
> early bird time but it's not as crazy as 3am. AU also fits in there nicely.
>
> A meeting like this once a month should be enough probably (say, do this
> on the first week of the month, and run every other week on the main
> schedule). But I don't know whether there are enough people in Asia/AU to
> make it worth it. Asia/AU people, thoughts?
> On Sep 23, 2015 9:01 PM, "jl2012 via bitcoin-dev" <
> bitcoin-dev at lists.linuxfoundation.org
> <javascript:_e(%7B%7D,'cvml','bitcoin-dev at lists.linuxfoundation.org');>>
> wrote:
>
>> There could not be a worse timing than this for those in China (3-4am),
>> Japan/Korea (4-5am), and Australia (3-6am depends on which part of the
>> country). Maybe we have no dev in this part of the planet? Is there any
>> chance to review the timing in a weekly or monthly basis (also with a
>> doodle vote?)
>>
>> Will there be any agenda published before the meetings? If I'm really
>> interested in the topics, I'll have some reasons to get up in the middle of
>> the night.
>>
>> Wladimir J. van der Laan via bitcoin-dev ? 2015-09-22 10:36 ??:
>>
>>> Hello,
>>>
>>> There was overwhelming response that weekly IRC meetings are a good
>>> thing.
>>>
>>> Thanks to the doodle site we were able to select a time slot that
>>> everyone (that voted) is available:
>>>
>>>     Thursday 19:00-20:00 UTC, every week, starting September 24 (next
>>> Thursday)
>>>
>>> I created a shared Google Calendar here:
>>>
>>> https://www.google.com/calendar/embed?src=MTFwcXZkZ3BkOTlubGliZjliYTg2MXZ1OHNAZ3JvdXAuY2FsZW5kYXIuZ29vZ2xlLmNvbQ
>>>
>>> The timezone of this calendar is Reykyavik (Iceland) which is UTC+0.
>>> However, you can use the button on the lower right to add the calendar
>>> to your own calendar, which will then show the meeting in your own
>>> timezone.
>>>
>>> See you then,
>>>
>>> Wladimir
>>>
>>> _______________________________________________
>>> bitcoin-dev mailing list
>>> bitcoin-dev at lists.linuxfoundation.org
>>> <javascript:_e(%7B%7D,'cvml','bitcoin-dev at lists.linuxfoundation.org');>
>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>>
>>
>> _______________________________________________
>> bitcoin-dev mailing list
>> bitcoin-dev at lists.linuxfoundation.org
>> <javascript:_e(%7B%7D,'cvml','bitcoin-dev at lists.linuxfoundation.org');>
>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150924/983769e0/attachment-0001.html>

From sdaftuar at gmail.com  Thu Sep 24 18:02:28 2015
From: sdaftuar at gmail.com (Suhas Daftuar)
Date: Thu, 24 Sep 2015 14:02:28 -0400
Subject: [bitcoin-dev] [BIP Proposal] New "sendheaders" p2p message
Message-ID: <CAFp6fsHBbyVo21DnQKGBVJ7P=8NqOGJ-jv0-MH9WaBD6vauudA@mail.gmail.com>

Hi,

I'm proposing the addition of a new, optional p2p message to help improve
the way blocks are announced on the network.  The draft BIP is available
here and pasted below:
https://gist.github.com/sdaftuar/465bf008f0a4768c0def

The goal of this p2p message is to facilitate nodes being able to
optionally announce blocks with headers messages rather than with inv's,
which is particularly beneficial since the introduction of headers-first
download in Bitcoin Core 0.10.  In particular, this allows for more
efficient propagation of reorgs as it would eliminate a round trip in
network communication.

The implementation of this BIP (which includes code to directly fetch
blocks based on announced headers) is in
https://github.com/bitcoin/bitcoin/pull/6494.  For additional background,
please also see https://github.com/bitcoin/bitcoin/issues/5982.

Note that this new p2p message is optional; nodes can feel free to ignore
and continue to use inv messages to announce new blocks.

Thanks to Pieter Wuille for suggesting this idea.

Draft BIP text:

<pre>
  BIP: <unassigned>
  Title: sendheaders message
  Author: Suhas Daftuar <sdaftuar at chaincode.com>
  Status: Draft
  Type: Standards Track
  Created: 2015-05-08
</pre>

==Abstract==

Add a new message, "sendheaders", which indicates that a node prefers to
receive new block announcements via a "headers" message rather than an
"inv".

==Motivation==

Since the introduction of "headers-first" downloading of blocks in 0.10,
blocks will not be processed unless
they are able to connect to a (valid) headers chain.  Consequently, block
relay generally works
as follows:
# A node (N) announces the new tip with an "inv" message, containing the
block hash
# A peer (P) responds to the "inv" with a "getheaders" message (to request
headers up to the new tip) and a "getdata" message for the new tip itself
# N responds with a "headers" message (with the header for the new block
along with any preceding headers unknown to P) and a "block" message
containing the new block

However, in the case where a new block is being announced that builds on
the tip, it would be generally more efficient if the node N just announced
the block header for the new block, rather than just the block hash, and
saved the peer from generating and transmitting the getheaders message (and
the required block locator).

In the case of a reorg, where 1 or more blocks are disconnected, nodes
currently just send an "inv" for the new tip.  Peers currently are able to
request the new tip immediately, but wait until the headers for the
intermediate blocks are delivered before requesting those blocks.  By
announcing headers from the last fork point leading up to the new tip in
the block announcement, peers are able to request all the intermediate
blocks immediately.

==Specification==

# The sendheaders message is defined as an empty message where pchCommand
== "sendheaders"
# Upon receipt of a "sendheaders" message, the node will be permitted, but
not required, to announce new blocks by sending the header of the new block
(along with any other blocks that a node believes a peer might need in
order for the block to connect).
# Feature discovery is enabled by checking protocol version >= 70012

==Backward compatibility==

Older clients remain fully compatible and interoperable after this change.

==Implementation==

https://github.com/bitcoin/bitcoin/pull/6494
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150924/42c7569e/attachment.html>

From tier.nolan at gmail.com  Thu Sep 24 18:17:50 2015
From: tier.nolan at gmail.com (Tier Nolan)
Date: Thu, 24 Sep 2015 19:17:50 +0100
Subject: [bitcoin-dev] [BIP Proposal] New "sendheaders" p2p message
In-Reply-To: <CAFp6fsHBbyVo21DnQKGBVJ7P=8NqOGJ-jv0-MH9WaBD6vauudA@mail.gmail.com>
References: <CAFp6fsHBbyVo21DnQKGBVJ7P=8NqOGJ-jv0-MH9WaBD6vauudA@mail.gmail.com>
Message-ID: <CAE-z3OUKTKh5-SHkiawr4R58Fdg9N6_1PLjW19YsF-K9OOjQow@mail.gmail.com>

On Thu, Sep 24, 2015 at 7:02 PM, Suhas Daftuar via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> Hi,
>
> I'm proposing the addition of a new, optional p2p message to help improve
> the way blocks are announced on the network.  The draft BIP is available
> here and pasted below:
> https://gist.github.com/sdaftuar/465bf008f0a4768c0def
>
> The goal of this p2p message is to facilitate nodes being able to
> optionally announce blocks with headers messages rather than with inv's,
> which is particularly beneficial since the introduction of headers-first
> download in Bitcoin Core 0.10.  In particular, this allows for more
> efficient propagation of reorgs as it would eliminate a round trip in
> network communication.
>

Is there actually a requirement for the new message?  New nodes could just
unilaterally switch to sending headers and current nodes would be
compatible.

It looks like the only DOS misbehaving penalty is if the header is invalid
or if the headers don't form a chain.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150924/8eeade53/attachment.html>

From sdaftuar at gmail.com  Thu Sep 24 18:37:40 2015
From: sdaftuar at gmail.com (Suhas Daftuar)
Date: Thu, 24 Sep 2015 14:37:40 -0400
Subject: [bitcoin-dev] [BIP Proposal] New "sendheaders" p2p message
In-Reply-To: <CAE-z3OUKTKh5-SHkiawr4R58Fdg9N6_1PLjW19YsF-K9OOjQow@mail.gmail.com>
References: <CAFp6fsHBbyVo21DnQKGBVJ7P=8NqOGJ-jv0-MH9WaBD6vauudA@mail.gmail.com>
	<CAE-z3OUKTKh5-SHkiawr4R58Fdg9N6_1PLjW19YsF-K9OOjQow@mail.gmail.com>
Message-ID: <CAFp6fsEq0So3nUtRrn1G3Q-sEFUpK7myxfvT9-p9LNkxPGYoTw@mail.gmail.com>

On Thu, Sep 24, 2015 at 2:17 PM, Tier Nolan via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

>
> Is there actually a requirement for the new message?  New nodes could just
> unilaterally switch to sending headers and current nodes would be
> compatible.
>

I don't believe that unilaterally switching to headers announcements would
work for all network participants -- both for users running older Bitcoin
Core versions (anything before 0.10, which I believe all ignore headers
messages) and for non-Bitcoin Core software that participates on the
network (which may ignore headers messages too, I'm not sure what all is
out there).

Even for Bitcoin Core versions 0.10 and 0.11, which process headers and use
them to determine what blocks to download, the block fetching logic is not
optimized for new block announcements via headers messages.  Part of what
is implemented in the pull request is direct fetching of blocks upon
receiving a headers message; nodes that don't implement block downloading
in response to headers announcements should continue to receive inv's, I
think -- hence this p2p message to opt-in to the new behavior.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150924/dd63b110/attachment.html>

From pete at petertodd.org  Thu Sep 24 18:41:07 2015
From: pete at petertodd.org (Peter Todd)
Date: Thu, 24 Sep 2015 18:41:07 +0000
Subject: [bitcoin-dev] [BIP Proposal] New "sendheaders" p2p message
In-Reply-To: <CAFp6fsEq0So3nUtRrn1G3Q-sEFUpK7myxfvT9-p9LNkxPGYoTw@mail.gmail.com>
References: <CAFp6fsHBbyVo21DnQKGBVJ7P=8NqOGJ-jv0-MH9WaBD6vauudA@mail.gmail.com>
	<CAE-z3OUKTKh5-SHkiawr4R58Fdg9N6_1PLjW19YsF-K9OOjQow@mail.gmail.com>
	<CAFp6fsEq0So3nUtRrn1G3Q-sEFUpK7myxfvT9-p9LNkxPGYoTw@mail.gmail.com>
Message-ID: <10E4880B-1B3F-40AF-88DD-65D152533DFC@petertodd.org>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512



On 24 September 2015 14:37:40 GMT-04:00, Suhas Daftuar via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:
>On Thu, Sep 24, 2015 at 2:17 PM, Tier Nolan via bitcoin-dev <
>bitcoin-dev at lists.linuxfoundation.org> wrote:
>
>>
>> Is there actually a requirement for the new message?  New nodes could
>just
>> unilaterally switch to sending headers and current nodes would be
>> compatible.
>>
>
>I don't believe that unilaterally switching to headers announcements
>would
>work for all network participants -- both for users running older
>Bitcoin
>Core versions (anything before 0.10, which I believe all ignore headers
>messages) and for non-Bitcoin Core software that participates on the
>network (which may ignore headers messages too, I'm not sure what all
>is
>out there).

You can enable the behaviour based on advertised p2p network version.
-----BEGIN PGP SIGNATURE-----

iQE9BAEBCgAnIBxQZXRlciBUb2RkIDxwZXRlQHBldGVydG9kZC5vcmc+BQJWBEO5
AAoJEMCF8hzn9Lncz4MH/3ztGWdFvMWWcwQsjIRH+eP6PH57WaEru1smmFYOmKrj
djdiRVdxfChxRqP3adO21RUKKchjl8DNjrFJHPFz75FSM0cDcD0QAGAHilVdnICE
LEIlTEoiIc0f1z9f/EJHSHPhiUXMnjpl/l7PYJFZV3Lt2Bl30yLsNnrp9qxjR30n
3nykZjyRad4JSavdTP6Evd3qaqwGXNUWsdObXNI+WPKlrw6hczlhFDKQ7RC1FPQU
Rbgb21pavtqLUTwbBZGUisAAc94e2Gama1p3ioUFklbVtLTdw+FtxPgV/0ZS75OR
V9pCXIbg9VM6QY4+9gYnP635+qCkqAJ4tBsYGmsT8yA=
=cF4B
-----END PGP SIGNATURE-----


From sdaftuar at gmail.com  Thu Sep 24 18:56:23 2015
From: sdaftuar at gmail.com (Suhas Daftuar)
Date: Thu, 24 Sep 2015 14:56:23 -0400
Subject: [bitcoin-dev] [BIP Proposal] New "sendheaders" p2p message
In-Reply-To: <10E4880B-1B3F-40AF-88DD-65D152533DFC@petertodd.org>
References: <CAFp6fsHBbyVo21DnQKGBVJ7P=8NqOGJ-jv0-MH9WaBD6vauudA@mail.gmail.com>
	<CAE-z3OUKTKh5-SHkiawr4R58Fdg9N6_1PLjW19YsF-K9OOjQow@mail.gmail.com>
	<CAFp6fsEq0So3nUtRrn1G3Q-sEFUpK7myxfvT9-p9LNkxPGYoTw@mail.gmail.com>
	<10E4880B-1B3F-40AF-88DD-65D152533DFC@petertodd.org>
Message-ID: <CAFp6fsFgkGV93PrdJPXnS880weNX=bXd17H1u5V7VBucTtW=7A@mail.gmail.com>

I considered that as well, but it seemed to me that other software on the
network (say, different wallet implementations) might prefer the option of
being able to bump up their protocol version in the future to pick up some
other change, without having to also opt-in to receiving
headers-announcements for blocks.

In particular, inv-based block announcements aren't going away (even in my
implementation of headers announcements, there are some edge cases where
the code would need to fall back to an inv announcement), so forcing all
software on the network to upgrade to supporting headers announcements,
whether now or in the future, seems too drastic -- I could imagine some
software not being very concerned about optimizing block relay in this
particular way.

On Thu, Sep 24, 2015 at 2:41 PM, Peter Todd <pete at petertodd.org> wrote:

> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA512
>
>
>
> On 24 September 2015 14:37:40 GMT-04:00, Suhas Daftuar via bitcoin-dev <
> bitcoin-dev at lists.linuxfoundation.org> wrote:
> >On Thu, Sep 24, 2015 at 2:17 PM, Tier Nolan via bitcoin-dev <
> >bitcoin-dev at lists.linuxfoundation.org> wrote:
> >
> >>
> >> Is there actually a requirement for the new message?  New nodes could
> >just
> >> unilaterally switch to sending headers and current nodes would be
> >> compatible.
> >>
> >
> >I don't believe that unilaterally switching to headers announcements
> >would
> >work for all network participants -- both for users running older
> >Bitcoin
> >Core versions (anything before 0.10, which I believe all ignore headers
> >messages) and for non-Bitcoin Core software that participates on the
> >network (which may ignore headers messages too, I'm not sure what all
> >is
> >out there).
>
> You can enable the behaviour based on advertised p2p network version.
> -----BEGIN PGP SIGNATURE-----
>
> iQE9BAEBCgAnIBxQZXRlciBUb2RkIDxwZXRlQHBldGVydG9kZC5vcmc+BQJWBEO5
> AAoJEMCF8hzn9Lncz4MH/3ztGWdFvMWWcwQsjIRH+eP6PH57WaEru1smmFYOmKrj
> djdiRVdxfChxRqP3adO21RUKKchjl8DNjrFJHPFz75FSM0cDcD0QAGAHilVdnICE
> LEIlTEoiIc0f1z9f/EJHSHPhiUXMnjpl/l7PYJFZV3Lt2Bl30yLsNnrp9qxjR30n
> 3nykZjyRad4JSavdTP6Evd3qaqwGXNUWsdObXNI+WPKlrw6hczlhFDKQ7RC1FPQU
> Rbgb21pavtqLUTwbBZGUisAAc94e2Gama1p3ioUFklbVtLTdw+FtxPgV/0ZS75OR
> V9pCXIbg9VM6QY4+9gYnP635+qCkqAJ4tBsYGmsT8yA=
> =cF4B
> -----END PGP SIGNATURE-----
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150924/dd34cc2a/attachment-0001.html>

From pete at petertodd.org  Thu Sep 24 19:27:57 2015
From: pete at petertodd.org (Peter Todd)
Date: Thu, 24 Sep 2015 19:27:57 +0000
Subject: [bitcoin-dev] [BIP Proposal] New "sendheaders" p2p message
In-Reply-To: <CAFp6fsFgkGV93PrdJPXnS880weNX=bXd17H1u5V7VBucTtW=7A@mail.gmail.com>
References: <CAFp6fsHBbyVo21DnQKGBVJ7P=8NqOGJ-jv0-MH9WaBD6vauudA@mail.gmail.com>
	<CAE-z3OUKTKh5-SHkiawr4R58Fdg9N6_1PLjW19YsF-K9OOjQow@mail.gmail.com>
	<CAFp6fsEq0So3nUtRrn1G3Q-sEFUpK7myxfvT9-p9LNkxPGYoTw@mail.gmail.com>
	<10E4880B-1B3F-40AF-88DD-65D152533DFC@petertodd.org>
	<CAFp6fsFgkGV93PrdJPXnS880weNX=bXd17H1u5V7VBucTtW=7A@mail.gmail.com>
Message-ID: <7E19FA2C-70E5-4D8A-B533-50463FA92918@petertodd.org>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512



On 24 September 2015 14:56:23 GMT-04:00, Suhas Daftuar <sdaftuar at gmail.com> wrote:
>I considered that as well, but it seemed to me that other software on
>the
>network (say, different wallet implementations) might prefer the option
>of
>being able to bump up their protocol version in the future to pick up
>some
>other change, without having to also opt-in to receiving
>headers-announcements for blocks.
>
>In particular, inv-based block announcements aren't going away (even in
>my
>implementation of headers announcements, there are some edge cases
>where
>the code would need to fall back to an inv announcement), so forcing
>all
>software on the network to upgrade to supporting headers announcements,
>whether now or in the future, seems too drastic -- I could imagine some
>software not being very concerned about optimizing block relay in this
>particular way.

Block headers are so small - 80 bytes - that it may be reasonable to just stop using the inv mechanism for them in favor of always sending headers. IIRC a inv is 32 bytes of digest and another four bytes or something of the inv string itself - that's already nearly half of the header.

Meanwhile reducing the amount of state in the protocol does have some value, and decreasing overall latency for headers to get around the network certainely isnt a bad thing.
-----BEGIN PGP SIGNATURE-----

iQE9BAEBCgAnIBxQZXRlciBUb2RkIDxwZXRlQHBldGVydG9kZC5vcmc+BQJWBE60
AAoJEMCF8hzn9Lncz4MH/jybITh0VWtf+2MotWZOdMIiQtmWZ6Ly2yiDXwi3atu+
MEA6yx9vPFV8P1ZKIZzVtr/4Iu3gBHBdDxAzQW0SjreTLdzZ1+d28/A2kYD4+es7
MFD8rDV/kPtnu8ajMkS9bfmrU0WfkgSSB2fUheT+kqgH/ejIJBISo8BpQZbz7f4B
M+D+hoNadcqWcZZKBHT+o5o7v3jJwxh8qpJgMMZrtN/QfFJK5UVdU4I/hEd89XP9
XD/y29ykWAFQPDdBKMGIUj1csUGlyS5kFXp6ZLVtAZWHIgfZ1R/qOhIUcRwRxZjc
JXZEWrMGTIXr2zkX9mtLzfjAzDc6ZULoEAHCV3sVa0M=
=SLUT
-----END PGP SIGNATURE-----


From dstadulis at gmail.com  Fri Sep 25 00:29:02 2015
From: dstadulis at gmail.com (Daniel Stadulis)
Date: Thu, 24 Sep 2015 17:29:02 -0700
Subject: [bitcoin-dev] 2015-09-24 #bitcoin-dev Weekly Development Meeting
	Minutes
Message-ID: <CAHpxFbGa_4VRDyQJJYVXScWdg6KQOJnb-XdZ30NAvFbouhLHrQ@mail.gmail.com>

If you weren't able to attend the first, weekly development meeting, the
following are the minutes:

Meeting Title:

#bitcoin-dev Weekly Development Meeting

Meeting Date:

2015-09-24

Meeting Time:

19:00-20:00 UTC

Participants in Attendance:

luke-jr

CodeShark

sipa

morcos

sdaftuar

dstadulis

jtimon

wumpus

jgarzik

kanzure

gmaxwell

cfields

gavinandresen

IRC Chat Logs:

http://bitcoinstats.com/irc/bitcoin-dev/logs/2015/09/24#l1443121200.0

------------------------------

Topics Discussed:


   1.

   libconsensus and refactoring
   2.

   All goals for 0.12 release
   1.

      libsecp256k1 is ready for 0.12?
      1.

         libsecp256k1 needs a native OSX travis build
         1.

            cfields has work that moves to the new Travis infrastructure
            2.

            PROPOSAL: propose libsecp256k1 validation PR as soon as all
            currently-in-pipeline API changes are merged
            2.

      OP_CHECKSEQUENCEVERIFY
      3.

      mempool limiting
      4.

      version bits
      3.

   BIP process
   4.

   Split off script base classes/execution for use in consensus?
   5.

   Current/near-term ?what are you working on?
   1.

      versionbits: Codeshark has been working on an implementation
      2.

      gavinandresen: simple benchmarking framework then plan on optimizing
      new block relay/broadcast.

------------------------------

Meeting Conclusions:

Mempool limiting discussion will be delayed until 2015-10-1 meeting

#

Action items

Responsible Parties

ETA

1

Please review 6557 (starting Saturday), 6673 and any other mempool pulls
for concept

Everyone

Next Thurs. meeting (2015-10-01)

2

libsecp256k1 needs a native OSX travis build


3

Propose libsecp256k1 validation PR as soon as all currently-in-pipeline API
changes are merged


4

Review BIP 68, review #6312, #6564


5

versionbits BIP number assignment

gmaxwell

2015-09-25

Google Doc:
https://docs.google.com/document/d/1zsWVaf5H9ECrN1zPutMdD_2ky3fnhQUM411NDrRrc-M/edit
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150924/2554b5f9/attachment-0001.html>

From gmaxwell at gmail.com  Sun Sep 27 01:39:00 2015
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Sun, 27 Sep 2015 01:39:00 +0000
Subject: [bitcoin-dev] Weak block thoughts...
In-Reply-To: <CABsx9T3NFRO5nw3z=jrs0Hu3caVNkkTTTb1ibqR7LMWsoou9RQ@mail.gmail.com>
References: <CABsx9T2+dG0AE+MgKRAU97KhkHTU1MuxXuwHKv3BgpJswZ5vVg@mail.gmail.com>
	<CABaSBaxcDRzw0X7-fAfxPJyLcWxTHigpHuAPb4aNQ5zk5NoDCQ@mail.gmail.com>
	<CAAS2fgTr-OuL3T6mXX-4xFC_LHnAiogTTcPMbcjsM7WtRisQEQ@mail.gmail.com>
	<CABsx9T3NFRO5nw3z=jrs0Hu3caVNkkTTTb1ibqR7LMWsoou9RQ@mail.gmail.com>
Message-ID: <CAAS2fgRj+fE+znXZzFsXXBivKSxnJ2Lheo_g9us4FXN_yCLhgw@mail.gmail.com>

On Wed, Sep 23, 2015 at 9:37 PM, Gavin Andresen <gavinandresen at gmail.com> wrote:
>> Avoiding this is why I've always previously described this idea as
>> merged mined block DAG (with blocks of arbitrary strength) which are
>> always efficiently deferentially coded against prior state. A new
>> solution (regardless of who creates it) can still be efficiently
>> transmitted even if it differs in arbitrary ways (though the
>> efficiency is less the more different it is).
>
> Yup, although I don't get the 'merge mined' bit; the weak blocks are
> ephemeral, probably purged out of memory as soon as a few full blocks are
> found...

Unless the weak block transaction list can be a superset of the block
transaction list size proportional propagation costs are not totally
eliminated.

As even if the weak block criteria is MUCH lower than the block
criteria (which would become problematic in its own right at some
point) the network will sometimes find blocks when there hasn't been
any weak block priming at all (e.g. all prior priming has made it into
blocks already).

So if the weak block commitment must be exactly the block commitment
you end up having to add a small number of transactions to your block
above and beyond the latest well propagated weak-blocks... Could still
work, but then creates a pressure to crank up the weak block overhead
which could better be avoided.

From roy at osherove.com  Sun Sep 27 08:37:36 2015
From: roy at osherove.com (Roy Osherove)
Date: Sun, 27 Sep 2015 01:37:36 -0700
Subject: [bitcoin-dev] Build: win64: Package 'mingw-w64-dev' has no
	installation candidate
Message-ID: <CAAMhxnxahG7nV2mBKx8pbV3qiVkJJGjvN-+Os81frBvp-GwHaQ@mail.gmail.com>

Hi All
As part of trying to learn more about the bitcoin builds, I am trying to
recreate the travis CI build system using TeamCity.
Some of the builds work fine, but the windows builds seem to be having a
problem with getting mingw dev:

[08:31:21][Step 3/3] E: Package 'mingw-w64-dev' has no installation
candidate

I'm using the same exports env vars as the travis script, and actually
using the travis script inside teamcity , incuding adding the PPA for the
mingw packages.

The PPA seems to be importing fine during the build:
[Step 3/3] gpg: keyring `/tmp/tmp_nolyfrh/secring.gpg' created
[08:30:48][Step 3/3] gpg: keyring `/tmp/tmp_nolyfrh/pubring.gpg' created
[08:30:48][Step 3/3] gpg: requesting key F9CB8DB0 from hkp server
keyserver.ubuntu.com
[08:30:48][Step 3/3] gpg: /tmp/tmp_nolyfrh/trustdb.gpg: trustdb created
[08:30:48][Step 3/3] gpg: key F9CB8DB0: public key "Launchpad PPA for
Ubuntu Wine Team" imported
[08:30:48][Step 3/3] gpg: no ultimately trusted keys found
[08:30:48][Step 3/3] gpg: Total number processed: 1
[08:30:48][Step 3/3] gpg: imported: 1 (RSA: 1)

Any ideas why this seems to be working on travis and not on the teamcity
build agent?
The agent is running inside  docker image based on ubuntu.

The full log of the failed build can be found at :
http://btcdev.osherove.com:8111/viewLog.html?tab=buildLog&buildTypeId=Bitcoin_BuildWin64&buildId=332#_state=103&focus=242

same problem appears in win32 build.
there are the env vars:

NameValue passed to buildenv.BASE_OUTDIR%system.teamcity.build.checkoutDir%
env.BITCOIN_CONFIG--enable-gui --enable-reduce-exportsenv.BOOST_TEST_RANDOM
%build.number%env.CCACHE_COMPRESS1env.CCACHE_SIZE100Menv.CCACHE_TEMPDIR
/tmp/.ccache-tempenv.GOALdeployenv.HOSTx86_64-w64-mingw32env.MAKEJOBS-j2
env.PACKAGESnsis gcc-mingw-w64-x86-64 g++-mingw-w64-x86-64
binutils-mingw-w64-x86-64 mingw-w64-dev wine1.7 bcenv.PPAppa:ubuntu-wine/ppa
env.PYTHON_DEBUG1env.RUN_TESTStrueenv.SDK_URL
https://bitcoincore.org/depends-sources/sdksenv.WINEDEBUG

-- 
Thanks,

Roy Osherove

   - *@RoyOsherove* <https://twitter.com/RoyOsherove>
   - Read my new book *Notes to a Software Team Leader
<http://TeamLeadSkills.com>*
   - Or *my new course* about Beautiful Builds <http://courses.osherove.com>
and Continuous Delivery
   - +1-201-256-5575
    - Timezone: Eastern Standard Time (New York)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150927/4ef1dbb9/attachment.html>

From tier.nolan at gmail.com  Sun Sep 27 09:42:24 2015
From: tier.nolan at gmail.com (Tier Nolan)
Date: Sun, 27 Sep 2015 10:42:24 +0100
Subject: [bitcoin-dev] Weak block thoughts...
In-Reply-To: <CAAS2fgRj+fE+znXZzFsXXBivKSxnJ2Lheo_g9us4FXN_yCLhgw@mail.gmail.com>
References: <CABsx9T2+dG0AE+MgKRAU97KhkHTU1MuxXuwHKv3BgpJswZ5vVg@mail.gmail.com>
	<CABaSBaxcDRzw0X7-fAfxPJyLcWxTHigpHuAPb4aNQ5zk5NoDCQ@mail.gmail.com>
	<CAAS2fgTr-OuL3T6mXX-4xFC_LHnAiogTTcPMbcjsM7WtRisQEQ@mail.gmail.com>
	<CABsx9T3NFRO5nw3z=jrs0Hu3caVNkkTTTb1ibqR7LMWsoou9RQ@mail.gmail.com>
	<CAAS2fgRj+fE+znXZzFsXXBivKSxnJ2Lheo_g9us4FXN_yCLhgw@mail.gmail.com>
Message-ID: <CAE-z3OU50cZBR27QrQsRT5Gtb0AVkE6K33XR0GebsyNWNrbf+w@mail.gmail.com>

On Sun, Sep 27, 2015 at 2:39 AM, Gregory Maxwell via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> Unless the weak block transaction list can be a superset of the block
> transaction list size proportional propagation costs are not totally
> eliminated.
>

The POW threshold could be dynamic.  The first weak-block that builds on a
new block could be forwarded with a smaller target.

This reduces  the window size until at least one weak block is propagated.

The change in threshold could be time based (for the first 30 seconds or
so).  This would cause a surge of traffic when a new block once a new block
has propagated, so perhaps not so good an idea.


> As even if the weak block criteria is MUCH lower than the block
> criteria (which would become problematic in its own right at some
> point) the network will sometimes find blocks when there hasn't been
> any weak block priming at all (e.g. all prior priming has made it into
> blocks already).
>

If there is a transaction backlog, then miners could forward merkle
branches with transactions in the memory pool with a commitment in the
coinbase.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150927/a0f6ff63/attachment.html>

From pete at petertodd.org  Sun Sep 27 14:51:41 2015
From: pete at petertodd.org (Peter Todd)
Date: Sun, 27 Sep 2015 10:51:41 -0400
Subject: [bitcoin-dev] python-bitcoinlib-v0.5.0rc1 - OpenSSL crashes on
 OSX and Arch Linux should be fixed
In-Reply-To: <20150907004324.GC21260@muck>
References: <20150907004324.GC21260@muck>
Message-ID: <20150927145141.GA9745@savin.petertodd.org>

On Sun, Sep 06, 2015 at 08:43:24PM -0400, Peter Todd via bitcoin-dev wrote:
> https://github.com/petertodd/python-bitcoinlib/tree/python-bitcoinlib-v0.5.0rc1

No issues have been reported with the release candidate, so I've
released v0.5.0 officially pretty much as-is:

https://github.com/petertodd/python-bitcoinlib/tree/python-bitcoinlib-v0.5.0

-- 
'peter'[:-1]@petertodd.org
000000000000000002221cb8e8732f77da172a50fd6b0290cd5069d2ea192233
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 650 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150927/1c49dbf6/attachment-0001.sig>

From kalle at rosenbaum.se  Sun Sep 27 15:10:24 2015
From: kalle at rosenbaum.se (Kalle Rosenbaum)
Date: Sun, 27 Sep 2015 17:10:24 +0200
Subject: [bitcoin-dev] Weak block thoughts...
In-Reply-To: <CAE-z3OU50cZBR27QrQsRT5Gtb0AVkE6K33XR0GebsyNWNrbf+w@mail.gmail.com>
References: <CABsx9T2+dG0AE+MgKRAU97KhkHTU1MuxXuwHKv3BgpJswZ5vVg@mail.gmail.com>
	<CABaSBaxcDRzw0X7-fAfxPJyLcWxTHigpHuAPb4aNQ5zk5NoDCQ@mail.gmail.com>
	<CAAS2fgTr-OuL3T6mXX-4xFC_LHnAiogTTcPMbcjsM7WtRisQEQ@mail.gmail.com>
	<CABsx9T3NFRO5nw3z=jrs0Hu3caVNkkTTTb1ibqR7LMWsoou9RQ@mail.gmail.com>
	<CAAS2fgRj+fE+znXZzFsXXBivKSxnJ2Lheo_g9us4FXN_yCLhgw@mail.gmail.com>
	<CAE-z3OU50cZBR27QrQsRT5Gtb0AVkE6K33XR0GebsyNWNrbf+w@mail.gmail.com>
Message-ID: <CAPswA9xFNgdbH1JXBx+CqjT5HbkK0WGaWQLrJzm+BJCmrXRQcA@mail.gmail.com>

I was mansplaining weak blocks to my wife. She asked a simple question:

Why would I, as a miner, publish a weak block if I find one?

I don't know.

Sure, I will get faster propagation for my solved block, should I find one.
On the other hand everybody else mining a similar block will enjoy the same
benefit. Assuming that I'm not a huge miner, it's unlikely that I will
actually solve the block, so I'm probably just giving away fast propagation
times to someone else.

So how does publishing a weak block benefit the producer of it more than
the other miners? Please help me understand this.

/Kalle Rosenbaum


2015-09-27 11:42 GMT+02:00 Tier Nolan via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org>:

>
>
> On Sun, Sep 27, 2015 at 2:39 AM, Gregory Maxwell via bitcoin-dev <
> bitcoin-dev at lists.linuxfoundation.org> wrote:
>
>> Unless the weak block transaction list can be a superset of the block
>> transaction list size proportional propagation costs are not totally
>> eliminated.
>>
>
> The POW threshold could be dynamic.  The first weak-block that builds on a
> new block could be forwarded with a smaller target.
>
> This reduces  the window size until at least one weak block is
> propagated.
>
> The change in threshold could be time based (for the first 30 seconds or
> so).  This would cause a surge of traffic when a new block once a new block
> has propagated, so perhaps not so good an idea.
>
>
>> As even if the weak block criteria is MUCH lower than the block
>> criteria (which would become problematic in its own right at some
>> point) the network will sometimes find blocks when there hasn't been
>> any weak block priming at all (e.g. all prior priming has made it into
>> blocks already).
>>
>
> If there is a transaction backlog, then miners could forward merkle
> branches with transactions in the memory pool with a commitment in the
> coinbase.
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150927/04c13069/attachment.html>

From nharan81 at gmail.com  Sun Sep 27 17:53:14 2015
From: nharan81 at gmail.com (Neil Haran)
Date: Sun, 27 Sep 2015 10:53:14 -0700
Subject: [bitcoin-dev] Bitcoin mining idea
Message-ID: <CA+9tygJVkaxegAGjpFA_MutU-xChgS5FK4+JKAR=14k0Ctbm8g@mail.gmail.com>

Hi,

I have an idea for a gamified bitcoin mining app that I'd like to partner
with someone on that is very good with cryptography and knows the bitcoin
code base well. I have received interest in this from some, but I'm looking
for the ideal candidate to work with. If this is of interest, please email
me at nharan81 at gmail.com.

Thanks,
Neil
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150927/df354c5f/attachment.html>

From pete at petertodd.org  Sun Sep 27 18:50:31 2015
From: pete at petertodd.org (Peter Todd)
Date: Sun, 27 Sep 2015 14:50:31 -0400
Subject: [bitcoin-dev] Let's deploy BIP65 CHECKLOCKTIMEVERIFY!
Message-ID: <20150927185031.GA20599@savin.petertodd.org>

Summary
-------

It's time to deploy BIP65 CHECKLOCKTIMEVERIFY.

I've backported the CLTV op-code and a IsSuperMajority() soft-fork to
the v0.10 and v0.11 branches, pull-reqs #6706 and #6707 respectively. A
pull-req for git HEAD for the soft-fork deployment has been open since
June 28th, #6351 - the opcode implementation itself was merged two
months ago.

We should release a v0.10.3 and v0.11.1 with CLTV and get the ball
rolling on miner adoption. We have consensus that we need CLTV, we have
a well tested implementation, and we have a well-tested deployment
mechanism. We also don't need to wait for other soft-fork proposals to
catch up - starting the CLTV deployment process isn't going to delay
future soft-forks, or for that matter, hard-forks.

I think it's possible to safely get CLTV live on mainnet before the end
of the year. It's time we get this over with and done.


Detailed Rational
-----------------

1) There is a clear need for CLTV

Escrow and payment channels both benefit greatly from CLTV. In
particular, payment channel implementations are made significantly
simpler with CLTV, as well as more secure by removing the malleability
vulnerability.

Why are payment channels important? There's a lot of BTC out there
vulnerable to theft that doesn't have to be. For example, just the other
day I was talking with Nick Sullivan about ChangeTip's vulnerability to
theft, as well as regulatory uncertainty about whether or not they're a
custodian of their users' funds. With payment channels ChangeTip would
only be able to spend as much of a deposit as a user had spent, keeping
the rest safe from theft. Similarly, in the other direction - ChangeTip
to their users - in many cases it is feasible to also use payment
channels to immediately give users control of their funds as they
receive them, again protecting users and helping make the case that
they're not a custodian. In the future I'm sure we'll see fancy
bi-directional payment channels serving this role, but lets not let
perfect be the enemy of good.


2) We have consensus on the semantics of the CLTV opcode

Pull-req #6124 - the implementation of the opcode itself - was merged
nearly three months ago after significant peer review and discussion.
Part of that review process included myself(1) and mruddy(2) writing
actual demos of CLTV. The chance of the CLTV semantics changing now is
near-zero.


3) We have consensus that Bitcoin should adopt CLTV

The broad peer review and discussion that got #6124 merged is a clear
sign that we expect CLTV to be eventually adopted. The question isn't if
CLTV should be added to the Bitcoin protocol, but rather when.


4) The CLTV opcode and IsSuperMajority() deployment code has been
   thoroughly tested and reviewed

The opcode implementation is very simple, yet got significant review,
and it has solid test coverage by a suite of tx-(in)valid.json tests.
The tests themselves have been reviewed by others, resulting in Esteban
Ordano's pull-req #6368 by Esteban Ordano which added a few more cases.

As for the deployment code, both the actual IsSuperMajority() deployment
code and associated unit-tests tests were copied nearly line-by-line
from the succesful BIP66. I did this deliberately to make all the peer
review and testing of the deployment mechanism used in BIP66 be equally
valid for CLTV.


5) We can safely deploy CLTV with IsSuperMajority()

We've done two soft-forks so far with the IsSuperMajority() mechanism,
BIP34 and BIP66. In both cases the IsSuperMajority() mechanism itself
worked flawlessly. As is well-known BIP66 in combination with a large %
of the hashing power running non-validating "SPV" mining operations did
lead to a temporary fork, however the root cause of this issue is
unavoidable and not unique to IsSuperMajority() soft-forks.

Pragmatically speaking, now that miners are well aware of the issue it
will be easy for them to avoid a repeat of that fork by simply adding
IsSuperMajority() rules to their "SPV" mining code. Equally turning off
SPV mining (temporarily) is perfectly feasable.


6) We have the necessary consensus to deploy CLTV via IsSuperMajority()

The various "nVersion bits" proposals - which I am a co-author of - have
the primary advantage of being able to cleanly deal with the case where
a soft-fork fails to get adopted. However, we do have broad consensus,
including across all sides of the blocksize debate, that CLTV should be
adopted. The risk of CLTV failing to get miner adoption, and thus
blocking other soft-forks, is very low.


7) Using IsSuperMajority() to deploy CLTV doesn't limit or delay other upgrades

It _is_ possible for multiple IsSuperMajority() soft-forks to coexist,
in the sense that if one soft-fork is "in flight" that doesn't prevent
another soft-fork from also being deployed simultaneously.

In particular, if we deploy CLTV via IsSuperMajority() that does _not_
impact the adoption schedule for other future soft-forks, including
soft-forks using a future nVersion bits deployment mechanism.

For instance, suppose we start deployment of CLTV right now with
nVersion=4 blocks. In three months we have 25% miner support, and start
deploying CHECKSEQUENCEVERIFY with nVersion=5 blocks. For miners
supporting only OP_CLTV, the nVersion=5 blocks still trigger OP_CLTV;
miners creating nVersion=5 blocks are simply stating that they support
both soft-forks. Equally, if in three months we finish a nVersion bits
proposal, those miners will be advertising nVersion=(1 << 29) blocks,
which also advertise OP_CLTV support.


8) BIP101 miners have not proved to be a problem for CLTV deployment

While there was concern that BIP101's use of nVersion would cause
issues with a IsSuperMajority() softfork, the % of blocks with BIP101
nVersion's never reached more than 1%, and currently is hovering at
around 0.1%

As Gavin Andresen has stated that he is happy to add CLTV to BIP101, and
thus Bitcoin XT, I believe we can expect those miners to safely support
CLTV well before soft-fork enforcement happens. Secondly, the 95%
enforcement threshold means we can tolerate a fairly high % of miners
running pre-CLTV BIP101 implementations without fatal effects in the
unlikely event that those miners don't upgrade.


9) Doing another IsSuperMajority() soft-fork doesn't "burn a bit"

This is a common myth! All nVersion bits proposals involve permanently
setting a high-order bit to 1, which results in nVersion >= all prior
IsSuperMajority() soft-forks. In short, we can do a nearly unlimited
number of IsSuperMajority() soft-forks without affecting future nVersion
bits soft-forks at all.


10) Waiting for nVersion bits and CHECKSEQUENCEVERIFY will significantly
    delay deployment of CLTV

It's been proposed multiple times that we wait until we can do a single
soft-fork with CSV using the nVersion bits mechanism.

nVersion bits doesn't even have an implementation yet, nor has solid
consensus been reached on the exact semantics of how nVersion bits
should work. The stateful nature of nVersion bits soft-forks requires a
significant amount of new code compared to IsSuperMajority() soft-forks,
which in turn will require a significant amount of testing. (again I'll
point out I'm a co-author to all the nVersion bits proposals)

CSV has an implementation, but there is still debate going on about what
the exact semantics of it should be. Getting the semantics right is
especially important as part of CSV includes changing the meaning of
nSequence, restricting future uses of that field. There have been many
proposals to use nSequence, e.g. for proof-of-stake blocksize voting,
and it has the unique capability of being a field that is both unused,
and signed by scriptSigs. We shouldn't take potentially restricting
future uses of it lightly.

CSV is also significantly more complex and invasive than CLTV in terms
of code changes. A large % of the mining power is running forks
of Bitcoin Core with custom changes - modifying these forks with new
features is a labor intensive and slow process.

If CLTV is ready now, why delay it - potentially for 6-12 months - for
other proposals to catch up? Equally if they do catch up, great! As
explained above an in-flight CLTV soft-fork won't delay future upgrades.


11) Even if CLTV is broken/obsoleted there is very little carrying cost
    to having it

Suppose we decide in two years that CLTV was botched and we need to fix
it. What's the "carrying cost" of having implemented CLTV in the first
place?

We'll have used up one of our ten soft-forkable NOPs, but if we ever
"run out" it's easy to use extension NOPs(3). Similarly, future script
improvements like OP_MAST - or even a hard-fork - can easily expand the
range of NOPs to the point where this is a non-issue.

If you don't use OP_CLTV in your scripts there is zero effect on your
transactions; we're not limiting future improvements to Bitcoin in any
way other than using up a NOP by implementing CLTV.


References
----------

1) https://github.com/petertodd/checklocktimeverify-demos
2) https://github.com/mruddy/bip65-demos
3) https://github.com/bitcoin/bitcoin/pull/5496#issuecomment-101293403
4) https://github.com/bitcoin/bips/blob/master/bip-0112.mediawiki

-- 
'peter'[:-1]@petertodd.org
000000000000000006a257845da185433cbde54a74be889b1c046a267dcf4ab2
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 650 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150927/3c7f726e/attachment.sig>

From gmaxwell at gmail.com  Sun Sep 27 19:50:22 2015
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Sun, 27 Sep 2015 19:50:22 +0000
Subject: [bitcoin-dev] Weak block thoughts...
In-Reply-To: <CAPswA9xFNgdbH1JXBx+CqjT5HbkK0WGaWQLrJzm+BJCmrXRQcA@mail.gmail.com>
References: <CABsx9T2+dG0AE+MgKRAU97KhkHTU1MuxXuwHKv3BgpJswZ5vVg@mail.gmail.com>
	<CABaSBaxcDRzw0X7-fAfxPJyLcWxTHigpHuAPb4aNQ5zk5NoDCQ@mail.gmail.com>
	<CAAS2fgTr-OuL3T6mXX-4xFC_LHnAiogTTcPMbcjsM7WtRisQEQ@mail.gmail.com>
	<CABsx9T3NFRO5nw3z=jrs0Hu3caVNkkTTTb1ibqR7LMWsoou9RQ@mail.gmail.com>
	<CAAS2fgRj+fE+znXZzFsXXBivKSxnJ2Lheo_g9us4FXN_yCLhgw@mail.gmail.com>
	<CAE-z3OU50cZBR27QrQsRT5Gtb0AVkE6K33XR0GebsyNWNrbf+w@mail.gmail.com>
	<CAPswA9xFNgdbH1JXBx+CqjT5HbkK0WGaWQLrJzm+BJCmrXRQcA@mail.gmail.com>
Message-ID: <CAAS2fgRX-LLiNwcmbHtF6ymEX+uUx3SNjqAe4iyxouhHj=4Abw@mail.gmail.com>

On Sun, Sep 27, 2015 at 3:10 PM, Kalle Rosenbaum via bitcoin-dev
<bitcoin-dev at lists.linuxfoundation.org> wrote:
> I was mansplaining weak blocks to my wife. She asked a simple question:
>
> Why would I, as a miner, publish a weak block if I find one?
>
> I don't know.
> Sure, I will get faster propagation for my solved block, should I find one.
> On the other hand everybody else mining a similar block will enjoy the same
> benefit. Assuming that I'm not a huge miner, it's unlikely that I will
> actually solve the block, so I'm probably just giving away fast propagation
> times to someone else.
> So how does publishing a weak block benefit the producer of it more than the
> other miners? Please help me understand this.

Keep in mind, because of efficient differential transmission the cost
to you is effectively nothing if your transaction acceptance policy is
predictable, it's a hand-full of bytes sent. And by failing to send
yours you do little to nothing to deny others the improvement.

Lets imagine an alternative weak-blockless weak block implementation:

Every N seconds, every miner send to every other miner what they're
working on.  This isn't totally crazy-- efficient differential
transmission will keep the amount transmitted small.

Any block found can be referenced to any of these earlier worklists.

What the effect be of not transmitting yours?

If your block is unlike everyone elses, you would suffer great delays
in the event you found a block.
If your block is mostly like everyone elses, you wouldn't suffer as
much delay-- but the transmission costs would be negligible in that
case. ... the size sent is proportional to the improvement you get
when finding a block.

In either case, no one else is harmed by you not sending yours... they
still send their lists.

A problem with that scheme is that unless you've layered an identity
based access control system on it anyone can DOS attack it, because
anyone can send as much as they want, they don't even have to be
actual miners.

What weak blocks adds to that is using hashcash as a rate limiting
mechanism-- a coordination free lottery weighed by hash-power decides
who can transmit.

What if you don't participate in the lottery and share your solutions?
 No major harm for the other users... the other users will just choose
a somewhat lower weak-block threshold to get the updates at the
desired rate than they would otherwise. To the extent that what you
were working on was different from anyone else, you'll suffer because
you failed to make use of your chance to influence what could be
efficiently transmitted to include your own blocks.

You could also ask a question of why would you transitively relay
someone elses announcement-- well if it helped their blocks too  (by
reflecting things they also want to mine) the answer is obvious. But
what if it was disjoint from the things they wanted to mine and didn't
help compared to the weak blocks they already relayed?  In that case
it's still in likely in their interest to relay it because if a block
similar to it is produced and they extend that block they may end up
orphaned because of propagation delays their parent block suffered.
What if they receive an announcement which is so "ugly" that they
wouldn't extend the chain with the strong block version of it (they'd
intentionally try to fork it off?)-- in that case they wouldn't want
to relay it.  So much the same logic as why you relay other parties
blocks applies, including-- relaying helps the network, but if you
don't it'll still get along fine without you.

From jl2012 at xbt.hk  Sun Sep 27 20:26:12 2015
From: jl2012 at xbt.hk (jl2012 at xbt.hk)
Date: Sun, 27 Sep 2015 16:26:12 -0400
Subject: [bitcoin-dev] Let's deploy BIP65 CHECKLOCKTIMEVERIFY!
In-Reply-To: <20150927185031.GA20599@savin.petertodd.org>
References: <20150927185031.GA20599@savin.petertodd.org>
Message-ID: <be61cf188f4d277b947d8bd22a7ac3da@xbt.hk>

+1 for deploying BIP65 immediately without further waiting. Agree with 
all Peter's points.

If BIP65 has to follow the 0.12 schedule, it will take almost 9 months 
from now to complete the softfork. I don't see any good reason to wait 
for that long. We have too much talk, too little action.

Some mining pools hinted that they may adopt BitcoinXT at the end of 
2015. If we could start deploying BIP65 earlier, they will have a 
patched version by the time they switch. Gavin has agreed to support 
BIP65 in XT.

By the way, is there any chance to backport it to 0.9? In the deployment 
of BIP66 some miners requested a backport to 0.9 and that's why we have 
0.9.5.

From pete at petertodd.org  Sun Sep 27 20:27:55 2015
From: pete at petertodd.org (Peter Todd)
Date: Sun, 27 Sep 2015 16:27:55 -0400
Subject: [bitcoin-dev] Let's deploy BIP65 CHECKLOCKTIMEVERIFY!
In-Reply-To: <be61cf188f4d277b947d8bd22a7ac3da@xbt.hk>
References: <20150927185031.GA20599@savin.petertodd.org>
	<be61cf188f4d277b947d8bd22a7ac3da@xbt.hk>
Message-ID: <20150927202755.GA10332@savin.petertodd.org>

On Sun, Sep 27, 2015 at 04:26:12PM -0400, jl2012 at xbt.hk wrote:
> +1 for deploying BIP65 immediately without further waiting. Agree
> with all Peter's points.

Thanks!

> By the way, is there any chance to backport it to 0.9? In the
> deployment of BIP66 some miners requested a backport to 0.9 and
> that's why we have 0.9.5.

I certainly could, though there's good reasons to move to v0.10.x; I'd
want to first hear from miners as to why they're still on v0.9.x

-- 
'peter'[:-1]@petertodd.org
00000000000000000f8ed62397b82b10e56b9aea309fb18c37985d1405808c4f
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 650 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150927/c633be3b/attachment.sig>

From mark at friedenbach.org  Sun Sep 27 20:27:57 2015
From: mark at friedenbach.org (Mark Friedenbach)
Date: Sun, 27 Sep 2015 13:27:57 -0700
Subject: [bitcoin-dev] Let's deploy BIP65 CHECKLOCKTIMEVERIFY!
In-Reply-To: <20150927185031.GA20599@savin.petertodd.org>
References: <20150927185031.GA20599@savin.petertodd.org>
Message-ID: <CAOG=w-ssCBOceBz-kMdFLhu5-nqssHic5yAbvMN1kq-nZTGfJQ@mail.gmail.com>

Agree with all CLTV and nVersionBits points. We should deploy a lock-time
soft-fork ASAP, using the tried and true IsSuperMajoirty test.

However your information regarding BIPs 68 (sequence numbers), 112
(checksequenceverify) and 113 (median time past) is outdated. Debate
regarding semantics has been settled, and there are working implementations
ready for merge on github. See pull requests #6312, #6564, and #6566. I
don?t know what the hold up has been regarding further reviews and merging,
but it is ready.

If you believe there are reasons #6312, #6564, or #6566 should not be
merged, please speak up. Otherwise it appears there is consensus on these
changes. They are related, and there is no reason not to include them in
the soft-fork, delaying applications using these features by 6-12 months.

On Sun, Sep 27, 2015 at 11:50 AM, Peter Todd via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> Summary
> -------
>
> It's time to deploy BIP65 CHECKLOCKTIMEVERIFY.
>
> I've backported the CLTV op-code and a IsSuperMajority() soft-fork to
> the v0.10 and v0.11 branches, pull-reqs #6706 and #6707 respectively. A
> pull-req for git HEAD for the soft-fork deployment has been open since
> June 28th, #6351 - the opcode implementation itself was merged two
> months ago.
>
> We should release a v0.10.3 and v0.11.1 with CLTV and get the ball
> rolling on miner adoption. We have consensus that we need CLTV, we have
> a well tested implementation, and we have a well-tested deployment
> mechanism. We also don't need to wait for other soft-fork proposals to
> catch up - starting the CLTV deployment process isn't going to delay
> future soft-forks, or for that matter, hard-forks.
>
> I think it's possible to safely get CLTV live on mainnet before the end
> of the year. It's time we get this over with and done.
>
>
> Detailed Rational
> -----------------
>
> 1) There is a clear need for CLTV
>
> Escrow and payment channels both benefit greatly from CLTV. In
> particular, payment channel implementations are made significantly
> simpler with CLTV, as well as more secure by removing the malleability
> vulnerability.
>
> Why are payment channels important? There's a lot of BTC out there
> vulnerable to theft that doesn't have to be. For example, just the other
> day I was talking with Nick Sullivan about ChangeTip's vulnerability to
> theft, as well as regulatory uncertainty about whether or not they're a
> custodian of their users' funds. With payment channels ChangeTip would
> only be able to spend as much of a deposit as a user had spent, keeping
> the rest safe from theft. Similarly, in the other direction - ChangeTip
> to their users - in many cases it is feasible to also use payment
> channels to immediately give users control of their funds as they
> receive them, again protecting users and helping make the case that
> they're not a custodian. In the future I'm sure we'll see fancy
> bi-directional payment channels serving this role, but lets not let
> perfect be the enemy of good.
>
>
> 2) We have consensus on the semantics of the CLTV opcode
>
> Pull-req #6124 - the implementation of the opcode itself - was merged
> nearly three months ago after significant peer review and discussion.
> Part of that review process included myself(1) and mruddy(2) writing
> actual demos of CLTV. The chance of the CLTV semantics changing now is
> near-zero.
>
>
> 3) We have consensus that Bitcoin should adopt CLTV
>
> The broad peer review and discussion that got #6124 merged is a clear
> sign that we expect CLTV to be eventually adopted. The question isn't if
> CLTV should be added to the Bitcoin protocol, but rather when.
>
>
> 4) The CLTV opcode and IsSuperMajority() deployment code has been
>    thoroughly tested and reviewed
>
> The opcode implementation is very simple, yet got significant review,
> and it has solid test coverage by a suite of tx-(in)valid.json tests.
> The tests themselves have been reviewed by others, resulting in Esteban
> Ordano's pull-req #6368 by Esteban Ordano which added a few more cases.
>
> As for the deployment code, both the actual IsSuperMajority() deployment
> code and associated unit-tests tests were copied nearly line-by-line
> from the succesful BIP66. I did this deliberately to make all the peer
> review and testing of the deployment mechanism used in BIP66 be equally
> valid for CLTV.
>
>
> 5) We can safely deploy CLTV with IsSuperMajority()
>
> We've done two soft-forks so far with the IsSuperMajority() mechanism,
> BIP34 and BIP66. In both cases the IsSuperMajority() mechanism itself
> worked flawlessly. As is well-known BIP66 in combination with a large %
> of the hashing power running non-validating "SPV" mining operations did
> lead to a temporary fork, however the root cause of this issue is
> unavoidable and not unique to IsSuperMajority() soft-forks.
>
> Pragmatically speaking, now that miners are well aware of the issue it
> will be easy for them to avoid a repeat of that fork by simply adding
> IsSuperMajority() rules to their "SPV" mining code. Equally turning off
> SPV mining (temporarily) is perfectly feasable.
>
>
> 6) We have the necessary consensus to deploy CLTV via IsSuperMajority()
>
> The various "nVersion bits" proposals - which I am a co-author of - have
> the primary advantage of being able to cleanly deal with the case where
> a soft-fork fails to get adopted. However, we do have broad consensus,
> including across all sides of the blocksize debate, that CLTV should be
> adopted. The risk of CLTV failing to get miner adoption, and thus
> blocking other soft-forks, is very low.
>
>
> 7) Using IsSuperMajority() to deploy CLTV doesn't limit or delay other
> upgrades
>
> It _is_ possible for multiple IsSuperMajority() soft-forks to coexist,
> in the sense that if one soft-fork is "in flight" that doesn't prevent
> another soft-fork from also being deployed simultaneously.
>
> In particular, if we deploy CLTV via IsSuperMajority() that does _not_
> impact the adoption schedule for other future soft-forks, including
> soft-forks using a future nVersion bits deployment mechanism.
>
> For instance, suppose we start deployment of CLTV right now with
> nVersion=4 blocks. In three months we have 25% miner support, and start
> deploying CHECKSEQUENCEVERIFY with nVersion=5 blocks. For miners
> supporting only OP_CLTV, the nVersion=5 blocks still trigger OP_CLTV;
> miners creating nVersion=5 blocks are simply stating that they support
> both soft-forks. Equally, if in three months we finish a nVersion bits
> proposal, those miners will be advertising nVersion=(1 << 29) blocks,
> which also advertise OP_CLTV support.
>
>
> 8) BIP101 miners have not proved to be a problem for CLTV deployment
>
> While there was concern that BIP101's use of nVersion would cause
> issues with a IsSuperMajority() softfork, the % of blocks with BIP101
> nVersion's never reached more than 1%, and currently is hovering at
> around 0.1%
>
> As Gavin Andresen has stated that he is happy to add CLTV to BIP101, and
> thus Bitcoin XT, I believe we can expect those miners to safely support
> CLTV well before soft-fork enforcement happens. Secondly, the 95%
> enforcement threshold means we can tolerate a fairly high % of miners
> running pre-CLTV BIP101 implementations without fatal effects in the
> unlikely event that those miners don't upgrade.
>
>
> 9) Doing another IsSuperMajority() soft-fork doesn't "burn a bit"
>
> This is a common myth! All nVersion bits proposals involve permanently
> setting a high-order bit to 1, which results in nVersion >= all prior
> IsSuperMajority() soft-forks. In short, we can do a nearly unlimited
> number of IsSuperMajority() soft-forks without affecting future nVersion
> bits soft-forks at all.
>
>
> 10) Waiting for nVersion bits and CHECKSEQUENCEVERIFY will significantly
>     delay deployment of CLTV
>
> It's been proposed multiple times that we wait until we can do a single
> soft-fork with CSV using the nVersion bits mechanism.
>
> nVersion bits doesn't even have an implementation yet, nor has solid
> consensus been reached on the exact semantics of how nVersion bits
> should work. The stateful nature of nVersion bits soft-forks requires a
> significant amount of new code compared to IsSuperMajority() soft-forks,
> which in turn will require a significant amount of testing. (again I'll
> point out I'm a co-author to all the nVersion bits proposals)
>
> CSV has an implementation, but there is still debate going on about what
> the exact semantics of it should be. Getting the semantics right is
> especially important as part of CSV includes changing the meaning of
> nSequence, restricting future uses of that field. There have been many
> proposals to use nSequence, e.g. for proof-of-stake blocksize voting,
> and it has the unique capability of being a field that is both unused,
> and signed by scriptSigs. We shouldn't take potentially restricting
> future uses of it lightly.
>
> CSV is also significantly more complex and invasive than CLTV in terms
> of code changes. A large % of the mining power is running forks
> of Bitcoin Core with custom changes - modifying these forks with new
> features is a labor intensive and slow process.
>
> If CLTV is ready now, why delay it - potentially for 6-12 months - for
> other proposals to catch up? Equally if they do catch up, great! As
> explained above an in-flight CLTV soft-fork won't delay future upgrades.
>
>
> 11) Even if CLTV is broken/obsoleted there is very little carrying cost
>     to having it
>
> Suppose we decide in two years that CLTV was botched and we need to fix
> it. What's the "carrying cost" of having implemented CLTV in the first
> place?
>
> We'll have used up one of our ten soft-forkable NOPs, but if we ever
> "run out" it's easy to use extension NOPs(3). Similarly, future script
> improvements like OP_MAST - or even a hard-fork - can easily expand the
> range of NOPs to the point where this is a non-issue.
>
> If you don't use OP_CLTV in your scripts there is zero effect on your
> transactions; we're not limiting future improvements to Bitcoin in any
> way other than using up a NOP by implementing CLTV.
>
>
> References
> ----------
>
> 1) https://github.com/petertodd/checklocktimeverify-demos
> 2) https://github.com/mruddy/bip65-demos
> 3) https://github.com/bitcoin/bitcoin/pull/5496#issuecomment-101293403
> 4) https://github.com/bitcoin/bips/blob/master/bip-0112.mediawiki
>
> --
> 'peter'[:-1]@petertodd.org
> 000000000000000006a257845da185433cbde54a74be889b1c046a267dcf4ab2
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150927/7fbbbfa6/attachment-0001.html>

From btcdrak at gmail.com  Sun Sep 27 20:41:02 2015
From: btcdrak at gmail.com (Btc Drak)
Date: Sun, 27 Sep 2015 21:41:02 +0100
Subject: [bitcoin-dev] Let's deploy BIP65 CHECKLOCKTIMEVERIFY!
In-Reply-To: <20150927185031.GA20599@savin.petertodd.org>
References: <20150927185031.GA20599@savin.petertodd.org>
Message-ID: <CADJgMztehvA-6wzd4_+k2enJmNZyK1ry+NOKb_7kGPD5U4c9AQ@mail.gmail.com>

On Sun, Sep 27, 2015 at 7:50 PM, Peter Todd via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> 10) Waiting for nVersion bits and CHECKSEQUENCEVERIFY will significantly
>     delay deployment of CLTV
>
> It's been proposed multiple times that we wait until we can do a single
> soft-fork with CSV using the nVersion bits mechanism.
>
> nVersion bits doesn't even have an implementation yet, nor has solid
> consensus been reached on the exact semantics of how nVersion bits
> should work.


Small correction, the suggestion is to aim to roll out CLTV+CSV together by
0.12 release, using IsSuperMajority() (or versionbits if it is ready by
then). If CSV is not ready by then, we'd just roll out CLTV.

However, the CSV related pull requests are ready for final review and if
that can happen soon I don't see why we wouldn't roll CLTV+CSV out together
before 0.12. A considerable amount of time, discussion and iterations have
occurred for the related PRs and I believe they are at the point of
consensus modulo final review before merging.

References:

Mempool-only sequence number constraint verification
https://github.com/bitcoin/bitcoin/pull/6312

Mempool-only CHECKSEQUENCEVERIFY
https://github.com/bitcoin/bitcoin/pull/6564

Mempool-only Median time-past as endpoint for lock-time calculations
https://github.com/bitcoin/bitcoin/pull/6566
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150927/81513026/attachment.html>

From kalle at rosenbaum.se  Mon Sep 28 08:30:42 2015
From: kalle at rosenbaum.se (Kalle Rosenbaum)
Date: Mon, 28 Sep 2015 10:30:42 +0200
Subject: [bitcoin-dev] Weak block thoughts...
In-Reply-To: <CAAS2fgRX-LLiNwcmbHtF6ymEX+uUx3SNjqAe4iyxouhHj=4Abw@mail.gmail.com>
References: <CABsx9T2+dG0AE+MgKRAU97KhkHTU1MuxXuwHKv3BgpJswZ5vVg@mail.gmail.com>
	<CABaSBaxcDRzw0X7-fAfxPJyLcWxTHigpHuAPb4aNQ5zk5NoDCQ@mail.gmail.com>
	<CAAS2fgTr-OuL3T6mXX-4xFC_LHnAiogTTcPMbcjsM7WtRisQEQ@mail.gmail.com>
	<CABsx9T3NFRO5nw3z=jrs0Hu3caVNkkTTTb1ibqR7LMWsoou9RQ@mail.gmail.com>
	<CAAS2fgRj+fE+znXZzFsXXBivKSxnJ2Lheo_g9us4FXN_yCLhgw@mail.gmail.com>
	<CAE-z3OU50cZBR27QrQsRT5Gtb0AVkE6K33XR0GebsyNWNrbf+w@mail.gmail.com>
	<CAPswA9xFNgdbH1JXBx+CqjT5HbkK0WGaWQLrJzm+BJCmrXRQcA@mail.gmail.com>
	<CAAS2fgRX-LLiNwcmbHtF6ymEX+uUx3SNjqAe4iyxouhHj=4Abw@mail.gmail.com>
Message-ID: <CAPswA9xei1UNMeNqi=XzSnZU=SeroaeKN_6xHJ0HfhgXBzY_mw@mail.gmail.com>

2015-09-27 21:50 GMT+02:00 Gregory Maxwell <gmaxwell at gmail.com>:

> On Sun, Sep 27, 2015 at 3:10 PM, Kalle Rosenbaum via bitcoin-dev
> <bitcoin-dev at lists.linuxfoundation.org> wrote:
> > I was mansplaining weak blocks to my wife. She asked a simple question:
> >
> > Why would I, as a miner, publish a weak block if I find one?
> >
> > I don't know.
> > Sure, I will get faster propagation for my solved block, should I find
> one.
> > On the other hand everybody else mining a similar block will enjoy the
> same
> > benefit. Assuming that I'm not a huge miner, it's unlikely that I will
> > actually solve the block, so I'm probably just giving away fast
> propagation
> > times to someone else.
> > So how does publishing a weak block benefit the producer of it more than
> the
> > other miners? Please help me understand this.
>
> Keep in mind, because of efficient differential transmission the cost
> to you is effectively nothing if your transaction acceptance policy is
> predictable, it's a hand-full of bytes sent. And by failing to send
> yours you do little to nothing to deny others the improvement.
>
>
Suppose that you've solved a block Z (weak or not) and you want to
propagate it using a previous weak block Y. With "efficient differential
transmission", I assume that you refer to the transmission of the
differences between Y and Z to a peer? What encodings are discussed? I
guess IBLTs are a hot candidate, but are there other schemes in the making?
I suppose that sending something like "weak block Y plus transactions A, B,
C minus transaction ids h(D), h(E)" is not considered an efficient
differential transmission. Then that's part of the answer to my question.


> Lets imagine an alternative weak-blockless weak block implementation:
>
> Every N seconds, every miner send to every other miner what they're
> working on.  This isn't totally crazy-- efficient differential
> transmission will keep the amount transmitted small.
>
> Any block found can be referenced to any of these earlier worklists.
>
> What the effect be of not transmitting yours?
>
> If your block is unlike everyone elses, you would suffer great delays
> in the event you found a block.
> If your block is mostly like everyone elses, you wouldn't suffer as
> much delay-- but the transmission costs would be negligible in that
> case. ... the size sent is proportional to the improvement you get
> when finding a block.
>

"the size sent is proportional to the improvement you get when finding a
block." - This encapsulates the issue quite well! The more exotic block I'm
building, the more I would benefit from publishing a weak block, but my
weak block would also be larger.


>
> In either case, no one else is harmed by you not sending yours... they
> still send their lists.
>
> A problem with that scheme is that unless you've layered an identity
> based access control system on it anyone can DOS attack it, because
> anyone can send as much as they want, they don't even have to be
> actual miners.
>
> What weak blocks adds to that is using hashcash as a rate limiting
> mechanism-- a coordination free lottery weighed by hash-power decides
> who can transmit.
>
> What if you don't participate in the lottery and share your solutions?
>  No major harm for the other users... the other users will just choose
> a somewhat lower weak-block threshold to get the updates at the
> desired rate than they would otherwise. To the extent that what you
> were working on was different from anyone else, you'll suffer because
> you failed to make use of your chance to influence what could be
> efficiently transmitted to include your own blocks.
>

Makes perfect sense. Also, if I'm working on an exotic block, the
probability of someone extending my weak block would be low-ish, so I'm not
necessarily "giving away fast propagation times to someone else" as I first
thought.


> You could also ask a question of why would you transitively relay
> someone elses announcement-- well if it helped their blocks too  (by
> reflecting things they also want to mine) the answer is obvious. But
> what if it was disjoint from the things they wanted to mine and didn't
> help compared to the weak blocks they already relayed?  In that case
> it's still in likely in their interest to relay it because if a block
> similar to it is produced and they extend that block they may end up
> orphaned because of propagation delays their parent block suffered.
> What if they receive an announcement which is so "ugly" that they
> wouldn't extend the chain with the strong block version of it (they'd
> intentionally try to fork it off?)-- in that case they wouldn't want
> to relay it.  So much the same logic as why you relay other parties
> blocks applies, including-- relaying helps the network, but if you
> don't it'll still get along fine without you.
>

Thank you very much for your explanation.

/Kalle
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150928/50ae758a/attachment.html>

From s7r at sky-ip.org  Mon Sep 28 10:10:38 2015
From: s7r at sky-ip.org (s7r)
Date: Mon, 28 Sep 2015 13:10:38 +0300
Subject: [bitcoin-dev] Let's deploy BIP65 CHECKLOCKTIMEVERIFY!
In-Reply-To: <20150927185031.GA20599@savin.petertodd.org>
References: <20150927185031.GA20599@savin.petertodd.org>
Message-ID: <5609121E.2030209@sky-ip.org>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256

+1
I was actually waiting for this. It makes 'smart contracts' simpler
and better from many points of view.

Pete I don't see anything about RCLTV in BIP65, was that a separate
BIP? Which one is it and are we also deploying it via
IsSuperMajority()? RCLTV in addition to CLTV would be trivial so maybe
we can take the pain just once?

On 9/27/2015 9:50 PM, Peter Todd via bitcoin-dev wrote:
> Summary -------
> 
> It's time to deploy BIP65 CHECKLOCKTIMEVERIFY.
> 
> I've backported the CLTV op-code and a IsSuperMajority() soft-fork
> to the v0.10 and v0.11 branches, pull-reqs #6706 and #6707
> respectively. A pull-req for git HEAD for the soft-fork deployment
> has been open since June 28th, #6351 - the opcode implementation
> itself was merged two months ago.
> 
> We should release a v0.10.3 and v0.11.1 with CLTV and get the ball 
> rolling on miner adoption. We have consensus that we need CLTV, we
> have a well tested implementation, and we have a well-tested
> deployment mechanism. We also don't need to wait for other
> soft-fork proposals to catch up - starting the CLTV deployment
> process isn't going to delay future soft-forks, or for that matter,
> hard-forks.
> 
> I think it's possible to safely get CLTV live on mainnet before the
> end of the year. It's time we get this over with and done.
> 
> 
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2.0.22 (MingW32)

iQEcBAEBCAAGBQJWCRIeAAoJEIN/pSyBJlsRlqgH/iir3Ao99WMNV0xC5RL+fv/Q
J1az1dXif9w9sTaCZMkENyIH9B2kwmOcPX/pU+p75qNvhQi9OrNMNRE8Wlwa+tcL
DD9DbyiQvxKdXjCnZqUyyIgBjuFbiF5VNQ67B1faEnzvmX81PoDjd2FPC51WChjZ
j7xPcJ73d23OPXpsKtyaUwn1QbGwprhFCEkcqjC50gw/IQkMJiqZ6pMepDVSyGKl
RpOsWCyCVoTJtM5NFk7wXg5LBFA7rXXQL56M00YJKLJAx/ooGb2T4ZRX0GeEWX8/
wquNA9Bj7picIr20sPohGE0cr2QiD3gmL9qLT2ZDlrFFDk8thL8afOx00Z6ih3I=
=dPXd
-----END PGP SIGNATURE-----

From hearn at vinumeris.com  Mon Sep 28 10:48:57 2015
From: hearn at vinumeris.com (Mike Hearn)
Date: Mon, 28 Sep 2015 12:48:57 +0200
Subject: [bitcoin-dev] Let's deploy BIP65 CHECKLOCKTIMEVERIFY!
In-Reply-To: <20150927185031.GA20599@savin.petertodd.org>
References: <20150927185031.GA20599@savin.petertodd.org>
Message-ID: <CA+w+GKRCVr-9TVk66utp7xLRgTxNpxYoj3XQE-6y_N8JS6eO6Q@mail.gmail.com>

There is *no* consensus on using a soft fork to deploy this feature. It
will result in the same problems as all the other soft forks - SPV wallets
will become less reliable during the rollout period. I am against that, as
it's entirely avoidable.

Make it a hard fork and my objection will be dropped.

Until then, as there is no consensus, you need to do one of two things:

1) Drop the "everyone must agree to make changes" idea that people here
like to peddle, and do it loudly, so everyone in the community is correctly
informed

2) Do nothing
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150928/2ef01e42/attachment-0001.html>

From adam at cypherspace.org  Mon Sep 28 11:00:26 2015
From: adam at cypherspace.org (Adam Back)
Date: Mon, 28 Sep 2015 07:00:26 -0400
Subject: [bitcoin-dev] Let's deploy BIP65 CHECKLOCKTIMEVERIFY!
In-Reply-To: <CA+w+GKRCVr-9TVk66utp7xLRgTxNpxYoj3XQE-6y_N8JS6eO6Q@mail.gmail.com>
References: <20150927185031.GA20599@savin.petertodd.org>
	<CA+w+GKRCVr-9TVk66utp7xLRgTxNpxYoj3XQE-6y_N8JS6eO6Q@mail.gmail.com>
Message-ID: <CALqxMTFEme9gYHTAVVLtFc4JCK4hoBLXEhMCRdEXK9cWso_pUA@mail.gmail.com>

I wonder what Gavin's views are, he's usually constructive, and see if
he'll include it in XT - I think he may have said he was supportive.

The rationale for soft vs hard-forks is well known, so I wont go over them.

Adam


On 28 September 2015 at 06:48, Mike Hearn via bitcoin-dev
<bitcoin-dev at lists.linuxfoundation.org> wrote:
> There is no consensus on using a soft fork to deploy this feature. It will
> result in the same problems as all the other soft forks - SPV wallets will
> become less reliable during the rollout period. I am against that, as it's
> entirely avoidable.
>
> Make it a hard fork and my objection will be dropped.
>
> Until then, as there is no consensus, you need to do one of two things:
>
> 1) Drop the "everyone must agree to make changes" idea that people here like
> to peddle, and do it loudly, so everyone in the community is correctly
> informed
>
> 2) Do nothing
>
>
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>

From elombrozo at gmail.com  Mon Sep 28 11:04:49 2015
From: elombrozo at gmail.com (Eric Lombrozo)
Date: Mon, 28 Sep 2015 04:04:49 -0700
Subject: [bitcoin-dev] Let's deploy BIP65 CHECKLOCKTIMEVERIFY!
In-Reply-To: <CA+w+GKRCVr-9TVk66utp7xLRgTxNpxYoj3XQE-6y_N8JS6eO6Q@mail.gmail.com>
References: <20150927185031.GA20599@savin.petertodd.org>
	<CA+w+GKRCVr-9TVk66utp7xLRgTxNpxYoj3XQE-6y_N8JS6eO6Q@mail.gmail.com>
Message-ID: <10248633-FD7B-4D07-B4A2-27EC5D0AC0D3@gmail.com>

My initial reaction is just HUH?!?!? Is this some sophisticated form of humor I'm just not getting?

On September 28, 2015 3:48:57 AM PDT, Mike Hearn via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:
>There is *no* consensus on using a soft fork to deploy this feature. It
>will result in the same problems as all the other soft forks - SPV
>wallets
>will become less reliable during the rollout period. I am against that,
>as
>it's entirely avoidable.
>
>Make it a hard fork and my objection will be dropped.
>
>Until then, as there is no consensus, you need to do one of two things:
>
>1) Drop the "everyone must agree to make changes" idea that people here
>like to peddle, and do it loudly, so everyone in the community is
>correctly
>informed
>
>2) Do nothing
>
>
>------------------------------------------------------------------------
>
>_______________________________________________
>bitcoin-dev mailing list
>bitcoin-dev at lists.linuxfoundation.org
>https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev

-- 
Sent from my Android device with K-9 Mail. Please excuse my brevity.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150928/0eabc6d7/attachment.html>

From hearn at vinumeris.com  Mon Sep 28 11:40:35 2015
From: hearn at vinumeris.com (Mike Hearn)
Date: Mon, 28 Sep 2015 13:40:35 +0200
Subject: [bitcoin-dev] Let's deploy BIP65 CHECKLOCKTIMEVERIFY!
In-Reply-To: <CALqxMTFEme9gYHTAVVLtFc4JCK4hoBLXEhMCRdEXK9cWso_pUA@mail.gmail.com>
References: <20150927185031.GA20599@savin.petertodd.org>
	<CA+w+GKRCVr-9TVk66utp7xLRgTxNpxYoj3XQE-6y_N8JS6eO6Q@mail.gmail.com>
	<CALqxMTFEme9gYHTAVVLtFc4JCK4hoBLXEhMCRdEXK9cWso_pUA@mail.gmail.com>
Message-ID: <CA+w+GKQ8xos6S_BBMqZy6wieFCG=eNxahKXrx3mVKuZcxzjruw@mail.gmail.com>

>
> The rationale for soft vs hard-forks is well known, so I wont go over them.
>

The rationale of "backwards compatibility" is well known, yet wrong. I've
gone over the arguments here and explained why the concept makes no sense:

https://medium.com/@octskyward/on-consensus-and-forks-c6a050c792e7

Eric - no, it's not sophisticated humour. I've been objecting to soft forks
since this idea first appeared.

There is no consensus. Now pick. Lose the requirement that everyone agree
for consensus changes, and tell people you've done it. Change the spec. Or
do nothing.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150928/5dae3282/attachment.html>

From elombrozo at gmail.com  Mon Sep 28 12:20:31 2015
From: elombrozo at gmail.com (Eric Lombrozo)
Date: Mon, 28 Sep 2015 05:20:31 -0700
Subject: [bitcoin-dev] Let's deploy BIP65 CHECKLOCKTIMEVERIFY!
In-Reply-To: <CA+w+GKQ8xos6S_BBMqZy6wieFCG=eNxahKXrx3mVKuZcxzjruw@mail.gmail.com>
References: <20150927185031.GA20599@savin.petertodd.org>
	<CA+w+GKRCVr-9TVk66utp7xLRgTxNpxYoj3XQE-6y_N8JS6eO6Q@mail.gmail.com>
	<CALqxMTFEme9gYHTAVVLtFc4JCK4hoBLXEhMCRdEXK9cWso_pUA@mail.gmail.com>
	<CA+w+GKQ8xos6S_BBMqZy6wieFCG=eNxahKXrx3mVKuZcxzjruw@mail.gmail.com>
Message-ID: <4965E9A0-0FF1-4A3F-9165-A21AF976E229@gmail.com>

Perhaps Adam won't go into the rationale...but I think it is important we clarify this.

For better or worse, the only "voting" system available to Bitcoin that cannot be trivially attacked is hashing power. Soft forks are essentially miner-enforced rule changes...rules they could have decided to enforce without the consensus of anyone else. For instance, as far as old nodes are concerned, a p2sh output can be redeemed by a simple preimage of the hash...with no signatures. The point, however, is that as long as the majority of hashpower enforces the new rule, such attempts to redeem the output will never end up on the blockchain. Therefore, transactions that attempt to redeem the output with a simple preimage are as good as invalid...and effectively have become invalid.

I concede that this mechanism has some issues. Moreover, I agree that it is important that the Bitcoin community be aware of these things. I've been proposing making these rule changes explicit in the BIPs (https://github.com/CodeShark/bips/blob/BIP_Classification/bip-layers.mediawiki). I believe it is important that people weigh in on such rule changes. However, the above stated mechanism does not fall under the definition of "hard fork" we've come to accept.

Go ahead and object to soft forks...but at least try not to make arguments based on changing the definitions of terms we all generally agree upon.

- Eric

On September 28, 2015 4:40:35 AM PDT, Mike Hearn via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:
>>
>> The rationale for soft vs hard-forks is well known, so I wont go over
>them.
>>
>
>The rationale of "backwards compatibility" is well known, yet wrong.
>I've
>gone over the arguments here and explained why the concept makes no
>sense:
>
>https://medium.com/@octskyward/on-consensus-and-forks-c6a050c792e7
>
>Eric - no, it's not sophisticated humour. I've been objecting to soft
>forks
>since this idea first appeared.
>
>There is no consensus. Now pick. Lose the requirement that everyone
>agree
>for consensus changes, and tell people you've done it. Change the spec.
>Or
>do nothing.
>
>
>------------------------------------------------------------------------
>
>_______________________________________________
>bitcoin-dev mailing list
>bitcoin-dev at lists.linuxfoundation.org
>https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev

-- 
Sent from my Android device with K-9 Mail. Please excuse my brevity.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150928/3812b096/attachment.html>

From hearn at vinumeris.com  Mon Sep 28 12:26:17 2015
From: hearn at vinumeris.com (Mike Hearn)
Date: Mon, 28 Sep 2015 14:26:17 +0200
Subject: [bitcoin-dev] Let's deploy BIP65 CHECKLOCKTIMEVERIFY!
In-Reply-To: <4965E9A0-0FF1-4A3F-9165-A21AF976E229@gmail.com>
References: <20150927185031.GA20599@savin.petertodd.org>
	<CA+w+GKRCVr-9TVk66utp7xLRgTxNpxYoj3XQE-6y_N8JS6eO6Q@mail.gmail.com>
	<CALqxMTFEme9gYHTAVVLtFc4JCK4hoBLXEhMCRdEXK9cWso_pUA@mail.gmail.com>
	<CA+w+GKQ8xos6S_BBMqZy6wieFCG=eNxahKXrx3mVKuZcxzjruw@mail.gmail.com>
	<4965E9A0-0FF1-4A3F-9165-A21AF976E229@gmail.com>
Message-ID: <CA+w+GKSm2Np92+NA77nNMB5LqSyO0=W8dziiMtGO=Jf+7KidHQ@mail.gmail.com>

>
> Go ahead and object to soft forks...but at least try not to make arguments
> based on changing the definitions of terms we all generally agree upon.
>

I don't intend to do that, and I don't think I am - I know what the
difference between a soft and hard fork is and am not trying to confuse or
blur the two.

To reiterate: this current BIP implements a soft fork. I am not debating
that. I am saying it should use a hard fork instead. This will ensure no
repeat of the P2SH case where invalid blocks were being found for weeks (or
was it months?) after the new rules kicked in, thus exposing SPV wallets
and old nodes to unnecessary risk for no benefit.

Additionally, I am making it clear that there's no consensus for rolling
out the new opcode in this way. As you say, the mechanism has issues. If
you read the comments when I wrote my article, you can see that others
share the same concerns:

https://www.reddit.com/r/Bitcoin/comments/3griiv/on_consensus_and_forks_by_mike_hearn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150928/a7bdf845/attachment-0001.html>

From elombrozo at gmail.com  Mon Sep 28 12:44:52 2015
From: elombrozo at gmail.com (Eric Lombrozo)
Date: Mon, 28 Sep 2015 05:44:52 -0700
Subject: [bitcoin-dev] Let's deploy BIP65 CHECKLOCKTIMEVERIFY!
In-Reply-To: <CA+w+GKSm2Np92+NA77nNMB5LqSyO0=W8dziiMtGO=Jf+7KidHQ@mail.gmail.com>
References: <20150927185031.GA20599@savin.petertodd.org>
	<CA+w+GKRCVr-9TVk66utp7xLRgTxNpxYoj3XQE-6y_N8JS6eO6Q@mail.gmail.com>
	<CALqxMTFEme9gYHTAVVLtFc4JCK4hoBLXEhMCRdEXK9cWso_pUA@mail.gmail.com>
	<CA+w+GKQ8xos6S_BBMqZy6wieFCG=eNxahKXrx3mVKuZcxzjruw@mail.gmail.com>
	<4965E9A0-0FF1-4A3F-9165-A21AF976E229@gmail.com>
	<CA+w+GKSm2Np92+NA77nNMB5LqSyO0=W8dziiMtGO=Jf+7KidHQ@mail.gmail.com>
Message-ID: <C0E61EA6-76BE-45E0-8983-A3BC26CC64CF@gmail.com>

SPV wallets in their current form are inherently insecure. Moreover, while we at least have a soft fork mechanism that is not trivially exploitable (yes, it's got issues...but unlike SPV wallets, it isn't so easily exploitable), we have NO hard fork mechanism in place that isn't highly prone to systemic consensus failure.

But I think pretty much anyone who hasn't been in a coma for the last several years knows this...and I'll stop repeating the obvious.

On September 28, 2015 5:26:17 AM PDT, Mike Hearn <hearn at vinumeris.com> wrote:
>>
>> Go ahead and object to soft forks...but at least try not to make
>arguments
>> based on changing the definitions of terms we all generally agree
>upon.
>>
>
>I don't intend to do that, and I don't think I am - I know what the
>difference between a soft and hard fork is and am not trying to confuse
>or
>blur the two.
>
>To reiterate: this current BIP implements a soft fork. I am not
>debating
>that. I am saying it should use a hard fork instead. This will ensure
>no
>repeat of the P2SH case where invalid blocks were being found for weeks
>(or
>was it months?) after the new rules kicked in, thus exposing SPV
>wallets
>and old nodes to unnecessary risk for no benefit.
>
>Additionally, I am making it clear that there's no consensus for
>rolling
>out the new opcode in this way. As you say, the mechanism has issues.
>If
>you read the comments when I wrote my article, you can see that others
>share the same concerns:
>
>https://www.reddit.com/r/Bitcoin/comments/3griiv/on_consensus_and_forks_by_mike_hearn

-- 
Sent from my Android device with K-9 Mail. Please excuse my brevity.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150928/cacc6b6d/attachment.html>

From tier.nolan at gmail.com  Mon Sep 28 12:47:25 2015
From: tier.nolan at gmail.com (Tier Nolan)
Date: Mon, 28 Sep 2015 13:47:25 +0100
Subject: [bitcoin-dev] Let's deploy BIP65 CHECKLOCKTIMEVERIFY!
In-Reply-To: <CA+w+GKRCVr-9TVk66utp7xLRgTxNpxYoj3XQE-6y_N8JS6eO6Q@mail.gmail.com>
References: <20150927185031.GA20599@savin.petertodd.org>
	<CA+w+GKRCVr-9TVk66utp7xLRgTxNpxYoj3XQE-6y_N8JS6eO6Q@mail.gmail.com>
Message-ID: <CAE-z3OVAVdOPAypOA0gndcRGbd74TChtsLW6u77Muxk6DJK16g@mail.gmail.com>

On Mon, Sep 28, 2015 at 11:48 AM, Mike Hearn via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> 1) Drop the "everyone must agree to make changes" idea that people here
> like to peddle, and do it loudly, so everyone in the community is correctly
> informed
>

There never was a rule that soft-forks require total consensus.  It is
desirable but not mandatory.

A majority of miners can inherently implement a soft fork against the
wishes of the rest of the users.

Merchant/exchange/user checkpointing is the defense and therefore is a
perfectly valid response to miners taking such an action.  If a soft fork
is opposed by a large section of the users, then threatening (and
implementing) a checkpoint is the correct response.

No group can force through a hard fork, it inherently requires buy-in from
a large portion of the userbase.  That is where the "total consensus"
requirement comes from.  Naturally, absolute total consensus isn't actually
required but you do need very large consensus and also consensus across the
various sub-groups.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150928/0a0f7108/attachment.html>

From hearn at vinumeris.com  Mon Sep 28 12:54:33 2015
From: hearn at vinumeris.com (Mike Hearn)
Date: Mon, 28 Sep 2015 14:54:33 +0200
Subject: [bitcoin-dev] Let's deploy BIP65 CHECKLOCKTIMEVERIFY!
In-Reply-To: <C0E61EA6-76BE-45E0-8983-A3BC26CC64CF@gmail.com>
References: <20150927185031.GA20599@savin.petertodd.org>
	<CA+w+GKRCVr-9TVk66utp7xLRgTxNpxYoj3XQE-6y_N8JS6eO6Q@mail.gmail.com>
	<CALqxMTFEme9gYHTAVVLtFc4JCK4hoBLXEhMCRdEXK9cWso_pUA@mail.gmail.com>
	<CA+w+GKQ8xos6S_BBMqZy6wieFCG=eNxahKXrx3mVKuZcxzjruw@mail.gmail.com>
	<4965E9A0-0FF1-4A3F-9165-A21AF976E229@gmail.com>
	<CA+w+GKSm2Np92+NA77nNMB5LqSyO0=W8dziiMtGO=Jf+7KidHQ@mail.gmail.com>
	<C0E61EA6-76BE-45E0-8983-A3BC26CC64CF@gmail.com>
Message-ID: <CA+w+GKS74iF2FNuHtds=3R9++sx9ZP-0tcq_j5XqZw9-6uHkVQ@mail.gmail.com>

>
> we have NO hard fork mechanism in place that isn't highly prone to
> systemic consensus failure.
>

Just use an opcode that isn't currently defined. Done. What about that
mechanism is prone to failure?

Re: coma. No need for insults. Please read my article and address the
points raised there, which, by the way, do not include any mention of SPV
wallets. Although your belief that SPV wallets are "inherently insecure"
seems needlessly trollish - I certainly would disagree, but it's a
different debate.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150928/4e00a31e/attachment.html>

From gavinandresen at gmail.com  Mon Sep 28 13:01:02 2015
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Mon, 28 Sep 2015 09:01:02 -0400
Subject: [bitcoin-dev] Let's deploy BIP65 CHECKLOCKTIMEVERIFY!
In-Reply-To: <CA+w+GKRCVr-9TVk66utp7xLRgTxNpxYoj3XQE-6y_N8JS6eO6Q@mail.gmail.com>
References: <20150927185031.GA20599@savin.petertodd.org>
	<CA+w+GKRCVr-9TVk66utp7xLRgTxNpxYoj3XQE-6y_N8JS6eO6Q@mail.gmail.com>
Message-ID: <CABsx9T0XW_jGYhNw6t29AZXz1TxjuHjfEvsbdF5Ji7LUkFo4Ow@mail.gmail.com>

I think three things need to happen:

1) Stop pretending that "everyone must agree to make consensus rule
changes." "Rough consensus" is what we've always gone with, and is good
enough.

2) Mr. Todd (or somebody) needs to write up a risk/benefit security
tradeoff analysis doo-hickey document and publish it. I'm reasonably
confident that the risks to SPV nodes can be mitigated (e.g. by deploying
mempool-only first, before the soft fork rolls out), but as somebody who
has only been moderately paying attention, BETTER COMMUNICATION is needed.
What should SPV wallet authors be doing right now, if anything? Once the
soft fork starts to roll out or activates, what do miners need to be aware
of? SPV wallet authors?

3) I agree CLTV is ready to roll out, that there is rough consensus a soft
fork is a reasonable way to do it, and that it should happen ASAP.

On Mon, Sep 28, 2015 at 6:48 AM, Mike Hearn via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> There is *no* consensus on using a soft fork to deploy this feature. It
> will result in the same problems as all the other soft forks - SPV wallets
> will become less reliable during the rollout period. I am against that, as
> it's entirely avoidable.
>
> Make it a hard fork and my objection will be dropped.
>
> Until then, as there is no consensus, you need to do one of two things:
>
> 1) Drop the "everyone must agree to make changes" idea that people here
> like to peddle, and do it loudly, so everyone in the community is correctly
> informed
>
> 2) Do nothing
>
>
-- 
--
Gavin Andresen
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150928/066eb127/attachment.html>

From pete at petertodd.org  Mon Sep 28 13:21:27 2015
From: pete at petertodd.org (Peter Todd)
Date: Mon, 28 Sep 2015 09:21:27 -0400
Subject: [bitcoin-dev] Let's deploy BIP65 CHECKLOCKTIMEVERIFY!
In-Reply-To: <CA+w+GKRCVr-9TVk66utp7xLRgTxNpxYoj3XQE-6y_N8JS6eO6Q@mail.gmail.com>
References: <20150927185031.GA20599@savin.petertodd.org>
	<CA+w+GKRCVr-9TVk66utp7xLRgTxNpxYoj3XQE-6y_N8JS6eO6Q@mail.gmail.com>
Message-ID: <20150928132127.GA4829@savin.petertodd.org>

On Mon, Sep 28, 2015 at 12:48:57PM +0200, Mike Hearn wrote:
> There is *no* consensus on using a soft fork to deploy this feature. It
> will result in the same problems as all the other soft forks - SPV wallets
> will become less reliable during the rollout period. I am against that, as
> it's entirely avoidable.
> 
> Make it a hard fork and my objection will be dropped.
> 
> Until then, as there is no consensus, you need to do one of two things:
> 
> 1) Drop the "everyone must agree to make changes" idea that people here
> like to peddle, and do it loudly, so everyone in the community is correctly
> informed
> 
> 2) Do nothing

Hmm? You didn't quote any of my email, so I'll remind you what I did say
we had consensus about:

    2) We have consensus on the semantics of the CLTV opcode

and

    3) We have consensus that Bitcoin should adopt CLTV

    The broad peer review and discussion that got #6124 merged is a clear
    sign that we expect CLTV to be eventually adopted.  __The question isn't
    if CLTV should be added to the Bitcoin protocol, but rather when.__

(emphasis mine)

Both those statements of consensus are *not* about how CLTV is to be
deployed. I did discuss deployment later:

    6) We have the __necessary consensus__ to deploy CLTV via IsSuperMajority()

    The various "nVersion bits" proposals - which I am a co-author of - have
    the primary advantage of being able to cleanly deal with the case where
    a soft-fork fails to get adopted. However, we do have broad consensus,
    including across all sides of the blocksize debate, that CLTV should be
    adopted. __The risk of CLTV failing to get miner adoption, and thus
    blocking other soft-forks, is very low.__

I probably could have worded this section a bit more clearly; when I say
"necessary consensus" I'm referring to the consensus required for a
soft-fork deployment. At minimum a simple majority of hashing power -
your approval isn't required.

For a safe soft-fork, we'd like a super majority of miners to be on
board. For a IsSuperMajority() soft-fork - as opposed to nVersion bits -
we also need the probability of the soft-fork being rejected to be very
low. To achieve that, having consensus that CLTV is a good idea is the
best situation to be in. But that's not to say that a few dissenting
voices should be seen as a blocker to progress - rather is just makes
the deployment a bit more risky, being a sign that the consensus may
change in the future, with the soft-fork being later rejected. For
example strong objections by a respected Bitcoin developer who has made
significant contributions to the consensus codebase and protocol
development would be a strong sign that a IsSuperMajority() soft-fork
might fail, and deployment via nVersion bits is probably a better
approach. Fortunately we're not in that situation.

Hard-forks are a very different situation, with significantly more need
for very broad consensus, but that's been well discussed elsewhere.


I have three questions to you:

1) Do you agree that CLTV should be added to the Bitcoin protocol?

Ignoring the question how exactly it is added, hard-fork or soft-fork.


2) Will you add a IsSuperMajority() CLTV soft-fork to Bitcoin XT if it
   is added to Bitcoin Core?

If you refuse to do this the risk of the soft-fork is increased a bit,
although miner support for XT has remained extremely low, and the 95%
switch-over threshold has a significant margin for error. (there's a 75%
threshold to consider as well, however as XT has adopted my pull-req
#5000 - Discourage NOPs reserved for soft-fork upgrades - those miners
will only produce valid blocks under CLTV rules)


3) Will you add soft-fork detection to bitcoinj, to allow SPV clients to
   detect advertised soft-forks and correctly handle them?

Notably, if you do this your objections against soft-forks will be met,
as the behavior of a SPV client with soft-fork detection during a
soft-fork will be identical to that client during a hard-fork. In
particular, the SPV client will correct reject invalid blocks, and
continue to follow only the longest valid chain. (modulo unadvertised
forks of course, an inherently unavoidable problem with the SPV security
model) Secondly, that code should also detect forks it doesn't know
about - as is done in Bitcoin Core already - and warn the user.

-- 
'peter'[:-1]@petertodd.org
00000000000000000d74f5def1087f3ec1571cb468e471e71f96063253988c78
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 650 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150928/8afec924/attachment-0001.sig>

From pete at petertodd.org  Mon Sep 28 13:28:14 2015
From: pete at petertodd.org (Peter Todd)
Date: Mon, 28 Sep 2015 09:28:14 -0400
Subject: [bitcoin-dev] Let's deploy BIP65 CHECKLOCKTIMEVERIFY!
In-Reply-To: <CABsx9T0XW_jGYhNw6t29AZXz1TxjuHjfEvsbdF5Ji7LUkFo4Ow@mail.gmail.com>
References: <20150927185031.GA20599@savin.petertodd.org>
	<CA+w+GKRCVr-9TVk66utp7xLRgTxNpxYoj3XQE-6y_N8JS6eO6Q@mail.gmail.com>
	<CABsx9T0XW_jGYhNw6t29AZXz1TxjuHjfEvsbdF5Ji7LUkFo4Ow@mail.gmail.com>
Message-ID: <20150928132814.GB4829@savin.petertodd.org>

On Mon, Sep 28, 2015 at 09:01:02AM -0400, Gavin Andresen wrote:
> I think three things need to happen:
> 
> 1) Stop pretending that "everyone must agree to make consensus rule
> changes." "Rough consensus" is what we've always gone with, and is good
> enough.
> 
> 2) Mr. Todd (or somebody) needs to write up a risk/benefit security
> tradeoff analysis doo-hickey document and publish it. I'm reasonably
> confident that the risks to SPV nodes can be mitigated (e.g. by deploying
> mempool-only first, before the soft fork rolls out), but as somebody who
> has only been moderately paying attention, BETTER COMMUNICATION is needed.
> What should SPV wallet authors be doing right now, if anything? Once the
> soft fork starts to roll out or activates, what do miners need to be aware
> of? SPV wallet authors?

Do you have such a document for your BIP101? That would save me a lot of
time, and the need for that kind of document is significantly higher
with BIP101 anyway.


Re: mempool, CLTV-using transactions are non-standard and are not
relayed in all Bitcoin Core releases. (see my pull-req #5000 -
Discourage NOPs reserved for soft-fork upgrades - for why) I believe
that meets your suggestion of deploying mempool-only first.

-- 
'peter'[:-1]@petertodd.org
0000000000000000032420ad2987adc954df855f9ae10cf608e911b431f640e0
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 650 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150928/24bdf9f3/attachment.sig>

From j at toom.im  Mon Sep 28 13:30:22 2015
From: j at toom.im (Jonathan Toomim (Toomim Bros))
Date: Mon, 28 Sep 2015 06:30:22 -0700
Subject: [bitcoin-dev] Weak block thoughts...
In-Reply-To: <CAPswA9xei1UNMeNqi=XzSnZU=SeroaeKN_6xHJ0HfhgXBzY_mw@mail.gmail.com>
References: <CABsx9T2+dG0AE+MgKRAU97KhkHTU1MuxXuwHKv3BgpJswZ5vVg@mail.gmail.com>
	<CABaSBaxcDRzw0X7-fAfxPJyLcWxTHigpHuAPb4aNQ5zk5NoDCQ@mail.gmail.com>
	<CAAS2fgTr-OuL3T6mXX-4xFC_LHnAiogTTcPMbcjsM7WtRisQEQ@mail.gmail.com>
	<CABsx9T3NFRO5nw3z=jrs0Hu3caVNkkTTTb1ibqR7LMWsoou9RQ@mail.gmail.com>
	<CAAS2fgRj+fE+znXZzFsXXBivKSxnJ2Lheo_g9us4FXN_yCLhgw@mail.gmail.com>
	<CAE-z3OU50cZBR27QrQsRT5Gtb0AVkE6K33XR0GebsyNWNrbf+w@mail.gmail.com>
	<CAPswA9xFNgdbH1JXBx+CqjT5HbkK0WGaWQLrJzm+BJCmrXRQcA@mail.gmail.com>
	<CAAS2fgRX-LLiNwcmbHtF6ymEX+uUx3SNjqAe4iyxouhHj=4Abw@mail.gmail.com>
	<CAPswA9xei1UNMeNqi=XzSnZU=SeroaeKN_6xHJ0HfhgXBzY_mw@mail.gmail.com>
Message-ID: <8166B5CA-BE2A-444E-B826-BFA18F4C4757@toom.im>


On Sep 28, 2015, at 1:30 AM, Kalle Rosenbaum via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:

> Suppose that you've solved a block Z (weak or not) and you want to propagate it using a previous weak block Y. With "efficient differential transmission", I assume that you refer to the transmission of the differences between Y and Z to a peer? What encodings are discussed? I guess IBLTs are a hot candidate, but are there other schemes in the making? I suppose that sending something like "weak block Y plus transactions A, B, C minus transaction ids h(D), h(E)" is not considered an efficient differential transmission. Then that's part of the answer to my question.
> 

IBLTs are effective for synchronizing mempools, to ensure that all nodes in a network can successfully map a transaction hash to a full transaction. However, IBLTs do not help with the ordering of the transactions.

Encoding the new blocks as a diff (delete bytes x through y, insert string s after byte z) based on a weak block would probably be pretty effective, but it would probably require a lot of memory for keeping a weak block (or chain of diffs) for each miner that publishes weak blocks. It might be a little complicated to manage and remove duplicate information between weak blocks published by different sources. You'd probably have to build a weak block tree or DAG with diffs as edges, and walk the tree each time you wanted to fetch a (weak) block.

Another strategy is to use the Merkle tree nodes. Each node is a hash of its concatenated child nodes, Each node thus specifies the order of 2^n transaction hashes. Changing one transaction hash requires modifying log_2(n) Merkle node hashes, which is okay but maybe not as good as the diff approach. However, the main benefit comes from compressing and storing data from many different weak blocks generated by different miners. You can build a cache of Merkle nodes, and each time you get a new weak block, you can add any new Merkle nodes to that cache. There's some more info on this here: http://bitcoin-development.narkive.com/dGIxjVI5/torrent-style-new-block-propagation-on-merkle-trees

Merkle tree encodings handle replacements of transactions well, but they have trouble with insertions or deletions near the beginning of a block. Efforts could be made to avoid insertions and deletions in the actual transaction ordering to improve transmissibility, or a hybrid system could be implemented in which byte-level diffs or transaction-level diffs are used for transmitting the weak blocks as a diff against previously cached Merkle nodes.

Or maybe there's a better way.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150928/4decf9a0/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 496 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150928/4decf9a0/attachment.sig>

From lauri.love at gmail.com  Mon Sep 28 13:33:52 2015
From: lauri.love at gmail.com (Lauri Love)
Date: Mon, 28 Sep 2015 14:33:52 +0100
Subject: [bitcoin-dev] Bitcoin mining idea
In-Reply-To: <CA+9tygJVkaxegAGjpFA_MutU-xChgS5FK4+JKAR=14k0Ctbm8g@mail.gmail.com>
References: <CA+9tygJVkaxegAGjpFA_MutU-xChgS5FK4+JKAR=14k0Ctbm8g@mail.gmail.com>
Message-ID: <CA+et0t4VmHWJZmast+VbmYsZGihX2qcvagOR+aqx7R+DGOfTrA@mail.gmail.com>

Don't solicit interest in advance of content, please. Share your idea
first and if people find it cogent and interesting they will volunteer
interest/assistance.

On 27 September 2015 at 18:53, Neil Haran via bitcoin-dev
<bitcoin-dev at lists.linuxfoundation.org> wrote:
> Hi,
>
> I have an idea for a gamified bitcoin mining app that I'd like to partner
> with someone on that is very good with cryptography and knows the bitcoin
> code base well. I have received interest in this from some, but I'm looking
> for the ideal candidate to work with. If this is of interest, please email
> me at nharan81 at gmail.com.
>
> Thanks,
> Neil
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>



-- 
[Any text in this message is copyrighted to the full extent of the law
in all jurisdictions with the following license: it may be read and
stored or used to create derivative works by any person or
organization with the following exceptions: all law-enforcement
organizations, all national intelligence services, all corporate
entities that monitize personal information. Any violations of this
license with be prosecuted relentlessly and the highest possible
damages sought.]

From hearn at vinumeris.com  Mon Sep 28 13:41:56 2015
From: hearn at vinumeris.com (Mike Hearn)
Date: Mon, 28 Sep 2015 15:41:56 +0200
Subject: [bitcoin-dev] Let's deploy BIP65 CHECKLOCKTIMEVERIFY!
In-Reply-To: <20150928132127.GA4829@savin.petertodd.org>
References: <20150927185031.GA20599@savin.petertodd.org>
	<CA+w+GKRCVr-9TVk66utp7xLRgTxNpxYoj3XQE-6y_N8JS6eO6Q@mail.gmail.com>
	<20150928132127.GA4829@savin.petertodd.org>
Message-ID: <CA+w+GKTCZDNVJ-XEmsCAWGXUV3xOzVYmqMQYm0x+ihyYWQN0Gg@mail.gmail.com>

>
> 1) Do you agree that CLTV should be added to the Bitcoin protocol?
>
> Ignoring the question how exactly it is added, hard-fork or soft-fork.
>

The opcode definition seems OK.


> 2) Will you add a IsSuperMajority() CLTV soft-fork to Bitcoin XT if it
>    is added to Bitcoin Core?
>

Yes. It might be worth putting the version bit change behind a command line
flag though: the BIP, as written, has problems (with deployment).


> 3) Will you add soft-fork detection to bitcoinj, to allow SPV clients to

   detect advertised soft-forks and correctly handle them?
>

I'd really hate to do that. It'd be a Rube Goldberg machine:

   https://krypt3ia.files.wordpress.com/2011/11/rube.jpg

There's no really good way to do what you propose, and we already have a
perfectly workable mechanism to tell SPV clients about chain forks: the
block chain itself. This has the advantage of being already implemented,
already deployed, and it works correctly.

Attempting to strap a different mechanism on top to try and make soft forks
more like hard forks would be a large and pointless waste of people's time
and effort, not just mine (bitcoinj is not the only widely used SPV
implementation nowadays). You may as well go straight to the correct
outcome instead of trying to simulate it with ever more complex mechanisms.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150928/2f74bd22/attachment.html>

From gavinandresen at gmail.com  Mon Sep 28 13:43:42 2015
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Mon, 28 Sep 2015 09:43:42 -0400
Subject: [bitcoin-dev] Let's deploy BIP65 CHECKLOCKTIMEVERIFY!
In-Reply-To: <20150928132814.GB4829@savin.petertodd.org>
References: <20150927185031.GA20599@savin.petertodd.org>
	<CA+w+GKRCVr-9TVk66utp7xLRgTxNpxYoj3XQE-6y_N8JS6eO6Q@mail.gmail.com>
	<CABsx9T0XW_jGYhNw6t29AZXz1TxjuHjfEvsbdF5Ji7LUkFo4Ow@mail.gmail.com>
	<20150928132814.GB4829@savin.petertodd.org>
Message-ID: <CABsx9T1qUcdFjvJfM-hOHh5pUeoA76uW2qOC6kRiM-+Qrfop7w@mail.gmail.com>

On Mon, Sep 28, 2015 at 9:28 AM, Peter Todd <pete at petertodd.org> wrote:

> > 2) Mr. Todd (or somebody) needs to write up a risk/benefit security
> > tradeoff analysis doo-hickey document and publish it. I'm reasonably
> > confident that the risks to SPV nodes can be mitigated (e.g. by deploying
> > mempool-only first, before the soft fork rolls out), but as somebody who
> > has only been moderately paying attention, BETTER COMMUNICATION is
> needed.
> > What should SPV wallet authors be doing right now, if anything? Once the
> > soft fork starts to roll out or activates, what do miners need to be
> aware
> > of? SPV wallet authors?
>
> Do you have such a document for your BIP101? That would save me a lot of
> time, and the need for that kind of document is significantly higher
> with BIP101 anyway.
>

Hmmm?  When I asked YOU for that kind of security analysis document, you
said you'd see if any of your clients would be willing to let you publish
one you'd done in the past. Then I never heard back from you.

So, no, I don't have one for BIP 101, but unless you were lying and just
trying to add Yet Another Hoop for BIP 101 to jump through, you should
already have something to start from.

RE: mempool only: yes, pull-req 5000 satisfies (and that's what I was
thinking of). There should be a nice, readable blog post explaining to
other full node implementors and wallet implementors why that was done for
Core and what they should do to follow 'best practices to be soft-fork
ready.'

-- 
--
Gavin Andresen
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150928/7a494177/attachment-0001.html>

From btcdrak at gmail.com  Mon Sep 28 14:05:40 2015
From: btcdrak at gmail.com (Btc Drak)
Date: Mon, 28 Sep 2015 15:05:40 +0100
Subject: [bitcoin-dev] Let's deploy BIP65 CHECKLOCKTIMEVERIFY!
In-Reply-To: <CA+w+GKQ8xos6S_BBMqZy6wieFCG=eNxahKXrx3mVKuZcxzjruw@mail.gmail.com>
References: <20150927185031.GA20599@savin.petertodd.org>
	<CA+w+GKRCVr-9TVk66utp7xLRgTxNpxYoj3XQE-6y_N8JS6eO6Q@mail.gmail.com>
	<CALqxMTFEme9gYHTAVVLtFc4JCK4hoBLXEhMCRdEXK9cWso_pUA@mail.gmail.com>
	<CA+w+GKQ8xos6S_BBMqZy6wieFCG=eNxahKXrx3mVKuZcxzjruw@mail.gmail.com>
Message-ID: <CADJgMzvCMPCto7fra+H=U3b9hCY7rCPDOV2DgOS4bLzz+PTLUg@mail.gmail.com>

On Mon, Sep 28, 2015 at 12:40 PM, Mike Hearn via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:
>
> There is no consensus. Now pick. Lose the requirement that everyone agree
> for consensus changes, and tell people you've done it. Change the spec. Or
> do nothing.
>

Of course there is good technical consensus for CLTV by IsSuperMajority()
in the same way as BIP66 was rolled out. I believe the only open question
is whether we have to account for XT's use of versionbits (because the
standard has not been finalised). One can take the view that it is a non
issue given the almost negligible number of BIP101 blocks, but it certainly
goes away if XT also merges BIP65/CLTV.

As for risks, I think we learned a lot from BIP66:

1. miners are now aware of the risks of SPV mining near activation and are
financially incentivised not to during that period.
2. As for SPV wallets need to handle awareness of the new blocks. BitcoinJ
can play a pivotal role: as far as I am aware if we'd thought about adding
handling to BitcoinJ before activation rather than after activation[1][2],
the SPV issues would have been mitigated for the vast majority who rely on
the library. To me, this particular issue highlights our collective failure
to communicate the necessity for additional SPV handling requirements and
other preparation the ecosystem should engage in during a soft fork. This
is something we should definitely add to the release notes for the next
soft fork and advertise widely. Certainly it MUST be well documented in the
BIP65 deployment section, which it is currently not.

Lastly your objections came across very strongly (at least to my
understanding) so I am curious: Peter stated Gavin is OK with adding CLTV
support to XT, and assuming that is the case, will you object to merging it
or similarly object to adding the necessary block handling to BitcoinJ?

[1]
https://github.com/bitcoinj/bitcoinj/commit/6f03669fbd6c368961a25dfd772751d1ca2a1b5b
[2]
https://github.com/bitcoinj/bitcoinj/commit/d3d11df6d71ff11cef2dc0caa8263daa641fe118
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150928/2d9c5e1d/attachment.html>

From pete at petertodd.org  Mon Sep 28 14:14:41 2015
From: pete at petertodd.org (Peter Todd)
Date: Mon, 28 Sep 2015 10:14:41 -0400
Subject: [bitcoin-dev] Let's deploy BIP65 CHECKLOCKTIMEVERIFY!
In-Reply-To: <CABsx9T1qUcdFjvJfM-hOHh5pUeoA76uW2qOC6kRiM-+Qrfop7w@mail.gmail.com>
References: <20150927185031.GA20599@savin.petertodd.org>
	<CA+w+GKRCVr-9TVk66utp7xLRgTxNpxYoj3XQE-6y_N8JS6eO6Q@mail.gmail.com>
	<CABsx9T0XW_jGYhNw6t29AZXz1TxjuHjfEvsbdF5Ji7LUkFo4Ow@mail.gmail.com>
	<20150928132814.GB4829@savin.petertodd.org>
	<CABsx9T1qUcdFjvJfM-hOHh5pUeoA76uW2qOC6kRiM-+Qrfop7w@mail.gmail.com>
Message-ID: <20150928141441.GA21815@savin.petertodd.org>

On Mon, Sep 28, 2015 at 09:43:42AM -0400, Gavin Andresen wrote:
> On Mon, Sep 28, 2015 at 9:28 AM, Peter Todd <pete at petertodd.org> wrote:
> 
> > > 2) Mr. Todd (or somebody) needs to write up a risk/benefit security
> > > tradeoff analysis doo-hickey document and publish it. I'm reasonably
> > > confident that the risks to SPV nodes can be mitigated (e.g. by deploying
> > > mempool-only first, before the soft fork rolls out), but as somebody who
> > > has only been moderately paying attention, BETTER COMMUNICATION is
> > needed.
> > > What should SPV wallet authors be doing right now, if anything? Once the
> > > soft fork starts to roll out or activates, what do miners need to be
> > aware
> > > of? SPV wallet authors?
> >
> > Do you have such a document for your BIP101? That would save me a lot of
> > time, and the need for that kind of document is significantly higher
> > with BIP101 anyway.
> >
> 
> Hmmm?  When I asked YOU for that kind of security analysis document, you
> said you'd see if any of your clients would be willing to let you publish
> one you'd done in the past. Then I never heard back from you.

I don't remember what you are referring to at all. Was this a private
email? IRC chat? In person discussion?

> So, no, I don't have one for BIP 101, but unless you were lying and just
> trying to add Yet Another Hoop for BIP 101 to jump through, you should
> already have something to start from.

"unless you were lying"

Please keep the discussion on the development mailing list civil and
respectful.

> RE: mempool only: yes, pull-req 5000 satisfies (and that's what I was
> thinking of). There should be a nice, readable blog post explaining to
> other full node implementors and wallet implementors why that was done for
> Core and what they should do to follow 'best practices to be soft-fork
> ready.'

Actually, that sounds like the kind of thing that should be in the
bitcoin.org developer documentation; IMO for the audience of competent
full node developers the comments in the pull-req code itself and
associated discussion covers everything they need to know. Without that
background though, this is something that'd fit well in the category of
general education to get new developers to a good state of competence.

As for wallets specifically, that's pretty much all covered by SPV
wallets based on bitcoinj, and Mike Hearn has different views on the
subject which need to be resolved first.

-- 
'peter'[:-1]@petertodd.org
0000000000000000102f6eb0772c453a0ad0e10a6f720f41a7f008a7d329ef66
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 650 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150928/17258ef8/attachment.sig>

From hearn at vinumeris.com  Mon Sep 28 14:17:06 2015
From: hearn at vinumeris.com (Mike Hearn)
Date: Mon, 28 Sep 2015 16:17:06 +0200
Subject: [bitcoin-dev] Let's deploy BIP65 CHECKLOCKTIMEVERIFY!
In-Reply-To: <CADJgMzvCMPCto7fra+H=U3b9hCY7rCPDOV2DgOS4bLzz+PTLUg@mail.gmail.com>
References: <20150927185031.GA20599@savin.petertodd.org>
	<CA+w+GKRCVr-9TVk66utp7xLRgTxNpxYoj3XQE-6y_N8JS6eO6Q@mail.gmail.com>
	<CALqxMTFEme9gYHTAVVLtFc4JCK4hoBLXEhMCRdEXK9cWso_pUA@mail.gmail.com>
	<CA+w+GKQ8xos6S_BBMqZy6wieFCG=eNxahKXrx3mVKuZcxzjruw@mail.gmail.com>
	<CADJgMzvCMPCto7fra+H=U3b9hCY7rCPDOV2DgOS4bLzz+PTLUg@mail.gmail.com>
Message-ID: <CA+w+GKRK-_JQ3fEJFcO3t4Pr4HioWfqt-qbtFLxTSEnpLYnopA@mail.gmail.com>

>
> 2. As for SPV wallets need to handle awareness of the new blocks.
>

There is simply no need for any wallets to change. Making the spec a hard
fork instead of a soft fork means all existing software does the right
thing automatically.

To repeat, please bear in mind that bitcoinj is no longer the only SPV
wallet implementation. BreadWallet has its own code in Objective-C and is
the second most popular SPV implementation (and growing). Additionally,
bitcoinj is incorporated into lots of apps that'd have to have new versions
released, some of which don't have any way to force a user to update.

So it's not just my time you'd waste: it's lots of different people's.

One thing I haven't seen yet is the justification for why a soft fork
should be used here. There's no requirement that it be so, and there are
real downsides. As Eric said, the fact that the mechanism has issues is not
under dispute.

The normal justification for this it's that it's forwards compatible. But
that's not a justification, that's a description.

Re: XT, I already addressed this above.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150928/be6a8d45/attachment.html>

From pete at petertodd.org  Mon Sep 28 14:29:53 2015
From: pete at petertodd.org (Peter Todd)
Date: Mon, 28 Sep 2015 10:29:53 -0400
Subject: [bitcoin-dev] Let's deploy BIP65 CHECKLOCKTIMEVERIFY!
In-Reply-To: <CA+w+GKTCZDNVJ-XEmsCAWGXUV3xOzVYmqMQYm0x+ihyYWQN0Gg@mail.gmail.com>
References: <20150927185031.GA20599@savin.petertodd.org>
	<CA+w+GKRCVr-9TVk66utp7xLRgTxNpxYoj3XQE-6y_N8JS6eO6Q@mail.gmail.com>
	<20150928132127.GA4829@savin.petertodd.org>
	<CA+w+GKTCZDNVJ-XEmsCAWGXUV3xOzVYmqMQYm0x+ihyYWQN0Gg@mail.gmail.com>
Message-ID: <20150928142953.GC21815@savin.petertodd.org>

On Mon, Sep 28, 2015 at 03:41:56PM +0200, Mike Hearn wrote:
> >
> > 1) Do you agree that CLTV should be added to the Bitcoin protocol?
> >
> > Ignoring the question how exactly it is added, hard-fork or soft-fork.
> >
> 
> The opcode definition seems OK.

Good!

> > 2) Will you add a IsSuperMajority() CLTV soft-fork to Bitcoin XT if it
> >    is added to Bitcoin Core?
> >
> 
> Yes. It might be worth putting the version bit change behind a command line
> flag though: the BIP, as written, has problems (with deployment).

Could you elaborate on what exatly you mean by this.

> > 3) Will you add soft-fork detection to bitcoinj, to allow SPV clients to
> 
>    detect advertised soft-forks and correctly handle them?
> >
> 
> I'd really hate to do that. It'd be a Rube Goldberg machine:
> 
>    https://krypt3ia.files.wordpress.com/2011/11/rube.jpg
> 
> There's no really good way to do what you propose, and we already have a
> perfectly workable mechanism to tell SPV clients about chain forks: the
> block chain itself. This has the advantage of being already implemented,
> already deployed, and it works correctly.

SPV wallets can't detect hard-forks, so in both cases you will have
invalid blocks be accepted by SPV clients; there's no deployment
scenario for either hard or soft forks that guarantees all miners adopt
a fork.

What does prevent invalid blocks being accepted by SPV clients is
checking the block nVersion field and applying forking logic. Of course,
that only works for advertised forks, but again, that's equally true for
soft and hard forks.

> Attempting to strap a different mechanism on top to try and make soft forks
> more like hard forks would be a large and pointless waste of people's time
> and effort, not just mine (bitcoinj is not the only widely used SPV
> implementation nowadays). You may as well go straight to the correct
> outcome instead of trying to simulate it with ever more complex mechanisms.

Again, in neither case do you get the "correct outcome" of SPV clients
accepting no invalid blocks without nVersion field checking.

However, in the hard-fork case, because the non-adopting miners reject
the fork, they build a chain which could be used to attack SPV clients
with false confirmations by sybil attacking those clients. In the
soft-fork case, the non-adopting miners keep accepting the longer chain
built by the adopting miners, preventing the creation of a chain that
could be used to attack SPV miners.


BTW, what's the other widely used SPV implementation you're thinking of?
I'll contact them directly and help them implement proper SPV fork
protections if they haven't already; if bitcoinj is unwilling to do this
at least we could have an alternative implementation that does.
(equally, if anyone wants to fork bitcoinj and correct this flaw I'd be
happy to help advise)

-- 
'peter'[:-1]@petertodd.org
00000000000000000ca626374f25dadbbb9245e60563a4d876f3c73070ad3849
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 650 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150928/f7a49dbf/attachment.sig>

From hearn at vinumeris.com  Mon Sep 28 14:33:23 2015
From: hearn at vinumeris.com (Mike Hearn)
Date: Mon, 28 Sep 2015 16:33:23 +0200
Subject: [bitcoin-dev] Let's deploy BIP65 CHECKLOCKTIMEVERIFY!
In-Reply-To: <20150928142953.GC21815@savin.petertodd.org>
References: <20150927185031.GA20599@savin.petertodd.org>
	<CA+w+GKRCVr-9TVk66utp7xLRgTxNpxYoj3XQE-6y_N8JS6eO6Q@mail.gmail.com>
	<20150928132127.GA4829@savin.petertodd.org>
	<CA+w+GKTCZDNVJ-XEmsCAWGXUV3xOzVYmqMQYm0x+ihyYWQN0Gg@mail.gmail.com>
	<20150928142953.GC21815@savin.petertodd.org>
Message-ID: <CA+w+GKTUz2eVJOpixSebWiQ59ovoELNhsZWSsbLHXWqk2eCn0A@mail.gmail.com>

>
> SPV wallets can't detect hard-forks


They don't have to - they pick the highest work chain. Any miner who hasn't
upgraded makes blocks on the shorter chain that are then ignored (or
rather, stored for future reorgs). After the fork point, there won't be any
blocks in the main chain that violate the rules and end up being doomed to
being orphaned, which is the underlying problem.

And I think you know this already. There is no "flaw" in bitcoinj in this
respect. It works exactly as it was designed to work.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150928/10e73edb/attachment-0001.html>

From pete at petertodd.org  Mon Sep 28 14:43:18 2015
From: pete at petertodd.org (Peter Todd)
Date: Mon, 28 Sep 2015 10:43:18 -0400
Subject: [bitcoin-dev] Let's deploy BIP65 CHECKLOCKTIMEVERIFY!
In-Reply-To: <CA+w+GKTUz2eVJOpixSebWiQ59ovoELNhsZWSsbLHXWqk2eCn0A@mail.gmail.com>
References: <20150927185031.GA20599@savin.petertodd.org>
	<CA+w+GKRCVr-9TVk66utp7xLRgTxNpxYoj3XQE-6y_N8JS6eO6Q@mail.gmail.com>
	<20150928132127.GA4829@savin.petertodd.org>
	<CA+w+GKTCZDNVJ-XEmsCAWGXUV3xOzVYmqMQYm0x+ihyYWQN0Gg@mail.gmail.com>
	<20150928142953.GC21815@savin.petertodd.org>
	<CA+w+GKTUz2eVJOpixSebWiQ59ovoELNhsZWSsbLHXWqk2eCn0A@mail.gmail.com>
Message-ID: <20150928144318.GA28939@savin.petertodd.org>

On Mon, Sep 28, 2015 at 04:33:23PM +0200, Mike Hearn wrote:
> >
> > SPV wallets can't detect hard-forks
> 
> 
> They don't have to - they pick the highest work chain. Any miner who hasn't
> upgraded makes blocks on the shorter chain that are then ignored (or
> rather, stored for future reorgs). After the fork point, there won't be any
> blocks in the main chain that violate the rules and end up being doomed to
> being orphaned, which is the underlying problem.
> 
> And I think you know this already. There is no "flaw" in bitcoinj in this
> respect. It works exactly as it was designed to work.

Ok, so again, if that's your security criteria, what's the issue with
soft-forks? With soft-forks, the result of a SPV wallet following the
highest work chain is the same: eventually invalid blocks are reorged
out.

However, because soft-forks make it less likely that a long invalid
chain will be generated, an attacker sybil attacking your SPV wallet has
a much harder time tricking it into accepting a transaction. (they might
get one or two confirmations, rather than dozens)

What's the scenario where soft-forks are worse than hard-forks from a
SPV wallet's perspective?

-- 
'peter'[:-1]@petertodd.org
00000000000000000368227ec1de9c27c14d23cb7be9e9f38c0082db79a87c49
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 650 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150928/2e7816df/attachment.sig>

From hearn at vinumeris.com  Mon Sep 28 14:51:22 2015
From: hearn at vinumeris.com (Mike Hearn)
Date: Mon, 28 Sep 2015 16:51:22 +0200
Subject: [bitcoin-dev] Let's deploy BIP65 CHECKLOCKTIMEVERIFY!
In-Reply-To: <20150928144318.GA28939@savin.petertodd.org>
References: <20150927185031.GA20599@savin.petertodd.org>
	<CA+w+GKRCVr-9TVk66utp7xLRgTxNpxYoj3XQE-6y_N8JS6eO6Q@mail.gmail.com>
	<20150928132127.GA4829@savin.petertodd.org>
	<CA+w+GKTCZDNVJ-XEmsCAWGXUV3xOzVYmqMQYm0x+ihyYWQN0Gg@mail.gmail.com>
	<20150928142953.GC21815@savin.petertodd.org>
	<CA+w+GKTUz2eVJOpixSebWiQ59ovoELNhsZWSsbLHXWqk2eCn0A@mail.gmail.com>
	<20150928144318.GA28939@savin.petertodd.org>
Message-ID: <CA+w+GKSuO2v+92hJUckcYdHcjkPVNg4opDL98yygGp-gqB9Jtg@mail.gmail.com>

>
> Ok, so again, if that's your security criteria, what's the issue
> with soft-forks?


Please read my article as it's all explained there.

But to reiterate: the risk is that miners will build invalid blocks on top
of the best work chain, instead of an ignored lower work side chain. This
opens users to payment fraud. With a hard fork, all the blocks by miners
that aren't checking all the rules anymore get neatly collected together on
a side chain after the split, and wallets all know how to ignore that chain.

Yes, you made OP_NOPs be non-standard. So out of the box, miners won't
create invalid blocks, as long as they're running Core past that version.
But this makes the IsStandard function very much like a part of the
consensus rules, as bypassing it can result in invalid blocks being
created. Miners have always understood that they can modify this function,
or even bypass it entirely, without affecting the validity of their blocks.
And some miners do exactly that.

So I'll repeat the question that I posed before - given that there are
clear, explicit downsides, what is the purpose of doing things this way?
Where is the gain for ordinary Bitcoin users?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150928/7c9e36e4/attachment.html>

From pete at petertodd.org  Mon Sep 28 15:05:43 2015
From: pete at petertodd.org (Peter Todd)
Date: Mon, 28 Sep 2015 11:05:43 -0400
Subject: [bitcoin-dev] Let's deploy BIP65 CHECKLOCKTIMEVERIFY!
In-Reply-To: <CA+w+GKSuO2v+92hJUckcYdHcjkPVNg4opDL98yygGp-gqB9Jtg@mail.gmail.com>
References: <20150927185031.GA20599@savin.petertodd.org>
	<CA+w+GKRCVr-9TVk66utp7xLRgTxNpxYoj3XQE-6y_N8JS6eO6Q@mail.gmail.com>
	<20150928132127.GA4829@savin.petertodd.org>
	<CA+w+GKTCZDNVJ-XEmsCAWGXUV3xOzVYmqMQYm0x+ihyYWQN0Gg@mail.gmail.com>
	<20150928142953.GC21815@savin.petertodd.org>
	<CA+w+GKTUz2eVJOpixSebWiQ59ovoELNhsZWSsbLHXWqk2eCn0A@mail.gmail.com>
	<20150928144318.GA28939@savin.petertodd.org>
	<CA+w+GKSuO2v+92hJUckcYdHcjkPVNg4opDL98yygGp-gqB9Jtg@mail.gmail.com>
Message-ID: <20150928150543.GB28939@savin.petertodd.org>

On Mon, Sep 28, 2015 at 04:51:22PM +0200, Mike Hearn wrote:
> >
> > Ok, so again, if that's your security criteria, what's the issue
> > with soft-forks?
> 
> 
> Please read my article as it's all explained there.

I have read your article. In fact we reviewed it at a NY BitDevs meetup
that I attended.

> But to reiterate: the risk is that miners will build invalid blocks on top
> of the best work chain, instead of an ignored lower work side chain. This
> opens users to payment fraud. With a hard fork, all the blocks by miners
> that aren't checking all the rules anymore get neatly collected together on
> a side chain after the split, and wallets all know how to ignore that chain.

Can you explain exactly how you think wallets will "know" how to ignore
the invalid chain?

With an advertised soft-fork, e.g. the IsSuperMajority() mechanism,
ignoring the invalid chain is easy: use nVersion to detect invalid
blocks when you know what soft-forks are coming up, and if presented
with an unknown - but advertised - soft-fork at minimum loudly warn the
user. In the case of a hard-fork identical logic can be used. (BIP101
being an example of a hard-fork triggered in a way that can be detected
by SPV clients, both explicitly (BIP101 specific) and implicitly
(general unknown block nVersion warnings))

> Yes, you made OP_NOPs be non-standard. So out of the box, miners won't
> create invalid blocks, as long as they're running Core past that version.
> But this makes the IsStandard function very much like a part of the
> consensus rules, as bypassing it can result in invalid blocks being
> created.

How so? Miners can always choose to create invalid blocks, thus
attacking SPV wallets; my statement with regard to pull-req #5000 comes
from a risk-based approach, knowing that every invalid block is
expensive and the new concern created by a soft-fork is whether or not
miners will create them accidentally; miners can always create invalid
blocks delibrately.

> Miners have always understood that they can modify this function,
> or even bypass it entirely, without affecting the validity of their blocks.
> And some miners do exactly that.

That's incorrect: Miners bypassing IsStandard() risk creating invalid
blocks in the event of a soft-fork. Equally, we design soft-forks to
take advantage of this.

> So I'll repeat the question that I posed before - given that there are
> clear, explicit downsides, what is the purpose of doing things this way?
> Where is the gain for ordinary Bitcoin users?

We seem to be in strong disagreement about which option has "clear,
explicit downsides"

-- 
'peter'[:-1]@petertodd.org
0000000000000000006f2abe95e361b73289e4a79ba3124801896f6b7dc8d977
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 650 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150928/36509171/attachment.sig>

From hearn at vinumeris.com  Mon Sep 28 15:38:28 2015
From: hearn at vinumeris.com (Mike Hearn)
Date: Mon, 28 Sep 2015 17:38:28 +0200
Subject: [bitcoin-dev] Let's deploy BIP65 CHECKLOCKTIMEVERIFY!
In-Reply-To: <20150928150543.GB28939@savin.petertodd.org>
References: <20150927185031.GA20599@savin.petertodd.org>
	<CA+w+GKRCVr-9TVk66utp7xLRgTxNpxYoj3XQE-6y_N8JS6eO6Q@mail.gmail.com>
	<20150928132127.GA4829@savin.petertodd.org>
	<CA+w+GKTCZDNVJ-XEmsCAWGXUV3xOzVYmqMQYm0x+ihyYWQN0Gg@mail.gmail.com>
	<20150928142953.GC21815@savin.petertodd.org>
	<CA+w+GKTUz2eVJOpixSebWiQ59ovoELNhsZWSsbLHXWqk2eCn0A@mail.gmail.com>
	<20150928144318.GA28939@savin.petertodd.org>
	<CA+w+GKSuO2v+92hJUckcYdHcjkPVNg4opDL98yygGp-gqB9Jtg@mail.gmail.com>
	<20150928150543.GB28939@savin.petertodd.org>
Message-ID: <CA+w+GKTPKxGWWN28_hzR8BoCh11exvgZm4s-_=5oFWd-R62uyA@mail.gmail.com>

>
> Can you explain exactly how you think wallets will "know" how to ignore
> the invalid chain?
>

I'm confused - I already said this. For a fork to work, hard or soft, there
must be support from a majority of the hash power.

Therefore, the usual SPV technique of following the highest work chain
results in ignoring the minority chain produced by the hard fork.

BIP 101 is SPV friendly because the wallets would simply follow the 75%
chain and never even be aware anything has changed. It's backwards
compatible with them in this respect: they already know how to ignore the
no-bigger-blocks fork that'd be created if some miners didn't upgrade
during the grace period.

My point about IsStandard is that miners can and do bypass it, without
expecting that to carry financial consequences or lower the security of
other users. By making it so a block which includes non-standard
transactions can end up being seen as invalid, you are increasing the risk
of accidents that carry financial consequences.

That's incorrect: Miners bypassing IsStandard() risk creating invalid
> blocks in the event of a soft-fork. Equally, we design soft-forks to
> take advantage of this.
>

Gah. You repeated what I just said. Yes, I know miners face that risk, my
point is that they do NOT face such a risk when there's no soft fork in
action and have historically NOT faced that risk at all, hence the
widespread practice of bypassing or modifying this function.

All this approach does is make changing IsStandard() the same as changing
AcceptBlock(), except without the advantage of telling anyone about it.


> > So I'll repeat the question that I posed before - given that there are
> > clear, explicit downsides, what is the purpose of doing things this way?
> > Where is the gain for ordinary Bitcoin users?
>
> We seem to be in strong disagreement about which option has "clear,
> explicit downsides"


Obviously. So please enlighten me.

How do ordinary Bitcoin users benefit from this rollout strategy? Put
simply, what is the point of this whole complex soft fork endeavour?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150928/37024596/attachment.html>

From jl2012 at xbt.hk  Mon Sep 28 16:52:51 2015
From: jl2012 at xbt.hk (jl2012 at xbt.hk)
Date: Mon, 28 Sep 2015 12:52:51 -0400
Subject: [bitcoin-dev] Let's deploy BIP65 CHECKLOCKTIMEVERIFY!
In-Reply-To: <CA+w+GKTPKxGWWN28_hzR8BoCh11exvgZm4s-_=5oFWd-R62uyA@mail.gmail.com>
References: <20150927185031.GA20599@savin.petertodd.org>
	<CA+w+GKRCVr-9TVk66utp7xLRgTxNpxYoj3XQE-6y_N8JS6eO6Q@mail.gmail.com>
	<20150928132127.GA4829@savin.petertodd.org>
	<CA+w+GKTCZDNVJ-XEmsCAWGXUV3xOzVYmqMQYm0x+ihyYWQN0Gg@mail.gmail.com>
	<20150928142953.GC21815@savin.petertodd.org>
	<CA+w+GKTUz2eVJOpixSebWiQ59ovoELNhsZWSsbLHXWqk2eCn0A@mail.gmail.com>
	<20150928144318.GA28939@savin.petertodd.org>
	<CA+w+GKSuO2v+92hJUckcYdHcjkPVNg4opDL98yygGp-gqB9Jtg@mail.gmail.com>
	<20150928150543.GB28939@savin.petertodd.org>
	<CA+w+GKTPKxGWWN28_hzR8BoCh11exvgZm4s-_=5oFWd-R62uyA@mail.gmail.com>
Message-ID: <8461c6195ca65ce7355f693fa24bb177@xbt.hk>

Mike Hearn via bitcoin-dev ? 2015-09-28 11:38 ??:

> My point about IsStandard is that miners can and do bypass it,
> without expecting that to carry financial consequences or lower the
> security of other users. By making it so a block which includes
> non-standard transactions can end up being seen as invalid, you are
> increasing the risk of accidents that carry financial consequences.

Bypassing IsStandard should be considered as an "expert mode". The 
message should be "don't bypass it unless you understand what you are 
doing".

By the way, miners are PAID to protect the network. It is their greatest 
responsibility to follow the development and keep their software up to 
date.



> How do ordinary Bitcoin users benefit from this rollout strategy? Put
> simply, what is the point of this whole complex soft fork endeavour?

Let me try to answer this question. Softfork is beneficial to non-mining 
full nodes as they will follow the majority chain. In the case of a 
hardfork (e.g. BIP101), non-upgrading full nodes will insist to follow 
the minority chain. (unless you believe that all non-miner should use an 
SPV client)

Put it in a different angle. In a softfork, the new fork is a persistent 
95% attack against the old fork, which will force all in-cooperating 
miners to join (or leave). In a hardfork, however, there is no mechanism 
to stop the old fork and we may have 2 chains co-exist for a long time.

Although it is not mentioned in the whitepaper, the ability to softfork 
is a feature of Bitcoin. Otherwise, we won't have these OP_NOPs and the 
original OP_RETURN.

From hearn at vinumeris.com  Mon Sep 28 17:14:15 2015
From: hearn at vinumeris.com (Mike Hearn)
Date: Mon, 28 Sep 2015 19:14:15 +0200
Subject: [bitcoin-dev] Let's deploy BIP65 CHECKLOCKTIMEVERIFY!
In-Reply-To: <8461c6195ca65ce7355f693fa24bb177@xbt.hk>
References: <20150927185031.GA20599@savin.petertodd.org>
	<CA+w+GKRCVr-9TVk66utp7xLRgTxNpxYoj3XQE-6y_N8JS6eO6Q@mail.gmail.com>
	<20150928132127.GA4829@savin.petertodd.org>
	<CA+w+GKTCZDNVJ-XEmsCAWGXUV3xOzVYmqMQYm0x+ihyYWQN0Gg@mail.gmail.com>
	<20150928142953.GC21815@savin.petertodd.org>
	<CA+w+GKTUz2eVJOpixSebWiQ59ovoELNhsZWSsbLHXWqk2eCn0A@mail.gmail.com>
	<20150928144318.GA28939@savin.petertodd.org>
	<CA+w+GKSuO2v+92hJUckcYdHcjkPVNg4opDL98yygGp-gqB9Jtg@mail.gmail.com>
	<20150928150543.GB28939@savin.petertodd.org>
	<CA+w+GKTPKxGWWN28_hzR8BoCh11exvgZm4s-_=5oFWd-R62uyA@mail.gmail.com>
	<8461c6195ca65ce7355f693fa24bb177@xbt.hk>
Message-ID: <CA+w+GKRcUYsKzG8n5ut-ObD1MM9bs0OD-jdHe1+cLkcO6B7wKg@mail.gmail.com>

>
> Let me try to answer this question. Softfork is beneficial to non-mining
> full nodes as they will follow the majority chain.


That is not a benefit. That is a description of what the software will do,
but not why you would want it.

In case this seems like a pedantic point, consider the consequences of
following a chain you aren't checking properly. You get SPV level security
and might calculate a corrupted ledger.

In the case of P2SH, I could make a transaction that spends someone elses
money to myself. In the case of CLTV, I could ignore the locktime
requirement.

Now yes, eventually, the miner majority will correct and uncorrupt your
ledger for you. But by then it might be too late, you may have already
acted upon the incorrect data by e.g. selling me lots of stuff that I paid
for with somebody else's coins. If you don't care about that risk, hey,
switch to an SPV wallet and save yourself a lot of disk space.


> In a hardfork, however, there is no mechanism to stop the old fork and we
> may have 2 chains co-exist for a long time.
>

There isn't any difference in how long the divergent state exists for. That
depends only on how fast people upgrade, which is unaffected by the rollout
strategy used.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150928/345ac195/attachment.html>

From laanwj at gmail.com  Mon Sep 28 18:26:14 2015
From: laanwj at gmail.com (Wladimir J. van der Laan)
Date: Mon, 28 Sep 2015 20:26:14 +0200
Subject: [bitcoin-dev] 2015-09-24 #bitcoin-dev Weekly Development
 Meeting Minutes
In-Reply-To: <CAHpxFbGa_4VRDyQJJYVXScWdg6KQOJnb-XdZ30NAvFbouhLHrQ@mail.gmail.com>
References: <CAHpxFbGa_4VRDyQJJYVXScWdg6KQOJnb-XdZ30NAvFbouhLHrQ@mail.gmail.com>
Message-ID: <20150928182613.GB24553@amethyst.visucore.com>

Hello Daniel,

On Thu, Sep 24, 2015 at 05:29:02PM -0700, Daniel Stadulis via bitcoin-dev wrote:
> If you weren't able to attend the first, weekly development meeting, the
> following are the minutes:

Thanks for writing up the meeting minutes and posting them to the list!

We should probably put them on the wiki, as well.

Wladimir


From odinn.cyberguerrilla at riseup.net  Mon Sep 28 21:12:03 2015
From: odinn.cyberguerrilla at riseup.net (odinn)
Date: Mon, 28 Sep 2015 21:12:03 +0000
Subject: [bitcoin-dev] Let's deploy BIP65 CHECKLOCKTIMEVERIFY!
In-Reply-To: <CALqxMTFEme9gYHTAVVLtFc4JCK4hoBLXEhMCRdEXK9cWso_pUA@mail.gmail.com>
References: <20150927185031.GA20599@savin.petertodd.org>	<CA+w+GKRCVr-9TVk66utp7xLRgTxNpxYoj3XQE-6y_N8JS6eO6Q@mail.gmail.com>
	<CALqxMTFEme9gYHTAVVLtFc4JCK4hoBLXEhMCRdEXK9cWso_pUA@mail.gmail.com>
Message-ID: <5609AD23.4070305@riseup.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512

And still no movement on BIP 63...

https://bitcointalk.org/index.php?topic=1083961.20

Apart from that,

All my prior objections to XT still hold as expressed on this list.
XT is not acceptable.

On the topic of consensus:

Reaching consensus, I hope, is something that developers can
accomplish by refining and adjusting the BIPS and coming to agreement
upon them.  This should be something that can be done in a few months
time, before the end of the year.

Cheers,

- - O

Adam Back via bitcoin-dev:
> I wonder what Gavin's views are, he's usually constructive, and see
> if he'll include it in XT - I think he may have said he was
> supportive.
> 
> The rationale for soft vs hard-forks is well known, so I wont go
> over them.
> 
> Adam
> 
> 
> On 28 September 2015 at 06:48, Mike Hearn via bitcoin-dev 
> <bitcoin-dev at lists.linuxfoundation.org> wrote:
>> There is no consensus on using a soft fork to deploy this
>> feature. It will result in the same problems as all the other
>> soft forks - SPV wallets will become less reliable during the
>> rollout period. I am against that, as it's entirely avoidable.
>> 
>> Make it a hard fork and my objection will be dropped.
>> 
>> Until then, as there is no consensus, you need to do one of two
>> things:
>> 
>> 1) Drop the "everyone must agree to make changes" idea that
>> people here like to peddle, and do it loudly, so everyone in the
>> community is correctly informed
>> 
>> 2) Do nothing
>> 
>> 
>> 
>> _______________________________________________ bitcoin-dev
>> mailing list bitcoin-dev at lists.linuxfoundation.org 
>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>> 
> _______________________________________________ bitcoin-dev mailing
> list bitcoin-dev at lists.linuxfoundation.org 
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> 

- -- 
http://abis.io ~
"a protocol concept to enable decentralization
and expansion of a giving economy, and a new social good"
https://keybase.io/odinn
-----BEGIN PGP SIGNATURE-----

iQEcBAEBCgAGBQJWCa0jAAoJEGxwq/inSG8CuCUIALiRt6cE3b+9f+l9m6aMTjIR
vTEIM/7B4dIZW9eatXmkxyd44uz5YoN93SlZtV62c90HCqqpFRBCfyXRyXzQ11E7
0i70or5LnWDOqrD1bSsCEdrQxPIpAQnv101UHe3iyn/uHAVBiz/HfqvGMruNt0r1
4sMecp+LedWpy6/p9c6iMHV1rhtYRfmRfJHj+9KlSn+in5PQKx2kieWqpfqjmlNs
J/UNoLvRuF0YxDcqEdp2BAaI0s+NyXBo3YDi4R77U9YPRj/cYuWHh/yPKAvFW+2K
0d9NNuKSKEY/m4uW3ghPEJL7OxlGbOoNWFS3kcKYr+BanfsPTov7yHQhBuRBRPw=
=hd0W
-----END PGP SIGNATURE-----

From dscotese at litmocracy.com  Mon Sep 28 22:16:42 2015
From: dscotese at litmocracy.com (Dave Scotese)
Date: Mon, 28 Sep 2015 15:16:42 -0700
Subject: [bitcoin-dev] Let's deploy BIP65 CHECKLOCKTIMEVERIFY!
In-Reply-To: <5609AD23.4070305@riseup.net>
References: <20150927185031.GA20599@savin.petertodd.org>
	<CA+w+GKRCVr-9TVk66utp7xLRgTxNpxYoj3XQE-6y_N8JS6eO6Q@mail.gmail.com>
	<CALqxMTFEme9gYHTAVVLtFc4JCK4hoBLXEhMCRdEXK9cWso_pUA@mail.gmail.com>
	<5609AD23.4070305@riseup.net>
Message-ID: <CAGLBAhf+9QozWETTd9MS8jP811f9AJxJiAk10orGK8-ZihahqQ@mail.gmail.com>

Why are they called soft forks when they are really hidden forks?  Isn't
the point of a soft fork to prevent old clients from rejecting what they
don't have the code to validate?  That seems dangerous.

notplato

On Mon, Sep 28, 2015 at 2:12 PM, odinn via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA512
>
> And still no movement on BIP 63...
>
> https://bitcointalk.org/index.php?topic=1083961.20
>
> Apart from that,
>
> All my prior objections to XT still hold as expressed on this list.
> XT is not acceptable.
>
> On the topic of consensus:
>
> Reaching consensus, I hope, is something that developers can
> accomplish by refining and adjusting the BIPS and coming to agreement
> upon them.  This should be something that can be done in a few months
> time, before the end of the year.
>
> Cheers,
>
> - - O
>
> Adam Back via bitcoin-dev:
> > I wonder what Gavin's views are, he's usually constructive, and see
> > if he'll include it in XT - I think he may have said he was
> > supportive.
> >
> > The rationale for soft vs hard-forks is well known, so I wont go
> > over them.
> >
> > Adam
> >
> >
> > On 28 September 2015 at 06:48, Mike Hearn via bitcoin-dev
> > <bitcoin-dev at lists.linuxfoundation.org> wrote:
> >> There is no consensus on using a soft fork to deploy this
> >> feature. It will result in the same problems as all the other
> >> soft forks - SPV wallets will become less reliable during the
> >> rollout period. I am against that, as it's entirely avoidable.
> >>
> >> Make it a hard fork and my objection will be dropped.
> >>
> >> Until then, as there is no consensus, you need to do one of two
> >> things:
> >>
> >> 1) Drop the "everyone must agree to make changes" idea that
> >> people here like to peddle, and do it loudly, so everyone in the
> >> community is correctly informed
> >>
> >> 2) Do nothing
> >>
> >>
> >>
> >> _______________________________________________ bitcoin-dev
> >> mailing list bitcoin-dev at lists.linuxfoundation.org
> >> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> >>
> > _______________________________________________ bitcoin-dev mailing
> > list bitcoin-dev at lists.linuxfoundation.org
> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> >
>
> - --
> http://abis.io ~
> "a protocol concept to enable decentralization
> and expansion of a giving economy, and a new social good"
> https://keybase.io/odinn
> -----BEGIN PGP SIGNATURE-----
>
> iQEcBAEBCgAGBQJWCa0jAAoJEGxwq/inSG8CuCUIALiRt6cE3b+9f+l9m6aMTjIR
> vTEIM/7B4dIZW9eatXmkxyd44uz5YoN93SlZtV62c90HCqqpFRBCfyXRyXzQ11E7
> 0i70or5LnWDOqrD1bSsCEdrQxPIpAQnv101UHe3iyn/uHAVBiz/HfqvGMruNt0r1
> 4sMecp+LedWpy6/p9c6iMHV1rhtYRfmRfJHj+9KlSn+in5PQKx2kieWqpfqjmlNs
> J/UNoLvRuF0YxDcqEdp2BAaI0s+NyXBo3YDi4R77U9YPRj/cYuWHh/yPKAvFW+2K
> 0d9NNuKSKEY/m4uW3ghPEJL7OxlGbOoNWFS3kcKYr+BanfsPTov7yHQhBuRBRPw=
> =hd0W
> -----END PGP SIGNATURE-----
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150928/fd9d5a38/attachment.html>

From jtimon at jtimon.cc  Mon Sep 28 23:17:15 2015
From: jtimon at jtimon.cc (=?UTF-8?B?Sm9yZ2UgVGltw7Nu?=)
Date: Tue, 29 Sep 2015 01:17:15 +0200
Subject: [bitcoin-dev] Let's deploy BIP65 CHECKLOCKTIMEVERIFY!
In-Reply-To: <CA+w+GKRcUYsKzG8n5ut-ObD1MM9bs0OD-jdHe1+cLkcO6B7wKg@mail.gmail.com>
References: <20150927185031.GA20599@savin.petertodd.org>
	<CA+w+GKRCVr-9TVk66utp7xLRgTxNpxYoj3XQE-6y_N8JS6eO6Q@mail.gmail.com>
	<20150928132127.GA4829@savin.petertodd.org>
	<CA+w+GKTCZDNVJ-XEmsCAWGXUV3xOzVYmqMQYm0x+ihyYWQN0Gg@mail.gmail.com>
	<20150928142953.GC21815@savin.petertodd.org>
	<CA+w+GKTUz2eVJOpixSebWiQ59ovoELNhsZWSsbLHXWqk2eCn0A@mail.gmail.com>
	<20150928144318.GA28939@savin.petertodd.org>
	<CA+w+GKSuO2v+92hJUckcYdHcjkPVNg4opDL98yygGp-gqB9Jtg@mail.gmail.com>
	<20150928150543.GB28939@savin.petertodd.org>
	<CA+w+GKTPKxGWWN28_hzR8BoCh11exvgZm4s-_=5oFWd-R62uyA@mail.gmail.com>
	<8461c6195ca65ce7355f693fa24bb177@xbt.hk>
	<CA+w+GKRcUYsKzG8n5ut-ObD1MM9bs0OD-jdHe1+cLkcO6B7wKg@mail.gmail.com>
Message-ID: <CABm2gDrcrtZLQE8Q9ZuxsWEfD_mFhdBz36x3RCPrQtbBi1455A@mail.gmail.com>

On Sep 28, 2015 7:14 PM, "Mike Hearn via bitcoin-dev" <
bitcoin-dev at lists.linuxfoundation.org> wrote:
>> In a hardfork, however, there is no mechanism to stop the old fork and
we may have 2 chains co-exist for a long time.
>
>
> There isn't any difference in how long the divergent state exists for.
That depends only on how fast people upgrade, which is unaffected by the
rollout strategy used.
>

Yes, there is a difference. Assuming the hashrate majority upgrades, in the
case of a softfork non-upgraded miners will try to build on top of the
longest chain (the upgraded one) but their blocks will get consistently
orphaned for having a too old block version (and if they just increment the
version without implementing the new restrictions, then their blocks will
be orphaned when they fail to enforce the new restrictions). In the case of
a hardfork, the non-upgraded miners will keep on building their own longest
valid chain (the upgraded chain is not valid in their eyes), potentially
forever.
That's not to say softforks are always preferrable. There's cases when a
feature can be implemented as a softfork or a hardfork, but the softfork
solution is clearly inferior and introduces technical debt.
In those cases I prefer a hardfork, but this is not one of those cases.

In any case, maybe you want to provide some feedback to bip99, which is
about possible consensus rule changes scenarios and a recommended
deployment path for each of them (softforks and hardforks are subdivided in
several types). This discussion about the general desirability of softforks
seems offtopic for the concrete cltv deployment discussion, which assumes
softforks as deployment mechanism (just like bip66 assumed it).
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150929/66e45ae4/attachment-0001.html>

From nharan81 at gmail.com  Tue Sep 29 05:47:04 2015
From: nharan81 at gmail.com (Neil Haran)
Date: Mon, 28 Sep 2015 22:47:04 -0700
Subject: [bitcoin-dev] Bitcoin mining idea
In-Reply-To: <CA+et0t4VmHWJZmast+VbmYsZGihX2qcvagOR+aqx7R+DGOfTrA@mail.gmail.com>
References: <CA+9tygJVkaxegAGjpFA_MutU-xChgS5FK4+JKAR=14k0Ctbm8g@mail.gmail.com>
	<CA+et0t4VmHWJZmast+VbmYsZGihX2qcvagOR+aqx7R+DGOfTrA@mail.gmail.com>
Message-ID: <CA+9tygLp+-Yc35hZw_NfV7Xkjgo7Xs6TH8WRJMar1o8=FiieyA@mail.gmail.com>

My apologies Lauri!

Here is the idea:

I want to build a massive rock paper scissors tournament, the largest the
world has ever seen and one that no one can stop. I imagine re-purposing
bitcoin-qt to do this.

Imagine a tournament like the World Series of Poker, but for RPS.

Each person plays a best of 5 tournament each round. The players are
randomly matched against each other. The number of rounds would effectively
be the depth of a binary tree...

So if a million people play in this tournament, you would need to win 20
rounds to win the tournament and the cash prize.

Now, I will supply this cash prize and I have media connections to get
coverage for this. I fully believe I could get millions playing in this.

Thanks,
Neil


On Mon, Sep 28, 2015 at 6:33 AM, Lauri Love <lauri.love at gmail.com> wrote:

> Don't solicit interest in advance of content, please. Share your idea
> first and if people find it cogent and interesting they will volunteer
> interest/assistance.
>
> On 27 September 2015 at 18:53, Neil Haran via bitcoin-dev
> <bitcoin-dev at lists.linuxfoundation.org> wrote:
> > Hi,
> >
> > I have an idea for a gamified bitcoin mining app that I'd like to partner
> > with someone on that is very good with cryptography and knows the bitcoin
> > code base well. I have received interest in this from some, but I'm
> looking
> > for the ideal candidate to work with. If this is of interest, please
> email
> > me at nharan81 at gmail.com.
> >
> > Thanks,
> > Neil
> >
> > _______________________________________________
> > bitcoin-dev mailing list
> > bitcoin-dev at lists.linuxfoundation.org
> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> >
>
>
>
> --
> [Any text in this message is copyrighted to the full extent of the law
> in all jurisdictions with the following license: it may be read and
> stored or used to create derivative works by any person or
> organization with the following exceptions: all law-enforcement
> organizations, all national intelligence services, all corporate
> entities that monitize personal information. Any violations of this
> license with be prosecuted relentlessly and the highest possible
> damages sought.]
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150928/7b561b51/attachment.html>

From trevinhofmann at gmail.com  Tue Sep 29 05:56:31 2015
From: trevinhofmann at gmail.com (Trevin Hofmann)
Date: Tue, 29 Sep 2015 00:56:31 -0500
Subject: [bitcoin-dev] Bitcoin mining idea
In-Reply-To: <CA+9tygLp+-Yc35hZw_NfV7Xkjgo7Xs6TH8WRJMar1o8=FiieyA@mail.gmail.com>
References: <CA+9tygJVkaxegAGjpFA_MutU-xChgS5FK4+JKAR=14k0Ctbm8g@mail.gmail.com>
	<CA+et0t4VmHWJZmast+VbmYsZGihX2qcvagOR+aqx7R+DGOfTrA@mail.gmail.com>
	<CA+9tygLp+-Yc35hZw_NfV7Xkjgo7Xs6TH8WRJMar1o8=FiieyA@mail.gmail.com>
Message-ID: <CALd2G5fUHbjrVAiOpLb=KwkQ4_Z-BoOsg6RNARexddaUZkvPmQ@mail.gmail.com>

This is quite off topic, so please consider another channel. As long as you
have my attention, I previously started a cryptographically secure RPS game
as a proof of concept.

https://github.com/thofmann/rock-paper-scissors-protocol-secure/blob/master/readme.md

Unfortunately, I do not have the time to develop it at the moment, but you
can message me off the channel if you would like to discuss things further.

Thank you,
Trevin Hofmann
On Sep 29, 2015 12:47 AM, "Neil Haran via bitcoin-dev" <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> My apologies Lauri!
>
> Here is the idea:
>
> I want to build a massive rock paper scissors tournament, the largest the
> world has ever seen and one that no one can stop. I imagine re-purposing
> bitcoin-qt to do this.
>
> Imagine a tournament like the World Series of Poker, but for RPS.
>
> Each person plays a best of 5 tournament each round. The players are
> randomly matched against each other. The number of rounds would effectively
> be the depth of a binary tree...
>
> So if a million people play in this tournament, you would need to win 20
> rounds to win the tournament and the cash prize.
>
> Now, I will supply this cash prize and I have media connections to get
> coverage for this. I fully believe I could get millions playing in this.
>
> Thanks,
> Neil
>
>
> On Mon, Sep 28, 2015 at 6:33 AM, Lauri Love <lauri.love at gmail.com> wrote:
>
>> Don't solicit interest in advance of content, please. Share your idea
>> first and if people find it cogent and interesting they will volunteer
>> interest/assistance.
>>
>> On 27 September 2015 at 18:53, Neil Haran via bitcoin-dev
>> <bitcoin-dev at lists.linuxfoundation.org> wrote:
>> > Hi,
>> >
>> > I have an idea for a gamified bitcoin mining app that I'd like to
>> partner
>> > with someone on that is very good with cryptography and knows the
>> bitcoin
>> > code base well. I have received interest in this from some, but I'm
>> looking
>> > for the ideal candidate to work with. If this is of interest, please
>> email
>> > me at nharan81 at gmail.com.
>> >
>> > Thanks,
>> > Neil
>> >
>> > _______________________________________________
>> > bitcoin-dev mailing list
>> > bitcoin-dev at lists.linuxfoundation.org
>> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>> >
>>
>>
>>
>> --
>> [Any text in this message is copyrighted to the full extent of the law
>> in all jurisdictions with the following license: it may be read and
>> stored or used to create derivative works by any person or
>> organization with the following exceptions: all law-enforcement
>> organizations, all national intelligence services, all corporate
>> entities that monitize personal information. Any violations of this
>> license with be prosecuted relentlessly and the highest possible
>> damages sought.]
>>
>
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150929/081a598a/attachment.html>

From roy at osherove.com  Tue Sep 29 06:09:36 2015
From: roy at osherove.com (Roy Osherove)
Date: Mon, 28 Sep 2015 23:09:36 -0700
Subject: [bitcoin-dev] Build: win64: Package 'mingw-w64-dev' has no
 installation candidate
In-Reply-To: <CAO+PtjsaRf2Ur7nj0EwMG7maMfTGe0KG60qLGOnkTyiMwv_0tg@mail.gmail.com>
References: <CAO+PtjsaRf2Ur7nj0EwMG7maMfTGe0KG60qLGOnkTyiMwv_0tg@mail.gmail.com>
Message-ID: <CAAMhxnxWckT-OAHJ=bQ=H0UxRehH0fHKV4T2tq2gNgAMzBUuKw@mail.gmail.com>

Ah, I didn't notice, thanks!

On Mon, Sep 28, 2015 at 7:23 PM, Joseph Bisch <joseph.bisch at gmail.com>
wrote:

> Hi Roy,
>
> It looks like your TeamCity setup is using Ubuntu Trusty to perform
> the build. Travis CI is using Ubuntu Precise instead[0]. The
> mingw-w64-dev package is only available in Precise[1]. It looks like
> that package was split into mingw-w64-x86-64-dev and
> mingw-w64-i686-dev, so those are what have to be used with Ubuntu
> Trusty.
>
> [0] - http://docs.travis-ci.com/user/ci-environment/
> [1] - http://packages.ubuntu.com/precise/mingw-w64-dev
> [2] - http://packages.ubuntu.com/trusty/mingw-w64-x86-64-dev
> [3] - http://packages.ubuntu.com/trusty/mingw-w64-i686-dev
>
> Cheers,
> Joseph
>



-- 
Thanks,

Roy Osherove

   - *@RoyOsherove* <https://twitter.com/RoyOsherove>
   - Read my new book *Notes to a Software Team Leader
<http://TeamLeadSkills.com>*
   - Or *my new course* about Beautiful Builds <http://courses.osherove.com>
and Continuous Delivery
   - +1-201-256-5575
    - Timezone: Eastern Standard Time (New York)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150928/a1c50156/attachment.html>

From milly at bitcoins.info  Tue Sep 29 06:13:18 2015
From: milly at bitcoins.info (Milly Bitcoin)
Date: Tue, 29 Sep 2015 02:13:18 -0400
Subject: [bitcoin-dev] Bitcoin mining idea
In-Reply-To: <CALd2G5fUHbjrVAiOpLb=KwkQ4_Z-BoOsg6RNARexddaUZkvPmQ@mail.gmail.com>
References: <CA+9tygJVkaxegAGjpFA_MutU-xChgS5FK4+JKAR=14k0Ctbm8g@mail.gmail.com>
	<CA+et0t4VmHWJZmast+VbmYsZGihX2qcvagOR+aqx7R+DGOfTrA@mail.gmail.com>
	<CA+9tygLp+-Yc35hZw_NfV7Xkjgo7Xs6TH8WRJMar1o8=FiieyA@mail.gmail.com>
	<CALd2G5fUHbjrVAiOpLb=KwkQ4_Z-BoOsg6RNARexddaUZkvPmQ@mail.gmail.com>
Message-ID: <560A2BFE.3080104@bitcoins.info>

> This is quite off topic,

I see a number of people claiming they know what should be posted to 
this list but those claims appear to be without merit.

The list states the subject is "Development discussion list for Bitcoin 
protocol and its implementation."  That is a pretty broad description 
that appears to encompass a number of topics that are claimed to be 
"off-topic" by people who seem to be making up their own rules.  One guy 
even contacts people and threatens to have the list moderated if you 
don't follow his rules even though it appears he has no such authority 
and there are no official rules he can reference.

Maybe there should be a more precise description if the discussion is to 
be limited in some way beyond the "official" description.

Russ



From elombrozo at gmail.com  Tue Sep 29 06:17:33 2015
From: elombrozo at gmail.com (Eric Lombrozo)
Date: Mon, 28 Sep 2015 23:17:33 -0700
Subject: [bitcoin-dev] Let's deploy BIP65 CHECKLOCKTIMEVERIFY!
In-Reply-To: <CA+w+GKS74iF2FNuHtds=3R9++sx9ZP-0tcq_j5XqZw9-6uHkVQ@mail.gmail.com>
References: <20150927185031.GA20599@savin.petertodd.org>
	<CA+w+GKRCVr-9TVk66utp7xLRgTxNpxYoj3XQE-6y_N8JS6eO6Q@mail.gmail.com>
	<CALqxMTFEme9gYHTAVVLtFc4JCK4hoBLXEhMCRdEXK9cWso_pUA@mail.gmail.com>
	<CA+w+GKQ8xos6S_BBMqZy6wieFCG=eNxahKXrx3mVKuZcxzjruw@mail.gmail.com>
	<4965E9A0-0FF1-4A3F-9165-A21AF976E229@gmail.com>
	<CA+w+GKSm2Np92+NA77nNMB5LqSyO0=W8dziiMtGO=Jf+7KidHQ@mail.gmail.com>
	<C0E61EA6-76BE-45E0-8983-A3BC26CC64CF@gmail.com>
	<CA+w+GKS74iF2FNuHtds=3R9++sx9ZP-0tcq_j5XqZw9-6uHkVQ@mail.gmail.com>
Message-ID: <EE96B281-464B-4B17-BAF6-25F3E30AB238@gmail.com>

Mike,

Insults were not really my intention. Let's set aside our differences regarding SPV security and assume you understand the different implications for soft forks and hard forks.

Other than the fact that doing this as a soft fork requires an extra OP_DROP, how would doing this as a hard fork make any difference to SPV clients? If, as others have suggested, all clients warn the user on unrecognized nVersion and make unknown noops nonstandard, would this satisfy your concerns? The logic seems pretty straightforward.

- Eric

On September 28, 2015 5:54:33 AM PDT, Mike Hearn <hearn at vinumeris.com> wrote:
>>
>> we have NO hard fork mechanism in place that isn't highly prone to
>> systemic consensus failure.
>>
>
>Just use an opcode that isn't currently defined. Done. What about that
>mechanism is prone to failure?
>
>Re: coma. No need for insults. Please read my article and address the
>points raised there, which, by the way, do not include any mention of
>SPV
>wallets. Although your belief that SPV wallets are "inherently
>insecure"
>seems needlessly trollish - I certainly would disagree, but it's a
>different debate.

-- 
Sent from my Android device with K-9 Mail. Please excuse my brevity.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150928/f4f3138f/attachment-0001.html>

From hearn at vinumeris.com  Tue Sep 29 12:02:59 2015
From: hearn at vinumeris.com (Mike Hearn)
Date: Tue, 29 Sep 2015 14:02:59 +0200
Subject: [bitcoin-dev] Let's deploy BIP65 CHECKLOCKTIMEVERIFY!
In-Reply-To: <EE96B281-464B-4B17-BAF6-25F3E30AB238@gmail.com>
References: <20150927185031.GA20599@savin.petertodd.org>
	<CA+w+GKRCVr-9TVk66utp7xLRgTxNpxYoj3XQE-6y_N8JS6eO6Q@mail.gmail.com>
	<CALqxMTFEme9gYHTAVVLtFc4JCK4hoBLXEhMCRdEXK9cWso_pUA@mail.gmail.com>
	<CA+w+GKQ8xos6S_BBMqZy6wieFCG=eNxahKXrx3mVKuZcxzjruw@mail.gmail.com>
	<4965E9A0-0FF1-4A3F-9165-A21AF976E229@gmail.com>
	<CA+w+GKSm2Np92+NA77nNMB5LqSyO0=W8dziiMtGO=Jf+7KidHQ@mail.gmail.com>
	<C0E61EA6-76BE-45E0-8983-A3BC26CC64CF@gmail.com>
	<CA+w+GKS74iF2FNuHtds=3R9++sx9ZP-0tcq_j5XqZw9-6uHkVQ@mail.gmail.com>
	<EE96B281-464B-4B17-BAF6-25F3E30AB238@gmail.com>
Message-ID: <CA+w+GKTK=ceY_-e_upVJfJ3uRdGnHwTxHwAGUpLaK4VVNZgr2A@mail.gmail.com>

>
> Other than the fact that doing this as a soft fork requires an extra
> OP_DROP, how would doing this as a hard fork make any difference to SPV
> clients? If, as others have suggested, all clients warn the user on
> unrecognized nVersion
>

All clients do *not* do this. Why would they? What action would they take?
Try and simulate a hard fork in some complicated roundabout manner? Why not
just do the real thing and keep things simple?


> and make unknown noops nonstandard
>

They are already non-standard. That change was made last time I brought up
the problems with soft forks. It brought soft forks that use OP_NOPs a bit
closer to the ideal of a hard fork, but didn't go all the way. I pointed
that out above in my reply to Peter's mail.

So to answer your question, no, it wouldn't satisfy my concerns. My logic
is this:

Hard forks - simple, well understood, SPV friendly, old full nodes do not
calculate incorrect ledgers whilst telling their users (via UI, RPC) that
they are fully synced. Emphasis on simple: simple is good.

Soft forks - to get the benefits of a hard fork back requires lots of extra
code, silently makes IsStandard() effectively a part of the consensus rules
when in the past it hasn't been, SPV unfriendly. Benefits? As far as I can
tell, there are none.

If someone could elucidate *what* the benefits actually are, that would be
a good next step. So far everyone who tried to answer this question gave a
circular answer of the form "soft forks are good because they are soft
forks".
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150929/6cc51d05/attachment.html>

From hearn at vinumeris.com  Tue Sep 29 12:07:24 2015
From: hearn at vinumeris.com (Mike Hearn)
Date: Tue, 29 Sep 2015 14:07:24 +0200
Subject: [bitcoin-dev] Let's deploy BIP65 CHECKLOCKTIMEVERIFY!
In-Reply-To: <CABm2gDrcrtZLQE8Q9ZuxsWEfD_mFhdBz36x3RCPrQtbBi1455A@mail.gmail.com>
References: <20150927185031.GA20599@savin.petertodd.org>
	<CA+w+GKRCVr-9TVk66utp7xLRgTxNpxYoj3XQE-6y_N8JS6eO6Q@mail.gmail.com>
	<20150928132127.GA4829@savin.petertodd.org>
	<CA+w+GKTCZDNVJ-XEmsCAWGXUV3xOzVYmqMQYm0x+ihyYWQN0Gg@mail.gmail.com>
	<20150928142953.GC21815@savin.petertodd.org>
	<CA+w+GKTUz2eVJOpixSebWiQ59ovoELNhsZWSsbLHXWqk2eCn0A@mail.gmail.com>
	<20150928144318.GA28939@savin.petertodd.org>
	<CA+w+GKSuO2v+92hJUckcYdHcjkPVNg4opDL98yygGp-gqB9Jtg@mail.gmail.com>
	<20150928150543.GB28939@savin.petertodd.org>
	<CA+w+GKTPKxGWWN28_hzR8BoCh11exvgZm4s-_=5oFWd-R62uyA@mail.gmail.com>
	<8461c6195ca65ce7355f693fa24bb177@xbt.hk>
	<CA+w+GKRcUYsKzG8n5ut-ObD1MM9bs0OD-jdHe1+cLkcO6B7wKg@mail.gmail.com>
	<CABm2gDrcrtZLQE8Q9ZuxsWEfD_mFhdBz36x3RCPrQtbBi1455A@mail.gmail.com>
Message-ID: <CA+w+GKSTC_4Ugpvcb88QxusyBixmzXaTckq0Fx5v3NpgBzjMwg@mail.gmail.com>

Hi Jorge,

Yes, there is a difference. Assuming the hashrate majority upgrades, in the
> case of a softfork [snip] ...... In the case of a hardfork [snip]
>
Yes, I know what the difference between them is at a technical level. You
didn't explain why this would make any difference to how fast miners
upgrade. The amount of money they lose in both cases is identical: they are
equally incentivised to upgrade with both fork types.

Additionally, you say in a hard fork the other chain may "continue
forever". Why do you think this is not true for miners building invalid
blocks on top of the main chain? Why would that not continue forever?

There just isn't any difference between the two fork types in terms of how
fast miners would upgrade. Heck if anything, a hard fork should promote
faster upgrades, because if a miner isn't paying attention to their
debug.log they might miss the warnings. A soft fork would then look
identical to a run of really bad luck, which can legitimately happen from
time to time. A hard fork results in your node having a different height to
everyone else, which is easily detectable by just checking a block explorer.

> This discussion about the general desirability of softforks seems offtopic
> for the concrete cltv deployment discussion, which assumes softforks as
> deployment mechanism (just like bip66 assumed it).
>
Isn't that circular? This thread is about deployment of CLTV, but the BIP
assumes a particular mechanism, so pointing out problems with it is off
topic? Why have a thread at all?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150929/09aeae3b/attachment.html>

From jgarzik at gmail.com  Tue Sep 29 13:04:09 2015
From: jgarzik at gmail.com (Jeff Garzik)
Date: Tue, 29 Sep 2015 09:04:09 -0400
Subject: [bitcoin-dev] libconsensus and bitcoin development process
In-Reply-To: <CAGLBAhciSUZuKTcKmKFxy5O3Pmou=_-PG9Dk5m=y9p3TSBikAA@mail.gmail.com>
References: <CADm_WcY8Vy+k+5BaBS+jV6D6tmSXrok8rAxoPxxKOzUhyPWgMg@mail.gmail.com>
	<CABm2gDoXa9ERY7iSsouxjypq1PwV_9HuBrtFQ_jrs5pGFst=KQ@mail.gmail.com>
	<CAGLBAhciSUZuKTcKmKFxy5O3Pmou=_-PG9Dk5m=y9p3TSBikAA@mail.gmail.com>
Message-ID: <CADm_WcYDXLX2QDpTDxQRQXve8QTJH8u+zb_oy6FrXdocqCmYJg@mail.gmail.com>

There seemed to be some agreement on IRC - after a bit of haranguing by
myself :) -- that large refactors should (a) occur over a small window of
time and (b) have a written plan beforehand.



On Tue, Sep 22, 2015 at 7:49 PM, Dave Scotese <dscotese at litmocracy.com>
wrote:

> If I'm reading this situation correctly, Jeff is basically pointing out
> that developers need more links (hooks, rungs, handholds, data points,
> whatever you want to call them) so that they can see all the things his
> email insinuated are missing (a plan, order, sense, etc.).  He didn't say
> these things were missing, but that it kind of feels like it from the
> 10,000 foot view.
>
> If you use Google to search the list, as in <<site:
> lists.linuxfoundation.org libconsensus plan>> you DO NOT get the page
> Jorge gave.  He wrote that page, so he had a good idea what to search for
> to find it again.  I just want to recommend that when you describe the work
> you're doing on bitcoin, imagine several different ways people might try to
> find this description in the future and make them work.  In other words,
> Jorge could have put "A plan for abstracting out libconsensus" in the email
> where he wrote "Here are some things that need to happen first..."
>
> Likewise, if Jeff had searched for <<site:lists.linuxfoundation.org
> libconsensus plan>> (maybe he did, but he didn't list any results), he may
> have found enough clues to see Jorge's overall plan.  The "site:" keyword
> on Google fascinated me when I discovered it, so I let it inspire this
> email :-)
>
> Maybe someone can explain this if I have it wrong: A few people are able
> to pull code into Bitcoin/bitcoin.  Isn't is possible that those few people
> can agree to merge in a lot of refactor-hell PRs for those making the
> requests, but postpone them to that one-week-per-month that someone
> suggested?  The idea of letting that "hell" come in (predictable) waves is
> excellent and I was hoping to see some agreement.  But I don't know who
> those few are, so even if they all wrote "Yeah, we'll do that," I wouldn't
> recognize that I got what I wanted.
>
> notplato
>
> On Tue, Sep 22, 2015 at 11:12 AM, Jorge Tim?n <
> bitcoin-dev at lists.linuxfoundation.org> wrote:
>
>> On Tue, Sep 15, 2015 at 6:10 AM, Jeff Garzik via bitcoin-dev
>> <bitcoin-dev at lists.linuxfoundation.org> wrote:
>> > [collating a private mail and a github issue comment, moving it to a
>> > better forum]
>> >
>> > On libconsensus
>> > ---------------
>> > In general there exists the reasonable goal to move consensus state
>> > and code to a specific, separate lib.
>> >
>> > To someone not closely reviewing the seemingly endless stream of
>> > libconsensus refactoring PRs, the 10,000 foot view is that there is a
>> > rather random stream of refactors that proceed in fits and starts
>> > without apparent plan or end other than a one sentence "isolate
>> > consensus state and code" summary.
>> >
>> > I am hoping that
>> > * There is some plan
>> > * We will not see a five year stream of random consensus code movement
>> > patches causing lots of downstream developer headaches.
>> >
>> > I read every code change in every pull request that comes into
>> > github/bitcoin/bitcoin with three exceptions:
>> > * consensus code movement changes - too big, too chaotic, too
>> > frequent, too unfocused, laziness guarantees others will inevitably
>> > ACK it without me.
>> > * some non-code changes (docs)
>> > * ignore 80% of the Qt changes
>> >
>> > As with any sort of refactoring, they are easy to prove correct, easy
>> > to reason, and therefore quick and easy to ACK and merge.
>> >
>> > Refactors however have a very real negative impact.
>> > bitcoin/bitcoin.git is not only the source tree in the universe.
>> > Software engineers at home, at startups, and at major companies are
>> > maintaining branches of their own.
>> >
>> > It is very very easy to fall into a trap where a project is merging
>> > lots of cosmetic changes and not seeing the downstream ripple effects.
>> > Several people complained to me at the conference about all the code
>> > movement changes breaking their own work, causing them to stay on
>> > older versions of bitcoin due to the effort required to rebase to each
>> > new release version - and I share those complaints.
>> >
>> > Complex code changes with longer development cycles than simple code
>> > movement patches keep breaking.  It is very frustrating, and causes
>> > folks to get trapped between a rock and a hard place:
>> > - Trying to push non-trivial changes upstream is difficult, for normal
>> > and reasonable reasons (big important changes need review etc.).
>> > - Maintaining non-trivial changes out of tree is also painful, for the
>> > aforementioned reasons.
>> >
>> > Reasonable work languishes in constant-rebase hell, and incentivizes
>> > against keeping up with the latest tree.
>> >
>> >
>> > Aside from the refactor, libconsensus appears to be engineering in the
>> > dark.  Where is any sort of plan?  I have low standards - a photo of a
>> > whiteboard or youtube clip will do.
>>
>> Just because you don't understand the changes proposed it doesn't mean
>> that they are random.
>> I may have done a poor job in communicating "my plan for libconsensus"
>> but I have tried many times and in many ways.
>> #bitcoin-dev logs show that I have not worked "in the dark" at all, on
>> the contrary, I've been very tenacious when asking for review and
>> opinions, to the point that several people (at least @laanwj and
>> @theuni have complained about their github inboxes being full of
>> "spam").
>> This is a relatively recent thread where I describe my plan:
>>
>> http://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-July/009568.html
>> Not my first attempt on this list.
>>
>> It is very frustrating that everybody seems to agree that separating
>> libconsensus is a priority to maximize the number of people that can
>> safely contribute to the project, but at the same time, nobody thinks
>> that reviewing the necessary refactors to do so is a priority.
>> I tried creating big PRs for people to see "the big picture" #5946 but
>> those were too many commits and nobody wanted to read it. Gavin asked
>> for an API.
>> So I tried a smaller step: exposing just VerifyHeader in libconsensus
>> and leave VerifyTx and VerifyBlock for later #5995
>> Again, this was "too big" and "a moving target". In the meantime I
>> always had smaller one-little-step PRs that were part of a longer
>> branch:
>>
>> ** [8/8] MERGED Consensus
>> - [X] Consensus: Decouple pow from chainparams #5812 [consensuspow]
>> - [X] MOVEONLY: Move constants and globals to consensus.h #5696
>> [consensus_policy0]
>> - [X] Chainparams: Refactor: Decouple IsSuperMajority from Params()
>> #5968 [params_consensus]
>> - [X] Remove redundant getter CChainParams::SubsidyHalvingInterval()
>> #5996 [params_subsidy]
>> - [X] Separate CValidationState from main #5669 [consensus]
>> - [X] Consensus: Decouple ContextualCheckBlockHeader from checkpoints
>> #5975 [consensus_checkpoints]
>> - [X] Separate Consensus::CheckTxInputs and GetSpendHeight in
>> CheckInputs #6061 [consensus_inputs]
>> - [X] Bugfix: Don't check the genesis block header before accepting it
>> #6299 [5975-quick-fix]
>> ** [5/5] DELETED
>> *** DELETED Refactor: Create CCoinsViewEfficient interface for
>> CCoinsViewCache #5747 [coins]
>> *** DELETED Chainparams: Explicit Consensus::Params arg in consensus
>> functions #6024 [params_consensus2]
>> *** DELETED MOVEONLY: Move most of consensus functions (pre-block)
>> #6051 [consensus_moveonly] (depends on consensus-blocksize-0.12.99)
>> *** DELETED Consensus: Refactor: Separate CheckFinalTx from
>> main::IsFinalTx #6063 [consensus_finaltx]
>> *** DELETED Consensus: Refactor: Turn CBlockIndex::GetMedianTimePast
>> into independent function #6009 [consensus_mediantime]
>> *** DELETED Consensus: Adapt declarations of most obviously consensus
>> functions #6591 [consensus-params-0.12.99]
>> *** DELETED Consensus: Move blocksize and related parameters to
>> consensusparams ...without removing consensus/consensus.h [#6526
>> alternative] #6625 [consensus-blocksize-0.12.99]
>>
>> After a while I stop rebasing the longer branches and just maintained
>> a few small consensus-related PRs at a time.
>>
>> Now I consolidated 3 of them in
>>
>> *** REVIEW Optimizations: Consensus: In AcceptToMemoryPool,
>> ConnectBlock, and CreateNewBlock #6445 [consensus-txinputs-0.12.99]
>>
>> with the hope that it would be merged relatively fast.
>> After that it will be much simpler to start talking about potential C
>> APIs for VerifyHeader, VerifyTx and VerifyBlock; as well as separating
>> the library to a subtree.
>>
>> I'm more than happy to answer any questions anyone may have about any
>> of the PRs or commits, until everybody interested is convinced that
>> there's nothing random in the proposed changes.
>> I'm also more than happy to get advice on how to better communicate my
>> plans and structure my PRs.
>> _______________________________________________
>> bitcoin-dev mailing list
>> bitcoin-dev at lists.linuxfoundation.org
>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>
>
>
>
> --
> I like to provide some work at no charge to prove my value. Do you need a
> techie?
> I own Litmocracy <http://www.litmocracy.com> and Meme Racing
> <http://www.memeracing.net> (in alpha).
> I'm the webmaster for The Voluntaryist <http://www.voluntaryist.com>
> which now accepts Bitcoin.
> I also code for The Dollar Vigilante <http://dollarvigilante.com/>.
> "He ought to find it more profitable to play by the rules" - Satoshi
> Nakamoto
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150929/5ac4034a/attachment-0001.html>

From j at toom.im  Tue Sep 29 13:30:41 2015
From: j at toom.im (Jonathan Toomim (Toomim Bros))
Date: Tue, 29 Sep 2015 06:30:41 -0700
Subject: [bitcoin-dev] Let's deploy BIP65 CHECKLOCKTIMEVERIFY!
In-Reply-To: <20150928144318.GA28939@savin.petertodd.org>
References: <20150927185031.GA20599@savin.petertodd.org>
	<CA+w+GKRCVr-9TVk66utp7xLRgTxNpxYoj3XQE-6y_N8JS6eO6Q@mail.gmail.com>
	<20150928132127.GA4829@savin.petertodd.org>
	<CA+w+GKTCZDNVJ-XEmsCAWGXUV3xOzVYmqMQYm0x+ihyYWQN0Gg@mail.gmail.com>
	<20150928142953.GC21815@savin.petertodd.org>
	<CA+w+GKTUz2eVJOpixSebWiQ59ovoELNhsZWSsbLHXWqk2eCn0A@mail.gmail.com>
	<20150928144318.GA28939@savin.petertodd.org>
Message-ID: <40B097BA-A389-4C46-B5DE-2EC4738086BA@toom.im>


On Sep 28, 2015, at 7:43 AM, Peter Todd via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:

> 
> Ok, so again, if that's your security criteria, what's the issue with
> soft-forks? With soft-forks, the result of a SPV wallet following the
> highest work chain is the same: eventually invalid blocks are reorged
> out.
> 
> However, because soft-forks make it less likely that a long invalid
> chain will be generated, an attacker sybil attacking your SPV wallet has
> a much harder time tricking it into accepting a transaction. (they might
> get one or two confirmations, rather than dozens)
> 
> What's the scenario where soft-forks are worse than hard-forks from a
> SPV wallet's perspective?


I don't think this was addressed clearly, so here's my attempt.

With a soft fork, miners who have not upgraded append their blocks to the longest block chain. To SPV clients and to old fully-validating clients, it appears to be a valid block that inevitably gets orphaned. SPV clients will be tricked to follow these blocks every time they appear, since every time they appear they will have a PoW advantage for a few minutes. SPV clients will appear to behave normally, and will continue to show new transactions and get confirmations in a timely fashion. However, they will be systematically susceptible to attack from double-spends that attempt to spend funds in a way that the upgraded nodes will reject. These transactions will appear to get 1 confirmation, then regress to zero conf, every single time. These attacks can be performed for as long as someone mines with the old version. If an attacker thinks he could get more than 25 BTC of double-spends per block, he might even choose to mine with the obsolete version in order to get predictable orphans and to trick SPV clients and fully verifying wallets on the old version.

With a hard fork, miners who have not upgraded will append their blocks on the shorter fork. SPV clients will ignore this fork unless Sybil attacked. If an SPV node only connects to one full node server, that's equivalent to a Sybil attack.  In that case, transactions on the long chain will often not be present on the short chain due to its shortness. Confirmations will be slow, and will be shown to be very different from what's shown on block explorers. Displayed transaction dates and times will be off, when they show up at all. Any transactions that have been contaminated by recent mining revenue will not show up at all. SPV client users will probably notice something is wrong. If the SPV client connects to several full nodes, then this should rarely happen. For example, if 5% of full nodes are still on the old version, and an SPV wallet connects to 2 nodes at a time, there is a 0.05**2 = 0.25% chance. If the SPV client has headers cached on disk from a previous connection to the longer chain, then that chance effectively drops to zero. As a further benefit to hard forks, anybody who is ideologically opposed to the change can continue to use the old version successfully, as long as there are enough miners to keep the fork alive.

In short: soft forks mean frequent predictable and manipulable orphan blocks that SPV clients will always follow, with transactions that get confirmed once and then perma-orphaned. Hard forks mean that SPV clients will almost always work flawlessly, and will occasionally give very strange and noticeably wrong results. For fully-verifying nodes, soft forks make old versions insecure, but hard forks allow new and old versions to operate in parallel.

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 496 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150929/22615768/attachment.sig>

From gavinandresen at gmail.com  Tue Sep 29 14:04:39 2015
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Tue, 29 Sep 2015 10:04:39 -0400
Subject: [bitcoin-dev] Is it possible for there to be two chains after a
	hard fork?
Message-ID: <CABsx9T2pDwNBrC-3w8vHeaLYZ6eoNTNU0gW741Y51YL9hU-kiA@mail.gmail.com>

I keep seeing statements like this:

On Tue, Sep 29, 2015 at 9:30 AM, Jonathan Toomim (Toomim Bros) via
bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:

> As a further benefit to hard forks, anybody who is ideologically opposed
> to the change can continue to use the old version successfully, as long as
> there are enough miners to keep the fork alive.


... but I can't see how that would work.

Lets say there is a hard fork, and 5% of miners stubbornly refuse to go
along with the 95% majority (for this thought experiment, it doesn't matter
if the old rules or new rules 'win').

Lets further imagine that some exchange decides to support that 5% and lets
people trade coins from that fork (one of the small altcoin exchanges would
definitely do this if they think they can make a profit).

Now, lets say I've got a lot of pre-fork bitcoin; they're valid on both
sides of the fork. I support the 95% chain (because I'm not insane), but
I'm happy to take people's money if they're stupid enough to give it to me.

So, I do the following:

1) Create a send-to-self transaction on the 95% fork that is ONLY valid on
the 95% fork (maybe I CoinJoin with a post-fork coinbase transaction, or
just move my coins into then out of an exchange's very active hot wallet so
I get coins with a long transaction history on the 95% side of the fork).

2) Transfer  those same coins to the 5% exchange and sell them for whatever
price I can get (I don't care how low, it is free money to me-- I will
still own the coins on the 95% fork).

I have to do step (1) to prevent the exchange from taking the
transfer-to-exchange transaction and replaying it on the 95% chain.

I don't see any way of preventing EVERYBODY who has coins on the 95% side
of the fork from doing that. The result would be a huge free-fall in price
as I, and everybody else, rushes to get some free money from anybody
willing to pay us to remain idealogically pure.

Does anybody think something else would happen, and do you think that
ANYBODY would stick to the 5% fork in the face of enormously long
transaction confirmation times (~3 hours), a huge transaction backlog as
lots of the 95%'ers try to sell their coins before the price drops, and a
massive price drop for coins on the 5% fork.

-- 
--
Gavin Andresen
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150929/1104ed67/attachment.html>

From j at toom.im  Tue Sep 29 14:17:35 2015
From: j at toom.im (Jonathan Toomim (Toomim Bros))
Date: Tue, 29 Sep 2015 07:17:35 -0700
Subject: [bitcoin-dev] Is it possible for there to be two chains after a
	hard fork?
In-Reply-To: <CABsx9T2pDwNBrC-3w8vHeaLYZ6eoNTNU0gW741Y51YL9hU-kiA@mail.gmail.com>
References: <CABsx9T2pDwNBrC-3w8vHeaLYZ6eoNTNU0gW741Y51YL9hU-kiA@mail.gmail.com>
Message-ID: <0DCA91F5-E6D3-49CB-B473-D1AE1D3D9885@toom.im>

At the 95% threshold, I don't think it would happen unless there was a very strong motivating factor, like a small group believing that CLTV was a conspiracy run by the NSA agent John Titor to contaminate our precious bodily fluids with time-traveling traveler's cheques.

At the 75% threshold, I think it could happen with mostly rational users, but even then it's not very likely with most forks. With the blocksize issue, there are some people who get very religious about things like decentralization or fee markets and think that even 1 MB is too large; I could see them making financial sacrifices in order to try to make a small-block parallel fork a reality, one that is true to their vision of what's needed to make Bitcoin true and pure, or whatever.




On Sep 29, 2015, at 7:04 AM, Gavin Andresen <gavinandresen at gmail.com> wrote:

> I keep seeing statements like this:
> 
> On Tue, Sep 29, 2015 at 9:30 AM, Jonathan Toomim (Toomim Bros) via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:
> As a further benefit to hard forks, anybody who is ideologically opposed to the change can continue to use the old version successfully, as long as there are enough miners to keep the fork alive.
> 
> ... but I can't see how that would work.
> 
> Lets say there is a hard fork, and 5% of miners stubbornly refuse to go along with the 95% majority (for this thought experiment, it doesn't matter if the old rules or new rules 'win').
> 
> Lets further imagine that some exchange decides to support that 5% and lets people trade coins from that fork (one of the small altcoin exchanges would definitely do this if they think they can make a profit).
> 
> Now, lets say I've got a lot of pre-fork bitcoin; they're valid on both sides of the fork. I support the 95% chain (because I'm not insane), but I'm happy to take people's money if they're stupid enough to give it to me.
> 
> So, I do the following:
> 
> 1) Create a send-to-self transaction on the 95% fork that is ONLY valid on the 95% fork (maybe I CoinJoin with a post-fork coinbase transaction, or just move my coins into then out of an exchange's very active hot wallet so I get coins with a long transaction history on the 95% side of the fork).
> 
> 2) Transfer  those same coins to the 5% exchange and sell them for whatever price I can get (I don't care how low, it is free money to me-- I will still own the coins on the 95% fork).
> 
> I have to do step (1) to prevent the exchange from taking the transfer-to-exchange transaction and replaying it on the 95% chain.
> 
> I don't see any way of preventing EVERYBODY who has coins on the 95% side of the fork from doing that. The result would be a huge free-fall in price as I, and everybody else, rushes to get some free money from anybody willing to pay us to remain idealogically pure.
> 
> Does anybody think something else would happen, and do you think that ANYBODY would stick to the 5% fork in the face of enormously long transaction confirmation times (~3 hours), a huge transaction backlog as lots of the 95%'ers try to sell their coins before the price drops, and a massive price drop for coins on the 5% fork.
> 
> --
> --
> Gavin Andresen
> 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150929/4dde6117/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 496 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150929/4dde6117/attachment.sig>

From mark at friedenbach.org  Tue Sep 29 14:59:46 2015
From: mark at friedenbach.org (Mark Friedenbach)
Date: Tue, 29 Sep 2015 07:59:46 -0700
Subject: [bitcoin-dev] Is it possible for there to be two chains after a
 hard fork?
In-Reply-To: <0DCA91F5-E6D3-49CB-B473-D1AE1D3D9885@toom.im>
References: <CABsx9T2pDwNBrC-3w8vHeaLYZ6eoNTNU0gW741Y51YL9hU-kiA@mail.gmail.com>
	<0DCA91F5-E6D3-49CB-B473-D1AE1D3D9885@toom.im>
Message-ID: <CAOG=w-tdUx_ms=V5L4Zv35b5DdPkdHQLw=B0c4uoOtZw2jS+Hw@mail.gmail.com>

You don't need to appeal to human psychology. At 75% threshold, it takes
only 25.01% of the hashpower to report but not actually enforce the fork to
cause the majority hashpower to remain on the old chain, but for upgraded
clients to start rejecting the old chain. With 95% the same problem exists
but with a threshold of 45.01%. BIP 66 showed this not to be a hypothetical
concern.

On Tue, Sep 29, 2015 at 7:17 AM, Jonathan Toomim (Toomim Bros) via
bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:

> At the 95% threshold, I don't think it would happen unless there was a
> very strong motivating factor, like a small group believing that CLTV was a
> conspiracy run by the NSA agent John Titor to contaminate our precious
> bodily fluids with time-traveling traveler's cheques.
>
> At the 75% threshold, I think it could happen with mostly rational users,
> but even then it's not very likely with most forks. With the blocksize
> issue, there are some people who get very religious about things like
> decentralization or fee markets and think that even 1 MB is too large; I
> could see them making financial sacrifices in order to try to make a
> small-block parallel fork a reality, one that is true to their vision of
> what's needed to make Bitcoin true and pure, or whatever.
>
>
>
>
> On Sep 29, 2015, at 7:04 AM, Gavin Andresen <gavinandresen at gmail.com>
> wrote:
>
> I keep seeing statements like this:
>
> On Tue, Sep 29, 2015 at 9:30 AM, Jonathan Toomim (Toomim Bros) via
> bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:
>
>> As a further benefit to hard forks, anybody who is ideologically opposed
>> to the change can continue to use the old version successfully, as long as
>> there are enough miners to keep the fork alive.
>
>
> ... but I can't see how that would work.
>
> Lets say there is a hard fork, and 5% of miners stubbornly refuse to go
> along with the 95% majority (for this thought experiment, it doesn't matter
> if the old rules or new rules 'win').
>
> Lets further imagine that some exchange decides to support that 5% and
> lets people trade coins from that fork (one of the small altcoin exchanges
> would definitely do this if they think they can make a profit).
>
> Now, lets say I've got a lot of pre-fork bitcoin; they're valid on both
> sides of the fork. I support the 95% chain (because I'm not insane), but
> I'm happy to take people's money if they're stupid enough to give it to me.
>
> So, I do the following:
>
> 1) Create a send-to-self transaction on the 95% fork that is ONLY valid on
> the 95% fork (maybe I CoinJoin with a post-fork coinbase transaction, or
> just move my coins into then out of an exchange's very active hot wallet so
> I get coins with a long transaction history on the 95% side of the fork).
>
> 2) Transfer  those same coins to the 5% exchange and sell them for
> whatever price I can get (I don't care how low, it is free money to me-- I
> will still own the coins on the 95% fork).
>
> I have to do step (1) to prevent the exchange from taking the
> transfer-to-exchange transaction and replaying it on the 95% chain.
>
> I don't see any way of preventing EVERYBODY who has coins on the 95% side
> of the fork from doing that. The result would be a huge free-fall in price
> as I, and everybody else, rushes to get some free money from anybody
> willing to pay us to remain idealogically pure.
>
> Does anybody think something else would happen, and do you think that
> ANYBODY would stick to the 5% fork in the face of enormously long
> transaction confirmation times (~3 hours), a huge transaction backlog as
> lots of the 95%'ers try to sell their coins before the price drops, and a
> massive price drop for coins on the 5% fork.
>
> --
> --
> Gavin Andresen
>
>
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150929/786eebfe/attachment-0001.html>

From santino.napolitano at yandex.com  Tue Sep 29 15:09:05 2015
From: santino.napolitano at yandex.com (Santino Napolitano)
Date: Tue, 29 Sep 2015 18:09:05 +0300
Subject: [bitcoin-dev] Why soft-forks? was: Let's deploy BIP65
	CHECKLOCKTIMEVERIFY!
In-Reply-To: <CA+w+GKSTC_4Ugpvcb88QxusyBixmzXaTckq0Fx5v3NpgBzjMwg@mail.gmail.com>
References: <20150927185031.GA20599@savin.petertodd.org>
	<CA+w+GKRCVr-9TVk66utp7xLRgTxNpxYoj3XQE-6y_N8JS6eO6Q@mail.gmail.com>
	<20150928132127.GA4829@savin.petertodd.org>
	<CA+w+GKTCZDNVJ-XEmsCAWGXUV3xOzVYmqMQYm0x+ihyYWQN0Gg@mail.gmail.com>
	<20150928142953.GC21815@savin.petertodd.org>
	<CA+w+GKTUz2eVJOpixSebWiQ59ovoELNhsZWSsbLHXWqk2eCn0A@mail.gmail.com>
	<20150928144318.GA28939@savin.petertodd.org>
	<CA+w+GKSuO2v+92hJUckcYdHcjkPVNg4opDL98yygGp-gqB9Jtg@mail.gmail.com>
	<20150928150543.GB28939@savin.petertodd.org>
	<CA+w+GKTPKxGWWN28_hzR8BoCh11exvgZm4s-_=5oFWd-R62uyA@mail.gmail.com>
	<8461c6195ca65ce7355f693fa24bb177@xbt.hk>
	<CA+w+GKRcUYsKzG8n5ut-ObD1MM9bs0OD-jdHe1+cLkcO6B7wKg@mail.gmail.com>
	<CABm2gDrcrtZLQE8Q9ZuxsWEfD_mFhdBz36x3RCPrQtbBi1455A@mail.gmail.com>
	<CA+w+GKSTC_4Ugpvcb88QxusyBixmzXaTckq0Fx5v3NpgBzjMwg@mail.gmail.com>
Message-ID: <483271443539345@web3j.yandex.ru>

> So I'll repeat the question that I posed before - given that there are clear, explicit downsides,
> what is the purpose of doing things this way? Where is the gain for ordinary Bitcoin users?

+1 for a direct answer to this question.

From jgarzik at gmail.com  Tue Sep 29 15:44:57 2015
From: jgarzik at gmail.com (Jeff Garzik)
Date: Tue, 29 Sep 2015 11:44:57 -0400
Subject: [bitcoin-dev] On bitcoin-dev list admin and list noise
Message-ID: <CADm_Wcbf+p=ShdfQqKzbWPvVWJ6WMxR2dF4Y4M5N+yzoqZtTCw@mail.gmail.com>

This was discussed in IRC, but (did I miss it?) never made it to the list
outside of being buried in a longer summary.

There is a common complain that bitcoin-dev is too noisy.  The response
plan is to narrow the focus of the list to near term technical changes to
the bitcoin protocol and its implementations (bitcoin core, btcd, ...)

Debates over bitcoin philosophy, broader context, etc. will start seeing
grumpy list admins squawk about "off-topic!"

It is a fair criticism, though, that "take it elsewhere!" needs to have
some place as a suggested destination.  The proposal is to create a second
list, bitcoin-tech-discuss or perhaps just 'bitcoin', with a more general
rubric.  This split has served IRC well and generally manages to keep the
noise down to a productive level.  We want this list to achieve that same
goal; if bitcoin-dev is not productive then it's not useful.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150929/d62cd28f/attachment.html>

From jl2012 at xbt.hk  Tue Sep 29 15:59:05 2015
From: jl2012 at xbt.hk (jl2012 at xbt.hk)
Date: Tue, 29 Sep 2015 11:59:05 -0400
Subject: [bitcoin-dev] Let's deploy BIP65 CHECKLOCKTIMEVERIFY!
In-Reply-To: <40B097BA-A389-4C46-B5DE-2EC4738086BA@toom.im>
References: <20150927185031.GA20599@savin.petertodd.org>
	<CA+w+GKRCVr-9TVk66utp7xLRgTxNpxYoj3XQE-6y_N8JS6eO6Q@mail.gmail.com>
	<20150928132127.GA4829@savin.petertodd.org>
	<CA+w+GKTCZDNVJ-XEmsCAWGXUV3xOzVYmqMQYm0x+ihyYWQN0Gg@mail.gmail.com>
	<20150928142953.GC21815@savin.petertodd.org>
	<CA+w+GKTUz2eVJOpixSebWiQ59ovoELNhsZWSsbLHXWqk2eCn0A@mail.gmail.com>
	<20150928144318.GA28939@savin.petertodd.org>
	<40B097BA-A389-4C46-B5DE-2EC4738086BA@toom.im>
Message-ID: <5e90be1b8f85cd46ed20eae84c062702@xbt.hk>

Jonathan Toomim (Toomim Bros) via bitcoin-dev ? 2015-09-29 09:30 ??:
> SPV clients will appear to behave normally, and
> will continue to show new transactions and get confirmations in a
> timely fashion. However, they will be systematically susceptible to
> attack from double-spends that attempt to spend funds in a way that
> the upgraded nodes will reject. These transactions will appear to get
> 1 confirmation, then regress to zero conf, every single time. These
> attacks can be performed for as long as someone mines with the old
> version.

1. Who told you to accept 1-confirmation tx? Satoshi recommended 6 
confirmations in the whitepaper. Take your own risk if you do not follow 
his advice.

2. This is true only if your SPV client naively follows the longest 
chain without even looking at the block version. This might be good 
enough for the 1st generation SPV client, but future generations should 
at least have basic fraud detecting mechanism.



> If an attacker thinks he could get more than 25 BTC of
> double-spends per block, he might even choose to mine with the
> obsolete version in order to get predictable orphans and to trick SPV
> clients and fully verifying wallets on the old version.

This point is totally irrelevant. No matter there is a softfork or not, 
SPV users are always vulnerable to such double-spending attack if they 
blindly follow the longest chain AND accept 1-confirmation. The fiat 
currency system might be safer for them.

From santino.napolitano at yandex.com  Tue Sep 29 16:38:02 2015
From: santino.napolitano at yandex.com (Santino Napolitano)
Date: Tue, 29 Sep 2015 19:38:02 +0300
Subject: [bitcoin-dev] On bitcoin-dev list admin and list noise
In-Reply-To: <CADm_Wcbf+p=ShdfQqKzbWPvVWJ6WMxR2dF4Y4M5N+yzoqZtTCw@mail.gmail.com>
References: <CADm_Wcbf+p=ShdfQqKzbWPvVWJ6WMxR2dF4Y4M5N+yzoqZtTCw@mail.gmail.com>
Message-ID: <1026821443544682@web7h.yandex.ru>

I'm not intending to completely dismiss your concerns but as a data point: I read this list daily and it usually takes 15 minutes or less while I drink a cup of coffee.

My concern is that this is one of the (maybe *the*) last uncensored persisted forums related to technical bitcoin discussion with wide viewership. It is increasingly difficult for an average somewhat technical person to attempt to hold the bitcoin development community accountable for its actions or have their voice heard. It would really be a shame if messages like this were relegated to a black hole where things like the exchange rate and various scammy spam goes to fester.

>Debates over bitcoin philosophy, broader context, etc. will start seeing grumpy list admins squawk about "off-topic!"

Who will draw this line? It's unclear to me who the list admins are.

From mark at friedenbach.org  Tue Sep 29 17:07:12 2015
From: mark at friedenbach.org (Mark Friedenbach)
Date: Tue, 29 Sep 2015 10:07:12 -0700
Subject: [bitcoin-dev] On bitcoin-dev list admin and list noise
In-Reply-To: <1026821443544682@web7h.yandex.ru>
References: <CADm_Wcbf+p=ShdfQqKzbWPvVWJ6WMxR2dF4Y4M5N+yzoqZtTCw@mail.gmail.com>
	<1026821443544682@web7h.yandex.ru>
Message-ID: <CAOG=w-tDo+87xkB3w=22tZQADi18rbAB0N6m+H5ouwu_pg_+Xg@mail.gmail.com>

This mailing list was never meant to be a place "to hold the bitcoin
development community accountable for its actions [sic]." I know other
developers that have switched to digest-only or unsubscribed. I know if
this became a channel for PR and populist venting as you describe, I would
leave as well. This mailing list is meant to be a place to discuss ongoing
bitcoin development issues relating to the protocol and its instantiation
in bitcoin core. Please don't decrease the utility of this list by
expanding scope.

On Tue, Sep 29, 2015 at 9:38 AM, Santino Napolitano via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> I'm not intending to completely dismiss your concerns but as a data point:
> I read this list daily and it usually takes 15 minutes or less while I
> drink a cup of coffee.
>
> My concern is that this is one of the (maybe *the*) last uncensored
> persisted forums related to technical bitcoin discussion with wide
> viewership. It is increasingly difficult for an average somewhat technical
> person to attempt to hold the bitcoin development community accountable for
> its actions or have their voice heard. It would really be a shame if
> messages like this were relegated to a black hole where things like the
> exchange rate and various scammy spam goes to fester.
>
> >Debates over bitcoin philosophy, broader context, etc. will start seeing
> grumpy list admins squawk about "off-topic!"
>
> Who will draw this line? It's unclear to me who the list admins are.
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150929/78988206/attachment.html>

From allen.piscitello at gmail.com  Tue Sep 29 17:24:21 2015
From: allen.piscitello at gmail.com (Allen Piscitello)
Date: Tue, 29 Sep 2015 12:24:21 -0500
Subject: [bitcoin-dev] Is it possible for there to be two chains after a
 hard fork?
In-Reply-To: <CABsx9T2pDwNBrC-3w8vHeaLYZ6eoNTNU0gW741Y51YL9hU-kiA@mail.gmail.com>
References: <CABsx9T2pDwNBrC-3w8vHeaLYZ6eoNTNU0gW741Y51YL9hU-kiA@mail.gmail.com>
Message-ID: <CAJfRnm7gWmXUj=9Dh2o5sEXOMe6Y_4P=naY3cVt1gfLRKOpmnw@mail.gmail.com>

You're entire argument seems to be based on this assumption.

>I support the 95% chain (because I'm not insane)

I fail to see how always following a majority of miners no matter what
their actions somehow equates to insanity.


On Tue, Sep 29, 2015 at 9:04 AM, Gavin Andresen via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> I keep seeing statements like this:
>
> On Tue, Sep 29, 2015 at 9:30 AM, Jonathan Toomim (Toomim Bros) via
> bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:
>
>> As a further benefit to hard forks, anybody who is ideologically opposed
>> to the change can continue to use the old version successfully, as long as
>> there are enough miners to keep the fork alive.
>
>
> ... but I can't see how that would work.
>
> Lets say there is a hard fork, and 5% of miners stubbornly refuse to go
> along with the 95% majority (for this thought experiment, it doesn't matter
> if the old rules or new rules 'win').
>
> Lets further imagine that some exchange decides to support that 5% and
> lets people trade coins from that fork (one of the small altcoin exchanges
> would definitely do this if they think they can make a profit).
>
> Now, lets say I've got a lot of pre-fork bitcoin; they're valid on both
> sides of the fork. I support the 95% chain (because I'm not insane), but
> I'm happy to take people's money if they're stupid enough to give it to me.
>
> So, I do the following:
>
> 1) Create a send-to-self transaction on the 95% fork that is ONLY valid on
> the 95% fork (maybe I CoinJoin with a post-fork coinbase transaction, or
> just move my coins into then out of an exchange's very active hot wallet so
> I get coins with a long transaction history on the 95% side of the fork).
>
> 2) Transfer  those same coins to the 5% exchange and sell them for
> whatever price I can get (I don't care how low, it is free money to me-- I
> will still own the coins on the 95% fork).
>
> I have to do step (1) to prevent the exchange from taking the
> transfer-to-exchange transaction and replaying it on the 95% chain.
>
> I don't see any way of preventing EVERYBODY who has coins on the 95% side
> of the fork from doing that. The result would be a huge free-fall in price
> as I, and everybody else, rushes to get some free money from anybody
> willing to pay us to remain idealogically pure.
>
> Does anybody think something else would happen, and do you think that
> ANYBODY would stick to the 5% fork in the face of enormously long
> transaction confirmation times (~3 hours), a huge transaction backlog as
> lots of the 95%'ers try to sell their coins before the price drops, and a
> massive price drop for coins on the 5% fork.
>
> --
> --
> Gavin Andresen
>
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150929/bec94c52/attachment-0001.html>

From hearn at vinumeris.com  Tue Sep 29 17:29:01 2015
From: hearn at vinumeris.com (Mike Hearn)
Date: Tue, 29 Sep 2015 19:29:01 +0200
Subject: [bitcoin-dev] On bitcoin-dev list admin and list noise
In-Reply-To: <CAOG=w-tDo+87xkB3w=22tZQADi18rbAB0N6m+H5ouwu_pg_+Xg@mail.gmail.com>
References: <CADm_Wcbf+p=ShdfQqKzbWPvVWJ6WMxR2dF4Y4M5N+yzoqZtTCw@mail.gmail.com>
	<1026821443544682@web7h.yandex.ru>
	<CAOG=w-tDo+87xkB3w=22tZQADi18rbAB0N6m+H5ouwu_pg_+Xg@mail.gmail.com>
Message-ID: <CA+w+GKR3CYGZEJ9c9uwuuPvYgQEOH=gUVP_SN4Edfx7-m_p1cA@mail.gmail.com>

There's a simple way to cut down on "noise" that doesn't involve people
shouting OFFTOPIC at each other: the maintainer needs to resolve
discussions by making decisions and saying, this is how Core does it. If
you disagree, go make/join a fork because there's no point in discussing
this any further here. People would get the picture pretty fast.

Wladimir doesn't do this. That is something he should fix. Clearly ending
debates so they don't run in circles forever is a basic management
technique.

Allowing random people to give each other red cards is merely a great way
to piss off users even further, because anyone who objects to a clearly
bone-headed decision will be told they're discussing philosophy and to go
away (this is meaningless).
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150929/21ce6628/attachment.html>

From gavinandresen at gmail.com  Tue Sep 29 17:35:20 2015
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Tue, 29 Sep 2015 13:35:20 -0400
Subject: [bitcoin-dev] Is it possible for there to be two chains after a
 hard fork?
In-Reply-To: <CAJfRnm7gWmXUj=9Dh2o5sEXOMe6Y_4P=naY3cVt1gfLRKOpmnw@mail.gmail.com>
References: <CABsx9T2pDwNBrC-3w8vHeaLYZ6eoNTNU0gW741Y51YL9hU-kiA@mail.gmail.com>
	<CAJfRnm7gWmXUj=9Dh2o5sEXOMe6Y_4P=naY3cVt1gfLRKOpmnw@mail.gmail.com>
Message-ID: <CABsx9T0YEm7mFYosRVbcG_XgtSi8BbUraGoixy4e2=nyCBeFaA@mail.gmail.com>

On Tue, Sep 29, 2015 at 1:24 PM, Allen Piscitello <
allen.piscitello at gmail.com> wrote:

> I fail to see how always following a majority of miners no matter what
> their actions somehow equates to insanity.


Ok, I have a hidden assumption: I assume most miners are also not
completely insane.

I have met a fair number of them, and while they are often a little bit
crazy (all entrepreneurs are a little bit crazy), I am confident that the
vast majority of them are economically rational, and most of them are also
meta-rational: they want Bitcoin to succeed. We've seen them demonstrate
that meta-rationality when we've had accidental consensus forks.

If you start with the premise that more than half of Bitcoin miners would
do something crazy that would either destroy Bitcoin or would be completely
unacceptable to you, personally... then maybe you should look for some
other system that you might trust more, because Bitcoin's basic security
assumption is that a supermajority of miners are 'honest.'

-- 
--
Gavin Andresen
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150929/f20f08f7/attachment.html>

From allen.piscitello at gmail.com  Tue Sep 29 17:43:55 2015
From: allen.piscitello at gmail.com (Allen Piscitello)
Date: Tue, 29 Sep 2015 12:43:55 -0500
Subject: [bitcoin-dev] Is it possible for there to be two chains after a
 hard fork?
In-Reply-To: <CABsx9T0YEm7mFYosRVbcG_XgtSi8BbUraGoixy4e2=nyCBeFaA@mail.gmail.com>
References: <CABsx9T2pDwNBrC-3w8vHeaLYZ6eoNTNU0gW741Y51YL9hU-kiA@mail.gmail.com>
	<CAJfRnm7gWmXUj=9Dh2o5sEXOMe6Y_4P=naY3cVt1gfLRKOpmnw@mail.gmail.com>
	<CABsx9T0YEm7mFYosRVbcG_XgtSi8BbUraGoixy4e2=nyCBeFaA@mail.gmail.com>
Message-ID: <CAJfRnm5=yrWE95T3+fzM_PxGxWJ38OnJMVxynTOKK1X9BTrgCg@mail.gmail.com>

>If you start with the premise that more than half of Bitcoin miners would
do something crazy that would either destroy Bitcoin or would be completely
unacceptable to you, personally... then maybe you should look for some
other system that you might trust more, because Bitcoin's basic security
assumption is that a supermajority of miners are 'honest.'

Miners not being crazy does not mean they are infallible.  They may
misjudge the market and change their minds about what is the most
reasonable action based on new information.  Their commitment to one fork
or another is very dynamic, and is a huge assumption missing.  They may
overestimate their influence, support of the economy.  Other factors may
come into play that no one thought of, and they can revert back at any
point.

Labeling things as insane or crazy is not productive.

>because Bitcoin's basic security assumption is that a supermajority of
miners are 'honest.'

Only if you rely on SPV.

On Tue, Sep 29, 2015 at 12:35 PM, Gavin Andresen <gavinandresen at gmail.com>
wrote:

> On Tue, Sep 29, 2015 at 1:24 PM, Allen Piscitello <
> allen.piscitello at gmail.com> wrote:
>
>> I fail to see how always following a majority of miners no matter what
>> their actions somehow equates to insanity.
>
>
> Ok, I have a hidden assumption: I assume most miners are also not
> completely insane.
>
> I have met a fair number of them, and while they are often a little bit
> crazy (all entrepreneurs are a little bit crazy), I am confident that the
> vast majority of them are economically rational, and most of them are also
> meta-rational: they want Bitcoin to succeed. We've seen them demonstrate
> that meta-rationality when we've had accidental consensus forks.
>
> If you start with the premise that more than half of Bitcoin miners would
> do something crazy that would either destroy Bitcoin or would be completely
> unacceptable to you, personally... then maybe you should look for some
> other system that you might trust more, because Bitcoin's basic security
> assumption is that a supermajority of miners are 'honest.'
>
> --
> --
> Gavin Andresen
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150929/cc99256a/attachment.html>

From hearn at vinumeris.com  Tue Sep 29 17:51:34 2015
From: hearn at vinumeris.com (Mike Hearn)
Date: Tue, 29 Sep 2015 19:51:34 +0200
Subject: [bitcoin-dev] Is it possible for there to be two chains after a
 hard fork?
In-Reply-To: <CAJfRnm5=yrWE95T3+fzM_PxGxWJ38OnJMVxynTOKK1X9BTrgCg@mail.gmail.com>
References: <CABsx9T2pDwNBrC-3w8vHeaLYZ6eoNTNU0gW741Y51YL9hU-kiA@mail.gmail.com>
	<CAJfRnm7gWmXUj=9Dh2o5sEXOMe6Y_4P=naY3cVt1gfLRKOpmnw@mail.gmail.com>
	<CABsx9T0YEm7mFYosRVbcG_XgtSi8BbUraGoixy4e2=nyCBeFaA@mail.gmail.com>
	<CAJfRnm5=yrWE95T3+fzM_PxGxWJ38OnJMVxynTOKK1X9BTrgCg@mail.gmail.com>
Message-ID: <CA+w+GKTVzaEqWeR9m2ck6z3WZ_OWJ5hgkqyQhriJDLPVoHzfGQ@mail.gmail.com>

>
> >because Bitcoin's basic security assumption is that a supermajority of
> miners are 'honest.'
>
> Only if you rely on SPV.
>

No, you rely on miners honesty even if you run a full node. This is in the
white paper. A dishonest miner majority can commit fraud against you, they
can mine only empty blocks, they can do various other things that render
your money worthless.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150929/91b9b493/attachment.html>

From allen.piscitello at gmail.com  Tue Sep 29 17:55:02 2015
From: allen.piscitello at gmail.com (Allen Piscitello)
Date: Tue, 29 Sep 2015 12:55:02 -0500
Subject: [bitcoin-dev] Is it possible for there to be two chains after a
 hard fork?
In-Reply-To: <CA+w+GKTVzaEqWeR9m2ck6z3WZ_OWJ5hgkqyQhriJDLPVoHzfGQ@mail.gmail.com>
References: <CABsx9T2pDwNBrC-3w8vHeaLYZ6eoNTNU0gW741Y51YL9hU-kiA@mail.gmail.com>
	<CAJfRnm7gWmXUj=9Dh2o5sEXOMe6Y_4P=naY3cVt1gfLRKOpmnw@mail.gmail.com>
	<CABsx9T0YEm7mFYosRVbcG_XgtSi8BbUraGoixy4e2=nyCBeFaA@mail.gmail.com>
	<CAJfRnm5=yrWE95T3+fzM_PxGxWJ38OnJMVxynTOKK1X9BTrgCg@mail.gmail.com>
	<CA+w+GKTVzaEqWeR9m2ck6z3WZ_OWJ5hgkqyQhriJDLPVoHzfGQ@mail.gmail.com>
Message-ID: <CAJfRnm4WwtNvChcCGCzDLJZrg3VZqJz-X-XXC0Ftyga3x=P8-w@mail.gmail.com>

>A dishonest miner majority can commit fraud against you, they can mine
only empty blocks, they can do various other things that render your money
worthless.

Mining empty blocks is not fraud.

If you want to use terms like "honest miners" and "fraud", please define
them so we can at least be on the same page.

I am defining an honest miner as one that follows the rules of the
protocol.  Obviously your definition is different.

On Tue, Sep 29, 2015 at 12:51 PM, Mike Hearn <hearn at vinumeris.com> wrote:

> >because Bitcoin's basic security assumption is that a supermajority of
>> miners are 'honest.'
>>
>> Only if you rely on SPV.
>>
>
> No, you rely on miners honesty even if you run a full node. This is in the
> white paper. A dishonest miner majority can commit fraud against you, they
> can mine only empty blocks, they can do various other things that render
> your money worthless.
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150929/c22d0ed4/attachment-0001.html>

From gavinandresen at gmail.com  Tue Sep 29 18:01:59 2015
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Tue, 29 Sep 2015 14:01:59 -0400
Subject: [bitcoin-dev] Is it possible for there to be two chains after a
 hard fork?
In-Reply-To: <CAJfRnm4WwtNvChcCGCzDLJZrg3VZqJz-X-XXC0Ftyga3x=P8-w@mail.gmail.com>
References: <CABsx9T2pDwNBrC-3w8vHeaLYZ6eoNTNU0gW741Y51YL9hU-kiA@mail.gmail.com>
	<CAJfRnm7gWmXUj=9Dh2o5sEXOMe6Y_4P=naY3cVt1gfLRKOpmnw@mail.gmail.com>
	<CABsx9T0YEm7mFYosRVbcG_XgtSi8BbUraGoixy4e2=nyCBeFaA@mail.gmail.com>
	<CAJfRnm5=yrWE95T3+fzM_PxGxWJ38OnJMVxynTOKK1X9BTrgCg@mail.gmail.com>
	<CA+w+GKTVzaEqWeR9m2ck6z3WZ_OWJ5hgkqyQhriJDLPVoHzfGQ@mail.gmail.com>
	<CAJfRnm4WwtNvChcCGCzDLJZrg3VZqJz-X-XXC0Ftyga3x=P8-w@mail.gmail.com>
Message-ID: <CABsx9T07DUjWoEmqmysya90Fxf4RkM7K18ZaP7pP3Hgk5rN-_Q@mail.gmail.com>

We really shouldn't have to go over "Bitcoin 101" on this mailing list, and
this discussion should move to the not-yet-created more general discussion
list.  I started this thread as a sanity check on myself, because I keep
seeing smart people saying that two chains could persist for more than a
few days after a hard fork, and I still don't see how that would possibly
work.

So: "fraud" would be 51% miners sending you bitcoin in exchange for
something of value, you wait for confirmations and send them that something
of value, and then the 51% reverses the transaction.

Running a full node doesn't help.

On Tue, Sep 29, 2015 at 1:55 PM, Allen Piscitello <
allen.piscitello at gmail.com> wrote:

> >A dishonest miner majority can commit fraud against you, they can mine
> only empty blocks, they can do various other things that render your money
> worthless.
>
> Mining empty blocks is not fraud.
>
> If you want to use terms like "honest miners" and "fraud", please define
> them so we can at least be on the same page.
>
> I am defining an honest miner as one that follows the rules of the
> protocol.  Obviously your definition is different.
>
> On Tue, Sep 29, 2015 at 12:51 PM, Mike Hearn <hearn at vinumeris.com> wrote:
>
>> >because Bitcoin's basic security assumption is that a supermajority of
>>> miners are 'honest.'
>>>
>>> Only if you rely on SPV.
>>>
>>
>> No, you rely on miners honesty even if you run a full node. This is in
>> the white paper. A dishonest miner majority can commit fraud against you,
>> they can mine only empty blocks, they can do various other things that
>> render your money worthless.
>>
>
>


-- 
--
Gavin Andresen
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150929/e754296f/attachment.html>

From hearn at vinumeris.com  Tue Sep 29 18:02:06 2015
From: hearn at vinumeris.com (Mike Hearn)
Date: Tue, 29 Sep 2015 20:02:06 +0200
Subject: [bitcoin-dev] Is it possible for there to be two chains after a
 hard fork?
In-Reply-To: <CAJfRnm4WwtNvChcCGCzDLJZrg3VZqJz-X-XXC0Ftyga3x=P8-w@mail.gmail.com>
References: <CABsx9T2pDwNBrC-3w8vHeaLYZ6eoNTNU0gW741Y51YL9hU-kiA@mail.gmail.com>
	<CAJfRnm7gWmXUj=9Dh2o5sEXOMe6Y_4P=naY3cVt1gfLRKOpmnw@mail.gmail.com>
	<CABsx9T0YEm7mFYosRVbcG_XgtSi8BbUraGoixy4e2=nyCBeFaA@mail.gmail.com>
	<CAJfRnm5=yrWE95T3+fzM_PxGxWJ38OnJMVxynTOKK1X9BTrgCg@mail.gmail.com>
	<CA+w+GKTVzaEqWeR9m2ck6z3WZ_OWJ5hgkqyQhriJDLPVoHzfGQ@mail.gmail.com>
	<CAJfRnm4WwtNvChcCGCzDLJZrg3VZqJz-X-XXC0Ftyga3x=P8-w@mail.gmail.com>
Message-ID: <CA+w+GKRPNneye6=pJ5R1n3q-8h621gw=UcgyBooJLXuTQ3z1Zg@mail.gmail.com>

>
> Mining empty blocks is not fraud.
>

I didn't say it was, sorry, the comma was separating two list items. By
"fraud" I meant double spending. Mining only empty blocks would be a DoS
attack rather than double spending.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150929/96ad0a79/attachment.html>

From Pavel at Janik.cz  Tue Sep 29 17:59:18 2015
From: Pavel at Janik.cz (=?utf-8?Q?Pavel_Jan=C3=ADk?=)
Date: Tue, 29 Sep 2015 19:59:18 +0200
Subject: [bitcoin-dev] On bitcoin-dev list admin and list noise
In-Reply-To: <CA+w+GKR3CYGZEJ9c9uwuuPvYgQEOH=gUVP_SN4Edfx7-m_p1cA@mail.gmail.com>
References: <CADm_Wcbf+p=ShdfQqKzbWPvVWJ6WMxR2dF4Y4M5N+yzoqZtTCw@mail.gmail.com>
	<1026821443544682@web7h.yandex.ru>
	<CAOG=w-tDo+87xkB3w=22tZQADi18rbAB0N6m+H5ouwu_pg_+Xg@mail.gmail.com>
	<CA+w+GKR3CYGZEJ9c9uwuuPvYgQEOH=gUVP_SN4Edfx7-m_p1cA@mail.gmail.com>
Message-ID: <772BA950-0EFE-4D10-9F6A-5916163A21AA@Janik.cz>


> On 29 Sep 2015, at 19:29, Mike Hearn via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:
> 
> There's a simple way to cut down on "noise" that doesn't involve people shouting OFFTOPIC at each other: the maintainer needs to resolve discussions by making decisions and saying, this is how Core does it.

Looks like you are mixing the maintainer of the Bitcoin Core with the bitcoin-dev mailing list moderator. Intentionally?
--  
Pavel Jan?k





From allen.piscitello at gmail.com  Tue Sep 29 18:23:56 2015
From: allen.piscitello at gmail.com (Allen Piscitello)
Date: Tue, 29 Sep 2015 13:23:56 -0500
Subject: [bitcoin-dev] Is it possible for there to be two chains after a
 hard fork?
In-Reply-To: <CABsx9T07DUjWoEmqmysya90Fxf4RkM7K18ZaP7pP3Hgk5rN-_Q@mail.gmail.com>
References: <CABsx9T2pDwNBrC-3w8vHeaLYZ6eoNTNU0gW741Y51YL9hU-kiA@mail.gmail.com>
	<CAJfRnm7gWmXUj=9Dh2o5sEXOMe6Y_4P=naY3cVt1gfLRKOpmnw@mail.gmail.com>
	<CABsx9T0YEm7mFYosRVbcG_XgtSi8BbUraGoixy4e2=nyCBeFaA@mail.gmail.com>
	<CAJfRnm5=yrWE95T3+fzM_PxGxWJ38OnJMVxynTOKK1X9BTrgCg@mail.gmail.com>
	<CA+w+GKTVzaEqWeR9m2ck6z3WZ_OWJ5hgkqyQhriJDLPVoHzfGQ@mail.gmail.com>
	<CAJfRnm4WwtNvChcCGCzDLJZrg3VZqJz-X-XXC0Ftyga3x=P8-w@mail.gmail.com>
	<CABsx9T07DUjWoEmqmysya90Fxf4RkM7K18ZaP7pP3Hgk5rN-_Q@mail.gmail.com>
Message-ID: <CAJfRnm4xNozyynxoTQS25FTCcOw_hwfFfV1V-mVfq+qZ+Q8jVQ@mail.gmail.com>

>I started this thread as a sanity check on myself, because I keep seeing
smart people saying that two chains could persist for more than a few days
after a hard fork, and I still don't see how that would possibly work.

When you start with the assumption that anyone who disagrees with you is
insane or crazy, I can see why you have such difficulty.


On Tue, Sep 29, 2015 at 1:01 PM, Gavin Andresen <gavinandresen at gmail.com>
wrote:

> We really shouldn't have to go over "Bitcoin 101" on this mailing list,
> and this discussion should move to the not-yet-created more general
> discussion list.  I started this thread as a sanity check on myself,
> because I keep seeing smart people saying that two chains could persist for
> more than a few days after a hard fork, and I still don't see how that
> would possibly work.
>
> So: "fraud" would be 51% miners sending you bitcoin in exchange for
> something of value, you wait for confirmations and send them that something
> of value, and then the 51% reverses the transaction.
>
> Running a full node doesn't help.
>
> On Tue, Sep 29, 2015 at 1:55 PM, Allen Piscitello <
> allen.piscitello at gmail.com> wrote:
>
>> >A dishonest miner majority can commit fraud against you, they can mine
>> only empty blocks, they can do various other things that render your money
>> worthless.
>>
>> Mining empty blocks is not fraud.
>>
>> If you want to use terms like "honest miners" and "fraud", please define
>> them so we can at least be on the same page.
>>
>> I am defining an honest miner as one that follows the rules of the
>> protocol.  Obviously your definition is different.
>>
>> On Tue, Sep 29, 2015 at 12:51 PM, Mike Hearn <hearn at vinumeris.com> wrote:
>>
>>> >because Bitcoin's basic security assumption is that a supermajority of
>>>> miners are 'honest.'
>>>>
>>>> Only if you rely on SPV.
>>>>
>>>
>>> No, you rely on miners honesty even if you run a full node. This is in
>>> the white paper. A dishonest miner majority can commit fraud against you,
>>> they can mine only empty blocks, they can do various other things that
>>> render your money worthless.
>>>
>>
>>
>
>
> --
> --
> Gavin Andresen
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150929/6fcb15b7/attachment.html>

From gmaxwell at gmail.com  Tue Sep 29 18:31:28 2015
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Tue, 29 Sep 2015 18:31:28 +0000
Subject: [bitcoin-dev] Let's deploy BIP65 CHECKLOCKTIMEVERIFY!
In-Reply-To: <CA+w+GKRCVr-9TVk66utp7xLRgTxNpxYoj3XQE-6y_N8JS6eO6Q@mail.gmail.com>
References: <20150927185031.GA20599@savin.petertodd.org>
	<CA+w+GKRCVr-9TVk66utp7xLRgTxNpxYoj3XQE-6y_N8JS6eO6Q@mail.gmail.com>
Message-ID: <CAAS2fgSEDGBd67m7i8zCgNRqtmQrZyZMj7a5TsYo41Dh=tdhHQ@mail.gmail.com>

On Mon, Sep 28, 2015 at 10:48 AM, Mike Hearn via bitcoin-dev
<bitcoin-dev at lists.linuxfoundation.org> wrote:
> There is no consensus on using a soft fork to deploy this feature. It will
> result in the same problems as all the other soft forks - SPV wallets will
> become less reliable during the rollout period. I am against that, as it's
> entirely avoidable.
>
> Make it a hard fork and my objection will be dropped.

I'm surprised to see this response-- BIP65 is a year old now which is
plenty of time to mature and for issues to be uncovered. It (and its
predecessors) have had extensive discussion-- with no controversy
exposed during its entire lifetime, but in any case...

I am having a little difficulty making sense of this complaint. For
all any of us know miners are already enforcing the validity of CLTV,
it's indistinguishable on the visible behavior.  At the same time in
BitcoinXT's 101 proposal the change in system rules is similarly
"invisible" to existing "SPV" wallets in the same way that enforcement
of CLTV is "invisible": both are no change from their perspective.
Have I missed a proposal to change BIP101 to be a real hardfork (e.g.
be invalid from the perspective of historical bitcoinj clients too)?
---- I'd think it to be completely reasonable to do so, even while not
thinking that it would be reasonable here:  Softforks and hardforks
are not the same thing, not technically, and not politically. Miners
can collectively, at their whim, impose any kind of soft fork they
want, at any time and you won't even necessarily be able to tell...
that is just how the system works. Hardforks on the other hand, can
only happen with the consent of the participants-- they can directly
violate system properties that the participants believe to be largely
nonvolatile, and they _force__ software upgrades, so I think having a
higher bar makes good sense there.

The particular mechanism used in the proposal as-is has been used many
times before (and has been refined over time) and we have considerable
experience with it. The behavior is not, in fact, truly invisible to
non-upgraded participants: it's is visible by way of the block version
changing.  Bitcoin Core, going back years, responds by issuing a
warning-- "%s: %d of last 100 blocks above version %d\n" which then
becomes "Warning: This version is obsolete; upgrade required!".  Users
of the software (directly or via automation) are free to decide to
take whatever policy action they wish to take, delay accepting
transactions, patching software, etc..  The same could be done by any
client of the system if they cared to do so.

I believe the versionbits mechanism will be superior, but-- among
other things-- its deployment has been complicated by BitcoinXT
deploying an incomplete approximation of it.  Versionbits primary
advantage is related to having multiple concurrent proposals in
flight, which will be good to have but isn't itself a reason not to
pull a proposal up ahead of versionbits.

From odinn.cyberguerrilla at riseup.net  Tue Sep 29 19:54:41 2015
From: odinn.cyberguerrilla at riseup.net (odinn)
Date: Tue, 29 Sep 2015 19:54:41 +0000
Subject: [bitcoin-dev] Let's deploy BIP65 CHECKLOCKTIMEVERIFY!
In-Reply-To: <5e90be1b8f85cd46ed20eae84c062702@xbt.hk>
References: <20150927185031.GA20599@savin.petertodd.org>	<CA+w+GKRCVr-9TVk66utp7xLRgTxNpxYoj3XQE-6y_N8JS6eO6Q@mail.gmail.com>	<20150928132127.GA4829@savin.petertodd.org>	<CA+w+GKTCZDNVJ-XEmsCAWGXUV3xOzVYmqMQYm0x+ihyYWQN0Gg@mail.gmail.com>	<20150928142953.GC21815@savin.petertodd.org>	<CA+w+GKTUz2eVJOpixSebWiQ59ovoELNhsZWSsbLHXWqk2eCn0A@mail.gmail.com>	<20150928144318.GA28939@savin.petertodd.org>	<40B097BA-A389-4C46-B5DE-2EC4738086BA@toom.im>
	<5e90be1b8f85cd46ed20eae84c062702@xbt.hk>
Message-ID: <560AEC81.8040903@riseup.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512

Hello, (see my remarks below)

jl2012 via bitcoin-dev:
> Jonathan Toomim (Toomim Bros) via bitcoin-dev ? 2015-09-29 09:30 ?
> ?:
>> SPV clients will appear to behave normally, and will continue to
>> show new transactions and get confirmations in a timely fashion.
>> However, they will be systematically susceptible to attack from
>> double-spends that attempt to spend funds in a way that the
>> upgraded nodes will reject. These transactions will appear to
>> get 1 confirmation, then regress to zero conf, every single time.
>> These attacks can be performed for as long as someone mines with
>> the old version.
> 
> 1. Who told you to accept 1-confirmation tx? Satoshi recommended 6 
> confirmations in the whitepaper. Take your own risk if you do not
> follow his advice.
> 
> 2. This is true only if your SPV client naively follows the
> longest chain without even looking at the block version. This might
> be good enough for the 1st generation SPV client, but future
> generations should at least have basic fraud detecting mechanism.
> 
> 

Regarding "basic fraud detecting mechanism" of which you speak, being
as I personally enjoy SPV for the time being (Electrum), and I know
that people will continue to keep using SPV wallets because they are
light and handy, I think that you make a good point that "basic fraud
detecting mechanism" is needed, but how to verify that such a
mechanism in an SPV wallet is good, and/or that the software and
version information provided by the server admins via the banner is
valid (being as it's not validated)?  I have made a thread on this
conundrum.  Which is posted here if you are interested.

https://bitcointalk.org/index.php?topic=1157545.0

So as to avoid repeating stuff please read whole thead before
answering in it or posting back to list.  It seems that there are
definitely unanswered questions...

I may open this up as an issue on https://github.com/spesmilo/electrum
about this stuff, but I wanted to post comment here also, for the record
.


> 
>> If an attacker thinks he could get more than 25 BTC of 
>> double-spends per block, he might even choose to mine with the 
>> obsolete version in order to get predictable orphans and to trick
>> SPV clients and fully verifying wallets on the old version.
> 
> This point is totally irrelevant. No matter there is a softfork or
> not, SPV users are always vulnerable to such double-spending attack
> if they blindly follow the longest chain AND accept 1-confirmation.
> The fiat currency system might be safer for them. 
> _______________________________________________ bitcoin-dev mailing
> list bitcoin-dev at lists.linuxfoundation.org 
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev

- -- 
http://abis.io ~
"a protocol concept to enable decentralization
and expansion of a giving economy, and a new social good"
https://keybase.io/odinn
-----BEGIN PGP SIGNATURE-----

iQEcBAEBCgAGBQJWCuyBAAoJEGxwq/inSG8CtpAH/R6N1QYzMFWPo75RsP46VYbi
k33QbsbhlEznEEWX/ayKEzmnbt7DkXFXQtesuabongFr9UpwxED0OGQJztyRz5NC
iS8ty+Kfi9/Aq/e79A6IPSYfRCPB1w+oP/cEsV/LB4BPkut2mdpMbdwDZ3TQuLRq
LnFLmz8tY+CUqSbyrPUx/FKJ7ZbQsAlammMTKoUYaAYRytDBPzW4PdYtTyrK2QTK
jjt11n5U8ShmXdsCo/E0pWVbggQlhFgrCoIYjGNfmDyK/eYaskD5O6czIdqd5WPs
P+2zMC1Cukkr5l8BQXiSedVXGpMyaYhMgWB7MD6sNDIAE9IFbfEpkse/Ek4aJII=
=Ud4C
-----END PGP SIGNATURE-----

From laanwj at gmail.com  Tue Sep 29 20:03:04 2015
From: laanwj at gmail.com (Wladimir J. van der Laan)
Date: Tue, 29 Sep 2015 22:03:04 +0200
Subject: [bitcoin-dev] Let's deploy BIP65 CHECKLOCKTIMEVERIFY!
In-Reply-To: <20150927185031.GA20599@savin.petertodd.org>
References: <20150927185031.GA20599@savin.petertodd.org>
Message-ID: <20150929200302.GA5051@amethyst.visucore.com>

On Sun, Sep 27, 2015 at 02:50:31PM -0400, Peter Todd via bitcoin-dev wrote:

> It's time to deploy BIP65 CHECKLOCKTIMEVERIFY.

There appears to be common agreement on that.

The only source of some controversy is how to deploy: versionbits versus
IsSuperMajority. I think the versionbits proposal should first have code
out there for longer before we consider it for concrete softforks. Haste-ing
along versionbits because CLTV is wanted would be risky.

> I've backported the CLTV op-code and a IsSuperMajority() soft-fork to
> the v0.10 and v0.11 branches, pull-reqs #6706 and #6707 respectively. A
> pull-req for git HEAD for the soft-fork deployment has been open since
> June 28th, #6351 - the opcode implementation itself was merged two
> months ago.

> We should release a v0.10.3 and v0.11.1 with CLTV and get the ball
> rolling on miner adoption. We have consensus that we need CLTV, we have
> a well tested implementation, and we have a well-tested deployment
> mechanism. 

As you say, the underlying code has been merged for months in master, and #6351
seems to have had quite some eyes on it already.

It does need to be made sure that the backports are correct, however.
Although the tests do provide some assurance, I think those two pulls
require more review.

After they are merged, a 0.10.3 and 0.11.1 release can be rolled out (with RC
cycle).

> We also don't need to wait for other soft-fork proposals to
> catch up - starting the CLTV deployment process isn't going to delay
> future soft-forks, or for that matter, hard-forks.
> 
> I think it's possible to safely get CLTV live on mainnet before the end
> of the year. It's time we get this over with and done.

Wladimir


From gmaxwell at gmail.com  Tue Sep 29 20:31:43 2015
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Tue, 29 Sep 2015 20:31:43 +0000
Subject: [bitcoin-dev] Are 'soft forks' misnamed? [was: Let's deploy BIP65
	CHECKLOCKTIMEVERIFY!]
Message-ID: <CAAS2fgT-EjevwhCLJGx4U=7BOQ6z4ExL12_i_QBpuKA5vDzXTA@mail.gmail.com>

On Mon, Sep 28, 2015 at 10:16 PM, Dave Scotese via bitcoin-dev
<bitcoin-dev at lists.linuxfoundation.org> wrote:
> Why are they called soft forks when they are really hidden forks?  Isn't the
> point of a soft fork to prevent old clients from rejecting what they don't
> have the code to validate?  That seems dangerous.

As an aside, this list loses utility if people insist on taking
tangential questions to the list in the middle of threads. It's
preferable to either split the thread or take the message off list.

The naming arose from a series of historical naming-by-comparisons:

The bitcoin network has self-arising forks in state when miners
concurrently create blocks. These are natural, unavoidable, and
self-resolving.

If a nodes enforce different and incompatible rules-- for example,
some decide to require that the subsidy stay at 25 BTC forever, then a
fork may come into existence which is not self resolvable.

Thus the term hardfork arose to talk about rule changes which were
incompatible with the existing network, would require all users to
upgrade, would exclude all non-consenting users from the resulting
system, and which have the power to arbitrarily rewrite rules.  This
is in contrast to "forks" which are boring, natural, and happen every
day.

Its often possible to make critical fixes and powerful improvements to
the Bitcoin consensus rules by using the unavoidable power of miners
to filter transactions according to their own rules.  New features and
fixes can be carved out of existing "do anything" space in the
protocol: like carving a statue out of a block of marble. Doing so
reduces the incidence of flag days which are costly to coordinate and
actively risky for users and avoids forcing constant software churn,
which is bad for decentralization. Such changes are a strict narrowing
of permissible actions. And as such, so long as they have a
super-majority hashpower behind them any network forking that happens
to result from them is automatically self-resolving.

So by contrast with hardfork the term softfork came into use to
describe these _compatible_ protocol rule changes.

There is explicit support for compatible rule changes the bitcoin
protocol in the form of no-op opcodes and free form, non-enforced,
version fields (for example). Every fix or enhancement you've heard
about to Bitcoin's consensus rules (going back to the system's
original author) was performed via some form of this mechanism.

In the modern form, the behavior to be soft-forked out is first made
non-standard (if it wasn't already-- they almost always are) meaning
that participants will not relay, mine, or display unconfirmed txn in
their wallets transactions which violate the new rule.  But if a
violation shows up in a block, the block is still accepted.  After
that the blockchain itself is used to coordinate a vast super-majority
of hashpower (recently 95% has been used) agreeing to enforce the new
rule which results in confidence confidence of low disruption on
account of the enforcement. Then when the threshold is reached, they
enforce (automatically).  Old software continues to enforce all the
old rules they always enforced, the only difference in behavior
relates to non-standard transactions and contests between otherwise
valid blocks.  Even unupgraded participants can tell that the network
is doing something new on account of the block version changing (and,
for example, Bitcoin Core warns users about this).

The primary disadvantage of this approach is that it only allowed you
to carve functionality of of "do anything" space, which is quite
natural for some features (especially since the Bitcoin protocol
includes tons of do anything space)--- e.g. height in coinbase, DER
strictness, transactions that have integer overflow creating a
kazillion coins-- but less natural for others.

Of course, it's always possible for the majority of hashpower to have
hidden transaction exclusion rules that _no one_ but them knows about
and this cannot be prevented, but at least the mechanism proscribed in
modern soft-forks is transparent (the network tells you that its doing
something you don't understand).

From jgarzik at gmail.com  Tue Sep 29 21:07:53 2015
From: jgarzik at gmail.com (Jeff Garzik)
Date: Tue, 29 Sep 2015 17:07:53 -0400
Subject: [bitcoin-dev] Bitcoin mining idea
In-Reply-To: <CA+9tygJVkaxegAGjpFA_MutU-xChgS5FK4+JKAR=14k0Ctbm8g@mail.gmail.com>
References: <CA+9tygJVkaxegAGjpFA_MutU-xChgS5FK4+JKAR=14k0Ctbm8g@mail.gmail.com>
Message-ID: <CADm_WcYqb82VRNrSFMgJgqz38YA9Ew28ZWz4kq_8aM4uhWcbHQ@mail.gmail.com>

This is off-topic for this list.



On Sun, Sep 27, 2015 at 1:53 PM, Neil Haran via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> Hi,
>
> I have an idea for a gamified bitcoin mining app that I'd like to partner
> with someone on that is very good with cryptography and knows the bitcoin
> code base well. I have received interest in this from some, but I'm looking
> for the ideal candidate to work with. If this is of interest, please email
> me at nharan81 at gmail.com.
>
> Thanks,
> Neil
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150929/e2679f89/attachment.html>

From jgarzik at gmail.com  Tue Sep 29 21:22:58 2015
From: jgarzik at gmail.com (Jeff Garzik)
Date: Tue, 29 Sep 2015 17:22:58 -0400
Subject: [bitcoin-dev] Bitcoin Core 0.12.0 release schedule
In-Reply-To: <20150924112555.GA21355@amethyst.visucore.com>
References: <20150924112555.GA21355@amethyst.visucore.com>
Message-ID: <CADm_WcY9Qd7OKJTr_H0YUVo4PAkV2tKrjQ-0-iTV5ogNrQtnkw@mail.gmail.com>

ACK


On Thu, Sep 24, 2015 at 7:25 AM, Wladimir J. van der Laan via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> Hello all,
>
> The next major release of Bitcoin Core, 0.12.0 is planned for the end of
> the year. Let's propose a more detailed schedule:
>
> 2015-11-01
> -----------
> - Open Transifex translations for 0.12
> - Soft translation string freeze (no large or unnecessary changes)
> - Finalize and close translation for 0.10
>
> 2015-12-01
> -----------
> - Feature freeze
> - Translation string freeze
>
> In December at least I will probably not get much done code-wise (Scaling
> Bitcoin Hongkong, 32C3, end of year festivities, etc), and I'm sure I'm not
> the only one, so let's leave that for last pre-RC bugfixes and polishing.
>
> 2016-01-06
> -----------
> - Split off `0.12` branch from `master`
> - Start RC cycle, tag and release `0.12.0rc1`
> - Start merging for 0.13 on master branch
>
> 2016-02-01
> -----------
> - Release 0.12.0 final (aim)
>
> Wladimir
>
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150929/8eba3a72/attachment-0001.html>

From milly at bitcoins.info  Tue Sep 29 22:58:37 2015
From: milly at bitcoins.info (Milly Bitcoin)
Date: Tue, 29 Sep 2015 18:58:37 -0400
Subject: [bitcoin-dev] Bitcoin mining idea
In-Reply-To: <CADm_WcYqb82VRNrSFMgJgqz38YA9Ew28ZWz4kq_8aM4uhWcbHQ@mail.gmail.com>
References: <CA+9tygJVkaxegAGjpFA_MutU-xChgS5FK4+JKAR=14k0Ctbm8g@mail.gmail.com>
	<CADm_WcYqb82VRNrSFMgJgqz38YA9Ew28ZWz4kq_8aM4uhWcbHQ@mail.gmail.com>
Message-ID: <560B179D.6090007@bitcoins.info>

On 9/29/2015 5:07 PM, Jeff Garzik via bitcoin-dev wrote:
> This is off-topic for this list.

You like to go around pretending you are in charge and telling people 
what to do.  You have no such authority and your time is probably better 
spent reviewing your company's Bitcoin handling and security procedures 
instead of trying to bully people all the time.

Russ



From j at toom.im  Tue Sep 29 23:02:39 2015
From: j at toom.im (Jonathan Toomim (Toomim Bros))
Date: Tue, 29 Sep 2015 16:02:39 -0700
Subject: [bitcoin-dev] Bitcoin mining idea
In-Reply-To: <560B179D.6090007@bitcoins.info>
References: <CA+9tygJVkaxegAGjpFA_MutU-xChgS5FK4+JKAR=14k0Ctbm8g@mail.gmail.com>
	<CADm_WcYqb82VRNrSFMgJgqz38YA9Ew28ZWz4kq_8aM4uhWcbHQ@mail.gmail.com>
	<560B179D.6090007@bitcoins.info>
Message-ID: <1F0791B0-F560-404A-A449-57F0684BC6AB@toom.im>

Making statements about a developer's personal character is also off-topic for this list.

On Sep 29, 2015, at 3:58 PM, Milly Bitcoin via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:

> On 9/29/2015 5:07 PM, Jeff Garzik via bitcoin-dev wrote:
>> This is off-topic for this list.
> 
> You like to go around pretending you are in charge and telling people what to do.  You have no such authority and your time is probably better spent reviewing your company's Bitcoin handling and security procedures instead of trying to bully people all the time.
> 
> Russ
> 
> 
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 496 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150929/48b57d13/attachment.sig>

From milly at bitcoins.info  Tue Sep 29 23:16:03 2015
From: milly at bitcoins.info (Milly Bitcoin)
Date: Tue, 29 Sep 2015 19:16:03 -0400
Subject: [bitcoin-dev] Bitcoin mining idea
In-Reply-To: <1F0791B0-F560-404A-A449-57F0684BC6AB@toom.im>
References: <CA+9tygJVkaxegAGjpFA_MutU-xChgS5FK4+JKAR=14k0Ctbm8g@mail.gmail.com>
	<CADm_WcYqb82VRNrSFMgJgqz38YA9Ew28ZWz4kq_8aM4uhWcbHQ@mail.gmail.com>
	<560B179D.6090007@bitcoins.info>
	<1F0791B0-F560-404A-A449-57F0684BC6AB@toom.im>
Message-ID: <560B1BB3.5050704@bitcoins.info>

On 9/29/2015 7:02 PM, Jonathan Toomim (Toomim Bros) wrote:
> Making statements about a developer's personal character is also off-topic for this list.

If that were true then probably 20-30% of the posting here would be 
off-topic.  lol.

Russ



From jgarzik at gmail.com  Tue Sep 29 23:54:43 2015
From: jgarzik at gmail.com (Jeff Garzik)
Date: Tue, 29 Sep 2015 19:54:43 -0400
Subject: [bitcoin-dev] Bitcoin mining idea
In-Reply-To: <560B1BB3.5050704@bitcoins.info>
References: <CA+9tygJVkaxegAGjpFA_MutU-xChgS5FK4+JKAR=14k0Ctbm8g@mail.gmail.com>
	<CADm_WcYqb82VRNrSFMgJgqz38YA9Ew28ZWz4kq_8aM4uhWcbHQ@mail.gmail.com>
	<560B179D.6090007@bitcoins.info>
	<1F0791B0-F560-404A-A449-57F0684BC6AB@toom.im>
	<560B1BB3.5050704@bitcoins.info>
Message-ID: <CADm_WcaKCt0nSLAuohnCP9E4nvO2oj-ZQ6t1S_xHT7AQ5WqT6g@mail.gmail.com>

On Tue, Sep 29, 2015 at 7:16 PM, Milly Bitcoin via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> On 9/29/2015 7:02 PM, Jonathan Toomim (Toomim Bros) wrote:
>
>> Making statements about a developer's personal character is also
>> off-topic for this list.
>>
>
> If that were true then probably 20-30% of the posting here would be
> off-topic.  lol.


Yes - that is the reason why a discussion list is being created, as an
outlet for off-topic discussions.  The consensus of the developers that
created this bitcoin-dev list a short time ago is of being turned off due
to the off-topic noise, impacting productivity.

Since 2011 and bitcoin-development, the list was always intended to focus
on the highly technical bits of the core software, and avoid wandering into
never-ending philosophical discussions.  Example:
http://lists.linuxfoundation.org/pipermail/bitcoin-dev/2011-June/thread.html








>
>
> Russ
>
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150929/fcf5c011/attachment.html>

From milly at bitcoins.info  Wed Sep 30 00:07:31 2015
From: milly at bitcoins.info (Milly Bitcoin)
Date: Tue, 29 Sep 2015 20:07:31 -0400
Subject: [bitcoin-dev] Bitcoin mining idea
In-Reply-To: <CADm_WcaKCt0nSLAuohnCP9E4nvO2oj-ZQ6t1S_xHT7AQ5WqT6g@mail.gmail.com>
References: <CA+9tygJVkaxegAGjpFA_MutU-xChgS5FK4+JKAR=14k0Ctbm8g@mail.gmail.com>
	<CADm_WcYqb82VRNrSFMgJgqz38YA9Ew28ZWz4kq_8aM4uhWcbHQ@mail.gmail.com>
	<560B179D.6090007@bitcoins.info>
	<1F0791B0-F560-404A-A449-57F0684BC6AB@toom.im>
	<560B1BB3.5050704@bitcoins.info>
	<CADm_WcaKCt0nSLAuohnCP9E4nvO2oj-ZQ6t1S_xHT7AQ5WqT6g@mail.gmail.com>
Message-ID: <560B27C3.3060404@bitcoins.info>

> Since 2011 and bitcoin-development, the list was always intended to
> focus on the highly technical bits of the core software, and avoid
> wandering into never-ending philosophical discussions.  Example:
> http://lists.linuxfoundation.org/pipermail/bitcoin-dev/2011-June/thread.html

What happened years ago is not really relevant as Bitcoin has changed 
and the stakeholders have expanded.  What is relevant is the actual 
description.  Whatever you want to discuss it should be clearly 
described when people sign up.

Russ



From jgarzik at gmail.com  Wed Sep 30 00:10:57 2015
From: jgarzik at gmail.com (Jeff Garzik)
Date: Tue, 29 Sep 2015 20:10:57 -0400
Subject: [bitcoin-dev] Bitcoin mining idea
In-Reply-To: <560B27C3.3060404@bitcoins.info>
References: <CA+9tygJVkaxegAGjpFA_MutU-xChgS5FK4+JKAR=14k0Ctbm8g@mail.gmail.com>
	<CADm_WcYqb82VRNrSFMgJgqz38YA9Ew28ZWz4kq_8aM4uhWcbHQ@mail.gmail.com>
	<560B179D.6090007@bitcoins.info>
	<1F0791B0-F560-404A-A449-57F0684BC6AB@toom.im>
	<560B1BB3.5050704@bitcoins.info>
	<CADm_WcaKCt0nSLAuohnCP9E4nvO2oj-ZQ6t1S_xHT7AQ5WqT6g@mail.gmail.com>
	<560B27C3.3060404@bitcoins.info>
Message-ID: <CADm_Wcbbm7BSK2sCy+xxQ3UasooGdrn4UNMRd2=aJxnBDWmMeA@mail.gmail.com>

On Tue, Sep 29, 2015 at 8:07 PM, Milly Bitcoin via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> What happened years ago is not really relevant as Bitcoin has changed and
>> the stakeholders have expanded.  What is relevant is the actual
>> description.  Whatever you want to discuss it should be clearly described
>> when people sign up.
>>
>
This email's quote excised the "short time ago" bit, which is the other 1/2
of the context.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150929/78c833e5/attachment.html>

From rusty at rustcorp.com.au  Wed Sep 30 02:30:23 2015
From: rusty at rustcorp.com.au (Rusty Russell)
Date: Wed, 30 Sep 2015 12:00:23 +0930
Subject: [bitcoin-dev] Versionbits BIP (009) minor revision proposal.
Message-ID: <87zj04fxkw.fsf@rustcorp.com.au>

Hi all,

        Pieter and Eric pointed out that the current BIP has miners
turning off the bit as soon as it's locked in (75% testnet / 95%
mainnet).  It's better for them to keep setting the bit until activation
(2016 blocks later), so network adoption is visible.

I'm not proposing another suggestion, though I note it for future:
miners keep setting the bit for another 2016 blocks after activation,
and have a consensus rule that rejects blocks without the bit.  That
would "force" upgrades on those last miners.  I feel we should see how
this works first.

Cheers,
Rusty.

diff --git a/bip-0009.mediawiki b/bip-0009.mediawiki
index c17ca15..b160810 100644
--- a/bip-0009.mediawiki
+++ b/bip-0009.mediawiki
@@ -37,14 +37,15 @@ retarget period.
 Software which supports the change should begin by setting B in all blocks
 mined until it is resolved.
 
-    if (BState == defined) {
+    if (BState != activated && BState != failed) {
         SetBInBlock();
     }
 
 '''Success: Lock-in Threshold'''
 If bit B is set in 1916 (1512 on testnet) or
 more of the 2016 blocks within a retarget period, it is considered
-''locked-in''.  Miners should stop setting bit B.
+''locked-in''.  Miners should continue setting bit B, so uptake is
+visible.
 
     if (NextBlockHeight % 2016 == 0) {
         if (BState == defined && Previous2016BlocksCountB() >= 1916) {
@@ -57,7 +58,7 @@ more of the 2016 blocks within a retarget period, it is considered
 The consensus rules related to ''locked-in'' soft fork will be enforced in
 the second retarget period; ie. there is a one retarget period in
 which the remaining 5% can upgrade.  At the that activation block and
-after, the bit B may be reused for a different soft fork.
+after, miners should stop setting bit B, which may be reused for a different soft fork.
 
     if (BState == locked-in && NextBlockHeight == BActiveHeight) {
         BState = activated;

From rusty at rustcorp.com.au  Wed Sep 30 02:05:47 2015
From: rusty at rustcorp.com.au (Rusty Russell)
Date: Wed, 30 Sep 2015 11:35:47 +0930
Subject: [bitcoin-dev] [BIP Proposal] Version bits with timeout and
	delay.
In-Reply-To: <5602F075.4000102@thinlink.com>
References: <87mvwqb132.fsf@rustcorp.com.au> <5602F075.4000102@thinlink.com>
Message-ID: <8737xwhdac.fsf@rustcorp.com.au>

Tom Harding via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org>
writes:
> On 9/13/2015 11:56 AM, Rusty Russell via bitcoin-dev wrote:
>> '''Success: Activation Delay'''
>> The consensus rules related to ''locked-in'' soft fork will be enforced in
>> the second retarget period; ie. there is a one retarget period in
>> which the remaining 5% can upgrade.  At the that activation block and
>> after, the bit B may be reused for a different soft fork.
>>
>
> Rather than a simple one-period delay, should there be a one-period 
> "burn-in" to show sustained support of the threshold?  During this 
> period, support must continuously remain above the threshold.  Any lapse 
> resets to inactivated state.
>
> With a simple delay, you can have the embarrassing situation where 
> support falls off during the delay period and there is far below 
> threshold support just moments prior to enforcement, but enforcement 
> happens anyway.

Yeah, but Gavin's right.  If you can't account for all the corner cases,
all you can do is keep it simple and well defined.

Thanks,
Rusty.

From gmaxwell at gmail.com  Wed Sep 30 02:57:52 2015
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Wed, 30 Sep 2015 02:57:52 +0000
Subject: [bitcoin-dev] Versionbits BIP (009) minor revision proposal.
In-Reply-To: <87zj04fxkw.fsf@rustcorp.com.au>
References: <87zj04fxkw.fsf@rustcorp.com.au>
Message-ID: <CAAS2fgTXP0j6K3sxp=HL9j2-xvO8y_VnpG+iZw9kaxmnxZQjSw@mail.gmail.com>

On Wed, Sep 30, 2015 at 2:30 AM, Rusty Russell <rusty at rustcorp.com.au> wrote:
> Hi all,
>
>         Pieter and Eric pointed out that the current BIP has miners
> turning off the bit as soon as it's locked in (75% testnet / 95%
> mainnet).  It's better for them to keep setting the bit until activation
> (2016 blocks later), so network adoption is visible.
>
> I'm not proposing another suggestion, though I note it for future:
> miners keep setting the bit for another 2016 blocks after activation,
> and have a consensus rule that rejects blocks without the bit.  That
> would "force" upgrades on those last miners.  I feel we should see how
> this works first.


Actually getting rid of the immediate bit forcing was something I
considered to be an advantage of versionbits over prior work.

Consider,  where possible we carve soft fork features out from
non-standard behavior.  Why do we do this?  Primarily so that
non-upgraded miners are not mining invalid transactions which
immediately cause short lived forks once the soft-fork activates.
(Secondarily to protect wallets from unconfirmed TX that won't ever
confirm).

The version forcing, however, guarantees existence of the same forks
that the usage of non-standard prevented!

I can, however, argue it the other way (and probably have in the
past):  The bit is easily checked by thin clients, so thin clients
could use it to reject potentially ill-fated blocks from non-upgraded
miners post switch (which otherwise they couldn't reject without
inspecting the whole thing). This is an improvement over not forcing
the bit, and it's why I was previously in favor of the way the
versions were enforced.  But, experience has played out other ways,
and thin clients have not done anything useful with the version
numbers.

A middle ground might be to require setting the bit for a period of
time after rule enforcing begins, but don't enforce the bit, just
enforce validity of the block under new rules.  Thus a thin client
could treat these blocks with increased skepticism.

From rusty at rustcorp.com.au  Wed Sep 30 04:05:42 2015
From: rusty at rustcorp.com.au (Rusty Russell)
Date: Wed, 30 Sep 2015 13:35:42 +0930
Subject: [bitcoin-dev] Let's deploy BIP65 CHECKLOCKTIMEVERIFY!
In-Reply-To: <20150929200302.GA5051@amethyst.visucore.com>
References: <20150927185031.GA20599@savin.petertodd.org>
	<20150929200302.GA5051@amethyst.visucore.com>
Message-ID: <87wpv8ft61.fsf@rustcorp.com.au>

"Wladimir J. van der Laan via bitcoin-dev"
<bitcoin-dev at lists.linuxfoundation.org> writes:
> On Sun, Sep 27, 2015 at 02:50:31PM -0400, Peter Todd via bitcoin-dev wrote:
>
>> It's time to deploy BIP65 CHECKLOCKTIMEVERIFY.
>
> There appears to be common agreement on that.
>
> The only source of some controversy is how to deploy: versionbits versus
> IsSuperMajority. I think the versionbits proposal should first have code
> out there for longer before we consider it for concrete softforks. Haste-ing
> along versionbits because CLTV is wanted would be risky.

Agreed.  Unfortunately, a simple "block version >= 4" check is
insufficient, due to XT which sets version bits 001....111.

Given that, I suggest using the simple test:

        if (pstart->nVersion & 0x8)
            ++nFound;

Which means:
1) XT won't trigger it.
2) It won't trigger XT.
3) You can simply set block nVersion to 8 for now.
4) We can still use versionbits in parallel later.

Cheers,
Rusty.

From elombrozo at gmail.com  Wed Sep 30 04:46:25 2015
From: elombrozo at gmail.com (Eric Lombrozo)
Date: Wed, 30 Sep 2015 04:46:25 +0000
Subject: [bitcoin-dev] Versionbits BIP (009) minor revision proposal.
In-Reply-To: <CAAS2fgTXP0j6K3sxp=HL9j2-xvO8y_VnpG+iZw9kaxmnxZQjSw@mail.gmail.com>
Message-ID: <ema32ec38f-3384-48e2-9ab3-6064e4c73bde@platinum>

Good points, Greg.

The way I see it, this mechanism isn't really about "voting" - it's 
about deployment of fairly uncontroversial changes with the minimum 
amount of negative disruption. If we have reason to believe a particular 
BIP stands little chance of hitting the 95% mark relatively quickly, 
it's probably better not to deploy it...so this mechanism is most useful 
for adding fairly uncontroversial features provided as default settings 
in product releases - and measuring adoption as best we can before 
activating these features.

The current controversies around things like CLTV, CSV, etc... don't 
seem to revolve around these features themselves - there seems to be 
near-unanimous agreement that these features are good (and most 
disagreements regarding functionality are over quite minor nits, 
really). Instead the controversies are much more likely to be around 
deployment strategies.

While I would like to get some form of explicit acknowledgment from 
miners that a new rule is in effect, the truth of the matter is we still 
lack a means to determine whether or not miners are actually enforcing 
these rules...unless someone happens to mine a block that breaks the new 
rule. This is a bit frustrating...but that's just how it is.

To sum up, Version Bits is not a mechanism for vetting proposed changes 
and building consensus (that should take place BEFORE we assign bits). 
This is a deployment mechanism for fairly uncontroversial changes. 
Either a BIP is relatively quickly adopted with overwhelming 
support...or else perhaps it's best to wait until it has sufficient 
support before attempting deployment (or perhaps not deploy it at all) - 
and ultimately we want these transitions to run as smoothly as possible. 
As long as the BIPs are relatively uncontroversial, miners will most 
likely continue to choose to cooperate in the interest of the health of 
the network (and will use recommended default settings). Once clients 
have better support for this, perhaps we can do more sophisticated 
signaling.


- Eric


------ Original Message ------
From: "Gregory Maxwell" <gmaxwell at gmail.com>
To: "Rusty Russell" <rusty at rustcorp.com.au>
Cc: "Bitcoin Dev" <bitcoin-dev at lists.linuxfoundation.org>; "Peter Todd" 
<pete at petertodd.org>; "Pieter Wuille" <pieter.wuille at gmail.com>; "Eric 
Lombrozo" <elombrozo at gmail.com>
Sent: 9/29/2015 7:57:52 PM
Subject: Re: Versionbits BIP (009) minor revision proposal.

>On Wed, Sep 30, 2015 at 2:30 AM, Rusty Russell <rusty at rustcorp.com.au> 
>wrote:
>>  Hi all,
>>
>>          Pieter and Eric pointed out that the current BIP has miners
>>  turning off the bit as soon as it's locked in (75% testnet / 95%
>>  mainnet).  It's better for them to keep setting the bit until 
>>activation
>>  (2016 blocks later), so network adoption is visible.
>>
>>  I'm not proposing another suggestion, though I note it for future:
>>  miners keep setting the bit for another 2016 blocks after activation,
>>  and have a consensus rule that rejects blocks without the bit.  That
>>  would "force" upgrades on those last miners.  I feel we should see 
>>how
>>  this works first.
>
>
>Actually getting rid of the immediate bit forcing was something I
>considered to be an advantage of versionbits over prior work.
>
>Consider,  where possible we carve soft fork features out from
>non-standard behavior.  Why do we do this?  Primarily so that
>non-upgraded miners are not mining invalid transactions which
>immediately cause short lived forks once the soft-fork activates.
>(Secondarily to protect wallets from unconfirmed TX that won't ever
>confirm).
>
>The version forcing, however, guarantees existence of the same forks
>that the usage of non-standard prevented!
>
>I can, however, argue it the other way (and probably have in the
>past):  The bit is easily checked by thin clients, so thin clients
>could use it to reject potentially ill-fated blocks from non-upgraded
>miners post switch (which otherwise they couldn't reject without
>inspecting the whole thing). This is an improvement over not forcing
>the bit, and it's why I was previously in favor of the way the
>versions were enforced.  But, experience has played out other ways,
>and thin clients have not done anything useful with the version
>numbers.
>
>A middle ground might be to require setting the bit for a period of
>time after rule enforcing begins, but don't enforce the bit, just
>enforce validity of the block under new rules.  Thus a thin client
>could treat these blocks with increased skepticism.


From elombrozo at gmail.com  Wed Sep 30 05:09:51 2015
From: elombrozo at gmail.com (Eric Lombrozo)
Date: Wed, 30 Sep 2015 05:09:51 +0000
Subject: [bitcoin-dev] Versionbits BIP (009) minor revision proposal.
In-Reply-To: <ema32ec38f-3384-48e2-9ab3-6064e4c73bde@platinum>
Message-ID: <em0a6ae99c-b1d5-450f-ab2e-ad085991b9ff@platinum>


>While I would like to get some form of explicit acknowledgment from 
>miners that a new rule is in effect, the truth of the matter is we 
>still lack a means to determine whether or not miners are actually 
>enforcing these rules...unless someone happens to mine a block that 
>breaks the new rule. This is a bit frustrating...but that's just how it 
>is.
>

I should add that hard forks do provide us with a means to determine 
whether or not miners are enforcing the new rules...but generally 
speaking they risk far greater disruption if anything fails to go as 
planned. Between the risk of clients accepting an occasional invalid 
"confirmation" or two and the risk of a total network partition, the 
former seems far less serious. I believe the concerns regarding old 
clients can be remedied to a very large extent by means of a good 
awareness campaign.


- Eric


From adam at cypherspace.org  Wed Sep 30 06:19:56 2015
From: adam at cypherspace.org (Adam Back)
Date: Wed, 30 Sep 2015 02:19:56 -0400
Subject: [bitcoin-dev] Let's deploy BIP65 CHECKLOCKTIMEVERIFY!
In-Reply-To: <87wpv8ft61.fsf@rustcorp.com.au>
References: <20150927185031.GA20599@savin.petertodd.org>
	<20150929200302.GA5051@amethyst.visucore.com>
	<87wpv8ft61.fsf@rustcorp.com.au>
Message-ID: <CALqxMTGOmU76NHP8o7TyLq2t3EJTTyMoz4zCZQFczJX5+O=bOQ@mail.gmail.com>

I think from discussion with Gavin sometime during the montreal
scaling bitcoin workshop, XT maybe willing to make things easy and
adapt what it's doing.  For example in relation to versionBits Gavin
said he'd be willing to update XT with an updated/improved
versionBits, for example.

It seems more sensible to do what is simple and clean and have both
core do that, and XT follow if there is no particular philosophy
debate on a given technical topic.  This seems a quite constructive
approach.

Adam

On 30 September 2015 at 00:05, Rusty Russell via bitcoin-dev
<bitcoin-dev at lists.linuxfoundation.org> wrote:
> "Wladimir J. van der Laan via bitcoin-dev"
> <bitcoin-dev at lists.linuxfoundation.org> writes:
>> On Sun, Sep 27, 2015 at 02:50:31PM -0400, Peter Todd via bitcoin-dev wrote:
>>
>>> It's time to deploy BIP65 CHECKLOCKTIMEVERIFY.
>>
>> There appears to be common agreement on that.
>>
>> The only source of some controversy is how to deploy: versionbits versus
>> IsSuperMajority. I think the versionbits proposal should first have code
>> out there for longer before we consider it for concrete softforks. Haste-ing
>> along versionbits because CLTV is wanted would be risky.
>
> Agreed.  Unfortunately, a simple "block version >= 4" check is
> insufficient, due to XT which sets version bits 001....111.
>
> Given that, I suggest using the simple test:
>
>         if (pstart->nVersion & 0x8)
>             ++nFound;
>
> Which means:
> 1) XT won't trigger it.
> 2) It won't trigger XT.
> 3) You can simply set block nVersion to 8 for now.
> 4) We can still use versionbits in parallel later.
>
> Cheers,
> Rusty.
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev

From richard.olsen at lykkex.com  Wed Sep 30 06:37:07 2015
From: richard.olsen at lykkex.com (Richard Olsen)
Date: Wed, 30 Sep 2015 08:37:07 +0200
Subject: [bitcoin-dev] Design Competition
Message-ID: <CAMLMfDC=y2ySjkK-NsxOv7Z6HDBme1CXqCZ2osE1JQY-A_2AcA@mail.gmail.com>

All,

We are looking for participants in a Bitcoin related competition: the aim
is to build a trading platform (initially for foreign exchange, other
assets will follow) which lets participants settle their trades through the
blockchain via coloured coins. To facilitate a quicker trade
reconciliation, the use of a sidechain is a suggestion but by no means a
requirement. There will be an online briefing event today where we will
outline the requirements in more detail, though much of it we have posted
on our website www.lykkex.com .

As we want this to be a community driven effort rather than something
turning into a proprietary technology, all contributions will be made
available under a MIT license on Github.

I look forward to answering your questions at the online briefing event or
over email,

Thank you and kind regards,
Richard Olsen
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150930/95c65141/attachment-0001.html>

From elombrozo at gmail.com  Wed Sep 30 07:16:01 2015
From: elombrozo at gmail.com (Eric Lombrozo)
Date: Wed, 30 Sep 2015 07:16:01 +0000
Subject: [bitcoin-dev] Design Competition
In-Reply-To: <CAMLMfDC=y2ySjkK-NsxOv7Z6HDBme1CXqCZ2osE1JQY-A_2AcA@mail.gmail.com>
Message-ID: <em8c1e6056-06c6-48e7-b975-ac8fb4dae748@platinum>

I've also got a competition where the object is to build a spaceship 
using only a watermelon, two donkeys, some duct tape, and a fire 
hydrant.

------ Original Message ------
From: "Richard Olsen via bitcoin-dev" 
<bitcoin-dev at lists.linuxfoundation.org>
To: "bitcoin-dev" <bitcoin-dev at lists.linuxfoundation.org>
Sent: 9/29/2015 11:37:07 PM
Subject: [bitcoin-dev] Design Competition

>All,
>
>We are looking for participants in a Bitcoin related competition: the 
>aim is to build a trading platform (initially for foreign exchange, 
>other assets will follow) which lets participants settle their trades 
>through the blockchain via coloured coins. To facilitate a quicker 
>trade reconciliation, the use of a sidechain is a suggestion but by no 
>means a requirement. There will be an online briefing event today where 
>we will outline the requirements in more detail, though much of it we 
>have posted on our website www.lykkex.com .
>
>As we want this to be a community driven effort rather than something 
>turning into a proprietary technology, all contributions will be made 
>available under a MIT license on Github.
>
>I look forward to answering your questions at the online briefing event 
>or over email,
>
>Thank you and kind regards,
>Richard Olsen
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150930/c322b7f5/attachment.html>

From milly at bitcoins.info  Wed Sep 30 11:03:15 2015
From: milly at bitcoins.info (Milly Bitcoin)
Date: Wed, 30 Sep 2015 07:03:15 -0400
Subject: [bitcoin-dev] Design Competition
In-Reply-To: <em8c1e6056-06c6-48e7-b975-ac8fb4dae748@platinum>
References: <em8c1e6056-06c6-48e7-b975-ac8fb4dae748@platinum>
Message-ID: <560BC173.6040805@bitcoins.info>

On 9/30/2015 3:16 AM, Eric Lombrozo via bitcoin-dev wrote:
> I've also got a competition where the object is to build a spaceship
> using only a watermelon, two donkeys, some duct tape, and a fire hydrant.

There are many people interested in starting new services and who are 
interested in hiring developers or at least partnering with them.  This 
is an important part of the ecosystem.  I have noticed both here and on 
Reddit that when someone proposes an idea it goes one of two ways: 
either there is a large amount of interest if the person is well known 
or liked or; the person is accused of being a spammer or made fun of if 
they are not well known or liked.  All this does is make the developers 
look like a small fickle group who actively promote Bitcoin as a an 
insiders' club (much like the Fed).  There should probably be a list 
where people can actively discuss proposed or ongoing projects and look 
for developers to hire.

Russ



From thomas.kerin at gmail.com  Wed Sep 30 12:22:36 2015
From: thomas.kerin at gmail.com (Thomas Kerin)
Date: Wed, 30 Sep 2015 13:22:36 +0100
Subject: [bitcoin-dev] Design Competition
In-Reply-To: <CAMLMfDC=y2ySjkK-NsxOv7Z6HDBme1CXqCZ2osE1JQY-A_2AcA@mail.gmail.com>
References: <CAMLMfDC=y2ySjkK-NsxOv7Z6HDBme1CXqCZ2osE1JQY-A_2AcA@mail.gmail.com>
Message-ID: <CAHv+tb7y5x501SxOuz61311bKgL0u2EaK7bO5_gQ-N+LejAuJw@mail.gmail.com>

Who is funding this?

Why not fund Core development?
On 30 Sep 2015 7:37 am, "Richard Olsen via bitcoin-dev" <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> All,
>
> We are looking for participants in a Bitcoin related competition: the aim
> is to build a trading platform (initially for foreign exchange, other
> assets will follow) which lets participants settle their trades through the
> blockchain via coloured coins. To facilitate a quicker trade
> reconciliation, the use of a sidechain is a suggestion but by no means a
> requirement. There will be an online briefing event today where we will
> outline the requirements in more detail, though much of it we have posted
> on our website www.lykkex.com .
>
> As we want this to be a community driven effort rather than something
> turning into a proprietary technology, all contributions will be made
> available under a MIT license on Github.
>
> I look forward to answering your questions at the online briefing event
> or over email,
>
> Thank you and kind regards,
> Richard Olsen
>
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150930/5e34964e/attachment.html>

From hearn at vinumeris.com  Wed Sep 30 12:30:25 2015
From: hearn at vinumeris.com (Mike Hearn)
Date: Wed, 30 Sep 2015 14:30:25 +0200
Subject: [bitcoin-dev] Let's deploy BIP65 CHECKLOCKTIMEVERIFY!
In-Reply-To: <CALqxMTGOmU76NHP8o7TyLq2t3EJTTyMoz4zCZQFczJX5+O=bOQ@mail.gmail.com>
References: <20150927185031.GA20599@savin.petertodd.org>
	<20150929200302.GA5051@amethyst.visucore.com>
	<87wpv8ft61.fsf@rustcorp.com.au>
	<CALqxMTGOmU76NHP8o7TyLq2t3EJTTyMoz4zCZQFczJX5+O=bOQ@mail.gmail.com>
Message-ID: <CA+w+GKRd69kOiDKE_56vnbZ=Hx4hhXqtzpsVT6Z+fx005zW_MQ@mail.gmail.com>

>
> I think from discussion with Gavin sometime during the montreal
> scaling bitcoin workshop, XT maybe willing to make things easy and
> adapt what it's doing.


If Core ships CLTV as is, then XT will have to adopt it - such is the
nature of a consensus system.

This will not change the fact that the rollout strategy is bad and nobody
has answered my extremely basic question: *why* is it being done in this
way, given the numerous downsides?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150930/a5fc7897/attachment.html>

From jgarzik at gmail.com  Wed Sep 30 12:40:48 2015
From: jgarzik at gmail.com (Jeff Garzik)
Date: Wed, 30 Sep 2015 08:40:48 -0400
Subject: [bitcoin-dev] Design Competition
In-Reply-To: <CAMLMfDC=y2ySjkK-NsxOv7Z6HDBme1CXqCZ2osE1JQY-A_2AcA@mail.gmail.com>
References: <CAMLMfDC=y2ySjkK-NsxOv7Z6HDBme1CXqCZ2osE1JQY-A_2AcA@mail.gmail.com>
Message-ID: <CADm_WcbGme=7iiQcSrmBD1Qs_1wpGH7SP1NYnznTeuNQUSyppg@mail.gmail.com>

This sounds like a cool competition; it is also off-topic for this mailing
list, which is focused on bitcoin protocol and reference implementation
development.


On Wed, Sep 30, 2015 at 2:37 AM, Richard Olsen via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> All,
>
> We are looking for participants in a Bitcoin related competition: the aim
> is to build a trading platform (initially for foreign exchange, other
> assets will follow) which lets participants settle their trades through the
> blockchain via coloured coins. To facilitate a quicker trade
> reconciliation, the use of a sidechain is a suggestion but by no means a
> requirement. There will be an online briefing event today where we will
> outline the requirements in more detail, though much of it we have posted
> on our website www.lykkex.com .
>
> As we want this to be a community driven effort rather than something
> turning into a proprietary technology, all contributions will be made
> available under a MIT license on Github.
>
> I look forward to answering your questions at the online briefing event
> or over email,
>
> Thank you and kind regards,
> Richard Olsen
>
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150930/9cb0c23d/attachment.html>

From richard.olsen at lykkex.com  Wed Sep 30 13:17:24 2015
From: richard.olsen at lykkex.com (richard.olsen at lykkex.com)
Date: Wed, 30 Sep 2015 15:17:24 +0200
Subject: [bitcoin-dev] Design Competition
In-Reply-To: <CAHv+tb7y5x501SxOuz61311bKgL0u2EaK7bO5_gQ-N+LejAuJw@mail.gmail.com>
References: <CAMLMfDC=y2ySjkK-NsxOv7Z6HDBme1CXqCZ2osE1JQY-A_2AcA@mail.gmail.com>
	<CAHv+tb7y5x501SxOuz61311bKgL0u2EaK7bO5_gQ-N+LejAuJw@mail.gmail.com>
Message-ID: <DBAB84C5-6F81-4328-9D97-A82458504480@lykkex.com>

Lykke Corp based in Z?rich funds the competition.

2 Mio Lykke coins (8'000 USD) is allocated to funding core development in next 3 months,

Richard

> On 30.09.2015, at 14:22, Thomas Kerin <thomas.kerin at gmail.com> wrote:
> 
> Who is funding this?
> 
> Why not fund Core development?
> 
>> On 30 Sep 2015 7:37 am, "Richard Olsen via bitcoin-dev" <bitcoin-dev at lists.linuxfoundation.org> wrote:
>> All, 
>> 
>> We are looking for participants in a Bitcoin related competition: the aim is to build a trading platform (initially for foreign exchange, other assets will follow) which lets participants settle their trades through the blockchain via coloured coins. To facilitate a quicker trade reconciliation, the use of a sidechain is a suggestion but by no means a requirement. There will be an online briefing event today where we will outline the requirements in more detail, though much of it we have posted on our website  www.lykkex.com . 
>> 
>> As we want this to be a community driven  effort rather than something turning into a proprietary technology, all contributions will be made available under a MIT license on Github. 
>> 
>> I look forward to answering your questions at the online briefing event or over email,
>> 
>> Thank you and kind regards,
>> Richard Olsen 
>> 
>> 
>> _______________________________________________
>> bitcoin-dev mailing list
>> bitcoin-dev at lists.linuxfoundation.org
>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150930/55961225/attachment-0001.html>

From benjamin.l.cordes at gmail.com  Wed Sep 30 13:38:14 2015
From: benjamin.l.cordes at gmail.com (Benjamin)
Date: Wed, 30 Sep 2015 15:38:14 +0200
Subject: [bitcoin-dev] Design Competition
In-Reply-To: <DBAB84C5-6F81-4328-9D97-A82458504480@lykkex.com>
References: <CAMLMfDC=y2ySjkK-NsxOv7Z6HDBme1CXqCZ2osE1JQY-A_2AcA@mail.gmail.com>
	<CAHv+tb7y5x501SxOuz61311bKgL0u2EaK7bO5_gQ-N+LejAuJw@mail.gmail.com>
	<DBAB84C5-6F81-4328-9D97-A82458504480@lykkex.com>
Message-ID: <CAOoPuRafA8qW_errTh+VhLcQgOMYpTGu8o0wxiFUrpObiqacFA@mail.gmail.com>

Hi Richard,

its great that people with a lot of experience in financial markets take
interest in these topics. I don't think you will receive the best answers
here. The Bitcointalk Altcoin section is currently the best place for such
announcements. I believe there is room for a better board/list for new 2.0
projects. Bitcoin dev is not very welcoming to discussions/debates/projects
which go beyond digital cash systems (assets, markets, etc.), as it is very
focused on the core problems which are under-funded.

Anyone who wants to build a better venue for 2.0 projects feel free to
contact me. This could be a mailing list or an upgraded message board. Most
such boards are project/currency specific, but there is one missing for
announcements.

In terms of markets on top of blockchains, I have sent a private email.

Regards,
Benjamin

On Wed, Sep 30, 2015 at 3:17 PM, Richard Olsen via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> Lykke Corp based in Z?rich funds the competition.
>
> 2 Mio Lykke coins (8'000 USD) is allocated to funding core development in
> next 3 months,
>
> Richard
>
> On 30.09.2015, at 14:22, Thomas Kerin <thomas.kerin at gmail.com> wrote:
>
> Who is funding this?
>
> Why not fund Core development?
> On 30 Sep 2015 7:37 am, "Richard Olsen via bitcoin-dev" <
> bitcoin-dev at lists.linuxfoundation.org> wrote:
>
>> All,
>>
>> We are looking for participants in a Bitcoin related competition: the aim
>> is to build a trading platform (initially for foreign exchange, other
>> assets will follow) which lets participants settle their trades through the
>> blockchain via coloured coins. To facilitate a quicker trade
>> reconciliation, the use of a sidechain is a suggestion but by no means a
>> requirement. There will be an online briefing event today where we will
>> outline the requirements in more detail, though much of it we have posted
>> on our website www.lykkex.com .
>>
>> As we want this to be a community driven effort rather than something
>> turning into a proprietary technology, all contributions will be made
>> available under a MIT license on Github.
>>
>> I look forward to answering your questions at the online briefing event
>> or over email,
>>
>> Thank you and kind regards,
>> Richard Olsen
>>
>>
>> _______________________________________________
>> bitcoin-dev mailing list
>> bitcoin-dev at lists.linuxfoundation.org
>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>
>>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150930/c28a42b2/attachment.html>

From jtimon at jtimon.cc  Wed Sep 30 15:55:52 2015
From: jtimon at jtimon.cc (=?UTF-8?B?Sm9yZ2UgVGltw7Nu?=)
Date: Wed, 30 Sep 2015 17:55:52 +0200
Subject: [bitcoin-dev] Let's deploy BIP65 CHECKLOCKTIMEVERIFY!
In-Reply-To: <CA+w+GKRd69kOiDKE_56vnbZ=Hx4hhXqtzpsVT6Z+fx005zW_MQ@mail.gmail.com>
References: <20150927185031.GA20599@savin.petertodd.org>
	<20150929200302.GA5051@amethyst.visucore.com>
	<87wpv8ft61.fsf@rustcorp.com.au>
	<CALqxMTGOmU76NHP8o7TyLq2t3EJTTyMoz4zCZQFczJX5+O=bOQ@mail.gmail.com>
	<CA+w+GKRd69kOiDKE_56vnbZ=Hx4hhXqtzpsVT6Z+fx005zW_MQ@mail.gmail.com>
Message-ID: <CABm2gDqkTizK1TtGGM4fFp4xWMUhAstVOvnJ4_3VKaGNoSX0eg@mail.gmail.com>

On Tue, Sep 29, 2015 at 2:07 PM, Mike Hearn <hearn at vinumeris.com> wrote:
> Hi Jorge,
>
>> Yes, there is a difference. Assuming the hashrate majority upgrades, in
>> the case of a softfork [snip] ...... In the case of a hardfork [snip]
>
> Yes, I know what the difference between them is at a technical level. You
> didn't explain why this would make any difference to how fast miners
> upgrade. The amount of money they lose in both cases is identical: they are
> equally incentivised to upgrade with both fork types.
>
> Additionally, you say in a hard fork the other chain may "continue forever".
> Why do you think this is not true for miners building invalid blocks on top
> of the main chain? Why would that not continue forever?

I didn't talked about how fast miners would upgrade, please read again
because I believe I was extremely precise.
In both cases I'm assuming there's a minority of the hasrate which
doesn't upgrade.
In the softfork case, the minority will always build on top of the
longest chain (which is valid to them). There may be many little
alternative chains that are ignored (and orphaned) by the upgraded
miners, but non-upgraded miners will always build on top of the
longest chain.

In the hardfork case, non-upgraded miners will reject the upgraded
chain because it is invalid to them, so they will build on top of the
longest non-upgraded chains.
Two alternative chains will continue growing forever unless the
non-upgraded miners eventually upgrade.
In contrast, there won't be 2 alternative chains growing forever in
the softfork case even if the minority miners never upgrade.

> There just isn't any difference between the two fork types in terms of how
> fast miners would upgrade. Heck if anything, a hard fork should promote
> faster upgrades, because if a miner isn't paying attention to their
> debug.log they might miss the warnings. A soft fork would then look
> identical to a run of really bad luck, which can legitimately happen from
> time to time. A hard fork results in your node having a different height to
> everyone else, which is easily detectable by just checking a block explorer.
>>
>> This discussion about the general desirability of softforks seems offtopic
>> for the concrete cltv deployment discussion, which assumes softforks as
>> deployment mechanism (just like bip66 assumed it).
>
> Isn't that circular? This thread is about deployment of CLTV, but the BIP
> assumes a particular mechanism, so pointing out problems with it is off
> topic? Why have a thread at all?

BIP99 recommends an uncontroversial softfork for this kind of case.
You seem to be contradicting BIP99 in many other places. Maybe you
want to complain about some of the recommendations in BIP99 (instead
of everywhere else):

https://github.com/bitcoin/bips/pull/181

On Wed, Sep 30, 2015 at 2:30 PM, Mike Hearn via bitcoin-dev
<bitcoin-dev at lists.linuxfoundation.org> wrote:
> This will not change the fact that the rollout strategy is bad and nobody
> has answered my extremely basic question: why is it being done in this way,
> given the numerous downsides?

You seem to be the only one who thinks that softforks have "numerous
downsides" over hardforks.
So everybody just basically disagrees with the assumption in your
question and thus nobody can answer it.

From jtimon at jtimon.cc  Wed Sep 30 16:14:42 2015
From: jtimon at jtimon.cc (=?UTF-8?B?Sm9yZ2UgVGltw7Nu?=)
Date: Wed, 30 Sep 2015 18:14:42 +0200
Subject: [bitcoin-dev] Is it possible for there to be two chains after a
 hard fork?
In-Reply-To: <CAJfRnm4xNozyynxoTQS25FTCcOw_hwfFfV1V-mVfq+qZ+Q8jVQ@mail.gmail.com>
References: <CABsx9T2pDwNBrC-3w8vHeaLYZ6eoNTNU0gW741Y51YL9hU-kiA@mail.gmail.com>
	<CAJfRnm7gWmXUj=9Dh2o5sEXOMe6Y_4P=naY3cVt1gfLRKOpmnw@mail.gmail.com>
	<CABsx9T0YEm7mFYosRVbcG_XgtSi8BbUraGoixy4e2=nyCBeFaA@mail.gmail.com>
	<CAJfRnm5=yrWE95T3+fzM_PxGxWJ38OnJMVxynTOKK1X9BTrgCg@mail.gmail.com>
	<CA+w+GKTVzaEqWeR9m2ck6z3WZ_OWJ5hgkqyQhriJDLPVoHzfGQ@mail.gmail.com>
	<CAJfRnm4WwtNvChcCGCzDLJZrg3VZqJz-X-XXC0Ftyga3x=P8-w@mail.gmail.com>
	<CABsx9T07DUjWoEmqmysya90Fxf4RkM7K18ZaP7pP3Hgk5rN-_Q@mail.gmail.com>
	<CAJfRnm4xNozyynxoTQS25FTCcOw_hwfFfV1V-mVfq+qZ+Q8jVQ@mail.gmail.com>
Message-ID: <CABm2gDrNLhV-B_+BCFj5FbTZkTuFctTMQZSV45rQAGK8eGbHmg@mail.gmail.com>

Gavin, you assume that users must necessarily always follow the
hashrate majority, but this is not true.
In fact, it is the opposite: market forces make the hashrate follow the users.
Not following the hashrate majority is not necessarily insane.

If some users aren't happy with the new hardfork rules, they may never
upgrade. This is discussed (although I want to improve the text) under
the "Schism hardforks" section of BIP99 (which you may have some
complaints against, so please review
https://github.com/bitcoin/bips/pull/181/files#diff-e331b8631759a4ed6a4cfb4d10f473caR135
).

It is true that users of chain A may sell or their B-coins, but the
opposite is also true: users in chain B may sell all their A-coins.
Speculators will likely sell both and probably not buy again until the
initial uncertainty is gone (or they may never buy again, nobody can
predict this).

Let's use an example. Let's assume that a hardfork is rolled out to
completely remove the blocksize limit (I believe you would be against
that from previous conversations with you).
As long as there are users creating demand for the old-coins, there
will be miners mining the old coins.
This is not insane for neither users or miners no matter how big the
majority of users and/or miners in the new rules chain.

Again, probably the best place to discuss this kind of thing is
https://github.com/bitcoin/bips/pull/181 or the bitcoin-dev thread
linked from the BIP (
http://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-June/008936.html
).


On Tue, Sep 29, 2015 at 8:23 PM, Allen Piscitello via bitcoin-dev
<bitcoin-dev at lists.linuxfoundation.org> wrote:
>>I started this thread as a sanity check on myself, because I keep seeing
>> smart people saying that two chains could persist for more than a few days
>> after a hard fork, and I still don't see how that would possibly work.
>
> When you start with the assumption that anyone who disagrees with you is
> insane or crazy, I can see why you have such difficulty.
>
>
> On Tue, Sep 29, 2015 at 1:01 PM, Gavin Andresen <gavinandresen at gmail.com>
> wrote:
>>
>> We really shouldn't have to go over "Bitcoin 101" on this mailing list,
>> and this discussion should move to the not-yet-created more general
>> discussion list.  I started this thread as a sanity check on myself, because
>> I keep seeing smart people saying that two chains could persist for more
>> than a few days after a hard fork, and I still don't see how that would
>> possibly work.
>>
>> So: "fraud" would be 51% miners sending you bitcoin in exchange for
>> something of value, you wait for confirmations and send them that something
>> of value, and then the 51% reverses the transaction.
>>
>> Running a full node doesn't help.
>>
>> On Tue, Sep 29, 2015 at 1:55 PM, Allen Piscitello
>> <allen.piscitello at gmail.com> wrote:
>>>
>>> >A dishonest miner majority can commit fraud against you, they can mine
>>> > only empty blocks, they can do various other things that render your money
>>> > worthless.
>>>
>>> Mining empty blocks is not fraud.
>>>
>>> If you want to use terms like "honest miners" and "fraud", please define
>>> them so we can at least be on the same page.
>>>
>>> I am defining an honest miner as one that follows the rules of the
>>> protocol.  Obviously your definition is different.
>>>
>>> On Tue, Sep 29, 2015 at 12:51 PM, Mike Hearn <hearn at vinumeris.com> wrote:
>>>>>
>>>>> >because Bitcoin's basic security assumption is that a supermajority of
>>>>> > miners are 'honest.'
>>>>>
>>>>> Only if you rely on SPV.
>>>>
>>>>
>>>> No, you rely on miners honesty even if you run a full node. This is in
>>>> the white paper. A dishonest miner majority can commit fraud against you,
>>>> they can mine only empty blocks, they can do various other things that
>>>> render your money worthless.
>>>
>>>
>>
>>
>>
>> --
>> --
>> Gavin Andresen
>
>
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>

From hearn at vinumeris.com  Wed Sep 30 17:11:56 2015
From: hearn at vinumeris.com (Mike Hearn)
Date: Wed, 30 Sep 2015 19:11:56 +0200
Subject: [bitcoin-dev] Let's deploy BIP65 CHECKLOCKTIMEVERIFY!
In-Reply-To: <CAAS2fgSEDGBd67m7i8zCgNRqtmQrZyZMj7a5TsYo41Dh=tdhHQ@mail.gmail.com>
References: <20150927185031.GA20599@savin.petertodd.org>
	<CA+w+GKRCVr-9TVk66utp7xLRgTxNpxYoj3XQE-6y_N8JS6eO6Q@mail.gmail.com>
	<CAAS2fgSEDGBd67m7i8zCgNRqtmQrZyZMj7a5TsYo41Dh=tdhHQ@mail.gmail.com>
Message-ID: <CA+w+GKRKGS=KZrLtiW8Zbn4EQH_TELfQR+TfrADCMXLR22Q+tw@mail.gmail.com>

Hi Gregory,


> I'm surprised to see this response


Why? I have objected to the idea of soft forks many times. I wrote an
entire article about it in August. I also objected in April 2014, for
instance, where Pieter agreed with me that soft forks can result in ugly
hacks, and that they are "not nice philosophically because they reduce the
security model of former full nodes to SPV without their knowledge" (he
thought they were worth it anyway).

This is not a new debate. If you're surprised, it means only you weren't
paying attention to all the previous times people raised this issue.


> Have I missed a proposal to change BIP101 to be a real hardfork


There's no such thing as a "real" hard fork - don't try and move the goal
posts. SPV clients do not need any changes to do the right thing with BIP
101, they will follow the new chain automatically, so it needs no changes.

Several people have asked several times now: given the very real and widely
acknowledged downsides that come with a soft fork, *what* is the specific
benefit to end users of doing them?

Until that question is answered to my satisfaction I continue to object to
this BIP on the grounds that the deployment creates financial risk
unnecessarily. To repeat: *CLTV does not have consensus at the moment*.

BTW, in the April 2014 thread Pieter's argument was that hard forks are
more risky, which is at least an answer to my question. But he didn't
explain why he thought that. I disagree: the risk level seems lower with a
hard fork because it doesn't lower anyone's security level.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150930/9962a0a6/attachment-0001.html>

From adam at cypherspace.org  Wed Sep 30 17:14:08 2015
From: adam at cypherspace.org (Adam Back)
Date: Wed, 30 Sep 2015 13:14:08 -0400
Subject: [bitcoin-dev] Let's deploy BIP65 CHECKLOCKTIMEVERIFY!
In-Reply-To: <CA+w+GKRd69kOiDKE_56vnbZ=Hx4hhXqtzpsVT6Z+fx005zW_MQ@mail.gmail.com>
References: <20150927185031.GA20599@savin.petertodd.org>
	<20150929200302.GA5051@amethyst.visucore.com>
	<87wpv8ft61.fsf@rustcorp.com.au>
	<CALqxMTGOmU76NHP8o7TyLq2t3EJTTyMoz4zCZQFczJX5+O=bOQ@mail.gmail.com>
	<CA+w+GKRd69kOiDKE_56vnbZ=Hx4hhXqtzpsVT6Z+fx005zW_MQ@mail.gmail.com>
Message-ID: <CALqxMTH_SbWatwwKUbq0KXc9ywgQerOVSfNgB9GrQFjGnpYRoA@mail.gmail.com>

I was talking about the versionBits from Rusty's email (pasted below) and
simplifying that by XT adopting the patch as Gavin had seemed agreeable to.

Adam

Rusty wrote:
> Agreed.  Unfortunately, a simple "block version >= 4" check is
> insufficient, due to XT which sets version bits 001....111.
>
> Given that, I suggest using the simple test:
>
>         if (pstart->nVersion & 0x8)
>             ++nFound;
>
> Which means:
> 1) XT won't trigger it.
> 2) It won't trigger XT.
> 3) You can simply set block nVersion to 8 for now.
> 4) We can still use versionbits in parallel later.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150930/5fec4b01/attachment.html>

From luke at dashjr.org  Wed Sep 30 17:57:42 2015
From: luke at dashjr.org (Luke Dashjr)
Date: Wed, 30 Sep 2015 17:57:42 +0000
Subject: [bitcoin-dev] Bitcoin Core 0.12.0 release schedule
In-Reply-To: <20150924112555.GA21355@amethyst.visucore.com>
References: <20150924112555.GA21355@amethyst.visucore.com>
Message-ID: <201509301757.44035.luke@dashjr.org>

On Thursday, September 24, 2015 11:25:56 AM Wladimir J. van der Laan via 
bitcoin-dev wrote:
> 2015-12-01
> -----------
> - Feature freeze

Where is "Consensus freeze"? Shouldn't this be put off until after the HK 
workshop in case a hardfork is decided on? Or have we de-coupled it from the 
release process entirely anyway (since old versions need an update for it 
too)?

Luke

From jtimon at jtimon.cc  Wed Sep 30 17:58:45 2015
From: jtimon at jtimon.cc (=?UTF-8?B?Sm9yZ2UgVGltw7Nu?=)
Date: Wed, 30 Sep 2015 19:58:45 +0200
Subject: [bitcoin-dev] Let's deploy BIP65 CHECKLOCKTIMEVERIFY!
In-Reply-To: <CA+w+GKRKGS=KZrLtiW8Zbn4EQH_TELfQR+TfrADCMXLR22Q+tw@mail.gmail.com>
References: <20150927185031.GA20599@savin.petertodd.org>
	<CA+w+GKRCVr-9TVk66utp7xLRgTxNpxYoj3XQE-6y_N8JS6eO6Q@mail.gmail.com>
	<CAAS2fgSEDGBd67m7i8zCgNRqtmQrZyZMj7a5TsYo41Dh=tdhHQ@mail.gmail.com>
	<CA+w+GKRKGS=KZrLtiW8Zbn4EQH_TELfQR+TfrADCMXLR22Q+tw@mail.gmail.com>
Message-ID: <CABm2gDrkv3T66=BCBiHYb9h8PY41TFCwpzVR_E7UM0c+QcK-Eg@mail.gmail.com>

On Wed, Sep 30, 2015 at 7:11 PM, Mike Hearn via bitcoin-dev
<bitcoin-dev at lists.linuxfoundation.org> wrote:
> Several people have asked several times now: given the very real and widely
> acknowledged downsides that come with a soft fork, what is the specific
> benefit to end users of doing them?

As previously explained, the biggest advantage of softforks is that
assuming the hasrate majority upgrades, network convergence is
guaranteed.
I don't know of anyone else (apart from you) that believes that the
advantages of softforks are generally worse than those of hardforks.
I'm attempting to clarify everything related to consensus rule changes
in BIP99.

> Until that question is answered to my satisfaction I continue to object to
> this BIP on the grounds that the deployment creates financial risk
> unnecessarily. To repeat: CLTV does not have consensus at the moment.

But your argument is flawed because it assumes softforks are more
risky than hardforks.
You've been explained why this is not the case, so unless you can
explain what's more important for a consensus system than network
convergence I think we can still consider this consensus rule change
uncontroversial, just like BIP66 was (even if you were also unable to
understand the advantages of softforks back then, just like you are
unable to understand them now, as you just proved in your answer to my
explanation). Using BIP99's terminology, this is an "uncontroversial
softfork" and it's therefore the safest option for consensus rule
changes deployment.
I should definitely improve my explanation on why uncontroversial
softforks are preferrable to uncontroversial hardforks in most cases
(and maybe try to come up with an example in which a hardfork is
preferable). I should also explain the disadvantages of
uncontroversial softforks that you have pointed out several times. So
I will mention you in BIP99's PR once I update it with a new section
that talks about the trade offs of uncontroversial softforks vs
uncontroversial hardforks.
In the meantime I believe that we can safely move forwards with BIP65
(again, just like we did with BIP66 ) and I also believe that you, as
an expert in Bitcoin, will eventually be able to understand the
advantages of uncontroversial softforks.
With all due respect, I don't think we need to wait for you to
understand the advantages of softforks to move forward with BIP65,
just like we didn't need to wait for every developer and user to
understand BIP66 to deploy it.
You don't have specific complaints against the new script operator,
and you don't have an uncontroversial hardfork alternative design (or
implementation).
This is a feature that enables new contracts that are important to
Bitcoin. Please don't try to block it just to make a point about what
"uncontroversial" means.

From jtimon at jtimon.cc  Wed Sep 30 18:10:30 2015
From: jtimon at jtimon.cc (=?UTF-8?B?Sm9yZ2UgVGltw7Nu?=)
Date: Wed, 30 Sep 2015 20:10:30 +0200
Subject: [bitcoin-dev] Bitcoin Core 0.12.0 release schedule
In-Reply-To: <201509301757.44035.luke@dashjr.org>
References: <20150924112555.GA21355@amethyst.visucore.com>
	<201509301757.44035.luke@dashjr.org>
Message-ID: <CABm2gDoK4wQDAMHaQH4Zfc+qBPEtEZ=epc05S0738BdQPsheOQ@mail.gmail.com>

Yes, I believe consensus rule changes don't need to be couple with
major releases, there's no problem that I can see in them being minor
releases if they're not ready on time for a major release.

On Wed, Sep 30, 2015 at 7:57 PM, Luke Dashjr via bitcoin-dev
<bitcoin-dev at lists.linuxfoundation.org> wrote:
> On Thursday, September 24, 2015 11:25:56 AM Wladimir J. van der Laan via
> bitcoin-dev wrote:
>> 2015-12-01
>> -----------
>> - Feature freeze
>
> Where is "Consensus freeze"? Shouldn't this be put off until after the HK
> workshop in case a hardfork is decided on? Or have we de-coupled it from the
> release process entirely anyway (since old versions need an update for it
> too)?
>
> Luke
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev

From adam at cypherspace.org  Wed Sep 30 18:15:03 2015
From: adam at cypherspace.org (Adam Back)
Date: Wed, 30 Sep 2015 14:15:03 -0400
Subject: [bitcoin-dev] Let's deploy BIP65 CHECKLOCKTIMEVERIFY!
In-Reply-To: <CA+w+GKRKGS=KZrLtiW8Zbn4EQH_TELfQR+TfrADCMXLR22Q+tw@mail.gmail.com>
References: <20150927185031.GA20599@savin.petertodd.org>
	<CA+w+GKRCVr-9TVk66utp7xLRgTxNpxYoj3XQE-6y_N8JS6eO6Q@mail.gmail.com>
	<CAAS2fgSEDGBd67m7i8zCgNRqtmQrZyZMj7a5TsYo41Dh=tdhHQ@mail.gmail.com>
	<CA+w+GKRKGS=KZrLtiW8Zbn4EQH_TELfQR+TfrADCMXLR22Q+tw@mail.gmail.com>
Message-ID: <CALqxMTGqGbJLFNerw+1goR2g54+vn=ECgzx++_oRznrzJWfd4g@mail.gmail.com>

On 30 September 2015 at 13:11, Mike Hearn via bitcoin-dev
<bitcoin-dev at lists.linuxfoundation.org> wrote:
>> Have I missed a proposal to change BIP101 to be a real hardfork
>
> There's no such thing as a "real" hard fork - don't try and move the goal
> posts. SPV clients do not need any changes to do the right thing with BIP
> 101, they will follow the new chain automatically, so it needs no changes.

BIP101 is a hybrid: in some ways it is a hard-fork and in other ways
it is a soft-fork.  It is a hard-fork to full-nodes, but also a
soft-fork to SPV clients, as by definition the SPV miners are having
changes made whether they approve or not as they are not even aware of
the change.

> To repeat: CLTV does not have consensus at the moment.

I think people are saying CLTV is long discussed and does have consensus.

> Several people have asked several times now: given the very real and widely
> acknowledged downsides that come with a soft fork, what is the specific
> benefit to end users of doing them?
>
> Until that question is answered to my satisfaction I continue to object to
> this BIP on the grounds that the deployment creates financial risk
> unnecessarily.

Let's not conflate CLTV with a discussion about future possible
deployment methods.  Forks are an interesting but different topic.

Soft-forks have a lot of mileage on them at this point, hard-forks do
not, and are anyway inherently higher riskier, even ignoring our lack
of practical experience with planned hard-forks.

With a soft-fork, while it's clear there is a temporary security model
reduction for SPV nodes (and non-upgraded full nodes) in the period
before they upgrade, this is preferable to the risks of a system-wide
coordinated hard-fork upgrade.  There is some limit if the complexity
of soft-forking a feature is quite complicated (eg one could argue
that with soft-fork extension-blocks vs hard-fork method of increasing
block-size for example).  So the balance, which I think is easily met
with CLTV, is that soft-fork is simple-enough technically and the
feature is entirely non-controversial and additive functionality
improvement without downside or reason for dissent.

To my view this is an answer to your question "what is the specific
benefit to end users of doing [soft-forks]" -- it is a lower risk, and
therefore faster way to deploy non-controversial (additive) changes.

Given the CLTV is useful for improving lightning efficiency this is
good for improving Bitcoin's scalability.

Adam

From jgarzik at gmail.com  Wed Sep 30 19:24:29 2015
From: jgarzik at gmail.com (Jeff Garzik)
Date: Wed, 30 Sep 2015 15:24:29 -0400
Subject: [bitcoin-dev] Bitcoin Core 0.12.0 release schedule
In-Reply-To: <201509301757.44035.luke@dashjr.org>
References: <20150924112555.GA21355@amethyst.visucore.com>
	<201509301757.44035.luke@dashjr.org>
Message-ID: <CADm_WcYXCiACgYWhsp-ccCGk_UQT1aETaJD7-UV+tiLADS7sgg@mail.gmail.com>

Right; In general, the consensus is to decouple from Bitcoin Core releases.


On Wed, Sep 30, 2015 at 1:57 PM, Luke Dashjr via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> On Thursday, September 24, 2015 11:25:56 AM Wladimir J. van der Laan via
> bitcoin-dev wrote:
> > 2015-12-01
> > -----------
> > - Feature freeze
>
> Where is "Consensus freeze"? Shouldn't this be put off until after the HK
> workshop in case a hardfork is decided on? Or have we de-coupled it from
> the
> release process entirely anyway (since old versions need an update for it
> too)?
>
> Luke
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150930/f7ac4b70/attachment-0001.html>

From jtwinslow at juno.com  Wed Sep 30 19:17:10 2015
From: jtwinslow at juno.com (John Winslow)
Date: Wed, 30 Sep 2015 12:17:10 -0700
Subject: [bitcoin-dev] Let's deploy BIP65 CHECKLOCKTIMEVERIFY!
In-Reply-To: <CABm2gDqkTizK1TtGGM4fFp4xWMUhAstVOvnJ4_3VKaGNoSX0eg@mail.gmail.com>
References: <20150927185031.GA20599@savin.petertodd.org>
	<20150929200302.GA5051@amethyst.visucore.com>
	<87wpv8ft61.fsf@rustcorp.com.au>
	<CALqxMTGOmU76NHP8o7TyLq2t3EJTTyMoz4zCZQFczJX5+O=bOQ@mail.gmail.com>
	<CA+w+GKRd69kOiDKE_56vnbZ=Hx4hhXqtzpsVT6Z+fx005zW_MQ@mail.gmail.com>
	<CABm2gDqkTizK1TtGGM4fFp4xWMUhAstVOvnJ4_3VKaGNoSX0eg@mail.gmail.com>
Message-ID: <560C3536.1070503@juno.com>

Two observations from a Bitcoin investor and non-programmer:

1) I think it's possible that those who are adamantly opposed to a soft 
fork may be largely (if not completely) correct on purely technical 
terms, but that they also may be underestimating the risk of a 
contentious hardfork.

2) The downsides of a softfork are unclear because they seem to be based 
primarily on inelegant coding, not that it couldn't be made to work.

As a Bitcoin investor, I am becoming increasingly concerned that the 
rancorous and mostly unproductive debates occurring here daily are 
slowly closing the window of opportunity for Bitcoin to succeed. If this 
were a start-up or public company, the stock would be plunging. Why? 
Simple. Uncertainty. While I think (and I'm sure most here would agree) 
that these debates are necessary (and due to Bitcoin's decentralized 
nature perhaps even necessary to have in a public forum) but when these 
debates go on and on indefinitely thereby reducing confidence in 
Bitcoin's future something different needs to be done. In a public 
company or startup these debates would be happening in private with a an 
eye on competition, public/market perception, timing and anticipation of 
a shareholder-value-increasing outcome followed by a press release or 
marketing campaign. And the clock is always ticking.

My suggestion is the top devs from both sides need to get together 
offline and decide what the best compromise would be and then publicly 
promote a non-contentious solution that balances the technical with 
market concerns that everyone can get behind. Continuing to debate 
technical issues ad-infinitum without compromise or waiting until the 
Hong Kong conference in December to start making a decision while 
Bitcoin dies on the vine should not be an option. If anything, the 
conference should be the time at the end of which a confidence-inspiring 
technical roadmap is announced.

Further, I would like to add that in my perception what Bitcoin needs to 
and can easily become is essentially a public utility/backbone 
blockchain (like IP is to the internet) upon which all current and 
future blockchain stakeholders should see as their best and cheapest 
option for entering the space. For this to happen Bitcoin, from a user's 
standpoint needs to be simple and reliable, and from an 
investor/developer standpoint cost-effective and scalable. I don't see 
why this can't happen.

JTW














On 9/30/2015 8:55 AM, Jorge Tim?n via bitcoin-dev wrote: On Wed, Sep 30, 
2015 at 2:30 PM, Mike Hearn via bitcoin-dev 
<bitcoin-dev at lists.linuxfoundation.org> wrote:
>> This will not change the fact that the rollout strategy is bad and nobody
>> has answered my extremely basic question: why is it being done in this way,
>> given the numerous downsides?
> You seem to be the only one who thinks that softforks have "numerous
> downsides" over hardforks.
> So everybody just basically disagrees with the assumption in your
> question and thus nobody can answer it.
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
>


From jgarzik at gmail.com  Wed Sep 30 19:26:56 2015
From: jgarzik at gmail.com (Jeff Garzik)
Date: Wed, 30 Sep 2015 15:26:56 -0400
Subject: [bitcoin-dev] Let's deploy BIP65 CHECKLOCKTIMEVERIFY!
In-Reply-To: <CA+w+GKRKGS=KZrLtiW8Zbn4EQH_TELfQR+TfrADCMXLR22Q+tw@mail.gmail.com>
References: <20150927185031.GA20599@savin.petertodd.org>
	<CA+w+GKRCVr-9TVk66utp7xLRgTxNpxYoj3XQE-6y_N8JS6eO6Q@mail.gmail.com>
	<CAAS2fgSEDGBd67m7i8zCgNRqtmQrZyZMj7a5TsYo41Dh=tdhHQ@mail.gmail.com>
	<CA+w+GKRKGS=KZrLtiW8Zbn4EQH_TELfQR+TfrADCMXLR22Q+tw@mail.gmail.com>
Message-ID: <CADm_WcbJoH27H9ckr5sfmE0gh7YbSjKr1uLse0s3b4GTT+jEAA@mail.gmail.com>

On Wed, Sep 30, 2015 at 1:11 PM, Mike Hearn via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> Several people have asked several times now: given the very real and
> widely acknowledged downsides that come with a soft fork, *what* is the
> specific benefit to end users of doing them?
>

Field experience shows it successfully delivers new features to end users
without a global software upgrade.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150930/c7ce1b05/attachment.html>

From hearn at vinumeris.com  Wed Sep 30 19:56:01 2015
From: hearn at vinumeris.com (Mike Hearn)
Date: Wed, 30 Sep 2015 21:56:01 +0200
Subject: [bitcoin-dev] Let's deploy BIP65 CHECKLOCKTIMEVERIFY!
In-Reply-To: <CADm_WcbJoH27H9ckr5sfmE0gh7YbSjKr1uLse0s3b4GTT+jEAA@mail.gmail.com>
References: <20150927185031.GA20599@savin.petertodd.org>
	<CA+w+GKRCVr-9TVk66utp7xLRgTxNpxYoj3XQE-6y_N8JS6eO6Q@mail.gmail.com>
	<CAAS2fgSEDGBd67m7i8zCgNRqtmQrZyZMj7a5TsYo41Dh=tdhHQ@mail.gmail.com>
	<CA+w+GKRKGS=KZrLtiW8Zbn4EQH_TELfQR+TfrADCMXLR22Q+tw@mail.gmail.com>
	<CADm_WcbJoH27H9ckr5sfmE0gh7YbSjKr1uLse0s3b4GTT+jEAA@mail.gmail.com>
Message-ID: <CA+w+GKS01sVXqNY6a39EjqL8NVO6k1Vq6sd0VZjeqF_tsx7OAA@mail.gmail.com>

>
> Field experience shows it successfully delivers new features to end users
> without a global software upgrade.
>

The global upgrade is required for all full nodes in both types. If a full
node doesn't upgrade then it no longer does what it was designed to do; if
the user is OK with that, they should just run an SPV wallet or use
blockchain.info or some other mechanism that consumes way fewer resources.

But if you want the software you installed to achieve its stated goal, you
*must* upgrade. There is no way around that.

Jorge has said soft forks always lead to network convergence. No, they
don't. You get constant mini divergences until everyone has upgraded, as
opposed to a single divergence with a hard fork (until everyone has
upgraded). The quantity of invalid blocks mined, on the other hand, is
identical in both types.

Adam has said "there is actually consensus", although I just said there
isn't. Feel free to say what you really mean here Adam - there's consensus
if you ignore people who don't agree, i.e. the concept of "developer
consensus" doesn't actually mean anything. This would contradict your prior
statements about how Bitcoin Core makes decisions, but alright ....

Finally John, I fully agree with what you wrote. Debates that never end are
bad news all round. Bitcoin Core has told the world it uses "developer
consensus" to make decisions. I don't agree that's a good way to do things,
but if Core wants to stick with it then there is no choice - as I am a
developer, and I do not agree with the change, there is no consensus and
the debate is over.

Hey, I have an idea. Maybe we should organise a conference about soft vs
hard forks. Let's have it down the road from where I live, a couple of
weeks from now. Please submit your talk titles to me so I can vet them to
ensure nobody does an offtopic talk ;)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150930/5e0bab14/attachment.html>

From gmaxwell at gmail.com  Wed Sep 30 20:15:31 2015
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Wed, 30 Sep 2015 20:15:31 +0000
Subject: [bitcoin-dev] Let's deploy BIP65 CHECKLOCKTIMEVERIFY!
In-Reply-To: <CA+w+GKRKGS=KZrLtiW8Zbn4EQH_TELfQR+TfrADCMXLR22Q+tw@mail.gmail.com>
References: <20150927185031.GA20599@savin.petertodd.org>
	<CA+w+GKRCVr-9TVk66utp7xLRgTxNpxYoj3XQE-6y_N8JS6eO6Q@mail.gmail.com>
	<CAAS2fgSEDGBd67m7i8zCgNRqtmQrZyZMj7a5TsYo41Dh=tdhHQ@mail.gmail.com>
	<CA+w+GKRKGS=KZrLtiW8Zbn4EQH_TELfQR+TfrADCMXLR22Q+tw@mail.gmail.com>
Message-ID: <CAAS2fgR_-x4kUkiMTCi+YdpV-6MXaEp+b2ZzrVc9Dqt3rnfAyA@mail.gmail.com>

On Wed, Sep 30, 2015 at 5:11 PM, Mike Hearn <hearn at vinumeris.com> wrote:
> Hi Gregory,
>
>>
>> I'm surprised to see this response
>
>
> Why? I have objected to the idea of soft forks many times. I wrote an entire
> article about it in August.

Yes, your article contained numerous factual and logical inaccuracies
which I corrected (many of which you had been previously corrected on
as well by others). (For example:
https://www.reddit.com/r/Bitcoin/comments/3griiv/on_consensus_and_forks_by_mike_hearn/cu0yv0r
)

I would have hoped that after so many corrections you would have
updated your beliefs.

> There's no such thing as a "real" hard fork - don't try and move the goal
> posts. SPV clients do not need any changes to do the right thing with BIP
> 101, they will follow the new chain automatically, so it needs no changes.

Yes, because what 101 does is not a hard-fork from the perspective of
BitcoinJ clients. Please do not conflate BitcoinJ with all of SPV; a
SPV client could validate the information received more extensively or
respond to alerts in reject rule violating blocks--  BitcoinJ does
not, but this is BitcoinJ's design decision to lack security in this
respect and not something inherent to SPV).

Directly fixing the time-warp attack, for example, would be a hard
fork from the perspective of BitcoinJ clients.  Recovering the fixed 0
bits in the header for use as extra-nonce would be a hard fork from
the perspective of BitcoinJ clients. Changing the transaction format
to include an explicit nonce for ECDH (e.g. stealth addresses) would
be a hard fork from the perspective of BitcoinJ clients. Increasing
the precision of Bitcoin by 1000 would be a hard fork from the
perspective of BitcoinJ. As would adjusting the hashtree to commit to
fees, including fees under OP_CHECKSIGs hash, or switching to the
segregated witness commitment structure from elements alpha that
allows syncing the chain without fetching signatures... all that would
be hardforks from the perspective of BitcoinJ.

Because of an cheaply avoidable the lack of validation in BitcoinJ no
increase of the blocksize is a hard-fork from its perspective. Nor
would increasing the subsidy to miners, or allowing third parties to
confiscate coins. But other SPV clients could, if they wanted to,
reject blocks the violated most of these criteria.

The argument you are presenting against BIP65 is that it is bad
because it is silently accepted. But this applies no less to 101 for
SPV clients, and in 101's case it's a failure to enforce pre-existing
rules which the users might care a great deal about. Worse, counting
on this kind of behavior can build a dependence on weak security forms
of SPV and inhibits the use of full security SPV.

In truth, both of BIP101 and BIP65 are detectable even by the most
simplistic and pre-change clients due to the voluntarily use of block
version signaling. Any participant in the network is free to take
whatever action they choose to take in response to such an event.
Bitcoin Core's behavior is to issue alerts to the user when unexpected
block versions show up on the network.  Users and implementer are free
to turn changes like BIP65 into hardforks from the perspective of
their own system, necessitating manual intervention, by simply forcing
the block version to be a particular value (or shutting down when
there are many blocks of a new version; until manually authorized to
continue).

> Several people have asked several times now: given the very real and widely
> acknowledged downsides that come with a soft fork, what is the specific
> benefit to end users of doing them?

For many changes, including CLTV the actual soft fork change is by far
the most natural way of implementing the change itself. One simply
takes an existing non-standard placeholder op code sequence and
assigns it the new VERIFY style meaning. It is clean, tidy, and the
result is nearly as if the system has had it all along. The only
complexity is around the activation and can be dropped in future code.

Beyond that, the primary upside is no forced industry wide "flag day"
where everyone is _forced_ to modify their software arises, taking
considerable cost.  People who care about the new rule can use it,
people who don't don't. All the rules that you care about enforcing
remain in force-- you still prevent inflation, you still will not
tolerate the theft of your own coins (or those of most other people),
etc.. No one is necessarily caught by surprise since the block
versions communicate that something is happening, allowing network
participants to choose to act (or not).

For example, for years you stonewalled P2SH and multi-signature.  You
didn't care about it. You didn't think it was valuable. You didn't add
it to your software, even after it was well specified and deployed in
production. Could it have been done as a hard-fork?  Likely not: you
would have prevented it. But as a soft-fork you were free to ignore it
with no ill-effect for a long time existing for those who cared about
it, and not for you, until widespread use resulted in demand enough to
justify accepting a patch that permitted sending to it.

What if we'd needed a hard fork to enable CoinJoin or other privacy
features?  I think would have blocked that too.

The relative ease of handling soft-forks which you are indifferent to
means that there is little reason to object to a compatible change
that gives other people flexibility they care about greatly but which
you are indifferent to; and it forces people who would oppose a
functionality because they don't want others to have some piece of
freedom to try to frame justifications in language other than "I don't
think it's worth the cost" since they have the nearly free option of
ignoring the change-- they're forced to actually argue against other
people having that freedom.

Soft-forks also allows us to deploy fixes to the Bitcoin protocol
which are more important-to-have but not urgently critical (like
height in coinbase),  or sometimes to deploy fixes to critical
vulnerabilities without first handing everyone excruciatingly detailed
instructions on exploiting them, simply by closing off an pattern of
protocol which is obviously bad and risky.

The primary cost of a soft-fork for non-participants is simply some
risk of increased network instability around the change-- but short
lived forks happen every day, and longer lived ones happen from time
to time. Larger amounts of instability occur from time to time due to
network partitioning, misconfiguration, and software bugs-- and client
software must be prepared to cope with it; this is a fact of bitcoin
and decenteralized systems in general. Upgraded, change enforcing,
client software is not exposed to the this instability, and
non-upgraded software could choose to mitigate any exposure by
monitoring the block versions. This is a far better situation that the
natural instability that will happen from time to time in a
decentralized system.

By contrast, the programmed activation point of BIP101 at 75% almost
guarantees activation among considerable controversy, promising
network instability which BitcoinJ clients would experience upgraded
or not, even if the larger block side was ultimately the losing side
in the switch. I find it more than a little strange that you think the
instability of a 75%-version-hashpower cut is acceptable but the a
95%-version-hashpower compatible change is not.

Finally, there is the demonstrated track record: They work; they
deliver new features to people. Our experience in the half dozen or
more soft-forks in the system so far is that in practice do not cause
significant problems, including financial losses for SPV wallet users.
Even with that complete success there has been room for improvement,
which is why the process has evolved over time to feature things like
preemptive non-standardness, high switchover thresholds, etc.  and
these will continue to evolve over time.

I hope that you can put aside your effort to force a blocksize
increase on others for a moment and add functionality, of the kind the
Bitcoin Core has had for years, to BitcoinJ to improve the experience
with soft-forks if you think it isn't good enough as is...

From jtimon at jtimon.cc  Wed Sep 30 20:37:08 2015
From: jtimon at jtimon.cc (=?UTF-8?B?Sm9yZ2UgVGltw7Nu?=)
Date: Wed, 30 Sep 2015 22:37:08 +0200
Subject: [bitcoin-dev] Let's deploy BIP65 CHECKLOCKTIMEVERIFY!
In-Reply-To: <CA+w+GKS01sVXqNY6a39EjqL8NVO6k1Vq6sd0VZjeqF_tsx7OAA@mail.gmail.com>
References: <20150927185031.GA20599@savin.petertodd.org>
	<CA+w+GKRCVr-9TVk66utp7xLRgTxNpxYoj3XQE-6y_N8JS6eO6Q@mail.gmail.com>
	<CAAS2fgSEDGBd67m7i8zCgNRqtmQrZyZMj7a5TsYo41Dh=tdhHQ@mail.gmail.com>
	<CA+w+GKRKGS=KZrLtiW8Zbn4EQH_TELfQR+TfrADCMXLR22Q+tw@mail.gmail.com>
	<CADm_WcbJoH27H9ckr5sfmE0gh7YbSjKr1uLse0s3b4GTT+jEAA@mail.gmail.com>
	<CA+w+GKS01sVXqNY6a39EjqL8NVO6k1Vq6sd0VZjeqF_tsx7OAA@mail.gmail.com>
Message-ID: <CABm2gDpojk4Sb9eVVcFiaQng+mKs+3iWFu_Ep0h7VC1ip7US5Q@mail.gmail.com>

On Sep 30, 2015 9:56 PM, "Mike Hearn via bitcoin-dev" <
bitcoin-dev at lists.linuxfoundation.org> wrote:
>
> Jorge has said soft forks always lead to network convergence. No, they
don't. You get constant mini divergences until everyone has upgraded, as
opposed to a single divergence with a hard fork (until everyone has
upgraded). The quantity of invalid blocks mined, on the other hand, is
identical in both types.

Exactly, all those "mini divergences" eventually disappear (because we're
assuming the hashrate majority has upgraded and non-upgraded miners accept
upgraded blocks as valid), even if the hashrate minority never upgrades.
On the other hand, the "single divergence" in the hardfork keeps growing
forever (unless all miners evetually upgrade.
With softforks, we maintain eventual consistency, with hardforks we don't.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150930/54749cdd/attachment.html>

From hearn at vinumeris.com  Wed Sep 30 21:01:09 2015
From: hearn at vinumeris.com (Mike Hearn)
Date: Wed, 30 Sep 2015 23:01:09 +0200
Subject: [bitcoin-dev] Let's deploy BIP65 CHECKLOCKTIMEVERIFY!
In-Reply-To: <CAAS2fgR_-x4kUkiMTCi+YdpV-6MXaEp+b2ZzrVc9Dqt3rnfAyA@mail.gmail.com>
References: <20150927185031.GA20599@savin.petertodd.org>
	<CA+w+GKRCVr-9TVk66utp7xLRgTxNpxYoj3XQE-6y_N8JS6eO6Q@mail.gmail.com>
	<CAAS2fgSEDGBd67m7i8zCgNRqtmQrZyZMj7a5TsYo41Dh=tdhHQ@mail.gmail.com>
	<CA+w+GKRKGS=KZrLtiW8Zbn4EQH_TELfQR+TfrADCMXLR22Q+tw@mail.gmail.com>
	<CAAS2fgR_-x4kUkiMTCi+YdpV-6MXaEp+b2ZzrVc9Dqt3rnfAyA@mail.gmail.com>
Message-ID: <CA+w+GKQChBBnXNj0hz5i-D=NqQBpQDReD6fNkONRaQhWaxLTVA@mail.gmail.com>

tl;dr Nothing I have read here has changed my mind. There is still no
consensus to deploy CLTV in this way.


> Yes, your article contained numerous factual and logical inaccuracies
> which I corrected
>

I responded to your response several times. It was not convincing, and I do
not think you corrected factual inaccuracies. I mean, you said yourself you
once used the correct terminology of forwards compatibility but stopped
only because the term "backwards compatibility" is more common. But that's
not a good reason to use a term with the opposite meaning and is certainly
not a factual correction!


> Yes, because what 101 does is not a hard-fork from the perspective of
> BitcoinJ clients. Please do not conflate BitcoinJ with all of SPV;


I coined the term SPV so I know exactly what it means, and bitcoinj
implements it, as does BreadWallet (the other big SPV implementation).

Yes, SPV wallets will follow the mining hashpower instead of doing a hard
reject for bigger blocks, because they deliberately check a subset of the
rules: block size is not and never has been one of them. Indeed it's not
even included in the protocol messages. Users have no expectation that SPV
wallets would check that, as it's never been claimed they do.

On the other hand, full nodes all claim they run scripts. Users expect that
and may be relying on it. The unstated assumption here is that the nodes
run them correctly. A soft fork breaks this assumption.

I'm going to ignore the rest of the stuff you wrote about "design decisions
to lack security" or "cheaply avoidable lack of validation". When you have
sat down and written an SPV implementation by yourself, then shipped it to
a couple of million users, you might have better insight into basic
engineering costs. Until then, I find your criticisms of code you think was
missing due to "stonewalling" and so on to be seriously lacking real world
experience.

Yes, a hypothetical full node could fork on the version bits. I would be
quite happy with the version number in the header being an enforced
consensus rule: it'd make hard forks easier to trigger. But it hasn't been
done that way, and wishing away the behaviour of existing software in the
field is no good. Luckily, for introducing a new opcode, the same effect
can be achieved by using a non-allocated opcode number.


> For many changes, including CLTV the actual soft fork change is by far
> the most natural way of implementing the change itself.


This is subjective. I'd say picking an entirely new opcode number is most
natural.

The rest of your argument boils down to "people don't have to upgrade if
they don't want to", which is addressed in the article I wrote already, and
multiple responses on this thread. Yes, they do, otherwise they aren't
getting the security level they were before.


> Could [P2SH] have been done as a hard-fork?  Likely not: you would have
> prevented it.


What? This is nonsensical. P2SH was added to the full verification code
quite quickly, but it didn't matter much because nobody uses bitcoinj for
mining. The docs explicitly tell people, in fact, not to mine on top of
bitcoinj:

https://bitcoinj.github.io/full-verification

So no, bitcoinj+P2SH was irrelevant from a fork type perspective. It just
had no effect at all. This entire section of your message is completely
wrong.

The code that did take longer was for wallet support. And the reason it
came later was resource prioritisation: there were more important issues to
resolve. Like I said - write the amount of code I've written, unpaid in
your evenings and weekends, and then you can criticise bitcoinj for lacking
features.

75% is a fine activation threshold. By definition if support is at 75% then
bigger blocks is "winning", but if support fell, then the SPV wallets would
just reorg back onto the 1mb-blocks chain.

Re: demonstrated track record. They "work" only if you ignore the actual
problems that have resulted. P2SH-invalid blocks were being mined for weeks
after the flag day. That's not good no matter how you slice it: even if you
didn't hear about any fraud resulting, it is still risk that can be avoided.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150930/5774e38f/attachment.html>

From hearn at vinumeris.com  Wed Sep 30 21:06:01 2015
From: hearn at vinumeris.com (Mike Hearn)
Date: Wed, 30 Sep 2015 23:06:01 +0200
Subject: [bitcoin-dev] Let's deploy BIP65 CHECKLOCKTIMEVERIFY!
In-Reply-To: <CABm2gDpojk4Sb9eVVcFiaQng+mKs+3iWFu_Ep0h7VC1ip7US5Q@mail.gmail.com>
References: <20150927185031.GA20599@savin.petertodd.org>
	<CA+w+GKRCVr-9TVk66utp7xLRgTxNpxYoj3XQE-6y_N8JS6eO6Q@mail.gmail.com>
	<CAAS2fgSEDGBd67m7i8zCgNRqtmQrZyZMj7a5TsYo41Dh=tdhHQ@mail.gmail.com>
	<CA+w+GKRKGS=KZrLtiW8Zbn4EQH_TELfQR+TfrADCMXLR22Q+tw@mail.gmail.com>
	<CADm_WcbJoH27H9ckr5sfmE0gh7YbSjKr1uLse0s3b4GTT+jEAA@mail.gmail.com>
	<CA+w+GKS01sVXqNY6a39EjqL8NVO6k1Vq6sd0VZjeqF_tsx7OAA@mail.gmail.com>
	<CABm2gDpojk4Sb9eVVcFiaQng+mKs+3iWFu_Ep0h7VC1ip7US5Q@mail.gmail.com>
Message-ID: <CA+w+GKTf2vnJ0WdrK1HzFwCx154e=BP=kGcZvGYY7cbcijwLSQ@mail.gmail.com>

>
> Exactly, all those "mini divergences" eventually disappear
>
A miner that has accepted a newly invalid transaction into its memory pool
and is trying to mine it, will keep producing invalid blocks forever until
the owner shuts it down and upgrades. This was happening for weeks after
P2SH triggered.

For instance, any miner that has modified/bypassed IsStandard() can do
this, or any miner that accepts direct transaction submission, or any miner
that runs an old node from before OP_NOPs were made non-standard.

> On the other hand, the "single divergence" in the hardfork keeps growing
> forever (unless all miners evetually upgrade.
>
Which they do, because they will eventually notice they are burning money.

Sorry Jorge, but I don't think your argument makes sense.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150930/e6e4693e/attachment.html>

From jtimon at jtimon.cc  Wed Sep 30 22:14:21 2015
From: jtimon at jtimon.cc (=?UTF-8?B?Sm9yZ2UgVGltw7Nu?=)
Date: Thu, 1 Oct 2015 00:14:21 +0200
Subject: [bitcoin-dev] Let's deploy BIP65 CHECKLOCKTIMEVERIFY!
In-Reply-To: <CA+w+GKTf2vnJ0WdrK1HzFwCx154e=BP=kGcZvGYY7cbcijwLSQ@mail.gmail.com>
References: <20150927185031.GA20599@savin.petertodd.org>
	<CA+w+GKRCVr-9TVk66utp7xLRgTxNpxYoj3XQE-6y_N8JS6eO6Q@mail.gmail.com>
	<CAAS2fgSEDGBd67m7i8zCgNRqtmQrZyZMj7a5TsYo41Dh=tdhHQ@mail.gmail.com>
	<CA+w+GKRKGS=KZrLtiW8Zbn4EQH_TELfQR+TfrADCMXLR22Q+tw@mail.gmail.com>
	<CADm_WcbJoH27H9ckr5sfmE0gh7YbSjKr1uLse0s3b4GTT+jEAA@mail.gmail.com>
	<CA+w+GKS01sVXqNY6a39EjqL8NVO6k1Vq6sd0VZjeqF_tsx7OAA@mail.gmail.com>
	<CABm2gDpojk4Sb9eVVcFiaQng+mKs+3iWFu_Ep0h7VC1ip7US5Q@mail.gmail.com>
	<CA+w+GKTf2vnJ0WdrK1HzFwCx154e=BP=kGcZvGYY7cbcijwLSQ@mail.gmail.com>
Message-ID: <CABm2gDqAhjd1721XPjjAiev4coveLM0NUE9ng+W2tgswHiW5bg@mail.gmail.com>

On Wed, Sep 30, 2015 at 11:06 PM, Mike Hearn <hearn at vinumeris.com> wrote:
>> Exactly, all those "mini divergences" eventually disappear
>
> A miner that has accepted a newly invalid transaction into its memory pool
> and is trying to mine it, will keep producing invalid blocks forever until
> the owner shuts it down and upgrades. This was happening for weeks after
> P2SH triggered.
>
> For instance, any miner that has modified/bypassed IsStandard() can do this,
> or any miner that accepts direct transaction submission, or any miner that
> runs an old node from before OP_NOPs were made non-standard.

That is correct. But doesn't seem to contradict anything I said.

>> On the other hand, the "single divergence" in the hardfork keeps growing
>> forever (unless all miners evetually upgrade.
>
> Which they do, because they will eventually notice they are burning money.

Assuming it is an uncontroversial hardfork (unlike bip101 in its
current form), miners will eventually upgrade because all users will
eventually upgrade as well.
Softfork-caused forks will live shortly because non-upgraded miners
will build on top of the longest upgraded chain.
In contrast, non-upgraded miners will not build on top of the longest
chain (the upgraded one assuming hashrate majority) and a parallel
chain will be built for some time. This chain can be used to defraud
non-upgraded or SPV users by isolating them and showing them only the
non-upgraded chain, which keeps growing but will eventually be
abandoned.
In the case of a Schism hardfork, some users may never want to
"upgrade" and if there's demand for the "old coins" there will be
miners for the "old chain".

> Sorry Jorge, but I don't think your argument makes sense.

I think my argument makes a lot of sense, it's just that for some
reason you don't think guaranteed eventual consistency has any value
because you are ok with miners abandoning the old rules chain only
eventually (and you don't believe that "eventually" can be far in the
future in practice).

On Wed, Sep 30, 2015 at 9:56 PM, Mike Hearn via bitcoin-dev
<bitcoin-dev at lists.linuxfoundation.org> wrote:
> Adam has said "there is actually consensus", although I just said there
> isn't. Feel free to say what you really mean here Adam - there's consensus
> if you ignore people who don't agree, i.e. the concept of "developer
> consensus" doesn't actually mean anything. This would contradict your prior
> statements about how Bitcoin Core makes decisions, but alright ....

BIP99 doesn't talk about "developer consensus", but rather
"uncontroversial consensus rule changes".
Obviously a patch in which developers steal everybody else's coins
wouldn't be "uncontroversial" even if "developer consensus" is
reached.
We don't need to ignore anyone to consider BIP65 an uncontroversial
softfork: we just need to ignore fallacious and unreasonable
arguments.
As far as I can tell, you are the only person opposing BIP65 (even if
you keep talking about "several people") and I would like to think
that you are aren't being obstinate on purpose only to make your point
about "developer consensus not meaning anything", but you are making
it very hard.

On Wed, Sep 30, 2015 at 11:01 PM, Mike Hearn via bitcoin-dev
<bitcoin-dev at lists.linuxfoundation.org> wrote:
> I coined the term SPV so I know exactly what it means, and bitcoinj
> implements it, as does BreadWallet (the other big SPV implementation).

No, you didn't. "Simplified Payment Verification" is section 8 in the
Bitcoin whitepaper that you like to cite so much.

> I'm going to ignore the rest of the stuff you wrote about "design decisions
> to lack security" or "cheaply avoidable lack of validation". When you have
> sat down and written an SPV implementation by yourself, then shipped it to a
> couple of million users, you might have better insight into basic
> engineering costs. Until then, I find your criticisms of code you think was
> missing due to "stonewalling" and so on to be seriously lacking real world
> experience.

Please study this page carefully and hopefully one day you will stop
using logical fallacies as often as you currently do:
https://en.wikipedia.org/wiki/List_of_fallacies
In this case you manage to combine ad hominem and appeal to authority
(maybe false authority is more accurate?).
Once again, please, stop using fallacies to try to convince people
that you are right. No offense, but being warned publicly about the
use of logical fallacies so often would be extremely embarrassing to
me.

From jgarzik at gmail.com  Wed Sep 30 22:17:12 2015
From: jgarzik at gmail.com (Jeff Garzik)
Date: Wed, 30 Sep 2015 18:17:12 -0400
Subject: [bitcoin-dev] Let's deploy BIP65 CHECKLOCKTIMEVERIFY!
In-Reply-To: <CA+w+GKS01sVXqNY6a39EjqL8NVO6k1Vq6sd0VZjeqF_tsx7OAA@mail.gmail.com>
References: <20150927185031.GA20599@savin.petertodd.org>
	<CA+w+GKRCVr-9TVk66utp7xLRgTxNpxYoj3XQE-6y_N8JS6eO6Q@mail.gmail.com>
	<CAAS2fgSEDGBd67m7i8zCgNRqtmQrZyZMj7a5TsYo41Dh=tdhHQ@mail.gmail.com>
	<CA+w+GKRKGS=KZrLtiW8Zbn4EQH_TELfQR+TfrADCMXLR22Q+tw@mail.gmail.com>
	<CADm_WcbJoH27H9ckr5sfmE0gh7YbSjKr1uLse0s3b4GTT+jEAA@mail.gmail.com>
	<CA+w+GKS01sVXqNY6a39EjqL8NVO6k1Vq6sd0VZjeqF_tsx7OAA@mail.gmail.com>
Message-ID: <CADm_WcZpdpnov5Tiz3_3gpUyDz=rTkKKvYexBzcFLcHKDUdxJQ@mail.gmail.com>

On Wed, Sep 30, 2015 at 3:56 PM, Mike Hearn <hearn at vinumeris.com> wrote:

> Field experience shows it successfully delivers new features to end users
>> without a global software upgrade.
>>
>
> The global upgrade is required for all full nodes in both types. If a full
> node doesn't upgrade then it no longer does what it was designed to do; if
> the user is OK with that, they should just run an SPV wallet or use
> blockchain.info or some other mechanism that consumes way fewer resources.
>
> But if you want the software you installed to achieve its stated goal, you
> *must* upgrade. There is no way around that.
>

It is correct that security is slightly reduced for full nodes that have
not upgraded.  It is not correct that the choice is binary, full node or
SPV.

Any user running a not-upgraded full node still retains protection against
many attacks outside the subset related to the feature being introduced.

The field observable end result is that we do receive new features, secured
by hashpower and user full nodes, via soft fork, without a global flag day
upgrade.

Yes, a flag day hard fork upgrade is cleaner and results in higher security
due to the entire network validating the new rules.  However, the
difficulty of executing hard forks would mean fewer total features to
users, if that route were chosen instead.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150930/79a7b5d7/attachment.html>

From gmaxwell at gmail.com  Wed Sep 30 22:59:22 2015
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Wed, 30 Sep 2015 22:59:22 +0000
Subject: [bitcoin-dev] Let's deploy BIP65 CHECKLOCKTIMEVERIFY!
In-Reply-To: <CA+w+GKQChBBnXNj0hz5i-D=NqQBpQDReD6fNkONRaQhWaxLTVA@mail.gmail.com>
References: <20150927185031.GA20599@savin.petertodd.org>
	<CA+w+GKRCVr-9TVk66utp7xLRgTxNpxYoj3XQE-6y_N8JS6eO6Q@mail.gmail.com>
	<CAAS2fgSEDGBd67m7i8zCgNRqtmQrZyZMj7a5TsYo41Dh=tdhHQ@mail.gmail.com>
	<CA+w+GKRKGS=KZrLtiW8Zbn4EQH_TELfQR+TfrADCMXLR22Q+tw@mail.gmail.com>
	<CAAS2fgR_-x4kUkiMTCi+YdpV-6MXaEp+b2ZzrVc9Dqt3rnfAyA@mail.gmail.com>
	<CA+w+GKQChBBnXNj0hz5i-D=NqQBpQDReD6fNkONRaQhWaxLTVA@mail.gmail.com>
Message-ID: <CAAS2fgTAV562ghpf79gQxpsgcrAS5SLjONXN+43_F8bAmQQ4Lw@mail.gmail.com>

On Wed, Sep 30, 2015 at 9:01 PM, Mike Hearn <hearn at vinumeris.com> wrote:
> I coined the term SPV so I know exactly what it means, and bitcoinj

The term comes from the Bitcoin whitepaper.

> On the other hand, full nodes all claim they run scripts. Users expect that
> and may be relying on it. The unstated assumption here is that the nodes run
> them correctly. A soft fork breaks this assumption.

They run them correctly with respect to the rules that they implement,
nothing about a soft-fork changes that.

The system could have been designed in a way that wasn't full of nice
compatibility features. The history of bitcoin could have been that
past improvements were all performed with hard forks instead of soft
forks.

But neither of these things are true. (And I think it's very likely
that there would have been fewer improvements if that were the case).

> I'm going to ignore the rest of the stuff you wrote  about "design decisions
> to lack security" or "cheaply avoidable lack of validation". When you have
> sat down and written an SPV implementation by yourself, then shipped it to a
> couple of million users, you might have better insight into basic
> engineering costs.

At the end of the day we need to deliver software to our users that
delivers on their needs and doesn't undermine their privacy or
security;  even if its really hard.  So when someone calls out
something that I'm working on that could use improvement, my response
isn't to tell them how much I'm not going to listen to them because
I've accomplished some long list of things that they haven't; that
software I've written runs on hundreds of millions of devices; ...
rather my response is to hear out their concerns, even when due to
extensive context I'm confident that they are probably confused or
dishonestly motivated; because there is always a potential to learn,
and always a potential to do better.  I have found this to be pretty
productive, as even when both parties walk away with the same
positions they started with, I usually learn something along the way
just because I paid attention.

> Until then, I find your criticisms of code you think was
> missing due to "stonewalling" and so on to be seriously lacking real world
> experience.

BIP16 was published on 2012-01-01. Enforcement on the network began on
April 1st 2012.

Support for merely sending to P2SH addresses was merged into BitcoinJ,
Nov 30th _2013_, after it was written by Mike Belshe.

In the interim you spent considerable time arguing against
implementing it, e.g. in one example incident:

--- Day changed Thu Sep 12 2013
10:03 < TD> heck, if a recipient really really wants to receive a p2sh
payment for some reason, they can just put the p2sh output into the
payment request message
....
10:17 <@gmaxwell> TD: In any case, P2SH has been deployed for
something like two years now. Your arguement seems to be basically we
should be creating a false tying between payment protocol messages and
things like escrow usage in order to coerce people to adopt the
payment protocol in places where an address would do.
10:17 <@gmaxwell> I think thats a bit cruddy.
10:19 < TD> no, i'm saying p2sh is a feature that just isn't usable. i
did point this out at the time it was merged - gavin believed that
apps to do complicated multi-device wallets would appear before a
payment protocol did, and people wouldn't like the look of long
addresses. that was pretty much the rationale given. that didn't
happen, obviously
10:20 < TD> developing features that are used only by bitcoind
developers, isn't the right way to go, and p2sh definitely falls into
that category
...
10:35 < TD> i'm not going to do it myself because anyone who is
capable of producing and running something that uses p2sh is capable
of working with the payment protocol as well, and that gives a better
user experience overall. but if someone else wants to, go for it.

I don't think there is anything wrong about calling this stonewalling.
At least thats how it came across to myself and others. I'm sorry if I
judged too harshly there.

To be clear, by pointing out your past opposition and non-deployment
in this message I am _not_ trying to attacking you for failing to
support P2SH.

I pointing out that right or wrong..... That you actively argued
against it. That you chose not to implement it, and only accepted a
patch for it a year and a half later. From your own words it seems
clear that you didn't implement it due to actual opposition, but even
if the non-implementation was simply engineering priorities, the fact
remains that you didn't implement for a very long time.

And that is _okay_, we still got it anyways, and today tens of
thousands of transactions per day use it and P2SH secures about 10% of
all Bitcoin value.  This is possible because with a soft fork users
using other software can gain functionality which might be critical to
them (As Jgarzik was saying about Bitpay in the discussion I was
quoting from) that you don't have the time or interest to implement in
your own software.


> What? This is nonsensical. P2SH was added to the full verification code
> quite quickly,

Yes, Matt Corallo added it to code which by your admission no one was
using.  I agree this is not relevant.

> resolve. Like I said - write the amount of code I've written, unpaid in your
> evenings and weekends, and then you can criticise bitcoinj for lacking
> features.

I think it's likely that I've spent significant more time unpaid on my
evenings and weekends creating software for others than you have (and
continue to do so; as well as having donated years worth of income
supporting other people's Free Software work), but it's a bit of an
unfair comparison: I'm a fair bit older than you. :)

And yet, I think that is all irrelevant here because I'm not current
criticizing bitcoinj for lacking features!   Quite the opposite, I am
pointing out that the advantage of soft-forks is that its OKAY for
software to lack soft-fork features,  which means that participants
who code only on evenings and weeks are free to continue participating
with the priorities they choose!

Forcing _all_ upgrades to be via hard-fork takes away the freedom to
make that trade-off; and concurrently reduces the collection of fixes
upgrades we could potentially deploy; because will always be
implementations out there like BitcoinJ in 2012 that didn't have the
resources (or interest) to fully implement this feature or that
feature, at least not right away.

And for many things, they simply don't have to, and that should be okay.

> Yes, a hypothetical full node could fork on the version bits. I would be
> quite happy with the version number in the header being an enforced
> consensus rule: it'd make hard forks easier to trigger. But it hasn't been
> done that way, and wishing away the behaviour of existing software in the
> field is no good. Luckily, for introducing a new opcode, the same effect can
> be achieved by using a non-allocated opcode number.

We handle this in Bitcoin Core. Our chosen and intentional way to
handle this is setting a notice. This gives users the freedom to do
what they like, while also behaving in a reasonably sane way by
default.

You don't have to like it, you can behave differently in your own
software or on your own hosts-- all the data is available to you.

(I wouldn't object out of principle to a default config option to take
more aggressive action on unexpected versions... but no one has ever
asked for one... and I'm doubtful anyone would ever do so.)

> The rest of your argument boils down to "people don't have to upgrade if
> they don't want to", which is addressed in the article I wrote already, and
> multiple responses on this thread. Yes, they do, otherwise they aren't
> getting the security level they were before.

They continue to enforce all the same rules as before. With the soft
fork Bitcoin Core users are informed that unexpected things are going
on, and they are free to look at whats going on and decide how to
handle it, or just accept that the new thing is almost certainly
something they don't care about (after all, the rules they signed up
for before are all still in effect, and at any time miners could be
silently imposing new 'soft fork' like rules without their knowledge--
having a big reaction to ones the network was kind enough to tell them
about doesn't seem that reasonable).

For many users and many soft-forks there is no substantial security
implication, and you cannot say that they were not getting the
security level they were getting before. But regardless, even what it
is different, they're free to decide on the cost tradeoff with
upgrading, and they're not forced onto an upgrade hamsterwheel that
disenfranchises their role in the system.

If you have a specific generalized security implication in mind,
you're failing to state it. In your writings you like to assert that I
 "did not respond" or were "not convincing"-- that is not generally my
style, I don't usually think anyone owes me point by point answers,
but I think on this point it seems clear that there is some
implication which is in your head that is a mystery to at least myself
and Jgarzik.

> 75% is a fine activation threshold. By definition if support is at 75% then
> bigger blocks is "winning", but if support fell, then the SPV wallets would
> just reorg back onto the 1mb-blocks chain.

A 75% measurement doesn't actually mean 75% support, due to variance.
Even ignoring that-- you recognize the acceptability of reorgs. The
situation is no worse for an SPV client for a soft-fork; and it's
better because (1) convergence is still guaranteed with exponential
probability (a hard fork can be mutual and no convergence may be
possible-- as is the case for more conceivable hard forks), and (2)
for BIP65 (and current soft forks generally) a _much_ more
conservative threshold is set (because in Bitcoin Core and the general
community around here considers 75% to be too low to achieve high
stability, based on our past experience).

> Re: demonstrated track record. They "work" only if you ignore the actual
> problems that have resulted. P2SH-invalid blocks were being mined for weeks
> after the flag day. That's not good no matter how you slice it: even if you
> didn't hear about any fraud resulting, it is still risk that can be avoided.

A couple points:

That same invalid blocks for weeks (actually months) from BIP16 is the
behavior you will get with a hard fork, for at least the same reasons
(miners asleep at the switch). Much more for a controversial hard-fork
as there will be principled objections.

Blocks get produced that get orphaned every day and this is
unavoidable, so users already must deal with occasional cases where
confirmations get undone.

More recent soft-forks have reduced the incidence of invalid blocks by
substantially increasing the threshold, including better notification
in Bitcoin core, communicating directly with miners more, and making
non-conforming transactions non-standard in advance. These mitigations
have been effective in practice; and we have not seen the same
behavior (which, as, noted is not known to have enabled any fraud in
any case -- in part because to non-upgraded wallets it looks just like
the orphaning that normally happens but with somewhat increased
frequency.).  I think it's unfortunate that people proposing hard
forks have not learned the same lessons, even though the stakes are
higher and the self-resolution of the system is greatly diminished.

From gmaxwell at gmail.com  Wed Sep 30 23:25:03 2015
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Wed, 30 Sep 2015 23:25:03 +0000
Subject: [bitcoin-dev] Let's deploy BIP65 CHECKLOCKTIMEVERIFY!
In-Reply-To: <CADm_WcZpdpnov5Tiz3_3gpUyDz=rTkKKvYexBzcFLcHKDUdxJQ@mail.gmail.com>
References: <20150927185031.GA20599@savin.petertodd.org>
	<CA+w+GKRCVr-9TVk66utp7xLRgTxNpxYoj3XQE-6y_N8JS6eO6Q@mail.gmail.com>
	<CAAS2fgSEDGBd67m7i8zCgNRqtmQrZyZMj7a5TsYo41Dh=tdhHQ@mail.gmail.com>
	<CA+w+GKRKGS=KZrLtiW8Zbn4EQH_TELfQR+TfrADCMXLR22Q+tw@mail.gmail.com>
	<CADm_WcbJoH27H9ckr5sfmE0gh7YbSjKr1uLse0s3b4GTT+jEAA@mail.gmail.com>
	<CA+w+GKS01sVXqNY6a39EjqL8NVO6k1Vq6sd0VZjeqF_tsx7OAA@mail.gmail.com>
	<CADm_WcZpdpnov5Tiz3_3gpUyDz=rTkKKvYexBzcFLcHKDUdxJQ@mail.gmail.com>
Message-ID: <CAAS2fgTOSiTeY3=qprRGdQUVvr60JjJjP2SPvVFtRGrQGHL8Vw@mail.gmail.com>

On Wed, Sep 30, 2015 at 10:17 PM, Jeff Garzik <jgarzik at gmail.com> wrote:
> It is correct that security is slightly reduced for full nodes that have not
> upgraded.  It is not correct that the choice is binary, full node or SPV.
>
> Any user running a not-upgraded full node still retains protection against
> many attacks outside the subset related to the feature being introduced.

An extra way to look at this is that even absent any rule changes--
users who are asleep at the switch may lose effective security over
time because attackers learn new tricks against existing
vulnerabilities. Security requires a bit of vigilance, inherently.

In many specific cases I think it's hard-to-impossible to articulate a
concrete way that security is lost by users at all, excluding some
small amplification of orphan blocks.


On Wed, Sep 30, 2015 at 9:06 PM, Mike Hearn via bitcoin-dev
<bitcoin-dev at lists.linuxfoundation.org> wrote:
> and is trying to mine it, will keep producing invalid blocks forever until
> the owner shuts it down and upgrades.

This is the outcome guaranteed for absentee miners with a hard fork,
but it is not guaranteed for a soft fork.

> For instance, any miner that has modified/bypassed IsStandard() can do this,

Miners who have changed their code in inadvisable ways can produce
invalid blocks as a result. There are many seemingly innocuous ways
one can produce invalid blocks, and miners have stumbled on a few of
them over the years.

Pedantically, modifying IsStandard() will not have this effect:
Unknown NOPs are now handled via a script validation flag--
SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS.  Experience (e.g. with
STRICTDER) has show that script validation flags are much more robust
to casual twiddling than IsStandard is.

The only way that script validation flags have been observed getting
bypassed in the field was a miner that had disabled all signature
validation completely (and whom had a not-completely-negligible amount
of hashpower. :( )... as it's a lot more clear that you might be
exposing yourself to trouble if you mess with the validation flags.

> runs an old node from before OP_NOPs were made non-standard.

IIRC; There is no released version of Bitcoin that has IsStandard
which has failed failed to treat the NOPs as non-standard.

There was a brief time in git master between when IsStandardness was
relaxed and NOPs were addressed via a validation flag but I am
reasonably confident that didn't make it into a release.

Regardless, anyone actually running that code of that vintage would
already be incompatible with the current network already due to prior
soft forks.

And as a matter of fact, invalid CLTVs don't currently appear to get
mined. Checking this again pre-release would be a good checklist item.
For prior soft-forks we've monitored and tested for this (with the
goal of going and yelling at any broken miners to fix their behavior).

From tomh at thinlink.com  Wed Sep 30 23:41:51 2015
From: tomh at thinlink.com (Tom Harding)
Date: Wed, 30 Sep 2015 16:41:51 -0700
Subject: [bitcoin-dev] [BIP Proposal] Version bits with timeout and
	delay.
In-Reply-To: <8737xwhdac.fsf@rustcorp.com.au>
References: <87mvwqb132.fsf@rustcorp.com.au> <5602F075.4000102@thinlink.com>
	<8737xwhdac.fsf@rustcorp.com.au>
Message-ID: <560C733F.3080608@thinlink.com>

On 9/29/2015 7:05 PM, Rusty Russell wrote:
> Tom Harding via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org>
> writes:
>> With a simple delay, you can have the embarrassing situation where
>> support falls off during the delay period and there is far below
>> threshold support just moments prior to enforcement, but enforcement
>> happens anyway.
> Yeah, but Gavin's right.  If you can't account for all the corner cases,
> all you can do is keep it simple and well defined.
>

At least you changed the BIP to make it possible to see a fall off in 
support, even though nothing is done about it.


