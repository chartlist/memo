From keziahw at gmail.com  Fri Aug  1 00:58:23 2014
From: keziahw at gmail.com (Kaz Wesley)
Date: Thu, 31 Jul 2014 17:58:23 -0700
Subject: [Bitcoin-development] deterministic transaction expiration
Message-ID: <CA+iPb=HkxeVPF0SynxCPgUkq4msrdfayFrVNFjzg29rFwqXv1w@mail.gmail.com>

There is currently little in place for managing transaction lifetime
in the network's mempools (see discussion in github in #3722 "mempool
transaction expiration", and it seems to be a major factor blocking
some mempool exchange, see #1833/1918, #3721). Expiry per-node a
certain amount of wall time after receipt has been proposed, but
that's a fragile mechanism -- a single node could keep all relayable
transactions alive forever by remembering transactions until most
nodes have dropped them and then releasing them back into the wild.

I have a proposal for a way to add finite and predictable lifespans to
transactions in mempools: we d?e?s?t?r?o?y? ?t?h?e?
?r?e?s?u?r?r?e?c?t?i?o?n? ?h?u?b? use nLockTime and a new standardness
rule. It could be done in stages, would not necessarily require even a
soft fork, and does not cause problems with reorgs like the proposal
in #3509:
1. start setting nLockTime to the current height by default in newly
created transactions (or slightly below the current height, for
reorg-friendliness)
2. once users have had some time to upgrade to clients that set
nLockTime, start discouraging transactions without nLockTime --
possibly with a slightly higher fee required for relay
3. start rate-limiting relay of transactions without an nLockTime
(maybe this alone could be used to achieve [2])
4. add a new IsStandard rule rejecting transactions with an nLockTime
more than N blocks behind the current tip (for some fixed value N, to
be determined)

Transactions would stop being relayed and drop out of mempools a fixed
number of blocks from their creation; once that window had passed, the
sender's wallet could begin to expect the transaction would not be
confirmed. In case a reorg displaces a transaction until after its
expiry height, a miner can still put it back in the blockchain; the
expiry height is just a relay rule. Also, a user who needed to get
their original "expired" transaction confirmed could still do so by
submitting it directly to a miner with suitable policies.



From keziahw at gmail.com  Fri Aug  1 01:00:06 2014
From: keziahw at gmail.com (Kaz Wesley)
Date: Thu, 31 Jul 2014 18:00:06 -0700
Subject: [Bitcoin-development] Squashing redundant tx data in blocks on
 the wire
In-Reply-To: <CAAS2fgR32qBtAjYNMduHTjz7ae2TSVms-2O53uTgZqtZxX+fqQ@mail.gmail.com>
References: <CA+iPb=EaX=bvOjNtZ+LnYTMRLQQ9nFcrefAkBdv8eActoX_b8A@mail.gmail.com>
	<CABsx9T2PSa3MpfMMDCb8ACVF5vDOZOFLEK9zfP9PakgHA4U16w@mail.gmail.com>
	<CAPkFh0vKFnKRE-sd-Z9t1zB73VLPsiaQ3o=OYgBqqtUE4_rTaw@mail.gmail.com>
	<CA+iPb=GC7iw1LP6boyfX22oMO2k2=YcAuRhE0E3OzzJHYapsow@mail.gmail.com>
	<CAAS2fgS-KiP-tiy91Ah2hJ0pepA0OJDCG+Bv+redFtsqrUTevQ@mail.gmail.com>
	<CA+iPb=Fa4YSTjPuCfyWy0wB2XBV=Mi99G3Hb84gjy+muNDin+g@mail.gmail.com>
	<CAAS2fgSObqk=rD1vtV6LZzxUuyQMh+nwGuatOq1hUaQz2od0sg@mail.gmail.com>
	<CA+iPb=FV1_0SCzcqCz+2eeQW6L18c2O2aKW4zusgNKBYirqHcA@mail.gmail.com>
	<CAAS2fgR32qBtAjYNMduHTjz7ae2TSVms-2O53uTgZqtZxX+fqQ@mail.gmail.com>
Message-ID: <CA+iPb=HioTPDNjmq2WPa0ObR+2epN2efnJHaB9YCXynhiewtaw@mail.gmail.com>

On Thu, Jul 31, 2014 at 4:18 PM, Gregory Maxwell <gmaxwell at gmail.com> wrote:
> On Thu, Jul 31, 2014 at 3:27 PM, Kaz Wesley <keziahw at gmail.com> wrote:
>>> the FEC still lets you fill in the missing transactions without knowing in advance all that will be missing.
>>
>> I don't see why we need to solve that problem, since the protocol
>> already involves exchanging the information necessary to determine
>> (with some false positives) what a peer is missing, and needs to
>> continue doing so regardless of how blocks are transmitted.
>
> False positives, and if you have more than one peer? false negatives.
> (or a rule for what you must keep which is conservative in order to
> avoid creating huge storage requirements? but then also has false
> negatives).

I think a rule for what to keep (along with the false-positive rate
associated with the rule's conservativeness) is preferable to false
negatives, since round-trip cost is potentially very high. The
prototype I'm working on will be able to provide data on what the
false-positive-missing-tx rate would look like with something like
remember-last-N.

There are various ways that rule could be upgraded to nearly eliminate
the false-positive-missing rate, including learning what txes a peer
has dropped via periodic mempool syncing, or specifying the rule
explicitly with priority scripts, both of which have other benefits of
their own. All of these changes synergize, but as long as the
simplistic remembering rule yields worthwhile improvement over the
current approach they can all be done independently as incremental
improvements.

I also really like the idea of the referring to transactions by ids
that can themselves provide part of the tx data; I think that could
also be added separately, on top of these other changes. (Gregory,
your various wiki pages are basically my to-do list of things I'd like
to work on.)

The idea of mempool synchronization brings up the issue of transaction
expiration, since lack of mempool syncing is currently the mechanism
for tx expiry. I'm starting a discussion about how to address that in
a separate thread; see "deterministic transaction expiration".

>> As far as I can tell, channel memory sparseblocks achieve most of the
>> possible bandwidth savings, and when FEC-based mempool synchronization
>> is implemented its benefits can be applied to the sparseblocks by
>> resetting the channel memory to the mutual mempool state each time
>> mempool differences are exchanged. Am I missing a benefit to doing FEC
>> at block forwarding time that can't be realized by FEC-based mempool
>> synchronization, implemented separately from channel-memory based
>> index-coding?
>
> Yes, minimizing latency in the face of multiple peers.
>
> Otherwise no. And certantly no reason to to implement something simple first.



From pete at petertodd.org  Fri Aug  1 01:06:57 2014
From: pete at petertodd.org (Peter Todd)
Date: Fri, 1 Aug 2014 01:06:57 +0000
Subject: [Bitcoin-development] deterministic transaction expiration
In-Reply-To: <CA+iPb=HkxeVPF0SynxCPgUkq4msrdfayFrVNFjzg29rFwqXv1w@mail.gmail.com>
References: <CA+iPb=HkxeVPF0SynxCPgUkq4msrdfayFrVNFjzg29rFwqXv1w@mail.gmail.com>
Message-ID: <20140801010657.GA15436@localhost.localdomain>

On Thu, Jul 31, 2014 at 05:58:23PM -0700, Kaz Wesley wrote:
> I have a proposal for a way to add finite and predictable lifespans to
> transactions in mempools: we d?e?s?t?r?o?y? ?t?h?e?
> ?r?e?s?u?r?r?e?c?t?i?o?n? ?h?u?b? use nLockTime and a new standardness
> rule. It could be done in stages, would not necessarily require even a
> soft fork, and does not cause problems with reorgs like the proposal
> in #3509:

Anything that changes the semantics of nLockTime will do harm to
existing and future applications that make use of nLockTime for things
like refund transactions.

In any case, why do transactions need finite lifespans in mempools? If
you want to double-spend them with higher fees, then implement
replace-by-fee. In any case, lifetimes will never be deterministic as
not everyone runs the same software.

> Transactions would stop being relayed and drop out of mempools a fixed
> number of blocks from their creation; once that window had passed, the
> sender's wallet could begin to expect the transaction would not be
> confirmed. In case a reorg displaces a transaction until after its
> expiry height, a miner can still put it back in the blockchain; the
> expiry height is just a relay rule. Also, a user who needed to get
> their original "expired" transaction confirmed could still do so by
> submitting it directly to a miner with suitable policies.

...in which case someone will circumvent this IsStandard() rule by
submitting "expired" transactions directly to miners with suitable
policies.

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140801/f36a4f07/attachment.sig>

From keziahw at gmail.com  Fri Aug  1 01:37:45 2014
From: keziahw at gmail.com (Kaz Wesley)
Date: Thu, 31 Jul 2014 18:37:45 -0700
Subject: [Bitcoin-development] deterministic transaction expiration
In-Reply-To: <20140801010657.GA15436@localhost.localdomain>
References: <CA+iPb=HkxeVPF0SynxCPgUkq4msrdfayFrVNFjzg29rFwqXv1w@mail.gmail.com>
	<20140801010657.GA15436@localhost.localdomain>
Message-ID: <CA+iPb=GoGEXGprC6QCXrecM7qOTpCh09cYNqymXq5XH2zsELWQ@mail.gmail.com>

On Thu, Jul 31, 2014 at 6:06 PM, Peter Todd <pete at petertodd.org> wrote:
> Anything that changes the semantics of nLockTime will do harm to
> existing and future applications that make use of nLockTime for things
> like refund transactions.

I think this would be compatible with most uses of nLockTime -- e.g.,
at the time a refund transaction becomes broadcastable, its
beneficiary would usually have no reason to wait for a long time
before broadcasting it; if they did so (probably because they weren't
online to redeem the refund), they'd need to use the
submit-directly-to-miner option, but they wouldn't lose their refund.

> In any case, why do transactions need finite lifespans in mempools? If
> you want to double-spend them with higher fees, then implement
> replace-by-fee.

Perpetuating transactions that have been in mempools for a long time
and are not being confirmed has been cited as a reason for nodes not
to exchange mempools (#3721, #1833, #3722); it's been implied that it
would be desirable for wallets to wait until a transaction had had a
chance to be accepted before double-spending with a higher fee
(#3722); and an unconfirmed transaction-age-based policy for
preventing mempool accumulation has been advocated (#3753, #3722) [I
hope my summarization is not misrepresenting anyone's opinions here;
please see the arguments made in the actual comments on the bugs].
These discussions are mostly fairly old, but I don't know of any
changes that have been made that provide alternative answers to these
concerns mentioned by at least three different developers.

> In any case, lifetimes will never be deterministic as not everyone runs
> the same software.

That's true, but none of the benefits of these changes require the
policy to be unanimous; most of the effect could be provided by most
of the network following these rules.

>> Transactions would stop being relayed and drop out of mempools a fixed
>> number of blocks from their creation; once that window had passed, the
>> sender's wallet could begin to expect the transaction would not be
>> confirmed. In case a reorg displaces a transaction until after its
>> expiry height, a miner can still put it back in the blockchain; the
>> expiry height is just a relay rule. Also, a user who needed to get
>> their original "expired" transaction confirmed could still do so by
>> submitting it directly to a miner with suitable policies.
>
> ...in which case someone will circumvent this IsStandard() rule by
> submitting "expired" transactions directly to miners with suitable
> policies.

Yes, that is a feature. None of the benefits of transaction expiration
rely on expiration being final, and any possible downsides of
expiration are largely mitigated by the option still being available
to get expired transactions mined.



From bip at mattwhitlock.name  Fri Aug  1 01:38:56 2014
From: bip at mattwhitlock.name (Matt Whitlock)
Date: Thu, 31 Jul 2014 21:38:56 -0400
Subject: [Bitcoin-development] deterministic transaction expiration
In-Reply-To: <CA+iPb=HkxeVPF0SynxCPgUkq4msrdfayFrVNFjzg29rFwqXv1w@mail.gmail.com>
References: <CA+iPb=HkxeVPF0SynxCPgUkq4msrdfayFrVNFjzg29rFwqXv1w@mail.gmail.com>
Message-ID: <3826251.5rGb1MfKOu@crushinator>

It would make more sense to introduce a new script opcode that pushes the current block height onto the operand stack. Then you could implement arbitrary logic about which blocks the transaction can be valid in. This would require that the client revalidate all transactions in its mempool (really, only those making use of this opcode) whenever the chain tip changes.


On Thursday, 31 July 2014, at 5:58 pm, Kaz Wesley wrote:
> There is currently little in place for managing transaction lifetime
> in the network's mempools (see discussion in github in #3722 "mempool
> transaction expiration", and it seems to be a major factor blocking
> some mempool exchange, see #1833/1918, #3721). Expiry per-node a
> certain amount of wall time after receipt has been proposed, but
> that's a fragile mechanism -- a single node could keep all relayable
> transactions alive forever by remembering transactions until most
> nodes have dropped them and then releasing them back into the wild.
> 
> I have a proposal for a way to add finite and predictable lifespans to
> transactions in mempools: we d?e?s?t?r?o?y? ?t?h?e?
> ?r?e?s?u?r?r?e?c?t?i?o?n? ?h?u?b? use nLockTime and a new standardness
> rule. It could be done in stages, would not necessarily require even a
> soft fork, and does not cause problems with reorgs like the proposal
> in #3509:
> 1. start setting nLockTime to the current height by default in newly
> created transactions (or slightly below the current height, for
> reorg-friendliness)
> 2. once users have had some time to upgrade to clients that set
> nLockTime, start discouraging transactions without nLockTime --
> possibly with a slightly higher fee required for relay
> 3. start rate-limiting relay of transactions without an nLockTime
> (maybe this alone could be used to achieve [2])
> 4. add a new IsStandard rule rejecting transactions with an nLockTime
> more than N blocks behind the current tip (for some fixed value N, to
> be determined)
> 
> Transactions would stop being relayed and drop out of mempools a fixed
> number of blocks from their creation; once that window had passed, the
> sender's wallet could begin to expect the transaction would not be
> confirmed. In case a reorg displaces a transaction until after its
> expiry height, a miner can still put it back in the blockchain; the
> expiry height is just a relay rule. Also, a user who needed to get
> their original "expired" transaction confirmed could still do so by
> submitting it directly to a miner with suitable policies.



From gmaxwell at gmail.com  Fri Aug  1 02:28:15 2014
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Thu, 31 Jul 2014 19:28:15 -0700
Subject: [Bitcoin-development] deterministic transaction expiration
In-Reply-To: <3826251.5rGb1MfKOu@crushinator>
References: <CA+iPb=HkxeVPF0SynxCPgUkq4msrdfayFrVNFjzg29rFwqXv1w@mail.gmail.com>
	<3826251.5rGb1MfKOu@crushinator>
Message-ID: <CAAS2fgQPVwMzHBWmbRLBHZcm+YEbioqUHoL_a-SLr9yWDmguiw@mail.gmail.com>

On Thu, Jul 31, 2014 at 6:38 PM, Matt Whitlock <bip at mattwhitlock.name> wrote:
> It would make more sense to introduce a new script opcode that pushes the current block height onto the operand stack. Then you could implement arbitrary logic about which blocks the transaction can be valid in. This would require that the client revalidate all transactions in its mempool (really, only those making use of this opcode) whenever the chain tip changes.

Transactions that become invalid later are have pretty severe
consequences because they might mean that completely in an absence of
fraud transactions are forever precluded due to a otherwise harmless
reorg.

While there may be uses for that, the resulting outputs should be
considered differently fungible? like coinbases which are immature?
and should probably be only used with great caution... not as a
mechanism for ordinary transactions.



From bip at mattwhitlock.name  Fri Aug  1 03:26:20 2014
From: bip at mattwhitlock.name (Matt Whitlock)
Date: Thu, 31 Jul 2014 23:26:20 -0400
Subject: [Bitcoin-development] deterministic transaction expiration
In-Reply-To: <CAAS2fgQPVwMzHBWmbRLBHZcm+YEbioqUHoL_a-SLr9yWDmguiw@mail.gmail.com>
References: <CA+iPb=HkxeVPF0SynxCPgUkq4msrdfayFrVNFjzg29rFwqXv1w@mail.gmail.com>
	<3826251.5rGb1MfKOu@crushinator>
	<CAAS2fgQPVwMzHBWmbRLBHZcm+YEbioqUHoL_a-SLr9yWDmguiw@mail.gmail.com>
Message-ID: <1515086.GQImTWpAiA@crushinator>

On Thursday, 31 July 2014, at 7:28 pm, Gregory Maxwell wrote:
> On Thu, Jul 31, 2014 at 6:38 PM, Matt Whitlock <bip at mattwhitlock.name> wrote:
> > It would make more sense to introduce a new script opcode that pushes the current block height onto the operand stack. Then you could implement arbitrary logic about which blocks the transaction can be valid in. This would require that the client revalidate all transactions in its mempool (really, only those making use of this opcode) whenever the chain tip changes.
> 
> Transactions that become invalid later are have pretty severe
> consequences because they might mean that completely in an absence of
> fraud transactions are forever precluded due to a otherwise harmless
> reorg.

I understand what you're saying, but I don't understand why it's a problem. Transactions shouldn't be considered "final" until a reasonable number of confirmations anyway, so the possibility that an "accepted" transaction could become invalid due to a chain reorganization is not a new danger. Ordinary transactions can similarly become invalid due to chain reorganizations, due to inputs already having been spent in the new branch.



From gmaxwell at gmail.com  Fri Aug  1 03:31:19 2014
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Thu, 31 Jul 2014 20:31:19 -0700
Subject: [Bitcoin-development] deterministic transaction expiration
In-Reply-To: <1515086.GQImTWpAiA@crushinator>
References: <CA+iPb=HkxeVPF0SynxCPgUkq4msrdfayFrVNFjzg29rFwqXv1w@mail.gmail.com>
	<3826251.5rGb1MfKOu@crushinator>
	<CAAS2fgQPVwMzHBWmbRLBHZcm+YEbioqUHoL_a-SLr9yWDmguiw@mail.gmail.com>
	<1515086.GQImTWpAiA@crushinator>
Message-ID: <CAAS2fgT2g9FgsVuKWLLxNqE_pp1DgdAc-edLL474UQ+eJQiXwg@mail.gmail.com>

On Thu, Jul 31, 2014 at 8:26 PM, Matt Whitlock <bip at mattwhitlock.name> wrote:
> I understand what you're saying, but I don't understand why it's a problem. Transactions shouldn't be considered "final" until a reasonable number of confirmations anyway, so the possibility that an "accepted" transaction could become invalid due to a chain reorganization is not a new danger. Ordinary transactions can similarly become invalid due to chain reorganizations, due to inputs already having been spent in the new branch.

A distinction there is that they can only become invalid via a
conflict? replaced by another transaction authored by the prior
signers. If no other transaction could be created (e.g. you're a
multisigner and won't sign it again) then there is no such risk.  It
now introduces chance events ("act of god") into the mix where they
they didn't exist before.  Basically it takes was what is a very loose
one way coupling and makes it much tighter. I'm sure if you spend a
bit thinking you can come up with some more corner cases that it would
expose? e.g. flooding the network with unrelated high fee transactions
in order to push a transaction out to where it can never be mined at
all.



From tomh at thinlink.com  Sat Aug  2 00:36:46 2014
From: tomh at thinlink.com (Tom Harding)
Date: Fri, 01 Aug 2014 17:36:46 -0700
Subject: [Bitcoin-development] deterministic transaction expiration
In-Reply-To: <CA+iPb=HkxeVPF0SynxCPgUkq4msrdfayFrVNFjzg29rFwqXv1w@mail.gmail.com>
References: <CA+iPb=HkxeVPF0SynxCPgUkq4msrdfayFrVNFjzg29rFwqXv1w@mail.gmail.com>
Message-ID: <53DC329E.7090206@thinlink.com>

On 7/31/2014 5:58 PM, Kaz Wesley wrote:
> 1. start setting nLockTime to the current height by default in newly
> created transactions (or slightly below the current height, for
> reorg-friendliness)

Reorg-frendliness is the opposite of the rationale behind #2340, which 
proposes setting nLockTime at current-height + 1 to prevent 
"fee-sniping" reorgs...


> 2. once users have had some time to upgrade to clients that set
> nLockTime, start discouraging transactions without nLockTime --
> possibly with a slightly higher fee required for relay
> 3. start rate-limiting relay of transactions without an nLockTime
> (maybe this alone could be used to achieve [2])
> 4. add a new IsStandard rule rejecting transactions with an nLockTime
> more than N blocks behind the current tip (for some fixed value N, to
> be determined)
>

One way to proceed is implement #3753 (mempool janitor) in such a way 
that transactions with nLockTime are allowed to live a bit longer in the 
mempool (say 500 blocks) than those without (72 hours).  In other words, 
as a first step, just actually start expiring things from the mempool in 
bitcoin core, and leave any relay fee adjustments or rate limiting for 
later.  The isStandard change would be a good complement to #3753, to 
avoid relaying a tx that will soon expire by the nLockTime rule anyway.





From bitcoin-list at bluematt.me  Sun Aug  3 00:56:54 2014
From: bitcoin-list at bluematt.me (Matt Corallo)
Date: Sun, 03 Aug 2014 00:56:54 +0000
Subject: [Bitcoin-development] [ANN] High-speed Bitcoin Relay Network
In-Reply-To: <5279D89D.5000609@bluematt.me>
References: <5279D89D.5000609@bluematt.me>
Message-ID: <53DD88D6.7040502@bluematt.me>

For those who have been using this to get faster relays to/from the
network, you may have noticed some instability recently. This is because
the nodes were all being upgraded to use some new relaying code which
should cut down on duplicate transaction relaying in blocks, improving
relay speed within the network and to nodes which run new clients which
use the same relaying technique. Essentially instead of relaying entire
blocks, nodes keep a rolling window of recently-seen transactions and
skip those when relaying blocks.

You can find a simple client which connects to a local bitcoind and a
relay node at http://bitcoin.ninja/RelayNodeClient.jar and the source
for the whole thing at https://github.com/TheBlueMatt/RelayNode.

Matt

On 11/06/13 05:50, Matt Corallo wrote:
> Recently, there has been a reasonable amount of discussion about the
> continued fragility of the public Bitcoin network on IRC and elsewhere
> (1). To this extent, I'm organizing a system of peering between nodes in
> the network by creating a system of high-speed relay nodes for miners
> and merchants/exchanges. This system will a) act as a fallback in the
> case that the public Bitcoin network encounters issues and b) decrease
> block propagation times between miners.
> It is NOT designed to in any way replace or decrease the need for the
> public Bitcoin P2P network. It is NOT any kind of attempt at
> centralization, and I still encourage interested parties to establish
> their own private peering agreements with large miners as needed.
> 
> Currently the network consists of one specially-designed relay node, but
> I hope to bring more online in the coming days.
> 
> This network is open to everyone via a few public relay nodes, but also
> will have nodes which are made available only to large miners and
> merchants/exchanges to mitigate the ability of malicious parties to DoS
> the network.
> 
> To peer with the public relay nodes, simply select the closest region
> out of us-west (West Coast US), us-east (East Coast US), eu (Western
> Europe), au (Australia), or jpy (Japan) and add
> public.REGION.relay.mattcorallo.com to your addnode list. Note that
> since all of the relay nodes will relay between each other, you gain no
> latency advantage by peering with more than the closest node to you (and
> currently all the regions map to one node, so there they're redundant
> anyway).
> 
> For each relay node, you can connect to either port 8334 or 8335.
> Connecting on port 8334 will relay only blocks, and port 8335 will relay
> both blocks and transactions. The relay nodes will request any
> transactions which appear in your invs no matter which port you connect to.
> 
> Relay node details:
>  * The relay nodes do some data verification to prevent DoS, but in
> order to keep relay fast, they do not fully verify the data they are
> relaying, thus YOU SHOULD NEVER mine a block building on top of a
> relayed block without fully checking it with your own bitcoin validator
> (as you would any other block relayed from the P2P network).
>  * The relay nodes do not follow the standard inv-getdata-tx/block flow,
> but instead relay transactions/blocks immediately after they have done
> their cursory verification. They do keep some track of whether or not
> your nodes claim to have seen the transactions/blocks before relaying,
> but you may see transactions/blocks being sent which you already have
> and have not requested, if this is a problem for you due to bandwith
> issues, you should reconsider your bandwith constraints and/or are
> peering with too many nodes.
>  * The relay nodes will all relay among themselves very quickly, so
> there is no advantage to peering with as many relay nodes as you can
> find, in fact, the increased incoming bandwidth during block relay
> spikes may result in higher latency for your nodes.
>  * The relay nodes are NOT designed to ensure that you never miss data,
> and may fail to relay some transactions. Additionally, because the relay
> nodes do not respond to standard getdata requests, if you miss a relay
> and then reconnect, that data will not be sent again by the relay nodes.
> The relay nodes are NOT a replacement for having peers on the standard
> P2P network, they are only there to augment the existing P2P network.
> 
> If you are a merchant/exchange/large miner/other important node operator
> and wish to gain access to additional domain names which map to relay
> nodes with fewer peers, please fill out the form at
> https://docs.google.com/forms/d/1UL82QdcXXEhZwSHJAK04Sk_cWg4zLOu8a216nO7Mt8c/viewform
> 
> You can find the source for the relay nodes at
> https://github.com/TheBlueMatt/RelayNode
> 
> If you have any comments/concerns/suggestions, please do not hesitate to
> email bitcoin-peering at mattcorallo.com
> 
> Thanks,
> Matt
> 
> 
> (1) There has been extended discussion on #bitcoin-wizards as well as
> #bitcoin-dev of the very small number of active, listening nodes.
> Additionally, because many of those nodes are versions prior to 0.8.4,
> it seems very likely that maliciously creating network splits or at
> least drastically reducing the number of peers for most nodes would not
> be particularly challenging in the current network. Also,
> http://www.tik.ee.ethz.ch/file/49318d3f56c1d525aabf7fda78b23fc0/P2P2013_041.pdf
> noted that they were able to single-handledly decrease the network-wide
> orphan rate by around 50% by improving network peering. Finally, you've
> all seen the recent discussion on malicious mining algorithms. Though
> those are not entirely prevented by reducing block propagation times,
> they can be significantly limited compared to the current, rather
> disjoint, network.
> 
> ------------------------------------------------------------------------------
> November Webinars for C, C++, Fortran Developers
> Accelerate application performance with scalable programming models. Explore
> techniques for threading, error checking, porting, and tuning. Get the most 
> from the latest Intel processors and coprocessors. See abstracts and register
> http://pubads.g.doubleclick.net/gampad/clk?id=60136231&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 



From gsanders87 at gmail.com  Sun Aug  3 17:23:07 2014
From: gsanders87 at gmail.com (Gregory Sanders)
Date: Sun, 3 Aug 2014 17:23:07 +0000 (UTC)
Subject: [Bitcoin-development] Tree-chains preliminary summary
References: <20140322084702.GA13436@savin> <20140322150836.GG3180@nl.grid.coop>
	<20140322190825.GB6047@savin> <532DE7E6.4050304@monetize.io>
	<20140325122851.GA9818@savin>
Message-ID: <loom.20140803T191541-941@post.gmane.org>

Peter I was curious if you could detail what specific concerns Adam Back 
brought up with the current iteration of the tree-chains idea? It's been 
alluded to a few times yet I have not read the specific problem.

Greg






From mike at plan99.net  Tue Aug  5 15:00:10 2014
From: mike at plan99.net (Mike Hearn)
Date: Tue, 5 Aug 2014 17:00:10 +0200
Subject: [Bitcoin-development] How to create a pull tester JAR
Message-ID: <CANEZrP1mU6iS6NRyK6iJtg4BEQ3nQRFc-dVwaOd+P_NFThqxjw@mail.gmail.com>

I just checked in a change to bitcoinj git master that makes it much easier
to create a pull tester jar. Here are instructions for how to do it.

You will need:

   - A Java Development Kit (JDK), version 6 or up should work. As Java 6
   was released eight years ago, this should not be a challenging requirement.
   If you have a Mac just running "java" from the command line should give you
   a GUI prompt to install it automatically. Otherwise apt-get or fetch the
   latest from the interwebs.

   - Apache Maven. This is a rough equivalent of autotools, except it does
   dependency resolution for you. Grab it from
   http://maven.apache.org/download.cgi then unzip it and make sure the bin
   directory is in your PATH. You may need to set the JAVA_HOME environment
   variable if you installed Java to an odd place.

   - git

Make sure you can run "javac" from the command line, then make sure you can
run "mvn", it should complain it can't find a POM (this is a build config
file) and not, say, that it can't find Java.

Now grab bitcoinj from git master:

git clone https://github.com/bitcoinj/bitcoinj.git

... and build ....

cd bitcoinj
mvn -DskipTests package

It will go off and download the libraries needed, compile, and create a
bundled executable JAR called core/target/pull-tests.jar. This is sort of
analogous to static linking in the Java world. It should be fast - expect a
full build plus downloads to take less than a minute. You can use it either
with the QA scripts in the bitcoin core qa/pull-tester directory or just
run things directly:

./bitcoind -regtest -connect=0.0.0.0 -listen -whitelist=127.0.0.1
-datadir=/tmp/pulltester
java -jar core/target/pull-tests.jar

It should go ahead and print lots of debug spew, then at the end say it's
happy.

Let me know if you encounter any problems with this.

Java JARs (which are just zip files renamed) are easily reproduced if you
use the same version of javac and the same bitcoinj version. The ZIP
container has timestamps, but unzipping them and simply diffing the files
between two builds should reveal no differences. I am happy to provide a
pull-tests.jar from my local machine if anyone would like to do this.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140805/516cdf34/attachment.html>

From mike at plan99.net  Tue Aug  5 15:11:17 2014
From: mike at plan99.net (Mike Hearn)
Date: Tue, 5 Aug 2014 17:11:17 +0200
Subject: [Bitcoin-development] How to create a pull tester JAR
In-Reply-To: <CANEZrP1mU6iS6NRyK6iJtg4BEQ3nQRFc-dVwaOd+P_NFThqxjw@mail.gmail.com>
References: <CANEZrP1mU6iS6NRyK6iJtg4BEQ3nQRFc-dVwaOd+P_NFThqxjw@mail.gmail.com>
Message-ID: <CANEZrP33RzATTtkgq7bLthLXjnRT5J1+fD=z3pkU9cLe8BeSSg@mail.gmail.com>

Oh, I forgot to mention something important. Ridiculously, the default
package repository Maven uses was not protected by SSL up until a few days
ago.  They made it available via SSL now, but you have to tell Maven about
the new URL. I guess they'll do a new release where SSL is the default
soon. But for now before you run mvn save the following magic incantation
to the path ~/.m2/settings.xml:

(side note: yes maven's love of XML is widely ridiculed and more modern
build tools have much better config languages, but we didn't upgrade yet)

<settings>
  <activeProfiles>
    <!--make the profile active all the time -->
    <activeProfile>securecentral</activeProfile>
  </activeProfiles>
  <profiles>
    <profile>
      <id>securecentral</id>
      <!--Override the repository (and pluginRepository) "central" from the
         Maven Super POM -->
      <repositories>
        <repository>
          <id>central</id>
          <url>https://repo1.maven.org/maven2</url>
          <releases>
            <enabled>true</enabled>
          </releases>
        </repository>
      </repositories>
      <pluginRepositories>
        <pluginRepository>
          <id>central</id>
          <url>https://repo1.maven.org/maven2</url>
          <releases>
            <enabled>true</enabled>
          </releases>
        </pluginRepository>
      </pluginRepositories>
    </profile>
  </profiles>
</settings>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140805/a6caf6d5/attachment.html>

From jgarzik at bitpay.com  Tue Aug  5 15:45:35 2014
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Tue, 5 Aug 2014 11:45:35 -0400
Subject: [Bitcoin-development] How to create a pull tester JAR
In-Reply-To: <CANEZrP1mU6iS6NRyK6iJtg4BEQ3nQRFc-dVwaOd+P_NFThqxjw@mail.gmail.com>
References: <CANEZrP1mU6iS6NRyK6iJtg4BEQ3nQRFc-dVwaOd+P_NFThqxjw@mail.gmail.com>
Message-ID: <CAJHLa0NdJhGyFfhzhxmL3=qNjYed0+FQ-X4EQdrVMR3K4Het7Q@mail.gmail.com>

Thanks for posting that (and implicitly archiving the knowledge).  Anything
that makes test improvement easier is welcomed.



On Tue, Aug 5, 2014 at 11:00 AM, Mike Hearn <mike at plan99.net> wrote:

> I just checked in a change to bitcoinj git master that makes it much
> easier to create a pull tester jar. Here are instructions for how to do it.
>
> You will need:
>
>    - A Java Development Kit (JDK), version 6 or up should work. As Java 6
>    was released eight years ago, this should not be a challenging requirement.
>    If you have a Mac just running "java" from the command line should give you
>    a GUI prompt to install it automatically. Otherwise apt-get or fetch the
>    latest from the interwebs.
>
>    - Apache Maven. This is a rough equivalent of autotools, except it
>    does dependency resolution for you. Grab it from
>    http://maven.apache.org/download.cgi then unzip it and make sure the
>    bin directory is in your PATH. You may need to set the JAVA_HOME
>    environment variable if you installed Java to an odd place.
>
>    - git
>
> Make sure you can run "javac" from the command line, then make sure you
> can run "mvn", it should complain it can't find a POM (this is a build
> config file) and not, say, that it can't find Java.
>
> Now grab bitcoinj from git master:
>
> git clone https://github.com/bitcoinj/bitcoinj.git
>
> ... and build ....
>
> cd bitcoinj
> mvn -DskipTests package
>
> It will go off and download the libraries needed, compile, and create a
> bundled executable JAR called core/target/pull-tests.jar. This is sort of
> analogous to static linking in the Java world. It should be fast - expect a
> full build plus downloads to take less than a minute. You can use it either
> with the QA scripts in the bitcoin core qa/pull-tester directory or just
> run things directly:
>
> ./bitcoind -regtest -connect=0.0.0.0 -listen -whitelist=127.0.0.1
> -datadir=/tmp/pulltester
> java -jar core/target/pull-tests.jar
>
> It should go ahead and print lots of debug spew, then at the end say it's
> happy.
>
> Let me know if you encounter any problems with this.
>
> Java JARs (which are just zip files renamed) are easily reproduced if you
> use the same version of javac and the same bitcoinj version. The ZIP
> container has timestamps, but unzipping them and simply diffing the files
> between two builds should reveal no differences. I am happy to provide a
> pull-tests.jar from my local machine if anyone would like to do this.
>
>
> ------------------------------------------------------------------------------
> Infragistics Professional
> Build stunning WinForms apps today!
> Reboot your WinForms applications with our WinForms controls.
> Build a bridge from your legacy apps to the future.
>
> http://pubads.g.doubleclick.net/gampad/clk?id=153845071&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>


-- 
Jeff Garzik
Bitcoin core developer and open source evangelist
BitPay, Inc.      https://bitpay.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140805/b619bd82/attachment.html>

From andreas at schildbach.de  Tue Aug  5 16:11:39 2014
From: andreas at schildbach.de (Andreas Schildbach)
Date: Tue, 05 Aug 2014 18:11:39 +0200
Subject: [Bitcoin-development] How to create a pull tester JAR
In-Reply-To: <CANEZrP33RzATTtkgq7bLthLXjnRT5J1+fD=z3pkU9cLe8BeSSg@mail.gmail.com>
References: <CANEZrP1mU6iS6NRyK6iJtg4BEQ3nQRFc-dVwaOd+P_NFThqxjw@mail.gmail.com>
	<CANEZrP33RzATTtkgq7bLthLXjnRT5J1+fD=z3pkU9cLe8BeSSg@mail.gmail.com>
Message-ID: <lrqvnr$7lp$1@ger.gmane.org>

On 08/05/2014 05:11 PM, Mike Hearn wrote:

> Oh, I forgot to mention something important. Ridiculously, the default
> package repository Maven uses was not protected by SSL up until a few
> days ago.  They made it available via SSL now, but you have to tell
> Maven about the new URL. I guess they'll do a new release where SSL is
> the default soon.

FWIW, I filed a wishlist item here:
https://jira.codehaus.org/browse/MNG-5672

and here, for the old Ubuntu versions of Maven:
https://bugs.launchpad.net/ubuntu/+source/maven/+bug/1352418




From mike at plan99.net  Tue Aug  5 16:58:31 2014
From: mike at plan99.net (Mike Hearn)
Date: Tue, 5 Aug 2014 18:58:31 +0200
Subject: [Bitcoin-development] How to create a pull tester JAR
In-Reply-To: <CAJHLa0NdJhGyFfhzhxmL3=qNjYed0+FQ-X4EQdrVMR3K4Het7Q@mail.gmail.com>
References: <CANEZrP1mU6iS6NRyK6iJtg4BEQ3nQRFc-dVwaOd+P_NFThqxjw@mail.gmail.com>
	<CAJHLa0NdJhGyFfhzhxmL3=qNjYed0+FQ-X4EQdrVMR3K4Het7Q@mail.gmail.com>
Message-ID: <CANEZrP2n9uRxbpyvF8D0478umbJ-K_sz9V8ahz5EXaCQRaM8sw@mail.gmail.com>

No problem.

The pull tester entry point can be found here:

https://github.com/bitcoinj/bitcoinj/blob/master/core/src/test/java/com/google/bitcoin/core/BitcoindComparisonTool.java

(nb: in the near future I will be re-namespacing the library from
com.google.bitcoin to org.bitcoinj to reflect that it no longer has
anything to do with Google and then this link will break).

The code itself is a rather bad example of copy/paste coding and I can say
that, because Matt knows it and already plans to refactor things ;) So if
anyone is thinking of adding tests to the framework coordinate with him
first to ensure you don't end up conflicting with a big refactor/rewrite.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140805/fdced951/attachment.html>

From flavien.charlon at coinprism.com  Tue Aug  5 17:02:38 2014
From: flavien.charlon at coinprism.com (Flavien Charlon)
Date: Tue, 5 Aug 2014 18:02:38 +0100
Subject: [Bitcoin-development] deterministic transaction expiration
In-Reply-To: <53DC329E.7090206@thinlink.com>
References: <CA+iPb=HkxeVPF0SynxCPgUkq4msrdfayFrVNFjzg29rFwqXv1w@mail.gmail.com>
	<53DC329E.7090206@thinlink.com>
Message-ID: <CABbpET_=Xz2=mx-hwFOwQ0K=t=Rq=P6gyiDHCAYoaJzo1zJd0g@mail.gmail.com>

> It would make more sense to introduce a new script opcode that pushes the
current block height onto the operand stack. Then you could implement
arbitrary logic about which blocks the transaction can be valid in. This
would require that the client revalidate all transactions in its mempool
(really, only those making use of this opcode) whenever the chain tip
changes.

I have to say I like this idea, this would allow someone to prove they
can't spend funds before a given date, and vice versa, prove that the funds
can't ever be spent after a given date (and this is provably prunable,
isn't it?). Of course, there are some risks associated with that, but
nobody is forced to use it.

> flooding the network with unrelated high fee transactions
> in order to push a transaction out to where it can never be mined at
> all.

This becomes increasingly expensive as the deadline is further away, so not
very hard to mitigate.


On Sat, Aug 2, 2014 at 1:36 AM, Tom Harding <tomh at thinlink.com> wrote:

> On 7/31/2014 5:58 PM, Kaz Wesley wrote:
> > 1. start setting nLockTime to the current height by default in newly
> > created transactions (or slightly below the current height, for
> > reorg-friendliness)
>
> Reorg-frendliness is the opposite of the rationale behind #2340, which
> proposes setting nLockTime at current-height + 1 to prevent
> "fee-sniping" reorgs...
>
>
> > 2. once users have had some time to upgrade to clients that set
> > nLockTime, start discouraging transactions without nLockTime --
> > possibly with a slightly higher fee required for relay
> > 3. start rate-limiting relay of transactions without an nLockTime
> > (maybe this alone could be used to achieve [2])
> > 4. add a new IsStandard rule rejecting transactions with an nLockTime
> > more than N blocks behind the current tip (for some fixed value N, to
> > be determined)
> >
>
> One way to proceed is implement #3753 (mempool janitor) in such a way
> that transactions with nLockTime are allowed to live a bit longer in the
> mempool (say 500 blocks) than those without (72 hours).  In other words,
> as a first step, just actually start expiring things from the mempool in
> bitcoin core, and leave any relay fee adjustments or rate limiting for
> later.  The isStandard change would be a good complement to #3753, to
> avoid relaying a tx that will soon expire by the nLockTime rule anyway.
>
>
>
>
> ------------------------------------------------------------------------------
> Want fast and easy access to all the code in your enterprise? Index and
> search up to 200,000 lines of code with a free copy of Black Duck
> Code Sight - the same software that powers the world's largest code
> search on Ohloh, the Black Duck Open Hub! Try it now.
> http://p.sf.net/sfu/bds
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140805/6b077ada/attachment.html>

From jgarzik at bitpay.com  Tue Aug  5 17:48:18 2014
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Tue, 5 Aug 2014 13:48:18 -0400
Subject: [Bitcoin-development] deterministic transaction expiration
In-Reply-To: <CA+iPb=HkxeVPF0SynxCPgUkq4msrdfayFrVNFjzg29rFwqXv1w@mail.gmail.com>
References: <CA+iPb=HkxeVPF0SynxCPgUkq4msrdfayFrVNFjzg29rFwqXv1w@mail.gmail.com>
Message-ID: <CAJHLa0O2wFq2Vs5Bes_8x1q_j0VC+U4DQkx=6GqT8w5e8Lh5Qg@mail.gmail.com>

Glad this was brought up.

Transaction expiration is something that I have wanted to see happen in
bitcoin for a long, long time.  The user experience of unconfirming
transactions setting around in limbo is just horrible.  Bitcoin software by
necessity has gotten better about attaching fees so this sort of behavior
is uncommon, but that does not eliminate the problem.

Of course, we cannot presume that a transaction will truly disappear -- The
Internet Never Forgets -- but given a bit of mempool adjusting, we can
achieve the next best thing:  the majority of the network "forgets" the
transaction and becomes willing to relay a respend of some or all of the
inputs.  This uses existing client logic where the client must rebroadcast
a transaction until it is confirmed.

In general, if a transaction has not made it into a block within 144*X
blocks, there is _some_ reason it is getting rejected by the miners.

The mempool janitor is a garbage collector design.  This is inferior to the
"superblock" model described at
https://github.com/bitcoin/bitcoin/issues/3723   Other models can also
achieve similar results.

There are a lot of issues tied together here:  transaction expiration, the
desire to cap the mempool ram usage, scalability, DoS prevention, ...
mempool ties a lot together.

-- 
Jeff Garzik
Bitcoin core developer and open source evangelist
BitPay, Inc.      https://bitpay.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140805/a0141ec0/attachment.html>

From alex.mizrahi at gmail.com  Tue Aug  5 18:01:29 2014
From: alex.mizrahi at gmail.com (Alex Mizrahi)
Date: Tue, 5 Aug 2014 21:01:29 +0300
Subject: [Bitcoin-development] deterministic transaction expiration
In-Reply-To: <CAAS2fgT2g9FgsVuKWLLxNqE_pp1DgdAc-edLL474UQ+eJQiXwg@mail.gmail.com>
References: <CA+iPb=HkxeVPF0SynxCPgUkq4msrdfayFrVNFjzg29rFwqXv1w@mail.gmail.com>
	<3826251.5rGb1MfKOu@crushinator>
	<CAAS2fgQPVwMzHBWmbRLBHZcm+YEbioqUHoL_a-SLr9yWDmguiw@mail.gmail.com>
	<1515086.GQImTWpAiA@crushinator>
	<CAAS2fgT2g9FgsVuKWLLxNqE_pp1DgdAc-edLL474UQ+eJQiXwg@mail.gmail.com>
Message-ID: <CAE28kUQwHwkovAVhp=OHfOw72n2NRqQgDWjWqNkp8RrJY9d_0A@mail.gmail.com>

>
> A distinction there is that they can only become invalid via a
> conflict? replaced by another transaction authored by the prior
> signers. If no other transaction could be created (e.g. you're a
> multisigner and won't sign it again) then there is no such risk.


You need to check transaction's dependencies up to a certain depth to know
whether it is safe:
 If one of inputs depends on transaction which is signed by parties with
unknown trustworthiness, then it isn't safe.


>  It now introduces chance events ("act of god") into the mix where they
> they didn't exist before.


You need to check transaction's dependencies up to a certain depth to know
whether it is safe:
  If one of inputs depends on transaction time-locked script (or other
unrecognized script), then it isn't safe.

Situation is identical, you might need several extra lines of code.

I think it would matter only if we had deterministic, reliable mempool and
reorganization behavior. But it's not something we can depend on.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140805/bd7de220/attachment.html>

From mike at plan99.net  Tue Aug  5 18:54:08 2014
From: mike at plan99.net (Mike Hearn)
Date: Tue, 5 Aug 2014 20:54:08 +0200
Subject: [Bitcoin-development] deterministic transaction expiration
In-Reply-To: <CAJHLa0O2wFq2Vs5Bes_8x1q_j0VC+U4DQkx=6GqT8w5e8Lh5Qg@mail.gmail.com>
References: <CA+iPb=HkxeVPF0SynxCPgUkq4msrdfayFrVNFjzg29rFwqXv1w@mail.gmail.com>
	<CAJHLa0O2wFq2Vs5Bes_8x1q_j0VC+U4DQkx=6GqT8w5e8Lh5Qg@mail.gmail.com>
Message-ID: <CANEZrP0AXvF5EYvsdpYxGUi5yV9eD_8qUge80XCoaeyekfd67Q@mail.gmail.com>

>
> The user experience of unconfirming transactions setting around in limbo
> is just horrible.  Bitcoin software by necessity has gotten better about
> attaching fees so this sort of behavior is uncommon, but that does not
> eliminate the problem.
>

Yes, indeed. I suspect there's a quick hack that could make this problem a
lot better though.

I think I brought up this idea before, but can't quite remember. Anyway I'm
willing to bet that if we analysed the data some more, we'd discover that
most "legitimate" i.e. non-DoS unconfirmed transactions that sit around for
ages are linked back to the block chain within two hops and not more. That
is people send a transaction that uses up their coin age, and then
immediately those coins are immediately respent again, but then those final
new coins are not spent.

On the other hand DoS attacks look like bouncing your coins around over and
over forever, i.e. more than two or three hops back to the chain.

So I wonder if making priority look back two or three transactions but not
more would help real users a lot, whilst not opening up any significant new
potential for DoS.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140805/3271d5a7/attachment.html>

From jgarzik at bitpay.com  Tue Aug  5 19:08:14 2014
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Tue, 5 Aug 2014 15:08:14 -0400
Subject: [Bitcoin-development] deterministic transaction expiration
In-Reply-To: <CANEZrP0AXvF5EYvsdpYxGUi5yV9eD_8qUge80XCoaeyekfd67Q@mail.gmail.com>
References: <CA+iPb=HkxeVPF0SynxCPgUkq4msrdfayFrVNFjzg29rFwqXv1w@mail.gmail.com>
	<CAJHLa0O2wFq2Vs5Bes_8x1q_j0VC+U4DQkx=6GqT8w5e8Lh5Qg@mail.gmail.com>
	<CANEZrP0AXvF5EYvsdpYxGUi5yV9eD_8qUge80XCoaeyekfd67Q@mail.gmail.com>
Message-ID: <CAJHLa0PTCRZL5PzrQYehRKG5G_D1i9zRdoqy4EN2ooMf7rh_8A@mail.gmail.com>

I feel like a lot of this will be driven by implementation, and costs of
changing the implementation.  Additional look-backs are of course doable,
but they incur some disk I/O costs.  The fields available in memory for
each mempool TX are

    uint256 tx_hash; // hash of next field
    CTransaction tx;
    int64_t nFee; // Cached to avoid expensive parent-transaction lookups
    size_t nTxSize; // ... and avoid recomputing tx size
    int64_t nTime; // Local time when entering the mempool
    double dPriority; // Priority when entering the mempool
    unsigned int nHeight; // Chain height when entering the mempool

As a first pass, we may prune the mempool without additional db lookups
quite easily based on time criteria.  Or, additional in-memory indexes may
be constructed to maintain hashes ordered by priority/fees.

Those techniques seem likely to be attempted before resorting to looking
back two or three TXs deep at coin age -- which I admit is an interesting
metric.

-- 
Jeff Garzik
Bitcoin core developer and open source evangelist
BitPay, Inc.      https://bitpay.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140805/aeb32c14/attachment.html>

From keziahw at gmail.com  Tue Aug  5 19:10:50 2014
From: keziahw at gmail.com (Kaz Wesley)
Date: Tue, 5 Aug 2014 12:10:50 -0700
Subject: [Bitcoin-development] deterministic transaction expiration
In-Reply-To: <CAJHLa0O2wFq2Vs5Bes_8x1q_j0VC+U4DQkx=6GqT8w5e8Lh5Qg@mail.gmail.com>
References: <CA+iPb=HkxeVPF0SynxCPgUkq4msrdfayFrVNFjzg29rFwqXv1w@mail.gmail.com>
	<CAJHLa0O2wFq2Vs5Bes_8x1q_j0VC+U4DQkx=6GqT8w5e8Lh5Qg@mail.gmail.com>
Message-ID: <CA+iPb=ET+A-qB8TgPX8D-ut1DWnq9tZJ=14igfRVWO6eog6Xgw@mail.gmail.com>

> In general, if a transaction has not made it into a block within 144*X blocks, there is _some_ reason it is getting rejected by the miners.

This is the crux of my concern: relay policy and miner priorities will
not necessarily always be in sync, and node resource management
shouldn't rely on them being compatible. There are other solutions
than transaction expiration; I think Gavin's idea from the
block-squashing thread, in which miners explicitly provide information
about their policies, would go a long way to address this. But even
when mechanisms for reconciling nodes' expectations about miners'
behavior with miners' actual behavior are available, it may be
desirable to keep an expiry mechanism in place in case of glitches
between node understanding of policy and actual miner policy.

Any approach based on beginning a transaction expiry countdown when a
transaction is received (as in mempool janitor) seems unviable to me:
once a node has forgotten a transaction, it must be susceptible to
reaccepting it; all the functionality of such an expiry mechanism
depends on the network not containing any nodes with slightly
different relay behavior from bitcoind. I could accidentally
debilitate mempool janitors across the entire network if I set up two
nodes to exchange mempools whenever they reconnected to each other,
and restarted each frequently.

That's why I think including information in the transaction itself, as
with my nLockTime/IsStandard proposal, is necessary for transactions
to reliably eventually die off from mempools.
There's a modification I've been thinking about: allow a transaction's
lifetime to be refreshed (even after expiry) by a child transaction,
along the lines of child-pays-for-parent fee policy. This would
eliminate the need to reuse a key to make a replacement for an expired
transaction (when submitting the tx directly to a miner is not an
option), as well as alleviating the potential inconvenience in cases
like Peter brought up, where nLockTime is used for exchanged locked
transactions as part of a multi-transaction contract. With
child-refreshes-parent, a transaction's receivers and senders would
have the ability to keep trying to get their payment confirmed, but
anyone on the network can't just keep all transactions alive.


On Tue, Aug 5, 2014 at 10:48 AM, Jeff Garzik <jgarzik at bitpay.com> wrote:
> Glad this was brought up.
>
> Transaction expiration is something that I have wanted to see happen in
> bitcoin for a long, long time.  The user experience of unconfirming
> transactions setting around in limbo is just horrible.  Bitcoin software by
> necessity has gotten better about attaching fees so this sort of behavior is
> uncommon, but that does not eliminate the problem.
>
> Of course, we cannot presume that a transaction will truly disappear -- The
> Internet Never Forgets -- but given a bit of mempool adjusting, we can
> achieve the next best thing:  the majority of the network "forgets" the
> transaction and becomes willing to relay a respend of some or all of the
> inputs.  This uses existing client logic where the client must rebroadcast a
> transaction until it is confirmed.
>
> In general, if a transaction has not made it into a block within 144*X
> blocks, there is _some_ reason it is getting rejected by the miners.
>
> The mempool janitor is a garbage collector design.  This is inferior to the
> "superblock" model described at
> https://github.com/bitcoin/bitcoin/issues/3723   Other models can also
> achieve similar results.
>
> There are a lot of issues tied together here:  transaction expiration, the
> desire to cap the mempool ram usage, scalability, DoS prevention, ...
> mempool ties a lot together.
>
> --
> Jeff Garzik
> Bitcoin core developer and open source evangelist
> BitPay, Inc.      https://bitpay.com/



From jgarzik at bitpay.com  Tue Aug  5 19:36:17 2014
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Tue, 5 Aug 2014 15:36:17 -0400
Subject: [Bitcoin-development] deterministic transaction expiration
In-Reply-To: <CA+iPb=ET+A-qB8TgPX8D-ut1DWnq9tZJ=14igfRVWO6eog6Xgw@mail.gmail.com>
References: <CA+iPb=HkxeVPF0SynxCPgUkq4msrdfayFrVNFjzg29rFwqXv1w@mail.gmail.com>
	<CAJHLa0O2wFq2Vs5Bes_8x1q_j0VC+U4DQkx=6GqT8w5e8Lh5Qg@mail.gmail.com>
	<CA+iPb=ET+A-qB8TgPX8D-ut1DWnq9tZJ=14igfRVWO6eog6Xgw@mail.gmail.com>
Message-ID: <CAJHLa0NrnOD0zNw_7E_3K_VTj=h2TJrWNZ=DEN9p7DWF=DUfDw@mail.gmail.com>

On Tue, Aug 5, 2014 at 3:10 PM, Kaz Wesley <keziahw at gmail.com> wrote:

> Any approach based on beginning a transaction expiry countdown when a
> transaction is received (as in mempool janitor) seems unviable to me:
>
...

> That's why I think including information in the transaction itself, as
> with my nLockTime/IsStandard proposal, is necessary for transactions
> to reliably eventually die off from mempools.
>

"reliably die off from mempools" leads into the land of "tightly
synchronizing memory pools across the network" which is a problem of...
large scope and much debate.  :)

For the moment, simply capping the mempool's size at each local node is a
much more reachable goal.  Capping, then, implies some culling policy.  In
general, bitcoind Tx mempool size is rather open ended, and that needs
sorting out.

-- 
Jeff Garzik
Bitcoin core developer and open source evangelist
BitPay, Inc.      https://bitpay.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140805/94875c8c/attachment.html>

From tomh at thinlink.com  Wed Aug  6 04:01:51 2014
From: tomh at thinlink.com (Tom Harding)
Date: Tue, 05 Aug 2014 21:01:51 -0700
Subject: [Bitcoin-development] deterministic transaction expiration
In-Reply-To: <CA+iPb=ET+A-qB8TgPX8D-ut1DWnq9tZJ=14igfRVWO6eog6Xgw@mail.gmail.com>
References: <CA+iPb=HkxeVPF0SynxCPgUkq4msrdfayFrVNFjzg29rFwqXv1w@mail.gmail.com>	<CAJHLa0O2wFq2Vs5Bes_8x1q_j0VC+U4DQkx=6GqT8w5e8Lh5Qg@mail.gmail.com>
	<CA+iPb=ET+A-qB8TgPX8D-ut1DWnq9tZJ=14igfRVWO6eog6Xgw@mail.gmail.com>
Message-ID: <53E1A8AF.4030206@thinlink.com>

On 8/5/2014 12:10 PM, Kaz Wesley wrote:
> Any approach based on beginning a transaction expiry countdown when a 
> transaction is received (as in mempool janitor) seems unviable to me: 
> once a node has forgotten a transaction, it must be susceptible to 
> reaccepting it;

It's hard to argue with that logic.

If nLockTime is used for expiration, transaction creator can't lie to 
help tx live longer without pushing initial confirmation eligibility 
into the future.  Very pretty.  It would also enable "fill or kill" 
transactions with a backdated nLockTime, which must be confirmed in a 
few blocks, or start vanishing from mempools.




From jtimon at monetize.io  Wed Aug  6 10:01:39 2014
From: jtimon at monetize.io (=?UTF-8?B?Sm9yZ2UgVGltw7Nu?=)
Date: Wed, 6 Aug 2014 12:01:39 +0200
Subject: [Bitcoin-development] How to create a pull tester JAR
In-Reply-To: <CANEZrP2n9uRxbpyvF8D0478umbJ-K_sz9V8ahz5EXaCQRaM8sw@mail.gmail.com>
References: <CANEZrP1mU6iS6NRyK6iJtg4BEQ3nQRFc-dVwaOd+P_NFThqxjw@mail.gmail.com>
	<CAJHLa0NdJhGyFfhzhxmL3=qNjYed0+FQ-X4EQdrVMR3K4Het7Q@mail.gmail.com>
	<CANEZrP2n9uRxbpyvF8D0478umbJ-K_sz9V8ahz5EXaCQRaM8sw@mail.gmail.com>
Message-ID: <CAC1+kJNy=AeVk4=SJ3Zc=yq0ayjTcfT3pKPfFfKjQpmqoBNHcw@mail.gmail.com>

Once you ave the jar, you can also build with

./configure --disable-silent-rules --disable-ccache
--with-comparison-tool=/path/to/your/BitcoindComparisonTool.jar

Instead of the regular

./configure

And after that "make check" will run most of the tests the pull tester does.


On 8/5/14, Mike Hearn <mike at plan99.net> wrote:
> No problem.
>
> The pull tester entry point can be found here:
>
> https://github.com/bitcoinj/bitcoinj/blob/master/core/src/test/java/com/google/bitcoin/core/BitcoindComparisonTool.java
>
> (nb: in the near future I will be re-namespacing the library from
> com.google.bitcoin to org.bitcoinj to reflect that it no longer has
> anything to do with Google and then this link will break).
>
> The code itself is a rather bad example of copy/paste coding and I can say
> that, because Matt knows it and already plans to refactor things ;) So if
> anyone is thinking of adding tests to the framework coordinate with him
> first to ensure you don't end up conflicting with a big refactor/rewrite.
>


-- 
Jorge Tim?n



From jgarzik at bitpay.com  Wed Aug  6 12:55:51 2014
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Wed, 6 Aug 2014 08:55:51 -0400
Subject: [Bitcoin-development] deterministic transaction expiration
In-Reply-To: <53E1A8AF.4030206@thinlink.com>
References: <CA+iPb=HkxeVPF0SynxCPgUkq4msrdfayFrVNFjzg29rFwqXv1w@mail.gmail.com>
	<CAJHLa0O2wFq2Vs5Bes_8x1q_j0VC+U4DQkx=6GqT8w5e8Lh5Qg@mail.gmail.com>
	<CA+iPb=ET+A-qB8TgPX8D-ut1DWnq9tZJ=14igfRVWO6eog6Xgw@mail.gmail.com>
	<53E1A8AF.4030206@thinlink.com>
Message-ID: <CAJHLa0MfRhCPX8H92qc1kSebc=WrUzmSgbG331t4-zDHhTNu4w@mail.gmail.com>

 ...and existing users and uses of nLockTime suddenly become worthless,
breaking payment channel refunds and other active uses of nLockTime.

You cannot assume the user is around to rewrite their nLockTime, if it
fails to be confirmed before some arbitrary deadline being set.



On Wed, Aug 6, 2014 at 12:01 AM, Tom Harding <tomh at thinlink.com> wrote:

> On 8/5/2014 12:10 PM, Kaz Wesley wrote:
> > Any approach based on beginning a transaction expiry countdown when a
> > transaction is received (as in mempool janitor) seems unviable to me:
> > once a node has forgotten a transaction, it must be susceptible to
> > reaccepting it;
>
> It's hard to argue with that logic.
>
> If nLockTime is used for expiration, transaction creator can't lie to
> help tx live longer without pushing initial confirmation eligibility
> into the future.  Very pretty.  It would also enable "fill or kill"
> transactions with a backdated nLockTime, which must be confirmed in a
> few blocks, or start vanishing from mempools.
>
>
>
> ------------------------------------------------------------------------------
> Infragistics Professional
> Build stunning WinForms apps today!
> Reboot your WinForms applications with our WinForms controls.
> Build a bridge from your legacy apps to the future.
>
> http://pubads.g.doubleclick.net/gampad/clk?id=153845071&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>



-- 
Jeff Garzik
Bitcoin core developer and open source evangelist
BitPay, Inc.      https://bitpay.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140806/9253d8ac/attachment.html>

From mike at plan99.net  Wed Aug  6 13:54:56 2014
From: mike at plan99.net (Mike Hearn)
Date: Wed, 6 Aug 2014 15:54:56 +0200
Subject: [Bitcoin-development] deterministic transaction expiration
In-Reply-To: <CAJHLa0MfRhCPX8H92qc1kSebc=WrUzmSgbG331t4-zDHhTNu4w@mail.gmail.com>
References: <CA+iPb=HkxeVPF0SynxCPgUkq4msrdfayFrVNFjzg29rFwqXv1w@mail.gmail.com>
	<CAJHLa0O2wFq2Vs5Bes_8x1q_j0VC+U4DQkx=6GqT8w5e8Lh5Qg@mail.gmail.com>
	<CA+iPb=ET+A-qB8TgPX8D-ut1DWnq9tZJ=14igfRVWO6eog6Xgw@mail.gmail.com>
	<53E1A8AF.4030206@thinlink.com>
	<CAJHLa0MfRhCPX8H92qc1kSebc=WrUzmSgbG331t4-zDHhTNu4w@mail.gmail.com>
Message-ID: <CANEZrP3eEiLxYfsAURRm4ysfS4TRgXxa_THxJ43cVH1OyR95JQ@mail.gmail.com>

We could however introduce a new field in a new tx version. We know we need
to rev the format at some point anyway.


On Wed, Aug 6, 2014 at 2:55 PM, Jeff Garzik <jgarzik at bitpay.com> wrote:

>  ...and existing users and uses of nLockTime suddenly become worthless,
> breaking payment channel refunds and other active uses of nLockTime.
>
> You cannot assume the user is around to rewrite their nLockTime, if it
> fails to be confirmed before some arbitrary deadline being set.
>
>
>
> On Wed, Aug 6, 2014 at 12:01 AM, Tom Harding <tomh at thinlink.com> wrote:
>
>> On 8/5/2014 12:10 PM, Kaz Wesley wrote:
>> > Any approach based on beginning a transaction expiry countdown when a
>> > transaction is received (as in mempool janitor) seems unviable to me:
>> > once a node has forgotten a transaction, it must be susceptible to
>> > reaccepting it;
>>
>> It's hard to argue with that logic.
>>
>> If nLockTime is used for expiration, transaction creator can't lie to
>> help tx live longer without pushing initial confirmation eligibility
>> into the future.  Very pretty.  It would also enable "fill or kill"
>> transactions with a backdated nLockTime, which must be confirmed in a
>> few blocks, or start vanishing from mempools.
>>
>>
>>
>> ------------------------------------------------------------------------------
>> Infragistics Professional
>> Build stunning WinForms apps today!
>> Reboot your WinForms applications with our WinForms controls.
>> Build a bridge from your legacy apps to the future.
>>
>> http://pubads.g.doubleclick.net/gampad/clk?id=153845071&iu=/4140/ostg.clktrk
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>
>
>
>
> --
> Jeff Garzik
> Bitcoin core developer and open source evangelist
> BitPay, Inc.      https://bitpay.com/
>
>
> ------------------------------------------------------------------------------
> Infragistics Professional
> Build stunning WinForms apps today!
> Reboot your WinForms applications with our WinForms controls.
> Build a bridge from your legacy apps to the future.
>
> http://pubads.g.doubleclick.net/gampad/clk?id=153845071&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140806/b994de65/attachment.html>

From tomh at thinlink.com  Wed Aug  6 14:44:25 2014
From: tomh at thinlink.com (Tom Harding)
Date: Wed, 06 Aug 2014 07:44:25 -0700
Subject: [Bitcoin-development] deterministic transaction expiration
In-Reply-To: <CANEZrP3eEiLxYfsAURRm4ysfS4TRgXxa_THxJ43cVH1OyR95JQ@mail.gmail.com>
References: <CA+iPb=HkxeVPF0SynxCPgUkq4msrdfayFrVNFjzg29rFwqXv1w@mail.gmail.com>	<CAJHLa0O2wFq2Vs5Bes_8x1q_j0VC+U4DQkx=6GqT8w5e8Lh5Qg@mail.gmail.com>	<CA+iPb=ET+A-qB8TgPX8D-ut1DWnq9tZJ=14igfRVWO6eog6Xgw@mail.gmail.com>	<53E1A8AF.4030206@thinlink.com>	<CAJHLa0MfRhCPX8H92qc1kSebc=WrUzmSgbG331t4-zDHhTNu4w@mail.gmail.com>
	<CANEZrP3eEiLxYfsAURRm4ysfS4TRgXxa_THxJ43cVH1OyR95JQ@mail.gmail.com>
Message-ID: <53E23F49.3020605@thinlink.com>


How is eventual expiration of a tx that started life with an nLockTime 
in the future "breaking", any more than any other tx expiring?


On 8/6/2014 6:54 AM, Mike Hearn wrote:
> We could however introduce a new field in a new tx version. We know we 
> need to rev the format at some point anyway.
>
>
> On Wed, Aug 6, 2014 at 2:55 PM, Jeff Garzik <jgarzik at bitpay.com 
> <mailto:jgarzik at bitpay.com>> wrote:
>
>      ...and existing users and uses of nLockTime suddenly become
>     worthless, breaking payment channel refunds and other active uses
>     of nLockTime.
>
>     You cannot assume the user is around to rewrite their nLockTime,
>     if it fails to be confirmed before some arbitrary deadline being set.
>
>
>
>     On Wed, Aug 6, 2014 at 12:01 AM, Tom Harding <tomh at thinlink.com
>     <mailto:tomh at thinlink.com>> wrote:
>
>         ...
>

>         If nLockTime is used for expiration, transaction creator can't
>         lie to
>         help tx live longer without pushing initial confirmation
>         eligibility
>         into the future.  Very pretty.  It would also enable "fill or
>         kill"
>         transactions with a backdated nLockTime, which must be
>         confirmed in a
>         few blocks, or start vanishing from mempools.
>

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140806/4326d7ce/attachment.html>

From jgarzik at bitpay.com  Wed Aug  6 15:08:36 2014
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Wed, 6 Aug 2014 11:08:36 -0400
Subject: [Bitcoin-development] deterministic transaction expiration
In-Reply-To: <53E23F49.3020605@thinlink.com>
References: <CA+iPb=HkxeVPF0SynxCPgUkq4msrdfayFrVNFjzg29rFwqXv1w@mail.gmail.com>
	<CAJHLa0O2wFq2Vs5Bes_8x1q_j0VC+U4DQkx=6GqT8w5e8Lh5Qg@mail.gmail.com>
	<CA+iPb=ET+A-qB8TgPX8D-ut1DWnq9tZJ=14igfRVWO6eog6Xgw@mail.gmail.com>
	<53E1A8AF.4030206@thinlink.com>
	<CAJHLa0MfRhCPX8H92qc1kSebc=WrUzmSgbG331t4-zDHhTNu4w@mail.gmail.com>
	<CANEZrP3eEiLxYfsAURRm4ysfS4TRgXxa_THxJ43cVH1OyR95JQ@mail.gmail.com>
	<53E23F49.3020605@thinlink.com>
Message-ID: <CAJHLa0OtPA3DGQuJhp3zkK5dnBux6TFAw3qDsBdO0zaxrqBgRg@mail.gmail.com>

 ...because nLockTime is the exact opposite of expiration.  A locked TX
begins life invalid, and becomes valid (not-expired) after nLockTime passes.

A new field containing expiration time would work.



On Wed, Aug 6, 2014 at 10:44 AM, Tom Harding <tomh at thinlink.com> wrote:

>
> How is eventual expiration of a tx that started life with an nLockTime in
> the future "breaking", any more than any other tx expiring?
>
>
>
> On 8/6/2014 6:54 AM, Mike Hearn wrote:
>
> We could however introduce a new field in a new tx version. We know we
> need to rev the format at some point anyway.
>
>
> On Wed, Aug 6, 2014 at 2:55 PM, Jeff Garzik <jgarzik at bitpay.com> wrote:
>
>>  ...and existing users and uses of nLockTime suddenly become worthless,
>> breaking payment channel refunds and other active uses of nLockTime.
>>
>> You cannot assume the user is around to rewrite their nLockTime, if it
>> fails to be confirmed before some arbitrary deadline being set.
>>
>>
>>
>> On Wed, Aug 6, 2014 at 12:01 AM, Tom Harding <tomh at thinlink.com> wrote:
>>
>>> ...
>>>
>>
>      If nLockTime is used for expiration, transaction creator can't lie to
>>> help tx live longer without pushing initial confirmation eligibility
>>> into the future.  Very pretty.  It would also enable "fill or kill"
>>> transactions with a backdated nLockTime, which must be confirmed in a
>>> few blocks, or start vanishing from mempools.
>>>
>>
>


-- 
Jeff Garzik
Bitcoin core developer and open source evangelist
BitPay, Inc.      https://bitpay.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140806/251779ec/attachment.html>

From decker.christian at gmail.com  Wed Aug  6 15:17:02 2014
From: decker.christian at gmail.com (Christian Decker)
Date: Wed, 6 Aug 2014 16:17:02 +0100
Subject: [Bitcoin-development] deterministic transaction expiration
In-Reply-To: <CAJHLa0OtPA3DGQuJhp3zkK5dnBux6TFAw3qDsBdO0zaxrqBgRg@mail.gmail.com>
References: <CA+iPb=HkxeVPF0SynxCPgUkq4msrdfayFrVNFjzg29rFwqXv1w@mail.gmail.com>
	<CAJHLa0O2wFq2Vs5Bes_8x1q_j0VC+U4DQkx=6GqT8w5e8Lh5Qg@mail.gmail.com>
	<CA+iPb=ET+A-qB8TgPX8D-ut1DWnq9tZJ=14igfRVWO6eog6Xgw@mail.gmail.com>
	<53E1A8AF.4030206@thinlink.com>
	<CAJHLa0MfRhCPX8H92qc1kSebc=WrUzmSgbG331t4-zDHhTNu4w@mail.gmail.com>
	<CANEZrP3eEiLxYfsAURRm4ysfS4TRgXxa_THxJ43cVH1OyR95JQ@mail.gmail.com>
	<53E23F49.3020605@thinlink.com>
	<CAJHLa0OtPA3DGQuJhp3zkK5dnBux6TFAw3qDsBdO0zaxrqBgRg@mail.gmail.com>
Message-ID: <CALxbBHXh-Fktsr96PMXdohJdgcUKoNreJ-ZuApKOX3-qSkdk2w@mail.gmail.com>

+1 for the new field, overloading fields with new meaning is definitely not
a good idea.

Something like nExpireAt with a block height sounds reasonable to me, but
we need to document that the usual caveats with blockchain reorgs apply.


On Wed, Aug 6, 2014 at 4:08 PM, Jeff Garzik <jgarzik at bitpay.com> wrote:

>  ...because nLockTime is the exact opposite of expiration.  A locked TX
> begins life invalid, and becomes valid (not-expired) after nLockTime passes.
>
> A new field containing expiration time would work.
>
>
>
> On Wed, Aug 6, 2014 at 10:44 AM, Tom Harding <tomh at thinlink.com> wrote:
>
>>
>> How is eventual expiration of a tx that started life with an nLockTime in
>> the future "breaking", any more than any other tx expiring?
>>
>>
>>
>> On 8/6/2014 6:54 AM, Mike Hearn wrote:
>>
>> We could however introduce a new field in a new tx version. We know we
>> need to rev the format at some point anyway.
>>
>>
>> On Wed, Aug 6, 2014 at 2:55 PM, Jeff Garzik <jgarzik at bitpay.com> wrote:
>>
>>>  ...and existing users and uses of nLockTime suddenly become worthless,
>>> breaking payment channel refunds and other active uses of nLockTime.
>>>
>>> You cannot assume the user is around to rewrite their nLockTime, if it
>>> fails to be confirmed before some arbitrary deadline being set.
>>>
>>>
>>>
>>> On Wed, Aug 6, 2014 at 12:01 AM, Tom Harding <tomh at thinlink.com> wrote:
>>>
>>>> ...
>>>>
>>>
>>      If nLockTime is used for expiration, transaction creator can't lie
>>>> to
>>>> help tx live longer without pushing initial confirmation eligibility
>>>> into the future.  Very pretty.  It would also enable "fill or kill"
>>>> transactions with a backdated nLockTime, which must be confirmed in a
>>>> few blocks, or start vanishing from mempools.
>>>>
>>>
>>
>
>
> --
> Jeff Garzik
> Bitcoin core developer and open source evangelist
> BitPay, Inc.      https://bitpay.com/
>
>
> ------------------------------------------------------------------------------
> Infragistics Professional
> Build stunning WinForms apps today!
> Reboot your WinForms applications with our WinForms controls.
> Build a bridge from your legacy apps to the future.
>
> http://pubads.g.doubleclick.net/gampad/clk?id=153845071&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140806/0ba9d005/attachment.html>

From pete at petertodd.org  Wed Aug  6 15:42:08 2014
From: pete at petertodd.org (Peter Todd)
Date: Wed, 06 Aug 2014 08:42:08 -0700
Subject: [Bitcoin-development] deterministic transaction expiration
In-Reply-To: <CALxbBHXh-Fktsr96PMXdohJdgcUKoNreJ-ZuApKOX3-qSkdk2w@mail.gmail.com>
References: <CA+iPb=HkxeVPF0SynxCPgUkq4msrdfayFrVNFjzg29rFwqXv1w@mail.gmail.com>
	<CAJHLa0O2wFq2Vs5Bes_8x1q_j0VC+U4DQkx=6GqT8w5e8Lh5Qg@mail.gmail.com>
	<CA+iPb=ET+A-qB8TgPX8D-ut1DWnq9tZJ=14igfRVWO6eog6Xgw@mail.gmail.com>
	<53E1A8AF.4030206@thinlink.com>
	<CAJHLa0MfRhCPX8H92qc1kSebc=WrUzmSgbG331t4-zDHhTNu4w@mail.gmail.com>
	<CANEZrP3eEiLxYfsAURRm4ysfS4TRgXxa_THxJ43cVH1OyR95JQ@mail.gmail.com>
	<53E23F49.3020605@thinlink.com>
	<CAJHLa0OtPA3DGQuJhp3zkK5dnBux6TFAw3qDsBdO0zaxrqBgRg@mail.gmail.com>
	<CALxbBHXh-Fktsr96PMXdohJdgcUKoNreJ-ZuApKOX3-qSkdk2w@mail.gmail.com>
Message-ID: <63a80796-609e-43f5-9280-4cd8cf5d2648@email.android.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256



On 6 August 2014 08:17:02 GMT-07:00, Christian Decker <decker.christian at gmail.com> wrote:
>+1 for the new field, overloading fields with new meaning is definitely
>not
>a good idea.

To add a new field the best way to do it is create a new, parallel, tx format where fields are committed by merkle radix tree in an extensible and provable way. You'd then commit to that tree with a mandatory OP_RETURN output in the last txout, or with a new merkle root.

Changing the tx format itself in a hard-fork is needlessly disruptive, and in this case, wastes opportunities for improvement.
-----BEGIN PGP SIGNATURE-----
Version: APG v1.1.1

iQFQBAEBCAA6BQJT4kzQMxxQZXRlciBUb2RkIChsb3cgc2VjdXJpdHkga2V5KSA8
cGV0ZUBwZXRlcnRvZGQub3JnPgAKCRAZnIM7qOfwhamzCAC+zRaXRodP63+ke3K+
Viapiepvk4uIOlqxqtMB2O0zWcyu2+xCJDiRPykK/6HLDBeFDEC9/dGK8++Lovl6
//qZ340LOPFlgT2kYy9E5h/yX469fhtsWhBCv2K47fWwkMS0S/0r4SQnCkbt2R2c
4dQjkoldhw6rNMBTUmwvhSlL30KsT/msWTZiX7DW/YjfOzezEJzy+mYyKp9Sk7ba
1fOiBXORk7mNOs7sTYTvje3sqEGpGTOLP08cY/RCEvl6bG8mHkPqwiojq+3biHFP
RsoBVu1f5cbnU7Wq0gPNdVnQssnEQDadyTX8gT0Wze7PuVyaZT2mXFZBKzSHuLy2
sJKN
=oPSo
-----END PGP SIGNATURE-----




From jgarzik at bitpay.com  Wed Aug  6 16:15:20 2014
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Wed, 6 Aug 2014 12:15:20 -0400
Subject: [Bitcoin-development] deterministic transaction expiration
In-Reply-To: <63a80796-609e-43f5-9280-4cd8cf5d2648@email.android.com>
References: <CA+iPb=HkxeVPF0SynxCPgUkq4msrdfayFrVNFjzg29rFwqXv1w@mail.gmail.com>
	<CAJHLa0O2wFq2Vs5Bes_8x1q_j0VC+U4DQkx=6GqT8w5e8Lh5Qg@mail.gmail.com>
	<CA+iPb=ET+A-qB8TgPX8D-ut1DWnq9tZJ=14igfRVWO6eog6Xgw@mail.gmail.com>
	<53E1A8AF.4030206@thinlink.com>
	<CAJHLa0MfRhCPX8H92qc1kSebc=WrUzmSgbG331t4-zDHhTNu4w@mail.gmail.com>
	<CANEZrP3eEiLxYfsAURRm4ysfS4TRgXxa_THxJ43cVH1OyR95JQ@mail.gmail.com>
	<53E23F49.3020605@thinlink.com>
	<CAJHLa0OtPA3DGQuJhp3zkK5dnBux6TFAw3qDsBdO0zaxrqBgRg@mail.gmail.com>
	<CALxbBHXh-Fktsr96PMXdohJdgcUKoNreJ-ZuApKOX3-qSkdk2w@mail.gmail.com>
	<63a80796-609e-43f5-9280-4cd8cf5d2648@email.android.com>
Message-ID: <CAJHLa0OQJEvQht_chF1gVG_BOwp=DW0zOOo3VE_acZonsSguWw@mail.gmail.com>

A fork is not necessarily required, if you are talking about information
that deals primarily with pre-consensus mempool behavior.  You can make a
"network TX" with some information that is digitally signed, yet discarded
before it reaches miners.


On Wed, Aug 6, 2014 at 11:42 AM, Peter Todd <pete at petertodd.org> wrote:

> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA256
>
>
>
> On 6 August 2014 08:17:02 GMT-07:00, Christian Decker <
> decker.christian at gmail.com> wrote:
> >+1 for the new field, overloading fields with new meaning is definitely
> >not
> >a good idea.
>
> To add a new field the best way to do it is create a new, parallel, tx
> format where fields are committed by merkle radix tree in an extensible and
> provable way. You'd then commit to that tree with a mandatory OP_RETURN
> output in the last txout, or with a new merkle root.
>
> Changing the tx format itself in a hard-fork is needlessly disruptive, and
> in this case, wastes opportunities for improvement.
> -----BEGIN PGP SIGNATURE-----
> Version: APG v1.1.1
>
> iQFQBAEBCAA6BQJT4kzQMxxQZXRlciBUb2RkIChsb3cgc2VjdXJpdHkga2V5KSA8
> cGV0ZUBwZXRlcnRvZGQub3JnPgAKCRAZnIM7qOfwhamzCAC+zRaXRodP63+ke3K+
> Viapiepvk4uIOlqxqtMB2O0zWcyu2+xCJDiRPykK/6HLDBeFDEC9/dGK8++Lovl6
> //qZ340LOPFlgT2kYy9E5h/yX469fhtsWhBCv2K47fWwkMS0S/0r4SQnCkbt2R2c
> 4dQjkoldhw6rNMBTUmwvhSlL30KsT/msWTZiX7DW/YjfOzezEJzy+mYyKp9Sk7ba
> 1fOiBXORk7mNOs7sTYTvje3sqEGpGTOLP08cY/RCEvl6bG8mHkPqwiojq+3biHFP
> RsoBVu1f5cbnU7Wq0gPNdVnQssnEQDadyTX8gT0Wze7PuVyaZT2mXFZBKzSHuLy2
> sJKN
> =oPSo
> -----END PGP SIGNATURE-----
>
>


-- 
Jeff Garzik
Bitcoin core developer and open source evangelist
BitPay, Inc.      https://bitpay.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140806/e13727a5/attachment.html>

From mark at monetize.io  Wed Aug  6 16:31:24 2014
From: mark at monetize.io (Mark Friedenbach)
Date: Wed, 06 Aug 2014 12:31:24 -0400
Subject: [Bitcoin-development] deterministic transaction expiration
In-Reply-To: <63a80796-609e-43f5-9280-4cd8cf5d2648@email.android.com>
References: <CA+iPb=HkxeVPF0SynxCPgUkq4msrdfayFrVNFjzg29rFwqXv1w@mail.gmail.com>	<CAJHLa0O2wFq2Vs5Bes_8x1q_j0VC+U4DQkx=6GqT8w5e8Lh5Qg@mail.gmail.com>	<CA+iPb=ET+A-qB8TgPX8D-ut1DWnq9tZJ=14igfRVWO6eog6Xgw@mail.gmail.com>	<53E1A8AF.4030206@thinlink.com>	<CAJHLa0MfRhCPX8H92qc1kSebc=WrUzmSgbG331t4-zDHhTNu4w@mail.gmail.com>	<CANEZrP3eEiLxYfsAURRm4ysfS4TRgXxa_THxJ43cVH1OyR95JQ@mail.gmail.com>	<53E23F49.3020605@thinlink.com>	<CAJHLa0OtPA3DGQuJhp3zkK5dnBux6TFAw3qDsBdO0zaxrqBgRg@mail.gmail.com>	<CALxbBHXh-Fktsr96PMXdohJdgcUKoNreJ-ZuApKOX3-qSkdk2w@mail.gmail.com>
	<63a80796-609e-43f5-9280-4cd8cf5d2648@email.android.com>
Message-ID: <53E2585C.8070009@monetize.io>

On 08/06/2014 11:42 AM, Peter Todd wrote:
> On 6 August 2014 08:17:02 GMT-07:00, Christian Decker
> <decker.christian at gmail.com> wrote:
>> +1 for the new field, overloading fields with new meaning is
>> definitely not a good idea.
> 
> To add a new field the best way to do it is create a new, parallel,
> tx format where fields are committed by merkle radix tree in an
> extensible and provable way. You'd then commit to that tree with a
> mandatory OP_RETURN output in the last txout, or with a new merkle
> root.
> 
> Changing the tx format itself in a hard-fork is needlessly
> disruptive, and in this case, wastes opportunities for improvement.

I highly doubt that is the best approach.

If this nExpiry field is a consensus rule, then the Merkle tree or the
appropriate paths through needs to be included with the transaction as
part of the network and on-disk data structures, so that proper
validation can be done. This would be both more disruptive and less
efficient than simply adding an nExpiry field to the transaction format,
as we do in Freimarkets.

If the field is pre-consensus (a mempool gentleman's agreement), then it
has no business in the transaction structure at all and should be
packaged in some sort of envelope container.



From tomh at thinlink.com  Wed Aug  6 17:02:02 2014
From: tomh at thinlink.com (Tom Harding)
Date: Wed, 06 Aug 2014 10:02:02 -0700
Subject: [Bitcoin-development] deterministic transaction expiration
In-Reply-To: <CAJHLa0OQJEvQht_chF1gVG_BOwp=DW0zOOo3VE_acZonsSguWw@mail.gmail.com>
References: <CA+iPb=HkxeVPF0SynxCPgUkq4msrdfayFrVNFjzg29rFwqXv1w@mail.gmail.com>	<CAJHLa0O2wFq2Vs5Bes_8x1q_j0VC+U4DQkx=6GqT8w5e8Lh5Qg@mail.gmail.com>	<CA+iPb=ET+A-qB8TgPX8D-ut1DWnq9tZJ=14igfRVWO6eog6Xgw@mail.gmail.com>	<53E1A8AF.4030206@thinlink.com>	<CAJHLa0MfRhCPX8H92qc1kSebc=WrUzmSgbG331t4-zDHhTNu4w@mail.gmail.com>	<CANEZrP3eEiLxYfsAURRm4ysfS4TRgXxa_THxJ43cVH1OyR95JQ@mail.gmail.com>	<53E23F49.3020605@thinlink.com>	<CAJHLa0OtPA3DGQuJhp3zkK5dnBux6TFAw3qDsBdO0zaxrqBgRg@mail.gmail.com>	<CALxbBHXh-Fktsr96PMXdohJdgcUKoNreJ-ZuApKOX3-qSkdk2w@mail.gmail.com>	<63a80796-609e-43f5-9280-4cd8cf5d2648@email.android.com>
	<CAJHLa0OQJEvQht_chF1gVG_BOwp=DW0zOOo3VE_acZonsSguWw@mail.gmail.com>
Message-ID: <53E25F8A.5070905@thinlink.com>


Today we have first-eligible-height (nLockTime), and mempool expiration 
measured from this height would work for the goals being discussed, no 
fork or protocol rev.

With first-eligible-height and last-eligible-height, creator could 
choose a lifetime shorter than the max,  and in addition, lock the whole 
thing until some point in the future.


On 8/6/2014 9:15 AM, Jeff Garzik wrote:
> A fork is not necessarily required, if you are talking about 
> information that deals primarily with pre-consensus mempool behavior.  
> You can make a "network TX" with some information that is digitally 
> signed, yet discarded before it reaches miners.
>
>
> On Wed, Aug 6, 2014 at 11:42 AM, Peter Todd <pete at petertodd.org 
> <mailto:pete at petertodd.org>> wrote:
>
>     -----BEGIN PGP SIGNED MESSAGE-----
>     Hash: SHA256
>
>
>
>     On 6 August 2014 08:17:02 GMT-07:00, Christian Decker
>     <decker.christian at gmail.com <mailto:decker.christian at gmail.com>>
>     wrote:
>     >+1 for the new field, overloading fields with new meaning is
>     definitely
>     >not
>     >a good idea.
>
>     To add a new field the best way to do it is create a new,
>     parallel, tx format where fields are committed by merkle radix
>     tree in an extensible and provable way. You'd then commit to that
>     tree with a mandatory OP_RETURN output in the last txout, or with
>     a new merkle root.
>
>     Changing the tx format itself in a hard-fork is needlessly
>     disruptive, and in this case, wastes opportunities for improvement.
>     -----BEGIN PGP SIGNATURE-----
>     Version: APG v1.1.1
>
>     iQFQBAEBCAA6BQJT4kzQMxxQZXRlciBUb2RkIChsb3cgc2VjdXJpdHkga2V5KSA8
>     cGV0ZUBwZXRlcnRvZGQub3JnPgAKCRAZnIM7qOfwhamzCAC+zRaXRodP63+ke3K+
>     Viapiepvk4uIOlqxqtMB2O0zWcyu2+xCJDiRPykK/6HLDBeFDEC9/dGK8++Lovl6
>     //qZ340LOPFlgT2kYy9E5h/yX469fhtsWhBCv2K47fWwkMS0S/0r4SQnCkbt2R2c
>     4dQjkoldhw6rNMBTUmwvhSlL30KsT/msWTZiX7DW/YjfOzezEJzy+mYyKp9Sk7ba
>     1fOiBXORk7mNOs7sTYTvje3sqEGpGTOLP08cY/RCEvl6bG8mHkPqwiojq+3biHFP
>     RsoBVu1f5cbnU7Wq0gPNdVnQssnEQDadyTX8gT0Wze7PuVyaZT2mXFZBKzSHuLy2
>     sJKN
>     =oPSo
>     -----END PGP SIGNATURE-----
>
>
>
>
> -- 
> Jeff Garzik
> Bitcoin core developer and open source evangelist
> BitPay, Inc. https://bitpay.com/
>
>
> ------------------------------------------------------------------------------
> Infragistics Professional
> Build stunning WinForms apps today!
> Reboot your WinForms applications with our WinForms controls.
> Build a bridge from your legacy apps to the future.
> http://pubads.g.doubleclick.net/gampad/clk?id=153845071&iu=/4140/ostg.clktrk
>
>
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140806/c31d3719/attachment.html>

From pete at petertodd.org  Wed Aug  6 17:20:25 2014
From: pete at petertodd.org (Peter Todd)
Date: Wed, 06 Aug 2014 10:20:25 -0700
Subject: [Bitcoin-development] deterministic transaction expiration
In-Reply-To: <53E2585C.8070009@monetize.io>
References: <CA+iPb=HkxeVPF0SynxCPgUkq4msrdfayFrVNFjzg29rFwqXv1w@mail.gmail.com>
	<CAJHLa0O2wFq2Vs5Bes_8x1q_j0VC+U4DQkx=6GqT8w5e8Lh5Qg@mail.gmail.com>
	<CA+iPb=ET+A-qB8TgPX8D-ut1DWnq9tZJ=14igfRVWO6eog6Xgw@mail.gmail.com>
	<53E1A8AF.4030206@thinlink.com>
	<CAJHLa0MfRhCPX8H92qc1kSebc=WrUzmSgbG331t4-zDHhTNu4w@mail.gmail.com>
	<CANEZrP3eEiLxYfsAURRm4ysfS4TRgXxa_THxJ43cVH1OyR95JQ@mail.gmail.com>
	<53E23F49.3020605@thinlink.com>
	<CAJHLa0OtPA3DGQuJhp3zkK5dnBux6TFAw3qDsBdO0zaxrqBgRg@mail.gmail.com>
	<CALxbBHXh-Fktsr96PMXdohJdgcUKoNreJ-ZuApKOX3-qSkdk2w@mail.gmail.com>
	<63a80796-609e-43f5-9280-4cd8cf5d2648@email.android.com>
	<53E2585C.8070009@monetize.io>
Message-ID: <cafd8184-f589-4709-90f3-f3a38f2dd8d0@email.android.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256



On 6 August 2014 09:31:24 GMT-07:00, Mark Friedenbach <mark at monetize.io> wrote:
>I highly doubt that is the best approach.
>
>If this nExpiry field is a consensus rule, then the Merkle tree or the
>appropriate paths through needs to be included with the transaction as
>part of the network and on-disk data structures, so that proper
>validation can be done. This would be both more disruptive and less
>efficient than simply adding an nExpiry field to the transaction
>format,
>as we do in Freimarkets.

The general case doesn't require transmission of any merkle data; it is derived from the tx data. Equally changing a data format is certainly: note how Freimarkets has no third-party library support because you've made it incompatible with the standard Bitcoin data structures. Merkle radix tree formatting OTOH is just a cryptographically committed extension of the tag-value concept seen in protobuf, among others.

re: efficiency, we need fundamental improvements in efficiency, not little micro-optimisations everywhere done at high cost to maintainability.

re: validation, note how the merkle radix tree meets that need by allowing the absence of data to be proven.

>If the field is pre-consensus (a mempool gentleman's agreement), then
>it
>has no business in the transaction structure at all and should be
>packaged in some sort of envelope container.

It's also rather useless without consensus. Expiry is only useful if it is a guarantee, if not you might as well just implement tx replacement directly.

-----BEGIN PGP SIGNATURE-----
Version: APG v1.1.1

iQFQBAEBCAA6BQJT4mPZMxxQZXRlciBUb2RkIChsb3cgc2VjdXJpdHkga2V5KSA8
cGV0ZUBwZXRlcnRvZGQub3JnPgAKCRAZnIM7qOfwhcbKCACz/Qh3wm7ud9iwbvm3
Hzib36/fixk2++z6xlxh8G8afUaAe7ADCoz/TLK7RNIhUnr2hlsPO+Id2XvVBSm1
gXavj4iDxq8TpWsC8zPs5vyyY/dVwQ0RbidQFSpncmdW6EYVpIQp9nP3sSnBv1M8
c7BVidg708tc44uYiM9jeTzh6amP5yD0+G9FYYmy36BAQj8+4iD1ZCkiye1y5WUL
9MSN8LOxRFEwWQJmySXmJ1I9V81l1NSRQcQtfLVCzEIWLJXrZ0xwOq0SryEObg73
72NZKc2u8la3CPDoCG773ENbGHl+mGJW9M5ypV0s2RdkdZMgaFNnl/SBrWAcPd43
FkLr
=OMOy
-----END PGP SIGNATURE-----




From jgarzik at bitpay.com  Wed Aug  6 17:24:28 2014
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Wed, 6 Aug 2014 13:24:28 -0400
Subject: [Bitcoin-development] deterministic transaction expiration
In-Reply-To: <53E25F8A.5070905@thinlink.com>
References: <CA+iPb=HkxeVPF0SynxCPgUkq4msrdfayFrVNFjzg29rFwqXv1w@mail.gmail.com>
	<CAJHLa0O2wFq2Vs5Bes_8x1q_j0VC+U4DQkx=6GqT8w5e8Lh5Qg@mail.gmail.com>
	<CA+iPb=ET+A-qB8TgPX8D-ut1DWnq9tZJ=14igfRVWO6eog6Xgw@mail.gmail.com>
	<53E1A8AF.4030206@thinlink.com>
	<CAJHLa0MfRhCPX8H92qc1kSebc=WrUzmSgbG331t4-zDHhTNu4w@mail.gmail.com>
	<CANEZrP3eEiLxYfsAURRm4ysfS4TRgXxa_THxJ43cVH1OyR95JQ@mail.gmail.com>
	<53E23F49.3020605@thinlink.com>
	<CAJHLa0OtPA3DGQuJhp3zkK5dnBux6TFAw3qDsBdO0zaxrqBgRg@mail.gmail.com>
	<CALxbBHXh-Fktsr96PMXdohJdgcUKoNreJ-ZuApKOX3-qSkdk2w@mail.gmail.com>
	<63a80796-609e-43f5-9280-4cd8cf5d2648@email.android.com>
	<CAJHLa0OQJEvQht_chF1gVG_BOwp=DW0zOOo3VE_acZonsSguWw@mail.gmail.com>
	<53E25F8A.5070905@thinlink.com>
Message-ID: <CAJHLa0MDhcQuZGDrJFXyExCGWaEkvXuy0zvqTgG2TqPDuzHCzQ@mail.gmail.com>

That won't necessarily work through large reorgs.  You don't want to create
a situation where a miner cannot mine a previously mined transactions.



On Wed, Aug 6, 2014 at 1:02 PM, Tom Harding <tomh at thinlink.com> wrote:

>
> Today we have first-eligible-height (nLockTime), and mempool expiration
> measured from this height would work for the goals being discussed, no fork
> or protocol rev.
>
> With first-eligible-height and last-eligible-height, creator could choose
> a lifetime shorter than the max,  and in addition, lock the whole thing
> until some point in the future.
>
>
>
> On 8/6/2014 9:15 AM, Jeff Garzik wrote:
>
> A fork is not necessarily required, if you are talking about information
> that deals primarily with pre-consensus mempool behavior.  You can make a
> "network TX" with some information that is digitally signed, yet discarded
> before it reaches miners.
>
>
> On Wed, Aug 6, 2014 at 11:42 AM, Peter Todd <pete at petertodd.org> wrote:
>
>> -----BEGIN PGP SIGNED MESSAGE-----
>> Hash: SHA256
>>
>>
>>
>> On 6 August 2014 08:17:02 GMT-07:00, Christian Decker <
>> decker.christian at gmail.com> wrote:
>> >+1 for the new field, overloading fields with new meaning is definitely
>> >not
>> >a good idea.
>>
>>  To add a new field the best way to do it is create a new, parallel, tx
>> format where fields are committed by merkle radix tree in an extensible and
>> provable way. You'd then commit to that tree with a mandatory OP_RETURN
>> output in the last txout, or with a new merkle root.
>>
>> Changing the tx format itself in a hard-fork is needlessly disruptive,
>> and in this case, wastes opportunities for improvement.
>> -----BEGIN PGP SIGNATURE-----
>> Version: APG v1.1.1
>>
>> iQFQBAEBCAA6BQJT4kzQMxxQZXRlciBUb2RkIChsb3cgc2VjdXJpdHkga2V5KSA8
>> cGV0ZUBwZXRlcnRvZGQub3JnPgAKCRAZnIM7qOfwhamzCAC+zRaXRodP63+ke3K+
>> Viapiepvk4uIOlqxqtMB2O0zWcyu2+xCJDiRPykK/6HLDBeFDEC9/dGK8++Lovl6
>> //qZ340LOPFlgT2kYy9E5h/yX469fhtsWhBCv2K47fWwkMS0S/0r4SQnCkbt2R2c
>> 4dQjkoldhw6rNMBTUmwvhSlL30KsT/msWTZiX7DW/YjfOzezEJzy+mYyKp9Sk7ba
>> 1fOiBXORk7mNOs7sTYTvje3sqEGpGTOLP08cY/RCEvl6bG8mHkPqwiojq+3biHFP
>> RsoBVu1f5cbnU7Wq0gPNdVnQssnEQDadyTX8gT0Wze7PuVyaZT2mXFZBKzSHuLy2
>> sJKN
>> =oPSo
>> -----END PGP SIGNATURE-----
>>
>>
>
>
> --
> Jeff Garzik
> Bitcoin core developer and open source evangelist
> BitPay, Inc.      https://bitpay.com/
>
>
> ------------------------------------------------------------------------------
> Infragistics Professional
> Build stunning WinForms apps today!
> Reboot your WinForms applications with our WinForms controls.
> Build a bridge from your legacy apps to the future.http://pubads.g.doubleclick.net/gampad/clk?id=153845071&iu=/4140/ostg.clktrk
>
>
>
> _______________________________________________
> Bitcoin-development mailing listBitcoin-development at lists.sourceforge.nethttps://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
>
>
> ------------------------------------------------------------------------------
> Infragistics Professional
> Build stunning WinForms apps today!
> Reboot your WinForms applications with our WinForms controls.
> Build a bridge from your legacy apps to the future.
>
> http://pubads.g.doubleclick.net/gampad/clk?id=153845071&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>


-- 
Jeff Garzik
Bitcoin core developer and open source evangelist
BitPay, Inc.      https://bitpay.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140806/f35ada01/attachment.html>

From mark at monetize.io  Wed Aug  6 17:21:56 2014
From: mark at monetize.io (Mark Friedenbach)
Date: Wed, 06 Aug 2014 13:21:56 -0400
Subject: [Bitcoin-development] deterministic transaction expiration
In-Reply-To: <53E25F8A.5070905@thinlink.com>
References: <CA+iPb=HkxeVPF0SynxCPgUkq4msrdfayFrVNFjzg29rFwqXv1w@mail.gmail.com>	<CAJHLa0O2wFq2Vs5Bes_8x1q_j0VC+U4DQkx=6GqT8w5e8Lh5Qg@mail.gmail.com>	<CA+iPb=ET+A-qB8TgPX8D-ut1DWnq9tZJ=14igfRVWO6eog6Xgw@mail.gmail.com>	<53E1A8AF.4030206@thinlink.com>	<CAJHLa0MfRhCPX8H92qc1kSebc=WrUzmSgbG331t4-zDHhTNu4w@mail.gmail.com>	<CANEZrP3eEiLxYfsAURRm4ysfS4TRgXxa_THxJ43cVH1OyR95JQ@mail.gmail.com>	<53E23F49.3020605@thinlink.com>	<CAJHLa0OtPA3DGQuJhp3zkK5dnBux6TFAw3qDsBdO0zaxrqBgRg@mail.gmail.com>	<CALxbBHXh-Fktsr96PMXdohJdgcUKoNreJ-ZuApKOX3-qSkdk2w@mail.gmail.com>	<63a80796-609e-43f5-9280-4cd8cf5d2648@email.android.com>	<CAJHLa0OQJEvQht_chF1gVG_BOwp=DW0zOOo3VE_acZonsSguWw@mail.gmail.com>
	<53E25F8A.5070905@thinlink.com>
Message-ID: <53E26434.2070502@monetize.io>

On 08/06/2014 01:02 PM, Tom Harding wrote:
> With first-eligible-height and last-eligible-height, creator could
> choose a lifetime shorter than the max,  and in addition, lock the whole
> thing until some point in the future.

Note that this would be a massive, *massive* change that would
completely break bitcoin output frangibility. Merchants would have to
start demanding input history back to a certain depth in order to ensure
they are not exposing themselves to undue reorg-expiry risk.

There are useful applications of a consensus-enforced expiry,
particularly within a private (signed block) side chain, and for that
reason it is useful to have a discussion about the merits of an nExpiry
field or BLOCK_HEIGHT / BLOCK_TIME opcode, and methods for achieving
either. However I don't see this ever becoming part of the public
bitcoin network.



From mark at monetize.io  Wed Aug  6 17:30:11 2014
From: mark at monetize.io (Mark Friedenbach)
Date: Wed, 06 Aug 2014 13:30:11 -0400
Subject: [Bitcoin-development] deterministic transaction expiration
In-Reply-To: <cafd8184-f589-4709-90f3-f3a38f2dd8d0@email.android.com>
References: <CA+iPb=HkxeVPF0SynxCPgUkq4msrdfayFrVNFjzg29rFwqXv1w@mail.gmail.com>
	<CAJHLa0O2wFq2Vs5Bes_8x1q_j0VC+U4DQkx=6GqT8w5e8Lh5Qg@mail.gmail.com>
	<CA+iPb=ET+A-qB8TgPX8D-ut1DWnq9tZJ=14igfRVWO6eog6Xgw@mail.gmail.com>
	<53E1A8AF.4030206@thinlink.com>
	<CAJHLa0MfRhCPX8H92qc1kSebc=WrUzmSgbG331t4-zDHhTNu4w@mail.gmail.com>
	<CANEZrP3eEiLxYfsAURRm4ysfS4TRgXxa_THxJ43cVH1OyR95JQ@mail.gmail.com>
	<53E23F49.3020605@thinlink.com>
	<CAJHLa0OtPA3DGQuJhp3zkK5dnBux6TFAw3qDsBdO0zaxrqBgRg@mail.gmail.com>
	<CALxbBHXh-Fktsr96PMXdohJdgcUKoNreJ-ZuApKOX3-qSkdk2w@mail.gmail.com>
	<63a80796-609e-43f5-9280-4cd8cf5d2648@email.android.com>
	<53E2585C.8070009@monetize.io>
	<cafd8184-f589-4709-90f3-f3a38f2dd8d0@email.android.com>
Message-ID: <53E26623.3070107@monetize.io>

On 08/06/2014 01:20 PM, Peter Todd wrote:
> The general case doesn't require transmission of any merkle data; it
> is derived from the tx data.

How can that possibly be the case? The information is hidden behind the
Merkle root in the transaction. The validator needs to know whether
there is an expiry and what it is. What's it supposed to do, guess?



From pete at petertodd.org  Wed Aug  6 17:38:23 2014
From: pete at petertodd.org (Peter Todd)
Date: Wed, 06 Aug 2014 10:38:23 -0700
Subject: [Bitcoin-development] deterministic transaction expiration
In-Reply-To: <53E26623.3070107@monetize.io>
References: <CA+iPb=HkxeVPF0SynxCPgUkq4msrdfayFrVNFjzg29rFwqXv1w@mail.gmail.com>
	<CAJHLa0O2wFq2Vs5Bes_8x1q_j0VC+U4DQkx=6GqT8w5e8Lh5Qg@mail.gmail.com>
	<CA+iPb=ET+A-qB8TgPX8D-ut1DWnq9tZJ=14igfRVWO6eog6Xgw@mail.gmail.com>
	<53E1A8AF.4030206@thinlink.com>
	<CAJHLa0MfRhCPX8H92qc1kSebc=WrUzmSgbG331t4-zDHhTNu4w@mail.gmail.com>
	<CANEZrP3eEiLxYfsAURRm4ysfS4TRgXxa_THxJ43cVH1OyR95JQ@mail.gmail.com>
	<53E23F49.3020605@thinlink.com>
	<CAJHLa0OtPA3DGQuJhp3zkK5dnBux6TFAw3qDsBdO0zaxrqBgRg@mail.gmail.com>
	<CALxbBHXh-Fktsr96PMXdohJdgcUKoNreJ-ZuApKOX3-qSkdk2w@mail.gmail.com>
	<63a80796-609e-43f5-9280-4cd8cf5d2648@email.android.com>
	<53E2585C.8070009@monetize.io>
	<cafd8184-f589-4709-90f3-f3a38f2dd8d0@email.android.com>
	<53E26623.3070107@monetize.io>
Message-ID: <58d8e86f-79fc-417d-a001-951c12638a4a@email.android.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256



On 6 August 2014 10:30:11 GMT-07:00, Mark Friedenbach <mark at monetize.io> wrote:
>On 08/06/2014 01:20 PM, Peter Todd wrote:
>> The general case doesn't require transmission of any merkle data; it
>> is derived from the tx data.
>
>How can that possibly be the case? The information is hidden behind the
>Merkle root in the transaction. The validator needs to know whether
>there is an expiry and what it is. What's it supposed to do, guess?

The general case is all committed information is included in the transaction; the merkle tree is a compatibility path, as well as an optimisation for lite clients and applications.

You should read more about soft-forks; see the BIP. Remember that Bitcoin protocol development and deployment is not a centrally controlled activity.
-----BEGIN PGP SIGNATURE-----
Version: APG v1.1.1

iQFQBAEBCAA6BQJT4mgPMxxQZXRlciBUb2RkIChsb3cgc2VjdXJpdHkga2V5KSA8
cGV0ZUBwZXRlcnRvZGQub3JnPgAKCRAZnIM7qOfwhSYlCAC1ncAGQt53HKS+8/rq
OG0RGrqE2l2/qCM/ybd9M8TkwxaI3NB5bqfIus8dB5MnyiTBFS3ooN54kNNOHtSX
2rEzPJphtOj46tk3nqe1QO3cbFJPjBCtxZff51DWZckhCiO2Iy1Br3fK3v55iscp
1jxyZnpfgUG/Ivfx+h6vkisucBXgXJ82d5vzvMIMxixh4v2+4/SAcSY6HCLIpxmV
Z3l0NcGllnmWe5B6eftpWYUAREuoCNk/671jHmwu0cqk2u/Egrp776zxkEO1xivH
d0EWjJmlDLmQ2hEhkpBq46ji/2m4EWPLqTW/EXf3RzwU8uCEldbxEe2tyZ0d6oBt
NnTE
=AhV7
-----END PGP SIGNATURE-----




From pete at petertodd.org  Wed Aug  6 17:34:21 2014
From: pete at petertodd.org (Peter Todd)
Date: Wed, 06 Aug 2014 10:34:21 -0700
Subject: [Bitcoin-development] deterministic transaction expiration
In-Reply-To: <53E26434.2070502@monetize.io>
References: <CA+iPb=HkxeVPF0SynxCPgUkq4msrdfayFrVNFjzg29rFwqXv1w@mail.gmail.com>
	<CAJHLa0O2wFq2Vs5Bes_8x1q_j0VC+U4DQkx=6GqT8w5e8Lh5Qg@mail.gmail.com>
	<CA+iPb=ET+A-qB8TgPX8D-ut1DWnq9tZJ=14igfRVWO6eog6Xgw@mail.gmail.com>
	<53E1A8AF.4030206@thinlink.com>
	<CAJHLa0MfRhCPX8H92qc1kSebc=WrUzmSgbG331t4-zDHhTNu4w@mail.gmail.com>
	<CANEZrP3eEiLxYfsAURRm4ysfS4TRgXxa_THxJ43cVH1OyR95JQ@mail.gmail.com>
	<53E23F49.3020605@thinlink.com>
	<CAJHLa0OtPA3DGQuJhp3zkK5dnBux6TFAw3qDsBdO0zaxrqBgRg@mail.gmail.com>
	<CALxbBHXh-Fktsr96PMXdohJdgcUKoNreJ-ZuApKOX3-qSkdk2w@mail.gmail.com>
	<63a80796-609e-43f5-9280-4cd8cf5d2648@email.android.com>
	<CAJHLa0OQJEvQht_chF1gVG_BOwp=DW0zOOo3VE_acZonsSguWw@mail.gmail.com>
	<53E25F8A.5070905@thinlink.com> <53E26434.2070502@monetize.io>
Message-ID: <d13f2a27-b9d6-4cbb-9bba-de358edbd227@email.android.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256



On 6 August 2014 10:21:56 GMT-07:00, Mark Friedenbach <mark at monetize.io> wrote:
>On 08/06/2014 01:02 PM, Tom Harding wrote:
>> With first-eligible-height and last-eligible-height, creator could
>> choose a lifetime shorter than the max,  and in addition, lock the
>whole
>> thing until some point in the future.
>
>Note that this would be a massive, *massive* change that would
>completely break bitcoin output frangibility. Merchants would have to
>start demanding input history back to a certain depth in order to
>ensure
>they are not exposing themselves to undue reorg-expiry risk.

Bitcoin is already "broken" in that regard due to malleability, and more fundamentally, the existence of anyone-can-spend outputs, known private keys, SIGHASH_ANYONECANPAY, etc.

In any case, reorg-doublespend risk is no different than reorg-expiry risk.
-----BEGIN PGP SIGNATURE-----
Version: APG v1.1.1

iQFQBAEBCAA6BQJT4mcdMxxQZXRlciBUb2RkIChsb3cgc2VjdXJpdHkga2V5KSA8
cGV0ZUBwZXRlcnRvZGQub3JnPgAKCRAZnIM7qOfwhSdiB/9no/fXR50Zej4l6Hyt
gDvM9GWosGxZydQfplrUYzS9nLWTJgkjNYkrJk1OXPlkiNoHhlpCK6TuEL3DXBo8
txDBhp/xls7aFHELpPhP5iKrEj0J6fyMp9wKRVtUu0J+RhHY22v+iEQf//dGUX4v
hQPwATubmnyeVd71TAKyW6zCPjoEh0IG19tRVvw/v7/qNTXHdSZTkSVzQa4GP2gr
2xVqXTeOycPKqIU+GaNI4aRAL2DUm1kW3jG/+h3BwnJNd5q+0ELpC6xDmkA6hkNz
N6BFCtoghhKNH+FNsZKAzE9w8dYngZQbaA9vVdaR6SXzz9KuG526EymOF7e55IBJ
FMu+
=ii2+
-----END PGP SIGNATURE-----




From tim.ruffing at mmci.uni-saarland.de  Wed Aug  6 22:22:31 2014
From: tim.ruffing at mmci.uni-saarland.de (Tim Ruffing)
Date: Thu, 07 Aug 2014 00:22:31 +0200
Subject: [Bitcoin-development] CoinShuffle: decentralized CoinJoin without
	trusted third parties
Message-ID: <8137823.B0x87S28xY@calzone>

Hey,

We (a group of researchers in Germany) propose a decentralized protocol for 
CoinJoin, a way to mix coins among users to improve anonymity. Our protocol is 
called CoinShuffle. We believe that CoinShuffle is a way to implement CoinJoin 
in the original spirit of Bitcoin, i.e., decentralized and without trusted 
third parties. (If you are not familiar with CoinJoin, the idea is explained 
here: https://bitcointalk.org/index.php?topic=279249.0 )

The protocol is essentially a clever way to create a CoinJoin transaction. 
Recall that the idea of CoinJoin is mixing with one SINGLE transaction that 
has multiple input addresses and multiple fresh output addresses (i.e., one 
pair of addresses per user). The advantage of CoinJoin over mixing with a 
server or trusted party is that nobody can steal coins. Each user can check if 
the single transaction sends enough coins to his fresh output address. If this 
is not the case, the user can just refuse to sign the transaction and nothing 
(bad) happens.

The difficulty in CoinJoin is to let the participants announce their fresh 
output addresses without breaking anonymity: Of course, if a participant of 
the protocol just announces "I have 1 BTC at address X now" and "I would like 
to have it back at address Y", then everybody can link X and Y and mixing is 
useless. A naive approach is to send these two messages via a secure channel 
to a server that organizes the whole mixing. While the server cannot steal 
coins, the server still has to be trusted for anonymity, because it knows 
which input addresses belong to which output addresses.

We present the list of CoinShuffle's features at the end of this e-mail. An 
overview over the technical details can be found on the project page:
http://crypsys.mmci.uni-saarland.de/projects/CoinShuffle/

Moreover, for the full details, have a look at the research paper on 
CoinShuffle that can be found here:
http://crypsys.mmci.uni-saarland.de/projects/CoinShuffle/coinshuffle.pdf

The paper has been accepted at a major European academic conference on 
security (ESORICS). We will present the idea there. 

Our Proof-of-concept Implementation
-----------------------------------
There is a proof-of-concept implementation (written in Python) available on 
our project page. It is really only a proof-of-concept and it implements only 
the announcement of the addresses, not the creation of the transaction. 
Moreover, the code is CERTAINLY INSECURE and not well-written; our only goal 
was to demonstrate feasibility and estimate the performance of our approach.


Our Future Plans
----------------
Now we are planning a full, open-source implementation of the protocol. Of 
course, we would like to build on top of an existing wide-spread client. Since 
we do not have much experience in the design of existing Bitcoin clients, we 
would appreciate any help in the process. In particular, we did not decide 
which of the existing clients we would like to extend. Any hints towards this 
decisions would very helpful. Help in design and coding would be great but we 
also would like to hear your comments, criticism, and improvements for the 
protocol itself.

CoinShuffle Features
--------------------
CoinShuffle has the following features:

 - Decentralization / no third party:
There is no (trusted or untrusted) third party in a run of the protocol. 
(Still, as in all mixing solutions, users need some way to gather together 
before they can run the protocol. This can be done via a P2P protocol if a 
decentralized solution is desired also for this step.)

   
 - Unlinkability of input and output addresses:
Nobody, in particular no server (there is none!), can link input and output 
addresses of a mixing transaction, as long as there are at least two honest 
participants in run of the protocol.
   
(This is not a weakness: If there is only one honest participant, meaningful 
mixing is just impossible, no matter how it is organized. If all the other 
participants collude, they know all their input and output addresses and can 
immediately determine the output address of the honest participant.)

 - Security against thefts:
As explained above, nobody can steal coins during the mixing because of the 
CoinJoin principle.  
Every participant can verify that his money will not be stolen. Otherwise, he 
refuses to sign the transaction and nothing will happen.

 - Robustness against denial-of-service:
In CoinJoin, a single malicious (or malfunctioning) client suffices to stop 
the whole protocol (e.g., by just refusing to sing the transaction without a 
proper reason.) This can easily lead to DoS attacks but these can be countered 
in CoinShuffle.
   
While in case of disruption, the current run of the protocol has to stop, 
CoinShuffle addresses this problem as follows:  In case of active disruption, 
i.e., some participant sends wrong messages, the protocol provides a proof of 
this misbehavior. Then the honest protocol parties can start a new run of the 
protocol without the misbehaving participant. Also in case of passive 
disruption, i.e., some participant does not respond (for whatever reason), the 
remaining participants can agree on starting a new run without this 
participant. This ensures that the protocol will finally succeed even in the 
presence of malicious participant (although this can take quite a while then).

 - Only public-key encryption and signatures:
The protocol requires only well-established cryptographic primitives. Besides 
signatures and hash functions (that are already used by Bitcoin), only 
standard public-key encryption is necessary.
  
 - Efficiency:
A run of the protocol with 30 participants takes less than 100 seconds (in a 
setting with reasonable bandwidth and delay). This is not much, given that 10 
min (on average) are required to confirm the mixing transaction anyway.
   
The costs are almost completely caused by communication. The computation 
overhead is minimal. (This is the main achievement actually. In theory, it is 
clear that a protocol with all the properties can be built. However, generic 
constructions cannot be used in practice yet, because the computation and 
communication costs are huge.)

- Compatibility:
As CoinShuffle works on top of Bitcoin, it is fully compatible with the 
current Bitcoin system. No changes to the Bitcoin protocol are required.


By the way: The NXT cryptocurrency picked up our idea and an implementation of 
CoinShuffle for a part of NXT is under way. ( 
https://twitter.com/comefrombeyond/status/485429369268350977 )

  
TL,DR:
Mixing is the way to improve anonymity in Bitcoin now, as it does not require 
changes to the Bitcoin protocol. We propose CoinShuffle, a decentralized 
protocol to perform mixing in a secure way without trusted third parties, see 
http://crypsys.mmci.uni-saarland.de/projects/CoinShuffle/ for a technical 
overview. Our next step is to implement the protocol. Help in design and 
coding would be great but we also would like to hear your comments, criticism, 
and improvements for the protocol itself. 

Best,
Tim Ruffing, Pedro Moreno-Sanchez, Aniket Kate
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 648 bytes
Desc: This is a digitally signed message part.
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140807/f43f0fc1/attachment.sig>

From pete at petertodd.org  Wed Aug  6 23:33:09 2014
From: pete at petertodd.org (Peter Todd)
Date: Wed, 6 Aug 2014 23:33:09 +0000
Subject: [Bitcoin-development] Payment ID #'s for Stealth Addresses
Message-ID: <20140806233309.GB9272@localhost.localdomain>

Real-world experience with stealth address implementations used by
Cryptonote/Monero/etc. have shown that being able to attach a number of
some kind to each stealth-sent txout is valuable. For instance an
exchange with many customers can use such #'s to disambiguate payments
and credit the correct customer's account. Similarly an informal
person-to-person transaction can attach a number short enough to be
communicated verbally or on paper. Finally multiple payments with the
same ID # can be merged together in wallet UI's, allowing
merge-avoidance to be conveniently used with stealth addresses.

To avoid accidental collision such payment #'s should be at least
64-bits; to avoid privacy loss the encoded size should be the same for
all users. Thus we pick 64-bits or 8-bytes. In addition for the purposes
of CoinJoin and multiple outputs it would be desirable for all
stealth-using outputs the option of sharing a single 33-byte ephemeral
pubkey. Thus our OP_RETURN output becomes:

    OP_RETURN <ephemeral pubkey> <payment ID 1> {<ID 2> ... <ID n>}

Of course, this can't be accomodated within the existing 40-byte, one
OP_RETURN per tx, IsStandard() rules, something which is already causing
issues w/ Dark Wallet when users try to send to multiple stealth
addresses at once, and when multiple stealth sends are CoinJoin'd
together.

1) "Merge avoidance", Dec 11th 2013, Mike Hearn,
    https://medium.com/@octskyward/merge-avoidance-7f95a386692f

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140806/ea595171/attachment.sig>

From pete at petertodd.org  Thu Aug  7 01:03:50 2014
From: pete at petertodd.org (Peter Todd)
Date: Thu, 7 Aug 2014 01:03:50 +0000
Subject: [Bitcoin-development] SIGHASH_ANYONECANPAY extra inputs DoS attack
Message-ID: <20140807010350.GC9272@localhost.localdomain>

tl;dr: Transactions with SIGHASH_ANYONECANPAY-using inputs can be DoS
attacked by attackers adding extra inputs to them that make the fee/byte
paid unfavorable to miners, while still being high enough to be relayed.
While just a nuisance DoS attack, this is a serious obstacle towards
using ANYONECANPAY.


Background: What uses ANYONECANPAY?
-----------------------------------

1) Crowdfunds/assurance contracts: e.g. Hearn's upcoming Lighthouse, as
well as Armory's implementation.

2) Fee bumping: receiver or sender can add inputs w/ ANYONECANPAY to get
a tx confirmed without the (expensive) overhead of a second CPFP tx.

3) Privacy: inputs are more deniable in some cases, e.g. dust used for
fees, which anyone could have added.

4) Replace-by-fee scorched earth: best implementations(1) depend on fee
bumping.


Partial defense: replace-by-fee
-------------------------------

The attacker's modified transaction will usually, but not always, be
replaced by the intended one as the latter will have higher fees.
However replace-by-fee implementations must charge adequately for
network bandwidth consumed, so there will be edge-cases where the
replacement does not happen.


Transaction fee/byte optimization
---------------------------------

Each input that does not use SIGHASH_ALL can be evaluated in terms of
whether or not it increases the fees/byte paid by the transaction. Thus
we can optimize a transaction to pay the highest fees/byte by doing the
following:

    def optimize_tx(tx):
        tx2 = CTransaction(vin=[], vout=tx.vout, nLockTime=tx.nLockTime)

        for txin in <tx.vin sorted by fees/byte>:
            if <txin depends on other txins>:
                continue

            if <tx2 is valid>:
                prev_fee_per_byte = tx2.fees / len(tx2.serialized())
                tx2.vin.append(txin)
                if tx2.fees / len(tx2.serialized()) < prev_fee_per_byte:
                    # adding txin decreased fees/byte
                    tx2.vin.pop()
                    return tx2

            else:
                tx2.vin.append(txin)

        return tx

Essentially txin's that reduce the profitability of the transaction are
dropped, including the attacker's added txins. Meanwhile txins that
increase the profitability can be added by anyone.


1) "[Bitcoin-development] Replace-by-fee scorched-earth without child-pays-for-parent",
   Apr 28th 2014, Peter Todd,
   https://www.mail-archive.com/bitcoin-development at lists.sourceforge.net/msg05211.html

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 455 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140807/38ccaaf3/attachment.sig>

From xor at freenetproject.org  Thu Aug  7 13:00:11 2014
From: xor at freenetproject.org (xor)
Date: Thu, 07 Aug 2014 15:00:11 +0200
Subject: [Bitcoin-development] CoinShuffle: decentralized CoinJoin
	without trusted third parties
In-Reply-To: <8137823.B0x87S28xY@calzone>
References: <8137823.B0x87S28xY@calzone>
Message-ID: <1530801.palqu9XdN4@1337h4x0r>

On Thursday, August 07, 2014 12:22:31 AM Tim Ruffing wrote:
>  - Decentralization / no third party:
> There is no (trusted or untrusted) third party in a run of the protocol.
> (Still, as in all mixing solutions, users need some way to gather together
> before they can run the protocol. This can be done via a P2P protocol if a
> decentralized solution is desired also for this step.)
[...]
> http://crypsys.mmci.uni-saarland.de/projects/CoinShuffle/ for a technical
> overview. 

I think the description at your website leaves out the truly interesting part:
How do you decentralize this securely?
- How do Alice, Bob, Charlie and Dave communicate, i.e. which network is used 
for communication and how?
- How does Alice know that Bob, Charlie and Dave are not the same person?
(= how do you prevent a Sybil attack?)

Because thats the real problem with mixing it seems - ensuring that your 
mixing partners are actually 100 people and not just 1 attacker. There are 
probably many mixing algorithms which work if you solve that problem, but I 
don't see how you offer a solution for it :(
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 836 bytes
Desc: This is a digitally signed message part.
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140807/4a1c63a5/attachment.sig>

From pedro at worcel.com  Thu Aug  7 23:02:21 2014
From: pedro at worcel.com (Pedro Worcel)
Date: Fri, 8 Aug 2014 11:02:21 +1200
Subject: [Bitcoin-development] Miners MiTM
Message-ID: <CAPS+U9-ze_-gcYh1WNVJ5h8AZ8owoQX=8OUgNcKnaxgvjxZATA@mail.gmail.com>

Hi there,

I was wondering if you guys have come across this article:

http://www.wired.com/2014/08/isp-bitcoin-theft/

The TL;DR is that somebody is abusing the BGP protocol to be in a position
where they can intercept the miner traffic. The concerning point is that
they seem to be having some degree of success in their endeavour and
earning profits from it.

I do not understand the impact of this (I don't know much about BGP, the
mining protocol nor anything else, really), but I thought it might be worth
putting it up here.

Ta,
Pedro
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140808/21c667f5/attachment.html>

From luke at dashjr.org  Thu Aug  7 23:45:44 2014
From: luke at dashjr.org (Luke Dashjr)
Date: Thu, 7 Aug 2014 23:45:44 +0000
Subject: [Bitcoin-development] Miners MiTM
In-Reply-To: <CAPS+U9-ze_-gcYh1WNVJ5h8AZ8owoQX=8OUgNcKnaxgvjxZATA@mail.gmail.com>
References: <CAPS+U9-ze_-gcYh1WNVJ5h8AZ8owoQX=8OUgNcKnaxgvjxZATA@mail.gmail.com>
Message-ID: <201408072345.45363.luke@dashjr.org>

On Thursday, August 07, 2014 11:02:21 PM Pedro Worcel wrote:
> Hi there,
> 
> I was wondering if you guys have come across this article:
> 
> http://www.wired.com/2014/08/isp-bitcoin-theft/
> 
> The TL;DR is that somebody is abusing the BGP protocol to be in a position
> where they can intercept the miner traffic. The concerning point is that
> they seem to be having some degree of success in their endeavour and
> earning profits from it.
> 
> I do not understand the impact of this (I don't know much about BGP, the
> mining protocol nor anything else, really), but I thought it might be worth
> putting it up here.

This is old news; both BFGMiner and Eloipool were hardened against it a long 
time ago (although no Bitcoin pools have deployed it so far). I'm not aware of 
any actual case of it being used against Bitcoin, though - the target has 
always been scamcoins.



From slush at centrum.cz  Fri Aug  8 00:29:31 2014
From: slush at centrum.cz (slush)
Date: Fri, 8 Aug 2014 02:29:31 +0200
Subject: [Bitcoin-development] Miners MiTM
In-Reply-To: <201408072345.45363.luke@dashjr.org>
References: <CAPS+U9-ze_-gcYh1WNVJ5h8AZ8owoQX=8OUgNcKnaxgvjxZATA@mail.gmail.com>
	<201408072345.45363.luke@dashjr.org>
Message-ID: <CAJna-HjzMO68KSXYG++X-8vzQCLurkrAAhfrVo9-AbaoYdqZhw@mail.gmail.com>

AFAIK the only protection is SSL + certificate validation on client side.
However certificate revocation and updates in miners are pain in the ass,
that's why majority of pools (mine including) don't want to play with
that...

slush


On Fri, Aug 8, 2014 at 1:45 AM, Luke Dashjr <luke at dashjr.org> wrote:

> On Thursday, August 07, 2014 11:02:21 PM Pedro Worcel wrote:
> > Hi there,
> >
> > I was wondering if you guys have come across this article:
> >
> > http://www.wired.com/2014/08/isp-bitcoin-theft/
> >
> > The TL;DR is that somebody is abusing the BGP protocol to be in a
> position
> > where they can intercept the miner traffic. The concerning point is that
> > they seem to be having some degree of success in their endeavour and
> > earning profits from it.
> >
> > I do not understand the impact of this (I don't know much about BGP, the
> > mining protocol nor anything else, really), but I thought it might be
> worth
> > putting it up here.
>
> This is old news; both BFGMiner and Eloipool were hardened against it a
> long
> time ago (although no Bitcoin pools have deployed it so far). I'm not
> aware of
> any actual case of it being used against Bitcoin, though - the target has
> always been scamcoins.
>
>
> ------------------------------------------------------------------------------
> Infragistics Professional
> Build stunning WinForms apps today!
> Reboot your WinForms applications with our WinForms controls.
> Build a bridge from your legacy apps to the future.
>
> http://pubads.g.doubleclick.net/gampad/clk?id=153845071&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140808/bf203262/attachment.html>

From chrisjfranko at gmail.com  Fri Aug  8 00:37:27 2014
From: chrisjfranko at gmail.com (Christopher Franko)
Date: Thu, 7 Aug 2014 20:37:27 -0400
Subject: [Bitcoin-development] Miners MiTM
In-Reply-To: <CAJna-HjzMO68KSXYG++X-8vzQCLurkrAAhfrVo9-AbaoYdqZhw@mail.gmail.com>
References: <CAPS+U9-ze_-gcYh1WNVJ5h8AZ8owoQX=8OUgNcKnaxgvjxZATA@mail.gmail.com>
	<201408072345.45363.luke@dashjr.org>
	<CAJna-HjzMO68KSXYG++X-8vzQCLurkrAAhfrVo9-AbaoYdqZhw@mail.gmail.com>
Message-ID: <CAH99vakZLWe_auKb0iuKY0EJn2wWT13bThY-y5Y5O0u+AWRj3g@mail.gmail.com>

What exactly makes bitcoin less of a target than a "scamcoin" which I
suspect means anything that != bitcoin?


On 7 August 2014 20:29, slush <slush at centrum.cz> wrote:

> AFAIK the only protection is SSL + certificate validation on client side.
> However certificate revocation and updates in miners are pain in the ass,
> that's why majority of pools (mine including) don't want to play with
> that...
>
> slush
>
>
> On Fri, Aug 8, 2014 at 1:45 AM, Luke Dashjr <luke at dashjr.org> wrote:
>
>> On Thursday, August 07, 2014 11:02:21 PM Pedro Worcel wrote:
>> > Hi there,
>> >
>> > I was wondering if you guys have come across this article:
>> >
>> > http://www.wired.com/2014/08/isp-bitcoin-theft/
>> >
>> > The TL;DR is that somebody is abusing the BGP protocol to be in a
>> position
>> > where they can intercept the miner traffic. The concerning point is that
>> > they seem to be having some degree of success in their endeavour and
>> > earning profits from it.
>> >
>> > I do not understand the impact of this (I don't know much about BGP, the
>> > mining protocol nor anything else, really), but I thought it might be
>> worth
>> > putting it up here.
>>
>> This is old news; both BFGMiner and Eloipool were hardened against it a
>> long
>> time ago (although no Bitcoin pools have deployed it so far). I'm not
>> aware of
>> any actual case of it being used against Bitcoin, though - the target has
>> always been scamcoins.
>>
>>
>> ------------------------------------------------------------------------------
>> Infragistics Professional
>> Build stunning WinForms apps today!
>> Reboot your WinForms applications with our WinForms controls.
>> Build a bridge from your legacy apps to the future.
>>
>> http://pubads.g.doubleclick.net/gampad/clk?id=153845071&iu=/4140/ostg.clktrk
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>
>
>
>
> ------------------------------------------------------------------------------
> Want fast and easy access to all the code in your enterprise? Index and
> search up to 200,000 lines of code with a free copy of Black Duck
> Code Sight - the same software that powers the world's largest code
> search on Ohloh, the Black Duck Open Hub! Try it now.
> http://p.sf.net/sfu/bds
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140807/dcad83ff/attachment.html>

From luke at dashjr.org  Fri Aug  8 01:01:15 2014
From: luke at dashjr.org (Luke Dashjr)
Date: Fri, 8 Aug 2014 01:01:15 +0000
Subject: [Bitcoin-development] Miners MiTM
In-Reply-To: <CAJna-HjzMO68KSXYG++X-8vzQCLurkrAAhfrVo9-AbaoYdqZhw@mail.gmail.com>
References: <CAPS+U9-ze_-gcYh1WNVJ5h8AZ8owoQX=8OUgNcKnaxgvjxZATA@mail.gmail.com>
	<201408072345.45363.luke@dashjr.org>
	<CAJna-HjzMO68KSXYG++X-8vzQCLurkrAAhfrVo9-AbaoYdqZhw@mail.gmail.com>
Message-ID: <201408080101.16453.luke@dashjr.org>

On Friday, August 08, 2014 12:29:31 AM slush wrote:
> AFAIK the only protection is SSL + certificate validation on client side.
> However certificate revocation and updates in miners are pain in the ass,
> that's why majority of pools (mine including) don't want to play with
> that...

Certificate validation isn't needed unless the attacker can do a direct MITM 
at connection time, which is a lot harder to maintain than injecting a 
client.reconnect. This, combined with your concern about up to date 
certs/revokes/etc, is why BFGMiner defaults to TLS without cert checking for 
stratum.

Luke



From pedro at worcel.com  Fri Aug  8 01:07:04 2014
From: pedro at worcel.com (Pedro Worcel)
Date: Fri, 8 Aug 2014 13:07:04 +1200
Subject: [Bitcoin-development] Miners MiTM
In-Reply-To: <CAH99vakZLWe_auKb0iuKY0EJn2wWT13bThY-y5Y5O0u+AWRj3g@mail.gmail.com>
References: <CAPS+U9-ze_-gcYh1WNVJ5h8AZ8owoQX=8OUgNcKnaxgvjxZATA@mail.gmail.com>
	<201408072345.45363.luke@dashjr.org>
	<CAJna-HjzMO68KSXYG++X-8vzQCLurkrAAhfrVo9-AbaoYdqZhw@mail.gmail.com>
	<CAH99vakZLWe_auKb0iuKY0EJn2wWT13bThY-y5Y5O0u+AWRj3g@mail.gmail.com>
Message-ID: <CAPS+U99pnqrGiYb-1MMf_GjR2eCiwaX3MvDHX3kGjepEf0=4nQ@mail.gmail.com>

> the only protection is SSL + certificate validation on client side.
However certificate revocation and updates in miners are pain in the ass,
that's why majority of pools (mine including) don't want to play with
that...

Another solution which would have less overhead would be to implement
something akin to what openssh does. The OpenSSH client stores a
certificate fingerprint, which is then verified automatically upon further
connections to the server.

The initial connection needs to be verified manually by the operator,
though.

> Certificate validation isn't needed unless the attacker can do a direct
MITM
at connection time, which is a lot harder to maintain than injecting a
client.reconnect. This, combined with your concern about up to date
certs/revokes/etc, is why BFGMiner defaults to TLS without cert checking for
stratum.

Seems to me that it would correctly mitigate the attack mentioned in the
wired article. I am surprised that miners are not worried about losing
their profits, I would personally be quite annoyed.



2014-08-08 12:37 GMT+12:00 Christopher Franko <chrisjfranko at gmail.com>:

> What exactly makes bitcoin less of a target than a "scamcoin" which I
> suspect means anything that != bitcoin?
>
>
> On 7 August 2014 20:29, slush <slush at centrum.cz> wrote:
>
>> AFAIK the only protection is SSL + certificate validation on client side.
>> However certificate revocation and updates in miners are pain in the ass,
>> that's why majority of pools (mine including) don't want to play with
>> that...
>>
>> slush
>>
>>
>> On Fri, Aug 8, 2014 at 1:45 AM, Luke Dashjr <luke at dashjr.org> wrote:
>>
>>> On Thursday, August 07, 2014 11:02:21 PM Pedro Worcel wrote:
>>> > Hi there,
>>> >
>>> > I was wondering if you guys have come across this article:
>>> >
>>> > http://www.wired.com/2014/08/isp-bitcoin-theft/
>>> >
>>> > The TL;DR is that somebody is abusing the BGP protocol to be in a
>>> position
>>> > where they can intercept the miner traffic. The concerning point is
>>> that
>>> > they seem to be having some degree of success in their endeavour and
>>> > earning profits from it.
>>> >
>>> > I do not understand the impact of this (I don't know much about BGP,
>>> the
>>> > mining protocol nor anything else, really), but I thought it might be
>>> worth
>>> > putting it up here.
>>>
>>> This is old news; both BFGMiner and Eloipool were hardened against it a
>>> long
>>> time ago (although no Bitcoin pools have deployed it so far). I'm not
>>> aware of
>>> any actual case of it being used against Bitcoin, though - the target has
>>> always been scamcoins.
>>>
>>>
>>> ------------------------------------------------------------------------------
>>> Infragistics Professional
>>> Build stunning WinForms apps today!
>>> Reboot your WinForms applications with our WinForms controls.
>>> Build a bridge from your legacy apps to the future.
>>>
>>> http://pubads.g.doubleclick.net/gampad/clk?id=153845071&iu=/4140/ostg.clktrk
>>> _______________________________________________
>>> Bitcoin-development mailing list
>>> Bitcoin-development at lists.sourceforge.net
>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>>
>>
>>
>>
>> ------------------------------------------------------------------------------
>> Want fast and easy access to all the code in your enterprise? Index and
>> search up to 200,000 lines of code with a free copy of Black Duck
>> Code Sight - the same software that powers the world's largest code
>> search on Ohloh, the Black Duck Open Hub! Try it now.
>> http://p.sf.net/sfu/bds
>>
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>
>>
>
>
> ------------------------------------------------------------------------------
> Want fast and easy access to all the code in your enterprise? Index and
> search up to 200,000 lines of code with a free copy of Black Duck
> Code Sight - the same software that powers the world's largest code
> search on Ohloh, the Black Duck Open Hub! Try it now.
> http://p.sf.net/sfu/bds
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140808/b550abc2/attachment.html>

From slush at centrum.cz  Fri Aug  8 02:22:42 2014
From: slush at centrum.cz (slush)
Date: Fri, 8 Aug 2014 04:22:42 +0200
Subject: [Bitcoin-development] Miners MiTM
In-Reply-To: <CAPS+U99pnqrGiYb-1MMf_GjR2eCiwaX3MvDHX3kGjepEf0=4nQ@mail.gmail.com>
References: <CAPS+U9-ze_-gcYh1WNVJ5h8AZ8owoQX=8OUgNcKnaxgvjxZATA@mail.gmail.com>
	<201408072345.45363.luke@dashjr.org>
	<CAJna-HjzMO68KSXYG++X-8vzQCLurkrAAhfrVo9-AbaoYdqZhw@mail.gmail.com>
	<CAH99vakZLWe_auKb0iuKY0EJn2wWT13bThY-y5Y5O0u+AWRj3g@mail.gmail.com>
	<CAPS+U99pnqrGiYb-1MMf_GjR2eCiwaX3MvDHX3kGjepEf0=4nQ@mail.gmail.com>
Message-ID: <CAJna-HiGtOt5x4gw7Ea8XP1zQM32H9PmyQOuu7ekNfN4E7BCfA@mail.gmail.com>

Although 140 BTC sounds scary, actually it was very minor issue and most of
miners aren't even aware about it.

TLS would probably make the attack harder, that's correct. However if
somebody controls ISP routers, then MITM with TLS is harder, yet possible.

slush


On Fri, Aug 8, 2014 at 3:07 AM, Pedro Worcel <pedro at worcel.com> wrote:

>
> Seems to me that it would correctly mitigate the attack mentioned in the
> wired article. I am surprised that miners are not worried about losing
> their profits, I would personally be quite annoyed.
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140808/d73a8281/attachment.html>

From jgarzik at bitpay.com  Fri Aug  8 03:18:47 2014
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Thu, 7 Aug 2014 23:18:47 -0400
Subject: [Bitcoin-development] Miners MiTM
In-Reply-To: <CAJna-HjzMO68KSXYG++X-8vzQCLurkrAAhfrVo9-AbaoYdqZhw@mail.gmail.com>
References: <CAPS+U9-ze_-gcYh1WNVJ5h8AZ8owoQX=8OUgNcKnaxgvjxZATA@mail.gmail.com>
	<201408072345.45363.luke@dashjr.org>
	<CAJna-HjzMO68KSXYG++X-8vzQCLurkrAAhfrVo9-AbaoYdqZhw@mail.gmail.com>
Message-ID: <CAJHLa0M3QOm5kL0Kit-DPeM9ftmuKcTZvr5kbsmyK8jtF7NeRQ@mail.gmail.com>

You don't necessarily need the heavy weight of SSL.

You only need digitally signed envelopes between miner and pool[1].

[1] Unless the pool is royally stupid and will somehow credit miner B, if
miner B provides to the pool a copy of miner A's work.



On Thu, Aug 7, 2014 at 8:29 PM, slush <slush at centrum.cz> wrote:

> AFAIK the only protection is SSL + certificate validation on client side.
> However certificate revocation and updates in miners are pain in the ass,
> that's why majority of pools (mine including) don't want to play with
> that...
>
> slush
>
>
> On Fri, Aug 8, 2014 at 1:45 AM, Luke Dashjr <luke at dashjr.org> wrote:
>
>> On Thursday, August 07, 2014 11:02:21 PM Pedro Worcel wrote:
>> > Hi there,
>> >
>> > I was wondering if you guys have come across this article:
>> >
>> > http://www.wired.com/2014/08/isp-bitcoin-theft/
>> >
>> > The TL;DR is that somebody is abusing the BGP protocol to be in a
>> position
>> > where they can intercept the miner traffic. The concerning point is that
>> > they seem to be having some degree of success in their endeavour and
>> > earning profits from it.
>> >
>> > I do not understand the impact of this (I don't know much about BGP, the
>> > mining protocol nor anything else, really), but I thought it might be
>> worth
>> > putting it up here.
>>
>> This is old news; both BFGMiner and Eloipool were hardened against it a
>> long
>> time ago (although no Bitcoin pools have deployed it so far). I'm not
>> aware of
>> any actual case of it being used against Bitcoin, though - the target has
>> always been scamcoins.
>>
>>
>> ------------------------------------------------------------------------------
>> Infragistics Professional
>> Build stunning WinForms apps today!
>> Reboot your WinForms applications with our WinForms controls.
>> Build a bridge from your legacy apps to the future.
>>
>> http://pubads.g.doubleclick.net/gampad/clk?id=153845071&iu=/4140/ostg.clktrk
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>
>
>
>
> ------------------------------------------------------------------------------
> Want fast and easy access to all the code in your enterprise? Index and
> search up to 200,000 lines of code with a free copy of Black Duck
> Code Sight - the same software that powers the world's largest code
> search on Ohloh, the Black Duck Open Hub! Try it now.
> http://p.sf.net/sfu/bds
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>


-- 
Jeff Garzik
Bitcoin core developer and open source evangelist
BitPay, Inc.      https://bitpay.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140807/a8c6de00/attachment.html>

From jgarzik at bitpay.com  Fri Aug  8 03:38:44 2014
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Thu, 7 Aug 2014 23:38:44 -0400
Subject: [Bitcoin-development] NODE_EXT_SERVICES and advertising related
	services
Message-ID: <CAJHLa0Ok6s5xQcMSeLa69adLBXEaicuXqcg45eZrwYtVFbx-dA@mail.gmail.com>

Link: https://github.com/bitcoin/bitcoin/pull/4657

It is not necessary to build all functionality into bitcoind, to form
a decentralized network. BitPay's insight open source block explorer
API project requires, and runs on top of, bitcoind. Therefore, at the
same IP address as bitcoind, other services are made available to the
public (scriptPubkey queries, other added-value queries). This results
in a decentralized network of "anyone running a full node and an
insight server", as a subset of the whole P2P net.  One then does not
need to trust BitPay's insight server, but may query any number of
insight servers from multiple operators, and survey the results.

Obviously, we want to build this in a generic, vendor-neutral way.  As
such, NODE_EXT_SERVICES is advertised via the "addr" P2P message.
Nodes that recognize the NODE_EXT_SERVICES bit may connect to that
node, query a services list via "getextsrv" P2P message, and then take
further action based on the results.  The results are quite
straightforward:

service name, service port (or -1 if undefined), list of string
key/value attribs

Services may only advertise added services if and only if the external
services are at the same IP address that is being advertised.

This is not a fully baked proposal by any means, but more of a trial
balloon to get discussion moving.

There is no need to implement all services inside bitcoind...

-- 
Jeff Garzik
Bitcoin core developer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From mike at plan99.net  Fri Aug  8 09:42:52 2014
From: mike at plan99.net (Mike Hearn)
Date: Fri, 8 Aug 2014 11:42:52 +0200
Subject: [Bitcoin-development] Miners MiTM
In-Reply-To: <CAJna-HjzMO68KSXYG++X-8vzQCLurkrAAhfrVo9-AbaoYdqZhw@mail.gmail.com>
References: <CAPS+U9-ze_-gcYh1WNVJ5h8AZ8owoQX=8OUgNcKnaxgvjxZATA@mail.gmail.com>
	<201408072345.45363.luke@dashjr.org>
	<CAJna-HjzMO68KSXYG++X-8vzQCLurkrAAhfrVo9-AbaoYdqZhw@mail.gmail.com>
Message-ID: <CANEZrP0fsojCdKUe0Yx6POJesyTbq4f41MPzFfhKWerFn0UJGw@mail.gmail.com>

>
> AFAIK the only protection is SSL + certificate validation on client side.
> However certificate revocation and updates in miners are pain in the ass,
> that's why majority of pools (mine including) don't want to play with
> that...
>

Why would miners need updates? If they implement the standard SSL
infrastructure you can change certificates and keys without needing to
update miners.

Besides, when it comes to financial services SSL is essential, I'm kind of
surprised it wasn't already used everywhere. I wouldn't use an online bank
that didn't support SSL, I would see it as a a sign of serious problems.
Heck I wouldn't even use webmail that didn't support SSL these days.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140808/2df06b86/attachment.html>

From mike at plan99.net  Fri Aug  8 09:45:19 2014
From: mike at plan99.net (Mike Hearn)
Date: Fri, 8 Aug 2014 11:45:19 +0200
Subject: [Bitcoin-development] NODE_EXT_SERVICES and advertising related
	services
In-Reply-To: <CAJHLa0Ok6s5xQcMSeLa69adLBXEaicuXqcg45eZrwYtVFbx-dA@mail.gmail.com>
References: <CAJHLa0Ok6s5xQcMSeLa69adLBXEaicuXqcg45eZrwYtVFbx-dA@mail.gmail.com>
Message-ID: <CANEZrP2wYcxJhxRRa86Nm9ENtK2SA5VNG-L7f5pHb_W=Ajcj5Q@mail.gmail.com>

Given that we're not running out of service bits and service bits mean you
don't have to try connecting to every node to find out what services it
supports, why not keep using the existing extension mechanism until we
start running out of bits?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140808/905c2eff/attachment.html>

From mike at plan99.net  Fri Aug  8 09:53:24 2014
From: mike at plan99.net (Mike Hearn)
Date: Fri, 8 Aug 2014 11:53:24 +0200
Subject: [Bitcoin-development] Miners MiTM
In-Reply-To: <201408080101.16453.luke@dashjr.org>
References: <CAPS+U9-ze_-gcYh1WNVJ5h8AZ8owoQX=8OUgNcKnaxgvjxZATA@mail.gmail.com>
	<201408072345.45363.luke@dashjr.org>
	<CAJna-HjzMO68KSXYG++X-8vzQCLurkrAAhfrVo9-AbaoYdqZhw@mail.gmail.com>
	<201408080101.16453.luke@dashjr.org>
Message-ID: <CANEZrP00kRtNxtG9OVOmQLSTZ-MSHSuCe1PniM6v1pnhzz5Jog@mail.gmail.com>

>
> Certificate validation isn't needed unless the attacker can do a direct
> MITM
> at connection time, which is a lot harder to maintain than injecting a
> client.reconnect.
>

Surely the TCP connection will be reset once the route reconfiguration is
completed, either by the MITM server or by the client TCP stack when it
discovers the server doesn't know about the connection anymore?

TLS without cert validation defeats the point, you can still be connected
to a MITM at any point by anyone who can simply interrupt or corrupt the
stream, forcing a reconnect.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140808/e7ec4558/attachment.html>

From laanwj at gmail.com  Fri Aug  8 09:56:24 2014
From: laanwj at gmail.com (Wladimir)
Date: Fri, 8 Aug 2014 11:56:24 +0200
Subject: [Bitcoin-development] NODE_EXT_SERVICES and advertising related
	services
In-Reply-To: <CANEZrP2wYcxJhxRRa86Nm9ENtK2SA5VNG-L7f5pHb_W=Ajcj5Q@mail.gmail.com>
References: <CAJHLa0Ok6s5xQcMSeLa69adLBXEaicuXqcg45eZrwYtVFbx-dA@mail.gmail.com>
	<CANEZrP2wYcxJhxRRa86Nm9ENtK2SA5VNG-L7f5pHb_W=Ajcj5Q@mail.gmail.com>
Message-ID: <CA+s+GJD+9qpwFcVfHOCCsFYjmk7A0V=65vG-7jJ6D7jj4Pi_7g@mail.gmail.com>

On Fri, Aug 8, 2014 at 11:45 AM, Mike Hearn <mike at plan99.net> wrote:
> Given that we're not running out of service bits and service bits mean you
> don't have to try connecting to every node to find out what services it
> supports, why not keep using the existing extension mechanism until we start
> running out of bits?

He wants to use it to advertise services that are not part of the P2P
protocol itself, but run on a different port. Reserving services bits
for those is not acceptable.

All the NODE_EXT_SERVICES bit does is advertise the P2P "getextsrv"
command to get information, such as the port to connect on, for the
auxilary service.

Wladimir



From mike at plan99.net  Fri Aug  8 10:01:03 2014
From: mike at plan99.net (Mike Hearn)
Date: Fri, 8 Aug 2014 12:01:03 +0200
Subject: [Bitcoin-development] NODE_EXT_SERVICES and advertising related
	services
In-Reply-To: <CA+s+GJD+9qpwFcVfHOCCsFYjmk7A0V=65vG-7jJ6D7jj4Pi_7g@mail.gmail.com>
References: <CAJHLa0Ok6s5xQcMSeLa69adLBXEaicuXqcg45eZrwYtVFbx-dA@mail.gmail.com>
	<CANEZrP2wYcxJhxRRa86Nm9ENtK2SA5VNG-L7f5pHb_W=Ajcj5Q@mail.gmail.com>
	<CA+s+GJD+9qpwFcVfHOCCsFYjmk7A0V=65vG-7jJ6D7jj4Pi_7g@mail.gmail.com>
Message-ID: <CANEZrP245242JYDBBo72XVmKgEBO96QPjcJi8Jy2Dm_r90n1Bw@mail.gmail.com>

>
> He wants to use it to advertise services that are not part of the P2P
> protocol itself, but run on a different port. Reserving services bits
> for those is not acceptable.
>

Why not? Does the port matter much?


> All the NODE_EXT_SERVICES bit does is advertise the P2P "getextsrv"
> command to get information, such as the port to connect on, for the
> auxilary service.


Yes, I understand what it does, but from a clients perspective what it
means is if someone implements a useful service and exposes it this way you
have to seek out, connect to and interrogate every possible server even if
(say) only a handful actually provide it. The most there's >1 "ext service"
the protocol becomes extremely slow, vs service bits where you can download
addr packets and see which IPs are advertising which services.

I don't see much reason to take a potentially large performance hit when
there's a service advertisement mechanism that already works. What's wrong
with the existing mechanism exactly?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140808/82a3c8bf/attachment.html>

From laanwj at gmail.com  Fri Aug  8 10:15:29 2014
From: laanwj at gmail.com (Wladimir)
Date: Fri, 8 Aug 2014 12:15:29 +0200
Subject: [Bitcoin-development] NODE_EXT_SERVICES and advertising related
	services
In-Reply-To: <CANEZrP245242JYDBBo72XVmKgEBO96QPjcJi8Jy2Dm_r90n1Bw@mail.gmail.com>
References: <CAJHLa0Ok6s5xQcMSeLa69adLBXEaicuXqcg45eZrwYtVFbx-dA@mail.gmail.com>
	<CANEZrP2wYcxJhxRRa86Nm9ENtK2SA5VNG-L7f5pHb_W=Ajcj5Q@mail.gmail.com>
	<CA+s+GJD+9qpwFcVfHOCCsFYjmk7A0V=65vG-7jJ6D7jj4Pi_7g@mail.gmail.com>
	<CANEZrP245242JYDBBo72XVmKgEBO96QPjcJi8Jy2Dm_r90n1Bw@mail.gmail.com>
Message-ID: <CA+s+GJBUgi7XF4nyVEXqpZi4XYO86vTXMs40gzfu9tCdmp59tw@mail.gmail.com>

On Fri, Aug 8, 2014 at 12:01 PM, Mike Hearn <mike at plan99.net> wrote:
>> He wants to use it to advertise services that are not part of the P2P
>> protocol itself, but run on a different port. Reserving services bits
>> for those is not acceptable.
>
>
> Why not? Does the port matter much?

Yes. The services bits are for advertising services on the P2P
network. That's not open for discussion.

Wladimir



From laanwj at gmail.com  Fri Aug  8 10:26:25 2014
From: laanwj at gmail.com (Wladimir)
Date: Fri, 8 Aug 2014 12:26:25 +0200
Subject: [Bitcoin-development] NODE_EXT_SERVICES and advertising related
	services
In-Reply-To: <CA+s+GJBUgi7XF4nyVEXqpZi4XYO86vTXMs40gzfu9tCdmp59tw@mail.gmail.com>
References: <CAJHLa0Ok6s5xQcMSeLa69adLBXEaicuXqcg45eZrwYtVFbx-dA@mail.gmail.com>
	<CANEZrP2wYcxJhxRRa86Nm9ENtK2SA5VNG-L7f5pHb_W=Ajcj5Q@mail.gmail.com>
	<CA+s+GJD+9qpwFcVfHOCCsFYjmk7A0V=65vG-7jJ6D7jj4Pi_7g@mail.gmail.com>
	<CANEZrP245242JYDBBo72XVmKgEBO96QPjcJi8Jy2Dm_r90n1Bw@mail.gmail.com>
	<CA+s+GJBUgi7XF4nyVEXqpZi4XYO86vTXMs40gzfu9tCdmp59tw@mail.gmail.com>
Message-ID: <CA+s+GJDjSR3272LsSax-2V--x4_taoqrTMiDoXSEvuiS5-MBKw@mail.gmail.com>

On Fri, Aug 8, 2014 at 12:15 PM, Wladimir <laanwj at gmail.com> wrote:
> On Fri, Aug 8, 2014 at 12:01 PM, Mike Hearn <mike at plan99.net> wrote:
>>> He wants to use it to advertise services that are not part of the P2P
>>> protocol itself, but run on a different port. Reserving services bits
>>> for those is not acceptable.
>>
>>
>> Why not? Does the port matter much?
>
> Yes. The services bits are for advertising services on the P2P
> network. That's not open for discussion.

It also wouldn't work. A bit is not enough to find an external service
except in the naive case where the advertised service would have a
fixed port. Not even bitcoind has a fixed port. So there needs to be a
mechanism to find how to connect to the 'external service'. This is
provided by the proposed extension.

It would in principle be possible to advertise an extra service bit
*in addition to* this one, to make it easier to find through the addr
mechanism. But it  would be confusing and IMO an abuse of P2P service
bits.

Wladimir



From decker.christian at gmail.com  Fri Aug  8 10:41:38 2014
From: decker.christian at gmail.com (Christian Decker)
Date: Fri, 8 Aug 2014 11:41:38 +0100
Subject: [Bitcoin-development] NODE_EXT_SERVICES and advertising related
	services
In-Reply-To: <CA+s+GJDjSR3272LsSax-2V--x4_taoqrTMiDoXSEvuiS5-MBKw@mail.gmail.com>
References: <CAJHLa0Ok6s5xQcMSeLa69adLBXEaicuXqcg45eZrwYtVFbx-dA@mail.gmail.com>
	<CANEZrP2wYcxJhxRRa86Nm9ENtK2SA5VNG-L7f5pHb_W=Ajcj5Q@mail.gmail.com>
	<CA+s+GJD+9qpwFcVfHOCCsFYjmk7A0V=65vG-7jJ6D7jj4Pi_7g@mail.gmail.com>
	<CANEZrP245242JYDBBo72XVmKgEBO96QPjcJi8Jy2Dm_r90n1Bw@mail.gmail.com>
	<CA+s+GJBUgi7XF4nyVEXqpZi4XYO86vTXMs40gzfu9tCdmp59tw@mail.gmail.com>
	<CA+s+GJDjSR3272LsSax-2V--x4_taoqrTMiDoXSEvuiS5-MBKw@mail.gmail.com>
Message-ID: <CALxbBHXPCpZ9npacPOgU2q6=xTpcOVi2fJ+C8v93U2Oyuorrgw@mail.gmail.com>

I wonder whether we actually want to support this kind of advertisement in
the P2P protocol. We have a working mechanism for protocol extensions in
the P2P network (service flags) so this is obviously only for services that
are not P2P extensions, so why have them in there at all?

I'd argue that a parallel network, external to Bitcoin, could take over the
task of advertising external services.

Regards,
Chris

--
Christian Decker


On Fri, Aug 8, 2014 at 11:26 AM, Wladimir <laanwj at gmail.com> wrote:

> On Fri, Aug 8, 2014 at 12:15 PM, Wladimir <laanwj at gmail.com> wrote:
> > On Fri, Aug 8, 2014 at 12:01 PM, Mike Hearn <mike at plan99.net> wrote:
> >>> He wants to use it to advertise services that are not part of the P2P
> >>> protocol itself, but run on a different port. Reserving services bits
> >>> for those is not acceptable.
> >>
> >>
> >> Why not? Does the port matter much?
> >
> > Yes. The services bits are for advertising services on the P2P
> > network. That's not open for discussion.
>
> It also wouldn't work. A bit is not enough to find an external service
> except in the naive case where the advertised service would have a
> fixed port. Not even bitcoind has a fixed port. So there needs to be a
> mechanism to find how to connect to the 'external service'. This is
> provided by the proposed extension.
>
> It would in principle be possible to advertise an extra service bit
> *in addition to* this one, to make it easier to find through the addr
> mechanism. But it  would be confusing and IMO an abuse of P2P service
> bits.
>
> Wladimir
>
>
> ------------------------------------------------------------------------------
> Want fast and easy access to all the code in your enterprise? Index and
> search up to 200,000 lines of code with a free copy of Black Duck
> Code Sight - the same software that powers the world's largest code
> search on Ohloh, the Black Duck Open Hub! Try it now.
> http://p.sf.net/sfu/bds
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140808/b138f7ce/attachment.html>

From jgarzik at bitpay.com  Fri Aug  8 11:22:46 2014
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Fri, 8 Aug 2014 07:22:46 -0400
Subject: [Bitcoin-development] NODE_EXT_SERVICES and advertising related
	services
In-Reply-To: <CALxbBHXPCpZ9npacPOgU2q6=xTpcOVi2fJ+C8v93U2Oyuorrgw@mail.gmail.com>
References: <CAJHLa0Ok6s5xQcMSeLa69adLBXEaicuXqcg45eZrwYtVFbx-dA@mail.gmail.com>
	<CANEZrP2wYcxJhxRRa86Nm9ENtK2SA5VNG-L7f5pHb_W=Ajcj5Q@mail.gmail.com>
	<CA+s+GJD+9qpwFcVfHOCCsFYjmk7A0V=65vG-7jJ6D7jj4Pi_7g@mail.gmail.com>
	<CANEZrP245242JYDBBo72XVmKgEBO96QPjcJi8Jy2Dm_r90n1Bw@mail.gmail.com>
	<CA+s+GJBUgi7XF4nyVEXqpZi4XYO86vTXMs40gzfu9tCdmp59tw@mail.gmail.com>
	<CA+s+GJDjSR3272LsSax-2V--x4_taoqrTMiDoXSEvuiS5-MBKw@mail.gmail.com>
	<CALxbBHXPCpZ9npacPOgU2q6=xTpcOVi2fJ+C8v93U2Oyuorrgw@mail.gmail.com>
Message-ID: <CAJHLa0NwzLcGcKLyJVFhXoc49CRnSaqYnSbi=Z8FFXWQir0e9A@mail.gmail.com>

This is not a generic "I run a website!" advertisement feature.
NODE_EXT_SERVICES is tightly focused on services that exist
if-any-only-if a P2P bitcoin node (bitcoind) is reachable via the same
advertised address.

You may usefully create overlay networks of specialized services.



On Fri, Aug 8, 2014 at 6:41 AM, Christian Decker
<decker.christian at gmail.com> wrote:
> I wonder whether we actually want to support this kind of advertisement in
> the P2P protocol. We have a working mechanism for protocol extensions in the
> P2P network (service flags) so this is obviously only for services that are
> not P2P extensions, so why have them in there at all?
>
> I'd argue that a parallel network, external to Bitcoin, could take over the
> task of advertising external services.
>
> Regards,
> Chris
>
> --
> Christian Decker
>
>
> On Fri, Aug 8, 2014 at 11:26 AM, Wladimir <laanwj at gmail.com> wrote:
>>
>> On Fri, Aug 8, 2014 at 12:15 PM, Wladimir <laanwj at gmail.com> wrote:
>> > On Fri, Aug 8, 2014 at 12:01 PM, Mike Hearn <mike at plan99.net> wrote:
>> >>> He wants to use it to advertise services that are not part of the P2P
>> >>> protocol itself, but run on a different port. Reserving services bits
>> >>> for those is not acceptable.
>> >>
>> >>
>> >> Why not? Does the port matter much?
>> >
>> > Yes. The services bits are for advertising services on the P2P
>> > network. That's not open for discussion.
>>
>> It also wouldn't work. A bit is not enough to find an external service
>> except in the naive case where the advertised service would have a
>> fixed port. Not even bitcoind has a fixed port. So there needs to be a
>> mechanism to find how to connect to the 'external service'. This is
>> provided by the proposed extension.
>>
>> It would in principle be possible to advertise an extra service bit
>> *in addition to* this one, to make it easier to find through the addr
>> mechanism. But it  would be confusing and IMO an abuse of P2P service
>> bits.
>>
>> Wladimir
>>
>>
>> ------------------------------------------------------------------------------
>> Want fast and easy access to all the code in your enterprise? Index and
>> search up to 200,000 lines of code with a free copy of Black Duck
>> Code Sight - the same software that powers the world's largest code
>> search on Ohloh, the Black Duck Open Hub! Try it now.
>> http://p.sf.net/sfu/bds
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
>
> ------------------------------------------------------------------------------
> Want fast and easy access to all the code in your enterprise? Index and
> search up to 200,000 lines of code with a free copy of Black Duck
> Code Sight - the same software that powers the world's largest code
> search on Ohloh, the Black Duck Open Hub! Try it now.
> http://p.sf.net/sfu/bds
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>



-- 
Jeff Garzik
Bitcoin core developer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From jgarzik at bitpay.com  Fri Aug  8 11:33:37 2014
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Fri, 8 Aug 2014 07:33:37 -0400
Subject: [Bitcoin-development] NODE_EXT_SERVICES and advertising related
	services
In-Reply-To: <CANEZrP245242JYDBBo72XVmKgEBO96QPjcJi8Jy2Dm_r90n1Bw@mail.gmail.com>
References: <CAJHLa0Ok6s5xQcMSeLa69adLBXEaicuXqcg45eZrwYtVFbx-dA@mail.gmail.com>
	<CANEZrP2wYcxJhxRRa86Nm9ENtK2SA5VNG-L7f5pHb_W=Ajcj5Q@mail.gmail.com>
	<CA+s+GJD+9qpwFcVfHOCCsFYjmk7A0V=65vG-7jJ6D7jj4Pi_7g@mail.gmail.com>
	<CANEZrP245242JYDBBo72XVmKgEBO96QPjcJi8Jy2Dm_r90n1Bw@mail.gmail.com>
Message-ID: <CAJHLa0N3xx1QZ==iSLYNsdgkBGoqN34+4eVtukkjn+3SrDhC7A@mail.gmail.com>

n Fri, Aug 8, 2014 at 6:01 AM, Mike Hearn <mike at plan99.net> wrote:
> What's wrong
> with the existing mechanism exactly?

It would be wrong to add NODE_INSIGHT, NODE_ELECTRUM_SERVER, etc. bits
even though you do have useful bitcoin-related APIs that exist on the
same system as bitcoind.

-- 
Jeff Garzik
Bitcoin core developer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From mike at plan99.net  Fri Aug  8 11:38:33 2014
From: mike at plan99.net (Mike Hearn)
Date: Fri, 8 Aug 2014 13:38:33 +0200
Subject: [Bitcoin-development] NODE_EXT_SERVICES and advertising related
	services
In-Reply-To: <CAJHLa0N3xx1QZ==iSLYNsdgkBGoqN34+4eVtukkjn+3SrDhC7A@mail.gmail.com>
References: <CAJHLa0Ok6s5xQcMSeLa69adLBXEaicuXqcg45eZrwYtVFbx-dA@mail.gmail.com>
	<CANEZrP2wYcxJhxRRa86Nm9ENtK2SA5VNG-L7f5pHb_W=Ajcj5Q@mail.gmail.com>
	<CA+s+GJD+9qpwFcVfHOCCsFYjmk7A0V=65vG-7jJ6D7jj4Pi_7g@mail.gmail.com>
	<CANEZrP245242JYDBBo72XVmKgEBO96QPjcJi8Jy2Dm_r90n1Bw@mail.gmail.com>
	<CAJHLa0N3xx1QZ==iSLYNsdgkBGoqN34+4eVtukkjn+3SrDhC7A@mail.gmail.com>
Message-ID: <CANEZrP1mhSodC-ZvkuVKAgHO44bM7QX=RivRDhnDeHOKr8PXqQ@mail.gmail.com>

I'd like to see a mechanism whereby a Bitcoin node can delegate processing
of unknown messages to an external process, so a P2P node can be composed
out of separated programs, but such a service would be indistinguishable at
the network layer from one provided by Bitcoin Core itself, so a service
bit would be appropriate for those.

For instance, Insight could then offer a command set that extends the p2p
protocol for doing block explorer type queries. There's no need for the
protocol to be Insight specific.  You'd just have NODE_INDEXED_CHAIN
instead.

Having the service run on some arbitrary other port isn't particularly
useful, IMO - the biggest win from having some separated protocol would be
the ability to use TLS, but if you're connecting to an IP address rather
than a domain name (like if you discovered via service bits/getextsrv) this
doesn't add much. It boils down to minor syntax differences in how numbers
are laid out in a grid. And the performance issue remains.

Additionally, nothing in this spec requires that a local bitcoind be
running. What stops someone from advertising just NODE_EXTENDED_SERVICES
and nothing else? I don't think a generic service advertisement mechanism
is a bad thing to have, by the way, just pointing out that nothing makes
this more focused than service bits already are.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140808/6e47949e/attachment.html>

From laanwj at gmail.com  Fri Aug  8 11:59:34 2014
From: laanwj at gmail.com (Wladimir)
Date: Fri, 8 Aug 2014 13:59:34 +0200
Subject: [Bitcoin-development] NODE_EXT_SERVICES and advertising related
	services
In-Reply-To: <CANEZrP1mhSodC-ZvkuVKAgHO44bM7QX=RivRDhnDeHOKr8PXqQ@mail.gmail.com>
References: <CAJHLa0Ok6s5xQcMSeLa69adLBXEaicuXqcg45eZrwYtVFbx-dA@mail.gmail.com>
	<CANEZrP2wYcxJhxRRa86Nm9ENtK2SA5VNG-L7f5pHb_W=Ajcj5Q@mail.gmail.com>
	<CA+s+GJD+9qpwFcVfHOCCsFYjmk7A0V=65vG-7jJ6D7jj4Pi_7g@mail.gmail.com>
	<CANEZrP245242JYDBBo72XVmKgEBO96QPjcJi8Jy2Dm_r90n1Bw@mail.gmail.com>
	<CAJHLa0N3xx1QZ==iSLYNsdgkBGoqN34+4eVtukkjn+3SrDhC7A@mail.gmail.com>
	<CANEZrP1mhSodC-ZvkuVKAgHO44bM7QX=RivRDhnDeHOKr8PXqQ@mail.gmail.com>
Message-ID: <CA+s+GJCbCRQP_w3g-0qtA6K8qrf6ywNfJ9d1367gSTfgCwgU2Q@mail.gmail.com>

On Fri, Aug 8, 2014 at 1:38 PM, Mike Hearn <mike at plan99.net> wrote:
> I'd like to see a mechanism whereby a Bitcoin node can delegate processing
> of unknown messages to an external process, so a P2P node can be composed
> out of separated programs, but such a service would be indistinguishable at
> the network layer from one provided by Bitcoin Core itself, so a service bit
> would be appropriate for those.

This diverges from the topic but seems like a good idea to me in
general, not so much as replacement for jgarzik's proposal.

Something like `getutxos` or this proposal could be implemented as an
external application or script, instead of having to integrate
everything into bitcoind.

Bitcoind would need a local interprocess message bus for that, and
would need to act as router for messages from/to the P2P network.
ZeroMQ seems like a good choice for that. That's not completely crazy
as there are already plans to add zeromq as an optional dependency for
notifications [1].

[1] https://github.com/bitcoin/bitcoin/pull/4594

Wladimir



From jgarzik at bitpay.com  Fri Aug  8 12:04:16 2014
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Fri, 8 Aug 2014 08:04:16 -0400
Subject: [Bitcoin-development] NODE_EXT_SERVICES and advertising related
	services
In-Reply-To: <CANEZrP1mhSodC-ZvkuVKAgHO44bM7QX=RivRDhnDeHOKr8PXqQ@mail.gmail.com>
References: <CAJHLa0Ok6s5xQcMSeLa69adLBXEaicuXqcg45eZrwYtVFbx-dA@mail.gmail.com>
	<CANEZrP2wYcxJhxRRa86Nm9ENtK2SA5VNG-L7f5pHb_W=Ajcj5Q@mail.gmail.com>
	<CA+s+GJD+9qpwFcVfHOCCsFYjmk7A0V=65vG-7jJ6D7jj4Pi_7g@mail.gmail.com>
	<CANEZrP245242JYDBBo72XVmKgEBO96QPjcJi8Jy2Dm_r90n1Bw@mail.gmail.com>
	<CAJHLa0N3xx1QZ==iSLYNsdgkBGoqN34+4eVtukkjn+3SrDhC7A@mail.gmail.com>
	<CANEZrP1mhSodC-ZvkuVKAgHO44bM7QX=RivRDhnDeHOKr8PXqQ@mail.gmail.com>
Message-ID: <CAJHLa0MOn5XxAFzqDPgvM=jrr8PRx=Lkatpw30xZqiOQDaK52Q@mail.gmail.com>

Yes, that is the one change I am still pondering:  adding categories
(classes), rather than one single bit.

Thus the modified proposal would become:
- eliminate NODE_EXT_SERVICES
- for a class of services, such as insight w/ added blockchain indexes
& queries, add NODE_EXT_INDEXED_CHAIN
- for another class of services, add NODE_EXT_xxxx
- Re-use the same P2P message and structure (CExtService,
"extservices" P2P message) for all NODE_EXT_xxx classes.

This preserves vendor/API neutrality, while saving effort on the part
of clients seeking these services.  The point about service discovery
necessitating some node walking is valid, which makes categories
somewhat attractive.

"Having the service run on some arbitrary other port isn't
particularly useful, IMO" --  A statement disproved by reality.
Multi-port is the method most commonly found in the field today.
Logically so, because it is the easiest to deploy:

* The most likely setup TODAY is multi-daemon: bitcoind + your own software
* The most likely configuration for multi-daemon is self-evidently
multi-port (versus two services appearing on the same port)

It is quite useful, and indeed, the most likely setup to be found in operation.







On Fri, Aug 8, 2014 at 7:38 AM, Mike Hearn <mike at plan99.net> wrote:
> I'd like to see a mechanism whereby a Bitcoin node can delegate processing
> of unknown messages to an external process, so a P2P node can be composed
> out of separated programs, but such a service would be indistinguishable at
> the network layer from one provided by Bitcoin Core itself, so a service bit
> would be appropriate for those.
>
> For instance, Insight could then offer a command set that extends the p2p
> protocol for doing block explorer type queries. There's no need for the
> protocol to be Insight specific.  You'd just have NODE_INDEXED_CHAIN
> instead.
>
> Having the service run on some arbitrary other port isn't particularly
> useful, IMO - the biggest win from having some separated protocol would be
> the ability to use TLS, but if you're connecting to an IP address rather
> than a domain name (like if you discovered via service bits/getextsrv) this
> doesn't add much. It boils down to minor syntax differences in how numbers
> are laid out in a grid. And the performance issue remains.
>
> Additionally, nothing in this spec requires that a local bitcoind be
> running. What stops someone from advertising just NODE_EXTENDED_SERVICES and
> nothing else? I don't think a generic service advertisement mechanism is a
> bad thing to have, by the way, just pointing out that nothing makes this
> more focused than service bits already are.



-- 
Jeff Garzik
Bitcoin core developer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From jgarzik at bitpay.com  Fri Aug  8 12:06:16 2014
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Fri, 8 Aug 2014 08:06:16 -0400
Subject: [Bitcoin-development] NODE_EXT_SERVICES and advertising related
	services
In-Reply-To: <CA+s+GJCbCRQP_w3g-0qtA6K8qrf6ywNfJ9d1367gSTfgCwgU2Q@mail.gmail.com>
References: <CAJHLa0Ok6s5xQcMSeLa69adLBXEaicuXqcg45eZrwYtVFbx-dA@mail.gmail.com>
	<CANEZrP2wYcxJhxRRa86Nm9ENtK2SA5VNG-L7f5pHb_W=Ajcj5Q@mail.gmail.com>
	<CA+s+GJD+9qpwFcVfHOCCsFYjmk7A0V=65vG-7jJ6D7jj4Pi_7g@mail.gmail.com>
	<CANEZrP245242JYDBBo72XVmKgEBO96QPjcJi8Jy2Dm_r90n1Bw@mail.gmail.com>
	<CAJHLa0N3xx1QZ==iSLYNsdgkBGoqN34+4eVtukkjn+3SrDhC7A@mail.gmail.com>
	<CANEZrP1mhSodC-ZvkuVKAgHO44bM7QX=RivRDhnDeHOKr8PXqQ@mail.gmail.com>
	<CA+s+GJCbCRQP_w3g-0qtA6K8qrf6ywNfJ9d1367gSTfgCwgU2Q@mail.gmail.com>
Message-ID: <CAJHLa0PQYOOXoniDJFvb4Cy=-0cbh5bxWrYQO72mCAo-zXBJnQ@mail.gmail.com>

On Fri, Aug 8, 2014 at 7:59 AM, Wladimir <laanwj at gmail.com> wrote:
> On Fri, Aug 8, 2014 at 1:38 PM, Mike Hearn <mike at plan99.net> wrote:
>> I'd like to see a mechanism whereby a Bitcoin node can delegate processing
>> of unknown messages to an external process, so a P2P node can be composed
>> out of separated programs, but such a service would be indistinguishable at
>> the network layer from one provided by Bitcoin Core itself, so a service bit
>> would be appropriate for those.
>
> This diverges from the topic but seems like a good idea to me in
> general, not so much as replacement for jgarzik's proposal.
>
> Something like `getutxos` or this proposal could be implemented as an
> external application or script, instead of having to integrate
> everything into bitcoind.

Seconded.  Command plug-ins and such seem like an idea worth exploring.

We don't need to shove everything into bitcoind.

-- 
Jeff Garzik
Bitcoin core developer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From mike at plan99.net  Fri Aug  8 12:11:25 2014
From: mike at plan99.net (Mike Hearn)
Date: Fri, 8 Aug 2014 14:11:25 +0200
Subject: [Bitcoin-development] NODE_EXT_SERVICES and advertising related
	services
In-Reply-To: <CA+s+GJCbCRQP_w3g-0qtA6K8qrf6ywNfJ9d1367gSTfgCwgU2Q@mail.gmail.com>
References: <CAJHLa0Ok6s5xQcMSeLa69adLBXEaicuXqcg45eZrwYtVFbx-dA@mail.gmail.com>
	<CANEZrP2wYcxJhxRRa86Nm9ENtK2SA5VNG-L7f5pHb_W=Ajcj5Q@mail.gmail.com>
	<CA+s+GJD+9qpwFcVfHOCCsFYjmk7A0V=65vG-7jJ6D7jj4Pi_7g@mail.gmail.com>
	<CANEZrP245242JYDBBo72XVmKgEBO96QPjcJi8Jy2Dm_r90n1Bw@mail.gmail.com>
	<CAJHLa0N3xx1QZ==iSLYNsdgkBGoqN34+4eVtukkjn+3SrDhC7A@mail.gmail.com>
	<CANEZrP1mhSodC-ZvkuVKAgHO44bM7QX=RivRDhnDeHOKr8PXqQ@mail.gmail.com>
	<CA+s+GJCbCRQP_w3g-0qtA6K8qrf6ywNfJ9d1367gSTfgCwgU2Q@mail.gmail.com>
Message-ID: <CANEZrP2UFMDJ+88MU=RTyU4FV_HCHwuHLmd5S9aK2AZ7DJ+j7g@mail.gmail.com>

>
> Something like `getutxos` or this proposal could be implemented as an
> external application or script, instead of having to integrate
> everything into bitcoind.
>

Right, although getutxos needs access to the UTXO set which bitcoind
already has. An external plugin would have to recalculate it from scratch
which seems redundant.

However there are many other useful services that could be added in such a
way, like -txindex or the nLockTime storage facility we talked about the
other day.


> Bitcoind would need a local interprocess message bus for that


Maybe, that feels like it could be overkill though. Probably just something
like

./bitcoind -servicecookie=<long random string> -allowextservices=127.0.0.1/8

and then any program can connect to bitcoind as normal, send "registersrv"
with the cookie and a list of command ids it's interested in, maybe a
service bit to set, and start receiving those messages wrapped in a new
structure that gives some kind of client ID (like IP address). So any
library that can do the basic P2P protocol could then be extended with not
much code to get a multiplexed stream of messages from different clients.

An additional standalone program can then bridge this mechanism to running
a shell command for particular messages, though given the history of shell
based exploits I'd feel safer with something that doesn't do that ....
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140808/bb208097/attachment.html>

From jgarzik at bitpay.com  Fri Aug  8 12:11:08 2014
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Fri, 8 Aug 2014 08:11:08 -0400
Subject: [Bitcoin-development] NODE_EXT_SERVICES and advertising related
	services
In-Reply-To: <CA+s+GJCbCRQP_w3g-0qtA6K8qrf6ywNfJ9d1367gSTfgCwgU2Q@mail.gmail.com>
References: <CAJHLa0Ok6s5xQcMSeLa69adLBXEaicuXqcg45eZrwYtVFbx-dA@mail.gmail.com>
	<CANEZrP2wYcxJhxRRa86Nm9ENtK2SA5VNG-L7f5pHb_W=Ajcj5Q@mail.gmail.com>
	<CA+s+GJD+9qpwFcVfHOCCsFYjmk7A0V=65vG-7jJ6D7jj4Pi_7g@mail.gmail.com>
	<CANEZrP245242JYDBBo72XVmKgEBO96QPjcJi8Jy2Dm_r90n1Bw@mail.gmail.com>
	<CAJHLa0N3xx1QZ==iSLYNsdgkBGoqN34+4eVtukkjn+3SrDhC7A@mail.gmail.com>
	<CANEZrP1mhSodC-ZvkuVKAgHO44bM7QX=RivRDhnDeHOKr8PXqQ@mail.gmail.com>
	<CA+s+GJCbCRQP_w3g-0qtA6K8qrf6ywNfJ9d1367gSTfgCwgU2Q@mail.gmail.com>
Message-ID: <CAJHLa0NQJCH_J6wOLHKyyG4au4WT7Dviz-xXc33XkZEaYCaBuQ@mail.gmail.com>

On Fri, Aug 8, 2014 at 7:59 AM, Wladimir <laanwj at gmail.com> wrote:
> Bitcoind would need a local interprocess message bus for that, and
> would need to act as router for messages from/to the P2P network.
> ZeroMQ seems like a good choice for that. That's not completely crazy
> as there are already plans to add zeromq as an optional dependency for
> notifications [1].

Generally agreed, though for ZMQ it is a bit different than a P2P service.

IMO, ZMQ really wants to be a plug-in that registers some internal
signals.  It wants to capture the precise points where a block was
accepted internally.  PR #4599 tries to lead by example:
https://github.com/bitcoin/bitcoin/pull/4599

A P2P service would be a slightly different sort of plug-in.

-- 
Jeff Garzik
Bitcoin core developer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From mike at plan99.net  Fri Aug  8 12:13:45 2014
From: mike at plan99.net (Mike Hearn)
Date: Fri, 8 Aug 2014 14:13:45 +0200
Subject: [Bitcoin-development] NODE_EXT_SERVICES and advertising related
	services
In-Reply-To: <CAJHLa0MOn5XxAFzqDPgvM=jrr8PRx=Lkatpw30xZqiOQDaK52Q@mail.gmail.com>
References: <CAJHLa0Ok6s5xQcMSeLa69adLBXEaicuXqcg45eZrwYtVFbx-dA@mail.gmail.com>
	<CANEZrP2wYcxJhxRRa86Nm9ENtK2SA5VNG-L7f5pHb_W=Ajcj5Q@mail.gmail.com>
	<CA+s+GJD+9qpwFcVfHOCCsFYjmk7A0V=65vG-7jJ6D7jj4Pi_7g@mail.gmail.com>
	<CANEZrP245242JYDBBo72XVmKgEBO96QPjcJi8Jy2Dm_r90n1Bw@mail.gmail.com>
	<CAJHLa0N3xx1QZ==iSLYNsdgkBGoqN34+4eVtukkjn+3SrDhC7A@mail.gmail.com>
	<CANEZrP1mhSodC-ZvkuVKAgHO44bM7QX=RivRDhnDeHOKr8PXqQ@mail.gmail.com>
	<CAJHLa0MOn5XxAFzqDPgvM=jrr8PRx=Lkatpw30xZqiOQDaK52Q@mail.gmail.com>
Message-ID: <CANEZrP3ij79gNxHCYbvhJ15=UQZmWPTuUng9aC-nFN6Z28riPw@mail.gmail.com>

>
> Yes, that is the one change I am still pondering:  adding categories
> (classes), rather than one single bit.
>

Sure, that makes more sense I think.

As a motivating use case, Bitcoin Wallet for Android currently has a
hard-coded block explorer (biteasy.com) which it uses to find UTXOs for a
given key. This is used for its "Sweep paper wallet" feature. It must work
this way because P2P nodes don't calculate such indexes.

If there was a way to do block index autodiscovery, that'd help us remove
this hard-coded block explorer and increase decentralisation. But because
it's a GUI app we don't want users to look at a spinner for more than a few
seconds, so a slow discovery process would make it unworkable. With
API-based categories of service bits we could implement such a scheme.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140808/8a4a778c/attachment.html>

From laanwj at gmail.com  Fri Aug  8 12:15:09 2014
From: laanwj at gmail.com (Wladimir)
Date: Fri, 8 Aug 2014 14:15:09 +0200
Subject: [Bitcoin-development] NODE_EXT_SERVICES and advertising related
	services
In-Reply-To: <CAJHLa0NQJCH_J6wOLHKyyG4au4WT7Dviz-xXc33XkZEaYCaBuQ@mail.gmail.com>
References: <CAJHLa0Ok6s5xQcMSeLa69adLBXEaicuXqcg45eZrwYtVFbx-dA@mail.gmail.com>
	<CANEZrP2wYcxJhxRRa86Nm9ENtK2SA5VNG-L7f5pHb_W=Ajcj5Q@mail.gmail.com>
	<CA+s+GJD+9qpwFcVfHOCCsFYjmk7A0V=65vG-7jJ6D7jj4Pi_7g@mail.gmail.com>
	<CANEZrP245242JYDBBo72XVmKgEBO96QPjcJi8Jy2Dm_r90n1Bw@mail.gmail.com>
	<CAJHLa0N3xx1QZ==iSLYNsdgkBGoqN34+4eVtukkjn+3SrDhC7A@mail.gmail.com>
	<CANEZrP1mhSodC-ZvkuVKAgHO44bM7QX=RivRDhnDeHOKr8PXqQ@mail.gmail.com>
	<CA+s+GJCbCRQP_w3g-0qtA6K8qrf6ywNfJ9d1367gSTfgCwgU2Q@mail.gmail.com>
	<CAJHLa0NQJCH_J6wOLHKyyG4au4WT7Dviz-xXc33XkZEaYCaBuQ@mail.gmail.com>
Message-ID: <CA+s+GJCdnHeSRWnmiBG+JHJDUwKRpKfaSDwu24kMp9WEQCNa1A@mail.gmail.com>

> Generally agreed, though for ZMQ it is a bit different than a P2P service.
>
> IMO, ZMQ really wants to be a plug-in that registers some internal
> signals.  It wants to capture the precise points where a block was
> accepted internally.  PR #4599 tries to lead by example:
> https://github.com/bitcoin/bitcoin/pull/4599
>
> A P2P service would be a slightly different sort of plug-in.

ZeroMQ is just a lightweight message routing system. It could just as
well make P2P messages available to other applications (if they
subscribe to them). The other way around, routing messages from ZeroMQ
to certain P2P clients, is easy.

Wladimir



From jgarzik at bitpay.com  Fri Aug  8 12:15:19 2014
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Fri, 8 Aug 2014 08:15:19 -0400
Subject: [Bitcoin-development] NODE_EXT_SERVICES and advertising related
	services
In-Reply-To: <CANEZrP2UFMDJ+88MU=RTyU4FV_HCHwuHLmd5S9aK2AZ7DJ+j7g@mail.gmail.com>
References: <CAJHLa0Ok6s5xQcMSeLa69adLBXEaicuXqcg45eZrwYtVFbx-dA@mail.gmail.com>
	<CANEZrP2wYcxJhxRRa86Nm9ENtK2SA5VNG-L7f5pHb_W=Ajcj5Q@mail.gmail.com>
	<CA+s+GJD+9qpwFcVfHOCCsFYjmk7A0V=65vG-7jJ6D7jj4Pi_7g@mail.gmail.com>
	<CANEZrP245242JYDBBo72XVmKgEBO96QPjcJi8Jy2Dm_r90n1Bw@mail.gmail.com>
	<CAJHLa0N3xx1QZ==iSLYNsdgkBGoqN34+4eVtukkjn+3SrDhC7A@mail.gmail.com>
	<CANEZrP1mhSodC-ZvkuVKAgHO44bM7QX=RivRDhnDeHOKr8PXqQ@mail.gmail.com>
	<CA+s+GJCbCRQP_w3g-0qtA6K8qrf6ywNfJ9d1367gSTfgCwgU2Q@mail.gmail.com>
	<CANEZrP2UFMDJ+88MU=RTyU4FV_HCHwuHLmd5S9aK2AZ7DJ+j7g@mail.gmail.com>
Message-ID: <CAJHLa0O98nfdiewzk-QV_Xw5ytVjas=pW9s2Gxjik7x+ttZFng@mail.gmail.com>

getutxos is a special case, since we already maintain that index as
part of normal operation.

While I dislike some aspects of getutxos (covered elsewhere), if
merged, it would be more appropriate as a special case to keep
getutxos fully internal to bitcoind for implementation reasons.

On Fri, Aug 8, 2014 at 8:11 AM, Mike Hearn <mike at plan99.net> wrote:
>> Something like `getutxos` or this proposal could be implemented as an
>> external application or script, instead of having to integrate
>> everything into bitcoind.
>
>
> Right, although getutxos needs access to the UTXO set which bitcoind already
> has. An external plugin would have to recalculate it from scratch which
> seems redundant.
>
> However there are many other useful services that could be added in such a
> way, like -txindex or the nLockTime storage facility we talked about the
> other day.
>
>>
>> Bitcoind would need a local interprocess message bus for that
>
>
> Maybe, that feels like it could be overkill though. Probably just something
> like
>
> ./bitcoind -servicecookie=<long random string> -allowextservices=127.0.0.1/8
>
> and then any program can connect to bitcoind as normal, send "registersrv"
> with the cookie and a list of command ids it's interested in, maybe a
> service bit to set, and start receiving those messages wrapped in a new
> structure that gives some kind of client ID (like IP address). So any
> library that can do the basic P2P protocol could then be extended with not
> much code to get a multiplexed stream of messages from different clients.
>
> An additional standalone program can then bridge this mechanism to running a
> shell command for particular messages, though given the history of shell
> based exploits I'd feel safer with something that doesn't do that ....



-- 
Jeff Garzik
Bitcoin core developer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From laanwj at gmail.com  Fri Aug  8 12:16:54 2014
From: laanwj at gmail.com (Wladimir)
Date: Fri, 8 Aug 2014 14:16:54 +0200
Subject: [Bitcoin-development] NODE_EXT_SERVICES and advertising related
	services
In-Reply-To: <CANEZrP2UFMDJ+88MU=RTyU4FV_HCHwuHLmd5S9aK2AZ7DJ+j7g@mail.gmail.com>
References: <CAJHLa0Ok6s5xQcMSeLa69adLBXEaicuXqcg45eZrwYtVFbx-dA@mail.gmail.com>
	<CANEZrP2wYcxJhxRRa86Nm9ENtK2SA5VNG-L7f5pHb_W=Ajcj5Q@mail.gmail.com>
	<CA+s+GJD+9qpwFcVfHOCCsFYjmk7A0V=65vG-7jJ6D7jj4Pi_7g@mail.gmail.com>
	<CANEZrP245242JYDBBo72XVmKgEBO96QPjcJi8Jy2Dm_r90n1Bw@mail.gmail.com>
	<CAJHLa0N3xx1QZ==iSLYNsdgkBGoqN34+4eVtukkjn+3SrDhC7A@mail.gmail.com>
	<CANEZrP1mhSodC-ZvkuVKAgHO44bM7QX=RivRDhnDeHOKr8PXqQ@mail.gmail.com>
	<CA+s+GJCbCRQP_w3g-0qtA6K8qrf6ywNfJ9d1367gSTfgCwgU2Q@mail.gmail.com>
	<CANEZrP2UFMDJ+88MU=RTyU4FV_HCHwuHLmd5S9aK2AZ7DJ+j7g@mail.gmail.com>
Message-ID: <CA+s+GJCNQ_eKfCVHyQNjaFdqWZ9sGxKFxyHiwTtwie_33LrYSA@mail.gmail.com>

On Fri, Aug 8, 2014 at 2:11 PM, Mike Hearn <mike at plan99.net> wrote:
>> Something like `getutxos` or this proposal could be implemented as an
>> external application or script, instead of having to integrate
>> everything into bitcoind.
>
>
> Right, although getutxos needs access to the UTXO set which bitcoind already
> has. An external plugin would have to recalculate it from scratch which
> seems redundant.

Well to play the devil's advocate, you could set it up to query the
information back over RPC :-)

But yeah, I didn't mean getutxos specifically, it has a trivial
implementation anyway.

Wladimir



From laanwj at gmail.com  Fri Aug  8 12:34:32 2014
From: laanwj at gmail.com (Wladimir)
Date: Fri, 8 Aug 2014 14:34:32 +0200
Subject: [Bitcoin-development] NODE_EXT_SERVICES and advertising related
	services
In-Reply-To: <CANEZrP2UFMDJ+88MU=RTyU4FV_HCHwuHLmd5S9aK2AZ7DJ+j7g@mail.gmail.com>
References: <CAJHLa0Ok6s5xQcMSeLa69adLBXEaicuXqcg45eZrwYtVFbx-dA@mail.gmail.com>
	<CANEZrP2wYcxJhxRRa86Nm9ENtK2SA5VNG-L7f5pHb_W=Ajcj5Q@mail.gmail.com>
	<CA+s+GJD+9qpwFcVfHOCCsFYjmk7A0V=65vG-7jJ6D7jj4Pi_7g@mail.gmail.com>
	<CANEZrP245242JYDBBo72XVmKgEBO96QPjcJi8Jy2Dm_r90n1Bw@mail.gmail.com>
	<CAJHLa0N3xx1QZ==iSLYNsdgkBGoqN34+4eVtukkjn+3SrDhC7A@mail.gmail.com>
	<CANEZrP1mhSodC-ZvkuVKAgHO44bM7QX=RivRDhnDeHOKr8PXqQ@mail.gmail.com>
	<CA+s+GJCbCRQP_w3g-0qtA6K8qrf6ywNfJ9d1367gSTfgCwgU2Q@mail.gmail.com>
	<CANEZrP2UFMDJ+88MU=RTyU4FV_HCHwuHLmd5S9aK2AZ7DJ+j7g@mail.gmail.com>
Message-ID: <CA+s+GJBuyn2xYeBoh9r4E=qjHdrti6u1K6cApYbgROs2CpPukQ@mail.gmail.com>

On Fri, Aug 8, 2014 at 2:11 PM, Mike Hearn <mike at plan99.net> wrote:
> Maybe, that feels like it could be overkill though. Probably just something
> like
>
> ./bitcoind -servicecookie=<long random string> -allowextservices=127.0.0.1/8

I don't like conflating the external and internal interface. The
interface to the outside and the interface to the inside should be
well-separated.

I'd be OK with such an idea if bitcoind listens on a separate port for
connections from plugins, a port that cannot be used for normal P2P
traffic. This could also be a UNIX socket instead of a TCP port.

Wladimir



From stick at gk2.sk  Fri Aug  8 13:19:38 2014
From: stick at gk2.sk (Pavol Rusnak)
Date: Fri, 08 Aug 2014 15:19:38 +0200
Subject: [Bitcoin-development] BIP32 - invalidation
Message-ID: <53E4CE6A.5070609@gk2.sk>

Hi all!

I would like to discuss invalidation of nodes in BIP32. Currently the
document says:

a) Public CKD

In case I_L >= n or ki = 0, the resulting key is invalid, and one should
proceed with the next value for i.

b) Private CKD

In case I_L >= n or Ki is the point at infinity, the resulting key is
invalid, and one should proceed with the next value for i.

c) Master Key Generation

In case IL is 0 or I_L >= n, the master key is invalid.

(All these cases have probability lower than 1 in 2^127.)

What do you think about the following change for all 3 cases:

In case I_L >= n assign I_L := I_L mod n.

Rationale:

It's easy to say "mark as invalid and proceed with next", but actually
most of the implementations don't do the checking at all, because tjen
it's rather hard at application level to implement skipping logic. OTOH
it's quite straightforward to perform modulo if needed, so we probably
see more implementations doing the checking.

We would still need to deal with cases when I_L = 0 or ki = 0 or ki =
inf, but these have probability around 1 in 2^255.

Does anyone see any concerns when it comes to security of the proposed
change?

-- 
Best Regards / S pozdravom,

Pavol Rusnak <stick at gk2.sk>



From mike at plan99.net  Fri Aug  8 13:55:42 2014
From: mike at plan99.net (Mike Hearn)
Date: Fri, 8 Aug 2014 15:55:42 +0200
Subject: [Bitcoin-development] NODE_EXT_SERVICES and advertising related
	services
In-Reply-To: <CA+s+GJBuyn2xYeBoh9r4E=qjHdrti6u1K6cApYbgROs2CpPukQ@mail.gmail.com>
References: <CAJHLa0Ok6s5xQcMSeLa69adLBXEaicuXqcg45eZrwYtVFbx-dA@mail.gmail.com>
	<CANEZrP2wYcxJhxRRa86Nm9ENtK2SA5VNG-L7f5pHb_W=Ajcj5Q@mail.gmail.com>
	<CA+s+GJD+9qpwFcVfHOCCsFYjmk7A0V=65vG-7jJ6D7jj4Pi_7g@mail.gmail.com>
	<CANEZrP245242JYDBBo72XVmKgEBO96QPjcJi8Jy2Dm_r90n1Bw@mail.gmail.com>
	<CAJHLa0N3xx1QZ==iSLYNsdgkBGoqN34+4eVtukkjn+3SrDhC7A@mail.gmail.com>
	<CANEZrP1mhSodC-ZvkuVKAgHO44bM7QX=RivRDhnDeHOKr8PXqQ@mail.gmail.com>
	<CA+s+GJCbCRQP_w3g-0qtA6K8qrf6ywNfJ9d1367gSTfgCwgU2Q@mail.gmail.com>
	<CANEZrP2UFMDJ+88MU=RTyU4FV_HCHwuHLmd5S9aK2AZ7DJ+j7g@mail.gmail.com>
	<CA+s+GJBuyn2xYeBoh9r4E=qjHdrti6u1K6cApYbgROs2CpPukQ@mail.gmail.com>
Message-ID: <CANEZrP2GeX9VLqD7p7uCBN6QrYo6LfGj0pNJthk2LjLkVLNFmA@mail.gmail.com>

>
> I'd be OK with such an idea if bitcoind listens on a separate port for
> connections from plugins, a port that cannot be used for normal P2P
> traffic. This could also be a UNIX socket instead of a TCP port.


Yes, can be done this way too. I was thinking about setups where you have
services distributed across multiple machines. However a separate port does
indeed allow iptables or the like to be used.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140808/1147baf4/attachment.html>

From tomh at thinlink.com  Fri Aug  8 17:38:08 2014
From: tomh at thinlink.com (Tom Harding)
Date: Fri, 08 Aug 2014 10:38:08 -0700
Subject: [Bitcoin-development] deterministic transaction expiration
In-Reply-To: <CALxbBHXh-Fktsr96PMXdohJdgcUKoNreJ-ZuApKOX3-qSkdk2w@mail.gmail.com>
References: <CA+iPb=HkxeVPF0SynxCPgUkq4msrdfayFrVNFjzg29rFwqXv1w@mail.gmail.com>
	<CAJHLa0O2wFq2Vs5Bes_8x1q_j0VC+U4DQkx=6GqT8w5e8Lh5Qg@mail.gmail.com>
	<CA+iPb=ET+A-qB8TgPX8D-ut1DWnq9tZJ=14igfRVWO6eog6Xgw@mail.gmail.com>
	<53E1A8AF.4030206@thinlink.com>
	<CAJHLa0MfRhCPX8H92qc1kSebc=WrUzmSgbG331t4-zDHhTNu4w@mail.gmail.com>
	<CANEZrP3eEiLxYfsAURRm4ysfS4TRgXxa_THxJ43cVH1OyR95JQ@mail.gmail.com>
	<53E23F49.3020605@thinlink.com>
	<CAJHLa0OtPA3DGQuJhp3zkK5dnBux6TFAw3qDsBdO0zaxrqBgRg@mail.gmail.com>
	<CALxbBHXh-Fktsr96PMXdohJdgcUKoNreJ-ZuApKOX3-qSkdk2w@mail.gmail.com>
Message-ID: <53E50B00.8030505@thinlink.com>

Having explored more drastic approaches, it looks like Kaz' basic idea 
stands well.  His #1...

> 1. start setting nLockTime to the current height by default in newly
> created transactions (or slightly below the current height, for
> reorg-friendliness)

is already implemented in bitcoin-qt #2340, and a "final call" on 
merging it was already sent to this list.  After some thought I agree 
with its policy of eventually setting nLockTime at current-height + 1 by 
default.  This is the "best reasonably expected height" of any tx 
created right now.  It discourages fee-sniping, and if a reorg happens 
anyway, it won't actually delay inclusion of tx beyond the reasonable 
expectation sans reorg.

However right now, #2340 takes a very cautious approach and sets to 
current-height - 10 by default, with randomness to mitigate worries 
about loss of privacy.

Kaz' #2, #3 and #4 are future actions.  #4 only goes most of the way ...

> 4. add a new IsStandard rule rejecting transactions with an nLockTime
> more than N blocks behind the current tip (for some fixed value N, to
> be determined)

... a janitor mechanism is desirable to purge mempool of txes more than 
N behind current-height.

Nodes dropping a tx N blocks after they became eligible to be mined (the 
meaning of nLockTime) makes sense.  It is not an overloading or new use 
for nLockTime, but a logical extension of it.  As Kaz pointed out, this 
solves a big problem with expiring by locally measured age: 
unintentional resurrection.




From jgarzik at bitpay.com  Fri Aug  8 18:13:20 2014
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Fri, 8 Aug 2014 14:13:20 -0400
Subject: [Bitcoin-development] deterministic transaction expiration
In-Reply-To: <53E50B00.8030505@thinlink.com>
References: <CA+iPb=HkxeVPF0SynxCPgUkq4msrdfayFrVNFjzg29rFwqXv1w@mail.gmail.com>
	<CAJHLa0O2wFq2Vs5Bes_8x1q_j0VC+U4DQkx=6GqT8w5e8Lh5Qg@mail.gmail.com>
	<CA+iPb=ET+A-qB8TgPX8D-ut1DWnq9tZJ=14igfRVWO6eog6Xgw@mail.gmail.com>
	<53E1A8AF.4030206@thinlink.com>
	<CAJHLa0MfRhCPX8H92qc1kSebc=WrUzmSgbG331t4-zDHhTNu4w@mail.gmail.com>
	<CANEZrP3eEiLxYfsAURRm4ysfS4TRgXxa_THxJ43cVH1OyR95JQ@mail.gmail.com>
	<53E23F49.3020605@thinlink.com>
	<CAJHLa0OtPA3DGQuJhp3zkK5dnBux6TFAw3qDsBdO0zaxrqBgRg@mail.gmail.com>
	<CALxbBHXh-Fktsr96PMXdohJdgcUKoNreJ-ZuApKOX3-qSkdk2w@mail.gmail.com>
	<53E50B00.8030505@thinlink.com>
Message-ID: <CAJHLa0OsKxugMc39mw0xTXnLse0+oJWu_vyYmYyLU1WC2y=ZUg@mail.gmail.com>

On Fri, Aug 8, 2014 at 1:38 PM, Tom Harding <tomh at thinlink.com> wrote:
>> 4. add a new IsStandard rule rejecting transactions with an nLockTime
>> more than N blocks behind the current tip (for some fixed value N, to
>> be determined)

It cannot be assumed that transaction creation time and transaction
publish-to-outside-world time are the same, even though they often
are.

-- 
Jeff Garzik
Bitcoin core developer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From jgarzik at bitpay.com  Fri Aug  8 18:21:18 2014
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Fri, 8 Aug 2014 14:21:18 -0400
Subject: [Bitcoin-development] Miners MiTM
In-Reply-To: <CANEZrP00kRtNxtG9OVOmQLSTZ-MSHSuCe1PniM6v1pnhzz5Jog@mail.gmail.com>
References: <CAPS+U9-ze_-gcYh1WNVJ5h8AZ8owoQX=8OUgNcKnaxgvjxZATA@mail.gmail.com>
	<201408072345.45363.luke@dashjr.org>
	<CAJna-HjzMO68KSXYG++X-8vzQCLurkrAAhfrVo9-AbaoYdqZhw@mail.gmail.com>
	<201408080101.16453.luke@dashjr.org>
	<CANEZrP00kRtNxtG9OVOmQLSTZ-MSHSuCe1PniM6v1pnhzz5Jog@mail.gmail.com>
Message-ID: <CAJHLa0NBJo+NFFFZEHNo81KPBwgx05tbuMwtSKMs=07+wCmQgA@mail.gmail.com>

gmaxwell noted on IRC that enabling TLS could be functionally, if not
literally, a DoS on the pool servers.  Hence the thought towards a
more lightweight method that simply prevents client payout redirection
+ server impersonation.


On Fri, Aug 8, 2014 at 5:53 AM, Mike Hearn <mike at plan99.net> wrote:
>> Certificate validation isn't needed unless the attacker can do a direct
>> MITM
>> at connection time, which is a lot harder to maintain than injecting a
>> client.reconnect.
>
>
> Surely the TCP connection will be reset once the route reconfiguration is
> completed, either by the MITM server or by the client TCP stack when it
> discovers the server doesn't know about the connection anymore?
>
> TLS without cert validation defeats the point, you can still be connected to
> a MITM at any point by anyone who can simply interrupt or corrupt the
> stream, forcing a reconnect.
>
> ------------------------------------------------------------------------------
> Want fast and easy access to all the code in your enterprise? Index and
> search up to 200,000 lines of code with a free copy of Black Duck
> Code Sight - the same software that powers the world's largest code
> search on Ohloh, the Black Duck Open Hub! Try it now.
> http://p.sf.net/sfu/bds
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>



-- 
Jeff Garzik
Bitcoin core developer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From luke at dashjr.org  Fri Aug  8 18:27:29 2014
From: luke at dashjr.org (Luke Dashjr)
Date: Fri, 8 Aug 2014 18:27:29 +0000
Subject: [Bitcoin-development] Miners MiTM
In-Reply-To: <CAJHLa0NBJo+NFFFZEHNo81KPBwgx05tbuMwtSKMs=07+wCmQgA@mail.gmail.com>
References: <CAPS+U9-ze_-gcYh1WNVJ5h8AZ8owoQX=8OUgNcKnaxgvjxZATA@mail.gmail.com>
	<CANEZrP00kRtNxtG9OVOmQLSTZ-MSHSuCe1PniM6v1pnhzz5Jog@mail.gmail.com>
	<CAJHLa0NBJo+NFFFZEHNo81KPBwgx05tbuMwtSKMs=07+wCmQgA@mail.gmail.com>
Message-ID: <201408081827.30783.luke@dashjr.org>

On Friday, August 08, 2014 6:21:18 PM Jeff Garzik wrote:
> gmaxwell noted on IRC that enabling TLS could be functionally, if not
> literally, a DoS on the pool servers.  Hence the thought towards a
> more lightweight method that simply prevents client payout redirection
> + server impersonation.

My thought for GBT2 a while ago was to use simple ECDSA signatures for 
messages. It'd be nice to use the same as Bitcoin, but then we'd hit problems 
with RedHat/Fedora legal being stupid. :(

Luke



From kaz at revolveforward.com  Fri Aug  8 18:42:35 2014
From: kaz at revolveforward.com (Kaz Wesley)
Date: Fri, 8 Aug 2014 11:42:35 -0700
Subject: [Bitcoin-development] deterministic transaction expiration
In-Reply-To: <CAJHLa0OsKxugMc39mw0xTXnLse0+oJWu_vyYmYyLU1WC2y=ZUg@mail.gmail.com>
References: <CA+iPb=HkxeVPF0SynxCPgUkq4msrdfayFrVNFjzg29rFwqXv1w@mail.gmail.com>
	<CAJHLa0O2wFq2Vs5Bes_8x1q_j0VC+U4DQkx=6GqT8w5e8Lh5Qg@mail.gmail.com>
	<CA+iPb=ET+A-qB8TgPX8D-ut1DWnq9tZJ=14igfRVWO6eog6Xgw@mail.gmail.com>
	<53E1A8AF.4030206@thinlink.com>
	<CAJHLa0MfRhCPX8H92qc1kSebc=WrUzmSgbG331t4-zDHhTNu4w@mail.gmail.com>
	<CANEZrP3eEiLxYfsAURRm4ysfS4TRgXxa_THxJ43cVH1OyR95JQ@mail.gmail.com>
	<53E23F49.3020605@thinlink.com>
	<CAJHLa0OtPA3DGQuJhp3zkK5dnBux6TFAw3qDsBdO0zaxrqBgRg@mail.gmail.com>
	<CALxbBHXh-Fktsr96PMXdohJdgcUKoNreJ-ZuApKOX3-qSkdk2w@mail.gmail.com>
	<53E50B00.8030505@thinlink.com>
	<CAJHLa0OsKxugMc39mw0xTXnLse0+oJWu_vyYmYyLU1WC2y=ZUg@mail.gmail.com>
Message-ID: <CA+iPb=HEhU4-vXQYOU5SuKQFJcepMMgoZBQprTorhyWrW4DzWA@mail.gmail.com>

A new network tx field would have the same problem, right?

With a child-refreshes-parent policy, someone wishing to redeem a
transaction that has passed its relay window without being confirmed could
still do so.
On Aug 8, 2014 11:16 AM, "Jeff Garzik" <jgarzik at bitpay.com> wrote:

> On Fri, Aug 8, 2014 at 1:38 PM, Tom Harding <tomh at thinlink.com> wrote:
> >> 4. add a new IsStandard rule rejecting transactions with an nLockTime
> >> more than N blocks behind the current tip (for some fixed value N, to
> >> be determined)
>
> It cannot be assumed that transaction creation time and transaction
> publish-to-outside-world time are the same, even though they often
> are.
>
> --
> Jeff Garzik
> Bitcoin core developer and open source evangelist
> BitPay, Inc.      https://bitpay.com/
>
>
> ------------------------------------------------------------------------------
> Want fast and easy access to all the code in your enterprise? Index and
> search up to 200,000 lines of code with a free copy of Black Duck
> Code Sight - the same software that powers the world's largest code
> search on Ohloh, the Black Duck Open Hub! Try it now.
> http://p.sf.net/sfu/bds
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140808/7a3531d0/attachment.html>

From laszlo at heliacal.net  Fri Aug  8 18:34:01 2014
From: laszlo at heliacal.net (Laszlo Hanyecz)
Date: Fri, 8 Aug 2014 18:34:01 +0000
Subject: [Bitcoin-development] Miners MiTM
In-Reply-To: <CAJHLa0NBJo+NFFFZEHNo81KPBwgx05tbuMwtSKMs=07+wCmQgA@mail.gmail.com>
References: <CAPS+U9-ze_-gcYh1WNVJ5h8AZ8owoQX=8OUgNcKnaxgvjxZATA@mail.gmail.com>
	<201408072345.45363.luke@dashjr.org>
	<CAJna-HjzMO68KSXYG++X-8vzQCLurkrAAhfrVo9-AbaoYdqZhw@mail.gmail.com>
	<201408080101.16453.luke@dashjr.org>
	<CANEZrP00kRtNxtG9OVOmQLSTZ-MSHSuCe1PniM6v1pnhzz5Jog@mail.gmail.com>
	<CAJHLa0NBJo+NFFFZEHNo81KPBwgx05tbuMwtSKMs=07+wCmQgA@mail.gmail.com>
Message-ID: <A5697066-6389-4F9A-99E6-B815ADB51006@heliacal.net>

Mutual CHAP could work.  This is commonly done in PPP and iSCSI.  The idea is simply that both sides authenticate.  The server expects the client to provide a password, and the client expects the server to provide a (different) password.  If you masquerade as the server, you won't be able to authenticate because every client has a different password they expect from the server, so they won't do work for you. MITM on the server can capture the exchange but CHAP protects against replay.

https://en.wikipedia.org/wiki/Challenge-Handshake_Authentication_Protocol

-Laszlo


On Aug 8, 2014, at 6:21 PM, Jeff Garzik <jgarzik at bitpay.com> wrote:

> gmaxwell noted on IRC that enabling TLS could be functionally, if not
> literally, a DoS on the pool servers.  Hence the thought towards a
> more lightweight method that simply prevents client payout redirection
> + server impersonation.
> 
> 
> On Fri, Aug 8, 2014 at 5:53 AM, Mike Hearn <mike at plan99.net> wrote:
>>> Certificate validation isn't needed unless the attacker can do a direct
>>> MITM
>>> at connection time, which is a lot harder to maintain than injecting a
>>> client.reconnect.
>> 
>> 
>> Surely the TCP connection will be reset once the route reconfiguration is
>> completed, either by the MITM server or by the client TCP stack when it
>> discovers the server doesn't know about the connection anymore?
>> 
>> TLS without cert validation defeats the point, you can still be connected to
>> a MITM at any point by anyone who can simply interrupt or corrupt the
>> stream, forcing a reconnect.
>> 
>> ------------------------------------------------------------------------------
>> Want fast and easy access to all the code in your enterprise? Index and
>> search up to 200,000 lines of code with a free copy of Black Duck
>> Code Sight - the same software that powers the world's largest code
>> search on Ohloh, the Black Duck Open Hub! Try it now.
>> http://p.sf.net/sfu/bds
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>> 
> 
> 
> 
> -- 
> Jeff Garzik
> Bitcoin core developer and open source evangelist
> BitPay, Inc.      https://bitpay.com/
> 
> ------------------------------------------------------------------------------
> Want fast and easy access to all the code in your enterprise? Index and
> search up to 200,000 lines of code with a free copy of Black Duck
> Code Sight - the same software that powers the world's largest code
> search on Ohloh, the Black Duck Open Hub! Try it now.
> http://p.sf.net/sfu/bds
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development




From tim.ruffing at mmci.uni-saarland.de  Sat Aug  9 10:04:51 2014
From: tim.ruffing at mmci.uni-saarland.de (Tim Ruffing)
Date: Sat, 09 Aug 2014 12:04:51 +0200
Subject: [Bitcoin-development] CoinShuffle: decentralized CoinJoin
	without trusted third parties
In-Reply-To: <1530801.palqu9XdN4@1337h4x0r>
References: <8137823.B0x87S28xY@calzone> <1530801.palqu9XdN4@1337h4x0r>
Message-ID: <5456835.U3gAI91RM4@calzone>

You are raising valid questions and one goal of our posting here is indeed to 
discuss exactly these system issues.

On Thursday 07 August 2014 15:00:11 you wrote:
> I think the description at your website leaves out the truly interesting
> part: How do you decentralize this securely?
> - How do Alice, Bob, Charlie and Dave communicate, i.e. which network is
> used for communication and how?
The simplest approach is obviously to use direct connections to a randomly 
elected leader, who is also responsible for the broadcasts.
One advantage of CoinShuffle is that the unlinkability between input and 
output addresses is guaranteed, no matter which underlying network you use. 
(Still, it is a good idea in general to hide your IP address but we can let 
the user decide here.)

Of course, there would be other possibilities, such as overlay networks. 
Coinmux, a CoinJoin prototype by Michael Pearce (http://coinmux.com/) uses 
TomP2P, a distributed hash table, for communication. 

Do you have any hints regarding this point?

> - How does Alice know that Bob, Charlie and Dave are not the same person?
> (= how do you prevent a Sybil attack?)
> 
> Because thats the real problem with mixing it seems - ensuring that your
> mixing partners are actually 100 people and not just 1 attacker. There are
> probably many mixing algorithms which work if you solve that problem, but I
> don't see how you offer a solution for it :(
It's true that there are a few proposals for mixing protocols which all have 
their advantages and disadvantages. However, it's not true that the mixing 
itself becomes simple if you solve the problem of Sybil attacks. Still, mixing 
is difficult to get right: Even if there are no Sybil attacks, you have to 
ensure that the participants (or a server) cannot break unlinkability or steal 
money. Actually that's why there are several proposals for mixing protocols, 
because there is no obvious perfect solution.

Regarding your question:
It is indeed very important to get this right. Fundamentally, there is nothing 
that prevents the attacker from creating a lot of identities participating in 
a lot of CoinJoins. However, there are ways that make it hard for the attacker 
to put an honest user together only with malicious users.

For a moment, assume that you can reliably establish a pool of users that 
would like to participate in the protocol. (I will discuss this later.) 
You have to divide the users to individual groups, i.e., CoinJoins runs. If 
the assignment cannot be influenced by the attacker, then the probability that 
there are also honest users in a run is quite high. Of course, the attacker is 
able to reduce your anonymity set but they cannot just put you together only 
with their malicious identities.

Note that the attacker has to pay transaction fees for joining many 
transaction. One could even increase the required fee depending on the number 
of users in the pool (enforced by honest CoinShuffle participants that would 
not accept CoinJoins that pay a lower transaction fee).

And making sure that the attacker cannot influence the assignment is simple: 
One can use the hash of all users' public keys in the pool to determine the 
assignment for example.
 
For the initial setup step, i.e., creating the pool of participants, you need 
some kind of "bulletin board". 

One possibility is to use an underlying peer-to-peer network. Bitcoin itself 
is the first that comes to the mind but it does not allow arbitrary messages. 
So if we do not want to change the Bitcoin protocol, chans in Bitmessage are a 
very promising possibility. Bitmessage relies basically on the same broadcast 
mechanism as Bitcoin. If you as a peer use enough outgoing connections to 
other peers, it's very difficult for an attacker to ensure that your message 
will not be spread among the network. (Btw, people have used this to do 
CoinJoin  manually already 
https://forum.namecoin.info/viewtopic.php?f=2&t=1694 .)
Solutions like distributed hashtables (TomP2P again) are another possibility. 
We are not sure which of those approaches provides the best robustness against 
malicious nodes that try to stop single participants from reaching the 
network. For the setup step, latency is not an issue, so Bitmessage is indeed 
a promising candidate here.
 
I think that in general, P2P is the way to go here, but there are other 
approaches as well:

 - A possibility is to have a lot of servers acting as bulletin 
boards. The user sends his announcement message to all of the servers and 
the user waits until at some of the servers send back a guarantee to 
include the user. After some time, the servers agree on the pool of the users 
just by taking all the users that have registered with at least one of the 
servers. There are well-understood protocols to achieve this goal or similar 
goals, because essentially the same problem arises in e-voting (see 
http://arxiv.org/pdf/1401.4151 for just one example. this paper provides also 
a detailed discussion of related protocols in section 9).
Of course, the disadvantage of this approach is that the protocol is not 
really decentralized anymore.

 - If you really want to be on the safe side, you can include your 
announcement messages in the Bitcoin blockchain, e.g., by adding your 
announcement message to an unspendable output, at the cost of an additional 
transaction. I know that putting data to the blockchain is discouraged but let 
me explain why it is useful here: If you want to do several CoinJoins in a 
row, you can include your announcement message for the second CoinJoin in the 
transaction of the first CoinJoin, so your announcement is very robust but you 
do not need an additional transaction, because you can piggy-back on the frist 
transaction.

Additionally, it is possible to combine these approaches by joining several 
pools. 

Another interesting point that my co-author Aniket Kate mentioned is that you 
can look at that problem as a social issue: You could combine this with 
information from your friends. You can participate in a CoinJoin only if your 
friends tell you that they also participate in the same run. They do not even 
have to reveal their input address, they just have to reveal that their 
address is in a particular run. Of course, this is not yet a technical 
solution but a very interesting idea.

Don't get me wrong. We don't think that there is a perfect solution the 
two issues that you mentioned but we are pretty sure there are several that 
work well enough in practice if they are implemented correctly. 

Tim
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 648 bytes
Desc: This is a digitally signed message part.
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140809/65784dc2/attachment.sig>

From sergiolerner at certimix.com  Sat Aug  9 12:15:26 2014
From: sergiolerner at certimix.com (Sergio Lerner)
Date: Sat, 09 Aug 2014 09:15:26 -0300
Subject: [Bitcoin-development] Miners MiTM
In-Reply-To: <A5697066-6389-4F9A-99E6-B815ADB51006@heliacal.net>
References: <CAPS+U9-ze_-gcYh1WNVJ5h8AZ8owoQX=8OUgNcKnaxgvjxZATA@mail.gmail.com>
	<201408072345.45363.luke@dashjr.org>
	<CAJna-HjzMO68KSXYG++X-8vzQCLurkrAAhfrVo9-AbaoYdqZhw@mail.gmail.com>
	<201408080101.16453.luke@dashjr.org>
	<CANEZrP00kRtNxtG9OVOmQLSTZ-MSHSuCe1PniM6v1pnhzz5Jog@mail.gmail.com>
	<CAJHLa0NBJo+NFFFZEHNo81KPBwgx05tbuMwtSKMs=07+wCmQgA@mail.gmail.com>
	<A5697066-6389-4F9A-99E6-B815ADB51006@heliacal.net>
Message-ID: <53E610DE.4070903@certimix.com>

Since the information exchanged between the pool and the miner is
public, all that's needed is a mutual private MAC key that authenticates
messages.
This requires a registration step, that can be done only once using a
simple web interface over https to the miner website.
But the miner website is not the miner server, so the worst DoS would be
preventing new miners to join the pool, which is not very often.
The MAC key can be provided directly by the miner. And the pool
associates the MAC key with a Bitcoin public address.
The overhead would be minimal.


-Sergio.




From sergiolerner at certimix.com  Sat Aug  9 13:10:50 2014
From: sergiolerner at certimix.com (Sergio Lerner)
Date: Sat, 09 Aug 2014 10:10:50 -0300
Subject: [Bitcoin-development] CoinShuffle: decentralized CoinJoin
 without trusted third parties
In-Reply-To: <5456835.U3gAI91RM4@calzone>
References: <8137823.B0x87S28xY@calzone> <1530801.palqu9XdN4@1337h4x0r>
	<5456835.U3gAI91RM4@calzone>
Message-ID: <53E61DDA.5030307@certimix.com>

Hi Tim,
 It's clear from the paper that the second party in the protocol can
de-anonymize the first party. So it's seems that dishonest shufflers
would prefer to be in that position in the queue.
There are two possible solutions to this:

1. Derive the first order of parties in the shuffle from the hash of all
inputs provided (as a seed for a pseudo-random number generator).
2. Repeat the shuffle several times with an different party order (e.g.
an order that is deterministically derived from the hash of all the outputs)


Best regards,
 Sergio/


On 09/08/2014 07:04 a.m., Tim Ruffing wrote:
> You are raising valid questions and one goal of our posting here is indeed to 
> discuss exactly these system issues.
>
> On Thursday 07 August 2014 15:00:11 you wrote:
>> I think the description at your website leaves out the truly interesting
>> part: How do you decentralize this securely?
>> - How do Alice, Bob, Charlie and Dave communicate, i.e. which network is
>> used for communication and how?
> The simplest approach is obviously to use direct connections to a randomly 
> elected leader, who is also responsible for the broadcasts.
> One advantage of CoinShuffle is that the unlinkability between input and 
> output addresses is guaranteed, no matter which underlying network you use. 
> (Still, it is a good idea in general to hide your IP address but we can let 
> the user decide here.)
>
> Of course, there would be other possibilities, such as overlay networks. 
> Coinmux, a CoinJoin prototype by Michael Pearce (http://coinmux.com/) uses 
> TomP2P, a distributed hash table, for communication. 
>
> Do you have any hints regarding this point?
>
>> - How does Alice know that Bob, Charlie and Dave are not the same person?
>> (= how do you prevent a Sybil attack?)
>>
>> Because thats the real problem with mixing it seems - ensuring that your
>> mixing partners are actually 100 people and not just 1 attacker. There are
>> probably many mixing algorithms which work if you solve that problem, but I
>> don't see how you offer a solution for it :(
> It's true that there are a few proposals for mixing protocols which all have 
> their advantages and disadvantages. However, it's not true that the mixing 
> itself becomes simple if you solve the problem of Sybil attacks. Still, mixing 
> is difficult to get right: Even if there are no Sybil attacks, you have to 
> ensure that the participants (or a server) cannot break unlinkability or steal 
> money. Actually that's why there are several proposals for mixing protocols, 
> because there is no obvious perfect solution.
>
> Regarding your question:
> It is indeed very important to get this right. Fundamentally, there is nothing 
> that prevents the attacker from creating a lot of identities participating in 
> a lot of CoinJoins. However, there are ways that make it hard for the attacker 
> to put an honest user together only with malicious users.
>
> For a moment, assume that you can reliably establish a pool of users that 
> would like to participate in the protocol. (I will discuss this later.) 
> You have to divide the users to individual groups, i.e., CoinJoins runs. If 
> the assignment cannot be influenced by the attacker, then the probability that 
> there are also honest users in a run is quite high. Of course, the attacker is 
> able to reduce your anonymity set but they cannot just put you together only 
> with their malicious identities.
>
> Note that the attacker has to pay transaction fees for joining many 
> transaction. One could even increase the required fee depending on the number 
> of users in the pool (enforced by honest CoinShuffle participants that would 
> not accept CoinJoins that pay a lower transaction fee).
>
> And making sure that the attacker cannot influence the assignment is simple: 
> One can use the hash of all users' public keys in the pool to determine the 
> assignment for example.
>  
> For the initial setup step, i.e., creating the pool of participants, you need 
> some kind of "bulletin board". 
>
> One possibility is to use an underlying peer-to-peer network. Bitcoin itself 
> is the first that comes to the mind but it does not allow arbitrary messages. 
> So if we do not want to change the Bitcoin protocol, chans in Bitmessage are a 
> very promising possibility. Bitmessage relies basically on the same broadcast 
> mechanism as Bitcoin. If you as a peer use enough outgoing connections to 
> other peers, it's very difficult for an attacker to ensure that your message 
> will not be spread among the network. (Btw, people have used this to do 
> CoinJoin  manually already 
> https://forum.namecoin.info/viewtopic.php?f=2&t=1694 .)
> Solutions like distributed hashtables (TomP2P again) are another possibility. 
> We are not sure which of those approaches provides the best robustness against 
> malicious nodes that try to stop single participants from reaching the 
> network. For the setup step, latency is not an issue, so Bitmessage is indeed 
> a promising candidate here.
>  
> I think that in general, P2P is the way to go here, but there are other 
> approaches as well:
>
>  - A possibility is to have a lot of servers acting as bulletin 
> boards. The user sends his announcement message to all of the servers and 
> the user waits until at some of the servers send back a guarantee to 
> include the user. After some time, the servers agree on the pool of the users 
> just by taking all the users that have registered with at least one of the 
> servers. There are well-understood protocols to achieve this goal or similar 
> goals, because essentially the same problem arises in e-voting (see 
> http://arxiv.org/pdf/1401.4151 for just one example. this paper provides also 
> a detailed discussion of related protocols in section 9).
> Of course, the disadvantage of this approach is that the protocol is not 
> really decentralized anymore.
>
>  - If you really want to be on the safe side, you can include your 
> announcement messages in the Bitcoin blockchain, e.g., by adding your 
> announcement message to an unspendable output, at the cost of an additional 
> transaction. I know that putting data to the blockchain is discouraged but let 
> me explain why it is useful here: If you want to do several CoinJoins in a 
> row, you can include your announcement message for the second CoinJoin in the 
> transaction of the first CoinJoin, so your announcement is very robust but you 
> do not need an additional transaction, because you can piggy-back on the frist 
> transaction.
>
> Additionally, it is possible to combine these approaches by joining several 
> pools. 
>
> Another interesting point that my co-author Aniket Kate mentioned is that you 
> can look at that problem as a social issue: You could combine this with 
> information from your friends. You can participate in a CoinJoin only if your 
> friends tell you that they also participate in the same run. They do not even 
> have to reveal their input address, they just have to reveal that their 
> address is in a particular run. Of course, this is not yet a technical 
> solution but a very interesting idea.
>
> Don't get me wrong. We don't think that there is a perfect solution the 
> two issues that you mentioned but we are pretty sure there are several that 
> work well enough in practice if they are implemented correctly. 
>
> Tim
>
>
> ------------------------------------------------------------------------------
>
>
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140809/7d3fdf07/attachment.html>

From hozer at hozed.org  Sat Aug  9 19:31:39 2014
From: hozer at hozed.org (Troy Benjegerdes)
Date: Sat, 9 Aug 2014 14:31:39 -0500
Subject: [Bitcoin-development] Miners MiTM
In-Reply-To: <201408072345.45363.luke@dashjr.org>
References: <CAPS+U9-ze_-gcYh1WNVJ5h8AZ8owoQX=8OUgNcKnaxgvjxZATA@mail.gmail.com>
	<201408072345.45363.luke@dashjr.org>
Message-ID: <20140809193139.GH22640@nl.grid.coop>

On Thu, Aug 07, 2014 at 11:45:44PM +0000, Luke Dashjr wrote:
> On Thursday, August 07, 2014 11:02:21 PM Pedro Worcel wrote:
> > Hi there,
> > 
> > I was wondering if you guys have come across this article:
> > 
> > http://www.wired.com/2014/08/isp-bitcoin-theft/
> > 
> > The TL;DR is that somebody is abusing the BGP protocol to be in a position
> > where they can intercept the miner traffic. The concerning point is that
> > they seem to be having some degree of success in their endeavour and
> > earning profits from it.
> > 
> > I do not understand the impact of this (I don't know much about BGP, the
> > mining protocol nor anything else, really), but I thought it might be worth
> > putting it up here.
> 
> This is old news; both BFGMiner and Eloipool were hardened against it a long 
> time ago (although no Bitcoin pools have deployed it so far). I'm not aware of 
> any actual case of it being used against Bitcoin, though - the target has 
> always been scamcoins.

That statement right there is all the evidence I need to convince myself that
Bitcoin is under continuous and active BGP feed manipulation by organized
crime elements.

Just the phrase of referring to !bitcoin as 'scamcoins' is a signal of an
organized marketing/psychological operations effort to marginalize other 
competitors, and the documented altcoin BGP highjacks were most likely 
testing of the system to confirm both
a) that it works
b) how to hide it below the detection threshhold





From hozer at hozed.org  Sat Aug  9 19:39:54 2014
From: hozer at hozed.org (Troy Benjegerdes)
Date: Sat, 9 Aug 2014 14:39:54 -0500
Subject: [Bitcoin-development] Miners MiTM
In-Reply-To: <CANEZrP0fsojCdKUe0Yx6POJesyTbq4f41MPzFfhKWerFn0UJGw@mail.gmail.com>
References: <CAPS+U9-ze_-gcYh1WNVJ5h8AZ8owoQX=8OUgNcKnaxgvjxZATA@mail.gmail.com>
	<201408072345.45363.luke@dashjr.org>
	<CAJna-HjzMO68KSXYG++X-8vzQCLurkrAAhfrVo9-AbaoYdqZhw@mail.gmail.com>
	<CANEZrP0fsojCdKUe0Yx6POJesyTbq4f41MPzFfhKWerFn0UJGw@mail.gmail.com>
Message-ID: <20140809193954.GI22640@nl.grid.coop>

On Fri, Aug 08, 2014 at 11:42:52AM +0200, Mike Hearn wrote:
> >
> > AFAIK the only protection is SSL + certificate validation on client side.
> > However certificate revocation and updates in miners are pain in the ass,
> > that's why majority of pools (mine including) don't want to play with
> > that...
> >
> 
> Why would miners need updates? If they implement the standard SSL
> infrastructure you can change certificates and keys without needing to
> update miners.
> 
> Besides, when it comes to financial services SSL is essential, I'm kind of
> surprised it wasn't already used everywhere. I wouldn't use an online bank
> that didn't support SSL, I would see it as a a sign of serious problems.
> Heck I wouldn't even use webmail that didn't support SSL these days.

Because turning on SSL gives pool operators a way to hack your miners.

http://www.symantec.com/connect/blogs/openssl-patches-critical-vulnerabilities-two-months-after-heartbleed

Just because SSL is the answer for financial services regulated security
theatre, where fraud means you just roll-back the transaction, it does not
mean it is actually a good cryptographic solution.

There are far better mechanisms that could be implemented using ECDSA 
keys (aka bitcoin addresses) to authenticate both miners and pools, but
the problem is there zero economic incentive to do so. As long as the
BGP/SSL/zero-day-of-the-week man-in-the middle fraud cost is lower than the
engineering cost to do some real cryptography and code audits, we'll keep
having new 'security patches' every couple of months.





From mark at monetize.io  Sat Aug  9 20:17:58 2014
From: mark at monetize.io (Mark Friedenbach)
Date: Sat, 9 Aug 2014 13:17:58 -0700
Subject: [Bitcoin-development] CoinShuffle: decentralized CoinJoin
 without trusted third parties
In-Reply-To: <53E61DDA.5030307@certimix.com>
References: <8137823.B0x87S28xY@calzone> <1530801.palqu9XdN4@1337h4x0r>
	<5456835.U3gAI91RM4@calzone> <53E61DDA.5030307@certimix.com>
Message-ID: <CACh7GpGF1z6nNNvs8aDG-P8EZ=p55oJscxOC_mF6kVqffhe-bA@mail.gmail.com>

On Sat, Aug 9, 2014 at 6:10 AM, Sergio Lerner <sergiolerner at certimix.com>
wrote:

>  Hi Tim,
>  It's clear from the paper that the second party in the protocol can
> de-anonymize the first party. So it's seems that dishonest shufflers would
> prefer to be in that position in the queue.
>

That's not clear to me. The 2nd party doesn't know how the 3rd, 4th, 5th,
etc. parties shuffled the outputs, since it doesn't have their decryption
keys.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140809/c4a74ebd/attachment.html>

From secondisogeny at gmail.com  Sun Aug 10 00:34:19 2014
From: secondisogeny at gmail.com (second isogeny)
Date: Sat, 9 Aug 2014 17:34:19 -0700
Subject: [Bitcoin-development] BIP32 - invalidation
Message-ID: <CAFWhrvR+4wsMwzjvqb7w7XmhESagzc_0pvQuGx3Fn4qeWFbinA@mail.gmail.com>

> Does anyone see any concerns when it comes to security of the proposed
> change?

Yes.  This proposal is less secure.

It is incompatible in theory with existing implementations of the
specification.  The incompatibility is also a potentially a security
problem because it may cause users to believe a key is worthless when
it is not or to lose funds when they are unable to spend them.

It is also an untimely proposal and would be inconsiderate other parties
who have done the work to produce correct and compatible implementations.

> In case I_L >= n assign I_L := I_L mod n.

This will make the selection of private keys uneven.

The unevenness is small and it is unlikely to very matter much but it
is objectively less secure.  Future advances in cryptography may make
the distinction more important.  The change would eliminate any hope of
the specification ever having provable security equal to random keys.

The bignum modulo operation also requires complex additional logic and is
just as likely to remain untested in implementations, though unit-testing
can test these cases by replacing the hash function.

Because of layering no suitable modulo may be available and an incorrect
implementation could create a devastating weakness, like reflecting a
large class of keys to a small number of values.  A similar error would
be unlikely for an incorrect implementation of skipping and someone who
managed to still fail would likely have failed either way.

> most of the implementations don't do the checking at all, because tjen
> it's rather hard at application level to implement skipping logic. OTOH

There are many corner cases which must be handled in cryptographic
software.

You must handle the point at infinity cases, you must handle the signature
having a value of zero (or you leak the private key), in the point
arithemetics you must handle the special case of adding colinear points.

If someone is unprepared to deal with these and many other complications
they may want to leave writing this kind of software for other people.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140809/8da85020/attachment.html>

From elombrozo at gmail.com  Sun Aug 10 01:20:09 2014
From: elombrozo at gmail.com (Eric Lombrozo)
Date: Sat, 9 Aug 2014 18:20:09 -0700
Subject: [Bitcoin-development] BIP32 - invalidation
In-Reply-To: <CAFWhrvR+4wsMwzjvqb7w7XmhESagzc_0pvQuGx3Fn4qeWFbinA@mail.gmail.com>
References: <CAFWhrvR+4wsMwzjvqb7w7XmhESagzc_0pvQuGx3Fn4qeWFbinA@mail.gmail.com>
Message-ID: <501F55C1-6307-487B-91D8-9CC0193DA747@gmail.com>

Does bitcoin properly handle the case of a hash collision? no - because it is considered too unlikely. The case of I_L >= n is also astronomically unlikely, so it's more a matter of improved performance and simpler data structures under expected circumstances and taking that less than 1 in 2^127 chance that it will fail, in which case we can recover by moving everything over to a new tree.

-Eric Lombrozo



On Aug 9, 2014, at 5:34 PM, second isogeny <secondisogeny at gmail.com> wrote:

> > Does anyone see any concerns when it comes to security of the proposed
> > change?
> 
> Yes.  This proposal is less secure.
> 
> It is incompatible in theory with existing implementations of the
> specification.  The incompatibility is also a potentially a security
> problem because it may cause users to believe a key is worthless when
> it is not or to lose funds when they are unable to spend them.
> 
> It is also an untimely proposal and would be inconsiderate other parties
> who have done the work to produce correct and compatible implementations.
> 
> > In case I_L >= n assign I_L := I_L mod n.
> 
> This will make the selection of private keys uneven.
> 
> The unevenness is small and it is unlikely to very matter much but it
> is objectively less secure.  Future advances in cryptography may make
> the distinction more important.  The change would eliminate any hope of
> the specification ever having provable security equal to random keys.
> 
> The bignum modulo operation also requires complex additional logic and is
> just as likely to remain untested in implementations, though unit-testing
> can test these cases by replacing the hash function.
> 
> Because of layering no suitable modulo may be available and an incorrect
> implementation could create a devastating weakness, like reflecting a
> large class of keys to a small number of values.  A similar error would
> be unlikely for an incorrect implementation of skipping and someone who
> managed to still fail would likely have failed either way.
> 
> > most of the implementations don't do the checking at all, because tjen
> > it's rather hard at application level to implement skipping logic. OTOH
> 
> There are many corner cases which must be handled in cryptographic
> software.
> 
> You must handle the point at infinity cases, you must handle the signature
> having a value of zero (or you leak the private key), in the point
> arithemetics you must handle the special case of adding colinear points.
> 
> If someone is unprepared to deal with these and many other complications
> they may want to leave writing this kind of software for other people.
> 
> ------------------------------------------------------------------------------
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 801 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140809/1bb514b2/attachment.sig>

From mbde at bitwatch.co  Sun Aug 10 13:42:41 2014
From: mbde at bitwatch.co (mbde at bitwatch.co)
Date: Sun, 10 Aug 2014 15:42:41 +0200
Subject: [Bitcoin-development] Synchronization: 19.5 % orphaned blocks at
	height 197'324
Message-ID: <53E776D1.1010503@bitwatch.co>

Hello all,

I'm currently synchronizing a new node and right now, at a progress of a
height of 197'324 blocks, I count in my debug.log an aweful amount of
38'447 orphaned blocks which is about 19.5 %.

It has been I while since I watched the synchronization process closely,
but this number seems pretty high to me.

I'm wondering about the following: would it be possible for a malicious
party to generate chains of blocks with low difficulity which are not
part of the main chain to slow down the sync process?


Build and version information:
https://github.com/jmcorgan/bitcoin/tree/026686c7de76dfde6fcacfc3d667fb3418a946a7
(sipa/jmcorgan address index)
Rebased with:
https://github.com/bitcoin/bitcoin/tree/94e1b9e05b96e4fe639e5b07b7a53ea216170962
(almost up-to-date mainline)

Compressed debug.log attached:
https://www.dropbox.com/s/uvtd91xiwmdmun7/debug.7z?m=
(filesize: 7.67 MB, uncompressed: 41.3 MB)



From bob_bitcoin at mcelrath.org  Sun Aug 10 14:07:19 2014
From: bob_bitcoin at mcelrath.org (Bob McElrath)
Date: Sun, 10 Aug 2014 14:07:19 +0000
Subject: [Bitcoin-development] Synchronization: 19.5 % orphaned blocks
 at height 197'324
In-Reply-To: <53E776D1.1010503@bitwatch.co>
References: <53E776D1.1010503@bitwatch.co>
Message-ID: <20140810140719.GA20493@mcelrath.org>

I had the same problem (repeatedly) which came down a hardware problem.  Bitcoin
more than other applications is very sensitive to single bit flips in memory or
during computation.  (In the end I under-clocked my CPU and RAM to fix the
problem)

Attached is a small python script which will run sha256 on random data
repeatedly and will print a message if a mismatch is found.  For me it took many
hours of running before a sha256 mismatch, but one is enough to fork the
blockchain.

mbde at bitwatch.co [mbde at bitwatch.co] wrote:
> Hello all,
> 
> I'm currently synchronizing a new node and right now, at a progress of a
> height of 197'324 blocks, I count in my debug.log an aweful amount of
> 38'447 orphaned blocks which is about 19.5 %.
> 
> It has been I while since I watched the synchronization process closely,
> but this number seems pretty high to me.
> 
> I'm wondering about the following: would it be possible for a malicious
> party to generate chains of blocks with low difficulity which are not
> part of the main chain to slow down the sync process?
> 
> 
> Build and version information:
> https://github.com/jmcorgan/bitcoin/tree/026686c7de76dfde6fcacfc3d667fb3418a946a7
> (sipa/jmcorgan address index)
> Rebased with:
> https://github.com/bitcoin/bitcoin/tree/94e1b9e05b96e4fe639e5b07b7a53ea216170962
> (almost up-to-date mainline)
> 
> Compressed debug.log attached:
> https://www.dropbox.com/s/uvtd91xiwmdmun7/debug.7z?m=
> (filesize: 7.67 MB, uncompressed: 41.3 MB)
> 
> ------------------------------------------------------------------------------
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
--
Cheers, Bob McElrath

"The individual has always had to struggle to keep from being overwhelmed by
the tribe.  If you try it, you will be lonely often, and sometimes frightened.
But no price is too high to pay for the privilege of owning yourself." 
    -- Friedrich Nietzsche
-------------- next part --------------
A non-text attachment was scrubbed...
Name: sha256check.py
Type: text/x-python
Size: 767 bytes
Desc: not available
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140810/0bbd1777/attachment.py>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 198 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140810/0bbd1777/attachment.sig>

From jgarzik at bitpay.com  Sun Aug 10 14:20:54 2014
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Sun, 10 Aug 2014 10:20:54 -0400
Subject: [Bitcoin-development] Synchronization: 19.5 % orphaned blocks
 at height 197'324
In-Reply-To: <53E776D1.1010503@bitwatch.co>
References: <53E776D1.1010503@bitwatch.co>
Message-ID: <CAJHLa0MPe-Sb_Lf_+rrcFTSsVAwBJROQNMDbTRg3eqWJtCd0pw@mail.gmail.com>

This issue is being worked on, under the category of "headers first
synchronization."

Until that is finished, it is recommended that you download
bootstrap.dat via torrent:
https://bitcointalk.org/index.php?topic=145386.0


On Sun, Aug 10, 2014 at 9:42 AM, mbde at bitwatch.co <mbde at bitwatch.co> wrote:
> Hello all,
>
> I'm currently synchronizing a new node and right now, at a progress of a
> height of 197'324 blocks, I count in my debug.log an aweful amount of
> 38'447 orphaned blocks which is about 19.5 %.
>
> It has been I while since I watched the synchronization process closely,
> but this number seems pretty high to me.
>
> I'm wondering about the following: would it be possible for a malicious
> party to generate chains of blocks with low difficulity which are not
> part of the main chain to slow down the sync process?
>
>
> Build and version information:
> https://github.com/jmcorgan/bitcoin/tree/026686c7de76dfde6fcacfc3d667fb3418a946a7
> (sipa/jmcorgan address index)
> Rebased with:
> https://github.com/bitcoin/bitcoin/tree/94e1b9e05b96e4fe639e5b07b7a53ea216170962
> (almost up-to-date mainline)
>
> Compressed debug.log attached:
> https://www.dropbox.com/s/uvtd91xiwmdmun7/debug.7z?m=
> (filesize: 7.67 MB, uncompressed: 41.3 MB)
>
> ------------------------------------------------------------------------------
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development



-- 
Jeff Garzik
Bitcoin core developer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From pieter.wuille at gmail.com  Sun Aug 10 18:07:54 2014
From: pieter.wuille at gmail.com (Pieter Wuille)
Date: Sun, 10 Aug 2014 20:07:54 +0200
Subject: [Bitcoin-development] Synchronization: 19.5 % orphaned blocks
 at height 197'324
In-Reply-To: <20140810140719.GA20493@mcelrath.org>
References: <53E776D1.1010503@bitwatch.co>
	<20140810140719.GA20493@mcelrath.org>
Message-ID: <CAPg+sBhPaO3oxXhuKN=YDZZZmW5pAaC2ay0uVHhTOB1UirUMaA@mail.gmail.com>

On Sun, Aug 10, 2014 at 4:07 PM, Bob McElrath <bob_bitcoin at mcelrath.org> wrote:
> I had the same problem (repeatedly) which came down a hardware problem.

This is actually an independent problem (though something to be aware
of). Flaky hardware can make synchronization fail completely - as it
relies on being able to exactly assess the validity of everything in
the blockchain.

Stilll...

> mbde at bitwatch.co [mbde at bitwatch.co] wrote:
>> Hello all,
>>
>> I'm currently synchronizing a new node and right now, at a progress of a
>> height of 197'324 blocks, I count in my debug.log an aweful amount of
>> 38'447 orphaned blocks which is about 19.5 %.
>>
>> It has been I while since I watched the synchronization process closely,
>> but this number seems pretty high to me.

Orphan blocks during synchronization are unfortunately very common,
and the result of a mostly broken download logic in the client. They
are blocks that are further ahead in the chain than the point where
you're currently synchronized to, and thus can't be validated yet.
Note that 'orphan' here means 'we do not know the parent'; it doesn't
just mean 'not in the main chain'. They are blocks that are received
out of order.

As Jeff mentions, headers-first synchronization fixes this problem
(and many other download-logic related things), by first verifying the
headers in the chain (thus already having partially validated
everything), and then downloading the blocks (in not necessarily the
right order) anymore, from multiple peers in parallel. There is
currently a pull request for it, but it's not production ready
(#4468).

>> I'm wondering about the following: would it be possible for a malicious
>> party to generate chains of blocks with low difficulity which are not
>> part of the main chain to slow down the sync process?

Yes and no. While you're still synchronization, and don't actually
know the best chain, a peer could send you stale branches (with valid
proof of work), which you would accept, store and process. But it has
to be done very early, as once you learn of a good-enough chain, a
branch with more proof of work would be requires due to some
heuristics designed to exactly prevent such an attack.

-- 
Pieter



From ctpacia at gmail.com  Mon Aug 11 06:25:27 2014
From: ctpacia at gmail.com (Chris Pacia)
Date: Mon, 11 Aug 2014 02:25:27 -0400
Subject: [Bitcoin-development] CoinShuffle: decentralized CoinJoin
 without trusted third parties
In-Reply-To: <8137823.B0x87S28xY@calzone>
References: <8137823.B0x87S28xY@calzone>
Message-ID: <CAB+qUq6_ukUYnBkb3exOM+rSRSBz1ho2j60G1oxnLx4_zM91SQ@mail.gmail.com>

One issue I do see is the protocol requires participants to check the
inputs submitted by others are valid. Lite clients (at least of the p2p
variety) cannot perform this check.

You could skip the verification part and if the inputs turn out to be
invalid then you'll find out when it doesn't confirm. This would problem
open the protocol up to dos attacks and prevent part of the "blame" phase
from working properly.

Alternatively you can have the participants submit the merkle proof for the
input. This would require inputs to have at least one confirmation, however.
On Aug 6, 2014 6:42 PM, "Tim Ruffing" <tim.ruffing at mmci.uni-saarland.de>
wrote:

> Hey,
>
> We (a group of researchers in Germany) propose a decentralized protocol for
> CoinJoin, a way to mix coins among users to improve anonymity. Our
> protocol is
> called CoinShuffle. We believe that CoinShuffle is a way to implement
> CoinJoin
> in the original spirit of Bitcoin, i.e., decentralized and without trusted
> third parties. (If you are not familiar with CoinJoin, the idea is
> explained
> here: https://bitcointalk.org/index.php?topic=279249.0 )
>
> The protocol is essentially a clever way to create a CoinJoin transaction.
> Recall that the idea of CoinJoin is mixing with one SINGLE transaction that
> has multiple input addresses and multiple fresh output addresses (i.e., one
> pair of addresses per user). The advantage of CoinJoin over mixing with a
> server or trusted party is that nobody can steal coins. Each user can
> check if
> the single transaction sends enough coins to his fresh output address. If
> this
> is not the case, the user can just refuse to sign the transaction and
> nothing
> (bad) happens.
>
> The difficulty in CoinJoin is to let the participants announce their fresh
> output addresses without breaking anonymity: Of course, if a participant of
> the protocol just announces "I have 1 BTC at address X now" and "I would
> like
> to have it back at address Y", then everybody can link X and Y and mixing
> is
> useless. A naive approach is to send these two messages via a secure
> channel
> to a server that organizes the whole mixing. While the server cannot steal
> coins, the server still has to be trusted for anonymity, because it knows
> which input addresses belong to which output addresses.
>
> We present the list of CoinShuffle's features at the end of this e-mail. An
> overview over the technical details can be found on the project page:
> http://crypsys.mmci.uni-saarland.de/projects/CoinShuffle/
>
> Moreover, for the full details, have a look at the research paper on
> CoinShuffle that can be found here:
> http://crypsys.mmci.uni-saarland.de/projects/CoinShuffle/coinshuffle.pdf
>
> The paper has been accepted at a major European academic conference on
> security (ESORICS). We will present the idea there.
>
> Our Proof-of-concept Implementation
> -----------------------------------
> There is a proof-of-concept implementation (written in Python) available on
> our project page. It is really only a proof-of-concept and it implements
> only
> the announcement of the addresses, not the creation of the transaction.
> Moreover, the code is CERTAINLY INSECURE and not well-written; our only
> goal
> was to demonstrate feasibility and estimate the performance of our
> approach.
>
>
> Our Future Plans
> ----------------
> Now we are planning a full, open-source implementation of the protocol. Of
> course, we would like to build on top of an existing wide-spread client.
> Since
> we do not have much experience in the design of existing Bitcoin clients,
> we
> would appreciate any help in the process. In particular, we did not decide
> which of the existing clients we would like to extend. Any hints towards
> this
> decisions would very helpful. Help in design and coding would be great but
> we
> also would like to hear your comments, criticism, and improvements for the
> protocol itself.
>
> CoinShuffle Features
> --------------------
> CoinShuffle has the following features:
>
>  - Decentralization / no third party:
> There is no (trusted or untrusted) third party in a run of the protocol.
> (Still, as in all mixing solutions, users need some way to gather together
> before they can run the protocol. This can be done via a P2P protocol if a
> decentralized solution is desired also for this step.)
>
>
>  - Unlinkability of input and output addresses:
> Nobody, in particular no server (there is none!), can link input and output
> addresses of a mixing transaction, as long as there are at least two honest
> participants in run of the protocol.
>
> (This is not a weakness: If there is only one honest participant,
> meaningful
> mixing is just impossible, no matter how it is organized. If all the other
> participants collude, they know all their input and output addresses and
> can
> immediately determine the output address of the honest participant.)
>
>  - Security against thefts:
> As explained above, nobody can steal coins during the mixing because of the
> CoinJoin principle.
> Every participant can verify that his money will not be stolen. Otherwise,
> he
> refuses to sign the transaction and nothing will happen.
>
>  - Robustness against denial-of-service:
> In CoinJoin, a single malicious (or malfunctioning) client suffices to stop
> the whole protocol (e.g., by just refusing to sing the transaction without
> a
> proper reason.) This can easily lead to DoS attacks but these can be
> countered
> in CoinShuffle.
>
> While in case of disruption, the current run of the protocol has to stop,
> CoinShuffle addresses this problem as follows:  In case of active
> disruption,
> i.e., some participant sends wrong messages, the protocol provides a proof
> of
> this misbehavior. Then the honest protocol parties can start a new run of
> the
> protocol without the misbehaving participant. Also in case of passive
> disruption, i.e., some participant does not respond (for whatever reason),
> the
> remaining participants can agree on starting a new run without this
> participant. This ensures that the protocol will finally succeed even in
> the
> presence of malicious participant (although this can take quite a while
> then).
>
>  - Only public-key encryption and signatures:
> The protocol requires only well-established cryptographic primitives.
> Besides
> signatures and hash functions (that are already used by Bitcoin), only
> standard public-key encryption is necessary.
>
>  - Efficiency:
> A run of the protocol with 30 participants takes less than 100 seconds (in
> a
> setting with reasonable bandwidth and delay). This is not much, given that
> 10
> min (on average) are required to confirm the mixing transaction anyway.
>
> The costs are almost completely caused by communication. The computation
> overhead is minimal. (This is the main achievement actually. In theory, it
> is
> clear that a protocol with all the properties can be built. However,
> generic
> constructions cannot be used in practice yet, because the computation and
> communication costs are huge.)
>
> - Compatibility:
> As CoinShuffle works on top of Bitcoin, it is fully compatible with the
> current Bitcoin system. No changes to the Bitcoin protocol are required.
>
>
> By the way: The NXT cryptocurrency picked up our idea and an
> implementation of
> CoinShuffle for a part of NXT is under way. (
> https://twitter.com/comefrombeyond/status/485429369268350977 )
>
>
> TL,DR:
> Mixing is the way to improve anonymity in Bitcoin now, as it does not
> require
> changes to the Bitcoin protocol. We propose CoinShuffle, a decentralized
> protocol to perform mixing in a secure way without trusted third parties,
> see
> http://crypsys.mmci.uni-saarland.de/projects/CoinShuffle/ for a technical
> overview. Our next step is to implement the protocol. Help in design and
> coding would be great but we also would like to hear your comments,
> criticism,
> and improvements for the protocol itself.
>
> Best,
> Tim Ruffing, Pedro Moreno-Sanchez, Aniket Kate
>
>
> ------------------------------------------------------------------------------
> Infragistics Professional
> Build stunning WinForms apps today!
> Reboot your WinForms applications with our WinForms controls.
> Build a bridge from your legacy apps to the future.
>
> http://pubads.g.doubleclick.net/gampad/clk?id=153845071&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140811/21009e71/attachment.html>

From ctpacia at gmail.com  Mon Aug 11 06:30:16 2014
From: ctpacia at gmail.com (Chris Pacia)
Date: Mon, 11 Aug 2014 02:30:16 -0400
Subject: [Bitcoin-development] CoinShuffle: decentralized CoinJoin
 without trusted third parties
In-Reply-To: <CAB+qUq6_ukUYnBkb3exOM+rSRSBz1ho2j60G1oxnLx4_zM91SQ@mail.gmail.com>
References: <8137823.B0x87S28xY@calzone>
	<CAB+qUq6_ukUYnBkb3exOM+rSRSBz1ho2j60G1oxnLx4_zM91SQ@mail.gmail.com>
Message-ID: <CAB+qUq4BcQPFHVR_odG=yJ5OAKFdn_Kh8C4-m_g+kMVvrREgzg@mail.gmail.com>

Actually getUTXO would probably work here as well. It isn't authenticated
but it should be good enough for this purpose. The worst that would happen
is the tx doesn't confirm.
On Aug 11, 2014 2:25 AM, "Chris Pacia" <ctpacia at gmail.com> wrote:

> One issue I do see is the protocol requires participants to check the
> inputs submitted by others are valid. Lite clients (at least of the p2p
> variety) cannot perform this check.
>
> You could skip the verification part and if the inputs turn out to be
> invalid then you'll find out when it doesn't confirm. This would problem
> open the protocol up to dos attacks and prevent part of the "blame" phase
> from working properly.
>
> Alternatively you can have the participants submit the merkle proof for
> the input. This would require inputs to have at least one confirmation,
> however.
> On Aug 6, 2014 6:42 PM, "Tim Ruffing" <tim.ruffing at mmci.uni-saarland.de>
> wrote:
>
>> Hey,
>>
>> We (a group of researchers in Germany) propose a decentralized protocol
>> for
>> CoinJoin, a way to mix coins among users to improve anonymity. Our
>> protocol is
>> called CoinShuffle. We believe that CoinShuffle is a way to implement
>> CoinJoin
>> in the original spirit of Bitcoin, i.e., decentralized and without trusted
>> third parties. (If you are not familiar with CoinJoin, the idea is
>> explained
>> here: https://bitcointalk.org/index.php?topic=279249.0 )
>>
>> The protocol is essentially a clever way to create a CoinJoin transaction.
>> Recall that the idea of CoinJoin is mixing with one SINGLE transaction
>> that
>> has multiple input addresses and multiple fresh output addresses (i.e.,
>> one
>> pair of addresses per user). The advantage of CoinJoin over mixing with a
>> server or trusted party is that nobody can steal coins. Each user can
>> check if
>> the single transaction sends enough coins to his fresh output address. If
>> this
>> is not the case, the user can just refuse to sign the transaction and
>> nothing
>> (bad) happens.
>>
>> The difficulty in CoinJoin is to let the participants announce their fresh
>> output addresses without breaking anonymity: Of course, if a participant
>> of
>> the protocol just announces "I have 1 BTC at address X now" and "I would
>> like
>> to have it back at address Y", then everybody can link X and Y and mixing
>> is
>> useless. A naive approach is to send these two messages via a secure
>> channel
>> to a server that organizes the whole mixing. While the server cannot steal
>> coins, the server still has to be trusted for anonymity, because it knows
>> which input addresses belong to which output addresses.
>>
>> We present the list of CoinShuffle's features at the end of this e-mail.
>> An
>> overview over the technical details can be found on the project page:
>> http://crypsys.mmci.uni-saarland.de/projects/CoinShuffle/
>>
>> Moreover, for the full details, have a look at the research paper on
>> CoinShuffle that can be found here:
>> http://crypsys.mmci.uni-saarland.de/projects/CoinShuffle/coinshuffle.pdf
>>
>> The paper has been accepted at a major European academic conference on
>> security (ESORICS). We will present the idea there.
>>
>> Our Proof-of-concept Implementation
>> -----------------------------------
>> There is a proof-of-concept implementation (written in Python) available
>> on
>> our project page. It is really only a proof-of-concept and it implements
>> only
>> the announcement of the addresses, not the creation of the transaction.
>> Moreover, the code is CERTAINLY INSECURE and not well-written; our only
>> goal
>> was to demonstrate feasibility and estimate the performance of our
>> approach.
>>
>>
>> Our Future Plans
>> ----------------
>> Now we are planning a full, open-source implementation of the protocol. Of
>> course, we would like to build on top of an existing wide-spread client.
>> Since
>> we do not have much experience in the design of existing Bitcoin clients,
>> we
>> would appreciate any help in the process. In particular, we did not decide
>> which of the existing clients we would like to extend. Any hints towards
>> this
>> decisions would very helpful. Help in design and coding would be great
>> but we
>> also would like to hear your comments, criticism, and improvements for the
>> protocol itself.
>>
>> CoinShuffle Features
>> --------------------
>> CoinShuffle has the following features:
>>
>>  - Decentralization / no third party:
>> There is no (trusted or untrusted) third party in a run of the protocol.
>> (Still, as in all mixing solutions, users need some way to gather together
>> before they can run the protocol. This can be done via a P2P protocol if a
>> decentralized solution is desired also for this step.)
>>
>>
>>  - Unlinkability of input and output addresses:
>> Nobody, in particular no server (there is none!), can link input and
>> output
>> addresses of a mixing transaction, as long as there are at least two
>> honest
>> participants in run of the protocol.
>>
>> (This is not a weakness: If there is only one honest participant,
>> meaningful
>> mixing is just impossible, no matter how it is organized. If all the other
>> participants collude, they know all their input and output addresses and
>> can
>> immediately determine the output address of the honest participant.)
>>
>>  - Security against thefts:
>> As explained above, nobody can steal coins during the mixing because of
>> the
>> CoinJoin principle.
>> Every participant can verify that his money will not be stolen.
>> Otherwise, he
>> refuses to sign the transaction and nothing will happen.
>>
>>  - Robustness against denial-of-service:
>> In CoinJoin, a single malicious (or malfunctioning) client suffices to
>> stop
>> the whole protocol (e.g., by just refusing to sing the transaction
>> without a
>> proper reason.) This can easily lead to DoS attacks but these can be
>> countered
>> in CoinShuffle.
>>
>> While in case of disruption, the current run of the protocol has to stop,
>> CoinShuffle addresses this problem as follows:  In case of active
>> disruption,
>> i.e., some participant sends wrong messages, the protocol provides a
>> proof of
>> this misbehavior. Then the honest protocol parties can start a new run of
>> the
>> protocol without the misbehaving participant. Also in case of passive
>> disruption, i.e., some participant does not respond (for whatever
>> reason), the
>> remaining participants can agree on starting a new run without this
>> participant. This ensures that the protocol will finally succeed even in
>> the
>> presence of malicious participant (although this can take quite a while
>> then).
>>
>>  - Only public-key encryption and signatures:
>> The protocol requires only well-established cryptographic primitives.
>> Besides
>> signatures and hash functions (that are already used by Bitcoin), only
>> standard public-key encryption is necessary.
>>
>>  - Efficiency:
>> A run of the protocol with 30 participants takes less than 100 seconds
>> (in a
>> setting with reasonable bandwidth and delay). This is not much, given
>> that 10
>> min (on average) are required to confirm the mixing transaction anyway.
>>
>> The costs are almost completely caused by communication. The computation
>> overhead is minimal. (This is the main achievement actually. In theory,
>> it is
>> clear that a protocol with all the properties can be built. However,
>> generic
>> constructions cannot be used in practice yet, because the computation and
>> communication costs are huge.)
>>
>> - Compatibility:
>> As CoinShuffle works on top of Bitcoin, it is fully compatible with the
>> current Bitcoin system. No changes to the Bitcoin protocol are required.
>>
>>
>> By the way: The NXT cryptocurrency picked up our idea and an
>> implementation of
>> CoinShuffle for a part of NXT is under way. (
>> https://twitter.com/comefrombeyond/status/485429369268350977 )
>>
>>
>> TL,DR:
>> Mixing is the way to improve anonymity in Bitcoin now, as it does not
>> require
>> changes to the Bitcoin protocol. We propose CoinShuffle, a decentralized
>> protocol to perform mixing in a secure way without trusted third parties,
>> see
>> http://crypsys.mmci.uni-saarland.de/projects/CoinShuffle/ for a technical
>> overview. Our next step is to implement the protocol. Help in design and
>> coding would be great but we also would like to hear your comments,
>> criticism,
>> and improvements for the protocol itself.
>>
>> Best,
>> Tim Ruffing, Pedro Moreno-Sanchez, Aniket Kate
>>
>>
>> ------------------------------------------------------------------------------
>> Infragistics Professional
>> Build stunning WinForms apps today!
>> Reboot your WinForms applications with our WinForms controls.
>> Build a bridge from your legacy apps to the future.
>>
>> http://pubads.g.doubleclick.net/gampad/clk?id=153845071&iu=/4140/ostg.clktrk
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>
>>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140811/a7c006fb/attachment.html>

From tim.ruffing at mmci.uni-saarland.de  Mon Aug 11 11:38:39 2014
From: tim.ruffing at mmci.uni-saarland.de (Tim Ruffing)
Date: Mon, 11 Aug 2014 13:38:39 +0200
Subject: [Bitcoin-development] CoinShuffle: decentralized CoinJoin
	without trusted third parties
In-Reply-To: <CAB+qUq4BcQPFHVR_odG=yJ5OAKFdn_Kh8C4-m_g+kMVvrREgzg@mail.gmail.com>
References: <8137823.B0x87S28xY@calzone>
	<CAB+qUq6_ukUYnBkb3exOM+rSRSBz1ho2j60G1oxnLx4_zM91SQ@mail.gmail.com>
	<CAB+qUq4BcQPFHVR_odG=yJ5OAKFdn_Kh8C4-m_g+kMVvrREgzg@mail.gmail.com>
Message-ID: <1446506.FNP3GnOpud@calzone>

Hmm, you are right. Lightweight clients are an interesting point, we have to 
think about a policy for them.

As you said, the worst case is that the tx will not confirm. So the only 
possible attack is DoS. For clients that rely on servers it's reasonable to 
trust their servers not to perform DoS. (Anyway, the servers could do worse 
attacks.)

For SPV-clients (without servers), I'm not sure at the moment. Something like 
getUTXO seems to be a possibility. I think even SPV-clients can verify the 
validity of the tx that created the input that is designated for mixing. Then 
the only remaining reason why it could be invalid is that the input could have 
been spent already otherwise. But in this case, only one honest client with 
full information would suffice: a signed transaction that spends the money 
would convince even SPV-clients that the participant with this inputs tries to 
cheat. This transaction could even be provided by lightweight client that got 
if from a server; the transaction is signed by the cheating participant 
anyway.

Tim

On Monday 11 August 2014 02:30:16 Chris Pacia wrote:
> Actually getUTXO would probably work here as well. It isn't authenticated
> but it should be good enough for this purpose. The worst that would happen
> is the tx doesn't confirm.
> 
> On Aug 11, 2014 2:25 AM, "Chris Pacia" <ctpacia at gmail.com> wrote:
> > One issue I do see is the protocol requires participants to check the
> > inputs submitted by others are valid. Lite clients (at least of the p2p
> > variety) cannot perform this check.
> > 
> > You could skip the verification part and if the inputs turn out to be
> > invalid then you'll find out when it doesn't confirm. This would problem
> > open the protocol up to dos attacks and prevent part of the "blame" phase
> > from working properly.
> > 
> > Alternatively you can have the participants submit the merkle proof for
> > the input. This would require inputs to have at least one confirmation,
> > however.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 648 bytes
Desc: This is a digitally signed message part.
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140811/a827a309/attachment.sig>

From mike at plan99.net  Mon Aug 11 12:08:24 2014
From: mike at plan99.net (Mike Hearn)
Date: Mon, 11 Aug 2014 14:08:24 +0200
Subject: [Bitcoin-development] CoinShuffle: decentralized CoinJoin
 without trusted third parties
In-Reply-To: <1446506.FNP3GnOpud@calzone>
References: <8137823.B0x87S28xY@calzone>
	<CAB+qUq6_ukUYnBkb3exOM+rSRSBz1ho2j60G1oxnLx4_zM91SQ@mail.gmail.com>
	<CAB+qUq4BcQPFHVR_odG=yJ5OAKFdn_Kh8C4-m_g+kMVvrREgzg@mail.gmail.com>
	<1446506.FNP3GnOpud@calzone>
Message-ID: <CANEZrP0CLMgCsJnW4-CSLnH_n4Gzb_BuiqOSAn29x-qJM1vEJA@mail.gmail.com>

Putting the efficacy of coinjoin to one side:

On Mon, Aug 11, 2014 at 1:38 PM, Tim Ruffing <
tim.ruffing at mmci.uni-saarland.de> wrote:

> Then the only remaining reason why it could be invalid is that the input
> could have
> been spent already otherwise. But in this case, only one honest client with
> full information would suffice: a signed transaction that spends the money
> would convince even SPV-clients that the participant with this inputs
> tries to
> cheat.


Bear in mind that getutxo does not return the spending transaction - it
can't because the UTXO set doesn't record this information (a spent txo is
deleted).

However, if you have sufficient peers and one is honest, the divergence can
be detected and the operation stopped/the user alerted. If all peers are
lying i.e. your internet connection is controlled by an attacker, it
doesn't really make much difference because they could swallow the
transaction you're trying to broadcast anyway. Ultimately if your peers
think a TXO is spent and refuse to relay transactions that spend them, you
can't do much about it even in the non-SPV context: you *must* be able to
reach at least one peer who believes in the same world as you do.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140811/e6f23b2d/attachment.html>

From mark at monetize.io  Mon Aug 11 17:06:48 2014
From: mark at monetize.io (Mark Friedenbach)
Date: Mon, 11 Aug 2014 10:06:48 -0700
Subject: [Bitcoin-development] CoinShuffle: decentralized CoinJoin
 without trusted third parties
In-Reply-To: <1446506.FNP3GnOpud@calzone>
References: <8137823.B0x87S28xY@calzone>
	<CAB+qUq6_ukUYnBkb3exOM+rSRSBz1ho2j60G1oxnLx4_zM91SQ@mail.gmail.com>
	<CAB+qUq4BcQPFHVR_odG=yJ5OAKFdn_Kh8C4-m_g+kMVvrREgzg@mail.gmail.com>
	<1446506.FNP3GnOpud@calzone>
Message-ID: <CACh7GpEBocaOdKNEkWXBusyUvin73P+JvjnnZF0m8f7DmJhcvA@mail.gmail.com>

There should not be a requirement at this level to ensure validity. That
would too constrain use cases of implementations of your protocol. It is
not difficult to imagine use cases where parties generate chained
transactions on top of unconfimed transactions. Although malleability
currently makes this difficult to do safely in general, it is not
inconceivable that there are circumstances where it would nevertheless be
safe or otherwise desireable.

It is a good security recommendation that clients validate the inputs to a
shuffle they are participating in. What this means depends on the client --
checking the UTXO set for a full node, making some getutxos queries for a
SPV client. But this should remain a recommendation, not a requirement.


On Mon, Aug 11, 2014 at 4:38 AM, Tim Ruffing <
tim.ruffing at mmci.uni-saarland.de> wrote:

> Hmm, you are right. Lightweight clients are an interesting point, we have
> to
> think about a policy for them.
>
> As you said, the worst case is that the tx will not confirm. So the only
> possible attack is DoS. For clients that rely on servers it's reasonable to
> trust their servers not to perform DoS. (Anyway, the servers could do worse
> attacks.)
>
> For SPV-clients (without servers), I'm not sure at the moment. Something
> like
> getUTXO seems to be a possibility. I think even SPV-clients can verify the
> validity of the tx that created the input that is designated for mixing.
> Then
> the only remaining reason why it could be invalid is that the input could
> have
> been spent already otherwise. But in this case, only one honest client with
> full information would suffice: a signed transaction that spends the money
> would convince even SPV-clients that the participant with this inputs
> tries to
> cheat. This transaction could even be provided by lightweight client that
> got
> if from a server; the transaction is signed by the cheating participant
> anyway.
>
> Tim
>
> On Monday 11 August 2014 02:30:16 Chris Pacia wrote:
> > Actually getUTXO would probably work here as well. It isn't authenticated
> > but it should be good enough for this purpose. The worst that would
> happen
> > is the tx doesn't confirm.
> >
> > On Aug 11, 2014 2:25 AM, "Chris Pacia" <ctpacia at gmail.com> wrote:
> > > One issue I do see is the protocol requires participants to check the
> > > inputs submitted by others are valid. Lite clients (at least of the p2p
> > > variety) cannot perform this check.
> > >
> > > You could skip the verification part and if the inputs turn out to be
> > > invalid then you'll find out when it doesn't confirm. This would
> problem
> > > open the protocol up to dos attacks and prevent part of the "blame"
> phase
> > > from working properly.
> > >
> > > Alternatively you can have the participants submit the merkle proof for
> > > the input. This would require inputs to have at least one confirmation,
> > > however.
>
>
> ------------------------------------------------------------------------------
>
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140811/a7e55076/attachment.html>

From sergiolerner at certimix.com  Tue Aug 12 20:07:25 2014
From: sergiolerner at certimix.com (Sergio Lerner)
Date: Tue, 12 Aug 2014 17:07:25 -0300
Subject: [Bitcoin-development] Improvement to the Test Framework in the
	processing of test blocks
Message-ID: <53EA73FD.6070005@certimix.com>

We've coded and tested changes to the Bitcoin testing framework to allow
the creation and processing of blocks in unit test cases in order to
test ProcessBlock(), CheckBlock(), ActivateBestChain(),
ActivateBestChainStep() and ConnectTip(), including block-chain
reorganizations, majority rules, block version changes and more.
Several new test cases were added to enrich the test suite.

Please review and comment the pull request:

https://github.com/bitcoin/bitcoin/pull/4688

Best regards,
 Sergio Demian Lerner & Timo Hanke



From KingK.Pan at gmail.com  Wed Aug 13 16:27:16 2014
From: KingK.Pan at gmail.com (KingK.Pan)
Date: Thu, 14 Aug 2014 00:27:16 +0800
Subject: [Bitcoin-development] What is the danger if bitcoind startted with
	-flushwallet=false ?
Message-ID: <CAPGavA_OmV5N-4fc3EbjoU+UqFSWUY1bfePHtzAvbo9oYu+ghA@mail.gmail.com>

Hi everybody,

    I tried to reduce the IO of bitcoind, and I found '-flushwallet=false'.
After trying it, my IO reduced greatly.
    But why 'flushwallet' is true by default? Is there any danger if
closing the flush wallet thread?
    I lost all my coins in testnet after one crash with
'-flushwallet=false', was this because of no flush wallet thread?




  --
  Qing Qing Pan
  okcoin.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140814/87d24c91/attachment.html>

From me at ricmoo.com  Wed Aug 13 18:00:22 2014
From: me at ricmoo.com (Richard Moore)
Date: Wed, 13 Aug 2014 14:00:22 -0400
Subject: [Bitcoin-development] Another weird transaction question...
Message-ID: <A6E1C677-89CD-425D-BE36-A2A4C6837165@ricmoo.com>

Hey all,

Sorry to keep bugging you all, as I slowly verify the blockchain one transaction after another with my own implementation, but I have found another transaction that is obviously correct (as it is verified by the legit client) that has me seeking clarification.

This multisig output script:

https://blockchain.info/tx-index/12809044/0  (txid: 274f8be3b7b9b1a220285f5f71f61e2691dd04df9d69bb02a8b3b85f91fb1857)

contains a public key:

00f2b7816db49d55d24df7bdffdbc1e203b424e8cd39f5651ab938e5e4a193569e

Are invalid public keys permitted and silently ignored? Or does the 0x00 prefix have some interesting meaning?

Thanks again,

RicMoo


.???`?.??.???`?.??.???`?.??.???`?.??.???`?.?><(((?>

Richard Moore ~ Founder
Genetic Mistakes Software inc.
phone: (778) 882-6125
email: ricmoo at geneticmistakes.com
www: http://GeneticMistakes.com

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140813/817f6fb3/attachment.html>

From pete at petertodd.org  Wed Aug 13 18:10:32 2014
From: pete at petertodd.org (Peter Todd)
Date: Wed, 13 Aug 2014 11:10:32 -0700
Subject: [Bitcoin-development] Another weird transaction question...
In-Reply-To: <A6E1C677-89CD-425D-BE36-A2A4C6837165@ricmoo.com>
References: <A6E1C677-89CD-425D-BE36-A2A4C6837165@ricmoo.com>
Message-ID: <d2f135de-16cc-41df-8ec5-de3089cf3741@email.android.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256



On 13 August 2014 11:00:22 GMT-07:00, Richard Moore <me at ricmoo.com> wrote:
>Hey all,
>
>Sorry to keep bugging you all, as I slowly verify the blockchain one
>transaction after another with my own implementation, but I have found
>another transaction that is obviously correct (as it is verified by the
>legit client) that has me seeking clarification.
>
>This multisig output script:
>
>https://blockchain.info/tx-index/12809044/0  (txid:
>274f8be3b7b9b1a220285f5f71f61e2691dd04df9d69bb02a8b3b85f91fb1857)
>
>contains a public key:
>
>00f2b7816db49d55d24df7bdffdbc1e203b424e8cd39f5651ab938e5e4a193569e
>
>Are invalid public keys permitted and silently ignored? Or does the
>0x00 prefix have some interesting meaning?

Have you looked at the Bitcoin Core script test cases yet? You might be surprised at what is allowed. Equally, read the source code! In particular follow the block acceptance logic line by line from start to finish.

In any case, the Bitcoin protocol doesn't care whether or not a public key is valid.
-----BEGIN PGP SIGNATURE-----
Version: APG v1.1.1

iQFQBAEBCAA6BQJT66oXMxxQZXRlciBUb2RkIChsb3cgc2VjdXJpdHkga2V5KSA8
cGV0ZUBwZXRlcnRvZGQub3JnPgAKCRAZnIM7qOfwhcgKCACT18WjN11SCuX5qyeq
D5zOtGBsAtPMWr8CJuds4gLIkRtxDxPy9cuIMzwLylaC0yvFSIrG6rAIcqqRpkEH
hcJj2IXyTRVr/mxg3qDzphYuwWQAgUzBgbhPsHtl8SvnbzJgEdXCsErGs3eW6JTR
I5OXeMVT8ZKQVJUKCNGdzlH4673Gh6fIzwW1cPLATt486ByCk5YRXC14IGasxnlg
6IWm4r/I6gOAB7FiPCHm60Q2DJOsX+VEFe3U28Zxlx06i0Ij9JYoKbTDu8e12bSB
YFUBwGCbwWr/Xcygg0nWyrEMVk5dcxk/30asF/dEczHRZo9DNUdKt4IAESd+GGC2
P9g4
=e0do
-----END PGP SIGNATURE-----




From laanwj at gmail.com  Wed Aug 13 20:29:28 2014
From: laanwj at gmail.com (Wladimir)
Date: Wed, 13 Aug 2014 22:29:28 +0200
Subject: [Bitcoin-development] What is the danger if bitcoind startted
	with -flushwallet=false ?
In-Reply-To: <tencent_6F055A157BDF0BD41143F75A@qq.com>
References: <tencent_6F055A157BDF0BD41143F75A@qq.com>
Message-ID: <CA+s+GJCho_X3DT06evc_caHe+bpNv8sg3gUP4-dDqh7STQb-hQ@mail.gmail.com>

On Wed, Aug 13, 2014 at 6:22 PM, ??? <qingqing.pan at okcoin.com> wrote:
> Hi everybody,
>
>     I tried to reduce the IO of bitcoind, and I found '-flushwallet=false'. After trying it, my IO reduced greatly.
>     But why 'flushwallet' is true by default? Is there any danger if closing the flush wallet thread?
>     I lost all my coins in testnet after one crash with '-flushwallet=false', was this because of no flush wallet thread?

When flushwallet is disabled, the wallet is not flushed (written to
disk in a self-contained state) periodically. This means that there's
a larger chance that the wallet database is in inconsistent state when
the process stops unexpectedly. This can happen either due to a crash,
or an external cause such as the power turning off unexpectedly.

With the wallet in non-self-contained state, the next time that you
start bitcoind BerkeleyDB will have to process log files. There is a
non-zero chance that this will fail and manual recovery is needed.

As the wallet is usually critical, it is unwise to disable that option.

Wladimir



From nikita at megiontechnologies.com  Thu Aug 14 19:23:16 2014
From: nikita at megiontechnologies.com (Nikita Schmidt)
Date: Thu, 14 Aug 2014 22:23:16 +0300
Subject: [Bitcoin-development] Presenting a BIP for Shamir's Secret
 Sharing of Bitcoin private keys
In-Reply-To: <CABh=4qMpge4q-CmKNNnxj5C_jGEFhwAVrUHSNbqy3njeUiSHvQ@mail.gmail.com>
References: <CAC7yFxSE8-TWPN-kuFiqdPKMDuprbiVJi7-z-ym+AUyA_f-xJw@mail.gmail.com>
	<CABh=4qNaJht-MnnjEguZ=UOuXN3uQ-s4-dkDUVErbHj6W44J_g@mail.gmail.com>
	<1927948.OEZHQcsQ9n@crushinator> <2025496.b5Y3n7qx8B@crushinator>
	<1582E990-4E14-4EF7-9C9C-AA505B815104@bitsofproof.com>
	<53568B87.8040009@monetize.io>
	<11528A13-5D66-4D2B-BEE0-1C26F9987BC8@bitsofproof.com>
	<CABh=4qPsR1YbhJDeAPjr37Zjqawo9ZFAH43scFnEg7p9a7EkeQ@mail.gmail.com>
	<F292CC2F-BAA7-45ED-801E-1475D94632AF@bitsofproof.com>
	<CAAS2fgR5ciUeFonOXBD1d9b_inOuxQKJ-LaoGmoyjoeQ_KxQxQ@mail.gmail.com>
	<621AAD7D-FDC0-4C3C-B810-8C1F0B088586@bitsofproof.com>
	<CAAS2fgTyndBG=airHoAcW4W2WgFZ61THXP4JGuUQCSWV99tCtg@mail.gmail.com>
	<CAC7yFxQR6oVdASacCefPiuWocvrDHTTnVU4xyVdZTwvMr4ZPNw@mail.gmail.com>
	<CABh=4qMpge4q-CmKNNnxj5C_jGEFhwAVrUHSNbqy3njeUiSHvQ@mail.gmail.com>
Message-ID: <CAC7yFxT+cXFJ4rG46q=HjCppV-J9SMJcPcEpSqyvHMEYJd_bbw@mail.gmail.com>

On 12 May 2014 15:09, Jan M?ller <jan.moller at gmail.com> wrote:
>
> I think having 3 encoding formats (long/short/compact) is over engineered,
> and basically only makes implementing the standard a pain in the rear. From
> a user experience point of view only the long format makes sense, and it is
> only a few bytes longer than the short version.
>

True.  Since nobody has objected, the draft has been reworked and is
much leaner now:
https://github.com/cetuscetus/btctool/blob/bip/bip-xxxx.mediawiki .
The reasons for not making M and checksum fields optional are added to
the Rationale section.

The main difference is that the shared secret can be in encoded form,
e.g. SIPA or BIP38 instead of a plain private key.  This makes SSS a
general purpose container for any kind of secret data.  The benefits
are:
- no need to change the spec to carry another type of content;
- testnet and altcoins do not need any treatment in this spec;
- content-specific metadata, such as compressed/uncompressed,
encrypted/non-encrypted, key inception time point etc., are encoded
together with the secret, rather than provided for separately and
individually in this spec.

As we are now dealing with secrets of arbitrary length, GF(256) as the
underlying field becomes much more advantageous than GF(large prime).

An inconvenience of variable length is that we have no control of the
Base58 prefix.  This was solved by moving the magic prefix outside of
the Base58 encoded content: SSS-abcdefgh.  'SSS-' acts as the
application identifier both to humans and machines, and abcdefgh is
the Base58 encoding of the share without any application/magic bytes.
(This may seem mildly controversial, but is there a better way?)



From ivan.pustogarov at uni.lu  Mon Aug 18 16:46:12 2014
From: ivan.pustogarov at uni.lu (Ivan Pustogarov)
Date: Mon, 18 Aug 2014 18:46:12 +0200
Subject: [Bitcoin-development] Outbound connections rotation
Message-ID: <20140818164543.GB31175@localhost.localdomain>

Hi there,

I'd like to start a discussion on periodic rotation of outbound connections.
E.g. every 2-10 minutes an outbound connections is dropped and replaced
by a new one.

Motivation:
Each bitcoin non-UPnP client behind NAT has 8 outbound connections
which change only rarely (due to occasional remote side disconnections).
A subset of these 8 entry nodes uniquely identifies a user.
An attacker can listen for transactions in Bitcoin network and for each
transaction record the first 8 peers which forwarded the transaction.
If two distinct transactions (with unrelated bitcoin addresses)
come from the same set of 8 peers, the attacker can conclude that they
originated from the same user. This gives another method (in addition
to transaction graph analysis) for an attacker to link different BC
addresses of the same user.
Also note that by default bitcoin clients advertise their public IP
addresses. The attacker can link the advertised IP's to corresponding
8 entry nodes and use it to deanonymise Bitcoin clients.

If a bitcoin client periodically rotates his set of outbound
connections, his 8-peers fingerprint is blurred over time.

Corresponding pull request is #4723.

Some details are here: https://www.cryptolux.org/index.php/Bitcoin

-- 
Ivan



From ivan.pustogarov at uni.lu  Mon Aug 18 16:46:11 2014
From: ivan.pustogarov at uni.lu (Ivan Pustogarov)
Date: Mon, 18 Aug 2014 18:46:11 +0200
Subject: [Bitcoin-development] Outbound connections rotation
Message-ID: <20140818164543.GB31175@localhost.localdomain>

Hi there,

I'd like to start a discussion on periodic rotation of outbound connections.
E.g. every 2-10 minutes an outbound connections is dropped and replaced
by a new one.

Motivation:
Each bitcoin non-UPnP client behind NAT has 8 outbound connections
which change only rarely (due to occasional remote side disconnections).
A subset of these 8 entry nodes uniquely identifies a user.
An attacker can listen for transactions in Bitcoin network and for each
transaction record the first 8 peers which forwarded the transaction.
If two distinct transactions (with unrelated bitcoin addresses)
come from the same set of 8 peers, the attacker can conclude that they
originated from the same user. This gives another method (in addition
to transaction graph analysis) for an attacker to link different BC
addresses of the same user.
Also note that by default bitcoin clients advertise their public IP
addresses. The attacker can link the advertised IP's to corresponding
8 entry nodes and use it to deanonymise Bitcoin clients.

If a bitcoin client periodically rotates his set of outbound
connections, his 8-peers fingerprint is blurred over time.

Corresponding pull request is #4723.

Some details are here: https://www.cryptolux.org/index.php/Bitcoin

-- 
Ivan



From jgarzik at bitpay.com  Mon Aug 18 17:19:15 2014
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Mon, 18 Aug 2014 13:19:15 -0400
Subject: [Bitcoin-development] Outbound connections rotation
In-Reply-To: <20140818164543.GB31175@localhost.localdomain>
References: <20140818164543.GB31175@localhost.localdomain>
Message-ID: <CAJHLa0PvDz5iEad0w7TvM9O3FSjxRu-noRG-KpC7L-ix6Z0i=A@mail.gmail.com>

Simply by observing timing from sufficiently geo-graphically and
network-ly dispersed nodes, you may deduce the original broadcaster of
a transaction.  Rotating peers doesn't help.

That said, periodic rotation can be helpful.  Every 2-10 minutes is excessive.


On Mon, Aug 18, 2014 at 12:46 PM, Ivan Pustogarov
<ivan.pustogarov at uni.lu> wrote:
> Hi there,
>
> I'd like to start a discussion on periodic rotation of outbound connections.
> E.g. every 2-10 minutes an outbound connections is dropped and replaced
> by a new one.
>
> Motivation:
> Each bitcoin non-UPnP client behind NAT has 8 outbound connections
> which change only rarely (due to occasional remote side disconnections).
> A subset of these 8 entry nodes uniquely identifies a user.
> An attacker can listen for transactions in Bitcoin network and for each
> transaction record the first 8 peers which forwarded the transaction.
> If two distinct transactions (with unrelated bitcoin addresses)
> come from the same set of 8 peers, the attacker can conclude that they
> originated from the same user. This gives another method (in addition
> to transaction graph analysis) for an attacker to link different BC
> addresses of the same user.
> Also note that by default bitcoin clients advertise their public IP
> addresses. The attacker can link the advertised IP's to corresponding
> 8 entry nodes and use it to deanonymise Bitcoin clients.
>
> If a bitcoin client periodically rotates his set of outbound
> connections, his 8-peers fingerprint is blurred over time.
>
> Corresponding pull request is #4723.
>
> Some details are here: https://www.cryptolux.org/index.php/Bitcoin
>
> --
> Ivan
>
> ------------------------------------------------------------------------------
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development



-- 
Jeff Garzik
Bitcoin core developer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From gmaxwell at gmail.com  Mon Aug 18 17:21:07 2014
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Mon, 18 Aug 2014 10:21:07 -0700
Subject: [Bitcoin-development] Outbound connections rotation
In-Reply-To: <20140818164543.GB31175@localhost.localdomain>
References: <20140818164543.GB31175@localhost.localdomain>
Message-ID: <CAAS2fgQZaDOtoh+_oaiZh6jMOacSuHbEM=vktBdThDP_7eRH0Q@mail.gmail.com>

On Mon, Aug 18, 2014 at 9:46 AM, Ivan Pustogarov <ivan.pustogarov at uni.lu> wrote:
> Hi there,
> I'd like to start a discussion on periodic rotation of outbound connections.
> E.g. every 2-10 minutes an outbound connections is dropped and replaced
> by a new one.

Connection rotation would be fine for improving a node's knoweldge
about available peers and making the network stronger against
partitioning.

I haven't implemented this because I think your motivation is
_precisely_ opposite the behavior. If you keep a constant set of
outbound peers only those peers learn the origin of your transactions,
and so it is unlikely that any particular attacker will gain strong
evidence. If you rotate where you send out your transactions then with
very high probability a sybil pretending to be many nodes will observe
you transmitting directly.

Ultimately, since the traffic is clear text, if you expect to have any
privacy at all in your broadcasts you should be broadcasting over tor
or i2p.



From mike at plan99.net  Mon Aug 18 17:27:18 2014
From: mike at plan99.net (Mike Hearn)
Date: Mon, 18 Aug 2014 19:27:18 +0200
Subject: [Bitcoin-development] Outbound connections rotation
In-Reply-To: <CAAS2fgQZaDOtoh+_oaiZh6jMOacSuHbEM=vktBdThDP_7eRH0Q@mail.gmail.com>
References: <20140818164543.GB31175@localhost.localdomain>
	<CAAS2fgQZaDOtoh+_oaiZh6jMOacSuHbEM=vktBdThDP_7eRH0Q@mail.gmail.com>
Message-ID: <CANEZrP07ec+Bp3yvhB=QRt_gRTJ=dWPgZiMpzzeiBNki02O3aA@mail.gmail.com>

>
> Connection rotation would be fine for improving a node's knoweldge
> about available peers and making the network stronger against
> partitioning.
>

It's also the first/next step towards decentralising the DNS seeds (for SPV
clients), as it'd allow each node to explore the network and return better
quality results in getaddr.


> If you rotate where you send out your transactions then with
> very high probability a sybil pretending to be many nodes will observe
> you transmitting directly.
>

This is sort of what Tor is going through with their guard nodes and how
often to rotate them.

I think the attack Ivan is talking about does not require sybil attacks to
work though, just listening to lots of peers. Raising the bar to require
the attacker to receive lots of connections seems like a win.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140818/6738e881/attachment.html>

From pieter.wuille at gmail.com  Mon Aug 18 17:35:00 2014
From: pieter.wuille at gmail.com (Pieter Wuille)
Date: Mon, 18 Aug 2014 19:35:00 +0200
Subject: [Bitcoin-development] Outbound connections rotation
In-Reply-To: <CAAS2fgQZaDOtoh+_oaiZh6jMOacSuHbEM=vktBdThDP_7eRH0Q@mail.gmail.com>
References: <20140818164543.GB31175@localhost.localdomain>
	<CAAS2fgQZaDOtoh+_oaiZh6jMOacSuHbEM=vktBdThDP_7eRH0Q@mail.gmail.com>
Message-ID: <CAPg+sBjQv7vrw63KbZf+mUj8W6h8GxdpE7xYbLLFfhm6-aGKdA@mail.gmail.com>

Yes, I believe peer rotation is useful, but not for privacy - just for
improving the network's internal knowledge.

I haven't looked at the implementation yet, but how I imagined it would be
every X minutes you attempt a new outgoing connection, even if you're
already at the outbound limit. Then, if a connection attempt succeeds,
another connection (according to some scoring system) is replaced by it.
Given such a mechanism, plus reasonable assurances that better connections
survive for a longer time, I have no problem with rotating every few
minutes.
On Aug 18, 2014 7:23 PM, "Gregory Maxwell" <gmaxwell at gmail.com> wrote:

> On Mon, Aug 18, 2014 at 9:46 AM, Ivan Pustogarov <ivan.pustogarov at uni.lu>
> wrote:
> > Hi there,
> > I'd like to start a discussion on periodic rotation of outbound
> connections.
> > E.g. every 2-10 minutes an outbound connections is dropped and replaced
> > by a new one.
>
> Connection rotation would be fine for improving a node's knoweldge
> about available peers and making the network stronger against
> partitioning.
>
> I haven't implemented this because I think your motivation is
> _precisely_ opposite the behavior. If you keep a constant set of
> outbound peers only those peers learn the origin of your transactions,
> and so it is unlikely that any particular attacker will gain strong
> evidence. If you rotate where you send out your transactions then with
> very high probability a sybil pretending to be many nodes will observe
> you transmitting directly.
>
> Ultimately, since the traffic is clear text, if you expect to have any
> privacy at all in your broadcasts you should be broadcasting over tor
> or i2p.
>
>
> ------------------------------------------------------------------------------
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140818/cdbcfb48/attachment.html>

From gmaxwell at gmail.com  Mon Aug 18 18:13:14 2014
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Mon, 18 Aug 2014 11:13:14 -0700
Subject: [Bitcoin-development] Fwd:  Outbound connections rotation
In-Reply-To: <CAAS2fgRT8OQzUkneKwpjD15aLZDivT=hgBMTB63EjN8RBrp+RQ@mail.gmail.com>
References: <20140818164543.GB31175@localhost.localdomain>
	<CAAS2fgQZaDOtoh+_oaiZh6jMOacSuHbEM=vktBdThDP_7eRH0Q@mail.gmail.com>
	<CAPg+sBgzEMAQ03GTE2j82+K2B+Dia6T0z14ZYWsBQ8z8QSVoLg@mail.gmail.com>
	<CAAS2fgRT8OQzUkneKwpjD15aLZDivT=hgBMTB63EjN8RBrp+RQ@mail.gmail.com>
Message-ID: <CAAS2fgT5-s-uukP8uTRKJ+pzwG-f9knetH44qQ78HsctG9_cZA@mail.gmail.com>

On Mon, Aug 18, 2014 at 10:30 AM, Pieter Wuille <pieter.wuille at gmail.com> wrote:
> Yes, I believe peer rotation is useful, but not for privacy - just for
> improving the network's internal knowledge.
>
> I haven't looked at the implementation yet, but how I imagined it would be
> every X minutes you attempt a new outgoing connection, even if you're
> already at the outbound limit. Then, if a connection attempt succeeds,
> another connection (according to some scoring system) is replaced by it.
> Given such a mechanism, plus reasonable assurances that better connections
> survive for a longer time, I have no problem with rotating every few
> minutes.

Previously when you and I had discussed this I'd proposed that some
number (say) four of the most long lived connections which had proven
themselves useful (e.g. by relaying blocks) be pinned up and not be
eligible for dropping. By protecting some subset of peers you
guarantee that an attacker which simply introduces a lot of nodes
cannot partition the network which existed prior to when the attack
started.

On Mon, Aug 18, 2014 at 10:27 AM, Mike Hearn <mike at plan99.net> wrote:
> I think the attack Ivan is talking about does not require sybil attacks to work though, just listening to lots of peers

I may not be understanding you. Might be a definitions thing, I'm
using the definition: A sybil attack is when a party takes on many
identities (nodes) in the network.

What ivan highlights is a bit of a tradeoff between concealing
identities and linkages.  Relaying transactions through only a single
peer ever (until that one is no longer on the network) is the best
strategy for concealing your identity (ignoring tor and what not), as
only that peer learns anything about your identity.  But it may reveal
a lot about how different transactions are linked, since people
observing that peer will observe that your transactions are
correlated.

The optimal strategy for avoiding linkages (ignoring tor, again), is
to randomly pick a different peer for each transaction and relay the
transaction only to that peer.  This can (and probably should) be
distinct from your normal network connectivity.

Probably for anti-linkage I'd suggest that a facility for that kind of
announcement should be done. If used over tor it would also protect
your identity.   Then the regular topology of the network can be
optimized for learning and partition resistance.



From ivan.pustogarov at uni.lu  Mon Aug 18 18:37:21 2014
From: ivan.pustogarov at uni.lu (Ivan Pustogarov)
Date: Mon, 18 Aug 2014 20:37:21 +0200
Subject: [Bitcoin-development] Outbound connections rotation
In-Reply-To: <CAAS2fgQZaDOtoh+_oaiZh6jMOacSuHbEM=vktBdThDP_7eRH0Q@mail.gmail.com>
References: <20140818164543.GB31175@localhost.localdomain>
	<CAAS2fgQZaDOtoh+_oaiZh6jMOacSuHbEM=vktBdThDP_7eRH0Q@mail.gmail.com>
Message-ID: <20140818183721.GD31175@localhost.localdomain>

Yes, I agree that if a client rotates its outbound connections then
sooner or later he will connect to a malicious peer. This case considers
an attacker which has some peers in the network. E.g. renting 500 IP addresses
for 0.01 USD per IP per hour will cost 3600 USD per month: doable but
still not for free.
I think that revealing the origin (or rather public IP) of a distinct
transaction is tolerable. The learned public IP can be shared by several
users. So a big ISP can server as a anonymyzer which prevents from linking
tx of the same user.

Rotation will help against low-resource attackers with no peers at all.
The reason for rotation is that if client's 8 outbound connections stay
the same for a long time, an attacker which does not have any peers at all
but just listens the Bitcoin network can link together differed BC addresses
and learn the IP of the client. The 8 entry peers are unique per client so if two
users share the same IP, they can be distinguished.
In order to protect himself from this specific attack, a client can also
set only 3-4 outbound connections, so the proposed modification is just
another potential defence. If it is useful for other things, it' great.


> If you rotate where you send out your transactions then with
> very high probability a sybil pretending to be many nodes will observe
> you transmitting directly.

Outbound connections are still rotated from time to time due to remote side
disconnections. Plus outbound connections do not survive BC client restarts
(unlike Tor Guard nodes).


On Mon, Aug 18, 2014 at 10:21:07AM -0700, Gregory Maxwell wrote:
> On Mon, Aug 18, 2014 at 9:46 AM, Ivan Pustogarov <ivan.pustogarov at uni.lu> wrote:
> > Hi there,
> > I'd like to start a discussion on periodic rotation of outbound connections.
> > E.g. every 2-10 minutes an outbound connections is dropped and replaced
> > by a new one.
> 
> Connection rotation would be fine for improving a node's knoweldge
> about available peers and making the network stronger against
> partitioning.
> 
> I haven't implemented this because I think your motivation is
> _precisely_ opposite the behavior. If you keep a constant set of
> outbound peers only those peers learn the origin of your transactions,
> and so it is unlikely that any particular attacker will gain strong
> evidence. If you rotate where you send out your transactions then with
> very high probability a sybil pretending to be many nodes will observe
> you transmitting directly.
> 
> Ultimately, since the traffic is clear text, if you expect to have any
> privacy at all in your broadcasts you should be broadcasting over tor
> or i2p.

-- 
Ivan



From laanwj at gmail.com  Mon Aug 18 18:38:40 2014
From: laanwj at gmail.com (Wladimir)
Date: Mon, 18 Aug 2014 20:38:40 +0200
Subject: [Bitcoin-development] Fwd: Outbound connections rotation
In-Reply-To: <CAAS2fgT5-s-uukP8uTRKJ+pzwG-f9knetH44qQ78HsctG9_cZA@mail.gmail.com>
References: <20140818164543.GB31175@localhost.localdomain>
	<CAAS2fgQZaDOtoh+_oaiZh6jMOacSuHbEM=vktBdThDP_7eRH0Q@mail.gmail.com>
	<CAPg+sBgzEMAQ03GTE2j82+K2B+Dia6T0z14ZYWsBQ8z8QSVoLg@mail.gmail.com>
	<CAAS2fgRT8OQzUkneKwpjD15aLZDivT=hgBMTB63EjN8RBrp+RQ@mail.gmail.com>
	<CAAS2fgT5-s-uukP8uTRKJ+pzwG-f9knetH44qQ78HsctG9_cZA@mail.gmail.com>
Message-ID: <CA+s+GJAV+YBDmDVk9Nvo_qAjk=WEBPhX-kqkX1fiUsLfGvEUkw@mail.gmail.com>

> The optimal strategy for avoiding linkages (ignoring tor, again), is
> to randomly pick a different peer for each transaction and relay the
> transaction only to that peer.  This can (and probably should) be
> distinct from your normal network connectivity.

It already happens with 8 peers that if you have lousy peers, the
transaction doesn't reach the network on the first broadcasting. When
sending to only one random peer it will likely be even worse.

I guess the wallet could send out the transaction 'staggered' over
time. It could pick a random new node, broadcast the transaction, wait
a bit, pick a new node, broadcast the transaction until it is comes
back through one of the other peers.

Separating the transaction broadcasting (of the wallet) from, for
example, the nodes used to request blocks from could make sense. Maybe
doubly so if bloom filters are involved.

Wladimir



From gmaxwell at gmail.com  Mon Aug 18 19:37:49 2014
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Mon, 18 Aug 2014 12:37:49 -0700
Subject: [Bitcoin-development] Outbound connections rotation
In-Reply-To: <20140818183721.GD31175@localhost.localdomain>
References: <20140818164543.GB31175@localhost.localdomain>
	<CAAS2fgQZaDOtoh+_oaiZh6jMOacSuHbEM=vktBdThDP_7eRH0Q@mail.gmail.com>
	<20140818183721.GD31175@localhost.localdomain>
Message-ID: <CAAS2fgQa1ZURn1M9-LBnSHsE5fHKdatrVbNJbd+E9JYQYH=wFw@mail.gmail.com>

On Mon, Aug 18, 2014 at 11:37 AM, Ivan Pustogarov
<ivan.pustogarov at uni.lu> wrote:
> the same for a long time, an attacker which does not have any peers at all
> but just listens the Bitcoin network can link together differed BC addresses
> and learn the IP of the client.

I don't understand what you're talking about here; if you have no peer
at all you will learn nothing about the Bitcoin network.

Can you clarify?


> The 8 entry peers are unique per client so if two
> users share the same IP, they can be distinguished.

What mechanism are you referring to specifically?

> Outbound connections are still rotated from time to time due to remote side
> disconnections. Plus outbound connections do not survive BC client restarts
> (unlike Tor Guard nodes).

On our initial connections we do have a preference for nodes we knew
were up recently. This could be made further. That the current
behavior isn't great isn't an argument for making it worse on that
dimension.



From ivan.pustogarov at uni.lu  Mon Aug 18 20:33:43 2014
From: ivan.pustogarov at uni.lu (Ivan Pustogarov)
Date: Mon, 18 Aug 2014 22:33:43 +0200
Subject: [Bitcoin-development] Outbound connections rotation
In-Reply-To: <CAAS2fgQa1ZURn1M9-LBnSHsE5fHKdatrVbNJbd+E9JYQYH=wFw@mail.gmail.com>
References: <20140818164543.GB31175@localhost.localdomain>
	<CAAS2fgQZaDOtoh+_oaiZh6jMOacSuHbEM=vktBdThDP_7eRH0Q@mail.gmail.com>
	<20140818183721.GD31175@localhost.localdomain>
	<CAAS2fgQa1ZURn1M9-LBnSHsE5fHKdatrVbNJbd+E9JYQYH=wFw@mail.gmail.com>
Message-ID: <20140818203343.GA639@localhost.localdomain>

The attack I'm trying to address is described here: https://www.cryptolux.org/index.php/Bitcoin
It was discussed here: https://bitcointalk.org/index.php?topic=632124.0

It uses the following observation. Each NATed client connects to the Bitcoin network
through 8 entry peers; he also advertises his public IP address to these peers which
allows an attacker to make the mapping <8-entry-peers, client-IP-address>.
The probability for two different clients to choose
the same entry peers is negligible. When a client generates a transaction,
the entry peers of the client are likely to be the first to retransmit it.

The attacker establishes many connections to each reachable Bitcoin peer and listens
for transactions. For each transaction she records 8-10 peers which were the first to forward this tx.
As a result, if two transactions are forwarded by the same set of entry peers,
they are likely to belong to the same client. 
Also each 8-tuples has a mapping to the client's advertised IP address.


On Mon, Aug 18, 2014 at 12:37:49PM -0700, Gregory Maxwell wrote:
> On Mon, Aug 18, 2014 at 11:37 AM, Ivan Pustogarov
> <ivan.pustogarov at uni.lu> wrote:
> > the same for a long time, an attacker which does not have any peers at all
> > but just listens the Bitcoin network can link together differed BC addresses
> > and learn the IP of the client.
> 
> I don't understand what you're talking about here; if you have no peer
> at all you will learn nothing about the Bitcoin network.
> 
> Can you clarify?
> 
> 
> > The 8 entry peers are unique per client so if two
> > users share the same IP, they can be distinguished.
> 
> What mechanism are you referring to specifically?
> 
> > Outbound connections are still rotated from time to time due to remote side
> > disconnections. Plus outbound connections do not survive BC client restarts
> > (unlike Tor Guard nodes).
> 
> On our initial connections we do have a preference for nodes we knew
> were up recently. This could be made further. That the current
> behavior isn't great isn't an argument for making it worse on that
> dimension.

-- 
Ivan



From gmaxwell at gmail.com  Mon Aug 18 20:43:44 2014
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Mon, 18 Aug 2014 13:43:44 -0700
Subject: [Bitcoin-development] Outbound connections rotation
In-Reply-To: <20140818203343.GA639@localhost.localdomain>
References: <20140818164543.GB31175@localhost.localdomain>
	<CAAS2fgQZaDOtoh+_oaiZh6jMOacSuHbEM=vktBdThDP_7eRH0Q@mail.gmail.com>
	<20140818183721.GD31175@localhost.localdomain>
	<CAAS2fgQa1ZURn1M9-LBnSHsE5fHKdatrVbNJbd+E9JYQYH=wFw@mail.gmail.com>
	<20140818203343.GA639@localhost.localdomain>
Message-ID: <CAAS2fgR5EEtevfKB2xKwExhtokb8naBH_PsLkJz3ZeJfeW6YFw@mail.gmail.com>

On Mon, Aug 18, 2014 at 1:33 PM, Ivan Pustogarov <ivan.pustogarov at uni.lu> wrote:
> The attack I'm trying to address is described here: https://www.cryptolux.org/index.php/Bitcoin
> It was discussed here: https://bitcointalk.org/index.php?topic=632124.0
>
> It uses the following observation. Each NATed client connects to the Bitcoin network
> through 8 entry peers; he also advertises his public IP address to these peers which
> allows an attacker to make the mapping <8-entry-peers, client-IP-address>.

I'm afraid I'm losing you here.  The node advertises himself to
everyone he is connected to and in/or out, those nodes pass along
those advertisements.  When I receive an advertisement from a node I
do not know how far away the advertised peers is, presumably I can
accurately exclude it from being 0-hops? itself?) 1 or more should be
indistinguishable. Is there a reason that they're distinguishable that
I'm missing?

Can you explain to me how you propose to produce this mapping?



From ivan.pustogarov at uni.lu  Mon Aug 18 21:02:57 2014
From: ivan.pustogarov at uni.lu (Ivan Pustogarov)
Date: Mon, 18 Aug 2014 23:02:57 +0200
Subject: [Bitcoin-development] Outbound connections rotation
In-Reply-To: <CAAS2fgR5EEtevfKB2xKwExhtokb8naBH_PsLkJz3ZeJfeW6YFw@mail.gmail.com>
References: <20140818164543.GB31175@localhost.localdomain>
	<CAAS2fgQZaDOtoh+_oaiZh6jMOacSuHbEM=vktBdThDP_7eRH0Q@mail.gmail.com>
	<20140818183721.GD31175@localhost.localdomain>
	<CAAS2fgQa1ZURn1M9-LBnSHsE5fHKdatrVbNJbd+E9JYQYH=wFw@mail.gmail.com>
	<20140818203343.GA639@localhost.localdomain>
	<CAAS2fgR5EEtevfKB2xKwExhtokb8naBH_PsLkJz3ZeJfeW6YFw@mail.gmail.com>
Message-ID: <20140818210257.GB639@localhost.localdomain>

For each neighbour, a Bitcoin peer keeps the history of addresses that
it forwarded to the neighbour. If an address was already forwarded
to a neighbour it is not retransmitted again.

An attacker can make a list of potential IP addresses of clients (say
an IP range of an ISP, or listen for addresses in the Bitcoin network
before the attack). Then she periodically "spams" the network with this list and
updates the address-forward history at each Bitcoin peer.
After each "spam" round, the attacker reconnects her connections to Bitcoin peers
and thus clears the retransmission history for her connections only.

As the result, when a NAT client connects to the network and advertises its
address, the addresses will propagate to the attacker's connections only.


On Mon, Aug 18, 2014 at 01:43:44PM -0700, Gregory Maxwell wrote:
> On Mon, Aug 18, 2014 at 1:33 PM, Ivan Pustogarov <ivan.pustogarov at uni.lu> wrote:
> > The attack I'm trying to address is described here: https://www.cryptolux.org/index.php/Bitcoin
> > It was discussed here: https://bitcointalk.org/index.php?topic=632124.0
> >
> > It uses the following observation. Each NATed client connects to the Bitcoin network
> > through 8 entry peers; he also advertises his public IP address to these peers which
> > allows an attacker to make the mapping <8-entry-peers, client-IP-address>.
> 
> I'm afraid I'm losing you here.  The node advertises himself to
> everyone he is connected to and in/or out, those nodes pass along
> those advertisements.  When I receive an advertisement from a node I
> do not know how far away the advertised peers is, presumably I can
> accurately exclude it from being 0-hops? itself?) 1 or more should be
> indistinguishable. Is there a reason that they're distinguishable that
> I'm missing?
> 
> Can you explain to me how you propose to produce this mapping?

-- 
Ivan



From gmaxwell at gmail.com  Mon Aug 18 23:20:54 2014
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Mon, 18 Aug 2014 16:20:54 -0700
Subject: [Bitcoin-development] Outbound connections rotation
In-Reply-To: <20140818210257.GB639@localhost.localdomain>
References: <20140818164543.GB31175@localhost.localdomain>
	<CAAS2fgQZaDOtoh+_oaiZh6jMOacSuHbEM=vktBdThDP_7eRH0Q@mail.gmail.com>
	<20140818183721.GD31175@localhost.localdomain>
	<CAAS2fgQa1ZURn1M9-LBnSHsE5fHKdatrVbNJbd+E9JYQYH=wFw@mail.gmail.com>
	<20140818203343.GA639@localhost.localdomain>
	<CAAS2fgR5EEtevfKB2xKwExhtokb8naBH_PsLkJz3ZeJfeW6YFw@mail.gmail.com>
	<20140818210257.GB639@localhost.localdomain>
Message-ID: <CAAS2fgRMtgbnokuMYb_MTMo9+uHnpxQ+B9zzd7FcZkE5nLzoHQ@mail.gmail.com>

On Mon, Aug 18, 2014 at 2:02 PM, Ivan Pustogarov <ivan.pustogarov at uni.lu> wrote:
> For each neighbour, a Bitcoin peer keeps the history of addresses that
> it forwarded to the neighbour. If an address was already forwarded
> to a neighbour it is not retransmitted again.

Okay, sorry, I thought you were saying something else. I understand.



From pete at petertodd.org  Tue Aug 19 02:30:25 2014
From: pete at petertodd.org (Peter Todd)
Date: Mon, 18 Aug 2014 22:30:25 -0400
Subject: [Bitcoin-development] Cloud mining should be using merkle sum trees
 to prove they aren't doing fractional reserve mining
Message-ID: <20140819023025.GA3074@petertodd.org>

A number of people - most recently Gavin Andresen - have speculated that
cloud hashing operations may in fact be ponzi schemes that don't
actually own the hashing power they claim to own. The claim is that the
customers upfront purchase of hashing power is simply kept and used to
pay off existing customer profits rather than actually being used to
purchase mining equipment.

We can use merkle sum trees to detect this fraud cryptographically:

1) Put the MH/s paid for by each account into a merkle sum tree, each
with a customer supplied unique identifier. (like their email address)
This allows the customer to verify that the hashing power they paid for
has been included in the total hashing power claimed.

2) Mark blocks found by the operation publicly so they can be associated
with the specific cloud mining operation; putting the merkle sum tree
root hash into the coinbase or an OP_RETURN output would be ideal. This
allows anyone to verify that the hashing power claimed corresponds to
the # of blocks actually found.

-- 
'peter'[:-1]@petertodd.org
0000000000000000201d505432d708aa2edb656f6fe34d686b37d4747e5ff389
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 490 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140818/fb79913a/attachment.sig>

From ivan.pustogarov at uni.lu  Tue Aug 19 09:34:40 2014
From: ivan.pustogarov at uni.lu (Ivan Pustogarov)
Date: Tue, 19 Aug 2014 11:34:40 +0200
Subject: [Bitcoin-development] [bitcoin] Add rotation of outbound
	connections (#4723)
In-Reply-To: <bitcoin/bitcoin/pull/4723/c52572672@github.com>
References: <bitcoin/bitcoin/pull/4723@github.com>
	<bitcoin/bitcoin/pull/4723/c52572672@github.com>
Message-ID: <20140819093425.GA5223@localhost.localdomain>

I agree with this.
Some combinatorics shows that 3 persistent connections instead of 8 results in
a low success rate of the entry-peers fingerprinting attack.

> it should not disconnect any nodes which were addnode, and it should not disconnect whitelisted peers
I agree ('Addnodes' are already excluded in the example code from the pull request)

On Mon, Aug 18, 2014 at 04:51:34PM -0700, Gregory Maxwell wrote:
> It was pointed out to me that my concern wrt partitioning is unclear. Imagine
> an attacker starts up a moderate number of sybil nodes. He also connects to
> every other available listening peer and fills up their inbound capacity.
> 
> In the current network this kind of activity would only disrupt newly joining
> peers. But nodes which were still online would remain connected to each other.
> With excessive rotation the entire network could become connected exclusively
> via the sybils.
> 
> ?
> Reply to this email directly or view it on GitHub.*
> 

-- 
Ivan



From rme at i-rme.es  Tue Aug 19 09:49:41 2014
From: rme at i-rme.es (=?UTF-8?B?UmHDumwgTWFydMOtbmV6?=)
Date: Tue, 19 Aug 2014 11:49:41 +0200
Subject: [Bitcoin-development] Proposal: Encrypt bitcoin messages
In-Reply-To: <CA+8=xuJ+YDTNjyDW7DvP8KPN_nrFWpE68HvLw6EokFa-B-QGKw@mail.gmail.com>
References: <CA+8=xuJ+YDTNjyDW7DvP8KPN_nrFWpE68HvLw6EokFa-B-QGKw@mail.gmail.com>
Message-ID: <CA+8=xuKRyO1=bu7cgNGHvtAeqgKBxjTH2uUkb61GdCuEQWEu5A@mail.gmail.com>

Hi,
I believe that all comunications should be encrypted by default, no matter
that is public information (tx info), the only exception I would make would
be block packets (to avoid increasing propagation time).

I suggest that Bitcoin Core should generate a public/private key pair and
share the public one with peers.

This could provide privacy and integrity but not autentication.

This way you can impersonate a bitcoin node (active mitm) but you cant just
be passive and record all transactions send or recieved by an IP address.

Today you can just watch for incoming/outgoing transactions to determine
what tx are created in the Node, when you find one you can see the Bitcoin
address inputs and outputs and track that person's bitcoins.

As an example, SSH provides this kind of encryption, althogh Bitcoin Core
should ignore fingerprint changes (caused due to reinstalls).

Please feel free to disqus why this is not needed or why you like this idea.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140819/0538ac1f/attachment.html>

From jgarzik at bitpay.com  Tue Aug 19 12:02:37 2014
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Tue, 19 Aug 2014 08:02:37 -0400
Subject: [Bitcoin-development] Reconsidering github
Message-ID: <CAJHLa0NXAYh9HzazN6gArUV8y7J8_G0oqkZqPBgibpW0wRNxKQ@mail.gmail.com>

It would be nice if the issues and git repo for Bitcoin Core were not
on such a centralized service as github, nice and convenient as it is.

To that end, I note that Linux does its own git repo, and now requires
2FA: http://www.linux.com/news/featured-blogs/203-konstantin-ryabitsev/784544-linux-kernel-git-repositories-add-2-factor-authentication

As a first step, one possibility is putting the primary repo on
bitcoin.org somewhere, and simply mirroring that to github for each
push.

-- 
Jeff Garzik
Bitcoin core developer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From davispuh at gmail.com  Tue Aug 19 12:28:01 2014
From: davispuh at gmail.com (=?UTF-8?B?RMSBdmlzIE1vc8SBbnM=?=)
Date: Tue, 19 Aug 2014 15:28:01 +0300
Subject: [Bitcoin-development] Reconsidering github
In-Reply-To: <CAJHLa0NXAYh9HzazN6gArUV8y7J8_G0oqkZqPBgibpW0wRNxKQ@mail.gmail.com>
References: <CAJHLa0NXAYh9HzazN6gArUV8y7J8_G0oqkZqPBgibpW0wRNxKQ@mail.gmail.com>
Message-ID: <CAOE4rSx_LoECPp4gsVgvXRGGNEHRoTqRyKorUcPfkYy9RXsgdQ@mail.gmail.com>

There's actually a pretty good alternative - GitLab
<https://about.gitlab.com/> it's open source, self-hosted and provides
similar features to GitHub


2014-08-19 15:02 GMT+03:00 Jeff Garzik <jgarzik at bitpay.com>:

> It would be nice if the issues and git repo for Bitcoin Core were not
> on such a centralized service as github, nice and convenient as it is.
>
> To that end, I note that Linux does its own git repo, and now requires
> 2FA:
> http://www.linux.com/news/featured-blogs/203-konstantin-ryabitsev/784544-linux-kernel-git-repositories-add-2-factor-authentication
>
> As a first step, one possibility is putting the primary repo on
> bitcoin.org somewhere, and simply mirroring that to github for each
> push.
>
> --
> Jeff Garzik
> Bitcoin core developer and open source evangelist
> BitPay, Inc.      https://bitpay.com/
>
>
> ------------------------------------------------------------------------------
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140819/c399f71c/attachment.html>

From laanwj at gmail.com  Tue Aug 19 14:58:48 2014
From: laanwj at gmail.com (Wladimir)
Date: Tue, 19 Aug 2014 16:58:48 +0200
Subject: [Bitcoin-development] Reconsidering github
In-Reply-To: <CAJHLa0NXAYh9HzazN6gArUV8y7J8_G0oqkZqPBgibpW0wRNxKQ@mail.gmail.com>
References: <CAJHLa0NXAYh9HzazN6gArUV8y7J8_G0oqkZqPBgibpW0wRNxKQ@mail.gmail.com>
Message-ID: <CA+s+GJDM4Tq69wDv2UQ07aCLDOayA9C8im+O+cJn2dSrVopUmw@mail.gmail.com>

On Tue, Aug 19, 2014 at 2:02 PM, Jeff Garzik <jgarzik at bitpay.com> wrote:
> It would be nice if the issues and git repo for Bitcoin Core were not
> on such a centralized service as github, nice and convenient as it is.

Despite my complaining about github, I don't like the idea of moving
somewhere else. The current way of working - to use github for storing
the tree, and use a custom script for signing+merging - is fine with
me.

Github has a low barrier to contribution. Almost every open source
developer already has a github account. Switching to something
self-hosted makes it more difficult for people to contribute.

Plus if we have to take the hosting upon ourselves, we have to handle
sysadmin work ourselves as well. That's not a good use of the limited
manpower available.

Also it will be a lot of work to migrate over all the current issues
and pulls. I don't look forward to that. I don't see the point of
this, sorry.

Wladimir



From rme at i-rme.es  Tue Aug 19 15:11:57 2014
From: rme at i-rme.es (=?UTF-8?B?UmHDumwgTWFydMOtbmV6?=)
Date: Tue, 19 Aug 2014 17:11:57 +0200
Subject: [Bitcoin-development] Proposal: Encrypt bitcoin messages
In-Reply-To: <0C0EF7F9-DBBA-4872-897D-63CFA3853726@ricmoo.com>
References: <CA+8=xuJ+YDTNjyDW7DvP8KPN_nrFWpE68HvLw6EokFa-B-QGKw@mail.gmail.com>
	<CA+8=xuKRyO1=bu7cgNGHvtAeqgKBxjTH2uUkb61GdCuEQWEu5A@mail.gmail.com>
	<0C0EF7F9-DBBA-4872-897D-63CFA3853726@ricmoo.com>
Message-ID: <CA+8=xu+KWSF6XYgH-_t87na6M6UOD0CM1su8sizxn5a4b0_Xrw@mail.gmail.com>

Only messages between peers are encrypted, only during transit.

Before sending a transaction to Node B you use his public key, so Node B
has the key
El 19/08/2014 17:05, "Richard Moore" <me at ricmoo.com> escribi?:

> If you encrypt all messages with an asymmetric cipher, how would each node
> make use of the blockchain in an encrypted form? Each node would be able to
> encrypt the data, but only the Bitcoin Core Dev could decrypt it?
>
>
> On Aug 19, 2014, at 5:49 AM, Ra?l Mart?nez <rme at i-rme.es> wrote:
>
> Hi,
> I believe that all comunications should be encrypted by default, no matter
> that is public information (tx info), the only exception I would make would
> be block packets (to avoid increasing propagation time).
>
> I suggest that Bitcoin Core should generate a public/private key pair and
> share the public one with peers.
>
> This could provide privacy and integrity but not autentication.
>
> This way you can impersonate a bitcoin node (active mitm) but you cant
> just be passive and record all transactions send or recieved by an IP
> address.
>
> Today you can just watch for incoming/outgoing transactions to determine
> what tx are created in the Node, when you find one you can see the Bitcoin
> address inputs and outputs and track that person's bitcoins.
>
> As an example, SSH provides this kind of encryption, althogh Bitcoin Core
> should ignore fingerprint changes (caused due to reinstalls).
>
> Please feel free to disqus why this is not needed or why you like this
> idea.
>
> ------------------------------------------------------------------------------
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
> .???`?.??.???`?.??.???`?.??.???`?.??.???`?.?><(((?>
>
> Richard Moore ~ Founder
> Genetic Mistakes Software inc.
> phone: (778) 882-6125
> email: ricmoo at geneticmistakes.com
> www: http://GeneticMistakes.com
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140819/65d3df95/attachment.html>

From kanzure at gmail.com  Tue Aug 19 15:44:55 2014
From: kanzure at gmail.com (Bryan Bishop)
Date: Tue, 19 Aug 2014 10:44:55 -0500
Subject: [Bitcoin-development] Reconsidering github
In-Reply-To: <CAJHLa0NXAYh9HzazN6gArUV8y7J8_G0oqkZqPBgibpW0wRNxKQ@mail.gmail.com>
References: <CAJHLa0NXAYh9HzazN6gArUV8y7J8_G0oqkZqPBgibpW0wRNxKQ@mail.gmail.com>
Message-ID: <CABaSBayBsHsVO=Wan3C-H4s9b=xJixRMk+O=+id0CH_0B_Nbmw@mail.gmail.com>

On Tue, Aug 19, 2014 at 7:02 AM, Jeff Garzik <jgarzik at bitpay.com> wrote:
> As a first step, one possibility is putting the primary repo on
> bitcoin.org somewhere, and simply mirroring that to github for each
> push.

Smaller first step would be to mirror the git repository on
bitcoin.org, which is necessary anyway before switching primaries.

- Bryan
http://heybryan.org/
1 512 203 0507



From me at ricmoo.com  Tue Aug 19 15:30:45 2014
From: me at ricmoo.com (Richard Moore)
Date: Tue, 19 Aug 2014 11:30:45 -0400
Subject: [Bitcoin-development] Proposal: Encrypt bitcoin messages
In-Reply-To: <CA+8=xu+KWSF6XYgH-_t87na6M6UOD0CM1su8sizxn5a4b0_Xrw@mail.gmail.com>
References: <CA+8=xuJ+YDTNjyDW7DvP8KPN_nrFWpE68HvLw6EokFa-B-QGKw@mail.gmail.com>
	<CA+8=xuKRyO1=bu7cgNGHvtAeqgKBxjTH2uUkb61GdCuEQWEu5A@mail.gmail.com>
	<0C0EF7F9-DBBA-4872-897D-63CFA3853726@ricmoo.com>
	<CA+8=xu+KWSF6XYgH-_t87na6M6UOD0CM1su8sizxn5a4b0_Xrw@mail.gmail.com>
Message-ID: <33D4B2E3-DBF0-444E-B76A-765C4C17E964@ricmoo.com>

Oh, I see. I misread, thinking you wanted the dev team to have a private key and share the public key, similar to alerts. But each peer would have a public/private key pair and use something akin to ECDH for a symmetric key and transport using a block cipher?

How would you share the public key? If I were a man-in-the-middle, I could intercept the public key, generate my own and pass that along and then decouple the pipe when the other side shares their public key.

Also, you should not ignore your SSH fingerprint, as you exactly open yourself to mitm attacks.



On Aug 19, 2014, at 11:11 AM, Ra?l Mart?nez <rme at i-rme.es> wrote:

> Only messages between peers are encrypted, only during transit.
> 
> Before sending a transaction to Node B you use his public key, so Node B has the key
> 
> El 19/08/2014 17:05, "Richard Moore" <me at ricmoo.com> escribi?:
> If you encrypt all messages with an asymmetric cipher, how would each node make use of the blockchain in an encrypted form? Each node would be able to encrypt the data, but only the Bitcoin Core Dev could decrypt it?
> 
> 
> On Aug 19, 2014, at 5:49 AM, Ra?l Mart?nez <rme at i-rme.es> wrote:
> 
>> Hi,
>> I believe that all comunications should be encrypted by default, no matter that is public information (tx info), the only exception I would make would be block packets (to avoid increasing propagation time).
>> 
>> I suggest that Bitcoin Core should generate a public/private key pair and share the public one with peers.
>> 
>> This could provide privacy and integrity but not autentication.
>> 
>> This way you can impersonate a bitcoin node (active mitm) but you cant just be passive and record all transactions send or recieved by an IP address.
>> 
>> Today you can just watch for incoming/outgoing transactions to determine what tx are created in the Node, when you find one you can see the Bitcoin address inputs and outputs and track that person's bitcoins.
>> As an example, SSH provides this kind of encryption, althogh Bitcoin Core should ignore fingerprint changes (caused due to reinstalls).
>> 
>> Please feel free to disqus why this is not needed or why you like this idea.
>> 
>> ------------------------------------------------------------------------------
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 
> .???`?.??.???`?.??.???`?.??.???`?.??.???`?.?><(((?>
> 
> Richard Moore ~ Founder
> Genetic Mistakes Software inc.
> phone: (778) 882-6125
> email: ricmoo at geneticmistakes.com
> www: http://GeneticMistakes.com
> 

.???`?.??.???`?.??.???`?.??.???`?.??.???`?.?><(((?>

Richard Moore ~ Founder
Genetic Mistakes Software inc.
phone: (778) 882-6125
email: ricmoo at geneticmistakes.com
www: http://GeneticMistakes.com

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140819/6f49bfd8/attachment.html>

From justusranvier at riseup.net  Tue Aug 19 16:07:17 2014
From: justusranvier at riseup.net (Justus Ranvier)
Date: Tue, 19 Aug 2014 16:07:17 +0000
Subject: [Bitcoin-development] Proposal: Encrypt bitcoin messages
In-Reply-To: <33D4B2E3-DBF0-444E-B76A-765C4C17E964@ricmoo.com>
References: <CA+8=xuJ+YDTNjyDW7DvP8KPN_nrFWpE68HvLw6EokFa-B-QGKw@mail.gmail.com>	<CA+8=xuKRyO1=bu7cgNGHvtAeqgKBxjTH2uUkb61GdCuEQWEu5A@mail.gmail.com>	<0C0EF7F9-DBBA-4872-897D-63CFA3853726@ricmoo.com>	<CA+8=xu+KWSF6XYgH-_t87na6M6UOD0CM1su8sizxn5a4b0_Xrw@mail.gmail.com>
	<33D4B2E3-DBF0-444E-B76A-765C4C17E964@ricmoo.com>
Message-ID: <53F37635.5070807@riseup.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256

On 08/19/2014 03:30 PM, Richard Moore wrote:
> Oh, I see. I misread, thinking you wanted the dev team to have a
> private key and share the public key, similar to alerts. But each
> peer would have a public/private key pair and use something akin to
> ECDH for a symmetric key and transport using a block cipher?
> 
> How would you share the public key? If I were a man-in-the-middle,
> I could intercept the public key, generate my own and pass that
> along and then decouple the pipe when the other side shares their
> public key.
> 
> Also, you should not ignore your SSH fingerprint, as you exactly
> open yourself to mitm attacks.

http://curvecp.org

If that's not acceptable, even using TLS with self-signed certificates
would be an improvement.

- -- 
Support online privacy by using email encryption whenever possible.
Learn how here: http://www.youtube.com/watch?v=bakOKJFtB-k
-----BEGIN PGP SIGNATURE-----

iQEcBAEBCAAGBQJT83Y1AAoJEMP3uyY4RQ21aqUH/3rGvgz3J6UYY2Qb2qzNoucB
QqIj4fByZncX7Fhx5YK6fc6QoLr4Oqxd+zgbJ3ghrLtAJ7dm61iLmmib8MuDz2K1
kQj8xmZhWuUFI26bjK54RlKoWg46XFKNKcaVub6JmVg9dH8mX86mF746KnR5ZqdX
BuehWoEqcHlY3JkrTgOGpHjT/EGScZQxzJHzsBOfUJuX12lFtzcWzBTZyo5K8fD+
6eub3i6Fc4qn/c788UVFsmHeWV+NCeB1/y94V1+peIPWYhrZO+FVm+xEflG4U81Q
MRejqNjFT8ztT5vRHx1qJsmIgnzT0SXfh+FRt0hdqJizjlmyntMmCXjFmtnIeT8=
=9qWl
-----END PGP SIGNATURE-----
-------------- next part --------------
A non-text attachment was scrubbed...
Name: 0x38450DB5.asc
Type: application/pgp-keys
Size: 14046 bytes
Desc: not available
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140819/b2be03df/attachment.bin>

From gmaxwell at gmail.com  Tue Aug 19 16:38:21 2014
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Tue, 19 Aug 2014 09:38:21 -0700
Subject: [Bitcoin-development] Proposal: Encrypt bitcoin messages
In-Reply-To: <53F37635.5070807@riseup.net>
References: <CA+8=xuJ+YDTNjyDW7DvP8KPN_nrFWpE68HvLw6EokFa-B-QGKw@mail.gmail.com>
	<CA+8=xuKRyO1=bu7cgNGHvtAeqgKBxjTH2uUkb61GdCuEQWEu5A@mail.gmail.com>
	<0C0EF7F9-DBBA-4872-897D-63CFA3853726@ricmoo.com>
	<CA+8=xu+KWSF6XYgH-_t87na6M6UOD0CM1su8sizxn5a4b0_Xrw@mail.gmail.com>
	<33D4B2E3-DBF0-444E-B76A-765C4C17E964@ricmoo.com>
	<53F37635.5070807@riseup.net>
Message-ID: <CAAS2fgTF6424+FfzaL=+iaio2zu_uM_74yKohi7T3dtz=J9CjA@mail.gmail.com>

On Tue, Aug 19, 2014 at 9:07 AM, Justus Ranvier
<justusranvier at riseup.net> wrote:
> If that's not acceptable, even using TLS with self-signed certificates
> would be an improvement.

TLS is a huge complex attack surface, any use of it requires an
additional dependency with a large amount of difficult to audit code.
TLS is trivially DOS attacked and every major/widely used TLS
implementation has had multiple memory disclosure or remote execution
vulnerabilities even in just the last several years.

We've dodged several emergency scale vulnerabilities by not having TLS.



From gubatron at gmail.com  Tue Aug 19 16:58:41 2014
From: gubatron at gmail.com (Angel Leon)
Date: Tue, 19 Aug 2014 12:58:41 -0400
Subject: [Bitcoin-development] Proposal: Encrypt bitcoin messages
In-Reply-To: <CAAS2fgTF6424+FfzaL=+iaio2zu_uM_74yKohi7T3dtz=J9CjA@mail.gmail.com>
References: <CA+8=xuJ+YDTNjyDW7DvP8KPN_nrFWpE68HvLw6EokFa-B-QGKw@mail.gmail.com>
	<CA+8=xuKRyO1=bu7cgNGHvtAeqgKBxjTH2uUkb61GdCuEQWEu5A@mail.gmail.com>
	<0C0EF7F9-DBBA-4872-897D-63CFA3853726@ricmoo.com>
	<CA+8=xu+KWSF6XYgH-_t87na6M6UOD0CM1su8sizxn5a4b0_Xrw@mail.gmail.com>
	<33D4B2E3-DBF0-444E-B76A-765C4C17E964@ricmoo.com>
	<53F37635.5070807@riseup.net>
	<CAAS2fgTF6424+FfzaL=+iaio2zu_uM_74yKohi7T3dtz=J9CjA@mail.gmail.com>
Message-ID: <CADZB0_YfNQQstWsFt2+efYQNEhQ6ig8GD+hmbKBW6reZwEqOuQ@mail.gmail.com>

"I suggest that Bitcoin Core should generate a public/private key pair and
share the public one with peers."

I've not read the p2p protocol of Bitcoin core, but I suppose the initial
handshake between 2 peers would be the ideal place to exchange a public
keys.

would it make sense to generate a new random pair of keys per each peer you
connect to?
then each subsequent message to every peer gets encrypted differently,
keeping each conversation isolated from each other encryption-speaking.

These keys would have nothing to do with your wallet, they're just to
encrypt any further communication between peers post-handshake. Would that
be of any use to "This could provide privacy and integrity but not
autentication."?

http://twitter.com/gubatron


On Tue, Aug 19, 2014 at 12:38 PM, Gregory Maxwell <gmaxwell at gmail.com>
wrote:

> On Tue, Aug 19, 2014 at 9:07 AM, Justus Ranvier
> <justusranvier at riseup.net> wrote:
> > If that's not acceptable, even using TLS with self-signed certificates
> > would be an improvement.
>
> TLS is a huge complex attack surface, any use of it requires an
> additional dependency with a large amount of difficult to audit code.
> TLS is trivially DOS attacked and every major/widely used TLS
> implementation has had multiple memory disclosure or remote execution
> vulnerabilities even in just the last several years.
>
> We've dodged several emergency scale vulnerabilities by not having TLS.
>
>
> ------------------------------------------------------------------------------
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140819/5903b960/attachment.html>

From gubatron at gmail.com  Tue Aug 19 17:04:05 2014
From: gubatron at gmail.com (Angel Leon)
Date: Tue, 19 Aug 2014 13:04:05 -0400
Subject: [Bitcoin-development] Reconsidering github
In-Reply-To: <CABaSBayBsHsVO=Wan3C-H4s9b=xJixRMk+O=+id0CH_0B_Nbmw@mail.gmail.com>
References: <CAJHLa0NXAYh9HzazN6gArUV8y7J8_G0oqkZqPBgibpW0wRNxKQ@mail.gmail.com>
	<CABaSBayBsHsVO=Wan3C-H4s9b=xJixRMk+O=+id0CH_0B_Nbmw@mail.gmail.com>
Message-ID: <CADZB0_ZZx5v-gea3EpL33ugvuuRFxtsFXjSPTBqU=p8o2hZM+Q@mail.gmail.com>

-1

http://twitter.com/gubatron


On Tue, Aug 19, 2014 at 11:44 AM, Bryan Bishop <kanzure at gmail.com> wrote:

> On Tue, Aug 19, 2014 at 7:02 AM, Jeff Garzik <jgarzik at bitpay.com> wrote:
> > As a first step, one possibility is putting the primary repo on
> > bitcoin.org somewhere, and simply mirroring that to github for each
> > push.
>
> Smaller first step would be to mirror the git repository on
> bitcoin.org, which is necessary anyway before switching primaries.
>
> - Bryan
> http://heybryan.org/
> 1 512 203 0507
>
>
> ------------------------------------------------------------------------------
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140819/118a53b7/attachment.html>

From christophe.biocca at gmail.com  Tue Aug 19 17:19:44 2014
From: christophe.biocca at gmail.com (Christophe Biocca)
Date: Tue, 19 Aug 2014 13:19:44 -0400
Subject: [Bitcoin-development] Proposal: Encrypt bitcoin messages
In-Reply-To: <CADZB0_YfNQQstWsFt2+efYQNEhQ6ig8GD+hmbKBW6reZwEqOuQ@mail.gmail.com>
References: <CA+8=xuJ+YDTNjyDW7DvP8KPN_nrFWpE68HvLw6EokFa-B-QGKw@mail.gmail.com>
	<CA+8=xuKRyO1=bu7cgNGHvtAeqgKBxjTH2uUkb61GdCuEQWEu5A@mail.gmail.com>
	<0C0EF7F9-DBBA-4872-897D-63CFA3853726@ricmoo.com>
	<CA+8=xu+KWSF6XYgH-_t87na6M6UOD0CM1su8sizxn5a4b0_Xrw@mail.gmail.com>
	<33D4B2E3-DBF0-444E-B76A-765C4C17E964@ricmoo.com>
	<53F37635.5070807@riseup.net>
	<CAAS2fgTF6424+FfzaL=+iaio2zu_uM_74yKohi7T3dtz=J9CjA@mail.gmail.com>
	<CADZB0_YfNQQstWsFt2+efYQNEhQ6ig8GD+hmbKBW6reZwEqOuQ@mail.gmail.com>
Message-ID: <CANOOu=8Wce50qmWQs1inuLvxL84rpKTQWKxYsaKvqqJ_vbpZrw@mail.gmail.com>

If your threat model is passive listeners, it seems to me that simply
establishing a symmetric key for each connection at handshake time
using diffie-hellman is all you need. No public private crypto needed
at all.

The whole thing seems like a bit of security theater unfortunately.
The kind of attacker that can pull off widespread passive listening is
probably able and willing to do active MITM. It's not a huge
incremental cost.

Instead, those users that do have a need for security should probably
connect to the network using Tor or I2P, which can give much better
security guarantees than anything being discussed here.

On Tue, Aug 19, 2014 at 12:58 PM, Angel Leon <gubatron at gmail.com> wrote:
> "
> I suggest that Bitcoin Core should generate a public/private key pair and
> share the public one with peers."
>
> I've not read the p2p protocol of Bitcoin core, but I suppose the initial
> handshake between 2 peers would be the ideal place to exchange a public
> keys.
>
> would it make sense to generate a new random pair of keys per each peer you
> connect to?
> then each subsequent message to every peer gets encrypted differently,
> keeping each conversation isolated from each other encryption-speaking.
>
> These keys would have nothing to do with your wallet, they're just to
> encrypt any further communication between peers post-handshake. Would that
> be of any use to "This could provide privacy and integrity but not
> autentication."?
>
> http://twitter.com/gubatron
>
>
> On Tue, Aug 19, 2014 at 12:38 PM, Gregory Maxwell <gmaxwell at gmail.com>
> wrote:
>>
>> On Tue, Aug 19, 2014 at 9:07 AM, Justus Ranvier
>> <justusranvier at riseup.net> wrote:
>> > If that's not acceptable, even using TLS with self-signed certificates
>> > would be an improvement.
>>
>> TLS is a huge complex attack surface, any use of it requires an
>> additional dependency with a large amount of difficult to audit code.
>> TLS is trivially DOS attacked and every major/widely used TLS
>> implementation has had multiple memory disclosure or remote execution
>> vulnerabilities even in just the last several years.
>>
>> We've dodged several emergency scale vulnerabilities by not having TLS.
>>
>>
>> ------------------------------------------------------------------------------
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
>
> ------------------------------------------------------------------------------
>
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>



From johnathan at corganlabs.com  Tue Aug 19 17:35:05 2014
From: johnathan at corganlabs.com (Johnathan Corgan)
Date: Tue, 19 Aug 2014 10:35:05 -0700
Subject: [Bitcoin-development] Proposal: Encrypt bitcoin messages
In-Reply-To: <CAAS2fgTF6424+FfzaL=+iaio2zu_uM_74yKohi7T3dtz=J9CjA@mail.gmail.com>
References: <CA+8=xuJ+YDTNjyDW7DvP8KPN_nrFWpE68HvLw6EokFa-B-QGKw@mail.gmail.com>	<CA+8=xuKRyO1=bu7cgNGHvtAeqgKBxjTH2uUkb61GdCuEQWEu5A@mail.gmail.com>	<0C0EF7F9-DBBA-4872-897D-63CFA3853726@ricmoo.com>	<CA+8=xu+KWSF6XYgH-_t87na6M6UOD0CM1su8sizxn5a4b0_Xrw@mail.gmail.com>	<33D4B2E3-DBF0-444E-B76A-765C4C17E964@ricmoo.com>	<53F37635.5070807@riseup.net>
	<CAAS2fgTF6424+FfzaL=+iaio2zu_uM_74yKohi7T3dtz=J9CjA@mail.gmail.com>
Message-ID: <53F38AC9.4000608@corganlabs.com>

On 08/19/2014 09:38 AM, Gregory Maxwell wrote:

> We've dodged several emergency scale vulnerabilities by not having TLS.

I'm still trying to understand the original premise that we want
encrypted communications between nodes.

I can certainly see the value of having *authenticated* traffic with
specific nodes, using an HMAC for the protocol messages in place of the
current checksum.

-- 
Johnathan Corgan, Corgan Labs
SDR/DSP Training and Development Services
http://corganlabs.com
-------------- next part --------------
A non-text attachment was scrubbed...
Name: johnathan.vcf
Type: text/x-vcard
Size: 262 bytes
Desc: not available
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140819/6a4442a5/attachment.vcf>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 213 bytes
Desc: OpenPGP digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140819/6a4442a5/attachment.sig>

From justus at monetas.net  Tue Aug 19 17:11:30 2014
From: justus at monetas.net (Justus Ranvier)
Date: Tue, 19 Aug 2014 17:11:30 +0000
Subject: [Bitcoin-development] BIP43 Purpose code for voting pool HD wallets
Message-ID: <53F38542.2000704@monetas.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256

We'd like to reserve two purpose codes for the HD multisig structure
that will be used for the Bitcoin wallets used for voting pools, so
we've documented the structure in the form of two BIPs. One is used
for the wallets suitable for storing bulk bitcoin deposits, the other
is used for storing colored coin deposits.

The primary difference is that bulk deposit wallets use cold storage
and are allowed to incur significant administrative overhead, where as
colored coin wallets do not use cold storage because they must be
capable of being generated on the fly.

Two draft information BIPs are attached.

- -- 
Justus Ranvier                   | Monetas <http://monetas.net/>
<mailto:justus at monetas.net>      | Public key ID : C3F7BB2638450DB5
                                 | BM-2cTepVtZ6AyJAs2Y8LpcvZB8KbdaWLwKqc
-----BEGIN PGP SIGNATURE-----

iQEcBAEBCAAGBQJT84VCAAoJEMP3uyY4RQ21LZcH/RYN5dUc5TjOI6Z72I4aNqDL
cZMzIo1WTK6OHsO2GUo+3L4avf+dCb2om/hDJgoLz/Oh9BMY77vF3UTIPIzGmN9X
2Oeyjg+wJG9z2L/B1f7oo4MX9c2ppUNfp2x5zDaURvME9CLkY7hLCBWp/OxU1HHb
MhLn0ICtpw3FnHddVWFwhvBxcCzJm6t2pBlM8mmTr4t52/08gklY1LVdUW0zmf9W
eFe50Y2KQ+uhVZfAga1wmFwY1pJBUmf6fAVqeK6AGDPkLVHDvN8P+mco+Qks++VZ
mTENKXWAmskGViTjd0pb8EdoSoMsDIa1eRHbpwAbbb2PEoc9pdccgwH6CscgN1I=
=R/HX
-----END PGP SIGNATURE-----
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140819/3aeeae9a/attachment.html>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140819/3aeeae9a/attachment-0001.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: 0x38450DB5.asc
Type: application/pgp-keys
Size: 14046 bytes
Desc: not available
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140819/3aeeae9a/attachment.bin>

From gmaxwell at gmail.com  Tue Aug 19 18:54:38 2014
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Tue, 19 Aug 2014 11:54:38 -0700
Subject: [Bitcoin-development] Reconsidering github
In-Reply-To: <CAJHLa0NXAYh9HzazN6gArUV8y7J8_G0oqkZqPBgibpW0wRNxKQ@mail.gmail.com>
References: <CAJHLa0NXAYh9HzazN6gArUV8y7J8_G0oqkZqPBgibpW0wRNxKQ@mail.gmail.com>
Message-ID: <CAAS2fgSpWWH5UkeQewtebjuhpT=S=gR36KzuSCoYb-Vw3MdNPg@mail.gmail.com>

On Tue, Aug 19, 2014 at 5:02 AM, Jeff Garzik <jgarzik at bitpay.com> wrote:
> It would be nice if the issues and git repo for Bitcoin Core were not
> on such a centralized service as github, nice and convenient as it is.
>
> To that end, I note that Linux does its own git repo, and now requires
> 2FA: http://www.linux.com/news/featured-blogs/203-konstantin-ryabitsev/784544-linux-kernel-git-repositories-add-2-factor-authentication
>
> As a first step, one possibility is putting the primary repo on
> bitcoin.org somewhere, and simply mirroring that to github for each
> push.

The obvious thing to do is setup the second repository and get it
going. Git doesn't really care all that much whats "primary".  If we
have a working workflow elsewhere then making a change won't be a leap
of faith.



From jrn at jrn.me.uk  Tue Aug 19 23:38:31 2014
From: jrn at jrn.me.uk (J Ross Nicoll)
Date: Wed, 20 Aug 2014 00:38:31 +0100
Subject: [Bitcoin-development] Proposal: Encrypt bitcoin messages
In-Reply-To: <53F38AC9.4000608@corganlabs.com>
References: <CA+8=xuJ+YDTNjyDW7DvP8KPN_nrFWpE68HvLw6EokFa-B-QGKw@mail.gmail.com>	<CA+8=xuKRyO1=bu7cgNGHvtAeqgKBxjTH2uUkb61GdCuEQWEu5A@mail.gmail.com>	<0C0EF7F9-DBBA-4872-897D-63CFA3853726@ricmoo.com>	<CA+8=xu+KWSF6XYgH-_t87na6M6UOD0CM1su8sizxn5a4b0_Xrw@mail.gmail.com>	<33D4B2E3-DBF0-444E-B76A-765C4C17E964@ricmoo.com>	<53F37635.5070807@riseup.net>	<CAAS2fgTF6424+FfzaL=+iaio2zu_uM_74yKohi7T3dtz=J9CjA@mail.gmail.com>
	<53F38AC9.4000608@corganlabs.com>
Message-ID: <53F3DFF7.9070709@jrn.me.uk>

The concern is that if you can monitor traffic in and out of a single
node, you can determine which transactions originate from it vs those
which it relays. That's not great, certainly, but how many nodes
actually require that level of security, and surely they can use Tor or
VPN services if so?

Further, unless the remote nodes are in some way trusted, you're
changing the attack from read-only to requiring the ability to perform 
a man in the middle attack - that doesn't seem much harder to me.

As Gregory states, there's been at least two recent serious if not
catastrophic OpenSSL bugs, and the consequences of Heartbleed if the
Bitcoin network had been vulnerable are the stuff of nightmares.

Very difficult to see the risk/reward payoff being worthwhile.

Ross


On 19/08/2014 18:35, Johnathan Corgan wrote:
> On 08/19/2014 09:38 AM, Gregory Maxwell wrote:
>
>> We've dodged several emergency scale vulnerabilities by not having TLS.
> I'm still trying to understand the original premise that we want
> encrypted communications between nodes.
>
> I can certainly see the value of having *authenticated* traffic with
> specific nodes, using an HMAC for the protocol messages in place of the
> current checksum.
>
>
>
> ------------------------------------------------------------------------------
>
>
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140820/19313167/attachment.html>

From justusranvier at riseup.net  Tue Aug 19 23:39:09 2014
From: justusranvier at riseup.net (Justus Ranvier)
Date: Tue, 19 Aug 2014 23:39:09 +0000
Subject: [Bitcoin-development] Proposal: Encrypt bitcoin messages
In-Reply-To: <53F3DFF7.9070709@jrn.me.uk>
References: <CA+8=xuJ+YDTNjyDW7DvP8KPN_nrFWpE68HvLw6EokFa-B-QGKw@mail.gmail.com>	<CA+8=xuKRyO1=bu7cgNGHvtAeqgKBxjTH2uUkb61GdCuEQWEu5A@mail.gmail.com>	<0C0EF7F9-DBBA-4872-897D-63CFA3853726@ricmoo.com>	<CA+8=xu+KWSF6XYgH-_t87na6M6UOD0CM1su8sizxn5a4b0_Xrw@mail.gmail.com>	<33D4B2E3-DBF0-444E-B76A-765C4C17E964@ricmoo.com>	<53F37635.5070807@riseup.net>	<CAAS2fgTF6424+FfzaL=+iaio2zu_uM_74yKohi7T3dtz=J9CjA@mail.gmail.com>
	<53F38AC9.4000608@corganlabs.com> <53F3DFF7.9070709@jrn.me.uk>
Message-ID: <53F3E01D.9090403@riseup.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256

On 08/19/2014 11:38 PM, J Ross Nicoll wrote:
> That's not great, certainly, but how many nodes actually require
> that level of security

All of them.

While the rest of the 'net is busy deprecating HTTP and all other
unencrypted transport methods, why is it(*) even a debate?

Security should be on by default. Make users who don't want it jump
through hoops to turn it off instead of the other way around.


(*) where "it" is the desirability of blocking passive surveillance,
not the particular algorithm to use.
-----BEGIN PGP SIGNATURE-----

iQEcBAEBCAAGBQJT8+AdAAoJEMP3uyY4RQ21kv8IANDkveCGJX5b5c+waXTHcEf0
MgrGlkUZgZaP+fNNME32MEeQMywkyHohZly1KKYyqf+Qi2YkZ7rFiZj5e16EtGVK
zBQCrvOyMZVv/tWPfRxrZV+jC5dUBPryaCV3XwyK3w8u5WpDhpC1be6uBjY6qtTB
58MzdMBEEwceUwDezAIpGxsr5fKw+by4WyL23HQybSgUSHWh9S9hSp4dY1L8sDdr
atdFOvjiwY7zQe9V4mrtSv2pwmWIfOJE3RBhwSdPBtsMqO0PAnUEmxKYANQjh8qV
W147aQT97DYkWb3TucY+gVbsfKSzvNoiXwvWMpmXT1Kz8wia0vX7MoPBtO6+uOk=
=6tJk
-----END PGP SIGNATURE-----
-------------- next part --------------
A non-text attachment was scrubbed...
Name: 0x38450DB5.asc
Type: application/pgp-keys
Size: 14046 bytes
Desc: not available
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140819/f42213ca/attachment.bin>

From jgarzik at bitpay.com  Tue Aug 19 23:40:39 2014
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Tue, 19 Aug 2014 19:40:39 -0400
Subject: [Bitcoin-development] Proposal: Encrypt bitcoin messages
In-Reply-To: <53F3DFF7.9070709@jrn.me.uk>
References: <CA+8=xuJ+YDTNjyDW7DvP8KPN_nrFWpE68HvLw6EokFa-B-QGKw@mail.gmail.com>
	<CA+8=xuKRyO1=bu7cgNGHvtAeqgKBxjTH2uUkb61GdCuEQWEu5A@mail.gmail.com>
	<0C0EF7F9-DBBA-4872-897D-63CFA3853726@ricmoo.com>
	<CA+8=xu+KWSF6XYgH-_t87na6M6UOD0CM1su8sizxn5a4b0_Xrw@mail.gmail.com>
	<33D4B2E3-DBF0-444E-B76A-765C4C17E964@ricmoo.com>
	<53F37635.5070807@riseup.net>
	<CAAS2fgTF6424+FfzaL=+iaio2zu_uM_74yKohi7T3dtz=J9CjA@mail.gmail.com>
	<53F38AC9.4000608@corganlabs.com> <53F3DFF7.9070709@jrn.me.uk>
Message-ID: <CAJHLa0ORxgQrkc4oiqSa3NdNHLU-0pmZDLjXUSpBKWBsBWTgcQ@mail.gmail.com>

Encryption is of little value if you may deduce the same information
by observing packet sizes and timings.


On Tue, Aug 19, 2014 at 7:38 PM, J Ross Nicoll <jrn at jrn.me.uk> wrote:
> The concern is that if you can monitor traffic in and out of a single node,
> you can determine which transactions originate from it vs those which it
> relays. That's not great, certainly, but how many nodes actually require
> that level of security, and surely they can use Tor or VPN services if so?
>
> Further, unless the remote nodes are in some way trusted, you're changing
> the attack from read-only to requiring the ability to perform  a man in the
> middle attack - that doesn't seem much harder to me.
>
> As Gregory states, there's been at least two recent serious if not
> catastrophic OpenSSL bugs, and the consequences of Heartbleed if the Bitcoin
> network had been vulnerable are the stuff of nightmares.
>
> Very difficult to see the risk/reward payoff being worthwhile.
>
> Ross
>
>
> On 19/08/2014 18:35, Johnathan Corgan wrote:
>
> On 08/19/2014 09:38 AM, Gregory Maxwell wrote:
>
> We've dodged several emergency scale vulnerabilities by not having TLS.
>
> I'm still trying to understand the original premise that we want
> encrypted communications between nodes.
>
> I can certainly see the value of having *authenticated* traffic with
> specific nodes, using an HMAC for the protocol messages in place of the
> current checksum.
>
>
>
> ------------------------------------------------------------------------------
>
>
>
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
>
> ------------------------------------------------------------------------------
> Slashdot TV.
> Video for Nerds.  Stuff that matters.
> http://tv.slashdot.org/
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>



-- 
Jeff Garzik
Bitcoin core developer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From gmaxwell at gmail.com  Tue Aug 19 23:54:35 2014
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Tue, 19 Aug 2014 16:54:35 -0700
Subject: [Bitcoin-development] Proposal: Encrypt bitcoin messages
In-Reply-To: <53F3E01D.9090403@riseup.net>
References: <CA+8=xuJ+YDTNjyDW7DvP8KPN_nrFWpE68HvLw6EokFa-B-QGKw@mail.gmail.com>
	<CA+8=xuKRyO1=bu7cgNGHvtAeqgKBxjTH2uUkb61GdCuEQWEu5A@mail.gmail.com>
	<0C0EF7F9-DBBA-4872-897D-63CFA3853726@ricmoo.com>
	<CA+8=xu+KWSF6XYgH-_t87na6M6UOD0CM1su8sizxn5a4b0_Xrw@mail.gmail.com>
	<33D4B2E3-DBF0-444E-B76A-765C4C17E964@ricmoo.com>
	<53F37635.5070807@riseup.net>
	<CAAS2fgTF6424+FfzaL=+iaio2zu_uM_74yKohi7T3dtz=J9CjA@mail.gmail.com>
	<53F38AC9.4000608@corganlabs.com> <53F3DFF7.9070709@jrn.me.uk>
	<53F3E01D.9090403@riseup.net>
Message-ID: <CAAS2fgRPJhnD4TEOP8EnZoo2Vbdb7dGBfB10twGrxW_g71UnpA@mail.gmail.com>

On Tue, Aug 19, 2014 at 4:39 PM, Justus Ranvier
<justusranvier at riseup.net> wrote:
> While the rest of the 'net is busy deprecating HTTP and all other
> unencrypted transport methods, why is it(*) even a debate?

I think it's desirable (and you can go look in #bitcoin-dev logs for
me talking about it in the past)? but all of engineering is
tradeoffs... and the ones involved here don't make it a high priority
in my book, esp when people should be using Bitcoin over tor in any
case, which provides better privacy and also covers encrypt + auth.

In general I think authentication is more important than encryption,
since authentication is table stakes required for a number of
anti-partitioning-attack measures.  My past thinking on opportunistic
encryption is that once you're authenticating also encrypting would be
fairly little work, but it should be auth that drives that kind of
effort.



From pete at petertodd.org  Wed Aug 20 00:16:28 2014
From: pete at petertodd.org (Peter Todd)
Date: Tue, 19 Aug 2014 20:16:28 -0400
Subject: [Bitcoin-development] Proposal: Encrypt bitcoin messages
In-Reply-To: <CAJHLa0ORxgQrkc4oiqSa3NdNHLU-0pmZDLjXUSpBKWBsBWTgcQ@mail.gmail.com>
References: <CA+8=xuJ+YDTNjyDW7DvP8KPN_nrFWpE68HvLw6EokFa-B-QGKw@mail.gmail.com>
	<CA+8=xuKRyO1=bu7cgNGHvtAeqgKBxjTH2uUkb61GdCuEQWEu5A@mail.gmail.com>
	<0C0EF7F9-DBBA-4872-897D-63CFA3853726@ricmoo.com>
	<CA+8=xu+KWSF6XYgH-_t87na6M6UOD0CM1su8sizxn5a4b0_Xrw@mail.gmail.com>
	<33D4B2E3-DBF0-444E-B76A-765C4C17E964@ricmoo.com>
	<53F37635.5070807@riseup.net>
	<CAAS2fgTF6424+FfzaL=+iaio2zu_uM_74yKohi7T3dtz=J9CjA@mail.gmail.com>
	<53F38AC9.4000608@corganlabs.com> <53F3DFF7.9070709@jrn.me.uk>
	<CAJHLa0ORxgQrkc4oiqSa3NdNHLU-0pmZDLjXUSpBKWBsBWTgcQ@mail.gmail.com>
Message-ID: <3476b0a1-e08a-46bf-9ee4-ef56fcb02d72@email.android.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256



On 19 August 2014 19:40:39 GMT-04:00, Jeff Garzik <jgarzik at bitpay.com> wrote:
>Encryption is of little value if you may deduce the same information
>by observing packet sizes and timings.

That is simply incorrect. The resources required to do that kind of monitoring are very high; even the NSA can't pull it off consistently for non-targetted operations due to limitations on upstream bandwidth and other resources. (remember that many of their taps are non-cooperative ones, obtained by breaking into routers at ISP's) This I've confirmed with direct conversation with Jacob Applebaum and other Tor devs. Every additional bit of encrypted information flowing over the internet increases the work they need to so to deanonymize you. This is not unlike how CoinJoin, while not providing guaranteed anonymity, makes the job of attackers significantly more difficult by creating large amounts of statistical noise. In addition the Bitcoin P2P protocol has natural anti-traffic analysis properties due to its asynchronous nature.

Re: MITM attacks, again, the resources required to conduct them on a large scale instead of passive attacks just don't exist. For instance the NSA has to be relatively selective in using them for fear of being detected; being able to detect attacks is a huge improvement over the status quo anyway.

Having said that using Tor by default in Bitcoin Core is an even easier way of enabling encryption and authentication, and would help protect all Tor users from surveillance. The easiest way to do this would be to make the Debian/Ubuntu packages depend on Tor, and include a install-time script to setup the hidden service. I've verified with the Tor devs that they would welcome the additional load on the Tor network that Bitcoin would add.
-----BEGIN PGP SIGNATURE-----
Version: APG v1.1.1

iQFQBAEBCAA6BQJT8+jcMxxQZXRlciBUb2RkIChsb3cgc2VjdXJpdHkga2V5KSA8
cGV0ZUBwZXRlcnRvZGQub3JnPgAKCRAZnIM7qOfwhU2WB/9XE6BFxTkbjIfVn46U
uH7HCV/FSgCeSConO7LbFR2m6hN5eZ4oKcLzIi65SqRUol2eCGWVoJDsl3vuTmwF
c4gOqdieJQ6SOdHAzcolf+b3p+VwIXXUMMsO2vI6UGZvV6gFJXnZ17GASdSo9+f8
x4VxgLSunZD0xRMiMntaqPMFu1MyplomimQadW5MDt3QTa2BrOsDMwNS10NSQIAL
8ywHSKh8UddVL8ZeinE/Bhf3T1OnDVBIUCVHhhEYnKLqCnwmyY3NXH4lzXpPvo+e
LhzF7HzB5tE22vIQNb/3RimoN5FV7p4FEvgsGwT/kjjUAxgg6/LpNY5WQG6FL8nJ
/8F3
=t4/7
-----END PGP SIGNATURE-----




From jgarzik at bitpay.com  Wed Aug 20 00:21:35 2014
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Tue, 19 Aug 2014 20:21:35 -0400
Subject: [Bitcoin-development] Proposal: Encrypt bitcoin messages
In-Reply-To: <3476b0a1-e08a-46bf-9ee4-ef56fcb02d72@email.android.com>
References: <CA+8=xuJ+YDTNjyDW7DvP8KPN_nrFWpE68HvLw6EokFa-B-QGKw@mail.gmail.com>
	<CA+8=xuKRyO1=bu7cgNGHvtAeqgKBxjTH2uUkb61GdCuEQWEu5A@mail.gmail.com>
	<0C0EF7F9-DBBA-4872-897D-63CFA3853726@ricmoo.com>
	<CA+8=xu+KWSF6XYgH-_t87na6M6UOD0CM1su8sizxn5a4b0_Xrw@mail.gmail.com>
	<33D4B2E3-DBF0-444E-B76A-765C4C17E964@ricmoo.com>
	<53F37635.5070807@riseup.net>
	<CAAS2fgTF6424+FfzaL=+iaio2zu_uM_74yKohi7T3dtz=J9CjA@mail.gmail.com>
	<53F38AC9.4000608@corganlabs.com> <53F3DFF7.9070709@jrn.me.uk>
	<CAJHLa0ORxgQrkc4oiqSa3NdNHLU-0pmZDLjXUSpBKWBsBWTgcQ@mail.gmail.com>
	<3476b0a1-e08a-46bf-9ee4-ef56fcb02d72@email.android.com>
Message-ID: <CAJHLa0PnvpAaTgaUej=1G7CJ9=BYSjEWvXybfEaG9pFJxsM8fQ@mail.gmail.com>

On Tue, Aug 19, 2014 at 8:16 PM, Peter Todd <pete at petertodd.org> wrote:
> On 19 August 2014 19:40:39 GMT-04:00, Jeff Garzik <jgarzik at bitpay.com> wrote:
>>Encryption is of little value if you may deduce the same information
>>by observing packet sizes and timings.
>
> That is simply incorrect. The resources required to do that kind of monitoring are very high; even the NSA can't pull it off consistently for

Hardly.  For example, when a new block arrives on the network, a
single observer at a single location may obtain a binary "likely|not
bitcoin protocol" decision from a spike in usage correlated with
sudden, global network activity after a period of inactivity.  I'll
not detail all such metrics.

-- 
Jeff Garzik
Bitcoin core developer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From pete at petertodd.org  Wed Aug 20 00:41:27 2014
From: pete at petertodd.org (Peter Todd)
Date: Tue, 19 Aug 2014 20:41:27 -0400
Subject: [Bitcoin-development] Proposal: Encrypt bitcoin messages
In-Reply-To: <CAJHLa0PnvpAaTgaUej=1G7CJ9=BYSjEWvXybfEaG9pFJxsM8fQ@mail.gmail.com>
References: <CA+8=xuJ+YDTNjyDW7DvP8KPN_nrFWpE68HvLw6EokFa-B-QGKw@mail.gmail.com>
	<CA+8=xuKRyO1=bu7cgNGHvtAeqgKBxjTH2uUkb61GdCuEQWEu5A@mail.gmail.com>
	<0C0EF7F9-DBBA-4872-897D-63CFA3853726@ricmoo.com>
	<CA+8=xu+KWSF6XYgH-_t87na6M6UOD0CM1su8sizxn5a4b0_Xrw@mail.gmail.com>
	<33D4B2E3-DBF0-444E-B76A-765C4C17E964@ricmoo.com>
	<53F37635.5070807@riseup.net>
	<CAAS2fgTF6424+FfzaL=+iaio2zu_uM_74yKohi7T3dtz=J9CjA@mail.gmail.com>
	<53F38AC9.4000608@corganlabs.com> <53F3DFF7.9070709@jrn.me.uk>
	<CAJHLa0ORxgQrkc4oiqSa3NdNHLU-0pmZDLjXUSpBKWBsBWTgcQ@mail.gmail.com>
	<3476b0a1-e08a-46bf-9ee4-ef56fcb02d72@email.android.com>
	<CAJHLa0PnvpAaTgaUej=1G7CJ9=BYSjEWvXybfEaG9pFJxsM8fQ@mail.gmail.com>
Message-ID: <b7934ce1-a22f-42d2-92ed-bc5a1c3a27be@email.android.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256



On 19 August 2014 20:21:35 GMT-04:00, Jeff Garzik <jgarzik at bitpay.com> wrote:
>On Tue, Aug 19, 2014 at 8:16 PM, Peter Todd <pete at petertodd.org> wrote:
>> That is simply incorrect. The resources required to do that kind of
>monitoring are very high; even the NSA can't pull it off consistently
>for
>
>Hardly.  For example, when a new block arrives on the network, a
>single observer at a single location may obtain a binary "likely|not
>bitcoin protocol" decision from a spike in usage correlated with
>sudden, global network activity after a period of inactivity.  I'll
>not detail all such metrics.

Emphasis on "likely", at best. Forcing you adversary to rely on uncertain statistics is a huge improvement over the status quo. Secondly your example is of a new block; the more general concern is determining where a given transaction originated. In the best of circumstances determining the origin of a few hundred bytes of days interspersed in dozens of kB/s of buffered data streams is very difficult and expensive even without padding and/or random delay features.

Again, I've spoken to people like Jacob Applebaum about this who have a solid understanding of what the NSA is actually capable of, and they've confirmed the above. Don't let perfect be the enemy of good.

Of course, that's not to say we shouldn't cost-benefit analysis the implementation; not using straight OpenSSL for this is a wise decision. Hence the suggestion of using the existing and tested Tor support to encrypt by default.
-----BEGIN PGP SIGNATURE-----
Version: APG v1.1.1

iQFQBAEBCAA6BQJT8+62MxxQZXRlciBUb2RkIChsb3cgc2VjdXJpdHkga2V5KSA8
cGV0ZUBwZXRlcnRvZGQub3JnPgAKCRAZnIM7qOfwhZe/CADI+XvuCzK6N0/UUieD
WzrGexWQsqNxX2hYQpzAiYT3Y5k4CCJ3yvett0udYKS3Piqd/ihvj9RfjWe5nO+d
snPGNwFU7jSRJ+hwPdnlHfFW99LCkKOzBX0hgC+qg11SyLKcsBwE3qaiFM47G1hy
r4f1qX3Te2Kt0bUxP65d1M0Js1M0x+qLxXs6e9Gy3scFSpDjeoamgliJ6jBeeX9U
8H0mambip5CZ+diGbaMeCCRJd19XH7Nz0QgcznYScmz/3krQhtIdEJKts7bs87vh
vZyH7M4wVCiIDmDNxAIO2slo3+eopEvbOPgqjT7L72jrQgp3zVUtbJDzpSAgcB+M
vLhB
=AuCe
-----END PGP SIGNATURE-----




From justusranvier at riseup.net  Wed Aug 20 00:49:01 2014
From: justusranvier at riseup.net (Justus Ranvier)
Date: Wed, 20 Aug 2014 00:49:01 +0000
Subject: [Bitcoin-development] Proposal: Encrypt bitcoin messages
In-Reply-To: <3476b0a1-e08a-46bf-9ee4-ef56fcb02d72@email.android.com>
References: <CA+8=xuJ+YDTNjyDW7DvP8KPN_nrFWpE68HvLw6EokFa-B-QGKw@mail.gmail.com>
	<CA+8=xuKRyO1=bu7cgNGHvtAeqgKBxjTH2uUkb61GdCuEQWEu5A@mail.gmail.com>
	<0C0EF7F9-DBBA-4872-897D-63CFA3853726@ricmoo.com>
	<CA+8=xu+KWSF6XYgH-_t87na6M6UOD0CM1su8sizxn5a4b0_Xrw@mail.gmail.com>
	<33D4B2E3-DBF0-444E-B76A-765C4C17E964@ricmoo.com>
	<53F37635.5070807@riseup.net>
	<CAAS2fgTF6424+FfzaL=+iaio2zu_uM_74yKohi7T3dtz=J9CjA@mail.gmail.com>
	<53F38AC9.4000608@corganlabs.com> <53F3DFF7.9070709@jrn.me.uk>
	<CAJHLa0ORxgQrkc4oiqSa3NdNHLU-0pmZDLjXUSpBKWBsBWTgcQ@mail.gmail.com>
	<3476b0a1-e08a-46bf-9ee4-ef56fcb02d72@email.android.com>
Message-ID: <53F3F07D.20409@riseup.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256

On 08/20/2014 12:16 AM, Peter Todd wrote:
> The easiest way to do this would be to make the Debian/Ubuntu
> packages depend on Tor, and include a install-time script to setup
> the hidden service. I've verified with the Tor devs that they would
> welcome the additional load on the Tor network that Bitcoin would
> add.

The easiest way for the people who operates nodes would be to compile
Tor into Bitcoin Core as a library so that it "just works" when turned on.

-----BEGIN PGP SIGNATURE-----

iQEcBAEBCAAGBQJT8/B9AAoJEMP3uyY4RQ21YbcH/1golU27alo57cfCqjMei6uD
iJ69NMQ6wO4U9r8VX8Rwkd/8IVK+gP4eJNRj4FlUNU0eXFcXj3zaCpnHnO30OEPV
tdx/dyd/sq/gn5WL3m29MsP5ZVX8pIIH8aQ6jjLWC0SsE6KUJeK6f48o/XST4kMn
a5w1YkUW1Mo/1lLmIlTnmapNrMYq1VppOi0F8AaRgMjTkoX/aGOgu6yIlGJXjAbA
E8zlIvmLBcMq3aGNrlpE5WJBG1UQr84GYxjSQ1evL1PsllkxrSH3MODtESLYTMqB
77ZpGNbm3Ndgxvr03pXhXPGbrug3qX92fbKI42XkSC7n/pWLe5YKUiAukDN4NjU=
=ttua
-----END PGP SIGNATURE-----
-------------- next part --------------
A non-text attachment was scrubbed...
Name: 0x38450DB5.asc
Type: application/pgp-keys
Size: 14046 bytes
Desc: not available
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140820/a3243a2a/attachment.bin>

From pete at petertodd.org  Wed Aug 20 00:57:53 2014
From: pete at petertodd.org (Peter Todd)
Date: Tue, 19 Aug 2014 20:57:53 -0400
Subject: [Bitcoin-development] Proposal: Encrypt bitcoin messages
In-Reply-To: <53F3F07D.20409@riseup.net>
References: <CA+8=xuJ+YDTNjyDW7DvP8KPN_nrFWpE68HvLw6EokFa-B-QGKw@mail.gmail.com>
	<CA+8=xuKRyO1=bu7cgNGHvtAeqgKBxjTH2uUkb61GdCuEQWEu5A@mail.gmail.com>
	<0C0EF7F9-DBBA-4872-897D-63CFA3853726@ricmoo.com>
	<CA+8=xu+KWSF6XYgH-_t87na6M6UOD0CM1su8sizxn5a4b0_Xrw@mail.gmail.com>
	<33D4B2E3-DBF0-444E-B76A-765C4C17E964@ricmoo.com>
	<53F37635.5070807@riseup.net>
	<CAAS2fgTF6424+FfzaL=+iaio2zu_uM_74yKohi7T3dtz=J9CjA@mail.gmail.com>
	<53F38AC9.4000608@corganlabs.com> <53F3DFF7.9070709@jrn.me.uk>
	<CAJHLa0ORxgQrkc4oiqSa3NdNHLU-0pmZDLjXUSpBKWBsBWTgcQ@mail.gmail.com>
	<3476b0a1-e08a-46bf-9ee4-ef56fcb02d72@email.android.com>
	<53F3F07D.20409@riseup.net>
Message-ID: <38a13fbd-09e7-460e-9715-6d585f48f815@email.android.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256



On 19 August 2014 20:49:01 GMT-04:00, Justus Ranvier <justusranvier at riseup.net> wrote:
>On 08/20/2014 12:16 AM, Peter Todd wrote:
>> The easiest way to do this would be to make the Debian/Ubuntu
>> packages depend on Tor, and include a install-time script to setup
>> the hidden service. I've verified with the Tor devs that they would
>> welcome the additional load on the Tor network that Bitcoin would
>> add.
>
>The easiest way for the people who operates nodes would be to compile
>Tor into Bitcoin Core as a library so that it "just works" when turned
>on.

That library doesn't exist yet to my knowledge, and more importantly, would increase the attack surface of Bitcoin Core. (much like using OpenSSL for straight SSL support would)

Also, my proposal of adding Tor support to the Debian packages can be implemented in a relatively short install time script; no code changes required.
-----BEGIN PGP SIGNATURE-----
Version: APG v1.1.1

iQFQBAEBCAA6BQJT8/KRMxxQZXRlciBUb2RkIChsb3cgc2VjdXJpdHkga2V5KSA8
cGV0ZUBwZXRlcnRvZGQub3JnPgAKCRAZnIM7qOfwhauiB/9iEvsRYQGt9lFmrtbW
SBjDt91/v7r3NcI/19aKDNGMaKl61rpzDr1zM3kIBdY3xzFoaYt+LA6O/tZVvaVC
B9zPlZsh+0ZmbU+Ejxd816DvJVDv8aO6Nt+sLuVkkN/TsBa/WCBhvwJ7ixS65/dY
WpFV7awzW+E08RETsV826scP+30lsnY5qcADoHWfuaW7HZQArpCsA+b+Amng8Vf6
mFb5GrxKlvG06w+esLSXMCISS3eMduvfzymfxBxGlgxRAqiYZRbWY3msdRRfWl3e
lISrnqZoB3G529WVGOn4o5DrzDdSJFcb8k2A/Na2J+pIxAD4Cv9vwYM2KCffbeUB
PH6x
=Mw3I
-----END PGP SIGNATURE-----




From will.yager at gmail.com  Wed Aug 20 00:59:14 2014
From: will.yager at gmail.com (William Yager)
Date: Tue, 19 Aug 2014 19:59:14 -0500
Subject: [Bitcoin-development] Proposal: Encrypt bitcoin messages
In-Reply-To: <b7934ce1-a22f-42d2-92ed-bc5a1c3a27be@email.android.com>
References: <CA+8=xuJ+YDTNjyDW7DvP8KPN_nrFWpE68HvLw6EokFa-B-QGKw@mail.gmail.com>
	<CA+8=xuKRyO1=bu7cgNGHvtAeqgKBxjTH2uUkb61GdCuEQWEu5A@mail.gmail.com>
	<0C0EF7F9-DBBA-4872-897D-63CFA3853726@ricmoo.com>
	<CA+8=xu+KWSF6XYgH-_t87na6M6UOD0CM1su8sizxn5a4b0_Xrw@mail.gmail.com>
	<33D4B2E3-DBF0-444E-B76A-765C4C17E964@ricmoo.com>
	<53F37635.5070807@riseup.net>
	<CAAS2fgTF6424+FfzaL=+iaio2zu_uM_74yKohi7T3dtz=J9CjA@mail.gmail.com>
	<53F38AC9.4000608@corganlabs.com> <53F3DFF7.9070709@jrn.me.uk>
	<CAJHLa0ORxgQrkc4oiqSa3NdNHLU-0pmZDLjXUSpBKWBsBWTgcQ@mail.gmail.com>
	<3476b0a1-e08a-46bf-9ee4-ef56fcb02d72@email.android.com>
	<CAJHLa0PnvpAaTgaUej=1G7CJ9=BYSjEWvXybfEaG9pFJxsM8fQ@mail.gmail.com>
	<b7934ce1-a22f-42d2-92ed-bc5a1c3a27be@email.android.com>
Message-ID: <CAG8oi1PSnuP2UHqNRbcwmU8TPEh__Nw-npa=itQrUsnNeMVkBw@mail.gmail.com>

What, exactly, do we hope to achieve from having end-to-end encryption?

Even if it worked perfectly, it wouldn't be very useful.

But it won't work perfectly, because we don't have any method of
authentication. The bitcoin network is trivially MITMable. It's designed to
work even in the face of that, but any encryption we implement will just
get blown away by anyone who cares enough to stand in the middle of two
nodes.

As far as I can see, we get a microscopic obfuscatory advantage over a very
weak passive attacker, at the cost of hugely increased software complexity
(and possibly increased CPU time).

So again; what do we hope to achieve? Why bother? Not a lot of sensitive
information is transmitted in the clear. The little information that might
be considered sensitive is better protected by anonymization (a la Tor),
not encryption.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140819/1be9d73c/attachment.html>

From pete at petertodd.org  Wed Aug 20 01:14:02 2014
From: pete at petertodd.org (Peter Todd)
Date: Tue, 19 Aug 2014 21:14:02 -0400
Subject: [Bitcoin-development] Proposal: Encrypt bitcoin messages
In-Reply-To: <CAG8oi1PSnuP2UHqNRbcwmU8TPEh__Nw-npa=itQrUsnNeMVkBw@mail.gmail.com>
References: <CA+8=xuJ+YDTNjyDW7DvP8KPN_nrFWpE68HvLw6EokFa-B-QGKw@mail.gmail.com>
	<CA+8=xuKRyO1=bu7cgNGHvtAeqgKBxjTH2uUkb61GdCuEQWEu5A@mail.gmail.com>
	<0C0EF7F9-DBBA-4872-897D-63CFA3853726@ricmoo.com>
	<CA+8=xu+KWSF6XYgH-_t87na6M6UOD0CM1su8sizxn5a4b0_Xrw@mail.gmail.com>
	<33D4B2E3-DBF0-444E-B76A-765C4C17E964@ricmoo.com>
	<53F37635.5070807@riseup.net>
	<CAAS2fgTF6424+FfzaL=+iaio2zu_uM_74yKohi7T3dtz=J9CjA@mail.gmail.com>
	<53F38AC9.4000608@corganlabs.com> <53F3DFF7.9070709@jrn.me.uk>
	<CAJHLa0ORxgQrkc4oiqSa3NdNHLU-0pmZDLjXUSpBKWBsBWTgcQ@mail.gmail.com>
	<3476b0a1-e08a-46bf-9ee4-ef56fcb02d72@email.android.com>
	<CAJHLa0PnvpAaTgaUej=1G7CJ9=BYSjEWvXybfEaG9pFJxsM8fQ@mail.gmail.com>
	<b7934ce1-a22f-42d2-92ed-bc5a1c3a27be@email.android.com>
	<CAG8oi1PSnuP2UHqNRbcwmU8TPEh__Nw-npa=itQrUsnNeMVkBw@mail.gmail.com>
Message-ID: <e8baf847-6829-4d0f-85fb-5fd194ae9054@email.android.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256



On 19 August 2014 20:59:14 GMT-04:00, William Yager <will.yager at gmail.com> wrote:
>What, exactly, do we hope to achieve from having end-to-end encryption?
>
>Even if it worked perfectly, it wouldn't be very useful.
>
>But it won't work perfectly, because we don't have any method of
>authentication.

Don't let perfect be the enemy of good.

> The bitcoin network is trivially MITMable. It's
>designed to
>work even in the face of that, but any encryption we implement will
>just
>get blown away by anyone who cares enough to stand in the middle of two
>nodes.
>
>As far as I can see, we get a microscopic obfuscatory advantage over a
>very
>weak passive attacker, at the cost of hugely increased software
>complexity
>(and possibly increased CPU time).

You realize that by your own definition even the NSA is mostly a "weak passive attacker" They do *not* have the ability to attack more than a small, targeted, subset of connection for both technical and political reasons. For starters, MITM attacks are easily detected - "Bitcoin network attacked by unknown agents! Has your ISP been compromised?" would make for great headlines and would soon see the problem fixed both technically and politically.

In any case, my suggestion of enabling hidden service support by default adds both encryption and reasonably good authentication.

-----BEGIN PGP SIGNATURE-----
Version: APG v1.1.1

iQFQBAEBCAA6BQJT8/ZaMxxQZXRlciBUb2RkIChsb3cgc2VjdXJpdHkga2V5KSA8
cGV0ZUBwZXRlcnRvZGQub3JnPgAKCRAZnIM7qOfwhV5UCAC0wVMyKtCedZuUKXrw
Mg6qvbkDzGyzn7fgASTnMh8hF+p+p5MoOz3K0FGTdLph+ulptz9ITatGmmi+av+u
0Fc8xXYgxiYcIwtMVumNrHR16bjG7NoShnqMujuUZ7a+xigeHxV2/tG0VRb9Km8W
GFYNdY4mOFubFu7qfqymmxGsIgP42rPsN6c41B75wqqaGzSX7BRmlxNsYVSUO3Fi
fwNU7y7hLC9BN+WQCmVK+Rk57XpXcoydfvsz9a/SLhiQKssEdcDbUq4gLtnDHs92
JBsUqzG/wDgcQFiLuAm/A/ZvDAERwPr6jtunt3CCDt+UdLwlGAj5RTnuHgY72PNS
Ma2O
=2qdX
-----END PGP SIGNATURE-----




From will.yager at gmail.com  Wed Aug 20 01:19:43 2014
From: will.yager at gmail.com (William Yager)
Date: Tue, 19 Aug 2014 20:19:43 -0500
Subject: [Bitcoin-development] Proposal: Encrypt bitcoin messages
In-Reply-To: <e8baf847-6829-4d0f-85fb-5fd194ae9054@email.android.com>
References: <CA+8=xuJ+YDTNjyDW7DvP8KPN_nrFWpE68HvLw6EokFa-B-QGKw@mail.gmail.com>
	<CA+8=xuKRyO1=bu7cgNGHvtAeqgKBxjTH2uUkb61GdCuEQWEu5A@mail.gmail.com>
	<0C0EF7F9-DBBA-4872-897D-63CFA3853726@ricmoo.com>
	<CA+8=xu+KWSF6XYgH-_t87na6M6UOD0CM1su8sizxn5a4b0_Xrw@mail.gmail.com>
	<33D4B2E3-DBF0-444E-B76A-765C4C17E964@ricmoo.com>
	<53F37635.5070807@riseup.net>
	<CAAS2fgTF6424+FfzaL=+iaio2zu_uM_74yKohi7T3dtz=J9CjA@mail.gmail.com>
	<53F38AC9.4000608@corganlabs.com> <53F3DFF7.9070709@jrn.me.uk>
	<CAJHLa0ORxgQrkc4oiqSa3NdNHLU-0pmZDLjXUSpBKWBsBWTgcQ@mail.gmail.com>
	<3476b0a1-e08a-46bf-9ee4-ef56fcb02d72@email.android.com>
	<CAJHLa0PnvpAaTgaUej=1G7CJ9=BYSjEWvXybfEaG9pFJxsM8fQ@mail.gmail.com>
	<b7934ce1-a22f-42d2-92ed-bc5a1c3a27be@email.android.com>
	<CAG8oi1PSnuP2UHqNRbcwmU8TPEh__Nw-npa=itQrUsnNeMVkBw@mail.gmail.com>
	<e8baf847-6829-4d0f-85fb-5fd194ae9054@email.android.com>
Message-ID: <CAG8oi1MpMVqp_Am6aj=hLV5z-CfY7HNSuMQ6k4uVscM=aKsOYA@mail.gmail.com>

On Tue, Aug 19, 2014 at 8:14 PM, Peter Todd <pete at petertodd.org> wrote:

>
> Don't let perfect be the enemy of good.
>

I'm not. I don't think this proposal is even good.


> You realize that by your own definition even the NSA is mostly a "weak
> passive attacker" They do *not* have the ability to attack more than a
> small, targeted, subset of connection for both technical and political
> reasons. For starters, MITM attacks are easily detected - "Bitcoin network
> attacked by unknown agents! Has your ISP been compromised?" would make for
> great headlines and would soon see the problem fixed both technically and
> politically.
>
>
Again, the NSA might get an absolutely trivial amount of data from
monitoring connections on the Bitcoin network. A bit of publicity is *not*
worth drastically increasing the software complexity of the client.


> In any case, my suggestion of enabling hidden service support by default
> adds both encryption and reasonably good authentication.


Enabling hidden service support by default would introduce an insanely huge
attack surface.

And you're conflating two different things; using Tor is valuable to
Bitcoin because it would provide some anonymity. The encryption aspect is
pretty much useless for us.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140819/ce8073c6/attachment.html>

From hozer at hozed.org  Wed Aug 20 01:26:23 2014
From: hozer at hozed.org (Troy Benjegerdes)
Date: Tue, 19 Aug 2014 20:26:23 -0500
Subject: [Bitcoin-development] Reconsidering github
In-Reply-To: <CA+s+GJDM4Tq69wDv2UQ07aCLDOayA9C8im+O+cJn2dSrVopUmw@mail.gmail.com>
References: <CAJHLa0NXAYh9HzazN6gArUV8y7J8_G0oqkZqPBgibpW0wRNxKQ@mail.gmail.com>
	<CA+s+GJDM4Tq69wDv2UQ07aCLDOayA9C8im+O+cJn2dSrVopUmw@mail.gmail.com>
Message-ID: <20140820012623.GN22640@nl.grid.coop>

On Tue, Aug 19, 2014 at 04:58:48PM +0200, Wladimir wrote:
> On Tue, Aug 19, 2014 at 2:02 PM, Jeff Garzik <jgarzik at bitpay.com> wrote:
> > It would be nice if the issues and git repo for Bitcoin Core were not
> > on such a centralized service as github, nice and convenient as it is.
> 
> Despite my complaining about github, I don't like the idea of moving
> somewhere else. The current way of working - to use github for storing
> the tree, and use a custom script for signing+merging - is fine with
> me.
> 
> Github has a low barrier to contribution. Almost every open source
> developer already has a github account. Switching to something
> self-hosted makes it more difficult for people to contribute.
> 
> Plus if we have to take the hosting upon ourselves, we have to handle
> sysadmin work ourselves as well. That's not a good use of the limited
> manpower available.
> 
> Also it will be a lot of work to migrate over all the current issues
> and pulls. I don't look forward to that. I don't see the point of
> this, sorry.
> 
> Wladimir

If a project cannot be organized enough to run its own hosting/web presense/
counterintelligence/security that starts with installing an OS and patching
kernels, then it is really not wise for me to trust my financial future to
software written by such a group.

There is a great deal of 'work' that is really quite pointless, particularly
in regards to claims I see about security that are irrelevant unless you 
have the understanding that comes from operating and running your own 
servers. 

This includes running DDOS protection, so no cloudflare.

If bitcoin wants to become irrelevant, then by all means, continue to 
depend on github and all the unknown attack surface it exposes.

Those of us that do run our own servers will migrate to higher quality 
alternatives.

-- 
----------------------------------------------------------------------------
Troy Benjegerdes                 'da hozer'                  hozer at hozed.org
7 elements      earth::water::air::fire::mind::spirit::soul        grid.coop

      Never pick a fight with someone who buys ink by the barrel,
         nor try buy a hacker who makes money by the megahash




From pete at petertodd.org  Wed Aug 20 01:27:46 2014
From: pete at petertodd.org (Peter Todd)
Date: Tue, 19 Aug 2014 21:27:46 -0400
Subject: [Bitcoin-development] Proposal: Encrypt bitcoin messages
In-Reply-To: <CAG8oi1MpMVqp_Am6aj=hLV5z-CfY7HNSuMQ6k4uVscM=aKsOYA@mail.gmail.com>
References: <CA+8=xuJ+YDTNjyDW7DvP8KPN_nrFWpE68HvLw6EokFa-B-QGKw@mail.gmail.com>
	<CA+8=xuKRyO1=bu7cgNGHvtAeqgKBxjTH2uUkb61GdCuEQWEu5A@mail.gmail.com>
	<0C0EF7F9-DBBA-4872-897D-63CFA3853726@ricmoo.com>
	<CA+8=xu+KWSF6XYgH-_t87na6M6UOD0CM1su8sizxn5a4b0_Xrw@mail.gmail.com>
	<33D4B2E3-DBF0-444E-B76A-765C4C17E964@ricmoo.com>
	<53F37635.5070807@riseup.net>
	<CAAS2fgTF6424+FfzaL=+iaio2zu_uM_74yKohi7T3dtz=J9CjA@mail.gmail.com>
	<53F38AC9.4000608@corganlabs.com> <53F3DFF7.9070709@jrn.me.uk>
	<CAJHLa0ORxgQrkc4oiqSa3NdNHLU-0pmZDLjXUSpBKWBsBWTgcQ@mail.gmail.com>
	<3476b0a1-e08a-46bf-9ee4-ef56fcb02d72@email.android.com>
	<CAJHLa0PnvpAaTgaUej=1G7CJ9=BYSjEWvXybfEaG9pFJxsM8fQ@mail.gmail.com>
	<b7934ce1-a22f-42d2-92ed-bc5a1c3a27be@email.android.com>
	<CAG8oi1PSnuP2UHqNRbcwmU8TPEh__Nw-npa=itQrUsnNeMVkBw@mail.gmail.com>
	<e8baf847-6829-4d0f-85fb-5fd194ae9054@email.android.com>
	<CAG8oi1MpMVqp_Am6aj=hLV5z-CfY7HNSuMQ6k4uVscM=aKsOYA@mail.gmail.com>
Message-ID: <e508c8c0-f964-475b-bdfb-6fa8e9547560@email.android.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256



On 19 August 2014 21:19:43 GMT-04:00, William Yager <will.yager at gmail.com> wrote:
>On Tue, Aug 19, 2014 at 8:14 PM, Peter Todd <pete at petertodd.org> wrote:
>> In any case, my suggestion of enabling hidden service support by
>default
>> adds both encryption and reasonably good authentication.
>
>
>Enabling hidden service support by default would introduce an insanely
>huge
>attack surface.

Hence my suggestion of separating that surface by using the standalone Tor binary, which runs under a different user to the Bitcoin Core binary.

>And you're conflating two different things; using Tor is valuable to
>Bitcoin because it would provide some anonymity. The encryption aspect
>is
>pretty much useless for us.

First of all, without encryption we're leaking significant amounts of information to any passive attacker trying to trace the origin of Bitcoin transactions, a significant privacy risk.

Secondly the upcoming v0.10's fee estimation implementation is quite vulnerable to Sybil attacks. Authentication and encryption are needed to make it secure from ISP-level targeting to ensure that your view of the network is representative. Tor support used in parallel with native connection is ideal here, as neither the Tor network nor your ISP alone can Sybil attack you. It's notable that Bitcoinj has already implemented Tor support for these same reasons.
-----BEGIN PGP SIGNATURE-----
Version: APG v1.1.1

iQFQBAEBCAA6BQJT8/mSMxxQZXRlciBUb2RkIChsb3cgc2VjdXJpdHkga2V5KSA8
cGV0ZUBwZXRlcnRvZGQub3JnPgAKCRAZnIM7qOfwhRZjCAC4PSpQ68qgtFMR77xf
zXZLr/iMKX6yyJwXRj+vGi+0Ng/sv9NlYjYnDeflom37WlpGo/sCOFcVWImhnS2d
kUFoUH92iXwRuEt/SN/LrHghkLWOxtVu9wa49eS/piGZFF3JWllk82MgdBZ6vjNw
B6WuInEIurK+h8rUbAi2HjFkxVN0K0SsrFt/P0tHj10ABcMealBRoJh2Jx7fLNdS
uTKddqeLyThEpLGNti3k+lhwQ2dA5RUBq6q3GUS/hWvTHRnU+viGMJSYv62LXRN5
t87BXRY/R9UBpnudf3TIlPtOuIWcv2LhlXVjvbDDQqwJkvB3Qf4ejE3RZ28S5IUr
OBQH
=Gy7X
-----END PGP SIGNATURE-----




From gmaxwell at gmail.com  Wed Aug 20 01:34:39 2014
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Tue, 19 Aug 2014 18:34:39 -0700
Subject: [Bitcoin-development] Reconsidering github
In-Reply-To: <20140820012623.GN22640@nl.grid.coop>
References: <CAJHLa0NXAYh9HzazN6gArUV8y7J8_G0oqkZqPBgibpW0wRNxKQ@mail.gmail.com>
	<CA+s+GJDM4Tq69wDv2UQ07aCLDOayA9C8im+O+cJn2dSrVopUmw@mail.gmail.com>
	<20140820012623.GN22640@nl.grid.coop>
Message-ID: <CAAS2fgSdFeC_5Jt9-=aJ2j-S9BHT=QikOWceU8SKVenNoNCiVw@mail.gmail.com>

On Tue, Aug 19, 2014 at 6:26 PM, Troy Benjegerdes <hozer at hozed.org> wrote:
> If a project cannot be organized enough to run its own hosting/web presense/
> counterintelligence/security that starts with installing an OS and patching
> kernels, then it is really not wise for me to trust my financial future to
> software written by such a group.

Please take the hyperbole elsewhere. Good dialog it's going to happen
with the insults and adhomenem.

Regardless of where the repositories live their integrity is protected
by digital signatures and cryptographic hashes. Running them elsewhere
can be virtuous for other reasons, but it doesn't play much into this
since the same tools must be used to guarantee their security.



From 21xe14 at gmail.com  Wed Aug 20 02:23:34 2014
From: 21xe14 at gmail.com (21 e14)
Date: Wed, 20 Aug 2014 02:23:34 +0000
Subject: [Bitcoin-development] BIP: Custodial Identities
Message-ID: <CAFZQHkGuaCW8+YAUtkfnfB-+A5nKPdXqSN1TWkTKR+quV-2YnA@mail.gmail.com>

As suggested before submitting a BIP, I am sending this to the mailing list.


Bitcoin is often described as ?the currency of the Internet?, ?the TCP/IP
of money?, or simply ?the Internet of Money?. What is needed is an optional
identity layer ? a Bitcoin Assigned Custodial Identities Authority, much
like the Internet Assigned Numbers Authority, to oversee global Custodial
Identity allocation. Such an authority delegates Custodial Identity Spaces
to Regional Bitcoin Custodial Identity Registries, much like the RIRs
(Regional Internet Registries) managing the allocation of Internet number
resources.

A Bitcoin Custodial Identity (BCI) account address would consist of a
Custodial Identifier allocated by the BACIA/RBCIRs (much like a bank?s
routing number), and an account address (much like an account number).
Bitcoin Custodial Identities allow dispute resolution in the legal system
for transactions in the BCI address space. Free market would drive and
determine the demand for custodial accounts. P2PKH users not affected.


Feedback is appreciated.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140820/a4b19f5b/attachment.html>

From slashdevnull at hotmail.com  Wed Aug 20 03:23:49 2014
From: slashdevnull at hotmail.com (Un Ix)
Date: Wed, 20 Aug 2014 03:23:49 +0000
Subject: [Bitcoin-development]
	=?utf-8?q?Proposal=3A_Encrypt_bitcoin_messa?= =?utf-8?q?ges?=
In-Reply-To: <c45a638f1e1640fe84bef01d12cda4c3@hotmail.com>
References: <c45a638f1e1640fe84bef01d12cda4c3@hotmail.com>
Message-ID: <BLU402-EAS2546AD6C97DCED8FCE9C04CC6D20@phx.gbl>

Excuse the ignorance, but there is something I?m not getting in this discussion.


Given it?s a published protocol, with available source code running on an open P2P network, why would any messages between nodes benefit from being encrypted? Surely all the data being processed by the network is known to any persistent client node(s)? 


Seems like that solution is orthogonal to the root problem, where attackers could monitor the network and deduce IP addresses by e.g. mapping senders of transactions.

  



From: Peter Todd
Sent: ?Wednesday?, ?August? ?20?, ?2014 ?9?:?28? ?AM
To: William Yager, bitcoin-development at lists.sourceforge.net





-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256



On 19 August 2014 21:19:43 GMT-04:00, William Yager <will.yager at gmail.com> wrote:
>On Tue, Aug 19, 2014 at 8:14 PM, Peter Todd <pete at petertodd.org> wrote:
>> In any case, my suggestion of enabling hidden service support by
>default
>> adds both encryption and reasonably good authentication.
>
>
>Enabling hidden service support by default would introduce an insanely
>huge
>attack surface.

Hence my suggestion of separating that surface by using the standalone Tor binary, which runs under a different user to the Bitcoin Core binary.

>And you're conflating two different things; using Tor is valuable to
>Bitcoin because it would provide some anonymity. The encryption aspect
>is
>pretty much useless for us.

First of all, without encryption we're leaking significant amounts of information to any passive attacker trying to trace the origin of Bitcoin transactions, a significant privacy risk.

Secondly the upcoming v0.10's fee estimation implementation is quite vulnerable to Sybil attacks. Authentication and encryption are needed to make it secure from ISP-level targeting to ensure that your view of the network is representative. Tor support used in parallel with native connection is ideal here, as neither the Tor network nor your ISP alone can Sybil attack you. It's notable that Bitcoinj has already implemented Tor support for these same reasons.
-----BEGIN PGP SIGNATURE-----
Version: APG v1.1.1

iQFQBAEBCAA6BQJT8/mSMxxQZXRlciBUb2RkIChsb3cgc2VjdXJpdHkga2V5KSA8
cGV0ZUBwZXRlcnRvZGQub3JnPgAKCRAZnIM7qOfwhRZjCAC4PSpQ68qgtFMR77xf
zXZLr/iMKX6yyJwXRj+vGi+0Ng/sv9NlYjYnDeflom37WlpGo/sCOFcVWImhnS2d
kUFoUH92iXwRuEt/SN/LrHghkLWOxtVu9wa49eS/piGZFF3JWllk82MgdBZ6vjNw
B6WuInEIurK+h8rUbAi2HjFkxVN0K0SsrFt/P0tHj10ABcMealBRoJh2Jx7fLNdS
uTKddqeLyThEpLGNti3k+lhwQ2dA5RUBq6q3GUS/hWvTHRnU+viGMJSYv62LXRN5
t87BXRY/R9UBpnudf3TIlPtOuIWcv2LhlXVjvbDDQqwJkvB3Qf4ejE3RZ28S5IUr
OBQH
=Gy7X
-----END PGP SIGNATURE-----


------------------------------------------------------------------------------
Slashdot TV.  
Video for Nerds.  Stuff that matters.
http://tv.slashdot.org/
_______________________________________________
Bitcoin-development mailing list
Bitcoin-development at lists.sourceforge.net
https://lists.sourceforge.net/lists/listinfo/bitcoin-development
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140820/7c07c29c/attachment.html>

From da2ce7 at gmail.com  Wed Aug 20 05:40:49 2014
From: da2ce7 at gmail.com (Cameron Garnham)
Date: Wed, 20 Aug 2014 07:40:49 +0200
Subject: [Bitcoin-development] Proposal: Encrypt bitcoin messages
In-Reply-To: <BLU402-EAS2546AD6C97DCED8FCE9C04CC6D20@phx.gbl>
References: <c45a638f1e1640fe84bef01d12cda4c3@hotmail.com>
	<BLU402-EAS2546AD6C97DCED8FCE9C04CC6D20@phx.gbl>
Message-ID: <CAACjpwKX9cwowiCruP9xw2UiqfsVXVC1TdKvA1HbQZ6UZ6qBsA@mail.gmail.com>

We should aim to use perfect forward secrecy between all nodes by default.

This forces the attacker to do a MITM attack that is far more expensive on
the large scale.

I don't see why this is seen as so controversial.  It is relatively cheap
to implement on our side,  and has a dramatic increase of cost for any
attackers.

Cam.
On 20/08/2014 5:49 am, "Un Ix" <slashdevnull at hotmail.com> wrote:

>  Excuse the ignorance, but there is something I?m not getting in this
> discussion.
>
> Given it?s a published protocol, with available source code running on an
> open P2P network, why would any messages between nodes benefit from being
> encrypted? Surely all the data being processed by the network is known to
> any persistent client node(s)?
>
> Seems like that solution is orthogonal to the root problem, where
> attackers could monitor the network and deduce IP addresses by e.g. mapping
> senders of transactions.
>
> *From:* Peter Todd <pete at petertodd.org>
> *Sent:* ?Wednesday?, ?August? ?20?, ?2014 ?9?:?28? ?AM
> *To:* William Yager <will.yager at gmail.com>,
> bitcoin-development at lists.sourceforge.net
>
> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA256
>
>
>
> On 19 August 2014 21:19:43 GMT-04:00, William Yager <will.yager at gmail.com>
> wrote:
> >On Tue, Aug 19, 2014 at 8:14 PM, Peter Todd <pete at petertodd.org> wrote:
> >> In any case, my suggestion of enabling hidden service support by
> >default
> >> adds both encryption and reasonably good authentication.
> >
> >
> >Enabling hidden service support by default would introduce an insanely
> >huge
> >attack surface.
>
> Hence my suggestion of separating that surface by using the standalone Tor
> binary, which runs under a different user to the Bitcoin Core binary.
>
> >And you're conflating two different things; using Tor is valuable to
> >Bitcoin because it would provide some anonymity. The encryption aspect
> >is
> >pretty much useless for us.
>
> First of all, without encryption we're leaking significant amounts of
> information to any passive attacker trying to trace the origin of Bitcoin
> transactions, a significant privacy risk.
>
> Secondly the upcoming v0.10's fee estimation implementation is quite
> vulnerable to Sybil attacks. Authentication and encryption are needed to
> make it secure from ISP-level targeting to ensure that your view of the
> network is representative. Tor support used in parallel with native
> connection is ideal here, as neither the Tor network nor your ISP alone can
> Sybil attack you. It's notable that Bitcoinj has already implemented Tor
> support for these same reasons.
> -----BEGIN PGP SIGNATURE-----
> Version: APG v1.1.1
>
> iQFQBAEBCAA6BQJT8/mSMxxQZXRlciBUb2RkIChsb3cgc2VjdXJpdHkga2V5KSA8
> cGV0ZUBwZXRlcnRvZGQub3JnPgAKCRAZnIM7qOfwhRZjCAC4PSpQ68qgtFMR77xf
> zXZLr/iMKX6yyJwXRj+vGi+0Ng/sv9NlYjYnDeflom37WlpGo/sCOFcVWImhnS2d
> kUFoUH92iXwRuEt/SN/LrHghkLWOxtVu9wa49eS/piGZFF3JWllk82MgdBZ6vjNw
> B6WuInEIurK+h8rUbAi2HjFkxVN0K0SsrFt/P0tHj10ABcMealBRoJh2Jx7fLNdS
> uTKddqeLyThEpLGNti3k+lhwQ2dA5RUBq6q3GUS/hWvTHRnU+viGMJSYv62LXRN5
> t87BXRY/R9UBpnudf3TIlPtOuIWcv2LhlXVjvbDDQqwJkvB3Qf4ejE3RZ28S5IUr
> OBQH
> =Gy7X
> -----END PGP SIGNATURE-----
>
>
>
> ------------------------------------------------------------------------------
> Slashdot TV.
> Video for Nerds.  Stuff that matters.
> http://tv.slashdot.org/
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
> ------------------------------------------------------------------------------
> Slashdot TV.
> Video for Nerds.  Stuff that matters.
> http://tv.slashdot.org/
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140820/633971c4/attachment.html>

From laanwj at gmail.com  Wed Aug 20 06:24:33 2014
From: laanwj at gmail.com (Wladimir)
Date: Wed, 20 Aug 2014 08:24:33 +0200
Subject: [Bitcoin-development] Reconsidering github
In-Reply-To: <20140820012623.GN22640@nl.grid.coop>
References: <CAJHLa0NXAYh9HzazN6gArUV8y7J8_G0oqkZqPBgibpW0wRNxKQ@mail.gmail.com>
	<CA+s+GJDM4Tq69wDv2UQ07aCLDOayA9C8im+O+cJn2dSrVopUmw@mail.gmail.com>
	<20140820012623.GN22640@nl.grid.coop>
Message-ID: <CA+s+GJD4W=SX1QEpW-3rcPHVsRRVoXPkjRGRaCsA49SDOAssVw@mail.gmail.com>

On Wed, Aug 20, 2014 at 3:26 AM, Troy Benjegerdes <hozer at hozed.org> wrote:

> If bitcoin wants to become irrelevant, then by all means, continue to
> depend on github and all the unknown attack surface it exposes.
>
> Those of us that do run our own servers will migrate to higher quality
> alternatives.

So that means you're volunteering to run a web-accessible mirror of
the bitcoin repositories?

Wladimir



From cryptocurrencies at quidecco.de  Wed Aug 20 12:59:01 2014
From: cryptocurrencies at quidecco.de (Isidor Zeuner)
Date: Wed, 20 Aug 2014 14:59:01 +0200 (CEST)
Subject: [Bitcoin-development] Proposal: PoW-based throttling of addresses
	(was: Outbound connections rotation)
In-Reply-To: <20140818164543.GB31175@localhost.localdomain>
Message-ID: <20140820125901.CB71CE043A5@quidecco.de>

Hi there,

quote:
[...]
> If two distinct transactions (with unrelated bitcoin addresses)
> come from the same set of 8 peers, the attacker can conclude that they
> originated from the same user. This gives another method (in addition
> to transaction graph analysis) for an attacker to link different BC
> addresses of the same user.

Using the same set of nodes for posting transactions using unrelated
inputs kind of limits the privacy improvement that can be gained from
using unrelated inputs in the first place.

Similar to how Tor uses different circuits for different hosts to
connect to, it may make more sense to only use the same set of nodes
for posting a subsequent transaction when the input addresses are also
the same.

[...]
> Some details are here: https://www.cryptolux.org/index.php/Bitcoin
>

I also find the topic of banning Tor exit nodes interesting.

I wonder if it makes more sense not to ban IP addresses completely,
but instead to throttle them using a PoW-based access control
scheme. Misbehaving addresses can have their connecting difficulty
scaled up, which should make it uneconomic to try to DoS the usage of
Tor exit nodes for connecting to Bitcoin.

It may also help nodes behind a NAT router if they share their global
IP with misconfigured nodes.

Best regards,

Isidor



From mike at plan99.net  Wed Aug 20 14:16:11 2014
From: mike at plan99.net (Mike Hearn)
Date: Wed, 20 Aug 2014 16:16:11 +0200
Subject: [Bitcoin-development] Reconsidering github
In-Reply-To: <CA+s+GJD4W=SX1QEpW-3rcPHVsRRVoXPkjRGRaCsA49SDOAssVw@mail.gmail.com>
References: <CAJHLa0NXAYh9HzazN6gArUV8y7J8_G0oqkZqPBgibpW0wRNxKQ@mail.gmail.com>
	<CA+s+GJDM4Tq69wDv2UQ07aCLDOayA9C8im+O+cJn2dSrVopUmw@mail.gmail.com>
	<20140820012623.GN22640@nl.grid.coop>
	<CA+s+GJD4W=SX1QEpW-3rcPHVsRRVoXPkjRGRaCsA49SDOAssVw@mail.gmail.com>
Message-ID: <CANEZrP3LUMfNTDa1BUBE6PtCAt2Gd6g+cdt5oprydh643O_G_Q@mail.gmail.com>

If github were to be abandoned for anything, it'd make sense to move code
review and bug tracking elsewhere. GitHub does a reasonably good job of
hosting git repositories. It kind of sucks at code review and the issue
tracker is rudimentary at best. These days you can do "log in with my
github account" so if done well, it'd not have to be very painful.

JetBrains make great stuff and they have a code review and repository
exploration tool called Upsource in development, which should come out
soon. I think it's proprietary but that would be no different to github,
and it's designed for self hosting.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140820/1f71afc0/attachment.html>

From mike at plan99.net  Wed Aug 20 14:37:24 2014
From: mike at plan99.net (Mike Hearn)
Date: Wed, 20 Aug 2014 16:37:24 +0200
Subject: [Bitcoin-development] Proposal: Encrypt bitcoin messages
In-Reply-To: <CAACjpwKX9cwowiCruP9xw2UiqfsVXVC1TdKvA1HbQZ6UZ6qBsA@mail.gmail.com>
References: <c45a638f1e1640fe84bef01d12cda4c3@hotmail.com>
	<BLU402-EAS2546AD6C97DCED8FCE9C04CC6D20@phx.gbl>
	<CAACjpwKX9cwowiCruP9xw2UiqfsVXVC1TdKvA1HbQZ6UZ6qBsA@mail.gmail.com>
Message-ID: <CANEZrP0WC2XL3Z0==BMjhWJuA8DgxBKUMKMdhh267JXduCZ0KQ@mail.gmail.com>

I would be very happy if we upgraded the P2P protocol with MAC keys and a
simple home grown encryption layer, because:

   1. It's practically guaranteed that 5-eyes intelligence agencies are
   either systematically deanonymising Bitcoin users already (linking
   transactions to real world identities) or close to succeeding. Peter is
   correct. Given the way their infrastructure works, encrypting link level
   traffic would significantly raise the bar to such attacks. Quite possibly
   to the level where it's deemed unprofitable to continue.

   2. Tor is not a complete solution. The most interesting links to monitor
   are those from SPV clients connecting to Core nodes. Whilst Java SPV
   clients have the nice option of an easy bundled Tor client (er, once we fix
   the last bugs) clients that are not based on bitcoinj would have to use the
   full-blown Tor client, which is not only a PITA to bundle as Tor is not at
   all library-fied, but is a giant pile of C which is almost certainly
   exploitable. Even if it runs in a separate address space, for many
   platforms this is insufficient as a compromised Tor client could then go
   ahead and compromise your wallet app too.

Implementing a full Tor client is not a reasonable thing to ask of a wallet
developer, but doing HMAC checks and a simple ECDH exchange + AES would be
quite realistic.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140820/d2763572/attachment.html>

From mike at plan99.net  Wed Aug 20 14:41:03 2014
From: mike at plan99.net (Mike Hearn)
Date: Wed, 20 Aug 2014 16:41:03 +0200
Subject: [Bitcoin-development] Proposal: PoW-based throttling of
 addresses (was: Outbound connections rotation)
In-Reply-To: <20140820125901.CB71CE043A5@quidecco.de>
References: <20140818164543.GB31175@localhost.localdomain>
	<20140820125901.CB71CE043A5@quidecco.de>
Message-ID: <CANEZrP1RzLmSB74xdFZbePAE9nxjR-_hSCGQhNH81vRKSji2AQ@mail.gmail.com>

>
> Misbehaving addresses can have their connecting difficulty
> scaled up, which should make it uneconomic to try to DoS the usage of
> Tor exit nodes for connecting to Bitcoin.
>

You can't solve DoS by requiring all clients to do complicated work, all
that means is that weak clients (like users mobile phones and tablets) are
successfully DoSd whereas the attackers botnet of stolen computers sit
there solving PoWs.

The correct way to solve DoS is by having work prioritisation and queueing
mechanisms, then finding ways to distinguish "good" clients from "bad"
clients. Doing this whilst preserving privacy is hard. Long term the only
way to solve it may be to require clients to present some kind of cookie
during resource exhaustion events that prove they've been around for a
while, thus allowing them to jump the queue.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140820/20558085/attachment.html>

From 21xe14 at gmail.com  Thu Aug 21 02:32:29 2014
From: 21xe14 at gmail.com (21E14)
Date: Thu, 21 Aug 2014 02:32:29 +0000
Subject: [Bitcoin-development] BIP: Custodial Identities
Message-ID: <CAFZQHkFb_TtpV3RKoM5vAmXitph2xiAX36vXz50MdYuhNMfz+w@mail.gmail.com>

Thank you for your feedback regarding Custodial Identities. I will address
it to the mailing list for transparency.

Think of it as a 1-of-2 multisig edge case where Custodian Identities are
actively managed by the Bitcoin Assigned Custodial Identities
Authority/Regional Bitcoin Custodial Identity Registries. Once the optional
identity layer is integrated, there are so many applications beyond dispute
resolution, if you could effortlessly inject Custodian Identities into the
blockchain itself as easily as providing 1-of-2 public keys.

Bitcoin Custodial Identities can be applied to coinbase transactions as
well, in any or all jurisdictions, thus providing further incentive to keep
nodes honest, or enabling a recovery mechanism in catastrophic failure
events, such as a break in SHA-256. Custodians provide account addresses
out of unused address space further alleviating address collisions as a
psychological barrier to adoption. Custodial to non-custodial transactions
could behave much like the UTXO of a coinbase transaction, which has the
special condition that it cannot be spent (used as an input) for at least
100 blocks. It's based on open market competition, and there will probably
always be users willing to live outside of the BCI address space.


>>On Tue, Aug 19, 2014 at 10:23 PM, 21E14 <21xe14 at gmail.com> wrote:
>>
>>As suggested before submitting a BIP, I am sending this to the mailing
list.
>>
>>
>>Bitcoin is often described as ?the currency of the Internet?, ?the TCP/IP
of money?, or simply ?the Internet of Money?. What is needed is an optional
identity layer ? a Bitcoin Assigned Custodial Identities >>Authority, much
like the Internet Assigned Numbers Authority, to oversee global Custodial
Identity allocation. Such an authority delegates Custodial Identity Spaces
to Regional Bitcoin Custodial Identity >>Registries, much like the RIRs
(Regional Internet Registries) managing the allocation of Internet number
resources.
>>
>>A Bitcoin Custodial Identity (BCI) account address would consist of a
Custodial Identifier allocated by the BACIA/RBCIRs (much like a bank?s
routing number), and an account address (much like an account >>number).
Bitcoin Custodial Identities allow dispute resolution in the legal system
for transactions in the BCI address space. Free market would drive and
determine the demand for custodial accounts. P2PKH >>users not affected.
>>
>>Feedback is appreciated.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140821/03ee65c5/attachment.html>

From xor at freenetproject.org  Fri Aug 22 19:20:11 2014
From: xor at freenetproject.org (xor)
Date: Fri, 22 Aug 2014 21:20:11 +0200
Subject: [Bitcoin-development] Reconsidering github
In-Reply-To: <CAJHLa0NXAYh9HzazN6gArUV8y7J8_G0oqkZqPBgibpW0wRNxKQ@mail.gmail.com>
References: <CAJHLa0NXAYh9HzazN6gArUV8y7J8_G0oqkZqPBgibpW0wRNxKQ@mail.gmail.com>
Message-ID: <2302927.fMx0I5lQth@1337h4x0r>

On Tuesday, August 19, 2014 08:02:37 AM Jeff Garzik wrote:
> It would be nice if the issues and git repo for Bitcoin Core were not
> on such a centralized service as github, nice and convenient as it is.

Assuming there is a problem with that usually is caused by using Git the wrong 
way or not knowing its capabilities. Nobody can modify / insert a commit 
before a GnuPG signed commit / tag without breaking the signature.
More detail at the bottom at [1], I am sparing you this here because I suspect 
you already know it and there is something more important I want to stress:

Bitcoin has currently 4132 forks on Github. This means that you can get 
contributions by pull requests from 4132 developers. That is a HUGE amount, 
and you shouldn't ditch that due to not using all features of git :)
To get a grasp of how much that is: When you search projects with more than 
4100 forks, there are only 32 of them!
You are one of the top open source projects, and you should be grateful for 
that and keep Github up so the other people can send you pull requests with 
their improvements :) Volunteer contributions need to be honored and made as 
easy as possible, for people are investing their personal time.

Greetings and thanks for your work,
	xor, one developer of https://freenetproject.org


[1] If you GPG-sign a commit / tag, you sign its hash, including the hash of 
the previous commit. So is a chain of hashes and thus of trust from all 
commits up to what is signed. It's pretty similar to the blockchain actually 
:) 
So Github cannot modify anything. If they did,  the head of the hash-chain 
would change, and thus the signature would break. Git would notify people 
about that when they pull. 
Of course people can still ignore that warning and let Github rewrite their 
Git history. But people who aren't educated about this shouldn't be release 
managers. They should not even have push access to your main repository, they 
should only be sending pull requests. Thats is where the decentralization of 
Git is: In the pull-requests. The people who deal with them should verify tag 
and possibly even commit signatures carefully, and not accept anything which 
is not signed. Also, before deploying a binary, the very same commit which is 
going to become a binary has to be given a signed tag by the release manager, 
and by everyone who reviews the code. The person who deploys the actual binary 
needs to verify that signature.
There is an article which elaborates on some of the ways you have to ensure 
Github doesn't insert malicious code - but please read it with care, some of 
its recommendations are bad, especially the part where its about rebasing 
because that DOES rewrite history which is what you want to prevent:
http://mikegerwitz.com/papers/git-horror-story


-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 836 bytes
Desc: This is a digitally signed message part.
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140822/5f63b114/attachment.sig>

From gubatron at gmail.com  Fri Aug 22 19:31:43 2014
From: gubatron at gmail.com (Angel Leon)
Date: Fri, 22 Aug 2014 15:31:43 -0400
Subject: [Bitcoin-development] Reconsidering github
In-Reply-To: <2302927.fMx0I5lQth@1337h4x0r>
References: <CAJHLa0NXAYh9HzazN6gArUV8y7J8_G0oqkZqPBgibpW0wRNxKQ@mail.gmail.com>
	<2302927.fMx0I5lQth@1337h4x0r>
Message-ID: <CADZB0_ahqNZE93Eb44ba18EteAnF5O5i3dEaAqKeDfbOKZLRDw@mail.gmail.com>

+1000. Don't fix it if it ain't broken. Don't kill community support. I for
instance wouldn't have contributed or forked if the project hadn't been on
github.

"Bitcoin has currently 4132 forks on Github. This means that you can get
contributions by pull requests from 4132 developers. That is a HUGE amount,
and you shouldn't ditch that due to not using all features of git :)
To get a grasp of how much that is: When you search projects with more than
4100 forks, there are only 32 of them!
You are one of the top open source projects, and you should be grateful for
that and keep Github up so the other people can send you pull requests with
their improvements :) Volunteer contributions need to be honored and made as
easy as possible, for people are investing their personal time.

Greetings and thanks for your work,
        xor, one developer of https://freenetproject.org"

http://twitter.com/gubatron


On Fri, Aug 22, 2014 at 3:20 PM, xor <xor at freenetproject.org> wrote:

> On Tuesday, August 19, 2014 08:02:37 AM Jeff Garzik wrote:
> > It would be nice if the issues and git repo for Bitcoin Core were not
> > on such a centralized service as github, nice and convenient as it is.
>
> Assuming there is a problem with that usually is caused by using Git the
> wrong
> way or not knowing its capabilities. Nobody can modify / insert a commit
> before a GnuPG signed commit / tag without breaking the signature.
> More detail at the bottom at [1], I am sparing you this here because I
> suspect
> you already know it and there is something more important I want to stress:
>
> Bitcoin has currently 4132 forks on Github. This means that you can get
> contributions by pull requests from 4132 developers. That is a HUGE amount,
> and you shouldn't ditch that due to not using all features of git :)
> To get a grasp of how much that is: When you search projects with more than
> 4100 forks, there are only 32 of them!
> You are one of the top open source projects, and you should be grateful for
> that and keep Github up so the other people can send you pull requests with
> their improvements :) Volunteer contributions need to be honored and made
> as
> easy as possible, for people are investing their personal time.
>
> Greetings and thanks for your work,
>         xor, one developer of https://freenetproject.org
>
>
> [1] If you GPG-sign a commit / tag, you sign its hash, including the hash
> of
> the previous commit. So is a chain of hashes and thus of trust from all
> commits up to what is signed. It's pretty similar to the blockchain
> actually
> :)
> So Github cannot modify anything. If they did,  the head of the hash-chain
> would change, and thus the signature would break. Git would notify people
> about that when they pull.
> Of course people can still ignore that warning and let Github rewrite their
> Git history. But people who aren't educated about this shouldn't be release
> managers. They should not even have push access to your main repository,
> they
> should only be sending pull requests. Thats is where the decentralization
> of
> Git is: In the pull-requests. The people who deal with them should verify
> tag
> and possibly even commit signatures carefully, and not accept anything
> which
> is not signed. Also, before deploying a binary, the very same commit which
> is
> going to become a binary has to be given a signed tag by the release
> manager,
> and by everyone who reviews the code. The person who deploys the actual
> binary
> needs to verify that signature.
> There is an article which elaborates on some of the ways you have to ensure
> Github doesn't insert malicious code - but please read it with care, some
> of
> its recommendations are bad, especially the part where its about rebasing
> because that DOES rewrite history which is what you want to prevent:
> http://mikegerwitz.com/papers/git-horror-story
>
>
>
>
> ------------------------------------------------------------------------------
> Slashdot TV.
> Video for Nerds.  Stuff that matters.
> http://tv.slashdot.org/
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140822/b5746cb2/attachment.html>

From hozer at hozed.org  Sat Aug 23 05:53:12 2014
From: hozer at hozed.org (Troy Benjegerdes)
Date: Sat, 23 Aug 2014 00:53:12 -0500
Subject: [Bitcoin-development] Reconsidering github
In-Reply-To: <CA+s+GJD4W=SX1QEpW-3rcPHVsRRVoXPkjRGRaCsA49SDOAssVw@mail.gmail.com>
References: <CAJHLa0NXAYh9HzazN6gArUV8y7J8_G0oqkZqPBgibpW0wRNxKQ@mail.gmail.com>
	<CA+s+GJDM4Tq69wDv2UQ07aCLDOayA9C8im+O+cJn2dSrVopUmw@mail.gmail.com>
	<20140820012623.GN22640@nl.grid.coop>
	<CA+s+GJD4W=SX1QEpW-3rcPHVsRRVoXPkjRGRaCsA49SDOAssVw@mail.gmail.com>
Message-ID: <20140823055312.GO22640@nl.grid.coop>

On Wed, Aug 20, 2014 at 08:24:33AM +0200, Wladimir wrote:
> On Wed, Aug 20, 2014 at 3:26 AM, Troy Benjegerdes <hozer at hozed.org> wrote:
> 
> > If bitcoin wants to become irrelevant, then by all means, continue to
> > depend on github and all the unknown attack surface it exposes.
> >
> > Those of us that do run our own servers will migrate to higher quality
> > alternatives.
> 
> So that means you're volunteering to run a web-accessible mirror of
> the bitcoin repositories?
> 
> Wladimir

http://bitspjoule.org/hg/upstream/bitcoin

I guess I should update it more than every 6 months and then the updates
won't take so long. It would also go a lot faster if I had a couple of 
dedicated servers, but that won't happen until I sell someone a support
contract for crypto-commodities trading. I figure a bitcoin a month should
support the hardware, 24x7 monitoring, and maybe a couple of full nodes
running on the servers as well.

And to pick up from another comment on this thread if you don't understand
some of the differences between git and mercurial, or how to set up servers
that pull from git and mirror to mercurial, you will have a lot harder time
tracking down and removing malicous code that could get injected if someone
gets root on a Github server.

It is also a very usefull excercise in distributed systems design to 
understand how distributed revision control systems in theory converge to a
coherent global state, and what is similiar or different to Bitcoin's 
global consensus model of what the balance of every bitcoin address is.




From hozer at hozed.org  Sat Aug 23 05:59:58 2014
From: hozer at hozed.org (Troy Benjegerdes)
Date: Sat, 23 Aug 2014 00:59:58 -0500
Subject: [Bitcoin-development] Reconsidering github
In-Reply-To: <CANEZrP3LUMfNTDa1BUBE6PtCAt2Gd6g+cdt5oprydh643O_G_Q@mail.gmail.com>
References: <CAJHLa0NXAYh9HzazN6gArUV8y7J8_G0oqkZqPBgibpW0wRNxKQ@mail.gmail.com>
	<CA+s+GJDM4Tq69wDv2UQ07aCLDOayA9C8im+O+cJn2dSrVopUmw@mail.gmail.com>
	<20140820012623.GN22640@nl.grid.coop>
	<CA+s+GJD4W=SX1QEpW-3rcPHVsRRVoXPkjRGRaCsA49SDOAssVw@mail.gmail.com>
	<CANEZrP3LUMfNTDa1BUBE6PtCAt2Gd6g+cdt5oprydh643O_G_Q@mail.gmail.com>
Message-ID: <20140823055958.GP22640@nl.grid.coop>

Gerrit is free if you can afford the admin(s) to maintain it.

http://code.google.com/p/gerrit/wiki/ShowCases

And yes, I'm volunteering to get paid to be the admin, especially if you
want a 'painless' log in with a github account feature, because it will
be very painful for me to unroll the damage if github is compromised.

My preference would be that we use the same ECDSA keys we secure our
bitcoins with to secure our access to the code review and source 
control systems.

On Wed, Aug 20, 2014 at 04:16:11PM +0200, Mike Hearn wrote:
> If github were to be abandoned for anything, it'd make sense to move code
> review and bug tracking elsewhere. GitHub does a reasonably good job of
> hosting git repositories. It kind of sucks at code review and the issue
> tracker is rudimentary at best. These days you can do "log in with my
> github account" so if done well, it'd not have to be very painful.
> 
> JetBrains make great stuff and they have a code review and repository
> exploration tool called Upsource in development, which should come out
> soon. I think it's proprietary but that would be no different to github,
> and it's designed for self hosting.

-- 
----------------------------------------------------------------------------
Troy Benjegerdes                 'da hozer'                  hozer at hozed.org
7 elements      earth::water::air::fire::mind::spirit::soul        grid.coop

      Never pick a fight with someone who buys ink by the barrel,
         nor try buy a hacker who makes money by the megahash




From hozer at hozed.org  Sat Aug 23 06:17:01 2014
From: hozer at hozed.org (Troy Benjegerdes)
Date: Sat, 23 Aug 2014 01:17:01 -0500
Subject: [Bitcoin-development] Reconsidering github
In-Reply-To: <2302927.fMx0I5lQth@1337h4x0r>
References: <CAJHLa0NXAYh9HzazN6gArUV8y7J8_G0oqkZqPBgibpW0wRNxKQ@mail.gmail.com>
	<2302927.fMx0I5lQth@1337h4x0r>
Message-ID: <20140823061701.GQ22640@nl.grid.coop>

On Fri, Aug 22, 2014 at 09:20:11PM +0200, xor wrote:
> On Tuesday, August 19, 2014 08:02:37 AM Jeff Garzik wrote:
> > It would be nice if the issues and git repo for Bitcoin Core were not
> > on such a centralized service as github, nice and convenient as it is.
> 
> Assuming there is a problem with that usually is caused by using Git the wrong 
> way or not knowing its capabilities. Nobody can modify / insert a commit 
> before a GnuPG signed commit / tag without breaking the signature.
> More detail at the bottom at [1], I am sparing you this here because I suspect 
> you already know it and there is something more important I want to stress:
> 
> Bitcoin has currently 4132 forks on Github. This means that you can get 
> contributions by pull requests from 4132 developers. That is a HUGE amount, 
> and you shouldn't ditch that due to not using all features of git :)
> To get a grasp of how much that is: When you search projects with more than 
> 4100 forks, there are only 32 of them!
> You are one of the top open source projects, and you should be grateful for 
> that and keep Github up so the other people can send you pull requests with 
> their improvements :) Volunteer contributions need to be honored and made as 
> easy as possible, for people are investing their personal time.
> 
> Greetings and thanks for your work,
> 	xor, one developer of https://freenetproject.org
> 
> 
> [1] If you GPG-sign a commit / tag, you sign its hash, including the hash of 
> the previous commit. So is a chain of hashes and thus of trust from all 
> commits up to what is signed. It's pretty similar to the blockchain actually 
> :) 
> So Github cannot modify anything. If they did,  the head of the hash-chain 
> would change, and thus the signature would break. Git would notify people 
> about that when they pull. 
> Of course people can still ignore that warning and let Github rewrite their 
> Git history. But people who aren't educated about this shouldn't be release 
> managers. They should not even have push access to your main repository, they 
> should only be sending pull requests. Thats is where the decentralization of 
> Git is: In the pull-requests. The people who deal with them should verify tag 
> and possibly even commit signatures carefully, and not accept anything which 
> is not signed. Also, before deploying a binary, the very same commit which is 
> going to become a binary has to be given a signed tag by the release manager, 
> and by everyone who reviews the code. The person who deploys the actual binary 
> needs to verify that signature.
> There is an article which elaborates on some of the ways you have to ensure 
> Github doesn't insert malicious code - but please read it with care, some of 
> its recommendations are bad, especially the part where its about rebasing 
> because that DOES rewrite history which is what you want to prevent:
> http://mikegerwitz.com/papers/git-horror-story
> 
> 


This is why I clone git to mercurial, which is generally designed around the
assumption that history is immutable. You can't rewrite blockchain history,
and we should not be re-writing (rebasing) commit history either.

The problem with github is it's too tempting to look at the *web page*, which 
is NOT pgp-signed, and hit the 'approve' button when you might have someone
in the middle approving an unsigned changeset because you're in a hurry to
get the latest new critical OpenSSL 0day security patch build released.

We need multiple redundant 'master' repositories run by different people in
different jurisdictions that get updated on different schedules, and have all
of these people pay attention to operational security, and not just outsource
it all to github because it's convenient.


There's no reason to *stop* using github, cause it *is* easy... but you want
to have multiple review of *the actual code*, not just signatures and see 
if the changes really do make sense.

-- 
----------------------------------------------------------------------------
Troy Benjegerdes                 'da hozer'                  hozer at hozed.org
7 elements      earth::water::air::fire::mind::spirit::soul        grid.coop

      Never pick a fight with someone who buys ink by the barrel,
         nor try buy a hacker who makes money by the megahash




From hozer at hozed.org  Sat Aug 23 06:39:06 2014
From: hozer at hozed.org (Troy Benjegerdes)
Date: Sat, 23 Aug 2014 01:39:06 -0500
Subject: [Bitcoin-development] Proposal: Encrypt bitcoin messages
In-Reply-To: <CANEZrP0WC2XL3Z0==BMjhWJuA8DgxBKUMKMdhh267JXduCZ0KQ@mail.gmail.com>
References: <c45a638f1e1640fe84bef01d12cda4c3@hotmail.com>
	<BLU402-EAS2546AD6C97DCED8FCE9C04CC6D20@phx.gbl>
	<CAACjpwKX9cwowiCruP9xw2UiqfsVXVC1TdKvA1HbQZ6UZ6qBsA@mail.gmail.com>
	<CANEZrP0WC2XL3Z0==BMjhWJuA8DgxBKUMKMdhh267JXduCZ0KQ@mail.gmail.com>
Message-ID: <20140823063906.GS22640@nl.grid.coop>

I think it's a little disingenuous to talk about encrypting the P2P protocol
as a security improvement, when all the organized crime agencies need to do is
borrow a Fedex/UPS truck and deliver some laptops to Github employees and they
can insert whatever monitoring/0-day they want.

Encryption is complicated stuff to actually **get right**, and the more stuff
you throw crypto around, the more likely it is you'll get a Heartbleed 0-day

If you want to increase security, make it simpler. I'm not even sure it can
be easily simplified... how could you separate the P2P network transport from
the core blockchain functionality?

On Wed, Aug 20, 2014 at 04:37:24PM +0200, Mike Hearn wrote:
> I would be very happy if we upgraded the P2P protocol with MAC keys and a
> simple home grown encryption layer, because:
> 
>    1. It's practically guaranteed that 5-eyes intelligence agencies are
>    either systematically deanonymising Bitcoin users already (linking
>    transactions to real world identities) or close to succeeding. Peter is
>    correct. Given the way their infrastructure works, encrypting link level
>    traffic would significantly raise the bar to such attacks. Quite possibly
>    to the level where it's deemed unprofitable to continue.
> 
>    2. Tor is not a complete solution. The most interesting links to monitor
>    are those from SPV clients connecting to Core nodes. Whilst Java SPV
>    clients have the nice option of an easy bundled Tor client (er, once we fix
>    the last bugs) clients that are not based on bitcoinj would have to use the
>    full-blown Tor client, which is not only a PITA to bundle as Tor is not at
>    all library-fied, but is a giant pile of C which is almost certainly
>    exploitable. Even if it runs in a separate address space, for many
>    platforms this is insufficient as a compromised Tor client could then go
>    ahead and compromise your wallet app too.
> 
> Implementing a full Tor client is not a reasonable thing to ask of a wallet
> developer, but doing HMAC checks and a simple ECDH exchange + AES would be
> quite realistic.

> ------------------------------------------------------------------------------
> Slashdot TV.  
> Video for Nerds.  Stuff that matters.
> http://tv.slashdot.org/

> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development


-- 
----------------------------------------------------------------------------
Troy Benjegerdes                 'da hozer'                  hozer at hozed.org
7 elements      earth::water::air::fire::mind::spirit::soul        grid.coop

      Never pick a fight with someone who buys ink by the barrel,
         nor try buy a hacker who makes money by the megahash




From pieter.wuille at gmail.com  Sat Aug 23 11:38:09 2014
From: pieter.wuille at gmail.com (Pieter Wuille)
Date: Sat, 23 Aug 2014 13:38:09 +0200
Subject: [Bitcoin-development] Reconsidering github
In-Reply-To: <20140823061701.GQ22640@nl.grid.coop>
References: <CAJHLa0NXAYh9HzazN6gArUV8y7J8_G0oqkZqPBgibpW0wRNxKQ@mail.gmail.com>
	<2302927.fMx0I5lQth@1337h4x0r>
	<20140823061701.GQ22640@nl.grid.coop>
Message-ID: <CAPg+sBisvpQp_3f5sz3O6+4VSx5FMjDnSaBUqNVFKM+o4Qm4FA@mail.gmail.com>

On Sat, Aug 23, 2014 at 8:17 AM, Troy Benjegerdes <hozer at hozed.org> wrote:
> On Fri, Aug 22, 2014 at 09:20:11PM +0200, xor wrote:
>> On Tuesday, August 19, 2014 08:02:37 AM Jeff Garzik wrote:
>> > It would be nice if the issues and git repo for Bitcoin Core were not
>> > on such a centralized service as github, nice and convenient as it is.
>>
>> Assuming there is a problem with that usually is caused by using Git the wrong
>> way or not knowing its capabilities. Nobody can modify / insert a commit
>> before a GnuPG signed commit / tag without breaking the signature.
>> More detail at the bottom at [1], I am sparing you this here because I suspect
>> you already know it and there is something more important I want to stress:

Note that we're generally aiming (though not yet enforcing) to have
merges done through the github-merge tool, which performs the merge
locally, shows the resulting diff, compares it with the merge done by
github, and GnuPG signs it.

That allows using github as easy-access mechanism for people to
contribute and inspect, while having a higher security standard for
the actual changes done to master.

-- 
Pieter



From cryptocurrencies at quidecco.de  Sat Aug 23 11:53:21 2014
From: cryptocurrencies at quidecco.de (Isidor Zeuner)
Date: Sat, 23 Aug 2014 13:53:21 +0200 (CEST)
Subject: [Bitcoin-development] Proposal: PoW-based throttling of
 addresses (was: Outbound connections rotation)
In-Reply-To: <CANEZrP1RzLmSB74xdFZbePAE9nxjR-_hSCGQhNH81vRKSji2AQ@mail.gmail.com>
References: <CANEZrP1RzLmSB74xdFZbePAE9nxjR-_hSCGQhNH81vRKSji2AQ@mail.gmail.com>
	<20140820125901.CB71CE043A5@quidecco.de>
Message-ID: <20140823115321.AC158E07036@quidecco.de>

Hi Mike,

thanks for your assessment.

Please find my replies in-line:
> >
> > Misbehaving addresses can have their connecting difficulty
> > scaled up, which should make it uneconomic to try to DoS the usage of
> > Tor exit nodes for connecting to Bitcoin.
> >
>
> You can't solve DoS by requiring all clients to do complicated work,

Since when? This has been a recognized approach since people called it
"hashcash" ([1] - before cryptocurrencies were even invented).

I hear your concerns, but even then, I would see the PoW-based
approach as an improvement to today's situations.

To be clear, I do not propose to have _all_ clients do complicated
work. Just those using an address which has been misbehaving. Right
now, they cannot connect at all, no matter how much resources they
dedicate towards doing so.

> all
> that means is that weak clients (like users mobile phones and tablets) are
> successfully DoSd whereas the attackers botnet of stolen computers sit
> there solving PoWs.
>

The way I had it in mind, well-behaved clients on an address used by
attackers would have more effort to connect because of the PoW, but
after that, they can stay connected. The attacker also has to put more
effort into connecting, and after sending malformed messages, gets
disconnected. So, the attacker would have to perform much more PoW
computations in order to keep up his attack.

> The correct way to solve DoS is by having work prioritisation and queueing
> mechanisms, then finding ways to distinguish "good" clients from "bad"
> clients. Doing this whilst preserving privacy is hard. Long term the only
> way to solve it may be to require clients to present some kind of cookie
> during resource exhaustion events that prove they've been around for a
> while, thus allowing them to jump the queue.
>

Exactly. Not every user may like to have a cookie by which an observer
might get the chance to even link his connection to his previous
connections, thereby allowing the discussed deanonymization technique
to get even more effective.

Maybe having both options would be even better: In case of an attack,
those able to solve the anti-DoS PoW can still connect (just maybe
slower). Those who wish to run a weak client can choose to sacrifice
privacy for connectivity and keep a cookie for connecting.

Best regards,

Isidor

[1] http://www.hashcash.org/papers/hashcash.pdf



From gubatron at gmail.com  Sat Aug 23 11:59:04 2014
From: gubatron at gmail.com (Angel Leon)
Date: Sat, 23 Aug 2014 07:59:04 -0400
Subject: [Bitcoin-development] Reconsidering github
In-Reply-To: <20140823061701.GQ22640@nl.grid.coop>
References: <CAJHLa0NXAYh9HzazN6gArUV8y7J8_G0oqkZqPBgibpW0wRNxKQ@mail.gmail.com>
	<2302927.fMx0I5lQth@1337h4x0r> <20140823061701.GQ22640@nl.grid.coop>
Message-ID: <CADZB0_ZP0XN53u4Ye+KLcOLr3zhwAxhCYCycRNZ4kcTqZ770Og@mail.gmail.com>

I think this is the only project where people are concerened wether commit
messages are signed or not.

Commit messages should be merged only upon their correctness, not their
signature.

I could care less if I receive a buggy patch that's signed.

http://twitter.com/gubatron


On Sat, Aug 23, 2014 at 2:17 AM, Troy Benjegerdes <hozer at hozed.org> wrote:

> On Fri, Aug 22, 2014 at 09:20:11PM +0200, xor wrote:
> > On Tuesday, August 19, 2014 08:02:37 AM Jeff Garzik wrote:
> > > It would be nice if the issues and git repo for Bitcoin Core were not
> > > on such a centralized service as github, nice and convenient as it is.
> >
> > Assuming there is a problem with that usually is caused by using Git the
> wrong
> > way or not knowing its capabilities. Nobody can modify / insert a commit
> > before a GnuPG signed commit / tag without breaking the signature.
> > More detail at the bottom at [1], I am sparing you this here because I
> suspect
> > you already know it and there is something more important I want to
> stress:
> >
> > Bitcoin has currently 4132 forks on Github. This means that you can get
> > contributions by pull requests from 4132 developers. That is a HUGE
> amount,
> > and you shouldn't ditch that due to not using all features of git :)
> > To get a grasp of how much that is: When you search projects with more
> than
> > 4100 forks, there are only 32 of them!
> > You are one of the top open source projects, and you should be grateful
> for
> > that and keep Github up so the other people can send you pull requests
> with
> > their improvements :) Volunteer contributions need to be honored and
> made as
> > easy as possible, for people are investing their personal time.
> >
> > Greetings and thanks for your work,
> >       xor, one developer of https://freenetproject.org
> >
> >
> > [1] If you GPG-sign a commit / tag, you sign its hash, including the
> hash of
> > the previous commit. So is a chain of hashes and thus of trust from all
> > commits up to what is signed. It's pretty similar to the blockchain
> actually
> > :)
> > So Github cannot modify anything. If they did,  the head of the
> hash-chain
> > would change, and thus the signature would break. Git would notify people
> > about that when they pull.
> > Of course people can still ignore that warning and let Github rewrite
> their
> > Git history. But people who aren't educated about this shouldn't be
> release
> > managers. They should not even have push access to your main repository,
> they
> > should only be sending pull requests. Thats is where the
> decentralization of
> > Git is: In the pull-requests. The people who deal with them should
> verify tag
> > and possibly even commit signatures carefully, and not accept anything
> which
> > is not signed. Also, before deploying a binary, the very same commit
> which is
> > going to become a binary has to be given a signed tag by the release
> manager,
> > and by everyone who reviews the code. The person who deploys the actual
> binary
> > needs to verify that signature.
> > There is an article which elaborates on some of the ways you have to
> ensure
> > Github doesn't insert malicious code - but please read it with care,
> some of
> > its recommendations are bad, especially the part where its about rebasing
> > because that DOES rewrite history which is what you want to prevent:
> > http://mikegerwitz.com/papers/git-horror-story
> >
> >
>
>
> This is why I clone git to mercurial, which is generally designed around
> the
> assumption that history is immutable. You can't rewrite blockchain history,
> and we should not be re-writing (rebasing) commit history either.
>
> The problem with github is it's too tempting to look at the *web page*,
> which
> is NOT pgp-signed, and hit the 'approve' button when you might have someone
> in the middle approving an unsigned changeset because you're in a hurry to
> get the latest new critical OpenSSL 0day security patch build released.
>
> We need multiple redundant 'master' repositories run by different people in
> different jurisdictions that get updated on different schedules, and have
> all
> of these people pay attention to operational security, and not just
> outsource
> it all to github because it's convenient.
>
>
> There's no reason to *stop* using github, cause it *is* easy... but you
> want
> to have multiple review of *the actual code*, not just signatures and see
> if the changes really do make sense.
>
> --
>
> ----------------------------------------------------------------------------
> Troy Benjegerdes                 'da hozer'
> hozer at hozed.org
> 7 elements      earth::water::air::fire::mind::spirit::soul
> grid.coop
>
>       Never pick a fight with someone who buys ink by the barrel,
>          nor try buy a hacker who makes money by the megahash
>
>
>
> ------------------------------------------------------------------------------
> Slashdot TV.
> Video for Nerds.  Stuff that matters.
> http://tv.slashdot.org/
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140823/03d92c0a/attachment.html>

From drak at zikula.org  Sat Aug 23 12:05:17 2014
From: drak at zikula.org (Drak)
Date: Sat, 23 Aug 2014 13:05:17 +0100
Subject: [Bitcoin-development] Reconsidering github
In-Reply-To: <CAPg+sBisvpQp_3f5sz3O6+4VSx5FMjDnSaBUqNVFKM+o4Qm4FA@mail.gmail.com>
References: <CAJHLa0NXAYh9HzazN6gArUV8y7J8_G0oqkZqPBgibpW0wRNxKQ@mail.gmail.com>
	<2302927.fMx0I5lQth@1337h4x0r> <20140823061701.GQ22640@nl.grid.coop>
	<CAPg+sBisvpQp_3f5sz3O6+4VSx5FMjDnSaBUqNVFKM+o4Qm4FA@mail.gmail.com>
Message-ID: <CANAnSg0GftsnaAGhr4kcVa84Mdb9gfrAPV1UtNGYWWhS9x+P0g@mail.gmail.com>

On 23 August 2014 12:38, Pieter Wuille <pieter.wuille at gmail.com> wrote:

> That allows using github as easy-access mechanism for people to
> contribute and inspect, while having a higher security standard for
> the actual changes done to master.


I'd also like to point out the obvious: git uses the previous hash as part
of the formula to generate the current commit hash thus tampering with
history while possible would be instantly noticed because we all have
copies of the repository. Tampering would be completely evident (pushes
would fail for a start, and even simple merges would bork). It's just not
possible to tamper with the repository without it being discovered, even
with collusion (or strong arming) of github.

The social benefits of github make it idea for open source projects that
want community participation. The barrier to entry is low. The only "weak"
spot of github is the releases section, but since we don't actually
distribute Bitcoin from github the point is moot.

I think github haters fail to see the vast benefits of a social hub like
github. Their issue tracker may not be as sophisticated, it serves well and
the project is extremely productive.

Don't shoot yourself in the foot - a move away from github would be a
disaster for the project.

When you look at the attack surface of using github, it's pretty small and
would not go unnoticed, thus nullifying concern.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140823/de3856a5/attachment.html>

From mike at plan99.net  Sat Aug 23 13:03:05 2014
From: mike at plan99.net (Mike Hearn)
Date: Sat, 23 Aug 2014 15:03:05 +0200
Subject: [Bitcoin-development] Proposal: PoW-based throttling of
 addresses (was: Outbound connections rotation)
In-Reply-To: <20140823115321.AC158E07036@quidecco.de>
References: <20140820125901.CB71CE043A5@quidecco.de>
	<CANEZrP1RzLmSB74xdFZbePAE9nxjR-_hSCGQhNH81vRKSji2AQ@mail.gmail.com>
	<20140823115321.AC158E07036@quidecco.de>
Message-ID: <CANEZrP2rLUW2-SZXjEKMvgZVjjHwz-4TEHJoAaMd5=1N8R3G3Q@mail.gmail.com>

>
> Since when? This has been a recognized approach since people called it
> "hashcash" ([1] - before cryptocurrencies were even invented).
>

I only know of one site that worked the way you propose: TicketMaster, a
long time ago. They used it as a less harsh form of blocking for IPs that
they strongly suspected were bots, which is what you suggest indeed. But
99% of the hard work of that system was in scoring the connections. The
actual PoW part didn't work that great because bots have much more patience
than humans do.

Other sites also use proofs of work, but they're CAPTCHAs i.e. human PoWs.
And unfortunately those don't work very well these days either :(


> To be clear, I do not propose to have _all_ clients do complicated
> work. Just those using an address which has been misbehaving.


Yes, I understand, but then you're back to scoring clients - the hard part
- and the only question is do you slow down that client by sticking them at
the bottom of a work queue or by requiring them to solve a difficult PoW.
The best approach is the first one because that scales naturally .... you
don't have to define some notion of misbehaviour, you just prioritise
amongst clients.

The current notion of "misbehaviour" is only somewhat useful. It's easy to
classify reasonable behaviour as harmful and shoot yourself in the foot. We
managed this at least once back in 2010 when we actually released a version
of Bitcoin that interpreted a normal request to serve the block chain as a
DoS attack! It couldn't serve the chain at all! Additionally many things
that can be interpreted as an attack like sending a message with a bad
signature can also be caused just by mistakes, or version skew during
software upgrades. So it's very tricky to get this right.

That's important because one quite common way big sites suffer DoS attacks
is by accidentally having real users create a DoS "attack" by e.g. pushing
a bad software update, or by having sudden and unexpected press-driven
growth, etc. You really don't want to force users to sit around waiting and
wasting battery. It's better to serve as many requests as you can up to
your absolute limit and try to ensure as many of them as possible are good.


> Exactly. Not every user may like to have a cookie by which an observer
>>
> might get the chance to even link his connection to his previous
> connections, thereby allowing the discussed deanonymization technique
> to get even more effective.
>

I doubt it matters. Any DoS attack that's powerful enough to use up most of
the networks resources is probably being driven by a botnet of some kind,
and *all* legitimate users will lose in an even fight against a botnet.

Cookies can be somewhat anonymized. For example a cookie that is merely a
signature over a timestamp of some kind (doesn't have to be an secp256k1
signature) can be normalised to the day or week. So you can prove you've
been using Bitcoin for say 3 years but it doesn't pin you down precisely.

This isn't perfect:  attackers can and do "age" accounts before preparing
for abuse. Proof of UTXO is another way to rank users. If you're richer
you're presumably more important for the network to process than poor
people. However you end up back at a CPU imbalance. PoW can possibly play a
role here to even it out: the cost of submitting a UTXO proof should be at
least equal to the cost of verifying the signature, but that is a PoW small
enough that users would not notice.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140823/0b18da3d/attachment.html>

From pete at petertodd.org  Sat Aug 23 14:32:15 2014
From: pete at petertodd.org (Peter Todd)
Date: Sat, 23 Aug 2014 10:32:15 -0400
Subject: [Bitcoin-development] Reconsidering github
In-Reply-To: <20140823061701.GQ22640@nl.grid.coop>
References: <CAJHLa0NXAYh9HzazN6gArUV8y7J8_G0oqkZqPBgibpW0wRNxKQ@mail.gmail.com>
	<2302927.fMx0I5lQth@1337h4x0r>
	<20140823061701.GQ22640@nl.grid.coop>
Message-ID: <20140823143215.GA18452@savin.petertodd.org>

On Sat, Aug 23, 2014 at 01:17:01AM -0500, Troy Benjegerdes wrote:
> This is why I clone git to mercurial, which is generally designed around the
> assumption that history is immutable. You can't rewrite blockchain history,
> and we should not be re-writing (rebasing) commit history either.

Git commits serve two purposes: recording public history and
communication.  While for the purpose of recording history immutable
commits make sense, for the purpose of communicating to other developers
what changes should be added to that history you *do* want the mutable
commits that git's rebase functionality supports. Much like how
university math classes essentially never teach calculus in the order it
was developed, it is rare indeed for the way you happened to develop
some functionality to be the best sequence of changes for other
developers to understand why and what is being changed.

Anyway, just because mercurial is designed around the assumption that
commit history is immutable doesn't mean it actually is; an attacker can
fake a series of mercurial commits just as easily as they can git
commits. The only thing that protects against history rewriting is
signed commits and timestamps.


> The problem with github is it's too tempting to look at the *web page*, which 
> is NOT pgp-signed, and hit the 'approve' button when you might have someone
> in the middle approving an unsigned changeset because you're in a hurry to
> get the latest new critical OpenSSL 0day security patch build released.
> 
> We need multiple redundant 'master' repositories run by different people in
> different jurisdictions that get updated on different schedules, and have all
> of these people pay attention to operational security, and not just outsource
> it all to github because it's convenient.

The easiest and most useful way to achieve that would be to have a
formal program of code review, perhaps on a per-release basis, that
reviewed the diffs between the previous release and the new one. Master
repos in this scenario are simply copies of the "master master" repo
that someone has manually verified and signed-off on, with of course a
PGP signature.

If you feel like volunteering to maintain one of these repos, you may
find my Litecoin v0.8.3.7 audit report to be a useful template:

https://bitcointalk.org/index.php?topic=265582.0

-- 
'peter'[:-1]@petertodd.org
0000000000000000284b07a00c97e4770dda4dee8b45994440226435ee05ab66
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 650 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140823/a915509b/attachment.sig>

From laanwj at gmail.com  Sat Aug 23 15:56:26 2014
From: laanwj at gmail.com (Wladimir)
Date: Sat, 23 Aug 2014 17:56:26 +0200
Subject: [Bitcoin-development] Reconsidering github
In-Reply-To: <CAPg+sBisvpQp_3f5sz3O6+4VSx5FMjDnSaBUqNVFKM+o4Qm4FA@mail.gmail.com>
References: <CAJHLa0NXAYh9HzazN6gArUV8y7J8_G0oqkZqPBgibpW0wRNxKQ@mail.gmail.com>
	<2302927.fMx0I5lQth@1337h4x0r>
	<20140823061701.GQ22640@nl.grid.coop>
	<CAPg+sBisvpQp_3f5sz3O6+4VSx5FMjDnSaBUqNVFKM+o4Qm4FA@mail.gmail.com>
Message-ID: <CA+s+GJDraeP+n_EO2hcG7Y+4BREBUF0c8=hCwxo58gmLKm_dGQ@mail.gmail.com>

>On Sat, Aug 23, 2014 at 1:38 PM, Pieter Wuille <pieter.wuille at gmail.com> >wrote:
>
> Note that we're generally aiming (though not yet enforcing) to have
> merges done through the github-merge tool, which performs the merge
> locally, shows the resulting diff, compares it with the merge done by
> github, and GnuPG signs it.

Indeed. I always use that look at and test and the merges locally
before pushing them. I never use the github merge button.

I'd recommend other people to do so as well - and as can be seen with
`git log --show-signature` it's common practice.

For browsing git history locally I find "gitk" to be a useful tool.

I'd absolutely encourage for more people to review code changes. Even
better if a few people do this through local tooling instead of the
web page. But my gut feeling is that hosting the code on github
results in many more eyes on the code overall than would be when
requiring *everyone* to use local tools. It's easy to let paranoia get
in the way of actual effectiveness.

Wladimir



From xor at freenetproject.org  Sat Aug 23 16:17:54 2014
From: xor at freenetproject.org (xor)
Date: Sat, 23 Aug 2014 18:17:54 +0200
Subject: [Bitcoin-development] Proposal: Encrypt bitcoin messages
In-Reply-To: <CAJHLa0ORxgQrkc4oiqSa3NdNHLU-0pmZDLjXUSpBKWBsBWTgcQ@mail.gmail.com>
References: <CA+8=xuJ+YDTNjyDW7DvP8KPN_nrFWpE68HvLw6EokFa-B-QGKw@mail.gmail.com>
	<53F3DFF7.9070709@jrn.me.uk>
	<CAJHLa0ORxgQrkc4oiqSa3NdNHLU-0pmZDLjXUSpBKWBsBWTgcQ@mail.gmail.com>
Message-ID: <1569765.oHsHtFYAhh@1337h4x0r>

On Tuesday, August 19, 2014 07:40:39 PM Jeff Garzik wrote:
> Encryption is of little value if you may deduce the same information
> by observing packet sizes and timings.

Instead of spawning a discussion whether this aspect is a reason to NOT 
encrypt, you should do the obvious:

Fix that as well. X being broken is not a reason for not fixing Y.
Pad the then encrypted packets with random bytes. The fact that they are 
encrypted makes them look like random data already, so the padding will not be 
distinguishable from the rest.
Also, add some random bias to their timing.

And besides: It would be nice if everyone could acknowledge that making 
Bitcoin as anonymous as possible is a natural desire. People demanding you to 
do this is bound to happen over and over again until you do it :) So just get 
on with it instead of postponing it due to doubts.

There is Tor, there is Freenet, and there are other anonymous P2P networks, 
and they can help you do get it done - the said problems have been well-known 
there for quite some time and people have thought about how to solve them.

Greetings,
	xor, a developer of https://freenetproject.org
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 836 bytes
Desc: This is a digitally signed message part.
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140823/3abbef5d/attachment.sig>

From justusranvier at riseup.net  Sat Aug 23 16:50:30 2014
From: justusranvier at riseup.net (Justus Ranvier)
Date: Sat, 23 Aug 2014 16:50:30 +0000
Subject: [Bitcoin-development] Proposal: Encrypt bitcoin messages
In-Reply-To: <1569765.oHsHtFYAhh@1337h4x0r>
References: <CA+8=xuJ+YDTNjyDW7DvP8KPN_nrFWpE68HvLw6EokFa-B-QGKw@mail.gmail.com>	<53F3DFF7.9070709@jrn.me.uk>	<CAJHLa0ORxgQrkc4oiqSa3NdNHLU-0pmZDLjXUSpBKWBsBWTgcQ@mail.gmail.com>
	<1569765.oHsHtFYAhh@1337h4x0r>
Message-ID: <53F8C656.6010200@riseup.net>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256

On 08/23/2014 04:17 PM, xor wrote:
> On Tuesday, August 19, 2014 07:40:39 PM Jeff Garzik wrote:
>> Encryption is of little value if you may deduce the same
>> information by observing packet sizes and timings.
> 
> Instead of spawning a discussion whether this aspect is a reason to
> NOT encrypt, you should do the obvious:
> 
> Fix that as well. X being broken is not a reason for not fixing Y. 
> Pad the then encrypted packets with random bytes. The fact that
> they are encrypted makes them look like random data already, so the
> padding will not be distinguishable from the rest. Also, add some
> random bias to their timing.

The packet size and timing issue will become less of an issue as the
network grows anyway.

One transaction inserted into a 3 transaction-per-second encrypted
stream is more obvious than the same transaction inserted into a 100
or 1000 TPS stream.

- -- 
Support online privacy by using email encryption whenever possible.
Learn how here: http://www.youtube.com/watch?v=bakOKJFtB-k
-----BEGIN PGP SIGNATURE-----

iQEcBAEBCAAGBQJT+MZWAAoJEMP3uyY4RQ21tDoH/0SPYQcUkYJcuDhTkJCFWdyx
ob3H7ITEcqD0UZ3n3QHdxHfCDlP2srL0EcfjbNceRX5inP47jdoGj7uIkY/NRHQ0
4J2WCIrcu1Bj3ZxXG59PtfUzMjxhMGDMSk5eE+6BjVQILrkxxrqSpVjykfoq5s6Y
EBdT2Pf4djQ5k2fQ2PX1dTt5iCvFh0ufq3McrYsciRzguRwlelw1W34tPBqGSv0n
LScgvqYUTGC7otUdA5K/3WBq6SSo7E13hJxiLKQZMQ4CPpSlsiAhI5fuhl0OBljC
hCtS+eugFmvMICQt0ELds++nnA5WN/Yjx1WIrnLA1EmNiAkS9RSEVMcyab0TtdI=
=0sjO
-----END PGP SIGNATURE-----
-------------- next part --------------
A non-text attachment was scrubbed...
Name: 0x38450DB5.asc
Type: application/pgp-keys
Size: 14046 bytes
Desc: not available
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140823/61589972/attachment.bin>

From hozer at hozed.org  Sat Aug 23 17:44:14 2014
From: hozer at hozed.org (Troy Benjegerdes)
Date: Sat, 23 Aug 2014 12:44:14 -0500
Subject: [Bitcoin-development] Reconsidering github
In-Reply-To: <20140823143215.GA18452@savin.petertodd.org>
References: <CAJHLa0NXAYh9HzazN6gArUV8y7J8_G0oqkZqPBgibpW0wRNxKQ@mail.gmail.com>
	<2302927.fMx0I5lQth@1337h4x0r>
	<20140823061701.GQ22640@nl.grid.coop>
	<20140823143215.GA18452@savin.petertodd.org>
Message-ID: <20140823174414.GT22640@nl.grid.coop>

On Sat, Aug 23, 2014 at 10:32:15AM -0400, Peter Todd wrote:
> On Sat, Aug 23, 2014 at 01:17:01AM -0500, Troy Benjegerdes wrote:
> > This is why I clone git to mercurial, which is generally designed around the
> > assumption that history is immutable. You can't rewrite blockchain history,
> > and we should not be re-writing (rebasing) commit history either.
> 
> Git commits serve two purposes: recording public history and
> communication.  While for the purpose of recording history immutable
> commits make sense, for the purpose of communicating to other developers
> what changes should be added to that history you *do* want the mutable
> commits that git's rebase functionality supports. Much like how
> university math classes essentially never teach calculus in the order it
> was developed, it is rare indeed for the way you happened to develop
> some functionality to be the best sequence of changes for other
> developers to understand why and what is being changed.
> 
> Anyway, just because mercurial is designed around the assumption that
> commit history is immutable doesn't mean it actually is; an attacker can
> fake a series of mercurial commits just as easily as they can git
> commits. The only thing that protects against history rewriting is
> signed commits and timestamps.

What I would really like is a frontend and/or integration to Git/Mercurial that
uses Bitcoin transactions *as* the signature, which has the nice side effect of
providing timestamps backed by the full faith and credit of a billion dollar
blockchain. So what is the best way for me to stick both a git *and* a
mercurial identity hash into a bitcoin transaction?  (which leads to point 2
below)
 
> 
> > The problem with github is it's too tempting to look at the *web page*, which 
> > is NOT pgp-signed, and hit the 'approve' button when you might have someone
> > in the middle approving an unsigned changeset because you're in a hurry to
> > get the latest new critical OpenSSL 0day security patch build released.
> > 
> > We need multiple redundant 'master' repositories run by different people in
> > different jurisdictions that get updated on different schedules, and have all
> > of these people pay attention to operational security, and not just outsource
> > it all to github because it's convenient.
> 
> The easiest and most useful way to achieve that would be to have a
> formal program of code review, perhaps on a per-release basis, that
> reviewed the diffs between the previous release and the new one. Master
> repos in this scenario are simply copies of the "master master" repo
> that someone has manually verified and signed-off on, with of course a
> PGP signature.
> 
> If you feel like volunteering to maintain one of these repos, you may
> find my Litecoin v0.8.3.7 audit report to be a useful template:
> 
> https://bitcointalk.org/index.php?topic=265582.0

I'm not interested in volunteer, I'm interested in getting paid, and the
best way I believe I can accomplish that is use *my* bitcoin address in a
signature-transaction of the code I've reviewed.

What is the advantage of PGP? Far more people have ECDSA public-private 
keys than PGP keys.

-- 
----------------------------------------------------------------------------
Troy Benjegerdes                 'da hozer'                  hozer at hozed.org
7 elements      earth::water::air::fire::mind::spirit::soul        grid.coop

      Never pick a fight with someone who buys ink by the barrel,
         nor try buy a hacker who makes money by the megahash




From hozer at hozed.org  Sat Aug 23 17:50:38 2014
From: hozer at hozed.org (Troy Benjegerdes)
Date: Sat, 23 Aug 2014 12:50:38 -0500
Subject: [Bitcoin-development] Proposal: Encrypt bitcoin messages
In-Reply-To: <53F8C656.6010200@riseup.net>
References: <CA+8=xuJ+YDTNjyDW7DvP8KPN_nrFWpE68HvLw6EokFa-B-QGKw@mail.gmail.com>
	<53F3DFF7.9070709@jrn.me.uk>
	<CAJHLa0ORxgQrkc4oiqSa3NdNHLU-0pmZDLjXUSpBKWBsBWTgcQ@mail.gmail.com>
	<1569765.oHsHtFYAhh@1337h4x0r> <53F8C656.6010200@riseup.net>
Message-ID: <20140823175038.GU22640@nl.grid.coop>

On Sat, Aug 23, 2014 at 04:50:30PM +0000, Justus Ranvier wrote:
> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA256
> 
> On 08/23/2014 04:17 PM, xor wrote:
> > On Tuesday, August 19, 2014 07:40:39 PM Jeff Garzik wrote:
> >> Encryption is of little value if you may deduce the same
> >> information by observing packet sizes and timings.
> > 
> > Instead of spawning a discussion whether this aspect is a reason to
> > NOT encrypt, you should do the obvious:
> > 
> > Fix that as well. X being broken is not a reason for not fixing Y. 
> > Pad the then encrypted packets with random bytes. The fact that
> > they are encrypted makes them look like random data already, so the
> > padding will not be distinguishable from the rest. Also, add some
> > random bias to their timing.
> 
> The packet size and timing issue will become less of an issue as the
> network grows anyway.
> 
> One transaction inserted into a 3 transaction-per-second encrypted
> stream is more obvious than the same transaction inserted into a 100
> or 1000 TPS stream.

The requirement for anonymity and privacy is lawyers and a Bitlicense.

If you want privacy and anonymity, then do high-frequency trading on
a centralized exchange, and if you want to go over-the-top, run some
arbitrage bots as well, and hide in the millions of transactions per
second that go on.

But make sure you get a Bitlicense and have a good securities lawyer.

Trying to solve a legal/legislative/social problem with more crypto is
only going to serve the people who created the legal/legislative/social
problem in the first place, because they can hire a hacker who will 
find a misplaced (} in your crypto code, and all the work you did to
encrypt wire protocols becomes silently worthless.




From will.yager at gmail.com  Sat Aug 23 18:22:27 2014
From: will.yager at gmail.com (William Yager)
Date: Sat, 23 Aug 2014 13:22:27 -0500
Subject: [Bitcoin-development] Proposal: Encrypt bitcoin messages
In-Reply-To: <20140823175038.GU22640@nl.grid.coop>
References: <CA+8=xuJ+YDTNjyDW7DvP8KPN_nrFWpE68HvLw6EokFa-B-QGKw@mail.gmail.com>
	<53F3DFF7.9070709@jrn.me.uk>
	<CAJHLa0ORxgQrkc4oiqSa3NdNHLU-0pmZDLjXUSpBKWBsBWTgcQ@mail.gmail.com>
	<1569765.oHsHtFYAhh@1337h4x0r> <53F8C656.6010200@riseup.net>
	<20140823175038.GU22640@nl.grid.coop>
Message-ID: <CAG8oi1O0RzEmnPg+t1GONnpmmEFucB_Ux35Ca8Y6g0TZf6CiCQ@mail.gmail.com>

On Sat, Aug 23, 2014 at 12:50 PM, Troy Benjegerdes <hozer at hozed.org> wrote:

>  they can hire a hacker who will
> find a misplaced (} in your crypto code, and all the work you did to
> encrypt wire protocols becomes silently worthless.
>

Not to mention encrypting basically non-sensitive inter-node traffic is
almost completely worthless in providing anonymity anyway...

Seriously, I have not heard a strong justification for this proposal yet. I
have heard some people talking about Tor-ifying communications, but that is
a completely different issue and should not be confused with just
"encrypting bitcoin messages".
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140823/bb85aa06/attachment.html>

From mike at plan99.net  Sat Aug 23 18:44:15 2014
From: mike at plan99.net (Mike Hearn)
Date: Sat, 23 Aug 2014 20:44:15 +0200
Subject: [Bitcoin-development] Proposal: Encrypt bitcoin messages
In-Reply-To: <CAG8oi1O0RzEmnPg+t1GONnpmmEFucB_Ux35Ca8Y6g0TZf6CiCQ@mail.gmail.com>
References: <CA+8=xuJ+YDTNjyDW7DvP8KPN_nrFWpE68HvLw6EokFa-B-QGKw@mail.gmail.com>
	<53F3DFF7.9070709@jrn.me.uk>
	<CAJHLa0ORxgQrkc4oiqSa3NdNHLU-0pmZDLjXUSpBKWBsBWTgcQ@mail.gmail.com>
	<1569765.oHsHtFYAhh@1337h4x0r> <53F8C656.6010200@riseup.net>
	<20140823175038.GU22640@nl.grid.coop>
	<CAG8oi1O0RzEmnPg+t1GONnpmmEFucB_Ux35Ca8Y6g0TZf6CiCQ@mail.gmail.com>
Message-ID: <CANEZrP1a_WNBJBKASfAngMU0HzgJ7as6Wec5x69dpBSO-vK0+Q@mail.gmail.com>

>
> Not to mention encrypting basically non-sensitive inter-node traffic is
> almost completely worthless in providing anonymity anyway...
>

Recall that P2P connections carry Bloom filters too, which are not public
information.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140823/3cfc9671/attachment.html>

From luke at dashjr.org  Sat Aug 23 19:02:55 2014
From: luke at dashjr.org (Luke Dashjr)
Date: Sat, 23 Aug 2014 19:02:55 +0000
Subject: [Bitcoin-development] Proposal: Encrypt bitcoin messages
In-Reply-To: <CANEZrP1a_WNBJBKASfAngMU0HzgJ7as6Wec5x69dpBSO-vK0+Q@mail.gmail.com>
References: <CA+8=xuJ+YDTNjyDW7DvP8KPN_nrFWpE68HvLw6EokFa-B-QGKw@mail.gmail.com>
	<CAG8oi1O0RzEmnPg+t1GONnpmmEFucB_Ux35Ca8Y6g0TZf6CiCQ@mail.gmail.com>
	<CANEZrP1a_WNBJBKASfAngMU0HzgJ7as6Wec5x69dpBSO-vK0+Q@mail.gmail.com>
Message-ID: <201408231902.57017.luke@dashjr.org>

On Saturday, August 23, 2014 6:44:15 PM Mike Hearn wrote:
> > Not to mention encrypting basically non-sensitive inter-node traffic is
> > almost completely worthless in providing anonymity anyway...
> 
> Recall that P2P connections carry Bloom filters too, which are not public
> information.

As soon as you tell it to an unknown/public peer, it is public information.



From prabahy at gmail.com  Sat Aug 23 20:36:19 2014
From: prabahy at gmail.com (Paul Rabahy)
Date: Sat, 23 Aug 2014 16:36:19 -0400
Subject: [Bitcoin-development] Reconsidering github
In-Reply-To: <20140823174414.GT22640@nl.grid.coop>
References: <CAJHLa0NXAYh9HzazN6gArUV8y7J8_G0oqkZqPBgibpW0wRNxKQ@mail.gmail.com>
	<2302927.fMx0I5lQth@1337h4x0r> <20140823061701.GQ22640@nl.grid.coop>
	<20140823143215.GA18452@savin.petertodd.org>
	<20140823174414.GT22640@nl.grid.coop>
Message-ID: <CADu7o8Nc4iZFoSY4AtVEQhiL5JhS34hJS+QTkNrnX9U4ATZWZQ@mail.gmail.com>

I want go give a bit of an outsiders perspective. I thoroughly understand
the concepts of bitcoin and am a professional programmer, but have never
taken the time to compile my own copy of bitcoin core.

I have looked at the pull requests on Github many times. I have cloned the
repo to my own computer, but haven't really used that to do much. I find
Github very easy to use, and (to me) it has the lowest bar to get more eyes
passively looking at the code. As a security guy, I appreciate the extra
time and effort that goes into signing commits and merges even if I have
not personally verified the signatures. I would like to see bitcoin core
continue to use github, but have no objection to additional mirrors of the
repo being hosted on different sites.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140823/7340bc54/attachment.html>

From gmaxwell at gmail.com  Sat Aug 23 20:54:08 2014
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Sat, 23 Aug 2014 13:54:08 -0700
Subject: [Bitcoin-development] Reconsidering github
In-Reply-To: <CADu7o8Nc4iZFoSY4AtVEQhiL5JhS34hJS+QTkNrnX9U4ATZWZQ@mail.gmail.com>
References: <CAJHLa0NXAYh9HzazN6gArUV8y7J8_G0oqkZqPBgibpW0wRNxKQ@mail.gmail.com>
	<2302927.fMx0I5lQth@1337h4x0r>
	<20140823061701.GQ22640@nl.grid.coop>
	<20140823143215.GA18452@savin.petertodd.org>
	<20140823174414.GT22640@nl.grid.coop>
	<CADu7o8Nc4iZFoSY4AtVEQhiL5JhS34hJS+QTkNrnX9U4ATZWZQ@mail.gmail.com>
Message-ID: <CAAS2fgTQtf75CRFeVW0przyKwMk9VEdFSQJ656WifauOxaNP6g@mail.gmail.com>

On Sat, Aug 23, 2014 at 1:36 PM, Paul Rabahy <prabahy at gmail.com> wrote:
> I want go give a bit of an outsiders perspective. I thoroughly understand
> the concepts of bitcoin and am a professional programmer, but have never
> taken the time to compile my own copy of bitcoin core.
>
> I have looked at the pull requests on Github many times. I have cloned the
> repo to my own computer, but haven't really used that to do much. I find
> Github very easy to use, and (to me) it has the lowest bar to get more eyes
> passively looking at the code. As a security guy, I appreciate the extra
> time and effort that goes into signing commits and merges even if I have not
> personally verified the signatures. I would like to see bitcoin core
> continue to use github, but have no objection to additional mirrors of the
> repo being hosted on different sites.

Nothing suggested here would ever remove the ability to go and explore
and read the changes just as you're doing so.

Already the way it works is that our local repositories are
authoritative for each of us. (Git itself is a decentralized system
regardless of github's efforts to make it look otherwise).



From pete at petertodd.org  Sat Aug 23 22:45:22 2014
From: pete at petertodd.org (Peter Todd)
Date: Sat, 23 Aug 2014 18:45:22 -0400
Subject: [Bitcoin-development] Reconsidering github
In-Reply-To: <20140823174414.GT22640@nl.grid.coop>
References: <CAJHLa0NXAYh9HzazN6gArUV8y7J8_G0oqkZqPBgibpW0wRNxKQ@mail.gmail.com>
	<2302927.fMx0I5lQth@1337h4x0r>
	<20140823061701.GQ22640@nl.grid.coop>
	<20140823143215.GA18452@savin.petertodd.org>
	<20140823174414.GT22640@nl.grid.coop>
Message-ID: <20140823224522.GA18381@savin.petertodd.org>

On Sat, Aug 23, 2014 at 12:44:14PM -0500, Troy Benjegerdes wrote:
 What I would really like is a frontend and/or integration to Git/Mercurial that
> uses Bitcoin transactions *as* the signature, which has the nice side effect of
> providing timestamps backed by the full faith and credit of a billion dollar
> blockchain. So what is the best way for me to stick both a git *and* a
> mercurial identity hash into a bitcoin transaction?  (which leads to point 2
> below)

A "bitcoin transaction" can't by itself serve as a signature, as there
isn't any way to link the transaction to what you actually care about -
a human being - without additional infrastructure. You may find it
helpful to reflect back upon your 2nd and 3rd year courses on
post-modernism and semiotics: Is a keypair in a public key cryptography
system what is being signified, or is it merely a (posssibly false)
signifier?

If you just want to timestamp a git commit you can timestamp it in the
Bitcoin blockchain. I have the code to do so in my python-bitcoinlib:

    examples/timestamp.py <git commit>

To check timestamps the following should work, although I haven't tried:

    bitcoind searchrawtransactions <git commit>

You do need the searchrawtransactions patch. I've personally timestamped
most of the git tags for releases this way.

> > If you feel like volunteering to maintain one of these repos, you may
> > find my Litecoin v0.8.3.7 audit report to be a useful template:
> > 
> > https://bitcointalk.org/index.php?topic=265582.0
> 
> I'm not interested in volunteer, I'm interested in getting paid, and the
> best way I believe I can accomplish that is use *my* bitcoin address in a
> signature-transaction of the code I've reviewed.
> 
> What is the advantage of PGP? Far more people have ECDSA public-private 
> keys than PGP keys.

PGP of course has vast amounts of identity infrastructure already
developed for it, infrastructure that simply doesn't exist for "Bitcoin
addresses"

In any case you'll be happy to know that secp256k1 has been added to the
GPG development branch, which means you can sign your code with a ECDSA
key corresponding to a Bitcoin address if you wish too.

-- 
'peter'[:-1]@petertodd.org
000000000000000006fb87cb8ec6e0981b134953f1916c513f7210b534a94b8b
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 650 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140823/aafd9a93/attachment.sig>

From pete at petertodd.org  Sat Aug 23 22:51:38 2014
From: pete at petertodd.org (Peter Todd)
Date: Sat, 23 Aug 2014 18:51:38 -0400
Subject: [Bitcoin-development] Proposal: Encrypt bitcoin messages
In-Reply-To: <201408231902.57017.luke@dashjr.org>
References: <CA+8=xuJ+YDTNjyDW7DvP8KPN_nrFWpE68HvLw6EokFa-B-QGKw@mail.gmail.com>
	<CAG8oi1O0RzEmnPg+t1GONnpmmEFucB_Ux35Ca8Y6g0TZf6CiCQ@mail.gmail.com>
	<CANEZrP1a_WNBJBKASfAngMU0HzgJ7as6Wec5x69dpBSO-vK0+Q@mail.gmail.com>
	<201408231902.57017.luke@dashjr.org>
Message-ID: <20140823225138.GB18381@savin.petertodd.org>

On Sat, Aug 23, 2014 at 07:02:55PM +0000, Luke Dashjr wrote:
> On Saturday, August 23, 2014 6:44:15 PM Mike Hearn wrote:
> > > Not to mention encrypting basically non-sensitive inter-node traffic is
> > > almost completely worthless in providing anonymity anyway...
> > 
> > Recall that P2P connections carry Bloom filters too, which are not public
> > information.
> 
> As soon as you tell it to an unknown/public peer, it is public information.

Mike is correct here: It *might* be public information, and probably
won't be. We already can give weak assurance that it probably won't be
against many weaker attackers, simply because getting lots of IP
addresses is moderately expensive, and in the future additional methods
will be developed and deployed.

-- 
'peter'[:-1]@petertodd.org
0000000000000000239344fc532bbad8a679e3fc30e8900772523a10c4720a0c
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 650 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140823/e395fd7f/attachment.sig>

From memwallet.info at gmail.com  Wed Aug 27 00:57:51 2014
From: memwallet.info at gmail.com (Mem Wallet)
Date: Tue, 26 Aug 2014 20:57:51 -0400
Subject: [Bitcoin-development] standardize on bitcoin signed ecies ?
Message-ID: <CAKzHBKndU4nHHK=h4=G+hG_t_c77h0DHpeEUK+Kk9q2CsRHEcQ@mail.gmail.com>

Does anyone see a value in a standardized PGP-style message,
which would allow someone performing a bitcoin transaction to
send signed encrypted messages using only public and private
bitcoin keys ?

I'd like to propose a signed encrypted message protocol, in case
someone see's value in encoding such a thing into a BIP.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140826/e2f07472/attachment.html>

From gmaxwell at gmail.com  Wed Aug 27 01:08:02 2014
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Tue, 26 Aug 2014 18:08:02 -0700
Subject: [Bitcoin-development] standardize on bitcoin signed ecies ?
In-Reply-To: <CAKzHBKndU4nHHK=h4=G+hG_t_c77h0DHpeEUK+Kk9q2CsRHEcQ@mail.gmail.com>
References: <CAKzHBKndU4nHHK=h4=G+hG_t_c77h0DHpeEUK+Kk9q2CsRHEcQ@mail.gmail.com>
Message-ID: <CAAS2fgTV9hj1otAQZpF3tE+goNu591gj_mcoHrNCPBbVHuuz6Q@mail.gmail.com>

On Tue, Aug 26, 2014 at 5:57 PM, Mem Wallet <memwallet.info at gmail.com> wrote:
>
> Does anyone see a value in a standardized PGP-style message,
> which would allow someone performing a bitcoin transaction to
> send signed encrypted messages using only public and private
> bitcoin keys ?
>
> I'd like to propose a signed encrypted message protocol, in case
> someone see's value in encoding such a thing into a BIP.

Using the same keys for signing and encryption is generally considered
a bad practice, for a number of reasons.

If the keys aren't the same, there is much less reason to use
something specific to Bitcoin.

Getting all the details right in an encryption implementation is very
difficulty, previously published efforts in Bitcoin software have been
_severely_ flawed and insecure. I am not confident that an effort
right now would receive adequate review.



From laanwj at gmail.com  Thu Aug 28 14:41:27 2014
From: laanwj at gmail.com (Wladimir)
Date: Thu, 28 Aug 2014 16:41:27 +0200
Subject: [Bitcoin-development] [ann] Bitcoin Core 0.9.3 rc1 is available for
	download
Message-ID: <CA+s+GJCHhOfPvEzvVroVa8H1zqrmGHmnNX9affRPpGD2ZGbMDA@mail.gmail.com>

Bitcoin Core version 0.9.3rc1 is now available from:

  https://bitcoin.org/bin/0.9.3/test/

This is a release candidate (test version) for a new minor version
release, bringing
only bug fixes and updated translations.

Please report bugs using the issue tracker at github:

  https://github.com/bitcoin/bitcoin/issues

Upgrading and downgrading
==========================

How to Upgrade
--------------

If you are running an older version, shut it down. Wait until it has completely
shut down (which might take a few minutes for older versions), then run the
installer (on Windows) or just copy over /Applications/Bitcoin-Qt (on Mac) or
bitcoind/bitcoin-qt (on Linux).

If you are upgrading from version 0.7.2 or earlier, the first time you run
0.9.3 your blockchain files will be re-indexed, which will take anywhere from
30 minutes to several hours, depending on the speed of your machine.

Downgrading warnings
--------------------

The 'chainstate' for this release is not always compatible with previous
releases, so if you run 0.9.x and then decide to switch back to a
0.8.x release you might get a blockchain validation error when starting the
old release (due to 'pruned outputs' being omitted from the index of
unspent transaction outputs).

Running the old release with the -reindex option will rebuild the chainstate
data structures and correct the problem.

Also, the first time you run a 0.8.x release on a 0.9 wallet it will rescan
the blockchain for missing spent coins, which will take a long time (tens
of minutes on a typical machine).

0.9.3 Release notes
=======================

RPC:
- Avoid a segfault on getblock if it can't read a block from disk
- Add paranoid return value checks in base58

Protocol and network code:
- Don't poll showmyip.com, it doesn't exist anymore
- Add a way to limit deserialized string lengths and use it
- Add a new checkpoint at block 295,000
- Increase IsStandard() scriptSig length
- Avoid querying DNS seeds, if we have open connections

Wallet:
- Check redeemScript size does not exceed 520 byte limit
- Ignore (and warn about) too-long redeemScripts while loading wallet

GUI:
- fix 'opens in testnet mode when presented with a BIP-72 link with no fallback'
- AvailableCoins: acquire cs_main mutex
- Fix unicode character display on MacOSX

Miscellaneous:
- key.cpp: fail with a friendlier message on missing ssl EC support
- Remove bignum dependency for scripts
- Upgrade OpenSSL to 1.0.1i (see
https://www.openssl.org/news/secadv_20140806.txt - just to be sure, no
critical issues for Bitcoin Core)
- Upgrade miniupnpc to 1.9.20140701
- Fix boost detection in build system on some platforms

Credits
--------

Thanks to everyone who contributed to this release:

- Andrew Poelstra
- Cory Fields
- Jeff Garzik
- Johnathan Corgan
- Julian Haight
- Michael Ford
- Pavel Vasin
- Peter Todd
- Pieter Wuille
- Rose Toomey
- Ruben Dario Ponticelli
- Trevin Hofmann
- Wladimir J. van der Laan
- Zak Wilcox

As well as everyone that helped translating on
[Transifex](https://www.transifex.com/projects/p/bitcoin/).



From bitcoin-list at bluematt.me  Thu Aug 28 20:21:30 2014
From: bitcoin-list at bluematt.me (Matt Corallo)
Date: Thu, 28 Aug 2014 20:21:30 +0000
Subject: [Bitcoin-development] RIP Hal Finney
Message-ID: <53FF8F4A.5000801@bluematt.me>

I'm sure many of you have already seen this, but Hal Finney passed away
on Tuesday. While his body is being cryogenically preserved, we should
all take a moment to thank Hal for everything he did for the cypherpunk
community, specifically helping hugely in the early days of Bitcoin as
well as PGP.

Matt

http://lists.extropy.org/pipermail/extropy-chat/2014-August/082585.html



From bitcoin at olivere.de  Fri Aug 29 09:29:56 2014
From: bitcoin at olivere.de (Oliver Egginger)
Date: Fri, 29 Aug 2014 11:29:56 +0200
Subject: [Bitcoin-development] RIP Hal Finney
In-Reply-To: <53FF8F4A.5000801@bluematt.me>
References: <53FF8F4A.5000801@bluematt.me>
Message-ID: <54004814.10804@olivere.de>

Am 28.08.2014 um 22:21 schrieb Matt Corallo:
> I'm sure many of you have already seen this, but Hal Finney passed away
> on Tuesday.

No, I have not noticed yet. I did not know him personally, but it still
makes me sad now. Last year he wrote on Bitcoin Talk in a
thought-provoking way about his disease:

https://bitcointalk.org/index.php?topic=155054.0

I think a very inspiring Character for all of us. Not only because of
his work.

- oliver



From odinn.cyberguerrilla at riseup.net  Sat Aug 30 03:33:52 2014
From: odinn.cyberguerrilla at riseup.net (Odinn Cyberguerrilla)
Date: Fri, 29 Aug 2014 20:33:52 -0700
Subject: [Bitcoin-development] Reconsidering github
In-Reply-To: <CA+s+GJDM4Tq69wDv2UQ07aCLDOayA9C8im+O+cJn2dSrVopUmw@mail.gmail.com>
References: <CAJHLa0NXAYh9HzazN6gArUV8y7J8_G0oqkZqPBgibpW0wRNxKQ@mail.gmail.com>
	<CA+s+GJDM4Tq69wDv2UQ07aCLDOayA9C8im+O+cJn2dSrVopUmw@mail.gmail.com>
Message-ID: <92a9a8424f99bf57c765f6ca0e6492ab.squirrel@mail.riseup.net>

> On Tue, Aug 19, 2014 at 2:02 PM, Jeff Garzik <jgarzik at bitpay.com> wrote:
>> It would be nice if the issues and git repo for Bitcoin Core were not
>> on such a centralized service as github, nice and convenient as it is.
>
> Despite my complaining about github, I don't like the idea of moving
> somewhere else. The current way of working - to use github for storing
> the tree, and use a custom script for signing+merging - is fine with
> me.
>
> Github has a low barrier to contribution. Almost every open source
> developer already has a github account. Switching to something
> self-hosted makes it more difficult for people to contribute.
>
> Plus if we have to take the hosting upon ourselves, we have to handle
> sysadmin work ourselves as well. That's not a good use of the limited
> manpower available.
>
> Also it will be a lot of work to migrate over all the current issues
> and pulls. I don't look forward to that. I don't see the point of
> this, sorry.
>
> Wladimir
>
> ------------------------------------------------------------------------------
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>

I agree with Wladimir, keep it simple.  There being many other more urgent
questions to address, imho.




