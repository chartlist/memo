From witchspace81 at gmail.com  Sun Oct  2 07:52:56 2011
From: witchspace81 at gmail.com (John Smith)
Date: Sun, 2 Oct 2011 07:52:56 +0000
Subject: [Bitcoin-development] Deprecating "midstate" in getwork?
In-Reply-To: <A5A4F15F-4934-43A8-938B-8ECF8A2238E6@heliacal.net>
References: <4E80D591.2080100@nilsschneider.net>
	<CAJNQ0stW-7HMw-O_C9Go8ViRrxBNtEpsbhSRyc3aOzm6OvR6dA@mail.gmail.com>
	<4E845935.8060601@nilsschneider.net> <4E845B09.8040400@justmoon.de>
	<A5A4F15F-4934-43A8-938B-8ECF8A2238E6@heliacal.net>
Message-ID: <CAJNQ0ssuHWAcYm3SAB+9MX=8fFvFpdxjKk+M7ZfErPB6wO7pFQ@mail.gmail.com>

On Thu, Sep 29, 2011 at 12:49 PM, solar <solar at heliacal.net> wrote:

> It's just simple SHA2, you can implement the whole thing easily without
> dragging in a huge lib like OpenSSL.  I guess I haven't looked at it
> recently but the original CPU miner was just implemented locally in bitcoin
> and didn't use any libs.
>

I don't get the 'dragging in' part. Bitcoin already depends on OpenSSL for
ecdsa, bignum, and SSL for RPC. Please, please don't try to reimplement
these locally :-)

JS
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111002/96f11142/attachment.html>

From zgenjix at yahoo.com  Sun Oct  2 23:32:33 2011
From: zgenjix at yahoo.com (Amir Taaki)
Date: Sun, 2 Oct 2011 16:32:33 -0700 (PDT)
Subject: [Bitcoin-development] My thoughts on DoS code
Message-ID: <1317598353.90764.YahooMailNeo@web121015.mail.ne1.yahoo.com>

Hey,

The Zen of Python is relevant here: http://www.python.org/dev/peps/pep-0020/

"In the face of ambiguity, refuse the temptation to guess."

If a node incorrectly implements the standard then it should be shunned immediately. Not only is this more secure, but it will ensure long term compatibility between different implementations. Gavin argues that being a bit lenient makes it easier for people working on other implementations.

I'd argue the opposite being the only person that's working on a full node implementation. Lucky I know my way around the code, so I don't have to guess. But if I did not things would be much harder. Imagine you're trying to interact with this protocol and then randomly it will suddenly disconnect you because of accumulated errors that have been building up.

Everything should be strict, explicit, unambiguous and loud.

I propose a new message type: "error" Payload is a uint64_t error_code and var_str reason.

Before disconnecting a node you can send it an error message. The error_code is the main class of error- i.e version_sent_twice. Reason is just an implementation specific string that can add context.

Other possible fields:
uint8_t seriousness (debug, info, warning, error, fatal)
uint8_t action_taken (disconnect, blacklist, .etc)




From gmaxwell at gmail.com  Mon Oct  3 04:53:51 2011
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Mon, 3 Oct 2011 00:53:51 -0400
Subject: [Bitcoin-development] Supermajority mining votes for valid->invalid
	changes.
Message-ID: <CAAS2fgRSw8ry7wjL5Fao1U+Ps0-6hfDcme_V_OCSkKaRTm2r9w@mail.gmail.com>

It is possible to made changes to the distributed algorithm which make
previously valid txn invalid without necessarily creating any lasting
chain splits.  This has been proposed for the addition of the eval
opcode by using one of the existing NOPs.

One challenge is that if transactions are emitted which are invalid
under the new scheme but valid under the old after the block height
that the rule is coded to take effect and a super-majority of miners
are not yet upgraded the upgrade may cause a long reorganization and
serious disruption.

Here I explain one possible way of avoiding this.

Upgraded nodes get the following rules:
(0) Never forward or mine a txn which would be invalid under the new rule.
(1) Apply old behavior before height X unconditionally.
    (X set far enough in the future to get reasonable deployment by
large miners)
(2) Begin applying the new rule only after the first point in the chain
    after X when none of the last Y blocks have contained an invalid transaction
    under the new rules.

After the software has been released members of the bitcoin community then
begin _intentionally_ transmitting transactions which are invalid under
the new rules. (What would have been an attack under simplest deployment plan)

By setting Y high enough that all major miners have a chance to mine
in the window,
this actually becomes an effective vote for the change by miners with
a stochastic
super-majority threshold.  All nodes are able to exactly determine at what block
the election has completed because it is an objective fact of the chain.

With this scheme the new encoding will only become active when enough mining
capacity supports it (or at least helpfully refuses to mine the who class
of transactions) so that a large reorganization will not happen due to
incompatible blocks during deployment.

This could be further enhanced with conflicting block discouragement (e.g.
refusing to extend or forward a rules violating block until it is burred)
but I think this scheme is sufficient without that, and that this is generally
superior to discouragement for this purpose.

Cheers.



From luke at dashjr.org  Mon Oct  3 05:32:19 2011
From: luke at dashjr.org (Luke-Jr)
Date: Mon, 3 Oct 2011 01:32:19 -0400
Subject: [Bitcoin-development] Supermajority mining votes for
	valid->invalid changes.
In-Reply-To: <CAAS2fgRSw8ry7wjL5Fao1U+Ps0-6hfDcme_V_OCSkKaRTm2r9w@mail.gmail.com>
References: <CAAS2fgRSw8ry7wjL5Fao1U+Ps0-6hfDcme_V_OCSkKaRTm2r9w@mail.gmail.com>
Message-ID: <201110030132.21646.luke@dashjr.org>

On Monday, October 03, 2011 12:53:51 AM Gregory Maxwell wrote:
> Upgraded nodes get the following rules:
> (0) Never forward or mine a txn which would be invalid under the new rule.
> (1) Apply old behavior before height X unconditionally.
>     (X set far enough in the future to get reasonable deployment by
> large miners)
> (2) Begin applying the new rule only after the first point in the chain
>     after X when none of the last Y blocks have contained an invalid
> transaction under the new rules.

Perhaps as a safeguard:
(3) Before applying the new rule, require 50% of the last Y blocks contain a
    coinbase with a "I am upgraded" code
(4) Until the new rule is active, include an "I am upgraded" code in every
    block; after it's active, this can be turned off

> After the software has been released members of the bitcoin community then
> begin _intentionally_ transmitting transactions which are invalid under
> the new rules. (What would have been an attack under simplest deployment
> plan)

Why would legitimate community members ever intentionally transmit an invalid 
transaction? ;)



From gmaxwell at gmail.com  Mon Oct  3 05:39:07 2011
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Mon, 3 Oct 2011 01:39:07 -0400
Subject: [Bitcoin-development] Supermajority mining votes for
 valid->invalid changes.
In-Reply-To: <201110030132.21646.luke@dashjr.org>
References: <CAAS2fgRSw8ry7wjL5Fao1U+Ps0-6hfDcme_V_OCSkKaRTm2r9w@mail.gmail.com>
	<201110030132.21646.luke@dashjr.org>
Message-ID: <CAAS2fgSgH5eH+9eY8e=T946NRW10_aiWvDM523+HJgBL2zEgew@mail.gmail.com>

On Mon, Oct 3, 2011 at 1:32 AM, Luke-Jr <luke at dashjr.org> wrote:
> Perhaps as a safeguard:
> (3) Before applying the new rule, require 50% of the last Y blocks contain a
> ? ?coinbase with a "I am upgraded" code
> (4) Until the new rule is active, include an "I am upgraded" code in every
> ? ?block; after it's active, this can be turned off

(4) is a nice idea.

I was hoping to avoid (3) simply because for any one of these upgrades
hopefully 95% of the network is neutral wrt the change because they
won't mine either form of the transactions.

The active statement has the benefit that it constitutes a proof: You
know with specific confidence (based on the window size) how likely a
fork of length X will be if a newly invalid transaction is announced
at the time of the activation.



From luke at dashjr.org  Mon Oct  3 20:17:52 2011
From: luke at dashjr.org (Luke-Jr)
Date: Mon, 3 Oct 2011 16:17:52 -0400
Subject: [Bitcoin-development] [PULLs] 6 branches
Message-ID: <201110031617.54176.luke@dashjr.org>

These branches are ready for merging to mainline.

Branches can be viewed at:
    http://luke.dashjr.org/programs/bitcoin/w/bitcoind/luke-jr.git/heads

git pull git://gitorious.org/~Luke-Jr/bitcoin/luke-jr-bitcoin.git <branchname>

=

minfee_modes: minor internal API change as a step toward allowing
              user-customizable fee schedules

=

qmake_system_crypto++: allow building bitcoin-qt against system crypto++

    This is worthless if the crypto++ dependency is removed.

=

sharedlibs: build bitcoind against shared libraries on 'unix'

    Not sure why it's been static for so long, but most systems only have
    shared libs.

=

signal_blk_notify: -blknotifypidfile option to send SIGUSR1 to a PID when
                   there's a new best block

    Used by basically every pool now, it just sends SIGUSR1 to a poolserver.

=

bugfix_qt_uri_amount_parser: fix URI amount parser to accept exponents and
                             hexadecimals

    Please don't bother arguing over bugfix_qt_uri_amount_parser. It'll just
    be a waste of time. Neither the pro- nor anti- sides have budged over
    multiple arguments already. I can't force you guys to merge it, but I can
    at least make it easy if you decide to tolerate it. Just keep in mind that
    it doesn't hurt the BTC-only URIs at all, and if nobody ends up using it
    for other units, it can always be removed later.
        Best  case scenario: people use it and bitcoin-qt works correctly
        Worst case scenario: people don't use it, and it can be removed

=

base58_liberal_parsing: accept typos in base58 data

    The same best/worst case scenario logic as the URI parser applies
    to base58_liberal_parsing too, so long as typos aren't advertised as
    legitimate addresses.




From mcqueenorama at gmail.com  Mon Oct  3 23:04:00 2011
From: mcqueenorama at gmail.com (Brian McQueen)
Date: Mon, 3 Oct 2011 16:04:00 -0700
Subject: [Bitcoin-development] Tests for Bitcoin QT
Message-ID: <CAPfzCrQoP-9aw2SmoFr=FqANBKEJ-zGeOMv08MjtWv-JdXHFDw@mail.gmail.com>

The Bitcoin QT worked excellently the first time on my Mac.  I was so
surprised to do a pull and compile and bang the new wallet popped up
and was running.  Its much easier than getting it all going from
makefile and CLI.

 However I no longer see the tests subdirectory.  How are the unit
tests handled within this QT framework?

B
-- 
Make a Small Loan, Make a Big Difference - Check out Kiva.org to Learn How!



From luke at dashjr.org  Tue Oct  4 05:06:17 2011
From: luke at dashjr.org (Luke-Jr)
Date: Tue, 4 Oct 2011 01:06:17 -0400
Subject: [Bitcoin-development] [PULLs] 6 *more* branches
Message-ID: <201110040106.20441.luke@dashjr.org>

These branches are ready for merging to mainline. Note that these are not the 
same ones I sent earlier today, but part of a larger batch I have just 
finished rebasing.

Branches can be viewed at:
    http://luke.dashjr.org/programs/bitcoin/w/bitcoind/luke-jr.git/heads

git pull git://gitorious.org/~Luke-Jr/bitcoin/luke-jr-bitcoin.git <branchname>

=

coinbaser: allow customizing what addresses are paid by generation, with
           failover to the standard "50 BTC to me" behaviour; also adds the
           "setworkaux" JSON-RPC call to add arbitrary data to the coinbase,
           which can be used to implement merged-mining (has safeguards
           against creating invalid coinbases)

    Eligius has tested this quite a bit under the 0.3.23 codebase.

=

txinfo: adds "pooledtx" (number of transactions in memory pool),
        "currentblocktx" (number of txns in the last block created), and
        "currentblocksize" to the output of the JSON-RPC 'getinfo' method;
        adds "block_hash" and "block_index" to transactions shown by
        'listtransactions' and similar JSON-RPC methods

    Been using this since 0.3.21 without issues.

=

force_send: disables automatically adding "minimum" fees for JSON-RPC
            methods-- instead, it returns an error or, iff the user sets the
            new second parameter "force" to the 'settxfee' JSON-RPC call,
            sends the transaction with the user-specified fee

    This only affects JSON-RPC users, who should be assumed to understand the
    risk of sending with insufficient fees.

=

eligius_relay: relay transactions that satisfy Eligius's minimum fee when it's
               lower than the default rules
eligius_sendfee: allow sending the lower fee between default and Eligius, and
                 adds relay.eligius.st to the DNS seed list

    Merge or not, up to you guys... I don't really care.

=

bugfix_CreateThread_ThreadSocketHandler_errReporting: report an error in
                                                      debug.log



From luke at dashjr.org  Tue Oct  4 05:15:09 2011
From: luke at dashjr.org (Luke-Jr)
Date: Tue, 4 Oct 2011 01:15:09 -0400
Subject: [Bitcoin-development] [RFCs] 13 new branches
Message-ID: <201110040115.11613.luke@dashjr.org>

These branches are NOT ready for merging to mainline, but need peer review.

Branches can be viewed at:
    http://luke.dashjr.org/programs/bitcoin/w/bitcoind/luke-jr.git/heads

git pull git://gitorious.org/~Luke-Jr/bitcoin/luke-jr-bitcoin.git <branchname>

=

my_free_txn: accept the user's own transactions regardless of fees or
             standardness; put credits-to-user toward covering fees required

    Common-sense, really.

=

accept_nonstdtxn: adds a -acceptnonstdtxn option to allow miners to easily
                  accept "non-standard" transactions

    We probably want to amend this with a block for OP_NOP*?

=

free_relay: relay transactions regardless of fees

=

optimize_cache_rpcauth: cache RPC username and password

    Part of JoelKatz's diffN patches for a while, seems fairly well-tested on
    (other) pools

=

optimize_conn_adjtime: cache AdjustedTime around a for loop

    Another part of JoelKatz's diff4 patch.

=

optimize_ToHex: faster binary-to-hexadecimal-string function

=

optimize_DecodeBase64: faster base64 decoding

=

optimize_remove_CheckWork_delay: remove 2 second delay from CheckWork

    I don't know why this is here, but apparently most pools work fine without
    it? (from JoelKatz)

=

optimize_FastGetWork: optimizations for the common case of getwork

    Yet another JoelKatz patch. His patch has it bundled tightly with the
    ToHex branch, so once one is merged, the other will need rebasing.

=

optimize_http_status: use C instead of C++ for HTTP status reply strings

=

rpcclient_conn_close: "Connection: close" header in client mode

=

threaded_rpc: use a new thread for each JSON-RPC connection, with mutexes
              preventing actual methods from being executed concurrently
              (except for parts of getwork)

    Tested on Eligius from day 1, under older versions. A few months ago, the
    code was merged with some of JoelKatz's patch, making it stable with SSL
    support.

=

rpc_keepalive: support for HTTP 1.1 keep-alive

    Depends on threaded_rpc.



From witchspace81 at gmail.com  Tue Oct  4 17:35:34 2011
From: witchspace81 at gmail.com (John Smith)
Date: Tue, 4 Oct 2011 17:35:34 +0000
Subject: [Bitcoin-development] Tests for Bitcoin QT
In-Reply-To: <CAPfzCrQoP-9aw2SmoFr=FqANBKEJ-zGeOMv08MjtWv-JdXHFDw@mail.gmail.com>
References: <CAPfzCrQoP-9aw2SmoFr=FqANBKEJ-zGeOMv08MjtWv-JdXHFDw@mail.gmail.com>
Message-ID: <CAJNQ0su+UrGLOn+m_mUh6DYDQzOQ6z7KjMWkPGw62d_mPjCiOw@mail.gmail.com>

Hello Brian,

There are no unit tests for the Qt GUI code itself as of this moment.

The tests for the bitcoin core are still there in src/tests >). You need to
build them with the makefile, though. qmake is currently only used for the
GUI executable.

JS

On Mon, Oct 3, 2011 at 11:04 PM, Brian McQueen <mcqueenorama at gmail.com>wrote:

> The Bitcoin QT worked excellently the first time on my Mac.  I was so
> surprised to do a pull and compile and bang the new wallet popped up
> and was running.  Its much easier than getting it all going from
> makefile and CLI.
>
>  However I no longer see the tests subdirectory.  How are the unit
> tests handled within this QT framework?
>
> B
> --
> Make a Small Loan, Make a Big Difference - Check out Kiva.org to Learn How!
>
>
> ------------------------------------------------------------------------------
> All the data continuously generated in your IT infrastructure contains a
> definitive record of customers, application performance, security
> threats, fraudulent activity and more. Splunk takes this data and makes
> sense of it. Business sense. IT sense. Common sense.
> http://p.sf.net/sfu/splunk-d2dcopy1
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111004/367ca48a/attachment.html>

From mcqueenorama at gmail.com  Tue Oct  4 23:40:23 2011
From: mcqueenorama at gmail.com (Brian McQueen)
Date: Tue, 4 Oct 2011 16:40:23 -0700
Subject: [Bitcoin-development] Mac libboost_thread or thread-mt?
Message-ID: <CAPfzCrQapXWj_qVRffi5Tnr6_e3_0NEXjGnusHiSOkE-RJ5KLw@mail.gmail.com>

I installed boost via the mac ports.  Its got lobboost_thread-mt, but
it doesn't have libboost_thread.a. Should I modify the makefile or get
a different version of boost?

-- 
Make a Small Loan, Make a Big Difference - Check out Kiva.org to Learn How!



From mcqueenorama at gmail.com  Wed Oct  5 05:18:01 2011
From: mcqueenorama at gmail.com (Brian McQueen)
Date: Tue, 4 Oct 2011 22:18:01 -0700
Subject: [Bitcoin-development] Transaction Delivery and Storage
Message-ID: <CAPfzCrS87dJwHC=HQAVcfm8Fm9r5LdENg5s9JUnLuZr+sgh+jg@mail.gmail.com>

I see the Contracts wiki page talking about,

1) Transactions passed around outside the P2P network ...
2) ... transaction ... not broadcast right away

How are transactions created, stored and transmitted?  How will they
be brought back into the P2P network once they are out?

B

-- 
Make a Small Loan, Make a Big Difference - Check out Kiva.org to Learn How!



From gmaxwell at gmail.com  Wed Oct  5 05:23:42 2011
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Wed, 5 Oct 2011 01:23:42 -0400
Subject: [Bitcoin-development] Transaction Delivery and Storage
In-Reply-To: <CAPfzCrS87dJwHC=HQAVcfm8Fm9r5LdENg5s9JUnLuZr+sgh+jg@mail.gmail.com>
References: <CAPfzCrS87dJwHC=HQAVcfm8Fm9r5LdENg5s9JUnLuZr+sgh+jg@mail.gmail.com>
Message-ID: <CAAS2fgTU16E08n7QtDDX0+G8C1q5mXHv14gXxJmaXR7+_vCroA@mail.gmail.com>

On Wed, Oct 5, 2011 at 1:18 AM, Brian McQueen <mcqueenorama at gmail.com> wrote:
> I see the Contracts wiki page talking about,
>
> 1) Transactions passed around outside the P2P network ...
> 2) ... transaction ... not broadcast right away
>
> How are transactions created, stored and transmitted? ?How will they
> be brought back into the P2P network once they are out?

However you want. The P2P network isn't all the essential to bitcoin.
With patches you can import and export transactions to text from a
regular client.

The distributed algorithm and the block chain are far more essential
to bitcoin than the p2p network is, you could interconnect all bitcoin
systems with morse code operators running spark gap transmitters with
nary an IP packet in sight and it would still be bitcoin.



From gronager at ceptacle.com  Wed Oct  5 05:35:52 2011
From: gronager at ceptacle.com (=?iso-8859-1?Q?Michael_Gr=F8nager?=)
Date: Wed, 5 Oct 2011 07:35:52 +0200
Subject: [Bitcoin-development] Mac libboost_thread or thread-mt?
In-Reply-To: <CAPfzCrQapXWj_qVRffi5Tnr6_e3_0NEXjGnusHiSOkE-RJ5KLw@mail.gmail.com>
References: <CAPfzCrQapXWj_qVRffi5Tnr6_e3_0NEXjGnusHiSOkE-RJ5KLw@mail.gmail.com>
Message-ID: <260F44BE-5DF3-4F6F-A3ED-A408E5B7A7B5@ceptacle.com>

Hi Brian,

Had a similar issue the other day with my cmake btc buildsystem - I just changed the name to -mt, I think that is th way to go.

Cheers,

Michael

On 05/10/2011, at 01:40, Brian McQueen wrote:

> I installed boost via the mac ports.  Its got lobboost_thread-mt, but
> it doesn't have libboost_thread.a. Should I modify the makefile or get
> a different version of boost?
> 
> -- 
> Make a Small Loan, Make a Big Difference - Check out Kiva.org to Learn How!
> 
> ------------------------------------------------------------------------------
> All the data continuously generated in your IT infrastructure contains a
> definitive record of customers, application performance, security
> threats, fraudulent activity and more. Splunk takes this data and makes
> sense of it. Business sense. IT sense. Common sense.
> http://p.sf.net/sfu/splunk-d2dcopy1
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development





From gronager at ceptacle.com  Wed Oct  5 12:31:40 2011
From: gronager at ceptacle.com (=?iso-8859-1?Q?Michael_Gr=F8nager?=)
Date: Wed, 5 Oct 2011 14:31:40 +0200
Subject: [Bitcoin-development] vtxPrev
Message-ID: <E0AD809E-7446-4E18-9A2D-7E7480F8AB89@ceptacle.com>

Hi !

I am looking into enabling a split between thin clients holding the wallet and server(s) holding the blocks and txdb.

To that end I am considering to simplify the WalletTx a bit and I came across the vtxPrev in the code. As I see it vtxPrev is only used for keeping a list of supporting transactions to enable resubmit of these in case the transaction it self and all its supporting transactions are lost due to some blocks becoming invalid as they are part of a dead-end part of the chain. However...

The vtxPrev stores 3 transactions back, but as transactions need 7 block to maturity and respendability isn't it overkill - I mean it is highly unlikely that a transaction gets invalid after 7 confirmations and the vtxPrev are guarding against resubmission of transaction more than 21 confirmations back. Further, we cannot guarantee that the transaction owner is online at the time and the money could have been re-spent for others anyway.

So bottom line:
Do we need the vtxPrev at all ? Or did I miss out something ?

Cheers,

Michael





From gmaxwell at gmail.com  Wed Oct  5 12:50:52 2011
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Wed, 5 Oct 2011 08:50:52 -0400
Subject: [Bitcoin-development] vtxPrev
In-Reply-To: <E0AD809E-7446-4E18-9A2D-7E7480F8AB89@ceptacle.com>
References: <E0AD809E-7446-4E18-9A2D-7E7480F8AB89@ceptacle.com>
Message-ID: <CAAS2fgRiM9SFGVtYU1GJM8U0z8aMecc3Ng9wM4SNWkE5_MKPwQ@mail.gmail.com>

On Wed, Oct 5, 2011 at 8:31 AM, Michael Gr?nager <gronager at ceptacle.com> wrote:
> The vtxPrev stores 3 transactions back, but as transactions need 7 block to maturity and respendability isn't it overkill - I mean it is highly unlikely that a transaction gets invalid after 7 confirmations and

They don't need 7 blocks to maturity and respendability. The software
will attempt to use older inputs when available but if not it will use
what it has.  It's also prone to respending its own outputs quickly
because it reasonably trusts that it won't doublespend its own
transactions.

And, yes, if there is a deep split then its possible that inputs might
have been spent differently in the new split. But it's not especially
likely. Retransmitting one of your own txn's parents if its dropped
but not yet impossible sounds prudent to me.



From gronager at ceptacle.com  Wed Oct  5 13:44:08 2011
From: gronager at ceptacle.com (=?iso-8859-1?Q?Michael_Gr=F8nager?=)
Date: Wed, 5 Oct 2011 15:44:08 +0200
Subject: [Bitcoin-development] vtxPrev
In-Reply-To: <CAAS2fgRiM9SFGVtYU1GJM8U0z8aMecc3Ng9wM4SNWkE5_MKPwQ@mail.gmail.com>
References: <E0AD809E-7446-4E18-9A2D-7E7480F8AB89@ceptacle.com>
	<CAAS2fgRiM9SFGVtYU1GJM8U0z8aMecc3Ng9wM4SNWkE5_MKPwQ@mail.gmail.com>
Message-ID: <03BEA6AD-7EF2-41D0-91A3-D943A7B2964D@ceptacle.com>

Oups - I was reading the code wrongly - going through AddSupportingTransactions carefully again...

The vtxPrev contains a list of the supporting confirmations up to 3 confirmations back. So it is only of relevance (and only gets filled) if you accept coins that are less than 3 confirmations old. In this case you would like to resend the depending transactions to the network in case of chain splits.

This makes much more sense, but also, it is only of relevance when you accept newly earned coins. And it will only be of relevance for half an hour or so.

Cheers,

Michael



On 05/10/2011, at 14:50, Gregory Maxwell wrote:

> On Wed, Oct 5, 2011 at 8:31 AM, Michael Gr?nager <gronager at ceptacle.com> wrote:
>> The vtxPrev stores 3 transactions back, but as transactions need 7 block to maturity and respendability isn't it overkill - I mean it is highly unlikely that a transaction gets invalid after 7 confirmations and
> 
> They don't need 7 blocks to maturity and respendability. The software
> will attempt to use older inputs when available but if not it will use
> what it has.  It's also prone to respending its own outputs quickly
> because it reasonably trusts that it won't doublespend its own
> transactions.
> 
> And, yes, if there is a deep split then its possible that inputs might
> have been spent differently in the new split. But it's not especially
> likely. Retransmitting one of your own txn's parents if its dropped
> but not yet impossible sounds prudent to me.

Michael Gronager, PhD
Owner Ceptacle / NDGF Director, NORDUnet A/S
Jens Juels Gade 33
2100 Copenhagen E
Mobile: +45 31 62 14 01
E-mail: gronager at ceptacle.com





From bitcoin-list at bluematt.me  Wed Oct  5 14:37:55 2011
From: bitcoin-list at bluematt.me (Matt Corallo)
Date: Wed, 05 Oct 2011 10:37:55 -0400
Subject: [Bitcoin-development] Mac libboost_thread or thread-mt?
In-Reply-To: <CAPfzCrQapXWj_qVRffi5Tnr6_e3_0NEXjGnusHiSOkE-RJ5KLw@mail.gmail.com>
References: <CAPfzCrQapXWj_qVRffi5Tnr6_e3_0NEXjGnusHiSOkE-RJ5KLw@mail.gmail.com>
Message-ID: <1317825475.3047.3.camel@BMThinkPad.lan.bluematt.me>

On Tue, 2011-10-04 at 16:40 -0700, Brian McQueen wrote:
> I installed boost via the mac ports.  Its got lobboost_thread-mt, but
> it doesn't have libboost_thread.a. Should I modify the makefile or get
> a different version of boost?
> 

(from
http://stackoverflow.com/questions/2293962/boost-libraries-in-multithreading-aware-mode)

The -mt suffix means built in multithreading aware mode (what this means
for a threading library I have no idea), however that suffix was removed
from Linux and Mac builds in 1.42.  If you are linking against 1.42+ on
Linux/Mac, adding/removing the -mt suffix means nothing AFAICT.

Matt




From mike at plan99.net  Wed Oct  5 15:17:30 2011
From: mike at plan99.net (Mike Hearn)
Date: Wed, 5 Oct 2011 17:17:30 +0200
Subject: [Bitcoin-development] Transaction Delivery and Storage
In-Reply-To: <CAPfzCrS87dJwHC=HQAVcfm8Fm9r5LdENg5s9JUnLuZr+sgh+jg@mail.gmail.com>
References: <CAPfzCrS87dJwHC=HQAVcfm8Fm9r5LdENg5s9JUnLuZr+sgh+jg@mail.gmail.com>
Message-ID: <CANEZrP02QiScfqWWBR7jNjZ9nDT7KkWuzK4Ua9NtVEwyiDAWKA@mail.gmail.com>

I imagine a lot of the things on the contracts page will be implemented by
specialized software that interacts with the Bitcoin network directly.
Transactions would then be moved around, for example, by having clients do
HTTP POSTs of protocol buffers to servers that are listening and know how to
interpret the received messages.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111005/c88a5375/attachment.html>

From gavinandresen at gmail.com  Wed Oct  5 18:42:59 2011
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Wed, 5 Oct 2011 14:42:59 -0400
Subject: [Bitcoin-development] Mac libboost_thread or thread-mt?
In-Reply-To: <1317825475.3047.3.camel@BMThinkPad.lan.bluematt.me>
References: <CAPfzCrQapXWj_qVRffi5Tnr6_e3_0NEXjGnusHiSOkE-RJ5KLw@mail.gmail.com>
	<1317825475.3047.3.camel@BMThinkPad.lan.bluematt.me>
Message-ID: <CABsx9T0PXuod3MS_B07PEOMEvKKjTtR3wAetbOkNp1HO5KFr-w@mail.gmail.com>

I updated src/makefile.osx and doc/build-osx.txt  today, assuming that
the MacPorts versions of dependencies will be used and the -mt boost
libraries will be used.

I also modified makefile.unix and makefile.osx to auto-build
dependencies using gcc's  -MMD  option.

-- 
--
Gavin Andresen



From dhuff at jrbobdobbs.org  Wed Oct  5 18:50:21 2011
From: dhuff at jrbobdobbs.org (Douglas Huff)
Date: Wed, 5 Oct 2011 13:50:21 -0500
Subject: [Bitcoin-development] Mac libboost_thread or thread-mt?
In-Reply-To: <CABsx9T0PXuod3MS_B07PEOMEvKKjTtR3wAetbOkNp1HO5KFr-w@mail.gmail.com>
References: <CAPfzCrQapXWj_qVRffi5Tnr6_e3_0NEXjGnusHiSOkE-RJ5KLw@mail.gmail.com>
	<1317825475.3047.3.camel@BMThinkPad.lan.bluematt.me>
	<CABsx9T0PXuod3MS_B07PEOMEvKKjTtR3wAetbOkNp1HO5KFr-w@mail.gmail.com>
Message-ID: <CAPiTikU=9=1cyL9EQPX5Ou47UBn+Q_VqXG51RP8_47DVT3zMGw@mail.gmail.com>

Bad update. Macports has a couple of boost packages. Install the newer 1.46
ones.

-- 
Douglas Huff
On Oct 5, 2011 1:43 PM, "Gavin Andresen" <gavinandresen at gmail.com> wrote:
> I updated src/makefile.osx and doc/build-osx.txt today, assuming that
> the MacPorts versions of dependencies will be used and the -mt boost
> libraries will be used.
>
> I also modified makefile.unix and makefile.osx to auto-build
> dependencies using gcc's -MMD option.
>
> --
> --
> Gavin Andresen
>
>
------------------------------------------------------------------------------
> All the data continuously generated in your IT infrastructure contains a
> definitive record of customers, application performance, security
> threats, fraudulent activity and more. Splunk takes this data and makes
> sense of it. Business sense. IT sense. Common sense.
> http://p.sf.net/sfu/splunk-d2dcopy1
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111005/7620b7df/attachment.html>

From mcqueenorama at gmail.com  Thu Oct  6 22:18:57 2011
From: mcqueenorama at gmail.com (Brian McQueen)
Date: Thu, 6 Oct 2011 15:18:57 -0700
Subject: [Bitcoin-development] Mac libboost_thread or thread-mt?
In-Reply-To: <CAPiTikU=9=1cyL9EQPX5Ou47UBn+Q_VqXG51RP8_47DVT3zMGw@mail.gmail.com>
References: <CAPfzCrQapXWj_qVRffi5Tnr6_e3_0NEXjGnusHiSOkE-RJ5KLw@mail.gmail.com>
	<1317825475.3047.3.camel@BMThinkPad.lan.bluematt.me>
	<CABsx9T0PXuod3MS_B07PEOMEvKKjTtR3wAetbOkNp1HO5KFr-w@mail.gmail.com>
	<CAPiTikU=9=1cyL9EQPX5Ou47UBn+Q_VqXG51RP8_47DVT3zMGw@mail.gmail.com>
Message-ID: <CAPfzCrRhRr_2AfwiR+NGSbRkBQ=n1tN=YLhVp3FOXJaSWFrk6Q@mail.gmail.com>

I added -mt and it compiles, but here is a surprise.  I had to add
libz.a to the makefile.osx.  Sounds odd!  Its coming from the crypto
libs.

On Wed, Oct 5, 2011 at 11:50 AM, Douglas Huff <dhuff at jrbobdobbs.org> wrote:
> Bad update. Macports has a couple of boost packages. Install the newer 1.46
> ones.
>
> --
> Douglas Huff
>
> On Oct 5, 2011 1:43 PM, "Gavin Andresen" <gavinandresen at gmail.com> wrote:
>> I updated src/makefile.osx and doc/build-osx.txt today, assuming that
>> the MacPorts versions of dependencies will be used and the -mt boost
>> libraries will be used.
>>
>> I also modified makefile.unix and makefile.osx to auto-build
>> dependencies using gcc's -MMD option.
>>
>> --
>> --
>> Gavin Andresen
>>
>>
>> ------------------------------------------------------------------------------
>> All the data continuously generated in your IT infrastructure contains a
>> definitive record of customers, application performance, security
>> threats, fraudulent activity and more. Splunk takes this data and makes
>> sense of it. Business sense. IT sense. Common sense.
>> http://p.sf.net/sfu/splunk-d2dcopy1
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
> ------------------------------------------------------------------------------
> All the data continuously generated in your IT infrastructure contains a
> definitive record of customers, application performance, security
> threats, fraudulent activity and more. Splunk takes this data and makes
> sense of it. Business sense. IT sense. Common sense.
> http://p.sf.net/sfu/splunk-d2dcopy1
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>



-- 
Make a Small Loan, Make a Big Difference - Check out Kiva.org to Learn How!



From emm10 at psu.edu  Thu Oct  6 23:35:23 2011
From: emm10 at psu.edu (Eric Mockensturm)
Date: Thu, 6 Oct 2011 19:35:23 -0400
Subject: [Bitcoin-development] Mac libboost_thread or thread-mt?
In-Reply-To: <CAPfzCrRhRr_2AfwiR+NGSbRkBQ=n1tN=YLhVp3FOXJaSWFrk6Q@mail.gmail.com>
References: <CAPfzCrQapXWj_qVRffi5Tnr6_e3_0NEXjGnusHiSOkE-RJ5KLw@mail.gmail.com>
	<1317825475.3047.3.camel@BMThinkPad.lan.bluematt.me>
	<CABsx9T0PXuod3MS_B07PEOMEvKKjTtR3wAetbOkNp1HO5KFr-w@mail.gmail.com>
	<CAPiTikU=9=1cyL9EQPX5Ou47UBn+Q_VqXG51RP8_47DVT3zMGw@mail.gmail.com>
	<CAPfzCrRhRr_2AfwiR+NGSbRkBQ=n1tN=YLhVp3FOXJaSWFrk6Q@mail.gmail.com>
Message-ID: <FC56C4D3-F4FE-4CDA-BC31-2C382AAB0973@psu.edu>

Brian,

Yea, I vaguely remember going through all this when I first tried building it.  If I recall you can statically link libz into crypto when you compile crypto.  Or something like that.  Maybe the default MacPorts crypto install does not do this.

Eric

-- 
Eric Mockensturm, Ph.D.
Associate Professor
Department of Mechanical & Nuclear Engineering
The Pennsylvania State University
157C Hammond Building
University Park, PA  16802
Email:  emm10 at psu.edu
Phone/Fax:  (814) 863-0736/7222


On Oct 6, 2011, at 6:18 PM, Brian McQueen wrote:

> I added -mt and it compiles, but here is a surprise.  I had to add
> libz.a to the makefile.osx.  Sounds odd!  Its coming from the crypto
> libs.
> 
> On Wed, Oct 5, 2011 at 11:50 AM, Douglas Huff <dhuff at jrbobdobbs.org> wrote:
>> Bad update. Macports has a couple of boost packages. Install the newer 1.46
>> ones.
>> 
>> --
>> Douglas Huff
>> 
>> On Oct 5, 2011 1:43 PM, "Gavin Andresen" <gavinandresen at gmail.com> wrote:
>>> I updated src/makefile.osx and doc/build-osx.txt today, assuming that
>>> the MacPorts versions of dependencies will be used and the -mt boost
>>> libraries will be used.
>>> 
>>> I also modified makefile.unix and makefile.osx to auto-build
>>> dependencies using gcc's -MMD option.
>>> 
>>> --
>>> --
>>> Gavin Andresen
>>> 
>>> 
>>> ------------------------------------------------------------------------------
>>> All the data continuously generated in your IT infrastructure contains a
>>> definitive record of customers, application performance, security
>>> threats, fraudulent activity and more. Splunk takes this data and makes
>>> sense of it. Business sense. IT sense. Common sense.
>>> http://p.sf.net/sfu/splunk-d2dcopy1
>>> _______________________________________________
>>> Bitcoin-development mailing list
>>> Bitcoin-development at lists.sourceforge.net
>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>> 
>> ------------------------------------------------------------------------------
>> All the data continuously generated in your IT infrastructure contains a
>> definitive record of customers, application performance, security
>> threats, fraudulent activity and more. Splunk takes this data and makes
>> sense of it. Business sense. IT sense. Common sense.
>> http://p.sf.net/sfu/splunk-d2dcopy1
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>> 
>> 
> 
> 
> 
> -- 
> Make a Small Loan, Make a Big Difference - Check out Kiva.org to Learn How!
> 
> ------------------------------------------------------------------------------
> All the data continuously generated in your IT infrastructure contains a
> definitive record of customers, application performance, security
> threats, fraudulent activity and more. Splunk takes this data and makes
> sense of it. Business sense. IT sense. Common sense.
> http://p.sf.net/sfu/splunk-d2dcopy1
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111006/ff207632/attachment.html>

From gavinandresen at gmail.com  Sat Oct  8 21:13:28 2011
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Sat, 8 Oct 2011 17:13:28 -0400
Subject: [Bitcoin-development] Help wanted: translations
Message-ID: <CABsx9T2eCpxqzbd0PmWJxCDFLHwOix2BOYp+APQGMZYh_O+R4g@mail.gmail.com>

Reposting here from the forums:

Good news: I'm just about to get a Bitcoin-Qt version 0.5 Release
Candidate 1 out, with a much-improved GUI.

Bad news: all the translations for the old wxWidgets Bitcoin are
obsolete, and the process for making translations is different.

Is anybody willing to write new translations?  Here's what you'll need to know:

Three translations already exist: de nl and ru.
Translations are stored in ".ts" files in the src/qt/locale folder
The 'QT Linguist' tool can be used to create translations
... or maybe an online tool like Transifex could/should be used to
crowd-source the work

And is anybody willing to take the job of coordinating translation
efforts, figuring out if Transifex is a good tool to use, and writing
some documentation to make it easy for people to create and submit new
translations?


References:
  https://github.com/bitcoin/bitcoin/blob/master/src/qt/locale
  http://doc.qt.nokia.com/latest/linguist-manual.html
  http://www.transifex.net/

-- 
--
Gavin Andresen



From decker.christian at gmail.com  Sat Oct  8 21:25:17 2011
From: decker.christian at gmail.com (Christian Decker)
Date: Sat, 8 Oct 2011 23:25:17 +0200
Subject: [Bitcoin-development] Help wanted: translations
In-Reply-To: <CABsx9T2eCpxqzbd0PmWJxCDFLHwOix2BOYp+APQGMZYh_O+R4g@mail.gmail.com>
References: <CABsx9T2eCpxqzbd0PmWJxCDFLHwOix2BOYp+APQGMZYh_O+R4g@mail.gmail.com>
Message-ID: <CALxbBHVatfdVeZ=gLm6Fd1nN3gPA-f_NwcuQz8_ym-5Wrha6GA@mail.gmail.com>

Damn, german is already contributed :-)
Well I can still do the italian one and check german then.

On Sat, Oct 8, 2011 at 11:13 PM, Gavin Andresen <gavinandresen at gmail.com>wrote:

> Reposting here from the forums:
>
> Good news: I'm just about to get a Bitcoin-Qt version 0.5 Release
> Candidate 1 out, with a much-improved GUI.
>
> Bad news: all the translations for the old wxWidgets Bitcoin are
> obsolete, and the process for making translations is different.
>
> Is anybody willing to write new translations?  Here's what you'll need to
> know:
>
> Three translations already exist: de nl and ru.
> Translations are stored in ".ts" files in the src/qt/locale folder
> The 'QT Linguist' tool can be used to create translations
> ... or maybe an online tool like Transifex could/should be used to
> crowd-source the work
>
> And is anybody willing to take the job of coordinating translation
> efforts, figuring out if Transifex is a good tool to use, and writing
> some documentation to make it easy for people to create and submit new
> translations?
>
>
> References:
>  https://github.com/bitcoin/bitcoin/blob/master/src/qt/locale
>  http://doc.qt.nokia.com/latest/linguist-manual.html
>  http://www.transifex.net/
>
> --
> --
> Gavin Andresen
>
>
> ------------------------------------------------------------------------------
> All of the data generated in your IT infrastructure is seriously valuable.
> Why? It contains a definitive record of application performance, security
> threats, fraudulent activity, and more. Splunk takes this data and makes
> sense of it. IT sense. And common sense.
> http://p.sf.net/sfu/splunk-d2dcopy2
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111008/1be6e70d/attachment.html>

From capibara at xs4all.nl  Sat Oct  8 22:51:54 2011
From: capibara at xs4all.nl (Rob Meijer)
Date: Sun, 9 Oct 2011 00:51:54 +0200
Subject: [Bitcoin-development] BitCoin and MinorFs/AppArmor
In-Reply-To: <676b6b58ece6f8f3c4ee8abdebce9e29.squirrel@webmail.xs4all.nl>
References: <4aa4401704cc1e7a1665971b79684a83.squirrel@webmail.xs4all.nl>
	<d6060149473a3262940e624e13e6e061.squirrel@webmail.xs4all.nl>
	<4E61531E.3050109@nilsschneider.net>
	<676b6b58ece6f8f3c4ee8abdebce9e29.squirrel@webmail.xs4all.nl>
Message-ID: <47526ed4693fd2c68a4a5db21ebf0119.squirrel@webmail.xs4all.nl>

I just finished the specs and design for MinorFs2.
I hope its a good fit for bitcoin this way.

http://minorfs.polacanthus.net/wiki/Minorfs2_id_service

I think 'process-Chain granularity' or 'Worker granularity' might be
suitable for bitcoin. But possibly a more course granularity level would
be required.

http://minorfs.polacanthus.net/wiki/Minorfs2_id_service#Executatable_persistente_granularity

If there are any potential changes any of you could think of for these
specs and this design that would make bitcoin and MinorFs2 a better match
please let me know.

Rob


On Mon, September 5, 2011 13:55, Rob Meijer wrote:
> On Sat, September 3, 2011 00:05, Nils Schneider wrote:
>> MinorFs sounds like an interesting concept and but wallet encryption
>> (already being tested and close to release) is a simpler solution for
>> end-users.
>
> I think the two could be considered complementary. Basicaly the existing
> MinorFs provides to the pseudo-persistent-process that private members
> provide to objects. 'Encapsulation of variables that still can be
> delegated by the object that encapsulates them'. In the MinorFs2 that I
> just started writing, I try to lower the barrier to using MinorFs by
> providing facilities to do pick a granularity for 'object' more suitable
> for most lines of development (where pseudo persistent processes are an
> unnatural concept).
>
> Think of BitCoin running as user certain user as an object and a piece of
> malware running as the same user as a second object. You can than think of
> the users home directory as a global variable, while MinorFs gives a
> private home to both the bitcoin object and the malware object. The
> bitcoin object can delegate parts of its private state to other objects,
> but as long as bit-coin doesn't do that, the private state won't be
> disclosed.
>
> Its a good idea to have data on disk encrypted even if you use something
> like Minorfs, if only to protect against bootable media attacks.
>
>> Would MinorFs help securing the wallet on a server, maybe even a
>> (insecure) VPS?
>
> No.
>
>> Can it work without changes to Bitcoin? If not, what is the minimal
>> amount of changes needed?
>
> Basically the existing MinorFs will work already with the existing BitCoin
> due to the fact that Bitcoin seems to extract $HOME from an environment
> variable, but there are some caveats:
>
> * It needs a bash script for starting up bitcoin with $HOME set to the
>   MinorFs home.
> * Bitcoin can be started in only one way. That is, bitcoin started from
> the gnome menu is interpret being a completely differnt bitcoin than
> bitcoin started from an xterm.
> * There can only be one bitcoin started and running at once.
> * All potential malware needs to run with at least an AppArmor profile
> that keeps it from reading /proc/$PID for pids other than itself.
>
> In the new version I'm contemplating, there would I think at least be a
> minor change to bitcoin needed:
>
> * bitcoin would have to use a small library that provides a
> 'minorfs_getpwuid' function.
>
> This function will work like getpwuid on any system without an active
> MinorFs2, and for any non apparmor confined process.
> On a system with MinorFs running it should return a passwd structure with
> the home changed to the MinorFs2 home.
>
>> Is there any guarantee it will never corrupt the wallet?
>
> All read and write operations will map directly to the underlying
> file-system, so basically it comes with the same lack of guarantee that
> any
> file-system comes with once the underlying media becomes flaky.
>
>> What would be the proper way to do backups?
>
> Haven't really thought about that, what is considered the currently proper
> way to keep backups for bitcoin?
>
>> On 02.09.2011 22:32, Rob Meijer wrote:
>>> Given that there was not a single response to my post, I gather there
>>> is
>>> no to little interest in an updated MinorFs that could be used by
>>> bitcoin
>>> on systems that support AppArmor (Ubuntu and OpenSuse).
>>>
>>> Nevertheless I've put down the initial set of specs for a rewrite of
>>> MinorFs for if anyone would like to comment on them to make a future
>>> match
>>> with Bitcoin more likely, I'm open to all sugestions:
>>>
>>> http://minorfs.polacanthus.net/wiki/Concepts_for_MinorFs2
>>>
>>> On Fri, August 26, 2011 09:48, Rob Meijer wrote:
>>>> A few years ago I wrote a least authority based set of filesystems
>>>> named
>>>> MinorFs that worked closely together with AppArmor (suse/ubuntu) to
>>>> give '
>>>> pseudo persistent processes' their own private but decomposable and
>>>> delegatable piece of filesystem storage:
>>>>
>>>> http://www.linuxjournal.com/magazine/minorfs
>>>> http://www.capibara.com/blog/2011/05/25/taming-mutable-state-for-file-systems/
>>>>
>>>> Currently there is only one perfect fit for MinorFs and that's the
>>>> stack
>>>> AppArmor/MinorFs/E-language-persistent-application. There are some
>>>> close
>>>> fits like running ssh without a passphrase (
>>>> http://minorfs.polacanthus.net/wiki/Ssh_private_keys_without_passphrase
>>>> )
>>>> but these require lots of manual fiddling by the user to get working.
>>>> The
>>>> ssh trick would probably work with bitcoin, but as you can see from
>>>> the
>>>> link above, it would be rather cumbersome.
>>>>
>>>> I am trying to get specs together for rewriting MinorFs (in Python) in
>>>> a
>>>> way that would make it easy and natural for application developers
>>>> that
>>>> want their application to be able to protect user data (like bitcoin
>>>> wallets) from mallware running under the same uid as that user.
>>>>
>>>> Currently minorfs granularity is hard fixed to that of the 'pseudo
>>>> persistent process', and that granularity is determined as described
>>>> in
>>>> the following link:
>>>>
>>>> http://minorfs.polacanthus.net/wiki/Pseudo_persistent_process
>>>>
>>>> When using pseudo persistent processes, you basically end up with
>>>> file-system storage that follows almost all of the modeling principles
>>>> of
>>>> the object capability model. This is great when designing a least
>>>> authority program from scratch and writing it in the (object
>>>> capability)
>>>> e-language using its persistence facilities.
>>>>
>>>> Given however that I don't expect bitcoin, openssh, chrome, firefox,
>>>> or
>>>> any other application that would benefit from what MinorFs provides to
>>>> be
>>>> rewritten in E, it seems like the next version of MinorFs should give
>>>> up
>>>> on the purity of its least authority model, and take an approach that
>>>> better suits common development languages and practices.
>>>>
>>>> With bitcoin being a project that could benefit most from what MinorFs
>>>> has
>>>> to offer, I would like to ask bitcoin developers to think about what
>>>> attributes from the current granularity level (pseudo persistent
>>>> process)
>>>> should be kept, what attributes should be dropped, and what properties
>>>> should be added to arrive at an 'id' that is the best fit for
>>>> granularity
>>>> of persistent private storage for bitcoin.
>>>>
>>>> I really want to accommodate bitcoin developer needs in this, so all
>>>> input
>>>> that helps me help you guys to get the next MinorFs version to
>>>> accommodate
>>>> your needs to a level that code to use MinorFs where available can be
>>>> added to bitcoin, would be extremely welcome.
>>>>
>>>> Let me know what you think,
>>>>
>>>> Rob
>>>>
>>>>
>>>> ------------------------------------------------------------------------------
>>>> EMC VNX: the world's simplest storage, starting under $10K
>>>> The only unified storage solution that offers unified management
>>>> Up to 160% more powerful than alternatives and 25% more efficient.
>>>> Guaranteed. http://p.sf.net/sfu/emc-vnx-dev2dev
>>>> _______________________________________________
>>>> Bitcoin-development mailing list
>>>> Bitcoin-development at lists.sourceforge.net
>>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>>>
>>>>
>>>
>>>
>>>
>>> ------------------------------------------------------------------------------
>>> Special Offer -- Download ArcSight Logger for FREE!
>>> Finally, a world-class log management solution at an even better
>>> price-free! And you'll get a free "Love Thy Logs" t-shirt when you
>>> download Logger. Secure your free ArcSight Logger TODAY!
>>> http://p.sf.net/sfu/arcsisghtdev2dev
>>> _______________________________________________
>>> Bitcoin-development mailing list
>>> Bitcoin-development at lists.sourceforge.net
>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>>
>>
>>
>> ------------------------------------------------------------------------------
>> Special Offer -- Download ArcSight Logger for FREE!
>> Finally, a world-class log management solution at an even better
>> price-free! And you'll get a free "Love Thy Logs" t-shirt when you
>> download Logger. Secure your free ArcSight Logger TODAY!
>> http://p.sf.net/sfu/arcsisghtdev2dev
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>
>>
>
>
>
> ------------------------------------------------------------------------------
> Special Offer -- Download ArcSight Logger for FREE!
> Finally, a world-class log management solution at an even better
> price-free! And you'll get a free "Love Thy Logs" t-shirt when you
> download Logger. Secure your free ArcSight Logger TODAY!
> http://p.sf.net/sfu/arcsisghtdev2dev
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>





From thiagocmartinsc at gmail.com  Sat Oct  8 23:06:53 2011
From: thiagocmartinsc at gmail.com (=?ISO-2022-JP?B?TWFydGlueCAtIBskQiU4JSchPCVgJTobKEI=?=)
Date: Sat, 8 Oct 2011 20:06:53 -0300
Subject: [Bitcoin-development] Help wanted: translations
In-Reply-To: <CABsx9T2eCpxqzbd0PmWJxCDFLHwOix2BOYp+APQGMZYh_O+R4g@mail.gmail.com>
References: <CABsx9T2eCpxqzbd0PmWJxCDFLHwOix2BOYp+APQGMZYh_O+R4g@mail.gmail.com>
Message-ID: <CAJSM8J0h9tL4ydnhsPSHCnGa5bE=Sk5A5OPHXBmDNqETWhkkfg@mail.gmail.com>

Hi!

 I can translate it to Brazilian Portuguese.

Best,
Thiago

On 8 October 2011 18:13, Gavin Andresen <gavinandresen at gmail.com> wrote:

> Reposting here from the forums:
>
> Good news: I'm just about to get a Bitcoin-Qt version 0.5 Release
> Candidate 1 out, with a much-improved GUI.
>
> Bad news: all the translations for the old wxWidgets Bitcoin are
> obsolete, and the process for making translations is different.
>
> Is anybody willing to write new translations?  Here's what you'll need to
> know:
>
> Three translations already exist: de nl and ru.
> Translations are stored in ".ts" files in the src/qt/locale folder
> The 'QT Linguist' tool can be used to create translations
> ... or maybe an online tool like Transifex could/should be used to
> crowd-source the work
>
> And is anybody willing to take the job of coordinating translation
> efforts, figuring out if Transifex is a good tool to use, and writing
> some documentation to make it easy for people to create and submit new
> translations?
>
>
> References:
>  https://github.com/bitcoin/bitcoin/blob/master/src/qt/locale
>  http://doc.qt.nokia.com/latest/linguist-manual.html
>  http://www.transifex.net/
>
> --
> --
> Gavin Andresen
>
>
> ------------------------------------------------------------------------------
> All of the data generated in your IT infrastructure is seriously valuable.
> Why? It contains a definitive record of application performance, security
> threats, fraudulent activity, and more. Splunk takes this data and makes
> sense of it. IT sense. And common sense.
> http://p.sf.net/sfu/splunk-d2dcopy2
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111008/f3183ea8/attachment.html>

From luke at dashjr.org  Sat Oct  8 23:12:31 2011
From: luke at dashjr.org (Luke-Jr)
Date: Sat, 8 Oct 2011 19:12:31 -0400
Subject: [Bitcoin-development] Help wanted: translations
In-Reply-To: <CABsx9T2eCpxqzbd0PmWJxCDFLHwOix2BOYp+APQGMZYh_O+R4g@mail.gmail.com>
References: <CABsx9T2eCpxqzbd0PmWJxCDFLHwOix2BOYp+APQGMZYh_O+R4g@mail.gmail.com>
Message-ID: <201110081912.33356.luke@dashjr.org>

Please at least get Coinbaser merged for 0.5. It has had a lot of testing on 
Eligius for months, a landslide of support for the new JSON-RPC method (as 
requested), and I have even gone to the effort to document it. As I will no 
longer be using bitcoind for Eligius soon, I have little incentive to 
maintain/rebase coinbaser across a 0.6 development period.



From mcqueenorama at gmail.com  Sun Oct  9 15:58:45 2011
From: mcqueenorama at gmail.com (Brian McQueen)
Date: Sun, 9 Oct 2011 08:58:45 -0700
Subject: [Bitcoin-development] New Project Discussion
Message-ID: <CAPfzCrQ04iDXGm6yc0B+WGvFELWM7_isD9f5QqOCQkhu4tOp5g@mail.gmail.com>

I have a proposal and design for a new project built on bitcoin.
Where should I post my initial proposal and design to start a
discussion?  Its of interest to bitcoin folks and a wide range of
others.  Its totally cool and a first-of-its-kind and I want to start
discussing it.  I'd like to discuss it on this list if its
appropriate.  Its entirely built on bitcoind, so I need your comments.

B

-- 
Make a Small Loan, Make a Big Difference - Check out Kiva.org to Learn How!



From luke at dashjr.org  Mon Oct 10 04:02:38 2011
From: luke at dashjr.org (Luke-Jr)
Date: Mon, 10 Oct 2011 00:02:38 -0400
Subject: [Bitcoin-development] Help wanted: translations
In-Reply-To: <201110081912.33356.luke@dashjr.org>
References: <CABsx9T2eCpxqzbd0PmWJxCDFLHwOix2BOYp+APQGMZYh_O+R4g@mail.gmail.com>
	<201110081912.33356.luke@dashjr.org>
Message-ID: <201110100002.40168.luke@dashjr.org>

On Saturday, October 08, 2011 7:12:31 PM Luke-Jr wrote:
> Please at least get Coinbaser merged for 0.5. It has had a lot of testing
> on Eligius for months, a landslide of support for the new JSON-RPC method
> (as requested), and I have even gone to the effort to document it. As I
> will no longer be using bitcoind for Eligius soon, I have little incentive
> to maintain/rebase coinbaser across a 0.6 development period.

FWIW, Gavin's IRC response more or less amounts to being unwilling to merge 
this even though it was ready, tested, and even fulfilled his original request 
for community support for the new JSON-RPC call, all long before he announced 
the feature freeze on 0.5... hopefully it'll get merged to 0.6 git before it 
needs a rebase. :/



From mike at plan99.net  Mon Oct 10 09:22:28 2011
From: mike at plan99.net (Mike Hearn)
Date: Mon, 10 Oct 2011 11:22:28 +0200
Subject: [Bitcoin-development] Help wanted: translations
In-Reply-To: <201110081912.33356.luke@dashjr.org>
References: <CABsx9T2eCpxqzbd0PmWJxCDFLHwOix2BOYp+APQGMZYh_O+R4g@mail.gmail.com>
	<201110081912.33356.luke@dashjr.org>
Message-ID: <CANEZrP1tyxE2inhg2adJHTQTxgNmsB30L8c7874CLZUmHyKYAw@mail.gmail.com>

On Sun, Oct 9, 2011 at 1:12 AM, Luke-Jr <luke at dashjr.org> wrote:
> As I will no longer be using bitcoind for Eligius soon

What will you be using instead? Isn't bitcoind a requirement for running a
pool?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111010/43718ec8/attachment.html>

From luke at dashjr.org  Mon Oct 10 13:05:56 2011
From: luke at dashjr.org (Luke-Jr)
Date: Mon, 10 Oct 2011 09:05:56 -0400
Subject: [Bitcoin-development] Help wanted: translations
In-Reply-To: <CANEZrP1tyxE2inhg2adJHTQTxgNmsB30L8c7874CLZUmHyKYAw@mail.gmail.com>
References: <CABsx9T2eCpxqzbd0PmWJxCDFLHwOix2BOYp+APQGMZYh_O+R4g@mail.gmail.com>
	<201110081912.33356.luke@dashjr.org>
	<CANEZrP1tyxE2inhg2adJHTQTxgNmsB30L8c7874CLZUmHyKYAw@mail.gmail.com>
Message-ID: <201110100905.58725.luke@dashjr.org>

On Monday, October 10, 2011 5:22:28 AM Mike Hearn wrote:
> On Sun, Oct 9, 2011 at 1:12 AM, Luke-Jr <luke at dashjr.org> wrote:
> > As I will no longer be using bitcoind for Eligius soon
> 
> What will you be using instead? Isn't bitcoind a requirement for running a
> pool?

Writing some custom software designed to more efficiently create work.
To clarify, bitcoind will still serve the purpose of peering with external 
nodes and picking out valid transactions to be accepted into blocks; it just 
won't be involved in the primary operations of the pool.



From mike at plan99.net  Mon Oct 10 13:18:07 2011
From: mike at plan99.net (Mike Hearn)
Date: Mon, 10 Oct 2011 15:18:07 +0200
Subject: [Bitcoin-development] Help wanted: translations
In-Reply-To: <201110100905.58725.luke@dashjr.org>
References: <CABsx9T2eCpxqzbd0PmWJxCDFLHwOix2BOYp+APQGMZYh_O+R4g@mail.gmail.com>
	<201110081912.33356.luke@dashjr.org>
	<CANEZrP1tyxE2inhg2adJHTQTxgNmsB30L8c7874CLZUmHyKYAw@mail.gmail.com>
	<201110100905.58725.luke@dashjr.org>
Message-ID: <CANEZrP2wyw+951SJxDJyZ0rLNA9UvRJ9a+B7=-jui-w+A0GOWA@mail.gmail.com>

>
> > > As I will no longer be using bitcoind for Eligius soon
> >
> > What will you be using instead? Isn't bitcoind a requirement for running
> a
> > pool?
>
> Writing some custom software designed to more efficiently create work.
> To clarify, bitcoind will still serve the purpose of peering with external
> nodes and picking out valid transactions to be accepted into blocks; it
> just
> won't be involved in the primary operations of the pool.
>

Ah, I see. Sounds a bit like the direction Steve is going with poolserverj.
So your custom software would handle incrementing the extraNonce,
recalculating the merkle tree/root, and so on?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111010/c1609a96/attachment.html>

From luke at dashjr.org  Mon Oct 10 14:11:48 2011
From: luke at dashjr.org (Luke-Jr)
Date: Mon, 10 Oct 2011 10:11:48 -0400
Subject: [Bitcoin-development] Help wanted: translations
In-Reply-To: <CANEZrP2wyw+951SJxDJyZ0rLNA9UvRJ9a+B7=-jui-w+A0GOWA@mail.gmail.com>
References: <CABsx9T2eCpxqzbd0PmWJxCDFLHwOix2BOYp+APQGMZYh_O+R4g@mail.gmail.com>
	<201110100905.58725.luke@dashjr.org>
	<CANEZrP2wyw+951SJxDJyZ0rLNA9UvRJ9a+B7=-jui-w+A0GOWA@mail.gmail.com>
Message-ID: <201110101011.50597.luke@dashjr.org>

On Monday, October 10, 2011 9:18:07 AM Mike Hearn wrote:
> > > > As I will no longer be using bitcoind for Eligius soon
> > > 
> > > What will you be using instead? Isn't bitcoind a requirement for
> > > running
> > 
> > a
> > 
> > > pool?
> > 
> > Writing some custom software designed to more efficiently create work.
> > To clarify, bitcoind will still serve the purpose of peering with
> > external nodes and picking out valid transactions to be accepted into
> > blocks; it just
> > won't be involved in the primary operations of the pool.
> 
> Ah, I see. Sounds a bit like the direction Steve is going with poolserverj.
> So your custom software would handle incrementing the extraNonce,
> recalculating the merkle tree/root, and so on?

Yes, does that already. Hard part right now is implementing a stateless TCP/IP 
"stack" so it can ignore DDoS sanely.



From gavinandresen at gmail.com  Mon Oct 10 16:32:41 2011
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Mon, 10 Oct 2011 12:32:41 -0400
Subject: [Bitcoin-development] Please help test 0.5 release candidate 1
Message-ID: <CABsx9T244BVwA2q5pBA4=9U=chsWvMUQ+s02NV62knrNoK1OgQ@mail.gmail.com>

Reposting from the forums:
  https://bitcointalk.org/index.php?topic=47586

I just tagged the git tree "v0.5.0rc1". If you are able, please
compile and help test.

See the INSTALL file at the top of the source tree for instructions on
compiling. Binary releases for at least unix and mac should be
available in the next day or two (there is a show-stopper bug on
Windows, and we could use help from people familiar with
cross-compiling using mingw to update the Windows build process).

Major bugs you should be aware of:

Wallet does not relock on Win32

Major changes from version 0.4:

Switched from wxWidgets for the GUI to Qt, using Wladimir J. van der
Laan's bitcoin-qt. Why? We didn't have any wxWidgets programmers
contributing fixes or improvements.

New JSON-RPC commands:

getmemorypool : alternative to 'getwork' that provides everything
needed to construct a block with a custom generation transaction.
listsinceblock : Get all transactions in blocks since block [blockid]
signmessage/verifymessage : sign/verify a message with a wallet
public/private keypair

Deprecated JSON-RPC features:
'midstate' data item from getwork requests

Deprecated JSON-RPC commands that have been REMOVED:
setlabel
getlabel
getaddressesbylabel
getamountreceived
getallreceived
getreceivedbylabel
listreceivedbylabel

Run: git shortlog --no-merges v0.4.0..
... to get a complete list of changes, and thanks to everybody who is
contributing!


-- 
--
Gavin Andresen



From luke at dashjr.org  Mon Oct 10 18:30:45 2011
From: luke at dashjr.org (Luke-Jr)
Date: Mon, 10 Oct 2011 14:30:45 -0400
Subject: [Bitcoin-development]  Please help test 0.4.1 release candidate 1
Message-ID: <201110101430.47698.luke@dashjr.org>

Reposting from the forums:
  https://bitcointalk.org/index.php?topic=47624

Following Gavin tagging 0.5rc1, I have tagged the stable git tree "v0.4.1rc1". 
If you are able, please compile and help test.

See the doc/build-*.txt files in the source tree for instructions on 
compiling. Binary releases for at least unix and mac will be available only if 
someone steps up to the task.

There are no major changes from version 0.4.0, only bugfixes.

None of the features from 0.5 are supported, only those in 0.4.

Run: git shortlog --no-merges v0.4.0..
... to get a complete list of changes, and thanks to everybody who is 
contributing!



From clopez at igalia.com  Mon Oct 10 21:54:22 2011
From: clopez at igalia.com (Carlos Alberto Lopez Perez)
Date: Mon, 10 Oct 2011 23:54:22 +0200
Subject: [Bitcoin-development] Please help test 0.5 release candidate 1
In-Reply-To: <CABsx9T244BVwA2q5pBA4=9U=chsWvMUQ+s02NV62knrNoK1OgQ@mail.gmail.com>
References: <CABsx9T244BVwA2q5pBA4=9U=chsWvMUQ+s02NV62knrNoK1OgQ@mail.gmail.com>
Message-ID: <4E93698E.1030809@igalia.com>

On 10/10/11 18:32, Gavin Andresen wrote:
> I just tagged the git tree "v0.5.0rc1". If you are able, please
> compile and help test.
> 
Compiled on Debian and running it :) I tested to encrypt my wallet
(coming from v0.3) and changed the password a couple of times without
problems.

> Switched from wxWidgets for the GUI to Qt, using Wladimir J. van der
> Laan's bitcoin-qt. Why? We didn't have any wxWidgets programmers
> contributing fixes or improvements

The new GUI looks nicer and more stylish than previous one. I am also
liking a lot the notifications and the system tray icon on the status bar.


Good work!

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 262 bytes
Desc: OpenPGP digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111010/9ff65249/attachment.sig>

From gavinandresen at gmail.com  Thu Oct 13 13:32:48 2011
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Thu, 13 Oct 2011 09:32:48 -0400
Subject: [Bitcoin-development] State of Bitcoin Development: October Brain
	Dump
Message-ID: <CABsx9T18uavGck3oCj=wkm3fe==N9DOAM+xN21+L8uS=sHb_kw@mail.gmail.com>

In the spirit of open communication, I thought I'd try doing a monthly
"what's up" with bitcoin development. Here's what's on my radar:

? Wladimir agreed to help pull patches, especially Qt-GUI-related
patches, and is now part of the core dev team (Wladimir did the bulk
of the work on the new Qt-based GUI).

? Matt and Wladimir will be working on 0.5 release candidate 1
binaries and an updated release process to either ship the Qt
libraries or statically link against Qt; the goal is to have them
ready this weekend.

? Network stability and wallet security are still my top concerns;
start-up experience for new users (the long wait to download the block
chain) is next on my list.

? Amir's Bitcoin Improvement Process proposal hasn't been getting the
attention it deserves; I'm just as guilty as anybody, I suppose we're
all very busy. Helping improve it and writing some BIPs is high on my
priority list.

? I've setup a public-write-only
bitcoin-security at lists.sourceforge.net mailing list to be used as an
official way to report and then discuss potential security or
denial-of-service vulnerabilities in the bitcoin protocol, and invited
the following people to participate:  Amir Taaki, Mike Hearn, Stefan
Thomas, Nils Schneider, Pieter Wuille, Jeff Garzi and myself.


Stuff I've been working on or plan to be working on soon; let me know
if you are able to take on any of these, there are too many things on
my TODO list:

? Implementing/experimenting: multi-signature transactions and using
OP_EVAL and a new type of bitcoin address to create 'always secure' or
'always backed up' wallets.

? Write BIPs proposing:  OP_EVAL.  'standard' multi-signature
transactions. Maybe an informational BIP proposing how to roll out
upgrades in general.

? Denial-of-service detection/prevention (see the DoSorphans pull
request). It would be really nice if somebody with experience
simulating network behavior would take this over...

? Cross-platform testing infrastructure. I've made good progress on a
Twisted-based tool, but still have a lot to do.

? Tighten up block-time rules to fix the potential "timejacking" attack.

? Work on 'discouraging' blocks/transactions to punish
bad-for-the-common-good-but-good-for-me behaviors from miners or
nodes.

? Get back to work on headers-only-for-initial-download, so initial
startup experience is better for people.


Ongoing longer-term:

??Rethink/rework transaction fees; give both miners and clients more
flexibility to create a market instead of magic hard-coded constants.

? Organization; many things would be much easier if there was a
non-profit organization like the Tor Project to pay core developers,
testers, a PR person, pay for the Jenkins nightly build server, etc
etc etc.


-- 
--
Gavin Andresen



From luke at dashjr.org  Thu Oct 13 13:38:32 2011
From: luke at dashjr.org (Luke-Jr)
Date: Thu, 13 Oct 2011 09:38:32 -0400
Subject: [Bitcoin-development] State of Bitcoin Development: October
	Brain Dump
In-Reply-To: <CABsx9T18uavGck3oCj=wkm3fe==N9DOAM+xN21+L8uS=sHb_kw@mail.gmail.com>
References: <CABsx9T18uavGck3oCj=wkm3fe==N9DOAM+xN21+L8uS=sHb_kw@mail.gmail.com>
Message-ID: <201110130938.35014.luke@dashjr.org>

On Thursday, October 13, 2011 9:32:48 AM Gavin Andresen wrote:
> ? Tighten up block-time rules to fix the potential "timejacking" attack.

Once again, this does not fix anything (they're already strict enough for the 
2-week window), and just creates new problems.

> ? Work on 'discouraging' blocks/transactions to punish
> bad-for-the-common-good-but-good-for-me behaviors from miners or
> nodes.

Flawed concept. Only even potentially useful for extreme cases (ie, a miner 
intentionally making lots of 1 MB blocks of junk).




From luke at dashjr.org  Fri Oct 14 07:10:26 2011
From: luke at dashjr.org (Luke-Jr)
Date: Fri, 14 Oct 2011 03:10:26 -0400
Subject: [Bitcoin-development] Please help test 0.5 release candidate 1
In-Reply-To: <CABsx9T244BVwA2q5pBA4=9U=chsWvMUQ+s02NV62knrNoK1OgQ@mail.gmail.com>
References: <CABsx9T244BVwA2q5pBA4=9U=chsWvMUQ+s02NV62knrNoK1OgQ@mail.gmail.com>
Message-ID: <201110140310.28433.luke@dashjr.org>

Since you guys probably won't notice otherwise...
Got some 0.5 binaries here:
https://bitcointalk.org/index.php?topic=47586.msg573675#msg573675



From mcqueenorama at gmail.com  Sun Oct 16 14:01:46 2011
From: mcqueenorama at gmail.com (Brian McQueen)
Date: Sun, 16 Oct 2011 07:01:46 -0700
Subject: [Bitcoin-development] Cool New Bitcoin Proj
Message-ID: <CAPfzCrT3J5RPiffzb5ruRy41kLbkQdRWdsr10oDyVxnKAf939g@mail.gmail.com>

Its cool, with both cryptography and bitcoin, its also an internet first.
Here's the idea: file's that go away and then come back later.
Realistically, the first version of this project needs to be files
that get encrypted, but can't be decrypted until a particular future
date - time-released cryptography.

Here's the simple demonstration of the concept, which is known to be
inadequate, but it demonstrates the time-released cryptography
concept.  The true proposed solution is a P2P architecture shown
later, but first this simple model demonstrates the idea.  Cryptoclock
provides a list of unique public keys on a calendar, one for each day
out into the future.  Each day the hosting site releases the
associated private key for the current day, allowing all files
encrypted with the associated public key to be decrypted.  In effect,
files would be popping open each day when the key of the day is
released.  Maybe wikileaks documents pop open, or stashed bitcoin keys
so the stashed money can be retrieved.

Simple Public Cryptoclock Model:

1) Choose the public key for Jan 12, 2012
2) Encrypt your file with that public key
3) Erase your clear copy of file

At this point the file is locked up and nobody can get at it.  If
people ask for the data, you can't get it.  Ideally nobody can.  Its
not available.

4) Wait until Jan, 12, 2012
5) Get the key of the day from the cryptoclock - maybe it goes out via twitter
6) Unlock your file - now you've got your data back

There are problems with this, that can be discussed separately, but
its known to be inadequate. At a minimum, its not cool that the
private key is delivered to the world, because the file should not pop
open to everybody who has a copy - just for the owner.  Also, the
hosting site has a bad problem with securing the private keys, and
actually must be able to deny having them at all, in order to be free
of persecution and to be trusted.  The keys must be gone - they must
be unavailable, not just on some USB stick in a box.

P2P Solution:

First stab at a general solution.  This solves two problems, the
secret key will return automatically to the file owner, and the secret
key will truly be unavailable.

* Key Sharding

Assume P2P network of special cryptoclock nodes built on bitcoind, and
the transactions have to be of the contract variety, to eliminate the
risk of distributing the key.  Shards will NOT be put on the block
chain but will be distributed via http.  Shard holders will be
compensated for holding the shards when the key is rebuilt.

1) User1 has a file to hide.  User1 puts it into node1 of the cryptoclock.
2) Node1 produces a public/private keypair (pb1, pv1)
3) Node1 encrypts the file with public key 1 (pb1) and wipes out the clear file
4) Node1 shards private key1 (pk1)
5) Node1 encrypts and distributes the shards to the P2P network as follows
5.1) Node1 sends a small bitcoin deposit txn to Node2 with a URL
message in the script and a random number (rn1)
5.2) Node2 issues a GET to the URL with the signed rn1 to node1
5.4) Node1 receives the GET and verifies the signature on rn1 and
returns the shard and a 200 to node2

This mechanism will distribute the private key in pieces to any number
of nodes, known only by their bitcoin addresses.  Repeat this for each
shard of the private key.  The number of shards and copies is
proportional to the security of the storage - the more you pay, the
more scattered is the key.  There should be many shards, and each
shard should have many copies.

The transaction will have have to go from node1 to node2, triggering
the retrieval GET, and it must be done in a deposit style so if the
node is not available the bc will be returned as in the case of the
Deposit example on the Contracts wiki page.

* Rebuilding the key

A future-dated transaction needs to be created to get the keys to
return to the key creator on the target date, and they must be crafted
in such a way that the shard-holders are paid at the time the keyshard
is reclaimed, producing an incentive to stay online and keep the
keyshards in the network.

The general model (bitcoin txn and http request) will also make the
key return and reassemble itself in the owners cryptoclock client on
the future date, if the future transactions are triggered reliably. A
future transaction must be made right at the start, with a locktime
set to the target date.  On the target date the shard holder's
client's transaction script is executed, which will trigger node2 to
take action on the initial deposit transaction.  Node2 will have to
notify node1 that its ready for a GET, and node1 will issue a GET to
reclaim the keyshard.   Another small deposit-style transaction to
node 1 will do this perfectly, in the same style as the first deposit
transaction.

* Cool Features

 1) Participants are paid to participate and its a natural fit - its built-in.
 2) The key returns automatically the file owner on the desired date
- it reassembles itself.
 3) Pay more for more surety - more shards for more money.

* Peer Discovery

I think keys should be distributed to bitcoin addresses, which in
general are not available to the nodes, so peer discovery needs to be
fleshed out.

This needs to be fleshed out considerably.  A peer discovery mechanism
must be produced.  Bitcoin addresses could be pulled from the block
chain, or there can be an irc channel for address discovery, or users
could establish their own trusted network of associates.

* Block Chain Usage

This model uses bitcoin in a legitimate way, using real bitcoin
transactions and putting the bitcoin engine to work and leveraging its
financial engine to establish a reasonable expense/reward system.  The
block chain has only one extra, short message for the  initial
transaction.  All application data is transacted outside the block
chain and stored outside the block chain.



From gavinandresen at gmail.com  Tue Oct 18 19:17:43 2011
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Tue, 18 Oct 2011 15:17:43 -0400
Subject: [Bitcoin-development] BIP process
Message-ID: <CABsx9T0xjz2bO0PKX7VBka_j_MpGky9scHhkyM=b9MbtPAwx=A@mail.gmail.com>

Amir started the "get more formal about changes to bitcoin" ball
rolling by creating BIP 0001, starting from the Python "PEP" /
BitTorrent "BEP" processes:
  https://en.bitcoin.it/w/index.php?title=BIP_0001

The idea is to use BIPs for changes that may or will affect every
bitcoin implementation (not to use them for proposed changes to one
particular implementation).

I'd like to propose some minor changes to the process:

? I propose that BIPs be wiki pages, with a social convention that the
Author gets final word if any editing wars break out.

? If he's willing, I propose that Amir take the role of BIP editor.

? I think bitcoin is still too small to have a specialized
"bitcoin-ideas" mailing list; I propose that new potential BIPs be
discussed either here or on the bitcoin-dev mailing list.

What do y'all think?

-- 
--
Gavin Andresen



From nils at nilsschneider.net  Tue Oct 18 21:26:22 2011
From: nils at nilsschneider.net (Nils Schneider)
Date: Tue, 18 Oct 2011 23:26:22 +0200
Subject: [Bitcoin-development] BIP process
In-Reply-To: <CABsx9T0xjz2bO0PKX7VBka_j_MpGky9scHhkyM=b9MbtPAwx=A@mail.gmail.com>
References: <CABsx9T0xjz2bO0PKX7VBka_j_MpGky9scHhkyM=b9MbtPAwx=A@mail.gmail.com>
Message-ID: <4E9DEEFE.9040301@nilsschneider.net>


> ? I propose that BIPs be wiki pages, with a social convention that the
> Author gets final word if any editing wars break out.

That's a good idea. What about using GitHub's Wiki feature for BIPs?
They support MarkDown which is easy to read in text editors so we could
someday create a repo with all finalized BIPs. That's a lot easier than
importing a mediawiki dump. The last time en.bitcoin.it went down I
tried to setup a static mirror and that was nearly impossible without a
full LAMP stack. Also, BIPs should only contain images when absolutely
necessary.

> ? If he's willing, I propose that Amir take the role of BIP editor.

ack

> ? I think bitcoin is still too small to have a specialized
> "bitcoin-ideas" mailing list; I propose that new potential BIPs be
> discussed either here or on the bitcoin-dev mailing list.

ack



From ampedal at gmail.com  Thu Oct 20 05:02:17 2011
From: ampedal at gmail.com (Alex Waters)
Date: Thu, 20 Oct 2011 01:02:17 -0400
Subject: [Bitcoin-development] BIP process
In-Reply-To: <CABsx9T0xjz2bO0PKX7VBka_j_MpGky9scHhkyM=b9MbtPAwx=A@mail.gmail.com>
References: <CABsx9T0xjz2bO0PKX7VBka_j_MpGky9scHhkyM=b9MbtPAwx=A@mail.gmail.com>
Message-ID: <CAL0fb61d0zd94qYpKT8hDfE-QiTWN7K510O1e4Gm5o=PjNWFwg@mail.gmail.com>

>
>
> ? I propose that BIPs be wiki pages, with a social convention that the
> Author gets final word if any editing wars break out.


ACK

>

? If he's willing, I propose that Amir take the role of BIP editor.
>
> ACK


> ? I think bitcoin is still too small to have a specialized
> "bitcoin-ideas" mailing list; I propose that new potential BIPs be
> discussed either here or on the bitcoin-dev mailing list.
>

ACK

As for what Nils mentioned on using GitHub's Wiki feature, Gavin seems to
have started a few proposals at
https://github.com/gavinandresen/bitcoin-git/wiki. I think this is the right
direction to head in, and a composite list of similar proposals could be
maintained on their own repository (to maintain separation from the core
Bitcoin repo.)

-Alex
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111020/2efa61f4/attachment.html>

From decker.christian at gmail.com  Thu Oct 20 11:27:08 2011
From: decker.christian at gmail.com (Christian Decker)
Date: Thu, 20 Oct 2011 13:27:08 +0200
Subject: [Bitcoin-development] BIP process
In-Reply-To: <CAL0fb61d0zd94qYpKT8hDfE-QiTWN7K510O1e4Gm5o=PjNWFwg@mail.gmail.com>
References: <CABsx9T0xjz2bO0PKX7VBka_j_MpGky9scHhkyM=b9MbtPAwx=A@mail.gmail.com>
	<CAL0fb61d0zd94qYpKT8hDfE-QiTWN7K510O1e4Gm5o=PjNWFwg@mail.gmail.com>
Message-ID: <CALxbBHWi88HkrmR3nBA1zoMzMd3PaFTTBwu_VM2etc4S3HYvDA@mail.gmail.com>

On Thu, Oct 20, 2011 at 7:02 AM, Alex Waters <ampedal at gmail.com> wrote:

>
>> ? I propose that BIPs be wiki pages, with a social convention that the
>> Author gets final word if any editing wars break out.
>
>
> ACK
>
Does it have to be wiki pages if we're going through an editorial process
anyway, and there will be few who can actually edit the pages directly? I'd
go for simple HTML documents in a repository.

>
>
> ? If he's willing, I propose that Amir take the role of BIP editor.
>>
>> ACK
>
ACK

>
>
>> ? I think bitcoin is still too small to have a specialized
>> "bitcoin-ideas" mailing list; I propose that new potential BIPs be
>> discussed either here or on the bitcoin-dev mailing list.
>>
>
> ACK
>
Definitely. I don't think too many requests will come right away, and by
posting them here we make sure that the most knowledgeable people are there
to check and improve what might eventually end up in the clients.

>
> As for what Nils mentioned on using GitHub's Wiki feature, Gavin seems to
> have started a few proposals at
> https://github.com/gavinandresen/bitcoin-git/wiki. I think this is the
> right direction to head in, and a composite list of similar proposals could
> be maintained on their own repository (to maintain separation from the core
> Bitcoin repo.)
>
> -Alex
>
>
> ------------------------------------------------------------------------------
> The demand for IT networking professionals continues to grow, and the
> demand for specialized networking skills is growing even more rapidly.
> Take a complimentary Learning at Ciosco Self-Assessment and learn
> about Cisco certifications, training, and career opportunities.
> http://p.sf.net/sfu/cisco-dev2dev
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111020/8c338641/attachment.html>

From nils at nilsschneider.net  Sat Oct 22 10:51:15 2011
From: nils at nilsschneider.net (Nils Schneider)
Date: Sat, 22 Oct 2011 12:51:15 +0200
Subject: [Bitcoin-development] Help wanted: translations
In-Reply-To: <CABsx9T2eCpxqzbd0PmWJxCDFLHwOix2BOYp+APQGMZYh_O+R4g@mail.gmail.com>
References: <CABsx9T2eCpxqzbd0PmWJxCDFLHwOix2BOYp+APQGMZYh_O+R4g@mail.gmail.com>
Message-ID: <4EA2A023.5000603@nilsschneider.net>

> And is anybody willing to take the job of coordinating translation
> efforts, figuring out if Transifex is a good tool to use, and writing
> some documentation to make it easy for people to create and submit new
> translations?

I have exported all .ts to transifex.

https://www.transifex.net/projects/p/bitcoin/resource/tx/

I'm now trying to figure out how to use it but it looks like

tx pull && git add src/qt/locale/* && git commit src/qt/locale/ && git push

will be all that's needed to push translation updates from transifex to
github.



From operator at bitminter.com  Sat Oct 22 12:26:52 2011
From: operator at bitminter.com (Geir Harald Hansen)
Date: Sat, 22 Oct 2011 14:26:52 +0200
Subject: [Bitcoin-development] Help wanted: translations
In-Reply-To: <4EA2A023.5000603@nilsschneider.net>
References: <CABsx9T2eCpxqzbd0PmWJxCDFLHwOix2BOYp+APQGMZYh_O+R4g@mail.gmail.com>
	<4EA2A023.5000603@nilsschneider.net>
Message-ID: <4EA2B68C.3050901@bitminter.com>

On 22.10.2011 12:51, Nils Schneider wrote:
>> And is anybody willing to take the job of coordinating translation
>> efforts, figuring out if Transifex is a good tool to use, and writing
>> some documentation to make it easy for people to create and submit new
>> translations?
> 
> I have exported all .ts to transifex.
> 
> https://www.transifex.net/projects/p/bitcoin/resource/tx/

If you add Norwegian Bokm?l, I can do that one. Language code "nb".

Regards,
Geir Harald Hansen




From nils at nilsschneider.net  Sat Oct 22 13:28:30 2011
From: nils at nilsschneider.net (Nils Schneider)
Date: Sat, 22 Oct 2011 15:28:30 +0200
Subject: [Bitcoin-development] Help wanted: translations
In-Reply-To: <4EA2B68C.3050901@bitminter.com>
References: <CABsx9T2eCpxqzbd0PmWJxCDFLHwOix2BOYp+APQGMZYh_O+R4g@mail.gmail.com>
	<4EA2A023.5000603@nilsschneider.net>
	<4EA2B68C.3050901@bitminter.com>
Message-ID: <4EA2C4FE.2020609@nilsschneider.net>

I think it's possible to add it yourself. Just click on "add translation"

On 22.10.2011 14:26, Geir Harald Hansen wrote:
> On 22.10.2011 12:51, Nils Schneider wrote:
>>> And is anybody willing to take the job of coordinating translation
>>> efforts, figuring out if Transifex is a good tool to use, and writing
>>> some documentation to make it easy for people to create and submit new
>>> translations?
>>
>> I have exported all .ts to transifex.
>>
>> https://www.transifex.net/projects/p/bitcoin/resource/tx/
> 
> If you add Norwegian Bokm?l, I can do that one. Language code "nb".
> 
> Regards,
> Geir Harald Hansen
> 
> 
> ------------------------------------------------------------------------------
> The demand for IT networking professionals continues to grow, and the
> demand for specialized networking skills is growing even more rapidly.
> Take a complimentary Learning at Cisco Self-Assessment and learn 
> about Cisco certifications, training, and career opportunities. 
> http://p.sf.net/sfu/cisco-dev2dev
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 




From operator at bitminter.com  Sat Oct 22 16:14:04 2011
From: operator at bitminter.com (Geir Harald Hansen)
Date: Sat, 22 Oct 2011 18:14:04 +0200
Subject: [Bitcoin-development] Help wanted: translations
In-Reply-To: <4EA2C4FE.2020609@nilsschneider.net>
References: <CABsx9T2eCpxqzbd0PmWJxCDFLHwOix2BOYp+APQGMZYh_O+R4g@mail.gmail.com>
	<4EA2A023.5000603@nilsschneider.net> <4EA2B68C.3050901@bitminter.com>
	<4EA2C4FE.2020609@nilsschneider.net>
Message-ID: <4EA2EBCC.9000207@bitminter.com>

What do you know, it worked. Finished.

Once again Norway finishes ahead of Sweden. :P

By the way, I had to translate some of the exact same strings 2-3 times.
That's something you may want to improve on.

On 22.10.2011 15:28, Nils Schneider wrote:
> I think it's possible to add it yourself. Just click on "add translation"
> 
> On 22.10.2011 14:26, Geir Harald Hansen wrote:
>> On 22.10.2011 12:51, Nils Schneider wrote:
>>>> And is anybody willing to take the job of coordinating translation
>>>> efforts, figuring out if Transifex is a good tool to use, and writing
>>>> some documentation to make it easy for people to create and submit new
>>>> translations?
>>>
>>> I have exported all .ts to transifex.
>>>
>>> https://www.transifex.net/projects/p/bitcoin/resource/tx/
>>
>> If you add Norwegian Bokm?l, I can do that one. Language code "nb".
>>
>> Regards,
>> Geir Harald Hansen
>>
>>
>> ------------------------------------------------------------------------------
>> The demand for IT networking professionals continues to grow, and the
>> demand for specialized networking skills is growing even more rapidly.
>> Take a complimentary Learning at Cisco Self-Assessment and learn 
>> about Cisco certifications, training, and career opportunities. 
>> http://p.sf.net/sfu/cisco-dev2dev
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>
> 
> 
> ------------------------------------------------------------------------------
> The demand for IT networking professionals continues to grow, and the
> demand for specialized networking skills is growing even more rapidly.
> Take a complimentary Learning at Cisco Self-Assessment and learn 
> about Cisco certifications, training, and career opportunities. 
> http://p.sf.net/sfu/cisco-dev2dev
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 





From witchspace81 at gmail.com  Sun Oct 23 09:56:00 2011
From: witchspace81 at gmail.com (John Smith)
Date: Sun, 23 Oct 2011 11:56:00 +0200
Subject: [Bitcoin-development] Fwd: bitcoin scope issue in main.cpp
In-Reply-To: <CA+s+GJBo90gH4pRx7+vnHgy5y6bWF7My69jNj6J-RHw7bBqH8g@mail.gmail.com>
References: <CAMm66_=eqw9VqYrs5kv_i1di1FmDtP8X1dgBH90N0CuVvZswMA@mail.gmail.com>
	<CA+s+GJBo90gH4pRx7+vnHgy5y6bWF7My69jNj6J-RHw7bBqH8g@mail.gmail.com>
Message-ID: <CAJNQ0ssSQ0egHZ8YWFzrGv=LjfWQqV9V7qSeB01Zg2C4-LSZGQ@mail.gmail.com>

FYI
It's in a disabled feature (replacement), so I'm not sure how important this
is, but it doesn't look good.

---------- Forwarded message ----------
From: Dean Gores <dmgores at gmail.com>
Date: Sun, Oct 23, 2011 at 11:15 AM
Subject: bitcoin scope issue in main.cpp
To: laanwj at gmail.com


You have "i" and "output" declared in the same scope in "main.cpp",
AcceptToMemoryPool.  Below is the offending code.

           for (int i = 0; i < vin.size(); i++)
           {
               COutPoint outpoint = vin[i].prevout;
               if (!mapNextTx.count(outpoint) ||
mapNextTx[outpoint].ptx != ptxOld)
                   return false;
           }


Cheers,
Dean Gores
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111023/ef8e48b1/attachment.html>

From theymos at mm.st  Sun Oct 23 20:51:49 2011
From: theymos at mm.st (theymos)
Date: Sun, 23 Oct 2011 15:51:49 -0500
Subject: [Bitcoin-development] Fwd: bitcoin scope issue in main.cpp
In-Reply-To: <CAJNQ0ssSQ0egHZ8YWFzrGv=LjfWQqV9V7qSeB01Zg2C4-LSZGQ@mail.gmail.com>
References: <CAMm66_=eqw9VqYrs5kv_i1di1FmDtP8X1dgBH90N0CuVvZswMA@mail.gmail.com><CA+s+GJBo90gH4pRx7+vnHgy5y6bWF7My69jNj6J-RHw7bBqH8g@mail.gmail.com>
	<CAJNQ0ssSQ0egHZ8YWFzrGv=LjfWQqV9V7qSeB01Zg2C4-LSZGQ@mail.gmail.com>
Message-ID: <1319403109.18333.140660989434537@webmail.messagingengine.com>

It's legal for a scope to define variables with names that conflict with
the names of variables in higher-level scopes.



From witchspace81 at gmail.com  Mon Oct 24 05:02:30 2011
From: witchspace81 at gmail.com (John Smith)
Date: Mon, 24 Oct 2011 07:02:30 +0200
Subject: [Bitcoin-development] Fwd: bitcoin scope issue in main.cpp
In-Reply-To: <1319403109.18333.140660989434537@webmail.messagingengine.com>
References: <CAMm66_=eqw9VqYrs5kv_i1di1FmDtP8X1dgBH90N0CuVvZswMA@mail.gmail.com>
	<CA+s+GJBo90gH4pRx7+vnHgy5y6bWF7My69jNj6J-RHw7bBqH8g@mail.gmail.com>
	<CAJNQ0ssSQ0egHZ8YWFzrGv=LjfWQqV9V7qSeB01Zg2C4-LSZGQ@mail.gmail.com>
	<1319403109.18333.140660989434537@webmail.messagingengine.com>
Message-ID: <CAJNQ0st7H9N-WDx-5R7JxKndPVXDEqTVvr6C20zZJv1UgvnZgg@mail.gmail.com>

Yes, I know that. It compiles.

If we pulled all the 'This is legal in C++' tricks in the bitcoin source it
would be even less maintainable and readable than now. But whatever...

JS

On Sun, Oct 23, 2011 at 10:51 PM, theymos <theymos at mm.st> wrote:

> It's legal for a scope to define variables with names that conflict with
> the names of variables in higher-level scopes.
>
>
> ------------------------------------------------------------------------------
> The demand for IT networking professionals continues to grow, and the
> demand for specialized networking skills is growing even more rapidly.
> Take a complimentary Learning at Cisco Self-Assessment and learn
> about Cisco certifications, training, and career opportunities.
> http://p.sf.net/sfu/cisco-dev2dev
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111024/4a0e7379/attachment.html>

From jan at uos.de  Mon Oct 24 08:29:57 2011
From: jan at uos.de (Jan Vornberger)
Date: Mon, 24 Oct 2011 10:29:57 +0200 (CEST)
Subject: [Bitcoin-development] Determine input addresses of a transaction
Message-ID: <44861.134.106.52.172.1319444997.squirrel@webmail.uni-osnabrueck.de>

Hi there!

As part of my green address endeavor, I'm currently trying to extend the
'gettransaction' call to include an extra field "inputaddresses" which
should return a list of the Bitcoin addresses associated with the inputs
of the transaction.

I understand that this is not generally possible, because of the different
possible structures enabled through the scripting language. But it would
be fine, if this only worked for 'regular' transactions.

So my first shot at this is to go through the inputs of a transaction and
see if the scriptSig field has only two opcodes. If that is the case, I
assume that it is of the structure <sig> <pubKey> and calculate the
Bitcoin address from <pubKey>. The patch for this is here:

https://github.com/javgh/bitcoin/compare/vps_wheezy...showinputaddresses

But then I started to wonder if this is safe. Can this be tricked somehow?
Would it be possible to create a valid transaction which has an input that
has only two opcodes but with an arbitrary pubKey at the second position?
Could someone who has a better grasp on the scripting capabilities comment
on this?

Or alternatively: should I determine the input addresses of a transaction
in a different way? if so, how?

Regards!
Jan



From pieter.wuille at gmail.com  Mon Oct 24 11:09:56 2011
From: pieter.wuille at gmail.com (Pieter Wuille)
Date: Mon, 24 Oct 2011 13:09:56 +0200
Subject: [Bitcoin-development] Determine input addresses of a transaction
In-Reply-To: <44861.134.106.52.172.1319444997.squirrel@webmail.uni-osnabrueck.de>
References: <44861.134.106.52.172.1319444997.squirrel@webmail.uni-osnabrueck.de>
Message-ID: <20111024110955.GC8115@ulyssis.org>

On Mon, Oct 24, 2011 at 10:29:57AM +0200, Jan Vornberger wrote:
> Hi there!
> 
> As part of my green address endeavor, I'm currently trying to extend the
> 'gettransaction' call to include an extra field "inputaddresses" which
> should return a list of the Bitcoin addresses associated with the inputs
> of the transaction.

Bitcoin transactions do not have input addresses - they optionally have addresses
the input coins were last sent to. I understand that being able to have a
'from' address on a transaction is useful in certain cases, but it encourages
using such 'from' addresses to identify transactions - which is imho the wrong
way to go.

As far as your green transactions idea is concerned, maybe we could provide an interface
to mark certain addresses as 'trusted', and have an RPC call to request all incoming
transaction that originate from trusted sources?

-- 
Pieter



From decker.christian at gmail.com  Mon Oct 24 11:24:53 2011
From: decker.christian at gmail.com (Christian Decker)
Date: Mon, 24 Oct 2011 13:24:53 +0200
Subject: [Bitcoin-development] Help wanted: translations
In-Reply-To: <4EA2EBCC.9000207@bitminter.com>
References: <CABsx9T2eCpxqzbd0PmWJxCDFLHwOix2BOYp+APQGMZYh_O+R4g@mail.gmail.com>
	<4EA2A023.5000603@nilsschneider.net> <4EA2B68C.3050901@bitminter.com>
	<4EA2C4FE.2020609@nilsschneider.net> <4EA2EBCC.9000207@bitminter.com>
Message-ID: <CALxbBHWfm_sjhh5kPtm=mbGp17LGzwtY-0+vwvJ4XaQQoJfWLw@mail.gmail.com>

Actually no, the same string may have to be translated in different ways
depending on the context they appear in. That sometimes happens for italian,
and I'm sure it happens in other cases too. Not sure whether this is the
cause for duplicate strings for now, but it might.

Regards,
Chris

On Sat, Oct 22, 2011 at 6:14 PM, Geir Harald Hansen
<operator at bitminter.com>wrote:

> What do you know, it worked. Finished.
>
> Once again Norway finishes ahead of Sweden. :P
>
> By the way, I had to translate some of the exact same strings 2-3 times.
> That's something you may want to improve on.
>
> On 22.10.2011 15:28, Nils Schneider wrote:
> > I think it's possible to add it yourself. Just click on "add translation"
> >
> > On 22.10.2011 14:26, Geir Harald Hansen wrote:
> >> On 22.10.2011 12:51, Nils Schneider wrote:
> >>>> And is anybody willing to take the job of coordinating translation
> >>>> efforts, figuring out if Transifex is a good tool to use, and writing
> >>>> some documentation to make it easy for people to create and submit new
> >>>> translations?
> >>>
> >>> I have exported all .ts to transifex.
> >>>
> >>> https://www.transifex.net/projects/p/bitcoin/resource/tx/
> >>
> >> If you add Norwegian Bokm?l, I can do that one. Language code "nb".
> >>
> >> Regards,
> >> Geir Harald Hansen
> >>
> >>
> >>
> ------------------------------------------------------------------------------
> >> The demand for IT networking professionals continues to grow, and the
> >> demand for specialized networking skills is growing even more rapidly.
> >> Take a complimentary Learning at Cisco Self-Assessment and learn
> >> about Cisco certifications, training, and career opportunities.
> >> http://p.sf.net/sfu/cisco-dev2dev
> >> _______________________________________________
> >> Bitcoin-development mailing list
> >> Bitcoin-development at lists.sourceforge.net
> >> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> >>
> >
> >
> >
> ------------------------------------------------------------------------------
> > The demand for IT networking professionals continues to grow, and the
> > demand for specialized networking skills is growing even more rapidly.
> > Take a complimentary Learning at Cisco Self-Assessment and learn
> > about Cisco certifications, training, and career opportunities.
> > http://p.sf.net/sfu/cisco-dev2dev
> > _______________________________________________
> > Bitcoin-development mailing list
> > Bitcoin-development at lists.sourceforge.net
> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> >
>
>
>
>
> ------------------------------------------------------------------------------
> The demand for IT networking professionals continues to grow, and the
> demand for specialized networking skills is growing even more rapidly.
> Take a complimentary Learning at Cisco Self-Assessment and learn
> about Cisco certifications, training, and career opportunities.
> http://p.sf.net/sfu/cisco-dev2dev
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111024/eb59c4b4/attachment.html>

From zgenjix at yahoo.com  Mon Oct 24 14:31:15 2011
From: zgenjix at yahoo.com (Amir Taaki)
Date: Mon, 24 Oct 2011 07:31:15 -0700 (PDT)
Subject: [Bitcoin-development] Fwd: bitcoin scope issue in main.cpp
In-Reply-To: <CAJNQ0st7H9N-WDx-5R7JxKndPVXDEqTVvr6C20zZJv1UgvnZgg@mail.gmail.com>
References: <CAMm66_=eqw9VqYrs5kv_i1di1FmDtP8X1dgBH90N0CuVvZswMA@mail.gmail.com>
	<CA+s+GJBo90gH4pRx7+vnHgy5y6bWF7My69jNj6J-RHw7bBqH8g@mail.gmail.com>
	<CAJNQ0ssSQ0egHZ8YWFzrGv=LjfWQqV9V7qSeB01Zg2C4-LSZGQ@mail.gmail.com>
	<1319403109.18333.140660989434537@webmail.messagingengine.com>
	<CAJNQ0st7H9N-WDx-5R7JxKndPVXDEqTVvr6C20zZJv1UgvnZgg@mail.gmail.com>
Message-ID: <1319466675.83020.YahooMailNeo@web121003.mail.ne1.yahoo.com>

Hahaha you mean like unitialised variables, inheriting from containers with non-virtual dtors (CScript) and delicious copy pasta coding (PushMessage, bignum and serialize stuff).


No need to worry about that :)



________________________________
From: John Smith <witchspace81 at gmail.com>
To: theymos <theymos at mm.st>
Cc: bitcoin-development at lists.sourceforge.net
Sent: Monday, October 24, 2011 6:02 AM
Subject: Re: [Bitcoin-development] Fwd: bitcoin scope issue in main.cpp



Yes, I know that. It compiles.

If we pulled all the 'This is legal in C++' tricks in the bitcoin source it would be even less maintainable and readable than now. But whatever...

JS


On Sun, Oct 23, 2011 at 10:51 PM, theymos <theymos at mm.st> wrote:

It's legal for a scope to define variables with names that conflict with
>the names of variables in higher-level scopes.
>
>------------------------------------------------------------------------------
>The demand for IT networking professionals continues to grow, and the
>demand for specialized networking skills is growing even more rapidly.
>Take a complimentary Learning at Cisco Self-Assessment and learn
>about Cisco certifications, training, and career opportunities.
>http://p.sf.net/sfu/cisco-dev2dev
>_______________________________________________
>Bitcoin-development mailing list
>Bitcoin-development at lists.sourceforge.net
>https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>

------------------------------------------------------------------------------
The demand for IT networking professionals continues to grow, and the
demand for specialized networking skills is growing even more rapidly.
Take a complimentary Learning at Cisco Self-Assessment and learn 
about Cisco certifications, training, and career opportunities. 
http://p.sf.net/sfu/cisco-dev2dev
_______________________________________________
Bitcoin-development mailing list
Bitcoin-development at lists.sourceforge.net
https://lists.sourceforge.net/lists/listinfo/bitcoin-development
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111024/e435fc5f/attachment.html>

From gavinandresen at gmail.com  Mon Oct 24 14:55:14 2011
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Mon, 24 Oct 2011 10:55:14 -0400
Subject: [Bitcoin-development] Determine input addresses of a transaction
In-Reply-To: <44861.134.106.52.172.1319444997.squirrel@webmail.uni-osnabrueck.de>
References: <44861.134.106.52.172.1319444997.squirrel@webmail.uni-osnabrueck.de>
Message-ID: <CABsx9T2v4uhUdsWEg58Xs2OhOf3ED0Q2LGmkrRpdJDxvVMexdQ@mail.gmail.com>

> So my first shot at this is to go through the inputs of a transaction and
> see if the scriptSig field has only two opcodes. If that is the case, I
> assume that it is of the structure <sig> <pubKey> and calculate the
> Bitcoin address from <pubKey>.
> But then I started to wonder if this is safe. Can this be tricked somehow?

Sure. There are lots of non-standard scriptPubKey scripts that will
validate if given <sig> <pubKey> as input:  a simple OP_NOP would work
(do nothing, then check the top value on the stack and validate if it
is not zero-- and <pubKey> is not zero).

If you assume the client has all previous transactions, then you could
get the transaction input's prevout (from the memory pool or disk) and
then ExtractAddress() from it. That is probably a bad idea for
listtransactions, since fetching all the previous inputs from disk
just so you can check to see if they're 'green' violates the "a
feature shouldn't cost anything if it is not being used" design
principle.

You know, just thinking out loud...

Green addresses could be implemented as a second signature in the
scriptSig.  You'd have to hack your bitcoin client, but you could
generate a transaction that had <greensig> <sig> <pubKey>  ... as the
input instead of <sig> <pubKey>.

The <greensig> will be ignored by old clients.  The transactions is
still considered 'standard'.  But you could teach bitcoin to look for
<greensig> signatures in wallet transactions...

-- 
--
Gavin Andresen



From mike at plan99.net  Mon Oct 24 16:25:41 2011
From: mike at plan99.net (Mike Hearn)
Date: Mon, 24 Oct 2011 18:25:41 +0200
Subject: [Bitcoin-development] Determine input addresses of a transaction
In-Reply-To: <CABsx9T2v4uhUdsWEg58Xs2OhOf3ED0Q2LGmkrRpdJDxvVMexdQ@mail.gmail.com>
References: <44861.134.106.52.172.1319444997.squirrel@webmail.uni-osnabrueck.de>
	<CABsx9T2v4uhUdsWEg58Xs2OhOf3ED0Q2LGmkrRpdJDxvVMexdQ@mail.gmail.com>
Message-ID: <CANEZrP1W3r65t7yW8SOR-MLm-VFw2bqy1HOSEVTPRMiaWpFKYg@mail.gmail.com>

>
> You know, just thinking out loud...
>
> Green addresses could be implemented as a second signature in the
> scriptSig.


I think this would solve one of the other issues I raised about the green
address idea .... you can have some kind of trust aggregator sign the
transactions. Merchants like MtGox that send would create a transaction,
export it, upload it to the trusted authority which can just check IP
address or something to verify it's really coming from MtGox, then sign it
and broadcast it.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111024/3b6aaa06/attachment.html>

From michael at ndrix.org  Mon Oct 24 17:14:09 2011
From: michael at ndrix.org (Michael Hendricks)
Date: Mon, 24 Oct 2011 11:14:09 -0600
Subject: [Bitcoin-development] Determine input addresses of a transaction
In-Reply-To: <CABsx9T2v4uhUdsWEg58Xs2OhOf3ED0Q2LGmkrRpdJDxvVMexdQ@mail.gmail.com>
References: <44861.134.106.52.172.1319444997.squirrel@webmail.uni-osnabrueck.de>
	<CABsx9T2v4uhUdsWEg58Xs2OhOf3ED0Q2LGmkrRpdJDxvVMexdQ@mail.gmail.com>
Message-ID: <CAFHuXub-XSS5zKfCvhuK4GH3MKOaSqsyWT4Px9en+2p7_USG-Q@mail.gmail.com>

On Mon, Oct 24, 2011 at 8:55 AM, Gavin Andresen <gavinandresen at gmail.com>wrote:

> If you assume the client has all previous transactions, then you could
> get the transaction input's prevout (from the memory pool or disk) and
> then ExtractAddress() from it. That is probably a bad idea for
> listtransactions, since fetching all the previous inputs from disk
> just so you can check to see if they're 'green' violates the "a
> feature shouldn't cost anything if it is not being used" design
> principle.
>

Are there current users of gettransaction for whom the performance penalty
would be problematic?  If so, perhaps gettransaction could take an optional
second argument includeinputaddresses which defaults to false.

-- 
Michael
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111024/376c13b2/attachment.html>

From witchspace81 at gmail.com  Mon Oct 24 18:10:54 2011
From: witchspace81 at gmail.com (John Smith)
Date: Mon, 24 Oct 2011 20:10:54 +0200
Subject: [Bitcoin-development] Help wanted: translations
In-Reply-To: <CALxbBHWfm_sjhh5kPtm=mbGp17LGzwtY-0+vwvJ4XaQQoJfWLw@mail.gmail.com>
References: <CABsx9T2eCpxqzbd0PmWJxCDFLHwOix2BOYp+APQGMZYh_O+R4g@mail.gmail.com>
	<4EA2A023.5000603@nilsschneider.net>
	<4EA2B68C.3050901@bitminter.com>
	<4EA2C4FE.2020609@nilsschneider.net>
	<4EA2EBCC.9000207@bitminter.com>
	<CALxbBHWfm_sjhh5kPtm=mbGp17LGzwtY-0+vwvJ4XaQQoJfWLw@mail.gmail.com>
Message-ID: <CAJNQ0svAPqPdr_oWL-D-y3Om2dzFQ+0DS=K=ZEi+7+VVMDHtLw@mail.gmail.com>

Indeed. It could make sense. That's the reason why Qt distinguishes strings
based on context as well as content.

But it could also be nonsense. Can you be more specific as to which strings?

JS

On Mon, Oct 24, 2011 at 1:24 PM, Christian Decker <
decker.christian at gmail.com> wrote:

> Actually no, the same string may have to be translated in different ways
> depending on the context they appear in. That sometimes happens for italian,
> and I'm sure it happens in other cases too. Not sure whether this is the
> cause for duplicate strings for now, but it might.
>
> Regards,
> Chris
>
>
> On Sat, Oct 22, 2011 at 6:14 PM, Geir Harald Hansen <
> operator at bitminter.com> wrote:
>
>> What do you know, it worked. Finished.
>>
>> Once again Norway finishes ahead of Sweden. :P
>>
>> By the way, I had to translate some of the exact same strings 2-3 times.
>> That's something you may want to improve on.
>>
>> On 22.10.2011 15:28, Nils Schneider wrote:
>> > I think it's possible to add it yourself. Just click on "add
>> translation"
>> >
>> > On 22.10.2011 14:26, Geir Harald Hansen wrote:
>> >> On 22.10.2011 12:51, Nils Schneider wrote:
>> >>>> And is anybody willing to take the job of coordinating translation
>> >>>> efforts, figuring out if Transifex is a good tool to use, and writing
>> >>>> some documentation to make it easy for people to create and submit
>> new
>> >>>> translations?
>> >>>
>> >>> I have exported all .ts to transifex.
>> >>>
>> >>> https://www.transifex.net/projects/p/bitcoin/resource/tx/
>> >>
>> >> If you add Norwegian Bokm?l, I can do that one. Language code "nb".
>> >>
>> >> Regards,
>> >> Geir Harald Hansen
>> >>
>> >>
>> >>
>> ------------------------------------------------------------------------------
>> >> The demand for IT networking professionals continues to grow, and the
>> >> demand for specialized networking skills is growing even more rapidly.
>> >> Take a complimentary Learning at Cisco Self-Assessment and learn
>> >> about Cisco certifications, training, and career opportunities.
>> >> http://p.sf.net/sfu/cisco-dev2dev
>> >> _______________________________________________
>> >> Bitcoin-development mailing list
>> >> Bitcoin-development at lists.sourceforge.net
>> >> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>> >>
>> >
>> >
>> >
>> ------------------------------------------------------------------------------
>> > The demand for IT networking professionals continues to grow, and the
>> > demand for specialized networking skills is growing even more rapidly.
>> > Take a complimentary Learning at Cisco Self-Assessment and learn
>> > about Cisco certifications, training, and career opportunities.
>> > http://p.sf.net/sfu/cisco-dev2dev
>> > _______________________________________________
>> > Bitcoin-development mailing list
>> > Bitcoin-development at lists.sourceforge.net
>> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>> >
>>
>>
>>
>>
>> ------------------------------------------------------------------------------
>> The demand for IT networking professionals continues to grow, and the
>> demand for specialized networking skills is growing even more rapidly.
>> Take a complimentary Learning at Cisco Self-Assessment and learn
>> about Cisco certifications, training, and career opportunities.
>> http://p.sf.net/sfu/cisco-dev2dev
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>
>
>
>
> ------------------------------------------------------------------------------
> The demand for IT networking professionals continues to grow, and the
> demand for specialized networking skills is growing even more rapidly.
> Take a complimentary Learning at Cisco Self-Assessment and learn
> about Cisco certifications, training, and career opportunities.
> http://p.sf.net/sfu/cisco-dev2dev
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111024/da7e1eec/attachment.html>

From witchspace81 at gmail.com  Mon Oct 24 18:11:17 2011
From: witchspace81 at gmail.com (John Smith)
Date: Mon, 24 Oct 2011 20:11:17 +0200
Subject: [Bitcoin-development] Fwd: bitcoin scope issue in main.cpp
In-Reply-To: <1319466675.83020.YahooMailNeo@web121003.mail.ne1.yahoo.com>
References: <CAMm66_=eqw9VqYrs5kv_i1di1FmDtP8X1dgBH90N0CuVvZswMA@mail.gmail.com>
	<CA+s+GJBo90gH4pRx7+vnHgy5y6bWF7My69jNj6J-RHw7bBqH8g@mail.gmail.com>
	<CAJNQ0ssSQ0egHZ8YWFzrGv=LjfWQqV9V7qSeB01Zg2C4-LSZGQ@mail.gmail.com>
	<1319403109.18333.140660989434537@webmail.messagingengine.com>
	<CAJNQ0st7H9N-WDx-5R7JxKndPVXDEqTVvr6C20zZJv1UgvnZgg@mail.gmail.com>
	<1319466675.83020.YahooMailNeo@web121003.mail.ne1.yahoo.com>
Message-ID: <CAJNQ0st+1xw2mMEmWN0wFhCDUSKTBRAvhAcO8Sme_2Ah+5Cg7A@mail.gmail.com>

Yes, you're right, there is a lot of code is in the "fun with knives"
category.

JS

On Mon, Oct 24, 2011 at 4:31 PM, Amir Taaki <zgenjix at yahoo.com> wrote:

> Hahaha you mean like unitialised variables, inheriting from containers with
> non-virtual dtors (CScript) and delicious copy pasta coding (PushMessage,
> bignum and serialize stuff).
>
> No need to worry about that :)
>
> ------------------------------
> *From:* John Smith <witchspace81 at gmail.com>
> *To:* theymos <theymos at mm.st>
> *Cc:* bitcoin-development at lists.sourceforge.net
> *Sent:* Monday, October 24, 2011 6:02 AM
> *Subject:* Re: [Bitcoin-development] Fwd: bitcoin scope issue in main.cpp
>
>
> Yes, I know that. It compiles.
>
> If we pulled all the 'This is legal in C++' tricks in the bitcoin source it
> would be even less maintainable and readable than now. But whatever...
>
> JS
>
> On Sun, Oct 23, 2011 at 10:51 PM, theymos <theymos at mm.st> wrote:
>
> It's legal for a scope to define variables with names that conflict with
> the names of variables in higher-level scopes.
>
>
> ------------------------------------------------------------------------------
> The demand for IT networking professionals continues to grow, and the
> demand for specialized networking skills is growing even more rapidly.
> Take a complimentary Learning at Cisco Self-Assessment and learn
> about Cisco certifications, training, and career opportunities.
> http://p.sf.net/sfu/cisco-dev2dev
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
>
>
> ------------------------------------------------------------------------------
> The demand for IT networking professionals continues to grow, and the
> demand for specialized networking skills is growing even more rapidly.
> Take a complimentary Learning at Cisco Self-Assessment and learn
> about Cisco certifications, training, and career opportunities.
> http://p.sf.net/sfu/cisco-dev2dev
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
>
>
> ------------------------------------------------------------------------------
> The demand for IT networking professionals continues to grow, and the
> demand for specialized networking skills is growing even more rapidly.
> Take a complimentary Learning at Cisco Self-Assessment and learn
> about Cisco certifications, training, and career opportunities.
> http://p.sf.net/sfu/cisco-dev2dev
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111024/940b579a/attachment.html>

From operator at bitminter.com  Mon Oct 24 18:55:01 2011
From: operator at bitminter.com (Geir Harald Hansen)
Date: Mon, 24 Oct 2011 20:55:01 +0200
Subject: [Bitcoin-development] Help wanted: translations
In-Reply-To: <CAJNQ0svAPqPdr_oWL-D-y3Om2dzFQ+0DS=K=ZEi+7+VVMDHtLw@mail.gmail.com>
References: <CABsx9T2eCpxqzbd0PmWJxCDFLHwOix2BOYp+APQGMZYh_O+R4g@mail.gmail.com>
	<4EA2A023.5000603@nilsschneider.net> <4EA2B68C.3050901@bitminter.com>
	<4EA2C4FE.2020609@nilsschneider.net> <4EA2EBCC.9000207@bitminter.com>
	<CALxbBHWfm_sjhh5kPtm=mbGp17LGzwtY-0+vwvJ4XaQQoJfWLw@mail.gmail.com>
	<CAJNQ0svAPqPdr_oWL-D-y3Om2dzFQ+0DS=K=ZEi+7+VVMDHtLw@mail.gmail.com>
Message-ID: <4EA5B485.9090300@bitminter.com>

Three quick examples of duplicated strings. There are many more. Some of
the smaller ones may make sense to have duplicated several times in
english as their translated versions may differ in other languages. But
with these below I don't see the point.

Twice, with a small difference (<b> vs. none):

WARNING: If you encrypt your wallet and lose your passphrase, you will
<b>LOSE ALL OF YOUR BITCOINS</b>! Are you sure you wish to encrypt your
wallet?

WARNING: If you encrypt your wallet and lose your passphrase, you will
LOSE ALL OF YOUR BITCOINS! Are you sure you wish to encrypt your wallet?

Again twice, with a small difference (%s vs %1):

This transaction is over the size limit. You can still send it for a fee
of %1, which goes to the nodes that process your transaction and helps
to support the network. Do you want to pay the fee?

This transaction is over the size limit. You can still send it for a fee
of %s, which goes to the nodes that process your transaction and helps
to support the network. Do you want to pay the fee?

Twice, looks exactly the same:

Generated coins must wait 120 blocks before they can be spent. When you
generated this block, it was broadcast to the network to be added to the
block chain. If it fails to get into the chain, it will change to "not
accepted" and not be spendable. This may occasionally happen if another
node generates a block within a few seconds of yours.

Generated coins must wait 120 blocks before they can be spent. When you
generated this block, it was broadcast to the network to be added to the
block chain. If it fails to get into the chain, it will change to "not
accepted" and not be spendable. This may occasionally happen if another
node generates a block within a few seconds of yours.

Regards,
Geir Harald Hansen

On 24.10.2011 20:10, John Smith wrote:
> 
> Indeed. It could make sense. That's the reason why Qt distinguishes
> strings based on context as well as content.
> 
> But it could also be nonsense. Can you be more specific as to which strings?
> 
> JS
> 
> On Mon, Oct 24, 2011 at 1:24 PM, Christian Decker
> <decker.christian at gmail.com <mailto:decker.christian at gmail.com>> wrote:
> 
>     Actually no, the same string may have to be translated in different
>     ways depending on the context they appear in. That sometimes happens
>     for italian, and I'm sure it happens in other cases too. Not sure
>     whether this is the cause for duplicate strings for now, but it might.
> 
>     Regards,
>     Chris
> 
> 
>     On Sat, Oct 22, 2011 at 6:14 PM, Geir Harald Hansen
>     <operator at bitminter.com <mailto:operator at bitminter.com>> wrote:
> 
>         What do you know, it worked. Finished.
> 
>         Once again Norway finishes ahead of Sweden. :P
> 
>         By the way, I had to translate some of the exact same strings
>         2-3 times.
>         That's something you may want to improve on.
> 
>         On 22.10.2011 15:28, Nils Schneider wrote:
>         > I think it's possible to add it yourself. Just click on "add
>         translation"
>         >
>         > On 22.10.2011 14:26, Geir Harald Hansen wrote:
>         >> On 22.10.2011 12:51, Nils Schneider wrote:
>         >>>> And is anybody willing to take the job of coordinating
>         translation
>         >>>> efforts, figuring out if Transifex is a good tool to use,
>         and writing
>         >>>> some documentation to make it easy for people to create and
>         submit new
>         >>>> translations?
>         >>>
>         >>> I have exported all .ts to transifex.
>         >>>
>         >>> https://www.transifex.net/projects/p/bitcoin/resource/tx/
>         >>
>         >> If you add Norwegian Bokm?l, I can do that one. Language code
>         "nb".
>         >>
>         >> Regards,
>         >> Geir Harald Hansen





From simon at superduper.net  Mon Oct 24 18:52:17 2011
From: simon at superduper.net (Simon Barber)
Date: Mon, 24 Oct 2011 11:52:17 -0700
Subject: [Bitcoin-development] Determine input addresses of a transaction
In-Reply-To: <CANEZrP1W3r65t7yW8SOR-MLm-VFw2bqy1HOSEVTPRMiaWpFKYg@mail.gmail.com>
References: <44861.134.106.52.172.1319444997.squirrel@webmail.uni-osnabrueck.de>	<CABsx9T2v4uhUdsWEg58Xs2OhOf3ED0Q2LGmkrRpdJDxvVMexdQ@mail.gmail.com>
	<CANEZrP1W3r65t7yW8SOR-MLm-VFw2bqy1HOSEVTPRMiaWpFKYg@mail.gmail.com>
Message-ID: <4EA5B3E1.4030902@superduper.net>

PKI would avoid the need for the trust aggregator to be consulted for 
each transaction. Obviously checking for revocation would be essential. 
The CA cert can state what kind of guarantee is available.

Simon


On 10/24/2011 09:25 AM, Mike Hearn wrote:
>     You know, just thinking out loud...
>
>     Green addresses could be implemented as a second signature in the
>     scriptSig.
>
>
> I think this would solve one of the other issues I raised about the
> green address idea .... you can have some kind of trust aggregator sign
> the transactions. Merchants like MtGox that send would create a
> transaction, export it, upload it to the trusted authority which can
> just check IP address or something to verify it's really coming from
> MtGox, then sign it and broadcast it.
>
>
>
>
> ------------------------------------------------------------------------------
> The demand for IT networking professionals continues to grow, and the
> demand for specialized networking skills is growing even more rapidly.
> Take a complimentary Learning at Cisco Self-Assessment and learn
> about Cisco certifications, training, and career opportunities.
> http://p.sf.net/sfu/cisco-dev2dev
>
>
>
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development



From witchspace81 at gmail.com  Tue Oct 25 05:02:23 2011
From: witchspace81 at gmail.com (John Smith)
Date: Tue, 25 Oct 2011 07:02:23 +0200
Subject: [Bitcoin-development] Help wanted: translations
In-Reply-To: <4EA5B485.9090300@bitminter.com>
References: <CABsx9T2eCpxqzbd0PmWJxCDFLHwOix2BOYp+APQGMZYh_O+R4g@mail.gmail.com>
	<4EA2A023.5000603@nilsschneider.net>
	<4EA2B68C.3050901@bitminter.com>
	<4EA2C4FE.2020609@nilsschneider.net>
	<4EA2EBCC.9000207@bitminter.com>
	<CALxbBHWfm_sjhh5kPtm=mbGp17LGzwtY-0+vwvJ4XaQQoJfWLw@mail.gmail.com>
	<CAJNQ0svAPqPdr_oWL-D-y3Om2dzFQ+0DS=K=ZEi+7+VVMDHtLw@mail.gmail.com>
	<4EA5B485.9090300@bitminter.com>
Message-ID: <CAJNQ0suwpzgzkMEZzzvuWkwjPbqzHWEboRnYma8=_isT7KQKkQ@mail.gmail.com>

Those indeed seems weird... I'll take a look at it.

JS

On Mon, Oct 24, 2011 at 8:55 PM, Geir Harald Hansen
<operator at bitminter.com>wrote:

> Three quick examples of duplicated strings. There are many more. Some of
> the smaller ones may make sense to have duplicated several times in
> english as their translated versions may differ in other languages. But
> with these below I don't see the point.
>
> Twice, with a small difference (<b> vs. none):
>
> WARNING: If you encrypt your wallet and lose your passphrase, you will
> <b>LOSE ALL OF YOUR BITCOINS</b>! Are you sure you wish to encrypt your
> wallet?
>
> WARNING: If you encrypt your wallet and lose your passphrase, you will
> LOSE ALL OF YOUR BITCOINS! Are you sure you wish to encrypt your wallet?
>
> Again twice, with a small difference (%s vs %1):
>
> This transaction is over the size limit. You can still send it for a fee
> of %1, which goes to the nodes that process your transaction and helps
> to support the network. Do you want to pay the fee?
>
> This transaction is over the size limit. You can still send it for a fee
> of %s, which goes to the nodes that process your transaction and helps
> to support the network. Do you want to pay the fee?
>
> Twice, looks exactly the same:
>
> Generated coins must wait 120 blocks before they can be spent. When you
> generated this block, it was broadcast to the network to be added to the
> block chain. If it fails to get into the chain, it will change to "not
> accepted" and not be spendable. This may occasionally happen if another
> node generates a block within a few seconds of yours.
>
> Generated coins must wait 120 blocks before they can be spent. When you
> generated this block, it was broadcast to the network to be added to the
> block chain. If it fails to get into the chain, it will change to "not
> accepted" and not be spendable. This may occasionally happen if another
> node generates a block within a few seconds of yours.
>
> Regards,
> Geir Harald Hansen
>
> On 24.10.2011 20:10, John Smith wrote:
> >
> > Indeed. It could make sense. That's the reason why Qt distinguishes
> > strings based on context as well as content.
> >
> > But it could also be nonsense. Can you be more specific as to which
> strings?
> >
> > JS
> >
> > On Mon, Oct 24, 2011 at 1:24 PM, Christian Decker
> > <decker.christian at gmail.com <mailto:decker.christian at gmail.com>> wrote:
> >
> >     Actually no, the same string may have to be translated in different
> >     ways depending on the context they appear in. That sometimes happens
> >     for italian, and I'm sure it happens in other cases too. Not sure
> >     whether this is the cause for duplicate strings for now, but it
> might.
> >
> >     Regards,
> >     Chris
> >
> >
> >     On Sat, Oct 22, 2011 at 6:14 PM, Geir Harald Hansen
> >     <operator at bitminter.com <mailto:operator at bitminter.com>> wrote:
> >
> >         What do you know, it worked. Finished.
> >
> >         Once again Norway finishes ahead of Sweden. :P
> >
> >         By the way, I had to translate some of the exact same strings
> >         2-3 times.
> >         That's something you may want to improve on.
> >
> >         On 22.10.2011 15:28, Nils Schneider wrote:
> >         > I think it's possible to add it yourself. Just click on "add
> >         translation"
> >         >
> >         > On 22.10.2011 14:26, Geir Harald Hansen wrote:
> >         >> On 22.10.2011 12:51, Nils Schneider wrote:
> >         >>>> And is anybody willing to take the job of coordinating
> >         translation
> >         >>>> efforts, figuring out if Transifex is a good tool to use,
> >         and writing
> >         >>>> some documentation to make it easy for people to create and
> >         submit new
> >         >>>> translations?
> >         >>>
> >         >>> I have exported all .ts to transifex.
> >         >>>
> >         >>> https://www.transifex.net/projects/p/bitcoin/resource/tx/
> >         >>
> >         >> If you add Norwegian Bokm?l, I can do that one. Language code
> >         "nb".
> >         >>
> >         >> Regards,
> >         >> Geir Harald Hansen
>
>
>
>
> ------------------------------------------------------------------------------
> The demand for IT networking professionals continues to grow, and the
> demand for specialized networking skills is growing even more rapidly.
> Take a complimentary Learning at Cisco Self-Assessment and learn
> about Cisco certifications, training, and career opportunities.
> http://p.sf.net/sfu/cisco-dev2dev
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111025/640af9da/attachment.html>

From jan at uos.de  Tue Oct 25 09:45:41 2011
From: jan at uos.de (Jan Vornberger)
Date: Tue, 25 Oct 2011 11:45:41 +0200 (CEST)
Subject: [Bitcoin-development] Determine input addresses of a transaction
Message-ID: <44190.134.106.52.172.1319535941.squirrel@webmail.uni-osnabrueck.de>

Am Mo, 24.10.2011, 16:55, schrieb Gavin Andresen:
>> So my first shot at this is to go through the inputs of a transaction and
>> see if the scriptSig field has only two opcodes. If that is the case, I
assume that it is of the structure <sig> <pubKey> and calculate the
Bitcoin address from <pubKey>.
>> But then I started to wonder if this is safe. Can this be tricked somehow?
>
> Sure. There are lots of non-standard scriptPubKey scripts that will
validate if given <sig> <pubKey> as input:  a simple OP_NOP would work
(do nothing, then check the top value on the stack and validate if it is
not zero-- and <pubKey> is not zero).

Aw, I see. So back to the drawing board for me.

How about this: I make sure that <sig> is a proper signature from a green
address key, by bringing my own scriptPubKey of just OP_CHECKSIG, complete
the script to be <sig> <pubKey> OP_CHECKSIG, and run it and afterwards
check the address by looking at <pubKey>? Would that be safe? (Even if it
is a hackish solution that only works for certain type of transactions):

> Green addresses could be implemented as a second signature in the
scriptSig.  You'd have to hack your bitcoin client, but you could
generate a transaction that had <greensig> <sig> <pubKey>  ... as the
input instead of <sig> <pubKey>.

Interesting suggestion! So if I understand correctly, <greensig> would be
the signature generated from signing the transaction with the key of a
green address? Which would allow the rest of the transaction to be
completely 'normal' and not require it to use specific inputs as such?
Sounds good - I guess I never thought in this direction, as I always
assumed doing anything 'non-standard' with the scripting language would
create a number of knock-on problems. But you are saying, that this would
still be considered standard? I guess I have to study this part of the
source code more.

Well, I guess I'm torn a little bit between two options:

1) Get something working reasonable fast to detect current green address
style transactions. It's fine if it is a little bit of a hack, as long as
it's safe, since I don't expect it to be merged with mainline anyway at
this point.

2) Rethink how green transactions are created and verified and try to put
something 'proper' together which has a chance of being merged at some
point.

For the moment I was going more with 1) because I got the impression, that
green transactions are too controversial at this point to get them
included in mainline. Criticism ranging from 'unnecessary, as
0-confirmation transactions are fairly safe today' to 'encourages too much
centralization and therefore evil'. So how to people on this list feel
about green transactions? Would people be interested in helping me with
2)?

Regards,
Jan





From joel.kaartinen at gmail.com  Tue Oct 25 10:03:04 2011
From: joel.kaartinen at gmail.com (Joel Joonatan Kaartinen)
Date: Tue, 25 Oct 2011 13:03:04 +0300
Subject: [Bitcoin-development] Determine input addresses of a transaction
In-Reply-To: <44190.134.106.52.172.1319535941.squirrel@webmail.uni-osnabrueck.de>
References: <44190.134.106.52.172.1319535941.squirrel@webmail.uni-osnabrueck.de>
Message-ID: <1319536985.27400.34.camel@mei>

On Tue, 2011-10-25 at 11:45 +0200, Jan Vornberger wrote:
> 1) Get something working reasonable fast to detect current green address
> style transactions. It's fine if it is a little bit of a hack, as long as
> it's safe, since I don't expect it to be merged with mainline anyway at
> this point.
> 
> 2) Rethink how green transactions are created and verified and try to put
> something 'proper' together which has a chance of being merged at some
> point.
> 
> For the moment I was going more with 1) because I got the impression, that
> green transactions are too controversial at this point to get them
> included in mainline. Criticism ranging from 'unnecessary, as
> 0-confirmation transactions are fairly safe today' to 'encourages too much
> centralization and therefore evil'. So how to people on this list feel
> about green transactions? Would people be interested in helping me with
> 2)?

One possibility would be to create a peer sourced green address
implementation. That is, each user could, individually decide to trust
certain addresses as "green" and optionally, publish this trust. Basing
things on the published trust, you could dynamically, as opposed to
static hierarchies, evaluate the trustworthiness of each green address
you haven't personally decided to trust.

This would be somewhat involved implementation, though, as it would
require heavy statistical calculations.

- Joel




From mike at plan99.net  Tue Oct 25 10:42:53 2011
From: mike at plan99.net (Mike Hearn)
Date: Tue, 25 Oct 2011 12:42:53 +0200
Subject: [Bitcoin-development] Determine input addresses of a transaction
In-Reply-To: <44190.134.106.52.172.1319535941.squirrel@webmail.uni-osnabrueck.de>
References: <44190.134.106.52.172.1319535941.squirrel@webmail.uni-osnabrueck.de>
Message-ID: <CANEZrP2WzXQO8L8fjMqOzs+TsuGYvQK9L3kKX_BCqAdhNapW_A@mail.gmail.com>

> Interesting suggestion! So if I understand correctly, <greensig> would be
> the signature generated from signing the transaction with the key of a
> green address?

Sure. Or just "a key". It wouldn't have to be an actual key used in
the block chain.

> Sounds good - I guess I never thought in this direction, as I always
> assumed doing anything 'non-standard' with the scripting language would
> create a number of knock-on problems.

It won't break the IsStandard checks, if that's what you mean. You can
put any data you like into a scriptSig. In practice only data is
useful, there's no purpose in having an actual script there (or at
least, I wasn't able to find one yet).

> 1) Get something working reasonable fast to detect current green address
> style transactions. It's fine if it is a little bit of a hack, as long as
> it's safe, since I don't expect it to be merged with mainline anyway at
> this point.

You could easily change the bitcoin code to detect such transactions -
just look for scriptSigs that have 3 items instead of two, where the
3rd item is the right size to be a signature.

> Criticism ranging from 'unnecessary, as
> 0-confirmation transactions are fairly safe today' to 'encourages too much
> centralization and therefore evil'

Heh, if that's a reference to my feedback, I definitely wouldn't
describe such a feature as "evil", that's rather strong :-)



From mike at plan99.net  Tue Oct 25 10:49:11 2011
From: mike at plan99.net (Mike Hearn)
Date: Tue, 25 Oct 2011 12:49:11 +0200
Subject: [Bitcoin-development] Detecting OP_EVAL scriptPubKeys that are to
	you
Message-ID: <CANEZrP1ic4RXFzoqf66MGv=rJe3MgWxVi5nnk2VKkMc4VMCDyw@mail.gmail.com>

scriptPubKeys that use OP_EVAL contain a hash of a script. If I
understand correctly, that means to detect a transaction in a block
that is relevant to your wallet, that means you need to pre-calculate
every possible hash that might appear.

For the case of a single payment, that's not a problem. It means for
each key you now have to check for:

 - raw key
 - key hash
 - hash of script that contains key hash
 - hash of script that contains raw key

which isn't so bad.

What is the complexity like when multi-signing comes into the picture?
I *think* it's not an issue for the use cases currently envisioned,
but being unable to "see into" a script could complicate things later.

Specifically: for a wallet protection service, you have to make sure
the WPS keys are matched 1:1 with your own private keys. You must
never mix them up otherwise you have to check the block chain for the
cross-product. Deterministic wallets are one way to achieve that
without compromising privacy.

For escrow contracts, using OP_EVAL means you cannot detect them
unless the sender has told you the pubkey they are going to use,
because otherwise you can't recreate the hashed script. Escrow
protocols require some out of band communication anyway in order to
set up the escrow key, so this isn't inherently a problem.

Are there any use cases where you will want to recognize transactions
to you, where you can't predict the full script contents?



From gavinandresen at gmail.com  Tue Oct 25 13:21:30 2011
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Tue, 25 Oct 2011 09:21:30 -0400
Subject: [Bitcoin-development] Detecting OP_EVAL scriptPubKeys that are
	to you
In-Reply-To: <CANEZrP1ic4RXFzoqf66MGv=rJe3MgWxVi5nnk2VKkMc4VMCDyw@mail.gmail.com>
References: <CANEZrP1ic4RXFzoqf66MGv=rJe3MgWxVi5nnk2VKkMc4VMCDyw@mail.gmail.com>
Message-ID: <CABsx9T3WKv3RLWT+Q6s7cCLzDL3sVRCWfmPiKcSp=_Re05m+zQ@mail.gmail.com>

On Tue, Oct 25, 2011 at 6:49 AM, Mike Hearn <mike at plan99.net> wrote:
> scriptPubKeys that use OP_EVAL contain a hash of a script. If I
> understand correctly, that means to detect a transaction in a block
> that is relevant to your wallet, that means you need to pre-calculate
> every possible hash that might appear.

You could do it that way...  but that would be inefficient.

You give the hash to whoever is paying you, and store the hash -->
script  mapping when you do that (assuming you're not using a
deterministic wallet; if you are, you probably just increment a
counter in the wallet).

The only use case I can think of where you'd want to check for every
possible hash is if you lose your wallet, you have a wallet backup
that has your private keys in it, but DOES NOT have the hash -->
script mapping(s).

For use cases involving other people, that's probably not a problem--
you could ask them to tell you what public keys are involved, and then
add them back in to the wallet (the RPC interface I settled on for
m-of-n txns is an "addmultisigaddress" that takes the "m" and an array
of "n" public keys, creates the script, adds the hash-->script mapping
to the wallet, and returns the hash).

For use cases where all the keys belong to you... either a good,
automatic, in-the-cloud-backup or the equivalent of "-rescan" is
needed to recover in case the mappings are lost.

-- 
--
Gavin Andresen



From gmaxwell at gmail.com  Tue Oct 25 14:49:45 2011
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Tue, 25 Oct 2011 10:49:45 -0400
Subject: [Bitcoin-development] Detecting OP_EVAL scriptPubKeys that are
	to you
In-Reply-To: <CABsx9T3WKv3RLWT+Q6s7cCLzDL3sVRCWfmPiKcSp=_Re05m+zQ@mail.gmail.com>
References: <CANEZrP1ic4RXFzoqf66MGv=rJe3MgWxVi5nnk2VKkMc4VMCDyw@mail.gmail.com>
	<CABsx9T3WKv3RLWT+Q6s7cCLzDL3sVRCWfmPiKcSp=_Re05m+zQ@mail.gmail.com>
Message-ID: <CAAS2fgSYwUdiyY2XfHhWn+aN_6a72XRKs-8W7ibZM5t0tZ28rg@mail.gmail.com>

On Tue, Oct 25, 2011 at 9:21 AM, Gavin Andresen <gavinandresen at gmail.com> wrote:
> You give the hash to whoever is paying you, and store the hash -->
> script ?mapping when you do that (assuming you're not using a
> deterministic wallet; if you are, you probably just increment a
> counter in the wallet).

If anyone finds that solution unsatisfying, consider? It's already the
case that I could take one of your disclosed public keys and create an
infinite series of secondary keys out of it for which only you could
decode, and the only way for you to find them in the blockchain would
be to have performed the same procedure and made a note of the
addresses you're watching for.

... or really, more simply I could generate a private key on your
behalf and send funds there. ("What do you mean you didn't get the
funds? I sent them to the private key defined by the cryptographic
hash of the lyrics of your favorite song!")

So it's already the case that if I didn't get your address from you
(or through a negotiation with you), I can't expect you to receive
them.



From etotheipi at gmail.com  Tue Oct 25 16:47:34 2011
From: etotheipi at gmail.com (Alan Reiner)
Date: Tue, 25 Oct 2011 12:47:34 -0400
Subject: [Bitcoin-development] Detecting OP_EVAL scriptPubKeys that are
	to you
In-Reply-To: <CAAS2fgSYwUdiyY2XfHhWn+aN_6a72XRKs-8W7ibZM5t0tZ28rg@mail.gmail.com>
References: <CANEZrP1ic4RXFzoqf66MGv=rJe3MgWxVi5nnk2VKkMc4VMCDyw@mail.gmail.com>
	<CABsx9T3WKv3RLWT+Q6s7cCLzDL3sVRCWfmPiKcSp=_Re05m+zQ@mail.gmail.com>
	<CAAS2fgSYwUdiyY2XfHhWn+aN_6a72XRKs-8W7ibZM5t0tZ28rg@mail.gmail.com>
Message-ID: <CALf2ePy=3N1JQodP3s9PzH=Af1z-7qGdy_4=QW9-CJmaxYGz5Q@mail.gmail.com>

On Tue, Oct 25, 2011 at 10:49 AM, Gregory Maxwell <gmaxwell at gmail.com>wrote:

> On Tue, Oct 25, 2011 at 9:21 AM, Gavin Andresen <gavinandresen at gmail.com>
> wrote:
> > You give the hash to whoever is paying you, and store the hash -->
> > script  mapping when you do that (assuming you're not using a
> > deterministic wallet; if you are, you probably just increment a
> > counter in the wallet).
>
> If anyone finds that solution unsatisfying, consider? It's already the
> case that I could take one of your disclosed public keys and create an
> infinite series of secondary keys out of it for which only you could
> decode, and the only way for you to find them in the blockchain would
> be to have performed the same procedure and made a note of the
> addresses you're watching for.
>
>
(1) As I understand it, OP_EVAL is being proposed as an *optional* tool for
multi-signature transactions.  It sounds like to me, that you can still use
the regular OP_CHECKMULTISIG if you are concerned about these things.  If
you're dealing with too many parties with questionable reliability that they
will notify you of transacitons that include you, I don't see anything wrong
with declaring that you'd only prefer dealing with OP_CMS transactions and
not OP_EVAL (besides some grumbling from them that their way is "better").
Either way, they're screwing themselves, too, if they want to include you on
transactions and don't notify you as such (kind of defeats the purpose of
multi-sig txs).

(2) I think it's unnecessary to discuss cases where you somehow lose your
mappings but not your private keys.  In order for OP_EVAL scripts to work,
the subscripts/mappings are *just as important* as your regular private
keys.  They should be kept in your wallet forever just like your private
keys--and thus you lose none of them or all of them.  The only real
difference is that they aren't sensitive like your private keys, so they
don't have to be encrypted.

(3) There should most definitely be a button on the main client that allows
you to "Add OP_EVAL script" or something along those lines (maybe something
with a less obscure name).  We need to make it as easy as possible for
someone to add such a script/mapping to their wallet.  Although, this
invites a breach of one of my core rules of user interfaces:  if the
functionality is dependent on the user performing some regular maintenance
task, you better be prepared for all users to fail at doing it.  Even
diligent users are going to forget/mess-up sometimes.  If failure at
performing this task results in breaking the client or losing money, we
should avoid promoting that usage paradigm.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111025/e630403f/attachment.html>

From gronager at ceptacle.com  Wed Oct 26 08:58:45 2011
From: gronager at ceptacle.com (=?iso-8859-1?Q?Michael_Gr=F8nager?=)
Date: Wed, 26 Oct 2011 10:58:45 +0200
Subject: [Bitcoin-development] Detecting OP_EVAL scriptPubKeys that
	are	to you
In-Reply-To: <CALf2ePy=3N1JQodP3s9PzH=Af1z-7qGdy_4=QW9-CJmaxYGz5Q@mail.gmail.com>
References: <CANEZrP1ic4RXFzoqf66MGv=rJe3MgWxVi5nnk2VKkMc4VMCDyw@mail.gmail.com>
	<CABsx9T3WKv3RLWT+Q6s7cCLzDL3sVRCWfmPiKcSp=_Re05m+zQ@mail.gmail.com>
	<CAAS2fgSYwUdiyY2XfHhWn+aN_6a72XRKs-8W7ibZM5t0tZ28rg@mail.gmail.com>
	<CALf2ePy=3N1JQodP3s9PzH=Af1z-7qGdy_4=QW9-CJmaxYGz5Q@mail.gmail.com>
Message-ID: <7A50EE90-0FFC-45FB-A27F-786AEB23A8CA@ceptacle.com>

I think it is a very important feature to be able to extract transaction to/from you only from your private keys. In the standard transactions this is easily accomplished - in the case you only want to find the addr to tx mapping:

   vector<pair<opcodetype, vector<unsigned char> > > vSolution;
   if (!Solver(scriptPubKey, vSolution))
       return 0;

   BOOST_FOREACH(PAIRTYPE(opcodetype, vector<unsigned char>)& item, vSolution)
   {
       vector<unsigned char> vchPubKey;
       if (item.first == OP_PUBKEY)
           // encode the pubkey into a hash160
           return Hash160(item.second);
       else if (item.first == OP_PUBKEYHASH)
           return uint160(item.second);                
   }

This possibility is used today in:
* blockexplorer
* bitcoin-js
* my own tiered implementation for thin clients

I agree that you can of course always construct payment schemes to hide payments (hashes from classic novels, sending the private key off line etc), but I consider those either exotic or on purpose hidden, and hence they are not really a problem, nor an argument that this feature does not really exist today.

So, if we introduce a standard (multikey) payment that hides the address (or makes it overly complicated to extract it) it will be a major problem for the projects that I listed above. 

I will post a more detailed technical comment reflecting directly on the BIPs, but the wiki is currently down and I need to re-read the BIPs first.

Cheers,

Michael


On 25/10/2011, at 18:47, Alan Reiner wrote:

> On Tue, Oct 25, 2011 at 10:49 AM, Gregory Maxwell <gmaxwell at gmail.com> wrote:
> On Tue, Oct 25, 2011 at 9:21 AM, Gavin Andresen <gavinandresen at gmail.com> wrote:
>> You give the hash to whoever is paying you, and store the hash -->
>> script  mapping when you do that (assuming you're not using a
>> deterministic wallet; if you are, you probably just increment a
>> counter in the wallet).
> 
> If anyone finds that solution unsatisfying, consider? It's already the
> case that I could take one of your disclosed public keys and create an
> infinite series of secondary keys out of it for which only you could
> decode, and the only way for you to find them in the blockchain would
> be to have performed the same procedure and made a note of the
> addresses you're watching for.
> 
> 
> (1) As I understand it, OP_EVAL is being proposed as an *optional* tool for multi-signature transactions.  It sounds like to me, that you can still use the regular OP_CHECKMULTISIG if you are concerned about these things.  If you're dealing with too many parties with questionable reliability that they will notify you of transacitons that include you, I don't see anything wrong with declaring that you'd only prefer dealing with OP_CMS transactions and not OP_EVAL (besides some grumbling from them that their way is "better").   Either way, they're screwing themselves, too, if they want to include you on transactions and don't notify you as such (kind of defeats the purpose of multi-sig txs).
> 
> (2) I think it's unnecessary to discuss cases where you somehow lose your mappings but not your private keys.  In order for OP_EVAL scripts to work, the subscripts/mappings are *just as important* as your regular private keys.  They should be kept in your wallet forever just like your private keys--and thus you lose none of them or all of them.  The only real difference is that they aren't sensitive like your private keys, so they don't have to be encrypted.
> 
> (3) There should most definitely be a button on the main client that allows you to "Add OP_EVAL script" or something along those lines (maybe something with a less obscure name).  We need to make it as easy as possible for someone to add such a script/mapping to their wallet.  Although, this invites a breach of one of my core rules of user interfaces:  if the functionality is dependent on the user performing some regular maintenance task, you better be prepared for all users to fail at doing it.  Even diligent users are going to forget/mess-up sometimes.  If failure at performing this task results in breaking the client or losing money, we should avoid promoting that usage paradigm.
> 
> ------------------------------------------------------------------------------
> The demand for IT networking professionals continues to grow, and the
> demand for specialized networking skills is growing even more rapidly.
> Take a complimentary Learning at Cisco Self-Assessment and learn 
> about Cisco certifications, training, and career opportunities. 
> http://p.sf.net/sfu/cisco-dev2dev_______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development





From gmaxwell at gmail.com  Wed Oct 26 14:03:20 2011
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Wed, 26 Oct 2011 10:03:20 -0400
Subject: [Bitcoin-development] Detecting OP_EVAL scriptPubKeys that are
	to you
In-Reply-To: <7A50EE90-0FFC-45FB-A27F-786AEB23A8CA@ceptacle.com>
References: <CANEZrP1ic4RXFzoqf66MGv=rJe3MgWxVi5nnk2VKkMc4VMCDyw@mail.gmail.com>
	<CABsx9T3WKv3RLWT+Q6s7cCLzDL3sVRCWfmPiKcSp=_Re05m+zQ@mail.gmail.com>
	<CAAS2fgSYwUdiyY2XfHhWn+aN_6a72XRKs-8W7ibZM5t0tZ28rg@mail.gmail.com>
	<CALf2ePy=3N1JQodP3s9PzH=Af1z-7qGdy_4=QW9-CJmaxYGz5Q@mail.gmail.com>
	<7A50EE90-0FFC-45FB-A27F-786AEB23A8CA@ceptacle.com>
Message-ID: <CAAS2fgTx8gEztUt-UrDObMCQtfdzZc52fzS6c1q8mm+a-TjwjQ@mail.gmail.com>

On Wed, Oct 26, 2011 at 4:58 AM, Michael Gr?nager <gronager at ceptacle.com> wrote:
> I think it is a very important feature to be able to extract transaction to/from you only from your private keys. In the standard transactions this is easily accomplished - in the case you only want to find the addr to tx mapping:

The additional material _IS_ then part of the private key. It's not
something seperate. Its something you need to know in order to author
the address.  This was fundamentally my argument. Not that you could
hide information, but that information was already hidden.

Right now under conventional uses I can't identify all the
transactions that land in your wallet, because I don't know the keys
it contains. With the proposal it's the same situation.

> This possibility is used today in:
> * blockexplorer
> * bitcoin-js
> * my own tiered implementation for thin clients
[snip]
> So, if we introduce a standard (multikey) payment that hides the address (or makes it overly complicated to extract it) it will be a major problem for the projects that I listed above.

These projects will be able to use the _same_ procedure to extract the
identifying information. Except now instead of
ripemd160(sha256(pubkey)) it will be more like ripemd160(sha256([some
extra bytes generated by the wallet holder]||pubkey)) that you
extract.  If the former is not a problem for these applications, why
is the latter?



From gavinandresen at gmail.com  Wed Oct 26 15:00:48 2011
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Wed, 26 Oct 2011 11:00:48 -0400
Subject: [Bitcoin-development] Detecting OP_EVAL scriptPubKeys that are
	to you
In-Reply-To: <CAAS2fgTx8gEztUt-UrDObMCQtfdzZc52fzS6c1q8mm+a-TjwjQ@mail.gmail.com>
References: <CANEZrP1ic4RXFzoqf66MGv=rJe3MgWxVi5nnk2VKkMc4VMCDyw@mail.gmail.com>
	<CABsx9T3WKv3RLWT+Q6s7cCLzDL3sVRCWfmPiKcSp=_Re05m+zQ@mail.gmail.com>
	<CAAS2fgSYwUdiyY2XfHhWn+aN_6a72XRKs-8W7ibZM5t0tZ28rg@mail.gmail.com>
	<CALf2ePy=3N1JQodP3s9PzH=Af1z-7qGdy_4=QW9-CJmaxYGz5Q@mail.gmail.com>
	<7A50EE90-0FFC-45FB-A27F-786AEB23A8CA@ceptacle.com>
	<CAAS2fgTx8gEztUt-UrDObMCQtfdzZc52fzS6c1q8mm+a-TjwjQ@mail.gmail.com>
Message-ID: <CABsx9T3YnK9ogc3J39nO=Q+29daMTDhP2J_FGvpozTGAxD1z6Q@mail.gmail.com>

On Wed, Oct 26, 2011 at 4:58 AM, Michael Gr?nager <gronager at ceptacle.com> wrote:
> I think it is a very important feature to be able to extract transaction to/from you only from your private keys.

Why? If somebody is sending me bitcoins, then they'll have to get
either an address or one or more public keys from me. OP_EVAL just
lets me give them a short address that represents an arbitrary number
of keys combined in an arbitrary way.

I agree with Gregory: it shouldn't matter if that address is
HASH(public key) or HASH(op_eval_script), the issues are the same (if
you lose or cannot re-create the key/script then you're in trouble).

Maybe I'm missing something; are you worried that blockexplorer won't
know that coins sent to HASH(op_eval_script) are actually a
complicated transaction until the coins are spent again?  I'd consider
that a feature, not a bug, because only the people involved in the
transaction need to know the details until after the transaction is
complete.

Feel free to contact me about your 'tiered implementation for thin
clients' -- I don't think OP_EVAL will make that significantly harder.

I also agree with Alan: using OP_EVAL is not mandatory, I'm proposing
that CHECKMULTISIG becomes a standard transaction type.

-- 
--
Gavin Andresen



From gronager at ceptacle.com  Thu Oct 27 07:32:16 2011
From: gronager at ceptacle.com (=?iso-8859-1?Q?Michael_Gr=F8nager?=)
Date: Thu, 27 Oct 2011 09:32:16 +0200
Subject: [Bitcoin-development] Detecting OP_EVAL scriptPubKeys that are
	to you
In-Reply-To: <CABsx9T3YnK9ogc3J39nO=Q+29daMTDhP2J_FGvpozTGAxD1z6Q@mail.gmail.com>
References: <CANEZrP1ic4RXFzoqf66MGv=rJe3MgWxVi5nnk2VKkMc4VMCDyw@mail.gmail.com>
	<CABsx9T3WKv3RLWT+Q6s7cCLzDL3sVRCWfmPiKcSp=_Re05m+zQ@mail.gmail.com>
	<CAAS2fgSYwUdiyY2XfHhWn+aN_6a72XRKs-8W7ibZM5t0tZ28rg@mail.gmail.com>
	<CALf2ePy=3N1JQodP3s9PzH=Af1z-7qGdy_4=QW9-CJmaxYGz5Q@mail.gmail.com>
	<7A50EE90-0FFC-45FB-A27F-786AEB23A8CA@ceptacle.com>
	<CAAS2fgTx8gEztUt-UrDObMCQtfdzZc52fzS6c1q8mm+a-TjwjQ@mail.gmail.com>
	<CABsx9T3YnK9ogc3J39nO=Q+29daMTDhP2J_FGvpozTGAxD1z6Q@mail.gmail.com>
Message-ID: <1089B122-1274-454C-9097-700D392BF0FA@ceptacle.com>

OK, let me try to explain what I see is the problem:

So far we the bitcoin addresses are (for all practical purposes) a one-to-one mapping between a pubkey and uint160. This mean that your wallet is defined solely by your privatekeys (from which you can extract pubkeys and then uint160 btc-addresses).

This also enables you to make a uint160 to tx mapping on a server (like on blockexplorer) and use a thin client to query for transactions just from a list of uint160 (whether it holds the private keys behind them or not).

In the case of a multisig transaction, lets say the 2of3 example, you could e.g. have all 3 corresponding uint160s but only one privkey, but still query the server and know the value of an asset of uint160s.

This, I find a nice and clean setup, where cryptographic keys can be mapped to assets.

If we now consider the OP_EVAL proposal. Here, a new use of the uint160, namely as a mapping of ripemd160(something extra and hash256(pubkey)) is introduced. This means that this clean mapping is broken. Your will have an extra "public key" being the "something extra", and there is no easy way to do the mapping from a list of private keys to public keys to uint160s that will result in the new condensed uint160, except if you also have the knowledge of the script that was used. 

I agree that it will work and I (and bitcoin-js and blockexplorer) can of change the concept of a wallet to also include scripts, but it breaks an intrinsic logic of uint160s and transactions that has so far been quite nice and clean.

So I also support checkmultisig to be the standard transaction type, but I do not appreciate the support of OP_EVAL.

Cheers,

Michael


On 26/10/2011, at 17:00, Gavin Andresen wrote:

> On Wed, Oct 26, 2011 at 4:58 AM, Michael Gr?nager <gronager at ceptacle.com> wrote:
>> I think it is a very important feature to be able to extract transaction to/from you only from your private keys.
> 
> Why? If somebody is sending me bitcoins, then they'll have to get
> either an address or one or more public keys from me. OP_EVAL just
> lets me give them a short address that represents an arbitrary number
> of keys combined in an arbitrary way.
> 
> I agree with Gregory: it shouldn't matter if that address is
> HASH(public key) or HASH(op_eval_script), the issues are the same (if
> you lose or cannot re-create the key/script then you're in trouble).
> 
> Maybe I'm missing something; are you worried that blockexplorer won't
> know that coins sent to HASH(op_eval_script) are actually a
> complicated transaction until the coins are spent again?  I'd consider
> that a feature, not a bug, because only the people involved in the
> transaction need to know the details until after the transaction is
> complete.
> 
> Feel free to contact me about your 'tiered implementation for thin
> clients' -- I don't think OP_EVAL will make that significantly harder.
> 
> I also agree with Alan: using OP_EVAL is not mandatory, I'm proposing
> that CHECKMULTISIG becomes a standard transaction type.
> 
> -- 
> --
> Gavin Andresen

Michael Gronager, PhD
Owner Ceptacle / NDGF Director, NORDUnet A/S
Jens Juels Gade 33
2100 Copenhagen E
Mobile: +45 31 62 14 01
E-mail: gronager at ceptacle.com





From gmaxwell at gmail.com  Thu Oct 27 09:08:53 2011
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Thu, 27 Oct 2011 05:08:53 -0400
Subject: [Bitcoin-development] Detecting OP_EVAL scriptPubKeys that are
	to you
In-Reply-To: <1089B122-1274-454C-9097-700D392BF0FA@ceptacle.com>
References: <CANEZrP1ic4RXFzoqf66MGv=rJe3MgWxVi5nnk2VKkMc4VMCDyw@mail.gmail.com>
	<CABsx9T3WKv3RLWT+Q6s7cCLzDL3sVRCWfmPiKcSp=_Re05m+zQ@mail.gmail.com>
	<CAAS2fgSYwUdiyY2XfHhWn+aN_6a72XRKs-8W7ibZM5t0tZ28rg@mail.gmail.com>
	<CALf2ePy=3N1JQodP3s9PzH=Af1z-7qGdy_4=QW9-CJmaxYGz5Q@mail.gmail.com>
	<7A50EE90-0FFC-45FB-A27F-786AEB23A8CA@ceptacle.com>
	<CAAS2fgTx8gEztUt-UrDObMCQtfdzZc52fzS6c1q8mm+a-TjwjQ@mail.gmail.com>
	<CABsx9T3YnK9ogc3J39nO=Q+29daMTDhP2J_FGvpozTGAxD1z6Q@mail.gmail.com>
	<1089B122-1274-454C-9097-700D392BF0FA@ceptacle.com>
Message-ID: <CAAS2fgQAo-xxJxVtoXbTMZ3nvQvtiFxeqOKrN5-xxppMgmBdqg@mail.gmail.com>

(taking this a bit out of order)

On Thu, Oct 27, 2011 at 3:32 AM, Michael Gr?nager <gronager at ceptacle.com> wrote:
> OK, let me try to explain what I see is the problem:
[snip]
> This, I find a nice and clean setup, where cryptographic keys can be mapped to assets.

>From my perspective that clean boundary remains: Functionally the
script is part of the cryptographic key.

[snip]
> except if you also have the knowledge of the script that was used.

Which you must.

I can see no functional difference than if you said of the current
system "except if you also have knowledge of the final 32 bits of the
ECC private key".

I don't see any reason to expect clients to identify funds without
knowing the information required? it's impossible. I mean, sure, you
_could_ bruteforce the final 32 bits of your private key? or you could
attempt to try the cartesian product of every key you have with every
key seen in the block chain for finding an op_eval script. But thats
unworkable, unnecessary, equally bad for all client types, and not
being suggested.  Under either system a coin is not yours unless you
know all of the right bits? knowing some is not good enough.

Could you suggest how else we could gain the advantages of op_eval
without it?   How can I secure my wallet under whatever scheme I like?
create a trust that requires multiparty signoff? and securely have
senders pay into it without expecting them all to handle some rare and
complicated procedure for sending to me? (Or a burdensome address
which serializes a script and a large amount of data into hundreds of
characters, and which still may be unable to represent the rules I
wish to have govern my account? and which the sender might mutate?
e.g. twiddling the threshold counts? and cause me great
problems/confusion)

[snip]
> So far we the bitcoin addresses are (for all practical purposes) a one-to-one mapping between a pubkey and uint160. This mean that your wallet is defined solely by your privatekeys (from which you can extract pubkeys and then uint160 btc-addresses).
[snip]
> I agree that it will work and I (and bitcoin-js and blockexplorer) can of change the concept of a wallet to also include scripts, but it breaks an intrinsic logic of uint160s and transactions that has so far been quite nice and clean.
>
> So I also support checkmultisig to be the standard transaction type, but I do not appreciate the support of OP_EVAL.

On the basis of the discussion here I now oppose checkmultisig as a
standard transaction type. (Sorry, I'm not trying to be a jerk if it
came off that way, I'm not opposing it simply because you support it:)

The advantage I saw of having it was faster deployment for the
explicit escrow cases that don't need to encode the payment rules in
an address (as is needed for wallet security and trusts)... but it
seems to me that there is a serious misunderstanding that there is a
bijection between hash160s and public keys, and one between ECC
private keys and spendable transactions, and that this bijection is
desirable or even essential to bitcoin.

I'm concerned that this misunderstanding will moot the flexibility of
the script system because every script that doesn't look like a direct
mapping of hash160->pubkey->payee will be regarded as _broken_? not
just useless to one app or another which could have simply chosen not
to generate those addresses? but actually incompatible with bitcoin,
as is basically being argued here? or, keeping in mind that people can
freely mine non-standard transactions, could this result in tools
which are rendered insecure by unexpected transaction types? Will a
system that thinks HASH160 = IDENTITY recognize that a script which
also requires an additional secret key on the stack is unspendable?

Keeping checkmultisig alone as a standard transaction, when it's
functionally a redundant subset of OP_EVAL  (and inferior because it
reduces the txn you can place in a block) could only further that
misunderstanding. :-/



From jan at uos.de  Thu Oct 27 13:37:43 2011
From: jan at uos.de (Jan Vornberger)
Date: Thu, 27 Oct 2011 15:37:43 +0200 (CEST)
Subject: [Bitcoin-development] Determine input addresses of a transaction
In-Reply-To: <CABsx9T2v4uhUdsWEg58Xs2OhOf3ED0Q2LGmkrRpdJDxvVMexdQ@mail.gmail.com>
References: <44861.134.106.52.172.1319444997.squirrel@webmail.uni-osnabrueck.de>
	<CABsx9T2v4uhUdsWEg58Xs2OhOf3ED0Q2LGmkrRpdJDxvVMexdQ@mail.gmail.com>
Message-ID: <55928.134.106.52.172.1319722663.squirrel@webmail.uni-osnabrueck.de>

Am Mo, 24.10.2011, 16:55, schrieb Gavin Andresen:
> Green addresses could be implemented as a second signature in the
> scriptSig.  You'd have to hack your bitcoin client, but you could
> generate a transaction that had <greensig> <sig> <pubKey>  ... as the
> input instead of <sig> <pubKey>.
>
> The <greensig> will be ignored by old clients.  The transactions is
> still considered 'standard'.  But you could teach bitcoin to look for
> <greensig> signatures in wallet transactions...

I played around with this a little bit and managed to generate such
transactions. However, I ran into the problem that IsStandard() also
checks that the size of scriptSig is not above 200. Adding an extra
signature there triggers this limit. I guess there is no way around
that?

Regards,
Jan



From jan at uos.de  Thu Oct 27 14:12:19 2011
From: jan at uos.de (Jan Vornberger)
Date: Thu, 27 Oct 2011 16:12:19 +0200 (CEST)
Subject: [Bitcoin-development] Determine input addresses of a transaction
In-Reply-To: <20111024110955.GC8115@ulyssis.org>
References: <44861.134.106.52.172.1319444997.squirrel@webmail.uni-osnabrueck.de>
	<20111024110955.GC8115@ulyssis.org>
Message-ID: <56086.134.106.52.172.1319724739.squirrel@webmail.uni-osnabrueck.de>

Am Mo, 24.10.2011, 13:09, schrieb Pieter Wuille:
> As far as your green transactions idea is concerned, maybe we could
> provide an interface
> to mark certain addresses as 'trusted', and have an RPC call to request
> all incoming
> transaction that originate from trusted sources?

That would be fine as well. Although I would prefer if one could
query for a specific transaction id, whether it comes from a trusted
source and also from which trusted source, as you might want to
keep track of the amount of unconfirmed funds you are currently
accepting from a specific source (or the Bitcoin daemon could
keep track of that as well, either way is fine).

This sounds a little too involved though, for my level of familiarity
with the Bitcoin source code and C++, to implement myself.

Regards,
Jan



From jan at uos.de  Thu Oct 27 14:50:16 2011
From: jan at uos.de (Jan Vornberger)
Date: Thu, 27 Oct 2011 16:50:16 +0200 (CEST)
Subject: [Bitcoin-development] Determine input addresses of a transaction
In-Reply-To: <CABsx9T2v4uhUdsWEg58Xs2OhOf3ED0Q2LGmkrRpdJDxvVMexdQ@mail.gmail.com>
References: <44861.134.106.52.172.1319444997.squirrel@webmail.uni-osnabrueck.de>
	<CABsx9T2v4uhUdsWEg58Xs2OhOf3ED0Q2LGmkrRpdJDxvVMexdQ@mail.gmail.com>
Message-ID: <37162.134.106.52.172.1319727016.squirrel@webmail.uni-osnabrueck.de>

Am Mo, 24.10.2011, 16:55, schrieb Gavin Andresen:
> If you assume the client has all previous transactions, then you could
> get the transaction input's prevout (from the memory pool or disk) and
> then ExtractAddress() from it.

I now created a patch based on this idea. To avoid slowing down
listtransactions or gettransaction, I put it in a separate RPC
call 'getorigins'. This is the patch:

https://github.com/javgh/bitcoin/compare/bfa4600a93...getorigins

Any obvious mistakes I made there?

Regards!
Jan



From zgenjix at yahoo.com  Thu Oct 27 15:15:13 2011
From: zgenjix at yahoo.com (Amir Taaki)
Date: Thu, 27 Oct 2011 08:15:13 -0700 (PDT)
Subject: [Bitcoin-development] Bitcoin Wiki
Message-ID: <1319728513.19054.YahooMailNeo@web121015.mail.ne1.yahoo.com>

Anybody know how to contact MT about getting it back online? I still haven't finished copy-editing the BIPs and need access to them since there's a new one to be added.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111027/6dfec4cd/attachment.html>

From nils at nilsschneider.net  Thu Oct 27 15:22:33 2011
From: nils at nilsschneider.net (Nils Schneider)
Date: Thu, 27 Oct 2011 17:22:33 +0200
Subject: [Bitcoin-development] Bitcoin Wiki
In-Reply-To: <1319728513.19054.YahooMailNeo@web121015.mail.ne1.yahoo.com>
References: <1319728513.19054.YahooMailNeo@web121015.mail.ne1.yahoo.com>
Message-ID: <4EA97739.60502@nilsschneider.net>

Can we use a git repo or something more redundant for BIPs? They're
rather important and the wiki has been unreliable before.

On 27.10.2011 17:15, Amir Taaki wrote:
> Anybody know how to contact MT about getting it back online? I still
> haven't finished copy-editing the BIPs and need access to them since
> there's a new one to be added.
> 
> 
> ------------------------------------------------------------------------------
> The demand for IT networking professionals continues to grow, and the
> demand for specialized networking skills is growing even more rapidly.
> Take a complimentary Learning at Cisco Self-Assessment and learn 
> about Cisco certifications, training, and career opportunities. 
> http://p.sf.net/sfu/cisco-dev2dev
> 
> 
> 
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development




From gavinandresen at gmail.com  Thu Oct 27 16:13:04 2011
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Thu, 27 Oct 2011 12:13:04 -0400
Subject: [Bitcoin-development] Multisignature scriptSigs
Message-ID: <CABsx9T2LDL2ii0-Fstg-TKfQXsk57m0ac90fqe3kmVCQ2TTQGQ@mail.gmail.com>

> However, I ran into the problem that IsStandard() also
> checks that the size of scriptSig is not above 200. Adding an extra
> signature there triggers this limit. I guess there is no way around
> that?

D'oh!  I forgot about that check (and should have remembered, I had to
increase it for my 'standard' multisig transactions branch).

Assuming BIPS 11 and 12 are adopted, there will be room in the
scriptSig for more than one signature. Once that happens, implementing
green addresses as an extra signature on the first scriptSig in a
transaction seems like a better way to do it than generating two
separate transactions.

Speaking of more-than-on-signature transactions:

I'm proposing a maximum 3 signatures for an IsStandard() transaction,
which would be a 600-byte scriptSig.

It is tempting to just bump the maximum up to 8 or 10, but I think we
should stay conservative about IsStandard() transaction size until
after two things happen:

1) bitcoin-qt gets smarter about downloading just block headers, and
maybe downloading transactions without scriptSigs (for transactions it
doesn't need/care to validate... need to think about that a little
more, but ByteCoin suggested that if you're not mining then the only
transaction signatures you need to check are not-yet-confirmed
transactions to you).

2) Transaction priority / maximum block size / free-transaction area /
transaction fees is reworked.  Miners should be making the policy
decisions on minimum fee per kilobyte or ECDSA signature check, and
how many free transactions (if any) they'll include in the blocks they
create.  And bitcoin clients should be smarter about looking at what
transactions are and are not getting into the chain so they can
suggest appropriate fees to users.

-- 
--
Gavin Andresen



From nanotube at gmail.com  Thu Oct 27 16:15:34 2011
From: nanotube at gmail.com (Daniel F)
Date: Thu, 27 Oct 2011 12:15:34 -0400
Subject: [Bitcoin-development] Bitcoin Wiki
In-Reply-To: <4EA97739.60502@nilsschneider.net>
References: <1319728513.19054.YahooMailNeo@web121015.mail.ne1.yahoo.com>
	<4EA97739.60502@nilsschneider.net>
Message-ID: <CAHY2ayAB1xGVMgs0WaTEoUj=Q6LvdmTV+12Y8yEb4-Ep8Bb28g@mail.gmail.com>

+1 on git. not necessarily as replacement, but at least as backup.
could possibly use markdown and github pages, which automagically
pushes git commits out to the website (uses markdown syntax, iirc)

On Thu, Oct 27, 2011 at 11:22 AM, Nils Schneider <nils at nilsschneider.net> wrote:
> Can we use a git repo or something more redundant for BIPs? They're
> rather important and the wiki has been unreliable before.
>
> On 27.10.2011 17:15, Amir Taaki wrote:
>> Anybody know how to contact MT about getting it back online? I still
>> haven't finished copy-editing the BIPs and need access to them since
>> there's a new one to be added.
>>
>>
>> ------------------------------------------------------------------------------
>> The demand for IT networking professionals continues to grow, and the
>> demand for specialized networking skills is growing even more rapidly.
>> Take a complimentary Learning at Cisco Self-Assessment and learn
>> about Cisco certifications, training, and career opportunities.
>> http://p.sf.net/sfu/cisco-dev2dev
>>
>>
>>
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
> ------------------------------------------------------------------------------
> The demand for IT networking professionals continues to grow, and the
> demand for specialized networking skills is growing even more rapidly.
> Take a complimentary Learning at Cisco Self-Assessment and learn
> about Cisco certifications, training, and career opportunities.
> http://p.sf.net/sfu/cisco-dev2dev
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>



From decker.christian at gmail.com  Thu Oct 27 17:12:20 2011
From: decker.christian at gmail.com (Christian Decker)
Date: Thu, 27 Oct 2011 19:12:20 +0200
Subject: [Bitcoin-development] Bitcoin Wiki
In-Reply-To: <CAHY2ayAB1xGVMgs0WaTEoUj=Q6LvdmTV+12Y8yEb4-Ep8Bb28g@mail.gmail.com>
References: <1319728513.19054.YahooMailNeo@web121015.mail.ne1.yahoo.com>
	<4EA97739.60502@nilsschneider.net>
	<CAHY2ayAB1xGVMgs0WaTEoUj=Q6LvdmTV+12Y8yEb4-Ep8Bb28g@mail.gmail.com>
Message-ID: <CALxbBHWvVBAfZAbxSbWYY7yyZUg8iMdZVy2UAQFMzgFvFbmbbw@mail.gmail.com>

Yup, +1 for Git.

On Thu, Oct 27, 2011 at 6:15 PM, Daniel F <nanotube at gmail.com> wrote:

> +1 on git. not necessarily as replacement, but at least as backup.
> could possibly use markdown and github pages, which automagically
> pushes git commits out to the website (uses markdown syntax, iirc)
>
> On Thu, Oct 27, 2011 at 11:22 AM, Nils Schneider <nils at nilsschneider.net>
> wrote:
> > Can we use a git repo or something more redundant for BIPs? They're
> > rather important and the wiki has been unreliable before.
> >
> > On 27.10.2011 17:15, Amir Taaki wrote:
> >> Anybody know how to contact MT about getting it back online? I still
> >> haven't finished copy-editing the BIPs and need access to them since
> >> there's a new one to be added.
> >>
> >>
> >>
> ------------------------------------------------------------------------------
> >> The demand for IT networking professionals continues to grow, and the
> >> demand for specialized networking skills is growing even more rapidly.
> >> Take a complimentary Learning at Cisco Self-Assessment and learn
> >> about Cisco certifications, training, and career opportunities.
> >> http://p.sf.net/sfu/cisco-dev2dev
> >>
> >>
> >>
> >> _______________________________________________
> >> Bitcoin-development mailing list
> >> Bitcoin-development at lists.sourceforge.net
> >> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> >
> >
> >
> ------------------------------------------------------------------------------
> > The demand for IT networking professionals continues to grow, and the
> > demand for specialized networking skills is growing even more rapidly.
> > Take a complimentary Learning at Cisco Self-Assessment and learn
> > about Cisco certifications, training, and career opportunities.
> > http://p.sf.net/sfu/cisco-dev2dev
> > _______________________________________________
> > Bitcoin-development mailing list
> > Bitcoin-development at lists.sourceforge.net
> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> >
>
>
> ------------------------------------------------------------------------------
> The demand for IT networking professionals continues to grow, and the
> demand for specialized networking skills is growing even more rapidly.
> Take a complimentary Learning at Cisco Self-Assessment and learn
> about Cisco certifications, training, and career opportunities.
> http://p.sf.net/sfu/cisco-dev2dev
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111027/ae5ab2c1/attachment.html>

From moon at justmoon.de  Thu Oct 27 17:18:02 2011
From: moon at justmoon.de (Stefan Thomas)
Date: Thu, 27 Oct 2011 19:18:02 +0200
Subject: [Bitcoin-development] Bitcoin Wiki
In-Reply-To: <CAHY2ayAB1xGVMgs0WaTEoUj=Q6LvdmTV+12Y8yEb4-Ep8Bb28g@mail.gmail.com>
References: <1319728513.19054.YahooMailNeo@web121015.mail.ne1.yahoo.com>
	<4EA97739.60502@nilsschneider.net>
	<CAHY2ayAB1xGVMgs0WaTEoUj=Q6LvdmTV+12Y8yEb4-Ep8Bb28g@mail.gmail.com>
Message-ID: <4EA9924A.2000308@justmoon.de>

+1 for something based on git. Github has a dedicated wiki feature that 
is git-backed:

https://github.com/bitcoinjs/node-bitcoin-p2p/wiki/
git://github.com/bitcoinjs/node-bitcoin-p2p.wiki.git

On 10/27/2011 6:15 PM, Daniel F wrote:
> +1 on git. not necessarily as replacement, but at least as backup.
> could possibly use markdown and github pages, which automagically
> pushes git commits out to the website (uses markdown syntax, iirc)
>
> On Thu, Oct 27, 2011 at 11:22 AM, Nils Schneider<nils at nilsschneider.net>  wrote:
>> Can we use a git repo or something more redundant for BIPs? They're
>> rather important and the wiki has been unreliable before.
>>
>> On 27.10.2011 17:15, Amir Taaki wrote:
>>> Anybody know how to contact MT about getting it back online? I still
>>> haven't finished copy-editing the BIPs and need access to them since
>>> there's a new one to be added.
>>>
>>>
>>> ------------------------------------------------------------------------------
>>> The demand for IT networking professionals continues to grow, and the
>>> demand for specialized networking skills is growing even more rapidly.
>>> Take a complimentary Learning at Cisco Self-Assessment and learn
>>> about Cisco certifications, training, and career opportunities.
>>> http://p.sf.net/sfu/cisco-dev2dev
>>>
>>>
>>>
>>> _______________________________________________
>>> Bitcoin-development mailing list
>>> Bitcoin-development at lists.sourceforge.net
>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>
>> ------------------------------------------------------------------------------
>> The demand for IT networking professionals continues to grow, and the
>> demand for specialized networking skills is growing even more rapidly.
>> Take a complimentary Learning at Cisco Self-Assessment and learn
>> about Cisco certifications, training, and career opportunities.
>> http://p.sf.net/sfu/cisco-dev2dev
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>
> ------------------------------------------------------------------------------
> The demand for IT networking professionals continues to grow, and the
> demand for specialized networking skills is growing even more rapidly.
> Take a complimentary Learning at Cisco Self-Assessment and learn
> about Cisco certifications, training, and career opportunities.
> http://p.sf.net/sfu/cisco-dev2dev
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>




From gronager at ceptacle.com  Fri Oct 28 10:24:21 2011
From: gronager at ceptacle.com (=?iso-8859-1?Q?Michael_Gr=F8nager?=)
Date: Fri, 28 Oct 2011 12:24:21 +0200
Subject: [Bitcoin-development] Detecting OP_EVAL scriptPubKeys that are
	to you
In-Reply-To: <CAAS2fgQAo-xxJxVtoXbTMZ3nvQvtiFxeqOKrN5-xxppMgmBdqg@mail.gmail.com>
References: <CANEZrP1ic4RXFzoqf66MGv=rJe3MgWxVi5nnk2VKkMc4VMCDyw@mail.gmail.com>
	<CABsx9T3WKv3RLWT+Q6s7cCLzDL3sVRCWfmPiKcSp=_Re05m+zQ@mail.gmail.com>
	<CAAS2fgSYwUdiyY2XfHhWn+aN_6a72XRKs-8W7ibZM5t0tZ28rg@mail.gmail.com>
	<CALf2ePy=3N1JQodP3s9PzH=Af1z-7qGdy_4=QW9-CJmaxYGz5Q@mail.gmail.com>
	<7A50EE90-0FFC-45FB-A27F-786AEB23A8CA@ceptacle.com>
	<CAAS2fgTx8gEztUt-UrDObMCQtfdzZc52fzS6c1q8mm+a-TjwjQ@mail.gmail.com>
	<CABsx9T3YnK9ogc3J39nO=Q+29daMTDhP2J_FGvpozTGAxD1z6Q@mail.gmail.com>
	<1089B122-1274-454C-9097-700D392BF0FA@ceptacle.com>
	<CAAS2fgQAo-xxJxVtoXbTMZ3nvQvtiFxeqOKrN5-xxppMgmBdqg@mail.gmail.com>
Message-ID: <564C59F8-8077-4603-8EAC-389C30509F02@ceptacle.com>

> Could you suggest how else we could gain the advantages of op_eval
> without it?   How can I secure my wallet under whatever scheme I like?
> create a trust that requires multiparty signoff? and securely have
> senders pay into it without expecting them all to handle some rare and
> complicated procedure for sending to me?

Yes - by the burdensome address ;) - which I am not sure I consider that much of a trouble, for practical uses... Anyway, it could just be added to the URI scheme and then it would still only be a click away.

> but it
> seems to me that there is a serious misunderstanding that there is a
> bijection between hash160s and public keys, and one between ECC
> private keys and spendable transactions, and that this bijection is
> desirable or even essential to bitcoin.

So far we had by the standard transactions a nice bijection, I do however, share your concern for other and more rich scripting... And here we need to make some choices! 
Do we want to keep this notion of transactions between addresses or do we want to start unfold the richness of the scripting - I am not sure we actually gain that much from OP_EVAL and the extra scripting. And what bothers me is that you then cannot define a set of data (be that key, scripts or whatever) from which you can obtain all possible txes send to you. If I e.g. looses this argument and want to donate a beer to each of you and Gavin, that I want you to drink together. I would make a "both of two" btc-addresses script transaction using OP_EVAL. And post it.
You would then not be able to know that you actually got a beer unless I told you so in a mail.

This means that we move from a setup where transactions needs not only to be asked for but also they need to be announced by the sender. I don't like this... 

Further, if you make a uint160 from a OP_EVAL script and post this as a bitcoin address - the user should then know that this was a special address - otherwise he would be sending money nowhere. I agree that this could be encoded into the bitcoin address using e.g. a 2... instead of a 3..., but as you mention yourself this is only the start of the OP_EVAL uses and hence you would need a whole series of strange numbering to define what script a specific address was referring to. 

At least it challenges my esthetics...

Cheers,

M


From gavinandresen at gmail.com  Fri Oct 28 18:33:44 2011
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Fri, 28 Oct 2011 14:33:44 -0400
Subject: [Bitcoin-development] 0.5 release updated
Message-ID: <CABsx9T3Csb5qKTeEWoA_1_e0s0OnXFjxVpw2EV0RP+6hATeDrA@mail.gmail.com>

Quick update on why there is no final 0.5 release out yet:

Short answer: because I'm really paranoid about bitcoin binary builds,
and the switch to Qt means a change in the way the builds are done.

Long answer:

Linux builds should be all set; the 'gitian' trusted build process works nicely.

Windows builds are being difficult; we need a gcc expert to help debug
the 'gitian' cross-compile (see
https://github.com/bitcoin/bitcoin/pull/587 ).

Unless somebody steps forward and says "I'll support compiling
bitcoin-qt/bitcoind with Visual Studio) I'm going to remove
src/makefile.vc and make sure the readmes say that only the mingw
toolchain is supported.

Mac builds were slightly broken for the 0.4 release (they don't run on
OSX 10.5-- you need 10.6 or greater). I'm "recompiling the world" to
hopefully fix that, and hope to have mac binaries available soon (let
me know if you can help test, especially if you have a 32-bit Intel
mac running 10.5).

On my wish list for builds (anybody want to volunteer?):

I think it'd be spiffy to have a .pro file to compile bitcoind;
maintaining N different makefiles is annoying and error-prone.

-- 
--
Gavin Andresen



From etotheipi at gmail.com  Fri Oct 28 22:28:30 2011
From: etotheipi at gmail.com (Alan Reiner)
Date: Fri, 28 Oct 2011 18:28:30 -0400
Subject: [Bitcoin-development] Multi-sig tx execution ideas
Message-ID: <4EAB2C8E.6040103@gmail.com>

I just posted BIP 0010 to gist : https://gist.github.com/1321518

The goal is to provide a standard method for proposing how to spend 
multi-sig TxOuts, and collect signatures without actually having to 
understand BTC under-the-hood.  I envision, even without any program 
installed, moderately-interested users could figure out this process 
without a third-party.  The addition of an installed program that 
automatically detects .txdp files and intelligently presents the 
information to the users, could bring this functionality to even more 
users.  Perhaps I'm too optimistic, though...

This is, of course, open for discussion/improvement.  I've talked 
briefly with Gavin about this, and he suggested Base64 instead of hex 
for the block-encoding.  I'd lean towards Base58 because developers 
already have it in their codebase.  Also, the separation of fields by 
underscore characters could be changed.  Spaces would make it easier for 
C++ to read them in using stream operators "<<" and ">>".

-Alan





From luke at dashjr.org  Fri Oct 28 23:56:01 2011
From: luke at dashjr.org (Luke-Jr)
Date: Fri, 28 Oct 2011 19:56:01 -0400
Subject: [Bitcoin-development] 0.5 release updated
In-Reply-To: <CABsx9T3Csb5qKTeEWoA_1_e0s0OnXFjxVpw2EV0RP+6hATeDrA@mail.gmail.com>
References: <CABsx9T3Csb5qKTeEWoA_1_e0s0OnXFjxVpw2EV0RP+6hATeDrA@mail.gmail.com>
Message-ID: <201110281956.04246.luke@dashjr.org>

On Friday, October 28, 2011 2:33:44 PM Gavin Andresen wrote:
> Windows builds are being difficult; we need a gcc expert to help debug
> the 'gitian' cross-compile (see
> https://github.com/bitcoin/bitcoin/pull/587 ).

This is an Ubuntu issue. Can't gitian use something else?

> I think it'd be spiffy to have a .pro file to compile bitcoind;
> maintaining N different makefiles is annoying and error-prone.

Better would be a GUI=0/1 option to the bitcoin-qt.pro until a nicer (ideally 
automake/autoconf) system is implemented...



From witchspace81 at gmail.com  Sat Oct 29 08:09:06 2011
From: witchspace81 at gmail.com (John Smith)
Date: Sat, 29 Oct 2011 10:09:06 +0200
Subject: [Bitcoin-development] 0.5 release updated
In-Reply-To: <201110281956.04246.luke@dashjr.org>
References: <CABsx9T3Csb5qKTeEWoA_1_e0s0OnXFjxVpw2EV0RP+6hATeDrA@mail.gmail.com>
	<201110281956.04246.luke@dashjr.org>
Message-ID: <CAJNQ0sv5tf5GAB=j9SYeC1ASzzKptJnoKt-tB7QD3dy_oG8L2Q@mail.gmail.com>

> Better would be a GUI=0/1 option to the bitcoin-qt.pro until a nicer
> (ideally
> automake/autoconf) system is implemented...
>

Are you sure you want to require qmake for the daemon build?

I agree having a unified build system would be nice, but qmake doesn't add
anything for non-qt software. Better to stick with a makefile.

If the goal is 'making it easier for the user' maybe it'd be best to make a
bash script that wraps both, that builds the daemon if possible, and the UI
if possible, and converts command line flags.

JS
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111029/ba26ae02/attachment.html>

From gavinandresen at gmail.com  Sat Oct 29 17:01:00 2011
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Sat, 29 Oct 2011 13:01:00 -0400
Subject: [Bitcoin-development] Detecting OP_EVAL scriptPubKeys that are
	to you
In-Reply-To: <564C59F8-8077-4603-8EAC-389C30509F02@ceptacle.com>
References: <CANEZrP1ic4RXFzoqf66MGv=rJe3MgWxVi5nnk2VKkMc4VMCDyw@mail.gmail.com>
	<CABsx9T3WKv3RLWT+Q6s7cCLzDL3sVRCWfmPiKcSp=_Re05m+zQ@mail.gmail.com>
	<CAAS2fgSYwUdiyY2XfHhWn+aN_6a72XRKs-8W7ibZM5t0tZ28rg@mail.gmail.com>
	<CALf2ePy=3N1JQodP3s9PzH=Af1z-7qGdy_4=QW9-CJmaxYGz5Q@mail.gmail.com>
	<7A50EE90-0FFC-45FB-A27F-786AEB23A8CA@ceptacle.com>
	<CAAS2fgTx8gEztUt-UrDObMCQtfdzZc52fzS6c1q8mm+a-TjwjQ@mail.gmail.com>
	<CABsx9T3YnK9ogc3J39nO=Q+29daMTDhP2J_FGvpozTGAxD1z6Q@mail.gmail.com>
	<1089B122-1274-454C-9097-700D392BF0FA@ceptacle.com>
	<CAAS2fgQAo-xxJxVtoXbTMZ3nvQvtiFxeqOKrN5-xxppMgmBdqg@mail.gmail.com>
	<564C59F8-8077-4603-8EAC-389C30509F02@ceptacle.com>
Message-ID: <CABsx9T09Eksb2=GHaNq+UQnVq5BYeaUn0Uc6SUwZ08-2H_ViGQ@mail.gmail.com>

RE: buying me and Gregory a shared beer:

> I would make a "both of two" btc-addresses script transaction using OP_EVAL. And post it.
> You would then not be able to know that you actually got a beer unless I told you so in a mail.

But that transaction won't show up in my bitcoin wallet as bitcoins I can spend.

And even if my wallet DID show me "transactions that involve your keys
but that you can't spend," all I would know is there are N bitcoins
that I can only spend if I can somehow figure out that Gregory has
public key XYZ.

How would I know that unless you told me?

I think the right long-term solution is moving away from bitcoin
addresses as 'pay-to entity' and create an infrastructure where we're
paying people or organizations. But in the short term, I think there
are lots of benefits to creating a new type of bitcoin address built
on top of OP_EVAL that will be very easy for all of our existing
infrastructure to support.

-- 
--
Gavin Andresen



From witchspace81 at gmail.com  Sat Oct 29 21:16:39 2011
From: witchspace81 at gmail.com (John Smith)
Date: Sat, 29 Oct 2011 23:16:39 +0200
Subject: [Bitcoin-development] Help wanted: translations
In-Reply-To: <CAJNQ0suwpzgzkMEZzzvuWkwjPbqzHWEboRnYma8=_isT7KQKkQ@mail.gmail.com>
References: <CABsx9T2eCpxqzbd0PmWJxCDFLHwOix2BOYp+APQGMZYh_O+R4g@mail.gmail.com>
	<4EA2A023.5000603@nilsschneider.net>
	<4EA2B68C.3050901@bitminter.com>
	<4EA2C4FE.2020609@nilsschneider.net>
	<4EA2EBCC.9000207@bitminter.com>
	<CALxbBHWfm_sjhh5kPtm=mbGp17LGzwtY-0+vwvJ4XaQQoJfWLw@mail.gmail.com>
	<CAJNQ0svAPqPdr_oWL-D-y3Om2dzFQ+0DS=K=ZEi+7+VVMDHtLw@mail.gmail.com>
	<4EA5B485.9090300@bitminter.com>
	<CAJNQ0suwpzgzkMEZzzvuWkwjPbqzHWEboRnYma8=_isT7KQKkQ@mail.gmail.com>
Message-ID: <CAJNQ0stHj5ezVkhNmMBjR3p8QkWdW76RgpZeoYuY4LS24BKPbQ@mail.gmail.com>

Fixed:
https://github.com/bitcoin/bitcoin/commit/8d3e1becf0fa6c27c7df4a52daf181282a3d2468

It seems that somehow strings from the old Wx UI had ended up in
bitcoinstrings.cpp. I re-ran the string extraction script and the duplicated
messaged should be gone.

JS

On Tue, Oct 25, 2011 at 7:02 AM, John Smith <witchspace81 at gmail.com> wrote:

> Those indeed seems weird... I'll take a look at it.
>
> JS
>
>
> On Mon, Oct 24, 2011 at 8:55 PM, Geir Harald Hansen <
> operator at bitminter.com> wrote:
>
>> Three quick examples of duplicated strings. There are many more. Some of
>> the smaller ones may make sense to have duplicated several times in
>> english as their translated versions may differ in other languages. But
>> with these below I don't see the point.
>>
>> Twice, with a small difference (<b> vs. none):
>>
>> WARNING: If you encrypt your wallet and lose your passphrase, you will
>> <b>LOSE ALL OF YOUR BITCOINS</b>! Are you sure you wish to encrypt your
>> wallet?
>>
>> WARNING: If you encrypt your wallet and lose your passphrase, you will
>> LOSE ALL OF YOUR BITCOINS! Are you sure you wish to encrypt your wallet?
>>
>> Again twice, with a small difference (%s vs %1):
>>
>> This transaction is over the size limit. You can still send it for a fee
>> of %1, which goes to the nodes that process your transaction and helps
>> to support the network. Do you want to pay the fee?
>>
>> This transaction is over the size limit. You can still send it for a fee
>> of %s, which goes to the nodes that process your transaction and helps
>> to support the network. Do you want to pay the fee?
>>
>> Twice, looks exactly the same:
>>
>> Generated coins must wait 120 blocks before they can be spent. When you
>> generated this block, it was broadcast to the network to be added to the
>> block chain. If it fails to get into the chain, it will change to "not
>> accepted" and not be spendable. This may occasionally happen if another
>> node generates a block within a few seconds of yours.
>>
>> Generated coins must wait 120 blocks before they can be spent. When you
>> generated this block, it was broadcast to the network to be added to the
>> block chain. If it fails to get into the chain, it will change to "not
>> accepted" and not be spendable. This may occasionally happen if another
>> node generates a block within a few seconds of yours.
>>
>> Regards,
>> Geir Harald Hansen
>>
>> On 24.10.2011 20:10, John Smith wrote:
>> >
>> > Indeed. It could make sense. That's the reason why Qt distinguishes
>> > strings based on context as well as content.
>> >
>> > But it could also be nonsense. Can you be more specific as to which
>> strings?
>> >
>> > JS
>> >
>> > On Mon, Oct 24, 2011 at 1:24 PM, Christian Decker
>> > <decker.christian at gmail.com <mailto:decker.christian at gmail.com>> wrote:
>> >
>> >     Actually no, the same string may have to be translated in different
>> >     ways depending on the context they appear in. That sometimes happens
>> >     for italian, and I'm sure it happens in other cases too. Not sure
>> >     whether this is the cause for duplicate strings for now, but it
>> might.
>> >
>> >     Regards,
>> >     Chris
>> >
>> >
>> >     On Sat, Oct 22, 2011 at 6:14 PM, Geir Harald Hansen
>> >     <operator at bitminter.com <mailto:operator at bitminter.com>> wrote:
>> >
>> >         What do you know, it worked. Finished.
>> >
>> >         Once again Norway finishes ahead of Sweden. :P
>> >
>> >         By the way, I had to translate some of the exact same strings
>> >         2-3 times.
>> >         That's something you may want to improve on.
>> >
>> >         On 22.10.2011 15:28, Nils Schneider wrote:
>> >         > I think it's possible to add it yourself. Just click on "add
>> >         translation"
>> >         >
>> >         > On 22.10.2011 14:26, Geir Harald Hansen wrote:
>> >         >> On 22.10.2011 12:51, Nils Schneider wrote:
>> >         >>>> And is anybody willing to take the job of coordinating
>> >         translation
>> >         >>>> efforts, figuring out if Transifex is a good tool to use,
>> >         and writing
>> >         >>>> some documentation to make it easy for people to create and
>> >         submit new
>> >         >>>> translations?
>> >         >>>
>> >         >>> I have exported all .ts to transifex.
>> >         >>>
>> >         >>> https://www.transifex.net/projects/p/bitcoin/resource/tx/
>> >         >>
>> >         >> If you add Norwegian Bokm?l, I can do that one. Language code
>> >         "nb".
>> >         >>
>> >         >> Regards,
>> >         >> Geir Harald Hansen
>>
>>
>>
>>
>> ------------------------------------------------------------------------------
>> The demand for IT networking professionals continues to grow, and the
>> demand for specialized networking skills is growing even more rapidly.
>> Take a complimentary Learning at Cisco Self-Assessment and learn
>> about Cisco certifications, training, and career opportunities.
>> http://p.sf.net/sfu/cisco-dev2dev
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111029/584d99af/attachment.html>

From gronager at ceptacle.com  Mon Oct 31 08:50:49 2011
From: gronager at ceptacle.com (=?iso-8859-1?Q?Michael_Gr=F8nager?=)
Date: Mon, 31 Oct 2011 09:50:49 +0100
Subject: [Bitcoin-development] Detecting OP_EVAL scriptPubKeys that are
	to you
In-Reply-To: <CABsx9T09Eksb2=GHaNq+UQnVq5BYeaUn0Uc6SUwZ08-2H_ViGQ@mail.gmail.com>
References: <CANEZrP1ic4RXFzoqf66MGv=rJe3MgWxVi5nnk2VKkMc4VMCDyw@mail.gmail.com>
	<CABsx9T3WKv3RLWT+Q6s7cCLzDL3sVRCWfmPiKcSp=_Re05m+zQ@mail.gmail.com>
	<CAAS2fgSYwUdiyY2XfHhWn+aN_6a72XRKs-8W7ibZM5t0tZ28rg@mail.gmail.com>
	<CALf2ePy=3N1JQodP3s9PzH=Af1z-7qGdy_4=QW9-CJmaxYGz5Q@mail.gmail.com>
	<7A50EE90-0FFC-45FB-A27F-786AEB23A8CA@ceptacle.com>
	<CAAS2fgTx8gEztUt-UrDObMCQtfdzZc52fzS6c1q8mm+a-TjwjQ@mail.gmail.com>
	<CABsx9T3YnK9ogc3J39nO=Q+29daMTDhP2J_FGvpozTGAxD1z6Q@mail.gmail.com>
	<1089B122-1274-454C-9097-700D392BF0FA@ceptacle.com>
	<CAAS2fgQAo-xxJxVtoXbTMZ3nvQvtiFxeqOKrN5-xxppMgmBdqg@mail.gmail.com>
	<564C59F8-8077-4603-8EAC-389C30509F02@ceptacle.com>
	<CABsx9T09Eksb2=GHaNq+UQnVq5BYeaUn0Uc6SUwZ08-2H_ViGQ@mail.gmail.com>
Message-ID: <267605F1-9DEA-4870-81C3-C27E11850AD2@ceptacle.com>

> 
> How would I know that unless you told me?

At least you would have a hunch that something like that had happened as one of your addresses had been part of a transaction (at least in my setup it would pop up immediately...).

> 
> I think the right long-term solution is moving away from bitcoin
> addresses as 'pay-to entity' and create an infrastructure where we're
> paying people or organizations.

I am not sure what you mean by this - just recall that the semi anonymously feature of bitcoin is one of its key features.

> But in the short term, I think there
> are lots of benefits to creating a new type of bitcoin address built
> on top of OP_EVAL that will be very easy for all of our existing
> infrastructure to support.

Still, how do you solve the end less expansions of bitcoin addresses that each, depending of a leading 1, 2, 3... means a quite specific script inside the OP_EVAL ??? Its not esthetic...

Cheers,

M

> 
> -- 
> --
> Gavin Andresen





From gavinandresen at gmail.com  Mon Oct 31 12:30:50 2011
From: gavinandresen at gmail.com (Gavin)
Date: Mon, 31 Oct 2011 08:30:50 -0400
Subject: [Bitcoin-development] Snowstorm
Message-ID: <580FA617-2CC8-4FB5-85A0-AAD0ED776AEC@gmail.com>

We've got no power, so it might be a day or two before I can help verify gitian builds or pull patches.

Sent from my iPhone


