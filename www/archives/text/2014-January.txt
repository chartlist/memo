From pete at petertodd.org  Wed Jan  1 04:53:42 2014
From: pete at petertodd.org (Peter Todd)
Date: Tue, 31 Dec 2013 23:53:42 -0500
Subject: [Bitcoin-development] The insecurity of merge-mining
In-Reply-To: <201312310114.05600.luke@dashjr.org>
References: <CAMkFLsSwKEiEtV1OaAsGPiU8iAWbb77fDNJDmRwbgKnZ_kjG6Q@mail.gmail.com>
	<20131230232225.GA10594@tilt> <201312310114.05600.luke@dashjr.org>
Message-ID: <20140101045342.GA7103@tilt>

On Tue, Dec 31, 2013 at 01:14:05AM +0000, Luke-Jr wrote:
> On Monday, December 30, 2013 11:22:25 PM Peter Todd wrote:
> > that you are using merge-mining is a red-flag because without majority, or
> > at least near-majority, hashing power an attacker can 51% attack your
> > altcoin at negligible cost by re-using existing hashing power.
> 
> I strongly disagree on this isolated point. Using the same logic, Bitcoin is 
> vulnerable to an attacker at negligible cost by re-using existing hashing 
> power from mining Namecoin. Any non-scam altcoin is pretty safe using merged 
> mining, since any would-be attacker is going to have it in their interests to 
> invest in the altcoin instead of attacking it. It's only the scam ones that 
> want to pump & dump with no improvements, that are really at risk here.
> 
> The rational decision for a non-scam altcoin, is to take advantage of merged 
> mining to get as much security as possible. There are also some possible 
> tricks to get the full security of the bitcoin miners even when not all 
> participate in your altcoin (but this area probably needs some studying to get 
> right).

You assume the value of a crypto-currency is equal to all miners, it's
not.

Suppose I create a merge-mined Zerocoin implementation with a 1:1
BTC/ZTC exchange rate enforced by the software. You can't argue this is
a scamcoin; no-one is getting rich. There's a 1:1 exchange rate so the
only thing you can do with the coin is get some privacy. But inevitably
some miners won't agree that enabling better privacy is a good thing, or
their local governments won't. Either way, they can attack the Zerocoin
merge-mined chain with a marginal cost of nearly zero.

OTOH if the Zerocoin scheme was implemented by embedding ZTC
transactions within standard Bitcoin transactions - even without any
attempt at hiding them - the attackers would need a 50% majority of
hashing power to succeed. Of course potentially slow confirmations is a
trade-off, but that's likely a perfectly OK trade-off in this case.

-- 
'peter'[:-1]@petertodd.org
000000000000000f9102d27cfd61ea9e8bb324593593ca3ce6ba53153ff251b3
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 490 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131231/31697ca5/attachment.sig>

From luke at dashjr.org  Wed Jan  1 05:09:27 2014
From: luke at dashjr.org (Luke-Jr)
Date: Wed, 1 Jan 2014 05:09:27 +0000
Subject: [Bitcoin-development] The insecurity of merge-mining
In-Reply-To: <20140101045342.GA7103@tilt>
References: <CAMkFLsSwKEiEtV1OaAsGPiU8iAWbb77fDNJDmRwbgKnZ_kjG6Q@mail.gmail.com>
	<201312310114.05600.luke@dashjr.org> <20140101045342.GA7103@tilt>
Message-ID: <201401010509.27977.luke@dashjr.org>

On Wednesday, January 01, 2014 4:53:42 AM Peter Todd wrote:
> On Tue, Dec 31, 2013 at 01:14:05AM +0000, Luke-Jr wrote:
> > On Monday, December 30, 2013 11:22:25 PM Peter Todd wrote:
> > > that you are using merge-mining is a red-flag because without majority,
> > > or at least near-majority, hashing power an attacker can 51% attack
> > > your altcoin at negligible cost by re-using existing hashing power.
> > 
> > I strongly disagree on this isolated point. Using the same logic, Bitcoin
> > is vulnerable to an attacker at negligible cost by re-using existing
> > hashing power from mining Namecoin. Any non-scam altcoin is pretty safe
> > using merged mining, since any would-be attacker is going to have it in
> > their interests to invest in the altcoin instead of attacking it. It's
> > only the scam ones that want to pump & dump with no improvements, that
> > are really at risk here.
> > 
> > The rational decision for a non-scam altcoin, is to take advantage of
> > merged mining to get as much security as possible. There are also some
> > possible tricks to get the full security of the bitcoin miners even when
> > not all participate in your altcoin (but this area probably needs some
> > studying to get right).
> 
> You assume the value of a crypto-currency is equal to all miners, it's
> not.
> 
> Suppose I create a merge-mined Zerocoin implementation with a 1:1
> BTC/ZTC exchange rate enforced by the software. You can't argue this is
> a scamcoin; no-one is getting rich. There's a 1:1 exchange rate so the
> only thing you can do with the coin is get some privacy. But inevitably
> some miners won't agree that enabling better privacy is a good thing, or
> their local governments won't. Either way, they can attack the Zerocoin
> merge-mined chain with a marginal cost of nearly zero.

Not necessarily. If Zerocoin was tied directly to Bitcoin proof-of-work, the 
worst they could do is not-participate by mining empty blocks.

> OTOH if the Zerocoin scheme was implemented by embedding ZTC
> transactions within standard Bitcoin transactions - even without any
> attempt at hiding them - the attackers would need a 50% majority of
> hashing power to succeed. Of course potentially slow confirmations is a
> trade-off, but that's likely a perfectly OK trade-off in this case.

Potentially slow confirmation is also the only shortcoming of using Bitcoin's 
proof-of-work directly.

Luke



From pete at petertodd.org  Wed Jan  1 05:25:14 2014
From: pete at petertodd.org (Peter Todd)
Date: Wed, 1 Jan 2014 00:25:14 -0500
Subject: [Bitcoin-development] The insecurity of merge-mining
In-Reply-To: <201401010509.27977.luke@dashjr.org>
References: <CAMkFLsSwKEiEtV1OaAsGPiU8iAWbb77fDNJDmRwbgKnZ_kjG6Q@mail.gmail.com>
	<201312310114.05600.luke@dashjr.org> <20140101045342.GA7103@tilt>
	<201401010509.27977.luke@dashjr.org>
Message-ID: <20140101052513.GB7103@tilt>

On Wed, Jan 01, 2014 at 05:09:27AM +0000, Luke-Jr wrote:
> > You assume the value of a crypto-currency is equal to all miners, it's
> > not.
> > 
> > Suppose I create a merge-mined Zerocoin implementation with a 1:1
> > BTC/ZTC exchange rate enforced by the software. You can't argue this is
> > a scamcoin; no-one is getting rich. There's a 1:1 exchange rate so the
> > only thing you can do with the coin is get some privacy. But inevitably
> > some miners won't agree that enabling better privacy is a good thing, or
> > their local governments won't. Either way, they can attack the Zerocoin
> > merge-mined chain with a marginal cost of nearly zero.
> 
> Not necessarily. If Zerocoin was tied directly to Bitcoin proof-of-work, the 
> worst they could do is not-participate by mining empty blocks.

Nope. Tying the alt-coin difficulty to the Bitcoin difficulty isn't some
magic way to avoid a 51% attack - you still need a majority of
consensus. The attackers can still mine a conflicting chain and there's
still no reasonable way to choose between the two chains other than
proof-of-something. Even worse, then can do a data-hiding attack by
mining a conflicting chain without publishing the blockchain data, then
revealing it some time in the future, or just sowing FUD by making it
clear that the mining is happening. Like it or not crypto-coins solve
double-spending with proof-of-publication, and that can't be done
without some kind of mathematically verifiable majority aligned with the
interests of the crypto-coin users.

Recall that my zookeyv(1) and zerocoin alt(2) proposals from last summer
was specifically designed to take that situation into account, and of
course could at best only make it clear that it was happening and how
many Bitcoins needed to be sacrificed to make the chain secure.


1) #bitcoin-wizards, 2013-05-31
2) http://www.mail-archive.com/bitcoin-development at lists.sourceforge.net/msg02472.html

-- 
'peter'[:-1]@petertodd.org
000000000000000f9102d27cfd61ea9e8bb324593593ca3ce6ba53153ff251b3
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 490 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140101/f2599b87/attachment.sig>

From jeremy at taplink.co  Wed Jan  1 10:02:02 2014
From: jeremy at taplink.co (Jeremy Spilman)
Date: Wed, 01 Jan 2014 02:02:02 -0800
Subject: [Bitcoin-development] Dedicated server for bitcoin.org,
	your thoughts?
In-Reply-To: <4264e886-48de-40ac-921a-a60502595060@email.android.com>
References: <52A3C8A5.7010606@gmail.com>
	<1795f3067ba3fcdd0caf978cc59ff024.squirrel@fruiteater.riseup.net>
	<52A435EA.7090405@gmail.com> <201312081237.24473.luke@dashjr.org>
	<CANAnSg2OrmQAcZ+cZdtQeADicH3U29QOgYPfP1AQhOMP6+P1wg@mail.gmail.com>
	<CAAS2fgR0khyJxmz9c2Oc87hOFgiNuiPJuaeugGajdo_EcKEW9w@mail.gmail.com>
	<20131212205106.GA4572@netbook.cypherspace.org>
	<CANAnSg3nPhrk2k=yDKf39AuBQnSuTWJbgANdMhGe=soiOy0NTw@mail.gmail.com>
	<CAAS2fgTmWRMxYweu3sNn_X7grgjUqTQujM-DbZRxG_YMZnD=7g@mail.gmail.com>
	<CANEZrP2X_63qkuNuk0MvsLR9ewd7HR0mPVaD7bZSgWMTJ5-9FQ@mail.gmail.com>
	<CAAS2fgQmMZ6RYjbJ6ZfFO5+ZhZoR4d4yMf8CXLXKPmZt3-Je4Q@mail.gmail.com>
	<CANEZrP1mdJNa7ADkUXTGDNKMSCROjGAVbMXZXxodxCz1LFDzZw@mail.gmail.com>
	<op.w8y642nryldrnw@laptop-air.hsd1.ca.comcast.net>
	<4264e886-48de-40ac-921a-a60502595060@email.android.com>
Message-ID: <op.w8z55onhyldrnw@laptop-air.hsd1.ca.comcast.net>

So I looked into gitian, the first thing I noticed was the hashes that  
people were signing, for example:

    https://github.com/bitcoin/gitian.sigs/blob/master/0.8.6-win32/gavinandresen/bitcoin-build.assert

don't match the hash of the file 'bitcoin-0.8.6-win32-setup.exe' actually  
hosted by sourceforce. That was a bit alarming at first, but I talked to  
BlueMatt and maaku on IRC and the difference is due to Gavin Authenticode  
signing the executable for windows.

BlueMatt asked if someone could implement in gitian-downloader a way to  
strip off the signature so that we could get back to the raw binary with a  
hash that matches what everyone is producing from gitian.  I found:

   http://blog.didierstevens.com/programs/disitool/

which is a Python script which can strip the signature nicely, but the  
hashes still don't match.

I couldn't find a gitian build of 0.8.6 so I built my own, and after  
verifying the hash for v0.8.6 was '49547ff9...' as expected I looked at  
the hex diff between that and the sig-stripped .exe from sourceforge, and  
the only two differences are:

   - At offset D8 the stripped file has '5D E2 B2' versus 'F9 F4 00' in the  
gitian build
   - The sig-stripped file has an extra byte '00' at the end

I started to look at the file spec for windows PE files and quickly  
thought better of it. Maybe someone better informed can chime in on what  
those three bytes at offset D8 specify.

I'm not sure if we want to patch the signature onto the gitian build, or  
strip the signature off of the Gavin-signed build, but something of the  
sort is necessary if you want get gitian-downloader to match the official  
distro (for Windows at least).

In any case, I think wallet users want to know when an upgrade is  
available, and ability to click an 'update' button get a binary they can  
trust. It's not a problem unique to bitcoind, deterministic builds are  
awesome, but I don't think fully solve it.

Thanks,
Jeremy

On Tue, 31 Dec 2013 13:33:54 -0800, Matt Corallo  
<bitcoin-list at bluematt.me> wrote:

> We already have a wonderful system for secure updating -  
> gitian-downloader. We just neither use it >not bother making actual  
> gitian releases so anyone can use it to verify signatures of downloads.




From laanwj at gmail.com  Wed Jan  1 11:37:51 2014
From: laanwj at gmail.com (Wladimir)
Date: Wed, 1 Jan 2014 12:37:51 +0100
Subject: [Bitcoin-development] Dedicated server for bitcoin.org,
	your thoughts?
In-Reply-To: <op.w8z55onhyldrnw@laptop-air.hsd1.ca.comcast.net>
References: <52A3C8A5.7010606@gmail.com>
	<1795f3067ba3fcdd0caf978cc59ff024.squirrel@fruiteater.riseup.net>
	<52A435EA.7090405@gmail.com> <201312081237.24473.luke@dashjr.org>
	<CANAnSg2OrmQAcZ+cZdtQeADicH3U29QOgYPfP1AQhOMP6+P1wg@mail.gmail.com>
	<CAAS2fgR0khyJxmz9c2Oc87hOFgiNuiPJuaeugGajdo_EcKEW9w@mail.gmail.com>
	<20131212205106.GA4572@netbook.cypherspace.org>
	<CANAnSg3nPhrk2k=yDKf39AuBQnSuTWJbgANdMhGe=soiOy0NTw@mail.gmail.com>
	<CAAS2fgTmWRMxYweu3sNn_X7grgjUqTQujM-DbZRxG_YMZnD=7g@mail.gmail.com>
	<CANEZrP2X_63qkuNuk0MvsLR9ewd7HR0mPVaD7bZSgWMTJ5-9FQ@mail.gmail.com>
	<CAAS2fgQmMZ6RYjbJ6ZfFO5+ZhZoR4d4yMf8CXLXKPmZt3-Je4Q@mail.gmail.com>
	<CANEZrP1mdJNa7ADkUXTGDNKMSCROjGAVbMXZXxodxCz1LFDzZw@mail.gmail.com>
	<op.w8y642nryldrnw@laptop-air.hsd1.ca.comcast.net>
	<4264e886-48de-40ac-921a-a60502595060@email.android.com>
	<op.w8z55onhyldrnw@laptop-air.hsd1.ca.comcast.net>
Message-ID: <CA+s+GJCmnzBEUXQ=4m5OxGeyFbjE39R2DWsmwLqEHfZsaxTcbg@mail.gmail.com>

>
> In any case, I think wallet users want to know when an upgrade is
> available, and ability to click an 'update' button get a binary they can
> trust. It's not a problem unique to bitcoind, deterministic builds are
> awesome, but I don't think fully solve it.
>

Deterministic builds are one part of the equation. Matt Corallo actually
did implement auto-updating using gitian updater:
https://github.com/bitcoin/bitcoin/pull/1453

It ran into lots of bike shedding and was eventually abandoned, but there
is no question whether it is possible with the current build process.

Wladimir
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140101/1b70dd49/attachment.html>

From mike at plan99.net  Wed Jan  1 15:10:05 2014
From: mike at plan99.net (Mike Hearn)
Date: Wed, 1 Jan 2014 15:10:05 +0000
Subject: [Bitcoin-development] Dedicated server for bitcoin.org,
	your thoughts?
In-Reply-To: <op.w8y642nryldrnw@laptop-air.hsd1.ca.comcast.net>
References: <52A3C8A5.7010606@gmail.com>
	<1795f3067ba3fcdd0caf978cc59ff024.squirrel@fruiteater.riseup.net>
	<52A435EA.7090405@gmail.com> <201312081237.24473.luke@dashjr.org>
	<CANAnSg2OrmQAcZ+cZdtQeADicH3U29QOgYPfP1AQhOMP6+P1wg@mail.gmail.com>
	<CAAS2fgR0khyJxmz9c2Oc87hOFgiNuiPJuaeugGajdo_EcKEW9w@mail.gmail.com>
	<20131212205106.GA4572@netbook.cypherspace.org>
	<CANAnSg3nPhrk2k=yDKf39AuBQnSuTWJbgANdMhGe=soiOy0NTw@mail.gmail.com>
	<CAAS2fgTmWRMxYweu3sNn_X7grgjUqTQujM-DbZRxG_YMZnD=7g@mail.gmail.com>
	<CANEZrP2X_63qkuNuk0MvsLR9ewd7HR0mPVaD7bZSgWMTJ5-9FQ@mail.gmail.com>
	<CAAS2fgQmMZ6RYjbJ6ZfFO5+ZhZoR4d4yMf8CXLXKPmZt3-Je4Q@mail.gmail.com>
	<CANEZrP1mdJNa7ADkUXTGDNKMSCROjGAVbMXZXxodxCz1LFDzZw@mail.gmail.com>
	<op.w8y642nryldrnw@laptop-air.hsd1.ca.comcast.net>
Message-ID: <CANEZrP3DmATBpi_SNS2R98R2Lf3cfuYK3dE_6yCwTL-MgYpHLg@mail.gmail.com>

That seems overly complicated, there's no need for the Bitcoin protocol to
be involved. Deterministic builds with threshold signed updates are a
problem the entire crypto community is now interested in solving - any
solution should be generic.

Really all you need is an update engine that allows a CHECKMULTISIG type
approach. When the update engine is not under our control, i.e. on Android,
Shoup style RSA threshold signatures can potentially work (though I must
admit, I have never found time to play with the implementation I have for
that algorithm).



On Tue, Dec 31, 2013 at 9:25 PM, Jeremy Spilman <jeremy at taplink.co> wrote:

>  I didn't know about the dedicated server meltdown, it wasn't any of my
> infra. Anyway, my previous offer still stands.
>
> One less 'security theater' approach would be if we could provide
> forward-validation of updates using the blockchain. It's always going to be
> up to the user the first time they install the wallet to verify the
> provenance of the binaries/source. From that point forward, we could make
> it easier if the wallet could detect updates and prove they were valid.
>
> This could be as simple as hard-coding a public key into the client and
> checking a signature on the new binaries. But it could also be more
> interesting...
>
> For example, a well known address on the blockchain corresponds to
> multi-sig with keys controlled by developers (or whatever key policy the
> release team wants to impose). A spend from that address announces a new
> release, and includes the expected hash of the file.
>
> You would probably need some way to handle the different release targets.
> A more rigorous approach could identify all the various releases in terms
> of a BIP32 xpubkey whose branches would correspond to the different release
> trains and platform builds. Spends from a node announce the release and the
> expected hash.
>
> This provides zero benefit if the wallet software is already compromised,
> but I think this would allow trusted automatic update notification, and a
> trusted way to deliver the expected hashes. It also might resolve some of
> the consternation around when a release is truly "released", if that's
> really a problem.
>
> I'm not sure how far along the slope you would want to go; 1) announcing
> updates in the UI, 2) providing a button the user could click to verify a
> binary matches its expected hash, 3) click to download and verify the
> upgrade matches the expected hash, 4) click to upgrade
>
> Formalizing the release process around a set of privkeys (or split shares
> of keys) may raise its own set of questions.
>
> For the download itself, I've heard the advocates of announcing
> availability on the blockchain leading to a BitTorrent magnet link, but I
> also understand objections to adding an entire BitTorrent stack into a
> wallet.
>
> On Tue, 31 Dec 2013 06:23:55 -0800, Mike Hearn <mike at plan99.net> wrote:
>
> The site was actually moved onto a dedicated server temporarily and it
>> melted down under the load. I wouldn't call that no progress.
>>
>
> Oh, it did? When was that? I must have missed this excitement :)
>
> Any idea how much load it had?
>
> Perhaps I wasn't clear on the point I was making Drak's threat model
>> is not improved in the slightest by SSL. It would be improved by
>> increasing the use of signature checking, e.g. by making it easier.
>>
>
> Well, that depends. If you watch Applebaums talk he is pushing TLS pretty
> hard, and saying that based on the access to the source docs some of their
> MITM attacks can't beat TLS. It appears that they have the capability to do
> bulk MITM and rewrite of downloads as Drak says but *not* when TLS is
> present, that would force more targeted attacks. So to me that implies that
> TLS does raise the bar and is worth doing.
>
> However if we can't find a server that won't melt under the load, then
> that'd be an issue. We could consider hosting downloads on AppEngine or
> something else that can handle both high load and TLS.
>
>
>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140101/6f3e8e26/attachment.html>

From mike at plan99.net  Wed Jan  1 18:33:23 2014
From: mike at plan99.net (Mike Hearn)
Date: Wed, 1 Jan 2014 18:33:23 +0000
Subject: [Bitcoin-development] Happy new year!
Message-ID: <CANEZrP0qzDWmQj7mOJmn=uDADnawbrZRN7ubt-pitcLKLNi4nQ@mail.gmail.com>

Bitcoin had an incredible year in 2013, and I very much enjoyed working
with and meeting you all.

I'm very much looking forward to some of the upgrades coming in 2014.
Though a lot happened in the general community, last year was kind of quiet
with respect to the core software. I'm hoping this year we can pick up the
pace a little.

Cheers!
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140101/1c9e6b87/attachment.html>

From w at grabhive.com  Wed Jan  1 18:50:28 2014
From: w at grabhive.com (Wendell)
Date: Wed, 1 Jan 2014 13:50:28 -0500
Subject: [Bitcoin-development] Happy new year!
In-Reply-To: <CANEZrP0qzDWmQj7mOJmn=uDADnawbrZRN7ubt-pitcLKLNi4nQ@mail.gmail.com>
References: <CANEZrP0qzDWmQj7mOJmn=uDADnawbrZRN7ubt-pitcLKLNi4nQ@mail.gmail.com>
Message-ID: <D3149FB7-8E47-4C18-8396-A7B3855043CC@grabhive.com>

Same here.

I feel incredibly lucky to know some of you, and to be able to contribute in some small way to what this is ultimately becoming. It's been an amazing ride, and I'm pretty sure that 2014 is going to totally blow our minds.

-wendell

hivewallet.com | twitter.com/hivewallet | pgp: B7179FA88C498718

On Jan 1, 2014, at 1:33 PM, Mike Hearn wrote:

> Bitcoin had an incredible year in 2013, and I very much enjoyed working with and meeting you all.
> 
> I'm very much looking forward to some of the upgrades coming in 2014. Though a lot happened in the general community, last year was kind of quiet with respect to the core software. I'm hoping this year we can pick up the pace a little.
> 
> Cheers!




From melvincarvalho at gmail.com  Wed Jan  1 19:25:40 2014
From: melvincarvalho at gmail.com (Melvin Carvalho)
Date: Wed, 1 Jan 2014 20:25:40 +0100
Subject: [Bitcoin-development] Happy new year!
In-Reply-To: <CANEZrP0qzDWmQj7mOJmn=uDADnawbrZRN7ubt-pitcLKLNi4nQ@mail.gmail.com>
References: <CANEZrP0qzDWmQj7mOJmn=uDADnawbrZRN7ubt-pitcLKLNi4nQ@mail.gmail.com>
Message-ID: <CAKaEYhJ+UHPqNV-EntrXaGD7TpVXBm_KrCGjZNqkw1d6kJYOTA@mail.gmail.com>

On 1 January 2014 19:33, Mike Hearn <mike at plan99.net> wrote:

> Bitcoin had an incredible year in 2013, and I very much enjoyed working
> with and meeting you all.
>
> I'm very much looking forward to some of the upgrades coming in 2014.
> Though a lot happened in the general community, last year was kind of quiet
> with respect to the core software. I'm hoping this year we can pick up the
> pace a little.
>

Happy new year!  Thanks for your awesome contribution and to all those that
contributed to development.

"Bitcoin" was one of the 100 most searched for terms in 2013, really
looking forward to 2014!


>
> Cheers!
>
>
> ------------------------------------------------------------------------------
> Rapidly troubleshoot problems before they affect your business. Most IT
> organizations don't have a clear picture of how application performance
> affects their revenue. With AppDynamics, you get 100% visibility into your
> Java,.NET, & PHP application. Start your 15-day FREE TRIAL of AppDynamics
> Pro!
> http://pubads.g.doubleclick.net/gampad/clk?id=84349831&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140101/0a03d2a7/attachment.html>

From g.rowe at froot.co.uk  Wed Jan  1 19:48:18 2014
From: g.rowe at froot.co.uk (Gary Rowe)
Date: Wed, 1 Jan 2014 19:48:18 +0000
Subject: [Bitcoin-development] Happy new year!
In-Reply-To: <CAKaEYhJ+UHPqNV-EntrXaGD7TpVXBm_KrCGjZNqkw1d6kJYOTA@mail.gmail.com>
References: <CANEZrP0qzDWmQj7mOJmn=uDADnawbrZRN7ubt-pitcLKLNi4nQ@mail.gmail.com>
	<CAKaEYhJ+UHPqNV-EntrXaGD7TpVXBm_KrCGjZNqkw1d6kJYOTA@mail.gmail.com>
Message-ID: <CAKm8k+23ZtwfqdbCfHMM37o9pg0bejc9sorrEgxzO=H55KJhTw@mail.gmail.com>

Happy New Year to all the good people out there working hard to make
Bitcoin better than ever before.

Thank you!


On 1 January 2014 19:25, Melvin Carvalho <melvincarvalho at gmail.com> wrote:

>
>
>
> On 1 January 2014 19:33, Mike Hearn <mike at plan99.net> wrote:
>
>> Bitcoin had an incredible year in 2013, and I very much enjoyed working
>> with and meeting you all.
>>
>> I'm very much looking forward to some of the upgrades coming in 2014.
>> Though a lot happened in the general community, last year was kind of quiet
>> with respect to the core software. I'm hoping this year we can pick up the
>> pace a little.
>>
>
> Happy new year!  Thanks for your awesome contribution and to all those
> that contributed to development.
>
> "Bitcoin" was one of the 100 most searched for terms in 2013, really
> looking forward to 2014!
>
>
>>
>> Cheers!
>>
>>
>> ------------------------------------------------------------------------------
>> Rapidly troubleshoot problems before they affect your business. Most IT
>> organizations don't have a clear picture of how application performance
>> affects their revenue. With AppDynamics, you get 100% visibility into your
>> Java,.NET, & PHP application. Start your 15-day FREE TRIAL of AppDynamics
>> Pro!
>>
>> http://pubads.g.doubleclick.net/gampad/clk?id=84349831&iu=/4140/ostg.clktrk
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>
>>
>
>
> ------------------------------------------------------------------------------
> Rapidly troubleshoot problems before they affect your business. Most IT
> organizations don't have a clear picture of how application performance
> affects their revenue. With AppDynamics, you get 100% visibility into your
> Java,.NET, & PHP application. Start your 15-day FREE TRIAL of AppDynamics
> Pro!
> http://pubads.g.doubleclick.net/gampad/clk?id=84349831&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140101/089e165d/attachment.html>

From mike at plan99.net  Wed Jan  1 22:15:01 2014
From: mike at plan99.net (Mike Hearn)
Date: Wed, 1 Jan 2014 22:15:01 +0000
Subject: [Bitcoin-development] Dedicated server for bitcoin.org,
	your thoughts?
In-Reply-To: <CANEZrP1mdJNa7ADkUXTGDNKMSCROjGAVbMXZXxodxCz1LFDzZw@mail.gmail.com>
References: <52A3C8A5.7010606@gmail.com>
	<1795f3067ba3fcdd0caf978cc59ff024.squirrel@fruiteater.riseup.net>
	<52A435EA.7090405@gmail.com> <201312081237.24473.luke@dashjr.org>
	<CANAnSg2OrmQAcZ+cZdtQeADicH3U29QOgYPfP1AQhOMP6+P1wg@mail.gmail.com>
	<CAAS2fgR0khyJxmz9c2Oc87hOFgiNuiPJuaeugGajdo_EcKEW9w@mail.gmail.com>
	<20131212205106.GA4572@netbook.cypherspace.org>
	<CANAnSg3nPhrk2k=yDKf39AuBQnSuTWJbgANdMhGe=soiOy0NTw@mail.gmail.com>
	<CAAS2fgTmWRMxYweu3sNn_X7grgjUqTQujM-DbZRxG_YMZnD=7g@mail.gmail.com>
	<CANEZrP2X_63qkuNuk0MvsLR9ewd7HR0mPVaD7bZSgWMTJ5-9FQ@mail.gmail.com>
	<CAAS2fgQmMZ6RYjbJ6ZfFO5+ZhZoR4d4yMf8CXLXKPmZt3-Je4Q@mail.gmail.com>
	<CANEZrP1mdJNa7ADkUXTGDNKMSCROjGAVbMXZXxodxCz1LFDzZw@mail.gmail.com>
Message-ID: <CANEZrP3NPGAXxkV49mSfbUum=m2QTU3qOa5hVfdAX695+Ojosw@mail.gmail.com>

>
> Oh, it did? When was that? I must have missed this excitement :)
>>
>
I would be very interested to learn more about this. It seems the steady
state load on the site is not very high:

https://github.com/bitcoin/bitcoin.org/pull/287

(Saivann ran Google Analytics on the site for a little while to get traffic
figures). Peak of 10 visitors per second, assume a 10x blowup on resources,
that's only ~100 reqs/sec steady state, that shouldn't strain any kind of
reasonable server. So perhaps the specs of the dedicated server were not
what you might imagine.

Perhaps we should move the site over to Jeremy's hosting? It shouldn't be
very expensive to serve outside of major press cycles. Once that is done,
perhaps we can find/blag some SSL-protected file hosting.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140101/20754667/attachment.html>

From jtimon at monetize.io  Thu Jan  2 19:49:27 2014
From: jtimon at monetize.io (=?ISO-8859-1?Q?Jorge_Tim=F3n?=)
Date: Thu, 2 Jan 2014 20:49:27 +0100
Subject: [Bitcoin-development] Dedicated server for bitcoin.org,
	your thoughts?
In-Reply-To: <CANEZrP2X_63qkuNuk0MvsLR9ewd7HR0mPVaD7bZSgWMTJ5-9FQ@mail.gmail.com>
References: <52A3C8A5.7010606@gmail.com>
	<1795f3067ba3fcdd0caf978cc59ff024.squirrel@fruiteater.riseup.net>
	<52A435EA.7090405@gmail.com> <201312081237.24473.luke@dashjr.org>
	<CANAnSg2OrmQAcZ+cZdtQeADicH3U29QOgYPfP1AQhOMP6+P1wg@mail.gmail.com>
	<CAAS2fgR0khyJxmz9c2Oc87hOFgiNuiPJuaeugGajdo_EcKEW9w@mail.gmail.com>
	<20131212205106.GA4572@netbook.cypherspace.org>
	<CANAnSg3nPhrk2k=yDKf39AuBQnSuTWJbgANdMhGe=soiOy0NTw@mail.gmail.com>
	<CAAS2fgTmWRMxYweu3sNn_X7grgjUqTQujM-DbZRxG_YMZnD=7g@mail.gmail.com>
	<CANEZrP2X_63qkuNuk0MvsLR9ewd7HR0mPVaD7bZSgWMTJ5-9FQ@mail.gmail.com>
Message-ID: <CAC1+kJOKvkWP6eupACu_56ks==zBQ95FL6taL38bQ0q4eaDjrg@mail.gmail.com>

On 12/31/13, Mike Hearn <mike at plan99.net> wrote:
>  remember suggesting that we whack Google Analytics or
> some other statistics package on when the new website design was done and
> that was rejected for similar reasons ("organisations are bad").

Analytics software would be useful. I suggest using Piwik or another
free software alternative instead of Google's package.



From hozer at hozed.org  Fri Jan  3 05:11:28 2014
From: hozer at hozed.org (Troy Benjegerdes)
Date: Thu, 2 Jan 2014 23:11:28 -0600
Subject: [Bitcoin-development] Looking for GREAT C++ developer for
 exciting opportunity in bitcoin space
In-Reply-To: <CAMkFLsSwKEiEtV1OaAsGPiU8iAWbb77fDNJDmRwbgKnZ_kjG6Q@mail.gmail.com>
References: <CAMkFLsSwKEiEtV1OaAsGPiU8iAWbb77fDNJDmRwbgKnZ_kjG6Q@mail.gmail.com>
Message-ID: <20140103051128.GJ3180@nl.grid.coop>

On Sun, Dec 29, 2013 at 11:53:19AM -0700, Evan Duffield wrote:
> Hello,
> 
> We?re a startup looking for 1 or 2 really good C++ programmer that is
> familiar with the bitcoin internals to help with a for-profit startup.
> 
> We will be able to provide more information about the project after signing
> a non-compete/non-disclosure agreement. Our coin will be one of the truly
> unique coins that are not just a clone of the original Bitcoin code. In
> short the project will be a merge-mined altcoin that will provide a very
> useful service to the whole crypto-coin ecosystem.
> 
> If you have added any features to Bitcoin or related technologies this is a
> definite bonus. Please include information about the work you?re done in
> the space.
> 
> We have detailed plans on how to implement it and the roles we are looking
> to fill. If interested please email eduffield82 at gmail.com with a
> description of your work experience and we?ll vett the applications and
> share our plans to see if you?re interested.
> 
> Thanks,
> 
> Evan & Kyle
> Hawk Financial Group, LLC

Evan & Kyle,

I have a very unique and one-of-a kind offer for you. I will buy your company
from the revenue generated from my AGPLv3 copyright licensed Minco.me(c) 
cryptographic currency, which will revolutionize work by ensuring that anyone
with a Mincome(C) address doesn't need to work.

Ask yourself.. why would someone who can write a cryptocurrency want to *work*
for you, to get paid with... money.. that they can just ...
  ** write code that makes them money **

Please be aware that any concept(s) that I have publicly discussed, or that 
we may or may not have talked about if I would have signed a non-enforceable
non-compete agreement are COPYRIGHT 2013,2014 Troy Benjegerdes, and that I
would advise you seek competent legal council to ensure that this email, or
any other contact we may or may not have had does not contaminate your 
business model with a viral copyright license.


To everyone else on this list, I'm sorry, I just could not resist feeding 
the VC/marketing trolls.


-- Troy, 'da hozer'



From hozer at hozed.org  Fri Jan  3 05:22:43 2014
From: hozer at hozed.org (Troy Benjegerdes)
Date: Thu, 2 Jan 2014 23:22:43 -0600
Subject: [Bitcoin-development] BIP: register with IANA for
	bitcoin/cryptocoin port numbers
Message-ID: <20140103052243.GK3180@nl.grid.coop>

I believe this is self-explainatory:

1) Bitcoin usually runs on port 8333. Why?

2) Bitcoin does not show in up http://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.xhtml .. why?

3) What needs to happen to have someone from the Bitcoin foundation 
  to fill out the form asking for an assigned port (see 
  http://www.iana.org/form/ports-services )

4) what should the process be for new cryptocoins to get both default
port numbers, as well as P2P network identifier 'magic numbers'



From hozer at hozed.org  Fri Jan  3 05:45:15 2014
From: hozer at hozed.org (Troy Benjegerdes)
Date: Thu, 2 Jan 2014 23:45:15 -0600
Subject: [Bitcoin-development] Dedicated server for bitcoin.org,
 your thoughts?
In-Reply-To: <CAAS2fgTmWRMxYweu3sNn_X7grgjUqTQujM-DbZRxG_YMZnD=7g@mail.gmail.com>
References: <52A3C8A5.7010606@gmail.com>
	<1795f3067ba3fcdd0caf978cc59ff024.squirrel@fruiteater.riseup.net>
	<52A435EA.7090405@gmail.com> <201312081237.24473.luke@dashjr.org>
	<CANAnSg2OrmQAcZ+cZdtQeADicH3U29QOgYPfP1AQhOMP6+P1wg@mail.gmail.com>
	<CAAS2fgR0khyJxmz9c2Oc87hOFgiNuiPJuaeugGajdo_EcKEW9w@mail.gmail.com>
	<20131212205106.GA4572@netbook.cypherspace.org>
	<CANAnSg3nPhrk2k=yDKf39AuBQnSuTWJbgANdMhGe=soiOy0NTw@mail.gmail.com>
	<CAAS2fgTmWRMxYweu3sNn_X7grgjUqTQujM-DbZRxG_YMZnD=7g@mail.gmail.com>
Message-ID: <20140103054515.GL3180@nl.grid.coop>

On Tue, Dec 31, 2013 at 05:48:06AM -0800, Gregory Maxwell wrote:
> On Tue, Dec 31, 2013 at 5:39 AM, Drak <drak at zikula.org> wrote:
> > The NSA has the ability, right now to change every download of bitcoin-qt,
> > on the fly and the only cure is encryption.

No, the only cure is the check the hashes. We should know something
about hashes here. TLS is a big pile of 'too big to audit'. Spend
a couple of satoshis and put the hash of the source tar.gz and the
binaries in the blockchain. Problem solved.

<snipped>

> The downloads are protected by something far stronger than SSL
> already, which might even have a chance against the NSA. Actual
> signatures of the downloads with offline keys.
> 
> I'm all pro-SSL and all that, but you are? piece by piece? really
> convincing me that it produces an entirely false sense of security
> which is entirely unjustified.

I used to think encryption was important, and this exchange convinced
me that kerberized telnet with no encryption but with integrity
checking would be far more secure than 'secure' shell.

Also, there's some organization that's inserting malicious memes
that try to get me to buy shit below my signature. How about we 
move the mailing list? I've run mailman servers before, and there's
also http://savannah.gnu.org/maintenance/WhyChooseSavannah/

-- Troy (da hozer)




From melvincarvalho at gmail.com  Fri Jan  3 05:56:59 2014
From: melvincarvalho at gmail.com (Melvin Carvalho)
Date: Fri, 3 Jan 2014 06:56:59 +0100
Subject: [Bitcoin-development] BIP: register with IANA for
 bitcoin/cryptocoin port numbers
In-Reply-To: <20140103052243.GK3180@nl.grid.coop>
References: <20140103052243.GK3180@nl.grid.coop>
Message-ID: <CAKaEYhJmBT7Fai525-+Wba0HeU=WTjTpf_Ox66FnWQgsJatSOg@mail.gmail.com>

On 3 January 2014 06:22, Troy Benjegerdes <hozer at hozed.org> wrote:

> I believe this is self-explainatory:
>
> 1) Bitcoin usually runs on port 8333. Why?
>
> 2) Bitcoin does not show in up
> http://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.xhtml.. why?
>
> 3) What needs to happen to have someone from the Bitcoin foundation
>   to fill out the form asking for an assigned port (see
>   http://www.iana.org/form/ports-services )
>
> 4) what should the process be for new cryptocoins to get both default
> port numbers, as well as P2P network identifier 'magic numbers'
>

IANA normally register ports with the principle of conservation in mind.
See section 7.2 of RFC6335 for more details.

http://tools.ietf.org/html/rfc6335#section-7.2

8333 and 18333 are currently unassigned, which is good news.

Ideally it would be good to have two ports, one for the main net, and one
for the test net.  However, in light of conservation only one may be
granted.  The question as to whether traffic could be multiplexed over a
single port may be raised.

tnp                8321        udp    Thin(ium) Network Protocol
[Aly_Orady]                                        [Aly_Orady]
                                      2007-08-07
                 8322-8350            Unassigned
server-find        8351        tcp    Server Find
[Chris_Brown]                                      [Chris_Brown]

gv-pf              18262       udp    GV NetConfig Service
[Scott_Libert]                                     [Scott_Libert]
                                      2008-01-29
                18263-18462           Unassigned
ac-cluster         18463       tcp    AC Cluster
[Lisa_Zhong]

http://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.txt

If a whole slew of alt coins also tried to reserve ports, I suspect that
may raise eyebrows.


>
>
> ------------------------------------------------------------------------------
> Rapidly troubleshoot problems before they affect your business. Most IT
> organizations don't have a clear picture of how application performance
> affects their revenue. With AppDynamics, you get 100% visibility into your
> Java,.NET, & PHP application. Start your 15-day FREE TRIAL of AppDynamics
> Pro!
> http://pubads.g.doubleclick.net/gampad/clk?id=84349831&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140103/3a0f63e9/attachment.html>

From gmaxwell at gmail.com  Fri Jan  3 05:57:10 2014
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Thu, 2 Jan 2014 21:57:10 -0800
Subject: [Bitcoin-development] BIP: register with IANA for
 bitcoin/cryptocoin port numbers
In-Reply-To: <20140103052243.GK3180@nl.grid.coop>
References: <20140103052243.GK3180@nl.grid.coop>
Message-ID: <CAAS2fgR89wcBLUedXGz1Rsr3eyN5tLH6Bb9k6qsutnA=cydmTQ@mail.gmail.com>

On Thu, Jan 2, 2014 at 9:22 PM, Troy Benjegerdes <hozer at hozed.org> wrote:
> I believe this is self-explainatory:
>
> 1) Bitcoin usually runs on port 8333. Why?
>
> 2) Bitcoin does not show in up http://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.xhtml .. why?
>
> 3) What needs to happen to have someone from the Bitcoin foundation
>   to fill out the form asking for an assigned port (see
>   http://www.iana.org/form/ports-services )

I have requested an assignment.



From laanwj at gmail.com  Fri Jan  3 08:16:55 2014
From: laanwj at gmail.com (Wladimir)
Date: Fri, 3 Jan 2014 09:16:55 +0100
Subject: [Bitcoin-development] BIP: register with IANA for
 bitcoin/cryptocoin port numbers
In-Reply-To: <CAKaEYhJmBT7Fai525-+Wba0HeU=WTjTpf_Ox66FnWQgsJatSOg@mail.gmail.com>
References: <20140103052243.GK3180@nl.grid.coop>
	<CAKaEYhJmBT7Fai525-+Wba0HeU=WTjTpf_Ox66FnWQgsJatSOg@mail.gmail.com>
Message-ID: <CA+s+GJC2Z2NNdSWTvkwcJS8jEHx=ytFiWLH7-4OLD8-L89AOuQ@mail.gmail.com>

>
> Ideally it would be good to have two ports, one for the main net, and one
> for the test net.  However, in light of conservation only one may be
> granted.  The question as to whether traffic could be multiplexed over a
> single port may be raised.
>

I'm sure it would be *possible*, but testnet and mainnet are entirely
separate networks. Not only that, but the entire point of the testnet is
separation. There is no logic to multiplexing them.

If conservation is an issue, I'd forgo the testnet port. We don't have a
'test ssh' or 'test mail server' port either, most people will just
allocate a temporary number for those themselves.

In case the port is already in use, bitcoin can run on and announce any
another port. There is no strict need for it to be 8333 (or 18333) at all.

There isn't even an argument for convenience. Most of the time, users don't
specify nodes. And in the rare cases that they do they can specify a port
as well.

If a whole slew of alt coins also tried to reserve ports, I suspect that
> may raise eyebrows.
>

That's somebody else's problem. Bitcoin is by far the most well-known of
the 'coins' so it may be considered realistic to allocate one or two ports
for it. Or not, in which case the altcoins can forget it too.

Regards,
Wladimir
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140103/2121b4f7/attachment.html>

From drak at zikula.org  Fri Jan  3 09:59:15 2014
From: drak at zikula.org (Drak)
Date: Fri, 3 Jan 2014 09:59:15 +0000
Subject: [Bitcoin-development] Dedicated server for bitcoin.org,
	your thoughts?
In-Reply-To: <20140103054515.GL3180@nl.grid.coop>
References: <52A3C8A5.7010606@gmail.com>
	<1795f3067ba3fcdd0caf978cc59ff024.squirrel@fruiteater.riseup.net>
	<52A435EA.7090405@gmail.com> <201312081237.24473.luke@dashjr.org>
	<CANAnSg2OrmQAcZ+cZdtQeADicH3U29QOgYPfP1AQhOMP6+P1wg@mail.gmail.com>
	<CAAS2fgR0khyJxmz9c2Oc87hOFgiNuiPJuaeugGajdo_EcKEW9w@mail.gmail.com>
	<20131212205106.GA4572@netbook.cypherspace.org>
	<CANAnSg3nPhrk2k=yDKf39AuBQnSuTWJbgANdMhGe=soiOy0NTw@mail.gmail.com>
	<CAAS2fgTmWRMxYweu3sNn_X7grgjUqTQujM-DbZRxG_YMZnD=7g@mail.gmail.com>
	<20140103054515.GL3180@nl.grid.coop>
Message-ID: <CANAnSg0esEMQ+G=9F2zK6okcewT6NdYBFnXHmyHz8VR4AAp0nw@mail.gmail.com>

On 3 January 2014 05:45, Troy Benjegerdes <hozer at hozed.org> wrote:

> On Tue, Dec 31, 2013 at 05:48:06AM -0800, Gregory Maxwell wrote:
> > On Tue, Dec 31, 2013 at 5:39 AM, Drak <drak at zikula.org> wrote:
> > > The NSA has the ability, right now to change every download of
> bitcoin-qt,
> > > on the fly and the only cure is encryption.
>
> No, the only cure is the check the hashes. We should know something
> about hashes here. TLS is a big pile of 'too big to audit'. Spend
> a couple of satoshis and put the hash of the source tar.gz and the
> binaries in the blockchain. Problem solved.


Which is why, as pointed out several times at 30c3 by several renowned
figures, why cryptography has remained squarely outside of mainstream use.
It needs to just work and until you can trust the connection and what the
end point sends you, automatically, it's a big fail and the attack vectors
are many.

<sarcasm>I can just see my mother or grandma manually checking the hash of
a download... </sarcasm>

Drak
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140103/37cd808c/attachment.html>

From tier.nolan at gmail.com  Fri Jan  3 11:22:35 2014
From: tier.nolan at gmail.com (Tier Nolan)
Date: Fri, 3 Jan 2014 11:22:35 +0000
Subject: [Bitcoin-development] Dedicated server for bitcoin.org,
	your thoughts?
In-Reply-To: <CANAnSg0esEMQ+G=9F2zK6okcewT6NdYBFnXHmyHz8VR4AAp0nw@mail.gmail.com>
References: <52A3C8A5.7010606@gmail.com>
	<1795f3067ba3fcdd0caf978cc59ff024.squirrel@fruiteater.riseup.net>
	<52A435EA.7090405@gmail.com> <201312081237.24473.luke@dashjr.org>
	<CANAnSg2OrmQAcZ+cZdtQeADicH3U29QOgYPfP1AQhOMP6+P1wg@mail.gmail.com>
	<CAAS2fgR0khyJxmz9c2Oc87hOFgiNuiPJuaeugGajdo_EcKEW9w@mail.gmail.com>
	<20131212205106.GA4572@netbook.cypherspace.org>
	<CANAnSg3nPhrk2k=yDKf39AuBQnSuTWJbgANdMhGe=soiOy0NTw@mail.gmail.com>
	<CAAS2fgTmWRMxYweu3sNn_X7grgjUqTQujM-DbZRxG_YMZnD=7g@mail.gmail.com>
	<20140103054515.GL3180@nl.grid.coop>
	<CANAnSg0esEMQ+G=9F2zK6okcewT6NdYBFnXHmyHz8VR4AAp0nw@mail.gmail.com>
Message-ID: <CAE-z3OV2jxwO0t2NcJSmJM5WH5aWZtSv3JxhFs0wNMA_PQ257w@mail.gmail.com>

On Fri, Jan 3, 2014 at 9:59 AM, Drak <drak at zikula.org> wrote:

> Which is why, as pointed out several times at 30c3 by several renowned
> figures, why cryptography has remained squarely outside of mainstream use.
> It needs to just work and until you can trust the connection and what the
> end point sends you, automatically, it's a big fail and the attack vectors
> are many.
>
> <sarcasm>I can just see my mother or grandma manually checking the hash of
> a download... </sarcasm>
>

Maybe a simple compromise would be to add a secure downloader to the
bitcoin client.

The download link could point to a meta-data file that has info on the
download.

file_url=
hash_url=
sig_url=
message=This is version x.y.z of the bitcoin client

It still suffers from the root CA problem though.  The bitcoin client would
accept Gavin's signature or a "core team" signature.

At least it would provide forward security.

It could also be used to download files for different projects, with
explicit warnings that you are adding a new trusted key.

When you try to download, you would be given a window

Project: Some Alternative Wallet
Signed by: P. Lead
Message:

Confirm download Yes No

However, even if you do that, each trusted key is only linked to a
particular project.

It would say if the project and/or leader is unknown.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140103/5294c903/attachment.html>

From adam at cypherspace.org  Fri Jan  3 13:09:11 2014
From: adam at cypherspace.org (Adam Back)
Date: Fri, 3 Jan 2014 14:09:11 +0100
Subject: [Bitcoin-development] Dedicated server for bitcoin.org,
 your thoughts?
In-Reply-To: <CAE-z3OV2jxwO0t2NcJSmJM5WH5aWZtSv3JxhFs0wNMA_PQ257w@mail.gmail.com>
References: <52A435EA.7090405@gmail.com> <201312081237.24473.luke@dashjr.org>
	<CANAnSg2OrmQAcZ+cZdtQeADicH3U29QOgYPfP1AQhOMP6+P1wg@mail.gmail.com>
	<CAAS2fgR0khyJxmz9c2Oc87hOFgiNuiPJuaeugGajdo_EcKEW9w@mail.gmail.com>
	<20131212205106.GA4572@netbook.cypherspace.org>
	<CANAnSg3nPhrk2k=yDKf39AuBQnSuTWJbgANdMhGe=soiOy0NTw@mail.gmail.com>
	<CAAS2fgTmWRMxYweu3sNn_X7grgjUqTQujM-DbZRxG_YMZnD=7g@mail.gmail.com>
	<20140103054515.GL3180@nl.grid.coop>
	<CANAnSg0esEMQ+G=9F2zK6okcewT6NdYBFnXHmyHz8VR4AAp0nw@mail.gmail.com>
	<CAE-z3OV2jxwO0t2NcJSmJM5WH5aWZtSv3JxhFs0wNMA_PQ257w@mail.gmail.com>
Message-ID: <20140103130911.GA12653@netbook.cypherspace.org>

You know if you want to make some form of investment, you might like make an
attempt to look them up on the internet, check the phone number in a phone
book or directory enquiries, look for references and reviews?

So it is with the hash of the binary you are about to trust with your
investment funds.  I dont think its such a difficult question.  Ask your
more technical friends to confirm this hash is correct.

Its interesting that hashes are more trustworthy than signatures, since all
the NSLs and backdoors, its hard to trust a signature.

I have the same problem with linux distros that want to install hundreds of
components downloaded over the internet, based on signatures.  I would far
rather a merkle hash of the distribution at that point in time, which
authenticates directly any of the optional downloadable components.

(Or better yet a distro that like comes on a CD and doesnt download
anything...  Amazing how most CD and even DVD iso images immediately
download stupid things like fonts???  What were they thinking?  I downloaded
fedora > 4GB of stuff and they need to download a font just to get past step
2 of the installer?  Thats a sensless, retrograde, selective backdoor
opportunity.)

Adam

On Fri, Jan 03, 2014 at 11:22:35AM +0000, Tier Nolan wrote:
>   On Fri, Jan 3, 2014 at 9:59 AM, Drak <[1]drak at zikula.org> wrote:
>
>   Which is why, as pointed out several times at 30c3 by several renowned
>   figures, why cryptography has remained squarely outside of mainstream
>   use. It needs to just work and until you can trust the connection and
>   what the end point sends you, automatically, it's a big fail and the
>   attack vectors are many.
>   <sarcasm>I can just see my mother or grandma manually checking the hash
>   of a download... </sarcasm>
>
>   Maybe a simple compromise would be to add a secure downloader to the
>   bitcoin client.
>   The download link could point to a meta-data file that has info on the
>   download.
>   file_url=
>   hash_url=
>   sig_url=
>   message=This is version x.y.z of the bitcoin client
>   It still suffers from the root CA problem though.  The bitcoin client
>   would accept Gavin's signature or a "core team" signature.
>   At least it would provide forward security.
>   It could also be used to download files for different projects, with
>   explicit warnings that you are adding a new trusted key.
>   When you try to download, you would be given a window
>   Project: Some Alternative Wallet
>   Signed by: P. Lead
>   Message:
>   Confirm download Yes No
>   However, even if you do that, each trusted key is only linked to a
>   particular project.
>   It would say if the project and/or leader is unknown.
>
>References
>
>   1. mailto:drak at zikula.org

>------------------------------------------------------------------------------
>Rapidly troubleshoot problems before they affect your business. Most IT
>organizations don't have a clear picture of how application performance
>affects their revenue. With AppDynamics, you get 100% visibility into your
>Java,.NET, & PHP application. Start your 15-day FREE TRIAL of AppDynamics Pro!
>http://pubads.g.doubleclick.net/gampad/clk?id=84349831&iu=/4140/ostg.clktrk

>_______________________________________________
>Bitcoin-development mailing list
>Bitcoin-development at lists.sourceforge.net
>https://lists.sourceforge.net/lists/listinfo/bitcoin-development




From hozer at hozed.org  Fri Jan  3 17:38:17 2014
From: hozer at hozed.org (Troy Benjegerdes)
Date: Fri, 3 Jan 2014 11:38:17 -0600
Subject: [Bitcoin-development] Dedicated server for bitcoin.org,
 your thoughts?
In-Reply-To: <CANAnSg0esEMQ+G=9F2zK6okcewT6NdYBFnXHmyHz8VR4AAp0nw@mail.gmail.com>
References: <1795f3067ba3fcdd0caf978cc59ff024.squirrel@fruiteater.riseup.net>
	<52A435EA.7090405@gmail.com> <201312081237.24473.luke@dashjr.org>
	<CANAnSg2OrmQAcZ+cZdtQeADicH3U29QOgYPfP1AQhOMP6+P1wg@mail.gmail.com>
	<CAAS2fgR0khyJxmz9c2Oc87hOFgiNuiPJuaeugGajdo_EcKEW9w@mail.gmail.com>
	<20131212205106.GA4572@netbook.cypherspace.org>
	<CANAnSg3nPhrk2k=yDKf39AuBQnSuTWJbgANdMhGe=soiOy0NTw@mail.gmail.com>
	<CAAS2fgTmWRMxYweu3sNn_X7grgjUqTQujM-DbZRxG_YMZnD=7g@mail.gmail.com>
	<20140103054515.GL3180@nl.grid.coop>
	<CANAnSg0esEMQ+G=9F2zK6okcewT6NdYBFnXHmyHz8VR4AAp0nw@mail.gmail.com>
Message-ID: <20140103173817.GN3180@nl.grid.coop>

On Fri, Jan 03, 2014 at 09:59:15AM +0000, Drak wrote:
> On 3 January 2014 05:45, Troy Benjegerdes <hozer at hozed.org> wrote:
> 
> > On Tue, Dec 31, 2013 at 05:48:06AM -0800, Gregory Maxwell wrote:
> > > On Tue, Dec 31, 2013 at 5:39 AM, Drak <drak at zikula.org> wrote:
> > > > The NSA has the ability, right now to change every download of
> > bitcoin-qt,
> > > > on the fly and the only cure is encryption.
> >
> > No, the only cure is the check the hashes. We should know something
> > about hashes here. TLS is a big pile of 'too big to audit'. Spend
> > a couple of satoshis and put the hash of the source tar.gz and the
> > binaries in the blockchain. Problem solved.
> 
> 
> Which is why, as pointed out several times at 30c3 by several renowned
> figures, why cryptography has remained squarely outside of mainstream use.
> It needs to just work and until you can trust the connection and what the
> end point sends you, automatically, it's a big fail and the attack vectors
> are many.
> 
> <sarcasm>I can just see my mother or grandma manually checking the hash of
> a download... </sarcasm>

'make' should check the hash. The binary should check it's own hash. The
operating system should check the hash.

How about if I sell your Grandma an android table loaded only with free 
software, and use the existing infrastructure android provides to only
allow software to be installed that can be integrity-verified from a 
public key that can be downloaded from the blockchain?

Would you pay $50 (or 2 litecoin) more for at tablet with free software
that protects you and your grandma's interests, rather than selling them
to google/apple/microsoft?

I'm working on eventually being able to build hardware for which the 
entire design specifications, from case to cpu core verilog, all they way
up to the pre-installed cryptographic currency wallet(s) are all signed
and released as part of the Debian archive. 

But I need people like you to explain to your Grandma why this hardware
costs more than hardware that monetizes eyeballs and sells your private
information to the highest bidder.



From nadav at shesek.info  Fri Jan  3 18:00:49 2014
From: nadav at shesek.info (Nadav Ivgi)
Date: Fri, 3 Jan 2014 20:00:49 +0200
Subject: [Bitcoin-development] An idea for alternative payment scheme
Message-ID: <CAGXD5f2_E82kEqsGGrhiywGogVCbR8vzs7q51=Luaq2ZEzGBtA@mail.gmail.com>

I had an idea for a payment scheme that uses key derivation, but instead of
the payee deriving the addresses, the payer would do it.

It would work like that:

   1. The payee publishes his master public key
   2. The payer generates a random "receipt number" (say, 25 random bytes)
   3. The payer derives an address from the master public key using the
   receipt number and pays to it
   4. The payer sends the receipt to the payee
   5. The payee derives a private key with that receipt and adds it to his
   wallet


Advantages:

   - It increases privacy by avoiding address reuse
   - The process is asynchronous. The payee is completely passive in the
   payment process and isn't required to provide new addresses before each
   payment (so no payment server required)
   - Its usable as a replacement for cases where re-used addresses are the
   most viable solution (like putting an address in a forum signature or as a
   development fund in a github readme)
   - The receipt also acts as a proof of payment that the payer can provide
   to the payee
   - Also, if the master is known to belong to someone, this also allows
   the payer prove to a third-party that the payment was made to that someone.
   If the output was spent, it also proves that he was aware of the payment
   and has the receipt.
   - Its a really thin abstraction layer that doesn't require much changes

Disadvantages:

   - Losing the receipt numbers means losing access to your funds, they are
   random and there's no way to restore them
   - It requires sending the receipt to the payee somehow. Email could work
   for that, but a better defined channel that also can talk to the Bitcoin
   client and add the receipt would be much better.

What do you think?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140103/312ac06c/attachment.html>

From tier.nolan at gmail.com  Fri Jan  3 18:16:43 2014
From: tier.nolan at gmail.com (Tier Nolan)
Date: Fri, 3 Jan 2014 18:16:43 +0000
Subject: [Bitcoin-development] An idea for alternative payment scheme
In-Reply-To: <CAGXD5f2_E82kEqsGGrhiywGogVCbR8vzs7q51=Luaq2ZEzGBtA@mail.gmail.com>
References: <CAGXD5f2_E82kEqsGGrhiywGogVCbR8vzs7q51=Luaq2ZEzGBtA@mail.gmail.com>
Message-ID: <CAE-z3OW1GWo+CURVt+OJvEQDqBOiDjPNEsMjCU8BQ=0ZSn4UEg@mail.gmail.com>

The random number that the buyer uses could be generated from a root key
too.

This would allow them to regenerate all random numbers that they used and
recreate their receipts.  The master root would have to be stored on your
computer though.

The payment protocol is supposed to do something like this already though.


On Fri, Jan 3, 2014 at 6:00 PM, Nadav Ivgi <nadav at shesek.info> wrote:

> I had an idea for a payment scheme that uses key derivation, but instead
> of the payee deriving the addresses, the payer would do it.
>
> It would work like that:
>
>    1. The payee publishes his master public key
>    2. The payer generates a random "receipt number" (say, 25 random bytes)
>    3. The payer derives an address from the master public key using the
>    receipt number and pays to it
>    4. The payer sends the receipt to the payee
>    5. The payee derives a private key with that receipt and adds it to
>    his wallet
>
>
> Advantages:
>
>    - It increases privacy by avoiding address reuse
>    - The process is asynchronous. The payee is completely passive in the
>    payment process and isn't required to provide new addresses before each
>    payment (so no payment server required)
>    - Its usable as a replacement for cases where re-used addresses are
>    the most viable solution (like putting an address in a forum signature or
>    as a development fund in a github readme)
>    - The receipt also acts as a proof of payment that the payer can
>    provide to the payee
>    - Also, if the master is known to belong to someone, this also allows
>    the payer prove to a third-party that the payment was made to that someone.
>    If the output was spent, it also proves that he was aware of the payment
>    and has the receipt.
>    - Its a really thin abstraction layer that doesn't require much changes
>
> Disadvantages:
>
>    - Losing the receipt numbers means losing access to your funds, they
>    are random and there's no way to restore them
>    - It requires sending the receipt to the payee somehow. Email could
>    work for that, but a better defined channel that also can talk to the
>    Bitcoin client and add the receipt would be much better.
>
> What do you think?
>
>
> ------------------------------------------------------------------------------
> Rapidly troubleshoot problems before they affect your business. Most IT
> organizations don't have a clear picture of how application performance
> affects their revenue. With AppDynamics, you get 100% visibility into your
> Java,.NET, & PHP application. Start your 15-day FREE TRIAL of AppDynamics
> Pro!
> http://pubads.g.doubleclick.net/gampad/clk?id=84349831&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140103/23c1bf5d/attachment.html>

From jtimon at monetize.io  Fri Jan  3 18:21:17 2014
From: jtimon at monetize.io (=?ISO-8859-1?Q?Jorge_Tim=F3n?=)
Date: Fri, 3 Jan 2014 19:21:17 +0100
Subject: [Bitcoin-development] Dedicated server for bitcoin.org,
	your thoughts?
In-Reply-To: <20140103173817.GN3180@nl.grid.coop>
References: <1795f3067ba3fcdd0caf978cc59ff024.squirrel@fruiteater.riseup.net>
	<52A435EA.7090405@gmail.com> <201312081237.24473.luke@dashjr.org>
	<CANAnSg2OrmQAcZ+cZdtQeADicH3U29QOgYPfP1AQhOMP6+P1wg@mail.gmail.com>
	<CAAS2fgR0khyJxmz9c2Oc87hOFgiNuiPJuaeugGajdo_EcKEW9w@mail.gmail.com>
	<20131212205106.GA4572@netbook.cypherspace.org>
	<CANAnSg3nPhrk2k=yDKf39AuBQnSuTWJbgANdMhGe=soiOy0NTw@mail.gmail.com>
	<CAAS2fgTmWRMxYweu3sNn_X7grgjUqTQujM-DbZRxG_YMZnD=7g@mail.gmail.com>
	<20140103054515.GL3180@nl.grid.coop>
	<CANAnSg0esEMQ+G=9F2zK6okcewT6NdYBFnXHmyHz8VR4AAp0nw@mail.gmail.com>
	<20140103173817.GN3180@nl.grid.coop>
Message-ID: <CAC1+kJMHaZWCjhqZMRBqpZ4O1kBLqSV1eig7e_LqOYK8T_e_4Q@mail.gmail.com>

On 1/3/14, Troy Benjegerdes <hozer at hozed.org> wrote:
> 'make' should check the hash.

An attacker could replace that part of the makefile.
Anyway, I think this is more oriented for compiled binaries, not for
people downloading the sources. I assume most of that people just use
git.

> The binary should check it's own hash.

I'm afraid this is not possible.

> The operating system should check the hash.

There's package management systems like apt-secure that do exactly this.



From mark at monetize.io  Fri Jan  3 18:23:41 2014
From: mark at monetize.io (Mark Friedenbach)
Date: Fri, 03 Jan 2014 10:23:41 -0800
Subject: [Bitcoin-development] An idea for alternative payment scheme
In-Reply-To: <CAE-z3OW1GWo+CURVt+OJvEQDqBOiDjPNEsMjCU8BQ=0ZSn4UEg@mail.gmail.com>
References: <CAGXD5f2_E82kEqsGGrhiywGogVCbR8vzs7q51=Luaq2ZEzGBtA@mail.gmail.com>
	<CAE-z3OW1GWo+CURVt+OJvEQDqBOiDjPNEsMjCU8BQ=0ZSn4UEg@mail.gmail.com>
Message-ID: <52C7002D.7040803@monetize.io>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

There is a standard mechanism for doing that called deterministic
signatures and is described in RFC 6979. It uses the private key and
the HMAC construction to generate a ECDSA k value.

On 01/03/2014 10:16 AM, Tier Nolan wrote:
> The random number that the buyer uses could be generated from a
> root key too.
> 
> This would allow them to regenerate all random numbers that they
> used and recreate their receipts.  The master root would have to be
> stored on your computer though.
> 
> The payment protocol is supposed to do something like this already
> though.
> 
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.14 (GNU/Linux)
Comment: GPGTools - http://gpgtools.org
Comment: Using GnuPG with Thunderbird - http://www.enigmail.net/

iQIcBAEBAgAGBQJSxwAqAAoJEAdzVfsmodw4nAoQAJLyI7m2uII6Lp0bk2odiT84
rqoAZut4ESGK+lMHsVoFIkFPKAD4ZXpKEEhOa212Q4ZtQG+Ceescs04qslfzwAfO
bnAQrzRzKQf68bQlvtdZ4xjsfe38GgI5LEkyxHVrwd39ZJhP2Hp4xJT5TbvrNzq7
GRDTNcM30GTAF5nW9HPT4/KXIpzYQcuylaK9IX2KRHdC5/PFMDKu3b5lGe9BqbtF
hYLVyj4jAGfTr/K6UFS37sFbdPoyhkiz+S7YHy6dsqc0XMUFnx3xvkgirKkAtGBw
hjDK6m+Ay+qdR6XcnOft1IXM7ctujH7Ru9RHM6K4x0Pt3x0DBLE5yahPEPg5uEAW
HAHwuOGs0mDoqeYzW9Ftegh2QkmlVd0CZQmGvcVHLzuugxeR49XPIIURNTmEyk6e
9Ui6EKEbFSiQ/jeMnARIKmTAfp3uTHwEIOoNFBgFHXAe5iVtWEr/jkL1dSKrHpVm
Dnt4g+IB5a8HOlvU789QeJh/wVrOH+msuhuXgb1W86zvurnnKxb5eSQx5TMy/fy1
e3IKZ9qKCodVt1I6zSCf1xJjd6QXPpxcnKco/G604GEZsg87sC3sMUsJ+g7GuHJI
M05U8pNAnDjH/HHJLQj3IJhAQO4IforvgMri4sM0OeAEdDfrONjwwbWFnx638kyD
r4jvFeIPyVM1574GwfJW
=8qjF
-----END PGP SIGNATURE-----



From gmaxwell at gmail.com  Fri Jan  3 18:30:38 2014
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Fri, 3 Jan 2014 10:30:38 -0800
Subject: [Bitcoin-development] An idea for alternative payment scheme
In-Reply-To: <CAGXD5f2_E82kEqsGGrhiywGogVCbR8vzs7q51=Luaq2ZEzGBtA@mail.gmail.com>
References: <CAGXD5f2_E82kEqsGGrhiywGogVCbR8vzs7q51=Luaq2ZEzGBtA@mail.gmail.com>
Message-ID: <CAAS2fgQ8M6=Utj7SBpN4Fiv6rgBKvZfm5jpmwkFRuFsZYZLqHQ@mail.gmail.com>

On Fri, Jan 3, 2014 at 10:00 AM, Nadav Ivgi <nadav at shesek.info> wrote:
> I had an idea for a payment scheme that uses key derivation, but instead of
> the payee deriving the addresses, the payer would do it.
>
> It would work like that:
>
> The payee publishes his master public key
> The payer generates a random "receipt number" (say, 25 random bytes)
> The payer derives an address from the master public key using the receipt
> number and pays to it
> The payer sends the receipt to the payee
> The payee derives a private key with that receipt and adds it to his wallet

Allow me to introduce an even more wild idea.

The payee publishes two public keys PP  PP2.

The payer picks the first k value he intends to use in his signatures.

The payer multiplies PP2*k = n.

The payer pays to pubkey PP+n  with r in his first signature, or if
none of the txins are ECDSA signed, in an OP_RETURN additional output.

The payer advises the payee that PP+(pp2_secret*r) is something he can
redeem. But this is technically optional because the payee can simply
inspect every transaction to check for this condition.

This is a (subset) of a scheme by Bytecoin published a long time ago
on Bitcoin talk.

It has the advantage that if payer drops his computer down a well
after making the payment the funds are not lost, and yet it is still
completely confidential.

(The downside is particular way I've specified this breaks using
deterministic DSA unless you use the OP_RETURN, ... it could instead
be done by using one of the signature pubkeys, but the pubkeys may
only exist in the prior txin, which kinda stinks. Also the private
keys for the pubkeys may only exist in some external hardware, where a
OP_RETURN nonce could be produced when signing).

These schemes have an advantage over the plain payment protocol
intended use (where you can just give them their receipt number, or
just the whole key) in that they allow the first round of
communication to be broadcast (e.g. payee announced to EVERYONE that
he's accepting payments) while preserving privacy.



From jtimon at monetize.io  Fri Jan  3 19:14:25 2014
From: jtimon at monetize.io (=?ISO-8859-1?Q?Jorge_Tim=F3n?=)
Date: Fri, 3 Jan 2014 20:14:25 +0100
Subject: [Bitcoin-development] The insecurity of merge-mining
In-Reply-To: <20140101045342.GA7103@tilt>
References: <CAMkFLsSwKEiEtV1OaAsGPiU8iAWbb77fDNJDmRwbgKnZ_kjG6Q@mail.gmail.com>
	<20131230232225.GA10594@tilt> <201312310114.05600.luke@dashjr.org>
	<20140101045342.GA7103@tilt>
Message-ID: <CAC1+kJPTYzvU4ngFspvULDMvQK4ckkM719Y+_hx272PCU3amyg@mail.gmail.com>

On 1/1/14, Peter Todd <pete at petertodd.org> wrote:
> On Tue, Dec 31, 2013 at 01:14:05AM +0000, Luke-Jr wrote:
>> On Monday, December 30, 2013 11:22:25 PM Peter Todd wrote:
>> > that you are using merge-mining is a red-flag because without majority,
>> > or
>> > at least near-majority, hashing power an attacker can 51% attack your
>> > altcoin at negligible cost by re-using existing hashing power.
>>
>> I strongly disagree on this isolated point. Using the same logic, Bitcoin
>> is
>> vulnerable to an attacker at negligible cost by re-using existing hashing
>>
>> power from mining Namecoin. Any non-scam altcoin is pretty safe using
>> merged
>> mining, since any would-be attacker is going to have it in their interests
>> to
>> invest in the altcoin instead of attacking it. It's only the scam ones
>> that
>> want to pump & dump with no improvements, that are really at risk here.
>>
>> The rational decision for a non-scam altcoin, is to take advantage of
>> merged
>> mining to get as much security as possible. There are also some possible
>> tricks to get the full security of the bitcoin miners even when not all
>> participate in your altcoin (but this area probably needs some studying to
>> get
>> right).
>
> You assume the value of a crypto-currency is equal to all miners, it's
> not.

They should be able to sell the reward at similar prices in the market.
Attackers are losing the opportunity cost of mining the currency by
attacking it, just like with Bitcoin.

> Suppose I create a merge-mined Zerocoin implementation with a 1:1
> BTC/ZTC exchange rate enforced by the software. You can't argue this is
> a scamcoin; no-one is getting rich. There's a 1:1 exchange rate so the
> only thing you can do with the coin is get some privacy.

The idea of sacrificing something external and make bitcoins appear
still sounds crazy to me.
I don't see how this pegging contributes in anything to a technical
argument against merged mining, just looks like a moral argument
against altcoin in general.

But anyway, if you're going to make bitcoin's validation dependent on
some external chain, it surprises me even more that you prefer that
external dependency to be non-merge mineable.

> But inevitably
> some miners won't agree that enabling better privacy is a good thing, or
> their local governments won't. Either way, they can attack the Zerocoin
> merge-mined chain with a marginal cost of nearly zero.

Ok, so either we assume that the external-pegging hardfork wasn't a
consensus or we just forget about the pegging and go back to talk
about merged mining in general.
Your argument is still "for some reason some miners don't like the MM
altcoin and prefer to attack it than to be profitable miners".

If I mine BTC + NMC and you only mine BTC, it will be harder for you
to compete against me: I can afford higher costs than you for the same
BTC reward, since I'm also getting NMC.

What you're saying is that Litecoin is more secure than Namecoin
because while Litecoin can only be attacked by external attackers and
current miners of other scrypt coins, Namecoin can also be attacked
the Bitcoin miners that aren't currently mining Namecoin.
This doesn't sound very reasonable to me.
I think Namecoin is more secure than Litecoin and new coins should be
created with SHA256 and merged mining in mind. At least merged mine
with Litecoin if the still believe scrypt is so "anti-ASIC" and
"centralization-resistant" (in fact Litecoin is more centralized than
bitcoin with their shorter block intervals since better connections
are favored, but that's another story).

Merged mining is not only about not competing for proof of work like
Satoshi defended.
It is also about wasting resources: the more mining subsidies to
different chains, the more wasted resources.
By criticizing merged mining you're also indirectly legitimizing the
same scamcoin madness you criticize.
If you don't plan to merge mine, having SHA256 doesn't make sense
because that makes you more fragile to potential bitcoin miners
attacks and chainhopers.
I don't think we would have this many alts living right now if all
proof of work was SHA256.

So if the "anti-asic PoW" myth and the absurd emerging morals of
"GPU-mining as an universal right" weren't enough, you want to add an
equally false "merged mining is insecure" to the collection of
arguments supporting the search of the more absurd possible PoW holy
grail.

Please try to prove that MM is insecure and I'll try to prove your
wrong. But we don't need zerocoin or an artificial pegging to discuss
about this.

I think Namecoin has a lower reward for miners than litecoin and still
has much better security. I haven't run the numbers but, will you deny
it?
How many amazon VMs do you need to attack each one of them?



From adam at cypherspace.org  Fri Jan  3 20:23:20 2014
From: adam at cypherspace.org (Adam Back)
Date: Fri, 3 Jan 2014 21:23:20 +0100
Subject: [Bitcoin-development] An idea for alternative payment scheme
In-Reply-To: <CAAS2fgQ8M6=Utj7SBpN4Fiv6rgBKvZfm5jpmwkFRuFsZYZLqHQ@mail.gmail.com>
References: <CAGXD5f2_E82kEqsGGrhiywGogVCbR8vzs7q51=Luaq2ZEzGBtA@mail.gmail.com>
	<CAAS2fgQ8M6=Utj7SBpN4Fiv6rgBKvZfm5jpmwkFRuFsZYZLqHQ@mail.gmail.com>
Message-ID: <20140103202320.GA16515@netbook.cypherspace.org>

Seems like you (Nadav) are the third person to reinvent this idea so far :)

I wrote up some of the post-Bytecoin variants here:

https://bitcointalk.org/index.php?topic=317835.msg4103530#msg4103530

The general limitation so far is its not SPV compatible, so the recipient
has to test each payment to see if its one he can compute the private key
for.  Or the sender has to send the recipient out of band the derivation
key.

However at present most of the bitcoin infrastructure is using the bitcoin
broadcast channel as the communication channel, which also supports payer
and payee not being simultaneously online.  You have to be careful also not
to lose the key.  You dont want a subsequent payer data loss event to lose
money for the recipient.  You want the message to be sent atomically.

It does seem like a very attractive proposition to be able to fix the
address reuse issue.  Admonishment to not reuse addresses doesnt seem to
have been successful so far, and there are multiple widely used wallets that
reuse addresses (probably in part because they didnt implement HD wallets
and so are scared of losing addresses due to backup failure risks of non HD
wallets and fresh addresses).

Adam

On Fri, Jan 03, 2014 at 10:30:38AM -0800, Gregory Maxwell wrote:
>On Fri, Jan 3, 2014 at 10:00 AM, Nadav Ivgi <nadav at shesek.info> wrote:
>> I had an idea for a payment scheme that uses key derivation, but instead of
>> the payee deriving the addresses, the payer would do it.
>>
>> It would work like that:
>>
>> The payee publishes his master public key
>> The payer generates a random "receipt number" (say, 25 random bytes)
>> The payer derives an address from the master public key using the receipt
>> number and pays to it
>> The payer sends the receipt to the payee
>> The payee derives a private key with that receipt and adds it to his wallet
>
>Allow me to introduce an even more wild idea.
>
>The payee publishes two public keys PP  PP2.
>
>The payer picks the first k value he intends to use in his signatures.
>
>The payer multiplies PP2*k = n.
>
>The payer pays to pubkey PP+n  with r in his first signature, or if
>none of the txins are ECDSA signed, in an OP_RETURN additional output.
>
>The payer advises the payee that PP+(pp2_secret*r) is something he can
>redeem. But this is technically optional because the payee can simply
>inspect every transaction to check for this condition.
>
>This is a (subset) of a scheme by Bytecoin published a long time ago
>on Bitcoin talk.
>
>It has the advantage that if payer drops his computer down a well
>after making the payment the funds are not lost, and yet it is still
>completely confidential.
>
>(The downside is particular way I've specified this breaks using
>deterministic DSA unless you use the OP_RETURN, ... it could instead
>be done by using one of the signature pubkeys, but the pubkeys may
>only exist in the prior txin, which kinda stinks. Also the private
>keys for the pubkeys may only exist in some external hardware, where a
>OP_RETURN nonce could be produced when signing).
>
>These schemes have an advantage over the plain payment protocol
>intended use (where you can just give them their receipt number, or
>just the whole key) in that they allow the first round of
>communication to be broadcast (e.g. payee announced to EVERYONE that
>he's accepting payments) while preserving privacy.
>
>------------------------------------------------------------------------------
>Rapidly troubleshoot problems before they affect your business. Most IT
>organizations don't have a clear picture of how application performance
>affects their revenue. With AppDynamics, you get 100% visibility into your
>Java,.NET, & PHP application. Start your 15-day FREE TRIAL of AppDynamics Pro!
>http://pubads.g.doubleclick.net/gampad/clk?id=84349831&iu=/4140/ostg.clktrk
>_______________________________________________
>Bitcoin-development mailing list
>Bitcoin-development at lists.sourceforge.net
>https://lists.sourceforge.net/lists/listinfo/bitcoin-development



From pete at petertodd.org  Fri Jan  3 20:39:39 2014
From: pete at petertodd.org (Peter Todd)
Date: Fri, 3 Jan 2014 15:39:39 -0500
Subject: [Bitcoin-development] An idea for alternative payment scheme
In-Reply-To: <20140103202320.GA16515@netbook.cypherspace.org>
References: <CAGXD5f2_E82kEqsGGrhiywGogVCbR8vzs7q51=Luaq2ZEzGBtA@mail.gmail.com>
	<CAAS2fgQ8M6=Utj7SBpN4Fiv6rgBKvZfm5jpmwkFRuFsZYZLqHQ@mail.gmail.com>
	<20140103202320.GA16515@netbook.cypherspace.org>
Message-ID: <20140103203939.GA30273@savin>

On Fri, Jan 03, 2014 at 09:23:20PM +0100, Adam Back wrote:
> Seems like you (Nadav) are the third person to reinvent this idea so far :)

Lol, fourth if you include me, although my case is rather embarassing as
I had re-read Bytecoin's original post recently and completely missed
the main point of it!

> I wrote up some of the post-Bytecoin variants here:
> 
> https://bitcointalk.org/index.php?topic=317835.msg4103530#msg4103530
> 
> The general limitation so far is its not SPV compatible, so the recipient
> has to test each payment to see if its one he can compute the private key
> for.  Or the sender has to send the recipient out of band the derivation
> key.

Actually I think it has the potential to be *more* SPV compatible than
the alternative, as in conjunction with prefix filters it lets you
receive unlimited unrelated payments that you can find in the blockchain
with a single prefix query with a fixed bandwidth/anonymity set size
tradeoff. (obviously in conjunction with one of the many ways of tagging
transactions for more efficient search)

The BIP38 approach with UI's that make it easy to create a new address
for every payment on the other hand force you to either accept higher
bandwidth consumption, or decrease your anonymity set size, or lose
payments. (inclusive)

I've got a post talking about this in more detail as well as an overview
of bloom filters vs. prefix filters that I'll publish tomorrow. (tl;dr:
bloom filters have very poor O(n^2) scalability and should be
depreciated)

> However at present most of the bitcoin infrastructure is using the bitcoin
> broadcast channel as the communication channel, which also supports payer
> and payee not being simultaneously online.  You have to be careful also not
> to lose the key.  You dont want a subsequent payer data loss event to lose
> money for the recipient.  You want the message to be sent atomically.
> 
> It does seem like a very attractive proposition to be able to fix the
> address reuse issue.  Admonishment to not reuse addresses doesnt seem to
> have been successful so far, and there are multiple widely used wallets that
> reuse addresses (probably in part because they didnt implement HD wallets
> and so are scared of losing addresses due to backup failure risks of non HD
> wallets and fresh addresses).

-- 
'peter'[:-1]@petertodd.org
0000000000000001a96469654430aa06e4ae7c7328a7eb848c6fc63443f24e4a
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 685 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140103/a067cbfe/attachment.sig>

From pete at petertodd.org  Fri Jan  3 21:01:39 2014
From: pete at petertodd.org (Peter Todd)
Date: Fri, 3 Jan 2014 16:01:39 -0500
Subject: [Bitcoin-development] The insecurity of merge-mining
In-Reply-To: <CAC1+kJPTYzvU4ngFspvULDMvQK4ckkM719Y+_hx272PCU3amyg@mail.gmail.com>
References: <CAMkFLsSwKEiEtV1OaAsGPiU8iAWbb77fDNJDmRwbgKnZ_kjG6Q@mail.gmail.com>
	<20131230232225.GA10594@tilt> <201312310114.05600.luke@dashjr.org>
	<20140101045342.GA7103@tilt>
	<CAC1+kJPTYzvU4ngFspvULDMvQK4ckkM719Y+_hx272PCU3amyg@mail.gmail.com>
Message-ID: <20140103210139.GB30273@savin>

On Fri, Jan 03, 2014 at 08:14:25PM +0100, Jorge Tim?n wrote:
> > You assume the value of a crypto-currency is equal to all miners, it's
> > not.
> 
> They should be able to sell the reward at similar prices in the market.
> Attackers are losing the opportunity cost of mining the currency by
> attacking it, just like with Bitcoin.

As I showed with my zerocoin example, often that is not the case, e.g. I
do not support anonymity, or *can't* support it because of the local
laws.

Or for that matter, really boring examples like there's two competing
implementations of some basic idea and we'd rather the winner be picked
on technical merits rather than "I have a grudge and a small pool so
I'll this upstart at birth"

> > Suppose I create a merge-mined Zerocoin implementation with a 1:1
> > BTC/ZTC exchange rate enforced by the software. You can't argue this is
> > a scamcoin; no-one is getting rich. There's a 1:1 exchange rate so the
> > only thing you can do with the coin is get some privacy.
> 
> The idea of sacrificing something external and make bitcoins appear
> still sounds crazy to me.
> I don't see how this pegging contributes in anything to a technical
> argument against merged mining, just looks like a moral argument
> against altcoin in general.

It's a thought experiment; read my original post on how to make a
zerocoin alt-chain and it might make more sense:

http://www.mail-archive.com/bitcoin-development at lists.sourceforge.net/msg02472.html

Even better might be to use a merge-mined version of Mastercoin as an
example, where the initial distribution of coins is fixed at genesis and
forward from that is independent of the Bitcoin blockchain.


> > But inevitably
> > some miners won't agree that enabling better privacy is a good thing, or
> > their local governments won't. Either way, they can attack the Zerocoin
> > merge-mined chain with a marginal cost of nearly zero.
> 
> Ok, so either we assume that the external-pegging hardfork wasn't a
> consensus or we just forget about the pegging and go back to talk
> about merged mining in general.
> Your argument is still "for some reason some miners don't like the MM
> altcoin and prefer to attack it than to be profitable miners".
> 
> If I mine BTC + NMC and you only mine BTC, it will be harder for you
> to compete against me: I can afford higher costs than you for the same
> BTC reward, since I'm also getting NMC.
> 
> What you're saying is that Litecoin is more secure than Namecoin
> because while Litecoin can only be attacked by external attackers and
> current miners of other scrypt coins, Namecoin can also be attacked
> the Bitcoin miners that aren't currently mining Namecoin.
> This doesn't sound very reasonable to me.
> I think Namecoin is more secure than Litecoin and new coins should be
> created with SHA256 and merged mining in mind. At least merged mine
> with Litecoin if the still believe scrypt is so "anti-ASIC" and
> "centralization-resistant" (in fact Litecoin is more centralized than
> bitcoin with their shorter block intervals since better connections
> are favored, but that's another story).
> 
> Merged mining is not only about not competing for proof of work like
> Satoshi defended.
> It is also about wasting resources: the more mining subsidies to
> different chains, the more wasted resources.
> By criticizing merged mining you're also indirectly legitimizing the
> same scamcoin madness you criticize.
> If you don't plan to merge mine, having SHA256 doesn't make sense
> because that makes you more fragile to potential bitcoin miners
> attacks and chainhopers.
> I don't think we would have this many alts living right now if all
> proof of work was SHA256.
> 
> So if the "anti-asic PoW" myth and the absurd emerging morals of
> "GPU-mining as an universal right" weren't enough, you want to add an
> equally false "merged mining is insecure" to the collection of
> arguments supporting the search of the more absurd possible PoW holy
> grail.
> 
> Please try to prove that MM is insecure and I'll try to prove your
> wrong. But we don't need zerocoin or an artificial pegging to discuss
> about this.
> 
> I think Namecoin has a lower reward for miners than litecoin and still
> has much better security. I haven't run the numbers but, will you deny
> it?
> How many amazon VMs do you need to attack each one of them?

I'll give you a hint: "marginal cost"

You're rant has rather little to do with my argument.

-- 
'peter'[:-1]@petertodd.org
0000000000000003065f32da26de1deda93eb722bf1dc4a1b787e7d68d282dbc
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 685 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140103/e9aa536c/attachment.sig>

From jtimon at monetize.io  Sat Jan  4 00:27:42 2014
From: jtimon at monetize.io (=?ISO-8859-1?Q?Jorge_Tim=F3n?=)
Date: Sat, 4 Jan 2014 01:27:42 +0100
Subject: [Bitcoin-development] The insecurity of merge-mining
In-Reply-To: <20140103210139.GB30273@savin>
References: <CAMkFLsSwKEiEtV1OaAsGPiU8iAWbb77fDNJDmRwbgKnZ_kjG6Q@mail.gmail.com>
	<20131230232225.GA10594@tilt> <201312310114.05600.luke@dashjr.org>
	<20140101045342.GA7103@tilt>
	<CAC1+kJPTYzvU4ngFspvULDMvQK4ckkM719Y+_hx272PCU3amyg@mail.gmail.com>
	<20140103210139.GB30273@savin>
Message-ID: <CAC1+kJNM=67Yw0Rde9y7H0v0x07MsWmh6oK++hDtsKEmLtqcNg@mail.gmail.com>

On 1/3/14, Peter Todd <pete at petertodd.org> wrote:
> On Fri, Jan 03, 2014 at 08:14:25PM +0100, Jorge Tim?n wrote:
>> > You assume the value of a crypto-currency is equal to all miners, it's
>> > not.
>>
>> They should be able to sell the reward at similar prices in the market.
>> Attackers are losing the opportunity cost of mining the currency by
>> attacking it, just like with Bitcoin.
>
> As I showed with my zerocoin example, often that is not the case, e.g. I
> do not support anonymity, or *can't* support it because of the local
> laws.
>
> Or for that matter, really boring examples like there's two competing
> implementations of some basic idea and we'd rather the winner be picked
> on technical merits rather than "I have a grudge and a small pool so
> I'll this upstart at birth"

For whatever reason, someone wants to attack one chain, fine.
But if the market is competitive enough and/or the reward of the
MM-coin is high enough comparatively to the biggest ones in the MM
group, then it is not profitable to mine.
If you make a MM coin, it's fees reward are 5% of BTC + NMC rewards,
and a jurisdiction somehow prohibits to mine the new coin (I can't
imagine such a law being enforced, but I'll follow your argument),
then BTC + NMC miners will just tend to disappear from that
jurisdiction.

> It's a thought experiment; read my original post on how to make a
> zerocoin alt-chain and it might make more sense:
>
> http://www.mail-archive.com/bitcoin-development at lists.sourceforge.net/msg02472.html
>
> Even better might be to use a merge-mined version of Mastercoin as an
> example, where the initial distribution of coins is fixed at genesis and
> forward from that is independent of the Bitcoin blockchain.

I've read it until the end this time, and I have many doubts about
proof of sacrifice as a security mechanism. Although it's certainly
not proof of stake, it smells similarly to me. I'll have to think more
about it.
I still think that link doesn't prove anything against merged mining security.

>> I think Namecoin has a lower reward for miners than litecoin and still
>> has much better security. I haven't run the numbers but, will you deny
>> it?
>> How many amazon VMs do you need to attack each one of them?
>
> I'll give you a hint: "marginal cost"

Please, don't give me clues and let's discuss the economics, that's
precisely what I want and where I think you're getting it wrong.
Since you refuse to try to prove that MM is less secure, I'll try
myself to prove the opposite.

Let's say we have currencies A, B, C and D, with daily rewards of 70,
20, 10 and 10 valuns respectively.

A, B and C are merged mined, D is not.
So with an equivalent reward to miners and one being merged mined
while the other being independent, what's the more secure chain? C or
D?

Assuming similar hashing algorithms and perfect competition, the cost
of producing enough hashing power to obtain 1 valun in rewards from D
equals the cost of extracting 1 valun in rewards from the group A + B
+ C.
Let's define 1 valun as the costs in energy and capital resources to
produce X GH/s.
So we have the following hashrates for each chain:

A = 100*X GH/s
B = 100*X GH/s
C = 100*X GH/s
D = 10*X GH/s

Now here it comes our attacker paying for amazon servers.
The costs in value to rent a server to produce X GH/s during a day
cannot be lower than 1 valun, given the earlier assumptions. Let's
assume it is equal to 1 valun for simplicity.

So the cost to have 50% of D's hashing power for a day is 10 valuns.
The cost to to have 50% of C's hashing power for a day is 100 valuns,
but, hey, I'll use your hint now.
Marginal costs.
So I'm using 100 valuns to attack C, but I'm still getting my rewards
from A and B as normal.
As normal?
Let's assume it's as normal first.
I would be getting 90 valuns from chains A and B, so 100 - 90 = 10 valuns.
Mhmm, it seems that although I need to make a considerably bigger
investment in the case of attacking C, in the end the total costs will
be the same of attacking D, that is 10 valuns.
But, wait, I've doubled the hashrate!!
Miners were getting 1 valun in reward per valun in mining costs when
the hashrate was 100*X GH/s, now A and B hashrates are 200*X GH/s
because I came to mine.
Some of them will be smart enough to leave fast, but I will be really
getting something between 45 and 90 valuns from honestly mining A + B,
not 90 valuns as I was assuming.
So it turns out that attacking D is actually cheaper than attacking C.

Feel free to ask for corrections in the example if you think it needs them.
Feel free to bring your edge legal cases back, but please try to do it
on top of the example.

PD I'm eager to read your post on BIP32-ish payment protocol, bloom
filters and prefix filters, so I hope I'm not distracting you too much
with this.



From hozer at hozed.org  Sat Jan  4 01:43:36 2014
From: hozer at hozed.org (Troy Benjegerdes)
Date: Fri, 3 Jan 2014 19:43:36 -0600
Subject: [Bitcoin-development] Dedicated server for bitcoin.org,
 your thoughts?
In-Reply-To: <CAC1+kJMHaZWCjhqZMRBqpZ4O1kBLqSV1eig7e_LqOYK8T_e_4Q@mail.gmail.com>
References: <201312081237.24473.luke@dashjr.org>
	<CANAnSg2OrmQAcZ+cZdtQeADicH3U29QOgYPfP1AQhOMP6+P1wg@mail.gmail.com>
	<CAAS2fgR0khyJxmz9c2Oc87hOFgiNuiPJuaeugGajdo_EcKEW9w@mail.gmail.com>
	<20131212205106.GA4572@netbook.cypherspace.org>
	<CANAnSg3nPhrk2k=yDKf39AuBQnSuTWJbgANdMhGe=soiOy0NTw@mail.gmail.com>
	<CAAS2fgTmWRMxYweu3sNn_X7grgjUqTQujM-DbZRxG_YMZnD=7g@mail.gmail.com>
	<20140103054515.GL3180@nl.grid.coop>
	<CANAnSg0esEMQ+G=9F2zK6okcewT6NdYBFnXHmyHz8VR4AAp0nw@mail.gmail.com>
	<20140103173817.GN3180@nl.grid.coop>
	<CAC1+kJMHaZWCjhqZMRBqpZ4O1kBLqSV1eig7e_LqOYK8T_e_4Q@mail.gmail.com>
Message-ID: <20140104014336.GO3180@nl.grid.coop>

On Fri, Jan 03, 2014 at 07:21:17PM +0100, Jorge Tim?n wrote:
> On 1/3/14, Troy Benjegerdes <hozer at hozed.org> wrote:
> > 'make' should check the hash.
> 
> An attacker could replace that part of the makefile.
> Anyway, I think this is more oriented for compiled binaries, not for
> people downloading the sources. I assume most of that people just use
> git.
> 
> > The binary should check it's own hash.
> 
> I'm afraid this is not possible.
>
> > The operating system should check the hash.
> 
> There's package management systems like apt-secure that do exactly this.

Yes. Promoting operating systems (and signed .deb packages) is a far better
thing to do than worrying about TLS on the bitcoin.org server.



From david.vorick at gmail.com  Sat Jan  4 08:49:52 2014
From: david.vorick at gmail.com (David Vorick)
Date: Sat, 4 Jan 2014 03:49:52 -0500
Subject: [Bitcoin-development] Merge mining
In-Reply-To: <9aaa913f73f45db41d94d93d02eed3fa@astutium.com>
References: <CAMkFLsSwKEiEtV1OaAsGPiU8iAWbb77fDNJDmRwbgKnZ_kjG6Q@mail.gmail.com>
	<20131230232225.GA10594@tilt> <201312310114.05600.luke@dashjr.org>
	<op.w8x4c8vbyldrnw@laptop-air.hsd1.ca.comcast.net>
	<9aaa913f73f45db41d94d93d02eed3fa@astutium.com>
Message-ID: <CAFVRnyr+fikViQWgM0-dEoPD4HF2OGAh3EHaYK5mEskNhZ25Ag@mail.gmail.com>

If you have the resources to attack one of the bigger altcoins, you
probably have a significant investment in the cryptocurrency space, and a
significant interest in protecting it. Compromising even something like
dogecoin would cause a lot of questions to be raised and likely drop the
value of bitcoin as well as all the cryptocurrencies using the same work
function as dogecoin.

Right now, there's very little benefit to attacking a significant currency,
because it would be very expensive and likely traumatize the whole system.
Unless it's some power like the NSA, I don't think there's much to worry
about.


On Tue, Dec 31, 2013 at 2:38 AM, <rob.golding at astutium.com> wrote:

> > But there's so much 'dry powder' out there (GPUs), I wonder if *not*
> > supporting merge-mining is any better? At least the attacker has to do
> > some unique PoW, so you hope it's costing them something.
>
> With lots of people having access to 100TH+ there's not really much
> 'cost' to doing a 51% attack on an alt-coin beyond a short-term
> diversion away from 'profitable' mining.
>
> At least by supporting merged mining, more miners are likely to
> 'support' multiple coin types, thus making a 51% attack from an
> individual/group less straightforward.
>
> >> The rational decision for a non-scam altcoin, is to take advantage of
> >> merged mining to get as much security as possible.
>
> Exactly.
>
> Rob
>
>
> ------------------------------------------------------------------------------
> Rapidly troubleshoot problems before they affect your business. Most IT
> organizations don't have a clear picture of how application performance
> affects their revenue. With AppDynamics, you get 100% visibility into your
> Java,.NET, & PHP application. Start your 15-day FREE TRIAL of AppDynamics
> Pro!
> http://pubads.g.doubleclick.net/gampad/clk?id=84349831&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140104/9c382479/attachment.html>

From jtimon at monetize.io  Sat Jan  4 10:05:46 2014
From: jtimon at monetize.io (=?ISO-8859-1?Q?Jorge_Tim=F3n?=)
Date: Sat, 4 Jan 2014 11:05:46 +0100
Subject: [Bitcoin-development] Merge mining
In-Reply-To: <CAFVRnyr+fikViQWgM0-dEoPD4HF2OGAh3EHaYK5mEskNhZ25Ag@mail.gmail.com>
References: <CAMkFLsSwKEiEtV1OaAsGPiU8iAWbb77fDNJDmRwbgKnZ_kjG6Q@mail.gmail.com>
	<20131230232225.GA10594@tilt> <201312310114.05600.luke@dashjr.org>
	<op.w8x4c8vbyldrnw@laptop-air.hsd1.ca.comcast.net>
	<9aaa913f73f45db41d94d93d02eed3fa@astutium.com>
	<CAFVRnyr+fikViQWgM0-dEoPD4HF2OGAh3EHaYK5mEskNhZ25Ag@mail.gmail.com>
Message-ID: <CAC1+kJNsSdpYE6c5qM7-UjG340p_FV8p22O4OMy8f=QgxK2DMA@mail.gmail.com>

On 1/4/14, David Vorick <david.vorick at gmail.com> wrote:
> If you have the resources to attack one of the bigger altcoins, you
> probably have a significant investment in the cryptocurrency space, and a
> significant interest in protecting it. Compromising even something like
> dogecoin would cause a lot of questions to be raised and likely drop the
> value of bitcoin as well as all the cryptocurrencies using the same work
> function as dogecoin.
>
> Right now, there's very little benefit to attacking a significant currency,
> because it would be very expensive and likely traumatize the whole system.
> Unless it's some power like the NSA, I don't think there's much to worry
> about.

The launch thread says it clear: "very scrypt, such random, much
profit, wow, many coin".
So it seems that Dogecoin doesn't use SHA256 like Bitcoin, but scrypt
like most of the other scamcoins.
Anyway, I don't see anything in your comment in favor or against
merged mining...



From david.vorick at gmail.com  Sat Jan  4 10:08:25 2014
From: david.vorick at gmail.com (David Vorick)
Date: Sat, 4 Jan 2014 05:08:25 -0500
Subject: [Bitcoin-development] Merge mining
In-Reply-To: <CAC1+kJNsSdpYE6c5qM7-UjG340p_FV8p22O4OMy8f=QgxK2DMA@mail.gmail.com>
References: <CAMkFLsSwKEiEtV1OaAsGPiU8iAWbb77fDNJDmRwbgKnZ_kjG6Q@mail.gmail.com>
	<20131230232225.GA10594@tilt> <201312310114.05600.luke@dashjr.org>
	<op.w8x4c8vbyldrnw@laptop-air.hsd1.ca.comcast.net>
	<9aaa913f73f45db41d94d93d02eed3fa@astutium.com>
	<CAFVRnyr+fikViQWgM0-dEoPD4HF2OGAh3EHaYK5mEskNhZ25Ag@mail.gmail.com>
	<CAC1+kJNsSdpYE6c5qM7-UjG340p_FV8p22O4OMy8f=QgxK2DMA@mail.gmail.com>
Message-ID: <CAFVRnyqNwuEbn7whEEA3ySpEq7eTqJLYuQLfefs6e0UDdm4mYA@mail.gmail.com>

It's meant to be in favor of merge mining.

Dogecoin uses scrypt, which is a very popular algorithm. If any large
currency were to be attacked through merge mining, it would probably be
litecoin miners attacking dogecoin. But if you control enough of the
litecoin network to do attack mining against dogecoin, you almost certainly
have a huge vested interest in cryptocurrencies doing well. By attacking
dogecoin successfully, you'll cast doubt on the entire cryptocurrency
ecosystem and hurt yourself in the process.


On Sat, Jan 4, 2014 at 5:05 AM, Jorge Tim?n <jtimon at monetize.io> wrote:

> On 1/4/14, David Vorick <david.vorick at gmail.com> wrote:
> > If you have the resources to attack one of the bigger altcoins, you
> > probably have a significant investment in the cryptocurrency space, and a
> > significant interest in protecting it. Compromising even something like
> > dogecoin would cause a lot of questions to be raised and likely drop the
> > value of bitcoin as well as all the cryptocurrencies using the same work
> > function as dogecoin.
> >
> > Right now, there's very little benefit to attacking a significant
> currency,
> > because it would be very expensive and likely traumatize the whole
> system.
> > Unless it's some power like the NSA, I don't think there's much to worry
> > about.
>
> The launch thread says it clear: "very scrypt, such random, much
> profit, wow, many coin".
> So it seems that Dogecoin doesn't use SHA256 like Bitcoin, but scrypt
> like most of the other scamcoins.
> Anyway, I don't see anything in your comment in favor or against
> merged mining...
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140104/b5885f64/attachment.html>

From jtimon at monetize.io  Sat Jan  4 10:34:55 2014
From: jtimon at monetize.io (=?ISO-8859-1?Q?Jorge_Tim=F3n?=)
Date: Sat, 4 Jan 2014 11:34:55 +0100
Subject: [Bitcoin-development] Merge mining
In-Reply-To: <CAFVRnyqNwuEbn7whEEA3ySpEq7eTqJLYuQLfefs6e0UDdm4mYA@mail.gmail.com>
References: <CAMkFLsSwKEiEtV1OaAsGPiU8iAWbb77fDNJDmRwbgKnZ_kjG6Q@mail.gmail.com>
	<20131230232225.GA10594@tilt> <201312310114.05600.luke@dashjr.org>
	<op.w8x4c8vbyldrnw@laptop-air.hsd1.ca.comcast.net>
	<9aaa913f73f45db41d94d93d02eed3fa@astutium.com>
	<CAFVRnyr+fikViQWgM0-dEoPD4HF2OGAh3EHaYK5mEskNhZ25Ag@mail.gmail.com>
	<CAC1+kJNsSdpYE6c5qM7-UjG340p_FV8p22O4OMy8f=QgxK2DMA@mail.gmail.com>
	<CAFVRnyqNwuEbn7whEEA3ySpEq7eTqJLYuQLfefs6e0UDdm4mYA@mail.gmail.com>
Message-ID: <CAC1+kJOdP4MYDKTaj6xMMLBuq37sE-LNW7ZqJ_r1tjXC8XDNeQ@mail.gmail.com>

On 1/4/14, David Vorick <david.vorick at gmail.com> wrote:
> It's meant to be in favor of merge mining.
>
> Dogecoin uses scrypt, which is a very popular algorithm.

Also, MS windows is a very popular operative system.
That's a fallacy:
http://en.wikipedia.org/wiki/Argumentum_ad_populum

> If any large
> currency were to be attacked through merge mining, it would probably be
> litecoin miners attacking dogecoin. But if you control enough of the
> litecoin network to do attack mining against dogecoin, you almost certainly
> have a huge vested interest in cryptocurrencies doing well.

Wait, wait, is Dogecoin merge-mineable with litecoin?
It could be if its developers wanted to, but I highly doubt it.
Precisely because of the myths spread against merged mining.

> By attacking
> dogecoin successfully, you'll cast doubt on the entire cryptocurrency
> ecosystem and hurt yourself in the process.

You shouldn't make such assumptions about the interests of a potential attacker.
For example, even being of the "cryptocurrency ecosystem" I could
consider that their slogans and videos are confusing newcomers and
they're really harming the general image of p2p currencies by
associating them with mad speculation and pump and dump schemes.

Being heavily involved in this "ecosystem", I would be very happy if
dogecoin disappeared tomorrow. Personally I've never mined anything,
but if I had the resources I would actually consider such an attack.

Again, I think we're getting off-topic with perrocoin. It hardly has
anything to do with MM.

> On Sat, Jan 4, 2014 at 5:05 AM, Jorge Tim?n <jtimon at monetize.io> wrote:
>
>> On 1/4/14, David Vorick <david.vorick at gmail.com> wrote:
>> > If you have the resources to attack one of the bigger altcoins, you
>> > probably have a significant investment in the cryptocurrency space, and
>> > a
>> > significant interest in protecting it. Compromising even something like
>> > dogecoin would cause a lot of questions to be raised and likely drop
>> > the
>> > value of bitcoin as well as all the cryptocurrencies using the same
>> > work
>> > function as dogecoin.
>> >
>> > Right now, there's very little benefit to attacking a significant
>> currency,
>> > because it would be very expensive and likely traumatize the whole
>> system.
>> > Unless it's some power like the NSA, I don't think there's much to
>> > worry
>> > about.
>>
>> The launch thread says it clear: "very scrypt, such random, much
>> profit, wow, many coin".
>> So it seems that Dogecoin doesn't use SHA256 like Bitcoin, but scrypt
>> like most of the other scamcoins.
>> Anyway, I don't see anything in your comment in favor or against
>> merged mining...
>>
>


-- 
Jorge Tim?n

http://freico.in/



From thomasv1 at gmx.de  Sun Jan  5 18:43:58 2014
From: thomasv1 at gmx.de (Thomas Voegtlin)
Date: Sun, 05 Jan 2014 19:43:58 +0100
Subject: [Bitcoin-development] BIP proposal: Authenticated prefix trees
In-Reply-To: <52B3A1C8.5000005@monetize.io>
References: <52B3A1C8.5000005@monetize.io>
Message-ID: <52C9A7EE.2050904@gmx.de>

Hello and happy new year to this mailing list!


Thank you Mark for the incredible work you've been doing on this.
I am following this very closely, because it is of primary importance
for Electrum.

I have written a Python-levelDB implementation of this UTXO hashtree,
which is currently being tested, and will be added to Electrum servers.

My implementation follows Alan Reiner's idea to store the tree as items
in a key-value database. I believe that a C++ implementation like yours
will be at least an order of magnitude faster, and I am looking forward 
to it.

I too believe that BIPs should define interoperability points, but probably
not implementation details. For the UTXO hashtree, this means that a BIP
should at least specify how the root hash is constructed. This might be the
only thing that needs to be specified.

However, I see no pressing issue with writing a BIP; it might be preferable
to implement and test different options first, and learn from that.

Thomas



Le 20/12/2013 02:47, Mark Friedenbach a ?crit :
> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA1
>
> Hello fellow bitcoin developers. Included below is the first draft of
> a BIP for a new Merkle-compressed data structure. The need for this
> data structure arose out of the misnamed "Ultimate blockchain
> compression" project, but it has since been recognized to have many
> other applications.
>
> In addition to this BIP I am preparing three additional BIPs
> describing the use of this data structure in stateless validation &
> mining, the UBC address index for "SPV+" operating modes, document
> timestamping and merged mining.
>
> A Python implementation of this data structure is available here:
>
> https://github.com/monetizeio/python-bitcoin
>
> A C++ implementation is being worked on.
>
> As per the BIP-1 procedure, I am submitting this rough draft to the
> community for discussion. I welcome all comments and criticisms of
> both form and content.
>
> - -Mark
>
>
> ==Abstract==
>
> This BIP describes a [http://en.wikipedia.org/wiki/Hash_tree Merkle
> hash tree] variant of the [http://en.wikipedia.org/wiki/Trie
> prefix-tree data structure], ideally suited for encoding key-value
> indices which support memory-efficient proofs.
>
> ==Motivation==
>
> There are a number of applications which would benefit from having a
> data structure with the following properties:
>
> * '''Arbitrary mapping of keys to values.''' A ''key'' can be any
> bytestring, and its ''value'' any other bytestring.
> * '''Duplicate keys disallowed.''' Every key has one, and only one
> value associated with it. Some applications demand assurance that no
> key value is reused, and that this constraint can be checked without
> requiring access to the entire data structure.
> * '''Efficient look-up by key.''' The data structure should support
> sub-linear lookup operations with respect to the number of keys in the
> mapping. Logarithmic time or linear with respect to the length of the
> key should be achievable and would be sufficient for realistic
> applications.
> * '''Merkle compression of mapping structure.''' It should be possible
> to produce a reduced description of the tree consisting of a single
> root hash value which is deterministically calculated from the mapping
> structure.
> * '''Efficient proofs of inclusion.''' It should be possible to
> extract a proof of key/value mapping which is limited in size and
> verification time by the length of the key in the worst case.
> * '''Computation of updates using local information.''' Given a set of
> inclusion proofs, it should be possible to calculate adjustments to
> the local mapping structure (update or deletion of included mappings,
> or insertion between two included mappings which are adjacent in the
> global structure).
>
> Such applications include committed validation indices which enable
> stateless mining nodes, committed wallet indices which enable
> trust-less querying of the unspent transaction output set by
> <code>scriptPubKey</code>, efficient document time-stamping, and
> secure & efficient merged mining. This BIP describes an authenticated
> prefix tree which has the above properties, but leaves the myriad
> applications to be formalized in future BIPs.
>
> ==Data structure==
>
> This BIP defines a binary prefix tree. Such a structure provides a
> mapping of bitstrings (the ''keys'') to bytestrings (the ''values'').
> It is an acyclic binary tree which implicitly encodes keys within the
> traversal path -- a "left" branch is a 0, and a "right" branch is a 1.
> Each node is reachable by only one unique path, and reading off the
> branches taken (0 for each left, 1 for each right) as one follows the
> path from root to target yields the node's key.
>
> The particular binary prefix tree defined by this BIP is a hybrid
> PATRICIA / de la Brandais tree structure.
> [http://en.wikipedia.org/wiki/Radix_tree PATRICIA trees] compress a
> long sequence of non-branching nodes into a single interior node with
> a per-branch ''skip prefix''. This achieves significant savings in
> storage space, root hash calculation, and traversal time.
>
> A de la Brandais trie achieves compression by only storing branches
> actually taken in a node. The space savings are minimal for a binary
> tree, but place the serialized size of a non-branching interior node
> under the SHA-256 block size, thereby reducing the number of hash
> operations required to perform updates and validate proofs.
>
> This BIP describes the authenticated prefix tree and its many
> variations in terms of its serialized representation. Additional BIPs
> describe the application of authenticated prefix trees to such
> applications as committed indices, document time-stamping, and merged
> mining.
>
> ==Serialization format==
>
> As a hierarchical structure, the serialization of an entire tree is
> the serialization of its root node. A serialized node is the
> concatenation of five structures:
>
>      node := flags || VARCHAR(extra) || value || left || right
>
> The <code>flags</code> is a single byte field whose composite values
> determine the bytes that follow.
>
>      flags = (left_flags  << 0) |
>              (right_flags << 2) |
>              (has_value   << 4) |
>              (prune_left  << 5) |
>              (prune_right << 6) |
>              (prune_value << 7)
>
> The <code>left_flags</code> and <code>right_flags</code> are special
> 2-bit enumeration fields. A value of 0 indicates that the node does
> not branch in this direction, and the corresponding <code>left</code>
> or <code>right</code> branch is missing (replaced with the empty
> string in the node serialization). A value of 1 indicates a single bit
> key prefix for this branch, implicitly 0 for <code>left</code> and 1
> for <code>right</code>. A 2 indicates up to 7 bits of additional skip
> prefix (beyond the implicit first bit, making 8 bits total) are stored
> in a compact single-byte format. A 3 indicates a skip prefix with
> greater than 7 additional bits, stored length-prefix encoded.
>
> The single bit <code>has_value</code> indicates whether the node
> stores a data bytestring, the value associated with its key prefix.
> Since keys may be any value or length, including one key being a
> prefix of another, it is possible for interior nodes in addition to
> leaf nodes to have values associated with them, and therefore an
> explicit value-existence bit is required.
>
> The remaining three bits are used for proof extraction, and are masked
> away prior to hash operations. <code>prune_left</code> indicates that
> the entire left branch has been pruned. <code>prune_right</code> has
> similar meaning for the right branch. If <code>has_value</code> is
> set, <code>prune_value</code> may be set to exclude the node's value
> from encoded proof. This is necessary field for interior nodes, since
> it is possible that their values may be pruned while their children
> are not.
>
> The <code>value</code> field is only present if the bit
> <code>flags.has_value</code> is set, in which case it is a
> <code>VARCHAR</code> bytestring:
>
>      switch flags.has_value:
>        case 0:
>          value := ?
>        case 1:
>          value := VARCHAR(node.value)
>
> The <code>extra</code> field is always present, and takes on a
> bytestring value defined by the particular application. Use of the
> <code>extra</code> field is application dependent, and will not be
> covered in this specification. It can be set to the empty bytestring
> (serialized as a single zero byte) if the application has no use for
> the <code>extra</code> field.
>
>      value := VARCHAR(calculate_extra(node))
>
> The <code>left</code> and <code>right</code> non-terminals are only
> present if the corresponding <code>flags.left_flags</code> or
> <code>flags.right_flags</code> are non-zero. The format depends on the
> value of this flags setting:
>
>      switch branch_flags:
>        case 0:
>          branch := ?
>        case 1:
>          branch := branch_node_or_hash
>        case 2:
>          prefix  = prefix >> 1
>          branch := int_to_byte(1 << len(prefix) | bits_to_int(prefix)) ||
>                    branch_node_or_hash
>        case 3:
>          prefix  = prefix >> 1
>          branch := VARINT(len(prefix) - 9) ||
>                    bits_to_string(prefix) ||
>                    branch_node_or_hash
>
> <code>branch_flags</code> is a stand-in meant to describe either
> <code>left_flags</code> or <code>right_flags</code>, and likewise
> everywhere else in the above pseudocode <code>branch</code> can be
> replaced with either <code>left</code> or <code>right</code>.
>
> <code>prefix</code> is the key bits between the current node and the
> next branching, terminal, and/or leaf node, including the implicit
> leading bit for the branch (0 for the left branch, 1 for the right
> branch). In the above code, <code>len(prefix)</code> returns the
> number of bits in the bitstring, and <code>prefix >> 1</code> drops
> the first bit reducing the size of the bitstring by one and
> renumbering the indices accordingly.
>
> The function <code>int_to_byte</code> takes an integer in the range
> [0, 255] and returns the octet representing that value. This is a NOP
> in many languages, but present in this pseudocode so as to be explicit
> about what is going on.
>
> The function <code>bits_to_int</code> interprets a sequence of bits as
> a little-endian integer value. This is analogous to the following
> pseudocode:
>
>      def bits_to_int(bits):
>          result = 0
>          for idx in 1..len(bits):
>              if bits[idx] == 1:
>                  result |= 1<<idx
>
> The function <code>bits_to_string</code> serializes a sequence of bits
> into a binary string. It uses little-endian bit and byte order, as
> demonstrated by the following pseudocode:
>
>      def bits_to_string(bits):
>          bytes = [0] * ceil(len(bits) / 8)
>          for idx in 1..len(bits):
>              if bits[idx] == 1:
>                  bytes[idx / 8] |= 1 << idx % 8
>          return map(int_to_byte, bytes)
>
> <code>branch_node_or_hash</code> is either the serialized child node
> or its SHA-256 hash and associated meta-data. Context determines which
> value to use: during digest calculations, disk/database serialization,
> and when the branch is pruned the hash value is used and serialized in
> the same way as other SHA-256 values in the bitcoin protocol (note
> however that it is single-SHA-256, not the double-SHA-256 more
> commonly used in bitcoin). The number of terminal (value-containing)
> nodes and the serialized size in bytes of the fully unpruned branch
> are suffixed to the branch hash. When serializing a proof or
> snapshotting tree state and the branch is not pruned, the serialized
> child node is included directly and the count and size are omitted as
> they can be derived from the serialization.
>
>      if branch_pruned or SER_HASH:
>          branch_node_or_hash := SHA-256(branch) ||
>                                 count(branch) ||
>                                 size(branch)
>      else:
>          branch_node_or_hash := serialize(branch)
>
> As an example, here is the serialization of a prefix tree mapping the
> names men and women of science to the year of their greatest publication:
>
>      >>> dict = AuthTree()
>      >>> dict['Curie'] = VARINT(1898)
>      >>> dict('Einstein') = VARINT(1905)
>      >>> dict['Fleming'] = VARINT(1928)
>      >>> dict['??'] = VARINT(2009)
>      >>> dict.serialize()
>      # An bytestring, broken out into parts:
>
>      # . Root node:
>      0x0e # left_flags: 2, right_flags: 3, has_value: 1
>      0x00 # extra: ?
>
>      # .l Inner node: 0b01000
>      0x11 # 0b01000
>      0x07 # left_flags: 3, right_flags: 1
>      0x00 # extra: ?
>
>      # .l.l Inner node: 0b01000011 0b01110101 0b01110010 0b01101001
>      #                  'C'        'u'        'r'        'i'
>      #                  0b01100101
>      #                  'e'
>      0x1abb3a599a02 # 0b01101110101011100100110100101100101
>      0x10           # has_value: 1
>      0x00           # extra: ?
>      0x03fd6a07     # value: VARINT(1911)
>
>      # .l.r Inner node: 0b010001
>      0x0f # left_flags: 3, right_flags: 3
>      0x00 # extra: ?
>
>      # .l.r.l Inner node: 0b01000101 0b01101001 0b01101110 0b01110011
>      #                    'E'        'i'        'n'        's'
>      #                    0b01110100 0b01100101 0b01101001 0b01101110
>      #                    't'        'e'        'i'        'n'
>      0x312ded9c5d4c2ded00 # 0b1011010010110111
>                           # 0b0011100110111010
>                           # 0b0011001010110100
>                           # 0b101101110
>      0x10                 # has_value: 1
>      0x00                 # extra: ?
>      0x03fd7107           # value: VARINT(1905)
>
>      # .l.r.r Inner node: 0b01000110 0b01101100 0b01100101 0b01101101
>      #                    'F'        'l'        'e'        'm'
>      #                    0b01101001 0b01101110 0b01100111
>      #                    'i'        'n'        'g'
>      0x296c4c6d2dedcc01 # 0b0011011000110010
>                         # 0b1011011010110100
>                         # 0b10110111001100111
>      0x10               # has_value: 1
>      0x00               # extra: ?
>      0x03fd8807         # value: VARINT(1928)
>
>      # .r Inner node: 0b11100100 0b10111000 0b10101101
>      #                '?'
>      #                0b11100110 0b10011100 0b10101100
>      #                '?'
>      0x27938edab39c1a # 0b1100100101110001
>                       # 0b0101101111001101
>                       # 0b001110010101100
>      0x10             # has_value: 1
>      0x00             # extra: ?
>      0x03fdd907       # value: VARINT(2009)
>
> ==Hashing==
>
> There are two variations of the authenticated prefix tree presented in
> this draft BIP. They differ only in the way in which hash values of a
> node and its left/right branches are constructed. The variations,
> discussed below, tradeoff computational resources for the ability to
> compose operational proofs. Whether the performance hit is
> significant, and whether or not the added features are worth the
> tradeoff depends very much on the application.
>
> ===Variation 1: Level-compressed hashing===
>
> In this variation the referenced child node's hash is used in
> construction of an interior node's hash digest. The interior node is
> serialized just as described (using the child node's digest instead of
> inline serialization), the resulting bytestring is passed through one
> round of SHA-256, and the digest that comes out of that is the hash
> value of the node. This is very efficient to calculate, requiring the
> absolute minimum number of SHA-256 hash operations, and achieving
> level-compression of computational resources in addition to reduction
> of space usage.
>
> For example:
>
>      >>> dict = AuthTree()
>      >>> dict['a'] = 0xff
>      >>> dict.serialize()
>      0x0200c3100001ff
>      >>> dict.root
>      AuthTreeNode(
>          left_prefix = 0b01100001,
>          left_hash   =
> 0xbafa0e2bba3396c5e9804b6cbe61be82bc442c1121aed81f8d5de36e9b20dc2f,
>          left_count  = 1,
>          left_size   = 4)
>      >>> dict.hash
>      0xb4837376022a7c9ddaa7d685ad183bcbd5d16c362b81fa293a7b9e911766cf3c
>
> Assuming uniform distribution of key values, level-compressed hashing
> has time-complexity logarithmic with respect to the number of keys in
> the prefix tree. The disadvantage is that it is not possible in
> general to "rebase" an operational proof on top of a sibling,
> particularly if that sibling deletes branches that result in
> reorganization and level compression of internal nodes used by the
> rebased proof.
>
> ===Variation 2: Proof-updatable hashing===
>
> In this variation, level-compressed branches are expanded into a
> series of chained single-branch internal nodes, each including the
> hash of its direct child. For a brach with a prefix N bits in length,
> this requires N chained hashes. Thanks to node-compression (excluding
> empty branches from the serialization), it is possible for each hash
> operation + padding to fit within a single SHA-256 block.
>
> Note that the serialization semantics are unchanged! The variation
> only changes the procedure for calculating the hash values of interior
> nodes. The serialization format remains the same (modulo differing
> hash values standing in for pruned branches).
>
> Using the above example, calling <code>dict.hash</code> causes the
> following internal nodes to be constructed:
>
>      >>> node1 = AuthTreeNode(
>          right_prefix = 0b1,
>          right_hash   =
> 0xbafa0e2bba3396c5e9804b6cbe61be82bc442c1121aed81f8d5de36e9b20dc2f,
>          right_count  = 1,
>          right_size   = 4)
>      >>> node2 = AuthTreeNode( left_prefix=0b0,  left_hash=node1.hash,
>   left_count=1,  left_size=4)
>      >>> node3 = AuthTreeNode( left_prefix=0b0,  left_hash=node2.hash,
>   left_count=1,  left_size=4)
>      >>> node4 = AuthTreeNode( left_prefix=0b0,  left_hash=node3.hash,
>   left_count=1,  left_size=4)
>      >>> node5 = AuthTreeNode( left_prefix=0b0,  left_hash=node4.hash,
>   left_count=1,  left_size=4)
>      >>> node6 = AuthTreeNode(right_prefix=0b1, right_hash=node5.hash,
> right_count=1, right_size=4)
>      >>> node7 = AuthTreeNode(right_prefix=0b1, right_hash=node6.hash,
> right_count=1, right_size=4)
>      >>> node8 = AuthTreeNode( left_prefix=0b0,  left_hash=node7.hash,
>   left_count=1,  left_size=4,
>                                value=0xff)
>      >>> dict.hash == node8.hash
>      True
>      >>> dict.hash
>      0xc3a9328eff06662ed9ff8e82aa9cc094d05f70f0953828ea8c643c4679213895
>
> The advantage of proof-updatable hashing is that any operational proof
> may be "rebased" onto the tree resulting from a sibling proof, using
> only the information locally available in the proofs, even in the
> presence of deletion operations that result in level-compression of
> the serialized form. The disadvantage is performance: validating an
> updatable proof requires a number of hash operations lower-bounded by
> the length of the key in bits.
>
> ==Inclusion proofs==
>
> An inclusion proof is a prefix tree pruned to contain a subset of its
> keys. The serialization of an inclusion proof takes the following form:
>
>      inclusion_proof := variant || root_hash || root_node || checksum
>
> Where <code>variant</code> is a single-byte value indicating the
> presence of level-compression (0 for proof-updatable hashing, 1 for
> level-compressed hashing). <code>root_hash</code> is the Merkle
> compression hash of the tree, the 32-byte SHA-256 hash of the root
> node. <code>tree</code> is the possibly pruned, serialized
> representation of the tree. And finally, <code>checksum</code> is the
> first 4 bytes of the SHA-256 checksum of <code>variant</code>,
> <code>root_hash</code>, and <code>root_node</code>.
>
> For ease of transport, the standard envelope for display of an
> inclusion proof is internet-standard base64 encoding in the following
> format:
>
> - -----BEGIN INCLUSION PROOF-----
> ATzPZheRnns6KfqBKzZs0dXLOxithdan2p18KgJ2c4O0DgARBwAauzpZmgIQAAP9agcPADEt7Zxd
> TC3tABAAA/1xBylsTG0t7cwBEAAD/YgHJ5OO2rOcGhAAA/3ZByEg+2g=
> - -----END INCLUSION PROOF-----
>
> Decoded, it looks like this:
>
>      0x01 # Level-compressed hashing
>      # Merkle root:
>      0x3ccf6617919e7b3a29fa812b366cd1d5cb3b18ad85d6a7da9d7c2a02767383b4
>      # Serialized tree (unpruned):
>      0x0e001107001abb3a599a02100003fd6a070f00312ded9c5d4c2ded00100003fd
>      0x7107296c4c6d2dedcc01100003fd880727938edab39c1a100003fdd907
>      # Checksum:
>      0x2120fb68
>
> ==Operational proofs==
>
> An operational proof is a list of insert/update and delete operations
> suffixed to an inclusion proof which contains the pathways necessary
> to perform the specified operations. The inclusion proof must contain
> the key values to be updated or deleted, and the nearest adjacent key
> values for each insertion. The serialization of an operational proof
> takes the following form:
>
>      operational_proof := variant || root_hash || tree ||
>                           VARLIST(delete*) || VARLIST(update*) ||
>                           new_hash || checksum
>
>      delete := VARCHAR(key)
>      update := VARCHAR(key) || VARCHAR(value)
>
> The first three fields, <code>variant</code>, <code>root_hash</code>,
> and <code>tree</code> are the inclusion proof, and take the same
> values described in the previous section. <code>deletes</code> is a
> list of key values to be deleted; each key value in this list must
> exist in the inclusion proof. <code>updates</code> is a list of key,
> value mappings which are to be inserted into the tree, possibly
> replacing any mapping for the key which already exists; either the key
> itself if it exists (update), or the two lexicographically closest
> keys on either side if it does not (insert) must be present in the
> insertion proof. <code>new_hash</code> is the resulting Merkle root
> after the insertion, updates, and deletes are performed, and
> <code>checksum</code> is the initial 4 bytes of the SHA-256 hash of
> the preceding fields.
>
> Just like inclusion proofs, an operational proof is encoded in base64
> for display and transport. Here's the same
>
> - -----BEGIN OPERATIONAL PROOF-----
> ATzPZheRnns6KfqBKzZs0dXLOxithdan2p18KgJ2c4O0LgARaIsVaQi/GdhOPOgA8p4Pu4PiEfEg
> lcmy3j7bOc7hXw0DLSeTjtqznBoQAAP92QcBMOS4reacrACzuZJbyP7fqIOf5VEk4iarG4+uPoZC
> oun8BztQMQBy0LHVeSY=
> - -----END OPERATIONAL PROOF-----
>
> Decoded and broken into its constituent fields:
>
>      0x01 # Level-compressed hashing
>      # Original Merkle root:
>      0x3ccf6617919e7b3a29fa812b366cd1d5cb3b18ad85d6a7da9d7c2a02767383b4
>      # Serialized tree (included keys: '??'):
>      0x2e0011688b156908bf19d84e3ce800f29e0fbb83e211f12095c9b2de3edb39ce
>      0xe15f0d032d27938edab39c1a100003fdd907
>      # Deletion list ['??']:
>      0x01
>      0x30e4b8ade69cac
>      # Insertion list []:
>      0x00
>      # New Merkle root:
>      0xb3b9925bc8fedfa8839fe55124e226ab1b8fae3e8642a2e9fc073b50310072d0
>      # Checksum:
>      0xb1d57926
>
> ~End of File~
> -----BEGIN PGP SIGNATURE-----
> Version: GnuPG v1.4.14 (GNU/Linux)
> Comment: GPGTools - http://gpgtools.org
> Comment: Using GnuPG with Thunderbird - http://www.enigmail.net/
>
> iQIcBAEBAgAGBQJSs6HIAAoJEAdzVfsmodw4gooQAJm7XNsZjgdeTSpKIvUIU38f
> tQx2FD08hQdLl48me5mDUbHJgGlYINsKAgoZ8Mqwi/kHEEYhuIlLIX1p6Ovigidb
> 21BiVoOLdG1egGOwxp17DuwYaDPTppFTlN9TBjZzW6WKc7+4aNvyc1KtrbHIhtj/
> 04ekFyAn4U5UH0ht7CI79j0u3Kp85p5D4PyYZB2m82mzti6OxpSM4tXlMkDW7ihg
> QJwiZSjzejqTd7WF0zr0SLeGVRSN2A0dzUCoVsI98eIa3hkw2N4ae6dRkibyStOT
> V8VEDvHArEDlvu8jiryajhsom5mvtOOclNDkVXWAf/Te4gj05iYdTIvNvDEJtqsP
> XDbmw6GgV1kBLlLo0mp//t/+wr+nIvy+sVAP+eqtM/0vjaVXBkXxkUMqqNkrtVpB
> f3whq7nFahssUMSoWE93jgob1ayAax2XUALVMAXYsJl7b2MqBGlhiTZ8FQZ+TW4A
> tIpKeUprPmDvA18rO3SCbmLMQryZqYiH0sRyvUc5kvn3qCRHrISZNkEuK591eS+x
> BO1eOluPzVqeXPPSK1jvGeY0FNJtwzbov4nI1mzOvzQHLCvkHn5PhUFCK5tL5tAe
> b0Z5qwDV+SvVs7W1R7ejYBzEj77U1zuzZ9AtikOuvy+bNGrkIlpI49EyXHijm7C3
> Q6JacTuI0PelYji2gaBJ
> =BbDs
> -----END PGP SIGNATURE-----
>
> ------------------------------------------------------------------------------
> Rapidly troubleshoot problems before they affect your business. Most IT
> organizations don't have a clear picture of how application performance
> affects their revenue. With AppDynamics, you get 100% visibility into your
> Java,.NET, & PHP application. Start your 15-day FREE TRIAL of AppDynamics Pro!
> http://pubads.g.doubleclick.net/gampad/clk?id=84349831&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development




From pete at petertodd.org  Mon Jan  6 02:53:12 2014
From: pete at petertodd.org (Peter Todd)
Date: Sun, 5 Jan 2014 21:53:12 -0500
Subject: [Bitcoin-development] Privacy and blockchain data
Message-ID: <20140106025312.GC2356@savin>

* Summary

CoinJoin, CoinSwap and similar technologies improve your privacy by
making sure information about what coins you own doesn't make it into
the blockchain, but syncing your wallet is a privacy risk in itself and
can easily leak that same info. Here's an overview of that risk, how to
quantify it, and how to reduce it efficiently.


* Background

In the most general sense a Bitcoin wallet is a collection of one or
more scriptPubKeys, often known as addresses.(*) The basic purpose of
the wallet is maintain the set of all transaction outputs (txouts)
matching the scriptPubKeys in the wallet.  Secondary to that purpose is
to maintain the set of all transactions associated with scriptPubKeys in
the wallet; almost all (all?) wallet software maintains transaction
information rather than only txout data. Usually, but not always, the
wallet will have some mechanism to spend transaction outputs, creating
new transactions. (if the wallet doesn't it is referred to as a
watch-only wallet)

Given a full set of blockchain data the task of keeping the set of all
relevant transactions and txouts up-to-date is simple: scan the
blockchain for the relevant data. The challenge is to devise systems
where wallets can be kept up to date without this requirement in a way
that is secure, efficient, scalable, and meets the user's privacy
requirements.

*) Alternatively addresses can be thought of as instructions to the
   payor as to how to generate a scriptPubKey that the payee can spend,
   a subtlety different concept.


* Threat Model and Goals

Currently the Bitcoin network consists of a large (low thousands) number
of allegedly independent nodes. There is no mechanism to prevent an
attacker from sybil attacking the network other than the availability of
IP addresses. This protection is made even weaker by the difficulty of
being sure you have a non-sybilled list of nodes to connect too; IP
addresses are passed gossip-style with no authentication.

From a privacy perspective we are conservative and assume an active,
internal, and global attacker - using the terminology of Diaz et al.(1)
- that controls up to 100% of the nodes you are connected too. With
regard to retrieval of blockchain data we can use the Sweeney's notion
of k-anonymity(2) where the privacy-sensitive data for an individual is
obscured by it's inclusion in a data of a large set of individuals, the
anonymity set.


* Basic Functionality

With regard to blockchain data we have the following basic functions:

** Spending funds

The user creates a transaction and gets it to miners by some method,
usually the P2P network although also possibly by direct submission.
Either way privacy can be achieved through a mix network such as Tor
and/or relaying other users' transactions so as to embed yours within a
larger anonymity set. In some cases payment protocols can shift the
problem to the recipient of the funds. Using CoinJoin also helps
increase the anonymity set.

Usually the sender will want to determine when the transaction confirms;
once the transaction has confirmed modulo a reorganization the
confirmation count can only increase. Transaction mutability and
double-spends by malicious CoinJoin participants complicate the task of
detecting confirmation: ideally we could simply query for the presence
of a given txid in each new block, however the transaction could be
mutated, changing the txid. The most simple way to detect confirmation
is then to query for spends of the txouts spend by the transaction.


** Receiving new funds

While in the future payment protocols may give recipients transaction
information directly it is most likely that wallets will continue to
have to query peers for new transactions paying scriptPubKey's under the
user's control for the forseeable future.


** Detection of unauthorized spends

Users' want early detection of private key compromise, accomplished by
querying blockchain data for spends from txouts in their wallets. This
has implications for how change must be handled, discussed below.


* Scalability/Efficiency

The total work done by the system as a whole for all queries given some
number of transactions n is the scalability of the scheme. In addition
scalability, and privacy in some cases, is improved if work can be
easily spread out across multiple nodes both at a per-block and
within-block level.


* Reliability/Robustness

Deterministic wallets using BIP32 or similar, where all private keys are
derived from a fixed seed, have proven to be extremely popular with
users for their simple backup model. While losing transaction metadata
after a data-loss event is unfortunate, losing access to all funds is a
disaster. Any address generation scheme must take this into account and
make it possible for all funds to be recovered quickly and efficiently
from blockchain data. Preserving privacy during this recovery is a
consideration, but 100% recovery of funds should not be sacrificed for
that goal.


* Query schemes

** Bloom filters

BIP37 bloom filters are currently implemented by the Bitcoin reference
implementation and used by bitcoinj-based SPV clients. Bloom filters
achieve a privacy-bandwidth tradeoff by having probabalistic
false-positives; the false-positives comprise the anonymity set.

Boom filters have a number of problems, both in the specific BIP37
implementation, as well as fundemental to the idea. Scalability is a
serious problem: the client sends asks a peer with a copy of all
blockchain data to filter data sent to the client, limiting the client's
bandwidth to only the data they are interested in. In the typical case
of a SPV wallet syncronizing against m new blocks this requires the peer
to read those m blocks from disk in their entirety, apply the filter,
and send the client the subset of matching transactions. Obviously this
results in poor O(n^2) scaling for n clients each making some fixed
number of transactions.

Of course bloom filters are attractive in that they have very good
performance per match, but this performance is only really relevant for
the most recent blockchain information where the data is in RAM. For
older information they make possible the Bloom IO attack where an
attacker uses an inordinant amount of disk IO bandwidth at little cost
to themselves.(3)

The actual BIP37 standard, and existing implementations of it, have a
number of other flaws that reduce privacy. For instance the standard
lets the seed value of the hash function be tweaked with a 32-bit
integer, nTweak. However on the one hand if randomly chosen and rarely
changed, as suggested by BIP37, the 32-bit integer can be used by an
attacker to correlate multiple connections from the same wallet. On the
other hand if nTweak is changed an attacker that can link multiple bloom
filters can AND those filters together to greatly decrease the
false-positive rate and determine exactly what funds are in the user's
wallet.


** Prefix filters

With a randomly distributed keyspace - common in cryptographic
applications - clients can query using variable length prefixes that
partially match the desired keys. A very simple format for a query of n
prefixes will look like the following:

    <1 byte length in bits> <1 to 256/8 bytes of prefix>
    ...
    ...
    0x00

The anonymity set is then the blockchain data whose key is the same
prefix, usually H(scriptPubKey) or scriptPubKey directly. An important
advantage of prefix filters is compatibility with the proposed (U)TXO
commitment schemes: the prefix maps directly to the committed
scriptPubKey lookup trees, and nodes simply return all entries matching
the prefix, as well the the rest of the merkle path to the blockchain
headers proving the data is valid.

While bloom filters have O(n) cost per lookup, or O(n^2) scalability
system-wide, prefix filters have significantly better O(log n) cost per
lookup, or O(n log n) system-wide. It's also worth noting that a naive
implementation can achieve very similar performance to bloom filters
without bothering to build key-value indexes by just scanning blockchain
data; once the data is hashed testing the hash against a prefix has a
minimal cost.


** Cryptographically blinded schemes

There are many blinded database query schemes in existence. While we do
not reject such schemes completely, technologies that rely on simple and
easy-to-understand cryptography have a significant advantage in their
simplicity. In addition such complex schemes are unlikely to ever be
made into miner commitments and thus are less trustworthy in the long
run.


* Correlation attacks

It is often advantageous if blockchain queries can be efficiently spread
across multiple servers to avoid allowing the attacker to correllate the
information into a whole. If you have n addresses that need to be
watched for new transactions, splitting the queries across m nodes
reduces the information any one node may learn. With bloom filters doing
this is extremely costly as the full blockchain data needs to be read
from disk to apply the filter; with prefix filters if the nodes have
appropriate indexes there is little overhead to splitting the queries
and no performance loss.


* DoS attacks

A possible DoS attack on bandwidth is to insert a large amount of
blockchain data matching the target's filter; the BIP37 nTweak parameter
was an attempt to avoid this problem, although with privacy tradeoffs.
Blockchain data is an extremely expensive communications channel so we
do not consider this a serious issue. Implementations may wish to give
clients the ability to specify a filter for information they do not want
to avoid unintentional collisions, although hopefully in the future the
address reuse making this a potential problem will become less common.


* Address use, management, and generation

If privacy was not a consideration the most efficient mode of operation
would be to use a single address, as is done by many existing wallets,
notably the bitcoinj-derived Multibit and Android Wallet, both of which
use bloom filters. In addition to strongly encouraging address re-use,
neither provide the user any control over the privacy/bandwidth tradeoff
given by bloom filters; the default settings have an extremely low
false-positive rate that is a significant privacy risk.

Taking privacy into account better clients such as Electrum, Armory, and
Bitcoin Core discourage the re-use of addresses in their UIs, and send
change to new addresses. However this leads to problem with user
expectations: users expect it to be possible to be notified quickly of
new transactions paying any address ever generated by their wallet, as
well as unauthorized spends from any txout, yet for privacy each query
for transactions related to the address/txout must match false-positives
that consume bandwidth; for a fixed bandwidth budget the specificity and
size of the filter must increase over time.

We have two main avenues to solve this problem:

1) Txin-reuse: Continue to reinforce the idea that transaction inputs
   have no particular relationship to outputs. Using them for refunds or
   other purposes implying "ownership" must be strongly discouraged.
   CoinJoin will help here. If addresses associated with change txouts
   are truly one-time-use, we can reduce or eliminate queries associated
   with them. In particular, while the set of all change addresses ever
   used will grow linearly with time, the set of all change addresses
   with funds in them will remain roughly stable - it's this set that
   needs to be queried to detect unauthorized spends.

2) Common prefixes: Generate addresses such that for a given wallet they
   all share a fixed prefix. The length of that prefix determines the
   anonymity set and associated privacy/bandwidth tradeoff, which
   remainds a fixed ratio of all transactions for the life of the
   wallet.

With this approach change addresses continue to be generated randomly, a
requirement for CoinJoin privacy. There is some statistical information
leaked if many non-change txouts are spent in a single transaction in a
CoinJoin, but even that leak can be avoided with the authors
OP_RETURN-based stealth addresses proposal. (to be published)

The actual prefix-forcing scheme in many cases will have to be
brute-force search; fortunately the search space involved is reasonably
small, ~2 to ~16 bits, and can be done as a background task.


1) Towards Measuring Anonymity, Claudia Diaz and Stefaan Seys and Joris
   Claessens and Bart Preneel (April 2002)

2) k-Anonymity: A Model for Protecting Privacy, Latanya Sweeney, May
   2002

3) Private discussions with developers.

-- 
'peter'[:-1]@petertodd.org
000000000000000f9102d27cfd61ea9e8bb324593593ca3ce6ba53153ff251b3
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 685 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140105/41f8b0fc/attachment.sig>

From pete at petertodd.org  Mon Jan  6 12:03:38 2014
From: pete at petertodd.org (Peter Todd)
Date: Mon, 6 Jan 2014 07:03:38 -0500
Subject: [Bitcoin-development] Stealth Addresses
Message-ID: <20140106120338.GA14918@savin>

* Abstract

A Stealth Address is a new type of Bitcoin address and related
scriptPubKey/transaction generation scheme that allowers payees to
publish a single, fixed, address that payors can send funds efficiently,
privately, reliably and non-interactively. Payors do not learn what
other payments have been made to the stealth address, and third-parties
learn nothing at all. (both subject to an adjustable anonymity set)


* Acknowledgments

Credit goes to ByteCoin for the original idea.(1) Gregory Maxwell, Adam
Back, and others on #bitcoin-wizards contributed valuable input on the
implementation. Finally thanks goes to Amir Taaki for input on the
general idea of stealth addresses and use-cases.


* Background

Viewed generally a Bitcoin address is a mechanism by which a payee
instructs a payor to create a transaction such that the payee can spend
one or more of the transaction outputs. Of course, typically the address
is simply the hash of a pubkey, and the mechanism by which the funds are
made available to the payee is to simply create a scriptPubKey of the
following form:

    DUP HASH160 <pubKeyHash> EQUALVERIFY CHECKSIG

The problem however is address reuse: it is convenient for payees to
give one or more payor a single address and use it multiple times for
various purposes. This results in all those payments becoming trivially
linkable to each other by an attacker - a threat not only to the privacy
of the user, but also to all users of Bitcoin.(2)

BIP32 hierarchical deterministic wallets are frequently proposed as a
solution. Now an address is a chain code and the mechanism by which a
scriptPubKey is generated is to derive a one-time-use pubkey from that
chain code and some index i. However, this quickly runs into two main
problems:

1) Lack of privacy: While someone not in possession of the address can't
   link payments together, someone who is can.

2) State: If the index is not to be re-used wallets must either maintain
   per-address state, or somehow query for already used indexes, or
   somehow generate them in a sufficiently small range that the payee
   can recover the indexes. All these solutions are problematic.

A good example of where the BIP32-derivation solutions fails come up at
the Dark Wallet Hackathon where it was suggested by the author that for
the purpose of securing person-to-person payments OpenPGP public keys
and X.509 certificates be extended with a new user-id field containing a
Bitcoin address. Wallet software could then use either certificate
system to ensure funds were being sent to the intended recipients -
essentially a non-interactive way of solving what the BIP70 payment
protocol solves interactively. Of course, without stealth addresses the
scheme would likely have little or no privacy.


* Requirements

1) Generated scriptPubKey must be globally unique

2) Must be only spendable by payee

3) scriptPubKey and associated transaction must be indistinguishable to
   third-parties from other transactions in some anonymity set.

4) Method must be fully deterministic and funds recoverable from a
   wallet seed and blockchain data for both payee and payor.

5) Funds must be efficiently recoverable by payee with reasonable, and
   configurable, computation and bandwidth costs.

6) Must be compatible with CoinJoin/Must not leak information to payee
   about what txins were used to pay them.

7) Must be compatible with multisig-protected wallets.

8) Must not make assumptions about txin scriptSig form.

9) Must be possible to prove to third parties that payment was made in
   accordance to instructions without revealing any other information.


** Payment Reliability

Schemes for making payments by transmitting nonces to the recipient
through some other medium, such as Bitmessage, were discussed at the
Dark Wallet Hackathon. However using any medium but the blockchain
itself for the communication means that the reliability of the payment
getting to the recipient is less than that of a standard transaction.
For instance Bitmessage nodes only keep messages for two weeks. We
decided that anything less than reliable atomic transactions was
unacceptable.


* Applying encryption to payments, simple explanation

Using Elliptic curve Diffie-Hellman (ECDH) we can generate a shared
secret that the payee can use to recover their funds. Let the payee have
keypair Q=dG. The payor generates nonce keypair P=eG and uses ECDH to
arrive at shared secret c=H(eQ)=H(dP). This secret could be used to
derive a ECC secret key, and from that a scriptPubKey, however that
would allow both payor and payee the ability to spend the funds. So
instead we use BIP32-style derivation to create Q'=(Q+c)G and associated
scriptPubKey.

As for the nonce keypair, that is included in the transaction in an
additional zero-valued output:

    RETURN <P>

The payee recovers the funds by scanning the blockchain for candiate P's
in transactions, regenerating the scriptPubKey, and finally checking if
any txouts in the transactions match. Note the close similarity of this
technique to how the Bitmessage network functions - an initial
implementation of the idea will find the Bitmessage code a suitable
starting point.


* Trading off anonymity set size for decreased bandwidth/CPU

By taking advantage of prefix filters(3) we can choose a tradeoff
between anonymity set size and bandwidth/CPU usage if the payee
specifies that payments to them are to match some short prefix k. There
are a few possibilities for how the prefix is to the applied - the most
simple is if per-block indexes of scriptPubKeys are available:

    RETURN <k> <P>

Alternatively if per-block indexes of H(scriptPubKeys) are only
available the wallet software can grind the scriptPubKey with nonce i
until it matches the specified prefix:

    RETURN <i> <P>

Furthermore as symmetric ciphers are quite cheap we might as well hide
the purpose of the OP_RETURN txout and encrypt the pubkey P using H(Q)
as a symmetric key. This gives us a slightly larger anonymity set.


* Advantages of using a separate output

An alternative would be to either re-use a pubkey or signature nonce
value from a transaction input, saving about 45 bytes per txout. An
absolute minimum sized Bitcoin transaction is 166 bytes(4) so at best we
have a 27% savings in tx fees, and more typically around ~15%. (modulo
mass-payments from a single txin)

However using an explicit prunable OP_RETURN output to store the pubkey
rather than re-using one from a txin or txin signature has a number of
advantages:

1) The txin's owned by the payor are not revealed to the payee. In fact,
   they could be held by a third-party who simply makes a transaction
   with the appropriate txouts on behalf of the payee.

2) Less information about the txouts is leaked. The statistical
   distribution of txouts remains unchanged - not possible in re-use
   schemes because they need to grind the payee scriptPubKey's for the
   sake of the prefix filters.

3) If required the nonce secret can be revealed to prove that a payment
   was made to a third-party, e.g. for dispute resolution.


* Bare CHECK(MULTI)SIG output alternative

An alternative with better efficiency could be to use bare
OP_CHECK(MULTI)SIG outputs to hold the nonce pubkey - generally a second
output is needed anyway for change. The most simple would be to use Jeff
Garzik's OP_DROP proposal(5) for the prefix:

  <prefix> DROP n <pubkey>...<pubkey> m CHECKMULTISIG

  or

  <prefix> DROP <pubkey> CHECKSIG

The payor pubkey is in the *change* txout, and the payee's ECDH-derived
pubkey in the other txout. By setting the prefix to be the same on both
txouts and using the same basic scriptPubKey form the relationship of
change and payment is still hidden; CoinJoin-using implementations can
adopt even more sophisticated approaches.

If IsStandard() rules remain the same and using OP_DROP is impractical,
we can also grind the change pubkey to match the prefix in a
deterministic manner so the wallet can still be recovered from a seed.
More costly, but maybe still acceptable for reasonably short prefixes.
Either way the result is transactions that are actually smaller and
cheaper than standard transactions, although without the advantage of
pushing scriptPubKey size payment to the receiver. (a pity we didn't
spend the extra time to adopt OP_EVAL)

A disadvantage is that revealing the nonce secret to prove a payment was
made is more problematic - either the txout needs to be spent first, or
we need a CHECKMULTISIG.


* Address format

To be decided. To support mulisig we probably want the ability to
specify n-of-m master pubkeys, using the nonce to generate derived ones.
For the single pubkey case the addresses will be a little longer than
standard Bitcoin addresses:

  s9KND3vfXjs3YqfZp86Acce3bM7Mhuptwh6mjeDnThsDei9Z2ZZcU

  vs.

  1LZn91ynrA6BCmoUKwnV3Ygk4FQMfPxLbg


1) ByteCoin, Untraceable transactions which can contain a secure message
   are inevitable, https://bitcointalk.org/index.php?topic=5965.0

2) Gregory Maxwell, Dark Wallet Certification discussions, also
   http://snowdenandthefuture.info/PartIII.html

3) Peter Todd, [Bitcoin-development] Privacy and blockchain data,
   http://www.mail-archive.com/bitcoin-development at lists.sourceforge.net/msg03612.html

4) Bitcoin Wiki, Maximum transaction rate,
   https://en.bitcoin.it/w/index.php?title=Maximum_transaction_rate&oldid=36983

5) Jeff Garzik, Add small-data OP_DROP transactions as standard
   transactions, https://github.com/bitcoin/bitcoin/pull/1809

-- 
'peter'[:-1]@petertodd.org
0000000000000002861ee0919fc86990573ac360820766dc1b9ba580e5ccf7b6
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 685 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140106/53d085cc/attachment.sig>

From pete at petertodd.org  Mon Jan  6 15:44:56 2014
From: pete at petertodd.org (Peter Todd)
Date: Mon, 6 Jan 2014 10:44:56 -0500
Subject: [Bitcoin-development] The insecurity of merge-mining
In-Reply-To: <CAC1+kJNM=67Yw0Rde9y7H0v0x07MsWmh6oK++hDtsKEmLtqcNg@mail.gmail.com>
References: <CAMkFLsSwKEiEtV1OaAsGPiU8iAWbb77fDNJDmRwbgKnZ_kjG6Q@mail.gmail.com>
	<20131230232225.GA10594@tilt> <201312310114.05600.luke@dashjr.org>
	<20140101045342.GA7103@tilt>
	<CAC1+kJPTYzvU4ngFspvULDMvQK4ckkM719Y+_hx272PCU3amyg@mail.gmail.com>
	<20140103210139.GB30273@savin>
	<CAC1+kJNM=67Yw0Rde9y7H0v0x07MsWmh6oK++hDtsKEmLtqcNg@mail.gmail.com>
Message-ID: <20140106154456.GA18449@savin>

On Sat, Jan 04, 2014 at 01:27:42AM +0100, Jorge Tim?n wrote:
> > It's a thought experiment; read my original post on how to make a
> > zerocoin alt-chain and it might make more sense:
> >
> > http://www.mail-archive.com/bitcoin-development at lists.sourceforge.net/msg02472.html
> >
> > Even better might be to use a merge-mined version of Mastercoin as an
> > example, where the initial distribution of coins is fixed at genesis and
> > forward from that is independent of the Bitcoin blockchain.
> 
> I've read it until the end this time, and I have many doubts about
> proof of sacrifice as a security mechanism. Although it's certainly
> not proof of stake, it smells similarly to me. I'll have to think more
> about it.
> I still think that link doesn't prove anything against merged mining security.

It's not meant to prove anything - the proof-of-sacrificed-bitcoins
mentioned(*) in it is secure only if Bitcoin itself is secure and
functional. I referred you to it because understanding the system will
help you understand my thinking behind merge-mining.

*) It also mentions proof-of-sacrificed-zerocoins which *is* distinct
because you're sacrificing the thing that the chain is about. Now that
has some proof-of-stake tinges to it for sure - I myself am not
convinced it is or isn't a viable scheme.

> >> I think Namecoin has a lower reward for miners than litecoin and still
> >> has much better security. I haven't run the numbers but, will you deny
> >> it?
> >> How many amazon VMs do you need to attack each one of them?
> >
> > I'll give you a hint: "marginal cost"
> 
> Please, don't give me clues and let's discuss the economics, that's
> precisely what I want and where I think you're getting it wrong.
> Since you refuse to try to prove that MM is less secure, I'll try
> myself to prove the opposite.

<snip>

> Feel free to ask for corrections in the example if you think it needs them.
> Feel free to bring your edge legal cases back, but please try to do it
> on top of the example.

You're argument is perfectly valid and correct, *if* the assumptions
behind it hold. The problem is you're assuming miners act rationally and
have equal opportunities - that's a very big assumption and I have
strong doubts it holds, particularly for alts with a small amount of
hashing power.

You know, something that I haven't made clear in this discussion is that
while I think merge-mining is insecure, in the sense of "should my new
fancy alt-coin protocol widget use it?", I *also* don't think regular
mining is much better. In some cases it will be worse due to social
factors. (e.g. a bunch of big pools are going to merge-mine my scheme on
launch day because it makes puppies cuter and kids smile)

All I'm saying is that if you can afford the transaction fees stuffing
your data into the Bitcoin blockchain has orders of magnitude better
security. I'm not saying it'll be cheap - if miners start trying to
block your protocol blacklists they can make it fairly expensive for
your alt - but it will be just as secure against reorganization attack
as Bitcoin itself.

> PD I'm eager to read your post on BIP32-ish payment protocol, bloom
> filters and prefix filters, so I hope I'm not distracting you too much
> with this.

Heh, my one line reply might have been a bit harsh because of that. :)

-- 
'peter'[:-1]@petertodd.org
0000000000000000bf0a7634ebb2c909bada84ce0dce859e9298d3ac504db3c8
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 685 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140106/d8ae1307/attachment.sig>

From pete at petertodd.org  Mon Jan  6 18:13:24 2014
From: pete at petertodd.org (Peter Todd)
Date: Mon, 6 Jan 2014 13:13:24 -0500
Subject: [Bitcoin-development] BIP proposal: Authenticated prefix trees
In-Reply-To: <52C9A7EE.2050904@gmx.de>
References: <52B3A1C8.5000005@monetize.io>
 <52C9A7EE.2050904@gmx.de>
Message-ID: <20140106181324.GB28880@petertodd.org>

On Sun, Jan 05, 2014 at 07:43:58PM +0100, Thomas Voegtlin wrote:
> Hello and happy new year to this mailing list!
> 
> 
> Thank you Mark for the incredible work you've been doing on this.
> I am following this very closely, because it is of primary importance
> for Electrum.
> 
> I have written a Python-levelDB implementation of this UTXO hashtree,
> which is currently being tested, and will be added to Electrum servers.

Along the lines of my recent post on blockchain data:

Is it going to be possible to do partial prefix queries on that tree?

Also have you considered creating per-block indexes of all
scriptPubKeys, spent or unspent, queryable via the same partial prefix
method?

> I too believe that BIPs should define interoperability points, but probably
> not implementation details. For the UTXO hashtree, this means that a BIP
> should at least specify how the root hash is constructed. This might be the
> only thing that needs to be specified.
> 
> However, I see no pressing issue with writing a BIP; it might be preferable
> to implement and test different options first, and learn from that.

It'd be very good to test this stuff thoroughly on Electrum first and
get a feel for the performance and usability before any soft-fork to
make it a miner commitment.

Similarly a C++ implementation should be simply added to Bitcoin Core as
a bloom filter replacement and made available over the P2P network.

-- 
'peter'[:-1]@petertodd.org
000000000000000009bc28e08b41a74801c5878bf87978c2486aee7ed8a85778
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 490 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140106/9cfcd23b/attachment.sig>

From mark at monetize.io  Tue Jan  7 00:21:25 2014
From: mark at monetize.io (Mark Friedenbach)
Date: Mon, 06 Jan 2014 16:21:25 -0800
Subject: [Bitcoin-development] BIP proposal: Authenticated prefix trees
In-Reply-To: <20140106181324.GB28880@petertodd.org>
References: <52B3A1C8.5000005@monetize.io> <52C9A7EE.2050904@gmx.de>
	<20140106181324.GB28880@petertodd.org>
Message-ID: <52CB4885.6090003@monetize.io>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On 01/06/2014 10:13 AM, Peter Todd wrote:
> On Sun, Jan 05, 2014 at 07:43:58PM +0100, Thomas Voegtlin wrote:
>> I have written a Python-levelDB implementation of this UTXO
>> hashtree, which is currently being tested, and will be added to
>> Electrum servers.
> 
> Along the lines of my recent post on blockchain data:
> 
> Is it going to be possible to do partial prefix queries on that
> tree?

There's really two tree structures being talked about here. Correct me
if I'm wrong Thomas, but last time I looked at your code it was still
implementing a 256-way PATRICIA trie, correct? This structure lends
itself to indexing either scriptPubKey or H(scriptPubKey) with
approximately the same performance characteristics, and in the
"Ultimate blockchain compression" thread there is much debate about
which to use.

In the process of experimentation I've since moved from a 256-way
PATRICIA trie to a bitwise, non-level-compressed trie structure - what
I call proof-updatable trees in the BIP. These have the advantage of
allowing stateless application of one proof to another, and as
consequence enable mining & mempool operations without access to the
UTXO set, so long as proofs are initially provided in the transaction
& block wire format.

The "disadvantage" is that performance is closely tied to key length,
making H(scriptPubKey) the much more desirable option. I'm sure you
see that as an advantage, however :)

> Also have you considered creating per-block indexes of all 
> scriptPubKeys, spent or unspent, queryable via the same partial
> prefix method?

This would be quite easy to do, separate from the UTXO structure but
using the same trie format.
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.14 (GNU/Linux)
Comment: GPGTools - http://gpgtools.org
Comment: Using GnuPG with Thunderbird - http://www.enigmail.net/

iQIcBAEBAgAGBQJSy0iFAAoJEAdzVfsmodw434MQAIA/fDYT7SfMtfLEgDQKhXCn
slRqFEx/HXjvgHHSYnbr9V+8LrGzNvT2ImebbV9ge8VlziAFNGIUq2EYhFs4kHWu
GVm9aL8Jj/27SvM0tRwr9n2XIifKOh2sVINAjbv+UwPv/O+cULU95/b53DEF6aqI
OWxioOR50TPe4t9AevAGVypNLm1DsyDdymhO9xyBN92xGTNj5QKL5hHG3kcsLIl1
7KaxO0w4UC2sdSGj9FeyH1b0zYg8FlzjJHc1CUshHwUwyYo8LRJtRypL5lrayERg
Er/kIGEDovcenNBW8G79l+8VKPfB/lMTssT2pDiQL+1e1fg46CIQxHSyap2JSFTE
jgleRk/+1NK/ZjOQ8dEBPZK3TE1WY3qlm/ekjG/8W5kXqcxzFBoAkeBNXuJ/8UMi
mKe+DTmbp0xnvLO1p+hpugXKfrQSpcFL+ZvJHlFS1lz7O1N3WvuDCNP9El+L6ueM
nFzjr1NTnX0z4vYtscI7qBKVqUrB7Z84c3O/lSYpw4Jilxl4trzV4cn7+AF7KWGM
ktR9JJeIoNcJ2Zx4EpRp6OSwhtLkWZyLpPnidQ2p6ev2ytXpTpGsW/i5XS2w57UD
2IG5E0Q7Xzvd58lI/YollWQcagVOZdyzYXa+wVZoFQ6gLF47andpUmtUJOhI7gxv
T/rWhPhkTMUn8TdvUcV/
=N9zM
-----END PGP SIGNATURE-----



From thomasv1 at gmx.de  Tue Jan  7 06:31:57 2014
From: thomasv1 at gmx.de (Thomas Voegtlin)
Date: Tue, 07 Jan 2014 07:31:57 +0100
Subject: [Bitcoin-development] BIP proposal: Authenticated prefix trees
In-Reply-To: <52CB4885.6090003@monetize.io>
References: <52B3A1C8.5000005@monetize.io>
	<52C9A7EE.2050904@gmx.de>	<20140106181324.GB28880@petertodd.org>
	<52CB4885.6090003@monetize.io>
Message-ID: <52CB9F5D.1040903@gmx.de>


Le 07/01/2014 01:21, Mark Friedenbach a ?crit :
> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA1
>
> On 01/06/2014 10:13 AM, Peter Todd wrote:
>> On Sun, Jan 05, 2014 at 07:43:58PM +0100, Thomas Voegtlin wrote:
>>> I have written a Python-levelDB implementation of this UTXO
>>> hashtree, which is currently being tested, and will be added to
>>> Electrum servers.
>> Along the lines of my recent post on blockchain data:
>>
>> Is it going to be possible to do partial prefix queries on that
>> tree?
> There's really two tree structures being talked about here. Correct me
> if I'm wrong Thomas, but last time I looked at your code it was still
> implementing a 256-way PATRICIA trie, correct? This structure lends
> itself to indexing either scriptPubKey or H(scriptPubKey) with
> approximately the same performance characteristics, and in the
> "Ultimate blockchain compression" thread there is much debate about
> which to use.

You are right. The 256-way branching follows from the fact that
the tree was implemented using a key-value database operating
with byte strings (leveldb). With this implementation constraint,
a different branching would probably be possible but wasteful.

My recent code creates one leaf per unspent, and uses 56-byte
keys built as:

   H(scriptPubKey) + txid + txpos

(This is not pushed yet, it needs cleanup. Previous code created one 
leaf per address)

Partial prefix queries are possible with database iterators.

> In the process of experimentation I've since moved from a 256-way
> PATRICIA trie to a bitwise, non-level-compressed trie structure - what
> I call proof-updatable trees in the BIP. These have the advantage of
> allowing stateless application of one proof to another, and as
> consequence enable mining & mempool operations without access to the
> UTXO set, so long as proofs are initially provided in the transaction
> & block wire format.

I see the advantage of doing that, but this looks really far-fetched..
My understanding is that it would require a complete change in the
way clients and miners work. Could such a change be brought iteratively?





From mark at monetize.io  Wed Jan  8 01:04:58 2014
From: mark at monetize.io (Mark Friedenbach)
Date: Tue, 07 Jan 2014 17:04:58 -0800
Subject: [Bitcoin-development] BIP proposal: Authenticated prefix trees
In-Reply-To: <52CB9F5D.1040903@gmx.de>
References: <52B3A1C8.5000005@monetize.io>	<52C9A7EE.2050904@gmx.de>	<20140106181324.GB28880@petertodd.org>	<52CB4885.6090003@monetize.io>
	<52CB9F5D.1040903@gmx.de>
Message-ID: <52CCA43A.9080004@monetize.io>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On 01/06/2014 10:31 PM, Thomas Voegtlin wrote:
> You are right. The 256-way branching follows from the fact that the
> tree was implemented using a key-value database operating with byte
> strings (leveldb). With this implementation constraint, a different
> branching would probably be possible but wasteful.

Not really. Just use a suffix to determine the number of bits used in
the final key byte. For example, the string "abc" would have the key

    0x61626308 // "abc\x08"

Dropping the final bit would mean masking it off and having a
different terminating value:

    0x61626207 // "abb\x07"

That way you keep the lexical ordering of keys necessary for database
iteration, and the efficient binary encoding.

> I see the advantage of doing that, but this looks really
> far-fetched.. My understanding is that it would require a complete
> change in the way clients and miners work. Could such a change be
> brought iteratively?

It is an iterative change, I believe. You might be confusing this idea
with Peter Todd's TXO commitment proposal using MMR trees, which is a
drastic change with its own set of tradeoffs. Just to be clear, here's
what I'm proposing:

1) Restructure the current UTXO index to be a Merkle tree, basically
by splitting coins into individual outputs and adding interior nodes
to the leveldb database.

2) Add hash commitments of this structure to the coinbase.

It's still mapping txid's to unspent outputs, just as before - this
has nothing to do with the script keyed "wallet index." It's just now
nodes can prefix optional proofs to block or transaction messages
which prove by reference to the current best block's hash the spend
status of the inputs of a transaction, or all the inputs of all the
transactions of a block.

If the more expensive proof-updatable hashing is used, then these
proofs can even be composed or "rebased" onto a new block by applying
the contents of an "operational proof" representing the diff between
two blocks / the application of a series of transactions.

This means that a node which does not have access to the UTXO set can
nevertheless receive transactions or entire blocks with prefixed
proofs and check the validity of the transaction with just the
information available (proof + transaction contents).

All that is required after the above soft-fork is a protocol version
update and/or a service bit to indicate the ability to send or receive
proof-prefixed messages. I'd call that an incremental update.

[Aside: adding the wallet index requires storing the entire UTXO set
in duplicated form, indexed this time by scriptPubKey or
H(scriptPubKey), and including proofs of this structure as well. It is
unlikely that any soft-fork would occur forcing consensus over the
wallet index, but it could be done as a meta-chain or as an index
covering just the contents of the block.]
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.14 (GNU/Linux)
Comment: GPGTools - http://gpgtools.org
Comment: Using GnuPG with Thunderbird - http://www.enigmail.net/

iQIcBAEBAgAGBQJSzKQ2AAoJEAdzVfsmodw4hyoQAJ0f6P3ijZCEw7IPd/RcrmkI
Viv4j17ZyAAcbNUplvjzhr/tIIKYPg51ltvfkp8cGRHgez88QsljzvM8B5n+nbPa
jaaI6eiJ3AU1bR8hWYKtlXFwMvRjyr3ofl8hhTvYptGv9x3/Tr+2FwxIRY0413m6
2h95vItsvBs8v7clqLoBEqx9uyUpsH3+J32V4oGubrNAFXh1oOHi4Ban+TOKYaQV
GHZaIZ3bVAvcMd5riaWSPUPLHwJnxQ8w6SlVRy2UNUPe+9yTuy4n1GW4vk4WHvop
FgZFrM3LBmh1MhlYHRdEUUtwk3mfDuGbfW5UJVMri0Nis1PsXr5VK4qQaMbd/9e6
M2uWKslY9QCnzMajnHen9OwotteAJy2I1KHVcxXb0tFqrvqZ6o/auIe0G4VdKYuI
XfNF3mokX93tiSflmphDba6qgB/W+Y6UD2gG2AeFuMGhFF/Hy62pVC6Zx7PKZ3vL
Kh27rKkO/0FJau2JCQm5xBiQgCnKghqOiHefY3o+l+Y9kJ8fXKWCuwJ0lJ3LxZ2u
8H6sp6Jm9Ct9L90wSn7VmmI5H3bRe8sa7sylH4BR2T6jP3/tKDYTEeNWj+F9FfO1
FxsjYrjAyv1HxYYKd/Y1svEVSsKMv3a2SR9pF36ynBABdFjvx+oEuCyCO4tspFe6
15eA1QoMKvEQe/Ww5kRC
=L9WT
-----END PGP SIGNATURE-----



From jeremy at taplink.co  Wed Jan  8 06:34:46 2014
From: jeremy at taplink.co (Jeremy Spilman)
Date: Tue, 07 Jan 2014 22:34:46 -0800
Subject: [Bitcoin-development] Privacy and blockchain data
In-Reply-To: <20140106025312.GC2356@savin>
References: <20140106025312.GC2356@savin>
Message-ID: <op.w9cu78gsyldrnw@laptop-air.hsd1.ca.comcast.net>

>
> 2) Common prefixes: Generate addresses such that for a given wallet they
>    all share a fixed prefix. The length of that prefix determines the
>    anonymity set and associated privacy/bandwidth tradeoff, which
>    remainds a fixed ratio of all transactions for the life of the
>    wallet.
>

Interesting thought to make the privacy/bandwidth trade-off using  
vanitygen and prefix filters.

But doesn't this effectively expand the universe of potential spies from  
'the global attacker' who is watching your SPV queries, to simply 'the  
globe' -- anyone with a copy of the blockchain?

Some stats on UTXO set size:  (slightly stale -- as of block 270733)

    7.4m unspent outputs
    2.2m transactions with unspent outputs
    2.1m unique unspent scriptPubKeys
    Side note: the top 1,000 scriptPubKeys have 10% of all unspent outputs.

Let's say you use an 8-bit prefix (1/256) that would be ~10,000  
transactions in the UTXO you would be monitoring. But if I knew a few  
different days / time-periods you transacted, I could figure out your  
prefix.

Of course, anyone you transact with would know your prefix outright.

Wouldn't this also allow obvious identification of spend versus change  
addresses in a transaction?




From jeremy at taplink.co  Wed Jan  8 10:20:57 2014
From: jeremy at taplink.co (Jeremy Spilman)
Date: Wed, 08 Jan 2014 02:20:57 -0800
Subject: [Bitcoin-development] Stealth Addresses
In-Reply-To: <20140106120338.GA14918@savin>
References: <20140106120338.GA14918@savin>
Message-ID: <op.w9c5o7vgyldrnw@laptop-air.hsd1.ca.comcast.net>

Thanks Peter for the paper!

I'm just going to restate your 'simple explanation' to make sure I got  
it...

The payee publishes a public key of theirs, which will be a long-standing  
identifier, public key = 'Q', corresponding private key = 'd'.

To pay them, payee generate a keypair, private key = 'e' public key of  
'P'. Publish 'P' in the transaction.

The payer can calculate S = eQ, where S is a shared secret between  
payer/payee. The payee calculates the same S as S = dP. So the payee sees  
'P' in a transaction, and multiplies by their private key, to get S.

Now that we have the shared secret, either side can calculate an offset to  
Q which becomes the pay-to-address. When you say BIP32-style derivation,  
Q' = H(S) + Q, does this mean Q + SHA256(33-byte S)?

A payee has to check each transaction (or every transaction of a fixed  
prefix) with 'P', calculate Q' = Q + H(dP) and see if that transaction  
pays to Q'. If the address matches, then the payee can spend it with  
private key of d + H(dP).

One downside is that you have to hold your private key in memory  
unencrypted in order to identify new payments coming in. So  
stealth-addresses may not be suitable for receiving eCommerce payments,  
since you can't implement a corresponding watch-only wallet, e.g. there's  
no way to "direct-deposit into cold storage."

Hope I got that right...

On Mon, 06 Jan 2014 04:03:38 -0800, Peter Todd <pete at petertodd.org> wrote:

> Using Elliptic curve Diffie-Hellman (ECDH) we can generate a shared
> secret that the payee can use to recover their funds. Let the payee have
> keypair Q=dG. The payor generates nonce keypair P=eG and uses ECDH to
> arrive at shared secret c=H(eQ)=H(dP). This secret could be used to
> derive a ECC secret key, and from that a scriptPubKey, however that
> would allow both payor and payee the ability to spend the funds. So
> instead we use BIP32-style derivation to create Q'=(Q+c)G and associated
> scriptPubKey.
>
> As for the nonce keypair, that is included in the transaction in an
> additional zero-valued output:
>    RETURN <P>




From clem.ds at gmail.com  Wed Jan  8 19:38:14 2014
From: clem.ds at gmail.com (=?ISO-8859-1?Q?Cl=E9ment_Elbaz?=)
Date: Wed, 8 Jan 2014 20:38:14 +0100
Subject: [Bitcoin-development] Getting trusted metrics from the block chain
 in an untrusted environment ?
Message-ID: <CAP63atZBJqi6oN9EbPxzEo4qk5ZMgEKQ11NSPWmU65FypDdbzw@mail.gmail.com>

Hello all,

I'm designing a program that needs some metrics computed from the Bitcoin
block chain (some address balances, or the occurrence or not of a specific
transaction). The kind of infos you get from http://blockchain.info/,
provided you trust this website (my program do not).

My program should run on lightweight/embedded hardware. The execution
environment provides access to the Bitcoin network but not enough resources
to set up a trusted node along with my program. Also, my program trusts the
global Bitcoin network but no individual node.

I would need a way to ask an untrusted Bitcoin node to compute some 'metric
request' on my behalf and having the result of that metric request
validated by the network.

Is there any available or work-in-progress projects that would come close
to this need ? Or should I do it myself ? :-)

Thank you all,

Cl?ment Elbaz
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140108/2a00a136/attachment.html>

From clem.ds at gmail.com  Wed Jan  8 19:44:29 2014
From: clem.ds at gmail.com (=?ISO-8859-1?Q?Cl=E9ment_Elbaz?=)
Date: Wed, 8 Jan 2014 20:44:29 +0100
Subject: [Bitcoin-development] Getting trusted metrics from the block
 chain in an untrusted environment ?
In-Reply-To: <CAP63atZBJqi6oN9EbPxzEo4qk5ZMgEKQ11NSPWmU65FypDdbzw@mail.gmail.com>
References: <CAP63atZBJqi6oN9EbPxzEo4qk5ZMgEKQ11NSPWmU65FypDdbzw@mail.gmail.com>
Message-ID: <CAP63atZ=-Wd++nuL_Gf-wnT768w3wHhxsA+KgVY-S_C2+1QRLw@mail.gmail.com>

Some more thoughts :

If no such project exist yet, I thought it could work with an alternate,
small and fixed-length 'metric request block chain' of some sort.

It would temporarily stores structures defined as [metric request | current
block number when request was made | hash of the response] instead of
financial transactions.

These structures are verifiable so it could work the same way as a regular
financial blochchain.

It should not be part of the main Bitcoin protocol but could be a plugin
interacting with the data managed by the fullnode bitcoin software.

Also, metrics requests can be expensive to compute and validate, so it
would make sense to pay a fee everytime you ask one.

Does any of this makes any sense to you ?

Thanks,

Cl?ment
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140108/71676559/attachment.html>

From clem.ds at gmail.com  Wed Jan  8 22:29:15 2014
From: clem.ds at gmail.com (=?ISO-8859-1?Q?Cl=E9ment_Elbaz?=)
Date: Wed, 8 Jan 2014 23:29:15 +0100
Subject: [Bitcoin-development] Getting trusted metrics from the block
 chain in an untrusted environment ?
In-Reply-To: <CAP63atZ=-Wd++nuL_Gf-wnT768w3wHhxsA+KgVY-S_C2+1QRLw@mail.gmail.com>
References: <CAP63atZBJqi6oN9EbPxzEo4qk5ZMgEKQ11NSPWmU65FypDdbzw@mail.gmail.com>
	<CAP63atZ=-Wd++nuL_Gf-wnT768w3wHhxsA+KgVY-S_C2+1QRLw@mail.gmail.com>
Message-ID: <CAP63atasCa50ts4EWyh8j+ZL4CgCci-9r5WS5CEDqM51iu5E9w@mail.gmail.com>

Hello all,

It seems there was a problem with my first email (thank you Mark for the
heads up), so I'll copy paste it there :

-----------------------
Hello all,

I'm designing a program that needs some metrics computed from the Bitcoin
block chain (some address balances, or the occurrence or not of a specific
transaction). The kind of infos you get from http://blockchain.info/,
provided you trust this website (my program do not).

My program should run on lightweight/embedded hardware. The execution
environment provides access to the Bitcoin network but not enough resources
to set up a trusted node along with my program. Also, my program trusts the
global Bitcoin network but no individual node.

I would need a way to ask an untrusted Bitcoin node to compute some 'metric
request' on my behalf and having the result of that metric request
validated by the network.

Is there any available or work-in-progress projects that would come close
to this need ? Or should I do it myself ? :-)

Thank you all,

Cl?ment Elbaz

-----------------------


On Wed, Jan 8, 2014 at 8:44 PM, Cl?ment Elbaz <clem.ds at gmail.com> wrote:

> Some more thoughts :
>
> If no such project exist yet, I thought it could work with an alternate,
> small and fixed-length 'metric request block chain' of some sort.
>
> It would temporarily stores structures defined as [metric request |
> current block number when request was made | hash of the response] instead
> of financial transactions.
>
> These structures are verifiable so it could work the same way as a regular
> financial blochchain.
>
> It should not be part of the main Bitcoin protocol but could be a plugin
> interacting with the data managed by the fullnode bitcoin software.
>
> Also, metrics requests can be expensive to compute and validate, so it
> would make sense to pay a fee everytime you ask one.
>
> Does any of this makes any sense to you ?
>
> Thanks,
>
> Cl?ment
>



-- 
Cl?ment ELBAZ
06. 09. 55. 78. 41
clem.ds at gmail.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140108/6dc30995/attachment.html>

From rob.golding at astutium.com  Thu Jan  9 14:03:08 2014
From: rob.golding at astutium.com (Rob Golding)
Date: Thu, 9 Jan 2014 14:03:08 -0000
Subject: [Bitcoin-development] Getting trusted metrics from the block
	chain in an untrusted environment ?
In-Reply-To: <CAP63atZBJqi6oN9EbPxzEo4qk5ZMgEKQ11NSPWmU65FypDdbzw@mail.gmail.com>
References: <CAP63atZBJqi6oN9EbPxzEo4qk5ZMgEKQ11NSPWmU65FypDdbzw@mail.gmail.com>
Message-ID: <003e01cf0d43$86521550$92f63ff0$@golding@astutium.com>

> My program should run on lightweight/embedded hardware. The execution
> environment provides access to the Bitcoin network but not enough
> resources to set up a trusted node along with my program. 

So you want to 'benefit' from the network without contributing to it ?

> I would need a way to ask an untrusted Bitcoin node to compute some
> 'metric request' on my behalf and having the result of that metric
> request validated by the network.

Not going to happen - why would anyone be interested in providing you 'free
compute resources' ?

> Is there any available or work-in-progress projects that would come
> close to this need ? Or should I do it myself ? :-)

Setup a node, create an API interface and have your 'app' use your API on
yoru node :p

Rob




From jtimon at monetize.io  Thu Jan  9 17:19:04 2014
From: jtimon at monetize.io (=?ISO-8859-1?Q?Jorge_Tim=F3n?=)
Date: Thu, 9 Jan 2014 18:19:04 +0100
Subject: [Bitcoin-development] The insecurity of merge-mining
In-Reply-To: <20140106154456.GA18449@savin>
References: <CAMkFLsSwKEiEtV1OaAsGPiU8iAWbb77fDNJDmRwbgKnZ_kjG6Q@mail.gmail.com>
	<20131230232225.GA10594@tilt> <201312310114.05600.luke@dashjr.org>
	<20140101045342.GA7103@tilt>
	<CAC1+kJPTYzvU4ngFspvULDMvQK4ckkM719Y+_hx272PCU3amyg@mail.gmail.com>
	<20140103210139.GB30273@savin>
	<CAC1+kJNM=67Yw0Rde9y7H0v0x07MsWmh6oK++hDtsKEmLtqcNg@mail.gmail.com>
	<20140106154456.GA18449@savin>
Message-ID: <CAC1+kJPjj1N59PbAKyymwcF3DC6x4Ra+z8LKdzae4oUvmpERCA@mail.gmail.com>

On 1/6/14, Peter Todd <pete at petertodd.org> wrote:
> On Sat, Jan 04, 2014 at 01:27:42AM +0100, Jorge Tim?n wrote:
> It's not meant to prove anything - the proof-of-sacrificed-bitcoins
> mentioned(*) in it is secure only if Bitcoin itself is secure and
> functional. I referred you to it because understanding the system will
> help you understand my thinking behind merge-mining.
>
> *) It also mentions proof-of-sacrificed-zerocoins which *is* distinct
> because you're sacrificing the thing that the chain is about. Now that
> has some proof-of-stake tinges to it for sure - I myself am not
> convinced it is or isn't a viable scheme.

I'm not sure I understand all the differences between
proof-of-sacrificed-bitcoins and proof-of-sacrificed-newcoins, but I'm
still convinced this doesn't have anything to do with MM PoW vs PoW.
The idea looks very interesting and I will ask you and adam to
understand it better on IRC, but take into account that when you say
"merged mining is insecure" some people hear "merged mined altcoins
are less secure than non-MM altcoins" (which is false) and somehow
conclude "scrypt altchains are more secure than SHA256 altchains".
Whether we like it or not, many people believe that scrypt, quark or
primecoin PoW algorithms are somehow more secure than SHA256, and
claims that "merged mining is insecure" from core bitcoin developers
contribute to spread those beliefs and that no new altcoin has been
created with the intend of being merged mined for quite a while.
I'm not trying to make you or anyone here responsible for the mistakes
other people make.

But rephrasing your claims as "We're exploring new ideas for altchains
that could be more secure than MM..." sounds very different from "MM
is insecure, by the way look at this new idea..."

>> Feel free to ask for corrections in the example if you think it needs
>> them.
>> Feel free to bring your edge legal cases back, but please try to do it
>> on top of the example.
>
> You're argument is perfectly valid and correct, *if* the assumptions
> behind it hold. The problem is you're assuming miners act rationally and
> have equal opportunities - that's a very big assumption and I have
> strong doubts it holds, particularly for alts with a small amount of
> hashing power.

That's why I made the offer above.
What you point out is the reason why freicoin started without merged
mining, to grow its own independent security first, before starting to
be merged mined.

> You know, something that I haven't made clear in this discussion is that
> while I think merge-mining is insecure, in the sense of "should my new
> fancy alt-coin protocol widget use it?", I *also* don't think regular
> mining is much better. In some cases it will be worse due to social
> factors. (e.g. a bunch of big pools are going to merge-mine my scheme on
> launch day because it makes puppies cuter and kids smile)

Fair enough.
Do you see any case where an independently pow validated altcoin is
more secure than a merged mined one?
The reason why I participated in the discussion was that I believe
that merged mined PoW is more secure than
completely-independent-from-bitcoin pow.
And I thought that that was the general understanding in the Bitcoin
development community.

If that's the case, we agree on what's more important to me.

About the new proposal, I don't have a firm opinion yet. I'm sorry but
I have to understand it better and think about it in more depth.



From clem.ds at gmail.com  Thu Jan  9 17:46:05 2014
From: clem.ds at gmail.com (=?ISO-8859-1?Q?Cl=E9ment_Elbaz?=)
Date: Thu, 9 Jan 2014 18:46:05 +0100
Subject: [Bitcoin-development] Getting trusted metrics from the block
 chain in an untrusted environment ?
In-Reply-To: <CAP63atZ=-Wd++nuL_Gf-wnT768w3wHhxsA+KgVY-S_C2+1QRLw@mail.gmail.com>
References: <CAP63atZBJqi6oN9EbPxzEo4qk5ZMgEKQ11NSPWmU65FypDdbzw@mail.gmail.com>
	<CAP63atZ=-Wd++nuL_Gf-wnT768w3wHhxsA+KgVY-S_C2+1QRLw@mail.gmail.com>
Message-ID: <CAP63atYX1rKCNaDHr5WwAO_kORibCDaBcecWoanpRDR0WMw6aA@mail.gmail.com>

Hi Rob,

Thank you for answering.

> So you want to 'benefit' from the network without contributing to it ?

> Not going to happen - why would anyone be interested in providing you
'free compute resources' ?

Not free. As I stated in my second email ("some more thoughts" etc.), it
seems really fitting to pay a fee to the network for every metric request
you send. 'I want to execute this request on your blockchain, and I want
the response to be approved by the Bitcoin network, and here is a fee for
all the computing trouble".

You either have the blockchain and the hardware resources to compute things
based on it, or you have addresses that takes a few bytes of data in your
environement but contains money, potentially a lot. The situation seems
plausible to me.

The thing is, as soon as there is an exchange of value (hardware computing
resources vs bitcoins) between parties that do not trust each other, there
is a need for proof of work, and thus my idea (in my second email) of a
specifc block chain that would store metric requests, current block number
when they were asked, and hash of theirs responses. This can be validated
by others nodes and as such can be published in a ledger just like bitcoin
transaction.

> Setup a node, create an API interface and have your 'app' use your API on
yoru node :p

The idea would have been actually to be able to get these computations in a
trusted way without having access to a specific trusted node. Compensating
absence of trust by providing actual money.

Anyways. I got quite a few answer privately, and after study it seems SPV
mode of bitcoinj will be just fine for my specific needs. I would have
liked the solution to be network-centric ideally (By committing to an
SPV-ready API like bitcoinj, I'm committing to languages that provide a
stable SPV API), but I'll be just fine with bitcoinj for now.

Thank you Rob and everyone for your time.

Cl?ment





On Wed, Jan 8, 2014 at 8:44 PM, Cl?ment Elbaz <clem.ds at gmail.com> wrote:

> Some more thoughts :
>
> If no such project exist yet, I thought it could work with an alternate,
> small and fixed-length 'metric request block chain' of some sort.
>
> It would temporarily stores structures defined as [metric request |
> current block number when request was made | hash of the response] instead
> of financial transactions.
>
> These structures are verifiable so it could work the same way as a regular
> financial blochchain.
>
> It should not be part of the main Bitcoin protocol but could be a plugin
> interacting with the data managed by the fullnode bitcoin software.
>
> Also, metrics requests can be expensive to compute and validate, so it
> would make sense to pay a fee everytime you ask one.
>
> Does any of this makes any sense to you ?
>
> Thanks,
>
> Cl?ment
>



-- 
Cl?ment ELBAZ
06. 09. 55. 78. 41
clem.ds at gmail.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140109/e419fe72/attachment.html>

From pete at petertodd.org  Fri Jan 10 10:10:51 2014
From: pete at petertodd.org (Peter Todd)
Date: Fri, 10 Jan 2014 05:10:51 -0500
Subject: [Bitcoin-development] Privacy and blockchain data
In-Reply-To: <op.w9cu78gsyldrnw@laptop-air.hsd1.ca.comcast.net>
References: <20140106025312.GC2356@savin>
	<op.w9cu78gsyldrnw@laptop-air.hsd1.ca.comcast.net>
Message-ID: <20140110101051.GA25749@savin>

On Tue, Jan 07, 2014 at 10:34:46PM -0800, Jeremy Spilman wrote:
> >
> >2) Common prefixes: Generate addresses such that for a given wallet they
> >   all share a fixed prefix. The length of that prefix determines the
> >   anonymity set and associated privacy/bandwidth tradeoff, which
> >   remainds a fixed ratio of all transactions for the life of the
> >   wallet.
> >
> 
> Interesting thought to make the privacy/bandwidth trade-off using
> vanitygen and prefix filters.
> 
> But doesn't this effectively expand the universe of potential spies
> from 'the global attacker' who is watching your SPV queries, to
> simply 'the globe' -- anyone with a copy of the blockchain?

It's a trade-off. Most people are going to use public peers for their
SPV nodes - they're not going to run full nodes. They also are going to
want to limit how much bandwidth they use to sync their wallets; if they
don't care the can use a very short, or no, prefix and the problem goes
away.

If you make that bandwidth/privacy trade-off by using very specific
filters and non-specific addresses then you have a situation where those
public peers are learning a lot of potentially valuable data. It's easy
to imagine, say, the IRS being willing to pay for data on how many
Bitcoins people have in their wallets to try to catch tax cheats for
instance, and that can easily fund a lot of fast and high-quality peers
that don't advertise the fact that they're selling data on the contents
of your wallet.

On the other hand if you use non-specific filters, and prefixed
addresses for incoming payments, then you're not leaking high-quality
information to anyone. I think this makes for a more robust Bitcoin
system, especially as we need things like CoinJoin for privacy that make
*everyones* privacy matter to you; CoinJoin could easily be defeated by
aquiring lots of good info on the contents of wallets through SPV
queries.

> Some stats on UTXO set size:  (slightly stale -- as of block 270733)
> 
>    7.4m unspent outputs
>    2.2m transactions with unspent outputs
>    2.1m unique unspent scriptPubKeys
>    Side note: the top 1,000 scriptPubKeys have 10% of all unspent outputs.
> 
> Let's say you use an 8-bit prefix (1/256) that would be ~10,000
> transactions in the UTXO you would be monitoring. But if I knew a
> few different days / time-periods you transacted, I could figure out
> your prefix.

Actually UTXO isn't the right way to look at this; prefix filters would
be almost certainly matched against all txouts in blocks. Or put another
way, UTXO isn't the right way to look at it because the attacker will
have some rough idea of the time period, and wants to know about
transactions made.

> Of course, anyone you transact with would know your prefix outright.

Well what good, in your example, is it for the attacker to go from "I
know my target gets a paycheck every two weeks for $x" to "His wallet
prefix is abcd with y% probability"? Even once you learn the prefix of
your target's wallet, what funds they actually own is still embedded in
a much larger anonymity set of hundreds to thousands of transactions
that had nothing to do with them.

> Wouldn't this also allow obvious identification of spend versus
> change addresses in a transaction?

No, I specifically said that you don't want to use prefixes with change
txouts for that reason. Fortunately while the set of all scriptPubKey's
ever used for change txouts will grow over time, as long as you are not
watching for new payments on any key in that set you only need to query
for the ones that still have funds on them, and that's only because you
want to be able to detect unauthorized spends of them.

-- 
'peter'[:-1]@petertodd.org
00000000000000028a5c9edabc9697fe96405f667be1d6d558d1db21d49b8857
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 685 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140110/430ba5cd/attachment.sig>

From pete at petertodd.org  Fri Jan 10 10:20:37 2014
From: pete at petertodd.org (Peter Todd)
Date: Fri, 10 Jan 2014 05:20:37 -0500
Subject: [Bitcoin-development] Stealth Addresses
In-Reply-To: <op.w9c5o7vgyldrnw@laptop-air.hsd1.ca.comcast.net>
References: <20140106120338.GA14918@savin>
	<op.w9c5o7vgyldrnw@laptop-air.hsd1.ca.comcast.net>
Message-ID: <20140110102037.GB25749@savin>

On Wed, Jan 08, 2014 at 02:20:57AM -0800, Jeremy Spilman wrote:
> Thanks Peter for the paper!
> 
> I'm just going to restate your 'simple explanation' to make sure I
> got it...
> 
> The payee publishes a public key of theirs, which will be a
> long-standing identifier, public key = 'Q', corresponding private
> key = 'd'.
> 
> To pay them, payee generate a keypair, private key = 'e' public key
> of 'P'. Publish 'P' in the transaction.
> 
> The payer can calculate S = eQ, where S is a shared secret between
> payer/payee. The payee calculates the same S as S = dP. So the payee
> sees 'P' in a transaction, and multiplies by their private key, to
> get S.
> 
> Now that we have the shared secret, either side can calculate an
> offset to Q which becomes the pay-to-address. When you say
> BIP32-style derivation, Q' = H(S) + Q, does this mean Q +
> SHA256(33-byte S)?

I think that's correct, but my ECC math is a bit shakey... In any case,
what's important is that you can derive a pubkey such that only the
recipient has the privkey, and without knowledge of the shared secret
you can't determine what the recipients master pubkey was.

> A payee has to check each transaction (or every transaction of a
> fixed prefix) with 'P', calculate Q' = Q + H(dP) and see if that
> transaction pays to Q'. If the address matches, then the payee can
> spend it with private key of d + H(dP).

Yup, you're understanding matches mine. (no guarantee if my
understanding is correct!)

> One downside is that you have to hold your private key in memory
> unencrypted in order to identify new payments coming in. So
> stealth-addresses may not be suitable for receiving eCommerce
> payments, since you can't implement a corresponding watch-only
> wallet, e.g. there's no way to "direct-deposit into cold storage."

Oh, sorry, I forgot to mention it in my first write-up but you can
easily make stealth addresses include a second pubkey for the purpose of
the communication that either isn't used in the scriptPubKey at all, or
is part of a n-of-m multisig. (n>=2) Interestingly that also means you
can give a third-party that key and out-source the effort of scanning
the blockchain for you.

-- 
'peter'[:-1]@petertodd.org
00000000000000028a5c9edabc9697fe96405f667be1d6d558d1db21d49b8857
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 685 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140110/f85268c9/attachment.sig>

From pete at petertodd.org  Fri Jan 10 11:11:28 2014
From: pete at petertodd.org (Peter Todd)
Date: Fri, 10 Jan 2014 06:11:28 -0500
Subject: [Bitcoin-development] The insecurity of merge-mining
In-Reply-To: <CAC1+kJPjj1N59PbAKyymwcF3DC6x4Ra+z8LKdzae4oUvmpERCA@mail.gmail.com>
References: <CAMkFLsSwKEiEtV1OaAsGPiU8iAWbb77fDNJDmRwbgKnZ_kjG6Q@mail.gmail.com>
	<20131230232225.GA10594@tilt> <201312310114.05600.luke@dashjr.org>
	<20140101045342.GA7103@tilt>
	<CAC1+kJPTYzvU4ngFspvULDMvQK4ckkM719Y+_hx272PCU3amyg@mail.gmail.com>
	<20140103210139.GB30273@savin>
	<CAC1+kJNM=67Yw0Rde9y7H0v0x07MsWmh6oK++hDtsKEmLtqcNg@mail.gmail.com>
	<20140106154456.GA18449@savin>
	<CAC1+kJPjj1N59PbAKyymwcF3DC6x4Ra+z8LKdzae4oUvmpERCA@mail.gmail.com>
Message-ID: <20140110111128.GC25749@savin>

On Thu, Jan 09, 2014 at 06:19:04PM +0100, Jorge Tim?n wrote:
> On 1/6/14, Peter Todd <pete at petertodd.org> wrote:
> > On Sat, Jan 04, 2014 at 01:27:42AM +0100, Jorge Tim?n wrote:
> > It's not meant to prove anything - the proof-of-sacrificed-bitcoins
> > mentioned(*) in it is secure only if Bitcoin itself is secure and
> > functional. I referred you to it because understanding the system will
> > help you understand my thinking behind merge-mining.
> >
> > *) It also mentions proof-of-sacrificed-zerocoins which *is* distinct
> > because you're sacrificing the thing that the chain is about. Now that
> > has some proof-of-stake tinges to it for sure - I myself am not
> > convinced it is or isn't a viable scheme.
> 
> I'm not sure I understand all the differences between
> proof-of-sacrificed-bitcoins and proof-of-sacrificed-newcoins, but I'm
> still convinced this doesn't have anything to do with MM PoW vs PoW.

Proof-of-sacrified-bitcoins is always a true sacrifice - provided
Bitcoin itself maintains consensus the proof is a guarantee that
something of value was given up.

Proof-of-sacrificed-"newcoins" means that within some consensus system I
created a signed statement that *within the system* means I lose
something of value. However that sacrifice is only valid if the
consensus of the system includes that sacrifice within the consensus,
and if the mechanism by which that consensus is maintained has anything
to do with those sacrifices you quickly find yourself on pretty shakey
ground.

> > You know, something that I haven't made clear in this discussion is that
> > while I think merge-mining is insecure, in the sense of "should my new
> > fancy alt-coin protocol widget use it?", I *also* don't think regular
> > mining is much better. In some cases it will be worse due to social
> > factors. (e.g. a bunch of big pools are going to merge-mine my scheme on
> > launch day because it makes puppies cuter and kids smile)
> 
> Fair enough.
> Do you see any case where an independently pow validated altcoin is
> more secure than a merged mined one?

Situations where decentralized consensus systems are competing for
market share in some domain certainely apply. For instance if I were to
create a competitor to Namecoin, perhaps because I thought the existing
allocation of names was unfair, and/or I had technical improvements like
SPV, it's easy to imagine Namecoin miners deciding to attack my
competitor to preserve the value of their namecoins and domain names
registered in Namecoin.

The problem here is that my new system has a substantial *negative*
value to those existing Namecoin holders - if it catches on the value of
their Namecoin investment in the form of coins and domain names may go
down. Thus for them doing nothing has a negative return, attacking my
coin has a positive return minus costs, and with merge-mining the costs
are zero.

Without merge mining if the value to the participants in the new system
is greater than the harm done to the participants in the old system the
total work on the new system's chain will still be positive and it has a
chance of surviving.

Of course, this is what Luke-Jr was getting at when he was talking about
scam-coins and merge mining: if you're alt-currency is a currency, and
it catches on, then it dilutes the value of your existing coins and
people who own those coins have an incentive to attack the competitor.
That's why merge-mined alt-coins that are currencies get often get
attacked very quickly.

-- 
'peter'[:-1]@petertodd.org
00000000000000028a5c9edabc9697fe96405f667be1d6d558d1db21d49b8857
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 685 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140110/4706d6f0/attachment.sig>

From pete at petertodd.org  Fri Jan 10 11:25:42 2014
From: pete at petertodd.org (Peter Todd)
Date: Fri, 10 Jan 2014 06:25:42 -0500
Subject: [Bitcoin-development] The insecurity of merge-mining
In-Reply-To: <20140110111128.GC25749@savin>
References: <CAMkFLsSwKEiEtV1OaAsGPiU8iAWbb77fDNJDmRwbgKnZ_kjG6Q@mail.gmail.com>
	<20131230232225.GA10594@tilt> <201312310114.05600.luke@dashjr.org>
	<20140101045342.GA7103@tilt>
	<CAC1+kJPTYzvU4ngFspvULDMvQK4ckkM719Y+_hx272PCU3amyg@mail.gmail.com>
	<20140103210139.GB30273@savin>
	<CAC1+kJNM=67Yw0Rde9y7H0v0x07MsWmh6oK++hDtsKEmLtqcNg@mail.gmail.com>
	<20140106154456.GA18449@savin>
	<CAC1+kJPjj1N59PbAKyymwcF3DC6x4Ra+z8LKdzae4oUvmpERCA@mail.gmail.com>
	<20140110111128.GC25749@savin>
Message-ID: <20140110112542.GA19426@savin>

On Fri, Jan 10, 2014 at 06:11:28AM -0500, Peter Todd wrote:
> > Fair enough.
> > Do you see any case where an independently pow validated altcoin is
> > more secure than a merged mined one?
> 
> Situations where decentralized consensus systems are competing for
> market share in some domain certainely apply. For instance if I were to
> create a competitor to Namecoin, perhaps because I thought the existing
> allocation of names was unfair, and/or I had technical improvements like
> SPV, it's easy to imagine Namecoin miners deciding to attack my
> competitor to preserve the value of their namecoins and domain names
> registered in Namecoin.

Come to think of it, we've got that exact situation right now: the new
Twister P2P Microblogging thing has a blockchain for registering
usernames that could have been easily done with Namecoin, thus in theory
Namecoin owners have an incentive to make sure the Twister blockchain
gets killed at birth.

Pretty easy to do right now too as the hashing power behind Twister is
miniscule and probably will stay that way - the only incentive to mining
is that you get the right to make a "promoted post" - called a spam
message in the codebase - that in theory Twister clients are supposed to
show to their users. Of course, there's absolutely no way to guarantee
that clients actually do that.

-- 
'peter'[:-1]@petertodd.org
00000000000000028a5c9edabc9697fe96405f667be1d6d558d1db21d49b8857
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 685 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140110/396141e6/attachment.sig>

From drak at zikula.org  Fri Jan 10 11:28:33 2014
From: drak at zikula.org (Drak)
Date: Fri, 10 Jan 2014 11:28:33 +0000
Subject: [Bitcoin-development] Stealth Addresses
In-Reply-To: <20140110102037.GB25749@savin>
References: <20140106120338.GA14918@savin>
	<op.w9c5o7vgyldrnw@laptop-air.hsd1.ca.comcast.net>
	<20140110102037.GB25749@savin>
Message-ID: <CANAnSg1TDFrEugAp_srg=kMHLJ9KUTrT1NKmQhfH0cNRPiscbw@mail.gmail.com>

On 10 January 2014 10:20, Peter Todd <pete at petertodd.org> wrote:

> Oh, sorry, I forgot to mention it in my first write-up but you can
> easily make stealth addresses include a second pubkey for the purpose of
> the communication that either isn't used in the scriptPubKey at all, or
> is part of a n-of-m multisig. (n>=2) Interestingly that also means you
> can give a third-party that key and out-source the effort of scanning
> the blockchain for you.


That seems pretty exciting to me. What is the chance of this becoming a BIP?

Drak
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140110/24259da9/attachment.html>

From pete at petertodd.org  Fri Jan 10 12:00:47 2014
From: pete at petertodd.org (Peter Todd)
Date: Fri, 10 Jan 2014 07:00:47 -0500
Subject: [Bitcoin-development] Stealth Addresses
In-Reply-To: <CANAnSg1TDFrEugAp_srg=kMHLJ9KUTrT1NKmQhfH0cNRPiscbw@mail.gmail.com>
References: <20140106120338.GA14918@savin>
	<op.w9c5o7vgyldrnw@laptop-air.hsd1.ca.comcast.net>
	<20140110102037.GB25749@savin>
	<CANAnSg1TDFrEugAp_srg=kMHLJ9KUTrT1NKmQhfH0cNRPiscbw@mail.gmail.com>
Message-ID: <20140110120047.GB19426@savin>

On Fri, Jan 10, 2014 at 11:28:33AM +0000, Drak wrote:
> On 10 January 2014 10:20, Peter Todd <pete at petertodd.org> wrote:
> 
> > Oh, sorry, I forgot to mention it in my first write-up but you can
> > easily make stealth addresses include a second pubkey for the purpose of
> > the communication that either isn't used in the scriptPubKey at all, or
> > is part of a n-of-m multisig. (n>=2) Interestingly that also means you
> > can give a third-party that key and out-source the effort of scanning
> > the blockchain for you.
> 
> 
> That seems pretty exciting to me. What is the chance of this becoming a BIP?

Needs a prototype implementation first. The version with no prefix is
the simple one and doesn't have any other dependencies; the prefix
version is harder because it isn't clear yet what's the best way to
force the prefix, or for that matter whether scriptPubKey or
H(scriptPubKey) indexes will be available.

It's on my todo list, but as you've probably noticed my todo list is
rather long. :)

-- 
'peter'[:-1]@petertodd.org
00000000000000028a5c9edabc9697fe96405f667be1d6d558d1db21d49b8857
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 685 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140110/a7ae8027/attachment.sig>

From jtimon at monetize.io  Fri Jan 10 12:29:03 2014
From: jtimon at monetize.io (=?ISO-8859-1?Q?Jorge_Tim=F3n?=)
Date: Fri, 10 Jan 2014 13:29:03 +0100
Subject: [Bitcoin-development] The insecurity of merge-mining
In-Reply-To: <20140110111128.GC25749@savin>
References: <CAMkFLsSwKEiEtV1OaAsGPiU8iAWbb77fDNJDmRwbgKnZ_kjG6Q@mail.gmail.com>
	<20131230232225.GA10594@tilt> <201312310114.05600.luke@dashjr.org>
	<20140101045342.GA7103@tilt>
	<CAC1+kJPTYzvU4ngFspvULDMvQK4ckkM719Y+_hx272PCU3amyg@mail.gmail.com>
	<20140103210139.GB30273@savin>
	<CAC1+kJNM=67Yw0Rde9y7H0v0x07MsWmh6oK++hDtsKEmLtqcNg@mail.gmail.com>
	<20140106154456.GA18449@savin>
	<CAC1+kJPjj1N59PbAKyymwcF3DC6x4Ra+z8LKdzae4oUvmpERCA@mail.gmail.com>
	<20140110111128.GC25749@savin>
Message-ID: <CAC1+kJP0ehkSmrmJ-HSioF=W-hGjF2tXfWE9pOUYFcQpZiQ4cg@mail.gmail.com>

On 1/10/14, Peter Todd <pete at petertodd.org> wrote:
>> Fair enough.
>> Do you see any case where an independently pow validated altcoin is
>> more secure than a merged mined one?
>
> Situations where decentralized consensus systems are competing for
> market share in some domain certainely apply. For instance if I were to
> create a competitor to Namecoin, perhaps because I thought the existing
> allocation of names was unfair, and/or I had technical improvements like
> SPV, it's easy to imagine Namecoin miners deciding to attack my
> competitor to preserve the value of their namecoins and domain names
> registered in Namecoin.

Namecoin, Devcoin and Ixcoin are also currencies and therefore compete
with Bitcoin.
How is that even Ixcoin (clearly a scamcoin that indirectly damages
the image of Bitcoin) has survived?

My explanation is that miners aren't necessarily holders. It's certain
that there's holders who don't mind and "can't do anything about it".
In fact, I think many miners sell their mined coins for fiat to cover
their investment and costs. The profit margin is reduced as the mining
market becomes more competitive, so even for miners it will get very
expensive and risky to do stupid things.
Talking about stupid things, I don't see many bitcoiners throwing
rocks at local currency users or barter clubs nor burning down banks
to "protect their investment". Barter is just another competitor in
the media of exchange market.

> The problem here is that my new system has a substantial *negative*
> value to those existing Namecoin holders - if it catches on the value of
> their Namecoin investment in the form of coins and domain names may go
> down. Thus for them doing nothing has a negative return, attacking my
> coin has a positive return minus costs, and with merge-mining the costs
> are zero.

What percentage of Bitcoin/Namecoin miners do you think own namecoins?
How much can they afford to lose to attack competition?

> Without merge mining if the value to the participants in the new system
> is greater than the harm done to the participants in the old system the
> total work on the new system's chain will still be positive and it has a
> chance of surviving.

No, the "harm to the old system participants" is distributed among all
the participants, not only miners (assuming miners have any
speculative position at all).
I'm not denying that people do crazy and stupid things, but let's at
least allow the "anti-competition attacker" be equally crazy in both
cases.
Miners attacking "competition" for one or more of the chains they mine
are acting irrationally in both cases.
You're trying to rationalize the actions of the MM attackers, but
they're just being stupid, since if they weren't, they would just try
to maximize profits.

> Of course, this is what Luke-Jr was getting at when he was talking about
> scam-coins and merge mining: if you're alt-currency is a currency, and
> it catches on, then it dilutes the value of your existing coins and
> people who own those coins have an incentive to attack the competitor.
> That's why merge-mined alt-coins that are currencies get often get
> attacked very quickly.

I have many other explanations for the few currencies that died with
MM (can you remember any name?). At the beginning all altcoins were
much smaller and easier to attack, all of them. Bitcoin mining pools
didn't wanted to update to merged mining and didn't acted very
rationally about it.
Namecoin went through a really delicate situation just before
hardforking to MM, but now is by far the most secure altcoin of them
all, all thanks to MM.
All rational bitcoin miners should also mine namecoin. Period. All
those who consider it competition with their current Bitcoin
speculative position, should just "attack in the market" by selling
the namecoins as soon as they get them.
Providing security for a chain DOES NOT give it an utility or rise its demand.
Operation COSTS DO NOT CAUSE VALUE.

About Luke-Jr's thinking, I don't think it's along those lines.

If you create a new chain for the long term, you should try to
maximize its security and that currently means you should merged mine
with bitcoin.
The main rational reason to never do merged mining is to prevent
competitive and rational miners from crashing the price of your
currency, which is everything a scamcoiner cares about, the price and
market cap.

Of course Luke-Jr can correct me if that's not how he thinks.



From jtimon at monetize.io  Fri Jan 10 12:37:26 2014
From: jtimon at monetize.io (=?ISO-8859-1?Q?Jorge_Tim=F3n?=)
Date: Fri, 10 Jan 2014 13:37:26 +0100
Subject: [Bitcoin-development] The insecurity of merge-mining
In-Reply-To: <20140110112542.GA19426@savin>
References: <CAMkFLsSwKEiEtV1OaAsGPiU8iAWbb77fDNJDmRwbgKnZ_kjG6Q@mail.gmail.com>
	<20131230232225.GA10594@tilt> <201312310114.05600.luke@dashjr.org>
	<20140101045342.GA7103@tilt>
	<CAC1+kJPTYzvU4ngFspvULDMvQK4ckkM719Y+_hx272PCU3amyg@mail.gmail.com>
	<20140103210139.GB30273@savin>
	<CAC1+kJNM=67Yw0Rde9y7H0v0x07MsWmh6oK++hDtsKEmLtqcNg@mail.gmail.com>
	<20140106154456.GA18449@savin>
	<CAC1+kJPjj1N59PbAKyymwcF3DC6x4Ra+z8LKdzae4oUvmpERCA@mail.gmail.com>
	<20140110111128.GC25749@savin> <20140110112542.GA19426@savin>
Message-ID: <CAC1+kJNNa0cmTVS0zZP+xfKGJ09f3WAvm7wEFFa_MMSYMRDNtA@mail.gmail.com>

On 1/10/14, Peter Todd <pete at petertodd.org> wrote:
> Come to think of it, we've got that exact situation right now: the new
> Twister P2P Microblogging thing has a blockchain for registering
> usernames that could have been easily done with Namecoin, thus in theory
> Namecoin owners have an incentive to make sure the Twister blockchain
> gets killed at birth.

You don't have to MM from birth. That I've already agreed is
dangerous. But if you start with SHA256, then merged mining is a
trivial fork at least 3 currencies have done successfully.
As said we plan to make Freicoin merge-mineable in the future, and we
expect to get much more security after we do.
The only "adverse" effect may be a temporary drop in price due to the
new miners selling all the frc they get until a new price equilibrates
with the demand. But that's not really "bad for the currency", just to
the holders at that moment.

> Pretty easy to do right now too as the hashing power behind Twister is
> miniscule and probably will stay that way - the only incentive to mining
> is that you get the right to make a "promoted post" - called a spam
> message in the codebase - that in theory Twister clients are supposed to
> show to their users. Of course, there's absolutely no way to guarantee
> that clients actually do that.

If a system doesn't compensate its miners in a liquid enough way, the
system will probably be insecure, but that's another topic...



From pete at petertodd.org  Fri Jan 10 17:22:06 2014
From: pete at petertodd.org (Peter Todd)
Date: Fri, 10 Jan 2014 12:22:06 -0500
Subject: [Bitcoin-development] The insecurity of merge-mining
In-Reply-To: <CAC1+kJP0ehkSmrmJ-HSioF=W-hGjF2tXfWE9pOUYFcQpZiQ4cg@mail.gmail.com>
References: <20131230232225.GA10594@tilt> <201312310114.05600.luke@dashjr.org>
	<20140101045342.GA7103@tilt>
	<CAC1+kJPTYzvU4ngFspvULDMvQK4ckkM719Y+_hx272PCU3amyg@mail.gmail.com>
	<20140103210139.GB30273@savin>
	<CAC1+kJNM=67Yw0Rde9y7H0v0x07MsWmh6oK++hDtsKEmLtqcNg@mail.gmail.com>
	<20140106154456.GA18449@savin>
	<CAC1+kJPjj1N59PbAKyymwcF3DC6x4Ra+z8LKdzae4oUvmpERCA@mail.gmail.com>
	<20140110111128.GC25749@savin>
	<CAC1+kJP0ehkSmrmJ-HSioF=W-hGjF2tXfWE9pOUYFcQpZiQ4cg@mail.gmail.com>
Message-ID: <20140110172205.GA11740@petertodd.org>

On Fri, Jan 10, 2014 at 01:29:03PM +0100, Jorge Tim?n wrote:
> On 1/10/14, Peter Todd <pete at petertodd.org> wrote:
> > Situations where decentralized consensus systems are competing for
> > market share in some domain certainely apply. For instance if I were to
> > create a competitor to Namecoin, perhaps because I thought the existing
> > allocation of names was unfair, and/or I had technical improvements like
> > SPV, it's easy to imagine Namecoin miners deciding to attack my
> > competitor to preserve the value of their namecoins and domain names
> > registered in Namecoin.
> 
> Namecoin, Devcoin and Ixcoin are also currencies and therefore compete
> with Bitcoin.
> How is that even Ixcoin (clearly a scamcoin that indirectly damages
> the image of Bitcoin) has survived?

Because there aren't that many pools out there and Ixcoin (and devcoin)
appear to have been lucky enough to servive long enough to get the
support of a reasonably big one. Once you do that, the potential
attackers have PR to think about. (namecoin especially has a PR
advantage) None of this stuff is hard and fast rules after all.

> Talking about stupid things, I don't see many bitcoiners throwing
> rocks at local currency users or barter clubs nor burning down banks
> to "protect their investment". Barter is just another competitor in
> the media of exchange market.

Those are all examples where the cost to the "bitcoiner defending their
currency" is high - I might get arrested trying to burn down a bank.


Anyway, I'm starting to think you're reading too much into my statement
"merge mining is insecure", which, keep in mind, I said in relation to a
guy who was trying to recruit devs to implement some unknown "altcoin"
thing.

Imagine you're one of the first US cave divers back in the early 70's.
You've been doing it for only a few years yourself, and you and your
buddies, some of them now late, realized pretty quick it's bloody
dangerous and there's all kinds of ways to get yourself killed. (caving
itself is bad enough) On the other hand, if you're careful and have good
training it *is* possible to reduce the risks significantly. Meanwhile
the media and public in general is starting to pick up on caving and
cave diving and there's a tonne of new people - most of whome don't seem
to know what they're doing - are getting into both sports. You just know
this is going to lead to a lot of people getting hurt and killed who
probably should have just stuck to caving. (IE, stuck to making
Bitcoin-using applications)

In that context I sure as heck would loudly yell "CAVE DIVING IS FUCKING
DANGEROUS, DON'T DO IT". Sure, that's not quite telling the whole story,
but the message is pretty close to the truth. The people that should be
in the sport are the ones that take a statement like that as a warning
to do their research; I have no reason to think the OP asking for
developers was one of those people.

> > Without merge mining if the value to the participants in the new system
> > is greater than the harm done to the participants in the old system the
> > total work on the new system's chain will still be positive and it has a
> > chance of surviving.
> 
> No, the "harm to the old system participants" is distributed among all
> the participants, not only miners (assuming miners have any
> speculative position at all).
> I'm not denying that people do crazy and stupid things, but let's at
> least allow the "anti-competition attacker" be equally crazy in both
> cases.

Distributing harm among n people just reduces the harm for each person
by a factor of n. That may or may not make that harm smaller than
whatever tiny reward mining the chain would be.

> I have many other explanations for the few currencies that died with
> MM (can you remember any name?). At the beginning all altcoins were
> much smaller and easier to attack, all of them. Bitcoin mining pools
> didn't wanted to update to merged mining and didn't acted very
> rationally about it.
> Namecoin went through a really delicate situation just before
> hardforking to MM, but now is by far the most secure altcoin of them
> all, all thanks to MM.
> All rational bitcoin miners should also mine namecoin. Period. All

You assume doing so has zero cost - it doesn't. Running namecoind
involves effort and bandwidth on my part.

> those who consider it competition with their current Bitcoin
> speculative position, should just "attack in the market" by selling
> the namecoins as soon as they get them.
> Providing security for a chain DOES NOT give it an utility or rise its demand.
> Operation COSTS DO NOT CAUSE VALUE.

Lets rephrase that "A secure chain is no more useful than a less secure
chain. A secure chain will not be more valuable than a less secure
chain, all other things being equal."

I don't think we're going to see eye to eye on this.

-- 
'peter'[:-1]@petertodd.org
000000000000000028e2c0ade6ce50b5ce4d95037e5e2dcd500b4bb52adbe73c
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 490 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140110/03dff192/attachment.sig>

From jtimon at monetize.io  Fri Jan 10 18:50:36 2014
From: jtimon at monetize.io (=?ISO-8859-1?Q?Jorge_Tim=F3n?=)
Date: Fri, 10 Jan 2014 19:50:36 +0100
Subject: [Bitcoin-development] The insecurity of merge-mining
In-Reply-To: <20140110172205.GA11740@petertodd.org>
References: <20131230232225.GA10594@tilt> <201312310114.05600.luke@dashjr.org>
	<20140101045342.GA7103@tilt>
	<CAC1+kJPTYzvU4ngFspvULDMvQK4ckkM719Y+_hx272PCU3amyg@mail.gmail.com>
	<20140103210139.GB30273@savin>
	<CAC1+kJNM=67Yw0Rde9y7H0v0x07MsWmh6oK++hDtsKEmLtqcNg@mail.gmail.com>
	<20140106154456.GA18449@savin>
	<CAC1+kJPjj1N59PbAKyymwcF3DC6x4Ra+z8LKdzae4oUvmpERCA@mail.gmail.com>
	<20140110111128.GC25749@savin>
	<CAC1+kJP0ehkSmrmJ-HSioF=W-hGjF2tXfWE9pOUYFcQpZiQ4cg@mail.gmail.com>
	<20140110172205.GA11740@petertodd.org>
Message-ID: <CAC1+kJPN=hWnrsTgJ2C+8vtm9BjGHSj5gt2FaAj_TBBo6iP40w@mail.gmail.com>

On 1/10/14, Peter Todd <pete at petertodd.org> wrote:
> Because there aren't that many pools out there and Ixcoin (and devcoin)
> appear to have been lucky enough to servive long enough to get the
> support of a reasonably big one. Once you do that, the potential
> attackers have PR to think about. (namecoin especially has a PR
> advantage) None of this stuff is hard and fast rules after all.

But shouldn't your reasoning apply here so that ixcoin would be
destroyed by those who aren't even mining it. Because of the
"supposedly obvious" harm it does to Bitcoin through competition?

> Anyway, I'm starting to think you're reading too much into my statement
> "merge mining is insecure", which, keep in mind, I said in relation to a
> guy who was trying to recruit devs to implement some unknown "altcoin"
> thing.

That's precisely my worry. Most of those guys planning to implement
random altcoins will conclude after reading you that what they need is
not merged mining but yet another independent scrypt coin, or worse,
yet another stupid PoW algorithm.

> In that context I sure as heck would loudly yell "CAVE DIVING IS FUCKING
> DANGEROUS, DON'T DO IT". Sure, that's not quite telling the whole story,
> but the message is pretty close to the truth. The people that should be
> in the sport are the ones that take a statement like that as a warning
> to do their research; I have no reason to think the OP asking for
> developers was one of those people.

I'm approached many times with questions like "How much would it cost
to create a new altcoin?" (Thanks, BlueMatt for creating coingen!!).
I try to explain them that there's more currencies beyond p2p
currencies and they probably don't need that. I talk them about local
currencies, colored coins or open transactions as solution that
probably fit their needs much better without the need to bootstrap and
antire economy with a network of computer that consumes plenty of
resources.

If none of that fits them (say, for crazy experiments like datacoin or
gridcoin), I recommend them merged mining because is more secure for
them, more secure for bitcoin, and better for the environment and
everyone in general.

Still, for some reason a new non merged mined chain is the most popular choice.
Less efficient, less secure, more popular.
Why?
I wonder if devs warning against merged mining or making stupid
predictions like "bitcoin's PoW algorithm won't survive the year" have
anything to do with that...

>> > Without merge mining if the value to the participants in the new system
>> > is greater than the harm done to the participants in the old system the
>> > total work on the new system's chain will still be positive and it has
>> > a
>> > chance of surviving.
>>
>> No, the "harm to the old system participants" is distributed among all
>> the participants, not only miners (assuming miners have any
>> speculative position at all).
>> I'm not denying that people do crazy and stupid things, but let's at
>> least allow the "anti-competition attacker" be equally crazy in both
>> cases.
>
> Distributing harm among n people just reduces the harm for each person
> by a factor of n. That may or may not make that harm smaller than
> whatever tiny reward mining the chain would be.

The harm TO THE MINERS alone (again, assuming they have any position
at all in the coins they're mining) is less than the "total harm" to
the competing system, assuming that's quantifiable at all.
Miners won't think about the "total harm", but only about their share
of harm vs their share of just mining the competing system alongside
with the old one.

>> I have many other explanations for the few currencies that died with
>> MM (can you remember any name?). At the beginning all altcoins were
>> much smaller and easier to attack, all of them. Bitcoin mining pools
>> didn't wanted to update to merged mining and didn't acted very
>> rationally about it.
>> Namecoin went through a really delicate situation just before
>> hardforking to MM, but now is by far the most secure altcoin of them
>> all, all thanks to MM.
>> All rational bitcoin miners should also mine namecoin. Period. All
>
> You assume doing so has zero cost - it doesn't. Running namecoind
> involves effort and bandwidth on my part.

Yeah, true, they will only mine if all those costs are lower than the
reward. Only the hashing is "for free".
I'm assuming that those costs are very small compared to the reward,
that is, that most of the reward pays for hashing and not validation.

>> those who consider it competition with their current Bitcoin
>> speculative position, should just "attack in the market" by selling
>> the namecoins as soon as they get them.
>> Providing security for a chain DOES NOT give it an utility or rise its
>> demand.
>> Operation COSTS DO NOT CAUSE VALUE.
>
> Lets rephrase that "A secure chain is no more useful than a less secure
> chain. A secure chain will not be more valuable than a less secure
> chain, all other things being equal."

Not exactly, a less secure chain can become completely useless due to
the lack of security.
What I'm saying is that a useless chain is still useless no matter the security.

> I don't think we're going to see eye to eye on this.

It is possible.
At least now we know each other position in MM.
I'm not sure if the silence means that only Maaku and Luke-Jr agree
with me on merged mining, that it is you who are more alone than me on
this one, or if it's just that not many people had taken the time to
think about this...



From jeremy at taplink.co  Sun Jan 12 10:33:02 2014
From: jeremy at taplink.co (Jeremy Spilman)
Date: Sun, 12 Jan 2014 02:33:02 -0800
Subject: [Bitcoin-development] Stealth Addresses
In-Reply-To: <20140110102037.GB25749@savin>
References: <20140106120338.GA14918@savin>
	<op.w9c5o7vgyldrnw@laptop-air.hsd1.ca.comcast.net>
	<20140110102037.GB25749@savin>
Message-ID: <op.w9kkxcityldrnw@laptop-air.hsd1.ca.comcast.net>

> Oh, sorry, I forgot to mention it in my first write-up but you can
> easily make stealth addresses include a second pubkey for the purpose of
> the communication that either isn't used in the scriptPubKey at all, or
> is part of a n-of-m multisig. (n>=2) Interestingly that also means you
> can give a third-party that key and out-source the effort of scanning
> the blockchain for you.

Great point. Even if it's not a 3rd party, I think it's really important  
to be able to scan for transactions with a key which can't actually spend  
the funds.

The first approach is just one-pass ECDH. I think you're saying the second  
approach is two rounds of ECDH but re-using the same e/P (usually referred  
to as r/R in ECIES). I think this is safe, unlike reusing an ephemeral key  
for signing operations.

   Payee: Publish Q, Q2                     [d, d2 are privkeys, Q, Q2 are  
pubkeys]
   Payer: 1) Generate ephemeral key: e / P  [e is privkey, P is pubkey]
          2) S = e * Q                      [first shared secret]
          3) S2 = e * Q2                    [second shared secret, reusing  
'e']
          4) Q' = Q + H(S)                  [pay-to stealth address]
          5) Q2' = Q2 + H(S2)               [stealth 'marker']

   Watch: 1) Look for TxOut with OP_RETURN <P>
          2) Q2' = Q2 + H(d2 * P)
          3) Check for Q2' elsewhere in the Tx

S/MIME for example, allows reuse of the ephemeral keypair. When reusing an  
ephemeral keypair where A reuses (x, X) to encrypt different messages to  
more than one user, A should verify the static public keys to prevent  
small-subgroup attacks.[1][2]

Let's say you pay-to Q' and then Q2' value has to be somewhere else in the  
transaction. You could put it next to the shared P in OP_RETURN. OP_RETURN  
<P> <Q2'> would be 66 bytes.

But then Mallory could generate transactions with the right Q2' but with  
his own pubkey in Step 2 instead of Q. So your scanner would detect a  
payment, but you wouldn't be able to spend it, and Mallory could.

That's a good argument for putting Q2' in a 2-of-2 multisig so that  
pulling this trick would at least make the transaction unspendable for  
both parties, which may be good enough deterrent, but you're still going  
to want to check it against your 'd' before fulfilling a large order. Your  
online watch process could queue the matching transactions, which you  
could move to your offline machine, decrypt your key, and verify the  
transactions are spendable.

Now, you would need to get two pubkeys to the payer, throw in a prefix to  
help standardize it, and end up with addresses that could look like (for  
example):

xSTLxsn59oaupR6ZKt2yddQ4dp5hcFinnTWkvsDiXtHgAEDg5ajNVzTY8MMQsmqnEn3ZMKxQzrfC3pDimfTWMkiUb7x3jX3J26JSX
tSTLcpwzupCFL3maVZkSiB9ib3BXsCAfkhMLgckQEyoj8Tk83ANzofeuDdbX6bSPqNRfACLLFYK8EwVo1jdjxNDFNDWxhnQiAy4ba

Those addresses are 74 bytes:  
<Prefix><CompressedPubKey1><CompressedPubKey2><Checksum>

   xSTL Prefix = 0xC0CB9270
   tSTL Prefix = 0xB2E27D50
   NOTE: I do NOT have the corresponding privkeys for these four pubkeys!

Those just happened to be the first matching prefixes I found for 74 byte  
addresses. I could try to find ones which start with a specific byte if  
that's somehow better, like 0x04 to match BIP32.

Unfortunately, I don't think you can just derive a second public key from  
the first to keep the address shorter, and still keep the first private  
key secure, even if the second private key is stolen. You only get  
equivalent security as BIP32 public derivation, where you can't lose a  
child private key.

Do we also want xSTL (or whatever user friendly string) prefixes for  
single pubkey (41 byte) stealth addresses?

I'll wait a couple days for feedback, then I'll try to implement the  
following prototypes:

1) Pay to STL addresses
2) Watcher process to detect and queue STL payments for a given d2/Q2
3) Offline verifier to take output from Watcher and verify spendable given  
encrypted d/d2

Obviously extending QT directly for #1 would be ideal, I may even be able  
to do that since supporting a new address type should be fairly contained.  
But if not I'll punt to writing a node.js or python script which connects  
to bitcoind via RPC.

Thanks,
Jeremy

[1] - On Reusing Ephemeral Keys in Diffie-Hellman Key Agreement Protocols
       http://www.math.uwaterloo.ca/~ajmeneze/publications/ephemeral.pdf

[2] - Validation of Elliptic Curve Public Keys
       http://www.iacr.org/archive/pkc2003/25670211/25670211.pdf




From mike at plan99.net  Sun Jan 12 12:51:54 2014
From: mike at plan99.net (Mike Hearn)
Date: Sun, 12 Jan 2014 13:51:54 +0100
Subject: [Bitcoin-development] Stealth Addresses
In-Reply-To: <op.w9kkxcityldrnw@laptop-air.hsd1.ca.comcast.net>
References: <20140106120338.GA14918@savin>
	<op.w9c5o7vgyldrnw@laptop-air.hsd1.ca.comcast.net>
	<20140110102037.GB25749@savin>
	<op.w9kkxcityldrnw@laptop-air.hsd1.ca.comcast.net>
Message-ID: <CANEZrP0Np_FGhw=m6OffijByzz9r4D2AA78jCkzh=NZh=xrbjQ@mail.gmail.com>

You can always just extend the payment protocol with the new fields as
well, vs making very long addresses. If this technique can be made to work
well, it would have applicability in both fixed textual address context,
and for a fixed/upload-once payment protocol file. That has the advantage
of backwards compatibility as well - the new addresses would not be
clickable or acceptable by old wallets, but with the payment protocol you
can always craft a bitcoin URI that contains a regular current style
address, and a link to a fixed payment protocol file (uploaded to a
pastebin type site), and modern wallets would ignore the address and use
the ECDH based system instead.



On Sun, Jan 12, 2014 at 11:33 AM, Jeremy Spilman <jeremy at taplink.co> wrote:

> > Oh, sorry, I forgot to mention it in my first write-up but you can
> > easily make stealth addresses include a second pubkey for the purpose of
> > the communication that either isn't used in the scriptPubKey at all, or
> > is part of a n-of-m multisig. (n>=2) Interestingly that also means you
> > can give a third-party that key and out-source the effort of scanning
> > the blockchain for you.
>
> Great point. Even if it's not a 3rd party, I think it's really important
> to be able to scan for transactions with a key which can't actually spend
> the funds.
>
> The first approach is just one-pass ECDH. I think you're saying the second
> approach is two rounds of ECDH but re-using the same e/P (usually referred
> to as r/R in ECIES). I think this is safe, unlike reusing an ephemeral key
> for signing operations.
>
>    Payee: Publish Q, Q2                     [d, d2 are privkeys, Q, Q2 are
> pubkeys]
>    Payer: 1) Generate ephemeral key: e / P  [e is privkey, P is pubkey]
>           2) S = e * Q                      [first shared secret]
>           3) S2 = e * Q2                    [second shared secret, reusing
> 'e']
>           4) Q' = Q + H(S)                  [pay-to stealth address]
>           5) Q2' = Q2 + H(S2)               [stealth 'marker']
>
>    Watch: 1) Look for TxOut with OP_RETURN <P>
>           2) Q2' = Q2 + H(d2 * P)
>           3) Check for Q2' elsewhere in the Tx
>
> S/MIME for example, allows reuse of the ephemeral keypair. When reusing an
> ephemeral keypair where A reuses (x, X) to encrypt different messages to
> more than one user, A should verify the static public keys to prevent
> small-subgroup attacks.[1][2]
>
> Let's say you pay-to Q' and then Q2' value has to be somewhere else in the
> transaction. You could put it next to the shared P in OP_RETURN. OP_RETURN
> <P> <Q2'> would be 66 bytes.
>
> But then Mallory could generate transactions with the right Q2' but with
> his own pubkey in Step 2 instead of Q. So your scanner would detect a
> payment, but you wouldn't be able to spend it, and Mallory could.
>
> That's a good argument for putting Q2' in a 2-of-2 multisig so that
> pulling this trick would at least make the transaction unspendable for
> both parties, which may be good enough deterrent, but you're still going
> to want to check it against your 'd' before fulfilling a large order. Your
> online watch process could queue the matching transactions, which you
> could move to your offline machine, decrypt your key, and verify the
> transactions are spendable.
>
> Now, you would need to get two pubkeys to the payer, throw in a prefix to
> help standardize it, and end up with addresses that could look like (for
> example):
>
>
> xSTLxsn59oaupR6ZKt2yddQ4dp5hcFinnTWkvsDiXtHgAEDg5ajNVzTY8MMQsmqnEn3ZMKxQzrfC3pDimfTWMkiUb7x3jX3J26JSX
>
> tSTLcpwzupCFL3maVZkSiB9ib3BXsCAfkhMLgckQEyoj8Tk83ANzofeuDdbX6bSPqNRfACLLFYK8EwVo1jdjxNDFNDWxhnQiAy4ba
>
> Those addresses are 74 bytes:
> <Prefix><CompressedPubKey1><CompressedPubKey2><Checksum>
>
>    xSTL Prefix = 0xC0CB9270
>    tSTL Prefix = 0xB2E27D50
>    NOTE: I do NOT have the corresponding privkeys for these four pubkeys!
>
> Those just happened to be the first matching prefixes I found for 74 byte
> addresses. I could try to find ones which start with a specific byte if
> that's somehow better, like 0x04 to match BIP32.
>
> Unfortunately, I don't think you can just derive a second public key from
> the first to keep the address shorter, and still keep the first private
> key secure, even if the second private key is stolen. You only get
> equivalent security as BIP32 public derivation, where you can't lose a
> child private key.
>
> Do we also want xSTL (or whatever user friendly string) prefixes for
> single pubkey (41 byte) stealth addresses?
>
> I'll wait a couple days for feedback, then I'll try to implement the
> following prototypes:
>
> 1) Pay to STL addresses
> 2) Watcher process to detect and queue STL payments for a given d2/Q2
> 3) Offline verifier to take output from Watcher and verify spendable given
> encrypted d/d2
>
> Obviously extending QT directly for #1 would be ideal, I may even be able
> to do that since supporting a new address type should be fairly contained.
> But if not I'll punt to writing a node.js or python script which connects
> to bitcoind via RPC.
>
> Thanks,
> Jeremy
>
> [1] - On Reusing Ephemeral Keys in Diffie-Hellman Key Agreement Protocols
>        http://www.math.uwaterloo.ca/~ajmeneze/publications/ephemeral.pdf
>
> [2] - Validation of Elliptic Curve Public Keys
>        http://www.iacr.org/archive/pkc2003/25670211/25670211.pdf
>
>
>
> ------------------------------------------------------------------------------
> CenturyLink Cloud: The Leader in Enterprise Cloud Services.
> Learn Why More Businesses Are Choosing CenturyLink Cloud For
> Critical Workloads, Development Environments & Everything In Between.
> Get a Quote or Start a Free Trial Today.
>
> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140112/2c0d73d8/attachment.html>

From jeremy at taplink.co  Sun Jan 12 18:20:18 2014
From: jeremy at taplink.co (Jeremy Spilman)
Date: Sun, 12 Jan 2014 10:20:18 -0800
Subject: [Bitcoin-development] Stealth Addresses
In-Reply-To: <CANEZrP0Np_FGhw=m6OffijByzz9r4D2AA78jCkzh=NZh=xrbjQ@mail.gmail.com>
References: <20140106120338.GA14918@savin>
	<op.w9c5o7vgyldrnw@laptop-air.hsd1.ca.comcast.net>
	<20140110102037.GB25749@savin>
	<op.w9kkxcityldrnw@laptop-air.hsd1.ca.comcast.net>
	<CANEZrP0Np_FGhw=m6OffijByzz9r4D2AA78jCkzh=NZh=xrbjQ@mail.gmail.com>
Message-ID: <op.w9k6j4xryldrnw@laptop-air.hsd1.ca.comcast.net>


> You can always just extend the payment protocol with the new fields as  
> well, vs making very long addresses.

I should have mentioned that as Task #4. Agree it could be an optional  
extension and backward compatible. I think for displaying the payment in  
the UI after it's been made via PP, we have to fully support sending to a  
new standard address type anyway. Probably easiest to implement in PP  
after the address and transaction building code is done.

So '4a' would be building a static PP file given the necessary inputs.  
When I get to that point, I'll send out a draft PP extension with  
fields/formats if someone else hasn't already. '4b' would be actually  
adding support for parsing those fields and generating the new transaction  
type into bitcoind.

Any thoughts on the prefix, and one vs two pubkey approach? First of all,  
do we try to support both equally, or favor one over the other? I was  
thinking we could have two different 4 byte prefixes but that both render  
as xSTL/tSTL in Base58 but correspond to the one vs two pubkeys expected.  
I think the chance of finding a single prefix which looks like xSTL for  
both address lengths is 1 in (58^4)^2, so that's probably not going to  
happen.

 From the payer/user perspective, short stealth vs. long stealth is  
irrelevant; they both have the same usability properties from the payer  
perspective. So giving them the same Base58 prefix seems like a good plan.

The full 4-byte prefix seems worth the usability trade-off versus 1-byte  
prefix, especially since it will impact the ability to lookup the  
transaction on an outside service, which I think a lot of people do to  
verify their payments. IMO a longer prefix isn't "wasting bytes" anywhere  
that it really counts.

We could save two bytes in the address if we required both pubkeys to  
start with '03', or save one byte if we required they both start with the  
same byte, but again doesn't seem worth it (to me) for the arbitrary  
restriction.

The actual internal wallet code for *receiving* STL payments and updating  
balances is more tricky and probably not something I can personally tackle  
for bitcoind. Assuming we even want first-class support for generating STL  
addresses and receiving STL payments in a standard user wallet, someone  
has to decide if the STL 'd' / 'd2' keys should be...

   1) Encrypted as usual, and then keep a list of blocks with interesting  
transactions, and go through them when the user enters their password?   
This would cause balances to update differently than how they do now, but  
perhaps be more secure.

   2) Kept unencrypted to allow live scanning as usual? Or keep just 'd2'  
unencrypted, with some new concept of 'unconfirmed' until the user enters  
their password to prove they can spend that TX? That kind of extra step  
seems OK for a merchant but sounds very scary for an average user.

   3) Kept encrypted under a separate password? Meh...

And last thought for now... At some point, we might want to decide on a  
convention to highlight these STL addresses as 'reusable' -- but similar  
questions around revocability remain. I hope we don't need anything like a  
UTC expiration time baked in to the address. A static PP file will have an  
expiration date either in the certificate or in 'expires' field, so I  
think if you want it to expire then use PP?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140112/462cb3bc/attachment.html>

From mike at plan99.net  Sun Jan 12 18:26:18 2014
From: mike at plan99.net (Mike Hearn)
Date: Sun, 12 Jan 2014 19:26:18 +0100
Subject: [Bitcoin-development] Stealth Addresses
In-Reply-To: <op.w9k6j4xryldrnw@laptop-air.hsd1.ca.comcast.net>
References: <20140106120338.GA14918@savin>
	<op.w9c5o7vgyldrnw@laptop-air.hsd1.ca.comcast.net>
	<20140110102037.GB25749@savin>
	<op.w9kkxcityldrnw@laptop-air.hsd1.ca.comcast.net>
	<CANEZrP0Np_FGhw=m6OffijByzz9r4D2AA78jCkzh=NZh=xrbjQ@mail.gmail.com>
	<op.w9k6j4xryldrnw@laptop-air.hsd1.ca.comcast.net>
Message-ID: <CANEZrP06EiiY+5hL05bxzdcFXS8V7S1KOiZj86a_ZP5EcoaMKA@mail.gmail.com>

On Sun, Jan 12, 2014 at 7:20 PM, Jeremy Spilman <jeremy at taplink.co> wrote:

>  I think for displaying the payment in the UI after it's been made via
> PP, we have to fully support sending to a new standard address type anyway.
>

Why? Showing an address is meaningless, especially if the user didn't type
it in or see it somewhere else. It's just an opaque random number, all
putting it in the UI can do is make it look scarier :)

Part of the point of the payment protocol is it lets merchants provide
human readable text for transactions instead of addresses.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140112/e2d2f4b8/attachment.html>

From gavinandresen at gmail.com  Sun Jan 12 21:18:33 2014
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Sun, 12 Jan 2014 16:18:33 -0500
Subject: [Bitcoin-development] Stealth Addresses
In-Reply-To: <op.w9kkxcityldrnw@laptop-air.hsd1.ca.comcast.net>
References: <20140106120338.GA14918@savin>
	<op.w9c5o7vgyldrnw@laptop-air.hsd1.ca.comcast.net>
	<20140110102037.GB25749@savin>
	<op.w9kkxcityldrnw@laptop-air.hsd1.ca.comcast.net>
Message-ID: <CABsx9T2G=yqSUGr0+Ju5-z9P++uS20AwLC+c3DnFMHtcQjQK6w@mail.gmail.com>

On Sun, Jan 12, 2014 at 5:33 AM, Jeremy Spilman <jeremy at taplink.co> wrote:

> ...
> Now, you would need to get two pubkeys to the payer, throw in a prefix to
> help standardize it, and end up with addresses that could look like (for
> example):
>
>
> xSTLxsn59oaupR6ZKt2yddQ4dp5hcFinnTWkvsDiXtHgAEDg5ajNVzTY8MMQsmqnEn3ZMKxQzrfC3pDimfTWMkiUb7x3jX3J26JSX
>
> tSTLcpwzupCFL3maVZkSiB9ib3BXsCAfkhMLgckQEyoj8Tk83ANzofeuDdbX6bSPqNRfACLLFYK8EwVo1jdjxNDFNDWxhnQiAy4ba
>

No, please. Make it easy for non-geeks, extend the payment protocol, or
we'll spend the next two years writing code that tries to ignore linebreaks
and spaces and changing <input> elements in HTML forms to <textarea> ....

-- 
--
Gavin Andrese
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140112/4de94ef8/attachment.html>

From odinn.cyberguerrilla at riseup.net  Sun Jan 12 21:48:32 2014
From: odinn.cyberguerrilla at riseup.net (Odinn Cyberguerrilla)
Date: Sun, 12 Jan 2014 13:48:32 -0800
Subject: [Bitcoin-development] Bitcoin strengthening, giving,
 more - Re:  Stealth Addresses
Message-ID: <e0ad383c6ef578daae63ede1a77c5065.squirrel@fulvetta.riseup.net>

Hello,

My apologies, to start with, as I am temporarily unable to reply directly
to the thread.  I am remembering this conversation due to a few things:

1) the discussion re. extending the payment protocol with new fields
2) discussions about "long addresses"
3) bitcoin strengthening / decentralization / cex.io,ghash.io growth etc.
4) microdonation / giving / microtransaction development, e.g.
coinbase-bitmonet Android SDK,
http://blog.coinbase.com/post/72785739620/android-sdk-released-accept-bitcoin-payment-in-your
5) multisignature via browser, e.g. https://coinb.in/multisig/

Different thoughts are running through my head here, so I will make a
sincere effort to coagulate them into a couple of meaningful and coherent
questions, and perhaps as time goes on, an issue or BIP.  However, I will
precede this with a "scenario" and with some "possibilities" (all of which
are hypothetical - I think) before presenting the "questions" below.

                          |
                          |
                          V

"Scenario(s)"

Suppose that there were to exist a method of extending the payment
protocol such that either "very long addresses" or multiple addresses were
presented by default from within the bitcoin client.  In the scenario
being imagined here, the standard option would exist to enter a payment
address directly.  However, coupled with this would be an option to enable
microdonations (or put another way, multiple transactions associated with
each instance of use of the protocol to facilitate a purchase) as a
default (as background activity automatically corresponding to any given
transaction). Whether or not this process is engaged in would be entirely
voluntary, in other words, users' choice.

The addresses to which this giving or microdonation would occur would be
stipulated by the user but also would be limited to the ability of the
network to support this microdonation process.

So, for example:

1) Let us say that you are to buy a piece of gum and the price of that
piece of gum is 0.00008 BTC.
    1)a.  The user has the ability to support additional (individuals,
organizations, causes, etc) for each transaction (instance of use of
the protocol to facilitate a purchase).
    1)b.  The user has set as a default to be "microdonated" each time a
transaction occurs, the following:
          1)b.1 0.0003 BTC to Sean's Outpost
          1)b.2 0.0004 BTC to a cousin who has a medical debt
          1)b.3 0.00006 BTC to a multisignature account which is intended
to "give youth a future and old age a security"
( Re: https://www.youtube.com/watch?v=qLci5DoZqHU&feature=youtu.be&t=2m38s )
          1)b.4 0.00005 BTC to a future US gov't-run Social Security address
          1)b.5 0.0002 BTC to an anarchist collective's donation address
          1)b.6 0.0002 BTC to a personal investment or retirement account
     1)c. The user then purchases a compound bow for 0.17 BTC.  The
purchase occurs the day after the gum purchase was initiated.  The
user has left the default microdonation settings in place, so Sean's
Outpost, the cousin, the multisignature account, the US gov't run
Social Security address, the anarchist collective, and the personal
investment / retirement account all receive something (automatically)
again as per the user's settings.

"Possibilities"

2) Some Possibilities (depending on implementation):
    2)a. The transaction completes for the purchase of gum but the
microtransactions are not allowed to complete until the compound bow
purchase is complete due to that the gum price is lower than the
collective microdonations which are set by the user as default.
    2)b. The transaction for the purchase of gum is not completed due to
the user realizing that the fee will be larger than the price of gum,
but the microdonations are completed (the user has opted to allow them
to occur anyway) and transaction(s) confirmed.  Subsequently, the
compound bow purchase occurs and the microdonations are given again.
    2)c.  The transaction for the purchase of gum is completed and the
microdonations are completed, everything is confirmed, the next day
the same thing happens with the compound bow purchase, more
microdonations arrive.
    2)d.  The microdonations are interpreted by the system as part of a
very long address created for the transaction.  Due to the tiny price
of the gum the microtransactions are held until another larger
purchase is completed.  The microtransactions occur "times 2" at the
time of the compound bow purchase, since they could not be completed
during the gum purchase, they are completed / confirmed at the time of
the compound bow purchase.  The user is alerted that the ordinary
microdonations will be multiplied by two for the transaction and is
offered an option to either run the default microdonation or the
micronation "times two."  The user confirms the "times two" option and
the microdonations are completed.
    2)e.  The microdonations are each handled as seperate microdonations -
each has a distinct transaction
    2)f.  A fee is collected for some microdonations but not for others
depending upon their size of the microdonation and other factors
    2)g.  Microtransactions are conducted over mobile with zero fees, the
fees are applied only to the item purchased, unless the value of the
microdonations is at a certain threshold value where fees will apply.
    2)h.  The user has the microdonations set by default in the user's
bitcoin client, but also uses 'donation services' (that operate
through a website) apart from the user's client, for example, flattr,
which can provide small bitcoin donations to persons or entities that
the user selects without having to also commit to the "microdonation
default" (Sean's outpost, the cousin, etc) when that 'donation
service' is used.  In other words, the user can commit to a
transaction for the purpose of donation to some person or entity, with
the option of not having the default microdonations occur (user's
option) for that transaction.

(I could go on with all sorts of scenarios here but I think those will
suffice to describe _some_ possibilities)

"Possibilities - continued"

3) The system uses the microdonation process to limit possibility of a 50%
+ 1 attack.  At the user's option, microdonations are routed to different
pools when certain thresholds are reached, to decentralize mining.  This
would occur either as distinct microtransaction (materially, no different
than the microdonation to Sean's Outpost that the user has set as a
default for every purchase) or would occur as part of a "very long
address."

"Questions"

1) What are (some) obstacles to this sort of suggestion to decentralize
the giving process?
2) Would donations be identified as donations or just as another
transaction in the Bitcoin network?  Maybe there is another question
flowing from this question:
  2)a.  Where the user wants the ability to decide to make a donation
'anonymously' or not, could this occur as a default setting for either
one (or all) of the microdonations that the user has set?
3) What would be the simplest possible form of a prototype implementation?

References / things being reflected upon in background / note(s):

a) 'ABIS' - protocol concept to enable decentralization and expansion of a
giving economy and a new social good (ABISprotocol)
https://github.com/ABISprotocol/ABIS
b) 'BitHub' - An experiment in funding privacy OSS (WhisperSystems /
moxie0) https://github.com/WhisperSystems/BitHub
c) 'coinbase-android-sdk' - Coinbase Android SDK developed in
collaboration with Bitmonet Open-source project (coinbase / bitmonet)
https://github.com/coinbase/coinbase-android-sdk
d) 'bitcoin' (bitcoin) https://github.com/bitcoin/bitcoin

Finally:  My apologies in advance for any obvious omissions,
inconsistencies, poorly constructed statements, or whatever malformed
thing you perceive that you have just endured reading.  (If you liked it,
though, you are most welcome.  I'm happy to contribute.)  This is an
initial stab by me in this list to generate discussion about these issues.

          -----this message is in reply to the below-------

From: Mike Hearn <mike at plan99.net>
To: Jeremy Spilman <jeremy at taplink.co>
Cc: "bitcoin-development at lists.sourceforge.net"
<bitcoin-development at lists.sourceforge.net>
Subject: Re: [Bitcoin-development] Stealth Addresses
Date: Sun, 12 Jan 2014 13:51:54 +0100

You can always just extend the payment protocol with the new fields as
well, vs making very long addresses. If this technique can be made to work
well, it would have applicability in both fixed textual address context,
and for a fixed/upload-once payment protocol file. That has the advantage
of backwards compatibility as well - the new addresses would not be
clickable or acceptable by old wallets, but with the payment protocol you
can always craft a bitcoin URI that contains a regular current style
address, and a link to a fixed payment protocol file (uploaded to a
pastebin type site), and modern wallets would ignore the address and use
the ECDH based system instead.



On Sun, Jan 12, 2014 at 11:33 AM, Jeremy Spilman <jeremy at taplink.co> wrote:

> > Oh, sorry, I forgot to mention it in my first write-up but you can
> > easily make stealth addresses include a second pubkey for the purpose of
> > the communication that either isn't used in the scriptPubKey at all, or
> > is part of a n-of-m multisig. (n>=2) Interestingly that also means you
> > can give a third-party that key and out-source the effort of scanning
> > the blockchain for you.
>
> Great point. Even if it's not a 3rd party, I think it's really important
> to be able to scan for transactions with a key which can't actually spend
> the funds.
>
> The first approach is just one-pass ECDH. I think you're saying the second
> approach is two rounds of ECDH but re-using the same e/P (usually referred
> to as r/R in ECIES). I think this is safe, unlike reusing an ephemeral key
> for signing operations.
>
>    Payee: Publish Q, Q2                     [d, d2 are privkeys, Q, Q2 are
> pubkeys]
>    Payer: 1) Generate ephemeral key: e / P  [e is privkey, P is pubkey]
>           2) S = e * Q                      [first shared secret]
>           3) S2 = e * Q2                    [second shared secret, reusing
> 'e']
>           4) Q' = Q + H(S)                  [pay-to stealth address]
>           5) Q2' = Q2 + H(S2)               [stealth 'marker']
>
>    Watch: 1) Look for TxOut with OP_RETURN <P>
>           2) Q2' = Q2 + H(d2 * P)
>           3) Check for Q2' elsewhere in the Tx
>
> S/MIME for example, allows reuse of the ephemeral keypair. When reusing an
> ephemeral keypair where A reuses (x, X) to encrypt different messages to
> more than one user, A should verify the static public keys to prevent
> small-subgroup attacks.[1][2]
>
> Let's say you pay-to Q' and then Q2' value has to be somewhere else in the
> transaction. You could put it next to the shared P in OP_RETURN. OP_RETURN
> <P> <Q2'> would be 66 bytes.
>
> But then Mallory could generate transactions with the right Q2' but with
> his own pubkey in Step 2 instead of Q. So your scanner would detect a
> payment, but you wouldn't be able to spend it, and Mallory could.
>
> That's a good argument for putting Q2' in a 2-of-2 multisig so that
> pulling this trick would at least make the transaction unspendable for
> both parties, which may be good enough deterrent, but you're still going
> to want to check it against your 'd' before fulfilling a large order. Your
> online watch process could queue the matching transactions, which you
> could move to your offline machine, decrypt your key, and verify the
> transactions are spendable.
>
> Now, you would need to get two pubkeys to the payer, throw in a prefix to
> help standardize it, and end up with addresses that could look like (for
> example):
>
>
> xSTLxsn59oaupR6ZKt2yddQ4dp5hcFinnTWkvsDiXtHgAEDg5ajNVzTY8MMQsmqnEn3ZMKxQzrfC3pDimfTWMkiUb7x3jX3J26JSX
>
> tSTLcpwzupCFL3maVZkSiB9ib3BXsCAfkhMLgckQEyoj8Tk83ANzofeuDdbX6bSPqNRfACLLFYK8EwVo1jdjxNDFNDWxhnQiAy4ba
>
> Those addresses are 74 bytes:
> <Prefix><CompressedPubKey1><CompressedPubKey2><Checksum>
>
>    xSTL Prefix = 0xC0CB9270
>    tSTL Prefix = 0xB2E27D50
>    NOTE: I do NOT have the corresponding privkeys for these four pubkeys!
>
> Those just happened to be the first matching prefixes I found for 74 byte
> addresses. I could try to find ones which start with a specific byte if
> that's somehow better, like 0x04 to match BIP32.
>
> Unfortunately, I don't think you can just derive a second public key from
> the first to keep the address shorter, and still keep the first private
> key secure, even if the second private key is stolen. You only get
> equivalent security as BIP32 public derivation, where you can't lose a
> child private key.
>
> Do we also want xSTL (or whatever user friendly string) prefixes for
> single pubkey (41 byte) stealth addresses?
>
> I'll wait a couple days for feedback, then I'll try to implement the
> following prototypes:
>
> 1) Pay to STL addresses
> 2) Watcher process to detect and queue STL payments for a given d2/Q2
> 3) Offline verifier to take output from Watcher and verify spendable given
> encrypted d/d2
>
> Obviously extending QT directly for #1 would be ideal, I may even be able
> to do that since supporting a new address type should be fairly contained.
> But if not I'll punt to writing a node.js or python script which connects
> to bitcoind via RPC.
>
> Thanks,
> Jeremy
>
> [1] - On Reusing Ephemeral Keys in Diffie-Hellman Key Agreement Protocols
>        http://www.math.uwaterloo.ca/~ajmeneze/publications/ephemeral.pdf
>
> [2] - Validation of Elliptic Curve Public Keys
>        http://www.iacr.org/archive/pkc2003/25670211/25670211.pdf
>
>
>
> ------------------------------------------------------------------------------
> CenturyLink Cloud: The Leader in Enterprise Cloud Services.
> Learn Why More Businesses Are Choosing CenturyLink Cloud For
> Critical Workloads, Development Environments & Everything In Between.
> Get a Quote or Start a Free Trial Today.
>
> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>

------------------------------------------------------------------------------
CenturyLink Cloud: The Leader in Enterprise Cloud Services.
Learn Why More Businesses Are Choosing CenturyLink Cloud For
Critical Workloads, Development Environments & Everything In Between.
Get a Quote or Start a Free Trial Today.
http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk

_______________________________________________
Bitcoin-development mailing list
Bitcoin-development at lists.sourceforge.net
https://lists.sourceforge.net/lists/listinfo/bitcoin-development




From jeremy at taplink.co  Mon Jan 13 09:13:08 2014
From: jeremy at taplink.co (Jeremy Spilman)
Date: Mon, 13 Jan 2014 01:13:08 -0800
Subject: [Bitcoin-development] Stealth Addresses
In-Reply-To: <CANEZrP06EiiY+5hL05bxzdcFXS8V7S1KOiZj86a_ZP5EcoaMKA@mail.gmail.com>
References: <20140106120338.GA14918@savin>
	<op.w9c5o7vgyldrnw@laptop-air.hsd1.ca.comcast.net>
	<20140110102037.GB25749@savin>
	<op.w9kkxcityldrnw@laptop-air.hsd1.ca.comcast.net>
	<CANEZrP0Np_FGhw=m6OffijByzz9r4D2AA78jCkzh=NZh=xrbjQ@mail.gmail.com>
	<op.w9k6j4xryldrnw@laptop-air.hsd1.ca.comcast.net>
	<CANEZrP06EiiY+5hL05bxzdcFXS8V7S1KOiZj86a_ZP5EcoaMKA@mail.gmail.com>
Message-ID: <op.w9mbv6dcyldrnw@laptop-air.hsd1.ca.comcast.net>

On Sun, Jan 12, 2014 at 7:20 PM, Jeremy Spilman <jeremy at taplink.co> wrote:
> > I think for displaying the payment in the UI after it's been made via  
> PP, we have to fully
> > support sending to a new standard address type anyway.

On Sun, 12 Jan 2014 10:26:18 -0800, Mike Hearn <mike at plan99.net> wrote:
> Why? Showing an address is meaningless, especially if the user didn't  
> type it in or see
> it somewhere else. It's just an opaque random number, all putting it in  
> the UI can do is
> make it look scarier :)
>
> Part of the point of the payment protocol is it lets merchants provide  
> human readable text
> for transactions instead of addresses.

Of course you're right, moving away from addresses is definitely part of  
the point of PP.

On Sun, 12 Jan 2014 13:18:33 -0800, Gavin Andresen  
<gavinandresen at gmail.com> wrote:
> No, please. Make it easy for non-geeks, extend the payment protocol, or  
> we'll spend the next
> two years writing code that tries to ignore linebreaks and spaces and  
> changing <input> in HTML
> forms to <textarea>...

Agreed, it's long enough to be even more problematic than usual. If the  
general consensus is that there should not even be a standardized address  
form, then I can skip that entirely, and go straight to trying to extend  
PP.

It's a given this will be implemented for Payment Protocol. The question  
is whether it's also usable outside of PP.

I was kind of imagining that we could encourage people to replace all  
their static address text that live on Github pages, and README.me, and  
forum signatures, etc. with new 'href=bitcoin:xSTL...' URIs. Convention  
could be to require only transporting xSTL addresses within a URI, even  
going so far as to not support them copy/pasted. 101 characters is not  
much longer (and sometimes shorter) than PaymentRequest URIs end up being.

I think there are ways to make stealth addresses easy enough to use that  
people actually prefer using them for P2P payments which do not involve a  
full-stack merchant. In that case, if it was a PaymentRequest it would  
almost certainly not be signed, and would be more easily shared over email  
or SMS as a URI than as a file attachment or, even worse, putting the  
unsigned PR file up on a third-party server which probably won't do a good  
job securing it.

* PP Implementation Overview *

The basic PaymentRequest>PaymentDetails is expecting 'output' containing  
one or more TxOuts with script and amount. I believe the general approach  
is to put a fallback address into 'output' for backward compatibility, and  
put Q and Q2 into an extension field.

So we add a new optional field to PaymentDetails which contains the one or  
two PubKeys. Not sure if we want different protobuf tags, or if the  
difference in length of the value makes it obvious enough which approach  
is being used;

    optional bytes stealthOnePubKey = 1000
    optional bytes stealthTwoPubKey = 1001

or just

    optional bytes stealth = 1000

* User Interaction / Flow *

Lets follow this through from the user perspective, starting with what it  
looks like today. I'm having a hard time finding screenshots of what PP  
looks like in BitcoinQT, so I built from HEAD and using Gavin's  
Handy-Dandy PaymentRequest Generator  
(https://bitcoincore.org/~gavin/createpaymentrequest.php):

Screenshots: http://imgur.com/a/k6j9D

Image 1 - 'Send' screen after clicking a PR URI with a small transaction  
and auto-calculated fee
Image 2 - System Tray notification after clicking 'Send'
Image 3 - Transaction List showing partially confirmed transaction
Image 4 - Transactions details popup

We see 'Pay To' (Common Name from the cert) and 'Memo' on the Send screen.  
The System Tray notification popup and Transaction List shows just the  
address string. The 'Transaction details' window shows 'Merchant' which I  
think is the same as 'Pay To'. You also have 'Copy address' option in the  
right-click menu.

Memo seems not to be saved, or at least not visible in the UI after  
sending a payment.

* Transaction Display *

The address string is fairly pervasive, which is why I was originally  
thinking it would make sense to implement all the address handling first,  
so all those screens would continue to work as specified, without trying  
to hack something different in those fields.

Without digging too far into the code, it looks like "address" displayed  
is derived from the TxOut -- e.g. script.cpp:ExtractDestination. This  
could be a bit problematic depending on what we really want to show to the  
user -- the stealth multisig, or the pubkeys?

Part of the point of stealth addresses is actually making them reusable.  
So if you're the originator of the payment, you might want the wallet to  
tag that transaction somehow with the pubkeys used to generate it.

Also, ideally I think I would want multiple different stealth payments  
within a single wallet to the same merchant / pubkeys to be identifiable  
as such.

* Sample Code *

Will follow in another email, to be sent shortly!




From jeremy at taplink.co  Mon Jan 13 09:18:39 2014
From: jeremy at taplink.co (Jeremy Spilman)
Date: Mon, 13 Jan 2014 01:18:39 -0800
Subject: [Bitcoin-development] Stealth Payments - Sample Code / Proof of
	Concept
Message-ID: <op.w9mb5dv0yldrnw@laptop-air.hsd1.ca.comcast.net>

* Transaction *

I spent 1BTC on TestNet to a stealth address...
    TxID: df092896c1347b303da299bc84c92bef1946f455dbdc80ffdb01a18ea4ed8b4c

http://blockexplorer.com/testnet/tx/df092896c1347b303da299bc84c92bef1946f455dbdc80ffdb01a18ea4ed8b4c#i8166574

* Code *

Code which generated this transaction is here:  
https://gist.github.com/jspilman/8396495

Note, one minor change from the protocol we discussed is I'm just using  
the 32-byte x coordinate for the shared secret, not the compressed pubKey  
(so, throwing away the first byte) before hashing with SHA256.

* How it Looks *

After importing the privkey for the TxIn to that transaction  
(importprivkey "cNL8XqRtqwC1YEc9kKspbX2aukWnXfgHQSvjsPYbuPif5Q3DJkEs"  
rescan) you will see two rows in the Transaction List of Bitcoin-QT...

Both rows simply say 'Sent to' with a blank address. One has 1BTC amount  
which is the 2-of-2 stealth multisig, the other has 0BTC amount, and it's  
the OP_RETURN.

I wonder if the 0BTC OP_RETURN transactions should be hidden from the  
Transaction List? 'Transaction Details' truncates the <data> after  
OP_RETURN anyway, so it's not even particularly useful for seeing what  
data you embedded.

* Next Steps *

I'm not quite sure. If we're going to try to deploy this, I think we need  
to fully understand what users who are making these payments should see in  
their wallet software while making a payment, and after a payment has been  
made.

Right now I'm thinking...

   1) Define the PaymentRequest extension
   2) Update Gavin's PHP to generate PaymentRequests for stealth payments
   3) Get Bitcoin-QT loading the PaymentRequest and generating transactions  
 from those PaymentRequests
   4) Write an agent to detect incoming stealth payments

But we would still be showing meaningless rows in the payer's Transaction  
List without some additional work.

If there is a place to add TxOut meta-data with the pubkeys used to  
generate it... well, there must be since the 'Merchant' field is attached  
somehow. So we could probably use the same method to keep the pubKeys  
around.

Maybe the simple way to punt on this is to just show 'Merchant' in the  
address column if it is available and an address is not. We could skip  
saving the pubKeys for now, so there would be no way to send follow on  
stealth payments, but at least the Transaction List would make sense  
instead of looking like two empty transactions.

* Other Open Questions *

I think the biggest is if/how to receive P2P stealth payments in  
Bitcoin-QT as an end-user not a merchant.

I can probably make the necessary changes to IsMine, but I don't know  
where we should keep 'd2'/'Q2' unencrypted so it's available for doing the  
necessary tests, but has no chance of ever be used as a stand-alone  
private key?

And then there's still the question of: when 'd1'/Q1 is available  
decrypted, we must fully verify the transaction, and how to indicate if  
that has or has not been done yet.

It really seems crippled to me without fully integrated support for  
receiving P2P stealth payments in Bitcoin-QT. It doesn't seem like that  
much code, just some details to work out first.




From gmaxwell at gmail.com  Mon Jan 13 09:52:25 2014
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Mon, 13 Jan 2014 01:52:25 -0800
Subject: [Bitcoin-development] Stealth Addresses
In-Reply-To: <CABsx9T2G=yqSUGr0+Ju5-z9P++uS20AwLC+c3DnFMHtcQjQK6w@mail.gmail.com>
References: <20140106120338.GA14918@savin>
	<op.w9c5o7vgyldrnw@laptop-air.hsd1.ca.comcast.net>
	<20140110102037.GB25749@savin>
	<op.w9kkxcityldrnw@laptop-air.hsd1.ca.comcast.net>
	<CABsx9T2G=yqSUGr0+Ju5-z9P++uS20AwLC+c3DnFMHtcQjQK6w@mail.gmail.com>
Message-ID: <CAAS2fgTz0TaGhym_35V3N2-vHVzU9BeuV8q+QJjwh5bg77FEZg@mail.gmail.com>

On Sun, Jan 12, 2014 at 1:18 PM, Gavin Andresen <gavinandresen at gmail.com> wrote:
> No, please. Make it easy for non-geeks, extend the payment protocol, or
> we'll spend the next two years writing code that tries to ignore linebreaks
> and spaces and changing <input> elements in HTML forms to <textarea> ....

However, if you're able to use the payment protocol then you probably
don't need stealth addresses to prevent reuse.

E.g. What can I put for a donation address on a totally static
webpage? or on a billboard?

At least thats what I understood these things were trying to solve?
fix privacy where realtime two way communication just isn't available.



From mike at plan99.net  Mon Jan 13 10:39:35 2014
From: mike at plan99.net (Mike Hearn)
Date: Mon, 13 Jan 2014 11:39:35 +0100
Subject: [Bitcoin-development] Stealth Addresses
In-Reply-To: <CAAS2fgTz0TaGhym_35V3N2-vHVzU9BeuV8q+QJjwh5bg77FEZg@mail.gmail.com>
References: <20140106120338.GA14918@savin>
	<op.w9c5o7vgyldrnw@laptop-air.hsd1.ca.comcast.net>
	<20140110102037.GB25749@savin>
	<op.w9kkxcityldrnw@laptop-air.hsd1.ca.comcast.net>
	<CABsx9T2G=yqSUGr0+Ju5-z9P++uS20AwLC+c3DnFMHtcQjQK6w@mail.gmail.com>
	<CAAS2fgTz0TaGhym_35V3N2-vHVzU9BeuV8q+QJjwh5bg77FEZg@mail.gmail.com>
Message-ID: <CANEZrP0huBWqgvQik9Yc26Tu4CwR0VSXcfC+qfzsZqvoU4VJGA@mail.gmail.com>

>
> However, if you're able to use the payment protocol then you probably
> don't need stealth addresses to prevent reuse.
>

I was thinking that people could upload a payment protocol file somewhere
once (like to their personal web page, or shared via dropbox or google
drive or some custom new pastebin style service), and then just encode a
regular bitcoin URI into the qrcode on the billboard.

Likewise, I could attach a payment request to an email and send it to you,
and now you can pay me whenever you want forever.

Getting a little static piece of data to someone *once* should be something
we can make easy. Constantly refreshing it, on the other hand ...
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140113/caf2111a/attachment.html>

From mike at plan99.net  Mon Jan 13 11:18:28 2014
From: mike at plan99.net (Mike Hearn)
Date: Mon, 13 Jan 2014 12:18:28 +0100
Subject: [Bitcoin-development] Stealth Payments - Sample Code / Proof of
	Concept
In-Reply-To: <op.w9mb5dv0yldrnw@laptop-air.hsd1.ca.comcast.net>
References: <op.w9mb5dv0yldrnw@laptop-air.hsd1.ca.comcast.net>
Message-ID: <CANEZrP38DsYP4KRk1Jz_hiMrP_ZPCj6=TDKmr-t-r2BJRMjDSQ@mail.gmail.com>

Cool!

On Mon, Jan 13, 2014 at 10:18 AM, Jeremy Spilman <jeremy at taplink.co> wrote:

> I spent 1BTC on TestNet to a stealth address...
>     TxID: df092896c1347b303da299bc84c92bef1946f455dbdc80ffdb01a18ea4ed8b4c
>

... but can you redeem it?


> Code which generated this transaction is here:
> https://gist.github.com/jspilman/8396495


That's rather interesting code. Is this using a private C# bitcoin
implementation?


> I wonder if the 0BTC OP_RETURN transactions should be hidden from the
> Transaction List?
>

Yes, of course. The transaction list should just say something like

    "Payment received from Jeremy,  0.1 BTC"

Maybe the simple way to punt on this is to just show 'Merchant' in the
> address column if it is available and an address is not.


I am surprised it's not already the case! Though "merchant" is perhaps a
bit biased as a name, internally it perhaps should just be called
"Recipient". There's no requirement for you to be a merchant to create
payment protocol requests.


> I can probably make the necessary changes to IsMine, but I don't know
> where we should keep 'd2'/'Q2' unencrypted so it's available for doing the
> necessary tests, but has no chance of ever be used as a stand-alone
> private key?
>

The wallet format would need extending.

I'd feel a lot more comfortable if the protocol was reviewed by a
professional cryptographer though. I think think Gregory already brought up
an issue to do with people able to detect such payments by testing if
decrypted values are points on the curve, or something like that.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140113/a81a887a/attachment.html>

From roy at gnomon.org.uk  Mon Jan 13 13:37:46 2014
From: roy at gnomon.org.uk (Roy Badami)
Date: Mon, 13 Jan 2014 13:37:46 +0000
Subject: [Bitcoin-development] Stealth Addresses
In-Reply-To: <CANEZrP0huBWqgvQik9Yc26Tu4CwR0VSXcfC+qfzsZqvoU4VJGA@mail.gmail.com>
References: <20140106120338.GA14918@savin>
	<op.w9c5o7vgyldrnw@laptop-air.hsd1.ca.comcast.net>
	<20140110102037.GB25749@savin>
	<op.w9kkxcityldrnw@laptop-air.hsd1.ca.comcast.net>
	<CABsx9T2G=yqSUGr0+Ju5-z9P++uS20AwLC+c3DnFMHtcQjQK6w@mail.gmail.com>
	<CAAS2fgTz0TaGhym_35V3N2-vHVzU9BeuV8q+QJjwh5bg77FEZg@mail.gmail.com>
	<CANEZrP0huBWqgvQik9Yc26Tu4CwR0VSXcfC+qfzsZqvoU4VJGA@mail.gmail.com>
Message-ID: <20140113133746.GI38964@giles.gnomon.org.uk>

> I was thinking that people could upload a payment protocol file somewhere
> once (like to their personal web page, or shared via dropbox or google
> drive or some custom new pastebin style service), and then just encode a
> regular bitcoin URI into the qrcode on the billboard.

That does require trusting the third party not to later tamper with
the payment request, though.  (I'm assuming that a signed payment
request is not always going to be all that useful in the case of
private individuals, even assuming the payee is willing to sign up for
one.)

> Likewise, I could attach a payment request to an email and send it to you,
> and now you can pay me whenever you want forever.

That certainly sounds like a plausible use case.  You do still have
the problem that e-mail is an insecure channel, but it's no worse than
exchanging Bitcoin addreses over e-mail as things stand at the
moment.

roy



From jeremy at taplink.co  Mon Jan 13 14:10:14 2014
From: jeremy at taplink.co (Jeremy Spilman)
Date: Mon, 13 Jan 2014 06:10:14 -0800
Subject: [Bitcoin-development] Stealth Payments - Sample Code / Proof of
	Concept
In-Reply-To: <CANEZrP38DsYP4KRk1Jz_hiMrP_ZPCj6=TDKmr-t-r2BJRMjDSQ@mail.gmail.com>
References: <op.w9mb5dv0yldrnw@laptop-air.hsd1.ca.comcast.net>
	<CANEZrP38DsYP4KRk1Jz_hiMrP_ZPCj6=TDKmr-t-r2BJRMjDSQ@mail.gmail.com>
Message-ID: <op.w9mpncluyldrnw@laptop-air.hsd1.ca.comcast.net>

On Mon, 13 Jan 2014 03:18:28 -0800, Mike Hearn <mike at plan99.net> wrote:

> Cool!
>
> On Mon, Jan 13, 2014 at 10:18 AM, Jeremy Spilman <jeremy at taplink.co>  
> wrote:
>> I spent 1BTC on TestNet to a stealth address...
>>    TxID:  
>> df092896c1347b303da299bc84c92bef1946f455dbdc80ffdb01a18ea4ed8b4c
>
> ... but can you redeem it?

But of course!

Every time the test runs it makes a new ephemeral key, so I wrote a  
separate test with hard-coded values from the block chain (as it would be  
in real-life) to create a redeeming Tx. I've added the RedeemStealth code  
to the Gist.

It sent successfully using sendrawtransaction, TxID:  
ed92364d2b6f6528dea32dbf6c4d5d6291b601aff1ddb4eeb124d003c7c7ff07

I'm self mining since no one else seems to be on TestNet this time of  
night... going to catch some sleep, hopefully by the time I wake up it'll  
be on the chain.


>> Code which generated this transaction is here:
>> https://gist.github.com/jspilman/8396495
>
> That's rather interesting code. Is this using a private C# bitcoin  
> implementation?

Indeed it is. One day I may publish the libraries, but they aren't doing  
anything particularly special under the hood, just the standard  
Bitcoin/EC/BIP32 stuff and using OpenSSL under the hood instead of the  
more typical BouncyCastle.

I just tried to keep things extremely concise in the APIs. Hopefully all  
the function calls are obvious what they are doing. Since there's no  
actual wallet behind it, the code to setup the inputs is a bit annoying,  
but actually building and signing transactions is super clean.


>> I wonder if the 0BTC OP_RETURN transactions should be hidden from the
>> Transaction List?
>
> Yes, of course. The transaction list should just say something like
>
>    "Payment received from Jeremy,  0.1 BTC"

In this case I'm just looking at the payee wallet, but yes, "Payment set  
to Jeremy" should be possible, with the name coming from the CN.

>
>> Maybe the simple way to punt on this is to just show 'Merchant' in the
>> address column if it is available and an address is not.
>
> I am surprised it's not already the case! Though "merchant" is perhaps a  
> bit biased as a name, internally it perhaps should just be called  
> "Recipient". >There's no requirement for you to be a merchant to create  
> payment protocol requests.

Yeah, right now for PaymentProtocol fulfilled payments, on the payer's  
Transaction List, it shows the address in the 'Address' column, but if you  
right-click and look at 'Transaction details' you will see something like:


    Status: 42 confirmations
    Date: 1/12/2014 21:07
    To: mrhz5ZgSF3C1BSdyCKt3gEdhKoRL5BNfJV
    Debit: -0.10 BTC
    Net amount: -0.10 BTC
    Transaction ID:  
93c50347e35062a3501fcea15d1a22ace8d1b059affb9913fc9e7df4e7d6a00b-000
    Merchant: www.bitcoincore.org



I agree 'Merchant' might not be the best name, especially since when  
you're making the payment the field is labeled simply 'Pay To'.



But I think we agree, why show 'mrhz5ZgSF3C1BSdyCKt3gEdhKoRL5BNfJV' in the  
transaction list instead of just "Paid To: www.bitcoincore.org" and then  
perhaps the Memo field could be stuck under 'Transaction details', instead  
of losing that important bit of info.

>
>> I can probably make the necessary changes to IsMine, but I don't know
>> where we should keep 'd2'/'Q2' unencrypted so it's available for doing  
>> the
>> necessary tests, but has no chance of ever be used as a stand-alone
>> private key?
>
> The wallet format would need extending.
>
> I'd feel a lot more comfortable if the protocol was reviewed by a  
> professional cryptographer though. I think think Gregory already brought  
> up an issue >to do with people able to detect such payments by testing  
> if decrypted values are points on the curve, or something like that.

Not sure I follow that, will look forward to hearing more about it.

The only risk I know of is that there are checks in theory that you would  
do on Q1/Q2, but since the payee is the one generating Q1/Q2 they would  
literally be attacking themselves. I referenced two papers in a prior  
email specifically on reusing ephemeral keys in ECDH, and the validation  
you need to do on Q1/Q2 when re-using an ephemeral key to send two  
messages to two different pubKeys. I think the idea of checking the  
pubKeys when re-using ephemeral keys is more when the pubKeys are under  
the attackers control. But the validation is not complicated, and I'll see  
if I can add it tomorrow.

It would be good to fully understand how a possible small-group attack  
would work...  This is a bit of guess-work on my part:

    If a payee managed to foot-shoot themselves with a bad Q2 pubKey, then  
gives out d2/Q2 to a scanning service run by Mallory...

    Mallory has d2/Q2, given P from a transaction, he calculates S2 (as  
usual):

       byte[] S2 = EC.DH(d2, P);

    But with the small sub-group attack with Q2 he can learn 'e' (the  
ephemeral private key) used:

       byte[] S2 = EC.DH(e, Q2);

    and from that he can calculate S1 directly, when he should only know S2.

       byte[] S1 = EC.DH(e, Q1);

So does that mean Mallory can find 'd1'? It looks like you would need  
another small sub-group attack on P, the ephemeral public key, so another  
key the attacker doesn't control which would have to randomly be bad.

       byte[] S1 = EC.DH(d1, P);

But I'm definitely not a professional cryptographer. Perhaps Matthew Green  
might be a good candidate to review this?

AND YAY, my stealth redemption Tx just went through, goodnight :-)  
http://blockexplorer.com/testnet/tx/df092896c1347b303da299bc84c92bef1946f455dbdc80ffdb01a18ea4ed8b4c#o0
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140113/21e4df9f/attachment.html>

From mike at plan99.net  Mon Jan 13 15:58:01 2014
From: mike at plan99.net (Mike Hearn)
Date: Mon, 13 Jan 2014 16:58:01 +0100
Subject: [Bitcoin-development] Stealth Addresses
In-Reply-To: <20140113133746.GI38964@giles.gnomon.org.uk>
References: <20140106120338.GA14918@savin>
	<op.w9c5o7vgyldrnw@laptop-air.hsd1.ca.comcast.net>
	<20140110102037.GB25749@savin>
	<op.w9kkxcityldrnw@laptop-air.hsd1.ca.comcast.net>
	<CABsx9T2G=yqSUGr0+Ju5-z9P++uS20AwLC+c3DnFMHtcQjQK6w@mail.gmail.com>
	<CAAS2fgTz0TaGhym_35V3N2-vHVzU9BeuV8q+QJjwh5bg77FEZg@mail.gmail.com>
	<CANEZrP0huBWqgvQik9Yc26Tu4CwR0VSXcfC+qfzsZqvoU4VJGA@mail.gmail.com>
	<20140113133746.GI38964@giles.gnomon.org.uk>
Message-ID: <CANEZrP1KAVhi_-cxCYe0rR9LUSYJ8MyW8=6eSJZ65FeY5ZJNuQ@mail.gmail.com>

On Mon, Jan 13, 2014 at 2:37 PM, Roy Badami <roy at gnomon.org.uk> wrote:

> That does require trusting the third party not to later tamper with
> the payment request, though.


You have to trust the billboard owner too. If you're relying on a third
party to relay a payment instruction, that will always be an issue, hence
the signing.

Signing a payment request for an individual is easy, anyway, depending on
the kind of ID you want. If you want to sign with an email address, just go
here with a browser like Chrome/Safari/IE that uses the system keystore:

   http://www.comodo.com/home/email-security/free-email-certificate.php

They'll send you an email, you click the link to verify, and a cert will be
generated and installed by your web browser. It's actually easier than
signing up for a website. There are lots of other places that do it for
free too, I just picked the first one from a google search for [free email
certificate].

Once you've got that in your keystore, a wallet app can quite easily be
told to sign payment requests with your email address.

For a billboard I guess you'd probably be an organisation or company
instead, though an email address can work there too as long as you have a
well known domain name.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140113/ad38ed64/attachment.html>

From pieter.wuille at gmail.com  Mon Jan 13 16:43:41 2014
From: pieter.wuille at gmail.com (Pieter Wuille)
Date: Mon, 13 Jan 2014 17:43:41 +0100
Subject: [Bitcoin-development] Payment protocol and reliable Payment messages
Message-ID: <CAPg+sBhdgVQvumL_r9thLD5wm7UOJx=2DE+01-T58HHdimvpXw@mail.gmail.com>

Hi all,

while thinking about what use cases the stealth addresses covers, in
particular in addition to the payment protocol, I found it useful to
bring this up again.

currently, BIP70 says for "payment_url": Secure (usually https)
location where a Payment message (see below) may be sent to obtain a
PaymentACK.

The fact that this is optional makes the "memo" and "refund" and
"merchant_data" fields in the Payment message useless, as merchants
cannot rely on it, thus need to provide an alternative, thus nobody
would have a use for trying to use the in-Payment versions. If we
truly want the use of this Payment being sent be optional, I'd vote to
get rid of these and just send the transaction.

In particular in the case of more anonymous senders, if the Payment
message isn't sent, it may result in funds being transferred without a
way to know who to refund it to if something goes wrong.

That would be a pity. I think having bi-directional communication in
the protocol is one of the nicest things the payment protocol can add.
I would prefer to at least formulate it in the BIP as "location where
a Payment message must be attempted to be sent to". In case it fails,
it should probably be stored in the client and retried later.

As an optimization (and I believe this is what Mike plans to implement
in BitcoinJ), if a payment_url is present, it should be encouraged to
only send the payment there, and not broadcast the transaction at all
on the P2P network (minimizing the risk that the transaction confirms
without the payment being received; it can't be guaranteed however).

-- 
Pieter



From andreas at schildbach.de  Mon Jan 13 17:44:18 2014
From: andreas at schildbach.de (Andreas Schildbach)
Date: Mon, 13 Jan 2014 18:44:18 +0100
Subject: [Bitcoin-development] Payment protocol and reliable Payment
	messages
In-Reply-To: <CAPg+sBhdgVQvumL_r9thLD5wm7UOJx=2DE+01-T58HHdimvpXw@mail.gmail.com>
References: <CAPg+sBhdgVQvumL_r9thLD5wm7UOJx=2DE+01-T58HHdimvpXw@mail.gmail.com>
Message-ID: <lb18l6$nu2$1@ger.gmane.org>

On 01/13/2014 05:43 PM, Pieter Wuille wrote:

> As an optimization (and I believe this is what Mike plans to implement
> in BitcoinJ), if a payment_url is present, it should be encouraged to
> only send the payment there, and not broadcast the transaction at all
> on the P2P network (minimizing the risk that the transaction confirms
> without the payment being received; it can't be guaranteed however).

Can you explain what the problem is here? The payment message can be
transmitted after the payment has been received through the P2P network.
Am I missing something?

Furthermore, if we give up the robustness of the P2P network, we will
likely end up with more failed payments. There is so much that can go
wrong when trying to connect via HTTP (proxies etc.), Bluetooth
endpoints can go away, etc. At least we should provide fallback
payment_url's in this case.

As for you proposal, just be aware I'd like to use the payment protocol
for face to face payments as well. That meant payment request via NFC or
QR, payment message and payment confirmations via Bluetooth. I think it
can be done by putting a Bluetooth mac address into the payment_url.




From pieter.wuille at gmail.com  Mon Jan 13 17:56:57 2014
From: pieter.wuille at gmail.com (Pieter Wuille)
Date: Mon, 13 Jan 2014 18:56:57 +0100
Subject: [Bitcoin-development] Payment protocol and reliable Payment
	messages
In-Reply-To: <lb18l6$nu2$1@ger.gmane.org>
References: <CAPg+sBhdgVQvumL_r9thLD5wm7UOJx=2DE+01-T58HHdimvpXw@mail.gmail.com>
	<lb18l6$nu2$1@ger.gmane.org>
Message-ID: <CAPg+sBji5sFWZ_mDVXKKwkyeGYDbLmvwau457nmntT_NgTT+Sw@mail.gmail.com>

On Mon, Jan 13, 2014 at 6:44 PM, Andreas Schildbach
<andreas at schildbach.de> wrote:
> On 01/13/2014 05:43 PM, Pieter Wuille wrote:
>
>> As an optimization (and I believe this is what Mike plans to implement
>> in BitcoinJ), if a payment_url is present, it should be encouraged to
>> only send the payment there, and not broadcast the transaction at all
>> on the P2P network (minimizing the risk that the transaction confirms
>> without the payment being received; it can't be guaranteed however).

I want to avoid the case where a transaction confirms, but the
associated payment is not delivered. If there is a reasonable chance
that this case occurs in normal operation, it means the payment
transmission cannot be relied upon.

On the other hand, if the payment gets sent, but the transaction is
not broadcasted, it can be broadcasted by the receiver (who has much
more reason to do so; he wants to spend his money).
>
> Can you explain what the problem is here? The payment message can be
> transmitted after the payment has been received through the P2P network.
> Am I missing something?

So, yes, sending on the P2P network is fine, as long as everything is
done to get the payment delivered. Not broadcasting on P2P is just an
optimization that makes failures of not getting the transaction out
and not getting the payment delivered coincide better. I say just
optimization, as you can't rely on the fact that if the payment fails,
the transaction will also fail (the merchant may be malicious, make
the submission of the payment fail, but broadcast the transaction
anyway), so wallets must still be able to deal with this. Nonetheless,
I think it can increase the reliability of "payment being received for
otherwise confirming transactions".
>
> Furthermore, if we give up the robustness of the P2P network, we will
> likely end up with more failed payments. There is so much that can go
> wrong when trying to connect via HTTP (proxies etc.), Bluetooth
> endpoints can go away, etc. At least we should provide fallback
> payment_url's in this case.

That's a different issue. I'm very aware that payments over HTTP can
fail. The point is that I prefer the entire transaction to fail in
that case, instead, and focus on making the payment submission more
reliable.
>
> As for you proposal, just be aware I'd like to use the payment protocol
> for face to face payments as well. That meant payment request via NFC or
> QR, payment message and payment confirmations via Bluetooth. I think it
> can be done by putting a Bluetooth mac address into the payment_url.

I'm aware. What issues do you see?

-- 
Pieter



From roy at gnomon.org.uk  Mon Jan 13 19:40:50 2014
From: roy at gnomon.org.uk (Roy Badami)
Date: Mon, 13 Jan 2014 19:40:50 +0000
Subject: [Bitcoin-development] Stealth Addresses
In-Reply-To: <CAAS2fgTz0TaGhym_35V3N2-vHVzU9BeuV8q+QJjwh5bg77FEZg@mail.gmail.com>
References: <20140106120338.GA14918@savin>
	<op.w9c5o7vgyldrnw@laptop-air.hsd1.ca.comcast.net>
	<20140110102037.GB25749@savin>
	<op.w9kkxcityldrnw@laptop-air.hsd1.ca.comcast.net>
	<CABsx9T2G=yqSUGr0+Ju5-z9P++uS20AwLC+c3DnFMHtcQjQK6w@mail.gmail.com>
	<CAAS2fgTz0TaGhym_35V3N2-vHVzU9BeuV8q+QJjwh5bg77FEZg@mail.gmail.com>
Message-ID: <20140113194049.GJ38964@giles.gnomon.org.uk>

On Mon, Jan 13, 2014 at 01:52:25AM -0800, Gregory Maxwell wrote:
> On Sun, Jan 12, 2014 at 1:18 PM, Gavin Andresen <gavinandresen at gmail.com> wrote:
> > No, please. Make it easy for non-geeks, extend the payment protocol, or
> > we'll spend the next two years writing code that tries to ignore linebreaks
> > and spaces and changing <input> elements in HTML forms to <textarea> ....
> 
> However, if you're able to use the payment protocol then you probably
> don't need stealth addresses to prevent reuse.

I definitely think this is a case that should be addressed better than
at present.

To consider a concrete use case, imagine I wish to be able to give my
friends and acquaintances a paper business card with a QR code on it,
that they can use to make payments to me.  I don't own a domain or any
kind of X.509 certificate and I don't run an HTTP server.  I don't
feel comfortable with a solution that requires me to trust a third
party to complete the payments.

At the moment, I can give them a business card with a Bitcoin address.
Being able to give out a business card with a stealth address would be
a major advance.

roy



From drak at zikula.org  Mon Jan 13 19:44:13 2014
From: drak at zikula.org (Drak)
Date: Mon, 13 Jan 2014 19:44:13 +0000
Subject: [Bitcoin-development] Stealth Addresses
In-Reply-To: <20140113194049.GJ38964@giles.gnomon.org.uk>
References: <20140106120338.GA14918@savin>
	<op.w9c5o7vgyldrnw@laptop-air.hsd1.ca.comcast.net>
	<20140110102037.GB25749@savin>
	<op.w9kkxcityldrnw@laptop-air.hsd1.ca.comcast.net>
	<CABsx9T2G=yqSUGr0+Ju5-z9P++uS20AwLC+c3DnFMHtcQjQK6w@mail.gmail.com>
	<CAAS2fgTz0TaGhym_35V3N2-vHVzU9BeuV8q+QJjwh5bg77FEZg@mail.gmail.com>
	<20140113194049.GJ38964@giles.gnomon.org.uk>
Message-ID: <CANAnSg30V01B_3LCJ09sTwcsYa4_WOg3sKd-=p6COZS6w0b-uA@mail.gmail.com>

On 13 January 2014 19:40, Roy Badami <roy at gnomon.org.uk> wrote:

> At the moment, I can give them a business card with a Bitcoin address.
> Being able to give out a business card with a stealth address would be
> a major advance.


My thoughts exactly.

Drak
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140113/488b025d/attachment.html>

From roy at gnomon.org.uk  Mon Jan 13 19:53:19 2014
From: roy at gnomon.org.uk (Roy Badami)
Date: Mon, 13 Jan 2014 19:53:19 +0000
Subject: [Bitcoin-development] Stealth Addresses
In-Reply-To: <20140113133746.GI38964@giles.gnomon.org.uk>
References: <20140106120338.GA14918@savin>
	<op.w9c5o7vgyldrnw@laptop-air.hsd1.ca.comcast.net>
	<20140110102037.GB25749@savin>
	<op.w9kkxcityldrnw@laptop-air.hsd1.ca.comcast.net>
	<CABsx9T2G=yqSUGr0+Ju5-z9P++uS20AwLC+c3DnFMHtcQjQK6w@mail.gmail.com>
	<CAAS2fgTz0TaGhym_35V3N2-vHVzU9BeuV8q+QJjwh5bg77FEZg@mail.gmail.com>
	<CANEZrP0huBWqgvQik9Yc26Tu4CwR0VSXcfC+qfzsZqvoU4VJGA@mail.gmail.com>
	<20140113133746.GI38964@giles.gnomon.org.uk>
Message-ID: <20140113195319.GK38964@giles.gnomon.org.uk>

> > Likewise, I could attach a payment request to an email and send it to you,
> > and now you can pay me whenever you want forever.
> 
> That certainly sounds like a plausible use case.  You do still have
> the problem that e-mail is an insecure channel, but it's no worse than
> exchanging Bitcoin addreses over e-mail as things stand at the
> moment.

On further reflection, I'm not sure I understand this use case of the
payment protocol.  Since a PaymentRequest currently contains the
Outputs that specify the addresses to send to, reusing a
PaymentRequest like this without using stealth addresses implies
address reuse.

(Granted there are alternative solutions to stealth addresses, such as
a BIP32-style derivation.)

roy



From mike at plan99.net  Mon Jan 13 19:57:33 2014
From: mike at plan99.net (Mike Hearn)
Date: Mon, 13 Jan 2014 20:57:33 +0100
Subject: [Bitcoin-development] Stealth Addresses
In-Reply-To: <20140113195319.GK38964@giles.gnomon.org.uk>
References: <20140106120338.GA14918@savin>
	<op.w9c5o7vgyldrnw@laptop-air.hsd1.ca.comcast.net>
	<20140110102037.GB25749@savin>
	<op.w9kkxcityldrnw@laptop-air.hsd1.ca.comcast.net>
	<CABsx9T2G=yqSUGr0+Ju5-z9P++uS20AwLC+c3DnFMHtcQjQK6w@mail.gmail.com>
	<CAAS2fgTz0TaGhym_35V3N2-vHVzU9BeuV8q+QJjwh5bg77FEZg@mail.gmail.com>
	<CANEZrP0huBWqgvQik9Yc26Tu4CwR0VSXcfC+qfzsZqvoU4VJGA@mail.gmail.com>
	<20140113133746.GI38964@giles.gnomon.org.uk>
	<20140113195319.GK38964@giles.gnomon.org.uk>
Message-ID: <CANEZrP2NYE5_9G0Qar7Z4mzSzJYjVCxuBJRbZdXP9rauW=cD0g@mail.gmail.com>

>
> On further reflection, I'm not sure I understand this use case of the
> payment protocol.  Since a PaymentRequest currently contains the
> Outputs that specify the addresses to send to, reusing a
> PaymentRequest like this without using stealth addresses implies
> address reuse.


Yes indeed ...... which is why we're talking about extending the protocol
(in a future version! the first version isn't even out yet!).
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140113/21032b84/attachment.html>

From etotheipi at gmail.com  Mon Jan 13 19:59:08 2014
From: etotheipi at gmail.com (Alan Reiner)
Date: Mon, 13 Jan 2014 14:59:08 -0500
Subject: [Bitcoin-development] Stealth Addresses
In-Reply-To: <CANAnSg30V01B_3LCJ09sTwcsYa4_WOg3sKd-=p6COZS6w0b-uA@mail.gmail.com>
References: <20140106120338.GA14918@savin>	<op.w9c5o7vgyldrnw@laptop-air.hsd1.ca.comcast.net>	<20140110102037.GB25749@savin>	<op.w9kkxcityldrnw@laptop-air.hsd1.ca.comcast.net>	<CABsx9T2G=yqSUGr0+Ju5-z9P++uS20AwLC+c3DnFMHtcQjQK6w@mail.gmail.com>	<CAAS2fgTz0TaGhym_35V3N2-vHVzU9BeuV8q+QJjwh5bg77FEZg@mail.gmail.com>	<20140113194049.GJ38964@giles.gnomon.org.uk>
	<CANAnSg30V01B_3LCJ09sTwcsYa4_WOg3sKd-=p6COZS6w0b-uA@mail.gmail.com>
Message-ID: <52D4458C.6010909@gmail.com>

How is this different from the proposal I have made?

You distribute the root public key (but not chaincode!) of a BIP32
branch.  You can put your root key on a business card if you want.  Then
when someone wants to pay you, you simply give them the multiplier and
root key (they already have the root key, but should verify).  The
multiplier does not reveal the chaincode, thus keeping it private, but
it does allow them to confirm that the final address they are paying is
derived from that root key they know belongs to you ("Please pay address
X; oh btw, X=rootKey*mult").

You can /choose/ to reveal that a given payment address is linked to
your root key without any compromise of privacy.  Or you can choose to
ignore it and just give them a bare address the old way and still
maintain privacy.  What advantages does "stealth addresses" have over
this scheme?  You could extend it using some kind of deterministic
sub-branching and/or ECDH to create multiple payment addresses without
querying the payee. 

I had planned to implement this system and push for people to accept it
because I don't see any downsides to it.  It can easily be integrated
into a WoT (with signed root keys), or CA system piggybacking on SSL.

-Alan


On 01/13/2014 02:44 PM, Drak wrote:
> On 13 January 2014 19:40, Roy Badami <roy at gnomon.org.uk
> <mailto:roy at gnomon.org.uk>> wrote:
>
>     At the moment, I can give them a business card with a Bitcoin address.
>     Being able to give out a business card with a stealth address would be
>     a major advance.
>
>
> My thoughts exactly.
>
> Drak 
>
>
> ------------------------------------------------------------------------------
> CenturyLink Cloud: The Leader in Enterprise Cloud Services.
> Learn Why More Businesses Are Choosing CenturyLink Cloud For
> Critical Workloads, Development Environments & Everything In Between.
> Get a Quote or Start a Free Trial Today. 
> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk
>
>
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140113/85d58fe9/attachment.html>

From roy at gnomon.org.uk  Mon Jan 13 20:01:05 2014
From: roy at gnomon.org.uk (Roy Badami)
Date: Mon, 13 Jan 2014 20:01:05 +0000
Subject: [Bitcoin-development] Stealth Addresses
In-Reply-To: <CANEZrP2NYE5_9G0Qar7Z4mzSzJYjVCxuBJRbZdXP9rauW=cD0g@mail.gmail.com>
References: <20140106120338.GA14918@savin>
	<op.w9c5o7vgyldrnw@laptop-air.hsd1.ca.comcast.net>
	<20140110102037.GB25749@savin>
	<op.w9kkxcityldrnw@laptop-air.hsd1.ca.comcast.net>
	<CABsx9T2G=yqSUGr0+Ju5-z9P++uS20AwLC+c3DnFMHtcQjQK6w@mail.gmail.com>
	<CAAS2fgTz0TaGhym_35V3N2-vHVzU9BeuV8q+QJjwh5bg77FEZg@mail.gmail.com>
	<CANEZrP0huBWqgvQik9Yc26Tu4CwR0VSXcfC+qfzsZqvoU4VJGA@mail.gmail.com>
	<20140113133746.GI38964@giles.gnomon.org.uk>
	<20140113195319.GK38964@giles.gnomon.org.uk>
	<CANEZrP2NYE5_9G0Qar7Z4mzSzJYjVCxuBJRbZdXP9rauW=cD0g@mail.gmail.com>
Message-ID: <20140113200104.GL38964@giles.gnomon.org.uk>

rOn Mon, Jan 13, 2014 at 08:57:33PM +0100, Mike Hearn wrote:
> >
> > On further reflection, I'm not sure I understand this use case of the
> > payment protocol.  Since a PaymentRequest currently contains the
> > Outputs that specify the addresses to send to, reusing a
> > PaymentRequest like this without using stealth addresses implies
> > address reuse.
> 
> 
> Yes indeed ...... which is why we're talking about extending the protocol
> (in a future version! the first version isn't even out yet!).

Yes, sorry, I miscontrued the thread here and now see that your
message was exactly talking about using stealth addresses within the
payment protocol.

Sorry for the confusion.

roy




From gmaxwell at gmail.com  Mon Jan 13 20:10:56 2014
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Mon, 13 Jan 2014 12:10:56 -0800
Subject: [Bitcoin-development] Stealth Addresses
In-Reply-To: <52D4458C.6010909@gmail.com>
References: <20140106120338.GA14918@savin>
	<op.w9c5o7vgyldrnw@laptop-air.hsd1.ca.comcast.net>
	<20140110102037.GB25749@savin>
	<op.w9kkxcityldrnw@laptop-air.hsd1.ca.comcast.net>
	<CABsx9T2G=yqSUGr0+Ju5-z9P++uS20AwLC+c3DnFMHtcQjQK6w@mail.gmail.com>
	<CAAS2fgTz0TaGhym_35V3N2-vHVzU9BeuV8q+QJjwh5bg77FEZg@mail.gmail.com>
	<20140113194049.GJ38964@giles.gnomon.org.uk>
	<CANAnSg30V01B_3LCJ09sTwcsYa4_WOg3sKd-=p6COZS6w0b-uA@mail.gmail.com>
	<52D4458C.6010909@gmail.com>
Message-ID: <CAAS2fgTzVWUF_B_-1jkRs3WZ8Um_CcHeH7uFU0eLncgEqQ01HQ@mail.gmail.com>

On Mon, Jan 13, 2014 at 11:59 AM, Alan Reiner <etotheipi at gmail.com> wrote:
> Then when someone
> wants to pay you, you simply give them the multiplier and root key (they
> already have the root key, but should verify).
[...]
> What
> advantages does "stealth addresses" have over this scheme?  You could extend
> it using some kind of deterministic sub-branching and/or ECDH to create
> multiple payment addresses without querying the payee.

The stealth address stuff is the ECDH to create multiple payment
addresses without querying the payee.


Uh while I'm responding again, what I'd discussed with Peter Todd in
IRC used two EC points in the stealth address. One for the payment and
one for the ECDH.  The reason to use two is that it makes delegating
detection possible and so you don't have to have you spending keys
online to even detect these payments.  Why'd that get dropped?

I don't think this is a good idea if you have to constantly keep your
spending key(s) online even to detect payments, even with the limited
use-cases envisioned.



From roy at gnomon.org.uk  Mon Jan 13 20:11:20 2014
From: roy at gnomon.org.uk (Roy Badami)
Date: Mon, 13 Jan 2014 20:11:20 +0000
Subject: [Bitcoin-development] Stealth Addresses
In-Reply-To: <CANEZrP1KAVhi_-cxCYe0rR9LUSYJ8MyW8=6eSJZ65FeY5ZJNuQ@mail.gmail.com>
References: <20140106120338.GA14918@savin>
	<op.w9c5o7vgyldrnw@laptop-air.hsd1.ca.comcast.net>
	<20140110102037.GB25749@savin>
	<op.w9kkxcityldrnw@laptop-air.hsd1.ca.comcast.net>
	<CABsx9T2G=yqSUGr0+Ju5-z9P++uS20AwLC+c3DnFMHtcQjQK6w@mail.gmail.com>
	<CAAS2fgTz0TaGhym_35V3N2-vHVzU9BeuV8q+QJjwh5bg77FEZg@mail.gmail.com>
	<CANEZrP0huBWqgvQik9Yc26Tu4CwR0VSXcfC+qfzsZqvoU4VJGA@mail.gmail.com>
	<20140113133746.GI38964@giles.gnomon.org.uk>
	<CANEZrP1KAVhi_-cxCYe0rR9LUSYJ8MyW8=6eSJZ65FeY5ZJNuQ@mail.gmail.com>
Message-ID: <20140113201120.GM38964@giles.gnomon.org.uk>

On Mon, Jan 13, 2014 at 04:58:01PM +0100, Mike Hearn wrote:
> Signing a payment request for an individual is easy, anyway, depending on
> the kind of ID you want. If you want to sign with an email address, just go
> here with a browser like Chrome/Safari/IE that uses the system keystore:
> 
>    http://www.comodo.com/home/email-security/free-email-certificate.php
> 

Ok, cool, I wasn't aware of such services, and I can certainly see
they could be useful.  But it's not that great for the business card
scenario.

As far as I can see, using it in that scenario would have to rely on
the payer scanning the QR code on the business card, and then check
that the email address displayed by their wallet matched the email
address printed on the business card.

roy



From pete at petertodd.org  Mon Jan 13 20:14:08 2014
From: pete at petertodd.org (Peter Todd)
Date: Mon, 13 Jan 2014 15:14:08 -0500
Subject: [Bitcoin-development] Stealth Addresses
In-Reply-To: <52D4458C.6010909@gmail.com>
References: <20140106120338.GA14918@savin>
	<op.w9c5o7vgyldrnw@laptop-air.hsd1.ca.comcast.net>
	<20140110102037.GB25749@savin>
	<op.w9kkxcityldrnw@laptop-air.hsd1.ca.comcast.net>
	<CABsx9T2G=yqSUGr0+Ju5-z9P++uS20AwLC+c3DnFMHtcQjQK6w@mail.gmail.com>
	<CAAS2fgTz0TaGhym_35V3N2-vHVzU9BeuV8q+QJjwh5bg77FEZg@mail.gmail.com>
	<20140113194049.GJ38964@giles.gnomon.org.uk>
	<CANAnSg30V01B_3LCJ09sTwcsYa4_WOg3sKd-=p6COZS6w0b-uA@mail.gmail.com>
	<52D4458C.6010909@gmail.com>
Message-ID: <20140113201407.GB7941@petertodd.org>

On Mon, Jan 13, 2014 at 02:59:08PM -0500, Alan Reiner wrote:
> How is this different from the proposal I have made?
> 
> You distribute the root public key (but not chaincode!) of a BIP32
> branch.  You can put your root key on a business card if you want.  Then
> when someone wants to pay you, you simply give them the multiplier and
> root key (they already have the root key, but should verify).  The
> multiplier does not reveal the chaincode, thus keeping it private, but
> it does allow them to confirm that the final address they are paying is
> derived from that root key they know belongs to you ("Please pay address
> X; oh btw, X=rootKey*mult").
> 
> You can /choose/ to reveal that a given payment address is linked to
> your root key without any compromise of privacy.  Or you can choose to
> ignore it and just give them a bare address the old way and still
> maintain privacy.  What advantages does "stealth addresses" have over
> this scheme?  You could extend it using some kind of deterministic
> sub-branching and/or ECDH to create multiple payment addresses without
> querying the payee. 

Basically stealth addresses *are* your scheme, using the blockchain as a
low or even no overhead communication channel for the payor to give the
payee that multiplier without bidirectional communication.

In the business card example I can't easily take your business card and
just send you some money without that transaction being linked to public
information. (your business card)

> I had planned to implement this system and push for people to accept it
> because I don't see any downsides to it.  It can easily be integrated
> into a WoT (with signed root keys), or CA system piggybacking on SSL.

WoT is a perfect example of the problem: if you put BIP32 branch payment
info into my OpenPGP key I can't pay you securely and reliably without
making the transaction public. The best I can do is pick a nonce and pay
X=rootKey*nonce, communicating to you the nonce later - this isn't
reliable because if I or you lose the nonce the funds are lost.

With stealth addresses the user experience can be as simple as you
telling me on the phone "hey! send me that 0.234 BTC you owe me!", me
clicking on "Send to Alan Reiner (verified by PGP)" (perhaps again on my
off-line second factor device for a multi-sig wallet) and tellling you
"OK, sent".

Even if your phone has been wiretapped, the attacker still didn't learn
exactly what transaction was actually used to make the payment - a big
advantage over per-tx nonce stuff.

-- 
'peter'[:-1]@petertodd.org
00000000000000023d5a8bbe131414328a6c50a2741933ba03775afd3c3db395
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 490 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140113/a4b83e82/attachment.sig>

From pete at petertodd.org  Mon Jan 13 20:15:10 2014
From: pete at petertodd.org (Peter Todd)
Date: Mon, 13 Jan 2014 15:15:10 -0500
Subject: [Bitcoin-development] Stealth Addresses
In-Reply-To: <CAAS2fgTzVWUF_B_-1jkRs3WZ8Um_CcHeH7uFU0eLncgEqQ01HQ@mail.gmail.com>
References: <20140106120338.GA14918@savin>
	<op.w9c5o7vgyldrnw@laptop-air.hsd1.ca.comcast.net>
	<20140110102037.GB25749@savin>
	<op.w9kkxcityldrnw@laptop-air.hsd1.ca.comcast.net>
	<CABsx9T2G=yqSUGr0+Ju5-z9P++uS20AwLC+c3DnFMHtcQjQK6w@mail.gmail.com>
	<CAAS2fgTz0TaGhym_35V3N2-vHVzU9BeuV8q+QJjwh5bg77FEZg@mail.gmail.com>
	<20140113194049.GJ38964@giles.gnomon.org.uk>
	<CANAnSg30V01B_3LCJ09sTwcsYa4_WOg3sKd-=p6COZS6w0b-uA@mail.gmail.com>
	<52D4458C.6010909@gmail.com>
	<CAAS2fgTzVWUF_B_-1jkRs3WZ8Um_CcHeH7uFU0eLncgEqQ01HQ@mail.gmail.com>
Message-ID: <20140113201509.GC7941@petertodd.org>

On Mon, Jan 13, 2014 at 12:10:56PM -0800, Gregory Maxwell wrote:
> Uh while I'm responding again, what I'd discussed with Peter Todd in
> IRC used two EC points in the stealth address. One for the payment and
> one for the ECDH.  The reason to use two is that it makes delegating
> detection possible and so you don't have to have you spending keys
> online to even detect these payments.  Why'd that get dropped?

I mentioned it again in another email; I just forgot to include it in my
final write-up.

-- 
'peter'[:-1]@petertodd.org
00000000000000023d5a8bbe131414328a6c50a2741933ba03775afd3c3db395
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 490 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140113/276bfc39/attachment.sig>

From etotheipi at gmail.com  Mon Jan 13 20:41:42 2014
From: etotheipi at gmail.com (Alan Reiner)
Date: Mon, 13 Jan 2014 15:41:42 -0500
Subject: [Bitcoin-development] Stealth Addresses
In-Reply-To: <20140113201407.GB7941@petertodd.org>
References: <20140106120338.GA14918@savin>
	<op.w9c5o7vgyldrnw@laptop-air.hsd1.ca.comcast.net>
	<20140110102037.GB25749@savin>
	<op.w9kkxcityldrnw@laptop-air.hsd1.ca.comcast.net>
	<CABsx9T2G=yqSUGr0+Ju5-z9P++uS20AwLC+c3DnFMHtcQjQK6w@mail.gmail.com>
	<CAAS2fgTz0TaGhym_35V3N2-vHVzU9BeuV8q+QJjwh5bg77FEZg@mail.gmail.com>
	<20140113194049.GJ38964@giles.gnomon.org.uk>
	<CANAnSg30V01B_3LCJ09sTwcsYa4_WOg3sKd-=p6COZS6w0b-uA@mail.gmail.com>
	<52D4458C.6010909@gmail.com> <20140113201407.GB7941@petertodd.org>
Message-ID: <52D44F86.1040407@gmail.com>


On 01/13/2014 03:14 PM, Peter Todd wrote:
> On Mon, Jan 13, 2014 at 02:59:08PM -0500, Alan Reiner wrote:
>> How is this different from the proposal I have made?
>>
>> You distribute the root public key (but not chaincode!) of a BIP32
>> branch.  You can put your root key on a business card if you want.  Then
>> when someone wants to pay you, you simply give them the multiplier and
>> root key (they already have the root key, but should verify).  The
>> multiplier does not reveal the chaincode, thus keeping it private, but
>> it does allow them to confirm that the final address they are paying is
>> derived from that root key they know belongs to you ("Please pay address
>> X; oh btw, X=rootKey*mult").
>>
>> You can /choose/ to reveal that a given payment address is linked to
>> your root key without any compromise of privacy.  Or you can choose to
>> ignore it and just give them a bare address the old way and still
>> maintain privacy.  What advantages does "stealth addresses" have over
>> this scheme?  You could extend it using some kind of deterministic
>> sub-branching and/or ECDH to create multiple payment addresses without
>> querying the payee.
>
> Basically stealth addresses *are* your scheme, using the blockchain as a
> low or even no overhead communication channel for the payor to give the
> payee that multiplier without bidirectional communication.
>
> In the business card example I can't easily take your business card and
> just send you some money without that transaction being linked to public
> information. (your business card)

It's not public.  When I say "please pay me" I also say "use this
multiplier".  The multiplier isn't published, and it's not publicly
discoverable without my wallet (or access to my email).  The address
remains private between you and me.  As you said, it could be
discoverable if the email is discoverable, but I'm not seeing how how
critical that really is.

There's a lot of complexity around this constraint (possibly involving
new/secondary private keys, extra outputs, relying on change outputs,
and/or using 3rd parties to help look for transactions).  I'm not
convinced that what is being gained is really worth that extra complexity.

By contrast, what I proposed, that does require sending sending the
payer a multiplier once, is easy to implement in any BIP 32 wallet,
doesn't require any special address formats, and achieves 98% of the
same benefits without any special computation.   I guess I'm just not
convinced that it's really necessary for people to be able to send
others payments without contacting them (and/or hiding the evidence a
payment was made even if they communications were discovered).

-Alan



-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140113/d7ebb30c/attachment.html>

From gmaxwell at gmail.com  Mon Jan 13 20:47:21 2014
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Mon, 13 Jan 2014 12:47:21 -0800
Subject: [Bitcoin-development] Stealth Addresses
In-Reply-To: <52D44F86.1040407@gmail.com>
References: <20140106120338.GA14918@savin>
	<op.w9c5o7vgyldrnw@laptop-air.hsd1.ca.comcast.net>
	<20140110102037.GB25749@savin>
	<op.w9kkxcityldrnw@laptop-air.hsd1.ca.comcast.net>
	<CABsx9T2G=yqSUGr0+Ju5-z9P++uS20AwLC+c3DnFMHtcQjQK6w@mail.gmail.com>
	<CAAS2fgTz0TaGhym_35V3N2-vHVzU9BeuV8q+QJjwh5bg77FEZg@mail.gmail.com>
	<20140113194049.GJ38964@giles.gnomon.org.uk>
	<CANAnSg30V01B_3LCJ09sTwcsYa4_WOg3sKd-=p6COZS6w0b-uA@mail.gmail.com>
	<52D4458C.6010909@gmail.com> <20140113201407.GB7941@petertodd.org>
	<52D44F86.1040407@gmail.com>
Message-ID: <CAAS2fgTga=AP3P+S37Sq3FahndV1CiAPw+xy2y5kpgL3=bQZjw@mail.gmail.com>

On Mon, Jan 13, 2014 at 12:41 PM, Alan Reiner <etotheipi at gmail.com> wrote:
> It's not public.  When I say "please pay me" I also say "use this
> multiplier".  The multiplier isn't published, and it's not publicly
> discoverable without my wallet (or access to my email).

If you have enough of a communications channel to do that you can just
give the person the finished address (authentication aside).

The idea here is to cover the cases where the communication is one way
or nearly so.  Consider a donation address on a fully static webpage,
in a forum signature or email address, or on a billboard. ... or where
users-being-users mean that the user isn't going to start up their
wallet software to compute a new multiplier every time they give out
an address no matter how much we whine at them.



From roy at gnomon.org.uk  Mon Jan 13 21:02:18 2014
From: roy at gnomon.org.uk (Roy Badami)
Date: Mon, 13 Jan 2014 21:02:18 +0000
Subject: [Bitcoin-development] Stealth Addresses
In-Reply-To: <52D44F86.1040407@gmail.com>
References: <op.w9c5o7vgyldrnw@laptop-air.hsd1.ca.comcast.net>
	<20140110102037.GB25749@savin>
	<op.w9kkxcityldrnw@laptop-air.hsd1.ca.comcast.net>
	<CABsx9T2G=yqSUGr0+Ju5-z9P++uS20AwLC+c3DnFMHtcQjQK6w@mail.gmail.com>
	<CAAS2fgTz0TaGhym_35V3N2-vHVzU9BeuV8q+QJjwh5bg77FEZg@mail.gmail.com>
	<20140113194049.GJ38964@giles.gnomon.org.uk>
	<CANAnSg30V01B_3LCJ09sTwcsYa4_WOg3sKd-=p6COZS6w0b-uA@mail.gmail.com>
	<52D4458C.6010909@gmail.com> <20140113201407.GB7941@petertodd.org>
	<52D44F86.1040407@gmail.com>
Message-ID: <20140113210217.GO38964@giles.gnomon.org.uk>

> It's not public.  When I say "please pay me" I also say "use this
> multiplier".

Sending a "please pay me" message is really great for business
transactions.

But I think the use case that Peter Todd mentions is actually *the*
most important currently under-addresesd use case:

> With stealth addresses the user experience can be as simple as you
> telling me on the phone "hey! send me that 0.234 BTC you owe me!",
> me clicking on "Send to Alan Reiner (verified by PGP)" (perhaps
> again on my off-line second factor device for a multi-sig wallet)
> and tellling you "OK, sent".

Lots of work is being done on handling consumer-to-merchant
transactions.  BIP 70 does a good job of tackling the online purchase
case, and the work that Andreas Schildbach is doing with Bluetooth and
NFC will improve the options for a payer in a physical PoS transaction
who might not have Internet connectivity on their smartphone.

But relatively little work (that I know of) is being done on
non-transactional personal payments - that is, being able to pay money
to friends and other people that you have a face-to-face relationship
with.

What I want... no need... is to be able to open my wallet, select a
friend from my address book, and transfer the $10 I owe them from the
bar last night.

I don't care - within reason - what process is involved in getting my
friend set up in my address book.  That may well requires two way
communication (e.g. over NFC).  But once it's set up, I should be able
to just select the payee from the address book and send them some
funds.  Anything else is just too complciated.

I don't know if stealth addresses are the best solution to address
this use case, but AFAIK the only current solution to this use case is
to store a long-lived Bitcoin address in the addresss book.

roy




From etotheipi at gmail.com  Mon Jan 13 21:15:01 2014
From: etotheipi at gmail.com (Alan Reiner)
Date: Mon, 13 Jan 2014 16:15:01 -0500
Subject: [Bitcoin-development] Stealth Addresses
In-Reply-To: <20140113210217.GO38964@giles.gnomon.org.uk>
References: <op.w9c5o7vgyldrnw@laptop-air.hsd1.ca.comcast.net>
	<20140110102037.GB25749@savin>
	<op.w9kkxcityldrnw@laptop-air.hsd1.ca.comcast.net>
	<CABsx9T2G=yqSUGr0+Ju5-z9P++uS20AwLC+c3DnFMHtcQjQK6w@mail.gmail.com>
	<CAAS2fgTz0TaGhym_35V3N2-vHVzU9BeuV8q+QJjwh5bg77FEZg@mail.gmail.com>
	<20140113194049.GJ38964@giles.gnomon.org.uk>
	<CANAnSg30V01B_3LCJ09sTwcsYa4_WOg3sKd-=p6COZS6w0b-uA@mail.gmail.com>
	<52D4458C.6010909@gmail.com> <20140113201407.GB7941@petertodd.org>
	<52D44F86.1040407@gmail.com>
	<20140113210217.GO38964@giles.gnomon.org.uk>
Message-ID: <52D45755.60402@gmail.com>

On 01/13/2014 04:02 PM, Roy Badami wrote:
>> It's not public.  When I say "please pay me" I also say "use this
>> multiplier".
> Sending a "please pay me" message is really great for business
> transactions.
>
> But I think the use case that Peter Todd mentions is actually *the*
> most important currently under-addresesd use case:
>
>> With stealth addresses the user experience can be as simple as you
>> telling me on the phone "hey! send me that 0.234 BTC you owe me!",
>> me clicking on "Send to Alan Reiner (verified by PGP)" (perhaps
>> again on my off-line second factor device for a multi-sig wallet)
>> and tellling you "OK, sent".
> Lots of work is being done on handling consumer-to-merchant
> transactions.  BIP 70 does a good job of tackling the online purchase
> case, and the work that Andreas Schildbach is doing with Bluetooth and
> NFC will improve the options for a payer in a physical PoS transaction
> who might not have Internet connectivity on their smartphone.
>
> But relatively little work (that I know of) is being done on
> non-transactional personal payments - that is, being able to pay money
> to friends and other people that you have a face-to-face relationship
> with.
>
> What I want... no need... is to be able to open my wallet, select a
> friend from my address book, and transfer the $10 I owe them from the
> bar last night.
>
> I don't care - within reason - what process is involved in getting my
> friend set up in my address book.  That may well requires two way
> communication (e.g. over NFC).  But once it's set up, I should be able
> to just select the payee from the address book and send them some
> funds.  Anything else is just too complciated.
>
> I don't know if stealth addresses are the best solution to address
> this use case, but AFAIK the only current solution to this use case is
> to store a long-lived Bitcoin address in the addresss book.
>
> roy
>

Fair enough.  I haven't spent much time thinking about that use case. 
Though, I question the feasibility of anything that requires O(N) EC
multiply operations/sec, where N is the total volume of transactions
moving over the network.  But I guess if the prefix is big enough, the
scanning operations will remain feasible forever.



From pete at petertodd.org  Mon Jan 13 21:27:52 2014
From: pete at petertodd.org (Peter Todd)
Date: Mon, 13 Jan 2014 16:27:52 -0500
Subject: [Bitcoin-development] Stealth Addresses
In-Reply-To: <52D45755.60402@gmail.com>
References: <op.w9kkxcityldrnw@laptop-air.hsd1.ca.comcast.net>
	<CABsx9T2G=yqSUGr0+Ju5-z9P++uS20AwLC+c3DnFMHtcQjQK6w@mail.gmail.com>
	<CAAS2fgTz0TaGhym_35V3N2-vHVzU9BeuV8q+QJjwh5bg77FEZg@mail.gmail.com>
	<20140113194049.GJ38964@giles.gnomon.org.uk>
	<CANAnSg30V01B_3LCJ09sTwcsYa4_WOg3sKd-=p6COZS6w0b-uA@mail.gmail.com>
	<52D4458C.6010909@gmail.com> <20140113201407.GB7941@petertodd.org>
	<52D44F86.1040407@gmail.com>
	<20140113210217.GO38964@giles.gnomon.org.uk>
	<52D45755.60402@gmail.com>
Message-ID: <20140113212752.GA9098@petertodd.org>

On Mon, Jan 13, 2014 at 04:15:01PM -0500, Alan Reiner wrote:
> > I don't know if stealth addresses are the best solution to address
> > this use case, but AFAIK the only current solution to this use case is
> > to store a long-lived Bitcoin address in the addresss book.
> >
> > roy
> >
> 
> Fair enough.  I haven't spent much time thinking about that use case. 
> Though, I question the feasibility of anything that requires O(N) EC
> multiply operations/sec, where N is the total volume of transactions
> moving over the network.  But I guess if the prefix is big enough, the
> scanning operations will remain feasible forever.

Well that's the thing: the cost to find all stealth-address-using
payments to you isn't O(n) transaction volume, it's O(n) anonymity set
size. I think we can make a pretty good argument that the anonymity set
people need is mostly fixed in size and has nothing to do with overall
tx volume, so really we've got O(1) scaling.

There is a catch however: if you need the prefix to be against
H(scriptPubKey) rather than scriptPubKey directly the sender needs to
grind the OP_RETURN output at 2^len(prefix) cost. Fortunately that
grinding can be done with hash operations rather than ECC - even if we
needed 32-bit prefixes eventually computing 32-bit hash collisions is
plausible, and more reasonable 8-bit is quite doable now.

-- 
'peter'[:-1]@petertodd.org
00000000000000013f56c73dbb82447ba01e303648109b2e7ea0adf6ca53a7ff
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 490 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140113/b70d93cc/attachment.sig>

From jeremy at taplink.co  Mon Jan 13 22:02:00 2014
From: jeremy at taplink.co (Jeremy Spilman)
Date: Mon, 13 Jan 2014 14:02:00 -0800
Subject: [Bitcoin-development] Stealth Addresses
In-Reply-To: <CAAS2fgTzVWUF_B_-1jkRs3WZ8Um_CcHeH7uFU0eLncgEqQ01HQ@mail.gmail.com>
References: <20140106120338.GA14918@savin>
	<op.w9c5o7vgyldrnw@laptop-air.hsd1.ca.comcast.net>
	<20140110102037.GB25749@savin>
	<op.w9kkxcityldrnw@laptop-air.hsd1.ca.comcast.net>
	<CABsx9T2G=yqSUGr0+Ju5-z9P++uS20AwLC+c3DnFMHtcQjQK6w@mail.gmail.com>
	<CAAS2fgTz0TaGhym_35V3N2-vHVzU9BeuV8q+QJjwh5bg77FEZg@mail.gmail.com>
	<20140113194049.GJ38964@giles.gnomon.org.uk>
	<CANAnSg30V01B_3LCJ09sTwcsYa4_WOg3sKd-=p6COZS6w0b-uA@mail.gmail.com>
	<52D4458C.6010909@gmail.com>
	<CAAS2fgTzVWUF_B_-1jkRs3WZ8Um_CcHeH7uFU0eLncgEqQ01HQ@mail.gmail.com>
Message-ID: <19AE1549-16E0-4119-8BE9-8F4DFD3381C1@taplink.co>


> Uh while I'm responding again, what I'd discussed with Peter Todd in
> IRC used two EC points in the stealth address. One for the payment and
> one for the ECDH.  The reason to use two is that it makes delegating
> detection possible and so you don't have to have you spending keys
> online to even detect these payments.  Why'd that get dropped?

I think this is exactly what I've implemented.

I decided to put both pubKeys in a 2-of-2 multisig, instead of keeping one of the pubKeys in the OP-RETURN, to prevent a malicious sender from triggering false positives on your online detection key when the funds are actually still fully controlled by the payer.

You can still have a false positive (only 1 of 2 keys actually yours) but the funds would be trapped so it's unlikely anyone would do it. 

Can you take a look at the Gist and TXs on TestNet I sent out, and see if that's in line with what you expected?

I would also greatly appreciate if you could review the discussion around doing two ECDH operations with a single ephemeral key.

Thanks!
--Jeremy





From andreas at schildbach.de  Mon Jan 13 22:24:58 2014
From: andreas at schildbach.de (Andreas Schildbach)
Date: Mon, 13 Jan 2014 23:24:58 +0100
Subject: [Bitcoin-development] Payment protocol and reliable Payment
	messages
In-Reply-To: <CAPg+sBji5sFWZ_mDVXKKwkyeGYDbLmvwau457nmntT_NgTT+Sw@mail.gmail.com>
References: <CAPg+sBhdgVQvumL_r9thLD5wm7UOJx=2DE+01-T58HHdimvpXw@mail.gmail.com>	<lb18l6$nu2$1@ger.gmane.org>
	<CAPg+sBji5sFWZ_mDVXKKwkyeGYDbLmvwau457nmntT_NgTT+Sw@mail.gmail.com>
Message-ID: <lb1p3d$3ef$1@ger.gmane.org>

Thanks for the explanation.

On 01/13/2014 06:56 PM, Pieter Wuille wrote:

>> As for you proposal, just be aware I'd like to use the payment protocol
>> for face to face payments as well. That meant payment request via NFC or
>> QR, payment message and payment confirmations via Bluetooth. I think it
>> can be done by putting a Bluetooth mac address into the payment_url.
> 
> I'm aware. What issues do you see?

Looks good so far. Just wanted to keep you aware (-:





From andreas at schildbach.de  Tue Jan 14 09:40:58 2014
From: andreas at schildbach.de (Andreas Schildbach)
Date: Tue, 14 Jan 2014 10:40:58 +0100
Subject: [Bitcoin-development] Payment protocol and reliable Payment
	messages
In-Reply-To: <CAPg+sBji5sFWZ_mDVXKKwkyeGYDbLmvwau457nmntT_NgTT+Sw@mail.gmail.com>
References: <CAPg+sBhdgVQvumL_r9thLD5wm7UOJx=2DE+01-T58HHdimvpXw@mail.gmail.com>	<lb18l6$nu2$1@ger.gmane.org>
	<CAPg+sBji5sFWZ_mDVXKKwkyeGYDbLmvwau457nmntT_NgTT+Sw@mail.gmail.com>
Message-ID: <lb30mu$jjh$1@ger.gmane.org>

On 01/13/2014 06:56 PM, Pieter Wuille wrote:

> I want to avoid the case where a transaction confirms, but the
> associated payment is not delivered. If there is a reasonable chance
> that this case occurs in normal operation, it means the payment
> transmission cannot be relied upon.

I was thinking about this some more. Generally I think you have a point.
However, there is one case I'm worried about.

Imagine you get a good offer (payment request) from a merchant. You
would like to accept that offer, however the merchant has changed his
mind. If you don't broadcast the payment to the blockchain, you won't
have a chance to accept and legally bind the offer. The merchant will
silently discard your payment messages.

At some point, you will involve a judge. If you can present the payment
request and the payment from the block chain, you're in a much better
position than if you just present a request but no confirmed payment.

I think in some cases you might want to broadcast your txn to the P2P
network, even if the payment messages get lost. What do you think?





From mike at plan99.net  Tue Jan 14 10:45:59 2014
From: mike at plan99.net (Mike Hearn)
Date: Tue, 14 Jan 2014 11:45:59 +0100
Subject: [Bitcoin-development] Payment protocol and reliable Payment
	messages
In-Reply-To: <lb30mu$jjh$1@ger.gmane.org>
References: <CAPg+sBhdgVQvumL_r9thLD5wm7UOJx=2DE+01-T58HHdimvpXw@mail.gmail.com>
	<lb18l6$nu2$1@ger.gmane.org>
	<CAPg+sBji5sFWZ_mDVXKKwkyeGYDbLmvwau457nmntT_NgTT+Sw@mail.gmail.com>
	<lb30mu$jjh$1@ger.gmane.org>
Message-ID: <CANEZrP3BeFMLtcThr=Gp5mudbtQeT_dHno1DGQzOg28YKBNkzA@mail.gmail.com>

>
> Imagine you get a good offer (payment request) from a merchant. You
> would like to accept that offer, however the merchant has changed his
> mind.


Usually if the merchant has not delivered, then at that point it's not a
problem and he is allowed to change his mind. It's only if they change
their mind *after* you pay that it's a problem, right?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140114/ad28d45b/attachment.html>

From andreas at schildbach.de  Tue Jan 14 11:01:08 2014
From: andreas at schildbach.de (Andreas Schildbach)
Date: Tue, 14 Jan 2014 12:01:08 +0100
Subject: [Bitcoin-development] Payment protocol and reliable Payment
	messages
In-Reply-To: <CANEZrP3BeFMLtcThr=Gp5mudbtQeT_dHno1DGQzOg28YKBNkzA@mail.gmail.com>
References: <CAPg+sBhdgVQvumL_r9thLD5wm7UOJx=2DE+01-T58HHdimvpXw@mail.gmail.com>	<lb18l6$nu2$1@ger.gmane.org>	<CAPg+sBji5sFWZ_mDVXKKwkyeGYDbLmvwau457nmntT_NgTT+Sw@mail.gmail.com>	<lb30mu$jjh$1@ger.gmane.org>
	<CANEZrP3BeFMLtcThr=Gp5mudbtQeT_dHno1DGQzOg28YKBNkzA@mail.gmail.com>
Message-ID: <lb35d9$amj$1@ger.gmane.org>

On 01/14/2014 11:45 AM, Mike Hearn wrote:
>     Imagine you get a good offer (payment request) from a merchant. You
>     would like to accept that offer, however the merchant has changed his
>     mind.
> 
> 
> Usually if the merchant has not delivered, then at that point it's not a
> problem and he is allowed to change his mind. It's only if they change
> their mind *after* you pay that it's a problem, right?

It was my understanding of the spec that a payment request is legally
binding one side for the specified amount of time.

Basically I offer you to sell you these 10 eggs (described in the memo)
for this amount if you accept until this time. I have even signed this
so you can know its me who made you the offer. If you accept (by
paying), the contract is valid and there should be nothing I can do
about it (except for extreme cases which are covered by law already).

Actually what good is the payment request if its not binding?

Why do we have an expiry time in the message?





From adam at cypherspace.org  Tue Jan 14 11:41:34 2014
From: adam at cypherspace.org (Adam Back)
Date: Tue, 14 Jan 2014 12:41:34 +0100
Subject: [Bitcoin-development] Payment protocol and reliable Payment
 messages
In-Reply-To: <CANEZrP3BeFMLtcThr=Gp5mudbtQeT_dHno1DGQzOg28YKBNkzA@mail.gmail.com>
References: <CAPg+sBhdgVQvumL_r9thLD5wm7UOJx=2DE+01-T58HHdimvpXw@mail.gmail.com>
	<lb18l6$nu2$1@ger.gmane.org>
	<CAPg+sBji5sFWZ_mDVXKKwkyeGYDbLmvwau457nmntT_NgTT+Sw@mail.gmail.com>
	<lb30mu$jjh$1@ger.gmane.org>
	<CANEZrP3BeFMLtcThr=Gp5mudbtQeT_dHno1DGQzOg28YKBNkzA@mail.gmail.com>
Message-ID: <20140114114134.GA9838@netbook.cypherspace.org>

He's probably thinking of fair advertising rules.  There are regulations
motivated by consumer protection/advertising standards (prevents merchant
listing attractive prices in media, and then when consumer goes to pay the
merchant says "oh actually that doesnt include X and Y, and the minimum
price is 10% more" after the user has already partly committed to the
purchase.  Ryanair, an airline near and dear to Europeans ;) is infamous for
aggressive use of such tactics.  Or worse systematic abuse of "sorry that
was a pricing mistake".

In trading situations its even more important, you're facing a dynamic
price, and revocable bids after acceptance but before payment allow system
gaming.  There were court cases about such things and trading systems gamed. 
So I think this is the use case to consider.  Payment request is an offer,
payment message is an acceptance, transaction broadcast is settlment.  After
acceptance the asker must not be allowed to retract ther ask.

Going back to Pieter's comment it seems there are two approaches: i) send
payment message to merchant, merchant broadcasts tx to network to claim
funds; ii) user broadcasts tx, and sends payment message to merchant.

In case i) the user is relying on the merchant in terms of retraction, for
many use-cases that doesnt matter, or consumer law says they can do that in
some places.  Though transferable proof the merchant is systematically
retracting advertised offers could be indirectly useful as it maybe evidence
of unfair trading, which can result in censure for the merchant!

In case ii) I think Andreas has a point.  Maybe the way to do that is to
also bind the transaction to the payment message.  Eg include the hash of
the payment message in the tx (circular ref may have to use multisig
approach?), or as Timo Hanke's paper where the offer/acceptance contact hash
is bound to the address (ie the address paid is Q'=H(Q+H(contract)G).

Adam

On Tue, Jan 14, 2014 at 11:45:59AM +0100, Mike Hearn wrote:
>     Imagine you get a good offer (payment request) from a merchant. You
>     would like to accept that offer, however the merchant has changed
>     his
>     mind.
>
>   Usually if the merchant has not delivered, then at that point it's not
>   a problem and he is allowed to change his mind. It's only if they
>   change their mind *after* you pay that it's a problem, right?

>------------------------------------------------------------------------------
>CenturyLink Cloud: The Leader in Enterprise Cloud Services.
>Learn Why More Businesses Are Choosing CenturyLink Cloud For
>Critical Workloads, Development Environments & Everything In Between.
>Get a Quote or Start a Free Trial Today.
>http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk

>_______________________________________________
>Bitcoin-development mailing list
>Bitcoin-development at lists.sourceforge.net
>https://lists.sourceforge.net/lists/listinfo/bitcoin-development




From pete at petertodd.org  Tue Jan 14 12:10:51 2014
From: pete at petertodd.org (Peter Todd)
Date: Tue, 14 Jan 2014 07:10:51 -0500
Subject: [Bitcoin-development] Stealth Addresses
In-Reply-To: <op.w9ne31oqyldrnw@laptop-air.hsd1.ca.comcast.net>
References: <CAAS2fgTz0TaGhym_35V3N2-vHVzU9BeuV8q+QJjwh5bg77FEZg@mail.gmail.com>
	<20140113194049.GJ38964@giles.gnomon.org.uk>
	<CANAnSg30V01B_3LCJ09sTwcsYa4_WOg3sKd-=p6COZS6w0b-uA@mail.gmail.com>
	<52D4458C.6010909@gmail.com> <20140113201407.GB7941@petertodd.org>
	<52D44F86.1040407@gmail.com>
	<20140113210217.GO38964@giles.gnomon.org.uk>
	<52D45755.60402@gmail.com> <20140113212752.GA9098@petertodd.org>
	<op.w9ne31oqyldrnw@laptop-air.hsd1.ca.comcast.net>
Message-ID: <20140114121051.GA2583@savin>

On Mon, Jan 13, 2014 at 03:20:15PM -0800, Jeremy Spilman wrote:
> On Mon, 13 Jan 2014 13:27:52 -0800, Peter Todd <pete at petertodd.org> wrote:
> 
> >There is a catch however: if you need the prefix to be against
> >H(scriptPubKey) rather than scriptPubKey directly the sender needs to
> >grind the OP_RETURN output at 2^len(prefix) cost. Fortunately that
> >grinding can be done with hash operations rather than ECC - even if we
> >needed 32-bit prefixes eventually computing 32-bit hash collisions is
> >plausible, and more reasonable 8-bit is quite doable now.
> 
> I'll be updating my test code to support a prefix on the OP_RETURN
> TxOut, for either where we expect to have an index on scriptPubKey,
> or where we have an index on H(scriptPubKey) and have to grind with
> a nonce.
> 
> Where do we say what prefix we are targeting, or how many bits
> should match with Q? I assume the only place to communicate this,
> dare I say it, is in the address string.

That's exactly where you need to put it.

Incidentally a prefix nonce, either direct or grind-style, is a bit of a
privacy leak by suggestion how long the prefix was in the original
stealth address. Code should be written such that grinding routines
start at a random nonce, and nonces of any length are accepted. The
easiest way to do that is to just stick the grind nonce at the end after
the 33 bytes of pubkey.

I dunno yet what hashing algorithm to target for grinding. I'd assume
SHA256^2 on the basis that it's identical to what the merkle tree uses
and thus will have the same security properties in a committed index,
but I can see people pushing for the shorter 20-byte HASH160 too.

> Also, for symmetric encryption of P in the OP_RETURN TxOut using a
> key H(Q), what cipher did you have in mind? Since P is ephemeral and
> random, I don't follow, why does encrypting it 'gives a slightly
> larger anonymity set'?

The idea was to make the anonymity set include other uses of OP_RETURN
txouts, however Gregory Maxwell pointed out that it'd easily lead to a
much reduced anonymity set because someone could trial decrypt the
encrypted P and check if it was a valid pubkey. If you encrypted the
full 33 bytes that'd be a total disaster - only 1/256 candidate stealth
keys would work. There are ways to do it right, but it's tricky and
there may be other attacks I don't know about, so I'm inclined to just
drop that idea for now unless a professional cryptographer wants to take
it on.

> You made an interesting point in the original post that payer should
> hold onto their ephemeral privKey 'e' corresponding to pubKey P if
> they need to later prove the payment was actually sent to Q.

Yup. You can even use that pubkey to disambiguate/prove payments with
Timo Hanke's pay-to-contract ideas by deriving it from some root and a
contract hash.

Conversely Amir Taaki pointed out on the unsystem list that once a nonce
is agreed on, it can be used directly with BIP32 derivation so that
future payments don't have to use an OP_RETURN txout. Interesting idea,
although I worry that the statelessness advantage of stealth payments
gets lost if you do that. Probably best to look at that one after an
initial implementation happens and we get some experience with them in
the real world - adding that can be done in a backwards compatible
fashion.

> Finally, I hope you can take a look at the Gist and sample Test-Net
> TXs I sent out this morning. I just went back and re-read your
> original post, and compared to what I implemented there are some
> differences, I'd like to make sure you think it's on track.

Will do.

-- 
'peter'[:-1]@petertodd.org
0000000000000001420349f2276e53e5b087faea67c7c40aa12383c416067364
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 685 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140114/8419ac67/attachment.sig>

From adam at cypherspace.org  Tue Jan 14 13:18:38 2014
From: adam at cypherspace.org (Adam Back)
Date: Tue, 14 Jan 2014 14:18:38 +0100
Subject: [Bitcoin-development] Payment protocol and reliable Payment
 messages
In-Reply-To: <20140114114134.GA9838@netbook.cypherspace.org>
References: <CAPg+sBhdgVQvumL_r9thLD5wm7UOJx=2DE+01-T58HHdimvpXw@mail.gmail.com>
	<lb18l6$nu2$1@ger.gmane.org>
	<CAPg+sBji5sFWZ_mDVXKKwkyeGYDbLmvwau457nmntT_NgTT+Sw@mail.gmail.com>
	<lb30mu$jjh$1@ger.gmane.org>
	<CANEZrP3BeFMLtcThr=Gp5mudbtQeT_dHno1DGQzOg28YKBNkzA@mail.gmail.com>
	<20140114114134.GA9838@netbook.cypherspace.org>
Message-ID: <20140114131838.GA10516@netbook.cypherspace.org>

Maybe even pay to (address derived from) contract hash has a hole: it
assumes the merchant cashes the funds (or cashes then reimburses via the
refund address).  There is another rational (though abusive) move for the
merchant: let the buyers funds sit in limbo.  Then the buyer has the onus to
go into disupte, maybe the seller is anonymous, in another country, or the
cost of dispute resolution more than the value lost, and anyway its not very
smart-contract like.

It might be better if the buyer has time-stamped evidence of having sent the
funds to the merchant, and evidence of non-collection of funds by the
merchant (by omission from the block chain).

Adam



From pete at petertodd.org  Tue Jan 14 14:15:17 2014
From: pete at petertodd.org (Peter Todd)
Date: Tue, 14 Jan 2014 09:15:17 -0500
Subject: [Bitcoin-development] Stealth Addresses
In-Reply-To: <op.w9mbv6dcyldrnw@laptop-air.hsd1.ca.comcast.net>
References: <20140106120338.GA14918@savin>
	<op.w9c5o7vgyldrnw@laptop-air.hsd1.ca.comcast.net>
	<20140110102037.GB25749@savin>
	<op.w9kkxcityldrnw@laptop-air.hsd1.ca.comcast.net>
	<CANEZrP0Np_FGhw=m6OffijByzz9r4D2AA78jCkzh=NZh=xrbjQ@mail.gmail.com>
	<op.w9k6j4xryldrnw@laptop-air.hsd1.ca.comcast.net>
	<CANEZrP06EiiY+5hL05bxzdcFXS8V7S1KOiZj86a_ZP5EcoaMKA@mail.gmail.com>
	<op.w9mbv6dcyldrnw@laptop-air.hsd1.ca.comcast.net>
Message-ID: <20140114141517.GA29950@savin>

On Mon, Jan 13, 2014 at 01:13:08AM -0800, Jeremy Spilman wrote:
> It's a given this will be implemented for Payment Protocol. The question  
> is whether it's also usable outside of PP.

I think what stealth addresses is showing is that the concept of an
address being "instructions on how to generate a txout/tx that results
in me getting Bitcoins" is actually quite valuable; it and
BIP32-derivation addresses with chaincodes are pretty clear cases where
just replacing address with scriptPubKey isn't sufficient.

> I was kind of imagining that we could encourage people to replace all  
> their static address text that live on Github pages, and README.me, and  
> forum signatures, etc. with new 'href=bitcoin:xSTL...' URIs. Convention  
> could be to require only transporting xSTL addresses within a URI, even  
> going so far as to not support them copy/pasted. 101 characters is not  
> much longer (and sometimes shorter) than PaymentRequest URIs end up being.

Yeah, I don't see anything wrong with stealth addresses whatever length
they wind up being. It's a good intermediate step, and without them
people will just pass around unsigned payment requests and other stuff.

> I think there are ways to make stealth addresses easy enough to use that  
> people actually prefer using them for P2P payments which do not involve a  
> full-stack merchant. In that case, if it was a PaymentRequest it would  
> almost certainly not be signed, and would be more easily shared over email  
> or SMS as a URI than as a file attachment or, even worse, putting the  
> unsigned PR file up on a third-party server which probably won't do a good  
> job securing it.

At the DarkWallet hackathon we had discussed how to integrate stealth
addresses into OpenPGP keys as a new user id type for instance, and
similarly into x.509 certs.

The big advantage here is the identity of *who* you are paying is
important, not just "I got this signed payment request". Basically the
concept becomes "identity signed payment address" and the signature
binding the identity to the address is a one time and offline thing; an
issue with the payment protocol as it stands is that it encourages
signing keys to be kept online to issue payment requests. If you have a
scheme where the private keys that bound the identity to the address can
be kept offline you're much better off, because the attacker can only
create a fake payment request, they can't divert the funds to
themselves.

So with that in mind, I strongly suggest sticking with defining a
reasonable stealth address spec. But when you do, keep in mind that you
may want to upgrade it in the future, preferably in a backwards
compatible way. Also, it shouldn't be limited to exactly 2-of-2
CHECKMULTISIG, there's no reason why n and m can't be picked as needed.
Sure, it means the addresses are not fixed length, but for something
that is mostly an internal detail and only occasionally visible to
advanced users, I see no issues there.

Along those lines: what would a BIP32 chain code address look like? What
happens when you want to use that with a multisig-protected wallet?

> * PP Implementation Overview *
> 
> The basic PaymentRequest>PaymentDetails is expecting 'output' containing  
> one or more TxOuts with script and amount. I believe the general approach  
> is to put a fallback address into 'output' for backward compatibility, and  
> put Q and Q2 into an extension field.
> 
> So we add a new optional field to PaymentDetails which contains the one or  
> two PubKeys. Not sure if we want different protobuf tags, or if the  
> difference in length of the value makes it obvious enough which approach  
> is being used;
> 
>     optional bytes stealthOnePubKey = 1000
>     optional bytes stealthTwoPubKey = 1001

I think you're missing the bigger picture here, not least of which is
that backwards compatibility is a bit of a misnomer for an unreleased
standard. :)

Why put this into the PaymentDetails? That a stealth address is to be
used for the payment is a property of the outputs being requested, not
the payment itself. We're better off if that goes into the Output
message, and further more it suggests that the Output message shouldn't
contain raw scriptPubKey's but rather addresses. After all, IsStandard()
means we have to inspect the scriptPubKey to see if we can even pay to
what the sender is requesting.

Once you establish that it's addresses that Outputs specify, then it's
easy enough to make a stealth address type, or a BIP32-chain-code
address type, or whatever else comes up in the future.


> Also, ideally I think I would want multiple different stealth payments  
> within a single wallet to the same merchant / pubkeys to be identifiable  
> as such.

Agreed.

-- 
'peter'[:-1]@petertodd.org
00000000bda8ab55740699711a11572c4eec9dc9f714e4896559aac310a115ff
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 685 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140114/95b840b6/attachment.sig>

From pete at petertodd.org  Tue Jan 14 14:19:08 2014
From: pete at petertodd.org (Peter Todd)
Date: Tue, 14 Jan 2014 09:19:08 -0500
Subject: [Bitcoin-development] Stealth Addresses
In-Reply-To: <19AE1549-16E0-4119-8BE9-8F4DFD3381C1@taplink.co>
References: <op.w9c5o7vgyldrnw@laptop-air.hsd1.ca.comcast.net>
	<20140110102037.GB25749@savin>
	<op.w9kkxcityldrnw@laptop-air.hsd1.ca.comcast.net>
	<CABsx9T2G=yqSUGr0+Ju5-z9P++uS20AwLC+c3DnFMHtcQjQK6w@mail.gmail.com>
	<CAAS2fgTz0TaGhym_35V3N2-vHVzU9BeuV8q+QJjwh5bg77FEZg@mail.gmail.com>
	<20140113194049.GJ38964@giles.gnomon.org.uk>
	<CANAnSg30V01B_3LCJ09sTwcsYa4_WOg3sKd-=p6COZS6w0b-uA@mail.gmail.com>
	<52D4458C.6010909@gmail.com>
	<CAAS2fgTzVWUF_B_-1jkRs3WZ8Um_CcHeH7uFU0eLncgEqQ01HQ@mail.gmail.com>
	<19AE1549-16E0-4119-8BE9-8F4DFD3381C1@taplink.co>
Message-ID: <20140114141908.GB29950@savin>

On Mon, Jan 13, 2014 at 02:02:00PM -0800, Jeremy Spilman wrote:
> 
> > Uh while I'm responding again, what I'd discussed with Peter Todd in
> > IRC used two EC points in the stealth address. One for the payment and
> > one for the ECDH.  The reason to use two is that it makes delegating
> > detection possible and so you don't have to have you spending keys
> > online to even detect these payments.  Why'd that get dropped?
> 
> I think this is exactly what I've implemented.
> 
> I decided to put both pubKeys in a 2-of-2 multisig, instead of keeping one of the pubKeys in the OP-RETURN, to prevent a malicious sender from triggering false positives on your online detection key when the funds are actually still fully controlled by the payer.
> 
> You can still have a false positive (only 1 of 2 keys actually yours) but the funds would be trapped so it's unlikely anyone would do it. 

How would they trigger false positives? The payee recovers the nonce
with ECDH from the payor's ephemereal pubkey and their online detection
secret key. They use BIP32 public derivation with their offline spending
pubkey(s), if the derived pubkeys match the actual scriptPubKey they
know the output is spendable by them. I don't see how that can go wrong.

-- 
'peter'[:-1]@petertodd.org
000000007dd7a87aec311fb7fb13770f54edf628e6976f8c6091a5b2638878a7
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 685 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140114/7e3c7857/attachment.sig>

From odinn.cyberguerrilla at riseup.net  Tue Jan 14 17:54:01 2014
From: odinn.cyberguerrilla at riseup.net (Odinn Cyberguerrilla)
Date: Tue, 14 Jan 2014 09:54:01 -0800
Subject: [Bitcoin-development] Stealth Addresses
In-Reply-To: <20140114141517.GA29950@savin>
References: <20140106120338.GA14918@savin>
	<op.w9c5o7vgyldrnw@laptop-air.hsd1.ca.comcast.net>
	<20140110102037.GB25749@savin>
	<op.w9kkxcityldrnw@laptop-air.hsd1.ca.comcast.net>
	<CANEZrP0Np_FGhw=m6OffijByzz9r4D2AA78jCkzh=NZh=xrbjQ@mail.gmail.com>
	<op.w9k6j4xryldrnw@laptop-air.hsd1.ca.comcast.net>
	<CANEZrP06EiiY+5hL05bxzdcFXS8V7S1KOiZj86a_ZP5EcoaMKA@mail.gmail.com>
	<op.w9mbv6dcyldrnw@laptop-air.hsd1.ca.comcast.net>
	<20140114141517.GA29950@savin>
Message-ID: <58e17f354c20e595f0cfeddfa47c2f3e.squirrel@fulvetta.riseup.net>

Hello Peter et. al.

As I read more into this stealth discussion I am curious to know what you
think of the background microdonation concept I posted recently.

It is shown in full here
http://sourceforge.net/mailarchive/message.php?msg_id=31837430

Given the lengthy nature of the concept as presented I would be happy to
distill it further, but I am interested in your thoughts as to the idea
generally and how to further present it.

-Odinn

> On Mon, Jan 13, 2014 at 01:13:08AM -0800, Jeremy Spilman wrote:
>> It's a given this will be implemented for Payment Protocol. The question
>> is whether it's also usable outside of PP.
>
> I think what stealth addresses is showing is that the concept of an
> address being "instructions on how to generate a txout/tx that results
> in me getting Bitcoins" is actually quite valuable; it and
> BIP32-derivation addresses with chaincodes are pretty clear cases where
> just replacing address with scriptPubKey isn't sufficient.
>
>> I was kind of imagining that we could encourage people to replace all
>> their static address text that live on Github pages, and README.me, and
>> forum signatures, etc. with new 'href=bitcoin:xSTL...' URIs. Convention
>> could be to require only transporting xSTL addresses within a URI, even
>> going so far as to not support them copy/pasted. 101 characters is not
>> much longer (and sometimes shorter) than PaymentRequest URIs end up
>> being.
>
> Yeah, I don't see anything wrong with stealth addresses whatever length
> they wind up being. It's a good intermediate step, and without them
> people will just pass around unsigned payment requests and other stuff.
>
>> I think there are ways to make stealth addresses easy enough to use that
>> people actually prefer using them for P2P payments which do not involve
>> a
>> full-stack merchant. In that case, if it was a PaymentRequest it would
>> almost certainly not be signed, and would be more easily shared over
>> email
>> or SMS as a URI than as a file attachment or, even worse, putting the
>> unsigned PR file up on a third-party server which probably won't do a
>> good
>> job securing it.
>
> At the DarkWallet hackathon we had discussed how to integrate stealth
> addresses into OpenPGP keys as a new user id type for instance, and
> similarly into x.509 certs.
>
> The big advantage here is the identity of *who* you are paying is
> important, not just "I got this signed payment request". Basically the
> concept becomes "identity signed payment address" and the signature
> binding the identity to the address is a one time and offline thing; an
> issue with the payment protocol as it stands is that it encourages
> signing keys to be kept online to issue payment requests. If you have a
> scheme where the private keys that bound the identity to the address can
> be kept offline you're much better off, because the attacker can only
> create a fake payment request, they can't divert the funds to
> themselves.
>
> So with that in mind, I strongly suggest sticking with defining a
> reasonable stealth address spec. But when you do, keep in mind that you
> may want to upgrade it in the future, preferably in a backwards
> compatible way. Also, it shouldn't be limited to exactly 2-of-2
> CHECKMULTISIG, there's no reason why n and m can't be picked as needed.
> Sure, it means the addresses are not fixed length, but for something
> that is mostly an internal detail and only occasionally visible to
> advanced users, I see no issues there.
>
> Along those lines: what would a BIP32 chain code address look like? What
> happens when you want to use that with a multisig-protected wallet?
>
>> * PP Implementation Overview *
>>
>> The basic PaymentRequest>PaymentDetails is expecting 'output' containing
>> one or more TxOuts with script and amount. I believe the general
>> approach
>> is to put a fallback address into 'output' for backward compatibility,
>> and
>> put Q and Q2 into an extension field.
>>
>> So we add a new optional field to PaymentDetails which contains the one
>> or
>> two PubKeys. Not sure if we want different protobuf tags, or if the
>> difference in length of the value makes it obvious enough which approach
>> is being used;
>>
>>     optional bytes stealthOnePubKey = 1000
>>     optional bytes stealthTwoPubKey = 1001
>
> I think you're missing the bigger picture here, not least of which is
> that backwards compatibility is a bit of a misnomer for an unreleased
> standard. :)
>
> Why put this into the PaymentDetails? That a stealth address is to be
> used for the payment is a property of the outputs being requested, not
> the payment itself. We're better off if that goes into the Output
> message, and further more it suggests that the Output message shouldn't
> contain raw scriptPubKey's but rather addresses. After all, IsStandard()
> means we have to inspect the scriptPubKey to see if we can even pay to
> what the sender is requesting.
>
> Once you establish that it's addresses that Outputs specify, then it's
> easy enough to make a stealth address type, or a BIP32-chain-code
> address type, or whatever else comes up in the future.
>
>
>> Also, ideally I think I would want multiple different stealth payments
>> within a single wallet to the same merchant / pubkeys to be identifiable
>> as such.
>
> Agreed.
>
> --
> 'peter'[:-1]@petertodd.org
> 00000000bda8ab55740699711a11572c4eec9dc9f714e4896559aac310a115ff
> ------------------------------------------------------------------------------
> CenturyLink Cloud: The Leader in Enterprise Cloud Services.
> Learn Why More Businesses Are Choosing CenturyLink Cloud For
> Critical Workloads, Development Environments & Everything In Between.
> Get a Quote or Start a Free Trial Today.
> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk_______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>





From jeremy at taplink.co  Tue Jan 14 19:12:40 2014
From: jeremy at taplink.co (Jeremy Spilman)
Date: Tue, 14 Jan 2014 11:12:40 -0800
Subject: [Bitcoin-development] Stealth Addresses
In-Reply-To: <20140114141908.GB29950@savin>
References: <op.w9c5o7vgyldrnw@laptop-air.hsd1.ca.comcast.net>
	<20140110102037.GB25749@savin>
	<op.w9kkxcityldrnw@laptop-air.hsd1.ca.comcast.net>
	<CABsx9T2G=yqSUGr0+Ju5-z9P++uS20AwLC+c3DnFMHtcQjQK6w@mail.gmail.com>
	<CAAS2fgTz0TaGhym_35V3N2-vHVzU9BeuV8q+QJjwh5bg77FEZg@mail.gmail.com>
	<20140113194049.GJ38964@giles.gnomon.org.uk>
	<CANAnSg30V01B_3LCJ09sTwcsYa4_WOg3sKd-=p6COZS6w0b-uA@mail.gmail.com>
	<52D4458C.6010909@gmail.com>
	<CAAS2fgTzVWUF_B_-1jkRs3WZ8Um_CcHeH7uFU0eLncgEqQ01HQ@mail.gmail.com>
	<19AE1549-16E0-4119-8BE9-8F4DFD3381C1@taplink.co>
	<20140114141908.GB29950@savin>
Message-ID: <op.w9oybextyldrnw@laptop-air.hsd1.ca.comcast.net>

On Tue, 14 Jan 2014 06:19:08 -0800, Peter Todd <pete at petertodd.org> wrote:

> On Mon, Jan 13, 2014 at 02:02:00PM -0800, Jeremy Spilman wrote:
>> I decided to put both pubKeys in a 2-of-2 multisig, instead of keeping  
>> one of the pubKeys in the OP-RETURN, to prevent a malicious sender from  
>> triggering false positives on your online detection key when the funds  
>> are actually still fully controlled by the payer.
>>
>> You can still have a false positive (only 1 of 2 keys actually yours)  
>> but the funds would be trapped so it's unlikely anyone would do it.
>
> How would they trigger false positives? The payee recovers the nonce
> with ECDH from the payor's ephemereal pubkey and their online detection
> secret key. They use BIP32 public derivation with their offline spending
> pubkey(s), if the derived pubkeys match the actual scriptPubKey they
> know the output is spendable by them. I don't see how that can go wrong.
>

Right now I have this:

   byte[] e = EC.NewPrivateKey();
   byte[] P = EC.GetPublicKey(e, compressed: true);
   byte[] S1 = EC.DH(e, Q1);
   byte[] S2 = EC.DH(e, Q2);
   byte[] q1New = EC.PointAdd(Q1, Util.SingleSHA256(S1));
   byte[] q2New = EC.PointAdd(Q2, Util.SingleSHA256(S2));
   stealthTx.Vout.Add(TxOut.PayToMultiSig(Util.Amount(".995"), 2, 2, q1New,  
q2New));
   stealthTx.Vout.Add(TxOut.OpReturn(P));

In this case, you can scan with d2, calculate S2, and matching payments  
will have the right 'q2New'. But you need to check again offline with d1  
since it's a separate shared secret.

Maybe you are saying:

   byte[] S = EC.DH(e, Q2);
   byte[] q1New = EC.PointAdd(Q1, Util.SingleSHA256(S));
   byte[] q2New = EC.PointAdd(Q2, Util.SingleSHA256(S));

But the payment would have (q2New - q1New) == (Q2 - Q1), so I think not  
entirely stealth? OK, let's fix that by adding a counter to the hash  
function...

   byte[] S = EC.DH(e, Q2);
   byte[] q1New = EC.PointAdd(Q1, Util.SingleSHA256(S || 1));
   byte[] q2New = EC.PointAdd(Q2, Util.SingleSHA256(S || 2));
   stealthTx.Vout.Add(TxOut.PayToMultiSig(Util.Amount(".995"), 2, 2, q1New,  
q2New));
   stealthTx.Vout.Add(TxOut.OpReturn(P));

This is assuming we want to put q2New somewhere into the transaction,  
which, is it even required?

   byte[] S = EC.DH(e, Q2);
   byte[] q1New = EC.PointAdd(Q1, Util.SingleSHA256(S));
   stealthTx.Vout.Add(TxOut.PayToPubKeyHash(Util.Amount(".995"), q1New);
   stealthTx.Vout.Add(TxOut.OpReturn(P));

I'll wait for ACK and then update my sample code.




From pete at petertodd.org  Tue Jan 14 20:48:06 2014
From: pete at petertodd.org (Peter Todd)
Date: Tue, 14 Jan 2014 15:48:06 -0500
Subject: [Bitcoin-development] Stealth Addresses
In-Reply-To: <op.w9oybextyldrnw@laptop-air.hsd1.ca.comcast.net>
References: <op.w9kkxcityldrnw@laptop-air.hsd1.ca.comcast.net>
	<CABsx9T2G=yqSUGr0+Ju5-z9P++uS20AwLC+c3DnFMHtcQjQK6w@mail.gmail.com>
	<CAAS2fgTz0TaGhym_35V3N2-vHVzU9BeuV8q+QJjwh5bg77FEZg@mail.gmail.com>
	<20140113194049.GJ38964@giles.gnomon.org.uk>
	<CANAnSg30V01B_3LCJ09sTwcsYa4_WOg3sKd-=p6COZS6w0b-uA@mail.gmail.com>
	<52D4458C.6010909@gmail.com>
	<CAAS2fgTzVWUF_B_-1jkRs3WZ8Um_CcHeH7uFU0eLncgEqQ01HQ@mail.gmail.com>
	<19AE1549-16E0-4119-8BE9-8F4DFD3381C1@taplink.co>
	<20140114141908.GB29950@savin>
	<op.w9oybextyldrnw@laptop-air.hsd1.ca.comcast.net>
Message-ID: <20140114204806.GA20546@petertodd.org>

On Tue, Jan 14, 2014 at 11:12:40AM -0800, Jeremy Spilman wrote:
> Maybe you are saying:
> 
>   byte[] S = EC.DH(e, Q2);
>   byte[] q1New = EC.PointAdd(Q1, Util.SingleSHA256(S));
>   byte[] q2New = EC.PointAdd(Q2, Util.SingleSHA256(S));
> 
> But the payment would have (q2New - q1New) == (Q2 - Q1), so I think
> not entirely stealth? OK, let's fix that by adding a counter to the
> hash function...

Good catch, yeah, use the master shared secret to derive per-pubkey
secrets.

>   byte[] S = EC.DH(e, Q2);
>   byte[] q1New = EC.PointAdd(Q1, Util.SingleSHA256(S || 1));
>   byte[] q2New = EC.PointAdd(Q2, Util.SingleSHA256(S || 2));
>   stealthTx.Vout.Add(TxOut.PayToMultiSig(Util.Amount(".995"), 2, 2,
> q1New, q2New));
>   stealthTx.Vout.Add(TxOut.OpReturn(P));
> 
> This is assuming we want to put q2New somewhere into the
> transaction, which, is it even required?
> 
>   byte[] S = EC.DH(e, Q2);
>   byte[] q1New = EC.PointAdd(Q1, Util.SingleSHA256(S));
>   stealthTx.Vout.Add(TxOut.PayToPubKeyHash(Util.Amount(".995"), q1New);
>   stealthTx.Vout.Add(TxOut.OpReturn(P));

Well like I said, you shouldn't force the txout to be exactly a 2-of-2
multisig - the recipient might be using a multi-factor wallet for
instance. So, if I understand your code, what you want is the following:

byte[] Q = <payee root pubkeys>;
byte[] Q_Scan = <may or may not be provided in Q>
int m = <# of pubkeys required to redeem>;
byte[] S = EC.DH(e, Q_Scan);

byte[] qDerived[];
for (int = 0; i < len(Q); i++){
    qDerived[i] = EC.PointAdd(Q[i], Util.SingleSHA256(S || i));
}

// Best to have a single canonical order re: anonymity set.
qDerived = sorted(qDerived);

if (len(Q) > 1){
    stealthTx.Vout.Add(TxOut.PayToMultiSig(amount, m, len(Q), qDerived));
} else {
    stealthTx.Vout.Add(TxOut.PayToPubKeyHash(amount, qDerived[0]);
}
stealthTx.Vout.Add(TxOut.OpReturn(P));


Finally, it would probably be better if the multisig output was wrapped
in a P2SH output to better match the behavior of other wallets for the
sake of a bigger anonymity set - seems that stuff that is implementing
multifactor wallets and escrow is using P2SH to do it rather than bare
multisig. Also there's quite a bit of support for making bare multisig
not IsStandard() to discourage data-storage applications.

-- 
'peter'[:-1]@petertodd.org
00000000000000010c474cd4e25913535ec1c166b6d43fbdd9a5f2726711ced7
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 490 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140114/7569f46b/attachment.sig>

From adam at cypherspace.org  Tue Jan 14 21:51:06 2014
From: adam at cypherspace.org (Adam Back)
Date: Tue, 14 Jan 2014 22:51:06 +0100
Subject: [Bitcoin-development] Stealth Addresses
In-Reply-To: <op.w9oybextyldrnw@laptop-air.hsd1.ca.comcast.net>
References: <op.w9kkxcityldrnw@laptop-air.hsd1.ca.comcast.net>
	<CABsx9T2G=yqSUGr0+Ju5-z9P++uS20AwLC+c3DnFMHtcQjQK6w@mail.gmail.com>
	<CAAS2fgTz0TaGhym_35V3N2-vHVzU9BeuV8q+QJjwh5bg77FEZg@mail.gmail.com>
	<20140113194049.GJ38964@giles.gnomon.org.uk>
	<CANAnSg30V01B_3LCJ09sTwcsYa4_WOg3sKd-=p6COZS6w0b-uA@mail.gmail.com>
	<52D4458C.6010909@gmail.com>
	<CAAS2fgTzVWUF_B_-1jkRs3WZ8Um_CcHeH7uFU0eLncgEqQ01HQ@mail.gmail.com>
	<19AE1549-16E0-4119-8BE9-8F4DFD3381C1@taplink.co>
	<20140114141908.GB29950@savin>
	<op.w9oybextyldrnw@laptop-air.hsd1.ca.comcast.net>
Message-ID: <20140114215106.GA13267@netbook.cypherspace.org>

I saw in the math version you had said Q'=Q+H(S) and I presumed it was a
typo, but your code says the same thing.  I presume you meant Q'=Q+H(S)*G
and therefore that Util.SingleSHA256() multiplies by G internally?

Adam




From jeremy at taplink.co  Tue Jan 14 22:34:01 2014
From: jeremy at taplink.co (Jeremy Spilman)
Date: Tue, 14 Jan 2014 14:34:01 -0800
Subject: [Bitcoin-development] Stealth Addresses
In-Reply-To: <20140114215106.GA13267@netbook.cypherspace.org>
References: <op.w9kkxcityldrnw@laptop-air.hsd1.ca.comcast.net>
	<CABsx9T2G=yqSUGr0+Ju5-z9P++uS20AwLC+c3DnFMHtcQjQK6w@mail.gmail.com>
	<CAAS2fgTz0TaGhym_35V3N2-vHVzU9BeuV8q+QJjwh5bg77FEZg@mail.gmail.com>
	<20140113194049.GJ38964@giles.gnomon.org.uk>
	<CANAnSg30V01B_3LCJ09sTwcsYa4_WOg3sKd-=p6COZS6w0b-uA@mail.gmail.com>
	<52D4458C.6010909@gmail.com>
	<CAAS2fgTzVWUF_B_-1jkRs3WZ8Um_CcHeH7uFU0eLncgEqQ01HQ@mail.gmail.com>
	<19AE1549-16E0-4119-8BE9-8F4DFD3381C1@taplink.co>
	<20140114141908.GB29950@savin>
	<op.w9oybextyldrnw@laptop-air.hsd1.ca.comcast.net>
	<20140114215106.GA13267@netbook.cypherspace.org>
Message-ID: <op.w9o7mznmyldrnw@laptop-air.hsd1.ca.comcast.net>

On Tue, 14 Jan 2014 13:51:06 -0800, Adam Back <adam at cypherspace.org> wrote:
> I saw in the math version you had said Q'=Q+H(S) and I presumed it was a
> typo, but your code says the same thing.  I presume you meant Q'=Q+H(S)*G
> and therefore that Util.SingleSHA256() multiplies by G internally?
>
> Adam
>

Thanks for reviewing this. The relevant line:

    byte[] q1New = EC.PointAdd(Q1, Util.SingleSHA256(S1));

SingleSHA256 is a single application of SHA256 -- named so since 'SHA256'  
functions in many Bitcoin libraries too often actually run DoubleSHA256.  
32 bytes are returned.

The multiplication by 'G' that you mention is part of my EC.PointAdd...

I should probably just publish all my code as MIT and be done with it ;-)

Thanks,
Jeremy


public static byte[] PointAdd(byte[] point, byte[] scalar, bool compressed  
= true)
{
     var point1 = new OpenSSL.Crypto.EC.Point(EcGroup, point);

     var num = OpenSSL.Core.BigNumber.FromArray(scalar);
     var point2 = OpenSSL.Crypto.EC.Point.Multiply(EcGroup, num,  
EcBnContext);

     var result = point1.Add(point2, EcBnContext);

     if (compressed)
         return result.GetBytes(ConversionForm.Compressed);
     else
         return result.GetBytes(ConversionForm.Uncompressed);
}








From roy at gnomon.org.uk  Tue Jan 14 22:53:21 2014
From: roy at gnomon.org.uk (Roy Badami)
Date: Tue, 14 Jan 2014 22:53:21 +0000
Subject: [Bitcoin-development] Stealth Addresses
In-Reply-To: <CANEZrP1KAVhi_-cxCYe0rR9LUSYJ8MyW8=6eSJZ65FeY5ZJNuQ@mail.gmail.com>
References: <20140106120338.GA14918@savin>
	<op.w9c5o7vgyldrnw@laptop-air.hsd1.ca.comcast.net>
	<20140110102037.GB25749@savin>
	<op.w9kkxcityldrnw@laptop-air.hsd1.ca.comcast.net>
	<CABsx9T2G=yqSUGr0+Ju5-z9P++uS20AwLC+c3DnFMHtcQjQK6w@mail.gmail.com>
	<CAAS2fgTz0TaGhym_35V3N2-vHVzU9BeuV8q+QJjwh5bg77FEZg@mail.gmail.com>
	<CANEZrP0huBWqgvQik9Yc26Tu4CwR0VSXcfC+qfzsZqvoU4VJGA@mail.gmail.com>
	<20140113133746.GI38964@giles.gnomon.org.uk>
	<CANEZrP1KAVhi_-cxCYe0rR9LUSYJ8MyW8=6eSJZ65FeY5ZJNuQ@mail.gmail.com>
Message-ID: <20140114225321.GT38964@giles.gnomon.org.uk>

On Mon, Jan 13, 2014 at 04:58:01PM +0100, Mike Hearn wrote:
> 
> Signing a payment request for an individual is easy, anyway, depending on
> the kind of ID you want. If you want to sign with an email address, just go
> here with a browser like Chrome/Safari/IE that uses the system keystore:
> 
>    http://www.comodo.com/home/email-security/free-email-certificate.php

Having now read that page, I'll just leave you with the first bullet
point from it:

 * Digital signature ensures confidentiality

(I'm not trying to make any particular point here - I just couldn't resist)


roy




From drak at zikula.org  Wed Jan 15 00:19:29 2014
From: drak at zikula.org (Drak)
Date: Wed, 15 Jan 2014 00:19:29 +0000
Subject: [Bitcoin-development] Stealth Addresses
In-Reply-To: <20140114225321.GT38964@giles.gnomon.org.uk>
References: <20140106120338.GA14918@savin>
	<op.w9c5o7vgyldrnw@laptop-air.hsd1.ca.comcast.net>
	<20140110102037.GB25749@savin>
	<op.w9kkxcityldrnw@laptop-air.hsd1.ca.comcast.net>
	<CABsx9T2G=yqSUGr0+Ju5-z9P++uS20AwLC+c3DnFMHtcQjQK6w@mail.gmail.com>
	<CAAS2fgTz0TaGhym_35V3N2-vHVzU9BeuV8q+QJjwh5bg77FEZg@mail.gmail.com>
	<CANEZrP0huBWqgvQik9Yc26Tu4CwR0VSXcfC+qfzsZqvoU4VJGA@mail.gmail.com>
	<20140113133746.GI38964@giles.gnomon.org.uk>
	<CANEZrP1KAVhi_-cxCYe0rR9LUSYJ8MyW8=6eSJZ65FeY5ZJNuQ@mail.gmail.com>
	<20140114225321.GT38964@giles.gnomon.org.uk>
Message-ID: <CANAnSg0tH_bK_19rsRRHOeZgrGYeWMhW89fXPyS4DQGmS4r_7A@mail.gmail.com>

Sorry this is possibly OT, but someone posted this thread to r/bitcoin and
it's gone straight to position 1. People are really enthusiastic about this
feature.

Drak
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140115/4539c6f0/attachment.html>

From bendavenport at gmail.com  Wed Jan 15 20:22:25 2014
From: bendavenport at gmail.com (Ben Davenport)
Date: Wed, 15 Jan 2014 12:22:25 -0800
Subject: [Bitcoin-development] Stealth Addresses
In-Reply-To: <CANAnSg0tH_bK_19rsRRHOeZgrGYeWMhW89fXPyS4DQGmS4r_7A@mail.gmail.com>
References: <20140106120338.GA14918@savin>
	<op.w9c5o7vgyldrnw@laptop-air.hsd1.ca.comcast.net>
	<20140110102037.GB25749@savin>
	<op.w9kkxcityldrnw@laptop-air.hsd1.ca.comcast.net>
	<CABsx9T2G=yqSUGr0+Ju5-z9P++uS20AwLC+c3DnFMHtcQjQK6w@mail.gmail.com>
	<CAAS2fgTz0TaGhym_35V3N2-vHVzU9BeuV8q+QJjwh5bg77FEZg@mail.gmail.com>
	<CANEZrP0huBWqgvQik9Yc26Tu4CwR0VSXcfC+qfzsZqvoU4VJGA@mail.gmail.com>
	<20140113133746.GI38964@giles.gnomon.org.uk>
	<CANEZrP1KAVhi_-cxCYe0rR9LUSYJ8MyW8=6eSJZ65FeY5ZJNuQ@mail.gmail.com>
	<20140114225321.GT38964@giles.gnomon.org.uk>
	<CANAnSg0tH_bK_19rsRRHOeZgrGYeWMhW89fXPyS4DQGmS4r_7A@mail.gmail.com>
Message-ID: <CALimQCXgc0eXeOcqFGUaCpSF7gKEe87KzvLqHZwUysV3WyjjGw@mail.gmail.com>

Love what's happening here, and how quickly things are moving, from initial
concept, to first implementation, to first transaction.

But may I suggest we consider changing the name "stealth address" to
something more neutral?

Already, many people on Reddit and elsewhere are misinterpreting the
purpose of such addresses, whether for tax evasion, criminal activity, or
who knows what. Bitcoin already has plenty of political hurdles based
sheerly on the technology. We don't need to make life harder for ourselves.
Even forgetting about politics, the "stealth" association just seems to
imply something secretive going on. Is a Fortune 500 company or worldwide
charity going to want to use something called a "stealth address"?

I'd propose the alternate term "routing address".

- It's a descriptive, neutral term
- It accurately describes what the address is: it's a way to route payment
to a recipient, but not the actual final address
- It can be analogized to a bank's routing number: It is uniquely, publicly
and persistently tied to the receiving institution. The payor and payee
knows when payment is made using it, but it's not publicly visible.

That's the best I've got, but here are some alternate terms in case that
doesn't work:

- reusable public address
- permanent public address
- permanent address
- static address

I don't like these quite as much because they're not as clear. Normal
addresses are all reusable, permanent and static -- they just _shouldn't_
be used that way.

Ben


On Tue, Jan 14, 2014 at 4:19 PM, Drak <drak at zikula.org> wrote:

> Sorry this is possibly OT, but someone posted this thread to r/bitcoin and
> it's gone straight to position 1. People are really enthusiastic about this
> feature.
>
> Drak
>
>
> ------------------------------------------------------------------------------
> CenturyLink Cloud: The Leader in Enterprise Cloud Services.
> Learn Why More Businesses Are Choosing CenturyLink Cloud For
> Critical Workloads, Development Environments & Everything In Between.
> Get a Quote or Start a Free Trial Today.
>
> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140115/4e4a71a9/attachment.html>

From gmaxwell at gmail.com  Wed Jan 15 20:38:41 2014
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Wed, 15 Jan 2014 12:38:41 -0800
Subject: [Bitcoin-development] Stealth Addresses
In-Reply-To: <CALimQCXgc0eXeOcqFGUaCpSF7gKEe87KzvLqHZwUysV3WyjjGw@mail.gmail.com>
References: <20140106120338.GA14918@savin>
	<op.w9c5o7vgyldrnw@laptop-air.hsd1.ca.comcast.net>
	<20140110102037.GB25749@savin>
	<op.w9kkxcityldrnw@laptop-air.hsd1.ca.comcast.net>
	<CABsx9T2G=yqSUGr0+Ju5-z9P++uS20AwLC+c3DnFMHtcQjQK6w@mail.gmail.com>
	<CAAS2fgTz0TaGhym_35V3N2-vHVzU9BeuV8q+QJjwh5bg77FEZg@mail.gmail.com>
	<CANEZrP0huBWqgvQik9Yc26Tu4CwR0VSXcfC+qfzsZqvoU4VJGA@mail.gmail.com>
	<20140113133746.GI38964@giles.gnomon.org.uk>
	<CANEZrP1KAVhi_-cxCYe0rR9LUSYJ8MyW8=6eSJZ65FeY5ZJNuQ@mail.gmail.com>
	<20140114225321.GT38964@giles.gnomon.org.uk>
	<CANAnSg0tH_bK_19rsRRHOeZgrGYeWMhW89fXPyS4DQGmS4r_7A@mail.gmail.com>
	<CALimQCXgc0eXeOcqFGUaCpSF7gKEe87KzvLqHZwUysV3WyjjGw@mail.gmail.com>
Message-ID: <CAAS2fgShChAQryfUOBp60jB-zxn2tH986fu1HfT+LsNdBYnoYg@mail.gmail.com>

On Wed, Jan 15, 2014 at 12:22 PM, Ben Davenport <bendavenport at gmail.com> wrote:
> But may I suggest we consider changing the name "stealth address" to
> something more neutral?

ACK.  Regardless of the 'political' overtones, I think stealth is a
little cringe-worthy.

"Private address" would be fine if not for confusion with private-keys.

"Static address" is perhaps the best in my view. (also helps improve
awareness that normal addresses are intended to be more one-use-ness)



From jgarzik at bitpay.com  Wed Jan 15 20:44:17 2014
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Wed, 15 Jan 2014 15:44:17 -0500
Subject: [Bitcoin-development] Stealth Addresses
In-Reply-To: <CAAS2fgShChAQryfUOBp60jB-zxn2tH986fu1HfT+LsNdBYnoYg@mail.gmail.com>
References: <20140106120338.GA14918@savin>
	<op.w9c5o7vgyldrnw@laptop-air.hsd1.ca.comcast.net>
	<20140110102037.GB25749@savin>
	<op.w9kkxcityldrnw@laptop-air.hsd1.ca.comcast.net>
	<CABsx9T2G=yqSUGr0+Ju5-z9P++uS20AwLC+c3DnFMHtcQjQK6w@mail.gmail.com>
	<CAAS2fgTz0TaGhym_35V3N2-vHVzU9BeuV8q+QJjwh5bg77FEZg@mail.gmail.com>
	<CANEZrP0huBWqgvQik9Yc26Tu4CwR0VSXcfC+qfzsZqvoU4VJGA@mail.gmail.com>
	<20140113133746.GI38964@giles.gnomon.org.uk>
	<CANEZrP1KAVhi_-cxCYe0rR9LUSYJ8MyW8=6eSJZ65FeY5ZJNuQ@mail.gmail.com>
	<20140114225321.GT38964@giles.gnomon.org.uk>
	<CANAnSg0tH_bK_19rsRRHOeZgrGYeWMhW89fXPyS4DQGmS4r_7A@mail.gmail.com>
	<CALimQCXgc0eXeOcqFGUaCpSF7gKEe87KzvLqHZwUysV3WyjjGw@mail.gmail.com>
	<CAAS2fgShChAQryfUOBp60jB-zxn2tH986fu1HfT+LsNdBYnoYg@mail.gmail.com>
Message-ID: <CAJHLa0P5r2+kxy7w8G=h=TAhdk1jUoW5UOiv-euo47uQY0u9ZA@mail.gmail.com>

"static address" seems like a reasonable attempt at describing intended
use/direction.



On Wed, Jan 15, 2014 at 3:38 PM, Gregory Maxwell <gmaxwell at gmail.com> wrote:

> On Wed, Jan 15, 2014 at 12:22 PM, Ben Davenport <bendavenport at gmail.com>
> wrote:
> > But may I suggest we consider changing the name "stealth address" to
> > something more neutral?
>
> ACK.  Regardless of the 'political' overtones, I think stealth is a
> little cringe-worthy.
>
> "Private address" would be fine if not for confusion with private-keys.
>
> "Static address" is perhaps the best in my view. (also helps improve
> awareness that normal addresses are intended to be more one-use-ness)
>
>
> ------------------------------------------------------------------------------
> CenturyLink Cloud: The Leader in Enterprise Cloud Services.
> Learn Why More Businesses Are Choosing CenturyLink Cloud For
> Critical Workloads, Development Environments & Everything In Between.
> Get a Quote or Start a Free Trial Today.
>
> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>



-- 
Jeff Garzik
Bitcoin core developer and open source evangelist
BitPay, Inc.      https://bitpay.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140115/87a1eb7e/attachment.html>

From hozer at hozed.org  Wed Jan 15 22:38:15 2014
From: hozer at hozed.org (Troy Benjegerdes)
Date: Wed, 15 Jan 2014 16:38:15 -0600
Subject: [Bitcoin-development] Static addresses on chains encouraging
	address *RE* use
In-Reply-To: <CAJHLa0P5r2+kxy7w8G=h=TAhdk1jUoW5UOiv-euo47uQY0u9ZA@mail.gmail.com>
References: <CABsx9T2G=yqSUGr0+Ju5-z9P++uS20AwLC+c3DnFMHtcQjQK6w@mail.gmail.com>
	<CAAS2fgTz0TaGhym_35V3N2-vHVzU9BeuV8q+QJjwh5bg77FEZg@mail.gmail.com>
	<CANEZrP0huBWqgvQik9Yc26Tu4CwR0VSXcfC+qfzsZqvoU4VJGA@mail.gmail.com>
	<20140113133746.GI38964@giles.gnomon.org.uk>
	<CANEZrP1KAVhi_-cxCYe0rR9LUSYJ8MyW8=6eSJZ65FeY5ZJNuQ@mail.gmail.com>
	<20140114225321.GT38964@giles.gnomon.org.uk>
	<CANAnSg0tH_bK_19rsRRHOeZgrGYeWMhW89fXPyS4DQGmS4r_7A@mail.gmail.com>
	<CALimQCXgc0eXeOcqFGUaCpSF7gKEe87KzvLqHZwUysV3WyjjGw@mail.gmail.com>
	<CAAS2fgShChAQryfUOBp60jB-zxn2tH986fu1HfT+LsNdBYnoYg@mail.gmail.com>
	<CAJHLa0P5r2+kxy7w8G=h=TAhdk1jUoW5UOiv-euo47uQY0u9ZA@mail.gmail.com>
Message-ID: <20140115223815.GA3180@nl.grid.coop>

Let's suppose I have an alternate blockchain that specifically encourages
address *RE* use, and charges those that desire privacy higher transaction
fees to cover the network cost in computation and storage.

Does the static address privacy system still work, or does it fall apart
because 95% of the transactions re-use addresses, making them 'effectively 
static', just like my DHCP IP that has not changed as long as I've used it?


On Wed, Jan 15, 2014 at 03:44:17PM -0500, Jeff Garzik wrote:
> "static address" seems like a reasonable attempt at describing intended
> use/direction.
> 
> 
> 
> On Wed, Jan 15, 2014 at 3:38 PM, Gregory Maxwell <gmaxwell at gmail.com> wrote:
> 
> > On Wed, Jan 15, 2014 at 12:22 PM, Ben Davenport <bendavenport at gmail.com>
> > wrote:
> > > But may I suggest we consider changing the name "stealth address" to
> > > something more neutral?
> >
> > ACK.  Regardless of the 'political' overtones, I think stealth is a
> > little cringe-worthy.
> >
> > "Private address" would be fine if not for confusion with private-keys.
> >
> > "Static address" is perhaps the best in my view. (also helps improve
> > awareness that normal addresses are intended to be more one-use-ness)
> >




From mike at plan99.net  Wed Jan 15 22:51:21 2014
From: mike at plan99.net (Mike Hearn)
Date: Wed, 15 Jan 2014 23:51:21 +0100
Subject: [Bitcoin-development] Tor / SPV
Message-ID: <5747D5DF-879B-4A60-8BD6-18251E7D5F47@plan99.net>

intro text starts here, protocol upgrade proposal starts further down

Recently on IRC we have discussed what it'd take to use SSL on P2P connections, the goal being encryption and authentication of traffic to help avoid passive wiretapping and sybil attacks.

Gregory pointed out - very reasonably - that OpenSSL is huge and very old-school C, meaning that using it to implement SSL would put a big piece of code exposed to the internet into the same process as people?s wallets. This would be not excellent. Also, even with encryption, with SSL you only get some resistance to traffic analysis. And it'd be a complicated upgrade.

Tor is an option, but it has other disadvantages:

1) Also a giant piece of C that is likely to contain bugs
2) Breaks our anti-sybil heuristics when connecting to hidden services
3) MITM very likely when not connecting to hidden services
4) Is not usable as a library at all. Convention to use Tor is "tell user to start TorBrowser and connect to the SOCKS port".

The latter point means in reality hardly anyone will ever connect via Tor, as you'd have to do extra setup and most people are lazy. Especially it's not going to work on mobile. It?s not worth doing something complicated if hardly anyone would use it.

But recently I discovered this interesting piece of code:

   http://www.subgraph.com/orchid.html

It is a pure Java implementation of the Tor protocol (client only, no relays), easily usable as a library. Sure enough after about an hour of fiddling around, I now have a bitcoinj that connects via Tor with no other software running.

Suddenly making MultiBit, the Android Bitcoin Wallet app, Hive and other bitcoinj based wallets use Tor by default seems very plausible.

So I started thinking about what it'd take to switch this on for everyone. The biggest problem is that SPV wallets can't verify unconfirmed/pending transactions for themselves, so they rely on counting the number of peers that announced it and assuming that their internet connections aren't being tampered with. Mostly this assumption is a good one - we have never heard anyone report that they were paid with a fake pending tx using a MITM attack.

However, with Tor the chance of being MITMd goes up dramatically. Lots of people have reported exit nodes that are doing SSL stripping. Being sybilled when using exit nodes seems rather likely.

Connecting to hidden services solve the MITM problem but screws you in a different way. Bitcoin Core has some weak heuristics in the code to try and ensure we don?t accidentally connect to nodes all controlled by the same guys ? mostly by trying to keep a good mix of /16s. This is probably not very hard to defeat, but it does at least raise the bar beyond ?buy lots of amazon VMs?. With hidden services we lose that. Also, there aren?t very many nodes running as hidden services - if all bitcoinjs started hitting them simultaneously they?d probably die.

tl;dr the proposal starts here

Let?s fix this so SPV wallets can use Tor by default. Downgrading things is not an option, it must be pure upgrade. We can do it like this:

1) Firstly, we observe that MITM only matters when we?re trying to count pending transaction announcements, but most of the load SPV wallets impose on the network is chain filtering. So it?s OK to download the chain from any arbitrary clearnet IP via Tor because we?re checking Merkle branches.  This ensures we won?t put excessive load on hidden service nodes.

2) Secondly, we bump the protocol version, add a service flag and introduce a new P2P protocol command ?tor??. If a client sends a tor? message to a node that has the new service flag set, it will respond with a new ?tor? message that contains a regular addr packet, with a single address, the IPv6-ified version of its hidden service name.

3) SPV wallets that want to get a good mix of nodes for measuring pending transactions identify nodes on the clearnet via their addr announcements+service flag, in the normal way. They select some of these nodes using the standard clearnet anti-sybil heuristics and connect without using Tor. They proceed to query them for their hidden service key. After they?ve done that, they record the public IP->hidden service mapping and can go ahead and connect back to them at any later time via Tor itself.

This would seem to be pointless - did we not just go ahead and bypass Tor entirely, thus making neither node hidden? Is it not a dead cert that the next connection the node gets via Tor is likely the same computer? Yes, but it only matters the first time. As long as those nodes are somewhat stable the mapping will be recorded on disk and the next time the wallet starts, it?ll skip straight to using Tor.

The goal of all that is that we get to keep our existing IPv4 based anti-sybil heuristics, so we can?t possibly make anything worse, only better. Plus, we?ve now set things up so in future if/when we come up with a better anti-sybil system based on anonymous identities or other fancy crypto, we can take out the ?connect via clearnet? step and go straight to using hidden services with only a very small set of code changes and no new protocol work.

I like this idea for several reasons:

It feels implementable to me in about a couple of weeks wall-time. The tasks are small - the new tor? p2p message is super easy to implement because a node already knows if it?s a hidden service or not. On the bitcoinj side, it?d take a bit of work to implement the extra storage of IPv4->onion mappings and ensure the right kind of connection is used at the right time, but it?s not all that hard.
We could switch Tor on by default for a lot of users.
On the bitcoind side, Tor runs as a separate process and because it initiates connections to bitcoind, it can be easily sandboxed, e.g. ran as a different UNIX user or even run inside a chroot/ptrace jail. Even though Tor is likely to contain exploits, we can easily keep them away from the wallet. So there?s not much additional surface area.
Obviously as it?s pure Java and client only, Orchid is immune to buffer overflows/double frees and other such security problems.
It?s optional for all parties. Wallet clients can try to fall back to non-Tor usage if their access to Tor seems to be blocked somehow.
Tor is the gold standard for resisting traffic analysis - we know thanks to Snowden that it?s good at this task.

To launch I?d probably have a percentage throttle hosted on some SSLd website, so we can control the load placed on the existing hidden service nodes.

Feedback welcome.






-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140115/18fe96f5/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/pkcs7-signature
Size: 7453 bytes
Desc: not available
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140115/18fe96f5/attachment.p7s>

From mike at plan99.net  Wed Jan 15 23:01:12 2014
From: mike at plan99.net (Mike Hearn)
Date: Thu, 16 Jan 2014 00:01:12 +0100
Subject: [Bitcoin-development] Stealth Addresses
In-Reply-To: <CAJHLa0P5r2+kxy7w8G=h=TAhdk1jUoW5UOiv-euo47uQY0u9ZA@mail.gmail.com>
References: <20140106120338.GA14918@savin>
	<op.w9c5o7vgyldrnw@laptop-air.hsd1.ca.comcast.net>
	<20140110102037.GB25749@savin>
	<op.w9kkxcityldrnw@laptop-air.hsd1.ca.comcast.net>
	<CABsx9T2G=yqSUGr0+Ju5-z9P++uS20AwLC+c3DnFMHtcQjQK6w@mail.gmail.com>
	<CAAS2fgTz0TaGhym_35V3N2-vHVzU9BeuV8q+QJjwh5bg77FEZg@mail.gmail.com>
	<CANEZrP0huBWqgvQik9Yc26Tu4CwR0VSXcfC+qfzsZqvoU4VJGA@mail.gmail.com>
	<20140113133746.GI38964@giles.gnomon.org.uk>
	<CANEZrP1KAVhi_-cxCYe0rR9LUSYJ8MyW8=6eSJZ65FeY5ZJNuQ@mail.gmail.com>
	<20140114225321.GT38964@giles.gnomon.org.uk>
	<CANAnSg0tH_bK_19rsRRHOeZgrGYeWMhW89fXPyS4DQGmS4r_7A@mail.gmail.com>
	<CALimQCXgc0eXeOcqFGUaCpSF7gKEe87KzvLqHZwUysV3WyjjGw@mail.gmail.com>
	<CAAS2fgShChAQryfUOBp60jB-zxn2tH986fu1HfT+LsNdBYnoYg@mail.gmail.com>
	<CAJHLa0P5r2+kxy7w8G=h=TAhdk1jUoW5UOiv-euo47uQY0u9ZA@mail.gmail.com>
Message-ID: <CANEZrP30ONYpPCy1aH2fNSK3nzcb+u2=AyHiMPWLcFAUZ+cnTg@mail.gmail.com>

Do any people who aren't computer programmers or physicists ever use the
term "static"?

I liked routing address.


On Wed, Jan 15, 2014 at 9:44 PM, Jeff Garzik <jgarzik at bitpay.com> wrote:

> "static address" seems like a reasonable attempt at describing intended
> use/direction.
>
>
>
> On Wed, Jan 15, 2014 at 3:38 PM, Gregory Maxwell <gmaxwell at gmail.com>wrote:
>
>> On Wed, Jan 15, 2014 at 12:22 PM, Ben Davenport <bendavenport at gmail.com>
>> wrote:
>> > But may I suggest we consider changing the name "stealth address" to
>> > something more neutral?
>>
>> ACK.  Regardless of the 'political' overtones, I think stealth is a
>> little cringe-worthy.
>>
>> "Private address" would be fine if not for confusion with private-keys.
>>
>> "Static address" is perhaps the best in my view. (also helps improve
>> awareness that normal addresses are intended to be more one-use-ness)
>>
>>
>> ------------------------------------------------------------------------------
>> CenturyLink Cloud: The Leader in Enterprise Cloud Services.
>> Learn Why More Businesses Are Choosing CenturyLink Cloud For
>> Critical Workloads, Development Environments & Everything In Between.
>> Get a Quote or Start a Free Trial Today.
>>
>> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>
>
>
>
> --
> Jeff Garzik
> Bitcoin core developer and open source evangelist
> BitPay, Inc.      https://bitpay.com/
>
>
> ------------------------------------------------------------------------------
> CenturyLink Cloud: The Leader in Enterprise Cloud Services.
> Learn Why More Businesses Are Choosing CenturyLink Cloud For
> Critical Workloads, Development Environments & Everything In Between.
> Get a Quote or Start a Free Trial Today.
>
> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140116/5560f619/attachment.html>

From roy at gnomon.org.uk  Wed Jan 15 23:04:23 2014
From: roy at gnomon.org.uk (Roy Badami)
Date: Wed, 15 Jan 2014 23:04:23 +0000
Subject: [Bitcoin-development] Stealth Addresses
In-Reply-To: <CAJHLa0P5r2+kxy7w8G=h=TAhdk1jUoW5UOiv-euo47uQY0u9ZA@mail.gmail.com>
References: <CABsx9T2G=yqSUGr0+Ju5-z9P++uS20AwLC+c3DnFMHtcQjQK6w@mail.gmail.com>
	<CAAS2fgTz0TaGhym_35V3N2-vHVzU9BeuV8q+QJjwh5bg77FEZg@mail.gmail.com>
	<CANEZrP0huBWqgvQik9Yc26Tu4CwR0VSXcfC+qfzsZqvoU4VJGA@mail.gmail.com>
	<20140113133746.GI38964@giles.gnomon.org.uk>
	<CANEZrP1KAVhi_-cxCYe0rR9LUSYJ8MyW8=6eSJZ65FeY5ZJNuQ@mail.gmail.com>
	<20140114225321.GT38964@giles.gnomon.org.uk>
	<CANAnSg0tH_bK_19rsRRHOeZgrGYeWMhW89fXPyS4DQGmS4r_7A@mail.gmail.com>
	<CALimQCXgc0eXeOcqFGUaCpSF7gKEe87KzvLqHZwUysV3WyjjGw@mail.gmail.com>
	<CAAS2fgShChAQryfUOBp60jB-zxn2tH986fu1HfT+LsNdBYnoYg@mail.gmail.com>
	<CAJHLa0P5r2+kxy7w8G=h=TAhdk1jUoW5UOiv-euo47uQY0u9ZA@mail.gmail.com>
Message-ID: <20140115230423.GU38964@giles.gnomon.org.uk>

On Wed, Jan 15, 2014 at 03:44:17PM -0500, Jeff Garzik wrote:
> "static address" seems like a reasonable attempt at describing intended
> use/direction.

...as opposed to an address configured by DHCP?

More seriously, I don't think a typical user will understand anything from
the phrase "static address".  But it is a neutral name, and it is shorter
than "address-of-a-type-for-which-reuse-is-not-deprecated". :-)

-roy



From jgarzik at bitpay.com  Wed Jan 15 23:07:28 2014
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Wed, 15 Jan 2014 18:07:28 -0500
Subject: [Bitcoin-development] Stealth Addresses
In-Reply-To: <20140115230423.GU38964@giles.gnomon.org.uk>
References: <CABsx9T2G=yqSUGr0+Ju5-z9P++uS20AwLC+c3DnFMHtcQjQK6w@mail.gmail.com>
	<CAAS2fgTz0TaGhym_35V3N2-vHVzU9BeuV8q+QJjwh5bg77FEZg@mail.gmail.com>
	<CANEZrP0huBWqgvQik9Yc26Tu4CwR0VSXcfC+qfzsZqvoU4VJGA@mail.gmail.com>
	<20140113133746.GI38964@giles.gnomon.org.uk>
	<CANEZrP1KAVhi_-cxCYe0rR9LUSYJ8MyW8=6eSJZ65FeY5ZJNuQ@mail.gmail.com>
	<20140114225321.GT38964@giles.gnomon.org.uk>
	<CANAnSg0tH_bK_19rsRRHOeZgrGYeWMhW89fXPyS4DQGmS4r_7A@mail.gmail.com>
	<CALimQCXgc0eXeOcqFGUaCpSF7gKEe87KzvLqHZwUysV3WyjjGw@mail.gmail.com>
	<CAAS2fgShChAQryfUOBp60jB-zxn2tH986fu1HfT+LsNdBYnoYg@mail.gmail.com>
	<CAJHLa0P5r2+kxy7w8G=h=TAhdk1jUoW5UOiv-euo47uQY0u9ZA@mail.gmail.com>
	<20140115230423.GU38964@giles.gnomon.org.uk>
Message-ID: <CAJHLa0PeYFNQS3iw-GVG5pU8P2eeuk5k0x7fQHtb4m6SEfzZ7w@mail.gmail.com>

"Routing address" is pretty good too.  Unsure whether the synergy and
familiarity with bank routing numbers improves the situation, or
not...


On Wed, Jan 15, 2014 at 6:04 PM, Roy Badami <roy at gnomon.org.uk> wrote:
> On Wed, Jan 15, 2014 at 03:44:17PM -0500, Jeff Garzik wrote:
>> "static address" seems like a reasonable attempt at describing intended
>> use/direction.
>
> ...as opposed to an address configured by DHCP?
>
> More seriously, I don't think a typical user will understand anything from
> the phrase "static address".  But it is a neutral name, and it is shorter
> than "address-of-a-type-for-which-reuse-is-not-deprecated". :-)
>
> -roy



-- 
Jeff Garzik
Bitcoin core developer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From adam at cypherspace.org  Wed Jan 15 23:09:01 2014
From: adam at cypherspace.org (Adam Back)
Date: Thu, 16 Jan 2014 00:09:01 +0100
Subject: [Bitcoin-development] unlinakble static address? & spv-privacy (Re:
 Stealth Addresses)
In-Reply-To: <CAJHLa0P5r2+kxy7w8G=h=TAhdk1jUoW5UOiv-euo47uQY0u9ZA@mail.gmail.com>
References: <CABsx9T2G=yqSUGr0+Ju5-z9P++uS20AwLC+c3DnFMHtcQjQK6w@mail.gmail.com>
	<CAAS2fgTz0TaGhym_35V3N2-vHVzU9BeuV8q+QJjwh5bg77FEZg@mail.gmail.com>
	<CANEZrP0huBWqgvQik9Yc26Tu4CwR0VSXcfC+qfzsZqvoU4VJGA@mail.gmail.com>
	<20140113133746.GI38964@giles.gnomon.org.uk>
	<CANEZrP1KAVhi_-cxCYe0rR9LUSYJ8MyW8=6eSJZ65FeY5ZJNuQ@mail.gmail.com>
	<20140114225321.GT38964@giles.gnomon.org.uk>
	<CANAnSg0tH_bK_19rsRRHOeZgrGYeWMhW89fXPyS4DQGmS4r_7A@mail.gmail.com>
	<CALimQCXgc0eXeOcqFGUaCpSF7gKEe87KzvLqHZwUysV3WyjjGw@mail.gmail.com>
	<CAAS2fgShChAQryfUOBp60jB-zxn2tH986fu1HfT+LsNdBYnoYg@mail.gmail.com>
	<CAJHLa0P5r2+kxy7w8G=h=TAhdk1jUoW5UOiv-euo47uQY0u9ZA@mail.gmail.com>
Message-ID: <20140115230901.GA25135@netbook.cypherspace.org>

So I like static address name too.  In the write up for my variant I called
it something less sexy than stealth "unlinkable public address":

https://bitcointalk.org/index.php?topic=317835.msg4103530#msg4103530

(there are 3 variants that are approximately the same thing).

Maybe we could call it an unlinkable static address.  Otherwise static
addresses are maybe too synonymous with reused addresses a bad practice we
have been complaining about users and wallet authors incorrectly doing.

But to explain, in Peter Todds (and Amir Taaki also?) variant stealth refers
to an actual useful security criteria.  Stealth objective actually means
"looks like a normal bitcoin payment to the outside observer".  You
generally want that to be the case for fungibility reasons.  Its like
browser cookie state, the more things that are unusual about your
transaction, the more your transactions identify you in the public
block-chain.  Statistics are cumulative so it matters.


And is an actual element of stealthiness (hence the name) in this variant
that Peter Todd proposed, at least as an objective, though I think the
stealthiness somewhat fails because the P parameter is extra and not present
in a normal transaction.

Unfortunately so far removing P and using an input in its stead breaks
CoinJoin which is also necessary for fungibility.  Maybe there is another
way to make an extended CoinJoin that can mix inputs and unlinkable static
addresses.


I was meaning to comment on the SPV privacy properties.

For full-node use these unlinkable static addresses have quite nice
properties.  It also nicely solves the problem of having to educate users
and wallet authors to not reuse addresses.  But for SPV nodes they have no
direct-way to find the payments.  So then in Peter Todd's variant (maybe it
was suggested by Greg Maxwell?) there is a second address so that the SPV
client can delegate detection to a full node without giving it the private
key allowing it to spend!  (This is something analogous to bloom filtering). 
But I think its moderately expensive for the full node because it has to do
a DH calculation per transaction and its not precomputable so there is IO
per query.  (In the P version in fact only payments which are thereby
reconizable as unlinkable static need to be processed).

Then an artificial prefix is proposed to constrain the query to a subset,
however that leaks to everyone so in some wayts its a worse privacy leak
than bloom filtering.  It can be used to rule out recipients and could be
quite a powerful extra lever for statistical analysis.  (And also there is
proposed a version of the prefix computed via brute-force to make it
somewhat stealthy still).


So I also am quite enthusiastic about the possiblity to fix this address
reuse problem, but there remain a few open problems in my view, for SPV
uses.  Not nay-saying, I spent quite a bit of time trying to solve this for
my variant, its a tricky problem, or basically we wouldnt have one-use
addresses and bloom filtering.


But maybe its intereting enough already for full-node uses.  Many processors
and businesses are full nodes.  Many power users run full-nodes  The data
isnt lost, you just need to scan a full-node.

It could help the related problem of paying the wrong person.  Ie deposit
address given by merchant.  If the deposit address is static, and the used
address user derived from it, then that itself is an assurance to the user
that they are paying an address at least owned by the service.  (As opposed
to someone who hacked the web site or MITM the link).  Of course for users
probably the main likelihood is they have malware on their machine, but that
is what offline wallets are for.  A smartphone is maybe a little less
hackable and could be trained to store the static address and warn if its
not the same as the last time they used the site.  (TOFU for bitcoin
addresses, or at least be able to call someone you know who also uses the
service and compare static addresses).

Maybe in the payment address case the service should choose the derivation
factor and communicate it and the client with the static address, as
suggeste by Alan Reiner because then it can also serve the function of
allowing the service to tie the payment to the users account.

People also mention payment protocol for certifying addresses however I
think it is useful to have address level TOFU / static to principal
verification because it is simpler for harware wallets, maps to account
number concept users understand, and doesnt rely on the CA infrastructure. 
Also the typical payment protcol is talking about a message constructed by a
web app.  Thats millions of lines of web server, script language, db code
etc in play on an online server.  The static address private key would be
airgapped from that mess.  

Mike Hearn proposed if I understand that you could something analogous and
upload in batches signed payment protocol sub-messages from a different CA
certificate key.  But I think the above is simpler, and its useful to have
something that works at the low level.  What we have now is like SSH without
the knownhosts cache.  Lets add it.  It can then play with the payment
protocol at the address level.

Adam

On Wed, Jan 15, 2014 at 03:44:17PM -0500, Jeff Garzik wrote:
>   "static address" seems like a reasonable attempt at describing intended
>   use/direction.
>
>   On Wed, Jan 15, 2014 at 3:38 PM, Gregory Maxwell
>   <[1]gmaxwell at gmail.com> wrote:
>
>   On Wed, Jan 15, 2014 at 12:22 PM, Ben Davenport
>   <[2]bendavenport at gmail.com> wrote:
>   > But may I suggest we consider changing the name "stealth address" to
>   > something more neutral?
>
>     ACK.  Regardless of the 'political' overtones, I think stealth is a
>     little cringe-worthy.
>     "Private address" would be fine if not for confusion with
>     private-keys.
>     "Static address" is perhaps the best in my view. (also helps improve
>     awareness that normal addresses are intended to be more
>     one-use-ness)
>
>   -----------------------------------------------------------------------
>   -------
>   CenturyLink Cloud: The Leader in Enterprise Cloud Services.
>   Learn Why More Businesses Are Choosing CenturyLink Cloud For
>   Critical Workloads, Development Environments & Everything In Between.
>   Get a Quote or Start a Free Trial Today.
>   [3]http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ost
>   g.clktrk
>   _______________________________________________
>   Bitcoin-development mailing list
>   [4]Bitcoin-development at lists.sourceforge.net
>   [5]https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>   --
>   Jeff Garzik
>   Bitcoin core developer and open source evangelist
>   BitPay, Inc.      [6]https://bitpay.com/
>
>References
>
>   1. mailto:gmaxwell at gmail.com
>   2. mailto:bendavenport at gmail.com
>   3. http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk
>   4. mailto:Bitcoin-development at lists.sourceforge.net
>   5. https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>   6. https://bitpay.com/

>------------------------------------------------------------------------------
>CenturyLink Cloud: The Leader in Enterprise Cloud Services.
>Learn Why More Businesses Are Choosing CenturyLink Cloud For
>Critical Workloads, Development Environments & Everything In Between.
>Get a Quote or Start a Free Trial Today.
>http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk

>_______________________________________________
>Bitcoin-development mailing list
>Bitcoin-development at lists.sourceforge.net
>https://lists.sourceforge.net/lists/listinfo/bitcoin-development




From roy at gnomon.org.uk  Wed Jan 15 23:17:34 2014
From: roy at gnomon.org.uk (Roy Badami)
Date: Wed, 15 Jan 2014 23:17:34 +0000
Subject: [Bitcoin-development] Stealth Addresses
In-Reply-To: <CAJHLa0PeYFNQS3iw-GVG5pU8P2eeuk5k0x7fQHtb4m6SEfzZ7w@mail.gmail.com>
References: <CANEZrP0huBWqgvQik9Yc26Tu4CwR0VSXcfC+qfzsZqvoU4VJGA@mail.gmail.com>
	<20140113133746.GI38964@giles.gnomon.org.uk>
	<CANEZrP1KAVhi_-cxCYe0rR9LUSYJ8MyW8=6eSJZ65FeY5ZJNuQ@mail.gmail.com>
	<20140114225321.GT38964@giles.gnomon.org.uk>
	<CANAnSg0tH_bK_19rsRRHOeZgrGYeWMhW89fXPyS4DQGmS4r_7A@mail.gmail.com>
	<CALimQCXgc0eXeOcqFGUaCpSF7gKEe87KzvLqHZwUysV3WyjjGw@mail.gmail.com>
	<CAAS2fgShChAQryfUOBp60jB-zxn2tH986fu1HfT+LsNdBYnoYg@mail.gmail.com>
	<CAJHLa0P5r2+kxy7w8G=h=TAhdk1jUoW5UOiv-euo47uQY0u9ZA@mail.gmail.com>
	<20140115230423.GU38964@giles.gnomon.org.uk>
	<CAJHLa0PeYFNQS3iw-GVG5pU8P2eeuk5k0x7fQHtb4m6SEfzZ7w@mail.gmail.com>
Message-ID: <20140115231733.GW38964@giles.gnomon.org.uk>

How about just calling them 'type S addresses'?

Not sure any other name will in reality convey much more meaning than
that.

On Wed, Jan 15, 2014 at 06:07:28PM -0500, Jeff Garzik wrote:
> "Routing address" is pretty good too.  Unsure whether the synergy and
> familiarity with bank routing numbers improves the situation, or
> not...
> 
> 
> On Wed, Jan 15, 2014 at 6:04 PM, Roy Badami <roy at gnomon.org.uk> wrote:
> > On Wed, Jan 15, 2014 at 03:44:17PM -0500, Jeff Garzik wrote:
> >> "static address" seems like a reasonable attempt at describing intended
> >> use/direction.
> >
> > ...as opposed to an address configured by DHCP?
> >
> > More seriously, I don't think a typical user will understand anything from
> > the phrase "static address".  But it is a neutral name, and it is shorter
> > than "address-of-a-type-for-which-reuse-is-not-deprecated". :-)
> >
> > -roy
> 
> 
> 
> -- 
> Jeff Garzik
> Bitcoin core developer and open source evangelist
> BitPay, Inc.      https://bitpay.com/
> 



From roy at gnomon.org.uk  Wed Jan 15 23:19:48 2014
From: roy at gnomon.org.uk (Roy Badami)
Date: Wed, 15 Jan 2014 23:19:48 +0000
Subject: [Bitcoin-development] Stealth Addresses
In-Reply-To: <20140115231733.GW38964@giles.gnomon.org.uk>
References: <20140113133746.GI38964@giles.gnomon.org.uk>
	<CANEZrP1KAVhi_-cxCYe0rR9LUSYJ8MyW8=6eSJZ65FeY5ZJNuQ@mail.gmail.com>
	<20140114225321.GT38964@giles.gnomon.org.uk>
	<CANAnSg0tH_bK_19rsRRHOeZgrGYeWMhW89fXPyS4DQGmS4r_7A@mail.gmail.com>
	<CALimQCXgc0eXeOcqFGUaCpSF7gKEe87KzvLqHZwUysV3WyjjGw@mail.gmail.com>
	<CAAS2fgShChAQryfUOBp60jB-zxn2tH986fu1HfT+LsNdBYnoYg@mail.gmail.com>
	<CAJHLa0P5r2+kxy7w8G=h=TAhdk1jUoW5UOiv-euo47uQY0u9ZA@mail.gmail.com>
	<20140115230423.GU38964@giles.gnomon.org.uk>
	<CAJHLa0PeYFNQS3iw-GVG5pU8P2eeuk5k0x7fQHtb4m6SEfzZ7w@mail.gmail.com>
	<20140115231733.GW38964@giles.gnomon.org.uk>
Message-ID: <20140115231948.GX38964@giles.gnomon.org.uk>

On Wed, Jan 15, 2014 at 11:17:33PM +0000, I wrote:
> How about just calling them 'type S addresses'?

(Assuming they're encoded in such as way that they actually start with 's'.
Otherwise whatever prefix is actually used, obviously.)



From boydb at midnightdesign.ws  Wed Jan 15 23:07:07 2014
From: boydb at midnightdesign.ws (Brooks Boyd)
Date: Wed, 15 Jan 2014 17:07:07 -0600
Subject: [Bitcoin-development] Tor / SPV
In-Reply-To: <5747D5DF-879B-4A60-8BD6-18251E7D5F47@plan99.net>
References: <5747D5DF-879B-4A60-8BD6-18251E7D5F47@plan99.net>
Message-ID: <CANg-TZBCSvVeDTNKQSPV-Fw+uZ8np04WoE=o0J+8wULBHrsgKQ@mail.gmail.com>

>
> 2) Secondly, we bump the protocol version, add a service flag and
> introduce a new P2P protocol command ?tor??. If a client sends a tor?
> message to a node that has the new service flag set, it will respond with a
> new ?tor? message that contains a regular addr packet, with a single
> address, the IPv6-ified version of its hidden service name.
>


Rather than a separate message type that implies binding a clearnet IP to a
hidden service ID, why not add the service flag that the peer would like
Tor addresses, and the remote peer can then add IPv6-ified hidden service
addresses to "addr" messages? May need to modify the network address format
to include the ability to differentiate IPv6 clearnet vs. Tor addresses,
but then you remove the implication that a node has to give both public and
private IPs to a peer. If it's part of a batch of "addr"s, it could be my
own hidden service ID, but it could also be one that I learned from someone
else and is now propagating, for anyone to bootstrap with Tor hidden
service peers if they'd like.

Brooks
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140115/2f39ea14/attachment.html>

From mike at plan99.net  Wed Jan 15 23:32:38 2014
From: mike at plan99.net (Mike Hearn)
Date: Thu, 16 Jan 2014 00:32:38 +0100
Subject: [Bitcoin-development] Tor / SPV
In-Reply-To: <CANg-TZBCSvVeDTNKQSPV-Fw+uZ8np04WoE=o0J+8wULBHrsgKQ@mail.gmail.com>
References: <5747D5DF-879B-4A60-8BD6-18251E7D5F47@plan99.net>
	<CANg-TZBCSvVeDTNKQSPV-Fw+uZ8np04WoE=o0J+8wULBHrsgKQ@mail.gmail.com>
Message-ID: <CANEZrP1iP6J5gczrQ-+Lzq4uohys7Rrfa0c5F0r-cqx3OJMDGg@mail.gmail.com>

>
> May need to modify the network address format to include the ability to
> differentiate IPv6 clearnet vs. Tor addresses
>

sipa already implemented some clever hack where the 80-bit Tor keys are
mapped to a subregion of reserved IPv6 space, giving magical IPv6 hidden
service addresses. So addr packets can and do already contain onion
addresses.


> but then you remove the implication that a node has to give both public
> and private IPs to a peer. If it's part of a batch of "addr"s, it could be
> my own hidden service ID, but it could also be one that I learned from
> someone else and is now propagating, for anyone to bootstrap with Tor
> hidden service peers if they'd like.
>

Hmm. So you mean that we pick a set of peers we believe to not be sybils of
each other, but they might give us hidden services run by other people? I
need to think about that. If they're getting the hidden services just from
addr announcements themselves, then you just punt the issue up a layer -
what stops me generating 10000 hidden service keys that all map to my same
malicious node, announcing them, and then waiting for the traffic to
arrive? If clearnet nodes inform of their own hidden service IDs, that
issue is avoided.

My goal here is not necessarily to hide P2P nodes - we still need lots of
clearnet P2P nodes for the forseeable future no matter what. Rather we're
just using hidden services as a way to get authentication and encryption.
Actually the 6-hop hidden service circuits are overkill for this
application, a 3-hop circuit would work just as well for most nodes that
aren't Tor-exclusive.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140116/bb7a5a6d/attachment.html>

From jeremy at taplink.co  Thu Jan 16 00:05:27 2014
From: jeremy at taplink.co (Jeremy Spilman)
Date: Wed, 15 Jan 2014 16:05:27 -0800
Subject: [Bitcoin-development] Stealth Addresses
In-Reply-To: <CAJHLa0P5r2+kxy7w8G=h=TAhdk1jUoW5UOiv-euo47uQY0u9ZA@mail.gmail.com>
References: <20140106120338.GA14918@savin>
	<op.w9c5o7vgyldrnw@laptop-air.hsd1.ca.comcast.net>
	<20140110102037.GB25749@savin>
	<op.w9kkxcityldrnw@laptop-air.hsd1.ca.comcast.net>
	<CABsx9T2G=yqSUGr0+Ju5-z9P++uS20AwLC+c3DnFMHtcQjQK6w@mail.gmail.com>
	<CAAS2fgTz0TaGhym_35V3N2-vHVzU9BeuV8q+QJjwh5bg77FEZg@mail.gmail.com>
	<CANEZrP0huBWqgvQik9Yc26Tu4CwR0VSXcfC+qfzsZqvoU4VJGA@mail.gmail.com>
	<20140113133746.GI38964@giles.gnomon.org.uk>
	<CANEZrP1KAVhi_-cxCYe0rR9LUSYJ8MyW8=6eSJZ65FeY5ZJNuQ@mail.gmail.com>
	<20140114225321.GT38964@giles.gnomon.org.uk>
	<CANAnSg0tH_bK_19rsRRHOeZgrGYeWMhW89fXPyS4DQGmS4r_7A@mail.gmail.com>
	<CALimQCXgc0eXeOcqFGUaCpSF7gKEe87KzvLqHZwUysV3WyjjGw@mail.gmail.com>
	<CAAS2fgShChAQryfUOBp60jB-zxn2tH986fu1HfT+LsNdBYnoYg@mail.gmail.com>
	<CAJHLa0P5r2+kxy7w8G=h=TAhdk1jUoW5UOiv-euo47uQY0u9ZA@mail.gmail.com>
Message-ID: <op.w9q6jdsayldrnw@laptop-air.hsd1.ca.comcast.net>

Might I propose "reusable address".

I think that describes it best to any non-programmer, and even more so  
encourages wallets to present options as 'one time use' vs 'reusable'.

It definitely packs a marketing punch which could help drive adoption. The  
feature is only useful if/when broadly adopted.

I think it meets all the criteria required:

   - Communication between parties is a single message from the payee,  
which may be public
   - Multiple payments to the same address are not publicly linkable on the  
blockchain
   - The payee has explicitly designated they expect to receive more than  
one payment at that address
   - Payer can publicly prove they made a payment to the reusable address  
by revealing a secret

I have high hopes for this feature. The war *against* address reuse may  
soon be a distant memory.

On Wed, 15 Jan 2014 12:44:17 -0800, Jeff Garzik <jgarzik at bitpay.com> wrote:
> "static address" seems like a reasonable attempt at describing intended  
> use/direction.
>
> On Wed, Jan 15, 2014 at 3:38 PM, Gregory Maxwell <gmaxwell at gmail.com>  
> wrote:
>> On Wed, Jan 15, 2014 at 12:22 PM, Ben Davenport  
>> <bendavenport at gmail.com> wrote:
>>> But may I suggest we consider changing the name "stealth address" to
>>> something more neutral?
>>
>> ACK.  Regardless of the 'political' overtones, I think stealth is a
>> little cringe-worthy.
>>
>> "Private address" would be fine if not for confusion with private-keys.
>>
>> "Static address" is perhaps the best in my view. (also helps improve
>> awareness that normal addresses are intended to be more one-use-ness)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140115/8d3a6dc5/attachment.html>

From robert at mckay.com  Wed Jan 15 23:37:15 2014
From: robert at mckay.com (Robert McKay)
Date: Wed, 15 Jan 2014 23:37:15 +0000
Subject: [Bitcoin-development] Tor / SPV
In-Reply-To: <5747D5DF-879B-4A60-8BD6-18251E7D5F47@plan99.net>
References: <5747D5DF-879B-4A60-8BD6-18251E7D5F47@plan99.net>
Message-ID: <60844494f46e330ec38f9275bc33f30b@webmail.mckay.com>

On Wed, 15 Jan 2014 23:51:21 +0100, Mike Hearn wrote:
> The goal of all that is that we get to keep our existing IPv4 based
> anti-sybil heuristics, so we can?t possibly make anything worse,
> only better. Plus, we?ve now set things up so in future if/when we
> come up with a better anti-sybil system based on anonymous identities
> or other fancy crypto, we can take out the ?connect via clearnet?
> step and go straight to using hidden services with only a very small
> set of code changes and no new protocol work.

I think it might be ok to use proof-of-stake on as an anti-sybil scheme 
on tor.. people would obviously not want to associate their wallet with 
their IP address, but is there any harm in associating it with a 
(temporary) tor service id (especially one that isn't used for anything 
other than relaying bitcoin transactions)? If each node you connect too 
can sign some challenge with a key that controls some BTC (and your 
client node verifies that the funds are different) then that might be 
useful.. even if it were only a small 0.01BTC stake that would be 
similar to the cost of obtaining another IP through a cheap VPS or VPN 
and significantly higher than the cost to an attacker who is able to 
MITM everything and operate on any IP anyway.

Rob



From gmaxwell at gmail.com  Thu Jan 16 00:10:47 2014
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Wed, 15 Jan 2014 16:10:47 -0800
Subject: [Bitcoin-development] Stealth Addresses
In-Reply-To: <op.w9q6jdsayldrnw@laptop-air.hsd1.ca.comcast.net>
References: <20140106120338.GA14918@savin>
	<op.w9c5o7vgyldrnw@laptop-air.hsd1.ca.comcast.net>
	<20140110102037.GB25749@savin>
	<op.w9kkxcityldrnw@laptop-air.hsd1.ca.comcast.net>
	<CABsx9T2G=yqSUGr0+Ju5-z9P++uS20AwLC+c3DnFMHtcQjQK6w@mail.gmail.com>
	<CAAS2fgTz0TaGhym_35V3N2-vHVzU9BeuV8q+QJjwh5bg77FEZg@mail.gmail.com>
	<CANEZrP0huBWqgvQik9Yc26Tu4CwR0VSXcfC+qfzsZqvoU4VJGA@mail.gmail.com>
	<20140113133746.GI38964@giles.gnomon.org.uk>
	<CANEZrP1KAVhi_-cxCYe0rR9LUSYJ8MyW8=6eSJZ65FeY5ZJNuQ@mail.gmail.com>
	<20140114225321.GT38964@giles.gnomon.org.uk>
	<CANAnSg0tH_bK_19rsRRHOeZgrGYeWMhW89fXPyS4DQGmS4r_7A@mail.gmail.com>
	<CALimQCXgc0eXeOcqFGUaCpSF7gKEe87KzvLqHZwUysV3WyjjGw@mail.gmail.com>
	<CAAS2fgShChAQryfUOBp60jB-zxn2tH986fu1HfT+LsNdBYnoYg@mail.gmail.com>
	<CAJHLa0P5r2+kxy7w8G=h=TAhdk1jUoW5UOiv-euo47uQY0u9ZA@mail.gmail.com>
	<op.w9q6jdsayldrnw@laptop-air.hsd1.ca.comcast.net>
Message-ID: <CAAS2fgR8QTaYjojb4GL-pphtzVcaSM96TCFN6crr=aTxoc5zAQ@mail.gmail.com>

On Wed, Jan 15, 2014 at 4:05 PM, Jeremy Spilman <jeremy at taplink.co> wrote:
> Might I propose "reusable address".

I like this too.



From mark at monetize.io  Thu Jan 16 00:24:03 2014
From: mark at monetize.io (Mark Friedenbach)
Date: Wed, 15 Jan 2014 16:24:03 -0800
Subject: [Bitcoin-development] Stealth Addresses
In-Reply-To: <op.w9q6jdsayldrnw@laptop-air.hsd1.ca.comcast.net>
References: <20140106120338.GA14918@savin>	<op.w9c5o7vgyldrnw@laptop-air.hsd1.ca.comcast.net>	<20140110102037.GB25749@savin>	<op.w9kkxcityldrnw@laptop-air.hsd1.ca.comcast.net>	<CABsx9T2G=yqSUGr0+Ju5-z9P++uS20AwLC+c3DnFMHtcQjQK6w@mail.gmail.com>	<CAAS2fgTz0TaGhym_35V3N2-vHVzU9BeuV8q+QJjwh5bg77FEZg@mail.gmail.com>	<CANEZrP0huBWqgvQik9Yc26Tu4CwR0VSXcfC+qfzsZqvoU4VJGA@mail.gmail.com>	<20140113133746.GI38964@giles.gnomon.org.uk>	<CANEZrP1KAVhi_-cxCYe0rR9LUSYJ8MyW8=6eSJZ65FeY5ZJNuQ@mail.gmail.com>	<20140114225321.GT38964@giles.gnomon.org.uk>	<CANAnSg0tH_bK_19rsRRHOeZgrGYeWMhW89fXPyS4DQGmS4r_7A@mail.gmail.com>	<CALimQCXgc0eXeOcqFGUaCpSF7gKEe87KzvLqHZwUysV3WyjjGw@mail.gmail.com>	<CAAS2fgShChAQryfUOBp60jB-zxn2tH986fu1HfT+LsNdBYnoYg@mail.gmail.com>	<CAJHLa0P5r2+kxy7w8G=h=TAhdk1jUoW5UOiv-euo47uQY0u9ZA@mail.gmail.com>
	<op.w9q6jdsayldrnw@laptop-air.hsd1.ca.comcast.net>
Message-ID: <52D726A3.3080302@monetize.io>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On 01/15/2014 04:05 PM, Jeremy Spilman wrote:
> Might I propose "reusable address".

Say it like it is. This is the only suggestion so far that I really like.

No amount of finger wagging got people to stop using the block chain
for data storage, but news of the OP_RETURN change to relay rules in
0.9 got people to at least be less damaging in how they do it.

Having an officially named "reusable address" format won't stop people
from doing dumb things (e.g. vanity addresses), but at least maybe
they'll stop using traditional addresses for it.

Mark
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.14 (GNU/Linux)
Comment: GPGTools - http://gpgtools.org
Comment: Using GnuPG with Thunderbird - http://www.enigmail.net/

iQIcBAEBAgAGBQJS1yafAAoJEAdzVfsmodw40ccQAI0EFAyODzx7yXvlq9idctSd
xisH4xsOMlsW4lV7xReMnhQsCZ5A+qTMcCd7n7a0bveAxWg1srqBDONLXtHZfwiN
Px/TfoJKPt1oIHnCoyN8G6pcuHhbUbL3lV19sH02dGnM9Ystf9F4oeqwDTITYb5i
huqShMfaTdLEig76zPCLQcOT88deIWZgIxc3R4Do4aCDoyh//2LVZKfzQyEJzVms
njgxcVLVRlomofPW+a+60zm/iLsrbmDjwvWSH8IB4d5ik1aO3732pWgNz3X4HSLk
1s9hVEnpN3GLIWmCcPkbrE9RZtcitghjwrt/xOMKQaqprUuFW4COc0fsfzdLIRtP
bhrA/dnhVSxiUnjc7gLJBnB9+udVKdk2aTdJvSMB1PvhW9QKPjU/H4AW/yQYmism
rSr9imurbi3WosTewtwdcQD47SNS4ALMh//3MeHWOBUMEHP7Tki6i8qR+/xOK+vx
zMc4dnnTQsbgu9bKhrU7ia4eoe/UDvPoLck5cb2+PwYTInfdYBWn1ivbHO7S5ppP
R+/Tc8h3TyLLcPQmH0tpSX+C/YwvctiGsd+iXBRfSTe7o+0wLn8NcDNGi7QI0ipQ
iCHJup9K0FJqf9OuH9qYeaWht7cyuRJ5H4P/HNESGZaPSdTHDpStSmAzdtbBZOkI
qrFg7irL2+CxXwI4H6vC
=XEtz
-----END PGP SIGNATURE-----



From jeremy at taplink.co  Thu Jan 16 01:02:10 2014
From: jeremy at taplink.co (Jeremy Spilman)
Date: Wed, 15 Jan 2014 17:02:10 -0800
Subject: [Bitcoin-development] unlinakble static address? & spv-privacy
 (Re: Stealth Addresses)
In-Reply-To: <20140115230901.GA25135@netbook.cypherspace.org>
References: <CABsx9T2G=yqSUGr0+Ju5-z9P++uS20AwLC+c3DnFMHtcQjQK6w@mail.gmail.com>
	<CAAS2fgTz0TaGhym_35V3N2-vHVzU9BeuV8q+QJjwh5bg77FEZg@mail.gmail.com>
	<CANEZrP0huBWqgvQik9Yc26Tu4CwR0VSXcfC+qfzsZqvoU4VJGA@mail.gmail.com>
	<20140113133746.GI38964@giles.gnomon.org.uk>
	<CANEZrP1KAVhi_-cxCYe0rR9LUSYJ8MyW8=6eSJZ65FeY5ZJNuQ@mail.gmail.com>
	<20140114225321.GT38964@giles.gnomon.org.uk>
	<CANAnSg0tH_bK_19rsRRHOeZgrGYeWMhW89fXPyS4DQGmS4r_7A@mail.gmail.com>
	<CALimQCXgc0eXeOcqFGUaCpSF7gKEe87KzvLqHZwUysV3WyjjGw@mail.gmail.com>
	<CAAS2fgShChAQryfUOBp60jB-zxn2tH986fu1HfT+LsNdBYnoYg@mail.gmail.com>
	<CAJHLa0P5r2+kxy7w8G=h=TAhdk1jUoW5UOiv-euo47uQY0u9ZA@mail.gmail.com>
	<20140115230901.GA25135@netbook.cypherspace.org>
Message-ID: <op.w9q85wkhyldrnw@laptop-air.hsd1.ca.comcast.net>

On Wed, 15 Jan 2014 15:09:01 -0800, Adam Back <adam at cypherspace.org> wrote:
> I was meaning to comment on the SPV privacy properties.
>
> For full-node use these unlinkable static addresses have quite nice
> properties.  It also nicely solves the problem of having to educate users
> and wallet authors to not reuse addresses.  But for SPV nodes they have  
> no direct-way to find the payments.  So then in Peter Todd's variant  
> (maybe it was suggested by Greg Maxwell?) there is a second address so  
> that the SPV
> client can delegate detection to a full node without giving it the  
> private key allowing it to spend!  (This is something analogous to bloom  
> filtering).

The second pubKey is useful for delegating scanning, or even just being  
able to scan for transactions yourself without keeping bitcoin-encumbered  
private keys decrypted in memory. So even while running your own full node  
there are good reasons to use a second pubKey to derive the shared secret.

> But I think its moderately expensive for the full node because it has to  
> do a DH calculation per transaction and its not precomputable so there  
> is IO
> per query.  (In the P version in fact only payments which are thereby
> reconizable as unlinkable static need to be processed).

And of course, if you have multiple reuseable addresses, then you're doing  
this calculation separately to check each one.

So the load on a popular centralized service would be quite high, which  
you may consider a feature.

>
> Then an artificial prefix is proposed to constrain the query to a subset,
> however that leaks to everyone so in some ways its a worse privacy leak
> than bloom filtering.  It can be used to rule out recipients and could be
> quite a powerful extra lever for statistical analysis.

Choosing how many bits to put in the prefix may be difficult, particularly  
if transaction load changes dramatically over time. 0 or 1 bits may be  
just fine for a single user running their own node, whereas a central  
service might want 4 or 5 bits to keep their computation costs scalable.

But I think it's great people can choose how to trade privacy for  
computation/bandwidth however they want, and services can compete to offer  
monitoring for 0+ bit prefixes.

> (And also there is proposed a version of the prefix computed via
> brute-force to make it somewhat stealthy still).

I think in this case the hash grinding of the prefix would only being used  
if thats how transactions are being indexed. I don't think it adds any  
privacy, it's just added work we're forced to do in order for the prefix  
to work as designed. Peter, please correct me if I'm wrong.


>
> Maybe in the payment address case the service should choose the  
> derivation factor and communicate it and the client with the static
> address, as suggested by Alan Reiner because then it can also serve
> the function of allowing the service to tie the payment to the users
> account.

I think any change which requires more than a single published public  
message (e.g. a posting in a forum, or in a README.me in Github) should be  
seen as solving an entirely different problem.

If you have directed communication from payee->payer, I think there's  
simply no reason to do it this way. (By "this way" I mean ECDH with  
OP_RETURN P).

We could try to define a different reusable address type, for when you can  
make a single directed message from payer->payee, and in that case there's  
probably no need for ECDH or the prefix, like Alan's proposal.

But once you admit having that directed communication, then you are  
swimming very close to the payment protocol.




From odinn.cyberguerrilla at riseup.net  Thu Jan 16 01:16:14 2014
From: odinn.cyberguerrilla at riseup.net (Odinn Cyberguerrilla)
Date: Wed, 15 Jan 2014 17:16:14 -0800
Subject: [Bitcoin-development] Stealth Addresses
In-Reply-To: <op.w9q6jdsayldrnw@laptop-air.hsd1.ca.comcast.net>
References: <20140106120338.GA14918@savin>
	<op.w9c5o7vgyldrnw@laptop-air.hsd1.ca.comcast.net>
	<20140110102037.GB25749@savin>
	<op.w9kkxcityldrnw@laptop-air.hsd1.ca.comcast.net>
	<CABsx9T2G=yqSUGr0+Ju5-z9P++uS20AwLC+c3DnFMHtcQjQK6w@mail.gmail.com>
	<CAAS2fgTz0TaGhym_35V3N2-vHVzU9BeuV8q+QJjwh5bg77FEZg@mail.gmail.com>
	<CANEZrP0huBWqgvQik9Yc26Tu4CwR0VSXcfC+qfzsZqvoU4VJGA@mail.gmail.com>
	<20140113133746.GI38964@giles.gnomon.org.uk>
	<CANEZrP1KAVhi_-cxCYe0rR9LUSYJ8MyW8=6eSJZ65FeY5ZJNuQ@mail.gmail.com>
	<20140114225321.GT38964@giles.gnomon.org.uk>
	<CANAnSg0tH_bK_19rsRRHOeZgrGYeWMhW89fXPyS4DQGmS4r_7A@mail.gmail.com>
	<CALimQCXgc0eXeOcqFGUaCpSF7gKEe87KzvLqHZwUysV3WyjjGw@mail.gmail.com>
	<CAAS2fgShChAQryfUOBp60jB-zxn2tH986fu1HfT+LsNdBYnoYg@mail.gmail.com>
	<CAJHLa0P5r2+kxy7w8G=h=TAhdk1jUoW5UOiv-euo47uQY0u9ZA@mail.gmail.com>
	<op.w9q6jdsayldrnw@laptop-air.hsd1.ca.comcast.net>
Message-ID: <9eaa4a24adabaebcd34a724926fdcea8.squirrel@fulvetta.riseup.net>

Yes. Good idea(s).

> Might I propose "reusable address".
>
> I think that describes it best to any non-programmer, and even more so
> encourages wallets to present options as 'one time use' vs 'reusable'.
>
> It definitely packs a marketing punch which could help drive adoption. The
> feature is only useful if/when broadly adopted.
>
> I think it meets all the criteria required:
>
>    - Communication between parties is a single message from the payee,
> which may be public
>    - Multiple payments to the same address are not publicly linkable on
> the
> blockchain
>    - The payee has explicitly designated they expect to receive more than
> one payment at that address
>    - Payer can publicly prove they made a payment to the reusable address
> by revealing a secret
>
> I have high hopes for this feature. The war *against* address reuse may
> soon be a distant memory.
>
> On Wed, 15 Jan 2014 12:44:17 -0800, Jeff Garzik <jgarzik at bitpay.com>
> wrote:
>> "static address" seems like a reasonable attempt at describing intended
>> use/direction.
>>
>> On Wed, Jan 15, 2014 at 3:38 PM, Gregory Maxwell <gmaxwell at gmail.com>
>> wrote:
>>> On Wed, Jan 15, 2014 at 12:22 PM, Ben Davenport
>>> <bendavenport at gmail.com> wrote:
>>>> But may I suggest we consider changing the name "stealth address" to
>>>> something more neutral?
>>>
>>> ACK.  Regardless of the 'political' overtones, I think stealth is a
>>> little cringe-worthy.
>>>
>>> "Private address" would be fine if not for confusion with private-keys.
>>>
>>> "Static address" is perhaps the best in my view. (also helps improve
>>> awareness that normal addresses are intended to be more
>>> one-use-ness)------------------------------------------------------------------------------
> CenturyLink Cloud: The Leader in Enterprise Cloud Services.
> Learn Why More Businesses Are Choosing CenturyLink Cloud For
> Critical Workloads, Development Environments & Everything In Between.
> Get a Quote or Start a Free Trial Today.
> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk_______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>





From gmaxwell at gmail.com  Thu Jan 16 01:23:04 2014
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Wed, 15 Jan 2014 17:23:04 -0800
Subject: [Bitcoin-development] Bait for reusable addresses
Message-ID: <CAAS2fgQmsxjkQFSiCdeMoVMaqq5720KpUpdkKZOE+XytHsWw0w@mail.gmail.com>

One challenge with reusable addresses is that while they result in a
small constant overhead for full nodes in searching for their own
transactions they create large overheads for SPV nodes.

One way to address this is for the SPV nodes to hand their servers
their blinding private key so that the server may test addresses on
their behalf. The primary problem with this is that it is
non-reputable:  If I show you a blinding private key and say a set of
transactions are related you will be utterly convinced of it, the
transactions really are related. This makes the privacy brittle.

It also has a downside of not being indexable for the server, the
server must do O(clients * reusable-address-txn) work and the work
includes an ECC multiply.

An idea that Adam Back had originally proposed was including optional
"bloom bait", a small token? say 8 bits? that distinguished
transactions which allowed an anonymity set vs filtering trade off.
Such a bait would be indexable, enabling faster lookup too.

But bloom bait has privacy problems more severe than the current SPV
bloom filtering. While you leak information to your SPV servers today
if you use bloom filtering the leak usually goes no further. So a
compromise requires both a statistical attack _and_ using SPV servers
that log data against your interest.  With bloom bait the whole
network can see the relation. That is unfortunate.

I suggest instead that with optional bait is included in an address
that the sender compute H(nonce-pubkey) and then pick one byte at
random out of the first 16 and xor it with the specified bait and
store the result in the transaction.  An SPV server can now index the
bait as it comes in by extracting 16 8-bit keys from each transaction
(the 16 bytes xored with the bait in the transaction).  When the
client wants to search for transactions it can give the server a list
of keys its interested in? including their real key and number of
random number of cover keys.

ObTechnicalWank:  This is a specific simple instance of a general
class of solutions which are related to locally decodable error
correcting codes: E.g. the transaction data represents a codeword in a
vector-space and the degree of freedom provided by the adjustable
prefix is used to ensure that codeword is never more than a certain
distance from a specified point.  The point isn't made public in the
transaction and it's hidden from the server by providing several
points.   There is still an information leak here? as if someone
believes a set of transactions are related they can intersect their
radiuses and test if the intersection is empty, and if it's not assume
that they found the secret bait? but it is substantially lower an
information leak than the prefix case.

I didn't give any though into the parameters 8-bits and 16 dimensions.
Some reasoning should be done to fix the parameters in order to make
them the most useful: e.g.

Systems derived from more complex linear codes might give better
performance, e.g. two secret bloom baits, two prefixes in the
transaction bait0^random_char[0-8], bait1^random_char[0-8],  server
extracts 16 keys.. and returns to the client transactions which have
at least two key matches with their list.

Obviously whatever is used needs to be easy to implement, but schemes
loosely based on fountain codes should only require picking some
things and xoring... so they should be simple enough.



From gmaxwell at gmail.com  Thu Jan 16 01:32:31 2014
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Wed, 15 Jan 2014 17:32:31 -0800
Subject: [Bitcoin-development] unlinakble static address? & spv-privacy
 (Re: Stealth Addresses)
In-Reply-To: <op.w9q85wkhyldrnw@laptop-air.hsd1.ca.comcast.net>
References: <CABsx9T2G=yqSUGr0+Ju5-z9P++uS20AwLC+c3DnFMHtcQjQK6w@mail.gmail.com>
	<CAAS2fgTz0TaGhym_35V3N2-vHVzU9BeuV8q+QJjwh5bg77FEZg@mail.gmail.com>
	<CANEZrP0huBWqgvQik9Yc26Tu4CwR0VSXcfC+qfzsZqvoU4VJGA@mail.gmail.com>
	<20140113133746.GI38964@giles.gnomon.org.uk>
	<CANEZrP1KAVhi_-cxCYe0rR9LUSYJ8MyW8=6eSJZ65FeY5ZJNuQ@mail.gmail.com>
	<20140114225321.GT38964@giles.gnomon.org.uk>
	<CANAnSg0tH_bK_19rsRRHOeZgrGYeWMhW89fXPyS4DQGmS4r_7A@mail.gmail.com>
	<CALimQCXgc0eXeOcqFGUaCpSF7gKEe87KzvLqHZwUysV3WyjjGw@mail.gmail.com>
	<CAAS2fgShChAQryfUOBp60jB-zxn2tH986fu1HfT+LsNdBYnoYg@mail.gmail.com>
	<CAJHLa0P5r2+kxy7w8G=h=TAhdk1jUoW5UOiv-euo47uQY0u9ZA@mail.gmail.com>
	<20140115230901.GA25135@netbook.cypherspace.org>
	<op.w9q85wkhyldrnw@laptop-air.hsd1.ca.comcast.net>
Message-ID: <CAAS2fgTRKgkO15VUvVgttP-iEBNF4=G+++Xo-XsaRBmOxyXXKA@mail.gmail.com>

On Wed, Jan 15, 2014 at 5:02 PM, Jeremy Spilman <jeremy at taplink.co> wrote:
> Choosing how many bits to put in the prefix may be difficult, particularly
> if transaction load changes dramatically over time. 0 or 1 bits may be
> just fine for a single user running their own node, whereas a central
> service might want 4 or 5 bits to keep their computation costs scalable.

Ignoring prefixes the cost for each reusable address is only a small
percentage of the full node cost (rational: each transaction has one
or more ECDSA signatures, and the derivation is no more expensive), so
I would only expect computation to be an issue for large centralized
services. (non-full nodes suffer more from just the bandwidth impact).

I'd point out that regardless of how long the desired prefix is, the
encoded prefix should probably always be constant length in all
reusable addresses. If you don't want a particular prefix then the
sender should just pick random data for the rest of the space. There
is no need to publish any additional distinguishing data in the form
of how long the prefix is.



From eric at ericmartindale.com  Thu Jan 16 00:44:29 2014
From: eric at ericmartindale.com (Eric Martindale)
Date: Wed, 15 Jan 2014 19:44:29 -0500
Subject: [Bitcoin-development] Stealth Addresses
In-Reply-To: <op.w9q6jdsayldrnw@laptop-air.hsd1.ca.comcast.net>
References: <20140106120338.GA14918@savin>
	<op.w9c5o7vgyldrnw@laptop-air.hsd1.ca.comcast.net>
	<20140110102037.GB25749@savin>
	<op.w9kkxcityldrnw@laptop-air.hsd1.ca.comcast.net>
	<CABsx9T2G=yqSUGr0+Ju5-z9P++uS20AwLC+c3DnFMHtcQjQK6w@mail.gmail.com>
	<CAAS2fgTz0TaGhym_35V3N2-vHVzU9BeuV8q+QJjwh5bg77FEZg@mail.gmail.com>
	<CANEZrP0huBWqgvQik9Yc26Tu4CwR0VSXcfC+qfzsZqvoU4VJGA@mail.gmail.com>
	<20140113133746.GI38964@giles.gnomon.org.uk>
	<CANEZrP1KAVhi_-cxCYe0rR9LUSYJ8MyW8=6eSJZ65FeY5ZJNuQ@mail.gmail.com>
	<20140114225321.GT38964@giles.gnomon.org.uk>
	<CANAnSg0tH_bK_19rsRRHOeZgrGYeWMhW89fXPyS4DQGmS4r_7A@mail.gmail.com>
	<CALimQCXgc0eXeOcqFGUaCpSF7gKEe87KzvLqHZwUysV3WyjjGw@mail.gmail.com>
	<CAAS2fgShChAQryfUOBp60jB-zxn2tH986fu1HfT+LsNdBYnoYg@mail.gmail.com>
	<CAJHLa0P5r2+kxy7w8G=h=TAhdk1jUoW5UOiv-euo47uQY0u9ZA@mail.gmail.com>
	<op.w9q6jdsayldrnw@laptop-air.hsd1.ca.comcast.net>
Message-ID: <CAAf19WoHkzsfkH_U9EdEcJkZ6iy2vHc-50W4y30NQ_Ur7RGAdg@mail.gmail.com>

One variation of this, "recycled address", might avert misconceptions that
the "re-use" is exclusive to one's own identity.


Eric Martindale, relentless maker.
http://www.ericmartindale.com
+1 (919) 374-2020 | *BitMessage: *BM-2cWCmYBpV64FRSJpHHKWi1Cfc9W52jydwe
*Note:* Beginning December 11th, 2013, I will only be intermittently
available via email, SMS, and BitMessage.  As a courtesy, please leave a
detailed message so that I can respond in kind.  Thanks!


On Wed, Jan 15, 2014 at 7:05 PM, Jeremy Spilman <jeremy at taplink.co> wrote:

>  Might I propose "reusable address".
>
> I think that describes it best to any non-programmer, and even more so
> encourages wallets to present options as 'one time use' vs 'reusable'.
>
> It definitely packs a marketing punch which could help drive adoption. The
> feature is only useful if/when broadly adopted.
>
> I think it meets all the criteria required:
>
>   - Communication between parties is a single message from the payee,
> which may be public
>   - Multiple payments to the same address are not publicly linkable on the
> blockchain
>   - The payee has explicitly designated they expect to receive more than
> one payment at that address
>   - Payer can publicly prove they made a payment to the reusable address
> by revealing a secret
>
> I have high hopes for this feature. The war *against* address reuse may
> soon be a distant memory.
>
> On Wed, 15 Jan 2014 12:44:17 -0800, Jeff Garzik <jgarzik at bitpay.com>
> wrote:
>
> "static address" seems like a reasonable attempt at describing intended
> use/direction.
>
> On Wed, Jan 15, 2014 at 3:38 PM, Gregory Maxwell <gmaxwell at gmail.com>wrote:
>
>> On Wed, Jan 15, 2014 at 12:22 PM, Ben Davenport <bendavenport at gmail.com>
>> wrote:
>> > But may I suggest we consider changing the name "stealth address" to
>> > something more neutral?
>>
>> ACK.  Regardless of the 'political' overtones, I think stealth is a
>> little cringe-worthy.
>>
>> "Private address" would be fine if not for confusion with private-keys.
>>
>> "Static address" is perhaps the best in my view. (also helps improve
>>  awareness that normal addresses are intended to be more one-use-ness)
>
>
>
> ------------------------------------------------------------------------------
> CenturyLink Cloud: The Leader in Enterprise Cloud Services.
> Learn Why More Businesses Are Choosing CenturyLink Cloud For
> Critical Workloads, Development Environments & Everything In Between.
> Get a Quote or Start a Free Trial Today.
>
> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140115/dad871e2/attachment.html>

From boydb at midnightdesign.ws  Thu Jan 16 02:26:23 2014
From: boydb at midnightdesign.ws (Brooks Boyd)
Date: Wed, 15 Jan 2014 20:26:23 -0600
Subject: [Bitcoin-development] Tor / SPV
In-Reply-To: <CANEZrP1iP6J5gczrQ-+Lzq4uohys7Rrfa0c5F0r-cqx3OJMDGg@mail.gmail.com>
References: <5747D5DF-879B-4A60-8BD6-18251E7D5F47@plan99.net>
	<CANg-TZBCSvVeDTNKQSPV-Fw+uZ8np04WoE=o0J+8wULBHrsgKQ@mail.gmail.com>
	<CANEZrP1iP6J5gczrQ-+Lzq4uohys7Rrfa0c5F0r-cqx3OJMDGg@mail.gmail.com>
Message-ID: <CANg-TZAyr8LyRQ5e4DpQA8fXEbGq6kxv=peB9oYB+bU_xA98ww@mail.gmail.com>

>
> My goal here is not necessarily to hide P2P nodes - we still need lots of
> clearnet P2P nodes for the forseeable future no matter what. Rather we're
> just using hidden services as a way to get authentication and encryption.
> Actually the 6-hop hidden service circuits are overkill for this
> application, a 3-hop circuit would work just as well for most nodes that
> aren't Tor-exclusive.
>

Ah, I see, so you're intending to use the Tor hidden services not for their
original purpose (hiding), but rather as as "authentication" (someone may
spoof my clearnet IP, but only I have the private key that makes this Tor
hidden service connect to me, so you can trust when you connect to it it's
really me). So if you trust the clearnet IP to be a friendly node, that
makes a more secure connection, but if you're already talking to a bad
node, moving the communication to Tor doesn't change that. I agree the
six-hop circuits would be overkill for that; I wonder if the network
slowdown you get on Tor will be worth the increased security? Yes, you'll
be more protected from MITM, but if this is widely adopted, would the
overall transactions/second the Bitcoin network could handle go down?

Brooks
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140115/89df0023/attachment.html>

From c1.sf-bitcoin at niftybox.net  Thu Jan 16 04:29:47 2014
From: c1.sf-bitcoin at niftybox.net (Miron)
Date: Wed, 15 Jan 2014 20:29:47 -0800
Subject: [Bitcoin-development] Tor / SPV
In-Reply-To: <5747D5DF-879B-4A60-8BD6-18251E7D5F47@plan99.net>
References: <5747D5DF-879B-4A60-8BD6-18251E7D5F47@plan99.net>
Message-ID: <1389846587.19590.22.camel@mimiz>

On Wed, 2014-01-15 at 23:51 +0100, Mike Hearn wrote:
...
> 3) SPV wallets that want to get a good mix of nodes for measuring
> pending transactions identify nodes on the clearnet via their addr
> announcements+service flag, in the normal way. They select some of
> these nodes using the standard clearnet anti-sybil heuristics and
> connect without using Tor. They proceed to query them for their hidden

The SPV node could connect to the IP using Tor.  It would preserve the
privacy of the SPV node - hard to see it's running Bitcoin.  It also
reduces the ability of an attacker to MITM because the routing varies
with each exit node.





From c1.sf-bitcoin at niftybox.net  Thu Jan 16 04:30:11 2014
From: c1.sf-bitcoin at niftybox.net (Miron)
Date: Wed, 15 Jan 2014 20:30:11 -0800
Subject: [Bitcoin-development] Tor / SPV
In-Reply-To: <CANg-TZAyr8LyRQ5e4DpQA8fXEbGq6kxv=peB9oYB+bU_xA98ww@mail.gmail.com>
References: <5747D5DF-879B-4A60-8BD6-18251E7D5F47@plan99.net>
	<CANg-TZBCSvVeDTNKQSPV-Fw+uZ8np04WoE=o0J+8wULBHrsgKQ@mail.gmail.com>
	<CANEZrP1iP6J5gczrQ-+Lzq4uohys7Rrfa0c5F0r-cqx3OJMDGg@mail.gmail.com>
	<CANg-TZAyr8LyRQ5e4DpQA8fXEbGq6kxv=peB9oYB+bU_xA98ww@mail.gmail.com>
Message-ID: <1389846611.19590.24.camel@mimiz>


On Wed, 2014-01-15 at 20:26 -0600, Brooks Boyd wrote:
>         My goal here is not necessarily to hide P2P nodes - we still
>         need lots of clearnet P2P nodes for the forseeable future no
>         matter what. Rather we're just using hidden services as a way
>         to get authentication and encryption. Actually the 6-hop
>         hidden service circuits are overkill for this application, a
>         3-hop circuit would work just as well for most nodes that
>         aren't Tor-exclusive. 
>         
> 
> 
...
> communication to Tor doesn't change that. I agree the six-hop circuits
> would be overkill for that; I wonder if the network slowdown you get

BTW, I believe that the number of hops can be reduced below 3 on both
sides (client/server).  For Orchid, this will require a change to
CircuitPathChooser.  For other Tor implementations, it might require
using the control port to custom-build a circuit.







From c1.sf-bitcoin at niftybox.net  Thu Jan 16 04:40:26 2014
From: c1.sf-bitcoin at niftybox.net (Miron)
Date: Wed, 15 Jan 2014 20:40:26 -0800
Subject: [Bitcoin-development] Tor / SPV
In-Reply-To: <1389846587.19590.22.camel@mimiz>
References: <5747D5DF-879B-4A60-8BD6-18251E7D5F47@plan99.net>
	<1389846587.19590.22.camel@mimiz>
Message-ID: <1389847226.19590.29.camel@mimiz>

On Wed, 2014-01-15 at 20:29 -0800, Miron wrote:
> On Wed, 2014-01-15 at 23:51 +0100, Mike Hearn wrote:
> ...
> > 3) SPV wallets that want to get a good mix of nodes for measuring
> > pending transactions identify nodes on the clearnet via their addr
> > announcements+service flag, in the normal way. They select some of
> > these nodes using the standard clearnet anti-sybil heuristics and
> > connect without using Tor. They proceed to query them for their hidden
> 
> The SPV node could connect to the IP using Tor.  It would preserve the
> privacy of the SPV node - hard to see it's running Bitcoin.  It also
> reduces the ability of an attacker to MITM because the routing varies
> with each exit node.
> 

It would also be good to gossip the mapping of (IP -> onion address).
This would allow detection of a future MITM, since the MITM can't spoof
the onion fingerprint.





From cryptocurrencies at quidecco.de  Thu Jan 16 03:54:43 2014
From: cryptocurrencies at quidecco.de (Isidor Zeuner)
Date: Thu, 16 Jan 2014 04:54:43 +0100 (CET)
Subject: [Bitcoin-development] Tor / SPV
In-Reply-To: <CANEZrP1iP6J5gczrQ-+Lzq4uohys7Rrfa0c5F0r-cqx3OJMDGg@mail.gmail.com>
References: <CANEZrP1iP6J5gczrQ-+Lzq4uohys7Rrfa0c5F0r-cqx3OJMDGg@mail.gmail.com>
	<CANg-TZBCSvVeDTNKQSPV-Fw+uZ8np04WoE=o0J+8wULBHrsgKQ@mail.gmail.com>
Message-ID: <20140116035443.E5C60DB1D40@quidecco.de>

quote:
> > but then you remove the implication that a node has to give both public
> > and private IPs to a peer. If it's part of a batch of "addr"s, it could be
> > my own hidden service ID, but it could also be one that I learned from
> > someone else and is now propagating, for anyone to bootstrap with Tor
> > hidden service peers if they'd like.
> >
>
> Hmm. So you mean that we pick a set of peers we believe to not be sybils of
> each other, but they might give us hidden services run by other people? I
> need to think about that. If they're getting the hidden services just from
> addr announcements themselves, then you just punt the issue up a layer -
> what stops me generating 10000 hidden service keys that all map to my same
> malicious node, announcing them, and then waiting for the traffic to
> arrive? If clearnet nodes inform of their own hidden service IDs, that
> issue is avoided.
>

Considering that the clearnet sybil protection also relies on scaling
up the resource requirements for an attacker, why not require hidden
service addresses following a certain pattern, like a fixed prefix?
Essentially also a PoW scheme...

> My goal here is not necessarily to hide P2P nodes - we still need lots of
> clearnet P2P nodes for the forseeable future no matter what.

What would you consider as the main merits of clearnet nodes?

Best regards,

Isidor



From g.rowe at froot.co.uk  Thu Jan 16 06:26:47 2014
From: g.rowe at froot.co.uk (Gary Rowe)
Date: Thu, 16 Jan 2014 06:26:47 +0000
Subject: [Bitcoin-development] Stealth Addresses
In-Reply-To: <CAAf19WoHkzsfkH_U9EdEcJkZ6iy2vHc-50W4y30NQ_Ur7RGAdg@mail.gmail.com>
References: <20140106120338.GA14918@savin>
	<op.w9c5o7vgyldrnw@laptop-air.hsd1.ca.comcast.net>
	<20140110102037.GB25749@savin>
	<op.w9kkxcityldrnw@laptop-air.hsd1.ca.comcast.net>
	<CABsx9T2G=yqSUGr0+Ju5-z9P++uS20AwLC+c3DnFMHtcQjQK6w@mail.gmail.com>
	<CAAS2fgTz0TaGhym_35V3N2-vHVzU9BeuV8q+QJjwh5bg77FEZg@mail.gmail.com>
	<CANEZrP0huBWqgvQik9Yc26Tu4CwR0VSXcfC+qfzsZqvoU4VJGA@mail.gmail.com>
	<20140113133746.GI38964@giles.gnomon.org.uk>
	<CANEZrP1KAVhi_-cxCYe0rR9LUSYJ8MyW8=6eSJZ65FeY5ZJNuQ@mail.gmail.com>
	<20140114225321.GT38964@giles.gnomon.org.uk>
	<CANAnSg0tH_bK_19rsRRHOeZgrGYeWMhW89fXPyS4DQGmS4r_7A@mail.gmail.com>
	<CALimQCXgc0eXeOcqFGUaCpSF7gKEe87KzvLqHZwUysV3WyjjGw@mail.gmail.com>
	<CAAS2fgShChAQryfUOBp60jB-zxn2tH986fu1HfT+LsNdBYnoYg@mail.gmail.com>
	<CAJHLa0P5r2+kxy7w8G=h=TAhdk1jUoW5UOiv-euo47uQY0u9ZA@mail.gmail.com>
	<op.w9q6jdsayldrnw@laptop-air.hsd1.ca.comcast.net>
	<CAAf19WoHkzsfkH_U9EdEcJkZ6iy2vHc-50W4y30NQ_Ur7RGAdg@mail.gmail.com>
Message-ID: <CAKm8k+3hYOEVDO+jRKLihDHbjYSVbeNMto5JvqgEy3XcK_zP4w@mail.gmail.com>

I like "reusable address".

It is very clear what the intended purpose is and gives a subtle hint that
other types of address should not be re-used.



On 16 January 2014 00:44, Eric Martindale <eric at ericmartindale.com> wrote:

> One variation of this, "recycled address", might avert misconceptions that
> the "re-use" is exclusive to one's own identity.
>
>
> Eric Martindale, relentless maker.
> http://www.ericmartindale.com
> +1 (919) 374-2020 | *BitMessage: *BM-2cWCmYBpV64FRSJpHHKWi1Cfc9W52jydwe
> *Note:* Beginning December 11th, 2013, I will only be intermittently
> available via email, SMS, and BitMessage.  As a courtesy, please leave a
> detailed message so that I can respond in kind.  Thanks!
>
>
> On Wed, Jan 15, 2014 at 7:05 PM, Jeremy Spilman <jeremy at taplink.co> wrote:
>
>>  Might I propose "reusable address".
>>
>> I think that describes it best to any non-programmer, and even more so
>> encourages wallets to present options as 'one time use' vs 'reusable'.
>>
>> It definitely packs a marketing punch which could help drive adoption.
>> The feature is only useful if/when broadly adopted.
>>
>> I think it meets all the criteria required:
>>
>>   - Communication between parties is a single message from the payee,
>> which may be public
>>   - Multiple payments to the same address are not publicly linkable on
>> the blockchain
>>   - The payee has explicitly designated they expect to receive more than
>> one payment at that address
>>   - Payer can publicly prove they made a payment to the reusable address
>> by revealing a secret
>>
>> I have high hopes for this feature. The war *against* address reuse may
>> soon be a distant memory.
>>
>> On Wed, 15 Jan 2014 12:44:17 -0800, Jeff Garzik <jgarzik at bitpay.com>
>> wrote:
>>
>> "static address" seems like a reasonable attempt at describing intended
>> use/direction.
>>
>> On Wed, Jan 15, 2014 at 3:38 PM, Gregory Maxwell <gmaxwell at gmail.com>wrote:
>>
>>> On Wed, Jan 15, 2014 at 12:22 PM, Ben Davenport <bendavenport at gmail.com>
>>> wrote:
>>> > But may I suggest we consider changing the name "stealth address" to
>>> > something more neutral?
>>>
>>> ACK.  Regardless of the 'political' overtones, I think stealth is a
>>> little cringe-worthy.
>>>
>>> "Private address" would be fine if not for confusion with private-keys.
>>>
>>> "Static address" is perhaps the best in my view. (also helps improve
>>>  awareness that normal addresses are intended to be more one-use-ness)
>>
>>
>>
>> ------------------------------------------------------------------------------
>> CenturyLink Cloud: The Leader in Enterprise Cloud Services.
>> Learn Why More Businesses Are Choosing CenturyLink Cloud For
>> Critical Workloads, Development Environments & Everything In Between.
>> Get a Quote or Start a Free Trial Today.
>>
>> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>
>>
>
>
> ------------------------------------------------------------------------------
> CenturyLink Cloud: The Leader in Enterprise Cloud Services.
> Learn Why More Businesses Are Choosing CenturyLink Cloud For
> Critical Workloads, Development Environments & Everything In Between.
> Get a Quote or Start a Free Trial Today.
>
> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140116/73f3769a/attachment.html>

From laanwj at gmail.com  Thu Jan 16 09:09:52 2014
From: laanwj at gmail.com (Wladimir)
Date: Thu, 16 Jan 2014 10:09:52 +0100
Subject: [Bitcoin-development] Bitcoin Core 0.9rc1 release schedule
Message-ID: <CA+s+GJBo7iUEJTfJw2e6qcDmdHNGdDN442Svs5ikVyUL1Jm0Wg@mail.gmail.com>

Hello all,

It has been way to long since last major release. Many improvements and new
features have been added to master since, so we'd like to do a 0.9rc1
release soon.

The current aim is next month, February 2014.

Of course there are still some open issues that need to be resolved before
release
https://github.com/bitcoin/bitcoin/issues?milestone=12&state=open

If there is something else that you're working on and needs to end up in
0.9, or know of some nasty bug in master that should absolutely be solved
first, please tell.

Wladimir
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140116/48a8e991/attachment.html>

From laanwj at gmail.com  Thu Jan 16 09:48:19 2014
From: laanwj at gmail.com (Wladimir)
Date: Thu, 16 Jan 2014 10:48:19 +0100
Subject: [Bitcoin-development] Stealth Addresses
In-Reply-To: <CAKm8k+3hYOEVDO+jRKLihDHbjYSVbeNMto5JvqgEy3XcK_zP4w@mail.gmail.com>
References: <20140106120338.GA14918@savin>
	<op.w9c5o7vgyldrnw@laptop-air.hsd1.ca.comcast.net>
	<20140110102037.GB25749@savin>
	<op.w9kkxcityldrnw@laptop-air.hsd1.ca.comcast.net>
	<CABsx9T2G=yqSUGr0+Ju5-z9P++uS20AwLC+c3DnFMHtcQjQK6w@mail.gmail.com>
	<CAAS2fgTz0TaGhym_35V3N2-vHVzU9BeuV8q+QJjwh5bg77FEZg@mail.gmail.com>
	<CANEZrP0huBWqgvQik9Yc26Tu4CwR0VSXcfC+qfzsZqvoU4VJGA@mail.gmail.com>
	<20140113133746.GI38964@giles.gnomon.org.uk>
	<CANEZrP1KAVhi_-cxCYe0rR9LUSYJ8MyW8=6eSJZ65FeY5ZJNuQ@mail.gmail.com>
	<20140114225321.GT38964@giles.gnomon.org.uk>
	<CANAnSg0tH_bK_19rsRRHOeZgrGYeWMhW89fXPyS4DQGmS4r_7A@mail.gmail.com>
	<CALimQCXgc0eXeOcqFGUaCpSF7gKEe87KzvLqHZwUysV3WyjjGw@mail.gmail.com>
	<CAAS2fgShChAQryfUOBp60jB-zxn2tH986fu1HfT+LsNdBYnoYg@mail.gmail.com>
	<CAJHLa0P5r2+kxy7w8G=h=TAhdk1jUoW5UOiv-euo47uQY0u9ZA@mail.gmail.com>
	<op.w9q6jdsayldrnw@laptop-air.hsd1.ca.comcast.net>
	<CAAf19WoHkzsfkH_U9EdEcJkZ6iy2vHc-50W4y30NQ_Ur7RGAdg@mail.gmail.com>
	<CAKm8k+3hYOEVDO+jRKLihDHbjYSVbeNMto5JvqgEy3XcK_zP4w@mail.gmail.com>
Message-ID: <CA+s+GJDV+QLxs-FsU_F+iMSudEMEt9y0u5VJc0GdW3-set59SA@mail.gmail.com>

On Thu, Jan 16, 2014 at 7:26 AM, Gary Rowe <g.rowe at froot.co.uk> wrote:

> I like "reusable address".
>

Simple and clear, I like it too.

I see the term is routing is used in finance in the USA, but as a Dutch
person I associate "routing address" with network routing, not with
banking. It's non-trivial to translate to a local term.

Wladimir
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140116/c241b654/attachment.html>

From drak at zikula.org  Thu Jan 16 10:14:24 2014
From: drak at zikula.org (Drak)
Date: Thu, 16 Jan 2014 10:14:24 +0000
Subject: [Bitcoin-development] Stealth Addresses
In-Reply-To: <op.w9q6jdsayldrnw@laptop-air.hsd1.ca.comcast.net>
References: <20140106120338.GA14918@savin>
	<op.w9c5o7vgyldrnw@laptop-air.hsd1.ca.comcast.net>
	<20140110102037.GB25749@savin>
	<op.w9kkxcityldrnw@laptop-air.hsd1.ca.comcast.net>
	<CABsx9T2G=yqSUGr0+Ju5-z9P++uS20AwLC+c3DnFMHtcQjQK6w@mail.gmail.com>
	<CAAS2fgTz0TaGhym_35V3N2-vHVzU9BeuV8q+QJjwh5bg77FEZg@mail.gmail.com>
	<CANEZrP0huBWqgvQik9Yc26Tu4CwR0VSXcfC+qfzsZqvoU4VJGA@mail.gmail.com>
	<20140113133746.GI38964@giles.gnomon.org.uk>
	<CANEZrP1KAVhi_-cxCYe0rR9LUSYJ8MyW8=6eSJZ65FeY5ZJNuQ@mail.gmail.com>
	<20140114225321.GT38964@giles.gnomon.org.uk>
	<CANAnSg0tH_bK_19rsRRHOeZgrGYeWMhW89fXPyS4DQGmS4r_7A@mail.gmail.com>
	<CALimQCXgc0eXeOcqFGUaCpSF7gKEe87KzvLqHZwUysV3WyjjGw@mail.gmail.com>
	<CAAS2fgShChAQryfUOBp60jB-zxn2tH986fu1HfT+LsNdBYnoYg@mail.gmail.com>
	<CAJHLa0P5r2+kxy7w8G=h=TAhdk1jUoW5UOiv-euo47uQY0u9ZA@mail.gmail.com>
	<op.w9q6jdsayldrnw@laptop-air.hsd1.ca.comcast.net>
Message-ID: <CANAnSg0iE_ZdbXbkBwsafUJ6_ck4jETQM0o0RY-0am-o7=6Xbg@mail.gmail.com>

On 16 January 2014 00:05, Jeremy Spilman <jeremy at taplink.co> wrote:

>  Might I propose "reusable address".
>
> I think that describes it best to any non-programmer, and even more so
> encourages wallets to present options as 'one time use' vs 'reusable'.
>

The problem is all addresses are reusable and to an average user, addresses
are already reusable so there is little to distinguish the address format.
It might be better to call it a "public address" in common terminology.

Drak
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140116/1b92b504/attachment.html>

From mike at plan99.net  Thu Jan 16 10:19:41 2014
From: mike at plan99.net (Mike Hearn)
Date: Thu, 16 Jan 2014 11:19:41 +0100
Subject: [Bitcoin-development] Stealth Addresses
In-Reply-To: <CANAnSg0iE_ZdbXbkBwsafUJ6_ck4jETQM0o0RY-0am-o7=6Xbg@mail.gmail.com>
References: <20140106120338.GA14918@savin>
	<op.w9c5o7vgyldrnw@laptop-air.hsd1.ca.comcast.net>
	<20140110102037.GB25749@savin>
	<op.w9kkxcityldrnw@laptop-air.hsd1.ca.comcast.net>
	<CABsx9T2G=yqSUGr0+Ju5-z9P++uS20AwLC+c3DnFMHtcQjQK6w@mail.gmail.com>
	<CAAS2fgTz0TaGhym_35V3N2-vHVzU9BeuV8q+QJjwh5bg77FEZg@mail.gmail.com>
	<CANEZrP0huBWqgvQik9Yc26Tu4CwR0VSXcfC+qfzsZqvoU4VJGA@mail.gmail.com>
	<20140113133746.GI38964@giles.gnomon.org.uk>
	<CANEZrP1KAVhi_-cxCYe0rR9LUSYJ8MyW8=6eSJZ65FeY5ZJNuQ@mail.gmail.com>
	<20140114225321.GT38964@giles.gnomon.org.uk>
	<CANAnSg0tH_bK_19rsRRHOeZgrGYeWMhW89fXPyS4DQGmS4r_7A@mail.gmail.com>
	<CALimQCXgc0eXeOcqFGUaCpSF7gKEe87KzvLqHZwUysV3WyjjGw@mail.gmail.com>
	<CAAS2fgShChAQryfUOBp60jB-zxn2tH986fu1HfT+LsNdBYnoYg@mail.gmail.com>
	<CAJHLa0P5r2+kxy7w8G=h=TAhdk1jUoW5UOiv-euo47uQY0u9ZA@mail.gmail.com>
	<op.w9q6jdsayldrnw@laptop-air.hsd1.ca.comcast.net>
	<CANAnSg0iE_ZdbXbkBwsafUJ6_ck4jETQM0o0RY-0am-o7=6Xbg@mail.gmail.com>
Message-ID: <CANEZrP1UKHwvaeqb9wCHXqkyUCp5x772_GfVuZOSkM+ccnKP1A@mail.gmail.com>

I think we have a winner in "reusable address". Yes an existing address can
be reused and will superficially appear to work, it just won't work well.
Calling them reusable addresses helps reinforce the idea in peoples mind
that the other kind shouldn't be reused.


On Thu, Jan 16, 2014 at 11:14 AM, Drak <drak at zikula.org> wrote:

> On 16 January 2014 00:05, Jeremy Spilman <jeremy at taplink.co> wrote:
>
>>  Might I propose "reusable address".
>>
>> I think that describes it best to any non-programmer, and even more so
>> encourages wallets to present options as 'one time use' vs 'reusable'.
>>
>
> The problem is all addresses are reusable and to an average user,
> addresses are already reusable so there is little to distinguish the
> address format.
> It might be better to call it a "public address" in common terminology.
>
> Drak
>
>
>
> ------------------------------------------------------------------------------
> CenturyLink Cloud: The Leader in Enterprise Cloud Services.
> Learn Why More Businesses Are Choosing CenturyLink Cloud For
> Critical Workloads, Development Environments & Everything In Between.
> Get a Quote or Start a Free Trial Today.
>
> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140116/1c7e3591/attachment.html>

From mike at plan99.net  Thu Jan 16 10:25:18 2014
From: mike at plan99.net (Mike Hearn)
Date: Thu, 16 Jan 2014 11:25:18 +0100
Subject: [Bitcoin-development] Tor / SPV
In-Reply-To: <CANg-TZAyr8LyRQ5e4DpQA8fXEbGq6kxv=peB9oYB+bU_xA98ww@mail.gmail.com>
References: <5747D5DF-879B-4A60-8BD6-18251E7D5F47@plan99.net>
	<CANg-TZBCSvVeDTNKQSPV-Fw+uZ8np04WoE=o0J+8wULBHrsgKQ@mail.gmail.com>
	<CANEZrP1iP6J5gczrQ-+Lzq4uohys7Rrfa0c5F0r-cqx3OJMDGg@mail.gmail.com>
	<CANg-TZAyr8LyRQ5e4DpQA8fXEbGq6kxv=peB9oYB+bU_xA98ww@mail.gmail.com>
Message-ID: <CANEZrP3ZmahH8tY4zyLK5wCUVsj2e+w8wfCHz5Z4_w5GXTiqPA@mail.gmail.com>

Yes correct, using hidden services just as a kind of more complicated, out
of process/sandboxable SSL.


> would the overall transactions/second the Bitcoin network could handle go
> down?
>

If all nodes talked to each other all the time over Tor, probably yes
because Bitcoin is quite sensitive to latency. But what I'm proposing here
is less ambitious. It's just about protecting (parts of)
end-user-to-network communication, which is a much less risky sort of
change. P2P nodes would still talk to each other in the clear.

SSL for everything is still an idea I like, but it's true that increasing
bitcoind attack surface area is not something to take lightly.

Considering that the clearnet sybil protection also relies on scaling
> up the resource requirements for an attacker, why not require hidden
> service addresses following a certain pattern, like a fixed prefix?


I'm sure we can come up with all kinds of neat anti-sybil techniques, but
IMHO they are separate projects. I'm trying to find an upgrade that's small
enough to be easily switched on by default for lots of users, today, that
is low risk for the network overall. Later on we can add elaborations.

The SPV node could connect to the IP using Tor.  It would preserve the
> privacy of the SPV node - hard to see it's running Bitcoin.  It also
> reduces the ability of an attacker to MITM because the routing varies
> with each exit node.


Right so the key question is, to what extent does Tor open you up to MITM
attacks?  I don't have a good feel for this. I read about exit nodes
routinely doing very naughty things, but I don't know how widespread that
is. Probably you're right that with random selection of exits you're not
excessively likely to get MITMd.

How does Tor itself manage anti-sybil? I know they have the directory
consensus and they measure nodes to ensure they're delivering the resources
they claim to have. Punting anti-sybil up to the Tor people and letting
them worry about it is quite an attractive idea.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140116/61cfcf3b/attachment.html>

From wtogami at gmail.com  Thu Jan 16 10:41:37 2014
From: wtogami at gmail.com (Warren Togami Jr.)
Date: Thu, 16 Jan 2014 00:41:37 -1000
Subject: [Bitcoin-development] Bitcoin Core 0.9rc1 release schedule
In-Reply-To: <CA+s+GJBo7iUEJTfJw2e6qcDmdHNGdDN442Svs5ikVyUL1Jm0Wg@mail.gmail.com>
References: <CA+s+GJBo7iUEJTfJw2e6qcDmdHNGdDN442Svs5ikVyUL1Jm0Wg@mail.gmail.com>
Message-ID: <CAEz79PpC7==Eu4-zq08nQJyEUAbnrTe-ZGVjfDpzmnMi5KZE4g@mail.gmail.com>

Just a small note of caution for those joining in testing.

https://github.com/bitcoin/bitcoin/issues/3529
Currently the master branch has this issue where leveldb renames all of
.sst files to .ldb.  This makes running the 0.8.x version of Bitcoin think
the index is corrupt.  Until a fix is included in Bitcoin master, a
workaround to allow 0.8.x to work again is to simply rename all the files
from .ldb back to .sst.

(This workaround worked for me today but failed yesterday.  It's possible I
made an error yesterday.  If it fails for you please report as we really
need to know if there are other leveldb incompatibilities.)

https://github.com/bitcoin/leveldb/pull/3
The fix for Bitcoin's leveldb is being discussed here.

Warren


On Wed, Jan 15, 2014 at 11:09 PM, Wladimir <laanwj at gmail.com> wrote:

> Hello all,
>
> It has been way to long since last major release. Many improvements and
> new features have been added to master since, so we'd like to do a 0.9rc1
> release soon.
>
> The current aim is next month, February 2014.
>
> Of course there are still some open issues that need to be resolved before
> release
> https://github.com/bitcoin/bitcoin/issues?milestone=12&state=open
>
> If there is something else that you're working on and needs to end up in
> 0.9, or know of some nasty bug in master that should absolutely be solved
> first, please tell.
>
> Wladimir
>
>
> ------------------------------------------------------------------------------
> CenturyLink Cloud: The Leader in Enterprise Cloud Services.
> Learn Why More Businesses Are Choosing CenturyLink Cloud For
> Critical Workloads, Development Environments & Everything In Between.
> Get a Quote or Start a Free Trial Today.
>
> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140116/592c2421/attachment.html>

From adam at cypherspace.org  Thu Jan 16 11:12:20 2014
From: adam at cypherspace.org (Adam Back)
Date: Thu, 16 Jan 2014 12:12:20 +0100
Subject: [Bitcoin-development] reusable address privacy problems & fuzzy
 bait limitations (Re: Stealth Addresses)
In-Reply-To: <CANAnSg0iE_ZdbXbkBwsafUJ6_ck4jETQM0o0RY-0am-o7=6Xbg@mail.gmail.com>
References: <CANEZrP0huBWqgvQik9Yc26Tu4CwR0VSXcfC+qfzsZqvoU4VJGA@mail.gmail.com>
	<20140113133746.GI38964@giles.gnomon.org.uk>
	<CANEZrP1KAVhi_-cxCYe0rR9LUSYJ8MyW8=6eSJZ65FeY5ZJNuQ@mail.gmail.com>
	<20140114225321.GT38964@giles.gnomon.org.uk>
	<CANAnSg0tH_bK_19rsRRHOeZgrGYeWMhW89fXPyS4DQGmS4r_7A@mail.gmail.com>
	<CALimQCXgc0eXeOcqFGUaCpSF7gKEe87KzvLqHZwUysV3WyjjGw@mail.gmail.com>
	<CAAS2fgShChAQryfUOBp60jB-zxn2tH986fu1HfT+LsNdBYnoYg@mail.gmail.com>
	<CAJHLa0P5r2+kxy7w8G=h=TAhdk1jUoW5UOiv-euo47uQY0u9ZA@mail.gmail.com>
	<op.w9q6jdsayldrnw@laptop-air.hsd1.ca.comcast.net>
	<CANAnSg0iE_ZdbXbkBwsafUJ6_ck4jETQM0o0RY-0am-o7=6Xbg@mail.gmail.com>
Message-ID: <20140116111220.GA30175@netbook.cypherspace.org>

On Thu, Jan 16, 2014 at 10:14:24AM +0000, Drak wrote:
>   On 16 January 2014 00:05, Jeremy Spilman <[1]jeremy at taplink.co> wrote:
>   > Might I propose "reusable address".
>
>   The problem is all addresses are reusable and to an average user,
>   addresses are already reusable so there is little to distinguish the
>   address format.
>   It might be better to call it a "public address" in common terminology.

Yeah I called my variant "(unlinkable) public" but I also think I prefer
Jeremy's "reusable address" which has the added bonus of being yet another
implied admonishment not to reuse the non-reusable ones :)

Anyway my primary concern so far is that the reusable addresses/(unlinkable)
public addresses are actually worse for privacy than SPV bloom mechanism by
any reasonable definition.  So I think we have some work to do yet, on a
tough problem which may not have an efficient index precomputable solution
(or a solution period.)  I would also have been promoting this as an
alternative solution to bloom privcy mechanism and address-reuse, if I
could've found a mechansim for the unlinkable public proposal...

Whats different so far I think is that Peter just went with it anyway
despite that problem, where as I put it in the pile of interesting but not
quite workable for privacy reasons ideas.  (Bearing in mind that my bloom
bait concept is the same as the prefix concept so I had functional
equivalence).  The additional feature of Peter's variant is to stealthify
the payment, which I do think is a useful additioanl consideration, however
as I said I think its fair to say it so far largely fails to do that,
because the exposed P parameter.  (And using the input instead of the P
parameter breaks CoinJoin, which is also thereby damaging to privacy).

So also about Greg Maxwell's improved prefix/bloom bait (lets call it fuzzy
bloom bait), while I agree that H(nonce)[rand(32)] ^ prefix is an
interesting incremental improvement, over raw bloom bait/prefix (with an
example 8-bit prefix, and [] being byte index, ^=xor), it is
index-precomputable, but it still publicly allows statistical elimination
which is still nearly as dangerous in lieu of the remarkable success people
have had doing statistical network flow analysis.  ie with probability
(255/256)^32=88% it eliminates you as a payee of any given reusable payment. 
(And that effect remains with any parameter set and conflicts with bandwidth
efficiency for the requestor - ie lower elimination probability seems
unavoidably to imply higher false positive match, right down to the point of
downloading the entire set, giving with 0 probability).

Thinking-hats time people.

(As I said I still like reusable-addr for full-node recipient scenarios.)

Adam



From adam at cypherspace.org  Thu Jan 16 11:42:42 2014
From: adam at cypherspace.org (Adam Back)
Date: Thu, 16 Jan 2014 12:42:42 +0100
Subject: [Bitcoin-development] unlinakble static address? & spv-privacy
 (Re: Stealth Addresses)
In-Reply-To: <op.w9q85wkhyldrnw@laptop-air.hsd1.ca.comcast.net>
References: <CANEZrP0huBWqgvQik9Yc26Tu4CwR0VSXcfC+qfzsZqvoU4VJGA@mail.gmail.com>
	<20140113133746.GI38964@giles.gnomon.org.uk>
	<CANEZrP1KAVhi_-cxCYe0rR9LUSYJ8MyW8=6eSJZ65FeY5ZJNuQ@mail.gmail.com>
	<20140114225321.GT38964@giles.gnomon.org.uk>
	<CANAnSg0tH_bK_19rsRRHOeZgrGYeWMhW89fXPyS4DQGmS4r_7A@mail.gmail.com>
	<CALimQCXgc0eXeOcqFGUaCpSF7gKEe87KzvLqHZwUysV3WyjjGw@mail.gmail.com>
	<CAAS2fgShChAQryfUOBp60jB-zxn2tH986fu1HfT+LsNdBYnoYg@mail.gmail.com>
	<CAJHLa0P5r2+kxy7w8G=h=TAhdk1jUoW5UOiv-euo47uQY0u9ZA@mail.gmail.com>
	<20140115230901.GA25135@netbook.cypherspace.org>
	<op.w9q85wkhyldrnw@laptop-air.hsd1.ca.comcast.net>
Message-ID: <20140116114242.GA30432@netbook.cypherspace.org>

On Wed, Jan 15, 2014 at 05:02:10PM -0800, Jeremy Spilman wrote:
>The second pubKey is useful [...] even just being able to scan for
>transactions yourself without keeping bitcoin-encumbered private keys
>decrypted in memory.

Agreed.

>On Wed, 15 Jan 2014 15:09:01 -0800, Adam Back <adam at cypherspace.org> wrote:
>>But I think its moderately expensive for the full node because it has to
>>do a DH calculation per transaction and its not precomputable so there is
>>IO per query.  (In the P version in fact only payments which are thereby
>>reconizable as unlinkable static need to be processed).
>
>And of course, if you have multiple reuseable addresses, then you're 
>doing this calculation separately to check each one.
>
>So the load on a popular centralized service would be quite high, 
>which you may consider a feature.

Well only a linear increase, which is not any kind of realistic security
defense for even an academic researcher analysing flows.  More concern is
that it could be expensive enough discourage adoption by full-nodes as an
open/free service to support SPV clients in finding their reusable address
payments.  Its possibly an I/O DoS multiplier: send requests to the full
nodes at a moderate network rate and and watch as its disk thrashes.

>But I think it's great people can choose how to trade privacy for 
>computation/bandwidth however they want, and services can compete to 
>offer monitoring for 0+ bit prefixes.

Its not a decision with user localised effect.  If most users use it with
parameters giving high elimination probability, that affects everyone else's
privacy also.  Also statistical effects are accumulative as more plausibly
related addresses are eliminated at each potentially linked transaction.  I
think once the network flow analysis guys are done with incorporating it,
and if reusable addresses saw significant use, my prediction is the result
will be pretty close to privacy game over and it will undo most if not all
of the hard-won privacy benefit of CoinJoin.  (Recalling CoinJoin is only
adding a bit or two of entropy per join, this elimination effect could
easily undo more than that).

>>(And also there is proposed a version of the prefix computed via
>>brute-force to make it somewhat stealthy still).
>
>I think in this case the hash grinding of the prefix would only being 
>used if thats how transactions are being indexed. I don't think it 
>adds any privacy, it's just added work we're forced to do in order 
>for the prefix to work as designed. 

The point of the stealth security objective is to avoid creating a new and
smaller anonymity set.  If all reusable addresses are easily recognizable as
reusable, thats far more revealing and useful to the network flow analysis.

Adam



From adam at cypherspace.org  Thu Jan 16 12:31:05 2014
From: adam at cypherspace.org (Adam Back)
Date: Thu, 16 Jan 2014 13:31:05 +0100
Subject: [Bitcoin-development] TOFU verifiable HD publicly derived addresses
Message-ID: <20140116123105.GA30307@netbook.cypherspace.org>

Put this into a separate thread about Alan Reiner's user validatable HD
address idea.

On Wed, Jan 15, 2014 at 05:02:10PM -0800, Jeremy Spilman wrote:
>On Wed, 15 Jan 2014 15:09:01 -0800, Adam Back <adam at cypherspace.org> wrote
>>Maybe in the payment address case the service should choose the 
>>derivation factor and communicate it and the client with the static
>>address, as suggested by Alan Reiner because then it can also serve
>>the function of allowing the service to tie the payment to the users
>>account.
>
>I think any change which requires more than a single published public 
>message (e.g. a posting in a forum, or in a README.me in Github) 
>should be seen as solving an entirely different problem.

Yes it is.  This part is a separate topic, about simple TOFU cross-check &
verifiability of deposit addresses by users.

(However as we've seen in practice users treat as static and expect service
deposit addresses to be reusable.  So it could be useful to combine.)

>But once you admit having that directed communication, then you are 
>swimming very close to the payment protocol.

My view is that certification (X509 or raw ECDSA message signature) is
functionally inferior (and more complex) than communicating scalar, base
address because certification requires an online private key to
authenticate.  Scalar, base does not require a private key.  In fact you
could use HD address public derivation as the mechanism to derive the scalar,
where the deposit address recipient does not know the scalar.  So I am a fan
of Alan Reiner's simple authenticatable derived address proposal.

Now of course you can take the private key offline and use eg private
derivation and upload batches, but that is complexity and work; so again its
an approach with arguably inferior characteristics.

Also to date payment message is application level, and while you could add
another level of signed message with a different offline X509 key, which
Mike Hearn did suggest as a future possibility, and upload signed addresses
in batches, its clunky by comparison, involves many more lines of code, adds
a security dependency on CAs, and I think you could somewhat argue is a
protocol layering violation.

Anyway if people want to do that, there is no loss in X509 signing a TOFU
validatable address form.  ie go ahead and combine them.  TOFU
validatability of the low level address format is useful, you can cross
check.


One could also consider augmenting the derivation with Timo Hanke's bind to
contract hash, though there is risk that both parties lose the contract and
if it has too much entropy that could lose coins.

Adam



From luke at dashjr.org  Thu Jan 16 15:23:37 2014
From: luke at dashjr.org (Luke-Jr)
Date: Thu, 16 Jan 2014 15:23:37 +0000
Subject: [Bitcoin-development] Bitcoin Core 0.9rc1 release schedule
In-Reply-To: <CA+s+GJBo7iUEJTfJw2e6qcDmdHNGdDN442Svs5ikVyUL1Jm0Wg@mail.gmail.com>
References: <CA+s+GJBo7iUEJTfJw2e6qcDmdHNGdDN442Svs5ikVyUL1Jm0Wg@mail.gmail.com>
Message-ID: <201401161523.38623.luke@dashjr.org>

On Thursday, January 16, 2014 9:09:52 AM Wladimir wrote:
> Hello all,
> 
> It has been way to long since last major release. Many improvements and new
> features have been added to master since, so we'd like to do a 0.9rc1
> release soon.
> 
> The current aim is next month, February 2014.
> 
> Of course there are still some open issues that need to be resolved before
> release
> https://github.com/bitcoin/bitcoin/issues?milestone=12&state=open
> 
> If there is something else that you're working on and needs to end up in
> 0.9, or know of some nasty bug in master that should absolutely be solved
> first, please tell.
> 
> Wladimir

https://github.com/bitcoin/bitcoin/pulls/luke-jr

These are pretty much all well-tested and stable for months now.



From hozer at hozed.org  Thu Jan 16 18:19:26 2014
From: hozer at hozed.org (Troy Benjegerdes)
Date: Thu, 16 Jan 2014 12:19:26 -0600
Subject: [Bitcoin-development] unlinakble static address? & spv-privacy
 (Re: Stealth Addresses)
In-Reply-To: <20140116114242.GA30432@netbook.cypherspace.org>
References: <20140113133746.GI38964@giles.gnomon.org.uk>
	<CANEZrP1KAVhi_-cxCYe0rR9LUSYJ8MyW8=6eSJZ65FeY5ZJNuQ@mail.gmail.com>
	<20140114225321.GT38964@giles.gnomon.org.uk>
	<CANAnSg0tH_bK_19rsRRHOeZgrGYeWMhW89fXPyS4DQGmS4r_7A@mail.gmail.com>
	<CALimQCXgc0eXeOcqFGUaCpSF7gKEe87KzvLqHZwUysV3WyjjGw@mail.gmail.com>
	<CAAS2fgShChAQryfUOBp60jB-zxn2tH986fu1HfT+LsNdBYnoYg@mail.gmail.com>
	<CAJHLa0P5r2+kxy7w8G=h=TAhdk1jUoW5UOiv-euo47uQY0u9ZA@mail.gmail.com>
	<20140115230901.GA25135@netbook.cypherspace.org>
	<op.w9q85wkhyldrnw@laptop-air.hsd1.ca.comcast.net>
	<20140116114242.GA30432@netbook.cypherspace.org>
Message-ID: <20140116181925.GB3180@nl.grid.coop>

> >But I think it's great people can choose how to trade privacy for 
> >computation/bandwidth however they want, and services can compete to 
> >offer monitoring for 0+ bit prefixes.
> 
> Its not a decision with user localised effect.  If most users use it with
> parameters giving high elimination probability, that affects everyone else's
> privacy also.  Also statistical effects are accumulative as more plausibly
> related addresses are eliminated at each potentially linked transaction.  I
> think once the network flow analysis guys are done with incorporating it,
> and if reusable addresses saw significant use, my prediction is the result
> will be pretty close to privacy game over and it will undo most if not all
> of the hard-won privacy benefit of CoinJoin.  (Recalling CoinJoin is only
> adding a bit or two of entropy per join, this elimination effect could
> easily undo more than that).

You've got a major social engineering problem here. 

1) who is marketing privacy 
2) how do you validate 'privacy providers' 

Just like all the scamcoins, there will be scamprivacy providers, which will
drive the market price of privacy down to zero.

Who's paying the network/development/bandwidth/etc cost for privacy?

I'd guess 85% of real users don't really care about some abstract 'privacy'
ideal, they just want payments to work and to download cat pictures.

If you say 'regular address re-use is deprecated, and the top 1% in bitcoin
weatlh who own 95% of the miners want privacy', well fine. But you just 
opened yourself up to 'OccupyBitcoin', and an altcoin that ENCOURAGES plain
old regular address re-use and transparency.

Does this stuff still work if regular address re-use is a transparency feature
and not a bug?



From pete at petertodd.org  Thu Jan 16 21:28:05 2014
From: pete at petertodd.org (Peter Todd)
Date: Thu, 16 Jan 2014 16:28:05 -0500
Subject: [Bitcoin-development] Stealth Addresses
In-Reply-To: <op.w9q6jdsayldrnw@laptop-air.hsd1.ca.comcast.net>
References: <CAAS2fgTz0TaGhym_35V3N2-vHVzU9BeuV8q+QJjwh5bg77FEZg@mail.gmail.com>
	<CANEZrP0huBWqgvQik9Yc26Tu4CwR0VSXcfC+qfzsZqvoU4VJGA@mail.gmail.com>
	<20140113133746.GI38964@giles.gnomon.org.uk>
	<CANEZrP1KAVhi_-cxCYe0rR9LUSYJ8MyW8=6eSJZ65FeY5ZJNuQ@mail.gmail.com>
	<20140114225321.GT38964@giles.gnomon.org.uk>
	<CANAnSg0tH_bK_19rsRRHOeZgrGYeWMhW89fXPyS4DQGmS4r_7A@mail.gmail.com>
	<CALimQCXgc0eXeOcqFGUaCpSF7gKEe87KzvLqHZwUysV3WyjjGw@mail.gmail.com>
	<CAAS2fgShChAQryfUOBp60jB-zxn2tH986fu1HfT+LsNdBYnoYg@mail.gmail.com>
	<CAJHLa0P5r2+kxy7w8G=h=TAhdk1jUoW5UOiv-euo47uQY0u9ZA@mail.gmail.com>
	<op.w9q6jdsayldrnw@laptop-air.hsd1.ca.comcast.net>
Message-ID: <20140116212805.GA4421@petertodd.org>

On Wed, Jan 15, 2014 at 04:05:27PM -0800, Jeremy Spilman wrote:
> Might I propose "reusable address".
> 
> I think that describes it best to any non-programmer, and even more
> so encourages wallets to present options as 'one time use' vs
> 'reusable'.
> 
> It definitely packs a marketing punch which could help drive
> adoption. The feature is only useful if/when broadly adopted.

I'm very against the name "reusable addresses" and strongly belive we
should stick with the name stealth addresses.

You gotta look at it from the perspective of a user; lets take standard
pay-to-pubkey-hash addresses: I can tell my wallet to pay one as many
times as I want and everything works just great. I also can enter the
address on blockchain.info's search box, and every transaction related
to the address, and the balance of it, pops up immediately.

What is that telling me? A: Addresses starting with "1" are reusable. B:
Transactions associated with them appear to be public knowledge.

Now I upgrade my wallet software and it says I now have a "reusable"
address. My reaction is "Huh? Normal addresses are reusable, what's
special about this weird reusable address thing that my buddy Bob's
wallet software couldn't pay." I might even try to enter in a "reusable"
address in blockchain.info, which won't work, and I'll just figure
"must be some new unsupported thing" and move on with my life.

On the other hand, suppose my wallet says I now have "stealth address"
support. I'm going to think "Huh, stealth? I guess that means privacy
right? I like privacy." If I try searching for a stealth address on
blockchain.info, when it doesn't work I might think twig on "Oh right!
It said stealth addresses are private, so maybe the transactions are
hidden?" I might also think "Maybe this is like stealth/incognito mode
in my browser? So like, there's no history being kept for others to
see?" Regardless, I'm going to be thinking "well I hear scary stuff
about Bitcoin privacy, and this stealth thing sounds like it's gonna
help, so I should learn more about that"

Finally keep in mind that stealth addresses have had a tonne of very
fast, and very wide reaching PR. The name is in the public conciousness
already, and trying to change it now just because of vague bad
associations is going to throw away the momentum of that good PR and
slow down adoption. Last night I was at the Toronto Bitcoin Meetup and I
based on conversations there with people there, technical and
non-technical, almost everyone had heard about them and almost everyone
seemed to understand the basic idea of why they were a good thing. That
just wouldn't have happened with a name that tried to hide what stealth
addresses were for, and by changing the name now we risk people not
making the connection when wallet software gets upgraded to support
them.

-- 
'peter'[:-1]@petertodd.org
0000000000000001b0e0ae7ef97681ad77188030b6c791aef304947e6f524740
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 490 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140116/e268c71f/attachment.sig>

From bytecoin at gmx.com  Thu Jan 16 23:48:11 2014
From: bytecoin at gmx.com (Byte Coin)
Date: Fri, 17 Jan 2014 00:48:11 +0100
Subject: [Bitcoin-development] Reusable addresses
Message-ID: <20140116234811.168530@gmx.com>

I'm very pleased that my old idea is getting some traction and that I have been appropriately credited!
I also think the term "reusable addresses" is preferable to anything to do with "stealth" for the reasons mentioned.

You should note that the privacy guarantees they provide are not that strong but their limitations have been adequately discussed elsewhere.

On an unrelated note - I'd like to solicit some help in restoring access to my Bytecoin account on http://bitcointalk.org/

Cheers!

Bytecoin
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140117/1223bdf3/attachment.html>

From fragabr at gmail.com  Fri Jan 17 01:39:59 2014
From: fragabr at gmail.com (=?UTF-8?B?RMOibmllbA==?= Fraga)
Date: Thu, 16 Jan 2014 23:39:59 -0200
Subject: [Bitcoin-development] Suggestion: allow receivers to pay optional
 fee for transactions without fees
Message-ID: <lba1l3$4tg$1@ger.gmane.org>

	Someone sent me a very small donation (0.00121 BTC) without
paying fees. I don't know who sent it and I know this type of
transaction are usually rejected by miners. Take a look at it below:

https://imageshack.com/i/ngv5g8j

	Even with the a low probability of confirmation, I
was hoping that after a few days it could be included in a block, but
Blockchain.info simply removed it (I know the sender sent from a
Blockchain.info wallet, because he added a note):

https://blockchain.info/pt/tx/3cde47ee3979a46b36bd61bdb0caf9c11dea58ac99f17fb17b95728766de70e0
	
	As you can see now it shows as "Transaction not found".

	My suggestion is: it would be nice if the receiver could have a
chance to pay the fee when the sender didn't pay any fee. For example,
I could pay a fee of 0.0001 BTC and receive 0.00121 BTC. In the end I'd
have 0.00111 BTC. Better than nothing.

	Would it be technically possible to do that or it would be too
much trouble to change the protocol to allow the receiver to pay an
optional fee?

	Ps: I'm not a programmer, but if the receiver could
optionally "attach" some fee to the transaction, even if he/she didn't
sent the transaction, this could be solved. Bitcoin-qt could even warn
the receiver he received a transaction without fee and if he wants 
faster confirmation he could pay a fee.

	Ps2: if this is a silly suggestion, just ignore it. I tried on
Bitcointalk, but nobody answered.

-- 
Linux 3.12.0: One Giant Leap for Frogkind
http://www.youtube.com/DanielFragaBR
http://mcxnow.com
Bitcoin: 12H6661yoLDUZaYPdah6urZS5WiXwTAUgL





From bendavenport at gmail.com  Fri Jan 17 01:52:39 2014
From: bendavenport at gmail.com (Ben Davenport)
Date: Thu, 16 Jan 2014 17:52:39 -0800
Subject: [Bitcoin-development] Suggestion: allow receivers to pay
 optional fee for transactions without fees
In-Reply-To: <lba1l3$4tg$1@ger.gmane.org>
References: <lba1l3$4tg$1@ger.gmane.org>
Message-ID: <CALimQCWvM8tBKE7S5QNx68e=8eh3ouEMk9udv2ZWiXdue2zYhg@mail.gmail.com>

You can create a transaction which spends the output to yourself, attaching
a fee to that transaction. In order for miners to grab the transaction fee
on that transaction, they would have to also mine the original transaction.
Likely, you'd have to do this by hand, but software could be written to
simplify doing it. No protocol changes needed.

Ben


On Thu, Jan 16, 2014 at 5:39 PM, D?niel Fraga <fragabr at gmail.com> wrote:

>         Someone sent me a very small donation (0.00121 BTC) without
> paying fees. I don't know who sent it and I know this type of
> transaction are usually rejected by miners. Take a look at it below:
>
> https://imageshack.com/i/ngv5g8j
>
>         Even with the a low probability of confirmation, I
> was hoping that after a few days it could be included in a block, but
> Blockchain.info simply removed it (I know the sender sent from a
> Blockchain.info wallet, because he added a note):
>
>
> https://blockchain.info/pt/tx/3cde47ee3979a46b36bd61bdb0caf9c11dea58ac99f17fb17b95728766de70e0
>
>         As you can see now it shows as "Transaction not found".
>
>         My suggestion is: it would be nice if the receiver could have a
> chance to pay the fee when the sender didn't pay any fee. For example,
> I could pay a fee of 0.0001 BTC and receive 0.00121 BTC. In the end I'd
> have 0.00111 BTC. Better than nothing.
>
>         Would it be technically possible to do that or it would be too
> much trouble to change the protocol to allow the receiver to pay an
> optional fee?
>
>         Ps: I'm not a programmer, but if the receiver could
> optionally "attach" some fee to the transaction, even if he/she didn't
> sent the transaction, this could be solved. Bitcoin-qt could even warn
> the receiver he received a transaction without fee and if he wants
> faster confirmation he could pay a fee.
>
>         Ps2: if this is a silly suggestion, just ignore it. I tried on
> Bitcointalk, but nobody answered.
>
> --
> Linux 3.12.0: One Giant Leap for Frogkind
> http://www.youtube.com/DanielFragaBR
> http://mcxnow.com
> Bitcoin: 12H6661yoLDUZaYPdah6urZS5WiXwTAUgL
>
>
>
>
> ------------------------------------------------------------------------------
> CenturyLink Cloud: The Leader in Enterprise Cloud Services.
> Learn Why More Businesses Are Choosing CenturyLink Cloud For
> Critical Workloads, Development Environments & Everything In Between.
> Get a Quote or Start a Free Trial Today.
>
> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140116/8f21db5d/attachment.html>

From fragabr at gmail.com  Fri Jan 17 02:06:13 2014
From: fragabr at gmail.com (=?UTF-8?B?RMOibmllbA==?= Fraga)
Date: Fri, 17 Jan 2014 00:06:13 -0200
Subject: [Bitcoin-development] Suggestion: allow receivers to pay
 optional fee for transactions without fees
References: <lba1l3$4tg$1@ger.gmane.org>
	<CALimQCWvM8tBKE7S5QNx68e=8eh3ouEMk9udv2ZWiXdue2zYhg@mail.gmail.com>
Message-ID: <lba369$sp9$1@ger.gmane.org>

	This is good news! Thank you very much Ben for the answer.

On Thu, 16 Jan 2014 17:52:39 -0800
Ben Davenport <bendavenport at gmail.com> wrote:

> You can create a transaction which spends the output to yourself, attaching
> a fee to that transaction. In order for miners to grab the transaction fee
> on that transaction, they would have to also mine the original transaction.
> Likely, you'd have to do this by hand, but software could be written to
> simplify doing it. No protocol changes needed.
> 
> Ben
> 
> 
> On Thu, Jan 16, 2014 at 5:39 PM, D?niel Fraga <fragabr at gmail.com> wrote:
> 
> >         Someone sent me a very small donation (0.00121 BTC) without
> > paying fees. I don't know who sent it and I know this type of
> > transaction are usually rejected by miners. Take a look at it below:
> >
> > https://imageshack.com/i/ngv5g8j
> >
> >         Even with the a low probability of confirmation, I
> > was hoping that after a few days it could be included in a block, but
> > Blockchain.info simply removed it (I know the sender sent from a
> > Blockchain.info wallet, because he added a note):
> >
> >
> > https://blockchain.info/pt/tx/3cde47ee3979a46b36bd61bdb0caf9c11dea58ac99f17fb17b95728766de70e0
> >
> >         As you can see now it shows as "Transaction not found".
> >
> >         My suggestion is: it would be nice if the receiver could have a
> > chance to pay the fee when the sender didn't pay any fee. For example,
> > I could pay a fee of 0.0001 BTC and receive 0.00121 BTC. In the end I'd
> > have 0.00111 BTC. Better than nothing.
> >
> >         Would it be technically possible to do that or it would be too
> > much trouble to change the protocol to allow the receiver to pay an
> > optional fee?
> >
> >         Ps: I'm not a programmer, but if the receiver could
> > optionally "attach" some fee to the transaction, even if he/she didn't
> > sent the transaction, this could be solved. Bitcoin-qt could even warn
> > the receiver he received a transaction without fee and if he wants
> > faster confirmation he could pay a fee.
> >
> >         Ps2: if this is a silly suggestion, just ignore it. I tried on
> > Bitcointalk, but nobody answered.
> >
> > --
> > Linux 3.12.0: One Giant Leap for Frogkind
> > http://www.youtube.com/DanielFragaBR
> > http://mcxnow.com
> > Bitcoin: 12H6661yoLDUZaYPdah6urZS5WiXwTAUgL
> >
> >
> >
> >
> > ------------------------------------------------------------------------------
> > CenturyLink Cloud: The Leader in Enterprise Cloud Services.
> > Learn Why More Businesses Are Choosing CenturyLink Cloud For
> > Critical Workloads, Development Environments & Everything In Between.
> > Get a Quote or Start a Free Trial Today.
> >
> > http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk
> > _______________________________________________
> > Bitcoin-development mailing list
> > Bitcoin-development at lists.sourceforge.net
> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> >
> 


-- 
Linux 3.12.0: One Giant Leap for Frogkind
http://www.youtube.com/DanielFragaBR
http://mcxnow.com
Bitcoin: 12H6661yoLDUZaYPdah6urZS5WiXwTAUgL





From christophe.biocca at gmail.com  Fri Jan 17 02:39:31 2014
From: christophe.biocca at gmail.com (Christophe Biocca)
Date: Thu, 16 Jan 2014 21:39:31 -0500
Subject: [Bitcoin-development] Suggestion: allow receivers to pay
 optional fee for transactions without fees
In-Reply-To: <lba369$sp9$1@ger.gmane.org>
References: <lba1l3$4tg$1@ger.gmane.org>
	<CALimQCWvM8tBKE7S5QNx68e=8eh3ouEMk9udv2ZWiXdue2zYhg@mail.gmail.com>
	<lba369$sp9$1@ger.gmane.org>
Message-ID: <CANOOu=-cA7TTfAtfRy1WL+Dy6EQPwjcTH1m=u+f9RB73wC=btw@mail.gmail.com>

To clarify, there are proposals to make miners recognize this
situation and account for it, only eligius is running it at the moment
IIRC:
http://bitcoin.stackexchange.com/questions/8390/are-there-any-pools-or-large-miners-running-child-pays-for-parent-patch
Right now if you were to try it likely wouldn't result in inclusion.
But this is on the radar, and I suspect it'll eventually get merged
into mainline.

On Thu, Jan 16, 2014 at 9:06 PM, D?niel Fraga <fragabr at gmail.com> wrote:
>         This is good news! Thank you very much Ben for the answer.
>
> On Thu, 16 Jan 2014 17:52:39 -0800
> Ben Davenport <bendavenport at gmail.com> wrote:
>
>> You can create a transaction which spends the output to yourself, attaching
>> a fee to that transaction. In order for miners to grab the transaction fee
>> on that transaction, they would have to also mine the original transaction.
>> Likely, you'd have to do this by hand, but software could be written to
>> simplify doing it. No protocol changes needed.
>>
>> Ben
>>
>>
>> On Thu, Jan 16, 2014 at 5:39 PM, D?niel Fraga <fragabr at gmail.com> wrote:
>>
>> >         Someone sent me a very small donation (0.00121 BTC) without
>> > paying fees. I don't know who sent it and I know this type of
>> > transaction are usually rejected by miners. Take a look at it below:
>> >
>> > https://imageshack.com/i/ngv5g8j
>> >
>> >         Even with the a low probability of confirmation, I
>> > was hoping that after a few days it could be included in a block, but
>> > Blockchain.info simply removed it (I know the sender sent from a
>> > Blockchain.info wallet, because he added a note):
>> >
>> >
>> > https://blockchain.info/pt/tx/3cde47ee3979a46b36bd61bdb0caf9c11dea58ac99f17fb17b95728766de70e0
>> >
>> >         As you can see now it shows as "Transaction not found".
>> >
>> >         My suggestion is: it would be nice if the receiver could have a
>> > chance to pay the fee when the sender didn't pay any fee. For example,
>> > I could pay a fee of 0.0001 BTC and receive 0.00121 BTC. In the end I'd
>> > have 0.00111 BTC. Better than nothing.
>> >
>> >         Would it be technically possible to do that or it would be too
>> > much trouble to change the protocol to allow the receiver to pay an
>> > optional fee?
>> >
>> >         Ps: I'm not a programmer, but if the receiver could
>> > optionally "attach" some fee to the transaction, even if he/she didn't
>> > sent the transaction, this could be solved. Bitcoin-qt could even warn
>> > the receiver he received a transaction without fee and if he wants
>> > faster confirmation he could pay a fee.
>> >
>> >         Ps2: if this is a silly suggestion, just ignore it. I tried on
>> > Bitcointalk, but nobody answered.
>> >
>> > --
>> > Linux 3.12.0: One Giant Leap for Frogkind
>> > http://www.youtube.com/DanielFragaBR
>> > http://mcxnow.com
>> > Bitcoin: 12H6661yoLDUZaYPdah6urZS5WiXwTAUgL
>> >
>> >
>> >
>> >
>> > ------------------------------------------------------------------------------
>> > CenturyLink Cloud: The Leader in Enterprise Cloud Services.
>> > Learn Why More Businesses Are Choosing CenturyLink Cloud For
>> > Critical Workloads, Development Environments & Everything In Between.
>> > Get a Quote or Start a Free Trial Today.
>> >
>> > http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk
>> > _______________________________________________
>> > Bitcoin-development mailing list
>> > Bitcoin-development at lists.sourceforge.net
>> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>> >
>>
>
>
> --
> Linux 3.12.0: One Giant Leap for Frogkind
> http://www.youtube.com/DanielFragaBR
> http://mcxnow.com
> Bitcoin: 12H6661yoLDUZaYPdah6urZS5WiXwTAUgL
>
>
>
> ------------------------------------------------------------------------------
> CenturyLink Cloud: The Leader in Enterprise Cloud Services.
> Learn Why More Businesses Are Choosing CenturyLink Cloud For
> Critical Workloads, Development Environments & Everything In Between.
> Get a Quote or Start a Free Trial Today.
> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development



From johnathan at corganlabs.com  Fri Jan 17 02:30:35 2014
From: johnathan at corganlabs.com (Johnathan Corgan)
Date: Thu, 16 Jan 2014 18:30:35 -0800
Subject: [Bitcoin-development] Stealth Addresses
In-Reply-To: <20140116212805.GA4421@petertodd.org>
References: <CAAS2fgTz0TaGhym_35V3N2-vHVzU9BeuV8q+QJjwh5bg77FEZg@mail.gmail.com>	<CANEZrP0huBWqgvQik9Yc26Tu4CwR0VSXcfC+qfzsZqvoU4VJGA@mail.gmail.com>	<20140113133746.GI38964@giles.gnomon.org.uk>	<CANEZrP1KAVhi_-cxCYe0rR9LUSYJ8MyW8=6eSJZ65FeY5ZJNuQ@mail.gmail.com>	<20140114225321.GT38964@giles.gnomon.org.uk>	<CANAnSg0tH_bK_19rsRRHOeZgrGYeWMhW89fXPyS4DQGmS4r_7A@mail.gmail.com>	<CALimQCXgc0eXeOcqFGUaCpSF7gKEe87KzvLqHZwUysV3WyjjGw@mail.gmail.com>	<CAAS2fgShChAQryfUOBp60jB-zxn2tH986fu1HfT+LsNdBYnoYg@mail.gmail.com>	<CAJHLa0P5r2+kxy7w8G=h=TAhdk1jUoW5UOiv-euo47uQY0u9ZA@mail.gmail.com>	<op.w9q6jdsayldrnw@laptop-air.hsd1.ca.comcast.net>
	<20140116212805.GA4421@petertodd.org>
Message-ID: <52D895CB.2090503@corganlabs.com>

On 01/16/2014 01:28 PM, Peter Todd wrote:

> I'm very against the name "reusable addresses" and strongly belive we
> should stick with the name stealth addresses.

I agree wholeheartedly against using "reusable address".  I personally
am fine with "stealth address", but can see where there might be a
negative connotation.

Might I suggest "master address", which is neutral in connotation, but
indicates both that it is fixed and that payment addresses are generated
as needed from it.

But please, no "reusable address."

-- 
Johnathan Corgan, Corgan Labs
SDR Training and Development Services
http://corganlabs.com
-------------- next part --------------
A non-text attachment was scrubbed...
Name: johnathan.vcf
Type: text/x-vcard
Size: 334 bytes
Desc: not available
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140116/14d333f0/attachment.vcf>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 230 bytes
Desc: OpenPGP digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140116/14d333f0/attachment.sig>

From jeremy at taplink.co  Fri Jan 17 03:13:39 2014
From: jeremy at taplink.co (Jeremy Spilman)
Date: Thu, 16 Jan 2014 21:13:39 -0600
Subject: [Bitcoin-development] Stealth Addresses
In-Reply-To: <20140116212805.GA4421@petertodd.org>
References: <CAAS2fgTz0TaGhym_35V3N2-vHVzU9BeuV8q+QJjwh5bg77FEZg@mail.gmail.com>
	<CANEZrP0huBWqgvQik9Yc26Tu4CwR0VSXcfC+qfzsZqvoU4VJGA@mail.gmail.com>
	<20140113133746.GI38964@giles.gnomon.org.uk>
	<CANEZrP1KAVhi_-cxCYe0rR9LUSYJ8MyW8=6eSJZ65FeY5ZJNuQ@mail.gmail.com>
	<20140114225321.GT38964@giles.gnomon.org.uk>
	<CANAnSg0tH_bK_19rsRRHOeZgrGYeWMhW89fXPyS4DQGmS4r_7A@mail.gmail.com>
	<CALimQCXgc0eXeOcqFGUaCpSF7gKEe87KzvLqHZwUysV3WyjjGw@mail.gmail.com>
	<CAAS2fgShChAQryfUOBp60jB-zxn2tH986fu1HfT+LsNdBYnoYg@mail.gmail.com>
	<CAJHLa0P5r2+kxy7w8G=h=TAhdk1jUoW5UOiv-euo47uQY0u9ZA@mail.gmail.com>
	<op.w9q6jdsayldrnw@laptop-air.hsd1.ca.comcast.net>
	<20140116212805.GA4421@petertodd.org>
Message-ID: <F5D64E97-662D-49DE-9053-89F52FBCB47E@taplink.co>

I hear you, and I really don't care that much what it's called, as much as, does it work and how!

> I might even try to enter in a "reusable" address in blockchain.info, which won't work, and I'll just figure
> "must be some new unsupported thing" and move on with my life.
> 

Regardless of what it's called, Blockchain.info should tell the user, hey this address doesn't let the whole world see every single payment that's made to it! If you paid something to this address, only you know how to find the payment - look for the stealth address in your transaction list. 

So if we call the address that has the pubKeys the "reusable address" and the address that's generated from the shared secret the "stealth address" then is everyone happy? :-)



From luke at dashjr.org  Fri Jan 17 05:40:52 2014
From: luke at dashjr.org (Luke-Jr)
Date: Fri, 17 Jan 2014 05:40:52 +0000
Subject: [Bitcoin-development] Suggestion: allow receivers to pay
	optional fee for transactions without fees
In-Reply-To: <CANOOu=-cA7TTfAtfRy1WL+Dy6EQPwjcTH1m=u+f9RB73wC=btw@mail.gmail.com>
References: <lba1l3$4tg$1@ger.gmane.org> <lba369$sp9$1@ger.gmane.org>
	<CANOOu=-cA7TTfAtfRy1WL+Dy6EQPwjcTH1m=u+f9RB73wC=btw@mail.gmail.com>
Message-ID: <201401170540.53093.luke@dashjr.org>

On Friday, January 17, 2014 2:39:31 AM Christophe Biocca wrote:
> To clarify, there are proposals to make miners recognize this
> situation and account for it, only eligius is running it at the moment
> IIRC:
> http://bitcoin.stackexchange.com/questions/8390/are-there-any-pools-or-larg
> e-miners-running-child-pays-for-parent-patch Right now if you were to try
> it likely wouldn't result in inclusion. But this is on the radar, and I
> suspect it'll eventually get merged into mainline.

If you did it and relayed directly to Eligius, it'd probably get mined.. the 
hard part is creating the transaction - once that's done it's smooth sailing 
;)

Side note: mining nodes should *not* be running mainline. In fact, they should 
be setting up their own customised transaction policies.



From drak at zikula.org  Fri Jan 17 07:49:36 2014
From: drak at zikula.org (Drak)
Date: Fri, 17 Jan 2014 07:49:36 +0000
Subject: [Bitcoin-development] Stealth Addresses
In-Reply-To: <20140116212805.GA4421@petertodd.org>
References: <CAAS2fgTz0TaGhym_35V3N2-vHVzU9BeuV8q+QJjwh5bg77FEZg@mail.gmail.com>
	<CANEZrP0huBWqgvQik9Yc26Tu4CwR0VSXcfC+qfzsZqvoU4VJGA@mail.gmail.com>
	<20140113133746.GI38964@giles.gnomon.org.uk>
	<CANEZrP1KAVhi_-cxCYe0rR9LUSYJ8MyW8=6eSJZ65FeY5ZJNuQ@mail.gmail.com>
	<20140114225321.GT38964@giles.gnomon.org.uk>
	<CANAnSg0tH_bK_19rsRRHOeZgrGYeWMhW89fXPyS4DQGmS4r_7A@mail.gmail.com>
	<CALimQCXgc0eXeOcqFGUaCpSF7gKEe87KzvLqHZwUysV3WyjjGw@mail.gmail.com>
	<CAAS2fgShChAQryfUOBp60jB-zxn2tH986fu1HfT+LsNdBYnoYg@mail.gmail.com>
	<CAJHLa0P5r2+kxy7w8G=h=TAhdk1jUoW5UOiv-euo47uQY0u9ZA@mail.gmail.com>
	<op.w9q6jdsayldrnw@laptop-air.hsd1.ca.comcast.net>
	<20140116212805.GA4421@petertodd.org>
Message-ID: <CANAnSg2TY7Zh7RnHkBeTz1s-WutGLayum8q5DhdLhtOBMDT9ng@mail.gmail.com>

Peter I agree with you about  "reusable addresses", but aren't we also
trying to get away from the word "address" entirely?  How about calling it
a "payment key" or "reusable payment key" instead? using "stealth" is just
asking for bad press imo.


On 16 January 2014 21:28, Peter Todd <pete at petertodd.org> wrote:

> On Wed, Jan 15, 2014 at 04:05:27PM -0800, Jeremy Spilman wrote:
> > Might I propose "reusable address".
> >
> > I think that describes it best to any non-programmer, and even more
> > so encourages wallets to present options as 'one time use' vs
> > 'reusable'.
> >
> > It definitely packs a marketing punch which could help drive
> > adoption. The feature is only useful if/when broadly adopted.
>
> I'm very against the name "reusable addresses" and strongly belive we
> should stick with the name stealth addresses.
>
> You gotta look at it from the perspective of a user; lets take standard
> pay-to-pubkey-hash addresses: I can tell my wallet to pay one as many
> times as I want and everything works just great. I also can enter the
> address on blockchain.info's search box, and every transaction related
> to the address, and the balance of it, pops up immediately.
>
> What is that telling me? A: Addresses starting with "1" are reusable. B:
> Transactions associated with them appear to be public knowledge.
>
> Now I upgrade my wallet software and it says I now have a "reusable"
> address. My reaction is "Huh? Normal addresses are reusable, what's
> special about this weird reusable address thing that my buddy Bob's
> wallet software couldn't pay." I might even try to enter in a "reusable"
> address in blockchain.info, which won't work, and I'll just figure
> "must be some new unsupported thing" and move on with my life.
>
> On the other hand, suppose my wallet says I now have "stealth address"
> support. I'm going to think "Huh, stealth? I guess that means privacy
> right? I like privacy." If I try searching for a stealth address on
> blockchain.info, when it doesn't work I might think twig on "Oh right!
> It said stealth addresses are private, so maybe the transactions are
> hidden?" I might also think "Maybe this is like stealth/incognito mode
> in my browser? So like, there's no history being kept for others to
> see?" Regardless, I'm going to be thinking "well I hear scary stuff
> about Bitcoin privacy, and this stealth thing sounds like it's gonna
> help, so I should learn more about that"
>
> Finally keep in mind that stealth addresses have had a tonne of very
> fast, and very wide reaching PR. The name is in the public conciousness
> already, and trying to change it now just because of vague bad
> associations is going to throw away the momentum of that good PR and
> slow down adoption. Last night I was at the Toronto Bitcoin Meetup and I
> based on conversations there with people there, technical and
> non-technical, almost everyone had heard about them and almost everyone
> seemed to understand the basic idea of why they were a good thing. That
> just wouldn't have happened with a name that tried to hide what stealth
> addresses were for, and by changing the name now we risk people not
> making the connection when wallet software gets upgraded to support
> them.
>
> --
> 'peter'[:-1]@petertodd.org
> 0000000000000001b0e0ae7ef97681ad77188030b6c791aef304947e6f524740
>
>
> ------------------------------------------------------------------------------
> CenturyLink Cloud: The Leader in Enterprise Cloud Services.
> Learn Why More Businesses Are Choosing CenturyLink Cloud For
> Critical Workloads, Development Environments & Everything In Between.
> Get a Quote or Start a Free Trial Today.
>
> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140117/e2b36d03/attachment.html>

From mike at plan99.net  Fri Jan 17 09:15:40 2014
From: mike at plan99.net (Mike Hearn)
Date: Fri, 17 Jan 2014 10:15:40 +0100
Subject: [Bitcoin-development] Stealth Addresses
In-Reply-To: <CANAnSg2TY7Zh7RnHkBeTz1s-WutGLayum8q5DhdLhtOBMDT9ng@mail.gmail.com>
References: <CAAS2fgTz0TaGhym_35V3N2-vHVzU9BeuV8q+QJjwh5bg77FEZg@mail.gmail.com>
	<CANEZrP0huBWqgvQik9Yc26Tu4CwR0VSXcfC+qfzsZqvoU4VJGA@mail.gmail.com>
	<20140113133746.GI38964@giles.gnomon.org.uk>
	<CANEZrP1KAVhi_-cxCYe0rR9LUSYJ8MyW8=6eSJZ65FeY5ZJNuQ@mail.gmail.com>
	<20140114225321.GT38964@giles.gnomon.org.uk>
	<CANAnSg0tH_bK_19rsRRHOeZgrGYeWMhW89fXPyS4DQGmS4r_7A@mail.gmail.com>
	<CALimQCXgc0eXeOcqFGUaCpSF7gKEe87KzvLqHZwUysV3WyjjGw@mail.gmail.com>
	<CAAS2fgShChAQryfUOBp60jB-zxn2tH986fu1HfT+LsNdBYnoYg@mail.gmail.com>
	<CAJHLa0P5r2+kxy7w8G=h=TAhdk1jUoW5UOiv-euo47uQY0u9ZA@mail.gmail.com>
	<op.w9q6jdsayldrnw@laptop-air.hsd1.ca.comcast.net>
	<20140116212805.GA4421@petertodd.org>
	<CANAnSg2TY7Zh7RnHkBeTz1s-WutGLayum8q5DhdLhtOBMDT9ng@mail.gmail.com>
Message-ID: <CANEZrP1=PMiJn9BoN50K1wz2tOdxx5L80ngjErCJqj5wm2ESPA@mail.gmail.com>

I must say, this shed is mighty fine looking. It'd be a great place to
store our bikes. But, what colour should we paint it?

How about we split the difference and go with "privacy address"? As Peter
notes, that's what people actually like and want. The problem with stealth
is it's got strong connotations with American military hardware and perhaps
thieves sneaking around in the night:

   https://www.google.com/search?tbm=isch&q=stealth

But everyone loves privacy.


On Fri, Jan 17, 2014 at 8:49 AM, Drak <drak at zikula.org> wrote:

> Peter I agree with you about  "reusable addresses", but aren't we also
> trying to get away from the word "address" entirely?  How about calling it
> a "payment key" or "reusable payment key" instead? using "stealth" is just
> asking for bad press imo.
>
>
> On 16 January 2014 21:28, Peter Todd <pete at petertodd.org> wrote:
>
>> On Wed, Jan 15, 2014 at 04:05:27PM -0800, Jeremy Spilman wrote:
>> > Might I propose "reusable address".
>> >
>> > I think that describes it best to any non-programmer, and even more
>> > so encourages wallets to present options as 'one time use' vs
>> > 'reusable'.
>> >
>> > It definitely packs a marketing punch which could help drive
>> > adoption. The feature is only useful if/when broadly adopted.
>>
>> I'm very against the name "reusable addresses" and strongly belive we
>> should stick with the name stealth addresses.
>>
>> You gotta look at it from the perspective of a user; lets take standard
>> pay-to-pubkey-hash addresses: I can tell my wallet to pay one as many
>> times as I want and everything works just great. I also can enter the
>> address on blockchain.info's search box, and every transaction related
>> to the address, and the balance of it, pops up immediately.
>>
>> What is that telling me? A: Addresses starting with "1" are reusable. B:
>> Transactions associated with them appear to be public knowledge.
>>
>> Now I upgrade my wallet software and it says I now have a "reusable"
>> address. My reaction is "Huh? Normal addresses are reusable, what's
>> special about this weird reusable address thing that my buddy Bob's
>> wallet software couldn't pay." I might even try to enter in a "reusable"
>> address in blockchain.info, which won't work, and I'll just figure
>> "must be some new unsupported thing" and move on with my life.
>>
>> On the other hand, suppose my wallet says I now have "stealth address"
>> support. I'm going to think "Huh, stealth? I guess that means privacy
>> right? I like privacy." If I try searching for a stealth address on
>> blockchain.info, when it doesn't work I might think twig on "Oh right!
>> It said stealth addresses are private, so maybe the transactions are
>> hidden?" I might also think "Maybe this is like stealth/incognito mode
>> in my browser? So like, there's no history being kept for others to
>> see?" Regardless, I'm going to be thinking "well I hear scary stuff
>> about Bitcoin privacy, and this stealth thing sounds like it's gonna
>> help, so I should learn more about that"
>>
>> Finally keep in mind that stealth addresses have had a tonne of very
>> fast, and very wide reaching PR. The name is in the public conciousness
>> already, and trying to change it now just because of vague bad
>> associations is going to throw away the momentum of that good PR and
>> slow down adoption. Last night I was at the Toronto Bitcoin Meetup and I
>> based on conversations there with people there, technical and
>> non-technical, almost everyone had heard about them and almost everyone
>> seemed to understand the basic idea of why they were a good thing. That
>> just wouldn't have happened with a name that tried to hide what stealth
>> addresses were for, and by changing the name now we risk people not
>> making the connection when wallet software gets upgraded to support
>> them.
>>
>> --
>> 'peter'[:-1]@petertodd.org
>> 0000000000000001b0e0ae7ef97681ad77188030b6c791aef304947e6f524740
>>
>>
>> ------------------------------------------------------------------------------
>> CenturyLink Cloud: The Leader in Enterprise Cloud Services.
>> Learn Why More Businesses Are Choosing CenturyLink Cloud For
>> Critical Workloads, Development Environments & Everything In Between.
>> Get a Quote or Start a Free Trial Today.
>>
>> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>
>>
>
>
> ------------------------------------------------------------------------------
> CenturyLink Cloud: The Leader in Enterprise Cloud Services.
> Learn Why More Businesses Are Choosing CenturyLink Cloud For
> Critical Workloads, Development Environments & Everything In Between.
> Get a Quote or Start a Free Trial Today.
>
> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140117/44ddef9f/attachment.html>

From mark at monetize.io  Fri Jan 17 09:19:03 2014
From: mark at monetize.io (Mark Friedenbach)
Date: Fri, 17 Jan 2014 01:19:03 -0800
Subject: [Bitcoin-development] Stealth Addresses
In-Reply-To: <CANEZrP1=PMiJn9BoN50K1wz2tOdxx5L80ngjErCJqj5wm2ESPA@mail.gmail.com>
References: <CAAS2fgTz0TaGhym_35V3N2-vHVzU9BeuV8q+QJjwh5bg77FEZg@mail.gmail.com>	<CANEZrP0huBWqgvQik9Yc26Tu4CwR0VSXcfC+qfzsZqvoU4VJGA@mail.gmail.com>	<20140113133746.GI38964@giles.gnomon.org.uk>	<CANEZrP1KAVhi_-cxCYe0rR9LUSYJ8MyW8=6eSJZ65FeY5ZJNuQ@mail.gmail.com>	<20140114225321.GT38964@giles.gnomon.org.uk>	<CANAnSg0tH_bK_19rsRRHOeZgrGYeWMhW89fXPyS4DQGmS4r_7A@mail.gmail.com>	<CALimQCXgc0eXeOcqFGUaCpSF7gKEe87KzvLqHZwUysV3WyjjGw@mail.gmail.com>	<CAAS2fgShChAQryfUOBp60jB-zxn2tH986fu1HfT+LsNdBYnoYg@mail.gmail.com>	<CAJHLa0P5r2+kxy7w8G=h=TAhdk1jUoW5UOiv-euo47uQY0u9ZA@mail.gmail.com>	<op.w9q6jdsayldrnw@laptop-air.hsd1.ca.comcast.net>	<20140116212805.GA4421@petertodd.org>	<CANAnSg2TY7Zh7RnHkBeTz1s-WutGLayum8q5DhdLhtOBMDT9ng@mail.gmail.com>
	<CANEZrP1=PMiJn9BoN50K1wz2tOdxx5L80ngjErCJqj5wm2ESPA@mail.gmail.com>
Message-ID: <52D8F587.70301@monetize.io>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On 01/17/2014 01:15 AM, Mike Hearn wrote:
> I must say, this shed is mighty fine looking. It'd be a great place
> to store our bikes. But, what colour should we paint it?
> 
> How about we split the difference and go with "privacy address"?
> As

Too close to private key, IMHO.

> Peter notes, that's what people actually like and want. The problem
> with stealth is it's got strong connotations with American military
> hardware and perhaps thieves sneaking around in the night:

And ninjas.
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.14 (GNU/Linux)
Comment: GPGTools - http://gpgtools.org
Comment: Using GnuPG with Thunderbird - http://www.enigmail.net/

iQIcBAEBAgAGBQJS2PWHAAoJEAdzVfsmodw4QKoP/iCB62bthf+VyOAZFtP/LbU3
op//I06zOd6oj3zSM0B3Qwz0+H3L9OqWeo9yP1KzYb8YG7RelGf6KOh0LBQoo0bY
eEv8EqvJiW0JOi7gmMsaBgxtZ99TKibGVWMramAV+pSOkKbbbQ23O8a3Y2uopZIg
eypB9sUO9STTc/vwEKZRtefoXHWDUF8bXel/YfTGJQjOuxN/z6gsXRPp4xDvySL3
Ll3OvgEGrqIjIodvMZY+V5wzxj/TlU5kCKS6Vug/JEM1U0DmiBBikaR6Yus5m/fC
yyxEQH8jATLZVsAac4Z16rQXj1nTRh4w6X9KCTynEaba5Z8fz38habUNxyjT8JG+
cP+QDQac9Nnxuw6gzM4QRkOiQas5eVNRdzNJ48k2SGDLb7AYPBO/URAV8Cd05caY
Gx1ruC3MVGu7Fu1/9rtKeWMcNyAvpklzs9DhHfqNmYcRCl6NcoaCvxfq3NesI4Z9
uQrTfL9VBUXJJ2z8ZLe3ZAdBz46159JXCBKHIWwZ+fm0uPkelvoUo8oP+OdxwP1x
wGCYmfvuf8lSnud8WM5EDDGo4+7GUU5Pnh9p+o6Lyp4d0WoplUmSvz2XriiANQjq
z/Xo3B321sdLOEI/Nrqnn3S/hMveru7HO7xQx1aUATvYga4ZyFZh/Yp0bwOAESBZ
GoG0piwQbQhoQZMslV4T
=40o3
-----END PGP SIGNATURE-----



From natanael.l at gmail.com  Fri Jan 17 09:23:22 2014
From: natanael.l at gmail.com (Natanael)
Date: Fri, 17 Jan 2014 10:23:22 +0100
Subject: [Bitcoin-development] Stealth Addresses
In-Reply-To: <CANEZrP1=PMiJn9BoN50K1wz2tOdxx5L80ngjErCJqj5wm2ESPA@mail.gmail.com>
References: <CAAS2fgTz0TaGhym_35V3N2-vHVzU9BeuV8q+QJjwh5bg77FEZg@mail.gmail.com>
	<CANEZrP0huBWqgvQik9Yc26Tu4CwR0VSXcfC+qfzsZqvoU4VJGA@mail.gmail.com>
	<20140113133746.GI38964@giles.gnomon.org.uk>
	<CANEZrP1KAVhi_-cxCYe0rR9LUSYJ8MyW8=6eSJZ65FeY5ZJNuQ@mail.gmail.com>
	<20140114225321.GT38964@giles.gnomon.org.uk>
	<CANAnSg0tH_bK_19rsRRHOeZgrGYeWMhW89fXPyS4DQGmS4r_7A@mail.gmail.com>
	<CALimQCXgc0eXeOcqFGUaCpSF7gKEe87KzvLqHZwUysV3WyjjGw@mail.gmail.com>
	<CAAS2fgShChAQryfUOBp60jB-zxn2tH986fu1HfT+LsNdBYnoYg@mail.gmail.com>
	<CAJHLa0P5r2+kxy7w8G=h=TAhdk1jUoW5UOiv-euo47uQY0u9ZA@mail.gmail.com>
	<op.w9q6jdsayldrnw@laptop-air.hsd1.ca.comcast.net>
	<20140116212805.GA4421@petertodd.org>
	<CANAnSg2TY7Zh7RnHkBeTz1s-WutGLayum8q5DhdLhtOBMDT9ng@mail.gmail.com>
	<CANEZrP1=PMiJn9BoN50K1wz2tOdxx5L80ngjErCJqj5wm2ESPA@mail.gmail.com>
Message-ID: <CAAt2M19xSmdgtBfva2WEtV8ff6DP7Zhwtbi+8sXeUrFQGAK1Wg@mail.gmail.com>

So far I've only liked the original name "Stealth address" and the
suggestion "routing address".

Should we put this up for some kind of informal vote with comments allowed?
Like a Google docs form?

- Sent from my phone
Den 17 jan 2014 10:18 skrev "Mike Hearn" <mike at plan99.net>:

> I must say, this shed is mighty fine looking. It'd be a great place to
> store our bikes. But, what colour should we paint it?
>
> How about we split the difference and go with "privacy address"? As Peter
> notes, that's what people actually like and want. The problem with stealth
> is it's got strong connotations with American military hardware and perhaps
> thieves sneaking around in the night:
>
>    https://www.google.com/search?tbm=isch&q=stealth
>
> But everyone loves privacy.
>
>
> On Fri, Jan 17, 2014 at 8:49 AM, Drak <drak at zikula.org> wrote:
>
>> Peter I agree with you about  "reusable addresses", but aren't we also
>> trying to get away from the word "address" entirely?  How about calling it
>> a "payment key" or "reusable payment key" instead? using "stealth" is just
>> asking for bad press imo.
>>
>>
>> On 16 January 2014 21:28, Peter Todd <pete at petertodd.org> wrote:
>>
>>> On Wed, Jan 15, 2014 at 04:05:27PM -0800, Jeremy Spilman wrote:
>>> > Might I propose "reusable address".
>>> >
>>> > I think that describes it best to any non-programmer, and even more
>>> > so encourages wallets to present options as 'one time use' vs
>>> > 'reusable'.
>>> >
>>> > It definitely packs a marketing punch which could help drive
>>> > adoption. The feature is only useful if/when broadly adopted.
>>>
>>> I'm very against the name "reusable addresses" and strongly belive we
>>> should stick with the name stealth addresses.
>>>
>>> You gotta look at it from the perspective of a user; lets take standard
>>> pay-to-pubkey-hash addresses: I can tell my wallet to pay one as many
>>> times as I want and everything works just great. I also can enter the
>>> address on blockchain.info's search box, and every transaction related
>>> to the address, and the balance of it, pops up immediately.
>>>
>>> What is that telling me? A: Addresses starting with "1" are reusable. B:
>>> Transactions associated with them appear to be public knowledge.
>>>
>>> Now I upgrade my wallet software and it says I now have a "reusable"
>>> address. My reaction is "Huh? Normal addresses are reusable, what's
>>> special about this weird reusable address thing that my buddy Bob's
>>> wallet software couldn't pay." I might even try to enter in a "reusable"
>>> address in blockchain.info, which won't work, and I'll just figure
>>> "must be some new unsupported thing" and move on with my life.
>>>
>>> On the other hand, suppose my wallet says I now have "stealth address"
>>> support. I'm going to think "Huh, stealth? I guess that means privacy
>>> right? I like privacy." If I try searching for a stealth address on
>>> blockchain.info, when it doesn't work I might think twig on "Oh right!
>>> It said stealth addresses are private, so maybe the transactions are
>>> hidden?" I might also think "Maybe this is like stealth/incognito mode
>>> in my browser? So like, there's no history being kept for others to
>>> see?" Regardless, I'm going to be thinking "well I hear scary stuff
>>> about Bitcoin privacy, and this stealth thing sounds like it's gonna
>>> help, so I should learn more about that"
>>>
>>> Finally keep in mind that stealth addresses have had a tonne of very
>>> fast, and very wide reaching PR. The name is in the public conciousness
>>> already, and trying to change it now just because of vague bad
>>> associations is going to throw away the momentum of that good PR and
>>> slow down adoption. Last night I was at the Toronto Bitcoin Meetup and I
>>> based on conversations there with people there, technical and
>>> non-technical, almost everyone had heard about them and almost everyone
>>> seemed to understand the basic idea of why they were a good thing. That
>>> just wouldn't have happened with a name that tried to hide what stealth
>>> addresses were for, and by changing the name now we risk people not
>>> making the connection when wallet software gets upgraded to support
>>> them.
>>>
>>> --
>>> 'peter'[:-1]@petertodd.org
>>> 0000000000000001b0e0ae7ef97681ad77188030b6c791aef304947e6f524740
>>>
>>>
>>> ------------------------------------------------------------------------------
>>> CenturyLink Cloud: The Leader in Enterprise Cloud Services.
>>> Learn Why More Businesses Are Choosing CenturyLink Cloud For
>>> Critical Workloads, Development Environments & Everything In Between.
>>> Get a Quote or Start a Free Trial Today.
>>>
>>> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk
>>> _______________________________________________
>>> Bitcoin-development mailing list
>>> Bitcoin-development at lists.sourceforge.net
>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>>
>>>
>>
>>
>> ------------------------------------------------------------------------------
>> CenturyLink Cloud: The Leader in Enterprise Cloud Services.
>> Learn Why More Businesses Are Choosing CenturyLink Cloud For
>> Critical Workloads, Development Environments & Everything In Between.
>> Get a Quote or Start a Free Trial Today.
>>
>> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>
>>
>
>
> ------------------------------------------------------------------------------
> CenturyLink Cloud: The Leader in Enterprise Cloud Services.
> Learn Why More Businesses Are Choosing CenturyLink Cloud For
> Critical Workloads, Development Environments & Everything In Between.
> Get a Quote or Start a Free Trial Today.
>
> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140117/0b612dbf/attachment.html>

From drak at zikula.org  Fri Jan 17 09:59:01 2014
From: drak at zikula.org (Drak)
Date: Fri, 17 Jan 2014 09:59:01 +0000
Subject: [Bitcoin-development] Stealth Addresses
In-Reply-To: <CANEZrP1=PMiJn9BoN50K1wz2tOdxx5L80ngjErCJqj5wm2ESPA@mail.gmail.com>
References: <CAAS2fgTz0TaGhym_35V3N2-vHVzU9BeuV8q+QJjwh5bg77FEZg@mail.gmail.com>
	<CANEZrP0huBWqgvQik9Yc26Tu4CwR0VSXcfC+qfzsZqvoU4VJGA@mail.gmail.com>
	<20140113133746.GI38964@giles.gnomon.org.uk>
	<CANEZrP1KAVhi_-cxCYe0rR9LUSYJ8MyW8=6eSJZ65FeY5ZJNuQ@mail.gmail.com>
	<20140114225321.GT38964@giles.gnomon.org.uk>
	<CANAnSg0tH_bK_19rsRRHOeZgrGYeWMhW89fXPyS4DQGmS4r_7A@mail.gmail.com>
	<CALimQCXgc0eXeOcqFGUaCpSF7gKEe87KzvLqHZwUysV3WyjjGw@mail.gmail.com>
	<CAAS2fgShChAQryfUOBp60jB-zxn2tH986fu1HfT+LsNdBYnoYg@mail.gmail.com>
	<CAJHLa0P5r2+kxy7w8G=h=TAhdk1jUoW5UOiv-euo47uQY0u9ZA@mail.gmail.com>
	<op.w9q6jdsayldrnw@laptop-air.hsd1.ca.comcast.net>
	<20140116212805.GA4421@petertodd.org>
	<CANAnSg2TY7Zh7RnHkBeTz1s-WutGLayum8q5DhdLhtOBMDT9ng@mail.gmail.com>
	<CANEZrP1=PMiJn9BoN50K1wz2tOdxx5L80ngjErCJqj5wm2ESPA@mail.gmail.com>
Message-ID: <CANAnSg1ddD5TPz6jgMBmwkibrndepewxNzgGi+BFC+7KAD63Eg@mail.gmail.com>

That could also work. Still, didn't we want to ditch the word address?
Could be a privacy key...
On 17 Jan 2014 09:15, "Mike Hearn" <mike at plan99.net> wrote:

> I must say, this shed is mighty fine looking. It'd be a great place to
> store our bikes. But, what colour should we paint it?
>
> How about we split the difference and go with "privacy address"? As Peter
> notes, that's what people actually like and want. The problem with stealth
> is it's got strong connotations with American military hardware and perhaps
> thieves sneaking around in the night:
>
>    https://www.google.com/search?tbm=isch&q=stealth
>
> But everyone loves privacy.
>
>
> On Fri, Jan 17, 2014 at 8:49 AM, Drak <drak at zikula.org> wrote:
>
>> Peter I agree with you about  "reusable addresses", but aren't we also
>> trying to get away from the word "address" entirely?  How about calling it
>> a "payment key" or "reusable payment key" instead? using "stealth" is just
>> asking for bad press imo.
>>
>>
>> On 16 January 2014 21:28, Peter Todd <pete at petertodd.org> wrote:
>>
>>> On Wed, Jan 15, 2014 at 04:05:27PM -0800, Jeremy Spilman wrote:
>>> > Might I propose "reusable address".
>>> >
>>> > I think that describes it best to any non-programmer, and even more
>>> > so encourages wallets to present options as 'one time use' vs
>>> > 'reusable'.
>>> >
>>> > It definitely packs a marketing punch which could help drive
>>> > adoption. The feature is only useful if/when broadly adopted.
>>>
>>> I'm very against the name "reusable addresses" and strongly belive we
>>> should stick with the name stealth addresses.
>>>
>>> You gotta look at it from the perspective of a user; lets take standard
>>> pay-to-pubkey-hash addresses: I can tell my wallet to pay one as many
>>> times as I want and everything works just great. I also can enter the
>>> address on blockchain.info's search box, and every transaction related
>>> to the address, and the balance of it, pops up immediately.
>>>
>>> What is that telling me? A: Addresses starting with "1" are reusable. B:
>>> Transactions associated with them appear to be public knowledge.
>>>
>>> Now I upgrade my wallet software and it says I now have a "reusable"
>>> address. My reaction is "Huh? Normal addresses are reusable, what's
>>> special about this weird reusable address thing that my buddy Bob's
>>> wallet software couldn't pay." I might even try to enter in a "reusable"
>>> address in blockchain.info, which won't work, and I'll just figure
>>> "must be some new unsupported thing" and move on with my life.
>>>
>>> On the other hand, suppose my wallet says I now have "stealth address"
>>> support. I'm going to think "Huh, stealth? I guess that means privacy
>>> right? I like privacy." If I try searching for a stealth address on
>>> blockchain.info, when it doesn't work I might think twig on "Oh right!
>>> It said stealth addresses are private, so maybe the transactions are
>>> hidden?" I might also think "Maybe this is like stealth/incognito mode
>>> in my browser? So like, there's no history being kept for others to
>>> see?" Regardless, I'm going to be thinking "well I hear scary stuff
>>> about Bitcoin privacy, and this stealth thing sounds like it's gonna
>>> help, so I should learn more about that"
>>>
>>> Finally keep in mind that stealth addresses have had a tonne of very
>>> fast, and very wide reaching PR. The name is in the public conciousness
>>> already, and trying to change it now just because of vague bad
>>> associations is going to throw away the momentum of that good PR and
>>> slow down adoption. Last night I was at the Toronto Bitcoin Meetup and I
>>> based on conversations there with people there, technical and
>>> non-technical, almost everyone had heard about them and almost everyone
>>> seemed to understand the basic idea of why they were a good thing. That
>>> just wouldn't have happened with a name that tried to hide what stealth
>>> addresses were for, and by changing the name now we risk people not
>>> making the connection when wallet software gets upgraded to support
>>> them.
>>>
>>> --
>>> 'peter'[:-1]@petertodd.org
>>> 0000000000000001b0e0ae7ef97681ad77188030b6c791aef304947e6f524740
>>>
>>>
>>> ------------------------------------------------------------------------------
>>> CenturyLink Cloud: The Leader in Enterprise Cloud Services.
>>> Learn Why More Businesses Are Choosing CenturyLink Cloud For
>>> Critical Workloads, Development Environments & Everything In Between.
>>> Get a Quote or Start a Free Trial Today.
>>>
>>> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk
>>> _______________________________________________
>>> Bitcoin-development mailing list
>>> Bitcoin-development at lists.sourceforge.net
>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>>
>>>
>>
>>
>> ------------------------------------------------------------------------------
>> CenturyLink Cloud: The Leader in Enterprise Cloud Services.
>> Learn Why More Businesses Are Choosing CenturyLink Cloud For
>> Critical Workloads, Development Environments & Everything In Between.
>> Get a Quote or Start a Free Trial Today.
>>
>> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140117/521c0ff2/attachment.html>

From laanwj at gmail.com  Fri Jan 17 11:44:09 2014
From: laanwj at gmail.com (Wladimir)
Date: Fri, 17 Jan 2014 12:44:09 +0100
Subject: [Bitcoin-development] Bitcoin Core 0.9rc1 release schedule
In-Reply-To: <201401161523.38623.luke@dashjr.org>
References: <CA+s+GJBo7iUEJTfJw2e6qcDmdHNGdDN442Svs5ikVyUL1Jm0Wg@mail.gmail.com>
	<201401161523.38623.luke@dashjr.org>
Message-ID: <CA+s+GJDeV9-djdEsA_stznNK9zzBA_0xQFV_m6tVygJicuLWuQ@mail.gmail.com>

On Thu, Jan 16, 2014 at 4:23 PM, Luke-Jr <luke at dashjr.org> wrote:

>
> https://github.com/bitcoin/bitcoin/pulls/luke-jr
>
> These are pretty much all well-tested and stable for months now.
>

#3242: Autoconf improvements needs rebase, and comment from jgarzik and me
taken into account (about -enable-frontends=).

The others appear to be more controversial as they affect mining/consensus.
I'd really like to see ACKs from more reviewers and testers there before
merging.

Wladimir
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140117/8541f89d/attachment.html>

From joseph at vaughn.perling.com  Fri Jan 17 12:16:37 2014
From: joseph at vaughn.perling.com (joseph at vaughn.perling.com)
Date: Fri, 17 Jan 2014 05:16:37 -0700
Subject: [Bitcoin-development] Stealth Addresses
In-Reply-To: <mailman.417890.1389952750.21953.bitcoin-development@lists.sourceforge.net>
Message-ID: <20140117051637.134af40d74b4eb975f2c12a66e6f27b1.2ca9e657d3.mailapi@email11.secureserver.net>

On naming, please allow consideration of "Confidential address".
Less conflation with "private key", connotes confidence, and as the address is known to the transacting parties, it is a precisely accurate name.
 
One of the use cases for these will be in multinational corporate internal international settlement.  For a company to use bitcoin for its internal settlement and maintain confidence that competitors will not be able to suss out its transactions, these confidential addresses will be of great use.
 
 
Stealth connotes stealing, theft, hiding, fear, sneakiness, stealth bombers.  Maybe it is a good name, but not the best name.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140117/90d30b4b/attachment.html>

From pete at petertodd.org  Fri Jan 17 14:46:02 2014
From: pete at petertodd.org (Peter Todd)
Date: Fri, 17 Jan 2014 09:46:02 -0500
Subject: [Bitcoin-development] Stealth Addresses
In-Reply-To: <CANEZrP1=PMiJn9BoN50K1wz2tOdxx5L80ngjErCJqj5wm2ESPA@mail.gmail.com>
References: <CANEZrP1KAVhi_-cxCYe0rR9LUSYJ8MyW8=6eSJZ65FeY5ZJNuQ@mail.gmail.com>
	<20140114225321.GT38964@giles.gnomon.org.uk>
	<CANAnSg0tH_bK_19rsRRHOeZgrGYeWMhW89fXPyS4DQGmS4r_7A@mail.gmail.com>
	<CALimQCXgc0eXeOcqFGUaCpSF7gKEe87KzvLqHZwUysV3WyjjGw@mail.gmail.com>
	<CAAS2fgShChAQryfUOBp60jB-zxn2tH986fu1HfT+LsNdBYnoYg@mail.gmail.com>
	<CAJHLa0P5r2+kxy7w8G=h=TAhdk1jUoW5UOiv-euo47uQY0u9ZA@mail.gmail.com>
	<op.w9q6jdsayldrnw@laptop-air.hsd1.ca.comcast.net>
	<20140116212805.GA4421@petertodd.org>
	<CANAnSg2TY7Zh7RnHkBeTz1s-WutGLayum8q5DhdLhtOBMDT9ng@mail.gmail.com>
	<CANEZrP1=PMiJn9BoN50K1wz2tOdxx5L80ngjErCJqj5wm2ESPA@mail.gmail.com>
Message-ID: <20140117144601.GA8614@petertodd.org>

On Fri, Jan 17, 2014 at 10:15:40AM +0100, Mike Hearn wrote:
> I must say, this shed is mighty fine looking. It'd be a great place to
> store our bikes. But, what colour should we paint it?

I think we should paint it this colour:

    They had uncovered what seemed to be the side of a large coloured
    globule embedded in the substance. The colour, which resembled some
    of the bands in the meteor's strange spectrum, was almost impossible
    to describe; and it was only by analogy that they called it colour
    at all.  Its texture was glossy, and upon tapping it appeared to
    promise both brittle ness and hollowness. One of the professors gave
    it a smart blow with a hammer, and it burst with a nervous little
    pop. Nothing was emitted, and all trace of the thing vanished with
    the puncturing. It left behind a hollow spherical space about three
    inches across, and all thought it probable that others would be
    discovered as the enclosing substance wasted away.

I think it really gets to the core of my feelings about this naming
discussion.

> How about we split the difference and go with "privacy address"? As Peter
> notes, that's what people actually like and want. The problem with stealth
> is it's got strong connotations with American military hardware and perhaps
> thieves sneaking around in the night:
> 
>    https://www.google.com/search?tbm=isch&q=stealth

WOW! AWESOME KICK-ASS PICS!

Come to think of it, I could have called it "incognito addresses" - a
term nice enough that Google and Firefox use it in their browsers - but
what's done is done and any further discussion about this is just going
to confuse the public. Remember that in the long run all this stuff will
be hidden behind payment protocols anyway, and users *won't even know*
that under the hood a stealth address is being used, making the name
just a technical detail. For now though, lets use the good PR and get
some early adopters on board.

However, the term 'incognito' probably would be a good one to use within
wallet software itself to describe what it's doing when the user clicks
the "I want my transactions to be private" setting - there are after all
fundemental bandwidth-privacy trade-offs in the threat model supposed by
both prefix and bloom filters. In this instance the term isn't going to
go away.


Anyway, back to work: For the actual address format I strongly think we
need to ensure that it can be upgrading in a backwards compatible way.
This means we have to be able to add new fields - for instance if
Gregory's ideas for different ways of doing the SPV-bait came to
fruition. Given that "addresses" aren't something that should stay
user-visible forever, thoughts on just making the actual data a protocol
buffers object?

Second question: Any performance figures yet on how efficient scanning
the blockchain for matching transactions actually is? I'd like to get an
idea soon for both desktop and smartphone wallets so we can figure out
what kind of trade-offs users might be forced into in terms of prefix
length.

-- 
'peter'[:-1]@petertodd.org
0000000000000001c9b372ed519ecc6d41c10b42a7457d1ca5acd560a535596b
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 490 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140117/588e739e/attachment.sig>

From pete at petertodd.org  Fri Jan 17 14:52:12 2014
From: pete at petertodd.org (Peter Todd)
Date: Fri, 17 Jan 2014 09:52:12 -0500
Subject: [Bitcoin-development] Reality Keys trusted oracle service
Message-ID: <20140117145212.GA8760@petertodd.org>

Finally seeing a more complex script-use-case being implemented:

http://www.coindesk.com/reality-keys-bitcoins-third-party-guarantor-contracts/

    Enter Reality Keys, a new service by Tokyo-based startup Social
    Minds due for public launch on 20th January. Reality Keys provides
    real-world data in a form that can be used to complete or disregard
    bitcoin transactions, based on quantifiable facts.

    [...]

    Users then specify a date at which they would like to confirm the
    status or outcome of a particular event, and two cryptographic
    public keys are provided: one for if the event happens and another
    for if it doesn?t.

    [...]

    It is all, of course, anonymous. Reality Keys provides only the
    keys, and has no interest in or knowledge of the nature of the
    contract or the amounts of bitcoin at stake.

-- 
'peter'[:-1]@petertodd.org
0000000000000000d34d6e0e8d8290c7248f32bb3c39400892a34a3e761f6e78
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 490 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140117/90561c89/attachment.sig>

From luke at dashjr.org  Fri Jan 17 18:41:36 2014
From: luke at dashjr.org (Luke-Jr)
Date: Fri, 17 Jan 2014 18:41:36 +0000
Subject: [Bitcoin-development] Bitcoin Core 0.9rc1 release schedule
In-Reply-To: <CA+s+GJDeV9-djdEsA_stznNK9zzBA_0xQFV_m6tVygJicuLWuQ@mail.gmail.com>
References: <CA+s+GJBo7iUEJTfJw2e6qcDmdHNGdDN442Svs5ikVyUL1Jm0Wg@mail.gmail.com>
	<201401161523.38623.luke@dashjr.org>
	<CA+s+GJDeV9-djdEsA_stznNK9zzBA_0xQFV_m6tVygJicuLWuQ@mail.gmail.com>
Message-ID: <201401171841.37790.luke@dashjr.org>

On Friday, January 17, 2014 11:44:09 AM Wladimir wrote:
> On Thu, Jan 16, 2014 at 4:23 PM, Luke-Jr <luke at dashjr.org> wrote:
> > https://github.com/bitcoin/bitcoin/pulls/luke-jr
> > 
> > These are pretty much all well-tested and stable for months now.
> 
> #3242: Autoconf improvements needs rebase, and comment from jgarzik and me
> taken into account (about -enable-frontends=).

I'll try to get this done over the weekend.

> The others appear to be more controversial as they affect mining/consensus.
> I'd really like to see ACKs from more reviewers and testers there before
> merging.

Can you elaborate on this? I can see how Proposals might, if buggy, affect 
consensus, but the rest shouldn't. I don't think there's anything 
controversial in any of these (does someone disagree with CPFP?).

Luke



From bendavenport at gmail.com  Fri Jan 17 19:21:24 2014
From: bendavenport at gmail.com (Ben Davenport)
Date: Fri, 17 Jan 2014 11:21:24 -0800
Subject: [Bitcoin-development] Stealth Addresses
In-Reply-To: <20140117144601.GA8614@petertodd.org>
References: <CANEZrP1KAVhi_-cxCYe0rR9LUSYJ8MyW8=6eSJZ65FeY5ZJNuQ@mail.gmail.com>
	<20140114225321.GT38964@giles.gnomon.org.uk>
	<CANAnSg0tH_bK_19rsRRHOeZgrGYeWMhW89fXPyS4DQGmS4r_7A@mail.gmail.com>
	<CALimQCXgc0eXeOcqFGUaCpSF7gKEe87KzvLqHZwUysV3WyjjGw@mail.gmail.com>
	<CAAS2fgShChAQryfUOBp60jB-zxn2tH986fu1HfT+LsNdBYnoYg@mail.gmail.com>
	<CAJHLa0P5r2+kxy7w8G=h=TAhdk1jUoW5UOiv-euo47uQY0u9ZA@mail.gmail.com>
	<op.w9q6jdsayldrnw@laptop-air.hsd1.ca.comcast.net>
	<20140116212805.GA4421@petertodd.org>
	<CANAnSg2TY7Zh7RnHkBeTz1s-WutGLayum8q5DhdLhtOBMDT9ng@mail.gmail.com>
	<CANEZrP1=PMiJn9BoN50K1wz2tOdxx5L80ngjErCJqj5wm2ESPA@mail.gmail.com>
	<20140117144601.GA8614@petertodd.org>
Message-ID: <CALimQCU10asn65q=+VwCVNtgbROu9XQOYKzB7jy-TCFoemjEOQ@mail.gmail.com>

Well, at least we don't have to worry about cache invalidation.

Ben


On Fri, Jan 17, 2014 at 6:46 AM, Peter Todd <pete at petertodd.org> wrote:

> On Fri, Jan 17, 2014 at 10:15:40AM +0100, Mike Hearn wrote:
> > I must say, this shed is mighty fine looking. It'd be a great place to
> > store our bikes. But, what colour should we paint it?
>
> I think we should paint it this colour:
>
>     They had uncovered what seemed to be the side of a large coloured
>     globule embedded in the substance. The colour, which resembled some
>     of the bands in the meteor's strange spectrum, was almost impossible
>     to describe; and it was only by analogy that they called it colour
>     at all.  Its texture was glossy, and upon tapping it appeared to
>     promise both brittle ness and hollowness. One of the professors gave
>     it a smart blow with a hammer, and it burst with a nervous little
>     pop. Nothing was emitted, and all trace of the thing vanished with
>     the puncturing. It left behind a hollow spherical space about three
>     inches across, and all thought it probable that others would be
>     discovered as the enclosing substance wasted away.
>
> I think it really gets to the core of my feelings about this naming
> discussion.
>
> > How about we split the difference and go with "privacy address"? As Peter
> > notes, that's what people actually like and want. The problem with
> stealth
> > is it's got strong connotations with American military hardware and
> perhaps
> > thieves sneaking around in the night:
> >
> >    https://www.google.com/search?tbm=isch&q=stealth
>
> WOW! AWESOME KICK-ASS PICS!
>
> Come to think of it, I could have called it "incognito addresses" - a
> term nice enough that Google and Firefox use it in their browsers - but
> what's done is done and any further discussion about this is just going
> to confuse the public. Remember that in the long run all this stuff will
> be hidden behind payment protocols anyway, and users *won't even know*
> that under the hood a stealth address is being used, making the name
> just a technical detail. For now though, lets use the good PR and get
> some early adopters on board.
>
> However, the term 'incognito' probably would be a good one to use within
> wallet software itself to describe what it's doing when the user clicks
> the "I want my transactions to be private" setting - there are after all
> fundemental bandwidth-privacy trade-offs in the threat model supposed by
> both prefix and bloom filters. In this instance the term isn't going to
> go away.
>
>
> Anyway, back to work: For the actual address format I strongly think we
> need to ensure that it can be upgrading in a backwards compatible way.
> This means we have to be able to add new fields - for instance if
> Gregory's ideas for different ways of doing the SPV-bait came to
> fruition. Given that "addresses" aren't something that should stay
> user-visible forever, thoughts on just making the actual data a protocol
> buffers object?
>
> Second question: Any performance figures yet on how efficient scanning
> the blockchain for matching transactions actually is? I'd like to get an
> idea soon for both desktop and smartphone wallets so we can figure out
> what kind of trade-offs users might be forced into in terms of prefix
> length.
>
> --
> 'peter'[:-1]@petertodd.org
> 0000000000000001c9b372ed519ecc6d41c10b42a7457d1ca5acd560a535596b
>
>
> ------------------------------------------------------------------------------
> CenturyLink Cloud: The Leader in Enterprise Cloud Services.
> Learn Why More Businesses Are Choosing CenturyLink Cloud For
> Critical Workloads, Development Environments & Everything In Between.
> Get a Quote or Start a Free Trial Today.
>
> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140117/f1767ee8/attachment.html>

From da2ce7 at gmail.com  Fri Jan 17 20:16:23 2014
From: da2ce7 at gmail.com (Cameron Garnham)
Date: Sat, 18 Jan 2014 04:16:23 +0800
Subject: [Bitcoin-development] Stealth Addresses
In-Reply-To: <CANAnSg1ddD5TPz6jgMBmwkibrndepewxNzgGi+BFC+7KAD63Eg@mail.gmail.com>
References: <CAAS2fgTz0TaGhym_35V3N2-vHVzU9BeuV8q+QJjwh5bg77FEZg@mail.gmail.com>	<CANEZrP0huBWqgvQik9Yc26Tu4CwR0VSXcfC+qfzsZqvoU4VJGA@mail.gmail.com>	<20140113133746.GI38964@giles.gnomon.org.uk>	<CANEZrP1KAVhi_-cxCYe0rR9LUSYJ8MyW8=6eSJZ65FeY5ZJNuQ@mail.gmail.com>	<20140114225321.GT38964@giles.gnomon.org.uk>	<CANAnSg0tH_bK_19rsRRHOeZgrGYeWMhW89fXPyS4DQGmS4r_7A@mail.gmail.com>	<CALimQCXgc0eXeOcqFGUaCpSF7gKEe87KzvLqHZwUysV3WyjjGw@mail.gmail.com>	<CAAS2fgShChAQryfUOBp60jB-zxn2tH986fu1HfT+LsNdBYnoYg@mail.gmail.com>	<CAJHLa0P5r2+kxy7w8G=h=TAhdk1jUoW5UOiv-euo47uQY0u9ZA@mail.gmail.com>	<op.w9q6jdsayldrnw@laptop-air.hsd1.ca.comcast.net>	<20140116212805.GA4421@petertodd.org>	<CANAnSg2TY7Zh7RnHkBeTz1s-WutGLayum8q5DhdLhtOBMDT9ng@mail.gmail.com>	<CANEZrP1=PMiJn9BoN50K1wz2tOdxx5L80ngjErCJqj5wm2ESPA@mail.gmail.com>
	<CANAnSg1ddD5TPz6jgMBmwkibrndepewxNzgGi+BFC+7KAD63Eg@mail.gmail.com>
Message-ID: <52D98F97.1010807@gmail.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512

One of the possible words that haven't been proposed is 'personal' where
bitcoin addressed are commonly incorrectly called public address.

Maybe 'personal account' or even 'personal address' would imply that the
balance on such an account shouldn't be assumed to be public knowledge.

Cam.


On 17/01/2014 5:59 pm, Drak wrote:
> That could also work. Still, didn't we want to ditch the word address?
> Could be a privacy key...
> 
> On 17 Jan 2014 09:15, "Mike Hearn" <mike at plan99.net
> <mailto:mike at plan99.net>> wrote:
> 
>     I must say, this shed is mighty fine looking. It'd be a great place
>     to store our bikes. But, what colour should we paint it?
> 
>     How about we split the difference and go with "privacy address"? As
>     Peter notes, that's what people actually like and want. The problem
>     with stealth is it's got strong connotations with American military
>     hardware and perhaps thieves sneaking around in the night:
> 
>        https://www.google.com/search?tbm=isch&q=stealth
> 
>     But everyone loves privacy.
> 
> 
>     On Fri, Jan 17, 2014 at 8:49 AM, Drak <drak at zikula.org
>     <mailto:drak at zikula.org>> wrote:
> 
>         Peter I agree with you about  "reusable addresses", but aren't
>         we also trying to get away from the word "address" entirely?
>          How about calling it a "payment key" or "reusable payment key"
>         instead? using "stealth" is just asking for bad press imo.
> 
> 
>         On 16 January 2014 21:28, Peter Todd <pete at petertodd.org
>         <mailto:pete at petertodd.org>> wrote:
> 
>             On Wed, Jan 15, 2014 at 04:05:27PM -0800, Jeremy Spilman wrote:
>             > Might I propose "reusable address".
>             >
>             > I think that describes it best to any non-programmer, and
>             even more
>             > so encourages wallets to present options as 'one time use' vs
>             > 'reusable'.
>             >
>             > It definitely packs a marketing punch which could help drive
>             > adoption. The feature is only useful if/when broadly adopted.
> 
>             I'm very against the name "reusable addresses" and strongly
>             belive we
>             should stick with the name stealth addresses.
> 
>             You gotta look at it from the perspective of a user; lets
>             take standard
>             pay-to-pubkey-hash addresses: I can tell my wallet to pay
>             one as many
>             times as I want and everything works just great. I also can
>             enter the
>             address on blockchain.info <http://blockchain.info>'s search
>             box, and every transaction related
>             to the address, and the balance of it, pops up immediately.
> 
>             What is that telling me? A: Addresses starting with "1" are
>             reusable. B:
>             Transactions associated with them appear to be public knowledge.
> 
>             Now I upgrade my wallet software and it says I now have a
>             "reusable"
>             address. My reaction is "Huh? Normal addresses are reusable,
>             what's
>             special about this weird reusable address thing that my
>             buddy Bob's
>             wallet software couldn't pay." I might even try to enter in
>             a "reusable"
>             address in blockchain.info <http://blockchain.info>, which
>             won't work, and I'll just figure
>             "must be some new unsupported thing" and move on with my life.
> 
>             On the other hand, suppose my wallet says I now have
>             "stealth address"
>             support. I'm going to think "Huh, stealth? I guess that
>             means privacy
>             right? I like privacy." If I try searching for a stealth
>             address on
>             blockchain.info <http://blockchain.info>, when it doesn't
>             work I might think twig on "Oh right!
>             It said stealth addresses are private, so maybe the
>             transactions are
>             hidden?" I might also think "Maybe this is like
>             stealth/incognito mode
>             in my browser? So like, there's no history being kept for
>             others to
>             see?" Regardless, I'm going to be thinking "well I hear
>             scary stuff
>             about Bitcoin privacy, and this stealth thing sounds like
>             it's gonna
>             help, so I should learn more about that"
> 
>             Finally keep in mind that stealth addresses have had a tonne
>             of very
>             fast, and very wide reaching PR. The name is in the public
>             conciousness
>             already, and trying to change it now just because of vague bad
>             associations is going to throw away the momentum of that
>             good PR and
>             slow down adoption. Last night I was at the Toronto Bitcoin
>             Meetup and I
>             based on conversations there with people there, technical and
>             non-technical, almost everyone had heard about them and
>             almost everyone
>             seemed to understand the basic idea of why they were a good
>             thing. That
>             just wouldn't have happened with a name that tried to hide
>             what stealth
>             addresses were for, and by changing the name now we risk
>             people not
>             making the connection when wallet software gets upgraded to
>             support
>             them.
> 
>             --
>             'peter'[:-1]@petertodd.org <http://petertodd.org>
>             0000000000000001b0e0ae7ef97681ad77188030b6c791aef304947e6f524740
> 
>             ------------------------------------------------------------------------------
>             CenturyLink Cloud: The Leader in Enterprise Cloud Services.
>             Learn Why More Businesses Are Choosing CenturyLink Cloud For
>             Critical Workloads, Development Environments & Everything In
>             Between.
>             Get a Quote or Start a Free Trial Today.
>             http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk
>             _______________________________________________
>             Bitcoin-development mailing list
>             Bitcoin-development at lists.sourceforge.net
>             <mailto:Bitcoin-development at lists.sourceforge.net>
>             https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 
> 
> 
>         ------------------------------------------------------------------------------
>         CenturyLink Cloud: The Leader in Enterprise Cloud Services.
>         Learn Why More Businesses Are Choosing CenturyLink Cloud For
>         Critical Workloads, Development Environments & Everything In
>         Between.
>         Get a Quote or Start a Free Trial Today.
>         http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk
>         _______________________________________________
>         Bitcoin-development mailing list
>         Bitcoin-development at lists.sourceforge.net
>         <mailto:Bitcoin-development at lists.sourceforge.net>
>         https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 
> 
> 
> 
> ------------------------------------------------------------------------------
> CenturyLink Cloud: The Leader in Enterprise Cloud Services.
> Learn Why More Businesses Are Choosing CenturyLink Cloud For
> Critical Workloads, Development Environments & Everything In Between.
> Get a Quote or Start a Free Trial Today. 
> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk
> 
> 
> 
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 
-----BEGIN PGP SIGNATURE-----
Version: GnuPG/MacGPG2 v2.0.22 (Darwin)
Comment: GPGTools - https://gpgtools.org
Comment: Using GnuPG with Thunderbird - http://www.enigmail.net/

iF4EAREKAAYFAlLZj5cACgkQBJ8cMDO159YxKQEAh8QHHgMaL1IVvfYROU0yKG89
Ap1byTpAvt/+O5chTGQBAK4K+DfUOOkaMvUmssWIVsLQ56xKxsuzZiIJXF2yPI0g
=fcYD
-----END PGP SIGNATURE-----



From jgarzik at bitpay.com  Fri Jan 17 20:53:47 2014
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Fri, 17 Jan 2014 15:53:47 -0500
Subject: [Bitcoin-development] Bitcoin Core 0.9rc1 release schedule
In-Reply-To: <201401171841.37790.luke@dashjr.org>
References: <CA+s+GJBo7iUEJTfJw2e6qcDmdHNGdDN442Svs5ikVyUL1Jm0Wg@mail.gmail.com>
	<201401161523.38623.luke@dashjr.org>
	<CA+s+GJDeV9-djdEsA_stznNK9zzBA_0xQFV_m6tVygJicuLWuQ@mail.gmail.com>
	<201401171841.37790.luke@dashjr.org>
Message-ID: <CAJHLa0MVY6f02hK1CofM7bjLM=V1V0XKCWvHjBz=ozQdvA+xYA@mail.gmail.com>

<vendor hat: on>  BitPay sure would like to see CPFP in upstream.

I think the main hurdle to merging was that various people disagreed
on various edge case handling and implementation details, but no
fundamental objections.


On Fri, Jan 17, 2014 at 1:41 PM, Luke-Jr <luke at dashjr.org> wrote:
> On Friday, January 17, 2014 11:44:09 AM Wladimir wrote:
>> On Thu, Jan 16, 2014 at 4:23 PM, Luke-Jr <luke at dashjr.org> wrote:
>> > https://github.com/bitcoin/bitcoin/pulls/luke-jr
>> >
>> > These are pretty much all well-tested and stable for months now.
>>
>> #3242: Autoconf improvements needs rebase, and comment from jgarzik and me
>> taken into account (about -enable-frontends=).
>
> I'll try to get this done over the weekend.
>
>> The others appear to be more controversial as they affect mining/consensus.
>> I'd really like to see ACKs from more reviewers and testers there before
>> merging.
>
> Can you elaborate on this? I can see how Proposals might, if buggy, affect
> consensus, but the rest shouldn't. I don't think there's anything
> controversial in any of these (does someone disagree with CPFP?).
>
> Luke
>
> ------------------------------------------------------------------------------
> CenturyLink Cloud: The Leader in Enterprise Cloud Services.
> Learn Why More Businesses Are Choosing CenturyLink Cloud For
> Critical Workloads, Development Environments & Everything In Between.
> Get a Quote or Start a Free Trial Today.
> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development



-- 
Jeff Garzik
Bitcoin core developer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From mark at monetize.io  Fri Jan 17 21:04:16 2014
From: mark at monetize.io (Mark Friedenbach)
Date: Fri, 17 Jan 2014 13:04:16 -0800
Subject: [Bitcoin-development] Bitcoin Core 0.9rc1 release schedule
In-Reply-To: <CAJHLa0MVY6f02hK1CofM7bjLM=V1V0XKCWvHjBz=ozQdvA+xYA@mail.gmail.com>
References: <CA+s+GJBo7iUEJTfJw2e6qcDmdHNGdDN442Svs5ikVyUL1Jm0Wg@mail.gmail.com>	<201401161523.38623.luke@dashjr.org>	<CA+s+GJDeV9-djdEsA_stznNK9zzBA_0xQFV_m6tVygJicuLWuQ@mail.gmail.com>	<201401171841.37790.luke@dashjr.org>
	<CAJHLa0MVY6f02hK1CofM7bjLM=V1V0XKCWvHjBz=ozQdvA+xYA@mail.gmail.com>
Message-ID: <52D99AD0.60707@monetize.io>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

CPFP is *extremely* important. People have lost money because this
feature is missing. I think it's critical that it makes it into 0.9

If I get a low-priority donation from a blockchain.info wallet, that
money can disappear if it doesn't make it into a block in 24 hours -
bc.i will forget the transaction and happily respend its inputs on the
next transaction that user makes.

I wouldn't mind paying $1 in fees to receive a $50 donation. But
without CPFP there's no way to do that.


On 01/17/2014 12:53 PM, Jeff Garzik wrote:
> <vendor hat: on>  BitPay sure would like to see CPFP in upstream.
> 
> I think the main hurdle to merging was that various people
> disagreed on various edge case handling and implementation details,
> but no fundamental objections.
> 
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.14 (GNU/Linux)
Comment: GPGTools - http://gpgtools.org
Comment: Using GnuPG with Thunderbird - http://www.enigmail.net/

iQIcBAEBAgAGBQJS2ZrQAAoJEAdzVfsmodw4CrwP+gM2iXLcvQK2VlhoN7kRCnvH
+YJ87fXlMl0IcRqVDyaCF6w3+U/9VG+p+/eFvBNzxMMTbylWbsSXF6GxavwPhVt4
zw//VNLIfOu+88HsUofamvZJGHQOArwzlOYRgX1Lr9ms3KSQ2QWkW+Z6QD7qmkO2
bJNzxJ+vffmz24mQ6hg7a33YW+403TbeqxcPewbjNr76hvPEjzlTPhpVo4A/gqSu
6rcJPQIkFdTZX/xy5hyZsQzswNv/bYyrE9XhEIimsqt96sjTDrB4EZKzfkQ/jLeP
fudEcGEvRzJL9BSsa6mfUBzct2ilpii33q1vIIVYfIQIJmYl7U6YubloT235l2C7
0v0RWn5Kux2R9B4YFKjR09Jc2273mrnGuUj7hKD0LPHfn/Jzxy1Ce4AIcaodlgwP
u7vpvWiVEUcJkl3rn3enAyKCtD7zqe4k73ALq4yWjnDZRFEQ9DJEdEPEy+H8HlXY
RFOtFxAr/Vdyp9STAgjve46M4g/Qc5C10qIueTyJO1h8XDPfV8HnZJNVJP3wtj0K
pC5vq7ADxkQ60F9w+vNEdo85AVWhITQ/Kq7dbSq5J1LxddivzRurnp2uX+U2LEkV
9Hd2HuIM7E4uR0JZKRqPsFCJrpBuI4YPGHQB5pbq9eYAG4BdmTwTXUvd2FacI3mL
beN/c4m26MKQJTiMQyTl
=u7Qb
-----END PGP SIGNATURE-----



From luke at dashjr.org  Fri Jan 17 21:31:15 2014
From: luke at dashjr.org (Luke-Jr)
Date: Fri, 17 Jan 2014 21:31:15 +0000
Subject: [Bitcoin-development] Bitcoin Core 0.9rc1 release schedule
In-Reply-To: <CAJHLa0MVY6f02hK1CofM7bjLM=V1V0XKCWvHjBz=ozQdvA+xYA@mail.gmail.com>
References: <CA+s+GJBo7iUEJTfJw2e6qcDmdHNGdDN442Svs5ikVyUL1Jm0Wg@mail.gmail.com>
	<201401171841.37790.luke@dashjr.org>
	<CAJHLa0MVY6f02hK1CofM7bjLM=V1V0XKCWvHjBz=ozQdvA+xYA@mail.gmail.com>
Message-ID: <201401172131.16598.luke@dashjr.org>

On Friday, January 17, 2014 8:53:47 PM Jeff Garzik wrote:
> <vendor hat: on>  BitPay sure would like to see CPFP in upstream.
> 
> I think the main hurdle to merging was that various people disagreed
> on various edge case handling and implementation details, but no
> fundamental objections.

Heck, even I disagree with implementation details, but it's still better than 
nothing. We can always merge major reorganisations/reimplementations later 
when they're written: merging this one doesn't mean we're stuck with it 
forever...

Luke



From etotheipi at gmail.com  Sat Jan 18 04:55:25 2014
From: etotheipi at gmail.com (Alan Reiner)
Date: Fri, 17 Jan 2014 23:55:25 -0500
Subject: [Bitcoin-development] Stealth Addresses
In-Reply-To: <CALimQCU10asn65q=+VwCVNtgbROu9XQOYKzB7jy-TCFoemjEOQ@mail.gmail.com>
References: <CANEZrP1KAVhi_-cxCYe0rR9LUSYJ8MyW8=6eSJZ65FeY5ZJNuQ@mail.gmail.com>	<20140114225321.GT38964@giles.gnomon.org.uk>	<CANAnSg0tH_bK_19rsRRHOeZgrGYeWMhW89fXPyS4DQGmS4r_7A@mail.gmail.com>	<CALimQCXgc0eXeOcqFGUaCpSF7gKEe87KzvLqHZwUysV3WyjjGw@mail.gmail.com>	<CAAS2fgShChAQryfUOBp60jB-zxn2tH986fu1HfT+LsNdBYnoYg@mail.gmail.com>	<CAJHLa0P5r2+kxy7w8G=h=TAhdk1jUoW5UOiv-euo47uQY0u9ZA@mail.gmail.com>	<op.w9q6jdsayldrnw@laptop-air.hsd1.ca.comcast.net>	<20140116212805.GA4421@petertodd.org>	<CANAnSg2TY7Zh7RnHkBeTz1s-WutGLayum8q5DhdLhtOBMDT9ng@mail.gmail.com>	<CANEZrP1=PMiJn9BoN50K1wz2tOdxx5L80ngjErCJqj5wm2ESPA@mail.gmail.com>	<20140117144601.GA8614@petertodd.org>
	<CALimQCU10asn65q=+VwCVNtgbROu9XQOYKzB7jy-TCFoemjEOQ@mail.gmail.com>
Message-ID: <52DA093D.4070505@gmail.com>

*Avoiding ECDH calcs on every blockchain transaction (and avoiding the
prefix thing):*

Can we skip the whole ECDSA/ECDH thing, and use the second key pair for
encryption instead?  Then we don't need any ephemeral keys.  We use the
much simpler scheme like I mentioned before (just root keys and
multpliers), but instead of requesting a multiplier from the person
receiving the money, the payer can create their own multiplier and
encrypt it into an OP_RETURN msg (using the secondary public key of the
receiver).  When they do this, they append a deterministic identifier to
it, so that the receiver can immediately identify it upon decryption.

Basically, the receiver simply attempts decryption of every OP_RETURN
message, and if the identifier is there, they immediately know that the
tx is theirs, and that the other bytes of the decrypted message is the
multiplier used.

Of course, using something like ECIES and forcing the receiver to
attempt decryption of every OP_RETURN tx may not be any faster than the
ECDH we've already talked about here.  But with this, we are not tied to
any particular crypto.  Isn't there a much faster asymmetric scheme that
we can use?  I've heard people talk about ed25519, though I'm not sure
it can be used for encryption.  I'd bet money there is an asymmetric
_/encryption/_//algorithm that would be fast enough to not burden the
receiver.

Here's how I envision it:

--Alice gives out her business card that has public key X (BIP32 root),
and public key Y (fastCrypto)
--Bob generates a random 32-byte nonce, and EC-multiplies Alice's public
key by it.   He prepares a transaction sending coins to that address (Z)
--Bob also computes a deterministic identifier, perhaps hash(pubKeyX ||
addrZ)[8:].  Bob appends the those 8 bytes to the multiplier, and
encrypts all of it with Alice's fastCrypto key, Y.   He puts that
message in the OP_RETURN output.
--Alice's wallet will attempt decryption of every OP_RETURN message. 
First she computes hash(pubKeyX, addrZ)[8:], and then decrypts the
message with the fastCrypto private key.  If the tx is actually hers,
the last 8 bytes will match the identifier, and she knows to use the
other 32 bytes as a multiplier.  If it doesn't, it's irrelevant to her
and she moves on.

[**Should probably use 24-byte values for the multipliers (or hashes of
24-byte values), so that adding 8 bytes makes the whole message an even
32 bytes which is better for encryption]

Doesn't this have the exact same properties as the original proposal
(including compatibility with CoinJoin)?  But it all depends on having
fast asymmetric encryption.

-Alan



-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140117/ef9e2937/attachment.html>

From gmaxwell at gmail.com  Sat Jan 18 05:09:42 2014
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Fri, 17 Jan 2014 21:09:42 -0800
Subject: [Bitcoin-development] Stealth Addresses
In-Reply-To: <52DA093D.4070505@gmail.com>
References: <CANEZrP1KAVhi_-cxCYe0rR9LUSYJ8MyW8=6eSJZ65FeY5ZJNuQ@mail.gmail.com>
	<20140114225321.GT38964@giles.gnomon.org.uk>
	<CANAnSg0tH_bK_19rsRRHOeZgrGYeWMhW89fXPyS4DQGmS4r_7A@mail.gmail.com>
	<CALimQCXgc0eXeOcqFGUaCpSF7gKEe87KzvLqHZwUysV3WyjjGw@mail.gmail.com>
	<CAAS2fgShChAQryfUOBp60jB-zxn2tH986fu1HfT+LsNdBYnoYg@mail.gmail.com>
	<CAJHLa0P5r2+kxy7w8G=h=TAhdk1jUoW5UOiv-euo47uQY0u9ZA@mail.gmail.com>
	<op.w9q6jdsayldrnw@laptop-air.hsd1.ca.comcast.net>
	<20140116212805.GA4421@petertodd.org>
	<CANAnSg2TY7Zh7RnHkBeTz1s-WutGLayum8q5DhdLhtOBMDT9ng@mail.gmail.com>
	<CANEZrP1=PMiJn9BoN50K1wz2tOdxx5L80ngjErCJqj5wm2ESPA@mail.gmail.com>
	<20140117144601.GA8614@petertodd.org>
	<CALimQCU10asn65q=+VwCVNtgbROu9XQOYKzB7jy-TCFoemjEOQ@mail.gmail.com>
	<52DA093D.4070505@gmail.com>
Message-ID: <CAAS2fgSdLXfKgbC+MtsiXdp9o7BNp1pc1p_G511LrgwOzGNZFg@mail.gmail.com>

On Fri, Jan 17, 2014 at 8:55 PM, Alan Reiner <etotheipi at gmail.com> wrote:
> Isn't there a much faster asymmetric scheme that we can use?  I've heard people talk about ed25519, though I'm not sure it can be used for encryption.

Doing ECDH with our curve is within a factor of ~2 of the fastest
encryption available at this security level, AFAIK.  And separate
encryption would ~double the amount of data vs using the ephemeral key
for derivation.

Using another cryptosystem would mandate carry around additional code
for a fast implementation of that cryptosystem, which wouldn't be
fantastic.

So I'm not sure much can be improved there.



From odinn.cyberguerrilla at riseup.net  Sat Jan 18 08:11:02 2014
From: odinn.cyberguerrilla at riseup.net (Odinn Cyberguerrilla)
Date: Sat, 18 Jan 2014 00:11:02 -0800
Subject: [Bitcoin-development] Bitcoin Core 0.9rc1 release schedule
In-Reply-To: <CAJHLa0MVY6f02hK1CofM7bjLM=V1V0XKCWvHjBz=ozQdvA+xYA@mail.gmail.com>
References: <CA+s+GJBo7iUEJTfJw2e6qcDmdHNGdDN442Svs5ikVyUL1Jm0Wg@mail.gmail.com>
	<201401161523.38623.luke@dashjr.org>
	<CA+s+GJDeV9-djdEsA_stznNK9zzBA_0xQFV_m6tVygJicuLWuQ@mail.gmail.com>
	<201401171841.37790.luke@dashjr.org>
	<CAJHLa0MVY6f02hK1CofM7bjLM=V1V0XKCWvHjBz=ozQdvA+xYA@mail.gmail.com>
Message-ID: <61c05e986b4d1010d0cf76868db7d2af.squirrel@fruiteater.riseup.net>

<ABISprotocol hat: on>

regarding:
stuff not getting into blockchain in a day's time,
microdonations not facilitated as much as they could be,

that would be:

very bad
much news
such fail

Seriously, that would not be so good.

Hope I made you laugh a bit



> <vendor hat: on>  BitPay sure would like to see CPFP in upstream.
>
> I think the main hurdle to merging was that various people disagreed
> on various edge case handling and implementation details, but no
> fundamental objections.
>
>
> On Fri, Jan 17, 2014 at 1:41 PM, Luke-Jr <luke at dashjr.org> wrote:
>> On Friday, January 17, 2014 11:44:09 AM Wladimir wrote:
>>> On Thu, Jan 16, 2014 at 4:23 PM, Luke-Jr <luke at dashjr.org> wrote:
>>> > https://github.com/bitcoin/bitcoin/pulls/luke-jr
>>> >
>>> > These are pretty much all well-tested and stable for months now.
>>>
>>> #3242: Autoconf improvements needs rebase, and comment from jgarzik and
>>> me
>>> taken into account (about -enable-frontends=).
>>
>> I'll try to get this done over the weekend.
>>
>>> The others appear to be more controversial as they affect
>>> mining/consensus.
>>> I'd really like to see ACKs from more reviewers and testers there
>>> before
>>> merging.
>>
>> Can you elaborate on this? I can see how Proposals might, if buggy,
>> affect
>> consensus, but the rest shouldn't. I don't think there's anything
>> controversial in any of these (does someone disagree with CPFP?).
>>
>> Luke
>>
>> ------------------------------------------------------------------------------
>> CenturyLink Cloud: The Leader in Enterprise Cloud Services.
>> Learn Why More Businesses Are Choosing CenturyLink Cloud For
>> Critical Workloads, Development Environments & Everything In Between.
>> Get a Quote or Start a Free Trial Today.
>> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
>
> --
> Jeff Garzik
> Bitcoin core developer and open source evangelist
> BitPay, Inc.      https://bitpay.com/
>
> ------------------------------------------------------------------------------
> CenturyLink Cloud: The Leader in Enterprise Cloud Services.
> Learn Why More Businesses Are Choosing CenturyLink Cloud For
> Critical Workloads, Development Environments & Everything In Between.
> Get a Quote or Start a Free Trial Today.
> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>





From laanwj at gmail.com  Sat Jan 18 11:05:30 2014
From: laanwj at gmail.com (Wladimir)
Date: Sat, 18 Jan 2014 12:05:30 +0100
Subject: [Bitcoin-development] Bitcoin Core 0.9rc1 release schedule
In-Reply-To: <61c05e986b4d1010d0cf76868db7d2af.squirrel@fruiteater.riseup.net>
References: <CA+s+GJBo7iUEJTfJw2e6qcDmdHNGdDN442Svs5ikVyUL1Jm0Wg@mail.gmail.com>
	<201401161523.38623.luke@dashjr.org>
	<CA+s+GJDeV9-djdEsA_stznNK9zzBA_0xQFV_m6tVygJicuLWuQ@mail.gmail.com>
	<201401171841.37790.luke@dashjr.org>
	<CAJHLa0MVY6f02hK1CofM7bjLM=V1V0XKCWvHjBz=ozQdvA+xYA@mail.gmail.com>
	<61c05e986b4d1010d0cf76868db7d2af.squirrel@fruiteater.riseup.net>
Message-ID: <CA+s+GJCwB3Jj7z32_5NCHgf7utyx0nm-fXiSW+79w8u4mi7W5g@mail.gmail.com>

On Sat, Jan 18, 2014 at 9:11 AM, Odinn Cyberguerrilla <
odinn.cyberguerrilla at riseup.net> wrote:

> <ABISprotocol hat: on>
>
> regarding:
> stuff not getting into blockchain in a day's time,
> microdonations not facilitated as much as they could be,
>

Please point to your pull requests improving these issues.

If your organization didn't contribute anything to further these issues
then there can't be much surprise that they didn't make it in, either.

that would be:
>
> very bad
> much news
> such fail
>
> Seriously, that would not be so good.
>
> Hope I made you laugh a bit
>

So it's more like a jester's hat then :)
How did I end up on the dogecoin-development list?!?

Wladimir
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140118/aa5226db/attachment.html>

From odinn.cyberguerrilla at riseup.net  Sat Jan 18 11:28:25 2014
From: odinn.cyberguerrilla at riseup.net (Odinn Cyberguerrilla)
Date: Sat, 18 Jan 2014 03:28:25 -0800
Subject: [Bitcoin-development] Bitcoin Core 0.9rc1 release schedule
In-Reply-To: <CA+s+GJCwB3Jj7z32_5NCHgf7utyx0nm-fXiSW+79w8u4mi7W5g@mail.gmail.com>
References: <CA+s+GJBo7iUEJTfJw2e6qcDmdHNGdDN442Svs5ikVyUL1Jm0Wg@mail.gmail.com>
	<201401161523.38623.luke@dashjr.org>
	<CA+s+GJDeV9-djdEsA_stznNK9zzBA_0xQFV_m6tVygJicuLWuQ@mail.gmail.com>
	<201401171841.37790.luke@dashjr.org>
	<CAJHLa0MVY6f02hK1CofM7bjLM=V1V0XKCWvHjBz=ozQdvA+xYA@mail.gmail.com>
	<61c05e986b4d1010d0cf76868db7d2af.squirrel@fruiteater.riseup.net>
	<CA+s+GJCwB3Jj7z32_5NCHgf7utyx0nm-fXiSW+79w8u4mi7W5g@mail.gmail.com>
Message-ID: <3b021028bac31ee9d775e803c54043f7.squirrel@fruiteater.riseup.net>

clarification, I am not a doge dev.  It was intended just as a joke, to
make you laugh.

regarding pull requests improving these issues I am under the impression
that the developers will take care of what needs to be taken care of in
that regard.  Am presently in collaboration on a bitcoin project that may
implement aspects of the ABIS concept as presented, but it is in very very
early stage(es).

I hope you had a good laugh, that was my intent. good morning / afternoon
/ evening

> On Sat, Jan 18, 2014 at 9:11 AM, Odinn Cyberguerrilla <
> odinn.cyberguerrilla at riseup.net> wrote:
>
>> <ABISprotocol hat: on>
>>
>> regarding:
>> stuff not getting into blockchain in a day's time,
>> microdonations not facilitated as much as they could be,
>>
>
> Please point to your pull requests improving these issues.
>
> If your organization didn't contribute anything to further these issues
> then there can't be much surprise that they didn't make it in, either.
>
> that would be:
>>
>> very bad
>> much news
>> such fail
>>
>> Seriously, that would not be so good.
>>
>> Hope I made you laugh a bit
>>
>
> So it's more like a jester's hat then :)
> How did I end up on the dogecoin-development list?!?
>
> Wladimir
>





From jouke at bitonic.nl  Sat Jan 18 11:34:41 2014
From: jouke at bitonic.nl (Jouke Hofman)
Date: Sat, 18 Jan 2014 12:34:41 +0100
Subject: [Bitcoin-development] Bitcoin Core 0.9rc1 release schedule
In-Reply-To: <52D99AD0.60707@monetize.io>
References: <CA+s+GJBo7iUEJTfJw2e6qcDmdHNGdDN442Svs5ikVyUL1Jm0Wg@mail.gmail.com>	<201401161523.38623.luke@dashjr.org>	<CA+s+GJDeV9-djdEsA_stznNK9zzBA_0xQFV_m6tVygJicuLWuQ@mail.gmail.com>	<201401171841.37790.luke@dashjr.org>
	<CAJHLa0MVY6f02hK1CofM7bjLM=V1V0XKCWvHjBz=ozQdvA+xYA@mail.gmail.com>
	<52D99AD0.60707@monetize.io>
Message-ID: <52DA66D1.1040409@bitonic.nl>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

We rebroadcast incoming transactions without fees at several nodes,
including bc.info, to keep them in mempools.

On 01/17/2014 10:04 PM, Mark Friedenbach wrote:
> CPFP is *extremely* important. People have lost money because this 
> feature is missing. I think it's critical that it makes it into
> 0.9
> 
> If I get a low-priority donation from a blockchain.info wallet,
> that money can disappear if it doesn't make it into a block in 24
> hours - bc.i will forget the transaction and happily respend its
> inputs on the next transaction that user makes.
> 
> I wouldn't mind paying $1 in fees to receive a $50 donation. But 
> without CPFP there's no way to do that.
> 
> 
> On 01/17/2014 12:53 PM, Jeff Garzik wrote:
>> <vendor hat: on>  BitPay sure would like to see CPFP in
>> upstream.
> 
>> I think the main hurdle to merging was that various people 
>> disagreed on various edge case handling and implementation
>> details, but no fundamental objections.
> 
> 
> ------------------------------------------------------------------------------
>
> 
CenturyLink Cloud: The Leader in Enterprise Cloud Services.
> Learn Why More Businesses Are Choosing CenturyLink Cloud For 
> Critical Workloads, Development Environments & Everything In
> Between. Get a Quote or Start a Free Trial Today. 
> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk
>
> 
_______________________________________________
> Bitcoin-development mailing list 
> Bitcoin-development at lists.sourceforge.net 
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.12 (GNU/Linux)
Comment: Using GnuPG with undefined - http://www.enigmail.net/

iQEcBAEBAgAGBQJS2mbQAAoJEIilnEpWGBYhH+8H/2nIZjrrZIPi/4ZeTi71cZOe
78oD4mzWM9zvRbjbGfIWrgTnkRQi4OQ/GorbRiyoAeKzAQ+SdeY8dkRsS14zpqpC
w4efoJOTxgi69giBWGPWlPvAtTwD65EcfJmUs5XeGi7J/3E0qTyry6sDu8t2ip84
hLUnqMOcNhc0J/k0KvBbEyl1YXcRWMjz5X2pMtY9yeMk+qFQPR1+RjZ+91OCRyui
Z47jhHlbhc5daXAWrq4fb54uNSJWUnYky7yN2pDTovAVq5PNNVNJTdxbjXSyYmcP
FwFNkARrgXRlSvf07FN991aa2u4CTkjRgA9uRrvcTtLXr8g2F0yymfPr0AQrgZg=
=J9Z4
-----END PGP SIGNATURE-----



From mark at monetize.io  Sat Jan 18 17:38:21 2014
From: mark at monetize.io (Mark Friedenbach)
Date: Sat, 18 Jan 2014 09:38:21 -0800
Subject: [Bitcoin-development] Bitcoin Core 0.9rc1 release schedule
In-Reply-To: <CA+s+GJCwB3Jj7z32_5NCHgf7utyx0nm-fXiSW+79w8u4mi7W5g@mail.gmail.com>
References: <CA+s+GJBo7iUEJTfJw2e6qcDmdHNGdDN442Svs5ikVyUL1Jm0Wg@mail.gmail.com>	<201401161523.38623.luke@dashjr.org>	<CA+s+GJDeV9-djdEsA_stznNK9zzBA_0xQFV_m6tVygJicuLWuQ@mail.gmail.com>	<201401171841.37790.luke@dashjr.org>	<CAJHLa0MVY6f02hK1CofM7bjLM=V1V0XKCWvHjBz=ozQdvA+xYA@mail.gmail.com>	<61c05e986b4d1010d0cf76868db7d2af.squirrel@fruiteater.riseup.net>
	<CA+s+GJCwB3Jj7z32_5NCHgf7utyx0nm-fXiSW+79w8u4mi7W5g@mail.gmail.com>
Message-ID: <52DABC0D.8060900@monetize.io>

On 01/18/2014 03:05 AM, Wladimir wrote:
> On Sat, Jan 18, 2014 at 9:11 AM, Odinn Cyberguerrilla
> 
>     <ABISprotocol hat: on>
> 
>     regarding:
>     stuff not getting into blockchain in a day's time,
>     microdonations not facilitated as much as they could be,
> 
> Please point to your pull requests improving these issues.
> 
> If your organization didn't contribute anything to further these issues
> then there can't be much surprise that they didn't make it in, either.

https://github.com/bitcoin/bitcoin/pull/1647



From hozer at hozed.org  Sat Jan 18 17:44:52 2014
From: hozer at hozed.org (Troy Benjegerdes)
Date: Sat, 18 Jan 2014 11:44:52 -0600
Subject: [Bitcoin-development] unlinakble static address? & spv-privacy
 (Re: Stealth Addresses)
In-Reply-To: <CAAS2fgTRKgkO15VUvVgttP-iEBNF4=G+++Xo-XsaRBmOxyXXKA@mail.gmail.com>
References: <20140113133746.GI38964@giles.gnomon.org.uk>
	<CANEZrP1KAVhi_-cxCYe0rR9LUSYJ8MyW8=6eSJZ65FeY5ZJNuQ@mail.gmail.com>
	<20140114225321.GT38964@giles.gnomon.org.uk>
	<CANAnSg0tH_bK_19rsRRHOeZgrGYeWMhW89fXPyS4DQGmS4r_7A@mail.gmail.com>
	<CALimQCXgc0eXeOcqFGUaCpSF7gKEe87KzvLqHZwUysV3WyjjGw@mail.gmail.com>
	<CAAS2fgShChAQryfUOBp60jB-zxn2tH986fu1HfT+LsNdBYnoYg@mail.gmail.com>
	<CAJHLa0P5r2+kxy7w8G=h=TAhdk1jUoW5UOiv-euo47uQY0u9ZA@mail.gmail.com>
	<20140115230901.GA25135@netbook.cypherspace.org>
	<op.w9q85wkhyldrnw@laptop-air.hsd1.ca.comcast.net>
	<CAAS2fgTRKgkO15VUvVgttP-iEBNF4=G+++Xo-XsaRBmOxyXXKA@mail.gmail.com>
Message-ID: <20140118174452.GG3180@nl.grid.coop>

On Wed, Jan 15, 2014 at 05:32:31PM -0800, Gregory Maxwell wrote:
> On Wed, Jan 15, 2014 at 5:02 PM, Jeremy Spilman <jeremy at taplink.co> wrote:
> > Choosing how many bits to put in the prefix may be difficult, particularly
> > if transaction load changes dramatically over time. 0 or 1 bits may be
> > just fine for a single user running their own node, whereas a central
> > service might want 4 or 5 bits to keep their computation costs scalable.
> 
> Ignoring prefixes the cost for each reusable address is only a small
> percentage of the full node cost (rational: each transaction has one
> or more ECDSA signatures, and the derivation is no more expensive), so
> I would only expect computation to be an issue for large centralized
> services. (non-full nodes suffer more from just the bandwidth impact).

I have not seen anyone address my high-level question to (somewhat) complicated
mechanisms to keep coin flows private.

Who pays for it? From what I see it's going to double the amount of data 
needed per address, further centralizing 'full' nodes. I'm fine if the NSA
is paying for privacy (I actually trust them more than banks and advertisers),
but let's just be honest, okay?

If socializing the cost of privacy is Bitcoin's goal, and giving the benefits
to a few that understand it and/or have the resources to determine privacy
providers that won't scam them, then say so, so I can get on with launching
a 'transparencycoin' with a modified code that explicitly ALWAYS re-uses
addresses, and has miners and pools that charge more for addresses they have
never seen before. I bet it will be more distributed and have about half the
average transaction cost of Bitcoin, because most people *just don't care*
about privacy if they get cheap and/or free services.


-- Troy, transparency advocate who is quite transparent that if you buy me
farmland, I'll shut up about transparency, because I'll be too busy growing
food and giving part of it away.



From christophe.biocca at gmail.com  Sat Jan 18 20:25:36 2014
From: christophe.biocca at gmail.com (Christophe Biocca)
Date: Sat, 18 Jan 2014 15:25:36 -0500
Subject: [Bitcoin-development] unlinakble static address? & spv-privacy
 (Re: Stealth Addresses)
In-Reply-To: <20140118174452.GG3180@nl.grid.coop>
References: <20140113133746.GI38964@giles.gnomon.org.uk>
	<CANEZrP1KAVhi_-cxCYe0rR9LUSYJ8MyW8=6eSJZ65FeY5ZJNuQ@mail.gmail.com>
	<20140114225321.GT38964@giles.gnomon.org.uk>
	<CANAnSg0tH_bK_19rsRRHOeZgrGYeWMhW89fXPyS4DQGmS4r_7A@mail.gmail.com>
	<CALimQCXgc0eXeOcqFGUaCpSF7gKEe87KzvLqHZwUysV3WyjjGw@mail.gmail.com>
	<CAAS2fgShChAQryfUOBp60jB-zxn2tH986fu1HfT+LsNdBYnoYg@mail.gmail.com>
	<CAJHLa0P5r2+kxy7w8G=h=TAhdk1jUoW5UOiv-euo47uQY0u9ZA@mail.gmail.com>
	<20140115230901.GA25135@netbook.cypherspace.org>
	<op.w9q85wkhyldrnw@laptop-air.hsd1.ca.comcast.net>
	<CAAS2fgTRKgkO15VUvVgttP-iEBNF4=G+++Xo-XsaRBmOxyXXKA@mail.gmail.com>
	<20140118174452.GG3180@nl.grid.coop>
Message-ID: <CANOOu=9t7UxBQWHXS4hVziWqaaDx-D6POK23RNhL5CM8m_JQqg@mail.gmail.com>

Like any other mechanism that puts extra data in the blockchain, the
sender pays the fees.

This mechanism is to improve privacy for static addresses (donation
links on websites and so on). I personally don't think it will be used
nearly as much as BIP0032 or the payment protocol (both of which don't
need on-blockchain data), precisely because it increases the fees
required to send funds, but this doesn't externalize costs anymore
than any other use of the blockchain does.

People who don't care about privacy and want smallest cost and maximum
convenience already use SPV nodes. Their resource usage will not be
affected in the least.

On Sat, Jan 18, 2014 at 12:44 PM, Troy Benjegerdes <hozer at hozed.org> wrote:
> On Wed, Jan 15, 2014 at 05:32:31PM -0800, Gregory Maxwell wrote:
>> On Wed, Jan 15, 2014 at 5:02 PM, Jeremy Spilman <jeremy at taplink.co> wrote:
>> > Choosing how many bits to put in the prefix may be difficult, particularly
>> > if transaction load changes dramatically over time. 0 or 1 bits may be
>> > just fine for a single user running their own node, whereas a central
>> > service might want 4 or 5 bits to keep their computation costs scalable.
>>
>> Ignoring prefixes the cost for each reusable address is only a small
>> percentage of the full node cost (rational: each transaction has one
>> or more ECDSA signatures, and the derivation is no more expensive), so
>> I would only expect computation to be an issue for large centralized
>> services. (non-full nodes suffer more from just the bandwidth impact).
>
> I have not seen anyone address my high-level question to (somewhat) complicated
> mechanisms to keep coin flows private.
>
> Who pays for it? From what I see it's going to double the amount of data
> needed per address, further centralizing 'full' nodes. I'm fine if the NSA
> is paying for privacy (I actually trust them more than banks and advertisers),
> but let's just be honest, okay?
>
> If socializing the cost of privacy is Bitcoin's goal, and giving the benefits
> to a few that understand it and/or have the resources to determine privacy
> providers that won't scam them, then say so, so I can get on with launching
> a 'transparencycoin' with a modified code that explicitly ALWAYS re-uses
> addresses, and has miners and pools that charge more for addresses they have
> never seen before. I bet it will be more distributed and have about half the
> average transaction cost of Bitcoin, because most people *just don't care*
> about privacy if they get cheap and/or free services.
>
>
> -- Troy, transparency advocate who is quite transparent that if you buy me
> farmland, I'll shut up about transparency, because I'll be too busy growing
> food and giving part of it away.
>
> ------------------------------------------------------------------------------
> CenturyLink Cloud: The Leader in Enterprise Cloud Services.
> Learn Why More Businesses Are Choosing CenturyLink Cloud For
> Critical Workloads, Development Environments & Everything In Between.
> Get a Quote or Start a Free Trial Today.
> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development



From jeremy at taplink.co  Sat Jan 18 23:12:58 2014
From: jeremy at taplink.co (Jeremy Spilman)
Date: Sat, 18 Jan 2014 17:12:58 -0600
Subject: [Bitcoin-development] Stealth Addresses
In-Reply-To: <CAAS2fgSdLXfKgbC+MtsiXdp9o7BNp1pc1p_G511LrgwOzGNZFg@mail.gmail.com>
References: <CANEZrP1KAVhi_-cxCYe0rR9LUSYJ8MyW8=6eSJZ65FeY5ZJNuQ@mail.gmail.com>
	<20140114225321.GT38964@giles.gnomon.org.uk>
	<CANAnSg0tH_bK_19rsRRHOeZgrGYeWMhW89fXPyS4DQGmS4r_7A@mail.gmail.com>
	<CALimQCXgc0eXeOcqFGUaCpSF7gKEe87KzvLqHZwUysV3WyjjGw@mail.gmail.com>
	<CAAS2fgShChAQryfUOBp60jB-zxn2tH986fu1HfT+LsNdBYnoYg@mail.gmail.com>
	<CAJHLa0P5r2+kxy7w8G=h=TAhdk1jUoW5UOiv-euo47uQY0u9ZA@mail.gmail.com>
	<op.w9q6jdsayldrnw@laptop-air.hsd1.ca.comcast.net>
	<20140116212805.GA4421@petertodd.org>
	<CANAnSg2TY7Zh7RnHkBeTz1s-WutGLayum8q5DhdLhtOBMDT9ng@mail.gmail.com>
	<CANEZrP1=PMiJn9BoN50K1wz2tOdxx5L80ngjErCJqj5wm2ESPA@mail.gmail.com>
	<20140117144601.GA8614@petertodd.org>
	<CALimQCU10asn65q=+VwCVNtgbROu9XQOYKzB7jy-TCFoemjEOQ@mail.gmail.com>
	<52DA093D.4070505@gmail.com>
	<CAAS2fgSdLXfKgbC+MtsiXdp9o7BNp1pc1p_G511LrgwOzGNZFg@mail.gmail.com>
Message-ID: <52F8B4EC-F955-46E4-B871-3BEEFF69907D@taplink.co>



> On Fri, Jan 17, 2014 at 8:55 PM, Alan Reiner <etotheipi at gmail.com> wrote:
>> Isn't there a much faster asymmetric scheme that we can use?  I've heard people talk about ed25519, though I'm not sure it can be used for encryption.
> 
> Doing ECDH with our curve is within a factor of ~2 of the fastest
> encryption available at this security level, AFAIK.  And separate
> encryption would ~double the amount of data vs using the ephemeral key
> for derivation.
> 
> Using another cryptosystem would mandate carry around additional code
> for a fast implementation of that cryptosystem, which wouldn't be
> fantastic.
> 
> So I'm not sure much can be improved there.

In the case where payment is being sent only to Q1, and Q2 is for discovery only, perhaps we could use a 160-bit curve for d2/Q2 and e/P resulting in 20 byte vs 32 bytes in the OP_RETURN, and of course faster multiplication. 

80-bits of security I assume still greatly exceeds the actual level of privacy you get with the overall solution, and since Q2 is never protecting actual funds...

But if it's a "real weakening" of the privacy then definitely not worth it, and even the added complexity of another curve seems possibly not worth it...



From gmaxwell at gmail.com  Sat Jan 18 23:50:41 2014
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Sat, 18 Jan 2014 15:50:41 -0800
Subject: [Bitcoin-development] Stealth Addresses
In-Reply-To: <52F8B4EC-F955-46E4-B871-3BEEFF69907D@taplink.co>
References: <CANEZrP1KAVhi_-cxCYe0rR9LUSYJ8MyW8=6eSJZ65FeY5ZJNuQ@mail.gmail.com>
	<20140114225321.GT38964@giles.gnomon.org.uk>
	<CANAnSg0tH_bK_19rsRRHOeZgrGYeWMhW89fXPyS4DQGmS4r_7A@mail.gmail.com>
	<CALimQCXgc0eXeOcqFGUaCpSF7gKEe87KzvLqHZwUysV3WyjjGw@mail.gmail.com>
	<CAAS2fgShChAQryfUOBp60jB-zxn2tH986fu1HfT+LsNdBYnoYg@mail.gmail.com>
	<CAJHLa0P5r2+kxy7w8G=h=TAhdk1jUoW5UOiv-euo47uQY0u9ZA@mail.gmail.com>
	<op.w9q6jdsayldrnw@laptop-air.hsd1.ca.comcast.net>
	<20140116212805.GA4421@petertodd.org>
	<CANAnSg2TY7Zh7RnHkBeTz1s-WutGLayum8q5DhdLhtOBMDT9ng@mail.gmail.com>
	<CANEZrP1=PMiJn9BoN50K1wz2tOdxx5L80ngjErCJqj5wm2ESPA@mail.gmail.com>
	<20140117144601.GA8614@petertodd.org>
	<CALimQCU10asn65q=+VwCVNtgbROu9XQOYKzB7jy-TCFoemjEOQ@mail.gmail.com>
	<52DA093D.4070505@gmail.com>
	<CAAS2fgSdLXfKgbC+MtsiXdp9o7BNp1pc1p_G511LrgwOzGNZFg@mail.gmail.com>
	<52F8B4EC-F955-46E4-B871-3BEEFF69907D@taplink.co>
Message-ID: <CAAS2fgRJ_axd-iZzrgt5oiPDGzNt9heyUut7nFWChriOv29oDQ@mail.gmail.com>

On Sat, Jan 18, 2014 at 3:12 PM, Jeremy Spilman <jeremy at taplink.co> wrote:
> In the case where payment is being sent only to Q1, and Q2 is for discovery only, perhaps we could use a 160-bit curve for d2/Q2 and e/P resulting in 20 byte vs 32 bytes in the OP_RETURN, and of course faster multiplication.
>
> 80-bits of security I assume still greatly exceeds the actual level of privacy you get with the overall solution, and since Q2 is never protecting actual funds...
>
> But if it's a "real weakening" of the privacy then definitely not worth it, and even the added complexity of another curve seems possibly not worth it...

Well super-fast hand optimized code for (your choice of) 160 bit curve
may not ever exist, making it slower in practice. Plus the extra code
to carry around even if it does exist?



From jgarzik at bitpay.com  Sun Jan 19 02:53:09 2014
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Sat, 18 Jan 2014 21:53:09 -0500
Subject: [Bitcoin-development] Bitcoin Core 0.9rc1 release schedule
In-Reply-To: <52DABC0D.8060900@monetize.io>
References: <CA+s+GJBo7iUEJTfJw2e6qcDmdHNGdDN442Svs5ikVyUL1Jm0Wg@mail.gmail.com>
	<201401161523.38623.luke@dashjr.org>
	<CA+s+GJDeV9-djdEsA_stznNK9zzBA_0xQFV_m6tVygJicuLWuQ@mail.gmail.com>
	<201401171841.37790.luke@dashjr.org>
	<CAJHLa0MVY6f02hK1CofM7bjLM=V1V0XKCWvHjBz=ozQdvA+xYA@mail.gmail.com>
	<61c05e986b4d1010d0cf76868db7d2af.squirrel@fruiteater.riseup.net>
	<CA+s+GJCwB3Jj7z32_5NCHgf7utyx0nm-fXiSW+79w8u4mi7W5g@mail.gmail.com>
	<52DABC0D.8060900@monetize.io>
Message-ID: <CAJHLa0PAG=2+GOiLWYgWH81q+eAQ4w3LdDDemQ9J0K0AddUw_w@mail.gmail.com>

There's a reason why luke-jr's pull request for CPfP remains open.
There is general agreement that it appears to be useful.  CPfP works
to close the mismatch between how bitcoin transaction fees are
attached by the sender, versus modern economic situations where the
receiver is willing to pay a fee.


On Sat, Jan 18, 2014 at 12:38 PM, Mark Friedenbach <mark at monetize.io> wrote:
> On 01/18/2014 03:05 AM, Wladimir wrote:
>> On Sat, Jan 18, 2014 at 9:11 AM, Odinn Cyberguerrilla
>>
>>     <ABISprotocol hat: on>
>>
>>     regarding:
>>     stuff not getting into blockchain in a day's time,
>>     microdonations not facilitated as much as they could be,
>>
>> Please point to your pull requests improving these issues.
>>
>> If your organization didn't contribute anything to further these issues
>> then there can't be much surprise that they didn't make it in, either.
>
> https://github.com/bitcoin/bitcoin/pull/1647
>
> ------------------------------------------------------------------------------
> CenturyLink Cloud: The Leader in Enterprise Cloud Services.
> Learn Why More Businesses Are Choosing CenturyLink Cloud For
> Critical Workloads, Development Environments & Everything In Between.
> Get a Quote or Start a Free Trial Today.
> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development



-- 
Jeff Garzik
Bitcoin core developer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From laanwj at gmail.com  Sun Jan 19 10:24:08 2014
From: laanwj at gmail.com (Wladimir)
Date: Sun, 19 Jan 2014 11:24:08 +0100
Subject: [Bitcoin-development] Bitcoin Core 0.9rc1 release schedule
In-Reply-To: <CAJHLa0PAG=2+GOiLWYgWH81q+eAQ4w3LdDDemQ9J0K0AddUw_w@mail.gmail.com>
References: <CA+s+GJBo7iUEJTfJw2e6qcDmdHNGdDN442Svs5ikVyUL1Jm0Wg@mail.gmail.com>
	<201401161523.38623.luke@dashjr.org>
	<CA+s+GJDeV9-djdEsA_stznNK9zzBA_0xQFV_m6tVygJicuLWuQ@mail.gmail.com>
	<201401171841.37790.luke@dashjr.org>
	<CAJHLa0MVY6f02hK1CofM7bjLM=V1V0XKCWvHjBz=ozQdvA+xYA@mail.gmail.com>
	<61c05e986b4d1010d0cf76868db7d2af.squirrel@fruiteater.riseup.net>
	<CA+s+GJCwB3Jj7z32_5NCHgf7utyx0nm-fXiSW+79w8u4mi7W5g@mail.gmail.com>
	<52DABC0D.8060900@monetize.io>
	<CAJHLa0PAG=2+GOiLWYgWH81q+eAQ4w3LdDDemQ9J0K0AddUw_w@mail.gmail.com>
Message-ID: <CA+s+GJDFq0P+cgAVL9N1ADT7PFB4eMSPnoSR05wPOB5KRL-C+g@mail.gmail.com>

On Sun, Jan 19, 2014 at 3:53 AM, Jeff Garzik <jgarzik at bitpay.com> wrote:

> There's a reason why luke-jr's pull request for CPfP remains open.
>


> There is general agreement that it appears to be useful.  CPfP works
> to close the mismatch between how bitcoin transaction fees are
> attached by the sender, versus modern economic situations where the
> receiver is willing to pay a fee.
>

The only thing controversial are the code changes themselves, not the
feature.

Consensus running through the comments in the pull is that it needs
(auto)tests.

Are you going to do this Luke? Or is anyone else working on this?

Wladimir
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140119/a6d14b0f/attachment.html>

From pete at petertodd.org  Mon Jan 20 11:08:47 2014
From: pete at petertodd.org (Peter Todd)
Date: Mon, 20 Jan 2014 06:08:47 -0500
Subject: [Bitcoin-development] Stealth Addresses
In-Reply-To: <52F8B4EC-F955-46E4-B871-3BEEFF69907D@taplink.co>
References: <CAJHLa0P5r2+kxy7w8G=h=TAhdk1jUoW5UOiv-euo47uQY0u9ZA@mail.gmail.com>
	<op.w9q6jdsayldrnw@laptop-air.hsd1.ca.comcast.net>
	<20140116212805.GA4421@petertodd.org>
	<CANAnSg2TY7Zh7RnHkBeTz1s-WutGLayum8q5DhdLhtOBMDT9ng@mail.gmail.com>
	<CANEZrP1=PMiJn9BoN50K1wz2tOdxx5L80ngjErCJqj5wm2ESPA@mail.gmail.com>
	<20140117144601.GA8614@petertodd.org>
	<CALimQCU10asn65q=+VwCVNtgbROu9XQOYKzB7jy-TCFoemjEOQ@mail.gmail.com>
	<52DA093D.4070505@gmail.com>
	<CAAS2fgSdLXfKgbC+MtsiXdp9o7BNp1pc1p_G511LrgwOzGNZFg@mail.gmail.com>
	<52F8B4EC-F955-46E4-B871-3BEEFF69907D@taplink.co>
Message-ID: <20140120110847.GF3468@savin>

On Sat, Jan 18, 2014 at 05:12:58PM -0600, Jeremy Spilman wrote:
> 
> 
> > On Fri, Jan 17, 2014 at 8:55 PM, Alan Reiner <etotheipi at gmail.com> wrote:
> >> Isn't there a much faster asymmetric scheme that we can use?  I've heard people talk about ed25519, though I'm not sure it can be used for encryption.
> > 
> > Doing ECDH with our curve is within a factor of ~2 of the fastest
> > encryption available at this security level, AFAIK.  And separate
> > encryption would ~double the amount of data vs using the ephemeral key
> > for derivation.
> > 
> > Using another cryptosystem would mandate carry around additional code
> > for a fast implementation of that cryptosystem, which wouldn't be
> > fantastic.
> > 
> > So I'm not sure much can be improved there.
> 
> In the case where payment is being sent only to Q1, and Q2 is for discovery only, perhaps we could use a 160-bit curve for d2/Q2 and e/P resulting in 20 byte vs 32 bytes in the OP_RETURN, and of course faster multiplication. 
> 
> 80-bits of security I assume still greatly exceeds the actual level of privacy you get with the overall solution, and since Q2 is never protecting actual funds...
> 
> But if it's a "real weakening" of the privacy then definitely not worth it, and even the added complexity of another curve seems possibly not worth it...

Keep in mind that Bitmessage uses the same ECDH mechanism as what
stealth addresses will use. They seem to get decent enough performance
from it for a use-case not-unlike that of a Bitcoin wallet.

In any case I'm interested in knowing actual performance numbers for it;
last I talked to Kyle Drake he said he was working on getting ECDH
numbers on Javascript, probably the slowest possible implementation of
the idea. As for send to stealth addresses using prefixes, he's
confirmed that you'll be able to do that will well under a second to
brute-force the prefixes with the proposed OP_RETURN mechanism even with
rather long 8-bit prefixes.

-- 
'peter'[:-1]@petertodd.org
000000000000000190a2900f1a25c507a999fa11116f7bd0126618c1ebc4f5fb
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 685 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140120/69317ce0/attachment.sig>

From pete at petertodd.org  Mon Jan 20 11:11:44 2014
From: pete at petertodd.org (Peter Todd)
Date: Mon, 20 Jan 2014 06:11:44 -0500
Subject: [Bitcoin-development] unlinakble static address? & spv-privacy
 (Re: Stealth Addresses)
In-Reply-To: <20140118174452.GG3180@nl.grid.coop>
References: <CANEZrP1KAVhi_-cxCYe0rR9LUSYJ8MyW8=6eSJZ65FeY5ZJNuQ@mail.gmail.com>
	<20140114225321.GT38964@giles.gnomon.org.uk>
	<CANAnSg0tH_bK_19rsRRHOeZgrGYeWMhW89fXPyS4DQGmS4r_7A@mail.gmail.com>
	<CALimQCXgc0eXeOcqFGUaCpSF7gKEe87KzvLqHZwUysV3WyjjGw@mail.gmail.com>
	<CAAS2fgShChAQryfUOBp60jB-zxn2tH986fu1HfT+LsNdBYnoYg@mail.gmail.com>
	<CAJHLa0P5r2+kxy7w8G=h=TAhdk1jUoW5UOiv-euo47uQY0u9ZA@mail.gmail.com>
	<20140115230901.GA25135@netbook.cypherspace.org>
	<op.w9q85wkhyldrnw@laptop-air.hsd1.ca.comcast.net>
	<CAAS2fgTRKgkO15VUvVgttP-iEBNF4=G+++Xo-XsaRBmOxyXXKA@mail.gmail.com>
	<20140118174452.GG3180@nl.grid.coop>
Message-ID: <20140120111144.GG3468@savin>

On Sat, Jan 18, 2014 at 11:44:52AM -0600, Troy Benjegerdes wrote:
> > Ignoring prefixes the cost for each reusable address is only a small
> > percentage of the full node cost (rational: each transaction has one
> > or more ECDSA signatures, and the derivation is no more expensive), so
> > I would only expect computation to be an issue for large centralized
> > services. (non-full nodes suffer more from just the bandwidth impact).
> 
> I have not seen anyone address my high-level question to (somewhat) complicated
> mechanisms to keep coin flows private.
> 
> Who pays for it? From what I see it's going to double the amount of data 
> needed per address, further centralizing 'full' nodes. I'm fine if the NSA

Actually the exact encoding is still undetermined - other encodings I
proposed in my original paper are the same size or even smaller than a
standard transaction.

-- 
'peter'[:-1]@petertodd.org
000000000000000190a2900f1a25c507a999fa11116f7bd0126618c1ebc4f5fb
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 685 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140120/175dd35d/attachment.sig>

From slush at centrum.cz  Mon Jan 20 17:42:37 2014
From: slush at centrum.cz (slush)
Date: Mon, 20 Jan 2014 18:42:37 +0100
Subject: [Bitcoin-development] BIP0039: Final call
Message-ID: <CAJna-HjGHpru6Lpv_tXUkWR2mX-=fobzojtHYvSRJy6+CMesOA@mail.gmail.com>

Hi all,

during recent months we've reconsidered all comments which we received from
the community about our BIP39 proposal and we tried to meet all
requirements for such standard. Specifically the proposal now doesn't
require any specific wordlist, so every client can use its very own list of
preferred words. Generated mnemonic can be then applied to any other
BIP39-compatible client. Please follow current draft at
https://github.com/trezor/bips/blob/master/bip-0039.mediawiki.

Because we're quickly moving towards release of Trezor firmware and we need
to finalize this part of the firmware, we're asking for the last comments
to current BIP39 draft.

Thanks,
slush
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140120/bd7b8cb2/attachment.html>

From mike at plan99.net  Mon Jan 20 19:55:04 2014
From: mike at plan99.net (Mike Hearn)
Date: Mon, 20 Jan 2014 19:55:04 +0000
Subject: [Bitcoin-development] BIP0039: Final call
In-Reply-To: <CAJna-HjGHpru6Lpv_tXUkWR2mX-=fobzojtHYvSRJy6+CMesOA@mail.gmail.com>
References: <CAJna-HjGHpru6Lpv_tXUkWR2mX-=fobzojtHYvSRJy6+CMesOA@mail.gmail.com>
Message-ID: <CANEZrP3sMu1Zp+xhr-D2Nr2Hb+6n0MUkvxvRt64GiAmNzu26Tg@mail.gmail.com>

We have an implementation of the latest spec in bitcoinj, with the wordlist
provided by slush+stick. As far as I can see it's all working fine so LGTM
from us.


On Mon, Jan 20, 2014 at 5:42 PM, slush <slush at centrum.cz> wrote:

> Hi all,
>
> during recent months we've reconsidered all comments which we received
> from the community about our BIP39 proposal and we tried to meet all
> requirements for such standard. Specifically the proposal now doesn't
> require any specific wordlist, so every client can use its very own list of
> preferred words. Generated mnemonic can be then applied to any other
> BIP39-compatible client. Please follow current draft at
> https://github.com/trezor/bips/blob/master/bip-0039.mediawiki.
>
> Because we're quickly moving towards release of Trezor firmware and we
> need to finalize this part of the firmware, we're asking for the last
> comments to current BIP39 draft.
>
> Thanks,
> slush
>
>
> ------------------------------------------------------------------------------
> CenturyLink Cloud: The Leader in Enterprise Cloud Services.
> Learn Why More Businesses Are Choosing CenturyLink Cloud For
> Critical Workloads, Development Environments & Everything In Between.
> Get a Quote or Start a Free Trial Today.
>
> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140120/8b149749/attachment.html>

From luke at dashjr.org  Mon Jan 20 20:02:27 2014
From: luke at dashjr.org (Luke-Jr)
Date: Mon, 20 Jan 2014 20:02:27 +0000
Subject: [Bitcoin-development] BIP0039: Final call
In-Reply-To: <CAJna-HjGHpru6Lpv_tXUkWR2mX-=fobzojtHYvSRJy6+CMesOA@mail.gmail.com>
References: <CAJna-HjGHpru6Lpv_tXUkWR2mX-=fobzojtHYvSRJy6+CMesOA@mail.gmail.com>
Message-ID: <201401202002.28141.luke@dashjr.org>

On Monday, January 20, 2014 5:42:37 PM slush wrote:
> Hi all,
> 
> during recent months we've reconsidered all comments which we received from
> the community about our BIP39 proposal and we tried to meet all
> requirements for such standard. Specifically the proposal now doesn't
> require any specific wordlist, so every client can use its very own list of
> preferred words. Generated mnemonic can be then applied to any other
> BIP39-compatible client. Please follow current draft at
> https://github.com/trezor/bips/blob/master/bip-0039.mediawiki.

How are they compatible if they could be using entirely different word lists??

> Because we're quickly moving towards release of Trezor firmware and we need
> to finalize this part of the firmware, we're asking for the last comments
> to current BIP39 draft.

Maybe I'm missing something, but shouldn't this be a client-side thing, not 
implemented in the Trezor firmware at all?? O.o;;

Luke



From slush at centrum.cz  Mon Jan 20 21:47:56 2014
From: slush at centrum.cz (slush)
Date: Mon, 20 Jan 2014 22:47:56 +0100
Subject: [Bitcoin-development] BIP0039: Final call
In-Reply-To: <201401202002.28141.luke@dashjr.org>
References: <CAJna-HjGHpru6Lpv_tXUkWR2mX-=fobzojtHYvSRJy6+CMesOA@mail.gmail.com>
	<201401202002.28141.luke@dashjr.org>
Message-ID: <CAJna-HhgiYe-GRUBdJfchZ2tVLDBnn_6WtNrefrbtYJsG05GXQ@mail.gmail.com>

On Mon, Jan 20, 2014 at 9:02 PM, Luke-Jr <luke at dashjr.org> wrote:

>
> How are they compatible if they could be using entirely different word
> lists??
>
>
Wordlist is necessary for the step [seed]->[mnemonic]. Step
[mnemonic]->[bip32 root] doesn't need any wordlist, there's just hashing
involved.
For this reason client can generate whatever mnemonic and unless all
clients use the same process [mnemonic]->[bip32 root], the result is the
same.


> Maybe I'm missing something, but shouldn't this be a client-side thing, not
> implemented in the Trezor firmware at all?? O.o;;
>
>
Trezor generates the seed and transforms it to mnemonic (which is then
shown on internal display). Generating the mnemonic outside the client-side
(computer) is one of main functionality of Trezor.

slush
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140120/1c516e00/attachment.html>

From mark at monetize.io  Mon Jan 20 22:01:40 2014
From: mark at monetize.io (Mark Friedenbach)
Date: Mon, 20 Jan 2014 14:01:40 -0800
Subject: [Bitcoin-development] BIP0039: Final call
In-Reply-To: <CAJna-HjGHpru6Lpv_tXUkWR2mX-=fobzojtHYvSRJy6+CMesOA@mail.gmail.com>
References: <CAJna-HjGHpru6Lpv_tXUkWR2mX-=fobzojtHYvSRJy6+CMesOA@mail.gmail.com>
Message-ID: <52DD9CC4.1060307@monetize.io>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Since you are taking the hash of Unicode data, I would strongly
recommend using a canonical form, e.g. Normalized Form C.

On 01/20/2014 09:42 AM, slush wrote:
> Hi all,
> 
> during recent months we've reconsidered all comments which we
> received from the community about our BIP39 proposal and we tried
> to meet all requirements for such standard. Specifically the
> proposal now doesn't require any specific wordlist, so every client
> can use its very own list of preferred words. Generated mnemonic
> can be then applied to any other BIP39-compatible client. Please
> follow current draft at
> https://github.com/trezor/bips/blob/master/bip-0039.mediawiki.
> 
> Because we're quickly moving towards release of Trezor firmware and
> we need to finalize this part of the firmware, we're asking for the
> last comments to current BIP39 draft.
> 
> Thanks, slush
> 
> 
> ------------------------------------------------------------------------------
>
> 
CenturyLink Cloud: The Leader in Enterprise Cloud Services.
> Learn Why More Businesses Are Choosing CenturyLink Cloud For 
> Critical Workloads, Development Environments & Everything In
> Between. Get a Quote or Start a Free Trial Today. 
> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk
>
> 
> 
> 
> _______________________________________________ Bitcoin-development
> mailing list Bitcoin-development at lists.sourceforge.net 
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.14 (GNU/Linux)
Comment: GPGTools - http://gpgtools.org
Comment: Using GnuPG with Thunderbird - http://www.enigmail.net/

iQIcBAEBAgAGBQJS3ZzAAAoJEAdzVfsmodw4L3sP/2VjvICLTYlkZcY6brBIZhoU
P6ei6qECzmBCWpW5iC1r99j76bPwP3M6jH6P7iBljj72J5NgHXq+K8GvA5M6qu0o
6s+WJ7HYJ8KwRZuvGPvcopXBKJAJXadrN7xSPikYD2zMm2KCZTUI5IurR1p/dpUR
3HzL2RdjbDugBOiAjiMMq0dAs1x9/vmF0F2KDZHiCJEtP/+gbtOE/KmXrnrAJSNI
Aswb/lZg1GWGpOs+iCdEaRfST2PIL/jGgnteJ4iKHvh2+dOW0/AhINo5g56LTVvU
Q+pAv8SRLad/30PVaWAStrtLMxu+j0JQ1wgEkRCrsQ0xE3iKtmbppzh2dIQ8Idrt
EkjqoykB2wn4Kw+QcT2TXIcBV7LBqSurE/jDWWIFtHxdV0++8PDYFOesq2Xf9Rif
VStYnUVvUhuzGXD3oOnIGpEvMm2i30Qyi33oJLvqfWUBkzJzFdtZ+YYBYlbpwBOQ
YLEr2DmVHLk/MXWL1POruvnIT4N+6uyh59HKHKRJI0nGMmRR3cBLkM8vEEHerD3P
ucg++TTdqXM6XoSmIk55CQnGdglDJEOGc+gzaGffqeDMJhmz/apEawN5en7ogN0o
XfWDWSdtwMvlza3F6cMejvBkuFZTLUxyaedP13vOTDhUIbmqsliyhwA2YrXE7udQ
1JMYADuvb18LYE/hQJX3
=Ycdc
-----END PGP SIGNATURE-----



From boydb at midnightdesign.ws  Mon Jan 20 22:05:14 2014
From: boydb at midnightdesign.ws (Brooks Boyd)
Date: Mon, 20 Jan 2014 16:05:14 -0600
Subject: [Bitcoin-development] BIP0039: Final call
In-Reply-To: <CAJna-HjGHpru6Lpv_tXUkWR2mX-=fobzojtHYvSRJy6+CMesOA@mail.gmail.com>
References: <CAJna-HjGHpru6Lpv_tXUkWR2mX-=fobzojtHYvSRJy6+CMesOA@mail.gmail.com>
Message-ID: <CANg-TZCrpT-YJ0WV9VY6w-PtCiz2YRMBCMvmjneDz13j2namkw@mail.gmail.com>

On Mon, Jan 20, 2014 at 11:42 AM, slush <slush at centrum.cz> wrote:

> Hi all,
>
> during recent months we've reconsidered all comments which we received
> from the community about our BIP39 proposal and we tried to meet all
> requirements for such standard. Specifically the proposal now doesn't
> require any specific wordlist, so every client can use its very own list of
> preferred words. Generated mnemonic can be then applied to any other
> BIP39-compatible client. Please follow current draft at
> https://github.com/trezor/bips/blob/master/bip-0039.mediawiki.
>


So, because the [mnemonic]->[bip32 root] is just hashing, you've
effectively made your "mnemonic sentence" into a brainwallet? Since every
mnemonic sentence can now lead to a bip32 root, and only the client that
created the mnemonic can verify the mnemonic passes its checksum (assuming
all clients use different wordlists, the only client that can help you if
you fat-finger the sentence is the client that created it)?

Brooks
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140120/6d9774f0/attachment.html>

From pete at petertodd.org  Mon Jan 20 22:35:02 2014
From: pete at petertodd.org (Peter Todd)
Date: Mon, 20 Jan 2014 17:35:02 -0500
Subject: [Bitcoin-development] BIP0039: Final call
In-Reply-To: <CANg-TZCrpT-YJ0WV9VY6w-PtCiz2YRMBCMvmjneDz13j2namkw@mail.gmail.com>
References: <CAJna-HjGHpru6Lpv_tXUkWR2mX-=fobzojtHYvSRJy6+CMesOA@mail.gmail.com>
	<CANg-TZCrpT-YJ0WV9VY6w-PtCiz2YRMBCMvmjneDz13j2namkw@mail.gmail.com>
Message-ID: <20140120223502.GA1055@petertodd.org>

On Mon, Jan 20, 2014 at 04:05:14PM -0600, Brooks Boyd wrote:
> On Mon, Jan 20, 2014 at 11:42 AM, slush <slush at centrum.cz> wrote:
> 
> > Hi all,
> >
> > during recent months we've reconsidered all comments which we received
> > from the community about our BIP39 proposal and we tried to meet all
> > requirements for such standard. Specifically the proposal now doesn't
> > require any specific wordlist, so every client can use its very own list of
> > preferred words. Generated mnemonic can be then applied to any other
> > BIP39-compatible client. Please follow current draft at
> > https://github.com/trezor/bips/blob/master/bip-0039.mediawiki.
> 
> So, because the [mnemonic]->[bip32 root] is just hashing, you've
> effectively made your "mnemonic sentence" into a brainwallet? Since every
> mnemonic sentence can now lead to a bip32 root, and only the client that
> created the mnemonic can verify the mnemonic passes its checksum (assuming
> all clients use different wordlists, the only client that can help you if
> you fat-finger the sentence is the client that created it)?

That issue is more than enough to get a NACK from me on making the
current BIP39 draft a standard - I can easily see that leading to users
losing a lot of money.

Have any wallets implemented BIP39 this way already in released code?

-- 
'peter'[:-1]@petertodd.org
00000000000000009c3092c0b245722363df8b29cfbb86368f4f7303e655983a
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 490 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140120/c30a540b/attachment.sig>

From christophe.biocca at gmail.com  Mon Jan 20 23:06:24 2014
From: christophe.biocca at gmail.com (Christophe Biocca)
Date: Mon, 20 Jan 2014 18:06:24 -0500
Subject: [Bitcoin-development] BIP0039: Final call
In-Reply-To: <20140120223502.GA1055@petertodd.org>
References: <CAJna-HjGHpru6Lpv_tXUkWR2mX-=fobzojtHYvSRJy6+CMesOA@mail.gmail.com>
	<CANg-TZCrpT-YJ0WV9VY6w-PtCiz2YRMBCMvmjneDz13j2namkw@mail.gmail.com>
	<20140120223502.GA1055@petertodd.org>
Message-ID: <CANOOu=_pVCPiDtbqc3EwToZWzjLw4UqOvpsu2Wrt4eDKC7g_2g@mail.gmail.com>

I remember the wordlist choice getting bikeshedded to death a month ago.

I would just include the wordlist as part of the standard (as a
recommendation) so that fully compliant implementations can correct a
user's typos regardless of the original generator.

Those who don't like it will have to deal with the compatibility
concerns themselves, or get an alternate wordlist approved as a BIP.
Odds are no one will go that route.

On Mon, Jan 20, 2014 at 5:35 PM, Peter Todd <pete at petertodd.org> wrote:
> On Mon, Jan 20, 2014 at 04:05:14PM -0600, Brooks Boyd wrote:
>> On Mon, Jan 20, 2014 at 11:42 AM, slush <slush at centrum.cz> wrote:
>>
>> > Hi all,
>> >
>> > during recent months we've reconsidered all comments which we received
>> > from the community about our BIP39 proposal and we tried to meet all
>> > requirements for such standard. Specifically the proposal now doesn't
>> > require any specific wordlist, so every client can use its very own list of
>> > preferred words. Generated mnemonic can be then applied to any other
>> > BIP39-compatible client. Please follow current draft at
>> > https://github.com/trezor/bips/blob/master/bip-0039.mediawiki.
>>
>> So, because the [mnemonic]->[bip32 root] is just hashing, you've
>> effectively made your "mnemonic sentence" into a brainwallet? Since every
>> mnemonic sentence can now lead to a bip32 root, and only the client that
>> created the mnemonic can verify the mnemonic passes its checksum (assuming
>> all clients use different wordlists, the only client that can help you if
>> you fat-finger the sentence is the client that created it)?
>
> That issue is more than enough to get a NACK from me on making the
> current BIP39 draft a standard - I can easily see that leading to users
> losing a lot of money.
>
> Have any wallets implemented BIP39 this way already in released code?
>
> --
> 'peter'[:-1]@petertodd.org
> 00000000000000009c3092c0b245722363df8b29cfbb86368f4f7303e655983a
>
> ------------------------------------------------------------------------------
> CenturyLink Cloud: The Leader in Enterprise Cloud Services.
> Learn Why More Businesses Are Choosing CenturyLink Cloud For
> Critical Workloads, Development Environments & Everything In Between.
> Get a Quote or Start a Free Trial Today.
> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>



From adam at cypherspace.org  Mon Jan 20 23:14:41 2014
From: adam at cypherspace.org (Adam Back)
Date: Tue, 21 Jan 2014 00:14:41 +0100
Subject: [Bitcoin-development] BIP0039: Final call
In-Reply-To: <20140120223502.GA1055@petertodd.org>
References: <CAJna-HjGHpru6Lpv_tXUkWR2mX-=fobzojtHYvSRJy6+CMesOA@mail.gmail.com>
	<CANg-TZCrpT-YJ0WV9VY6w-PtCiz2YRMBCMvmjneDz13j2namkw@mail.gmail.com>
	<20140120223502.GA1055@petertodd.org>
Message-ID: <20140120231441.GA9332@netbook.cypherspace.org>

Because the mnemonic is an encoding of a 128-bit random number using its
hash as a private key (or derived part of one) is not a problem, its just an
alternate alphabet encoding of the random private key.

Not being able to generically understand the checksum.  Seems tricky to
solve other than say brute force eg H(mnemonic||1) mod 2^k == 0 where k is
the amount of check digit redundancy.  But that might be expensive for a
trezor if k is very big at all.  And then key = H(mnemonic).

Adam

On Mon, Jan 20, 2014 at 05:35:02PM -0500, Peter Todd wrote:
>On Mon, Jan 20, 2014 at 04:05:14PM -0600, Brooks Boyd wrote:
>> On Mon, Jan 20, 2014 at 11:42 AM, slush <slush at centrum.cz> wrote:
>>
>> > Hi all,
>> >
>> > during recent months we've reconsidered all comments which we received
>> > from the community about our BIP39 proposal and we tried to meet all
>> > requirements for such standard. Specifically the proposal now doesn't
>> > require any specific wordlist, so every client can use its very own list of
>> > preferred words. Generated mnemonic can be then applied to any other
>> > BIP39-compatible client. Please follow current draft at
>> > https://github.com/trezor/bips/blob/master/bip-0039.mediawiki.
>>
>> So, because the [mnemonic]->[bip32 root] is just hashing, you've
>> effectively made your "mnemonic sentence" into a brainwallet? Since every
>> mnemonic sentence can now lead to a bip32 root, and only the client that
>> created the mnemonic can verify the mnemonic passes its checksum (assuming
>> all clients use different wordlists, the only client that can help you if
>> you fat-finger the sentence is the client that created it)?
>
>That issue is more than enough to get a NACK from me on making the
>current BIP39 draft a standard - I can easily see that leading to users
>losing a lot of money.
>
>Have any wallets implemented BIP39 this way already in released code?
>
>-- 
>'peter'[:-1]@petertodd.org
>00000000000000009c3092c0b245722363df8b29cfbb86368f4f7303e655983a



>------------------------------------------------------------------------------
>CenturyLink Cloud: The Leader in Enterprise Cloud Services.
>Learn Why More Businesses Are Choosing CenturyLink Cloud For
>Critical Workloads, Development Environments & Everything In Between.
>Get a Quote or Start a Free Trial Today.
>http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk

>_______________________________________________
>Bitcoin-development mailing list
>Bitcoin-development at lists.sourceforge.net
>https://lists.sourceforge.net/lists/listinfo/bitcoin-development




From slush at centrum.cz  Mon Jan 20 23:18:16 2014
From: slush at centrum.cz (slush)
Date: Tue, 21 Jan 2014 00:18:16 +0100
Subject: [Bitcoin-development] BIP0039: Final call
In-Reply-To: <CANOOu=_pVCPiDtbqc3EwToZWzjLw4UqOvpsu2Wrt4eDKC7g_2g@mail.gmail.com>
References: <CAJna-HjGHpru6Lpv_tXUkWR2mX-=fobzojtHYvSRJy6+CMesOA@mail.gmail.com>
	<CANg-TZCrpT-YJ0WV9VY6w-PtCiz2YRMBCMvmjneDz13j2namkw@mail.gmail.com>
	<20140120223502.GA1055@petertodd.org>
	<CANOOu=_pVCPiDtbqc3EwToZWzjLw4UqOvpsu2Wrt4eDKC7g_2g@mail.gmail.com>
Message-ID: <CAJna-HgStwQQUiNZfJrFS1SduuzEEVrF=qmVe23uqZUNhHkOHA@mail.gmail.com>

On Tue, Jan 21, 2014 at 12:06 AM, Christophe Biocca <
christophe.biocca at gmail.com> wrote:

> I remember the wordlist choice getting bikeshedded to death a month ago.
>
> I would just include the wordlist as part of the standard (as a
> recommendation) so that fully compliant implementations can correct a
> user's typos regardless of the original generator.
>
>
That's exactly our attitude. We realized that have a community-wide
agreement on the wordlist itself is simply imposible, so to reach at least
some consensus we split the proposal to two parts - one what is essential
to call itself a "bip39 compatible", i.e. converting the mnemonic to bip32
node and second which is optional, including our proposed wordlist, which
has some advanced features like checksums etc. Now it is up to client
developers to decide if they really insist on their superior wordlist or if
they'll implement checksums following the full specification.



> Those who don't like it will have to deal with the compatibility
> concerns themselves, or get an alternate wordlist approved as a BIP.

Odds are no one will go that route.
>
>
At least Trezor and bitcoinj (Multibit) seems to be going in this way,
which is 100% of clients which expressed interest in bip39 :-).

slush


> On Mon, Jan 20, 2014 at 5:35 PM, Peter Todd <pete at petertodd.org> wrote:
> > On Mon, Jan 20, 2014 at 04:05:14PM -0600, Brooks Boyd wrote:
> >> On Mon, Jan 20, 2014 at 11:42 AM, slush <slush at centrum.cz> wrote:
> >>
> >> > Hi all,
> >> >
> >> > during recent months we've reconsidered all comments which we received
> >> > from the community about our BIP39 proposal and we tried to meet all
> >> > requirements for such standard. Specifically the proposal now doesn't
> >> > require any specific wordlist, so every client can use its very own
> list of
> >> > preferred words. Generated mnemonic can be then applied to any other
> >> > BIP39-compatible client. Please follow current draft at
> >> > https://github.com/trezor/bips/blob/master/bip-0039.mediawiki.
> >>
> >> So, because the [mnemonic]->[bip32 root] is just hashing, you've
> >> effectively made your "mnemonic sentence" into a brainwallet? Since
> every
> >> mnemonic sentence can now lead to a bip32 root, and only the client that
> >> created the mnemonic can verify the mnemonic passes its checksum
> (assuming
> >> all clients use different wordlists, the only client that can help you
> if
> >> you fat-finger the sentence is the client that created it)?
> >
> > That issue is more than enough to get a NACK from me on making the
> > current BIP39 draft a standard - I can easily see that leading to users
> > losing a lot of money.
> >
> > Have any wallets implemented BIP39 this way already in released code?
> >
> > --
> > 'peter'[:-1]@petertodd.org
> > 00000000000000009c3092c0b245722363df8b29cfbb86368f4f7303e655983a
> >
> >
> ------------------------------------------------------------------------------
> > CenturyLink Cloud: The Leader in Enterprise Cloud Services.
> > Learn Why More Businesses Are Choosing CenturyLink Cloud For
> > Critical Workloads, Development Environments & Everything In Between.
> > Get a Quote or Start a Free Trial Today.
> >
> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk
> > _______________________________________________
> > Bitcoin-development mailing list
> > Bitcoin-development at lists.sourceforge.net
> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> >
>
>
> ------------------------------------------------------------------------------
> CenturyLink Cloud: The Leader in Enterprise Cloud Services.
> Learn Why More Businesses Are Choosing CenturyLink Cloud For
> Critical Workloads, Development Environments & Everything In Between.
> Get a Quote or Start a Free Trial Today.
>
> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140121/c4e498fc/attachment.html>

From mark at monetize.io  Mon Jan 20 23:18:36 2014
From: mark at monetize.io (Mark Friedenbach)
Date: Mon, 20 Jan 2014 15:18:36 -0800
Subject: [Bitcoin-development] BIP0039: Final call
In-Reply-To: <20140120231441.GA9332@netbook.cypherspace.org>
References: <CAJna-HjGHpru6Lpv_tXUkWR2mX-=fobzojtHYvSRJy6+CMesOA@mail.gmail.com>	<CANg-TZCrpT-YJ0WV9VY6w-PtCiz2YRMBCMvmjneDz13j2namkw@mail.gmail.com>	<20140120223502.GA1055@petertodd.org>
	<20140120231441.GA9332@netbook.cypherspace.org>
Message-ID: <52DDAECC.9010107@monetize.io>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Proper Unicode handling is a serious issue however. You don't want
someone to move from one input method / machine to another and
suddenly find that their coins are inaccessible, because of an issue
of decomposed vs. compatibility forms or whatever.

On 01/20/2014 03:14 PM, Adam Back wrote:
> Because the mnemonic is an encoding of a 128-bit random number
> using its hash as a private key (or derived part of one) is not a
> problem, its just an alternate alphabet encoding of the random
> private key.
> 
> Not being able to generically understand the checksum.  Seems
> tricky to solve other than say brute force eg H(mnemonic||1) mod
> 2^k == 0 where k is the amount of check digit redundancy.  But that
> might be expensive for a trezor if k is very big at all.  And then
> key = H(mnemonic).
> 
> Adam
> 
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.14 (GNU/Linux)
Comment: GPGTools - http://gpgtools.org
Comment: Using GnuPG with Thunderbird - http://www.enigmail.net/

iQIcBAEBAgAGBQJS3a7MAAoJEAdzVfsmodw4/MAP/3Rk4sbQBv5aGqM2iAMBZkjq
CxGNSrzxKKgAYf+aFka6FVrBZJRHU39mEon53H0DR92+3vA2BHns8YEKH18LneQ9
16qJAp4y+ml5jbdCI6TY1JCM4ObmXsZbsPF17lKdVPISkz8DhUMUNLHdOx8cZHkw
Kj5RXuLBFwqFiCcAqYdoIpFmDpfaJfZ3k9OHzPRsto1oyOrXdwc+TK8YZHISWR3M
nzsMcp2z9Uu8M/NeDo4gM0WFpIZ41W9JsYeMeJzdU6xd1HKdmC0CZCyc8EmAre58
XGc2gtc9PjXIwWW+FTkZ5pYJz718WBq4Wja1hir5eaTJZurs1fp+1iJ7jiDkloJH
h/pWp8wcXVaAklaImota3PASr5qnP8zjzaKZALn/0gJEkIKnIJz3N32BLw7QsoEL
k5VaMQ5x7/9zK+Qc5kWvtTjleRO23DnW+XVud0jbAHTM1wfTQH0dJIgEpe3HQZOR
9a09/ZKN8kC+2fj/u6EjkVh5RvwTv0iq+RvBDmsFjaVOfBzRL1LVKgKJvdG+0hix
XyPtnBflC1uNLNg/yjBEP7/cKePJVMcDzVBwjpbnEOo9ZGO2ixSh8qMQ/nn6V96R
hZZv8mVI1bGhWlvQEoMw5X7M4xyP25GboCv4wJrYT/8VQfe56BSKXS+AHfl+hIoa
Jjmcqvm+sfk/0awxj4Ce
=1crJ
-----END PGP SIGNATURE-----



From thomasv1 at gmx.de  Tue Jan 21 00:00:43 2014
From: thomasv1 at gmx.de (Thomas Voegtlin)
Date: Tue, 21 Jan 2014 01:00:43 +0100
Subject: [Bitcoin-development] BIP0039: Final call
In-Reply-To: <CAJna-HgStwQQUiNZfJrFS1SduuzEEVrF=qmVe23uqZUNhHkOHA@mail.gmail.com>
References: <CAJna-HjGHpru6Lpv_tXUkWR2mX-=fobzojtHYvSRJy6+CMesOA@mail.gmail.com>	<CANg-TZCrpT-YJ0WV9VY6w-PtCiz2YRMBCMvmjneDz13j2namkw@mail.gmail.com>	<20140120223502.GA1055@petertodd.org>	<CANOOu=_pVCPiDtbqc3EwToZWzjLw4UqOvpsu2Wrt4eDKC7g_2g@mail.gmail.com>
	<CAJna-HgStwQQUiNZfJrFS1SduuzEEVrF=qmVe23uqZUNhHkOHA@mail.gmail.com>
Message-ID: <52DDB8AB.4010103@gmx.de>

Hi slush,

Thank you for your new proposal; it seems to be a compromise.

@Christophe Biocca:
If the wordlist becomes part of the standard, then we will run into
problems of collisions once users ask for wordlists in every language.

IMO the right approach is to implement checksums that do not depend
on the wordlist (eg the 'brute force' method, Hash(mnemonic||1) mod 2^k 
== 0 )
this would also allow us to implement sipa's variable stretching proposal.

I understand this is not possible because of the computational
requirements of devices such as trezor.

I am leaning toward considering these devices as a nonstandard case,
instead of enforcing a given wordlist in the standard.

Thomas






Le 21/01/2014 00:18, slush a ?crit :
>
> On Tue, Jan 21, 2014 at 12:06 AM, Christophe Biocca 
> <christophe.biocca at gmail.com <mailto:christophe.biocca at gmail.com>> wrote:
>
>     I remember the wordlist choice getting bikeshedded to death a
>     month ago.
>
>     I would just include the wordlist as part of the standard (as a
>     recommendation) so that fully compliant implementations can correct a
>     user's typos regardless of the original generator.
>
>
> That's exactly our attitude. We realized that have a community-wide 
> agreement on the wordlist itself is simply imposible, so to reach at 
> least some consensus we split the proposal to two parts - one what is 
> essential to call itself a "bip39 compatible", i.e. converting the 
> mnemonic to bip32 node and second which is optional, including our 
> proposed wordlist, which has some advanced features like checksums 
> etc. Now it is up to client developers to decide if they really insist 
> on their superior wordlist or if they'll implement checksums following 
> the full specification.
>
>     Those who don't like it will have to deal with the compatibility
>     concerns themselves, or get an alternate wordlist approved as a BIP. 
>
>     Odds are no one will go that route.
>
> At least Trezor and bitcoinj (Multibit) seems to be going in this way, 
> which is 100% of clients which expressed interest in bip39 :-).
>
> slush
>

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140121/2f2ab616/attachment.html>

From jeremy at taplink.co  Tue Jan 21 04:00:05 2014
From: jeremy at taplink.co (Jeremy Spilman)
Date: Mon, 20 Jan 2014 20:00:05 -0800
Subject: [Bitcoin-development] unlinakble static address? & spv-privacy
 (Re: Stealth Addresses)
In-Reply-To: <CAAS2fgTRKgkO15VUvVgttP-iEBNF4=G+++Xo-XsaRBmOxyXXKA@mail.gmail.com>
References: <CABsx9T2G=yqSUGr0+Ju5-z9P++uS20AwLC+c3DnFMHtcQjQK6w@mail.gmail.com>
	<CAAS2fgTz0TaGhym_35V3N2-vHVzU9BeuV8q+QJjwh5bg77FEZg@mail.gmail.com>
	<CANEZrP0huBWqgvQik9Yc26Tu4CwR0VSXcfC+qfzsZqvoU4VJGA@mail.gmail.com>
	<20140113133746.GI38964@giles.gnomon.org.uk>
	<CANEZrP1KAVhi_-cxCYe0rR9LUSYJ8MyW8=6eSJZ65FeY5ZJNuQ@mail.gmail.com>
	<20140114225321.GT38964@giles.gnomon.org.uk>
	<CANAnSg0tH_bK_19rsRRHOeZgrGYeWMhW89fXPyS4DQGmS4r_7A@mail.gmail.com>
	<CALimQCXgc0eXeOcqFGUaCpSF7gKEe87KzvLqHZwUysV3WyjjGw@mail.gmail.com>
	<CAAS2fgShChAQryfUOBp60jB-zxn2tH986fu1HfT+LsNdBYnoYg@mail.gmail.com>
	<CAJHLa0P5r2+kxy7w8G=h=TAhdk1jUoW5UOiv-euo47uQY0u9ZA@mail.gmail.com>
	<20140115230901.GA25135@netbook.cypherspace.org>
	<op.w9q85wkhyldrnw@laptop-air.hsd1.ca.comcast.net>
	<CAAS2fgTRKgkO15VUvVgttP-iEBNF4=G+++Xo-XsaRBmOxyXXKA@mail.gmail.com>
Message-ID: <op.w90qqfh4yldrnw@laptop-air>

On Wed, 15 Jan 2014 17:32:31 -0800, Gregory Maxwell <gmaxwell at gmail.com>  
wrote:
> I'd point out that regardless of how long the desired prefix is, the
> encoded prefix should probably always be constant length in all
> reusable addresses.

I might be misunderstanding, but I think prefix length must be specified  
in the reusable address, however I agree the prefix actually published to  
the blockchain should be constant length.

> If you don't want a particular prefix then the
> sender should just pick random data for the rest of the space. There
> is no need to publish any additional distinguishing data in the form
> of how long the prefix is.

Let's say the payee's reusable address is '<version> <prefix> <Q1> <Q2>  
...', where <prefix> is 2 bytes. Without any length indicator. What's the  
payer going to put on the blockchain? How would they know what the 'rest  
of the space' is? They would have to put the whole <prefix> verbatim into  
the OP_RETURN without knowing how many bits of <prefix> the payee actually  
wants to see there.

If instead, the address is '<version> <prefix> <prefixLen> <Q1> <Q2> ...'  
where <prefix> is 2 bytes, and <prefixLen> is 1 byte, representing number  
of bits of prefix that should be fixed.

Then payer will know how much of <prefix> from the address should be taken  
verbatim, and the rest of the two bytes would be replaced with random  
data, and exactly two bytes would be put in the OP_RETURN.

If <prefixLen> was zero, the 2 byte prefix in the reusable address must be  
ignored, and an entirely random 2 byte prefix would be put into the  
OP_RETURN.

I'm a bit worried about broken implementations copying the <prefix> from  
the reusable address into OP_RETURN when <prefixLen> is 0, and ending up  
basically identifying the payee. That's the only reason I can think of to  
make '<prefix> <prefixLen>' optional in the reusable address, to prevent  
the opportunity to screw it up. You would *still* put a 2-byte random  
prefix in the OP_RETURN, even if the fields weren't in the address at all.  
It's just a minor concern though.




From tamas at bitsofproof.com  Tue Jan 21 05:43:49 2014
From: tamas at bitsofproof.com (Tamas Blummer)
Date: Tue, 21 Jan 2014 06:43:49 +0100
Subject: [Bitcoin-development] BIP0039: Final call
In-Reply-To: <mailman.423274.1390277261.21953.bitcoin-development@lists.sourceforge.net>
References: <mailman.423274.1390277261.21953.bitcoin-development@lists.sourceforge.net>
Message-ID: <300D31FC-FB89-4386-8DD9-F5FA792D0B40@bitsofproof.com>

> At least Trezor and bitcoinj (Multibit) seems to be going in this way,
> which is 100% of clients which expressed interest in bip39 :-).
> 
> slush

The the current spec with TREZOR's wordlist is also implemented by Bits of Proof
https://github.com/bitsofproof/supernode/blob/master/api/src/main/java/com/bitsofproof/supernode/wallet/BIP39.java

and deployed in two projects, one being btc1k also open sourced at our github.

Regards,

Tam?s Blummer
http://bitsofproof.com

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140121/e732b10e/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 495 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140121/e732b10e/attachment.sig>

From g.rowe at froot.co.uk  Tue Jan 21 10:01:55 2014
From: g.rowe at froot.co.uk (Gary Rowe)
Date: Tue, 21 Jan 2014 10:01:55 +0000
Subject: [Bitcoin-development] BIP0039: Final call
In-Reply-To: <300D31FC-FB89-4386-8DD9-F5FA792D0B40@bitsofproof.com>
References: <mailman.423274.1390277261.21953.bitcoin-development@lists.sourceforge.net>
	<300D31FC-FB89-4386-8DD9-F5FA792D0B40@bitsofproof.com>
Message-ID: <CAKm8k+0xa5-b=gjfZmH760TbYaQUVf5fGvVK9Jx5jwBGAvcX4g@mail.gmail.com>

MultiBit here.

>At least Trezor and bitcoinj (Multibit) seems to be going in this way,
>which is 100% of clients which expressed interest in bip39 :-).
>
>slush

We'll be using the BIP39 implementation present in Bitcoinj as slush says.

>Proper Unicode handling is a serious issue however. You don't want
>someone to move from one input method / machine to another and
>suddenly find that their coins are inaccessible, because of an issue
>of decomposed vs. compatibility forms or whatever.

We generate the word list internally (12,18,24) and confirm it is entered
correctly through a retyping operation. This will allow us to detect
character encoding transpositions (e.g. u0032 vs u00a0) and alert the user
before it becomes an issue.

While English is the language of the first word list to be implemented, we
would definitely integrate alternative non-English word lists to make life
easier for the global community. In general the approach would be for the
user to select their language (implying a locale) and then the word list to
be selected from that locale if available with a fallback to English. This
follows the same approach as resource bundles in Java.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140121/c576faef/attachment.html>

From mike at plan99.net  Tue Jan 21 10:11:39 2014
From: mike at plan99.net (Mike Hearn)
Date: Tue, 21 Jan 2014 10:11:39 +0000
Subject: [Bitcoin-development] BIP0039: Final call
In-Reply-To: <CAKm8k+0xa5-b=gjfZmH760TbYaQUVf5fGvVK9Jx5jwBGAvcX4g@mail.gmail.com>
References: <mailman.423274.1390277261.21953.bitcoin-development@lists.sourceforge.net>
	<300D31FC-FB89-4386-8DD9-F5FA792D0B40@bitsofproof.com>
	<CAKm8k+0xa5-b=gjfZmH760TbYaQUVf5fGvVK9Jx5jwBGAvcX4g@mail.gmail.com>
Message-ID: <CANEZrP0Us2+2_ThvRpy4hvny9i8q8avud5gteXzyJB_C1+m7qQ@mail.gmail.com>

We should just perform Unicode canonicalization before any text hits the
crypto code.  There are algorithms that automatically resolve such issues.
Although with an English wordlist it would seem to make no difference
anyway.


On Tue, Jan 21, 2014 at 10:01 AM, Gary Rowe <g.rowe at froot.co.uk> wrote:

> MultiBit here.
>
> >At least Trezor and bitcoinj (Multibit) seems to be going in this way,
> >which is 100% of clients which expressed interest in bip39 :-).
> >
> >slush
>
> We'll be using the BIP39 implementation present in Bitcoinj as slush says.
>
> >Proper Unicode handling is a serious issue however. You don't want
> >someone to move from one input method / machine to another and
> >suddenly find that their coins are inaccessible, because of an issue
> >of decomposed vs. compatibility forms or whatever.
>
> We generate the word list internally (12,18,24) and confirm it is entered
> correctly through a retyping operation. This will allow us to detect
> character encoding transpositions (e.g. u0032 vs u00a0) and alert the user
> before it becomes an issue.
>
> While English is the language of the first word list to be implemented, we
> would definitely integrate alternative non-English word lists to make life
> easier for the global community. In general the approach would be for the
> user to select their language (implying a locale) and then the word list to
> be selected from that locale if available with a fallback to English. This
> follows the same approach as resource bundles in Java.
>
>
>
>
> ------------------------------------------------------------------------------
> CenturyLink Cloud: The Leader in Enterprise Cloud Services.
> Learn Why More Businesses Are Choosing CenturyLink Cloud For
> Critical Workloads, Development Environments & Everything In Between.
> Get a Quote or Start a Free Trial Today.
>
> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140121/3a445fb4/attachment.html>

From bc at bcdev.net  Wed Jan 22 21:06:05 2014
From: bc at bcdev.net (bc)
Date: Wed, 22 Jan 2014 22:06:05 +0100
Subject: [Bitcoin-development] Combining big transactions with hash-only
	blocks to improve tps.
Message-ID: <52E032BD.4020206@bcdev.net>

Pdf version:
http://bcdev.net/data/bitcoin_big_tx_with_coin_join.pdf


== Combining big transactions with hash-only blocks to improve tps. ==

==== Abstract: ====
I've heard people talk about including only hashes in a block to speed 
up the network and also about using CoinJoin to improve privacy. I've 
not heard anyone talk about implications of combining these two 
techniques. I think that it would both improve network's anonymity, but 
also improve tps by a few orders of magnitude.

I propose two optimizations:
1. Keep only hashes of transactions included in a block. Transfer all tx 
separately.
2. Use CoinJoin to merge transactions from many users for online 
shopping and banking.
3. Use Jumbo transactions as a fallback for applications where CoinJoin 
is inappropriate.

==== Keeping only hashes of tx in a block: ====
Currently every bitcoin block includes a copy of all transactions. This 
is redundant and unnecessary, since after the transaction gets 
transmitted, every node learns about it in seconds.
By keeping only transaction hashes in block, we can keep block 
propagation time from increasing.
Assuming a typical tx with one or two inputs and two outputs [typically 
300 bytes], current 1MiB block can contain about [assuming a block every 
10 minutes]:
1MiB / 300 bytes = 3300tx = 5.5tps

By keeping only hashes in a block [32 bytes per hash]:
1MiB / 32 bytes = 31000tx = 50tps

== Benefits: ==
This method allows to achieve more tps without increasing the block 
propagation time, which is critical for mining decentralization.
It removes redundancy, since every tx has to be transmitted only once.
It leads to a more consistent bandwidth utilization [large transactions 
are transmitted all the time, while blocks are kept small and easy to 
propagate].
Because a block size is a constant, mining fees would not depend on the 
size of a transaction. Obviously to limit the network flood, there 
should be a transaction size limit.

== Problems: ==
Selfish miner can keep a subset of transactions only for yourself and 
release them only with a new block. This problem can be mitigated by 
making nodes verify all transactions before propagating a block. The 
incentive will then be to mine only a well-distributed transactions to 
lower orphan rate.
The miner can try to sneak up invalid transaction in a block. This 
problem is also mitigated by not accepting a block before it gets verified.

==== CoinJoin: ====
If the block size keeps only hashes, a transaction can be much bigger. 
Since CoinJoin allows many people to send coins with one transaction, 
the effective transaction rate can be increased considerably.

== Example: ==
Let's assume the transaction size limit of 50KiB. Limit of this size 
allows for a CoinJoin transaction between 50KiB / 300b = 170 participants.
So for a block of 1MiB, it would allow for 50tps * 
170effective_transactions/tx = 8500tps.

== Benefits: ==
There would be an incentive for users to use CoinJoin by default [lower 
tx fees per effective transaction], which would greatly increase 
anonymity of the network.
Since block size stays the same, block propagation time also stays the same.
It doesn't require any changes to the protocol. CoinJoin transactions 
were always supported in bitcoin.

== Problems: ==
1) CoinJoin requires collaboration between many users in real-time. It 
means, that transaction must be distributed to every CoinJoin 
participant, and every participant has to sign it before it can be 
released. Therefore it induces delays, which can take some time.
It wouldn't be an issue with Internet banking or on-line shopping [where 
even 10 minutes per transaction is fast enough], however even 20 seconds 
can make the system unsuitable for POS payments.
Potential solution: Use bigger CoinJoin user base for online payments 
[with smaller fees], and a smaller one for POS payments [with larger fees].

2) Signing a CoinJoin transaction requires to transfer a whole 
transaction for a user to sign.
This can sometimes take up to a few minutes on a very slow networks.

3) CoinJoin transactions are limited. They are good enough for money 
transfer, but for more advanced appliances CoinJoin might be inadequate.

==== Jumbo transactons: ====
I propose another tx type as a fallback where CoinJoin is not Combining 
big transactions with hash-only blocks to improve tps.applicable. It 
would remove the CoinJoin induced delays, while keeping transaction 
sizes big.

Image: http://bcdev.net/data/jubo_transaction_description.png

Transaction joiner is a service that collects transactions from clients 
and publishes them as a Jumbo transaction.
Jumbo pubkey prevents transaction from being modified. It can only be 
accepted or rejected by the miner as a whole, which should limit 
discrimination.

== Algorithm: ==
1) Transaction joiner sends a Jumbo pubkey hash to the client.
2) Client creates a transaction, includes a Jumbo pubkey hash and signs it.
3) Transaction joiner waits until there are enough transactions and 
releases a Jumbo transaction to the network.
4) A miner includes only a hash of a Jumbo transaction in a block, he 
cannot cherry-pick individual transactions from the bulk.
5) The network checks if every transaction inside a Jumbo transaction 
includes a Jumbo pubkey hash and if every transaction inside is valid.

== Benefits: ==
Since the block size stays the same, block propagation time also stay 
the same.
There is no need to wait for every participant to sign the transaction. 
It's therefore more suitable for POS payments.
No additional network overhead for a thin client compared to a standard tx.
Backwards compatibility with current transaction system.

== Problems: ==
1) Jumbo transactions don't mix coins. Anonymity of the network is not 
increased.
2) There would be an incentive to use this transaction type by default 
[compared to CoinJoin].

Potential solution:
Make Jumbo transaction size limit lower than CoinJoin. That would make 
fees for these transactions higher, thus creating an incentive to only 
use them when necessary.

3) Transaction joiner has to wait for a Jumbo transaction to be big 
enough before it gets released.
It's not a big problem. When the network load is low, the fee required 
for a tx to be included should be lower, allowing for smaller Jumbo 
transactions. When the network load is high, it takes less time to fill 
a Jumbo transaction.

==== References: ====
Increasing the Network Hashing Power by reducing block propagation time 
https://bitcointalk.org/index.php?topic=145066.0

CoinJoin: Bitcoin privacy for the real world
https://bitcointalk.org/index.php?topic=279249.0

Bitcoin: A Peer-to-Peer Electronic Cash System
http://bitcoin.org/bitcoin.pdf



From natanael.l at gmail.com  Wed Jan 22 21:43:44 2014
From: natanael.l at gmail.com (Natanael)
Date: Wed, 22 Jan 2014 22:43:44 +0100
Subject: [Bitcoin-development] Combining big transactions with hash-only
 blocks to improve tps.
In-Reply-To: <52E032BD.4020206@bcdev.net>
References: <52E032BD.4020206@bcdev.net>
Message-ID: <CAAt2M18tyVXh+ZyZ6hF=19JAPjzd9wk+K4_sNXSC6S-baNphWA@mail.gmail.com>

Couldn't we also use the type of zkSNARK's that Zerocoin adopted to
prove that the hash-only blocks only have valid transactions in it,
since they are small and quite efficient to verify? The trouble is
that they're still inefficient to generate, but given powerful enough
computers that compiles the hashes for the block and it could likely
still be done fast enough to handle large amounts of transactions. The
computer is likely not going to be the most expensive part anyway by a
far margin.

zkSNARK = zero-knowledge Succinct Non-interactive ARgument of Knowledge

On Wed, Jan 22, 2014 at 10:06 PM, bc <bc at bcdev.net> wrote:
> Pdf version:
> http://bcdev.net/data/bitcoin_big_tx_with_coin_join.pdf
>
>
> == Combining big transactions with hash-only blocks to improve tps. ==
>
> ==== Abstract: ====
> I've heard people talk about including only hashes in a block to speed
> up the network and also about using CoinJoin to improve privacy. I've
> not heard anyone talk about implications of combining these two
> techniques. I think that it would both improve network's anonymity, but
> also improve tps by a few orders of magnitude.
>
> I propose two optimizations:
> 1. Keep only hashes of transactions included in a block. Transfer all tx
> separately.
> 2. Use CoinJoin to merge transactions from many users for online
> shopping and banking.
> 3. Use Jumbo transactions as a fallback for applications where CoinJoin
> is inappropriate.
>
> ==== Keeping only hashes of tx in a block: ====
> Currently every bitcoin block includes a copy of all transactions. This
> is redundant and unnecessary, since after the transaction gets
> transmitted, every node learns about it in seconds.
> By keeping only transaction hashes in block, we can keep block
> propagation time from increasing.
> Assuming a typical tx with one or two inputs and two outputs [typically
> 300 bytes], current 1MiB block can contain about [assuming a block every
> 10 minutes]:
> 1MiB / 300 bytes = 3300tx = 5.5tps
>
> By keeping only hashes in a block [32 bytes per hash]:
> 1MiB / 32 bytes = 31000tx = 50tps
>
> == Benefits: ==
> This method allows to achieve more tps without increasing the block
> propagation time, which is critical for mining decentralization.
> It removes redundancy, since every tx has to be transmitted only once.
> It leads to a more consistent bandwidth utilization [large transactions
> are transmitted all the time, while blocks are kept small and easy to
> propagate].
> Because a block size is a constant, mining fees would not depend on the
> size of a transaction. Obviously to limit the network flood, there
> should be a transaction size limit.
>
> == Problems: ==
> Selfish miner can keep a subset of transactions only for yourself and
> release them only with a new block. This problem can be mitigated by
> making nodes verify all transactions before propagating a block. The
> incentive will then be to mine only a well-distributed transactions to
> lower orphan rate.
> The miner can try to sneak up invalid transaction in a block. This
> problem is also mitigated by not accepting a block before it gets verified.
>
> ==== CoinJoin: ====
> If the block size keeps only hashes, a transaction can be much bigger.
> Since CoinJoin allows many people to send coins with one transaction,
> the effective transaction rate can be increased considerably.
>
> == Example: ==
> Let's assume the transaction size limit of 50KiB. Limit of this size
> allows for a CoinJoin transaction between 50KiB / 300b = 170 participants.
> So for a block of 1MiB, it would allow for 50tps *
> 170effective_transactions/tx = 8500tps.
>
> == Benefits: ==
> There would be an incentive for users to use CoinJoin by default [lower
> tx fees per effective transaction], which would greatly increase
> anonymity of the network.
> Since block size stays the same, block propagation time also stays the same.
> It doesn't require any changes to the protocol. CoinJoin transactions
> were always supported in bitcoin.
>
> == Problems: ==
> 1) CoinJoin requires collaboration between many users in real-time. It
> means, that transaction must be distributed to every CoinJoin
> participant, and every participant has to sign it before it can be
> released. Therefore it induces delays, which can take some time.
> It wouldn't be an issue with Internet banking or on-line shopping [where
> even 10 minutes per transaction is fast enough], however even 20 seconds
> can make the system unsuitable for POS payments.
> Potential solution: Use bigger CoinJoin user base for online payments
> [with smaller fees], and a smaller one for POS payments [with larger fees].
>
> 2) Signing a CoinJoin transaction requires to transfer a whole
> transaction for a user to sign.
> This can sometimes take up to a few minutes on a very slow networks.
>
> 3) CoinJoin transactions are limited. They are good enough for money
> transfer, but for more advanced appliances CoinJoin might be inadequate.
>
> ==== Jumbo transactons: ====
> I propose another tx type as a fallback where CoinJoin is not Combining
> big transactions with hash-only blocks to improve tps.applicable. It
> would remove the CoinJoin induced delays, while keeping transaction
> sizes big.
>
> Image: http://bcdev.net/data/jubo_transaction_description.png
>
> Transaction joiner is a service that collects transactions from clients
> and publishes them as a Jumbo transaction.
> Jumbo pubkey prevents transaction from being modified. It can only be
> accepted or rejected by the miner as a whole, which should limit
> discrimination.
>
> == Algorithm: ==
> 1) Transaction joiner sends a Jumbo pubkey hash to the client.
> 2) Client creates a transaction, includes a Jumbo pubkey hash and signs it.
> 3) Transaction joiner waits until there are enough transactions and
> releases a Jumbo transaction to the network.
> 4) A miner includes only a hash of a Jumbo transaction in a block, he
> cannot cherry-pick individual transactions from the bulk.
> 5) The network checks if every transaction inside a Jumbo transaction
> includes a Jumbo pubkey hash and if every transaction inside is valid.
>
> == Benefits: ==
> Since the block size stays the same, block propagation time also stay
> the same.
> There is no need to wait for every participant to sign the transaction.
> It's therefore more suitable for POS payments.
> No additional network overhead for a thin client compared to a standard tx.
> Backwards compatibility with current transaction system.
>
> == Problems: ==
> 1) Jumbo transactions don't mix coins. Anonymity of the network is not
> increased.
> 2) There would be an incentive to use this transaction type by default
> [compared to CoinJoin].
>
> Potential solution:
> Make Jumbo transaction size limit lower than CoinJoin. That would make
> fees for these transactions higher, thus creating an incentive to only
> use them when necessary.
>
> 3) Transaction joiner has to wait for a Jumbo transaction to be big
> enough before it gets released.
> It's not a big problem. When the network load is low, the fee required
> for a tx to be included should be lower, allowing for smaller Jumbo
> transactions. When the network load is high, it takes less time to fill
> a Jumbo transaction.
>
> ==== References: ====
> Increasing the Network Hashing Power by reducing block propagation time
> https://bitcointalk.org/index.php?topic=145066.0
>
> CoinJoin: Bitcoin privacy for the real world
> https://bitcointalk.org/index.php?topic=279249.0
>
> Bitcoin: A Peer-to-Peer Electronic Cash System
> http://bitcoin.org/bitcoin.pdf
>
> ------------------------------------------------------------------------------
> CenturyLink Cloud: The Leader in Enterprise Cloud Services.
> Learn Why More Businesses Are Choosing CenturyLink Cloud For
> Critical Workloads, Development Environments & Everything In Between.
> Get a Quote or Start a Free Trial Today.
> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development



From christophe.biocca at gmail.com  Wed Jan 22 22:04:05 2014
From: christophe.biocca at gmail.com (Christophe Biocca)
Date: Wed, 22 Jan 2014 17:04:05 -0500
Subject: [Bitcoin-development] Combining big transactions with hash-only
 blocks to improve tps.
In-Reply-To: <CAAt2M18tyVXh+ZyZ6hF=19JAPjzd9wk+K4_sNXSC6S-baNphWA@mail.gmail.com>
References: <52E032BD.4020206@bcdev.net>
	<CAAt2M18tyVXh+ZyZ6hF=19JAPjzd9wk+K4_sNXSC6S-baNphWA@mail.gmail.com>
Message-ID: <CANOOu=8OG5L1F3WPP7-oBj5Lsx_xezG7GMinrK8xXJP43R2XDQ@mail.gmail.com>

Comments:

bc:
- Ultimately, this helps with block propagation latency, but not with
the bandwidth constraints themselves, because all transactions do need
to be broadcast.
- Most of the benefits of your approach can be obtained simply by
prebroadcasting the entire merkle tree while you're working on it. You
can get even bigger gains by the miners reusing large chunks of each
other's merkle trees (which they could if they had similar transaction
selection policies). Then there's just the headers to broadcast.

Natanael:
- Most of the block's content is important though, because I don't
just want to know that the block is valid, I also want to know what
changes to make to my local copy of the UTXO. So I don't know how much
space/bandwidth you'd save. You would definitely save on signature
checking and independent validation, but that's CPU time.

On Wed, Jan 22, 2014 at 4:43 PM, Natanael <natanael.l at gmail.com> wrote:
> Couldn't we also use the type of zkSNARK's that Zerocoin adopted to
> prove that the hash-only blocks only have valid transactions in it,
> since they are small and quite efficient to verify? The trouble is
> that they're still inefficient to generate, but given powerful enough
> computers that compiles the hashes for the block and it could likely
> still be done fast enough to handle large amounts of transactions. The
> computer is likely not going to be the most expensive part anyway by a
> far margin.
>
> zkSNARK = zero-knowledge Succinct Non-interactive ARgument of Knowledge
>
> On Wed, Jan 22, 2014 at 10:06 PM, bc <bc at bcdev.net> wrote:
>> Pdf version:
>> http://bcdev.net/data/bitcoin_big_tx_with_coin_join.pdf
>>
>>
>> == Combining big transactions with hash-only blocks to improve tps. ==
>>
>> ==== Abstract: ====
>> I've heard people talk about including only hashes in a block to speed
>> up the network and also about using CoinJoin to improve privacy. I've
>> not heard anyone talk about implications of combining these two
>> techniques. I think that it would both improve network's anonymity, but
>> also improve tps by a few orders of magnitude.
>>
>> I propose two optimizations:
>> 1. Keep only hashes of transactions included in a block. Transfer all tx
>> separately.
>> 2. Use CoinJoin to merge transactions from many users for online
>> shopping and banking.
>> 3. Use Jumbo transactions as a fallback for applications where CoinJoin
>> is inappropriate.
>>
>> ==== Keeping only hashes of tx in a block: ====
>> Currently every bitcoin block includes a copy of all transactions. This
>> is redundant and unnecessary, since after the transaction gets
>> transmitted, every node learns about it in seconds.
>> By keeping only transaction hashes in block, we can keep block
>> propagation time from increasing.
>> Assuming a typical tx with one or two inputs and two outputs [typically
>> 300 bytes], current 1MiB block can contain about [assuming a block every
>> 10 minutes]:
>> 1MiB / 300 bytes = 3300tx = 5.5tps
>>
>> By keeping only hashes in a block [32 bytes per hash]:
>> 1MiB / 32 bytes = 31000tx = 50tps
>>
>> == Benefits: ==
>> This method allows to achieve more tps without increasing the block
>> propagation time, which is critical for mining decentralization.
>> It removes redundancy, since every tx has to be transmitted only once.
>> It leads to a more consistent bandwidth utilization [large transactions
>> are transmitted all the time, while blocks are kept small and easy to
>> propagate].
>> Because a block size is a constant, mining fees would not depend on the
>> size of a transaction. Obviously to limit the network flood, there
>> should be a transaction size limit.
>>
>> == Problems: ==
>> Selfish miner can keep a subset of transactions only for yourself and
>> release them only with a new block. This problem can be mitigated by
>> making nodes verify all transactions before propagating a block. The
>> incentive will then be to mine only a well-distributed transactions to
>> lower orphan rate.
>> The miner can try to sneak up invalid transaction in a block. This
>> problem is also mitigated by not accepting a block before it gets verified.
>>
>> ==== CoinJoin: ====
>> If the block size keeps only hashes, a transaction can be much bigger.
>> Since CoinJoin allows many people to send coins with one transaction,
>> the effective transaction rate can be increased considerably.
>>
>> == Example: ==
>> Let's assume the transaction size limit of 50KiB. Limit of this size
>> allows for a CoinJoin transaction between 50KiB / 300b = 170 participants.
>> So for a block of 1MiB, it would allow for 50tps *
>> 170effective_transactions/tx = 8500tps.
>>
>> == Benefits: ==
>> There would be an incentive for users to use CoinJoin by default [lower
>> tx fees per effective transaction], which would greatly increase
>> anonymity of the network.
>> Since block size stays the same, block propagation time also stays the same.
>> It doesn't require any changes to the protocol. CoinJoin transactions
>> were always supported in bitcoin.
>>
>> == Problems: ==
>> 1) CoinJoin requires collaboration between many users in real-time. It
>> means, that transaction must be distributed to every CoinJoin
>> participant, and every participant has to sign it before it can be
>> released. Therefore it induces delays, which can take some time.
>> It wouldn't be an issue with Internet banking or on-line shopping [where
>> even 10 minutes per transaction is fast enough], however even 20 seconds
>> can make the system unsuitable for POS payments.
>> Potential solution: Use bigger CoinJoin user base for online payments
>> [with smaller fees], and a smaller one for POS payments [with larger fees].
>>
>> 2) Signing a CoinJoin transaction requires to transfer a whole
>> transaction for a user to sign.
>> This can sometimes take up to a few minutes on a very slow networks.
>>
>> 3) CoinJoin transactions are limited. They are good enough for money
>> transfer, but for more advanced appliances CoinJoin might be inadequate.
>>
>> ==== Jumbo transactons: ====
>> I propose another tx type as a fallback where CoinJoin is not Combining
>> big transactions with hash-only blocks to improve tps.applicable. It
>> would remove the CoinJoin induced delays, while keeping transaction
>> sizes big.
>>
>> Image: http://bcdev.net/data/jubo_transaction_description.png
>>
>> Transaction joiner is a service that collects transactions from clients
>> and publishes them as a Jumbo transaction.
>> Jumbo pubkey prevents transaction from being modified. It can only be
>> accepted or rejected by the miner as a whole, which should limit
>> discrimination.
>>
>> == Algorithm: ==
>> 1) Transaction joiner sends a Jumbo pubkey hash to the client.
>> 2) Client creates a transaction, includes a Jumbo pubkey hash and signs it.
>> 3) Transaction joiner waits until there are enough transactions and
>> releases a Jumbo transaction to the network.
>> 4) A miner includes only a hash of a Jumbo transaction in a block, he
>> cannot cherry-pick individual transactions from the bulk.
>> 5) The network checks if every transaction inside a Jumbo transaction
>> includes a Jumbo pubkey hash and if every transaction inside is valid.
>>
>> == Benefits: ==
>> Since the block size stays the same, block propagation time also stay
>> the same.
>> There is no need to wait for every participant to sign the transaction.
>> It's therefore more suitable for POS payments.
>> No additional network overhead for a thin client compared to a standard tx.
>> Backwards compatibility with current transaction system.
>>
>> == Problems: ==
>> 1) Jumbo transactions don't mix coins. Anonymity of the network is not
>> increased.
>> 2) There would be an incentive to use this transaction type by default
>> [compared to CoinJoin].
>>
>> Potential solution:
>> Make Jumbo transaction size limit lower than CoinJoin. That would make
>> fees for these transactions higher, thus creating an incentive to only
>> use them when necessary.
>>
>> 3) Transaction joiner has to wait for a Jumbo transaction to be big
>> enough before it gets released.
>> It's not a big problem. When the network load is low, the fee required
>> for a tx to be included should be lower, allowing for smaller Jumbo
>> transactions. When the network load is high, it takes less time to fill
>> a Jumbo transaction.
>>
>> ==== References: ====
>> Increasing the Network Hashing Power by reducing block propagation time
>> https://bitcointalk.org/index.php?topic=145066.0
>>
>> CoinJoin: Bitcoin privacy for the real world
>> https://bitcointalk.org/index.php?topic=279249.0
>>
>> Bitcoin: A Peer-to-Peer Electronic Cash System
>> http://bitcoin.org/bitcoin.pdf
>>
>> ------------------------------------------------------------------------------
>> CenturyLink Cloud: The Leader in Enterprise Cloud Services.
>> Learn Why More Businesses Are Choosing CenturyLink Cloud For
>> Critical Workloads, Development Environments & Everything In Between.
>> Get a Quote or Start a Free Trial Today.
>> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
> ------------------------------------------------------------------------------
> CenturyLink Cloud: The Leader in Enterprise Cloud Services.
> Learn Why More Businesses Are Choosing CenturyLink Cloud For
> Critical Workloads, Development Environments & Everything In Between.
> Get a Quote or Start a Free Trial Today.
> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development



From jtimon at monetize.io  Wed Jan 22 22:10:16 2014
From: jtimon at monetize.io (=?ISO-8859-1?Q?Jorge_Tim=F3n?=)
Date: Wed, 22 Jan 2014 23:10:16 +0100
Subject: [Bitcoin-development] Combining big transactions with hash-only
 blocks to improve tps.
In-Reply-To: <CANOOu=8OG5L1F3WPP7-oBj5Lsx_xezG7GMinrK8xXJP43R2XDQ@mail.gmail.com>
References: <52E032BD.4020206@bcdev.net>
	<CAAt2M18tyVXh+ZyZ6hF=19JAPjzd9wk+K4_sNXSC6S-baNphWA@mail.gmail.com>
	<CANOOu=8OG5L1F3WPP7-oBj5Lsx_xezG7GMinrK8xXJP43R2XDQ@mail.gmail.com>
Message-ID: <CAC1+kJM92PrQR+Pvb=n3Ts_OMFew1N1+5uqYjYKG_+Kwwr0wig@mail.gmail.com>

Maybe I'm missing something.
How do miners validate blocks if they only receive the hashes of the
transactions?
Will they mine on top of a block when they don't know if it's valid?


On 1/22/14, Christophe Biocca <christophe.biocca at gmail.com> wrote:
> Comments:
>
> bc:
> - Ultimately, this helps with block propagation latency, but not with
> the bandwidth constraints themselves, because all transactions do need
> to be broadcast.
> - Most of the benefits of your approach can be obtained simply by
> prebroadcasting the entire merkle tree while you're working on it. You
> can get even bigger gains by the miners reusing large chunks of each
> other's merkle trees (which they could if they had similar transaction
> selection policies). Then there's just the headers to broadcast.
>
> Natanael:
> - Most of the block's content is important though, because I don't
> just want to know that the block is valid, I also want to know what
> changes to make to my local copy of the UTXO. So I don't know how much
> space/bandwidth you'd save. You would definitely save on signature
> checking and independent validation, but that's CPU time.
>
> On Wed, Jan 22, 2014 at 4:43 PM, Natanael <natanael.l at gmail.com> wrote:
>> Couldn't we also use the type of zkSNARK's that Zerocoin adopted to
>> prove that the hash-only blocks only have valid transactions in it,
>> since they are small and quite efficient to verify? The trouble is
>> that they're still inefficient to generate, but given powerful enough
>> computers that compiles the hashes for the block and it could likely
>> still be done fast enough to handle large amounts of transactions. The
>> computer is likely not going to be the most expensive part anyway by a
>> far margin.
>>
>> zkSNARK = zero-knowledge Succinct Non-interactive ARgument of Knowledge
>>
>> On Wed, Jan 22, 2014 at 10:06 PM, bc <bc at bcdev.net> wrote:
>>> Pdf version:
>>> http://bcdev.net/data/bitcoin_big_tx_with_coin_join.pdf
>>>
>>>
>>> == Combining big transactions with hash-only blocks to improve tps. ==
>>>
>>> ==== Abstract: ====
>>> I've heard people talk about including only hashes in a block to speed
>>> up the network and also about using CoinJoin to improve privacy. I've
>>> not heard anyone talk about implications of combining these two
>>> techniques. I think that it would both improve network's anonymity, but
>>> also improve tps by a few orders of magnitude.
>>>
>>> I propose two optimizations:
>>> 1. Keep only hashes of transactions included in a block. Transfer all tx
>>> separately.
>>> 2. Use CoinJoin to merge transactions from many users for online
>>> shopping and banking.
>>> 3. Use Jumbo transactions as a fallback for applications where CoinJoin
>>> is inappropriate.
>>>
>>> ==== Keeping only hashes of tx in a block: ====
>>> Currently every bitcoin block includes a copy of all transactions. This
>>> is redundant and unnecessary, since after the transaction gets
>>> transmitted, every node learns about it in seconds.
>>> By keeping only transaction hashes in block, we can keep block
>>> propagation time from increasing.
>>> Assuming a typical tx with one or two inputs and two outputs [typically
>>> 300 bytes], current 1MiB block can contain about [assuming a block every
>>> 10 minutes]:
>>> 1MiB / 300 bytes = 3300tx = 5.5tps
>>>
>>> By keeping only hashes in a block [32 bytes per hash]:
>>> 1MiB / 32 bytes = 31000tx = 50tps
>>>
>>> == Benefits: ==
>>> This method allows to achieve more tps without increasing the block
>>> propagation time, which is critical for mining decentralization.
>>> It removes redundancy, since every tx has to be transmitted only once.
>>> It leads to a more consistent bandwidth utilization [large transactions
>>> are transmitted all the time, while blocks are kept small and easy to
>>> propagate].
>>> Because a block size is a constant, mining fees would not depend on the
>>> size of a transaction. Obviously to limit the network flood, there
>>> should be a transaction size limit.
>>>
>>> == Problems: ==
>>> Selfish miner can keep a subset of transactions only for yourself and
>>> release them only with a new block. This problem can be mitigated by
>>> making nodes verify all transactions before propagating a block. The
>>> incentive will then be to mine only a well-distributed transactions to
>>> lower orphan rate.
>>> The miner can try to sneak up invalid transaction in a block. This
>>> problem is also mitigated by not accepting a block before it gets
>>> verified.
>>>
>>> ==== CoinJoin: ====
>>> If the block size keeps only hashes, a transaction can be much bigger.
>>> Since CoinJoin allows many people to send coins with one transaction,
>>> the effective transaction rate can be increased considerably.
>>>
>>> == Example: ==
>>> Let's assume the transaction size limit of 50KiB. Limit of this size
>>> allows for a CoinJoin transaction between 50KiB / 300b = 170
>>> participants.
>>> So for a block of 1MiB, it would allow for 50tps *
>>> 170effective_transactions/tx = 8500tps.
>>>
>>> == Benefits: ==
>>> There would be an incentive for users to use CoinJoin by default [lower
>>> tx fees per effective transaction], which would greatly increase
>>> anonymity of the network.
>>> Since block size stays the same, block propagation time also stays the
>>> same.
>>> It doesn't require any changes to the protocol. CoinJoin transactions
>>> were always supported in bitcoin.
>>>
>>> == Problems: ==
>>> 1) CoinJoin requires collaboration between many users in real-time. It
>>> means, that transaction must be distributed to every CoinJoin
>>> participant, and every participant has to sign it before it can be
>>> released. Therefore it induces delays, which can take some time.
>>> It wouldn't be an issue with Internet banking or on-line shopping [where
>>> even 10 minutes per transaction is fast enough], however even 20 seconds
>>> can make the system unsuitable for POS payments.
>>> Potential solution: Use bigger CoinJoin user base for online payments
>>> [with smaller fees], and a smaller one for POS payments [with larger
>>> fees].
>>>
>>> 2) Signing a CoinJoin transaction requires to transfer a whole
>>> transaction for a user to sign.
>>> This can sometimes take up to a few minutes on a very slow networks.
>>>
>>> 3) CoinJoin transactions are limited. They are good enough for money
>>> transfer, but for more advanced appliances CoinJoin might be inadequate.
>>>
>>> ==== Jumbo transactons: ====
>>> I propose another tx type as a fallback where CoinJoin is not Combining
>>> big transactions with hash-only blocks to improve tps.applicable. It
>>> would remove the CoinJoin induced delays, while keeping transaction
>>> sizes big.
>>>
>>> Image: http://bcdev.net/data/jubo_transaction_description.png
>>>
>>> Transaction joiner is a service that collects transactions from clients
>>> and publishes them as a Jumbo transaction.
>>> Jumbo pubkey prevents transaction from being modified. It can only be
>>> accepted or rejected by the miner as a whole, which should limit
>>> discrimination.
>>>
>>> == Algorithm: ==
>>> 1) Transaction joiner sends a Jumbo pubkey hash to the client.
>>> 2) Client creates a transaction, includes a Jumbo pubkey hash and signs
>>> it.
>>> 3) Transaction joiner waits until there are enough transactions and
>>> releases a Jumbo transaction to the network.
>>> 4) A miner includes only a hash of a Jumbo transaction in a block, he
>>> cannot cherry-pick individual transactions from the bulk.
>>> 5) The network checks if every transaction inside a Jumbo transaction
>>> includes a Jumbo pubkey hash and if every transaction inside is valid.
>>>
>>> == Benefits: ==
>>> Since the block size stays the same, block propagation time also stay
>>> the same.
>>> There is no need to wait for every participant to sign the transaction.
>>> It's therefore more suitable for POS payments.
>>> No additional network overhead for a thin client compared to a standard
>>> tx.
>>> Backwards compatibility with current transaction system.
>>>
>>> == Problems: ==
>>> 1) Jumbo transactions don't mix coins. Anonymity of the network is not
>>> increased.
>>> 2) There would be an incentive to use this transaction type by default
>>> [compared to CoinJoin].
>>>
>>> Potential solution:
>>> Make Jumbo transaction size limit lower than CoinJoin. That would make
>>> fees for these transactions higher, thus creating an incentive to only
>>> use them when necessary.
>>>
>>> 3) Transaction joiner has to wait for a Jumbo transaction to be big
>>> enough before it gets released.
>>> It's not a big problem. When the network load is low, the fee required
>>> for a tx to be included should be lower, allowing for smaller Jumbo
>>> transactions. When the network load is high, it takes less time to fill
>>> a Jumbo transaction.
>>>
>>> ==== References: ====
>>> Increasing the Network Hashing Power by reducing block propagation time
>>> https://bitcointalk.org/index.php?topic=145066.0
>>>
>>> CoinJoin: Bitcoin privacy for the real world
>>> https://bitcointalk.org/index.php?topic=279249.0
>>>
>>> Bitcoin: A Peer-to-Peer Electronic Cash System
>>> http://bitcoin.org/bitcoin.pdf
>>>
>>> ------------------------------------------------------------------------------
>>> CenturyLink Cloud: The Leader in Enterprise Cloud Services.
>>> Learn Why More Businesses Are Choosing CenturyLink Cloud For
>>> Critical Workloads, Development Environments & Everything In Between.
>>> Get a Quote or Start a Free Trial Today.
>>> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk
>>> _______________________________________________
>>> Bitcoin-development mailing list
>>> Bitcoin-development at lists.sourceforge.net
>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>
>> ------------------------------------------------------------------------------
>> CenturyLink Cloud: The Leader in Enterprise Cloud Services.
>> Learn Why More Businesses Are Choosing CenturyLink Cloud For
>> Critical Workloads, Development Environments & Everything In Between.
>> Get a Quote or Start a Free Trial Today.
>> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
> ------------------------------------------------------------------------------
> CenturyLink Cloud: The Leader in Enterprise Cloud Services.
> Learn Why More Businesses Are Choosing CenturyLink Cloud For
> Critical Workloads, Development Environments & Everything In Between.
> Get a Quote or Start a Free Trial Today.
> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>


-- 
Jorge Tim?n

http://freico.in/



From christophe.biocca at gmail.com  Wed Jan 22 22:20:58 2014
From: christophe.biocca at gmail.com (Christophe Biocca)
Date: Wed, 22 Jan 2014 17:20:58 -0500
Subject: [Bitcoin-development] Combining big transactions with hash-only
 blocks to improve tps.
In-Reply-To: <CAC1+kJM92PrQR+Pvb=n3Ts_OMFew1N1+5uqYjYKG_+Kwwr0wig@mail.gmail.com>
References: <52E032BD.4020206@bcdev.net>
	<CAAt2M18tyVXh+ZyZ6hF=19JAPjzd9wk+K4_sNXSC6S-baNphWA@mail.gmail.com>
	<CANOOu=8OG5L1F3WPP7-oBj5Lsx_xezG7GMinrK8xXJP43R2XDQ@mail.gmail.com>
	<CAC1+kJM92PrQR+Pvb=n3Ts_OMFew1N1+5uqYjYKG_+Kwwr0wig@mail.gmail.com>
Message-ID: <CANOOu=90Z3nq4j8OHm-QbPsqfpsNXgMqV71bzPre=zsA+4hPeA@mail.gmail.com>

Transactions are already sitting in everyone's (or nearly everyone's)
mempools (because they get broadcast to get to a miner in the first
place). If you don't have it (because you just connected to the
network after stopping for a bit) you can just call getdata against
your peers to get a copy.

Not rebroadcasting the transactions as part of the blocks is already
in the cards because it's such an easy way to cut network traffic
nearly in half.

On Wed, Jan 22, 2014 at 5:10 PM, Jorge Tim?n <jtimon at monetize.io> wrote:
> Maybe I'm missing something.
> How do miners validate blocks if they only receive the hashes of the
> transactions?
> Will they mine on top of a block when they don't know if it's valid?
>
>
> On 1/22/14, Christophe Biocca <christophe.biocca at gmail.com> wrote:
>> Comments:
>>
>> bc:
>> - Ultimately, this helps with block propagation latency, but not with
>> the bandwidth constraints themselves, because all transactions do need
>> to be broadcast.
>> - Most of the benefits of your approach can be obtained simply by
>> prebroadcasting the entire merkle tree while you're working on it. You
>> can get even bigger gains by the miners reusing large chunks of each
>> other's merkle trees (which they could if they had similar transaction
>> selection policies). Then there's just the headers to broadcast.
>>
>> Natanael:
>> - Most of the block's content is important though, because I don't
>> just want to know that the block is valid, I also want to know what
>> changes to make to my local copy of the UTXO. So I don't know how much
>> space/bandwidth you'd save. You would definitely save on signature
>> checking and independent validation, but that's CPU time.
>>
>> On Wed, Jan 22, 2014 at 4:43 PM, Natanael <natanael.l at gmail.com> wrote:
>>> Couldn't we also use the type of zkSNARK's that Zerocoin adopted to
>>> prove that the hash-only blocks only have valid transactions in it,
>>> since they are small and quite efficient to verify? The trouble is
>>> that they're still inefficient to generate, but given powerful enough
>>> computers that compiles the hashes for the block and it could likely
>>> still be done fast enough to handle large amounts of transactions. The
>>> computer is likely not going to be the most expensive part anyway by a
>>> far margin.
>>>
>>> zkSNARK = zero-knowledge Succinct Non-interactive ARgument of Knowledge
>>>
>>> On Wed, Jan 22, 2014 at 10:06 PM, bc <bc at bcdev.net> wrote:
>>>> Pdf version:
>>>> http://bcdev.net/data/bitcoin_big_tx_with_coin_join.pdf
>>>>
>>>>
>>>> == Combining big transactions with hash-only blocks to improve tps. ==
>>>>
>>>> ==== Abstract: ====
>>>> I've heard people talk about including only hashes in a block to speed
>>>> up the network and also about using CoinJoin to improve privacy. I've
>>>> not heard anyone talk about implications of combining these two
>>>> techniques. I think that it would both improve network's anonymity, but
>>>> also improve tps by a few orders of magnitude.
>>>>
>>>> I propose two optimizations:
>>>> 1. Keep only hashes of transactions included in a block. Transfer all tx
>>>> separately.
>>>> 2. Use CoinJoin to merge transactions from many users for online
>>>> shopping and banking.
>>>> 3. Use Jumbo transactions as a fallback for applications where CoinJoin
>>>> is inappropriate.
>>>>
>>>> ==== Keeping only hashes of tx in a block: ====
>>>> Currently every bitcoin block includes a copy of all transactions. This
>>>> is redundant and unnecessary, since after the transaction gets
>>>> transmitted, every node learns about it in seconds.
>>>> By keeping only transaction hashes in block, we can keep block
>>>> propagation time from increasing.
>>>> Assuming a typical tx with one or two inputs and two outputs [typically
>>>> 300 bytes], current 1MiB block can contain about [assuming a block every
>>>> 10 minutes]:
>>>> 1MiB / 300 bytes = 3300tx = 5.5tps
>>>>
>>>> By keeping only hashes in a block [32 bytes per hash]:
>>>> 1MiB / 32 bytes = 31000tx = 50tps
>>>>
>>>> == Benefits: ==
>>>> This method allows to achieve more tps without increasing the block
>>>> propagation time, which is critical for mining decentralization.
>>>> It removes redundancy, since every tx has to be transmitted only once.
>>>> It leads to a more consistent bandwidth utilization [large transactions
>>>> are transmitted all the time, while blocks are kept small and easy to
>>>> propagate].
>>>> Because a block size is a constant, mining fees would not depend on the
>>>> size of a transaction. Obviously to limit the network flood, there
>>>> should be a transaction size limit.
>>>>
>>>> == Problems: ==
>>>> Selfish miner can keep a subset of transactions only for yourself and
>>>> release them only with a new block. This problem can be mitigated by
>>>> making nodes verify all transactions before propagating a block. The
>>>> incentive will then be to mine only a well-distributed transactions to
>>>> lower orphan rate.
>>>> The miner can try to sneak up invalid transaction in a block. This
>>>> problem is also mitigated by not accepting a block before it gets
>>>> verified.
>>>>
>>>> ==== CoinJoin: ====
>>>> If the block size keeps only hashes, a transaction can be much bigger.
>>>> Since CoinJoin allows many people to send coins with one transaction,
>>>> the effective transaction rate can be increased considerably.
>>>>
>>>> == Example: ==
>>>> Let's assume the transaction size limit of 50KiB. Limit of this size
>>>> allows for a CoinJoin transaction between 50KiB / 300b = 170
>>>> participants.
>>>> So for a block of 1MiB, it would allow for 50tps *
>>>> 170effective_transactions/tx = 8500tps.
>>>>
>>>> == Benefits: ==
>>>> There would be an incentive for users to use CoinJoin by default [lower
>>>> tx fees per effective transaction], which would greatly increase
>>>> anonymity of the network.
>>>> Since block size stays the same, block propagation time also stays the
>>>> same.
>>>> It doesn't require any changes to the protocol. CoinJoin transactions
>>>> were always supported in bitcoin.
>>>>
>>>> == Problems: ==
>>>> 1) CoinJoin requires collaboration between many users in real-time. It
>>>> means, that transaction must be distributed to every CoinJoin
>>>> participant, and every participant has to sign it before it can be
>>>> released. Therefore it induces delays, which can take some time.
>>>> It wouldn't be an issue with Internet banking or on-line shopping [where
>>>> even 10 minutes per transaction is fast enough], however even 20 seconds
>>>> can make the system unsuitable for POS payments.
>>>> Potential solution: Use bigger CoinJoin user base for online payments
>>>> [with smaller fees], and a smaller one for POS payments [with larger
>>>> fees].
>>>>
>>>> 2) Signing a CoinJoin transaction requires to transfer a whole
>>>> transaction for a user to sign.
>>>> This can sometimes take up to a few minutes on a very slow networks.
>>>>
>>>> 3) CoinJoin transactions are limited. They are good enough for money
>>>> transfer, but for more advanced appliances CoinJoin might be inadequate.
>>>>
>>>> ==== Jumbo transactons: ====
>>>> I propose another tx type as a fallback where CoinJoin is not Combining
>>>> big transactions with hash-only blocks to improve tps.applicable. It
>>>> would remove the CoinJoin induced delays, while keeping transaction
>>>> sizes big.
>>>>
>>>> Image: http://bcdev.net/data/jubo_transaction_description.png
>>>>
>>>> Transaction joiner is a service that collects transactions from clients
>>>> and publishes them as a Jumbo transaction.
>>>> Jumbo pubkey prevents transaction from being modified. It can only be
>>>> accepted or rejected by the miner as a whole, which should limit
>>>> discrimination.
>>>>
>>>> == Algorithm: ==
>>>> 1) Transaction joiner sends a Jumbo pubkey hash to the client.
>>>> 2) Client creates a transaction, includes a Jumbo pubkey hash and signs
>>>> it.
>>>> 3) Transaction joiner waits until there are enough transactions and
>>>> releases a Jumbo transaction to the network.
>>>> 4) A miner includes only a hash of a Jumbo transaction in a block, he
>>>> cannot cherry-pick individual transactions from the bulk.
>>>> 5) The network checks if every transaction inside a Jumbo transaction
>>>> includes a Jumbo pubkey hash and if every transaction inside is valid.
>>>>
>>>> == Benefits: ==
>>>> Since the block size stays the same, block propagation time also stay
>>>> the same.
>>>> There is no need to wait for every participant to sign the transaction.
>>>> It's therefore more suitable for POS payments.
>>>> No additional network overhead for a thin client compared to a standard
>>>> tx.
>>>> Backwards compatibility with current transaction system.
>>>>
>>>> == Problems: ==
>>>> 1) Jumbo transactions don't mix coins. Anonymity of the network is not
>>>> increased.
>>>> 2) There would be an incentive to use this transaction type by default
>>>> [compared to CoinJoin].
>>>>
>>>> Potential solution:
>>>> Make Jumbo transaction size limit lower than CoinJoin. That would make
>>>> fees for these transactions higher, thus creating an incentive to only
>>>> use them when necessary.
>>>>
>>>> 3) Transaction joiner has to wait for a Jumbo transaction to be big
>>>> enough before it gets released.
>>>> It's not a big problem. When the network load is low, the fee required
>>>> for a tx to be included should be lower, allowing for smaller Jumbo
>>>> transactions. When the network load is high, it takes less time to fill
>>>> a Jumbo transaction.
>>>>
>>>> ==== References: ====
>>>> Increasing the Network Hashing Power by reducing block propagation time
>>>> https://bitcointalk.org/index.php?topic=145066.0
>>>>
>>>> CoinJoin: Bitcoin privacy for the real world
>>>> https://bitcointalk.org/index.php?topic=279249.0
>>>>
>>>> Bitcoin: A Peer-to-Peer Electronic Cash System
>>>> http://bitcoin.org/bitcoin.pdf
>>>>
>>>> ------------------------------------------------------------------------------
>>>> CenturyLink Cloud: The Leader in Enterprise Cloud Services.
>>>> Learn Why More Businesses Are Choosing CenturyLink Cloud For
>>>> Critical Workloads, Development Environments & Everything In Between.
>>>> Get a Quote or Start a Free Trial Today.
>>>> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk
>>>> _______________________________________________
>>>> Bitcoin-development mailing list
>>>> Bitcoin-development at lists.sourceforge.net
>>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>>
>>> ------------------------------------------------------------------------------
>>> CenturyLink Cloud: The Leader in Enterprise Cloud Services.
>>> Learn Why More Businesses Are Choosing CenturyLink Cloud For
>>> Critical Workloads, Development Environments & Everything In Between.
>>> Get a Quote or Start a Free Trial Today.
>>> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk
>>> _______________________________________________
>>> Bitcoin-development mailing list
>>> Bitcoin-development at lists.sourceforge.net
>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>
>> ------------------------------------------------------------------------------
>> CenturyLink Cloud: The Leader in Enterprise Cloud Services.
>> Learn Why More Businesses Are Choosing CenturyLink Cloud For
>> Critical Workloads, Development Environments & Everything In Between.
>> Get a Quote or Start a Free Trial Today.
>> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>
>
>
> --
> Jorge Tim?n
>
> http://freico.in/



From bc at bcdev.net  Wed Jan 22 22:20:54 2014
From: bc at bcdev.net (bc)
Date: Wed, 22 Jan 2014 23:20:54 +0100
Subject: [Bitcoin-development] Combining big transactions with hash-only
 blocks to improve tps.
In-Reply-To: <CAC1+kJM92PrQR+Pvb=n3Ts_OMFew1N1+5uqYjYKG_+Kwwr0wig@mail.gmail.com>
References: <52E032BD.4020206@bcdev.net>	<CAAt2M18tyVXh+ZyZ6hF=19JAPjzd9wk+K4_sNXSC6S-baNphWA@mail.gmail.com>	<CANOOu=8OG5L1F3WPP7-oBj5Lsx_xezG7GMinrK8xXJP43R2XDQ@mail.gmail.com>
	<CAC1+kJM92PrQR+Pvb=n3Ts_OMFew1N1+5uqYjYKG_+Kwwr0wig@mail.gmail.com>
Message-ID: <52E04446.4020106@bcdev.net>

Jorge Tim?n:
The node would need to first verify a block before mining on top of it.
Basically a receiver would ask a sender for missing transactions if he 
doesn't know them already before propagating or mining the block.

Christophe Biocca:
You're right, my idea doesn't offer any real advantage over 
prebroadcasting of the tree and including only it's header in a block.

Thanks,
Eric


On 22.01.2014 23:10, Jorge Tim?n wrote:
> Maybe I'm missing something.
> How do miners validate blocks if they only receive the hashes of the
> transactions?
> Will they mine on top of a block when they don't know if it's valid?
>
>
> On 1/22/14, Christophe Biocca <christophe.biocca at gmail.com> wrote:
>> Comments:
>>
>> bc:
>> - Ultimately, this helps with block propagation latency, but not with
>> the bandwidth constraints themselves, because all transactions do need
>> to be broadcast.
>> - Most of the benefits of your approach can be obtained simply by
>> prebroadcasting the entire merkle tree while you're working on it. You
>> can get even bigger gains by the miners reusing large chunks of each
>> other's merkle trees (which they could if they had similar transaction
>> selection policies). Then there's just the headers to broadcast.
>>
>> Natanael:
>> - Most of the block's content is important though, because I don't
>> just want to know that the block is valid, I also want to know what
>> changes to make to my local copy of the UTXO. So I don't know how much
>> space/bandwidth you'd save. You would definitely save on signature
>> checking and independent validation, but that's CPU time.
>>
>> On Wed, Jan 22, 2014 at 4:43 PM, Natanael <natanael.l at gmail.com> wrote:
>>> Couldn't we also use the type of zkSNARK's that Zerocoin adopted to
>>> prove that the hash-only blocks only have valid transactions in it,
>>> since they are small and quite efficient to verify? The trouble is
>>> that they're still inefficient to generate, but given powerful enough
>>> computers that compiles the hashes for the block and it could likely
>>> still be done fast enough to handle large amounts of transactions. The
>>> computer is likely not going to be the most expensive part anyway by a
>>> far margin.
>>>
>>> zkSNARK = zero-knowledge Succinct Non-interactive ARgument of Knowledge
>>>
>>> On Wed, Jan 22, 2014 at 10:06 PM, bc <bc at bcdev.net> wrote:
>>>> Pdf version:
>>>> http://bcdev.net/data/bitcoin_big_tx_with_coin_join.pdf
>>>>
>>>>
>>>> == Combining big transactions with hash-only blocks to improve tps. ==
>>>>
>>>> ==== Abstract: ====
>>>> I've heard people talk about including only hashes in a block to speed
>>>> up the network and also about using CoinJoin to improve privacy. I've
>>>> not heard anyone talk about implications of combining these two
>>>> techniques. I think that it would both improve network's anonymity, but
>>>> also improve tps by a few orders of magnitude.
>>>>
>>>> I propose two optimizations:
>>>> 1. Keep only hashes of transactions included in a block. Transfer all tx
>>>> separately.
>>>> 2. Use CoinJoin to merge transactions from many users for online
>>>> shopping and banking.
>>>> 3. Use Jumbo transactions as a fallback for applications where CoinJoin
>>>> is inappropriate.
>>>>
>>>> ==== Keeping only hashes of tx in a block: ====
>>>> Currently every bitcoin block includes a copy of all transactions. This
>>>> is redundant and unnecessary, since after the transaction gets
>>>> transmitted, every node learns about it in seconds.
>>>> By keeping only transaction hashes in block, we can keep block
>>>> propagation time from increasing.
>>>> Assuming a typical tx with one or two inputs and two outputs [typically
>>>> 300 bytes], current 1MiB block can contain about [assuming a block every
>>>> 10 minutes]:
>>>> 1MiB / 300 bytes = 3300tx = 5.5tps
>>>>
>>>> By keeping only hashes in a block [32 bytes per hash]:
>>>> 1MiB / 32 bytes = 31000tx = 50tps
>>>>
>>>> == Benefits: ==
>>>> This method allows to achieve more tps without increasing the block
>>>> propagation time, which is critical for mining decentralization.
>>>> It removes redundancy, since every tx has to be transmitted only once.
>>>> It leads to a more consistent bandwidth utilization [large transactions
>>>> are transmitted all the time, while blocks are kept small and easy to
>>>> propagate].
>>>> Because a block size is a constant, mining fees would not depend on the
>>>> size of a transaction. Obviously to limit the network flood, there
>>>> should be a transaction size limit.
>>>>
>>>> == Problems: ==
>>>> Selfish miner can keep a subset of transactions only for yourself and
>>>> release them only with a new block. This problem can be mitigated by
>>>> making nodes verify all transactions before propagating a block. The
>>>> incentive will then be to mine only a well-distributed transactions to
>>>> lower orphan rate.
>>>> The miner can try to sneak up invalid transaction in a block. This
>>>> problem is also mitigated by not accepting a block before it gets
>>>> verified.
>>>>
>>>> ==== CoinJoin: ====
>>>> If the block size keeps only hashes, a transaction can be much bigger.
>>>> Since CoinJoin allows many people to send coins with one transaction,
>>>> the effective transaction rate can be increased considerably.
>>>>
>>>> == Example: ==
>>>> Let's assume the transaction size limit of 50KiB. Limit of this size
>>>> allows for a CoinJoin transaction between 50KiB / 300b = 170
>>>> participants.
>>>> So for a block of 1MiB, it would allow for 50tps *
>>>> 170effective_transactions/tx = 8500tps.
>>>>
>>>> == Benefits: ==
>>>> There would be an incentive for users to use CoinJoin by default [lower
>>>> tx fees per effective transaction], which would greatly increase
>>>> anonymity of the network.
>>>> Since block size stays the same, block propagation time also stays the
>>>> same.
>>>> It doesn't require any changes to the protocol. CoinJoin transactions
>>>> were always supported in bitcoin.
>>>>
>>>> == Problems: ==
>>>> 1) CoinJoin requires collaboration between many users in real-time. It
>>>> means, that transaction must be distributed to every CoinJoin
>>>> participant, and every participant has to sign it before it can be
>>>> released. Therefore it induces delays, which can take some time.
>>>> It wouldn't be an issue with Internet banking or on-line shopping [where
>>>> even 10 minutes per transaction is fast enough], however even 20 seconds
>>>> can make the system unsuitable for POS payments.
>>>> Potential solution: Use bigger CoinJoin user base for online payments
>>>> [with smaller fees], and a smaller one for POS payments [with larger
>>>> fees].
>>>>
>>>> 2) Signing a CoinJoin transaction requires to transfer a whole
>>>> transaction for a user to sign.
>>>> This can sometimes take up to a few minutes on a very slow networks.
>>>>
>>>> 3) CoinJoin transactions are limited. They are good enough for money
>>>> transfer, but for more advanced appliances CoinJoin might be inadequate.
>>>>
>>>> ==== Jumbo transactons: ====
>>>> I propose another tx type as a fallback where CoinJoin is not Combining
>>>> big transactions with hash-only blocks to improve tps.applicable. It
>>>> would remove the CoinJoin induced delays, while keeping transaction
>>>> sizes big.
>>>>
>>>> Image: http://bcdev.net/data/jubo_transaction_description.png
>>>>
>>>> Transaction joiner is a service that collects transactions from clients
>>>> and publishes them as a Jumbo transaction.
>>>> Jumbo pubkey prevents transaction from being modified. It can only be
>>>> accepted or rejected by the miner as a whole, which should limit
>>>> discrimination.
>>>>
>>>> == Algorithm: ==
>>>> 1) Transaction joiner sends a Jumbo pubkey hash to the client.
>>>> 2) Client creates a transaction, includes a Jumbo pubkey hash and signs
>>>> it.
>>>> 3) Transaction joiner waits until there are enough transactions and
>>>> releases a Jumbo transaction to the network.
>>>> 4) A miner includes only a hash of a Jumbo transaction in a block, he
>>>> cannot cherry-pick individual transactions from the bulk.
>>>> 5) The network checks if every transaction inside a Jumbo transaction
>>>> includes a Jumbo pubkey hash and if every transaction inside is valid.
>>>>
>>>> == Benefits: ==
>>>> Since the block size stays the same, block propagation time also stay
>>>> the same.
>>>> There is no need to wait for every participant to sign the transaction.
>>>> It's therefore more suitable for POS payments.
>>>> No additional network overhead for a thin client compared to a standard
>>>> tx.
>>>> Backwards compatibility with current transaction system.
>>>>
>>>> == Problems: ==
>>>> 1) Jumbo transactions don't mix coins. Anonymity of the network is not
>>>> increased.
>>>> 2) There would be an incentive to use this transaction type by default
>>>> [compared to CoinJoin].
>>>>
>>>> Potential solution:
>>>> Make Jumbo transaction size limit lower than CoinJoin. That would make
>>>> fees for these transactions higher, thus creating an incentive to only
>>>> use them when necessary.
>>>>
>>>> 3) Transaction joiner has to wait for a Jumbo transaction to be big
>>>> enough before it gets released.
>>>> It's not a big problem. When the network load is low, the fee required
>>>> for a tx to be included should be lower, allowing for smaller Jumbo
>>>> transactions. When the network load is high, it takes less time to fill
>>>> a Jumbo transaction.
>>>>
>>>> ==== References: ====
>>>> Increasing the Network Hashing Power by reducing block propagation time
>>>> https://bitcointalk.org/index.php?topic=145066.0
>>>>
>>>> CoinJoin: Bitcoin privacy for the real world
>>>> https://bitcointalk.org/index.php?topic=279249.0
>>>>
>>>> Bitcoin: A Peer-to-Peer Electronic Cash System
>>>> http://bitcoin.org/bitcoin.pdf
>>>>
>>>> ------------------------------------------------------------------------------
>>>> CenturyLink Cloud: The Leader in Enterprise Cloud Services.
>>>> Learn Why More Businesses Are Choosing CenturyLink Cloud For
>>>> Critical Workloads, Development Environments & Everything In Between.
>>>> Get a Quote or Start a Free Trial Today.
>>>> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk
>>>> _______________________________________________
>>>> Bitcoin-development mailing list
>>>> Bitcoin-development at lists.sourceforge.net
>>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>>
>>> ------------------------------------------------------------------------------
>>> CenturyLink Cloud: The Leader in Enterprise Cloud Services.
>>> Learn Why More Businesses Are Choosing CenturyLink Cloud For
>>> Critical Workloads, Development Environments & Everything In Between.
>>> Get a Quote or Start a Free Trial Today.
>>> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk
>>> _______________________________________________
>>> Bitcoin-development mailing list
>>> Bitcoin-development at lists.sourceforge.net
>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>
>> ------------------------------------------------------------------------------
>> CenturyLink Cloud: The Leader in Enterprise Cloud Services.
>> Learn Why More Businesses Are Choosing CenturyLink Cloud For
>> Critical Workloads, Development Environments & Everything In Between.
>> Get a Quote or Start a Free Trial Today.
>> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>
>
>



From laanwj at gmail.com  Thu Jan 23 11:10:34 2014
From: laanwj at gmail.com (Wladimir)
Date: Thu, 23 Jan 2014 12:10:34 +0100
Subject: [Bitcoin-development] Bitcoin Core 0.9rc1 release schedule
In-Reply-To: <CA+s+GJDFq0P+cgAVL9N1ADT7PFB4eMSPnoSR05wPOB5KRL-C+g@mail.gmail.com>
References: <CA+s+GJBo7iUEJTfJw2e6qcDmdHNGdDN442Svs5ikVyUL1Jm0Wg@mail.gmail.com>
	<201401161523.38623.luke@dashjr.org>
	<CA+s+GJDeV9-djdEsA_stznNK9zzBA_0xQFV_m6tVygJicuLWuQ@mail.gmail.com>
	<201401171841.37790.luke@dashjr.org>
	<CAJHLa0MVY6f02hK1CofM7bjLM=V1V0XKCWvHjBz=ozQdvA+xYA@mail.gmail.com>
	<61c05e986b4d1010d0cf76868db7d2af.squirrel@fruiteater.riseup.net>
	<CA+s+GJCwB3Jj7z32_5NCHgf7utyx0nm-fXiSW+79w8u4mi7W5g@mail.gmail.com>
	<52DABC0D.8060900@monetize.io>
	<CAJHLa0PAG=2+GOiLWYgWH81q+eAQ4w3LdDDemQ9J0K0AddUw_w@mail.gmail.com>
	<CA+s+GJDFq0P+cgAVL9N1ADT7PFB4eMSPnoSR05wPOB5KRL-C+g@mail.gmail.com>
Message-ID: <CA+s+GJBosswGDuU6fH3-A0kgxTbqyXOvv0tV3n=+B8Ca7QdZGA@mail.gmail.com>

On Sun, Jan 19, 2014 at 11:24 AM, Wladimir <laanwj at gmail.com> wrote:

> Consensus running through the comments in the pull is that it needs
> (auto)tests.
>
> Are you going to do this Luke? Or is anyone else working on this?
>

*crickets*

Anyone willing to give pull #1647 its final push by addressing the
comments, so that it can be integrated in the 0.9 release?

Wladimir
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140123/a8aeee0a/attachment.html>

From pete at petertodd.org  Fri Jan 24 09:02:18 2014
From: pete at petertodd.org (Peter Todd)
Date: Fri, 24 Jan 2014 04:02:18 -0500
Subject: [Bitcoin-development] Bait for reusable addresses
In-Reply-To: <CAAS2fgQmsxjkQFSiCdeMoVMaqq5720KpUpdkKZOE+XytHsWw0w@mail.gmail.com>
References: <CAAS2fgQmsxjkQFSiCdeMoVMaqq5720KpUpdkKZOE+XytHsWw0w@mail.gmail.com>
Message-ID: <20140124090218.GA15398@savin>

On Wed, Jan 15, 2014 at 05:23:04PM -0800, Gregory Maxwell wrote:
> It also has a downside of not being indexable for the server, the
> server must do O(clients * reusable-address-txn) work and the work
> includes an ECC multiply.
> 
> An idea that Adam Back had originally proposed was including optional
> "bloom bait", a small token? say 8 bits? that distinguished
> transactions which allowed an anonymity set vs filtering trade off.
> Such a bait would be indexable, enabling faster lookup too.
> 
> But bloom bait has privacy problems more severe than the current SPV
> bloom filtering. While you leak information to your SPV servers today
> if you use bloom filtering the leak usually goes no further. So a
> compromise requires both a statistical attack _and_ using SPV servers
> that log data against your interest.  With bloom bait the whole
> network can see the relation. That is unfortunate.

Yes, but remember I proposed prefixing in my blockchain data query paper
because it's a trade-off between theoretical good privacy and
brittleness. The real world experience is that users, or to be exact
wallet authors, turn down SPV privacy parameters until bloom filters
have almost no privacy in exchange for little bandwidth usage. (though
load on the server is unchanged of course)

The brittleness comes in because the moment you connect to a malicious,
data-collecting peer, the contents of your wallet are all revealed.
Frankly that'd be a disaster for CoinJoin too, and I think it'd be a
bigger disaster than the poor specificity patterns leaked by prefix
usage. If anyone wants to deanonymize CoinJoin there will be a lot of
incentives to do so, and you only need wallet content data to do that.

> I suggest instead that with optional bait is included in an address
> that the sender compute H(nonce-pubkey) and then pick one byte at
> random out of the first 16 and xor it with the specified bait and
> store the result in the transaction.  An SPV server can now index the
> bait as it comes in by extracting 16 8-bit keys from each transaction
> (the 16 bytes xored with the bait in the transaction).  When the
> client wants to search for transactions it can give the server a list
> of keys its interested in? including their real key and number of
> random number of cover keys.
> 
> I didn't give any though into the parameters 8-bits and 16 dimensions.
> Some reasoning should be done to fix the parameters in order to make
> them the most useful: e.g.
> 
> Systems derived from more complex linear codes might give better
> performance, e.g. two secret bloom baits, two prefixes in the
> transaction bait0^random_char[0-8], bait1^random_char[0-8],  server
> extracts 16 keys.. and returns to the client transactions which have
> at least two key matches with their list.
> 
> Obviously whatever is used needs to be easy to implement, but schemes
> loosely based on fountain codes should only require picking some
> things and xoring... so they should be simple enough.

Well, that's the big question: How much extra data do we need and what's
the chance that this will get turned into miner-committed indexes? Or
even just provided at all? We keep on saying that miner-commitments may
next happen at all because of performance issues, and adding n extra
indexes doesn't exactly help that situation. I really suspect that the
moment that gets implemented we'll see wallet software use that for
simple security reasons, so plan ahead for that.

In the short term without miner-commitments it's just a question of how
much extra load we subject servers to. Again, getting people to even
implement prefixes isn't a trivial argument to make, yet bloom has some
serious scalability problems. (though does do roughly what you're
proposing)

In any case, your "bait" proposal is stealth address specific - how
would you propose applying the same principle to all addresses? Again,
it's a tradeoff between brittleness - connecting to a malicious peer
reveals your wallet - and blockchain stats data.

-- 
'peter'[:-1]@petertodd.org
0000000000000001315c71472fdce344f85f794a7135e25554f2b51dfa6b83c4
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 685 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140124/d822bb2a/attachment.sig>

From pete at petertodd.org  Fri Jan 24 09:05:32 2014
From: pete at petertodd.org (Peter Todd)
Date: Fri, 24 Jan 2014 04:05:32 -0500
Subject: [Bitcoin-development] BIP0039: Final call
In-Reply-To: <52DDB8AB.4010103@gmx.de>
References: <CAJna-HjGHpru6Lpv_tXUkWR2mX-=fobzojtHYvSRJy6+CMesOA@mail.gmail.com>
	<CANg-TZCrpT-YJ0WV9VY6w-PtCiz2YRMBCMvmjneDz13j2namkw@mail.gmail.com>
	<20140120223502.GA1055@petertodd.org>
	<CANOOu=_pVCPiDtbqc3EwToZWzjLw4UqOvpsu2Wrt4eDKC7g_2g@mail.gmail.com>
	<CAJna-HgStwQQUiNZfJrFS1SduuzEEVrF=qmVe23uqZUNhHkOHA@mail.gmail.com>
	<52DDB8AB.4010103@gmx.de>
Message-ID: <20140124090532.GB15398@savin>

On Tue, Jan 21, 2014 at 01:00:43AM +0100, Thomas Voegtlin wrote:
> Hi slush,
> 
> Thank you for your new proposal; it seems to be a compromise.
> 
> @Christophe Biocca:
> If the wordlist becomes part of the standard, then we will run into
> problems of collisions once users ask for wordlists in every language.
> 
> IMO the right approach is to implement checksums that do not depend
> on the wordlist (eg the 'brute force' method, Hash(mnemonic||1) mod
> 2^k == 0 )
> this would also allow us to implement sipa's variable stretching proposal.
> 
> I understand this is not possible because of the computational
> requirements of devices such as trezor.

Is it? Surely the trezor can bruteforce, say, 8 bits == 0. How many
SHA256/sec can the trezor hardware do? Generating your seed is a
one-time thing after all - that taking 10-30s doesn't seem like a big
deal to me.

Even a 1/256th "checksum" will really cut down on the number of mistakes
made and money lost.

-- 
'peter'[:-1]@petertodd.org
0000000000000001d8b9d438c18e856735ddae5b1d918416010350d19794aab6
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 685 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140124/e8ceffc8/attachment.sig>

From pete at petertodd.org  Fri Jan 24 09:17:33 2014
From: pete at petertodd.org (Peter Todd)
Date: Fri, 24 Jan 2014 04:17:33 -0500
Subject: [Bitcoin-development] unlinakble static address? & spv-privacy
 (Re: Stealth Addresses)
In-Reply-To: <op.w90qqfh4yldrnw@laptop-air>
References: <CANEZrP1KAVhi_-cxCYe0rR9LUSYJ8MyW8=6eSJZ65FeY5ZJNuQ@mail.gmail.com>
	<20140114225321.GT38964@giles.gnomon.org.uk>
	<CANAnSg0tH_bK_19rsRRHOeZgrGYeWMhW89fXPyS4DQGmS4r_7A@mail.gmail.com>
	<CALimQCXgc0eXeOcqFGUaCpSF7gKEe87KzvLqHZwUysV3WyjjGw@mail.gmail.com>
	<CAAS2fgShChAQryfUOBp60jB-zxn2tH986fu1HfT+LsNdBYnoYg@mail.gmail.com>
	<CAJHLa0P5r2+kxy7w8G=h=TAhdk1jUoW5UOiv-euo47uQY0u9ZA@mail.gmail.com>
	<20140115230901.GA25135@netbook.cypherspace.org>
	<op.w9q85wkhyldrnw@laptop-air.hsd1.ca.comcast.net>
	<CAAS2fgTRKgkO15VUvVgttP-iEBNF4=G+++Xo-XsaRBmOxyXXKA@mail.gmail.com>
	<op.w90qqfh4yldrnw@laptop-air>
Message-ID: <20140124091733.GC15398@savin>

On Mon, Jan 20, 2014 at 08:00:05PM -0800, Jeremy Spilman wrote:
> Let's say the payee's reusable address is '<version> <prefix> <Q1> <Q2>  
> ...', where <prefix> is 2 bytes. Without any length indicator. What's the  
> payer going to put on the blockchain? How would they know what the 'rest  
> of the space' is? They would have to put the whole <prefix> verbatim into  
> the OP_RETURN without knowing how many bits of <prefix> the payee actually  
> wants to see there.
> 
> If instead, the address is '<version> <prefix> <prefixLen> <Q1> <Q2> ...'  
> where <prefix> is 2 bytes, and <prefixLen> is 1 byte, representing number  
> of bits of prefix that should be fixed.
> 
> Then payer will know how much of <prefix> from the address should be taken  
> verbatim, and the rest of the two bytes would be replaced with random  
> data, and exactly two bytes would be put in the OP_RETURN.
> 
> If <prefixLen> was zero, the 2 byte prefix in the reusable address must be  
> ignored, and an entirely random 2 byte prefix would be put into the  
> OP_RETURN.
> 
> I'm a bit worried about broken implementations copying the <prefix> from  
> the reusable address into OP_RETURN when <prefixLen> is 0, and ending up  
> basically identifying the payee. That's the only reason I can think of to  
> make '<prefix> <prefixLen>' optional in the reusable address, to prevent  
> the opportunity to screw it up. You would *still* put a 2-byte random  
> prefix in the OP_RETURN, even if the fields weren't in the address at all.  
> It's just a minor concern though.

Something to keep in mind is that it's quite likely that the indexes
available will be over H(scriptPubKey). There's really good engineering
reasons for doing this: you need to be able to create succinct proofs of
fraud in indexes, miner committed and otherwise, and the only way they
are succinct is if you limit the length. Hashes naturally do that
because it's so expensive to generate partial collisions.

If you don't do this on the other hand now you have a situation where
the usual case - max 16 level deep tree -  and worst case - hundreds or
even thousands of levels deep - are vastly different. That's hard to
test for and likely to reveal implementation-specific limits in nasty
ways.

Anyway, grinding nonces isn't much of a burden given it's fast hash
functions. The prefixes in question are fairly small and will be small
for the forseeable future. As I said elsewhere in this thread, even
Javascript has performance that's perfectly adequate for the task.

-- 
'peter'[:-1]@petertodd.org
00000000000000003590a8a20ec9ff5b1c1af3f046a1f62dc1ac9a464721fd8f
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 685 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140124/eb99c0a2/attachment.sig>

From mike at plan99.net  Fri Jan 24 12:26:19 2014
From: mike at plan99.net (Mike Hearn)
Date: Fri, 24 Jan 2014 12:26:19 +0000
Subject: [Bitcoin-development] Bait for reusable addresses
In-Reply-To: <20140124090218.GA15398@savin>
References: <CAAS2fgQmsxjkQFSiCdeMoVMaqq5720KpUpdkKZOE+XytHsWw0w@mail.gmail.com>
	<20140124090218.GA15398@savin>
Message-ID: <CANEZrP0MnXr4xjaMPg7v7vTiDQr-y7esvEBE=xk=Y0BUGXak9A@mail.gmail.com>

>
> brittleness. The real world experience is that users, or to be exact
> wallet authors, turn down SPV privacy parameters until bloom filters
> have almost no privacy in exchange for little bandwidth usage.


That's not fundamental though, it just reflects that the only
implementation of this is used on a wide range of devices and doesn't yet
have any notion of bandwidth modes or monitoring. It can and will be
resolved at some point.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140124/ce962977/attachment.html>

From pete at petertodd.org  Fri Jan 24 15:26:18 2014
From: pete at petertodd.org (Peter Todd)
Date: Fri, 24 Jan 2014 10:26:18 -0500
Subject: [Bitcoin-development] Bait for reusable addresses
In-Reply-To: <CANEZrP0MnXr4xjaMPg7v7vTiDQr-y7esvEBE=xk=Y0BUGXak9A@mail.gmail.com>
References: <CAAS2fgQmsxjkQFSiCdeMoVMaqq5720KpUpdkKZOE+XytHsWw0w@mail.gmail.com>
	<20140124090218.GA15398@savin>
	<CANEZrP0MnXr4xjaMPg7v7vTiDQr-y7esvEBE=xk=Y0BUGXak9A@mail.gmail.com>
Message-ID: <20140124152617.GA31017@petertodd.org>

On Fri, Jan 24, 2014 at 12:26:19PM +0000, Mike Hearn wrote:
> >
> > brittleness. The real world experience is that users, or to be exact
> > wallet authors, turn down SPV privacy parameters until bloom filters
> > have almost no privacy in exchange for little bandwidth usage.
> 
> 
> That's not fundamental though, it just reflects that the only
> implementation of this is used on a wide range of devices and doesn't yet
> have any notion of bandwidth modes or monitoring. It can and will be
> resolved at some point.

Resolved for some users, not for all. The underlying trade-off will
always be there; less bandwidth makes it harder, more addresses to check
makes it harder; an HD wallet used properly without re-using addresses
will quickly lead to a fairly full bloom filter unless addresses are
expired, and expiration leads to scenarios where funds can be lost.

I think we need to provide users with better options than that.

-- 
'peter'[:-1]@petertodd.org
000000000000000064ddd387d7548c97c4d42f4df1008d180f306c59e0440f4f
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 490 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140124/8a53d806/attachment.sig>

From adam at cypherspace.org  Fri Jan 24 15:42:35 2014
From: adam at cypherspace.org (Adam Back)
Date: Fri, 24 Jan 2014 16:42:35 +0100
Subject: [Bitcoin-development] Bait for reusable addresses
In-Reply-To: <CANEZrP0MnXr4xjaMPg7v7vTiDQr-y7esvEBE=xk=Y0BUGXak9A@mail.gmail.com>
References: <CAAS2fgQmsxjkQFSiCdeMoVMaqq5720KpUpdkKZOE+XytHsWw0w@mail.gmail.com>
	<20140124090218.GA15398@savin>
	<CANEZrP0MnXr4xjaMPg7v7vTiDQr-y7esvEBE=xk=Y0BUGXak9A@mail.gmail.com>
Message-ID: <20140124154235.GA3741@netbook.cypherspace.org>

I think prefix has analysis side effects.  There are (at least) 4 things
that link payments: the graph of payment flows, timing, precise amounts, IP
addresses, but with prefix a 5th: the prefix allows public elmination of
candidates connections, I think that may make network flow analysis even
more effective than it has been.

So SPV can be tuned as Mike just said, and as Greg pointed out somewhere
bloom is more private than prefix because its a wallet to node connection,
not a node broadcast, and Mike mentioned embedded Tor in another post to
boost node-capture issues with hostile network.

So reusable addresses are cool for full node recipients (0-bit prefix) or
trusted server offload (your own desktop, VPS, or trusted service provider
node, and solve real problems for the use case of static and donation
addresses particularly with this second delegatable key for no-funds at risk
search (which is even good as Jeremey said for your own node, in a offline
wallet use case).

Now while it would be clearly a very nice win if reusable addresses could be
made SPV-like in network characteristics and privacy, but we dont have a
plausible mechanism yet IMO.  Close as we got was Greg's enhancement of
my/your "bloom bait"/"prefix" concept to make multiple candidate baits to
provide some ambiguity (still allows elimination, just slightly less of it).

If we can find some efficient crypto to solve that last one, we could even
adopt them generally if it was efficient enough without needing interactive
one-use address release.

Maybe we should ask some math/theoretical crypto people if there is anything
like public key watermarking or something that could solve this problem
efficiently.

For the related but different case of transaction level authenticity I like
Alan's server derived but communicated scalar & base to allow the client to
do at least TOFU.

Payment protocol may add another level of identity framework on top of TOFU
addresses (at a lower level than the payment messages defined now), and
without then needing a batch upload of offline signed secondary address
sigature that Mike described a while back, at least in person, maybe online
somewhere (an add on with similar purpose and effect to Alan's TOFU, but
then with revocation, identity and certification for merchants).

I have not talked about payment protocols main app level function I think we
all understand and agree on the purpose and use of the server and optional
client certs in that.  People may wish to add other cert types later (eg
PGP, SSH etc) but this version covers the common merchant tech, and allows
client-side certs to be experimented with for identity also (eg imagine as a
way to enrol with regulated entities like exchanges.)

Tell me if I am misunderstanding anything :)

Adam

On Fri, Jan 24, 2014 at 12:26:19PM +0000, Mike Hearn wrote:
>     brittleness. The real world experience is that users, or to be exact
>     wallet authors, turn down SPV privacy parameters until bloom filters
>     have almost no privacy in exchange for little bandwidth usage.
>
>   That's not fundamental though, it just reflects that the only
>   implementation of this is used on a wide range of devices and doesn't
>   yet have any notion of bandwidth modes or monitoring. It can and will
>   be resolved at some point.?



From pete at petertodd.org  Fri Jan 24 16:13:30 2014
From: pete at petertodd.org (Peter Todd)
Date: Fri, 24 Jan 2014 11:13:30 -0500
Subject: [Bitcoin-development] Bait for reusable addresses
In-Reply-To: <20140124154235.GA3741@netbook.cypherspace.org>
References: <CAAS2fgQmsxjkQFSiCdeMoVMaqq5720KpUpdkKZOE+XytHsWw0w@mail.gmail.com>
	<20140124090218.GA15398@savin>
	<CANEZrP0MnXr4xjaMPg7v7vTiDQr-y7esvEBE=xk=Y0BUGXak9A@mail.gmail.com>
	<20140124154235.GA3741@netbook.cypherspace.org>
Message-ID: <20140124161330.GA31233@petertodd.org>

On Fri, Jan 24, 2014 at 04:42:35PM +0100, Adam Back wrote:
> I think prefix has analysis side effects.  There are (at least) 4 things
> that link payments: the graph of payment flows, timing, precise amounts, IP
> addresses, but with prefix a 5th: the prefix allows public elmination of
> candidates connections, I think that may make network flow analysis even
> more effective than it has been.

You know, we've made this discussion rather confusing because we're
using the term "prefix" for both prefix filters - which are equivalent
to bloom filters but with better scalability - and the act of forcing a
scriptPubKey to match some given prefix. I suggest we call the latter
concept 'wallet clustering' as it can just as easily be applied to bloom
filters, as well as Gregory Maxwell's candidate bait scheme, and for
that matter, prefix filters with a tweak option, e.g. H(scriptPubKey |
nTweak)

So yeah, clustering schemes make network flow analysis easier if the
attacker only has blockchain data to work from. But they can also make
network flow analysis significantly harder for attackers that have query
logs from attackers running nodes, and as we know sybiling the network
to get query logs is very easy. I'd rather develop systems that don't
fail catastrophically against sybil attack.

> So SPV can be tuned as Mike just said, and as Greg pointed out somewhere
> bloom is more private than prefix because its a wallet to node connection,
> not a node broadcast, and Mike mentioned embedded Tor in another post to
> boost node-capture issues with hostile network.

The hostile network is likely to have a significant percentage of
hostile, query-logging nodes. For one thing, running nodes is expensive
and would be even more so in a blocksize limit raising scenario, and a
easy way to pay those costs is by selling query data.

> So reusable addresses are cool for full node recipients (0-bit prefix) or
> trusted server offload (your own desktop, VPS, or trusted service provider
> node, and solve real problems for the use case of static and donation
> addresses particularly with this second delegatable key for no-funds at risk
> search (which is even good as Jeremey said for your own node, in a offline
> wallet use case).

Sure, in some cases you can use zero-length prefixes with trusted nodes;
not many users have access to such nodes.

> Now while it would be clearly a very nice win if reusable addresses could be
> made SPV-like in network characteristics and privacy, but we dont have a
> plausible mechanism yet IMO.  Close as we got was Greg's enhancement of
> my/your "bloom bait"/"prefix" concept to make multiple candidate baits to
> provide some ambiguity (still allows elimination, just slightly less of it).
> 
> If we can find some efficient crypto to solve that last one, we could even
> adopt them generally if it was efficient enough without needing interactive
> one-use address release.

Conversely, it'd be interesting if someone can dig up a proof showing
that doing much better than Gregory's ambiguity tradeoff is impossible.
My gut feeling is that it is, especially if you take into account the
desire for scalability - if we're to make the blocksize bigger assuming
all nodes have all data for every block just isn't going to happen.

> Maybe we should ask some math/theoretical crypto people if there is anything
> like public key watermarking or something that could solve this problem
> efficiently.

Yes, and I think such schemes should be pursued. But in the near-term
what can we offer users?

Remember that making stealth addresses and similar clustering-using
schemes capable of backward compatible upgrades isn't hard; if the
crypto is found later it can be adopted.

What is harder is that people want miners to commit to various types of
indexes - changing those indexes would require a soft-fork and there's
much pressure for those indexes to have very good performance
properties.

> For the related but different case of transaction level authenticity I like
> Alan's server derived but communicated scalar & base to allow the client to
> do at least TOFU.
> 
> Payment protocol may add another level of identity framework on top of TOFU
> addresses (at a lower level than the payment messages defined now), and
> without then needing a batch upload of offline signed secondary address
> sigature that Mike described a while back, at least in person, maybe online
> somewhere (an add on with similar purpose and effect to Alan's TOFU, but
> then with revocation, identity and certification for merchants).

Note how well the OpenPGP + bitcoin address UID ideas I and others have
been talking about meshes with TOFU: the logic for "Do I trust this
address to send money?" and "Do I trust this PGP key to send more
encrypted mail/verify signatures?" is just different questions about the
same human identity, so combining the two is synergistic. For instance I
might want to communicate securely with a friend via email and also send
funds to them securely.

An interesting nuance is ideally that UID can be used for more than just
a single address type, e.g. BIP32 derivation chains can the same root
pubkeys as stealth addresses. Though I don't know if the added
complexity is worthwhile vs. just adding another UID for the BIP32
derivation case.

-- 
'peter'[:-1]@petertodd.org
0000000000000001a2aeb2101283cb4e35d4a038b38a72a21af5092d8d8c9d2e
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 490 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140124/f31d3e9e/attachment.sig>

From thomasv1 at gmx.de  Fri Jan 24 16:47:21 2014
From: thomasv1 at gmx.de (Thomas Voegtlin)
Date: Fri, 24 Jan 2014 17:47:21 +0100
Subject: [Bitcoin-development] BIP0039: Final call
In-Reply-To: <20140124090532.GB15398@savin>
References: <CAJna-HjGHpru6Lpv_tXUkWR2mX-=fobzojtHYvSRJy6+CMesOA@mail.gmail.com>
	<CANg-TZCrpT-YJ0WV9VY6w-PtCiz2YRMBCMvmjneDz13j2namkw@mail.gmail.com>
	<20140120223502.GA1055@petertodd.org>
	<CANOOu=_pVCPiDtbqc3EwToZWzjLw4UqOvpsu2Wrt4eDKC7g_2g@mail.gmail.com>
	<CAJna-HgStwQQUiNZfJrFS1SduuzEEVrF=qmVe23uqZUNhHkOHA@mail.gmail.com>
	<52DDB8AB.4010103@gmx.de> <20140124090532.GB15398@savin>
Message-ID: <52E29919.7030404@gmx.de>


Le 24/01/2014 10:05, Peter Todd a ?crit :
> On Tue, Jan 21, 2014 at 01:00:43AM +0100, Thomas Voegtlin wrote:
>> Hi slush,
>>
>> Thank you for your new proposal; it seems to be a compromise.
>>
>> @Christophe Biocca:
>> If the wordlist becomes part of the standard, then we will run into
>> problems of collisions once users ask for wordlists in every language.
>>
>> IMO the right approach is to implement checksums that do not depend
>> on the wordlist (eg the 'brute force' method, Hash(mnemonic||1) mod
>> 2^k == 0 )
>> this would also allow us to implement sipa's variable stretching proposal.
>>
>> I understand this is not possible because of the computational
>> requirements of devices such as trezor.
> Is it? Surely the trezor can bruteforce, say, 8 bits == 0. How many
> SHA256/sec can the trezor hardware do? Generating your seed is a
> one-time thing after all - that taking 10-30s doesn't seem like a big
> deal to me.
>
> Even a 1/256th "checksum" will really cut down on the number of mistakes
> made and money lost.

slush, correct me if I'm wrong, but I don't think that's the only reason:
They want to generate a seed by combining entropy from the trezor device 
and from the user's computer;
In addition, they want the computer to be able to check that the seed 
actually was derived from the entropy it provided, using only a master 
public key (the computer does not have access to the seed)

This is why they designed bip39 that way.

I think the new bip39 proposal could be used in Electrum as an option 
for trezor, but I am reluctant to make it default, because it imposes 
its own dictionary.




From jeremy at taplink.co  Fri Jan 24 21:58:28 2014
From: jeremy at taplink.co (Jeremy Spilman)
Date: Fri, 24 Jan 2014 13:58:28 -0800
Subject: [Bitcoin-development] Bait for reusable addresses
In-Reply-To: <20140124152617.GA31017@petertodd.org>
References: <CAAS2fgQmsxjkQFSiCdeMoVMaqq5720KpUpdkKZOE+XytHsWw0w@mail.gmail.com>
	<20140124090218.GA15398@savin>
	<CANEZrP0MnXr4xjaMPg7v7vTiDQr-y7esvEBE=xk=Y0BUGXak9A@mail.gmail.com>
	<20140124152617.GA31017@petertodd.org>
Message-ID: <9C11B575-1C43-44BB-B5C2-52F892E5A35A@taplink.co>

> 
> 
> 
> I think we need to provide users with better options than that.
> 

Perfect privacy without extraordinary computational overhead today means downloading everything. But we could provide better tools to *shift* bandwidth requirements rather than try to reduce them. 

I've been thinking about a setup where user runs a UTXO only, and maybe even outbound-connect only (like bitcoinj), full node at home. Then using Tor, mostly for tunneling, they host a hidden service they can connect back to from their smartphone to see balances, manage receive addresses, send funds, etc.

The smartphone is not doing SPV, it's like a web client for the wallet running at home. The initial connection between the smartphone and home wallet has the phone learn two codes, one is the hidden service name, another is an access token which is revocable. You may require further authentication from that point. 

With fast bootstrapping / checkpointing of the UTXO I think usability could be as good as SPV, and you would get push-notification of relevant transactions with zero privacy trade-off.

I wonder if people would want to run such an app, if they would run it on their desktop, a dedicated machine, or an old smartphone or other cheap ARM device.



From mike at plan99.net  Fri Jan 24 23:15:56 2014
From: mike at plan99.net (Mike Hearn)
Date: Sat, 25 Jan 2014 00:15:56 +0100
Subject: [Bitcoin-development] Bait for reusable addresses
In-Reply-To: <9C11B575-1C43-44BB-B5C2-52F892E5A35A@taplink.co>
References: <CAAS2fgQmsxjkQFSiCdeMoVMaqq5720KpUpdkKZOE+XytHsWw0w@mail.gmail.com>
	<20140124090218.GA15398@savin>
	<CANEZrP0MnXr4xjaMPg7v7vTiDQr-y7esvEBE=xk=Y0BUGXak9A@mail.gmail.com>
	<20140124152617.GA31017@petertodd.org>
	<9C11B575-1C43-44BB-B5C2-52F892E5A35A@taplink.co>
Message-ID: <CANEZrP1tjeRgZf7nCUjPM-eLTrNkLEA3syZRy4UqmEhNKyZwhw@mail.gmail.com>

I've thought about [ab]using Tor as a STUN replacement before, but the
issue is a lot of people don't have computers that are switched on all the
time anymore except for their smartphones, which are too weak to calculate
the UTXO set. The trend has been for a while towards laptops, phones and
tablets, all of which are relatively weak.

I think there might be a market for a one-click "bring up an amazon VPS,
sync a full node and make it accessible only to me" type service though!



On Fri, Jan 24, 2014 at 10:58 PM, Jeremy Spilman <jeremy at taplink.co> wrote:

> >
> >
> >
> > I think we need to provide users with better options than that.
> >
>
> Perfect privacy without extraordinary computational overhead today means
> downloading everything. But we could provide better tools to *shift*
> bandwidth requirements rather than try to reduce them.
>
> I've been thinking about a setup where user runs a UTXO only, and maybe
> even outbound-connect only (like bitcoinj), full node at home. Then using
> Tor, mostly for tunneling, they host a hidden service they can connect back
> to from their smartphone to see balances, manage receive addresses, send
> funds, etc.
>
> The smartphone is not doing SPV, it's like a web client for the wallet
> running at home. The initial connection between the smartphone and home
> wallet has the phone learn two codes, one is the hidden service name,
> another is an access token which is revocable. You may require further
> authentication from that point.
>
> With fast bootstrapping / checkpointing of the UTXO I think usability
> could be as good as SPV, and you would get push-notification of relevant
> transactions with zero privacy trade-off.
>
> I wonder if people would want to run such an app, if they would run it on
> their desktop, a dedicated machine, or an old smartphone or other cheap ARM
> device.
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140125/c0829de3/attachment.html>

From adam at cypherspace.org  Sat Jan 25 16:19:01 2014
From: adam at cypherspace.org (Adam Back)
Date: Sat, 25 Jan 2014 17:19:01 +0100
Subject: [Bitcoin-development] (space) efficient reusable addr via weil
 pairing IBE (Re: Bait for reusable addresses)
In-Reply-To: <20140124161330.GA31233@petertodd.org>
References: <CAAS2fgQmsxjkQFSiCdeMoVMaqq5720KpUpdkKZOE+XytHsWw0w@mail.gmail.com>
	<20140124090218.GA15398@savin>
	<CANEZrP0MnXr4xjaMPg7v7vTiDQr-y7esvEBE=xk=Y0BUGXak9A@mail.gmail.com>
	<20140124154235.GA3741@netbook.cypherspace.org>
	<20140124161330.GA31233@petertodd.org>
Message-ID: <20140125161901.GA17457@netbook.cypherspace.org>

I think I figured out a proof of existance for a space efficient way to do
better than bloom filters/prefix/bloom-bait.  (Must have been dreaming on it
as I woke up with the idea following Peter's suggestion to try prove instead
if its possible or not:).

I wrote up the details here:

https://bitcointalk.org/index.php?topic=431756.new

In summary with a use of novel application of IBE (*) based on weil-pairing
so the recipient can send a delegation private key that is specific to the
block being queried.  It means the node that services the query has no
ability to correlate with queries in other blocks from the some user.  The
sender derives a pub=IBE-extract(master-pub, id=previous block hash).  The
above link has more explanation, links and costs/risks.

I think it maybe within possibility to do further than this because it is
not technically necessary to delegate decryption, only to delegate
filtering, which can be a simpler requirement so there remains perhaps
(speculatively) a possibility to do it without introducing weil pairing
hardness problem or using eg I mentioned public key steganography or
something like that if there is anything similarly efficient but with more
widely used hardness assumptions.

Adam

(*) analogous to the way IBE is used as a building block for Non-Interactive
Forward Secrecy (NIFS)

On Fri, Jan 24, 2014 at 11:13:30AM -0500, Peter Todd wrote:
>On Fri, Jan 24, 2014 at 04:42:35PM +0100, Adam Back wrote:
>> Now while it would be clearly a very nice win if reusable addresses could
>> be made SPV-like in network characteristics and privacy, but we dont have
>> a plausible mechanism yet IMO.  [...]
>>
>> If we can find some efficient crypto to solve that last one, we could even
>> adopt them generally if it was efficient enough without needing interactive
>> one-use address release.
>
>Conversely, it'd be interesting if someone can dig up a proof showing
>that doing much better than Gregory's ambiguity tradeoff is impossible.




From pieter.wuille at gmail.com  Sun Jan 26 10:09:42 2014
From: pieter.wuille at gmail.com (Pieter Wuille)
Date: Sun, 26 Jan 2014 11:09:42 +0100
Subject: [Bitcoin-development] BIP 32 proposed changes
Message-ID: <CAPg+sBgnW08NWBH0D39qSZRZDn8W4USS6w76MtRNeH1zwfwvkg@mail.gmail.com>

Hello all,

based on some feedback, I've created a pull request with a rewritten
version of BIP 32, hopefully making it more readable:
* Don't reuse the terminology 'public' vs 'private' for the alternate
derivation scheme which doesn't allow computing child public keys from
parent public keys, but call them "hardened".
* Add explicit type conversion functions.
* Don't use the ' suffix to mean "alternate" in two very different
meanings (use the 'h' suffix to mean hardened, and use CKDpriv and
CKDpub for the derivation functions that operate on private and public
keys).
* Several smaller changes.

These are just documentation changes, the semantics are unchanged.

Comments are welcome, see https://github.com/bitcoin/bips/pull/12.

-- 
Pieter



From andreas at schildbach.de  Sun Jan 26 21:11:47 2014
From: andreas at schildbach.de (Andreas Schildbach)
Date: Sun, 26 Jan 2014 22:11:47 +0100
Subject: [Bitcoin-development] BIP70/71 issue, RFD
Message-ID: <lc3tm6$9ko$1@ger.gmane.org>

I'm experimenting with BIP70/71 (payment protocol) usage in face to face
payments (more on that soon).

I've excountered an issue with the protobuf format. Protobufs are not
self-delimiting. That means if you're reading from an undelimited
stream, you will read endlessly because you don't know how much to read.

The current BIP70 implementations probably work because they're reading
either from a file or from an HTTP resource which sets the
Content-Length header. Trouble is the Content-Length header is optional,
and also there are many kinds of streams that don't have this built-in
delimiting mechanism.

The Java protobuf API solves this by offering delimited I/O, like

payment.writeDelimitedTo(os);

This writes the size of the message as a varint before writing the data.
I don't know about protobuf implementations for other languages but I'd
expect them to offer something compatible.

However, this leading varint is an incompatible change and would need to
be added to the spec.

I specifically encountered this with PaymentMessage and PaymentACK, but
it might be a good idea to apply this to all messages if any. Open for
discussion.




From mike at plan99.net  Sun Jan 26 21:24:35 2014
From: mike at plan99.net (Mike Hearn)
Date: Sun, 26 Jan 2014 22:24:35 +0100
Subject: [Bitcoin-development] BIP70/71 issue, RFD
In-Reply-To: <lc3tm6$9ko$1@ger.gmane.org>
References: <lc3tm6$9ko$1@ger.gmane.org>
Message-ID: <CANEZrP2F-1aqzBfUB82riWOwTABf1arbx70FdQ-XndQ91m_QqA@mail.gmail.com>

Which medium is this an issue for? As you note, for files and HTTP
responses it's not a problem in practice. i'd guess nor for NFC tags nor QR
codes.


On Sun, Jan 26, 2014 at 10:11 PM, Andreas Schildbach
<andreas at schildbach.de>wrote:

> I'm experimenting with BIP70/71 (payment protocol) usage in face to face
> payments (more on that soon).
>
> I've excountered an issue with the protobuf format. Protobufs are not
> self-delimiting. That means if you're reading from an undelimited
> stream, you will read endlessly because you don't know how much to read.
>
> The current BIP70 implementations probably work because they're reading
> either from a file or from an HTTP resource which sets the
> Content-Length header. Trouble is the Content-Length header is optional,
> and also there are many kinds of streams that don't have this built-in
> delimiting mechanism.
>
> The Java protobuf API solves this by offering delimited I/O, like
>
> payment.writeDelimitedTo(os);
>
> This writes the size of the message as a varint before writing the data.
> I don't know about protobuf implementations for other languages but I'd
> expect them to offer something compatible.
>
> However, this leading varint is an incompatible change and would need to
> be added to the spec.
>
> I specifically encountered this with PaymentMessage and PaymentACK, but
> it might be a good idea to apply this to all messages if any. Open for
> discussion.
>
>
>
> ------------------------------------------------------------------------------
> CenturyLink Cloud: The Leader in Enterprise Cloud Services.
> Learn Why More Businesses Are Choosing CenturyLink Cloud For
> Critical Workloads, Development Environments & Everything In Between.
> Get a Quote or Start a Free Trial Today.
>
> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140126/27dd7d73/attachment.html>

From andreas at schildbach.de  Sun Jan 26 21:32:52 2014
From: andreas at schildbach.de (Andreas Schildbach)
Date: Sun, 26 Jan 2014 22:32:52 +0100
Subject: [Bitcoin-development] BIP70/71 issue, RFD
In-Reply-To: <CANEZrP2F-1aqzBfUB82riWOwTABf1arbx70FdQ-XndQ91m_QqA@mail.gmail.com>
References: <lc3tm6$9ko$1@ger.gmane.org>
	<CANEZrP2F-1aqzBfUB82riWOwTABf1arbx70FdQ-XndQ91m_QqA@mail.gmail.com>
Message-ID: <lc3utn$m8u$1@ger.gmane.org>

Bluetooth, Wifi Direct, HTTP request/responses via broken proxies, smoke
signals... basically anything that is a stream rather than a file.

Right, NFC NDEF and QR codes are not affected, so we can skip the
delimiter for these mediums.


On 01/26/2014 10:24 PM, Mike Hearn wrote:
> Which medium is this an issue for? As you note, for files and HTTP
> responses it's not a problem in practice. i'd guess nor for NFC tags nor
> QR codes.
> 
> 
> On Sun, Jan 26, 2014 at 10:11 PM, Andreas Schildbach
> <andreas at schildbach.de <mailto:andreas at schildbach.de>> wrote:
> 
>     I'm experimenting with BIP70/71 (payment protocol) usage in face to face
>     payments (more on that soon).
> 
>     I've excountered an issue with the protobuf format. Protobufs are not
>     self-delimiting. That means if you're reading from an undelimited
>     stream, you will read endlessly because you don't know how much to read.
> 
>     The current BIP70 implementations probably work because they're reading
>     either from a file or from an HTTP resource which sets the
>     Content-Length header. Trouble is the Content-Length header is optional,
>     and also there are many kinds of streams that don't have this built-in
>     delimiting mechanism.
> 
>     The Java protobuf API solves this by offering delimited I/O, like
> 
>     payment.writeDelimitedTo(os);
> 
>     This writes the size of the message as a varint before writing the data.
>     I don't know about protobuf implementations for other languages but I'd
>     expect them to offer something compatible.
> 
>     However, this leading varint is an incompatible change and would need to
>     be added to the spec.
> 
>     I specifically encountered this with PaymentMessage and PaymentACK, but
>     it might be a good idea to apply this to all messages if any. Open for
>     discussion.
> 
> 
>     ------------------------------------------------------------------------------
>     CenturyLink Cloud: The Leader in Enterprise Cloud Services.
>     Learn Why More Businesses Are Choosing CenturyLink Cloud For
>     Critical Workloads, Development Environments & Everything In Between.
>     Get a Quote or Start a Free Trial Today.
>     http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk
>     _______________________________________________
>     Bitcoin-development mailing list
>     Bitcoin-development at lists.sourceforge.net
>     <mailto:Bitcoin-development at lists.sourceforge.net>
>     https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 
> 
> 
> 
> ------------------------------------------------------------------------------
> CenturyLink Cloud: The Leader in Enterprise Cloud Services.
> Learn Why More Businesses Are Choosing CenturyLink Cloud For
> Critical Workloads, Development Environments & Everything In Between.
> Get a Quote or Start a Free Trial Today.
> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk
> 
> 
> 
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 





From andreas at schildbach.de  Sun Jan 26 21:56:11 2014
From: andreas at schildbach.de (Andreas Schildbach)
Date: Sun, 26 Jan 2014 22:56:11 +0100
Subject: [Bitcoin-development] BIP70: PaymentACK semantics
Message-ID: <lc409d$4mf$1@ger.gmane.org>

The BIP70 is very brief on what a PaymentACK is supposed to mean. Quote:

"it [PaymentACK] is sent from the merchant's server to the bitcoin
wallet in response to a Payment message"

Does it simply mean we received a syntactically correct Payment message?
Does it mean the Payment is valid?
Does it mean the Payment is valid and confirmed?
How long can we delay the ack until all conditions for payment are met?
I assume its not a good idea to keep the HTTP (or Bluetooth, for that
matter) connection open for an hour while waiting for a blockchain
confirmation.




From mike at plan99.net  Sun Jan 26 22:00:41 2014
From: mike at plan99.net (Mike Hearn)
Date: Sun, 26 Jan 2014 23:00:41 +0100
Subject: [Bitcoin-development] BIP70/71 issue, RFD
In-Reply-To: <lc3utn$m8u$1@ger.gmane.org>
References: <lc3tm6$9ko$1@ger.gmane.org>
	<CANEZrP2F-1aqzBfUB82riWOwTABf1arbx70FdQ-XndQ91m_QqA@mail.gmail.com>
	<lc3utn$m8u$1@ger.gmane.org>
Message-ID: <CANEZrP0GLcSf0B-bW7jZq5m+wdkBLe_iEok-XCCOFASGAthtug@mail.gmail.com>

I think for "binding" the payment protocol to those transports we should
indeed use protobuf varint length prefixes. But it's unnecessary for all
cases. Unless Gavin feels it'd be better to be consistent everywhere and is
willing to change the spec and code - as far as I know though we're trying
to ship 0.9rc1 soonish .....


On Sun, Jan 26, 2014 at 10:32 PM, Andreas Schildbach
<andreas at schildbach.de>wrote:

> Bluetooth, Wifi Direct, HTTP request/responses via broken proxies, smoke
> signals... basically anything that is a stream rather than a file.
>
> Right, NFC NDEF and QR codes are not affected, so we can skip the
> delimiter for these mediums.
>
>
> On 01/26/2014 10:24 PM, Mike Hearn wrote:
> > Which medium is this an issue for? As you note, for files and HTTP
> > responses it's not a problem in practice. i'd guess nor for NFC tags nor
> > QR codes.
> >
> >
> > On Sun, Jan 26, 2014 at 10:11 PM, Andreas Schildbach
> > <andreas at schildbach.de <mailto:andreas at schildbach.de>> wrote:
> >
> >     I'm experimenting with BIP70/71 (payment protocol) usage in face to
> face
> >     payments (more on that soon).
> >
> >     I've excountered an issue with the protobuf format. Protobufs are not
> >     self-delimiting. That means if you're reading from an undelimited
> >     stream, you will read endlessly because you don't know how much to
> read.
> >
> >     The current BIP70 implementations probably work because they're
> reading
> >     either from a file or from an HTTP resource which sets the
> >     Content-Length header. Trouble is the Content-Length header is
> optional,
> >     and also there are many kinds of streams that don't have this
> built-in
> >     delimiting mechanism.
> >
> >     The Java protobuf API solves this by offering delimited I/O, like
> >
> >     payment.writeDelimitedTo(os);
> >
> >     This writes the size of the message as a varint before writing the
> data.
> >     I don't know about protobuf implementations for other languages but
> I'd
> >     expect them to offer something compatible.
> >
> >     However, this leading varint is an incompatible change and would
> need to
> >     be added to the spec.
> >
> >     I specifically encountered this with PaymentMessage and PaymentACK,
> but
> >     it might be a good idea to apply this to all messages if any. Open
> for
> >     discussion.
> >
> >
> >
> ------------------------------------------------------------------------------
> >     CenturyLink Cloud: The Leader in Enterprise Cloud Services.
> >     Learn Why More Businesses Are Choosing CenturyLink Cloud For
> >     Critical Workloads, Development Environments & Everything In Between.
> >     Get a Quote or Start a Free Trial Today.
> >
> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk
> >     _______________________________________________
> >     Bitcoin-development mailing list
> >     Bitcoin-development at lists.sourceforge.net
> >     <mailto:Bitcoin-development at lists.sourceforge.net>
> >     https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> >
> >
> >
> >
> >
> ------------------------------------------------------------------------------
> > CenturyLink Cloud: The Leader in Enterprise Cloud Services.
> > Learn Why More Businesses Are Choosing CenturyLink Cloud For
> > Critical Workloads, Development Environments & Everything In Between.
> > Get a Quote or Start a Free Trial Today.
> >
> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk
> >
> >
> >
> > _______________________________________________
> > Bitcoin-development mailing list
> > Bitcoin-development at lists.sourceforge.net
> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> >
>
>
>
>
> ------------------------------------------------------------------------------
> CenturyLink Cloud: The Leader in Enterprise Cloud Services.
> Learn Why More Businesses Are Choosing CenturyLink Cloud For
> Critical Workloads, Development Environments & Everything In Between.
> Get a Quote or Start a Free Trial Today.
>
> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140126/117a4b48/attachment.html>

From andreas at schildbach.de  Sun Jan 26 22:14:52 2014
From: andreas at schildbach.de (Andreas Schildbach)
Date: Sun, 26 Jan 2014 23:14:52 +0100
Subject: [Bitcoin-development] BIP70/71 issue, RFD
In-Reply-To: <CANEZrP0GLcSf0B-bW7jZq5m+wdkBLe_iEok-XCCOFASGAthtug@mail.gmail.com>
References: <lc3tm6$9ko$1@ger.gmane.org>	<CANEZrP2F-1aqzBfUB82riWOwTABf1arbx70FdQ-XndQ91m_QqA@mail.gmail.com>	<lc3utn$m8u$1@ger.gmane.org>
	<CANEZrP0GLcSf0B-bW7jZq5m+wdkBLe_iEok-XCCOFASGAthtug@mail.gmail.com>
Message-ID: <lc41cf$fdd$1@ger.gmane.org>

Just keep in mind that if it turns out we need to retrofit messages with
length prefixes I fear we will have to restart with new mime-types. The
nature of prefixes being always at the start means this rules out simply
incrementing a protocol version number.

Correcting myself:

> it might be a good idea to apply this to all messages if any.

Of course I only mean the "root" messages, namely PaymentRequest,
Payment, and PaymentACK. The embedded messages don't need length prefixes.


On 01/26/2014 11:00 PM, Mike Hearn wrote:
> I think for "binding" the payment protocol to those transports we should
> indeed use protobuf varint length prefixes. But it's unnecessary for all
> cases. Unless Gavin feels it'd be better to be consistent everywhere and
> is willing to change the spec and code - as far as I know though we're
> trying to ship 0.9rc1 soonish .....
> 
> 
> On Sun, Jan 26, 2014 at 10:32 PM, Andreas Schildbach
> <andreas at schildbach.de <mailto:andreas at schildbach.de>> wrote:
> 
>     Bluetooth, Wifi Direct, HTTP request/responses via broken proxies, smoke
>     signals... basically anything that is a stream rather than a file.
> 
>     Right, NFC NDEF and QR codes are not affected, so we can skip the
>     delimiter for these mediums.
> 
> 
>     On 01/26/2014 10:24 PM, Mike Hearn wrote:
>     > Which medium is this an issue for? As you note, for files and HTTP
>     > responses it's not a problem in practice. i'd guess nor for NFC
>     tags nor
>     > QR codes.
>     >
>     >
>     > On Sun, Jan 26, 2014 at 10:11 PM, Andreas Schildbach
>     > <andreas at schildbach.de <mailto:andreas at schildbach.de>
>     <mailto:andreas at schildbach.de <mailto:andreas at schildbach.de>>> wrote:
>     >
>     >     I'm experimenting with BIP70/71 (payment protocol) usage in
>     face to face
>     >     payments (more on that soon).
>     >
>     >     I've excountered an issue with the protobuf format. Protobufs
>     are not
>     >     self-delimiting. That means if you're reading from an undelimited
>     >     stream, you will read endlessly because you don't know how
>     much to read.
>     >
>     >     The current BIP70 implementations probably work because
>     they're reading
>     >     either from a file or from an HTTP resource which sets the
>     >     Content-Length header. Trouble is the Content-Length header is
>     optional,
>     >     and also there are many kinds of streams that don't have this
>     built-in
>     >     delimiting mechanism.
>     >
>     >     The Java protobuf API solves this by offering delimited I/O, like
>     >
>     >     payment.writeDelimitedTo(os);
>     >
>     >     This writes the size of the message as a varint before writing
>     the data.
>     >     I don't know about protobuf implementations for other
>     languages but I'd
>     >     expect them to offer something compatible.
>     >
>     >     However, this leading varint is an incompatible change and
>     would need to
>     >     be added to the spec.
>     >
>     >     I specifically encountered this with PaymentMessage and
>     PaymentACK, but
>     >     it might be a good idea to apply this to all messages if any.
>     Open for
>     >     discussion.
>     >
>     >
>     >    
>     ------------------------------------------------------------------------------
>     >     CenturyLink Cloud: The Leader in Enterprise Cloud Services.
>     >     Learn Why More Businesses Are Choosing CenturyLink Cloud For
>     >     Critical Workloads, Development Environments & Everything In
>     Between.
>     >     Get a Quote or Start a Free Trial Today.
>     >    
>     http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk
>     >     _______________________________________________
>     >     Bitcoin-development mailing list
>     >     Bitcoin-development at lists.sourceforge.net
>     <mailto:Bitcoin-development at lists.sourceforge.net>
>     >     <mailto:Bitcoin-development at lists.sourceforge.net
>     <mailto:Bitcoin-development at lists.sourceforge.net>>
>     >     https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>     >
>     >
>     >
>     >
>     >
>     ------------------------------------------------------------------------------
>     > CenturyLink Cloud: The Leader in Enterprise Cloud Services.
>     > Learn Why More Businesses Are Choosing CenturyLink Cloud For
>     > Critical Workloads, Development Environments & Everything In Between.
>     > Get a Quote or Start a Free Trial Today.
>     >
>     http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk
>     >
>     >
>     >
>     > _______________________________________________
>     > Bitcoin-development mailing list
>     > Bitcoin-development at lists.sourceforge.net
>     <mailto:Bitcoin-development at lists.sourceforge.net>
>     > https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>     >
> 
> 
> 
>     ------------------------------------------------------------------------------
>     CenturyLink Cloud: The Leader in Enterprise Cloud Services.
>     Learn Why More Businesses Are Choosing CenturyLink Cloud For
>     Critical Workloads, Development Environments & Everything In Between.
>     Get a Quote or Start a Free Trial Today.
>     http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk
>     _______________________________________________
>     Bitcoin-development mailing list
>     Bitcoin-development at lists.sourceforge.net
>     <mailto:Bitcoin-development at lists.sourceforge.net>
>     https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 
> 
> 
> 
> ------------------------------------------------------------------------------
> CenturyLink Cloud: The Leader in Enterprise Cloud Services.
> Learn Why More Businesses Are Choosing CenturyLink Cloud For
> Critical Workloads, Development Environments & Everything In Between.
> Get a Quote or Start a Free Trial Today.
> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk
> 
> 
> 
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 





From mike at plan99.net  Sun Jan 26 23:01:53 2014
From: mike at plan99.net (Mike Hearn)
Date: Mon, 27 Jan 2014 00:01:53 +0100
Subject: [Bitcoin-development] BIP70/71 issue, RFD
In-Reply-To: <lc41cf$fdd$1@ger.gmane.org>
References: <lc3tm6$9ko$1@ger.gmane.org>
	<CANEZrP2F-1aqzBfUB82riWOwTABf1arbx70FdQ-XndQ91m_QqA@mail.gmail.com>
	<lc3utn$m8u$1@ger.gmane.org>
	<CANEZrP0GLcSf0B-bW7jZq5m+wdkBLe_iEok-XCCOFASGAthtug@mail.gmail.com>
	<lc41cf$fdd$1@ger.gmane.org>
Message-ID: <CANEZrP1ZV6vKLBG53u7r8DDiip-p4QKFHgy_PUz_=n88q48k2g@mail.gmail.com>

To be more accurate, the embedded messages already have length prefixes :-)


On Sun, Jan 26, 2014 at 11:14 PM, Andreas Schildbach
<andreas at schildbach.de>wrote:

> Just keep in mind that if it turns out we need to retrofit messages with
> length prefixes I fear we will have to restart with new mime-types. The
> nature of prefixes being always at the start means this rules out simply
> incrementing a protocol version number.
>
> Correcting myself:
>
> > it might be a good idea to apply this to all messages if any.
>
> Of course I only mean the "root" messages, namely PaymentRequest,
> Payment, and PaymentACK. The embedded messages don't need length prefixes.
>
>
> On 01/26/2014 11:00 PM, Mike Hearn wrote:
> > I think for "binding" the payment protocol to those transports we should
> > indeed use protobuf varint length prefixes. But it's unnecessary for all
> > cases. Unless Gavin feels it'd be better to be consistent everywhere and
> > is willing to change the spec and code - as far as I know though we're
> > trying to ship 0.9rc1 soonish .....
> >
> >
> > On Sun, Jan 26, 2014 at 10:32 PM, Andreas Schildbach
> > <andreas at schildbach.de <mailto:andreas at schildbach.de>> wrote:
> >
> >     Bluetooth, Wifi Direct, HTTP request/responses via broken proxies,
> smoke
> >     signals... basically anything that is a stream rather than a file.
> >
> >     Right, NFC NDEF and QR codes are not affected, so we can skip the
> >     delimiter for these mediums.
> >
> >
> >     On 01/26/2014 10:24 PM, Mike Hearn wrote:
> >     > Which medium is this an issue for? As you note, for files and HTTP
> >     > responses it's not a problem in practice. i'd guess nor for NFC
> >     tags nor
> >     > QR codes.
> >     >
> >     >
> >     > On Sun, Jan 26, 2014 at 10:11 PM, Andreas Schildbach
> >     > <andreas at schildbach.de <mailto:andreas at schildbach.de>
> >     <mailto:andreas at schildbach.de <mailto:andreas at schildbach.de>>>
> wrote:
> >     >
> >     >     I'm experimenting with BIP70/71 (payment protocol) usage in
> >     face to face
> >     >     payments (more on that soon).
> >     >
> >     >     I've excountered an issue with the protobuf format. Protobufs
> >     are not
> >     >     self-delimiting. That means if you're reading from an
> undelimited
> >     >     stream, you will read endlessly because you don't know how
> >     much to read.
> >     >
> >     >     The current BIP70 implementations probably work because
> >     they're reading
> >     >     either from a file or from an HTTP resource which sets the
> >     >     Content-Length header. Trouble is the Content-Length header is
> >     optional,
> >     >     and also there are many kinds of streams that don't have this
> >     built-in
> >     >     delimiting mechanism.
> >     >
> >     >     The Java protobuf API solves this by offering delimited I/O,
> like
> >     >
> >     >     payment.writeDelimitedTo(os);
> >     >
> >     >     This writes the size of the message as a varint before writing
> >     the data.
> >     >     I don't know about protobuf implementations for other
> >     languages but I'd
> >     >     expect them to offer something compatible.
> >     >
> >     >     However, this leading varint is an incompatible change and
> >     would need to
> >     >     be added to the spec.
> >     >
> >     >     I specifically encountered this with PaymentMessage and
> >     PaymentACK, but
> >     >     it might be a good idea to apply this to all messages if any.
> >     Open for
> >     >     discussion.
> >     >
> >     >
> >     >
> >
> ------------------------------------------------------------------------------
> >     >     CenturyLink Cloud: The Leader in Enterprise Cloud Services.
> >     >     Learn Why More Businesses Are Choosing CenturyLink Cloud For
> >     >     Critical Workloads, Development Environments & Everything In
> >     Between.
> >     >     Get a Quote or Start a Free Trial Today.
> >     >
> >
> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk
> >     >     _______________________________________________
> >     >     Bitcoin-development mailing list
> >     >     Bitcoin-development at lists.sourceforge.net
> >     <mailto:Bitcoin-development at lists.sourceforge.net>
> >     >     <mailto:Bitcoin-development at lists.sourceforge.net
> >     <mailto:Bitcoin-development at lists.sourceforge.net>>
> >     >
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> >     >
> >     >
> >     >
> >     >
> >     >
> >
> ------------------------------------------------------------------------------
> >     > CenturyLink Cloud: The Leader in Enterprise Cloud Services.
> >     > Learn Why More Businesses Are Choosing CenturyLink Cloud For
> >     > Critical Workloads, Development Environments & Everything In
> Between.
> >     > Get a Quote or Start a Free Trial Today.
> >     >
> >
> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk
> >     >
> >     >
> >     >
> >     > _______________________________________________
> >     > Bitcoin-development mailing list
> >     > Bitcoin-development at lists.sourceforge.net
> >     <mailto:Bitcoin-development at lists.sourceforge.net>
> >     > https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> >     >
> >
> >
> >
> >
> ------------------------------------------------------------------------------
> >     CenturyLink Cloud: The Leader in Enterprise Cloud Services.
> >     Learn Why More Businesses Are Choosing CenturyLink Cloud For
> >     Critical Workloads, Development Environments & Everything In Between.
> >     Get a Quote or Start a Free Trial Today.
> >
> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk
> >     _______________________________________________
> >     Bitcoin-development mailing list
> >     Bitcoin-development at lists.sourceforge.net
> >     <mailto:Bitcoin-development at lists.sourceforge.net>
> >     https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> >
> >
> >
> >
> >
> ------------------------------------------------------------------------------
> > CenturyLink Cloud: The Leader in Enterprise Cloud Services.
> > Learn Why More Businesses Are Choosing CenturyLink Cloud For
> > Critical Workloads, Development Environments & Everything In Between.
> > Get a Quote or Start a Free Trial Today.
> >
> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk
> >
> >
> >
> > _______________________________________________
> > Bitcoin-development mailing list
> > Bitcoin-development at lists.sourceforge.net
> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> >
>
>
>
>
> ------------------------------------------------------------------------------
> CenturyLink Cloud: The Leader in Enterprise Cloud Services.
> Learn Why More Businesses Are Choosing CenturyLink Cloud For
> Critical Workloads, Development Environments & Everything In Between.
> Get a Quote or Start a Free Trial Today.
>
> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140127/4a153af7/attachment.html>

From gavinandresen at gmail.com  Mon Jan 27 02:05:31 2014
From: gavinandresen at gmail.com (Gavin)
Date: Sun, 26 Jan 2014 21:05:31 -0500
Subject: [Bitcoin-development] BIP70/71 issue, RFD
In-Reply-To: <CANEZrP1ZV6vKLBG53u7r8DDiip-p4QKFHgy_PUz_=n88q48k2g@mail.gmail.com>
References: <lc3tm6$9ko$1@ger.gmane.org>
	<CANEZrP2F-1aqzBfUB82riWOwTABf1arbx70FdQ-XndQ91m_QqA@mail.gmail.com>
	<lc3utn$m8u$1@ger.gmane.org>
	<CANEZrP0GLcSf0B-bW7jZq5m+wdkBLe_iEok-XCCOFASGAthtug@mail.gmail.com>
	<lc41cf$fdd$1@ger.gmane.org>
	<CANEZrP1ZV6vKLBG53u7r8DDiip-p4QKFHgy_PUz_=n88q48k2g@mail.gmail.com>
Message-ID: <05783109-EFFB-4DA9-97F8-924223F7FF33@gmail.com>

Message encoding and length (or terminator or checksum or error correction or...) should be part of the transport protocol, in my humble opinion.

--
Gavin Andresen


> On Jan 26, 2014, at 6:01 PM, Mike Hearn <mike at plan99.net> wrote:
> 
> To be more accurate, the embedded messages already have length prefixes :-)
> 
> 
>> On Sun, Jan 26, 2014 at 11:14 PM, Andreas Schildbach <andreas at schildbach.de> wrote:
>> Just keep in mind that if it turns out we need to retrofit messages with
>> length prefixes I fear we will have to restart with new mime-types. The
>> nature of prefixes being always at the start means this rules out simply
>> incrementing a protocol version number.
>> 
>> Correcting myself:
>> 
>> > it might be a good idea to apply this to all messages if any.
>> 
>> Of course I only mean the "root" messages, namely PaymentRequest,
>> Payment, and PaymentACK. The embedded messages don't need length prefixes.
>> 
>> 
>> On 01/26/2014 11:00 PM, Mike Hearn wrote:
>> > I think for "binding" the payment protocol to those transports we should
>> > indeed use protobuf varint length prefixes. But it's unnecessary for all
>> > cases. Unless Gavin feels it'd be better to be consistent everywhere and
>> > is willing to change the spec and code - as far as I know though we're
>> > trying to ship 0.9rc1 soonish .....
>> >
>> >
>> > On Sun, Jan 26, 2014 at 10:32 PM, Andreas Schildbach
>> > <andreas at schildbach.de <mailto:andreas at schildbach.de>> wrote:
>> >
>> >     Bluetooth, Wifi Direct, HTTP request/responses via broken proxies, smoke
>> >     signals... basically anything that is a stream rather than a file.
>> >
>> >     Right, NFC NDEF and QR codes are not affected, so we can skip the
>> >     delimiter for these mediums.
>> >
>> >
>> >     On 01/26/2014 10:24 PM, Mike Hearn wrote:
>> >     > Which medium is this an issue for? As you note, for files and HTTP
>> >     > responses it's not a problem in practice. i'd guess nor for NFC
>> >     tags nor
>> >     > QR codes.
>> >     >
>> >     >
>> >     > On Sun, Jan 26, 2014 at 10:11 PM, Andreas Schildbach
>> >     > <andreas at schildbach.de <mailto:andreas at schildbach.de>
>> >     <mailto:andreas at schildbach.de <mailto:andreas at schildbach.de>>> wrote:
>> >     >
>> >     >     I'm experimenting with BIP70/71 (payment protocol) usage in
>> >     face to face
>> >     >     payments (more on that soon).
>> >     >
>> >     >     I've excountered an issue with the protobuf format. Protobufs
>> >     are not
>> >     >     self-delimiting. That means if you're reading from an undelimited
>> >     >     stream, you will read endlessly because you don't know how
>> >     much to read.
>> >     >
>> >     >     The current BIP70 implementations probably work because
>> >     they're reading
>> >     >     either from a file or from an HTTP resource which sets the
>> >     >     Content-Length header. Trouble is the Content-Length header is
>> >     optional,
>> >     >     and also there are many kinds of streams that don't have this
>> >     built-in
>> >     >     delimiting mechanism.
>> >     >
>> >     >     The Java protobuf API solves this by offering delimited I/O, like
>> >     >
>> >     >     payment.writeDelimitedTo(os);
>> >     >
>> >     >     This writes the size of the message as a varint before writing
>> >     the data.
>> >     >     I don't know about protobuf implementations for other
>> >     languages but I'd
>> >     >     expect them to offer something compatible.
>> >     >
>> >     >     However, this leading varint is an incompatible change and
>> >     would need to
>> >     >     be added to the spec.
>> >     >
>> >     >     I specifically encountered this with PaymentMessage and
>> >     PaymentACK, but
>> >     >     it might be a good idea to apply this to all messages if any.
>> >     Open for
>> >     >     discussion.
>> >     >
>> >     >
>> >     >
>> >     ------------------------------------------------------------------------------
>> >     >     CenturyLink Cloud: The Leader in Enterprise Cloud Services.
>> >     >     Learn Why More Businesses Are Choosing CenturyLink Cloud For
>> >     >     Critical Workloads, Development Environments & Everything In
>> >     Between.
>> >     >     Get a Quote or Start a Free Trial Today.
>> >     >
>> >     http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk
>> >     >     _______________________________________________
>> >     >     Bitcoin-development mailing list
>> >     >     Bitcoin-development at lists.sourceforge.net
>> >     <mailto:Bitcoin-development at lists.sourceforge.net>
>> >     >     <mailto:Bitcoin-development at lists.sourceforge.net
>> >     <mailto:Bitcoin-development at lists.sourceforge.net>>
>> >     >     https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>> >     >
>> >     >
>> >     >
>> >     >
>> >     >
>> >     ------------------------------------------------------------------------------
>> >     > CenturyLink Cloud: The Leader in Enterprise Cloud Services.
>> >     > Learn Why More Businesses Are Choosing CenturyLink Cloud For
>> >     > Critical Workloads, Development Environments & Everything In Between.
>> >     > Get a Quote or Start a Free Trial Today.
>> >     >
>> >     http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk
>> >     >
>> >     >
>> >     >
>> >     > _______________________________________________
>> >     > Bitcoin-development mailing list
>> >     > Bitcoin-development at lists.sourceforge.net
>> >     <mailto:Bitcoin-development at lists.sourceforge.net>
>> >     > https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>> >     >
>> >
>> >
>> >
>> >     ------------------------------------------------------------------------------
>> >     CenturyLink Cloud: The Leader in Enterprise Cloud Services.
>> >     Learn Why More Businesses Are Choosing CenturyLink Cloud For
>> >     Critical Workloads, Development Environments & Everything In Between.
>> >     Get a Quote or Start a Free Trial Today.
>> >     http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk
>> >     _______________________________________________
>> >     Bitcoin-development mailing list
>> >     Bitcoin-development at lists.sourceforge.net
>> >     <mailto:Bitcoin-development at lists.sourceforge.net>
>> >     https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>> >
>> >
>> >
>> >
>> > ------------------------------------------------------------------------------
>> > CenturyLink Cloud: The Leader in Enterprise Cloud Services.
>> > Learn Why More Businesses Are Choosing CenturyLink Cloud For
>> > Critical Workloads, Development Environments & Everything In Between.
>> > Get a Quote or Start a Free Trial Today.
>> > http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk
>> >
>> >
>> >
>> > _______________________________________________
>> > Bitcoin-development mailing list
>> > Bitcoin-development at lists.sourceforge.net
>> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>> >
>> 
>> 
>> 
>> ------------------------------------------------------------------------------
>> CenturyLink Cloud: The Leader in Enterprise Cloud Services.
>> Learn Why More Businesses Are Choosing CenturyLink Cloud For
>> Critical Workloads, Development Environments & Everything In Between.
>> Get a Quote or Start a Free Trial Today.
>> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 
> ------------------------------------------------------------------------------
> CenturyLink Cloud: The Leader in Enterprise Cloud Services.
> Learn Why More Businesses Are Choosing CenturyLink Cloud For
> Critical Workloads, Development Environments & Everything In Between.
> Get a Quote or Start a Free Trial Today.
> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140126/5708a30b/attachment.html>

From andreas at schildbach.de  Mon Jan 27 11:59:25 2014
From: andreas at schildbach.de (Andreas Schildbach)
Date: Mon, 27 Jan 2014 12:59:25 +0100
Subject: [Bitcoin-development] Payment Protocol for Face-to-face Payments
Message-ID: <lc5hmg$1jh$1@ger.gmane.org>

As promised I'd like to present my work done on leveraging the payment
protocol for face-to-face payments. The general assumption is that
individuals don't own X.509 certificates. Their devices may be only
badly connected to the internet or in some cases not at all. I've
implemented a prototype on a branch of Bitcoin Wallet. It is using
bitcoinj 0.11 (not released).

https://github.com/schildbach/bitcoin-wallet/commits/payment-protocol


TAP TO PAY

First I looked at the NFC tap-to-pay usecase. The way it works as
currently rolled out: A BIP21 URL is published using an NDEF URI
message. The URL is supplemented by a Bluetooth MAC address that can be
connected in order to finish the payment. Once connected, a very simple
custom protocol transmits the signed transaction(s) in
bitcoin-serialized form to the payee, who replies with an ack or nack.

The way I prototyped it to work in future: Instead of the BIP21 URL a
BIP70 payment request is published using an NDEF MIME message (mime-type
as per BIP71). The paymentUrl field can (and in the face-to-face case
should) contain a Bluetooth URL which contains the MAC address of the
payee. Because I could not find any standard for Bluetooth URLs, I made
up my own: "bt:112233445566" means MAC address 11:22:33:44:55:66. Once
connected, Payment message and PaymentACK reply are used to finish the
payment. Since Bluetooth sockets are streams, I had to use the delimited
variant of the protobufs for Payment and PaymentACK messages. This
prepends them with a VARINT containing the message length.

All of the above should be easy to migrate. NFC implementations are
rare, and the current Bluetooth protocol is implemented only by Bitcoin
Wallet afaik. Fallbacks are provided where necessary.

In future, I'd like to add encryption to the Bluetooth connection, maybe
using SSL and some DH key exchange.


SCAN TO PAY

For scan-to-pay, the current landscape looks different. I assume at
least 50% of Bitcoin transactions are initiated by a BIP21 URL encoded
into a QR-code. Nevertheless, I tried to encode a payment request into
the bitcoin URL. I used my existing work on encoding transactions into
QR-codes. Steps to encode:

1. The payment request is protobuf-serialized. For a simple payment
request, this results in only ~50 bytes thanks to the efficiency of
protobuf.
2. The bytes are encoded using "Base43", which is the same as
Base64/Base58, but its alphabet consists of the characters allowed in
so-called "alphanumeric" QR-codes, minus the characters not allowed in URLs.
3. The resulting string is prefixed by "BITCOIN:"
4. All of that goes into a QR-code, and because it only contains
"alphanumeric" characters, it will produce a very efficient code. For
simple payment requests, I could not notice any difference in scanning
difficulty.

There are some limitations however:

- Obviously such QR-encoded payment requests cannot grow in size as much
as using other media. In particular, I expect PKI signed requests are
out of question. However, in face to face payments the value of a sig
based on PKI is highly questionable, and the fact the sig cannot be
verified without TCP connectivity doesn't help. There should be some
headroom for multiple-output requests and moderately more complex
scripts though.

- I chose to re-use the "bitcoin:" URL scheme, because it's already
whitelisted in web browsers, QR-code scanners and so on. In order to
differentiate "payment requests URLs" from BIP21 URLs, I test for
uri.startsWith("BITCOIN:") because you'll get letters in all-caps from
alphanumeric QR-codes. I will investigate into a better solution.

- Due to wide deployment of BIP21 QR-codes, migration needs to happen in
distinct phases. Ability to parse "payment protocol URLs" comes first,
default to presenting them to users has to come (much) later.


CLICK TO PAY

Finally this is the usecase the payment protocol was invented for and
it's not face-to-face. I don't have much to add, just one thing. As a
byproduct of the above, "payment protocol URLs" can be used for links
published on web pages as well. This might provide a nice replacement
for the imho rather ugly BIP72 specification once the payment protocol
is widely deployed.


Open for discussion.




From mike at plan99.net  Mon Jan 27 13:11:40 2014
From: mike at plan99.net (Mike Hearn)
Date: Mon, 27 Jan 2014 14:11:40 +0100
Subject: [Bitcoin-development] Payment Protocol for Face-to-face Payments
In-Reply-To: <lc5hmg$1jh$1@ger.gmane.org>
References: <lc5hmg$1jh$1@ger.gmane.org>
Message-ID: <CANEZrP3POX5SACS18_rrQxx=mzmthrM418zmd8Z7-5CBNFSW4Q@mail.gmail.com>

Thanks Andreas, that's really interesting work. Comments below.

On Mon, Jan 27, 2014 at 12:59 PM, Andreas Schildbach
<andreas at schildbach.de>wrote:

> Because I could not find any standard for Bluetooth URLs, I made
> up my own: "bt:112233445566" means MAC address 11:22:33:44:55:66.


I would like to see Bluetooth continue to work for scan-to-pay even in the
signed case. So for this reason the current approach with a BTMAC parameter
in the Bitcoin URI seems to work universally across NFC tags and QR codes,
and would allow download of a signed PaymentRequest even in the case where
a QR code is used.

Because a Bitcoin URI already contains a public key (hash), re-using that
to establish an encrypted/authd connection on top of an insecure RFCOMM
socket would seem to be relatively straightforward.


> Obviously such QR-encoded payment requests cannot grow in size as much
> as using other media. In particular, I expect PKI signed requests are
> out of question. However, in face to face payments the value of a sig
> based on PKI is highly questionable, and the fact the sig cannot be
> verified without TCP connectivity doesn't help.
>

Just a correction here - the reason signed payment requests are "large"
(about 4000 bytes) is exactly because they *can* be verified offline, i.e.
by a Trezor. The signed payment request contains all the data needed to
establish its authenticity, including certificates and the signature
itself. No TCP connection is needed.

For face to face payments, I think signing is still useful. For one, we
want to keep the distinction between "merchant" and "user" as blurry and
indistinct as possible. A strong separation between merchants and consumers
is one of the many bad things about the credit card system. Whilst
initially we'd expect the payment protocol to be used by online webshops,
in future it could be used by little corner shops, children's lemonade
stands and so on. You don't want to exclude entire classes of transactions
from being secure with Trezor type devices, and besides, even without a
Trezor you probably still would like a receipt if you buy something from a
local market trader.

Another use case - we heard a story about a restaurant owner who accepted
Bitcoin. He printed a static bitcoin URI onto a QR code on the menu. A
month or two later he discovered one of his waiters had re-printed the
menus with his own QR code! The people thought they had been paying for the
meal, and in fact it went right into the pocket of the waiter.

As to how it works, well, that's not hard. Comodo give away free email
address certs with a few mouse clicks, it's no harder than signing up for a
website. Then you can just open that cert file on your phone to install it
and it should become usable automatically with a future version of
bitcoinj. Email address doesn't prove a whole lot, of course, but it's
better than nothing. If the restaurant owner had even just a hotmail
address, he could have stuck it up behind the bar or painted it on the
outside of his shop and some customer would have got suspicious when he
didn't see the address (assuming we're successful at deploying it of
course).


> - I chose to re-use the "bitcoin:" URL scheme
>

Other wallets won't know what to do with it and would yield a strange error
message.


> Finally this is the usecase the payment protocol was invented for and
> it's not face-to-face. I don't have much to add, just one thing. As a
> byproduct of the above, "payment protocol URLs" can be used for links
> published on web pages as well. This might provide a nice replacement
> for the imho rather ugly BIP72 specification once the payment protocol
> is widely deployed.


URL length is limited on some versions of internet explorer (probably on
all browsers). Rather than pack a file into a URL, if you don't want to use
the current r= extension it's better for apps to just register to handle
.bitcoinpaymentrequest files / the right MIME type. Downloading it and
opening it would do the right thing automatically.

Remember BIP 73 also! It says that with the apps built-in QR scanner, if
you scan an HTTP[S] URI, you should try downloading it with a magic header.
That way you can get a payment request file out of the server. Without the
magic header (i.e.  a normal generic barcode scanner app) it would open a
web page containing a bitcoin URI clickable link.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140127/55485834/attachment.html>

From gavinandresen at gmail.com  Mon Jan 27 14:54:09 2014
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Mon, 27 Jan 2014 09:54:09 -0500
Subject: [Bitcoin-development] BIP70: PaymentACK semantics
In-Reply-To: <lc409d$4mf$1@ger.gmane.org>
References: <lc409d$4mf$1@ger.gmane.org>
Message-ID: <CABsx9T1Y3sO6eS54wsj377BL4rGoghx1uDzD+SY3tTgc1PPbHg@mail.gmail.com>

On Sun, Jan 26, 2014 at 4:56 PM, Andreas Schildbach
<andreas at schildbach.de>wrote:

> The BIP70 is very brief on what a PaymentACK is supposed to mean. Quote:
>
> "it [PaymentACK] is sent from the merchant's server to the bitcoin
> wallet in response to a Payment message"
>
> Does it simply mean we received a syntactically correct Payment message?
>
Does it mean the Payment is valid?
> Does it mean the Payment is valid and confirmed?
> How long can we delay the ack until all conditions for payment are met?
> I assume its not a good idea to keep the HTTP (or Bluetooth, for that
> matter) connection open for an hour while waiting for a blockchain
> confirmation.
>

The purpose of PaymentACK is to give the customer reassurance that their
payment request has been received and will be processed (or not).

If it is syntactically incorrect or invalid in a way that the payment
processor can detect right away then a PaymentACK with a message saying
that there is a problem should be the response.

Waiting until confirmed is definitely not the right thing to do, but
waiting a few seconds to detect a 0-confirmation double-spend attempt
before sending back an ACK is fine.  The BIP is intentionally vague on how
long it might take to get an ACK, but, again, the intent is to give the
customer reassurance that their payment was received and is being
processed, whatever "processed" means (order sent to shipping for
fulfillment, or awaiting 11 confirmations, or "your burger is paid for you
can leave the restaurant and we won't chase after you").


--
Gavin Andresen
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140127/f50b885b/attachment.html>

From andreas at schildbach.de  Mon Jan 27 15:20:39 2014
From: andreas at schildbach.de (Andreas Schildbach)
Date: Mon, 27 Jan 2014 16:20:39 +0100
Subject: [Bitcoin-development] BIP70: PaymentACK semantics
In-Reply-To: <CABsx9T1Y3sO6eS54wsj377BL4rGoghx1uDzD+SY3tTgc1PPbHg@mail.gmail.com>
References: <lc409d$4mf$1@ger.gmane.org>
	<CABsx9T1Y3sO6eS54wsj377BL4rGoghx1uDzD+SY3tTgc1PPbHg@mail.gmail.com>
Message-ID: <lc5tfp$kbm$1@ger.gmane.org>

On 01/27/2014 03:54 PM, Gavin Andresen wrote:

> The purpose of PaymentACK is to give the customer reassurance that their
> payment request has been received and will be processed (or not).
> 
> If it is syntactically incorrect or invalid in a way that the payment
> processor can detect right away then a PaymentACK with a message saying
> that there is a problem should be the response.

Thanks for the clarification. So I am *always* supposed to reply with an
ack. I was assuming that if I actually send a nack, I would just close
the connection without sending an ack.

Maybe that should be mentioned in the spec explicitly. I must admit that
I think the name of the message is misleading -- PaymentResponse would
make this clearer.





From mike at plan99.net  Mon Jan 27 15:52:43 2014
From: mike at plan99.net (Mike Hearn)
Date: Mon, 27 Jan 2014 16:52:43 +0100
Subject: [Bitcoin-development] BIP70: PaymentACK semantics
In-Reply-To: <CABsx9T1Y3sO6eS54wsj377BL4rGoghx1uDzD+SY3tTgc1PPbHg@mail.gmail.com>
References: <lc409d$4mf$1@ger.gmane.org>
	<CABsx9T1Y3sO6eS54wsj377BL4rGoghx1uDzD+SY3tTgc1PPbHg@mail.gmail.com>
Message-ID: <CANEZrP0ENhJJhba8Xwj_cVzNKGDUQriia_Q=JWTXpztb6ic8rg@mail.gmail.com>

At the moment there's no way to distinguish between a failed / rejected
submission and a successful one beyond the freeform memo field, right? It'd
be good if we had an error code field as well, perhaps for a future version.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140127/5322d53a/attachment.html>

From jeremy at taplink.co  Mon Jan 27 17:11:08 2014
From: jeremy at taplink.co (Jeremy Spilman)
Date: Mon, 27 Jan 2014 09:11:08 -0800
Subject: [Bitcoin-development] Payment Protocol for Face-to-face Payments
In-Reply-To: <lc5hmg$1jh$1@ger.gmane.org>
References: <lc5hmg$1jh$1@ger.gmane.org>
Message-ID: <op.xacvcukvyldrnw@laptop-air>

On Mon, 27 Jan 2014 03:59:25 -0800, Andreas Schildbach  
<andreas at schildbach.de> wrote:

> SCAN TO PAY
> For scan-to-pay, the current landscape looks different. I assume at
> least 50% of Bitcoin transactions are initiated by a BIP21 URL encoded
> into a QR-code. Nevertheless, I tried to encode a payment request into
> the bitcoin URL. I used my existing work on encoding transactions into
> QR-codes. Steps to encode:

Really interesting work. When using scan-to-pay, after the payer scans the  
QR code with the protobuf PaymentRequest (not a URL to download the  
PaymentRequest) are they using their own connectivity to submit the  
Payment response?

If we assume connectivity on the phone, might as well just get a URL from  
the QR code and re-use existing infrastructure for serving that?

How about putting a Bluetooth address in the payment_url inside the  
PaymentDetails message for the smartphone to send back the Payment  
response and get PaymentAck?




From andreas at schildbach.de  Mon Jan 27 17:39:53 2014
From: andreas at schildbach.de (Andreas Schildbach)
Date: Mon, 27 Jan 2014 18:39:53 +0100
Subject: [Bitcoin-development] Payment Protocol for Face-to-face Payments
In-Reply-To: <op.xacvcukvyldrnw@laptop-air>
References: <lc5hmg$1jh$1@ger.gmane.org> <op.xacvcukvyldrnw@laptop-air>
Message-ID: <lc65ks$2tr$1@ger.gmane.org>

On 01/27/2014 06:11 PM, Jeremy Spilman wrote:

>> SCAN TO PAY
>> For scan-to-pay, the current landscape looks different. I assume at
>> least 50% of Bitcoin transactions are initiated by a BIP21 URL encoded
>> into a QR-code. Nevertheless, I tried to encode a payment request into
>> the bitcoin URL. I used my existing work on encoding transactions into
>> QR-codes. Steps to encode:
> 
> Really interesting work. When using scan-to-pay, after the payer scans the  
> QR code with the protobuf PaymentRequest (not a URL to download the  
> PaymentRequest) are they using their own connectivity to submit the  
> Payment response?
>
> How about putting a Bluetooth address in the payment_url inside the
> PaymentDetails message for the smartphone to send back the Payment
> response and get PaymentAck?

That's exactly what I have prototyped. I am putting a Bluetooth MAC
address into the payment_url. Have a look at the TAP TO PAY paragraph
for details, its mostly the same mechanism.





From jeremy at taplink.co  Mon Jan 27 18:18:16 2014
From: jeremy at taplink.co (Jeremy Spilman)
Date: Mon, 27 Jan 2014 10:18:16 -0800
Subject: [Bitcoin-development] Payment Protocol for Face-to-face Payments
In-Reply-To: <lc65ks$2tr$1@ger.gmane.org>
References: <lc5hmg$1jh$1@ger.gmane.org> <op.xacvcukvyldrnw@laptop-air>
	<lc65ks$2tr$1@ger.gmane.org>
Message-ID: <D6120A9C-C7E4-4447-8BBA-1496775A5231@taplink.co>


On Jan 27, 2014, at 9:39 AM, Andreas Schildbach <andreas at schildbach.de> wrote:

> On 01/27/2014 06:11 PM, Jeremy Spilman wrote:
> 
>>> SCAN TO PAY
>>> For scan-to-pay, the current landscape looks different. I assume at
>>> least 50% of Bitcoin transactions are initiated by a BIP21 URL encoded
>>> into a QR-code. Nevertheless, I tried to encode a payment request into
>>> the bitcoin URL. I used my existing work on encoding transactions into
>>> QR-codes. Steps to encode:
>> 
>> Really interesting work. When using scan-to-pay, after the payer scans the  
>> QR code with the protobuf PaymentRequest (not a URL to download the  
>> PaymentRequest) are they using their own connectivity to submit the  
>> Payment response?
>> 
>> How about putting a Bluetooth address in the payment_url inside the
>> PaymentDetails message for the smartphone to send back the Payment
>> response and get PaymentAck?
> 
> That's exactly what I have prototyped. I am putting a Bluetooth MAC
> address into the payment_url. Have a look at the TAP TO PAY paragraph
> for details, its mostly the same mechanism.
> 

Same mechanism for both, of course. Sorry, that was obvious. :)



From andreas at schildbach.de  Mon Jan 27 18:18:11 2014
From: andreas at schildbach.de (Andreas Schildbach)
Date: Mon, 27 Jan 2014 19:18:11 +0100
Subject: [Bitcoin-development] Payment Protocol for Face-to-face Payments
In-Reply-To: <CANEZrP3POX5SACS18_rrQxx=mzmthrM418zmd8Z7-5CBNFSW4Q@mail.gmail.com>
References: <lc5hmg$1jh$1@ger.gmane.org>
	<CANEZrP3POX5SACS18_rrQxx=mzmthrM418zmd8Z7-5CBNFSW4Q@mail.gmail.com>
Message-ID: <lc67sl$h3$1@ger.gmane.org>

On 01/27/2014 02:11 PM, Mike Hearn wrote:

> I would like to see Bluetooth continue to work for scan-to-pay even in
> the signed case. So for this reason the current approach with a BTMAC
> parameter in the Bitcoin URI seems to work universally across NFC tags
> and QR codes, and would allow download of a signed PaymentRequest even
> in the case where a QR code is used.

I'm not saying I'm against signed payment requests, but unfortunately
they are just too big for QR-codes. Then again, QR-codes *can* take up
to 2 KB. How big would a very basic trust chain plus signature be?

> Because a Bitcoin URI already contains a public key (hash), re-using
> that to establish an encrypted/authd connection on top of an insecure
> RFCOMM socket would seem to be relatively straightforward.

I was under the impression that addresses will go away. Can you
elaborate on the mechanism?

>     Obviously such QR-encoded payment requests cannot grow in size as much
>     as using other media. In particular, I expect PKI signed requests are
>     out of question. However, in face to face payments the value of a sig
>     based on PKI is highly questionable, and the fact the sig cannot be
>     verified without TCP connectivity doesn't help.
> 
> Just a correction here - the reason signed payment requests are "large"
> (about 4000 bytes) is exactly because they *can* be verified offline,
> i.e. by a Trezor. The signed payment request contains all the data
> needed to establish its authenticity, including certificates and the
> signature itself. No TCP connection is needed.

Ok, that's good news (to me). However, you are going to manage trust
stores (adding and revoking) without TCP?

> For face to face payments, I think signing is still useful. For one, we
> want to keep the distinction between "merchant" and "user" as blurry and
> indistinct as possible. A strong separation between merchants and
> consumers is one of the many bad things about the credit card system.

Ack.

> Whilst initially we'd expect the payment protocol to be used by online
> webshops, in future it could be used by little corner shops, children's
> lemonade stands and so on.

Well I'm thinking the other way round. Use Bitcoin where its already
used today -- face to face.

> you probably still would like a receipt if you buy
> something from a local market trader.

Yes, but where is the problem?

> Another use case - we heard a story about a restaurant owner who
> accepted Bitcoin. He printed a static bitcoin URI onto a QR code on the
> menu. A month or two later he discovered one of his waiters had
> re-printed the menus with his own QR code! The people thought they had
> been paying for the meal, and in fact it went right into the pocket of
> the waiter.

Sad story, but it's really a special case. Using a printed QR-code is
clearly the wrong tool for his task, for several reasons.

And again, how is he going to provide the payment request to the payer
without TCP?

> As to how it works, well, that's not hard. Comodo give away free email
> address certs with a few mouse clicks, it's no harder than signing up
> for a website.

We don't want to force people to sign up anywhere. Bitcoin is instant-on.

>     - I chose to re-use the "bitcoin:" URL scheme
>
> Other wallets won't know what to do with it and would yield a strange
> error message.

Which is why I said we need some transition time.

> Rather than pack a file into a URL, if you don't want to
> use the current r= extension it's better for apps to just register to
> handle .bitcoinpaymentrequest files / the right MIME type. Downloading
> it and opening it would do the right thing automatically.

That's a good point. I'll implement this asap.

> Remember BIP 73 also! It says that with the apps built-in QR scanner, if
> you scan an HTTP[S] URI, you should try downloading it with a magic
> header. That way you can get a payment request file out of the server.
> Without the magic header (i.e.  a normal generic barcode scanner app) it
> would open a web page containing a bitcoin URI clickable link.

Interesting, did not know about this BIP. However I don't understand the
usecase. Its not like my browsers always display QR-codes with URL of
the page being shown. And if the page in question bothers to show a QR
code, it could just as well also link to a payment request resource (as
suggested above).





From mike at plan99.net  Mon Jan 27 18:34:55 2014
From: mike at plan99.net (Mike Hearn)
Date: Mon, 27 Jan 2014 19:34:55 +0100
Subject: [Bitcoin-development] Payment Protocol for Face-to-face Payments
In-Reply-To: <lc67sl$h3$1@ger.gmane.org>
References: <lc5hmg$1jh$1@ger.gmane.org>
	<CANEZrP3POX5SACS18_rrQxx=mzmthrM418zmd8Z7-5CBNFSW4Q@mail.gmail.com>
	<lc67sl$h3$1@ger.gmane.org>
Message-ID: <CANEZrP0WkmtugRnzU2omZ6OXcc+DcGGvnpj3afgrMLgbFSf8Ag@mail.gmail.com>

On Mon, Jan 27, 2014 at 7:18 PM, Andreas Schildbach
<andreas at schildbach.de>wrote:

> I'm not saying I'm against signed payment requests, but unfortunately
> they are just too big for QR-codes. Then again, QR-codes *can* take up
> to 2 KB. How big would a very basic trust chain plus signature be?
>

As I said, the test requests generated by Gavin's generator end up being
about 4kb.

Unfortunately most certs are using RSA keys which aren't very compact. You
can get ECC certs, but for whatever reason, the test requests aren't using
one.


> I was under the impression that addresses will go away. Can you
> elaborate on the mechanism?
>

There's still an address in the URI for backwards compatibility, right? In
theory if everyone some day uses wallets that support BIP70 it'd be
superfluous and could be removed, but whilst it's there, we could find
alternative uses for it ...


> Ok, that's good news (to me). However, you are going to manage trust
> stores (adding and revoking) without TCP?
>

Trust store is just a local database. Why would it involve TCP?


> Well I'm thinking the other way round. Use Bitcoin where its already
> used today -- face to face.
>

Maybe in Berlin :-) Most of my transactions are sadly with online shops,
still.


> > you probably still would like a receipt if you buy
> > something from a local market trader.
>
> Yes, but where is the problem?
>

A receipt is a proof of purchase. If the payment request isn't signed then
it proves nothing as you could have made it yourself. Of course paper
receipts are forgeable too - we sort of pretend receipt
fraud<http://en.wikipedia.org/wiki/Return_fraud>does not exist, but it
does.

Nobody would ever be forced to sign to receive money, obviously, but it's
better if people do as it leads to herd immunity. If people expect to see
it then they will be suspicious if an attacker strips the signing data. If
it's randomly hit/miss then the signing data can just be deleted by a MITM
and you'd never think anything was amiss.

And again, how is he going to provide the payment request to the payer
> without TCP?
>

Over Bluetooth, perhaps. That's what we're talking about, right?


> Interesting, did not know about this BIP. However I don't understand the
> usecase.


It was proposed by the BitPay guys. I think they feel that scanning a QR
code should always make something intelligent happen, even if you don't
(for instance) have a wallet app installed at all. Overloading the URL so
it works for both web browsers and wallet apps is easy, so I can see why
they suggested it. Doesn't seem like a big deal either way.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140127/dcd2f111/attachment.html>

From roy at gnomon.org.uk  Mon Jan 27 20:34:36 2014
From: roy at gnomon.org.uk (Roy Badami)
Date: Mon, 27 Jan 2014 20:34:36 +0000
Subject: [Bitcoin-development] Payment Protocol for Face-to-face Payments
In-Reply-To: <op.xacvcukvyldrnw@laptop-air>
References: <lc5hmg$1jh$1@ger.gmane.org>
 <op.xacvcukvyldrnw@laptop-air>
Message-ID: <20140127203435.GU38964@giles.gnomon.org.uk>

On Mon, Jan 27, 2014 at 09:11:08AM -0800, Jeremy Spilman wrote:
> On Mon, 27 Jan 2014 03:59:25 -0800, Andreas Schildbach  
> <andreas at schildbach.de> wrote:
> 
> > SCAN TO PAY
> > For scan-to-pay, the current landscape looks different. I assume at
> > least 50% of Bitcoin transactions are initiated by a BIP21 URL encoded
> > into a QR-code. Nevertheless, I tried to encode a payment request into
> > the bitcoin URL. I used my existing work on encoding transactions into
> > QR-codes. Steps to encode:
> 
> Really interesting work. When using scan-to-pay, after the payer scans the  
> QR code with the protobuf PaymentRequest (not a URL to download the  
> PaymentRequest) are they using their own connectivity to submit the  
> Payment response?
> 
> If we assume connectivity on the phone, might as well just get a URL from  
> the QR code and re-use existing infrastructure for serving that?

My first thought was likewise.  In the case where the phone needs
Internet connectivity anyway, why not include an HTTPS URL in a BIP 72 URL?

I'm assuming that every client will have to support this is any case,
since it's effectively mandated by the BIP, so why add another mode of
operation?

However, PaymentRequest-over-QR-code does seem to me to have one
rather attractive advantage: the authentication model is orders of
magnitude simpler and more intuitive for a face-to-face transaction
than anything else.  You're saying "pay the coins to that thing over
there displaying that QR code".  Which, most of the time, is exactly
what you want.

In the web case, it's fine to ignore the case where the URL domain has
been subverted (and an cert obtained by the attacker) because in that
case you've lost before you even get to payments (MitM attacker shows
you a modified web page with different payment details).  But the
face-to-face case isn't intrinsically dependent on SSL security, and
it's nice not to introduce that attack vector...

roy




From andreas at schildbach.de  Mon Jan 27 20:53:49 2014
From: andreas at schildbach.de (Andreas Schildbach)
Date: Mon, 27 Jan 2014 21:53:49 +0100
Subject: [Bitcoin-development] Experiment with linking payment requests via
	href
In-Reply-To: <lc67sl$h3$1@ger.gmane.org>
References: <lc5hmg$1jh$1@ger.gmane.org>	<CANEZrP3POX5SACS18_rrQxx=mzmthrM418zmd8Z7-5CBNFSW4Q@mail.gmail.com>
	<lc67sl$h3$1@ger.gmane.org>
Message-ID: <lc6h0g$i3c$1@ger.gmane.org>

On 01/27/2014 07:18 PM, Andreas Schildbach wrote:

>> Rather than pack a file into a URL, if you don't want to
>> use the current r= extension it's better for apps to just register to
>> handle .bitcoinpaymentrequest files / the right MIME type. Downloading
>> it and opening it would do the right thing automatically.
> 
> That's a good point. I'll implement this asap.

It doesn't look too good. I've tried Chrome, the AOSP browser and
Firefox. All insist on handling the link with their download manager,
which would involve an additional click. In the case of Chrome and AOSP,
that download manager a separate component that is not updatable with
the browser (rather its tied to the OS version afaik).

If you click on the file in the download manager of Chrome and AOSP it
opens as expected. On Firefox, it just ignores the click.

I registered the correct mime type and also set the mime type of the
href just in case. In case you want to have a look at the href, its on
http://wallet.schildbach.de and links to Gavins generator.

I didn't try suffixes, but I'd assume it behaves similar.

Any ideas what else to try?





From mike at plan99.net  Mon Jan 27 21:47:55 2014
From: mike at plan99.net (Mike Hearn)
Date: Mon, 27 Jan 2014 22:47:55 +0100
Subject: [Bitcoin-development] Experiment with linking payment requests
 via href
In-Reply-To: <lc6h0g$i3c$1@ger.gmane.org>
References: <lc5hmg$1jh$1@ger.gmane.org>
	<CANEZrP3POX5SACS18_rrQxx=mzmthrM418zmd8Z7-5CBNFSW4Q@mail.gmail.com>
	<lc67sl$h3$1@ger.gmane.org> <lc6h0g$i3c$1@ger.gmane.org>
Message-ID: <CANEZrP2yck_H8u+F4AQzqaE9yaTxYyfNa5VSXdyOmuZSv07hqw@mail.gmail.com>

>
> All insist on handling the link with their download manager, which would
> involve an additional click.


That's the expected behaviour, right? That's why I said "download and
open". The Bitcoin URI with r= is better because it lets you remove that
second click, but in some contexts the file approach is the right way to go
- like for an email attachment or payment request sent via WhatsApp.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140127/d0b68c67/attachment.html>

From kgreenek at gmail.com  Mon Jan 27 22:03:22 2014
From: kgreenek at gmail.com (Kevin Greene)
Date: Mon, 27 Jan 2014 14:03:22 -0800
Subject: [Bitcoin-development] BIP70: PaymentACK semantics
In-Reply-To: <CANEZrP0ENhJJhba8Xwj_cVzNKGDUQriia_Q=JWTXpztb6ic8rg@mail.gmail.com>
References: <lc409d$4mf$1@ger.gmane.org>
	<CABsx9T1Y3sO6eS54wsj377BL4rGoghx1uDzD+SY3tTgc1PPbHg@mail.gmail.com>
	<CANEZrP0ENhJJhba8Xwj_cVzNKGDUQriia_Q=JWTXpztb6ic8rg@mail.gmail.com>
Message-ID: <CAEY8wq4QEO1rtaNdjHXR6-b3Cgi7pfSWk7M8khVi0MHCiVOBzQ@mail.gmail.com>

+1 for an error field.

Should the wallet broadcast the transaction to the bitcoin network when it
receives an ACK, or always assume that the merchant server will do that?


On Mon, Jan 27, 2014 at 7:52 AM, Mike Hearn <mike at plan99.net> wrote:

> At the moment there's no way to distinguish between a failed / rejected
> submission and a successful one beyond the freeform memo field, right? It'd
> be good if we had an error code field as well, perhaps for a future version.
>
>
> ------------------------------------------------------------------------------
> CenturyLink Cloud: The Leader in Enterprise Cloud Services.
> Learn Why More Businesses Are Choosing CenturyLink Cloud For
> Critical Workloads, Development Environments & Everything In Between.
> Get a Quote or Start a Free Trial Today.
>
> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140127/96cae56c/attachment.html>

From pieter.wuille at gmail.com  Mon Jan 27 22:17:58 2014
From: pieter.wuille at gmail.com (Pieter Wuille)
Date: Mon, 27 Jan 2014 23:17:58 +0100
Subject: [Bitcoin-development] BIP70: PaymentACK semantics
In-Reply-To: <CAEY8wq4QEO1rtaNdjHXR6-b3Cgi7pfSWk7M8khVi0MHCiVOBzQ@mail.gmail.com>
References: <lc409d$4mf$1@ger.gmane.org>
	<CABsx9T1Y3sO6eS54wsj377BL4rGoghx1uDzD+SY3tTgc1PPbHg@mail.gmail.com>
	<CANEZrP0ENhJJhba8Xwj_cVzNKGDUQriia_Q=JWTXpztb6ic8rg@mail.gmail.com>
	<CAEY8wq4QEO1rtaNdjHXR6-b3Cgi7pfSWk7M8khVi0MHCiVOBzQ@mail.gmail.com>
Message-ID: <CAPg+sBgUNYqYm7d4Rv+f0rBa=nSuqwmZ6_REBS7M-+Wea+za0g@mail.gmail.com>

On Mon, Jan 27, 2014 at 11:03 PM, Kevin Greene <kgreenek at gmail.com> wrote:
> +1 for an error field.

Agree, I think we need a way for client applications to interpret the response.

> Should the wallet broadcast the transaction to the bitcoin network when it
> receives an ACK, or always assume that the merchant server will do that?

In my opinion, that should be the primary meaning of receiving an ACK:
acknowledgement that the receiver takes responsibility for getting the
transaction confirmed (to the extent possible, of course).


-- 
Pieter



From kgreenek at gmail.com  Mon Jan 27 22:39:56 2014
From: kgreenek at gmail.com (Kevin Greene)
Date: Mon, 27 Jan 2014 14:39:56 -0800
Subject: [Bitcoin-development] BIP70: PaymentACK semantics
In-Reply-To: <CAPg+sBgUNYqYm7d4Rv+f0rBa=nSuqwmZ6_REBS7M-+Wea+za0g@mail.gmail.com>
References: <lc409d$4mf$1@ger.gmane.org>
	<CABsx9T1Y3sO6eS54wsj377BL4rGoghx1uDzD+SY3tTgc1PPbHg@mail.gmail.com>
	<CANEZrP0ENhJJhba8Xwj_cVzNKGDUQriia_Q=JWTXpztb6ic8rg@mail.gmail.com>
	<CAEY8wq4QEO1rtaNdjHXR6-b3Cgi7pfSWk7M8khVi0MHCiVOBzQ@mail.gmail.com>
	<CAPg+sBgUNYqYm7d4Rv+f0rBa=nSuqwmZ6_REBS7M-+Wea+za0g@mail.gmail.com>
Message-ID: <CAEY8wq6n_27Y2N7fVw9uJkfiiYqi6JkTwO0q03_J7tUeBhdQYA@mail.gmail.com>

>> Should the wallet broadcast the transaction to the bitcoin network when
it
>> receives an ACK, or always assume that the merchant server will do that?
>
> In my opinion, that should be the primary meaning of receiving an ACK:
> acknowledgement that the receiver takes responsibility for getting the
> transaction confirmed (to the extent possible, of course).

Ok, so if there is no
payment
_url specified in the PaymentRequest, then the wallet is responsible for
broadcasting
the transaction to the bitcoin network
.
Otherwise, the wallet should
rely on the merchant server to broadcast.


On Mon, Jan 27, 2014 at 2:17 PM, Pieter Wuille <pieter.wuille at gmail.com>wrote:

> On Mon, Jan 27, 2014 at 11:03 PM, Kevin Greene <kgreenek at gmail.com> wrote:
> > +1 for an error field.
>
> Agree, I think we need a way for client applications to interpret the
> response.
>
> > Should the wallet broadcast the transaction to the bitcoin network when
> it
> > receives an ACK, or always assume that the merchant server will do that?
>
> In my opinion, that should be the primary meaning of receiving an ACK:
> acknowledgement that the receiver takes responsibility for getting the
> transaction confirmed (to the extent possible, of course).


>
> --
> Pieter
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140127/a97c0293/attachment.html>

From stephane at kill-bill.org  Tue Jan 28 02:36:34 2014
From: stephane at kill-bill.org (Stephane Brossier)
Date: Mon, 27 Jan 2014 18:36:34 -0800
Subject: [Bitcoin-development] Extension for BIP-0070 to support recurring
	payments
Message-ID: <E1FDB3F2-25ED-4B99-979E-12CE943CBD66@kill-bill.org>

Hi,

[I sent this email 2 days ago prior my registration to the mailing list; please forgive me if this is a duplicate]

I would like to propose an extension to the Payment Protocol (bip-0070) to address the case of recurring payments in Bitcoin -- new bip or modification of bip-0070.

There has been a lot of growth in the last few years in the 'subscription economy' with many new companies embracing that model -- online video, gaming, groceries, newspapers,... In parallel, Bitcoin is growing into a mainstream currency (hence bip-0070), and so the next logical step would be to define a protocol to address that need.

We have been working in the past few years on an open-source billing platform (http://kill-bill.org/), and recently came with a prototype to do recurring billing in Bitcoin (see http://thekillbillstory.wordpress.com/2014/01/20/bitcoin-plugin/ and http://thekillbillstory.wordpress.com/2014/01/11/coinbase-integration-experiment/).


The work flow would look similar to the one from bip-0070. There would need to be some additions; the flow could be summarized as follow:

0. Click: 'Subscribe Now'
1. Wallet would get  a RecurringPaymentRequestAuth which describes the nature of the future recurring payments
2. The Customer would get prompted from the wallet to authorize it.
3. The wallet would then poll the Merchant server (startup time, and/or well defined frequency) and potentially merchant would start issuing a PaymentRequest); the role of the wallet is to ensure that PaymentRequest is within the bounds of what was accepted by the customer-- amount, frequency,.. If it is, then it would make the Payment the same way it works for bip-0070

Is that something that the community would be interested in? We could provide more details about the protocol we have in mind (messages and flow), and also provide an implementation with bitcoinj as a wallet and Kill Bill as a merchant server.

Le me know what you think.

St?phane
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140127/a12cf437/attachment.html>

From kgreenek at gmail.com  Tue Jan 28 03:58:21 2014
From: kgreenek at gmail.com (Kevin Greene)
Date: Mon, 27 Jan 2014 19:58:21 -0800
Subject: [Bitcoin-development] Extension for BIP-0070 to support
	recurring payments
In-Reply-To: <E1FDB3F2-25ED-4B99-979E-12CE943CBD66@kill-bill.org>
References: <E1FDB3F2-25ED-4B99-979E-12CE943CBD66@kill-bill.org>
Message-ID: <CAEY8wq7zyE4JGBwQXjjxjfGMrgyPwfEeVVty5cw4sniFXVnEwg@mail.gmail.com>

+1 to the idea of recurring payment requests.

Perhaps one way to realize this would be to add an optional URL to the
PaymentRequest object where the next PaymentRequest can be fetched and the
date at which the merchant expects the next payment.


On Mon, Jan 27, 2014 at 6:36 PM, Stephane Brossier
<stephane at kill-bill.org>wrote:

> Hi,
>
> [I sent this email 2 days ago prior my registration to the mailing list;
> please forgive me if this is a duplicate]
>
> I would like to propose an extension to the Payment Protocol (bip-0070) to
> address the case of recurring payments in Bitcoin -- new bip or
> modification of bip-0070.
>
> There has been a lot of growth in the last few years in the 'subscription
> economy' with many new companies embracing that model -- online video,
> gaming, groceries, newspapers,... In parallel, Bitcoin is growing into a
> mainstream currency (hence bip-0070), and so the next logical step would be
> to define a protocol to address that need.
>
> We have been working in the past few years on an open-source billing
> platform (http://kill-bill.org/), and recently came with a prototype to
> do recurring billing in Bitcoin (see
> http://thekillbillstory.wordpress.com/2014/01/20/bitcoin-plugin/ and
> http://thekillbillstory.wordpress.com/2014/01/11/coinbase-integration-experiment/
> ).
>
>
> The work flow would look similar to the one from bip-0070. There would
> need to be some additions; the flow could be summarized as follow:
>
> 0. Click: 'Subscribe Now'
> 1. Wallet would get  a RecurringPaymentRequestAuth which describes the
> nature of the future recurring payments
> 2. The Customer would get prompted from the wallet to authorize it.
> 3. The wallet would then poll the Merchant server (startup time, and/or
> well defined frequency) and potentially merchant would start issuing a
> PaymentRequest); the role of the wallet is to ensure that PaymentRequest is
> within the bounds of what was accepted by the customer-- amount,
> frequency,.. If it is, then it would make the Payment the same way it works
> for bip-0070
>
> Is that something that the community would be interested in? We could
> provide more details about the protocol we have in mind (messages and
> flow), and also provide an implementation with bitcoinj as a wallet and
> Kill Bill as a merchant server.
>
> Le me know what you think.
>
> St?phane
>
>
> ------------------------------------------------------------------------------
> WatchGuard Dimension instantly turns raw network data into actionable
> security intelligence. It gives you real-time visual feedback on key
> security issues and trends.  Skip the complicated setup - simply import
> a virtual appliance and go from zero to informed in seconds.
>
> http://pubads.g.doubleclick.net/gampad/clk?id=123612991&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140127/f154809e/attachment.html>

From jgarzik at bitpay.com  Tue Jan 28 04:29:55 2014
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Mon, 27 Jan 2014 23:29:55 -0500
Subject: [Bitcoin-development] Extension for BIP-0070 to support
	recurring payments
In-Reply-To: <E1FDB3F2-25ED-4B99-979E-12CE943CBD66@kill-bill.org>
References: <E1FDB3F2-25ED-4B99-979E-12CE943CBD66@kill-bill.org>
Message-ID: <CAJHLa0P-Pu_hhaeogAH4QmOkypFWgvJkGADUwDvzoXwndvyTOg@mail.gmail.com>

Yes, recurring payments and subscriptions is a frequently-requested
feature.  It needs a new BIP.  Here is an outline:

The situation is somewhat analogous to HTML5 local storage.  The
remote (merchant) wants to initiate a persistent behavior.

Note: This is ONE

-- 
Jeff Garzik
Bitcoin core developer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From jgarzik at bitpay.com  Tue Jan 28 04:43:58 2014
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Mon, 27 Jan 2014 23:43:58 -0500
Subject: [Bitcoin-development] Extension for BIP-0070 to support
	recurring payments
In-Reply-To: <E1FDB3F2-25ED-4B99-979E-12CE943CBD66@kill-bill.org>
References: <E1FDB3F2-25ED-4B99-979E-12CE943CBD66@kill-bill.org>
Message-ID: <CAJHLa0NvufgU6NUKWR6a_foibtEVGSmpMjTB2_pqFhqrEGMssw@mail.gmail.com>

Yes, recurring payments and subscriptions is a frequently-requested
feature.  It needs a new BIP.  Here is an outline:

The situation is somewhat analogous to HTML5 local storage.  The remote
(merchant) wants to initiate a persistent behavior.  This is bitcoin, so we
have a "push" model for payment, and the user has complete control.  The
merchant can, at most, send a "subscription request."  The user is
responsible for making on-time payments after that point.

Centralized services like coinbase.com or blockchain.info will have an easy
time of it.  An automated program on their backend, sending payments as
needed, is easy and direct.

More inventive services might employ multisig transactions, generating and
signing one signature of a TX, then sending that TX to the human for
further signing and publishing.  A few competing vendors could offer bots
that provide this signing service.

Decentralized, standalone wallet clients will be somewhat troublesome.  We
can store a local subscription request, and send recurring payments...  if
the wallet app is running.  If not, the user will be missing payments, that
perhaps they intended to make (rent!).

Each of these solutions can be cancelled at any time by the user.  As such,
a courtesy "subscription cancelled" message sent to the merchant is
recommended.  User controls the usage of their money at all times, the way
things should be.

And finally, you do not want to make it /too easy/ to send money over and
over again.  From a human-interface perspective, a textual reminder to send
money might be preferred over actual recurring payment automation: reminder
email + manual spend inserts a bit of additional human thought and review
into the process, with all that entails.

-- 
Jeff Garzik
Bitcoin core developer and open source evangelist
BitPay, Inc.      https://bitpay.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140127/9f0d3050/attachment.html>

From hello at PikaPay.com  Tue Jan 28 05:07:56 2014
From: hello at PikaPay.com (PikaPay)
Date: Tue, 28 Jan 2014 06:07:56 +0100
Subject: [Bitcoin-development] Extension for BIP-0070 to support
	recurring payments
In-Reply-To: <CAJHLa0NvufgU6NUKWR6a_foibtEVGSmpMjTB2_pqFhqrEGMssw@mail.gmail.com>
References: <E1FDB3F2-25ED-4B99-979E-12CE943CBD66@kill-bill.org>
	<CAJHLa0NvufgU6NUKWR6a_foibtEVGSmpMjTB2_pqFhqrEGMssw@mail.gmail.com>
Message-ID: <CAOSy_v23XyamSMmDtkm6aoAUozoKfkqA5FkvoY6PoaB05Xfvpg@mail.gmail.com>

It could be useful to schedule x payments for y amount every z time
period, but you'd want to be able to pause or cancel at any time.

If you want the merchant to be able to request a series of payments
like a subscription, the merchant might also be able to request that
the subscription be paused or cancelled as well.


-  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
Richard Kohl  -  richard at pikapay.com

Twitter: @generalseven
Phone: +31 6 284 00112

PikaPay: Send Bitcoins with Twitter



From odinn.cyberguerrilla at riseup.net  Tue Jan 28 06:08:43 2014
From: odinn.cyberguerrilla at riseup.net (Odinn Cyberguerrilla)
Date: Mon, 27 Jan 2014 22:08:43 -0800
Subject: [Bitcoin-development] Extension for BIP-0070 to support
 recurring payments
In-Reply-To: <CAJHLa0NvufgU6NUKWR6a_foibtEVGSmpMjTB2_pqFhqrEGMssw@mail.gmail.com>
References: <E1FDB3F2-25ED-4B99-979E-12CE943CBD66@kill-bill.org>
	<CAJHLa0NvufgU6NUKWR6a_foibtEVGSmpMjTB2_pqFhqrEGMssw@mail.gmail.com>
Message-ID: <ffaba6419d12b997feb1f421538d3b0b.squirrel@fulvetta.riseup.net>

Greatly appreciate seeing this discussion occur.  This is something that
potentially could be supported through a bounty - possibly a process BIP?

Possibly related: https://gist.github.com/ABISprotocol/8515891

> Yes, recurring payments and subscriptions is a frequently-requested
> feature.  It needs a new BIP.  Here is an outline:
>
> The situation is somewhat analogous to HTML5 local storage.  The remote
> (merchant) wants to initiate a persistent behavior.  This is bitcoin, so
> we
> have a "push" model for payment, and the user has complete control.  The
> merchant can, at most, send a "subscription request."  The user is
> responsible for making on-time payments after that point.
>
> Centralized services like coinbase.com or blockchain.info will have an
> easy
> time of it.  An automated program on their backend, sending payments as
> needed, is easy and direct.
>
> More inventive services might employ multisig transactions, generating and
> signing one signature of a TX, then sending that TX to the human for
> further signing and publishing.  A few competing vendors could offer bots
> that provide this signing service.
>
> Decentralized, standalone wallet clients will be somewhat troublesome.  We
> can store a local subscription request, and send recurring payments...  if
> the wallet app is running.  If not, the user will be missing payments,
> that
> perhaps they intended to make (rent!).
>
> Each of these solutions can be cancelled at any time by the user.  As
> such,
> a courtesy "subscription cancelled" message sent to the merchant is
> recommended.  User controls the usage of their money at all times, the way
> things should be.
>
> And finally, you do not want to make it /too easy/ to send money over and
> over again.  From a human-interface perspective, a textual reminder to
> send
> money might be preferred over actual recurring payment automation:
> reminder
> email + manual spend inserts a bit of additional human thought and review
> into the process, with all that entails.
>
> --
> Jeff Garzik
> Bitcoin core developer and open source evangelist
> BitPay, Inc.      https://bitpay.com/
> ------------------------------------------------------------------------------
> WatchGuard Dimension instantly turns raw network data into actionable
> security intelligence. It gives you real-time visual feedback on key
> security issues and trends.  Skip the complicated setup - simply import
> a virtual appliance and go from zero to informed in seconds.
> http://pubads.g.doubleclick.net/gampad/clk?id=123612991&iu=/4140/ostg.clktrk_______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>





From mike at plan99.net  Tue Jan 28 06:34:20 2014
From: mike at plan99.net (Mike Hearn)
Date: Tue, 28 Jan 2014 07:34:20 +0100
Subject: [Bitcoin-development] Extension for BIP-0070 to support
	recurring payments
In-Reply-To: <E1FDB3F2-25ED-4B99-979E-12CE943CBD66@kill-bill.org>
References: <E1FDB3F2-25ED-4B99-979E-12CE943CBD66@kill-bill.org>
Message-ID: <CANEZrP10z6_UAHD97mj22kVEGyXgHPQ2PdP_8RxHT5Py+xRP_A@mail.gmail.com>

I think the right approach for this is to actually implement it and
*then* propose
a BIP. There are so many possible features we could add to the payment
protocol, any other approach would rapidly turn into lots of people
deciding to do the "fun bits" and often leaving others doing the hard work
with difficult or unworkable specs.

For instance, if you try to implement this, you would rapidly discover that
it probably makes more sense to do this as an additional set of fields in
PaymentDetails rather than a new message type entirely. A new top level
message type would in turn require new MIME types, URI extensions and so
on. That doesn't make any sense.

Once you decide to extend PaymentDetails, the next discovery would be that
it probably makes sense to try and solve the problem of address re-use for
recurring payments first, before speccing out time intervals and so on.
That's a separate BIP.

I'm all for adding recurring payments as a feature, that's what the
protocol is there for. But I'd like to see future protocol extension
requests come after at least one working implementation has been made .....


On Tue, Jan 28, 2014 at 3:36 AM, Stephane Brossier
<stephane at kill-bill.org>wrote:

> Hi,
>
> [I sent this email 2 days ago prior my registration to the mailing list;
> please forgive me if this is a duplicate]
>
> I would like to propose an extension to the Payment Protocol (bip-0070) to
> address the case of recurring payments in Bitcoin -- new bip or
> modification of bip-0070.
>
> There has been a lot of growth in the last few years in the 'subscription
> economy' with many new companies embracing that model -- online video,
> gaming, groceries, newspapers,... In parallel, Bitcoin is growing into a
> mainstream currency (hence bip-0070), and so the next logical step would be
> to define a protocol to address that need.
>
> We have been working in the past few years on an open-source billing
> platform (http://kill-bill.org/), and recently came with a prototype to
> do recurring billing in Bitcoin (see
> http://thekillbillstory.wordpress.com/2014/01/20/bitcoin-plugin/ and
> http://thekillbillstory.wordpress.com/2014/01/11/coinbase-integration-experiment/
> ).
>
>
> The work flow would look similar to the one from bip-0070. There would
> need to be some additions; the flow could be summarized as follow:
>
> 0. Click: 'Subscribe Now'
> 1. Wallet would get  a RecurringPaymentRequestAuth which describes the
> nature of the future recurring payments
> 2. The Customer would get prompted from the wallet to authorize it.
> 3. The wallet would then poll the Merchant server (startup time, and/or
> well defined frequency) and potentially merchant would start issuing a
> PaymentRequest); the role of the wallet is to ensure that PaymentRequest is
> within the bounds of what was accepted by the customer-- amount,
> frequency,.. If it is, then it would make the Payment the same way it works
> for bip-0070
>
> Is that something that the community would be interested in? We could
> provide more details about the protocol we have in mind (messages and
> flow), and also provide an implementation with bitcoinj as a wallet and
> Kill Bill as a merchant server.
>
> Le me know what you think.
>
> St?phane
>
>
> ------------------------------------------------------------------------------
> WatchGuard Dimension instantly turns raw network data into actionable
> security intelligence. It gives you real-time visual feedback on key
> security issues and trends.  Skip the complicated setup - simply import
> a virtual appliance and go from zero to informed in seconds.
>
> http://pubads.g.doubleclick.net/gampad/clk?id=123612991&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140128/de263dbf/attachment.html>

From jgarzik at bitpay.com  Tue Jan 28 06:48:42 2014
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Tue, 28 Jan 2014 01:48:42 -0500
Subject: [Bitcoin-development] Extension for BIP-0070 to support
	recurring payments
In-Reply-To: <ffaba6419d12b997feb1f421538d3b0b.squirrel@fulvetta.riseup.net>
References: <E1FDB3F2-25ED-4B99-979E-12CE943CBD66@kill-bill.org>
	<CAJHLa0NvufgU6NUKWR6a_foibtEVGSmpMjTB2_pqFhqrEGMssw@mail.gmail.com>
	<ffaba6419d12b997feb1f421538d3b0b.squirrel@fulvetta.riseup.net>
Message-ID: <CAJHLa0P9cXWb-dOGL-A-iNTkELz3fO-woihiprD5NiUi_V74Yw@mail.gmail.com>

Let's keep fund raising off this mailing list, please.  PS bounties don't
work.


On Tue, Jan 28, 2014 at 1:08 AM, Odinn Cyberguerrilla <
odinn.cyberguerrilla at riseup.net> wrote:

> Greatly appreciate seeing this discussion occur.  This is something that
> potentially could be supported through a bounty - possibly a process BIP?
>
> Possibly related: https://gist.github.com/ABISprotocol/8515891
>
> > Yes, recurring payments and subscriptions is a frequently-requested
> > feature.  It needs a new BIP.  Here is an outline:
> >
> > The situation is somewhat analogous to HTML5 local storage.  The remote
> > (merchant) wants to initiate a persistent behavior.  This is bitcoin, so
> > we
> > have a "push" model for payment, and the user has complete control.  The
> > merchant can, at most, send a "subscription request."  The user is
> > responsible for making on-time payments after that point.
> >
> > Centralized services like coinbase.com or blockchain.info will have an
> > easy
> > time of it.  An automated program on their backend, sending payments as
> > needed, is easy and direct.
> >
> > More inventive services might employ multisig transactions, generating
> and
> > signing one signature of a TX, then sending that TX to the human for
> > further signing and publishing.  A few competing vendors could offer bots
> > that provide this signing service.
> >
> > Decentralized, standalone wallet clients will be somewhat troublesome.
>  We
> > can store a local subscription request, and send recurring payments...
>  if
> > the wallet app is running.  If not, the user will be missing payments,
> > that
> > perhaps they intended to make (rent!).
> >
> > Each of these solutions can be cancelled at any time by the user.  As
> > such,
> > a courtesy "subscription cancelled" message sent to the merchant is
> > recommended.  User controls the usage of their money at all times, the
> way
> > things should be.
> >
> > And finally, you do not want to make it /too easy/ to send money over and
> > over again.  From a human-interface perspective, a textual reminder to
> > send
> > money might be preferred over actual recurring payment automation:
> > reminder
> > email + manual spend inserts a bit of additional human thought and review
> > into the process, with all that entails.
> >
> > --
> > Jeff Garzik
> > Bitcoin core developer and open source evangelist
> > BitPay, Inc.      https://bitpay.com/
> >
> ------------------------------------------------------------------------------
> > WatchGuard Dimension instantly turns raw network data into actionable
> > security intelligence. It gives you real-time visual feedback on key
> > security issues and trends.  Skip the complicated setup - simply import
> > a virtual appliance and go from zero to informed in seconds.
> >
> http://pubads.g.doubleclick.net/gampad/clk?id=123612991&iu=/4140/ostg.clktrk_______________________________________________
> > Bitcoin-development mailing list
> > Bitcoin-development at lists.sourceforge.net
> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> >
>
>
>


-- 
Jeff Garzik
Bitcoin core developer and open source evangelist
BitPay, Inc.      https://bitpay.com/
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140128/d8612bb0/attachment.html>

From mike at plan99.net  Tue Jan 28 11:42:58 2014
From: mike at plan99.net (Mike Hearn)
Date: Tue, 28 Jan 2014 12:42:58 +0100
Subject: [Bitcoin-development] BIP70: PaymentACK semantics
In-Reply-To: <CAEY8wq6n_27Y2N7fVw9uJkfiiYqi6JkTwO0q03_J7tUeBhdQYA@mail.gmail.com>
References: <lc409d$4mf$1@ger.gmane.org>
	<CABsx9T1Y3sO6eS54wsj377BL4rGoghx1uDzD+SY3tTgc1PPbHg@mail.gmail.com>
	<CANEZrP0ENhJJhba8Xwj_cVzNKGDUQriia_Q=JWTXpztb6ic8rg@mail.gmail.com>
	<CAEY8wq4QEO1rtaNdjHXR6-b3Cgi7pfSWk7M8khVi0MHCiVOBzQ@mail.gmail.com>
	<CAPg+sBgUNYqYm7d4Rv+f0rBa=nSuqwmZ6_REBS7M-+Wea+za0g@mail.gmail.com>
	<CAEY8wq6n_27Y2N7fVw9uJkfiiYqi6JkTwO0q03_J7tUeBhdQYA@mail.gmail.com>
Message-ID: <CANEZrP0HVJ7Uzow1=4-20LnejURqO5uo16H43uhL=TtNfzhAxQ@mail.gmail.com>

Yeah, that's the interpretation I think we should go with for now. There
was a reason why this isn't specified and I forgot what it was - some
inability to come to agreement on when to broadcast vs when to submit via
HTTP, I think.




On Mon, Jan 27, 2014 at 11:39 PM, Kevin Greene <kgreenek at gmail.com> wrote:

> >> Should the wallet broadcast the transaction to the bitcoin network when
> it
> >> receives an ACK, or always assume that the merchant server will do that?
> >
> > In my opinion, that should be the primary meaning of receiving an ACK:
> > acknowledgement that the receiver takes responsibility for getting the
> > transaction confirmed (to the extent possible, of course).
>
> Ok, so if there is no
> payment
> _url specified in the PaymentRequest, then the wallet is responsible for
> broadcasting
> the transaction to the bitcoin network
> .
> Otherwise, the wallet should
> rely on the merchant server to broadcast.
>
>
> On Mon, Jan 27, 2014 at 2:17 PM, Pieter Wuille <pieter.wuille at gmail.com>wrote:
>
>> On Mon, Jan 27, 2014 at 11:03 PM, Kevin Greene <kgreenek at gmail.com>
>> wrote:
>> > +1 for an error field.
>>
>> Agree, I think we need a way for client applications to interpret the
>> response.
>>
>> > Should the wallet broadcast the transaction to the bitcoin network when
>> it
>> > receives an ACK, or always assume that the merchant server will do that?
>>
>> In my opinion, that should be the primary meaning of receiving an ACK:
>> acknowledgement that the receiver takes responsibility for getting the
>> transaction confirmed (to the extent possible, of course).
>
>
>>
>> --
>> Pieter
>>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140128/9ccedef8/attachment.html>

From gavinandresen at gmail.com  Tue Jan 28 12:53:14 2014
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Tue, 28 Jan 2014 07:53:14 -0500
Subject: [Bitcoin-development] BIP70: PaymentACK semantics
In-Reply-To: <CANEZrP0HVJ7Uzow1=4-20LnejURqO5uo16H43uhL=TtNfzhAxQ@mail.gmail.com>
References: <lc409d$4mf$1@ger.gmane.org>
	<CABsx9T1Y3sO6eS54wsj377BL4rGoghx1uDzD+SY3tTgc1PPbHg@mail.gmail.com>
	<CANEZrP0ENhJJhba8Xwj_cVzNKGDUQriia_Q=JWTXpztb6ic8rg@mail.gmail.com>
	<CAEY8wq4QEO1rtaNdjHXR6-b3Cgi7pfSWk7M8khVi0MHCiVOBzQ@mail.gmail.com>
	<CAPg+sBgUNYqYm7d4Rv+f0rBa=nSuqwmZ6_REBS7M-+Wea+za0g@mail.gmail.com>
	<CAEY8wq6n_27Y2N7fVw9uJkfiiYqi6JkTwO0q03_J7tUeBhdQYA@mail.gmail.com>
	<CANEZrP0HVJ7Uzow1=4-20LnejURqO5uo16H43uhL=TtNfzhAxQ@mail.gmail.com>
Message-ID: <CABsx9T2ng9vGMmfFK95A1jBK-FotDL-fA1oOt-=zosCPaug-rQ@mail.gmail.com>

On Tue, Jan 28, 2014 at 6:42 AM, Mike Hearn <mike at plan99.net> wrote:

> Yeah, that's the interpretation I think we should go with for now. There
> was a reason why this isn't specified and I forgot what it was - some
> inability to come to agreement on when to broadcast vs when to submit via
> HTTP, I think.
>

If the wallet software is doing automatic CoinJoin (for example), then
typically one or several of the other participants will broadcast the
transaction as soon as it is complete.

If the spec said that wallets must not broadcast until they receive a
PaymentACK (if a payment_url is specified), then you'd have to violate the
spec to do CoinJoin.

And even if you don't care about CoinJoin, not broadcasting the transaction
as soon as the inputs are signed adds implementation complexity (should you
retry if payment_url is unavailable? how many times? if you eventually
unlock the probably-not-quite-spent-yet inputs, should you double-spend
them to yourself just in case the merchant eventually gets around to
broadcasting the transaction, or should you just unlock them and squirrel
away the failed Payment so if the merchant does eventually broadcast you
have a record of why the coins were spent).

-- 
--
Gavin Andresen
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140128/c835cc97/attachment.html>

From pieter.wuille at gmail.com  Tue Jan 28 13:09:28 2014
From: pieter.wuille at gmail.com (Pieter Wuille)
Date: Tue, 28 Jan 2014 14:09:28 +0100
Subject: [Bitcoin-development] BIP70: PaymentACK semantics
In-Reply-To: <CABsx9T2ng9vGMmfFK95A1jBK-FotDL-fA1oOt-=zosCPaug-rQ@mail.gmail.com>
References: <lc409d$4mf$1@ger.gmane.org>
	<CABsx9T1Y3sO6eS54wsj377BL4rGoghx1uDzD+SY3tTgc1PPbHg@mail.gmail.com>
	<CANEZrP0ENhJJhba8Xwj_cVzNKGDUQriia_Q=JWTXpztb6ic8rg@mail.gmail.com>
	<CAEY8wq4QEO1rtaNdjHXR6-b3Cgi7pfSWk7M8khVi0MHCiVOBzQ@mail.gmail.com>
	<CAPg+sBgUNYqYm7d4Rv+f0rBa=nSuqwmZ6_REBS7M-+Wea+za0g@mail.gmail.com>
	<CAEY8wq6n_27Y2N7fVw9uJkfiiYqi6JkTwO0q03_J7tUeBhdQYA@mail.gmail.com>
	<CANEZrP0HVJ7Uzow1=4-20LnejURqO5uo16H43uhL=TtNfzhAxQ@mail.gmail.com>
	<CABsx9T2ng9vGMmfFK95A1jBK-FotDL-fA1oOt-=zosCPaug-rQ@mail.gmail.com>
Message-ID: <CAPg+sBhUD3H-dMQoZCNXVHBz5vj7gjkJPnUgdR-B_toQZwRdnw@mail.gmail.com>

On Tue, Jan 28, 2014 at 1:53 PM, Gavin Andresen <gavinandresen at gmail.com> wrote:
> On Tue, Jan 28, 2014 at 6:42 AM, Mike Hearn <mike at plan99.net> wrote:
>>
>> Yeah, that's the interpretation I think we should go with for now. There
>> was a reason why this isn't specified and I forgot what it was - some
>> inability to come to agreement on when to broadcast vs when to submit via
>> HTTP, I think.
>
>
> If the wallet software is doing automatic CoinJoin (for example), then
> typically one or several of the other participants will broadcast the
> transaction as soon as it is complete.
>
> If the spec said that wallets must not broadcast until they receive a
> PaymentACK (if a payment_url is specified), then you'd have to violate the
> spec to do CoinJoin.

You cannot prevent transactions from being broadcasted, but an ACK can
still mean "You're now relieved of the responsibility of getting the
transaction confirmed". That's independent from being allowed to
broadcast it.

> And even if you don't care about CoinJoin, not broadcasting the transaction
> as soon as the inputs are signed adds implementation complexity (should you
> retry if payment_url is unavailable? how many times? if you eventually
> unlock the probably-not-quite-spent-yet inputs, should you double-spend them
> to yourself just in case the merchant eventually gets around to broadcasting
> the transaction, or should you just unlock them and squirrel away the failed
> Payment so if the merchant does eventually broadcast you have a record of
> why the coins were spent).

If a payment_url is unavailable, you should imho retry. If you
broadcasted, and the payment_url is unavailable, you should
*certainly* retry. Otherwise the recipient cannot rely on receiving
memo and refund address, which would imho make these fields completely
useless.

I still like suggesting not broadcasting if a payment_uri to minimize
that risk further, but as you say - there are enough cases where you
cannot enforce that anyway.

-- 
Pieter



From mike at plan99.net  Tue Jan 28 13:24:34 2014
From: mike at plan99.net (Mike Hearn)
Date: Tue, 28 Jan 2014 14:24:34 +0100
Subject: [Bitcoin-development] BIP70: PaymentACK semantics
In-Reply-To: <CABsx9T2ng9vGMmfFK95A1jBK-FotDL-fA1oOt-=zosCPaug-rQ@mail.gmail.com>
References: <lc409d$4mf$1@ger.gmane.org>
	<CABsx9T1Y3sO6eS54wsj377BL4rGoghx1uDzD+SY3tTgc1PPbHg@mail.gmail.com>
	<CANEZrP0ENhJJhba8Xwj_cVzNKGDUQriia_Q=JWTXpztb6ic8rg@mail.gmail.com>
	<CAEY8wq4QEO1rtaNdjHXR6-b3Cgi7pfSWk7M8khVi0MHCiVOBzQ@mail.gmail.com>
	<CAPg+sBgUNYqYm7d4Rv+f0rBa=nSuqwmZ6_REBS7M-+Wea+za0g@mail.gmail.com>
	<CAEY8wq6n_27Y2N7fVw9uJkfiiYqi6JkTwO0q03_J7tUeBhdQYA@mail.gmail.com>
	<CANEZrP0HVJ7Uzow1=4-20LnejURqO5uo16H43uhL=TtNfzhAxQ@mail.gmail.com>
	<CABsx9T2ng9vGMmfFK95A1jBK-FotDL-fA1oOt-=zosCPaug-rQ@mail.gmail.com>
Message-ID: <CANEZrP0-i5B1miM9QTpmavvsdMKYwmXYk9=-OvL4sc0cRkgB3A@mail.gmail.com>

>
> And even if you don't care about CoinJoin, not broadcasting the
> transaction as soon as the inputs are signed adds implementation complexity
> (should you retry if payment_url is unavailable? how many times?
>

I guess a lot of wallets just won't broadcast at all and try to submit via
the URL. If they don't succeed, then the transaction is just never
committed to the wallet. Doesn't seem like a big deal. Payment submission
is online, interactive. If it fails, you keep the coins. This seems simple
and straightforward.

If someone really wanted to do a real-time coinjoin, they can build the
transaction together and submit it via payment_url, and broadcast as well.
If the merchant has an issue with the payment for some reason (e.g. request
is expired or the tx is non-standard), well, you'll have to sort it out
with them manually.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140128/926390c5/attachment.html>

From pete at petertodd.org  Tue Jan 28 17:23:49 2014
From: pete at petertodd.org (Peter Todd)
Date: Tue, 28 Jan 2014 12:23:49 -0500
Subject: [Bitcoin-development] BIP70: PaymentACK semantics
In-Reply-To: <CABsx9T2ng9vGMmfFK95A1jBK-FotDL-fA1oOt-=zosCPaug-rQ@mail.gmail.com>
References: <lc409d$4mf$1@ger.gmane.org>
	<CABsx9T1Y3sO6eS54wsj377BL4rGoghx1uDzD+SY3tTgc1PPbHg@mail.gmail.com>
	<CANEZrP0ENhJJhba8Xwj_cVzNKGDUQriia_Q=JWTXpztb6ic8rg@mail.gmail.com>
	<CAEY8wq4QEO1rtaNdjHXR6-b3Cgi7pfSWk7M8khVi0MHCiVOBzQ@mail.gmail.com>
	<CAPg+sBgUNYqYm7d4Rv+f0rBa=nSuqwmZ6_REBS7M-+Wea+za0g@mail.gmail.com>
	<CAEY8wq6n_27Y2N7fVw9uJkfiiYqi6JkTwO0q03_J7tUeBhdQYA@mail.gmail.com>
	<CANEZrP0HVJ7Uzow1=4-20LnejURqO5uo16H43uhL=TtNfzhAxQ@mail.gmail.com>
	<CABsx9T2ng9vGMmfFK95A1jBK-FotDL-fA1oOt-=zosCPaug-rQ@mail.gmail.com>
Message-ID: <20140128172349.GA14168@savin>

On Tue, Jan 28, 2014 at 07:53:14AM -0500, Gavin Andresen wrote:
> On Tue, Jan 28, 2014 at 6:42 AM, Mike Hearn <mike at plan99.net> wrote:
> 
> > Yeah, that's the interpretation I think we should go with for now. There
> > was a reason why this isn't specified and I forgot what it was - some
> > inability to come to agreement on when to broadcast vs when to submit via
> > HTTP, I think.
> >
> 
> If the wallet software is doing automatic CoinJoin (for example), then
> typically one or several of the other participants will broadcast the
> transaction as soon as it is complete.
> 
> If the spec said that wallets must not broadcast until they receive a
> PaymentACK (if a payment_url is specified), then you'd have to violate the
> spec to do CoinJoin.
> 
> And even if you don't care about CoinJoin, not broadcasting the transaction
> as soon as the inputs are signed adds implementation complexity (should you
> retry if payment_url is unavailable? how many times? if you eventually
> unlock the probably-not-quite-spent-yet inputs, should you double-spend
> them to yourself just in case the merchant eventually gets around to
> broadcasting the transaction, or should you just unlock them and squirrel
> away the failed Payment so if the merchant does eventually broadcast you
> have a record of why the coins were spent).

Also users don't have infinite unspent txouts in their wallets - if they
need to make two payments in a row and run out their wallet software is
(currently) going to spend the change txout and either be forced to
broadcast both transactions anyway, or the second payment-protocol-using
recipient will do so on their behalf. (in the future they might also do
a replacement tx replacing the first with a single tx paying both to
save on fees, again with the same problem)

Anyway what you want is payment atomicity: the customer losing control
of the funds must be atomic with respect to the payment going through.
From that point of view it's unfortunate that Payment message contains
refund_to, memo, etc. That information should have been provided to the
merchant prior to them providing the list of addresses to pay.

-- 
'peter'[:-1]@petertodd.org
000000000000000085c725a905444d271c56fdee4e4ec7f27bdb2e777c872925
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 685 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140128/d1694efc/attachment.sig>

From mike at plan99.net  Tue Jan 28 17:33:28 2014
From: mike at plan99.net (Mike Hearn)
Date: Tue, 28 Jan 2014 18:33:28 +0100
Subject: [Bitcoin-development] BIP70: PaymentACK semantics
In-Reply-To: <20140128172349.GA14168@savin>
References: <lc409d$4mf$1@ger.gmane.org>
	<CABsx9T1Y3sO6eS54wsj377BL4rGoghx1uDzD+SY3tTgc1PPbHg@mail.gmail.com>
	<CANEZrP0ENhJJhba8Xwj_cVzNKGDUQriia_Q=JWTXpztb6ic8rg@mail.gmail.com>
	<CAEY8wq4QEO1rtaNdjHXR6-b3Cgi7pfSWk7M8khVi0MHCiVOBzQ@mail.gmail.com>
	<CAPg+sBgUNYqYm7d4Rv+f0rBa=nSuqwmZ6_REBS7M-+Wea+za0g@mail.gmail.com>
	<CAEY8wq6n_27Y2N7fVw9uJkfiiYqi6JkTwO0q03_J7tUeBhdQYA@mail.gmail.com>
	<CANEZrP0HVJ7Uzow1=4-20LnejURqO5uo16H43uhL=TtNfzhAxQ@mail.gmail.com>
	<CABsx9T2ng9vGMmfFK95A1jBK-FotDL-fA1oOt-=zosCPaug-rQ@mail.gmail.com>
	<20140128172349.GA14168@savin>
Message-ID: <CANEZrP0TiZMzNei2R-cBHGLxF4ts5Pe1_U4V6iQFV7y+Eu_MAA@mail.gmail.com>

In practice this should only be an issue if a payment is submitted and
fails, which should be rare. Barring internal server errors and screwups on
the merchants side, the only reasons for a rejection at submit time would
be the imperfect fungibility of bitcoins, e.g. you try and pay with a huge
dust tx or one that's invalid/too low fee/etc.

So I think we have a bit of time to figure this out. But yes - once you
broadcast, you probably accept that there might be a more painful path to
resolve issues if something goes wrong, I guess. Right now BitPay has a
support system where you can file a ticket if you pay the bitcoins and they
don't recognise it or the tx never confirms or whatever. It's grotty manual
work but they do it. Not broadcasting unless you "have" to seems like an
optimisation that can reduce pain without much additional complexity.



On Tue, Jan 28, 2014 at 6:23 PM, Peter Todd <pete at petertodd.org> wrote:

> On Tue, Jan 28, 2014 at 07:53:14AM -0500, Gavin Andresen wrote:
> > On Tue, Jan 28, 2014 at 6:42 AM, Mike Hearn <mike at plan99.net> wrote:
> >
> > > Yeah, that's the interpretation I think we should go with for now.
> There
> > > was a reason why this isn't specified and I forgot what it was - some
> > > inability to come to agreement on when to broadcast vs when to submit
> via
> > > HTTP, I think.
> > >
> >
> > If the wallet software is doing automatic CoinJoin (for example), then
> > typically one or several of the other participants will broadcast the
> > transaction as soon as it is complete.
> >
> > If the spec said that wallets must not broadcast until they receive a
> > PaymentACK (if a payment_url is specified), then you'd have to violate
> the
> > spec to do CoinJoin.
> >
> > And even if you don't care about CoinJoin, not broadcasting the
> transaction
> > as soon as the inputs are signed adds implementation complexity (should
> you
> > retry if payment_url is unavailable? how many times? if you eventually
> > unlock the probably-not-quite-spent-yet inputs, should you double-spend
> > them to yourself just in case the merchant eventually gets around to
> > broadcasting the transaction, or should you just unlock them and squirrel
> > away the failed Payment so if the merchant does eventually broadcast you
> > have a record of why the coins were spent).
>
> Also users don't have infinite unspent txouts in their wallets - if they
> need to make two payments in a row and run out their wallet software is
> (currently) going to spend the change txout and either be forced to
> broadcast both transactions anyway, or the second payment-protocol-using
> recipient will do so on their behalf. (in the future they might also do
> a replacement tx replacing the first with a single tx paying both to
> save on fees, again with the same problem)
>
> Anyway what you want is payment atomicity: the customer losing control
> of the funds must be atomic with respect to the payment going through.
> From that point of view it's unfortunate that Payment message contains
> refund_to, memo, etc. That information should have been provided to the
> merchant prior to them providing the list of addresses to pay.
>
> --
> 'peter'[:-1]@petertodd.org
> 000000000000000085c725a905444d271c56fdee4e4ec7f27bdb2e777c872925
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140128/3d176184/attachment.html>

From pete at petertodd.org  Tue Jan 28 21:12:18 2014
From: pete at petertodd.org (Peter Todd)
Date: Tue, 28 Jan 2014 16:12:18 -0500
Subject: [Bitcoin-development] BIP70: PaymentACK semantics
In-Reply-To: <CANEZrP0TiZMzNei2R-cBHGLxF4ts5Pe1_U4V6iQFV7y+Eu_MAA@mail.gmail.com>
References: <lc409d$4mf$1@ger.gmane.org>
	<CABsx9T1Y3sO6eS54wsj377BL4rGoghx1uDzD+SY3tTgc1PPbHg@mail.gmail.com>
	<CANEZrP0ENhJJhba8Xwj_cVzNKGDUQriia_Q=JWTXpztb6ic8rg@mail.gmail.com>
	<CAEY8wq4QEO1rtaNdjHXR6-b3Cgi7pfSWk7M8khVi0MHCiVOBzQ@mail.gmail.com>
	<CAPg+sBgUNYqYm7d4Rv+f0rBa=nSuqwmZ6_REBS7M-+Wea+za0g@mail.gmail.com>
	<CAEY8wq6n_27Y2N7fVw9uJkfiiYqi6JkTwO0q03_J7tUeBhdQYA@mail.gmail.com>
	<CANEZrP0HVJ7Uzow1=4-20LnejURqO5uo16H43uhL=TtNfzhAxQ@mail.gmail.com>
	<CABsx9T2ng9vGMmfFK95A1jBK-FotDL-fA1oOt-=zosCPaug-rQ@mail.gmail.com>
	<20140128172349.GA14168@savin>
	<CANEZrP0TiZMzNei2R-cBHGLxF4ts5Pe1_U4V6iQFV7y+Eu_MAA@mail.gmail.com>
Message-ID: <20140128211218.GE22059@savin>

On Tue, Jan 28, 2014 at 06:33:28PM +0100, Mike Hearn wrote:
> In practice this should only be an issue if a payment is submitted and
> fails, which should be rare. Barring internal server errors and screwups on
> the merchants side, the only reasons for a rejection at submit time would
> be the imperfect fungibility of bitcoins, e.g. you try and pay with a huge
> dust tx or one that's invalid/too low fee/etc.
> 
> So I think we have a bit of time to figure this out. But yes - once you
> broadcast, you probably accept that there might be a more painful path to
> resolve issues if something goes wrong, I guess. Right now BitPay has a
> support system where you can file a ticket if you pay the bitcoins and they
> don't recognise it or the tx never confirms or whatever. It's grotty manual
> work but they do it. Not broadcasting unless you "have" to seems like an
> optimisation that can reduce pain without much additional complexity.

That's the reason you use a model where things happen atomicly: the
funds either can or can't be transferred, so if the merchant screws up
due to a server failure at worst the wallet can always send the
original, signed, payment request and transaction details proving to the
merchant that they agreed. Since the asked for txouts exist in the
blockchain they must either refund the money, or ship the goods.

Wallet software can handle that kind of worst-case failure by
automatically sending the original payment request back to the merchant.
At worst all customer support has to do is tell the customer "Sorry
about that; we didn't get your payment. Please start your wallet up and
hit the 'resend transaction' button in your wallet and we'll clear that
right up."

Keep in mind that we're probably going to see fraudsters figuring out
ways to make payment servers fail. This means conversely that a customer
calling up a merchant and saying "Hey! Something didn work but the
wallet says I paid!" is going to be treated more suspiciously. By using
atomic protocols the issue of did or didn't they pay becomes much more
black and white, and failure resistant. That's exactly what we keep
saying Bitcoin offers that PayPal doesn't.

-- 
'peter'[:-1]@petertodd.org
000000000000000085c725a905444d271c56fdee4e4ec7f27bdb2e777c872925
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 685 bytes
Desc: Digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140128/ed5c7f71/attachment.sig>

From stephane at kill-bill.org  Wed Jan 29 02:47:20 2014
From: stephane at kill-bill.org (Stephane Brossier)
Date: Tue, 28 Jan 2014 18:47:20 -0800
Subject: [Bitcoin-development] Extension for BIP-0070 to support
	recurring payments
In-Reply-To: <CANEZrP10z6_UAHD97mj22kVEGyXgHPQ2PdP_8RxHT5Py+xRP_A@mail.gmail.com>
References: <E1FDB3F2-25ED-4B99-979E-12CE943CBD66@kill-bill.org>
	<CANEZrP10z6_UAHD97mj22kVEGyXgHPQ2PdP_8RxHT5Py+xRP_A@mail.gmail.com>
Message-ID: <D6BCC0C4-EF22-4DE8-868E-825D19C387E3@kill-bill.org>

From what I have seen so far, there seems to be an agreement that this is a nice feature to add. We are pretty new to that community and so we don't know exactly what the process is, and in particular how we reach consensus via email. I am certainly open to follow 'the way' if there is one, but one solution would be to follow Mike's suggestion on providing a (prototype) implementation first and then defining/refining the BIP. Odinn also suggested a possible retribution for our time through crowd-sourcing which I am interested to pursue if that makes sense.


We have quite some experience on the subscription side of things and while we are growing our knowledge on the Bitcoin technology (and ecosystem at large) we would benefit from:
* some feedbacks on the high level proposal
* additional requirements we might have missed

So, below is a high level description of what we have in mind. If this sounds reasonable, we could start working on an implementation.


 
I. Abstract
---------------

This describes a protocol to enable recurring payments in bitcoins and can be seen as an extension of BIP-0070. The main goal here is to have the customer subscribe to a service of some kind (that is, agreeing on the terms of that subscription contract), and then have the wallet make recurring payments without any intervention from the customer as long as the payments match what the customer agreed on paying.

An example of such service would be an online streaming website, to which a user pays a fixed recurring monthly fee to access videos (a.k.a. resources). Note that there is also usage based billing: for example, the user may need to purchase additional access for premium videos (overage charges). This type of billing is more complicated and there are many variations to it used in the industry (pre-paid, ?). For the sake of discussion, we?ll focus on fixed recurring payments only, but we will keep usage in mind to make sure the protocol will be able to support it as well.


II. Motivation
------------------

Subscription based services have been growing in the past few years and so the intent it to make it possible for customers to pay in bitcoins. 

Bitcoin?s push model presents new advantages for the customer compared to traditional payment methods: the user has control over the subscription (for example, there is no need to call the merchant to explicitly cancel the credit card payments). It also opens the door to subscription management tools in wallets (e.g. Hive apps), which would give user an overview of what they are paying each month.


III. Flow of Operations
----------------------------------------


Creation of the subscription:
- - - - - - - - - - - - - - - - - - - - - - 

1. The customer clicks 'subscribe' -> A message is sent to the merchant.
2. The merchant sends back a message to the wallet with the details of the subscription such as the amount to be paid. In reality, there will be more information but for the purpose of the prototype implementation this is sufficient.
3. The wallet prompts the customer for authorization.
4. The customer authorizes (or denies) it.
5. The wallet sends the confirmation to the merchant.
6. The merchant confirms the subscription was created.

Ongoing payments:
- - - - - - - - - - - - - - - -

From that time on and since Bitcoin is a 'push' model, the wallet is responsible to poll the merchant for due payments associated with that subscription. Note that the merchant could specify hints to the wallet on when to poll (specific dates) or not during the registration of the subscription.

Note that we can't simply have the wallet push X bitcoins every month: the user account on the merchant side may have gotten credits, invoice adjustments, etc. since the last invoice, so the amount to pay for a given billing period may be lower than the regular amount. It could even be zero if the user decides to make a one-time payment to the merchant directly using a different wallet. Hence, the wallet needs to get the latest invoice balance to make sure how much it should pay. This also opens the door for the support of overage charges.


Quick note on the implementation on the merchant side: an entitlement system is a piece of logic on the merchant side which grants the user access to certain resources depending on the account status (unpaid invoices, etc.). This goes often hand in hand with a dunning system, which progressively restricts access as the user's account is more and more overdue. Since wallets can be offline for an extended period of time, payments may be missed and lead to an overdue state (e.g. extra fees, service degraded). It is the responsibility of the customer to ensure the wallet is up often enough for payments to happen.


In that recurring phase where the wallet polls the merchant, the wallet is responsible to check that payments match the subscription contract; that is, the amount, frequency of payments, ? match what the customer agreed on. If so, the payment is made without asking for explicit approval from customer, and the flow is similar to BIP-0070: The message is sent to the merchant, and in parallel, a transaction is sent to the btcnet. The merchant sends an ACK to the wallet and of course checks the states of the transactions on the btcnet to mark that payment as successful.

Subscription change (optional):
- - - - - - - - - - - - - - - - - - - - - - - - 

Optionally we could implement a change in the ongoing subscription to address the upgrade/downgrade scenarios. Of course, we could also simply support a cancellation followed by a creation of a new subscription, but having that as a one atomic message is probably better. The steps are very similar to the initial registration.

1. The customer clicks 'upgrade', 'downgrade', ? -> A msg is sent to the merchant.
2. The merchant sends back a msg to the wallet with the detail of the NEW subscription. 
3. The wallet prompts the customer for authorization.
4. The customer authorizes (or denies) it.
5. The wallet sends the confirmation to the merchant.
6. The merchant confirms the change in the subscription.

Cancellation of the subscription:
- - - - - - - - - - - - - - - - - - - - - - - - - 

The cancellation is initiated from the customer:

1. The customer clicks 'cancel' -> The wallet is informed that it  should not accept any new payment associated to that subscription.
2. The wallet sends a message to the merchant to inform about the cancellation.
3. The merchant confirms the subscription was cancelled.


-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140128/d9cc39aa/attachment.html>

From ryan.jc.pc at gmail.com  Wed Jan 29 04:01:28 2014
From: ryan.jc.pc at gmail.com (Ryan Carboni)
Date: Tue, 28 Jan 2014 20:01:28 -0800
Subject: [Bitcoin-development] Bitcoin-development Digest, Vol 32,
	Issue 57
In-Reply-To: <mailman.433139.1390965227.4583.bitcoin-development@lists.sourceforge.net>
References: <mailman.433139.1390965227.4583.bitcoin-development@lists.sourceforge.net>
Message-ID: <CAO7N=i3hF1aBYxbKOj=fCMu-HwPU2Z9+y9yKs15zucLY+jHcZA@mail.gmail.com>

This will easily create too much data in the block chain.
I think it's probably better to trust online wallets to handle complex
financial transactions such a debits or credits.
If Bitcoin achieves Visa-levels of popularity, that would mean one megabyte
of transactions per second (even assuming script isn't used), or ~30
terabytes per year. After a decade the Bitcoin blockchain can only be
stored by Amazon or Google or the Web Archive, even assuming Kryder's Law
continues.
If the Bitcoin blockchain instead becomes cheque clearinghouse style
transaction system, many problems involving blockchain growth become
negligible.
Sure, this is supposed to be a trustless system, but there's a reason why
everyone relies on trust in the real world.


On Tue, Jan 28, 2014 at 7:13 PM, <
bitcoin-development-request at lists.sourceforge.net> wrote:

> Send Bitcoin-development mailing list submissions to
>         bitcoin-development at lists.sourceforge.net
>
> To subscribe or unsubscribe via the World Wide Web, visit
>         https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> or, via email, send a message with subject or body 'help' to
>         bitcoin-development-request at lists.sourceforge.net
>
> You can reach the person managing the list at
>         bitcoin-development-owner at lists.sourceforge.net
>
> When replying, please edit your Subject line so it is more specific
> than "Re: Contents of Bitcoin-development digest..."
>
>
> Today's Topics:
>
>    1. Re: BIP70: PaymentACK semantics (Peter Todd)
>    2. Re: Extension for BIP-0070 to support     recurring payments
>       (Stephane Brossier)
>
>
> ----------------------------------------------------------------------
>
> Message: 1
> Date: Tue, 28 Jan 2014 16:12:18 -0500
> From: Peter Todd <pete at petertodd.org>
> Subject: Re: [Bitcoin-development] BIP70: PaymentACK semantics
> To: Mike Hearn <mike at plan99.net>
> Cc: Andreas Schildbach <andreas at schildbach.de>, Bitcoin Dev
>         <bitcoin-development at lists.sourceforge.net>
> Message-ID: <20140128211218.GE22059 at savin>
> Content-Type: text/plain; charset="us-ascii"
>
> On Tue, Jan 28, 2014 at 06:33:28PM +0100, Mike Hearn wrote:
> > In practice this should only be an issue if a payment is submitted and
> > fails, which should be rare. Barring internal server errors and screwups
> on
> > the merchants side, the only reasons for a rejection at submit time would
> > be the imperfect fungibility of bitcoins, e.g. you try and pay with a
> huge
> > dust tx or one that's invalid/too low fee/etc.
> >
> > So I think we have a bit of time to figure this out. But yes - once you
> > broadcast, you probably accept that there might be a more painful path to
> > resolve issues if something goes wrong, I guess. Right now BitPay has a
> > support system where you can file a ticket if you pay the bitcoins and
> they
> > don't recognise it or the tx never confirms or whatever. It's grotty
> manual
> > work but they do it. Not broadcasting unless you "have" to seems like an
> > optimisation that can reduce pain without much additional complexity.
>
> That's the reason you use a model where things happen atomicly: the
> funds either can or can't be transferred, so if the merchant screws up
> due to a server failure at worst the wallet can always send the
> original, signed, payment request and transaction details proving to the
> merchant that they agreed. Since the asked for txouts exist in the
> blockchain they must either refund the money, or ship the goods.
>
> Wallet software can handle that kind of worst-case failure by
> automatically sending the original payment request back to the merchant.
> At worst all customer support has to do is tell the customer "Sorry
> about that; we didn't get your payment. Please start your wallet up and
> hit the 'resend transaction' button in your wallet and we'll clear that
> right up."
>
> Keep in mind that we're probably going to see fraudsters figuring out
> ways to make payment servers fail. This means conversely that a customer
> calling up a merchant and saying "Hey! Something didn work but the
> wallet says I paid!" is going to be treated more suspiciously. By using
> atomic protocols the issue of did or didn't they pay becomes much more
> black and white, and failure resistant. That's exactly what we keep
> saying Bitcoin offers that PayPal doesn't.
>
> --
> 'peter'[:-1]@petertodd.org
> 000000000000000085c725a905444d271c56fdee4e4ec7f27bdb2e777c872925
> -------------- next part --------------
> A non-text attachment was scrubbed...
> Name: not available
> Type: application/pgp-signature
> Size: 685 bytes
> Desc: Digital signature
>
> ------------------------------
>
> Message: 2
> Date: Tue, 28 Jan 2014 18:47:20 -0800
> From: Stephane Brossier <stephane at kill-bill.org>
> Subject: Re: [Bitcoin-development] Extension for BIP-0070 to support
>         recurring payments
> To: "bitcoin-development at lists.sourceforge.net"
>         <bitcoin-development at lists.sourceforge.net>
> Cc: Pierre-Alexandre Meyer <pierre at kill-bill.org>, PikaPay
>         <hello at PikaPay.com>
> Message-ID: <D6BCC0C4-EF22-4DE8-868E-825D19C387E3 at kill-bill.org>
> Content-Type: text/plain; charset="windows-1252"
>
> >From what I have seen so far, there seems to be an agreement that this is
> a nice feature to add. We are pretty new to that community and so we don't
> know exactly what the process is, and in particular how we reach consensus
> via email. I am certainly open to follow 'the way' if there is one, but one
> solution would be to follow Mike's suggestion on providing a (prototype)
> implementation first and then defining/refining the BIP. Odinn also
> suggested a possible retribution for our time through crowd-sourcing which
> I am interested to pursue if that makes sense.
>
>
> We have quite some experience on the subscription side of things and while
> we are growing our knowledge on the Bitcoin technology (and ecosystem at
> large) we would benefit from:
> * some feedbacks on the high level proposal
> * additional requirements we might have missed
>
> So, below is a high level description of what we have in mind. If this
> sounds reasonable, we could start working on an implementation.
>
>
>
> I. Abstract
> ---------------
>
> This describes a protocol to enable recurring payments in bitcoins and can
> be seen as an extension of BIP-0070. The main goal here is to have the
> customer subscribe to a service of some kind (that is, agreeing on the
> terms of that subscription contract), and then have the wallet make
> recurring payments without any intervention from the customer as long as
> the payments match what the customer agreed on paying.
>
> An example of such service would be an online streaming website, to which
> a user pays a fixed recurring monthly fee to access videos (a.k.a.
> resources). Note that there is also usage based billing: for example, the
> user may need to purchase additional access for premium videos (overage
> charges). This type of billing is more complicated and there are many
> variations to it used in the industry (pre-paid, ?). For the sake of
> discussion, we?ll focus on fixed recurring payments only, but we will keep
> usage in mind to make sure the protocol will be able to support it as well.
>
>
> II. Motivation
> ------------------
>
> Subscription based services have been growing in the past few years and so
> the intent it to make it possible for customers to pay in bitcoins.
>
> Bitcoin?s push model presents new advantages for the customer compared to
> traditional payment methods: the user has control over the subscription
> (for example, there is no need to call the merchant to explicitly cancel
> the credit card payments). It also opens the door to subscription
> management tools in wallets (e.g. Hive apps), which would give user an
> overview of what they are paying each month.
>
>
> III. Flow of Operations
> ----------------------------------------
>
>
> Creation of the subscription:
> - - - - - - - - - - - - - - - - - - - - - -
>
> 1. The customer clicks 'subscribe' -> A message is sent to the merchant.
> 2. The merchant sends back a message to the wallet with the details of the
> subscription such as the amount to be paid. In reality, there will be more
> information but for the purpose of the prototype implementation this is
> sufficient.
> 3. The wallet prompts the customer for authorization.
> 4. The customer authorizes (or denies) it.
> 5. The wallet sends the confirmation to the merchant.
> 6. The merchant confirms the subscription was created.
>
> Ongoing payments:
> - - - - - - - - - - - - - - - -
>
> >From that time on and since Bitcoin is a 'push' model, the wallet is
> responsible to poll the merchant for due payments associated with that
> subscription. Note that the merchant could specify hints to the wallet on
> when to poll (specific dates) or not during the registration of the
> subscription.
>
> Note that we can't simply have the wallet push X bitcoins every month: the
> user account on the merchant side may have gotten credits, invoice
> adjustments, etc. since the last invoice, so the amount to pay for a given
> billing period may be lower than the regular amount. It could even be zero
> if the user decides to make a one-time payment to the merchant directly
> using a different wallet. Hence, the wallet needs to get the latest invoice
> balance to make sure how much it should pay. This also opens the door for
> the support of overage charges.
>
>
> Quick note on the implementation on the merchant side: an entitlement
> system is a piece of logic on the merchant side which grants the user
> access to certain resources depending on the account status (unpaid
> invoices, etc.). This goes often hand in hand with a dunning system, which
> progressively restricts access as the user's account is more and more
> overdue. Since wallets can be offline for an extended period of time,
> payments may be missed and lead to an overdue state (e.g. extra fees,
> service degraded). It is the responsibility of the customer to ensure the
> wallet is up often enough for payments to happen.
>
>
> In that recurring phase where the wallet polls the merchant, the wallet is
> responsible to check that payments match the subscription contract; that
> is, the amount, frequency of payments, ? match what the customer agreed on.
> If so, the payment is made without asking for explicit approval from
> customer, and the flow is similar to BIP-0070: The message is sent to the
> merchant, and in parallel, a transaction is sent to the btcnet. The
> merchant sends an ACK to the wallet and of course checks the states of the
> transactions on the btcnet to mark that payment as successful.
>
> Subscription change (optional):
> - - - - - - - - - - - - - - - - - - - - - - - -
>
> Optionally we could implement a change in the ongoing subscription to
> address the upgrade/downgrade scenarios. Of course, we could also simply
> support a cancellation followed by a creation of a new subscription, but
> having that as a one atomic message is probably better. The steps are very
> similar to the initial registration.
>
> 1. The customer clicks 'upgrade', 'downgrade', ? -> A msg is sent to the
> merchant.
> 2. The merchant sends back a msg to the wallet with the detail of the NEW
> subscription.
> 3. The wallet prompts the customer for authorization.
> 4. The customer authorizes (or denies) it.
> 5. The wallet sends the confirmation to the merchant.
> 6. The merchant confirms the change in the subscription.
>
> Cancellation of the subscription:
> - - - - - - - - - - - - - - - - - - - - - - - - -
>
> The cancellation is initiated from the customer:
>
> 1. The customer clicks 'cancel' -> The wallet is informed that it  should
> not accept any new payment associated to that subscription.
> 2. The wallet sends a message to the merchant to inform about the
> cancellation.
> 3. The merchant confirms the subscription was cancelled.
>
>
> -------------- next part --------------
> An HTML attachment was scrubbed...
>
> ------------------------------
>
>
> ------------------------------------------------------------------------------
> WatchGuard Dimension instantly turns raw network data into actionable
> security intelligence. It gives you real-time visual feedback on key
> security issues and trends.  Skip the complicated setup - simply import
> a virtual appliance and go from zero to informed in seconds.
>
> http://pubads.g.doubleclick.net/gampad/clk?id=123612991&iu=/4140/ostg.clktrk
>
> ------------------------------
>
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
> End of Bitcoin-development Digest, Vol 32, Issue 57
> ***************************************************
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140128/44a3671d/attachment.html>

From christophe.biocca at gmail.com  Wed Jan 29 14:57:38 2014
From: christophe.biocca at gmail.com (Christophe Biocca)
Date: Wed, 29 Jan 2014 09:57:38 -0500
Subject: [Bitcoin-development] Payment Protocol for Face-to-face Payments
In-Reply-To: <20140127203435.GU38964@giles.gnomon.org.uk>
References: <lc5hmg$1jh$1@ger.gmane.org> <op.xacvcukvyldrnw@laptop-air>
	<20140127203435.GU38964@giles.gnomon.org.uk>
Message-ID: <CANOOu=-=DS9-Ry19HQbMev6=gCWwN_egYgA=5yEe2jtQPxn=8Q@mail.gmail.com>

> But the face-to-face case isn't intrinsically dependent on SSL security, and it's nice not to introduce that attack vector...

If the only concern is to make scan-to-pay work without reliance on
SSL's PKI, it might be better to specify the payment protocol url
*and* the public key used for signing right in the qr code. The wallet
connects to the url, fetches the payment request (maybe over a secure
connection, maybe not, doesn't matter), and verifies the signature
matches the public key from the qr code.

Downsides compared to embedding the entire request:
Payee needs to host/serve requests somewhere online. This introduces
reliability and DoS concerns.
Payer needs an internet connection to fetch the request.

Advantages:
Serve variable payment requests from the same qr code (improving
recipient privacy).
Still no hard dependency on CAs. Even if both CA and DNS are
compromised by an attacker, the worst they can do is Denial of
Service.
Optionally use CAs so that the wallet can attach an identity to who
you're paying by QR code. This partly addresses the problem of the
waiter overwriting the QR code. A non-PKI transaction would simply
show "Unknown recipient".
Much smaller QR code (only overhead is the key parameter, and you
could use a boolean param + the "address as public key" hack Mike
mentionned, for only 4 characters of overhead).
No need for a backward-incompatible bitcoin: scheme

On Mon, Jan 27, 2014 at 3:34 PM, Roy Badami <roy at gnomon.org.uk> wrote:
> On Mon, Jan 27, 2014 at 09:11:08AM -0800, Jeremy Spilman wrote:
>> On Mon, 27 Jan 2014 03:59:25 -0800, Andreas Schildbach
>> <andreas at schildbach.de> wrote:
>>
>> > SCAN TO PAY
>> > For scan-to-pay, the current landscape looks different. I assume at
>> > least 50% of Bitcoin transactions are initiated by a BIP21 URL encoded
>> > into a QR-code. Nevertheless, I tried to encode a payment request into
>> > the bitcoin URL. I used my existing work on encoding transactions into
>> > QR-codes. Steps to encode:
>>
>> Really interesting work. When using scan-to-pay, after the payer scans the
>> QR code with the protobuf PaymentRequest (not a URL to download the
>> PaymentRequest) are they using their own connectivity to submit the
>> Payment response?
>>
>> If we assume connectivity on the phone, might as well just get a URL from
>> the QR code and re-use existing infrastructure for serving that?
>
> My first thought was likewise.  In the case where the phone needs
> Internet connectivity anyway, why not include an HTTPS URL in a BIP 72 URL?
>
> I'm assuming that every client will have to support this is any case,
> since it's effectively mandated by the BIP, so why add another mode of
> operation?
>
> However, PaymentRequest-over-QR-code does seem to me to have one
> rather attractive advantage: the authentication model is orders of
> magnitude simpler and more intuitive for a face-to-face transaction
> than anything else.  You're saying "pay the coins to that thing over
> there displaying that QR code".  Which, most of the time, is exactly
> what you want.
>
> In the web case, it's fine to ignore the case where the URL domain has
> been subverted (and an cert obtained by the attacker) because in that
> case you've lost before you even get to payments (MitM attacker shows
> you a modified web page with different payment details).  But the
> face-to-face case isn't intrinsically dependent on SSL security, and
> it's nice not to introduce that attack vector...
>
> roy
>
>
> ------------------------------------------------------------------------------
> CenturyLink Cloud: The Leader in Enterprise Cloud Services.
> Learn Why More Businesses Are Choosing CenturyLink Cloud For
> Critical Workloads, Development Environments & Everything In Between.
> Get a Quote or Start a Free Trial Today.
> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development



From chuck+bitcoindev at borboggle.com  Thu Jan 30 05:47:51 2014
From: chuck+bitcoindev at borboggle.com (Chuck)
Date: Thu, 30 Jan 2014 12:47:51 +0700
Subject: [Bitcoin-development] BIP70 message delivery reliability
Message-ID: <52E9E787.8080304@borboggle.com>

I spoke briefly with Peter (sipa). He recommend I forward this post to 
the mailing list for further discussion.

My apologies if this has been discussed before, but I was curious about 
some things re BIP70 message delivery.  In particular, I don't clearly 
see the value of the PaymentACK message.  Allow me to explain...

The current BIP70 workflow designates PaymentACK as the final message in 
a payment exchange. However, it doesn't appear that any mention is made 
of what happens if that delivery fails. I assume that re-delivery is 
left as a detail to the implementation, actually.

For sake of argument, let's assume that PaymentACK is never delivered 
either because of a network outage or a malicious merchant or 
incompatible software between wallets or a bug.  I ask myself: what 
would be necessary for sufficient proof of payment, say, to an arbiter?  
I presume the receipt R=(PaymentRequest,[transactions]) would suffice.  
Am I correct there?

But if the PaymentRequest and broadcasted transactions are enough to 
prove payment, what's the point of the Payment message? The merchant 
never has to verify the Payment message, possibly maliciously ignoring 
it.  In the well-behaved case, I presume the point is to help the 
merchant associate some arbitrary data with the purchase as well as 
provide a refunding address for the customer.  If that's the case, 
couldn't this protocol be slightly improved like so:

Required steps:
1. Customer clicks "pay now"
2. Merchant sends PaymentRequest/PaymentDetails, which should be signed
3. Customer builds a set of transactions and sends a new 
PaymentApprovalRequest message which includes a refund address and the 
unsigned transactions and their associated fully-signed transaction 
hash, the whole message signed with the private key of the refund address.
4. Merchant responds with PaymentApproved message, signing the 
PaymentApprovalRequest message with the same key from step 2.

Optional steps:
5. The customer can send a Payment message, which is only a set of 
signed transactions.
6. The merchant can respond with a PaymentACK message.

In Step 4, the merchant is acknowledging that if the transactions 
provided PaymentApprovalRequest are broadcast, then payment is complete 
and no other steps are required. Steps 5 and 6 aren't required but are 
considered considerate:)

After step 4, all the merchant needs is to do is watch for the 
transactions that were listed in PaymentApprovalRequest.  The 
(PaymentApproved,[signed transactions]) pair is the customer's proof of 
payment and this proof of payment includes a refund address that the 
merchant has agreed to prior to payment, instead of after.  Step 3 & 4 
also allow the merchant to verify transactions, providing an extra layer 
of redundancy.  The merchant will also be able to ack on fees, time lock 
(time sensitive purchases?), sequence numbers, etc.

In Step 3, it's critical the customer sign the message with the private 
key of the refund address, so that the merchant can be confident the 
refund address is correct.

In each step along the way until step 5, if a message delivery fails 
nobody is harmed because the purchase is incomplete.

Thoughts?

Chuck



From andreas at schildbach.de  Thu Jan 30 10:46:50 2014
From: andreas at schildbach.de (Andreas Schildbach)
Date: Thu, 30 Jan 2014 11:46:50 +0100
Subject: [Bitcoin-development] Payment Protocol for Face-to-face Payments
In-Reply-To: <lc5hmg$1jh$1@ger.gmane.org>
References: <lc5hmg$1jh$1@ger.gmane.org>
Message-ID: <lcdaid$rd4$1@ger.gmane.org>

Just a small update. I merged the code to my bitcoinj-0.11 branch and
put up binary .apk files for experimentation. Just make sure to tick
"BIP70 for tap-to-pay/scan-to-pay" in the labs settings.

Source:
https://github.com/schildbach/bitcoin-wallet/commits/bitcoinj-0.11

Binaries:
https://github.com/schildbach/bitcoin-wallet/releases/tag/v3.30-bitcoinj0.11


On 01/27/2014 12:59 PM, Andreas Schildbach wrote:
> As promised I'd like to present my work done on leveraging the payment
> protocol for face-to-face payments. The general assumption is that
> individuals don't own X.509 certificates. Their devices may be only
> badly connected to the internet or in some cases not at all. I've
> implemented a prototype on a branch of Bitcoin Wallet. It is using
> bitcoinj 0.11 (not released).
> 
> https://github.com/schildbach/bitcoin-wallet/commits/payment-protocol





From mike at plan99.net  Thu Jan 30 10:49:32 2014
From: mike at plan99.net (Mike Hearn)
Date: Thu, 30 Jan 2014 11:49:32 +0100
Subject: [Bitcoin-development] BIP70 message delivery reliability
In-Reply-To: <52E9E787.8080304@borboggle.com>
References: <52E9E787.8080304@borboggle.com>
Message-ID: <CANEZrP0soR0xRqW=vsKaL__HRuWstA5vW=6_JkGZm=8wkm8Q3g@mail.gmail.com>

Hi Chuck,

Both Bitcoin Core and bitcoinj are about to ship with the protocol as-is,
so any changes from this point on have to be backwards compatible.

On Thu, Jan 30, 2014 at 6:47 AM, Chuck <chuck+bitcoindev at borboggle.com>wrote:

> I presume the receipt R=(PaymentRequest,[transactions]) would suffice.
>

That's all you need to prove payment, yes.


> In the well-behaved case, I presume the point is to help the
> merchant associate some arbitrary data with the purchase as well as
> provide a refunding address for the customer.


That's right (+memo). And to provide an additional hook for future
features, like recurring billing, ECDH key agreements etc.


> In Step 3, it's critical the customer sign the message with the private
> key of the refund address, so that the merchant can be confident the
> refund address is correct.
>

Refund addresses as specced currently are optional. For instance bitcoinj
currently doesn't use them and won't until HD wallets support is done.

Let's get some practical experience with what we've got so far. We can
evolve PaymentRequest/Payment/PaymentACK in the right direction with
backwards compatible upgrades, I am hoping.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140130/c3bc08b3/attachment.html>

From mike at plan99.net  Thu Jan 30 10:50:22 2014
From: mike at plan99.net (Mike Hearn)
Date: Thu, 30 Jan 2014 11:50:22 +0100
Subject: [Bitcoin-development] Payment Protocol for Face-to-face Payments
In-Reply-To: <lcdaid$rd4$1@ger.gmane.org>
References: <lc5hmg$1jh$1@ger.gmane.org>
	<lcdaid$rd4$1@ger.gmane.org>
Message-ID: <CANEZrP1Soi3TsLmoea-kEmPKp2J-10R4_Y0dd_XQfm8L3kbd=g@mail.gmail.com>

Although it should be noted that these binaries don't yet do URI support so
you can't scan a bitcoin URI with r= in it and see the verified merchant
name, etc. I think Andreas plans to do the UI for that in the next update.


On Thu, Jan 30, 2014 at 11:46 AM, Andreas Schildbach
<andreas at schildbach.de>wrote:

> Just a small update. I merged the code to my bitcoinj-0.11 branch and
> put up binary .apk files for experimentation. Just make sure to tick
> "BIP70 for tap-to-pay/scan-to-pay" in the labs settings.
>
> Source:
> https://github.com/schildbach/bitcoin-wallet/commits/bitcoinj-0.11
>
> Binaries:
>
> https://github.com/schildbach/bitcoin-wallet/releases/tag/v3.30-bitcoinj0.11
>
>
> On 01/27/2014 12:59 PM, Andreas Schildbach wrote:
> > As promised I'd like to present my work done on leveraging the payment
> > protocol for face-to-face payments. The general assumption is that
> > individuals don't own X.509 certificates. Their devices may be only
> > badly connected to the internet or in some cases not at all. I've
> > implemented a prototype on a branch of Bitcoin Wallet. It is using
> > bitcoinj 0.11 (not released).
> >
> > https://github.com/schildbach/bitcoin-wallet/commits/payment-protocol
>
>
>
>
> ------------------------------------------------------------------------------
> WatchGuard Dimension instantly turns raw network data into actionable
> security intelligence. It gives you real-time visual feedback on key
> security issues and trends.  Skip the complicated setup - simply import
> a virtual appliance and go from zero to informed in seconds.
>
> http://pubads.g.doubleclick.net/gampad/clk?id=123612991&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140130/a3e7bd64/attachment.html>

From chuck+bitcoindev at borboggle.com  Thu Jan 30 11:15:10 2014
From: chuck+bitcoindev at borboggle.com (Chuck)
Date: Thu, 30 Jan 2014 18:15:10 +0700
Subject: [Bitcoin-development] BIP70 message delivery reliability
In-Reply-To: <CANEZrP0soR0xRqW=vsKaL__HRuWstA5vW=6_JkGZm=8wkm8Q3g@mail.gmail.com>
References: <52E9E787.8080304@borboggle.com>
	<CANEZrP0soR0xRqW=vsKaL__HRuWstA5vW=6_JkGZm=8wkm8Q3g@mail.gmail.com>
Message-ID: <52EA343E.4010208@borboggle.com>

Hi Mike.  Thanks for replying.

On 1/30/2014 5:49 PM, Mike Hearn wrote:
> Both Bitcoin Core and bitcoinj are about to ship with the protocol 
> as-is, so any changes from this point on have to be backwards compatible.
Then I think it's critically important to talk about failure situations 
now, rather than trying to patch on solutions later; it's going to be 
very hard to wedge/"hack" in fixes for potential problems when they 
could be addressed now with minor changes.
> Let's get some practical experience with what we've got so far. We can 
> evolve PaymentRequest/Payment/PaymentACK in the right direction with 
> backwards compatible upgrades, I am hoping.
I think what I'm trying to discuss or find out here is whether the 
current PP description is defunct or incomplete in some manner, thus 
making any experience we gain from the current implementation moot.

It seems the largest hole in the implementation is delivery of the 
Payment message, but I'm happy to accept that maybe I'm just missing 
something.  A malicious merchant could claim he never received the 
Payment message, or a faulty network connection could cause the message 
to never be delivered. In arbitration the merchant could argue the 
transactions seen on the network were insufficient.

To me, this could be a problem.

Cheers,

Chuck







From mike at plan99.net  Thu Jan 30 11:31:03 2014
From: mike at plan99.net (Mike Hearn)
Date: Thu, 30 Jan 2014 12:31:03 +0100
Subject: [Bitcoin-development] BIP70 message delivery reliability
In-Reply-To: <52EA343E.4010208@borboggle.com>
References: <52E9E787.8080304@borboggle.com>
	<CANEZrP0soR0xRqW=vsKaL__HRuWstA5vW=6_JkGZm=8wkm8Q3g@mail.gmail.com>
	<52EA343E.4010208@borboggle.com>
Message-ID: <CANEZrP2JMGdcCa_6p-vmLJ3yO=GVBZXA39VLwiPRUbDu2zeH5w@mail.gmail.com>

On Thu, Jan 30, 2014 at 12:15 PM, Chuck <chuck+bitcoindev at borboggle.com>wrote:

> In arbitration the merchant could argue the transactions seen on the
> network were insufficient.
>

The arbitrator would presumably have some rules about what is or isn't an
acceptable form of payment.

HTTP has response codes for submission of the Payment message. We could add
signing to PaymentACK and other things in future, if that turns out to be
insufficient in practice.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140130/5db41388/attachment.html>

From chuck+bitcoindev at borboggle.com  Thu Jan 30 11:42:56 2014
From: chuck+bitcoindev at borboggle.com (Chuck)
Date: Thu, 30 Jan 2014 18:42:56 +0700
Subject: [Bitcoin-development] BIP70 message delivery reliability
In-Reply-To: <CANEZrP2JMGdcCa_6p-vmLJ3yO=GVBZXA39VLwiPRUbDu2zeH5w@mail.gmail.com>
References: <52E9E787.8080304@borboggle.com>	<CANEZrP0soR0xRqW=vsKaL__HRuWstA5vW=6_JkGZm=8wkm8Q3g@mail.gmail.com>	<52EA343E.4010208@borboggle.com>
	<CANEZrP2JMGdcCa_6p-vmLJ3yO=GVBZXA39VLwiPRUbDu2zeH5w@mail.gmail.com>
Message-ID: <52EA3AC0.5090709@borboggle.com>

On 1/30/2014 6:31 PM, Mike Hearn wrote:
> The arbitrator would presumably have some rules about what is or isn't 
> an acceptable form of payment.
Do you think this puts unnecessary trust into a third party?  If the 
merchant instead signed and agreed to the unsigned transactions before 
they were broadcast (as in my OP), these arbitration concerns disappear.

> HTTP has response codes for submission of the Payment message. We 
> could add signing to PaymentACK and other things in future, if that 
> turns out to be insufficient in practice.
HTTP isn't the only message delivery mechanism.  Merchants can also lie: 
reply with 200 OK and an empty body.  Or, reply with 404 not found and 
broadcast transactions anyway.

Cheers,

Chuck



From pieter.wuille at gmail.com  Thu Jan 30 11:46:30 2014
From: pieter.wuille at gmail.com (Pieter Wuille)
Date: Thu, 30 Jan 2014 12:46:30 +0100
Subject: [Bitcoin-development] BIP70 message delivery reliability
In-Reply-To: <52EA343E.4010208@borboggle.com>
References: <52E9E787.8080304@borboggle.com>
	<CANEZrP0soR0xRqW=vsKaL__HRuWstA5vW=6_JkGZm=8wkm8Q3g@mail.gmail.com>
	<52EA343E.4010208@borboggle.com>
Message-ID: <CAPg+sBg8AGrbny=2tXp3gsok4TX7XV5307Cx1+ArBwxM6xL4jQ@mail.gmail.com>

On Thu, Jan 30, 2014 at 12:15 PM, Chuck <chuck+bitcoindev at borboggle.com> wrote:
> Hi Mike.  Thanks for replying.
>
> On 1/30/2014 5:49 PM, Mike Hearn wrote:
>> Both Bitcoin Core and bitcoinj are about to ship with the protocol
>> as-is, so any changes from this point on have to be backwards compatible.
> Then I think it's critically important to talk about failure situations
> now, rather than trying to patch on solutions later; it's going to be
> very hard to wedge/"hack" in fixes for potential problems when they
> could be addressed now with minor changes.
>> Let's get some practical experience with what we've got so far. We can
>> evolve PaymentRequest/Payment/PaymentACK in the right direction with
>> backwards compatible upgrades, I am hoping.
> I think what I'm trying to discuss or find out here is whether the
> current PP description is defunct or incomplete in some manner, thus
> making any experience we gain from the current implementation moot.
>
> It seems the largest hole in the implementation is delivery of the
> Payment message, but I'm happy to accept that maybe I'm just missing
> something.  A malicious merchant could claim he never received the
> Payment message, or a faulty network connection could cause the message
> to never be delivered. In arbitration the merchant could argue the
> transactions seen on the network were insufficient.

You don't even have to assume malicious intent. A payment message
could just fail to arrive because the server is unreachable. As the
specification currently doesn't even suggest retrying, there is no way
the merchant can rely at all on the memo and refund address being
delivered, which makes them in my opinion useless.

Your proposal makes the whole protocol more atomic, which may be a
step too far at this point (though I like the idea very much), but I
really think the specification should do everything possible to
prevent transactions confirming without the payment message ever being
delivered (i.e., store them in the sender's client, retry when
necessary, exponential backoff, ...).

-- 
Pieter



From mike at plan99.net  Thu Jan 30 11:59:05 2014
From: mike at plan99.net (Mike Hearn)
Date: Thu, 30 Jan 2014 12:59:05 +0100
Subject: [Bitcoin-development] BIP70 message delivery reliability
In-Reply-To: <CAPg+sBg8AGrbny=2tXp3gsok4TX7XV5307Cx1+ArBwxM6xL4jQ@mail.gmail.com>
References: <52E9E787.8080304@borboggle.com>
	<CANEZrP0soR0xRqW=vsKaL__HRuWstA5vW=6_JkGZm=8wkm8Q3g@mail.gmail.com>
	<52EA343E.4010208@borboggle.com>
	<CAPg+sBg8AGrbny=2tXp3gsok4TX7XV5307Cx1+ArBwxM6xL4jQ@mail.gmail.com>
Message-ID: <CANEZrP2MHqw+c+AVSLzmc6A1xyMvVK=DfR_R-tH1ypGQLRqo_A@mail.gmail.com>

With the way it works in bitcoinj, the tx is only committed to the wallet
if the server accepts the Payment message and ACKs it. So the tx would not
be retried if there's a failure submitting or some kind of internal server
error, and the UI would show that the payment failed. That seems
straightforward and how I'd expect things to work as a user.


On Thu, Jan 30, 2014 at 12:46 PM, Pieter Wuille <pieter.wuille at gmail.com>wrote:

> On Thu, Jan 30, 2014 at 12:15 PM, Chuck <chuck+bitcoindev at borboggle.com>
> wrote:
> > Hi Mike.  Thanks for replying.
> >
> > On 1/30/2014 5:49 PM, Mike Hearn wrote:
> >> Both Bitcoin Core and bitcoinj are about to ship with the protocol
> >> as-is, so any changes from this point on have to be backwards
> compatible.
> > Then I think it's critically important to talk about failure situations
> > now, rather than trying to patch on solutions later; it's going to be
> > very hard to wedge/"hack" in fixes for potential problems when they
> > could be addressed now with minor changes.
> >> Let's get some practical experience with what we've got so far. We can
> >> evolve PaymentRequest/Payment/PaymentACK in the right direction with
> >> backwards compatible upgrades, I am hoping.
> > I think what I'm trying to discuss or find out here is whether the
> > current PP description is defunct or incomplete in some manner, thus
> > making any experience we gain from the current implementation moot.
> >
> > It seems the largest hole in the implementation is delivery of the
> > Payment message, but I'm happy to accept that maybe I'm just missing
> > something.  A malicious merchant could claim he never received the
> > Payment message, or a faulty network connection could cause the message
> > to never be delivered. In arbitration the merchant could argue the
> > transactions seen on the network were insufficient.
>
> You don't even have to assume malicious intent. A payment message
> could just fail to arrive because the server is unreachable. As the
> specification currently doesn't even suggest retrying, there is no way
> the merchant can rely at all on the memo and refund address being
> delivered, which makes them in my opinion useless.
>
> Your proposal makes the whole protocol more atomic, which may be a
> step too far at this point (though I like the idea very much), but I
> really think the specification should do everything possible to
> prevent transactions confirming without the payment message ever being
> delivered (i.e., store them in the sender's client, retry when
> necessary, exponential backoff, ...).
>
> --
> Pieter
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140130/d3500aca/attachment.html>

From pieter.wuille at gmail.com  Thu Jan 30 12:02:02 2014
From: pieter.wuille at gmail.com (Pieter Wuille)
Date: Thu, 30 Jan 2014 13:02:02 +0100
Subject: [Bitcoin-development] BIP70 message delivery reliability
In-Reply-To: <CANEZrP2MHqw+c+AVSLzmc6A1xyMvVK=DfR_R-tH1ypGQLRqo_A@mail.gmail.com>
References: <52E9E787.8080304@borboggle.com>
	<CANEZrP0soR0xRqW=vsKaL__HRuWstA5vW=6_JkGZm=8wkm8Q3g@mail.gmail.com>
	<52EA343E.4010208@borboggle.com>
	<CAPg+sBg8AGrbny=2tXp3gsok4TX7XV5307Cx1+ArBwxM6xL4jQ@mail.gmail.com>
	<CANEZrP2MHqw+c+AVSLzmc6A1xyMvVK=DfR_R-tH1ypGQLRqo_A@mail.gmail.com>
Message-ID: <CAPg+sBhzLVxdU+Kg2N7eW=34X1-6qbg1+rPzyMqfsy01zqnfGA@mail.gmail.com>

On Thu, Jan 30, 2014 at 12:59 PM, Mike Hearn <mike at plan99.net> wrote:
> With the way it works in bitcoinj, the tx is only committed to the wallet if
> the server accepts the Payment message and ACKs it. So the tx would not be
> retried if there's a failure submitting or some kind of internal server
> error, and the UI would show that the payment failed. That seems
> straightforward and how I'd expect things to work as a user.

That's one right way to do it imho, but not what is suggested or
required by the specification, and not what bitcoin core master
currently implements.

-- 
Pieter



From chuck+bitcoindev at borboggle.com  Thu Jan 30 12:03:57 2014
From: chuck+bitcoindev at borboggle.com (Chuck)
Date: Thu, 30 Jan 2014 19:03:57 +0700
Subject: [Bitcoin-development] BIP70 message delivery reliability
In-Reply-To: <CAPg+sBhzLVxdU+Kg2N7eW=34X1-6qbg1+rPzyMqfsy01zqnfGA@mail.gmail.com>
References: <52E9E787.8080304@borboggle.com>	<CANEZrP0soR0xRqW=vsKaL__HRuWstA5vW=6_JkGZm=8wkm8Q3g@mail.gmail.com>	<52EA343E.4010208@borboggle.com>	<CAPg+sBg8AGrbny=2tXp3gsok4TX7XV5307Cx1+ArBwxM6xL4jQ@mail.gmail.com>	<CANEZrP2MHqw+c+AVSLzmc6A1xyMvVK=DfR_R-tH1ypGQLRqo_A@mail.gmail.com>
	<CAPg+sBhzLVxdU+Kg2N7eW=34X1-6qbg1+rPzyMqfsy01zqnfGA@mail.gmail.com>
Message-ID: <52EA3FAD.5080802@borboggle.com>

On 1/30/2014 7:02 PM, Pieter Wuille wrote:
> On Thu, Jan 30, 2014 at 12:59 PM, Mike Hearn <mike at plan99.net> wrote:
>> With the way it works in bitcoinj, the tx is only committed to the wallet if
>> the server accepts the Payment message and ACKs it. So the tx would not be
>> retried if there's a failure submitting or some kind of internal server
>> error, and the UI would show that the payment failed. That seems
>> straightforward and how I'd expect things to work as a user.
> That's one right way to do it imho, but not what is suggested or
> required by the specification, and not what bitcoin core master
> currently implements.
>
If you sent the Payment message and the server goes silent after 
receiving it, you retry to delivery.  However, the merchant can 
broadcast the transactions and force them into your wallet anyway. You 
could, quite likely, pay and never get an ACK.



From roy at gnomon.org.uk  Thu Jan 30 12:20:16 2014
From: roy at gnomon.org.uk (Roy Badami)
Date: Thu, 30 Jan 2014 12:20:16 +0000
Subject: [Bitcoin-development] BIP70 message delivery reliability
In-Reply-To: <52EA3FAD.5080802@borboggle.com>
References: <52E9E787.8080304@borboggle.com>
	<CANEZrP0soR0xRqW=vsKaL__HRuWstA5vW=6_JkGZm=8wkm8Q3g@mail.gmail.com>
	<52EA343E.4010208@borboggle.com>
	<CAPg+sBg8AGrbny=2tXp3gsok4TX7XV5307Cx1+ArBwxM6xL4jQ@mail.gmail.com>
	<CANEZrP2MHqw+c+AVSLzmc6A1xyMvVK=DfR_R-tH1ypGQLRqo_A@mail.gmail.com>
	<CAPg+sBhzLVxdU+Kg2N7eW=34X1-6qbg1+rPzyMqfsy01zqnfGA@mail.gmail.com>
	<52EA3FAD.5080802@borboggle.com>
Message-ID: <20140130122016.GX38964@giles.gnomon.org.uk>

On Thu, Jan 30, 2014 at 07:03:57PM +0700, Chuck wrote:
> On 1/30/2014 7:02 PM, Pieter Wuille wrote:
> > On Thu, Jan 30, 2014 at 12:59 PM, Mike Hearn <mike at plan99.net> wrote:
> >> With the way it works in bitcoinj, the tx is only committed to the wallet if
> >> the server accepts the Payment message and ACKs it. So the tx would not be
> >> retried if there's a failure submitting or some kind of internal server
> >> error, and the UI would show that the payment failed. That seems
> >> straightforward and how I'd expect things to work as a user.
> > That's one right way to do it imho, but not what is suggested or
> > required by the specification, and not what bitcoin core master
> > currently implements.
> >
> If you sent the Payment message and the server goes silent after 
> receiving it, you retry to delivery.  However, the merchant can 
> broadcast the transactions and force them into your wallet anyway. You 
> could, quite likely, pay and never get an ACK.

I think in that case, you absolultely have to invalidate all the
transactions in the Payment message by broadcasting a send-to-self
transaction as soon as possible; until that point your wallet balance
is indeterminate.  Otherwise what will happen if the merchant did in
fact receive the Payment message, and then processes it (and
broadcasts the transaction) after some delay?

Then what the user will see is: an apparently failed attempt to pay,
leaving their wallet balance unchanged.  Then, perhaps many hours
later, their wallet balance will appear to spontaneously decrement.

roy





From mike at plan99.net  Thu Jan 30 12:38:10 2014
From: mike at plan99.net (Mike Hearn)
Date: Thu, 30 Jan 2014 13:38:10 +0100
Subject: [Bitcoin-development] BIP70 message delivery reliability
In-Reply-To: <52EA3FAD.5080802@borboggle.com>
References: <52E9E787.8080304@borboggle.com>
	<CANEZrP0soR0xRqW=vsKaL__HRuWstA5vW=6_JkGZm=8wkm8Q3g@mail.gmail.com>
	<52EA343E.4010208@borboggle.com>
	<CAPg+sBg8AGrbny=2tXp3gsok4TX7XV5307Cx1+ArBwxM6xL4jQ@mail.gmail.com>
	<CANEZrP2MHqw+c+AVSLzmc6A1xyMvVK=DfR_R-tH1ypGQLRqo_A@mail.gmail.com>
	<CAPg+sBhzLVxdU+Kg2N7eW=34X1-6qbg1+rPzyMqfsy01zqnfGA@mail.gmail.com>
	<52EA3FAD.5080802@borboggle.com>
Message-ID: <CANEZrP3L-pxEVZAYn+=HmiNjZTX7TTYmdsMoYMc-cZ1OnH105g@mail.gmail.com>

>
> If you sent the Payment message and the server goes silent after receiving
> it, you retry to delivery.  However, the merchant can broadcast the
> transactions and force them into your wallet anyway. You could, quite
> likely, pay and never get an ACK.
>

No retries. If there's a timeout the wallet will consider the payment not
made, and if the merchant broadcasts anyway, the wallet will see the
transactions and sync with them correctly. The ACK is not particularly
important in the current design, so that's no big deal.

If we see this situation crop up routinely we can take measures to improve
things. I doubt we will.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140130/41050190/attachment.html>

From jgarzik at bitpay.com  Thu Jan 30 14:51:24 2014
From: jgarzik at bitpay.com (Jeff Garzik)
Date: Thu, 30 Jan 2014 09:51:24 -0500
Subject: [Bitcoin-development] BIP70: PaymentACK semantics
In-Reply-To: <CAPg+sBgUNYqYm7d4Rv+f0rBa=nSuqwmZ6_REBS7M-+Wea+za0g@mail.gmail.com>
References: <lc409d$4mf$1@ger.gmane.org>
	<CABsx9T1Y3sO6eS54wsj377BL4rGoghx1uDzD+SY3tTgc1PPbHg@mail.gmail.com>
	<CANEZrP0ENhJJhba8Xwj_cVzNKGDUQriia_Q=JWTXpztb6ic8rg@mail.gmail.com>
	<CAEY8wq4QEO1rtaNdjHXR6-b3Cgi7pfSWk7M8khVi0MHCiVOBzQ@mail.gmail.com>
	<CAPg+sBgUNYqYm7d4Rv+f0rBa=nSuqwmZ6_REBS7M-+Wea+za0g@mail.gmail.com>
Message-ID: <CAJHLa0MVbDnC0i+uT9Sahxk8ht9R5ztSJ-kOU5ERapeVibH9eg@mail.gmail.com>

On Mon, Jan 27, 2014 at 5:17 PM, Pieter Wuille <pieter.wuille at gmail.com> wrote:
> On Mon, Jan 27, 2014 at 11:03 PM, Kevin Greene <kgreenek at gmail.com> wrote:
> > Should the wallet broadcast the transaction to the bitcoin network when it
> > receives an ACK, or always assume that the merchant server will do that?

> In my opinion, that should be the primary meaning of receiving an ACK:
> acknowledgement that the receiver takes responsibility for getting the
> transaction confirmed (to the extent possible, of course).

Is this truly the intent?  That the merchant/processor takes full
responsibility for getting the TX confirmed?

It is within the customer's economic incentive -- and right as a free
person -- to work to get their transaction relayed to the network and
confirmed in parallel with whatever the merchant is doing.

BIP 70 states that the customer broadcasts the transaction, in
addition to sending the Payment message.

-- 
Jeff Garzik
Bitcoin core developer and open source evangelist
BitPay, Inc.      https://bitpay.com/



From mike at plan99.net  Thu Jan 30 15:01:52 2014
From: mike at plan99.net (Mike Hearn)
Date: Thu, 30 Jan 2014 16:01:52 +0100
Subject: [Bitcoin-development] BIP70: PaymentACK semantics
In-Reply-To: <CAJHLa0MVbDnC0i+uT9Sahxk8ht9R5ztSJ-kOU5ERapeVibH9eg@mail.gmail.com>
References: <lc409d$4mf$1@ger.gmane.org>
	<CABsx9T1Y3sO6eS54wsj377BL4rGoghx1uDzD+SY3tTgc1PPbHg@mail.gmail.com>
	<CANEZrP0ENhJJhba8Xwj_cVzNKGDUQriia_Q=JWTXpztb6ic8rg@mail.gmail.com>
	<CAEY8wq4QEO1rtaNdjHXR6-b3Cgi7pfSWk7M8khVi0MHCiVOBzQ@mail.gmail.com>
	<CAPg+sBgUNYqYm7d4Rv+f0rBa=nSuqwmZ6_REBS7M-+Wea+za0g@mail.gmail.com>
	<CAJHLa0MVbDnC0i+uT9Sahxk8ht9R5ztSJ-kOU5ERapeVibH9eg@mail.gmail.com>
Message-ID: <CANEZrP2nm4=Co48TebL1b1gQVP4oPG0RePa01cqRe1Zqod2gwg@mail.gmail.com>

>
> Is this truly the intent?  That the merchant/processor takes full
> responsibility for getting the TX confirmed?


As per Gavin at the top of the thread, the intent is to give the customer
reassurance that their payment will be processed. The merchant trying to
get the tx confirmed is presumably a part of that as it'd make no sense for
a merchant to give that assurance and decide they don't care about the
money.

But nothing stops the user broadcasting the tx as well, once the receiver
has given that assurance.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140130/72a31f31/attachment.html>

From gavinandresen at gmail.com  Thu Jan 30 15:06:23 2014
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Thu, 30 Jan 2014 10:06:23 -0500
Subject: [Bitcoin-development] BIP70: PaymentACK semantics
In-Reply-To: <CAJHLa0MVbDnC0i+uT9Sahxk8ht9R5ztSJ-kOU5ERapeVibH9eg@mail.gmail.com>
References: <lc409d$4mf$1@ger.gmane.org>
	<CABsx9T1Y3sO6eS54wsj377BL4rGoghx1uDzD+SY3tTgc1PPbHg@mail.gmail.com>
	<CANEZrP0ENhJJhba8Xwj_cVzNKGDUQriia_Q=JWTXpztb6ic8rg@mail.gmail.com>
	<CAEY8wq4QEO1rtaNdjHXR6-b3Cgi7pfSWk7M8khVi0MHCiVOBzQ@mail.gmail.com>
	<CAPg+sBgUNYqYm7d4Rv+f0rBa=nSuqwmZ6_REBS7M-+Wea+za0g@mail.gmail.com>
	<CAJHLa0MVbDnC0i+uT9Sahxk8ht9R5ztSJ-kOU5ERapeVibH9eg@mail.gmail.com>
Message-ID: <CABsx9T1jAobC_p9oa_PX8M7Bo6Db3=oBhPuhp5CXVHqTRb=Hng@mail.gmail.com>

On Thu, Jan 30, 2014 at 9:51 AM, Jeff Garzik <jgarzik at bitpay.com> wrote:

> Is this truly the intent?  That the merchant/processor takes full
> responsibility for getting the TX confirmed?
>

The intent is to give the customer a great experience. We could talk for
months about whether having the wallet broadcast the transaction as soon as
possible or having it wait for the merchant to respond with a PaymentACK is
better. But I think we should let wallets experiment with different ways of
doing it, and see what works best in practice.


-- 
--
Gavin Andresen
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140130/46892b70/attachment.html>

From pieter.wuille at gmail.com  Thu Jan 30 15:16:54 2014
From: pieter.wuille at gmail.com (Pieter Wuille)
Date: Thu, 30 Jan 2014 16:16:54 +0100
Subject: [Bitcoin-development] BIP70: PaymentACK semantics
In-Reply-To: <CABsx9T1jAobC_p9oa_PX8M7Bo6Db3=oBhPuhp5CXVHqTRb=Hng@mail.gmail.com>
References: <lc409d$4mf$1@ger.gmane.org>
	<CABsx9T1Y3sO6eS54wsj377BL4rGoghx1uDzD+SY3tTgc1PPbHg@mail.gmail.com>
	<CANEZrP0ENhJJhba8Xwj_cVzNKGDUQriia_Q=JWTXpztb6ic8rg@mail.gmail.com>
	<CAEY8wq4QEO1rtaNdjHXR6-b3Cgi7pfSWk7M8khVi0MHCiVOBzQ@mail.gmail.com>
	<CAPg+sBgUNYqYm7d4Rv+f0rBa=nSuqwmZ6_REBS7M-+Wea+za0g@mail.gmail.com>
	<CAJHLa0MVbDnC0i+uT9Sahxk8ht9R5ztSJ-kOU5ERapeVibH9eg@mail.gmail.com>
	<CABsx9T1jAobC_p9oa_PX8M7Bo6Db3=oBhPuhp5CXVHqTRb=Hng@mail.gmail.com>
Message-ID: <CAPg+sBiz1oXqsRTpQpVghTFupj6jsp5M-zDGKe7bjeUBHNMxUA@mail.gmail.com>

On Thu, Jan 30, 2014 at 4:06 PM, Gavin Andresen <gavinandresen at gmail.com> wrote:
> On Thu, Jan 30, 2014 at 9:51 AM, Jeff Garzik <jgarzik at bitpay.com> wrote:
>>
>> Is this truly the intent?  That the merchant/processor takes full
>> responsibility for getting the TX confirmed?
>
>
> The intent is to give the customer a great experience. We could talk for
> months about whether having the wallet broadcast the transaction as soon as
> possible or having it wait for the merchant to respond with a PaymentACK is
> better. But I think we should let wallets experiment with different ways of
> doing it, and see what works best in practice.

Currently, with the specification and implementation in Bitcoin Core,
if a merchant wants to use the refund or memo feature, they need to
provide an alternative route for delivering that information to them
*before* the transaction is made, as sending the transaction may
result in the transfer of funds without knowing what to do with it (if
their receive server is down at the right time) and potnetially no way
to contact the sender. This makes these fields utterly useless.

This is not a matter of letting wallets experiment with the best
behaviour. This is removing the ability to rely on the payment
protocol being bidirectional.

I don't care whether wallets broadcast the transactions or not (they
can experiment with that as they like). But we should take measures to
prevent a transaction for being broadcast without the payment being
delivered. One way is never broadcasting the transaction yourself.
Another is retrying to send the payment if delivery fails.

Here is what I would suggest to add to the specification:
* If a payment_uri is specified, the client must attempt to send the
payment there.
* If a transaction is broadcast (which is permitted even if sending
the payment fails), a client should make a reasonable attempt of
delivering the payment (remembering, retrying, ...).
* If a paymentACK has been received, the client is no longer
responsible for broadcasting the transaction (but still may).

-- 
Pieter



From pieter.wuille at gmail.com  Thu Jan 30 14:58:56 2014
From: pieter.wuille at gmail.com (Pieter Wuille)
Date: Thu, 30 Jan 2014 15:58:56 +0100
Subject: [Bitcoin-development] BIP70: PaymentACK semantics
In-Reply-To: <CAJHLa0MVbDnC0i+uT9Sahxk8ht9R5ztSJ-kOU5ERapeVibH9eg@mail.gmail.com>
References: <lc409d$4mf$1@ger.gmane.org>
	<CABsx9T1Y3sO6eS54wsj377BL4rGoghx1uDzD+SY3tTgc1PPbHg@mail.gmail.com>
	<CANEZrP0ENhJJhba8Xwj_cVzNKGDUQriia_Q=JWTXpztb6ic8rg@mail.gmail.com>
	<CAEY8wq4QEO1rtaNdjHXR6-b3Cgi7pfSWk7M8khVi0MHCiVOBzQ@mail.gmail.com>
	<CAPg+sBgUNYqYm7d4Rv+f0rBa=nSuqwmZ6_REBS7M-+Wea+za0g@mail.gmail.com>
	<CAJHLa0MVbDnC0i+uT9Sahxk8ht9R5ztSJ-kOU5ERapeVibH9eg@mail.gmail.com>
Message-ID: <CAPg+sBjL=jZBWRxKmAJH5mi2LUmM-cw3u6u5vNZ1zXh62=JSUQ@mail.gmail.com>

On Thu, Jan 30, 2014 at 3:51 PM, Jeff Garzik <jgarzik at bitpay.com> wrote:
> On Mon, Jan 27, 2014 at 5:17 PM, Pieter Wuille <pieter.wuille at gmail.com> wrote:
>> On Mon, Jan 27, 2014 at 11:03 PM, Kevin Greene <kgreenek at gmail.com> wrote:
>> > Should the wallet broadcast the transaction to the bitcoin network when it
>> > receives an ACK, or always assume that the merchant server will do that?
>
>> In my opinion, that should be the primary meaning of receiving an ACK:
>> acknowledgement that the receiver takes responsibility for getting the
>> transaction confirmed (to the extent possible, of course).
>
> Is this truly the intent?  That the merchant/processor takes full
> responsibility for getting the TX confirmed?

Confirmed is probably the wrong word. But IMHO (not how it's currently
worded), the merchant should take that responsibility after delivering
a PaymentACK. This means the client does not need to stay online
anymore. More importantly, it removes the requirement for the P2P
network to function as a reliable sender->receiver communication
channel (and reduces it to a broadcast medium to get transactions to
miners).

-- 
Pieter



From jeremy at taplink.co  Thu Jan 30 20:16:28 2014
From: jeremy at taplink.co (Jeremy Spilman)
Date: Thu, 30 Jan 2014 12:16:28 -0800
Subject: [Bitcoin-development] BIP70: PaymentACK semantics
In-Reply-To: <CAPg+sBiz1oXqsRTpQpVghTFupj6jsp5M-zDGKe7bjeUBHNMxUA@mail.gmail.com>
References: <lc409d$4mf$1@ger.gmane.org>
	<CABsx9T1Y3sO6eS54wsj377BL4rGoghx1uDzD+SY3tTgc1PPbHg@mail.gmail.com>
	<CANEZrP0ENhJJhba8Xwj_cVzNKGDUQriia_Q=JWTXpztb6ic8rg@mail.gmail.com>
	<CAEY8wq4QEO1rtaNdjHXR6-b3Cgi7pfSWk7M8khVi0MHCiVOBzQ@mail.gmail.com>
	<CAPg+sBgUNYqYm7d4Rv+f0rBa=nSuqwmZ6_REBS7M-+Wea+za0g@mail.gmail.com>
	<CAJHLa0MVbDnC0i+uT9Sahxk8ht9R5ztSJ-kOU5ERapeVibH9eg@mail.gmail.com>
	<CABsx9T1jAobC_p9oa_PX8M7Bo6Db3=oBhPuhp5CXVHqTRb=Hng@mail.gmail.com>
	<CAPg+sBiz1oXqsRTpQpVghTFupj6jsp5M-zDGKe7bjeUBHNMxUA@mail.gmail.com>
Message-ID: <op.xainxqs2yldrnw@laptop-air>

Please note, responding to Pieter and Chuck concurrently.

On Thu, 30 Jan 2014 07:16:54 -0800, Pieter Wuille  
<pieter.wuille at gmail.com> wrote:
> Currently, with the specification and implementation in Bitcoin Core,
> if a merchant wants to use the refund or memo feature, they need to
> provide an alternative route for delivering that information to them
> *before* the transaction is made, as sending the transaction may
> result in the transfer of funds without knowing what to do with it (if
> their receive server is down at the right time) and potnetially no way
> to contact the sender. This makes these fields utterly useless.
>
> This is not a matter of letting wallets experiment with the best
> behaviour. This is removing the ability to rely on the payment
> protocol being bidirectional.

I think we want to separate the two issues;

   1) Reliably getting refund/memo fields to the merchant/payee
   2) Who broadcasts a TX, how it's retried, how outputs are 'locked' and  
if/when they should be [double]-spent to clear them

We should be able to solve '1' without having to fully spec out behavior  
for 2.

On Thu, 30 Jan 2014 07:16:54 -0800, Pieter Wuille  
<pieter.wuille at gmail.com> wrote:
> I don't care whether wallets broadcast the transactions or not (they
> can experiment with that as they like). But we should take measures to
> prevent a transaction for being broadcast without the payment being
> delivered. One way is never broadcasting the transaction yourself.
> Another is retrying to send the payment if delivery fails.
>
> Here is what I would suggest to add to the specification:
> * If a payment_uri is specified, the client must attempt to send the
> payment there.
> * If a transaction is broadcast (which is permitted even if sending
> the payment fails), a client should make a reasonable attempt of
> delivering the payment (remembering, retrying, ...).
> * If a paymentACK has been received, the client is no longer
> responsible for broadcasting the transaction (but still may).

To reliably deliver refund/memo fields, we could;

   a) Send them as part of the initial request for the  
PaymentRequest/PaymentDetails
   b) Send them as a response to the PaymentRequest/PaymentDetails before  
the transaction is even formed and any unspent outputs are selected
   c) Send them as a response to the PaymentRequest/PaymentDetails with the  
UNsigned transaction, and then follow up with the signed transaction in a  
separate message.

'a' is problematic because while wallet software could easily append some  
data to the queryString, it doesn't work if the user is downloading then  
opening the PaymentRequest as a file. So 'a' is a no-go I think.

'b' is fine, if not overly chatty. The only thing committed is a refund  
address, which is a lot less problematic than committed unspent outputs.

'c' is nice because it lets the server preview the transaction (and  
ACK/NACK it with a memo of their own -- e.g. 'fee too low'?) without being  
able to broadcast it, so we know unspent outputs are not yet committed.

But all of these require too many changes to the protocol for my liking.

On Wed, 29 Jan 2014 21:47:51 -0800, Chuck <chuck+bitcoindev at borboggle.com>  
wrote:
> 3. Customer builds a set of transactions and sends a new 
> PaymentApprovalRequest message which includes a refund address and the 
> unsigned transactions and their associated fully-signed transactionhash,  
> the whole message signed with the private key of the refund address.

"Unsigned transactions and their associated fully-signed transaction hash"  
-- isn't that a fully signed transaction? In this case, it doesn't solve  
the core problem of the server being able to broadcast that transaction  
without ACKing.

On Wed, 29 Jan 2014 21:47:51 -0800, Chuck <chuck+bitcoindev at borboggle.com>  
wrote:
> In Step 3, it's critical the customer sign the message with the private
> key of the refund address, so that the merchant can be confident the
> refund address is correct.

For merchant confidence that the address is correct, we can leave the  
transport security to the transport layer.

For payer proving refund address was X after merchant sends a refund to Y,  
that's a different story. I don't think we want to *require* access to the  
refund address private key. For example, BIP32 public derivation may have  
just the pubkey available. Offline transaction signing is one thing, but  
offline PP message signing is too much. I think there are better ways to  
secure the refund address which can reuse existing code, and certainly the  
option should remain to send a plain refund address just relying on  
transport security and trusting the merchant.




From chuck+bitcoindev at borboggle.com  Fri Jan 31 04:16:36 2014
From: chuck+bitcoindev at borboggle.com (Chuck)
Date: Fri, 31 Jan 2014 11:16:36 +0700
Subject: [Bitcoin-development] BIP70: PaymentACK semantics
In-Reply-To: <op.xainxqs2yldrnw@laptop-air>
References: <lc409d$4mf$1@ger.gmane.org>	<CABsx9T1Y3sO6eS54wsj377BL4rGoghx1uDzD+SY3tTgc1PPbHg@mail.gmail.com>	<CANEZrP0ENhJJhba8Xwj_cVzNKGDUQriia_Q=JWTXpztb6ic8rg@mail.gmail.com>	<CAEY8wq4QEO1rtaNdjHXR6-b3Cgi7pfSWk7M8khVi0MHCiVOBzQ@mail.gmail.com>	<CAPg+sBgUNYqYm7d4Rv+f0rBa=nSuqwmZ6_REBS7M-+Wea+za0g@mail.gmail.com>	<CAJHLa0MVbDnC0i+uT9Sahxk8ht9R5ztSJ-kOU5ERapeVibH9eg@mail.gmail.com>	<CABsx9T1jAobC_p9oa_PX8M7Bo6Db3=oBhPuhp5CXVHqTRb=Hng@mail.gmail.com>	<CAPg+sBiz1oXqsRTpQpVghTFupj6jsp5M-zDGKe7bjeUBHNMxUA@mail.gmail.com>
	<op.xainxqs2yldrnw@laptop-air>
Message-ID: <52EB23A4.9@borboggle.com>

On 1/31/2014 3:16 AM, Jeremy Spilman wrote:
> I think we want to separate the two issues;
>
>     1) Reliably getting refund/memo fields to the merchant/payee
>     2) Who broadcasts a TX, how it's retried, how outputs are 'locked' and
> if/when they should be [double]-spent to clear them
>
> We should be able to solve '1' without having to fully spec out behavior
> for 2.
My original message was focused on #1.  Not only #1, but ensuring the 
merchant can't act maliciously too.

As far as #2 is concerned, I don't think it makes any difference - it's 
in both the customer and the merchant's best interest to have the 
transactions confirmed.

>     c) Send them as a response to the PaymentRequest/PaymentDetails with the
> UNsigned transaction, and then follow up with the signed transaction in a
> separate message.
...
> On Wed, 29 Jan 2014 21:47:51 -0800, Chuck <chuck+bitcoindev at borboggle.com>
> wrote:
>> 3. Customer builds a set of transactions and sends a new
>> PaymentApprovalRequest message which includes a refund address and the
>> unsigned transactions and their associated fully-signed transactionhash,
>> the whole message signed with the private key of the refund address.
> "Unsigned transactions and their associated fully-signed transaction hash"
> -- isn't that a fully signed transaction? In this case, it doesn't solve
> the core problem of the server being able to broadcast that transaction
> without ACKing.
What I meant was (and maybe this was roundabout?): the customer includes 
the UNsigned transactions as well as the hashes (and only the hashes) of 
the fully signed transactions.  The customer keeps the fully signed 
transactions private until the merchant ACKs the unsigned versions.  If 
the merchant has the hash of the fully signed transaction, he can 
monitor the network for delivery of the signed transaction.

It definitely complicates things, but it's nothing that can't be done.

Cheers,

Chuck



From christophe.biocca at gmail.com  Fri Jan 31 16:21:59 2014
From: christophe.biocca at gmail.com (Christophe Biocca)
Date: Fri, 31 Jan 2014 11:21:59 -0500
Subject: [Bitcoin-development] BIP70: PaymentACK semantics
In-Reply-To: <52EB23A4.9@borboggle.com>
References: <lc409d$4mf$1@ger.gmane.org>
	<CABsx9T1Y3sO6eS54wsj377BL4rGoghx1uDzD+SY3tTgc1PPbHg@mail.gmail.com>
	<CANEZrP0ENhJJhba8Xwj_cVzNKGDUQriia_Q=JWTXpztb6ic8rg@mail.gmail.com>
	<CAEY8wq4QEO1rtaNdjHXR6-b3Cgi7pfSWk7M8khVi0MHCiVOBzQ@mail.gmail.com>
	<CAPg+sBgUNYqYm7d4Rv+f0rBa=nSuqwmZ6_REBS7M-+Wea+za0g@mail.gmail.com>
	<CAJHLa0MVbDnC0i+uT9Sahxk8ht9R5ztSJ-kOU5ERapeVibH9eg@mail.gmail.com>
	<CABsx9T1jAobC_p9oa_PX8M7Bo6Db3=oBhPuhp5CXVHqTRb=Hng@mail.gmail.com>
	<CAPg+sBiz1oXqsRTpQpVghTFupj6jsp5M-zDGKe7bjeUBHNMxUA@mail.gmail.com>
	<op.xainxqs2yldrnw@laptop-air> <52EB23A4.9@borboggle.com>
Message-ID: <CANOOu=9RcZ5VLGBzONYmY6MtPAegqjiHk5bAWRN8q7T5Gz+Xeg@mail.gmail.com>

The merchant can always act maliciously by simply not delivering the
goods. The only recourse the payment protocol provides at that point
is that you have proof the merchant is acting maliciously (or at the
very least his payment system is broken).

Your scheme just adds an ACK of the specific unsigned transactions
before the payment is effectively irreversible.

I can't come up with a situation where the combination of signed
request and blockchain entry aren't enough evidence, yet where adding
an ACK by the merchant of the unsigned transaction tips the balance
the other way. If you know of such a possibility, I'd love to hear it,
because we'd know what we're trying to fix.

The only way I can see a malicious merchant exploiting wallet
behaviour around PaymentACK is by accepting the Payment message, not
broadcasting it, not returning an ACK, and hoping the wallet/user
retries paying with a new, non-conflicting transaction. Then he can
try milking multiple small payments out of the user before they
realize what happened, and broadcast them all at once, stealing more
funds than the user ever was willing to risk in the transaction. But
this is trivial to guard against at the wallet level (by making every
new payment conflict with all previous non-acked payments).

The non-reliability of getting memo/refund fields is a separate
problem, but it seems BitcoinJ's approach addresses that nicely.

On Thu, Jan 30, 2014 at 11:16 PM, Chuck <chuck+bitcoindev at borboggle.com> wrote:
> On 1/31/2014 3:16 AM, Jeremy Spilman wrote:
>> I think we want to separate the two issues;
>>
>>     1) Reliably getting refund/memo fields to the merchant/payee
>>     2) Who broadcasts a TX, how it's retried, how outputs are 'locked' and
>> if/when they should be [double]-spent to clear them
>>
>> We should be able to solve '1' without having to fully spec out behavior
>> for 2.
> My original message was focused on #1.  Not only #1, but ensuring the
> merchant can't act maliciously too.
>
> As far as #2 is concerned, I don't think it makes any difference - it's
> in both the customer and the merchant's best interest to have the
> transactions confirmed.
>
>>     c) Send them as a response to the PaymentRequest/PaymentDetails with the
>> UNsigned transaction, and then follow up with the signed transaction in a
>> separate message.
> ...
>> On Wed, 29 Jan 2014 21:47:51 -0800, Chuck <chuck+bitcoindev at borboggle.com>
>> wrote:
>>> 3. Customer builds a set of transactions and sends a new
>>> PaymentApprovalRequest message which includes a refund address and the
>>> unsigned transactions and their associated fully-signed transactionhash,
>>> the whole message signed with the private key of the refund address.
>> "Unsigned transactions and their associated fully-signed transaction hash"
>> -- isn't that a fully signed transaction? In this case, it doesn't solve
>> the core problem of the server being able to broadcast that transaction
>> without ACKing.
> What I meant was (and maybe this was roundabout?): the customer includes
> the UNsigned transactions as well as the hashes (and only the hashes) of
> the fully signed transactions.  The customer keeps the fully signed
> transactions private until the merchant ACKs the unsigned versions.  If
> the merchant has the hash of the fully signed transaction, he can
> monitor the network for delivery of the signed transaction.
>
> It definitely complicates things, but it's nothing that can't be done.
>
> Cheers,
>
> Chuck
>
> ------------------------------------------------------------------------------
> WatchGuard Dimension instantly turns raw network data into actionable
> security intelligence. It gives you real-time visual feedback on key
> security issues and trends.  Skip the complicated setup - simply import
> a virtual appliance and go from zero to informed in seconds.
> http://pubads.g.doubleclick.net/gampad/clk?id=123612991&iu=/4140/ostg.clktrk
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development



From mike at plan99.net  Fri Jan 31 18:13:42 2014
From: mike at plan99.net (Mike Hearn)
Date: Fri, 31 Jan 2014 19:13:42 +0100
Subject: [Bitcoin-development] Extension for BIP-0070 to support
	recurring payments
In-Reply-To: <D6BCC0C4-EF22-4DE8-868E-825D19C387E3@kill-bill.org>
References: <E1FDB3F2-25ED-4B99-979E-12CE943CBD66@kill-bill.org>
	<CANEZrP10z6_UAHD97mj22kVEGyXgHPQ2PdP_8RxHT5Py+xRP_A@mail.gmail.com>
	<D6BCC0C4-EF22-4DE8-868E-825D19C387E3@kill-bill.org>
Message-ID: <CANEZrP0FzTGmp1zbaW1VHJLk5117ZnTSehfF4uMX=+UFS+R_Dw@mail.gmail.com>

That looks OK at a very high level. Things you probably want to think about:

   - How to trigger it off the existing payment protocol (no new top level
   messages or mime types or uri extensions please)
   - Data structures to define the payment schedule
   - Do you allow pre-submission of time locked transactions or not?

I think as you prototype these things will become clearer.  You could try
prototyping either in Bitcoin Core (C++) or bitcoinj (java, look at the
PaymentSession class).



On Wed, Jan 29, 2014 at 3:47 AM, Stephane Brossier
<stephane at kill-bill.org>wrote:

>
>
>
>
>
>
>
>
>
>
>
>
>
> *From what I have seen so far, there seems to be an agreement that this is
> a nice feature to add. We are pretty new to that community and so we don't
> know exactly what the process is, and in particular how we reach consensus
> via email. I am certainly open to follow 'the way' if there is one, but one
> solution would be to follow Mike's suggestion on providing a (prototype)
> implementation first and then defining/refining the BIP. Odinn also
> suggested a possible retribution for our time through crowd-sourcing which
> I am interested to pursue if that makes sense.We have quite some experience
> on the subscription side of things and while we are growing our knowledge
> on the Bitcoin technology (and ecosystem at large) we would benefit from:*
> some feedbacks on the high level proposal* additional requirements we might
> have missedSo, below is a high level description of what we have in mind.
> If this sounds reasonable, we could start working on an implementation. I.
> Abstract---------------This describes a protocol to enable recurring
> payments in bitcoins and can be seen as an extension of BIP-0070. The main
> goal here is to have the customer subscribe to a service of some kind (that
> is, agreeing on the terms of that subscription contract), and then have the
> wallet make recurring payments without any intervention from the customer
> as long as the payments match what the customer agreed on paying.An example
> of such service would be an online streaming website, to which a user pays
> a fixed recurring monthly fee to access videos (a.k.a. resources). Note
> that there is also usage based billing: for example, the user may need to
> purchase additional access for premium videos (overage charges). This type
> of billing is more complicated and there are many variations to it used in
> the industry (pre-paid, ?). For the sake of discussion, we?ll focus on
> fixed recurring payments only, but we will keep usage in mind to make sure
> the protocol will be able to support it as well.II.
> Motivation------------------Subscription based services have been growing
> in the past few years and so the intent it to make it possible for
> customers to pay in bitcoins. Bitcoin?s push model presents new advantages
> for the customer compared to traditional payment methods: the user has
> control over the subscription (for example, there is no need to call the
> merchant to explicitly cancel the credit card payments). It also opens the
> door to subscription management tools in wallets (e.g. Hive apps), which
> would give user an overview of what they are paying each month.III. Flow of
> Operations----------------------------------------*
>
>
>
>
> *Creation of the subscription:- - - - - - - - - - - - - - - - - - - - - -
> 1. The customer clicks 'subscribe' -> A message is sent to the merchant.2.
> The merchant sends back a message to the wallet with the details of the
> subscription such as the amount to be paid. In reality, there will be more
> information but for the purpose of the prototype implementation this is
> sufficient.3. The wallet prompts the customer for authorization.4. The
> customer authorizes (or denies) it.5. The wallet sends the confirmation to
> the merchant.6. The merchant confirms the subscription was created.Ongoing
> payments:*
>
> *- - - - - - - - - - - - - - - -*
>
>
>
>
>
>
> *From that time on and since Bitcoin is a 'push' model, the wallet is
> responsible to poll the merchant for due payments associated with that
> subscription. Note that the merchant could specify hints to the wallet on
> when to poll (specific dates) or not during the registration of the
> subscription.Note that we can't simply have the wallet push X bitcoins
> every month: the user account on the merchant side may have gotten credits,
> invoice adjustments, etc. since the last invoice, so the amount to pay for
> a given billing period may be lower than the regular amount. It could even
> be zero if the user decides to make a one-time payment to the merchant
> directly using a different wallet. Hence, the wallet needs to get the
> latest invoice balance to make sure how much it should pay. This also opens
> the door for the support of overage charges.Quick note on the
> implementation on the merchant side: an entitlement system is a piece of
> logic on the merchant side which grants the user access to certain
> resources depending on the account status (unpaid invoices, etc.). This
> goes often hand in hand with a dunning system, which progressively
> restricts access as the user's account is more and more overdue. Since
> wallets can be offline for an extended period of time, payments may be
> missed and lead to an overdue state (e.g. extra fees, service degraded). It
> is the responsibility of the customer to ensure the wallet is up often
> enough for payments to happen.In that recurring phase where the wallet
> polls the merchant, the wallet is responsible to check that payments match
> the subscription contract; that is, the amount, frequency of payments, ?
> match what the customer agreed on. If so, the payment is made without
> asking for explicit approval from customer, and the flow is similar to
> BIP-0070: The message is sent to the merchant, and in parallel, a
> transaction is sent to the btcnet. The merchant sends an ACK to the wallet
> and of course checks the states of the transactions on the btcnet to mark
> that payment as successful.Subscription change (optional):*
>
> *- - - - - - - - - - - - - - - - - - - - - - - - *
>
>
> *Optionally we could implement a change in the ongoing subscription to
> address the upgrade/downgrade scenarios. Of course, we could also simply
> support a cancellation followed by a creation of a new subscription, but
> having that as a one atomic message is probably better. The steps are very
> similar to the initial registration.1. The customer clicks 'upgrade',
> 'downgrade', ? -> A msg is sent to the merchant.2. The merchant sends back
> a msg to the wallet with the detail of the NEW subscription. 3. The wallet
> prompts the customer for authorization.4. The customer authorizes (or
> denies) it.5. The wallet sends the confirmation to the merchant.6. The
> merchant confirms the change in the subscription.Cancellation of the
> subscription:*
>
> *- - - - - - - - - - - - - - - - - - - - - - - - - *
>
>
>
> *The cancellation is initiated from the customer:1. The customer clicks
> 'cancel' -> The wallet is informed that it  should not accept any new
> payment associated to that subscription.2. The wallet sends a message to
> the merchant to inform about the cancellation.3. The merchant confirms the
> subscription was cancelled.*
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140131/9beb6bd1/attachment.html>

