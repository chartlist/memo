From salvatore.ingala at gmail.com  Thu Dec  1 08:47:22 2022
From: salvatore.ingala at gmail.com (Salvatore Ingala)
Date: Thu, 1 Dec 2022 09:47:22 +0100
Subject: [bitcoin-dev] Merkleize All The Things
In-Reply-To: <7f3674d1-c1ad-9a82-e30f-7cf24d697faf@protonmail.com>
References: <CAMhCMoH9uZPeAE_2tWH6rf0RndqV+ypjbNzazpFwFnLUpPsZ7g@mail.gmail.com>
 <CALZpt+GVe0XTdWqV=LAcOj=nq+k2DEFqc+sKyxAujLDBR7bYbQ@mail.gmail.com>
 <CAMhCMoEONv3jriBU3qwm0pt75iF_sgra1H2Z4rOF8u+e7hs_cw@mail.gmail.com>
 <0f352f70-c93a-614f-e443-67d198ec2c26@protonmail.com>
 <7f3674d1-c1ad-9a82-e30f-7cf24d697faf@protonmail.com>
Message-ID: <CAMhCMoGabEASO9CGc1hAMpYZn4nWH5D8XFs3eFcSSFAitSFUGA@mail.gmail.com>

Hello Rijndael,



On Wed, 30 Nov 2022 at 23:09, Rijndael <rot13maxi at protonmail.com> wrote:

> Hello Salvatore,
>
> I found my answer re-reading your original post:
> > During the arbitration phase (say at the i-th leaf node of M_T), any
> party can win the challenge by providing correct values for tr_i = (st_i,
> op_i, st_{i + 1}). Crucially, only one party is able to provide correct
> values, and Script can verify that indeed the state moves from st_i to
> st_{i + 1} by executing op_i. The challenge is over.
>
You are correct, the computation step encoded in a leaf needs to be simple
enough for Script to verify it.

For the academic purpose of proving completeness (that is, any computation
can be successfully "proved" by the availability of the corresponding fraud
proof), one can imagine reducing the computation all the way down to a
circuit, where each step (leaf) is as simple as what can be checked with
{OP_NOT, OP_BOOLAND, OP_BOOLOR, OP_EQUAL}.

In practice, you would want to utilize Script to its fullest, so for
example you wouldn't compile a SHA256 computation to something else ? you'd
rather use OP_SHA256 directly.


> That raises leads to a different question: Alice initially posts a
> commitment to an execution trace of `f(x) = y`, `x`, and `y`. Bob Disagrees
> with `y` so starts the challenge protocol. Is there a commitment to `f`? In
> other words, the dispute protocol (as I read it) finds the leftmost step in
> Alice and Bob's execution traces that differ, and then rewards the coins to
> the participant who's "after-value" is computed by the step's operation
> applied to the "before value". But if the participants each present valid
> steps but with different operations, who wins? In other words, Alice could
> present [64, DECREMENT, 63] and Bob could present [64, INCREMENT, 65].
> Those steps don't match, but both are valid. Is there something to ensure
> that before the challenge protocol starts, that the execution trace that
> Alice posts is for the right computation and not a different computation
> that yields a favorable result for her (and for which she can generate a
> valid merkle tree)?
>

The function f is already hard-coded in the contract itself, by means of
the tree of scripts ? that already commits to the possible futures.
Therefore, once you are at state S14, you know that you are verifying the
6th step of the computation; and the operation in the 6th step of the
computation depends solely on f, not its inputs. In fact, you made me
realize that I could drop op_i from the i-th leaf commitment, and just
embed the information in the Script of that corresponding state.

Note that the states S0 to S14 of the 256x game are not _all_ the possible
states, but only the ones that occurred in that execution of the contract
(corresponding to a path from the root to the leaf of the Merkle tree of
the computation trace), and therefore the ones that materialized in a UTXO.
Different choices made by the parties (by providing different data, and
therefore choosing different branches) would lead to a different leaf, and
therefore to different (but in a certain sense "symmetric") states.

========

Since we are talking about the fact that f is committed to in the contract,
I'll take the chance to extend on this a bit with a fun construction on top.
It is well-known in the academic literature of state channels that you can
create contracts where even the function ("program", or "contract") is not
decided when the channel is created.

Since f is generic, we can choose f itself to be a universal Turing
machine. That is, we can imagine a function f(code, data) that executes a
program ("code") on the "data" given to it as input.
Since we can do fraud proofs on statements "f(code, data) == output", we
could build contracts where the "code" itself is chosen later.

For example, one could build a universal state channel, where parties can
enter any contract among themselves (e.g.: start playing a chess game)
entirely inside the channel. The state of this universal channel would
contain all the states of the individual contracts that are currently open
in the channel, and even starting/closing contracts can happen entirely
off-chain.

I believe these constructions are practical (the code of universal Turing
machines is not really complicated), so it might be worth exploring further
to figure out useful applications of this approach (supercharging
lightning?).

We should probably start by implementing testnet rock-paper-scissors in
MATT, though :)

Best,
Salvatore Ingala
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20221201/f0acc75f/attachment.html>

From daniel at gap600.com  Thu Dec  1 12:27:16 2022
From: daniel at gap600.com (Daniel Lipshitz)
Date: Thu, 1 Dec 2022 14:27:16 +0200
Subject: [bitcoin-dev] [Opt-in full-RBF] Zero-conf apps in immediate danger
Message-ID: <CACkWPs8-rZpGSJSEyLsg9gVAuPpHztXWSZvfGscGJCn05th0DQ@mail.gmail.com>

HI All

I am the CEO of GAP600. We guarantee zero confirmed Bitcoin and other
crypto  transactions, BTC is a primary part of our business. Our guarantee
enables our customers to recognise zero-conf deposits. We reimburse our
clients value of the trx should we get it wrong and a transaction we
confirmed gets double spent.

Should full RBF become default enabled and significantly adopted this would
have a major impact on the capacity to accept zerof confs on mainnet. With
the end result being this use case will be forced to move to a different
chain, with lightning being just another option.

I wanted to share some statistics about how significant this use case is.
GAP600 clients are primarily payment processors and non custodial
liquidity providers; you can see some of our clients on our site
www.gap600.com. There are also merchants who have developed their own tools
so GAP600 statistics are only a subset of the full use case.

I do not know of any wallet, exchange or custodian who accepts zero conf
without having some sort of solution in place. The market seems to be fully
aware of the risks of zero-conf. The opt-RBF seems to be a solution which
gives a clear free choice for actors.

Statistics for consideration as a sample of the zero conf use case -


   1. As of end of Nov 2022 - GAP600 has processed i.e responded to circa
   15M transactions
   2. These transactions have a cumulative value of 2.3B USD value.
   3. We currently are seeing circa 1.5M transactions queired per month.


It's a sizable amount of trxs on mainet and we are by no means the full
market of platforms accepting zero-conf.  I realise there are other
considerations which BTC has,  I would urge you to take into account the
major risk being placed on this significant market share when deciding to
make this feature default enabled and encouraging full adoption.

Thank you for your consideration
Daniel
________________________________

Daniel Lipshitz
GAP600| www.gap600.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20221201/cfe5b3d1/attachment.html>

From erik at q32.com  Thu Dec  1 22:03:55 2022
From: erik at q32.com (Erik Aronesty)
Date: Thu, 1 Dec 2022 17:03:55 -0500
Subject: [bitcoin-dev] [Opt-in full-RBF] Zero-conf apps in immediate
	danger
In-Reply-To: <CACkWPs8-rZpGSJSEyLsg9gVAuPpHztXWSZvfGscGJCn05th0DQ@mail.gmail.com>
References: <CACkWPs8-rZpGSJSEyLsg9gVAuPpHztXWSZvfGscGJCn05th0DQ@mail.gmail.com>
Message-ID: <CAJowKgJDPLiJBH6bFntsvLn=auqrncqCA-D_m4H9NE_Y1OSj3w@mail.gmail.com>

There has never been any enforcement of miner preferences.   The convention
is changing quickly, since miners are squeezed for cash and want to
capture every nickel, plus there are bounties for full rbf being posted
every day.

I would suggest considering to continue doing business, as usual, as if
full rbf is present.

This means:

- managing risk
- waiting for confirmations if the risk is too high
- using lightning if possible

No other coin or chain offers a safer way to do business than lightning
over bitcoin.




On Thu, Dec 1, 2022 at 7:32 AM Daniel Lipshitz via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> HI All
>
> I am the CEO of GAP600. We guarantee zero confirmed Bitcoin and other
> crypto  transactions, BTC is a primary part of our business. Our guarantee
> enables our customers to recognise zero-conf deposits. We reimburse our
> clients value of the trx should we get it wrong and a transaction we
> confirmed gets double spent.
>
> Should full RBF become default enabled and significantly adopted this
> would have a major impact on the capacity to accept zerof confs on mainnet.
> With the end result being this use case will be forced to move to a
> different chain, with lightning being just another option.
>
> I wanted to share some statistics about how significant this use case is.
> GAP600 clients are primarily payment processors and non custodial
> liquidity providers; you can see some of our clients on our site
> www.gap600.com. There are also merchants who have developed their own
> tools so GAP600 statistics are only a subset of the full use case.
>
> I do not know of any wallet, exchange or custodian who accepts zero conf
> without having some sort of solution in place. The market seems to be fully
> aware of the risks of zero-conf. The opt-RBF seems to be a solution which
> gives a clear free choice for actors.
>
> Statistics for consideration as a sample of the zero conf use case -
>
>
>    1. As of end of Nov 2022 - GAP600 has processed i.e responded to circa
>    15M transactions
>    2. These transactions have a cumulative value of 2.3B USD value.
>    3. We currently are seeing circa 1.5M transactions queired per month.
>
>
> It's a sizable amount of trxs on mainet and we are by no means the full
> market of platforms accepting zero-conf.  I realise there are other
> considerations which BTC has,  I would urge you to take into account the
> major risk being placed on this significant market share when deciding to
> make this feature default enabled and encouraging full adoption.
>
> Thank you for your consideration
> Daniel
> ________________________________
>
> Daniel Lipshitz
> GAP600| www.gap600.com
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20221201/cc56e561/attachment.html>

From pete at petertodd.org  Fri Dec  2 04:30:28 2022
From: pete at petertodd.org (Peter Todd)
Date: Thu, 1 Dec 2022 23:30:28 -0500
Subject: [bitcoin-dev] [Opt-in full-RBF] Zero-conf apps in immediate
 danger
In-Reply-To: <CACkWPs8-rZpGSJSEyLsg9gVAuPpHztXWSZvfGscGJCn05th0DQ@mail.gmail.com>
References: <CACkWPs8-rZpGSJSEyLsg9gVAuPpHztXWSZvfGscGJCn05th0DQ@mail.gmail.com>
Message-ID: <Y4l/ZHl9EvhaCpix@petertodd.org>

On Thu, Dec 01, 2022 at 02:27:16PM +0200, Daniel Lipshitz via bitcoin-dev wrote:
> Statistics for consideration as a sample of the zero conf use case -
> 
> 
>    1. As of end of Nov 2022 - GAP600 has processed i.e responded to circa
>    15M transactions
>    2. These transactions have a cumulative value of 2.3B USD value.
>    3. We currently are seeing circa 1.5M transactions queired per month.

I'm curious, what are the time frames involved in those figures? Eg 15M txs
over how long?

-- 
https://petertodd.org 'peter'[:-1]@petertodd.org
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 833 bytes
Desc: not available
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20221201/ba0fa5b0/attachment.sig>

From antoine.riard at gmail.com  Fri Dec  2 01:52:46 2022
From: antoine.riard at gmail.com (Antoine Riard)
Date: Thu, 1 Dec 2022 20:52:46 -0500
Subject: [bitcoin-dev] [Opt-in full-RBF] Zero-conf apps in immediate
	danger
In-Reply-To: <CACkWPs8-rZpGSJSEyLsg9gVAuPpHztXWSZvfGscGJCn05th0DQ@mail.gmail.com>
References: <CACkWPs8-rZpGSJSEyLsg9gVAuPpHztXWSZvfGscGJCn05th0DQ@mail.gmail.com>
Message-ID: <CALZpt+GnTE+LMSMHVt-E7Uq0FeuqrSKyr1m9OJa_yKkh6MrgzA@mail.gmail.com>

Hi Daniel,

>From my understanding of GAP600, you're operating a zero-conf risk analysis
business, which is integrated and leveraged by payment processors/liquidity
providers and merchants. A deployment of fullrbf by enough full-node
operators and a subset of the mining hashrate would lower the cost of
double-spend attack by lamda users, therefore increasing the risk exposure
of your users. This increased risk exposure could lead you to alter the
acceptance of incoming zero-conf transactions, AFAICT in a similar
reasoning as exposed by Bitrefill earlier this year [0].

About the statistics you're asking for considerations, few further
questions, on those 1.5M transactions per month, a) how many are
Bitcoin-only (as I understand to be multi-cryptocurrencies), b) how many
are excluded from zeroconf due to factors like RBF, long-chain of
unconfirmed ancestors or too high-value and c) what has been the average
feerate (assuming a standard size of 200 bytes) ?

My personal position on fullrbf is still the same as expressed in #26525
[1]. As a community, I think we still don't have conceptual consensus on
deploying full-rbf, neither to remove it. In the direction of removing the
current option from Bitcoin Core, I think the prerequisite to address are
the qualification of enough economic flows at risk and the presence of a
sizable loss in miners income. Beyond that, I think there is still the open
question if we (we, as the Bitcoin protocol development community, with all
its stakeholders) should restrain user choice in policy settings in the
name of preserving mining income and established use-case stability.

To recall, the original technical motivation of this option, and the wider
smoother deployment was to address a DoS vector affecting another class of
use-case: multi-party transactions like coinjoin and contracting protocols
like Lightning [2] [3]. All of them expect to generate economic flows and
corresponding mining income. Since then, alternative paths to solve this
DoS vector have been devised, all with their own trade-offs and conceptual
issues [4] [5].

Best,
Antoine

[0]
https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-October/021070.html
[1] https://github.com/bitcoin/bitcoin/pull/26525#issuecomment-1319499006
[2]
https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-June/020557.html
[3]
https://lists.linuxfoundation.org/pipermail/lightning-dev/2021-May/003033.html
[4]
https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-October/021135.html
[5]
https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-November/021144.html

Le jeu. 1 d?c. 2022 ? 07:32, Daniel Lipshitz via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> a ?crit :

> HI All
>
> I am the CEO of GAP600. We guarantee zero confirmed Bitcoin and other
> crypto  transactions, BTC is a primary part of our business. Our guarantee
> enables our customers to recognise zero-conf deposits. We reimburse our
> clients value of the trx should we get it wrong and a transaction we
> confirmed gets double spent.
>
> Should full RBF become default enabled and significantly adopted this
> would have a major impact on the capacity to accept zerof confs on mainnet.
> With the end result being this use case will be forced to move to a
> different chain, with lightning being just another option.
>
> I wanted to share some statistics about how significant this use case is.
> GAP600 clients are primarily payment processors and non custodial
> liquidity providers; you can see some of our clients on our site
> www.gap600.com. There are also merchants who have developed their own
> tools so GAP600 statistics are only a subset of the full use case.
>
> I do not know of any wallet, exchange or custodian who accepts zero conf
> without having some sort of solution in place. The market seems to be fully
> aware of the risks of zero-conf. The opt-RBF seems to be a solution which
> gives a clear free choice for actors.
>
> Statistics for consideration as a sample of the zero conf use case -
>
>
>    1. As of end of Nov 2022 - GAP600 has processed i.e responded to circa
>    15M transactions
>    2. These transactions have a cumulative value of 2.3B USD value.
>    3. We currently are seeing circa 1.5M transactions queired per month.
>
>
> It's a sizable amount of trxs on mainet and we are by no means the full
> market of platforms accepting zero-conf.  I realise there are other
> considerations which BTC has,  I would urge you to take into account the
> major risk being placed on this significant market share when deciding to
> make this feature default enabled and encouraging full adoption.
>
> Thank you for your consideration
> Daniel
> ________________________________
>
> Daniel Lipshitz
> GAP600| www.gap600.com
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20221201/ef417993/attachment-0001.html>

From daniel at gap600.com  Fri Dec  2 06:34:07 2022
From: daniel at gap600.com (Daniel Lipshitz)
Date: Fri, 2 Dec 2022 08:34:07 +0200
Subject: [bitcoin-dev] [Opt-in full-RBF] Zero-conf apps in immediate
	danger
In-Reply-To: <CAJowKgJDPLiJBH6bFntsvLn=auqrncqCA-D_m4H9NE_Y1OSj3w@mail.gmail.com>
References: <CACkWPs8-rZpGSJSEyLsg9gVAuPpHztXWSZvfGscGJCn05th0DQ@mail.gmail.com>
 <CAJowKgJDPLiJBH6bFntsvLn=auqrncqCA-D_m4H9NE_Y1OSj3w@mail.gmail.com>
Message-ID: <CACkWPs99nqCDpdTdADAMnWHaEO55a6jK+-dk0=3M0BsDcveAAQ@mail.gmail.com>

If fullRBF would become default and this would become dominant, zero-conf
acceptance would become extremely difficult and would impact significantly
this market share because its not the everyday users who would actually
worry about it however the attackers would be all over it.

As it is today the network has brief periods of stress when trxs are
delayed but in general clears regularly and from time to time there is
stress. Today actors' wallets and merchants etc already have the option of
RBF.
________________________________

Daniel Lipshitz
GAP600| www.gap600.com
Phone: +44 113 4900 117
Skype: daniellipshitz123
Twitter: @daniellipshitz


On Fri, Dec 2, 2022 at 12:04 AM Erik Aronesty <erik at q32.com> wrote:

> There has never been any enforcement of miner preferences.   The
> convention is changing quickly, since miners are squeezed for cash and want
> to capture every nickel, plus there are bounties for full rbf being posted
> every day.
>
> I would suggest considering to continue doing business, as usual, as if
> full rbf is present.
>
> This means:
>
> - managing risk
> - waiting for confirmations if the risk is too high
> - using lightning if possible
>
> No other coin or chain offers a safer way to do business than lightning
> over bitcoin.
>
>
>
>
> On Thu, Dec 1, 2022 at 7:32 AM Daniel Lipshitz via bitcoin-dev <
> bitcoin-dev at lists.linuxfoundation.org> wrote:
>
>> HI All
>>
>> I am the CEO of GAP600. We guarantee zero confirmed Bitcoin and other
>> crypto  transactions, BTC is a primary part of our business. Our guarantee
>> enables our customers to recognise zero-conf deposits. We reimburse our
>> clients value of the trx should we get it wrong and a transaction we
>> confirmed gets double spent.
>>
>> Should full RBF become default enabled and significantly adopted this
>> would have a major impact on the capacity to accept zerof confs on mainnet.
>> With the end result being this use case will be forced to move to a
>> different chain, with lightning being just another option.
>>
>> I wanted to share some statistics about how significant this use case is.
>> GAP600 clients are primarily payment processors and non custodial
>> liquidity providers; you can see some of our clients on our site
>> www.gap600.com. There are also merchants who have developed their own
>> tools so GAP600 statistics are only a subset of the full use case.
>>
>> I do not know of any wallet, exchange or custodian who accepts zero conf
>> without having some sort of solution in place. The market seems to be fully
>> aware of the risks of zero-conf. The opt-RBF seems to be a solution which
>> gives a clear free choice for actors.
>>
>> Statistics for consideration as a sample of the zero conf use case -
>>
>>
>>    1. As of end of Nov 2022 - GAP600 has processed i.e responded to
>>    circa 15M transactions
>>    2. These transactions have a cumulative value of 2.3B USD value.
>>    3. We currently are seeing circa 1.5M transactions queired per month.
>>
>>
>> It's a sizable amount of trxs on mainet and we are by no means the full
>> market of platforms accepting zero-conf.  I realise there are other
>> considerations which BTC has,  I would urge you to take into account the
>> major risk being placed on this significant market share when deciding to
>> make this feature default enabled and encouraging full adoption.
>>
>> Thank you for your consideration
>> Daniel
>> ________________________________
>>
>> Daniel Lipshitz
>> GAP600| www.gap600.com
>>
>> _______________________________________________
>> bitcoin-dev mailing list
>> bitcoin-dev at lists.linuxfoundation.org
>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20221202/ed67276b/attachment-0001.html>

From daniel at gap600.com  Fri Dec  2 06:59:01 2022
From: daniel at gap600.com (Daniel Lipshitz)
Date: Fri, 2 Dec 2022 08:59:01 +0200
Subject: [bitcoin-dev] [Opt-in full-RBF] Zero-conf apps in immediate
	danger
In-Reply-To: <CALZpt+GnTE+LMSMHVt-E7Uq0FeuqrSKyr1m9OJa_yKkh6MrgzA@mail.gmail.com>
References: <CACkWPs8-rZpGSJSEyLsg9gVAuPpHztXWSZvfGscGJCn05th0DQ@mail.gmail.com>
 <CALZpt+GnTE+LMSMHVt-E7Uq0FeuqrSKyr1m9OJa_yKkh6MrgzA@mail.gmail.com>
Message-ID: <CACkWPs_fgjkF8wJxUVex=R4sS-B6R+UgtqVQU0T-8vzpHjWT2Q@mail.gmail.com>

HI Antoine

Thank you for all the references - I agree with Sergej
statement "opportunity makes the thief"

The 1.5M trxs are all BTC which our clients query, I dont have specifics
for those trxs i.e. reasons for not being confirmed. However we target to
achieve +90% confirmation of trxs for our clients. Fee rates the
transactions generally follow standard fee/rate policy similar to all
industry recommendations, we recommend higher priority fee rate but approve
trxs well below that level. I would say we havent seen a trx with medium
fee rate be double spend - this is excluding race attacks or as you
mentioned ancestral unconfirmed attacks.

Opt in RBF is used in many ways to try to do double spends - i.e with
ancestral attacks inputs which are not confirmed, and also publishing the
RBF first and then the straight trxs later. In general double spends excl
Optin RBF does not occur alot at all - but the presence of a potential risk
causes everyone to wait back for confirmations.

Looking at a sample of latest 4.3M trxs, I can see crica 11k trxs which
seem to be double spent vast majority of these will be RBF, also on trx
that are high risk and we dont confirm the attacker has no incentive to
follow through with the second trxs.

I see quite a bit of reference to the benefit to miners for RBF - I would
think this cash flow benefit is not significant but I would suggest getting
input from a miner themselves.

Best
Daniel

________________________________

Daniel Lipshitz
GAP600| www.gap600.com
Phone: +44 113 4900 117
Skype: daniellipshitz123
Twitter: @daniellipshitz


On Fri, Dec 2, 2022 at 3:52 AM Antoine Riard <antoine.riard at gmail.com>
wrote:

> Hi Daniel,
>
> From my understanding of GAP600, you're operating a zero-conf risk
> analysis business, which is integrated and leveraged by payment
> processors/liquidity providers and merchants. A deployment of fullrbf by
> enough full-node operators and a subset of the mining hashrate would lower
> the cost of double-spend attack by lamda users, therefore increasing the
> risk exposure of your users. This increased risk exposure could lead you to
> alter the acceptance of incoming zero-conf transactions, AFAICT in a
> similar reasoning as exposed by Bitrefill earlier this year [0].
>
> About the statistics you're asking for considerations, few further
> questions, on those 1.5M transactions per month, a) how many are
> Bitcoin-only (as I understand to be multi-cryptocurrencies), b) how many
> are excluded from zeroconf due to factors like RBF, long-chain of
> unconfirmed ancestors or too high-value and c) what has been the average
> feerate (assuming a standard size of 200 bytes) ?
>
> My personal position on fullrbf is still the same as expressed in #26525
> [1]. As a community, I think we still don't have conceptual consensus on
> deploying full-rbf, neither to remove it. In the direction of removing the
> current option from Bitcoin Core, I think the prerequisite to address are
> the qualification of enough economic flows at risk and the presence of a
> sizable loss in miners income. Beyond that, I think there is still the open
> question if we (we, as the Bitcoin protocol development community, with all
> its stakeholders) should restrain user choice in policy settings in the
> name of preserving mining income and established use-case stability.
>
> To recall, the original technical motivation of this option, and the wider
> smoother deployment was to address a DoS vector affecting another class of
> use-case: multi-party transactions like coinjoin and contracting protocols
> like Lightning [2] [3]. All of them expect to generate economic flows and
> corresponding mining income. Since then, alternative paths to solve this
> DoS vector have been devised, all with their own trade-offs and conceptual
> issues [4] [5].
>
> Best,
> Antoine
>
> [0]
> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-October/021070.html
> [1] https://github.com/bitcoin/bitcoin/pull/26525#issuecomment-1319499006
> [2]
> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-June/020557.html
> [3]
> https://lists.linuxfoundation.org/pipermail/lightning-dev/2021-May/003033.html
> [4]
> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-October/021135.html
> [5]
> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-November/021144.html
>
> Le jeu. 1 d?c. 2022 ? 07:32, Daniel Lipshitz via bitcoin-dev <
> bitcoin-dev at lists.linuxfoundation.org> a ?crit :
>
>> HI All
>>
>> I am the CEO of GAP600. We guarantee zero confirmed Bitcoin and other
>> crypto  transactions, BTC is a primary part of our business. Our guarantee
>> enables our customers to recognise zero-conf deposits. We reimburse our
>> clients value of the trx should we get it wrong and a transaction we
>> confirmed gets double spent.
>>
>> Should full RBF become default enabled and significantly adopted this
>> would have a major impact on the capacity to accept zerof confs on mainnet.
>> With the end result being this use case will be forced to move to a
>> different chain, with lightning being just another option.
>>
>> I wanted to share some statistics about how significant this use case is.
>> GAP600 clients are primarily payment processors and non custodial
>> liquidity providers; you can see some of our clients on our site
>> www.gap600.com. There are also merchants who have developed their own
>> tools so GAP600 statistics are only a subset of the full use case.
>>
>> I do not know of any wallet, exchange or custodian who accepts zero conf
>> without having some sort of solution in place. The market seems to be fully
>> aware of the risks of zero-conf. The opt-RBF seems to be a solution which
>> gives a clear free choice for actors.
>>
>> Statistics for consideration as a sample of the zero conf use case -
>>
>>
>>    1. As of end of Nov 2022 - GAP600 has processed i.e responded to
>>    circa 15M transactions
>>    2. These transactions have a cumulative value of 2.3B USD value.
>>    3. We currently are seeing circa 1.5M transactions queired per month.
>>
>>
>> It's a sizable amount of trxs on mainet and we are by no means the full
>> market of platforms accepting zero-conf.  I realise there are other
>> considerations which BTC has,  I would urge you to take into account the
>> major risk being placed on this significant market share when deciding to
>> make this feature default enabled and encouraging full adoption.
>>
>> Thank you for your consideration
>> Daniel
>> ________________________________
>>
>> Daniel Lipshitz
>> GAP600| www.gap600.com
>>
>> _______________________________________________
>> bitcoin-dev mailing list
>> bitcoin-dev at lists.linuxfoundation.org
>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20221202/9b026be3/attachment-0001.html>

From daniel at gap600.com  Fri Dec  2 07:06:26 2022
From: daniel at gap600.com (Daniel Lipshitz)
Date: Fri, 2 Dec 2022 09:06:26 +0200
Subject: [bitcoin-dev] [Opt-in full-RBF] Zero-conf apps in immediate
	danger
In-Reply-To: <Y4l/ZHl9EvhaCpix@petertodd.org>
References: <CACkWPs8-rZpGSJSEyLsg9gVAuPpHztXWSZvfGscGJCn05th0DQ@mail.gmail.com>
 <Y4l/ZHl9EvhaCpix@petertodd.org>
Message-ID: <CACkWPs_v=MYFrn=LzPSK4+=Enw2R5+REap+MFLRhwtxcwGvEHA@mail.gmail.com>

Yes I can see how that is not clear, apologies.

Just BTC.
>From Jan1 2022 up till end of November 2022 GAP600 has processed circa 15M
trxs. With a value of 2.3B USD.
In 2021 we did - circa 12.5M.
In 2020 we did circa 6.5M.

We have been in production since 2016 and working on the project since
2014/2015.


________________________________

Daniel Lipshitz
GAP600| www.gap600.com
Phone: +44 113 4900 117
Skype: daniellipshitz123
Twitter: @daniellipshitz


On Fri, Dec 2, 2022 at 6:30 AM Peter Todd <pete at petertodd.org> wrote:

> On Thu, Dec 01, 2022 at 02:27:16PM +0200, Daniel Lipshitz via bitcoin-dev
> wrote:
> > Statistics for consideration as a sample of the zero conf use case -
> >
> >
> >    1. As of end of Nov 2022 - GAP600 has processed i.e responded to circa
> >    15M transactions
> >    2. These transactions have a cumulative value of 2.3B USD value.
> >    3. We currently are seeing circa 1.5M transactions queired per month.
>
> I'm curious, what are the time frames involved in those figures? Eg 15M txs
> over how long?
>
> --
> https://petertodd.org 'peter'[:-1]@petertodd.org
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20221202/f7c57455/attachment-0001.html>

From antoine.riard at gmail.com  Fri Dec  2 22:35:39 2022
From: antoine.riard at gmail.com (Antoine Riard)
Date: Fri, 2 Dec 2022 17:35:39 -0500
Subject: [bitcoin-dev] Fwd: [Opt-in full-RBF] Zero-conf apps in immediate
	danger
In-Reply-To: <CALZpt+GnTE+LMSMHVt-E7Uq0FeuqrSKyr1m9OJa_yKkh6MrgzA@mail.gmail.com>
References: <CACkWPs8-rZpGSJSEyLsg9gVAuPpHztXWSZvfGscGJCn05th0DQ@mail.gmail.com>
 <CALZpt+GnTE+LMSMHVt-E7Uq0FeuqrSKyr1m9OJa_yKkh6MrgzA@mail.gmail.com>
Message-ID: <CALZpt+HFFwY4XECNZj3XLqnaumPeDjrwvnCsRa3vsGQfuXn8wA@mail.gmail.com>

Hi Daniel,

>From my understanding of GAP600, you're operating a zero-conf risk analysis
business, which is integrated and leveraged by payment processors/liquidity
providers and merchants. A deployment of fullrbf by enough full-node
operators and a subset of the mining hashrate would lower the cost of
double-spend attack by lamda users, therefore increasing the risk exposure
of your users. This increased risk exposure could lead you to alter the
acceptance of incoming zero-conf transactions, AFAICT in a similar
reasoning as exposed by Bitrefill earlier this year [0].

About the statistics you're asking for considerations, few further
questions, on those 1.5M transactions per month, a) how many are
Bitcoin-only (as I understand to be multi-cryptocurrencies), b) how many
are excluded from zeroconf due to factors like RBF, long-chain of
unconfirmed ancestors or too high-value and c) what has been the average
feerate (assuming a standard size of 200 bytes) ?

My personal position on fullrbf is still the same as expressed in #26525
[1]. As a community, I think we still don't have conceptual consensus on
deploying full-rbf, nor to remove it. In the direction of removing the
current option from Bitcoin Core, I think the prerequisite to address are
the qualification of enough economic flows at risk and the presence of a
sizable loss in miners income. Beyond that, I think there is still the open
question if we (we, as the Bitcoin protocol development community, with all
its stakeholders) should restrain user choice in policy settings in the
name of preserving mining income and established use-case stability.

To recall, the original technical motivation of this option, and the wider
smoother deployment was to address a DoS vector affecting another class of
use-case: multi-party transactions like coinjoin and contracting protocols
like Lightning [2] [3]. All of them expect to generate economic flows and
corresponding mining income. Since then, alternative paths to solve this
DoS vector have been devised, all with their own trade-offs and conceptual
issues [4] [5].

Best,
Antoine

[0]
https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-October/021070.html
[1] https://github.com/bitcoin/bitcoin/pull/26525#issuecomment-1319499006
[2]
https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-June/020557.html
[3]
https://lists.linuxfoundation.org/pipermail/lightning-dev/2021-May/003033.html
[4]
https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-October/021135.html
[5]
https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-November/021144.html
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20221202/532b4dc0/attachment.html>

From pete at petertodd.org  Sat Dec  3 08:50:13 2022
From: pete at petertodd.org (Peter Todd)
Date: Sat, 3 Dec 2022 03:50:13 -0500
Subject: [bitcoin-dev] [Opt-in full-RBF] Zero-conf apps in immediate
 danger
In-Reply-To: <CACkWPs_v=MYFrn=LzPSK4+=Enw2R5+REap+MFLRhwtxcwGvEHA@mail.gmail.com>
References: <CACkWPs8-rZpGSJSEyLsg9gVAuPpHztXWSZvfGscGJCn05th0DQ@mail.gmail.com>
 <Y4l/ZHl9EvhaCpix@petertodd.org>
 <CACkWPs_v=MYFrn=LzPSK4+=Enw2R5+REap+MFLRhwtxcwGvEHA@mail.gmail.com>
Message-ID: <Y4sNxWkBp7+ogcJb@petertodd.org>

On Fri, Dec 02, 2022 at 09:06:26AM +0200, Daniel Lipshitz wrote:
> Yes I can see how that is not clear, apologies.
> 
> Just BTC.
> From Jan1 2022 up till end of November 2022 GAP600 has processed circa 15M
> trxs. With a value of 2.3B USD.
> In 2021 we did - circa 12.5M.
> In 2020 we did circa 6.5M.
> 
> We have been in production since 2016 and working on the project since
> 2014/2015.

Thanks.

I note on your website that you claim ShapeShift is one of your clients. I just
checked and ShapeShift appears to wait for a confirmation before allowing a
trade when funded with a high-fee, non-opt-in-rbf transaction.

What exactly is the service that you are providing for ShapeShift?

-- 
https://petertodd.org 'peter'[:-1]@petertodd.org
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 833 bytes
Desc: not available
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20221203/864cc58b/attachment.sig>

From daniel at gap600.com  Sat Dec  3 11:01:16 2022
From: daniel at gap600.com (Daniel Lipshitz)
Date: Sat, 3 Dec 2022 13:01:16 +0200
Subject: [bitcoin-dev] [Opt-in full-RBF] Zero-conf apps in immediate
	danger
In-Reply-To: <Y4sNxWkBp7+ogcJb@petertodd.org>
References: <CACkWPs8-rZpGSJSEyLsg9gVAuPpHztXWSZvfGscGJCn05th0DQ@mail.gmail.com>
 <Y4l/ZHl9EvhaCpix@petertodd.org>
 <CACkWPs_v=MYFrn=LzPSK4+=Enw2R5+REap+MFLRhwtxcwGvEHA@mail.gmail.com>
 <Y4sNxWkBp7+ogcJb@petertodd.org>
Message-ID: <CACkWPs9p0K-1RbVMipiAwjhexaNgmMgjENYvd9S1DpA+JVcE=w@mail.gmail.com>

Shapeshift used to be clients in fact one of our first when we started in
2016.

They no longer use our service but from time to time use us for fee
recommendations. So we actually should remove their logo as a current
client.

If you wish to test it out try find a merchant using Coinpayments or
Coinspaid.

Also some of our non custodial liquidity providers offer service no
custodial wallets. I am not sure which.

On Sat, 3 Dec 2022 at 10:50 Peter Todd <pete at petertodd.org> wrote:

> On Fri, Dec 02, 2022 at 09:06:26AM +0200, Daniel Lipshitz wrote:
> > Yes I can see how that is not clear, apologies.
> >
> > Just BTC.
> > From Jan1 2022 up till end of November 2022 GAP600 has processed circa
> 15M
> > trxs. With a value of 2.3B USD.
> > In 2021 we did - circa 12.5M.
> > In 2020 we did circa 6.5M.
> >
> > We have been in production since 2016 and working on the project since
> > 2014/2015.
>
> Thanks.
>
> I note on your website that you claim ShapeShift is one of your clients. I
> just
> checked and ShapeShift appears to wait for a confirmation before allowing a
> trade when funded with a high-fee, non-opt-in-rbf transaction.
>
> What exactly is the service that you are providing for ShapeShift?
>
> --
> https://petertodd.org 'peter'[:-1]@petertodd.org
>
-- 
________________________________
Daniel Lipshitz
GAP600
www.Gap600.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20221203/6397770d/attachment.html>

From pete at petertodd.org  Sat Dec  3 12:12:02 2022
From: pete at petertodd.org (Peter Todd)
Date: Sat, 3 Dec 2022 07:12:02 -0500
Subject: [bitcoin-dev] [Opt-in full-RBF] Zero-conf apps in immediate
 danger
In-Reply-To: <CACkWPs9p0K-1RbVMipiAwjhexaNgmMgjENYvd9S1DpA+JVcE=w@mail.gmail.com>
References: <CACkWPs8-rZpGSJSEyLsg9gVAuPpHztXWSZvfGscGJCn05th0DQ@mail.gmail.com>
 <Y4l/ZHl9EvhaCpix@petertodd.org>
 <CACkWPs_v=MYFrn=LzPSK4+=Enw2R5+REap+MFLRhwtxcwGvEHA@mail.gmail.com>
 <Y4sNxWkBp7+ogcJb@petertodd.org>
 <CACkWPs9p0K-1RbVMipiAwjhexaNgmMgjENYvd9S1DpA+JVcE=w@mail.gmail.com>
Message-ID: <Y4s9EqMfk+yXCzIO@petertodd.org>

On Sat, Dec 03, 2022 at 01:01:16PM +0200, Daniel Lipshitz wrote:
> Shapeshift used to be clients in fact one of our first when we started in
> 2016.
> 
> They no longer use our service but from time to time use us for fee
> recommendations. So we actually should remove their logo as a current
> client.

Yes you should. When did ShapeShift stop using your service? Did they explain
why?

> If you wish to test it out try find a merchant using Coinpayments or
> Coinspaid.
> 
> Also some of our non custodial liquidity providers offer service no
> custodial wallets. I am not sure which.

I see that you also advertise that Gap600 is "Trusted by" Coindirect and
Coinify, both AML/KYC crypto exchanges. Obviously, with full AML/KYC
double-spends are not much of a concern. And it's not even clear that
either accepts zeroconf anyway, as I'll explain later.

On this list you claimed that:

>  1. As of end of Nov 2022 - GAP600 has processed i.e responded to circa
>  15M transactions
>  2. These transactions have a cumulative value of 2.3B USD value.
>  3. We currently are seeing circa 1.5M transactions queired per month.

What's the value and number of transactions that *actually* rely on your
unconfirmed transaction tools? The only category that would apply for is goods
provided immediately and irrovocably, without AML/KYC. Because it sounds like
these figures may be significantly overstated.


Re: CoinsPaid, what you say here makes it also sound like it relies on AML/KYC:

> CoinsPaid applies a special software tool across its solutions to conduct
> stringent KYC procedures and a risk-based approach to CDD that verify user
> identities to mitigate fraud, money laundering and other activities linked to
> criminality and terrorism.
https://www.gap600.com/uncategorized/coinspaid/

Re: Coindirect, the documentation I can find appears to say that confirmations
are required before you can use coins deposited into Coindirect:

> Digital currency transactions must be confirmed on the relevant network block
> before they are considered valid. Only once confirmed, will you be able to
> use the coins deposited in your Coindirect wallet.
https://help.coindirect.com/hc/en-us/articles/115002441974-How-quickly-can-I-use-coins-deposited-into-my-Coindirect-wallet-

This is repeated here as well: https://help.coindirect.com/hc/en-us/articles/4409120006546--Deposits-

Re: Coinify, the API docs don't give any indication of risk scoring or any
other Gap600 integration:

https://merchant.coinify.com/docs/api/#payment-object

-- 
https://petertodd.org 'peter'[:-1]@petertodd.org
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 833 bytes
Desc: not available
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20221203/2d341053/attachment.sig>

From daniel at gap600.com  Sat Dec  3 11:51:19 2022
From: daniel at gap600.com (Daniel Lipshitz)
Date: Sat, 3 Dec 2022 13:51:19 +0200
Subject: [bitcoin-dev] [Opt-in full-RBF] Zero-conf apps in immediate
	danger
In-Reply-To: <CACkWPs9p0K-1RbVMipiAwjhexaNgmMgjENYvd9S1DpA+JVcE=w@mail.gmail.com>
References: <CACkWPs8-rZpGSJSEyLsg9gVAuPpHztXWSZvfGscGJCn05th0DQ@mail.gmail.com>
 <Y4l/ZHl9EvhaCpix@petertodd.org>
 <CACkWPs_v=MYFrn=LzPSK4+=Enw2R5+REap+MFLRhwtxcwGvEHA@mail.gmail.com>
 <Y4sNxWkBp7+ogcJb@petertodd.org>
 <CACkWPs9p0K-1RbVMipiAwjhexaNgmMgjENYvd9S1DpA+JVcE=w@mail.gmail.com>
Message-ID: <CACkWPs96DvkjeHm_HgYi_eX8PZL0tU90_-60Y-wAr4KQjcCQAg@mail.gmail.com>

Can also set you up with a trial account - interface is via API - just let
me know which email you wish for me to use and I will send over an
activation link which is active for 24 hours.

Happy to do it for other members list as well.

On Sat, 3 Dec 2022 at 13:01 Daniel Lipshitz <daniel at gap600.com> wrote:

> Shapeshift used to be clients in fact one of our first when we started in
> 2016.
>
> They no longer use our service but from time to time use us for fee
> recommendations. So we actually should remove their logo as a current
> client.
>
> If you wish to test it out try find a merchant using Coinpayments or
> Coinspaid.
>
> Also some of our non custodial liquidity providers offer service no
> custodial wallets. I am not sure which.
>
> On Sat, 3 Dec 2022 at 10:50 Peter Todd <pete at petertodd.org> wrote:
>
>> On Fri, Dec 02, 2022 at 09:06:26AM +0200, Daniel Lipshitz wrote:
>> > Yes I can see how that is not clear, apologies.
>> >
>> > Just BTC.
>> > From Jan1 2022 up till end of November 2022 GAP600 has processed circa
>> 15M
>> > trxs. With a value of 2.3B USD.
>> > In 2021 we did - circa 12.5M.
>> > In 2020 we did circa 6.5M.
>> >
>> > We have been in production since 2016 and working on the project since
>> > 2014/2015.
>>
>> Thanks.
>>
>> I note on your website that you claim ShapeShift is one of your clients.
>> I just
>> checked and ShapeShift appears to wait for a confirmation before allowing
>> a
>> trade when funded with a high-fee, non-opt-in-rbf transaction.
>>
>> What exactly is the service that you are providing for ShapeShift?
>>
>> --
>> https://petertodd.org 'peter'[:-1]@petertodd.org
>>
> --
> ________________________________
> Daniel Lipshitz
> GAP600
> www.Gap600.com
>
>
> --
________________________________
Daniel Lipshitz
GAP600
www.Gap600.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20221203/13468447/attachment.html>

From daniel at gap600.com  Sat Dec  3 13:17:16 2022
From: daniel at gap600.com (Daniel Lipshitz)
Date: Sat, 3 Dec 2022 15:17:16 +0200
Subject: [bitcoin-dev] [Opt-in full-RBF] Zero-conf apps in immediate
	danger
In-Reply-To: <Y4s9EqMfk+yXCzIO@petertodd.org>
References: <CACkWPs8-rZpGSJSEyLsg9gVAuPpHztXWSZvfGscGJCn05th0DQ@mail.gmail.com>
 <Y4l/ZHl9EvhaCpix@petertodd.org>
 <CACkWPs_v=MYFrn=LzPSK4+=Enw2R5+REap+MFLRhwtxcwGvEHA@mail.gmail.com>
 <Y4sNxWkBp7+ogcJb@petertodd.org>
 <CACkWPs9p0K-1RbVMipiAwjhexaNgmMgjENYvd9S1DpA+JVcE=w@mail.gmail.com>
 <Y4s9EqMfk+yXCzIO@petertodd.org>
Message-ID: <CACkWPs-maywWfAt_qhnsUOTm6u_Ph=LgbuLSaF1NRJSTBWkTdg@mail.gmail.com>

The statistics that I have stated are based on trxs that rely on our tool.
They are not overstated, this is a reflection of the 0conf market on BTC.

They are trxs which our clients query via the API and which I clients pay
subscription for.

There is no point for clients to send us trxs they don?t want or need our
response from. We are a B2b provider so we are not sure how and who the end
users and applications are.

Coinify definitely doesn?t send us all their traffic, as I would think some
of our other clients.

Here is some external confirmation a bit old though but still-
https://blog.coinpayments.net/news-features/gap600
You can also see our video of Coinspaid using our service on our site - all
our Marcom is a bit old.

We service primarily payment processors and liquidity providers and not end
merchants so I can?t say how and to who end clients implement it.

If AML/KYC was enough to prevent double spends all exchanges would offer
0conf.

I don?t know the split with our clients as it?s non of our business but
definitely a significant amount of end users are not Kyced for the trxs.

Best would be to try and talk to some of our major clients - ie
Coinpayments, Coinspaid and Coinify.



On Sat, 3 Dec 2022 at 14:12 Peter Todd <pete at petertodd.org> wrote:

> On Sat, Dec 03, 2022 at 01:01:16PM +0200, Daniel Lipshitz wrote:
> > Shapeshift used to be clients in fact one of our first when we started in
> > 2016.
> >
> > They no longer use our service but from time to time use us for fee
> > recommendations. So we actually should remove their logo as a current
> > client.
>
> Yes you should. When did ShapeShift stop using your service? Did they
> explain
> why?
>
> > If you wish to test it out try find a merchant using Coinpayments or
> > Coinspaid.
> >
> > Also some of our non custodial liquidity providers offer service no
> > custodial wallets. I am not sure which.
>
> I see that you also advertise that Gap600 is "Trusted by" Coindirect and
> Coinify, both AML/KYC crypto exchanges. Obviously, with full AML/KYC
> double-spends are not much of a concern. And it's not even clear that
> either accepts zeroconf anyway, as I'll explain later.
>
> On this list you claimed that:
>
> >  1. As of end of Nov 2022 - GAP600 has processed i.e responded to circa
> >  15M transactions
> >  2. These transactions have a cumulative value of 2.3B USD value.
> >  3. We currently are seeing circa 1.5M transactions queired per month.
>
> What's the value and number of transactions that *actually* rely on your
> unconfirmed transaction tools? The only category that would apply for is
> goods
> provided immediately and irrovocably, without AML/KYC. Because it sounds
> like
> these figures may be significantly overstated.
>
>
> Re: CoinsPaid, what you say here makes it also sound like it relies on
> AML/KYC:
>
> > CoinsPaid applies a special software tool across its solutions to conduct
> > stringent KYC procedures and a risk-based approach to CDD that verify
> user
> > identities to mitigate fraud, money laundering and other activities
> linked to
> > criminality and terrorism.
> https://www.gap600.com/uncategorized/coinspaid/
>
> Re: Coindirect, the documentation I can find appears to say that
> confirmations
> are required before you can use coins deposited into Coindirect:
>
> > Digital currency transactions must be confirmed on the relevant network
> block
> > before they are considered valid. Only once confirmed, will you be able
> to
> > use the coins deposited in your Coindirect wallet.
>
> https://help.coindirect.com/hc/en-us/articles/115002441974-How-quickly-can-I-use-coins-deposited-into-my-Coindirect-wallet-
>
> This is repeated here as well:
> https://help.coindirect.com/hc/en-us/articles/4409120006546--Deposits-
>
> Re: Coinify, the API docs don't give any indication of risk scoring or any
> other Gap600 integration:
>
> https://merchant.coinify.com/docs/api/#payment-object
>
> --
> https://petertodd.org 'peter'[:-1]@petertodd.org
>
-- 
________________________________
Daniel Lipshitz
GAP600
www.Gap600.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20221203/138ef429/attachment-0001.html>

From daniel at gap600.com  Sat Dec  3 14:03:58 2022
From: daniel at gap600.com (Daniel Lipshitz)
Date: Sat, 3 Dec 2022 16:03:58 +0200
Subject: [bitcoin-dev] [Opt-in full-RBF] Zero-conf apps in immediate
	danger
In-Reply-To: <CACkWPs-maywWfAt_qhnsUOTm6u_Ph=LgbuLSaF1NRJSTBWkTdg@mail.gmail.com>
References: <CACkWPs8-rZpGSJSEyLsg9gVAuPpHztXWSZvfGscGJCn05th0DQ@mail.gmail.com>
 <Y4l/ZHl9EvhaCpix@petertodd.org>
 <CACkWPs_v=MYFrn=LzPSK4+=Enw2R5+REap+MFLRhwtxcwGvEHA@mail.gmail.com>
 <Y4sNxWkBp7+ogcJb@petertodd.org>
 <CACkWPs9p0K-1RbVMipiAwjhexaNgmMgjENYvd9S1DpA+JVcE=w@mail.gmail.com>
 <Y4s9EqMfk+yXCzIO@petertodd.org>
 <CACkWPs-maywWfAt_qhnsUOTm6u_Ph=LgbuLSaF1NRJSTBWkTdg@mail.gmail.com>
Message-ID: <CACkWPs-2e8QVTwnBcos7WA0c2+iLcY2XGCZzY0xt9L_voyx9UA@mail.gmail.com>

Just a further follow up here please see below feedback from Max CEO of
Coinspaid - I asked him to send me a mail.

Peter - I can understand why some of our statistics seems off, some of our
clients when they have multiple outputs going to their cluster will query
each trx hash with a separate output address as for them they need each trx
or output deposit covered/guaranteed so we would count that trx hash each
time it is queried with a different output address as a trxs - this would
mean that value of our total processed is possibly a more
reflective indicator. Apologies for this inclarity we are not used to
communicating our statistics at all - its just not our nature.

I would think looking at Nov 2022 Stats - 900k unique trx hashes queried,
with 1.5m trxs on our count since trx hashes are queried with different
output addresses. The actual value is USD 220M benefiting from zero conf
acceptance.

See Maxes email below - I will also forward the email as is to the list


Hi Daniel,

Hope you are doing fine. I know you are in discussions with Bitcoin Core
team or RBF updates.
With current email, wanted to confirm that we are running quite a big
Bitcoin payment operation with over 300k incoming transactions, with 700+
inputs a month. Which is a fair percentage of overall BTC chain capacity
and we do enjoy zero conf flows that you offer. Our clients do like to give
instant experience to their end customers, I would not want to disappoint
them with news that ?waiting for confirmations? is on a table again, after
all these years of smooth experience.

2 main production clusters are rotating around:
3JodN7GmkHdPgKj9G7HCkn9NDLhrcWCjVN
3QKCocNhzAgtgFLsD5qUZcG6e4TkfRf421

Kind regards,
Max Krupyshev
Founder & Leader
coinspaid.com // cryptoprocessing.com
Berlin, Germany
telegram: mkrupyshev
________________________________

Daniel Lipshitz
GAP600| www.gap600.com
Phone: +44 113 4900 117
Skype: daniellipshitz123
Twitter: @daniellipshitz


On Sat, Dec 3, 2022 at 3:17 PM Daniel Lipshitz <daniel at gap600.com> wrote:

> The statistics that I have stated are based on trxs that rely on our tool.
> They are not overstated, this is a reflection of the 0conf market on BTC.
>
> They are trxs which our clients query via the API and which I clients pay
> subscription for.
>
> There is no point for clients to send us trxs they don?t want or need our
> response from. We are a B2b provider so we are not sure how and who the end
> users and applications are.
>
> Coinify definitely doesn?t send us all their traffic, as I would think
> some of our other clients.
>
> Here is some external confirmation a bit old though but still-
> https://blog.coinpayments.net/news-features/gap600
> You can also see our video of Coinspaid using our service on our site -
> all our Marcom is a bit old.
>
> We service primarily payment processors and liquidity providers and not
> end merchants so I can?t say how and to who end clients implement it.
>
> If AML/KYC was enough to prevent double spends all exchanges would offer
> 0conf.
>
> I don?t know the split with our clients as it?s non of our business but
> definitely a significant amount of end users are not Kyced for the trxs.
>
> Best would be to try and talk to some of our major clients - ie
> Coinpayments, Coinspaid and Coinify.
>
>
>
> On Sat, 3 Dec 2022 at 14:12 Peter Todd <pete at petertodd.org> wrote:
>
>> On Sat, Dec 03, 2022 at 01:01:16PM +0200, Daniel Lipshitz wrote:
>> > Shapeshift used to be clients in fact one of our first when we started
>> in
>> > 2016.
>> >
>> > They no longer use our service but from time to time use us for fee
>> > recommendations. So we actually should remove their logo as a current
>> > client.
>>
>> Yes you should. When did ShapeShift stop using your service? Did they
>> explain
>> why?
>>
>> > If you wish to test it out try find a merchant using Coinpayments or
>> > Coinspaid.
>> >
>> > Also some of our non custodial liquidity providers offer service no
>> > custodial wallets. I am not sure which.
>>
>> I see that you also advertise that Gap600 is "Trusted by" Coindirect and
>> Coinify, both AML/KYC crypto exchanges. Obviously, with full AML/KYC
>> double-spends are not much of a concern. And it's not even clear that
>> either accepts zeroconf anyway, as I'll explain later.
>>
>> On this list you claimed that:
>>
>> >  1. As of end of Nov 2022 - GAP600 has processed i.e responded to circa
>> >  15M transactions
>> >  2. These transactions have a cumulative value of 2.3B USD value.
>> >  3. We currently are seeing circa 1.5M transactions queired per month.
>>
>> What's the value and number of transactions that *actually* rely on your
>> unconfirmed transaction tools? The only category that would apply for is
>> goods
>> provided immediately and irrovocably, without AML/KYC. Because it sounds
>> like
>> these figures may be significantly overstated.
>>
>>
>> Re: CoinsPaid, what you say here makes it also sound like it relies on
>> AML/KYC:
>>
>> > CoinsPaid applies a special software tool across its solutions to
>> conduct
>> > stringent KYC procedures and a risk-based approach to CDD that verify
>> user
>> > identities to mitigate fraud, money laundering and other activities
>> linked to
>> > criminality and terrorism.
>> https://www.gap600.com/uncategorized/coinspaid/
>>
>> Re: Coindirect, the documentation I can find appears to say that
>> confirmations
>> are required before you can use coins deposited into Coindirect:
>>
>> > Digital currency transactions must be confirmed on the relevant network
>> block
>> > before they are considered valid. Only once confirmed, will you be able
>> to
>> > use the coins deposited in your Coindirect wallet.
>>
>> https://help.coindirect.com/hc/en-us/articles/115002441974-How-quickly-can-I-use-coins-deposited-into-my-Coindirect-wallet-
>>
>> This is repeated here as well:
>> https://help.coindirect.com/hc/en-us/articles/4409120006546--Deposits-
>>
>> Re: Coinify, the API docs don't give any indication of risk scoring or any
>> other Gap600 integration:
>>
>> https://merchant.coinify.com/docs/api/#payment-object
>>
>> --
>> https://petertodd.org 'peter'[:-1]@petertodd.org
>>
> --
> ________________________________
> Daniel Lipshitz
> GAP600
> www.Gap600.com
>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20221203/4ce7fd06/attachment-0001.html>

From daniel at gap600.com  Sat Dec  3 14:06:11 2022
From: daniel at gap600.com (Daniel Lipshitz)
Date: Sat, 3 Dec 2022 16:06:11 +0200
Subject: [bitcoin-dev] [Opt-in full-RBF] Zero-conf apps in immediate
	danger
In-Reply-To: <6342098B-A548-43C9-8F92-AAD9D0BB66AB@coinspaid.com>
References: <6342098B-A548-43C9-8F92-AAD9D0BB66AB@coinspaid.com>
Message-ID: <CACkWPs9CTVrBjcPwyZM8ZC0t21beoU2M7O3Th3qOGWH_rU_LAw@mail.gmail.com>

See below feedback from CEO of Coinspaid Re - Bitcoin Zero conf market value
________________________________

Daniel Lipshitz
GAP600| www.gap600.com
Phone: +44 113 4900 117
Skype: daniellipshitz123
Twitter: @daniellipshitz


---------- Forwarded message ---------
From: Max Krupyshev <max at coinspaid.com>
Date: Sat, Dec 3, 2022 at 3:52 PM
Subject: Zero conf advantages for business
To: Daniel Lipshitz <daniel at gap600.com>


Hi Daniel,

Hope you are doing fine. I know you are in discussions with Bitcoin Core
team or RBF updates.
With current email, wanted to confirm that we are running quite a big
Bitcoin payment operation with over 300k incoming transactions, with 700+
inputs a month. Which is a fair percentage of overall BTC chain capacity
and we do enjoy zero conf flows that you offer. Our clients do like to give
instant experience to their end customers, I would not want to disappoint
them with news that ?waiting for confirmations? is on a table again, after
all these years of smooth experience.

2 main production clusters are rotating around:
3JodN7GmkHdPgKj9G7HCkn9NDLhrcWCjVN
3QKCocNhzAgtgFLsD5qUZcG6e4TkfRf421

Kind regards,
Max Krupyshev
Founder & Leader
coinspaid.com // cryptoprocessing.com
Berlin, Germany
telegram: mkrupyshev
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20221203/fb742b43/attachment-0001.html>

From eloyesp at gmail.com  Mon Dec  5 12:20:58 2022
From: eloyesp at gmail.com (El_Hoy)
Date: Mon, 5 Dec 2022 09:20:58 -0300
Subject: [bitcoin-dev] Announcement: Full-RBF Miner Bounty
In-Reply-To: <Y3OljVGQbZ/Wj8T6@petertodd.org>
References: <Y2I3w8O5X55sD/3C@petertodd.org> <Y2qc7Ubc5xtJhxGw@petertodd.org>
 <Y3MlSE7AWkBgiCyr@erisian.com.au> <Y3OljVGQbZ/Wj8T6@petertodd.org>
Message-ID: <CAPapNH3NEBP2-GVZZ_75K-QU0psGdAHyjdAus-vfq-0jffTstg@mail.gmail.com>

The only option I see against the attack Peter Todd is doing to opt-in RBF
and 0Conf bitcoin usage is working on a bitcoin core implementation that
stops propagation of full-rbf replaced blocks. Running multiple of such
nodes on the network will add a risk to miners that enable full-rbf that
would work as an incentive against that.

Obviously that would require adding an option on bitcoin core (that is not
technically but politically difficult to implement as Petter Todd already
have commit access to the main repository).

That said, a sufficiently incentivized actor (like Daniel Lipshitz or Muun
wallet developers) could work on a fork and run several nodes with such
functionality. As far as I understand the percolation model, with 10 to 20
nodes running such a rule would create a significant risk for full-rbf
miners.

Regards.

---  Eloy


On Tue, Nov 15, 2022 at 11:43 AM Peter Todd via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> On Tue, Nov 15, 2022 at 03:36:08PM +1000, Anthony Towns via bitcoin-dev
> wrote:
> > On Tue, Nov 08, 2022 at 01:16:13PM -0500, Peter Todd via bitcoin-dev
> wrote:
> > > FYI I've gotten a few hundred dollars worth of donations to this
> effort, and
> > > have raised the reward to about 0.02 BTC, or $400 USD at current
> prices.
> >
> > Seems like this has been mostly claimed (0.014btc / $235, 9238sat/vb):
>
> I'm turning it back on when (if) the mempool settles down. I've got more
> than
> enough donations to give another run at it (the majority was donated
> privately
> FWIW). There's a risk of the mempool filling up again of course; hard to
> avoid
> that.
>
> Right now of course it's really easy to double spend with the obvious
> low-fee/high-fee method as the min relay fee keeps shifting.
>
> >
> https://mempool.space/tx/397dcbe4e95ec40616e3dfc4ff8ffa158d2e72020b7d11fc2be29d934d69138c
> >
> > The block it was claimed in seems to have been about an hour after the
> > default mempool filled up:
> >
> > https://twitter.com/murchandamus/status/1592274621977477120
> >
> > That block actually seems to have included two
> > alice.btc.calendar.opentimestamps.org txs, the other paying $7.88
> > (309sat/vb):
> >
> >
> https://mempool.space/tx/ba9670109a6551458d5e1e23600c7bf2dc094894abdf59fe7aa020ccfead07cf
>
> The second is because I turned down the full-rbf reward to more normal fee
> levels. There's also another full-rbf double-spend from the Bob calendar,
> along
> the same lines:
> 7e76b351009326a574f3120164dbbe6d85e07e04a7bbdc40f0277fcb008d2cd2
>
> I double-spent the txin of the high fee tx that got mined. But I
> mistakenly had
> RBF enabled in that double-spend, so while it propagated initially, I
> believe
> it was replaced when something (someone?) rebroadcast the high-fee 397dcb
> tx.
>
> > Timeline (utc) to me looks like:
> >
> >  - 13:12 - block 763148 is mined: last one that had a min fee < 1.5sat/vb
> >  - 13:33 -
> f503868c64d454c472859b793f3ee7cdc8f519c64f8b1748d8040cd8ce6dc6e1
> >            is announced and propogates widely (1.2sat/vb)
> >  - 18:42 -
> 746daab9bcc331be313818658b4a502bb4f3370a691fd90015fabcd7759e0944
> >            is announced and propogates widely (1.2sat/vb)
> >  - 21:52 - ba967010 tx is announced and propogates widely, since
> >            conflicting tx 746daab9 has been removed from default
> >          mempools
> >  - 21:53 - murch tweets about default mempool filling up
> >  - 22:03 - 397dcbe4 tx is announced and propogates widely, since
> >            conflicting tx f503868 has already been removed from default
> >          mempools
>
> Is that 22:03 time for 397 from your node's logs? It was originally
> announced
> hours earlier. From one of my full-rbf nodes:
>
>     2022-11-14T14:08:37Z [mempool] replacing tx
> 764867062b67fea61810c3858d587da83a28290545e882935a32285028084317 with
> 397dcbe4e95ec40616e3dfc4ff8ffa158d2e72020b7d11fc2be29d934d69138c for
> 0.00468 additional fees, -1 delta bytes
>
> >  - 22:35 - block 763189 is mined
> >  - 22:39 - block 763190 is mined
> >  - 23:11 - block 763191 is mined
> >  - 23:17 - block 763192 is mined including 397dcbe4
> >
> > miningpool.observer reports both 397dcbe4 and ba967010 as missing in the
> > first three blocks, and gives similar mempool ages for those txs to what
> > my logs report:
> >
> >
> https://miningpool.observer/template-and-block/0000000000000000000436aba59d8430061e0e50592215f7f263bfb1073ccac7
> >
> https://miningpool.observer/template-and-block/00000000000000000005600404792bacfd8a164d2fe9843766afb2bfbd937309
> >
> https://miningpool.observer/template-and-block/00000000000000000004a3073f58c9eae40f251ea7aeaeac870daeac4b238fd1
> >
> > That presumably means those pools (AntPool twice and "unknown") are
> > running with large mempools that didn't kept the earlier 1.2sat/vb txs.
>
> To be clear, you think that AntPool and that other exchange is running
> with a
> larger than normal max mempool size limit? You mean those miners *did*
> keep the
> earlier 1.2sat/vb tx?
>
> > The txs were mined by Foundry:
> >
> >
> https://miningpool.observer/template-and-block/00000000000000000001382a226aedac822de80309cca2bf1253b35d4f8144f5
> >
> > This seems to be pretty good evidence that we currently don't have any
> > significant hashrate mining with fullrbf policies (<0.5% if there was a
> > high fee replacement available prior to every block having been mined),
> > despite the bounty having been collected.
>
> Oh, we can put much lower bounds on that. I've been running OTS calendars
> with
> full-rbf replacements for a few months without clear evidence of a full-rbf
> replacement.  While there was good reason to think some miners were mining
> full-rbf before a few years back, they probably didn't bother to reapply
> their
> patches each upgrade. `mempoolfullrbf=1` is much simpler to use.
>
> --
> https://petertodd.org 'peter'[:-1]@petertodd.org
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20221205/b12b7672/attachment-0001.html>

From angus at toaster.cc  Mon Dec  5 12:21:44 2022
From: angus at toaster.cc (angus)
Date: Mon, 05 Dec 2022 12:21:44 +0000
Subject: [bitcoin-dev] [Opt-in full-RBF] Zero-conf apps in immediate danger
In-Reply-To: <CACkWPs-2e8QVTwnBcos7WA0c2+iLcY2XGCZzY0xt9L_voyx9UA@mail.gmail.com>
References: <CACkWPs8-rZpGSJSEyLsg9gVAuPpHztXWSZvfGscGJCn05th0DQ@mail.gmail.com>
 <Y4l/ZHl9EvhaCpix@petertodd.org>
 <CACkWPs_v=MYFrn=LzPSK4+=Enw2R5+REap+MFLRhwtxcwGvEHA@mail.gmail.com>
 <Y4sNxWkBp7+ogcJb@petertodd.org>
 <CACkWPs9p0K-1RbVMipiAwjhexaNgmMgjENYvd9S1DpA+JVcE=w@mail.gmail.com>
 <Y4s9EqMfk+yXCzIO@petertodd.org>
 <CACkWPs-maywWfAt_qhnsUOTm6u_Ph=LgbuLSaF1NRJSTBWkTdg@mail.gmail.com>
 <CACkWPs-2e8QVTwnBcos7WA0c2+iLcY2XGCZzY0xt9L_voyx9UA@mail.gmail.com>
Message-ID: <-C_sX7ApYy_2MgXfl7e1ONddIi9gtET5jV4MTl_F_CstCvTuV0vTFfazF7tKBd53o6QbZ1xygayPIaCVjDyV-9yklnfk_t0IH23rw2LtqKQ=@toaster.cc>

Core adding full RBF is a change of node policy that may be highly inconvenient for zero-conf users, but there has always been and will always be a risk of a double-spend for anyone that treats zero-confirmation transactions as settled. It's literally in the name - this transaction has zero confirmations and no guarantee it'll make it into a block, and so has not yet settled.


The perception seems to be that Core adding the full RBF option is increasing the risk to zero-conf users, but I'm not convinced that that is the case - someone wanting to double-spend attack you isn't going to be bothered to do so over a few thousand sats (unless they can do it thousands of times), and losing a few thousand sats to a double-spend isn't the biggest deal.


It's always been the risk of getting double-spent out of hundreds or thousands of bitcoins that's worth seriously worrying about, which is much more the kind of attack a determined attacker is able to carry out. Such a determined attacker is much more likely to attempt and succeed at a sybil attack, or directly colluding with a miner. So your zero-conf risk increases non-linearly as the amount of bitcoin being transacted grows. (caveat: this paragraph is opinion).


There does, however, seem to be a legitimate business for providing insurance/risk management for people that are willing to accept the zero-conf risk - it is pretty similar to accepting credit cards with a chargeback risk or any payment card with a capture risk, though there's no-one to mediate a dispute. On-chain is final.

But what doesn't make any sense is trying to avoid Bitcoin Core and nodes from adopting a full RBF policy to try to protect this use case. As has been pointed out by may others before, full RBF is aligned with miner (and user) economic incentives and is a node policy, not consensus, so you can't even tell which nodes are doing it nor can you prevent them from doing so. Second, Bitcoin core 24 with the full RBF option is already out in the wild at around 5%+ of running nodes and growing, so it's too late to kill it.


So my point is that relying on node policy as part of your protection for zero-conf transaction acceptance is fragile, and should not be relied upon. The protocol rules have always tacitly allowed double-spending before a confirmation, and it has always been clear that there's no consensus on which transactions have occurred until they have in a block and have at-least one confirmation.

The long-term 'what to do about it' is to use Lightning if you want fast payments with risk-free instant settlement, or as above, accept the zero-conf risk and cover yourself with an insurance premium (e.g. a margin on transactions that goes into an insurance fund, and limiting max transaction amount so you're not exposed to uncoverable losses if you do get double-spend attacked)




Angus
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20221205/e9c2f67d/attachment-0001.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 249 bytes
Desc: OpenPGP digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20221205/e9c2f67d/attachment-0001.sig>

From gsanders87 at gmail.com  Mon Dec  5 13:38:58 2022
From: gsanders87 at gmail.com (Greg Sanders)
Date: Mon, 5 Dec 2022 08:38:58 -0500
Subject: [bitcoin-dev] Announcement: Full-RBF Miner Bounty
In-Reply-To: <CAPapNH3NEBP2-GVZZ_75K-QU0psGdAHyjdAus-vfq-0jffTstg@mail.gmail.com>
References: <Y2I3w8O5X55sD/3C@petertodd.org> <Y2qc7Ubc5xtJhxGw@petertodd.org>
 <Y3MlSE7AWkBgiCyr@erisian.com.au> <Y3OljVGQbZ/Wj8T6@petertodd.org>
 <CAPapNH3NEBP2-GVZZ_75K-QU0psGdAHyjdAus-vfq-0jffTstg@mail.gmail.com>
Message-ID: <CAB3F3DtqpBWvDFn77pFaikCLZUDDevng5QUez9Y8XxDUOoRivw@mail.gmail.com>

This will greatly centralize the network as well as not actually achieve
the intended goal which is literally impossible.

On Mon, Dec 5, 2022, 8:27 AM El_Hoy via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> The only option I see against the attack Peter Todd is doing to opt-in RBF
> and 0Conf bitcoin usage is working on a bitcoin core implementation that
> stops propagation of full-rbf replaced blocks. Running multiple of such
> nodes on the network will add a risk to miners that enable full-rbf that
> would work as an incentive against that.
>
> Obviously that would require adding an option on bitcoin core (that is not
> technically but politically difficult to implement as Petter Todd already
> have commit access to the main repository).
>
> That said, a sufficiently incentivized actor (like Daniel Lipshitz or Muun
> wallet developers) could work on a fork and run several nodes with such
> functionality. As far as I understand the percolation model, with 10 to 20
> nodes running such a rule would create a significant risk for full-rbf
> miners.
>
> Regards.
>
> ---  Eloy
>
>
> On Tue, Nov 15, 2022 at 11:43 AM Peter Todd via bitcoin-dev <
> bitcoin-dev at lists.linuxfoundation.org> wrote:
>
>> On Tue, Nov 15, 2022 at 03:36:08PM +1000, Anthony Towns via bitcoin-dev
>> wrote:
>> > On Tue, Nov 08, 2022 at 01:16:13PM -0500, Peter Todd via bitcoin-dev
>> wrote:
>> > > FYI I've gotten a few hundred dollars worth of donations to this
>> effort, and
>> > > have raised the reward to about 0.02 BTC, or $400 USD at current
>> prices.
>> >
>> > Seems like this has been mostly claimed (0.014btc / $235, 9238sat/vb):
>>
>> I'm turning it back on when (if) the mempool settles down. I've got more
>> than
>> enough donations to give another run at it (the majority was donated
>> privately
>> FWIW). There's a risk of the mempool filling up again of course; hard to
>> avoid
>> that.
>>
>> Right now of course it's really easy to double spend with the obvious
>> low-fee/high-fee method as the min relay fee keeps shifting.
>>
>> >
>> https://mempool.space/tx/397dcbe4e95ec40616e3dfc4ff8ffa158d2e72020b7d11fc2be29d934d69138c
>> >
>> > The block it was claimed in seems to have been about an hour after the
>> > default mempool filled up:
>> >
>> > https://twitter.com/murchandamus/status/1592274621977477120
>> >
>> > That block actually seems to have included two
>> > alice.btc.calendar.opentimestamps.org txs, the other paying $7.88
>> > (309sat/vb):
>> >
>> >
>> https://mempool.space/tx/ba9670109a6551458d5e1e23600c7bf2dc094894abdf59fe7aa020ccfead07cf
>>
>> The second is because I turned down the full-rbf reward to more normal fee
>> levels. There's also another full-rbf double-spend from the Bob calendar,
>> along
>> the same lines:
>> 7e76b351009326a574f3120164dbbe6d85e07e04a7bbdc40f0277fcb008d2cd2
>>
>> I double-spent the txin of the high fee tx that got mined. But I
>> mistakenly had
>> RBF enabled in that double-spend, so while it propagated initially, I
>> believe
>> it was replaced when something (someone?) rebroadcast the high-fee 397dcb
>> tx.
>>
>> > Timeline (utc) to me looks like:
>> >
>> >  - 13:12 - block 763148 is mined: last one that had a min fee <
>> 1.5sat/vb
>> >  - 13:33 -
>> f503868c64d454c472859b793f3ee7cdc8f519c64f8b1748d8040cd8ce6dc6e1
>> >            is announced and propogates widely (1.2sat/vb)
>> >  - 18:42 -
>> 746daab9bcc331be313818658b4a502bb4f3370a691fd90015fabcd7759e0944
>> >            is announced and propogates widely (1.2sat/vb)
>> >  - 21:52 - ba967010 tx is announced and propogates widely, since
>> >            conflicting tx 746daab9 has been removed from default
>> >          mempools
>> >  - 21:53 - murch tweets about default mempool filling up
>> >  - 22:03 - 397dcbe4 tx is announced and propogates widely, since
>> >            conflicting tx f503868 has already been removed from default
>> >          mempools
>>
>> Is that 22:03 time for 397 from your node's logs? It was originally
>> announced
>> hours earlier. From one of my full-rbf nodes:
>>
>>     2022-11-14T14:08:37Z [mempool] replacing tx
>> 764867062b67fea61810c3858d587da83a28290545e882935a32285028084317 with
>> 397dcbe4e95ec40616e3dfc4ff8ffa158d2e72020b7d11fc2be29d934d69138c for
>> 0.00468 additional fees, -1 delta bytes
>>
>> >  - 22:35 - block 763189 is mined
>> >  - 22:39 - block 763190 is mined
>> >  - 23:11 - block 763191 is mined
>> >  - 23:17 - block 763192 is mined including 397dcbe4
>> >
>> > miningpool.observer reports both 397dcbe4 and ba967010 as missing in the
>> > first three blocks, and gives similar mempool ages for those txs to what
>> > my logs report:
>> >
>> >
>> https://miningpool.observer/template-and-block/0000000000000000000436aba59d8430061e0e50592215f7f263bfb1073ccac7
>> >
>> https://miningpool.observer/template-and-block/00000000000000000005600404792bacfd8a164d2fe9843766afb2bfbd937309
>> >
>> https://miningpool.observer/template-and-block/00000000000000000004a3073f58c9eae40f251ea7aeaeac870daeac4b238fd1
>> >
>> > That presumably means those pools (AntPool twice and "unknown") are
>> > running with large mempools that didn't kept the earlier 1.2sat/vb txs.
>>
>> To be clear, you think that AntPool and that other exchange is running
>> with a
>> larger than normal max mempool size limit? You mean those miners *did*
>> keep the
>> earlier 1.2sat/vb tx?
>>
>> > The txs were mined by Foundry:
>> >
>> >
>> https://miningpool.observer/template-and-block/00000000000000000001382a226aedac822de80309cca2bf1253b35d4f8144f5
>> >
>> > This seems to be pretty good evidence that we currently don't have any
>> > significant hashrate mining with fullrbf policies (<0.5% if there was a
>> > high fee replacement available prior to every block having been mined),
>> > despite the bounty having been collected.
>>
>> Oh, we can put much lower bounds on that. I've been running OTS calendars
>> with
>> full-rbf replacements for a few months without clear evidence of a
>> full-rbf
>> replacement.  While there was good reason to think some miners were mining
>> full-rbf before a few years back, they probably didn't bother to reapply
>> their
>> patches each upgrade. `mempoolfullrbf=1` is much simpler to use.
>>
>> --
>> https://petertodd.org 'peter'[:-1]@petertodd.org
>> _______________________________________________
>> bitcoin-dev mailing list
>> bitcoin-dev at lists.linuxfoundation.org
>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20221205/ce59b2c5/attachment.html>

From rot13maxi at protonmail.com  Mon Dec  5 14:12:33 2022
From: rot13maxi at protonmail.com (Rijndael)
Date: Mon, 05 Dec 2022 14:12:33 +0000
Subject: [bitcoin-dev] Announcement: Full-RBF Miner Bounty
In-Reply-To: <CAPapNH3NEBP2-GVZZ_75K-QU0psGdAHyjdAus-vfq-0jffTstg@mail.gmail.com>
References: <Y2I3w8O5X55sD/3C@petertodd.org> <Y2qc7Ubc5xtJhxGw@petertodd.org>
 <Y3MlSE7AWkBgiCyr@erisian.com.au> <Y3OljVGQbZ/Wj8T6@petertodd.org>
 <CAPapNH3NEBP2-GVZZ_75K-QU0psGdAHyjdAus-vfq-0jffTstg@mail.gmail.com>
Message-ID: <d1ea77a4-370f-d7e3-82c2-765c9fc18aa3@protonmail.com>

Good morning,

That sounds like a very dangerous mode of operation. You can already hand a transaction to a miner privately. I hand a transaction to a miner with some reasonable fee, and then I go and broadcast a different transaction with a minimal fee that spends the same inputs. The whole network (including the miner I handed the tx to) could all be running with a strict first-seen mempool policy, but we can still have a situation where the miner creates a block with a different transaction from what you see in your mempool. If anytime this happens, the nodes running your proposed rule drop the block, then anyone can fork those nodes off the network whenever they want.

Even outside of adversarial settings, Bitcoin doesn't (and doesn't attempt to) promise consistency across mempools. Making a consensus rule that enforces mempool consistency is a recipe for (unintended?) chainsplits.

- rijndael

On 12/5/22 7:20 AM, El_Hoy via bitcoin-dev wrote:

> The only option I see against the attack Peter Todd is doing to opt-in RBF and 0Conf bitcoin usage is working on a bitcoin core implementation that stops propagation of full-rbf replaced blocks. Running multiple of such nodes on the network will add a risk to miners that enable full-rbf that would work as an incentive against that.
>
> Obviously that would require adding an option on bitcoin core (that is not technically but politically difficult to implement as Petter Todd already have commit access to the main repository).
>
> That said, a sufficiently incentivized actor (like Daniel Lipshitz or Muun wallet developers) could work on a fork and run several nodes with such functionality. As far as I understand the percolation model, with 10 to 20 nodes running such a rule would create a significant risk for full-rbf miners.
>
> Regards.
>
> --- Eloy
>
> On Tue, Nov 15, 2022 at 11:43 AM Peter Todd via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:
>
>> On Tue, Nov 15, 2022 at 03:36:08PM +1000, Anthony Towns via bitcoin-dev wrote:
>>> On Tue, Nov 08, 2022 at 01:16:13PM -0500, Peter Todd via bitcoin-dev wrote:
>>> > FYI I've gotten a few hundred dollars worth of donations to this effort, and
>>> > have raised the reward to about 0.02 BTC, or $400 USD at current prices.
>>>
>>> Seems like this has been mostly claimed (0.014btc / $235, 9238sat/vb):
>>
>> I'm turning it back on when (if) the mempool settles down. I've got more than
>> enough donations to give another run at it (the majority was donated privately
>> FWIW). There's a risk of the mempool filling up again of course; hard to avoid
>> that.
>>
>> Right now of course it's really easy to double spend with the obvious
>> low-fee/high-fee method as the min relay fee keeps shifting.
>>
>>> https://mempool.space/tx/397dcbe4e95ec40616e3dfc4ff8ffa158d2e72020b7d11fc2be29d934d69138c
>>>
>>> The block it was claimed in seems to have been about an hour after the
>>> default mempool filled up:
>>>
>>> https://twitter.com/murchandamus/status/1592274621977477120
>>>
>>> That block actually seems to have included two
>>> alice.btc.calendar.opentimestamps.org txs, the other paying $7.88
>>> (309sat/vb):
>>>
>>> https://mempool.space/tx/ba9670109a6551458d5e1e23600c7bf2dc094894abdf59fe7aa020ccfead07cf
>>
>> The second is because I turned down the full-rbf reward to more normal fee
>> levels. There's also another full-rbf double-spend from the Bob calendar, along
>> the same lines: 7e76b351009326a574f3120164dbbe6d85e07e04a7bbdc40f0277fcb008d2cd2
>>
>> I double-spent the txin of the high fee tx that got mined. But I mistakenly had
>> RBF enabled in that double-spend, so while it propagated initially, I believe
>> it was replaced when something (someone?) rebroadcast the high-fee 397dcb tx.
>>
>>> Timeline (utc) to me looks like:
>>>
>>> - 13:12 - block 763148 is mined: last one that had a min fee < 1.5sat/vb
>>> - 13:33 - f503868c64d454c472859b793f3ee7cdc8f519c64f8b1748d8040cd8ce6dc6e1
>>> is announced and propogates widely (1.2sat/vb)
>>> - 18:42 - 746daab9bcc331be313818658b4a502bb4f3370a691fd90015fabcd7759e0944
>>> is announced and propogates widely (1.2sat/vb)
>>> - 21:52 - ba967010 tx is announced and propogates widely, since
>>> conflicting tx 746daab9 has been removed from default
>>> mempools
>>> - 21:53 - murch tweets about default mempool filling up
>>> - 22:03 - 397dcbe4 tx is announced and propogates widely, since
>>> conflicting tx f503868 has already been removed from default
>>> mempools
>>
>> Is that 22:03 time for 397 from your node's logs? It was originally announced
>> hours earlier. From one of my full-rbf nodes:
>>
>> 2022-11-14T14:08:37Z [mempool] replacing tx 764867062b67fea61810c3858d587da83a28290545e882935a32285028084317 with 397dcbe4e95ec40616e3dfc4ff8ffa158d2e72020b7d11fc2be29d934d69138c for 0.00468 additional fees, -1 delta bytes
>>
>>> - 22:35 - block 763189 is mined
>>> - 22:39 - block 763190 is mined
>>> - 23:11 - block 763191 is mined
>>> - 23:17 - block 763192 is mined including 397dcbe4
>>>
>>> miningpool.observer reports both 397dcbe4 and ba967010 as missing in the
>>> first three blocks, and gives similar mempool ages for those txs to what
>>> my logs report:
>>>
>>> https://miningpool.observer/template-and-block/0000000000000000000436aba59d8430061e0e50592215f7f263bfb1073ccac7
>>> https://miningpool.observer/template-and-block/00000000000000000005600404792bacfd8a164d2fe9843766afb2bfbd937309
>>> https://miningpool.observer/template-and-block/00000000000000000004a3073f58c9eae40f251ea7aeaeac870daeac4b238fd1
>>>
>>> That presumably means those pools (AntPool twice and "unknown") are
>>> running with large mempools that didn't kept the earlier 1.2sat/vb txs.
>>
>> To be clear, you think that AntPool and that other exchange is running with a
>> larger than normal max mempool size limit? You mean those miners *did* keep the
>> earlier 1.2sat/vb tx?
>>
>>> The txs were mined by Foundry:
>>>
>>> https://miningpool.observer/template-and-block/00000000000000000001382a226aedac822de80309cca2bf1253b35d4f8144f5
>>>
>>> This seems to be pretty good evidence that we currently don't have any
>>> significant hashrate mining with fullrbf policies (<0.5% if there was a
>>> high fee replacement available prior to every block having been mined),
>>> despite the bounty having been collected.
>>
>> Oh, we can put much lower bounds on that. I've been running OTS calendars with
>> full-rbf replacements for a few months without clear evidence of a full-rbf
>> replacement. While there was good reason to think some miners were mining
>> full-rbf before a few years back, they probably didn't bother to reapply their
>> patches each upgrade. `mempoolfullrbf=1` is much simpler to use.
>>
>> --
>> https://petertodd.org 'peter'[:-1]@petertodd.org
>> _______________________________________________
>> bitcoin-dev mailing list
>> bitcoin-dev at lists.linuxfoundation.org
>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20221205/27239496/attachment-0001.html>

From john at synonym.to  Mon Dec  5 15:19:20 2022
From: john at synonym.to (John Carvalho)
Date: Mon, 5 Dec 2022 15:19:20 +0000
Subject: [bitcoin-dev] [Opt-in full-RBF] Zero-conf apps in immediate
	danger (angus)
In-Reply-To: <mailman.48662.1670246787.956.bitcoin-dev@lists.linuxfoundation.org>
References: <mailman.48662.1670246787.956.bitcoin-dev@lists.linuxfoundation.org>
Message-ID: <CAHTn92wri-edhivrtqZCoEzAPEmwZFap12mM4yzxgp77O-+JYA@mail.gmail.com>

>
> The perception seems to be that Core adding the full RBF option is
> increasing the risk to zero-conf users, but I'm not convinced that that is
> the case.


If this "perception" were not true, RBF & full-RBF would not be necessary
at all. Think about it.

It's always been the risk of getting double-spent out of hundreds or
> thousands of bitcoins that's worth seriously worrying about, which is much
> more the kind of attack a determined attacker is able to carry out.


The risk exposure to merchants providing zero-conf acceptance as a service
is finite, capped by their risk-tolerance, and capped by the current block
exposure. Merchants cap their exposure to be an amount worth less than the
value of this service.

It is highly inefficient and difficult for a miner to pull off an
industry-wide attack across diverse merchants to capture the current
maximum exposure in any given block, not to mention the enormous surface
area of legal risk across jurisdictions...

I don't think zero-conf opponents properly grasp that the risk exposure is
exact and perfectly, trustlessly manageable. I would like the opportunity
to spec the methods Bitrefill, Synonym, and most such merchants, use to
make it standard practice, as it is cheaper for merchants and more
convenient to Bitcoin consumers when merchants behave this way.

As has been pointed out by may others before, full RBF is aligned with
> miner (and user) economic incentives


This is a theory, not a fact. I can refute this theory by pointing out
several aspects:

1.  RBF is actually a fee-minimization feature that allows users to game
the system to spend the *least* amount in fees that correlates to their
time-preference. Miners earn less when fees can be minimized (obviously).
This feature also comes at an expense (albeit small) to nodes providing
replacement service and propagation.

2. Miners care about max fees per block, not slightly increased fees on a
minority % of incidentally replaced txns when they happen to need it. They
want the most txns for the highest price per *block*. In order to qualify
for zero-conf acceptance, merchants require that the fee rate match or
exceed an amount that makes the txn likely to be included in the very next
block. This creates a priority competition from users with high
time-preference. This creates not only more fees for miners, but more txns
from more people using the chain for commerce. This is evidenced by stats
provided recently to this mailing list, but here are more numbers from
Bitrefill:
https://github.com/bitcoin/bitcoin/pull/26525#issuecomment-1332823282

3. Miners ultimately want what users want, as more users = more txns = more
fees = higher BTC price. For all of Bitcoin's history, more users have
wanted zero-conf than replacements. This is evidenced by first-seen policy
thriving for years without disruption (until engineers actively disrupted
it, using fallible theories as justification). This is also evidenced by
the UASF battle where miners capitulated to providing the type of blocks
that users demanded, to avoid uncertainty.

4. A replaceable mempool is inherently less valuable than a first-seen
policy mempool in that Bitcoin is ultimately a ledger for a *payments*
system where people are trying to pay and be paid with certainty. A
full-RBF system would result in more real-world doublespends to existing
merchants and p2p commerce, as it is impossible to fully teach all aspects
of Bitcoin dynamics to users, particularly when they have enjoyed many
years of first-seen behavior as status quo.

Zero-conf and first-seen policies are clearly more
incentive-compatible than RBF outright for these reasons.

The long-term 'what to do about it' is to use Lightning if you want fast
> payments with risk-free instant settlement


Many zero-conf proponents work on the bleeding edge of supporting
Lightning, including myself. Lightning is not risk-free and the base layer
should not be assuming it as a primary dependency for commercial payments.
The UX and complexity of supporting Lightning is still considerable,
adoption is still very low, and there are many unsolved attack vectors and
risks that remain untested due to Lightning's low prevalence.

Further, zero-conf is also useful as a tool in improving Lightning
onboarding, rebalancing, splicing, and UX overall. Bitcoin second-layers
are only as good as the base layer, everything else is a tradeoff.

Bitcoin core 24 with the full RBF option is already out in the wild at
> around 5%+ of running nodes and growing, so it's too late to kill it.


This is pure speculation. If Bitcoin Core publishes an update without the
mistakenly-rushed feature, the mempoolfullrbf movement is likely to die on
the vine as users opt into the latest versions more and more, as evidenced
by all older versions decreasing in usage over time. The incentive to run
old versions, just to be able to force non-RBF txns to be treated as RBF,
is lower than the incentive and likelihood of updating. Frankly, such an
incentive is mostly obscure, vindictive, and perverse, IMO.

We should remove the mempoolfullrbf feature immediately from Bitcoin Core
distributions, as requested here:
https://github.com/bitcoin/bitcoin/pull/26525

This mistake demands correction, and no one has provided a
rational beneficial argument so far for breaking the user space and
disrupting mempool harmony.

If you would like further arguments and refutations of full-RBF, please
read all of the posts in my PR thread:
https://github.com/bitcoin/bitcoin/pull/26525

Thank you,

--
John Carvalho
CEO, Synonym.to <http://synonym.to/>



Date: Mon, 05 Dec 2022 12:21:44 +0000
> From: angus <angus at toaster.cc>
> To: Daniel Lipshitz <daniel at gap600.com>, Bitcoin Protocol Discussion
>         <bitcoin-dev at lists.linuxfoundation.org>
> Subject: [bitcoin-dev] [Opt-in full-RBF] Zero-conf apps in immediate
>         danger
> Message-ID:
>
> <-C_sX7ApYy_2MgXfl7e1ONddIi9gtET5jV4MTl_F_CstCvTuV0vTFfazF7tKBd53o6QbZ1xygayPIaCVjDyV-9yklnfk_t0IH23rw2LtqKQ=@toaster.cc>
>
> Content-Type: text/plain; charset="utf-8"
>
> Core adding full RBF is a change of node policy that may be highly
> inconvenient for zero-conf users, but there has always been and will always
> be a risk of a double-spend for anyone that treats zero-confirmation
> transactions as settled. It's literally in the name - this transaction has
> zero confirmations and no guarantee it'll make it into a block, and so has
> not yet settled.
>
> The perception seems to be that Core adding the full RBF option is
> increasing the risk to zero-conf users, but I'm not convinced that that is
> the case - someone wanting to double-spend attack you isn't going to be
> bothered to do so over a few thousand sats (unless they can do it thousands
> of times), and losing a few thousand sats to a double-spend isn't the
> biggest deal.
>
> It's always been the risk of getting double-spent out of hundreds or
> thousands of bitcoins that's worth seriously worrying about, which is much
> more the kind of attack a determined attacker is able to carry out. Such a
> determined attacker is much more likely to attempt and succeed at a sybil
> attack, or directly colluding with a miner. So your zero-conf risk
> increases non-linearly as the amount of bitcoin being transacted grows.
> (caveat: this paragraph is opinion).
>
> There does, however, seem to be a legitimate business for providing
> insurance/risk management for people that are willing to accept the
> zero-conf risk - it is pretty similar to accepting credit cards with a
> chargeback risk or any payment card with a capture risk, though there's
> no-one to mediate a dispute. On-chain is final.
>
> But what doesn't make any sense is trying to avoid Bitcoin Core and nodes
> from adopting a full RBF policy to try to protect this use case. As has
> been pointed out by may others before, full RBF is aligned with miner (and
> user) economic incentives and is a node policy, not consensus, so you can't
> even tell which nodes are doing it nor can you prevent them from doing so.
> Second, Bitcoin core 24 with the full RBF option is already out in the wild
> at around 5%+ of running nodes and growing, so it's too late to kill it.
>
> So my point is that relying on node policy as part of your protection for
> zero-conf transaction acceptance is fragile, and should not be relied upon.
> The protocol rules have always tacitly allowed double-spending before a
> confirmation, and it has always been clear that there's no consensus on
> which transactions have occurred until they have in a block and have
> at-least one confirmation.
>
> The long-term 'what to do about it' is to use Lightning if you want fast
> payments with risk-free instant settlement, or as above, accept the
> zero-conf risk and cover yourself with an insurance premium (e.g. a margin
> on transactions that goes into an insurance fund, and limiting max
> transaction amount so you're not exposed to uncoverable losses if you do
> get double-spend attacked)
>
> Angus
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20221205/f3d67ada/attachment-0001.html>

From michaelfolkson at protonmail.com  Mon Dec  5 15:33:37 2022
From: michaelfolkson at protonmail.com (Michael Folkson)
Date: Mon, 05 Dec 2022 15:33:37 +0000
Subject: [bitcoin-dev] Announcement: Full-RBF Miner Bounty
In-Reply-To: <d1ea77a4-370f-d7e3-82c2-765c9fc18aa3@protonmail.com>
References: <Y2I3w8O5X55sD/3C@petertodd.org> <Y2qc7Ubc5xtJhxGw@petertodd.org>
 <Y3MlSE7AWkBgiCyr@erisian.com.au> <Y3OljVGQbZ/Wj8T6@petertodd.org>
 <CAPapNH3NEBP2-GVZZ_75K-QU0psGdAHyjdAus-vfq-0jffTstg@mail.gmail.com>
 <d1ea77a4-370f-d7e3-82c2-765c9fc18aa3@protonmail.com>
Message-ID: <oBBSBqZZdER2H_Wcy3aYdnVx_duZEbGWmhEiMhEx4naFlO6UBvSIXkTadg0RKoFTBzWMLurpRc2JVMGbageclm_NG4CL2vmvBk6tDEgZQzk=@protonmail.com>

> That said, a sufficiently incentivized actor (like Daniel Lipshitz or Muun wallet developers) could work on a fork and run several nodes with such functionality.

Daniel Lipshitz has been working on BSV apparently [0] so I guess anything is possible with him. But as others have said turning a mempool policy issue (users have always been free to choose whatever policy they like with zero chain split risk) into a consensus issue and a contentious soft fork issue at that would not be advised. I highly doubt any of the long term Muun contributors would want to support a contentious soft fork and fight a consensus rule war on this.

[0]: https://coingeek.com/gap600-ceo-daniel-lipshitz-talks-bsv-powered-stablecoins-on-coingeek-backstage-video/
--
Michael Folkson
Email: michaelfolkson at [protonmail.com](http://protonmail.com/)
Keybase: michaelfolkson
PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3

------- Original Message -------
On Monday, December 5th, 2022 at 16:12, Rijndael via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:

> Good morning,
>
> That sounds like a very dangerous mode of operation. You can already hand a transaction to a miner privately. I hand a transaction to a miner with some reasonable fee, and then I go and broadcast a different transaction with a minimal fee that spends the same inputs. The whole network (including the miner I handed the tx to) could all be running with a strict first-seen mempool policy, but we can still have a situation where the miner creates a block with a different transaction from what you see in your mempool. If anytime this happens, the nodes running your proposed rule drop the block, then anyone can fork those nodes off the network whenever they want.
>
> Even outside of adversarial settings, Bitcoin doesn't (and doesn't attempt to) promise consistency across mempools. Making a consensus rule that enforces mempool consistency is a recipe for (unintended?) chainsplits.
>
> - rijndael
>
> On 12/5/22 7:20 AM, El_Hoy via bitcoin-dev wrote:
>
>> The only option I see against the attack Peter Todd is doing to opt-in RBF and 0Conf bitcoin usage is working on a bitcoin core implementation that stops propagation of full-rbf replaced blocks. Running multiple of such nodes on the network will add a risk to miners that enable full-rbf that would work as an incentive against that.
>>
>> Obviously that would require adding an option on bitcoin core (that is not technically but politically difficult to implement as Petter Todd already have commit access to the main repository).
>>
>> That said, a sufficiently incentivized actor (like Daniel Lipshitz or Muun wallet developers) could work on a fork and run several nodes with such functionality. As far as I understand the percolation model, with 10 to 20 nodes running such a rule would create a significant risk for full-rbf miners.
>>
>> Regards.
>>
>> --- Eloy
>>
>> On Tue, Nov 15, 2022 at 11:43 AM Peter Todd via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:
>>
>>> On Tue, Nov 15, 2022 at 03:36:08PM +1000, Anthony Towns via bitcoin-dev wrote:
>>>> On Tue, Nov 08, 2022 at 01:16:13PM -0500, Peter Todd via bitcoin-dev wrote:
>>>> > FYI I've gotten a few hundred dollars worth of donations to this effort, and
>>>> > have raised the reward to about 0.02 BTC, or $400 USD at current prices.
>>>>
>>>> Seems like this has been mostly claimed (0.014btc / $235, 9238sat/vb):
>>>
>>> I'm turning it back on when (if) the mempool settles down. I've got more than
>>> enough donations to give another run at it (the majority was donated privately
>>> FWIW). There's a risk of the mempool filling up again of course; hard to avoid
>>> that.
>>>
>>> Right now of course it's really easy to double spend with the obvious
>>> low-fee/high-fee method as the min relay fee keeps shifting.
>>>
>>>> https://mempool.space/tx/397dcbe4e95ec40616e3dfc4ff8ffa158d2e72020b7d11fc2be29d934d69138c
>>>>
>>>> The block it was claimed in seems to have been about an hour after the
>>>> default mempool filled up:
>>>>
>>>> https://twitter.com/murchandamus/status/1592274621977477120
>>>>
>>>> That block actually seems to have included two
>>>> alice.btc.calendar.opentimestamps.org txs, the other paying $7.88
>>>> (309sat/vb):
>>>>
>>>> https://mempool.space/tx/ba9670109a6551458d5e1e23600c7bf2dc094894abdf59fe7aa020ccfead07cf
>>>
>>> The second is because I turned down the full-rbf reward to more normal fee
>>> levels. There's also another full-rbf double-spend from the Bob calendar, along
>>> the same lines: 7e76b351009326a574f3120164dbbe6d85e07e04a7bbdc40f0277fcb008d2cd2
>>>
>>> I double-spent the txin of the high fee tx that got mined. But I mistakenly had
>>> RBF enabled in that double-spend, so while it propagated initially, I believe
>>> it was replaced when something (someone?) rebroadcast the high-fee 397dcb tx.
>>>
>>>> Timeline (utc) to me looks like:
>>>>
>>>> - 13:12 - block 763148 is mined: last one that had a min fee < 1.5sat/vb
>>>> - 13:33 - f503868c64d454c472859b793f3ee7cdc8f519c64f8b1748d8040cd8ce6dc6e1
>>>> is announced and propogates widely (1.2sat/vb)
>>>> - 18:42 - 746daab9bcc331be313818658b4a502bb4f3370a691fd90015fabcd7759e0944
>>>> is announced and propogates widely (1.2sat/vb)
>>>> - 21:52 - ba967010 tx is announced and propogates widely, since
>>>> conflicting tx 746daab9 has been removed from default
>>>> mempools
>>>> - 21:53 - murch tweets about default mempool filling up
>>>> - 22:03 - 397dcbe4 tx is announced and propogates widely, since
>>>> conflicting tx f503868 has already been removed from default
>>>> mempools
>>>
>>> Is that 22:03 time for 397 from your node's logs? It was originally announced
>>> hours earlier. From one of my full-rbf nodes:
>>>
>>> 2022-11-14T14:08:37Z [mempool] replacing tx 764867062b67fea61810c3858d587da83a28290545e882935a32285028084317 with 397dcbe4e95ec40616e3dfc4ff8ffa158d2e72020b7d11fc2be29d934d69138c for 0.00468 additional fees, -1 delta bytes
>>>
>>>> - 22:35 - block 763189 is mined
>>>> - 22:39 - block 763190 is mined
>>>> - 23:11 - block 763191 is mined
>>>> - 23:17 - block 763192 is mined including 397dcbe4
>>>>
>>>> miningpool.observer reports both 397dcbe4 and ba967010 as missing in the
>>>> first three blocks, and gives similar mempool ages for those txs to what
>>>> my logs report:
>>>>
>>>> https://miningpool.observer/template-and-block/0000000000000000000436aba59d8430061e0e50592215f7f263bfb1073ccac7
>>>> https://miningpool.observer/template-and-block/00000000000000000005600404792bacfd8a164d2fe9843766afb2bfbd937309
>>>> https://miningpool.observer/template-and-block/00000000000000000004a3073f58c9eae40f251ea7aeaeac870daeac4b238fd1
>>>>
>>>> That presumably means those pools (AntPool twice and "unknown") are
>>>> running with large mempools that didn't kept the earlier 1.2sat/vb txs.
>>>
>>> To be clear, you think that AntPool and that other exchange is running with a
>>> larger than normal max mempool size limit? You mean those miners *did* keep the
>>> earlier 1.2sat/vb tx?
>>>
>>>> The txs were mined by Foundry:
>>>>
>>>> https://miningpool.observer/template-and-block/00000000000000000001382a226aedac822de80309cca2bf1253b35d4f8144f5
>>>>
>>>> This seems to be pretty good evidence that we currently don't have any
>>>> significant hashrate mining with fullrbf policies (<0.5% if there was a
>>>> high fee replacement available prior to every block having been mined),
>>>> despite the bounty having been collected.
>>>
>>> Oh, we can put much lower bounds on that. I've been running OTS calendars with
>>> full-rbf replacements for a few months without clear evidence of a full-rbf
>>> replacement. While there was good reason to think some miners were mining
>>> full-rbf before a few years back, they probably didn't bother to reapply their
>>> patches each upgrade. `mempoolfullrbf=1` is much simpler to use.
>>>
>>> --
>>> https://petertodd.org 'peter'[:-1]@petertodd.org
>>> _______________________________________________
>>> bitcoin-dev mailing list
>>> bitcoin-dev at lists.linuxfoundation.org
>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20221205/60f49caa/attachment-0001.html>

From erik at q32.com  Mon Dec  5 17:00:56 2022
From: erik at q32.com (Erik Aronesty)
Date: Mon, 5 Dec 2022 12:00:56 -0500
Subject: [bitcoin-dev] Announcement: Full-RBF Miner Bounty
In-Reply-To: <d1ea77a4-370f-d7e3-82c2-765c9fc18aa3@protonmail.com>
References: <Y2I3w8O5X55sD/3C@petertodd.org> <Y2qc7Ubc5xtJhxGw@petertodd.org>
 <Y3MlSE7AWkBgiCyr@erisian.com.au> <Y3OljVGQbZ/Wj8T6@petertodd.org>
 <CAPapNH3NEBP2-GVZZ_75K-QU0psGdAHyjdAus-vfq-0jffTstg@mail.gmail.com>
 <d1ea77a4-370f-d7e3-82c2-765c9fc18aa3@protonmail.com>
Message-ID: <CAJowKgLdsGcSyR7znhLpmMe6cPgLR9ivTiBcXx3pZPLBDUkR9A@mail.gmail.com>

note: if it was possible to enforce this, we wouldn't need proof of work at
all.   since it isn't possible, proof of work is strictly necessary.


On Mon, Dec 5, 2022 at 9:53 AM Rijndael via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> Good morning,
>
> That sounds like a very dangerous mode of operation. You can already hand
> a transaction to a miner privately. I hand a transaction to a miner with
> some reasonable fee, and then I go and broadcast a different transaction
> with a minimal fee that spends the same inputs. The whole network
> (including the miner I handed the tx to) could all be running with a strict
> first-seen mempool policy, but we can still have a situation where the
> miner creates a block with a different transaction from what you see in
> your mempool. If anytime this happens, the nodes running your proposed rule
> drop the block, then anyone can fork those nodes off the network whenever
> they want.
>
> Even outside of adversarial settings, Bitcoin doesn't (and doesn't attempt
> to) promise consistency across mempools. Making a consensus rule that
> enforces mempool consistency is a recipe for (unintended?) chainsplits.
>
> - rijndael
>
>
> On 12/5/22 7:20 AM, El_Hoy via bitcoin-dev wrote:
>
> The only option I see against the attack Peter Todd is doing to opt-in RBF
> and 0Conf bitcoin usage is working on a bitcoin core implementation that
> stops propagation of full-rbf replaced blocks. Running multiple of such
> nodes on the network will add a risk to miners that enable full-rbf that
> would work as an incentive against that.
>
> Obviously that would require adding an option on bitcoin core (that is not
> technically but politically difficult to implement as Petter Todd already
> have commit access to the main repository).
>
> That said, a sufficiently incentivized actor (like Daniel Lipshitz or Muun
> wallet developers) could work on a fork and run several nodes with such
> functionality. As far as I understand the percolation model, with 10 to 20
> nodes running such a rule would create a significant risk for full-rbf
> miners.
>
> Regards.
>
> ---  Eloy
>
>
> On Tue, Nov 15, 2022 at 11:43 AM Peter Todd via bitcoin-dev <
> bitcoin-dev at lists.linuxfoundation.org> wrote:
>
>> On Tue, Nov 15, 2022 at 03:36:08PM +1000, Anthony Towns via bitcoin-dev
>> wrote:
>> > On Tue, Nov 08, 2022 at 01:16:13PM -0500, Peter Todd via bitcoin-dev
>> wrote:
>> > > FYI I've gotten a few hundred dollars worth of donations to this
>> effort, and
>> > > have raised the reward to about 0.02 BTC, or $400 USD at current
>> prices.
>> >
>> > Seems like this has been mostly claimed (0.014btc / $235, 9238sat/vb):
>>
>> I'm turning it back on when (if) the mempool settles down. I've got more
>> than
>> enough donations to give another run at it (the majority was donated
>> privately
>> FWIW). There's a risk of the mempool filling up again of course; hard to
>> avoid
>> that.
>>
>> Right now of course it's really easy to double spend with the obvious
>> low-fee/high-fee method as the min relay fee keeps shifting.
>>
>> >
>> https://mempool.space/tx/397dcbe4e95ec40616e3dfc4ff8ffa158d2e72020b7d11fc2be29d934d69138c
>> >
>> > The block it was claimed in seems to have been about an hour after the
>> > default mempool filled up:
>> >
>> > https://twitter.com/murchandamus/status/1592274621977477120
>> >
>> > That block actually seems to have included two
>> > alice.btc.calendar.opentimestamps.org txs, the other paying $7.88
>> > (309sat/vb):
>> >
>> >
>> https://mempool.space/tx/ba9670109a6551458d5e1e23600c7bf2dc094894abdf59fe7aa020ccfead07cf
>>
>> The second is because I turned down the full-rbf reward to more normal fee
>> levels. There's also another full-rbf double-spend from the Bob calendar,
>> along
>> the same lines:
>> 7e76b351009326a574f3120164dbbe6d85e07e04a7bbdc40f0277fcb008d2cd2
>>
>> I double-spent the txin of the high fee tx that got mined. But I
>> mistakenly had
>> RBF enabled in that double-spend, so while it propagated initially, I
>> believe
>> it was replaced when something (someone?) rebroadcast the high-fee 397dcb
>> tx.
>>
>> > Timeline (utc) to me looks like:
>> >
>> >  - 13:12 - block 763148 is mined: last one that had a min fee <
>> 1.5sat/vb
>> >  - 13:33 -
>> f503868c64d454c472859b793f3ee7cdc8f519c64f8b1748d8040cd8ce6dc6e1
>> >            is announced and propogates widely (1.2sat/vb)
>> >  - 18:42 -
>> 746daab9bcc331be313818658b4a502bb4f3370a691fd90015fabcd7759e0944
>> >            is announced and propogates widely (1.2sat/vb)
>> >  - 21:52 - ba967010 tx is announced and propogates widely, since
>> >            conflicting tx 746daab9 has been removed from default
>> >          mempools
>> >  - 21:53 - murch tweets about default mempool filling up
>> >  - 22:03 - 397dcbe4 tx is announced and propogates widely, since
>> >            conflicting tx f503868 has already been removed from default
>> >          mempools
>>
>> Is that 22:03 time for 397 from your node's logs? It was originally
>> announced
>> hours earlier. From one of my full-rbf nodes:
>>
>>     2022-11-14T14:08:37Z [mempool] replacing tx
>> 764867062b67fea61810c3858d587da83a28290545e882935a32285028084317 with
>> 397dcbe4e95ec40616e3dfc4ff8ffa158d2e72020b7d11fc2be29d934d69138c for
>> 0.00468 additional fees, -1 delta bytes
>>
>> >  - 22:35 - block 763189 is mined
>> >  - 22:39 - block 763190 is mined
>> >  - 23:11 - block 763191 is mined
>> >  - 23:17 - block 763192 is mined including 397dcbe4
>> >
>> > miningpool.observer reports both 397dcbe4 and ba967010 as missing in the
>> > first three blocks, and gives similar mempool ages for those txs to what
>> > my logs report:
>> >
>> >
>> https://miningpool.observer/template-and-block/0000000000000000000436aba59d8430061e0e50592215f7f263bfb1073ccac7
>> >
>> https://miningpool.observer/template-and-block/00000000000000000005600404792bacfd8a164d2fe9843766afb2bfbd937309
>> >
>> https://miningpool.observer/template-and-block/00000000000000000004a3073f58c9eae40f251ea7aeaeac870daeac4b238fd1
>> >
>> > That presumably means those pools (AntPool twice and "unknown") are
>> > running with large mempools that didn't kept the earlier 1.2sat/vb txs.
>>
>> To be clear, you think that AntPool and that other exchange is running
>> with a
>> larger than normal max mempool size limit? You mean those miners *did*
>> keep the
>> earlier 1.2sat/vb tx?
>>
>> > The txs were mined by Foundry:
>> >
>> >
>> https://miningpool.observer/template-and-block/00000000000000000001382a226aedac822de80309cca2bf1253b35d4f8144f5
>> >
>> > This seems to be pretty good evidence that we currently don't have any
>> > significant hashrate mining with fullrbf policies (<0.5% if there was a
>> > high fee replacement available prior to every block having been mined),
>> > despite the bounty having been collected.
>>
>> Oh, we can put much lower bounds on that. I've been running OTS calendars
>> with
>> full-rbf replacements for a few months without clear evidence of a
>> full-rbf
>> replacement.  While there was good reason to think some miners were mining
>> full-rbf before a few years back, they probably didn't bother to reapply
>> their
>> patches each upgrade. `mempoolfullrbf=1` is much simpler to use.
>>
>> --
>> https://petertodd.org 'peter'[:-1]@petertodd.org
>> _______________________________________________
>> bitcoin-dev mailing list
>> bitcoin-dev at lists.linuxfoundation.org
>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20221205/2bf5f021/attachment-0001.html>

From eloyesp at gmail.com  Mon Dec  5 17:25:29 2022
From: eloyesp at gmail.com (El_Hoy)
Date: Mon, 5 Dec 2022 14:25:29 -0300
Subject: [bitcoin-dev] Announcement: Full-RBF Miner Bounty
In-Reply-To: <d1ea77a4-370f-d7e3-82c2-765c9fc18aa3@protonmail.com>
References: <Y2I3w8O5X55sD/3C@petertodd.org> <Y2qc7Ubc5xtJhxGw@petertodd.org>
 <Y3MlSE7AWkBgiCyr@erisian.com.au> <Y3OljVGQbZ/Wj8T6@petertodd.org>
 <CAPapNH3NEBP2-GVZZ_75K-QU0psGdAHyjdAus-vfq-0jffTstg@mail.gmail.com>
 <d1ea77a4-370f-d7e3-82c2-765c9fc18aa3@protonmail.com>
Message-ID: <CAPapNH0VMg+F_UW-fM+P5JwdGY-935f4FXSKUGfNu34sMjEHEA@mail.gmail.com>

You are doing quite big claims without explaining those, let me add a few
questions inline:

On Mon, Dec 5, 2022 at 10:39 AM Greg Sanders <gsanders87 at gmail.com> wrote:

This will greatly centralize the network as well as not actually achieve
> the intended goal which is literally impossible.
>

Why would this centralize the network? Adding more nodes that propagate
valid blocks on the network should be good. Also, I cannot see why you say
it is "literally impossible", could you give any explanation for your words?

On Mon, Dec 5, 2022 at 11:53 AM Rijndael via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> Good morning,
>
> That sounds like a very dangerous mode of operation. You can already hand
> a transaction to a miner privately. I hand a transaction to a miner with
> some reasonable fee, and then I go and broadcast a different transaction
> with a minimal fee that spends the same inputs. The whole network
> (including the miner I handed the tx to) could all be running with a strict
> first-seen mempool policy, but we can still have a situation where the
> miner creates a block with a different transaction from what you see in
> your mempool. If anytime this happens, the nodes running your proposed rule
> drop the block, then anyone can fork those nodes off the network whenever
> they want.
>
I cannot see the danger you are talking about, sending a transaction
directly to a miner does not sound like anyone can do (except a miner) and
is not the main workflow, usually transactions propagate on the network and
it is quite difficult to have different miners with different opt-out-rbb
transactions that spends the same input. In that strange scenario that you
mention, the miner generated block might be lost if another miner creates
an alternative block.

> Even outside of adversarial settings, Bitcoin doesn't (and doesn't attempt
> to) promise consistency across mempools. Making a consensus rule that
> enforces mempool consistency is a recipe for (unintended?) chainsplits.
>
That is not entirely true for opt-out rbf transactions, as most 0conf
setups are based on such consistency. And breaking a consensus rule always
leads to a chainsplit. For example when a miner creates a block that
double-spends an input, the normal bitcoin flow is a chain-split. That is
not an unintended chainsplit, is a consensus rule enforcement.

> - rijndael
>
>
> On 12/5/22 7:20 AM, El_Hoy via bitcoin-dev wrote:
>
> The only option I see against the attack Peter Todd is doing to opt-in RBF
> and 0Conf bitcoin usage is working on a bitcoin core implementation that
> stops propagation of full-rbf replaced blocks. Running multiple of such
> nodes on the network will add a risk to miners that enable full-rbf that
> would work as an incentive against that.
>
> Obviously that would require adding an option on bitcoin core (that is not
> technically but politically difficult to implement as Petter Todd already
> have commit access to the main repository).
>
> That said, a sufficiently incentivized actor (like Daniel Lipshitz or Muun
> wallet developers) could work on a fork and run several nodes with such
> functionality. As far as I understand the percolation model, with 10 to 20
> nodes running such a rule would create a significant risk for full-rbf
> miners.
>
> Regards.
>
> ---  Eloy
>
>
> On Tue, Nov 15, 2022 at 11:43 AM Peter Todd via bitcoin-dev <
> bitcoin-dev at lists.linuxfoundation.org> wrote:
>
>> On Tue, Nov 15, 2022 at 03:36:08PM +1000, Anthony Towns via bitcoin-dev
>> wrote:
>> > On Tue, Nov 08, 2022 at 01:16:13PM -0500, Peter Todd via bitcoin-dev
>> wrote:
>> > > FYI I've gotten a few hundred dollars worth of donations to this
>> effort, and
>> > > have raised the reward to about 0.02 BTC, or $400 USD at current
>> prices.
>> >
>> > Seems like this has been mostly claimed (0.014btc / $235, 9238sat/vb):
>>
>> I'm turning it back on when (if) the mempool settles down. I've got more
>> than
>> enough donations to give another run at it (the majority was donated
>> privately
>> FWIW). There's a risk of the mempool filling up again of course; hard to
>> avoid
>> that.
>>
>> Right now of course it's really easy to double spend with the obvious
>> low-fee/high-fee method as the min relay fee keeps shifting.
>>
>> >
>> https://mempool.space/tx/397dcbe4e95ec40616e3dfc4ff8ffa158d2e72020b7d11fc2be29d934d69138c
>> >
>> > The block it was claimed in seems to have been about an hour after the
>> > default mempool filled up:
>> >
>> > https://twitter.com/murchandamus/status/1592274621977477120
>> >
>> > That block actually seems to have included two
>> > alice.btc.calendar.opentimestamps.org txs, the other paying $7.88
>> > (309sat/vb):
>> >
>> >
>> https://mempool.space/tx/ba9670109a6551458d5e1e23600c7bf2dc094894abdf59fe7aa020ccfead07cf
>>
>> The second is because I turned down the full-rbf reward to more normal fee
>> levels. There's also another full-rbf double-spend from the Bob calendar,
>> along
>> the same lines:
>> 7e76b351009326a574f3120164dbbe6d85e07e04a7bbdc40f0277fcb008d2cd2
>>
>> I double-spent the txin of the high fee tx that got mined. But I
>> mistakenly had
>> RBF enabled in that double-spend, so while it propagated initially, I
>> believe
>> it was replaced when something (someone?) rebroadcast the high-fee 397dcb
>> tx.
>>
>> > Timeline (utc) to me looks like:
>> >
>> >  - 13:12 - block 763148 is mined: last one that had a min fee <
>> 1.5sat/vb
>> >  - 13:33 -
>> f503868c64d454c472859b793f3ee7cdc8f519c64f8b1748d8040cd8ce6dc6e1
>> >            is announced and propogates widely (1.2sat/vb)
>> >  - 18:42 -
>> 746daab9bcc331be313818658b4a502bb4f3370a691fd90015fabcd7759e0944
>> >            is announced and propogates widely (1.2sat/vb)
>> >  - 21:52 - ba967010 tx is announced and propogates widely, since
>> >            conflicting tx 746daab9 has been removed from default
>> >          mempools
>> >  - 21:53 - murch tweets about default mempool filling up
>> >  - 22:03 - 397dcbe4 tx is announced and propogates widely, since
>> >            conflicting tx f503868 has already been removed from default
>> >          mempools
>>
>> Is that 22:03 time for 397 from your node's logs? It was originally
>> announced
>> hours earlier. From one of my full-rbf nodes:
>>
>>     2022-11-14T14:08:37Z [mempool] replacing tx
>> 764867062b67fea61810c3858d587da83a28290545e882935a32285028084317 with
>> 397dcbe4e95ec40616e3dfc4ff8ffa158d2e72020b7d11fc2be29d934d69138c for
>> 0.00468 additional fees, -1 delta bytes
>>
>> >  - 22:35 - block 763189 is mined
>> >  - 22:39 - block 763190 is mined
>> >  - 23:11 - block 763191 is mined
>> >  - 23:17 - block 763192 is mined including 397dcbe4
>> >
>> > miningpool.observer reports both 397dcbe4 and ba967010 as missing in the
>> > first three blocks, and gives similar mempool ages for those txs to what
>> > my logs report:
>> >
>> >
>> https://miningpool.observer/template-and-block/0000000000000000000436aba59d8430061e0e50592215f7f263bfb1073ccac7
>> >
>> https://miningpool.observer/template-and-block/00000000000000000005600404792bacfd8a164d2fe9843766afb2bfbd937309
>> >
>> https://miningpool.observer/template-and-block/00000000000000000004a3073f58c9eae40f251ea7aeaeac870daeac4b238fd1
>> >
>> > That presumably means those pools (AntPool twice and "unknown") are
>> > running with large mempools that didn't kept the earlier 1.2sat/vb txs.
>>
>> To be clear, you think that AntPool and that other exchange is running
>> with a
>> larger than normal max mempool size limit? You mean those miners *did*
>> keep the
>> earlier 1.2sat/vb tx?
>>
>> > The txs were mined by Foundry:
>> >
>> >
>> https://miningpool.observer/template-and-block/00000000000000000001382a226aedac822de80309cca2bf1253b35d4f8144f5
>> >
>> > This seems to be pretty good evidence that we currently don't have any
>> > significant hashrate mining with fullrbf policies (<0.5% if there was a
>> > high fee replacement available prior to every block having been mined),
>> > despite the bounty having been collected.
>>
>> Oh, we can put much lower bounds on that. I've been running OTS calendars
>> with
>> full-rbf replacements for a few months without clear evidence of a
>> full-rbf
>> replacement.  While there was good reason to think some miners were mining
>> full-rbf before a few years back, they probably didn't bother to reapply
>> their
>> patches each upgrade. `mempoolfullrbf=1` is much simpler to use.
>>
>> --
>> https://petertodd.org 'peter'[:-1]@petertodd.org
>> _______________________________________________
>> bitcoin-dev mailing list
>> bitcoin-dev at lists.linuxfoundation.org
>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20221205/3fd33525/attachment-0001.html>

From john at synonym.to  Mon Dec  5 17:26:14 2022
From: john at synonym.to (John Carvalho)
Date: Mon, 5 Dec 2022 17:26:14 +0000
Subject: [bitcoin-dev] bitcoin-dev Digest, Vol 91, Issue 5
In-Reply-To: <mailman.15.1670068802.22993.bitcoin-dev@lists.linuxfoundation.org>
References: <mailman.15.1670068802.22993.bitcoin-dev@lists.linuxfoundation.org>
Message-ID: <CAHTn92zCFf+9yNgRZuoJ8L54fxJmPoOwcU3a9kSY5PLoYMk9dA@mail.gmail.com>

Antoine,


> In the direction of removing the current option from Bitcoin Core, I think
> the prerequisite to address are the qualification of enough economic flows
> at risk and the presence of a sizable loss in miners income.


Are such prerequisites for feature removal published somewhere? I don't see
any reason why removing a controversial change should be harder than adding
one. Generally, it is impossible to definitively attribute any change in
network condition to one thing in such a complex system, and also difficult
to know how much time is required to express negative effects. The whole
argument here is to prevent disruption of the status quo that has lasted
the whole history of Bitcoin, to avoid taking a speculative risk that
full-RBF, at the expense of zero-conf, is maybe better for miners... or
something.

Further, I feel the mempoolfullrbf feature was rushed through while this
controversy was growing, specifically to attempt to achieve this imaginary
protection of "sorry, that ship has sailed" which indicates an agenda that
is counter to greater social consensus and status quo. We should not
incentivize such behavior further by allowing this sort of feature
sainthood.

Beyond that, I think there is still the open question if we (we, as the
> Bitcoin protocol development community, with all its stakeholders) should
> restrain user choice in policy settings in the name of preserving mining
> income and established use-case stability.


Removing the mempoolfullrbf feature is the opposite of restraining user
choice.

First, any incentivized user can still create and distribute patches for
any given mempool policy, regardless of whether we remove the feature from
Core, but it is important to note that extremely few have felt the need to
do so in the past.

Second, the very debate here is about how it is mempoolfullrbf that removes
the user choice of zero-conf services. With a first-seen policy in place,
users have *more* options, and Bitcoin is thus more useful, and thus more
valuable to everyone. This is evident in that the feature of full-rbf is
that it overrides any ability for users to signal intent of how they wish
their transaction to be handled by nodes and miners. This is useful info to
miners, as they make more money by facilitating use cases than by
fee-minimizers painting everything as RBF. User-signaling is a useful
feature for the mempool, full-RBF removes that feature.

Third, when Bitcoin Core adds special support for specific policies, it
positions itself as a political authority and influencer. It is not Core's
place to support one subjective policy more than another, particularly when
it conflicts with years of status quo and breaks the current user space,
and likely resulting in more doublespent user experiences.

To recall, the original technical motivation of this option, and the wider
> smoother deployment was to address a DoS vector affecting another class of
> use-case: multi-party transactions like coinjoin and contracting protocols
> like Lightning [2] [3]. All of them expect to generate economic flows and
> corresponding mining income. Since then, alternative paths to solve this
> DoS vector have been devised, all with their own trade-offs and conceptual
> issues [4] [5].


I am particularly skeptical that users sending Bitcoin to themselves
(coinjoin) could ever be more incentive-compatible than fast-paced commerce
& priority competition. I am also skeptical that mempoolfullrbf actually
solves LN risks any better than opt-in RBF by default by LN implementations
and wallets.

Further, zero-conf support reduces friction for LN adoption by allowing us
to make instant, seamless UX within wallets when onboarding, rebalancing,
and splicing.

--
John Carvalho
CEO, Synonym.to <http://synonym.to/>



>
> Date: Fri, 2 Dec 2022 17:35:39 -0500
> From: Antoine Riard <antoine.riard at gmail.com>
> To: Bitcoin Protocol Discussion
>         <bitcoin-dev at lists.linuxfoundation.org>
> Subject: [bitcoin-dev] Fwd: [Opt-in full-RBF] Zero-conf apps in
>         immediate       danger
> Message-ID:
>         <
> CALZpt+HFFwY4XECNZj3XLqnaumPeDjrwvnCsRa3vsGQfuXn8wA at mail.gmail.com>
> Content-Type: text/plain; charset="utf-8"
>
> Hi Daniel,
>
> >From my understanding of GAP600, you're operating a zero-conf risk
> analysis
> business, which is integrated and leveraged by payment processors/liquidity
> providers and merchants. A deployment of fullrbf by enough full-node
> operators and a subset of the mining hashrate would lower the cost of
> double-spend attack by lamda users, therefore increasing the risk exposure
> of your users. This increased risk exposure could lead you to alter the
> acceptance of incoming zero-conf transactions, AFAICT in a similar
> reasoning as exposed by Bitrefill earlier this year [0].
>
> About the statistics you're asking for considerations, few further
> questions, on those 1.5M transactions per month, a) how many are
> Bitcoin-only (as I understand to be multi-cryptocurrencies), b) how many
> are excluded from zeroconf due to factors like RBF, long-chain of
> unconfirmed ancestors or too high-value and c) what has been the average
> feerate (assuming a standard size of 200 bytes) ?
>
> My personal position on fullrbf is still the same as expressed in #26525
> [1]. As a community, I think we still don't have conceptual consensus on
> deploying full-rbf, nor to remove it. In the direction of removing the
> current option from Bitcoin Core, I think the prerequisite to address are
> the qualification of enough economic flows at risk and the presence of a
> sizable loss in miners income. Beyond that, I think there is still the open
> question if we (we, as the Bitcoin protocol development community, with all
> its stakeholders) should restrain user choice in policy settings in the
> name of preserving mining income and established use-case stability.
>
> To recall, the original technical motivation of this option, and the wider
> smoother deployment was to address a DoS vector affecting another class of
> use-case: multi-party transactions like coinjoin and contracting protocols
> like Lightning [2] [3]. All of them expect to generate economic flows and
> corresponding mining income. Since then, alternative paths to solve this
> DoS vector have been devised, all with their own trade-offs and conceptual
> issues [4] [5].
>
> Best,
> Antoine
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20221205/e84af625/attachment.html>

From pete at petertodd.org  Tue Dec  6 05:03:56 2022
From: pete at petertodd.org (Peter Todd)
Date: Tue, 6 Dec 2022 00:03:56 -0500
Subject: [bitcoin-dev] Fwd: [Opt-in full-RBF] Zero-conf apps in
 immediate danger
In-Reply-To: <CALZpt+HFFwY4XECNZj3XLqnaumPeDjrwvnCsRa3vsGQfuXn8wA@mail.gmail.com>
References: <CACkWPs8-rZpGSJSEyLsg9gVAuPpHztXWSZvfGscGJCn05th0DQ@mail.gmail.com>
 <CALZpt+GnTE+LMSMHVt-E7Uq0FeuqrSKyr1m9OJa_yKkh6MrgzA@mail.gmail.com>
 <CALZpt+HFFwY4XECNZj3XLqnaumPeDjrwvnCsRa3vsGQfuXn8wA@mail.gmail.com>
Message-ID: <Y47NPO4fscqZl8hr@petertodd.org>

On Fri, Dec 02, 2022 at 05:35:39PM -0500, Antoine Riard via bitcoin-dev wrote:
> To recall, the original technical motivation of this option, and the wider
> smoother deployment was to address a DoS vector affecting another class of
> use-case: multi-party transactions like coinjoin and contracting protocols
> like Lightning [2] [3]. All of them expect to generate economic flows and
> corresponding mining income. Since then, alternative paths to solve this
> DoS vector have been devised, all with their own trade-offs and conceptual
> issues [4] [5].

<snip>

> [4]
> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-October/021135.html
> [5]
> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-November/021144.html

To be clear, these alternative paths all negatively impact privacy as they're
creating yet more ways for bad actors such as Chainalysis to deanonymize
transactions. We have a fundamental political tradeoff between the few
centralized services trying to accept unconfirmed txs, and the huge number of
users - everyone else - who desires privacy.

A big part of the promise of taproot was that we'd be able to eventually
greatly improve the anonymity set of all transactions by making multi-party
transactions indistinguishable from any other transaction. That's a huge part
of why the community fought for taproot adoption.

Your proposal [5] that multi-party protocols use a different nVersion to signal
full-rbf in their txouts negates that anonymity set for the obvious reason that
single-party wallets are discouraged from using it by the fact that a few
services like Bitrefill complain about RBF transactions. Indeed, since
nVersion=3 transactions are non-standard, we additionally have the problem that
many more wallets won't even see such payments until a confirmation, or in some
cases due to bugs, never.


Worse, this trade-offs is fundamental: it is impossible to design such a
protocol without harming privacy. Why? Let's assume such a protocol was
possible. To be compatible with how unconfirmed txs are accepted today the
protocol would have to have the following two simultaneous properties:

1) Zeroconf services would need to be able to inspect the tx data and determine
   whether or not the txout had opted into full-rbf.
2) Chainalysis services would need to be unable to inspect the tx data and
   determine whether or not the txout had opted into full-rbf.

This is an obvious contradiction, and the only alternative of commit-reveal
schemes is ridiculous and would *itself* create yet another privacy impact. We
do not need any further technical debate on this issue: this is a political
tradeoff between a few centralized services and all other users that needs to
be decied by the community. No different than the blocksize wars.


The v3 proposal Suhas mentions in [4] has similar privacy issues: again we're
forcing a class of multiparty protocols to create transactions that are clearly
identified as being multiparty. In this case the privacy impact isn't as stark,
because the common case of cooperative actions in Lightning can use v2
transactions. But this is still a privacy impact that could be avoided by
better mempool design. Eg as I showed in:
https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-November/021175.html

-- 
https://petertodd.org 'peter'[:-1]@petertodd.org
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 833 bytes
Desc: not available
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20221206/e7753276/attachment.sig>

From pete at petertodd.org  Tue Dec  6 05:39:40 2022
From: pete at petertodd.org (Peter Todd)
Date: Tue, 6 Dec 2022 00:39:40 -0500
Subject: [bitcoin-dev] Announcement: Full-RBF Miner Bounty
In-Reply-To: <CAPapNH3NEBP2-GVZZ_75K-QU0psGdAHyjdAus-vfq-0jffTstg@mail.gmail.com>
References: <Y2I3w8O5X55sD/3C@petertodd.org> <Y2qc7Ubc5xtJhxGw@petertodd.org>
 <Y3MlSE7AWkBgiCyr@erisian.com.au> <Y3OljVGQbZ/Wj8T6@petertodd.org>
 <CAPapNH3NEBP2-GVZZ_75K-QU0psGdAHyjdAus-vfq-0jffTstg@mail.gmail.com>
Message-ID: <Y47VnGNMt/p5W32U@petertodd.org>

On Mon, Dec 05, 2022 at 09:20:58AM -0300, El_Hoy wrote:
> The only option I see against the attack Peter Todd is doing to opt-in RBF
> and 0Conf bitcoin usage is working on a bitcoin core implementation that
> stops propagation of full-rbf replaced blocks. Running multiple of such
> nodes on the network will add a risk to miners that enable full-rbf that
> would work as an incentive against that.
> 
> Obviously that would require adding an option on bitcoin core (that is not
> technically but politically difficult to implement as Petter Todd already
> have commit access to the main repository).

For the record, I do not and have never had commit access to anything under
https://github.com/bitcoin

The last time I contributed to Bitcoin Core was in Mar 1st 2017, and that was
to add an explanatory comment. Pretty much the only reason why you know my name
is I'm very good at argument and critique, I come up with some good ideas, and
conference organizers love to put me on stage.

> That said, a sufficiently incentivized actor (like Daniel Lipshitz or Muun
> wallet developers) could work on a fork and run several nodes with such
> functionality. As far as I understand the percolation model, with 10 to 20
> nodes running such a rule would create a significant risk for full-rbf
> miners.

You do not understand the percolation model.

10 or 20 nodes is completely meaningless. Pools run nodes themselves, which by
default connect to 8 outgoing peers. There's about 5000 IPv4 listening nodes on
the network. When a node learns of a new block, it tells all it's peers that
the new block exists.

For your censorship to work, there has to be a substantial propability that a
miner *only* runs a single node (they don't), that has no incoming peers, and
all 8 peers of that node happen to be one of your 20 censoring nodes.
Obviously, since the probability of a given peer being a censoring node is
20/5000, all 8 being censored is extraordinarily unlikely.

Even if you ran so many nodes that 20% of the entire network was censoring, the
probability of all 8 outgoing peers being censors is only 0.2^8 = 0.000256%


This is an example of information being hard to censor and easy to spread. In
fact, for full-rbf this same math works in our favor: for a node to have a 50%
chance of connecting to at least one full-rbf peer, just 8.3% of the network
needs to run full-rbf. 5000 IPv4 nodes * 8% = 400 nodes.

The percolation threshold doesn't need to be met for this to be succesful,
because someone to just run a full-rbf node that connects to every single
listening node simultaneously.


Anyway, as others' have pointed out, you're idea is also broken in other ways.
But I thought it'd be worth pointing out how futile it is to even try.

-- 
https://petertodd.org 'peter'[:-1]@petertodd.org
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 833 bytes
Desc: not available
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20221206/1826ac5c/attachment-0001.sig>

From pete at petertodd.org  Tue Dec  6 07:37:27 2022
From: pete at petertodd.org (Peter Todd)
Date: Tue, 6 Dec 2022 02:37:27 -0500
Subject: [bitcoin-dev] Announcement: Full-RBF Miner Bounty
In-Reply-To: <Y47VnGNMt/p5W32U@petertodd.org>
References: <Y2I3w8O5X55sD/3C@petertodd.org> <Y2qc7Ubc5xtJhxGw@petertodd.org>
 <Y3MlSE7AWkBgiCyr@erisian.com.au> <Y3OljVGQbZ/Wj8T6@petertodd.org>
 <CAPapNH3NEBP2-GVZZ_75K-QU0psGdAHyjdAus-vfq-0jffTstg@mail.gmail.com>
 <Y47VnGNMt/p5W32U@petertodd.org>
Message-ID: <Y47xN07/QSy5W++I@petertodd.org>

On Tue, Dec 06, 2022 at 12:39:40AM -0500, Peter Todd via bitcoin-dev wrote:
> 10 or 20 nodes is completely meaningless. Pools run nodes themselves, which by
> default connect to 8 outgoing peers. There's about 5000 IPv4 listening nodes on
> the network. When a node learns of a new block, it tells all it's peers that
> the new block exists.
> 
> For your censorship to work, there has to be a substantial propability that a
> miner *only* runs a single node (they don't), that has no incoming peers, and
> all 8 peers of that node happen to be one of your 20 censoring nodes.
> Obviously, since the probability of a given peer being a censoring node is
> 20/5000, all 8 being censored is extraordinarily unlikely.
> 
> Even if you ran so many nodes that 20% of the entire network was censoring, the
> probability of all 8 outgoing peers being censors is only 0.2^8 = 0.000256%
> 
> 
> This is an example of information being hard to censor and easy to spread. In
> fact, for full-rbf this same math works in our favor: for a node to have a 50%
> chance of connecting to at least one full-rbf peer, just 8.3% of the network
> needs to run full-rbf. 5000 IPv4 nodes * 8% = 400 nodes.
> 
> The percolation threshold doesn't need to be met for this to be succesful,
> because someone to just run a full-rbf node that connects to every single
> listening node simultaneously.

FYI here's a percolation simulator for full-rbf:

https://github.com/mzumsande/fullrbf_simulation

It finds similar results to my math above.

-- 
https://petertodd.org 'peter'[:-1]@petertodd.org
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 833 bytes
Desc: not available
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20221206/3f1d55d9/attachment.sig>

From erik at q32.com  Mon Dec  5 21:14:03 2022
From: erik at q32.com (Erik Aronesty)
Date: Mon, 5 Dec 2022 16:14:03 -0500
Subject: [bitcoin-dev] [Opt-in full-RBF] Zero-conf apps in immediate
 danger (angus)
In-Reply-To: <CAHTn92wri-edhivrtqZCoEzAPEmwZFap12mM4yzxgp77O-+JYA@mail.gmail.com>
References: <mailman.48662.1670246787.956.bitcoin-dev@lists.linuxfoundation.org>
 <CAHTn92wri-edhivrtqZCoEzAPEmwZFap12mM4yzxgp77O-+JYA@mail.gmail.com>
Message-ID: <CAJowKgJQJvsZQgTjEqXaz6DVw_iG4JfXCL8s0G7v2o3O453Ajg@mail.gmail.com>

>
>
>
> Many zero-conf proponents work on the bleeding edge of supporting
> Lightning, including myself. Lightning is not risk-free and the base layer
> should not be assuming it as a primary dependency for commercial payments.
>

for low-value payments, lightning is the only workable version because the
current low-fee environment is not scalable and never will be

for high valued payments, zero conf was never valuable or useful and never
can be - it was always the beneficence of users you are relying on   low
fee/high fee double spends of a zero conf with no rbf flag has
been demonstrated, repeatedly ad nauseum.

... so there is no long term scenario where zero conf is valuable.

right *now* with low fees it might "seem nice", but really it just
incentivises network-wide surveillance, increased peer burden on nodes, and
unsustainable practices that are akin to a "mev" bounty hanging over
merchant's heads.

also, i've been using bitcoin for years without zero conf.   selling and
buying online.   operating merchants with millions in transactions.   the
20 minute wait before i ship is meaningless, and the only risk i take on is
that a user replaces a transaction with a different destination.   which
i've never observed.   even with the flag on (which i dont care about, and
never have).

and if i do observe it ... i just won't ship.   it was easy to code up.
 the user will have to initiate a new tx.   i have no objection to a user
being able to cancel their order.   why would i?


>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20221205/9b947dc5/attachment-0001.html>

From antoine.riard at gmail.com  Tue Dec  6 04:06:34 2022
From: antoine.riard at gmail.com (Antoine Riard)
Date: Mon, 5 Dec 2022 23:06:34 -0500
Subject: [bitcoin-dev] bitcoin-dev Digest, Vol 91, Issue 5
In-Reply-To: <CAHTn92zCFf+9yNgRZuoJ8L54fxJmPoOwcU3a9kSY5PLoYMk9dA@mail.gmail.com>
References: <mailman.15.1670068802.22993.bitcoin-dev@lists.linuxfoundation.org>
 <CAHTn92zCFf+9yNgRZuoJ8L54fxJmPoOwcU3a9kSY5PLoYMk9dA@mail.gmail.com>
Message-ID: <CALZpt+F_B6MA18P9BQK9wKBE7hZzHa-tP6RiwTKaP=d9FrzujA@mail.gmail.com>

Hi John,

Thanks for expressing your thoughts on the current state of
`-mempoolfullrbf`, from the perspective of a merchant and zero-conf
proponent. First and foremost, we're dealing with a nuanced and rich topic,
implying not only the inner workings of Bitcoin Core mempool policy rules,
the current topology of the peer-to-peer network and transactions
propagation across it, the miner block construction strategy, but even
further the consequences on multiple class of use-cases such as on-chain
payments, Ligthning and coinjoins.

In the present case, and as always, I'm only speaking for myself, based on
my years-long experience contributing to Bitcoin Core, the wider Lightning
ecosystem and few other open-source projects. While there is a
self-awareness of the scope of my statements expressed in one of my (rough)
domains of expertise, as usual I invite anyone to reason by oneself and
check my saying for opinions and wrongs.

That disclaimer said, in matters of feature removal, to the best of my
knowledge the Bitcoin Core's "decision-making" process should be followed
like any other code change, as documented by the CONTRIBUTING.md [0]. In
the conceptual appreciation of the change in soundness, of course the
ecosystem impacts or utility are lawfully decision grounds, as we've done
in the past for many Lightning/L2-related PRs.

W.r.t `mempoolfullrbf`, it has been argued on one-side it would a benefit
for some wallets usage (i.e replace non-signaling transactions from legacy
software [1]) and multi-party applications/ contracting protocols (i.e
remove a DoS vector [2]). On the other hand, it would change the security
model expectations of the 0confs operators. Whatever the evaluation one can
have of the soundness of those expectations, I think there is a lowering of
the technical bar one should reach to accomplish a double-spend.

During the last months of discussions, we had a mempool policy design
philosophy proposed aiming to accommodate all the Bitcoin use-cases alive
on the network, under the conditions they're not harming the network
interests [3]. Under this paradigm, we could have a policy regime for each
use-case, and we can devise another special rule to solve the DoS vector
affecting multi-party applications/contracting protocols have been proposed
[4].

With that in consideration, there is still the open question if this
mempool policy design philosophy proposed is sound enough in face of miner
incentives and won't generate asymmetries in mining incomes. Not only now,
but also in a future world where fee reward is most of miners income. To
the best of my understanding, there isn't an established and practical
model of miner incentives, at least among the Bitcoin Core developers. To
underscore, from my perspective this is where the conceptual discussion is
blocked, and where it would be opportune to spend time and energy on.
Anyone is invited to contribute on that front.

Zooming out, I believe the lack of current fullrbf hashrate shouldn't be a
disqualification that this mempool policy rule is not miner incentive
compatible. In the realm of science, the value of a model is its
performance to predict events, even if with a macro-system like Bitcoin
mining it might take years for the empirical confirmation to happen (namely
the exhaustion of mining reward). As we're seeing in physics, some lessons
of Einstein's general relativity expressed in the 1900 were only confirmed
by observation of solar eclipse in 1919.

In the meantime, as `mempoolfullrbf` is altering the security expectations
of the 0conf operators and on the other side the Lightning/coinjoins folks
have expressed low sensibility to the DoS vector [5], following a "first,
do not harm" philosophy, I think as an ecosystem we're better off to remove
the "risk-induction" `mempoolfullrbf` feature. Renewing here my position
previously expressed in #26438 [6] and #26525 [7].

Qualifying the existence of a harm in the eyes of the community, I think
this is valuable to have more merchants/services operators producing
effective usage data, from the past years, as Bitrefill has done as an
example [8]. Minding the lack of a verifiable process to attest the
authenticity of such merchant claims raises a methodological issue in the
discussion (and we could so in the future with cool ZKPs based on on-chain
data!)

Of course, I think we shouldn't lose sight of the existence of a
`mempoolfullrbf` patch, now widely disseminated across the ecosystem could
lead to a situation where only a minority of node operators using it would
damage the safety of the 0confs use-case. There is not that much the
Bitcoin Core project could do in that regard. While I think the project
aims to maximize the safety of the peer-to-peer network as a design
principle, including when we might have to restrain user choice, policy
rules are "soft" rules and the autonomy to modify them is only a function
of one's technical ability.

On the qualification of the Bitcoin Core as a political process, I think
this is an ignorance of the practice of day-to-day Core's process, where
the best code and reasonings are winning based on scientific and
engineering standards, even if we've always had a margin of improvements.
People are striving their best to ensure we follow an idea meritocracy
according to best open-source practice, and I think the project (and
Bitcoin itself in its 10+ years of history) wouldn't have survived so far
if it has been otherwise.

Finally, I can understand we have no economical data yet for the
multi-party funded and p2p coinjoins use-cases, as the specification
enabling them is still WIP and have not been implemented by all LN
softwares. I also fully understand the skepticism on how mempoolfullrbf
would solve a DoS vector for LN multi-party funded transactions, even if
I've done my best to describe the issue previously. I'm staying available
to demonstrate the pinning against a mainnet LN dual-funding flow if that
would convince you further, and then explain how the wide deployment of
mempoolfullrbf would block the DoS. I agree with you that instant channel
opening or splicing is very valuable, but there are a lot of additional
solutions that operators could deploy to have more fine-grained
risk-management.

All that said, I appreciate when anyone in the community raises the voice
to check-and-balance the work of Bitcoin Core contributors, this is really
needed for the health of the development process, as long as it's done in a
respectful and patient way.

Sincerely,
Antoine

[0] https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md
[1] https://github.com/bitcoin/bitcoin/pull/26438#issuecomment-1304370679
[2]
https://lists.linuxfoundation.org/pipermail/lightning-dev/2021-May/003033.html
[3]
https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-October/021135.html
[4]
https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-November/021144.html
[5]
https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-November/021183.html
[6] https://github.com/bitcoin/bitcoin/pull/26438#issuecomment-1305042950
[7] https://github.com/bitcoin/bitcoin/pull/26525#issuecomment-1319499006
[8] https://github.com/bitcoin/bitcoin/pull/26525#issuecomment-1332823282

Le lun. 5 d?c. 2022 ? 12:26, John Carvalho <john at synonym.to> a ?crit :

> Antoine,
>
>
>> In the direction of removing the current option from Bitcoin Core, I
>> think the prerequisite to address are the qualification of enough economic
>> flows at risk and the presence of a sizable loss in miners income.
>
>
> Are such prerequisites for feature removal published somewhere? I don't
> see any reason why removing a controversial change should be harder than
> adding one. Generally, it is impossible to definitively attribute any
> change in network condition to one thing in such a complex system, and also
> difficult to know how much time is required to express negative effects.
> The whole argument here is to prevent disruption of the status quo that has
> lasted the whole history of Bitcoin, to avoid taking a speculative risk
> that full-RBF, at the expense of zero-conf, is maybe better for miners...
> or something.
>
> Further, I feel the mempoolfullrbf feature was rushed through while this
> controversy was growing, specifically to attempt to achieve this imaginary
> protection of "sorry, that ship has sailed" which indicates an agenda that
> is counter to greater social consensus and status quo. We should not
> incentivize such behavior further by allowing this sort of feature
> sainthood.
>
> Beyond that, I think there is still the open question if we (we, as the
>> Bitcoin protocol development community, with all its stakeholders) should
>> restrain user choice in policy settings in the name of preserving mining
>> income and established use-case stability.
>
>
> Removing the mempoolfullrbf feature is the opposite of restraining user
> choice.
>
> First, any incentivized user can still create and distribute patches for
> any given mempool policy, regardless of whether we remove the feature from
> Core, but it is important to note that extremely few have felt the need to
> do so in the past.
>
> Second, the very debate here is about how it is mempoolfullrbf that
> removes the user choice of zero-conf services. With a first-seen policy in
> place, users have *more* options, and Bitcoin is thus more useful, and thus
> more valuable to everyone. This is evident in that the feature of full-rbf
> is that it overrides any ability for users to signal intent of how they
> wish their transaction to be handled by nodes and miners. This is useful
> info to miners, as they make more money by facilitating use cases than by
> fee-minimizers painting everything as RBF. User-signaling is a useful
> feature for the mempool, full-RBF removes that feature.
>
> Third, when Bitcoin Core adds special support for specific policies, it
> positions itself as a political authority and influencer. It is not Core's
> place to support one subjective policy more than another, particularly when
> it conflicts with years of status quo and breaks the current user space,
> and likely resulting in more doublespent user experiences.
>
> To recall, the original technical motivation of this option, and the wider
>> smoother deployment was to address a DoS vector affecting another class of
>> use-case: multi-party transactions like coinjoin and contracting protocols
>> like Lightning [2] [3]. All of them expect to generate economic flows and
>> corresponding mining income. Since then, alternative paths to solve this
>> DoS vector have been devised, all with their own trade-offs and conceptual
>> issues [4] [5].
>
>
> I am particularly skeptical that users sending Bitcoin to themselves
> (coinjoin) could ever be more incentive-compatible than fast-paced commerce
> & priority competition. I am also skeptical that mempoolfullrbf actually
> solves LN risks any better than opt-in RBF by default by LN implementations
> and wallets.
>
> Further, zero-conf support reduces friction for LN adoption by allowing us
> to make instant, seamless UX within wallets when onboarding, rebalancing,
> and splicing.
>
> --
> John Carvalho
> CEO, Synonym.to <http://synonym.to/>
>
>
>
>>
>> Date: Fri, 2 Dec 2022 17:35:39 -0500
>> From: Antoine Riard <antoine.riard at gmail.com>
>> To: Bitcoin Protocol Discussion
>>         <bitcoin-dev at lists.linuxfoundation.org>
>> Subject: [bitcoin-dev] Fwd: [Opt-in full-RBF] Zero-conf apps in
>>         immediate       danger
>> Message-ID:
>>         <
>> CALZpt+HFFwY4XECNZj3XLqnaumPeDjrwvnCsRa3vsGQfuXn8wA at mail.gmail.com>
>> Content-Type: text/plain; charset="utf-8"
>>
>> Hi Daniel,
>>
>> >From my understanding of GAP600, you're operating a zero-conf risk
>> analysis
>> business, which is integrated and leveraged by payment
>> processors/liquidity
>> providers and merchants. A deployment of fullrbf by enough full-node
>> operators and a subset of the mining hashrate would lower the cost of
>> double-spend attack by lamda users, therefore increasing the risk exposure
>> of your users. This increased risk exposure could lead you to alter the
>> acceptance of incoming zero-conf transactions, AFAICT in a similar
>> reasoning as exposed by Bitrefill earlier this year [0].
>>
>> About the statistics you're asking for considerations, few further
>> questions, on those 1.5M transactions per month, a) how many are
>> Bitcoin-only (as I understand to be multi-cryptocurrencies), b) how many
>> are excluded from zeroconf due to factors like RBF, long-chain of
>> unconfirmed ancestors or too high-value and c) what has been the average
>> feerate (assuming a standard size of 200 bytes) ?
>>
>> My personal position on fullrbf is still the same as expressed in #26525
>> [1]. As a community, I think we still don't have conceptual consensus on
>> deploying full-rbf, nor to remove it. In the direction of removing the
>> current option from Bitcoin Core, I think the prerequisite to address are
>> the qualification of enough economic flows at risk and the presence of a
>> sizable loss in miners income. Beyond that, I think there is still the
>> open
>> question if we (we, as the Bitcoin protocol development community, with
>> all
>> its stakeholders) should restrain user choice in policy settings in the
>> name of preserving mining income and established use-case stability.
>>
>> To recall, the original technical motivation of this option, and the wider
>> smoother deployment was to address a DoS vector affecting another class of
>> use-case: multi-party transactions like coinjoin and contracting protocols
>> like Lightning [2] [3]. All of them expect to generate economic flows and
>> corresponding mining income. Since then, alternative paths to solve this
>> DoS vector have been devised, all with their own trade-offs and conceptual
>> issues [4] [5].
>>
>> Best,
>> Antoine
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20221205/96090561/attachment-0001.html>

From eloyesp at gmail.com  Tue Dec  6 04:48:07 2022
From: eloyesp at gmail.com (El_Hoy)
Date: Tue, 6 Dec 2022 01:48:07 -0300
Subject: [bitcoin-dev] Announcement: Full-RBF Miner Bounty
In-Reply-To: <CAJowKgLdsGcSyR7znhLpmMe6cPgLR9ivTiBcXx3pZPLBDUkR9A@mail.gmail.com>
References: <Y2I3w8O5X55sD/3C@petertodd.org> <Y2qc7Ubc5xtJhxGw@petertodd.org>
 <Y3MlSE7AWkBgiCyr@erisian.com.au> <Y3OljVGQbZ/Wj8T6@petertodd.org>
 <CAPapNH3NEBP2-GVZZ_75K-QU0psGdAHyjdAus-vfq-0jffTstg@mail.gmail.com>
 <d1ea77a4-370f-d7e3-82c2-765c9fc18aa3@protonmail.com>
 <CAJowKgLdsGcSyR7znhLpmMe6cPgLR9ivTiBcXx3pZPLBDUkR9A@mail.gmail.com>
Message-ID: <CAPapNH243Doj1n4Y9icUCMBqpBn_K6S0XmFxqVEAMUtEPSKHBQ@mail.gmail.com>

On Mon, Dec 5, 2022 at 3:58 PM Erik Aronesty via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> note: if it was possible to enforce this, we wouldn't need proof of work
> at all.   since it isn't possible, proof of work is strictly necessary.
>

If making empty statements were enough to convince people, we would not
need to give good arguments to back our claims. Proof of work is "strictly
necessary" to build blocks that are accepted by the consensus rules, that
are enforced by the validation nodes that propagate those blocks. If there
are multiple valid blocks that are generated close enough and some of them
propagate faster than the others, then validation nodes add some economic
incentive against certain practices. Miners will obviously choose what
validation nodes enforce or they will lose money.

On Mon, Dec 5, 2022 at 3:58 PM Michael Folkson via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

>
> Daniel Lipshitz has been working on BSV apparently [0] so I guess anything
> is possible with him.(...)
>
--
> Michael Folkson


You are apparently making an Ad Hominem attack [1] so I guess your comment
is not serious. Thanks for the context anyway.

[1]: https://en.wikipedia.org/wiki/Ad_hominem

--- Eloy


> On Mon, Dec 5, 2022 at 9:53 AM Rijndael via bitcoin-dev <
> bitcoin-dev at lists.linuxfoundation.org> wrote:
>
>> Good morning,
>>
>> That sounds like a very dangerous mode of operation. You can already hand
>> a transaction to a miner privately. I hand a transaction to a miner with
>> some reasonable fee, and then I go and broadcast a different transaction
>> with a minimal fee that spends the same inputs. The whole network
>> (including the miner I handed the tx to) could all be running with a strict
>> first-seen mempool policy, but we can still have a situation where the
>> miner creates a block with a different transaction from what you see in
>> your mempool. If anytime this happens, the nodes running your proposed rule
>> drop the block, then anyone can fork those nodes off the network whenever
>> they want.
>>
>> Even outside of adversarial settings, Bitcoin doesn't (and doesn't
>> attempt to) promise consistency across mempools. Making a consensus rule
>> that enforces mempool consistency is a recipe for (unintended?)
>> chainsplits.
>>
>> - rijndael
>>
>>
>> On 12/5/22 7:20 AM, El_Hoy via bitcoin-dev wrote:
>>
>> The only option I see against the attack Peter Todd is doing to opt-in
>> RBF and 0Conf bitcoin usage is working on a bitcoin core implementation
>> that stops propagation of full-rbf replaced blocks. Running multiple of
>> such nodes on the network will add a risk to miners that enable full-rbf
>> that would work as an incentive against that.
>>
>> Obviously that would require adding an option on bitcoin core (that is
>> not technically but politically difficult to implement as Petter Todd
>> already have commit access to the main repository).
>>
>> That said, a sufficiently incentivized actor (like Daniel Lipshitz or
>> Muun wallet developers) could work on a fork and run several nodes with
>> such functionality. As far as I understand the percolation model, with 10
>> to 20 nodes running such a rule would create a significant risk for
>> full-rbf miners.
>>
>> Regards.
>>
>> ---  Eloy
>>
>>
>> On Tue, Nov 15, 2022 at 11:43 AM Peter Todd via bitcoin-dev <
>> bitcoin-dev at lists.linuxfoundation.org> wrote:
>>
>>> On Tue, Nov 15, 2022 at 03:36:08PM +1000, Anthony Towns via bitcoin-dev
>>> wrote:
>>> > On Tue, Nov 08, 2022 at 01:16:13PM -0500, Peter Todd via bitcoin-dev
>>> wrote:
>>> > > FYI I've gotten a few hundred dollars worth of donations to this
>>> effort, and
>>> > > have raised the reward to about 0.02 BTC, or $400 USD at current
>>> prices.
>>> >
>>> > Seems like this has been mostly claimed (0.014btc / $235, 9238sat/vb):
>>>
>>> I'm turning it back on when (if) the mempool settles down. I've got more
>>> than
>>> enough donations to give another run at it (the majority was donated
>>> privately
>>> FWIW). There's a risk of the mempool filling up again of course; hard to
>>> avoid
>>> that.
>>>
>>> Right now of course it's really easy to double spend with the obvious
>>> low-fee/high-fee method as the min relay fee keeps shifting.
>>>
>>> >
>>> https://mempool.space/tx/397dcbe4e95ec40616e3dfc4ff8ffa158d2e72020b7d11fc2be29d934d69138c
>>> >
>>> > The block it was claimed in seems to have been about an hour after the
>>> > default mempool filled up:
>>> >
>>> > https://twitter.com/murchandamus/status/1592274621977477120
>>> >
>>> > That block actually seems to have included two
>>> > alice.btc.calendar.opentimestamps.org txs, the other paying $7.88
>>> > (309sat/vb):
>>> >
>>> >
>>> https://mempool.space/tx/ba9670109a6551458d5e1e23600c7bf2dc094894abdf59fe7aa020ccfead07cf
>>>
>>> The second is because I turned down the full-rbf reward to more normal
>>> fee
>>> levels. There's also another full-rbf double-spend from the Bob
>>> calendar, along
>>> the same lines:
>>> 7e76b351009326a574f3120164dbbe6d85e07e04a7bbdc40f0277fcb008d2cd2
>>>
>>> I double-spent the txin of the high fee tx that got mined. But I
>>> mistakenly had
>>> RBF enabled in that double-spend, so while it propagated initially, I
>>> believe
>>> it was replaced when something (someone?) rebroadcast the high-fee
>>> 397dcb tx.
>>>
>>> > Timeline (utc) to me looks like:
>>> >
>>> >  - 13:12 - block 763148 is mined: last one that had a min fee <
>>> 1.5sat/vb
>>> >  - 13:33 -
>>> f503868c64d454c472859b793f3ee7cdc8f519c64f8b1748d8040cd8ce6dc6e1
>>> >            is announced and propogates widely (1.2sat/vb)
>>> >  - 18:42 -
>>> 746daab9bcc331be313818658b4a502bb4f3370a691fd90015fabcd7759e0944
>>> >            is announced and propogates widely (1.2sat/vb)
>>> >  - 21:52 - ba967010 tx is announced and propogates widely, since
>>> >            conflicting tx 746daab9 has been removed from default
>>> >          mempools
>>> >  - 21:53 - murch tweets about default mempool filling up
>>> >  - 22:03 - 397dcbe4 tx is announced and propogates widely, since
>>> >            conflicting tx f503868 has already been removed from default
>>> >          mempools
>>>
>>> Is that 22:03 time for 397 from your node's logs? It was originally
>>> announced
>>> hours earlier. From one of my full-rbf nodes:
>>>
>>>     2022-11-14T14:08:37Z [mempool] replacing tx
>>> 764867062b67fea61810c3858d587da83a28290545e882935a32285028084317 with
>>> 397dcbe4e95ec40616e3dfc4ff8ffa158d2e72020b7d11fc2be29d934d69138c for
>>> 0.00468 additional fees, -1 delta bytes
>>>
>>> >  - 22:35 - block 763189 is mined
>>> >  - 22:39 - block 763190 is mined
>>> >  - 23:11 - block 763191 is mined
>>> >  - 23:17 - block 763192 is mined including 397dcbe4
>>> >
>>> > miningpool.observer reports both 397dcbe4 and ba967010 as missing in
>>> the
>>> > first three blocks, and gives similar mempool ages for those txs to
>>> what
>>> > my logs report:
>>> >
>>> >
>>> https://miningpool.observer/template-and-block/0000000000000000000436aba59d8430061e0e50592215f7f263bfb1073ccac7
>>> >
>>> https://miningpool.observer/template-and-block/00000000000000000005600404792bacfd8a164d2fe9843766afb2bfbd937309
>>> >
>>> https://miningpool.observer/template-and-block/00000000000000000004a3073f58c9eae40f251ea7aeaeac870daeac4b238fd1
>>> >
>>> > That presumably means those pools (AntPool twice and "unknown") are
>>> > running with large mempools that didn't kept the earlier 1.2sat/vb txs.
>>>
>>> To be clear, you think that AntPool and that other exchange is running
>>> with a
>>> larger than normal max mempool size limit? You mean those miners *did*
>>> keep the
>>> earlier 1.2sat/vb tx?
>>>
>>> > The txs were mined by Foundry:
>>> >
>>> >
>>> https://miningpool.observer/template-and-block/00000000000000000001382a226aedac822de80309cca2bf1253b35d4f8144f5
>>> >
>>> > This seems to be pretty good evidence that we currently don't have any
>>> > significant hashrate mining with fullrbf policies (<0.5% if there was a
>>> > high fee replacement available prior to every block having been mined),
>>> > despite the bounty having been collected.
>>>
>>> Oh, we can put much lower bounds on that. I've been running OTS
>>> calendars with
>>> full-rbf replacements for a few months without clear evidence of a
>>> full-rbf
>>> replacement.  While there was good reason to think some miners were
>>> mining
>>> full-rbf before a few years back, they probably didn't bother to reapply
>>> their
>>> patches each upgrade. `mempoolfullrbf=1` is much simpler to use.
>>>
>>> --
>>> https://petertodd.org 'peter'[:-1]@petertodd.org
>>> _______________________________________________
>>> bitcoin-dev mailing list
>>> bitcoin-dev at lists.linuxfoundation.org
>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>>
>> _______________________________________________
>> bitcoin-dev mailing list
>> bitcoin-dev at lists.linuxfoundation.org
>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20221206/27143f53/attachment-0001.html>

From robinlinus at protonmail.com  Thu Dec  8 01:14:54 2022
From: robinlinus at protonmail.com (Robin Linus)
Date: Thu, 08 Dec 2022 01:14:54 +0000
Subject: [bitcoin-dev] Nondeterministic Programming and Hints in Bitcoin
	Script
Message-ID: <lMxqB4zaKr33YEkv0ZykaxZa7r-yvR1rSC17rOBCRYELtYfnlUq62tyVMw0vrG1cFBeEDOMGx4qB_un0N7rMmKRdA9c8WdlvlCCPefN2f3Y=@protonmail.com>

TL;DR: Bitcoin Script supports a lot more opcodes than previously assumed. We just have to apply nondeterministic programming, which is a concept from ZKP circuit design.

Good morning Mailinglist,

the Taproot update dropped the restrictions for script sizes, so in theory a TX can now have a script with millions of instructions. While exploring the new possibilities I noticed that we can apply to Bitcoin Script a programming concept from zero-knowledge proofs named nondeterministic programming. Whenever possible, the prover computes the result of an expensive operation and then gives that result to the verifier, who only verifies the correctness of the result, which is often much more efficient than computing it.

For example, we can represent integer division efficiently in Bitcoin Script if the result is given to us in the unlocking script. This is because multiplication with a constant is relatively cheap.

Here is a most simple example implementing integer division by 2. We use that multiplication by 2 is simply OP_DUP OP_ADD, which is cheap.

```

# Integer division by 2 with the help of a hint
# In this example, we divide 119 by 2.
# In the unlocking script the prover provides the result
# as a hint 119//2 = 59, which we verify.

btcdeb "[

  119             # Some arbitrary input is on the stack
  OP_OVER         # Copy the hint to the top of the stack

  OP_DUP OP_ADD   # Multiply the hint by 2
  OP_SUB          # Subtract that from the 119

  # Now the remainder should be on the stack
  # We verify that it is exactly 0 or 1

  OP_DUP          # Make a copy
  OP_0NOTEQUAL    # Returns 0 if the input is 0. 1 otherwise.
  OP_EQUALVERIFY

# ]" 59           # The hint provided is 59 = 119/2

```

Here you can find more complex examples of opcodes using hints:
https://github.com/coins/bitcoin-scripts/blob/master/composite-opcodes.md#op_2div

Here is even a script for a bitwise rotation of a 32-bit word. It requires about 100 instructions. I think that suggests it might be possible to implement something like sha256 in about 200-300k opcodes.
https://github.com/coins/bitcoin-scripts/blob/master/op_rotate.md

Furthermore, I wondered if it might be possible to implement a ZKP verifier in Bitcoin script. However, that would probably need some hack to make multiplications much cheaper.

Maybe others also find it exciting to explore the new solution spaces enabled by the Taproot update and maybe nondeterministic programming inspires some new ways of thinking about Bitcoin Script.

Have a good day everyone!
Robin
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20221208/ee09d2fb/attachment.html>

From angus at toaster.cc  Fri Dec  9 15:58:37 2022
From: angus at toaster.cc (angus)
Date: Fri, 09 Dec 2022 15:58:37 +0000
Subject: [bitcoin-dev] [Opt-in full-RBF] Zero-conf apps in immediate danger
	(angus)
In-Reply-To: <CAJowKgJQJvsZQgTjEqXaz6DVw_iG4JfXCL8s0G7v2o3O453Ajg@mail.gmail.com>
References: <mailman.48662.1670246787.956.bitcoin-dev@lists.linuxfoundation.org>
 <CAHTn92wri-edhivrtqZCoEzAPEmwZFap12mM4yzxgp77O-+JYA@mail.gmail.com>
 <CAJowKgJQJvsZQgTjEqXaz6DVw_iG4JfXCL8s0G7v2o3O453Ajg@mail.gmail.com>
Message-ID: <j5xgF7aMEAtOtWJ1CfZv-gRIw-gUUe8jMvuZzY9z3K9cRNo91ApiXbtaoXdHdSx61sMmyEHPZu8BWvSSszEAmV0v-g-k2-YTNRFim3hEljw=@toaster.cc>

I think the fundamental disagreement here that's causing the controversy and impasse is this:



Those in favour of Full RBF see trusting and relying on predictable mempool policy as a fundamentally flawed?bad idea. Node policy is not a consensus rule - a miner has always been allowed to produce a block in the way a Full RBF node now would. An otherwise valid block that contains a tx that your not-full-RBF node ignored because it double-spent an earlier lower fee tx that didn't opt in to RBF is still a valid block. Knowing this, we conclude that it doesn't matter how useful or widely used Zero Conf is, it is fundamentally unsafe and should be?actively discouraged, and changing mempool policy is a way to do this. The existence of Lightning as an alternative for immediate settlement makes this case stronger.



(As I see it) those that oppose Full RBF and want Zero Conf use to continue argue that node mempool policy?can?and?has?been relied upon for a long time already, and argue (rightly) that Zero Conf acceptance is already widely used and useful for both customers and merchants. Further arguing that Full RBF can be sucessfully unshipped, which requires that majority of node operators don't particularly care about it. Lastly, that neither miners nor users have an economic incentive to switch to Full RBF from the current core First-Seen policy. (Am I missing something else?)



---



I have sympathy for the utility argument, but to me it's completely overpowered by the "node policy is not consensus and not trustworthy" argument. Zero Conf acceptance rests on trusting that nodes are running with a first-seen policy. Just because this has worked out OK so far, doesn't mean that you won't get got bigtime in the future. You can accept this risk if you want to, but it shouldn't be a soft-rule that everyone else running a node should please help reduce that risk for you.

Sure, if I'm selling something on eBay or whatever for 100k sats and someone wants to pay in BTC in person, I'll accept with zero confirmations because there's a degree of trust and the risk isn't unbearable. If I'm accepting BTC as a company though, no, I'm not considering zero-confirmation transactions as settled.



I don't think the economic incentive argument currently matters all that much - miners want to maximise fees, users want to minimise, it's hard to tell which policy would have the higher overall fees for miners, and who wins miners-vs-users. This would also seem to depend on how wallets do or don't make use of the new RBF option (particularly hard for multisig). There is still an obvious incentive for someone to double-spend attack a Zero-Conf merchant, though.



I could be convinced to reverse my stance and oppose Full RBF if there was a strong economic argument that miners (better still, miners and users) should oppose it, because that would imply first-seen is incentive aligned. Aligning policy with incentives feels like the correct principle.



But for now, I want to run a Full RBF node because I see it as ultimately making Bitcoin stronger. It eliminates a use-case that takes risk. Accepting Zero Conf changes from "hrm, you shouldn't really do that but it works most of the time" to "no, really don't do that, you will probably lose money". Perhaps this is actually somewhat "vindictive, and perverse" as John said, but Bitcoin is money for enemies.



Thanks,

Angus
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20221209/12161097/attachment-0001.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 249 bytes
Desc: OpenPGP digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20221209/12161097/attachment-0001.sig>

From b10c at b10c.me  Fri Dec  9 16:04:05 2022
From: b10c at b10c.me (0xB10C)
Date: Fri, 9 Dec 2022 17:04:05 +0100
Subject: [bitcoin-dev] Announcement: Full-RBF Miner Bounty
In-Reply-To: <Y3MlSE7AWkBgiCyr@erisian.com.au>
References: <Y2I3w8O5X55sD/3C@petertodd.org> <Y2qc7Ubc5xtJhxGw@petertodd.org>
 <Y3MlSE7AWkBgiCyr@erisian.com.au>
Message-ID: <f146ca66-a611-f129-ae11-6907a7333d10@b10c.me>

Hi AJ and list,

> This seems to be pretty good evidence that we currently don't have any
> significant hashrate mining with fullrbf policies (<0.5% if there was a
> high fee replacement available prior to every block having been mined),
> despite the bounty having been collected.

For further monitoring, I've set-up a mempoolfullrbf=1 node and are
logging replacement events with [0]. I filter the full-RBF replacements
and list the replaced and replacement transactions here:

https://fullrbf.mempool.observer/

This also tries to find out if either the replaced or replacement
transaction has been included in a block upon loading the site. The
yellow mined-in-badges link to the block on miningpool.observer to a)
show the mining pool (if known) and b) see if the (mempoolfullrbf=0)
miningpool-observer node thinks this transaction is extra / conflicts
with the mined transaction. This should be the case if a full-RBF
replacement transaction is mined.

Over the last few days, I has mostly seen OP_RETURN transactions
(presumably mostly by OpenTimestamps; but I haven't checked closely) and
a few other non-OP_RETURN transactions. None of the replacement
transactions have been mined yet.

[0]: https://github.com/bitcoin/bitcoin/pull/26531#issuecomment-1333832906

Best,
0xB10C
-------------- next part --------------
A non-text attachment was scrubbed...
Name: OpenPGP_0x188CBB2648416AD5.asc
Type: application/pgp-keys
Size: 6880 bytes
Desc: OpenPGP public key
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20221209/4c646fa1/attachment-0001.bin>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: OpenPGP_signature
Type: application/pgp-signature
Size: 833 bytes
Desc: OpenPGP digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20221209/4c646fa1/attachment-0001.sig>

From pete at petertodd.org  Fri Dec  9 21:16:20 2022
From: pete at petertodd.org (Peter Todd)
Date: Fri, 9 Dec 2022 16:16:20 -0500
Subject: [bitcoin-dev] Announcement: Full-RBF Miner Bounty
In-Reply-To: <f146ca66-a611-f129-ae11-6907a7333d10@b10c.me>
References: <Y2I3w8O5X55sD/3C@petertodd.org> <Y2qc7Ubc5xtJhxGw@petertodd.org>
 <Y3MlSE7AWkBgiCyr@erisian.com.au>
 <f146ca66-a611-f129-ae11-6907a7333d10@b10c.me>
Message-ID: <Y5OlpAi3wHPKxxkx@petertodd.org>

On Fri, Dec 09, 2022 at 05:04:05PM +0100, 0xB10C via bitcoin-dev wrote:
> Hi AJ and list,
> 
> > This seems to be pretty good evidence that we currently don't have any
> > significant hashrate mining with fullrbf policies (<0.5% if there was a
> > high fee replacement available prior to every block having been mined),
> > despite the bounty having been collected.
> 
> For further monitoring, I've set-up a mempoolfullrbf=1 node and are
> logging replacement events with [0]. I filter the full-RBF replacements
> and list the replaced and replacement transactions here:

Question: are you taking any special steps to peer that node with other
full-rbf nodes? I see you are in fact getting all the replacements I'd expect
you to get, so you must have good peering. I'm curious what it took (if
anything) to achieve that. Also, is that node accepting incoming connections?

> Over the last few days, I has mostly seen OP_RETURN transactions
> (presumably mostly by OpenTimestamps; but I haven't checked closely) and
> a few other non-OP_RETURN transactions. None of the replacement
> transactions have been mined yet.

They are mostly OpenTimestamps transactions; I checked against the records from
my calendars and didn't find any OP_Return tx that wasn't one of mine.

The two calendars making full-rbf replacements are:

https://alice.btc.calendar.opentimestamps.org/
https://bob.btc.calendar.opentimestamps.org/

The status pages currently link to https://mempool.nixbitcoin.org, which is
also running mempoolfullrbf=1 As you can see, I've started the full-rbf bounty
again on Alice.

https://blockstream.info also enabled full-rbf a few days ago. But currently
propagation to their nodes is spotty, so replacements don't always show up.

-- 
https://petertodd.org 'peter'[:-1]@petertodd.org
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 833 bytes
Desc: not available
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20221209/1104ff3e/attachment.sig>

From b10c at b10c.me  Sat Dec 10 11:59:05 2022
From: b10c at b10c.me (0xB10C)
Date: Sat, 10 Dec 2022 12:59:05 +0100
Subject: [bitcoin-dev] Announcement: Full-RBF Miner Bounty
In-Reply-To: <Y5OlpAi3wHPKxxkx@petertodd.org>
References: <Y2I3w8O5X55sD/3C@petertodd.org> <Y2qc7Ubc5xtJhxGw@petertodd.org>
 <Y3MlSE7AWkBgiCyr@erisian.com.au>
 <f146ca66-a611-f129-ae11-6907a7333d10@b10c.me>
 <Y5OlpAi3wHPKxxkx@petertodd.org>
Message-ID: <ff27975a-78b0-f697-8e88-0d0e5e5dddb6@b10c.me>

On 12/9/22 22:16, Peter Todd wrote:
>> For further monitoring, I've set-up a mempoolfullrbf=1 node and are
>> logging replacement events with [0]. I filter the full-RBF replacements
>> and list the replaced and replacement transactions here:
> Question: are you taking any special steps to peer that node with other
> full-rbf nodes? I see you are in fact getting all the replacements I'd expect
> you to get, so you must have good peering. I'm curious what it took (if
> anything) to achieve that. Also, is that node accepting incoming connections?
No special steps like #25600 preferential peering or similar. I suspect
I was lucky to have a full-RBF peer (or more than one) from the start or
there are more mempoolfullrbf=1 nodes than I'd think on the network. The
node accepts incoming connections on a non-default port and currently
has 45 inbound slots filled up. Mostly buy v23.0 and v24.0 nodes though,
as older Bitcoin Core version usually don't connect to non-default port
peers.
>> Over the last few days, I has mostly seen OP_RETURN transactions
>> (presumably mostly by OpenTimestamps; but I haven't checked closely) and
>> a few other non-OP_RETURN transactions. None of the replacement
>> transactions have been mined yet.
> They are mostly OpenTimestamps transactions; I checked against the records from
> my calendars and didn't find any OP_Return tx that wasn't one of mine.
>
> The two calendars making full-rbf replacements are:
>
> https://alice.btc.calendar.opentimestamps.org/
> https://bob.btc.calendar.opentimestamps.org/
>
> The status pages currently link to https://mempool.nixbitcoin.org, which is
> also running mempoolfullrbf=1 As you can see, I've started the full-rbf bounty
> again on Alice.
>
> https://blockstream.info also enabled full-rbf a few days ago. But currently
> propagation to their nodes is spotty, so replacements don't always show up.

Since my last post, five full-RBF replacements have been mined in two
blocks:

766733 by Luxor:

??? 41d497d64bfa71390408ddb65c478a5400c721c71336fa51509929f19a5c8aa5 1x
P2WPKH in -> 1x P2WPKH out (12.50 sat/vByte)
??? 3061eec0b57346c01419db091ce3af16094e796db91f4f3eb9b7ad42ce8f6e25
OpenTimestamps Alice ~170 USD bounty (6424.72 sat/vByte)
??? 9000f73e818af9019d26b2edde6e8e11f67d6d6f35916dabd808bbdd314ce807 1x
P2WPKH in -> 1x P2WPKH out? (22.73 sat/vByte)
??? 3843e93a0ec5cf09d757fd497fdda8f15f5094c64b149624c5d343b24e675093
OpenTimestamps Bob (108.25 sat/vByte)

It seems like Luxor (5.5 EH/s or 2.11% network hashrate in the last 7
days)[0] might have mempoolfullrbf=1 enabled.

766736 by AntPool:

?? 3c96fe8136de98a91d0add7e51fcacef813071d43feccc51987dc8378f6913e1
OpenTimestamps Bob (4.25 sat/vByte)

I'm not too sure if AntPool has full RBF enabled based on this one
transaction. 3c96fe.. is the first replacement of
903f03b16e69f9f3fc6bb8d008338da37efc3f235fc5091ca767baae96834d95 (1.19
sat/vByte) which they might not have seen (?). They have nearly 20% of
the network hashrate [0], so if the have mempoolfullrbf=1 set, we should
see them include more full-RBF replacements soonish. There was also
1467e3dbf9e9f3d9cd8e7cc4009cd9c1457e164f0dd87525c72e921d7a27ab1f which
bumped 3c96fe.. by 1.53 sat/vByte, but was only broadcast shortly before
AntPool found the block. The might not have seen it yet.

I've also updated the site to allow only showing the replacements that
were mined.

[0]: https://btc.com/stats/pool?pool_mode=week
for future reference: https://archive.ph/TARhP

-------------- next part --------------
A non-text attachment was scrubbed...
Name: OpenPGP_0x188CBB2648416AD5.asc
Type: application/pgp-keys
Size: 6880 bytes
Desc: OpenPGP public key
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20221210/7464f9d2/attachment.bin>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: OpenPGP_signature
Type: application/pgp-signature
Size: 833 bytes
Desc: OpenPGP digital signature
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20221210/7464f9d2/attachment.sig>

From john at synonym.to  Sat Dec 10 12:10:24 2022
From: john at synonym.to (John Carvalho)
Date: Sat, 10 Dec 2022 12:10:24 +0000
Subject: [bitcoin-dev] =?utf-8?q?Rethinking_=E2=80=9CIncentive_Compatibili?=
	=?utf-8?q?ty=E2=80=9D_Within_the_Bitcoin_Protocol?=
Message-ID: <CAHTn92zBcMp7Fn27aCV75V7GEzUcP2-cDcGN+CKe5+SRgyt2ow@mail.gmail.com>

As we debate mempoolfullrbf, and I familiarize myself with related PRs from
engineers trying to reign in all of the possible behaviors that make it
inconsistent, I can?t help but think about how I see people using the term
?incentive-compatible? and how it seems to be awfully presumptive.

The idea that a single Bitcoin transaction can be ?incentive-compatible? by
simply restricting it to having a higher fee or fee rate is theoretical,
likely narrow, and not totally objective. RBF is inherently a
fee-minimization tool, which as a concept, as I understand
?incentive-compatibility? to be about miners in this context, makes RBF to
be anti-incentives; miners are fee maximizers.

Miners want the most fees per block, and per lifetime, do they not? If
miners, and the mempool, are prioritizing for the smallest txns with the
highest fees, over the longest acceptable amount of time, this may conflict
with extra-mempool behaviors that result in more txns per block / per
lifetime.

If this isn?t making sense yet, let me summarize by how such a problem
would express: a per-transaction fee-minimized, fully replaceable mempool
as policy, that appears to always require the highest fee per txn, but
ultimately includes less txns per block and less fees per lifetime.
Basically, less use cases, less users, less txns ? all to enforce a
misunderstood theory and predictive speculation of what people want out of
the system and what miners will do about it.

Simply, we probably want designs that fill blocks, and we don?t need to do
anything at all to facilitate bidding on a use case like replacement.

Bidding does not require protocol enforcement, it is miner-subjective. So
why are we pursuing it? Why do we even have RBF? Why are we trying to clean
up all of the mess RBF creates with more and more code? If bidding is
already accepted as incentive-compatible, and Bitcoin already allows
setting a fee, then replacement requires no special code at all.

I would think a holistic definition of what is incentive-compatible would
be something more like what is ?market compatible? and enables the
complementary goals & incentives of every user in the system to make it
thrive.

It has been shown that users control Bitcoin (UASF) and thus ultimately
miners would be incentivized to do what users want, up to the point of
inability or loss. Correct?

So, in contrast, how would the opposite, a user-compatible design, express?
Well, I think the idea of txns being able to signal intent and desired
behavior is more interesting (more useful) than a mempool that overrides
all intent with RBF, and possibly more incentive-compatible than
mempoolfullrbf as concept.

Since we can?t be sure what the market wants, but we can be sure that the
more users we have, making the most possible txns, at the highest possible
prices, will yield the most valuable Bitcoin, and thus the most hashpower,
we could entertain giving users the most ways to express their intent, the
most flexibility.

The most basic design would be to simply have no mempool policy at all, and
let market incentives emerge on their own, but we have a status quo to
consider, and most users do not have the technical expertise to express
their own policies with misc patches and hacks of their Bitcoin Core
software.

I know this is a bit of a high-level abstract perspective, but I think it
is important to respect such dynamics when making smaller decisions. It
certainly is not our charge to prioritize what miners want any more than
any other user type, nor is it within our ability to predict the future or
fully model incentives of all players across all use cases.

I know some of you may scoff at my bias for use cases like zero-conf, but
what I am trying to convey is a possible folly in active management,
speculation, and misapplied game theory that may permeate many Bitcoin Core
decisions and designs, even beyond the mempoolrbf / zero-conf debate.

So, what to do?

?

John Carvalho
CEO, Synonym.to
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20221210/e221c0b5/attachment.html>

From pete at petertodd.org  Sat Dec 10 18:07:18 2022
From: pete at petertodd.org (Peter Todd)
Date: Sat, 10 Dec 2022 13:07:18 -0500
Subject: [bitcoin-dev] Announcement: Full-RBF Miner Bounty
In-Reply-To: <ff27975a-78b0-f697-8e88-0d0e5e5dddb6@b10c.me>
References: <Y2I3w8O5X55sD/3C@petertodd.org> <Y2qc7Ubc5xtJhxGw@petertodd.org>
 <Y3MlSE7AWkBgiCyr@erisian.com.au>
 <f146ca66-a611-f129-ae11-6907a7333d10@b10c.me>
 <Y5OlpAi3wHPKxxkx@petertodd.org>
 <ff27975a-78b0-f697-8e88-0d0e5e5dddb6@b10c.me>
Message-ID: <Y5TK1kaWtBnz6NqX@petertodd.org>

On Sat, Dec 10, 2022 at 12:59:05PM +0100, 0xB10C wrote:
> On 12/9/22 22:16, Peter Todd wrote:
> >> For further monitoring, I've set-up a mempoolfullrbf=1 node and are
> >> logging replacement events with [0]. I filter the full-RBF replacements
> >> and list the replaced and replacement transactions here:
> > Question: are you taking any special steps to peer that node with other
> > full-rbf nodes? I see you are in fact getting all the replacements I'd expect
> > you to get, so you must have good peering. I'm curious what it took (if
> > anything) to achieve that. Also, is that node accepting incoming connections?
> No special steps like #25600 preferential peering or similar. I suspect
> I was lucky to have a full-RBF peer (or more than one) from the start or
> there are more mempoolfullrbf=1 nodes than I'd think on the network. The
> node accepts incoming connections on a non-default port and currently
> has 45 inbound slots filled up. Mostly buy v23.0 and v24.0 nodes though,
> as older Bitcoin Core version usually don't connect to non-default port
> peers.

Interesting! I'm running a full-rbf node that is (manually) connected to a few
hundred v24.0 nodes to ensure good propagation. But I'm only connected to
standard ports (I'm reusing the DNS seed list). So you must have a full-rbf
peer purely by luck.

Could you please grep your logs for which peer(s) are sending you replacements?
I don't want to know the IP addresses. I'm just curious if you have exactly one
full-rbf peer or more.

BTW I have Antoine's preferential peering patch ported to v24.0, along with a
few other minor fixes:

https://github.com/petertodd/bitcoin/tree/full-rbf-v24.0

I think it'd be reasonable for you to run that, as what's more interesting is
the replacements, not whether or not propagation happens to work out of the
box.

> > https://blockstream.info also enabled full-rbf a few days ago. But currently
> > propagation to their nodes is spotty, so replacements don't always show up.
> 
> Since my last post, five full-RBF replacements have been mined in two
> blocks:
> 
> 766733 by Luxor:
> 
> ??? 41d497d64bfa71390408ddb65c478a5400c721c71336fa51509929f19a5c8aa5 1x
> P2WPKH in -> 1x P2WPKH out (12.50 sat/vByte)
> ??? 3061eec0b57346c01419db091ce3af16094e796db91f4f3eb9b7ad42ce8f6e25
> OpenTimestamps Alice ~170 USD bounty (6424.72 sat/vByte)
> ??? 9000f73e818af9019d26b2edde6e8e11f67d6d6f35916dabd808bbdd314ce807 1x
> P2WPKH in -> 1x P2WPKH out? (22.73 sat/vByte)
> ??? 3843e93a0ec5cf09d757fd497fdda8f15f5094c64b149624c5d343b24e675093
> OpenTimestamps Bob (108.25 sat/vByte)
> 
> It seems like Luxor (5.5 EH/s or 2.11% network hashrate in the last 7
> days)[0] might have mempoolfullrbf=1 enabled.
> 
> 766736 by AntPool:
> 
> ?? 3c96fe8136de98a91d0add7e51fcacef813071d43feccc51987dc8378f6913e1
> OpenTimestamps Bob (4.25 sat/vByte)
> 
> I'm not too sure if AntPool has full RBF enabled based on this one
> transaction. 3c96fe.. is the first replacement of
> 903f03b16e69f9f3fc6bb8d008338da37efc3f235fc5091ca767baae96834d95 (1.19
> sat/vByte) which they might not have seen (?). They have nearly 20% of
> the network hashrate [0], so if the have mempoolfullrbf=1 set, we should
> see them include more full-RBF replacements soonish. There was also
> 1467e3dbf9e9f3d9cd8e7cc4009cd9c1457e164f0dd87525c72e921d7a27ab1f which
> bumped 3c96fe.. by 1.53 sat/vByte, but was only broadcast shortly before
> AntPool found the block. The might not have seen it yet.

So according to my logs the replacement that AntPool mined, 3c96fe813, was the
third replacement in a row of four replacements:

2022-12-10T07:46:09Z [mempool] AcceptToMemoryPool: peer=<snip>: accepted 903f03b16e69f9f3fc6bb8d008338da37efc3f235fc5091ca767baae96834d95 (poolsz 6320 txn, 90818 kB)
2022-12-10T07:47:14Z [mempool] replacing tx 903f03b16e69f9f3fc6bb8d008338da37efc3f235fc5091ca767baae96834d95 with f8bef985457f9e5bbf5b583e33cca43d515a3a73e1bb6a2c5a11646632123aa2 for 0.00000234 additional fees, 0 delta bytes
2022-12-10T08:01:09Z [mempool] replacing tx f8bef985457f9e5bbf5b583e33cca43d515a3a73e1bb6a2c5a11646632123aa2 with 3c96fe8136de98a91d0add7e51fcacef813071d43feccc51987dc8378f6913e1 for 0.00000234 additional fees, 0 delta bytes
2022-12-10T08:06:06Z [mempool] replacing tx 3c96fe8136de98a91d0add7e51fcacef813071d43feccc51987dc8378f6913e1 with 1467e3dbf9e9f3d9cd8e7cc4009cd9c1457e164f0dd87525c72e921d7a27ab1f for 0.00000234 additional fees, 0 delta bytes

There's significant time between tx #2 and tx #3, and the block was found soon
after #4 reached my node, so it's quite possible that AntPool was in fact
running full-rbf and they simply didn't see #4 in time.

Big pools tend to run many different nodes at once, splitting up hash rate
between them, so they could be simply running full-rbf on a subset of their
hashing power to test it out. I noticed F2Pool mined a few full-rbf
replacements a few weeks ago too (they also mined a replacement that appeared
to be due to them starting a new node, with an empty mempool).

Similarly, note how Luxor has mined a few blocks since #766733, without mining
full-rbf replacements.


I'll also note that Foundry USA mined a doublespend,
fab4df6b9b51dcfe94b366f17bccca50430f4ceb274a87f948a5493cd31a8551, which your
site shows. In that case according to my logs the two transactions were sent
essentially simultaneously, so likely just an accident of propagation. But it's
good to remind people that such double-spends are easy. :)

> I've also updated the site to allow only showing the replacements that
> were mined.

Thanks! That's very useful.

-- 
https://petertodd.org 'peter'[:-1]@petertodd.org
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 833 bytes
Desc: not available
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20221210/830652f9/attachment-0001.sig>

From john at synonym.to  Sun Dec 11 14:56:24 2022
From: john at synonym.to (John Carvalho)
Date: Sun, 11 Dec 2022 14:56:24 +0000
Subject: [bitcoin-dev]
	=?utf-8?q?Rethinking_=E2=80=9CIncentive_Compatibili?=
	=?utf-8?q?ty=E2=80=9D_Within_the_Bitcoin_Protocol?=
In-Reply-To: <etg4FvUcuYL3LQxf-uu9UhLjGP9nabMMsLjYt2nxD4qbfEr6Pfft3ImDr0u6_CnYXxmHCd02hsgztB0zpVP82jSO0LrP45bt74b1GPtr3RM=@protonmail.com>
References: <CAHTn92zBcMp7Fn27aCV75V7GEzUcP2-cDcGN+CKe5+SRgyt2ow@mail.gmail.com>
 <etg4FvUcuYL3LQxf-uu9UhLjGP9nabMMsLjYt2nxD4qbfEr6Pfft3ImDr0u6_CnYXxmHCd02hsgztB0zpVP82jSO0LrP45bt74b1GPtr3RM=@protonmail.com>
Message-ID: <CAHTn92w8fm1aeMp29EG+_yFeVY7OpKOKuBtJephg6wyXkY_tdQ@mail.gmail.com>

While I appreciate your reference links, and will check them out (thanks!),
I do not appreciate your repeated takes about my character or quality of
experience. I have been in Bitcoin for 10 years, I build with it, I manage
a Bitcoin company with 8 engineers, and, modesty aside, there aren't very
many non-engineers that grasp how Bitcoin works as well as I do. I put lots
of time into Bitcoin, and do my best to scrutinize all concepts presented
to me.

When I post in github, you mention I should be banned and you ignore my
substantive arguments. If I post on the list here, you imply I am a noob,
have difficulty understanding, and that I'm biased by business. This is not
useful other than some, probably false, notion that maybe you can position
yourself as superior or myself as dismissable.

My post is an analysis on incentives and how we understand them when
designing for Bitcoin. You explained a bit about what the mempool is for,
and some dynamics about it, but you may notice that doing something like
mempoolfullrbf is actually inconsistent with a goal of mempool harmony. It
is a disruptive change, therefore a tradeoff. The arguments for making that
tradeoff use some oversimplified concepts, in my opinion.

So, I am questioning the quality of current theory, and showing how it
might be insufficient.

- Do you think it is possible that a fully replaceable mempool, and
obsoletion of zero-conf (merchant/consumer) use cases could result in less
overall mining income? If not, why not?
- Could this, and other active management by Bitcoin Core engineers, result
in an overall less valuable, less useful Bitcoin, and is that bad for
miners/security?
- Do you think it is inconsistent that on one hand, Bitcoiners argue that
miners do not control Bitcoin, yet Bitcoin Core is biasing decisions to
cater to mining incentives over user incentives? Should miners do what
users want, and might that be their actual incentive?
- Do you think it is Core's place to influence or steer policy based on
speculation about what may happen in the future, even when it conflicts
with the present and past?

*These* are the interesting questions. Do you have reasoned answers?

You suggest you are comfortable outsourcing your understanding and
decisions to others, well I am not, and my post was meant to show some
reasons why. It is important that Bitcoiners question how, when, and
whether Bitcoin software is changed, regardless of their ability to create
or audit code.

Please analyze my ideas instead of me, thank you. Or, you could stay out of
it and outsource that to someone else as well.

~John

On Sun, Dec 11, 2022 at 1:58 PM Michael Folkson <
michaelfolkson at protonmail.com> wrote:

> Hey John
>
> There was a discussion [0] started by Lisa on the mailing list last year
> on whether there is any point to a full node maintaining a mempool last
> year which you may find interesting. I also recommend Gloria's presentation
> [1] from Adopting Bitcoin last year on transaction relay policy.
>
> I think those are better resources than anything I could write. But I
> guess I'd summarize it like this. The job of the P2P/mempool/policy
> protocol devs in setting defaults is to ensure anyone can effectively
> propagate a consensus valid transaction across the network ultimately
> making its way into miners' mempools without harming network health (full
> node uptime, DoS attacks etc) and to give higher layers built on top of the
> Bitcoin network the best chance to succeed. If they totally screwed up that
> job with the defaults or they were unable to cater for a particular use
> case within default policy then there is always the alternative of
> submitting consensus valid transactions directly to miners bypassing the
> P2P network entirely. But clearly it is much better if the P2P network
> functions smoothly and every transaction isn't forced to be directly
> submitted to a miner. It is policy too of course rather than consensus so
> if the full node operator wants to change from the defaults they are free
> to do so without risking being forked off the network or risking a chain
> split.
>
> > I know some of you may scoff at my bias for use cases like zero-conf,
> but what I am trying to convey is a possible folly in active management,
> speculation, and misapplied game theory that may permeate many Bitcoin Core
> decisions and designs, even beyond the mempoolrbf / zero-conf debate.
>
> This stuff is difficult to follow and understand especially for people who
> haven't been into Bitcoin for long or are trying to build Bitcoin
> businesses full time, there are lots of subtleties. I've certainly
> struggled at many points in my learning journey and I'm sure I will
> continue to do so in future. So there is no scoffing (from me at least) at
> individuals trying to learn and businesses trying to thrive and provide
> services to their customers. Unfortunately there are occasionally scenarios
> where trade-offs have to be weighed up and decisions have to be made where
> some people aren't happy. You may disagree but I'm a lot more comfortable
> delegating responsibility for policy defaults to those who have worked full
> time in this area for years than say consensus changes where I think we all
> have a responsibility to ensure suboptimal or worse harmful changes aren't
> made to the consensus rules. I thought your input on the CTV discussion
> earlier in the year was really positive for example. On this topic though I
> think you could do with doing some more reading as there is *a lot*? of
> past discussion. I'm sure those who work in this area full time would be
> happy to answer any questions you have if you do.
>
> Thanks
> Michael
>
> [0]:
> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-October/019572.html
> [1]:
> https://btctranscripts.com/adopting-bitcoin/2021/2021-11-16-gloria-zhao-transaction-relay-policy/
>
> --
> Michael Folkson
> Email: michaelfolkson at protonmail.com
> Keybase: michaelfolkson
> PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3
>
> ------- Original Message -------
> On Saturday, December 10th, 2022 at 14:10, John Carvalho via bitcoin-dev <
> bitcoin-dev at lists.linuxfoundation.org> wrote:
>
> As we debate mempoolfullrbf, and I familiarize myself with related PRs
> from engineers trying to reign in all of the possible behaviors that make
> it inconsistent, I can?t help but think about how I see people using the
> term ?incentive-compatible? and how it seems to be awfully presumptive.
>
> The idea that a single Bitcoin transaction can be ?incentive-compatible?
> by simply restricting it to having a higher fee or fee rate is theoretical,
> likely narrow, and not totally objective. RBF is inherently a
> fee-minimization tool, which as a concept, as I understand
> ?incentive-compatibility? to be about miners in this context, makes RBF to
> be anti-incentives; miners are fee maximizers.
>
> Miners want the most fees per block, and per lifetime, do they not? If
> miners, and the mempool, are prioritizing for the smallest txns with the
> highest fees, over the longest acceptable amount of time, this may conflict
> with extra-mempool behaviors that result in more txns per block / per
> lifetime.
>
> If this isn?t making sense yet, let me summarize by how such a problem
> would express: a per-transaction fee-minimized, fully replaceable mempool
> as policy, that appears to always require the highest fee per txn, but
> ultimately includes less txns per block and less fees per lifetime.
> Basically, less use cases, less users, less txns ? all to enforce a
> misunderstood theory and predictive speculation of what people want out of
> the system and what miners will do about it.
>
> Simply, we probably want designs that fill blocks, and we don?t need to do
> anything at all to facilitate bidding on a use case like replacement.
>
> Bidding does not require protocol enforcement, it is miner-subjective. So
> why are we pursuing it? Why do we even have RBF? Why are we trying to clean
> up all of the mess RBF creates with more and more code? If bidding is
> already accepted as incentive-compatible, and Bitcoin already allows
> setting a fee, then replacement requires no special code at all.
>
> I would think a holistic definition of what is incentive-compatible would
> be something more like what is ?market compatible? and enables the
> complementary goals & incentives of every user in the system to make it
> thrive.
>
> It has been shown that users control Bitcoin (UASF) and thus ultimately
> miners would be incentivized to do what users want, up to the point of
> inability or loss. Correct?
>
> So, in contrast, how would the opposite, a user-compatible design,
> express? Well, I think the idea of txns being able to signal intent and
> desired behavior is more interesting (more useful) than a mempool that
> overrides all intent with RBF, and possibly more incentive-compatible than
> mempoolfullrbf as concept.
>
> Since we can?t be sure what the market wants, but we can be sure that the
> more users we have, making the most possible txns, at the highest possible
> prices, will yield the most valuable Bitcoin, and thus the most hashpower,
> we could entertain giving users the most ways to express their intent, the
> most flexibility.
>
> The most basic design would be to simply have no mempool policy at all,
> and let market incentives emerge on their own, but we have a status quo to
> consider, and most users do not have the technical expertise to express
> their own policies with misc patches and hacks of their Bitcoin Core
> software.
>
> I know this is a bit of a high-level abstract perspective, but I think it
> is important to respect such dynamics when making smaller decisions. It
> certainly is not our charge to prioritize what miners want any more than
> any other user type, nor is it within our ability to predict the future or
> fully model incentives of all players across all use cases.
>
> I know some of you may scoff at my bias for use cases like zero-conf, but
> what I am trying to convey is a possible folly in active management,
> speculation, and misapplied game theory that may permeate many Bitcoin Core
> decisions and designs, even beyond the mempoolrbf / zero-conf debate.
>
> So, what to do?
>
> ?
>
> John Carvalho
> CEO, Synonym.to
>
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20221211/6f4effae/attachment.html>

From michaelfolkson at protonmail.com  Sun Dec 11 13:58:29 2022
From: michaelfolkson at protonmail.com (Michael Folkson)
Date: Sun, 11 Dec 2022 13:58:29 +0000
Subject: [bitcoin-dev]
	=?utf-8?q?Rethinking_=E2=80=9CIncentive_Compatibili?=
	=?utf-8?q?ty=E2=80=9D_Within_the_Bitcoin_Protocol?=
In-Reply-To: <CAHTn92zBcMp7Fn27aCV75V7GEzUcP2-cDcGN+CKe5+SRgyt2ow@mail.gmail.com>
References: <CAHTn92zBcMp7Fn27aCV75V7GEzUcP2-cDcGN+CKe5+SRgyt2ow@mail.gmail.com>
Message-ID: <etg4FvUcuYL3LQxf-uu9UhLjGP9nabMMsLjYt2nxD4qbfEr6Pfft3ImDr0u6_CnYXxmHCd02hsgztB0zpVP82jSO0LrP45bt74b1GPtr3RM=@protonmail.com>

Hey John

There was a discussion [0] started by Lisa on the mailing list last year on whether there is any point to a full node maintaining a mempool last year which you may find interesting. I also recommend Gloria's presentation [1] from Adopting Bitcoin last year on transaction relay policy.

I think those are better resources than anything I could write. But I guess I'd summarize it like this. The job of the P2P/mempool/policy protocol devs in setting defaults is to ensure anyone can effectively propagate a consensus valid transaction across the network ultimately making its way into miners' mempools without harming network health (full node uptime, DoS attacks etc) and to give higher layers built on top of the Bitcoin network the best chance to succeed. If they totally screwed up that job with the defaults or they were unable to cater for a particular use case within default policy then there is always the alternative of submitting consensus valid transactions directly to miners bypassing the P2P network entirely. But clearly it is much better if the P2P network functions smoothly and every transaction isn't forced to be directly submitted to a miner. It is policy too of course rather than consensus so if the full node operator wants to change from the defaults they are free to do so without risking being forked off the network or risking a chain split.

> I know some of you may scoff at my bias for use cases like zero-conf, but what I am trying to convey is a possible folly in active management, speculation, and misapplied game theory that may permeate many Bitcoin Core decisions and designs, even beyond the mempoolrbf / zero-conf debate.

This stuff is difficult to follow and understand especially for people who haven't been into Bitcoin for long or are trying to build Bitcoin businesses full time, there are lots of subtleties. I've certainly struggled at many points in my learning journey and I'm sure I will continue to do so in future. So there is no scoffing (from me at least) at individuals trying to learn and businesses trying to thrive and provide services to their customers. Unfortunately there are occasionally scenarios where trade-offs have to be weighed up and decisions have to be made where some people aren't happy. You may disagree but I'm a lot more comfortable delegating responsibility for policy defaults to those who have worked full time in this area for years than say consensus changes where I think we all have a responsibility to ensure suboptimal or worse harmful changes aren't made to the consensus rules. I thought your input on the CTV discussion earlier in the year was really positive for example. On this topic though I think you could do with doing some more reading as there is a lot? of past discussion. I'm sure those who work in this area full time would be happy to answer any questions you have if you do.

Thanks
Michael

[0]: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-October/019572.html
[1]: https://btctranscripts.com/adopting-bitcoin/2021/2021-11-16-gloria-zhao-transaction-relay-policy/

--
Michael Folkson
Email: michaelfolkson at [protonmail.com](http://protonmail.com/)
Keybase: michaelfolkson
PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3

------- Original Message -------
On Saturday, December 10th, 2022 at 14:10, John Carvalho via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:

> As we debate mempoolfullrbf, and I familiarize myself with related PRs from engineers trying to reign in all of the possible behaviors that make it inconsistent, I can?t help but think about how I see people using the term ?incentive-compatible? and how it seems to be awfully presumptive.
>
> The idea that a single Bitcoin transaction can be ?incentive-compatible? by simply restricting it to having a higher fee or fee rate is theoretical, likely narrow, and not totally objective. RBF is inherently a fee-minimization tool, which as a concept, as I understand ?incentive-compatibility? to be about miners in this context, makes RBF to be anti-incentives; miners are fee maximizers.
>
> Miners want the most fees per block, and per lifetime, do they not? If miners, and the mempool, are prioritizing for the smallest txns with the highest fees, over the longest acceptable amount of time, this may conflict with extra-mempool behaviors that result in more txns per block / per lifetime.
>
> If this isn?t making sense yet, let me summarize by how such a problem would express: a per-transaction fee-minimized, fully replaceable mempool as policy, that appears to always require the highest fee per txn, but ultimately includes less txns per block and less fees per lifetime. Basically, less use cases, less users, less txns???all to enforce a misunderstood theory and predictive speculation of what people want out of the system and what miners will do about it.
>
> Simply, we probably want designs that fill blocks, and we don?t need to do anything at all to facilitate bidding on a use case like replacement.
>
> Bidding does not require protocol enforcement, it is miner-subjective. So why are we pursuing it? Why do we even have RBF? Why are we trying to clean up all of the mess RBF creates with more and more code? If bidding is already accepted as incentive-compatible, and Bitcoin already allows setting a fee, then replacement requires no special code at all.
>
> I would think a holistic definition of what is incentive-compatible would be something more like what is ?market compatible? and enables the complementary goals & incentives of every user in the system to make it thrive.
>
> It has been shown that users control Bitcoin (UASF) and thus ultimately miners would be incentivized to do what users want, up to the point of inability or loss. Correct?
>
> So, in contrast, how would the opposite, a user-compatible design, express? Well, I think the idea of txns being able to signal intent and desired behavior is more interesting (more useful) than a mempool that overrides all intent with RBF, and possibly more incentive-compatible than mempoolfullrbf as concept.
>
> Since we can?t be sure what the market wants, but we can be sure that the more users we have, making the most possible txns, at the highest possible prices, will yield the most valuable Bitcoin, and thus the most hashpower, we could entertain giving users the most ways to express their intent, the most flexibility.
>
> The most basic design would be to simply have no mempool policy at all, and let market incentives emerge on their own, but we have a status quo to consider, and most users do not have the technical expertise to express their own policies with misc patches and hacks of their Bitcoin Core software.
>
> I know this is a bit of a high-level abstract perspective, but I think it is important to respect such dynamics when making smaller decisions. It certainly is not our charge to prioritize what miners want any more than any other user type, nor is it within our ability to predict the future or fully model incentives of all players across all use cases.
>
> I know some of you may scoff at my bias for use cases like zero-conf, but what I am trying to convey is a possible folly in active management, speculation, and misapplied game theory that may permeate many Bitcoin Core decisions and designs, even beyond the mempoolrbf / zero-conf debate.
>
> So, what to do?
>
> ?
>
> John Carvalho
> CEO, Synonym.to
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20221211/e7e913a6/attachment-0001.html>

From d at esotericnonsense.com  Sun Dec 11 15:30:14 2022
From: d at esotericnonsense.com (Daniel Edgecumbe)
Date: Sun, 11 Dec 2022 15:30:14 +0000
Subject: [bitcoin-dev]
 =?utf-8?q?Rethinking_=E2=80=9CIncentive_Compatibili?=
 =?utf-8?q?ty=E2=80=9D_Within_the_Bitcoin_Protocol?=
In-Reply-To: <CAHTn92zBcMp7Fn27aCV75V7GEzUcP2-cDcGN+CKe5+SRgyt2ow@mail.gmail.com>
References: <CAHTn92zBcMp7Fn27aCV75V7GEzUcP2-cDcGN+CKe5+SRgyt2ow@mail.gmail.com>
Message-ID: <bc30bad3-1b93-4972-9893-80f3d51675eb@app.fastmail.com>

I've been on the sidelines for a while reading these e-mails but it's become rather frustrating to read as of late.

As far as I see it the fundamental principle is that the blockchain, via subsequent confirmations, is the way that security against double spends is provided in Bitcoin.

The application of proof of work to achieve that is the primary innovation of the system that seperates it from simply using digital signatures.

RBF doesn't actually materially affect that at all. Regardless of what happens in the mempool, if you rely on an N-conf transaction being final, and N blocks get reversed, either by an inadvertant chain split or by some sort of short term 51% attack behaviour, you're SOL.

Zeroconf goes even beyond that - if you rely on a transaction in the mempool, a miner can choose to mine a conflicting one regardless of what the relay policy in Core is. The only cost to them is the fee difference between the two transactions, which in the vast majority of cases will be zero or in the favour of the miner.

If we're going to talk about incentive compatibility - in this case the incentive compatible thing, perhaps even a design decision, is that miners just create a backchannel that ignores your censoring of transactions in the mempool.

The debate itself feels like bikeshedding to me for that reason. It doesn't matter what colour we paint the zeroconf shed, it doesn't have a roof and it's made of cardboard.

Daniel Edgecumbe | esotericnonsense
d at esotericnonsense.com | https://esotericnonsense.com

On Sat, Dec 10, 2022, at 12:10, John Carvalho via bitcoin-dev wrote:
> As we debate mempoolfullrbf, and I familiarize myself with related PRs 
> from engineers trying to reign in all of the possible behaviors that 
> make it inconsistent, I can?t help but think about how I see people 
> using the term ?incentive-compatible? and how it seems to be awfully 
> presumptive.
>
> The idea that a single Bitcoin transaction can be 
> ?incentive-compatible? by simply restricting it to having a higher fee 
> or fee rate is theoretical, likely narrow, and not totally objective. 
> RBF is inherently a fee-minimization tool, which as a concept, as I 
> understand ?incentive-compatibility? to be about miners in this 
> context, makes RBF to be anti-incentives; miners are fee maximizers.
>
> Miners want the most fees per block, and per lifetime, do they not? If 
> miners, and the mempool, are prioritizing for the smallest txns with 
> the highest fees, over the longest acceptable amount of time, this may 
> conflict with extra-mempool behaviors that result in more txns per 
> block / per lifetime.
>
> If this isn?t making sense yet, let me summarize by how such a problem 
> would express: a per-transaction fee-minimized, fully replaceable 
> mempool as policy, that appears to always require the highest fee per 
> txn, but ultimately includes less txns per block and less fees per 
> lifetime. Basically, less use cases, less users, less txns???all to 
> enforce a misunderstood theory and predictive speculation of what 
> people want out of the system and what miners will do about it.
>
> Simply, we probably want designs that fill blocks, and we don?t need to 
> do anything at all to facilitate bidding on a use case like replacement.
>
> Bidding does not require protocol enforcement, it is miner-subjective. 
> So why are we pursuing it? Why do we even have RBF? Why are we trying 
> to clean up all of the mess RBF creates with more and more code? If 
> bidding is already accepted as incentive-compatible, and Bitcoin 
> already allows setting a fee, then replacement requires no special code 
> at all.
>
> I would think a holistic definition of what is incentive-compatible 
> would be something more like what is ?market compatible? and enables 
> the complementary goals & incentives of every user in the system to 
> make it thrive.
>
> It has been shown that users control Bitcoin (UASF) and thus ultimately 
> miners would be incentivized to do what users want, up to the point of 
> inability or loss. Correct?
>
> So, in contrast, how would the opposite, a user-compatible design, 
> express? Well, I think the idea of txns being able to signal intent and 
> desired behavior is more interesting (more useful) than a mempool that 
> overrides all intent with RBF, and possibly more incentive-compatible 
> than mempoolfullrbf as concept.
>
> Since we can?t be sure what the market wants, but we can be sure that 
> the more users we have, making the most possible txns, at the highest 
> possible prices, will yield the most valuable Bitcoin, and thus the 
> most hashpower, we could entertain giving users the most ways to 
> express their intent, the most flexibility.
>
> The most basic design would be to simply have no mempool policy at all, 
> and let market incentives emerge on their own, but we have a status quo 
> to consider, and most users do not have the technical expertise to 
> express their own policies with misc patches and hacks of their Bitcoin 
> Core software.
>
> I know this is a bit of a high-level abstract perspective, but I think 
> it is important to respect such dynamics when making smaller decisions. 
> It certainly is not our charge to prioritize what miners want any more 
> than any other user type, nor is it within our ability to predict the 
> future or fully model incentives of all players across all use cases.
>
> I know some of you may scoff at my bias for use cases like zero-conf, 
> but what I am trying to convey is a possible folly in active 
> management, speculation, and misapplied game theory that may permeate 
> many Bitcoin Core decisions and designs, even beyond the mempoolrbf / 
> zero-conf debate.
>
> So, what to do?
>
> ?
>
> John Carvalho
> CEO, Synonym.to
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev

From michaelfolkson at protonmail.com  Sun Dec 11 15:44:08 2022
From: michaelfolkson at protonmail.com (Michael Folkson)
Date: Sun, 11 Dec 2022 15:44:08 +0000
Subject: [bitcoin-dev]
	=?utf-8?q?Rethinking_=E2=80=9CIncentive_Compatibili?=
	=?utf-8?q?ty=E2=80=9D_Within_the_Bitcoin_Protocol?=
In-Reply-To: <CAHTn92w8fm1aeMp29EG+_yFeVY7OpKOKuBtJephg6wyXkY_tdQ@mail.gmail.com>
References: <CAHTn92zBcMp7Fn27aCV75V7GEzUcP2-cDcGN+CKe5+SRgyt2ow@mail.gmail.com>
 <etg4FvUcuYL3LQxf-uu9UhLjGP9nabMMsLjYt2nxD4qbfEr6Pfft3ImDr0u6_CnYXxmHCd02hsgztB0zpVP82jSO0LrP45bt74b1GPtr3RM=@protonmail.com>
 <CAHTn92w8fm1aeMp29EG+_yFeVY7OpKOKuBtJephg6wyXkY_tdQ@mail.gmail.com>
Message-ID: <RrUPctB7GE-xfqmpXoiFpyiypkx1M5vB5JPv5J67qPcPjFUHtdEp31FgdE61Nk3jLDEYOAWiyetMKIpvtIxMh8kUsDyBO5apKe8vQPG6LNE=@protonmail.com>

I think it best I leave this discussion to others then as something I've written has obviously offended you. I'll also leave it to others to assess whether I was disrespectful or attacking your character or quality of experience in that email. Someone working on the P2P or mempool part of the Bitcoin Core codebase for years is going to understand the code and the subtle trade-offs of mempool policy defaults better than you or I. I hate to break it to you. Just like you are going to understand Synonym's business and technology better than that P2P/mempool developer. We all have different skillsets and different experiences.

> When I post in github, you mention I should be banned and you ignore my substantive arguments.

Pull requests on Bitcoin Core's GitHub repository are for technical review of the concept, approach and code contained within that pull request. Submitting your Concept (N)ACK and reasoning is perfectly fine as is opening a pull request with the same changes. But the general high level discussion (back and forth etc) you seem to want to have is much better suited here than on a Bitcoin Core pull request. It is impossible for the Bitcoin Core project to operate if the world's population aren't willing to follow project norms and want to have discussions on subjects that aren't within the scope of that pull request. I and others requested you go here and you initially refused and said you struggled to use this forum.

But yeah I'm not interested in engaging a shouting match. So with regards to your questions I'll leave it to others to discuss them with you.

Thanks
Michael
--
Michael Folkson
Email: michaelfolkson at [protonmail.com](http://protonmail.com/)
Keybase: michaelfolkson
PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3

------- Original Message -------
On Sunday, December 11th, 2022 at 16:56, John Carvalho <john at synonym.to> wrote:

> While I appreciate your reference links, and will check them out (thanks!), I do not appreciate your repeated takes about my character or quality of experience. I have been in Bitcoin for 10 years, I build with it, I manage a Bitcoin company with 8 engineers, and, modesty aside, there aren't very many non-engineers that grasp how Bitcoin works as well as I do. I put lots of time into Bitcoin, and do my best to scrutinize all concepts presented to me.
>
> When I post in github, you mention I should be banned and you ignore my substantive arguments. If I post on the list here, you imply I am a noob, have difficulty understanding, and that I'm biased by business. This is not useful other than some, probably false, notion that maybe you can position yourself as superior or myself as dismissable.
>
> My post is an analysis on incentives and how we understand them when designing for Bitcoin. You explained a bit about what the mempool is for, and some dynamics about it, but you may notice that doing something like mempoolfullrbf is actually inconsistent with a goal of mempool harmony. It is a disruptive change, therefore a tradeoff. The arguments for making that tradeoff use some oversimplified concepts, in my opinion.
>
> So, I am questioning the quality of current theory, and showing how it might be insufficient.
>
> - Do you think it is possible that a fully replaceable mempool, and obsoletion of zero-conf (merchant/consumer) use cases could result in less overall mining income? If not, why not?
> - Could this, and other active management by Bitcoin Core engineers, result in an overall less valuable, less useful Bitcoin, and is that bad for miners/security?
> - Do you think it is inconsistent that on one hand, Bitcoiners argue that miners do not control Bitcoin, yet Bitcoin Core is biasing decisions to cater to mining incentives over user incentives? Should miners do what users want, and might that be their actual incentive?
> - Do you think it is Core's place to influence or steer policy based on speculation about what may happen in the future, even when it conflicts with the present and past?
>
> *These* are the interesting questions. Do you have reasoned answers?
>
> You suggest you are comfortable outsourcing your understanding and decisions to others, well I am not, and my post was meant to show some reasons why. It is important that Bitcoiners question how, when, and whether Bitcoin software is changed, regardless of their ability to create or audit code.
>
> Please analyze my ideas instead of me, thank you. Or, you could stay out of it and outsource that to someone else as well.
>
> ~John
>
> On Sun, Dec 11, 2022 at 1:58 PM Michael Folkson <michaelfolkson at protonmail.com> wrote:
>
>> Hey John
>>
>> There was a discussion [0] started by Lisa on the mailing list last year on whether there is any point to a full node maintaining a mempool last year which you may find interesting. I also recommend Gloria's presentation [1] from Adopting Bitcoin last year on transaction relay policy.
>>
>> I think those are better resources than anything I could write. But I guess I'd summarize it like this. The job of the P2P/mempool/policy protocol devs in setting defaults is to ensure anyone can effectively propagate a consensus valid transaction across the network ultimately making its way into miners' mempools without harming network health (full node uptime, DoS attacks etc) and to give higher layers built on top of the Bitcoin network the best chance to succeed. If they totally screwed up that job with the defaults or they were unable to cater for a particular use case within default policy then there is always the alternative of submitting consensus valid transactions directly to miners bypassing the P2P network entirely. But clearly it is much better if the P2P network functions smoothly and every transaction isn't forced to be directly submitted to a miner. It is policy too of course rather than consensus so if the full node operator wants to change from the defaults they are free to do so without risking being forked off the network or risking a chain split.
>>
>>> I know some of you may scoff at my bias for use cases like zero-conf, but what I am trying to convey is a possible folly in active management, speculation, and misapplied game theory that may permeate many Bitcoin Core decisions and designs, even beyond the mempoolrbf / zero-conf debate.
>>
>> This stuff is difficult to follow and understand especially for people who haven't been into Bitcoin for long or are trying to build Bitcoin businesses full time, there are lots of subtleties. I've certainly struggled at many points in my learning journey and I'm sure I will continue to do so in future. So there is no scoffing (from me at least) at individuals trying to learn and businesses trying to thrive and provide services to their customers. Unfortunately there are occasionally scenarios where trade-offs have to be weighed up and decisions have to be made where some people aren't happy. You may disagree but I'm a lot more comfortable delegating responsibility for policy defaults to those who have worked full time in this area for years than say consensus changes where I think we all have a responsibility to ensure suboptimal or worse harmful changes aren't made to the consensus rules. I thought your input on the CTV discussion earlier in the year was really positive for example. On this topic though I think you could do with doing some more reading as there is a lot? of past discussion. I'm sure those who work in this area full time would be happy to answer any questions you have if you do.
>>
>> Thanks
>> Michael
>>
>> [0]: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-October/019572.html
>> [1]: https://btctranscripts.com/adopting-bitcoin/2021/2021-11-16-gloria-zhao-transaction-relay-policy/
>>
>> --
>> Michael Folkson
>> Email: michaelfolkson at [protonmail.com](http://protonmail.com/)
>> Keybase: michaelfolkson
>> PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3
>>
>> ------- Original Message -------
>> On Saturday, December 10th, 2022 at 14:10, John Carvalho via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:
>>
>>> As we debate mempoolfullrbf, and I familiarize myself with related PRs from engineers trying to reign in all of the possible behaviors that make it inconsistent, I can?t help but think about how I see people using the term ?incentive-compatible? and how it seems to be awfully presumptive.
>>>
>>> The idea that a single Bitcoin transaction can be ?incentive-compatible? by simply restricting it to having a higher fee or fee rate is theoretical, likely narrow, and not totally objective. RBF is inherently a fee-minimization tool, which as a concept, as I understand ?incentive-compatibility? to be about miners in this context, makes RBF to be anti-incentives; miners are fee maximizers.
>>>
>>> Miners want the most fees per block, and per lifetime, do they not? If miners, and the mempool, are prioritizing for the smallest txns with the highest fees, over the longest acceptable amount of time, this may conflict with extra-mempool behaviors that result in more txns per block / per lifetime.
>>>
>>> If this isn?t making sense yet, let me summarize by how such a problem would express: a per-transaction fee-minimized, fully replaceable mempool as policy, that appears to always require the highest fee per txn, but ultimately includes less txns per block and less fees per lifetime. Basically, less use cases, less users, less txns???all to enforce a misunderstood theory and predictive speculation of what people want out of the system and what miners will do about it.
>>>
>>> Simply, we probably want designs that fill blocks, and we don?t need to do anything at all to facilitate bidding on a use case like replacement.
>>>
>>> Bidding does not require protocol enforcement, it is miner-subjective. So why are we pursuing it? Why do we even have RBF? Why are we trying to clean up all of the mess RBF creates with more and more code? If bidding is already accepted as incentive-compatible, and Bitcoin already allows setting a fee, then replacement requires no special code at all.
>>>
>>> I would think a holistic definition of what is incentive-compatible would be something more like what is ?market compatible? and enables the complementary goals & incentives of every user in the system to make it thrive.
>>>
>>> It has been shown that users control Bitcoin (UASF) and thus ultimately miners would be incentivized to do what users want, up to the point of inability or loss. Correct?
>>>
>>> So, in contrast, how would the opposite, a user-compatible design, express? Well, I think the idea of txns being able to signal intent and desired behavior is more interesting (more useful) than a mempool that overrides all intent with RBF, and possibly more incentive-compatible than mempoolfullrbf as concept.
>>>
>>> Since we can?t be sure what the market wants, but we can be sure that the more users we have, making the most possible txns, at the highest possible prices, will yield the most valuable Bitcoin, and thus the most hashpower, we could entertain giving users the most ways to express their intent, the most flexibility.
>>>
>>> The most basic design would be to simply have no mempool policy at all, and let market incentives emerge on their own, but we have a status quo to consider, and most users do not have the technical expertise to express their own policies with misc patches and hacks of their Bitcoin Core software.
>>>
>>> I know this is a bit of a high-level abstract perspective, but I think it is important to respect such dynamics when making smaller decisions. It certainly is not our charge to prioritize what miners want any more than any other user type, nor is it within our ability to predict the future or fully model incentives of all players across all use cases.
>>>
>>> I know some of you may scoff at my bias for use cases like zero-conf, but what I am trying to convey is a possible folly in active management, speculation, and misapplied game theory that may permeate many Bitcoin Core decisions and designs, even beyond the mempoolrbf / zero-conf debate.
>>>
>>> So, what to do?
>>>
>>> ?
>>>
>>> John Carvalho
>>> CEO, Synonym.to
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20221211/d69ce1a1/attachment-0001.html>

From ZmnSCPxj at protonmail.com  Mon Dec 12 02:27:31 2022
From: ZmnSCPxj at protonmail.com (ZmnSCPxj)
Date: Mon, 12 Dec 2022 02:27:31 +0000
Subject: [bitcoin-dev] [Opt-in full-RBF] Zero-conf apps in immediate
	danger (angus)
In-Reply-To: <CAHTn92wri-edhivrtqZCoEzAPEmwZFap12mM4yzxgp77O-+JYA@mail.gmail.com>
References: <mailman.48662.1670246787.956.bitcoin-dev@lists.linuxfoundation.org>
 <CAHTn92wri-edhivrtqZCoEzAPEmwZFap12mM4yzxgp77O-+JYA@mail.gmail.com>
Message-ID: <mbdvMAocVkRVOHgwFJQ6z9c0IY1GxfhPKrIhd4yFYsYed_-m_0AzoELUhbBNEN1HByblCPmZmWyQ5Ow5TtGIY036az6gbfYUnyPtO_SkI18=@protonmail.com>

Good morning John, et al,


> > As has been pointed out by may others before, full RBF is aligned with miner (and user) economic incentives
> 
> 
> This is a theory, not a fact. I can refute this theory by pointing out several aspects:
> 1. RBF is actually a fee-minimization feature that allows users to game the system to spend the *least* amount in fees that correlates to their time-preference. Miners earn less when fees can be minimized (obviously). This feature also comes at an expense (albeit small) to nodes providing replacement service and propagation.

It is helpful to remember that the fees are a price on confirmation.
And in economics, there is a "price theory":

* As price goes down, demand goes up.
* As price goes up, net-earning-per-unit goes up.

The combination of both forces causes a curve where *total* earnings vs price has a peak somewhere, an "optimum price", and that peak is *unlikely* to be at the maximum possible price you might deem reasonable.
And this optimum price may very well be *lower* than the prevailing market price of a good.

Thus, saying "RBF is actually a fee-minimization feature" neglects the economics of the situation.
If more people could use RBF onchain, more people would use Bitcoin and increase the value to miners.

Rather than a fee-minimization feature, RBF is really an optimization to *speed up* the discovery of the optimum price, and is thus desirable.

Unfortunately many 0-conf acceptors outright reject opt-in-RBF, despite the improved discovery of the optimum price, and thus there is a need for full-RBF to improve price discovery of blockspace when such acceptors are too prevalent.

Regards,
ZmnSCPxj

From john at synonym.to  Mon Dec 12 09:57:37 2022
From: john at synonym.to (John Carvalho)
Date: Mon, 12 Dec 2022 09:57:37 +0000
Subject: [bitcoin-dev] [Opt-in full-RBF] Zero-conf apps in immediate
 danger (angus)
In-Reply-To: <mbdvMAocVkRVOHgwFJQ6z9c0IY1GxfhPKrIhd4yFYsYed_-m_0AzoELUhbBNEN1HByblCPmZmWyQ5Ow5TtGIY036az6gbfYUnyPtO_SkI18=@protonmail.com>
References: <mailman.48662.1670246787.956.bitcoin-dev@lists.linuxfoundation.org>
 <CAHTn92wri-edhivrtqZCoEzAPEmwZFap12mM4yzxgp77O-+JYA@mail.gmail.com>
 <mbdvMAocVkRVOHgwFJQ6z9c0IY1GxfhPKrIhd4yFYsYed_-m_0AzoELUhbBNEN1HByblCPmZmWyQ5Ow5TtGIY036az6gbfYUnyPtO_SkI18=@protonmail.com>
Message-ID: <CAHTn92xmZLCbcEnTm6VvCX7=khdgkNjyoDh53OQtWb1HMj-_kA@mail.gmail.com>

Zman,

Price Theory simply explains the relationship between supply & demand. Your
post makes some logical leaps in that you are implying that demand follows
supply, which of course is not true, nor is that a claim of Price Theory.
If Bitcoin has less utility, it will have less demand, regardless of
whether it is well-optimized to allow for capacity saturation.

I do agree that there is an optimal state, and that such state is not
likely to be at the maximum price, because price maximization is exclusive.
(Whether I deem any of this as "reasonable," as you say, is irrelevant
other than whether I personally, subjectively choose to participate.)

The optimal state (most fees earned), would surely be a result of the most
value provided (per blockspace, per time period). While we must do our best
to make sure txns have the smallest footprint, and that people have ways to
pay a fee proportional to their time preference, there is always a maximum
quantity of demand willing to pay any given fee. My arguments express how
zero-conf currently creates added demand for blockspace, by
merchants/consumers, and additionally, demand for *next-block* inclusion
(maximum time preference) due to merchants qualifying fee rates to be
eligible for zero-conf acceptance.

So, me saying that RBF is fee-minimization, which you have conceded, is
apt, in that we should probably not trade off something like zero-conf
utility (demand) for something like mempoolfullrbf (blanket replaceability
that overrides status quo use cases).

Your statement of "If more people could use RBF onchain, more people would
use Bitcoin and increase the value to miners." is not economically rational
unless you truly can prove that supply creates demand. This is observably
false, as blocks are not full.

Also, you stated "Unfortunately many 0-conf acceptors outright reject
opt-in-RBF, despite the improved discovery of the optimum price, and thus
there is a need for full-RBF to improve price discovery of blockspace when
such acceptors are too prevalent." This is also irrational and incorrect.
First, merchants do not "outright reject" opt-in RBF, they simply make the
customer wait 1 conf. Second, full-rbf has no positive effect on price
discovery for blockspace if it results in less people using Bitcoin for
actual trade.

~John



It is helpful to remember that the fees are a price on confirmation.
> And in economics, there is a "price theory":
>
> * As price goes down, demand goes up.
> * As price goes up, net-earning-per-unit goes up.
>
> The combination of both forces causes a curve where *total* earnings vs
> price has a peak somewhere, an "optimum price", and that peak is *unlikely*
> to be at the maximum possible price you might deem reasonable.
> And this optimum price may very well be *lower* than the prevailing market
> price of a good.
>
> Thus, saying "RBF is actually a fee-minimization feature" neglects the
> economics of the situation.
> If more people could use RBF onchain, more people would use Bitcoin and
> increase the value to miners.
>
> Rather than a fee-minimization feature, RBF is really an optimization to
> *speed up* the discovery of the optimum price, and is thus desirable.
>
> Unfortunately many 0-conf acceptors outright reject opt-in-RBF, despite
> the improved discovery of the optimum price, and thus there is a need for
> full-RBF to improve price discovery of blockspace when such acceptors are
> too prevalent.
>
> Regards,
> ZmnSCPxj
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20221212/742f87ad/attachment.html>

From antoine.riard at gmail.com  Mon Dec 12 16:13:07 2022
From: antoine.riard at gmail.com (Antoine Riard)
Date: Mon, 12 Dec 2022 11:13:07 -0500
Subject: [bitcoin-dev] Bitcoin Contracting Primitives WG 2nd Meeting,
	Tuesday 20 Dec. 18:00 UTC
Message-ID: <CALZpt+GZy1F8S=wYbMmHYE4x21mROJy55pkbmzmSE_a6cULeiw@mail.gmail.com>

Hi list,

I'm proposing Tuesday 20th December at 18:00 UTC, i.e 1 week from now for
the 2nd Bitcoin contracting primitives WG meeting.

As a soft proposal for an agenda, the first part could be to roam over all
the contracting protocol use-cases and corresponding primitives, to ensure
there is exhaustivity of the R&D effort w.r.t known ideas issued by the
community during the past years. If you have been working on a primitive
and corresponding use-cases, and it's missing in the current listing, feel
free to open a PR or bump me to do so.

The second part could be to take time to listen to everyone blockers in
their contracting primitives/covenant research, if someone would like more
review on their proposals, or if someone would like to work on a code
implementation and it misses familiarity with Bitcoin Core Script
interpreter, or if someone would like to experiment a minimal use-case on
bitcoin-inquisition, or if someone has conceptual questions on the
primitive design approach, or if someone thinking to propose a new
cryptosystem at the consensus-level for Bitcoin, or whatever [0].

Communication venue is #bitcoin-contracting-primitives-wg on Libera Chat.
Logs of the previous session are available here [1].

Let it know if you have more questions or feedback.

Cheers,
Antoine

[0] My own goal is to keep rolling the ball on a taproot annex
implementation (https://github.com/bitcoin-inquisition/bitcoin/pull/9) as
it could be useful as a fee-bumping primitive/constrained amount
malleability extension for multi-party channels, and potentially other uses.

[1]
https://github.com/ariard/bitcoin-contracting-primitives-wg/blob/main/meetings/meetings-15-11.md
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20221212/b0d0efab/attachment.html>

From pete at petertodd.org  Mon Dec 12 20:41:57 2022
From: pete at petertodd.org (Peter Todd)
Date: Mon, 12 Dec 2022 15:41:57 -0500
Subject: [bitcoin-dev] Full-RBF Peering Bitcoin Core v24.0.1 Released
Message-ID: <Y5eSFbR61HleY6dw@petertodd.org>

Available from: https://github.com/petertodd/bitcoin/tree/full-rbf-v24.0.1

eg:

    git clone -b full-rbf-v24.0.1 https://github.com/petertodd/bitcoin.git

What is this? It's Bitcoin Core v24.0.1, with Antoine Riard's full-rbf peering
code, and some additional minor updates to it. This does two things for
full-rbf nodes:

1) Advertises a FULL_RBF service bit when mempoolfullrbf=1 is set.
2) Connects to four additional FULL_RBF peers.

Doing this ensures that a core group of nodes are reliably propagating full-rbf
replacements. We don't need everyone to run this. But it'd be helpful if more
people did.

Right now I'd estimate that there are ~30 reliable nodes accepting incoming
connections and running the v24.0 version of this branch. Additionally there
are another ~50 reliable Bitcoin Knots nodes accepting incoming connections;
Knots advertises the service bit, but doesn't have the peering code.

-- 
https://petertodd.org 'peter'[:-1]@petertodd.org
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 833 bytes
Desc: not available
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20221212/a83ed4c9/attachment.sig>

From bitcoin-dev at wuille.net  Mon Dec 12 22:47:08 2022
From: bitcoin-dev at wuille.net (Pieter Wuille)
Date: Mon, 12 Dec 2022 22:47:08 +0000
Subject: [bitcoin-dev] libsecp256k1 version 0.2.0 released
Message-ID: <v-5cMoyHzxi0ZUUECBV_l_87TwzxBXr7-aIMrjC5taolnlKi256ZFnoH6EGw4MpvwVwAJkBwhPToRfSp1DFK314O7edTwjKndQ0azBRGfgI=@wuille.net>

Hi,

After not even 10 years of development, we'd like to announce the first tagged release of libsecp256k1, version 0.2.0:

? ? https://github.com/bitcoin-core/secp256k1/releases/tag/v0.2.0

For a long time, libsecp256k1's development only had a master branch, creating unclarity about API compatibility and stability. Going forward, we will be creating tagged releases when relevant improvements are merged, following a semantic versioning scheme. This is not yet a version 1.0.0 as there are some important improvements we'd like to make before that point. We do reserve the ability to introduce API breaks, but promise clear documentation of such changes.

We're skipping version 0.1.0 because this version number was set in our autotools build scripts for years, and does not uniquely identify a set of source files. We will not be creating binary releases, but will take expected ABI compatibility issues into account for release notes and versioning.

The release tag is signed with my PGP key: https://bitcoin.sipa.be/sipa.asc

Grab it while it's hot. We welcome suggestions for the release process going forward.

Cheers,

-- 
the libsecp256k1 maintainers


From daniel at gap600.com  Sun Dec 11 20:24:00 2022
From: daniel at gap600.com (Daniel Lipshitz)
Date: Sun, 11 Dec 2022 22:24:00 +0200
Subject: [bitcoin-dev] A proposal for Full RBF to not exclude Zero Conf use
	case
Message-ID: <CACkWPs_F94t9Q8TfyYYGxQANUT78SWFGkTOh6qRwnt=6ct7aig@mail.gmail.com>

Intro
Currently there is a significant use case of 0-Conf acceptance of
transactions. Merchants and service providers are fully aware of the risks
related to 0-conf. Full RBF if it would be significantly enabled would most
likely make 0-conf not possible and significantly limit this current use
case. A primary motivation for full RBF is to enable an increase of fee of
trxs and enable faster acceptance in Block should it be required.

Motivation
To enable full RBF adoption without this impeding the 0-conf use case. This
can be done by enabling the primary use of case full RBF i.e increase the
fee, while keeping the outputs of TRX1 to be included within TRX2.

Method
TRX1 is the trx first published and held in Mempool, TRX2 is the trx which
comes to replace TRX1.

In order for a TRX2 to  replace TRX1 in the Mempool it will require the
following

   - 1. Outputs (addresses and amounts) are the same TRX1 and TRX2

Or


   - 2. TRX2 Outputs include Outputs of TRX1 i.e TRX2 has additional
   Outputs to TRX1

Both cases would require the addition of at least one Input in order to
increase the fee.

In such a case 0-conf acceptance of TRX1 will result in a harmless double
spend since TRX1 will not be included in the valid UTXO set; however
the address beneficiaries of TRX1 will still be credited by TRX2.

This rule would enable the increasing of network fees post publication of
trx without the loss of 0-conf use case.

Drawbacks
Does require access to another Input inorder to take advantage of Full RBF.


Summary
Access to OptinRBF and FullRBF(with above limitation) would give actors
full access to increasing fees as an option. The 0-conf whose risks are
very much understood in the market can continue to exist as is, with the
0-conf ongoing choices being continuing to be available to actors.
________________________________

Daniel Lipshitz
GAP600| www.gap600.com
Phone: +44 113 4900 117
Skype: daniellipshitz123
Twitter: @daniellipshitz
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20221211/8df6a99e/attachment.html>

From aj at erisian.com.au  Tue Dec 13 04:01:50 2022
From: aj at erisian.com.au (Anthony Towns)
Date: Tue, 13 Dec 2022 14:01:50 +1000
Subject: [bitcoin-dev] Announcement: Full-RBF Miner Bounty
In-Reply-To: <f146ca66-a611-f129-ae11-6907a7333d10@b10c.me>
References: <Y2I3w8O5X55sD/3C@petertodd.org> <Y2qc7Ubc5xtJhxGw@petertodd.org>
 <Y3MlSE7AWkBgiCyr@erisian.com.au>
 <f146ca66-a611-f129-ae11-6907a7333d10@b10c.me>
Message-ID: <Y5f5LtJFZP0c9Lst@erisian.com.au>

On Fri, Dec 09, 2022 at 05:04:05PM +0100, 0xB10C via bitcoin-dev wrote:
> For further monitoring, I've set-up a mempoolfullrbf=1 node and are
> logging replacement events with [0]. I filter the full-RBF replacements
> and list the replaced and replacement transactions here:
> https://fullrbf.mempool.observer/

I think it would be helpful to list (a) how long ago the replaced
transaction was seen compared to the [full RBF event] timestamp, and (b)
particularly for cases where the replaced tx was the one that was mined,
how long after the [full RBF event] the block was received.

Might be more hassle than it's worth, but you might consider grouping
all related replacements together, so that you can see:

2b771b7949e62434bf3002ad0d38f383a29b362cf2dc31627a35a883d0de36c3
  [2601.19 sat/vb]
9ce405ab14e8d68c7a43d190414e39564d90bbee21f23020f2ce45136927ce9b
  [2448.25 sat/vb]
1a5f239e7fc008f337605e0b405579234d0fecebaf6be966000dcfaf0bcb7beb
  [2295.31 sat/vb]
0500a3ca5e4998fb273be9b51a4c3a75780acf28b23409a54f4260e069441e32
  [2142.37 sat/vb]
955623c789eb0a7ca0848ce964325d6b2c7d1731a686d573018f6348de6c00a1
  [1989.42 sat/vb]
7838bc60405f9b38a79c94f4f045b8debaf41c0a5acfdeebc6a3904188b2bbc9
  [1836.48 sat/vb]
2d5e6b84602d45c5c834e0cad4db4dd8a9142ba7eff6bacdb34a97e5cfacb418
  [1683.54 sat/vb]
130851951a1d9270776852491bda3e17bb08b9309e5b76b206633f88a9341604
  [1530.60 sat/vb]
3c9b2530c02a22c966fa9ef60ec0acf17bd23a8b0b4c5202589c190ee770c880
  [1377,66 sat/vb]
49889043ec7dae7a4f1573c5feaca6a549d88e4fb306cf3b410155ba919da83d
  [1224.72 sat/vb]
861156e18ae0399cd458c6f7f7faed1a94142db45f1d879b9ae78cb11cd7e96c
  [1071.78 sat/vb]
961bf21f1fc35edacd4929e8db67b27a52c69a593d32aab5a024757503c0490b
  [ 918.84 sat/vb]
5cdb24e2ed30dfc55b23820676a9d47d158fec982e77dddadc648280f0b2c914
  [ 765.90 sat/vb]
159494115af33b414df77d3965de5eb191b4a3af1c1219509f3175abc5dcd132
  [ 612.95 sat/vb]
dcf4c0e688ee76188e9ef829d03cc66ee7da404717b9d56d74bcd75708612271
  [ 460.01 sat/vb]
1971d9122551a898bcbc5183d4ea79e273dea89aa4075d4e014f8f7dd4eb8321
  [ 307.07 sat/vb]
c43316d2e4bb12fbb408de01d64c4b480fd7d6875db4ebbf006fdc7579546d13
  [ 154.13 sat/vb]
8bbf6a0f3dd8358c6d8a81f0811216d7980288b14daeac82ff2f672ea8e4851d
  [   1.19 sat/vb]
  [mined in 767044]

at a glance as a single block (ideally with timestamps).

Arguably, that might be interesting to see in general (ie for bip-125
opt-in rbf txs as well), to see how common the "offer a low fee, and
raise it over time" approach is in practice.

Cheers,
aj

From nothingmuch at woobling.org  Tue Dec 13 04:20:22 2022
From: nothingmuch at woobling.org (Yuval Kogman)
Date: Mon, 12 Dec 2022 22:20:22 -0600
Subject: [bitcoin-dev] A proposal for Full RBF to not exclude Zero Conf
 use case
In-Reply-To: <CACkWPs_F94t9Q8TfyYYGxQANUT78SWFGkTOh6qRwnt=6ct7aig@mail.gmail.com>
References: <CACkWPs_F94t9Q8TfyYYGxQANUT78SWFGkTOh6qRwnt=6ct7aig@mail.gmail.com>
Message-ID: <CAAQdECAspoRJRz7j1ubAe=Cen==AVF5bm-Q2=0TiKc7NtbU65A@mail.gmail.com>

https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-May/008248.html

From aj at erisian.com.au  Tue Dec 13 04:42:18 2022
From: aj at erisian.com.au (Anthony Towns)
Date: Tue, 13 Dec 2022 14:42:18 +1000
Subject: [bitcoin-dev] bitcoin-inquistion 23.0: evaluating soft forks on
	signet
Message-ID: <Y5gCqsCaT0rVKrmX@erisian.com.au>

Hi *,

Bitcoin Inquisition 23.0 is tagged:

  https://github.com/bitcoin-inquisition/bitcoin/releases/tag/inq-v23.0

It includes support for BIP 118 (ANYPREVOUT) and BIP 119
(CHECKTEMPLATEVERIFY) on regtest and signet.

As previously discussed, the hope is that this will allow more
experimentation and building a greater understanding of the risks,
benefits, and tradeoffs of proposals like BIP 118 and BIP 119.

For an initial trial period, we've switched to mining 100% of blocks on
the default global signet using this patchset. However should a problem
occur (eg the node software crashing, or some unintended hard fork being
triggered), the signet miners are configured to automatically fall back to
using bitcoin core nodes to ensure that signet continues to be available.

In order to more reliably relay transactions using the new soft forks,
you may wish to manually connect to a node that supports these features;
you can do so by specifying:

  addnode=inquisition.bitcoin-signet.net
  addnode=phfrpeh47vpjvoi2dgpngfk6ynl7vbnxwekwtcpg3zancixnnjvq.b32.i2p

If you are trying to do experiments with signet and would like a
larger budget than the various faucets will give you, please join the
#bitcoin-signet IRC channel on Libera, and let us know. That applies
whether or not you're making use of inquisition-y features!

If you wish to enable these soft forks on a custom signet, you should mine
a block with version 0x60007600 (BIP 118) and/or version 0x60007700 (BIP
119), then monitor activation using `bitcoin-cli getdeploymentinfo`. The
inquisition node software should also correctly validate/relay CTV
transactions on the existing ctv signet (ctvsignet.com).

As one simple bit of experimentation, block rewards are currently being
sent to the address

  tb1pwzv7fv35yl7ypwj8w7al2t8apd6yf4568cs772qjwper74xqc99sk8x7tk

This is a taproot address with an ANYPREVOUT script path ("OP_1
OP_CHECKSIG"), which has an example spend splitting 1000 sBTC into 900
sBTC for Kalle's mining wallet and 100 sBTC into mine:

  https://mempool.space/signet/tx/2ba88276dee53abdff23258b7f5b8d41005c69f03dc9a5bb9d5cb7b7f41f3e45

Because this transaction was signed with an ANYPREVOUTANYSCRIPT|ALL
signature, that signature can be replayed with other utxos of that pubkey,
eg in the following transaction:

  https://mempool.space/signet/tx/ef8b3351def1163da97f51b8d2cba53c9671dfbd69ae4b1278506b9282bfbdea

That transaction was generated by setting up a watchonly wallet to
monitor that address:

  $ bitcoin-cli -signet createwallet testapo true false '' false true true
  $ bitcoin-cli -signet -rpcwallet=testapo importdescriptors '[{"desc":"addr(tb1pwzv7fv35yl7ypwj8w7al2t8apd6yf4568cs772qjwper74xqc99sk8x7tk)#30t3uj6k", "active":false, "timestamp":1670803200}]'

then manually putting together sufficient inputs to fund the required
signed outputs (with the excess going to fees, and hence back to the
original address since that's where mining payouts are being sent)
and adding the same witness data once for each input:

  $ (X=20; printf "020000000001%02x" $X;
     bitcoin-cli -signet -rpcwallet=testapo listunspent | jq -j '.[] | (.txid, " ", .vout, "\n")' | head -n$X |
       while read txid vout; do
         rtxid=$(echo $txid | sed 's/../& /g' | tr ' ' '\n' | tac | tr -d '\n');
         printf "%s%02x%06x00ffffffff" "$rtxid" "$vout";
       done;
       printf "0200046bf41400000016001481113cad52683679a83e76f76f84a4cfe36f750100e40b54020000001600141b94e6a88e7bfb3a552d6888b102c4f615dc2f56";
       for a in `seq 1 $X`; do
         printf "034189d888393f0c46872fbd002b3523cf58dd474ab86014096bdf69e5248cc06cd6f4b5a223053eb97a708b47ed1d25ad26be7f197536af86ad3389cb1d53a0e643c10251ac21c0624aa2e3277b1f5d667c5acc0ec58eccad8c8be7c7815e122d2b65127f8b0e28";
       done; 
       echo "00000000"
     )  | sed 's/^/["/;s/$/"]/' | bitcoin-cli -stdin -signet testmempoolaccept

That should be something anyone running an inquisition client can
duplicate (err, if you can handle the awesomeness of my shell one-liners);
though doing more than just testmempoolaccept will be naturally rate
limited as it spends 20 blocks worth of reward. There shouldn't be any
way of turning it into a profit, or much of a denial-of-service attack,
but if you find one, that's probably new information about BIP 118! (One
thing you could do is use it as a way of creating an excessively high
CPFP feerate, though without package relay, and on signet, that's probably
not terribly useful)

Finally, yes this is based on Bitcoin Core version 23.0 when 24.0.1
has just been released. The plan in general is to keep inquisition
focussed on released versions of core to minimise rebasing, and more
concretely, to start forward porting the current patches to that now
that it has been released, and possibly consider including support for
additional BIPs (ideas so far include: defining annex interpretation and
package rbf). Discussion of those ideas welcome (on list, on the repo,
or #bitcoin-signet or #bitcoin-contracting-primitives-wg are probably
good choices).

Links:
 - Original proposal: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-September/020921.html
 - Wiki: https://github.com/bitcoin-inquisition/bitcoin/wiki
 - PRs: https://github.com/bitcoin-inquisition/bitcoin/pulls?q=is%3Apr
 - discussion about testing segwit on testnet:
    https://www.erisian.com.au/bitcoin-core-dev/log-2016-06-23.html#l-280

Cheers,
aj

From aj at erisian.com.au  Tue Dec 13 12:55:08 2022
From: aj at erisian.com.au (Anthony Towns)
Date: Tue, 13 Dec 2022 22:55:08 +1000
Subject: [bitcoin-dev] [Opt-in full-RBF] Zero-conf apps in immediate
 danger (angus)
In-Reply-To: <j5xgF7aMEAtOtWJ1CfZv-gRIw-gUUe8jMvuZzY9z3K9cRNo91ApiXbtaoXdHdSx61sMmyEHPZu8BWvSSszEAmV0v-g-k2-YTNRFim3hEljw=@toaster.cc>
References: <mailman.48662.1670246787.956.bitcoin-dev@lists.linuxfoundation.org>
 <CAHTn92wri-edhivrtqZCoEzAPEmwZFap12mM4yzxgp77O-+JYA@mail.gmail.com>
 <CAJowKgJQJvsZQgTjEqXaz6DVw_iG4JfXCL8s0G7v2o3O453Ajg@mail.gmail.com>
 <j5xgF7aMEAtOtWJ1CfZv-gRIw-gUUe8jMvuZzY9z3K9cRNo91ApiXbtaoXdHdSx61sMmyEHPZu8BWvSSszEAmV0v-g-k2-YTNRFim3hEljw=@toaster.cc>
Message-ID: <Y5h2LD/Zi3NVAhIK@erisian.com.au>

On Fri, Dec 09, 2022 at 03:58:37PM +0000, angus via bitcoin-dev wrote:
> Those in favour of Full RBF see trusting and relying on predictable
> mempool policy as a fundamentally flawed?bad idea.

I don't believe that claim is true, at least in general: the motivation
for the -mempoolfullrbf PR was to make mempool policy behave in a way
that was (believed to be) more reliable and predictable than the current
behaviour.

In particular, if you can't rely on predictable relay/mempool policy,
you can't build "fraud proof" protocols on top of the blockchain: whether
that be like lightning today, which relies on people being able to get a
penalty transaction mined in a reasonable amount of time, or lightning in
the future which in an eltoo world relies on getting an update transaction
mined in a similar amount of time, or optimistic rollups that offer the
ability for people to challenge with a fraud proof.

I think the basis for the fullrbf vision is more that fullrbf advocates
think miners will always want to optimise fees in the short term: that is,
given two conflicting transactions H and L, if including H in the block
gives a higher total reward for that block than including L, they will
always want to include H. Presuming that is a common attitude amongst
miners, fullrbf is a natural outcome: those miners will advertise how
to connect to their nodes, and anyone who prefers H over L will send H
to them directly, and H will be mined and L will not be.

I think it's fair to say that's what people mean when they talk about
"incentive compatible" -- miners want to see the highest fee alternative
of a transaction, and are "incentivised" by fees to do so, so relaying
that transaction is "incentive compatible" while relaying lower fee
alternatives is "incentive incompatible".

That can be a stable outcome too: if it's common to have multiple
transactions like that, then the pools that take the higher fee
transactions will give higher payouts per hashrate, and owners of mining
hardware will switch to those pools, so that the amount of hashrate
accepting replacements will tend towards 100%. That scenario is already
the case for opt-in RBF.

However, expecting pools/miners to optimise fees in the short term is an
assumption, not the economic fact of life that some seem to assume it is.

It's also possible that owners of ASICs or pool operators will decide that
they're in this for the long term, and therefore that it's smarter to look
at fee income over multiple blocks, rather than taking each block as its
own entity. Similar to treating the prisoner's dilemma as a one-off game
(where the dominant strategy is to always defect) versus an iterated game
(where cooperation or tit-for-tat may be better strategies).

In particular, the outcome of fullrbf might not simply be the rosy
scenario:

  + there are just as many txs paying similar fees as there now,
    except that
  + it's easy for people to cancel mistakes, and
  + people stop complaining to wallet authors when their opt-in 
    rbf tx takes longer to confirm than they expected

but might instead be either:

  + everyone using BTC for payments switches to lightning, causing
  - on-chain traffic to drop and fee income to drop with it

or

  - everyone paying for goods/services online with cryptocurrency
    switches to stablecoins or ETH or Liquid or RSK,
  - bitcoin traffic and tx fees drop substantially as a result,
  - and bitcoin price drops too as people switch to hodling their
    hot wallet balances in stablecoins and ETH

which pool operators or hashrate owners might consider to not be in
their best interests.

Sergej's numbers at
https://github.com/bitcoin/bitcoin/pull/26525#issuecomment-1332823282
suggest bitefill's zeroconf txs alone account for something like 0.5%
of on-chain txs. I'm not really sure how to interpret the numbers Daniel
Lipshitz/Max Krupyshev reported; "700+ inputs a month" doesn't sound like
very many, but "300k incoming transactions" would be 35 years worth of
700 inputs per month, so something doesn't add up... The gap600 webpage
from 2018 cites 3 million Bitcoin txs over about 13 months, which would
be about 230k/month, which would be roughly 3% of on-chain txs at the
moment.

It's not clear to me what that adds up to; is reducing tx volume
by perhaps 5% or 10% a big deal? Given fee income is maybe 2% of the
block reward at the best of times, reducing it by 5% (to 1.9%) probably
doesn't matter directly, but then, nor would increasing it by 5%. So
if there's a negative effect on demand for bitcoin because it becomes
slower and less widely accepted, driving its price down, though, that
probably dominates. Is that likely to be signficant? No idea. Is there
some counterveiling effect where mempoolfullrbf would make bitcoin more
desirable, increasing demand and hence increasing its price? I can't
see one.

(The original reasoning for the mempoolfullrbf option was that it
would allow new use cases, namely collaborative funding of coinjoins or
lightning channels with less risk of getting your utxo stuck without
being able to blame whoever was causing it to get stuck, which would
have added a potential for both more fees from additional txs, and more
demand due to those use cases.  Without that actually working as hoped,
we just have fewer on chain txs and worse demand in every scenario,
as far as I can see)


This isn't necessarily an incredibly stable equilibrium: once somewhere
around 10%-30% of hashrate is mining with fullrbf, presumably that
would make it too easy to cheat anyone willing to accept txs signalling
first-seen-final with 0 confirmations and they'll stop doing that, and if
the consequences are that everyone switches to lightning or stablecoins
and ETH, then that's all there is to it; it doesn't really matter what
the remaining 70%-90% of hashrate does, so at that point they might as
well do fullrbf as well, even if it only gets them a few pennies more.

But it's certainly possible for 95%+ of hashrate to decide that continuing
to ignore high fee replacements is in their best interests over the
long term -- that's how things are working currently, and how they've
worked for some years now. It's also how we'll want things to work if
we want anti-pinning schemes like those proposed for version-3 relay to
be effective.


One reason we might hope that miners will take a long-term view and
(presuming the long-term view is actually in favour of zeroconf) decide to
keep supporting zeroconf, even if we don't care about zeroconf ourselves,
is that miners prioritising long term income is arguably one of plausible
ways we can prevent 51% attacks from being a dominant strategy. If miners
are only focussing on immediate revenue, then case #4 in section 3.1 of
[0] applies, so 51% attacks are likely to be possible and profitable,
whereas if miners are focussing on bitcoin's long term value proposition,
then reorgs due to successful 51% attacks can be expected to trigger a
decline in the value of their investment in mining equipment, causing
case #4 not to apply. This is a similar argument to that presented in
section 2.3 of [1].

[0] https://www.nber.org/papers/w24717
[1] https://uncommoncore.co/wp-content/uploads/2019/10/A-model-for-Bitcoins-security-and-the-declining-block-subsidy-v1.02.pdf

Of course, that only needs perhaps 30%-50% of hashpower to be thinking
long term, rather than 70%-90%, and a lack of regular reorgs is probably
a clearer benefit than zeroconf transactions. Which is a bit of a win-win:
success at keeping zeroconf going should give confidence that miners will
help prevent 51% attacks; but failure at keeping zeroconf going doesn't
mean they won't be of help. And, of course it assumes that there is a
negative impact on either BTC price or block reward from killing off
zeroconf, which might not be true.

> I have sympathy for the utility argument, but to me it's completely
> overpowered by the "node policy is not consensus and not trustworthy"
> argument.

Anyway, in summary: consistent and predictable relay policy across nodes
remains important and possible whether or not that's a relay policy of
first seen is final, or highest fee rate wins, or something else.

> But for now, I want to run a Full RBF node because I see it as ultimately making Bitcoin stronger. It eliminates a use-case that takes risk.

It seems strange to advocate for preventing other people from voluntarily
taking on a small risk, that's demonstrably quite easily managed, and
also already quite easily avoided.

> Bitcoin is money for enemies.

I mean, if you want to live in a world where everyone's trying to help
someone else steal your money from you, it seems like the existing
banking system already had you covered?

If everyone's actually your enemy, your payments are going to get 51%
attacked, nodes are going to blacklist your utxos, miners are going
to ignore your penalty transactions so you'll lose all your L2 funds,
on-ramps and off-ramps will run KYC and put a hold on all your withdrawals
and confiscate your deposits, and in general Bitcoin isn't going to work
for you.

The point of "money for enemies" isn't that we need to treat other
Bitcoiners as enemies and stop them from doing things we dislike; it's
that to be a Bitcoiner you only need to agree on a few things, almost
none of which are the things that usually cause people to become enemies.

An alternative aphorism might be: Bitcoin is the money of the honest
majority.

That is, it puts the power in the hands of everyone running a node,
operating a miner, or holding their own private keys, rather than in a
few regulators or people with printing presses -- trusting an eclectic
majority rather than an elite minority, perhaps on the basis that you're
more likely to have a few dishonest people getting power out of a mass
of upstanding ordinary folks, rather than the reverse.

YMMV, of course, but I know how I'd prefer to view fellow Bitcoiners,
even the ones that disagree with me. (OTOH, if you claim we're enemies,
and I claim you're honest, where's that end up?)

Cheers,
aj


From billy.tetrud at gmail.com  Tue Dec 13 06:59:27 2022
From: billy.tetrud at gmail.com (Billy Tetrud)
Date: Tue, 13 Dec 2022 00:59:27 -0600
Subject: [bitcoin-dev] Merkleize All The Things
In-Reply-To: <CAMhCMoGabEASO9CGc1hAMpYZn4nWH5D8XFs3eFcSSFAitSFUGA@mail.gmail.com>
References: <CAMhCMoH9uZPeAE_2tWH6rf0RndqV+ypjbNzazpFwFnLUpPsZ7g@mail.gmail.com>
 <CALZpt+GVe0XTdWqV=LAcOj=nq+k2DEFqc+sKyxAujLDBR7bYbQ@mail.gmail.com>
 <CAMhCMoEONv3jriBU3qwm0pt75iF_sgra1H2Z4rOF8u+e7hs_cw@mail.gmail.com>
 <0f352f70-c93a-614f-e443-67d198ec2c26@protonmail.com>
 <7f3674d1-c1ad-9a82-e30f-7cf24d697faf@protonmail.com>
 <CAMhCMoGabEASO9CGc1hAMpYZn4nWH5D8XFs3eFcSSFAitSFUGA@mail.gmail.com>
Message-ID: <CAGpPWDZkUYW=Qb763TPzUa6yUf217nh0Bo+O9Qyf=WS2pUQUYA@mail.gmail.com>

Re Verkle trees, that's a very interesting construction that would be super
useful as a tool for something like Utreexo. A potentially substantial
downside is that it seems the cryptography used to get those nice
properties of Verkle trees isn't quantum safe
<https://vitalik.ca/general/2021/06/18/verkle.html>. While a lot of things
in Bitcoin seems to be going down the path of quantum-unsafe (I'm looking
at you, taproot), there are still a lot of people who think quantum
safety is important in a lot of contexts.

On Thu, Dec 1, 2022 at 5:52 AM Salvatore Ingala via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> Hello Rijndael,
>
>
>
> On Wed, 30 Nov 2022 at 23:09, Rijndael <rot13maxi at protonmail.com> wrote:
>
>> Hello Salvatore,
>>
>> I found my answer re-reading your original post:
>> > During the arbitration phase (say at the i-th leaf node of M_T), any
>> party can win the challenge by providing correct values for tr_i = (st_i,
>> op_i, st_{i + 1}). Crucially, only one party is able to provide correct
>> values, and Script can verify that indeed the state moves from st_i to
>> st_{i + 1} by executing op_i. The challenge is over.
>>
> You are correct, the computation step encoded in a leaf needs to be simple
> enough for Script to verify it.
>
> For the academic purpose of proving completeness (that is, any computation
> can be successfully "proved" by the availability of the corresponding fraud
> proof), one can imagine reducing the computation all the way down to a
> circuit, where each step (leaf) is as simple as what can be checked with
> {OP_NOT, OP_BOOLAND, OP_BOOLOR, OP_EQUAL}.
>
> In practice, you would want to utilize Script to its fullest, so for
> example you wouldn't compile a SHA256 computation to something else ? you'd
> rather use OP_SHA256 directly.
>
>
>> That raises leads to a different question: Alice initially posts a
>> commitment to an execution trace of `f(x) = y`, `x`, and `y`. Bob Disagrees
>> with `y` so starts the challenge protocol. Is there a commitment to `f`? In
>> other words, the dispute protocol (as I read it) finds the leftmost step in
>> Alice and Bob's execution traces that differ, and then rewards the coins to
>> the participant who's "after-value" is computed by the step's operation
>> applied to the "before value". But if the participants each present valid
>> steps but with different operations, who wins? In other words, Alice could
>> present [64, DECREMENT, 63] and Bob could present [64, INCREMENT, 65].
>> Those steps don't match, but both are valid. Is there something to ensure
>> that before the challenge protocol starts, that the execution trace that
>> Alice posts is for the right computation and not a different computation
>> that yields a favorable result for her (and for which she can generate a
>> valid merkle tree)?
>>
>
> The function f is already hard-coded in the contract itself, by means of
> the tree of scripts ? that already commits to the possible futures.
> Therefore, once you are at state S14, you know that you are verifying the
> 6th step of the computation; and the operation in the 6th step of the
> computation depends solely on f, not its inputs. In fact, you made me
> realize that I could drop op_i from the i-th leaf commitment, and just
> embed the information in the Script of that corresponding state.
>
> Note that the states S0 to S14 of the 256x game are not _all_ the possible
> states, but only the ones that occurred in that execution of the contract
> (corresponding to a path from the root to the leaf of the Merkle tree of
> the computation trace), and therefore the ones that materialized in a UTXO.
> Different choices made by the parties (by providing different data, and
> therefore choosing different branches) would lead to a different leaf, and
> therefore to different (but in a certain sense "symmetric") states.
>
> ========
>
> Since we are talking about the fact that f is committed to in the
> contract, I'll take the chance to extend on this a bit with a fun
> construction on top.
> It is well-known in the academic literature of state channels that you can
> create contracts where even the function ("program", or "contract") is not
> decided when the channel is created.
>
> Since f is generic, we can choose f itself to be a universal Turing
> machine. That is, we can imagine a function f(code, data) that executes a
> program ("code") on the "data" given to it as input.
> Since we can do fraud proofs on statements "f(code, data) == output", we
> could build contracts where the "code" itself is chosen later.
>
> For example, one could build a universal state channel, where parties can
> enter any contract among themselves (e.g.: start playing a chess game)
> entirely inside the channel. The state of this universal channel would
> contain all the states of the individual contracts that are currently open
> in the channel, and even starting/closing contracts can happen entirely
> off-chain.
>
> I believe these constructions are practical (the code of universal Turing
> machines is not really complicated), so it might be worth exploring further
> to figure out useful applications of this approach (supercharging
> lightning?).
>
> We should probably start by implementing testnet rock-paper-scissors in
> MATT, though :)
>
> Best,
> Salvatore Ingala
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20221213/21e4f924/attachment-0001.html>

From daniel at gap600.com  Tue Dec 13 08:08:59 2022
From: daniel at gap600.com (Daniel Lipshitz)
Date: Tue, 13 Dec 2022 10:08:59 +0200
Subject: [bitcoin-dev] A proposal for Full RBF to not exclude Zero Conf
 use case
In-Reply-To: <CAAQdECAspoRJRz7j1ubAe=Cen==AVF5bm-Q2=0TiKc7NtbU65A@mail.gmail.com>
References: <CACkWPs_F94t9Q8TfyYYGxQANUT78SWFGkTOh6qRwnt=6ct7aig@mail.gmail.com>
 <CAAQdECAspoRJRz7j1ubAe=Cen==AVF5bm-Q2=0TiKc7NtbU65A@mail.gmail.com>
Message-ID: <CACkWPs_4pjTo50=S86KPEznBs0PU7rd30rBGHq2Q5=6n6hYMgQ@mail.gmail.com>

Thank you for bringing that to my attention, apologies for not being aware
of it.

First-seen-safe replace-by-fee as detailed here
https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-May/008248.html
by Peter Todd  seems to be a very suitable option and route which balances
FullRBF while retaining  the significant 0-conf use case.

This would seem like a good way forward.



________________________________



On Tue, Dec 13, 2022 at 6:20 AM Yuval Kogman <nothingmuch at woobling.org>
wrote:

>
> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-May/008248.html
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20221213/c757eb76/attachment-0001.html>

From john at synonym.to  Tue Dec 13 09:59:36 2022
From: john at synonym.to (John Carvalho)
Date: Tue, 13 Dec 2022 09:59:36 +0000
Subject: [bitcoin-dev] A proposal for Full RBF to not exclude Zero Conf
 use case
In-Reply-To: <CACkWPs_4pjTo50=S86KPEznBs0PU7rd30rBGHq2Q5=6n6hYMgQ@mail.gmail.com>
References: <CACkWPs_F94t9Q8TfyYYGxQANUT78SWFGkTOh6qRwnt=6ct7aig@mail.gmail.com>
 <CAAQdECAspoRJRz7j1ubAe=Cen==AVF5bm-Q2=0TiKc7NtbU65A@mail.gmail.com>
 <CACkWPs_4pjTo50=S86KPEznBs0PU7rd30rBGHq2Q5=6n6hYMgQ@mail.gmail.com>
Message-ID: <CAHTn92wH17Z+p5cFOLpzsVUuTf4-nZc7tOjQr+_xjSU5groa0Q@mail.gmail.com>

Why wasn't this solution put in place back then? Are there problems with
the design?

While I still think there are unhealthy side-effects of Full-RBF (like more
doublespending at unknowing merchants, after years of FSS protection) I
think discussion of this FSS-RBF feature is worth considering.

--
John Carvalho
CEO, Synonym.to <http://synonym.to/>


On Tue, Dec 13, 2022 at 8:09 AM Daniel Lipshitz <daniel at gap600.com> wrote:

> Thank you for bringing that to my attention, apologies for not being aware
> of it.
>
> First-seen-safe replace-by-fee as detailed here
> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-May/008248.html
> by Peter Todd  seems to be a very suitable option and route
> which balances FullRBF while retaining  the significant 0-conf use case.
>
> This would seem like a good way forward.
>
>
>
> ________________________________
>
>
>
> On Tue, Dec 13, 2022 at 6:20 AM Yuval Kogman <nothingmuch at woobling.org>
> wrote:
>
>>
>> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-May/008248.html
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20221213/c18094a9/attachment-0001.html>

From daniel at gap600.com  Tue Dec 13 11:33:00 2022
From: daniel at gap600.com (Daniel Lipshitz)
Date: Tue, 13 Dec 2022 13:33:00 +0200
Subject: [bitcoin-dev] A proposal for Full RBF to not exclude Zero Conf
 use case
In-Reply-To: <CAHTn92wH17Z+p5cFOLpzsVUuTf4-nZc7tOjQr+_xjSU5groa0Q@mail.gmail.com>
References: <CACkWPs_F94t9Q8TfyYYGxQANUT78SWFGkTOh6qRwnt=6ct7aig@mail.gmail.com>
 <CAAQdECAspoRJRz7j1ubAe=Cen==AVF5bm-Q2=0TiKc7NtbU65A@mail.gmail.com>
 <CACkWPs_4pjTo50=S86KPEznBs0PU7rd30rBGHq2Q5=6n6hYMgQ@mail.gmail.com>
 <CAHTn92wH17Z+p5cFOLpzsVUuTf4-nZc7tOjQr+_xjSU5groa0Q@mail.gmail.com>
Message-ID: <CACkWPs9VawCYt7maiNqzafkFnHTiGJQkXMT4VXQQcG-rE2TTNw@mail.gmail.com>

I dont think there was anything technical with the implementation and as
far as I can tell this is well developed and ready.

The reasons I can find for not being adopted are listed here -
https://bitcoincore.org/en/faq/optin_rbf/ under - Why not First-seen-safe
Replace-by-fee

 Those reasons do not seem pertinent here - given OptinRBF already exists
as an option and the added benefit of continuing to be able to support
0-conf.

________________________________

Daniel Lipshitz
GAP600| www.gap600.com
Phone: +44 113 4900 117
Skype: daniellipshitz123
Twitter: @daniellipshitz


On Tue, Dec 13, 2022 at 11:59 AM John Carvalho <john at synonym.to> wrote:

> Why wasn't this solution put in place back then? Are there problems with
> the design?
>
> While I still think there are unhealthy side-effects of Full-RBF (like
> more doublespending at unknowing merchants, after years of FSS protection)
> I think discussion of this FSS-RBF feature is worth considering.
>
> --
> John Carvalho
> CEO, Synonym.to <http://synonym.to/>
>
>
> On Tue, Dec 13, 2022 at 8:09 AM Daniel Lipshitz <daniel at gap600.com> wrote:
>
>> Thank you for bringing that to my attention, apologies for not being
>> aware of it.
>>
>> First-seen-safe replace-by-fee as detailed here
>> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-May/008248.html
>> by Peter Todd  seems to be a very suitable option and route
>> which balances FullRBF while retaining  the significant 0-conf use case.
>>
>> This would seem like a good way forward.
>>
>>
>>
>> ________________________________
>>
>>
>>
>> On Tue, Dec 13, 2022 at 6:20 AM Yuval Kogman <nothingmuch at woobling.org>
>> wrote:
>>
>>>
>>> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-May/008248.html
>>>
>>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20221213/6f6bc8d1/attachment-0001.html>

From fanquake at gmail.com  Tue Dec 13 12:06:47 2022
From: fanquake at gmail.com (Michael Ford)
Date: Tue, 13 Dec 2022 12:06:47 +0000
Subject: [bitcoin-dev] Bitcoin Core 24.0.1 Released
Message-ID: <CAFyhPjWjcLRo6WDzOT+dGSYwq-68gMh-O4hw1O470kanbrq-=w@mail.gmail.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256

Due to last-minute issues (https://github.com/bitcoin/bitcoin/pull/26616),
24.0, although tagged, was never fully announced or released.

Bitcoin Core version 24.0.1 is now available from:

  https://bitcoincore.org/bin/bitcoin-core-24.0.1/

Or through BitTorrent:


 magnet:?xt=urn:btih:d7604a67c8ed6e3b35da15138f8ac81d7618788c&dn=bitcoin-core-24.0.1&tr=udp%3A%2F%
2Ftracker.openbittorrent.com%3A80&tr=udp%3A%2F%2Ftracker.opentrackr.org
%3A1337%2Fannounce&tr=udp%3A%2F%2Ftracker.coppersurfer.tk
%3A6969%2Fannounce&tr=udp%3A%2F%2Ftracker.leechers-paradise.org
%3A6969%2Fannounce&tr=udp%3A%2F%2Fexplodie.org%3A6969%2Fannounce&tr=udp%3A%2F%
2Ftracker.torrent.eu.org%3A451%2Fannounce&tr=udp%3A%2F%
2Ftracker.bitcoin.sprovoost.nl%3A6969

This release includes new features, various bug fixes and performance
improvements, as well as updated translations.

Please report bugs using the issue tracker at GitHub:

  <https://github.com/bitcoin/bitcoin/issues>

To receive security and update notifications, please subscribe to:

  <https://bitcoincore.org/en/list/announcements/join/>

How to Upgrade
==============

If you are running an older version, shut it down. Wait until it has
completely
shut down (which might take a few minutes in some cases), then run the
installer (on Windows) or just copy over `/Applications/Bitcoin-Qt` (on
macOS)
or `bitcoind`/`bitcoin-qt` (on Linux).

Upgrading directly from a version of Bitcoin Core that has reached its EOL
is
possible, but it might take some time if the data directory needs to be
migrated. Old
wallet versions of Bitcoin Core are generally supported.

Compatibility
==============

Bitcoin Core is supported and extensively tested on operating systems
using the Linux kernel, macOS 10.15+, and Windows 7 and newer.  Bitcoin
Core should also work on most other Unix-like systems but is not as
frequently tested on them.  It is not recommended to use Bitcoin Core on
unsupported systems.

Notice of new option for transaction replacement policies
=========================================================

This version of Bitcoin Core adds a new `mempoolfullrbf` configuration
option which allows users to change the policy their individual node
will use for relaying and mining unconfirmed transactions.  The option
defaults to the same policy that was used in previous releases and no
changes to node policy will occur if everyone uses the default.

Some Bitcoin services today expect that the first version of an
unconfirmed transaction that they see will be the version of the
transaction that ultimately gets confirmed---a transaction acceptance
policy sometimes called "first-seen".

The Bitcoin Protocol does not, and cannot, provide any assurance that
the first version of an unconfirmed transaction seen by a particular
node will be the version that gets confirmed.  If there are multiple
versions of the same unconfirmed transaction available, only the miner
who includes one of those transactions in a block gets to decide which
version of the transaction gets confirmed.

Despite this lack of assurance, multiple merchants and services today
still make this assumption.

There are several benefits to users from removing this *first-seen*
simplification.  One key benefit, the ability for the sender of a
transaction to replace it with an alternative version paying higher
fees, was realized in [Bitcoin Core 0.12.0][] (February 2016) with the
introduction of [BIP125][] opt-in Replace By Fee (RBF).

Since then, there has been discussion about completely removing the
first-seen simplification and allowing users to replace any of their
older unconfirmed transactions with newer transactions, a feature called
*full-RBF*.  This release includes a `mempoolfullrbf` configuration
option that allows enabling full-RBF, although it defaults to off
(allowing only opt-in RBF).

Several alternative node implementations have already enabled full-RBF by
default for years, and several contributors to Bitcoin Core are
advocating for enabling full-RBF by default in a future version of
Bitcoin Core.

As more nodes that participate in relay and mining begin enabling
full-RBF, replacement of unconfirmed transactions by ones offering higher
fees may rapidly become more reliable.

Contributors to this project strongly recommend that merchants and services
not accept unconfirmed transactions as final, and if they insist on doing
so,
to take the appropriate steps to ensure they have some recourse or plan for
when their assumptions do not hold.

[Bitcoin Core 0.12.0]:
https://bitcoincore.org/en/releases/0.12.0/#opt-in-replace-by-fee-transactions
[bip125]: https://github.com/bitcoin/bips/blob/master/bip-0125.mediawiki

Notable changes
===============

P2P and network changes
- - -----------------------

- - - To address a potential denial-of-service, the logic to download
headers
from peers
  has been reworked.  This is particularly relevant for nodes starting up
for the
  first time (or for nodes which are starting up after being offline for a
long time).

  Whenever headers are received from a peer that have a total chainwork
that is either
  less than the node's `-minimumchainwork` value or is sufficiently below
the work at
  the node's tip, a "presync" phase will begin, in which the node will
download the
  peer's headers and verify the cumulative work on the peer's chain, prior
to storing
  those headers permanently. Once that cumulative work is verified to be
sufficiently high,
  the headers will be redownloaded from that peer and fully validated and
stored.

  This may result in initial headers sync taking longer for new nodes
starting up for
  the first time, both because the headers will be downloaded twice, and
because the effect
  of a peer disconnecting during the presync phase (or while the node's
best headers chain has less
  than `-minimumchainwork`), will result in the node needing to use the
headers presync mechanism
  with the next peer as well (downloading the headers twice, again).
(#25717)

- - - With I2P connections, a new, transient address is used for each
outbound
  connection if `-i2pacceptincoming=0`. (#25355)

Updated RPCs
- - ------------

- - - The `-deprecatedrpc=softforks` configuration option has been removed.
The
  RPC `getblockchaininfo` no longer returns the `softforks` field, which was
  previously deprecated in 23.0. (#23508) Information on soft fork status is
  now only available via the `getdeploymentinfo` RPC.

- - - The `deprecatedrpc=exclude_coinbase` configuration option has been
removed.
  The `receivedby` RPCs (`listreceivedbyaddress`, `listreceivedbylabel`,
  `getreceivedbyaddress` and `getreceivedbylabel`) now always return results
  accounting for received coins from coinbase outputs, without an option to
  change that behaviour. Excluding coinbases was previously deprecated in
23.0.
  (#25171)

- - - The `deprecatedrpc=fees` configuration option has been removed. The
top-level
  fee fields `fee`, `modifiedfee`, `ancestorfees` and `descendantfees` are
no
  longer returned by RPCs `getmempoolentry`, `getrawmempool(verbose=true)`,
  `getmempoolancestors(verbose=true)` and
`getmempooldescendants(verbose=true)`.
  The same fee fields can be accessed through the `fees` object in the
result.
  The top-level fee fields were previously deprecated in 23.0. (#25204)

- - - The `getpeerinfo` RPC has been updated with a new `presynced_headers`
field,
  indicating the progress on the presync phase mentioned in the
  "P2P and network changes" section above.

Changes to wallet related RPCs can be found in the Wallet section below.

New RPCs
- - --------

- - - The `sendall` RPC spends specific UTXOs to one or more recipients
  without creating change. By default, the `sendall` RPC will spend
  every UTXO in the wallet. `sendall` is useful to empty wallets or to
  create a changeless payment from select UTXOs. When creating a payment
  from a specific amount for which the recipient incurs the transaction
  fee, continue to use the `subtractfeefromamount` option via the
  `send`, `sendtoaddress`, or `sendmany` RPCs. (#24118)

- - - A new `gettxspendingprevout` RPC has been added, which scans the
mempool to find
  transactions spending any of the given outpoints. (#24408)

- - - The `simulaterawtransaction` RPC iterates over the inputs and outputs
of the given
  transactions, and tallies up the balance change for the given wallet.
This can be
  useful e.g. when verifying that a coin join like transaction doesn't
contain unexpected
  inputs that the wallet will then sign for unintentionally. (#22751)

Updated REST APIs
- - -----------------

- - - The `/headers/` and `/blockfilterheaders/` endpoints have been updated
to use
  a query parameter instead of path parameter to specify the result count.
The
  count parameter is now optional, and defaults to 5 for both endpoints.
The old
  endpoints are still functional, and have no documented behaviour change.

  For `/headers`, use
  `GET /rest/headers/<BLOCK-HASH>.<bin|hex|json>?count=<COUNT=5>`
  instead of
  `GET /rest/headers/<COUNT>/<BLOCK-HASH>.<bin|hex|json>` (deprecated)

  For `/blockfilterheaders/`, use
  `GET
/rest/blockfilterheaders/<FILTERTYPE>/<BLOCK-HASH>.<bin|hex|json>?count=<COUNT=5>`
  instead of
  `GET
/rest/blockfilterheaders/<FILTERTYPE>/<COUNT>/<BLOCK-HASH>.<bin|hex|json>`
(deprecated)

  (#24098)

Build System
- - ------------

- - - Guix builds are now reproducible across architectures (x86_64 &
aarch64). (#21194)

New settings
- - ------------

- - - A new `mempoolfullrbf` option has been added, which enables the
mempool
to
  accept transaction replacement without enforcing BIP125 replaceability
  signaling. (#25353)

Wallet
- - ------

- - - The `-walletrbf` startup option will now default to `true`. The
  wallet will now default to opt-in RBF on transactions that it creates.
(#25610)

- - - The `replaceable` option for the `createrawtransaction` and
  `createpsbt` RPCs will now default to `true`. Transactions created
  with these RPCs will default to having opt-in RBF enabled. (#25610)

- - - The `wsh()` output descriptor was extended with Miniscript support.
You
can import Miniscript
  descriptors for P2WSH in a watchonly wallet to track coins, but you can't
spend from them using
  the Bitcoin Core wallet yet.
  You can find more about Miniscript on the [reference website](
https://bitcoin.sipa.be/miniscript/). (#24148)

- - - The `tr()` output descriptor now supports multisig scripts through the
`multi_a()` and
  `sortedmulti_a()` functions. (#24043)

- - - To help prevent fingerprinting transactions created by the Bitcoin
Core
wallet, change output
  amounts are now randomized. (#24494)

- - - The `listtransactions`, `gettransaction`, and `listsinceblock`
  RPC methods now include a wtxid field (hash of serialized transaction,
  including witness data) for each transaction. (#24198)

- - - The `listsinceblock`, `listtransactions` and `gettransaction` output
now contain a new
  `parent_descs` field for every "receive" entry. (#25504)

- - - A new optional `include_change` parameter was added to the
`listsinceblock` command.

- - - RPC `getreceivedbylabel` now returns an error, "Label not found
  in wallet" (-4), if the label is not in the address book. (#25122)

Migrating Legacy Wallets to Descriptor Wallets
- - ---------------------------------------------

An experimental RPC `migratewallet` has been added to migrate Legacy
(non-descriptor) wallets to
Descriptor wallets. More information about the migration process is
available in the
[documentation](
https://github.com/bitcoin/bitcoin/blob/master/doc/managing-wallets.md#migrating-legacy-wallets-to-descriptor-wallets
).

GUI changes
- - -----------

- - - A new menu item to restore a wallet from a backup file has been added
(gui#471).

- - - Configuration changes made in the bitcoin GUI (such as the pruning
setting,
proxy settings, UPNP preferences) are now saved to `<datadir>/settings.json`
file rather than to the Qt settings backend (windows registry or unix
desktop
config files), so these settings will now apply to bitcoind, instead of
being
ignored. (#15936, gui#602)

- - - Also, the interaction between GUI settings and `bitcoin.conf` settings
is
simplified. Settings from `bitcoin.conf` are now displayed normally in the
GUI
settings dialog, instead of in a separate warning message ("Options set in
this
dialog are overridden by the configuration file: -setting=value"). And these
settings can now be edited because `settings.json` values take precedence
over
`bitcoin.conf` values. (#15936)

Low-level changes
=================

RPC
- - ---

- - - The `deriveaddresses`, `getdescriptorinfo`, `importdescriptors` and
`scantxoutset` commands now
  accept Miniscript expression within a `wsh()` descriptor. (#24148)

- - - The `getaddressinfo`, `decodescript`, `listdescriptors` and
`listunspent` commands may now output
  a Miniscript descriptor inside a `wsh()` where a `wsh(raw())` descriptor
was previously returned. (#24148)

Credits
=======

Thanks to everyone who directly contributed to this release:

- - - /dev/fd0
- - - 0xb10c
- - - Adam Jonas
- - - akankshakashyap
- - - Ali Sherief
- - - amadeuszpawlik
- - - Andreas Kouloumos
- - - Andrew Chow
- - - Anthony Towns
- - - Antoine Poinsot
- - - Antoine Riard
- - - Aur?le Oul?s
- - - avirgovi
- - - Ayush Sharma
- - - Baas
- - - Ben Woosley
- - - BrokenProgrammer
- - - brunoerg
- - - brydinh
- - - Bushstar
- - - Calvin Kim
- - - CAnon
- - - Carl Dong
- - - chinggg
- - - Cory Fields
- - - Daniel Kraft
- - - Daniela Brozzoni
- - - darosior
- - - Dave Scotese
- - - David Bakin
- - - dergoegge
- - - dhruv
- - - Dimitri
- - - dontbyte
- - - Duncan Dean
- - - eugene
- - - Eunoia
- - - Fabian Jahr
- - - furszy
- - - Gleb Naumenko
- - - glozow
- - - Greg Weber
- - - Gregory Sanders
- - - gruve-p
- - - Hennadii Stepanov
- - - hiago
- - - Igor Bubelov
- - - ishaanam
- - - Jacob P.
- - - Jadi
- - - James O'Beirne
- - - Janna
- - - Jarol Rodriguez
- - - Jeremy Rand
- - - Jeremy Rubin
- - - jessebarton
- - - Jo?o Barbosa
- - - John Newbery
- - - Jon Atack
- - - Josiah Baker
- - - Karl-Johan Alm
- - - KevinMusgrave
- - - Kiminuo
- - - klementtan
- - - Kolby Moroz
- - - kouloumos
- - - Kristaps Kaupe
- - - Larry Ruane
- - - Luke Dashjr
- - - MarcoFalke
- - - Marnix
- - - Martin Leitner-Ankerl
- - - Martin Zumsande
- - - Michael Dietz
- - - Michael Folkson
- - - Michael Ford
- - - Murch
- - - mutatrum
- - - muxator
- - - Oskar Mendel
- - - Pablo Greco
- - - pasta
- - - Patrick Strateman
- - - Pavol Rusnak
- - - Peter Bushnell
- - - phyBrackets
- - - Pieter Wuille
- - - practicalswift
- - - randymcmillan
- - - Robert Spigler
- - - Russell Yanofsky
- - - S3RK
- - - Samer Afach
- - - Sebastian Falbesoner
- - - Seibart Nedor
- - - Shashwat
- - - Sjors Provoost
- - - Smlep
- - - sogoagain
- - - Stacie
- - - St?phan Vuylsteke
- - - Suhail Saqan
- - - Suhas Daftuar
- - - t-bast
- - - TakeshiMusgrave
- - - Vasil Dimov
- - - W. J. van der Laan
- - - w0xlt
- - - whiteh0rse
- - - willcl-ark
- - - William Casarin
- - - Yancy Ribbens

As well as to everyone that helped with translations on
[Transifex](https://www.transifex.com/bitcoin/bitcoin/).
-----BEGIN PGP SIGNATURE-----

iQIzBAEBCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAmOYaq4ACgkQLuufXMCV
JsH8DQ/+PFPSLM3lOL2yZAHMlXuEKbG8at/H+pXDjwDcZsKs+cuF1Z3JfR6VmAX9
OB8tOvBbqJklZd6GlCeDs4XsBAdXppy50fdZSQ6Dqh7N/+nERUT8GEwTtU11sL7W
vAVWhOmUn5fgCqOI/J2r4jjpZYMDys/NaCUYxmUF5Vm4JaJcs1JIfSUyHtQHdS6t
VIdqb8D2+9mXM7qXbJ6OzF9KzrKFcujRHGPzcTnDvF3kOYKlpjT8w6bfFiBeuSeo
G56X5CR61iXNU5W9HmHIKXBZv6Vnblc9cust7/5ESdgn6OMEnYghnaFSuMsWWAFd
OKAGbuzunh+G9wMl1JWWG4sVVWLDtz6jNwwUu+1a0wrFryYPaPnq/JK09VL32xJr
WKx6iNYqsEcno6kXfjSxLsQTIKzJw2T7iYaQCe8KTpYkaGitNzYMpEtFD68PU/gj
0LEf1sV+BgCuBR7hSBv31pse195Fd/wR71Yk4VVYx26u+82fIhK3ssyWxiiL6ycB
K7FK9Q4QCt0QlO30oD/y/YQMuyVoVCf71qgp5ZB4TehwP+U4qYTp8wiCej7ta0rY
vwjHbFZCYhzw05pIGE7bkbpGjdrnWK5ulaQztGAH6IXw0IPfsh9UJIr42VuXh1Nt
AH6dVC+VwKsr/FjPHuFaj7lwyGw831bKiePptaQYPN9MEELqZqI=
=5tAr
-----END PGP SIGNATURE-----
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20221213/956ca15f/attachment-0001.html>

From lucasontivero at gmail.com  Tue Dec 13 14:00:26 2022
From: lucasontivero at gmail.com (Lucas Ontivero)
Date: Tue, 13 Dec 2022 11:00:26 -0300
Subject: [bitcoin-dev] A proposal for Full RBF to not exclude Zero Conf
 use case
In-Reply-To: <CACkWPs9VawCYt7maiNqzafkFnHTiGJQkXMT4VXQQcG-rE2TTNw@mail.gmail.com>
References: <CACkWPs_F94t9Q8TfyYYGxQANUT78SWFGkTOh6qRwnt=6ct7aig@mail.gmail.com>
 <CAAQdECAspoRJRz7j1ubAe=Cen==AVF5bm-Q2=0TiKc7NtbU65A@mail.gmail.com>
 <CACkWPs_4pjTo50=S86KPEznBs0PU7rd30rBGHq2Q5=6n6hYMgQ@mail.gmail.com>
 <CAHTn92wH17Z+p5cFOLpzsVUuTf4-nZc7tOjQr+_xjSU5groa0Q@mail.gmail.com>
 <CACkWPs9VawCYt7maiNqzafkFnHTiGJQkXMT4VXQQcG-rE2TTNw@mail.gmail.com>
Message-ID: <CALHvQn06ganBSDoCJn32BmRAE9thVfkhJh3HoE+8jrm6imHk3A@mail.gmail.com>

Some wallets like Electrum would be affected by that because they use RBF
to batch transactions so, outputs cannot be exactly the same as before.

On Tue, Dec 13, 2022 at 10:09 AM Daniel Lipshitz via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> I dont think there was anything technical with the implementation and as
> far as I can tell this is well developed and ready.
>
> The reasons I can find for not being adopted are listed here -
> https://bitcoincore.org/en/faq/optin_rbf/ under - Why not First-seen-safe
> Replace-by-fee
>
>  Those reasons do not seem pertinent here - given OptinRBF already exists
> as an option and the added benefit of continuing to be able to support
> 0-conf.
>
> ________________________________
>
> Daniel Lipshitz
> GAP600| www.gap600.com
> Phone: +44 113 4900 117
> Skype: daniellipshitz123
> Twitter: @daniellipshitz
>
>
> On Tue, Dec 13, 2022 at 11:59 AM John Carvalho <john at synonym.to> wrote:
>
>> Why wasn't this solution put in place back then? Are there problems with
>> the design?
>>
>> While I still think there are unhealthy side-effects of Full-RBF (like
>> more doublespending at unknowing merchants, after years of FSS protection)
>> I think discussion of this FSS-RBF feature is worth considering.
>>
>> --
>> John Carvalho
>> CEO, Synonym.to <http://synonym.to/>
>>
>>
>> On Tue, Dec 13, 2022 at 8:09 AM Daniel Lipshitz <daniel at gap600.com>
>> wrote:
>>
>>> Thank you for bringing that to my attention, apologies for not being
>>> aware of it.
>>>
>>> First-seen-safe replace-by-fee as detailed here
>>> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-May/008248.html
>>> by Peter Todd  seems to be a very suitable option and route
>>> which balances FullRBF while retaining  the significant 0-conf use case.
>>>
>>> This would seem like a good way forward.
>>>
>>>
>>>
>>> ________________________________
>>>
>>>
>>>
>>> On Tue, Dec 13, 2022 at 6:20 AM Yuval Kogman <nothingmuch at woobling.org>
>>> wrote:
>>>
>>>>
>>>> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-May/008248.html
>>>>
>>> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20221213/22889b45/attachment.html>

From daniel at gap600.com  Tue Dec 13 14:08:10 2022
From: daniel at gap600.com (Daniel Lipshitz)
Date: Tue, 13 Dec 2022 16:08:10 +0200
Subject: [bitcoin-dev] A proposal for Full RBF to not exclude Zero Conf
 use case
In-Reply-To: <CALHvQn06ganBSDoCJn32BmRAE9thVfkhJh3HoE+8jrm6imHk3A@mail.gmail.com>
References: <CACkWPs_F94t9Q8TfyYYGxQANUT78SWFGkTOh6qRwnt=6ct7aig@mail.gmail.com>
 <CAAQdECAspoRJRz7j1ubAe=Cen==AVF5bm-Q2=0TiKc7NtbU65A@mail.gmail.com>
 <CACkWPs_4pjTo50=S86KPEznBs0PU7rd30rBGHq2Q5=6n6hYMgQ@mail.gmail.com>
 <CAHTn92wH17Z+p5cFOLpzsVUuTf4-nZc7tOjQr+_xjSU5groa0Q@mail.gmail.com>
 <CACkWPs9VawCYt7maiNqzafkFnHTiGJQkXMT4VXQQcG-rE2TTNw@mail.gmail.com>
 <CALHvQn06ganBSDoCJn32BmRAE9thVfkhJh3HoE+8jrm6imHk3A@mail.gmail.com>
Message-ID: <CACkWPs_ughWg-uRrWEWu_EeW8Ksvq1+aLtCvcu-NyVA=4=bUvg@mail.gmail.com>

This would not effect optinrbf only fullRBF

On Tue, 13 Dec 2022 at 16:00 Lucas Ontivero <lucasontivero at gmail.com> wrote:

> Some wallets like Electrum would be affected by that because they use RBF
> to batch transactions so, outputs cannot be exactly the same as before.
>
> On Tue, Dec 13, 2022 at 10:09 AM Daniel Lipshitz via bitcoin-dev <
> bitcoin-dev at lists.linuxfoundation.org> wrote:
>
>> I dont think there was anything technical with the implementation and as
>> far as I can tell this is well developed and ready.
>>
>> The reasons I can find for not being adopted are listed here -
>> https://bitcoincore.org/en/faq/optin_rbf/ under - Why not
>> First-seen-safe Replace-by-fee
>>
>>  Those reasons do not seem pertinent here - given OptinRBF already exists
>> as an option and the added benefit of continuing to be able to support
>> 0-conf.
>>
>> ________________________________
>>
>> Daniel Lipshitz
>> GAP600| www.gap600.com
>> Phone: +44 113 4900 117
>> Skype: daniellipshitz123
>> Twitter: @daniellipshitz
>>
>>
>> On Tue, Dec 13, 2022 at 11:59 AM John Carvalho <john at synonym.to> wrote:
>>
>>> Why wasn't this solution put in place back then? Are there problems with
>>> the design?
>>>
>>> While I still think there are unhealthy side-effects of Full-RBF (like
>>> more doublespending at unknowing merchants, after years of FSS protection)
>>> I think discussion of this FSS-RBF feature is worth considering.
>>>
>>> --
>>> John Carvalho
>>> CEO, Synonym.to <http://synonym.to/>
>>>
>>>
>>> On Tue, Dec 13, 2022 at 8:09 AM Daniel Lipshitz <daniel at gap600.com>
>>> wrote:
>>>
>>>> Thank you for bringing that to my attention, apologies for not being
>>>> aware of it.
>>>>
>>>> First-seen-safe replace-by-fee as detailed here
>>>> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-May/008248.html
>>>> by Peter Todd  seems to be a very suitable option and route
>>>> which balances FullRBF while retaining  the significant 0-conf use case.
>>>>
>>>> This would seem like a good way forward.
>>>>
>>>>
>>>>
>>>> ________________________________
>>>>
>>>>
>>>>
>>>> On Tue, Dec 13, 2022 at 6:20 AM Yuval Kogman <nothingmuch at woobling.org>
>>>> wrote:
>>>>
>>>>>
>>>>> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-May/008248.html
>>>>>
>>>> _______________________________________________
>> bitcoin-dev mailing list
>> bitcoin-dev at lists.linuxfoundation.org
>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>>
> --
________________________________
Daniel Lipshitz
GAP600
www.Gap600.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20221213/2d2e901c/attachment.html>

From pete at petertodd.org  Tue Dec 13 21:17:21 2022
From: pete at petertodd.org (Peter Todd)
Date: Tue, 13 Dec 2022 16:17:21 -0500
Subject: [bitcoin-dev] Bitcoin Core 24.0.1 Released
In-Reply-To: <CAFyhPjWjcLRo6WDzOT+dGSYwq-68gMh-O4hw1O470kanbrq-=w@mail.gmail.com>
References: <CAFyhPjWjcLRo6WDzOT+dGSYwq-68gMh-O4hw1O470kanbrq-=w@mail.gmail.com>
Message-ID: <Y5jr4UMPza/Rp9zb@petertodd.org>

On Tue, Dec 13, 2022 at 12:06:47PM +0000, Michael Ford via bitcoin-dev wrote:
> Due to last-minute issues (https://github.com/bitcoin/bitcoin/pull/26616),
> 24.0, although tagged, was never fully announced or released.
> 
> Bitcoin Core version 24.0.1 is now available from:
> 
>   https://bitcoincore.org/bin/bitcoin-core-24.0.1/

Note that the PGP signature on this email is bad:

    [-- PGP output follows (current time: Tue 13 Dec 2022 04:15:30 PM EST) --]
    gpg: WARNING: no command supplied.  Trying to guess what you mean ...
    gpg: Signature made Tue 13 Dec 2022 07:06:06 AM EST
    gpg:                using RSA key CFB16E21C950F67FA95E558F2EEB9F5CC09526C1
    gpg: BAD signature from "Michael Ford (bitcoin-otc) <fanquake at gmail.com>" [full]
    [-- End of PGP output --]

    [-- BEGIN PGP SIGNED MESSAGE --]

    Due to last-minute issues (https://github.com/bitcoin/bitcoin/pull/26616),
    24.0, although tagged, was never fully announced or released.

The announcement on bitcoin-core-dev was had an invalid signature.

Likely some formatting error - your mail client also send it as text and html
at the same time. No-one should be sending html emails to this mailing list.

-- 
https://petertodd.org 'peter'[:-1]@petertodd.org
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 833 bytes
Desc: not available
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20221213/e7c06640/attachment-0001.sig>

From lf-lists at mattcorallo.com  Tue Dec 13 21:28:13 2022
From: lf-lists at mattcorallo.com (Matt Corallo)
Date: Tue, 13 Dec 2022 13:28:13 -0800
Subject: [bitcoin-dev] Bitcoin Core 24.0.1 Released
In-Reply-To: <Y5jr4UMPza/Rp9zb@petertodd.org>
References: <CAFyhPjWjcLRo6WDzOT+dGSYwq-68gMh-O4hw1O470kanbrq-=w@mail.gmail.com>
 <Y5jr4UMPza/Rp9zb@petertodd.org>
Message-ID: <e23eb9a2-5260-fd64-f3fb-f37ff94e7369@mattcorallo.com>

The signature verifies for me, however the email was sent HTML and the signature only verifies in 
plaintext, so I had to copy it into a text file. I've included the email as-verified below.

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256

Due to last-minute issues (https://github.com/bitcoin/bitcoin/pull/26616),
24.0, although tagged, was never fully announced or released.

Bitcoin Core version 24.0.1 is now available from:

   https://bitcoincore.org/bin/bitcoin-core-24.0.1/

Or through BitTorrent:


  magnet:?xt=urn:btih:d7604a67c8ed6e3b35da15138f8ac81d7618788c&dn=bitcoin-core-24.0.1&tr=udp%3A%2F%
2Ftracker.openbittorrent.com%3A80&tr=udp%3A%2F%2Ftracker.opentrackr.org
%3A1337%2Fannounce&tr=udp%3A%2F%2Ftracker.coppersurfer.tk
%3A6969%2Fannounce&tr=udp%3A%2F%2Ftracker.leechers-paradise.org
%3A6969%2Fannounce&tr=udp%3A%2F%2Fexplodie.org%3A6969%2Fannounce&tr=udp%3A%2F%
2Ftracker.torrent.eu.org%3A451%2Fannounce&tr=udp%3A%2F%
2Ftracker.bitcoin.sprovoost.nl%3A6969

This release includes new features, various bug fixes and performance
improvements, as well as updated translations.

Please report bugs using the issue tracker at GitHub:

   <https://github.com/bitcoin/bitcoin/issues>

To receive security and update notifications, please subscribe to:

   <https://bitcoincore.org/en/list/announcements/join/>

How to Upgrade
==============

If you are running an older version, shut it down. Wait until it has
completely
shut down (which might take a few minutes in some cases), then run the
installer (on Windows) or just copy over `/Applications/Bitcoin-Qt` (on
macOS)
or `bitcoind`/`bitcoin-qt` (on Linux).

Upgrading directly from a version of Bitcoin Core that has reached its EOL
is
possible, but it might take some time if the data directory needs to be
migrated. Old
wallet versions of Bitcoin Core are generally supported.

Compatibility
==============

Bitcoin Core is supported and extensively tested on operating systems
using the Linux kernel, macOS 10.15+, and Windows 7 and newer.  Bitcoin
Core should also work on most other Unix-like systems but is not as
frequently tested on them.  It is not recommended to use Bitcoin Core on
unsupported systems.

Notice of new option for transaction replacement policies
=========================================================

This version of Bitcoin Core adds a new `mempoolfullrbf` configuration
option which allows users to change the policy their individual node
will use for relaying and mining unconfirmed transactions.  The option
defaults to the same policy that was used in previous releases and no
changes to node policy will occur if everyone uses the default.

Some Bitcoin services today expect that the first version of an
unconfirmed transaction that they see will be the version of the
transaction that ultimately gets confirmed---a transaction acceptance
policy sometimes called "first-seen".

The Bitcoin Protocol does not, and cannot, provide any assurance that
the first version of an unconfirmed transaction seen by a particular
node will be the version that gets confirmed.  If there are multiple
versions of the same unconfirmed transaction available, only the miner
who includes one of those transactions in a block gets to decide which
version of the transaction gets confirmed.

Despite this lack of assurance, multiple merchants and services today
still make this assumption.

There are several benefits to users from removing this *first-seen*
simplification.  One key benefit, the ability for the sender of a
transaction to replace it with an alternative version paying higher
fees, was realized in [Bitcoin Core 0.12.0][] (February 2016) with the
introduction of [BIP125][] opt-in Replace By Fee (RBF).

Since then, there has been discussion about completely removing the
first-seen simplification and allowing users to replace any of their
older unconfirmed transactions with newer transactions, a feature called
*full-RBF*.  This release includes a `mempoolfullrbf` configuration
option that allows enabling full-RBF, although it defaults to off
(allowing only opt-in RBF).

Several alternative node implementations have already enabled full-RBF by
default for years, and several contributors to Bitcoin Core are
advocating for enabling full-RBF by default in a future version of
Bitcoin Core.

As more nodes that participate in relay and mining begin enabling
full-RBF, replacement of unconfirmed transactions by ones offering higher
fees may rapidly become more reliable.

Contributors to this project strongly recommend that merchants and services
not accept unconfirmed transactions as final, and if they insist on doing
so,
to take the appropriate steps to ensure they have some recourse or plan for
when their assumptions do not hold.

[Bitcoin Core 0.12.0]:
https://bitcoincore.org/en/releases/0.12.0/#opt-in-replace-by-fee-transactions
[bip125]: https://github.com/bitcoin/bips/blob/master/bip-0125.mediawiki

Notable changes
===============

P2P and network changes
- - -----------------------

- - - To address a potential denial-of-service, the logic to download headers
from peers
   has been reworked.  This is particularly relevant for nodes starting up
for the
   first time (or for nodes which are starting up after being offline for a
long time).

   Whenever headers are received from a peer that have a total chainwork
that is either
   less than the node's `-minimumchainwork` value or is sufficiently below
the work at
   the node's tip, a "presync" phase will begin, in which the node will
download the
   peer's headers and verify the cumulative work on the peer's chain, prior
to storing
   those headers permanently. Once that cumulative work is verified to be
sufficiently high,
   the headers will be redownloaded from that peer and fully validated and
stored.

   This may result in initial headers sync taking longer for new nodes
starting up for
   the first time, both because the headers will be downloaded twice, and
because the effect
   of a peer disconnecting during the presync phase (or while the node's
best headers chain has less
   than `-minimumchainwork`), will result in the node needing to use the
headers presync mechanism
   with the next peer as well (downloading the headers twice, again).
(#25717)

- - - With I2P connections, a new, transient address is used for each outbound
   connection if `-i2pacceptincoming=0`. (#25355)

Updated RPCs
- - ------------

- - - The `-deprecatedrpc=softforks` configuration option has been removed.
The
   RPC `getblockchaininfo` no longer returns the `softforks` field, which was
   previously deprecated in 23.0. (#23508) Information on soft fork status is
   now only available via the `getdeploymentinfo` RPC.

- - - The `deprecatedrpc=exclude_coinbase` configuration option has been
removed.
   The `receivedby` RPCs (`listreceivedbyaddress`, `listreceivedbylabel`,
   `getreceivedbyaddress` and `getreceivedbylabel`) now always return results
   accounting for received coins from coinbase outputs, without an option to
   change that behaviour. Excluding coinbases was previously deprecated in
23.0.
   (#25171)

- - - The `deprecatedrpc=fees` configuration option has been removed. The
top-level
   fee fields `fee`, `modifiedfee`, `ancestorfees` and `descendantfees` are
no
   longer returned by RPCs `getmempoolentry`, `getrawmempool(verbose=true)`,
   `getmempoolancestors(verbose=true)` and
`getmempooldescendants(verbose=true)`.
   The same fee fields can be accessed through the `fees` object in the
result.
   The top-level fee fields were previously deprecated in 23.0. (#25204)

- - - The `getpeerinfo` RPC has been updated with a new `presynced_headers`
field,
   indicating the progress on the presync phase mentioned in the
   "P2P and network changes" section above.

Changes to wallet related RPCs can be found in the Wallet section below.

New RPCs
- - --------

- - - The `sendall` RPC spends specific UTXOs to one or more recipients
   without creating change. By default, the `sendall` RPC will spend
   every UTXO in the wallet. `sendall` is useful to empty wallets or to
   create a changeless payment from select UTXOs. When creating a payment
   from a specific amount for which the recipient incurs the transaction
   fee, continue to use the `subtractfeefromamount` option via the
   `send`, `sendtoaddress`, or `sendmany` RPCs. (#24118)

- - - A new `gettxspendingprevout` RPC has been added, which scans the
mempool to find
   transactions spending any of the given outpoints. (#24408)

- - - The `simulaterawtransaction` RPC iterates over the inputs and outputs
of the given
   transactions, and tallies up the balance change for the given wallet.
This can be
   useful e.g. when verifying that a coin join like transaction doesn't
contain unexpected
   inputs that the wallet will then sign for unintentionally. (#22751)

Updated REST APIs
- - -----------------

- - - The `/headers/` and `/blockfilterheaders/` endpoints have been updated
to use
   a query parameter instead of path parameter to specify the result count.
The
   count parameter is now optional, and defaults to 5 for both endpoints.
The old
   endpoints are still functional, and have no documented behaviour change.

   For `/headers`, use
   `GET /rest/headers/<BLOCK-HASH>.<bin|hex|json>?count=<COUNT=5>`
   instead of
   `GET /rest/headers/<COUNT>/<BLOCK-HASH>.<bin|hex|json>` (deprecated)

   For `/blockfilterheaders/`, use
   `GET
/rest/blockfilterheaders/<FILTERTYPE>/<BLOCK-HASH>.<bin|hex|json>?count=<COUNT=5>`
   instead of
   `GET
/rest/blockfilterheaders/<FILTERTYPE>/<COUNT>/<BLOCK-HASH>.<bin|hex|json>`
(deprecated)

   (#24098)

Build System
- - ------------

- - - Guix builds are now reproducible across architectures (x86_64 &
aarch64). (#21194)

New settings
- - ------------

- - - A new `mempoolfullrbf` option has been added, which enables the mempool
to
   accept transaction replacement without enforcing BIP125 replaceability
   signaling. (#25353)

Wallet
- - ------

- - - The `-walletrbf` startup option will now default to `true`. The
   wallet will now default to opt-in RBF on transactions that it creates.
(#25610)

- - - The `replaceable` option for the `createrawtransaction` and
   `createpsbt` RPCs will now default to `true`. Transactions created
   with these RPCs will default to having opt-in RBF enabled. (#25610)

- - - The `wsh()` output descriptor was extended with Miniscript support. You
can import Miniscript
   descriptors for P2WSH in a watchonly wallet to track coins, but you can't
spend from them using
   the Bitcoin Core wallet yet.
   You can find more about Miniscript on the [reference website](
https://bitcoin.sipa.be/miniscript/). (#24148)

- - - The `tr()` output descriptor now supports multisig scripts through the
`multi_a()` and
   `sortedmulti_a()` functions. (#24043)

- - - To help prevent fingerprinting transactions created by the Bitcoin Core
wallet, change output
   amounts are now randomized. (#24494)

- - - The `listtransactions`, `gettransaction`, and `listsinceblock`
   RPC methods now include a wtxid field (hash of serialized transaction,
   including witness data) for each transaction. (#24198)

- - - The `listsinceblock`, `listtransactions` and `gettransaction` output
now contain a new
   `parent_descs` field for every "receive" entry. (#25504)

- - - A new optional `include_change` parameter was added to the
`listsinceblock` command.

- - - RPC `getreceivedbylabel` now returns an error, "Label not found
   in wallet" (-4), if the label is not in the address book. (#25122)

Migrating Legacy Wallets to Descriptor Wallets
- - ---------------------------------------------

An experimental RPC `migratewallet` has been added to migrate Legacy
(non-descriptor) wallets to
Descriptor wallets. More information about the migration process is
available in the
[documentation](
https://github.com/bitcoin/bitcoin/blob/master/doc/managing-wallets.md#migrating-legacy-wallets-to-descriptor-wallets
).

GUI changes
- - -----------

- - - A new menu item to restore a wallet from a backup file has been added
(gui#471).

- - - Configuration changes made in the bitcoin GUI (such as the pruning
setting,
proxy settings, UPNP preferences) are now saved to `<datadir>/settings.json`
file rather than to the Qt settings backend (windows registry or unix
desktop
config files), so these settings will now apply to bitcoind, instead of
being
ignored. (#15936, gui#602)

- - - Also, the interaction between GUI settings and `bitcoin.conf` settings
is
simplified. Settings from `bitcoin.conf` are now displayed normally in the
GUI
settings dialog, instead of in a separate warning message ("Options set in
this
dialog are overridden by the configuration file: -setting=value"). And these
settings can now be edited because `settings.json` values take precedence
over
`bitcoin.conf` values. (#15936)

Low-level changes
=================

RPC
- - ---

- - - The `deriveaddresses`, `getdescriptorinfo`, `importdescriptors` and
`scantxoutset` commands now
   accept Miniscript expression within a `wsh()` descriptor. (#24148)

- - - The `getaddressinfo`, `decodescript`, `listdescriptors` and
`listunspent` commands may now output
   a Miniscript descriptor inside a `wsh()` where a `wsh(raw())` descriptor
was previously returned. (#24148)

Credits
=======

Thanks to everyone who directly contributed to this release:

- - - /dev/fd0
- - - 0xb10c
- - - Adam Jonas
- - - akankshakashyap
- - - Ali Sherief
- - - amadeuszpawlik
- - - Andreas Kouloumos
- - - Andrew Chow
- - - Anthony Towns
- - - Antoine Poinsot
- - - Antoine Riard
- - - Aur?le Oul?s
- - - avirgovi
- - - Ayush Sharma
- - - Baas
- - - Ben Woosley
- - - BrokenProgrammer
- - - brunoerg
- - - brydinh
- - - Bushstar
- - - Calvin Kim
- - - CAnon
- - - Carl Dong
- - - chinggg
- - - Cory Fields
- - - Daniel Kraft
- - - Daniela Brozzoni
- - - darosior
- - - Dave Scotese
- - - David Bakin
- - - dergoegge
- - - dhruv
- - - Dimitri
- - - dontbyte
- - - Duncan Dean
- - - eugene
- - - Eunoia
- - - Fabian Jahr
- - - furszy
- - - Gleb Naumenko
- - - glozow
- - - Greg Weber
- - - Gregory Sanders
- - - gruve-p
- - - Hennadii Stepanov
- - - hiago
- - - Igor Bubelov
- - - ishaanam
- - - Jacob P.
- - - Jadi
- - - James O'Beirne
- - - Janna
- - - Jarol Rodriguez
- - - Jeremy Rand
- - - Jeremy Rubin
- - - jessebarton
- - - Jo?o Barbosa
- - - John Newbery
- - - Jon Atack
- - - Josiah Baker
- - - Karl-Johan Alm
- - - KevinMusgrave
- - - Kiminuo
- - - klementtan
- - - Kolby Moroz
- - - kouloumos
- - - Kristaps Kaupe
- - - Larry Ruane
- - - Luke Dashjr
- - - MarcoFalke
- - - Marnix
- - - Martin Leitner-Ankerl
- - - Martin Zumsande
- - - Michael Dietz
- - - Michael Folkson
- - - Michael Ford
- - - Murch
- - - mutatrum
- - - muxator
- - - Oskar Mendel
- - - Pablo Greco
- - - pasta
- - - Patrick Strateman
- - - Pavol Rusnak
- - - Peter Bushnell
- - - phyBrackets
- - - Pieter Wuille
- - - practicalswift
- - - randymcmillan
- - - Robert Spigler
- - - Russell Yanofsky
- - - S3RK
- - - Samer Afach
- - - Sebastian Falbesoner
- - - Seibart Nedor
- - - Shashwat
- - - Sjors Provoost
- - - Smlep
- - - sogoagain
- - - Stacie
- - - St?phan Vuylsteke
- - - Suhail Saqan
- - - Suhas Daftuar
- - - t-bast
- - - TakeshiMusgrave
- - - Vasil Dimov
- - - W. J. van der Laan
- - - w0xlt
- - - whiteh0rse
- - - willcl-ark
- - - William Casarin
- - - Yancy Ribbens

As well as to everyone that helped with translations on
[Transifex](https://www.transifex.com/bitcoin/bitcoin/).
-----BEGIN PGP SIGNATURE-----

iQIzBAEBCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAmOYaq4ACgkQLuufXMCV
JsH8DQ/+PFPSLM3lOL2yZAHMlXuEKbG8at/H+pXDjwDcZsKs+cuF1Z3JfR6VmAX9
OB8tOvBbqJklZd6GlCeDs4XsBAdXppy50fdZSQ6Dqh7N/+nERUT8GEwTtU11sL7W
vAVWhOmUn5fgCqOI/J2r4jjpZYMDys/NaCUYxmUF5Vm4JaJcs1JIfSUyHtQHdS6t
VIdqb8D2+9mXM7qXbJ6OzF9KzrKFcujRHGPzcTnDvF3kOYKlpjT8w6bfFiBeuSeo
G56X5CR61iXNU5W9HmHIKXBZv6Vnblc9cust7/5ESdgn6OMEnYghnaFSuMsWWAFd
OKAGbuzunh+G9wMl1JWWG4sVVWLDtz6jNwwUu+1a0wrFryYPaPnq/JK09VL32xJr
WKx6iNYqsEcno6kXfjSxLsQTIKzJw2T7iYaQCe8KTpYkaGitNzYMpEtFD68PU/gj
0LEf1sV+BgCuBR7hSBv31pse195Fd/wR71Yk4VVYx26u+82fIhK3ssyWxiiL6ycB
K7FK9Q4QCt0QlO30oD/y/YQMuyVoVCf71qgp5ZB4TehwP+U4qYTp8wiCej7ta0rY
vwjHbFZCYhzw05pIGE7bkbpGjdrnWK5ulaQztGAH6IXw0IPfsh9UJIr42VuXh1Nt
AH6dVC+VwKsr/FjPHuFaj7lwyGw831bKiePptaQYPN9MEELqZqI=
=5tAr
-----END PGP SIGNATURE-----

On 12/13/22 1:17?PM, Peter Todd via bitcoin-dev wrote:
> On Tue, Dec 13, 2022 at 12:06:47PM +0000, Michael Ford via bitcoin-dev wrote:
>> Due to last-minute issues (https://github.com/bitcoin/bitcoin/pull/26616),
>> 24.0, although tagged, was never fully announced or released.
>>
>> Bitcoin Core version 24.0.1 is now available from:
>>
>>    https://bitcoincore.org/bin/bitcoin-core-24.0.1/
> 
> Note that the PGP signature on this email is bad:
> 
>      [-- PGP output follows (current time: Tue 13 Dec 2022 04:15:30 PM EST) --]
>      gpg: WARNING: no command supplied.  Trying to guess what you mean ...
>      gpg: Signature made Tue 13 Dec 2022 07:06:06 AM EST
>      gpg:                using RSA key CFB16E21C950F67FA95E558F2EEB9F5CC09526C1
>      gpg: BAD signature from "Michael Ford (bitcoin-otc) <fanquake at gmail.com>" [full]
>      [-- End of PGP output --]
> 
>      [-- BEGIN PGP SIGNED MESSAGE --]
> 
>      Due to last-minute issues (https://github.com/bitcoin/bitcoin/pull/26616),
>      24.0, although tagged, was never fully announced or released.
> 
> The announcement on bitcoin-core-dev was had an invalid signature.
> 
> Likely some formatting error - your mail client also send it as text and html
> at the same time. No-one should be sending html emails to this mailing list.
> 
> 
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev

From pete at petertodd.org  Tue Dec 13 21:41:44 2022
From: pete at petertodd.org (Peter Todd)
Date: Tue, 13 Dec 2022 16:41:44 -0500
Subject: [bitcoin-dev] A proposal for Full RBF to not exclude Zero Conf
 use case
In-Reply-To: <CACkWPs9VawCYt7maiNqzafkFnHTiGJQkXMT4VXQQcG-rE2TTNw@mail.gmail.com>
References: <CACkWPs_F94t9Q8TfyYYGxQANUT78SWFGkTOh6qRwnt=6ct7aig@mail.gmail.com>
 <CAAQdECAspoRJRz7j1ubAe=Cen==AVF5bm-Q2=0TiKc7NtbU65A@mail.gmail.com>
 <CACkWPs_4pjTo50=S86KPEznBs0PU7rd30rBGHq2Q5=6n6hYMgQ@mail.gmail.com>
 <CAHTn92wH17Z+p5cFOLpzsVUuTf4-nZc7tOjQr+_xjSU5groa0Q@mail.gmail.com>
 <CACkWPs9VawCYt7maiNqzafkFnHTiGJQkXMT4VXQQcG-rE2TTNw@mail.gmail.com>
Message-ID: <Y5jxmItJIpIUVY+x@petertodd.org>

On Tue, Dec 13, 2022 at 01:33:00PM +0200, Daniel Lipshitz wrote:
> I dont think there was anything technical with the implementation and as
> far as I can tell this is well developed and ready.

There are lots of problems with my first-seen-safe proposal. The only reason I
proposed it in 2015 was as a political compromise.

> The reasons I can find for not being adopted are listed here -
> https://bitcoincore.org/en/faq/optin_rbf/ under - Why not First-seen-safe
> Replace-by-fee
> 
>  Those reasons do not seem pertinent here - given OptinRBF already exists
> as an option and the added benefit of continuing to be able to support
> 0-conf.

First-seen-safe is incompatible with the #1 reason why mempoolfullrbf was
merged into Bitcoin Core: multi-party transactions.

With multi-party transactions such as coinjoins and multi-party lightning
channels, we want full-rbf behavior because it avoids accidental double-spends
holding up progress in these protocols. Second, for intentional DoS attacks, it
makes those attacks much more expensive by forcing the attacker to use
tx-pinning.

Nothing less than full-rbf without restritions on outputs works for this
use-case. The only compromise possible is Antoine Riard's spent-nVersion
signalling proposal?, which has a significant, negative, privacy impact?. It
also increases costs and time in many cases, as you often have to create new
outputs to flag full-rbf.

Thus we have a political tradeoff between a handful of centralized services
such as yours that benefit from the first-seen status quo, and the much larger
group of users that use Lightning and coinjoins. We've already been through
such a political tradeoff before with the blocksize debate - again, the
centralized payment providers lost the debate.


Anyway, my advice to you is to either change your business model to make use of
scalable instant payment tech such as Lightning. Or give up on Bitcoin and
expand your business with other chians, such as BSV?. The fact is some hashing
power is already beginning to run with full-rbf?, and I fully expect that % to
increase over time.

1) https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-November/021144.html
2) https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-December/021250.html
3) https://www.gap600.com/bitcoin/gap600-supports-bsv/
4) https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-December/021260.html

-- 
https://petertodd.org 'peter'[:-1]@petertodd.org
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 833 bytes
Desc: not available
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20221213/0da664f7/attachment-0001.sig>

From daniel at gap600.com  Tue Dec 13 21:58:31 2022
From: daniel at gap600.com (Daniel Lipshitz)
Date: Tue, 13 Dec 2022 23:58:31 +0200
Subject: [bitcoin-dev] A proposal for Full RBF to not exclude Zero Conf
 use case
In-Reply-To: <Y5jxmItJIpIUVY+x@petertodd.org>
References: <CACkWPs_F94t9Q8TfyYYGxQANUT78SWFGkTOh6qRwnt=6ct7aig@mail.gmail.com>
 <CAAQdECAspoRJRz7j1ubAe=Cen==AVF5bm-Q2=0TiKc7NtbU65A@mail.gmail.com>
 <CACkWPs_4pjTo50=S86KPEznBs0PU7rd30rBGHq2Q5=6n6hYMgQ@mail.gmail.com>
 <CAHTn92wH17Z+p5cFOLpzsVUuTf4-nZc7tOjQr+_xjSU5groa0Q@mail.gmail.com>
 <CACkWPs9VawCYt7maiNqzafkFnHTiGJQkXMT4VXQQcG-rE2TTNw@mail.gmail.com>
 <Y5jxmItJIpIUVY+x@petertodd.org>
Message-ID: <CACkWPs_jSLDg3seON0uu=ri6iR9cytXo2MEPJ5PVeap+iDreeQ@mail.gmail.com>

On Tue, 13 Dec 2022 at 23:41 Peter Todd <pete at petertodd.org> wrote:

> On Tue, Dec 13, 2022 at 01:33:00PM +0200, Daniel Lipshitz wrote:
> > I dont think there was anything technical with the implementation and as
> > far as I can tell this is well developed and ready.
>
> There are lots of problems with my first-seen-safe proposal. The only
> reason I
> proposed it in 2015 was as a political compromise.
>
> > The reasons I can find for not being adopted are listed here -
> > https://bitcoincore.org/en/faq/optin_rbf/ under - Why not
> First-seen-safe
> > Replace-by-fee
> >
> >  Those reasons do not seem pertinent here - given OptinRBF already exists
> > as an option and the added benefit of continuing to be able to support
> > 0-conf.
>
> First-seen-safe is incompatible with the #1 reason why mempoolfullrbf was
> merged into Bitcoin Core: multi-party transactions.
>
> With multi-party transactions such as coinjoins and multi-party lightning
> channels, we want full-rbf behavior because it avoids accidental
> double-spends
> holding up progress in these protocols.

what is meant by accidental double spends ? And do you have any data as to
how often these occur and would cause harm?

Second, for intentional DoS attacks, it
> makes those attacks much more expensive by forcing the attacker to use
> tx-pinning.

how are these Dos attacks mitigated today if Full RBF is not in place ?

>
>
> Nothing less than full-rbf without restritions on outputs works for this
> use-case. The only compromise possible is Antoine Riard's spent-nVersion
> signalling proposal?, which has a significant, negative, privacy impact?.
> It
> also increases costs and time in many cases, as you often have to create
> new
> outputs to flag full-rbf.
>
> Thus we have a political tradeoff between a handful of centralized services
> such as yours that benefit from the first-seen status quo, and the much
> larger
> group of users that use Lightning and coinjoins.

How many users are currently using Lightning and coinjoins today ?

> We've already been through
> such a political tradeoff before with the blocksize debate - again, the
> centralized payment providers lost the debate.

I don?t think this has anything to do with block size debate or
decentralisation just looking to protect a significant use case that has
been in place - GAP600 is by no means the only service provider is this
place there are many merchants who do 0-conf on there own.

>
>
>
> Anyway, my advice to you is to either change your business model to make
> use of
> scalable instant payment tech such as Lightning. Or give up on Bitcoin and
> expand your business with other chians, such as BSV?. The fact is some
> hashing
> power is already beginning to run with full-rbf?, and I fully expect that
> % to
> increase over time.
>
> 1)
> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-November/021144.html
> 2)
> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-December/021250.html
> 3) https://www.gap600.com/bitcoin/gap600-supports-bsv/
> 4)
> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-December/021260.html
>
> --
> https://petertodd.org 'peter'[:-1]@petertodd.org
>
-- 
________________________________
Daniel Lipshitz
GAP600
www.Gap600.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20221213/5169f876/attachment.html>

From alicexbt at protonmail.com  Tue Dec 13 22:12:13 2022
From: alicexbt at protonmail.com (alicexbt)
Date: Tue, 13 Dec 2022 22:12:13 +0000
Subject: [bitcoin-dev] Use of OP_CTV in p2p exchanges that use 2of3 multisig
Message-ID: <zirM919DIUgsO6be08Jd-vxmhEHthIKV44O6V7FigBAjC-L2-j6JPadpexSoxoCL9TPnEoKTMSPMun2hZk36vqbQ7jzMb1JPABl_vUUi63s=@protonmail.com>

Hi Bitcoin Developers,

Problem: In p2p exchanges that use 2of3 multisig (example: hodlhodl[0]), there is a possibility of buyer and seller settling the trade without involving exchange. Lets consider Alice (buyer), Bob (seller) and Carol (exchange). Once bitcoin is locked in multisig, Alice and Bob could create and sign a transaction which does not include trading fees output that goes to exchange.

Solution: I was wondering if OP_CTV fixes this because we could use a?template that specifies the release transaction must have two outputs: one output that sends small amount to the exchange for fees, and another output that sends bitcoin to the buyer.

I am not good at writing bitcoin script with opcodes so did not test this however I wanted to confirm with others if this makes sense and can there be other advantages of using OP_CTV for a p2p exchange.

If this setup is considered a vault maybe [simple vault[1] which uses 2of2 multisig can be modified for proof of concept or a [normal poc][2] if there are RPC commands available to test OP_CTV in bitcoin-inquistion.

[0]: https://gitlab.com/hodlhodl-public/public_docs/blob/master/multisig_spec.md
[1]: https://github.com/jamesob/simple-ctv-vault
[2]: https://github.com/1440000bytes/p2p


/dev/fd0

Sent with Proton Mail secure email.

From daniel at gap600.com  Wed Dec 14 08:12:30 2022
From: daniel at gap600.com (Daniel Lipshitz)
Date: Wed, 14 Dec 2022 10:12:30 +0200
Subject: [bitcoin-dev] A proposal for Full RBF to not exclude Zero Conf
 use case
In-Reply-To: <CAHTn92wH17Z+p5cFOLpzsVUuTf4-nZc7tOjQr+_xjSU5groa0Q@mail.gmail.com>
References: <CACkWPs_F94t9Q8TfyYYGxQANUT78SWFGkTOh6qRwnt=6ct7aig@mail.gmail.com>
 <CAAQdECAspoRJRz7j1ubAe=Cen==AVF5bm-Q2=0TiKc7NtbU65A@mail.gmail.com>
 <CACkWPs_4pjTo50=S86KPEznBs0PU7rd30rBGHq2Q5=6n6hYMgQ@mail.gmail.com>
 <CAHTn92wH17Z+p5cFOLpzsVUuTf4-nZc7tOjQr+_xjSU5groa0Q@mail.gmail.com>
Message-ID: <CACkWPs9hxQ8jMcr+=SC--SWt61CwRC0oovvcA868PXxnFipuQA@mail.gmail.com>

A 0-conf double spend caused by FSS-RBF would be harmless since the
original output (address and amounts) remain in the double spending trx.

So all a merchant would need to do is monitor  block inclusion for the
relevant output. Addition of some wallet logic would resolve it easily.

Technically the only difference is that a FSS-RBF requires an additional
input trx to be included in the second trx.

Not clear to me, why the limitation of adding an additional input hinders
the added value of FullRBF and how significant that hinderance is.



On Tue, 13 Dec 2022 at 11:59 John Carvalho <john at synonym.to> wrote:

> Why wasn't this solution put in place back then? Are there problems with
> the design?
>
> While I still think there are unhealthy side-effects of Full-RBF (like
> more doublespending at unknowing merchants, after years of FSS protection)
> I think discussion of this FSS-RBF feature is worth considering.
>
> --
> John Carvalho
> CEO, Synonym.to <http://synonym.to/>
>
>
> On Tue, Dec 13, 2022 at 8:09 AM Daniel Lipshitz <daniel at gap600.com> wrote:
>
>> Thank you for bringing that to my attention, apologies for not being
>> aware of it.
>>
>> First-seen-safe replace-by-fee as detailed here
>> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-May/008248.html
>> by Peter Todd  seems to be a very suitable option and route
>> which balances FullRBF while retaining  the significant 0-conf use case.
>>
>> This would seem like a good way forward.
>>
>>
>>
>> ________________________________
>>
>>
>>
>> On Tue, Dec 13, 2022 at 6:20 AM Yuval Kogman <nothingmuch at woobling.org>
>> wrote:
>>
>>>
>>> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-May/008248.html
>>>
>> --
________________________________
Daniel Lipshitz
GAP600
www.Gap600.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20221214/aa2e6d65/attachment-0001.html>

From pete at petertodd.org  Fri Dec 16 21:14:33 2022
From: pete at petertodd.org (Peter Todd)
Date: Fri, 16 Dec 2022 16:14:33 -0500
Subject: [bitcoin-dev] A proposal for Full RBF to not exclude Zero Conf
 use case
In-Reply-To: <CACkWPs_jSLDg3seON0uu=ri6iR9cytXo2MEPJ5PVeap+iDreeQ@mail.gmail.com>
References: <CACkWPs_F94t9Q8TfyYYGxQANUT78SWFGkTOh6qRwnt=6ct7aig@mail.gmail.com>
 <CAAQdECAspoRJRz7j1ubAe=Cen==AVF5bm-Q2=0TiKc7NtbU65A@mail.gmail.com>
 <CACkWPs_4pjTo50=S86KPEznBs0PU7rd30rBGHq2Q5=6n6hYMgQ@mail.gmail.com>
 <CAHTn92wH17Z+p5cFOLpzsVUuTf4-nZc7tOjQr+_xjSU5groa0Q@mail.gmail.com>
 <CACkWPs9VawCYt7maiNqzafkFnHTiGJQkXMT4VXQQcG-rE2TTNw@mail.gmail.com>
 <Y5jxmItJIpIUVY+x@petertodd.org>
 <CACkWPs_jSLDg3seON0uu=ri6iR9cytXo2MEPJ5PVeap+iDreeQ@mail.gmail.com>
Message-ID: <Y5zfuVGpRGaknwaU@petertodd.org>

On Tue, Dec 13, 2022 at 11:58:31PM +0200, Daniel Lipshitz wrote:
> > With multi-party transactions such as coinjoins and multi-party lightning
> > channels, we want full-rbf behavior because it avoids accidental
> > double-spends
> > holding up progress in these protocols.
> 
> what is meant by accidental double spends ? And do you have any data as to
> how often these occur and would cause harm?

A double-spend of an input to a multiparty transaction that isn't maximally
trying to exploit transaction pinning. For example, Wasabi has found many cases
of users imported the same seed into different wallets. This is quite hard to
avoid in decentralized wallets.

> Second, for intentional DoS attacks, it
> > makes those attacks much more expensive by forcing the attacker to use
> > tx-pinning.
> 
> how are these Dos attacks mitigated today if Full RBF is not in place ?

They aren't. During congested mempool conditions an attacker could cause
significant delays to multi-party transactions without full-rbf. Fortunately,
the mempool regularly empties right now. But that has not been true in the
past, we can not guarantee that, and for Bitcoin to remain secure without
inflation or demmurage in the future, we have to operate under full-mempools
with significant backlogs of transactions.

> > Thus we have a political tradeoff between a handful of centralized services
> > such as yours that benefit from the first-seen status quo, and the much
> > larger
> > group of users that use Lightning and coinjoins.
> 
> How many users are currently using Lightning and coinjoins today ?

Wallet of Satoshi, one of many Lightning wallets, claims to be performing
12,500 transactions/day: https://twitter.com/kerooke/status/1603812141966016520

Bitcoin as a whole currently does about 300,000 transactions per day(1). So that
one single Lightning wallet represents roughly 4% of the total payment volume
of Bitcoin. Wallet of Satoshi, BlueWallet, and SBW all have 100K+ downloads on
the Google Play store. So a reasonable guess is they're equally popular. Which
means they collectively represent 12% of the total number of transactions on
Bitcoin. You claimed GAP600 was queried for 900,000 unique tx hashes per
month(2), or about 10% of total transactions.


I don't have statistics for number of coinjoin transactions per day, or the
blockspace used. But Wasabi have published (reproducable) data showing that
currently about 750BTC/day are entering Wasabi 2.0 coinjoins:
https://mobile.twitter.com/wasabiwallet/status/1603366008437325828

You claimed GAP600 was responsible for USD $220 million of transaction
volume(2), significantly less than the ~$400 million / month that Wasabi
coinjoins alone represent. And of course, Wasabi is just one of three main
coinjoin implementations.

> > We've already been through
> > such a political tradeoff before with the blocksize debate - again, the
> > centralized payment providers lost the debate.
> 
> I don?t think this has anything to do with block size debate or
> decentralisation just looking to protect a significant use case that has
> been in place - GAP600 is by no means the only service provider is this
> place there are many merchants who do 0-conf on there own.

You claimed that GAP600 handled about 10% of all transactions. Obviously, if
that is true, that indicates a very high degree of centralization. It is
extremely undesirable for Bitcoin for one single entity with, as I understand
it, AML/KYC to handle 10% of all transactions. Probably an even higher
percentage when you take into account that only a minority of transactions are
merchant payment-type transactions where unconfirmed transactions would have
any relevance at all.

You claim that there are "many merchants" who do 0-conf on their own. Can you
list more examples of those merchants? Surely if there are "many" of them, you
could easily give us four or five more examples so this list can evaluate what
kinds of security guarantees they're actually relying on.

1) https://ycharts.com/indicators/bitcoin_transactions_per_day
2) https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-December/021239.html

-- 
https://petertodd.org 'peter'[:-1]@petertodd.org
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 833 bytes
Desc: not available
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20221216/800096da/attachment.sig>

From erik at q32.com  Wed Dec 14 17:41:17 2022
From: erik at q32.com (Erik Aronesty)
Date: Wed, 14 Dec 2022 12:41:17 -0500
Subject: [bitcoin-dev] A proposal for Full RBF to not exclude Zero Conf
 use case
In-Reply-To: <CACkWPs9hxQ8jMcr+=SC--SWt61CwRC0oovvcA868PXxnFipuQA@mail.gmail.com>
References: <CACkWPs_F94t9Q8TfyYYGxQANUT78SWFGkTOh6qRwnt=6ct7aig@mail.gmail.com>
 <CAAQdECAspoRJRz7j1ubAe=Cen==AVF5bm-Q2=0TiKc7NtbU65A@mail.gmail.com>
 <CACkWPs_4pjTo50=S86KPEznBs0PU7rd30rBGHq2Q5=6n6hYMgQ@mail.gmail.com>
 <CAHTn92wH17Z+p5cFOLpzsVUuTf4-nZc7tOjQr+_xjSU5groa0Q@mail.gmail.com>
 <CACkWPs9hxQ8jMcr+=SC--SWt61CwRC0oovvcA868PXxnFipuQA@mail.gmail.com>
Message-ID: <CAJowKgJTbTEoG0u1dtA5=vr-LBY40yDSoOzD+aL3CUaaEhxNaQ@mail.gmail.com>

NACK

support for 0-conf is harmful for reasons already stated ad nauseum



On Wed, Dec 14, 2022 at 4:58 AM Daniel Lipshitz via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> A 0-conf double spend caused by FSS-RBF would be harmless since the
> original output (address and amounts) remain in the double spending trx.
>
> So all a merchant would need to do is monitor  block inclusion for the
> relevant output. Addition of some wallet logic would resolve it easily.
>
> Technically the only difference is that a FSS-RBF requires an additional
> input trx to be included in the second trx.
>
> Not clear to me, why the limitation of adding an additional input hinders
> the added value of FullRBF and how significant that hinderance is.
>
>
>
> On Tue, 13 Dec 2022 at 11:59 John Carvalho <john at synonym.to> wrote:
>
>> Why wasn't this solution put in place back then? Are there problems with
>> the design?
>>
>> While I still think there are unhealthy side-effects of Full-RBF (like
>> more doublespending at unknowing merchants, after years of FSS protection)
>> I think discussion of this FSS-RBF feature is worth considering.
>>
>> --
>> John Carvalho
>> CEO, Synonym.to <http://synonym.to/>
>>
>>
>> On Tue, Dec 13, 2022 at 8:09 AM Daniel Lipshitz <daniel at gap600.com>
>> wrote:
>>
>>> Thank you for bringing that to my attention, apologies for not being
>>> aware of it.
>>>
>>> First-seen-safe replace-by-fee as detailed here
>>> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-May/008248.html
>>> by Peter Todd  seems to be a very suitable option and route
>>> which balances FullRBF while retaining  the significant 0-conf use case.
>>>
>>> This would seem like a good way forward.
>>>
>>>
>>>
>>> ________________________________
>>>
>>>
>>>
>>> On Tue, Dec 13, 2022 at 6:20 AM Yuval Kogman <nothingmuch at woobling.org>
>>> wrote:
>>>
>>>>
>>>> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-May/008248.html
>>>>
>>> --
> ________________________________
> Daniel Lipshitz
> GAP600
> www.Gap600.com
>
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20221214/5b534adb/attachment-0001.html>

From daniel at gap600.com  Sun Dec 18 08:06:15 2022
From: daniel at gap600.com (Daniel Lipshitz)
Date: Sun, 18 Dec 2022 10:06:15 +0200
Subject: [bitcoin-dev] A proposal for Full RBF to not exclude Zero Conf
 use case
In-Reply-To: <Y5zfuVGpRGaknwaU@petertodd.org>
References: <CACkWPs_F94t9Q8TfyYYGxQANUT78SWFGkTOh6qRwnt=6ct7aig@mail.gmail.com>
 <CAAQdECAspoRJRz7j1ubAe=Cen==AVF5bm-Q2=0TiKc7NtbU65A@mail.gmail.com>
 <CACkWPs_4pjTo50=S86KPEznBs0PU7rd30rBGHq2Q5=6n6hYMgQ@mail.gmail.com>
 <CAHTn92wH17Z+p5cFOLpzsVUuTf4-nZc7tOjQr+_xjSU5groa0Q@mail.gmail.com>
 <CACkWPs9VawCYt7maiNqzafkFnHTiGJQkXMT4VXQQcG-rE2TTNw@mail.gmail.com>
 <Y5jxmItJIpIUVY+x@petertodd.org>
 <CACkWPs_jSLDg3seON0uu=ri6iR9cytXo2MEPJ5PVeap+iDreeQ@mail.gmail.com>
 <Y5zfuVGpRGaknwaU@petertodd.org>
Message-ID: <CACkWPs_6z7UyXzejTqjy=i+SkSz-76VdzZ20K1DzcVJxan_HZg@mail.gmail.com>

GAP600 is not a trxs processor or liquidity provider we service merchants,
payment processors & non-custodial liquidity providers - our service is
purely the 0-conf enabling our clients to accept 0-conf. Clients access our
service via API - sending us the Trx hash & output address. Our service is
not based on AML/KYC it is purely an analysis of the Bitcoin network.

I am not at liberty to share names of other services which have developed
their own 0-conf service - they include a payment processor on a gambling
platform which services multiple gambling operators, a standalone gaming
payment processor, and a payment processor recently I have come across. We
also do not have a significant presence in Asia - so I don't have
visibility there.

I see from the Wallet of Satoshis website that they are a custodial wallet
provider.

I don't see it being necessarily an either/or approach here. The risk
looking to be mitigated with FullRBF seems to be able to be mitigated with
FullRBF but with a swop limitation of at least the Inputs of Trx1 being in
Trx2 - no flagging required. Added to this all these trxs always have the
OptinRBF so if these platforms need to be able to recreate completely their
trxs they have that option as well. The option to Swop out or bump up trxs
seems to be well covered under those two options.

The case of creating multiple wallets with the same seeds seems to be an
edge case - and to do that and then recreate accidental double spends as a
result sounds like an extreme edge case which I would not think should be a
protocol consideration.

________________________________

Daniel Lipshitz
GAP600| www.gap600.com
Phone: +44 113 4900 117
Skype: daniellipshitz123
Twitter: @daniellipshitz


On Fri, Dec 16, 2022 at 11:14 PM Peter Todd <pete at petertodd.org> wrote:

> On Tue, Dec 13, 2022 at 11:58:31PM +0200, Daniel Lipshitz wrote:
> > > With multi-party transactions such as coinjoins and multi-party
> lightning
> > > channels, we want full-rbf behavior because it avoids accidental
> > > double-spends
> > > holding up progress in these protocols.
> >
> > what is meant by accidental double spends ? And do you have any data as
> to
> > how often these occur and would cause harm?
>
> A double-spend of an input to a multiparty transaction that isn't maximally
> trying to exploit transaction pinning. For example, Wasabi has found many
> cases
> of users imported the same seed into different wallets. This is quite hard
> to
> avoid in decentralized wallets.
>
> > Second, for intentional DoS attacks, it
> > > makes those attacks much more expensive by forcing the attacker to use
> > > tx-pinning.
> >
> > how are these Dos attacks mitigated today if Full RBF is not in place ?
>
> They aren't. During congested mempool conditions an attacker could cause
> significant delays to multi-party transactions without full-rbf.
> Fortunately,
> the mempool regularly empties right now. But that has not been true in the
> past, we can not guarantee that, and for Bitcoin to remain secure without
> inflation or demmurage in the future, we have to operate under
> full-mempools
> with significant backlogs of transactions.
>
> > > Thus we have a political tradeoff between a handful of centralized
> services
> > > such as yours that benefit from the first-seen status quo, and the much
> > > larger
> > > group of users that use Lightning and coinjoins.
> >
> > How many users are currently using Lightning and coinjoins today ?
>
> Wallet of Satoshi, one of many Lightning wallets, claims to be performing
> 12,500 transactions/day:
> https://twitter.com/kerooke/status/1603812141966016520
>
> Bitcoin as a whole currently does about 300,000 transactions per day(1).
> So that
> one single Lightning wallet represents roughly 4% of the total payment
> volume
> of Bitcoin. Wallet of Satoshi, BlueWallet, and SBW all have 100K+
> downloads on
> the Google Play store. So a reasonable guess is they're equally popular.
> Which
> means they collectively represent 12% of the total number of transactions
> on
> Bitcoin. You claimed GAP600 was queried for 900,000 unique tx hashes per
> month(2), or about 10% of total transactions.
>
>
> I don't have statistics for number of coinjoin transactions per day, or the
> blockspace used. But Wasabi have published (reproducable) data showing that
> currently about 750BTC/day are entering Wasabi 2.0 coinjoins:
> https://mobile.twitter.com/wasabiwallet/status/1603366008437325828
>
> You claimed GAP600 was responsible for USD $220 million of transaction
> volume(2), significantly less than the ~$400 million / month that Wasabi
> coinjoins alone represent. And of course, Wasabi is just one of three main
> coinjoin implementations.
>
> > > We've already been through
> > > such a political tradeoff before with the blocksize debate - again, the
> > > centralized payment providers lost the debate.
> >
> > I don?t think this has anything to do with block size debate or
> > decentralisation just looking to protect a significant use case that has
> > been in place - GAP600 is by no means the only service provider is this
> > place there are many merchants who do 0-conf on there own.
>
> You claimed that GAP600 handled about 10% of all transactions. Obviously,
> if
> that is true, that indicates a very high degree of centralization. It is
> extremely undesirable for Bitcoin for one single entity with, as I
> understand
> it, AML/KYC to handle 10% of all transactions. Probably an even higher
> percentage when you take into account that only a minority of transactions
> are
> merchant payment-type transactions where unconfirmed transactions would
> have
> any relevance at all.
>
> You claim that there are "many merchants" who do 0-conf on their own. Can
> you
> list more examples of those merchants? Surely if there are "many" of them,
> you
> could easily give us four or five more examples so this list can evaluate
> what
> kinds of security guarantees they're actually relying on.
>
> 1) https://ycharts.com/indicators/bitcoin_transactions_per_day
> 2)
> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-December/021239.html
>
> --
> https://petertodd.org 'peter'[:-1]@petertodd.org
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20221218/134b4266/attachment-0001.html>

From alicexbt at protonmail.com  Mon Dec 19 21:58:13 2022
From: alicexbt at protonmail.com (alicexbt)
Date: Mon, 19 Dec 2022 21:58:13 +0000
Subject: [bitcoin-dev] Roles and procedures around adding a bitcoin core
	maintainer
Message-ID: <XB9BYeJEzU3l3LRXVwzGf8jSZYC2Uo5IXPCuhtne3V8xXVlkQ7VY0vc11lldZRm52fmniEYWN9AntPbJdJZ8fEeIVVMHUfWsbbvEr8OKwzc=@protonmail.com>

Hi Bitcoin Developers,

List of present bitcoin core maintainers:

|   Username    |    Focus Area   |
| ------------- | -------------   |
|  MarcoFalke   | General, QA     | 
|  fanquake     | General, Build  |
|  hebasto      | General, UI/UX  |
|  achow101     | General, Wallet |
|  glozow       | General, Mempool|

Last 2 developers that stepped down as bitcoin core maintainer:

|   Username    | 
| ------------- | 
|     sipa      | 
|     laanwj    | 

Process followed in adding last maintainer:

1) fanquake [nominated][0] glowzow as rbf/mempool/validation maintainer. 
2) It was discussed in an IRC [meeting][1] and most of the developers agreed to add her as new maintainer except mild NACK from Jeremy Rubin. Some contributors did not like different opinions being shared in the meeting.
3) A [pull request][2] was opened by glowzow to add keys. There were several ACKs, 2 NACKs and 1 meta concept NACK.
   My NACK: https://github.com/bitcoin/bitcoin/pull/25524#issuecomment-1172518409
   NACK by jamesob: https://github.com/bitcoin/bitcoin/pull/25524#issuecomment-1172570635
   Meta concept NACK by luke-jr: https://github.com/bitcoin/bitcoin/pull/25524#issuecomment-1175625779

   Eventually everyone agreed to add glowzow as maintainer and improve the process of adding maintainers. Pull request was merged by MarcoFalke.

Initiatives to improve the process and documentation:

1) Jeremy opened a [pull request][3] and there were lot of disagreements with the documentation. It was closed since a related PR with less changes could be easy to agree upon. 
2) Related [pull request][4] with minimal documentation was also closed by Jeremy with a comment that desire to improve docs seems to be missing based on reviews.
3) Jeremy opened an [issue][5] with title 'Call for Maintainer: P2P & Networking + Privacy' which was changed later and 'Privacy' was removed. He nominated jonatack and vasild was already self nominated so mentioned in the pull request. Nobody appreciated this effort to nominate self or others for a new maintainer. Later this was closed.
4) I had opened an [issue][6] with title Call for Maintainer: Privacy'. This even involved privacy of contributors and not just bitcoin core. It received some comments that made no sense and I eventually closed the issue. 

Process being followed for adding vasild as maintainer:

1) vasild volunteered to be a new maintainer on [IRC][7]
2) It was discussed in IRC [meeting][8], some developers ACKed it and there were no issues.
3) A [pull request][9] was opened by vasild to add keys which is still open and its been 4 months. There were already some ACKs from the IRC meeting and pull request also received some ACKs (16 until now). fanquake, dergoegge and JeremyRubin had some disagreements. Jeremy had recently withdrawn all ACK/NACK from bitcoin core repository for some reasons, fanquake has not replied yet and dergoegge had some new disagreements although don't mind if the pull request is merged.
4) Earlier disagreements were related to scoping and it was changed by vasild
4) There was even a comment that disrespected vasild's contributions in bitcoin core and we had to literally share pull requests in which vasild has improved bitcoin core.
5) I tried adding the topic for a bitcoin core dev weekly meeting but did not achieve anything.


Since Bitcoin Core is the reference implementation for Bitcoin and used by 90% nodes, what should be the ideal process or changes you would expect in roles, procedures etc.?

- 'Call for maintainers' issue should be opened if contributors or maintainers need a new maintainer.
- Discussion about nominated contributors in an IRC meeting where everyone is allowed to share their opinion.
- One of the nominated contributor that gets most ACKs could open pull request to add keys. Everyone can ACK/NACK this PR with reasons.
- Maintainers should be unbiased in merging these pull requests.
- New maintainer should not be funded by the organization that already does it for most of the maintainers.
- Long term contributors that are not living in a first world country should be encouraged.
- Either we should agree every maintainer is a general maintainer that can merge pull request from different modules or define scope for present and new maintainers. We can't do both.
- Self merging pull requests should be avoided.

Let me know if you have any thoughts that could improve this process and involve less politics. 
   

[0]: https://bitcoin-irc.chaincode.com/bitcoin-core-dev/2022-06-28#826651
[1]: https://bitcoin-irc.chaincode.com/bitcoin-core-dev/2022-06-30#827695
[2]: https://github.com/bitcoin/bitcoin/pull/25524
[3]: https://github.com/bitcoin/bitcoin/pull/25560
[4]: https://github.com/bitcoin/bitcoin/pull/25839
[5]: https://github.com/bitcoin/bitcoin/issues/25870
[6]: https://github.com/bitcoin/bitcoin/issues/25875
[7]: https://bitcoin-irc.chaincode.com/bitcoin-core-dev/2022-08-12#842847;
[8]: https://bitcoin-irc.chaincode.com/bitcoin-core-dev/2022-08-18#844523
[9]: https://github.com/bitcoin/bitcoin/pull/25871

/dev/fd0
'floppy disc guy'

Sent with Proton Mail secure email.

From antoine.riard at gmail.com  Tue Dec 20 02:35:04 2022
From: antoine.riard at gmail.com (Antoine Riard)
Date: Tue, 20 Dec 2022 02:35:04 +0000
Subject: [bitcoin-dev] Bitcoin Contracting Primitives WG 2nd Meeting,
 Tuesday 20 Dec. 18:00 UTC
In-Reply-To: <CALZpt+GZy1F8S=wYbMmHYE4x21mROJy55pkbmzmSE_a6cULeiw@mail.gmail.com>
References: <CALZpt+GZy1F8S=wYbMmHYE4x21mROJy55pkbmzmSE_a6cULeiw@mail.gmail.com>
Message-ID: <CALZpt+GhSRZD5O4gxTvt09BqXthMt4oFBdO9RG-pOSWpCraqdw@mail.gmail.com>

Reminder: this is happening this _upcoming_ Tuesday.

Looking forward to the second session to roam over all the contracting
protocol use-cases and primitives and then listen to everyone doing
research in the contracting primitives/covenant spaces, where they would
like more brain power!

Best,
Antoine



Le lun. 12 d?c. 2022 ? 16:13, Antoine Riard <antoine.riard at gmail.com> a
?crit :

> Hi list,
>
> I'm proposing Tuesday 20th December at 18:00 UTC, i.e 1 week from now for
> the 2nd Bitcoin contracting primitives WG meeting.
>
> As a soft proposal for an agenda, the first part could be to roam over all
> the contracting protocol use-cases and corresponding primitives, to ensure
> there is exhaustivity of the R&D effort w.r.t known ideas issued by the
> community during the past years. If you have been working on a primitive
> and corresponding use-cases, and it's missing in the current listing, feel
> free to open a PR or bump me to do so.
>
> The second part could be to take time to listen to everyone blockers in
> their contracting primitives/covenant research, if someone would like more
> review on their proposals, or if someone would like to work on a code
> implementation and it misses familiarity with Bitcoin Core Script
> interpreter, or if someone would like to experiment a minimal use-case on
> bitcoin-inquisition, or if someone has conceptual questions on the
> primitive design approach, or if someone thinking to propose a new
> cryptosystem at the consensus-level for Bitcoin, or whatever [0].
>
> Communication venue is #bitcoin-contracting-primitives-wg on Libera Chat.
> Logs of the previous session are available here [1].
>
> Let it know if you have more questions or feedback.
>
> Cheers,
> Antoine
>
> [0] My own goal is to keep rolling the ball on a taproot annex
> implementation (https://github.com/bitcoin-inquisition/bitcoin/pull/9) as
> it could be useful as a fee-bumping primitive/constrained amount
> malleability extension for multi-party channels, and potentially other uses.
>
> [1]
> https://github.com/ariard/bitcoin-contracting-primitives-wg/blob/main/meetings/meetings-15-11.md
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20221220/7f7e84b6/attachment.html>

From michaelfolkson at protonmail.com  Tue Dec 20 18:44:05 2022
From: michaelfolkson at protonmail.com (Michael Folkson)
Date: Tue, 20 Dec 2022 18:44:05 +0000
Subject: [bitcoin-dev] Roles and procedures around adding a bitcoin core
	maintainer
In-Reply-To: <XB9BYeJEzU3l3LRXVwzGf8jSZYC2Uo5IXPCuhtne3V8xXVlkQ7VY0vc11lldZRm52fmniEYWN9AntPbJdJZ8fEeIVVMHUfWsbbvEr8OKwzc=@protonmail.com>
References: <XB9BYeJEzU3l3LRXVwzGf8jSZYC2Uo5IXPCuhtne3V8xXVlkQ7VY0vc11lldZRm52fmniEYWN9AntPbJdJZ8fEeIVVMHUfWsbbvEr8OKwzc=@protonmail.com>
Message-ID: <2r9jSI5Ruf_j2Rm4R4a0g33YYhdLq1AQzrWCRLyna1BffMhCqXVBrH7Rll9noJeISH4uRM2ElF06x9FIXZoJh1ylxR-D9GX4s_fWFcqScHI=@protonmail.com>

Hi alicexbt

There does seem to be some confusion on this which I'm going to look into. I don't think ranting and raving or throwing toys out the pram on the mailing list is the productive way to go though. I'll chat to some people offline and see what the confusion is and hopefully this can be resolved without unnecessary drama. I'll respond in the new year. I don't know if you celebrate but if you do Happy Holidays.

Thanks
Michael

--
Michael Folkson
Email: michaelfolkson at protonmail.com
Keybase: michaelfolkson
PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3


------- Original Message -------
On Monday, December 19th, 2022 at 23:58, alicexbt via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:


> Hi Bitcoin Developers,
> 
> List of present bitcoin core maintainers:
> 
> Username
> 
> Focus Area
> 
> MarcoFalke
> 
> General, QA
> 
> fanquake
> 
> General, Build
> 
> hebasto
> 
> General, UI/UX
> 
> achow101
> 
> General, Wallet
> 
> glozow
> 
> General, Mempool
> 
> Last 2 developers that stepped down as bitcoin core maintainer:
> 
> Username
> 
> -------------
> 
> sipa
> 
> laanwj
> 
> Process followed in adding last maintainer:
> 
> 1) fanquake [nominated][0] glowzow as rbf/mempool/validation maintainer.
> 
> 2) It was discussed in an IRC [meeting][1] and most of the developers agreed to add her as new maintainer except mild NACK from Jeremy Rubin. Some contributors did not like different opinions being shared in the meeting.
> 
> 3) A [pull request][2] was opened by glowzow to add keys. There were several ACKs, 2 NACKs and 1 meta concept NACK.
> 
> My NACK: https://github.com/bitcoin/bitcoin/pull/25524#issuecomment-1172518409
> 
> NACK by jamesob: https://github.com/bitcoin/bitcoin/pull/25524#issuecomment-1172570635
> 
> Meta concept NACK by luke-jr: https://github.com/bitcoin/bitcoin/pull/25524#issuecomment-1175625779
> 
> Eventually everyone agreed to add glowzow as maintainer and improve the process of adding maintainers. Pull request was merged by MarcoFalke.
> 
> Initiatives to improve the process and documentation:
> 
> 1) Jeremy opened a [pull request][3] and there were lot of disagreements with the documentation. It was closed since a related PR with less changes could be easy to agree upon.
> 
> 2) Related [pull request][4] with minimal documentation was also closed by Jeremy with a comment that desire to improve docs seems to be missing based on reviews.
> 
> 3) Jeremy opened an [issue][5] with title 'Call for Maintainer: P2P & Networking + Privacy' which was changed later and 'Privacy' was removed. He nominated jonatack and vasild was already self nominated so mentioned in the pull request. Nobody appreciated this effort to nominate self or others for a new maintainer. Later this was closed.
> 
> 4) I had opened an [issue][6] with title Call for Maintainer: Privacy'. This even involved privacy of contributors and not just bitcoin core. It received some comments that made no sense and I eventually closed the issue.
> 
> Process being followed for adding vasild as maintainer:
> 
> 1) vasild volunteered to be a new maintainer on [IRC][7]
> 
> 2) It was discussed in IRC [meeting][8], some developers ACKed it and there were no issues.
> 
> 3) A [pull request][9] was opened by vasild to add keys which is still open and its been 4 months. There were already some ACKs from the IRC meeting and pull request also received some ACKs (16 until now). fanquake, dergoegge and JeremyRubin had some disagreements. Jeremy had recently withdrawn all ACK/NACK from bitcoin core repository for some reasons, fanquake has not replied yet and dergoegge had some new disagreements although don't mind if the pull request is merged.
> 
> 4) Earlier disagreements were related to scoping and it was changed by vasild
> 
> 4) There was even a comment that disrespected vasild's contributions in bitcoin core and we had to literally share pull requests in which vasild has improved bitcoin core.
> 
> 5) I tried adding the topic for a bitcoin core dev weekly meeting but did not achieve anything.
> 
> Since Bitcoin Core is the reference implementation for Bitcoin and used by 90% nodes, what should be the ideal process or changes you would expect in roles, procedures etc.?
> 
> - 'Call for maintainers' issue should be opened if contributors or maintainers need a new maintainer.
> 
> - Discussion about nominated contributors in an IRC meeting where everyone is allowed to share their opinion.
> 
> - One of the nominated contributor that gets most ACKs could open pull request to add keys. Everyone can ACK/NACK this PR with reasons.
> 
> - Maintainers should be unbiased in merging these pull requests.
> 
> - New maintainer should not be funded by the organization that already does it for most of the maintainers.
> 
> - Long term contributors that are not living in a first world country should be encouraged.
> 
> - Either we should agree every maintainer is a general maintainer that can merge pull request from different modules or define scope for present and new maintainers. We can't do both.
> 
> - Self merging pull requests should be avoided.
> 
> Let me know if you have any thoughts that could improve this process and involve less politics.
> 
> [0]: https://bitcoin-irc.chaincode.com/bitcoin-core-dev/2022-06-28#826651
> 
> [1]: https://bitcoin-irc.chaincode.com/bitcoin-core-dev/2022-06-30#827695
> 
> [2]: https://github.com/bitcoin/bitcoin/pull/25524
> 
> [3]: https://github.com/bitcoin/bitcoin/pull/25560
> 
> [4]: https://github.com/bitcoin/bitcoin/pull/25839
> 
> [5]: https://github.com/bitcoin/bitcoin/issues/25870
> 
> [6]: https://github.com/bitcoin/bitcoin/issues/25875
> 
> [7]: https://bitcoin-irc.chaincode.com/bitcoin-core-dev/2022-08-12#842847;
> 
> [8]: https://bitcoin-irc.chaincode.com/bitcoin-core-dev/2022-08-18#844523
> 
> [9]: https://github.com/bitcoin/bitcoin/pull/25871
> 
> /dev/fd0
> 
> 'floppy disc guy'
> 
> Sent with Proton Mail secure email.
> 
> _______________________________________________
> 
> bitcoin-dev mailing list
> 
> bitcoin-dev at lists.linuxfoundation.org
> 
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev

From pete at petertodd.org  Fri Dec 23 03:06:03 2022
From: pete at petertodd.org (Peter Todd)
Date: Thu, 22 Dec 2022 22:06:03 -0500
Subject: [bitcoin-dev] At least 17% of Bitcoin Core 24.x listening nodes are
 running full-rbf
Message-ID: <Y6UbG4lcVaVmqdls@petertodd.org>

tl;dr: By connecting to every Bitcoin Core v24 node I could, and measuring
transaction invs, I determined that at this moment about 17% of all Bitcoin
Core v24 nodes listening on IPv4 are running with full-rbf enabled and
successfully propagating full-rbf replacements.

Procedure:

0) Modify MAX_ADDNODE_CONNECTIONS to 5000 and recompile.
1) Run ./bitcoind -mempoolfullrbf=0 -debug=inv -debug=mempool -debug=mempoolrej
2) Manually addnode every IPv4 address of a node matching 'Satoshi:24' and
   *not* advertising the full-rbf service bit in my DNS seed's 'dnsseed.dump'
   file. This happened to be 692 IPv4 addresses.
3) Wait for connection counts to stabilize. I managed to connect to ~500 nodes
   out of the 692 I tried connecting too.
4) Wait for one of my OpenTimestamps calendars to perform a full-rbf
   replacement?. They wait a significant amount of time (60s) between
   transactions and blocks to ensure good propagation, and a true full-rbf
   replacement.
5) Wait 2 minutes to ensure complete propagation of the replacement transaction.
6) Run grep <wtxid> ~/.bitcoin/debug.log | grep 'got inv' | wc -l to count the
   number of invs. (I obtained the wtid from another node running full-rbf)
7) Repeat steps 4 to 6 three more times to verify counts are stable.


Discussion:

This data shows substantial adoption of the mempoolfullrbf=1 option among IPv4
listening nodes, above and beyond people choosing to run Bitcoin Knots or
another full-rbf peering fork of Bitcoin Core. This data is also an
underestimate: I'm only measuring successful propagation. Nodes which have
full-rbf enabled - but do not have any full-rbf peers - are not counted by this
measurement. Thus the true number of full-rbf nodes will be even higher than
these stats indicate.

Since v24 nodes are currently only ~5% of all listening nodes, the probability?
of a non-listening node having a full-rbf peer in their outgoing 8 connections
is still low, ~8%. However, if this 17% was maintained as all nodes eventually
upgrade to v24, the probability of a full-rbf peer in the outgoing 8 would be
quite high, ~80%.


Future Work:

How are full-rbf nodes distributed among the IPv4 address space? Bitcoin
Core, by default, groups IPv4 addresses into /16 buckets, and does not connect
to more than 1 outgoing node per bucket. The true probability of connecting to
a full-rbf peer may be changed by this distribution.

How are full-rbf nodes distributed among other connection types? At the moment
bitnodes.io reports that a majority of listening nodes are listening on .onion
addresses. Due to the difficulty of connecting to very large numbers of Tor
nodes at once, and a lack of a convenient source of onion addresses to try, I
did not attempt to measure full-rbf adoption among onion nodes. IIUC a number
of pre-built "node in a box" solutions such as the Start9 Labs Embassy are
currently only able to listen via Tor.

How are full-rbf nodes distributed among non-listening nodes? A potential
strategy to measure this could be to measure inv's on a listening node with a
large number of incoming peers. Anecdotally, I have been told by a number of
people that they're running mempoolfullrbf=1 on non-listening nodes.


References:

1) https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-November/021143.html
2) https://stacker.news/items/98441

-- 
https://petertodd.org 'peter'[:-1]@petertodd.org
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 833 bytes
Desc: not available
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20221222/e8823a25/attachment.sig>

From pete at petertodd.org  Fri Dec 23 09:46:19 2022
From: pete at petertodd.org (Peter Todd)
Date: Fri, 23 Dec 2022 03:46:19 -0600
Subject: [bitcoin-dev] onion addresses to try [At least 17% of Bitcoin
	Core 24.x listening nodes are running full-rbf]
In-Reply-To: <Y6VbIeCp2F+jF/70@smle>
References: <Y6UbG4lcVaVmqdls@petertodd.org> <Y6VbIeCp2F+jF/70@smle>
Message-ID: <F0B752D1-223E-42C5-ABE0-8D055D8E5BF7@petertodd.org>



On December 23, 2022 1:39:13 AM CST, Vasil Dimov <vd at freebsd.org> wrote:
>On Thu, Dec 22, 2022 at 22:06:03 -0500, Peter Todd via bitcoin-dev wrote:
>[...]
>> a lack of a convenient source of onion addresses to try
>[...]
>
>$ bitcoin-cli getnodeaddresses 0 |jq -r 'map(select(.network == "onion")) | .[].address'

It's not that simple. Because onion addresses cost close to nothing nothing to obtain it's dubious to just try some on a one time basis without checking to see if they actually have a longer term track record of actually existing. You could end up trying addresses of a one time Sybil attack.

The advantage of using the DNS seed records is those addresses are tested over long time frames, so you have a better chance of them representing real nodes. But my DNS seed doesn't happen to be setup to track nodes using Tor right now.

From vd at freebsd.org  Fri Dec 23 07:39:13 2022
From: vd at freebsd.org (Vasil Dimov)
Date: Fri, 23 Dec 2022 08:39:13 +0100
Subject: [bitcoin-dev] onion addresses to try [At least 17% of Bitcoin Core
 24.x listening nodes are running full-rbf]
In-Reply-To: <Y6UbG4lcVaVmqdls@petertodd.org>
References: <Y6UbG4lcVaVmqdls@petertodd.org>
Message-ID: <Y6VbIeCp2F+jF/70@smle>

On Thu, Dec 22, 2022 at 22:06:03 -0500, Peter Todd via bitcoin-dev wrote:
[...]
> a lack of a convenient source of onion addresses to try
[...]

$ bitcoin-cli getnodeaddresses 0 |jq -r 'map(select(.network == "onion")) | .[].address'

-- 
Vasil Dimov
gro.DSBeerF at dv
%
Life should not be a journey to the grave with the intention
of arriving safely in a pretty and well preserved body, but
rather to skid in broadside, thoroughly used up, totally worn out,
and loudly proclaiming --WOW---What A RIDE!!
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 1528 bytes
Desc: not available
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20221223/18e98c75/attachment.sig>

From jk_14 at op.pl  Fri Dec 23 18:43:36 2022
From: jk_14 at op.pl (jk_14 at op.pl)
Date: Fri, 23 Dec 2022 19:43:36 +0100
Subject: [bitcoin-dev] Pseudocode for robust tail emission
Message-ID: <173552838-a7412589a40ea770709d0b227b056bd3@pmq5v.m5r2.onet>


Necessary or not - it doesn't hurt to plan the robust model, just in case. The proposal is:

Let every 210,000 the code calculate the average difficulty of 100 last retargets (100 fit well in 210,000 / 2016 = 104.166)
and compare with the maximum of all such values calculated before, every 210,000 blocks:


if average_diff_of_last_100_retargets > maximum_of_all_previous_average_diffs
	do halving
else
	do nothing


This way:

1. system cannot be played
2. only in case of destructive halving: system waits for the recovery of network security


Best Regards
Jaroslaw

From jk_14 at op.pl  Tue Dec 27 15:34:07 2022
From: jk_14 at op.pl (jk_14 at op.pl)
Date: Tue, 27 Dec 2022 16:34:07 +0100
Subject: [bitcoin-dev] Pseudocode for robust tail emission
Message-ID: <173647633-76b3b19c83c720cc30cb8fcb603b5251@pmq5v.m5r2.onet>


It seems like the more elegant solution could be by using a chainwork parameter instead.
i.e. comparison just before halving - if the last 210,000 block interval has a higher chainwork difference between the begining and the end of interval
than any other such inter-halving interval before.

LIttle digression yet:
A system in which all users participate in ensuring its security looks better than one in which only some (i.e. active) of them participate (and passive stakeholders are de facto free riders)
In my opinion this concept above is only the complement of currently missing mechanism: achieving equilibrium regarding costs of security between two parties with opposing interests.
It's easy to understand and - most important - it has no hardcoded value of tail emission - what is the clear proof it is based on a free market.
And last but not least, if someone is 100% sure that income from transactions will takeover security support from block subsidy - accepting such proposal is like putting the money where the mouth is: this safety measure will never be triggered, then (no risk of fork)


Best Regards
Jaroslaw



W dniu 2022-12-23 20:29:20 u?ytkownik Jaroslaw via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> napisa?:
> 
Necessary or not - it doesn't hurt to plan the robust model, just in case. The proposal is:

Let every 210,000 the code calculate the average difficulty of 100 last retargets (100 fit well in 210,000 / 2016 = 104.166)
and compare with the maximum of all such values calculated before, every 210,000 blocks:


if average_diff_of_last_100_retargets > maximum_of_all_previous_average_diffs
	do halving
else
	do nothing


This way:

1. system cannot be played
2. only in case of destructive halving: system waits for the recovery of network security


Best Regards
Jaroslaw
_______________________________________________
bitcoin-dev mailing list
bitcoin-dev at lists.linuxfoundation.org
https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev




From aymeric at peersm.com  Thu Dec 29 16:49:46 2022
From: aymeric at peersm.com (Aymeric Vitte)
Date: Thu, 29 Dec 2022 17:49:46 +0100
Subject: [bitcoin-dev] A Bitcoin NFT System
Message-ID: <fb893a29-92d0-a24a-c23b-dc1d2dba21d6@peersm.com>

I am not a fan of NFTs as currently designed and used, centralized,
insecure, duplicable, virtual, stealable, not signed, expensive

But if you consider that a NFT is anything that you can buy or store, as
something real, or electronic, or whatever, in the real world, web or
metaverse, then it becomes interesting

NFTs are mostly used on Ethereum, and a "mess" to describe this stuff is
a weak word

Then I wrote: "A Bitcoin NFT system": 
https://gist.github.com/Ayms/01dbfebf219965054b4a3beed1bfeba7 ,
decentralized, secure, not expensive

It does envision also local Bitcoin chains

No invention here, maybe what I am describing already exists but I am
not aware of it (however it's a bit similar to coloured coins and other
things like this), this is simple compared to usual discussions on this
list, for your review and comments, here if applicable or to my personal
address

As we can see for those that would read it, it seems like that I am
contradicting myself everywhere with this proposal compared to previous
publications (links in the proposal), but in fact no, I am explaining why

-- 
Sophia-Antipolis, France
LinkedIn: https://fr.linkedin.com/in/aymeric-vitte-05855b26
GitHub : https://www.github.com/Ayms
Move your coins by yourself (browser version): https://peersm.com/wallet
Bitcoin transactions made simple: https://github.com/Ayms/bitcoin-transactions
torrent-live: https://github.com/Ayms/torrent-live
node-Tor : https://www.github.com/Ayms/node-Tor
Zcash wallets made simple: https://github.com/Ayms/zcash-wallets
Bitcoin wallets made simple: https://github.com/Ayms/bitcoin-wallets
Anti-spies and private torrents, dynamic blocklist: http://torrent-live.peersm.com
Peersm : http://www.peersm.com



From billy.tetrud at gmail.com  Fri Dec 30 18:20:47 2022
From: billy.tetrud at gmail.com (Billy Tetrud)
Date: Fri, 30 Dec 2022 12:20:47 -0600
Subject: [bitcoin-dev] Pseudocode for robust tail emission
In-Reply-To: <173647633-76b3b19c83c720cc30cb8fcb603b5251@pmq5v.m5r2.onet>
References: <173647633-76b3b19c83c720cc30cb8fcb603b5251@pmq5v.m5r2.onet>
Message-ID: <CAGpPWDZHYN8quCK0Vb4OZxyo5WnGmzayz1tGMsToO=GzSRcSKg@mail.gmail.com>

If the idea is to ensure that a catastrophic miner exodus doesn't happen,
the "difference" you're calculating should only care about downward
differences. Upward differences indicate more mining activity and so
shouldn't cause a halving skip.

But I don't think any scheme like this that only acts on the basis of
difficulty will be sufficient. If it gets to the point where a sudden drop
in mining difficulty happens, it is very likely that simply delaying the
next halving or even ending halving all together will not be sufficient to
correct for whatever is causing hashrate to tank. There is also the danger
of simple difficulty stagnation, which this mechanism wouldn't detect.

The relationship between difficulty and security becomes less and less
predictable the longer you want to look ahead. There's no long term
relation between difficulty and any reasonable security target. A security
target might be something like "no colluding group with less than $1
trillion dollars at their disposal could successfully 51% attack the
network (with a probability of blah blah)". There is no way to today
program in any code that detects based on difficult alone when that
criteria is violated. You would have to program in assumptions about the
cost of hashrate projected into the future.

I can't think of any robust automatic way to do this. I think to a certain
degree, it will have to be a change that happens in a fork of some kind
(soft or hard) periodically (every 10 years? 30 years?). The basic
relations needed is really the cost in Bitcoin of the security target (ie
the minimum number of Bitcoin it should take to 51% attack the system) and
the cost in Bitcoin of acquiring a unit of hashrate. This could be simply
input into the code, or could use some complicated oracle system. But with
that relation, the system could be programmed to calculate the difficulty
necessary to keep the system secure.

Once that is in place, the system could automatically adjust the subsidy up
or down to attract more or less miners, or it could adjust the block size
up or down to change the fee market such that more or less total fees are
collected each block to attract more or less miners.

On Tue, Dec 27, 2022, 09:41 Jaroslaw via bitcoin-dev <
bitcoin-dev at lists.linuxfoundation.org> wrote:

>
> It seems like the more elegant solution could be by using a chainwork
> parameter instead.
> i.e. comparison just before halving - if the last 210,000 block interval
> has a higher chainwork difference between the begining and the end of
> interval
> than any other such inter-halving interval before.
>
> LIttle digression yet:
> A system in which all users participate in ensuring its security looks
> better than one in which only some (i.e. active) of them participate (and
> passive stakeholders are de facto free riders)
> In my opinion this concept above is only the complement of currently
> missing mechanism: achieving equilibrium regarding costs of security
> between two parties with opposing interests.
> It's easy to understand and - most important - it has no hardcoded value
> of tail emission - what is the clear proof it is based on a free market.
> And last but not least, if someone is 100% sure that income from
> transactions will takeover security support from block subsidy - accepting
> such proposal is like putting the money where the mouth is: this safety
> measure will never be triggered, then (no risk of fork)
>
>
> Best Regards
> Jaroslaw
>
>
>
> W dniu 2022-12-23 20:29:20 u?ytkownik Jaroslaw via bitcoin-dev <
> bitcoin-dev at lists.linuxfoundation.org> napisa?:
> >
> Necessary or not - it doesn't hurt to plan the robust model, just in case.
> The proposal is:
>
> Let every 210,000 the code calculate the average difficulty of 100 last
> retargets (100 fit well in 210,000 / 2016 = 104.166)
> and compare with the maximum of all such values calculated before, every
> 210,000 blocks:
>
>
> if average_diff_of_last_100_retargets >
> maximum_of_all_previous_average_diffs
>         do halving
> else
>         do nothing
>
>
> This way:
>
> 1. system cannot be played
> 2. only in case of destructive halving: system waits for the recovery of
> network security
>
>
> Best Regards
> Jaroslaw
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
>
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20221230/1890b675/attachment.html>

From pete at petertodd.org  Fri Dec 30 23:28:58 2022
From: pete at petertodd.org (Peter Todd)
Date: Fri, 30 Dec 2022 18:28:58 -0500
Subject: [bitcoin-dev] Pseudocode for robust tail emission
In-Reply-To: <173552838-a7412589a40ea770709d0b227b056bd3@pmq5v.m5r2.onet>
References: <173552838-a7412589a40ea770709d0b227b056bd3@pmq5v.m5r2.onet>
Message-ID: <Y690OjY0MA/YQ9IL@petertodd.org>

On Fri, Dec 23, 2022 at 07:43:36PM +0100, jk_14 at op.pl wrote:
> 
> Necessary or not - it doesn't hurt to plan the robust model, just in case. The proposal is:
> 
> Let every 210,000 the code calculate the average difficulty of 100 last retargets (100 fit well in 210,000 / 2016 = 104.166)
> and compare with the maximum of all such values calculated before, every 210,000 blocks:
> 
> 
> if average_diff_of_last_100_retargets > maximum_of_all_previous_average_diffs
> 	do halving
> else
> 	do nothing
> 
> 
> This way:
> 
> 1. system cannot be played
> 2. only in case of destructive halving: system waits for the recovery of network security

First of all - while I suspct you already understand this issue - I should
point out the following:

The immediate danger we have with halvings is that in a competitive market,
profit margins tend towards marginal costs - the cost to produce an additional
unit of production - rather than total costs - the cost necessary to recover
prior and future expenses. Since the halving is a sudden shock to the system,
under the right conditions we could have a significant amount of hashing power
just barely able to afford to hash prior to the halving, resulting in all that
hashing power immediately having to shut down and fees increasing dramatically,
and likely, chaotically.  Your proposal does not address that problem as it can
only measure difficulty prior to the halving point.


Other than that problem, I agree that this proposal would, at least in theory,
be a positive improvement on the status quo. But it is a hard fork and I don't
think there is much hope for such hard forks to be implemented. I believe that
a demmurrage soft-fork, implemented via a storage fee averaged out over many
future blocks, has a much more plausible route towards implementation.

-- 
https://petertodd.org 'peter'[:-1]@petertodd.org
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 833 bytes
Desc: not available
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20221230/e2c7cba6/attachment.sig>

