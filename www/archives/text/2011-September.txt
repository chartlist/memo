From witchspace81 at gmail.com  Thu Sep  1 02:11:40 2011
From: witchspace81 at gmail.com (John Smith)
Date: Thu, 1 Sep 2011 02:11:40 +0000
Subject: [Bitcoin-development] Bitcoin-qt ready for merging
In-Reply-To: <1314803146.2601.5.camel@BMThinkPad.lan.bluematt.me>
References: <CAJNQ0su7iRsQ2zPhXcd774TTqYzJGT+E9ss4D=6Ja3QSrpLdkw@mail.gmail.com>
	<1314803146.2601.5.camel@BMThinkPad.lan.bluematt.me>
Message-ID: <CAJNQ0stejgAjXaap-ZKqYn6YH0QpReei5_-W_rtZK6_G=Pq=Lw@mail.gmail.com>

Would it be possible to port some of the existing translations?
>

Well, the strings in the core can be reused one-on-one as the _ function is
mapped to the Qt translation function.

And some of the UI texts probably can be reused as well, at least for a
rough approximation.

The files will have to be converted, as Qt uses an XML-based format whereas
Wx uses a line-based one. Also, Qt translations have a "context"
(file/object) defined whereas in Wx the "msgid" is only the English text.
Nah, nothing that a bit of Python hacking can't solve.

Though IMHO its not a huge deal if qt is merged without all the
> translations as IMHO it should be merged soon and then not the default
> release GUI until its in tree for a bit (like one release) and some
> translations can be built up.
>

Exactly... if there is some time between Qt being merged and Wx being phased
out, translations can be added. The Qt translation tool (Qt Linguist) is
user friendly enough to be used by anyone.

>
> > So IMO, it is ready to be merged.
> IMHO it should be merged right after 0.4 is pushed.
>

Sounds fine with me,

JS
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110901/e5fb7740/attachment.html>

From luke at dashjr.org  Thu Sep  1 02:13:33 2011
From: luke at dashjr.org (Luke-Jr)
Date: Wed, 31 Aug 2011 22:13:33 -0400
Subject: [Bitcoin-development] Bitcoin-qt ready for merging
In-Reply-To: <CAJNQ0su7iRsQ2zPhXcd774TTqYzJGT+E9ss4D=6Ja3QSrpLdkw@mail.gmail.com>
References: <CAJNQ0su7iRsQ2zPhXcd774TTqYzJGT+E9ss4D=6Ja3QSrpLdkw@mail.gmail.com>
Message-ID: <201108312213.38213.luke@dashjr.org>

On Wednesday, August 31, 2011 10:20:48 AM John Smith wrote:
> The project builds on Windows, MacOSX and Linux using qmake.

How do you set build options with qmake?



From witchspace81 at gmail.com  Thu Sep  1 02:32:52 2011
From: witchspace81 at gmail.com (John Smith)
Date: Thu, 1 Sep 2011 02:32:52 +0000
Subject: [Bitcoin-development] Bitcoin-qt ready for merging
In-Reply-To: <201108312213.38213.luke@dashjr.org>
References: <CAJNQ0su7iRsQ2zPhXcd774TTqYzJGT+E9ss4D=6Ja3QSrpLdkw@mail.gmail.com>
	<201108312213.38213.luke@dashjr.org>
Message-ID: <CAJNQ0sve5iSrxXtAEc2-XZpD+3GtYNa9_yc0+yYd0_YZiHHK8A@mail.gmail.com>

On Thu, Sep 1, 2011 at 2:13 AM, Luke-Jr <luke at dashjr.org> wrote:

> On Wednesday, August 31, 2011 10:20:48 AM John Smith wrote:
> > The project builds on Windows, MacOSX and Linux using qmake.
>
> How do you set build options with qmake?
>

You can put assignments on the commandline; for example,

qmake "CONFIG+=test" test.pro

Like in plain make, these variables can be used for conditionally
enabling/disabling libraries or other options in the .pro file.

http://doc.qt.nokia.com/latest/qmake-manual.html

(reminds me that I still need to add the USE_UPNP option)

Note that qmake is a pretty simple tool, optimized for conveniently building
Qt applications in a cross-platform way; it in no way compares to
cmake/autotools or another "full" build system. But it's enough for building
bitcoin-qt on the supported target architectures so that's good enough for
me... For "bitcoind" and "bitcoin-wx" you probably want to keep around the
makefile.

JS
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110901/b7a21c59/attachment.html>

From gavinandresen at gmail.com  Fri Sep  2 20:12:43 2011
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Fri, 2 Sep 2011 16:12:43 -0400
Subject: [Bitcoin-development] Version 0.4 release candidate 1
Message-ID: <CABsx9T2_CfaEoxSjQ4PhRZbsy05HsL+Z9X-ivx1h8GQFJ+=nfg@mail.gmail.com>

Bitcoin version 0.4 release candidate 1 is ready for initial testing;
please grab the source from github and try to break it.

The big, visible change is wallet private key encryption, which is NOT
turned on by default.

The big, invisible change is a reworking of internal critical section
mutexes to fix some chronic problems with bitcoind becoming
unresponsive due to deadlocks.

git shortlog --no-merges v0.3.24..
 ... will give you all the changes.

Thanks to everybody who contributed patches, and sorry if your
favorite patch is not included.

-- 
--
Gavin Andresen



From capibara at xs4all.nl  Fri Sep  2 20:32:38 2011
From: capibara at xs4all.nl (Rob Meijer)
Date: Fri, 2 Sep 2011 22:32:38 +0200
Subject: [Bitcoin-development] BitCoin and MinorFs/AppArmor
In-Reply-To: <4aa4401704cc1e7a1665971b79684a83.squirrel@webmail.xs4all.nl>
References: <4aa4401704cc1e7a1665971b79684a83.squirrel@webmail.xs4all.nl>
Message-ID: <d6060149473a3262940e624e13e6e061.squirrel@webmail.xs4all.nl>

Given that there was not a single response to my post, I gather there is
no to little interest in an updated MinorFs that could be used by bitcoin
on systems that support AppArmor (Ubuntu and OpenSuse).

Nevertheless I've put down the initial set of specs for a rewrite of
MinorFs for if anyone would like to comment on them to make a future match
with Bitcoin more likely, I'm open to all sugestions:

http://minorfs.polacanthus.net/wiki/Concepts_for_MinorFs2

On Fri, August 26, 2011 09:48, Rob Meijer wrote:
> A few years ago I wrote a least authority based set of filesystems named
> MinorFs that worked closely together with AppArmor (suse/ubuntu) to give '
> pseudo persistent processes' their own private but decomposable and
> delegatable piece of filesystem storage:
>
> http://www.linuxjournal.com/magazine/minorfs
> http://www.capibara.com/blog/2011/05/25/taming-mutable-state-for-file-systems/
>
> Currently there is only one perfect fit for MinorFs and that's the stack
> AppArmor/MinorFs/E-language-persistent-application. There are some close
> fits like running ssh without a passphrase (
> http://minorfs.polacanthus.net/wiki/Ssh_private_keys_without_passphrase )
> but these require lots of manual fiddling by the user to get working. The
> ssh trick would probably work with bitcoin, but as you can see from the
> link above, it would be rather cumbersome.
>
> I am trying to get specs together for rewriting MinorFs (in Python) in a
> way that would make it easy and natural for application developers that
> want their application to be able to protect user data (like bitcoin
> wallets) from mallware running under the same uid as that user.
>
> Currently minorfs granularity is hard fixed to that of the 'pseudo
> persistent process', and that granularity is determined as described in
> the following link:
>
> http://minorfs.polacanthus.net/wiki/Pseudo_persistent_process
>
> When using pseudo persistent processes, you basically end up with
> file-system storage that follows almost all of the modeling principles of
> the object capability model. This is great when designing a least
> authority program from scratch and writing it in the (object capability)
> e-language using its persistence facilities.
>
> Given however that I don't expect bitcoin, openssh, chrome, firefox, or
> any other application that would benefit from what MinorFs provides to be
> rewritten in E, it seems like the next version of MinorFs should give up
> on the purity of its least authority model, and take an approach that
> better suits common development languages and practices.
>
> With bitcoin being a project that could benefit most from what MinorFs has
> to offer, I would like to ask bitcoin developers to think about what
> attributes from the current granularity level (pseudo persistent process)
> should be kept, what attributes should be dropped, and what properties
> should be added to arrive at an 'id' that is the best fit for granularity
> of persistent private storage for bitcoin.
>
> I really want to accommodate bitcoin developer needs in this, so all input
> that helps me help you guys to get the next MinorFs version to accommodate
> your needs to a level that code to use MinorFs where available can be
> added to bitcoin, would be extremely welcome.
>
> Let me know what you think,
>
> Rob
>
>
> ------------------------------------------------------------------------------
> EMC VNX: the world's simplest storage, starting under $10K
> The only unified storage solution that offers unified management
> Up to 160% more powerful than alternatives and 25% more efficient.
> Guaranteed. http://p.sf.net/sfu/emc-vnx-dev2dev
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>





From nils at nilsschneider.net  Fri Sep  2 22:05:18 2011
From: nils at nilsschneider.net (Nils Schneider)
Date: Sat, 03 Sep 2011 00:05:18 +0200
Subject: [Bitcoin-development] BitCoin and MinorFs/AppArmor
In-Reply-To: <d6060149473a3262940e624e13e6e061.squirrel@webmail.xs4all.nl>
References: <4aa4401704cc1e7a1665971b79684a83.squirrel@webmail.xs4all.nl>
	<d6060149473a3262940e624e13e6e061.squirrel@webmail.xs4all.nl>
Message-ID: <4E61531E.3050109@nilsschneider.net>

MinorFs sounds like an interesting concept and but wallet encryption
(already being tested and close to release) is a simpler solution for
end-users.

Would MinorFs help securing the wallet on a server, maybe even a
(insecure) VPS?

Can it work without changes to Bitcoin? If not, what is the minimal
amount of changes needed?

Is there any guarantee it will never corrupt the wallet?

What would be the proper way to do backups?

On 02.09.2011 22:32, Rob Meijer wrote:
> Given that there was not a single response to my post, I gather there is
> no to little interest in an updated MinorFs that could be used by bitcoin
> on systems that support AppArmor (Ubuntu and OpenSuse).
> 
> Nevertheless I've put down the initial set of specs for a rewrite of
> MinorFs for if anyone would like to comment on them to make a future match
> with Bitcoin more likely, I'm open to all sugestions:
> 
> http://minorfs.polacanthus.net/wiki/Concepts_for_MinorFs2
> 
> On Fri, August 26, 2011 09:48, Rob Meijer wrote:
>> A few years ago I wrote a least authority based set of filesystems named
>> MinorFs that worked closely together with AppArmor (suse/ubuntu) to give '
>> pseudo persistent processes' their own private but decomposable and
>> delegatable piece of filesystem storage:
>>
>> http://www.linuxjournal.com/magazine/minorfs
>> http://www.capibara.com/blog/2011/05/25/taming-mutable-state-for-file-systems/
>>
>> Currently there is only one perfect fit for MinorFs and that's the stack
>> AppArmor/MinorFs/E-language-persistent-application. There are some close
>> fits like running ssh without a passphrase (
>> http://minorfs.polacanthus.net/wiki/Ssh_private_keys_without_passphrase )
>> but these require lots of manual fiddling by the user to get working. The
>> ssh trick would probably work with bitcoin, but as you can see from the
>> link above, it would be rather cumbersome.
>>
>> I am trying to get specs together for rewriting MinorFs (in Python) in a
>> way that would make it easy and natural for application developers that
>> want their application to be able to protect user data (like bitcoin
>> wallets) from mallware running under the same uid as that user.
>>
>> Currently minorfs granularity is hard fixed to that of the 'pseudo
>> persistent process', and that granularity is determined as described in
>> the following link:
>>
>> http://minorfs.polacanthus.net/wiki/Pseudo_persistent_process
>>
>> When using pseudo persistent processes, you basically end up with
>> file-system storage that follows almost all of the modeling principles of
>> the object capability model. This is great when designing a least
>> authority program from scratch and writing it in the (object capability)
>> e-language using its persistence facilities.
>>
>> Given however that I don't expect bitcoin, openssh, chrome, firefox, or
>> any other application that would benefit from what MinorFs provides to be
>> rewritten in E, it seems like the next version of MinorFs should give up
>> on the purity of its least authority model, and take an approach that
>> better suits common development languages and practices.
>>
>> With bitcoin being a project that could benefit most from what MinorFs has
>> to offer, I would like to ask bitcoin developers to think about what
>> attributes from the current granularity level (pseudo persistent process)
>> should be kept, what attributes should be dropped, and what properties
>> should be added to arrive at an 'id' that is the best fit for granularity
>> of persistent private storage for bitcoin.
>>
>> I really want to accommodate bitcoin developer needs in this, so all input
>> that helps me help you guys to get the next MinorFs version to accommodate
>> your needs to a level that code to use MinorFs where available can be
>> added to bitcoin, would be extremely welcome.
>>
>> Let me know what you think,
>>
>> Rob
>>
>>
>> ------------------------------------------------------------------------------
>> EMC VNX: the world's simplest storage, starting under $10K
>> The only unified storage solution that offers unified management
>> Up to 160% more powerful than alternatives and 25% more efficient.
>> Guaranteed. http://p.sf.net/sfu/emc-vnx-dev2dev
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>
>>
> 
> 
> 
> ------------------------------------------------------------------------------
> Special Offer -- Download ArcSight Logger for FREE!
> Finally, a world-class log management solution at an even better 
> price-free! And you'll get a free "Love Thy Logs" t-shirt when you
> download Logger. Secure your free ArcSight Logger TODAY!
> http://p.sf.net/sfu/arcsisghtdev2dev
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 




From witchspace81 at gmail.com  Sat Sep  3 07:04:44 2011
From: witchspace81 at gmail.com (John Smith)
Date: Sat, 3 Sep 2011 07:04:44 +0000
Subject: [Bitcoin-development] BitCoin and MinorFs/AppArmor
In-Reply-To: <d6060149473a3262940e624e13e6e061.squirrel@webmail.xs4all.nl>
References: <4aa4401704cc1e7a1665971b79684a83.squirrel@webmail.xs4all.nl>
	<d6060149473a3262940e624e13e6e061.squirrel@webmail.xs4all.nl>
Message-ID: <CAJNQ0stL3yP9mJtPMEjWZeHtKT-3kZ+Psbpfs1XtVnEnd6x2gQ@mail.gmail.com>

On Fri, Sep 2, 2011 at 8:32 PM, Rob Meijer <capibara at xs4all.nl> wrote:

> Given that there was not a single response to my post, I gather there is
> no to little interest in an updated MinorFs that could be used by bitcoin
> on systems that support AppArmor (Ubuntu and OpenSuse).
>

Oh yes there is interest. I meant to reply but haven't been able to put much
energy in bitcoin development lately.

More strict privilege seperation between applications on a least-authority
basis is something that Ubuntu is certainly going to need if they're serious
with the app store thing (and want to keep up with Android and Macosx...).

This has been needed for a long time, and this would be useful for any
private data managed by applications running as the same user (ssh,
browsers, pgp, ...)

Wallet encryption is useful and necessary but no substitute for OS-level
protection.


> Nevertheless I've put down the initial set of specs for a rewrite of
> MinorFs for if anyone would like to comment on them to make a future match
> with Bitcoin more likely, I'm open to all sugestions:
>
> http://minorfs.polacanthus.net/wiki/Concepts_for_MinorFs2
>

You have to rewrite the entire thing from scratch?

This is probably blasphemy but: how can it be compared to the android model,
with a UID per application/user, and thus layering the security on top of
current UNIX/ACL permissions?  Is another FS really needed?

JS
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110903/df200631/attachment.html>

From witchspace81 at gmail.com  Sat Sep  3 07:15:06 2011
From: witchspace81 at gmail.com (John Smith)
Date: Sat, 3 Sep 2011 07:15:06 +0000
Subject: [Bitcoin-development] Version 0.4 release candidate 1
In-Reply-To: <CABsx9T2_CfaEoxSjQ4PhRZbsy05HsL+Z9X-ivx1h8GQFJ+=nfg@mail.gmail.com>
References: <CABsx9T2_CfaEoxSjQ4PhRZbsy05HsL+Z9X-ivx1h8GQFJ+=nfg@mail.gmail.com>
Message-ID: <CAJNQ0suKW4XmYAUxkHYJZnPyf0_KxjxHP4v7_1Dubs0cRsJkOA@mail.gmail.com>

On Fri, Sep 2, 2011 at 8:12 PM, Gavin Andresen <gavinandresen at gmail.com>wrote:

> Bitcoin version 0.4 release candidate 1 is ready for initial testing;
> please grab the source from github and try to break it.
>
> The big, visible change is wallet private key encryption, which is NOT
> turned on by default.
>
> The big, invisible change is a reworking of internal critical section
> mutexes to fix some chronic problems with bitcoind becoming
> unresponsive due to deadlocks.
>

Great, congrats!

The mutex overhaul was badly needed. I'm glad to see the project move this
fast in a sudden.

JS
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110903/b6ecfdb2/attachment.html>

From chris.double at double.co.nz  Sat Sep  3 13:52:19 2011
From: chris.double at double.co.nz (Chris Double)
Date: Sun, 4 Sep 2011 01:52:19 +1200
Subject: [Bitcoin-development] Transaction limit size in
	CWallet::CreateTransaction
Message-ID: <CALn1vHHynfb-u8fSwsStA=e5vR6x-e3yA44Z9Mt9A+AgO1+ezQ@mail.gmail.com>

In CWallet::CreateTransaction there is a call to 'GetSerializeSize' on
line 979 (https://github.com/bitcoin/bitcoin/blob/master/src/wallet.cpp#L979).
It looks like:

---------8<----------
unsigned int nBytes = ::GetSerializeSize(*(CTransaction*)&wtxNew, SER_NETWORK)
if (nBytes >= MAX_BLOCK_SIZE_GEN/5)
  return false;
dPriority /= nBytes;
---------8<----------

'wtxNew' is a CWalletTxn. So this gets the serialized size of the
transaction, including all the extra data held in the wallet for that
transaction, and uses that size for computation of priority. Is that
correct? Should it be only the size of the CTransaction* part of the
transaction that should be used?

It looks this was from the casting shenanigans but unless I'm
mistaken, that casting doesn't actually do anything. We get a pointer
to a CTransaction but then dereference it, so the template function
'GetSerializeSize' would get the most derived class, right?

So was the intent to use the CWalletTxn size, and the casting is
superfluous, or was it supposed to be the CTransaction* portion and
the cast is an incorrect way of doing that? Or am I suffering from
late night programmer syndrome and reading it wrong?

Chris.
-- 
http://www.bluishcoder.co.nz



From chris.double at double.co.nz  Sat Sep  3 14:16:40 2011
From: chris.double at double.co.nz (Chris Double)
Date: Sun, 4 Sep 2011 02:16:40 +1200
Subject: [Bitcoin-development] Transaction limit size in
	CWallet::CreateTransaction
In-Reply-To: <CALn1vHHynfb-u8fSwsStA=e5vR6x-e3yA44Z9Mt9A+AgO1+ezQ@mail.gmail.com>
References: <CALn1vHHynfb-u8fSwsStA=e5vR6x-e3yA44Z9Mt9A+AgO1+ezQ@mail.gmail.com>
Message-ID: <CALn1vHHZAfE+phvcaSQNaaAgWPjVGfhOXKyp+hofrYgwAKBR9w@mail.gmail.com>

On Sun, Sep 4, 2011 at 1:52 AM, Chris Double <chris.double at double.co.nz> wrote:
> So was the intent to use the CWalletTxn size, and the casting is
> superfluous, or was it supposed to be the CTransaction* portion and
> the cast is an incorrect way of doing that? Or am I suffering from
> late night programmer syndrome and reading it wrong?

After a discussion on #bitcoin-dev it is indeed the latter. I was
under the mistaken believe that the GetSerializeSize method in
CTransaction and CWalletTxn were virtual, which would result in the
behavior I was thinking of. But they're not so it works. Please
disregard!

Chris.
-- 
http://www.bluishcoder.co.nz



From luke at dashjr.org  Sat Sep  3 15:27:40 2011
From: luke at dashjr.org (Luke-Jr)
Date: Sat, 3 Sep 2011 11:27:40 -0400
Subject: [Bitcoin-development] Last try: Fixes for 0.4
In-Reply-To: <201108041629.04130.luke@dashjr.org>
References: <BANLkTinus7PWNLJi9rEvTtSB93hjLKhFpg@mail.gmail.com>
	<201107101442.43605.luke@dashjr.org>
	<201108041629.04130.luke@dashjr.org>
Message-ID: <201109031127.42880.luke@dashjr.org>

Once more before I just give up on trying...

These branches fix bugs still remaining in 0.4rc1:
- bugfix_getwork_newblk_race
- getwork_dedupe
- boost_fs3
- gitignore

Additionally, this branch adds a tolerance to human error typing in base58 
with ambiguous symbols, and should be very safe to merge:
- base58_liberal_parsing

Again, these can all be merged with:
# git fetch git://gitorious.org/~Luke-Jr/bitcoin/luke-jr-bitcoin.git \
#           <branch name> && git merge FETCH_HEAD



From gavinandresen at gmail.com  Sun Sep  4 00:13:14 2011
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Sat, 3 Sep 2011 20:13:14 -0400
Subject: [Bitcoin-development] 0.4rc1 known bugs
Message-ID: <CABsx9T1juB-0hr9NW=PoO5eh_Aqhzkiv3tnXTSTsjBKiy4y0JA@mail.gmail.com>

Quick status update on 0.4; I probably won't have time to tackle these
properly before Tuesday:

+ sipa found what looks like a deadlock between the addr-handling and
IRC-join-handling code.
+ UukGoblin reports a deadlock problem on a bitcoind handling getwork requests.

If you want to get more familiar with the bitcoin code and you have a
lot of patience, tracking down deadlocks a great way to do it.

+ ArtForz found a performance bug with transactions that have
thousands of inputs and outputs on the solidcoin test network.
 (not as big an issue for bitcoin due to fees being based on
transaction size, but still worrying)

-- 
--
Gavin Andresen



From bitcoin-list at bluematt.me  Sun Sep  4 02:43:48 2011
From: bitcoin-list at bluematt.me (Matt Corallo)
Date: Sat, 03 Sep 2011 22:43:48 -0400
Subject: [Bitcoin-development] 0.4rc1 known bugs
In-Reply-To: <CABsx9T1juB-0hr9NW=PoO5eh_Aqhzkiv3tnXTSTsjBKiy4y0JA@mail.gmail.com>
References: <CABsx9T1juB-0hr9NW=PoO5eh_Aqhzkiv3tnXTSTsjBKiy4y0JA@mail.gmail.com>
Message-ID: <1315104228.4816.1.camel@BMThinkPad.lan.bluematt.me>

On Sat, 2011-09-03 at 20:13 -0400, Gavin Andresen wrote:
> Quick status update on 0.4; I probably won't have time to tackle these
> properly before Tuesday:
> 
> + sipa found what looks like a deadlock between the addr-handling and
> IRC-join-handling code.
> + UukGoblin reports a deadlock problem on a bitcoind handling getwork requests.
> 
> If you want to get more familiar with the bitcoin code and you have a
> lot of patience, tracking down deadlocks a great way to do it.
> 
> + ArtForz found a performance bug with transactions that have
> thousands of inputs and outputs on the solidcoin test network.
>  (not as big an issue for bitcoin due to fees being based on
> transaction size, but still worrying)
> 
+ (my fault) Gitian doesnt build properly.




From pieter.wuille at gmail.com  Sun Sep  4 12:04:48 2011
From: pieter.wuille at gmail.com (Pieter Wuille)
Date: Sun, 4 Sep 2011 14:04:48 +0200
Subject: [Bitcoin-development] 0.4rc1 known bugs]
Message-ID: <20110904120448.GA19245@ulyssis.org>

On Sat, Sep 03, 2011 at 08:13:14PM -0400, Gavin Andresen wrote:
> Quick status update on 0.4; I probably won't have time to tackle these
> properly before Tuesday:
> 
> + sipa found what looks like a deadlock between the addr-handling and
> IRC-join-handling code.

I've compiled bitcoind with Gavin's DEBUG_LOCKORDER, and fixed two potential
reported deadlock issues (see https://github.com/sipa/bitcoin/commits/lockfixes).

No deadlock warnings are given any more, but the issue remains. Just starting up
bitcoin with an empty addr.dat seems enough to cause it every few attempts. 
Is there is locked code that waits for an event that never occurs?

-- 
Pieter



From voights at gmail.com  Mon Sep  5 02:21:24 2011
From: voights at gmail.com (Forrest Voight)
Date: Sun, 4 Sep 2011 22:21:24 -0400
Subject: [Bitcoin-development] Pull request for "getmemorypool" RPC call
Message-ID: <CAOCHLotB9J1hsOTdxT0roKKNZqyeR9w_RzdG+JUqiDBRZeY4iw@mail.gmail.com>

(Moving here because forum thread at
https://bitcointalk.org/index.php?topic=39088 didn't yield much
discussion)

Pull request: https://github.com/bitcoin/bitcoin/pull/476
Diff: https://github.com/bitcoin/bitcoin/pull/476/files

This was originally a patch that returned bitcoin's memory pool as
list of transaction hashes and the amount of total fees, but evolved
into a full alternative to the "getwork" RPC call for clients that
create their own generation transactions.

Like getwork, this call calls CreateBlock and returns parts of it for
mining, but instead of generating its own merkle tree, it returns all
the information needed to create a generation transaction in addition
to the full contents of other transactions that should be included.
It, as is, has had some testing done with p2pool - it resulted the
first p2pool generated block with transactions:
http://blockexplorer.com/block/00000000000002436bd2ae60d67d6fc0dce44deba2ad739619a3d364f6283e64


Help text:

getmemorypool [data]
If [data] is not specified, returns data needed to construct a block to work on:
  "version" : block version
  "previousblockhash" : hash of current highest block
  "transactions" : contents of non-coinbase transactions that should
be included in the next block
  "coinbasevalue" : maximum allowable input to coinbase transaction,
including the generation award and transaction fees
  "time" : timestamp appropriate for next block
  "bits" : compressed target of next block
If [data] is specified, tries to solve the block and returns true if
it was successful.


Thank you,
Forrest Voight



From gronager at ceptacle.com  Mon Sep  5 07:25:47 2011
From: gronager at ceptacle.com (=?iso-8859-1?Q?Michael_Gr=F8nager?=)
Date: Mon, 5 Sep 2011 09:25:47 +0200
Subject: [Bitcoin-development] 0.4rc1 known bugs
In-Reply-To: <CABsx9T1juB-0hr9NW=PoO5eh_Aqhzkiv3tnXTSTsjBKiy4y0JA@mail.gmail.com>
References: <CABsx9T1juB-0hr9NW=PoO5eh_Aqhzkiv3tnXTSTsjBKiy4y0JA@mail.gmail.com>
Message-ID: <53DAB1AA-3983-4F7B-B237-32E2871BABDC@ceptacle.com>

Hi Gavin,

Did a quick compile and run (bitcoind, Ubuntu 10.04.3 LTS)

Findings - compile (I do not use the UPNP feature):
in the makefile.unix I have to change the:
USE_UPNP:=0
to 
USE_UPNP:=
i.e. it is defined if it is "0" ! 

running: no apparent issues (I have never managed to trigger the deadlocks.?.)

Nice job, but a quick cleanup of interfaces and classes (one file pr class, all interfaces defined in headers) would really be nice... Would be happy to do it myself, as it would greatly enhance the flexibility of the code and be a first step towards a more library/interface like split.

Cheers,

Michael


On 04/09/2011, at 02:13, Gavin Andresen wrote:

> Quick status update on 0.4; I probably won't have time to tackle these
> properly before Tuesday:
> 
> + sipa found what looks like a deadlock between the addr-handling and
> IRC-join-handling code.
> + UukGoblin reports a deadlock problem on a bitcoind handling getwork requests.
> 
> If you want to get more familiar with the bitcoin code and you have a
> lot of patience, tracking down deadlocks a great way to do it.
> 
> + ArtForz found a performance bug with transactions that have
> thousands of inputs and outputs on the solidcoin test network.
> (not as big an issue for bitcoin due to fees being based on
> transaction size, but still worrying)
> 
> -- 
> --
> Gavin Andresen
> 
> ------------------------------------------------------------------------------
> Special Offer -- Download ArcSight Logger for FREE!
> Finally, a world-class log management solution at an even better 
> price-free! And you'll get a free "Love Thy Logs" t-shirt when you
> download Logger. Secure your free ArcSight Logger TODAY!
> http://p.sf.net/sfu/arcsisghtdev2dev
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development

Michael Gronager, PhD
Owner Ceptacle / NDGF Director, NORDUnet A/S
Jens Juels Gade 33
2100 Copenhagen E
Mobile: +45 31 62 14 01
E-mail: gronager at ceptacle.com





From capibara at xs4all.nl  Mon Sep  5 11:55:43 2011
From: capibara at xs4all.nl (Rob Meijer)
Date: Mon, 5 Sep 2011 13:55:43 +0200
Subject: [Bitcoin-development] BitCoin and MinorFs/AppArmor
In-Reply-To: <4E61531E.3050109@nilsschneider.net>
References: <4aa4401704cc1e7a1665971b79684a83.squirrel@webmail.xs4all.nl>
	<d6060149473a3262940e624e13e6e061.squirrel@webmail.xs4all.nl>
	<4E61531E.3050109@nilsschneider.net>
Message-ID: <676b6b58ece6f8f3c4ee8abdebce9e29.squirrel@webmail.xs4all.nl>

On Sat, September 3, 2011 00:05, Nils Schneider wrote:
> MinorFs sounds like an interesting concept and but wallet encryption
> (already being tested and close to release) is a simpler solution for
> end-users.

I think the two could be considered complementary. Basicaly the existing
MinorFs provides to the pseudo-persistent-process that private members
provide to objects. 'Encapsulation of variables that still can be
delegated by the object that encapsulates them'. In the MinorFs2 that I
just started writing, I try to lower the barrier to using MinorFs by
providing facilities to do pick a granularity for 'object' more suitable
for most lines of development (where pseudo persistent processes are an
unnatural concept).

Think of BitCoin running as user certain user as an object and a piece of
malware running as the same user as a second object. You can than think of
the users home directory as a global variable, while MinorFs gives a
private home to both the bitcoin object and the malware object. The
bitcoin object can delegate parts of its private state to other objects,
but as long as bit-coin doesn't do that, the private state won't be
disclosed.

Its a good idea to have data on disk encrypted even if you use something
like Minorfs, if only to protect against bootable media attacks.

> Would MinorFs help securing the wallet on a server, maybe even a
> (insecure) VPS?

No.

> Can it work without changes to Bitcoin? If not, what is the minimal
> amount of changes needed?

Basically the existing MinorFs will work already with the existing BitCoin
due to the fact that Bitcoin seems to extract $HOME from an environment
variable, but there are some caveats:

* It needs a bash script for starting up bitcoin with $HOME set to the
  MinorFs home.
* Bitcoin can be started in only one way. That is, bitcoin started from
the gnome menu is interpret being a completely differnt bitcoin than
bitcoin started from an xterm.
* There can only be one bitcoin started and running at once.
* All potential malware needs to run with at least an AppArmor profile
that keeps it from reading /proc/$PID for pids other than itself.

In the new version I'm contemplating, there would I think at least be a
minor change to bitcoin needed:

* bitcoin would have to use a small library that provides a
'minorfs_getpwuid' function.

This function will work like getpwuid on any system without an active
MinorFs2, and for any non apparmor confined process.
On a system with MinorFs running it should return a passwd structure with
the home changed to the MinorFs2 home.

> Is there any guarantee it will never corrupt the wallet?

All read and write operations will map directly to the underlying
file-system, so basically it comes with the same lack of guarantee that
any
file-system comes with once the underlying media becomes flaky.

> What would be the proper way to do backups?

Haven't really thought about that, what is considered the currently proper
way to keep backups for bitcoin?

> On 02.09.2011 22:32, Rob Meijer wrote:
>> Given that there was not a single response to my post, I gather there is
>> no to little interest in an updated MinorFs that could be used by
>> bitcoin
>> on systems that support AppArmor (Ubuntu and OpenSuse).
>>
>> Nevertheless I've put down the initial set of specs for a rewrite of
>> MinorFs for if anyone would like to comment on them to make a future
>> match
>> with Bitcoin more likely, I'm open to all sugestions:
>>
>> http://minorfs.polacanthus.net/wiki/Concepts_for_MinorFs2
>>
>> On Fri, August 26, 2011 09:48, Rob Meijer wrote:
>>> A few years ago I wrote a least authority based set of filesystems
>>> named
>>> MinorFs that worked closely together with AppArmor (suse/ubuntu) to
>>> give '
>>> pseudo persistent processes' their own private but decomposable and
>>> delegatable piece of filesystem storage:
>>>
>>> http://www.linuxjournal.com/magazine/minorfs
>>> http://www.capibara.com/blog/2011/05/25/taming-mutable-state-for-file-systems/
>>>
>>> Currently there is only one perfect fit for MinorFs and that's the
>>> stack
>>> AppArmor/MinorFs/E-language-persistent-application. There are some
>>> close
>>> fits like running ssh without a passphrase (
>>> http://minorfs.polacanthus.net/wiki/Ssh_private_keys_without_passphrase
>>> )
>>> but these require lots of manual fiddling by the user to get working.
>>> The
>>> ssh trick would probably work with bitcoin, but as you can see from the
>>> link above, it would be rather cumbersome.
>>>
>>> I am trying to get specs together for rewriting MinorFs (in Python) in
>>> a
>>> way that would make it easy and natural for application developers that
>>> want their application to be able to protect user data (like bitcoin
>>> wallets) from mallware running under the same uid as that user.
>>>
>>> Currently minorfs granularity is hard fixed to that of the 'pseudo
>>> persistent process', and that granularity is determined as described in
>>> the following link:
>>>
>>> http://minorfs.polacanthus.net/wiki/Pseudo_persistent_process
>>>
>>> When using pseudo persistent processes, you basically end up with
>>> file-system storage that follows almost all of the modeling principles
>>> of
>>> the object capability model. This is great when designing a least
>>> authority program from scratch and writing it in the (object
>>> capability)
>>> e-language using its persistence facilities.
>>>
>>> Given however that I don't expect bitcoin, openssh, chrome, firefox, or
>>> any other application that would benefit from what MinorFs provides to
>>> be
>>> rewritten in E, it seems like the next version of MinorFs should give
>>> up
>>> on the purity of its least authority model, and take an approach that
>>> better suits common development languages and practices.
>>>
>>> With bitcoin being a project that could benefit most from what MinorFs
>>> has
>>> to offer, I would like to ask bitcoin developers to think about what
>>> attributes from the current granularity level (pseudo persistent
>>> process)
>>> should be kept, what attributes should be dropped, and what properties
>>> should be added to arrive at an 'id' that is the best fit for
>>> granularity
>>> of persistent private storage for bitcoin.
>>>
>>> I really want to accommodate bitcoin developer needs in this, so all
>>> input
>>> that helps me help you guys to get the next MinorFs version to
>>> accommodate
>>> your needs to a level that code to use MinorFs where available can be
>>> added to bitcoin, would be extremely welcome.
>>>
>>> Let me know what you think,
>>>
>>> Rob
>>>
>>>
>>> ------------------------------------------------------------------------------
>>> EMC VNX: the world's simplest storage, starting under $10K
>>> The only unified storage solution that offers unified management
>>> Up to 160% more powerful than alternatives and 25% more efficient.
>>> Guaranteed. http://p.sf.net/sfu/emc-vnx-dev2dev
>>> _______________________________________________
>>> Bitcoin-development mailing list
>>> Bitcoin-development at lists.sourceforge.net
>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>>
>>>
>>
>>
>>
>> ------------------------------------------------------------------------------
>> Special Offer -- Download ArcSight Logger for FREE!
>> Finally, a world-class log management solution at an even better
>> price-free! And you'll get a free "Love Thy Logs" t-shirt when you
>> download Logger. Secure your free ArcSight Logger TODAY!
>> http://p.sf.net/sfu/arcsisghtdev2dev
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>
>
>
> ------------------------------------------------------------------------------
> Special Offer -- Download ArcSight Logger for FREE!
> Finally, a world-class log management solution at an even better
> price-free! And you'll get a free "Love Thy Logs" t-shirt when you
> download Logger. Secure your free ArcSight Logger TODAY!
> http://p.sf.net/sfu/arcsisghtdev2dev
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>





From mike at plan99.net  Mon Sep  5 12:04:49 2011
From: mike at plan99.net (Mike Hearn)
Date: Mon, 5 Sep 2011 14:04:49 +0200
Subject: [Bitcoin-development] Adding a pong message to the protocol
Message-ID: <CANEZrP3Fh=Ffeh5PtcaL4QBKXUzkFYAar4031-wVZOVQOhngrw@mail.gmail.com>

I haven't written a patch for this, I might do so if there's
sufficient interest.

Nodes that are under heavy load exhibit extremely high latency, this
makes downloading the block chain from a node that is itself
downloading the block chain basically useless as it takes 30-60
seconds for the node to respond to clients.

It could be fixed by making nodes not accept connections/advertise
until they feel sure they have the best chain, but a more general fix
is to add a "pong" which is returned by "ping". It could contain some
useful stats about the node for network crawlers, but most importantly
timing the delta between ping and pong would let you order nodes by
responsiveness. Currently if you want to do this, it has to be
indirect, using some message that is guarantee to yield a known
response.

Because old clients ignore messages they don't understand, adding the
pong response would be easy and backwards compatible. Making nodes
prefer responsive servers might need a bit of care to avoid sloshing
load around too much.

Thoughts?



From capibara at xs4all.nl  Mon Sep  5 12:13:58 2011
From: capibara at xs4all.nl (Rob Meijer)
Date: Mon, 5 Sep 2011 14:13:58 +0200
Subject: [Bitcoin-development] BitCoin and MinorFs/AppArmor
In-Reply-To: <CAJNQ0stL3yP9mJtPMEjWZeHtKT-3kZ+Psbpfs1XtVnEnd6x2gQ@mail.gmail.com>
References: <4aa4401704cc1e7a1665971b79684a83.squirrel@webmail.xs4all.nl>
	<d6060149473a3262940e624e13e6e061.squirrel@webmail.xs4all.nl>
	<CAJNQ0stL3yP9mJtPMEjWZeHtKT-3kZ+Psbpfs1XtVnEnd6x2gQ@mail.gmail.com>
Message-ID: <93ffca16f2e9178f302e8b1c0dc52afe.squirrel@webmail.xs4all.nl>

On Sat, September 3, 2011 09:04, John Smith wrote:
> On Fri, Sep 2, 2011 at 8:32 PM, Rob Meijer <capibara at xs4all.nl> wrote:
>
>> Given that there was not a single response to my post, I gather there is
>> no to little interest in an updated MinorFs that could be used by
>> bitcoin
>> on systems that support AppArmor (Ubuntu and OpenSuse).
>>
>
> Oh yes there is interest. I meant to reply but haven't been able to put
> much
> energy in bitcoin development lately.
>
> More strict privilege seperation between applications on a least-authority
> basis is something that Ubuntu is certainly going to need if they're
> serious
> with the app store thing (and want to keep up with Android and Macosx...).
>
> This has been needed for a long time, and this would be useful for any
> private data managed by applications running as the same user (ssh,
> browsers, pgp, ...)
>
> Wallet encryption is useful and necessary but no substitute for OS-level
> protection.
>
>
>> Nevertheless I've put down the initial set of specs for a rewrite of
>> MinorFs for if anyone would like to comment on them to make a future
>> match
>> with Bitcoin more likely, I'm open to all sugestions:
>>
>> http://minorfs.polacanthus.net/wiki/Concepts_for_MinorFs2
>>
>
> You have to rewrite the entire thing from scratch?

I think its best. The old version I wrote in Perl using some rather rarely
used perl modules from cpan that don't have packages in either opensuse
nor ubuntu. I've moved most of my other new development projects to Python
or C++ for a long time, so Python has become much more natural for me to
work in, while migrating all perl module usage to a packaging compatible
set would also be a pretty large task.
>From this I concluded that it would probably be best to take lessons
learned from the existing MinorFs and do a rewrite in Python, making sure
all python modules used are available in both OpenSuse and ubuntu.

> This is probably blasphemy but: how can it be compared to the android
> model,
> with a UID per application/user, and thus layering the security on top of
> current UNIX/ACL permissions?  Is another FS really needed?

MinorFs IS basically a set of user space file-systems on top of current
UNIX/ACL permissions. Without further changes with application granularity
and without delegation of sub-trees, the two are basically equivalent.

The plans I currently have will allow a migration path from such a model
to one with a finer granularity level where sub systems delegate sub trees
to eachother in a pass by reference way.


> JS
>





From luke at dashjr.org  Mon Sep  5 12:42:22 2011
From: luke at dashjr.org (Luke-Jr)
Date: Mon, 5 Sep 2011 08:42:22 -0400
Subject: [Bitcoin-development] 0.4rc1 known bugs
In-Reply-To: <53DAB1AA-3983-4F7B-B237-32E2871BABDC@ceptacle.com>
References: <CABsx9T1juB-0hr9NW=PoO5eh_Aqhzkiv3tnXTSTsjBKiy4y0JA@mail.gmail.com>
	<53DAB1AA-3983-4F7B-B237-32E2871BABDC@ceptacle.com>
Message-ID: <201109050842.24757.luke@dashjr.org>

On Monday, September 05, 2011 3:25:47 AM Michael Gr?nager wrote:
> Findings - compile (I do not use the UPNP feature):
> in the makefile.unix I have to change the:
> USE_UPNP:=0
> to
> USE_UPNP:=
> i.e. it is defined if it is "0" !

Yes, the default is "UPnP supported, disabled by default" (USE_UPNP=0), not 
"UPnP not supported" (USE_UPNP=). This is documented in build-unix.txt ...



From gronager at ceptacle.com  Mon Sep  5 12:47:16 2011
From: gronager at ceptacle.com (=?iso-8859-1?Q?Michael_Gr=F8nager?=)
Date: Mon, 5 Sep 2011 14:47:16 +0200
Subject: [Bitcoin-development] 0.4rc1 known bugs
In-Reply-To: <201109050842.24757.luke@dashjr.org>
References: <CABsx9T1juB-0hr9NW=PoO5eh_Aqhzkiv3tnXTSTsjBKiy4y0JA@mail.gmail.com>
	<53DAB1AA-3983-4F7B-B237-32E2871BABDC@ceptacle.com>
	<201109050842.24757.luke@dashjr.org>
Message-ID: <DED1467C-B8DF-4C21-B0D6-264B6099575F@ceptacle.com>

Sorry, by bad - first clean checkout for quite a while (must have changed it earlier myself...).

/M

On 05/09/2011, at 14:42, Luke-Jr wrote:

> On Monday, September 05, 2011 3:25:47 AM Michael Gr?nager wrote:
>> Findings - compile (I do not use the UPNP feature):
>> in the makefile.unix I have to change the:
>> USE_UPNP:=0
>> to
>> USE_UPNP:=
>> i.e. it is defined if it is "0" !
> 
> Yes, the default is "UPnP supported, disabled by default" (USE_UPNP=0), not 
> "UPnP not supported" (USE_UPNP=). This is documented in build-unix.txt ...
> 
> ------------------------------------------------------------------------------
> Special Offer -- Download ArcSight Logger for FREE!
> Finally, a world-class log management solution at an even better 
> price-free! And you'll get a free "Love Thy Logs" t-shirt when you
> download Logger. Secure your free ArcSight Logger TODAY!
> http://p.sf.net/sfu/arcsisghtdev2dev
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development

Michael Gronager, PhD
Owner Ceptacle / NDGF Director, NORDUnet A/S
Jens Juels Gade 33
2100 Copenhagen E
Mobile: +45 31 62 14 01
E-mail: gronager at ceptacle.com





From gmaxwell at gmail.com  Mon Sep  5 13:30:24 2011
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Mon, 5 Sep 2011 09:30:24 -0400
Subject: [Bitcoin-development] Adding a pong message to the protocol
In-Reply-To: <CANEZrP3Fh=Ffeh5PtcaL4QBKXUzkFYAar4031-wVZOVQOhngrw@mail.gmail.com>
References: <CANEZrP3Fh=Ffeh5PtcaL4QBKXUzkFYAar4031-wVZOVQOhngrw@mail.gmail.com>
Message-ID: <CAAS2fgQdRP5bd02tR_L6_hWh+qEwXWOVH8KRcpuFiRvKwD5o1w@mail.gmail.com>

On Mon, Sep 5, 2011 at 8:04 AM, Mike Hearn <mike at plan99.net> wrote:
> I haven't written a patch for this, I might do so if there's
> sufficient interest.
[snip]
> Thoughts?

I'd rather see effort spent on the root issues, e.g. having nodes
gauge their own suitability (working inbound port, reasonably current
block chain, etc) before becoming advertised listeners.

Or more importantly? figuring some way of setting up network
simulations which could be used to actually _validate_ proposed
changes in this area.

I, or many other people, could spout endlessly about attractive
sounding network enhancements (e.g. move-to-front peer prioritization,
tweaks to peer selection, etc.) but it's all just arm waving without a
way to measure it, and the real network is far too slow to upgrade
(and important) to test things in situ while testnet is far too small
and unlike the real network for useful testing.



From mike at plan99.net  Mon Sep  5 14:32:36 2011
From: mike at plan99.net (Mike Hearn)
Date: Mon, 5 Sep 2011 16:32:36 +0200
Subject: [Bitcoin-development] Adding a pong message to the protocol
In-Reply-To: <CAAS2fgQdRP5bd02tR_L6_hWh+qEwXWOVH8KRcpuFiRvKwD5o1w@mail.gmail.com>
References: <CANEZrP3Fh=Ffeh5PtcaL4QBKXUzkFYAar4031-wVZOVQOhngrw@mail.gmail.com>
	<CAAS2fgQdRP5bd02tR_L6_hWh+qEwXWOVH8KRcpuFiRvKwD5o1w@mail.gmail.com>
Message-ID: <CANEZrP3NU4tp2JD7syF6bvOn0JEv5M8rsadpMpuBJ-KLs8ETvw@mail.gmail.com>

> I'd rather see effort spent on the root issues, e.g. having nodes
> gauge their own suitability (working inbound port, reasonably current
> block chain, etc) before becoming advertised listeners.

They can't always judge it, eg if the link between you and that peer
is saturated then you may have connectivity, but it may be very slow
yet appear fast to the node itself.

This really has two parts:

(1) Making it easy to determine latency
(2) Using that data to make better connection decisions

Adding a pong message is fairly trivial and can help solve (1). For
instance we can start building latency histograms of nodes to see how
performant the network is, without risking any issues. Then that data
can be used to inform simulations of what happens if the measurements
are used by the node software. It also lets us experiment with less
critical software like Android clients.



From gavinandresen at gmail.com  Mon Sep  5 20:41:24 2011
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Mon, 5 Sep 2011 16:41:24 -0400
Subject: [Bitcoin-development] Pull request: faster initial blockchain
	download
Message-ID: <CABsx9T2vS4a3k6_6T7KvA+eoc8Rc61HGKRc0nBVMqLeGeTPftQ@mail.gmail.com>

I'd appreciate review/feedback on this:

https://github.com/bitcoin/bitcoin/pull/492

This change skips ECDSA signature verification for transactions during
the initial block-chain download, which makes downloading the block
chain much faster.

"Initial block chain download" is all blocks up to 120 blocks before
the last blockchain lock-in point.

Reasoning for why this is safe:

If an attacker tries to feed a client bad transactions during the
initial block-chain download (transactions with invalid signatures),
then they change the merkle tree, and at the first blockchain lock-in
the bad chain will be rejected.

Transactions are still checked for orphan blocks that come in during
initial block-chain-download (ConnectInputs will be called with
fBlock=FALSE) and for mined blocks (ConnectInputs called with
fMiner=TRUE).

-- 
--
Gavin Andresen



From gavinandresen at gmail.com  Mon Sep  5 20:43:17 2011
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Mon, 5 Sep 2011 16:43:17 -0400
Subject: [Bitcoin-development] Pull request: Optimize database writes for
	transactions with lots of TxIns.
Message-ID: <CABsx9T1g2p71YLeDz5mocUJTpjaKN0tKRaFQ_HcLWyKNOaT1pw@mail.gmail.com>

And I'd appreciate review/feedback on this:
  https://github.com/bitcoin/bitcoin/pull/491

Patch from ArtForz, who discovered the problem.

The problem was chaining large transactions (transactions with lots of
ins and outs) would make the berkeley db transaction log get very big,
as the dependencies (TxIns) of a transaction might be re-written
multiple times.

With this fix, each each transaction referred to by TxIns is written once.

-- 
--
Gavin Andresen



From shadders.del at gmail.com  Tue Sep  6 07:42:30 2011
From: shadders.del at gmail.com (Steve)
Date: Tue, 06 Sep 2011 17:42:30 +1000
Subject: [Bitcoin-development] Building a node crawler to map network
Message-ID: <4E65CEE6.7030002@gmail.com>

Hi All,

I started messing around today with building a node crawler to try and 
map out the bitcoin network and hopefully provide some useful 
statistics.  It's very basic so far using a mutilated bitcoinj to 
connect (due me being java developer and not having a clue with c/c++). 
  If it's worthwhile I'll hack bitcoinj some more to run on top Netty to 
take advantage of it's NIO architecture (netty's been shown to handle 
1/2 million concurrent connections so would be ideal for the purpose).

Hoping to a get a bit of input into what would be useful as well as 
strategy for getting max possible connections without distorted data.  I 
seem to recall Gavin talking about the need for some kind of network 
health monitoring so I assume there's a need for something like this...

Firstly at the moment basically I'm just storing version message and the 
results of getaddr for each node that I can connect to.  Is there any 
other useful info that can be extracted from a node that's worth collecting?

Second and main issue is how to connect.  From my first very basic 
probing it seems the very vast majority of nodes don't accept incoming 
connections no doubt due to lack of upnp.  So it seems the active crawl 
approach is not really ideal for the purpose.  Even if it was used the 
resultant data would be hopelessly distorted.

A honeypot approach would probably be better if there was some way to 
make a node 'attractive' to other nodes to connect to.  That way it 
could capture non-listening nodes as well.  If there is some way to 
influence other nodes to connect to the crawler node that solves the 
problem.  If there isn't which I suspect is the case then perhaps 
another approach is to build an easy to deploy crawler node that many 
volunteers could run and that could then upload collected data to a 
central repository.

While I'm asking questions I'll add one more regarding the getaddr 
message.  It seems most nodes return about 1000 addresses in response to 
this message.  Obviously most of these nodes haven't actually talked to 
all 1000 on the list so where does this list come from?  Is it mixture 
of addresses obtained from other nodes somehow sorted by timestamp? 
Does it include some nodes discovered by IRC/DNS? Or are those only used 
to find the first nodes to connect to?

Thanks for any input... Hopefully I can build something that's useful 
for the network...



From shadders.del at gmail.com  Tue Sep  6 08:29:58 2011
From: shadders.del at gmail.com (Steve)
Date: Tue, 06 Sep 2011 18:29:58 +1000
Subject: [Bitcoin-development] Building a node crawler to map network
In-Reply-To: <4E65CEE6.7030002@gmail.com>
References: <4E65CEE6.7030002@gmail.com>
Message-ID: <4E65DA06.9060403@gmail.com>


>
> While I'm asking questions I'll add one more regarding the getaddr 
> message.

Talking to myself here.  I just sent this message then found this 
brilliant set of articles in the Dev & Tech forum which answers the 
question very nicely: *https://bitcointalk.org/index.php?topic=41722.0 
<https://bitcointalk.org/index.php?board=6.0>
*
Anyway just as an FYI I've been running v0.0.0.0.0.0.0.0.1 for about an 
hour.  It's only running 10 concurrent connections due to girlfriend 
complaining she couldn't watch youtube but here's some early results.

New nodes: 19319 // node address discovered but no contact attempt made yet
Contacted nodes: 754
Uncontactable nodes: 3253
Limbo nodes: 9 //not as exciting as it sounds, just nodes with connect 
in progress
Total nodes: 23335 // about 5000 from initial IRC discover, the rest are 
from getaddr

Versions: {
300=1,
31900=7,
31902=1,
32000=2,
32001=7,
32002=22,
32100=100,
32200=24,
32300=277,
32400=317,
32500=2}

Fails: {
ConnectException: Connection refused=377,
IOException: Socket is disconnected=87,
SocketException: Network is unreachable=2,
ProtocolException: Error deserializing message =1,
NoRouteToHostException: No route to host=115,
SocketException: Connection reset=149,
SocketTimeoutException: connect timed out=2521}


-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110906/13d77ec5/attachment.html>

From decker.christian at gmail.com  Tue Sep  6 08:36:19 2011
From: decker.christian at gmail.com (Christian Decker)
Date: Tue, 6 Sep 2011 10:36:19 +0200
Subject: [Bitcoin-development] Building a node crawler to map network
In-Reply-To: <4E65DA06.9060403@gmail.com>
References: <4E65CEE6.7030002@gmail.com> <4E65DA06.9060403@gmail.com>
Message-ID: <CALxbBHUajARXc1oA-NjD+U8hW5uSqF=u4ZHHBfcmT_O8GjpNiA@mail.gmail.com>

Hi Steve,

before attempting to hack BitcoinJ to use NIO you might want to take a look
at BitDroid (https://github.com/cdecker/BitDroid-Network), which is my
attempt to build an easily extensible network client (no crypto stuff so
far) on top of NIO and a simple publish-subscribe architecture. I build a
crawler like yours with just a single class that subscribes to events
published and closes and opens connections to crawl.

HTH,
Christian

On Tue, Sep 6, 2011 at 10:29 AM, Steve <shadders.del at gmail.com> wrote:

> **
>
>
> While I'm asking questions I'll add one more regarding the getaddr message.
>
>
>
> Talking to myself here.  I just sent this message then found this brilliant
> set of articles in the Dev & Tech forum which answers the question very
> nicely: *https://bitcointalk.org/index.php?topic=41722.0<https://bitcointalk.org/index.php?board=6.0>
> *
> Anyway just as an FYI I've been running v0.0.0.0.0.0.0.0.1 for about an
> hour.  It's only running 10 concurrent connections due to girlfriend
> complaining she couldn't watch youtube but here's some early results.
>
> New nodes: 19319 // node address discovered but no contact attempt made yet
> Contacted nodes: 754
> Uncontactable nodes: 3253
> Limbo nodes: 9 //not as exciting as it sounds, just nodes with connect in
> progress
> Total nodes: 23335 // about 5000 from initial IRC discover, the rest are
> from getaddr
>
> Versions: {
> 300=1,
> 31900=7,
> 31902=1,
> 32000=2,
> 32001=7,
> 32002=22,
> 32100=100,
> 32200=24,
> 32300=277,
> 32400=317,
> 32500=2}
>
> Fails: {
> ConnectException: Connection refused=377,
> IOException: Socket is disconnected=87,
> SocketException: Network is unreachable=2,
> ProtocolException: Error deserializing message =1,
> NoRouteToHostException: No route to host=115,
> SocketException: Connection reset=149,
> SocketTimeoutException: connect timed out=2521}
>
>
>
>
> ------------------------------------------------------------------------------
> Special Offer -- Download ArcSight Logger for FREE!
> Finally, a world-class log management solution at an even better
> price-free! And you'll get a free "Love Thy Logs" t-shirt when you
> download Logger. Secure your free ArcSight Logger TODAY!
> http://p.sf.net/sfu/arcsisghtdev2dev
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110906/700d09a3/attachment.html>

From pieter.wuille at cs.kuleuven.be  Tue Sep  6 11:55:30 2011
From: pieter.wuille at cs.kuleuven.be (Pieter Wuille)
Date: Tue, 6 Sep 2011 13:55:30 +0200
Subject: [Bitcoin-development] 0.4rc1 known bugs
In-Reply-To: <20110904115926.GA16476@ulyssis.org>
References: <CABsx9T1juB-0hr9NW=PoO5eh_Aqhzkiv3tnXTSTsjBKiy4y0JA@mail.gmail.com>
	<20110904115926.GA16476@ulyssis.org>
Message-ID: <CAPg+sBjy1FANzv5N7P4kx0Djqz-P2XbqQAFTxnK-MVu8erja+g@mail.gmail.com>

On Sun, Sep 4, 2011 at 13:59, Pieter Wuille
<pieter.wuille at cs.kuleuven.be> wrote:
> I've compiled bitcoind with Gavin's DEBUG_LOCKORDER, and fixed two potential
> reported deadlock issues (see https://github.com/sipa/bitcoin/commits/lockfixes).

My mistake: these are not actual potential deadlocks, as all locking
of cs_vRecv/cs_vSend
happens inside TRY_CRITICAL_SECTION blocks. Gavin, maybe you can add the rule to
your debug code that ignores critical sections which are only locked
through TRY_...?

>> + sipa found what looks like a deadlock between the addr-handling and
>> IRC-join-handling code.

Regarding the actual deadlock between IRC seeding and AddAddress:

Internally, DB also uses pthreads to implement the txn_begin()/commit() scheme,
though I'm not sure with which granularity. These need to be taken into account
when searching for deadlocks, but are obviously not detected by
DEBUG_LOCKORDER.

In particular here, the processing of "addr" created a db transaction for the
entire message, while only locking cs_mapAddresses inside AddAddress. For
IRC seeded addresses however, no db tx was precreated, and AddAddress first
locked cs_mapAddress, and then did the database write (causing a lock) inside.

A solution: in main.cpp, ProcessMessage, case "addr":

          // Store the new addresses
          CAddrDB addrDB;
+         CRITICAL_BLOCK(cs_mapAddresses) {
          addrDB.TxnBegin();
          int64 nNow = GetAdjustedTime();
          int64 nSince = nNow - 10 * 60;

              }
          }
          addrDB.TxnCommit();  // Save addresses (it's ok if this fails)
+         }
          if (vAddr.size() < 1000)


which makes sure that cs_mapAddresses is always entered before starting
a database transaction.

However, there may be similar issues in other place where TxnBegin is called
explicitly. Also, maybe there are other solutions, like changing BDB parameters
that make the db transaction fail instead of block, for example.

-- 
Pieter



From mike at plan99.net  Tue Sep  6 12:49:34 2011
From: mike at plan99.net (Mike Hearn)
Date: Tue, 6 Sep 2011 14:49:34 +0200
Subject: [Bitcoin-development] Building a node crawler to map network
In-Reply-To: <CALxbBHUajARXc1oA-NjD+U8hW5uSqF=u4ZHHBfcmT_O8GjpNiA@mail.gmail.com>
References: <4E65CEE6.7030002@gmail.com> <4E65DA06.9060403@gmail.com>
	<CALxbBHUajARXc1oA-NjD+U8hW5uSqF=u4ZHHBfcmT_O8GjpNiA@mail.gmail.com>
Message-ID: <CANEZrP0VXDUs_mAKCVKD1Q0ijyb989oADrCN1zTZ1nnN_JQ=cQ@mail.gmail.com>

Actually Steve, take a look at the bitcoinj mailing list today. Somebody has
already built this and has it running. It's accumulating data at the moment,
they'll announce it more widely soon. But I think there's no need to
duplicate work.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110906/5d8e0f89/attachment.html>

From shadders.del at gmail.com  Tue Sep  6 13:27:10 2011
From: shadders.del at gmail.com (Steve)
Date: Tue, 06 Sep 2011 23:27:10 +1000
Subject: [Bitcoin-development] Building a node crawler to map network
In-Reply-To: <CANEZrP0VXDUs_mAKCVKD1Q0ijyb989oADrCN1zTZ1nnN_JQ=cQ@mail.gmail.com>
References: <4E65CEE6.7030002@gmail.com>	<4E65DA06.9060403@gmail.com>	<CALxbBHUajARXc1oA-NjD+U8hW5uSqF=u4ZHHBfcmT_O8GjpNiA@mail.gmail.com>
	<CANEZrP0VXDUs_mAKCVKD1Q0ijyb989oADrCN1zTZ1nnN_JQ=cQ@mail.gmail.com>
Message-ID: <4E661FAE.9020008@gmail.com>

Hi Mike,

I've looked but can't find a post like you're talking about.  Can you 
point me to it?

If so then bollocks... I'm looking for something useful to do atm.  
PoolServerJ is in a holding pattern atm as I've stabilisied all the bugs 
I know about and am waiting for several pools to finish testing and move 
into production so I'm twiddling thumbs trying to figure out how to 
spend my time.

On 06/09/11 22:49, Mike Hearn wrote:
> Actually Steve, take a look at the bitcoinj mailing list today. 
> Somebody has already built this and has it running. It's accumulating 
> data at the moment, they'll announce it more widely soon. But I think 
> there's no need to duplicate work.



From mike at plan99.net  Tue Sep  6 13:31:34 2011
From: mike at plan99.net (Mike Hearn)
Date: Tue, 6 Sep 2011 15:31:34 +0200
Subject: [Bitcoin-development] Building a node crawler to map network
In-Reply-To: <4E661FAE.9020008@gmail.com>
References: <4E65CEE6.7030002@gmail.com> <4E65DA06.9060403@gmail.com>
	<CALxbBHUajARXc1oA-NjD+U8hW5uSqF=u4ZHHBfcmT_O8GjpNiA@mail.gmail.com>
	<CANEZrP0VXDUs_mAKCVKD1Q0ijyb989oADrCN1zTZ1nnN_JQ=cQ@mail.gmail.com>
	<4E661FAE.9020008@gmail.com>
Message-ID: <CANEZrP3=UPYkBQo6b421xaMGyP4BsGiw8DBuM8pT2ow1Vom9JQ@mail.gmail.com>

>
> I've looked but can't find a post like you're talking about.  Can you point
> me to it?
>

https://groups.google.com/forum/?pli=1#!topic/bitcoinj/LSlZdUWcCdk


> If so then bollocks... I'm looking for something useful to do atm.
>  PoolServerJ is in a holding pattern atm as I've stabilisied all the bugs I
> know about and am waiting for several pools to finish testing and move into
> production so I'm twiddling thumbs trying to figure out how to spend my
> time.
>

Patches to BitCoinJ are always welcome :-)

If you'd rather do your own thing, you could experiment with writing a proxy
that sits in front of bitcoind and multiplexes connections. Gavin is
concerned about socket exhaustion as users move to lightweight clients.
Multiplexing proxies are a battle-tested technique for reducing the strain
of this type of thing. BitCoinJ uses thread-per-connection so wouldn't do a
good job of that right now, but allowing it to use a mix of async io and
multi-threading would be a nice improvement. It'd need some changes to
bitcoind as well for a really good effort, to allow for IPs to be forwarded.
I'm happy to discuss it more with you over on the bitcoinj list if wanted.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110906/1c52c3de/attachment.html>

From shadders.del at gmail.com  Tue Sep  6 14:17:29 2011
From: shadders.del at gmail.com (Steve)
Date: Wed, 07 Sep 2011 00:17:29 +1000
Subject: [Bitcoin-development] Building a node crawler to map network
In-Reply-To: <CANEZrP3=UPYkBQo6b421xaMGyP4BsGiw8DBuM8pT2ow1Vom9JQ@mail.gmail.com>
References: <4E65CEE6.7030002@gmail.com>	<4E65DA06.9060403@gmail.com>	<CALxbBHUajARXc1oA-NjD+U8hW5uSqF=u4ZHHBfcmT_O8GjpNiA@mail.gmail.com>	<CANEZrP0VXDUs_mAKCVKD1Q0ijyb989oADrCN1zTZ1nnN_JQ=cQ@mail.gmail.com>	<4E661FAE.9020008@gmail.com>
	<CANEZrP3=UPYkBQo6b421xaMGyP4BsGiw8DBuM8pT2ow1Vom9JQ@mail.gmail.com>
Message-ID: <4E662B79.5090303@gmail.com>

Hi Mike,

I expect I'll be submitting patches for bitcoinj sometime in the future 
but I'm not really across it yet to the point where I'd be confident 
submitting patches right now...

This proxy sound like a good match for what I've been up to lately 
though so long as it wouldn't involve direct changes to bitcoind on my 
part.  My c/c++ skills are non-existent.

However I have been building a pool protocol using protobufs and netty 
for non-blocking IO and I'd imagine the kind of multiplexing proxy 
you're talking about could be easily implemented using netty.

I'm not really understanding the use case though.  I believe most 
bitcoind's have a default max connections of 8.  Is the goal to increase 
this without fundamentally altering the bitcoind concurrency model?  Or 
is it to provide capactity for a more hub/client oriented network?  If 
the latter then presumably this is functionality that should ideally be 
native to the client in the long term in the form of NIO?

On 06/09/11 23:31, Mike Hearn wrote:
>
>     I've looked but can't find a post like you're talking about.  Can
>     you point me to it?
>
> https://groups.google.com/forum/?pli=1#!topic/bitcoinj/LSlZdUWcCdk 
> <https://groups.google.com/forum/?pli=1#%21topic/bitcoinj/LSlZdUWcCdk>
>
>     If so then bollocks... I'm looking for something useful to do atm.
>      PoolServerJ is in a holding pattern atm as I've stabilisied all
>     the bugs I know about and am waiting for several pools to finish
>     testing and move into production so I'm twiddling thumbs trying to
>     figure out how to spend my time.
>
>
> Patches to BitCoinJ are always welcome :-)
>
> If you'd rather do your own thing, you could experiment with writing a 
> proxy that sits in front of bitcoind and multiplexes connections. 
> Gavin is concerned about socket exhaustion as users move to 
> lightweight clients. Multiplexing proxies are a battle-tested 
> technique for reducing the strain of this type of thing. BitCoinJ uses 
> thread-per-connection so wouldn't do a good job of that right now, but 
> allowing it to use a mix of async io and multi-threading would be a 
> nice improvement. It'd need some changes to bitcoind as well for a 
> really good effort, to allow for IPs to be forwarded. I'm happy to 
> discuss it more with you over on the bitcoinj list if wanted.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110907/23380133/attachment.html>

From rick at support-intelligence.com  Tue Sep  6 14:36:45 2011
From: rick at support-intelligence.com (Rick Wesson)
Date: Tue, 6 Sep 2011 07:36:45 -0700
Subject: [Bitcoin-development] Building a node crawler to map network
In-Reply-To: <4E65CEE6.7030002@gmail.com>
References: <4E65CEE6.7030002@gmail.com>
Message-ID: <CAJ1JLtsOsnsu+UTwTV5RMmco9xEAWOgoYcjT=-ZeFQ7VSJX0ZA@mail.gmail.com>

I've got minna patches for nio based on bitcoinj. I've enumerated the
network a few times and am working on a DNS seed service as well as some
weather reports.

Happy to start a branch when the committers are ready.

-rick


On Tue, Sep 6, 2011 at 12:42 AM, Steve <shadders.del at gmail.com> wrote:

> Hi All,
>
> I started messing around today with building a node crawler to try and
> map out the bitcoin network and hopefully provide some useful
> statistics.  It's very basic so far using a mutilated bitcoinj to
> connect (due me being java developer and not having a clue with c/c++).
>  If it's worthwhile I'll hack bitcoinj some more to run on top Netty to
> take advantage of it's NIO architecture (netty's been shown to handle
> 1/2 million concurrent connections so would be ideal for the purpose).
>
> Hoping to a get a bit of input into what would be useful as well as
> strategy for getting max possible connections without distorted data.  I
> seem to recall Gavin talking about the need for some kind of network
> health monitoring so I assume there's a need for something like this...
>
> Firstly at the moment basically I'm just storing version message and the
> results of getaddr for each node that I can connect to.  Is there any
> other useful info that can be extracted from a node that's worth
> collecting?
>
> Second and main issue is how to connect.  From my first very basic
> probing it seems the very vast majority of nodes don't accept incoming
> connections no doubt due to lack of upnp.  So it seems the active crawl
> approach is not really ideal for the purpose.  Even if it was used the
> resultant data would be hopelessly distorted.
>
> A honeypot approach would probably be better if there was some way to
> make a node 'attractive' to other nodes to connect to.  That way it
> could capture non-listening nodes as well.  If there is some way to
> influence other nodes to connect to the crawler node that solves the
> problem.  If there isn't which I suspect is the case then perhaps
> another approach is to build an easy to deploy crawler node that many
> volunteers could run and that could then upload collected data to a
> central repository.
>
> While I'm asking questions I'll add one more regarding the getaddr
> message.  It seems most nodes return about 1000 addresses in response to
> this message.  Obviously most of these nodes haven't actually talked to
> all 1000 on the list so where does this list come from?  Is it mixture
> of addresses obtained from other nodes somehow sorted by timestamp?
> Does it include some nodes discovered by IRC/DNS? Or are those only used
> to find the first nodes to connect to?
>
> Thanks for any input... Hopefully I can build something that's useful
> for the network...
>
>
> ------------------------------------------------------------------------------
> Special Offer -- Download ArcSight Logger for FREE!
> Finally, a world-class log management solution at an even better
> price-free! And you'll get a free "Love Thy Logs" t-shirt when you
> download Logger. Secure your free ArcSight Logger TODAY!
> http://p.sf.net/sfu/arcsisghtdev2dev
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110906/8c63140e/attachment.html>

From mike at plan99.net  Tue Sep  6 14:52:20 2011
From: mike at plan99.net (Mike Hearn)
Date: Tue, 6 Sep 2011 16:52:20 +0200
Subject: [Bitcoin-development] Building a node crawler to map network
In-Reply-To: <4E662B79.5090303@gmail.com>
References: <4E65CEE6.7030002@gmail.com> <4E65DA06.9060403@gmail.com>
	<CALxbBHUajARXc1oA-NjD+U8hW5uSqF=u4ZHHBfcmT_O8GjpNiA@mail.gmail.com>
	<CANEZrP0VXDUs_mAKCVKD1Q0ijyb989oADrCN1zTZ1nnN_JQ=cQ@mail.gmail.com>
	<4E661FAE.9020008@gmail.com>
	<CANEZrP3=UPYkBQo6b421xaMGyP4BsGiw8DBuM8pT2ow1Vom9JQ@mail.gmail.com>
	<4E662B79.5090303@gmail.com>
Message-ID: <CANEZrP2Wh82sqGjZDn_M=UPufBCU4fP9zEXV_K8JpgVF8O1FCw@mail.gmail.com>

On Tue, Sep 6, 2011 at 4:17 PM, Steve <shadders.del at gmail.com> wrote:

> **
> I'm not really understanding the use case though.  I believe most
> bitcoind's have a default max connections of 8.  Is the goal to increase
> this without fundamentally altering the bitcoind concurrency model?
>

bitcoind already uses asynchronous IO. That's not the problem.

The issue came up in a conversation about scalability. If Bitcoins
popularity continues to grow, users are very likely to migrate away from
running full verifying nodes to lightweight clients, either a different mode
of the Satoshi client or different implementations like the Android Wallet
or MultiBit.

Lightweight clients cannot verify thus should not relay. And they'll be run
by users who just want to send/receive coins from time to time, so don't
leave the programs running 24/7. The result could be running out of sockets
(like we have had problems with recently). It's especially true because
lightweight clients cannot check transactions for themselves. If they want
to show transactions appearing immediately (and they do), they have to use
"heard from lots of nodes" as a proxy for validity. So lightweight clients
are likely to be socket intensive.

We could solve this by just hoping that lots of people run full nodes. The
problem is that a full node is quite an intensive thing already, it uses
lots of CPU and disk seeks, and will just get more expensive in future. And
as transaction traffic increases, that leaves less CPU time available to
service thousands of connected clients. The ROI of bringing up a new node
decreases at the same time as the userbase increases.

One traditional approach to solving this is frontend proxies. Jabber.com/org
used this technique many years ago, and Google has also used it to scale up the
lockservice<http://static.googleusercontent.com/external_content/untrusted_dlcp/labs.google.com/en/us/papers/chubby-osdi06.pdf>
(see
section 3.1). It's effective because often maintaining connections to
thousands of clients doesn't involve much brainwork, just shifting bytes
around. This is especially true of Bitcoin. So if somebody is running a full
node already they could increase their client capacity by just bringing up a
frontend proxy and having it handle things like outbound tx
broadcasts/deduping inbound broadcasts, connection setup, relaying recently
found blocks etc. A well written proxy could probably support tens of
thousands of simultaneous clients which frees up the bitcoinds time for
verification and wallet manipulation.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110906/ec7f989a/attachment.html>

From gavinandresen at gmail.com  Tue Sep  6 15:21:52 2011
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Tue, 6 Sep 2011 11:21:52 -0400
Subject: [Bitcoin-development] Many-output transactions in the main chain
Message-ID: <CABsx9T0kBPJfdrKYcp0qHxDRdhYYbAwQ7wuwkwUF97rgSDNnKQ@mail.gmail.com>

Somebody has been inserting transactions with lots of outputs into the
main bitcoin block chain:
  http://blockexplorer.com/block/0000000000000305f98ffbe1db8445ce847fb9a924551945b465386c828f136f

Their next step will be creating transactions with thousands of inputs
from those transactions. The result will be lots of excessive disk
space usage.

The fix is this patch:
  https://github.com/bitcoin/bitcoin/pull/491

Suggestions on the best way to let merchants, miners, and pools know
about the potential problem?
I hate to take time away from the 0.4 release to re-spin 0.3.24 with
the patch, but we may have to.

-- 
--
Gavin Andresen



From shadders.del at gmail.com  Tue Sep  6 15:24:11 2011
From: shadders.del at gmail.com (Steve)
Date: Wed, 07 Sep 2011 01:24:11 +1000
Subject: [Bitcoin-development] Many-output transactions in the main chain
In-Reply-To: <CABsx9T0kBPJfdrKYcp0qHxDRdhYYbAwQ7wuwkwUF97rgSDNnKQ@mail.gmail.com>
References: <CABsx9T0kBPJfdrKYcp0qHxDRdhYYbAwQ7wuwkwUF97rgSDNnKQ@mail.gmail.com>
Message-ID: <4E663B1B.7000503@gmail.com>

Is this the ArtForz solidcoin 'attack'?

On 07/09/11 01:21, Gavin Andresen wrote:
> Somebody has been inserting transactions with lots of outputs into the
> main bitcoin block chain:
>    http://blockexplorer.com/block/0000000000000305f98ffbe1db8445ce847fb9a924551945b465386c828f136f
>
> Their next step will be creating transactions with thousands of inputs
> from those transactions. The result will be lots of excessive disk
> space usage.
>
> The fix is this patch:
>    https://github.com/bitcoin/bitcoin/pull/491
>
> Suggestions on the best way to let merchants, miners, and pools know
> about the potential problem?
> I hate to take time away from the 0.4 release to re-spin 0.3.24 with
> the patch, but we may have to.
>



From shadders.del at gmail.com  Tue Sep  6 15:25:09 2011
From: shadders.del at gmail.com (Steve)
Date: Wed, 07 Sep 2011 01:25:09 +1000
Subject: [Bitcoin-development] Building a node crawler to map network
In-Reply-To: <CANEZrP2Wh82sqGjZDn_M=UPufBCU4fP9zEXV_K8JpgVF8O1FCw@mail.gmail.com>
References: <4E65CEE6.7030002@gmail.com>	<4E65DA06.9060403@gmail.com>	<CALxbBHUajARXc1oA-NjD+U8hW5uSqF=u4ZHHBfcmT_O8GjpNiA@mail.gmail.com>	<CANEZrP0VXDUs_mAKCVKD1Q0ijyb989oADrCN1zTZ1nnN_JQ=cQ@mail.gmail.com>	<4E661FAE.9020008@gmail.com>	<CANEZrP3=UPYkBQo6b421xaMGyP4BsGiw8DBuM8pT2ow1Vom9JQ@mail.gmail.com>	<4E662B79.5090303@gmail.com>
	<CANEZrP2Wh82sqGjZDn_M=UPufBCU4fP9zEXV_K8JpgVF8O1FCw@mail.gmail.com>
Message-ID: <4E663B55.9050508@gmail.com>

Thanks for the overview Mike.  I just bailed up Gavin on IRC and between 
that convo and what you've just written I'm starting to picture a plan 
in my head... This sounds right up my alley, I wish I didn't have to go 
to bed right now as I've got a ton of ideas buzzing around I'd like to 
get started on right now.  But I'll be onto it as soon as I've got a 
free moment...

On 07/09/11 00:52, Mike Hearn wrote:
> On Tue, Sep 6, 2011 at 4:17 PM, Steve <shadders.del at gmail.com 
> <mailto:shadders.del at gmail.com>> wrote:
>
>     I'm not really understanding the use case though.  I believe most
>     bitcoind's have a default max connections of 8.  Is the goal to
>     increase this without fundamentally altering the bitcoind
>     concurrency model?
>
>
> bitcoind already uses asynchronous IO. That's not the problem.
>
> The issue came up in a conversation about scalability. If Bitcoins 
> popularity continues to grow, users are very likely to migrate away 
> from running full verifying nodes to lightweight clients, either a 
> different mode of the Satoshi client or different implementations like 
> the Android Wallet or MultiBit.
>
> Lightweight clients cannot verify thus should not relay. And they'll 
> be run by users who just want to send/receive coins from time to time, 
> so don't leave the programs running 24/7. The result could be running 
> out of sockets (like we have had problems with recently). It's 
> especially true because lightweight clients cannot check transactions 
> for themselves. If they want to show transactions appearing 
> immediately (and they do), they have to use "heard from lots of nodes" 
> as a proxy for validity. So lightweight clients are likely to be 
> socket intensive.
>
> We could solve this by just hoping that lots of people run full nodes. 
> The problem is that a full node is quite an intensive thing already, 
> it uses lots of CPU and disk seeks, and will just get more expensive 
> in future. And as transaction traffic increases, that leaves less CPU 
> time available to service thousands of connected clients. The ROI of 
> bringing up a new node decreases at the same time as the userbase 
> increases.
>
> One traditional approach to solving this is frontend proxies. 
> Jabber.com/org used this technique many years ago, and Google has also 
> used it to scale up the lockservice 
> <http://static.googleusercontent.com/external_content/untrusted_dlcp/labs.google.com/en/us/papers/chubby-osdi06.pdf> (see 
> section 3.1). It's effective because often maintaining connections to 
> thousands of clients doesn't involve much brainwork, just shifting 
> bytes around. This is especially true of Bitcoin. So if somebody is 
> running a full node already they could increase their client capacity 
> by just bringing up a frontend proxy and having it handle things like 
> outbound tx broadcasts/deduping inbound broadcasts, connection setup, 
> relaying recently found blocks etc. A well written proxy could 
> probably support tens of thousands of simultaneous clients which frees 
> up the bitcoinds time for verification and wallet manipulation.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110907/30632ded/attachment.html>

From gavinandresen at gmail.com  Tue Sep  6 17:59:29 2011
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Tue, 6 Sep 2011 13:59:29 -0400
Subject: [Bitcoin-development] 0.4rc1 known bugs
In-Reply-To: <CAPg+sBjy1FANzv5N7P4kx0Djqz-P2XbqQAFTxnK-MVu8erja+g@mail.gmail.com>
References: <CABsx9T1juB-0hr9NW=PoO5eh_Aqhzkiv3tnXTSTsjBKiy4y0JA@mail.gmail.com>
	<20110904115926.GA16476@ulyssis.org>
	<CAPg+sBjy1FANzv5N7P4kx0Djqz-P2XbqQAFTxnK-MVu8erja+g@mail.gmail.com>
Message-ID: <CABsx9T3kV884bc-f9SVBGPixMOi6fEwo4do8gixTBTK-szFS1A@mail.gmail.com>

Nice work, Detective Wuille!

Patch for the deadlock issue:

https://github.com/bitcoin/bitcoin/pull/500

I took a different approach to fix from the one Pieter suggested,
performing the database operation after the cs_mapaddresses deadlock
is released.  Please review to check my logic, it did survive my
start/stop/restart... stress test.

And I did review every place in the code that starts a database
transaction, to look for similar issues, and they are all OK.


RE: improving DEBUG_LOCKORDER:  requires some thought.  Deadlocks are
still possible with TRY_CRITICAL_SECTION, if some codepaths TRY and
some don't.


On Tue, Sep 6, 2011 at 7:55 AM, Pieter Wuille
<pieter.wuille at cs.kuleuven.be> wrote:
> My mistake: these are not actual potential deadlocks, as all locking
> of cs_vRecv/cs_vSend
> happens inside TRY_CRITICAL_SECTION blocks. Gavin, maybe you can add the rule to
> your debug code that ignores critical sections which are only locked
> through TRY_...?
>
>>> + sipa found what looks like a deadlock between the addr-handling and
>>> IRC-join-handling code.
>
> Regarding the actual deadlock between IRC seeding and AddAddress:
>
> Internally, DB also uses pthreads to implement the txn_begin()/commit() scheme,
> though I'm not sure with which granularity. These need to be taken into account
> when searching for deadlocks, but are obviously not detected by
> DEBUG_LOCKORDER.


-- 
--
Gavin Andresen



From luke at dashjr.org  Tue Sep  6 20:55:27 2011
From: luke at dashjr.org (Luke-Jr)
Date: Tue, 6 Sep 2011 16:55:27 -0400
Subject: [Bitcoin-development] 0.4rc1 known bugs
In-Reply-To: <CABsx9T1juB-0hr9NW=PoO5eh_Aqhzkiv3tnXTSTsjBKiy4y0JA@mail.gmail.com>
References: <CABsx9T1juB-0hr9NW=PoO5eh_Aqhzkiv3tnXTSTsjBKiy4y0JA@mail.gmail.com>
Message-ID: <201109061655.30148.luke@dashjr.org>

Got a fix for the encrypted-wallet mining issue:
- unique_coinbase

It depends on (and merges) the getwork_dedupe fix already common on pools and 
other miners who pay attention to the latest mining fixes.

To merge:
  git fetch git://gitorious.org/~Luke-Jr/bitcoin/luke-jr-bitcoin.git \
    unique_coinbase && git merge FETCH_HEAD



From ampedal at gmail.com  Wed Sep  7 00:32:27 2011
From: ampedal at gmail.com (Alex Waters)
Date: Tue, 6 Sep 2011 20:32:27 -0400
Subject: [Bitcoin-development] Testing commits
Message-ID: <CAL0fb62WFvqFFDm=jvgG2B2Gyxj_uV_Ex-drjYHMVh08F0YrNQ@mail.gmail.com>

I am working on the following to create a stable build environment for
testers:

- Build bitcoin 4.0 source in Windows 7
- Create a package of the build dependencies, and upload to SF
- Write up instructions for the build process

x Build bitcoin 4.0 source in Ubuntu 11
- Create a package of the build dependencies, and upload to SF
- Write up instructions for the build process

I am also compiling a list of commits that need to be tested in both
environments. If you can think of any priority commits that need testing,
and/or have a test case for them - please link the pull request in a
response to https://github.com/alexwaters/bitcoin/issues/2

This is not a requirement for pull requests, but will help process the
important/easy ones a lot faster. I would love to discuss other ways of
prioritizing pull requests, but this seems like it can get the job done for
the time-being.

-Alex Waters
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110906/e5b96ef8/attachment.html>

From jgarzik at exmulti.com  Wed Sep  7 02:59:38 2011
From: jgarzik at exmulti.com (Jeff Garzik)
Date: Tue, 6 Sep 2011 22:59:38 -0400
Subject: [Bitcoin-development] Testing commits
In-Reply-To: <CAL0fb62WFvqFFDm=jvgG2B2Gyxj_uV_Ex-drjYHMVh08F0YrNQ@mail.gmail.com>
References: <CAL0fb62WFvqFFDm=jvgG2B2Gyxj_uV_Ex-drjYHMVh08F0YrNQ@mail.gmail.com>
Message-ID: <CA+8xBpcGOBS=tpJf9dA4OjgbLjrGuFAPUBKjWjsKvMe12PdVTw@mail.gmail.com>

On Tue, Sep 6, 2011 at 8:32 PM, Alex Waters <ampedal at gmail.com> wrote:
> I am working on the following to create a stable build environment for
> testers:
> - Build bitcoin 4.0 source in Windows 7
> - Create a package of the build?dependencies, and upload to SF
> - Write up instructions for the build process
> x Build bitcoin 4.0 source in Ubuntu 11
> - Create a package of the build?dependencies, and upload to SF
> - Write up instructions for the build process

May we assume you're working with / building upon the existing gitian
build stuff?

-- 
Jeff Garzik
exMULTI, Inc.
jgarzik at exmulti.com



From bitcoin-list at bluematt.me  Wed Sep  7 03:51:05 2011
From: bitcoin-list at bluematt.me (Matt Corallo)
Date: Tue, 06 Sep 2011 23:51:05 -0400
Subject: [Bitcoin-development] Testing commits
In-Reply-To: <CAL0fb62WFvqFFDm=jvgG2B2Gyxj_uV_Ex-drjYHMVh08F0YrNQ@mail.gmail.com>
References: <CAL0fb62WFvqFFDm=jvgG2B2Gyxj_uV_Ex-drjYHMVh08F0YrNQ@mail.gmail.com>
Message-ID: <1315367465.2697.4.camel@BMThinkPad.lan.bluematt.me>

On Tue, 2011-09-06 at 20:32 -0400, Alex Waters wrote:
> I am working on the following to create a stable build environment for
> testers:
> 
> 
> - Build bitcoin 4.0 source in Windows 7
When did it switch from 0.4 to 4.0?
I feel like the user-facing quality of the software should not be
over-emphasized when it really is very beta in quality.
> - Create a package of the build dependencies, and upload to SF
https://bitcointalk.org/index.php?topic=4750.0 (a bit outdated, but it
should still work fine)
> - Write up instructions for the build process
https://bitcointalk.org/index.php?topic=5851.msg86700#msg86700
If the instructions were updated with fresh links/versions/etc, they
should work 100%.
> 
> 
> x Build bitcoin 4.0 source in Ubuntu 11
> - Create a package of the build dependencies, and upload to SF
No package needed, just apt-get the relevant packages?
> - Write up instructions for the build process
doc/build-unix.txt is (though in some cases somewhat ubuntu-specific)
quite good IMHO.
> 
> 
> I am also compiling a list of commits that need to be tested in both
> environments. If you can think of any priority commits that need
> testing, and/or have a test case for them - please link the pull
> request in a response
>  to https://github.com/alexwaters/bitcoin/issues/2
If you are feeling lazy, I can convince jenkins.bluematt.me to churn out
windows and ubuntu builds almost identical to those that will come out
of gitian (ie the same build as the official release builds) if you
want.
Something like the current jenkins scripts could also be easily hacked
up to automatically sanity-test pull requests as they come in and catch
common errors (or just sanity failures).
> 
> 
> This is not a requirement for pull requests, but will help process the
> important/easy ones a lot faster. I would love to discuss other ways
> of prioritizing pull requests, but this seems like it can get the job
> done for the time-being.
> 
> 
> -Alex Waters 




From gavinandresen at gmail.com  Wed Sep  7 15:07:25 2011
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Wed, 7 Sep 2011 11:07:25 -0400
Subject: [Bitcoin-development] 0.4rc1 known bugs
In-Reply-To: <201109061655.30148.luke@dashjr.org>
References: <CABsx9T1juB-0hr9NW=PoO5eh_Aqhzkiv3tnXTSTsjBKiy4y0JA@mail.gmail.com>
	<201109061655.30148.luke@dashjr.org>
Message-ID: <CABsx9T22rOFrnPGtbaBA9VP2F9vyxTovmjSDUsMLQFOyhs7ZZw@mail.gmail.com>

On Tue, Sep 6, 2011 at 4:55 PM, Luke-Jr <luke at dashjr.org> wrote:
> Got a fix for the encrypted-wallet mining issue:
> - unique_coinbase

Turned this into a pull request:
  https://github.com/bitcoin/bitcoin/pull/505

I reviewed the code but have not tested.

Rough sketch of a test plan:

Run clean testnet-in-a-box bitcoind, with -keypool=1
Encrypt the wallet
Run bitcoind getnewaddress until it tell you keypool is exhausted
Generate a couple of blocks via internal miner -- verify: coinbase
transactions have unique txids even though they pay-to default key
Generate a couple of blocks via getwork RPC call -- verify: coinbase
transactions have unique txids


-- 
--
Gavin Andresen



From info at diy-eco-life.com  Thu Sep  8 02:11:42 2011
From: info at diy-eco-life.com (Steve diy-eco-life)
Date: Thu, 8 Sep 2011 12:11:42 +1000
Subject: [Bitcoin-development] bitcoind multiplexing proxy -
	request/response routing problem
Message-ID: <CAOPxoMshHGy00d5c2XC2OV9Jy5MAT4P6ySQ5+2gsFQrvhH30Xg@mail.gmail.com>

This a reworking of a post I made on the bitcoinj list under a
different topic but it's something I'd like to throw out there for
input.

I'm going to build a proof of concept this weekend of the multiplexing
proxy that Gavin and Mike were talking about here:
http://sourceforge.net/mailarchive/message.php?msg_id=28049519

Initially just a dumb as doornails proxy between one local bitcoind
and one remote node.  Once I've got that far the next step is to work
out how deal with request-response exchanges from multiple remote
nodes.  I discussed this tatcm on IRC last night.  The problem is
after relaying several requests from different remote nodes to the
local daemon you expect multiple responses to come back.  How identify
which response matches which client's request. Bitcoind can implicitly
identify the recipient based on which connection made the request.  By
piling all the requests onto one channel we lose this identifier.  I
can think of 3 approaches to dealing with this:

1/ Generate a unique key from the request and can also be generated
from the response.  e.g. getheaders key could be "headers" +
hash_start.  We locally store a mapping to client (or clients) that
requested it and pass it to bitcoind.  When we get a headers packet
back unique key = "headers" + hash_of_first_header, so we can lookup
the clients who requested it and send it back.

The unique key should have the following properties:
 - can be reliably generated from both the request and the response.
 - identical requests from different clients should generate the same
unique key (this allows us to recycle responses)

Problems:

This is dependent on each pair of request/response messages being
guaranteed to contain information needed to create an identical unique
key.  I haven't looked in detail at every request/response pair yet to
confirm this.  If it is the case then this is an onerous obligation to
place on the protocol to fulfil this condition for all future protocol
changes.

To obtain guaranteed uniqueness may require large keys.  Is
'almost-unique' an option?  e.g. generating a key off a getblocks
request using the first n bytes of each block_locator_hash would be
much smaller/faster and very likely to be unique.  Are the risks of
sending back the wrong response to a request acceptable?


2/ Modify bitcoind to accept sequence numbers for request/response
type messages, similar to 'id' field in json-rpc.  This is more
reliable but potentially quite invasive to the bitcoin protocol.  It
also loses the inherent de-duplication of requests that we get with
the previous solution.  If it were to be implemented I'd suggest
something like a separate sequence number message.  i.e. proxy sends
seq message containing a unique ID.  The contract is that the seq
message refers to the next message that comes over the wire.  When the
response is ready the bitcoind sends a seq message with matching id
then sends the response message.  A separate seq message at least
leaves the existing protocol untouched as the handling will remain
unchanged unless a request type message is preceded by a seq message.

This approach allows the proxy remain a lot thinner and dumber but we
lose a lot of the de-duplicating efficiencies from the first approach.
 If we want to add this capability as well we essentially need to
implement option 1 as well although in this case we have a reliable
fallback.  i.e. If we can't generate a unique key then we just use
single request/response matching via the seq id.

3/ Make the proxy intelligent enough to handle these requests itself.
Using getheaders as an example again.  Proxy maintains it's own local
cache of headers.  when a getheaders message comes in the proxy checks
if it has all requested.  If not it requests the missing ones from the
local daemon, adds to it's cache and builds a headers response itself.
 In this case the proxy definately has to be protocol version aware...

Advantages:
 - This probably achieves the best combination of request/response
matching reliability and de-duplication of work.

Disadvantages:
- Complexity.  The proxy needs to be far more protocol aware which
creates a maintenance dependency for future protocol changes.

Having spent the last couple of days studying the protocol I'm
inclined toward the first approach as an initial easy implementation
with a view to moving to the 3rd approach.  It appears that most
response type messages could be relatively easily constructed from a
local cache.  Before I looked at the protocol I would have said no way
to the 3rd but the depth of protocol awareness for 1 or 3 is not
really much different.  Option 2 allows for a much dumber and thinner
proxy but loses a lot of potential efficiencies and if those were to
be regained it would require the same level of protocol awareness
inherent in 1 and 3 anyway.  It would also require someone on the
bitcoind side to put their hand up to add the seq message
functionality as I don't have any c skills to speak of.

Ultimately option 3 is where I was seeing the proxy progressing to at
some point far in the future but the routing problem needs to be
solved right from the beginning as I see it.

I hope I'm not over complicating it.  If anyone can think of a simpler
approach to the request/response routing problem I'm all ears.



From shadders.del at gmail.com  Thu Sep  8 08:15:50 2011
From: shadders.del at gmail.com (Steve)
Date: Thu, 08 Sep 2011 18:15:50 +1000
Subject: [Bitcoin-development] bitcoind multiplexing proxy -
 request/response routing problem
Message-ID: <4E6879B6.7090203@gmail.com>

4a/ Serialize all request/response exchanges.  i.e. request comes in 
from remote node, proxy aquires lock on the proxy-localdaemon channel 
and sends request.  Channel remains locked until response is received or 
timeout (in which case remote node gets no response).  Unlock channel 
after response received and send to client.

Possibly messages that don't expect a response (e.g. relaying a tx 
broadcast from remote node) can be pushed down a locked channel to 
improve performance as they won't interfere with sequencing.  Locked 
channels may also receive other unsolicited messages from local daemon 
before the expected response message which would be dealt with the same 
as if they came from an unlocked channel.

Disadvantages:  Idle time for channel while waiting for response.  As 
per option 2 this allows the proxy to stay dumb/thin but loses 
opportunity for de-duplicating/caching unless option 1 is layered on top.

4b/ As per 4a but use all 125 available bitcoind connections in a 
channel pool.  Acquiring a lock on a channel consists of checking for an 
unlocked channel first then waiting in a queue for one to become available.



From mike at plan99.net  Thu Sep  8 09:29:25 2011
From: mike at plan99.net (Mike Hearn)
Date: Thu, 8 Sep 2011 11:29:25 +0200
Subject: [Bitcoin-development] bitcoind multiplexing proxy -
 request/response routing problem
In-Reply-To: <4E6879B6.7090203@gmail.com>
References: <4E6879B6.7090203@gmail.com>
Message-ID: <CANEZrP1UV+7aG0hQbwV1ikfE0i_y6Pu3GnnbQd5756tNNpM29Q@mail.gmail.com>

It's probably best to keep this discussion on just one mailing list. It's
confusing to have duplicate threads in different places. People will end up
making the same points.

To repeat what I posted elsewhere, for now I'd just start with the simplest
possible approach:

- Ignore version skew for now (disconnect older clients)

- Don't send received transactions/blocks to the bitcoind. Let it hear about
them from its own p2p connections. That way you will always receive all
valid transactions/blocks which you can then relay/cache/drop inbound
duplicates.

- Parse/handle inv/getblocks/getheaders requests so clients that connect and
catch up with the chain don't place any load on the bitcoind. If a client
requests data the proxy doesn't have in RAM, it can go fetch it from the
underlying bitcoind.

If you can make v1 work and demonstrate actual scalability improvements,
then you can always go back and make it smarter in v2.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110908/4ae500f3/attachment.html>

From shadders.del at gmail.com  Thu Sep  8 10:29:50 2011
From: shadders.del at gmail.com (Steve)
Date: Thu, 08 Sep 2011 20:29:50 +1000
Subject: [Bitcoin-development] bitcoind multiplexing proxy -
 request/response routing problem
In-Reply-To: <CANEZrP1UV+7aG0hQbwV1ikfE0i_y6Pu3GnnbQd5756tNNpM29Q@mail.gmail.com>
References: <4E6879B6.7090203@gmail.com>
	<CANEZrP1UV+7aG0hQbwV1ikfE0i_y6Pu3GnnbQd5756tNNpM29Q@mail.gmail.com>
Message-ID: <4E68991E.2030806@gmail.com>


> It's probably best to keep this discussion on just one mailing list. 
> It's confusing to have duplicate threads in different places. People 
> will end up making the same points.
>

Fair enough I'll take it to the bitcoinj list.  I wanted to post here in 
case I got any nibbles from c developers about option 2.  If anyone 
want's the follow this discussion on the other list it's here:
https://groups.google.com/forum/#!topic/bitcoinj/kqiBq9VxL-k





From enmaku at gmail.com  Thu Sep  8 14:42:17 2011
From: enmaku at gmail.com (David Perry)
Date: Thu, 8 Sep 2011 07:42:17 -0700
Subject: [Bitcoin-development] Alert System
Message-ID: <CAK5y1FhQLWXtqHfB3HymOkZ-5LdTqdEkX8bM=nOGhFeZrOPwgA@mail.gmail.com>

There has been some discussion on the new Bitcoin
StackExchange<http://bitcoin.stackexchange.com>site lately about the
alert protocol. A few have suggested that it might
carry the potential for abuse (spam/DoS) and others have argued that it's
merely deprecated. In any case, enough have voiced concerns that I've forked
bitcoin/bitcoin, removed the snippet of code from main.cpp that makes the
questionable call and submitted a pull
request<https://github.com/bitcoin/bitcoin/pull/506>.
On that pull request it was noted by Gavin Andresen that it merited
discussion here and some kind of consensus should be reached before acting
on that pull request. It was also mentioned that he thought the feature was
still more useful than dangerous and that he would argue against.

So I pose the question to you fine fellows: Is the alert system valuable, an
unnecessary risk or merely a snippet of deprecated code? Should it be
removed?

Sources:
http://bitcoin.stackexchange.com/questions/583/what-is-the-alert-system-in-the-bitcoin-protocol-how-does-it-work/590
http://bitcoin.stackexchange.com/questions/636/is-the-alert-system-still-in-the-main-clients-code-will-it-be-removed/711
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110908/9d17171f/attachment.html>

From shadders.del at gmail.com  Thu Sep  8 15:04:08 2011
From: shadders.del at gmail.com (Steve)
Date: Fri, 09 Sep 2011 01:04:08 +1000
Subject: [Bitcoin-development] Alert System
In-Reply-To: <CAK5y1FhQLWXtqHfB3HymOkZ-5LdTqdEkX8bM=nOGhFeZrOPwgA@mail.gmail.com>
References: <CAK5y1FhQLWXtqHfB3HymOkZ-5LdTqdEkX8bM=nOGhFeZrOPwgA@mail.gmail.com>
Message-ID: <4E68D968.1080604@gmail.com>

I think there's a significant risk to not having it at this stage.  
There's many reasons why an urgent update may been to rapidly propagated 
in this stage of the network's lifecycle.  Perhaps if there's a 
perceived threat of abuse the protocol could be altered slightly so it 
can't carry content.  Only a notification of the fact that there is an 
alert.  Then it would be up to individual clients whether they react to 
it or not.  The main clients would probably check a central trusted 
server for actual alert content.  This would give a lot more flexibility 
in how to deal with the alert.  Alert content servers could for example 
implement a json api to provide alert content with meta data like target 
client version, priority etc.

I think it should be removed in the future but not for a good while yet.

On 09/09/11 00:42, David Perry wrote:
> There has been some discussion on the new Bitcoin StackExchange 
> <http://bitcoin.stackexchange.com> site lately about the alert 
> protocol. A few have suggested that it might carry the potential for 
> abuse (spam/DoS) and others have argued that it's merely deprecated. 
> In any case, enough have voiced concerns that I've forked 
> bitcoin/bitcoin, removed the snippet of code from main.cpp that makes 
> the questionable call and submitted a pull request 
> <https://github.com/bitcoin/bitcoin/pull/506>. On that pull request it 
> was noted by Gavin Andresen that it merited discussion here and some 
> kind of consensus should be reached before acting on that pull 
> request. It was also mentioned that he thought the feature was still 
> more useful than dangerous and that he would argue against.
>
> So I pose the question to you fine fellows: Is the alert system 
> valuable, an unnecessary risk or merely a snippet of deprecated code? 
> Should it be removed?
>
> Sources:
> http://bitcoin.stackexchange.com/questions/583/what-is-the-alert-system-in-the-bitcoin-protocol-how-does-it-work/590
> http://bitcoin.stackexchange.com/questions/636/is-the-alert-system-still-in-the-main-clients-code-will-it-be-removed/711
>
>
> ------------------------------------------------------------------------------
> Doing More with Less: The Next Generation Virtual Desktop
> What are the key obstacles that have prevented many mid-market businesses
> from deploying virtual desktops?   How do next-generation virtual desktops
> provide companies an easier-to-deploy, easier-to-manage and more affordable
> virtual desktop model.http://www.accelacomm.com/jaw/sfnl/114/51426474/
>
>
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110909/753154f6/attachment.html>

From bitcoin-list at bluematt.me  Thu Sep  8 15:20:42 2011
From: bitcoin-list at bluematt.me (Matt Corallo)
Date: Thu, 08 Sep 2011 11:20:42 -0400
Subject: [Bitcoin-development] Alert System
In-Reply-To: <CAK5y1FhQLWXtqHfB3HymOkZ-5LdTqdEkX8bM=nOGhFeZrOPwgA@mail.gmail.com>
References: <CAK5y1FhQLWXtqHfB3HymOkZ-5LdTqdEkX8bM=nOGhFeZrOPwgA@mail.gmail.com>
Message-ID: <1315495242.2795.4.camel@BMThinkPad.lan.bluematt.me>

On Thu, 2011-09-08 at 07:42 -0700, David Perry wrote:
> There has been some discussion on the new Bitcoin StackExchange site
> lately about the alert protocol. A few have suggested that it might
> carry the potential for abuse (spam/DoS) and others have argued that
> it's merely deprecated. In any case, enough have voiced concerns that
> I've forked bitcoin/bitcoin, removed the snippet of code from main.cpp
> that makes the questionable call and submitted a pull request. On that
> pull request it was noted by Gavin Andresen that it merited discussion
> here and some kind of consensus should be reached before acting on
> that pull request. It was also mentioned that he thought the feature
> was still more useful than dangerous and that he would argue against.
> 
> 
> So I pose the question to you fine fellows: Is the alert system
> valuable, an unnecessary risk or merely a snippet of deprecated code?
> Should it be removed?

The alert system requires a signature verification when it receives an
alert, but so do blocks and transactions so it really isn't a DoS target
(remember that the alert system requires alerts to be signed by a key
that only gavin and satoshi have).

The alert system could prove very, very valuable.  In much software it
carries the risk for abuse or simply seems wrong that the developers can
send a message to everyone's computer to notify them of something, but
keep in mind that Bitcoin is financial software.  If there is an urgent
problem (like the overflow bug) there must be a way to notify people to
upgrade immediately, which is exactly what alerts provide.  Since alerts
no longer carry the ability to put Bitcoin into RPC safe-mode, they are
literally just a message and I see no reason why they should be removed.




From shadders.del at gmail.com  Thu Sep  8 15:25:57 2011
From: shadders.del at gmail.com (Steve Coughlan)
Date: Fri, 9 Sep 2011 01:25:57 +1000
Subject: [Bitcoin-development] Alert System
In-Reply-To: <1315495242.2795.4.camel@BMThinkPad.lan.bluematt.me>
References: <CAK5y1FhQLWXtqHfB3HymOkZ-5LdTqdEkX8bM=nOGhFeZrOPwgA@mail.gmail.com>
	<1315495242.2795.4.camel@BMThinkPad.lan.bluematt.me>
Message-ID: <CAOPxoMv7EGwgBNuvYpaD_4LtyxUUCvQ2Pe0DCZO4uHoAoMyfnA@mail.gmail.com>

Who knows, it might be the only way we'll ever hear from Satoshi again.
On Sep 9, 2011 1:21 AM, "Matt Corallo" <bitcoin-list at bluematt.me> wrote:
> On Thu, 2011-09-08 at 07:42 -0700, David Perry wrote:
>> There has been some discussion on the new Bitcoin StackExchange site
>> lately about the alert protocol. A few have suggested that it might
>> carry the potential for abuse (spam/DoS) and others have argued that
>> it's merely deprecated. In any case, enough have voiced concerns that
>> I've forked bitcoin/bitcoin, removed the snippet of code from main.cpp
>> that makes the questionable call and submitted a pull request. On that
>> pull request it was noted by Gavin Andresen that it merited discussion
>> here and some kind of consensus should be reached before acting on
>> that pull request. It was also mentioned that he thought the feature
>> was still more useful than dangerous and that he would argue against.
>>
>>
>> So I pose the question to you fine fellows: Is the alert system
>> valuable, an unnecessary risk or merely a snippet of deprecated code?
>> Should it be removed?
>
> The alert system requires a signature verification when it receives an
> alert, but so do blocks and transactions so it really isn't a DoS target
> (remember that the alert system requires alerts to be signed by a key
> that only gavin and satoshi have).
>
> The alert system could prove very, very valuable. In much software it
> carries the risk for abuse or simply seems wrong that the developers can
> send a message to everyone's computer to notify them of something, but
> keep in mind that Bitcoin is financial software. If there is an urgent
> problem (like the overflow bug) there must be a way to notify people to
> upgrade immediately, which is exactly what alerts provide. Since alerts
> no longer carry the ability to put Bitcoin into RPC safe-mode, they are
> literally just a message and I see no reason why they should be removed.
>
>
>
------------------------------------------------------------------------------
> Doing More with Less: The Next Generation Virtual Desktop
> What are the key obstacles that have prevented many mid-market businesses
> from deploying virtual desktops? How do next-generation virtual desktops
> provide companies an easier-to-deploy, easier-to-manage and more
affordable
> virtual desktop model.http://www.accelacomm.com/jaw/sfnl/114/51426474/
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110909/9580ac87/attachment.html>

From bitcoin-list at bluematt.me  Thu Sep  8 15:20:42 2011
From: bitcoin-list at bluematt.me (Matt Corallo)
Date: Thu, 08 Sep 2011 11:20:42 -0400
Subject: [Bitcoin-development] Alert System
In-Reply-To: <CAK5y1FhQLWXtqHfB3HymOkZ-5LdTqdEkX8bM=nOGhFeZrOPwgA@mail.gmail.com>
References: <CAK5y1FhQLWXtqHfB3HymOkZ-5LdTqdEkX8bM=nOGhFeZrOPwgA@mail.gmail.com>
Message-ID: <1315495242.2795.4.camel@BMThinkPad.lan.bluematt.me>

On Thu, 2011-09-08 at 07:42 -0700, David Perry wrote:
> There has been some discussion on the new Bitcoin StackExchange site
> lately about the alert protocol. A few have suggested that it might
> carry the potential for abuse (spam/DoS) and others have argued that
> it's merely deprecated. In any case, enough have voiced concerns that
> I've forked bitcoin/bitcoin, removed the snippet of code from main.cpp
> that makes the questionable call and submitted a pull request. On that
> pull request it was noted by Gavin Andresen that it merited discussion
> here and some kind of consensus should be reached before acting on
> that pull request. It was also mentioned that he thought the feature
> was still more useful than dangerous and that he would argue against.
> 
> 
> So I pose the question to you fine fellows: Is the alert system
> valuable, an unnecessary risk or merely a snippet of deprecated code?
> Should it be removed?

The alert system requires a signature verification when it receives an
alert, but so do blocks and transactions so it really isn't a DoS target
(remember that the alert system requires alerts to be signed by a key
that only gavin and satoshi have).

The alert system could prove very, very valuable.  In much software it
carries the risk for abuse or simply seems wrong that the developers can
send a message to everyone's computer to notify them of something, but
keep in mind that Bitcoin is financial software.  If there is an urgent
problem (like the overflow bug) there must be a way to notify people to
upgrade immediately, which is exactly what alerts provide.  Since alerts
no longer carry the ability to put Bitcoin into RPC safe-mode, they are
literally just a message and I see no reason why they should be removed.




From enmaku at gmail.com  Thu Sep  8 16:09:12 2011
From: enmaku at gmail.com (David Perry)
Date: Thu, 8 Sep 2011 09:09:12 -0700
Subject: [Bitcoin-development] Alert System
In-Reply-To: <4E68D968.1080604@gmail.com>
References: <CAK5y1FhQLWXtqHfB3HymOkZ-5LdTqdEkX8bM=nOGhFeZrOPwgA@mail.gmail.com>
	<4E68D968.1080604@gmail.com>
Message-ID: <CAK5y1FhyCCwL+w4Uo6Xht9BFkZiAmNCeywACnx=eQa6f2iFP2Q@mail.gmail.com>

@Steve re "Who knows, it might be the only way we'll ever hear from Satoshi
again."

That brings up a good point... Does anyone aside from Satoshi actually have
the ability to send such an alert? Should we at the very least change the
alert system to give such privileges to current devs and ensure that that if
the missing Mr. Satoshi has had his key compromised we don't see an
authoritative-looking alert come up from a malicious source?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110908/129de602/attachment.html>

From bitcoin-list at bluematt.me  Thu Sep  8 16:16:51 2011
From: bitcoin-list at bluematt.me (Matt Corallo)
Date: Thu, 08 Sep 2011 12:16:51 -0400
Subject: [Bitcoin-development] Alert System
In-Reply-To: <CAK5y1FhyCCwL+w4Uo6Xht9BFkZiAmNCeywACnx=eQa6f2iFP2Q@mail.gmail.com>
References: <CAK5y1FhQLWXtqHfB3HymOkZ-5LdTqdEkX8bM=nOGhFeZrOPwgA@mail.gmail.com>
	<4E68D968.1080604@gmail.com>
	<CAK5y1FhyCCwL+w4Uo6Xht9BFkZiAmNCeywACnx=eQa6f2iFP2Q@mail.gmail.com>
Message-ID: <1315498611.2877.1.camel@BMThinkPad.lan.bluematt.me>

On Thu, 2011-09-08 at 09:09 -0700, David Perry wrote:
> @Steve re "Who knows, it might be the only way we'll ever hear from
> Satoshi again."
> 
> 
> That brings up a good point... Does anyone aside from Satoshi actually
> have the ability to send such an alert?
Gavin does
> Should we at the very least change the alert system to give such
> privileges to current devs and ensure that that if the missing Mr.
> Satoshi has had his key compromised we don't see an
> authoritative-looking alert come up from a malicious source?
Meh, why make the key-holder send out two alerts for old clients and new
clients.  I also highly doubt satoshi would let his key get compromised.
That said, keep in mind they are literally just messages, they make no
functional difference.




From pieter.wuille at gmail.com  Thu Sep  8 16:20:16 2011
From: pieter.wuille at gmail.com (Pieter Wuille)
Date: Thu, 8 Sep 2011 18:20:16 +0200
Subject: [Bitcoin-development] Alert System
In-Reply-To: <CAK5y1FhyCCwL+w4Uo6Xht9BFkZiAmNCeywACnx=eQa6f2iFP2Q@mail.gmail.com>
References: <CAK5y1FhQLWXtqHfB3HymOkZ-5LdTqdEkX8bM=nOGhFeZrOPwgA@mail.gmail.com>
	<4E68D968.1080604@gmail.com>
	<CAK5y1FhyCCwL+w4Uo6Xht9BFkZiAmNCeywACnx=eQa6f2iFP2Q@mail.gmail.com>
Message-ID: <20110908162014.GA7513@ulyssis.org>

On Thu, Sep 08, 2011 at 09:09:12AM -0700, David Perry wrote:
> @Steve re "Who knows, it might be the only way we'll ever hear from Satoshi
> again."
> 
> That brings up a good point... Does anyone aside from Satoshi actually have
> the ability to send such an alert? Should we at the very least change the
> alert system to give such privileges to current devs and ensure that that if
> the missing Mr. Satoshi has had his key compromised we don't see an
> authoritative-looking alert come up from a malicious source?

Yes, Satoshi transferred the key to Gavin when he "left". I agree we should
keep it, btw. There have been suggestions before on this list to use the
alert system to ask people to upgrade to recent versions of the client (eg.
the disconnect issue 0.3.20-0.3.23 had). I feel there may come a moment when
we really need to use it for that purpose.

-- 
Pieter



From witchspace81 at gmail.com  Thu Sep  8 16:37:01 2011
From: witchspace81 at gmail.com (John Smith)
Date: Thu, 8 Sep 2011 16:37:01 +0000
Subject: [Bitcoin-development] Alert System
In-Reply-To: <20110908162014.GA7513@ulyssis.org>
References: <CAK5y1FhQLWXtqHfB3HymOkZ-5LdTqdEkX8bM=nOGhFeZrOPwgA@mail.gmail.com>
	<4E68D968.1080604@gmail.com>
	<CAK5y1FhyCCwL+w4Uo6Xht9BFkZiAmNCeywACnx=eQa6f2iFP2Q@mail.gmail.com>
	<20110908162014.GA7513@ulyssis.org>
Message-ID: <CAJNQ0suvvAC+TBu5Cbt+Q2=aycMnVHRXXGccEdytSZOj10w5JA@mail.gmail.com>

There is a lot of complaining about this alert system, but I really don't
see the problem.

As others have already said, it's just a message. Even if someone managed to
compromise the private key, the most they could do is spam graffiti messages
or try phishing. There are much worse things that could happen to the
network (in which case an alert system could come in very handy). It's just
not worth worrying about.

JS

On Thu, Sep 8, 2011 at 4:20 PM, Pieter Wuille <pieter.wuille at gmail.com>wrote:

> On Thu, Sep 08, 2011 at 09:09:12AM -0700, David Perry wrote:
> > @Steve re "Who knows, it might be the only way we'll ever hear from
> Satoshi
> > again."
> >
> > That brings up a good point... Does anyone aside from Satoshi actually
> have
> > the ability to send such an alert? Should we at the very least change the
> > alert system to give such privileges to current devs and ensure that that
> if
> > the missing Mr. Satoshi has had his key compromised we don't see an
> > authoritative-looking alert come up from a malicious source?
>
> Yes, Satoshi transferred the key to Gavin when he "left". I agree we should
> keep it, btw. There have been suggestions before on this list to use the
> alert system to ask people to upgrade to recent versions of the client (eg.
> the disconnect issue 0.3.20-0.3.23 had). I feel there may come a moment
> when
> we really need to use it for that purpose.
>
> --
> Pieter
>
>
> ------------------------------------------------------------------------------
> Doing More with Less: The Next Generation Virtual Desktop
> What are the key obstacles that have prevented many mid-market businesses
> from deploying virtual desktops?   How do next-generation virtual desktops
> provide companies an easier-to-deploy, easier-to-manage and more affordable
> virtual desktop model.http://www.accelacomm.com/jaw/sfnl/114/51426474/
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110908/8fe4ee50/attachment.html>

From mike at plan99.net  Thu Sep  8 16:51:02 2011
From: mike at plan99.net (Mike Hearn)
Date: Thu, 8 Sep 2011 18:51:02 +0200
Subject: [Bitcoin-development] Alert System
In-Reply-To: <CAJNQ0suvvAC+TBu5Cbt+Q2=aycMnVHRXXGccEdytSZOj10w5JA@mail.gmail.com>
References: <CAK5y1FhQLWXtqHfB3HymOkZ-5LdTqdEkX8bM=nOGhFeZrOPwgA@mail.gmail.com>
	<4E68D968.1080604@gmail.com>
	<CAK5y1FhyCCwL+w4Uo6Xht9BFkZiAmNCeywACnx=eQa6f2iFP2Q@mail.gmail.com>
	<20110908162014.GA7513@ulyssis.org>
	<CAJNQ0suvvAC+TBu5Cbt+Q2=aycMnVHRXXGccEdytSZOj10w5JA@mail.gmail.com>
Message-ID: <CANEZrP2sbLc-ATpf7Uu1S6UQfhd2LPPoHRJmvjZuzH2CUS-TqQ@mail.gmail.com>

Alert system should be upgraded to pop up a dialog box every 30 minutes
whilst you're using the software.

Bitcoin is one of the few pieces of software I use that has no concept of
automatic updates or even notifications at all. Yet the network badly relies
on people upgrading for stability, scalability and to enable new features.

If the alert system goes away, it'd just end up being replaced by polling
something over HTTP, which is less decentralized than before. Having zero
way to communicate upgrades to end-users is a non-starter for anything
serious about mass market penetration.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110908/c4338875/attachment.html>

From ampedal at gmail.com  Thu Sep  8 16:56:32 2011
From: ampedal at gmail.com (Alex Waters)
Date: Thu, 8 Sep 2011 12:56:32 -0400
Subject: [Bitcoin-development] Alert System
In-Reply-To: <CANEZrP2sbLc-ATpf7Uu1S6UQfhd2LPPoHRJmvjZuzH2CUS-TqQ@mail.gmail.com>
References: <CAK5y1FhQLWXtqHfB3HymOkZ-5LdTqdEkX8bM=nOGhFeZrOPwgA@mail.gmail.com>
	<4E68D968.1080604@gmail.com>
	<CAK5y1FhyCCwL+w4Uo6Xht9BFkZiAmNCeywACnx=eQa6f2iFP2Q@mail.gmail.com>
	<20110908162014.GA7513@ulyssis.org>
	<CAJNQ0suvvAC+TBu5Cbt+Q2=aycMnVHRXXGccEdytSZOj10w5JA@mail.gmail.com>
	<CANEZrP2sbLc-ATpf7Uu1S6UQfhd2LPPoHRJmvjZuzH2CUS-TqQ@mail.gmail.com>
Message-ID: <CAL0fb61asVXCcjee=kSrc+DrPFravO3HZSOfTKZGt7QC-hWKtg@mail.gmail.com>

https://github.com/bitcoin/bitcoin/pull/506 has been closed pending
additional commits or a change in consensus.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110908/8bf319dc/attachment.html>

From luke at dashjr.org  Thu Sep  8 17:15:09 2011
From: luke at dashjr.org (Luke-Jr)
Date: Thu, 8 Sep 2011 13:15:09 -0400
Subject: [Bitcoin-development] Alert System
In-Reply-To: <CANEZrP2sbLc-ATpf7Uu1S6UQfhd2LPPoHRJmvjZuzH2CUS-TqQ@mail.gmail.com>
References: <CAK5y1FhQLWXtqHfB3HymOkZ-5LdTqdEkX8bM=nOGhFeZrOPwgA@mail.gmail.com>
	<CAJNQ0suvvAC+TBu5Cbt+Q2=aycMnVHRXXGccEdytSZOj10w5JA@mail.gmail.com>
	<CANEZrP2sbLc-ATpf7Uu1S6UQfhd2LPPoHRJmvjZuzH2CUS-TqQ@mail.gmail.com>
Message-ID: <201109081315.12643.luke@dashjr.org>

On Thursday, September 08, 2011 12:51:02 PM Mike Hearn wrote:
> Bitcoin is one of the few pieces of software I use that has no concept of
> automatic updates or even notifications at all. Yet the network badly
> relies on people upgrading for stability, scalability and to enable new
> features.
> 
> If the alert system goes away, it'd just end up being replaced by polling
> something over HTTP, which is less decentralized than before. Having zero
> way to communicate upgrades to end-users is a non-starter for anything
> serious about mass market penetration.

In fact, I think the alert system should relay (note, NOT display) messages 
*regardless of the key used*, so it isn't yet another "our client gets special 
status" thing, and can be used for other clients as well.



From witchspace81 at gmail.com  Thu Sep  8 17:33:15 2011
From: witchspace81 at gmail.com (John Smith)
Date: Thu, 8 Sep 2011 17:33:15 +0000
Subject: [Bitcoin-development] Alert System
In-Reply-To: <201109081315.12643.luke@dashjr.org>
References: <CAK5y1FhQLWXtqHfB3HymOkZ-5LdTqdEkX8bM=nOGhFeZrOPwgA@mail.gmail.com>
	<CAJNQ0suvvAC+TBu5Cbt+Q2=aycMnVHRXXGccEdytSZOj10w5JA@mail.gmail.com>
	<CANEZrP2sbLc-ATpf7Uu1S6UQfhd2LPPoHRJmvjZuzH2CUS-TqQ@mail.gmail.com>
	<201109081315.12643.luke@dashjr.org>
Message-ID: <CAJNQ0ss2fkmps32uPAD3ALLmo1JKaF3cc1Ai_m7VuB5858jNJg@mail.gmail.com>

Be careful though, if you relay everything, it suddenly *does* have DDoS
potential...

JS


On Thu, Sep 8, 2011 at 5:15 PM, Luke-Jr <luke at dashjr.org> wrote:

> On Thursday, September 08, 2011 12:51:02 PM Mike Hearn wrote:
> > Bitcoin is one of the few pieces of software I use that has no concept of
> > automatic updates or even notifications at all. Yet the network badly
> > relies on people upgrading for stability, scalability and to enable new
> > features.
> >
> > If the alert system goes away, it'd just end up being replaced by polling
> > something over HTTP, which is less decentralized than before. Having zero
> > way to communicate upgrades to end-users is a non-starter for anything
> > serious about mass market penetration.
>
> In fact, I think the alert system should relay (note, NOT display) messages
> *regardless of the key used*, so it isn't yet another "our client gets
> special
> status" thing, and can be used for other clients as well.
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110908/a8f8d307/attachment.html>

From luke at dashjr.org  Thu Sep  8 17:59:29 2011
From: luke at dashjr.org (Luke-Jr)
Date: Thu, 8 Sep 2011 13:59:29 -0400
Subject: [Bitcoin-development] Alert System
In-Reply-To: <CAJNQ0ss2fkmps32uPAD3ALLmo1JKaF3cc1Ai_m7VuB5858jNJg@mail.gmail.com>
References: <CAK5y1FhQLWXtqHfB3HymOkZ-5LdTqdEkX8bM=nOGhFeZrOPwgA@mail.gmail.com>
	<201109081315.12643.luke@dashjr.org>
	<CAJNQ0ss2fkmps32uPAD3ALLmo1JKaF3cc1Ai_m7VuB5858jNJg@mail.gmail.com>
Message-ID: <201109081359.32590.luke@dashjr.org>

On Thursday, September 08, 2011 1:33:15 PM John Smith wrote:
> Be careful though, if you relay everything, it suddenly *does* have DDoS
> potential...

Maybe require a proof-of-work then?



From theymos at mm.st  Thu Sep  8 19:43:12 2011
From: theymos at mm.st (theymos)
Date: Thu, 08 Sep 2011 14:43:12 -0500
Subject: [Bitcoin-development] Alert System
In-Reply-To: <CAK5y1FhQLWXtqHfB3HymOkZ-5LdTqdEkX8bM=nOGhFeZrOPwgA@mail.gmail.com>
References: <CAK5y1FhQLWXtqHfB3HymOkZ-5LdTqdEkX8bM=nOGhFeZrOPwgA@mail.gmail.com>
Message-ID: <1315510992.9621.140258138898885@webmail.messagingengine.com>

The alert system will be very important if there are ever any critical
problems in the network. For example, it is currently Bitcoin's only
defense against an attacker with >50% of the computational power, where
alerts would be used to tell people to stop accepting transactions.

Displaying a message is pretty harmless. In fact, I don't think the
message is prominent enough. The GUI client should not allow people to
see received transactions or send new transactions while an alert is in
effect (with an opt-out), and there should be an opt-in feature that
puts RPC into safe mode in response to an alert.

Alerts are no worse than transactions as a DoS attack vector. They're
much safer than typical HTTPS because there are no CAs that can break
its security.

(FYI: I also have a copy of the alert key.)



From luke at dashjr.org  Thu Sep  8 19:45:35 2011
From: luke at dashjr.org (Luke-Jr)
Date: Thu, 8 Sep 2011 15:45:35 -0400
Subject: [Bitcoin-development] Alert System
In-Reply-To: <1315510992.9621.140258138898885@webmail.messagingengine.com>
References: <CAK5y1FhQLWXtqHfB3HymOkZ-5LdTqdEkX8bM=nOGhFeZrOPwgA@mail.gmail.com>
	<1315510992.9621.140258138898885@webmail.messagingengine.com>
Message-ID: <201109081545.41378.luke@dashjr.org>

On Thursday, September 08, 2011 3:43:12 PM theymos wrote:
> The alert system will be very important if there are ever any critical
> problems in the network. For example, it is currently Bitcoin's only
> defense against an attacker with >50% of the computational power, where
> alerts would be used to tell people to stop accepting transactions.

I don't seem to recall this ever happening, despite Deepbit having over 50% 
multiple times now.




From theymos at mm.st  Thu Sep  8 20:17:25 2011
From: theymos at mm.st (theymos)
Date: Thu, 08 Sep 2011 15:17:25 -0500
Subject: [Bitcoin-development] Alert System
In-Reply-To: <201109081545.41378.luke@dashjr.org>
References: <CAK5y1FhQLWXtqHfB3HymOkZ-5LdTqdEkX8bM=nOGhFeZrOPwgA@mail.gmail.com><1315510992.9621.140258138898885@webmail.messagingengine.com>
	<201109081545.41378.luke@dashjr.org>
Message-ID: <1315513045.19971.140258138919801@webmail.messagingengine.com>

On Thursday, September 08, 2011 3:45 PM, "Luke-Jr" <luke at dashjr.org> wrote:
> I don't seem to recall this ever happening, despite Deepbit having over 50% 
> multiple times now.

An alert would have been issued if they had abused that position.



From will at phase.net  Thu Sep  8 19:25:22 2011
From: will at phase.net (Will)
Date: Thu, 8 Sep 2011 20:25:22 +0100
Subject: [Bitcoin-development] Alert System
In-Reply-To: <201109081315.12643.luke@dashjr.org>
References: <CAK5y1FhQLWXtqHfB3HymOkZ-5LdTqdEkX8bM=nOGhFeZrOPwgA@mail.gmail.com>
	<CAJNQ0suvvAC+TBu5Cbt+Q2=aycMnVHRXXGccEdytSZOj10w5JA@mail.gmail.com>
	<CANEZrP2sbLc-ATpf7Uu1S6UQfhd2LPPoHRJmvjZuzH2CUS-TqQ@mail.gmail.com>
	<201109081315.12643.luke@dashjr.org>
Message-ID: <CAHQs=o5xSLa7+eMRT+eskdMw=jVNwxj9gGYyjqtwZyxXbnRxcg@mail.gmail.com>

> In fact, I think the alert system should relay (note, NOT display) messages
> *regardless of the key used*, so it isn't yet another "our client gets
> special
> status" thing, and can be used for other clients as well.
>
>
> Be careful though, if you relay everything, it suddenly *does* have DDoS
potential...

no more than other messages such as transactions.

>Maybe require a proof-of-work then?

kind of defeats the purpose of the alert if it takes a long time to issue
one.

I think leave the alert in, but relay alert messages even if they don't use
the correct key.  This means that if we later decide to add new keys to the
alert root trust then older clients will still relay these.

my .02btc

Will
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110908/584a4849/attachment.html>

From luke at dashjr.org  Fri Sep  9 06:57:03 2011
From: luke at dashjr.org (Luke-Jr)
Date: Fri, 9 Sep 2011 02:57:03 -0400
Subject: [Bitcoin-development] 0.3.23+patches bug: JSON-RPC leaves sockets
	around when not connected
Message-ID: <201109090257.06644.luke@dashjr.org>

On Eligius, I have two bitcoinds running on the same system:
- a hub node, which is dedicated to relaying network activity between the
  hundreds of nodes Eligius peers with
- a work node, which is dedicated to managing mining, and only ever connects
  to the hub node

Lately, the hub node has been dying (yet to determine cause; I haven't changed 
anything recently), leaving the work node with no connections. The work node, 
of course, starts responding to getworks with "not connected" messages. 
Strangely enough, the sockets used for these are never cleaned up properly, 
and eventually overflow the system's socket limits.

I am using a very heavily patched 0.3.23, so this bug could be related to one 
of those patches (perhaps the threaded JSON-RPC?), but I felt like I should 
mention it somewhere else just in case before 0.4 final got released. I have 
not tried to reproduce it on an unpatched bitcoind yet, and am extremely busy 
lately so I might not get a chance before you guys finish 0.4.



From decker.christian at gmail.com  Fri Sep  9 09:15:38 2011
From: decker.christian at gmail.com (Christian Decker)
Date: Fri, 9 Sep 2011 11:15:38 +0200
Subject: [Bitcoin-development] Alert System
In-Reply-To: <3658b238-b1bf-4fde-8880-d50c3eaa8ed9@email.android.com>
References: <CAK5y1FhQLWXtqHfB3HymOkZ-5LdTqdEkX8bM=nOGhFeZrOPwgA@mail.gmail.com>
	<CAJNQ0suvvAC+TBu5Cbt+Q2=aycMnVHRXXGccEdytSZOj10w5JA@mail.gmail.com>
	<CANEZrP2sbLc-ATpf7Uu1S6UQfhd2LPPoHRJmvjZuzH2CUS-TqQ@mail.gmail.com>
	<201109081315.12643.luke@dashjr.org>
	<CAHQs=o5xSLa7+eMRT+eskdMw=jVNwxj9gGYyjqtwZyxXbnRxcg@mail.gmail.com>
	<3658b238-b1bf-4fde-8880-d50c3eaa8ed9@email.android.com>
Message-ID: <CALxbBHVnwdq7YAGo9pEbQOqy3A=u9ieufozr2T1Y_cuoQa8U6A@mail.gmail.com>

Resending to mailing list as I replied directly...
On Thu, Sep 8, 2011 at 11:03 PM, Christian Decker <
decker.christian at gmail.com> wrote:

>
>
> Will <will at phase.net> wrote:
>
> >> In fact, I think the alert system should relay (note, NOT display)
> >messages
> >> *regardless of the key used*, so it isn't yet another "our client
> >gets
> >> special
> >> status" thing, and can be used for other clients as well.
> >>
> >>
> >> Be careful though, if you relay everything, it suddenly *does* have
> >DDoS
> >potential...
> >
> >no more than other messages such as transactions.
> Only verified and valid trandactions are forwarded which is desired as it
> costs the sender a fee if he attempts to spam, messages have no such
> penalty.
> >
> >>Maybe require a proof-of-work then?
> >
> >kind of defeats the purpose of the alert if it takes a long time to
> >issue
> >one.
> >
> >I think leave the alert in, but relay alert messages even if they don't
> >use
> >the correct key.  This means that if we later decide to add new keys to
> >the
> >alert root trust then older clients will still relay these.
> >
> >my .02btc
> >
> >Will
> I'm for keeping it in there as well, maybe even extend it with a mechanism
> to sign other certificates giving alternative client developers the ability
> to issue their own alerts. Think ssl certificates...
>
> Regards,
> Chris
>
> >------------------------------------------------------------------------------
> >Doing More with Less: The Next Generation Virtual Desktop
> >What are the key obstacles that have prevented many mid-market
> >businesses
> >from deploying virtual desktops?   How do next-generation virtual
> >desktops
> >provide companies an easier-to-deploy, easier-to-manage and more
> >affordable
> >virtual desktop
> >model.
> http://www.accelacomm.com/jaw/sfnl/114/51426474/_______________________________________________
> >Bitcoin-development mailing list
> >Bitcoin-development at lists.sourceforge.net
> >https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
> --
> Sent from my Android phone with K-9 Mail. Please excuse my brevity.
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110909/3053b5e1/attachment.html>

From ampedal at gmail.com  Fri Sep  9 10:08:27 2011
From: ampedal at gmail.com (Alex Waters)
Date: Fri, 9 Sep 2011 06:08:27 -0400
Subject: [Bitcoin-development] Testing commits
In-Reply-To: <1315367465.2697.4.camel@BMThinkPad.lan.bluematt.me>
References: <CAL0fb62WFvqFFDm=jvgG2B2Gyxj_uV_Ex-drjYHMVh08F0YrNQ@mail.gmail.com>
	<1315367465.2697.4.camel@BMThinkPad.lan.bluematt.me>
Message-ID: <CAL0fb61T9gnXytVx4F7yOk_3iS3QDkyVYJ-eCY-QKfrmi7b5LQ@mail.gmail.com>

I expect that I will make a lot of mistakes, and probably ask too many
questions - but I hope you can bear with me.

I've been trying to keep a low profile as I get better acquainted with the
project. I'm clearly in the company of some very smart people - and would
like to keep it that way.

I've tried to do my research on the main contributors, and it seems that
Matt is the only one to escape my Google stalking. If you have any questions
about my background - feel free to inquire.

It's difficult to ascertain what needs QA work first, so any guidance or
suggestion is appreciated. I'm available via social networks, email, phone,
fax?, IM, IRC, etc. Let me know your preference, or don't and I'll bugger
off.

I'll try to stay out of the way, and do my best to make the development
cycle easier. Let me know if I'm stepping on toes, or being annoying. I
won't be offended.

As for the commit testing, I want to have an idiot proof solution to get as
many people testing as possible (eventually). With code like this, I think
it's better to go full-auto with the ACKs.

-Alex
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110909/2cfd1924/attachment.html>

From gavinandresen at gmail.com  Fri Sep  9 14:02:05 2011
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Fri, 9 Sep 2011 10:02:05 -0400
Subject: [Bitcoin-development] 0.4 Release Candidate 2
Message-ID: <CABsx9T2Y3CmBr=twHvFOEoQCVcSySZ+JyEQXcOseRKxJi3KoLw@mail.gmail.com>

I just tagged the git tree:  v0.4.00rc2

Fixes from release candidate 1:

+ Optimize database writes for transactions with lots of inputs
+ Fix a deadlock that could occur when adding addresses from 'addr'
messages and irc
+ Fix a potential problem with duplicate, un-spendable coinbase
transactions if you were generating bitcoins, with a locked wallet,
and ran out of keypool keys.


-- 
--
Gavin Andresen



From witchspace81 at gmail.com  Fri Sep  9 20:00:30 2011
From: witchspace81 at gmail.com (John Smith)
Date: Fri, 9 Sep 2011 20:00:30 +0000
Subject: [Bitcoin-development] 0.3.23+patches bug: JSON-RPC leaves
 sockets around when not connected
In-Reply-To: <201109090257.06644.luke@dashjr.org>
References: <201109090257.06644.luke@dashjr.org>
Message-ID: <CAJNQ0suWpgE3-eg3sSBq=BT+C4nh-QHmYY4ohX71Ka2=8DJyyg@mail.gmail.com>

On Fri, Sep 9, 2011 at 6:57 AM, Luke-Jr <luke at dashjr.org> wrote:

> On Eligius, I have two bitcoinds running on the same system:
> - a hub node, which is dedicated to relaying network activity between the
>  hundreds of nodes Eligius peers with
> - a work node, which is dedicated to managing mining, and only ever
> connects
>  to the hub node
>
> Lately, the hub node has been dying (yet to determine cause; I haven't
> changed
> anything recently),


Stack trace or it didn't happen :p

JS
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110909/a02e2709/attachment.html>

From bitcoin-list at bluematt.me  Fri Sep  9 23:49:17 2011
From: bitcoin-list at bluematt.me (Matt Corallo)
Date: Fri, 09 Sep 2011 19:49:17 -0400
Subject: [Bitcoin-development] 0.4 Release Candidate 2
In-Reply-To: <CABsx9T2Y3CmBr=twHvFOEoQCVcSySZ+JyEQXcOseRKxJi3KoLw@mail.gmail.com>
References: <CABsx9T2Y3CmBr=twHvFOEoQCVcSySZ+JyEQXcOseRKxJi3KoLw@mail.gmail.com>
Message-ID: <1315612157.3544.2.camel@BMThinkPad.lan.bluematt.me>

On Fri, 2011-09-09 at 10:02 -0400, Gavin Andresen wrote:
> I just tagged the git tree:  v0.4.00rc2
> 
> Fixes from release candidate 1:
> 
> + Optimize database writes for transactions with lots of inputs
> + Fix a deadlock that could occur when adding addresses from 'addr'
> messages and irc
> + Fix a potential problem with duplicate, un-spendable coinbase
> transactions if you were generating bitcoins, with a locked wallet,
> and ran out of keypool keys.
> 
> 
I'm too lazy to make nice tars so here is the raw gitian output (I plan
on working out gitian-downloader stuff sometime in the next couple
days).
Also, setup exe still not deterministic so theres that...

Anyway:
http://dl.dropbox.com/u/29653426/bitcoin-ubuntu-v0.4.00rc2.zip
http://dl.dropbox.com/u/29653426/bitcoin-win32-v0.4.00rc2.zip

SHA1s:
fd886d79bf48ba0d90f2f99fdd19d96946662bf5  bitcoin-ubuntu-v0.4.00rc2.zip
703712859ecdce423020116ebf65d087b179997d  bitcoin-win32-v0.4.00rc2.zip

Matt
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 836 bytes
Desc: This is a digitally signed message part
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110909/67a647b0/attachment.sig>

From jgarzik at exmulti.com  Sat Sep 10 05:18:04 2011
From: jgarzik at exmulti.com (Jeff Garzik)
Date: Sat, 10 Sep 2011 01:18:04 -0400
Subject: [Bitcoin-development] 0.4 Release Candidate 2
In-Reply-To: <CABsx9T2Y3CmBr=twHvFOEoQCVcSySZ+JyEQXcOseRKxJi3KoLw@mail.gmail.com>
References: <CABsx9T2Y3CmBr=twHvFOEoQCVcSySZ+JyEQXcOseRKxJi3KoLw@mail.gmail.com>
Message-ID: <CA+8xBpcXjOBGyHgyKQ6e+ygZXg4+b6SkpUdYNX=cRnEjZodREA@mail.gmail.com>

On Fri, Sep 9, 2011 at 10:02 AM, Gavin Andresen <gavinandresen at gmail.com> wrote:
> I just tagged the git tree: ?v0.4.00rc2
>
> Fixes from release candidate 1:
>
> + Optimize database writes for transactions with lots of inputs
> + Fix a deadlock that could occur when adding addresses from 'addr'
> messages and irc
> + Fix a potential problem with duplicate, un-spendable coinbase
> transactions if you were generating bitcoins, with a locked wallet,
> and ran out of keypool keys.


Should I go ahead and upload src + builds to SF?

-- 
Jeff Garzik
exMULTI, Inc.
jgarzik at exmulti.com



From ampedal at gmail.com  Sun Sep 11 00:20:22 2011
From: ampedal at gmail.com (Alex Waters)
Date: Sat, 10 Sep 2011 20:20:22 -0400
Subject: [Bitcoin-development] Bitcoin-qt ready for merging
Message-ID: <CAL0fb61HrL8xe0yNG8_H0cEmVizzhg1pRe67aJmUPbGmLabYcA@mail.gmail.com>

Can you please submit a pull request and testing plan? If these already
exist, can you please link them here?

I'm exciting to get this in, as it will close the wx issues. (and hopefully
not bring on too many qt issues)

Thanks,
Alex
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110910/414ee27d/attachment.html>

From witchspace81 at gmail.com  Sun Sep 11 07:37:54 2011
From: witchspace81 at gmail.com (John Smith)
Date: Sun, 11 Sep 2011 07:37:54 +0000
Subject: [Bitcoin-development] Bitcoin-qt ready for merging
In-Reply-To: <CAL0fb61HrL8xe0yNG8_H0cEmVizzhg1pRe67aJmUPbGmLabYcA@mail.gmail.com>
References: <CAL0fb61HrL8xe0yNG8_H0cEmVizzhg1pRe67aJmUPbGmLabYcA@mail.gmail.com>
Message-ID: <CAJNQ0svrwJF02sssMwLeN8gjc+h2-F8Bo3iOrwWJUM8NtWknFg@mail.gmail.com>

Hello Alex,

On Sun, Sep 11, 2011 at 12:20 AM, Alex Waters <ampedal at gmail.com> wrote:

> Can you please submit a pull request and testing plan? If these already
> exist, can you please link them here?


What testing plan do you need?

JS
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110911/1d750276/attachment.html>

From witchspace81 at gmail.com  Sun Sep 11 09:54:18 2011
From: witchspace81 at gmail.com (John Smith)
Date: Sun, 11 Sep 2011 09:54:18 +0000
Subject: [Bitcoin-development] Bitcoin-qt ready for merging
In-Reply-To: <CAL0fb62M9=vKM4kag9rdQ=1bAbKdnoXD+7XR3eyKWY_Q4WEZXA@mail.gmail.com>
References: <CAL0fb61HrL8xe0yNG8_H0cEmVizzhg1pRe67aJmUPbGmLabYcA@mail.gmail.com>
	<CAJNQ0svrwJF02sssMwLeN8gjc+h2-F8Bo3iOrwWJUM8NtWknFg@mail.gmail.com>
	<CAL0fb62M9=vKM4kag9rdQ=1bAbKdnoXD+7XR3eyKWY_Q4WEZXA@mail.gmail.com>
Message-ID: <CAJNQ0svPNAZSRBm+O88p4Spw6MmQinuT_S15Z56jb3Z6VAorwQ@mail.gmail.com>

Alex,

On Sun, Sep 11, 2011 at 7:45 AM, Alex Waters <ampedal at gmail.com> wrote:

> Hey John,
>
> It could be as simple as listing some things that you think could possibly
> break if qt is implemented. For example, "check the UI for artifacts". I
> don't really know what could potentially need to be tested, so any help
> would get things processed faster.
>
> I can't acknowledge a pull unless there is substantial evidence that it's
> been tested, especially something of this size...
>

It has been under development for a long time, the thread on the bitcointalk
forum is "substantial evidence" that many people are using it (also, I
receive quite a lot of mail about it, and the number of followers on github
steadily fluctuates around ~30).  So nothing obvious is broken, at least, I
think has worked better than the Wx UI for quite a while.

But as I've said before I'm fine with keeping bitcoin-qt as a parallel,
experimental, release for a while.  I think that's the only way to get more
testing with people that don't want to or can't build from source (could
just mark the download as "New GUI, experimental" or so...).

To be honest I think it should be merged at least as experimental ASAP, it
would save a lot of GUI complaints on the forum about things I've
implemented months ago already. However I will only put up a pull request as
soon as it is clear that it will actually be integrated. It is too much work
for me to keep the pull request up-to-date if it lingers for months like
many others have.

JS
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110911/a4fa11c6/attachment.html>

From gavinandresen at gmail.com  Sun Sep 11 17:12:27 2011
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Sun, 11 Sep 2011 13:12:27 -0400
Subject: [Bitcoin-development] Bitcoin-qt ready for merging
In-Reply-To: <CAJNQ0svPNAZSRBm+O88p4Spw6MmQinuT_S15Z56jb3Z6VAorwQ@mail.gmail.com>
References: <CAL0fb61HrL8xe0yNG8_H0cEmVizzhg1pRe67aJmUPbGmLabYcA@mail.gmail.com>
	<CAJNQ0svrwJF02sssMwLeN8gjc+h2-F8Bo3iOrwWJUM8NtWknFg@mail.gmail.com>
	<CAL0fb62M9=vKM4kag9rdQ=1bAbKdnoXD+7XR3eyKWY_Q4WEZXA@mail.gmail.com>
	<CAJNQ0svPNAZSRBm+O88p4Spw6MmQinuT_S15Z56jb3Z6VAorwQ@mail.gmail.com>
Message-ID: <CABsx9T1if+e+dGFhENppQTS=p0r5cFtXkJe4vxGcG1ikUAch3g@mail.gmail.com>

On Sun, Sep 11, 2011 at 5:54 AM, John Smith <witchspace81 at gmail.com> wrote:
> However I will only put up a pull request as
> soon as it is clear that it will actually be integrated. It is too much work
> for me to keep the pull request up-to-date if it lingers for months like
> many others have.

I haven't heard any objections to pulling it as soon as 0.4 is
officially released, a pull request is ready, and a couple of people
have a chance to read over the differences and ACKnowledge that
nothing sinister snuck in somewhere.

-- 
--
Gavin Andresen



From mike at plan99.net  Tue Sep 13 12:53:25 2011
From: mike at plan99.net (Mike Hearn)
Date: Tue, 13 Sep 2011 14:53:25 +0200
Subject: [Bitcoin-development] Network status charts
Message-ID: <CANEZrP1QqfYYPJqr=ZZhs0g+xi3wQg_baYG91E+heui_-TZa-g@mail.gmail.com>

These are now formally announced:

https://bitcointalk.org/index.php?topic=43626.0
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110913/300d988a/attachment.html>

From gavinandresen at gmail.com  Tue Sep 13 14:43:27 2011
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Tue, 13 Sep 2011 10:43:27 -0400
Subject: [Bitcoin-development] Project status
Message-ID: <CABsx9T1SeEFkZkTfB_3Cy=iSms_2burxAo4bRdO-YJwHY7B8Ow@mail.gmail.com>

0.4 RELEASE

Bitcoin version 0.4 release candidate 2 looks stable; I've been
running a slightly-modified version of it on the Faucet website with
no issues for a couple of days now, and am not aware of any
show-stopper issues.

I built and uploaded OSX binaries to github:
  https://github.com/bitcoin/bitcoin/downloads

Windows and Linux binaries will appear as soon as our "gitian-capable"
builders get a minute to create them (Jeff and Matt have been busy
with real life or their day jobs).

I'd like to switch from distributing binaries on SourceForge to
distributing them on GitHub, since GitHub supports https downloads.


NEXT RELEASE

If you have patches waiting to be pulled, now would be a good time to
rebase them; I expect minimal-to-no changes between release candidate
2 and the final 0.4 release.

And, if you haven't already, write up a little test plan and/or add
some unit tests.

The big planned feature for next release is switching from wxWidgets
to qt for the GUI client.

ON THE RADAR

I'm going to start separate discussions about a few need-deep-thinking issues:

1) There is a bug/design flaw in bitcoin's difficulty adjustment
algorithm. More generally, there have been nagging issues surrounding
how bitcoin handles time that I think need to be addressed.

2) I'm going to submit pull requests for an implementation of the
"don't talk to misbehaving peers" idea. That should proactively
prevent a whole swath of potential denial-of-service attacks, but if I
got it wrong it could be very bad for the network.

3) I'd really like to come to consensus on one or more
'multi-signature' standard transactions to enable much better wallet
backup and security.

Lets talk about those three issues in separate threads.

-- 
--
Gavin Andresen



From gavinandresen at gmail.com  Tue Sep 13 15:06:37 2011
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Tue, 13 Sep 2011 11:06:37 -0400
Subject: [Bitcoin-development] Difficulty adjustment / time issues
Message-ID: <CABsx9T2XLj4gZVPYodteaVCm0chR1n4WLUoSqB6+NnmWCDqHKQ@mail.gmail.com>

Background:

Timejacking:
  http://culubas.blogspot.com/2011/05/timejacking-bitcoin_802.html

And a recent related exploit launched against the low-difficulty
alternative chains:
  https://bitcointalk.org/index.php?topic=43692.msg521772#msg521772


Seems to me there are two fundamental problems:

1) Bitcoin should be overlapping the ranges of block timestamps that
it uses to calculate difficulty adjustments.

2) Bitcoin's "what time is it" code is kind of a hack.


Fixing (1) would mean a potential block-chain split; before
considering doing that I'd like to consider second-best solutions.

Fixing (2) is easier; incorporating a ntp library and/or simply
removing the bitcoin mining code from the client but requiring pools
and miners to have accurate-to-within-a-minute system clocks (or their
blocks will be "discouraged") seems reasonable to me. If you want to
produce blocks that the rest of the network will accept, run ntp on
your system.

I THINK that fixing (2) will make (1) a non-issue-- if miners can't
mess around with block times very much then it will be very difficult
for them to manipulate the difficulty for their benefit.

-- 
--
Gavin Andresen



From vladimir at marchenko.co.uk  Tue Sep 13 15:15:28 2011
From: vladimir at marchenko.co.uk (Vladimir Marchenko)
Date: Tue, 13 Sep 2011 16:15:28 +0100
Subject: [Bitcoin-development] Difficulty adjustment / time issues
In-Reply-To: <CABsx9T2XLj4gZVPYodteaVCm0chR1n4WLUoSqB6+NnmWCDqHKQ@mail.gmail.com>
References: <CABsx9T2XLj4gZVPYodteaVCm0chR1n4WLUoSqB6+NnmWCDqHKQ@mail.gmail.com>
Message-ID: <CACv5nHK1t-R1Ug0Je7W+t2JM8Z=Nc6Mq+K0jjyi0bGVJjaR-jA@mail.gmail.com>

> 2) Bitcoin's "what time is it" code is kind of a hack.
...
> Fixing (2) is easier; incorporating a ntp library and/or simply
> removing the bitcoin mining code from the client but requiring pools
> and miners to have accurate-to-within-a-minute system clocks (or their
> blocks will be "discouraged") seems reasonable to me. If you want to
> produce blocks that the rest of the network will accept, run ntp on
> your system.
...
> --
> Gavin Andresen
>

As a miner I fully support route (2) and do not think that this would
cause any serious issues or discontent among miners. Most miners
surely are running ntpd already. Those who mess with the clock
intentionally will have to play ball.

--
Vladimir
-
http://bitcoin.org.uk/forums - clean and moderated bitcoin forum



From witchspace81 at gmail.com  Tue Sep 13 15:54:04 2011
From: witchspace81 at gmail.com (John Smith)
Date: Tue, 13 Sep 2011 15:54:04 +0000
Subject: [Bitcoin-development] Difficulty adjustment / time issues
In-Reply-To: <CABsx9T2XLj4gZVPYodteaVCm0chR1n4WLUoSqB6+NnmWCDqHKQ@mail.gmail.com>
References: <CABsx9T2XLj4gZVPYodteaVCm0chR1n4WLUoSqB6+NnmWCDqHKQ@mail.gmail.com>
Message-ID: <CAJNQ0svCL-0m_xxDWLtfE=LSWJyZ_xR0VABGBaBhDEWKzvZxnQ@mail.gmail.com>

> Fixing (2) is easier; incorporating a ntp library and/or simply
> removing the bitcoin mining code from the client but requiring pools
> and miners to have accurate-to-within-a-minute system clocks (or their
> blocks will be "discouraged") seems reasonable to me.


Incorporating NTP seems overkill. Most OSes come with NTP support integrated
these days (even XP did?), there is no excuse to not be running it,
especially on a server.

If you want to
> produce blocks that the rest of the network will accept, run ntp on
> your system.
>

Requiring it for miners sounds very reasonable.

JS
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110913/1fa29c73/attachment.html>

From kjj at jerviss.org  Tue Sep 13 16:24:35 2011
From: kjj at jerviss.org (kjj)
Date: Tue, 13 Sep 2011 11:24:35 -0500
Subject: [Bitcoin-development] Difficulty adjustment / time issues
In-Reply-To: <CABsx9T2XLj4gZVPYodteaVCm0chR1n4WLUoSqB6+NnmWCDqHKQ@mail.gmail.com>
References: <CABsx9T2XLj4gZVPYodteaVCm0chR1n4WLUoSqB6+NnmWCDqHKQ@mail.gmail.com>
Message-ID: <4E6F83C3.9020108@jerviss.org>

Gavin Andresen wrote:
> Background:
>
> Timejacking:
>    http://culubas.blogspot.com/2011/05/timejacking-bitcoin_802.html
>
> And a recent related exploit launched against the low-difficulty
> alternative chains:
>    https://bitcointalk.org/index.php?topic=43692.msg521772#msg521772
>
>
> Seems to me there are two fundamental problems:
>
> 1) Bitcoin should be overlapping the ranges of block timestamps that
> it uses to calculate difficulty adjustments.
>
> 2) Bitcoin's "what time is it" code is kind of a hack.
>
>
> Fixing (1) would mean a potential block-chain split; before
> considering doing that I'd like to consider second-best solutions.
>
> Fixing (2) is easier; incorporating a ntp library and/or simply
> removing the bitcoin mining code from the client but requiring pools
> and miners to have accurate-to-within-a-minute system clocks (or their
> blocks will be "discouraged") seems reasonable to me. If you want to
> produce blocks that the rest of the network will accept, run ntp on
> your system.
>
> I THINK that fixing (2) will make (1) a non-issue-- if miners can't
> mess around with block times very much then it will be very difficult
> for them to manipulate the difficulty for their benefit.
>
The first thing I always do when I grab the source for my colo server is 
patch util.cpp so that GetAdjustedTime() returns GetTime() with no 
adjustment.  But I'm the kind of guy that buys special GPS receivers 
because stratum 2 isn't low enough and occasionally checks ebay for 
caesium fountains.

NTP has been around for long enough now that there is no reason for the 
client to screw with the clock.  If the client sees different times on 
the network, it should issue a warning, and if it is off too far, it 
should give an error and fail to run (and/or peers should reject it).

But that doesn't solve the whole problem, because the block timestamp 
checking is based on the assumption that the node is looking at the 
bitcoin clock rather than the, ahem, real clock.  If we change the idea 
of network time to NTP, we will then need to write (and test!) new block 
timestamp rules to account for the new assumptions.

I'm not sure that just fixing item 2 is going to stop the attacks found 
by ArtForz, et al.  Some of the attacks Art pointed out are particularly 
bad because they change the incentive structure of the system, at least 
in the short term.  We need to flip that back around ASAP.

Also, this is going to cause problems for at least one pool operator.



From luke at dashjr.org  Tue Sep 13 16:40:23 2011
From: luke at dashjr.org (Luke-Jr)
Date: Tue, 13 Sep 2011 12:40:23 -0400
Subject: [Bitcoin-development] Project status
In-Reply-To: <CABsx9T1SeEFkZkTfB_3Cy=iSms_2burxAo4bRdO-YJwHY7B8Ow@mail.gmail.com>
References: <CABsx9T1SeEFkZkTfB_3Cy=iSms_2burxAo4bRdO-YJwHY7B8Ow@mail.gmail.com>
Message-ID: <201109131240.26029.luke@dashjr.org>

On Tuesday, September 13, 2011 10:43:27 AM Gavin Andresen wrote:
> 3) I'd really like to come to consensus on one or more
> 'multi-signature' standard transactions to enable much better wallet
> backup and security.

More important in this area, IMO, is support for deterministic keychains in 
wallets. Type 2, according to gmaxwell's original spec, seems pretty ideal, 
and significantly improves security for many use cases. Since it allows a 
wallet to contain a public keychain without the matching private keychain, 
webservers, POS, and other services can be provisioned only with the keychain 
required to generate/access infinite public keys, and without the private 
keyroot needed to spend them.

The ideal scenario in this regard, as I see it, is this:
- Webserver wallets are provisioned with multiple public keychains (one per 
webserver), and configured to use a specific one for getnewaddress/etc. By 
provisioning them with *all* the public keychains, their listtransactions/etc 
can see the transactions sent to other webservers, necessary to show 
confirmations to the end user and such.
- Business keeps a locked-down *offline* wallet with the private keychains for 
all the forementioned public keychains. Only this wallet has the information 
required to spend the income. The wallet is encrypted, and can only be 
accessed by staff with the proper position/authority to authorize expenses.
- A third wallet is used by staff to prepare expense transactions. It keeps 
track of locking coins it knows are in the process of being spent, and any 
staff member can create new ones. Once created, they must submit the 
transaction to a staff member with the proper authority to bring it to the 
offline transaction-signing wallet (on a USB key), where it is signed, and 
returned to this third wallet.


Another feature that needs some attention is signmessage. It can be used to 
send a transaction id/summary to a specified email address signed by the 
sending key of the same transaction (these can be added to the send-money 
GUI). This would allow merchants to publish a single payment address and still 
be able to verify which customers sent payment.



From luke at dashjr.org  Tue Sep 13 16:48:29 2011
From: luke at dashjr.org (Luke-Jr)
Date: Tue, 13 Sep 2011 12:48:29 -0400
Subject: [Bitcoin-development] Difficulty adjustment / time issues
In-Reply-To: <CABsx9T2XLj4gZVPYodteaVCm0chR1n4WLUoSqB6+NnmWCDqHKQ@mail.gmail.com>
References: <CABsx9T2XLj4gZVPYodteaVCm0chR1n4WLUoSqB6+NnmWCDqHKQ@mail.gmail.com>
Message-ID: <201109131248.32502.luke@dashjr.org>

On Tuesday, September 13, 2011 11:06:37 AM Gavin Andresen wrote:
> Fixing (2) is easier; incorporating a ntp library and/or simply
> removing the bitcoin mining code from the client but requiring pools
> and miners to have accurate-to-within-a-minute system clocks (or their
> blocks will be "discouraged") seems reasonable to me. If you want to
> produce blocks that the rest of the network will accept, run ntp on
> your system.

This is not currently reasonable. Rolling extranonce is not efficient, and 
using it to generate work for 400+ GH/s worth of miners every new block 
(longpoll) can easily take seconds. Noncerange helps a little, but has poor 
support presently, and still requires an otherwise-unique work per 4 GH/s.
That only leaves pools with the time header to play with. Furthermore, within-
a-minute accuracy basically forces all miners to rollntime-- I'm not against 
this result, but it does mean many miners and pools will be left out in the 
cold.

> I THINK that fixing (2) will make (1) a non-issue-- if miners can't
> mess around with block times very much then it will be very difficult
> for them to manipulate the difficulty for their benefit.

Miners already have very limited area to mess around with block times.
My understanding of these attacks is that they somehow bypass the limitations 
in place.



From luke at dashjr.org  Tue Sep 13 16:53:40 2011
From: luke at dashjr.org (Luke-Jr)
Date: Tue, 13 Sep 2011 12:53:40 -0400
Subject: [Bitcoin-development] Project status
In-Reply-To: <CAPiTikUNHwVGi2bc8HrPi42E=9MpA4QvJv5dDFJGKFrAJWwW=w@mail.gmail.com>
References: <CABsx9T1SeEFkZkTfB_3Cy=iSms_2burxAo4bRdO-YJwHY7B8Ow@mail.gmail.com>
	<201109131240.26029.luke@dashjr.org>
	<CAPiTikUNHwVGi2bc8HrPi42E=9MpA4QvJv5dDFJGKFrAJWwW=w@mail.gmail.com>
Message-ID: <201109131253.43617.luke@dashjr.org>

On Tuesday, September 13, 2011 12:48:58 PM Douglas Huff wrote:
> On Sep 13, 2011 11:40 AM, "Luke-Jr" <luke at dashjr.org> wrote:
> > Once created, they must submit the
> > transaction to a staff member with the proper authority to bring it to
> > the offline transaction-signing wallet (on a USB key), where it is
> > signed, and returned to this third wallet.
> 
> I agreed up to this point. Private keys should not be stored on nand.
> Please look in to the data recovery clusterfuck nand creates when
> concerning sensitive data.

I didn't recommend storing private keys on NAND. The USB stick would contain 
only the transaction that it being approved, and the offline-signing-wallet 
would sign it. The USB stick then contains only the signed transaction to be 
returned to an online node. At no time does it contain keys.



From dhuff at jrbobdobbs.org  Tue Sep 13 16:48:58 2011
From: dhuff at jrbobdobbs.org (Douglas Huff)
Date: Tue, 13 Sep 2011 11:48:58 -0500
Subject: [Bitcoin-development] Project status
In-Reply-To: <201109131240.26029.luke@dashjr.org>
References: <CABsx9T1SeEFkZkTfB_3Cy=iSms_2burxAo4bRdO-YJwHY7B8Ow@mail.gmail.com>
	<201109131240.26029.luke@dashjr.org>
Message-ID: <CAPiTikUNHwVGi2bc8HrPi42E=9MpA4QvJv5dDFJGKFrAJWwW=w@mail.gmail.com>

On Sep 13, 2011 11:40 AM, "Luke-Jr" <luke at dashjr.org> wrote:
> Once created, they must submit the
> transaction to a staff member with the proper authority to bring it to the
> offline transaction-signing wallet (on a USB key), where it is signed, and
> returned to this third wallet.

I agreed up to this point. Private keys should not be stored on nand. Please
look in to the data recovery clusterfuck nand creates when concerning
sensitive data.

It is close to impossible to reliably delete such data, moreso on usb keys
than ssd, short of absolute physical destruction and noone should be
recommending this. Ever.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110913/b0a35ffa/attachment.html>

From gavinandresen at gmail.com  Wed Sep 14 14:45:36 2011
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Wed, 14 Sep 2011 10:45:36 -0400
Subject: [Bitcoin-development] Difficulty adjustment / time issues
In-Reply-To: <4E6F83C3.9020108@jerviss.org>
References: <CABsx9T2XLj4gZVPYodteaVCm0chR1n4WLUoSqB6+NnmWCDqHKQ@mail.gmail.com>
	<4E6F83C3.9020108@jerviss.org>
Message-ID: <CABsx9T0JvnOaBy+irHtnN1zMWP8FiDTn=kn-01ky+V2MW1suTg@mail.gmail.com>

> But that doesn't solve the whole problem, because the block timestamp
> checking is based on the assumption that the node is looking at the bitcoin
> clock rather than the, ahem, real clock. ?If we change the idea of network
> time to NTP, we will then need to write (and test!) new block timestamp
> rules to account for the new assumptions.

Why?

The block timestamp rules currently give HOURS of wiggle-room for
timestamps. We can't change those rules without risking a chain split.

Here's a thumbnail sketch of what I'm thinking:

When new tip-of-chain blocks are received, IF their timestamp is
unreasonable with respect to system time and the previous block's
timestamp, then add them to a 'discouraged' list.  (but follow the
current rules for outright rejecting blocks based on timestamps too
far in the future or past)

Modify the getwork code to build on the second-from-tip block if the
first-on-tip block is on the discouraged list.

Assuming a majority of pools/miners adopt the "discourage blocks with
stale timestamps" rule, that should squash any incentive for cartels
to try to start playing with difficulty-- you would have to have 50+%
power to start, or you risk producing mostly orphan blocks.

> Also, this is going to cause problems for at least one pool operator.

I'll trade more security for "make at least one pool operator have to
do some work" any day.

-- 
--
Gavin Andresen



From luke at dashjr.org  Wed Sep 14 15:43:20 2011
From: luke at dashjr.org (Luke-Jr)
Date: Wed, 14 Sep 2011 11:43:20 -0400
Subject: [Bitcoin-development] Difficulty adjustment / time issues
In-Reply-To: <CABsx9T0JvnOaBy+irHtnN1zMWP8FiDTn=kn-01ky+V2MW1suTg@mail.gmail.com>
References: <CABsx9T2XLj4gZVPYodteaVCm0chR1n4WLUoSqB6+NnmWCDqHKQ@mail.gmail.com>
	<4E6F83C3.9020108@jerviss.org>
	<CABsx9T0JvnOaBy+irHtnN1zMWP8FiDTn=kn-01ky+V2MW1suTg@mail.gmail.com>
Message-ID: <201109141143.24165.luke@dashjr.org>

On Wednesday, September 14, 2011 10:45:36 AM Gavin Andresen wrote:
> The block timestamp rules currently give HOURS of wiggle-room for
> timestamps. We can't change those rules without risking a chain split.

And those hours of wiggle-room are not enough to cause a problem.
The problem only comes in (AFAIK) when the existing rules are *not* enforced.

> Assuming a majority of pools/miners adopt the "discourage blocks with
> stale timestamps" rule, that should squash any incentive for cartels
> to try to start playing with difficulty-- you would have to have 50+%
> power to start, or you risk producing mostly orphan blocks.

As this is against pools/miners' interests, and doesn't seem to solve any real 
problems, I'm going to discourage its adoption if it ever gets done.



From decker.christian at gmail.com  Wed Sep 14 16:06:08 2011
From: decker.christian at gmail.com (Christian Decker)
Date: Wed, 14 Sep 2011 18:06:08 +0200
Subject: [Bitcoin-development] Difficulty adjustment / time issues
In-Reply-To: <201109141143.24165.luke@dashjr.org>
References: <CABsx9T2XLj4gZVPYodteaVCm0chR1n4WLUoSqB6+NnmWCDqHKQ@mail.gmail.com>
	<4E6F83C3.9020108@jerviss.org>
	<CABsx9T0JvnOaBy+irHtnN1zMWP8FiDTn=kn-01ky+V2MW1suTg@mail.gmail.com>
	<201109141143.24165.luke@dashjr.org>
Message-ID: <CALxbBHXnyioJzn=q5KD2fXeu3_JU+rUx5_pACppg7hP41xOwvg@mail.gmail.com>

Am I the only one to think putting pools at a disadvantage is actually
desirable?
Back when pools started to appear we all had huge reservations about putting
so much control into the hands of a few pool operators, but nowadays it
seems that having pool operators control a vast majority of the
computational power is desired.
I do like pools (I use them myself), but we should put the security of the
protocol in first place and then only think about individual players.
Always remember that the problems pool operators encounter are likely also
the ones of a potential attacker that tries to accumulate 50%+ of the
network power :-)

Regards,
Chris
On Wed, Sep 14, 2011 at 5:43 PM, Luke-Jr <luke at dashjr.org> wrote:

> On Wednesday, September 14, 2011 10:45:36 AM Gavin Andresen wrote:
> > The block timestamp rules currently give HOURS of wiggle-room for
> > timestamps. We can't change those rules without risking a chain split.
>
> And those hours of wiggle-room are not enough to cause a problem.
> The problem only comes in (AFAIK) when the existing rules are *not*
> enforced.
>
> > Assuming a majority of pools/miners adopt the "discourage blocks with
> > stale timestamps" rule, that should squash any incentive for cartels
> > to try to start playing with difficulty-- you would have to have 50+%
> > power to start, or you risk producing mostly orphan blocks.
>
> As this is against pools/miners' interests, and doesn't seem to solve any
> real
> problems, I'm going to discourage its adoption if it ever gets done.
>
>
> ------------------------------------------------------------------------------
> BlackBerry&reg; DevCon Americas, Oct. 18-20, San Francisco, CA
> Learn about the latest advances in developing for the
> BlackBerry&reg; mobile platform with sessions, labs & more.
> See new tools and technologies. Register for BlackBerry&reg; DevCon today!
> http://p.sf.net/sfu/rim-devcon-copy1
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110914/7cbfb95f/attachment.html>

From makosoft at gmail.com  Wed Sep 14 19:52:49 2011
From: makosoft at gmail.com (Aidan Thornton)
Date: Wed, 14 Sep 2011 20:52:49 +0100
Subject: [Bitcoin-development] Difficulty adjustment / time issues
In-Reply-To: <CABsx9T0JvnOaBy+irHtnN1zMWP8FiDTn=kn-01ky+V2MW1suTg@mail.gmail.com>
References: <CABsx9T2XLj4gZVPYodteaVCm0chR1n4WLUoSqB6+NnmWCDqHKQ@mail.gmail.com>
	<4E6F83C3.9020108@jerviss.org>
	<CABsx9T0JvnOaBy+irHtnN1zMWP8FiDTn=kn-01ky+V2MW1suTg@mail.gmail.com>
Message-ID: <CAB=c7TpFE_28BNpkW27kKK41w8QdaMKJ96=6H=xqonVDdTWUkA@mail.gmail.com>

On Wed, Sep 14, 2011 at 3:45 PM, Gavin Andresen <gavinandresen at gmail.com> wrote:
> Modify the getwork code to build on the second-from-tip block if the
> first-on-tip block is on the discouraged list.
>
> Assuming a majority of pools/miners adopt the "discourage blocks with
> stale timestamps" rule, that should squash any incentive for cartels
> to try to start playing with difficulty-- you would have to have 50+%
> power to start, or you risk producing mostly orphan blocks.
Of course, if only a small percentage of mining power adopts this
scheme, everyone that does so will presumably be harming themselves by
doing so since they're essentially increasing the odds that the next
block they mine will become invalid...



From gmaxwell at gmail.com  Wed Sep 14 20:09:00 2011
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Wed, 14 Sep 2011 16:09:00 -0400
Subject: [Bitcoin-development] Difficulty adjustment / time issues
In-Reply-To: <CAB=c7TpFE_28BNpkW27kKK41w8QdaMKJ96=6H=xqonVDdTWUkA@mail.gmail.com>
References: <CABsx9T2XLj4gZVPYodteaVCm0chR1n4WLUoSqB6+NnmWCDqHKQ@mail.gmail.com>
	<4E6F83C3.9020108@jerviss.org>
	<CABsx9T0JvnOaBy+irHtnN1zMWP8FiDTn=kn-01ky+V2MW1suTg@mail.gmail.com>
	<CAB=c7TpFE_28BNpkW27kKK41w8QdaMKJ96=6H=xqonVDdTWUkA@mail.gmail.com>
Message-ID: <CAAS2fgQOuNKWD09arSzqKxYFRv95q4xyq0Wz4ZkeKdKSWJ-=kA@mail.gmail.com>

On Wed, Sep 14, 2011 at 3:52 PM, Aidan Thornton <makosoft at gmail.com> wrote:
> Of course, if only a small percentage of mining power adopts this
> scheme, everyone that does so will presumably be harming themselves by
> doing so since they're essentially increasing the odds that the next
> block they mine will become invalid...

Perhaps better thing to do is to also delay the _forwarding_ of these
blocks _and_ blocks that extend them, until extended one more time.

This policy, if adopted by the forwarding nodes (who really shouldn't
care for much other than the overall health of bitcoins) puts miners
at risk if they don't run the augmented extension policy.


Though I generally agree with Luke that we should just fix the root
cause even though it forks the chain. Not for his reasons (I don't
give a crap about the burden on _one_ pool operator? the rest cope
with bitcoind scaling fine without excessive dependance on ntime
rolling),  but simply because not fixing it makes the bitcoin security
model harder to explain and analyze.

"Here is a vulnerability, but its offset by this workaround" is
inferior to "the system is secure against this kind of attack".



From gavinandresen at gmail.com  Wed Sep 14 20:28:01 2011
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Wed, 14 Sep 2011 16:28:01 -0400
Subject: [Bitcoin-development] Difficulty adjustment / time issues
In-Reply-To: <CAAS2fgQOuNKWD09arSzqKxYFRv95q4xyq0Wz4ZkeKdKSWJ-=kA@mail.gmail.com>
References: <CABsx9T2XLj4gZVPYodteaVCm0chR1n4WLUoSqB6+NnmWCDqHKQ@mail.gmail.com>
	<4E6F83C3.9020108@jerviss.org>
	<CABsx9T0JvnOaBy+irHtnN1zMWP8FiDTn=kn-01ky+V2MW1suTg@mail.gmail.com>
	<CAB=c7TpFE_28BNpkW27kKK41w8QdaMKJ96=6H=xqonVDdTWUkA@mail.gmail.com>
	<CAAS2fgQOuNKWD09arSzqKxYFRv95q4xyq0Wz4ZkeKdKSWJ-=kA@mail.gmail.com>
Message-ID: <CABsx9T2Ot2iErtr48X_QmcZFQOXGH_jWNPrG=Ck6uQXhVXS=QA@mail.gmail.com>

> Perhaps better thing to do is to also delay the _forwarding_ of these
> blocks _and_ blocks that extend them, until extended one more time.

Excellent idea, that gets the incentives right.

RE: fixing the root cause with a forking change:

What do other people think?  I think it is too high risk for too
little benefit and shouldn't be done until we have a really compelling
reason to introduce a forking change.

The first really compelling reason I can think of is removing the
MAX_BLOCK_SIZE limit (but does something clever to prevent the
rogue-miner-sends-you-a-valid-10Terabyte-block attack).

-- 
--
Gavin Andresen



From ampedal at gmail.com  Wed Sep 14 21:36:03 2011
From: ampedal at gmail.com (Alex Waters)
Date: Wed, 14 Sep 2011 17:36:03 -0400
Subject: [Bitcoin-development] Difficulty adjustment / time issues
In-Reply-To: <CABsx9T2Ot2iErtr48X_QmcZFQOXGH_jWNPrG=Ck6uQXhVXS=QA@mail.gmail.com>
References: <CABsx9T2XLj4gZVPYodteaVCm0chR1n4WLUoSqB6+NnmWCDqHKQ@mail.gmail.com>
	<4E6F83C3.9020108@jerviss.org>
	<CABsx9T0JvnOaBy+irHtnN1zMWP8FiDTn=kn-01ky+V2MW1suTg@mail.gmail.com>
	<CAB=c7TpFE_28BNpkW27kKK41w8QdaMKJ96=6H=xqonVDdTWUkA@mail.gmail.com>
	<CAAS2fgQOuNKWD09arSzqKxYFRv95q4xyq0Wz4ZkeKdKSWJ-=kA@mail.gmail.com>
	<CABsx9T2Ot2iErtr48X_QmcZFQOXGH_jWNPrG=Ck6uQXhVXS=QA@mail.gmail.com>
Message-ID: <CAL0fb62X5-yZQbVMd6zeS590jbaa1nKRH-wYWkKXRHxCtuy=kQ@mail.gmail.com>

On Wed, Sep 14, 2011 at 4:28 PM, Gavin Andresen <gavinandresen at gmail.com> wrote:

> What do other people think? ?I think it is too high risk for too
> little benefit and shouldn't be done until we have a really compelling
> reason to introduce a forking change.

Could we bundle this and potential future blockchain-splitting changes
- to implement them in a major release (down the road)? Or save them
for when they are very necessary?

TL;DR shelf it until needed, have it written just in case.

-Alex



From theymos at mm.st  Wed Sep 14 21:45:33 2011
From: theymos at mm.st (theymos)
Date: Wed, 14 Sep 2011 16:45:33 -0500
Subject: [Bitcoin-development] Difficulty adjustment / time issues
In-Reply-To: <CABsx9T2XLj4gZVPYodteaVCm0chR1n4WLUoSqB6+NnmWCDqHKQ@mail.gmail.com>
References: <CABsx9T2XLj4gZVPYodteaVCm0chR1n4WLUoSqB6+NnmWCDqHKQ@mail.gmail.com>
Message-ID: <1316036733.29037.140258141218893@webmail.messagingengine.com>

A better retarget strategy might be to use the real average time
between all of the blocks in the interval so that no blocks are
treated specially in the calculation. I agree that this is not
important enough to fork the chain over, though. An attacker would
have to maintain control for a *very* long time because of Bitcoin's
long retarget interval. (Maybe this kind of thing is why the retarget
interval is so long?)

I don't like requiring block times to be within minutes of reality. It
would be fine if only miners had to keep accurate time, but clients will
also need to have good time in order to see if a block will be
discouraged. A discouraged block should not count toward confirmations.
If relays will also discourage blocks, then they'll need accurate
time as well.

The network should not be allowed to adjust your time by more than 40
minutes to prevent the timejacking attack, but I don't see a problem
with the other time rules. Time is only used for retargets and LockTime,
so it only needs to be generally accurate.



From gmaxwell at gmail.com  Wed Sep 14 21:51:30 2011
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Wed, 14 Sep 2011 17:51:30 -0400
Subject: [Bitcoin-development] Difficulty adjustment / time issues
In-Reply-To: <CAL0fb62X5-yZQbVMd6zeS590jbaa1nKRH-wYWkKXRHxCtuy=kQ@mail.gmail.com>
References: <CABsx9T2XLj4gZVPYodteaVCm0chR1n4WLUoSqB6+NnmWCDqHKQ@mail.gmail.com>
	<4E6F83C3.9020108@jerviss.org>
	<CABsx9T0JvnOaBy+irHtnN1zMWP8FiDTn=kn-01ky+V2MW1suTg@mail.gmail.com>
	<CAB=c7TpFE_28BNpkW27kKK41w8QdaMKJ96=6H=xqonVDdTWUkA@mail.gmail.com>
	<CAAS2fgQOuNKWD09arSzqKxYFRv95q4xyq0Wz4ZkeKdKSWJ-=kA@mail.gmail.com>
	<CABsx9T2Ot2iErtr48X_QmcZFQOXGH_jWNPrG=Ck6uQXhVXS=QA@mail.gmail.com>
	<CAL0fb62X5-yZQbVMd6zeS590jbaa1nKRH-wYWkKXRHxCtuy=kQ@mail.gmail.com>
Message-ID: <CAAS2fgQJqRZ0wPak3Ub1nN6gp9Y1MgU=rgPGTZMwPZZ7Mc5JYg@mail.gmail.com>

On Wed, Sep 14, 2011 at 5:36 PM, Alex Waters <ampedal at gmail.com> wrote:
> On Wed, Sep 14, 2011 at 4:28 PM, Gavin Andresen <gavinandresen at gmail.com> wrote:
>
>> What do other people think? ?I think it is too high risk for too
>> little benefit and shouldn't be done until we have a really compelling
>> reason to introduce a forking change.
>
> Could we bundle this and potential future blockchain-splitting changes
> - to implement them in a major release (down the road)? Or save them
> for when they are very necessary?
>
> TL;DR shelf it until needed, have it written just in case.

I'm generally opposed to doing "too much" at once in this kind of change.

Some changes, like this one, are completely uncontroversial (except
some argument about having fork causing change at all) where some have
more complicated social/economic impacts (the block size being among
them, though probably not the worst).

Moreover, the longer we go between such changes the more the cost is
perceived to be infinite. Better to take one per year, with six months
of gap between implementation, and give everyone the right
expectations than to have prolonged arguments due to our inexperience
that only get trumped by emergency changes.

General network health and user security _requires_ periodic upgrades
in any case, and will for the foreseeable future. The whole notion
that old versions will _stop working_ would be a pretty good thing at
this point in bitcoin's existence, judging by the high number of
pre-.24 listeners still reported.



From theymos at mm.st  Wed Sep 14 22:07:40 2011
From: theymos at mm.st (theymos)
Date: Wed, 14 Sep 2011 17:07:40 -0500
Subject: [Bitcoin-development] Difficulty adjustment / time issues
In-Reply-To: <CAAS2fgQJqRZ0wPak3Ub1nN6gp9Y1MgU=rgPGTZMwPZZ7Mc5JYg@mail.gmail.com>
References: <CABsx9T2XLj4gZVPYodteaVCm0chR1n4WLUoSqB6+NnmWCDqHKQ@mail.gmail.com><4E6F83C3.9020108@jerviss.org><CABsx9T0JvnOaBy+irHtnN1zMWP8FiDTn=kn-01ky+V2MW1suTg@mail.gmail.com><CAB=c7TpFE_28BNpkW27kKK41w8QdaMKJ96=6H=xqonVDdTWUkA@mail.gmail.com><CAAS2fgQOuNKWD09arSzqKxYFRv95q4xyq0Wz4ZkeKdKSWJ-=kA@mail.gmail.com><CABsx9T2Ot2iErtr48X_QmcZFQOXGH_jWNPrG=Ck6uQXhVXS=QA@mail.gmail.com><CAL0fb62X5-yZQbVMd6zeS590jbaa1nKRH-wYWkKXRHxCtuy=kQ@mail.gmail.com>
	<CAAS2fgQJqRZ0wPak3Ub1nN6gp9Y1MgU=rgPGTZMwPZZ7Mc5JYg@mail.gmail.com>
Message-ID: <1316038060.2261.140258141234677@webmail.messagingengine.com>

On Wednesday, September 14, 2011 5:51 PM, "Gregory Maxwell" <gmaxwell at gmail.com> wrote:
> General network health and user security _requires_ periodic upgrades
> in any case, and will for the foreseeable future. The whole notion
> that old versions will _stop working_ would be a pretty good thing at
> this point in bitcoin's existence, judging by the high number of pre-
> .24 listeners still reported.

Backward-compatibility is valuable. I believe version 0.1 will still
more or less work on the current network. This is a real selling point
for Bitcoin: the code is solid enough that even 2-year-old clients are
still working.



From luke at dashjr.org  Wed Sep 14 23:01:54 2011
From: luke at dashjr.org (Luke-Jr)
Date: Wed, 14 Sep 2011 19:01:54 -0400
Subject: [Bitcoin-development] Difficulty adjustment / time issues
In-Reply-To: <CAAS2fgQOuNKWD09arSzqKxYFRv95q4xyq0Wz4ZkeKdKSWJ-=kA@mail.gmail.com>
References: <CABsx9T2XLj4gZVPYodteaVCm0chR1n4WLUoSqB6+NnmWCDqHKQ@mail.gmail.com>
	<CAB=c7TpFE_28BNpkW27kKK41w8QdaMKJ96=6H=xqonVDdTWUkA@mail.gmail.com>
	<CAAS2fgQOuNKWD09arSzqKxYFRv95q4xyq0Wz4ZkeKdKSWJ-=kA@mail.gmail.com>
Message-ID: <201109141901.57286.luke@dashjr.org>

On Wednesday, September 14, 2011 4:09:00 PM Gregory Maxwell wrote:
> Though I generally agree with Luke that we should just fix the root
> cause even though it forks the chain.

I don't support this, unless all other chain-forking-needed changes are made 
at the same time. I do point out that changing the time rules *does not help*.

> Not for his reasons (I don't give a crap about the burden on _one_ pool
> operator? the rest cope with bitcoind scaling fine without excessive
> dependance on ntime rolling),

The rest don't generate rewards immediately as the same block being mined. 
They either eat the loss of invalid blocks, or wait for 100+ confirmations 
before paying. Also, restricting the time rules basically breaks miners 
without rollntime support (such as Phoenix).



From gavinandresen at gmail.com  Thu Sep 15 01:57:00 2011
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Wed, 14 Sep 2011 21:57:00 -0400
Subject: [Bitcoin-development] Request review: drop misbehaving peers
Message-ID: <CABsx9T2MKTYCeOqERXKBMYEqNEK4eo9jGt81gZE1=Fv=s3wEqA@mail.gmail.com>

I'm looking for review of this pull request:
  https://github.com/bitcoin/bitcoin/pull/517

The big idea: if a peer is sending you obviously wrong information,
punish it by maybe dropping your connection to it, and ban it's IP
address so it cannot immediately re-connect.

The probability of dropping the connection, and the length of the ban,
depend on how how potentially wasteful/damaging the peer is behaving.
So sending an extra 'version' message is a minor transgression that is
usually tolerated, sending a more-than MAX_BLOCK_SIZE block is a major
transgression that gets the peer disconnected immediately.

Detailed how-it-works, using "I got a version message I wasn't
expecting" as the specific example:

Getting an unexpected version message from a peer increases that
peer's 'misbehaving' score by 10, and (assuming that is the peer's
first bad behavior) gives it a 10% chance of being disconnected.  If
it is disconnected, then that peer's IP address is banned from
connecting for a couple of hours.  If it is not disconnected, then
nothing happens unless the peer misbehaves again; if it does, then its
chances of being disconnected go up, and the length of time it will be
banned increases.

Misbehavior/ban information is stored only in memory, and information
about misbehaving peers is never broadcast. Also, peers that are
disconnected/banned are just dropped, there is no warning or reason
sent.

I think this will eliminate a lot of potential denial-of-service
attacks, and could be a good framework for responding to other
potential attacks. "We" should still look through the code and limit
the potential size of any data structures that an attacker might
target (transaction pool, orphan block pool); the DoSprevention
changes are meant to make it harder for an attacker to stay connected
long enough to pull off an attack.

The danger is that I got something wrong; what if an attacker can
leverage the DoSprevention code to split or shatter the network?
Here's my thinking on that, please help check my work:

+ I'm relying on TCP to prevent IP address spoofing (otherwise an
attacker could force you to disconnect from your peers by pretending
to be them and sending you a bad block).

+ Peers are only penalized for sending messages that won't, and
shouldn't, get relayed. So an attacker shouldn't be able to poison the
network with a bad message that is propogated and then causes
everybody to disconnect from everybody else.

+ I specifically do not punish peers for relaying what look like
double-spend transactions. If I did, then an attacker could try to
segment the network into two pieces by broadcasting a series of
double-spends from two halves of the network, and waiting until the
nodes "in the middle" disconnected/banned across the 'seam'.

So: please let me know if or how I'm being an idiot.

-- 
--
Gavin Andresen



From luke at dashjr.org  Thu Sep 15 02:06:37 2011
From: luke at dashjr.org (Luke-Jr)
Date: Wed, 14 Sep 2011 22:06:37 -0400
Subject: [Bitcoin-development] Request review: drop misbehaving peers
In-Reply-To: <CABsx9T2MKTYCeOqERXKBMYEqNEK4eo9jGt81gZE1=Fv=s3wEqA@mail.gmail.com>
References: <CABsx9T2MKTYCeOqERXKBMYEqNEK4eo9jGt81gZE1=Fv=s3wEqA@mail.gmail.com>
Message-ID: <201109142206.40455.luke@dashjr.org>

On Wednesday, September 14, 2011 9:57:00 PM Gavin Andresen wrote:
> I'm looking for review of this pull request:
>   https://github.com/bitcoin/bitcoin/pull/517

"Non-standard" transactions, or those with "insufficient" fees should not be 
penalised. These are properly relay/miner policy decisions, not protocol 
violations, and should be made more easily configurable, not punished for 
configuration.




From decker.christian at gmail.com  Thu Sep 15 10:43:20 2011
From: decker.christian at gmail.com (Christian Decker)
Date: Thu, 15 Sep 2011 12:43:20 +0200
Subject: [Bitcoin-development] Request review: drop misbehaving peers
In-Reply-To: <201109142206.40455.luke@dashjr.org>
References: <CABsx9T2MKTYCeOqERXKBMYEqNEK4eo9jGt81gZE1=Fv=s3wEqA@mail.gmail.com>
	<201109142206.40455.luke@dashjr.org>
Message-ID: <CALxbBHXn64-JLjwaGarzf26a+80fOQHcPVK8pK8zDsS3+QFtpQ@mail.gmail.com>

I'd be happy with a sort of BitTorrent like snubbing, and dropping in
extreme cases.
Sharing blacklist decisions would be dangerous. We could even extend the
protocol to include some sort of choking/unchoking in order to warn peers
that we might drop him if he continues to misbehave.

In general I think that we have to be careful in what we consider
misbehaving, it should be really conservative to begin with, and extend the
rules over time. Making them too restrictive might make future development
difficult, not to speak of alternative clients.

Regards,
Chris

On Thu, Sep 15, 2011 at 4:06 AM, Luke-Jr <luke at dashjr.org> wrote:

> On Wednesday, September 14, 2011 9:57:00 PM Gavin Andresen wrote:
> > I'm looking for review of this pull request:
> >   https://github.com/bitcoin/bitcoin/pull/517
>
> "Non-standard" transactions, or those with "insufficient" fees should not
> be
> penalised. These are properly relay/miner policy decisions, not protocol
> violations, and should be made more easily configurable, not punished for
> configuration.
>
>
>
> ------------------------------------------------------------------------------
> Doing More with Less: The Next Generation Virtual Desktop
> What are the key obstacles that have prevented many mid-market businesses
> from deploying virtual desktops?   How do next-generation virtual desktops
> provide companies an easier-to-deploy, easier-to-manage and more affordable
> virtual desktop model.http://www.accelacomm.com/jaw/sfnl/114/51426474/
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110915/3c9778ee/attachment.html>

From mike at plan99.net  Thu Sep 15 11:45:04 2011
From: mike at plan99.net (Mike Hearn)
Date: Thu, 15 Sep 2011 13:45:04 +0200
Subject: [Bitcoin-development] Request review: drop misbehaving peers
In-Reply-To: <CABsx9T2MKTYCeOqERXKBMYEqNEK4eo9jGt81gZE1=Fv=s3wEqA@mail.gmail.com>
References: <CABsx9T2MKTYCeOqERXKBMYEqNEK4eo9jGt81gZE1=Fv=s3wEqA@mail.gmail.com>
Message-ID: <CANEZrP3FFEK0xrZqQkPyi8uoyb=XiPU7fSJDcGCLxiGH2uh3dQ@mail.gmail.com>

Probabilistic disconnections could make it quite hard to debug protocol
implementations and increases the risk of flaky behaviour in the wild
significantly. I don't see why a simpler solution isn't better.

The most likely failure mode of this is not an attack but the same as
previous breakages - scaling or legitimate version skew that causes problems
as the network evolves.

Agree with Luke that non-standard transactions should not be considered an
attack.

If you stay with the scoring system I'd be tempted to have a flag (defaults
to 100) that sets a minimum threshold for the badness scores and ignores any
below that. Attacks based on sending transactions that aren't syntactically
valid don't seem likely to me, this isn't a good way to DoS somebody because
discarding them is so cheap. If it turns out later there is a problem,
people under attack could flip the flag until a new version is released.

The formula for the DoS score in the case of invalid signatures/merkle roots
seem unnecessarily elaborate. An invalid signature should never occur and
could always result in immediate disconnection.

Treating a block with too many sigops as invalid means legitimate relayers
might be treated as an attacker if/when the constant changes in future. I'd
suggest not treating this as an attacking situation at all.

Why use a mutable field with a const setter?

Unit tests that rely on sleeps like this can be flaky because the OS delay
isn't always precise, not to mention slow/irritating to run. It's better if
tests can override the clock, eg, if GetTime() did something like

   if (nMockTime) { return nMockTime} else { ... }

then unit tests could reliably modify and advance the clock in a
fast/efficient manner.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110915/0124d72f/attachment.html>

From gavinandresen at gmail.com  Thu Sep 15 12:25:23 2011
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Thu, 15 Sep 2011 08:25:23 -0400
Subject: [Bitcoin-development] Request review: drop misbehaving peers
In-Reply-To: <CANEZrP3FFEK0xrZqQkPyi8uoyb=XiPU7fSJDcGCLxiGH2uh3dQ@mail.gmail.com>
References: <CABsx9T2MKTYCeOqERXKBMYEqNEK4eo9jGt81gZE1=Fv=s3wEqA@mail.gmail.com>
	<CANEZrP3FFEK0xrZqQkPyi8uoyb=XiPU7fSJDcGCLxiGH2uh3dQ@mail.gmail.com>
Message-ID: <CABsx9T0Eowp6_mTcggCz3tivRL0NsqyyxqingmPzZ2qkJnU9EA@mail.gmail.com>

Thanks Mike, that's exactly the kind of detailed review I was looking
for.  I think you're right an all points.

I'll simplify:  I'll add a -banscore option (default 100), and if a
node accumulates more than -banscore misbehavior points it'll get
dropped and banned for -bantime (default 60*60*24) seconds.

I'll make bad signatures a banning offense, and I'll remove the
number-of-sigops and non-standard-transaction penalties.

I used a mutable field with const setter to avoid modifying a bunch of
methods to take non-const blocks/transactions instead of const; I
think it is appropriate because a block/transaction's DoS score is
really meta-data and not part of it's state.

I'll make GetTime() unit-test friendly as you suggest.

-- 
--
Gavin Andresen



From kjj at jerviss.org  Thu Sep 15 12:56:24 2011
From: kjj at jerviss.org (kjj)
Date: Thu, 15 Sep 2011 07:56:24 -0500
Subject: [Bitcoin-development] Request review: drop misbehaving peers
In-Reply-To: <201109142206.40455.luke@dashjr.org>
References: <CABsx9T2MKTYCeOqERXKBMYEqNEK4eo9jGt81gZE1=Fv=s3wEqA@mail.gmail.com>
	<201109142206.40455.luke@dashjr.org>
Message-ID: <4E71F5F8.2020807@jerviss.org>

Luke-Jr wrote:
> On Wednesday, September 14, 2011 9:57:00 PM Gavin Andresen wrote:
>> I'm looking for review of this pull request:
>>    https://github.com/bitcoin/bitcoin/pull/517
> "Non-standard" transactions, or those with "insufficient" fees should not be
> penalised. These are properly relay/miner policy decisions, not protocol
> violations, and should be made more easily configurable, not punished for
> configuration.
>
>
A few non-standard transactions are probably legitimate.  A whole bunch 
of them are probably not.  I would think that assigning a point or two 
of badness to a peer sending one is pretty reasonable, with the 
understanding that we would need to adjust that as the network evolves.



From moon at justmoon.de  Thu Sep 15 13:00:06 2011
From: moon at justmoon.de (Stefan Thomas)
Date: Thu, 15 Sep 2011 15:00:06 +0200
Subject: [Bitcoin-development] Request review: drop misbehaving peers
In-Reply-To: <CABsx9T0Eowp6_mTcggCz3tivRL0NsqyyxqingmPzZ2qkJnU9EA@mail.gmail.com>
References: <CABsx9T2MKTYCeOqERXKBMYEqNEK4eo9jGt81gZE1=Fv=s3wEqA@mail.gmail.com>
	<CANEZrP3FFEK0xrZqQkPyi8uoyb=XiPU7fSJDcGCLxiGH2uh3dQ@mail.gmail.com>
	<CABsx9T0Eowp6_mTcggCz3tivRL0NsqyyxqingmPzZ2qkJnU9EA@mail.gmail.com>
Message-ID: <4E71F6D6.2090208@justmoon.de>

A few thoughts:

Should the DoS protection auto-disable if the node has less than a 
minimum number of connections? The idea being that if our node seems to 
be kicking /everybody /off the roster maybe there is something wrong 
with the protections.

It would be nice if the node sent a message to the banned peer with a 
code indicating the reason for the ban, specifically the offense that 
put Bitcoin over the edge. Logging the reason is probably fine for most 
cases, but I wanted to put the idea out there, because it might make 
debugging easier if there are some weird bans happening in the wild and 
we can't figure out why.

Should sending lots of messages that don't pass the protocol-level 
checksum test be a bannable offense? Or generally sending garbage data? 
The attacks I'm thinking of are cross-protocol attacks. So as rough 
example: The attacker puts an iframe on a website with a url like 
http://victim.com:8333 so lots of people's browsers connect to it. Maybe 
he could even use something like [magic-bytes]tx\0[...][valid orphan 
transaction] in the URL, so the browser would send GET /[magic-bytes] 
etc. and the Bitcoin node would interpret it.

kjj wrote:

> A few non-standard transactions are probably legitimate.  A whole bunch
> of them are probably not.  I would think that assigning a point or two
> of badness to a peer sending one is pretty reasonable, with the
> understanding that we would need to adjust that as the network evolves.

Strongly disagree. What is a non-standard transaction today may /be /a 
standard transaction tomorrow.


On 9/15/2011 2:25 PM, Gavin Andresen wrote:
> Thanks Mike, that's exactly the kind of detailed review I was looking
> for.  I think you're right an all points.
>
> I'll simplify:  I'll add a -banscore option (default 100), and if a
> node accumulates more than -banscore misbehavior points it'll get
> dropped and banned for -bantime (default 60*60*24) seconds.
>
> I'll make bad signatures a banning offense, and I'll remove the
> number-of-sigops and non-standard-transaction penalties.
>
> I used a mutable field with const setter to avoid modifying a bunch of
> methods to take non-const blocks/transactions instead of const; I
> think it is appropriate because a block/transaction's DoS score is
> really meta-data and not part of it's state.
>
> I'll make GetTime() unit-test friendly as you suggest.
>

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110915/d97d1e45/attachment.html>

From gavinandresen at gmail.com  Thu Sep 15 14:06:37 2011
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Thu, 15 Sep 2011 10:06:37 -0400
Subject: [Bitcoin-development] Request review: drop misbehaving peers
In-Reply-To: <4E71F6D6.2090208@justmoon.de>
References: <CABsx9T2MKTYCeOqERXKBMYEqNEK4eo9jGt81gZE1=Fv=s3wEqA@mail.gmail.com>
	<CANEZrP3FFEK0xrZqQkPyi8uoyb=XiPU7fSJDcGCLxiGH2uh3dQ@mail.gmail.com>
	<CABsx9T0Eowp6_mTcggCz3tivRL0NsqyyxqingmPzZ2qkJnU9EA@mail.gmail.com>
	<4E71F6D6.2090208@justmoon.de>
Message-ID: <CABsx9T1_rOTd+sSgBTnj2iGKC2t7Rrh_pFAGtmWwjAKxaT0jdQ@mail.gmail.com>

> Should the DoS protection auto-disable if the node has less than a minimum
> number of connections? The idea being that if our node seems to be kicking
> everybody off the roster maybe there is something wrong with the
> protections.

Darn good question. If the protection fails, would it be better for it
to 'fail hard', leaving people complaining "bitcoin won't stay
connected!"

Or fail soft, so you at least have a couple of connections.

I think fail hard is better-- we'll immediately know about the
problem, and can fix it.  Fail soft makes me nervous because  I think
that would make it more likely a bug splits the network (and,
therefore, the blockchain).


> It would be nice if the node sent a message to the banned peer with a code
> indicating the reason for the ban

If I think you're trying to DoS me, why would I be nice to you?  I
think response messages would just give an attacker another potential
attack vector, and it is clear from the debug.log what triggers a ban.

> Should sending lots of messages that don't pass the protocol-level checksum
> test be a bannable offense? Or generally sending garbage data?

Good question. Anybody see a reason not to?  How much tolerance (if
any) should there be for sending garbage data (I assume the
lower-level network stack almost never garbles data, is that a good
assumption)?


-- 
--
Gavin Andresen



From gmaxwell at gmail.com  Thu Sep 15 14:21:44 2011
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Thu, 15 Sep 2011 10:21:44 -0400
Subject: [Bitcoin-development] Request review: drop misbehaving peers
In-Reply-To: <CABsx9T1_rOTd+sSgBTnj2iGKC2t7Rrh_pFAGtmWwjAKxaT0jdQ@mail.gmail.com>
References: <CABsx9T2MKTYCeOqERXKBMYEqNEK4eo9jGt81gZE1=Fv=s3wEqA@mail.gmail.com>
	<CANEZrP3FFEK0xrZqQkPyi8uoyb=XiPU7fSJDcGCLxiGH2uh3dQ@mail.gmail.com>
	<CABsx9T0Eowp6_mTcggCz3tivRL0NsqyyxqingmPzZ2qkJnU9EA@mail.gmail.com>
	<4E71F6D6.2090208@justmoon.de>
	<CABsx9T1_rOTd+sSgBTnj2iGKC2t7Rrh_pFAGtmWwjAKxaT0jdQ@mail.gmail.com>
Message-ID: <CAAS2fgRUv48Fnx4iDkjMeWxsqOVfN0nig37GRpG16bMKQgYaRg@mail.gmail.com>

On Thu, Sep 15, 2011 at 10:06 AM, Gavin Andresen
<gavinandresen at gmail.com> wrote:
> If I think you're trying to DoS me, why would I be nice to you? ?I
> think response messages would just give an attacker another potential
> attack vector, and it is clear from the debug.log what triggers a ban.

Fail hard, log the reason locally. Problem becomes tractable. Also,
for any problem big enough to cause a network outage the issue won't
be reproducibility.

I support the imposition of txn rules? otherwise the dropping is
nearly pointless due to the hole that any attack can just take the
form of junk txn? but you must be super careful that an attack can't
be transitive: There should be nothing I can give a node that it will
forward on that will make that node's peers drop it. (and this needs
to remain true while forwarding rules evolve)

So, I'd suggest that you'd only drop on transactions that would
invalidate a block if included in it but the problem there is that
double spends meet that criteria. Better would, perhaps be something
like "would invalidate a block if included; except that double spends
after the last checkpoint are allowed, and nodes should not forward
any txn until they are current with their last checkpoint"

(That bit of complexity is to reduce exposure where a new node gets
hit with double spends that its yet too stupid to reject, and it
forwards them onto its friendly peers who then hang up on it thus
prolonging its period of ignorance? in general care needs to be taken
to avoid hanging up on nodes that are just too young to know better)

> Good question. Anybody see a reason not to? ?How much tolerance (if
> any) should there be for sending garbage data (I assume the
> lower-level network stack almost never garbles data, is that a good
> assumption)?

It would be fine to hang up on any garbage data: something is
obviously wrong. I'd be hesitant to ban on a single instance of it,
it's rare but happens. (e.g. see
http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.14.150&rep=rep1&type=ps)



From luke at dashjr.org  Thu Sep 15 15:36:44 2011
From: luke at dashjr.org (Luke-Jr)
Date: Thu, 15 Sep 2011 11:36:44 -0400
Subject: [Bitcoin-development] Request review: drop misbehaving peers
In-Reply-To: <4E71F5F8.2020807@jerviss.org>
References: <CABsx9T2MKTYCeOqERXKBMYEqNEK4eo9jGt81gZE1=Fv=s3wEqA@mail.gmail.com>
	<201109142206.40455.luke@dashjr.org> <4E71F5F8.2020807@jerviss.org>
Message-ID: <201109151136.47485.luke@dashjr.org>

On Thursday, September 15, 2011 8:56:24 AM kjj wrote:
> Luke-Jr wrote:
> > On Wednesday, September 14, 2011 9:57:00 PM Gavin Andresen wrote:
> >> I'm looking for review of this pull request:
> >>    https://github.com/bitcoin/bitcoin/pull/517
> > 
> > "Non-standard" transactions, or those with "insufficient" fees should not
> > be penalised. These are properly relay/miner policy decisions, not
> > protocol violations, and should be made more easily configurable, not
> > punished for configuration.
> 
> A few non-standard transactions are probably legitimate.  A whole bunch
> of them are probably not.  I would think that assigning a point or two
> of badness to a peer sending one is pretty reasonable, with the
> understanding that we would need to adjust that as the network evolves.

No. There is no such thing as "non-standard transactions" really; it is simply 
"transactions outside of the bounds that I as a user/miner will relay/accept". 
It is perfectly legitimate for other users/miners to relay/accept transactions 
more liberally. By penalising for transactions falling outside of your 
*personal policies*, you would end up banning many legitimate nodes.



From kjj at jerviss.org  Thu Sep 15 16:04:37 2011
From: kjj at jerviss.org (kjj)
Date: Thu, 15 Sep 2011 11:04:37 -0500
Subject: [Bitcoin-development] Request review: drop misbehaving peers
In-Reply-To: <201109151136.47485.luke@dashjr.org>
References: <CABsx9T2MKTYCeOqERXKBMYEqNEK4eo9jGt81gZE1=Fv=s3wEqA@mail.gmail.com>
	<201109142206.40455.luke@dashjr.org> <4E71F5F8.2020807@jerviss.org>
	<201109151136.47485.luke@dashjr.org>
Message-ID: <4E722215.40401@jerviss.org>

Luke-Jr wrote:
> On Thursday, September 15, 2011 8:56:24 AM kjj wrote:
>> Luke-Jr wrote:
>>> On Wednesday, September 14, 2011 9:57:00 PM Gavin Andresen wrote:
>>>> I'm looking for review of this pull request:
>>>>     https://github.com/bitcoin/bitcoin/pull/517
>>> "Non-standard" transactions, or those with "insufficient" fees should not
>>> be penalised. These are properly relay/miner policy decisions, not
>>> protocol violations, and should be made more easily configurable, not
>>> punished for configuration.
>> A few non-standard transactions are probably legitimate.  A whole bunch
>> of them are probably not.  I would think that assigning a point or two
>> of badness to a peer sending one is pretty reasonable, with the
>> understanding that we would need to adjust that as the network evolves.
> No. There is no such thing as "non-standard transactions" really; it is simply
> "transactions outside of the bounds that I as a user/miner will relay/accept".
> It is perfectly legitimate for other users/miners to relay/accept transactions
> more liberally. By penalising for transactions falling outside of your
> *personal policies*, you would end up banning many legitimate nodes.
It is certainly true that standardness is an artificial construct that 
only has meaning to this particular implementation of the software, but 
no meaning in the context of the protocol or the system as a whole.

On the other hand, the vast, vast majority of all transactions follow a 
particular pattern.  If someone gives you one that doesn't match the 
standard pattern, you might be a little suspicious, but it is no big 
deal.  But, if they emit dozens or hundreds, it is hardly unreasonable 
to disconnect them until you figure out what's going on.



From gavinandresen at gmail.com  Thu Sep 15 16:19:45 2011
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Thu, 15 Sep 2011 12:19:45 -0400
Subject: [Bitcoin-development] Request review: drop misbehaving peers
In-Reply-To: <201109151136.47485.luke@dashjr.org>
References: <CABsx9T2MKTYCeOqERXKBMYEqNEK4eo9jGt81gZE1=Fv=s3wEqA@mail.gmail.com>
	<201109142206.40455.luke@dashjr.org> <4E71F5F8.2020807@jerviss.org>
	<201109151136.47485.luke@dashjr.org>
Message-ID: <CABsx9T2kQTAA77Q=qYc2iKNftQSd8ficfhcXL2W6kX0JUhe3Dw@mail.gmail.com>

I hate to get specific about potential attacks on a public mailing
list, but I think the debate over what to do with non-standard
transactions means we need to.

I agree with Gregory; if there are NO rules about what transactions
peers can send at you, then an attacker can trivially get around other
the DoS rules.

I also agree we need to think hard about what will happen when new
'standard' transaction types are deployed.

There are two significant DoS attacks I can imagine using transactions
that will never be included in blocks.  The "will never be included in
blocks" bit is important, because if an attacker can make you do
significant work at no cost to themselves then they win. And if the
transactions will never be included in blocks the attacker can include
lots of transaction fees that will never be spent.

1) Exhaust memory by filling up the transaction memory pool. I think
another patch needs to be written to deal with that (keep the size of
the transaction pool reasonable by evicting low-priority
transactions).

2) Waste CPU time validating transactions   They can make you use an
arbitrary amount of CPU time just by flooding you with a stream of
valid-but-won't-ever-get-into-a-block transactions.

The code already refuses to relay non-standard transactions, and
doesn't check their signatures or add them to the memory pool, so I
think no DoS check is needed for them (and would be harmful when we do
start supporting new standard transactions).

It also drops transactions with "too few fees" before checking
signatures or doing other CPU-intensive work, so no I think no DoS
check is needed there, either (and again, would be harmful when
transaction fee rules change).

I'm ignoring bandwidth DoS attacks-- we already have the
-maxreceivebuffer option to deal with those.


PS: I'll add Gregory's comment:

"There should be nothing I can give a node that it will
forward on that will make that node's peers drop it. (and this needs
to remain true while forwarding rules evolve)"

... as a comment in the code so hopefully we don't forget it.

-- 
--
Gavin Andresen



From mike at plan99.net  Thu Sep 15 16:21:34 2011
From: mike at plan99.net (Mike Hearn)
Date: Thu, 15 Sep 2011 18:21:34 +0200
Subject: [Bitcoin-development] Request review: drop misbehaving peers
In-Reply-To: <CABsx9T1_rOTd+sSgBTnj2iGKC2t7Rrh_pFAGtmWwjAKxaT0jdQ@mail.gmail.com>
References: <CABsx9T2MKTYCeOqERXKBMYEqNEK4eo9jGt81gZE1=Fv=s3wEqA@mail.gmail.com>
	<CANEZrP3FFEK0xrZqQkPyi8uoyb=XiPU7fSJDcGCLxiGH2uh3dQ@mail.gmail.com>
	<CABsx9T0Eowp6_mTcggCz3tivRL0NsqyyxqingmPzZ2qkJnU9EA@mail.gmail.com>
	<4E71F6D6.2090208@justmoon.de>
	<CABsx9T1_rOTd+sSgBTnj2iGKC2t7Rrh_pFAGtmWwjAKxaT0jdQ@mail.gmail.com>
Message-ID: <CANEZrP2eY6RZxCy4=+U=4B2eNHbJz9AALfH5zQgKyQpTqptapQ@mail.gmail.com>

> If I think you're trying to DoS me, why would I be nice to you?

The issue is, what if I'm not trying to DoS you, but something went wrong?

> think response messages would just give an attacker another potential
> attack vector, and it is clear from the debug.log what triggers a ban.

Only clear to the node owner. Not the sender, who may in a better
position to debug.

It's pretty common for protocols to return useful errors even in DoS
conditions. Eg, http servers will often return 503 Service Unavailable
in overload conditions. Google actually sends a redirect telling you
why you got blocked.



From solar at heliacal.net  Thu Sep 15 16:41:05 2011
From: solar at heliacal.net (solar)
Date: Thu, 15 Sep 2011 16:41:05 +0000
Subject: [Bitcoin-development] Request review: drop misbehaving peers
In-Reply-To: <4E722215.40401@jerviss.org>
References: <CABsx9T2MKTYCeOqERXKBMYEqNEK4eo9jGt81gZE1=Fv=s3wEqA@mail.gmail.com>
	<201109142206.40455.luke@dashjr.org> <4E71F5F8.2020807@jerviss.org>
	<201109151136.47485.luke@dashjr.org> <4E722215.40401@jerviss.org>
Message-ID: <10E29726-4210-49BC-8C56-5798BC4E7869@heliacal.net>

I don't think that any kind of peer disconnection should be present in the reference client implementation.  This is a lot like using packet filters and stateful firewalls - they are implemented based on local policy and they require constant tweaking because they always cause problems when some change in usage dictates allowing things that weren't allowed before.  Essentially every new service, protocol (or creative use of an existing protocol) needs to be 'opened up' so it's a hassle to change it each time.

Perhaps there is a use for this in helping implement local policy but even something that's considered a 'liberal' filtering rule today will eventually be in the way of something legitimate and will need to be adjusted.  It is not possible to just adjust this network wide when and adjustment needs to be created, so any type of built-in filtering is limiting to future innovation.

Maybe this type of thing would be better implemented in a separate bitcoin proxy - much like how a firewall can be placed between a router and network.  All traffic is legitimate to a router (bitcoind) if it's formatted correctly and can be forwarded, but the firewall can implement local policy.  The problem with providing this out-of-the-box is that even in the case of internet traffic, they are often misused and configured too restrictively so they end up causing service problems for the users behind them.

I think the idea is good, in that we need a way to filter out things we consider bad, but I don't think it is the job of the bitcoin client.  There are tons of tunable things and people will want to tweak them - what is 'a lot' to me might be nothing to someone else.  People's policies will differ greatly as you can see with everything else on the internet.


Laszlo Hanyecz
solar at heliacal.net


On Sep 15, 2011, at 4:04 PM, kjj wrote:

> Luke-Jr wrote:
>> On Thursday, September 15, 2011 8:56:24 AM kjj wrote:
>>> Luke-Jr wrote:
>>>> On Wednesday, September 14, 2011 9:57:00 PM Gavin Andresen wrote:
>>>>> I'm looking for review of this pull request:
>>>>>    https://github.com/bitcoin/bitcoin/pull/517
>>>> "Non-standard" transactions, or those with "insufficient" fees should not
>>>> be penalised. These are properly relay/miner policy decisions, not
>>>> protocol violations, and should be made more easily configurable, not
>>>> punished for configuration.
>>> A few non-standard transactions are probably legitimate.  A whole bunch
>>> of them are probably not.  I would think that assigning a point or two
>>> of badness to a peer sending one is pretty reasonable, with the
>>> understanding that we would need to adjust that as the network evolves.
>> No. There is no such thing as "non-standard transactions" really; it is simply
>> "transactions outside of the bounds that I as a user/miner will relay/accept".
>> It is perfectly legitimate for other users/miners to relay/accept transactions
>> more liberally. By penalising for transactions falling outside of your
>> *personal policies*, you would end up banning many legitimate nodes.
> It is certainly true that standardness is an artificial construct that 
> only has meaning to this particular implementation of the software, but 
> no meaning in the context of the protocol or the system as a whole.
> 
> On the other hand, the vast, vast majority of all transactions follow a 
> particular pattern.  If someone gives you one that doesn't match the 
> standard pattern, you might be a little suspicious, but it is no big 
> deal.  But, if they emit dozens or hundreds, it is hardly unreasonable 
> to disconnect them until you figure out what's going on.
> 
> ------------------------------------------------------------------------------
> Doing More with Less: The Next Generation Virtual Desktop 
> What are the key obstacles that have prevented many mid-market businesses
> from deploying virtual desktops?   How do next-generation virtual desktops
> provide companies an easier-to-deploy, easier-to-manage and more affordable
> virtual desktop model.http://www.accelacomm.com/jaw/sfnl/114/51426474/
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development




From luke at dashjr.org  Thu Sep 15 17:29:16 2011
From: luke at dashjr.org (Luke-Jr)
Date: Thu, 15 Sep 2011 13:29:16 -0400
Subject: [Bitcoin-development] Request review: drop misbehaving peers
In-Reply-To: <4E722215.40401@jerviss.org>
References: <CABsx9T2MKTYCeOqERXKBMYEqNEK4eo9jGt81gZE1=Fv=s3wEqA@mail.gmail.com>
	<201109151136.47485.luke@dashjr.org> <4E722215.40401@jerviss.org>
Message-ID: <201109151329.21849.luke@dashjr.org>

On Thursday, September 15, 2011 12:04:37 PM kjj wrote:
> On the other hand, the vast, vast majority of all transactions follow a
> particular pattern.  If someone gives you one that doesn't match the
> standard pattern, you might be a little suspicious, but it is no big
> deal.  But, if they emit dozens or hundreds, it is hardly unreasonable
> to disconnect them until you figure out what's going on.

That would make sense if you knew the node was originating them, MAYBE--
but not given the fact that they may merely be relaying transactions.



From dhuff at jrbobdobbs.org  Thu Sep 15 17:41:06 2011
From: dhuff at jrbobdobbs.org (Douglas Huff)
Date: Thu, 15 Sep 2011 12:41:06 -0500
Subject: [Bitcoin-development] Request review: drop misbehaving peers
In-Reply-To: <CABsx9T2kQTAA77Q=qYc2iKNftQSd8ficfhcXL2W6kX0JUhe3Dw@mail.gmail.com>
References: <CABsx9T2MKTYCeOqERXKBMYEqNEK4eo9jGt81gZE1=Fv=s3wEqA@mail.gmail.com>
	<201109142206.40455.luke@dashjr.org> <4E71F5F8.2020807@jerviss.org>
	<201109151136.47485.luke@dashjr.org>
	<CABsx9T2kQTAA77Q=qYc2iKNftQSd8ficfhcXL2W6kX0JUhe3Dw@mail.gmail.com>
Message-ID: <CAPiTikXTf=pDrYzfJkxrieEaMVCPGsgB-v-31J-woWjFopt5LQ@mail.gmail.com>

On Sep 15, 2011 11:20 AM, "Gavin Andresen" <gavinandresen at gmail.com> wrote:
> I'm ignoring bandwidth DoS attacks-- we already have the
> -maxreceivebuffer option to deal with those.

I disagree with this comment. The way this is currently implemented is a mem
exhaustion dos in itself waiting to happen and does nothing to prevent
network flooding.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110915/2706e88f/attachment.html>

From gavinandresen at gmail.com  Thu Sep 15 19:07:57 2011
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Thu, 15 Sep 2011 15:07:57 -0400
Subject: [Bitcoin-development] Request review: drop misbehaving peers
In-Reply-To: <402A5924-1950-4455-9DCA-5C49570FDC73@jrbobdobbs.org>
References: <CABsx9T2MKTYCeOqERXKBMYEqNEK4eo9jGt81gZE1=Fv=s3wEqA@mail.gmail.com>
	<201109142206.40455.luke@dashjr.org> <4E71F5F8.2020807@jerviss.org>
	<201109151136.47485.luke@dashjr.org>
	<CABsx9T2kQTAA77Q=qYc2iKNftQSd8ficfhcXL2W6kX0JUhe3Dw@mail.gmail.com>
	<CAPiTikXTf=pDrYzfJkxrieEaMVCPGsgB-v-31J-woWjFopt5LQ@mail.gmail.com>
	<CABsx9T3HCVAn5ECuPWfAyZ4zt3WCbyKPF-7DV1HY2j2TKjavrg@mail.gmail.com>
	<402A5924-1950-4455-9DCA-5C49570FDC73@jrbobdobbs.org>
Message-ID: <CABsx9T0up-59VQT5VPFsYscyHCfCvQAxSHVpKtAMNBw_iBg9xA@mail.gmail.com>

I took it off the list because snarky comments are not appropriate for
bitcoin-dev, and I was being snarky.

Please try to keep your comments on-topic; if you want to talk about
fixing -maxreceivebuffer (a change I would wholeheartedly embrace, the
code I slapped together was reacting to phantomcircuit's "here's a
python script that will kill any bitcoin node on the network" 0-day
exploit), then please start a new topic.


-- 
--
Gavin Andresen



From dhuff at jrbobdobbs.org  Thu Sep 15 18:36:20 2011
From: dhuff at jrbobdobbs.org (Douglas Huff)
Date: Thu, 15 Sep 2011 13:36:20 -0500
Subject: [Bitcoin-development] Request review: drop misbehaving peers
In-Reply-To: <CABsx9T3HCVAn5ECuPWfAyZ4zt3WCbyKPF-7DV1HY2j2TKjavrg@mail.gmail.com>
References: <CABsx9T2MKTYCeOqERXKBMYEqNEK4eo9jGt81gZE1=Fv=s3wEqA@mail.gmail.com>
	<201109142206.40455.luke@dashjr.org> <4E71F5F8.2020807@jerviss.org>
	<201109151136.47485.luke@dashjr.org>
	<CABsx9T2kQTAA77Q=qYc2iKNftQSd8ficfhcXL2W6kX0JUhe3Dw@mail.gmail.com>
	<CAPiTikXTf=pDrYzfJkxrieEaMVCPGsgB-v-31J-woWjFopt5LQ@mail.gmail.com>
	<CABsx9T3HCVAn5ECuPWfAyZ4zt3WCbyKPF-7DV1HY2j2TKjavrg@mail.gmail.com>
Message-ID: <402A5924-1950-4455-9DCA-5C49570FDC73@jrbobdobbs.org>

On Sep 15, 2011, at 1:17 PM, Gavin Andresen wrote:

>> On Sep 15, 2011 11:20 AM, "Gavin Andresen" <gavinandresen at gmail.com> wrote:
>>> I'm ignoring bandwidth DoS attacks-- we already have the
>>> -maxreceivebuffer option to deal with those.
>> 
>> I disagree with this comment. The way this is currently implemented is a mem
>> exhaustion dos in itself waiting to happen and does nothing to prevent
>> network flooding.
> 
> Have you submitted a patch to fix it?

No, it requires the entirety of the p2p network code be reworked and large patches aren't accepted.

No reason to take that off list, it's an issue that's been acknowledged on irc numerous times and is in the public channel logs.

-- 
Douglas Huff
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 801 bytes
Desc: Message signed with OpenPGP using GPGMail
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110915/1aa29047/attachment.sig>

From joel.kaartinen at gmail.com  Fri Sep 16 12:57:20 2011
From: joel.kaartinen at gmail.com (Joel Joonatan Kaartinen)
Date: Fri, 16 Sep 2011 15:57:20 +0300
Subject: [Bitcoin-development] Request review: drop misbehaving peers
In-Reply-To: <CABsx9T1_rOTd+sSgBTnj2iGKC2t7Rrh_pFAGtmWwjAKxaT0jdQ@mail.gmail.com>
References: <CABsx9T2MKTYCeOqERXKBMYEqNEK4eo9jGt81gZE1=Fv=s3wEqA@mail.gmail.com>
	<CANEZrP3FFEK0xrZqQkPyi8uoyb=XiPU7fSJDcGCLxiGH2uh3dQ@mail.gmail.com>
	<CABsx9T0Eowp6_mTcggCz3tivRL0NsqyyxqingmPzZ2qkJnU9EA@mail.gmail.com>
	<4E71F6D6.2090208@justmoon.de>
	<CABsx9T1_rOTd+sSgBTnj2iGKC2t7Rrh_pFAGtmWwjAKxaT0jdQ@mail.gmail.com>
Message-ID: <1316177840.15775.15.camel@mei>

> Darn good question. If the protection fails, would it be better for it
> to 'fail hard', leaving people complaining "bitcoin won't stay
> connected!"
> 
> Or fail soft, so you at least have a couple of connections.
> 
> I think fail hard is better-- we'll immediately know about the
> problem, and can fix it.  Fail soft makes me nervous because  I think
> that would make it more likely a bug splits the network (and,
> therefore, the blockchain).

My own preference would be to fail hard with detection of the problem
and notification of the user if there's a GUI connected and/or running.

- Joel





From jgarzik at exmulti.com  Fri Sep 16 16:38:27 2011
From: jgarzik at exmulti.com (Jeff Garzik)
Date: Fri, 16 Sep 2011 12:38:27 -0400
Subject: [Bitcoin-development] 0.4 Release Candidate 2
In-Reply-To: <CABsx9T2Y3CmBr=twHvFOEoQCVcSySZ+JyEQXcOseRKxJi3KoLw@mail.gmail.com>
References: <CABsx9T2Y3CmBr=twHvFOEoQCVcSySZ+JyEQXcOseRKxJi3KoLw@mail.gmail.com>
Message-ID: <CA+8xBpcDVU9cPbM12TX9nfB7X+9VQK5gtfA0o-FefAi7TPfdqg@mail.gmail.com>

On Fri, Sep 9, 2011 at 10:02 AM, Gavin Andresen <gavinandresen at gmail.com> wrote:
> I just tagged the git tree: ?v0.4.00rc2


Signed builds up at sourceforge:
https://sourceforge.net/projects/bitcoin/files/Bitcoin/bitcoin-0.4.0/test/


-- 
Jeff Garzik
exMULTI, Inc.
jgarzik at exmulti.com



From luke at dashjr.org  Sun Sep 18 23:30:56 2011
From: luke at dashjr.org (Luke-Jr)
Date: Sun, 18 Sep 2011 19:30:56 -0400
Subject: [Bitcoin-development] 0.4.x stable branch
Message-ID: <201109181930.59565.luke@dashjr.org>

Gavin, Jeff, et al:

A group of developers would be interested in maintaining 0.4 into the future 
as a stable branch (ie, bugfixes only). Would you be willing to plan on making 
the next mainline version after 0.4, being called 0.5, so we can release 
0.4.1, 0.4.2, etc? If we prepare the git repository + tags, would you guys be 
willing to make the actual release builds + source, and/or post such on the 
websites you administrate?

Luke and various others in #bitcoin-stable



From zgenjix at yahoo.com  Mon Sep 19 00:31:55 2011
From: zgenjix at yahoo.com (Amir Taaki)
Date: Sun, 18 Sep 2011 17:31:55 -0700 (PDT)
Subject: [Bitcoin-development] Bitcoin Enhancement Proposals (BEPS)
Message-ID: <1316392315.46221.YahooMailNeo@web121014.mail.ne1.yahoo.com>

I adapted the Python PEP 0001 to Bitcoin (its license is public domain):

https://en.bitcoin.it/wiki/Bitcoin_Enhancement_Proposals

https://en.bitcoin.it/wiki/BEP_0001

BEP 0001 is open to additional authors and revisions.

Ideally these should go in a github.com/bitcoin/beps/ repo.

Lets have a standardisation track for changes to the protocol.




From luke at dashjr.org  Mon Sep 19 01:04:43 2011
From: luke at dashjr.org (Luke-Jr)
Date: Sun, 18 Sep 2011 21:04:43 -0400
Subject: [Bitcoin-development] Bitcoin Enhancement Proposals (BEPS)
Message-ID: <201109182104.45994.luke@dashjr.org>

On Sunday, September 18, 2011 8:31:55 PM Amir Taaki wrote:
> Ideally these should go in a github.com/bitcoin/beps/ repo.

Please, somewhere people can freely commit to...



From ampedal at gmail.com  Mon Sep 19 03:22:55 2011
From: ampedal at gmail.com (Alex Waters)
Date: Sun, 18 Sep 2011 23:22:55 -0400
Subject: [Bitcoin-development] Bitcoin Enhancement Proposals (BEPS)
In-Reply-To: <201109182104.45994.luke@dashjr.org>
References: <201109182104.45994.luke@dashjr.org>
Message-ID: <CAL0fb61B6bqGMhWtCgvy0xwfHQ_nvmhbb9uLJQWx3biENhVJNw@mail.gmail.com>

http://www.python.org/dev/peps/ is a good reference if you're
interested in seeing how PEPs work in action. I would be more than
willing to maintain a similar index if that's what people want.

Something to note is that Python does not use Git or GitHub (AFAIK).
So we would need to update 001 to reflect the BEP involvement with
Git, or transition away from it completely (which I discourage).

My full-time experience as a project manager with Basecamp, Redmine,
Teamlab, Pivotal Tracker, SVN, and custom VC has taught me that it is
hard to find a good solution for the organization of the development
life cycle. Having examined Bitcoin for the past three weeks, it is
hard to discern the willingness to implement meta changes.

It looks like Git/GitHub is working, but not ideal for everyone. My
opinion is that there will always be a missing feature in VC systems.
My major gripes with GitHub are the lack of prioritization options,
voting system, and reporting/metrics.

Gavin has asked me to research various O/S projects, to see how they
are doing things. I have been focused mostly on organizing a pull
testing system, and learning the testing process - but I can spend
more time on meta organization if that is in demand. It would be
helpful to me if I could hear some feedback on what needs changing,
and how important it is.

My recommendation is that we continue with the current system, but
plan alternative organization voting around the time of 0.5 release.
This could be an alternative to GitHub, or a supplement, or neither.
Seeing as we are still in Beta, I don't believe there needs immense
structure until we approach 1.0. The PEP system is outstanding, and is
clearly a solid alternative/supplement to consider.

-Alex



From gavinandresen at gmail.com  Mon Sep 19 12:49:08 2011
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Mon, 19 Sep 2011 08:49:08 -0400
Subject: [Bitcoin-development] 0.4.x stable branch
In-Reply-To: <201109181930.59565.luke@dashjr.org>
References: <201109181930.59565.luke@dashjr.org>
Message-ID: <CABsx9T2FBNv26E4LHmi9GVfi1HLR1wR__qGp1_gjco8rwN0L4Q@mail.gmail.com>

On Sun, Sep 18, 2011 at 7:30 PM, Luke-Jr <luke at dashjr.org> wrote:
> If we prepare the git repository + tags, would you guys be
> willing to make the actual release builds + source, and/or post such on the
> websites you administrate?
> Luke and various others in #bitcoin-stable

My initial reaction is no. Testing and bug-fixing is the bottleneck
for making core bitcoin better, and maintaining two release lines
won't make that better.

I also think that until we get to a "1.0" that we can all agree is
ready for everybody AND their grandma to use, using the word "stable"
would be dishonest.

Would we link to your binaries if you want to create 0.4.* releases,
build binaries, then QA test and release them?

I dunno-- what do other people think?

Eventually, when there are a bunch of bitcoin implementations to
choose from, I think bitcoin.org should look like bittorrent.org -- it
should become a forum for developers to exchange ideas about the
direction of bitcoin.

-- 
--
Gavin Andresen



From gmaxwell at gmail.com  Mon Sep 19 13:03:39 2011
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Mon, 19 Sep 2011 09:03:39 -0400
Subject: [Bitcoin-development] 0.4.x stable branch
In-Reply-To: <CABsx9T2FBNv26E4LHmi9GVfi1HLR1wR__qGp1_gjco8rwN0L4Q@mail.gmail.com>
References: <201109181930.59565.luke@dashjr.org>
	<CABsx9T2FBNv26E4LHmi9GVfi1HLR1wR__qGp1_gjco8rwN0L4Q@mail.gmail.com>
Message-ID: <CAAS2fgQ-GZ+veHEKayw4qQuBHYXZcQruEw1iUwdyEtdom3OVmA@mail.gmail.com>

On Mon, Sep 19, 2011 at 8:49 AM, Gavin Andresen <gavinandresen at gmail.com> wrote:
> My initial reaction is no. Testing and bug-fixing is the bottleneck
> for making core bitcoin better, and maintaining two release lines
> won't make that better.
>
> I also think that until we get to a "1.0" that we can all agree is
> ready for everybody AND their grandma to use, using the word "stable"
> would be dishonest.

I think the primary concern that they are attempting to address there
is providing a stable base bitcoind for miners, banks, and webservices
to apply their patches on top of.

Right now, if they want to keep up with development they are stuck
forward porting against often disruptive changes as just about
everyone running something of importance needs some patch or another
so you have people who are clearly in the know like Luke and tcatm
trailing development on some of their systems by many months.

This isn't healthy for the network.

I'm not convinced a bugfixes only branch will help much: Even bug fixes
will disrupt local fixes, and testing and supervising your upgrade usually
takes more effort than the forward porting.

I'd rather see more effort put into mainlining the changes people are
carrying sooner and restructuring code to better accommodate patches
which aren't suitable for mainline.  This will also encourage people
to make the fixes they're running publicly available, rather than
just keeping them private for competitive advantage.



From zgenjix at yahoo.com  Mon Sep 19 13:48:47 2011
From: zgenjix at yahoo.com (Amir Taaki)
Date: Mon, 19 Sep 2011 06:48:47 -0700 (PDT)
Subject: [Bitcoin-development] 0.4.x stable branch
In-Reply-To: <CABsx9T2FBNv26E4LHmi9GVfi1HLR1wR__qGp1_gjco8rwN0L4Q@mail.gmail.com>
References: <201109181930.59565.luke@dashjr.org>
	<CABsx9T2FBNv26E4LHmi9GVfi1HLR1wR__qGp1_gjco8rwN0L4Q@mail.gmail.com>
Message-ID: <1316440127.85874.YahooMailNeo@web121018.mail.ne1.yahoo.com>

>Eventually, when there are a bunch of bitcoin implementations to

>choose from, I think bitcoin.org should look like bittorrent.org -- it
>should become a forum for developers to exchange ideas about the
>direction of bitcoin.
>
>Gavin Andresen

Thanks for your support. This is a noble ideal and will ensure bitcoin's eventual success by serving as a neutral platform for discussions.

One step I've taken in this direction is to setup a process for proposing changes to the bitcoin protocol. See my other email to this list and this url:

? https://en.bitcoin.it/wiki/Bitcoin_Enhancement_Proposals

The first proposal BEP 0001 is copied from Python's PEP 0001 and is a good starting point. I've marked it as a draft since it's only a non-working proposal. After that with mutual consent and discussion, we can move it to active status and start to think about setting up an arbitration committee.

We should in general favour long discussion over voting. The Wikipedia model for resolving issues through hammering out details is superior to debian with a cycling board of voting members.

The bittorrent page looks like a good future ideal to model ourselves off of and the EP pages too:

? http://bittorrent.org/beps/bep_0000.html

BEP 0001 needs review and comments. As you can see, bittorrent did the exact same thing here (copying the PEP process) with success:

? http://bittorrent.org/beps/bep_0001.html

genjix / Amir Taaki




From luke at dashjr.org  Mon Sep 19 15:00:54 2011
From: luke at dashjr.org (Luke-Jr)
Date: Mon, 19 Sep 2011 11:00:54 -0400
Subject: [Bitcoin-development] 0.4.x stable branch
In-Reply-To: <CABsx9T2FBNv26E4LHmi9GVfi1HLR1wR__qGp1_gjco8rwN0L4Q@mail.gmail.com>
References: <201109181930.59565.luke@dashjr.org>
	<CABsx9T2FBNv26E4LHmi9GVfi1HLR1wR__qGp1_gjco8rwN0L4Q@mail.gmail.com>
Message-ID: <201109191100.58100.luke@dashjr.org>

On Monday, September 19, 2011 8:49:08 AM Gavin Andresen wrote:
> On Sun, Sep 18, 2011 at 7:30 PM, Luke-Jr <luke at dashjr.org> wrote:
> > If we prepare the git repository + tags, would you guys be
> > willing to make the actual release builds + source, and/or post such on
> > the websites you administrate?
> > Luke and various others in #bitcoin-stable
> 
> My initial reaction is no. Testing and bug-fixing is the bottleneck
> for making core bitcoin better, and maintaining two release lines
> won't make that better.
> 
> I also think that until we get to a "1.0" that we can all agree is
> ready for everybody AND their grandma to use, using the word "stable"
> would be dishonest.

The problem with the current development model is that bugfixes are done 
alongside improvements, and code changes *always* have the potential to 
introduce new bugs, no matter how careful anyone is. So to stay on top of 
bugfixes right now implies risking new bugs being introduced. What good is 
getting one bug fixed, if it comes with 20 new yet-to-be-discovered bugs?

For example, 0.3.20.2 was the last version if bitcoind before people started 
experiencing random (albeit rare) deadlocks. However, there have been many 
bugfixes since then. Since there is no stable branch, someone who wishes to 
get those bugfixes is forced to either create their own stable branch from 
scratch, or risk getting all the new bugs introduced in the latest version 
(most of which are unknown at this time).

On the other hand, a stable 0.4.x branch can provide people with upgrades 
which they know make only the minimal changes required to fix bugs with a much 
smaller risk of new bugs being introduced (not only are there fewer changes, 
but bugfixes tend to also be less invasive changes). While there are arguably 
still various "must-have" features missing from 0.4, having a stable branch 
also allows people to maintain a stable+<feature I need> branch with greater 
ease too.



From gmaxwell at gmail.com  Mon Sep 19 15:06:07 2011
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Mon, 19 Sep 2011 11:06:07 -0400
Subject: [Bitcoin-development] 0.4.x stable branch
In-Reply-To: <201109191100.58100.luke@dashjr.org>
References: <201109181930.59565.luke@dashjr.org>
	<CABsx9T2FBNv26E4LHmi9GVfi1HLR1wR__qGp1_gjco8rwN0L4Q@mail.gmail.com>
	<201109191100.58100.luke@dashjr.org>
Message-ID: <CAAS2fgSKJcHRnO3eHG33rqE9kRS2uGpWAxO_xLNVSYQ_BigveQ@mail.gmail.com>

On Mon, Sep 19, 2011 at 11:00 AM, Luke-Jr <luke at dashjr.org> wrote:
> The problem with the current development model is that bugfixes are done
> alongside improvements, and code changes *always* have the potential to
> introduce new bugs, no matter how careful anyone is. So to stay on top of
> bugfixes right now implies risking new bugs being introduced. What good is
> getting one bug fixed, if it comes with 20 new yet-to-be-discovered bugs?

Bug fixes also introduce bugs. Considering the fairly small number of new
features added, I'd take a bet that most of the more recently introduced
bugs were the result of fixes not features.



From bgroff at lavabit.com  Mon Sep 19 16:01:24 2011
From: bgroff at lavabit.com (bgroff at lavabit.com)
Date: Mon, 19 Sep 2011 12:01:24 -0400 (EDT)
Subject: [Bitcoin-development] Bitcoin Enhancement Proposals (BEPS)
In-Reply-To: <CAL0fb61B6bqGMhWtCgvy0xwfHQ_nvmhbb9uLJQWx3biENhVJNw@mail.gmail.com>
References: <201109182104.45994.luke@dashjr.org>
	<CAL0fb61B6bqGMhWtCgvy0xwfHQ_nvmhbb9uLJQWx3biENhVJNw@mail.gmail.com>
Message-ID: <21269.192.251.226.206.1316448084.squirrel@lavabit.com>

> http://www.python.org/dev/peps/ is a good reference if you're
> interested in seeing how PEPs work in action. I would be more than
> willing to maintain a similar index if that's what people want.

Would the multi-signature proposal be a good test case for BEP-0002?

https://gist.github.com/dba89537d352d591eb36

I can reformat it and email here.

Gavin has a competing one:  https://gist.github.com/39158239e36f6af69d6f

and I have a pull request matching a previous version of my proposal.

--
Bobby Groff






From gavinandresen at gmail.com  Mon Sep 19 16:57:58 2011
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Mon, 19 Sep 2011 12:57:58 -0400
Subject: [Bitcoin-development] Bitcoin Enhancement Proposals (BEPS)
In-Reply-To: <21269.192.251.226.206.1316448084.squirrel@lavabit.com>
References: <201109182104.45994.luke@dashjr.org>
	<CAL0fb61B6bqGMhWtCgvy0xwfHQ_nvmhbb9uLJQWx3biENhVJNw@mail.gmail.com>
	<21269.192.251.226.206.1316448084.squirrel@lavabit.com>
Message-ID: <CABsx9T0y601kjJ7ToczwhcQUoh3NZbuPa+iWwtm6-DZxZSRNPg@mail.gmail.com>

New 'standard' transaction forms would be perfect candidates for BEPS.

I think we aught to have a formal proposal to separate the protocol
version from the client version, too.

--

Does anybody besides me think maybe we should name them something
other than "BEP" ?

I'm worried we'll regret it in two years when a google for "BEP003"
takes you to the BitTorrent EPs instead of the BitCoin EPs.

Maybe "BIP" == Bitcoin Improvement Proposal
or "PEB" == Proposal to Enhance Bitcoin
or "BER" == Bitcoin Enhancement Request

I think I like "BIP"  (PEB sounds like a diet soda, and I don't know
if BER should be pronounced "bear" or "beer").

I generally don't care about names, but it seems like a little
planning now might save some confusion later. And I don't want the
BitTorrent folks to get pissed off at us for 'stealing' their acronym,
either.


-- 
--
Gavin Andresen



From ampedal at gmail.com  Mon Sep 19 17:23:55 2011
From: ampedal at gmail.com (Alex Waters)
Date: Mon, 19 Sep 2011 13:23:55 -0400
Subject: [Bitcoin-development] Bitcoin Enhancement Proposals (BEPS)
In-Reply-To: <CABsx9T0y601kjJ7ToczwhcQUoh3NZbuPa+iWwtm6-DZxZSRNPg@mail.gmail.com>
References: <201109182104.45994.luke@dashjr.org>
	<CAL0fb61B6bqGMhWtCgvy0xwfHQ_nvmhbb9uLJQWx3biENhVJNw@mail.gmail.com>
	<21269.192.251.226.206.1316448084.squirrel@lavabit.com>
	<CABsx9T0y601kjJ7ToczwhcQUoh3NZbuPa+iWwtm6-DZxZSRNPg@mail.gmail.com>
Message-ID: <CAL0fb61GHmQTg09A-8dOSZZ7MRKQKQk7w6p8pjppztXns1ZHEQ@mail.gmail.com>

I'm sorry that I misunderstood the protocol being separate from the
client in regard to 'BEPS'. It definitely makes more sense that way.

As far as naming; I vote BER pronounced Beer.


On Mon, Sep 19, 2011 at 12:57 PM, Gavin Andresen
<gavinandresen at gmail.com> wrote:
> New 'standard' transaction forms would be perfect candidates for BEPS.
>
> I think we aught to have a formal proposal to separate the protocol
> version from the client version, too.
>
> --
>
> Does anybody besides me think maybe we should name them something
> other than "BEP" ?
>
> I'm worried we'll regret it in two years when a google for "BEP003"
> takes you to the BitTorrent EPs instead of the BitCoin EPs.
>
> Maybe "BIP" == Bitcoin Improvement Proposal
> or "PEB" == Proposal to Enhance Bitcoin
> or "BER" == Bitcoin Enhancement Request
>
> I think I like "BIP" ?(PEB sounds like a diet soda, and I don't know
> if BER should be pronounced "bear" or "beer").
>
> I generally don't care about names, but it seems like a little
> planning now might save some confusion later. And I don't want the
> BitTorrent folks to get pissed off at us for 'stealing' their acronym,
> either.
>
>
> --
> --
> Gavin Andresen
>
> ------------------------------------------------------------------------------
> BlackBerry&reg; DevCon Americas, Oct. 18-20, San Francisco, CA
> Learn about the latest advances in developing for the
> BlackBerry&reg; mobile platform with sessions, labs & more.
> See new tools and technologies. Register for BlackBerry&reg; DevCon today!
> http://p.sf.net/sfu/rim-devcon-copy1
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>



From ampedal at gmail.com  Tue Sep 20 00:20:19 2011
From: ampedal at gmail.com (Alex Waters)
Date: Mon, 19 Sep 2011 20:20:19 -0400
Subject: [Bitcoin-development] Issue / Pulls timers
Message-ID: <CAL0fb63-zObvzirU1T6-xQnKc4=Ly2go5BBF9Q0XjqAc3o8V7A@mail.gmail.com>

I would like to propose adding timers to the pulls / issues:

https://github.com/bitcoin/bitcoin/pull/523

"From time to time a pull request will become outdated. If this occurs, and
the pull is no longer automatically mergeable; it will be closed after 15
days. This can be avoided by rebasing the commit. Pull requests closed in this
manner will have their corresponding issue labeled stagnant.

Non-bug issues with no commits will be closed after 15 days from their
last activity.
Issues closed in this manner will be labeled stale.

Requests to reopen closed pull requests and/or issues can be submitted to
QA at BitcoinTesting.org. "

This will help cut down on the abandoned / stagnant pulls and issues.
It will also focus attention on priority items, and phase out unwanted changes.

Sidenote: QA at BitcoinTesting.org is working, unlike QA at Bitcoin.org

-Alex



From zgenjix at yahoo.com  Tue Sep 20 02:06:16 2011
From: zgenjix at yahoo.com (Amir Taaki)
Date: Mon, 19 Sep 2011 19:06:16 -0700 (PDT)
Subject: [Bitcoin-development] Bitcoin Enhancement Proposals (BEPS)
In-Reply-To: <CABsx9T0y601kjJ7ToczwhcQUoh3NZbuPa+iWwtm6-DZxZSRNPg@mail.gmail.com>
References: <201109182104.45994.luke@dashjr.org>
	<CAL0fb61B6bqGMhWtCgvy0xwfHQ_nvmhbb9uLJQWx3biENhVJNw@mail.gmail.com>
	<21269.192.251.226.206.1316448084.squirrel@lavabit.com>
	<CABsx9T0y601kjJ7ToczwhcQUoh3NZbuPa+iWwtm6-DZxZSRNPg@mail.gmail.com>
Message-ID: <1316484376.96463.YahooMailNeo@web121013.mail.ne1.yahoo.com>

Good idea.


How about BRC?

? Bitcoin Request for Comments?

Otherwise I like the sound of BERs, but it doesn't matter too much the name.



----- Original Message -----
From: Gavin Andresen <gavinandresen at gmail.com>
To: bitcoin-development at lists.sourceforge.net
Cc: 
Sent: Monday, September 19, 2011 6:57 PM
Subject: Re: [Bitcoin-development] Bitcoin Enhancement Proposals (BEPS)

New 'standard' transaction forms would be perfect candidates for BEPS.

I think we aught to have a formal proposal to separate the protocol
version from the client version, too.

--

Does anybody besides me think maybe we should name them something
other than "BEP" ?

I'm worried we'll regret it in two years when a google for "BEP003"
takes you to the BitTorrent EPs instead of the BitCoin EPs.

Maybe "BIP" == Bitcoin Improvement Proposal
or "PEB" == Proposal to Enhance Bitcoin
or "BER" == Bitcoin Enhancement Request

I think I like "BIP"? (PEB sounds like a diet soda, and I don't know
if BER should be pronounced "bear" or "beer").

I generally don't care about names, but it seems like a little
planning now might save some confusion later. And I don't want the
BitTorrent folks to get pissed off at us for 'stealing' their acronym,
either.


-- 
--
Gavin Andresen

------------------------------------------------------------------------------
BlackBerry&reg; DevCon Americas, Oct. 18-20, San Francisco, CA
Learn about the latest advances in developing for the 
BlackBerry&reg; mobile platform with sessions, labs & more.
See new tools and technologies. Register for BlackBerry&reg; DevCon today!
http://p.sf.net/sfu/rim-devcon-copy1 
_______________________________________________
Bitcoin-development mailing list
Bitcoin-development at lists.sourceforge.net
https://lists.sourceforge.net/lists/listinfo/bitcoin-development




From theymos at mm.st  Tue Sep 20 04:41:42 2011
From: theymos at mm.st (theymos)
Date: Mon, 19 Sep 2011 23:41:42 -0500
Subject: [Bitcoin-development] 0.4.x stable branch
In-Reply-To: <201109191100.58100.luke@dashjr.org>
References: <201109181930.59565.luke@dashjr.org><CABsx9T2FBNv26E4LHmi9GVfi1HLR1wR__qGp1_gjco8rwN0L4Q@mail.gmail.com>
	<201109191100.58100.luke@dashjr.org>
Message-ID: <1316493702.25740.140258143733145@webmail.messagingengine.com>

On Monday, September 19, 2011 11:00 AM, "Luke-Jr" <luke at dashjr.org> wrote:
> The problem with the current development model is that bugfixes are
> done alongside improvements, and code changes *always* have the
> potential to introduce new bugs, no matter how careful anyone is. So
> to stay on top of bugfixes right now implies risking new bugs being
> introduced. What good is getting one bug fixed, if it comes with 20
> new yet-to-be-discovered bugs?

A stable version is a good idea. This is why I'm still using 0.3.19
(with some modifications): none of the bugfixes after this version help
me much, and I don't need any of the new features. I've also thought
about starting an unofficial stable version with my modifications to
0.3.19 and some backported bugfixes.



From jgarzik at exmulti.com  Tue Sep 20 18:54:46 2011
From: jgarzik at exmulti.com (Jeff Garzik)
Date: Tue, 20 Sep 2011 14:54:46 -0400
Subject: [Bitcoin-development] Issue / Pulls timers
In-Reply-To: <CAL0fb63-zObvzirU1T6-xQnKc4=Ly2go5BBF9Q0XjqAc3o8V7A@mail.gmail.com>
References: <CAL0fb63-zObvzirU1T6-xQnKc4=Ly2go5BBF9Q0XjqAc3o8V7A@mail.gmail.com>
Message-ID: <CA+8xBpdF88tTHOT40=-9enrb4hsekexELSrctdHDK8QqWxGVXw@mail.gmail.com>

On Mon, Sep 19, 2011 at 8:20 PM, Alex Waters <ampedal at gmail.com> wrote:
> I would like to propose adding timers to the pulls / issues:
>
> https://github.com/bitcoin/bitcoin/pull/523
>
> "From time to time a pull request will become outdated. If this occurs, and
> the pull is no longer automatically mergeable; it will be closed after 15
> days. This can be avoided by rebasing the commit. Pull requests closed in this
> manner will have their corresponding issue labeled stagnant.
>
> Non-bug issues with no commits will be closed after 15 days from their
> last activity.
> Issues closed in this manner will be labeled stale.
>
> Requests to reopen closed pull requests and/or issues can be submitted to
> QA at BitcoinTesting.org. "


We need to avoid a user/contributor experience of:  "my pull request
was abruptly closed with no warning"

Contributors might not track the state of the tree on a day-to-day
basis.  Thus, following the example of bugzilla.redhat.com and many
other "tracker" applications, outdated issues first initiate an
automated warning email -- usually by adding a comment to the bug
report -- that describes the policy, why the policy (closing outdated
reports) exists, and how to avoid automated report closure.

In our case, this means a "we will close pull req, unless you update
this commit in 15 days" comment should be added to the pull req.  The
comment should describe in broad terms, with links, how to rebase a
commit, what standard expectations are, etc.

Closing with no warning should be avoided.

-- 
Jeff Garzik
exMULTI, Inc.
jgarzik at exmulti.com



From jgarzik at exmulti.com  Tue Sep 20 19:10:16 2011
From: jgarzik at exmulti.com (Jeff Garzik)
Date: Tue, 20 Sep 2011 15:10:16 -0400
Subject: [Bitcoin-development] 0.4.x stable branch
In-Reply-To: <201109181930.59565.luke@dashjr.org>
References: <201109181930.59565.luke@dashjr.org>
Message-ID: <CA+8xBpd9wBGLBnfXr=OiLYxVPvxegoi+eMqHFqpQRoaVW1uvKw@mail.gmail.com>

This is the way it works for the kernel, the process on which I've
suggested we follow with bitcoin, to a small extent:

- Version X is released.  Linus now begins accepting pull requests
into torvalds/linux.git for X+1 ("merge window opens").  It is
strongly recommended that all pull requests have seen some exposure to
the public via "linux-next", which is a tree-of-trees generated from
pulling the trees of top developers.  linux-next is maintained by
another volunteer, Stephen Rothwell.

- After a week, Linus stops taking pull requests from subsystem
maintainers ("merge window closes").  At this point, a 2.5-month
stabilization and bug fix period begins.  No new features are merged
into torvalds/linux.git, and developers are expected to focus on bug
fixing.  Developers, of course, accept new features and changes into
their own trees and branches.  linux-next publishes these, while the
main torvalds/linux.git remains in bug fix mode.

- Three months after version X is released, version X+1 is released
from torvalds/linux.git top-of-tree, and the process begins anew.

- From time to time, _not_ every version, a Linux "enterprise"
distribution like Red Hat Enterprise Linux (plug plug) or Ubuntu LTS,
will maintain a kernel for a long time, for the benefit of their
customers who need stability over new feature.  Or, the community
simply decides that a kernel should be maintained for a longer period
of time.

In particular, Greg Kroah-Hartman (gregkh) maintains stable trees for
version X-1 and X-2, where he will accept fixes provided that the fix
(or a variant thereof) has been accepted in upstream.

In that case, an employee or volunteer maintains a stable branch of
the kernel.  They "backport" fixes from the main torvalds/linux.git
tree into their own gregkh/stable-2.6.36-linux.git tree.

Thus, we observe a few things that may be applied to bitcoin:

- decentralized operation, where stable branches and bitcoin-next are
not maintained by the core team
- the community decides which versions are important to maintain long term
- the core team may maintain a merge/stabilize/merge/stabilize
workflow, introducing new features without huge negative impact to
existing userbase

-- 
Jeff Garzik
exMULTI, Inc.
jgarzik at exmulti.com



From luke at dashjr.org  Tue Sep 20 20:37:50 2011
From: luke at dashjr.org (Luke-Jr)
Date: Tue, 20 Sep 2011 16:37:50 -0400
Subject: [Bitcoin-development] 0.4.x stable branch
In-Reply-To: <CA+8xBpd9wBGLBnfXr=OiLYxVPvxegoi+eMqHFqpQRoaVW1uvKw@mail.gmail.com>
References: <201109181930.59565.luke@dashjr.org>
	<CA+8xBpd9wBGLBnfXr=OiLYxVPvxegoi+eMqHFqpQRoaVW1uvKw@mail.gmail.com>
Message-ID: <201109201637.52006.luke@dashjr.org>

On Tuesday, September 20, 2011 3:10:16 PM Jeff Garzik wrote:
> Thus, we observe a few things that may be applied to bitcoin:

This is basically what the #bitcoin-stable team wants to do.



From ampedal at gmail.com  Wed Sep 21 02:34:35 2011
From: ampedal at gmail.com (Alex Waters)
Date: Tue, 20 Sep 2011 22:34:35 -0400
Subject: [Bitcoin-development] Issue / Pulls timers
In-Reply-To: <CA+8xBpdF88tTHOT40=-9enrb4hsekexELSrctdHDK8QqWxGVXw@mail.gmail.com>
References: <CAL0fb63-zObvzirU1T6-xQnKc4=Ly2go5BBF9Q0XjqAc3o8V7A@mail.gmail.com>
	<CA+8xBpdF88tTHOT40=-9enrb4hsekexELSrctdHDK8QqWxGVXw@mail.gmail.com>
Message-ID: <CAL0fb60XRvgSxL6OPQ0r_tK5RvCny_B8ECU7VCk8D9RJcU3Q2w@mail.gmail.com>

> We need to avoid a user/contributor experience of: ?"my pull request
> was abruptly closed with no warning"

I agree, I definitely want to go about this in a non-jerk way. I would
be pissed if I spent hours coding something, and it was put on the
back burner and eventually closed (especially without notice). The
wording and process could use refinement.

> Contributors might not track the state of the tree on a day-to-day
> basis. ?Thus, following the example of bugzilla.redhat.com and many
> other "tracker" applications, outdated issues first initiate an
> automated warning email -- usually by adding a comment to the bug
> report -- that describes the policy, why the policy (closing outdated
> reports) exists, and how to avoid automated report closure.

I can definitely do this, and give a wordy notice before I start the
timer. I will write up a message that links to a rebase walkthrough
(any suggestions? I think Gavin has one somewhere...), I would like it
to be more detailed than GitHub's walk-through.

My main reason for pushing this is that it will help clear out some of
the older pulls/issues that exist right now. I'm hoping that in the
future, the QA process will be good enough that pulls/issues won't
fall behind from lack of testing - and the timers will be used very
sparingly. It should only be in place to sort out the pulls/issues
that the majority doesn't want included in the client.



From ampedal at gmail.com  Wed Sep 21 14:24:25 2011
From: ampedal at gmail.com (Alex Waters)
Date: Wed, 21 Sep 2011 10:24:25 -0400
Subject: [Bitcoin-development] 0.4.x stable branch
In-Reply-To: <201109201637.52006.luke@dashjr.org>
References: <201109181930.59565.luke@dashjr.org>
	<CA+8xBpd9wBGLBnfXr=OiLYxVPvxegoi+eMqHFqpQRoaVW1uvKw@mail.gmail.com>
	<201109201637.52006.luke@dashjr.org>
Message-ID: <CAL0fb63P9CLEi3dRumYJzj2jSAggULzei8THW6wYJJ5ZpGmcXA@mail.gmail.com>

I think what Jeff has said is ideal for a stable 1.0 or 1.1 release of
a kernal. I also think it's absolutely the direction we should be
heading in, but not this afternoon. The desire to keep a 0.4.x stable
branch is a symptom of a bigger QA problem, one that I am attempting
to address in general.

Gavin has reminded me to test, test, test. I implore anyone who clicks
the pull button to not only test their code, but write down how they
tested it. The issue tracker is somewhat out of control, and my
opinion is that a stable branch is not going to fix it.

This stage of development can be agitating, as you implement code in
the wild - it is outpaced or broken easily. The sooner we can get a
robust QA process to hammer out bugs, and process pulls - the closer
we are to a stable 1.0 release.

Please contact me if you would like to help contribute to the bug
hammering - I promise that we can find ways to make it
interesting/challenging. (working on a zapper too!)



From thiagocmartinsc at gmail.com  Thu Sep 22 07:46:22 2011
From: thiagocmartinsc at gmail.com (=?ISO-2022-JP?B?TWFydGlueCAtIBskQiU4JSchPCVgJTobKEI=?=)
Date: Thu, 22 Sep 2011 04:46:22 -0300
Subject: [Bitcoin-development] 0.4 Release Candidate 2
In-Reply-To: <CABsx9T2Y3CmBr=twHvFOEoQCVcSySZ+JyEQXcOseRKxJi3KoLw@mail.gmail.com>
References: <CABsx9T2Y3CmBr=twHvFOEoQCVcSySZ+JyEQXcOseRKxJi3KoLw@mail.gmail.com>
Message-ID: <CAJSM8J0=Nykpsa0MLR8=-x3GOphuppY9RBqzx7omKWr8h0Sbuw@mail.gmail.com>

Hi everybody!!

 This is my first message here... I'm ThiagoCMC at bitcointalk...

 Well, one of the features that I like most is that, every time I receive
some Bitcoin amount, a new address appear at my "AddressBook"automatically,
AND, I like to track it.

 This feature is broken at 0.3.24 but it is working again! Thanks BTW!!

 But, I've read in some places that you guys are thinking in disable this
feature... Is that true?!

 PLEASE, do NOT deactivate this feature! I mean, do not deactivate ANY
feature. Instead of, just add a option to turn it ON and OFF. Right?!  ^^

 Bitcoin is the most amazing project since Linux and Git!!  :-P

 Thank you guys!!

Best,
Thiago

On 9 September 2011 11:02, Gavin Andresen <gavinandresen at gmail.com> wrote:

> I just tagged the git tree:  v0.4.00rc2
>
> Fixes from release candidate 1:
>
> + Optimize database writes for transactions with lots of inputs
> + Fix a deadlock that could occur when adding addresses from 'addr'
> messages and irc
> + Fix a potential problem with duplicate, un-spendable coinbase
> transactions if you were generating bitcoins, with a locked wallet,
> and ran out of keypool keys.
>
>
> --
> --
> Gavin Andresen
>
>
> ------------------------------------------------------------------------------
> Why Cloud-Based Security and Archiving Make Sense
> Osterman Research conducted this study that outlines how and why cloud
> computing security and archiving is rapidly being adopted across the IT
> space for its ease of implementation, lower cost, and increased
> reliability. Learn more. http://www.accelacomm.com/jaw/sfnl/114/51425301/
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110922/e9d8d5b6/attachment.html>

From luke at dashjr.org  Thu Sep 22 20:11:16 2011
From: luke at dashjr.org (Luke-Jr)
Date: Thu, 22 Sep 2011 16:11:16 -0400
Subject: [Bitcoin-development] Bitcoin-qt ready for merging
In-Reply-To: <CAJNQ0su7iRsQ2zPhXcd774TTqYzJGT+E9ss4D=6Ja3QSrpLdkw@mail.gmail.com>
References: <CAJNQ0su7iRsQ2zPhXcd774TTqYzJGT+E9ss4D=6Ja3QSrpLdkw@mail.gmail.com>
Message-ID: <201109221611.18163.luke@dashjr.org>

Various issues with bitcoin-qt's qmake build system still...

Regressions remaining on bitcoin-qt branch:
- Building without DBus still tries to use dbus symbols (and fails linking)
- No way to disable SSL support for JSON-RPC
- UPnP is no longer built/enabled by default

These weren't quite working in the old makefiles either, but it was a lot
easier to workaround with DEBUGFLAGS:
- No way to specify include path or library names for bdb and boost
  (won't build, since bdb C++ includes aren't default on many OS)
- No way to build with out-of-tree/system cryptopp or json



From witchspace81 at gmail.com  Thu Sep 22 22:25:31 2011
From: witchspace81 at gmail.com (John Smith)
Date: Thu, 22 Sep 2011 22:25:31 +0000
Subject: [Bitcoin-development] 0.4 Release Candidate 2
In-Reply-To: <CAJSM8J0=Nykpsa0MLR8=-x3GOphuppY9RBqzx7omKWr8h0Sbuw@mail.gmail.com>
References: <CABsx9T2Y3CmBr=twHvFOEoQCVcSySZ+JyEQXcOseRKxJi3KoLw@mail.gmail.com>
	<CAJSM8J0=Nykpsa0MLR8=-x3GOphuppY9RBqzx7omKWr8h0Sbuw@mail.gmail.com>
Message-ID: <CAJNQ0su4LjanK_miyL3_BqUxxvgr90A_aUcw8E4UPVUtAykG-g@mail.gmail.com>

2011/9/22 Martinx - ????? <thiagocmartinsc at gmail.com>

> Hi everybody!!
>
>  This is my first message here... I'm ThiagoCMC at bitcointalk...
>
>  Well, one of the features that I like most is that, every time I receive
> some Bitcoin amount, a new address appear at my "AddressBook"automatically,
> AND, I like to track it.
>

Can I ask your rationale for this?

>From what I've noticed, most people's workflow is to create a new receiving
address for each new contact that sends them bitcoins (either for every
transaction, or they reuse the address for this person).  To make sure that
the address is labeled, they create it themselves and then give out the
generated address.

They are utterly spooked by suddenly appearing unlabeled addresses, of which
they are unsure whether they are used, and which can never be removed.

I'm fine with adding it back as an option but please leave it disabled by
default...

JS
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110922/532731f7/attachment.html>

From thiagocmartinsc at gmail.com  Thu Sep 22 22:55:05 2011
From: thiagocmartinsc at gmail.com (=?ISO-2022-JP?B?TWFydGlueCAtIBskQiU4JSchPCVgJTobKEI=?=)
Date: Thu, 22 Sep 2011 19:55:05 -0300
Subject: [Bitcoin-development] 0.4 Release Candidate 2
In-Reply-To: <CAJNQ0su4LjanK_miyL3_BqUxxvgr90A_aUcw8E4UPVUtAykG-g@mail.gmail.com>
References: <CABsx9T2Y3CmBr=twHvFOEoQCVcSySZ+JyEQXcOseRKxJi3KoLw@mail.gmail.com>
	<CAJSM8J0=Nykpsa0MLR8=-x3GOphuppY9RBqzx7omKWr8h0Sbuw@mail.gmail.com>
	<CAJNQ0su4LjanK_miyL3_BqUxxvgr90A_aUcw8E4UPVUtAykG-g@mail.gmail.com>
Message-ID: <CAJSM8J1=FWAJVqgQ0HG=0TQU25hrsym=edthsB+sMqfzqgR2GQ@mail.gmail.com>

Hi John!

 Thank you for your answer...

 I have "two kinds" of address, the "static address", which I created myself
for any personal reason, and the "dinamic address", which is the automatic
generated address when I receive some Bitcoin amount, I label each one (the
automatic created by the software) with something like "DINAMIC-1",
"DINAMIC-2" and so on...

 I use my "dinamic address" in a "random" way, following the moon phase...
lol

 My point is: I like to keep track of all my Bitcoin Address, they are all
my...

 Please, leave this feature alive, as a option, disabled by default.

 I don't know why people fear about their own address... It is all under
"Receiving" tab! There is nothing to fear about it.

 ---

 BTW, I think this option should have some explanations at the "Options
screen", for example:

 For increasing your anonymity, enable the "Dinamic Bitcoin Address" option
and make sure to always use one new and different address for each
transaction. And do not link each address with your person!

 (X) Dynamic Bitcoin Address (a new Bitcoin Address will be created
automatically for you, after each new received Bitcoin amount)

 ---

 Thank you so much!

Best,
Thiago

2011/9/22 John Smith <witchspace81 at gmail.com>

>
>
> 2011/9/22 Martinx - ????? <thiagocmartinsc at gmail.com>
>
>> Hi everybody!!
>>
>>  This is my first message here... I'm ThiagoCMC at bitcointalk...
>>
>>  Well, one of the features that I like most is that, every time I receive
>> some Bitcoin amount, a new address appear at my "AddressBook"automatically,
>> AND, I like to track it.
>>
>
> Can I ask your rationale for this?
>
> From what I've noticed, most people's workflow is to create a new receiving
> address for each new contact that sends them bitcoins (either for every
> transaction, or they reuse the address for this person).  To make sure that
> the address is labeled, they create it themselves and then give out the
> generated address.
>
> They are utterly spooked by suddenly appearing unlabeled addresses, of
> which they are unsure whether they are used, and which can never be removed.
>
> I'm fine with adding it back as an option but please leave it disabled by
> default...
>
> JS
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110922/c1429a26/attachment.html>

From thiagocmartinsc at gmail.com  Fri Sep 23 01:20:00 2011
From: thiagocmartinsc at gmail.com (=?ISO-2022-JP?B?TWFydGlueCAtIBskQiU4JSchPCVgJTobKEI=?=)
Date: Thu, 22 Sep 2011 22:20:00 -0300
Subject: [Bitcoin-development] 0.4 Release Candidate 2
In-Reply-To: <CAJSM8J1=FWAJVqgQ0HG=0TQU25hrsym=edthsB+sMqfzqgR2GQ@mail.gmail.com>
References: <CABsx9T2Y3CmBr=twHvFOEoQCVcSySZ+JyEQXcOseRKxJi3KoLw@mail.gmail.com>
	<CAJSM8J0=Nykpsa0MLR8=-x3GOphuppY9RBqzx7omKWr8h0Sbuw@mail.gmail.com>
	<CAJNQ0su4LjanK_miyL3_BqUxxvgr90A_aUcw8E4UPVUtAykG-g@mail.gmail.com>
	<CAJSM8J1=FWAJVqgQ0HG=0TQU25hrsym=edthsB+sMqfzqgR2GQ@mail.gmail.com>
Message-ID: <CAJSM8J2w4r5uZELkt4pMddebgv8oHz3tbBDdXOL9bY9iA7OVxg@mail.gmail.com>

Hi!

 When my network goes down and I close the Bitcoin, I see the following
message:

---
martinx at floyd:~$ ./bitcoin-0.4.0rc2/bin/32/bitcoin
connect: Network is unreachable


************************
UNKNOWN EXCEPTION
bitcoin in CMyApp::OnUnhandledException()

Segmentation fault
martinx at floyd:~$
---

Thanks,
Thiago

2011/9/22 Martinx - ????? <thiagocmartinsc at gmail.com>

> Hi John!
>
>  Thank you for your answer...
>
>  I have "two kinds" of address, the "static address", which I created
> myself for any personal reason, and the "dinamic address", which is the
> automatic generated address when I receive some Bitcoin amount, I label each
> one (the automatic created by the software) with something like "DINAMIC-1",
> "DINAMIC-2" and so on...
>
>  I use my "dinamic address" in a "random" way, following the moon phase...
> lol
>
>  My point is: I like to keep track of all my Bitcoin Address, they are all
> my...
>
>  Please, leave this feature alive, as a option, disabled by default.
>
>  I don't know why people fear about their own address... It is all under
> "Receiving" tab! There is nothing to fear about it.
>
>  ---
>
>  BTW, I think this option should have some explanations at the "Options
> screen", for example:
>
>  For increasing your anonymity, enable the "Dinamic Bitcoin Address" option
> and make sure to always use one new and different address for each
> transaction. And do not link each address with your person!
>
>  (X) Dynamic Bitcoin Address (a new Bitcoin Address will be created
> automatically for you, after each new received Bitcoin amount)
>
>  ---
>
>  Thank you so much!
>
> Best,
> Thiago
>
> 2011/9/22 John Smith <witchspace81 at gmail.com>
>
>>
>>
>> 2011/9/22 Martinx - ????? <thiagocmartinsc at gmail.com>
>>
>>> Hi everybody!!
>>>
>>>  This is my first message here... I'm ThiagoCMC at bitcointalk...
>>>
>>>  Well, one of the features that I like most is that, every time I receive
>>> some Bitcoin amount, a new address appear at my "AddressBook"automatically,
>>> AND, I like to track it.
>>>
>>
>> Can I ask your rationale for this?
>>
>> From what I've noticed, most people's workflow is to create a new
>> receiving address for each new contact that sends them bitcoins (either for
>> every transaction, or they reuse the address for this person).  To make sure
>> that the address is labeled, they create it themselves and then give out the
>> generated address.
>>
>> They are utterly spooked by suddenly appearing unlabeled addresses, of
>> which they are unsure whether they are used, and which can never be removed.
>>
>> I'm fine with adding it back as an option but please leave it disabled by
>> default...
>>
>> JS
>>
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110922/67f08fa4/attachment.html>

From thiagocmartinsc at gmail.com  Fri Sep 23 02:05:24 2011
From: thiagocmartinsc at gmail.com (=?ISO-2022-JP?B?TWFydGlueCAtIBskQiU4JSchPCVgJTobKEI=?=)
Date: Thu, 22 Sep 2011 23:05:24 -0300
Subject: [Bitcoin-development] 0.4 Release Candidate 2
In-Reply-To: <CAJSM8J2w4r5uZELkt4pMddebgv8oHz3tbBDdXOL9bY9iA7OVxg@mail.gmail.com>
References: <CABsx9T2Y3CmBr=twHvFOEoQCVcSySZ+JyEQXcOseRKxJi3KoLw@mail.gmail.com>
	<CAJSM8J0=Nykpsa0MLR8=-x3GOphuppY9RBqzx7omKWr8h0Sbuw@mail.gmail.com>
	<CAJNQ0su4LjanK_miyL3_BqUxxvgr90A_aUcw8E4UPVUtAykG-g@mail.gmail.com>
	<CAJSM8J1=FWAJVqgQ0HG=0TQU25hrsym=edthsB+sMqfzqgR2GQ@mail.gmail.com>
	<CAJSM8J2w4r5uZELkt4pMddebgv8oHz3tbBDdXOL9bY9iA7OVxg@mail.gmail.com>
Message-ID: <CAJSM8J1YPCB92oKjO_JDrBNEH7ZtEeoqr0=cPnukX64ueBR8TQ@mail.gmail.com>

BTW...

 I'm running Ubuntu 11.04 32 bits...

 When I just close the bitcoin with the network still online, I see almost
the same message:

---
martinx at floyd:~$ *./bitcoin-0.4.0rc2/bin/32/bitcoin*


************************
UNKNOWN EXCEPTION
bitcoin in CMyApp::OnUnhandledException()

Segmentation fault
martinx at floyd:~$ *lsb_release -ra*
No LSB modules are available.
Distributor ID: Ubuntu
Description: Ubuntu 11.04
Release: 11.04
Codename: natty
---

Thanks!
Thiago

2011/9/22 Martinx - ????? <thiagocmartinsc at gmail.com>

> Hi!
>
>  When my network goes down and I close the Bitcoin, I see the following
> message:
>
> ---
> martinx at floyd:~$ ./bitcoin-0.4.0rc2/bin/32/bitcoin
> connect: Network is unreachable
>
>
> ************************
> UNKNOWN EXCEPTION
> bitcoin in CMyApp::OnUnhandledException()
>
> Segmentation fault
> martinx at floyd:~$
> ---
>
> Thanks,
> Thiago
>
> 2011/9/22 Martinx - ????? <thiagocmartinsc at gmail.com>
>
>> Hi John!
>>
>>  Thank you for your answer...
>>
>>  I have "two kinds" of address, the "static address", which I created
>> myself for any personal reason, and the "dinamic address", which is the
>> automatic generated address when I receive some Bitcoin amount, I label each
>> one (the automatic created by the software) with something like "DINAMIC-1",
>> "DINAMIC-2" and so on...
>>
>>  I use my "dinamic address" in a "random" way, following the moon phase...
>> lol
>>
>>  My point is: I like to keep track of all my Bitcoin Address, they are all
>> my...
>>
>>  Please, leave this feature alive, as a option, disabled by default.
>>
>>  I don't know why people fear about their own address... It is all under
>> "Receiving" tab! There is nothing to fear about it.
>>
>>  ---
>>
>>  BTW, I think this option should have some explanations at the "Options
>> screen", for example:
>>
>>  For increasing your anonymity, enable the "Dinamic Bitcoin Address"
>> option and make sure to always use one new and different address for each
>> transaction. And do not link each address with your person!
>>
>>  (X) Dynamic Bitcoin Address (a new Bitcoin Address will be created
>> automatically for you, after each new received Bitcoin amount)
>>
>>  ---
>>
>>  Thank you so much!
>>
>> Best,
>> Thiago
>>
>> 2011/9/22 John Smith <witchspace81 at gmail.com>
>>
>>>
>>>
>>> 2011/9/22 Martinx - ????? <thiagocmartinsc at gmail.com>
>>>
>>>> Hi everybody!!
>>>>
>>>>  This is my first message here... I'm ThiagoCMC at bitcointalk...
>>>>
>>>>  Well, one of the features that I like most is that, every time I
>>>> receive some Bitcoin amount, a new address appear at my
>>>> "AddressBook"automatically, AND, I like to track it.
>>>>
>>>
>>> Can I ask your rationale for this?
>>>
>>> From what I've noticed, most people's workflow is to create a new
>>> receiving address for each new contact that sends them bitcoins (either for
>>> every transaction, or they reuse the address for this person).  To make sure
>>> that the address is labeled, they create it themselves and then give out the
>>> generated address.
>>>
>>> They are utterly spooked by suddenly appearing unlabeled addresses, of
>>> which they are unsure whether they are used, and which can never be removed.
>>>
>>> I'm fine with adding it back as an option but please leave it disabled by
>>> default...
>>>
>>> JS
>>>
>>>
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110922/07ce02e5/attachment.html>

From bitcoin-list at bluematt.me  Fri Sep 23 04:57:06 2011
From: bitcoin-list at bluematt.me (Matt Corallo)
Date: Fri, 23 Sep 2011 00:57:06 -0400
Subject: [Bitcoin-development] Bitcoin 0.4 Release
Message-ID: <1316753826.3062.25.camel@BMThinkPad.lan.bluematt.me>

Gavin tagged 0.4 release today, so here are my gitian builds.
These zips are in gitian-download format which means they can be
automatically downloaded and pgp-verified using the gitian-updater
script (see
https://github.com/devrandom/gitian-builder/blob/master/share/gitian-updater). Currently they only contain my sig, but if other devs have time to gitian build and re-roll the same zip with other sigs added as well it would make updating via gitian scripts easy and secure :).

http://dl.dropbox.com/u/29653426/bitcoin-0.4.0-linux-gitian.zip
http://dl.dropbox.com/u/29653426/bitcoin-0.4.0-win32-gitian.zip

SHA1:
3794ec0ce8a3ea96200b3970937c5f224313267d  bitcoin-0.4.0-linux-gitian.zip
a4857b2238a102d8f4ba9a2bdfed74ddd985ad3d  bitcoin-0.4.0-win32-gitian.zip

Email PGP signed as always.

Matt
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 836 bytes
Desc: This is a digitally signed message part
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110923/5e2738a2/attachment.sig>

From pieter.wuille at gmail.com  Fri Sep 23 16:21:04 2011
From: pieter.wuille at gmail.com (Pieter Wuille)
Date: Fri, 23 Sep 2011 18:21:04 +0200
Subject: [Bitcoin-development] Beyond IP transactions: towards a bitcoin
	payment protocol
Message-ID: <20110923162102.GA13532@ulyssis.org>

Hello everyone,

here is an idea i've bean writing up: https://gist.github.com/1237788

I hope it can start some discussion about moving away from static bitcoin addresses
as descriptions for transactions. I suppose it's a candidate for a BIP/BEPS/BFC/...,
but as things don't seem to have been decided completely about those, I put it in a
Gist.

Please, comment.

-- 
Pieter



From kjj at jerviss.org  Fri Sep 23 17:38:48 2011
From: kjj at jerviss.org (kjj)
Date: Fri, 23 Sep 2011 12:38:48 -0500
Subject: [Bitcoin-development] Beyond IP transactions: towards a bitcoin
 payment protocol
In-Reply-To: <20110923162102.GA13532@ulyssis.org>
References: <20110923162102.GA13532@ulyssis.org>
Message-ID: <4E7CC428.6020500@jerviss.org>

Pieter Wuille wrote:
> Hello everyone,
>
> here is an idea i've bean writing up: https://gist.github.com/1237788
>
> I hope it can start some discussion about moving away from static bitcoin addresses
> as descriptions for transactions. I suppose it's a candidate for a BIP/BEPS/BFC/...,
> but as things don't seem to have been decided completely about those, I put it in a
> Gist.
>
> Please, comment.
>
This may just be me, but this really looks like an incredibly convoluted 
way to solve a bunch of problems that aren't really problems.  The 
central issue that I see, is that you assume that there is no out of 
band channel, as if people were just sending transactions to addresses 
that came to them in a dream.

I think that this assumption is only true when it doesn't matter.  For 
example, I have a donation link in my sig on the forums.  I don't care 
much who sends to it, or why, and I certainly don't need annotations or 
a refund address.  The rest of the time, payments are sent to addresses 
that already have sufficient context.

Only one of the advantages listed is actually an advantage.  That is 
that payments to stale addresses can be stopped.  This isn't much of an 
advantage though, as someone blindly sending payments (donations, 
really) to addresses found on backup tapes and web archives without 
verifying that they are still current kinda deserve what they get.  So 
it really only stops payments to services that go defunct the same day 
(more or less).

In the end, I just don't see the value in giving a URL so that I can go 
ask a server for information that could just as easily have been encoded 
in the URL directly.

Then again, I'm cynical, and didn't sleep very well last night.  Maybe 
the next person will think better of it.



From gavinandresen at gmail.com  Fri Sep 23 18:09:58 2011
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Fri, 23 Sep 2011 14:09:58 -0400
Subject: [Bitcoin-development] Bitcoin 0.4.0 released
Message-ID: <CABsx9T1Z5NPbDfPcRKvZ8f+e05RMQVhm2WQyeFNti_w5nk4D7Q@mail.gmail.com>

Thanks to everybody who contributed:

Bitcoin version 0.4.0 is now available for download at:
  http://sourceforge.net/projects/bitcoin/files/Bitcoin/bitcoin-0.4.0/

The main feature in this release is wallet private key encryption;
you can set a passphrase that must be entered before sending coins.
See below for more information; if you decide to encrypt your wallet,
WRITE DOWN YOUR PASSPHRASE AND PUT IT IN A SECURE LOCATION. If you
forget or lose your wallet passphrase, you lose your bitcoins.
Previous versions of bitcoin are unable to read encrypted wallets,
and will crash on startup if the wallet is encrypted.

Also note: bitcoin version 0.4 uses a newer version of Berkeley DB
(bdb version 4.8) than previous versions (bdb 4.7). If you upgrade
to version 0.4 and then revert back to an earlier version of bitcoin
the it may be unable to start because bdb 4.7 cannot read bdb 4.8
"log" files.

Notable bug fixes from version 0.3.24:
--------------------------------------

Fix several bitcoin-becomes-unresponsive bugs due to multithreading
deadlocks.

Optimize database writes for large (lots of inputs) transactions
(fixes a potential denial-of-service attack)



Wallet Encryption
-----------------
Bitcoin supports native wallet encryption so that people who steal your
wallet file don't automatically get access to all of your Bitcoins.
In order to enable this feature, choose "Encrypt Wallet" from the
Options menu.  You will be prompted to enter a passphrase, which
will be used as the key to encrypt your wallet and will be needed
every time you wish to send Bitcoins.  If you lose this passphrase,
you will lose access to spend all of the bitcoins in your wallet,
no one, not even the Bitcoin developers can recover your Bitcoins.
This means you are responsible for your own security, store your
passphrase in a secure location and do not forget it.

Remember that the encryption built into bitcoin only encrypts the
actual keys which are required to send your bitcoins, not the full
wallet.  This means that someone who steals your wallet file will
be able to see all the addresses which belong to you, as well as the
relevant transactions, you are only protected from someone spending
your coins.

It is recommended that you backup your wallet file before you
encrypt your wallet.  To do this, close the Bitcoin client and
copy the wallet.dat file from ~/.bitcoin/ on Linux, /Users/(user
name)/Application Support/Bitcoin/ on Mac OSX, and %APPDATA%/Bitcoin/
on Windows (that is /Users/(user name)/AppData/Roaming/Bitcoin on
Windows Vista and 7 and /Documents and Settings/(user name)/Application
Data/Bitcoin on Windows XP).  Once you have copied that file to a
safe location, reopen the Bitcoin client and Encrypt your wallet.
If everything goes fine, delete the backup and enjoy your encrypted
wallet.  Note that once you encrypt your wallet, you will never be
able to go back to a version of the Bitcoin client older than 0.4.

Keep in mind that you are always responsible for your own security.
All it takes is a slightly more advanced wallet-stealing trojan which
installs a keylogger to steal your wallet passphrase as you enter it
in addition to your wallet file and you have lost all your Bitcoins.
Wallet encryption cannot keep you safe if you do not practice
good security, such as running up-to-date antivirus software, only
entering your wallet passphrase in the Bitcoin client and using the
same passphrase only as your wallet passphrase.

See the doc/README file in the bitcoin source for technical details
of wallet encryption.


Full changelog ("git shortlog --no-merges v0.3.24..")
-----------------------------------------
Abraham Jewowich (1):
      Fix bug with accessing vchData[0] when vchData is empty.     Fix
typo in CBase58Data::CompareTo

Alex B (2):
      Romanian translation added
      Spanish translation update

Alex Waters (1):
      Updated readme file

Daniel Folkinshteyn (1):
      Update the list of seednodes.

Dawid Spiechowicz (1):
      added polish wallet encryption messages

Dean Lee (1):
      Update to the Chinese Simp translation

Dev Random (4):
      Linux gitian config with separate wxWidgets build
      Mingw gitian with separate wxWidgets and boost
      Mingw gitian build with deterministic bitcoin.exe by use of faketime
      Add Gitian Build descriptors for Boost and wxWidgets.

Doug Huff (1):
      Make mlock() and munlock() portable to systems that require the
address to be on a page boundary.

Dylan Noblesmith (1):
      mlock() all private keys in memory

Eric Hosmer (1):
      Added crypter to makefile.vc.

Fabian H jr. (1):
      Updated checkpoints, maybe Tx fee should be reduced to 0.0001
from 0.0005 and maximum minimum tx should be 0.0010.

Gavin Andresen (24):
      Do-nothing MapPort() ifndef USE_UPNP.  fixes #450
      Don't std::advance past beginning of transactions array.  Fixes #465
      Remove unused ScanMessageStart function
      Compile with DEBUG_LOCKORDER to detect inconsistent lock
orderings that can cause deadlocks
      CHECKMULTISIG unit tests.
      Highlight mis-matching locks
      Fix rpc-hanging deadlocks
      Fixed potential deadlocks in GUI code.     Also changed
semantics of CWalletTx::GetTxTime(); now always returns the time the
transaction was received by this node, not the average block time.
And added information about -DDEBUG_LOCKORDER to coding.txt.
      Fix typo ("you own security")
      SetCrypted() obtains keystore lock, to be safe.
      Logic running with -keypool=0 was wrong (empty keys were being
returned). Fixes #445
      Fix RPC call name in error message.
      obtain cs_wallet mutex to protect vchDefaultKey
      Fixed regression I introduced: wallets with lots of transactions
were unusable in GUI.
      Fix bad merge: getaccountaddress was broken for new accounts
      Give hard-coded seed nodes a random last-seen time, to randomize
order they're tried.
      Do not try to download blockchain from 0.3.23 nodes
      If compiled -DDEBUG_LOCKORDER and run with -debug, print out
every mutex lock/unlock (helpful for debugging
something-is-holding-a-mutex-too-long problems)
      Stay connected to seed nodes; disconnecting causes problems if
you are trying to make the initial blockchain download.
      Versions 0.3.20 THROUGH 0.3.23 have trouble with blockchain
downloads; avoid them
      Bumped version numbers to 0.4.0rc1
      Optimize database writes for transactions with lots of TxIns.
 Patch from ArtForz, who discovered the problem.
      Fix AddAddress cs_mapaddresses/db transaction deadlock
      Fix QA email address

Giel van Schijndel (15):
      fix warning on 64bit systems: cast to pointer from integer of
different size [-Wint-to-pointer-cast]
      fix warnings: expression result unused [-Wunused-value]
      fix warnings: using the result of an assignment as a condition
without parentheses [-Wparentheses]
      fix warning: comparison of unsigned expression < 0 is always
false [-Wtautological-compare]
      fix warning: X enumeration values not handled in switch [-Wswitch-enum]
      fix warning: unused variable 'X' [-Wunused-variable]
      fix warning: unused function 'SigIllHandlerSSE2' [-Wunused-function]
      fix warning: variable ?nMinDepth? set but not used
[-Wunused-but-set-variable]
      fix warning: control reaches end of non-void function [-Wreturn-type]
      Make some global variables less-global (static)
      Cleanup makefiles such that diffs to them are smaller
      Move func 'REF' from util.h to serialize.h
      Start moving protocol-specific code to protocol.[ch]pp
      Move CAddress to protocol.[ch]pp
      Move CInv to protocol.[ch]pp

Han Lin Yap (2):
      Comment "deprecated"
      Add a note to only include .po file

Jay Weisskopf (4):
      Add logos/branding currently found on bitcoin.org into NSIS installer.
      Set default compression for NSIS installer to LZMA.
      Remove NSIS branding from bottom divider.
      Increase resolution of Windows icon.

Jeff Garzik (8):
      Update CWallet::LoadWallet for proper return type.
      Bump version to 0.3.25
      doc/README: word wrap into something readable
      CAddrDB::LoadAddresses: properly initialize CAddress
      src/makefile.unix: remove -DFOURWAYSSE2
      Add reference python miner, in contrib/pyminer/
      README.md: word wrap text file
      Revert "Define MSG_NOSIGNAL to 0 on platforms where it is unavailable."

Jeroenz0r (1):
      Translation from "Open Bitcoin" to "Verstuur Bitcoins"

JoelKatz (1):
      Fix UNIX-specific thread handle leak.

Johannes Henninger (1):
      Identify as "Bitcoin + version number" when mapping UPnP port

Luke Dashjr (7):
      Update nTime after nExtraNonce to avoid potential race
(extraNonce being reset due to just-occurred time change after nTime
is set)
      Reset extraNonce only every 15 seconds, just in case some miner
is updating time himself and stuff
      Reset extraNonce only when prevBlock changes, so miners can
continue updating the time on their work until it's stale
      Support for boost filesystem version 3
      ignore stuff
      Save coinbase, not just extraNonce
      Bugfix: Use timestamp in coinbase rather than "bits", needed to
ensure coinbase txn is unique even if address is the same

Matt Corallo (35):
      Add minversion to wallet.
      Add wallet privkey encryption.
      Set the number of SHA512 rounds based on the speed of the computer.
      Push unlocked_until in getinfo.
      Dynamically remove/insert the Options for encryption in the menus.
      Add the walletlock RPC method to lock the wallet manually.
      Add Wallet Encryption section to README
      Use DB Transactions when encrypting wallet.     This speeds up
the encryption process significantly.
      Make an invalid addrIncoming so that old clients crash.
      Update makefile.linux-mingw to work with crypter and UPnP fix.
      Fix makefile.linux-mingw
      Fix crashes when a wallet is locked and GetReservedKey() is called
      Generate Warning when using default key.
      Fix Build in GetReservedKey() in wallet.cpp
      Fix bad return values in LoadWallet.
      Actually use mapAlreadyAskedFor.
      Fix EncryptKeys crash introduced by a9ba4710, identified by TD.
      Check for duplicate txins in CheckTransaction.
      Make it clear that setting proxy requires restart to fully apply.
      Don't listen if on TOR (resolves #441).
      Add missing include to serialize.h
      Add file for transaction tests.
      Cleanup test suite output to be more useful.
      Unify copyright notices.
      Missed a 'password' should be 'passphrase'.
      Fix incorrect RPC error messages
      Add specific wallet encryption details to doc/README
      Upgrade dependancies and tweak build process.
      Update binary mos to latest translations.
      Fix build process to actually work.
      Add binary mo for new translation.
      Update gitian build descriptors to produce proper builds.
      Update bitcoin icon to make nsis setup exe deterministic.
      Update binary mo to match latest po translation.
      Restructure gitian files and add download config files.

Michael Bemmerl (4):
      Basically some grammatical fixes of the German translation.
      Added German wallet encryption messages translation.
      Changed Russian translation according to comment in issue 395
      Updated German translation

Michal Zima (1):
      Updated czech translation

Nils Schneider (2):
      log low-level network messages only when fDebug is set
      missed printf in AbortMessage(); merged printfs in EndMessage

Patrick Varilly (1):
      Single DB transaction for all addresses in a message

Pieter Wuille (11):
      Prepare codebase for Encrypted Keys.
      Do not use obsolete CPrivKey for passing keys around
      Bugfix: add autogenerated addresses to address book
      get rid of mapPubKeys
      Use CBitcoinAddress instead of string/uint160
      split off CBase58Data from CBitcoinAddress
      Fix for small change outputs
      Bugfix: don't overuse limited ExtractAddress
      avoid strAddress + validity checks
      SocketHandler thread can be detached
      Updated dutch translation

St?phane Gimenez (1):
      Single DB transaction for addresses from DNS seeds

Vegard Nossum (6):
      Add missing includes to key.h
      Add missing include to script.h
      Add missing includes to net.h
      Fix testing setup
      Add prototype for EvalScript() to script.h
      Add a file for script tests

Venkatesh Srinivas (4):
      Test for SO_NOSIGPIPE rather than assuming all BSDs support it.
      Qualify make_tuple with boost:: namespace.
      Use 'unsigned char' rather than 'char' for pchMessageStart.
      Define MSG_NOSIGNAL to 0 on platforms where it is unavailable.

Wladimir J. van der Laan (2):
      remove magic number: change threshold for nLockTime to constant
      make SetHash160 return a value (as specified in the function signature)

cjdelisle (1):
      wxWidgets needs to be at least version 2.9.1 because wallet
crypto uses ToStdString() which is not in 2.9.0

ovdeathiam (1):
      Edited locale/pl/LC_MESSAGES/bitcoin.po via GitHub



From nanotube at gmail.com  Fri Sep 23 19:45:50 2011
From: nanotube at gmail.com (Daniel F)
Date: Fri, 23 Sep 2011 15:45:50 -0400
Subject: [Bitcoin-development] Bitcoin Enhancement Proposals (BEPS)
In-Reply-To: <CABsx9T0y601kjJ7ToczwhcQUoh3NZbuPa+iWwtm6-DZxZSRNPg@mail.gmail.com>
References: <201109182104.45994.luke@dashjr.org>
	<CAL0fb61B6bqGMhWtCgvy0xwfHQ_nvmhbb9uLJQWx3biENhVJNw@mail.gmail.com>
	<21269.192.251.226.206.1316448084.squirrel@lavabit.com>
	<CABsx9T0y601kjJ7ToczwhcQUoh3NZbuPa+iWwtm6-DZxZSRNPg@mail.gmail.com>
Message-ID: <CAHY2ayDxO035Hz0iSQvO7mj4=ryqQ+UFxy6Utv=T7nwYiuYS5w@mail.gmail.com>

> Does anybody besides me think maybe we should name them something
> other than "BEP" ?
>
> I'm worried we'll regret it in two years when a google for "BEP003"
> takes you to the BitTorrent EPs instead of the BitCoin EPs.

this is an excellent "painting the bikeshed" question, so i cannot
resist participation :)

imo, anyone who has any business looking at the beps (which would
generally be technically-minded people), will be smart enough to
google for "bitcoin bep003" to find what he's looking for. so i don't
see an issue, whatever acronym we end up using.



From andreas at schildbach.de  Fri Sep 23 19:42:08 2011
From: andreas at schildbach.de (Andreas Schildbach)
Date: Fri, 23 Sep 2011 21:42:08 +0200
Subject: [Bitcoin-development] Bitcoin 0.4.0 released
In-Reply-To: <CABsx9T1Z5NPbDfPcRKvZ8f+e05RMQVhm2WQyeFNti_w5nk4D7Q@mail.gmail.com>
References: <CABsx9T1Z5NPbDfPcRKvZ8f+e05RMQVhm2WQyeFNti_w5nk4D7Q@mail.gmail.com>
Message-ID: <j5ineh$g3a$1@dough.gmane.org>

On 09/23/2011 08:09 PM, Gavin Andresen wrote:

> Bitcoin version 0.4.0 is now available for download at:
>   http://sourceforge.net/projects/bitcoin/files/Bitcoin/bitcoin-0.4.0/

Thanks everyone for this great release!

Can you post secure file checksums somewhere, preferably not on Sourceforge?

I'd rather not install something directly from SourceForge.

Cheers,

Andreas




From nanotube at gmail.com  Fri Sep 23 21:18:40 2011
From: nanotube at gmail.com (Daniel F)
Date: Fri, 23 Sep 2011 17:18:40 -0400
Subject: [Bitcoin-development] Bitcoin 0.4.0 released
In-Reply-To: <j5ineh$g3a$1@dough.gmane.org>
References: <CABsx9T1Z5NPbDfPcRKvZ8f+e05RMQVhm2WQyeFNti_w5nk4D7Q@mail.gmail.com>
	<j5ineh$g3a$1@dough.gmane.org>
Message-ID: <CAHY2ayAwG2GiDR7Cn-CTryXzFLXd=T2Nx=VCVbj9awrB6TDxDg@mail.gmail.com>

> Can you post secure file checksums somewhere, preferably not on Sourceforge?

as long as it's gpg-signed, what's the difference where it is posted?



From gavinandresen at gmail.com  Fri Sep 23 21:36:56 2011
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Fri, 23 Sep 2011 17:36:56 -0400
Subject: [Bitcoin-development] Bitcoin 0.4.0 released
In-Reply-To: <CAHY2ayAwG2GiDR7Cn-CTryXzFLXd=T2Nx=VCVbj9awrB6TDxDg@mail.gmail.com>
References: <CABsx9T1Z5NPbDfPcRKvZ8f+e05RMQVhm2WQyeFNti_w5nk4D7Q@mail.gmail.com>
	<j5ineh$g3a$1@dough.gmane.org>
	<CAHY2ayAwG2GiDR7Cn-CTryXzFLXd=T2Nx=VCVbj9awrB6TDxDg@mail.gmail.com>
Message-ID: <CABsx9T0HnBzBgo57MSPNcSkjPLZeV_73JA8DhS0rA1RZJ1FchQ@mail.gmail.com>

> as long as it's gpg-signed, what's the difference where it is posted?

What Daniel said.  Although I did upload the signatures to github, too:
  https://github.com/bitcoin/bitcoin/downloads

The github downloads have been unreliable, so I didn't announce that
you can download from there.

-- 
--
Gavin Andresen



From pieter.wuille at gmail.com  Fri Sep 23 23:15:48 2011
From: pieter.wuille at gmail.com (Pieter Wuille)
Date: Sat, 24 Sep 2011 01:15:48 +0200
Subject: [Bitcoin-development] Beyond IP transactions: towards a bitcoin
 payment protocol
In-Reply-To: <4E7CC428.6020500@jerviss.org>
References: <20110923162102.GA13532@ulyssis.org> <4E7CC428.6020500@jerviss.org>
Message-ID: <20110923231547.GA28700@ulyssis.org>

On Fri, Sep 23, 2011 at 12:38:48PM -0500, kjj wrote:
> Pieter Wuille wrote:
> >Hello everyone,
> >
> >here is an idea i've bean writing up: https://gist.github.com/1237788
> >
> >I hope it can start some discussion about moving away from static bitcoin addresses
> >as descriptions for transactions. I suppose it's a candidate for a BIP/BEPS/BFC/...,
> >but as things don't seem to have been decided completely about those, I put it in a
> >Gist.
> >
> >Please, comment.
> >
> This may just be me, but this really looks like an incredibly
> convoluted way to solve a bunch of problems that aren't really
> problems.  The central issue that I see, is that you assume that
> there is no out of band channel, as if people were just sending
> transactions to addresses that came to them in a dream.
> 
> I think that this assumption is only true when it doesn't matter.
> For example, I have a donation link in my sig on the forums.  I
> don't care much who sends to it, or why, and I certainly don't need
> annotations or a refund address.  The rest of the time, payments are
> sent to addresses that already have sufficient context.

Well, I agree, this scheme is not (primarily) intended to be a solution
for people who want to accept anonymous donations; static addresses
work very well for that application (unless you want unlinkability
between different payments).

Let me try to explain what I do want to accomplish.

What current addresses are, is a reference to a public key. The way they
are used is as a template for a transaction. If you do not need complex
transactions, this suffices indeed, given that all other negotiation about
the payment occurs out-of-band already (e.g., a webshop interface that
after clicking 'pay' gives you a freshly generated bitcoin address and
stores it so it can track your payment).

What I want to do is to standardize part of that out-of-band communication
inside a protocol. The first observation is that if you want a freshly
negotiated key each time, some form of bidirectional communication is 
necessary anyway, and a static txout template does not suffice anymore.
If you're doing bidirectional communication, you are no longer limited
by the space constraints of something by-human-copy-pastable, and you can
just negotiate the txout directly, which transparently adds support for
anything that is possible through bitcoin scripts.

So far, the creation of transactions is "solved". However, by asking nodes
not to broadcast their transaction, but instead just send it back (we're
communicating with some other party already anyway, and this other party
is the one who cares about the tx being accepted), the receiver can track
it as well. Furthermore, by passing tags along, identification of
transactions becomes a lot easier. As a  extra advantage, this makes the
requirements for a client easier as well (it doesn't need to be a p2p
node).

The third step is adding signatures to authenticate the whole process.
They are necessary to make sure the client is communicating with who he
thinks he is, but by using them for the submission of the transaction as
well, it gives the client a proof of payment acceptance too.

Summarized: addresses are a limited method for defining payments, and as
soon as you move to a protocol instead of a static template, a lot of
possibilities open up.

-- 
Pieter



From luke at dashjr.org  Fri Sep 23 23:21:58 2011
From: luke at dashjr.org (Luke-Jr)
Date: Fri, 23 Sep 2011 19:21:58 -0400
Subject: [Bitcoin-development] Beyond IP transactions: towards a bitcoin
	payment protocol
In-Reply-To: <20110923231547.GA28700@ulyssis.org>
References: <20110923162102.GA13532@ulyssis.org> <4E7CC428.6020500@jerviss.org>
	<20110923231547.GA28700@ulyssis.org>
Message-ID: <201109231922.01269.luke@dashjr.org>

On Friday, September 23, 2011 7:15:48 PM Pieter Wuille wrote:
> What I want to do is to standardize part of that out-of-band communication
> inside a protocol. 

Email and XMPP are suitable. Just sign the message with the "from" key.

> The first observation is that if you want a freshly negotiated key each
> time, some form of bidirectional communication is necessary anyway, and a
> static txout template does not suffice anymore.

False. Deterministic keypairs remove the necessity of bidirectional 
communication. A standard for a "public key root" "address" could be 
worthwhile.

Both of these combined retain pseudonomity, while providing stateless 
transactions with out-of-band data.



From pieter.wuille at gmail.com  Sat Sep 24 03:05:08 2011
From: pieter.wuille at gmail.com (Pieter Wuille)
Date: Sat, 24 Sep 2011 05:05:08 +0200
Subject: [Bitcoin-development] Beyond IP transactions: towards a bitcoin
 payment protocol
In-Reply-To: <201109231922.01269.luke@dashjr.org>
References: <20110923162102.GA13532@ulyssis.org> <4E7CC428.6020500@jerviss.org>
	<20110923231547.GA28700@ulyssis.org>
	<201109231922.01269.luke@dashjr.org>
Message-ID: <20110924030505.GA21292@ulyssis.org>

On Fri, Sep 23, 2011 at 07:21:58PM -0400, Luke-Jr wrote:
> On Friday, September 23, 2011 7:15:48 PM Pieter Wuille wrote:
> > What I want to do is to standardize part of that out-of-band communication
> > inside a protocol. 
> 
> Email and XMPP are suitable. Just sign the message with the "from" key.

I don't want to send a mail to you or chat with you when I'm buying something
in your webshop. Or do you mean my client does that automatically? Why not
through an HTTP connection like the one I'm already using anyway to view
the static address on your website?

> > The first observation is that if you want a freshly negotiated key each
> > time, some form of bidirectional communication is necessary anyway, and a
> > static txout template does not suffice anymore.
> 
> False. Deterministic keypairs remove the necessity of bidirectional 
> communication. A standard for a "public key root" "address" could be 
> worthwhile.

They still require you to give me your public key root, and me to give
you the ephemeral private key I generated, optionally together with what
I'm paying you for. That's bidirectional communication to me. Agreed, your
scheme requires a few steps less, but I believe mine is far more flexible
and user-friendly.

-- 
Pieter




From gavinandresen at gmail.com  Sat Sep 24 15:19:40 2011
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Sat, 24 Sep 2011 11:19:40 -0400
Subject: [Bitcoin-development] Pulling for the 0.5 release
Message-ID: <CABsx9T3JZA4mujRgYRs6APaUtUjC+hkka34rZDq7PQFvz829xQ@mail.gmail.com>

Bright and early Monday morning I plan on pulling changes for the
Bitcoin 0.5 release into tip-of-git. Expect some tip-of-git chaos and
instability, I'm sure there will be issues to work through to move
from wxwidgets to qt for the GUI.

I'd like to have a release candidate ready in a week or two, giving
time for a week or two of testing, and have the 0.5 release available
a month from now, assuming no major show-stopper bugs or network
stability or denial-of-service or security vulnerabilities turn up
between now and then.

-- 
--
Gavin Andresen



From zgenjix at yahoo.com  Sun Sep 25 03:27:25 2011
From: zgenjix at yahoo.com (Amir Taaki)
Date: Sat, 24 Sep 2011 20:27:25 -0700 (PDT)
Subject: [Bitcoin-development] Bitcoin Enhancement Proposals (BEPS)
In-Reply-To: <CAHY2ayDxO035Hz0iSQvO7mj4=ryqQ+UFxy6Utv=T7nwYiuYS5w@mail.gmail.com>
References: <201109182104.45994.luke@dashjr.org>
	<CAL0fb61B6bqGMhWtCgvy0xwfHQ_nvmhbb9uLJQWx3biENhVJNw@mail.gmail.com>
	<21269.192.251.226.206.1316448084.squirrel@lavabit.com>
	<CABsx9T0y601kjJ7ToczwhcQUoh3NZbuPa+iWwtm6-DZxZSRNPg@mail.gmail.com>
	<CAHY2ayDxO035Hz0iSQvO7mj4=ryqQ+UFxy6Utv=T7nwYiuYS5w@mail.gmail.com>
Message-ID: <1316921245.487.YahooMailNeo@web121002.mail.ne1.yahoo.com>

Hey,

Names aren't too important and people were in favour of BIPs. I've moved them from BEPs to BIPs (Bitcoin Improvement Proposals).



----- Original Message -----
From: Daniel F <nanotube at gmail.com>
To: Gavin Andresen <gavinandresen at gmail.com>
Cc: bitcoin-development at lists.sourceforge.net
Sent: Friday, September 23, 2011 9:45 PM
Subject: Re: [Bitcoin-development] Bitcoin Enhancement Proposals (BEPS)

> Does anybody besides me think maybe we should name them something
> other than "BEP" ?
>
> I'm worried we'll regret it in two years when a google for "BEP003"
> takes you to the BitTorrent EPs instead of the BitCoin EPs.

this is an excellent "painting the bikeshed" question, so i cannot
resist participation :)

imo, anyone who has any business looking at the beps (which would
generally be technically-minded people), will be smart enough to
google for "bitcoin bep003" to find what he's looking for. so i don't
see an issue, whatever acronym we end up using.

------------------------------------------------------------------------------
All of the data generated in your IT infrastructure is seriously valuable.
Why? It contains a definitive record of application performance, security
threats, fraudulent activity, and more. Splunk takes this data and makes
sense of it. IT sense. And common sense.
http://p.sf.net/sfu/splunk-d2dcopy2
_______________________________________________
Bitcoin-development mailing list
Bitcoin-development at lists.sourceforge.net
https://lists.sourceforge.net/lists/listinfo/bitcoin-development




From luke at dashjr.org  Mon Sep 26 19:17:09 2011
From: luke at dashjr.org (Luke-Jr)
Date: Mon, 26 Sep 2011 15:17:09 -0400
Subject: [Bitcoin-development] Newly introduced DoS
Message-ID: <201109261517.11245.luke@dashjr.org>

+        return DoS(10, error("AcceptToMemoryPool() : transaction with out-of-
bounds SigOpCount"));
+                        return DoS(10, error("ConnectInputs() : tried to 
spend coinbase at depth %d", pindexBlock->nHeight - pindex->nHeight));
+        return DoS(10, error("AcceptBlock() : prev block not found"));

These shouldn't be "DoS"'d, or else you open a new DoS when nodes legitimately 
relay such transactions/blocks.



From luke at dashjr.org  Mon Sep 26 19:18:35 2011
From: luke at dashjr.org (Luke-Jr)
Date: Mon, 26 Sep 2011 15:18:35 -0400
Subject: [Bitcoin-development] Miscommitted version
Message-ID: <201109261518.37283.luke@dashjr.org>

* 6b8a5ab Bump version to 0.4.1

This should be some pre-0.5.0, not 0.4.1 which will be the stable team's first 
release...



From nils at nilsschneider.net  Mon Sep 26 19:42:09 2011
From: nils at nilsschneider.net (Nils Schneider)
Date: Mon, 26 Sep 2011 21:42:09 +0200
Subject: [Bitcoin-development] Deprecating "midstate" in getwork?
Message-ID: <4E80D591.2080100@nilsschneider.net>

Hey,

I'd like to simplify the internal reference miner and remove all
dependencies on cryptopp (it's the only place we use cryptopp instead of
OpenSSL).

Unfortunately, cryptopp is also used to calculate getwork "midstate".
This field is redundant and the miner could easily calculate it from the
blockheader so I'd like to remove it.

Any thoughts? Where should such a change should be announced so all
miners can be upgraded?



From gavinandresen at gmail.com  Mon Sep 26 20:47:06 2011
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Mon, 26 Sep 2011 16:47:06 -0400
Subject: [Bitcoin-development] Newly introduced DoS
In-Reply-To: <201109261517.11245.luke@dashjr.org>
References: <201109261517.11245.luke@dashjr.org>
Message-ID: <CABsx9T1gfuiHj9aR=1gDxtEqJzov5iXRqVEiEBUx-VBcearAZQ@mail.gmail.com>

On Mon, Sep 26, 2011 at 3:17 PM, Luke-Jr <luke at dashjr.org> wrote:
> + ? ? ? ?return DoS(10, error("AcceptToMemoryPool() : transaction with out-of-
> bounds SigOpCount"));
> + ? ? ? ? ? ? ? ? ? ? ? ?return DoS(10, error("ConnectInputs() : tried to
> spend coinbase at depth %d", pindexBlock->nHeight - pindex->nHeight));
> These shouldn't be "DoS"'d, or else you open a new DoS when nodes legitimately
> relay such transactions/blocks.

Huh?

So in the future lets suppose we schedule a change to the acceptable
block rules that allows more SigOps in a block, or allows generation
transaction to be spent before 100 confirmations. At that same time,
the DoS rules will be changed.

You cannot "legitimately" relay those blocks without a scheduled
block-chain-split.  If a block-chain-split IS scheduled and the rules
change, then denying service to nodes running old, obsolete versions
of bitcoin is the right thing to do-- it is better to "fail hard" and
find it difficult or impossible to connect to the network rather than
continue with an obsolete client and a non-majority block chain.

(and the third DoS in AcceptBlock(): prev block not found  is a
"should be impossible" case, because AcceptBlock is only called when
extending the best-block chain).

-- 
--
Gavin Andresen



From luke at dashjr.org  Mon Sep 26 20:55:57 2011
From: luke at dashjr.org (Luke-Jr)
Date: Mon, 26 Sep 2011 16:55:57 -0400
Subject: [Bitcoin-development] Newly introduced DoS
In-Reply-To: <CABsx9T1gfuiHj9aR=1gDxtEqJzov5iXRqVEiEBUx-VBcearAZQ@mail.gmail.com>
References: <201109261517.11245.luke@dashjr.org>
	<CABsx9T1gfuiHj9aR=1gDxtEqJzov5iXRqVEiEBUx-VBcearAZQ@mail.gmail.com>
Message-ID: <201109261655.59768.luke@dashjr.org>

On Monday, September 26, 2011 4:47:06 PM Gavin Andresen wrote:
> On Mon, Sep 26, 2011 at 3:17 PM, Luke-Jr <luke at dashjr.org> wrote:
> > +        return DoS(10, error("AcceptToMemoryPool() : transaction with
> > out-of- bounds SigOpCount"));
> > +                        return DoS(10, error("ConnectInputs() : tried to
> > spend coinbase at depth %d", pindexBlock->nHeight - pindex->nHeight));
> > These shouldn't be "DoS"'d, or else you open a new DoS when nodes
> > legitimately relay such transactions/blocks.
> 
> Huh?
> 
> So in the future lets suppose we schedule a change to the acceptable
> block rules that allows more SigOps in a block, or allows generation
> transaction to be spent before 100 confirmations. At that same time,
> the DoS rules will be changed.
> 
> You cannot "legitimately" relay those blocks without a scheduled
> block-chain-split.  If a block-chain-split IS scheduled and the rules
> change, then denying service to nodes running old, obsolete versions
> of bitcoin is the right thing to do-- it is better to "fail hard" and
> find it difficult or impossible to connect to the network rather than
> continue with an obsolete client and a non-majority block chain.
> 
> (and the third DoS in AcceptBlock(): prev block not found  is a
> "should be impossible" case, because AcceptBlock is only called when
> extending the best-block chain).

The first one I was referring to is a *transaction* with "non-standard" sig op 
count, which is AFAIK allowed in blocks, just not accepted by the mainline 
rules. In the second case, that transaction is not tied to a specific block. 
Maybe the person spending it sees it matured beyond 100 confirmations, and you 
only see 99. An attacker could use these things to get nodes to ban each 
other.



From gavinandresen at gmail.com  Mon Sep 26 21:38:41 2011
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Mon, 26 Sep 2011 17:38:41 -0400
Subject: [Bitcoin-development] Newly introduced DoS
In-Reply-To: <201109261655.59768.luke@dashjr.org>
References: <201109261517.11245.luke@dashjr.org>
	<CABsx9T1gfuiHj9aR=1gDxtEqJzov5iXRqVEiEBUx-VBcearAZQ@mail.gmail.com>
	<201109261655.59768.luke@dashjr.org>
Message-ID: <CABsx9T0TN+Nzzjod7xNJk4PNHnWPMWZUVsTHP3Yxq0C_-EgBLQ@mail.gmail.com>

> The first one I was referring to is a *transaction* with "non-standard" sig op
> count, which is AFAIK allowed in blocks, just not accepted by the mainline
> rules.

I sit corrected. The context is:
    // Checking ECDSA signatures is a CPU bottleneck, so to avoid
denial-of-service
    // attacks disallow transactions with more than one SigOp per 34
bytes.
    // 34 bytes because a TxOut is:
    //   20-byte address + 8 byte bitcoin amount + 5 bytes of ops + 1
byte script length
    if (GetSigOpCount() > nSize / 34 || nSize < 100)
	return DoS(10, error("AcceptToMemoryPool() : transaction with
out-of-bounds SigOpCount"));

I'm having trouble imagining some future world where valid,
new-versions-agree-to-relay-transactions have more than one SigOp per
34 bytes; can you give an example?

> Maybe the person spending it sees it matured beyond 100 confirmations, and you
> only see 99. An attacker could use these things to get nodes to ban each
> other.

That would imply you're on a blockchain fork of more than 99 blocks
with respect to the person spending the transaction, in which case I'd
argue you have much bigger problems and it is a good idea for the DoS
code to kick in and kick either you or them off the network...

-- 
--
Gavin Andresen



From luke at dashjr.org  Mon Sep 26 21:53:23 2011
From: luke at dashjr.org (Luke-Jr)
Date: Mon, 26 Sep 2011 17:53:23 -0400
Subject: [Bitcoin-development] Newly introduced DoS
In-Reply-To: <CABsx9T0TN+Nzzjod7xNJk4PNHnWPMWZUVsTHP3Yxq0C_-EgBLQ@mail.gmail.com>
References: <201109261517.11245.luke@dashjr.org>
	<201109261655.59768.luke@dashjr.org>
	<CABsx9T0TN+Nzzjod7xNJk4PNHnWPMWZUVsTHP3Yxq0C_-EgBLQ@mail.gmail.com>
Message-ID: <201109261753.25549.luke@dashjr.org>

On Monday, September 26, 2011 5:38:41 PM Gavin Andresen wrote:
> > The first one I was referring to is a *transaction* with "non-standard"
> > sig op count, which is AFAIK allowed in blocks, just not accepted by the
> > mainline rules.
> 
> I sit corrected. The context is:
>     // Checking ECDSA signatures is a CPU bottleneck, so to avoid
> denial-of-service
>     // attacks disallow transactions with more than one SigOp per 34
> bytes.
>     // 34 bytes because a TxOut is:
>     //   20-byte address + 8 byte bitcoin amount + 5 bytes of ops + 1
> byte script length
>     if (GetSigOpCount() > nSize / 34 || nSize < 100)
> 	return DoS(10, error("AcceptToMemoryPool() : transaction with
> out-of-bounds SigOpCount"));
> 
> I'm having trouble imagining some future world where valid,
> new-versions-agree-to-relay-transactions have more than one SigOp per
> 34 bytes; can you give an example?

It's not future. It's presently allowed in blocks. Which means it's perfectly 
valid to relay (and also perfectly value to NOT relay or accept). Ergo, 
shouldn't be punished.

> > Maybe the person spending it sees it matured beyond 100 confirmations,
> > and you only see 99. An attacker could use these things to get nodes to
> > ban each other.
> 
> That would imply you're on a blockchain fork of more than 99 blocks
> with respect to the person spending the transaction, in which case I'd
> argue you have much bigger problems and it is a good idea for the DoS
> code to kick in and kick either you or them off the network...

Um, no? It implies you have 99 blocks since the coinbase, and he has 100 and 
wants to spend. In this scenario, it's proper to reject his transaction *until 
you have the next block*, but it doesn't make sense to punish for it.




From theymos at mm.st  Mon Sep 26 22:34:33 2011
From: theymos at mm.st (theymos)
Date: Mon, 26 Sep 2011 17:34:33 -0500
Subject: [Bitcoin-development] Newly introduced DoS
In-Reply-To: <201109261753.25549.luke@dashjr.org>
References: <201109261517.11245.luke@dashjr.org><201109261655.59768.luke@dashjr.org><CABsx9T0TN+Nzzjod7xNJk4PNHnWPMWZUVsTHP3Yxq0C_-EgBLQ@mail.gmail.com>
	<201109261753.25549.luke@dashjr.org>
Message-ID: <1317076473.3335.140258148029217@webmail.messagingengine.com>

On Monday, September 26, 2011 5:53 PM, "Luke-Jr" <luke at dashjr.org> wrote:
> It's not future. It's presently allowed in blocks. Which means it's
> perfectly valid to relay (and also perfectly value to NOT relay or
> accept). Ergo, shouldn't be punished.

Yeah, my node has always relayed these transactions. The limit seems
pointless to me, especially when it's per kB: people will just add
more data.

The coinbase maturity DoS limit should not have a chance of immediately
kicking the node, as I believe this could happen normally in rare cases.
Rejecting these transactions is also pretty cheap, AFAIK. A small DoS
score seems reasonable, though.



From gavinandresen at gmail.com  Tue Sep 27 00:07:07 2011
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Mon, 26 Sep 2011 20:07:07 -0400
Subject: [Bitcoin-development] Newly introduced DoS
In-Reply-To: <201109261753.25549.luke@dashjr.org>
References: <201109261517.11245.luke@dashjr.org>
	<201109261655.59768.luke@dashjr.org>
	<CABsx9T0TN+Nzzjod7xNJk4PNHnWPMWZUVsTHP3Yxq0C_-EgBLQ@mail.gmail.com>
	<201109261753.25549.luke@dashjr.org>
Message-ID: <CABsx9T2SU5wvhO--bDDqsAY-TyLoXkcA0M2desGi=g544T6kNw@mail.gmail.com>

> It's not future. It's presently allowed in blocks. Which means it's perfectly
> valid to relay (and also perfectly value to NOT relay or accept). Ergo,
> shouldn't be punished.

You're absolutely right.

And you're right about the 99 confirmations, too-- I was thinking
blocks again, not transactions.

Good to get all of the wrong-ness out of my system on a Monday so I
know I'll be perfect the rest of the week.  :-)

-- 
--
Gavin Andresen



From gavinandresen at gmail.com  Tue Sep 27 17:12:09 2011
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Tue, 27 Sep 2011 13:12:09 -0400
Subject: [Bitcoin-development] More denial-of-service prevention code to
	review
Message-ID: <CABsx9T24p5uP_jM4tsaDMsvQbM4tKnJ-wGHThVYeHiF7hdhecg@mail.gmail.com>

Pull request:
  https://github.com/bitcoin/bitcoin/pull/534

Denial-of-service prevention: orphan blocks

The attack this prevents: Generate valid "orphan" blocks and send them
to a bitcoin node. Orphan blocks are blocks that are not in the main
blockchain, and before this patch the bitcoin client would store an
arbitrary number of them in memory, in case they later became part of
the main chain.

Two checks are added:

1) Orphan blocks before the last blockchain lock-in are rejected, and
if the node sends enough of those obviously-not-part-of-the-main-chain
blocks it will be disconnected and banned.

2) Orphan blocks must have a plausible proof-of-work. It is impossible
for a difficulty 1.0 block to follow a difficulty 1-million block (it
would take at least 19 months for difficulty to drop from 1-million to
1). Orphan blocks with too-low proof-of-work are ignored, and if a
node sends ten of them it is disconnected/banned.

Requiring plausible proof-of-work for orphan blocks will make this
attack too expensive to attempt (you would have to generate valid
blocks at current difficulty).

-- 
--
Gavin Andresen



From david at bitcoin.se  Tue Sep 27 18:28:13 2011
From: david at bitcoin.se (david at bitcoin.se)
Date: Tue, 27 Sep 2011 20:28:13 +0200
Subject: [Bitcoin-development] Pull request for translation - who reviews it?
Message-ID: <CANf5GBgY5FCVXbfq6X4TQJhSgEo+0VPxchd4oFWvG_k+hYmxww@mail.gmail.com>

Hi all,

I posted this question on the forums but got no answers.

I'd like to make some improvements to the Swedish translation of the
client. I understand the technical side of making a pull request etc.,
but will my request be accepted? There aren't many people in the
project who can judge if the Swedish translation is good or not, so
will it simply be accepted if noone opposes it?

Previous Swedish translations seem to have been commited by codler, is
this person "responsible" for the Swedish translation? Related to
this, is there anywhere I can see a list of people who have
permissions to make a pull?

David



From bitcoin-list at bluematt.me  Tue Sep 27 18:56:18 2011
From: bitcoin-list at bluematt.me (Matt Corallo)
Date: Tue, 27 Sep 2011 14:56:18 -0400
Subject: [Bitcoin-development] Pull request for translation - who
 reviews it?
In-Reply-To: <CANf5GBgY5FCVXbfq6X4TQJhSgEo+0VPxchd4oFWvG_k+hYmxww@mail.gmail.com>
References: <CANf5GBgY5FCVXbfq6X4TQJhSgEo+0VPxchd4oFWvG_k+hYmxww@mail.gmail.com>
Message-ID: <1317149778.2774.37.camel@BMThinkPad.lan.bluematt.me>

On Tue, 2011-09-27 at 20:28 +0200, david at bitcoin.se wrote:
> Hi all,
> 
> I posted this question on the forums but got no answers.
Most developers treat the forums as write-only or just ignore them all
together, they are way too full of junk to bother reading.
> 
> I'd like to make some improvements to the Swedish translation of the
> client. I understand the technical side of making a pull request etc.,
> but will my request be accepted? There aren't many people in the
> project who can judge if the Swedish translation is good or not, so
> will it simply be accepted if noone opposes it?
Translation updates are pretty much just blindly pulled unless someone
opposes. 
> 
> Previous Swedish translations seem to have been commited by codler, is
> this person "responsible" for the Swedish translation? 
No one is responsible for translations in Bitcoin, though it would be
nice to have people agree to keep their translations up-to-date when
they submit new ones...
> Related to
> this, is there anywhere I can see a list of people who have
> permissions to make a pull?
Anyone can make a pull request, people who can push to the bitcoin repo
(ie can pull a pull request) are Gavin, tcatm, sipa, jgarzik, and
alexwaters.

Matt




From luke at dashjr.org  Tue Sep 27 20:08:05 2011
From: luke at dashjr.org (Luke-Jr)
Date: Tue, 27 Sep 2011 16:08:05 -0400
Subject: [Bitcoin-development] Newly introduced DoS
In-Reply-To: <CABsx9T1gfuiHj9aR=1gDxtEqJzov5iXRqVEiEBUx-VBcearAZQ@mail.gmail.com>
References: <201109261517.11245.luke@dashjr.org>
	<CABsx9T1gfuiHj9aR=1gDxtEqJzov5iXRqVEiEBUx-VBcearAZQ@mail.gmail.com>
Message-ID: <201109271608.07053.luke@dashjr.org>

What about this one?

@@ -1276,13 +1278,13 @@ bool CBlock::AcceptBlock()
     // Get prev block index
     map<uint256, CBlockIndex*>::iterator mi = 
mapBlockIndex.find(hashPrevBlock);
     if (mi == mapBlockIndex.end())
-        return error("AcceptBlock() : prev block not found");
+        return DoS(10, error("AcceptBlock() : prev block not found"));


Is it certain that it cannot be triggered by a peer having some huge number 
more blocks than you?



From gmaxwell at gmail.com  Tue Sep 27 20:23:47 2011
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Tue, 27 Sep 2011 16:23:47 -0400
Subject: [Bitcoin-development] Newly introduced DoS
In-Reply-To: <201109271608.07053.luke@dashjr.org>
References: <201109261517.11245.luke@dashjr.org>
	<CABsx9T1gfuiHj9aR=1gDxtEqJzov5iXRqVEiEBUx-VBcearAZQ@mail.gmail.com>
	<201109271608.07053.luke@dashjr.org>
Message-ID: <CAAS2fgTG43u3i=aQoFZPgFgTLh1peJiomnvXjcPeV3p5zEFsQg@mail.gmail.com>

On Tue, Sep 27, 2011 at 4:08 PM, Luke-Jr <luke at dashjr.org> wrote:
> Is it certain that it cannot be triggered by a peer having some huge number
> more blocks than you?

Might be better to have a global flag that indicates when the node
thinks its current with the network (this could have other UI impacts,
like letting the user know if they send and their connectivity looks
non-current), and only enforce this check when the node believes that
its current.

Currency could be
=height>last_checkpoint&&top_timestamp>now()-safe_amount;  with
safe_amount to be high enough that it's very unlikely to be falsely
triggered by an improbably long gap.



From gavinandresen at gmail.com  Tue Sep 27 20:39:32 2011
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Tue, 27 Sep 2011 16:39:32 -0400
Subject: [Bitcoin-development] Newly introduced DoS
In-Reply-To: <201109271608.07053.luke@dashjr.org>
References: <201109261517.11245.luke@dashjr.org>
	<CABsx9T1gfuiHj9aR=1gDxtEqJzov5iXRqVEiEBUx-VBcearAZQ@mail.gmail.com>
	<201109271608.07053.luke@dashjr.org>
Message-ID: <CABsx9T3Znz83XpCBZO_J8jNecKkmUseVsBgHDDmbiVuZ1HFaoQ@mail.gmail.com>

> @@ -1276,13 +1278,13 @@ bool CBlock::AcceptBlock()
> ? ? // Get prev block index
> ? ? map<uint256, CBlockIndex*>::iterator mi =
> mapBlockIndex.find(hashPrevBlock);
> ? ? if (mi == mapBlockIndex.end())
> - ? ? ? ?return error("AcceptBlock() : prev block not found");
> + ? ? ? ?return DoS(10, error("AcceptBlock() : prev block not found"));
>
>
> Is it certain that it cannot be triggered by a peer having some huge number
> more blocks than you?

As I said, that is a "can't never happen but we'll wear a
belt-and-suspenders just in case" case.

AcceptBlock() is called from two places in the code:

ProcessBlock, if the block is not an orphan:
    // If don't already have its previous block, shunt it off to
holding area until we get it
    if (!mapBlockIndex.count(pblock->hashPrevBlock))
    {
....  orphan processing stuff...
      return true;
    }

    // Store to disk
    if (!pblock->AcceptBlock())
        return error("ProcessBlock() : AcceptBlock FAILED");

The mapBlockIndex.find(hashPrevBlock) in AcceptBlock can't fail.

The second place is recursively, in AcceptBlock(), processing orphans
that link to the block being accepted, and mapBlockIndex.find() would
find the used-to-be-an-orphan-block-that-is-now-being-accepted.

So: it is a case that should be impossible to trigger. However, in
case there is some subtle bug or edge case I'm not considering it seem
to me keeping the check is appropriate, and, because it will be a
subtle bug or edge case, it seems to me keeping the DoS penalty is
also appropriate, because attackers look for subtle bugs and edge
cases that can be exploited.


-- 
--
Gavin Andresen



From jgarzik at exmulti.com  Wed Sep 28 03:45:48 2011
From: jgarzik at exmulti.com (Jeff Garzik)
Date: Tue, 27 Sep 2011 23:45:48 -0400
Subject: [Bitcoin-development] Deprecating "midstate" in getwork?
In-Reply-To: <4E80D591.2080100@nilsschneider.net>
References: <4E80D591.2080100@nilsschneider.net>
Message-ID: <CA+8xBpfwsajD1J-GRMLgqQwop1T0n=4jqtfQmtBoRvj3rzcY7w@mail.gmail.com>

On Mon, Sep 26, 2011 at 3:42 PM, Nils Schneider <nils at nilsschneider.net> wrote:
> I'd like to simplify the internal reference miner and remove all
> dependencies on cryptopp (it's the only place we use cryptopp instead of
> OpenSSL).
>
> Unfortunately, cryptopp is also used to calculate getwork "midstate".
> This field is redundant and the miner could easily calculate it from the
> blockheader so I'd like to remove it.
>
> Any thoughts? Where should such a change should be announced so all
> miners can be upgraded?

I think one of the pools was already working on something like that?
I'm pretty sure it can be removed, and I'm pretty sure somebody has
already field-tested that guess.
-- 
Jeff Garzik
exMULTI, Inc.
jgarzik at exmulti.com



From jgarzik at exmulti.com  Wed Sep 28 03:44:43 2011
From: jgarzik at exmulti.com (Jeff Garzik)
Date: Tue, 27 Sep 2011 23:44:43 -0400
Subject: [Bitcoin-development] Miscommitted version
In-Reply-To: <201109261518.37283.luke@dashjr.org>
References: <201109261518.37283.luke@dashjr.org>
Message-ID: <CA+8xBpdFpULC9LrG8NUrKqh37V2-jBm+YFTX6RsB=E8XUkDj9g@mail.gmail.com>

On Mon, Sep 26, 2011 at 3:18 PM, Luke-Jr <luke at dashjr.org> wrote:
> * 6b8a5ab Bump version to 0.4.1
>
> This should be some pre-0.5.0, not 0.4.1 which will be the stable team's first
> release...

No.  Technically speaking this most recent release was 0.4.0.  That is
what is serialized in the build, and what is tagged.

Any stable version based off the most recent release would be 0.4.0.1.

And of course you're following the "upstream must have merged this fix
first" rule, right?

-- 
Jeff Garzik
exMULTI, Inc.
jgarzik at exmulti.com



From luke at dashjr.org  Wed Sep 28 03:53:08 2011
From: luke at dashjr.org (Luke-Jr)
Date: Tue, 27 Sep 2011 23:53:08 -0400
Subject: [Bitcoin-development] Miscommitted version
In-Reply-To: <CA+8xBpdFpULC9LrG8NUrKqh37V2-jBm+YFTX6RsB=E8XUkDj9g@mail.gmail.com>
References: <201109261518.37283.luke@dashjr.org>
	<CA+8xBpdFpULC9LrG8NUrKqh37V2-jBm+YFTX6RsB=E8XUkDj9g@mail.gmail.com>
Message-ID: <201109272353.10956.luke@dashjr.org>

On Tuesday, September 27, 2011 11:44:43 PM Jeff Garzik wrote:
> On Mon, Sep 26, 2011 at 3:18 PM, Luke-Jr <luke at dashjr.org> wrote:
> > * 6b8a5ab Bump version to 0.4.1
> > 
> > This should be some pre-0.5.0, not 0.4.1 which will be the stable team's
> > first release...
> 
> No.  Technically speaking this most recent release was 0.4.0.  That is
> what is serialized in the build, and what is tagged.

I'm aware of that.

> Any stable version based off the most recent release would be 0.4.0.1.

Ok. That's not usually how versions work, though. Gavin also recently stated 
that the next version after 0.4.0 was to be 0.5, which is why the commit was a 
surprise. I'm just trying to clarify what version number to use for stable, 
and getting apparently mixed answers.

> And of course you're following the "upstream must have merged this fix
> first" rule, right?

Yep.



From luke at dashjr.org  Wed Sep 28 03:54:00 2011
From: luke at dashjr.org (Luke-Jr)
Date: Tue, 27 Sep 2011 23:54:00 -0400
Subject: [Bitcoin-development] Deprecating "midstate" in getwork?
In-Reply-To: <CA+8xBpfwsajD1J-GRMLgqQwop1T0n=4jqtfQmtBoRvj3rzcY7w@mail.gmail.com>
References: <4E80D591.2080100@nilsschneider.net>
	<CA+8xBpfwsajD1J-GRMLgqQwop1T0n=4jqtfQmtBoRvj3rzcY7w@mail.gmail.com>
Message-ID: <201109272354.02695.luke@dashjr.org>

On Tuesday, September 27, 2011 11:45:48 PM Jeff Garzik wrote:
> On Mon, Sep 26, 2011 at 3:42 PM, Nils Schneider <nils at nilsschneider.net> 
wrote:
> > I'd like to simplify the internal reference miner and remove all
> > dependencies on cryptopp (it's the only place we use cryptopp instead of
> > OpenSSL).
> > 
> > Unfortunately, cryptopp is also used to calculate getwork "midstate".
> > This field is redundant and the miner could easily calculate it from the
> > blockheader so I'd like to remove it.
> > 
> > Any thoughts? Where should such a change should be announced so all
> > miners can be upgraded?
> 
> I think one of the pools was already working on something like that?
> I'm pretty sure it can be removed, and I'm pretty sure somebody has
> already field-tested that guess.

I tested removing midstate myself, and found at least one miner (cpuminer 
IIRC) requires it.



From witchspace81 at gmail.com  Thu Sep 29 10:23:32 2011
From: witchspace81 at gmail.com (John Smith)
Date: Thu, 29 Sep 2011 10:23:32 +0000
Subject: [Bitcoin-development] Deprecating "midstate" in getwork?
In-Reply-To: <4E80D591.2080100@nilsschneider.net>
References: <4E80D591.2080100@nilsschneider.net>
Message-ID: <CAJNQ0stW-7HMw-O_C9Go8ViRrxBNtEpsbhSRyc3aOzm6OvR6dA@mail.gmail.com>

Nils,

Sounds good. I'm also doubtful of depending on two crypto libraries when
OpenSSL does perfectly well.

However, losing compatibility with miners is not very nice. Is there really
not a way to compute midstate with OpenSSL?

JS

On Mon, Sep 26, 2011 at 7:42 PM, Nils Schneider <nils at nilsschneider.net>wrote:

> Hey,
>
> I'd like to simplify the internal reference miner and remove all
> dependencies on cryptopp (it's the only place we use cryptopp instead of
> OpenSSL).
>
> Unfortunately, cryptopp is also used to calculate getwork "midstate".
> This field is redundant and the miner could easily calculate it from the
> blockheader so I'd like to remove it.
>
> Any thoughts? Where should such a change should be announced so all
> miners can be upgraded?
>
>
> ------------------------------------------------------------------------------
> All the data continuously generated in your IT infrastructure contains a
> definitive record of customers, application performance, security
> threats, fraudulent activity and more. Splunk takes this data and makes
> sense of it. Business sense. IT sense. Common sense.
> http://p.sf.net/sfu/splunk-d2dcopy1
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110929/5081cf92/attachment.html>

From nils at nilsschneider.net  Thu Sep 29 11:40:37 2011
From: nils at nilsschneider.net (Nils Schneider)
Date: Thu, 29 Sep 2011 13:40:37 +0200
Subject: [Bitcoin-development] Deprecating "midstate" in getwork?
In-Reply-To: <CAJNQ0stW-7HMw-O_C9Go8ViRrxBNtEpsbhSRyc3aOzm6OvR6dA@mail.gmail.com>
References: <4E80D591.2080100@nilsschneider.net>
	<CAJNQ0stW-7HMw-O_C9Go8ViRrxBNtEpsbhSRyc3aOzm6OvR6dA@mail.gmail.com>
Message-ID: <4E845935.8060601@nilsschneider.net>

Yes, that's possible and what
https://github.com/bitcoin/bitcoin/pull/535 does. However, deprecating
midstate (and hash1) would allow for much cleaner code.

A pull request for marking midstate (and hash1) as deprecated can be
found at https://github.com/bitcoin/bitcoin/pull/538

On 29.09.2011 12:23, John Smith wrote:
> Nils,
> 
> Sounds good. I'm also doubtful of depending on two crypto libraries when
> OpenSSL does perfectly well.
> 
> However, losing compatibility with miners is not very nice. Is there
> really not a way to compute midstate with OpenSSL?
> 
> JS
> 
> On Mon, Sep 26, 2011 at 7:42 PM, Nils Schneider <nils at nilsschneider.net
> <mailto:nils at nilsschneider.net>> wrote:
> 
>     Hey,
> 
>     I'd like to simplify the internal reference miner and remove all
>     dependencies on cryptopp (it's the only place we use cryptopp instead of
>     OpenSSL).
> 
>     Unfortunately, cryptopp is also used to calculate getwork "midstate".
>     This field is redundant and the miner could easily calculate it from the
>     blockheader so I'd like to remove it.
> 
>     Any thoughts? Where should such a change should be announced so all
>     miners can be upgraded?
> 
>     ------------------------------------------------------------------------------
>     All the data continuously generated in your IT infrastructure contains a
>     definitive record of customers, application performance, security
>     threats, fraudulent activity and more. Splunk takes this data and makes
>     sense of it. Business sense. IT sense. Common sense.
>     http://p.sf.net/sfu/splunk-d2dcopy1
>     _______________________________________________
>     Bitcoin-development mailing list
>     Bitcoin-development at lists.sourceforge.net
>     <mailto:Bitcoin-development at lists.sourceforge.net>
>     https://lists.sourceforge.net/lists/listinfo/bitcoin-development
> 
> 




From moon at justmoon.de  Thu Sep 29 11:48:25 2011
From: moon at justmoon.de (Stefan Thomas)
Date: Thu, 29 Sep 2011 13:48:25 +0200
Subject: [Bitcoin-development] Deprecating "midstate" in getwork?
In-Reply-To: <4E845935.8060601@nilsschneider.net>
References: <4E80D591.2080100@nilsschneider.net>
	<CAJNQ0stW-7HMw-O_C9Go8ViRrxBNtEpsbhSRyc3aOzm6OvR6dA@mail.gmail.com>
	<4E845935.8060601@nilsschneider.net>
Message-ID: <4E845B09.8040400@justmoon.de>

BitcoinJS uses OpenSSL to calculate midstate:

https://github.com/bitcoinjs/node-bitcoin-p2p/blob/master/native.cc#L380


On 9/29/2011 1:40 PM, Nils Schneider wrote:
> Yes, that's possible and what
> https://github.com/bitcoin/bitcoin/pull/535 does. However, deprecating
> midstate (and hash1) would allow for much cleaner code.
>
> A pull request for marking midstate (and hash1) as deprecated can be
> found at https://github.com/bitcoin/bitcoin/pull/538
>
> On 29.09.2011 12:23, John Smith wrote:
>> Nils,
>>
>> Sounds good. I'm also doubtful of depending on two crypto libraries when
>> OpenSSL does perfectly well.
>>
>> However, losing compatibility with miners is not very nice. Is there
>> really not a way to compute midstate with OpenSSL?
>>
>> JS
>>
>> On Mon, Sep 26, 2011 at 7:42 PM, Nils Schneider<nils at nilsschneider.net
>> <mailto:nils at nilsschneider.net>>  wrote:
>>
>>      Hey,
>>
>>      I'd like to simplify the internal reference miner and remove all
>>      dependencies on cryptopp (it's the only place we use cryptopp instead of
>>      OpenSSL).
>>
>>      Unfortunately, cryptopp is also used to calculate getwork "midstate".
>>      This field is redundant and the miner could easily calculate it from the
>>      blockheader so I'd like to remove it.
>>
>>      Any thoughts? Where should such a change should be announced so all
>>      miners can be upgraded?
>>
>>      ------------------------------------------------------------------------------
>>      All the data continuously generated in your IT infrastructure contains a
>>      definitive record of customers, application performance, security
>>      threats, fraudulent activity and more. Splunk takes this data and makes
>>      sense of it. Business sense. IT sense. Common sense.
>>      http://p.sf.net/sfu/splunk-d2dcopy1
>>      _______________________________________________
>>      Bitcoin-development mailing list
>>      Bitcoin-development at lists.sourceforge.net
>>      <mailto:Bitcoin-development at lists.sourceforge.net>
>>      https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>
>>
>
> ------------------------------------------------------------------------------
> All the data continuously generated in your IT infrastructure contains a
> definitive record of customers, application performance, security
> threats, fraudulent activity and more. Splunk takes this data and makes
> sense of it. Business sense. IT sense. Common sense.
> http://p.sf.net/sfu/splunk-d2dcopy1
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>




From solar at heliacal.net  Thu Sep 29 12:49:46 2011
From: solar at heliacal.net (solar)
Date: Thu, 29 Sep 2011 12:49:46 +0000
Subject: [Bitcoin-development] Deprecating "midstate" in getwork?
In-Reply-To: <4E845B09.8040400@justmoon.de>
References: <4E80D591.2080100@nilsschneider.net>
	<CAJNQ0stW-7HMw-O_C9Go8ViRrxBNtEpsbhSRyc3aOzm6OvR6dA@mail.gmail.com>
	<4E845935.8060601@nilsschneider.net> <4E845B09.8040400@justmoon.de>
Message-ID: <A5A4F15F-4934-43A8-938B-8ECF8A2238E6@heliacal.net>

It's just simple SHA2, you can implement the whole thing easily without dragging in a huge lib like OpenSSL.  I guess I haven't looked at it recently but the original CPU miner was just implemented locally in bitcoin and didn't use any libs.

It's just that because it's block based, there is no need to ever recalculate the first half since the brute forcing value is in the second half of the block..

This was the original prototype for the OpenCL miner without eliminating redundant calculations and it shows the block1 and block2 calculations clearly.

http://heliacal.net/~solar/bitcoin/sha256.cl

Laszlo

On Sep 29, 2011, at 11:48 AM, Stefan Thomas wrote:

> BitcoinJS uses OpenSSL to calculate midstate:
> 
> https://github.com/bitcoinjs/node-bitcoin-p2p/blob/master/native.cc#L380
> 
> 
> On 9/29/2011 1:40 PM, Nils Schneider wrote:
>> Yes, that's possible and what
>> https://github.com/bitcoin/bitcoin/pull/535 does. However, deprecating
>> midstate (and hash1) would allow for much cleaner code.
>> 
>> A pull request for marking midstate (and hash1) as deprecated can be
>> found at https://github.com/bitcoin/bitcoin/pull/538
>> 
>> On 29.09.2011 12:23, John Smith wrote:
>>> Nils,
>>> 
>>> Sounds good. I'm also doubtful of depending on two crypto libraries when
>>> OpenSSL does perfectly well.
>>> 
>>> However, losing compatibility with miners is not very nice. Is there
>>> really not a way to compute midstate with OpenSSL?
>>> 
>>> JS
>>> 
>>> On Mon, Sep 26, 2011 at 7:42 PM, Nils Schneider<nils at nilsschneider.net
>>> <mailto:nils at nilsschneider.net>>  wrote:
>>> 
>>>     Hey,
>>> 
>>>     I'd like to simplify the internal reference miner and remove all
>>>     dependencies on cryptopp (it's the only place we use cryptopp instead of
>>>     OpenSSL).
>>> 
>>>     Unfortunately, cryptopp is also used to calculate getwork "midstate".
>>>     This field is redundant and the miner could easily calculate it from the
>>>     blockheader so I'd like to remove it.
>>> 
>>>     Any thoughts? Where should such a change should be announced so all
>>>     miners can be upgraded?
>>> 
>>>     ------------------------------------------------------------------------------
>>>     All the data continuously generated in your IT infrastructure contains a
>>>     definitive record of customers, application performance, security
>>>     threats, fraudulent activity and more. Splunk takes this data and makes
>>>     sense of it. Business sense. IT sense. Common sense.
>>>     http://p.sf.net/sfu/splunk-d2dcopy1
>>>     _______________________________________________
>>>     Bitcoin-development mailing list
>>>     Bitcoin-development at lists.sourceforge.net
>>>     <mailto:Bitcoin-development at lists.sourceforge.net>
>>>     https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>> 
>>> 
>> 
>> ------------------------------------------------------------------------------
>> All the data continuously generated in your IT infrastructure contains a
>> definitive record of customers, application performance, security
>> threats, fraudulent activity and more. Splunk takes this data and makes
>> sense of it. Business sense. IT sense. Common sense.
>> http://p.sf.net/sfu/splunk-d2dcopy1
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>> 
> 
> 
> ------------------------------------------------------------------------------
> All the data continuously generated in your IT infrastructure contains a
> definitive record of customers, application performance, security
> threats, fraudulent activity and more. Splunk takes this data and makes
> sense of it. Business sense. IT sense. Common sense.
> http://p.sf.net/sfu/splunk-d2dcopy1
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development




From gavinandresen at gmail.com  Thu Sep 29 16:07:41 2011
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Thu, 29 Sep 2011 12:07:41 -0400
Subject: [Bitcoin-development] Multisignature transations
Message-ID: <CABsx9T2QzafV-uzn7yL01gs2mrzLaP0FCgjt_O--Ldw+s-Xm9w@mail.gmail.com>

Design discussion:  https://gist.github.com/39158239e36f6af69d6f
Pull request:  https://github.com/bitcoin/bitcoin/pull/541

Initial support for multisignature transactions

This adds initial support for three new types of transactions:
(a and b)
(a or b)
(a and b) or c

... where a/b/c are keys. These new transaction types will enable
better wallet security and backup in future versions of bitcoin.

I've taken a conservative approach with this initial pull; the new
transaction types will be relayed and included in blocks, but are
ignored by the wallet code, so will not affect the balance and will
never be considered available to spend. I'm going to start a
discussion on bitcoin-dev to do a bit of a brain-dump on what NOT to
do with multi-signature transactions (there are several potential
attacks that we'll need to be careful to avoid).

I'll be creating a multisig_testing branch in the gavinandresen github
fork that WILL add multisig transactions to the balance, will have a
new RPC call to create multisig transactions, and will be able to
spend the multisig transactions; that will be for testing this PULL
only for now.
=======================

Here's the discussion of potential attacks that occurred to me while I
was working on this:

+ Attacker has an account and a funding address/key ("a") at a
shared-wallet service.  Attacker also has their own address/key ("b").
+ They send 100 bitcoins that can be spent by (a or b).  Note that the
shared-wallet service can't stop the attacker from doing that.

IF the shared-wallet service credits their account (because "a" can
spend the coins), then Bad Things might happen:

+ The shared-wallet service probably assumes that it controls all the
keys in its wallet, and the only time coins in its wallet will be
spent will be when it issues a send* RPC command. But the attacker can
spend using "b" anytime they like.

+ If the shared-wallet service allows importing of keys then the
attacker might be able to get double-credit by importing "b"
(depending on what the 'import private key' code does).

The pull I've submitted doesn't have any of those issues because
multisignature transactions are not credited / added to the wallet.

Going forward, I think the right thing to do is only add
multisignature transactions to the wallet's balance (and make them
available to spend) if the public half of ALL of the keys involved are
known to the wallet.  The private half of the key may not be in the
wallet (maybe it is on another device or maybe it is a deterministic
backup master key protected by a passphrase), but the public key must
be known and in the wallet.


I'd really like to get this into the 0.5 release because it will
enable much better wallet security and backup in some future release
or alternative client (but these transaction types need to be relayed
and mined BEFORE then to make that possible).

-- 
--
Gavin Andresen



From mike at plan99.net  Fri Sep 30 16:25:49 2011
From: mike at plan99.net (Mike Hearn)
Date: Fri, 30 Sep 2011 09:25:49 -0700
Subject: [Bitcoin-development] Multisignature transations
In-Reply-To: <CABsx9T2QzafV-uzn7yL01gs2mrzLaP0FCgjt_O--Ldw+s-Xm9w@mail.gmail.com>
References: <CABsx9T2QzafV-uzn7yL01gs2mrzLaP0FCgjt_O--Ldw+s-Xm9w@mail.gmail.com>
Message-ID: <CANEZrP2fqvivhnjSDsLiYdYJ09E7y+=EmsVH3BvLmA4tGri7bQ@mail.gmail.com>

>
> This adds initial support for three new types of transactions:
> (a and b)
> (a or b)
> (a and b) or c
>

Does this mean dispute mediation (2-of-3) will not be supported? I thought
the plan was also to allow CHECKMULTISIG for smallish numbers of keys.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110930/8500a46b/attachment.html>

From gmaxwell at gmail.com  Fri Sep 30 16:32:11 2011
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Fri, 30 Sep 2011 12:32:11 -0400
Subject: [Bitcoin-development] Multisignature transations
In-Reply-To: <CANEZrP2fqvivhnjSDsLiYdYJ09E7y+=EmsVH3BvLmA4tGri7bQ@mail.gmail.com>
References: <CABsx9T2QzafV-uzn7yL01gs2mrzLaP0FCgjt_O--Ldw+s-Xm9w@mail.gmail.com>
	<CANEZrP2fqvivhnjSDsLiYdYJ09E7y+=EmsVH3BvLmA4tGri7bQ@mail.gmail.com>
Message-ID: <CAAS2fgRCyppz27-_UhjLnK3a8=DBOVMixk1COv5-uYXGa6WuxA@mail.gmail.com>

On Fri, Sep 30, 2011 at 12:25 PM, Mike Hearn <mike at plan99.net> wrote:
>> This adds initial support for three new types of transactions:
>> (a and b)
>> (a or b)
>> (a and b) or c
>
> Does this mean dispute mediation (2-of-3) will not be supported? I thought
> the plan was also to allow CHECKMULTISIG for smallish numbers of keys.

The ease of omitting useful cases is why I was strongly supporting the
full RPN boolean validation, even though it's harder to get good
testing confidence.



From gavinandresen at gmail.com  Fri Sep 30 17:21:33 2011
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Fri, 30 Sep 2011 13:21:33 -0400
Subject: [Bitcoin-development] Multisignature transations
In-Reply-To: <CAAS2fgRCyppz27-_UhjLnK3a8=DBOVMixk1COv5-uYXGa6WuxA@mail.gmail.com>
References: <CABsx9T2QzafV-uzn7yL01gs2mrzLaP0FCgjt_O--Ldw+s-Xm9w@mail.gmail.com>
	<CANEZrP2fqvivhnjSDsLiYdYJ09E7y+=EmsVH3BvLmA4tGri7bQ@mail.gmail.com>
	<CAAS2fgRCyppz27-_UhjLnK3a8=DBOVMixk1COv5-uYXGa6WuxA@mail.gmail.com>
Message-ID: <CABsx9T1uxcyqk+Gxrkhb48moszNtCPVpKzuQdnFznr2ZtP_eiw@mail.gmail.com>

>> Does this mean dispute mediation (2-of-3) will not be supported?

Not with this PULL-- I think wallet security and backup is a critical
feature, so that is what this is for.

> I thought the plan was also to allow CHECKMULTISIG for smallish numbers of keys.

groffer pointed out that might cause problems when transaction volume
ramps up, because each CHECKMULTISIG counts as 20 sigops, and there is
a limit to the number of sigops you can put into a block. And since it
isn't needed for wallet security and backup I dropped it.

Accepting this does not preclude adding more 'standard' transaction
types in the future.

-- 
--
Gavin Andresen



From gmaxwell at gmail.com  Fri Sep 30 17:29:52 2011
From: gmaxwell at gmail.com (Gregory Maxwell)
Date: Fri, 30 Sep 2011 13:29:52 -0400
Subject: [Bitcoin-development] Multisignature transations
In-Reply-To: <CAAS2fgRRws5iG_oirKbgmyySZMZ4tzOC2Nq_12psqeuSH4GyDg@mail.gmail.com>
References: <CABsx9T2QzafV-uzn7yL01gs2mrzLaP0FCgjt_O--Ldw+s-Xm9w@mail.gmail.com>
	<CANEZrP2fqvivhnjSDsLiYdYJ09E7y+=EmsVH3BvLmA4tGri7bQ@mail.gmail.com>
	<CAAS2fgRCyppz27-_UhjLnK3a8=DBOVMixk1COv5-uYXGa6WuxA@mail.gmail.com>
	<CABsx9T1uxcyqk+Gxrkhb48moszNtCPVpKzuQdnFznr2ZtP_eiw@mail.gmail.com>
	<CAAS2fgRRws5iG_oirKbgmyySZMZ4tzOC2Nq_12psqeuSH4GyDg@mail.gmail.com>
Message-ID: <CAAS2fgQG7iFPqSGNdCPCm=b11oHfsDW_d3NM472PJuvk-crjcA@mail.gmail.com>

On Fri, Sep 30, 2011 at 1:21 PM, Gavin Andresen <gavinandresen at gmail.com> wrote:
> Accepting this does not preclude adding more 'standard' transaction
> types in the future.

I think 2 of 3 is a _far_ more useful example than (a or b), ?it is
the prototype for a normal escrow transaction., and still only results
in three address and at most two signatures like the (A and B) or C
case.

You can also replicate the functionality of (a or b) in a hashish and
inefficient sort of way with two of three by simply using a public
known key as one of the roles.



From gavinandresen at gmail.com  Fri Sep 30 17:57:38 2011
From: gavinandresen at gmail.com (Gavin Andresen)
Date: Fri, 30 Sep 2011 13:57:38 -0400
Subject: [Bitcoin-development] Multisignature transations
In-Reply-To: <CAAS2fgQG7iFPqSGNdCPCm=b11oHfsDW_d3NM472PJuvk-crjcA@mail.gmail.com>
References: <CABsx9T2QzafV-uzn7yL01gs2mrzLaP0FCgjt_O--Ldw+s-Xm9w@mail.gmail.com>
	<CANEZrP2fqvivhnjSDsLiYdYJ09E7y+=EmsVH3BvLmA4tGri7bQ@mail.gmail.com>
	<CAAS2fgRCyppz27-_UhjLnK3a8=DBOVMixk1COv5-uYXGa6WuxA@mail.gmail.com>
	<CABsx9T1uxcyqk+Gxrkhb48moszNtCPVpKzuQdnFznr2ZtP_eiw@mail.gmail.com>
	<CAAS2fgRRws5iG_oirKbgmyySZMZ4tzOC2Nq_12psqeuSH4GyDg@mail.gmail.com>
	<CAAS2fgQG7iFPqSGNdCPCm=b11oHfsDW_d3NM472PJuvk-crjcA@mail.gmail.com>
Message-ID: <CABsx9T0SJUNxzN90dzuTpKPxXQ8xNfOQXecftM0HN7bxN3XP_Q@mail.gmail.com>

RE: 2 of 3 being far more useful:

So create a clean pull request, unit tests, and test plan for an
"IsStandard" 2-of-3 transaction, either using CHECKMULTISIG or
groffers proposal:

0
OVER 2SWAP CHECKSIG SWAP HASH160 {pk1hash} EQUAL BOOLAND ADD
OVER 2SWAP CHECKSIG SWAP HASH160 {pk2hash} EQUAL BOOLAND ADD
OVER 2SWAP CHECKSIG SWAP HASH160 {pk3hash} EQUAL BOOLAND ADD
2 GREATERTHANOREQUAL

The low-level support is relatively easy, reporting these transactions
in listtransactions and figuring out if or how to report them in your
wallet balance is tricky.

I generated and then spent three multisig transactions on testnet:
 http://blockexplorer.com/testnet/block/0000000000cfe382f690777e3b52ea255717122465db6fcfd80efdf2d0080d8b

Code I used to send them is:
 https://github.com/gavinandresen/bitcoin-git/tree/multisig_testing
(that code is NOT intended for mainline bitcoin, I just needed a way
of testing the new transactions).

-- 
--
Gavin Andresen



